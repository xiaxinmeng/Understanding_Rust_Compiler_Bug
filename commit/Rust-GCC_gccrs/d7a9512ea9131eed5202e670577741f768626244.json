{"sha": "d7a9512ea9131eed5202e670577741f768626244", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDdhOTUxMmVhOTEzMWVlZDUyMDJlNjcwNTc3NzQxZjc2ODYyNjI0NA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2017-11-09T13:08:41Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-11-09T13:08:41Z"}, "message": "gimple-ssa-store-merging.c (count_multiple_uses): New function.\n\n\t* gimple-ssa-store-merging.c (count_multiple_uses): New function.\n\t(split_group): Add total_orig and total_new arguments, estimate the\n\tnumber of statements related to the store group without store merging\n\tand with store merging.\n\t(imm_store_chain_info::output_merged_store): Adjust split_group\n\tcallers, punt if estimated number of statements with store merging\n\tis not smaller than estimated number of statements without it.\n\tFormatting fix.\n\t(handled_load): Remove has_single_use checks.\n\t(pass_store_merging::process_store): Likewise.\n\nFrom-SVN: r254579", "tree": {"sha": "39accfaa39f0c595373475de9c5335ae63373e43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/39accfaa39f0c595373475de9c5335ae63373e43"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d7a9512ea9131eed5202e670577741f768626244", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7a9512ea9131eed5202e670577741f768626244", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7a9512ea9131eed5202e670577741f768626244", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7a9512ea9131eed5202e670577741f768626244/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "614bc51c3f2a933e694013e6c867dfdcd153017f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/614bc51c3f2a933e694013e6c867dfdcd153017f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/614bc51c3f2a933e694013e6c867dfdcd153017f"}], "stats": {"total": 173, "additions": 159, "deletions": 14}, "files": [{"sha": "df371fd5391412ae62c9980c06a9ae532fad161f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7a9512ea9131eed5202e670577741f768626244/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7a9512ea9131eed5202e670577741f768626244/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d7a9512ea9131eed5202e670577741f768626244", "patch": "@@ -1,3 +1,16 @@\n+2017-11-09  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gimple-ssa-store-merging.c (count_multiple_uses): New function.\n+\t(split_group): Add total_orig and total_new arguments, estimate the\n+\tnumber of statements related to the store group without store merging\n+\tand with store merging.\n+\t(imm_store_chain_info::output_merged_store): Adjust split_group\n+\tcallers, punt if estimated number of statements with store merging\n+\tis not smaller than estimated number of statements without it.\n+\tFormatting fix.\n+\t(handled_load): Remove has_single_use checks.\n+\t(pass_store_merging::process_store): Likewise.\n+\n 2017-11-09  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/82902"}, {"sha": "4bae70dc7ac6fd3bdd6344b9fa9ffa377be4a376", "filename": "gcc/gimple-ssa-store-merging.c", "status": "modified", "additions": 146, "deletions": 14, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7a9512ea9131eed5202e670577741f768626244/gcc%2Fgimple-ssa-store-merging.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7a9512ea9131eed5202e670577741f768626244/gcc%2Fgimple-ssa-store-merging.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-store-merging.c?ref=d7a9512ea9131eed5202e670577741f768626244", "patch": "@@ -1370,6 +1370,65 @@ find_constituent_stores (struct merged_store_group *group,\n   return ret;\n }\n \n+/* Return how many SSA_NAMEs used to compute value to store in the INFO\n+   store have multiple uses.  If any SSA_NAME has multiple uses, also\n+   count statements needed to compute it.  */\n+\n+static unsigned\n+count_multiple_uses (store_immediate_info *info)\n+{\n+  gimple *stmt = info->stmt;\n+  unsigned ret = 0;\n+  switch (info->rhs_code)\n+    {\n+    case INTEGER_CST:\n+      return 0;\n+    case BIT_AND_EXPR:\n+    case BIT_IOR_EXPR:\n+    case BIT_XOR_EXPR:\n+      if (!has_single_use (gimple_assign_rhs1 (stmt)))\n+\t{\n+\t  ret += 1 + info->ops[0].bit_not_p;\n+\t  if (info->ops[1].base_addr)\n+\t    ret += 1 + info->ops[1].bit_not_p;\n+\t  return ret + 1;\n+\t}\n+      stmt = SSA_NAME_DEF_STMT (gimple_assign_rhs1 (stmt));\n+      /* stmt is now the BIT_*_EXPR.  */\n+      if (!has_single_use (gimple_assign_rhs1 (stmt)))\n+\tret += 1 + info->ops[0].bit_not_p;\n+      else if (info->ops[0].bit_not_p)\n+\t{\n+\t  gimple *stmt2 = SSA_NAME_DEF_STMT (gimple_assign_rhs1 (stmt));\n+\t  if (!has_single_use (gimple_assign_rhs1 (stmt2)))\n+\t    ++ret;\n+\t}\n+      if (info->ops[1].base_addr == NULL_TREE)\n+\treturn ret;\n+      if (!has_single_use (gimple_assign_rhs2 (stmt)))\n+\tret += 1 + info->ops[1].bit_not_p;\n+      else if (info->ops[1].bit_not_p)\n+\t{\n+\t  gimple *stmt2 = SSA_NAME_DEF_STMT (gimple_assign_rhs2 (stmt));\n+\t  if (!has_single_use (gimple_assign_rhs1 (stmt2)))\n+\t    ++ret;\n+\t}\n+      return ret;\n+    case MEM_REF:\n+      if (!has_single_use (gimple_assign_rhs1 (stmt)))\n+\treturn 1 + info->ops[0].bit_not_p;\n+      else if (info->ops[0].bit_not_p)\n+\t{\n+\t  stmt = SSA_NAME_DEF_STMT (gimple_assign_rhs1 (stmt));\n+\t  if (!has_single_use (gimple_assign_rhs1 (stmt)))\n+\t    return 1;\n+\t}\n+      return 0;\n+    default:\n+      gcc_unreachable ();\n+    }\n+}\n+\n /* Split a merged store described by GROUP by populating the SPLIT_STORES\n    vector (if non-NULL) with split_store structs describing the byte offset\n    (from the base), the bit size and alignment of each store as well as the\n@@ -1385,21 +1444,52 @@ find_constituent_stores (struct merged_store_group *group,\n static unsigned int\n split_group (merged_store_group *group, bool allow_unaligned_store,\n \t     bool allow_unaligned_load,\n-\t     vec<struct split_store *> *split_stores)\n+\t     vec<struct split_store *> *split_stores,\n+\t     unsigned *total_orig,\n+\t     unsigned *total_new)\n {\n   unsigned HOST_WIDE_INT pos = group->bitregion_start;\n   unsigned HOST_WIDE_INT size = group->bitregion_end - pos;\n   unsigned HOST_WIDE_INT bytepos = pos / BITS_PER_UNIT;\n   unsigned HOST_WIDE_INT group_align = group->align;\n   unsigned HOST_WIDE_INT align_base = group->align_base;\n   unsigned HOST_WIDE_INT group_load_align = group_align;\n+  bool any_orig = false;\n \n   gcc_assert ((size % BITS_PER_UNIT == 0) && (pos % BITS_PER_UNIT == 0));\n \n   unsigned int ret = 0, first = 0;\n   unsigned HOST_WIDE_INT try_pos = bytepos;\n   group->stores.qsort (sort_by_bitpos);\n \n+  if (total_orig)\n+    {\n+      unsigned int i;\n+      store_immediate_info *info = group->stores[0];\n+\n+      total_new[0] = 0;\n+      total_orig[0] = 1; /* The orig store.  */\n+      info = group->stores[0];\n+      if (info->ops[0].base_addr)\n+\ttotal_orig[0] += 1 + info->ops[0].bit_not_p;\n+      if (info->ops[1].base_addr)\n+\ttotal_orig[0] += 1 + info->ops[1].bit_not_p;\n+      switch (info->rhs_code)\n+\t{\n+\tcase BIT_AND_EXPR:\n+\tcase BIT_IOR_EXPR:\n+\tcase BIT_XOR_EXPR:\n+\t  total_orig[0]++; /* The orig BIT_*_EXPR stmt.  */\n+\t  break;\n+\tdefault:\n+\t  break;\n+\t}\n+      total_orig[0] *= group->stores.length ();\n+\n+      FOR_EACH_VEC_ELT (group->stores, i, info)\n+\ttotal_new[0] += count_multiple_uses (info);\n+    }\n+\n   if (!allow_unaligned_load)\n     for (int i = 0; i < 2; ++i)\n       if (group->load_align[i])\n@@ -1524,14 +1614,48 @@ split_group (merged_store_group *group, bool allow_unaligned_store,\n \t  if (info\n \t      && info->bitpos >= try_bitpos\n \t      && info->bitpos + info->bitsize <= try_bitpos + try_size)\n-\t    store->orig = true;\n+\t    {\n+\t      store->orig = true;\n+\t      any_orig = true;\n+\t    }\n \t  split_stores->safe_push (store);\n \t}\n \n       try_pos += try_size / BITS_PER_UNIT;\n       size -= try_size;\n     }\n \n+  if (total_orig)\n+    {\n+      /* If we are reusing some original stores and any of the\n+\t original SSA_NAMEs had multiple uses, we need to subtract\n+\t those now before we add the new ones.  */\n+      if (total_new[0] && any_orig)\n+\t{\n+\t  unsigned int i;\n+\t  struct split_store *store;\n+\t  FOR_EACH_VEC_ELT (*split_stores, i, store)\n+\t    if (store->orig)\n+\t      total_new[0] -= count_multiple_uses (store->orig_stores[0]);\n+\t}\n+      total_new[0] += ret; /* The new store.  */\n+      store_immediate_info *info = group->stores[0];\n+      if (info->ops[0].base_addr)\n+\ttotal_new[0] += ret * (1 + info->ops[0].bit_not_p);\n+      if (info->ops[1].base_addr)\n+\ttotal_new[0] += ret * (1 + info->ops[1].bit_not_p);\n+      switch (info->rhs_code)\n+\t{\n+\tcase BIT_AND_EXPR:\n+\tcase BIT_IOR_EXPR:\n+\tcase BIT_XOR_EXPR:\n+\t  total_new[0] += ret; /* The new BIT_*_EXPR stmt.  */\n+\t  break;\n+\tdefault:\n+\t  break;\n+\t}\n+    }\n+\n   return ret;\n }\n \n@@ -1564,26 +1688,35 @@ imm_store_chain_info::output_merged_store (merged_store_group *group)\n \t for unaligned and how many stores we'd emit for aligned stores.\n \t Only use unaligned stores if it allows fewer stores than aligned.  */\n       unsigned aligned_cnt\n-\t= split_group (group, false, allow_unaligned_load, NULL);\n+\t= split_group (group, false, allow_unaligned_load, NULL, NULL, NULL);\n       unsigned unaligned_cnt\n-\t= split_group (group, true, allow_unaligned_load, NULL);\n+\t= split_group (group, true, allow_unaligned_load, NULL, NULL, NULL);\n       if (aligned_cnt <= unaligned_cnt)\n \tallow_unaligned_store = false;\n     }\n+  unsigned total_orig, total_new;\n   split_group (group, allow_unaligned_store, allow_unaligned_load,\n-\t       &split_stores);\n+\t       &split_stores, &total_orig, &total_new);\n \n   if (split_stores.length () >= orig_num_stmts)\n     {\n       /* We didn't manage to reduce the number of statements.  Bail out.  */\n       if (dump_file && (dump_flags & TDF_DETAILS))\n-\t{\n-\t  fprintf (dump_file, \"Exceeded original number of stmts (%u).\"\n-\t\t\t      \"  Not profitable to emit new sequence.\\n\",\n-\t\t   orig_num_stmts);\n-\t}\n+\tfprintf (dump_file, \"Exceeded original number of stmts (%u).\"\n+\t\t\t    \"  Not profitable to emit new sequence.\\n\",\n+\t\t orig_num_stmts);\n       return false;\n     }\n+  if (total_orig <= total_new)\n+    {\n+      /* If number of estimated new statements is above estimated original\n+\t statements, bail out too.  */\n+      if (dump_file && (dump_flags & TDF_DETAILS))\n+\tfprintf (dump_file, \"Estimated number of original stmts (%u)\"\n+\t\t\t    \" not larger than estimated number of new\"\n+\t\t\t    \" stmts (%u).\\n\",\n+\t\t total_orig, total_new);\n+    }\n \n   gimple_stmt_iterator last_gsi = gsi_for_stmt (group->last_stmt);\n   gimple_seq seq = NULL;\n@@ -2096,7 +2229,6 @@ handled_load (gimple *stmt, store_operand_info *op,\n     {\n       tree rhs1 = gimple_assign_rhs1 (stmt);\n       if (TREE_CODE (rhs1) == SSA_NAME\n-\t  && has_single_use (rhs1)\n \t  && handled_load (SSA_NAME_DEF_STMT (rhs1), op, bitsize, bitpos,\n \t\t\t   bitregion_start, bitregion_end))\n \t{\n@@ -2159,7 +2291,7 @@ pass_store_merging::process_store (gimple *stmt)\n       rhs_code = INTEGER_CST;\n       ops[0].val = rhs;\n     }\n-  else if (TREE_CODE (rhs) != SSA_NAME || !has_single_use (rhs))\n+  else if (TREE_CODE (rhs) != SSA_NAME)\n     invalid = true;\n   else\n     {\n@@ -2179,7 +2311,7 @@ pass_store_merging::process_store (gimple *stmt)\n \t    rhs1 = gimple_assign_rhs1 (def_stmt);\n \t    rhs2 = gimple_assign_rhs2 (def_stmt);\n \t    invalid = true;\n-\t    if (TREE_CODE (rhs1) != SSA_NAME || !has_single_use (rhs1))\n+\t    if (TREE_CODE (rhs1) != SSA_NAME)\n \t      break;\n \t    def_stmt1 = SSA_NAME_DEF_STMT (rhs1);\n \t    if (!is_gimple_assign (def_stmt1)\n@@ -2188,7 +2320,7 @@ pass_store_merging::process_store (gimple *stmt)\n \t      break;\n \t    if (rhs_valid_for_store_merging_p (rhs2))\n \t      ops[1].val = rhs2;\n-\t    else if (TREE_CODE (rhs2) != SSA_NAME || !has_single_use (rhs2))\n+\t    else if (TREE_CODE (rhs2) != SSA_NAME)\n \t      break;\n \t    else\n \t      {"}]}