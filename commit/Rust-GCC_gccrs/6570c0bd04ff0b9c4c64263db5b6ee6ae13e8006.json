{"sha": "6570c0bd04ff0b9c4c64263db5b6ee6ae13e8006", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjU3MGMwYmQwNGZmMGI5YzRjNjQyNjNkYjViNmVlNmFlMTNlODAwNg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jj@ultra.linux.cz", "date": "1999-06-06T11:59:13Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1999-06-06T11:59:13Z"}, "message": "Jakub Jelinek <jj@ultra.linux.cz>\n\nJakub Jelinek  <jj@ultra.linux.cz>\n        * sparc.md (abstf2): This should be an expand.\n        (split after abstf2_notv9): Fix mode.\n        (abstf2_hq_v9): New pattern.\n        (abstf2_v9): Only use when no hard quad.\n        (absdf2_v9): Fix if target is not the same as source.\n        (ashrsi3_extend, ashrsi3_extend2, lshrsi3_extend, lshrsi3_extend2):\n        Add correct output constraints.\n\nFrom-SVN: r27384", "tree": {"sha": "b44ca17316303daebe3401245c919aef16426452", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b44ca17316303daebe3401245c919aef16426452"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6570c0bd04ff0b9c4c64263db5b6ee6ae13e8006", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6570c0bd04ff0b9c4c64263db5b6ee6ae13e8006", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6570c0bd04ff0b9c4c64263db5b6ee6ae13e8006", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6570c0bd04ff0b9c4c64263db5b6ee6ae13e8006/comments", "author": null, "committer": null, "parents": [{"sha": "9223feaacb82177fcc52d5e181fee2213dc2e2a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9223feaacb82177fcc52d5e181fee2213dc2e2a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9223feaacb82177fcc52d5e181fee2213dc2e2a6"}], "stats": {"total": 39, "additions": 29, "deletions": 10}, "files": [{"sha": "a8a961b740ddd68e6fe8cb6c9f3213c5352cfaf3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6570c0bd04ff0b9c4c64263db5b6ee6ae13e8006/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6570c0bd04ff0b9c4c64263db5b6ee6ae13e8006/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6570c0bd04ff0b9c4c64263db5b6ee6ae13e8006", "patch": "@@ -1,3 +1,13 @@\n+Sun Jun  6 11:58:34 1999  Jakub Jelinek  <jj@ultra.linux.cz>\n+\n+\t* sparc.md (abstf2): This should be an expand.\n+\t(split after abstf2_notv9): Fix mode.\n+\t(abstf2_hq_v9): New pattern.\n+\t(abstf2_v9): Only use when no hard quad.\n+\t(absdf2_v9): Fix if target is not the same as source.\n+\t(ashrsi3_extend, ashrsi3_extend2, lshrsi3_extend, lshrsi3_extend2):\n+\tAdd correct output constraints.\n+\n Sat Jun  5 17:04:16 1999  Craig Burley  <craig@jcb-sc.com>\n \n \tFrom Dave Love to egcs-patches on 20 May 1999 17:38:38 +0100:"}, {"sha": "02170b75fca8a644a1d65a859701e1d3720d2006", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6570c0bd04ff0b9c4c64263db5b6ee6ae13e8006/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6570c0bd04ff0b9c4c64263db5b6ee6ae13e8006/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=6570c0bd04ff0b9c4c64263db5b6ee6ae13e8006", "patch": "@@ -6789,7 +6789,7 @@\n   [(set_attr \"type\" \"fpmove\")\n    (set_attr \"length\" \"1\")])\n \n-(define_insn \"abstf2\"\n+(define_expand \"abstf2\"\n   [(set (match_operand:TF 0 \"register_operand\" \"\")\n \t(abs:TF (match_operand:TF 1 \"register_operand\" \"\")))]\n   \"TARGET_FPU\"\n@@ -6824,14 +6824,23 @@\n    operands[3] = gen_rtx_raw_REG (SFmode, REGNO (operands[1]));\n    operands[4] = gen_rtx_raw_REG (SFmode, REGNO (operands[0]) + 1);\n    operands[5] = gen_rtx_raw_REG (SFmode, REGNO (operands[1]) + 1);\n-   operands[6] = gen_rtx_raw_REG (SFmode, REGNO (operands[0]) + 2);\n-   operands[7] = gen_rtx_raw_REG (SFmode, REGNO (operands[1]) + 2);\")\n+   operands[6] = gen_rtx_raw_REG (DFmode, REGNO (operands[0]) + 2);\n+   operands[7] = gen_rtx_raw_REG (DFmode, REGNO (operands[1]) + 2);\")\n+\n+(define_insn \"*abstf2_hq_v9\"\n+  [(set (match_operand:TF 0 \"register_operand\" \"=e,e\")\n+\t(abs:TF (match_operand:TF 1 \"register_operand\" \"0,e\")))]\n+  \"TARGET_FPU && TARGET_V9 && TARGET_HARD_QUAD\"\n+  \"@\n+  fabsd\\\\t%0, %0\n+  fabsq\\\\t%1, %0\"\n+  [(set_attr \"type\" \"fpmove\")\n+   (set_attr \"length\" \"1\")])\n \n (define_insn \"*abstf2_v9\"\n   [(set (match_operand:TF 0 \"register_operand\" \"=e,e\")\n \t(abs:TF (match_operand:TF 1 \"register_operand\" \"0,e\")))]\n-  ; We don't use quad float insns here so we don't need TARGET_HARD_QUAD.\n-  \"TARGET_FPU && TARGET_V9\"\n+  \"TARGET_FPU && TARGET_V9 && !TARGET_HARD_QUAD\"\n   \"@\n   fabsd\\\\t%0, %0\n   #\"\n@@ -6894,7 +6903,7 @@\n   [(set (match_operand:DF 0 \"register_operand\" \"=e\")\n \t(abs:DF (match_operand:DF 1 \"register_operand\" \"e\")))]\n   \"TARGET_FPU && TARGET_V9\"\n-  \"fabsd\\\\t%0, %0\"\n+  \"fabsd\\\\t%1, %0\"\n   [(set_attr \"type\" \"fpmove\")\n    (set_attr \"length\" \"1\")])\n \n@@ -7068,7 +7077,7 @@\n    (set_attr \"length\" \"1\")])\n \n (define_insn \"*ashrsi3_extend\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(sign_extend:DI (ashiftrt:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t\t\t     (match_operand:SI 2 \"arith_operand\" \"r\"))))]\n   \"TARGET_ARCH64\"\n@@ -7079,7 +7088,7 @@\n ;; This handles the case as above, but with constant shift instead of\n ;; register. Combiner \"simplifies\" it for us a little bit though.\n (define_insn \"*ashrsi3_extend2\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(ashiftrt:DI (ashift:DI (subreg:DI (match_operand:SI 1 \"register_operand\" \"r\") 0)\n \t\t\t\t(const_int 32))\n \t\t     (match_operand:SI 2 \"small_int_or_double\" \"n\")))]\n@@ -7161,7 +7170,7 @@\n ;; (zero_extend:DI (lshiftrt:SI (match_operand:SI) (match_operand:SI))),\n ;; but combiner \"simplifies\" it for us.\n (define_insn \"*lshrsi3_extend\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(and:DI (subreg:DI (lshiftrt:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t\t   (match_operand:SI 2 \"arith_operand\" \"r\")) 0)\n \t\t(match_operand 3 \"\" \"\")))]\n@@ -7182,7 +7191,7 @@\n ;; (lshiftrt:DI (zero_extend:DI (match_operand:SI)) (const_int >=0 < 32))\n ;; but combiner \"simplifies\" it for us.\n (define_insn \"*lshrsi3_extend2\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(zero_extract:DI (subreg:DI (match_operand:SI 1 \"register_operand\" \"r\") 0)\n \t\t\t (match_operand 2 \"small_int_or_double\" \"n\")\n \t\t\t (const_int 32)))]"}]}