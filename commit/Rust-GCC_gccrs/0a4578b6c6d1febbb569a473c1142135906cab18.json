{"sha": "0a4578b6c6d1febbb569a473c1142135906cab18", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGE0NTc4YjZjNmQxZmViYmI1NjlhNDczYzExNDIxMzU5MDZjYWIxOA==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2018-12-11T11:11:17Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-12-11T11:11:17Z"}, "message": "[Ada] Missing predicate check on declaration with aggregate expression\n\nThis patch adds a missing predicate check on the initial value of an\nobject whose declaration initializes the object with an aggregate. Such\na declaration is marked No_Initialization to prevent a call to a default\ninitialization procedure, but the check is needed on the value of the\naggregate.\n\nExecuting the following:\n\n   gnatmake -q -gnata pred\n   ./pred\n\nmust yield:\n\n   raised SYSTEM.ASSERTIONS.ASSERT_FAILURE :\n             Dynamic_Predicate failed at root.ads:30\n\n----\nwith Root;\n\nprocedure Pred is\nbegin\n   null;\nend Pred;\n----\npackage Root with SPARK_Mode is\n   type Index_Type is range 1 .. Natural'Last;\n\n   type Element_Type is private;\n   Null_Element : constant Element_Type;\n\n   type Foobar_Type is array (Index_Type range <>) of Element_Type\n     with Dynamic_Predicate =>\n            Foobar_Type'First > 0 and Foobar_Type'Length > 0;\n\n   Null_Foobar : constant Foobar_Type;\n\nprivate\n   type Kind_Type is (Kind_Invalid, Kind_Valid);\n\n   type Element_Type (Kind : Kind_Type := Kind_Invalid) is record\n      Index1 : Index_Type;\n\n      case Kind is\n         when Kind_Valid =>\n            Index2 : Index_Type;\n         when Kind_Invalid =>\n            null;\n      end case;\n   end record;\n\n   Null_Element : constant Element_Type := (Kind   => Kind_Invalid,\n                                            Index1 => Index_Type'First);\n\n   Null_Foobar : constant Foobar_Type := (1 .. 0 => Null_Element);\nend Root;\n\n2018-12-11  Ed Schonberg  <schonberg@adacore.com>\n\ngcc/ada/\n\n\t* sem_ch3.adb (Analyze_Object_Declaration): Apply\n\tDynamic_Predicate check to an object of an array type\n\tinitialized with an aggregate.\n\nFrom-SVN: r267002", "tree": {"sha": "5f162034b1037aed62701a96d2c3c5dda2448783", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5f162034b1037aed62701a96d2c3c5dda2448783"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0a4578b6c6d1febbb569a473c1142135906cab18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a4578b6c6d1febbb569a473c1142135906cab18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a4578b6c6d1febbb569a473c1142135906cab18", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a4578b6c6d1febbb569a473c1142135906cab18/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0617753f4a5bda865efe66192841c40abdab8c2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0617753f4a5bda865efe66192841c40abdab8c2e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0617753f4a5bda865efe66192841c40abdab8c2e"}], "stats": {"total": 13, "additions": 12, "deletions": 1}, "files": [{"sha": "1f59c88303b14e83b5dee544a565a1821e11d195", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a4578b6c6d1febbb569a473c1142135906cab18/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a4578b6c6d1febbb569a473c1142135906cab18/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=0a4578b6c6d1febbb569a473c1142135906cab18", "patch": "@@ -1,3 +1,9 @@\n+2018-12-11  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch3.adb (Analyze_Object_Declaration): Apply\n+\tDynamic_Predicate check to an object of an array type\n+\tinitialized with an aggregate.\n+\n 2018-12-11  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* freeze.adb (Add_To_Result): Move the ignored Ghost-specific"}, {"sha": "bbae46858f22e2e472623b031fb1731218922d1d", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a4578b6c6d1febbb569a473c1142135906cab18/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a4578b6c6d1febbb569a473c1142135906cab18/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=0a4578b6c6d1febbb569a473c1142135906cab18", "patch": "@@ -4454,11 +4454,16 @@ package body Sem_Ch3 is\n       --  default initialization when we have at least one case of an explicit\n       --  default initial value and then this is not an internal declaration\n       --  whose initialization comes later (as for an aggregate expansion).\n+      --  If expression is an aggregate it may be expanded into assignments\n+      --  and the declaration itself is marked with No_Initialization, but\n+      --  the predicate still applies.\n \n       if not Suppress_Assignment_Checks (N)\n         and then Present (Predicate_Function (T))\n         and then not Predicates_Ignored (T)\n-        and then not No_Initialization (N)\n+        and then\n+          (not No_Initialization (N)\n+            or else (Present (E) and then Nkind (E) = N_Aggregate))\n         and then\n           (Present (E)\n             or else"}]}