{"sha": "994c1cc04dda157794990bbe71412678e3d7fad8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTk0YzFjYzA0ZGRhMTU3Nzk0OTkwYmJlNzE0MTI2NzhlM2Q3ZmFkOA==", "commit": {"author": {"name": "Steven G. Kargl", "email": "kargls@comcast.net", "date": "2006-08-06T01:38:46Z"}, "committer": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2006-08-06T01:38:46Z"}, "message": "re PR fortran/28548 ([4.1 only] Optional argument failed)\n\n2006-08-05  Steven G. Kargl <kargls@comcast.nt>\n\n\tPR fortran/28548\n\t* gfortran.dg/elemental_optional_args_1.f90: dg-error becomes\n\tdg-warning.  Add -pedantic option.\n\n\t* resolve.c(resolve_elemental_actual): Add flags.h to use -pedantic\n\tand exclude conversion functions in conditional.  Change gfc_error\n\tto gfc_warning.\n\t(warn_unused_label) Rename to ...\n\t(warn_unused_fortran_label) avoid warn_unused_label in flags.h.\n\nFrom-SVN: r115963", "tree": {"sha": "011f1ce49320db5a0f8f0dc167021ebd417acd6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/011f1ce49320db5a0f8f0dc167021ebd417acd6e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/994c1cc04dda157794990bbe71412678e3d7fad8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/994c1cc04dda157794990bbe71412678e3d7fad8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/994c1cc04dda157794990bbe71412678e3d7fad8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/994c1cc04dda157794990bbe71412678e3d7fad8/comments", "author": null, "committer": null, "parents": [{"sha": "676d444a0290b94f490c1206d6faa3715c2a8f6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/676d444a0290b94f490c1206d6faa3715c2a8f6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/676d444a0290b94f490c1206d6faa3715c2a8f6b"}], "stats": {"total": 51, "additions": 35, "deletions": 16}, "files": [{"sha": "7be47e2ea697dd40d0c9c0da0d9c92a9d4744d3f", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/994c1cc04dda157794990bbe71412678e3d7fad8/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/994c1cc04dda157794990bbe71412678e3d7fad8/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=994c1cc04dda157794990bbe71412678e3d7fad8", "patch": "@@ -1,3 +1,12 @@\n+2006-08-05  Steven G. Kargl <kargls@comcast.nt>\n+\n+\tPR fortran/28548\n+\t* resolve.c(resolve_elemental_actual): Add flags.h to use -pedantic\n+\tand exclude conversion functions in conditional.  Change gfc_error\n+\tto gfc_warning.\n+\t(warn_unused_label) Rename to ...\n+\t(warn_unused_fortran_label) avoid warn_unused_label in flags.h.\n+     \n 2006-07-30  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n \n \t* intrinsic.c (add_functions): Add ACCESS, CHMOD, RSHIFT, LSHIFT."}, {"sha": "c327a82c9d0480eb886b32b3b3634b37ba6c5141", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/994c1cc04dda157794990bbe71412678e3d7fad8/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/994c1cc04dda157794990bbe71412678e3d7fad8/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=994c1cc04dda157794990bbe71412678e3d7fad8", "patch": "@@ -23,6 +23,7 @@ Software Foundation, 51 Franklin Street, Fifth Floor,Boston, MA\n \n #include \"config.h\"\n #include \"system.h\"\n+#include \"flags.h\"\n #include \"gfortran.h\"\n #include \"arith.h\"  /* For gfc_compare_expr().  */\n #include \"dependency.h\"\n@@ -1007,18 +1008,19 @@ resolve_elemental_actual (gfc_expr *expr, gfc_code *c)\n       else if (isym)\n \tformal_optional = true;\n \n-      if (arg->expr != NULL\n+      if (pedantic && arg->expr != NULL\n \t    && arg->expr->expr_type == EXPR_VARIABLE\n \t    && arg->expr->symtree->n.sym->attr.optional\n \t    && formal_optional\n \t    && arg->expr->rank\n-\t    && (set_by_optional || arg->expr->rank != rank)) \n+\t    && (set_by_optional || arg->expr->rank != rank)\n+\t    && !(isym && isym->generic_id == GFC_ISYM_CONVERSION)) \n \t{\n-\t  gfc_error (\"'%s' at %L is an array and OPTIONAL; it cannot \"\n-\t\t     \"therefore be an actual argument of an ELEMENTAL \" \n-\t\t     \"procedure unless there is a non-optional argument \"\n-\t\t     \"with the same rank (12.4.1.5)\",\n-\t\t     arg->expr->symtree->n.sym->name, &arg->expr->where);\n+\t  gfc_warning (\"'%s' at %L is an array and OPTIONAL; IF IT IS \"\n+\t\t       \"MISSING, it cannot be the actual argument of an \"\n+\t\t       \"ELEMENTAL procedure unless there is a non-optional\"\n+\t\t       \"argument with the same rank (12.4.1.5)\",\n+\t\t       arg->expr->symtree->n.sym->name, &arg->expr->where);\n \t  return FAILURE;\n \t}\n     }\n@@ -6100,12 +6102,12 @@ gfc_elemental (gfc_symbol * sym)\n /* Warn about unused labels.  */\n \n static void\n-warn_unused_label (gfc_st_label * label)\n+warn_unused_fortran_label (gfc_st_label * label)\n {\n   if (label == NULL)\n     return;\n \n-  warn_unused_label (label->left);\n+  warn_unused_fortran_label (label->left);\n \n   if (label->defined == ST_LABEL_UNKNOWN)\n     return;\n@@ -6126,7 +6128,7 @@ warn_unused_label (gfc_st_label * label)\n       break;\n     }\n \n-  warn_unused_label (label->right);\n+  warn_unused_fortran_label (label->right);\n }\n \n \n@@ -6649,7 +6651,7 @@ resolve_types (gfc_namespace * ns)\n \n   /* Warn about unused labels.  */\n   if (gfc_option.warn_unused_labels)\n-    warn_unused_label (ns->st_labels);\n+    warn_unused_fortran_label (ns->st_labels);\n \n   gfc_resolve_uops (ns->uop_root);\n     "}, {"sha": "7aa23eb3e222ca108a788c743cfaf6c0a9a760dc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/994c1cc04dda157794990bbe71412678e3d7fad8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/994c1cc04dda157794990bbe71412678e3d7fad8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=994c1cc04dda157794990bbe71412678e3d7fad8", "patch": "@@ -1,3 +1,9 @@\n+2006-08-05  Steven G. Kargl <kargls@comcast.nt>\n+\n+\tPR fortran/28548\n+\t* gfortran.dg/elemental_optional_args_1.f90: dg-error becomes\n+\tdg-warning.  Add -pedantic option.\n+\n 2006-08-05  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n \n \tPR c/28502"}, {"sha": "4f274baa20bf3ad4b4e1c1836cbc446bc90be7d2", "filename": "gcc/testsuite/gfortran.dg/elemental_optional_args_1.f90", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/994c1cc04dda157794990bbe71412678e3d7fad8/gcc%2Ftestsuite%2Fgfortran.dg%2Felemental_optional_args_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/994c1cc04dda157794990bbe71412678e3d7fad8/gcc%2Ftestsuite%2Fgfortran.dg%2Felemental_optional_args_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Felemental_optional_args_1.f90?ref=994c1cc04dda157794990bbe71412678e3d7fad8", "patch": "@@ -1,4 +1,5 @@\n ! { dg-do compile }\n+! { dg-options \"-pedantic\" }\n ! Check the fix for PR20893, in which actual arguments could violate: \n ! \"(5) If it is an array, it shall not be supplied as an actual argument to\n ! an elemental procedure unless an array of the same rank is supplied as an\n@@ -21,19 +22,19 @@ end function efoo\n     end interface\n \n ! check an intrinsic function\n-    write(6,*) MAX(A1,A2,A3) ! { dg-error \"array and OPTIONAL\" }\n+    write(6,*) MAX(A1,A2,A3) ! { dg-warning \"array and OPTIONAL\" }\n     write(6,*) MAX(A1,A3,A2)\n     write(6,*) MAX(A1,A4,A3)\n ! check an internal elemental function\n-    write(6,*) foo(A1,A2,A3) ! { dg-error \"array and OPTIONAL\" }\n+    write(6,*) foo(A1,A2,A3) ! { dg-warning \"array and OPTIONAL\" }\n     write(6,*) foo(A1,A3,A2)\n     write(6,*) foo(A1,A4,A3)\n ! check an external elemental function\n-    write(6,*) efoo(A1,A2,A3) ! { dg-error \"array and OPTIONAL\" }\n+    write(6,*) efoo(A1,A2,A3) ! { dg-warning \"array and OPTIONAL\" }\n     write(6,*) efoo(A1,A3,A2)\n     write(6,*) efoo(A1,A4,A3)\n ! check an elemental subroutine\n-    call foobar (A1,A2,A3) ! { dg-error \"array and OPTIONAL\" } \n+    call foobar (A1,A2,A3) ! { dg-warning \"array and OPTIONAL\" } \n     call foobar (A1,A2,A4)\n     call foobar (A1,A4,A4)\n   END SUBROUTINE\n@@ -49,4 +50,5 @@ elemental subroutine foobar (B1,B2,B3)\n     B1 = 1\n   end subroutine foobar\n \n-END\n\\ No newline at end of file\n+END\n+"}]}