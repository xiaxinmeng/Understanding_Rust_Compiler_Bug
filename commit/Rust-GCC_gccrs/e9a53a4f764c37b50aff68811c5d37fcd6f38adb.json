{"sha": "e9a53a4f764c37b50aff68811c5d37fcd6f38adb", "node_id": "C_kwDOANBUbNoAKGU5YTUzYTRmNzY0YzM3YjUwYWZmNjg4MTFjNWQzN2ZjZDZmMzhhZGI", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2021-11-12T06:26:33Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2021-11-14T20:55:01Z"}, "message": "libstdc++: [_GLIBCXX_DEBUG] Remove _Safe_container<>::_M_safe()\n\n_GLIBCXX_DEBUG container code cleanup to get rid of _Safe_container<>::_M_safe() and just\nuse _Safe:: calls which use normal inheritance. Also remove several usages of _M_base()\nwhich can be most of the time ommitted and sometimes replace with explicit _Base::\ncalls.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/debug/safe_container.h (_Safe_container<>::_M_safe): Remove.\n\t* include/debug/deque (deque::operator=(initializer_list<>)): Replace\n\t_M_base() call with _Base:: call.\n\t(deque::operator[](size_type)): Likewise.\n\t* include/debug/forward_list (forward_list(forward_list&&, const allocator_type&)):\n\tRemove _M_safe() and _M_base() calls.\n\t(forward_list::operator=(initializer_list<>)): Remove _M_base() calls.\n\t(forward_list::splice_after, forward_list::merge): Likewise.\n\t* include/debug/list (list(list&&, const allocator_type&)):\n\tRemove _M_safe() and _M_base() calls.\n\t(list::operator=(initializer_list<>)): Remove _M_base() calls.\n\t(list::splice, list::merge): Likewise.\n\t* include/debug/map.h (map(map&&, const allocator_type&)):\n\tRemove _M_safe() and _M_base() calls.\n\t(map::operator=(initializer_list<>)): Remove _M_base() calls.\n\t* include/debug/multimap.h (multimap(multimap&&, const allocator_type&)):\n\tRemove _M_safe() and _M_base() calls.\n\t(multimap::operator=(initializer_list<>)): Remove _M_base() calls.\n\t* include/debug/set.h (set(set&&, const allocator_type&)):\n\tRemove _M_safe() and _M_base() calls.\n\t(set::operator=(initializer_list<>)): Remove _M_base() calls.\n\t* include/debug/multiset.h (multiset(multiset&&, const allocator_type&)):\n\tRemove _M_safe() and _M_base() calls.\n\t(multiset::operator=(initializer_list<>)): Remove _M_base() calls.\n\t* include/debug/string (basic_string(basic_string&&, const allocator_type&)):\n\tRemove _M_safe() and _M_base() calls.\n\t(basic_string::operator=(initializer_list<>)): Remove _M_base() call.\n\t(basic_string::operator=(const _CharT*), basic_string::operator=(_CharT)): Likewise.\n\t(basic_string::operator[](size_type), basic_string::operator+=(const basic_string&)):\n\tLikewise.\n\t(basic_string::operator+=(const _Char*), basic_string::operator+=(_CharT)): Likewise.\n\t* include/debug/unordered_map (unordered_map(unordered_map&&, const allocator_type&)):\n\tRemove _M_safe() and _M_base() calls.\n\t(unordered_map::operator=(initializer_list<>), unordered_map::merge):\n\tRemove _M_base() calls.\n\t(unordered_multimap(unordered_multimap&&, const allocator_type&)):\n\tRemove _M_safe() and _M_base() calls.\n\t(unordered_multimap::operator=(initializer_list<>), unordered_multimap::merge):\n\tRemove _M_base() calls.\n\t* include/debug/unordered_set (unordered_set(unordered_set&&, const allocator_type&)):\n\tRemove _M_safe() and _M_base() calls.\n\t(unordered_set::operator=(initializer_list<>), unordered_set::merge):\n\tRemove _M_base() calls.\n\t(unordered_multiset(unordered_multiset&&, const allocator_type&)):\n\tRemove _M_safe() and _M_base() calls.\n\t(unordered_multiset::operator=(initializer_list<>), unordered_multiset::merge):\n\tRemove _M_base() calls.\n\t* include/debug/vector (vector(vector&&, const allocator_type&)):\n\tRemove _M_safe() and _M_base() calls.\n\t(vector::operator=(initializer_list<>)): Remove _M_base() calls.\n\t(vector::operator[](size_type)): Likewise.", "tree": {"sha": "9c257b1f95249d235275f19ddeb03b9ef968c388", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9c257b1f95249d235275f19ddeb03b9ef968c388"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e9a53a4f764c37b50aff68811c5d37fcd6f38adb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9a53a4f764c37b50aff68811c5d37fcd6f38adb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9a53a4f764c37b50aff68811c5d37fcd6f38adb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9a53a4f764c37b50aff68811c5d37fcd6f38adb/comments", "author": null, "committer": null, "parents": [{"sha": "64f3e71c302b4a13e61656ee509e7050b9bce978", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64f3e71c302b4a13e61656ee509e7050b9bce978", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64f3e71c302b4a13e61656ee509e7050b9bce978"}], "stats": {"total": 169, "additions": 82, "deletions": 87}, "files": [{"sha": "a73d6c34209403eb2d90b05255464242ef249630", "filename": "libstdc++-v3/include/debug/deque", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9a53a4f764c37b50aff68811c5d37fcd6f38adb/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdeque", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9a53a4f764c37b50aff68811c5d37fcd6f38adb/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdeque", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdeque?ref=e9a53a4f764c37b50aff68811c5d37fcd6f38adb", "patch": "@@ -166,7 +166,7 @@ namespace __debug\n       deque&\n       operator=(initializer_list<value_type> __l)\n       {\n-\t_M_base() = __l;\n+\t_Base::operator=(__l);\n \tthis->_M_invalidate_all();\n \treturn *this;\n       }\n@@ -344,15 +344,15 @@ namespace __debug\n       operator[](size_type __n) _GLIBCXX_NOEXCEPT\n       {\n \t__glibcxx_check_subscript(__n);\n-\treturn _M_base()[__n];\n+\treturn _Base::operator[](__n);\n       }\n \n       _GLIBCXX_NODISCARD\n       const_reference\n       operator[](size_type __n) const _GLIBCXX_NOEXCEPT\n       {\n \t__glibcxx_check_subscript(__n);\n-\treturn _M_base()[__n];\n+\treturn _Base::operator[](__n);\n       }\n \n       using _Base::at;"}, {"sha": "6ed4853af40b0cff9b72dea3e05606039955a23e", "filename": "libstdc++-v3/include/debug/forward_list", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9a53a4f764c37b50aff68811c5d37fcd6f38adb/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fforward_list", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9a53a4f764c37b50aff68811c5d37fcd6f38adb/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fforward_list", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fforward_list?ref=e9a53a4f764c37b50aff68811c5d37fcd6f38adb", "patch": "@@ -242,8 +242,8 @@ namespace __debug\n \tnoexcept(\n \t  std::is_nothrow_constructible<_Base,\n \t    _Base, const allocator_type&>::value )\n-      : _Safe(std::move(__list._M_safe()), __al),\n-\t_Base(std::move(__list._M_base()), __al)\n+      : _Safe(std::move(__list), __al),\n+\t_Base(std::move(__list), __al)\n       { }\n \n       explicit\n@@ -287,7 +287,7 @@ namespace __debug\n       forward_list&\n       operator=(std::initializer_list<_Tp> __il)\n       {\n-\t_M_base() = __il;\n+\t_Base::operator=(__il);\n \tthis->_M_invalidate_all();\n \treturn *this;\n       }\n@@ -584,7 +584,7 @@ namespace __debug\n \t    return __it != __list._M_base().cbefore_begin()\n \t\t   && __it != __list._M_base().end();\n \t  });\n-\t_Base::splice_after(__pos.base(), std::move(__list._M_base()));\n+\t_Base::splice_after(__pos.base(), std::move(__list));\n       }\n \n       void\n@@ -613,8 +613,7 @@ namespace __debug\n \t_Base_const_iterator __next = std::next(__i.base());\n \tthis->_M_transfer_from_if(__list, [__next](_Base_const_iterator __it)\n \t  { return __it == __next; });\n-\t_Base::splice_after(__pos.base(), std::move(__list._M_base()),\n-\t\t\t    __i.base());\n+\t_Base::splice_after(__pos.base(), std::move(__list), __i.base());\n       }\n \n       void\n@@ -669,7 +668,7 @@ namespace __debug\n \t      { return __it == __tmp; });\n \t  }\n \n-\t_Base::splice_after(__pos.base(), std::move(__list._M_base()),\n+\t_Base::splice_after(__pos.base(), std::move(__list),\n \t\t\t    __before.base(), __last.base());\n       }\n \n@@ -710,7 +709,7 @@ namespace __debug\n \t\tthis->_M_invalidate_if([__next](_Base_const_iterator __it)\n \t\t\t\t       { return __it == __next; });\n \t\t__to_destroy.splice_after(__to_destroy.cbefore_begin(),\n-\t\t\t\t\t  _M_base(), __old);\n+\t\t\t\t\t  *this, __old);\n \t\t__x = __old;\n \t\t_GLIBCXX20_ONLY( __removed++ );\n \t      }\n@@ -739,7 +738,7 @@ namespace __debug\n \t\t  this->_M_invalidate_if([__x](_Base_const_iterator __it)\n \t\t\t\t\t { return __it == __x; });\n \t\t  __to_destroy.splice_after(__to_destroy.cbefore_begin(),\n-\t\t\t\t\t    _M_base(), __old);\n+\t\t\t\t\t    *this, __old);\n \t\t  __x = __old;\n \t\t  _GLIBCXX20_ONLY( __removed++ );\n \t\t}\n@@ -777,7 +776,7 @@ namespace __debug\n \t\t  this->_M_invalidate_if([__next](_Base_const_iterator __it)\n \t\t\t\t\t { return __it == __next; });\n \t\t  __to_destroy.splice_after(__to_destroy.cbefore_begin(),\n-\t\t\t\t\t    _M_base(), __first);\n+\t\t\t\t\t    *this, __first);\n \t\t  __next = __first;\n \t\t  _GLIBCXX20_ONLY( __removed++ );\n \t\t}\n@@ -804,7 +803,7 @@ namespace __debug\n \t      return __it != __list._M_base().cbefore_begin()\n \t\t     && __it != __list._M_base().cend();\n \t    });\n-\t  _Base::merge(std::move(__list._M_base()));\n+\t  _Base::merge(std::move(__list));\n \t}\n       }\n \n@@ -827,7 +826,7 @@ namespace __debug\n \t\treturn __it != __list._M_base().cbefore_begin()\n \t\t       && __it != __list._M_base().cend();\n \t      });\n-\t    _Base::merge(std::move(__list._M_base()), __comp);\n+\t    _Base::merge(std::move(__list), __comp);\n \t  }\n \t}\n "}, {"sha": "383482c0acf452b49c00e1179e6276ed7a673775", "filename": "libstdc++-v3/include/debug/list", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9a53a4f764c37b50aff68811c5d37fcd6f38adb/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9a53a4f764c37b50aff68811c5d37fcd6f38adb/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist?ref=e9a53a4f764c37b50aff68811c5d37fcd6f38adb", "patch": "@@ -122,8 +122,8 @@ namespace __debug\n \tnoexcept(\n \t  std::is_nothrow_constructible<_Base,\n \t    _Base, const allocator_type&>::value )\n-      : _Safe(std::move(__x._M_safe()), __a),\n-\t_Base(std::move(__x._M_base()), __a) { }\n+      : _Safe(std::move(__x), __a),\n+\t_Base(std::move(__x), __a) { }\n #endif\n \n       explicit\n@@ -172,7 +172,7 @@ namespace __debug\n       operator=(initializer_list<value_type> __l)\n       {\n \tthis->_M_invalidate_all();\n-\t_M_base() = __l;\n+\t_Base::operator=(__l);\n \treturn *this;\n       }\n \n@@ -583,7 +583,7 @@ namespace __debug\n \t\t\t      _M_message(__gnu_debug::__msg_self_splice)\n \t\t\t      ._M_sequence(*this, \"this\"));\n \tthis->_M_transfer_from_if(__x, _Not_equal(__x._M_base().end()));\n-\t_Base::splice(__position.base(), _GLIBCXX_MOVE(__x._M_base()));\n+\t_Base::splice(__position.base(), _GLIBCXX_MOVE(__x));\n       }\n \n #if __cplusplus >= 201103L\n@@ -614,7 +614,7 @@ namespace __debug\n \t// _GLIBCXX_RESOLVE_LIB_DEFECTS\n \t// 250. splicing invalidates iterators\n \tthis->_M_transfer_from_if(__x, _Equal(__i.base()));\n-\t_Base::splice(__position.base(), _GLIBCXX_MOVE(__x._M_base()),\n+\t_Base::splice(__position.base(), _GLIBCXX_MOVE(__x),\n \t\t      __i.base());\n       }\n \n@@ -662,7 +662,7 @@ namespace __debug\n \t    this->_M_transfer_from_if(__x, _Equal(__tmp));\n \t  }\n \n-\t_Base::splice(__position.base(), _GLIBCXX_MOVE(__x._M_base()),\n+\t_Base::splice(__position.base(), _GLIBCXX_MOVE(__x),\n \t\t      __first.base(), __last.base());\n       }\n \n@@ -709,7 +709,7 @@ namespace __debug\n \t\t// 526. Is it undefined if a function in the standard changes\n \t\t// in parameters?\n \t\tthis->_M_invalidate_if(_Equal(__first));\n-\t\t__to_destroy.splice(__to_destroy.begin(), _M_base(), __first);\n+\t\t__to_destroy.splice(__to_destroy.begin(), *this, __first);\n #if !_GLIBCXX_USE_CXX11_ABI\n \t\t_GLIBCXX20_ONLY( __removed++ );\n #endif\n@@ -743,7 +743,7 @@ namespace __debug\n \t    if (__pred(*__x))\n \t      {\n \t\tthis->_M_invalidate_if(_Equal(__x));\n-\t\t__to_destroy.splice(__to_destroy.begin(), _M_base(), __x);\n+\t\t__to_destroy.splice(__to_destroy.begin(), *this, __x);\n #if !_GLIBCXX_USE_CXX11_ABI\n \t\t_GLIBCXX20_ONLY( __removed++ );\n #endif\n@@ -780,7 +780,7 @@ namespace __debug\n \t  if (*__first == *__next)\n \t    {\n \t      this->_M_invalidate_if(_Equal(__next));\n-\t      __to_destroy.splice(__to_destroy.begin(), _M_base(), __next);\n+\t      __to_destroy.splice(__to_destroy.begin(), *this, __next);\n \t      __next = __first;\n #if !_GLIBCXX_USE_CXX11_ABI\n \t      _GLIBCXX20_ONLY( __removed++ );\n@@ -818,7 +818,7 @@ namespace __debug\n \t    if (__binary_pred(*__first, *__next))\n \t      {\n \t\tthis->_M_invalidate_if(_Equal(__next));\n-\t\t__to_destroy.splice(__to_destroy.begin(), _M_base(), __next);\n+\t\t__to_destroy.splice(__to_destroy.begin(), *this, __next);\n \t\t__next = __first;\n #if !_GLIBCXX_USE_CXX11_ABI\n \t\t_GLIBCXX20_ONLY( __removed++ );\n@@ -851,7 +851,7 @@ namespace __debug\n \t    __glibcxx_check_sorted(_Base::begin(), _Base::end());\n \t    __glibcxx_check_sorted(__x.begin().base(), __x.end().base());\n \t    this->_M_transfer_from_if(__x, _Not_equal(__x._M_base().end()));\n-\t    _Base::merge(_GLIBCXX_MOVE(__x._M_base()));\n+\t    _Base::merge(_GLIBCXX_MOVE(__x));\n \t  }\n       }\n \n@@ -878,7 +878,7 @@ namespace __debug\n \t      __glibcxx_check_sorted_pred(__x.begin().base(), __x.end().base(),\n \t\t\t\t\t  __comp);\n \t      this->_M_transfer_from_if(__x, _Not_equal(__x._M_base().end()));\n-\t      _Base::merge(_GLIBCXX_MOVE(__x._M_base()), __comp);\n+\t      _Base::merge(_GLIBCXX_MOVE(__x), __comp);\n \t    }\n \t}\n "}, {"sha": "c62f0b574e646833233e6c8c50d88cf8f29ee71c", "filename": "libstdc++-v3/include/debug/map.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9a53a4f764c37b50aff68811c5d37fcd6f38adb/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9a53a4f764c37b50aff68811c5d37fcd6f38adb/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmap.h?ref=e9a53a4f764c37b50aff68811c5d37fcd6f38adb", "patch": "@@ -118,9 +118,9 @@ namespace __debug\n       : _Base(__m, __a) { }\n \n       map(map&& __m, const __type_identity_t<allocator_type>& __a)\n-      noexcept( noexcept(_Base(std::move(__m._M_base()), __a)) )\n-      : _Safe(std::move(__m._M_safe()), __a),\n-\t_Base(std::move(__m._M_base()), __a) { }\n+      noexcept( noexcept(_Base(std::move(__m), __a)) )\n+      : _Safe(std::move(__m), __a),\n+\t_Base(std::move(__m), __a) { }\n \n       map(initializer_list<value_type> __l, const allocator_type& __a)\n       : _Base(__l, __a) { }\n@@ -162,7 +162,7 @@ namespace __debug\n       map&\n       operator=(initializer_list<value_type> __l)\n       {\n-\t_M_base() = __l;\n+\t_Base::operator=(__l);\n \tthis->_M_invalidate_all();\n \treturn *this;\n       }"}, {"sha": "5f0f1faa33ec8e34a489d592fc72cbd5d066cea4", "filename": "libstdc++-v3/include/debug/multimap.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9a53a4f764c37b50aff68811c5d37fcd6f38adb/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultimap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9a53a4f764c37b50aff68811c5d37fcd6f38adb/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultimap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultimap.h?ref=e9a53a4f764c37b50aff68811c5d37fcd6f38adb", "patch": "@@ -119,9 +119,9 @@ namespace __debug\n       : _Base(__m, __a) { }\n \n       multimap(multimap&& __m, const __type_identity_t<allocator_type>& __a)\n-      noexcept( noexcept(_Base(std::move(__m._M_base()), __a)) )\n-      : _Safe(std::move(__m._M_safe()), __a),\n-\t_Base(std::move(__m._M_base()), __a) { }\n+      noexcept( noexcept(_Base(std::move(__m), __a)) )\n+      : _Safe(std::move(__m), __a),\n+\t_Base(std::move(__m), __a) { }\n \n       multimap(initializer_list<value_type> __l, const allocator_type& __a)\n       : _Base(__l, __a) { }\n@@ -162,7 +162,7 @@ namespace __debug\n       multimap&\n       operator=(initializer_list<value_type> __l)\n       {\n-\t_M_base() = __l;\n+\t_Base::operator=(__l);\n \tthis->_M_invalidate_all();\n \treturn *this;\n       }"}, {"sha": "7729fc19689c10468a1aee94ab2a84d7522a1dd7", "filename": "libstdc++-v3/include/debug/multiset.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9a53a4f764c37b50aff68811c5d37fcd6f38adb/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultiset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9a53a4f764c37b50aff68811c5d37fcd6f38adb/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultiset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultiset.h?ref=e9a53a4f764c37b50aff68811c5d37fcd6f38adb", "patch": "@@ -118,9 +118,9 @@ namespace __debug\n       : _Base(__m, __a) { }\n \n       multiset(multiset&& __m, const __type_identity_t<allocator_type>& __a)\n-      noexcept( noexcept(_Base(std::move(__m._M_base()), __a)) )\n-      : _Safe(std::move(__m._M_safe()), __a),\n-\t_Base(std::move(__m._M_base()), __a) { }\n+      noexcept( noexcept(_Base(std::move(__m), __a)) )\n+      : _Safe(std::move(__m), __a),\n+\t_Base(std::move(__m), __a) { }\n \n       multiset(initializer_list<value_type> __l, const allocator_type& __a)\n \t: _Base(__l, __a)\n@@ -162,7 +162,7 @@ namespace __debug\n       multiset&\n       operator=(initializer_list<value_type> __l)\n       {\n-\t_M_base() = __l;\n+\t_Base::operator=(__l);\n \tthis->_M_invalidate_all();\n \treturn *this;\n       }"}, {"sha": "caba37a12070c0f4768e540eab32b2ae2f9a5668", "filename": "libstdc++-v3/include/debug/safe_container.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9a53a4f764c37b50aff68811c5d37fcd6f38adb/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_container.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9a53a4f764c37b50aff68811c5d37fcd6f38adb/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_container.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_container.h?ref=e9a53a4f764c37b50aff68811c5d37fcd6f38adb", "patch": "@@ -48,10 +48,6 @@ namespace __gnu_debug\n       { return *static_cast<_SafeContainer*>(this); }\n \n     protected:\n-      _Safe_container&\n-      _M_safe() _GLIBCXX_NOEXCEPT\n-      { return *this; }\n-\n #if __cplusplus >= 201103L\n       _Safe_container() = default;\n       _Safe_container(const _Safe_container&) = default;"}, {"sha": "39142aef60b6e0e74b813602e8dce888836bc4b1", "filename": "libstdc++-v3/include/debug/set.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9a53a4f764c37b50aff68811c5d37fcd6f38adb/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9a53a4f764c37b50aff68811c5d37fcd6f38adb/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fset.h?ref=e9a53a4f764c37b50aff68811c5d37fcd6f38adb", "patch": "@@ -117,9 +117,9 @@ namespace __debug\n       : _Base(__x, __a) { }\n \n       set(set&& __x, const __type_identity_t<allocator_type>& __a)\n-      noexcept( noexcept(_Base(std::move(__x._M_base()), __a)) )\n-      : _Safe(std::move(__x._M_safe()), __a),\n-\t_Base(std::move(__x._M_base()), __a) { }\n+      noexcept( noexcept(_Base(std::move(__x), __a)) )\n+      : _Safe(std::move(__x), __a),\n+\t_Base(std::move(__x), __a) { }\n \n       set(initializer_list<value_type> __l, const allocator_type& __a)\n       : _Base(__l, __a) { }\n@@ -160,7 +160,7 @@ namespace __debug\n       set&\n       operator=(initializer_list<value_type> __l)\n       {\n-\t_M_base() = __l;\n+\t_Base::operator=(__l);\n \tthis->_M_invalidate_all();\n \treturn *this;\n       }"}, {"sha": "dd16527b958c2f773abe3f492ef759f0dac6a26b", "filename": "libstdc++-v3/include/debug/string", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9a53a4f764c37b50aff68811c5d37fcd6f38adb/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fstring", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9a53a4f764c37b50aff68811c5d37fcd6f38adb/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fstring", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fstring?ref=e9a53a4f764c37b50aff68811c5d37fcd6f38adb", "patch": "@@ -160,8 +160,8 @@ namespace __gnu_debug\n       basic_string(basic_string&& __s, const _Allocator& __a)\n       noexcept(\n \tstd::is_nothrow_constructible<_Base, _Base, const _Allocator&>::value )\n-      : _Safe(std::move(__s._M_safe()), __a),\n-\t_Base(std::move(__s._M_base()), __a)\n+      : _Safe(std::move(__s), __a),\n+\t_Base(std::move(__s), __a)\n       { }\n \n       ~basic_string() = default;\n@@ -213,15 +213,15 @@ namespace __gnu_debug\n       operator=(const _CharT* __s)\n       {\n \t__glibcxx_check_string(__s);\n-\t_M_base() = __s;\n+\t_Base::operator=(__s);\n \tthis->_M_invalidate_all();\n \treturn *this;\n       }\n \n       basic_string&\n       operator=(_CharT __c)\n       {\n-\t_M_base() = __c;\n+\t_Base::operator=(__c);\n \tthis->_M_invalidate_all();\n \treturn *this;\n       }\n@@ -230,7 +230,7 @@ namespace __gnu_debug\n       basic_string&\n       operator=(std::initializer_list<_CharT> __l)\n       {\n-\t_M_base() = __l;\n+\t_Base::operator=(__l);\n \tthis->_M_invalidate_all();\n \treturn *this;\n       }\n@@ -341,7 +341,7 @@ namespace __gnu_debug\n \t\t\t      ._M_sequence(*this, \"this\")\n \t\t\t      ._M_integer(__pos, \"__pos\")\n \t\t\t      ._M_integer(this->size(), \"size\"));\n-\treturn _M_base()[__pos];\n+\treturn _Base::operator[](__pos);\n       }\n \n       reference\n@@ -357,7 +357,7 @@ namespace __gnu_debug\n \t\t\t      ._M_integer(__pos, \"__pos\")\n \t\t\t      ._M_integer(this->size(), \"size\"));\n #endif\n-\treturn _M_base()[__pos];\n+\treturn _Base::operator[](__pos);\n       }\n \n       using _Base::at;\n@@ -371,7 +371,7 @@ namespace __gnu_debug\n       basic_string&\n       operator+=(const basic_string& __str)\n       {\n-\t_M_base() += __str;\n+\t_Base::operator+=(__str);\n \tthis->_M_invalidate_all();\n \treturn *this;\n       }\n@@ -380,15 +380,15 @@ namespace __gnu_debug\n       operator+=(const _CharT* __s)\n       {\n \t__glibcxx_check_string(__s);\n-\t_M_base() += __s;\n+\t_Base::operator+=(__s);\n \tthis->_M_invalidate_all();\n \treturn *this;\n       }\n \n       basic_string&\n       operator+=(_CharT __c)\n       {\n-\t_M_base() += __c;\n+\t_Base::operator+=(__c);\n \tthis->_M_invalidate_all();\n \treturn *this;\n       }\n@@ -397,7 +397,7 @@ namespace __gnu_debug\n       basic_string&\n       operator+=(std::initializer_list<_CharT> __l)\n       {\n-\t_M_base() += __l;\n+\t_Base::operator+=(__l);\n \tthis->_M_invalidate_all();\n \treturn *this;\n       }"}, {"sha": "64cc8bacabd3efaff6ac29f3bb4aeb26092aac75", "filename": "libstdc++-v3/include/debug/unordered_map", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9a53a4f764c37b50aff68811c5d37fcd6f38adb/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9a53a4f764c37b50aff68811c5d37fcd6f38adb/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_map?ref=e9a53a4f764c37b50aff68811c5d37fcd6f38adb", "patch": "@@ -150,9 +150,9 @@ namespace __debug\n \n       unordered_map(unordered_map&& __umap,\n \t\t    const allocator_type& __a)\n-      noexcept( noexcept(_Base(std::move(__umap._M_base()), __a)) )\n-      : _Safe(std::move(__umap._M_safe()), __a),\n-\t_Base(std::move(__umap._M_base()), __a) { }\n+      noexcept( noexcept(_Base(std::move(__umap), __a)) )\n+      : _Safe(std::move(__umap), __a),\n+\t_Base(std::move(__umap), __a) { }\n \n       unordered_map(initializer_list<value_type> __l,\n \t\t    size_type __n = 0,\n@@ -210,7 +210,7 @@ namespace __debug\n       unordered_map&\n       operator=(initializer_list<value_type> __l)\n       {\n-\t_M_base() = __l;\n+\t_Base::operator=(__l);\n \tthis->_M_invalidate_all();\n \treturn *this;\n       }\n@@ -561,7 +561,7 @@ namespace __debug\n \t{\n \t  auto __guard\n \t    = _Safe::_S_uc_guard(std::__detail::_Select1st{}, __source);\n-\t  _Base::merge(__source._M_base());\n+\t  _Base::merge(__source);\n \t}\n \n       template<typename _H2, typename _P2>\n@@ -575,7 +575,7 @@ namespace __debug\n \t{\n \t  auto __guard\n \t    = _Safe::_S_umc_guard(std::__detail::_Select1st{}, __source);\n-\t  _Base::merge(__source._M_base());\n+\t  _Base::merge(__source);\n \t}\n \n       template<typename _H2, typename _P2>\n@@ -953,9 +953,9 @@ namespace __debug\n \n       unordered_multimap(unordered_multimap&& __umap,\n \t\t\t const allocator_type& __a)\n-      noexcept( noexcept(_Base(std::move(__umap._M_base()), __a)) )\n-      : _Safe(std::move(__umap._M_safe()), __a),\n-\t_Base(std::move(__umap._M_base()), __a) { }\n+      noexcept( noexcept(_Base(std::move(__umap), __a)) )\n+      : _Safe(std::move(__umap), __a),\n+\t_Base(std::move(__umap), __a) { }\n \n       unordered_multimap(initializer_list<value_type> __l,\n \t\t\t size_type __n = 0,\n@@ -1010,7 +1010,7 @@ namespace __debug\n       unordered_multimap&\n       operator=(initializer_list<value_type> __l)\n       {\n-\tthis->_M_base() = __l;\n+\t_Base::operator=(__l);\n \tthis->_M_invalidate_all();\n \treturn *this;\n       }\n@@ -1270,7 +1270,7 @@ namespace __debug\n \t{\n \t  auto __guard\n \t    = _Safe::_S_umc_guard(std::__detail::_Select1st{}, __source);\n-\t  _Base::merge(__source._M_base());\n+\t  _Base::merge(__source);\n \t}\n \n       template<typename _H2, typename _P2>\n@@ -1284,7 +1284,7 @@ namespace __debug\n \t{\n \t  auto __guard\n \t    = _Safe::_S_uc_guard(std::__detail::_Select1st{}, __source);\n-\t  _Base::merge(__source._M_base());\n+\t  _Base::merge(__source);\n \t}\n \n       template<typename _H2, typename _P2>"}, {"sha": "3516af4dc4ec82a32ea9651ca4a3490f1ba7ca0c", "filename": "libstdc++-v3/include/debug/unordered_set", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9a53a4f764c37b50aff68811c5d37fcd6f38adb/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_set", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9a53a4f764c37b50aff68811c5d37fcd6f38adb/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_set", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_set?ref=e9a53a4f764c37b50aff68811c5d37fcd6f38adb", "patch": "@@ -146,9 +146,9 @@ namespace __debug\n \n       unordered_set(unordered_set&& __uset,\n \t\t    const allocator_type& __a)\n-      noexcept( noexcept(_Base(std::move(__uset._M_base()), __a)) )\n-      : _Safe(std::move(__uset._M_safe()), __a),\n-\t_Base(std::move(__uset._M_base()), __a) { }\n+      noexcept( noexcept(_Base(std::move(__uset), __a)) )\n+      : _Safe(std::move(__uset), __a),\n+\t_Base(std::move(__uset), __a) { }\n \n       unordered_set(initializer_list<value_type> __l,\n \t\t    size_type __n = 0,\n@@ -203,7 +203,7 @@ namespace __debug\n       unordered_set&\n       operator=(initializer_list<value_type> __l)\n       {\n-\t_M_base() = __l;\n+\t_Base::operator=(__l);\n \tthis->_M_invalidate_all();\n \treturn *this;\n       }\n@@ -448,7 +448,7 @@ namespace __debug\n \t{\n \t  auto __guard\n \t    = _Safe::_S_uc_guard(std::__detail::_Identity{}, __source);\n-\t  _Base::merge(__source._M_base());\n+\t  _Base::merge(__source);\n \t}\n \n       template<typename _H2, typename _P2>\n@@ -462,7 +462,7 @@ namespace __debug\n \t{\n \t  auto __guard\n \t    = _Safe::_S_umc_guard(std::__detail::_Identity{}, __source);\n-\t  _Base::merge(__source._M_base());\n+\t  _Base::merge(__source);\n \t}\n \n       template<typename _H2, typename _P2>\n@@ -819,9 +819,9 @@ namespace __debug\n \n       unordered_multiset(unordered_multiset&& __uset,\n \t\t\t const allocator_type& __a)\n-      noexcept( noexcept(_Base(std::move(__uset._M_base()), __a)) )\n-      : _Safe(std::move(__uset._M_safe()), __a),\n-\t_Base(std::move(__uset._M_base()), __a) { }\n+      noexcept( noexcept(_Base(std::move(__uset), __a)) )\n+      : _Safe(std::move(__uset), __a),\n+\t_Base(std::move(__uset), __a) { }\n \n       unordered_multiset(initializer_list<value_type> __l,\n \t\t\t size_type __n = 0,\n@@ -876,7 +876,7 @@ namespace __debug\n       unordered_multiset&\n       operator=(initializer_list<value_type> __l)\n       {\n-\tthis->_M_base() = __l;\n+\t_Base::operator=(__l);\n \tthis->_M_invalidate_all();\n \treturn *this;\n       }\n@@ -1116,7 +1116,7 @@ namespace __debug\n \t{\n \t  auto __guard\n \t    = _Safe::_S_umc_guard(std::__detail::_Identity{}, __source);\n-\t  _Base::merge(__source._M_base());\n+\t  _Base::merge(__source);\n \t}\n \n       template<typename _H2, typename _P2>\n@@ -1130,7 +1130,7 @@ namespace __debug\n \t{\n \t  auto __guard\n \t    = _Safe::_S_uc_guard(std::__detail::_Identity{}, __source);\n-\t  _Base::merge(__source._M_base());\n+\t  _Base::merge(__source);\n \t}\n \n       template<typename _H2, typename _P2>"}, {"sha": "ed10e82c0804ea33c8ee00ace4ef9533b76d899b", "filename": "libstdc++-v3/include/debug/vector", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9a53a4f764c37b50aff68811c5d37fcd6f38adb/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9a53a4f764c37b50aff68811c5d37fcd6f38adb/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector?ref=e9a53a4f764c37b50aff68811c5d37fcd6f38adb", "patch": "@@ -219,8 +219,8 @@ namespace __debug\n       noexcept(\n \tstd::is_nothrow_constructible<_Base,\n \t  _Base, const allocator_type&>::value )\n-      : _Safe(std::move(__x._M_safe()), __a),\n-\t_Base(std::move(__x._M_base()), __a),\n+      : _Safe(std::move(__x), __a),\n+\t_Base(std::move(__x), __a),\n \t_Safe_vector(std::move(__x)) { }\n \n       vector(initializer_list<value_type> __l,\n@@ -244,7 +244,7 @@ namespace __debug\n       vector&\n       operator=(initializer_list<value_type> __l)\n       {\n-\t_M_base() = __l;\n+\t_Base::operator=(__l);\n \tthis->_M_invalidate_all();\n \tthis->_M_update_guaranteed_capacity();\n \treturn *this;\n@@ -440,15 +440,15 @@ namespace __debug\n       operator[](size_type __n) _GLIBCXX_NOEXCEPT\n       {\n \t__glibcxx_check_subscript(__n);\n-\treturn _M_base()[__n];\n+\treturn _Base::operator[](__n);\n       }\n \n       _GLIBCXX_NODISCARD\n       const_reference\n       operator[](size_type __n) const _GLIBCXX_NOEXCEPT\n       {\n \t__glibcxx_check_subscript(__n);\n-\treturn _M_base()[__n];\n+\treturn _Base::operator[](__n);\n       }\n \n       using _Base::at;"}]}