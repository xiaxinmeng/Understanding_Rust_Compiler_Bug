{"sha": "dd3c7873a61019e993ee8b79e3695722b13cf945", "node_id": "C_kwDOANBUbNoAKGRkM2M3ODczYTYxMDE5ZTk5M2VlOGI3OWUzNjk1NzIyYjEzY2Y5NDU", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-05-10T08:38:47Z"}, "committer": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-05-10T08:38:47Z"}, "message": "Improved constant folding for scalar evolution.\n\nThis patch adds a small (follow-up) optimization to chrec_apply for\nlinear chrecs to clean-up the final value expressions sometimes generated\nby GCC's scalar evolution pass.  The transformation of A+(X-1)*A into\nA*X is usually unsafe with respect to overflow (see PR92712), and so\ncan't be performed by match.pd (or fold-const).  However, during scalar\nevolution's evaluation of recurrences it's known that X-1 can't be negative\n(in fact X-1 is unsigned even when A is signed), hence this optimization\ncan be applied.  Interestingly, this expression does get simplified in\nlater passes once the range of X-1 is bounded by VRP, but that occurs\nlong after the decision of whether to perform final value replacement,\nwhich is based on the complexity of this expression.\n\nThe motivating test case is the optimization of the loop (from comment\n\nint square(int x) {\n  int result = 0;\n  for (int i = 0; i < x; ++i)\n    result += x;\n  return result;\n}\n\nwhich is currently optimized, with final value replacement to:\n\n  final value replacement:\n   with expr: (int) ((unsigned int) x_3(D) + 4294967295) * x_3(D) + x_3(D)\n\nbut with this patch it first gets simplified further:\n\n  final value replacement:\n   with expr: x_3(D) * x_3(D)\n\n2022-05-10  Roger Sayle  <roger@nextmovesoftware.com>\n\ngcc/ChangeLog\n\t* tree-chrec.cc (chrec_apply): Attempt to fold the linear chrec\n\t\"{a, +, a} (x-1)\" as \"a*x\", as the number of loop iterations, x-1,\n\tcan't be negative.\n\ngcc/testsuite/ChangeLog\n\t* gcc.dg/tree-ssa/pr65855-2.c: New test case.", "tree": {"sha": "9a7625741a3e4a3e4910524dbf51d0cbd1d19572", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9a7625741a3e4a3e4910524dbf51d0cbd1d19572"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dd3c7873a61019e993ee8b79e3695722b13cf945", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd3c7873a61019e993ee8b79e3695722b13cf945", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd3c7873a61019e993ee8b79e3695722b13cf945", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd3c7873a61019e993ee8b79e3695722b13cf945/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37083a8d9c68b88b84c8c0d32f4d7b170d6dc6ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37083a8d9c68b88b84c8c0d32f4d7b170d6dc6ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37083a8d9c68b88b84c8c0d32f4d7b170d6dc6ef"}], "stats": {"total": 38, "additions": 32, "deletions": 6}, "files": [{"sha": "d44ef51ff3fd5714fb5bfd10e28b14f4e614583f", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr65855-2.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd3c7873a61019e993ee8b79e3695722b13cf945/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr65855-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd3c7873a61019e993ee8b79e3695722b13cf945/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr65855-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr65855-2.c?ref=dd3c7873a61019e993ee8b79e3695722b13cf945", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-sccp\" } */\n+\n+int square(int x) {\n+  int result = 0;\n+  for (int i = 0; i < x; ++i)\n+    result += x;\n+  return result;\n+}\n+\n+/* { dg-final { scan-tree-dump \" with expr: x_\\[0-9\\]\\\\(D\\\\) \\\\* x_\\[0-9\\]\\\\(D\\\\)\" \"sccp\" } } */"}, {"sha": "7321fb9d282042a8c2b41c75f0b23181d43fe0ea", "filename": "gcc/tree-chrec.cc", "status": "modified", "additions": 21, "deletions": 6, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd3c7873a61019e993ee8b79e3695722b13cf945/gcc%2Ftree-chrec.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd3c7873a61019e993ee8b79e3695722b13cf945/gcc%2Ftree-chrec.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-chrec.cc?ref=dd3c7873a61019e993ee8b79e3695722b13cf945", "patch": "@@ -612,16 +612,31 @@ chrec_apply (unsigned var,\n     case POLYNOMIAL_CHREC:\n       if (evolution_function_is_affine_p (chrec))\n \t{\n+\t  tree chrecr = CHREC_RIGHT (chrec);\n \t  if (CHREC_VARIABLE (chrec) != var)\n-\t    return build_polynomial_chrec\n+\t    res = build_polynomial_chrec\n \t      (CHREC_VARIABLE (chrec),\n \t       chrec_apply (var, CHREC_LEFT (chrec), x),\n-\t       chrec_apply (var, CHREC_RIGHT (chrec), x));\n+\t       chrec_apply (var, chrecr, x));\n \n \t  /* \"{a, +, b} (x)\"  ->  \"a + b*x\".  */\n-\t  x = chrec_convert_rhs (type, x, NULL);\n-\t  res = chrec_fold_multiply (TREE_TYPE (x), CHREC_RIGHT (chrec), x);\n-\t  res = chrec_fold_plus (type, CHREC_LEFT (chrec), res);\n+\t  else if (operand_equal_p (CHREC_LEFT (chrec), chrecr)\n+\t\t   && TREE_CODE (x) == PLUS_EXPR\n+\t\t   && integer_all_onesp (TREE_OPERAND (x, 1)))\n+\t    {\n+\t      /* We know the number of iterations can't be negative.\n+\t\t So {a, +, a} (x-1) -> \"a*x\".  */\n+\t      res = build_int_cst (TREE_TYPE (x), 1);\n+\t      res = chrec_fold_plus (TREE_TYPE (x), x, res);\n+\t      res = chrec_convert_rhs (type, res, NULL);\n+\t      res = chrec_fold_multiply (type, chrecr, res);\n+\t    }\n+\t  else\n+\t    {\n+\t      res = chrec_convert_rhs (TREE_TYPE (chrecr), x, NULL);\n+\t      res = chrec_fold_multiply (TREE_TYPE (chrecr), chrecr, res);\n+\t      res = chrec_fold_plus (type, CHREC_LEFT (chrec), res);\n+\t    }\n \t}\n       else if (TREE_CODE (x) == INTEGER_CST\n \t       && tree_int_cst_sgn (x) == 1)\n@@ -644,7 +659,7 @@ chrec_apply (unsigned var,\n \n   if (dump_file && (dump_flags & TDF_SCEV))\n     {\n-      fprintf (dump_file, \"  (varying_loop = %d\\n\", var);\n+      fprintf (dump_file, \"  (varying_loop = %d\", var);\n       fprintf (dump_file, \")\\n  (chrec = \");\n       print_generic_expr (dump_file, chrec);\n       fprintf (dump_file, \")\\n  (x = \");"}]}