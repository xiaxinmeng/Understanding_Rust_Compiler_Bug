{"sha": "befcd99bcb1e93983abf4cd20e408a0b963be4e5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmVmY2Q5OWJjYjFlOTM5ODNhYmY0Y2QyMGU0MDhhMGI5NjNiZTRlNQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2003-04-22T21:05:58Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2003-04-22T21:05:58Z"}, "message": "re PR c++/10428 (struct <typedef'ed name> causes ICE in write_unscoped_name)\n\n\tPR c++/10428\n\t* g++.dg/parse/elab1.C: New test.\n\n\tPR c++/10428\n\t* decl.c (check_elaborated_type_specifier): New function, split\n\tout from ...\n\t(xref_tag): ... here.  Use the new function in more places.\n\nFrom-SVN: r65956", "tree": {"sha": "c1bc5618ca2677d2d433afd58439a78ff75977a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c1bc5618ca2677d2d433afd58439a78ff75977a6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/befcd99bcb1e93983abf4cd20e408a0b963be4e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/befcd99bcb1e93983abf4cd20e408a0b963be4e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/befcd99bcb1e93983abf4cd20e408a0b963be4e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/befcd99bcb1e93983abf4cd20e408a0b963be4e5/comments", "author": null, "committer": null, "parents": [{"sha": "52dd32242018d531d0a974f6b4b61df28d491ab3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52dd32242018d531d0a974f6b4b61df28d491ab3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52dd32242018d531d0a974f6b4b61df28d491ab3"}], "stats": {"total": 79, "additions": 62, "deletions": 17}, "files": [{"sha": "ec4684ddef209e1d9cba01771c441380bdd0d5b2", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/befcd99bcb1e93983abf4cd20e408a0b963be4e5/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/befcd99bcb1e93983abf4cd20e408a0b963be4e5/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=befcd99bcb1e93983abf4cd20e408a0b963be4e5", "patch": "@@ -1,5 +1,10 @@\n 2003-04-22  Mark Mitchell  <mark@codesourcery.com>\n \n+\tPR c++/10428\n+\t* decl.c (check_elaborated_type_specifier): New function, split\n+\tout from ...\n+\t(xref_tag): ... here.  Use the new function in more places.\n+\n \t* rtti.c (throw_bad_typeid): Use build_cxx_call.\n \n 2003-04-21  Mark Mitchell  <mark@codesourcery.com>"}, {"sha": "84e267ee9f60975d6d975231fcdc5d5fbb623ed1", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 44, "deletions": 17, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/befcd99bcb1e93983abf4cd20e408a0b963be4e5/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/befcd99bcb1e93983abf4cd20e408a0b963be4e5/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=befcd99bcb1e93983abf4cd20e408a0b963be4e5", "patch": "@@ -12525,6 +12525,38 @@ tag_name (enum tag_types code)\n     }\n }\n \n+/* Name lookup in an elaborated-type-specifier (after the keyword\n+   indicated by TAG_CODE) has found TYPE.  If the\n+   elaborated-type-specifier is invalid, issue a diagnostic and return\n+   error_mark_node; otherwise, return TYPE itself.  */\n+\n+static tree\n+check_elaborated_type_specifier (enum tag_types tag_code,\n+\t\t\t\t tree type)\n+{\n+  tree t;\n+\n+  t = follow_tag_typedef (type);\n+\n+  /* [dcl.type.elab] If the identifier resolves to a typedef-name or a\n+     template type-parameter, the elaborated-type-specifier is\n+     ill-formed.  */\n+  if (!t)\n+    {\n+      error (\"using typedef-name `%D' after `%s'\",\n+\t     TYPE_NAME (type), tag_name (tag_code));\n+      t = error_mark_node;\n+    }\n+  else if (TREE_CODE (type) == TEMPLATE_TYPE_PARM)\n+    {\n+      error (\"using template type parameter `%T' after `%s'\",\n+\t     type, tag_name (tag_code));\n+      t = error_mark_node;\n+    }\n+\n+  return t;\n+}\n+\n /* Get the struct, enum or union (CODE says which) with tag NAME.\n    Define the tag as a forward-reference if it is not defined.\n \n@@ -12611,20 +12643,9 @@ xref_tag (enum tag_types tag_code, tree name, tree attributes,\n     {\n       if (t)\n \t{\n-\t  ref = follow_tag_typedef (t);\n-\n-\t  /* [dcl.type.elab] If the identifier resolves to a\n-\t     typedef-name or a template type-parameter, the\n-\t     elaborated-type-specifier is ill-formed.  */\n-\t  if (!ref)\n-\t    {\n-\t      pedwarn (\"using typedef-name `%D' after `%s'\",\n-\t\t       TYPE_NAME (t), tag_name (tag_code));\n-\t      ref = t;\n-\t    }\n-\t  else if (TREE_CODE (t) == TEMPLATE_TYPE_PARM)\n-\t    error (\"using template type parameter `%T' after `%s'\",\n-\t\t   t, tag_name (tag_code));\n+\t  ref = check_elaborated_type_specifier (tag_code, t);\n+\t  if (ref == error_mark_node)\n+\t    POP_TIMEVAR_AND_RETURN (TV_NAME_LOOKUP, error_mark_node);\n \t}\n       else\n \tref = lookup_tag (code, name, b, 0);\n@@ -12643,9 +12664,15 @@ xref_tag (enum tag_types tag_code, tree name, tree attributes,\n \t       template, so we want this type.  */\n \t    ref = DECL_TEMPLATE_RESULT (ref);\n \n-\t  if (ref && TREE_CODE (ref) == TYPE_DECL\n-\t      && TREE_CODE (TREE_TYPE (ref)) == code)\n-\t    ref = TREE_TYPE (ref);\n+\t  if (ref && TREE_CODE (ref) == TYPE_DECL)\n+\t    {\n+\t      ref = check_elaborated_type_specifier (tag_code, \n+\t\t\t\t\t\t     TREE_TYPE (ref));\n+\t      if (ref == error_mark_node)\n+\t\tPOP_TIMEVAR_AND_RETURN (TV_NAME_LOOKUP, error_mark_node);\n+\t      if (ref && TREE_CODE (ref) != code)\n+\t\tref = NULL_TREE;\n+\t    }\n \t  else\n \t    ref = NULL_TREE;\n \t}"}, {"sha": "35bbeb964068e86906a01dc7e90a16f0f58cc6be", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/befcd99bcb1e93983abf4cd20e408a0b963be4e5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/befcd99bcb1e93983abf4cd20e408a0b963be4e5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=befcd99bcb1e93983abf4cd20e408a0b963be4e5", "patch": "@@ -1,3 +1,7 @@\n+2003-04-22  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/10428\n+\t* g++.dg/parse/elab1.C: New test.\n \n 2003-04-22  Devang Patel  <dpatel@apple.com>\n "}, {"sha": "2997eef62557cd77788f45c9478f2faa25b745ac", "filename": "gcc/testsuite/g++.dg/parse/elab1.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/befcd99bcb1e93983abf4cd20e408a0b963be4e5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Felab1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/befcd99bcb1e93983abf4cd20e408a0b963be4e5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Felab1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Felab1.C?ref=befcd99bcb1e93983abf4cd20e408a0b963be4e5", "patch": "@@ -0,0 +1,9 @@\n+namespace Name {\n+\n+    typedef void *(*Function)( void *, int );\n+\n+    struct Foo {\n+      struct Function xyz[5]; // { dg-error \"\" }\n+    };\n+\n+}"}]}