{"sha": "3a47c4e4f4524dc74020810689dd0fb21e15721e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2E0N2M0ZTRmNDUyNGRjNzQwMjA4MTA2ODlkZDBmYjIxZTE1NzIxZQ==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2007-08-27T20:40:00Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2007-08-27T20:40:00Z"}, "message": "extend.texi (gnu_inline funtion attribute): Document C++ behavior.\n\ngcc/ChangeLog:\n* doc/extend.texi (gnu_inline funtion attribute): Document C++\nbehavior.\ngcc/cp/ChangeLog:\n* decl.c (GNU_INLINE_P): New.\n(duplicate_decls): Handle gnu_inline.  Merge attributes and\nsome flags in overriding definitions.\n(redeclaration_error_message): Handle gnu_inline.\n(start_preparsed_function): Likewise.\ngcc/testsuite/ChangeLog:\n* g++.dg/ext/gnu-inline-common.h: New.\n* g++.dg/ext/gnu-inline-global-reject.C: New.\n* g++.dg/ext/gnu-inline-global.C: New.\n* g++.dg/ext/gnu-inline-namespace.C: New.\n* g++.dg/ext/gnu-inline-anon-namespace.C: New.\n* g++.dg/ext/gnu-inline-class.C: New.\n* g++.dg/ext/gnu-inline-class-static.C: New.\n* g++.dg/ext/gnu-inline-template-class.C: New.\n* g++.dg/ext/gnu-inline-template-func.C: New.\n\nFrom-SVN: r127839", "tree": {"sha": "f558d774fa8c7f13553e534c150c8c4a1f1c8f25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f558d774fa8c7f13553e534c150c8c4a1f1c8f25"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3a47c4e4f4524dc74020810689dd0fb21e15721e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a47c4e4f4524dc74020810689dd0fb21e15721e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a47c4e4f4524dc74020810689dd0fb21e15721e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a47c4e4f4524dc74020810689dd0fb21e15721e/comments", "author": null, "committer": null, "parents": [{"sha": "83d7e8f06ecf948275efda077533032fe65a4855", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83d7e8f06ecf948275efda077533032fe65a4855", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83d7e8f06ecf948275efda077533032fe65a4855"}], "stats": {"total": 388, "additions": 372, "deletions": 16}, "files": [{"sha": "82c559d4cb2b3f875e49d4275716bb59582bd802", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a47c4e4f4524dc74020810689dd0fb21e15721e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a47c4e4f4524dc74020810689dd0fb21e15721e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3a47c4e4f4524dc74020810689dd0fb21e15721e", "patch": "@@ -1,3 +1,8 @@\n+2007-08-27  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\t* doc/extend.texi (gnu_inline funtion attribute): Document C++\n+\tbehavior.\n+\n 2007-08-27  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/31337"}, {"sha": "ca09bf4ea310fdd4726099815c2c95a24bd5250e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a47c4e4f4524dc74020810689dd0fb21e15721e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a47c4e4f4524dc74020810689dd0fb21e15721e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3a47c4e4f4524dc74020810689dd0fb21e15721e", "patch": "@@ -1,3 +1,11 @@\n+2007-08-27  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\t* decl.c (GNU_INLINE_P): New.\n+\t(duplicate_decls): Handle gnu_inline.  Merge attributes and\n+\tsome flags in overriding definitions.\n+\t(redeclaration_error_message): Handle gnu_inline.\n+\t(start_preparsed_function): Likewise.\n+\n 2007-08-25  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* call.c (sufficient_parms_p): Constify."}, {"sha": "ef63ffd83ace3cf68d89c3472cd2cbfd0e6dfa24", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 112, "deletions": 14, "changes": 126, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a47c4e4f4524dc74020810689dd0fb21e15721e/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a47c4e4f4524dc74020810689dd0fb21e15721e/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=3a47c4e4f4524dc74020810689dd0fb21e15721e", "patch": "@@ -1098,6 +1098,10 @@ check_redeclaration_exception_specification (tree new_decl,\n     }\n }\n \n+#define GNU_INLINE_P(fn) (DECL_DECLARED_INLINE_P (fn)\t\t\t\\\n+\t\t\t  && lookup_attribute (\"gnu_inline\",\t\t\\\n+\t\t\t\t\t       DECL_ATTRIBUTES (fn)))\n+\n /* If NEWDECL is a redeclaration of OLDDECL, merge the declarations.\n    If the redeclaration is invalid, a diagnostic is issued, and the\n    error_mark_node is returned.  Otherwise, OLDDECL is returned.\n@@ -1634,20 +1638,46 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n \t= chainon (DECL_TEMPLATE_SPECIALIZATIONS (olddecl),\n \t\t   DECL_TEMPLATE_SPECIALIZATIONS (newdecl));\n \n+      DECL_ATTRIBUTES (old_result)\n+\t= (*targetm.merge_decl_attributes) (old_result, new_result);\n+\n       if (DECL_FUNCTION_TEMPLATE_P (newdecl))\n \t{\n-\t  DECL_INLINE (old_result)\n-\t    |= DECL_INLINE (new_result);\n-\t  DECL_DECLARED_INLINE_P (old_result)\n-\t    |= DECL_DECLARED_INLINE_P (new_result);\n-\t  check_redeclaration_exception_specification (newdecl, olddecl);\n+\t  if (GNU_INLINE_P (old_result) != GNU_INLINE_P (new_result)\n+\t      && DECL_INITIAL (new_result))\n+\t    {\n+\t      if (DECL_INITIAL (old_result))\n+\t\t{\n+\t\t  DECL_INLINE (old_result) = 0;\n+\t\t  DECL_UNINLINABLE (old_result) = 1;\n+\t\t}\n+\t      else\n+\t\t{\n+\t\t  DECL_INLINE (old_result) = DECL_INLINE (new_result);\n+\t\t  DECL_UNINLINABLE (old_result) = DECL_UNINLINABLE (new_result);\n+\t\t}\n+\t      DECL_EXTERNAL (old_result) = DECL_EXTERNAL (new_result);\n+\t      DECL_NOT_REALLY_EXTERN (old_result)\n+\t\t= DECL_NOT_REALLY_EXTERN (new_result);\n+\t      DECL_INTERFACE_KNOWN (old_result)\n+\t\t= DECL_INTERFACE_KNOWN (new_result);\n+\t      DECL_DECLARED_INLINE_P (old_result)\n+\t\t= DECL_DECLARED_INLINE_P (new_result);\n+\t    }\n+\t  else\n+\t    {\n+\t      DECL_INLINE (old_result)\n+\t\t|= DECL_INLINE (new_result);\n+\t      DECL_DECLARED_INLINE_P (old_result)\n+\t\t|= DECL_DECLARED_INLINE_P (new_result);\n+\t      check_redeclaration_exception_specification (newdecl, olddecl);\n+\t    }\n \t}\n \n       /* If the new declaration is a definition, update the file and\n \t line information on the declaration, and also make\n \t the old declaration the same definition.  */\n-      if (DECL_INITIAL (old_result) == NULL_TREE\n-\t  && DECL_INITIAL (new_result) != NULL_TREE)\n+      if (DECL_INITIAL (new_result) != NULL_TREE)\n \t{\n \t  DECL_SOURCE_LOCATION (olddecl)\n \t    = DECL_SOURCE_LOCATION (old_result)\n@@ -1805,9 +1835,30 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n   new_template = NULL_TREE;\n   if (DECL_LANG_SPECIFIC (newdecl) && DECL_LANG_SPECIFIC (olddecl))\n     {\n-      DECL_INTERFACE_KNOWN (newdecl) |= DECL_INTERFACE_KNOWN (olddecl);\n-      DECL_NOT_REALLY_EXTERN (newdecl) |= DECL_NOT_REALLY_EXTERN (olddecl);\n-      DECL_COMDAT (newdecl) |= DECL_COMDAT (olddecl);\n+      bool old_decl_gnu_inline;\n+\n+      if ((DECL_INTERFACE_KNOWN (olddecl)\n+\t   && TREE_CODE (olddecl) == FUNCTION_DECL)\n+\t  || (TREE_CODE (olddecl) == TEMPLATE_DECL\n+\t      && TREE_CODE (DECL_TEMPLATE_RESULT (olddecl)) == FUNCTION_DECL))\n+\t{\n+\t  tree fn = olddecl;\n+\n+\t  if (TREE_CODE (fn) == TEMPLATE_DECL)\n+\t    fn = DECL_TEMPLATE_RESULT (olddecl);\n+\n+\t  old_decl_gnu_inline = GNU_INLINE_P (fn) && DECL_INITIAL (fn);\n+\t}\n+      else\n+\told_decl_gnu_inline = false;\n+\n+      if (!old_decl_gnu_inline)\n+\t{\n+\t  DECL_INTERFACE_KNOWN (newdecl) |= DECL_INTERFACE_KNOWN (olddecl);\n+\t  DECL_INTERFACE_KNOWN (newdecl) |= DECL_INTERFACE_KNOWN (olddecl);\n+\t  DECL_NOT_REALLY_EXTERN (newdecl) |= DECL_NOT_REALLY_EXTERN (olddecl);\n+\t  DECL_COMDAT (newdecl) |= DECL_COMDAT (olddecl);\n+\t}\n       DECL_TEMPLATE_INSTANTIATED (newdecl)\n \t|= DECL_TEMPLATE_INSTANTIATED (olddecl);\n \n@@ -1881,6 +1932,13 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n \t  /* [temp.expl.spec/14] We don't inline explicit specialization\n \t     just because the primary template says so.  */\n \t}\n+      else if (new_defines_function && DECL_INITIAL (olddecl))\n+\t{\n+\t  /* C++ is always in in unit-at-a-time mode, so we never\n+\t     inline re-defined extern inline functions.  */\n+\t  DECL_INLINE (newdecl) = 0;\n+\t  DECL_UNINLINABLE (newdecl) = 1;\n+\t}\n       else\n \t{\n \t  if (DECL_PENDING_INLINE_INFO (newdecl) == 0)\n@@ -2123,9 +2181,25 @@ redeclaration_error_message (tree newdecl, tree olddecl)\n \t{\n \t  if (DECL_NAME (olddecl) == NULL_TREE)\n \t    return \"%q#D not declared in class\";\n-\t  else\n+\t  else if (!GNU_INLINE_P (olddecl)\n+\t\t   || GNU_INLINE_P (newdecl))\n \t    return \"redefinition of %q#D\";\n \t}\n+\n+      if (DECL_DECLARED_INLINE_P (olddecl) && DECL_DECLARED_INLINE_P (newdecl))\n+\t{\n+\t  bool olda = GNU_INLINE_P (olddecl);\n+\t  bool newa = GNU_INLINE_P (newdecl);\n+\n+\t  if (olda != newa)\n+\t    {\n+\t      if (newa)\n+\t\treturn \"%q+D redeclared inline with %<gnu_inline%> attribute\";\n+\t      else\n+\t\treturn \"%q+D redeclared inline without %<gnu_inline%> attribute\";\n+\t    }\n+\t}\n+\n       return NULL;\n     }\n   else if (TREE_CODE (newdecl) == TEMPLATE_DECL)\n@@ -2151,9 +2225,24 @@ redeclaration_error_message (tree newdecl, tree olddecl)\n       ot = DECL_TEMPLATE_RESULT (olddecl);\n       if (DECL_TEMPLATE_INFO (ot))\n \tot = DECL_TEMPLATE_RESULT (template_for_substitution (ot));\n-      if (DECL_INITIAL (nt) && DECL_INITIAL (ot))\n+      if (DECL_INITIAL (nt) && DECL_INITIAL (ot)\n+\t  && (!GNU_INLINE_P (ot) || GNU_INLINE_P (nt)))\n \treturn \"redefinition of %q#D\";\n \n+      if (DECL_DECLARED_INLINE_P (ot) && DECL_DECLARED_INLINE_P (nt))\n+\t{\n+\t  bool olda = GNU_INLINE_P (ot);\n+\t  bool newa = GNU_INLINE_P (nt);\n+\n+\t  if (olda != newa)\n+\t    {\n+\t      if (newa)\n+\t\treturn \"%q+D redeclared inline with %<gnu_inline%> attribute\";\n+\t      else\n+\t\treturn \"%q+D redeclared inline without %<gnu_inline%> attribute\";\n+\t    }\n+\t}\n+\n       /* Core issue #226 (C++0x): \n            \n            If a friend function template declaration specifies a\n@@ -10786,6 +10875,14 @@ start_preparsed_function (tree decl1, tree attrs, int flags)\n       && lookup_attribute (\"noinline\", attrs))\n     warning (0, \"inline function %q+D given attribute noinline\", decl1);\n \n+  /* Handle gnu_inline attribute.  */\n+  if (GNU_INLINE_P (decl1))\n+    {\n+      DECL_EXTERNAL (decl1) = 1;\n+      DECL_NOT_REALLY_EXTERN (decl1) = 0;\n+      DECL_INTERFACE_KNOWN (decl1) = 1;\n+    }\n+\n   if (DECL_MAYBE_IN_CHARGE_CONSTRUCTOR_P (decl1))\n     /* This is a constructor, we must ensure that any default args\n        introduced by this definition are propagated to the clones\n@@ -11071,8 +11168,9 @@ start_preparsed_function (tree decl1, tree attrs, int flags)\n   else\n     {\n       /* This is a definition, not a reference.\n-\t So clear DECL_EXTERNAL.  */\n-      DECL_EXTERNAL (decl1) = 0;\n+\t So clear DECL_EXTERNAL, unless this is a GNU extern inline.  */\n+      if (!GNU_INLINE_P (decl1))\n+\tDECL_EXTERNAL (decl1) = 0;\n \n       if ((DECL_DECLARED_INLINE_P (decl1)\n \t   || DECL_TEMPLATE_INSTANTIATION (decl1))"}, {"sha": "f0a8b4d3f4c62833f2c45fdc92d2b2b2c8052ec1", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a47c4e4f4524dc74020810689dd0fb21e15721e/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a47c4e4f4524dc74020810689dd0fb21e15721e/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=3a47c4e4f4524dc74020810689dd0fb21e15721e", "patch": "@@ -1718,8 +1718,8 @@ refer to the single copy in the library.  Note that the two\n definitions of the functions need not be precisely the same, although\n if they do not have the same effect your program may behave oddly.\n \n-If the function is neither @code{extern} nor @code{static}, then the\n-function is compiled as a standalone function, as well as being\n+In C, if the function is neither @code{extern} nor @code{static}, then\n+the function is compiled as a standalone function, as well as being\n inlined where possible.\n \n This is how GCC traditionally handled functions declared\n@@ -1731,6 +1731,10 @@ preprocessor macros @code{__GNUC_GNU_INLINE__} or\n @code{__GNUC_STDC_INLINE__} are defined.  @xref{Inline,,An Inline\n Function is As Fast As a Macro}.\n \n+In C++, this attribute does not depend on @code{extern} in any way,\n+but it still requires the @code{inline} keyword to enable its special\n+behavior.\n+\n @cindex @code{flatten} function attribute\n @item flatten\n Generally, inlining into a function is limited.  For a function marked with"}, {"sha": "7839eaa831a3b0cc9c51b78809691000db5a8bce", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a47c4e4f4524dc74020810689dd0fb21e15721e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a47c4e4f4524dc74020810689dd0fb21e15721e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3a47c4e4f4524dc74020810689dd0fb21e15721e", "patch": "@@ -1,3 +1,15 @@\n+2007-08-27  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\t* g++.dg/ext/gnu-inline-common.h: New.\n+\t* g++.dg/ext/gnu-inline-global-reject.C: New.\n+\t* g++.dg/ext/gnu-inline-global.C: New.\n+\t* g++.dg/ext/gnu-inline-namespace.C: New.\n+\t* g++.dg/ext/gnu-inline-anon-namespace.C: New.\n+\t* g++.dg/ext/gnu-inline-class.C: New.\n+\t* g++.dg/ext/gnu-inline-class-static.C: New.\n+\t* g++.dg/ext/gnu-inline-template-class.C: New.\n+\t* g++.dg/ext/gnu-inline-template-func.C: New.\n+\n 2007-08-27  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/31337"}, {"sha": "b33629dcfff172c03c87af514456f0a3b6cc5011", "filename": "gcc/testsuite/g++.dg/ext/gnu-inline-anon-namespace.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a47c4e4f4524dc74020810689dd0fb21e15721e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fgnu-inline-anon-namespace.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a47c4e4f4524dc74020810689dd0fb21e15721e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fgnu-inline-anon-namespace.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fgnu-inline-anon-namespace.C?ref=3a47c4e4f4524dc74020810689dd0fb21e15721e", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O\" } */ // such that static functions are optimized out\n+/* { dg-final { scan-assembler-not \"func1\" } } */\n+/* { dg-final { scan-assembler-not \"func2\" } } */\n+/* { dg-final { scan-assembler-not \"func3\" } } */\n+/* { dg-final { scan-assembler-not \"func4\" } } */\n+/* { dg-final { scan-assembler-not \"func5\" } } */\n+\n+namespace {\n+#include \"gnu-inline-global.C\"\n+}"}, {"sha": "f22a23c0ba62b4f3c72e516ca1dcf52f82763ae9", "filename": "gcc/testsuite/g++.dg/ext/gnu-inline-class-static.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a47c4e4f4524dc74020810689dd0fb21e15721e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fgnu-inline-class-static.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a47c4e4f4524dc74020810689dd0fb21e15721e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fgnu-inline-class-static.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fgnu-inline-class-static.C?ref=3a47c4e4f4524dc74020810689dd0fb21e15721e", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O\" } */ // such that static functions are optimized out\n+/* { dg-final { scan-assembler \"func1\" } } */\n+/* { dg-final { scan-assembler \"func2\" } } */\n+/* { dg-final { scan-assembler-not \"func3\" } } */\n+/* { dg-final { scan-assembler \"func4\" } } */\n+/* { dg-final { scan-assembler \"func5\" } } */\n+\n+#undef IN_CLASS\n+#define IN_CLASS gnu_test_static\n+\n+struct IN_CLASS {\n+  static int func1(void);\n+  static int func2(void);\n+  static int func3(void);\n+  static int func4(void);\n+  static int func5(void);\n+};\n+\n+#include \"gnu-inline-global.C\""}, {"sha": "71a0b1e36c115a5d63643c342be32c5c0b0e7b22", "filename": "gcc/testsuite/g++.dg/ext/gnu-inline-class.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a47c4e4f4524dc74020810689dd0fb21e15721e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fgnu-inline-class.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a47c4e4f4524dc74020810689dd0fb21e15721e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fgnu-inline-class.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fgnu-inline-class.C?ref=3a47c4e4f4524dc74020810689dd0fb21e15721e", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O\" } */ // such that static functions are optimized out\n+/* { dg-final { scan-assembler \"func1\" } } */\n+/* { dg-final { scan-assembler \"func2\" } } */\n+/* { dg-final { scan-assembler-not \"func3\" } } */\n+/* { dg-final { scan-assembler \"func4\" } } */\n+/* { dg-final { scan-assembler \"func5\" } } */\n+\n+#define IN_CLASS gnu_test\n+\n+struct IN_CLASS {\n+  int func1(void);\n+  int func2(void);\n+  int func3(void);\n+  int func4(void);\n+  int func5(void);\n+};\n+\n+#include \"gnu-inline-global.C\""}, {"sha": "87455ae7a6cb76fb02a7bdb33786af98e91faaff", "filename": "gcc/testsuite/g++.dg/ext/gnu-inline-common.h", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a47c4e4f4524dc74020810689dd0fb21e15721e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fgnu-inline-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a47c4e4f4524dc74020810689dd0fb21e15721e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fgnu-inline-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fgnu-inline-common.h?ref=3a47c4e4f4524dc74020810689dd0fb21e15721e", "patch": "@@ -0,0 +1,24 @@\n+#ifndef gnu\n+# define gnu_inline __attribute__((gnu_inline)) inline\n+#endif\n+\n+#define declspec(spec, name) spec int name (void)\n+#ifdef IN_CLASS\n+# define decl(spec, name)\n+#else\n+# define decl(spec, name) defpfx declspec(spec, name);\n+#endif\n+#define def(spec, name, ret) defpfx declspec(spec, name) { return ret; }\n+#define gnuindef(name, ret) def(gnu_inline, name, ret)\n+\n+#ifndef pfx\n+# ifdef IN_CLASS\n+#  define pfx(x) IN_CLASS::x\n+# else\n+#  define pfx(x) x\n+# endif\n+#endif\n+\n+#ifndef defpfx\n+# define defpfx\n+#endif"}, {"sha": "2f2b8f29a08a19a5816324eece496b645484a7a1", "filename": "gcc/testsuite/g++.dg/ext/gnu-inline-global-reject.C", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a47c4e4f4524dc74020810689dd0fb21e15721e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fgnu-inline-global-reject.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a47c4e4f4524dc74020810689dd0fb21e15721e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fgnu-inline-global-reject.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fgnu-inline-global-reject.C?ref=3a47c4e4f4524dc74020810689dd0fb21e15721e", "patch": "@@ -0,0 +1,55 @@\n+/* Test __attribute__((gnu_inline)).\n+\n+   Check that we reject various forms of duplicate definitions.\n+*/\n+\n+/* { dg-do compile } */\n+\n+#include \"gnu-inline-common.h\"\n+\n+#undef fn\n+#define fn pfx(func_decl_inline_before)\n+decl(inline, fn) // { dg-error \"previous\" \"\" }\n+gnuindef(fn, 0) // { dg-error \"redeclared\" \"\" }\n+\n+#undef fn\n+#define fn pfx(func_decl_inline_after)\n+gnuindef(fn, 0) // { dg-error \"previous\" \"\" }\n+decl(inline, fn) // { dg-error \"redeclared\" \"\" }\n+\n+#undef fn\n+#define fn pfx(func_def_gnuin_redef)\n+gnuindef(fn, 0) // { dg-error \"previous\" \"\" }\n+gnuindef(fn, 1) // { dg-error \"redefinition\" \"\" }\n+\n+#undef fn\n+#define fn pfx(func_def_inline_redef)\n+def(inline, fn, 0) // { dg-error \"previous\" \"\" }\n+def(inline, fn, 1) // { dg-error \"redefinition\" \"\" }\n+\n+#undef fn\n+#define fn pfx(func_def_inline_after)\n+gnuindef(fn, 0) // { dg-error \"previous\" \"\" }\n+def(inline, fn, 1) // { dg-error \"redeclare\" \"\" }\n+\n+#undef fn\n+#define fn pfx(func_def_inline_before)\n+def(inline, fn, 0) // { dg-error \"previous\" \"\" }\n+gnuindef(fn, 1) // { dg-error \"redefinition\" \"\" }\n+\n+#undef fn\n+#define fn pfx(func_def_before)\n+def(, fn, 0) // { dg-error \"previous\" \"\" }\n+gnuindef(fn, 1) // { dg-error \"redefinition\" \"\" }\n+\n+#undef fn\n+#define fn pfx(func_decl_static_inline_before)\n+decl(static inline, fn) // { dg-error \"previous\" \"\" }\n+gnuindef(fn, 0) // { dg-error \"redeclared\" \"\" }\n+\n+#undef fn\n+#define fn pfx(func_def_static_inline_after)\n+decl(static, fn)\n+gnuindef(fn, 0) // { dg-error \"previous\" \"\" }\n+decl(static, fn)\n+def(static inline, fn, 1) // { dg-error \"redeclare\" \"\" }"}, {"sha": "f628073f9fe039a28f77e115a1720eaacabf5478", "filename": "gcc/testsuite/g++.dg/ext/gnu-inline-global.C", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a47c4e4f4524dc74020810689dd0fb21e15721e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fgnu-inline-global.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a47c4e4f4524dc74020810689dd0fb21e15721e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fgnu-inline-global.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fgnu-inline-global.C?ref=3a47c4e4f4524dc74020810689dd0fb21e15721e", "patch": "@@ -0,0 +1,50 @@\n+/* Test __attribute__((gnu_inline)).\n+\n+   Check that __attribute__((gnu_inline)) has no effect, in the\n+   absence of extern and/or inline.\n+\n+   Check that we don't get out-of-line definitions for extern inline\n+   gnu_inline functions, regardless of declarations or definitions.\n+\n+   Check that such functions can be overridden by out-of-line\n+   definitions.\n+\n+ */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O\" } */ // such that static functions are optimized out\n+/* { dg-final { scan-assembler \"func1\" } } */\n+/* { dg-final { scan-assembler \"func2\" } } */\n+/* { dg-final { scan-assembler-not \"func3\" } } */\n+/* { dg-final { scan-assembler \"func4\" } } */\n+/* { dg-final { scan-assembler-not \"func5\" } } */\n+\n+#include \"gnu-inline-common.h\"\n+\n+#undef fn\n+#define fn pfx(func1) // must be emitted out-of-line\n+gnuindef(fn, 0)\n+def(, fn, 2)\n+\n+#undef fn\n+#define fn pfx(func2) // must be emitted out-of-line\n+decl(extern, fn)\n+gnuindef(fn, 0)\n+def(, fn, 2)\n+\n+#undef fn\n+#define fn pfx(func3) // must not be emitted\n+decl(extern, fn)\n+gnuindef(fn, 0)\n+\n+#undef fn\n+#define fn pfx(func4) // must be emitted out-of-line\n+decl(extern, fn)\n+gnuindef(fn, 0)\n+def(, fn, 1)\n+\n+#undef fn\n+#define fn pfx(func5) // must NOT be emitted, because it's static and unused\n+decl(static, fn)\n+gnuindef(fn, 0)\n+def(, fn, 1)"}, {"sha": "ce3fea6558d87fe7e6b02ee7a68f5de33c559de4", "filename": "gcc/testsuite/g++.dg/ext/gnu-inline-namespace.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a47c4e4f4524dc74020810689dd0fb21e15721e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fgnu-inline-namespace.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a47c4e4f4524dc74020810689dd0fb21e15721e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fgnu-inline-namespace.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fgnu-inline-namespace.C?ref=3a47c4e4f4524dc74020810689dd0fb21e15721e", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O\" } */ // such that static functions are optimized out\n+/* { dg-final { scan-assembler \"func1\" } } */\n+/* { dg-final { scan-assembler \"func2\" } } */\n+/* { dg-final { scan-assembler-not \"func3\" } } */\n+/* { dg-final { scan-assembler \"func4\" } } */\n+/* { dg-final { scan-assembler-not \"func5\" } } */\n+\n+namespace gnu_test {\n+#include \"gnu-inline-global.C\"\n+}"}, {"sha": "9bf36a8d6701f8ba9930454a6e6ffb6f11bba0cc", "filename": "gcc/testsuite/g++.dg/ext/gnu-inline-template-class.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a47c4e4f4524dc74020810689dd0fb21e15721e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fgnu-inline-template-class.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a47c4e4f4524dc74020810689dd0fb21e15721e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fgnu-inline-template-class.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fgnu-inline-template-class.C?ref=3a47c4e4f4524dc74020810689dd0fb21e15721e", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O\" } */ // such that static functions are optimized out\n+/* { dg-final { scan-assembler \"func1\" } } */\n+/* { dg-final { scan-assembler \"func2\" } } */\n+/* { dg-final { scan-assembler-not \"func3\" } } */\n+/* { dg-final { scan-assembler \"func4\" } } */\n+/* { dg-final { scan-assembler \"func5\" } } */\n+\n+template <typename T> struct gnu_test {\n+  int func1(void);\n+  int func2(void);\n+  int func3(void);\n+  int func4(void);\n+  int func5(void);\n+};\n+\n+#define defpfx template <typename T>\n+#define IN_CLASS gnu_test<T>\n+\n+#include \"gnu-inline-global.C\"\n+\n+template struct gnu_test<int>;"}, {"sha": "fb88a2a91f729ae586f96f32b101c635ba85dc72", "filename": "gcc/testsuite/g++.dg/ext/gnu-inline-template-func.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a47c4e4f4524dc74020810689dd0fb21e15721e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fgnu-inline-template-func.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a47c4e4f4524dc74020810689dd0fb21e15721e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fgnu-inline-template-func.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fgnu-inline-template-func.C?ref=3a47c4e4f4524dc74020810689dd0fb21e15721e", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O\" } */ // such that static functions are optimized out\n+/* { dg-final { scan-assembler \"func1\" } } */\n+/* { dg-final { scan-assembler \"func2\" } } */\n+/* { dg-final { scan-assembler-not \"func3\" } } */\n+/* { dg-final { scan-assembler \"func4\" } } */\n+/* { dg-final { scan-assembler-not \"func5\" } } */\n+\n+#define defpfx template <typename T>\n+\n+#include \"gnu-inline-global.C\"\n+\n+template int func1<int>(void);\n+template int func2<int>(void);\n+template int func3<int>(void);\n+template int func4<int>(void);\n+template int func5<int>(void);"}]}