{"sha": "c25c12b8aa19e3a23ea3511184b87d739555d4ae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzI1YzEyYjhhYTE5ZTNhMjNlYTM1MTExODRiODdkNzM5NTU1ZDRhZQ==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "amylaar@redhat.com", "date": "2000-11-22T01:22:02Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2000-11-22T01:22:02Z"}, "message": "rtl.h (traverse_md_constants): Declare.\n\n\t* rtl.h (traverse_md_constants): Declare.\n\t(struct md_constant): Define.\n\t* Makefile.in (HOST_RTL): Add hashtab.o .\n\t(OBJS): Add hashtab.o .\n\t(hashtab.o): New rule.\n\t(rtl.o): Depends on HASHTAB_H.\n\t* rtl.c (hashtab.h): #include.\n\t(md_constants): New static variable.\n\t(def_hash, def_name_eq_p, read_constants): New static functions.\n\t(traverse_md_constants): New function.\n\t(read_name): Do constant expansion.\n\t(read_rtx): Recognize define_constants.\n\t* gencodes.c (print_md_constant): New function.\n\t(main): Emit #defines for all constant definitions encountered.\n\t* md.texi (Constant Definitions): New node.\n\t* gensupport.c (xcalloc): New function.\n\nFrom-SVN: r37635", "tree": {"sha": "2c6657d3d97f9c62e1acbc3a2c7ea186a70e237e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2c6657d3d97f9c62e1acbc3a2c7ea186a70e237e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c25c12b8aa19e3a23ea3511184b87d739555d4ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c25c12b8aa19e3a23ea3511184b87d739555d4ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c25c12b8aa19e3a23ea3511184b87d739555d4ae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c25c12b8aa19e3a23ea3511184b87d739555d4ae/comments", "author": null, "committer": null, "parents": [{"sha": "f940c352debee086372f374dc8cf374b8f485fd7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f940c352debee086372f374dc8cf374b8f485fd7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f940c352debee086372f374dc8cf374b8f485fd7"}], "stats": {"total": 247, "additions": 242, "deletions": 5}, "files": [{"sha": "a60a7e9ae70a68f4015061c817c786a1f5f8bb6e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25c12b8aa19e3a23ea3511184b87d739555d4ae/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25c12b8aa19e3a23ea3511184b87d739555d4ae/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c25c12b8aa19e3a23ea3511184b87d739555d4ae", "patch": "@@ -1,3 +1,22 @@\n+Wed Nov 22 00:52:55 2000  J\"orn Rennecke <amylaar@redhat.com>\n+\n+\t* rtl.h (traverse_md_constants): Declare.\n+\t(struct md_constant): Define.\n+\t* Makefile.in (HOST_RTL): Add hashtab.o .\n+\t(OBJS): Add hashtab.o .\n+\t(hashtab.o): New rule.\n+\t(rtl.o): Depends on HASHTAB_H.\n+\t* rtl.c (hashtab.h): #include.\n+\t(md_constants): New static variable.\n+\t(def_hash, def_name_eq_p, read_constants): New static functions.\n+\t(traverse_md_constants): New function.\n+\t(read_name): Do constant expansion.\n+\t(read_rtx): Recognize define_constants.\n+\t* gencodes.c (print_md_constant): New function.\n+\t(main): Emit #defines for all constant definitions encountered.\n+\t* md.texi (Constant Definitions): New node.\n+\t* gensupport.c (xcalloc): New function.\n+\n 2000-11-21  Richard Henderson  <rth@redhat.com>\n \n \t* config/alpha/alpha.c (alpha_split_tfmode_frobsign): New."}, {"sha": "a80b6af99e132082b0451c332d927e96d72cb4a8", "filename": "gcc/Makefile.in", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25c12b8aa19e3a23ea3511184b87d739555d4ae/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25c12b8aa19e3a23ea3511184b87d739555d4ae/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=c25c12b8aa19e3a23ea3511184b87d739555d4ae", "patch": "@@ -633,7 +633,7 @@ HOST_LIBS = $(USE_HOST_OBSTACK) $(USE_HOST_ALLOCA) $(USE_HOST_MALLOC)  \\\n \t    $(USE_HOST_VFPRINTF) $(USE_HOST_DOPRINT) $(HOST_CLIB)\n \n HOST_RTL = $(HOST_PREFIX)rtl.o $(HOST_PREFIX)bitmap.o \\\n-\t\t$(HOST_PREFIX)ggc-none.o gensupport.o\n+\t\t$(HOST_PREFIX)ggc-none.o gensupport.o hashtab.o\n \n HOST_PRINT = $(HOST_PREFIX)print-rtl.o\n HOST_ERRORS = $(HOST_PREFIX)errors.o\n@@ -735,7 +735,8 @@ OBJS = diagnostic.o version.o tree.o print-tree.o stor-layout.o fold-const.o  \\\n  profile.o insn-attrtab.o $(out_object_file) $(EXTRA_OBJS) convert.o\t      \\\n  mbchar.o splay-tree.o graph.o sbitmap.o resource.o hash.o predict.o\t      \\\n  lists.o ggc-common.o $(GGC) stringpool.o simplify-rtx.o ssa.o bb-reorder.o   \\\n- sibcall.o conflict.o timevar.o ifcvt.o dominance.o dependence.o dce.o\n+ sibcall.o conflict.o timevar.o ifcvt.o dominance.o dependence.o dce.o \\\n+ hashtab.o\n \n BACKEND = toplev.o libbackend.a\n \n@@ -1653,6 +1654,11 @@ $(MD_FILE): $(MD_DEPS)\n gensupport.o: gensupport.c $(RTL_H) $(OBSTACK_H) system.h errors.h gensupport.h\n \t$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(srcdir)/gensupport.c\n \n+hashtab.o: $(srcdir)/../libiberty/hashtab.c $(CONFIG_H)\n+\trm -f hashtab.c\n+\t$(LN_S) $(srcdir)/../libiberty/hashtab.c hashtab.c\n+\t$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) hashtab.c\n+\n genconfig : genconfig.o $(HOST_RTL) $(HOST_PRINT) $(HOST_ERRORS) $(HOST_LIBDEPS)\n \t$(HOST_CC) $(HOST_CFLAGS) $(HOST_LDFLAGS) -o $@ \\\n \t  genconfig.o $(HOST_RTL) $(HOST_PRINT) $(HOST_ERRORS) $(HOST_LIBS)\n@@ -1749,7 +1755,7 @@ gengenrtl.o : gengenrtl.c $(RTL_BASE_H) system.h real.h\n # and HOST_PREFIX_1 is `foobar', just to ensure these rules don't conflict\n # with the rules for rtl.o, alloca.o, etc.\n $(HOST_PREFIX_1)rtl.o: $(srcdir)/rtl.c $(CONFIG_H) system.h $(RTL_H) \\\n-  bitmap.h $(GGC_H) toplev.h\n+  bitmap.h $(GGC_H) toplev.h $(HASHTAB_H)\n \trm -f $(HOST_PREFIX)rtl.c\n \tsed -e 's/config[.]h/hconfig.h/' $(srcdir)/rtl.c > $(HOST_PREFIX)rtl.c\n \t$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(HOST_PREFIX)rtl.c"}, {"sha": "04d6b45961c2c82c0848c7cb15a2582130305158", "filename": "gcc/gencodes.c", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25c12b8aa19e3a23ea3511184b87d739555d4ae/gcc%2Fgencodes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25c12b8aa19e3a23ea3511184b87d739555d4ae/gcc%2Fgencodes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgencodes.c?ref=c25c12b8aa19e3a23ea3511184b87d739555d4ae", "patch": "@@ -32,6 +32,7 @@ Boston, MA 02111-1307, USA.  */\n static int insn_code_number;\n \n static void gen_insn PARAMS ((rtx));\n+static int print_md_constant PARAMS ((void **, void *));\n \n static void\n gen_insn (insn)\n@@ -86,9 +87,11 @@ from the machine description file `md'.  */\\n\\n\");\n \n   printf (\"  CODE_FOR_nothing = %d };\\n\", insn_code_number + 1);\n \n-  printf (\"\\n#define MAX_INSN_CODE ((int) CODE_FOR_nothing)\\n\");\n+  printf (\"\\n#define MAX_INSN_CODE ((int) CODE_FOR_nothing)\\n\\n\");\n \n-  printf (\"#endif /* MAX_INSN_CODE */\\n\");\n+  traverse_md_constants (print_md_constant, stdout);\n+\n+  printf (\"\\n#endif /* MAX_INSN_CODE */\\n\");\n \n   fflush (stdout);\n   return (ferror (stdout) != 0 ? FATAL_EXIT_CODE : SUCCESS_EXIT_CODE);\n@@ -101,3 +104,17 @@ get_insn_name (code)\n {\n   return NULL;\n }\n+\n+/* Called via traverse_md_constants; emit a #define for\n+   the current constant definition.  */\n+static int\n+print_md_constant (slot, info)\n+     void **slot;\n+     void *info;\n+{\n+  struct md_constant *def = *slot;\n+  FILE *file = info;\n+\n+  fprintf (file, \"#define %s %s\\n\", def->name, def->value);\n+  return 1;\n+}"}, {"sha": "cde2a220b4e7225fea1f564a7eb6976ffb272fc6", "filename": "gcc/gensupport.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25c12b8aa19e3a23ea3511184b87d739555d4ae/gcc%2Fgensupport.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25c12b8aa19e3a23ea3511184b87d739555d4ae/gcc%2Fgensupport.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgensupport.c?ref=c25c12b8aa19e3a23ea3511184b87d739555d4ae", "patch": "@@ -862,6 +862,21 @@ xstrdup (input)\n   return output;\n }\n \n+PTR\n+xcalloc (nelem, elsize)\n+  size_t nelem, elsize;\n+{\n+  PTR newmem;\n+\n+  if (nelem == 0 || elsize == 0)\n+    nelem = elsize = 1;\n+\n+  newmem = calloc (nelem, elsize);\n+  if (!newmem)\n+    fatal (\"virtual memory exhausted\");\n+  return (newmem);\n+}\n+\n PTR\n xrealloc (old, size)\n   PTR old;"}, {"sha": "82271596bb4e997c2952d8f3ad501174ab4baa30", "filename": "gcc/md.texi", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25c12b8aa19e3a23ea3511184b87d739555d4ae/gcc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25c12b8aa19e3a23ea3511184b87d739555d4ae/gcc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmd.texi?ref=c25c12b8aa19e3a23ea3511184b87d739555d4ae", "patch": "@@ -39,6 +39,8 @@ See the next chapter for information on the C header file.\n * Insn Attributes::     Specifying the value of attributes for generated insns.\n * Conditional Execution::Generating @code{define_insn} patterns for\n                            predication.\n+* Constant Definitions::Defining symbolic constants that can be used in the\n+                        md file.\n @end menu\n \n @node Patterns\n@@ -4690,3 +4692,55 @@ generates a new pattern\n   \"(@var{test2}) && (@var{test1})\"\n   \"(%3) add %2,%1,%0\")\n @end smallexample\n+\n+@node Constant Definitions\n+@section Constant Definitions\n+@cindex constant definitions\n+@findex define_constants\n+\n+Using literal constants inside instruction patterns reduces legibility and\n+can be a maintenance problem.\n+\n+To overcome this problem, you may use the @code{define_constants}\n+expression.  It contains a vector of name-value pairs.  From that\n+point on, wherever any of the names appears in the MD file, it is as\n+if the corresponding value had been written instead.  You may use\n+@code{define_constants} multiple times; each appearance adds more\n+constants to the table.  It is an error to redefine a constant with\n+a different value.\n+\n+To come back to the a29k load multiple example, instead of\n+\n+@smallexample\n+(define_insn \"\"\n+  [(match_parallel 0 \"load_multiple_operation\"\n+     [(set (match_operand:SI 1 \"gpc_reg_operand\" \"=r\")\n+           (match_operand:SI 2 \"memory_operand\" \"m\"))\n+      (use (reg:SI 179))\n+      (clobber (reg:SI 179))])]\n+  \"\"\n+  \"loadm 0,0,%1,%2\")\n+@end smallexample\n+\n+You could write:\n+\n+@smallexample\n+(define_constants [\n+    (R_BP 177)\n+    (R_FC 178)\n+    (R_CR 179)\n+    (R_Q  180)\n+])\n+\n+(define_insn \"\"\n+  [(match_parallel 0 \"load_multiple_operation\"\n+     [(set (match_operand:SI 1 \"gpc_reg_operand\" \"=r\")\n+           (match_operand:SI 2 \"memory_operand\" \"m\"))\n+      (use (reg:SI R_CR))\n+      (clobber (reg:SI R_CR))])]\n+  \"\"\n+  \"loadm 0,0,%1,%2\")\n+@end smallexample\n+\n+The constants that are defined with a define_constant are also output\n+in the insn-codes.h header file as #defines."}, {"sha": "48efc2640c90f95468cd5a48968108aeb25b93cc", "filename": "gcc/rtl.c", "status": "modified", "additions": 123, "deletions": 0, "changes": 123, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25c12b8aa19e3a23ea3511184b87d739555d4ae/gcc%2Frtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25c12b8aa19e3a23ea3511184b87d739555d4ae/gcc%2Frtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.c?ref=c25c12b8aa19e3a23ea3511184b87d739555d4ae", "patch": "@@ -28,6 +28,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"ggc.h\"\n #include \"obstack.h\"\n #include \"toplev.h\"\n+#include \"hashtab.h\"\n \n #define\tobstack_chunk_alloc\txmalloc\n #define\tobstack_chunk_free\tfree\n@@ -290,10 +291,15 @@ const char * const reg_note_name[] =\n   \"REG_EH_RETHROW\", \"REG_SAVE_NOTE\", \"REG_MAYBE_DEAD\", \"REG_NORETURN\"\n };\n \n+static htab_t md_constants;\n+\n static void fatal_with_file_and_line PARAMS ((FILE *, const char *, ...))\n   ATTRIBUTE_PRINTF_2 ATTRIBUTE_NORETURN;\n static void fatal_expected_char PARAMS ((FILE *, int, int)) ATTRIBUTE_NORETURN;\n static void read_name\t\tPARAMS ((char *, FILE *));\n+static unsigned def_hash PARAMS ((const void *));\n+static int def_name_eq_p PARAMS ((const void *, const void *));\n+static void read_constants PARAMS ((FILE *infile, char *tmp_char));\n \n \f\n /* Allocate an rtx vector of N elements.\n@@ -829,6 +835,25 @@ read_name (str, infile)\n     read_rtx_lineno++;\n \n   *p = 0;\n+\n+  if (md_constants)\n+    {\n+      /* Do constant expansion.  */\n+      struct md_constant *def;\n+\n+      p = str;\n+      do\n+\t{\n+\t  struct md_constant tmp_def;\n+\n+\t  tmp_def.name = p;\n+\t  def = htab_find (md_constants, &tmp_def);\n+\t  if (def)\n+\t    p = def->value;\n+\t} while (def);\n+      if (p != str)\n+\tstrcpy (str, p);\n+    }\n }\n \f\n /* Provide a version of a function to read a long long if the system does\n@@ -868,6 +893,98 @@ atoll(p)\n }\n #endif\n \n+/* Given a constant definition, return a hash code for its name.  */\n+static unsigned\n+def_hash (def)\n+     const void *def;\n+{\n+  unsigned result, i;\n+  const char *string = ((const struct md_constant *)def)->name;\n+\n+  for (result = i = 0;*string++ != '\\0'; i++)\n+    result += ((unsigned char) *string << (i % CHAR_BIT));\n+  return result;\n+}\n+\n+/* Given two constant definitions, return true if they have the same name.  */\n+static int\n+def_name_eq_p (def1, def2)\n+     const void *def1, *def2;\n+{\n+  return ! strcmp (((const struct md_constant *)def1)->name,\n+\t\t   ((const struct md_constant *)def2)->name);\n+}\n+\n+/* INFILE is a FILE pointer to read text from.  TMP_CHAR is a buffer suitable\n+   to read a name or number into.  Process a define_constants directive,\n+   starting with the optional space after the \"define_constants\".  */\n+static void\n+read_constants (infile, tmp_char)\n+     FILE *infile;\n+     char *tmp_char;\n+{\n+  int c;\n+  htab_t defs;\n+\n+  c = read_skip_spaces (infile);\n+  if (c != '[')\n+    fatal_expected_char (infile, '[', c);\n+  defs = md_constants;\n+  if (! defs)\n+    defs = htab_create (32, def_hash, def_name_eq_p, (htab_del) 0);\n+  /* Disable constant expansion during definition processing.  */\n+  md_constants = 0;\n+  while ( (c = read_skip_spaces (infile)) != ']')\n+    {\n+      struct md_constant *def;\n+      void **entry_ptr;\n+\n+      if (c != '(')\n+\tfatal_expected_char (infile, '(', c);\n+      def = xmalloc (sizeof (struct md_constant));\n+      def->name = tmp_char;\n+      read_name (tmp_char, infile);\n+      entry_ptr = htab_find_slot (defs, def, TRUE);\n+      if (! *entry_ptr)\n+\tdef->name = xstrdup (tmp_char);\n+      c = read_skip_spaces (infile);\n+      ungetc (c, infile);\n+      read_name (tmp_char, infile);\n+      if (! *entry_ptr)\n+\t{\n+\t  def->value = xstrdup (tmp_char);\n+\t  *entry_ptr = def;\n+\t}\n+      else\n+\t{\n+\t  def = *entry_ptr;\n+\t  if (strcmp (def->value, tmp_char))\n+\t    fatal_with_file_and_line (infile,\n+\t\t\t\t      \"redefinition of %s, was %s, now %s\",\n+\t\t\t\t      def->name, def->value, tmp_char);\n+\t}\n+      c = read_skip_spaces (infile);\n+      if (c != ')')\n+\tfatal_expected_char (infile, ')', c);\n+    }\n+  md_constants = defs;\n+  c = read_skip_spaces (infile);\n+  if (c != ')')\n+    fatal_expected_char (infile, ')', c);\n+}\n+\n+/* For every constant definition, call CALLBACK with two arguments:\n+   a pointer a pointer to the constant definition and INFO.\n+   Stops when CALLBACK returns zero.  */\n+void\n+traverse_md_constants (callback, info)\n+     htab_trav callback;\n+     void *info;\n+{\n+  if (md_constants)\n+    htab_traverse (md_constants, callback, info);\n+}\n+\n /* Read an rtx in printed representation from INFILE\n    and return an actual rtx in core constructed accordingly.\n    read_rtx is not used in the compiler proper, but rather in\n@@ -907,6 +1024,7 @@ read_rtx (infile)\n     initialized = 1;\n   }\n \n+again:\n   c = read_skip_spaces (infile); /* Should be open paren.  */\n   if (c != '(')\n     fatal_expected_char (infile, '(', c);\n@@ -915,6 +1033,11 @@ read_rtx (infile)\n \n   tmp_code = UNKNOWN;\n \n+  if (! strcmp (tmp_char, \"define_constants\"))\n+    {\n+      read_constants (infile, tmp_char);\n+      goto again;\n+    }\n   for (i = 0; i < NUM_RTX_CODE; i++)\n     if (! strcmp (tmp_char, GET_RTX_NAME (i)))\n       {"}, {"sha": "c0f543d040bacad248da80d7513a8a2931675515", "filename": "gcc/rtl.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25c12b8aa19e3a23ea3511184b87d739555d4ae/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25c12b8aa19e3a23ea3511184b87d739555d4ae/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=c25c12b8aa19e3a23ea3511184b87d739555d4ae", "patch": "@@ -1946,6 +1946,9 @@ extern void init_varasm_once\t\tPARAMS ((void));\n \n /* In rtl.c */\n extern void init_rtl\t\t\tPARAMS ((void));\n+extern void traverse_md_constants\tPARAMS ((int (*) (void **, void *),\n+\t\t\t\t\t\t void *));\n+struct md_constant { char *name, *value; };\n \n #ifdef BUFSIZ\n extern int read_skip_spaces\t\tPARAMS ((FILE *));"}]}