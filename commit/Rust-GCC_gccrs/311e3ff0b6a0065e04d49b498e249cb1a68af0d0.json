{"sha": "311e3ff0b6a0065e04d49b498e249cb1a68af0d0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzExZTNmZjBiNmEwMDY1ZTA0ZDQ5YjQ5OGUyNDljYjFhNjhhZjBkMA==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@mrtock.ucsd.edu", "date": "2007-03-29T14:59:52Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2007-03-29T14:59:52Z"}, "message": "gengtype.c (oprintf): Mostly revert changes from 2007-03-26...\n\n\t* gengtype.c (oprintf): Mostly revert changes from 2007-03-26;\n\tadd comment explaining why vsnprintf cannot be used.\n\nFrom-SVN: r123332", "tree": {"sha": "61160a7915c47c25ff4c806b91e20390af7d0393", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/61160a7915c47c25ff4c806b91e20390af7d0393"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/311e3ff0b6a0065e04d49b498e249cb1a68af0d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/311e3ff0b6a0065e04d49b498e249cb1a68af0d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/311e3ff0b6a0065e04d49b498e249cb1a68af0d0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/311e3ff0b6a0065e04d49b498e249cb1a68af0d0/comments", "author": null, "committer": null, "parents": [{"sha": "e89886a0eaf0ff8b3642bba7b88b3e9353c2b714", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e89886a0eaf0ff8b3642bba7b88b3e9353c2b714", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e89886a0eaf0ff8b3642bba7b88b3e9353c2b714"}], "stats": {"total": 44, "additions": 20, "deletions": 24}, "files": [{"sha": "755d3be1065b868568610491e6bb756f8c301fcd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/311e3ff0b6a0065e04d49b498e249cb1a68af0d0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/311e3ff0b6a0065e04d49b498e249cb1a68af0d0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=311e3ff0b6a0065e04d49b498e249cb1a68af0d0", "patch": "@@ -1,3 +1,8 @@\n+2007-03-29  Zack Weinberg  <zack@mrtock.ucsd.edu>\n+\n+\t* gengtype.c (oprintf): Mostly revert changes from 2007-03-26;\n+\tadd comment explaining why vsnprintf cannot be used.\n+\n 2007-03-29  Douglas Gregor  <doug.gregor@gmail.com>\n \n \tPR tree-optimization/30666"}, {"sha": "648246dbd66bf1b96a0e036a178450fa278e7774", "filename": "gcc/gengtype.c", "status": "modified", "additions": 15, "deletions": 24, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/311e3ff0b6a0065e04d49b498e249cb1a68af0d0/gcc%2Fgengtype.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/311e3ff0b6a0065e04d49b498e249cb1a68af0d0/gcc%2Fgengtype.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengtype.c?ref=311e3ff0b6a0065e04d49b498e249cb1a68af0d0", "patch": "@@ -1475,24 +1475,26 @@ create_file (const char *name, const char *oname)\n   return f;\n }\n \n-/* Print, like fprintf, to O.  */\n+/* Print, like fprintf, to O.  \n+   N.B. You might think this could be implemented more efficiently\n+   with vsnprintf().  Unfortunately, there are C libraries that\n+   provide that function but without the C99 semantics for its return\n+   value, making it impossible to know how much space is required.  */\n void\n oprintf (outf_p o, const char *format, ...)\n {\n+  char *s;\n   size_t slength;\n+  va_list ap;\n \n-  /* Try first with the assumption that there is enough space.  */\n-  {\n-    va_list ap;\n-    va_start (ap, format);\n-    slength = vsnprintf (o->buf + o->bufused, o->buflength - o->bufused,\n-\t\t\t format, ap);\n-    va_end (ap);\n-  }\n+  va_start (ap, format);\n+  slength = vasprintf (&s, format, ap);\n+  if (s == NULL || (int)slength < 0)\n+    fatal (\"out of memory\");\n+  va_end (ap);\n \n-  if (o->bufused + slength >= o->buflength)\n+  if (o->bufused + slength > o->buflength)\n     {\n-      /* There wasn't enough space.  */\n       size_t new_len = o->buflength;\n       if (new_len == 0)\n \tnew_len = 1024;\n@@ -1501,21 +1503,10 @@ oprintf (outf_p o, const char *format, ...)\n       } while (o->bufused + slength >= new_len);\n       o->buf = XRESIZEVEC (char, o->buf, new_len);\n       o->buflength = new_len;\n-\n-      /* We now know that there is enough space. */\n-      {\n-\tsize_t slen2;\n-\tva_list ap;\n-\tva_start (ap, format);\n-\tslen2 = vsnprintf (o->buf + o->bufused, o->buflength - o->bufused,\n-\t\t\t   format, ap);\n-\tva_end (ap);\n-\n-\tgcc_assert (slen2 == slength);\n-\tgcc_assert (o->bufused + slen2 < o->buflength);\n-      }\n     }\n+  memcpy (o->buf + o->bufused, s, slength);\n   o->bufused += slength;\n+  free (s);\n }\n \n /* Open the global header file and the language-specific header files.  */"}]}