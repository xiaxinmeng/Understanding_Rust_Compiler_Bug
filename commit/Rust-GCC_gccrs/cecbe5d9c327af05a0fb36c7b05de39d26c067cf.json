{"sha": "cecbe5d9c327af05a0fb36c7b05de39d26c067cf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2VjYmU1ZDljMzI3YWYwNWEwZmIzNmM3YjA1ZGUzOWQyNmMwNjdjZg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2013-02-26T10:00:31Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2013-02-26T10:00:31Z"}, "message": "re PR tree-optimization/56448 (cc1 hangs on volatile array with -O or above)\n\n\tPR tree-optimization/56448\n\t* fold-const.c (operand_equal_p) <case tcc_reference>: Don't look at\n\tTREE_SIDE_EFFECTS if flags contain OEP_CONSTANT_ADDRESS_OF.\n\tClear OEP_CONSTANT_ADDRESS_OF from flags before recursing on second or\n\tlater operands of the references, or even first operand for\n\tINDIRECT_REF, TARGET_MEM_REF or MEM_REF.\n\n\t* gcc.c-torture/compile/pr56448.c: New test.\n\nFrom-SVN: r196278", "tree": {"sha": "d10f9910073aa87e937eb94236f509de3aef3337", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d10f9910073aa87e937eb94236f509de3aef3337"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cecbe5d9c327af05a0fb36c7b05de39d26c067cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cecbe5d9c327af05a0fb36c7b05de39d26c067cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cecbe5d9c327af05a0fb36c7b05de39d26c067cf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cecbe5d9c327af05a0fb36c7b05de39d26c067cf/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "aca43c6c06d60c7a9b7f53185ead6ce34df0308e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aca43c6c06d60c7a9b7f53185ead6ce34df0308e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aca43c6c06d60c7a9b7f53185ead6ce34df0308e"}], "stats": {"total": 59, "additions": 48, "deletions": 11}, "files": [{"sha": "7b9b547b57a61c64506f4af0d70da0c5c8d56621", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecbe5d9c327af05a0fb36c7b05de39d26c067cf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecbe5d9c327af05a0fb36c7b05de39d26c067cf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cecbe5d9c327af05a0fb36c7b05de39d26c067cf", "patch": "@@ -1,5 +1,12 @@\n 2013-02-26  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR tree-optimization/56448\n+\t* fold-const.c (operand_equal_p) <case tcc_reference>: Don't look at\n+\tTREE_SIDE_EFFECTS if flags contain OEP_CONSTANT_ADDRESS_OF.\n+\tClear OEP_CONSTANT_ADDRESS_OF from flags before recursing on second or\n+\tlater operands of the references, or even first operand for\n+\tINDIRECT_REF, TARGET_MEM_REF or MEM_REF.\n+\n \tPR tree-optimization/56443\n \t* tree-vect-stmts.c (get_vectype_for_scalar_type_and_size): For\n \toveraligned types, pass TYPE_UNSIGNED (scalar_type) as second argument"}, {"sha": "26cfc0e83e430c2a71c6c242a00602cab5b40e36", "filename": "gcc/fold-const.c", "status": "modified", "additions": 24, "deletions": 11, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecbe5d9c327af05a0fb36c7b05de39d26c067cf/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecbe5d9c327af05a0fb36c7b05de39d26c067cf/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=cecbe5d9c327af05a0fb36c7b05de39d26c067cf", "patch": "@@ -2542,19 +2542,25 @@ operand_equal_p (const_tree arg0, const_tree arg1, unsigned int flags)\n \n     case tcc_reference:\n       /* If either of the pointer (or reference) expressions we are\n-\t dereferencing contain a side effect, these cannot be equal.  */\n-      if (TREE_SIDE_EFFECTS (arg0)\n-\t  || TREE_SIDE_EFFECTS (arg1))\n+\t dereferencing contain a side effect, these cannot be equal,\n+\t but their addresses can be.  */\n+      if ((flags & OEP_CONSTANT_ADDRESS_OF) == 0\n+\t  && (TREE_SIDE_EFFECTS (arg0)\n+\t      || TREE_SIDE_EFFECTS (arg1)))\n \treturn 0;\n \n       switch (TREE_CODE (arg0))\n \t{\n \tcase INDIRECT_REF:\n+\t  flags &= ~OEP_CONSTANT_ADDRESS_OF;\n+\t  return OP_SAME (0);\n+\n \tcase REALPART_EXPR:\n \tcase IMAGPART_EXPR:\n \t  return OP_SAME (0);\n \n \tcase TARGET_MEM_REF:\n+\t  flags &= ~OEP_CONSTANT_ADDRESS_OF;\n \t  /* Require equal extra operands and then fall through to MEM_REF\n \t     handling of the two common operands.  */\n \t  if (!OP_SAME_WITH_NULL (2)\n@@ -2563,6 +2569,7 @@ operand_equal_p (const_tree arg0, const_tree arg1, unsigned int flags)\n \t    return 0;\n \t  /* Fallthru.  */\n \tcase MEM_REF:\n+\t  flags &= ~OEP_CONSTANT_ADDRESS_OF;\n \t  /* Require equal access sizes, and similar pointer types.\n \t     We can have incomplete types for array references of\n \t     variable-sized arrays from the Fortran frontent\n@@ -2581,22 +2588,28 @@ operand_equal_p (const_tree arg0, const_tree arg1, unsigned int flags)\n \t  /* Operands 2 and 3 may be null.\n \t     Compare the array index by value if it is constant first as we\n \t     may have different types but same value here.  */\n-\t  return (OP_SAME (0)\n-\t\t  && (tree_int_cst_equal (TREE_OPERAND (arg0, 1),\n-\t\t\t\t\t  TREE_OPERAND (arg1, 1))\n-\t\t      || OP_SAME (1))\n+\t  if (!OP_SAME (0))\n+\t    return 0;\n+\t  flags &= ~OEP_CONSTANT_ADDRESS_OF;\n+\t  return ((tree_int_cst_equal (TREE_OPERAND (arg0, 1),\n+\t\t\t\t       TREE_OPERAND (arg1, 1))\n+\t\t   || OP_SAME (1))\n \t\t  && OP_SAME_WITH_NULL (2)\n \t\t  && OP_SAME_WITH_NULL (3));\n \n \tcase COMPONENT_REF:\n \t  /* Handle operand 2 the same as for ARRAY_REF.  Operand 0\n \t     may be NULL when we're called to compare MEM_EXPRs.  */\n-\t  return OP_SAME_WITH_NULL (0)\n-\t\t && OP_SAME (1)\n-\t\t && OP_SAME_WITH_NULL (2);\n+\t  if (!OP_SAME_WITH_NULL (0))\n+\t    return 0;\n+\t  flags &= ~OEP_CONSTANT_ADDRESS_OF;\n+\t  return OP_SAME (1) && OP_SAME_WITH_NULL (2);\n \n \tcase BIT_FIELD_REF:\n-\t  return OP_SAME (0) && OP_SAME (1) && OP_SAME (2);\n+\t  if (!OP_SAME (0))\n+\t    return 0;\n+\t  flags &= ~OEP_CONSTANT_ADDRESS_OF;\n+\t  return OP_SAME (1) && OP_SAME (2);\n \n \tdefault:\n \t  return 0;"}, {"sha": "1da7b6fe03a30df173d82d84f1a67e2b9f1296e8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecbe5d9c327af05a0fb36c7b05de39d26c067cf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecbe5d9c327af05a0fb36c7b05de39d26c067cf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cecbe5d9c327af05a0fb36c7b05de39d26c067cf", "patch": "@@ -1,5 +1,8 @@\n 2013-02-26  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR tree-optimization/56448\n+\t* gcc.c-torture/compile/pr56448.c: New test.\n+\n \tPR tree-optimization/56443\n \t* gcc.dg/torture/pr56443.c: New test.\n "}, {"sha": "f10da6ce7526d4aca84541af49f642260aa38fa3", "filename": "gcc/testsuite/gcc.c-torture/compile/pr56448.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cecbe5d9c327af05a0fb36c7b05de39d26c067cf/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr56448.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cecbe5d9c327af05a0fb36c7b05de39d26c067cf/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr56448.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr56448.c?ref=cecbe5d9c327af05a0fb36c7b05de39d26c067cf", "patch": "@@ -0,0 +1,14 @@\n+/* PR tree-optimization/56448 */\n+\n+volatile int a[1];\n+int b;\n+\n+void\n+foo ()\n+{\n+  for (;;)\n+    {\n+      int *c[3][6] = { 0, 0, 0, &b, 0, 0, 0, 0, &b, 0, 0, 0, 0, 0, 0, 0, &b, (int *) &a[0] };\n+      b = *c[2][5];\n+    }\n+}"}]}