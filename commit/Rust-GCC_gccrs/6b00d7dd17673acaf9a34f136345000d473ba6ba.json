{"sha": "6b00d7dd17673acaf9a34f136345000d473ba6ba", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmIwMGQ3ZGQxNzY3M2FjYWY5YTM0ZjEzNjM0NTAwMGQ0NzNiYTZiYQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2013-08-23T07:30:40Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2013-08-23T07:30:40Z"}, "message": "re PR tree-optimization/58209 (ICE in extract_range_from_binary_expr, at tree-vrp.c:2294)\n\n\tPR tree-optimization/58209\n\t* tree-tailcall.c (process_assignment): Handle POINTER_PLUS_EXPR.\n\t(find_tail_calls): Give up for pointer result types if m is non-NULL.\n\t(adjust_return_value_with_ops): For PLUS_EXPR and pointer result type\n\temit POINTER_PLUS_EXPR.\n\t(create_tailcall_accumulator): For pointer result type accumulate in\n\tsizetype type.\n\n\t* gcc.c-torture/execute/pr58209.c: New test.\n\nFrom-SVN: r201935", "tree": {"sha": "e2bf13f7e786fbd6ce69ddedeabcef9c0e3d0876", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e2bf13f7e786fbd6ce69ddedeabcef9c0e3d0876"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6b00d7dd17673acaf9a34f136345000d473ba6ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b00d7dd17673acaf9a34f136345000d473ba6ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b00d7dd17673acaf9a34f136345000d473ba6ba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b00d7dd17673acaf9a34f136345000d473ba6ba/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6e6bbb604ef6970174f50b710caf03c1d9fcee58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e6bbb604ef6970174f50b710caf03c1d9fcee58", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e6bbb604ef6970174f50b710caf03c1d9fcee58"}], "stats": {"total": 83, "additions": 76, "deletions": 7}, "files": [{"sha": "9647b90831fa6cefb176136f637fd833849891bd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b00d7dd17673acaf9a34f136345000d473ba6ba/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b00d7dd17673acaf9a34f136345000d473ba6ba/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6b00d7dd17673acaf9a34f136345000d473ba6ba", "patch": "@@ -1,3 +1,13 @@\n+2013-08-23  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/58209\n+\t* tree-tailcall.c (process_assignment): Handle POINTER_PLUS_EXPR.\n+\t(find_tail_calls): Give up for pointer result types if m is non-NULL.\n+\t(adjust_return_value_with_ops): For PLUS_EXPR and pointer result type\n+\temit POINTER_PLUS_EXPR.\n+\t(create_tailcall_accumulator): For pointer result type accumulate in\n+\tsizetype type.\n+\n 2013-08-22  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* configure.ac: Add backslashes missing from the last change."}, {"sha": "c6e0653ca9efbb9ac1a65abb59bb3b4f4ecde810", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b00d7dd17673acaf9a34f136345000d473ba6ba/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b00d7dd17673acaf9a34f136345000d473ba6ba/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6b00d7dd17673acaf9a34f136345000d473ba6ba", "patch": "@@ -1,3 +1,8 @@\n+2013-08-23  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/58209\n+\t* gcc.c-torture/execute/pr58209.c: New test.\n+\n 2013-08-22  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \t* gcc.target/powerpc/pr57744.c: Declare abort."}, {"sha": "78743bfb959c5db0069d27945115d52d962b7e31", "filename": "gcc/testsuite/gcc.c-torture/execute/pr58209.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b00d7dd17673acaf9a34f136345000d473ba6ba/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr58209.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b00d7dd17673acaf9a34f136345000d473ba6ba/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr58209.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr58209.c?ref=6b00d7dd17673acaf9a34f136345000d473ba6ba", "patch": "@@ -0,0 +1,32 @@\n+/* PR tree-optimization/58209 */\n+\n+extern void abort (void);\n+typedef __INTPTR_TYPE__ T;\n+T buf[1024];\n+\n+T *\n+foo (T n)\n+{\n+  if (n == 0)\n+    return (T *) buf;\n+  T s = (T) foo (n - 1);\n+  return (T *) (s + sizeof (T));\n+}\n+\n+T *\n+bar (T n)\n+{\n+  if (n == 0)\n+    return buf;\n+  return foo (n - 1) + 1;\n+}\n+\n+int\n+main ()\n+{\n+  int i;\n+  for (i = 0; i < 27; i++)\n+    if (foo (i) != buf + i || bar (i) != buf + i)\n+      abort ();\n+  return 0;\n+}"}, {"sha": "96940467181992a8228366f79810755c78def0f3", "filename": "gcc/tree-tailcall.c", "status": "modified", "additions": 29, "deletions": 7, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b00d7dd17673acaf9a34f136345000d473ba6ba/gcc%2Ftree-tailcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b00d7dd17673acaf9a34f136345000d473ba6ba/gcc%2Ftree-tailcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-tailcall.c?ref=6b00d7dd17673acaf9a34f136345000d473ba6ba", "patch": "@@ -305,7 +305,7 @@ process_assignment (gimple stmt, gimple_stmt_iterator call, tree *m,\n   if (rhs_class == GIMPLE_UNARY_RHS)\n     ;\n   else if (op0 == *ass_var\n-      && (non_ass_var = independent_of_stmt_p (op1, stmt, call)))\n+\t   && (non_ass_var = independent_of_stmt_p (op1, stmt, call)))\n     ;\n   else if (op1 == *ass_var\n \t   && (non_ass_var = independent_of_stmt_p (op0, stmt, call)))\n@@ -320,6 +320,13 @@ process_assignment (gimple stmt, gimple_stmt_iterator call, tree *m,\n       *ass_var = dest;\n       return true;\n \n+    case POINTER_PLUS_EXPR:\n+      if (op0 != *ass_var)\n+\treturn false;\n+      *a = non_ass_var;\n+      *ass_var = dest;\n+      return true;\n+\n     case MULT_EXPR:\n       *m = non_ass_var;\n       *ass_var = dest;\n@@ -562,6 +569,10 @@ find_tail_calls (basic_block bb, struct tailcall **ret)\n   if (!tail_recursion && (m || a))\n     return;\n \n+  /* For pointers only allow additions.  */\n+  if (m && POINTER_TYPE_P (TREE_TYPE (DECL_RESULT (current_function_decl))))\n+    return;\n+\n   nw = XNEW (struct tailcall);\n \n   nw->call_gsi = gsi;\n@@ -604,15 +615,23 @@ adjust_return_value_with_ops (enum tree_code code, const char *label,\n   tree result = make_temp_ssa_name (ret_type, NULL, label);\n   gimple stmt;\n \n-  if (types_compatible_p (TREE_TYPE (acc), TREE_TYPE (op1)))\n+  if (POINTER_TYPE_P (ret_type))\n+    {\n+      gcc_assert (code == PLUS_EXPR && TREE_TYPE (acc) == sizetype);\n+      code = POINTER_PLUS_EXPR;\n+    }\n+  if (types_compatible_p (TREE_TYPE (acc), TREE_TYPE (op1))\n+      && code != POINTER_PLUS_EXPR)\n     stmt = gimple_build_assign_with_ops (code, result, acc, op1);\n   else\n     {\n-      tree rhs = fold_convert (TREE_TYPE (acc),\n-\t\t\t       fold_build2 (code,\n-\t\t\t\t\t    TREE_TYPE (op1),\n-\t\t\t\t\t    fold_convert (TREE_TYPE (op1), acc),\n-\t\t\t\t\t    op1));\n+      tree tem;\n+      if (code == POINTER_PLUS_EXPR)\n+\ttem = fold_build2 (code, TREE_TYPE (op1), op1, acc);\n+      else\n+\ttem = fold_build2 (code, TREE_TYPE (op1),\n+\t\t\t   fold_convert (TREE_TYPE (op1), acc), op1);\n+      tree rhs = fold_convert (ret_type, tem);\n       rhs = force_gimple_operand_gsi (&gsi, rhs,\n \t\t\t\t      false, NULL, true, GSI_SAME_STMT);\n       stmt = gimple_build_assign (result, rhs);\n@@ -892,6 +911,9 @@ static tree\n create_tailcall_accumulator (const char *label, basic_block bb, tree init)\n {\n   tree ret_type = TREE_TYPE (DECL_RESULT (current_function_decl));\n+  if (POINTER_TYPE_P (ret_type))\n+    ret_type = sizetype;\n+\n   tree tmp = make_temp_ssa_name (ret_type, NULL, label);\n   gimple phi;\n "}]}