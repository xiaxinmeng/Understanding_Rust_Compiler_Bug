{"sha": "4543943ad4323c336993836933f7011c295fd50f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDU0Mzk0M2FkNDMyM2MzMzY5OTM4MzY5MzNmNzAxMWMyOTVmZDUwZg==", "commit": {"author": {"name": "Andrew Pinski", "email": "andrew_pinski@playstation.sony.com", "date": "2007-06-12T19:15:50Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2007-06-12T19:15:50Z"}, "message": "re PR middle-end/31579 (ICE when compiling attached code)\n\n2007-06-12  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n\n        PR middle-end/31579\n        * expr.c (expand_expr_addr_expr_1): Call expand_expr\n        for the offset with the modifier as EXPAND_INITIALIZER\n        if the modifier is EXPAND_INITIALIZER.\n        (expand_expr_real_1 <case INTEGER_CST>): Don't force to\n        a register if we had an overflow.\n\n2007-06-12  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n\n        PR middle-end/31579\n         * g++.dg/torture/pr31579.C: New testcase.\n\nFrom-SVN: r125655", "tree": {"sha": "c9750b4c2fab79d638858ba8919c1d37430242a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c9750b4c2fab79d638858ba8919c1d37430242a4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4543943ad4323c336993836933f7011c295fd50f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4543943ad4323c336993836933f7011c295fd50f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4543943ad4323c336993836933f7011c295fd50f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4543943ad4323c336993836933f7011c295fd50f/comments", "author": null, "committer": null, "parents": [{"sha": "4c8c70e06a66649496afd6fed8ffa3c131c8de82", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c8c70e06a66649496afd6fed8ffa3c131c8de82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c8c70e06a66649496afd6fed8ffa3c131c8de82"}], "stats": {"total": 37, "additions": 27, "deletions": 10}, "files": [{"sha": "e5a53a2ebe4ada14fb1e48585a68cfb3295dbc56", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4543943ad4323c336993836933f7011c295fd50f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4543943ad4323c336993836933f7011c295fd50f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4543943ad4323c336993836933f7011c295fd50f", "patch": "@@ -1,3 +1,12 @@\n+2007-06-12  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n+\n+\tPR middle-end/31579\n+\t* expr.c (expand_expr_addr_expr_1): Call expand_expr\n+\tfor the offset with the modifier as EXPAND_INITIALIZER\n+\tif the modifier is EXPAND_INITIALIZER.\n+\t(expand_expr_real_1 <case INTEGER_CST>): Don't force to\n+\ta register if we had an overflow.\n+\n 2007-06-12  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* real.c (real_isfinite): New."}, {"sha": "9c91c4e0f2466c3b30729fe8b91f25462ef10d09", "filename": "gcc/expr.c", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4543943ad4323c336993836933f7011c295fd50f/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4543943ad4323c336993836933f7011c295fd50f/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=4543943ad4323c336993836933f7011c295fd50f", "patch": "@@ -6695,7 +6695,9 @@ expand_expr_addr_expr_1 (tree exp, rtx target, enum machine_mode tmode,\n \n       if (modifier != EXPAND_NORMAL)\n \tresult = force_operand (result, NULL);\n-      tmp = expand_expr (offset, NULL_RTX, tmode, EXPAND_NORMAL);\n+      tmp = expand_expr (offset, NULL_RTX, tmode, \n+\t\t\t modifier == EXPAND_INITIALIZER\n+\t\t\t  ? EXPAND_INITIALIZER : EXPAND_NORMAL);\n \n       result = convert_memory_address (tmode, result);\n       tmp = convert_memory_address (tmode, tmp);\n@@ -7118,15 +7120,6 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n       temp = immed_double_const (TREE_INT_CST_LOW (exp),\n \t\t\t\t TREE_INT_CST_HIGH (exp), mode);\n \n-      /* ??? If overflow is set, fold will have done an incomplete job,\n-\t which can result in (plus xx (const_int 0)), which can get\n-\t simplified by validate_replace_rtx during virtual register\n-\t instantiation, which can result in unrecognizable insns.\n-\t Avoid this by forcing all overflows into registers.  */\n-      if (TREE_OVERFLOW (exp)\n-\t  && modifier != EXPAND_INITIALIZER)\n-\ttemp = force_reg (mode, temp);\n-\n       return temp;\n \n     case VECTOR_CST:"}, {"sha": "ee237deb0df8413f538186ba496a16a1be896650", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4543943ad4323c336993836933f7011c295fd50f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4543943ad4323c336993836933f7011c295fd50f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4543943ad4323c336993836933f7011c295fd50f", "patch": "@@ -1,3 +1,8 @@\n+2007-06-12  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n+\n+\tPR middle-end/31579\n+\t * g++.dg/torture/pr31579.C: New testcase.\n+\n 2007-06-12  Ian Lance Taylor  <iant@google.com>\n \n \tPR libstdc++/29286"}, {"sha": "1effa66d25ca519b4d5fe61c1439c22fbdf1dd23", "filename": "gcc/testsuite/g++.dg/torture/pr31579.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4543943ad4323c336993836933f7011c295fd50f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr31579.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4543943ad4323c336993836933f7011c295fd50f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr31579.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr31579.C?ref=4543943ad4323c336993836933f7011c295fd50f", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+// middle-end/31579\n+// Expand was crashing while expanding the tree for the initializer\n+\n+struct Industry {\n+ unsigned char produced_cargo[2];\n+};\n+unsigned int a = (((unsigned long)&reinterpret_cast<const volatile\n+char&>((((Industry*)(char*)8)->produced_cargo[0]))) - 8);\n+"}]}