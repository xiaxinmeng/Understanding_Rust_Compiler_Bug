{"sha": "99e0e30fd1dd37d16a05dfe7fd60788395e1458d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTllMGUzMGZkMWRkMzdkMTZhMDVkZmU3ZmQ2MDc4ODM5NWUxNDU4ZA==", "commit": {"author": {"name": "Sebastian Pop", "email": "sebastian.pop@amd.com", "date": "2009-07-31T02:49:01Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2009-07-31T02:49:01Z"}, "message": "Add new testcases.\n\n2009-07-30  Sebastian Pop  <sebastian.pop@amd.com>\n\n\t* gcc.dg/graphite/graphite_autopar/force-parallel-1.c: New.\n\t* gcc.dg/graphite/graphite_autopar/force-parallel-2.c: New.\n\t* gcc.dg/graphite/graphite_autopar/force-parallel-3.c: New.\n\t* gcc.dg/graphite/graphite_autopar/force-parallel-4.c: New.\n\t* gcc.dg/graphite/graphite_autopar/force-parallel-5.c: New.\n\t* gcc.dg/graphite/graphite_autopar/force-parallel-6.c: New.\n\t* gcc.dg/graphite/graphite_autopar/force-parallel-7.c: New.\n\t* gcc.dg/graphite/graphite_autopar/force-parallel-8.c: New.\n\t* gcc.dg/graphite/graphite_autopar/force-parallel-9.c: New.\n\t* gcc.dg/graphite/graphite_autopar/graphite_autopar.exp: New.\n\t* gcc.dg/graphite/id-1.c: New.\n\t* gcc.dg/graphite/id-10.c: New.\n\t* gcc.dg/graphite/id-11.c: New.\n\t* gcc.dg/graphite/id-12.c: New.\n\t* gcc.dg/graphite/id-13.c: New.\n\t* gcc.dg/graphite/id-14.c: New.\n\t* gcc.dg/graphite/id-15.c: New.\n\t* gcc.dg/graphite/id-2.c: New.\n\t* gcc.dg/graphite/id-3.c: New.\n\t* gcc.dg/graphite/id-4.c: New.\n\t* gcc.dg/graphite/id-5.c: New.\n\t* gcc.dg/graphite/id-6.c: New.\n\t* gcc.dg/graphite/id-7.c: New.\n\t* gcc.dg/graphite/id-8.c: New.\n\t* gcc.dg/graphite/id-9.c: New.\n\t* gcc.dg/graphite/interchange-0.c: New.\n\t* gcc.dg/graphite/interchange-1.c: New.\n\t* gcc.dg/graphite/interchange-2.c: New.\n\t* gcc.dg/graphite/interchange-3.c: New.\n\t* gcc.dg/graphite/interchange-4.c: New.\n\t* gcc.dg/graphite/interchange-5.c: New.\n\t* gcc.dg/graphite/interchange-6.c: New.\n\t* gcc.dg/graphite/interchange-7.c: New.\n\t* gcc.dg/graphite/interchange-8.c: New.\n\t* gcc.dg/graphite/pr35356-1.c: New.\n\t* gcc.dg/graphite/pr35356-2.c: New.\n\t* gcc.dg/graphite/pr35356-3.c: New.\n\t* gcc.dg/graphite/pr40157.c: New.\n\t* gcc.dg/graphite/run-id-1.c: New.\n\t* gcc.dg/graphite/scop-20.c: New.\n\t* gcc.dg/graphite/scop-21.c: New.\n\t* gfortran.dg/graphite/id-1.f90: New.\n\t* gfortran.dg/graphite/id-10.f90: New.\n\t* gfortran.dg/graphite/id-11.f: New.\n\t* gfortran.dg/graphite/id-12.f: New.\n\t* gfortran.dg/graphite/id-13.f: New.\n\t* gfortran.dg/graphite/id-14.f: New.\n\t* gfortran.dg/graphite/id-15.f: New.\n\t* gfortran.dg/graphite/id-16.f: New.\n\t* gfortran.dg/graphite/id-5.f: New.\n\t* gfortran.dg/graphite/id-6.f: New.\n\t* gfortran.dg/graphite/id-7.f: New.\n\t* gfortran.dg/graphite/id-8.f: New.\n\t* gfortran.dg/graphite/id-9.f: New.\n\t* gfortran.dg/graphite/interchange-1.f: New.\n\t* gfortran.dg/graphite/interchange-2.f: New.\n\nFrom-SVN: r150303", "tree": {"sha": "66c46d5be4287669a9e46c19e678b3f4a0528eeb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/66c46d5be4287669a9e46c19e678b3f4a0528eeb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/99e0e30fd1dd37d16a05dfe7fd60788395e1458d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99e0e30fd1dd37d16a05dfe7fd60788395e1458d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99e0e30fd1dd37d16a05dfe7fd60788395e1458d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99e0e30fd1dd37d16a05dfe7fd60788395e1458d/comments", "author": null, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ac57409698af10184a5a6f18ee21826a6d1f538", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ac57409698af10184a5a6f18ee21826a6d1f538", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ac57409698af10184a5a6f18ee21826a6d1f538"}], "stats": {"total": 1474, "additions": 1473, "deletions": 1}, "files": [{"sha": "22f81a5fc26cb387a5daf9b919d01fb3c5c7040b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99e0e30fd1dd37d16a05dfe7fd60788395e1458d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99e0e30fd1dd37d16a05dfe7fd60788395e1458d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=99e0e30fd1dd37d16a05dfe7fd60788395e1458d", "patch": "@@ -1,3 +1,62 @@\n+2009-07-30  Sebastian Pop  <sebastian.pop@amd.com>\n+\n+\t* gcc.dg/graphite/graphite_autopar/force-parallel-1.c: New.\n+\t* gcc.dg/graphite/graphite_autopar/force-parallel-2.c: New.\n+\t* gcc.dg/graphite/graphite_autopar/force-parallel-3.c: New.\n+\t* gcc.dg/graphite/graphite_autopar/force-parallel-4.c: New.\n+\t* gcc.dg/graphite/graphite_autopar/force-parallel-5.c: New.\n+\t* gcc.dg/graphite/graphite_autopar/force-parallel-6.c: New.\n+\t* gcc.dg/graphite/graphite_autopar/force-parallel-7.c: New.\n+\t* gcc.dg/graphite/graphite_autopar/force-parallel-8.c: New.\n+\t* gcc.dg/graphite/graphite_autopar/force-parallel-9.c: New.\n+\t* gcc.dg/graphite/graphite_autopar/graphite_autopar.exp: New.\n+\t* gcc.dg/graphite/id-1.c: New.\n+\t* gcc.dg/graphite/id-10.c: New.\n+\t* gcc.dg/graphite/id-11.c: New.\n+\t* gcc.dg/graphite/id-12.c: New.\n+\t* gcc.dg/graphite/id-13.c: New.\n+\t* gcc.dg/graphite/id-14.c: New.\n+\t* gcc.dg/graphite/id-15.c: New.\n+\t* gcc.dg/graphite/id-2.c: New.\n+\t* gcc.dg/graphite/id-3.c: New.\n+\t* gcc.dg/graphite/id-4.c: New.\n+\t* gcc.dg/graphite/id-5.c: New.\n+\t* gcc.dg/graphite/id-6.c: New.\n+\t* gcc.dg/graphite/id-7.c: New.\n+\t* gcc.dg/graphite/id-8.c: New.\n+\t* gcc.dg/graphite/id-9.c: New.\n+\t* gcc.dg/graphite/interchange-0.c: New.\n+\t* gcc.dg/graphite/interchange-1.c: New.\n+\t* gcc.dg/graphite/interchange-2.c: New.\n+\t* gcc.dg/graphite/interchange-3.c: New.\n+\t* gcc.dg/graphite/interchange-4.c: New.\n+\t* gcc.dg/graphite/interchange-5.c: New.\n+\t* gcc.dg/graphite/interchange-6.c: New.\n+\t* gcc.dg/graphite/interchange-7.c: New.\n+\t* gcc.dg/graphite/interchange-8.c: New.\n+\t* gcc.dg/graphite/pr35356-1.c: New.\n+\t* gcc.dg/graphite/pr35356-2.c: New.\n+\t* gcc.dg/graphite/pr35356-3.c: New.\n+\t* gcc.dg/graphite/pr40157.c: New.\n+\t* gcc.dg/graphite/run-id-1.c: New.\n+\t* gcc.dg/graphite/scop-20.c: New.\n+\t* gcc.dg/graphite/scop-21.c: New.\n+\t* gfortran.dg/graphite/id-1.f90: New.\n+\t* gfortran.dg/graphite/id-10.f90: New.\n+\t* gfortran.dg/graphite/id-11.f: New.\n+\t* gfortran.dg/graphite/id-12.f: New.\n+\t* gfortran.dg/graphite/id-13.f: New.\n+\t* gfortran.dg/graphite/id-14.f: New.\n+\t* gfortran.dg/graphite/id-15.f: New.\n+\t* gfortran.dg/graphite/id-16.f: New.\n+\t* gfortran.dg/graphite/id-5.f: New.\n+\t* gfortran.dg/graphite/id-6.f: New.\n+\t* gfortran.dg/graphite/id-7.f: New.\n+\t* gfortran.dg/graphite/id-8.f: New.\n+\t* gfortran.dg/graphite/id-9.f: New.\n+\t* gfortran.dg/graphite/interchange-1.f: New.\n+\t* gfortran.dg/graphite/interchange-2.f: New.\n+\n 2009-07-30  Sebastian Pop  <sebastian.pop@amd.com>\n \n \t* gcc.dg/graphite/graphite.exp: Implement an automatic selection of"}, {"sha": "57fb74c8d90c0d56a5dd3e39ad68d581b099ed76", "filename": "gcc/testsuite/gcc.dg/graphite/graphite.exp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99e0e30fd1dd37d16a05dfe7fd60788395e1458d/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fgraphite.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99e0e30fd1dd37d16a05dfe7fd60788395e1458d/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fgraphite.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fgraphite.exp?ref=99e0e30fd1dd37d16a05dfe7fd60788395e1458d", "patch": "@@ -49,7 +49,7 @@ dg-runtest $block_files \"\" $DEFAULT_CFLAGS_GRAPHITE_BLOCK\n foreach block_file $block_files {lremove wait_to_run_files $block_file}\n \n # Flags using for id-* files.\n-set DEFAULT_CFLAGS_GRAPHITE_IDENTITY \"-O2 -fgraphite-identity -fdump-tree-graphite-all\"\n+set DEFAULT_CFLAGS_GRAPHITE_IDENTITY \"-O2 -fgraphite-identity\"\n set id_files [lsort [glob -nocomplain $srcdir/$subdir/id-*.c ] ]\n dg-runtest $id_files \"\" $DEFAULT_CFLAGS_GRAPHITE_IDENTITY\n foreach id_file $id_files {lremove wait_to_run_files $id_file}"}, {"sha": "7f043d83d8b11fce586eb6f65b2f6cda0438eceb", "filename": "gcc/testsuite/gcc.dg/graphite/graphite_autopar/force-parallel-1.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99e0e30fd1dd37d16a05dfe7fd60788395e1458d/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fgraphite_autopar%2Fforce-parallel-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99e0e30fd1dd37d16a05dfe7fd60788395e1458d/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fgraphite_autopar%2Fforce-parallel-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fgraphite_autopar%2Fforce-parallel-1.c?ref=99e0e30fd1dd37d16a05dfe7fd60788395e1458d", "patch": "@@ -0,0 +1,30 @@\n+void abort (void);\n+\n+void parloop (int N)\n+{\n+  int i;\n+  int x[10000000];\n+\n+  for (i = 0; i < N; i++)\n+    x[i] = i + 3;\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      if (x[i] != i + 3)\n+\tabort ();\n+    }\n+}\n+\n+int main(void)\n+{\n+  parloop(10000000);\n+\n+  return 0;\n+}\n+\n+/* Check that parallel code generation part make the right answer.  */\n+/* { dg-final { scan-tree-dump-times \"1 loops carried no dependency\" 2 \"graphite\" } } */\n+/* { dg-final { cleanup-tree-dump \"graphite\" } } */\n+/* { dg-final { scan-tree-dump-times \"loopfn\" 5 \"optimized\" } } */\n+/* { dg-final { cleanup-tree-dump \"parloops\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "a198fed658a4524aa7499a313fa8546fc6b0dc4d", "filename": "gcc/testsuite/gcc.dg/graphite/graphite_autopar/force-parallel-2.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99e0e30fd1dd37d16a05dfe7fd60788395e1458d/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fgraphite_autopar%2Fforce-parallel-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99e0e30fd1dd37d16a05dfe7fd60788395e1458d/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fgraphite_autopar%2Fforce-parallel-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fgraphite_autopar%2Fforce-parallel-2.c?ref=99e0e30fd1dd37d16a05dfe7fd60788395e1458d", "patch": "@@ -0,0 +1,30 @@\n+void abort (void);\n+\n+void parloop (int N)\n+{\n+  int i, j;\n+  int x[10000][10000];\n+\n+  for (i = 0; i < N; i++)\n+    for (j = 0; j < N; j++)\n+      x[i][j] = i + j + 3;\n+\n+  for (i = 0; i < N; i++)\n+    for (j = 0; j < N; j++)\n+      if (x[i][j] != i + j + 3)\n+\tabort ();\n+}\n+\n+int main(void)\n+{\n+  parloop(10000);\n+\n+  return 0;\n+}\n+\n+/* Check that parallel code generation part make the right answer.  */\n+/* { dg-final { scan-tree-dump-times \"2 loops carried no dependency\" 1 \"graphite\" } } */\n+/* { dg-final { cleanup-tree-dump \"graphite\" } } */\n+/* { dg-final { scan-tree-dump-times \"loopfn\" 5 \"optimized\" } } */\n+/* { dg-final { cleanup-tree-dump \"parloops\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "81b356d5c2441ed32a83f4b7f52170621de68bde", "filename": "gcc/testsuite/gcc.dg/graphite/graphite_autopar/force-parallel-3.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99e0e30fd1dd37d16a05dfe7fd60788395e1458d/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fgraphite_autopar%2Fforce-parallel-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99e0e30fd1dd37d16a05dfe7fd60788395e1458d/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fgraphite_autopar%2Fforce-parallel-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fgraphite_autopar%2Fforce-parallel-3.c?ref=99e0e30fd1dd37d16a05dfe7fd60788395e1458d", "patch": "@@ -0,0 +1,38 @@\n+void abort (void);\n+\n+#define N 500\n+\n+void foo(void)\n+{\n+  int i,j;\n+\n+  int Z[2*N+2][2*N+2], B[2*N+2][2*N+2];\n+\n+  for (i = 0; i < 2*N+2; i++)\n+    for (j = 0; j < 2*N+2; j++)\n+      B[i][j] = Z[i][j] = i + j;\n+\n+  for (i = 0; i <= N; i++)\n+    for (j = 0; j <= N; j++)\n+      Z[i][j] = Z[j+N][i+N+1];\n+\n+  for (i = 0; i <= N; i++)\n+    for (j = 0; j <=N; j++)\n+      if (Z[i][j] != B[j+N][i+N+1])\n+\tabort();\n+}\n+\n+int main(void)\n+{\n+  foo();\n+\n+  return 0;\n+}\n+\n+/* Check that parallel code generation part make the right answer.  */\n+/* { dg-final { scan-tree-dump-times \"4 loops carried no dependency\" 1 \"graphite\" } } */\n+/* { dg-final { cleanup-tree-dump \"graphite\" } } */\n+/* { dg-final { scan-tree-dump-times \"loopfn.0\" 5 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"loopfn.1\" 5 \"optimized\" } } */\n+/* { dg-final { cleanup-tree-dump \"parloops\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "c0c6b1c6e5568ffdd90e4e04550ff88c1b180212", "filename": "gcc/testsuite/gcc.dg/graphite/graphite_autopar/force-parallel-4.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99e0e30fd1dd37d16a05dfe7fd60788395e1458d/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fgraphite_autopar%2Fforce-parallel-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99e0e30fd1dd37d16a05dfe7fd60788395e1458d/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fgraphite_autopar%2Fforce-parallel-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fgraphite_autopar%2Fforce-parallel-4.c?ref=99e0e30fd1dd37d16a05dfe7fd60788395e1458d", "patch": "@@ -0,0 +1,55 @@\n+/* Autopar with IF conditions.  */\n+\n+void abort();\n+\n+#define N 10000\n+#define T 1000\n+\n+void foo(void)\n+{\n+  int i;\n+  int A[2*N], B[2*N];\n+\n+  /* Initialize array: carried no dependency.  */\n+  for (i = 0; i < 2*N; i++)\n+    B[i] = A[i] = i;\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      if (i < T)\n+\t/* loop i1: carried no dependency.  */\n+\tA[i] = A[i+T];\n+      else\n+\t/* loop i2: carried dependency.  */\n+\tA[i] = A[i+T+1];\n+    }\n+\n+  /* If it runs a wrong answer, abort.  */\n+  for (i = 0; i < N; i++)\n+    {\n+      if (i < T)\n+\t{\n+\t  if (A[i] != B[i+T])\n+\t    abort();\n+\t}\n+      else\n+\t{\n+\t  if (A[i] != B[i+T+1])\n+\t    abort();\n+\t}\n+    }\n+}\n+\n+int main(void)\n+{\n+  foo();\n+  return 0;\n+}\n+\n+/* Check that parallel code generation part make the right answer.  */\n+/* { dg-final { scan-tree-dump-times \"2 loops carried no dependency\" 1 \"graphite\" } } */\n+/* { dg-final { cleanup-tree-dump \"graphite\" } } */\n+/* { dg-final { scan-tree-dump-times \"loopfn.0\" 5 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"loopfn.1\" 5 \"optimized\" } } */\n+/* { dg-final { cleanup-tree-dump \"parloops\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "e5392b1b8ff9aa423810b15f24104aabc48170aa", "filename": "gcc/testsuite/gcc.dg/graphite/graphite_autopar/force-parallel-5.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99e0e30fd1dd37d16a05dfe7fd60788395e1458d/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fgraphite_autopar%2Fforce-parallel-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99e0e30fd1dd37d16a05dfe7fd60788395e1458d/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fgraphite_autopar%2Fforce-parallel-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fgraphite_autopar%2Fforce-parallel-5.c?ref=99e0e30fd1dd37d16a05dfe7fd60788395e1458d", "patch": "@@ -0,0 +1,39 @@\n+/* Triangle loops.  */\n+void abort (void);\n+\n+#define N 500\n+\n+void foo(void)\n+{\n+  int i,j;\n+  int A[3*N], B[3*N];\n+\n+  for (i = 0; i < 3*N; i++)\n+    B[i] = A[i] = i;\n+\n+  for (i = 1; i < N; i++)\n+    for (j = 1; j < i; j++)\n+      /* This loop carried no dependency, it fails\n+\t at code generation part.*/\n+      A[j+N] = A[j] + j;\n+\n+  for (i = 1; i < N; i++)\n+    for (j = 1; j < i; j++)\n+      if (A[j+N] != B[j] + j)\n+\tabort();\n+}\n+\n+int main(void)\n+{\n+  foo();\n+\n+  return 0;\n+}\n+\n+/* Check that parallel code generation part make the right answer.  */\n+/* { dg-final { scan-tree-dump-times \"2 loops carried no dependency\" 1 \"graphite\" } } */\n+/* { dg-final { cleanup-tree-dump \"graphite\" } } */\n+/* { dg-final { scan-tree-dump-times \"loopfn.0\" 5 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"loopfn.1\" 5 \"optimized\" { xfail *-*-* } } } */\n+/* { dg-final { cleanup-tree-dump \"parloops\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "e961fc0baa5fadeebe4b8be23d83ce796a71d172", "filename": "gcc/testsuite/gcc.dg/graphite/graphite_autopar/force-parallel-6.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99e0e30fd1dd37d16a05dfe7fd60788395e1458d/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fgraphite_autopar%2Fforce-parallel-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99e0e30fd1dd37d16a05dfe7fd60788395e1458d/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fgraphite_autopar%2Fforce-parallel-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fgraphite_autopar%2Fforce-parallel-6.c?ref=99e0e30fd1dd37d16a05dfe7fd60788395e1458d", "patch": "@@ -0,0 +1,38 @@\n+#define N 500\n+\n+int foo(void)\n+{\n+  int i, j, k;\n+  int X[2*N], Y[2*N], B[2*N];\n+  int A[2*N][2*N], C[2*N][2*N];\n+\n+  for (i = 1; i <= N; i++)\n+    {\n+      X[i] = Y[i] + 10;\n+      for (j = 1; j <= N; j++)\n+\t{\n+\t  B[j] = A[j][N];\n+\t  for (k = 1; k <= N; k++)\n+\t    {\n+\t      A[j+1][k] = B[j] + C[j][k];\n+\t    }\n+\t  Y[i+j] = A[j+1][N];\n+\t}\n+    }\n+\n+  return A[1][5]*B[6];\n+}\n+\n+int main(void)\n+{\n+  foo();\n+\n+  return 0;\n+}\n+\n+/* Check that parallel code generation part make the right answer.  */\n+/* { dg-final { scan-tree-dump-times \"1 loops carried no dependency\" 2 \"graphite\" } } */\n+/* { dg-final { cleanup-tree-dump \"graphite\" } } */\n+/* { dg-final { scan-tree-dump-times \"loopfn.0\" 5 \"optimized\" } } */\n+/* { dg-final { cleanup-tree-dump \"parloops\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "9ba9007fe31153692ab004b76c7bade028f47f58", "filename": "gcc/testsuite/gcc.dg/graphite/graphite_autopar/force-parallel-7.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99e0e30fd1dd37d16a05dfe7fd60788395e1458d/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fgraphite_autopar%2Fforce-parallel-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99e0e30fd1dd37d16a05dfe7fd60788395e1458d/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fgraphite_autopar%2Fforce-parallel-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fgraphite_autopar%2Fforce-parallel-7.c?ref=99e0e30fd1dd37d16a05dfe7fd60788395e1458d", "patch": "@@ -0,0 +1,36 @@\n+#define N 500\n+\n+int foo(void)\n+{\n+  int i, j, k;\n+  int A[N+5][N+5][N+5];\n+\n+  /* Loop i: carried no dependency.  */\n+  for (i = 0; i < N; i++)\n+    for (j = 0; j < N; j++)\n+      for (k = 0; k < N; k++)\n+\tA[k+1][j+2][i+1] = A[k][j][i+1];\n+\n+  for (i = 0; i < N; i++)\n+    /* Loop j: carried no dependency.  */\n+    for (j = 0; j < N; j++)\n+      /* Loop k: carreid no dependency.  */\n+      for (k = 0; k < N; k++)\n+\tA[i+1][j][k] = A[i][j][k+1];\n+\n+  return A[1][5][2];\n+}\n+\n+int main(void)\n+{\n+  foo();\n+\n+  return 0;\n+}\n+\n+/* Check that parallel code generation part make the right answer.  */\n+/* { dg-final { scan-tree-dump-times \"3 loops carried no dependency\" 1 \"graphite\" } } */\n+/* { dg-final { cleanup-tree-dump \"graphite\" } } */\n+/* { dg-final { scan-tree-dump-times \"loopfn.0\" 5 \"optimized\" } } */\n+/* { dg-final { cleanup-tree-dump \"parloops\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "28b9a2a06b9001b7033dee0fa3ce9dc3ae1f0f23", "filename": "gcc/testsuite/gcc.dg/graphite/graphite_autopar/force-parallel-8.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99e0e30fd1dd37d16a05dfe7fd60788395e1458d/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fgraphite_autopar%2Fforce-parallel-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99e0e30fd1dd37d16a05dfe7fd60788395e1458d/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fgraphite_autopar%2Fforce-parallel-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fgraphite_autopar%2Fforce-parallel-8.c?ref=99e0e30fd1dd37d16a05dfe7fd60788395e1458d", "patch": "@@ -0,0 +1,40 @@\n+#define N 1500\n+\n+int foo(void)\n+{\n+  int i, j;\n+  int x[N][N], y[N];\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      y[i] = i;\n+\n+      for (j = 0; j < N; j++)\n+\t{\n+\t  if (j > 500)\n+\t    {\n+\t      x[i][j] = i + j + 3;\n+\t      y[j] = i*j + 10;\n+\t    }\n+\t  else\n+\t    x[i][j] = x[i][j]*3;\n+\t}\n+    }\n+\n+  return x[2][5]*y[8];\n+}\n+\n+int main(void)\n+{\n+  foo();\n+\n+  return 0;\n+}\n+\n+/* Check that parallel code generation part make the right answer.  */\n+/* { dg-final { scan-tree-dump-times \"2 loops carried no dependency\" 1 \"graphite\" } } */\n+/* { dg-final { cleanup-tree-dump \"graphite\" } } */\n+/* { dg-final { scan-tree-dump-times \"loopfn.0\" 5 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"loopfn.1\" 5 \"optimized\" } } */\n+/* { dg-final { cleanup-tree-dump \"parloops\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "36551905f0c0fdb3010136500991ef89e09c5b10", "filename": "gcc/testsuite/gcc.dg/graphite/graphite_autopar/force-parallel-9.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99e0e30fd1dd37d16a05dfe7fd60788395e1458d/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fgraphite_autopar%2Fforce-parallel-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99e0e30fd1dd37d16a05dfe7fd60788395e1458d/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fgraphite_autopar%2Fforce-parallel-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fgraphite_autopar%2Fforce-parallel-9.c?ref=99e0e30fd1dd37d16a05dfe7fd60788395e1458d", "patch": "@@ -0,0 +1,37 @@\n+void abort (void);\n+\n+#define N 500\n+\n+void foo(void)\n+{\n+  int i,j;\n+\n+  int Z[2*N+2][2*N+2], B[2*N+2][2*N+2];\n+\n+  for (i = 0; i < 2*N+2; i++)\n+    for (j = 0; j < 2*N+2; j++)\n+      B[i][j] = Z[i][j] = i + j;\n+\n+  for (i = 0; i <= N; i++)\n+    for (j = 0; j <= N; j++)\n+      Z[i][j] = Z[j+N][i+N+1];\n+\n+  for (i = 0; i <= N; i++)\n+    for (j = 0; j <=N; j++)\n+      if (Z[i][j] != B[j+N][i+N+1])\n+\tabort();\n+}\n+\n+int main(void)\n+{\n+  foo();\n+  return 0;\n+}\n+\n+/* Check that parallel code generation part make the right answer.  */\n+/* { dg-final { scan-tree-dump-times \"4 loops carried no dependency\" 1 \"graphite\" } } */\n+/* { dg-final { cleanup-tree-dump \"graphite\" } } */\n+/* { dg-final { scan-tree-dump-times \"loopfn.0\" 5 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"loopfn.1\" 5 \"optimized\" } } */\n+/* { dg-final { cleanup-tree-dump \"parloops\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "5ec47fe8d070727d4763c1f51711bc4bee050305", "filename": "gcc/testsuite/gcc.dg/graphite/graphite_autopar/graphite_autopar.exp", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99e0e30fd1dd37d16a05dfe7fd60788395e1458d/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fgraphite_autopar%2Fgraphite_autopar.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99e0e30fd1dd37d16a05dfe7fd60788395e1458d/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fgraphite_autopar%2Fgraphite_autopar.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fgraphite_autopar%2Fgraphite_autopar.exp?ref=99e0e30fd1dd37d16a05dfe7fd60788395e1458d", "patch": "@@ -0,0 +1,68 @@\n+#   Copyright (C) 2008 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+# GCC testsuite that uses the `dg.exp' driver.\n+\n+# Load support procs.\n+load_lib gcc-dg.exp\n+\n+if ![check_effective_target_pthread] {\n+  return\n+}\n+\n+if ![check_effective_target_fgraphite] {\n+  return\n+}\n+\n+# Remove VALUE from LIST_VARIABLE.\n+proc lremove {list_variable value} {\n+    upvar 1 $list_variable var\n+    set idx [lsearch -exact $var $value]\n+    set var [lreplace $var $idx $idx]\n+}\n+\n+# Set default action for these tests is 'run'.  Save current default.\n+global dg-do-what-default\n+set save-dg-do-what-default ${dg-do-what-default}\n+set dg-do-what-default run\n+\n+# Initialize `dg'.\n+dg-init\n+\n+# Main loop.\n+\n+set wait_to_run_files [lsort [glob -nocomplain $srcdir/$subdir/*.c]]\n+\n+# Flags using for force-parallel-*.c files.\n+set DEFAULT_CFLAGS_FORCE_PARALLEL \" -ansi -pedantic-errors -O2 \\\n+-ftree-parallelize-loops=4 -fgraphite-force-parallel \\\n+-fdump-tree-parloops-details -fdump-tree-optimized \\\n+-fno-loop-strip-mine -fdump-tree-graphite-all\"\n+set force_parallel_files \\\n+    [lsort [glob -nocomplain $srcdir/$subdir/force-parallel-*.c]]\n+dg-runtest $force_parallel_files \"\" $DEFAULT_CFLAGS_FORCE_PARALLEL\n+foreach force_parallel_file $force_parallel_files \\\n+    {lremove wait_to_run_files $force_parallel_file}\n+\n+# Flags using for other files.\n+set DEFAULT_CFLAGS_GRAPHITE \"-ansi -pedantic-errors\"\n+dg-runtest $wait_to_run_files \"\" $DEFAULT_CFLAGS_GRAPHITE\n+\n+# Clean up.\n+set dg-do-what-default ${save-dg-do-what-default}\n+\n+# All done.\n+dg-finish"}, {"sha": "70b477a07b1d9adb0771f1a73282d0346d626dd6", "filename": "gcc/testsuite/gcc.dg/graphite/id-1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99e0e30fd1dd37d16a05dfe7fd60788395e1458d/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fid-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99e0e30fd1dd37d16a05dfe7fd60788395e1458d/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fid-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fid-1.c?ref=99e0e30fd1dd37d16a05dfe7fd60788395e1458d", "patch": "@@ -0,0 +1,18 @@\n+typedef int *lambda_vector;\n+typedef lambda_vector *lambda_matrix;\n+lambda_vector_add_mc (lambda_vector vec1, int const1,\n+\t\t      lambda_vector vec2, int const2,\n+\t\t      lambda_vector vec3, int size)\n+{\n+  int i;\n+  for (i = 0; i < size; i++)\n+    vec3[i] = const1 * vec1[i] + const2 * vec2[i];\n+}\n+lambda_matrix_add_mc (lambda_matrix mat1, int const1,\n+\t\t      lambda_matrix mat2, int const2,\n+\t\t      lambda_matrix mat3, int m, int n)\n+{\n+  int i;\n+  for (i = 0; i < m; i++)\n+    lambda_vector_add_mc (mat1[i], const1, mat2[i], const2, mat3[i], n);\n+}"}, {"sha": "8c2b88982b1fddd19140afa1035ea35f44788b2a", "filename": "gcc/testsuite/gcc.dg/graphite/id-10.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99e0e30fd1dd37d16a05dfe7fd60788395e1458d/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fid-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99e0e30fd1dd37d16a05dfe7fd60788395e1458d/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fid-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fid-10.c?ref=99e0e30fd1dd37d16a05dfe7fd60788395e1458d", "patch": "@@ -0,0 +1,15 @@\n+int bar[100][100];\n+\n+int\n+foo (int N, unsigned int J)\n+{\n+  int i, k;\n+\n+  for (k = 0; k < N; k++)\n+    if (k != J)\n+      for (i = 0; i < N; i++)\n+\tif (i != J)\n+\t  bar[k][i] = 20;\n+\n+  return bar[N][J];\n+}"}, {"sha": "387512c3c4c501d3a0faf5b27dffee7cf37cd694", "filename": "gcc/testsuite/gcc.dg/graphite/id-11.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99e0e30fd1dd37d16a05dfe7fd60788395e1458d/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fid-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99e0e30fd1dd37d16a05dfe7fd60788395e1458d/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fid-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fid-11.c?ref=99e0e30fd1dd37d16a05dfe7fd60788395e1458d", "patch": "@@ -0,0 +1,14 @@\n+double\n+foo (double x, double *cof)\n+{\n+  int i;\n+  double tmp, value;\n+\n+  for (i = 10; i >= 0; i--)\n+    {\n+      value += cof[i] / tmp;\n+      tmp -= 1.0;\n+    }\n+\n+  return value;\n+}"}, {"sha": "57857d1d20c7c83707e34fde7bbcf58b9ab87a31", "filename": "gcc/testsuite/gcc.dg/graphite/id-12.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99e0e30fd1dd37d16a05dfe7fd60788395e1458d/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fid-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99e0e30fd1dd37d16a05dfe7fd60788395e1458d/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fid-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fid-12.c?ref=99e0e30fd1dd37d16a05dfe7fd60788395e1458d", "patch": "@@ -0,0 +1,10 @@\n+void\n+foo (unsigned short x[])\n+{\n+  int i;\n+  unsigned short *p = &x[2];\n+  if (*p)\n+    x += 2;\n+  for (i = 2; i < 9; i++, ++x)\n+    *x >>= 8;\n+}"}, {"sha": "e921cd4e9d6532841d9544b8c7eb2c6b9aaf5d50", "filename": "gcc/testsuite/gcc.dg/graphite/id-13.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99e0e30fd1dd37d16a05dfe7fd60788395e1458d/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fid-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99e0e30fd1dd37d16a05dfe7fd60788395e1458d/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fid-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fid-13.c?ref=99e0e30fd1dd37d16a05dfe7fd60788395e1458d", "patch": "@@ -0,0 +1,11 @@\n+void\n+foo (int N, int k, int *fb)\n+{\n+  int i, j;\n+  for (i = 1; i <= N; i++)\n+    {\n+      for (j = 1; j < i; j++)\n+\tk %= N;\n+      bar (k);\n+    }\n+}"}, {"sha": "51ac4c1bbe573fc12903bb4c693fce1dc817c80e", "filename": "gcc/testsuite/gcc.dg/graphite/id-14.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99e0e30fd1dd37d16a05dfe7fd60788395e1458d/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fid-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99e0e30fd1dd37d16a05dfe7fd60788395e1458d/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fid-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fid-14.c?ref=99e0e30fd1dd37d16a05dfe7fd60788395e1458d", "patch": "@@ -0,0 +1,19 @@\n+typedef struct {\n+  int n;\n+  float *a;\n+} bar;\n+\n+float\n+foo (bar *b)\n+{\n+  float c, d;\n+  int j;\n+\n+  for (j = 0; (j < b->n); j++)\n+    d += b->a[j];\n+\n+  for (j = 0; (j < b->n); j++)\n+    c += b->a[j];\n+\n+  return d;\n+}"}, {"sha": "109d5bbdb015997f4521e8954959d93b0de06c7f", "filename": "gcc/testsuite/gcc.dg/graphite/id-15.c", "status": "added", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99e0e30fd1dd37d16a05dfe7fd60788395e1458d/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fid-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99e0e30fd1dd37d16a05dfe7fd60788395e1458d/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fid-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fid-15.c?ref=99e0e30fd1dd37d16a05dfe7fd60788395e1458d", "patch": "@@ -0,0 +1,118 @@\n+typedef long unsigned int size_t;\n+extern void *memset (void *__s, int __c, size_t __n) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));\n+\n+static void\n+encode (words, low, hi)\n+     long *words;\n+     unsigned long low;\n+     long hi;\n+{\n+  words[0] = ((low) & (((unsigned long) 1 << ((8 * 8) / 2)) - 1));\n+  words[1] = ((unsigned long) (low) >> (8 * 8) / 2);\n+  words[2] = ((hi) & (((unsigned long) 1 << ((8 * 8) / 2)) - 1));\n+  words[3] = ((unsigned long) (hi) >> (8 * 8) / 2);\n+}\n+\n+static void\n+decode (words, low, hi)\n+     long *words;\n+     unsigned long *low;\n+     long *hi;\n+{\n+  *low = words[0] + words[1] * ((unsigned long) 1 << (8 * 8) / 2);\n+  *hi = words[2] + words[3] * ((unsigned long) 1 << (8 * 8) / 2);\n+}\n+\n+int\n+neg_double (l1, h1, lv, hv)\n+     unsigned long l1;\n+     long h1;\n+     unsigned long *lv;\n+     long *hv;\n+{\n+  if (l1 == 0)\n+    {\n+      *lv = 0;\n+      *hv = - h1;\n+      return (*hv & h1) < 0;\n+    }\n+  else\n+    {\n+      *lv = -l1;\n+      *hv = ~h1;\n+      return 0;\n+    }\n+}\n+\n+int\n+add_double (l1, h1, l2, h2, lv, hv)\n+     unsigned long l1, l2;\n+     long h1, h2;\n+     unsigned long *lv;\n+     long *hv;\n+{\n+  unsigned long l;\n+  long h;\n+\n+  l = l1 + l2;\n+  h = h1 + h2 + (l < l1);\n+\n+  *lv = l;\n+  *hv = h;\n+  return ((~((h1) ^ (h2)) & ((h1) ^ (h))) < 0);\n+}\n+\n+int\n+mul_double (l1, h1, l2, h2, lv, hv)\n+     unsigned long l1, l2;\n+     long h1, h2;\n+     unsigned long *lv;\n+     long *hv;\n+{\n+  long arg1[4];\n+  long arg2[4];\n+  long prod[4 * 2];\n+  unsigned long carry;\n+  int i, j, k;\n+  unsigned long toplow, neglow;\n+  long tophigh, neghigh;\n+\n+  encode (arg1, l1, h1);\n+  encode (arg2, l2, h2);\n+\n+  memset ((char *) prod, 0, sizeof prod);\n+\n+  for (i = 0; i < 4; i++)\n+    {\n+      carry = 0;\n+      for (j = 0; j < 4; j++)\n+\t{\n+\t  k = i + j;\n+\n+\t  carry += arg1[i] * arg2[j];\n+\n+\t  carry += prod[k];\n+\t  prod[k] = ((carry) & (((unsigned long) 1 << ((8 * 8) / 2)) - 1));\n+\t  carry = ((unsigned long) (carry) >> (8 * 8) / 2);\n+\t}\n+      prod[i + 4] = carry;\n+    }\n+\n+  decode (prod, lv, hv);\n+\n+\n+\n+  decode (prod + 4, &toplow, &tophigh);\n+  if (h1 < 0)\n+    {\n+      neg_double (l2, h2, &neglow, &neghigh);\n+      add_double (neglow, neghigh, toplow, tophigh, &toplow, &tophigh);\n+    }\n+  if (h2 < 0)\n+    {\n+      neg_double (l1, h1, &neglow, &neghigh);\n+      add_double (neglow, neghigh, toplow, tophigh, &toplow, &tophigh);\n+    }\n+  return (*hv < 0 ? ~(toplow & tophigh) : toplow | tophigh) != 0;\n+}\n+"}, {"sha": "c11f6a283a8cf177defa34acf2dfadb5263d4a1d", "filename": "gcc/testsuite/gcc.dg/graphite/id-2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99e0e30fd1dd37d16a05dfe7fd60788395e1458d/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fid-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99e0e30fd1dd37d16a05dfe7fd60788395e1458d/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fid-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fid-2.c?ref=99e0e30fd1dd37d16a05dfe7fd60788395e1458d", "patch": "@@ -0,0 +1,16 @@\n+typedef _Complex float GFC_COMPLEX_4;\n+matmul_c4 ()\n+{\n+  int x, n, count;\n+  GFC_COMPLEX_4 * bbase_y;\n+  GFC_COMPLEX_4 * dest_y;\n+  GFC_COMPLEX_4 * abase_n;\n+  GFC_COMPLEX_4 bbase_yn;\n+\n+  for (n = 0; n < count; n++)\n+    {\n+      bbase_yn = bbase_y[n];\n+      for (x = 0; x < count; x++)\n+        dest_y[x] += abase_n[x] * bbase_yn;\n+    }\n+}"}, {"sha": "608c1c37cea9c492eb4889a40e319bdf4d1033f0", "filename": "gcc/testsuite/gcc.dg/graphite/id-3.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99e0e30fd1dd37d16a05dfe7fd60788395e1458d/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fid-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99e0e30fd1dd37d16a05dfe7fd60788395e1458d/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fid-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fid-3.c?ref=99e0e30fd1dd37d16a05dfe7fd60788395e1458d", "patch": "@@ -0,0 +1,11 @@\n+struct {\n+}\n+mmaxloc0_4_i1 ()\n+{\n+  int dstride;\n+  int *dest;\n+  int rank;\n+  int n;\n+  for (n = 0; n < rank; n++)\n+    dest[n * dstride] = 0;\n+}"}, {"sha": "38f6738d706b7a2b9a79997d28f82c7a0b73b3ca", "filename": "gcc/testsuite/gcc.dg/graphite/id-4.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99e0e30fd1dd37d16a05dfe7fd60788395e1458d/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fid-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99e0e30fd1dd37d16a05dfe7fd60788395e1458d/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fid-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fid-4.c?ref=99e0e30fd1dd37d16a05dfe7fd60788395e1458d", "patch": "@@ -0,0 +1,7 @@\n+extern a[];\n+g ()\n+{\n+  int i, b;\n+  for (i = 0; i < 10; i++)\n+    a[i] = (b == 0);\n+}"}, {"sha": "93972d79ed7d11291a8e86855e7704c35f30d83c", "filename": "gcc/testsuite/gcc.dg/graphite/id-5.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99e0e30fd1dd37d16a05dfe7fd60788395e1458d/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fid-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99e0e30fd1dd37d16a05dfe7fd60788395e1458d/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fid-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fid-5.c?ref=99e0e30fd1dd37d16a05dfe7fd60788395e1458d", "patch": "@@ -0,0 +1,15 @@\n+void matmul_i1 ()\n+{\n+  int *abase;\n+  int aystride;\n+  int x, n, count, xcount;\n+  int *dest_y;\n+  int *abase_n;\n+  for (n = 0; n < count; n++)\n+    {\n+      abase_n = abase + n * aystride;\n+      for (x = 0; x < xcount; x++)\n+\tdest_y[x] += abase_n[x];\n+    }\n+}\n+"}, {"sha": "c3aab432a59612f205d8d4595033ae782617d318", "filename": "gcc/testsuite/gcc.dg/graphite/id-6.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99e0e30fd1dd37d16a05dfe7fd60788395e1458d/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fid-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99e0e30fd1dd37d16a05dfe7fd60788395e1458d/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fid-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fid-6.c?ref=99e0e30fd1dd37d16a05dfe7fd60788395e1458d", "patch": "@@ -0,0 +1,29 @@\n+#define N 10000\n+void foo (int);\n+int test ()\n+{\n+  int a[N];\n+  unsigned i;\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      a[i] = i + 12;\n+\n+      if (i == 40)\n+\ta[i] = i;\n+      else\n+\ta[i] = i+1;\n+\n+\n+      a[i] = i + 12;\n+      a[i] = a[i+1];\n+      a[i] += a[i+2];\n+      a[i] += a[i+3];\n+      a[i] += a[i+4];\n+      a[i] += a[i+5];\n+      a[i] += a[i+6];\n+\n+    }\n+\n+  return a[20];\n+}"}, {"sha": "9fa811d6ece94b57f071decacf076f8410317ad8", "filename": "gcc/testsuite/gcc.dg/graphite/id-7.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99e0e30fd1dd37d16a05dfe7fd60788395e1458d/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fid-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99e0e30fd1dd37d16a05dfe7fd60788395e1458d/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fid-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fid-7.c?ref=99e0e30fd1dd37d16a05dfe7fd60788395e1458d", "patch": "@@ -0,0 +1,16 @@\n+void foo (int *BM_tab)\n+{\n+  int *BM_tab_base;\n+\n+  BM_tab_base = BM_tab;\n+  BM_tab += 0400;\n+  while (BM_tab_base != BM_tab)\n+    *--BM_tab = 6;\n+}\n+\n+int main ()\n+{\n+  int BM_tab[0400];\n+  foo (BM_tab);\n+  return 0;\n+}"}, {"sha": "1a278c1642602384a9a9e08aa03cf06691c54b8f", "filename": "gcc/testsuite/gcc.dg/graphite/id-8.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99e0e30fd1dd37d16a05dfe7fd60788395e1458d/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fid-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99e0e30fd1dd37d16a05dfe7fd60788395e1458d/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fid-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fid-8.c?ref=99e0e30fd1dd37d16a05dfe7fd60788395e1458d", "patch": "@@ -0,0 +1,14 @@\n+int blah;\n+foo()\n+{\n+  int i;\n+\n+  for (i=0 ; i< 7 ; i++)\n+    {\n+      if (i == 7 - 1)\n+\tblah = 0xfcc;\n+      else\n+\tblah = 0xfee;\n+    }\n+  return blah;\n+}"}, {"sha": "2199538697ba37c54d555e9fb530225f2e603e05", "filename": "gcc/testsuite/gcc.dg/graphite/id-9.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99e0e30fd1dd37d16a05dfe7fd60788395e1458d/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fid-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99e0e30fd1dd37d16a05dfe7fd60788395e1458d/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fid-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fid-9.c?ref=99e0e30fd1dd37d16a05dfe7fd60788395e1458d", "patch": "@@ -0,0 +1,26 @@\n+typedef enum\n+{\n+  no_op,\n+  jump\n+}\n+re_opcode_t;\n+struct\n+{\n+}\n+byte_register_info_type ()\n+{\n+  char *p;\n+  for (;;)\n+    switch ((re_opcode_t) p++)\n+      {\n+      case no_op:\n+\t{\n+\t  for (; (p);)\n+\t    ;\n+\t    for (;;)\n+\t    ;\n+\t}\n+      case jump:\n+\t(p) += 2;\n+      }\n+}"}, {"sha": "bfbbb20800a73716d26d1cfda75b3c98945b5bf2", "filename": "gcc/testsuite/gcc.dg/graphite/interchange-0.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99e0e30fd1dd37d16a05dfe7fd60788395e1458d/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99e0e30fd1dd37d16a05dfe7fd60788395e1458d/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-0.c?ref=99e0e30fd1dd37d16a05dfe7fd60788395e1458d", "patch": "@@ -0,0 +1,17 @@\n+int a[1000][1000];\n+\n+int\n+foo (int N)\n+{\n+  int j;\n+  int i;\n+\n+  for (i = 0; i < N; i++)\n+    for (j = 0; j < N; j++)\n+      a[j][i] = a[j][i] + 1;\n+\n+  return a[N][123];\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"will be interchanged\" 1 \"graphite\" } } */ \n+/* { dg-final { cleanup-tree-dump \"graphite\" } } */"}, {"sha": "011d98e2cfc892d72add0727059d21e458f998cb", "filename": "gcc/testsuite/gcc.dg/graphite/interchange-1.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99e0e30fd1dd37d16a05dfe7fd60788395e1458d/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99e0e30fd1dd37d16a05dfe7fd60788395e1458d/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-1.c?ref=99e0e30fd1dd37d16a05dfe7fd60788395e1458d", "patch": "@@ -0,0 +1,20 @@\n+/* Formerly known as ltrans-1.c */\n+\n+double u[1782225];\n+int foo(int N, int *res)\n+{\n+  int i, j;\n+  double sum = 0.0;\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      for (j = 0; j < N; j++)\n+\tsum = sum + u[i + 1335 * j];\n+      \n+      u[1336 * i] *= 2;\n+    }\n+  *res = sum + N;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"will be interchanged\" 1 \"graphite\" } } */ \n+/* { dg-final { cleanup-tree-dump \"graphite\" } } */"}, {"sha": "5a64f9a6f47669a1eb8267ae787b067421b921bf", "filename": "gcc/testsuite/gcc.dg/graphite/interchange-2.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99e0e30fd1dd37d16a05dfe7fd60788395e1458d/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99e0e30fd1dd37d16a05dfe7fd60788395e1458d/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-2.c?ref=99e0e30fd1dd37d16a05dfe7fd60788395e1458d", "patch": "@@ -0,0 +1,24 @@\n+/* Formerly known as ltrans-2.c */\n+\n+double u[1782225];\n+int foo(int N, int *res)\n+{\n+  unsigned int i, j;\n+  double sum = 0;\n+  \n+  /* This loop should be converted to a perfect nest and\n+     interchanged.  */\n+  for (i = 0; i < N; i++)\n+    {\n+      for (j = 0; j < N; j++)\n+\t{\n+\t  sum = sum + u[i + 1335 * j];\n+\t  if (j == N - 1)\n+\t    u[1336 * i] *= 2;\n+\t}\n+    }\n+  *res = sum + N;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"will be interchanged\" 1 \"graphite\" } } */ \n+/* { dg-final { cleanup-tree-dump \"graphite\" } } */"}, {"sha": "d081d9e33d554766918fba59ac1f46d84933888d", "filename": "gcc/testsuite/gcc.dg/graphite/interchange-3.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99e0e30fd1dd37d16a05dfe7fd60788395e1458d/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99e0e30fd1dd37d16a05dfe7fd60788395e1458d/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-3.c?ref=99e0e30fd1dd37d16a05dfe7fd60788395e1458d", "patch": "@@ -0,0 +1,19 @@\n+/* Formerly known as ltrans-3.c */\n+\n+double u[1782225];\n+int foo(int N, int *res)\n+{\n+  unsigned int i, j;\n+  double sum = 0;\n+      for (i = 0; i < N; i++)\n+\t{\n+\t  for (j = 0; j < N; j++)\n+\t    {\n+\t      sum = sum + u[i + 1335 * j];\n+\t    }\n+\t}\n+      *res = sum + N;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"will be interchanged\" 1 \"graphite\" } } */ \n+/* { dg-final { cleanup-tree-dump \"graphite\" } } */"}, {"sha": "52fc1709dd1d3af0c65fd26a6102f21ce677a2d3", "filename": "gcc/testsuite/gcc.dg/graphite/interchange-4.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99e0e30fd1dd37d16a05dfe7fd60788395e1458d/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99e0e30fd1dd37d16a05dfe7fd60788395e1458d/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-4.c?ref=99e0e30fd1dd37d16a05dfe7fd60788395e1458d", "patch": "@@ -0,0 +1,18 @@\n+/* Formerly known as ltrans-4.c */\n+\n+double u[1782225];\n+int foo(int N, int *res)\n+{\n+  int i, j;\n+  double sum = 0;\n+  for (i = 0; i < N; i++)\t\n+    for (j = 0; j < N; j++)\n+      sum = sum + u[i + 1335 * j];\n+  \n+  for (i = 0; i < N; i++)\n+    u[1336 * i] *= 2;\n+  *res = sum + N;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"will be interchanged\" 1 \"graphite\" } } */ \n+/* { dg-final { cleanup-tree-dump \"graphite\" } } */"}, {"sha": "2aec56758cc8033246a326cf02e939d0341df3d7", "filename": "gcc/testsuite/gcc.dg/graphite/interchange-5.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99e0e30fd1dd37d16a05dfe7fd60788395e1458d/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99e0e30fd1dd37d16a05dfe7fd60788395e1458d/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-5.c?ref=99e0e30fd1dd37d16a05dfe7fd60788395e1458d", "patch": "@@ -0,0 +1,16 @@\n+/* Formerly known as ltrans-5.c */\n+\n+int foo ()\n+{\n+  int A[100][1111];\n+  int i, j;\n+\n+  for( i = 0; i < 1111; i++)\n+    for( j = 0; j < 100; j++)\n+      A[j][i] = 5 * A[j][i];\n+\n+  return A[10][10];\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"will be interchanged\" 1 \"graphite\" } } */ \n+/* { dg-final { cleanup-tree-dump \"graphite\" } } */"}, {"sha": "64a18653f90bef1db101aa7c421f8df3ed437b89", "filename": "gcc/testsuite/gcc.dg/graphite/interchange-6.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99e0e30fd1dd37d16a05dfe7fd60788395e1458d/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99e0e30fd1dd37d16a05dfe7fd60788395e1458d/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-6.c?ref=99e0e30fd1dd37d16a05dfe7fd60788395e1458d", "patch": "@@ -0,0 +1,17 @@\n+/* Formerly known as ltrans-6.c */\n+\n+int medium_loop_interchange(int A[100][200])\n+{\n+  int i,j;\n+\n+  /* This loop should be interchanged. */\n+\n+  for(j = 0; j < 200; j++)\n+    for(i = 0; i < 100; i++)\n+      A[i][j] = A[i][j] + A[i][j];\n+\n+  return A[1][1];\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"will be interchanged\" 1 \"graphite\" } } */ \n+/* { dg-final { cleanup-tree-dump \"graphite\" } } */"}, {"sha": "7627830586a3f703315d7b0442c365a6aed1a03e", "filename": "gcc/testsuite/gcc.dg/graphite/interchange-7.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99e0e30fd1dd37d16a05dfe7fd60788395e1458d/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99e0e30fd1dd37d16a05dfe7fd60788395e1458d/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-7.c?ref=99e0e30fd1dd37d16a05dfe7fd60788395e1458d", "patch": "@@ -0,0 +1,14 @@\n+/* Formerly known as ltrans-8.c */\n+\n+double foo(double *a)\n+{\n+       int i,j;\n+       double r = 0.0;\n+      for (i=0; i<100; ++i)\n+               for (j=0; j<1000; ++j)\n+                      r += a[j*100+i];\n+       return r;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"will be interchanged\" 1 \"graphite\" } } */ \n+/* { dg-final { cleanup-tree-dump \"graphite\" } } */"}, {"sha": "6a1e201087dd389afa125eb60245d17af5994e13", "filename": "gcc/testsuite/gcc.dg/graphite/interchange-8.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99e0e30fd1dd37d16a05dfe7fd60788395e1458d/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99e0e30fd1dd37d16a05dfe7fd60788395e1458d/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-8.c?ref=99e0e30fd1dd37d16a05dfe7fd60788395e1458d", "patch": "@@ -0,0 +1,45 @@\n+int\n+foo (void)\n+{\n+  int i, j, k, l;\n+  int B[4];\n+  int A[4][4][4][4];\n+\n+  for (l = 0; l < 4; l++)\n+    {\n+      for (k = 0; k < 4; k++)\n+\t{\n+\t  for (j = 0; j < 4; j++)\n+\t    {\n+\t      for (i = 0; i < 2; i++)\n+\t\t{\n+\t\t  B[i] = A[i][k][j][l] + A[3 - i][k][j][l];\n+\t\t  B[3 - i] = A[i][k][j][l] - A[3 - i][k][j][l];\n+\t\t}\n+\t      A[0][k][j][l] = B[0] + B[1];\n+\t      A[2][k][j][l] = B[0] - B[1];\n+\t      A[1][k][j][l] = B[3] + B[2];\n+\t      A[3][k][j][l] = B[3] - B[2];\n+\t    }\n+\n+\t  for (i = 0; i < 4; i++)\n+\t    {\n+\t      for (j = 0; j < 2; j++)\n+\t\t{\n+\t\t  B[j] = A[i][k][j][l] + A[i][k][3 - j][l];\n+\t\t  B[3 - j] = A[i][k][j][l] - A[i][k][3 - j][l];\n+\t\t}\n+\t      A[i][k][0][l] = B[0] + B[1];\n+\t      A[i][k][2][l] = B[0] - B[1];\n+\t      A[i][k][1][l] = B[3] + B[2];\n+\t      A[i][k][3][l] = B[3] - B[2];\n+\t    }\n+\t}\n+    }\n+\n+  return A[0][1][0][2];\n+}\n+\n+/* This should not be interchanged.  */\n+/* { dg-final { scan-tree-dump-times \"will be interchanged\" 0 \"graphite\" } } */ \n+/* { dg-final { cleanup-tree-dump \"graphite\" } } */"}, {"sha": "2ba0c1b0f5ec966fe06fff48dc1e87ed67b2caf4", "filename": "gcc/testsuite/gcc.dg/graphite/pr35356-1.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99e0e30fd1dd37d16a05dfe7fd60788395e1458d/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fpr35356-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99e0e30fd1dd37d16a05dfe7fd60788395e1458d/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fpr35356-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fpr35356-1.c?ref=99e0e30fd1dd37d16a05dfe7fd60788395e1458d", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-options \"-O2 -fgraphite-identity -fdump-tree-graphite-all\" } */\n+\n+int a[100];\n+\n+int\n+foo (int bar, int n, int k)\n+{\n+  int i;\n+\n+  for (i = 0; i < n; i++)\n+    if (i == k)\n+      a[i] = bar;\n+\n+  return a[bar];\n+}\n+\n+/* There should be no loops generated for this testcase, instead we\n+   should generate the following:\n+\n+   | if (k >= 0 && k < n)\n+   |   a[k] = bar;\n+\n+*/\n+\n+/* { dg-final { scan-tree-dump-times \"loop_1\" 0 \"graphite\" } } */\n+/* { dg-final { cleanup-tree-dump \"graphite\" } } */"}, {"sha": "5432deec61d94b584d3fba7ff07adbeab5d6ffa3", "filename": "gcc/testsuite/gcc.dg/graphite/pr35356-2.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99e0e30fd1dd37d16a05dfe7fd60788395e1458d/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fpr35356-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99e0e30fd1dd37d16a05dfe7fd60788395e1458d/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fpr35356-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fpr35356-2.c?ref=99e0e30fd1dd37d16a05dfe7fd60788395e1458d", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-options \"-O2 -fgraphite-identity -fdump-tree-graphite-all\" } */\n+\n+int a[100];\n+\n+int\n+foo (int bar, int n, int k)\n+{\n+  int i;\n+\n+  for (i = 0; i < n; i++)\n+    if (i == k)\n+      a[i] = 1;\n+    else \n+      a[i] = i;\n+\n+  return a[bar];\n+}\n+\n+/* We should generate the following:\n+\n+   | for (i = 0; i < min (n, k); i++)\n+   |   a[i] = i;\n+   | if (k >= 0 && k < n)\n+   |   a[k] = 1;\n+   | for (i = max(k+1,0); i < n; i++)\n+   |   a[i] = i;\n+\n+*/\n+\n+/* { dg-final { scan-tree-dump-times \"MIN_EXPR\" 1 \"graphite\" } } */\n+/* { dg-final { scan-tree-dump-times \"MAX_EXPR\" 1 \"graphite\" } } */\n+/* { dg-final { cleanup-tree-dump \"graphite\" } } */"}, {"sha": "55a771aff947a1261d006ff5cd18a97fcc2c8662", "filename": "gcc/testsuite/gcc.dg/graphite/pr35356-3.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99e0e30fd1dd37d16a05dfe7fd60788395e1458d/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fpr35356-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99e0e30fd1dd37d16a05dfe7fd60788395e1458d/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fpr35356-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fpr35356-3.c?ref=99e0e30fd1dd37d16a05dfe7fd60788395e1458d", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-options \"-O2 -fgraphite-identity -fdump-tree-graphite-all\" } */\n+\n+\n+int winner, numf2s;\n+double **tds;\n+double d, tsum;\n+\n+typedef struct {\n+  double y;\n+} xyz;\n+\n+xyz *Y;\n+int ti;\n+\n+double\n+match (void)\n+{\n+  int tj, tresult;\n+\n+  for (tj = 0; tj < numf2s; tj++)\n+    if (tj == winner\n+\t&& Y[tj].y > 0)\n+      tsum += tds[ti][tj] * d;\n+\n+  return tsum;\n+}\n+\n+/* There should be no loops generated for this testcase, instead we\n+   should generate the following:\n+\n+   | if (winner >= 0 && winner < numf2s && Y[winner].y > 0)\n+   |   tsum += tds[ti][winner] * d;\n+\n+   For the moment this is XFAILed as this loop is not detected as a\n+   SCoP by graphite: we depend on data in one of the conditions,\n+   \"Y[winner].y > 0\".  This could be fixed when we will use predicates\n+   for such cases.  */\n+\n+/* { dg-final { scan-tree-dump-times \"loop_1\" 0 \"graphite\" { xfail *-*-* } } } */\n+/* { dg-final { cleanup-tree-dump \"graphite\" } } */"}, {"sha": "8b3d729861328b0803a0e3ddb3446532f9bfbebc", "filename": "gcc/testsuite/gcc.dg/graphite/pr40157.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99e0e30fd1dd37d16a05dfe7fd60788395e1458d/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fpr40157.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99e0e30fd1dd37d16a05dfe7fd60788395e1458d/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fpr40157.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fpr40157.c?ref=99e0e30fd1dd37d16a05dfe7fd60788395e1458d", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-options \"-O2 -fgraphite-identity\" } */\n+\n+int buffer[256*256];\n+int main(void)\n+{\n+    int *dest = buffer;\n+    int x, y;\n+    for(x = 0; x < 256; x++)\n+        for(y = 0; y < 256; y++)\n+            *dest++ = 0;\n+    return 0;\n+}"}, {"sha": "0a0ff6ab801a0cd169adac2b149e87b9082ce974", "filename": "gcc/testsuite/gcc.dg/graphite/run-id-1.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99e0e30fd1dd37d16a05dfe7fd60788395e1458d/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Frun-id-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99e0e30fd1dd37d16a05dfe7fd60788395e1458d/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Frun-id-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Frun-id-1.c?ref=99e0e30fd1dd37d16a05dfe7fd60788395e1458d", "patch": "@@ -0,0 +1,24 @@\n+void abort (void);\n+\n+void foo (int N)\n+{\n+  int i, j;\n+  int x[10000][10000];\n+\n+  for (i = 0; i < N; i++)\n+    for (j = 0; j < N; j++)\n+      x[i][j] = i + j + 3;\n+\n+  for (i = 0; i < N; i++)\n+    for (j = 0; j < N; j++)\n+      if (x[i][j] != i + j + 3)\n+\tabort ();\n+}\n+\n+int main(void)\n+{\n+  foo (10000);\n+\n+  return 0;\n+}\n+"}, {"sha": "6e71df3f0db3c78a836c2f22b67736627385ac0c", "filename": "gcc/testsuite/gcc.dg/graphite/scop-20.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99e0e30fd1dd37d16a05dfe7fd60788395e1458d/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fscop-20.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99e0e30fd1dd37d16a05dfe7fd60788395e1458d/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fscop-20.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fscop-20.c?ref=99e0e30fd1dd37d16a05dfe7fd60788395e1458d", "patch": "@@ -0,0 +1,27 @@\n+void bar (void);\n+\n+int toto()\n+{\n+  int i, j, k;\n+  int a[100][100];\n+  int b[100];\n+\n+  for (i = 1; i < 100; i++)\n+    {\n+      for (j = 1; j < 100; j += i)\n+\tfor (k = 1; k < 100; k++)\n+\t  a[j][k] = a[j+1][i-1] + 2;\n+\n+      b[i] = b[i-1] + 2;\n+\n+      for (j = 1; j < 100; j++)\n+\ta[j][i] = a[j+1][i-1] + 2;\n+\n+      b[i] = b[i-1] + 2;\n+    }\n+\n+  return a[3][5] + b[1];\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"number of SCoPs: 2\" 1 \"graphite\"} } */\n+/* { dg-final { cleanup-tree-dump \"graphite\" } } */"}, {"sha": "5e3bce2da325a6e9586c1f01d7c740ed9463347e", "filename": "gcc/testsuite/gcc.dg/graphite/scop-21.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99e0e30fd1dd37d16a05dfe7fd60788395e1458d/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fscop-21.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99e0e30fd1dd37d16a05dfe7fd60788395e1458d/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fscop-21.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fscop-21.c?ref=99e0e30fd1dd37d16a05dfe7fd60788395e1458d", "patch": "@@ -0,0 +1,31 @@\n+#define N 10000\n+void foo (int);\n+int test ()\n+{\n+  int a[N];\n+  unsigned i;\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      a[i] = i + 12;\n+\n+      if (i == 40)\n+\ta[i] = i;\n+      else\n+\ta[i] = i+1;\n+\n+\n+      a[i] = i + 12;\n+      a[i] = a[i+1];\n+      a[i] += a[i+2];\n+      a[i] += a[i+3];\n+      a[i] += a[i+4];\n+      a[i] += a[i+5];\n+      a[i] += a[i+6];\n+\n+    }\n+\n+  return a[20];\n+}\n+/* { dg-final { scan-tree-dump-times \"number of SCoPs: 1\" 1 \"graphite\"} } */\n+/* { dg-final { cleanup-tree-dump \"graphite\" } } */"}, {"sha": "5fe709bfb0761bd5dd1629e0da12a3ead02b4faa", "filename": "gcc/testsuite/gfortran.dg/graphite/id-1.f90", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99e0e30fd1dd37d16a05dfe7fd60788395e1458d/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Fid-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99e0e30fd1dd37d16a05dfe7fd60788395e1458d/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Fid-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Fid-1.f90?ref=99e0e30fd1dd37d16a05dfe7fd60788395e1458d", "patch": "@@ -0,0 +1,11 @@\n+program NF\n+end program NF\n+subroutine mattest(nx,ny,nz,band1,band2,band3,stiffness,maxiter,targrms,method)\n+  integer,parameter :: dpkind=kind(1.0D0)\n+  character(*) :: method\n+  real(dpkind),allocatable,dimension(:) :: ad,au1,au2,au3,x,b\n+  allocate(ad(nxyz),au1(nxyz),au2(nxyz),au3(nxyz),x(nxyz),b(nxyz))\n+  au1(nx:nxyz:nx) = 0.0\n+  if ( method=='NFCG' ) then                                    \n+  endif\n+end subroutine mattest"}, {"sha": "0e016f2531900be3c76c5acc067d51ac544e7611", "filename": "gcc/testsuite/gfortran.dg/graphite/id-10.f90", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99e0e30fd1dd37d16a05dfe7fd60788395e1458d/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Fid-10.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99e0e30fd1dd37d16a05dfe7fd60788395e1458d/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Fid-10.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Fid-10.f90?ref=99e0e30fd1dd37d16a05dfe7fd60788395e1458d", "patch": "@@ -0,0 +1,11 @@\n+subroutine foo ( uplo, ap, y )\n+      character*1        uplo\n+      complex(kind((1.0d0,1.0d0)))         ap( * ), y( * )\n+      if     ( .not. scan( uplo, 'uu' )>0.and. &\n+         .not. scan( uplo, 'll' )>0      )then\n+            do 60, j = 1, n\n+               y( j ) = y( j ) + dble( ap( kk ) )\n+               kk     = kk     + j\n+   60       continue\n+      end if\n+      end"}, {"sha": "872e12f359ef78a98e561a1c4a70952eeb8177f5", "filename": "gcc/testsuite/gfortran.dg/graphite/id-11.f", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99e0e30fd1dd37d16a05dfe7fd60788395e1458d/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Fid-11.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99e0e30fd1dd37d16a05dfe7fd60788395e1458d/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Fid-11.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Fid-11.f?ref=99e0e30fd1dd37d16a05dfe7fd60788395e1458d", "patch": "@@ -0,0 +1,14 @@\n+      subroutine foo(bar)\n+      dimension bar(100)\n+      common l_\n+  50  continue\n+      do i=1,20\n+        bar(i)=0\n+      enddo\n+      do 100 j=1,l_\n+        if(sum.gt.r) then\n+          bar(n2)=j\n+        end if\n+ 100  continue\n+      if(bar(4).ne.0) go to 50\n+      end"}, {"sha": "5b7415ca0ec091a5b7acaa66b482bb0b729bc214", "filename": "gcc/testsuite/gfortran.dg/graphite/id-12.f", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99e0e30fd1dd37d16a05dfe7fd60788395e1458d/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Fid-12.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99e0e30fd1dd37d16a05dfe7fd60788395e1458d/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Fid-12.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Fid-12.f?ref=99e0e30fd1dd37d16a05dfe7fd60788395e1458d", "patch": "@@ -0,0 +1,19 @@\n+      subroutine foo(a)\n+      logical bar\n+      dimension a(12,2)\n+      dimension b(12,8)\n+      if(cd .eq. 1) then\n+         if (bar) write(iw,*) norb\n+         if(ef.ne.1) then\n+            do i=1,norb\n+            end do\n+         end if\n+      end if\n+         do 400 j = 1,8\n+            b(i,j) = 0\n+  400    continue\n+         do 410 j=1,norb\n+            a(i,j) = 0\n+  410    continue\n+      call rdrsym(b)\n+      end"}, {"sha": "9aec1fa6ba9d0dccb460d291a744b769929a54d7", "filename": "gcc/testsuite/gfortran.dg/graphite/id-13.f", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99e0e30fd1dd37d16a05dfe7fd60788395e1458d/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Fid-13.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99e0e30fd1dd37d16a05dfe7fd60788395e1458d/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Fid-13.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Fid-13.f?ref=99e0e30fd1dd37d16a05dfe7fd60788395e1458d", "patch": "@@ -0,0 +1,12 @@\n+      DIMENSION FF(19)\n+      COMMON UF(9)\n+         CALL RYSNOD(K)\n+      DO 150 K=2,N\n+         JMAX=K-1\n+            DUM = ONE/FF(1)\n+            DO 110 J=1,JMAX\n+               DUM=DUM+POLY*POLY\n+  110       CONTINUE\n+  150 CONTINUE\n+         UF(K)=DUM/(ONE-DUM)\n+      END"}, {"sha": "cdc3d101c9528f64dc0862ffaef9694294055167", "filename": "gcc/testsuite/gfortran.dg/graphite/id-14.f", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99e0e30fd1dd37d16a05dfe7fd60788395e1458d/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Fid-14.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99e0e30fd1dd37d16a05dfe7fd60788395e1458d/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Fid-14.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Fid-14.f?ref=99e0e30fd1dd37d16a05dfe7fd60788395e1458d", "patch": "@@ -0,0 +1,20 @@\n+      SUBROUTINE ORDORB(IORBTP,IORBCD)\n+      LOGICAL MASWRK\n+      DIMENSION IORBTP(12,12)\n+      DIMENSION IORBCD(12)\n+      DIMENSION NSYMTP(12,8)\n+      IF (MASWRK) WRITE(IW) K,NORB\n+      DO 280 I=1,NFZV\n+         IORBCD(K+I) = 3\n+  280 CONTINUE\n+      DO 420 I = 1,NTPS\n+         DO 400 J = 1,8\n+            NSYMTP(I,J) = 0\n+  400    CONTINUE\n+         DO 410 J=1,NORB\n+            IORBTP(I,J) = 0\n+  410    CONTINUE\n+  420 CONTINUE\n+      CALL RDRSYM(ICODE,NSYMTP,NSYM)\n+ 9055 FORMAT(I5)\n+      END"}, {"sha": "bf60d856913d1cc1c0d598e0add1dac4fd56f52e", "filename": "gcc/testsuite/gfortran.dg/graphite/id-15.f", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99e0e30fd1dd37d16a05dfe7fd60788395e1458d/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Fid-15.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99e0e30fd1dd37d16a05dfe7fd60788395e1458d/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Fid-15.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Fid-15.f?ref=99e0e30fd1dd37d16a05dfe7fd60788395e1458d", "patch": "@@ -0,0 +1,16 @@\n+      SUBROUTINE ORDORB(IORBTP)\n+      LOGICAL MASWRK\n+      DIMENSION IORBTP(12,12)\n+      DIMENSION NSYMTP(12,8)\n+      IF (MASWRK) WRITE(IW) K,NORB\n+      DO 420 I = 1,NTPS\n+         DO 400 J = 1,8\n+            NSYMTP(I,J) = 0\n+  400    CONTINUE\n+         DO 410 J=1,NORB\n+            IORBTP(I,J) = 0\n+  410    CONTINUE\n+  420 CONTINUE\n+      CALL RDRSYM(ICODE,NSYMTP,NSYM)\n+ 9055 FORMAT(I5)\n+      END"}, {"sha": "323d6c958f076bafb7b5cb90d47e147fd95056ea", "filename": "gcc/testsuite/gfortran.dg/graphite/id-16.f", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99e0e30fd1dd37d16a05dfe7fd60788395e1458d/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Fid-16.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99e0e30fd1dd37d16a05dfe7fd60788395e1458d/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Fid-16.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Fid-16.f?ref=99e0e30fd1dd37d16a05dfe7fd60788395e1458d", "patch": "@@ -0,0 +1,10 @@\n+      SUBROUTINE BFN(X,BF)\n+      DIMENSION BF(13)\n+      DIMENSION FACT(17)\n+      DO 70 M=0,LAST\n+         XF = 1\n+         IF(M.NE.0) XF = FACT(M)\n+         Y = Y + XF\n+ 70   CONTINUE\n+      BF(1)=Y\n+      END"}, {"sha": "b9e93e39c1c7bce8d6fa37dfbb531043bd5f56df", "filename": "gcc/testsuite/gfortran.dg/graphite/id-5.f", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99e0e30fd1dd37d16a05dfe7fd60788395e1458d/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Fid-5.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99e0e30fd1dd37d16a05dfe7fd60788395e1458d/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Fid-5.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Fid-5.f?ref=99e0e30fd1dd37d16a05dfe7fd60788395e1458d", "patch": "@@ -0,0 +1,19 @@\n+      subroutine shell(Re,Pr,nx,ny,nz,\n+     $nuim,nuex2,nuex4,cfl,scheme,conf,ni,maxit) \n+      real*8 q(5,nx,ny,nz),dq(5,nx,ny,nz),rhs(5,nx,ny,nz),e(5,nx,ny,nz),\n+     1     f(5,nx,ny,nz),g(5,nx,ny,nz),ev(5,nx,ny,nz),fv(5,nx,ny,nz),\n+     2     gv(5,nx,ny,nz),diss(5,nx,ny,nz)\n+      do k=1,nz\n+         do j=1,ny\n+            do i=1,nx\n+               do l=1,5\n+                  t1= -0.5d0*dt*(\n+     3            (g(l,i,j,kp1)-g(l,i,j,km1))/dz) +\n+     4            dt/Re*((ev(l,i,j,k)-ev(l,im1,j,k))/dx +\n+     6                  (gv(l,i,j,k)-gv(l,i,j,km1))/dz)\n+                  rhs(l,i,j,k)=t1+t2\n+               enddo\n+            enddo\n+         enddo\n+      enddo\n+      end"}, {"sha": "2ccb4632afeaa5b146bd46eab24e07c839ba2eba", "filename": "gcc/testsuite/gfortran.dg/graphite/id-6.f", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99e0e30fd1dd37d16a05dfe7fd60788395e1458d/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Fid-6.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99e0e30fd1dd37d16a05dfe7fd60788395e1458d/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Fid-6.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Fid-6.f?ref=99e0e30fd1dd37d16a05dfe7fd60788395e1458d", "patch": "@@ -0,0 +1,22 @@\n+      SUBROUTINE EIJDEN(EPS,V,E,IA,WRK,L1,L2,L3,L0,ECI)\n+      DIMENSION V(L1,L0),EPS(L2),E(*),IA(L1),WRK(L1),ECI(L0,L0)\n+      IF(SCFTYP.EQ.RHF .AND. MPLEVL.EQ.0 .AND.\n+     *   CITYP.NE.GUGA .AND. CITYP.NE.CIS) THEN\n+            CALL DCOPY(NORB,E(IADDE),1,E(IADD),1)\n+      END IF\n+      IF (CITYP.NE.GUGA) THEN\n+      DO 500 I = 1,L1\n+         DO 430 L = 1,NORB\n+            DO 420 K = 1,NORB\n+               IF(K.LE.L) THEN\n+                  WRK(L) = WRK(L) - V(I,K)*ECI(K,L)\n+               ELSE\n+                  WRK(L) = WRK(L) - V(I,K)*ECI(L,K)\n+               END IF\n+  420       CONTINUE\n+  430    CONTINUE\n+         DO 440 L = 1,NORB\n+  440    CONTINUE\n+  500 CONTINUE\n+      END IF\n+      END"}, {"sha": "dbbbe37a484ecbc2cc17564fe0f328cc39c0bd08", "filename": "gcc/testsuite/gfortran.dg/graphite/id-7.f", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99e0e30fd1dd37d16a05dfe7fd60788395e1458d/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Fid-7.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99e0e30fd1dd37d16a05dfe7fd60788395e1458d/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Fid-7.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Fid-7.f?ref=99e0e30fd1dd37d16a05dfe7fd60788395e1458d", "patch": "@@ -0,0 +1,14 @@\n+      subroutine dasol(al,au,ad,b,jp,neq,energy)\n+      real*8 al(*),au(*),ad(*),b(*),zero,energy,bd,dot\n+      do 100 is=1,neq\n+         if(b(is).ne.zero) go to 200\n+ 100  continue\n+      return\n+ 200  if(is.lt.neq) then\n+      endif\n+      do 400 j = is,neq\n+         energy=energy+bd*b(j)\n+ 400  continue\n+      if(neq.gt.1)then\n+      endif\n+      end"}, {"sha": "6594dda24a9a60e2fbb8ec2cb762b07b76f0b7e7", "filename": "gcc/testsuite/gfortran.dg/graphite/id-8.f", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99e0e30fd1dd37d16a05dfe7fd60788395e1458d/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Fid-8.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99e0e30fd1dd37d16a05dfe7fd60788395e1458d/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Fid-8.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Fid-8.f?ref=99e0e30fd1dd37d16a05dfe7fd60788395e1458d", "patch": "@@ -0,0 +1,17 @@\n+      subroutine foo(mxgtot,mxsh)\n+      logical b\n+      dimension ex(mxgtot),cs(mxgtot)\n+         do 500 jg = k1,ig\n+            u = ex(ig)+ex(jg)\n+            z = u*sqrt(u)\n+            x = cs(ig)*cs(jg)/z\n+            if (ig .eq. jg) go to 480\n+               x = x+x\n+  480       continue\n+            y = y+x\n+  500    continue\n+      if(y.gt.t) z=1/sqrt(y)\n+      if (b) then\n+         write(9) z\n+      endif\n+      end"}, {"sha": "c939370889723e2fc679450afffb0a9a0fc2f8de", "filename": "gcc/testsuite/gfortran.dg/graphite/id-9.f", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99e0e30fd1dd37d16a05dfe7fd60788395e1458d/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Fid-9.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99e0e30fd1dd37d16a05dfe7fd60788395e1458d/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Fid-9.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Fid-9.f?ref=99e0e30fd1dd37d16a05dfe7fd60788395e1458d", "patch": "@@ -0,0 +1,20 @@\n+      subroutine foo(bar)\n+      real*8 bar(3,3),coefm\n+      do ii=istart,iend\n+            do i=1,21\n+               bar(k,l)=4\n+            enddo\n+            do m=1,ne\n+                  do l=1,3\n+                     do k=1,l\n+                     enddo\n+                     bar(k,l)=bar(k,l)+(v3b-1.d0)\n+                  enddo\n+            enddo\n+            do m=1,ne\n+               do k=1,l\n+                  l = l*(v3b**(-coefm))\n+               enddo\n+            enddo\n+      enddo\n+      end"}, {"sha": "a73bb131ff4c9e4fa80d9dd6a1bf1458cc641ce5", "filename": "gcc/testsuite/gfortran.dg/graphite/interchange-1.f", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99e0e30fd1dd37d16a05dfe7fd60788395e1458d/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Finterchange-1.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99e0e30fd1dd37d16a05dfe7fd60788395e1458d/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Finterchange-1.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Finterchange-1.f?ref=99e0e30fd1dd37d16a05dfe7fd60788395e1458d", "patch": "@@ -0,0 +1,38 @@\n+      subroutine foo(f1,f2,f3,f4,f5,f6,f7,f8,f9,f0,g1,g2,g3)\n+      implicit none\n+      integer f4,f3,f2,f1\n+      integer g4,g5,g6,g7,g8,g9\n+      integer i1,i2,i3,i4,i5\n+\n+      real*8 g1(5,f3,f2,f1),g2(5,5,f3,f2,f1),g3(5,f3,f2,f1)\n+      real*8 f0(5,5,f3,f2,f1),f9(5,5,f3,f2,f1),f8(5,5,f3,f2,f1)\n+      real*8 f7(5,5,f3,f2,f1),f6(5,5,f3,f2,f1),f5(5,5,f3,f2,f1)\n+\n+      do i3=1,f1\n+         g8=mod(i3+f1-2,f1)+1\n+         g9=mod(i3,f1)+1\n+         do i4=1,f2\n+            g6=mod(i4+f2-2,f2)+1\n+            g7=mod(i4,f2)+1\n+            do i5=1,f3\n+               g4=mod(i5+f3-2,f3)+1\n+               g5=mod(i5,f3)+1\n+               do i1=1,5\n+                  g3(i1,i5,i4,i3)=0.0d0\n+                  do i2=1,5\n+                     g3(i1,i5,i4,i3)=g3(i1,i5,i4,i3)+\n+     1                    g2(i1,i2,i5,i4,i3)*g1(i2,i5,i4,i3)+\n+     2                    f0(i1,i2,i5,i4,i3)*g1(i2,g5,i4,i3)+\n+     3                    f9(i1,i2,i5,i4,i3)*g1(i2,i5,g7,i3)+\n+     4                    f8(i1,i2,i5,i4,i3)*g1(i2,i5,i4,g9)+\n+     5                    f7(i1,i2,i5,i4,i3)*g1(i2,g4,i4,i3)+\n+     6                    f6(i1,i2,i5,i4,i3)*g1(i2,i5,g6,i3)+\n+     7                    f5(i1,i2,i5,i4,i3)*g1(i2,i5,i4,g8)\n+                  enddo\n+               enddo\n+            enddo\n+         enddo\n+      enddo          \n+      return\n+      end\n+"}, {"sha": "6418c0c89e6a695cc235024bb1d3ff4126024c91", "filename": "gcc/testsuite/gfortran.dg/graphite/interchange-2.f", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99e0e30fd1dd37d16a05dfe7fd60788395e1458d/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Finterchange-2.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99e0e30fd1dd37d16a05dfe7fd60788395e1458d/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Finterchange-2.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Finterchange-2.f?ref=99e0e30fd1dd37d16a05dfe7fd60788395e1458d", "patch": "@@ -0,0 +1,38 @@\n+      subroutine foo(f1,f2,f3,f4,f5,f6,f7,f8,f9,f0,g1,g2,g3)\n+      implicit none\n+      integer f4,f3,f2,f1\n+      integer g4,g5,g6,g7,g8,g9\n+      integer i1,i2,i3,i4,i5\n+\n+      real*8 g1(f4,f3,f2,f1),g2(f4,f4,f3,f2,f1),g3(f4,f3,f2,f1)\n+      real*8 f0(f4,f4,f3,f2,f1),f9(f4,f4,f3,f2,f1),f8(f4,f4,f3,f2,f1)\n+      real*8 f7(f4,f4,f3,f2,f1),f6(f4,f4,f3,f2,f1),f5(f4,f4,f3,f2,f1)\n+\n+      do i3=1,f1\n+         g8=mod(i3+f1-2,f1)+1\n+         g9=mod(i3,f1)+1\n+         do i4=1,f2\n+            g6=mod(i4+f2-2,f2)+1\n+            g7=mod(i4,f2)+1\n+            do i5=1,f3\n+               g4=mod(i5+f3-2,f3)+1\n+               g5=mod(i5,f3)+1\n+               do i1=1,f4\n+                  g3(i1,i5,i4,i3)=0.0d0\n+                  do i2=1,f4\n+                     g3(i1,i5,i4,i3)=g3(i1,i5,i4,i3)+\n+     1                    g2(i1,i2,i5,i4,i3)*g1(i2,i5,i4,i3)+\n+     2                    f0(i1,i2,i5,i4,i3)*g1(i2,g5,i4,i3)+\n+     3                    f9(i1,i2,i5,i4,i3)*g1(i2,i5,g7,i3)+\n+     4                    f8(i1,i2,i5,i4,i3)*g1(i2,i5,i4,g9)+\n+     5                    f7(i1,i2,i5,i4,i3)*g1(i2,g4,i4,i3)+\n+     6                    f6(i1,i2,i5,i4,i3)*g1(i2,i5,g6,i3)+\n+     7                    f5(i1,i2,i5,i4,i3)*g1(i2,i5,i4,g8)\n+                  enddo\n+               enddo\n+            enddo\n+         enddo\n+      enddo          \n+      return\n+      end\n+"}]}