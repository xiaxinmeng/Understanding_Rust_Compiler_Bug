{"sha": "24c06560a7fa39049911eeb8777325d112e0deb9", "node_id": "C_kwDOANBUbNoAKDI0YzA2NTYwYTdmYTM5MDQ5OTExZWViODc3NzMyNWQxMTJlMGRlYjk", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-03-17T17:59:56Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-03-17T17:59:56Z"}, "message": "tree-inline: Fix up multiversioning with vector arguments [PR105554]\n\nThe following testcase ICEs, because we call tree_function_versioning from\nold_decl which has target attributes not supporting V4DImode and so\nDECL_MODE of DECL_ARGUMENTS is BLKmode, while new_decl supports those.\ntree_function_versioning initially copies DECL_RESULT and DECL_ARGUMENTS\nfrom old_decl to new_decl, then calls initialize_cfun to create cfun\nand only when the cfun is created it can later actually remap_decl\nDECL_RESULT and DECL_ARGUMENTS etc.\nThe problem is that initialize_cfun -> push_struct_function ->\nallocate_struct_function calls relayout_decl on DECL_RESULT and\nDECL_ARGUMENTS, which clobbers DECL_MODE of old_decl and we then ICE because\nof it.\nIn particular, allocate_struct_function does:\n      if (!abstract_p)\n        {\n          /* Now that we have activated any function-specific attributes\n             that might affect layout, particularly vector modes, relayout\n             each of the parameters and the result.  */\n          relayout_decl (result);\n          for (tree parm = DECL_ARGUMENTS (fndecl); parm;\n               parm = DECL_CHAIN (parm))\n            relayout_decl (parm);\n\n          /* Similarly relayout the function decl.  */\n          targetm.target_option.relayout_function (fndecl);\n        }\n\n      if (!abstract_p && aggregate_value_p (result, fndecl))\n        {\n #ifdef PCC_STATIC_STRUCT_RETURN\n          cfun->returns_pcc_struct = 1;\n #endif\n          cfun->returns_struct = 1;\n        }\nNow, in the case of tree_function_versioning, I believe all that we need\nfrom these is possibly the\ntargetm.target_option.relayout_function (fndecl);\ncall (arm only), we will remap DECL_RESULT and DECL_ARGUMENTS later on\nand copy_decl_for_dup_finish in that case will handle all we need:\n  /* For vector typed decls make sure to update DECL_MODE according\n     to the new function context.  */\n  if (VECTOR_TYPE_P (TREE_TYPE (copy)))\n    SET_DECL_MODE (copy, TYPE_MODE (TREE_TYPE (copy)));\nWe don't need the cfun->returns_*struct either, because we override it\nin initialize_cfun a few lines later:\n  /* Copy items we preserve during cloning.  */\n...\n  cfun->returns_struct = src_cfun->returns_struct;\n  cfun->returns_pcc_struct = src_cfun->returns_pcc_struct;\n\nSo, to avoid the clobbering of DECL_RESULT/DECL_ARGUMENTS of old_decl,\nthe following patch arranges allocate_struct_function to be called with\nabstract_p true and calls targetm.target_option.relayout_function (fndecl);\nby hand.\n\nThe removal of DECL_RESULT/DECL_ARGUMENTS copying at the start of\ninitialize_cfun is removed because the only caller -\ntree_function_versioning, does that unconditionally before.\n\n2023-03-17  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/105554\n\t* function.h (push_struct_function): Add ABSTRACT_P argument defaulted\n\tto false.\n\t* function.cc (push_struct_function): Add ABSTRACT_P argument, pass it\n\tto allocate_struct_function instead of false.\n\t* tree-inline.cc (initialize_cfun): Don't copy DECL_ARGUMENTS\n\tnor DECL_RESULT here.  Pass true as ABSTRACT_P to\n\tpush_struct_function.  Call targetm.target_option.relayout_function\n\tafter it.\n\t(tree_function_versioning): Formatting fix.\n\n\t* gcc.target/i386/pr105554.c: New test.", "tree": {"sha": "60b582f884a620c4c54e4af5276e76bba15977a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/60b582f884a620c4c54e4af5276e76bba15977a0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/24c06560a7fa39049911eeb8777325d112e0deb9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24c06560a7fa39049911eeb8777325d112e0deb9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24c06560a7fa39049911eeb8777325d112e0deb9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24c06560a7fa39049911eeb8777325d112e0deb9/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "103d423f6ce72ccb03d55b7b1dfa2dabd5854371", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/103d423f6ce72ccb03d55b7b1dfa2dabd5854371", "html_url": "https://github.com/Rust-GCC/gccrs/commit/103d423f6ce72ccb03d55b7b1dfa2dabd5854371"}], "stats": {"total": 27, "additions": 16, "deletions": 11}, "files": [{"sha": "edf0b2ec6cfaec72cd20d16e701b2460def1551d", "filename": "gcc/function.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24c06560a7fa39049911eeb8777325d112e0deb9/gcc%2Ffunction.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24c06560a7fa39049911eeb8777325d112e0deb9/gcc%2Ffunction.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.cc?ref=24c06560a7fa39049911eeb8777325d112e0deb9", "patch": "@@ -4891,7 +4891,7 @@ allocate_struct_function (tree fndecl, bool abstract_p)\n    instead of just setting it.  */\n \n void\n-push_struct_function (tree fndecl)\n+push_struct_function (tree fndecl, bool abstract_p)\n {\n   /* When in_dummy_function we might be in the middle of a pop_cfun and\n      current_function_decl and cfun may not match.  */\n@@ -4900,7 +4900,7 @@ push_struct_function (tree fndecl)\n \t      || (cfun && current_function_decl == cfun->decl));\n   cfun_stack.safe_push (cfun);\n   current_function_decl = fndecl;\n-  allocate_struct_function (fndecl, false);\n+  allocate_struct_function (fndecl, abstract_p);\n }\n \n /* Reset crtl and other non-struct-function variables to defaults as"}, {"sha": "d4ce8a7c6c6984487ee0f376950789abc855cf7a", "filename": "gcc/function.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24c06560a7fa39049911eeb8777325d112e0deb9/gcc%2Ffunction.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24c06560a7fa39049911eeb8777325d112e0deb9/gcc%2Ffunction.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.h?ref=24c06560a7fa39049911eeb8777325d112e0deb9", "patch": "@@ -687,7 +687,7 @@ extern void pop_cfun (void);\n extern int get_next_funcdef_no (void);\n extern int get_last_funcdef_no (void);\n extern void allocate_struct_function (tree, bool);\n-extern void push_struct_function (tree fndecl);\n+extern void push_struct_function (tree fndecl, bool = false);\n extern void push_dummy_function (bool);\n extern void pop_dummy_function (void);\n extern void init_dummy_function_start (void);"}, {"sha": "08e90bb3368287c9675298d4a880e2327ef498f3", "filename": "gcc/testsuite/gcc.target/i386/pr105554.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24c06560a7fa39049911eeb8777325d112e0deb9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr105554.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24c06560a7fa39049911eeb8777325d112e0deb9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr105554.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr105554.c?ref=24c06560a7fa39049911eeb8777325d112e0deb9", "patch": "@@ -0,0 +1,10 @@\n+/* PR target/105554 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -Wno-psabi -mno-sse3\" } */\n+\n+typedef long long v4di __attribute__((__vector_size__(32)));\n+\n+__attribute__((target_clones (\"arch=core-avx2\", \"default\"))) void\n+foo (v4di x)\n+{\n+}"}, {"sha": "c702f0032a19203a7c536a01c1e7f47fc7b77add", "filename": "gcc/tree-inline.cc", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24c06560a7fa39049911eeb8777325d112e0deb9/gcc%2Ftree-inline.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24c06560a7fa39049911eeb8777325d112e0deb9/gcc%2Ftree-inline.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.cc?ref=24c06560a7fa39049911eeb8777325d112e0deb9", "patch": "@@ -2781,16 +2781,12 @@ initialize_cfun (tree new_fndecl, tree callee_fndecl, profile_count count)\n {\n   struct function *src_cfun = DECL_STRUCT_FUNCTION (callee_fndecl);\n \n-  if (!DECL_ARGUMENTS (new_fndecl))\n-    DECL_ARGUMENTS (new_fndecl) = DECL_ARGUMENTS (callee_fndecl);\n-  if (!DECL_RESULT (new_fndecl))\n-    DECL_RESULT (new_fndecl) = DECL_RESULT (callee_fndecl);\n-\n   /* Register specific tree functions.  */\n   gimple_register_cfg_hooks ();\n \n   /* Get clean struct function.  */\n-  push_struct_function (new_fndecl);\n+  push_struct_function (new_fndecl, true);\n+  targetm.target_option.relayout_function (new_fndecl);\n \n   /* We will rebuild these, so just sanity check that they are empty.  */\n   gcc_assert (VALUE_HISTOGRAMS (cfun) == NULL);\n@@ -6235,8 +6231,7 @@ tree_function_versioning (tree old_decl, tree new_decl,\n   id.transform_return_to_modify = false;\n   id.transform_parameter = false;\n \n-  old_entry_block = ENTRY_BLOCK_PTR_FOR_FN\n-    (DECL_STRUCT_FUNCTION (old_decl));\n+  old_entry_block = ENTRY_BLOCK_PTR_FOR_FN (DECL_STRUCT_FUNCTION (old_decl));\n   DECL_RESULT (new_decl) = DECL_RESULT (old_decl);\n   DECL_ARGUMENTS (new_decl) = DECL_ARGUMENTS (old_decl);\n   initialize_cfun (new_decl, old_decl,"}]}