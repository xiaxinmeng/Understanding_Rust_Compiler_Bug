{"sha": "bdfd2ff072c47616e8e34dd99abf00df4cff3e51", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmRmZDJmZjA3MmM0NzYxNmU4ZTM0ZGQ5OWFiZjAwZGY0Y2ZmM2U1MQ==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2008-07-24T09:26:43Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2008-07-24T09:26:43Z"}, "message": "re PR fortran/29952 (Flag to give runtime information \" array temporary was created for argument\")\n\n2008-07-24  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/29952\n\t* gfortran.h:  Add \"warn_array_temp\" to gfc_option_t.\n\t* lang.opt:  Add -Warray-temporaries.\n\t* invoke.texi:  Document -Warray-temporaries\n\t* trans-array.h (gfc_trans_create_temp_array):  Add argument of\n\ttype *locus.\n\t(gfc_conv_loop_setup):  Likewise.\n\t* trans-array.c (gfc_trans_create_temp_array):  If\n\t-Warray-temporaries is given and locus is present, warn about\n\tcreation of array temporaries.\n\t(gfc_trans_array_constructor_subarray):  Add locus to call\n\tof gfc_conv_loop_setup.\n\t(gfc_trans_array_constructor):  Add where argument.  Pass where\n\targument to call of gfc_trans_create_temp_array.\n\t(gfc_add_loop_ss_code):  Add where argument.  Pass where argument\n\tto recursive call of gfc_add_loop_ss_code and to call of\n\tgfc_trans_array_constructor.\n\t(gfc_conv_loop_setup):  Add where argument.  Pass where argument\n\tto calls to gfc_add_loop_ss_code and to gfc_trans_create_temp_array.\n\t(gfc_conv_expr_descriptor):  Pass location to call of\n\tgfc_conv_loop_setup.\n\t(gfc_conv_array_parameter):  If -Warray-temporaries is given,\n\twarn about creation of temporary arrays.\n\t* trans-expr.c (gfc_conv_subref_array_arg):  Add where argument\n\tto call to gfc_conv_loop_setup.\n\t(gfc_conv_function_call):  Add where argument to call to\n\tgfc_trans_creat_temp_array.\n\t(gfc_trans_subarray_assign):  Likewise.\n\t(gfc_trans_assignment_1):  Add where argument to call to\n\tgfc_conv_loop_setup.\n\t* trans-stmt.c (gfc_conv_elemental_dependencies):  Add where\n\targument to call to gfc_trans_create_temp_array.\n\t(gfc_trans_call):  Add where argument to call to gfc_conv_loop_setup.\n\t(generate_loop_for_temp_to_lhs):  Likewise.\n\t(generate_loop_for_rhs_to_temp):  Likewise.\n\t(compute_inner_temp_size):  Likewise.\n\t(gfc_trans-pointer_assign_need_temp):  Likewise.\n\t(gfc_evaluate_where_mask):  Likewise.\n\t(gfc_trans_where_assign):  Likewise.\n\t(gfc_trans_where_3):  Likewise.\n\t* trans-io.c (transfer_srray_component):  Add where argument\n\tto function. Add where argument to call to gfc_conv_loop_setup.\n\t(transfer_expr):  Add where argument to call to\n\ttransfer_array_component.\n\t(gfc_trans_transfer):  Add where expression to call to\n\tgfc_conv_loop_setup.\n\t* trans-intrinsic.c (gfc_conv_intrinsic_anyall):  Add\n\twhere argument to call to gfc_conv_loop_setup.\n\t(gfc_conv_intrinsic_count):  Likewise.\n\t(gfc_conv_intrinsic_arith):  Likewise.\n\t(gfc_conv_intrinsic_dot_product):  Likewise.\n\t(gfc_conv_intrinsic_minmaxloc):  Likewise.\n\t(gfc_conv_intrinsic_minmaxval):  Likewise.\n\t(gfc_conv_intrinsic_array_transfer):  Warn about\n\tcreation of temporary array.\n\tAdd where argument to call to gfc_trans_create_temp_array.\n\t* options.c (gfc_init_options):  Initialize gfc_option.warn_array_temp.\n\t(gfc_handle_option):  Set gfc_option.warn_array_temp.\n\n2008-07-24  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/29952\n\t* gfortran.dg/array_temporaries_1.f90: New test case.\n\nFrom-SVN: r138112", "tree": {"sha": "4cd05ed6bf5ac4db7c4b5aa165da96b314bc23f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4cd05ed6bf5ac4db7c4b5aa165da96b314bc23f5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bdfd2ff072c47616e8e34dd99abf00df4cff3e51", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdfd2ff072c47616e8e34dd99abf00df4cff3e51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bdfd2ff072c47616e8e34dd99abf00df4cff3e51", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdfd2ff072c47616e8e34dd99abf00df4cff3e51/comments", "author": null, "committer": null, "parents": [{"sha": "f59a2f55970ac1d3ec240d8d4594bce7440645ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f59a2f55970ac1d3ec240d8d4594bce7440645ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f59a2f55970ac1d3ec240d8d4594bce7440645ae"}], "stats": {"total": 205, "additions": 164, "deletions": 41}, "files": [{"sha": "1f0ba0d34877890a858d338c605d7e0e1dd90d05", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdfd2ff072c47616e8e34dd99abf00df4cff3e51/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdfd2ff072c47616e8e34dd99abf00df4cff3e51/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=bdfd2ff072c47616e8e34dd99abf00df4cff3e51", "patch": "@@ -1,3 +1,64 @@\n+2008-07-24  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/29952\n+\t* gfortran.h:  Add \"warn_array_temp\" to gfc_option_t.\n+\t* lang.opt:  Add -Warray-temporaries.\n+\t* invoke.texi:  Document -Warray-temporaries\n+\t* trans-array.h (gfc_trans_create_temp_array):  Add argument of\n+\ttype *locus.\n+\t(gfc_conv_loop_setup):  Likewise.\n+\t* trans-array.c (gfc_trans_create_temp_array):  If\n+\t-Warray-temporaries is given and locus is present, warn about\n+\tcreation of array temporaries.\n+\t(gfc_trans_array_constructor_subarray):  Add locus to call\n+\tof gfc_conv_loop_setup.\n+\t(gfc_trans_array_constructor):  Add where argument.  Pass where\n+\targument to call of gfc_trans_create_temp_array.\n+\t(gfc_add_loop_ss_code):  Add where argument.  Pass where argument\n+\tto recursive call of gfc_add_loop_ss_code and to call of\n+\tgfc_trans_array_constructor.\n+\t(gfc_conv_loop_setup):  Add where argument.  Pass where argument\n+\tto calls to gfc_add_loop_ss_code and to gfc_trans_create_temp_array.\n+\t(gfc_conv_expr_descriptor):  Pass location to call of\n+\tgfc_conv_loop_setup.\n+\t(gfc_conv_array_parameter):  If -Warray-temporaries is given,\n+\twarn about creation of temporary arrays.\n+\t* trans-expr.c (gfc_conv_subref_array_arg):  Add where argument\n+\tto call to gfc_conv_loop_setup.\n+\t(gfc_conv_function_call):  Add where argument to call to\n+\tgfc_trans_creat_temp_array.\n+\t(gfc_trans_subarray_assign):  Likewise.\n+\t(gfc_trans_assignment_1):  Add where argument to call to\n+\tgfc_conv_loop_setup.\n+\t* trans-stmt.c (gfc_conv_elemental_dependencies):  Add where\n+\targument to call to gfc_trans_create_temp_array.\n+\t(gfc_trans_call):  Add where argument to call to gfc_conv_loop_setup.\n+\t(generate_loop_for_temp_to_lhs):  Likewise.\n+\t(generate_loop_for_rhs_to_temp):  Likewise.\n+\t(compute_inner_temp_size):  Likewise.\n+\t(gfc_trans-pointer_assign_need_temp):  Likewise.\n+\t(gfc_evaluate_where_mask):  Likewise.\n+\t(gfc_trans_where_assign):  Likewise.\n+\t(gfc_trans_where_3):  Likewise.\n+\t* trans-io.c (transfer_srray_component):  Add where argument\n+\tto function. Add where argument to call to gfc_conv_loop_setup.\n+\t(transfer_expr):  Add where argument to call to\n+\ttransfer_array_component.\n+\t(gfc_trans_transfer):  Add where expression to call to\n+\tgfc_conv_loop_setup.\n+\t* trans-intrinsic.c (gfc_conv_intrinsic_anyall):  Add\n+\twhere argument to call to gfc_conv_loop_setup.\n+\t(gfc_conv_intrinsic_count):  Likewise.\n+\t(gfc_conv_intrinsic_arith):  Likewise.\n+\t(gfc_conv_intrinsic_dot_product):  Likewise.\n+\t(gfc_conv_intrinsic_minmaxloc):  Likewise.\n+\t(gfc_conv_intrinsic_minmaxval):  Likewise.\n+\t(gfc_conv_intrinsic_array_transfer):  Warn about\n+\tcreation of temporary array.\n+\tAdd where argument to call to gfc_trans_create_temp_array.\n+\t* options.c (gfc_init_options):  Initialize gfc_option.warn_array_temp.\n+\t(gfc_handle_option):  Set gfc_option.warn_array_temp.\n+\n 2008-07-23  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \n \tPR 35058"}, {"sha": "c8afd6623fde135da54d2afe68a99abd6eaadafa", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdfd2ff072c47616e8e34dd99abf00df4cff3e51/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdfd2ff072c47616e8e34dd99abf00df4cff3e51/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=bdfd2ff072c47616e8e34dd99abf00df4cff3e51", "patch": "@@ -1873,6 +1873,7 @@ typedef struct\n   int warn_tabs;\n   int warn_underflow;\n   int warn_character_truncation;\n+  int warn_array_temp;\n   int max_errors;\n \n   int flag_all_intrinsics;"}, {"sha": "df9019c7660e9adcbc66bea8cd89490132250fbe", "filename": "gcc/fortran/invoke.texi", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdfd2ff072c47616e8e34dd99abf00df4cff3e51/gcc%2Ffortran%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdfd2ff072c47616e8e34dd99abf00df4cff3e51/gcc%2Ffortran%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finvoke.texi?ref=bdfd2ff072c47616e8e34dd99abf00df4cff3e51", "patch": "@@ -137,9 +137,9 @@ by type.  Explanations are in the following sections.\n and warnings}.\n @gccoptlist{-fmax-errors=@var{n} @gol\n -fsyntax-only  -pedantic  -pedantic-errors @gol\n--Wall  -Waliasing  -Wampersand  -Wcharacter-truncation  -Wconversion @gol\n--Wimplicit-interface  -Wline-truncation  -Wnonstd-intrinsics  -Wsurprising @gol\n--Wno-tabs  -Wunderflow -Wunused-parameter}\n+-Wall  -Waliasing  -Wampersand  -Warray-bounds -Wcharacter-truncation @gol\n+-Wconversion -Wimplicit-interface  -Wline-truncation  -Wnonstd-intrinsics @gol\n+-Wsurprising -Wno-tabs  -Wunderflow -Wunused-parameter}\n \n @item Debugging Options\n @xref{Debugging Options,,Options for debugging your program or GNU Fortran}.\n@@ -698,6 +698,13 @@ given in a continued character constant, GNU Fortran assumes continuation\n at the first non-comment, non-whitespace character after the ampersand\n that initiated the continuation.\n \n+@item -Warray-temporaries\n+@opindex @code{Warray-temporaries}\n+@cindex warnings, array temporaries\n+Warn about array temporaries generated by the compiler.  The information\n+generated by this warning is sometimes useful in optimization, in order to\n+avoid such temporaries.\n+\n @item -Wcharacter-truncation\n @opindex @code{Wcharacter-truncation}\n @cindex warnings, character truncation"}, {"sha": "468d72cf89d08ef36e2365be8e46ca56f4499479", "filename": "gcc/fortran/lang.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdfd2ff072c47616e8e34dd99abf00df4cff3e51/gcc%2Ffortran%2Flang.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdfd2ff072c47616e8e34dd99abf00df4cff3e51/gcc%2Ffortran%2Flang.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Flang.opt?ref=bdfd2ff072c47616e8e34dd99abf00df4cff3e51", "patch": "@@ -76,6 +76,10 @@ Wampersand\n Fortran Warning\n Warn about missing ampersand in continued character constants\n \n+Warray-temporaries\n+Fortran Warning\n+Warn about creation of array temporaries\n+\n Wcharacter-truncation\n Fortran Warning\n Warn about truncated character expressions"}, {"sha": "ca023a055e0594849ed24f73e30352f632d71d9a", "filename": "gcc/fortran/options.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdfd2ff072c47616e8e34dd99abf00df4cff3e51/gcc%2Ffortran%2Foptions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdfd2ff072c47616e8e34dd99abf00df4cff3e51/gcc%2Ffortran%2Foptions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Foptions.c?ref=bdfd2ff072c47616e8e34dd99abf00df4cff3e51", "patch": "@@ -69,6 +69,7 @@ gfc_init_options (unsigned int argc, const char **argv)\n   gfc_option.warn_aliasing = 0;\n   gfc_option.warn_ampersand = 0;\n   gfc_option.warn_character_truncation = 0;\n+  gfc_option.warn_array_temp = 0;\n   gfc_option.warn_conversion = 0;\n   gfc_option.warn_implicit_interface = 0;\n   gfc_option.warn_line_truncation = 0;\n@@ -485,6 +486,10 @@ gfc_handle_option (size_t scode, const char *arg, int value)\n       gfc_option.warn_ampersand = value;\n       break;\n \n+    case OPT_Warray_temporaries:\n+      gfc_option.warn_array_temp = value;\n+      break;\n+\n     case OPT_Wcharacter_truncation:\n       gfc_option.warn_character_truncation = value;\n       break;"}, {"sha": "9ec8406c4285081581e3531848c406a0ffad0bb8", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 24, "deletions": 11, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdfd2ff072c47616e8e34dd99abf00df4cff3e51/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdfd2ff072c47616e8e34dd99abf00df4cff3e51/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=bdfd2ff072c47616e8e34dd99abf00df4cff3e51", "patch": "@@ -576,7 +576,7 @@ tree\n gfc_trans_create_temp_array (stmtblock_t * pre, stmtblock_t * post,\n \t\t\t     gfc_loopinfo * loop, gfc_ss_info * info,\n \t\t\t     tree eltype, bool dynamic, bool dealloc,\n-\t\t\t     bool callee_alloc)\n+\t\t\t     bool callee_alloc, locus * where)\n {\n   tree type;\n   tree desc;\n@@ -589,6 +589,10 @@ gfc_trans_create_temp_array (stmtblock_t * pre, stmtblock_t * post,\n   int dim;\n \n   gcc_assert (info->dimen > 0);\n+\n+  if (gfc_option.warn_array_temp && where)\n+    gfc_warning (\"Creating array temporary at %L\", where);\n+\n   /* Set the lower bound to zero.  */\n   for (dim = 0; dim < info->dimen; dim++)\n     {\n@@ -1070,7 +1074,7 @@ gfc_trans_array_constructor_subarray (stmtblock_t * pblock,\n \n   /* Initialize the loop.  */\n   gfc_conv_ss_startstride (&loop);\n-  gfc_conv_loop_setup (&loop);\n+  gfc_conv_loop_setup (&loop, &expr->where);\n \n   /* Make sure the constructed array has room for the new data.  */\n   if (dynamic)\n@@ -1683,7 +1687,7 @@ constant_array_constructor_loop_size (gfc_loopinfo * loop)\n    simplest method.  */\n \n static void\n-gfc_trans_array_constructor (gfc_loopinfo * loop, gfc_ss * ss)\n+gfc_trans_array_constructor (gfc_loopinfo * loop, gfc_ss * ss, locus * where)\n {\n   gfc_constructor *c;\n   tree offset;\n@@ -1809,7 +1813,7 @@ gfc_trans_array_constructor (gfc_loopinfo * loop, gfc_ss * ss)\n     loopfrom = NULL_TREE;\n \n   gfc_trans_create_temp_array (&loop->pre, &loop->post, loop, &ss->data.info,\n-\t\t\t       type, dynamic, true, false);\n+\t\t\t       type, dynamic, true, false, where);\n \n   if (loopfrom != NULL_TREE)\n     {\n@@ -1896,7 +1900,8 @@ gfc_set_vector_loop_bounds (gfc_loopinfo * loop, gfc_ss_info * info)\n    but before the actual scalarizing loops.  */\n \n static void\n-gfc_add_loop_ss_code (gfc_loopinfo * loop, gfc_ss * ss, bool subscript)\n+gfc_add_loop_ss_code (gfc_loopinfo * loop, gfc_ss * ss, bool subscript,\n+\t\t      locus * where)\n {\n   gfc_se se;\n   int n;\n@@ -1950,7 +1955,8 @@ gfc_add_loop_ss_code (gfc_loopinfo * loop, gfc_ss * ss, bool subscript)\n \t  /* Add the expressions for scalar and vector subscripts.  */\n \t  for (n = 0; n < GFC_MAX_DIMENSIONS; n++)\n \t    if (ss->data.info.subscript[n])\n-\t      gfc_add_loop_ss_code (loop, ss->data.info.subscript[n], true);\n+\t      gfc_add_loop_ss_code (loop, ss->data.info.subscript[n], true,\n+\t\t\t\t    where);\n \n \t  gfc_set_vector_loop_bounds (loop, &ss->data.info);\n \t  break;\n@@ -1993,7 +1999,7 @@ gfc_add_loop_ss_code (gfc_loopinfo * loop, gfc_ss * ss, bool subscript)\n \t      gfc_add_block_to_block (&loop->pre, &se.pre);\n \t      gfc_add_block_to_block (&loop->post, &se.post);\n \t    }\n-\t  gfc_trans_array_constructor (loop, ss);\n+\t  gfc_trans_array_constructor (loop, ss, where);\n \t  break;\n \n         case GFC_SS_TEMP:\n@@ -3327,7 +3333,7 @@ gfc_conv_resolve_dependencies (gfc_loopinfo * loop, gfc_ss * dest,\n    moved outside the loop.  */\n \n void\n-gfc_conv_loop_setup (gfc_loopinfo * loop)\n+gfc_conv_loop_setup (gfc_loopinfo * loop, locus * where)\n {\n   int n;\n   int dim;\n@@ -3493,7 +3499,7 @@ gfc_conv_loop_setup (gfc_loopinfo * loop)\n   /* Add all the scalar code that can be taken out of the loops.\n      This may include calculating the loop bounds, so do it before\n      allocating the temporary.  */\n-  gfc_add_loop_ss_code (loop, loop->ss, false);\n+  gfc_add_loop_ss_code (loop, loop->ss, false, where);\n \n   /* If we want a temporary then create it.  */\n   if (loop->temp_ss != NULL)\n@@ -3515,7 +3521,7 @@ gfc_conv_loop_setup (gfc_loopinfo * loop)\n       loop->temp_ss->data.info.dimen = n;\n       gfc_trans_create_temp_array (&loop->pre, &loop->post, loop,\n \t\t\t\t   &loop->temp_ss->data.info, tmp, false, true,\n-\t\t\t\t   false);\n+\t\t\t\t   false, where);\n     }\n \n   for (n = 0; n < loop->temp_dim; n++)\n@@ -4299,6 +4305,9 @@ gfc_trans_dummy_array_bias (gfc_symbol * sym, tree tmpdesc, tree body)\n       stmt_unpacked = build_call_expr (gfor_fndecl_in_pack, 1, tmp);\n \n       stride = gfc_index_one_node;\n+\n+      if (gfc_option.warn_array_temp)\n+\tgfc_warning (\"Creating array temporary at %L\", &loc);\n     }\n \n   /* This is for the case where the array data is used directly without\n@@ -4871,7 +4880,7 @@ gfc_conv_expr_descriptor (gfc_se * se, gfc_expr * expr, gfc_ss * ss)\n       gfc_add_ss_to_loop (&loop, loop.temp_ss);\n     }\n \n-  gfc_conv_loop_setup (&loop);\n+  gfc_conv_loop_setup (&loop, & expr->where);\n \n   if (need_tmp)\n     {\n@@ -5219,6 +5228,10 @@ gfc_conv_array_parameter (gfc_se * se, gfc_expr * expr, gfc_ss * ss, int g77)\n     {\n       desc = se->expr;\n       /* Repack the array.  */\n+\n+      if (gfc_option.warn_array_temp)\n+\tgfc_warning (\"Creating array temporary at %L\", &expr->where);\n+\n       ptr = build_call_expr (gfor_fndecl_in_pack, 1, desc);\n       ptr = gfc_evaluate_now (ptr, &se->pre);\n       se->expr = ptr;"}, {"sha": "1e34c9a9f28600362c80e50f85b3a86e3a4bd2b4", "filename": "gcc/fortran/trans-array.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdfd2ff072c47616e8e34dd99abf00df4cff3e51/gcc%2Ffortran%2Ftrans-array.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdfd2ff072c47616e8e34dd99abf00df4cff3e51/gcc%2Ffortran%2Ftrans-array.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.h?ref=bdfd2ff072c47616e8e34dd99abf00df4cff3e51", "patch": "@@ -32,7 +32,8 @@ void gfc_set_loop_bounds_from_array_spec (gfc_interface_mapping *,\n \n /* Generate code to create a temporary array.  */\n tree gfc_trans_create_temp_array (stmtblock_t *, stmtblock_t *, gfc_loopinfo *,\n-                                  gfc_ss_info *, tree, bool, bool, bool);\n+                                  gfc_ss_info *, tree, bool, bool, bool,\n+\t\t\t\t  locus *);\n \n /* Generate function entry code for allocation of compiler allocated array\n    variables.  */\n@@ -88,7 +89,7 @@ void gfc_trans_scalarizing_loops (gfc_loopinfo *, stmtblock_t *);\n /* Mark the end of the main loop body and the start of the copying loop.  */\n void gfc_trans_scalarized_loop_boundary (gfc_loopinfo *, stmtblock_t *);\n /* Initialize the scalarization loop parameters.  */\n-void gfc_conv_loop_setup (gfc_loopinfo *);\n+void gfc_conv_loop_setup (gfc_loopinfo *, locus *);\n /* Resolve array assignment dependencies.  */\n void gfc_conv_resolve_dependencies (gfc_loopinfo *, gfc_ss *, gfc_ss *);\n /* Build a null array descriptor constructor.  */"}, {"sha": "3240d7f678c9627d107b5193244a11461d2d8284", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdfd2ff072c47616e8e34dd99abf00df4cff3e51/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdfd2ff072c47616e8e34dd99abf00df4cff3e51/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=bdfd2ff072c47616e8e34dd99abf00df4cff3e51", "patch": "@@ -2059,7 +2059,7 @@ gfc_conv_subref_array_arg (gfc_se * parmse, gfc_expr * expr,\n   gfc_add_ss_to_loop (&loop, loop.temp_ss);\n \n   /* Setup the scalarizing loops.  */\n-  gfc_conv_loop_setup (&loop);\n+  gfc_conv_loop_setup (&loop, &expr->where);\n \n   /* Pass the temporary descriptor back to the caller.  */\n   info = &loop.temp_ss->data.info;\n@@ -2124,7 +2124,7 @@ gfc_conv_subref_array_arg (gfc_se * parmse, gfc_expr * expr,\n   gfc_conv_ss_startstride (&loop2);\n \n   /* Setup the scalarizing loops.  */\n-  gfc_conv_loop_setup (&loop2);\n+  gfc_conv_loop_setup (&loop2, &expr->where);\n \n   gfc_copy_loopinfo_to_se (&lse, &loop2);\n   gfc_copy_loopinfo_to_se (&rse, &loop2);\n@@ -2717,7 +2717,8 @@ gfc_conv_function_call (gfc_se * se, gfc_symbol * sym,\n \t     mustn't be deallocated.  */\n \t  callee_alloc = sym->attr.allocatable || sym->attr.pointer;\n \t  gfc_trans_create_temp_array (&se->pre, &se->post, se->loop, info, tmp,\n-\t\t\t\t       false, !sym->attr.pointer, callee_alloc);\n+\t\t\t\t       false, !sym->attr.pointer, callee_alloc,\n+\t\t\t\t       &se->ss->expr->where);\n \n \t  /* Pass the temporary as the first argument.  */\n \t  tmp = info->descriptor;\n@@ -3335,7 +3336,7 @@ gfc_trans_subarray_assign (tree dest, gfc_component * cm, gfc_expr * expr)\n   gfc_conv_ss_startstride (&loop);\n \n   /* Setup the scalarizing loops.  */\n-  gfc_conv_loop_setup (&loop);\n+  gfc_conv_loop_setup (&loop, &expr->where);\n \n   /* Setup the gfc_se structures.  */\n   gfc_copy_loopinfo_to_se (&lse, &loop);\n@@ -4415,7 +4416,7 @@ gfc_trans_assignment_1 (gfc_expr * expr1, gfc_expr * expr2, bool init_flag)\n       /* Resolve any data dependencies in the statement.  */\n       gfc_conv_resolve_dependencies (&loop, lss, rss);\n       /* Setup the scalarizing loops.  */\n-      gfc_conv_loop_setup (&loop);\n+      gfc_conv_loop_setup (&loop, &expr2->where);\n \n       /* Setup the gfc_se structures.  */\n       gfc_copy_loopinfo_to_se (&lse, &loop);"}, {"sha": "b76dd76ce9cc81a98e60a1cd530f30949263908d", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdfd2ff072c47616e8e34dd99abf00df4cff3e51/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdfd2ff072c47616e8e34dd99abf00df4cff3e51/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=bdfd2ff072c47616e8e34dd99abf00df4cff3e51", "patch": "@@ -1731,7 +1731,7 @@ gfc_conv_intrinsic_anyall (gfc_se * se, gfc_expr * expr, int op)\n \n   /* Initialize the loop.  */\n   gfc_conv_ss_startstride (&loop);\n-  gfc_conv_loop_setup (&loop);\n+  gfc_conv_loop_setup (&loop, &expr->where);\n \n   gfc_mark_ss_chain_used (arrayss, 1);\n   /* Generate the loop body.  */\n@@ -1813,7 +1813,7 @@ gfc_conv_intrinsic_count (gfc_se * se, gfc_expr * expr)\n \n   /* Initialize the loop.  */\n   gfc_conv_ss_startstride (&loop);\n-  gfc_conv_loop_setup (&loop);\n+  gfc_conv_loop_setup (&loop, &expr->where);\n \n   gfc_mark_ss_chain_used (arrayss, 1);\n   /* Generate the loop body.  */\n@@ -1901,7 +1901,7 @@ gfc_conv_intrinsic_arith (gfc_se * se, gfc_expr * expr, int op)\n \n   /* Initialize the loop.  */\n   gfc_conv_ss_startstride (&loop);\n-  gfc_conv_loop_setup (&loop);\n+  gfc_conv_loop_setup (&loop, &expr->where);\n \n   gfc_mark_ss_chain_used (arrayss, 1);\n   if (maskss)\n@@ -2019,7 +2019,7 @@ gfc_conv_intrinsic_dot_product (gfc_se * se, gfc_expr * expr)\n \n   /* Initialize the loop.  */\n   gfc_conv_ss_startstride (&loop);\n-  gfc_conv_loop_setup (&loop);\n+  gfc_conv_loop_setup (&loop, &expr->where);\n \n   gfc_mark_ss_chain_used (arrayss1, 1);\n   gfc_mark_ss_chain_used (arrayss2, 1);\n@@ -2159,7 +2159,7 @@ gfc_conv_intrinsic_minmaxloc (gfc_se * se, gfc_expr * expr, int op)\n \n   /* Initialize the loop.  */\n   gfc_conv_ss_startstride (&loop);\n-  gfc_conv_loop_setup (&loop);\n+  gfc_conv_loop_setup (&loop, &expr->where);\n \n   gcc_assert (loop.dimen == 1);\n \n@@ -2355,7 +2355,7 @@ gfc_conv_intrinsic_minmaxval (gfc_se * se, gfc_expr * expr, int op)\n \n   /* Initialize the loop.  */\n   gfc_conv_ss_startstride (&loop);\n-  gfc_conv_loop_setup (&loop);\n+  gfc_conv_loop_setup (&loop, &expr->where);\n \n   gfc_mark_ss_chain_used (arrayss, 1);\n   if (maskss)\n@@ -3434,6 +3434,10 @@ gfc_conv_intrinsic_array_transfer (gfc_se * se, gfc_expr * expr)\n \t      && arg->expr->ref->u.ar.type == AR_FULL))\n \t{\n \t  tmp = build_fold_addr_expr (argse.expr);\n+\n+\t  if (gfc_option.warn_array_temp)\n+\t    gfc_warning (\"Creating array temporary at %L\", &expr->where);\n+\n \t  source = build_call_expr (gfor_fndecl_in_pack, 1, tmp);\n \t  source = gfc_evaluate_now (source, &argse.pre);\n \n@@ -3587,7 +3591,8 @@ gfc_conv_intrinsic_array_transfer (gfc_se * se, gfc_expr * expr)\n      FIXME callee_alloc is not set!  */\n \n   gfc_trans_create_temp_array (&se->pre, &se->post, se->loop,\n-\t\t\t       info, mold_type, false, true, false);\n+\t\t\t       info, mold_type, false, true, false,\n+\t\t\t       &expr->where);\n \n   /* Cast the pointer to the result.  */\n   tmp = gfc_conv_descriptor_data_get (info->descriptor);"}, {"sha": "7f98e5c7c719e20bea479e431dbf7db7e53d3392", "filename": "gcc/fortran/trans-io.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdfd2ff072c47616e8e34dd99abf00df4cff3e51/gcc%2Ffortran%2Ftrans-io.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdfd2ff072c47616e8e34dd99abf00df4cff3e51/gcc%2Ffortran%2Ftrans-io.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-io.c?ref=bdfd2ff072c47616e8e34dd99abf00df4cff3e51", "patch": "@@ -1900,7 +1900,7 @@ transfer_expr (gfc_se * se, gfc_typespec * ts, tree addr_expr, gfc_code * code);\n    recursive.  */\n \n static tree\n-transfer_array_component (tree expr, gfc_component * cm)\n+transfer_array_component (tree expr, gfc_component * cm, locus * where)\n {\n   tree tmp;\n   stmtblock_t body;\n@@ -1944,7 +1944,7 @@ transfer_array_component (tree expr, gfc_component * cm)\n   gfc_init_loopinfo (&loop);\n   gfc_add_ss_to_loop (&loop, ss);\n   gfc_conv_ss_startstride (&loop);\n-  gfc_conv_loop_setup (&loop);\n+  gfc_conv_loop_setup (&loop, where);\n   gfc_mark_ss_chain_used (ss, 1);\n   gfc_start_scalarized_body (&loop, &body);\n \n@@ -2089,7 +2089,7 @@ transfer_expr (gfc_se * se, gfc_typespec * ts, tree addr_expr, gfc_code * code)\n \n           if (c->dimension)\n             {\n-              tmp = transfer_array_component (tmp, c);\n+              tmp = transfer_array_component (tmp, c, & code->loc);\n               gfc_add_expr_to_block (&se->pre, tmp);\n             }\n           else\n@@ -2213,7 +2213,7 @@ gfc_trans_transfer (gfc_code * code)\n \n       /* Initialize the loop.  */\n       gfc_conv_ss_startstride (&loop);\n-      gfc_conv_loop_setup (&loop);\n+      gfc_conv_loop_setup (&loop, &code->expr->where);\n \n       /* The main loop body.  */\n       gfc_mark_ss_chain_used (ss, 1);"}, {"sha": "e19695fdade33d61833cfafa504578f16b186c31", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdfd2ff072c47616e8e34dd99abf00df4cff3e51/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdfd2ff072c47616e8e34dd99abf00df4cff3e51/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=bdfd2ff072c47616e8e34dd99abf00df4cff3e51", "patch": "@@ -269,7 +269,8 @@ gfc_conv_elemental_dependencies (gfc_se * se, gfc_se * loopse,\n \t  tmp = gfc_typenode_for_spec (&e->ts);\n \t  tmp = gfc_trans_create_temp_array (&se->pre, &se->post,\n \t\t\t\t\t      &tmp_loop, info, tmp,\n-\t\t\t\t\t      false, true, false);\n+\t\t\t\t\t      false, true, false,\n+\t\t\t\t\t     & arg->expr->where);\n \t  gfc_add_modify_expr (&se->pre, size, tmp);\n \t  tmp = fold_convert (pvoid_type_node, info->data);\n \t  gfc_add_modify_expr (&se->pre, data, tmp);\n@@ -375,7 +376,7 @@ gfc_trans_call (gfc_code * code, bool dependency_check)\n       gfc_add_ss_to_loop (&loop, ss);\n \n       gfc_conv_ss_startstride (&loop);\n-      gfc_conv_loop_setup (&loop);\n+      gfc_conv_loop_setup (&loop, &code->expr->where);\n       gfc_mark_ss_chain_used (ss, 1);\n \n       /* Convert the arguments, checking for dependencies.  */\n@@ -1977,7 +1978,7 @@ generate_loop_for_temp_to_lhs (gfc_expr *expr, tree tmp1, tree count3,\n       /* Calculate the bounds of the scalarization.  */\n       gfc_conv_ss_startstride (&loop1);\n       /* Setup the scalarizing loops.  */\n-      gfc_conv_loop_setup (&loop1);\n+      gfc_conv_loop_setup (&loop1, &expr->where);\n \n       gfc_mark_ss_chain_used (lss, 1);\n \n@@ -2075,7 +2076,7 @@ generate_loop_for_rhs_to_temp (gfc_expr *expr2, tree tmp1, tree count3,\n       gfc_add_ss_to_loop (&loop, rss);\n \n       gfc_conv_ss_startstride (&loop);\n-      gfc_conv_loop_setup (&loop);\n+      gfc_conv_loop_setup (&loop, &expr2->where);\n \n       gfc_mark_ss_chain_used (rss, 1);\n       /* Start the loop body.  */\n@@ -2197,7 +2198,7 @@ compute_inner_temp_size (gfc_expr *expr1, gfc_expr *expr2,\n       flag_bounds_check = 0;\n       gfc_conv_ss_startstride (&loop);\n       flag_bounds_check = save_flag;\n-      gfc_conv_loop_setup (&loop);\n+      gfc_conv_loop_setup (&loop, &expr2->where);\n \n       /* Figure out how many elements we need.  */\n       for (i = 0; i < loop.dimen; i++)\n@@ -2538,7 +2539,7 @@ gfc_trans_pointer_assign_need_temp (gfc_expr * expr1, gfc_expr * expr2,\n       /* Setup the scalarizing loops and bounds.  */\n       gfc_conv_ss_startstride (&loop);\n \n-      gfc_conv_loop_setup (&loop);\n+      gfc_conv_loop_setup (&loop, &expr2->where);\n \n       info = &rss->data.info;\n       desc = info->descriptor;\n@@ -3019,7 +3020,7 @@ gfc_evaluate_where_mask (gfc_expr * me, forall_info * nested_forall_info,\n       gfc_add_ss_to_loop (&loop, rss);\n \n       gfc_conv_ss_startstride (&loop);\n-      gfc_conv_loop_setup (&loop);\n+      gfc_conv_loop_setup (&loop, &me->where);\n \n       gfc_mark_ss_chain_used (rss, 1);\n       /* Start the loop body.  */\n@@ -3186,7 +3187,7 @@ gfc_trans_where_assign (gfc_expr *expr1, gfc_expr *expr2,\n   gfc_conv_resolve_dependencies (&loop, lss_section, rss);\n \n   /* Setup the scalarizing loops.  */\n-  gfc_conv_loop_setup (&loop);\n+  gfc_conv_loop_setup (&loop, &expr2->where);\n \n   /* Setup the gfc_se structures.  */\n   gfc_copy_loopinfo_to_se (&lse, &loop);\n@@ -3634,7 +3635,7 @@ gfc_trans_where_3 (gfc_code * cblock, gfc_code * eblock)\n     }\n \n   gfc_conv_ss_startstride (&loop);\n-  gfc_conv_loop_setup (&loop);\n+  gfc_conv_loop_setup (&loop, &tdst->where);\n \n   gfc_mark_ss_chain_used (css, 1);\n   gfc_mark_ss_chain_used (tdss, 1);"}, {"sha": "5fb8ff609c63963231bf98e412fb663928beb89c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdfd2ff072c47616e8e34dd99abf00df4cff3e51/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdfd2ff072c47616e8e34dd99abf00df4cff3e51/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bdfd2ff072c47616e8e34dd99abf00df4cff3e51", "patch": "@@ -1,3 +1,8 @@\n+2008-07-24  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/29952\n+\t* gfortran.dg/array_temporaries_1.f90: New test case.\n+\n 2008-07-23  Ian Lance Taylor  <iant@google.com>\n \n \t* gcc.target/i386/20080723-1.c: New test."}, {"sha": "64fc59046f48a5a2db4c1bf527b004949153891d", "filename": "gcc/testsuite/gfortran.dg/array_temporaries_1.f90", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdfd2ff072c47616e8e34dd99abf00df4cff3e51/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_temporaries_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdfd2ff072c47616e8e34dd99abf00df4cff3e51/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_temporaries_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_temporaries_1.f90?ref=bdfd2ff072c47616e8e34dd99abf00df4cff3e51", "patch": "@@ -0,0 +1,19 @@\n+! { dg-do compile }\n+! { dg-options \"-Warray-temporaries\" }\n+\n+subroutine bar(a)\n+  real, dimension(2) :: a\n+end\n+\n+program main\n+  integer, parameter :: n=3\n+  integer :: i\n+  real, dimension(n) :: a, b\n+\n+  a = 0.2\n+  i = 2\n+  a(i:i+1) = a(1:2) ! { dg-warning \"Creating array temporary\" }\n+  a = cshift(a,1) ! { dg-warning \"Creating array temporary\" }\n+  b = cshift(a,1) \n+  call bar(a(1:3:2)) ! { dg-warning \"Creating array temporary\" }\n+end program main"}]}