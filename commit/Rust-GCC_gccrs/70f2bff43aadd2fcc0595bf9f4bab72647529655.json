{"sha": "70f2bff43aadd2fcc0595bf9f4bab72647529655", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzBmMmJmZjQzYWFkZDJmY2MwNTk1YmY5ZjRiYWI3MjY0NzUyOTY1NQ==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2021-04-14T21:57:15Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2021-04-16T14:58:52Z"}, "message": "c++: ICE with bogus late return type [PR99803]\n\nHere we ICE when compiling this code in C++20, because we're trying to\nslam a 'typename' after the ->.  The cp_parser_template_id call just\nbefore the spot I'm changing parsed A::template A<int> as a BASELINK\nthat contains a constructor, but make_typename_type crashes on that.\n\nThis patch makes make_typename_type more robust instead of checking\nfor is_overloaded_fn prior calling it.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/99803\n\t* decl.c (make_typename_type): Give an error and return when\n\tname is is_overloaded_fn.\n\t* parser.c (cp_parser_class_name): Don't check is_overloaded_fn\n\tbefore calling make_typename_type.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/99803\n\t* g++.dg/cpp2a/typename14.C: Don't expect particular error\n\tmessages.\n\t* g++.dg/cpp2a/typename19.C: New test.", "tree": {"sha": "f2beeb4a289650d3fa2f2a4894da3bdb6d2a9448", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f2beeb4a289650d3fa2f2a4894da3bdb6d2a9448"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/70f2bff43aadd2fcc0595bf9f4bab72647529655", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70f2bff43aadd2fcc0595bf9f4bab72647529655", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70f2bff43aadd2fcc0595bf9f4bab72647529655", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70f2bff43aadd2fcc0595bf9f4bab72647529655/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb8c931e0dbf1d7d9bc1279cab68a963e8f3c299", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb8c931e0dbf1d7d9bc1279cab68a963e8f3c299", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb8c931e0dbf1d7d9bc1279cab68a963e8f3c299"}], "stats": {"total": 21, "additions": 15, "deletions": 6}, "files": [{"sha": "942eb318f2c155c4796e1a91b6c7eca1deffba15", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70f2bff43aadd2fcc0595bf9f4bab72647529655/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70f2bff43aadd2fcc0595bf9f4bab72647529655/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=70f2bff43aadd2fcc0595bf9f4bab72647529655", "patch": "@@ -4055,6 +4055,12 @@ make_typename_type (tree context, tree name, enum tag_types tag_type,\n \terror (\"%qD used without template arguments\", name);\n       return error_mark_node;\n     }\n+  else if (is_overloaded_fn (name))\n+    {\n+      if (complain & tf_error)\n+\terror (\"%qD is a function, not a type\", name);\n+      return error_mark_node;\n+    }\n   gcc_assert (identifier_p (name));\n   gcc_assert (TYPE_P (context));\n \n@@ -4066,7 +4072,7 @@ make_typename_type (tree context, tree name, enum tag_types tag_type,\n \terror (\"%q#T is not a class\", context);\n       return error_mark_node;\n     }\n-  \n+\n   /* When the CONTEXT is a dependent type,  NAME could refer to a\n      dependent base class of CONTEXT.  But look inside it anyway\n      if CONTEXT is a currently open scope, in case it refers to a"}, {"sha": "99eccf0c5e4396b86c3a6c29c93648dc4b3e8bc0", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70f2bff43aadd2fcc0595bf9f4bab72647529655/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70f2bff43aadd2fcc0595bf9f4bab72647529655/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=70f2bff43aadd2fcc0595bf9f4bab72647529655", "patch": "@@ -24730,9 +24730,7 @@ cp_parser_class_name (cp_parser *parser,\n   decl = cp_parser_maybe_treat_template_as_class (decl, class_head_p);\n \n   /* If this is a typename, create a TYPENAME_TYPE.  */\n-  if (typename_p\n-      && decl != error_mark_node\n-      && !is_overloaded_fn (decl))\n+  if (typename_p && decl != error_mark_node)\n     {\n       decl = make_typename_type (scope, decl, typename_type,\n \t\t\t\t /*complain=*/tf_error);"}, {"sha": "ba7dad8245f07cc3ada4856c8dad5a02846467cf", "filename": "gcc/testsuite/g++.dg/cpp2a/typename14.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70f2bff43aadd2fcc0595bf9f4bab72647529655/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ftypename14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70f2bff43aadd2fcc0595bf9f4bab72647529655/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ftypename14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ftypename14.C?ref=70f2bff43aadd2fcc0595bf9f4bab72647529655", "patch": "@@ -8,7 +8,7 @@ template<typename> struct A\n \n template<typename T>\n template<typename U>\n-A<T>::A<U> () // { dg-error \"partial specialization\" }\n+A<T>::A<U> () // { dg-error \"\" }\n {\n }\n \n@@ -19,7 +19,7 @@ template<typename> struct B\n \n template<typename T>\n template<typename U>\n-B<T>::foo<int>(int) // { dg-error \"partial specialization|declaration\" }\n+B<T>::foo<int>(int) // { dg-error \"\" }\n {\n   return 1;\n }"}, {"sha": "320a14d6a0c8ad6973392106e1b8367f99814d53", "filename": "gcc/testsuite/g++.dg/cpp2a/typename19.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70f2bff43aadd2fcc0595bf9f4bab72647529655/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ftypename19.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70f2bff43aadd2fcc0595bf9f4bab72647529655/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ftypename19.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ftypename19.C?ref=70f2bff43aadd2fcc0595bf9f4bab72647529655", "patch": "@@ -0,0 +1,5 @@\n+// PR c++/99803\n+// { dg-do compile { target c++20 } }\n+\n+struct A { template<typename T> A(T); };\n+auto A(unsigned) -> A::template A<int>; // { dg-error \"not a type\" }"}]}