{"sha": "3c04502e2b0443114b2057dd2383308b3078cf7c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2MwNDUwMmUyYjA0NDMxMTRiMjA1N2RkMjM4MzMwOGIzMDc4Y2Y3Yw==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2001-05-06T19:47:15Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2001-05-06T19:47:15Z"}, "message": "optabs.c (expand_binop): Sign-extend xop0 and xop1 from the widest mode in narrowing and widening operations.\n\n* optabs.c (expand_binop): Sign-extend xop0 and xop1 from the\nwidest mode in narrowing and widening operations.\n\nFrom-SVN: r41885", "tree": {"sha": "f51487f0e2aa2816e161b63bfa5e94383466bc0d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f51487f0e2aa2816e161b63bfa5e94383466bc0d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c04502e2b0443114b2057dd2383308b3078cf7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c04502e2b0443114b2057dd2383308b3078cf7c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c04502e2b0443114b2057dd2383308b3078cf7c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c04502e2b0443114b2057dd2383308b3078cf7c/comments", "author": null, "committer": null, "parents": [{"sha": "7cbdf5753752f1c995114ac0b7f9071840458d88", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cbdf5753752f1c995114ac0b7f9071840458d88", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7cbdf5753752f1c995114ac0b7f9071840458d88"}], "stats": {"total": 15, "additions": 14, "deletions": 1}, "files": [{"sha": "9074e177d29e2d13d2a4c5b746163550089f4493", "filename": "gcc/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c04502e2b0443114b2057dd2383308b3078cf7c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c04502e2b0443114b2057dd2383308b3078cf7c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3c04502e2b0443114b2057dd2383308b3078cf7c", "patch": "@@ -1,5 +1,8 @@\n 2001-05-06  Alexandre Oliva  <aoliva@redhat.com>\n \n+\t* optabs.c (expand_binop): Sign-extend xop0 and xop1 from the\n+\twidest mode in narrowing and widening operations.\n+\n \t* config/mips/mips.md: Sign extend CONST_INTs.\n \n 2001-05-06  Andreas Jaeger  <aj@suse.de>"}, {"sha": "c6da81592fda9b265f5c9d42830142d709a2d06c", "filename": "gcc/optabs.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c04502e2b0443114b2057dd2383308b3078cf7c/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c04502e2b0443114b2057dd2383308b3078cf7c/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=3c04502e2b0443114b2057dd2383308b3078cf7c", "patch": "@@ -725,13 +725,20 @@ expand_binop (mode, binoptab, op0, op1, target, unsignedp, methods)\n       /* In case the insn wants input operands in modes different from\n \t the result, convert the operands.  It would seem that we\n \t don't need to convert CONST_INTs, but we do, so that they're\n-\t a properly sign-extended for their modes.  */\n+\t a properly sign-extended for their modes; we choose the\n+\t widest mode between mode and mode[01], so that, in a widening\n+\t operation, we call convert_modes with different FROM and TO\n+\t modes, which ensures the value is sign-extended.  Shift\n+\t operations are an exception, because the second operand needs\n+\t not be extended to the mode of the result.  */\n \n       if (GET_MODE (op0) != mode0\n \t  && mode0 != VOIDmode)\n \txop0 = convert_modes (mode0,\n \t\t\t      GET_MODE (op0) != VOIDmode\n \t\t\t      ? GET_MODE (op0)\n+\t\t\t      : GET_MODE_SIZE (mode) > GET_MODE_SIZE (mode0)\n+\t\t\t      ? mode\n \t\t\t      : mode0,\n \t\t\t      xop0, unsignedp);\n \n@@ -740,6 +747,9 @@ expand_binop (mode, binoptab, op0, op1, target, unsignedp, methods)\n \txop1 = convert_modes (mode1,\n \t\t\t      GET_MODE (op1) != VOIDmode\n \t\t\t      ? GET_MODE (op1)\n+\t\t\t      : (GET_MODE_SIZE (mode) > GET_MODE_SIZE (mode1)\n+\t\t\t\t && ! shift_op)\n+\t\t\t      ? mode\n \t\t\t      : mode1,\n \t\t\t      xop1, unsignedp);\n "}]}