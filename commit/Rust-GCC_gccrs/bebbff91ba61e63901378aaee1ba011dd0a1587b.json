{"sha": "bebbff91ba61e63901378aaee1ba011dd0a1587b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmViYmZmOTFiYTYxZTYzOTAxMzc4YWFlZTFiYTAxMWRkMGExNTg3Yg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2004-11-19T10:55:09Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2004-11-19T10:55:09Z"}, "message": "a-stmaco.ads, [...]: Minor reformatting througout (including new function specs) Add ??? comments...\n\n\t* a-stmaco.ads, exp_util.ads, exp_util.adb, i-cpp.ads, i-cpp.adb:\n\tMinor reformatting througout (including new function specs)\n\tAdd ??? comments asking for clarification.\n\nFrom-SVN: r90901", "tree": {"sha": "705d0c03d0e8dd8480aa77c15e216d9ffa4f0325", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/705d0c03d0e8dd8480aa77c15e216d9ffa4f0325"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bebbff91ba61e63901378aaee1ba011dd0a1587b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bebbff91ba61e63901378aaee1ba011dd0a1587b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bebbff91ba61e63901378aaee1ba011dd0a1587b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bebbff91ba61e63901378aaee1ba011dd0a1587b/comments", "author": null, "committer": null, "parents": [{"sha": "ee57599295edea9f7edd73768deab9cc526dc505", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee57599295edea9f7edd73768deab9cc526dc505", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee57599295edea9f7edd73768deab9cc526dc505"}], "stats": {"total": 172, "additions": 74, "deletions": 98}, "files": [{"sha": "07c8ce14f2ce791c2a0f3c70f80307ca7affb22f", "filename": "gcc/ada/a-stmaco.ads", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bebbff91ba61e63901378aaee1ba011dd0a1587b/gcc%2Fada%2Fa-stmaco.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bebbff91ba61e63901378aaee1ba011dd0a1587b/gcc%2Fada%2Fa-stmaco.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-stmaco.ads?ref=bebbff91ba61e63901378aaee1ba011dd0a1587b", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2001 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2004 Free Software Foundation, Inc.          --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -70,7 +70,7 @@ private\n       others                                           => False);\n \n    Graphic_Set               : constant Character_Set :=\n-     (L.Space                  ..  L.Tilde             => True,\n+     (L.Space                ..  L.Tilde               => True,\n       L.No_Break_Space       ..  L.LC_Y_Diaeresis      => True,\n       others                                           => False);\n \n@@ -107,7 +107,7 @@ private\n       others                                           => False);\n \n    Decimal_Digit_Set         : constant Character_Set :=\n-     ('0'                  ..  '9'                     => True,\n+     ('0'                    ..  '9'                   => True,\n       others                                           => False);\n \n    Hexadecimal_Digit_Set     : constant Character_Set :="}, {"sha": "25522c4b5091a78fa8a143b89c3b5633039030c9", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 44, "deletions": 61, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bebbff91ba61e63901378aaee1ba011dd0a1587b/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bebbff91ba61e63901378aaee1ba011dd0a1587b/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=bebbff91ba61e63901378aaee1ba011dd0a1587b", "patch": "@@ -68,8 +68,7 @@ package body Exp_Util is\n      (Loc    : Source_Ptr;\n       Id_Ref : Node_Id;\n       A_Type : Entity_Id;\n-      Dyn    : Boolean := False)\n-      return   Node_Id;\n+      Dyn    : Boolean := False) return Node_Id;\n    --  Build function to generate the image string for a task that is an\n    --  array component, concatenating the images of each index. To avoid\n    --  storage leaks, the string is built with successive slice assignments.\n@@ -81,8 +80,7 @@ package body Exp_Util is\n      (Loc   : Source_Ptr;\n       Decls : List_Id;\n       Stats : List_Id;\n-      Res   : Entity_Id)\n-      return  Node_Id;\n+      Res   : Entity_Id) return Node_Id;\n    --  Common processing for Task_Array_Image and Task_Record_Image.\n    --  Build function body that computes image.\n \n@@ -101,18 +99,16 @@ package body Exp_Util is\n    function Build_Task_Record_Image\n      (Loc    : Source_Ptr;\n       Id_Ref : Node_Id;\n-      Dyn    : Boolean := False)\n-      return   Node_Id;\n+      Dyn    : Boolean := False) return Node_Id;\n    --  Build function to generate the image string for a task that is a\n    --  record component. Concatenate name of variable with that of selector.\n    --  The flag Dyn indicates whether this is called for the initialization\n    --  procedure of record with task components, or for a dynamically\n    --  created task that is assigned to a selected component.\n \n    function Make_CW_Equivalent_Type\n-     (T    : Entity_Id;\n-      E    : Node_Id)\n-      return Entity_Id;\n+     (T : Entity_Id;\n+      E : Node_Id) return Entity_Id;\n    --  T is a class-wide type entity, E is the initial expression node that\n    --  constrains T in case such as: \" X: T := E\" or \"new T'(E)\"\n    --  This function returns the entity of the Equivalent type and inserts\n@@ -128,18 +124,16 @@ package body Exp_Util is\n \n    function Make_Literal_Range\n      (Loc         : Source_Ptr;\n-      Literal_Typ : Entity_Id)\n-      return        Node_Id;\n+      Literal_Typ : Entity_Id) return Node_Id;\n    --  Produce a Range node whose bounds are:\n    --    Low_Bound (Literal_Type) ..\n    --        Low_Bound (Literal_Type) + Length (Literal_Typ) - 1\n    --  this is used for expanding declarations like X : String := \"sdfgdfg\";\n \n    function New_Class_Wide_Subtype\n      (CW_Typ : Entity_Id;\n-      N      : Node_Id)\n-      return   Entity_Id;\n-   --  Create an implicit subtype of CW_Typ attached to node N.\n+      N      : Node_Id) return Entity_Id;\n+   --  Create an implicit subtype of CW_Typ attached to node N\n \n    ----------------------\n    -- Adjust_Condition --\n@@ -376,14 +370,13 @@ package body Exp_Util is\n      (Loc    : Source_Ptr;\n       Id_Ref : Node_Id;\n       A_Type : Entity_Id;\n-      Dyn    : Boolean := False)\n-      return   Node_Id\n+      Dyn    : Boolean := False) return Node_Id\n    is\n       Dims : constant Nat := Number_Dimensions (A_Type);\n-      --  Number of dimensions for array of tasks.\n+      --  Number of dimensions for array of tasks\n \n       Temps : array (1 .. Dims) of Entity_Id;\n-      --  Array of temporaries to hold string for each index.\n+      --  Array of temporaries to hold string for each index\n \n       Indx : Node_Id;\n       --  Index expression\n@@ -425,7 +418,8 @@ package body Exp_Util is\n              Defining_Identifier => Pref,\n              Object_Definition => New_Occurrence_Of (Standard_String, Loc),\n              Expression =>\n-               Make_String_Literal (Loc, Strval => String_From_Name_Buffer)));\n+               Make_String_Literal (Loc,\n+                 Strval => String_From_Name_Buffer)));\n \n       else\n          Append_To (Decls,\n@@ -588,8 +582,7 @@ package body Exp_Util is\n    function Build_Task_Image_Decls\n      (Loc    : Source_Ptr;\n       Id_Ref : Node_Id;\n-      A_Type : Entity_Id)\n-      return   List_Id\n+      A_Type : Entity_Id) return List_Id\n    is\n       Decls  : constant List_Id   := New_List;\n       T_Id   : Entity_Id := Empty;\n@@ -617,8 +610,8 @@ package body Exp_Util is\n                Defining_Identifier => T_Id,\n                Object_Definition => New_Occurrence_Of (Standard_String, Loc),\n                Expression =>\n-                 Make_String_Literal\n-                   (Loc, Strval => String_From_Name_Buffer)));\n+                 Make_String_Literal (Loc,\n+                   Strval => String_From_Name_Buffer)));\n \n       else\n          if Nkind (Id_Ref) = N_Identifier\n@@ -635,8 +628,9 @@ package body Exp_Util is\n \n             Get_Name_String (Chars (Id_Ref));\n \n-            Expr := Make_String_Literal\n-              (Loc, Strval => String_From_Name_Buffer);\n+            Expr :=\n+              Make_String_Literal (Loc,\n+                Strval => String_From_Name_Buffer);\n \n          elsif Nkind (Id_Ref) = N_Selected_Component then\n             T_Id :=\n@@ -677,8 +671,7 @@ package body Exp_Util is\n      (Loc   : Source_Ptr;\n       Decls : List_Id;\n       Stats : List_Id;\n-      Res   : Entity_Id)\n-      return  Node_Id\n+      Res   : Entity_Id) return Node_Id\n    is\n       Spec : Node_Id;\n \n@@ -791,8 +784,7 @@ package body Exp_Util is\n    function Build_Task_Record_Image\n      (Loc    : Source_Ptr;\n       Id_Ref : Node_Id;\n-      Dyn    : Boolean := False)\n-      return   Node_Id\n+      Dyn    : Boolean := False) return Node_Id\n    is\n       Len : Entity_Id;\n       --  Total length of generated name\n@@ -807,7 +799,7 @@ package body Exp_Util is\n       --  Name of enclosing variable, prefix of resulting name\n \n       Sum : Node_Id;\n-      --  Expression to compute total size of string.\n+      --  Expression to compute total size of string\n \n       Sel : Entity_Id;\n       --  Entity for selector name\n@@ -828,7 +820,8 @@ package body Exp_Util is\n              Defining_Identifier => Pref,\n              Object_Definition => New_Occurrence_Of (Standard_String, Loc),\n              Expression =>\n-               Make_String_Literal (Loc, Strval => String_From_Name_Buffer)));\n+               Make_String_Literal (Loc,\n+                 Strval => String_From_Name_Buffer)));\n \n       else\n          Append_To (Decls,\n@@ -847,7 +840,8 @@ package body Exp_Util is\n            Defining_Identifier => Sel,\n            Object_Definition => New_Occurrence_Of (Standard_String, Loc),\n            Expression =>\n-              Make_String_Literal (Loc, Strval => String_From_Name_Buffer)));\n+             Make_String_Literal (Loc,\n+               Strval => String_From_Name_Buffer)));\n \n       Sum := Make_Integer_Literal (Loc, Nat (Name_Len + 1));\n \n@@ -1010,8 +1004,7 @@ package body Exp_Util is\n \n    function Duplicate_Subexpr\n      (Exp      : Node_Id;\n-      Name_Req : Boolean := False)\n-      return     Node_Id\n+      Name_Req : Boolean := False) return Node_Id\n    is\n    begin\n       Remove_Side_Effects (Exp, Name_Req);\n@@ -1024,8 +1017,7 @@ package body Exp_Util is\n \n    function Duplicate_Subexpr_No_Checks\n      (Exp      : Node_Id;\n-      Name_Req : Boolean := False)\n-      return     Node_Id\n+      Name_Req : Boolean := False) return Node_Id\n    is\n       New_Exp : Node_Id;\n \n@@ -1042,8 +1034,7 @@ package body Exp_Util is\n \n    function Duplicate_Subexpr_Move_Checks\n      (Exp      : Node_Id;\n-      Name_Req : Boolean := False)\n-      return     Node_Id\n+      Name_Req : Boolean := False) return Node_Id\n    is\n       New_Exp : Node_Id;\n \n@@ -1075,7 +1066,6 @@ package body Exp_Util is\n             --  in gigi.\n \n             P := Parent (N);\n-\n             while Present (P)\n               and then Nkind (P) /= N_Subprogram_Body\n             loop\n@@ -1228,7 +1218,7 @@ package body Exp_Util is\n       then\n          if Is_Itype (Exp_Typ) then\n \n-            --  No need to generate a new one.\n+            --  No need to generate a new one\n \n             T := Exp_Typ;\n \n@@ -1523,10 +1513,9 @@ package body Exp_Util is\n       --  condition, Sens is True if the condition is true and\n       --  False if it needs inverting.\n \n-      Cond := Condition (CV);\n-\n       --  Deal with NOT operators, inverting sense\n \n+      Cond := Condition (CV);\n       while Nkind (Cond) = N_Op_Not loop\n          Cond := Right_Opnd (Cond);\n          Sens := not Sens;\n@@ -1819,7 +1808,7 @@ package body Exp_Util is\n                   return;\n                end if;\n \n-            --  Statements, declarations, pragmas, representation clauses.\n+            --  Statements, declarations, pragmas, representation clauses\n \n             when\n                --  Statements\n@@ -1981,13 +1970,14 @@ package body Exp_Util is\n \n                      else\n                         declare\n-                           Decl : Node_Id := Assoc_Node;\n+                           Decl : Node_Id;\n \n                         begin\n                            --  Check whether these actions were generated\n                            --  by a declaration that is part of the loop_\n                            --  actions for the component_association.\n \n+                           Decl := Assoc_Node;\n                            while Present (Decl) loop\n                               exit when Parent (Decl) = P\n                                 and then Is_List_Member (Decl)\n@@ -2552,7 +2542,6 @@ package body Exp_Util is\n \n          if Result and then Nkind (P) = N_Indexed_Component then\n             Expr := First (Expressions (P));\n-\n             while Present (Expr) loop\n                Force_Evaluation (Expr);\n                Next (Expr);\n@@ -2669,9 +2658,9 @@ package body Exp_Util is\n \n          elsif Nkind (N) = N_Case_Statement then\n             declare\n-               Alt : Node_Id := First (Alternatives (N));\n-\n+               Alt : Node_Id;\n             begin\n+               Alt := First (Alternatives (N));\n                while Present (Alt) loop\n                   Kill_Dead_Code (Statements (Alt));\n                   Next (Alt);\n@@ -2816,9 +2805,8 @@ package body Exp_Util is\n    --   derived types\n \n    function Make_CW_Equivalent_Type\n-     (T    : Entity_Id;\n-      E    : Node_Id)\n-      return Entity_Id\n+     (T : Entity_Id;\n+      E : Node_Id) return Entity_Id\n    is\n       Loc         : constant Source_Ptr := Sloc (E);\n       Root_Typ    : constant Entity_Id  := Root_Type (T);\n@@ -2955,8 +2943,7 @@ package body Exp_Util is\n \n    function Make_Literal_Range\n      (Loc         : Source_Ptr;\n-      Literal_Typ : Entity_Id)\n-      return        Node_Id\n+      Literal_Typ : Entity_Id) return Node_Id\n    is\n       Lo : constant Node_Id :=\n              New_Copy_Tree (String_Literal_Low_Bound (Literal_Typ));\n@@ -2993,8 +2980,7 @@ package body Exp_Util is\n \n    function Make_Subtype_From_Expr\n      (E       : Node_Id;\n-      Unc_Typ : Entity_Id)\n-      return    Node_Id\n+      Unc_Typ : Entity_Id) return Node_Id\n    is\n       Loc         : constant Source_Ptr := Sloc (E);\n       List_Constr : constant List_Id    := New_List;\n@@ -3152,8 +3138,7 @@ package body Exp_Util is\n \n    function New_Class_Wide_Subtype\n      (CW_Typ : Entity_Id;\n-      N      : Node_Id)\n-      return   Entity_Id\n+      N      : Node_Id) return Entity_Id\n    is\n       Res       : constant Entity_Id := Create_Itype (E_Void, N);\n       Res_Name  : constant Name_Id   := Chars (Res);\n@@ -3479,7 +3464,6 @@ package body Exp_Util is\n \n          else\n             N := First (L);\n-\n             while Present (N) loop\n                if not Side_Effect_Free (N) then\n                   return False;\n@@ -3636,7 +3620,7 @@ package body Exp_Util is\n             Set_Is_Renaming_Of_Object (Def_Id, False);\n          end if;\n \n-      --  If it is a scalar type, just make a copy.\n+      --  If it is a scalar type, just make a copy\n \n       elsif Is_Elementary_Type (Exp_Type) then\n          Def_Id := Make_Defining_Identifier (Loc, New_Internal_Name ('R'));\n@@ -3927,7 +3911,7 @@ package body Exp_Util is\n       then\n          return True;\n \n-      --   Otherwise, Gigi cannot handle this and we must make a temporary.\n+      --   Otherwise, Gigi cannot handle this and we must make a temporary\n \n       else\n          return False;\n@@ -3997,8 +3981,7 @@ package body Exp_Util is\n    function Target_Has_Fixed_Ops\n      (Left_Typ   : Entity_Id;\n       Right_Typ  : Entity_Id;\n-      Result_Typ : Entity_Id)\n-      return       Boolean\n+      Result_Typ : Entity_Id) return Boolean\n    is\n       function Is_Fractional_Type (Typ : Entity_Id) return Boolean;\n       --  Return True if the given type is a fixed-point type with a small"}, {"sha": "3e68682b4370b90e1d395688136764b070df8937", "filename": "gcc/ada/exp_util.ads", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bebbff91ba61e63901378aaee1ba011dd0a1587b/gcc%2Fada%2Fexp_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bebbff91ba61e63901378aaee1ba011dd0a1587b/gcc%2Fada%2Fexp_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.ads?ref=bebbff91ba61e63901378aaee1ba011dd0a1587b", "patch": "@@ -257,8 +257,7 @@ package Exp_Util is\n \n    function Duplicate_Subexpr\n      (Exp      : Node_Id;\n-      Name_Req : Boolean := False)\n-      return     Node_Id;\n+      Name_Req : Boolean := False) return Node_Id;\n    --  Given the node for a subexpression, this function makes a logical\n    --  copy of the subexpression, and returns it. This is intended for use\n    --  when the expansion of an expression needs to repeat part of it. For\n@@ -280,8 +279,7 @@ package Exp_Util is\n \n    function Duplicate_Subexpr_No_Checks\n      (Exp      : Node_Id;\n-      Name_Req : Boolean := False)\n-      return     Node_Id;\n+      Name_Req : Boolean := False) return Node_Id;\n    --  Identical in effect to Duplicate_Subexpr, except that Remove_Checks\n    --  is called on the result, so that the duplicated expression does not\n    --  include checks. This is appropriate for use when Exp, the original\n@@ -290,8 +288,7 @@ package Exp_Util is\n \n    function Duplicate_Subexpr_Move_Checks\n      (Exp      : Node_Id;\n-      Name_Req : Boolean := False)\n-      return     Node_Id;\n+      Name_Req : Boolean := False) return Node_Id;\n    --  Identical in effect to Duplicate_Subexpr, except that Remove_Checks\n    --  is called on Exp after the duplication is complete, so that the\n    --  original expression does not include checks. In this case the result\n@@ -482,8 +479,7 @@ package Exp_Util is\n \n    function Make_Subtype_From_Expr\n      (E       : Node_Id;\n-      Unc_Typ : Entity_Id)\n-      return    Node_Id;\n+      Unc_Typ : Entity_Id) return Node_Id;\n    --  Returns a subtype indication corresponding to the actual type of an\n    --  expression E. Unc_Typ is an unconstrained array or record, or\n    --  a classwide type.\n@@ -536,8 +532,7 @@ package Exp_Util is\n    function Target_Has_Fixed_Ops\n      (Left_Typ   : Entity_Id;\n       Right_Typ  : Entity_Id;\n-      Result_Typ : Entity_Id)\n-      return       Boolean;\n+      Result_Typ : Entity_Id) return Boolean;\n    --  Returns True if and only if the target machine has direct support\n    --  for fixed-by-fixed multiplications and divisions for the given\n    --  operand and result types. This is called in package Exp_Fixd to"}, {"sha": "24015f10d0b999a9116deb2c4903314349fd1731", "filename": "gcc/ada/i-cpp.adb", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bebbff91ba61e63901378aaee1ba011dd0a1587b/gcc%2Fada%2Fi-cpp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bebbff91ba61e63901378aaee1ba011dd0a1587b/gcc%2Fada%2Fi-cpp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fi-cpp.adb?ref=bebbff91ba61e63901378aaee1ba011dd0a1587b", "patch": "@@ -38,6 +38,8 @@ with Unchecked_Conversion;\n \n package body Interfaces.CPP is\n \n+   --  The declarations below need (extensive) comments ???\n+\n    subtype Cstring is String (Positive);\n    type Cstring_Ptr is access all Cstring;\n    type Tag_Table is array (Natural range <>) of Vtable_Ptr;\n@@ -52,7 +54,7 @@ package body Interfaces.CPP is\n    end record;\n \n    type Vtable_Entry is record\n-     Pfn    : System.Address;\n+     Pfn : System.Address;\n    end record;\n \n    type Type_Specific_Data_Ptr is access all Type_Specific_Data;\n@@ -97,8 +99,7 @@ package body Interfaces.CPP is\n \n    function CPP_CW_Membership\n      (Obj_Tag : Vtable_Ptr;\n-      Typ_Tag : Vtable_Ptr)\n-      return Boolean\n+      Typ_Tag : Vtable_Ptr) return Boolean\n    is\n       Pos : constant Integer := Obj_Tag.TSD.Idepth - Typ_Tag.TSD.Idepth;\n    begin\n@@ -138,8 +139,8 @@ package body Interfaces.CPP is\n \n    function CPP_Get_Prim_Op_Address\n      (T        : Vtable_Ptr;\n-      Position : Positive)\n-      return Address is\n+      Position : Positive) return Address\n+   is\n    begin\n       return T.Prims_Ptr (Position).Pfn;\n    end CPP_Get_Prim_Op_Address;\n@@ -150,7 +151,6 @@ package body Interfaces.CPP is\n \n    function CPP_Get_RC_Offset (T : Vtable_Ptr) return SSE.Storage_Offset is\n       pragma Warnings (Off, T);\n-\n    begin\n       return 0;\n    end CPP_Get_RC_Offset;\n@@ -161,7 +161,6 @@ package body Interfaces.CPP is\n \n    function CPP_Get_Remotely_Callable (T : Vtable_Ptr) return Boolean is\n       pragma Warnings (Off, T);\n-\n    begin\n       return True;\n    end CPP_Get_Remotely_Callable;\n@@ -199,8 +198,8 @@ package body Interfaces.CPP is\n      (Old_TSD : Address;\n       New_Tag : Vtable_Ptr)\n    is\n-      TSD : constant Type_Specific_Data_Ptr\n-        := To_Type_Specific_Data_Ptr (Old_TSD);\n+      TSD : constant Type_Specific_Data_Ptr :=\n+              To_Type_Specific_Data_Ptr (Old_TSD);\n \n       New_TSD : Type_Specific_Data renames New_Tag.TSD.all;\n \n@@ -266,7 +265,6 @@ package body Interfaces.CPP is\n    procedure CPP_Set_RC_Offset (T : Vtable_Ptr; Value : SSE.Storage_Offset) is\n       pragma Warnings (Off, T);\n       pragma Warnings (Off, Value);\n-\n    begin\n       null;\n    end CPP_Set_RC_Offset;\n@@ -278,7 +276,6 @@ package body Interfaces.CPP is\n    procedure CPP_Set_Remotely_Callable (T : Vtable_Ptr; Value : Boolean) is\n       pragma Warnings (Off, T);\n       pragma Warnings (Off, Value);\n-\n    begin\n       null;\n    end CPP_Set_Remotely_Callable;\n@@ -318,7 +315,6 @@ package body Interfaces.CPP is\n \n    function Expanded_Name (T : Vtable_Ptr) return String is\n       Result : constant Cstring_Ptr := T.TSD.Expanded_Name;\n-\n    begin\n       return Result (1 .. Length (Result));\n    end Expanded_Name;\n@@ -329,7 +325,6 @@ package body Interfaces.CPP is\n \n    function External_Tag (T : Vtable_Ptr) return String is\n       Result : constant Cstring_Ptr := T.TSD.External_Tag;\n-\n    begin\n       return Result (1 .. Length (Result));\n    end External_Tag;\n@@ -348,4 +343,5 @@ package body Interfaces.CPP is\n \n       return Len - 1;\n    end Length;\n+\n end Interfaces.CPP;"}, {"sha": "a53c38b224260a842e27c6ebbadca6a30703a454", "filename": "gcc/ada/i-cpp.ads", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bebbff91ba61e63901378aaee1ba011dd0a1587b/gcc%2Fada%2Fi-cpp.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bebbff91ba61e63901378aaee1ba011dd0a1587b/gcc%2Fada%2Fi-cpp.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fi-cpp.ads?ref=bebbff91ba61e63901378aaee1ba011dd0a1587b", "patch": "@@ -33,6 +33,16 @@\n \n --  Definitions for interfacing to C++ classes\n \n+--  This package corresponds to Ada.Tags but applied to tagged types which are\n+--  are imported from C++ and correspond exactly to a C++ Class. The code that\n+--  the GNAT front end generates does not know about the structure of the C++\n+--  dispatch table (Vtable) but always accesses it through the procedural\n+--  interface defined in this package, thus the implementation of this package\n+--  (the body) can be customized to another C++ compiler without any change in\n+--  the compiler code itself as long as this procedural interface is respected.\n+--  Note that Ada.Tags defines a very similar procedural interface to the\n+--  regular Ada Dispatch Table.\n+\n with System;\n with System.Storage_Elements;\n \n@@ -41,23 +51,15 @@ package Interfaces.CPP is\n    package S   renames System;\n    package SSE renames System.Storage_Elements;\n \n-   --  This package corresponds to Ada.Tags but applied to tagged\n-   --  types which are 'imported' from C++ and correspond exactly to a\n-   --  C++ Class. GNAT doesn't know about the structure of the C++\n-   --  dispatch table (Vtable) but always accesses it through the\n-   --  procedural interface defined below, thus the implementation of\n-   --  this package (the body) can be customized to another C++\n-   --  compiler without any change in the compiler code itself as long\n-   --  as this procedural interface is respected. Note that Ada.Tags\n-   --  defines a very similar procedural interface to the regular Ada\n-   --  Dispatch Table.\n-\n    type Vtable_Ptr is private;\n \n    function Expanded_Name (T : Vtable_Ptr) return String;\n    function External_Tag  (T : Vtable_Ptr) return String;\n \n private\n+   --  These subprograms are in the private part. They are never accessed\n+   --  directly except from compiler generated code, which has access to\n+   --  private components of packages via the Rtsfind interface.\n \n    procedure CPP_Set_Prim_Op_Address\n      (T        : Vtable_Ptr;"}]}