{"sha": "e25c95ef2af3700f614b0c6745c71d5185d53dac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTI1Yzk1ZWYyYWYzNzAwZjYxNGIwYzY3NDVjNzFkNTE4NWQ1M2RhYw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2018-08-23T08:57:17Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2018-08-23T08:57:17Z"}, "message": "[AArch64] Improve SVE handling of single-vector permutes\n\naarch64_vectorize_vec_perm_const was failing to set one_vector_p\nif the permute had only a single input.  This in turn was hiding\na problem in the SVE TBL handling: it accepted single-vector\nvariable-length permutes, but sent them through the general\ntwo-vector aarch64_expand_sve_vec_perm, which is only set up\nto handle constant-length permutes.\n\n2018-08-23  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* config/aarch64/aarch64.c (aarch64_evpc_sve_tbl): Fix handling\n\tof single-vector TBLs.\n\t(aarch64_vectorize_vec_perm_const): Set one_vector_p when only\n\tone input is given.\n\ngcc/testsuite/\n\t* gcc.dg/vect/no-vfa-vect-depend-2.c: Remove XFAIL.\n\t* gcc.dg/vect/no-vfa-vect-depend-3.c: Likewise.\n\t* gcc.dg/vect/pr65947-13.c: Update for vect_fold_extract_last.\n\t* gcc.dg/vect/pr80631-2.c: Likewise.\n\nFrom-SVN: r263804", "tree": {"sha": "f6a0d9c3c1375e8239ad3addcc325515f4e70950", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f6a0d9c3c1375e8239ad3addcc325515f4e70950"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e25c95ef2af3700f614b0c6745c71d5185d53dac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e25c95ef2af3700f614b0c6745c71d5185d53dac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e25c95ef2af3700f614b0c6745c71d5185d53dac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e25c95ef2af3700f614b0c6745c71d5185d53dac/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4ec8bb67480a6c92e0de72999cdc6b42c5c181e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ec8bb67480a6c92e0de72999cdc6b42c5c181e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ec8bb67480a6c92e0de72999cdc6b42c5c181e1"}], "stats": {"total": 38, "additions": 26, "deletions": 12}, "files": [{"sha": "64e6d8e7b974397ca3ed9f88e41c1a4f6248eef7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e25c95ef2af3700f614b0c6745c71d5185d53dac/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e25c95ef2af3700f614b0c6745c71d5185d53dac/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e25c95ef2af3700f614b0c6745c71d5185d53dac", "patch": "@@ -1,3 +1,10 @@\n+2018-08-23  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_evpc_sve_tbl): Fix handling\n+\tof single-vector TBLs.\n+\t(aarch64_vectorize_vec_perm_const): Set one_vector_p when only\n+\tone input is given.\n+\n 2018-08-23  Richard Sandiford  <richard.sandiford@arm.com>\n \n \tPR target/85910"}, {"sha": "5bb30e0c69cd43178f1e52f178d4abd54fb539b0", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e25c95ef2af3700f614b0c6745c71d5185d53dac/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e25c95ef2af3700f614b0c6745c71d5185d53dac/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=e25c95ef2af3700f614b0c6745c71d5185d53dac", "patch": "@@ -15423,7 +15423,10 @@ aarch64_evpc_sve_tbl (struct expand_vec_perm_d *d)\n \n   machine_mode sel_mode = mode_for_int_vector (d->vmode).require ();\n   rtx sel = vec_perm_indices_to_rtx (sel_mode, d->perm);\n-  aarch64_expand_sve_vec_perm (d->target, d->op0, d->op1, sel);\n+  if (d->one_vector_p)\n+    emit_unspec2 (d->target, UNSPEC_TBL, d->op0, force_reg (sel_mode, sel));\n+  else\n+    aarch64_expand_sve_vec_perm (d->target, d->op0, d->op1, sel);\n   return true;\n }\n \n@@ -15476,7 +15479,8 @@ aarch64_vectorize_vec_perm_const (machine_mode vmode, rtx target, rtx op0,\n   struct expand_vec_perm_d d;\n \n   /* Check whether the mask can be applied to a single vector.  */\n-  if (op0 && rtx_equal_p (op0, op1))\n+  if (sel.ninputs () == 1\n+      || (op0 && rtx_equal_p (op0, op1)))\n     d.one_vector_p = true;\n   else if (sel.all_from_input_p (0))\n     {"}, {"sha": "95fd2e58fe740f3a07fb4ae29aa743ec160ec5cb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e25c95ef2af3700f614b0c6745c71d5185d53dac/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e25c95ef2af3700f614b0c6745c71d5185d53dac/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e25c95ef2af3700f614b0c6745c71d5185d53dac", "patch": "@@ -1,3 +1,10 @@\n+2018-08-23  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.dg/vect/no-vfa-vect-depend-2.c: Remove XFAIL.\n+\t* gcc.dg/vect/no-vfa-vect-depend-3.c: Likewise.\n+\t* gcc.dg/vect/pr65947-13.c: Update for vect_fold_extract_last.\n+\t* gcc.dg/vect/pr80631-2.c: Likewise.\n+\n 2017-08-23  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/86863"}, {"sha": "1880d1edb329b707489f85167d6a0063cdabeacd", "filename": "gcc/testsuite/gcc.dg/vect/no-vfa-vect-depend-2.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e25c95ef2af3700f614b0c6745c71d5185d53dac/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-vfa-vect-depend-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e25c95ef2af3700f614b0c6745c71d5185d53dac/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-vfa-vect-depend-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-vfa-vect-depend-2.c?ref=e25c95ef2af3700f614b0c6745c71d5185d53dac", "patch": "@@ -51,7 +51,4 @@ int main (void)\n }\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" {xfail { vect_no_align && { ! vect_hw_misalign } } } } } */\n-/* Requires reverse for variable-length SVE, which is implemented for\n-   by a later patch.  Until then we report it twice, once for SVE and\n-   once for 128-bit Advanced SIMD.  */\n-/* { dg-final { scan-tree-dump-times \"dependence distance negative\" 1 \"vect\" { xfail { aarch64_sve && vect_variable_length } } } } */\n+/* { dg-final { scan-tree-dump-times \"dependence distance negative\" 1 \"vect\" } } */"}, {"sha": "e5914d970e3596a082e015725ba99369670db4e7", "filename": "gcc/testsuite/gcc.dg/vect/no-vfa-vect-depend-3.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e25c95ef2af3700f614b0c6745c71d5185d53dac/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-vfa-vect-depend-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e25c95ef2af3700f614b0c6745c71d5185d53dac/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-vfa-vect-depend-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-vfa-vect-depend-3.c?ref=e25c95ef2af3700f614b0c6745c71d5185d53dac", "patch": "@@ -183,7 +183,4 @@ int main ()\n }\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 4 \"vect\" {xfail { vect_no_align && { ! vect_hw_misalign } } } } } */\n-/* f4 requires reverse for SVE, which is implemented by a later patch.\n-   Until then we report it twice, once for SVE and once for 128-bit\n-   Advanced SIMD.  */\n-/* { dg-final { scan-tree-dump-times \"dependence distance negative\" 4 \"vect\" { xfail { aarch64_sve && vect_variable_length } } } } */\n+/* { dg-final { scan-tree-dump-times \"dependence distance negative\" 4 \"vect\" } } */"}, {"sha": "e1d3ff52f5c8b3d2230598e5c9d859bf246d6c0c", "filename": "gcc/testsuite/gcc.dg/vect/pr65947-13.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e25c95ef2af3700f614b0c6745c71d5185d53dac/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr65947-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e25c95ef2af3700f614b0c6745c71d5185d53dac/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr65947-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr65947-13.c?ref=e25c95ef2af3700f614b0c6745c71d5185d53dac", "patch": "@@ -41,4 +41,5 @@ main (void)\n }\n \n /* { dg-final { scan-tree-dump-times \"LOOP VECTORIZED\" 2 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"condition expression based on integer induction.\" 4 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"condition expression based on integer induction.\" 4 \"vect\" { xfail vect_fold_extract_last } } } */\n+/* { dg-final { scan-tree-dump-times \"optimizing condition reduction with FOLD_EXTRACT_LAST\" 4 \"vect\" { target vect_fold_extract_last } } } */"}, {"sha": "b334ca2345bdf20ab7ea1864e9c1d372f97e6944", "filename": "gcc/testsuite/gcc.dg/vect/pr80631-2.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e25c95ef2af3700f614b0c6745c71d5185d53dac/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr80631-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e25c95ef2af3700f614b0c6745c71d5185d53dac/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr80631-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr80631-2.c?ref=e25c95ef2af3700f614b0c6745c71d5185d53dac", "patch": "@@ -72,4 +72,5 @@ main ()\n }\n \n /* { dg-final { scan-tree-dump-times \"LOOP VECTORIZED\" 5 \"vect\" { target vect_condition } } } */\n-/* { dg-final { scan-tree-dump-times \"condition expression based on integer induction.\" 10 \"vect\" { target vect_condition } } } */\n+/* { dg-final { scan-tree-dump-times \"condition expression based on integer induction.\" 10 \"vect\" { target vect_condition xfail vect_fold_extract_last } } } */\n+/* { dg-final { scan-tree-dump-times \"optimizing condition reduction with FOLD_EXTRACT_LAST\" 10 \"vect\" { target vect_fold_extract_last } } } */"}]}