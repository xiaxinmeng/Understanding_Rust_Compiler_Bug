{"sha": "ad1ec76feafa1a5a4d22511042f689e55dec3653", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWQxZWM3NmZlYWZhMWE1YTRkMjI1MTEwNDJmNjg5ZTU1ZGVjMzY1Mw==", "commit": {"author": {"name": "Paul Brook", "email": "paul@codesourcery.com", "date": "2007-05-02T22:16:21Z"}, "committer": {"name": "Paul Brook", "email": "pbrook@gcc.gnu.org", "date": "2007-05-02T22:16:21Z"}, "message": "bpabi.S (aeabi_lcmp): Fix result on overflow.\n\n2007-05-02  Paul Brook  <paul@codesourcery.com>\n\n\tgcc/\n\t* config/arm/bpabi.S (aeabi_lcmp): Fix result on overflow.\n\n\tgcc/testsuite/\n\t* gcc.dg/arm-eabi1.c: Move debug output.  Augment lcmp/ulcmp tests.\n\nFrom-SVN: r124361", "tree": {"sha": "67e765cbb0d8e18e887bcfb17aaac283813017d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/67e765cbb0d8e18e887bcfb17aaac283813017d5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ad1ec76feafa1a5a4d22511042f689e55dec3653", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad1ec76feafa1a5a4d22511042f689e55dec3653", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad1ec76feafa1a5a4d22511042f689e55dec3653", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad1ec76feafa1a5a4d22511042f689e55dec3653/comments", "author": null, "committer": null, "parents": [{"sha": "22a8a52d650ef0c4718d04289862f6319f8a8d9d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22a8a52d650ef0c4718d04289862f6319f8a8d9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22a8a52d650ef0c4718d04289862f6319f8a8d9d"}], "stats": {"total": 107, "additions": 94, "deletions": 13}, "files": [{"sha": "acc7956c77c4d8b30f6bd2bbea0fb861d32bc7be", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad1ec76feafa1a5a4d22511042f689e55dec3653/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad1ec76feafa1a5a4d22511042f689e55dec3653/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ad1ec76feafa1a5a4d22511042f689e55dec3653", "patch": "@@ -1,3 +1,7 @@\n+2007-05-02  Paul Brook  <paul@codesourcery.com>\n+\n+\t* config/arm/bpabi.S (aeabi_lcmp): Fix result on overflow.\n+\n 2007-05-02  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n \n \tPR middle-end/29715"}, {"sha": "1f08346598054f36bb18e233ce6ad7345616606c", "filename": "gcc/config/arm/bpabi.S", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad1ec76feafa1a5a4d22511042f689e55dec3653/gcc%2Fconfig%2Farm%2Fbpabi.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad1ec76feafa1a5a4d22511042f689e55dec3653/gcc%2Fconfig%2Farm%2Fbpabi.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fbpabi.S?ref=ad1ec76feafa1a5a4d22511042f689e55dec3653", "patch": "@@ -42,11 +42,18 @@\n #ifdef L_aeabi_lcmp\n \n ARM_FUNC_START aeabi_lcmp\n-\tsubs\tip, xxl, yyl\n-\tsbcs\tip, xxh, yyh\n-\tdo_it\teq\n-\tCOND(sub,s,eq)  ip, xxl, yyl\n-\tmov\tr0, ip\n+\tcmp\txxh, yyh\n+\tdo_it\tlt\n+\tmovlt\tr0, #-1\n+\tdo_it\tgt\n+\tmovgt\tr0, #1\n+\tdo_it\tne\n+\tRETc(ne)\n+\tsubs\tr0, xxl, yyl\n+\tdo_it\tlo\n+\tmovlo\tr0, #-1\n+\tdo_it\thi\n+\tmovhi\tr0, #1\n \tRET\n \tFUNC_END aeabi_lcmp\n "}, {"sha": "ce5e78cbfce408d5b0ffb1ec8110dd6850e1b694", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad1ec76feafa1a5a4d22511042f689e55dec3653/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad1ec76feafa1a5a4d22511042f689e55dec3653/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ad1ec76feafa1a5a4d22511042f689e55dec3653", "patch": "@@ -1,3 +1,7 @@\n+2007-05-02  Paul Brook  <paul@codesourcery.com>\n+\n+\t* gcc.dg/arm-eabi1.c: Move debug output.  Augment lcmp/ulcmp tests.\n+\n 2007-05-02  Eric Christopher  <echristo@apple.com>\n \n \t* gcc.dg/cpp/if-div.c: New file."}, {"sha": "06af67102998a429f14fb4d1dcbe4707ee9f39db", "filename": "gcc/testsuite/gcc.dg/arm-eabi1.c", "status": "modified", "additions": 74, "deletions": 8, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad1ec76feafa1a5a4d22511042f689e55dec3653/gcc%2Ftestsuite%2Fgcc.dg%2Farm-eabi1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad1ec76feafa1a5a4d22511042f689e55dec3653/gcc%2Ftestsuite%2Fgcc.dg%2Farm-eabi1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Farm-eabi1.c?ref=ad1ec76feafa1a5a4d22511042f689e55dec3653", "patch": "@@ -85,11 +85,11 @@ extern long long __eabi_uwrite8 (long long, void *);\n     type a1;\t\t\t\t\t\t\t\\\n     type b1;\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\\\n-    fprintf (stderr, \"%d: Test %s == %s\\n\", __LINE__, #a, #b);\t\\\n     a1 = a;\t\t\t\t\t\t\t\\\n     b1 = b;\t\t\t\t\t\t\t\\\n     if (abs (a1 - b1) > epsilon)\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\\\n+      fprintf (stderr, \"%d: Test %s == %s\\n\", __LINE__, #a, #b);\t\\\n       fprintf (stderr, \"%d: \" format \" != \" format \"\\n\",\t\\\n \t       __LINE__, a1, b1);\t\t\t\t\\\n       abort ();\t\t\t\t\t\t\t\\\n@@ -103,9 +103,56 @@ extern long long __eabi_uwrite8 (long long, void *);\n #define feq(a, b) eq (a, b, float, fabs, fepsilon, \"%f\")\n #define deq(a, b) eq (a, b, double, fabs, depsilon, \"%g\")\n \n+#define NUM_CMP_VALUES 6\n+\n+/* Values picked to cover a range of small, large, positive and negative.  */\n+static unsigned int cmp_val[NUM_CMP_VALUES] = \n+{\n+  0,\n+  1,\n+  0x40000000,\n+  0x80000000,\n+  0xc0000000,\n+  0xffffffff\n+};\n+\n+/* All combinations for each of the above values. */\n+#define ulcmp(l, s, m) \\\n+    s, l, l, l, l, l,  m, s, l, l, l, l, \\\n+    m, m, s, l, l, l,  m, m, m, s, l, l, \\\n+    m, m, m, m, s, l,  m, m, m, m, m, s\n+\n+#define lcmp(l, s, m) \\\n+    s, l, l, m, m, m,  m, s, l, m, m, m, \\\n+    m, m, s, m, m, m,  l, l, l, s, l, l, \\\n+    l, l, l, m, s, l,  l, l, l, m, m, s\n+\n+/* All combinations of the above for high/low words.  */\n+static int lcmp_results[] =\n+{\n+  lcmp(ulcmp(-1, -1, -1), ulcmp(-1, 0, 1), ulcmp(1, 1, 1))\n+};\n+\n+static int ulcmp_results[] =\n+{\n+  ulcmp(ulcmp(-1, -1, -1), ulcmp(-1, 0, 1), ulcmp(1, 1, 1))\n+};\n+\n+static int signof(int i)\n+{\n+  if (i < 0)\n+    return -1;\n+\n+  if (i == 0)\n+    return 0;\n+\n+  return 1;\n+}\n+\n int main () {\n   unsigned char bytes[256];\n-  int i;\n+  int i, j, k, n;\n+  int *result;\n \n   /* Table 2.  Double-precision floating-point arithmetic.  */\n   deq (__aeabi_dadd (dzero, done), done);\n@@ -234,12 +281,31 @@ int main () {\n   leq (__aeabi_llsl (2LL, 1), 4LL);\n   leq (__aeabi_llsr (-1LL, 63), 1);\n   leq (__aeabi_lasr (-1LL, 63), -1);\n-  ieq (__aeabi_lcmp (0LL, 1LL), -1);\n-  ieq (__aeabi_lcmp (0LL, 0LL), 0);\n-  ieq (__aeabi_lcmp (1LL, 0LL), 1);\n-  ieq (__aeabi_ulcmp (0LL, 1LL), -1);\n-  ieq (__aeabi_ulcmp (0LL, 0LL), 0);\n-  ieq (__aeabi_ulcmp (1LL, 0LL), 1);\n+\n+  result = lcmp_results;\n+  for (i = 0; i < NUM_CMP_VALUES; i++)\n+    for (j = 0; j < NUM_CMP_VALUES; j++)\n+      for (k = 0; k < NUM_CMP_VALUES; k++)\n+\tfor (n = 0; n < NUM_CMP_VALUES; n++)\n+\t  {\n+\t    ieq (signof (__aeabi_lcmp\n+\t\t\t  (((long long)cmp_val[i] << 32) | cmp_val[k],\n+\t\t\t   ((long long)cmp_val[j] << 32) | cmp_val[n])),\n+\t\t\t   *result);\n+\t    result++;\n+\t  }\n+  result = ulcmp_results;\n+  for (i = 0; i < NUM_CMP_VALUES; i++)\n+    for (j = 0; j < NUM_CMP_VALUES; j++)\n+      for (k = 0; k < NUM_CMP_VALUES; k++)\n+\tfor (n = 0; n < NUM_CMP_VALUES; n++)\n+\t  {\n+\t    ieq (signof (__aeabi_ulcmp\n+\t\t\t  (((long long)cmp_val[i] << 32) | cmp_val[k],\n+\t\t\t   ((long long)cmp_val[j] << 32) | cmp_val[n])),\n+\t\t\t   *result);\n+\t    result++;\n+\t  }\n \n   ieq (__aeabi_idiv (-550, 11), -50);\n   ueq (__aeabi_uidiv (4000000000U, 1000000U), 4000U);"}]}