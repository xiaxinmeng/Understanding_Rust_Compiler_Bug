{"sha": "efc2340b5fc7a471ce895f0c6b655464a128f8a2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWZjMjM0MGI1ZmM3YTQ3MWNlODk1ZjBjNmI2NTU0NjRhMTI4ZjhhMg==", "commit": {"author": {"name": "Marcin Ko\u015bcielnicki", "email": "koriakin@0x04.net", "date": "2016-02-19T10:20:23Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2016-02-19T10:20:23Z"}, "message": "S/390: Add __morestack test.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/s390/morestack.c: New test.\n\nFrom-SVN: r233547", "tree": {"sha": "f99851e04cf1f3286b7af4a5da7533a5b7c127e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f99851e04cf1f3286b7af4a5da7533a5b7c127e2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/efc2340b5fc7a471ce895f0c6b655464a128f8a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efc2340b5fc7a471ce895f0c6b655464a128f8a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efc2340b5fc7a471ce895f0c6b655464a128f8a2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efc2340b5fc7a471ce895f0c6b655464a128f8a2/comments", "author": {"login": "mwkmwkmwk", "id": 236399, "node_id": "MDQ6VXNlcjIzNjM5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/236399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwkmwkmwk", "html_url": "https://github.com/mwkmwkmwk", "followers_url": "https://api.github.com/users/mwkmwkmwk/followers", "following_url": "https://api.github.com/users/mwkmwkmwk/following{/other_user}", "gists_url": "https://api.github.com/users/mwkmwkmwk/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwkmwkmwk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwkmwkmwk/subscriptions", "organizations_url": "https://api.github.com/users/mwkmwkmwk/orgs", "repos_url": "https://api.github.com/users/mwkmwkmwk/repos", "events_url": "https://api.github.com/users/mwkmwkmwk/events{/privacy}", "received_events_url": "https://api.github.com/users/mwkmwkmwk/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ca2bfbc2caf3c7d1b1bb64108730cc2b77401137", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca2bfbc2caf3c7d1b1bb64108730cc2b77401137", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca2bfbc2caf3c7d1b1bb64108730cc2b77401137"}], "stats": {"total": 264, "additions": 264, "deletions": 0}, "files": [{"sha": "8afb92696f1f63ce8f6a9cc323a32554d3eb877d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efc2340b5fc7a471ce895f0c6b655464a128f8a2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efc2340b5fc7a471ce895f0c6b655464a128f8a2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=efc2340b5fc7a471ce895f0c6b655464a128f8a2", "patch": "@@ -1,3 +1,7 @@\n+2016-02-19  Marcin Ko\u015bcielnicki  <koriakin@0x04.net>\n+\n+\t* gcc.target/s390/morestack.c: New test.\n+\n 2016-02-19  Dominik Vogt  <vogt@linux.vnet.ibm.com>\n \n \tPR target/69625"}, {"sha": "aa28b72aa6cd3a325214651e982ff24c651e8955", "filename": "gcc/testsuite/gcc.target/s390/morestack.c", "status": "added", "additions": 260, "deletions": 0, "changes": 260, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efc2340b5fc7a471ce895f0c6b655464a128f8a2/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fmorestack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efc2340b5fc7a471ce895f0c6b655464a128f8a2/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fmorestack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fmorestack.c?ref=efc2340b5fc7a471ce895f0c6b655464a128f8a2", "patch": "@@ -0,0 +1,260 @@\n+/* Checks proper behavior of __morestack function - specifically, GPR\n+   values surviving, stack parameters being copied, and vararg\n+   pointer being correct.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"\" } */\n+\n+#include <stdlib.h>\n+\n+void *orig_r15;\n+\n+/* 1. Function \"test\" saves registers, makes a stack frame, puts known\n+ *    values in registers, and calls __morestack, telling it to jump to\n+ *    testinner, with return address pointing to \"testret\".\n+ * 2. \"testinner\" checks that parameter registers match what has been\n+ *    passed from \"test\", stack parameters were copied properly to\n+ *    the new stack, and the argument pointer matches the calling\n+ *    function's stack pointer.  It then leaves new values in volatile\n+ *    registers (including return value registers) and returns.\n+ * 3. \"testret\" checks that return value registers contain the expected\n+ *    return value, callee-saved GPRs match the values from \"test\",\n+ *    and then returns to main. */\n+\n+extern unsigned long testparams[3];\n+\n+#ifdef __s390x__\n+\n+asm(\n+  \".global test\\n\"\n+  \"test:\\n\"\n+  \".type test, @function\\n\"\n+  /* Save registers.  */\n+  \"stmg %r6, %r15, 0x30(%r15)\\n\"\n+  /* Save original sp in a global.  */\n+  \"larl %r1, orig_r15\\n\"\n+  \"stg %r15, 0(%r1)\\n\"\n+  /* Make a stack frame.  */\n+  \"aghi %r15, -168\\n\"\n+  /* A stack parameter.  */\n+  \"lghi %r1, 0x1240\\n\"\n+  \"stg %r1, 160(%r15)\\n\"\n+  /* Registers.  */\n+  \"lghi %r0, 0x1230\\n\"\n+  \"lghi %r2, 0x1232\\n\"\n+  \"lghi %r3, 0x1233\\n\"\n+  \"lghi %r4, 0x1234\\n\"\n+  \"lghi %r5, 0x1235\\n\"\n+  \"lghi %r6, 0x1236\\n\"\n+  \"lghi %r7, 0x1237\\n\"\n+  \"lghi %r8, 0x1238\\n\"\n+  \"lghi %r9, 0x1239\\n\"\n+  \"lghi %r10, 0x123a\\n\"\n+  \"lghi %r11, 0x123b\\n\"\n+  \"lghi %r12, 0x123c\\n\"\n+  \"lghi %r13, 0x123d\\n\"\n+  /* Fake return address.  */\n+  \"larl %r14, testret\\n\"\n+  /* Call morestack.  */\n+  \"larl %r1, testparams\\n\"\n+  \"jg __morestack\\n\"\n+\n+  /* Entry point.  */\n+  \"testinner:\\n\"\n+  /* Check registers.  */\n+  \"cghi %r0, 0x1230\\n\"\n+  \"jne testerr\\n\"\n+  \"cghi %r2, 0x1232\\n\"\n+  \"jne testerr\\n\"\n+  \"cghi %r3, 0x1233\\n\"\n+  \"jne testerr\\n\"\n+  \"cghi %r4, 0x1234\\n\"\n+  \"jne testerr\\n\"\n+  \"cghi %r5, 0x1235\\n\"\n+  \"jne testerr\\n\"\n+  \"cghi %r6, 0x1236\\n\"\n+  \"jne testerr\\n\"\n+  /* Check stack param.  */\n+  \"lg %r0, 0xa0(%r15)\\n\"\n+  \"cghi %r0, 0x1240\\n\"\n+  \"jne testerr\\n\"\n+  /* Check argument pointer.  */\n+  \"aghi %r1, 8\\n\"\n+  \"larl %r2, orig_r15\\n\"\n+  \"cg %r1, 0(%r2)\\n\"\n+  \"jne testerr\\n\"\n+  /* Modify volatile registers.  */\n+  \"lghi %r0, 0x1250\\n\"\n+  \"lghi %r1, 0x1251\\n\"\n+  \"lghi %r2, 0x1252\\n\"\n+  \"lghi %r3, 0x1253\\n\"\n+  \"lghi %r4, 0x1254\\n\"\n+  \"lghi %r5, 0x1255\\n\"\n+  /* Return.  */\n+  \"br %r14\\n\"\n+\n+  /* Returns here.  */\n+  \"testret:\\n\"\n+  /* Check return registers.  */\n+  \"cghi %r2, 0x1252\\n\"\n+  \"jne testerr\\n\"\n+  /* Check callee-saved registers.  */\n+  \"cghi %r6, 0x1236\\n\"\n+  \"jne testerr\\n\"\n+  \"cghi %r7, 0x1237\\n\"\n+  \"jne testerr\\n\"\n+  \"cghi %r8, 0x1238\\n\"\n+  \"jne testerr\\n\"\n+  \"cghi %r9, 0x1239\\n\"\n+  \"jne testerr\\n\"\n+  \"cghi %r10, 0x123a\\n\"\n+  \"jne testerr\\n\"\n+  \"cghi %r11, 0x123b\\n\"\n+  \"jne testerr\\n\"\n+  \"cghi %r12, 0x123c\\n\"\n+  \"jne testerr\\n\"\n+  \"cghi %r13, 0x123d\\n\"\n+  \"jne testerr\\n\"\n+  /* Return.  */\n+  \"lmg %r6, %r15, 0xd8(%r15)\\n\"\n+  \"br %r14\\n\" \n+\n+  /* Parameters block.  */\n+  \".section .data\\n\"\n+  \".align 8\\n\"\n+  \"testparams:\\n\"\n+  \".quad 160\\n\"\n+  \".quad 8\\n\"\n+  \".quad testinner-testparams\\n\"\n+  \".text\\n\"\n+);\n+\n+#else\n+\n+asm(\n+  \".global test\\n\"\n+  \"test:\\n\"\n+  \".type test, @function\\n\"\n+  /* Save registers.  */\n+  \"stm %r6, %r15, 0x18(%r15)\\n\"\n+  /* Save original sp in a global.  */\n+  \"larl %r1, orig_r15\\n\"\n+  \"st %r15, 0(%r1)\\n\"\n+  /* Make a stack frame.  */\n+  \"ahi %r15, -0x68\\n\"\n+  /* A stack parameter.  */\n+  \"lhi %r1, 0x1240\\n\"\n+  \"st %r1, 0x60(%r15)\\n\"\n+  \"lhi %r1, 0x1241\\n\"\n+  \"st %r1, 0x64(%r15)\\n\"\n+  /* Registers.  */\n+  \"lhi %r0, 0x1230\\n\"\n+  \"lhi %r2, 0x1232\\n\"\n+  \"lhi %r3, 0x1233\\n\"\n+  \"lhi %r4, 0x1234\\n\"\n+  \"lhi %r5, 0x1235\\n\"\n+  \"lhi %r6, 0x1236\\n\"\n+  \"lhi %r7, 0x1237\\n\"\n+  \"lhi %r8, 0x1238\\n\"\n+  \"lhi %r9, 0x1239\\n\"\n+  \"lhi %r10, 0x123a\\n\"\n+  \"lhi %r11, 0x123b\\n\"\n+  \"lhi %r12, 0x123c\\n\"\n+  \"lhi %r13, 0x123d\\n\"\n+  /* Fake return address.  */\n+  \"larl %r14, testret\\n\"\n+  /* Call morestack.  */\n+  \"larl %r1, testparams\\n\"\n+  \"jg __morestack\\n\"\n+\n+  /* Entry point.  */\n+  \"testinner:\\n\"\n+  /* Check registers.  */\n+  \"chi %r0, 0x1230\\n\"\n+  \"jne testerr\\n\"\n+  \"chi %r2, 0x1232\\n\"\n+  \"jne testerr\\n\"\n+  \"chi %r3, 0x1233\\n\"\n+  \"jne testerr\\n\"\n+  \"chi %r4, 0x1234\\n\"\n+  \"jne testerr\\n\"\n+  \"chi %r5, 0x1235\\n\"\n+  \"jne testerr\\n\"\n+  \"chi %r6, 0x1236\\n\"\n+  \"jne testerr\\n\"\n+  /* Check stack param.  */\n+  \"l %r0, 0x60(%r15)\\n\"\n+  \"chi %r0, 0x1240\\n\"\n+  \"jne testerr\\n\"\n+  \"l %r0, 0x64(%r15)\\n\"\n+  \"chi %r0, 0x1241\\n\"\n+  \"jne testerr\\n\"\n+  /* Check argument pointer.  */\n+  \"ahi %r1, 8\\n\"\n+  \"larl %r2, orig_r15\\n\"\n+  \"c %r1, 0(%r2)\\n\"\n+  \"jne testerr\\n\"\n+  /* Modify volatile registers.  */\n+  \"lhi %r0, 0x1250\\n\"\n+  \"lhi %r1, 0x1251\\n\"\n+  \"lhi %r2, 0x1252\\n\"\n+  \"lhi %r3, 0x1253\\n\"\n+  \"lhi %r4, 0x1254\\n\"\n+  \"lhi %r5, 0x1255\\n\"\n+  /* Return.  */\n+  \"br %r14\\n\"\n+\n+  /* Returns here.  */\n+  \"testret:\\n\"\n+  /* Check return registers.  */\n+  \"chi %r2, 0x1252\\n\"\n+  \"jne testerr\\n\"\n+  \"chi %r3, 0x1253\\n\"\n+  \"jne testerr\\n\"\n+  /* Check callee-saved registers.  */\n+  \"chi %r6, 0x1236\\n\"\n+  \"jne testerr\\n\"\n+  \"chi %r7, 0x1237\\n\"\n+  \"jne testerr\\n\"\n+  \"chi %r8, 0x1238\\n\"\n+  \"jne testerr\\n\"\n+  \"chi %r9, 0x1239\\n\"\n+  \"jne testerr\\n\"\n+  \"chi %r10, 0x123a\\n\"\n+  \"jne testerr\\n\"\n+  \"chi %r11, 0x123b\\n\"\n+  \"jne testerr\\n\"\n+  \"chi %r12, 0x123c\\n\"\n+  \"jne testerr\\n\"\n+  \"chi %r13, 0x123d\\n\"\n+  \"jne testerr\\n\"\n+  /* Return.  */\n+  \"lm %r6, %r15, 0x80(%r15)\\n\"\n+  \"br %r14\\n\" \n+\n+  /* Parameters block.  */\n+  \".section .data\\n\"\n+  \".align 4\\n\"\n+  \"testparams:\\n\"\n+  \".long 96\\n\"\n+  \".long 8\\n\"\n+  \".long testinner-testparams\\n\"\n+  \".text\\n\"\n+);\n+\n+#endif\n+\n+_Noreturn void testerr (void) {\n+  exit(1);\n+}\n+\n+extern void test (void);\n+\n+int main (void) {\n+  test();\n+  /* Now try again, with huge stack frame requested - to exercise\n+     both paths in __morestack (new allocation needed or not).  */\n+  testparams[0] = 1000000;\n+  test();\n+  return 0;\n+}"}]}