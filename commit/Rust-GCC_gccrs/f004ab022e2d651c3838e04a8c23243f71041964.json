{"sha": "f004ab022e2d651c3838e04a8c23243f71041964", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjAwNGFiMDIyZTJkNjUxYzM4MzhlMDRhOGMyMzI0M2Y3MTA0MTk2NA==", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2006-05-23T14:07:21Z"}, "committer": {"name": "Andrew Macleod", "email": "amacleod@gcc.gnu.org", "date": "2006-05-23T14:07:21Z"}, "message": "re PR c++/26757 (C++ front-end producing two DECLs with the same UID)\n\n\n2006-05-23  Andrew MacLeod  <amacleod@redhat.com>\n\t\n\tPR c++/26757\n\t* tree-ssa-loop-im.c (determine_invariantness_stmt): Use \n\tadd_referenced_var instead of add_referenced_tmp_var.\n\t* tree-complex.c (create_one_component_var): Use add_referenced_var.\n\t* tree-ssa-loop-manip.c (create_iv, tree_unroll_loop): Use\n\tadd_referenced_var.\n\t* tree-tailcall.c (adjust_accumulator_values, adjust_return_value,\n\ttree_optimize_tail_calls_1): Use add_referenced_var.\n\t* tree-ssa-loop-ivopts.c (create_new_iv): Use add_referenced_var.\n\t* tree-ssa-alias.c (create_memory_tag, create_global_var, create_sft):\n\tUse add_referenced_var.\n\t* tree-if-conv.c (ifc_temp_var): Use add_referenced_var.\n\t* gimplify.c (force_gimple_operand): Use add_referenced_var.\n\t* tree-ssa-phiopt.c (conditional_replacement, abs_replacement):\n\tUse add_referenced_var.\n\t* tree-dfa.c (struct walk_state): Remove.\n\t(find_referenced_vars): Remove walk state and vars_found hash table.\n\t(make_rename_temp): Use add_referenced_var.\n\t(find_vars_r): Pass less parameters to add_referenced_var.\n\t(referenced_var_p): New.  Is var in referenced_var hash table.\n\t(referenced_var_insert): Assert var isn't already in hash table.\n\t(add_referenced_var): Don't need walk_state parameter.  Add var if it\n\tisn't already in the hash table.\n\t(add_referenced_tmp_var): Remove.\n\t(find_new_referenced_vars_1): Use add_referenced_var.\n\t* tree-ssa-pre.c (create_expression_by_pieces, \n\tinsert_into_preds_of_block, insert_extra_phis, realify_fake_stores):\n\tUse add_referenced_var.\n\t* tree-vect-patterns.c (vect_pattern_recog_1): Use add_referenced_var.\n\t* lambda-code.c (lbv_to_gcc_expression, lle_to_gcc_expression,\n\tlambda_loopnest_to_gcc_loopnest, perfect_nestify): Use \n\tadd_referenced_var.\n\t* tree-vect-transform.c (vect_create_addr_base_for_vector_ref,\n\tvect_create_data_ref_ptr, vect_create_destination_var,\n\tvect_init_vector, vect_build_loop_niters, \n\tvect_generate_tmps_on_preheader, vect_update_ivs_after_vectorizer,\n\tvect_gen_niters_for_prolog_loop, vect_create_cond_for_align_checks):\n\tUse add_referenced_var.\n\t* tree-outof-ssa.c (create_temp): Use add_referenced_var.\n\t* tree-flow.h (add_referenced_tmp_var): Remove prototype\n\t(add_referenced_var): Add prototype.\n\t* tree-ssa-structalias.c (get_constraint_for, \n\tintra_create_variable_infos): Use add_referenced_var.\n\nFrom-SVN: r114018", "tree": {"sha": "2b7049784095c414b53ca43eb183cfd9844c3b8d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2b7049784095c414b53ca43eb183cfd9844c3b8d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f004ab022e2d651c3838e04a8c23243f71041964", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f004ab022e2d651c3838e04a8c23243f71041964", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f004ab022e2d651c3838e04a8c23243f71041964", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f004ab022e2d651c3838e04a8c23243f71041964/comments", "author": null, "committer": null, "parents": [{"sha": "dcdf969d4be84628b7a5a62011a1b600b7d8faa3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcdf969d4be84628b7a5a62011a1b600b7d8faa3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dcdf969d4be84628b7a5a62011a1b600b7d8faa3"}], "stats": {"total": 225, "additions": 123, "deletions": 102}, "files": [{"sha": "219face8aaf324f192ff267731c7f794a375391b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f004ab022e2d651c3838e04a8c23243f71041964/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f004ab022e2d651c3838e04a8c23243f71041964/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f004ab022e2d651c3838e04a8c23243f71041964", "patch": "@@ -1,3 +1,49 @@\n+2006-05-23  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\tPR c++/26757\n+\t* tree-ssa-loop-im.c (determine_invariantness_stmt): Use \n+\tadd_referenced_var instead of add_referenced_tmp_var.\n+\t* tree-complex.c (create_one_component_var): Use add_referenced_var.\n+\t* tree-ssa-loop-manip.c (create_iv, tree_unroll_loop): Use\n+\tadd_referenced_var.\n+\t* tree-tailcall.c (adjust_accumulator_values, adjust_return_value,\n+\ttree_optimize_tail_calls_1): Use add_referenced_var.\n+\t* tree-ssa-loop-ivopts.c (create_new_iv): Use add_referenced_var.\n+\t* tree-ssa-alias.c (create_memory_tag, create_global_var, create_sft):\n+\tUse add_referenced_var.\n+\t* tree-if-conv.c (ifc_temp_var): Use add_referenced_var.\n+\t* gimplify.c (force_gimple_operand): Use add_referenced_var.\n+\t* tree-ssa-phiopt.c (conditional_replacement, abs_replacement):\n+\tUse add_referenced_var.\n+\t* tree-dfa.c (struct walk_state): Remove.\n+\t(find_referenced_vars): Remove walk state and vars_found hash table.\n+\t(make_rename_temp): Use add_referenced_var.\n+\t(find_vars_r): Pass less parameters to add_referenced_var.\n+\t(referenced_var_p): New.  Is var in referenced_var hash table.\n+\t(referenced_var_insert): Assert var isn't already in hash table.\n+\t(add_referenced_var): Don't need walk_state parameter.  Add var if it\n+\tisn't already in the hash table.\n+\t(add_referenced_tmp_var): Remove.\n+\t(find_new_referenced_vars_1): Use add_referenced_var.\n+\t* tree-ssa-pre.c (create_expression_by_pieces, \n+\tinsert_into_preds_of_block, insert_extra_phis, realify_fake_stores):\n+\tUse add_referenced_var.\n+\t* tree-vect-patterns.c (vect_pattern_recog_1): Use add_referenced_var.\n+\t* lambda-code.c (lbv_to_gcc_expression, lle_to_gcc_expression,\n+\tlambda_loopnest_to_gcc_loopnest, perfect_nestify): Use \n+\tadd_referenced_var.\n+\t* tree-vect-transform.c (vect_create_addr_base_for_vector_ref,\n+\tvect_create_data_ref_ptr, vect_create_destination_var,\n+\tvect_init_vector, vect_build_loop_niters, \n+\tvect_generate_tmps_on_preheader, vect_update_ivs_after_vectorizer,\n+\tvect_gen_niters_for_prolog_loop, vect_create_cond_for_align_checks):\n+\tUse add_referenced_var.\n+\t* tree-outof-ssa.c (create_temp): Use add_referenced_var.\n+\t* tree-flow.h (add_referenced_tmp_var): Remove prototype\n+\t(add_referenced_var): Add prototype.\n+\t* tree-ssa-structalias.c (get_constraint_for, \n+\tintra_create_variable_infos): Use add_referenced_var.\n+\n 2006-05-23  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* simplify-rtx.c (simplify_subreg): Adjust REG_OFFSET for"}, {"sha": "103b36ef1237514723d0ca8d07d375e0c8d5068e", "filename": "gcc/gimplify.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f004ab022e2d651c3838e04a8c23243f71041964/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f004ab022e2d651c3838e04a8c23243f71041964/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=f004ab022e2d651c3838e04a8c23243f71041964", "patch": "@@ -6228,7 +6228,7 @@ force_gimple_operand (tree expr, tree *stmts, bool simple, tree var)\n   if (referenced_vars)\n     {\n       for (t = gimplify_ctxp->temps; t ; t = TREE_CHAIN (t))\n-\tadd_referenced_tmp_var (t);\n+\tadd_referenced_var (t);\n     }\n \n   pop_gimplify_context (NULL);"}, {"sha": "c59de3c3e7818f4f4011299c83bf612edd00cabd", "filename": "gcc/lambda-code.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f004ab022e2d651c3838e04a8c23243f71041964/gcc%2Flambda-code.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f004ab022e2d651c3838e04a8c23243f71041964/gcc%2Flambda-code.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flambda-code.c?ref=f004ab022e2d651c3838e04a8c23243f71041964", "patch": "@@ -1539,7 +1539,7 @@ lbv_to_gcc_expression (lambda_body_vector lbv,\n   /* Create a statement list and a linear expression temporary.  */\n   stmts = alloc_stmt_list ();\n   resvar = create_tmp_var (type, \"lbvtmp\");\n-  add_referenced_tmp_var (resvar);\n+  add_referenced_var (resvar);\n \n   /* Start at 0.  */\n   stmt = build2 (MODIFY_EXPR, void_type_node, resvar, integer_zero_node);\n@@ -1626,7 +1626,7 @@ lle_to_gcc_expression (lambda_linear_expression lle,\n   /* Create a statement list and a linear expression temporary.  */\n   stmts = alloc_stmt_list ();\n   resvar = create_tmp_var (type, \"lletmp\");\n-  add_referenced_tmp_var (resvar);\n+  add_referenced_var (resvar);\n \n   /* Build up the linear expressions, and put the variable representing the\n      result in the results array.  */\n@@ -1846,7 +1846,7 @@ lambda_loopnest_to_gcc_loopnest (struct loop *old_loopnest,\n       /* First, build the new induction variable temporary  */\n \n       ivvar = create_tmp_var (type, \"lnivtmp\");\n-      add_referenced_tmp_var (ivvar);\n+      add_referenced_var (ivvar);\n \n       VEC_safe_push (tree, heap, new_ivs, ivvar);\n \n@@ -2457,7 +2457,7 @@ perfect_nestify (struct loops *loops,\n   /* Create the new iv.  */\n   oldivvar = VEC_index (tree, loopivs, 0);\n   ivvar = create_tmp_var (TREE_TYPE (oldivvar), \"perfectiv\");\n-  add_referenced_tmp_var (ivvar);\n+  add_referenced_var (ivvar);\n   standard_iv_increment_position (newloop, &bsi, &insert_after);\n   create_iv (VEC_index (tree, lbounds, 0),\n \t     build_int_cst (TREE_TYPE (oldivvar), VEC_index (int, steps, 0)),\n@@ -2468,7 +2468,7 @@ perfect_nestify (struct loops *loops,\n \n   exit_condition = get_loop_exit_condition (newloop);\n   uboundvar = create_tmp_var (integer_type_node, \"uboundvar\");\n-  add_referenced_tmp_var (uboundvar);\n+  add_referenced_var (uboundvar);\n   stmt = build2 (MODIFY_EXPR, void_type_node, uboundvar, \n \t\t VEC_index (tree, ubounds, 0));\n   uboundvar = make_ssa_name (uboundvar, stmt);"}, {"sha": "0a5040ebfcdeb13bab8c4d2ef5aa31214864e10c", "filename": "gcc/tree-complex.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f004ab022e2d651c3838e04a8c23243f71041964/gcc%2Ftree-complex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f004ab022e2d651c3838e04a8c23243f71041964/gcc%2Ftree-complex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-complex.c?ref=f004ab022e2d651c3838e04a8c23243f71041964", "patch": "@@ -387,7 +387,7 @@ create_one_component_var (tree type, tree orig, const char *prefix,\n \t\t\t  const char *suffix, enum tree_code code)\n {\n   tree r = create_tmp_var (type, prefix);\n-  add_referenced_tmp_var (r);\n+  add_referenced_var (r);\n \n   DECL_SOURCE_LOCATION (r) = DECL_SOURCE_LOCATION (orig);\n   DECL_ARTIFICIAL (r) = 1;"}, {"sha": "621a0d3d33016d77aa48b501606af3b56705e3ec", "filename": "gcc/tree-dfa.c", "status": "modified", "additions": 30, "deletions": 55, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f004ab022e2d651c3838e04a8c23243f71041964/gcc%2Ftree-dfa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f004ab022e2d651c3838e04a8c23243f71041964/gcc%2Ftree-dfa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dfa.c?ref=f004ab022e2d651c3838e04a8c23243f71041964", "patch": "@@ -65,19 +65,10 @@ struct dfa_stats_d\n };\n \n \n-/* State information for find_vars_r.  */\n-struct walk_state\n-{\n-  /* Hash table used to avoid adding the same variable more than once.  */\n-  htab_t vars_found;\n-};\n-\n-\n /* Local functions.  */\n static void collect_dfa_stats (struct dfa_stats_d *);\n static tree collect_dfa_stats_r (tree *, int *, void *);\n static tree find_vars_r (tree *, int *, void *);\n-static void add_referenced_var (tree, struct walk_state *);\n \n \n /* Global declarations.  */\n@@ -106,23 +97,16 @@ htab_t default_defs;\n static unsigned int\n find_referenced_vars (void)\n {\n-  htab_t vars_found;\n   basic_block bb;\n   block_stmt_iterator si;\n-  struct walk_state walk_state;\n-\n-  vars_found = htab_create (50, htab_hash_pointer, htab_eq_pointer, NULL);\n-  memset (&walk_state, 0, sizeof (walk_state));\n-  walk_state.vars_found = vars_found;\n \n   FOR_EACH_BB (bb)\n     for (si = bsi_start (bb); !bsi_end_p (si); bsi_next (&si))\n       {\n \ttree *stmt_p = bsi_stmt_ptr (si);\n-\twalk_tree (stmt_p, find_vars_r, &walk_state, NULL);\n+\twalk_tree (stmt_p, find_vars_r, NULL, NULL);\n       }\n \n-  htab_delete (vars_found);\n   return 0;\n }\n \n@@ -243,7 +227,7 @@ make_rename_temp (tree type, const char *prefix)\n \n   if (referenced_vars)\n     {\n-      add_referenced_tmp_var (t);\n+      add_referenced_var (t);\n       mark_sym_for_renaming (t);\n     }\n \n@@ -607,14 +591,12 @@ collect_dfa_stats_r (tree *tp, int *walk_subtrees ATTRIBUTE_UNUSED,\n    the function.  */\n \n static tree\n-find_vars_r (tree *tp, int *walk_subtrees, void *data)\n+find_vars_r (tree *tp, int *walk_subtrees, void *data ATTRIBUTE_UNUSED)\n {\n-  struct walk_state *walk_state = (struct walk_state *) data;\n-\n   /* If T is a regular variable that the optimizers are interested\n      in, add it to the list of variables.  */\n   if (SSA_VAR_P (*tp))\n-    add_referenced_var (*tp, walk_state);\n+    add_referenced_var (*tp);\n \n   /* Type, _DECL and constant nodes have no interesting children.\n      Ignore them.  */\n@@ -624,6 +606,21 @@ find_vars_r (tree *tp, int *walk_subtrees, void *data)\n   return NULL_TREE;\n }\n \n+/* Lookup VAR in the referenced_vars hashtable and return true if it is\n+   present.  */\n+\n+static inline bool\n+referenced_var_p (tree var)\n+{\n+  struct int_tree_map *h, in;\n+  in.uid = DECL_UID (var);\n+  h = (struct int_tree_map *) htab_find_with_hash (referenced_vars, \n+\t\t\t\t\t\t   &in, \n+\t\t\t\t\t\t   in.uid);\n+  if (h)\n+    return h->to != NULL_TREE;\n+  return false;\n+}\n \n /* Lookup UID in the referenced_vars hashtable and return the associated\n    variable.  */\n@@ -652,6 +649,9 @@ referenced_var_insert (unsigned int uid, tree to)\n   h->uid = uid;\n   h->to = to;\n   loc = htab_find_slot_with_hash (referenced_vars, h, uid, INSERT);\n+  /* This assert can only trigger if a variable with the same UID has been \n+     inserted already.  */\n+  gcc_assert ((*(struct int_tree_map **)loc) == NULL);\n   *(struct int_tree_map **)  loc = h;\n }\n \n@@ -705,33 +705,21 @@ set_default_def (tree var, tree def)\n     }\n }\n \n-/* Add VAR to the list of dereferenced variables.\n-\n-   WALK_STATE contains a hash table used to avoid adding the same\n-      variable more than once. Note that this function assumes that\n-      VAR is a valid SSA variable.  If WALK_STATE is NULL, no\n-      duplicate checking is done.  */\n+/* Add VAR to the list of referenced variables if it isn't already there.  */\n \n-static void\n-add_referenced_var (tree var, struct walk_state *walk_state)\n+void\n+add_referenced_var (tree var)\n {\n-  void **slot;\n   var_ann_t v_ann;\n \n   v_ann = get_var_ann (var);\n-\n-  if (walk_state)\n-    slot = htab_find_slot (walk_state->vars_found, (void *) var, INSERT);\n-  else\n-    slot = NULL;\n-\n-  if (slot == NULL || *slot == NULL)\n+  gcc_assert (DECL_P (var));\n+  \n+  if (!referenced_var_p (var))\n     {\n       /* This is the first time we find this variable, add it to the\n          REFERENCED_VARS array and annotate it with attributes that are\n \t intrinsic to the variable.  */\n-      if (slot)\n-\t*slot = (void *) var;\n       \n       referenced_var_insert (DECL_UID (var), var);\n       \n@@ -750,7 +738,7 @@ add_referenced_var (tree var, struct walk_state *walk_state)\n \t     variables because it cannot be propagated by the\n \t     optimizers.  */\n \t  && (TREE_CONSTANT (var) || TREE_READONLY (var)))\n-      \twalk_tree (&DECL_INITIAL (var), find_vars_r, walk_state, 0);\n+      \twalk_tree (&DECL_INITIAL (var), find_vars_r, NULL, 0);\n     }\n }\n \n@@ -778,19 +766,6 @@ get_virtual_var (tree var)\n   return var;\n }\n \n-/* Add a temporary variable to REFERENCED_VARS.  This is similar to\n-   add_referenced_var, but is used by passes that need to add new temps to\n-   the REFERENCED_VARS array after the program has been scanned for\n-   variables.  The variable will just receive a new UID and be added\n-   to the REFERENCED_VARS array without checking for duplicates.  */\n-\n-void\n-add_referenced_tmp_var (tree var)\n-{\n-  add_referenced_var (var, NULL);\n-}\n-\n-\n /* Mark all the non-SSA variables found in STMT's operands to be\n    processed by update_ssa.  */\n \n@@ -868,7 +843,7 @@ find_new_referenced_vars_1 (tree *tp, int *walk_subtrees,\n \n   if (TREE_CODE (t) == VAR_DECL && !var_ann (t))\n     {\n-      add_referenced_tmp_var (t);\n+      add_referenced_var (t);\n       mark_sym_for_renaming (t);\n     }\n "}, {"sha": "1bd32374a96cd36e70f1bc6903675281632b3e24", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f004ab022e2d651c3838e04a8c23243f71041964/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f004ab022e2d651c3838e04a8c23243f71041964/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=f004ab022e2d651c3838e04a8c23243f71041964", "patch": "@@ -633,7 +633,7 @@ extern void debug_variable (tree);\n extern void dump_subvars_for (FILE *, tree);\n extern void debug_subvars_for (tree);\n extern tree get_virtual_var (tree);\n-extern void add_referenced_tmp_var (tree);\n+extern void add_referenced_var (tree);\n extern void mark_new_vars_to_rename (tree);\n extern void find_new_referenced_vars (tree *);\n "}, {"sha": "ecd1368cd272384b98c999406df368a89ba863d8", "filename": "gcc/tree-if-conv.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f004ab022e2d651c3838e04a8c23243f71041964/gcc%2Ftree-if-conv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f004ab022e2d651c3838e04a8c23243f71041964/gcc%2Ftree-if-conv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-if-conv.c?ref=f004ab022e2d651c3838e04a8c23243f71041964", "patch": "@@ -989,7 +989,7 @@ ifc_temp_var (tree type, tree exp)\n \n   /* Create new temporary variable.  */\n   var = create_tmp_var (type, name);\n-  add_referenced_tmp_var (var);\n+  add_referenced_var (var);\n \n   /* Build new statement to assign EXP to new variable.  */\n   stmt = build2 (MODIFY_EXPR, type, var, exp);"}, {"sha": "55f74e116e9c155fe6fdeab32261eec6f5b36c7a", "filename": "gcc/tree-outof-ssa.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f004ab022e2d651c3838e04a8c23243f71041964/gcc%2Ftree-outof-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f004ab022e2d651c3838e04a8c23243f71041964/gcc%2Ftree-outof-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-outof-ssa.c?ref=f004ab022e2d651c3838e04a8c23243f71041964", "patch": "@@ -168,9 +168,9 @@ create_temp (tree t)\n     }\n   DECL_ARTIFICIAL (tmp) = DECL_ARTIFICIAL (t);\n   DECL_IGNORED_P (tmp) = DECL_IGNORED_P (t);\n-  add_referenced_tmp_var (tmp);\n+  add_referenced_var (tmp);\n \n-  /* add_referenced_tmp_var will create the annotation and set up some\n+  /* add_referenced_var will create the annotation and set up some\n      of the flags in the annotation.  However, some flags we need to\n      inherit from our original variable.  */\n   var_ann (tmp)->symbol_mem_tag = var_ann (t)->symbol_mem_tag;"}, {"sha": "0b30a81dd51a9119e3418dab5587362b0a289f87", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f004ab022e2d651c3838e04a8c23243f71041964/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f004ab022e2d651c3838e04a8c23243f71041964/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=f004ab022e2d651c3838e04a8c23243f71041964", "patch": "@@ -2141,7 +2141,7 @@ create_memory_tag (tree type, bool is_type_tag)\n   ann->symbol_mem_tag = NULL_TREE;\n \n   /* Add the tag to the symbol table.  */\n-  add_referenced_tmp_var (tag);\n+  add_referenced_var (tag);\n \n   return tag;\n }\n@@ -2253,7 +2253,7 @@ create_global_var (void)\n \n   create_var_ann (global_var);\n   mark_call_clobbered (global_var, ESCAPE_UNKNOWN);\n-  add_referenced_tmp_var (global_var);\n+  add_referenced_var (global_var);\n   mark_sym_for_renaming (global_var);\n }\n \n@@ -2900,7 +2900,7 @@ create_sft (tree var, tree field, unsigned HOST_WIDE_INT offset,\n   /* Add the new variable to REFERENCED_VARS.  */\n   ann = get_var_ann (subvar);\n   ann->symbol_mem_tag = NULL;  \t\n-  add_referenced_tmp_var (subvar);\n+  add_referenced_var (subvar);\n   SFT_PARENT_VAR (subvar) = var;\n   SFT_OFFSET (subvar) = offset;\n   SFT_SIZE (subvar) = size;"}, {"sha": "e51e214ea23cc7b36580d792a1e8bfcb3555554d", "filename": "gcc/tree-ssa-loop-im.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f004ab022e2d651c3838e04a8c23243f71041964/gcc%2Ftree-ssa-loop-im.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f004ab022e2d651c3838e04a8c23243f71041964/gcc%2Ftree-ssa-loop-im.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-im.c?ref=f004ab022e2d651c3838e04a8c23243f71041964", "patch": "@@ -624,7 +624,7 @@ determine_invariantness_stmt (struct dom_walk_data *dw_data ATTRIBUTE_UNUSED,\n \n \t  /* stmt must be MODIFY_EXPR.  */\n \t  var = create_tmp_var (TREE_TYPE (rhs), \"reciptmp\");\n-\t  add_referenced_tmp_var (var);\n+\t  add_referenced_var (var);\n \n \t  stmt1 = build2 (MODIFY_EXPR, void_type_node, var,\n \t\t\t  build2 (RDIV_EXPR, TREE_TYPE (rhs),"}, {"sha": "9a289cc6f4f604f04977478fb3407df7707dda40", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f004ab022e2d651c3838e04a8c23243f71041964/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f004ab022e2d651c3838e04a8c23243f71041964/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=f004ab022e2d651c3838e04a8c23243f71041964", "patch": "@@ -5123,7 +5123,7 @@ create_new_iv (struct ivopts_data *data, struct iv_cand *cand)\n     }\n  \n   gimple_add_tmp_var (cand->var_before);\n-  add_referenced_tmp_var (cand->var_before);\n+  add_referenced_var (cand->var_before);\n \n   base = unshare_expr (cand->iv->base);\n "}, {"sha": "556264c58f4b89a6a6149093516998a009a5b33c", "filename": "gcc/tree-ssa-loop-manip.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f004ab022e2d651c3838e04a8c23243f71041964/gcc%2Ftree-ssa-loop-manip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f004ab022e2d651c3838e04a8c23243f71041964/gcc%2Ftree-ssa-loop-manip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-manip.c?ref=f004ab022e2d651c3838e04a8c23243f71041964", "patch": "@@ -60,7 +60,7 @@ create_iv (tree base, tree step, tree var, struct loop *loop,\n   if (!var)\n     {\n       var = create_tmp_var (TREE_TYPE (base), \"ivtmp\");\n-      add_referenced_tmp_var (var);\n+      add_referenced_var (var);\n     }\n \n   vb = make_ssa_name (var, NULL_TREE);\n@@ -916,7 +916,7 @@ tree_unroll_loop (struct loops *loops, struct loop *loop, unsigned factor,\n       else\n \t{\n \t  var = create_tmp_var (TREE_TYPE (init), \"unrinittmp\");\n-\t  add_referenced_tmp_var (var);\n+\t  add_referenced_var (var);\n \t}\n \n       new_init = make_ssa_name (var, NULL_TREE);"}, {"sha": "edad768d864fd00946b8a3cd1eeb526bd972f612", "filename": "gcc/tree-ssa-phiopt.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f004ab022e2d651c3838e04a8c23243f71041964/gcc%2Ftree-ssa-phiopt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f004ab022e2d651c3838e04a8c23243f71041964/gcc%2Ftree-ssa-phiopt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-phiopt.c?ref=f004ab022e2d651c3838e04a8c23243f71041964", "patch": "@@ -410,7 +410,7 @@ conditional_replacement (basic_block cond_bb, basic_block middle_bb,\n \treturn false;\n \n       tmp = create_tmp_var (TREE_TYPE (cond), NULL);\n-      add_referenced_tmp_var (tmp);\n+      add_referenced_var (tmp);\n       new_var = make_ssa_name (tmp, NULL);\n       old_result = cond;\n       cond = new_var;\n@@ -512,7 +512,7 @@ conditional_replacement (basic_block cond_bb, basic_block middle_bb,\n \n \t  op0 = TREE_OPERAND (cond, 0);\n \t  tmp = create_tmp_var (TREE_TYPE (op0), NULL);\n-\t  add_referenced_tmp_var (tmp);\n+\t  add_referenced_var (tmp);\n \t  cond_tmp = make_ssa_name (tmp, NULL);\n \t  new = build2 (MODIFY_EXPR, TREE_TYPE (cond_tmp), cond_tmp, op0);\n \t  SSA_NAME_DEF_STMT (cond_tmp) = new;\n@@ -959,7 +959,7 @@ abs_replacement (basic_block cond_bb, basic_block middle_bb,\n   if (negate)\n     {\n       tree tmp = create_tmp_var (TREE_TYPE (result), NULL);\n-      add_referenced_tmp_var (tmp);\n+      add_referenced_var (tmp);\n       lhs = make_ssa_name (tmp, NULL);\n     }\n   else"}, {"sha": "0f2d6b473e88b4ca489c67e0b119d36092edf065", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f004ab022e2d651c3838e04a8c23243f71041964/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f004ab022e2d651c3838e04a8c23243f71041964/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=f004ab022e2d651c3838e04a8c23243f71041964", "patch": "@@ -2422,7 +2422,7 @@ create_expression_by_pieces (basic_block block, tree expr, tree stmts)\n     }\n \n   temp = pretemp;\n-  add_referenced_tmp_var (temp);\n+  add_referenced_var (temp);\n \n   if (TREE_CODE (TREE_TYPE (expr)) == COMPLEX_TYPE)\n     DECL_COMPLEX_GIMPLE_REG_P (temp) = 1;\n@@ -2565,7 +2565,7 @@ insert_into_preds_of_block (basic_block block, value_set_node_t node,\n     }\n \n   temp = prephitemp;\n-  add_referenced_tmp_var (temp);\n+  add_referenced_var (temp);\n \n   if (TREE_CODE (type) == COMPLEX_TYPE)\n     DECL_COMPLEX_GIMPLE_REG_P (temp) = 1;\n@@ -3040,7 +3040,7 @@ insert_extra_phis (basic_block block, basic_block dom)\n \t\t  fprintf (dump_file, \" to merge available but not dominating values \");\n \t\t}\n \n-\t      add_referenced_tmp_var (temp);\n+\t      add_referenced_var (temp);\n \t      temp = create_phi_node (temp, block);\n \t      NECESSARY (temp) = 0; \n \t      VEC_safe_push (tree, heap, inserted_exprs, temp);\n@@ -3288,7 +3288,7 @@ realify_fake_stores (void)\n \t  tree newstmt;\n \n \t  /* Mark the temp variable as referenced */\n-\t  add_referenced_tmp_var (SSA_NAME_VAR (TREE_OPERAND (stmt, 0)));\n+\t  add_referenced_var (SSA_NAME_VAR (TREE_OPERAND (stmt, 0)));\n \n \t  /* Put the new statement in GC memory, fix up the \n \t     SSA_NAME_DEF_STMT on it, and then put it in place of"}, {"sha": "2e7c924614884e13f251252dd9f8018267eddac2", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f004ab022e2d651c3838e04a8c23243f71041964/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f004ab022e2d651c3838e04a8c23243f71041964/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=f004ab022e2d651c3838e04a8c23243f71041964", "patch": "@@ -2560,7 +2560,7 @@ get_constraint_for (tree t, VEC (ce_s, heap) **results)\n \t\t    heapvar = create_tmp_var_raw (ptr_type_node, \"HEAP\");\n \t\t    DECL_EXTERNAL (heapvar) = 1;\n \t\t    if (referenced_vars)\n-\t\t      add_referenced_tmp_var (heapvar);\n+\t\t      add_referenced_var (heapvar);\n \t\t    heapvar_insert (t, heapvar);\n \t\t  }\n \n@@ -4074,7 +4074,7 @@ intra_create_variable_infos (void)\n \t\t\t\t\t    \"PARM_NOALIAS\");\n \t      DECL_EXTERNAL (heapvar) = 1;\n \t      if (referenced_vars)\n-\t\tadd_referenced_tmp_var (heapvar);\n+\t\tadd_referenced_var (heapvar);\n \t      heapvar_insert (t, heapvar);\n \t    }\n \t  id = create_variable_info_for (heapvar,"}, {"sha": "e45f0be352f8d8e92c3e5dd43bdf56e902af8931", "filename": "gcc/tree-tailcall.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f004ab022e2d651c3838e04a8c23243f71041964/gcc%2Ftree-tailcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f004ab022e2d651c3838e04a8c23243f71041964/gcc%2Ftree-tailcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-tailcall.c?ref=f004ab022e2d651c3838e04a8c23243f71041964", "patch": "@@ -562,7 +562,7 @@ adjust_accumulator_values (block_stmt_iterator bsi, tree m, tree a, edge back)\n \t\t\t     build2 (MULT_EXPR, ret_type, m_acc, a));\n \n \t      tmp = create_tmp_var (ret_type, \"acc_tmp\");\n-\t      add_referenced_tmp_var (tmp);\n+\t      add_referenced_var (tmp);\n \n \t      var = make_ssa_name (tmp, stmt);\n \t      TREE_OPERAND (stmt, 0) = var;\n@@ -641,7 +641,7 @@ adjust_return_value (basic_block bb, tree m, tree a)\n \t\t     build2 (MULT_EXPR, ret_type, m_acc, ret_var));\n \n       tmp = create_tmp_var (ret_type, \"acc_tmp\");\n-      add_referenced_tmp_var (tmp);\n+      add_referenced_var (tmp);\n \n       var = make_ssa_name (tmp, stmt);\n       TREE_OPERAND (stmt, 0) = var;\n@@ -656,7 +656,7 @@ adjust_return_value (basic_block bb, tree m, tree a)\n \t\t     build2 (PLUS_EXPR, ret_type, a_acc, var));\n \n       tmp = create_tmp_var (ret_type, \"acc_tmp\");\n-      add_referenced_tmp_var (tmp);\n+      add_referenced_var (tmp);\n \n       var = make_ssa_name (tmp, stmt);\n       TREE_OPERAND (stmt, 0) = var;\n@@ -928,7 +928,7 @@ tree_optimize_tail_calls_1 (bool opt_tailcalls)\n \t  ret_type = TREE_TYPE (DECL_RESULT (current_function_decl));\n \n \t  tmp = create_tmp_var (ret_type, \"add_acc\");\n-\t  add_referenced_tmp_var (tmp);\n+\t  add_referenced_var (tmp);\n \n \t  phi = create_phi_node (tmp, first);\n \t  add_phi_arg (phi,\n@@ -944,7 +944,7 @@ tree_optimize_tail_calls_1 (bool opt_tailcalls)\n \t  ret_type = TREE_TYPE (DECL_RESULT (current_function_decl));\n \n \t  tmp = create_tmp_var (ret_type, \"mult_acc\");\n-\t  add_referenced_tmp_var (tmp);\n+\t  add_referenced_var (tmp);\n \n \t  phi = create_phi_node (tmp, first);\n \t  add_phi_arg (phi,"}, {"sha": "e73ea3b38788b7d8bc0ac61647219210b43fb6e4", "filename": "gcc/tree-vect-patterns.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f004ab022e2d651c3838e04a8c23243f71041964/gcc%2Ftree-vect-patterns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f004ab022e2d651c3838e04a8c23243f71041964/gcc%2Ftree-vect-patterns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-patterns.c?ref=f004ab022e2d651c3838e04a8c23243f71041964", "patch": "@@ -516,7 +516,7 @@ vect_pattern_recog_1 (\n   code = TREE_CODE (pattern_expr);\n   pattern_type = TREE_TYPE (pattern_expr);\n   var = create_tmp_var (pattern_type, \"patt\");\n-  add_referenced_tmp_var (var);\n+  add_referenced_var (var);\n   var_name = make_ssa_name (var, NULL_TREE);\n   pattern_expr = build2 (MODIFY_EXPR, void_type_node, var_name, pattern_expr);\n   SSA_NAME_DEF_STMT (var_name) = pattern_expr;"}, {"sha": "7b1227b6af8cd27f0b99d4fc376a7a417c39904f", "filename": "gcc/tree-vect-transform.c", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f004ab022e2d651c3838e04a8c23243f71041964/gcc%2Ftree-vect-transform.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f004ab022e2d651c3838e04a8c23243f71041964/gcc%2Ftree-vect-transform.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-transform.c?ref=f004ab022e2d651c3838e04a8c23243f71041964", "patch": "@@ -153,14 +153,14 @@ vect_create_addr_base_for_vector_ref (tree stmt,\n   /* Create base_offset */\n   base_offset = size_binop (PLUS_EXPR, base_offset, init);\n   dest = create_tmp_var (TREE_TYPE (base_offset), \"base_off\");\n-  add_referenced_tmp_var (dest);\n+  add_referenced_var (dest);\n   base_offset = force_gimple_operand (base_offset, &new_stmt, false, dest);  \n   append_to_statement_list_force (new_stmt, new_stmt_list);\n \n   if (offset)\n     {\n       tree tmp = create_tmp_var (TREE_TYPE (base_offset), \"offset\");\n-      add_referenced_tmp_var (tmp);\n+      add_referenced_var (tmp);\n       offset = fold_build2 (MULT_EXPR, TREE_TYPE (offset), offset,\n \t\t\t    DR_STEP (dr));\n       base_offset = fold_build2 (PLUS_EXPR, TREE_TYPE (base_offset),\n@@ -176,7 +176,7 @@ vect_create_addr_base_for_vector_ref (tree stmt,\n   /* addr_expr = addr_base */\n   addr_expr = vect_get_new_vect_var (scalar_ptr_type, vect_pointer_var,\n                                      get_name (base_name));\n-  add_referenced_tmp_var (addr_expr);\n+  add_referenced_var (addr_expr);\n   vec_stmt = build2 (MODIFY_EXPR, void_type_node, addr_expr, addr_base);\n   new_temp = make_ssa_name (addr_expr, vec_stmt);\n   TREE_OPERAND (vec_stmt, 0) = new_temp;\n@@ -291,7 +291,7 @@ vect_create_data_ref_ptr (tree stmt,\n   vect_ptr_type = build_pointer_type (vectype);\n   vect_ptr = vect_get_new_vect_var (vect_ptr_type, vect_pointer_var,\n                                     get_name (base_name));\n-  add_referenced_tmp_var (vect_ptr);\n+  add_referenced_var (vect_ptr);\n   \n   \n   /** (2) Add aliasing information to the new vector-pointer:\n@@ -389,7 +389,7 @@ vect_create_destination_var (tree scalar_dest, tree vectype)\n   if (!new_name)\n     new_name = \"var_\";\n   vec_dest = vect_get_new_vect_var (type, vect_simple_var, new_name);\n-  add_referenced_tmp_var (vec_dest);\n+  add_referenced_var (vec_dest);\n \n   return vec_dest;\n }\n@@ -416,7 +416,7 @@ vect_init_vector (tree stmt, tree vector_var)\n   basic_block new_bb;\n  \n   new_var = vect_get_new_vect_var (vectype, vect_simple_var, \"cst_\");\n-  add_referenced_tmp_var (new_var); \n+  add_referenced_var (new_var); \n  \n   init_stmt = build2 (MODIFY_EXPR, vectype, new_var, vector_var);\n   new_temp = make_ssa_name (new_var, init_stmt);\n@@ -2291,7 +2291,7 @@ vect_build_loop_niters (loop_vec_info loop_vinfo)\n   tree ni = unshare_expr (LOOP_VINFO_NITERS (loop_vinfo));\n \n   var = create_tmp_var (TREE_TYPE (ni), \"niters\");\n-  add_referenced_tmp_var (var);\n+  add_referenced_var (var);\n   ni_name = force_gimple_operand (ni, &stmt, false, var);\n \n   pe = loop_preheader_edge (loop);\n@@ -2342,7 +2342,7 @@ vect_generate_tmps_on_preheader (loop_vec_info loop_vinfo,\n   /* Create: ratio = ni >> log2(vf) */\n \n   var = create_tmp_var (TREE_TYPE (ni), \"bnd\");\n-  add_referenced_tmp_var (var);\n+  add_referenced_var (var);\n   ratio_name = make_ssa_name (var, NULL_TREE);\n   stmt = build2 (MODIFY_EXPR, void_type_node, ratio_name,\n \t   build2 (RSHIFT_EXPR, TREE_TYPE (ni_name), ni_name, log_vf));\n@@ -2355,7 +2355,7 @@ vect_generate_tmps_on_preheader (loop_vec_info loop_vinfo,\n   /* Create: ratio_mult_vf = ratio << log2 (vf).  */\n \n   var = create_tmp_var (TREE_TYPE (ni), \"ratio_mult_vf\");\n-  add_referenced_tmp_var (var);\n+  add_referenced_var (var);\n   ratio_mult_vf_name = make_ssa_name (var, NULL_TREE);\n   stmt = build2 (MODIFY_EXPR, void_type_node, ratio_mult_vf_name,\n \t   build2 (LSHIFT_EXPR, TREE_TYPE (ratio_name), ratio_name, log_vf));\n@@ -2556,7 +2556,7 @@ vect_update_ivs_after_vectorizer (loop_vec_info loop_vinfo, tree niters,\n \t\t       niters, step_expr), init_expr);\n \n       var = create_tmp_var (TREE_TYPE (init_expr), \"tmp\");\n-      add_referenced_tmp_var (var);\n+      add_referenced_var (var);\n \n       ni_name = force_gimple_operand (ni, &stmt, false, var);\n       \n@@ -2732,7 +2732,7 @@ vect_gen_niters_for_prolog_loop (loop_vec_info loop_vinfo, tree loop_niters)\n     }\n \n   var = create_tmp_var (niters_type, \"prolog_loop_niters\");\n-  add_referenced_tmp_var (var);\n+  add_referenced_var (var);\n   iters_name = force_gimple_operand (iters, &stmt, false, var);\n \n   /* Insert stmt on loop preheader edge.  */\n@@ -2905,7 +2905,7 @@ vect_create_cond_for_align_checks (loop_vec_info loop_vinfo,\n \n       sprintf (tmp_name, \"%s%d\", \"addr2int\", i);\n       addr_tmp = create_tmp_var (int_ptrsize_type, tmp_name);\n-      add_referenced_tmp_var (addr_tmp);\n+      add_referenced_var (addr_tmp);\n       addr_tmp_name = make_ssa_name (addr_tmp, NULL_TREE);\n       addr_stmt = fold_convert (int_ptrsize_type, addr_base);\n       addr_stmt = build2 (MODIFY_EXPR, void_type_node,\n@@ -2920,7 +2920,7 @@ vect_create_cond_for_align_checks (loop_vec_info loop_vinfo,\n           /* create: or_tmp = or_tmp | addr_tmp */\n           sprintf (tmp_name, \"%s%d\", \"orptrs\", i);\n           or_tmp = create_tmp_var (int_ptrsize_type, tmp_name);\n-          add_referenced_tmp_var (or_tmp);\n+          add_referenced_var (or_tmp);\n           new_or_tmp_name = make_ssa_name (or_tmp, NULL_TREE);\n           or_stmt = build2 (MODIFY_EXPR, void_type_node, new_or_tmp_name,\n                             build2 (BIT_IOR_EXPR, int_ptrsize_type,\n@@ -2939,7 +2939,7 @@ vect_create_cond_for_align_checks (loop_vec_info loop_vinfo,\n \n   /* create: and_tmp = or_tmp & mask  */\n   and_tmp = create_tmp_var (int_ptrsize_type, \"andmask\" );\n-  add_referenced_tmp_var (and_tmp);\n+  add_referenced_var (and_tmp);\n   and_tmp_name = make_ssa_name (and_tmp, NULL_TREE);\n \n   and_stmt = build2 (MODIFY_EXPR, void_type_node,"}]}