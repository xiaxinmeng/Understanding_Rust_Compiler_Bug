{"sha": "1089a367c4b05b5e3f072adca8913904ed65928c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTA4OWEzNjdjNGIwNWI1ZTNmMDcyYWRjYTg5MTM5MDRlZDY1OTI4Yw==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2020-05-22T10:31:34Z"}, "committer": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2020-05-22T10:31:34Z"}, "message": "Fix hashing of prestreamed nodes\n\nthis patch seems to solve basically all collisions while building cc1.\nFrom:\n\n[WPA] read 3312246 unshared trees\n[WPA] read 1144381 mergeable SCCs of average size 4.833785\n[WPA] 8843938 tree bodies read in total\n[WPA] tree SCC table: size 524287, 197767 elements, collision ratio: 0.506446\n[WPA] tree SCC max chain length 43 (size 1)\n[WPA] Compared 946614 SCCs, 775077 collisions (0.818789)\n\nto\n\n[WPA] read 3314520 unshared trees\n[WPA] read 1144763 mergeable SCCs of average size 4.835021\n[WPA] 8849473 tree bodies read in total\n[WPA] tree SCC table: size 524287, 200574 elements, collision ratio: 0.486418\n[WPA] tree SCC max chain length 2 (size 1)\n[WPA] Compared 944189 SCCs, 179 collisions (0.000190)\n\nThe problem is that preloaded nodes all have hash code 0 because\ncache->nodes.length is not updated while streaming out.\n\nI also added an arbitrary constant to avoid clash with constant of 0 used to\nhash NULL pointers and 1 used to hash pointers inside SCC.\n\n\t* tree-streamer.c (record_common_node): Fix hash value of pre-streamed\n\tnodes.", "tree": {"sha": "dc3005726895465873d326c1c26a4189f61e28da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dc3005726895465873d326c1c26a4189f61e28da"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1089a367c4b05b5e3f072adca8913904ed65928c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1089a367c4b05b5e3f072adca8913904ed65928c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1089a367c4b05b5e3f072adca8913904ed65928c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1089a367c4b05b5e3f072adca8913904ed65928c/comments", "author": null, "committer": null, "parents": [{"sha": "47273df0bcdd552385f25049dce71943aac8321e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47273df0bcdd552385f25049dce71943aac8321e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47273df0bcdd552385f25049dce71943aac8321e"}], "stats": {"total": 14, "additions": 10, "deletions": 4}, "files": [{"sha": "d22e9aa250e2fb2bce680ee4f81b74ce11f63839", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1089a367c4b05b5e3f072adca8913904ed65928c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1089a367c4b05b5e3f072adca8913904ed65928c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1089a367c4b05b5e3f072adca8913904ed65928c", "patch": "@@ -1,3 +1,8 @@\n+2020-05-22  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* tree-streamer.c (record_common_node): Fix hash value of pre-streamed\n+\tnodes.\n+\n 2020-05-22  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* lto-streamer-in.c (lto_read_tree): Do not stream end markers."}, {"sha": "b0afa1dc6c0c29ef2cf0d9e2b50337ce27ecd89b", "filename": "gcc/tree-streamer.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1089a367c4b05b5e3f072adca8913904ed65928c/gcc%2Ftree-streamer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1089a367c4b05b5e3f072adca8913904ed65928c/gcc%2Ftree-streamer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-streamer.c?ref=1089a367c4b05b5e3f072adca8913904ed65928c", "patch": "@@ -299,10 +299,11 @@ record_common_node (struct streamer_tree_cache_d *cache, tree node)\n   if (!node)\n     node = error_mark_node;\n \n-  /* ???  FIXME, devise a better hash value.  But the hash needs to be equal\n-     for all frontend and lto1 invocations.  So just use the position\n-     in the cache as hash value.  */\n-  streamer_tree_cache_append (cache, node, cache->nodes.length ());\n+  /* This hash needs to be equal for all frontend and lto1 invocations.  So\n+     just use the position in the cache as hash value.\n+     Small integers are used by hash_tree to record positions within scc\n+     hash. Values are not in same range.  */\n+  streamer_tree_cache_append (cache, node, cache->next_idx + 0xc001);\n \n   switch (TREE_CODE (node))\n     {"}]}