{"sha": "06acf7d0ad169b40c2e7f83c7ed808b2e196a6a4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDZhY2Y3ZDBhZDE2OWI0MGMyZTdmODNjN2VkODA4YjJlMTk2YTZhNA==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@nildram.co.uk", "date": "2007-11-09T12:11:48Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2007-11-09T12:11:48Z"}, "message": "dse.c (find_shift_sequence): Always choose an integer mode for new_mode.\n\ngcc/\n\t* dse.c (find_shift_sequence): Always choose an integer mode for\n\tnew_mode.\n\t(replace_read): Require both the read and store mode to be\n\tinteger ones.  Remove a then-redundant FLOAT_P check.\n\ngcc/testsuite/\n\t* gcc.target/mips/dse-1.c: Disable.\n\nFrom-SVN: r130039", "tree": {"sha": "f19b799e19f9ca3fd962b7caa8a728b5a281f61c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f19b799e19f9ca3fd962b7caa8a728b5a281f61c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/06acf7d0ad169b40c2e7f83c7ed808b2e196a6a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06acf7d0ad169b40c2e7f83c7ed808b2e196a6a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06acf7d0ad169b40c2e7f83c7ed808b2e196a6a4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06acf7d0ad169b40c2e7f83c7ed808b2e196a6a4/comments", "author": null, "committer": null, "parents": [{"sha": "ea9d4a19375522ae9834d75edb217325f3c3e111", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea9d4a19375522ae9834d75edb217325f3c3e111", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea9d4a19375522ae9834d75edb217325f3c3e111"}], "stats": {"total": 27, "additions": 21, "deletions": 6}, "files": [{"sha": "d4e13bdb88c2694af18665aacc7e087ea7cadf12", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06acf7d0ad169b40c2e7f83c7ed808b2e196a6a4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06acf7d0ad169b40c2e7f83c7ed808b2e196a6a4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=06acf7d0ad169b40c2e7f83c7ed808b2e196a6a4", "patch": "@@ -1,3 +1,10 @@\n+2007-11-09  Richard Sandiford  <rsandifo@nildram.co.uk>\n+\n+\t* dse.c (find_shift_sequence): Always choose an integer mode for\n+\tnew_mode.\n+\t(replace_read): Require both the read and store mode to be\n+\tinteger ones.  Remove a then-redundant FLOAT_P check.\n+\n 2007-11-08  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-dfa.c (remove_referenced_var): If removing a"}, {"sha": "2b860187fbe9a22fd152225fc914d5abb9968ead", "filename": "gcc/dse.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06acf7d0ad169b40c2e7f83c7ed808b2e196a6a4/gcc%2Fdse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06acf7d0ad169b40c2e7f83c7ed808b2e196a6a4/gcc%2Fdse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdse.c?ref=06acf7d0ad169b40c2e7f83c7ed808b2e196a6a4", "patch": "@@ -1447,7 +1447,7 @@ find_shift_sequence (rtx read_reg,\n \tcontinue;\n \n       new_mode = smallest_mode_for_size (access_size * BITS_PER_UNIT,\n-\t\t\t\t\t GET_MODE_CLASS (read_mode));\n+\t\t\t\t\t MODE_INT);\n       new_reg = gen_reg_rtx (new_mode);\n \n       start_sequence ();\n@@ -1473,9 +1473,8 @@ find_shift_sequence (rtx read_reg,\n \t of the arguments and could be precomputed.  It may\n \t not be worth doing so.  We could precompute if\n \t worthwhile or at least cache the results.  The result\n-\t technically depends on SHIFT, ACCESS_SIZE, and\n-\t GET_MODE_CLASS (READ_MODE).  But in practice the\n-\t answer will depend only on ACCESS_SIZE.  */\n+\t technically depends on both SHIFT and ACCESS_SIZE,\n+\t but in practice the answer will depend only on ACCESS_SIZE.  */\n \n       if (cost > COSTS_N_INSNS (1))\n \tcontinue;\n@@ -1557,7 +1556,8 @@ replace_read (store_info_t store_info, insn_info_t store_insn,\n   if (!dbg_cnt (dse))\n     return false;\n \n-  if (GET_MODE_CLASS (read_mode) != GET_MODE_CLASS (store_mode))\n+  if (GET_MODE_CLASS (read_mode) != MODE_INT\n+      || GET_MODE_CLASS (store_mode) != MODE_INT)\n     return false;\n \n   /* To get here the read is within the boundaries of the write so\n@@ -1580,7 +1580,7 @@ replace_read (store_info_t store_info, insn_info_t store_insn,\n      call to get rid of the read.  */\n   if (shift)\n     {\n-      if (access_size > UNITS_PER_WORD || FLOAT_MODE_P (store_mode))\n+      if (access_size > UNITS_PER_WORD)\n \treturn false;\n \n       shift_seq = find_shift_sequence (read_reg, access_size, store_info,"}, {"sha": "0f31de012e5447341da699b1e9b5a9b3fea545d8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06acf7d0ad169b40c2e7f83c7ed808b2e196a6a4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06acf7d0ad169b40c2e7f83c7ed808b2e196a6a4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=06acf7d0ad169b40c2e7f83c7ed808b2e196a6a4", "patch": "@@ -1,3 +1,7 @@\n+2007-11-09  Richard Sandiford  <rsandifo@nildram.co.uk>\n+\n+\t* gcc.target/mips/dse-1.c: Disable.\n+\n 2007-11-08  Tom Tromey  <tromey@redhat.com>\n \n \t* gcc.dg/empty-source-3.c: Update warning location."}, {"sha": "0a21af7556e8cd98fb535218c41efcb399cb07c5", "filename": "gcc/testsuite/gcc.target/mips/dse-1.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06acf7d0ad169b40c2e7f83c7ed808b2e196a6a4/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fdse-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06acf7d0ad169b40c2e7f83c7ed808b2e196a6a4/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fdse-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fdse-1.c?ref=06acf7d0ad169b40c2e7f83c7ed808b2e196a6a4", "patch": "@@ -1,3 +1,7 @@\n+/* ??? Further to the subreg comment below, we can't rely on any of the\n+   tests passing unless we handle subregs, and the patch to do so has\n+   been rejected for the time being.  */\n+/* { dg-do compile { target { ! *-*-* } } } */\n /* { dg-mips-options \"-mgp64 -O\" } */\n \n #define TEST(ID, TYPE1, TYPE2)\t\t\t\t\t\\"}]}