{"sha": "efb7c51024ccad9df293e6caf134d78b3d00cf89", "node_id": "C_kwDOANBUbNoAKGVmYjdjNTEwMjRjY2FkOWRmMjkzZTZjYWYxMzRkNzhiM2QwMGNmODk", "commit": {"author": {"name": "Matthias Kretz", "email": "m.kretz@gsi.de", "date": "2021-07-16T08:46:24Z"}, "committer": {"name": "Matthias Kretz", "email": "m.kretz@gsi.de", "date": "2021-11-18T10:24:11Z"}, "message": "c-family: Add __builtin_assoc_barrier\n\nNew builtin to enable explicit use of PAREN_EXPR in C & C++ code.\n\nSigned-off-by: Matthias Kretz <m.kretz@gsi.de>\n\ngcc/testsuite/ChangeLog:\n\n\t* c-c++-common/builtin-assoc-barrier-1.c: New test.\n\ngcc/cp/ChangeLog:\n\n\t* constexpr.c (cxx_eval_constant_expression): Handle PAREN_EXPR\n\tvia cxx_eval_constant_expression.\n\t* cp-objcp-common.c (names_builtin_p): Handle\n\tRID_BUILTIN_ASSOC_BARRIER.\n\t* cp-tree.h: Adjust TREE_LANG_FLAG documentation to include\n\tPAREN_EXPR in REF_PARENTHESIZED_P.\n\t(REF_PARENTHESIZED_P): Add PAREN_EXPR.\n\t* parser.c (cp_parser_postfix_expression): Handle\n\tRID_BUILTIN_ASSOC_BARRIER.\n\t* pt.c (tsubst_copy_and_build): If the PAREN_EXPR is not a\n\tparenthesized initializer, build a new PAREN_EXPR.\n\t* semantics.c (force_paren_expr): Simplify conditionals. Set\n\tREF_PARENTHESIZED_P on PAREN_EXPR.\n\t(maybe_undo_parenthesized_ref): Test PAREN_EXPR for\n\tREF_PARENTHESIZED_P.\n\ngcc/c-family/ChangeLog:\n\n\t* c-common.c (c_common_reswords): Add __builtin_assoc_barrier.\n\t* c-common.h (enum rid): Add RID_BUILTIN_ASSOC_BARRIER.\n\ngcc/c/ChangeLog:\n\n\t* c-decl.c (names_builtin_p): Handle RID_BUILTIN_ASSOC_BARRIER.\n\t* c-parser.c (c_parser_postfix_expression): Likewise.\n\ngcc/ChangeLog:\n\n\t* doc/extend.texi: Document __builtin_assoc_barrier.", "tree": {"sha": "571a6a7d4dbf3d5df7235bb4dca060b50b14d41e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/571a6a7d4dbf3d5df7235bb4dca060b50b14d41e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/efb7c51024ccad9df293e6caf134d78b3d00cf89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efb7c51024ccad9df293e6caf134d78b3d00cf89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efb7c51024ccad9df293e6caf134d78b3d00cf89", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efb7c51024ccad9df293e6caf134d78b3d00cf89/comments", "author": {"login": "mattkretz", "id": 3306474, "node_id": "MDQ6VXNlcjMzMDY0NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3306474?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattkretz", "html_url": "https://github.com/mattkretz", "followers_url": "https://api.github.com/users/mattkretz/followers", "following_url": "https://api.github.com/users/mattkretz/following{/other_user}", "gists_url": "https://api.github.com/users/mattkretz/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattkretz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattkretz/subscriptions", "organizations_url": "https://api.github.com/users/mattkretz/orgs", "repos_url": "https://api.github.com/users/mattkretz/repos", "events_url": "https://api.github.com/users/mattkretz/events{/privacy}", "received_events_url": "https://api.github.com/users/mattkretz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mattkretz", "id": 3306474, "node_id": "MDQ6VXNlcjMzMDY0NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3306474?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattkretz", "html_url": "https://github.com/mattkretz", "followers_url": "https://api.github.com/users/mattkretz/followers", "following_url": "https://api.github.com/users/mattkretz/following{/other_user}", "gists_url": "https://api.github.com/users/mattkretz/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattkretz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattkretz/subscriptions", "organizations_url": "https://api.github.com/users/mattkretz/orgs", "repos_url": "https://api.github.com/users/mattkretz/repos", "events_url": "https://api.github.com/users/mattkretz/events{/privacy}", "received_events_url": "https://api.github.com/users/mattkretz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "edd2249b17fb7150da66b03adb1a4e381926047d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/edd2249b17fb7150da66b03adb1a4e381926047d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/edd2249b17fb7150da66b03adb1a4e381926047d"}], "stats": {"total": 181, "additions": 158, "deletions": 23}, "files": [{"sha": "86c007f53def301ab2cc1a0f7c971b213b2e7944", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb7c51024ccad9df293e6caf134d78b3d00cf89/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb7c51024ccad9df293e6caf134d78b3d00cf89/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=efb7c51024ccad9df293e6caf134d78b3d00cf89", "patch": "@@ -384,6 +384,7 @@ const struct c_common_resword c_common_reswords[] =\n   { \"__builtin_convertvector\", RID_BUILTIN_CONVERTVECTOR, 0 },\n   { \"__builtin_has_attribute\", RID_BUILTIN_HAS_ATTRIBUTE, 0 },\n   { \"__builtin_launder\", RID_BUILTIN_LAUNDER, D_CXXONLY },\n+  { \"__builtin_assoc_barrier\", RID_BUILTIN_ASSOC_BARRIER, 0 },\n   { \"__builtin_shuffle\", RID_BUILTIN_SHUFFLE, 0 },\n   { \"__builtin_shufflevector\", RID_BUILTIN_SHUFFLEVECTOR, 0 },\n   { \"__builtin_tgmath\", RID_BUILTIN_TGMATH, D_CONLY },"}, {"sha": "c089fda12e407f83b88b500ea1c2ae78a1b22eba", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb7c51024ccad9df293e6caf134d78b3d00cf89/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb7c51024ccad9df293e6caf134d78b3d00cf89/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=efb7c51024ccad9df293e6caf134d78b3d00cf89", "patch": "@@ -108,7 +108,7 @@ enum rid\n   RID_EXTENSION, RID_IMAGPART, RID_REALPART, RID_LABEL,      RID_CHOOSE_EXPR,\n   RID_TYPES_COMPATIBLE_P,      RID_BUILTIN_COMPLEX,\t     RID_BUILTIN_SHUFFLE,\n   RID_BUILTIN_SHUFFLEVECTOR,   RID_BUILTIN_CONVERTVECTOR,   RID_BUILTIN_TGMATH,\n-  RID_BUILTIN_HAS_ATTRIBUTE,\n+  RID_BUILTIN_HAS_ATTRIBUTE,   RID_BUILTIN_ASSOC_BARRIER,\n   RID_DFLOAT32, RID_DFLOAT64, RID_DFLOAT128,\n \n   /* TS 18661-3 keywords, in the same sequence as the TI_* values.  */"}, {"sha": "3e28a038095ecc495ed67d400f53d1b059ceec92", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb7c51024ccad9df293e6caf134d78b3d00cf89/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb7c51024ccad9df293e6caf134d78b3d00cf89/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=efb7c51024ccad9df293e6caf134d78b3d00cf89", "patch": "@@ -10621,6 +10621,7 @@ names_builtin_p (const char *name)\n     case RID_BUILTIN_HAS_ATTRIBUTE:\n     case RID_BUILTIN_SHUFFLE:\n     case RID_BUILTIN_SHUFFLEVECTOR:\n+    case RID_BUILTIN_ASSOC_BARRIER:\n     case RID_CHOOSE_EXPR:\n     case RID_OFFSETOF:\n     case RID_TYPES_COMPATIBLE_P:"}, {"sha": "81eea18dc88fee83d3e148cfd4784ab21c7576e6", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb7c51024ccad9df293e6caf134d78b3d00cf89/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb7c51024ccad9df293e6caf134d78b3d00cf89/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=efb7c51024ccad9df293e6caf134d78b3d00cf89", "patch": "@@ -8962,6 +8962,7 @@ c_parser_predefined_identifier (c_parser *parser)\n \t\t\t assignment-expression ,\n \t\t\t assignment-expression, )\n      __builtin_convertvector ( assignment-expression , type-name )\n+     __builtin_assoc_barrier ( assignment-expression )\n \n    offsetof-member-designator:\n      identifier\n@@ -10107,6 +10108,25 @@ c_parser_postfix_expression (c_parser *parser)\n \t      }\n \t  }\n \t  break;\n+\tcase RID_BUILTIN_ASSOC_BARRIER:\n+\t  {\n+\t    location_t start_loc = loc;\n+\t    c_parser_consume_token (parser);\n+\t    matching_parens parens;\n+\t    if (!parens.require_open (parser))\n+\t      {\n+\t\texpr.set_error ();\n+\t\tbreak;\n+\t      }\n+\t    e1 = c_parser_expr_no_commas (parser, NULL);\n+\t    mark_exp_read (e1.value);\n+\t    location_t end_loc = c_parser_peek_token (parser)->get_finish ();\n+\t    parens.skip_until_found_close (parser);\n+\t    expr.value = build1_loc (loc, PAREN_EXPR, TREE_TYPE (e1.value),\n+\t\t\t\t     e1.value);\n+\t    set_c_expr_source_range (&expr, start_loc, end_loc);\n+\t  }\n+\t  break;\n \tcase RID_AT_SELECTOR:\n \t  {\n \t    gcc_assert (c_dialect_objc ());"}, {"sha": "c8f9d5fa13352c1d27aac60bb05dcd495984175e", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb7c51024ccad9df293e6caf134d78b3d00cf89/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb7c51024ccad9df293e6caf134d78b3d00cf89/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=efb7c51024ccad9df293e6caf134d78b3d00cf89", "patch": "@@ -6901,6 +6901,14 @@ cxx_eval_constant_expression (const constexpr_ctx *ctx, tree t,\n \t\t\t\t       non_constant_p, overflow_p);\n       break;\n \n+    case PAREN_EXPR:\n+      gcc_assert (!REF_PARENTHESIZED_P (t));\n+      /* A PAREN_EXPR resulting from __builtin_assoc_barrier has no effect in\n+         constant expressions since it's unaffected by -fassociative-math.  */\n+      r = cxx_eval_constant_expression (ctx, TREE_OPERAND (t, 0), lval,\n+\t\t\t\t\tnon_constant_p, overflow_p);\n+      break;\n+\n     case NOP_EXPR:\n       if (REINTERPRET_CAST_P (t))\n \t{"}, {"sha": "38eae881f0c11322efbb235f7d9f86a856916e08", "filename": "gcc/cp/cp-objcp-common.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb7c51024ccad9df293e6caf134d78b3d00cf89/gcc%2Fcp%2Fcp-objcp-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb7c51024ccad9df293e6caf134d78b3d00cf89/gcc%2Fcp%2Fcp-objcp-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-objcp-common.c?ref=efb7c51024ccad9df293e6caf134d78b3d00cf89", "patch": "@@ -404,6 +404,7 @@ names_builtin_p (const char *name)\n     case RID_BUILTIN_SHUFFLE:\n     case RID_BUILTIN_SHUFFLEVECTOR:\n     case RID_BUILTIN_LAUNDER:\n+    case RID_BUILTIN_ASSOC_BARRIER:\n     case RID_BUILTIN_BIT_CAST:\n     case RID_OFFSETOF:\n     case RID_HAS_NOTHROW_ASSIGN:"}, {"sha": "3f56cb90d1454c70ed14caaf2d9035f25e660548", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb7c51024ccad9df293e6caf134d78b3d00cf89/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb7c51024ccad9df293e6caf134d78b3d00cf89/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=efb7c51024ccad9df293e6caf134d78b3d00cf89", "patch": "@@ -473,7 +473,8 @@ extern GTY(()) tree cp_global_trees[CPTI_MAX];\n       TARGET_EXPR_DIRECT_INIT_P (in TARGET_EXPR)\n       FNDECL_USED_AUTO (in FUNCTION_DECL)\n       DECLTYPE_FOR_LAMBDA_PROXY (in DECLTYPE_TYPE)\n-      REF_PARENTHESIZED_P (in COMPONENT_REF, INDIRECT_REF, SCOPE_REF, VIEW_CONVERT_EXPR)\n+      REF_PARENTHESIZED_P (in COMPONENT_REF, INDIRECT_REF, SCOPE_REF,\n+\t\t\t   VIEW_CONVERT_EXPR, PAREN_EXPR)\n       AGGR_INIT_ZERO_FIRST (in AGGR_INIT_EXPR)\n       CONSTRUCTOR_MUTABLE_POISON (in CONSTRUCTOR)\n       OVL_HIDDEN_P (in OVERLOAD)\n@@ -4041,12 +4042,13 @@ struct GTY(()) lang_decl {\n #define PAREN_STRING_LITERAL_P(NODE) \\\n   TREE_LANG_FLAG_0 (STRING_CST_CHECK (NODE))\n \n-/* Indicates whether a COMPONENT_REF or a SCOPE_REF has been parenthesized, or\n-   an INDIRECT_REF comes from parenthesizing a _DECL.  Currently only set some\n-   of the time in C++14 mode.  */\n+/* Indicates whether a COMPONENT_REF or a SCOPE_REF has been parenthesized, an\n+   INDIRECT_REF comes from parenthesizing a _DECL, or a PAREN_EXPR identifies a\n+   parenthesized initializer relevant for decltype(auto).  Currently only set\n+   some of the time in C++14 mode.  */\n \n #define REF_PARENTHESIZED_P(NODE) \\\n-  TREE_LANG_FLAG_2 (TREE_CHECK4 ((NODE), COMPONENT_REF, INDIRECT_REF, SCOPE_REF, VIEW_CONVERT_EXPR))\n+  TREE_LANG_FLAG_2 (TREE_CHECK5 ((NODE), COMPONENT_REF, INDIRECT_REF, SCOPE_REF, VIEW_CONVERT_EXPR, PAREN_EXPR))\n \n /* Nonzero if this AGGR_INIT_EXPR provides for initialization via a\n    constructor call, rather than an ordinary function call.  */"}, {"sha": "65f0f112011a29b9b7d861a72ed89d9b12ac2a5e", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb7c51024ccad9df293e6caf134d78b3d00cf89/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb7c51024ccad9df293e6caf134d78b3d00cf89/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=efb7c51024ccad9df293e6caf134d78b3d00cf89", "patch": "@@ -7354,6 +7354,7 @@ cp_parser_postfix_expression (cp_parser *parser, bool address_p, bool cast_p,\n     case RID_BUILTIN_SHUFFLE:\n     case RID_BUILTIN_SHUFFLEVECTOR:\n     case RID_BUILTIN_LAUNDER:\n+    case RID_BUILTIN_ASSOC_BARRIER:\n       {\n \tvec<tree, va_gc> *vec;\n \n@@ -7396,6 +7397,19 @@ cp_parser_postfix_expression (cp_parser *parser, bool address_p, bool cast_p,\n \t      }\n \t    break;\n \n+\t  case RID_BUILTIN_ASSOC_BARRIER:\n+\t    if (vec->length () == 1)\n+\t      postfix_expression = build1_loc (loc, PAREN_EXPR,\n+\t\t\t\t\t       TREE_TYPE ((*vec)[0]),\n+\t\t\t\t\t       (*vec)[0]);\n+\t    else\n+\t      {\n+\t\terror_at (loc, \"wrong number of arguments to \"\n+\t\t\t       \"%<__builtin_assoc_barrier%>\");\n+\t\tpostfix_expression = error_mark_node;\n+\t      }\n+\t    break;\n+\n \t  case RID_BUILTIN_SHUFFLE:\n \t    if (vec->length () == 2)\n \t      postfix_expression"}, {"sha": "b27eea33272eacb0a6577a90007840b94c4c6e2e", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb7c51024ccad9df293e6caf134d78b3d00cf89/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb7c51024ccad9df293e6caf134d78b3d00cf89/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=efb7c51024ccad9df293e6caf134d78b3d00cf89", "patch": "@@ -21010,7 +21010,15 @@ tsubst_copy_and_build (tree t,\n \t     integral_constant_expression_p));\n \n     case PAREN_EXPR:\n-      RETURN (finish_parenthesized_expr (RECUR (TREE_OPERAND (t, 0))));\n+      if (REF_PARENTHESIZED_P (t))\n+\tRETURN (finish_parenthesized_expr (RECUR (TREE_OPERAND (t, 0))));\n+      else\n+\t/* Recreate the PAREN_EXPR from __builtin_assoc_barrier.  */\n+\t{\n+\t  tree op0 = RECUR (TREE_OPERAND (t, 0));\n+\t  RETURN (build1_loc (input_location, PAREN_EXPR,\n+\t\t\t      TREE_TYPE (op0), op0));\n+\t}\n \n     case VEC_PERM_EXPR:\n       {"}, {"sha": "8f79f047c01cbe1f48fd9bdf4b5c89b624cb098d", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 7, "deletions": 16, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb7c51024ccad9df293e6caf134d78b3d00cf89/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb7c51024ccad9df293e6caf134d78b3d00cf89/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=efb7c51024ccad9df293e6caf134d78b3d00cf89", "patch": "@@ -2048,24 +2048,17 @@ force_paren_expr (tree expr, bool even_uneval)\n   if (cp_unevaluated_operand && !even_uneval)\n     return expr;\n \n-  if (!DECL_P (tree_strip_any_location_wrapper (expr))\n-      && TREE_CODE (expr) != COMPONENT_REF\n-      && TREE_CODE (expr) != SCOPE_REF)\n-    return expr;\n-\n-  location_t loc = cp_expr_location (expr);\n-\n   if (TREE_CODE (expr) == COMPONENT_REF\n       || TREE_CODE (expr) == SCOPE_REF)\n     REF_PARENTHESIZED_P (expr) = true;\n-  else if (processing_template_decl)\n-    expr = build1_loc (loc, PAREN_EXPR, TREE_TYPE (expr), expr);\n-  else\n+  else if (DECL_P (tree_strip_any_location_wrapper (expr)))\n     {\n-      expr = build1_loc (loc, VIEW_CONVERT_EXPR, TREE_TYPE (expr), expr);\n+      location_t loc = cp_expr_location (expr);\n+      const tree_code code = processing_template_decl ? PAREN_EXPR\n+\t\t\t\t\t\t      : VIEW_CONVERT_EXPR;\n+      expr = build1_loc (loc, code, TREE_TYPE (expr), expr);\n       REF_PARENTHESIZED_P (expr) = true;\n     }\n-\n   return expr;\n }\n \n@@ -2090,10 +2083,8 @@ maybe_undo_parenthesized_ref (tree t)\n \t\t  || TREE_CODE (t) == STATIC_CAST_EXPR);\n       t = TREE_OPERAND (t, 0);\n     }\n-  else if (TREE_CODE (t) == PAREN_EXPR)\n-    t = TREE_OPERAND (t, 0);\n-  else if (TREE_CODE (t) == VIEW_CONVERT_EXPR\n-\t   && REF_PARENTHESIZED_P (t))\n+  else if ((TREE_CODE (t) == PAREN_EXPR || TREE_CODE (t) == VIEW_CONVERT_EXPR)\n+\t     && REF_PARENTHESIZED_P (t))\n     t = TREE_OPERAND (t, 0);\n \n   return t;"}, {"sha": "ef654d7b878878fe6344986390307211cfac74e3", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb7c51024ccad9df293e6caf134d78b3d00cf89/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb7c51024ccad9df293e6caf134d78b3d00cf89/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=efb7c51024ccad9df293e6caf134d78b3d00cf89", "patch": "@@ -14043,6 +14043,24 @@ int g (int c)\n \n @end deftypefn\n \n+@deftypefn {Built-in Function} @var{type} __builtin_assoc_barrier (@var{type} @var{expr})\n+This built-in inhibits re-association of the floating-point expression\n+@var{expr} with expressions consuming the return value of the built-in. The\n+expression @var{expr} itself can be reordered, and the whole expression\n+@var{expr} can be reordered with operands after the barrier. The barrier is\n+only relevant when @code{-fassociative-math} is active, since otherwise\n+floating-point is not treated as associative.\n+\n+@smallexample\n+float x0 = a + b - b;\n+float x1 = __builtin_assoc_barrier(a + b) - b;\n+@end smallexample\n+\n+@noindent\n+means that, with @code{-fassociative-math}, @code{x0} can be optimized to\n+@code{x0 = a} but @code{x1} cannot.\n+@end deftypefn\n+\n @deftypefn {Built-in Function} {void *} __builtin_assume_aligned (const void *@var{exp}, size_t @var{align}, ...)\n This function returns its first argument, and allows the compiler\n to assume that the returned pointer is at least @var{align} bytes"}, {"sha": "3ff324982cfd1c914f7a2760b42d1d419c9e7ffa", "filename": "gcc/testsuite/c-c++-common/builtin-assoc-barrier-1.c", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efb7c51024ccad9df293e6caf134d78b3d00cf89/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fbuiltin-assoc-barrier-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efb7c51024ccad9df293e6caf134d78b3d00cf89/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fbuiltin-assoc-barrier-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fbuiltin-assoc-barrier-1.c?ref=efb7c51024ccad9df293e6caf134d78b3d00cf89", "patch": "@@ -0,0 +1,71 @@\n+// { dg-options \"-O2 -ffast-math\" }\n+/* { dg-do run } */\n+\n+float a = 1.f;\n+float b = 1.e20f;\n+\n+float\n+fast()\n+{\n+  return __builtin_assoc_barrier (a + b) - b;\n+}\n+\n+__attribute__((optimize(\"-fno-associative-math\")))\n+float\n+normal()\n+{\n+  return a + b - b;\n+}\n+\n+void test0()\n+{\n+  if (fast() != normal())\n+    __builtin_abort();\n+}\n+\n+#ifdef __cplusplus\n+#ifdef __cpp_constexpr\n+constexpr float\n+pm(float x, float y)\n+{\n+  return __builtin_assoc_barrier(x + y) - y;\n+}\n+\n+template <int x>\n+  constexpr int\n+  f()\n+  {\n+    return x;\n+  }\n+#endif\n+\n+template <class T>\n+  T\n+  pm(T x, T y)\n+  {\n+    return __builtin_assoc_barrier(x + y) - y;\n+  }\n+\n+void test1()\n+{\n+  if (pm(a, b) != normal())\n+    __builtin_abort();\n+#ifdef __cpp_constexpr\n+  constexpr float x = pm(1.f, 1.e20f);\n+  constexpr int y = f<int(pm(1.f, 1.e20f))>();\n+  if (x != normal())\n+    __builtin_abort();\n+  if (y != 0)\n+    __builtin_abort();\n+#endif\n+}\n+#else\n+void test1() {}\n+#endif\n+\n+int main()\n+{\n+  test0();\n+  test1();\n+  return 0;\n+}"}]}