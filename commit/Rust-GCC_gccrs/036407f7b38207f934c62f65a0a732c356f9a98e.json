{"sha": "036407f7b38207f934c62f65a0a732c356f9a98e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDM2NDA3ZjdiMzgyMDdmOTM0YzYyZjY1YTBhNzMyYzM1NmY5YTk4ZQ==", "commit": {"author": {"name": "Martin v. L\u00f6wis", "email": "loewis@informatik.hu-berlin.de", "date": "1998-05-20T19:08:59Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1998-05-20T19:08:59Z"}, "message": "decl.c (record_unknown_type): New function.\n\n\t* decl.c (record_unknown_type): New function.\n\t(init_decl_processing): Call it for the unknown and global type\n\tnodes.\n\nFrom-SVN: r19912", "tree": {"sha": "b265b35874cb2bc8b68c02b69a2adec9fbb83d86", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b265b35874cb2bc8b68c02b69a2adec9fbb83d86"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/036407f7b38207f934c62f65a0a732c356f9a98e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/036407f7b38207f934c62f65a0a732c356f9a98e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/036407f7b38207f934c62f65a0a732c356f9a98e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/036407f7b38207f934c62f65a0a732c356f9a98e/comments", "author": null, "committer": null, "parents": [{"sha": "4e5a8d7b868a22aeb18f68fc15198943a165ada5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e5a8d7b868a22aeb18f68fc15198943a165ada5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e5a8d7b868a22aeb18f68fc15198943a165ada5"}], "stats": {"total": 35, "additions": 26, "deletions": 9}, "files": [{"sha": "29c3ce5879994b207ed45c0a21054e99644dbf58", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/036407f7b38207f934c62f65a0a732c356f9a98e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/036407f7b38207f934c62f65a0a732c356f9a98e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=036407f7b38207f934c62f65a0a732c356f9a98e", "patch": "@@ -1,3 +1,9 @@\n+1998-05-20  Martin von Loewis  <loewis@informatik.hu-berlin.de>\n+\n+\t* decl.c (record_unknown_type): New function.\n+\t(init_decl_processing): Call it for the unknown and global type\n+\tnodes.\n+\n 1998-05-20  Mark Mitchell  <mmitchell@usa.net>\n \n \t* decl2.c (find_representative_member): New function."}, {"sha": "c067fe2b05cbe09c2a9235dd7ef5b591d9db171a", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 20, "deletions": 9, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/036407f7b38207f934c62f65a0a732c356f9a98e/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/036407f7b38207f934c62f65a0a732c356f9a98e/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=036407f7b38207f934c62f65a0a732c356f9a98e", "patch": "@@ -168,6 +168,7 @@ static tree lookup_tag PROTO((enum tree_code, tree,\n static void set_identifier_type_value_with_scope\n \tPROTO((tree, tree, struct binding_level *));\n static void record_builtin_type PROTO((enum rid, char *, tree));\n+static void record_unknown_type PROTO((tree, char *));\n static int member_function_or_else PROTO((tree, tree, char *));\n static void bad_specifiers PROTO((tree, char *, int, int, int, int,\n \t\t\t\t  int));\n@@ -5102,6 +5103,22 @@ record_builtin_type (rid_index, name, type)\n     }\n }\n \n+/* Push a type into the namespace so that the back-ends ignore it. */\n+\n+static void\n+record_unknown_type (type, name)\n+     tree type;\n+     char *name;\n+{\n+  tree decl = pushdecl (build_decl (TYPE_DECL, get_identifier (name), type));\n+  /* Make sure the \"unknown type\" typedecl gets ignored for debug info.  */\n+  DECL_IGNORED_P (decl) = 1;\n+  TYPE_DECL_SUPPRESS_DEBUG (decl) = 1;\n+  TYPE_SIZE (type) = TYPE_SIZE (void_type_node);\n+  TYPE_ALIGN (type) = 1;\n+  TYPE_MODE (type) = TYPE_MODE (void_type_node);\n+} \n+\n /* Push overloaded decl, in global scope, with one argument so it\n    can be used as a callback from define_function.  */\n \n@@ -5697,14 +5714,8 @@ init_decl_processing ()\n   /* C++ extensions */\n \n   unknown_type_node = make_node (UNKNOWN_TYPE);\n-  decl = pushdecl (build_decl (TYPE_DECL, get_identifier (\"unknown type\"),\n-\t\t\tunknown_type_node));\n-  /* Make sure the \"unknown type\" typedecl gets ignored for debug info.  */\n-  DECL_IGNORED_P (decl) = 1;\n-  TYPE_DECL_SUPPRESS_DEBUG (decl) = 1;\n-  TYPE_SIZE (unknown_type_node) = TYPE_SIZE (void_type_node);\n-  TYPE_ALIGN (unknown_type_node) = 1;\n-  TYPE_MODE (unknown_type_node) = TYPE_MODE (void_type_node);\n+  record_unknown_type (unknown_type_node, \"unknown type\");\n+\n   /* Indirecting an UNKNOWN_TYPE node yields an UNKNOWN_TYPE node.  */\n   TREE_TYPE (unknown_type_node) = unknown_type_node;\n \n@@ -5828,7 +5839,7 @@ init_decl_processing ()\n   pushdecl (std_node);\n \n   global_type_node = make_node (LANG_TYPE);\n-  record_builtin_type (RID_MAX, \"global type\", global_type_node);\n+  record_unknown_type (global_type_node, \"global type\");\n \n   /* Now, C++.  */\n   current_lang_name = lang_name_cplusplus;"}]}