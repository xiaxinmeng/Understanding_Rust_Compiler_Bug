{"sha": "0bd99911eea170dc9c627fd17d55e7c3ab8d4286", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGJkOTk5MTFlZWExNzBkYzljNjI3ZmQxN2Q1NWU3YzNhYjhkNDI4Ng==", "commit": {"author": {"name": "Palmer Dabbelt", "email": "palmer@dabbelt.com", "date": "2017-02-06T21:38:51Z"}, "committer": {"name": "Palmer Dabbelt", "email": "palmer@gcc.gnu.org", "date": "2017-02-06T21:38:51Z"}, "message": "RISC-V Port: libgcc\n\nlibgcc/ChangeLog:\n\n2017-02-06  Palmer Dabbelt <palmer@dabbelt.com>\n\n        * config.host: Add RISC-V tuples.\n        * config/riscv/atomic.c: New file.\n        * config/riscv/crti.S: Likewise.\n        * config/riscv/crtn.S: Likewise.\n        * config/riscv/div.S: Likewise.\n        * config/riscv/linux-unwind.h: Likewise.\n        * config/riscv/muldi3.S: Likewise.\n        * config/riscv/multi3.S: Likewise.\n        * config/riscv/save-restore.S: Likewise.\n        * config/riscv/sfp-machine.h: Likewise.\n        * config/riscv/t-elf: Likewise.\n        * config/riscv/t-elf32: Likewise.\n        * config/riscv/t-elf64: Likewise.\n        * config/riscv/t-softfp32: Likewise.\n        * config/riscv/t-softfp64: Likewise.\n\nFrom-SVN: r245226", "tree": {"sha": "84f11affaef4ea94c39fa2813596704cde2d8e35", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/84f11affaef4ea94c39fa2813596704cde2d8e35"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0bd99911eea170dc9c627fd17d55e7c3ab8d4286", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bd99911eea170dc9c627fd17d55e7c3ab8d4286", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0bd99911eea170dc9c627fd17d55e7c3ab8d4286", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bd99911eea170dc9c627fd17d55e7c3ab8d4286/comments", "author": {"login": "palmer-dabbelt", "id": 1383006, "node_id": "MDQ6VXNlcjEzODMwMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/1383006?v=4", "gravatar_id": "", "url": "https://api.github.com/users/palmer-dabbelt", "html_url": "https://github.com/palmer-dabbelt", "followers_url": "https://api.github.com/users/palmer-dabbelt/followers", "following_url": "https://api.github.com/users/palmer-dabbelt/following{/other_user}", "gists_url": "https://api.github.com/users/palmer-dabbelt/gists{/gist_id}", "starred_url": "https://api.github.com/users/palmer-dabbelt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/palmer-dabbelt/subscriptions", "organizations_url": "https://api.github.com/users/palmer-dabbelt/orgs", "repos_url": "https://api.github.com/users/palmer-dabbelt/repos", "events_url": "https://api.github.com/users/palmer-dabbelt/events{/privacy}", "received_events_url": "https://api.github.com/users/palmer-dabbelt/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ef57f7d6b1a0568f58eff04a1b27de4a22a5e07f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef57f7d6b1a0568f58eff04a1b27de4a22a5e07f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef57f7d6b1a0568f58eff04a1b27de4a22a5e07f"}], "stats": {"total": 1142, "additions": 1142, "deletions": 0}, "files": [{"sha": "5aa0dab91cd34b58662652b37ca8f2d4b053dea2", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bd99911eea170dc9c627fd17d55e7c3ab8d4286/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bd99911eea170dc9c627fd17d55e7c3ab8d4286/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=0bd99911eea170dc9c627fd17d55e7c3ab8d4286", "patch": "@@ -1,3 +1,21 @@\n+2017-02-06  Palmer Dabbelt <palmer@dabbelt.com>\n+\n+\t* config.host: Add RISC-V tuples.\n+\t* config/riscv/atomic.c: New file.\n+\t* config/riscv/crti.S: Likewise.\n+\t* config/riscv/crtn.S: Likewise.\n+\t* config/riscv/div.S: Likewise.\n+\t* config/riscv/linux-unwind.h: Likewise.\n+\t* config/riscv/muldi3.S: Likewise.\n+\t* config/riscv/multi3.S: Likewise.\n+\t* config/riscv/save-restore.S: Likewise.\n+\t* config/riscv/sfp-machine.h: Likewise.\n+\t* config/riscv/t-elf: Likewise.\n+\t* config/riscv/t-elf32: Likewise.\n+\t* config/riscv/t-elf64: Likewise.\n+\t* config/riscv/t-softfp32: Likewise.\n+\t* config/riscv/t-softfp64: Likewise.\n+\n 2017-01-24  Jakub Jelinek  <jakub@redhat.com>\n \n \t* soft-fp/op-common.h (_FP_MUL, _FP_FMA, _FP_DIV): Add"}, {"sha": "9472a60886cb8734e5640afea6edf24339f2b8ae", "filename": "libgcc/config.host", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bd99911eea170dc9c627fd17d55e7c3ab8d4286/libgcc%2Fconfig.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bd99911eea170dc9c627fd17d55e7c3ab8d4286/libgcc%2Fconfig.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig.host?ref=0bd99911eea170dc9c627fd17d55e7c3ab8d4286", "patch": "@@ -167,6 +167,9 @@ powerpc*-*-*)\n \t;;\n rs6000*-*-*)\n \t;;\n+riscv*-*-*)\n+\tcpu_type=riscv\n+\t;;\n sparc64*-*-*)\n \tcpu_type=sparc\n \t;;\n@@ -1093,6 +1096,15 @@ powerpcle-*-eabi*)\n \ttmake_file=\"${tmake_file} rs6000/t-ppccomm rs6000/t-crtstuff t-crtstuff-pic t-fdpbit\"\n \textra_parts=\"$extra_parts crtbegin.o crtend.o crtbeginS.o crtendS.o crtbeginT.o ecrti.o ecrtn.o ncrti.o ncrtn.o\"\n \t;;\n+riscv*-*-linux*)\n+\ttmake_file=\"${tmake_file} riscv/t-softfp${host_address} t-softfp riscv/t-elf riscv/t-elf${host_address}\"\n+\textra_parts=\"$extra_parts crtbegin.o crtend.o crti.o crtn.o crtendS.o crtbeginT.o\"\n+\tmd_unwind_header=riscv/linux-unwind.h\n+\t;;\n+riscv*-*-*)\n+\ttmake_file=\"${tmake_file} riscv/t-softfp${host_address} t-softfp riscv/t-elf riscv/t-elf${host_address}\"\n+\textra_parts=\"$extra_parts crtbegin.o crtend.o crti.o crtn.o\"\n+\t;;\n rs6000-ibm-aix4.[3456789]* | powerpc-ibm-aix4.[3456789]*)\n \tmd_unwind_header=rs6000/aix-unwind.h\n \ttmake_file=\"t-fdpbit rs6000/t-ppc64-fp rs6000/t-slibgcc-aix rs6000/t-ibm-ldouble\""}, {"sha": "448b0e55b5a3d81db7b3e8af37246cf3abf5ea63", "filename": "libgcc/config/riscv/atomic.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bd99911eea170dc9c627fd17d55e7c3ab8d4286/libgcc%2Fconfig%2Friscv%2Fatomic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bd99911eea170dc9c627fd17d55e7c3ab8d4286/libgcc%2Fconfig%2Friscv%2Fatomic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Friscv%2Fatomic.c?ref=0bd99911eea170dc9c627fd17d55e7c3ab8d4286", "patch": "@@ -0,0 +1,111 @@\n+/* Legacy sub-word atomics for RISC-V.\n+ \n+   Copyright (C) 2016-2017 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#ifdef __riscv_atomic\n+\n+#include <stdbool.h>\n+\n+#define INVERT\t\t\"not %[tmp1], %[tmp1]\\n\\t\"\n+#define DONT_INVERT\t\"\"\n+\n+#define GENERATE_FETCH_AND_OP(type, size, opname, insn, invert, cop)\t\\\n+  type __sync_fetch_and_ ## opname ## _ ## size (type *p, type v)\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    unsigned long aligned_addr = ((unsigned long) p) & ~3UL;\t\t\\\n+    int shift = (((unsigned long) p) & 3) * 8;\t\t\t\t\\\n+    unsigned mask = ((1U << ((sizeof v) * 8)) - 1) << shift;\t\t\\\n+    unsigned old, tmp1, tmp2;\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+    asm volatile (\"1:\\n\\t\"\t\t\t\t\t\t\\\n+\t\t  \"lr.w.aq %[old], %[mem]\\n\\t\"\t\t\t\t\\\n+\t\t  #insn \" %[tmp1], %[old], %[value]\\n\\t\"\t\t\\\n+\t\t  invert\t\t\t\t\t\t\\\n+\t\t  \"and %[tmp1], %[tmp1], %[mask]\\n\\t\"\t\t\t\\\n+\t\t  \"and %[tmp2], %[old], %[not_mask]\\n\\t\"\t\t\\\n+\t\t  \"or %[tmp2], %[tmp2], %[tmp1]\\n\\t\"\t\t\t\\\n+\t\t  \"sc.w.rl %[tmp1], %[tmp2], %[mem]\\n\\t\"\t\t\\\n+\t\t  \"bnez %[tmp1], 1b\"\t\t\t\t\t\\\n+\t\t  : [old] \"=&r\" (old),\t\t\t\t\t\\\n+\t\t    [mem] \"+A\" (*(volatile unsigned*) aligned_addr),\t\\\n+\t\t    [tmp1] \"=&r\" (tmp1),\t\t\t\t\\\n+\t\t    [tmp2] \"=&r\" (tmp2)\t\t\t\t\t\\\n+\t\t  : [value] \"r\" (((unsigned) v) << shift),\t\t\\\n+\t\t    [mask] \"r\" (mask),\t\t\t\t\t\\\n+\t\t    [not_mask] \"r\" (~mask));\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+    return (type) (old >> shift);\t\t\t\t\t\\\n+  }\t\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  type __sync_ ## opname ## _and_fetch_ ## size (type *p, type v)\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    type o = __sync_fetch_and_ ## opname ## _ ## size (p, v);\t\t\\\n+    return cop;\t\t\t\t\t\t\t\t\\\n+  }\n+\n+#define GENERATE_COMPARE_AND_SWAP(type, size)\t\t\t\t\\\n+  type __sync_val_compare_and_swap_ ## size (type *p, type o, type n)\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    unsigned long aligned_addr = ((unsigned long) p) & ~3UL;\t\t\\\n+    int shift = (((unsigned long) p) & 3) * 8;\t\t\t\t\\\n+    unsigned mask = ((1U << ((sizeof o) * 8)) - 1) << shift;\t\t\\\n+    unsigned old, tmp1;\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+    asm volatile (\"1:\\n\\t\"\t\t\t\t\t\t\\\n+\t\t  \"lr.w.aq %[old], %[mem]\\n\\t\"\t\t\t\t\\\n+\t\t  \"and %[tmp1], %[old], %[mask]\\n\\t\"\t\t\t\\\n+\t\t  \"bne %[tmp1], %[o], 1f\\n\\t\"\t\t\t\t\\\n+\t\t  \"and %[tmp1], %[old], %[not_mask]\\n\\t\"\t\t\\\n+\t\t  \"or %[tmp1], %[tmp1], %[n]\\n\\t\"\t\t\t\\\n+\t\t  \"sc.w.rl %[tmp1], %[tmp1], %[mem]\\n\\t\"\t\t\\\n+\t\t  \"bnez %[tmp1], 1b\\n\\t\"\t\t\t\t\\\n+\t\t  \"1:\"\t\t\t\t\t\t\t\\\n+\t\t  : [old] \"=&r\" (old),\t\t\t\t\t\\\n+\t\t    [mem] \"+A\" (*(volatile unsigned*) aligned_addr),\t\\\n+\t\t    [tmp1] \"=&r\" (tmp1)\t\t\t\t\t\\\n+\t\t  : [o] \"r\" ((((unsigned) o) << shift) & mask),\t\t\\\n+\t\t    [n] \"r\" ((((unsigned) n) << shift) & mask),\t\t\\\n+\t\t    [mask] \"r\" (mask),\t\t\t\t\t\\\n+\t\t    [not_mask] \"r\" (~mask));\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+    return (type) (old >> shift);\t\t\t\t\t\\\n+  }\t\t\t\t\t\t\t\t\t\\\n+  bool __sync_bool_compare_and_swap_ ## size (type *p, type o, type n)\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    return __sync_val_compare_and_swap(p, o, n) == o;\t\t\t\\\n+  }\n+\n+#define GENERATE_ALL(type, size)\t\t\t\t\t\\\n+  GENERATE_FETCH_AND_OP(type, size, add, add, DONT_INVERT, o + v)\t\\\n+  GENERATE_FETCH_AND_OP(type, size, sub, sub, DONT_INVERT, o - v)\t\\\n+  GENERATE_FETCH_AND_OP(type, size, and, and, DONT_INVERT, o & v)\t\\\n+  GENERATE_FETCH_AND_OP(type, size, xor, xor, DONT_INVERT, o ^ v)\t\\\n+  GENERATE_FETCH_AND_OP(type, size, or, or, DONT_INVERT, o | v)\t\t\\\n+  GENERATE_FETCH_AND_OP(type, size, nand, and, INVERT, ~(o & v))\t\\\n+  GENERATE_COMPARE_AND_SWAP(type, size)\n+\n+GENERATE_ALL(unsigned char, 1)\n+GENERATE_ALL(unsigned short, 2)\n+\n+#endif"}, {"sha": "89bac706c63beee37f5ec7856ce6cdfa6982e4b1", "filename": "libgcc/config/riscv/crti.S", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bd99911eea170dc9c627fd17d55e7c3ab8d4286/libgcc%2Fconfig%2Friscv%2Fcrti.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bd99911eea170dc9c627fd17d55e7c3ab8d4286/libgcc%2Fconfig%2Friscv%2Fcrti.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Friscv%2Fcrti.S?ref=0bd99911eea170dc9c627fd17d55e7c3ab8d4286", "patch": "@@ -0,0 +1 @@\n+/* crti.S is empty because .init_array/.fini_array are used exclusively. */"}, {"sha": "ca6ee7b6fba8fef7c2a6793c01af376bdacd195c", "filename": "libgcc/config/riscv/crtn.S", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bd99911eea170dc9c627fd17d55e7c3ab8d4286/libgcc%2Fconfig%2Friscv%2Fcrtn.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bd99911eea170dc9c627fd17d55e7c3ab8d4286/libgcc%2Fconfig%2Friscv%2Fcrtn.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Friscv%2Fcrtn.S?ref=0bd99911eea170dc9c627fd17d55e7c3ab8d4286", "patch": "@@ -0,0 +1 @@\n+/* crtn.S is empty because .init_array/.fini_array are used exclusively. */"}, {"sha": "63d542e846cd011d430d98cb93241ade159919a4", "filename": "libgcc/config/riscv/div.S", "status": "added", "additions": 146, "deletions": 0, "changes": 146, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bd99911eea170dc9c627fd17d55e7c3ab8d4286/libgcc%2Fconfig%2Friscv%2Fdiv.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bd99911eea170dc9c627fd17d55e7c3ab8d4286/libgcc%2Fconfig%2Friscv%2Fdiv.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Friscv%2Fdiv.S?ref=0bd99911eea170dc9c627fd17d55e7c3ab8d4286", "patch": "@@ -0,0 +1,146 @@\n+/* Integer division routines for RISC-V.\n+\n+   Copyright (C) 2016-2017 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+  .text\n+  .align 2\n+\n+#if __riscv_xlen == 32\n+/* Our RV64 64-bit routines are equivalent to our RV32 32-bit routines.  */\n+# define __udivdi3 __udivsi3\n+# define __umoddi3 __umodsi3\n+# define __divdi3 __divsi3\n+# define __moddi3 __modsi3\n+#else\n+  .globl __udivsi3\n+__udivsi3:\n+  /* Compute __udivdi3(a0 << 32, a1 << 32); cast result to uint32_t.  */\n+  sll    a0, a0, 32\n+  sll    a1, a1, 32\n+  move   t0, ra\n+  jal    __udivdi3\n+  sext.w a0, a0\n+  jr     t0\n+\n+  .globl __umodsi3\n+__umodsi3:\n+  /* Compute __udivdi3((uint32_t)a0, (uint32_t)a1); cast a1 to uint32_t.  */\n+  sll    a0, a0, 32\n+  sll    a1, a1, 32\n+  srl    a0, a0, 32\n+  srl    a1, a1, 32\n+  move   t0, ra\n+  jal    __udivdi3\n+  sext.w a0, a1\n+  jr     t0\n+\n+  .globl __modsi3\n+  __modsi3 = __moddi3\n+\n+  .globl __divsi3\n+__divsi3:\n+  /* Check for special case of INT_MIN/-1. Otherwise, fall into __divdi3.  */\n+  li    t0, -1\n+  beq   a1, t0, .L20\n+#endif\n+\n+  .globl __divdi3\n+__divdi3:\n+  bltz  a0, .L10\n+  bltz  a1, .L11\n+  /* Since the quotient is positive, fall into __udivdi3.  */\n+\n+  .globl __udivdi3\n+__udivdi3:\n+  mv    a2, a1\n+  mv    a1, a0\n+  li    a0, -1\n+  beqz  a2, .L5\n+  li    a3, 1\n+  bgeu  a2, a1, .L2\n+.L1:\n+  blez  a2, .L2\n+  slli  a2, a2, 1\n+  slli  a3, a3, 1\n+  bgtu  a1, a2, .L1\n+.L2:\n+  li    a0, 0\n+.L3:\n+  bltu  a1, a2, .L4\n+  sub   a1, a1, a2\n+  or    a0, a0, a3\n+.L4:\n+  srli  a3, a3, 1\n+  srli  a2, a2, 1\n+  bnez  a3, .L3\n+.L5:\n+  ret\n+\n+  .globl __umoddi3\n+__umoddi3:\n+  /* Call __udivdi3(a0, a1), then return the remainder, which is in a1.  */\n+  move  t0, ra\n+  jal   __udivdi3\n+  move  a0, a1\n+  jr    t0\n+\n+  /* Handle negative arguments to __divdi3.  */\n+.L10:\n+  neg   a0, a0\n+  bgez  a1, .L12      /* Compute __udivdi3(-a0, a1), then negate the result.  */\n+  neg   a1, a1\n+  j     __udivdi3     /* Compute __udivdi3(-a0, -a1).  */\n+.L11:                 /* Compute __udivdi3(a0, -a1), then negate the result.  */\n+  neg   a1, a1\n+.L12:\n+  move  t0, ra\n+  jal   __udivdi3\n+  neg   a0, a0\n+  jr    t0\n+\n+  .globl __moddi3\n+__moddi3:\n+  move   t0, ra\n+  bltz   a1, .L31\n+  bltz   a0, .L32\n+.L30:\n+  jal    __udivdi3    /* The dividend is not negative.  */\n+  move   a0, a1\n+  jr     t0\n+.L31:\n+  neg    a1, a1\n+  bgez   a0, .L30\n+.L32:\n+  neg    a0, a0\n+  jal    __udivdi3    /* The dividend is hella negative.  */\n+  neg    a0, a1\n+  jr     t0\n+\n+#if __riscv_xlen == 64\n+  /* continuation of __divsi3 */\n+.L20:\n+  sll   t0, t0, 31\n+  bne   a0, t0, __divdi3\n+  ret\n+#endif"}, {"sha": "a051a2869d4c956d652987a90580e79aed8aa118", "filename": "libgcc/config/riscv/linux-unwind.h", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bd99911eea170dc9c627fd17d55e7c3ab8d4286/libgcc%2Fconfig%2Friscv%2Flinux-unwind.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bd99911eea170dc9c627fd17d55e7c3ab8d4286/libgcc%2Fconfig%2Friscv%2Flinux-unwind.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Friscv%2Flinux-unwind.h?ref=0bd99911eea170dc9c627fd17d55e7c3ab8d4286", "patch": "@@ -0,0 +1,89 @@\n+/* Copyright (C) 2016-2017 Free Software Foundation, Inc.\n+\n+   This file is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published by the\n+   Free Software Foundation; either version 3, or (at your option) any\n+   later version.\n+\n+   This file is distributed in the hope that it will be useful, but\n+   WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   General Public License for more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef inhibit_libc\n+\n+#include <signal.h>\n+#include <stdint.h>\n+#include <sys/ucontext.h>\n+\n+#define LI_A7_8B 0x08b00893\n+#define ECALL    0x00000073\n+\n+#define MD_FALLBACK_FRAME_STATE_FOR riscv_fallback_frame_state\n+\n+static _Unwind_Reason_Code\n+riscv_fallback_frame_state (struct _Unwind_Context *context,\n+\t\t\t    _Unwind_FrameState * fs)\n+{\n+  /* The kernel creates an rt_sigframe on the stack immediately prior\n+     to delivering a signal.\n+\n+     This structure must have the same shape as the linux kernel\n+     equivalent.  */\n+  struct rt_sigframe\n+  {\n+    siginfo_t info;\n+    struct ucontext uc;\n+  };\n+\n+  struct rt_sigframe *rt_;\n+  _Unwind_Ptr new_cfa;\n+  uint16_t *pc = context->ra;\n+  struct sigcontext *sc;\n+  int i;\n+\n+  /* A signal frame will have a return address pointing to\n+     __default_sa_restorer. This code is hardwired as:\n+\n+     0x08b00893\t\tli\ta7,0x8b\n+     0x00000073\t\tecall\n+\n+     Note, the PC might only have 2-byte alignment.\n+   */\n+  if (pc[0] != (uint16_t)LI_A7_8B || pc[1] != (uint16_t)(LI_A7_8B >> 16)\n+      || pc[2] != (uint16_t)ECALL || pc[3] != (uint16_t)(ECALL >> 16))\n+    return _URC_END_OF_STACK;\n+\n+  rt_ = context->cfa;\n+  sc = &rt_->uc.uc_mcontext;\n+\n+  new_cfa = (_Unwind_Ptr) sc;\n+  fs->regs.cfa_how = CFA_REG_OFFSET;\n+  fs->regs.cfa_reg = __LIBGCC_STACK_POINTER_REGNUM__;\n+  fs->regs.cfa_offset = new_cfa - (_Unwind_Ptr) context->cfa;\n+\n+  for (i = 0; i < 32; i++)\n+    {\n+      fs->regs.reg[i].how = REG_SAVED_OFFSET;\n+      fs->regs.reg[i].loc.offset = (_Unwind_Ptr) &sc->gregs[i] - new_cfa;\n+    }\n+\n+  fs->signal_frame = 1;\n+  fs->retaddr_column = __LIBGCC_DWARF_ALT_FRAME_RETURN_COLUMN__;\n+  fs->regs.reg[fs->retaddr_column].how = REG_SAVED_VAL_OFFSET;\n+  fs->regs.reg[fs->retaddr_column].loc.offset =\n+    (_Unwind_Ptr) sc->gregs[0] - new_cfa;\n+\n+  return _URC_NO_REASON;\n+}\n+\n+#endif"}, {"sha": "eb3d9b0df3dfd970d998d7dbad912b2986f07312", "filename": "libgcc/config/riscv/muldi3.S", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bd99911eea170dc9c627fd17d55e7c3ab8d4286/libgcc%2Fconfig%2Friscv%2Fmuldi3.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bd99911eea170dc9c627fd17d55e7c3ab8d4286/libgcc%2Fconfig%2Friscv%2Fmuldi3.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Friscv%2Fmuldi3.S?ref=0bd99911eea170dc9c627fd17d55e7c3ab8d4286", "patch": "@@ -0,0 +1,46 @@\n+/* Integer multiplication routines for RISC-V.\n+\n+   Copyright (C) 2016-2017 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+  .text\n+  .align 2\n+\n+#if __riscv_xlen == 32\n+/* Our RV64 64-bit routine is equivalent to our RV32 32-bit routine.  */\n+# define __muldi3 __mulsi3\n+#endif\n+\n+  .globl __muldi3\n+__muldi3:\n+  mv     a2, a0\n+  li     a0, 0\n+.L1:\n+  andi   a3, a1, 1\n+  beqz   a3, .L2\n+  add    a0, a0, a2\n+.L2:\n+  srli   a1, a1, 1\n+  slli   a2, a2, 1\n+  bnez   a1, .L1\n+  ret"}, {"sha": "4d454e65013d93add649b0a6c3f077be7aaf7dd2", "filename": "libgcc/config/riscv/multi3.S", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bd99911eea170dc9c627fd17d55e7c3ab8d4286/libgcc%2Fconfig%2Friscv%2Fmulti3.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bd99911eea170dc9c627fd17d55e7c3ab8d4286/libgcc%2Fconfig%2Friscv%2Fmulti3.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Friscv%2Fmulti3.S?ref=0bd99911eea170dc9c627fd17d55e7c3ab8d4286", "patch": "@@ -0,0 +1,81 @@\n+/* Integer multiplication routines for RISC-V.\n+\n+   Copyright (C) 2016-2017 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+  .text\n+  .align 2\n+\n+#if __riscv_xlen == 32\n+/* Our RV64 64-bit routines are equivalent to our RV32 32-bit routines.  */\n+# define __multi3 __muldi3\n+#endif\n+\n+  .globl __multi3\n+__multi3:\n+\n+#if __riscv_xlen == 32\n+/* Our RV64 64-bit routines are equivalent to our RV32 32-bit routines.  */\n+# define __muldi3 __mulsi3\n+#endif\n+\n+/* We rely on the fact that __muldi3 doesn't clobber the t-registers.  */\n+\n+  mv  t0, ra\n+  mv  t5, a0\n+  mv  a0, a1\n+  mv  t6, a3\n+  mv  a1, t5\n+  mv  a4, a2\n+  li  a5, 0\n+  li  t2, 0\n+  li  t4, 0\n+.L1:\n+  add  a6, t2, a1\n+  andi t3, a4, 1\n+  slli a7, a5, 1\n+  slti t1, a1, 0\n+  srli a4, a4, 1\n+  add  a5, t4, a5\n+  beqz t3, .L2\n+  sltu t3, a6, t2\n+  mv   t2, a6\n+  add  t4, t3, a5\n+.L2:\n+  slli a1, a1, 1\n+  or   a5, t1, a7\n+  bnez a4, .L1\n+  beqz a0, .L3\n+  mv   a1, a2\n+  call __muldi3\n+  add  t4, t4, a0\n+.L3:\n+  beqz t6, .L4\n+  mv   a1, t6\n+  mv   a0, t5\n+  call  __muldi3\n+  add  t4, t4, a0\n+.L4:\n+  mv  a0, t2\n+  mv  a1, t4\n+  jr  t0"}, {"sha": "2073a73089bba3adf7fd9065407c8feb47b263b5", "filename": "libgcc/config/riscv/save-restore.S", "status": "added", "additions": 463, "deletions": 0, "changes": 463, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bd99911eea170dc9c627fd17d55e7c3ab8d4286/libgcc%2Fconfig%2Friscv%2Fsave-restore.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bd99911eea170dc9c627fd17d55e7c3ab8d4286/libgcc%2Fconfig%2Friscv%2Fsave-restore.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Friscv%2Fsave-restore.S?ref=0bd99911eea170dc9c627fd17d55e7c3ab8d4286", "patch": "@@ -0,0 +1,463 @@\n+/* Callee-saved register spill and fill routines for RISC-V.\n+\n+   Copyright (C) 2016-2017 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+  .text\n+\n+  .globl __riscv_save_12\n+  .globl __riscv_save_11\n+  .globl __riscv_save_10\n+  .globl __riscv_save_9\n+  .globl __riscv_save_8\n+  .globl __riscv_save_7\n+  .globl __riscv_save_6\n+  .globl __riscv_save_5\n+  .globl __riscv_save_4\n+  .globl __riscv_save_3\n+  .globl __riscv_save_2\n+  .globl __riscv_save_1\n+  .globl __riscv_save_0\n+\n+  .globl __riscv_restore_12\n+  .globl __riscv_restore_11\n+  .globl __riscv_restore_10\n+  .globl __riscv_restore_9\n+  .globl __riscv_restore_8\n+  .globl __riscv_restore_7\n+  .globl __riscv_restore_6\n+  .globl __riscv_restore_5\n+  .globl __riscv_restore_4\n+  .globl __riscv_restore_3\n+  .globl __riscv_restore_2\n+  .globl __riscv_restore_1\n+  .globl __riscv_restore_0\n+\n+#if __riscv_xlen == 64\n+\n+__riscv_save_12:\n+  .cfi_startproc\n+  # __riscv_save_* routine use t0/x5 as return address\n+  .cfi_return_column 5\n+  addi sp, sp, -112\n+  .cfi_def_cfa_offset 112\n+  li t1, 0\n+  sd s11, 8(sp)\n+  .cfi_offset 27, -104\n+  j .Ls10\n+\n+__riscv_save_11:\n+__riscv_save_10:\n+  .cfi_restore 27\n+  addi sp, sp, -112\n+  .cfi_def_cfa_offset 112\n+  li t1, -16\n+.Ls10:\n+  sd s10, 16(sp)\n+  .cfi_offset 26, -96\n+  sd s9, 24(sp)\n+  .cfi_offset 25, -88\n+  j .Ls8\n+\n+__riscv_save_9:\n+__riscv_save_8:\n+  .cfi_restore 25\n+  .cfi_restore 26\n+  .cfi_restore 27\n+  addi sp, sp, -112\n+  .cfi_def_cfa_offset 112\n+  li t1, -32\n+.Ls8:\n+  sd s8, 32(sp)\n+  .cfi_offset 24, -80\n+  sd s7, 40(sp)\n+  .cfi_offset 23, -72\n+  j .Ls6\n+\n+__riscv_save_7:\n+__riscv_save_6:\n+  .cfi_restore 23\n+  .cfi_restore 24\n+  .cfi_restore 25\n+  .cfi_restore 26\n+  .cfi_restore 27\n+  addi sp, sp, -112\n+  .cfi_def_cfa_offset 112\n+  li t1, -48\n+.Ls6:\n+  sd s6, 48(sp)\n+  .cfi_offset 22, -64\n+  sd s5, 56(sp)\n+  .cfi_offset 21, -56\n+  j .Ls4\n+\n+__riscv_save_5:\n+__riscv_save_4:\n+  .cfi_restore 21\n+  .cfi_restore 22\n+  .cfi_restore 24\n+  .cfi_restore 25\n+  .cfi_restore 26\n+  .cfi_restore 27\n+  .cfi_restore 24\n+  .cfi_restore 25\n+  .cfi_restore 26\n+  .cfi_restore 27\n+  addi sp, sp, -112\n+  .cfi_def_cfa_offset 112\n+  li t1, -64\n+.Ls4:\n+  sd s4, 64(sp)\n+  .cfi_offset 20, -48\n+  sd s3, 72(sp)\n+  .cfi_offset 19, -40\n+  j .Ls2\n+\n+__riscv_save_3:\n+__riscv_save_2:\n+  .cfi_restore 19\n+  .cfi_restore 20\n+  .cfi_restore 21\n+  .cfi_restore 22\n+  .cfi_restore 24\n+  .cfi_restore 25\n+  .cfi_restore 26\n+  .cfi_restore 27\n+  .cfi_restore 24\n+  .cfi_restore 25\n+  .cfi_restore 26\n+  .cfi_restore 27\n+  addi sp, sp, -112\n+  .cfi_def_cfa_offset 112\n+  li t1, -80\n+.Ls2:\n+  sd s2, 80(sp)\n+  .cfi_offset 18, -32\n+  sd s1, 88(sp)\n+  .cfi_offset 9, -24\n+  sd s0, 96(sp)\n+  .cfi_offset 8, -16\n+  sd ra, 104(sp)\n+  .cfi_offset 1, -8\n+  # CFA info is not correct in next 2 instruction since t1's\n+  # value is depend on how may register really save.\n+  sub sp, sp, t1\n+  jr t0\n+  .cfi_endproc\n+\n+__riscv_save_1:\n+__riscv_save_0:\n+  .cfi_startproc\n+  # __riscv_save_* routine use t0/x5 as return address\n+  .cfi_return_column 5\n+  addi sp, sp, -16\n+  .cfi_def_cfa_offset 16\n+  sd s0, 0(sp)\n+  .cfi_offset 8, -16\n+  sd ra, 8(sp)\n+  .cfi_offset 1, -8\n+  jr t0\n+  .cfi_endproc\n+\n+__riscv_restore_12:\n+  .cfi_startproc\n+  .cfi_def_cfa_offset 112\n+  .cfi_offset 27, -104\n+  .cfi_offset 26, -96\n+  .cfi_offset 25, -88\n+  .cfi_offset 24, -80\n+  .cfi_offset 23, -72\n+  .cfi_offset 22, -64\n+  .cfi_offset 21, -56\n+  .cfi_offset 20, -48\n+  .cfi_offset 19, -40\n+  .cfi_offset 18, -32\n+  .cfi_offset 9, -24\n+  .cfi_offset 8, -16\n+  .cfi_offset 1, -8\n+  ld s11, 8(sp)\n+  .cfi_restore 27\n+  addi sp, sp, 16\n+\n+__riscv_restore_11:\n+__riscv_restore_10:\n+  .cfi_restore 27\n+  .cfi_def_cfa_offset 96\n+  ld s10, 0(sp)\n+  .cfi_restore 26\n+  ld s9, 8(sp)\n+  .cfi_restore 25\n+  addi sp, sp, 16\n+\n+__riscv_restore_9:\n+__riscv_restore_8:\n+  .cfi_restore 25\n+  .cfi_restore 26\n+  .cfi_restore 27\n+  .cfi_def_cfa_offset 80\n+  ld s8, 0(sp)\n+  .cfi_restore 24\n+  ld s7, 8(sp)\n+  .cfi_restore 23\n+  addi sp, sp, 16\n+\n+__riscv_restore_7:\n+__riscv_restore_6:\n+  .cfi_restore 23\n+  .cfi_restore 24\n+  .cfi_restore 25\n+  .cfi_restore 26\n+  .cfi_restore 27\n+  .cfi_def_cfa_offset 64\n+  ld s6, 0(sp)\n+  .cfi_restore 22\n+  ld s5, 8(sp)\n+  .cfi_restore 21\n+  addi sp, sp, 16\n+\n+__riscv_restore_5:\n+__riscv_restore_4:\n+  .cfi_restore 21\n+  .cfi_restore 22\n+  .cfi_restore 23\n+  .cfi_restore 24\n+  .cfi_restore 25\n+  .cfi_restore 26\n+  .cfi_restore 27\n+  .cfi_def_cfa_offset 48\n+  ld s4, 0(sp)\n+  .cfi_restore 20\n+  ld s3, 8(sp)\n+  .cfi_restore 19\n+  addi sp, sp, 16\n+\n+__riscv_restore_3:\n+__riscv_restore_2:\n+  .cfi_restore 19\n+  .cfi_restore 20\n+  .cfi_restore 21\n+  .cfi_restore 22\n+  .cfi_restore 23\n+  .cfi_restore 24\n+  .cfi_restore 25\n+  .cfi_restore 26\n+  .cfi_restore 27\n+  .cfi_def_cfa_offset 32\n+  ld s2, 0(sp)\n+  .cfi_restore 18\n+  ld s1, 8(sp)\n+  .cfi_restore 9\n+  addi sp, sp, 16\n+\n+__riscv_restore_1:\n+__riscv_restore_0:\n+  .cfi_restore 9\n+  .cfi_restore 18\n+  .cfi_restore 19\n+  .cfi_restore 20\n+  .cfi_restore 21\n+  .cfi_restore 22\n+  .cfi_restore 23\n+  .cfi_restore 24\n+  .cfi_restore 25\n+  .cfi_restore 26\n+  .cfi_restore 27\n+  .cfi_def_cfa_offset 16\n+  ld s0, 0(sp)\n+  .cfi_restore 8\n+  ld ra, 8(sp)\n+  .cfi_restore 1\n+  addi sp, sp, 16\n+  .cfi_def_cfa_offset 0\n+  ret\n+  .cfi_endproc\n+\n+#else\n+\n+__riscv_save_12:\n+  .cfi_startproc\n+  # __riscv_save_* routine use t0/x5 as return address\n+  .cfi_return_column 5\n+  addi sp, sp, -64\n+  .cfi_def_cfa_offset 64\n+  li t1, 0\n+  sw s11, 12(sp)\n+  .cfi_offset 27, -52\n+  j .Ls10\n+\n+__riscv_save_11:\n+__riscv_save_10:\n+__riscv_save_9:\n+__riscv_save_8:\n+  .cfi_restore 27\n+  addi sp, sp, -64\n+  .cfi_def_cfa_offset 64\n+  li t1, -16\n+.Ls10:\n+  sw s10, 16(sp)\n+  .cfi_offset 26, -48\n+  sw s9, 20(sp)\n+  .cfi_offset 25, -44\n+  sw s8, 24(sp)\n+  .cfi_offset 24, -40\n+  sw s7, 28(sp)\n+  .cfi_offset 23, -36\n+  j .Ls6\n+\n+__riscv_save_7:\n+__riscv_save_6:\n+__riscv_save_5:\n+__riscv_save_4:\n+  .cfi_restore 23\n+  .cfi_restore 24\n+  .cfi_restore 25\n+  .cfi_restore 26\n+  .cfi_restore 27\n+  addi sp, sp, -64\n+  .cfi_def_cfa_offset 64\n+  li t1, -32\n+.Ls6:\n+  sw s6, 32(sp)\n+  .cfi_offset 22, -32\n+  sw s5, 36(sp)\n+  .cfi_offset 21, -28\n+  sw s4, 40(sp)\n+  .cfi_offset 20, -24\n+  sw s3, 44(sp)\n+  .cfi_offset 19, -20\n+  sw s2, 48(sp)\n+  .cfi_offset 18, -16\n+  sw s1, 52(sp)\n+  .cfi_offset 9, -12\n+  sw s0, 56(sp)\n+  .cfi_offset 8, -8\n+  sw ra, 60(sp)\n+  .cfi_offset 1, -4\n+  # CFA info is not correct in next 2 instruction since t1's\n+  # value is depend on how may register really save.\n+  sub sp, sp, t1\n+  jr t0\n+  .cfi_endproc\n+\n+__riscv_save_3:\n+__riscv_save_2:\n+__riscv_save_1:\n+__riscv_save_0:\n+  .cfi_startproc\n+  # __riscv_save_* routine use t0/x5 as return address\n+  .cfi_return_column 5\n+  addi sp, sp, -16\n+  .cfi_def_cfa_offset 16\n+  sw s2, 0(sp)\n+  sw s1, 4(sp)\n+  .cfi_offset 9, -16\n+  sw s0, 8(sp)\n+  .cfi_offset 8, -8\n+  sw ra, 12(sp)\n+  .cfi_offset 1, -4\n+  jr t0\n+  .cfi_endproc\n+\n+__riscv_restore_12:\n+  .cfi_startproc\n+  .cfi_def_cfa_offset 64\n+  .cfi_offset 27, -52\n+  .cfi_offset 26, -48\n+  .cfi_offset 25, -44\n+  .cfi_offset 24, -40\n+  .cfi_offset 23, -36\n+  .cfi_offset 22, -32\n+  .cfi_offset 21, -28\n+  .cfi_offset 20, -24\n+  .cfi_offset 19, -20\n+  .cfi_offset 18, -16\n+  .cfi_offset 9, -12\n+  .cfi_offset 8, -8\n+  .cfi_offset 1, -4\n+  lw s11, 12(sp)\n+  .cfi_restore 27\n+  addi sp, sp, 16\n+\n+__riscv_restore_11:\n+__riscv_restore_10:\n+__riscv_restore_9:\n+__riscv_restore_8:\n+  .cfi_restore 27\n+  .cfi_def_cfa_offset 48\n+  lw s10, 0(sp)\n+  .cfi_restore 26\n+  lw s9, 4(sp)\n+  .cfi_restore 25\n+  lw s8, 8(sp)\n+  .cfi_restore 24\n+  lw s7, 12(sp)\n+  .cfi_restore 23\n+  addi sp, sp, 16\n+\n+__riscv_restore_7:\n+__riscv_restore_6:\n+__riscv_restore_5:\n+__riscv_restore_4:\n+  .cfi_restore 23\n+  .cfi_restore 24\n+  .cfi_restore 25\n+  .cfi_restore 26\n+  .cfi_restore 27\n+  .cfi_def_cfa_offset 32\n+  lw s6, 0(sp)\n+  .cfi_restore 22\n+  lw s5, 4(sp)\n+  .cfi_restore 21\n+  lw s4, 8(sp)\n+  .cfi_restore 20\n+  lw s3, 12(sp)\n+  .cfi_restore 19\n+  addi sp, sp, 16\n+\n+__riscv_restore_3:\n+__riscv_restore_2:\n+__riscv_restore_1:\n+__riscv_restore_0:\n+  .cfi_restore 19\n+  .cfi_restore 20\n+  .cfi_restore 21\n+  .cfi_restore 22\n+  .cfi_restore 24\n+  .cfi_restore 25\n+  .cfi_restore 26\n+  .cfi_restore 27\n+  .cfi_def_cfa_offset 16\n+  lw s2, 0(sp)\n+  .cfi_restore 18\n+  lw s1, 4(sp)\n+  .cfi_restore 9\n+  lw s0, 8(sp)\n+  .cfi_restore 8\n+  lw ra, 12(sp)\n+  .cfi_restore 1\n+  addi sp, sp, 16\n+  .cfi_def_cfa_offset 0\n+  ret\n+  .cfi_endproc\n+\n+#endif"}, {"sha": "b1a27e7ed440a045872473de0da8eef9b071343a", "filename": "libgcc/config/riscv/sfp-machine.h", "status": "added", "additions": 137, "deletions": 0, "changes": 137, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bd99911eea170dc9c627fd17d55e7c3ab8d4286/libgcc%2Fconfig%2Friscv%2Fsfp-machine.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bd99911eea170dc9c627fd17d55e7c3ab8d4286/libgcc%2Fconfig%2Friscv%2Fsfp-machine.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Friscv%2Fsfp-machine.h?ref=0bd99911eea170dc9c627fd17d55e7c3ab8d4286", "patch": "@@ -0,0 +1,137 @@\n+/* Software floating-point machine description for RISC-V.\n+\n+   Copyright (C) 2016-2017 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#if __riscv_xlen == 32\n+\n+#define _FP_W_TYPE_SIZE\t\t32\n+#define _FP_W_TYPE\t\tunsigned long\n+#define _FP_WS_TYPE\t\tsigned long\n+#define _FP_I_TYPE\t\tlong\n+\n+#define _FP_MUL_MEAT_S(R,X,Y)\t\t\t\t\\\n+  _FP_MUL_MEAT_1_wide(_FP_WFRACBITS_S,R,X,Y,umul_ppmm)\n+#define _FP_MUL_MEAT_D(R,X,Y)\t\t\t\t\\\n+  _FP_MUL_MEAT_2_wide(_FP_WFRACBITS_D,R,X,Y,umul_ppmm)\n+#define _FP_MUL_MEAT_Q(R,X,Y)\t\t\t\t\\\n+  _FP_MUL_MEAT_4_wide(_FP_WFRACBITS_Q,R,X,Y,umul_ppmm)\n+\n+#define _FP_DIV_MEAT_S(R,X,Y)\t_FP_DIV_MEAT_1_udiv_norm(S,R,X,Y)\n+#define _FP_DIV_MEAT_D(R,X,Y)\t_FP_DIV_MEAT_2_udiv(D,R,X,Y)\n+#define _FP_DIV_MEAT_Q(R,X,Y)\t_FP_DIV_MEAT_4_udiv(Q,R,X,Y)\n+\n+#define _FP_NANFRAC_S\t\t_FP_QNANBIT_S\n+#define _FP_NANFRAC_D\t\t_FP_QNANBIT_D, 0\n+#define _FP_NANFRAC_Q\t\t_FP_QNANBIT_Q, 0, 0, 0\n+\n+#else\n+\n+#define _FP_W_TYPE_SIZE\t\t64\n+#define _FP_W_TYPE\t\tunsigned long long\n+#define _FP_WS_TYPE\t\tsigned long long\n+#define _FP_I_TYPE\t\tlong long\n+\n+#define _FP_MUL_MEAT_S(R,X,Y)\t\t\t\t\t\\\n+  _FP_MUL_MEAT_1_imm(_FP_WFRACBITS_S,R,X,Y)\n+#define _FP_MUL_MEAT_D(R,X,Y)\t\t\t\t\t\\\n+  _FP_MUL_MEAT_1_wide(_FP_WFRACBITS_D,R,X,Y,umul_ppmm)\n+#define _FP_MUL_MEAT_Q(R,X,Y)\t\t\t\t\t\\\n+  _FP_MUL_MEAT_2_wide_3mul(_FP_WFRACBITS_Q,R,X,Y,umul_ppmm)\n+\n+#define _FP_DIV_MEAT_S(R,X,Y)\t_FP_DIV_MEAT_1_imm(S,R,X,Y,_FP_DIV_HELP_imm)\n+#define _FP_DIV_MEAT_D(R,X,Y)\t_FP_DIV_MEAT_1_udiv_norm(D,R,X,Y)\n+#define _FP_DIV_MEAT_Q(R,X,Y)\t_FP_DIV_MEAT_2_udiv(Q,R,X,Y)\n+\n+#define _FP_NANFRAC_S\t\t_FP_QNANBIT_S\n+#define _FP_NANFRAC_D\t\t_FP_QNANBIT_D\n+#define _FP_NANFRAC_Q\t\t_FP_QNANBIT_Q, 0\n+\n+#endif\n+\n+#if __riscv_xlen == 64\n+typedef int TItype __attribute__ ((mode (TI)));\n+typedef unsigned int UTItype __attribute__ ((mode (TI)));\n+#define TI_BITS (__CHAR_BIT__ * (int)sizeof(TItype))\n+#endif\n+\n+/* The type of the result of a floating point comparison.  This must\n+   match __libgcc_cmp_return__ in GCC for the target.  */\n+typedef int __gcc_CMPtype __attribute__ ((mode (__libgcc_cmp_return__)));\n+#define CMPtype __gcc_CMPtype\n+\n+#define _FP_NANSIGN_S\t\t0\n+#define _FP_NANSIGN_D\t\t0\n+#define _FP_NANSIGN_Q\t\t0\n+\n+#define _FP_KEEPNANFRACP 0\n+#define _FP_QNANNEGATEDP 0\n+\n+#define _FP_CHOOSENAN(fs, wc, R, X, Y, OP)\t\\\n+  do {\t\t\t\t\t\t\\\n+    R##_s = _FP_NANSIGN_##fs;\t\t\t\\\n+    _FP_FRAC_SET_##wc(R,_FP_NANFRAC_##fs);\t\\\n+    R##_c = FP_CLS_NAN;\t\t\t\t\\\n+  } while (0)\n+\n+#define _FP_DECL_EX\t\tint _frm __attribute__ ((unused));\n+#define FP_ROUNDMODE\t\t_frm\n+\n+#define FP_RND_NEAREST\t\t0x0\n+#define FP_RND_ZERO\t\t0x1\n+#define FP_RND_PINF\t\t0x3\n+#define FP_RND_MINF\t\t0x2\n+\n+#define FP_EX_INVALID\t\t0x10\n+#define FP_EX_OVERFLOW\t\t0x04\n+#define FP_EX_UNDERFLOW\t\t0x02\n+#define FP_EX_DIVZERO\t\t0x08\n+#define FP_EX_INEXACT\t\t0x01\n+\n+#define _FP_TININESS_AFTER_ROUNDING 1\n+\n+#ifdef __riscv_flen\n+#define FP_INIT_ROUNDMODE\t\t\t\\\n+do {\t\t\t\t\t\t\\\n+  __asm__ volatile (\"frrm %0\" : \"=r\" (_frm));\t\\\n+} while (0)\n+\n+#define FP_HANDLE_EXCEPTIONS\t\t\t\t\t\\\n+do {\t\t\t\t\t\t\t\t\\\n+  if (__builtin_expect (_fex, 0))\t\t\t\t\\\n+    __asm__ volatile (\"csrs fflags, %0\" : : \"rK\" (_fex));\t\\\n+} while (0)\n+#else\n+#define FP_INIT_ROUNDMODE\t_frm = FP_RND_NEAREST\n+#endif\n+\n+#define\t__LITTLE_ENDIAN\t1234\n+#define\t__BIG_ENDIAN\t4321\n+\n+#define __BYTE_ORDER __LITTLE_ENDIAN\n+\n+\n+/* Define ALIASNAME as a strong alias for NAME.  */\n+# define strong_alias(name, aliasname) _strong_alias(name, aliasname)\n+# define _strong_alias(name, aliasname) \\\n+  extern __typeof (name) aliasname __attribute__ ((alias (#name)));"}, {"sha": "01d5ebaa417e3b0185bdfb223f2d1e983754db3d", "filename": "libgcc/config/riscv/t-elf", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bd99911eea170dc9c627fd17d55e7c3ab8d4286/libgcc%2Fconfig%2Friscv%2Ft-elf", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bd99911eea170dc9c627fd17d55e7c3ab8d4286/libgcc%2Fconfig%2Friscv%2Ft-elf", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Friscv%2Ft-elf?ref=0bd99911eea170dc9c627fd17d55e7c3ab8d4286", "patch": "@@ -0,0 +1,6 @@\n+LIB2ADD += $(srcdir)/config/riscv/save-restore.S \\\n+\t   $(srcdir)/config/riscv/muldi3.S \\\n+\t   $(srcdir)/config/riscv/multi3.S \\\n+\t   $(srcdir)/config/riscv/div.S \\\n+\t   $(srcdir)/config/riscv/atomic.c \\\n+"}, {"sha": "f3751234d55db3b805f4c8cb265e472c07a701f2", "filename": "libgcc/config/riscv/t-elf32", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bd99911eea170dc9c627fd17d55e7c3ab8d4286/libgcc%2Fconfig%2Friscv%2Ft-elf32", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bd99911eea170dc9c627fd17d55e7c3ab8d4286/libgcc%2Fconfig%2Friscv%2Ft-elf32", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Friscv%2Ft-elf32?ref=0bd99911eea170dc9c627fd17d55e7c3ab8d4286", "patch": "@@ -0,0 +1 @@\n+LIB2FUNCS_EXCLUDE += _divsi3 _modsi3 _udivsi3 _umodsi3 _mulsi3 _muldi3"}, {"sha": "f3751234d55db3b805f4c8cb265e472c07a701f2", "filename": "libgcc/config/riscv/t-elf64", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bd99911eea170dc9c627fd17d55e7c3ab8d4286/libgcc%2Fconfig%2Friscv%2Ft-elf64", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bd99911eea170dc9c627fd17d55e7c3ab8d4286/libgcc%2Fconfig%2Friscv%2Ft-elf64", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Friscv%2Ft-elf64?ref=0bd99911eea170dc9c627fd17d55e7c3ab8d4286", "patch": "@@ -0,0 +1 @@\n+LIB2FUNCS_EXCLUDE += _divsi3 _modsi3 _udivsi3 _umodsi3 _mulsi3 _muldi3"}, {"sha": "1bd51e803d1f9a865928d99a5b4863068fa9b094", "filename": "libgcc/config/riscv/t-softfp32", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bd99911eea170dc9c627fd17d55e7c3ab8d4286/libgcc%2Fconfig%2Friscv%2Ft-softfp32", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bd99911eea170dc9c627fd17d55e7c3ab8d4286/libgcc%2Fconfig%2Friscv%2Ft-softfp32", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Friscv%2Ft-softfp32?ref=0bd99911eea170dc9c627fd17d55e7c3ab8d4286", "patch": "@@ -0,0 +1,26 @@\n+ABI_SINGLE:=$(findstring __riscv_float_abi_single,$(shell $(gcc_compile_bare) -dM -E - </dev/null))\n+ABI_DOUBLE:=$(findstring __riscv_float_abi_double,$(shell $(gcc_compile_bare) -dM -E - </dev/null))\n+ABI_QUAD:=$(findstring __riscv_float_abi_quad,$(shell $(gcc_compile_bare) -dM -E - </dev/null))\n+\n+softfp_int_modes := si di\n+softfp_exclude_libgcc2 := n\n+\n+ifndef ABI_QUAD\n+ifdef ABI_DOUBLE\n+\n+softfp_float_modes := tf\n+softfp_extensions := sftf dftf\n+softfp_truncations := tfsf tfdf\n+\n+else\n+\n+softfp_float_modes := df tf\n+softfp_extensions := sfdf sftf dftf\n+softfp_truncations := dfsf tfsf tfdf\n+\n+ifndef ABI_SINGLE\n+softfp_float_modes += sf\n+endif\n+\n+endif\n+endif"}, {"sha": "75870951202a01fddd73e642ebbe9bd8fc2ab801", "filename": "libgcc/config/riscv/t-softfp64", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bd99911eea170dc9c627fd17d55e7c3ab8d4286/libgcc%2Fconfig%2Friscv%2Ft-softfp64", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bd99911eea170dc9c627fd17d55e7c3ab8d4286/libgcc%2Fconfig%2Friscv%2Ft-softfp64", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Friscv%2Ft-softfp64?ref=0bd99911eea170dc9c627fd17d55e7c3ab8d4286", "patch": "@@ -0,0 +1,3 @@\n+include $(srcdir)/config/riscv/t-softfp32\n+\n+softfp_int_modes += ti"}]}