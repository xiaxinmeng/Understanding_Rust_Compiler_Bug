{"sha": "742b6dc476c544389f109b03d221262a4cc55aaf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzQyYjZkYzQ3NmM1NDQzODlmMTA5YjAzZDIyMTI2MmE0Y2M1NWFhZg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2019-01-17T18:01:43Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2019-01-17T18:01:43Z"}, "message": "decl.c (grokdeclarator): Use typespec_loc in error messages about 'auto' and trailing return type.\n\n/cp\n2019-01-17  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* decl.c (grokdeclarator): Use typespec_loc in error messages\n\tabout 'auto' and trailing return type.\n\n/testsuite\n2019-01-17  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* g++.dg/cpp0x/auto52.C: Test locations too.\n\t* g++.dg/cpp0x/trailing2.C: Likewise.\n\t* g++.dg/cpp1y/auto-fn18.C: Likewise.\n\t* g++.dg/cpp1y/auto-fn25.C: Likewise.\n\t* g++.dg/cpp1y/auto-fn52.C: Likewise.\n\t* g++.dg/cpp1y/auto-fn53.C: Likewise.\n\t* g++.dg/cpp1y/auto-fn54.C: Likewise.\n\nFrom-SVN: r268043", "tree": {"sha": "8a9bf793a3e4ef87b404584cbf910e7a4dead16d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8a9bf793a3e4ef87b404584cbf910e7a4dead16d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/742b6dc476c544389f109b03d221262a4cc55aaf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/742b6dc476c544389f109b03d221262a4cc55aaf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/742b6dc476c544389f109b03d221262a4cc55aaf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/742b6dc476c544389f109b03d221262a4cc55aaf/comments", "author": null, "committer": null, "parents": [{"sha": "b9e03679808ef26ba9614d352f69a347df120265", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9e03679808ef26ba9614d352f69a347df120265", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9e03679808ef26ba9614d352f69a347df120265"}], "stats": {"total": 83, "additions": 51, "deletions": 32}, "files": [{"sha": "05e8566e493d7a6767d4f81411df81a844225bcc", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/742b6dc476c544389f109b03d221262a4cc55aaf/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/742b6dc476c544389f109b03d221262a4cc55aaf/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=742b6dc476c544389f109b03d221262a4cc55aaf", "patch": "@@ -1,3 +1,8 @@\n+2019-01-17  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* decl.c (grokdeclarator): Use typespec_loc in error messages\n+\tabout 'auto' and trailing return type.\n+\n 2019-01-17  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR c++/88699"}, {"sha": "79eeac177b64ce178fdc07eb6ae3d463431a351c", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 23, "deletions": 19, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/742b6dc476c544389f109b03d221262a4cc55aaf/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/742b6dc476c544389f109b03d221262a4cc55aaf/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=742b6dc476c544389f109b03d221262a4cc55aaf", "patch": "@@ -11287,35 +11287,37 @@ grokdeclarator (const cp_declarator *declarator,\n \t\t\t  /* OK for C++11 lambdas.  */;\n \t\t\telse if (cxx_dialect < cxx14)\n \t\t\t  {\n-\t\t\t    error (\"%qs function uses \"\n-\t\t\t\t   \"%<auto%> type specifier without trailing \"\n-\t\t\t\t   \"return type\", name);\n-\t\t\t    inform (input_location, \"deduced return type \"\n-\t\t\t\t    \"only available with -std=c++14 or \"\n-\t\t\t\t    \"-std=gnu++14\");\n+\t\t\t    error_at (typespec_loc, \"%qs function uses \"\n+\t\t\t\t      \"%<auto%> type specifier without \"\n+\t\t\t\t      \"trailing return type\", name);\n+\t\t\t    inform (typespec_loc,\n+\t\t\t\t    \"deduced return type only available \"\n+\t\t\t\t    \"with -std=c++14 or -std=gnu++14\");\n \t\t\t  }\n \t\t\telse if (virtualp)\n \t\t\t  {\n-\t\t\t    error (\"virtual function cannot \"\n-\t\t\t\t   \"have deduced return type\");\n+\t\t\t    error_at (typespec_loc, \"virtual function \"\n+\t\t\t\t      \"cannot have deduced return type\");\n \t\t\t    virtualp = false;\n \t\t\t  }\n \t\t      }\n \t\t    else if (!is_auto (type) && sfk != sfk_conversion)\n \t\t      {\n-\t\t\terror (\"%qs function with trailing return type has\"\n-\t\t\t       \" %qT as its type rather than plain %<auto%>\",\n-\t\t\t       name, type);\n+\t\t\terror_at (typespec_loc, \"%qs function with trailing \"\n+\t\t\t\t  \"return type has %qT as its type rather \"\n+\t\t\t\t  \"than plain %<auto%>\", name, type);\n \t\t\treturn error_mark_node;\n \t\t      }\n \t\t    else if (is_auto (type) && AUTO_IS_DECLTYPE (type))\n \t\t      {\n \t\t\tif (funcdecl_p)\n-\t\t\t  error (\"%qs function with trailing return type has \"\n-\t\t\t\t \"%<decltype(auto)%> as its type rather than \"\n-\t\t\t\t \"plain %<auto%>\", name);\n+\t\t\t  error_at (typespec_loc,\n+\t\t\t\t    \"%qs function with trailing return type \"\n+\t\t\t\t    \"has %<decltype(auto)%> as its type \"\n+\t\t\t\t    \"rather than plain %<auto%>\", name);\n \t\t\telse\n-\t\t\t  error (\"invalid use of %<decltype(auto)%>\");\n+\t\t\t  error_at (typespec_loc,\n+\t\t\t\t    \"invalid use of %<decltype(auto)%>\");\n \t\t\treturn error_mark_node;\n \t\t      }\n \t\t    tree tmpl = CLASS_PLACEHOLDER_TEMPLATE (auto_node);\n@@ -11359,11 +11361,13 @@ grokdeclarator (const cp_declarator *declarator,\n \t\t    if (cxx_dialect < cxx11)\n \t\t      /* Not using maybe_warn_cpp0x because this should\n \t\t\t always be an error.  */\n-\t\t      error (\"trailing return type only available with \"\n-\t\t\t     \"-std=c++11 or -std=gnu++11\");\n+\t\t      error_at (typespec_loc,\n+\t\t\t\t\"trailing return type only available \"\n+\t\t\t\t\"with -std=c++11 or -std=gnu++11\");\n \t\t    else\n-\t\t      error (\"%qs function with trailing return type not \"\n-\t\t\t     \"declared with %<auto%> type specifier\", name);\n+\t\t      error_at (typespec_loc, \"%qs function with trailing \"\n+\t\t\t\t\"return type not declared with %<auto%> \"\n+\t\t\t\t\"type specifier\", name);\n \t\t    return error_mark_node;\n \t\t  }\n \t      }"}, {"sha": "a2c711054866599710343244c9db241c08d67c04", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/742b6dc476c544389f109b03d221262a4cc55aaf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/742b6dc476c544389f109b03d221262a4cc55aaf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=742b6dc476c544389f109b03d221262a4cc55aaf", "patch": "@@ -1,3 +1,13 @@\n+2019-01-17  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* g++.dg/cpp0x/auto52.C: Test locations too.\n+\t* g++.dg/cpp0x/trailing2.C: Likewise.\n+\t* g++.dg/cpp1y/auto-fn18.C: Likewise.\n+\t* g++.dg/cpp1y/auto-fn25.C: Likewise.\n+\t* g++.dg/cpp1y/auto-fn52.C: Likewise.\n+\t* g++.dg/cpp1y/auto-fn53.C: Likewise.\n+\t* g++.dg/cpp1y/auto-fn54.C: Likewise.\n+\n 2019-01-17  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR c++/88699"}, {"sha": "d33f927a63ecf3e4f0c2df997e1cc33bf5107952", "filename": "gcc/testsuite/g++.dg/cpp0x/auto52.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/742b6dc476c544389f109b03d221262a4cc55aaf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto52.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/742b6dc476c544389f109b03d221262a4cc55aaf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto52.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto52.C?ref=742b6dc476c544389f109b03d221262a4cc55aaf", "patch": "@@ -2,5 +2,5 @@\n // { dg-do compile { target c++11 } }\n \n using T = auto() -> int;\n-using U = void() -> int; // { dg-error \"function with trailing return type not declared with .auto.\" }\n-using W = auto(); // { dg-error \"invalid use of .auto.\" }\n+using U = void() -> int; // { dg-error \"11:.type name. function with trailing return type not declared with .auto.\" }\n+using W = auto(); // { dg-error \"11:invalid use of .auto.\" }"}, {"sha": "848626a90d747a0dde303d3ad8e63e44a0f89a7a", "filename": "gcc/testsuite/g++.dg/cpp0x/trailing2.C", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/742b6dc476c544389f109b03d221262a4cc55aaf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ftrailing2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/742b6dc476c544389f109b03d221262a4cc55aaf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ftrailing2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ftrailing2.C?ref=742b6dc476c544389f109b03d221262a4cc55aaf", "patch": "@@ -3,14 +3,14 @@\n // { dg-do compile { target c++11 } }\n \n auto f1 () -> int;\n-auto f2 ();\t\t// { dg-error \"without trailing return type\" \"\" { target { ! c++14 } } }\n-int f3 () -> int;\t// { dg-error \"trailing return type\" }\n-auto *f4 () -> int;\t// { dg-error \"trailing return type\" }\n+auto f2 ();\t\t// { dg-error \"1:.f2. function uses .auto. type specifier without trailing return type\" \"\" { target { ! c++14 } } }\n+int f3 () -> int;\t// { dg-error \"1:.f3. function with trailing return type\" }\n+auto *f4 () -> int;\t// { dg-error \"1:.f4. function with trailing return type\" }\n \n struct A\n {\n   auto f5 () const -> int;\n-  auto f6 ();\t\t// { dg-error \"without trailing return type\" \"\" { target { ! c++14 } } }\n-  int f7 () -> int;\t// { dg-error \"trailing return type\" }\n-  auto *f8 () -> int;\t// { dg-error \"trailing return type\" }\n+  auto f6 ();\t\t// { dg-error \"3:.f6. function uses .auto. type specifier without trailing return type\" \"\" { target { ! c++14 } } }\n+  int f7 () -> int;\t// { dg-error \"3:.f7. function with trailing return type\" }\n+  auto *f8 () -> int;\t// { dg-error \"3:.f8. function with trailing return type\" }\n };"}, {"sha": "66cadc2994233334bd91eb30f0fbe0230cc256a7", "filename": "gcc/testsuite/g++.dg/cpp1y/auto-fn18.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/742b6dc476c544389f109b03d221262a4cc55aaf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn18.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/742b6dc476c544389f109b03d221262a4cc55aaf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn18.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn18.C?ref=742b6dc476c544389f109b03d221262a4cc55aaf", "patch": "@@ -3,7 +3,7 @@\n struct A\n {\n   virtual int f() { return 1; }\t // { dg-message \"overridden\" }\n-  virtual auto g() { return 1; } // { dg-error \"virtual\" }\n+  virtual auto g() { return 1; } // { dg-error \"11:virtual\" }\n };\n \n struct B: A"}, {"sha": "af986b3ff7245f4bbf1df300cc374193cb525e71", "filename": "gcc/testsuite/g++.dg/cpp1y/auto-fn25.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/742b6dc476c544389f109b03d221262a4cc55aaf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn25.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/742b6dc476c544389f109b03d221262a4cc55aaf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn25.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn25.C?ref=742b6dc476c544389f109b03d221262a4cc55aaf", "patch": "@@ -5,7 +5,7 @@\n \n struct A\n {\n-  virtual auto foo() {}\t\t// { dg-error \"virtual.*deduced\" }\n+  virtual auto foo() {}\t\t// { dg-error \"11:virtual.*deduced\" }\n };\n \n struct B : A"}, {"sha": "09082dd15b9833c5a719231f4fae791716d5cac9", "filename": "gcc/testsuite/g++.dg/cpp1y/auto-fn52.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/742b6dc476c544389f109b03d221262a4cc55aaf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn52.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/742b6dc476c544389f109b03d221262a4cc55aaf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn52.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn52.C?ref=742b6dc476c544389f109b03d221262a4cc55aaf", "patch": "@@ -1,4 +1,4 @@\n // PR c++/67012\n // { dg-do compile { target c++14 } }\n \n-decltype(auto) f() -> int; // { dg-error \"function with trailing return type has\" }\n+decltype(auto) f() -> int; // { dg-error \"1:.f. function with trailing return type has\" }"}, {"sha": "1c04bb55c34c95343f9e86984096e85494bfb81a", "filename": "gcc/testsuite/g++.dg/cpp1y/auto-fn53.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/742b6dc476c544389f109b03d221262a4cc55aaf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn53.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/742b6dc476c544389f109b03d221262a4cc55aaf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn53.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn53.C?ref=742b6dc476c544389f109b03d221262a4cc55aaf", "patch": "@@ -1,4 +1,4 @@\n // PR c++/86942\n // { dg-do compile { target c++14 } }\n \n-using T = decltype(auto) () -> int; // { dg-error \"invalid use of\" }\n+using T = decltype(auto) () -> int; // { dg-error \"11:invalid use of\" }"}, {"sha": "8b5992b8f9c2943ead850b17bf75b5f565e53fc7", "filename": "gcc/testsuite/g++.dg/cpp1y/auto-fn54.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/742b6dc476c544389f109b03d221262a4cc55aaf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn54.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/742b6dc476c544389f109b03d221262a4cc55aaf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn54.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn54.C?ref=742b6dc476c544389f109b03d221262a4cc55aaf", "patch": "@@ -1,3 +1,3 @@\n // { dg-do compile { target c++14 } }\n \n-using T = int () -> decltype(auto); // { dg-error \"function with trailing return type not declared with .auto.\" }\n+using T = int () -> decltype(auto); // { dg-error \"11:.type name. function with trailing return type not declared with .auto.\" }"}]}