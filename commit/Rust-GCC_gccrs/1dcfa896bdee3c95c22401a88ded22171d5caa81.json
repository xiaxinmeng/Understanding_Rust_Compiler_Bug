{"sha": "1dcfa896bdee3c95c22401a88ded22171d5caa81", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWRjZmE4OTZiZGVlM2M5NWMyMjQwMWE4OGRlZDIyMTcxZDVjYWE4MQ==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1996-10-21T22:43:33Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1996-10-21T22:43:33Z"}, "message": "(loop_comparison_code): New static variable.\n\n(unroll_loop): Add check for loop_comparison_code\n(loop_iterations): Set loop_comparison_code.\n\nFrom-SVN: r12991", "tree": {"sha": "657889c46e171e69c89c1a6b7ca896c6549bbdce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/657889c46e171e69c89c1a6b7ca896c6549bbdce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1dcfa896bdee3c95c22401a88ded22171d5caa81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1dcfa896bdee3c95c22401a88ded22171d5caa81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1dcfa896bdee3c95c22401a88ded22171d5caa81", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1dcfa896bdee3c95c22401a88ded22171d5caa81/comments", "author": null, "committer": null, "parents": [{"sha": "d00d338cdc2917a5d7da4ab6b129e0ec99615db4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d00d338cdc2917a5d7da4ab6b129e0ec99615db4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d00d338cdc2917a5d7da4ab6b129e0ec99615db4"}], "stats": {"total": 29, "additions": 18, "deletions": 11}, "files": [{"sha": "b720074b6046fa81d0a6d11053d4b24b28c5bc47", "filename": "gcc/unroll.c", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dcfa896bdee3c95c22401a88ded22171d5caa81/gcc%2Funroll.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dcfa896bdee3c95c22401a88ded22171d5caa81/gcc%2Funroll.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funroll.c?ref=1dcfa896bdee3c95c22401a88ded22171d5caa81", "patch": "@@ -191,6 +191,7 @@ static rtx loop_iteration_var;\n static rtx loop_initial_value;\n static rtx loop_increment;\n static rtx loop_final_value;\n+static enum rtx_code loop_comparison_code;\n \n /* Forward declarations.  */\n \n@@ -878,18 +879,23 @@ unroll_loop (loop_end, insn_count, loop_start, end_insert_before,\n \t  for (i = 0; i < unroll_number; i++)\n \t    labels[i] = gen_label_rtx ();\n \n-\t  /* Check for the case where the initial value is greater than or equal\n-\t     to the final value.  In that case, we want to execute exactly\n-\t     one loop iteration.  The code below will fail for this case.  */\n+\t  /* Check for the case where the initial value is greater than or\n+\t     equal to the final value.  In that case, we want to execute\n+\t     exactly one loop iteration.  The code below will fail for this\n+\t     case.  This check does not apply if the loop has a NE\n+\t     comparison at the end.  */\n \n-\t  emit_cmp_insn (initial_value, final_value, neg_inc ? LE : GE,\n-\t\t\t NULL_RTX, mode, 0, 0);\n-\t  if (neg_inc)\n-\t    emit_jump_insn (gen_ble (labels[1]));\n-\t  else\n-\t    emit_jump_insn (gen_bge (labels[1]));\n-\t  JUMP_LABEL (get_last_insn ()) = labels[1];\n-\t  LABEL_NUSES (labels[1])++;\n+\t  if (loop_comparison_code != NE)\n+\t    {\n+\t      emit_cmp_insn (initial_value, final_value, neg_inc ? LE : GE,\n+\t\t\t     NULL_RTX, mode, 0, 0);\n+\t      if (neg_inc)\n+\t\temit_jump_insn (gen_ble (labels[1]));\n+\t      else\n+\t\temit_jump_insn (gen_bge (labels[1]));\n+\t      JUMP_LABEL (get_last_insn ()) = labels[1];\n+\t      LABEL_NUSES (labels[1])++;\n+\t    }\n \n \t  /* Assuming the unroll_number is 4, and the increment is 2, then\n \t     for a negative increment:\tfor a positive increment:\n@@ -3355,6 +3361,7 @@ loop_iterations (loop_start, loop_end)\n   loop_initial_value = initial_value;\n   loop_increment = increment;\n   loop_final_value = final_value;\n+  loop_comparison_code = comparison_code;\n \n   if (increment == 0)\n     {"}]}