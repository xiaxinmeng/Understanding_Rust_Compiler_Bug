{"sha": "3824a0a2e2cf8bb20cce2c6d4e817a854b7a889f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzgyNGEwYTJlMmNmOGJiMjBjY2UyYzZkNGU4MTdhODU0YjdhODg5Zg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-02-16T09:12:37Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-02-16T09:12:37Z"}, "message": "re PR tree-optimization/69802 (gcc ICE at -O1 and above  on valid code on x86_64-linux-gnu with \u201cseg fault\u201d)\n\n\tPR tree-optimization/69802\n\t* tree-ssa-reassoc.c (update_range_test): If op is\n\tSSA_NAME_IS_DEFAULT_DEF, give up unless tem is a positive\n\top == 1 test of precision 1 integral op, otherwise handle\n\tthat case as op itself.  Fix up formatting.\n\t(optimize_range_tests_to_bit_test, optimize_range_tests): Fix\n\tup formatting.\n\n\t* gcc.dg/pr69802.c: New test.\n\nFrom-SVN: r233446", "tree": {"sha": "7a34f9afd5fef12187661d081a1af2af8cc3c539", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7a34f9afd5fef12187661d081a1af2af8cc3c539"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3824a0a2e2cf8bb20cce2c6d4e817a854b7a889f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3824a0a2e2cf8bb20cce2c6d4e817a854b7a889f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3824a0a2e2cf8bb20cce2c6d4e817a854b7a889f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3824a0a2e2cf8bb20cce2c6d4e817a854b7a889f/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4cb5f5a366efff0317dd0a432a56464eafb6f3f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cb5f5a366efff0317dd0a432a56464eafb6f3f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4cb5f5a366efff0317dd0a432a56464eafb6f3f4"}], "stats": {"total": 91, "additions": 81, "deletions": 10}, "files": [{"sha": "2700b6bd41082907198e6ad5d28c775214c729ef", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3824a0a2e2cf8bb20cce2c6d4e817a854b7a889f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3824a0a2e2cf8bb20cce2c6d4e817a854b7a889f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3824a0a2e2cf8bb20cce2c6d4e817a854b7a889f", "patch": "@@ -1,3 +1,13 @@\n+2016-02-16  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/69802\n+\t* tree-ssa-reassoc.c (update_range_test): If op is\n+\tSSA_NAME_IS_DEFAULT_DEF, give up unless tem is a positive\n+\top == 1 test of precision 1 integral op, otherwise handle\n+\tthat case as op itself.  Fix up formatting.\n+\t(optimize_range_tests_to_bit_test, optimize_range_tests): Fix\n+\tup formatting.\n+\n 2016-02-16  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/69586"}, {"sha": "4d6884ed5c49cb287e852a728ffd1652e48cfe7c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3824a0a2e2cf8bb20cce2c6d4e817a854b7a889f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3824a0a2e2cf8bb20cce2c6d4e817a854b7a889f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3824a0a2e2cf8bb20cce2c6d4e817a854b7a889f", "patch": "@@ -1,3 +1,8 @@\n+2016-02-16  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/69802\n+\t* gcc.dg/pr69802.c: New test.\n+\n 2016-02-16  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/69801"}, {"sha": "27ee02f36b5d54193741f779a0fc4a98e4ee95a0", "filename": "gcc/testsuite/gcc.dg/pr69802.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3824a0a2e2cf8bb20cce2c6d4e817a854b7a889f/gcc%2Ftestsuite%2Fgcc.dg%2Fpr69802.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3824a0a2e2cf8bb20cce2c6d4e817a854b7a889f/gcc%2Ftestsuite%2Fgcc.dg%2Fpr69802.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr69802.c?ref=3824a0a2e2cf8bb20cce2c6d4e817a854b7a889f", "patch": "@@ -0,0 +1,23 @@\n+/* PR tree-optimization/69802 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -Wall\" } */\n+\n+struct S { unsigned f : 1; };\n+int a, d;\n+\n+int\n+foo (void)\n+{\n+  unsigned b = 0;\n+  struct S c;\n+  d = ((1 && b) < c.f) & c.f;\t/* { dg-warning \"is used uninitialized\" } */\n+  return a;\n+}\n+\n+int\n+bar (_Bool c)\n+{\n+  unsigned b = 0;\n+  d = ((1 && b) < c) & c;\n+  return a;\n+}"}, {"sha": "17eb64f1aa7a9905da1c178bbc92022fc5387bbe", "filename": "gcc/tree-ssa-reassoc.c", "status": "modified", "additions": 43, "deletions": 10, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3824a0a2e2cf8bb20cce2c6d4e817a854b7a889f/gcc%2Ftree-ssa-reassoc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3824a0a2e2cf8bb20cce2c6d4e817a854b7a889f/gcc%2Ftree-ssa-reassoc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-reassoc.c?ref=3824a0a2e2cf8bb20cce2c6d4e817a854b7a889f", "patch": "@@ -2046,19 +2046,41 @@ update_range_test (struct range_entry *range, struct range_entry *otherrange,\n {\n   operand_entry *oe = (*ops)[range->idx];\n   tree op = oe->op;\n-  gimple *stmt = op ? SSA_NAME_DEF_STMT (op) :\n-    last_stmt (BASIC_BLOCK_FOR_FN (cfun, oe->id));\n+  gimple *stmt = op ? SSA_NAME_DEF_STMT (op)\n+\t\t    : last_stmt (BASIC_BLOCK_FOR_FN (cfun, oe->id));\n   location_t loc = gimple_location (stmt);\n   tree optype = op ? TREE_TYPE (op) : boolean_type_node;\n   tree tem = build_range_check (loc, optype, unshare_expr (exp),\n \t\t\t\tin_p, low, high);\n   enum warn_strict_overflow_code wc = WARN_STRICT_OVERFLOW_COMPARISON;\n   gimple_stmt_iterator gsi;\n-  unsigned int i;\n+  unsigned int i, uid;\n \n   if (tem == NULL_TREE)\n     return false;\n \n+  /* If op is default def SSA_NAME, there is no place to insert the\n+     new comparison.  Give up, unless we can use OP itself as the\n+     range test.  */\n+  if (op && SSA_NAME_IS_DEFAULT_DEF (op))\n+    {\n+      if (op == range->exp\n+\t  && ((TYPE_PRECISION (optype) == 1 && TYPE_UNSIGNED (optype))\n+\t      || TREE_CODE (optype) == BOOLEAN_TYPE)\n+\t  && (op == tem\n+\t      || (TREE_CODE (tem) == EQ_EXPR\n+\t\t  && TREE_OPERAND (tem, 0) == op\n+\t\t  && integer_onep (TREE_OPERAND (tem, 1))))\n+\t  && opcode != BIT_IOR_EXPR\n+\t  && (opcode != ERROR_MARK || oe->rank != BIT_IOR_EXPR))\n+\t{\n+\t  stmt = NULL;\n+\t  tem = op;\n+\t}\n+      else\n+\treturn false;\n+    }\n+\n   if (strict_overflow_p && issue_strict_overflow_warning (wc))\n     warning_at (loc, OPT_Wstrict_overflow,\n \t\t\"assuming signed overflow does not occur \"\n@@ -2096,12 +2118,22 @@ update_range_test (struct range_entry *range, struct range_entry *otherrange,\n     tem = invert_truthvalue_loc (loc, tem);\n \n   tem = fold_convert_loc (loc, optype, tem);\n-  gsi = gsi_for_stmt (stmt);\n-  unsigned int uid = gimple_uid (stmt);\n+  if (stmt)\n+    {\n+      gsi = gsi_for_stmt (stmt);\n+      uid = gimple_uid (stmt);\n+    }\n+  else\n+    {\n+      gsi = gsi_none ();\n+      uid = 0;\n+    }\n+  if (stmt == NULL)\n+    gcc_checking_assert (tem == op);\n   /* In rare cases range->exp can be equal to lhs of stmt.\n      In that case we have to insert after the stmt rather then before\n      it.  If stmt is a PHI, insert it at the start of the basic block.  */\n-  if (op != range->exp)\n+  else if (op != range->exp)\n     {\n       gsi_insert_seq_before (&gsi, seq, GSI_SAME_STMT);\n       tem = force_gimple_operand_gsi (&gsi, tem, true, NULL_TREE, true,\n@@ -2489,7 +2521,7 @@ optimize_range_tests_to_bit_test (enum tree_code opcode, int first, int length,\n \t  operand_entry *oe = (*ops)[ranges[i].idx];\n \t  tree op = oe->op;\n \t  gimple *stmt = op ? SSA_NAME_DEF_STMT (op)\n-\t\t\t   : last_stmt (BASIC_BLOCK_FOR_FN (cfun, oe->id));\n+\t\t\t    : last_stmt (BASIC_BLOCK_FOR_FN (cfun, oe->id));\n \t  location_t loc = gimple_location (stmt);\n \t  tree optype = op ? TREE_TYPE (op) : boolean_type_node;\n \n@@ -2553,7 +2585,7 @@ optimize_range_tests_to_bit_test (enum tree_code opcode, int first, int length,\n \t  gcc_assert (TREE_CODE (exp) == SSA_NAME);\n \t  gimple_set_visited (SSA_NAME_DEF_STMT (exp), true);\n \t  gimple *g = gimple_build_assign (make_ssa_name (optype),\n-\t\t\t\t\t  BIT_IOR_EXPR, tem, exp);\n+\t\t\t\t\t   BIT_IOR_EXPR, tem, exp);\n \t  gimple_set_location (g, loc);\n \t  gimple_seq_add_stmt_without_update (&seq, g);\n \t  exp = gimple_assign_lhs (g);\n@@ -2599,8 +2631,9 @@ optimize_range_tests (enum tree_code opcode,\n       oe = (*ops)[i];\n       ranges[i].idx = i;\n       init_range_entry (ranges + i, oe->op,\n-\t\t\toe->op ? NULL :\n-\t\t\t  last_stmt (BASIC_BLOCK_FOR_FN (cfun, oe->id)));\n+\t\t\toe->op\n+\t\t\t? NULL\n+\t\t\t: last_stmt (BASIC_BLOCK_FOR_FN (cfun, oe->id)));\n       /* For | invert it now, we will invert it again before emitting\n \t the optimized expression.  */\n       if (opcode == BIT_IOR_EXPR"}]}