{"sha": "440a50821263f118d1b7c424e5506670a67a6e6b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDQwYTUwODIxMjYzZjExOGQxYjdjNDI0ZTU1MDY2NzBhNjdhNmU2Yg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2013-08-29T19:52:33Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2013-08-29T19:52:33Z"}, "message": "cgraphclones.c (cgraph_create_virtual_clone): Compute the DECL_NAME of the clone from the DECL_NAME of the original function.\n\n\t* cgraphclones.c (cgraph_create_virtual_clone): Compute the DECL_NAME\n\tof the clone from the DECL_NAME of the original function.\n\nFrom-SVN: r202086", "tree": {"sha": "e098e4a02db951f24d600b0dfbec08c4612e15d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e098e4a02db951f24d600b0dfbec08c4612e15d1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/440a50821263f118d1b7c424e5506670a67a6e6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/440a50821263f118d1b7c424e5506670a67a6e6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/440a50821263f118d1b7c424e5506670a67a6e6b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/440a50821263f118d1b7c424e5506670a67a6e6b/comments", "author": null, "committer": null, "parents": [{"sha": "6e39ee0c0b95557ac2765acdd6ca7de98dba856b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e39ee0c0b95557ac2765acdd6ca7de98dba856b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e39ee0c0b95557ac2765acdd6ca7de98dba856b"}], "stats": {"total": 25, "additions": 20, "deletions": 5}, "files": [{"sha": "f254cd0324f4e53e812f84a5cb32afbce75a798e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/440a50821263f118d1b7c424e5506670a67a6e6b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/440a50821263f118d1b7c424e5506670a67a6e6b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=440a50821263f118d1b7c424e5506670a67a6e6b", "patch": "@@ -1,3 +1,8 @@\n+2013-08-29  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* cgraphclones.c (cgraph_create_virtual_clone): Compute the DECL_NAME\n+\tof the clone from the DECL_NAME of the original function.\n+\n 2013-08-29  Oleg Endo  <olegendo@gcc.gnu.org>\n \n \t* passes.c (register_pass): Add overload."}, {"sha": "54b97b91c785adb4d191bb759752018b885a39cd", "filename": "gcc/cgraphclones.c", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/440a50821263f118d1b7c424e5506670a67a6e6b/gcc%2Fcgraphclones.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/440a50821263f118d1b7c424e5506670a67a6e6b/gcc%2Fcgraphclones.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphclones.c?ref=440a50821263f118d1b7c424e5506670a67a6e6b", "patch": "@@ -252,7 +252,7 @@ cgraph_clone_node (struct cgraph_node *n, tree decl, gcov_type count, int freq,\n   return new_node;\n }\n \n-/* Create a new name for clone of DECL, add SUFFIX.  Returns an identifier.  */\n+/* Return a new assembler name for a clone of DECL with SUFFIX.  */\n \n static GTY(()) unsigned int clone_fn_id_num;\n \n@@ -293,8 +293,9 @@ cgraph_create_virtual_clone (struct cgraph_node *old_node,\n   tree old_decl = old_node->symbol.decl;\n   struct cgraph_node *new_node = NULL;\n   tree new_decl;\n-  size_t i;\n+  size_t len, i;\n   struct ipa_replace_map *map;\n+  char *name;\n \n   if (!in_lto_p)\n     gcc_checking_assert  (tree_versionable_function_p (old_decl));\n@@ -318,8 +319,13 @@ cgraph_create_virtual_clone (struct cgraph_node *old_node,\n      sometimes storing only clone decl instead of original.  */\n \n   /* Generate a new name for the new version. */\n-  DECL_NAME (new_decl) = clone_function_name (old_decl, suffix);\n-  SET_DECL_ASSEMBLER_NAME (new_decl, DECL_NAME (new_decl));\n+  len = IDENTIFIER_LENGTH (DECL_NAME (old_decl));\n+  name = XALLOCAVEC (char, len + strlen (suffix) + 2);\n+  memcpy (name, IDENTIFIER_POINTER (DECL_NAME (old_decl)), len);\n+  strcpy (name + len + 1, suffix);\n+  name[len] = '.';\n+  DECL_NAME (new_decl) = get_identifier (name);\n+  SET_DECL_ASSEMBLER_NAME (new_decl, clone_function_name (old_decl, suffix));\n   SET_DECL_RTL (new_decl, NULL);\n \n   new_node = cgraph_clone_node (old_node, new_decl, old_node->count,"}, {"sha": "96259ea4cd952eab82169b3e6d613ae60cfd000b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/440a50821263f118d1b7c424e5506670a67a6e6b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/440a50821263f118d1b7c424e5506670a67a6e6b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=440a50821263f118d1b7c424e5506670a67a6e6b", "patch": "@@ -1,3 +1,7 @@\n+2013-08-29  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc.dg/tree-ssa/ipa-cp-1.c: Adjust regexp.\n+\n 2013-08-29  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/58246"}, {"sha": "ec628b777a98f4d01e2c3f2f905ed834feda2bc7", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ipa-cp-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/440a50821263f118d1b7c424e5506670a67a6e6b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fipa-cp-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/440a50821263f118d1b7c424e5506670a67a6e6b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fipa-cp-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fipa-cp-1.c?ref=440a50821263f118d1b7c424e5506670a67a6e6b", "patch": "@@ -16,5 +16,5 @@ blah ()\n   very_long_function (1);\n }\n /* One appearance for dump, one self recursive call and one call from main.  */\n-/* { dg-final { scan-tree-dump-times \"very_long_function.constprop.0 \\\\(\\\\)\" 3 \"optimized\"} } */\n+/* { dg-final { scan-tree-dump-times \"very_long_function.constprop \\\\(\\\\)\" 3 \"optimized\"} } */\n /* { dg-final { cleanup-tree-dump \"optimized\" } } */"}]}