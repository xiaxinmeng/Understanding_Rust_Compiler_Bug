{"sha": "157a620e8a68cbe7abb9967aa6d45a15c38395d0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTU3YTYyMGU4YTY4Y2JlN2FiYjk5NjdhYTZkNDVhMTVjMzgzOTVkMA==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@cygnus.com", "date": "1998-03-28T13:15:57Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "1998-03-28T13:15:57Z"}, "message": "Add documentation of more ARM command line options.\n\nAdd documentation of Thumb command line options.\n\nFrom-SVN: r18876", "tree": {"sha": "c8352c30e2697c20b64b932f1ed00fa34b331c5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c8352c30e2697c20b64b932f1ed00fa34b331c5f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/157a620e8a68cbe7abb9967aa6d45a15c38395d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/157a620e8a68cbe7abb9967aa6d45a15c38395d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/157a620e8a68cbe7abb9967aa6d45a15c38395d0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/157a620e8a68cbe7abb9967aa6d45a15c38395d0/comments", "author": null, "committer": null, "parents": [{"sha": "43ffadb3756b54e7db96835a82a530158430d7d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43ffadb3756b54e7db96835a82a530158430d7d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43ffadb3756b54e7db96835a82a530158430d7d9"}], "stats": {"total": 182, "additions": 176, "deletions": 6}, "files": [{"sha": "647a7cb893059bcaf7cc3254b1ee5bbf35bb0505", "filename": "gcc/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/157a620e8a68cbe7abb9967aa6d45a15c38395d0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/157a620e8a68cbe7abb9967aa6d45a15c38395d0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=157a620e8a68cbe7abb9967aa6d45a15c38395d0", "patch": "@@ -1,5 +1,7 @@\n Sat Mar 28 10:47:21 1998  Nick Clifton  <nickc@cygnus.com>\n \n+\t* invoke.texi: Document more ARM and Thumb command line options.\n+\n \t* config/arm/xm-thumb.h: New file.\n \n Sat Mar 28 01:37:33 1998  Craig Burley  <burley@gnu.ai.mit.edu>"}, {"sha": "903eb70ec4d8f1002bc34e9d6fa2900ee5c1a9b5", "filename": "gcc/invoke.texi", "status": "modified", "additions": 174, "deletions": 6, "changes": 180, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/157a620e8a68cbe7abb9967aa6d45a15c38395d0/gcc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/157a620e8a68cbe7abb9967aa6d45a15c38395d0/gcc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finvoke.texi?ref=157a620e8a68cbe7abb9967aa6d45a15c38395d0", "patch": "@@ -241,11 +241,26 @@ in the following sections.\n -mstorem-bug  -muser-registers\n \n @emph{ARM Options}\n--mapcs-frame  -mapcs-26  -mapcs-32\n--mlittle-endian  -mbig-endian  -mwords-little-endian\n--mshort-load-bytes  -mno-short-load-bytes\n--msoft-float  -mhard-float\n--mbsd  -mxopen  -mno-symrename\n+-mapcs-frame -mno-apcs-frame\n+-mapcs-26 -mapcs-32\n+-mapcs-stack-check -mno-apcs-stack-check\n+-mapcs-float -mno-apcs-float\n+-mapcs-reentrant -mno-apcs-reentrant\n+-msched-prolog -mno-sched-prolog\n+-mlittle-endian -mbig-endian -mwords-little-endian\n+-mshort-load-bytes -mno-short-load-bytes -mshort-load-words -mno-short-load-words\n+-msoft-float -mhard-float -mfpe\n+-mthumb-interwork -mno-thumb-interwork\n+-mcpu= -march= -mfpe= \n+-mstructure-size-boundary=\n+-mbsd -mxopen -mno-symrename\n+\n+@emph{Thumb Options}\n+-mtpcs-frame -mno-tpcs-frame\n+-mtpcs-leaf-frame -mno-tpcs-leaf-frame\n+-mlittle-endian  -mbig-endian\n+-mthumb-interwork -mno-thumb-interwork\n+-mstructure-size-boundary=\n \n @emph{MN10300 Options}\n -mmult-bug\n@@ -2891,6 +2906,7 @@ that macro, which enables you to change the defaults.\n * Convex Options::\n * AMD29K Options::\n * ARM Options::\n+* Thumb Options::\n * MN10300 Options::\n * M32R/D Options::\n * M88K Options::\n@@ -3481,7 +3497,13 @@ architectures:\n @kindex -mapcs-frame\n Generate a stack frame that is compliant with the ARM Procedure Call\n Standard for all functions, even if this is not strictly necessary for\n-correct execution of the code.\n+correct execution of the code.  Specifying @samp{-fomit-frame-pointer}\n+with this option will cause the stack frames not to be generated for\n+leaf functions.  The default is @samp{-mno-apcs-frame}.\n+\n+@item -mapcs\n+@kindex -mapcs\n+This is a synonym for @samp{-mapcs-frame}.\n \n @item -mapcs-26\n @kindex -mapcs-26\n@@ -3497,6 +3519,54 @@ and conforming to the function calling standards for the APCS 32-bit\n option.  This option replaces the @samp{-m6} option of previous releases\n of the compiler.\n \n+@item -mapcs-stack-check\n+@kindex -mapcs-stack-check\n+@kindex -mno-apcs-stack-check\n+Generate code to check the amount of stack space available upon entry to\n+every function (that actually uses some stack space).  If there is\n+insufficient space available then either the function\n+@samp{__rt_stkovf_split_small} or @samp{__rt_stkovf_split_big} will be\n+called, depending upon the amount of stack space required.  The run time\n+system is required to provide these functions.  The default is\n+@samp{-mno-apcs-stack-check}, since this produces smaller code.\n+\n+@item -mapcs-float\n+@kindex -mapcs-float\n+@kindex -mno-apcs-float\n+Pass floating point arguments using the float point registers.  This is\n+one of the variants of the APCS.  This option is reccommended if the\n+target hardware has a floating point unit or if a lot of floating point\n+arithmetic is going to be performed by the code.  The default is\n+@samp{-mno-apcs-float}, since integer only code is slightly increased in\n+size if @samp{-mapcs-float} is used.\n+\n+@item -mapcs-reentrant\n+@kindex -mapcs-reentrant\n+@kindex -mno-apcs-reentrant\n+Generate reentrant, position independent code.  This is the equivalent\n+to specifying the @samp{-fpic} option.  The default is\n+@samp{-mno-apcs-reentrant}.\n+\n+@item -mthumb-interwork\n+@kindex -mthumb-interwork\n+@kindex -mno-thumb-interwork\n+Generate code which supports calling between the ARM and THUMB\n+instruction sets.  Without this option the two instruction sets cannot\n+be reliably used inside one program.  The default is\n+@samp{-mno-thumb-interwork}, since slightly larger code is generated\n+when @samp{-mthumb-interwork} is specified.\n+\n+@item -mno-sched-prolog\n+@kindex -mno-sched-prolog\n+@kindex -msched-prolog\n+Prevent the reordering of instructions in the function prolog, or the\n+merging of those instruction with the instructions in the function's\n+body.  This means that all functions will start with a recognisable set\n+of instructions (or in fact one of a chioce from a small set of\n+different function prologues), and this information can be used to\n+locate the start if functions inside an executable piece of code.  The\n+default is @samp{-msched-prolog}.\n+\n @item -mhard-float\n Generate output containing floating point instructions.  This is the\n default.\n@@ -3544,6 +3614,14 @@ Use unaligned word loads to load half-words (eg @samp{short}s).  This\n option produces more efficient code, but the MMU is sometimes configured\n to trap these instructions.\n \n+@item -mshort-load-words\n+@kindex -mshort-load-words\n+This is a synonym for the @samp{-mno-short-load-bytes}.\n+\n+@item -mno-short-load-words\n+@kindex -mno-short-load-words\n+This is a synonym for the @samp{-mshort-load-bytes}.\n+\n @item -mbsd\n @kindex -mbsd\n This option only applies to RISC iX.  Emulate the native BSD-mode\n@@ -3562,8 +3640,98 @@ Normally it is necessary to modify some of the standard symbols in\n preparation for linking with the RISC iX C library; this option\n suppresses this pass.  The post-processor is never run when the\n compiler is built for cross-compilation.\n+\n+@item -mcpu=<name>\n+@kindex -mcpu=\n+This specifies the name of the target ARM processor.  GCC uses this name\n+to determine what kind of instructions it can use when generating\n+assembly code.  Permissable names are: arm2, arm250, arm3, arm6, arm60,\n+arm600, arm610, arm620, arm7, arm7m, arm7d, arm7dm, arm7di, arm7dmi,\n+arm70, arm700, arm700i, arm710, arm710c, arm7100, arm7500, arm7500fe,\n+arm7tdmi, arm8, strongarm, strongarm110\n+\n+@item -march=<name>\n+@kindex -march=\n+This specifies the name of the target ARM architecture.  GCC uses this\n+name to determine what kind of instructions it can use when generating\n+assembly code.  This option can be used in conjunction with or instead\n+of the @samp{-mcpu=} option.  Permissable names are: armv2, armv2a,\n+armv3, armv3m, armv4, armv4t\n+\n+@item -mfpe=<number>\n+@kindex -mfpe=\n+This specifes the version of the floating point emulation available on\n+the target.  Permissable values are 2 and 3.\n+\n+@item -mstructure-size-boundary=<n>\n+@kindex -mstructure-size-boundary\n+The size of all structures and unions will be rounded up to a multiple\n+of the number of bits set by this option.  Permissable values are 8 and\n+32.  The default value varies for different toolchains.  For the COFF\n+targeted toolchain the default value is 8.  Specifying the larger number\n+can produced faster, more efficient code, but can also increase the size\n+of the program.  The two values are potentially incompatible.  Code\n+compiled with one value cannot necessarily expect to work with code or\n+libraries compiled with the other value, if they exchange information\n+using structures or unions.  Programmers are encouraged to use the 32\n+value as future versions of the toolchain may default to this value.\n+\n @end table\n \n+@node Thumb Options\n+@subsection Thumb Options\n+@cindex Thumb Options\n+\n+@table @code\n+\n+@item -mthumb-interwork\n+@kindex -mthumb-interwork\n+@kindex -mno-thumb-interwork\n+Generate code which supports calling between the THUMB and ARM\n+instruction sets.  Without this option the two instruction sets cannot\n+be reliably used inside one program.  The default is\n+@samp{-mno-thumb-interwork}, since slightly smaller code is generated\n+with this option.\n+\n+@item -mtpcs-frame\n+@kindex -mtpcs-frame\n+@kindex -mno-tpcs-frame\n+Generate a stack frame that is compliant with the Thumb Procedure Call\n+Standard for all non-leaf functions.  (A leaf function is one that does\n+not call any other functions).  The default is @samp{-mno-apcs-frame}. \n+\n+@item -mtpcs-leaf-frame\n+@kindex -mtpcs-leaf-frame\n+@kindex -mno-tpcs-leaf-frame\n+Generate a stack frame that is compliant with the Thumb Procedure Call\n+Standard for all leaf functions.  (A leaf function is one that does\n+not call any other functions).  The default is @samp{-mno-apcs-leaf-frame}. \n+\n+@item -mlittle-endian\n+@kindex -mlittle-endian\n+Generate code for a processor running in little-endian mode.  This is\n+the default for all standard configurations.\n+\n+@item -mbig-endian\n+@kindex -mbig-endian\n+Generate code for a processor running in big-endian mode.\n+\n+@item -mstructure-size-boundary=<n>\n+@kindex -mstructure-size-boundary\n+The size of all structures and unions will be rounded up to a multiple\n+of the number of bits set by this option.  Permissable values are 8 and\n+32.  The default value varies for different toolchains.  For the COFF\n+targeted toolchain the default value is 8.  Specifying the larger number\n+can produced faster, more efficient code, but can also increase the size\n+of the program.  The two values are potentially incompatible.  Code\n+compiled with one value cannot necessarily expect to work with code or\n+libraries compiled with the other value, if they exchange information\n+using structures or unions.  Programmers are encouraged to use the 32\n+value as future versions of the toolchain may default to this value.\n+\n+@end table\n+\n+\n @node MN10300 Options\n @subsection MN10300 Options\n @cindex MN10300 options"}]}