{"sha": "396a80436c733527118877c95bfec72e38401eeb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzk2YTgwNDM2YzczMzUyNzExODg3N2M5NWJmZWM3MmUzODQwMWVlYg==", "commit": {"author": {"name": "Mark Wielaard", "email": "mark@klomp.org", "date": "2002-11-07T17:57:09Z"}, "committer": {"name": "Mark Wielaard", "email": "mark@gcc.gnu.org", "date": "2002-11-07T17:57:09Z"}, "message": "natField.cc (getBoolean): Use getType().\n\n\t* java/lang/reflect/natField.cc (getBoolean): Use getType().\n\t(getByte): Likewise.\n\t(getShort): Likewise.\n\t(getInt): Likewise.\n\t(getLong): Likewise.\n\t(getFloat): Likewise.\n\t(getDouble): Likewise.\n\t(get): Likewise.\n\t(setChar): Likewise.\n\t(setByte): Likewise.\n\t(setShort): Likewise.\n\t(setInt): Likewise.\n\t(setLong): Likewise.\n\t(setFloat): Likewise.\n\t(setDouble): Likewise.\n\nFrom-SVN: r58899", "tree": {"sha": "808030e68a8907cc13eb51f674858e90e305739b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/808030e68a8907cc13eb51f674858e90e305739b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/396a80436c733527118877c95bfec72e38401eeb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/396a80436c733527118877c95bfec72e38401eeb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/396a80436c733527118877c95bfec72e38401eeb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/396a80436c733527118877c95bfec72e38401eeb/comments", "author": null, "committer": null, "parents": [{"sha": "74c1330854bc9873302cc69f80227c37989bac5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74c1330854bc9873302cc69f80227c37989bac5d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74c1330854bc9873302cc69f80227c37989bac5d"}], "stats": {"total": 86, "additions": 44, "deletions": 42}, "files": [{"sha": "742977d601d5f4c7692a2f59adf4d4988d6a925d", "filename": "libjava/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/396a80436c733527118877c95bfec72e38401eeb/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/396a80436c733527118877c95bfec72e38401eeb/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=396a80436c733527118877c95bfec72e38401eeb", "patch": "@@ -1,3 +1,21 @@\n+2002-11-07  Mark Wielaard  <mark@klomp.org>\n+\n+\t* java/lang/reflect/natField.cc (getBoolean): Use getType().\n+\t(getByte): Likewise.\n+\t(getShort): Likewise.\n+\t(getInt): Likewise.\n+\t(getLong): Likewise.\n+\t(getFloat): Likewise.\n+\t(getDouble): Likewise.\n+\t(get): Likewise.\n+\t(setChar): Likewise.\n+\t(setByte): Likewise.\n+\t(setShort): Likewise.\n+\t(setInt): Likewise.\n+\t(setLong): Likewise.\n+\t(setFloat): Likewise.\n+\t(setDouble): Likewise.\n+\n 2002-11-07  Michael Koch <konqueror@gmx.de>\n \n \t* java/awt/Choice.java,"}, {"sha": "93e27a280ce44c638e95859c373b1ba26e01e9f9", "filename": "libjava/java/lang/reflect/natField.cc", "status": "modified", "additions": 26, "deletions": 42, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/396a80436c733527118877c95bfec72e38401eeb/libjava%2Fjava%2Flang%2Freflect%2FnatField.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/396a80436c733527118877c95bfec72e38401eeb/libjava%2Fjava%2Flang%2Freflect%2FnatField.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2Freflect%2FnatField.cc?ref=396a80436c733527118877c95bfec72e38401eeb", "patch": "@@ -168,81 +168,73 @@ getDouble (jclass cls, void* addr)\n jboolean\n java::lang::reflect::Field::getBoolean (jclass caller, jobject obj)\n {\n-  jfieldID fld = _Jv_FromReflectedField (this);\n-  return ::getBoolean (fld->type, getAddr (this, caller, obj));\n+  return ::getBoolean (this->getType(), getAddr (this, caller, obj));\n }\n \n jchar\n java::lang::reflect::Field::getChar (jclass caller, jobject obj)\n {\n-  jfieldID fld = _Jv_FromReflectedField (this);\n-  return ::getChar (fld->type, getAddr (this, caller, obj));\n+  return ::getChar (this->getType(), getAddr (this, caller, obj));\n }\n \n jbyte\n java::lang::reflect::Field::getByte (jclass caller, jobject obj)\n {\n-  jfieldID fld = _Jv_FromReflectedField (this);\n-  return ::getByte (fld->type, getAddr (this, caller, obj));\n+  return ::getByte (this->getType(), getAddr (this, caller, obj));\n }\n \n jshort\n java::lang::reflect::Field::getShort (jclass caller, jobject obj)\n {\n-  jfieldID fld = _Jv_FromReflectedField (this);\n-  return ::getShort (fld->type, getAddr (this, caller, obj));\n+  return ::getShort (this->getType(), getAddr (this, caller, obj));\n }\n \n jint\n java::lang::reflect::Field::getInt (jclass caller, jobject obj)\n {\n-  jfieldID fld = _Jv_FromReflectedField (this);\n-  return ::getInt (fld->type, getAddr (this, caller, obj));\n+  return ::getInt (this->getType(), getAddr (this, caller, obj));\n }\n \n jlong\n java::lang::reflect::Field::getLong (jclass caller, jobject obj)\n {\n-  jfieldID fld = _Jv_FromReflectedField (this);\n-  return ::getLong (fld->type, getAddr (this, caller, obj));\n+  return ::getLong (this->getType(), getAddr (this, caller, obj));\n }\n \n jfloat\n java::lang::reflect::Field::getFloat (jclass caller, jobject obj)\n {\n-  jfieldID fld = _Jv_FromReflectedField (this);\n-  return ::getFloat (fld->type, getAddr (this, caller, obj));\n+  return ::getFloat (this->getType(), getAddr (this, caller, obj));\n }\n \n jdouble\n java::lang::reflect::Field::getDouble (jclass caller, jobject obj)\n {\n-  jfieldID fld = _Jv_FromReflectedField (this);\n-  return ::getDouble (fld->type, getAddr (this, caller, obj));\n+  return ::getDouble (this->getType(), getAddr (this, caller, obj));\n }\n \n jobject\n java::lang::reflect::Field::get (jclass caller, jobject obj)\n {\n-  jfieldID fld = _Jv_FromReflectedField (this);\n+  jclass type = this->getType();\n   void* addr = getAddr (this, caller, obj);\n-  if (! fld->type->isPrimitive ())\n+  if (! type->isPrimitive ())\n     return * (jobject*) addr;\n-  if (fld->type == JvPrimClass (double))\n+  if (type == JvPrimClass (double))\n     return new java::lang::Double (* (jdouble*) addr);\n-  if (fld->type == JvPrimClass (float))\n+  if (type == JvPrimClass (float))\n     return new java::lang::Float (* (jfloat*) addr);\n-  if (fld->type == JvPrimClass (long))\n+  if (type == JvPrimClass (long))\n     return new java::lang::Long (* (jlong*) addr);\n-  if (fld->type == JvPrimClass (int))\n+  if (type == JvPrimClass (int))\n     return new java::lang::Integer (* (jint*) addr);\n-  if (fld->type == JvPrimClass (short))\n+  if (type == JvPrimClass (short))\n     return new java::lang::Short (* (jshort*) addr);\n-  if (fld->type == JvPrimClass (byte))\n+  if (type == JvPrimClass (byte))\n     return new java::lang::Byte (* (jbyte*) addr);\n-  if (fld->type == JvPrimClass (char))\n+  if (type == JvPrimClass (char))\n     return new java::lang::Character (* (jchar*) addr);\n-  if (fld->type == JvPrimClass (boolean))\n+  if (type == JvPrimClass (boolean))\n     {\n       _Jv_InitClass (&java::lang::Boolean::class$);\n       if (* (jboolean*) addr)\n@@ -376,56 +368,48 @@ setDouble (jclass type, void *addr, jdouble value)\n void\n java::lang::reflect::Field::setBoolean (jclass caller, jobject obj, jboolean b)\n {\n-  jfieldID fld = _Jv_FromReflectedField (this);\n-  ::setBoolean (fld->type, setAddr (this, caller, obj), b);\n+  ::setBoolean (this->getType(), setAddr (this, caller, obj), b);\n }\n \n void\n java::lang::reflect::Field::setChar (jclass caller, jobject obj, jchar c)\n {\n-  jfieldID fld = _Jv_FromReflectedField (this);\n-  ::setChar (fld->type, setAddr (this, caller, obj), c);\n+  ::setChar (this->getType(), setAddr (this, caller, obj), c);\n }\n \n void\n java::lang::reflect::Field::setByte (jclass caller, jobject obj, jbyte b)\n {\n-  jfieldID fld = _Jv_FromReflectedField (this);\n-  ::setByte (fld->type, setAddr (this, caller, obj), b);\n+  ::setByte (this->getType(), setAddr (this, caller, obj), b);\n }\n \n void\n java::lang::reflect::Field::setShort (jclass caller, jobject obj, jshort s)\n {\n-  jfieldID fld = _Jv_FromReflectedField (this);\n-  ::setShort (fld->type, setAddr (this, caller, obj), s);\n+  ::setShort (this->getType(), setAddr (this, caller, obj), s);\n }\n \n void\n java::lang::reflect::Field::setInt (jclass caller, jobject obj, jint i)\n {\n-  jfieldID fld = _Jv_FromReflectedField (this);\n-  ::setInt (fld->type, setAddr (this, caller, obj), i);\n+  ::setInt (this->getType(), setAddr (this, caller, obj), i);\n }\n \n void\n java::lang::reflect::Field::setLong (jclass caller, jobject obj, jlong l)\n {\n-  jfieldID fld = _Jv_FromReflectedField (this);\n-  ::setLong (fld->type, setAddr (this, caller, obj), l);\n+  ::setLong (this->getType(), setAddr (this, caller, obj), l);\n }\n void\n java::lang::reflect::Field::setFloat (jclass caller, jobject obj, jfloat f)\n {\n-  jfieldID fld = _Jv_FromReflectedField (this);\n-  ::setFloat (fld->type, setAddr (this, caller, obj), f);\n+  ::setFloat (this->getType(), setAddr (this, caller, obj), f);\n }\n \n void\n java::lang::reflect::Field::setDouble (jclass caller, jobject obj, jdouble d)\n {\n-  jfieldID fld = _Jv_FromReflectedField (this);\n-  ::setDouble (fld->type, setAddr (this, caller, obj), d);\n+  ::setDouble (this->getType(), setAddr (this, caller, obj), d);\n }\n \n void"}]}