{"sha": "b6d1f2b546079eb367b497228ca54d97dddc8921", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjZkMWYyYjU0NjA3OWViMzY3YjQ5NzIyOGNhNTRkOTdkZGRjODkyMQ==", "commit": {"author": {"name": "James Norris", "email": "jnorris@codesourcery.com", "date": "2016-03-23T14:38:55Z"}, "committer": {"name": "James Norris", "email": "jnorris@gcc.gnu.org", "date": "2016-03-23T14:38:55Z"}, "message": "re PR libgomp/69414 ([OpenACC] \"!$acc update self\" does not provide expected result)\n\n\tPR libgomp/69414\n\t* oacc-mem.c (delete_copyout, update_dev_host): Fix device address.\n\t* testsuite/libgomp.oacc-c-c++-common/update-1.c: Additional tests.\n\t* testsuite/libgomp.oacc-c-c++-common/update-1-2.c: Likewise.\n\t* testsuite/libgomp.oacc-fortran/update-1.f90: New file.\n\nCo-Authored-By: Daichi Fukuoka <dc-fukuoka@sgi.com>\n\nFrom-SVN: r234428", "tree": {"sha": "b61c3765495e12b6d7a5da3434336350bf8e7cd3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b61c3765495e12b6d7a5da3434336350bf8e7cd3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b6d1f2b546079eb367b497228ca54d97dddc8921", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6d1f2b546079eb367b497228ca54d97dddc8921", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6d1f2b546079eb367b497228ca54d97dddc8921", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6d1f2b546079eb367b497228ca54d97dddc8921/comments", "author": null, "committer": null, "parents": [{"sha": "4d8989d5b0602dff77945e68c74eab91a8278b97", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d8989d5b0602dff77945e68c74eab91a8278b97", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d8989d5b0602dff77945e68c74eab91a8278b97"}], "stats": {"total": 429, "additions": 420, "deletions": 9}, "files": [{"sha": "fe9843468b2d60cc580eed5bb9d02af0551667fd", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6d1f2b546079eb367b497228ca54d97dddc8921/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6d1f2b546079eb367b497228ca54d97dddc8921/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=b6d1f2b546079eb367b497228ca54d97dddc8921", "patch": "@@ -1,3 +1,12 @@\n+2016-03-23  James Norris  <jnorris@codesourcery.com>\n+\t    Daichi Fukuoka <dc-fukuoka@sgi.com>\n+\n+\tPR libgomp/69414\n+\t* oacc-mem.c (delete_copyout, update_dev_host): Fix device address.\n+\t* testsuite/libgomp.oacc-c-c++-common/update-1.c: Additional tests.\n+\t* testsuite/libgomp.oacc-c-c++-common/update-1-2.c: Likewise.\n+\t* testsuite/libgomp.oacc-fortran/update-1.f90: New file.\n+\n 2016-03-23  Martin Liska  <mliska@suse.cz>\n \n \tPR hsa/70337"}, {"sha": "ce1905cb271dbd2347f0e950400c70fd7f6e83a4", "filename": "libgomp/oacc-mem.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6d1f2b546079eb367b497228ca54d97dddc8921/libgomp%2Foacc-mem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6d1f2b546079eb367b497228ca54d97dddc8921/libgomp%2Foacc-mem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Foacc-mem.c?ref=b6d1f2b546079eb367b497228ca54d97dddc8921", "patch": "@@ -509,7 +509,8 @@ delete_copyout (unsigned f, void *h, size_t s)\n       gomp_fatal (\"[%p,%d] is not mapped\", (void *)h, (int)s);\n     }\n \n-  d = (void *) (n->tgt->tgt_start + n->tgt_offset);\n+  d = (void *) (n->tgt->tgt_start + n->tgt_offset\n+\t\t+ (uintptr_t) h - n->host_start);\n \n   host_size = n->host_end - n->host_start;\n \n@@ -562,7 +563,8 @@ update_dev_host (int is_dev, void *h, size_t s)\n       gomp_fatal (\"[%p,%d] is not mapped\", h, (int)s);\n     }\n \n-  d = (void *) (n->tgt->tgt_start + n->tgt_offset);\n+  d = (void *) (n->tgt->tgt_start + n->tgt_offset\n+\t\t+ (uintptr_t) h - n->host_start);\n \n   gomp_mutex_unlock (&acc_dev->lock);\n "}, {"sha": "82c319250637415b5f0c1e3ae15053452ced853e", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/update-1-2.c", "status": "modified", "additions": 82, "deletions": 3, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6d1f2b546079eb367b497228ca54d97dddc8921/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fupdate-1-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6d1f2b546079eb367b497228ca54d97dddc8921/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fupdate-1-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fupdate-1-2.c?ref=b6d1f2b546079eb367b497228ca54d97dddc8921", "patch": "@@ -13,6 +13,7 @@ int\n main (int argc, char **argv)\n {\n     int N = 8;\n+    int NDIV2 = N / 2;\n     float *a, *b, *c;\n     float *d_a, *d_b, *d_c;\n     int i;\n@@ -242,7 +243,7 @@ main (int argc, char **argv)\n         a[i] = 6.0;\n     }\n \n-#pragma acc update device (a[0:N >> 1])\n+#pragma acc update device (a[0:NDIV2])\n \n #pragma acc parallel present (a[0:N], b[0:N])\n     {\n@@ -254,7 +255,7 @@ main (int argc, char **argv)\n \n #pragma acc update self (a[0:N], b[0:N])\n \n-    for (i = 0; i < (N >> 1); i++)\n+    for (i = 0; i < NDIV2; i++)\n     {\n         if (a[i] != 6.0)\n             abort ();\n@@ -263,7 +264,7 @@ main (int argc, char **argv)\n             abort ();\n     }\n \n-    for (i = (N >> 1); i < N; i++)\n+    for (i = NDIV2; i < N; i++)\n     {\n         if (a[i] != 5.0)\n             abort ();\n@@ -278,5 +279,83 @@ main (int argc, char **argv)\n     if (!acc_is_present (&b[0], (N * sizeof (float))))\n       abort ();\n \n+    for (i = 0; i < N; i++)\n+    {\n+        a[i] = 0.0;\n+    }\n+\n+#pragma acc update device (a[0:4])\n+\n+#pragma acc parallel present (a[0:N])\n+    {\n+        int ii;\n+\n+        for (ii = 0; ii < N; ii++)\n+            a[ii] = a[ii] + 1.0;\n+    }\n+\n+#pragma acc update self (a[4:4])\n+\n+    for (i = 0; i < NDIV2; i++)\n+    {\n+        if (a[i] != 0.0)\n+            abort ();\n+    }\n+\n+    for (i = NDIV2; i < N; i++)\n+    {\n+        if (a[i] != 6.0)\n+            abort ();\n+    }\n+\n+#pragma acc update self (a[0:4])\n+\n+    for (i = 0; i < NDIV2; i++)\n+    {\n+        if (a[i] != 1.0)\n+            abort ();\n+    }\n+\n+    for (i = NDIV2; i < N; i++)\n+    {\n+        if (a[i] != 6.0)\n+            abort ();\n+    }\n+\n+    a[2] = 9;\n+    a[3] = 9;\n+    a[4] = 9;\n+    a[5] = 9;\n+\n+#pragma acc update device (a[2:4])\n+\n+#pragma acc parallel present (a[0:N])\n+    {\n+        int ii;\n+\n+        for (ii = 0; ii < N; ii++)\n+            a[ii] = a[ii] + 1.0;\n+    }\n+\n+#pragma acc update self (a[2:4])\n+\n+    for (i = 0; i < 2; i++)\n+    {\n+      if (a[i] != 1.0)\n+\tabort ();\n+    }\n+\n+    for (i = 2; i < 6; i++)\n+    {\n+      if (a[i] != 10.0)\n+\tabort ();\n+    }\n+\n+    for (i = 6; i < N; i++)\n+    {\n+        if (a[i] != 6.0)\n+            abort ();\n+    }\n+\n     return 0;\n }"}, {"sha": "1b2a46072d608fa2859f08b40a7b640b097aee89", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/update-1.c", "status": "modified", "additions": 83, "deletions": 4, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6d1f2b546079eb367b497228ca54d97dddc8921/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fupdate-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6d1f2b546079eb367b497228ca54d97dddc8921/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fupdate-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fupdate-1.c?ref=b6d1f2b546079eb367b497228ca54d97dddc8921", "patch": "@@ -11,6 +11,7 @@ int\n main (int argc, char **argv)\n {\n     int N = 8;\n+    int NDIV2 = N / 2;\n     float *a, *b, *c;\n     float *d_a, *d_b, *d_c;\n     int i;\n@@ -109,7 +110,7 @@ main (int argc, char **argv)\n             b[ii] = a[ii];\n     }\n \n-#pragma acc update self (a[0:N], b[0:N])\n+#pragma acc update host (a[0:N], b[0:N])\n \n     for (i = 0; i < N; i++)\n     {\n@@ -240,7 +241,7 @@ main (int argc, char **argv)\n         a[i] = 6.0;\n     }\n \n-#pragma acc update device (a[0:N >> 1])\n+#pragma acc update device (a[0:NDIV2])\n \n #pragma acc parallel present (a[0:N], b[0:N])\n     {\n@@ -252,7 +253,7 @@ main (int argc, char **argv)\n \n #pragma acc update host (a[0:N], b[0:N])\n \n-    for (i = 0; i < (N >> 1); i++)\n+    for (i = 0; i < NDIV2; i++)\n     {\n         if (a[i] != 6.0)\n             abort ();\n@@ -261,7 +262,7 @@ main (int argc, char **argv)\n             abort ();\n     }\n \n-    for (i = (N >> 1); i < N; i++)\n+    for (i = NDIV2; i < N; i++)\n     {\n         if (a[i] != 5.0)\n             abort ();\n@@ -276,5 +277,83 @@ main (int argc, char **argv)\n     if (!acc_is_present (&b[0], (N * sizeof (float))))\n       abort ();\n \n+    for (i = 0; i < N; i++)\n+    {\n+        a[i] = 0.0;\n+    }\n+\n+#pragma acc update device (a[0:4])\n+\n+#pragma acc parallel present (a[0:N])\n+    {\n+        int ii;\n+\n+        for (ii = 0; ii < N; ii++)\n+            a[ii] = a[ii] + 1.0;\n+    }\n+\n+#pragma acc update host (a[4:4])\n+\n+    for (i = 0; i < NDIV2; i++)\n+    {\n+        if (a[i] != 0.0)\n+            abort ();\n+    }\n+\n+    for (i = NDIV2; i < N; i++)\n+    {\n+        if (a[i] != 6.0)\n+            abort ();\n+    }\n+\n+#pragma acc update host (a[0:4])\n+\n+    for (i = 0; i < NDIV2; i++)\n+    {\n+        if (a[i] != 1.0)\n+            abort ();\n+    }\n+\n+    for (i = NDIV2; i < N; i++)\n+    {\n+        if (a[i] != 6.0)\n+            abort ();\n+    }\n+\n+    a[2] = 9;\n+    a[3] = 9;\n+    a[4] = 9;\n+    a[5] = 9;\n+\n+#pragma acc update device (a[2:4])\n+\n+#pragma acc parallel present (a[0:N])\n+    {\n+        int ii;\n+\n+        for (ii = 0; ii < N; ii++)\n+            a[ii] = a[ii] + 1.0;\n+    }\n+\n+#pragma acc update host (a[2:4])\n+\n+    for (i = 0; i < 2; i++)\n+    {\n+      if (a[i] != 1.0)\n+\tabort ();\n+    }\n+\n+    for (i = 2; i < 6; i++)\n+    {\n+      if (a[i] != 10.0)\n+\tabort ();\n+    }\n+\n+    for (i = 6; i < N; i++)\n+    {\n+        if (a[i] != 6.0)\n+            abort ();\n+    }\n+\n     return 0;\n }"}, {"sha": "4e1d2c012786baf2ee101dd21b84578ab8be2fa5", "filename": "libgomp/testsuite/libgomp.oacc-fortran/update-1.f90", "status": "added", "additions": 242, "deletions": 0, "changes": 242, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6d1f2b546079eb367b497228ca54d97dddc8921/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fupdate-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6d1f2b546079eb367b497228ca54d97dddc8921/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fupdate-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fupdate-1.f90?ref=b6d1f2b546079eb367b497228ca54d97dddc8921", "patch": "@@ -0,0 +1,242 @@\n+! { dg-do run }\n+! { dg-skip-if \"\" { *-*-* } { \"*\" } { \"-DACC_MEM_SHARED=0\" } }\n+\n+program update\n+  use openacc\n+  implicit none \n+  integer, parameter :: N = 8\n+  integer, parameter :: NDIV2 = N / 2\n+  real :: a(N), b(N)\n+  integer i\n+\n+  do i = 1, N\n+    a(i) = 3.0\n+    b(i) = 0.0\n+  end do\n+\n+  !$acc enter data copyin (a, b)\n+\n+  !$acc parallel present (a, b)\n+    do i = 1, N\n+      b(i) = a(i)\n+    end do\n+  !$acc end parallel\n+\n+  !$acc update host (a, b)\n+\n+  do i = 1, N\n+    if (a(i) .ne. 3.0) call abort\n+    if (b(i) .ne. 3.0) call abort\n+  end do\n+\n+  if (acc_is_present (a) .neqv. .TRUE.) call abort\n+  if (acc_is_present (b) .neqv. .TRUE.) call abort\n+\n+  do i = 1, N\n+    a(i) = 5.0\n+    b(i) = 1.0\n+  end do\n+\n+  !$acc update device (a, b)\n+\n+  !$acc parallel present (a, b)\n+    do i = 1, N\n+      b(i) = a(i)\n+    end do \n+  !$acc end parallel\n+\n+  !$acc update host (a, b)\n+\n+  do i = 1, N\n+    if (a(i) .ne. 5.0) call abort\n+    if (b(i) .ne. 5.0) call abort\n+ end do\n+\n+  if (acc_is_present (a) .neqv. .TRUE.) call abort\n+  if (acc_is_present (b) .neqv. .TRUE.) call abort\n+\n+  !$acc parallel present (a, b)\n+  do i = 1, N\n+    b(i) = a(i)\n+  end do\n+  !$acc end parallel\n+\n+  !$acc update host (a, b)\n+\n+  do i = 1, N\n+    if (a(i) .ne. 5.0) call abort\n+    if (b(i) .ne. 5.0) call abort\n+  end do\n+\n+  if (acc_is_present (a) .neqv. .TRUE.) call abort\n+  if (acc_is_present (b) .neqv. .TRUE.) call abort\n+\n+  do i = 1, N\n+    a(i) = 6.0\n+    b(i) = 0.0\n+  end do\n+\n+  !$acc update device (a, b)\n+\n+  do i = 1, N\n+    a(i) = 9.0\n+  end do\n+\n+  !$acc parallel present (a, b)\n+    do i = 1, N\n+      b(i) = a(i)\n+    end do\n+  !$acc end parallel\n+\n+  !$acc update host (a, b)\n+\n+  do i = 1, N\n+    if (a(i) .ne. 6.0) call abort\n+    if (b(i) .ne. 6.0) call abort\n+  end do\n+\n+  if (acc_is_present (a) .neqv. .TRUE.) call abort\n+  if (acc_is_present (b) .neqv. .TRUE.) call abort\n+\n+  do i = 1, N\n+    a(i) = 7.0\n+    b(i) = 2.0\n+  end do\n+\n+  !$acc update device (a, b)\n+\n+  do i = 1, N\n+    a(i) = 9.0\n+  end do\n+\n+  !$acc parallel present (a, b)\n+    do i = 1, N\n+      b(i) = a(i)\n+    end do\n+  !$acc end parallel\n+\n+  !$acc update host (a, b)\n+\n+  do i = 1, N\n+    if (a(i) .ne. 7.0) call abort\n+    if (b(i) .ne. 7.0) call abort\n+  end do\n+\n+  do i = 1, N\n+    a(i) = 9.0\n+  end do\n+\n+  !$acc update device (a)\n+\n+  !$acc parallel present (a, b)\n+    do i = 1, N\n+      b(i) = a(i)\n+    end do\n+  !$acc end parallel\n+\n+  !$acc update host (a, b)\n+\n+  do i = 1, N\n+    if (a(i) .ne. 9.0) call abort\n+    if (b(i) .ne. 9.0) call abort\n+  end do\n+\n+  if (acc_is_present (a) .neqv. .TRUE.) call abort\n+  if (acc_is_present (b) .neqv. .TRUE.) call abort\n+\n+  do i = 1, N\n+    a(i) = 5.0\n+  end do\n+\n+  !$acc update device (a)\n+\n+  do i = 1, N\n+    a(i) = 6.0\n+  end do\n+\n+  !$acc update device (a(1:NDIV2))\n+\n+  !$acc parallel present (a, b)\n+    do i = 1, N\n+      b(i) = a(i)\n+    end do\n+  !$acc end parallel\n+\n+  !$acc update host (a, b)\n+\n+  do i = 1, NDIV2\n+    if (a(i) .ne. 6.0) call abort\n+    if (b(i) .ne. 6.0) call abort\n+  end do\n+\n+  do i = NDIV2 + 1, N\n+    if (a(i) .ne. 5.0) call abort\n+    if (b(i) .ne. 5.0) call abort\n+  end do\n+\n+  if (acc_is_present (a) .neqv. .TRUE.) call abort\n+  if (acc_is_present (b) .neqv. .TRUE.) call abort\n+\n+  do i = 1, N\n+    a(i) = 0.0\n+  end do\n+\n+  !$acc update device (a(1:4))\n+\n+  !$acc parallel present (a)\n+    do i = 1, N\n+      a(i) = a(i) + 1.0\n+    end do\n+  !$acc end parallel\n+\n+  !$acc update host (a(5:N))\n+\n+  do i = 1, NDIV2\n+    if (a(i) .ne. 0.0) call abort\n+  end do\n+\n+  do i = NDIV2 + 1, N\n+    if (a(i) .ne. 6.0) call abort\n+  end do\n+\n+  !$acc update host (a(1:4))\n+\n+  do i = 1, NDIV2\n+    if (a(i) .ne. 1.0) call abort\n+  end do\n+\n+  do i = NDIV2 + 1, N\n+    if (a(i) .ne. 6.0) call abort\n+  end do\n+\n+  a(3) = 9\n+  a(4) = 9\n+  a(5) = 9\n+  a(6) = 9\n+\n+  !$acc update device (a(3:6))\n+\n+  !$acc parallel present (a(1:N))\n+    do i = 1, N\n+      a(i) = a(i) + 1.0\n+    end do\n+  !$acc end parallel\n+\n+  !$acc update host (a(3:6))\n+\n+  do i = 1, 2\n+    if (a(i) .ne. 1.0) call abort\n+  end do\n+\n+  do i = 3, 6\n+    if (a(i) .ne. 10.0) call abort\n+  end do\n+\n+  do i = 7, N\n+    if (a(i) .ne. 6.0) call abort\n+  end do\n+\n+  !$acc exit data delete (a, b)\n+\n+end program\n+"}]}