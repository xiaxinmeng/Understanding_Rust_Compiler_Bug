{"sha": "375277f69d4536e142609d553df186586ee4ac8a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzc1Mjc3ZjY5ZDQ1MzZlMTQyNjA5ZDU1M2RmMTg2NTg2ZWU0YWM4YQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@codesourcery.com", "date": "2006-05-28T18:07:29Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2006-05-28T18:07:29Z"}, "message": "class.c, [...]: Fix comment typos.\n\n\t* class.c, except.c, expr.c, java-gimplify.c: Fix comment\n\ttypos.\n\nFrom-SVN: r114172", "tree": {"sha": "e12c0a1f72f7331af5a221fbe2d0e00448b92128", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e12c0a1f72f7331af5a221fbe2d0e00448b92128"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/375277f69d4536e142609d553df186586ee4ac8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/375277f69d4536e142609d553df186586ee4ac8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/375277f69d4536e142609d553df186586ee4ac8a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/375277f69d4536e142609d553df186586ee4ac8a/comments", "author": null, "committer": null, "parents": [{"sha": "ce2e12c27eebde4eedb1b95f69cda8662bf9ee3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce2e12c27eebde4eedb1b95f69cda8662bf9ee3d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce2e12c27eebde4eedb1b95f69cda8662bf9ee3d"}], "stats": {"total": 13, "additions": 9, "deletions": 4}, "files": [{"sha": "9c8373333ce1fc70d9723c6d38361f0942d6c45b", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/375277f69d4536e142609d553df186586ee4ac8a/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/375277f69d4536e142609d553df186586ee4ac8a/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=375277f69d4536e142609d553df186586ee4ac8a", "patch": "@@ -1,3 +1,8 @@\n+2006-05-28  Kazu Hirata  <kazu@codesourcery.com>\n+\n+\t* class.c, except.c, expr.c, java-gimplify.c: Fix comment\n+\ttypos.\n+\n 2006-05-26  Tom Tromey  <tromey@redhat.com>\n \n \t* expr.c (java_push_constant_from_pool): Handle 'ldc class'."}, {"sha": "403318aa6551f719dfe974c98510ba137703d307", "filename": "gcc/java/class.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/375277f69d4536e142609d553df186586ee4ac8a/gcc%2Fjava%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/375277f69d4536e142609d553df186586ee4ac8a/gcc%2Fjava%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fclass.c?ref=375277f69d4536e142609d553df186586ee4ac8a", "patch": "@@ -2606,7 +2606,7 @@ emit_register_classes (tree *list_p)\n   /* TARGET_USE_JCR_SECTION defaults to 1 if SUPPORTS_WEAK and\n      TARGET_ASM_NAMED_SECTION, else 0.  Some targets meet those conditions\n      but lack suitable crtbegin/end objects or linker support.  These\n-     targets can overide the default in tm.h to use the fallback mechanism.  */\n+     targets can override the default in tm.h to use the fallback mechanism.  */\n   if (TARGET_USE_JCR_SECTION)\n     {\n       tree klass, t;"}, {"sha": "788c260ae2845c3c7f872e0ff9743676e0eab6da", "filename": "gcc/java/except.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/375277f69d4536e142609d553df186586ee4ac8a/gcc%2Fjava%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/375277f69d4536e142609d553df186586ee4ac8a/gcc%2Fjava%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fexcept.c?ref=375277f69d4536e142609d553df186586ee4ac8a", "patch": "@@ -474,7 +474,7 @@ build_exception_object_ref (tree type)\n   return obj;\n }\n \n-/* If there are any handlers for this range, isssue end of range,\n+/* If there are any handlers for this range, issue end of range,\n    and then all handler blocks */\n void\n expand_end_java_handler (struct eh_range *range)"}, {"sha": "4c0f1cd911b0df6f436fd697d72082494fc67844", "filename": "gcc/java/expr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/375277f69d4536e142609d553df186586ee4ac8a/gcc%2Fjava%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/375277f69d4536e142609d553df186586ee4ac8a/gcc%2Fjava%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fexpr.c?ref=375277f69d4536e142609d553df186586ee4ac8a", "patch": "@@ -2023,7 +2023,7 @@ build_class_init (tree clas, tree expr)\n \f\n \n /* Rewrite expensive calls that require stack unwinding at runtime to\n-   cheaper alternatives.  The logic here performs thse\n+   cheaper alternatives.  The logic here performs these\n    transformations:\n \n    java.lang.Class.forName(\"foo\") -> java.lang.Class.forName(\"foo\", class$)"}, {"sha": "22ae9432c3677d76766778b05bb55e51df5c6bce", "filename": "gcc/java/java-gimplify.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/375277f69d4536e142609d553df186586ee4ac8a/gcc%2Fjava%2Fjava-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/375277f69d4536e142609d553df186586ee4ac8a/gcc%2Fjava%2Fjava-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-gimplify.c?ref=375277f69d4536e142609d553df186586ee4ac8a", "patch": "@@ -276,7 +276,7 @@ java_gimplify_block (tree java_block)\n   block = make_node (BLOCK);\n   BLOCK_VARS (block) = decls;\n \n-  /* The TREE_USED flag on a block determines whether the debug ouput\n+  /* The TREE_USED flag on a block determines whether the debug output\n      routines generate info for the variables in that block.  */\n   TREE_USED (block) = 1;\n "}]}