{"sha": "71a874cd5e9e451f1703393e8d7216f488f4e95b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzFhODc0Y2Q1ZTllNDUxZjE3MDMzOTNlOGQ3MjE2ZjQ4OGY0ZTk1Yg==", "commit": {"author": {"name": "Andreas Schwab", "email": "schwab@issan.cs.uni-dortmund.de", "date": "1999-05-17T01:24:24Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1999-05-17T01:24:24Z"}, "message": "fold-const.c (fold_truthop): When converting a one-bit comparison don't sign extend the constant.\n\n        * fold-const.c (fold_truthop): When converting a one-bit\n        comparison don't sign extend the constant.\n\nFrom-SVN: r26962", "tree": {"sha": "f8907ef1b969d9f5b82492ab42a1e22c391b4c66", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f8907ef1b969d9f5b82492ab42a1e22c391b4c66"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/71a874cd5e9e451f1703393e8d7216f488f4e95b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71a874cd5e9e451f1703393e8d7216f488f4e95b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71a874cd5e9e451f1703393e8d7216f488f4e95b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71a874cd5e9e451f1703393e8d7216f488f4e95b/comments", "author": null, "committer": null, "parents": [{"sha": "92b3fc3ae3f552257a01f1af53963bdf82d87bc3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92b3fc3ae3f552257a01f1af53963bdf82d87bc3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92b3fc3ae3f552257a01f1af53963bdf82d87bc3"}], "stats": {"total": 33, "additions": 18, "deletions": 15}, "files": [{"sha": "6460356a5b008f6507c492288b4dd8337e03951f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71a874cd5e9e451f1703393e8d7216f488f4e95b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71a874cd5e9e451f1703393e8d7216f488f4e95b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=71a874cd5e9e451f1703393e8d7216f488f4e95b", "patch": "@@ -1,5 +1,13 @@\n+Mon May 17 01:57:37 1999  David Daney <daney@ibw.com.ni>\n+\n+\t* i386/sol2.h (LINK_SPEC): Do not pass \"-z text\" to the linker\n+\tif -mimpure-text.\n+\n 1999-05-17  Andreas Schwab  <schwab@issan.cs.uni-dortmund.de>\n \n+\t* fold-const.c (fold_truthop): When converting a one-bit\n+\tcomparison don't sign extend the constant.\n+\n \t* cse.c (cse_insn): Copy SRC_CONST before putting it in the\n \tREG_EQUAL note.\n "}, {"sha": "6acbe0baf34d7e0dacbf22eb5307ccd9c83ea0b9", "filename": "gcc/fold-const.c", "status": "modified", "additions": 10, "deletions": 15, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71a874cd5e9e451f1703393e8d7216f488f4e95b/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71a874cd5e9e451f1703393e8d7216f488f4e95b/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=71a874cd5e9e451f1703393e8d7216f488f4e95b", "patch": "@@ -3806,30 +3806,25 @@ fold_truthop (code, truth_type, lhs, rhs)\n     {\n       if (l_const && integer_zerop (l_const) && integer_pow2p (ll_mask))\n \t{\n-\t  if (ll_unsignedp || tree_log2 (ll_mask) + 1 < ll_bitsize)\n-\t    l_const = ll_mask;\n-\telse\n-\t  /* Since ll_arg is a single bit bit mask, we can sign extend\n-\t     it appropriately with a NEGATE_EXPR.\n-\t     l_const is made a signed value here, but since for l_const != NULL\n-\t     lr_unsignedp is not used, we don't need to clear the latter.  */\n-\t  l_const = fold (build1 (NEGATE_EXPR, TREE_TYPE (ll_arg),\n-\t\t\t\t  convert (TREE_TYPE (ll_arg), ll_mask)));\n+\t  /* Do not sign extend the constant here.  The left operand\n+\t     is either always unsigned or there is a BIT_AND_EXPR that\n+\t     masks out the extension bits.  */\n+\t  if (!\t(ll_unsignedp || ll_and_mask != 0))\n+\t    abort ();\n+\t  l_const = ll_mask;\n \t}\n       else\n \treturn 0;\n     }\n \n+  /* This is analogous to the code for l_const above.  */\n   if (rcode != wanted_code)\n     {\n       if (r_const && integer_zerop (r_const) && integer_pow2p (rl_mask))\n \t{\n-\t  if (rl_unsignedp || tree_log2 (rl_mask) + 1 < rl_bitsize)\n-\t    r_const = rl_mask;\n-\telse\n-\t  /* This is analogous to the code for l_const above.  */\n-\t  r_const = fold (build1 (NEGATE_EXPR, TREE_TYPE (rl_arg),\n-\t\t\t\t  convert (TREE_TYPE (rl_arg), rl_mask)));\n+\t  if (!\t(rl_unsignedp || rl_and_mask != 0))\n+\t    abort ();\n+\t  r_const = rl_mask;\n \t}\n       else\n \treturn 0;"}]}