{"sha": "f99f88e0d00af73f31599ab56b2e83468100b0d0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjk5Zjg4ZTBkMDBhZjczZjMxNTk5YWI1NmIyZTgzNDY4MTAwYjBkMA==", "commit": {"author": {"name": "David Edelsohn", "email": "edelsohn@mhpcc.edu", "date": "1998-11-13T19:57:13Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "1998-11-13T19:57:13Z"}, "message": "rs6000.md (movsf): Remove explicit secondary-reload-like functionality.\n\n        * rs6000.md (movsf): Remove explicit secondary-reload-like\n        functionality.  Only truncate SFmode store if in FPR.\n        (movsf splitters): Combine const_double splitters.\n        (movsf_hardfloat): Add GPR support.\n\nFrom-SVN: r23645", "tree": {"sha": "a667615d6efa1bc74d631451a138b0af76b7f486", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a667615d6efa1bc74d631451a138b0af76b7f486"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f99f88e0d00af73f31599ab56b2e83468100b0d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f99f88e0d00af73f31599ab56b2e83468100b0d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f99f88e0d00af73f31599ab56b2e83468100b0d0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f99f88e0d00af73f31599ab56b2e83468100b0d0/comments", "author": null, "committer": null, "parents": [{"sha": "a9acf74156d05a933295cba9b800c2c6759296f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9acf74156d05a933295cba9b800c2c6759296f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9acf74156d05a933295cba9b800c2c6759296f5"}], "stats": {"total": 128, "additions": 32, "deletions": 96}, "files": [{"sha": "044c2f55bc93953e30d1bde3818c03afe05c2ffd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99f88e0d00af73f31599ab56b2e83468100b0d0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99f88e0d00af73f31599ab56b2e83468100b0d0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f99f88e0d00af73f31599ab56b2e83468100b0d0", "patch": "@@ -1,3 +1,10 @@\n+Fri Nov 13 22:50:37 1998  David Edelsohn  <edelsohn@mhpcc.edu>\n+\n+\t* rs6000.md (movsf): Remove explicit secondary-reload-like\n+\tfunctionality.  Only truncate SFmode store if in FPR.\n+\t(movsf splitters): Combine const_double splitters.\n+\t(movsf_hardfloat): Add GPR support.\n+\n Fri Nov 13 11:02:11 1998  Stan Cox  <scox@cygnus.com>\n \n \t* splet.h (SUBTARGET_OVERRIDE_OPTIONS): New to"}, {"sha": "31e572fab6c89d210fcbaaf21d61d1109ddc4c44", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 25, "deletions": 96, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99f88e0d00af73f31599ab56b2e83468100b0d0/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99f88e0d00af73f31599ab56b2e83468100b0d0/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=f99f88e0d00af73f31599ab56b2e83468100b0d0", "patch": "@@ -5686,80 +5686,23 @@\n       && REGNO (SUBREG_REG (operands[1])) < FIRST_PSEUDO_REGISTER)\n     operands[1] = alter_subreg (operands[1]);\n \n-  if (TARGET_SOFT_FLOAT && GET_CODE (operands[0]) == MEM)\n-    operands[1] = force_reg (SFmode, operands[1]);\n-\n-  else if (TARGET_HARD_FLOAT)\n+  if (GET_CODE (operands[0]) == MEM)\n     {\n-      if (! TARGET_POWERPC64\n-\t  && GET_CODE (operands[1]) == REG && REGNO (operands[1]) < 32)\n+      /* If operands[1] is a register, it may have double-precision data\n+\t in it, so truncate it to single precision.  We need not do\n+\t this for POWERPC.  */\n+      if (! TARGET_POWERPC && TARGET_HARD_FLOAT\n+\t  && GET_CODE (operands[1]) == REG\n+\t  && (FP_REGNO_P (REGNO (operands[1]))\n+\t      || REGNO (operands[1]) >= FIRST_PSEUDO_REGISTER))\n \t{\n-\t  /* If this is a store to memory or another integer register do the\n-\t     move directly.  Otherwise store to a temporary stack slot and\n-\t     load from there into a floating point register.  */\n-\n-\t  if (GET_CODE (operands[0]) == MEM\n-\t      || (GET_CODE (operands[0]) == REG\n-\t\t  && (REGNO (operands[0]) < 32\n-\t\t      || (reload_in_progress\n-\t\t\t  && REGNO (operands[0]) >= FIRST_PSEUDO_REGISTER))))\n-\t    {\n-\t      emit_move_insn (operand_subword (operands[0], 0, 0, SFmode),\n-\t\t\t      operand_subword (operands[1], 0, 0, SFmode));\n-\t      DONE;\n-\t    }\n-\t  else\n-\t    {\n-\t      rtx stack_slot = assign_stack_temp (SFmode, 4, 0);\n-\n-\t      emit_move_insn (stack_slot, operands[1]);\n-\t      emit_move_insn (operands[0], stack_slot);\n-\t      DONE;\n-\t    }\n+\t  rtx newreg\n+\t    = reload_in_progress ? operands[1] : gen_reg_rtx (SFmode);\n+\t  emit_insn (gen_aux_truncdfsf2 (newreg, operands[1]));\n+\t  operands[1] = newreg;\n \t}\n \n-      if (GET_CODE (operands[0]) == MEM)\n-\t{\n-\t  /* If operands[1] is a register, it may have double-precision data\n-\t     in it, so truncate it to single precision.  We need not do\n-\t     this for POWERPC.  */\n-\t  if (! TARGET_POWERPC && TARGET_HARD_FLOAT\n-\t      && GET_CODE (operands[1]) == REG)\n-\t    {\n-\t      rtx newreg\n-\t\t= reload_in_progress ? operands[1] : gen_reg_rtx (SFmode);\n-\t      emit_insn (gen_aux_truncdfsf2 (newreg, operands[1]));\n-\t      operands[1] = newreg;\n-\t    }\n-\n-\t  operands[1] = force_reg (SFmode, operands[1]);\n-\t}\n-\n-      if (! TARGET_POWERPC64\n-\t  && GET_CODE (operands[0]) == REG && REGNO (operands[0]) < 32)\n-\t{\n-\t  if (GET_CODE (operands[1]) == MEM\n-#if HOST_FLOAT_FORMAT == TARGET_FLOAT_FORMAT && ! defined(REAL_IS_NOT_DOUBLE)\n-\t      || GET_CODE (operands[1]) == CONST_DOUBLE\n-#endif\n-\t      || (GET_CODE (operands[1]) == REG\n-\t\t  && (REGNO (operands[1]) < 32\n-\t\t      || (reload_in_progress\n-\t\t\t  && REGNO (operands[1]) >= FIRST_PSEUDO_REGISTER))))\n-\t    {\n-\t      emit_move_insn (operand_subword (operands[0], 0, 0, SFmode),\n-\t\t\t      operand_subword (operands[1], 0, 0, SFmode));\n-\t      DONE;\n-\t    }\n-\t  else\n-\t    {\n-\t      rtx stack_slot = assign_stack_temp (SFmode, 4, 0);\n-\n-\t      emit_move_insn (stack_slot, operands[1]);\n-\t      emit_move_insn (operands[0], stack_slot);\n-\t      DONE;\n-\t    }\n-\t}\n+      operands[1] = force_reg (SFmode, operands[1]);\n     }\n \n   if (CONSTANT_P (operands[1]) && TARGET_HARD_FLOAT)\n@@ -5775,7 +5718,7 @@\n (define_split\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"\")\n \t(match_operand:SF 1 \"const_double_operand\" \"\"))]\n-  \"! TARGET_POWERPC64 && reload_completed\n+  \"reload_completed\n    && ((GET_CODE (operands[0]) == REG && REGNO (operands[0]) <= 31)\n        || (GET_CODE (operands[0]) == SUBREG\n \t   && GET_CODE (SUBREG_REG (operands[0])) == REG\n@@ -5789,44 +5732,30 @@\n   REAL_VALUE_FROM_CONST_DOUBLE (rv, operands[1]);\n   REAL_VALUE_TO_TARGET_SINGLE (rv, l);\n \n-  operands[2] = operand_subword (operands[0], 0, 0, SFmode);\n-  operands[3] = GEN_INT(l);\n-}\")\n-\n-(define_split\n-  [(set (match_operand:SF 0 \"gpc_reg_operand\" \"\")\n-\t(match_operand:SF 1 \"const_double_operand\" \"\"))]\n-  \"TARGET_POWERPC64 && reload_completed\n-   && ((GET_CODE (operands[0]) == REG && REGNO (operands[0]) <= 31)\n-       || (GET_CODE (operands[0]) == SUBREG\n-\t   && GET_CODE (SUBREG_REG (operands[0])) == REG\n-\t   && REGNO (SUBREG_REG (operands[0])) <= 31))\"\n-  [(set (match_dup 2) (match_dup 3))]\n-  \"\n-{\n-  long l;\n-  REAL_VALUE_TYPE rv;\n-\n-  REAL_VALUE_FROM_CONST_DOUBLE (rv, operands[1]);\n-  REAL_VALUE_TO_TARGET_SINGLE (rv, l);\n+  if (! TARGET_POWERPC64)\n+    operands[2] = operand_subword (operands[0], 0, 0, SFmode);\n+  else\n+    operands[2] = gen_lowpart (SImode, operands[0]);\n \n-  operands[2] = gen_lowpart (SImode, operands[0]);\n   operands[3] = GEN_INT(l);\n }\")\n \n (define_insn \"*movsf_hardfloat\"\n-  [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=f,f,m,!r,!r\")\n-\t(match_operand:SF 1 \"input_operand\" \"f,m,f,G,Fn\"))]\n+  [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=!r,!r,m,f,f,m,!r,!r\")\n+\t(match_operand:SF 1 \"input_operand\" \"r,m,r,f,m,f,G,Fn\"))]\n   \"(gpc_reg_operand (operands[0], SFmode)\n    || gpc_reg_operand (operands[1], SFmode)) && TARGET_HARD_FLOAT\"\n   \"@\n+   mr %0,%1\n+   {l%U1%X1|lwz%U1%X1} %0,%1\n+   {st%U0%X0|stw%U0%X0} %1,%0\n    fmr %0,%1\n    lfs%U1%X1 %0,%1\n    stfs%U0%X0 %1,%0\n    #\n    #\"\n-  [(set_attr \"type\" \"fp,fpload,fpstore,*,*\")\n-   (set_attr \"length\" \"4,4,4,4,8\")])\n+  [(set_attr \"type\" \"*,load,store,fp,fpload,fpstore,*,*\")\n+   (set_attr \"length\" \"4,4,4,4,4,4,4,8\")])\n \n (define_insn \"*movsf_softfloat\"\n   [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=r,r,m,r,r,r,r,r\")"}]}