{"sha": "6cedb4acda3240c6a7914834f812aa2e86fa7687", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmNlZGI0YWNkYTMyNDBjNmE3OTE0ODM0ZjgxMmFhMmU4NmZhNzY4Nw==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2005-05-24T02:54:06Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2005-05-24T02:54:06Z"}, "message": "tree-ssa-dom.c (cprop_into_stmt): Do not call recompute_tree_invariant_for_addr_expr here.\n\n\n\t* tree-ssa-dom.c (cprop_into_stmt): Do not call\n\trecompute_tree_invariant_for_addr_expr here.\n\t(optimize_stmt): Call it here instead and do so if anything\n\tat all has changed in the statement and the RHS is an ADDR_EXPR.\n\t* tree-ssa-forwprop.c (tidy_after_forward_propagate_addr): If\n\tneeded, call recompute_tree_invariant_for_addr_expr.\n\t* tree-ssa-propagate.c (substitute_and_fold): Call\n\trecompute_tree_invariant_for_addr_expr as needed.\n\n\n\t* gcc.c-torture/compile/pr21638.c: New test.\n\t* gcc.c-torture/compile/20050520-1.c: New test.\n\nFrom-SVN: r100092", "tree": {"sha": "83e8422ca8c90a302030075b4f2619a0b55f42df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/83e8422ca8c90a302030075b4f2619a0b55f42df"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6cedb4acda3240c6a7914834f812aa2e86fa7687", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cedb4acda3240c6a7914834f812aa2e86fa7687", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6cedb4acda3240c6a7914834f812aa2e86fa7687", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cedb4acda3240c6a7914834f812aa2e86fa7687/comments", "author": null, "committer": null, "parents": [{"sha": "0d14c01130fe9b1712c0933a30ed14be8c42c469", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d14c01130fe9b1712c0933a30ed14be8c42c469", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d14c01130fe9b1712c0933a30ed14be8c42c469"}], "stats": {"total": 78, "additions": 68, "deletions": 10}, "files": [{"sha": "f5531587c5ae9c90933f26c4376926c393613dd9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cedb4acda3240c6a7914834f812aa2e86fa7687/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cedb4acda3240c6a7914834f812aa2e86fa7687/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6cedb4acda3240c6a7914834f812aa2e86fa7687", "patch": "@@ -1,3 +1,14 @@\n+2005-05-23  Jeff Law  <law@redhat.com>\n+\n+\t* tree-ssa-dom.c (cprop_into_stmt): Do not call\n+\trecompute_tree_invariant_for_addr_expr here.\n+\t(optimize_stmt): Call it here instead and do so if anything\n+\tat all has changed in the statement and the RHS is an ADDR_EXPR.\n+\t* tree-ssa-forwprop.c (tidy_after_forward_propagate_addr): If\n+\tneeded, call recompute_tree_invariant_for_addr_expr.\n+\t* tree-ssa-propagate.c (substitute_and_fold): Call\n+\trecompute_tree_invariant_for_addr_expr as needed.\n+\n 2005-05-23  Andreas Krebbel  <krebbel1@de.ibm.com>\n \n \t* config/s390/s390.c (s390_optimize_prologue): Don't replace an insn"}, {"sha": "4efa8b81ebfbd0a67293cf23793bb6fc868c894f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cedb4acda3240c6a7914834f812aa2e86fa7687/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cedb4acda3240c6a7914834f812aa2e86fa7687/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6cedb4acda3240c6a7914834f812aa2e86fa7687", "patch": "@@ -1,3 +1,8 @@\n+2005-05-23  Jeff Law  <law@redhat.com>\n+\n+\t* gcc.c-torture/compile/pr21638.c: New test.\n+\t* gcc.c-torture/compile/20050520-1.c: New test.\n+\n 2005-05-23  Nick Clifton  <nickc@redhat.com>\n \n \t* gcc.c-torture/execute/20020720-1.x: Fix m32r target selector to"}, {"sha": "9e2f6c8c74bffbea05fa0111ee1c019af6dd4aca", "filename": "gcc/testsuite/gcc.c-torture/compile/20050520-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cedb4acda3240c6a7914834f812aa2e86fa7687/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20050520-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cedb4acda3240c6a7914834f812aa2e86fa7687/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20050520-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20050520-1.c?ref=6cedb4acda3240c6a7914834f812aa2e86fa7687", "patch": "@@ -0,0 +1,13 @@\n+struct s { int x[4]; };\n+struct s gs;\n+\n+void\n+bar (void)\n+{\n+  struct s *s;\n+  int i;\n+\n+  s = &gs;\n+  for (i = 0; i < 4; i++)\n+    ((char*) (&s->x[i]))[0] = 0;\n+}"}, {"sha": "36fd0104aebd3968a0321f534cb3b9e336b28471", "filename": "gcc/testsuite/gcc.c-torture/compile/pr21638.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cedb4acda3240c6a7914834f812aa2e86fa7687/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr21638.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cedb4acda3240c6a7914834f812aa2e86fa7687/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr21638.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr21638.c?ref=6cedb4acda3240c6a7914834f812aa2e86fa7687", "patch": "@@ -0,0 +1,21 @@\n+typedef struct hashhdr {\n+ int bitmaps[32];\n+} HASHHDR;\n+\n+static void\n+swap_header_copy(HASHHDR *srcp, HASHHDR *destp)\n+{\n+  int i;\n+  for (i = 0; i < 32; i++)\n+    ((char *)&(destp->bitmaps[i]))[0] = ((char *)&(srcp->bitmaps[i]))[1];\n+}\n+\n+int\n+flush_meta(HASHHDR *whdrp1)\n+{\n+ HASHHDR *whdrp;\n+ HASHHDR whdr;\n+ whdrp = &whdr;\n+ swap_header_copy(whdrp1, whdrp);\n+ return (0);\n+}"}, {"sha": "278d27a9c7a88412623fdd15e5f1e461ed6cdee8", "filename": "gcc/tree-ssa-dom.c", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cedb4acda3240c6a7914834f812aa2e86fa7687/gcc%2Ftree-ssa-dom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cedb4acda3240c6a7914834f812aa2e86fa7687/gcc%2Ftree-ssa-dom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.c?ref=6cedb4acda3240c6a7914834f812aa2e86fa7687", "patch": "@@ -2908,21 +2908,13 @@ cprop_into_stmt (tree stmt)\n   bool may_have_exposed_new_symbols = false;\n   use_operand_p op_p;\n   ssa_op_iter iter;\n-  tree rhs;\n \n   FOR_EACH_SSA_USE_OPERAND (op_p, stmt, iter, SSA_OP_ALL_USES)\n     {\n       if (TREE_CODE (USE_FROM_PTR (op_p)) == SSA_NAME)\n \tmay_have_exposed_new_symbols |= cprop_operand (stmt, op_p);\n     }\n \n-  if (may_have_exposed_new_symbols)\n-    {\n-      rhs = get_rhs (stmt);\n-      if (rhs && TREE_CODE (rhs) == ADDR_EXPR)\n-\trecompute_tree_invarant_for_addr_expr (rhs);\n-    }\n-\n   return may_have_exposed_new_symbols;\n }\n \n@@ -2971,6 +2963,8 @@ optimize_stmt (struct dom_walk_data *walk_data, basic_block bb,\n      fold its RHS before checking for redundant computations.  */\n   if (ann->modified)\n     {\n+      tree rhs;\n+\n       /* Try to fold the statement making sure that STMT is kept\n \t up to date.  */\n       if (fold_stmt (bsi_stmt_ptr (si)))\n@@ -2985,6 +2979,10 @@ optimize_stmt (struct dom_walk_data *walk_data, basic_block bb,\n \t    }\n \t}\n \n+      rhs = get_rhs (stmt);\n+      if (rhs && TREE_CODE (rhs) == ADDR_EXPR)\n+\trecompute_tree_invarant_for_addr_expr (rhs);\n+\n       /* Constant/copy propagation above may change the set of \n \t virtual operands associated with this statement.  Folding\n \t may remove the need for some virtual operands."}, {"sha": "17da0f1228c5e0c14406ffbb897683ead490c1f0", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cedb4acda3240c6a7914834f812aa2e86fa7687/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cedb4acda3240c6a7914834f812aa2e86fa7687/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=6cedb4acda3240c6a7914834f812aa2e86fa7687", "patch": "@@ -446,12 +446,16 @@ static void\n tidy_after_forward_propagate_addr (tree stmt)\n {\n   mark_new_vars_to_rename (stmt);\n-  update_stmt (stmt);\n \n   /* We may have turned a trapping insn into a non-trapping insn.  */\n   if (maybe_clean_or_replace_eh_stmt (stmt, stmt)\n       && tree_purge_dead_eh_edges (bb_for_stmt (stmt)))\n     cfg_changed = true;\n+\n+  if (TREE_CODE (TREE_OPERAND (stmt, 1)) == ADDR_EXPR)\n+     recompute_tree_invarant_for_addr_expr (TREE_OPERAND (stmt, 1));\n+\n+  update_stmt (stmt);\n }\n \n /* STMT defines LHS which is contains the address of the 0th element"}, {"sha": "865853df1e18ad6f1779ee2dc55b96806e744c3f", "filename": "gcc/tree-ssa-propagate.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cedb4acda3240c6a7914834f812aa2e86fa7687/gcc%2Ftree-ssa-propagate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cedb4acda3240c6a7914834f812aa2e86fa7687/gcc%2Ftree-ssa-propagate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-propagate.c?ref=6cedb4acda3240c6a7914834f812aa2e86fa7687", "patch": "@@ -1052,8 +1052,10 @@ substitute_and_fold (prop_value_t *prop_value)\n \t  if (did_replace)\n \t    {\n \t      tree old_stmt = stmt;\n+\t      tree rhs;\n+\n \t      fold_stmt (bsi_stmt_ptr (i));\n-\t      stmt = bsi_stmt(i);\n+\t      stmt = bsi_stmt (i);\n \n \t      /* If we folded a builtin function, we'll likely\n \t\t need to rename VDEFs.  */\n@@ -1063,6 +1065,10 @@ substitute_and_fold (prop_value_t *prop_value)\n                  remove EH edges.  */\n \t      if (maybe_clean_or_replace_eh_stmt (old_stmt, stmt))\n \t\ttree_purge_dead_eh_edges (bb);\n+\n+\t      rhs = get_rhs (stmt);\n+\t      if (TREE_CODE (rhs) == ADDR_EXPR)\n+\t\trecompute_tree_invarant_for_addr_expr (rhs);\n \t    }\n \n \t  if (dump_file && (dump_flags & TDF_DETAILS))"}]}