{"sha": "a064fd4c7385442dd4f9f3a1b538aef2fdac5209", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTA2NGZkNGM3Mzg1NDQyZGQ0ZjlmM2ExYjUzOGFlZjJmZGFjNTIwOQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2019-06-17T18:40:22Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2019-06-17T18:40:22Z"}, "message": "re PR target/62055 (missed optimization: recognize fnabs (FP negative absolute value) (x86-64))\n\n\tPR target/62055\n\t* config/i386/i386.md (*nabstf2_1): New insn pattern.\n\t(*nabs<mode>2_1): Ditto.\n\t(nabs sse-reg splitter): New splitter.\n\t* config/i386/sse.md (*nabs<mode>2): New insn_and_split pattern.\n\ntestsuite/ChangeLog:\n\n\tPR target/62055\n\t* gcc.target/i386/fnabs.c: New test.\n\nFrom-SVN: r272396", "tree": {"sha": "8f24018f01d949be7aed5c71b94ea8254f667a31", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8f24018f01d949be7aed5c71b94ea8254f667a31"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a064fd4c7385442dd4f9f3a1b538aef2fdac5209", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a064fd4c7385442dd4f9f3a1b538aef2fdac5209", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a064fd4c7385442dd4f9f3a1b538aef2fdac5209", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a064fd4c7385442dd4f9f3a1b538aef2fdac5209/comments", "author": null, "committer": null, "parents": [{"sha": "bf0af866a4f2792a91310d8b809e25ffbdd9e1f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf0af866a4f2792a91310d8b809e25ffbdd9e1f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf0af866a4f2792a91310d8b809e25ffbdd9e1f7"}], "stats": {"total": 115, "additions": 114, "deletions": 1}, "files": [{"sha": "6001d262fb25286e18de4a53afcc1d2915625fd9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a064fd4c7385442dd4f9f3a1b538aef2fdac5209/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a064fd4c7385442dd4f9f3a1b538aef2fdac5209/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a064fd4c7385442dd4f9f3a1b538aef2fdac5209", "patch": "@@ -1,3 +1,11 @@\n+2019-06-17  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/62055\n+\t* config/i386/i386.md (*nabstf2_1): New insn pattern.\n+\t(*nabs<mode>2_1): Ditto.\n+\t(nabs sse-reg splitter): New splitter.\n+\t* config/i386/sse.md (*nabs<mode>2): New insn_and_split pattern.\n+\n 2019-06-17  Jan Hubicka  <hubicka@ucw.cz>\n \n \tPR bootstrap/90873."}, {"sha": "2b7df20813e4196b3c1c16d33aa1f18d2b9820c7", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a064fd4c7385442dd4f9f3a1b538aef2fdac5209/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a064fd4c7385442dd4f9f3a1b538aef2fdac5209/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=a064fd4c7385442dd4f9f3a1b538aef2fdac5209", "patch": "@@ -9452,6 +9452,16 @@\n   \"#\"\n   [(set_attr \"isa\" \"noavx,noavx,avx,avx\")])\n \n+(define_insn \"*nabstf2_1\"\n+  [(set (match_operand:TF 0 \"register_operand\" \"=x,x,Yv,Yv\")\n+\t(neg:TF\n+\t  (abs:TF\n+\t    (match_operand:TF 1 \"vector_operand\" \"0,xBm,Yv,m\"))))\n+   (use (match_operand:TF 2 \"vector_operand\" \"xBm,0,Yvm,Yv\"))]\n+  \"TARGET_SSE\"\n+  \"#\"\n+  [(set_attr \"isa\" \"noavx,noavx,avx,avx\")])\n+\n (define_expand \"<code><mode>2\"\n   [(set (match_operand:X87MODEF 0 \"register_operand\")\n \t(absneg:X87MODEF (match_operand:X87MODEF 1 \"register_operand\")))]\n@@ -9553,6 +9563,48 @@\n   [(const_int 0)]\n   \"ix86_split_fp_absneg_operator (<CODE>, <MODE>mode, operands); DONE;\")\n \n+(define_insn \"*nabs<mode>2_1\"\n+  [(set (match_operand:MODEF 0 \"register_operand\" \"=x,x,Yv\")\n+\t(neg:MODEF\n+\t  (abs:MODEF\n+\t    (match_operand:MODEF 1 \"register_operand\" \"0,x,Yv\"))))\n+   (use (match_operand:<ssevecmode> 2 \"vector_operand\" \"xBm,0,Yvm\"))]\n+  \"SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH\"\n+  \"#\"\n+  [(set_attr \"isa\" \"noavx,noavx,avx\")])\n+\n+(define_split\n+  [(set (match_operand:SSEMODEF 0 \"sse_reg_operand\")\n+\t(neg:SSEMODEF\n+\t  (abs:SSEMODEF\n+\t    (match_operand:SSEMODEF 1 \"vector_operand\"))))\n+   (use (match_operand:<ssevecmodef> 2 \"vector_operand\"))]\n+  \"((SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\n+    || (TARGET_SSE && (<MODE>mode == TFmode)))\n+   && reload_completed\"\n+  [(set (match_dup 0) (match_dup 3))]\n+{\n+  machine_mode mode = <MODE>mode;\n+  machine_mode vmode = <ssevecmodef>mode;\n+\n+  operands[0] = lowpart_subreg (vmode, operands[0], mode);\n+  operands[1] = lowpart_subreg (vmode, operands[1], mode);\n+\n+  if (TARGET_AVX)\n+    {\n+      if (MEM_P (operands[1]))\n+        std::swap (operands[1], operands[2]);\n+    }\n+  else\n+   {\n+     if (operands_match_p (operands[0], operands[2]))\n+       std::swap (operands[1], operands[2]);\n+   }\n+\n+  operands[3]\n+    = gen_rtx_fmt_ee (IOR, vmode, operands[1], operands[2]);\n+})\n+\n ;; Conditionalize these after reload. If they match before reload, we\n ;; lose the clobber and ability to use integer instructions.\n "}, {"sha": "5d8ada42654f41bd743c4111eaa1e90dc5c17951", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a064fd4c7385442dd4f9f3a1b538aef2fdac5209/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a064fd4c7385442dd4f9f3a1b538aef2fdac5209/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=a064fd4c7385442dd4f9f3a1b538aef2fdac5209", "patch": "@@ -1748,6 +1748,33 @@\n }\n   [(set_attr \"isa\" \"noavx,noavx,avx,avx\")])\n \n+(define_insn_and_split \"*nabs<mode>2\"\n+  [(set (match_operand:VF 0 \"register_operand\" \"=x,x,v,v\")\n+\t(neg:VF\n+\t  (abs:VF\n+\t    (match_operand:VF 1 \"vector_operand\" \"0,xBm,v,m\"))))\n+   (use (match_operand:VF 2 \"vector_operand\"    \"xBm,0,vm,v\"))]\n+  \"TARGET_SSE\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(set (match_dup 0) (match_dup 3))]\n+{\n+  if (TARGET_AVX)\n+    {\n+      if (MEM_P (operands[1]))\n+        std::swap (operands[1], operands[2]);\n+    }\n+  else\n+   {\n+     if (operands_match_p (operands[0], operands[2]))\n+       std::swap (operands[1], operands[2]);\n+   }\n+\n+  operands[3]\n+    = gen_rtx_fmt_ee (IOR, <MODE>mode, operands[1], operands[2]);\n+}\n+  [(set_attr \"isa\" \"noavx,noavx,avx,avx\")])\n+\n (define_expand \"<plusminus_insn><mode>3<mask_name><round_name>\"\n   [(set (match_operand:VF 0 \"register_operand\")\n \t(plusminus:VF"}, {"sha": "d2ea2f7a0937fbc26ddbef1c01b1c3d5114ed2cf", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a064fd4c7385442dd4f9f3a1b538aef2fdac5209/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a064fd4c7385442dd4f9f3a1b538aef2fdac5209/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a064fd4c7385442dd4f9f3a1b538aef2fdac5209", "patch": "@@ -1,3 +1,8 @@\n+2019-06-17  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/62055\n+\t* gcc.target/i386/fnabs.c: New test.\n+\n 2019-06-17  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/83820 - excessive attribute arguments not detected.\n@@ -22,7 +27,7 @@\n \n 2019-06-16  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n \n-\t* lib/target-supports.exp: Add check_effective_target_longlong64. \n+\t* lib/target-supports.exp: Add check_effective_target_longlong64.\n \n 2019-06-16  Jan Hubicka  <hubicka@ucw.cz>\n "}, {"sha": "817c9a74a4736f228a882e56a6df3659c762c8c2", "filename": "gcc/testsuite/gcc.target/i386/fnabs.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a064fd4c7385442dd4f9f3a1b538aef2fdac5209/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffnabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a064fd4c7385442dd4f9f3a1b538aef2fdac5209/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffnabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffnabs.c?ref=a064fd4c7385442dd4f9f3a1b538aef2fdac5209", "patch": "@@ -0,0 +1,21 @@\n+/* PR target/62055 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msse2 -mfpmath=sse\" } */\n+\n+float testf (float a)\n+{\n+  return -__builtin_fabsf (a);\n+}\n+\n+double test (double a)\n+{\n+   return -__builtin_fabs (a);\n+}\n+\n+__float128 testq (__float128 a)\n+{\n+   return -__builtin_fabsq (a);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\tv?orp\\[sd\\]\\[ \\t\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"\\tv?por\\[ \\t\\]\" 1 } } */"}]}