{"sha": "1c48bff185df422d6f9f980fd02466606be2ccd4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWM0OGJmZjE4NWRmNDIyZDZmOWY5ODBmZDAyNDY2NjA2YmUyY2NkNA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2016-02-15T08:42:38Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2016-02-15T08:42:38Z"}, "message": "re PR tree-optimization/69776 (Wrong optimization with aliasing)\n\n2016-02-15  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/69776\n\t* tree-ssa-sccvn.h (vn_reference_lookup): Adjust prototype.\n\t* tree-ssa-sccvn.c (vn_reference_lookup): Add parameter to\n\tindicate whether we can use TBAA to disambiguate against stores.\n\tUse alias-set zero if not.\n\t(visit_reference_op_store): Do not use TBAA when looking up\n\tredundant stores.\n\t* tree-ssa-pre.c (compute_avail): Use TBAA here.\n\t(eliminate_dom_walker::before_dom_children): But not when looking\n\tup redundant stores.\n\n\t* gcc.dg/torture/pr69776.c: New testcase.\n\nFrom-SVN: r233418", "tree": {"sha": "ced0a83a15fa56f6e17922648bde552b105142be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ced0a83a15fa56f6e17922648bde552b105142be"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1c48bff185df422d6f9f980fd02466606be2ccd4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c48bff185df422d6f9f980fd02466606be2ccd4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c48bff185df422d6f9f980fd02466606be2ccd4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c48bff185df422d6f9f980fd02466606be2ccd4/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9e074c0d6df7096f40fa0a046dfe6401c413d467", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e074c0d6df7096f40fa0a046dfe6401c413d467", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e074c0d6df7096f40fa0a046dfe6401c413d467"}], "stats": {"total": 65, "additions": 57, "deletions": 8}, "files": [{"sha": "565b50598c497958e2a6ec695b95d2390ead4c7a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c48bff185df422d6f9f980fd02466606be2ccd4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c48bff185df422d6f9f980fd02466606be2ccd4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1c48bff185df422d6f9f980fd02466606be2ccd4", "patch": "@@ -1,3 +1,16 @@\n+2016-02-15  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/69776\n+\t* tree-ssa-sccvn.h (vn_reference_lookup): Adjust prototype.\n+\t* tree-ssa-sccvn.c (vn_reference_lookup): Add parameter to\n+\tindicate whether we can use TBAA to disambiguate against stores.\n+\tUse alias-set zero if not.\n+\t(visit_reference_op_store): Do not use TBAA when looking up\n+\tredundant stores.\n+\t* tree-ssa-pre.c (compute_avail): Use TBAA here.\n+\t(eliminate_dom_walker::before_dom_children): But not when looking\n+\tup redundant stores.\n+\n 2016-02-14  John David Anglin  <danglin@gcc.gnu.org>\n \n \t* config/pa/pa.md (absqi2, absghi2, bswaphi2, bswapsi2, bswapdi2): New."}, {"sha": "4d129d810f69a4c487f65b7bf9b6717719af28d9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c48bff185df422d6f9f980fd02466606be2ccd4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c48bff185df422d6f9f980fd02466606be2ccd4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1c48bff185df422d6f9f980fd02466606be2ccd4", "patch": "@@ -1,3 +1,8 @@\n+2016-02-15  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/69776\n+\t* gcc.dg/torture/pr69776.c: New testcase.\n+\n 2016-02-14  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/60526"}, {"sha": "f2d971caabc924407114ffac482a8ed0feef9c5f", "filename": "gcc/testsuite/gcc.dg/torture/pr69776.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c48bff185df422d6f9f980fd02466606be2ccd4/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr69776.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c48bff185df422d6f9f980fd02466606be2ccd4/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr69776.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr69776.c?ref=1c48bff185df422d6f9f980fd02466606be2ccd4", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do run } */\n+/* { dg-additional-options \"-fstrict-aliasing\" } */\n+\n+extern void *malloc (__SIZE_TYPE__);\n+extern void abort (void);\n+\n+void __attribute__((noinline,noclone))\n+foo (int *pi)\n+{\n+  if (*pi != 1)\n+    abort ();\n+}\n+\n+int\n+main()\n+{\n+  void *p = malloc(sizeof (double));\n+  int *pi = p;\n+  double *pd = p;\n+\n+  *pi = 1;\n+  int a = *pi;\n+  *pd = 0;\n+  *pi = a;\n+  foo (pi);\n+\n+  return 0;\n+}"}, {"sha": "b2d63acf93039ee8c7ac086814f080c985a4bfa6", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c48bff185df422d6f9f980fd02466606be2ccd4/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c48bff185df422d6f9f980fd02466606be2ccd4/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=1c48bff185df422d6f9f980fd02466606be2ccd4", "patch": "@@ -3745,7 +3745,7 @@ compute_avail (void)\n \t\t      vn_reference_t ref;\n \t\t      vn_reference_lookup (gimple_assign_rhs1 (stmt),\n \t\t\t\t\t   gimple_vuse (stmt),\n-\t\t\t\t\t   VN_WALK, &ref);\n+\t\t\t\t\t   VN_WALK, &ref, true);\n \t\t      if (!ref)\n \t\t\tcontinue;\n \n@@ -4208,7 +4208,7 @@ eliminate_dom_walker::before_dom_children (basic_block b)\n           tree val;\n \t  tree rhs = gimple_assign_rhs1 (stmt);\n           val = vn_reference_lookup (gimple_assign_lhs (stmt),\n-                                     gimple_vuse (stmt), VN_WALK, NULL);\n+                                     gimple_vuse (stmt), VN_WALK, NULL, false);\n           if (TREE_CODE (rhs) == SSA_NAME)\n             rhs = VN_INFO (rhs)->valnum;\n           if (val"}, {"sha": "5b78ba4a7505c65fc056eadaec3aeeaf9b58df63", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c48bff185df422d6f9f980fd02466606be2ccd4/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c48bff185df422d6f9f980fd02466606be2ccd4/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=1c48bff185df422d6f9f980fd02466606be2ccd4", "patch": "@@ -2230,11 +2230,12 @@ vn_reference_lookup_pieces (tree vuse, alias_set_type set, tree type,\n    number if it exists in the hash table.  Return NULL_TREE if it does\n    not exist in the hash table or if the result field of the structure\n    was NULL..  VNRESULT will be filled in with the vn_reference_t\n-   stored in the hashtable if one exists.  */\n+   stored in the hashtable if one exists.  When TBAA_P is false assume\n+   we are looking up a store and treat it as having alias-set zero.  */\n \n tree\n vn_reference_lookup (tree op, tree vuse, vn_lookup_kind kind,\n-\t\t     vn_reference_t *vnresult)\n+\t\t     vn_reference_t *vnresult, bool tbaa_p)\n {\n   vec<vn_reference_op_s> operands;\n   struct vn_reference_s vr1;\n@@ -2264,6 +2265,8 @@ vn_reference_lookup (tree op, tree vuse, vn_lookup_kind kind,\n \t  || !ao_ref_init_from_vn_reference (&r, vr1.set, vr1.type,\n \t\t\t\t\t     vr1.operands))\n \tao_ref_init (&r, op);\n+      if (! tbaa_p)\n+\tr.ref_alias_set = r.base_alias_set = 0;\n       vn_walk_kind = kind;\n       wvnresult =\n \t(vn_reference_t)walk_non_aliased_vuses (&r, vr1.vuse,\n@@ -3350,7 +3353,7 @@ visit_reference_op_load (tree lhs, tree op, gimple *stmt)\n   last_vuse = gimple_vuse (stmt);\n   last_vuse_ptr = &last_vuse;\n   result = vn_reference_lookup (op, gimple_vuse (stmt),\n-\t\t\t\tdefault_vn_walk_kind, NULL);\n+\t\t\t\tdefault_vn_walk_kind, NULL, true);\n   last_vuse_ptr = NULL;\n \n   /* We handle type-punning through unions by value-numbering based\n@@ -3472,7 +3475,7 @@ visit_reference_op_store (tree lhs, tree op, gimple *stmt)\n      Otherwise, the vdefs for the store are used when inserting into\n      the table, since the store generates a new memory state.  */\n \n-  result = vn_reference_lookup (lhs, vuse, VN_NOWALK, NULL);\n+  result = vn_reference_lookup (lhs, vuse, VN_NOWALK, NULL, false);\n \n   if (result)\n     {\n@@ -3487,7 +3490,7 @@ visit_reference_op_store (tree lhs, tree op, gimple *stmt)\n       && default_vn_walk_kind == VN_WALK)\n     {\n       assign = build2 (MODIFY_EXPR, TREE_TYPE (lhs), lhs, op);\n-      vn_reference_lookup (assign, vuse, VN_NOWALK, &vnresult);\n+      vn_reference_lookup (assign, vuse, VN_NOWALK, &vnresult, false);\n       if (vnresult)\n \t{\n \t  VN_INFO (vdef)->use_processed = true;"}, {"sha": "a3f9fa26ad3c450c9cd7c064002711695e43e778", "filename": "gcc/tree-ssa-sccvn.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c48bff185df422d6f9f980fd02466606be2ccd4/gcc%2Ftree-ssa-sccvn.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c48bff185df422d6f9f980fd02466606be2ccd4/gcc%2Ftree-ssa-sccvn.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.h?ref=1c48bff185df422d6f9f980fd02466606be2ccd4", "patch": "@@ -216,7 +216,7 @@ bool ao_ref_init_from_vn_reference (ao_ref *, alias_set_type, tree,\n tree vn_reference_lookup_pieces (tree, alias_set_type, tree,\n \t\t\t\t vec<vn_reference_op_s> ,\n \t\t\t\t vn_reference_t *, vn_lookup_kind);\n-tree vn_reference_lookup (tree, tree, vn_lookup_kind, vn_reference_t *);\n+tree vn_reference_lookup (tree, tree, vn_lookup_kind, vn_reference_t *, bool);\n void vn_reference_lookup_call (gcall *, vn_reference_t *, vn_reference_t);\n vn_reference_t vn_reference_insert_pieces (tree, alias_set_type, tree,\n \t\t\t\t\t   vec<vn_reference_op_s> ,"}]}