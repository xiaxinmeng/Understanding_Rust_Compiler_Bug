{"sha": "c5de3444c4798758cdd800eca144480b4a8ef299", "node_id": "C_kwDOANBUbNoAKGM1ZGUzNDQ0YzQ3OTg3NThjZGQ4MDBlY2ExNDQ0ODBiNGE4ZWYyOTk", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-04-14T19:34:14Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-04-14T21:09:57Z"}, "message": "c++: constexpr trivial -fno-elide-ctors [PR104646]\n\nThe constexpr constructor checking code got confused by the expansion of a\ntrivial copy constructor; we don't need to do that checking for defaulted\nctors, anyway.\n\n\tPR c++/104646\n\ngcc/cp/ChangeLog:\n\n\t* constexpr.cc (maybe_save_constexpr_fundef): Don't do extra\n\tchecks for defaulted ctors.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp0x/constexpr-fno-elide-ctors1.C: New test.", "tree": {"sha": "83f97afcf3f3fc3813319596582573e28e4acc10", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/83f97afcf3f3fc3813319596582573e28e4acc10"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c5de3444c4798758cdd800eca144480b4a8ef299", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5de3444c4798758cdd800eca144480b4a8ef299", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5de3444c4798758cdd800eca144480b4a8ef299", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5de3444c4798758cdd800eca144480b4a8ef299/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "82536fbb8a7d150b829650378e0ba07dad5c8fb8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82536fbb8a7d150b829650378e0ba07dad5c8fb8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82536fbb8a7d150b829650378e0ba07dad5c8fb8"}], "stats": {"total": 92, "additions": 91, "deletions": 1}, "files": [{"sha": "e89440e770f6e729f99ee7afd0e76a529e2fab35", "filename": "gcc/cp/constexpr.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5de3444c4798758cdd800eca144480b4a8ef299/gcc%2Fcp%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5de3444c4798758cdd800eca144480b4a8ef299/gcc%2Fcp%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.cc?ref=c5de3444c4798758cdd800eca144480b4a8ef299", "patch": "@@ -920,7 +920,8 @@ maybe_save_constexpr_fundef (tree fun)\n   if (!potential && complain)\n     require_potential_rvalue_constant_expression (massaged);\n \n-  if (DECL_CONSTRUCTOR_P (fun) && potential)\n+  if (DECL_CONSTRUCTOR_P (fun) && potential\n+      && !DECL_DEFAULTED_FN (fun))\n     {\n       if (cx_check_missing_mem_inits (DECL_CONTEXT (fun),\n \t\t\t\t      massaged, complain))"}, {"sha": "71c76fa0247195fb406b1a05a128fa46663116e6", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-fno-elide-ctors1.C", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5de3444c4798758cdd800eca144480b4a8ef299/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-fno-elide-ctors1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5de3444c4798758cdd800eca144480b4a8ef299/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-fno-elide-ctors1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-fno-elide-ctors1.C?ref=c5de3444c4798758cdd800eca144480b4a8ef299", "patch": "@@ -0,0 +1,89 @@\n+// PR c++/104646\n+// { dg-do compile { target c++11 } }\n+// { dg-additional-options -fno-elide-constructors }\n+\n+template <typename _T1> struct pair {\n+  _T1 first;\n+  int second;\n+};\n+template <typename _Iterator> class __normal_iterator {\n+  _Iterator __traits_type;\n+\n+public:\n+  constexpr __normal_iterator() {}\n+};\n+template <typename> class allocator;\n+template <typename> struct allocator_traits;\n+template <typename _Tp> struct allocator_traits<allocator<_Tp>> {\n+  using value_type = _Tp;\n+  template <typename _Up> using rebind_alloc = allocator<_Up>;\n+};\n+template <typename _Alloc> struct __alloc_traits {\n+  typedef allocator_traits<_Alloc> _Base_type;\n+  typedef typename _Base_type::value_type &const_reference;\n+  template <typename _Tp> struct rebind {\n+    typedef typename _Base_type::template rebind_alloc<_Tp> other;\n+  };\n+};\n+template <typename _Tp, typename _Alloc> struct _Vector_base {\n+  typedef typename __alloc_traits<_Alloc>::template rebind<_Tp>::other _Tp_alloc_type;\n+};\n+template <typename _Tp, typename _Alloc = allocator<_Tp>> class vector {\n+public:\n+  typename __alloc_traits<\n+      typename _Vector_base<_Tp, _Alloc>::_Tp_alloc_type>::const_reference\n+  operator[](long);\n+};\n+enum match_flag_type {};\n+template <typename, typename> class Trans_NS___cxx11_basic_regex;\n+class Trans_NS___cxx11_match_results;\n+enum _RegexExecutorPolicy { _S_auto };\n+template <typename, typename, typename _CharT, typename _TraitsT,\n+          _RegexExecutorPolicy, bool>\n+bool __regex_algo_impl(Trans_NS___cxx11_match_results &,\n+                       const Trans_NS___cxx11_basic_regex<_CharT, _TraitsT> &);\n+template <typename, typename, typename, bool> class _Executor;\n+template <typename _Ch_type, typename = _Ch_type>\n+class Trans_NS___cxx11_basic_regex {};\n+class Trans_NS___cxx11_match_results : vector<int> {\n+  template <typename, typename, typename _Cp, typename _Rp,\n+            _RegexExecutorPolicy, bool>\n+  friend bool __regex_algo_impl(Trans_NS___cxx11_match_results &,\n+                                const Trans_NS___cxx11_basic_regex<_Cp, _Rp> &);\n+};\n+template <typename _Bi_iter, typename _Alloc, typename _Ch_type,\n+          typename _Rx_traits>\n+void regex_search(_Bi_iter, _Alloc,\n+                  Trans_NS___cxx11_basic_regex<_Ch_type, _Rx_traits>) {\n+  __regex_algo_impl<_Bi_iter, _Alloc, _Ch_type, _Rx_traits, _S_auto, false>;\n+}\n+match_flag_type __regex_algo_impl___flags;\n+template <typename, typename, typename _CharT, typename _TraitsT,\n+          _RegexExecutorPolicy, bool>\n+bool __regex_algo_impl(\n+    Trans_NS___cxx11_match_results &__m,\n+    const Trans_NS___cxx11_basic_regex<_CharT, _TraitsT> &__re) {\n+  __normal_iterator<const char *> __e, __s;\n+  _Executor<int, int, _TraitsT, false> __executor(__s, __e, __m, __re,\n+                                                  __regex_algo_impl___flags);\n+  __executor._M_match();\n+  return false;\n+}\n+template <typename, typename, typename, bool> class _Executor {\n+public:\n+  _Executor(__normal_iterator<const char *>, __normal_iterator<const char *>,\n+            vector<int>, Trans_NS___cxx11_basic_regex<char>, match_flag_type);\n+  void _M_match() { _M_dfs(); }\n+  void _M_dfs();\n+  vector<pair<__normal_iterator<char *>>> _M_rep_count;\n+};\n+long _M_rep_once_more___i;\n+template <typename _BiIter, typename _Alloc, typename _TraitsT, bool __dfs_mode>\n+void _Executor<_BiIter, _Alloc, _TraitsT, __dfs_mode>::_M_dfs() {\n+  auto __rep_count = _M_rep_count[_M_rep_once_more___i];\n+}\n+char main___trans_tmp_1;\n+void main___trans_tmp_2() {\n+  Trans_NS___cxx11_basic_regex<char> re;\n+  regex_search(main___trans_tmp_1, main___trans_tmp_2, re);\n+}"}]}