{"sha": "0aa7091befa9fdb67f7013dbd454d336a31ef71d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGFhNzA5MWJlZmE5ZmRiNjdmNzAxM2RiZDQ1NGQzMzZhMzFlZjcxZA==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel@linux.ibm.com", "date": "2021-08-04T16:40:09Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@linux.ibm.com", "date": "2021-08-04T16:40:09Z"}, "message": "IBM Z: Get rid of vpdi unspec\n\nThe patch gets rid of the unspec used for the vector permute double\nimmediate instruction and replaces it with generic rtx.\n\ngcc/ChangeLog:\n\n\t* config/s390/s390.md (UNSPEC_VEC_PERMI): Remove constant\n\tdefinition.\n\t* config/s390/vector.md (*vpdi1<mode>, *vpdi4<mode>): New pattern\n\tdefinitions.\n\t* config/s390/vx-builtins.md (*vec_permi<mode>): Emit generic rtx\n\tinstead of an unspec.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/s390/zvector/vec-permi.c: Removed.\n\t* gcc.target/s390/zvector/vec_permi.c: New test.", "tree": {"sha": "8f556be8265a6a1aac5c8d6853e82ce9d7676269", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8f556be8265a6a1aac5c8d6853e82ce9d7676269"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0aa7091befa9fdb67f7013dbd454d336a31ef71d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0aa7091befa9fdb67f7013dbd454d336a31ef71d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0aa7091befa9fdb67f7013dbd454d336a31ef71d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0aa7091befa9fdb67f7013dbd454d336a31ef71d/comments", "author": {"login": "Andreas-Krebbel", "id": 38103320, "node_id": "MDQ6VXNlcjM4MTAzMzIw", "avatar_url": "https://avatars.githubusercontent.com/u/38103320?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Andreas-Krebbel", "html_url": "https://github.com/Andreas-Krebbel", "followers_url": "https://api.github.com/users/Andreas-Krebbel/followers", "following_url": "https://api.github.com/users/Andreas-Krebbel/following{/other_user}", "gists_url": "https://api.github.com/users/Andreas-Krebbel/gists{/gist_id}", "starred_url": "https://api.github.com/users/Andreas-Krebbel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Andreas-Krebbel/subscriptions", "organizations_url": "https://api.github.com/users/Andreas-Krebbel/orgs", "repos_url": "https://api.github.com/users/Andreas-Krebbel/repos", "events_url": "https://api.github.com/users/Andreas-Krebbel/events{/privacy}", "received_events_url": "https://api.github.com/users/Andreas-Krebbel/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Andreas-Krebbel", "id": 38103320, "node_id": "MDQ6VXNlcjM4MTAzMzIw", "avatar_url": "https://avatars.githubusercontent.com/u/38103320?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Andreas-Krebbel", "html_url": "https://github.com/Andreas-Krebbel", "followers_url": "https://api.github.com/users/Andreas-Krebbel/followers", "following_url": "https://api.github.com/users/Andreas-Krebbel/following{/other_user}", "gists_url": "https://api.github.com/users/Andreas-Krebbel/gists{/gist_id}", "starred_url": "https://api.github.com/users/Andreas-Krebbel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Andreas-Krebbel/subscriptions", "organizations_url": "https://api.github.com/users/Andreas-Krebbel/orgs", "repos_url": "https://api.github.com/users/Andreas-Krebbel/repos", "events_url": "https://api.github.com/users/Andreas-Krebbel/events{/privacy}", "received_events_url": "https://api.github.com/users/Andreas-Krebbel/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5391688acc997e26375e42340cea885fa6ad0d7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5391688acc997e26375e42340cea885fa6ad0d7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5391688acc997e26375e42340cea885fa6ad0d7d"}], "stats": {"total": 173, "additions": 102, "deletions": 71}, "files": [{"sha": "1b894a926ceae2a87128f4de1d346510e5d5cda2", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0aa7091befa9fdb67f7013dbd454d336a31ef71d/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0aa7091befa9fdb67f7013dbd454d336a31ef71d/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=0aa7091befa9fdb67f7013dbd454d336a31ef71d", "patch": "@@ -166,7 +166,6 @@\n    UNSPEC_VEC_PACK_UNSIGNED_SATURATE_CC\n    UNSPEC_VEC_PACK_UNSIGNED_SATURATE_GENCC\n    UNSPEC_VEC_PERM\n-   UNSPEC_VEC_PERMI\n    UNSPEC_VEC_EXTEND\n    UNSPEC_VEC_STORE_LEN\n    UNSPEC_VEC_STORE_LEN_R"}, {"sha": "48dc564651e0ef5e2d4ecc7bad844e3dadfcdde4", "filename": "gcc/config/s390/vector.md", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0aa7091befa9fdb67f7013dbd454d336a31ef71d/gcc%2Fconfig%2Fs390%2Fvector.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0aa7091befa9fdb67f7013dbd454d336a31ef71d/gcc%2Fconfig%2Fs390%2Fvector.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fvector.md?ref=0aa7091befa9fdb67f7013dbd454d336a31ef71d", "patch": "@@ -767,6 +767,32 @@\n   \"vperm\\t%v0,%v1,%v2,%v3\"\n   [(set_attr \"op_type\" \"VRR\")])\n \n+\n+; First DW of op1 and second DW of op2\n+(define_insn \"*vpdi1<mode>\"\n+  [(set (match_operand:V_HW_2   0 \"register_operand\" \"=v\")\n+\t(vec_select:V_HW_2\n+\t (vec_concat:<vec_2x_nelts>\n+\t  (match_operand:V_HW_2 1 \"register_operand\"  \"v\")\n+\t  (match_operand:V_HW_2 2 \"register_operand\"  \"v\"))\n+\t (parallel [(const_int 0) (const_int 3)])))]\n+  \"TARGET_VX\"\n+  \"vpdi\\t%v0,%v1,%v2,1\"\n+  [(set_attr \"op_type\" \"VRR\")])\n+\n+; Second DW of op1 and first of op2\n+(define_insn \"*vpdi4<mode>\"\n+  [(set (match_operand:V_HW_2   0 \"register_operand\" \"=v\")\n+\t(vec_select:V_HW_2\n+\t (vec_concat:<vec_2x_nelts>\n+\t  (match_operand:V_HW_2 1 \"register_operand\"  \"v\")\n+\t  (match_operand:V_HW_2 2 \"register_operand\"  \"v\"))\n+\t (parallel [(const_int 1) (const_int 2)])))]\n+  \"TARGET_VX\"\n+  \"vpdi\\t%v0,%v1,%v2,4\"\n+  [(set_attr \"op_type\" \"VRR\")])\n+\n+\n (define_insn \"*vmrhb\"\n   [(set (match_operand:V16QI                     0 \"register_operand\" \"=v\")\n         (vec_select:V16QI"}, {"sha": "3799e833187e16e4fa21537de446a41c9cb5834f", "filename": "gcc/config/s390/vx-builtins.md", "status": "modified", "additions": 10, "deletions": 16, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0aa7091befa9fdb67f7013dbd454d336a31ef71d/gcc%2Fconfig%2Fs390%2Fvx-builtins.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0aa7091befa9fdb67f7013dbd454d336a31ef71d/gcc%2Fconfig%2Fs390%2Fvx-builtins.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fvx-builtins.md?ref=0aa7091befa9fdb67f7013dbd454d336a31ef71d", "patch": "@@ -403,28 +403,22 @@\n   \"vperm\\t%v0,%v1,%v2,%v3\"\n   [(set_attr \"op_type\" \"VRR\")])\n \n+; Incoming op3 is in vec_permi format and will we turned into a\n+; permute vector consisting of op3 and op4.\n (define_expand \"vec_permi<mode>\"\n-  [(set (match_operand:V_HW_64                  0 \"register_operand\"   \"\")\n-\t(unspec:V_HW_64 [(match_operand:V_HW_64 1 \"register_operand\"   \"\")\n-\t\t\t (match_operand:V_HW_64 2 \"register_operand\"   \"\")\n-\t\t\t (match_operand:QI      3 \"const_mask_operand\" \"\")]\n-\t\t\tUNSPEC_VEC_PERMI))]\n+  [(set (match_operand:V_HW_2   0 \"register_operand\" \"\")\n+\t(vec_select:V_HW_2\n+\t (vec_concat:<vec_2x_nelts>\n+\t  (match_operand:V_HW_2 1 \"register_operand\" \"\")\n+\t  (match_operand:V_HW_2 2 \"register_operand\" \"\"))\n+\t (parallel [(match_operand:QI 3 \"const_mask_operand\" \"\") (match_dup 4)])))]\n   \"TARGET_VX\"\n {\n   HOST_WIDE_INT val = INTVAL (operands[3]);\n-  operands[3] = GEN_INT ((val & 1) | (val & 2) << 1);\n+  operands[3] = GEN_INT ((val & 2) >> 1);\n+  operands[4] = GEN_INT ((val & 1) + 2);\n })\n \n-(define_insn \"*vec_permi<mode>\"\n-  [(set (match_operand:V_HW_64                  0 \"register_operand\"  \"=v\")\n-\t(unspec:V_HW_64 [(match_operand:V_HW_64 1 \"register_operand\"   \"v\")\n-\t\t\t (match_operand:V_HW_64 2 \"register_operand\"   \"v\")\n-\t\t\t (match_operand:QI      3 \"const_mask_operand\" \"C\")]\n-\t\t\tUNSPEC_VEC_PERMI))]\n-  \"TARGET_VX && (UINTVAL (operands[3]) & 10) == 0\"\n-  \"vpdi\\t%v0,%v1,%v2,%b3\"\n-  [(set_attr \"op_type\" \"VRR\")])\n-\n \n ; Vector replicate\n "}, {"sha": "c0a852b970300d3e064289ece6ab9aad98e07049", "filename": "gcc/testsuite/gcc.target/s390/zvector/vec-permi.c", "status": "removed", "additions": 0, "deletions": 54, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5391688acc997e26375e42340cea885fa6ad0d7d/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fzvector%2Fvec-permi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5391688acc997e26375e42340cea885fa6ad0d7d/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fzvector%2Fvec-permi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fzvector%2Fvec-permi.c?ref=5391688acc997e26375e42340cea885fa6ad0d7d", "patch": "@@ -1,54 +0,0 @@\n-/* { dg-do compile } */\n-/* { dg-options \"-O3 -march=z13 -mzarch --save-temps\" } */\n-/* { dg-do run { target { s390_z13_hw } } } */\n-\n-/*\n- * The vector intrinsic vec_permi(a, b, c) chooses one of the two eight-byte\n- * vector elements in each of a and b, depending on the value of c. The valid\n- * values for c differ from the encoding for the M4 field in assembly and in the\n- * binary instruction.\n- *\n- * selection | c | encoding in assembly\n- * a[0] b[0] | 0 | 0\n- * a[0] b[1] | 1 | 1\n- * a[1] b[0] | 2 | 4\n- * a[1] b[1] | 3 | 5\n- *\n- * (i.e., indices a[i] b[j] are encoded for c as (i<<1) | j, yet for the\n- * M4 field as (i<<2) | j.\n- */\n-#include <assert.h>\n-#include <vecintrin.h>\n-\n-typedef unsigned long long uv2di __attribute__((vector_size(16)));\n-\n-__attribute__ ((noipa)) static uv2di\n-do_vec_permi(uv2di a, uv2di b, int c)\n-{\n-    switch(c) {\n-\tcase 0: return vec_permi(a, b, 0);\n-\tcase 1: return vec_permi(a, b, 1);\n-\tcase 2: return vec_permi(a, b, 2);\n-\tcase 3: return vec_permi(a, b, 3);\n-\tdefault: assert(0);\n-    }\n-}\n-\n-/* { dg-final { scan-assembler-times {\\n\\tvpdi\\t%v\\d+,%v\\d+,%v\\d+,0\\n} 1 } } */\n-/* { dg-final { scan-assembler-times {\\n\\tvpdi\\t%v\\d+,%v\\d+,%v\\d+,1\\n} 1 } } */\n-/* { dg-final { scan-assembler-times {\\n\\tvpdi\\t%v\\d+,%v\\d+,%v\\d+,4\\n} 1 } } */\n-/* { dg-final { scan-assembler-times {\\n\\tvpdi\\t%v\\d+,%v\\d+,%v\\d+,5\\n} 1 } } */\n-\n-int\n-main (void)\n-{\n-    uv2di a = { 0xa0, 0xa1 };\n-    uv2di b = { 0xb0, 0xb1 };\n-\n-    for (int i = 0; i < 2; i++)\n-\tfor (int j = 0; j < 2; j++) {\n-\t    uv2di res = do_vec_permi(a, b, (i<<1)|j);\n-\t    assert(res[0] == a[i]);\n-\t    assert(res[1] == b[j]);\n-\t}\n-}"}, {"sha": "b66fa905dd07374d3156f9552749dcf54181df5e", "filename": "gcc/testsuite/gcc.target/s390/zvector/vec_permi.c", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0aa7091befa9fdb67f7013dbd454d336a31ef71d/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fzvector%2Fvec_permi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0aa7091befa9fdb67f7013dbd454d336a31ef71d/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fzvector%2Fvec_permi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fzvector%2Fvec_permi.c?ref=0aa7091befa9fdb67f7013dbd454d336a31ef71d", "patch": "@@ -0,0 +1,66 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -mzarch -march=z13 -mzvector --save-temps\" } */\n+/* { dg-do run { target { s390_z13_hw } } } */\n+\n+/*\n+ * The vector intrinsic vec_permi(a, b, c) chooses one of the two eight-byte\n+ * vector elements in each of a and b, depending on the value of c. The valid\n+ * values for c differ from the encoding for the M4 field in assembly and in the\n+ * binary instruction.\n+ *\n+ * selection | c | encoding in assembly\n+ * a[0] b[0] | 0 | 0          -> vmrhg\n+ * a[0] b[1] | 1 | 1\n+ * a[1] b[0] | 2 | 4\n+ * a[1] b[1] | 3 | 5          -> vmrlg\n+ *\n+ * (i.e., indices a[i] b[j] are encoded for c as (i<<1) | j, yet for the\n+ * M4 field as (i<<2) | j.\n+ */\n+\n+/* { dg-final { scan-assembler-times \"\\tvmrhg\\t\" 3 } } */\n+/* { dg-final { scan-assembler-times \"\\tvmrlg\\t\" 3 } } */\n+/* { dg-final { scan-assembler-times \"\\tvpdi\\t\" 6 } } */\n+\n+#include \"vec-types.h\"\n+#include <vecintrin.h>\n+\n+#define GEN_PERMI_BITS(VEC_TYPE, BITS)\t\t\t\\\n+  VEC_TYPE __attribute__((noinline))\t\t\t\\\n+  permi_##BITS##_##VEC_TYPE(VEC_TYPE a, VEC_TYPE b) {\t\\\n+    return vec_permi (a, b, (BITS)); }\n+\n+#define GEN_PERMI(VEC_TYPE)\t\t\t\\\n+  GEN_PERMI_BITS(VEC_TYPE, 0);\t\t\t\\\n+  GEN_PERMI_BITS(VEC_TYPE, 1);\t\t\t\\\n+  GEN_PERMI_BITS(VEC_TYPE, 2);\t\t\t\\\n+  GEN_PERMI_BITS(VEC_TYPE, 3);\n+\n+GEN_PERMI(v2di)\n+GEN_PERMI(uv2di)\n+GEN_PERMI(v2df)\n+\n+\n+#define CHECK_PERMI_BITS(VEC_TYPE, BITS)\t\t\\\n+  VEC_TYPE r##BITS = permi_##BITS##_##VEC_TYPE (a, b);\t\\\n+  if (r##BITS[0] != ((BITS) & 2) >> 1\t\t\t\\\n+      || r##BITS[1] != ((BITS) & 1) + 2)\t\t\\\n+    __builtin_abort();\n+\n+#define CHECK_PERMI(VEC_TYPE)\t\t\t\\\n+  {\t\t\t\t\t\t\\\n+    VEC_TYPE a = GEN_SEQ_VEC (VEC_TYPE, 0);\t\\\n+    VEC_TYPE b = GEN_SEQ_VEC (VEC_TYPE, 2);\t\\\n+    CHECK_PERMI_BITS (VEC_TYPE, 0);\t\t\\\n+    CHECK_PERMI_BITS (VEC_TYPE, 1);\t\t\\\n+    CHECK_PERMI_BITS (VEC_TYPE, 2);\t\t\\\n+    CHECK_PERMI_BITS (VEC_TYPE, 3);\t\t\\\n+  }\n+\n+int\n+main ()\n+{\n+  CHECK_PERMI (v2di);\n+  CHECK_PERMI (uv2di);\n+  CHECK_PERMI (v2df);\n+}"}]}