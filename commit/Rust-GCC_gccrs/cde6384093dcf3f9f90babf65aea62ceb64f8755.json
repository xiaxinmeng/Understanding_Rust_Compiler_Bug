{"sha": "cde6384093dcf3f9f90babf65aea62ceb64f8755", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2RlNjM4NDA5M2RjZjNmOWY5MGJhYmY2NWFlYTYyY2ViNjRmODc1NQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2003-07-10T06:21:13Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2003-07-10T06:21:13Z"}, "message": "locale_facets.tcc: Use function object for __use_cache instead of template function.\n\n\n2003-07-09  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* include/bits/locale_facets.tcc: Use function object for\n\t__use_cache instead of template function. Partially specialize for\n\t__numpunct<_CharT>.\n\t* include/bits/locale_classes.h: Update friend declaration for\n\t__use_cache.\n\t(_M_install_cache): No throw exception specs.\n\t* src/locale.cc: Remove __use_cache specializations.\n\t* include/ext/pod_char_traits.h (length): Tweak.\n\t* include/bits/locale_facets.h (__numpunct_cache): Remove\n\tchar_type typedef.\n\t* testsuite/testsuite_hooks.h (pod_unsigned_int): Remove.\n\t(pod_long): Remove.\n\t* testsuite/22_locale/numpunct/members/char/cache_1.cc: New.\n\t* testsuite/22_locale/numpunct/members/char/cache_2.cc: New.\n\t* testsuite/22_locale/numpunct/members/wchar_t/cache_1.cc: New.\n\t* testsuite/22_locale/numpunct/members/wchar_t/cache_2.cc: New.\n\t* testsuite/22_locale/numpunct/members/pod/1.cc: New.\n\t* testsuite/22_locale/numpunct/members/pod/2.cc: New.\n\nFrom-SVN: r69177", "tree": {"sha": "94aee28a3995a67905d614532af5c300830ca624", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/94aee28a3995a67905d614532af5c300830ca624"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cde6384093dcf3f9f90babf65aea62ceb64f8755", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cde6384093dcf3f9f90babf65aea62ceb64f8755", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cde6384093dcf3f9f90babf65aea62ceb64f8755", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cde6384093dcf3f9f90babf65aea62ceb64f8755/comments", "author": null, "committer": null, "parents": [{"sha": "ae12c66624e663d6a142882adc32fdb630dfd3fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae12c66624e663d6a142882adc32fdb630dfd3fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae12c66624e663d6a142882adc32fdb630dfd3fb"}], "stats": {"total": 903, "additions": 819, "deletions": 84}, "files": [{"sha": "885f9b25fb3abc877e13dcec9e0ff35f274a1c1f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cde6384093dcf3f9f90babf65aea62ceb64f8755/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cde6384093dcf3f9f90babf65aea62ceb64f8755/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=cde6384093dcf3f9f90babf65aea62ceb64f8755", "patch": "@@ -1,3 +1,24 @@\n+2003-07-09  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* include/bits/locale_facets.tcc: Use function object for\n+\t__use_cache instead of template function. Partially specialize for \n+\t__numpunct<_CharT>.\n+\t* include/bits/locale_classes.h: Update friend declaration for\n+\t__use_cache.\n+\t(_M_install_cache): No throw exception specs.\n+\t* src/locale.cc: Remove __use_cache specializations.\n+\t* include/ext/pod_char_traits.h (length): Tweak.\n+\t* include/bits/locale_facets.h (__numpunct_cache): Remove\n+\tchar_type typedef.\n+\t* testsuite/testsuite_hooks.h (pod_unsigned_int): Remove.\n+\t(pod_long): Remove.\n+\t* testsuite/22_locale/numpunct/members/char/cache_1.cc: New.\n+\t* testsuite/22_locale/numpunct/members/char/cache_2.cc: New.\n+\t* testsuite/22_locale/numpunct/members/wchar_t/cache_1.cc: New.\n+\t* testsuite/22_locale/numpunct/members/wchar_t/cache_2.cc: New.\n+\t* testsuite/22_locale/numpunct/members/pod/1.cc: New.\n+\t* testsuite/22_locale/numpunct/members/pod/2.cc: New.\n+\t\n 2003-07-09  Jerry Quinn  <jlquinn@optonline.net>\n \n \t* src/ios.cc (_M_grow_words):  Fix spelling."}, {"sha": "b93cfb3814281fae6ceeb77992040f27b7430412", "filename": "libstdc++-v3/include/bits/locale_classes.h", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cde6384093dcf3f9f90babf65aea62ceb64f8755/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cde6384093dcf3f9f90babf65aea62ceb64f8755/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.h?ref=cde6384093dcf3f9f90babf65aea62ceb64f8755", "patch": "@@ -73,8 +73,7 @@ namespace std\n       use_facet(const locale&);\n \n     template<typename _Cache>\n-      friend const _Cache&\n-      __use_cache(const locale& __loc);\n+      friend struct __use_cache;\n    \n     // Category values:\n     // NB: Order must match _S_facet_categories definition in locale.cc\n@@ -298,8 +297,7 @@ namespace std\n       use_facet(const locale&);\n \n     template<typename _Cache>\n-      friend const _Cache&\n-      __use_cache(const locale& __loc);\n+      friend struct __use_cache;\n \n   private:\n     // Data Members.\n@@ -370,7 +368,7 @@ namespace std\n       { _M_install_facet(&_Facet::id, __facet); }\n \n     void\n-    _M_install_cache(const facet* __cache, size_t __index)\n+    _M_install_cache(const facet* __cache, size_t __index) throw()\n     { \n       __cache->_M_add_reference();\n       _M_caches[__index] = __cache; "}, {"sha": "cda0dcba9df80e083a16e05f9748ec5823e082fc", "filename": "libstdc++-v3/include/bits/locale_facets.h", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cde6384093dcf3f9f90babf65aea62ceb64f8755/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cde6384093dcf3f9f90babf65aea62ceb64f8755/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h?ref=cde6384093dcf3f9f90babf65aea62ceb64f8755", "patch": "@@ -577,34 +577,31 @@ namespace std\n   template<typename _CharT>\n     struct __numpunct_cache : public locale::facet\n     {\n-      // Types:\n-      typedef _CharT          \t\tchar_type;\n-\n       const char* \t\t\t_M_grouping;\n       bool\t\t\t\t_M_use_grouping;\n-      const char_type* \t\t\t_M_truename;\n-      const char_type*\t\t\t_M_falsename;\n-      char_type \t\t\t_M_decimal_point;\n-      char_type \t\t\t_M_thousands_sep;\n+      const _CharT* \t\t\t_M_truename;\n+      const _CharT*\t\t\t_M_falsename;\n+      _CharT \t\t\t\t_M_decimal_point;\n+      _CharT \t\t\t\t_M_thousands_sep;\n       \n       // A list of valid numeric literals for output: in the standard\n       // \"C\" locale, this is \"-+xX0123456789abcdef0123456789ABCDEF\".\n       // This array contains the chars after having been passed\n       // through the current locale's ctype<_CharT>.widen().\n-      char_type                    \t_M_atoms_out[__num_base::_S_oend + 1];\n+      _CharT                    \t_M_atoms_out[__num_base::_S_oend + 1];\n \n       // A list of valid numeric literals for output: in the standard\n       // \"C\" locale, this is \"0123456789eEabcdfABCDF\"\n       // This array contains the chars after having been passed\n       // through the current locale's ctype<_CharT>.widen().\n-      char_type                    \t_M_atoms_in[__num_base::_S_iend + 1];\n+      _CharT                    \t_M_atoms_in[__num_base::_S_iend + 1];\n \n       bool\t\t\t\t_M_allocated;\n \n       __numpunct_cache(size_t __refs = 0) : locale::facet(__refs), \n       _M_grouping(NULL), _M_use_grouping(false), _M_truename(NULL), \n-      _M_falsename(NULL), _M_decimal_point(char_type()), \n-      _M_thousands_sep(char_type()), _M_allocated(false)\n+      _M_falsename(NULL), _M_decimal_point(_CharT()), \n+      _M_thousands_sep(_CharT()), _M_allocated(false)\n       { } \n \n       ~__numpunct_cache();"}, {"sha": "d41b8aeeaba811f662bc1a5538889b1dff647d22", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 49, "deletions": 25, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cde6384093dcf3f9f90babf65aea62ceb64f8755/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cde6384093dcf3f9f90babf65aea62ceb64f8755/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=cde6384093dcf3f9f90babf65aea62ceb64f8755", "patch": "@@ -89,18 +89,38 @@ namespace std\n   // Routine to access a cache for the facet.  If the cache didn't\n   // exist before, it gets constructed on the fly.\n   template<typename _Facet>\n-    const _Facet&\n-    __use_cache(const locale& __loc);\n-\n-  template<>\n-    const __numpunct_cache<char>&\n-    __use_cache(const locale& __loc);\n+    struct __use_cache\n+    {\n+      const _Facet*\n+      operator() (const locale& __loc) const;\n+    };\n \n-#ifdef _GLIBCXX_USE_WCHAR_T\n-  template<>\n-    const __numpunct_cache<wchar_t>&\n-    __use_cache(const locale& __loc);\n-#endif\n+  template<typename _CharT>\n+    struct __use_cache<__numpunct_cache<_CharT> >\n+    {\n+      const __numpunct_cache<_CharT>*\n+      operator() (const locale& __loc) const\n+      {\n+\tsize_t __i = numpunct<_CharT>::id._M_id();\n+\tconst locale::facet** __caches = __loc._M_impl->_M_caches;\n+\tif (!__caches[__i])\n+\t  {\n+\t    __numpunct_cache<_CharT>* __tmp;\n+\t    try\n+\t      {\n+\t\t__tmp = new __numpunct_cache<_CharT>;\n+\t\t__tmp->_M_cache(__loc);\n+\t      }\n+\t    catch(...)\n+\t      {\n+\t\tdelete __tmp;\n+\t\t__throw_exception_again;\n+\t      }\n+\t    __loc._M_impl->_M_install_cache(__tmp, __i);\n+\t  }\n+\treturn static_cast<const __numpunct_cache<_CharT>*>(__caches[__i]);\n+      }\n+    };\n \n   // Stage 1: Determine a conversion specifier.\n   template<typename _CharT, typename _InIter>\n@@ -785,9 +805,10 @@ namespace std\n \t\t     _ValueT __v) const\n       {\n \ttypedef typename numpunct<_CharT>::__cache_type  __cache_type;\n+\t__use_cache<__cache_type> __uc;\n \tconst locale& __loc = __io._M_getloc();\n-\tconst __cache_type& __lc = __use_cache<__cache_type>(__loc);\n-\tconst _CharT* __lit = __lc._M_atoms_out;\n+\tconst __cache_type* __lc = __uc(__loc);\n+\tconst _CharT* __lit = __lc->_M_atoms_out;\n \n  \t// Long enough to hold hex, dec, and octal representations.\n \tint __ilen = 4 * sizeof(_ValueT);\n@@ -801,13 +822,13 @@ namespace std\n \t\n \t// Add grouping, if necessary. \n \t_CharT* __cs2;\n-\tif (__lc._M_use_grouping)\n+\tif (__lc->_M_use_grouping)\n \t  {\n \t    // Grouping can add (almost) as many separators as the\n \t    // number of digits, but no more.\n \t    __cs2 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT) \n \t\t\t\t\t\t\t  * __len * 2));\n-\t    _M_group_int(__lc._M_grouping, __lc._M_thousands_sep, __io, \n+\t    _M_group_int(__lc->_M_grouping, __lc->_M_thousands_sep, __io, \n \t\t\t __cs2, __cs, __len);\n \t    __cs = __cs2;\n \t  }\n@@ -890,8 +911,9 @@ namespace std\n \t  __prec = static_cast<streamsize>(6);\n \n \ttypedef typename numpunct<_CharT>::__cache_type  __cache_type;\n+\t__use_cache<__cache_type> __uc;\n \tconst locale& __loc = __io._M_getloc();\n-\tconst __cache_type& __lc = __use_cache<__cache_type>(__loc);\n+\tconst __cache_type* __lc = __uc(__loc);\n \n \t// [22.2.2.2.2] Stage 1, numeric conversion to character.\n \tint __len;\n@@ -944,20 +966,20 @@ namespace std\n       \n       // Replace decimal point.\n       const _CharT __cdec = __ctype.widen('.');\n-      const _CharT __dec = __lc._M_decimal_point;\n+      const _CharT __dec = __lc->_M_decimal_point;\n       const _CharT* __p;\n       if (__p = char_traits<_CharT>::find(__ws, __len, __cdec))\n \t__ws[__p - __ws] = __dec;\n \n       // Add grouping, if necessary. \n       _CharT* __ws2;\n-      if (__lc._M_use_grouping)\n+      if (__lc->_M_use_grouping)\n \t{\n \t    // Grouping can add (almost) as many separators as the\n \t    // number of digits, but no more.\n \t    __ws2 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT) \n \t\t\t\t\t\t\t  * __len * 2));\n-\t    _M_group_float(__lc._M_grouping, __lc._M_thousands_sep, __p,\n+\t    _M_group_float(__lc->_M_grouping, __lc->_M_thousands_sep, __p,\n \t\t\t   __ws2, __ws, __len);\n \t    __ws = __ws2;\n \t}\n@@ -992,15 +1014,16 @@ namespace std\n       else\n         {\n \t  typedef typename numpunct<_CharT>::__cache_type  __cache_type;\n+\t  __use_cache<__cache_type> __uc;\n \t  const locale& __loc = __io._M_getloc();\n-\t  const __cache_type& __lc = __use_cache<__cache_type>(__loc);\n+\t  const __cache_type* __lc = __uc(__loc);\n \n \t  typedef basic_string<_CharT> \t__string_type;\n \t  __string_type __name;\n           if (__v)\n-\t    __name = __lc._M_truename;\n+\t    __name = __lc->_M_truename;\n           else\n-\t    __name = __lc._M_falsename;\n+\t    __name = __lc->_M_falsename;\n \n \t  const _CharT* __cs = __name.c_str();\n \t  int __len = __name.size();\n@@ -1339,7 +1362,8 @@ namespace std\n       // decimal digit, '\\0'. \n       const int __cs_size = numeric_limits<long double>::max_exponent10 + 5;\n       char* __cs = static_cast<char*>(__builtin_alloca(__cs_size));\n-      int __len = std::__convert_from_v(__cs, 0, \"%.01Lf\", __units, _S_c_locale);\n+      int __len = std::__convert_from_v(__cs, 0, \"%.01Lf\", __units, \n+\t\t\t\t\t_S_c_locale);\n #endif\n       _CharT* __ws = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT) \n \t\t\t\t\t\t\t   * __cs_size));\n@@ -2280,8 +2304,8 @@ namespace std\n     {\n       if (__last - __first > *__gbeg)\n         {\n-          __s = std::__add_grouping(__s,  __sep, \n-\t\t\t\t    (__gbeg + 1 == __gend ? __gbeg : __gbeg + 1),\n+\t  const bool __bump = __gbeg + 1 != __gend;\n+          __s = std::__add_grouping(__s,  __sep, __gbeg + __bump,\n \t\t\t\t    __gend, __first, __last - *__gbeg);\n           __first = __last - *__gbeg;\n           *__s++ = __sep;"}, {"sha": "0145a4830957cd6042fa620d24e7937101979c40", "filename": "libstdc++-v3/include/ext/pod_char_traits.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cde6384093dcf3f9f90babf65aea62ceb64f8755/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpod_char_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cde6384093dcf3f9f90babf65aea62ceb64f8755/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpod_char_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpod_char_traits.h?ref=cde6384093dcf3f9f90babf65aea62ceb64f8755", "patch": "@@ -98,7 +98,7 @@ namespace std\n       length(const char_type* __s)\n       { \n \tconst char_type* __p = __s; \n-\twhile (*__p) \n+\twhile (__p->value) \n \t  ++__p; \n \treturn (__p - __s); \n       }"}, {"sha": "43f831d9e7a6fbb6eed9ac2f65ecb8e990f6c8ad", "filename": "libstdc++-v3/src/locale.cc", "status": "modified", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cde6384093dcf3f9f90babf65aea62ceb64f8755/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cde6384093dcf3f9f90babf65aea62ceb64f8755/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc?ref=cde6384093dcf3f9f90babf65aea62ceb64f8755", "patch": "@@ -451,38 +451,6 @@ namespace std\n   locale::facet::\n   ~facet() { }\n \n-  template<>\n-    const __numpunct_cache<char>&\n-    __use_cache(const locale& __loc)\n-    {\n-      size_t __i = numpunct<char>::id._M_id();\n-      const locale::facet** __caches = __loc._M_impl->_M_caches;\n-      if (!__caches[__i])\n-\t{\n-\t  __numpunct_cache<char>* __tmp = new __numpunct_cache<char>;\n-\t  __tmp->_M_cache(__loc);\n-\t  __loc._M_impl->_M_install_cache(__tmp, __i);\n-\t}\n-      return static_cast<const __numpunct_cache<char>&>(*__caches[__i]);\n-    }\n-\n-#ifdef _GLIBCXX_USE_WCHAR_T\n-  template<>\n-    const __numpunct_cache<wchar_t>&\n-    __use_cache(const locale& __loc)\n-    {\n-      size_t __i = numpunct<wchar_t>::id._M_id();\n-      const locale::facet** __caches = __loc._M_impl->_M_caches;\n-      if (!__caches[__i])\n-\t{\n-\t  __numpunct_cache<wchar_t>* __tmp = new __numpunct_cache<wchar_t>;\n-\t  __tmp->_M_cache(__loc);\n-\t  __loc._M_impl->_M_install_cache(__tmp, __i);\n-\t}\n-      return static_cast<const __numpunct_cache<wchar_t>&>(*__caches[__i]);\n-    }\n-#endif\n-\n   // Definitions for static const data members of time_base.\n   template<> \n     const char*"}, {"sha": "002b0c47e377a5cae6711dc92e7bc3ae7f7217df", "filename": "libstdc++-v3/testsuite/22_locale/numpunct/members/char/cache_1.cc", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cde6384093dcf3f9f90babf65aea62ceb64f8755/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct%2Fmembers%2Fchar%2Fcache_1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cde6384093dcf3f9f90babf65aea62ceb64f8755/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct%2Fmembers%2Fchar%2Fcache_1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct%2Fmembers%2Fchar%2Fcache_1.cc?ref=cde6384093dcf3f9f90babf65aea62ceb64f8755", "patch": "@@ -0,0 +1,78 @@\n+// 2003-07-06  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <locale>\n+#include <sstream>\n+#include <ostream>\n+#include <testsuite_hooks.h>\n+\n+class numpunct_checked : public std::numpunct<char>\n+{\n+  typedef std::numpunct<char> base;\n+\n+public:\n+  explicit \n+  numpunct_checked(std::size_t refs = 0): base(refs) { }\n+\n+  string_type\n+  base_truename() const\n+  { return base::do_truename(); }\n+\n+protected:\n+  virtual string_type  \n+  do_truename() const\n+  { return base::do_truename() + \"st\"; }\n+};\n+\n+// Thwart locale caching strategies that incorrectly overwrite base\n+// class data.\n+void test01()\n+{\n+  using namespace std;\n+\n+  bool \t\ttest = true;\n+  const string \tbasestr(\"true\");\n+  const string \tderivedstr(\"truest\");\n+\n+  const locale \tloc(locale::classic(), new numpunct_checked);\t\n+  stringbuf \tsbuf;\n+  ostream \tos(&sbuf);\n+  os.setf(ios_base::boolalpha);\n+\n+  // Pre-cache sanity check.\n+  const numpunct<char>& np = use_facet<numpunct<char> >(loc);\n+  VERIFY( np.truename() == derivedstr );\n+  \n+  // Cache.\n+  os.imbue(loc);\n+  os << true;\n+  VERIFY( sbuf.str() == derivedstr );\n+\n+  // Post-cache sanity check, make sure that base class is still fine.\n+  VERIFY( np.truename() == derivedstr );\n+  const numpunct_checked& npd = static_cast<const numpunct_checked&>(np);\n+  VERIFY( npd.base_truename() == basestr );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "729e82a64bd1d820e20be37bba9e9ef3d482d781", "filename": "libstdc++-v3/testsuite/22_locale/numpunct/members/char/cache_2.cc", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cde6384093dcf3f9f90babf65aea62ceb64f8755/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct%2Fmembers%2Fchar%2Fcache_2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cde6384093dcf3f9f90babf65aea62ceb64f8755/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct%2Fmembers%2Fchar%2Fcache_2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct%2Fmembers%2Fchar%2Fcache_2.cc?ref=cde6384093dcf3f9f90babf65aea62ceb64f8755", "patch": "@@ -0,0 +1,90 @@\n+// 2003-07-06  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <locale>\n+#include <sstream>\n+#include <ostream>\n+#include <testsuite_hooks.h>\n+\n+class numpunct_checked : public std::numpunct<char>\n+{\n+  typedef std::numpunct<char> base;\n+\n+public:\n+  explicit \n+  numpunct_checked(std::size_t refs = 0): base(refs) { }\n+\n+  string_type\n+  base_truename() const\n+  { return base::do_truename(); }\n+\n+protected:\n+  virtual string_type  \n+  do_truename() const\n+  { return base::do_truename() + \"st\"; }\n+};\n+\n+// Changing caches deletes old cache, adds new one.\n+void test01()\n+{\n+  using namespace std;\n+\n+  bool \t\ttest = true;\n+  const string \tempty;\n+  const string \tbasestr(\"true\");\n+  const string \tderivedstr(\"truest\");\n+\n+  const locale \tloc(locale::classic(), new numpunct_checked);\t\n+  stringbuf \tsbuf;\n+  ostream \tos(&sbuf);\n+  os.setf(ios_base::boolalpha);\n+\n+  // Pre-cache sanity check.\n+  const numpunct<char>& np = use_facet<numpunct<char> >(loc);\n+  VERIFY( np.truename() == derivedstr );\n+  \n+  // Cache.\n+  os.imbue(loc);\n+  os << true;\n+  VERIFY( sbuf.str() == derivedstr );\n+\n+  // Re-cache.\n+  sbuf.str(empty);\n+  os.imbue(locale::classic());\n+  os << true;\n+  VERIFY( sbuf.str() == basestr );\n+\n+  // Cache new locale again.\n+  sbuf.str(empty);\n+  os.imbue(loc);\n+  os << true;\n+  VERIFY( sbuf.str() == derivedstr );\n+\n+  // Post-cache sanity check, make sure that base class is still fine.\n+  VERIFY( np.truename() == derivedstr );\n+  const numpunct_checked& npd = static_cast<const numpunct_checked&>(np);\n+  VERIFY( npd.base_truename() == basestr );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "c0cf534af7bbc6217ed4aa57d1baf8b4f6b026ac", "filename": "libstdc++-v3/testsuite/22_locale/numpunct/members/pod/1.cc", "status": "added", "additions": 134, "deletions": 0, "changes": 134, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cde6384093dcf3f9f90babf65aea62ceb64f8755/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct%2Fmembers%2Fpod%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cde6384093dcf3f9f90babf65aea62ceb64f8755/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct%2Fmembers%2Fpod%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct%2Fmembers%2Fpod%2F1.cc?ref=cde6384093dcf3f9f90babf65aea62ceb64f8755", "patch": "@@ -0,0 +1,134 @@\n+// 2003-07-09  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <locale>\n+#include <sstream>\n+#include <ostream>\n+#include <stdexcept>\n+#include <ext/pod_char_traits.h>\n+#include <testsuite_hooks.h>\n+\n+typedef unsigned short\t\t\t\t\tvalue_type;\n+typedef unsigned int\t\t\t\t\tint_type;\n+typedef __gnu_cxx::character<value_type, int_type>\tpodchar_type;\n+\n+// Member specializations for the existing facet classes.\n+// NB: This isn't especially portable. Perhaps a better way would be\n+// to just specialize all of numpunct and ctype.\n+namespace std\n+{\n+  template<>\n+    void\n+    numpunct<podchar_type>::_M_initialize_numpunct(__c_locale __cloc)\n+    {\n+      if (!_M_data)\n+\t_M_data = new __numpunct_cache<podchar_type>;\n+\n+      _M_data->_M_grouping = \"\";\n+      _M_data->_M_use_grouping = false;\n+\n+      _M_data->_M_decimal_point.value =  value_type('.');\n+      _M_data->_M_thousands_sep.value = value_type(',');\n+      \n+      for (size_t i = 0; i < __num_base::_S_oend; ++i)\n+\t{\n+\t  value_type v = __num_base::_S_atoms_out[i];\n+\t  _M_data->_M_atoms_out[i].value = v;\n+\t}\n+      _M_data->_M_atoms_out[__num_base::_S_oend] = podchar_type();\n+      \n+      for (size_t i = 0; i < __num_base::_S_iend; ++i)\n+\t_M_data->_M_atoms_in[i].value = value_type(__num_base::_S_atoms_in[i]);\n+      _M_data->_M_atoms_in[__num_base::_S_iend] = podchar_type();\n+\n+      // \"true\"\n+      podchar_type* __truename = new podchar_type[4 + 1];\n+      __truename[0].value = value_type('t');\n+      __truename[1].value = value_type('r');\n+      __truename[2].value = value_type('u');\n+      __truename[3].value = value_type('e');\n+      __truename[4] = podchar_type();\n+      _M_data->_M_truename = __truename;\n+\n+      // \"false\"\n+      podchar_type* __falsename = new podchar_type[5 + 1];\n+      __falsename[0].value = value_type('f');\n+      __falsename[1].value = value_type('a');\n+      __falsename[2].value = value_type('l');\n+      __falsename[3].value = value_type('s');\n+      __falsename[4].value = value_type('e');\n+      __falsename[5] = podchar_type();\n+      _M_data->_M_falsename = __falsename;\n+    }\n+\n+  template<>\n+    numpunct<podchar_type>::~numpunct()\n+    { delete _M_data; }\n+}\n+\n+// Check for numpunct and ctype dependencies. Make sure that numpunct\n+// can be created without ctype.\n+void test01()\n+{\n+  using namespace std;\n+  typedef numpunct<podchar_type>::string_type \tstring_type;\n+  typedef basic_stringbuf<podchar_type> \tstringbuf_type;\n+  typedef basic_ostream<podchar_type> \t\tostream_type;\n+  \n+  bool \t\ttest = true;\n+\n+  // Pre-cache sanity check.\n+  const locale \tloc(locale::classic(), new numpunct<podchar_type>);\n+  const numpunct<podchar_type>& np = use_facet<numpunct<podchar_type> >(loc);\n+\n+  podchar_type dp = np.decimal_point();\n+  podchar_type ts = np.thousands_sep();\n+  string g = np.grouping();\n+  string_type strue = np.truename();\n+  string_type sfalse = np.falsename();\n+\n+  podchar_type basedp = { value_type('.') };\n+  podchar_type basets = { value_type(',') };\n+\n+  string_type basetrue(4, podchar_type());\n+  basetrue[0].value = value_type('t');\n+  basetrue[1].value = value_type('r');\n+  basetrue[2].value = value_type('u');\n+  basetrue[3].value = value_type('e');\n+\n+  string_type basefalse(5, podchar_type());\n+  basefalse[0].value = value_type('f');\n+  basefalse[1].value = value_type('a');\n+  basefalse[2].value = value_type('l');\n+  basefalse[3].value = value_type('s');\n+  basefalse[4].value = value_type('e');\n+\n+  VERIFY( char_traits<podchar_type>::eq(dp, basedp) );\n+  VERIFY( char_traits<podchar_type>::eq(ts, basets) );\n+  VERIFY( g == \"\" );\n+  VERIFY( strue == basetrue );\n+  VERIFY( sfalse == basefalse );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "32b26eda0cdcc4563394bcc244ecacce0c35bff2", "filename": "libstdc++-v3/testsuite/22_locale/numpunct/members/pod/2.cc", "status": "added", "additions": 267, "deletions": 0, "changes": 267, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cde6384093dcf3f9f90babf65aea62ceb64f8755/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct%2Fmembers%2Fpod%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cde6384093dcf3f9f90babf65aea62ceb64f8755/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct%2Fmembers%2Fpod%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct%2Fmembers%2Fpod%2F2.cc?ref=cde6384093dcf3f9f90babf65aea62ceb64f8755", "patch": "@@ -0,0 +1,267 @@\n+// 2003-07-09  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <locale>\n+#include <sstream>\n+#include <ostream>\n+#include <stdexcept>\n+#include <ext/pod_char_traits.h>\n+#include <testsuite_hooks.h>\n+\n+typedef unsigned short\t\t\t\t\tvalue_type;\n+typedef unsigned int\t\t\t\t\tint_type;\n+typedef __gnu_cxx::character<value_type, int_type>\tpodchar_type;\n+\n+// Member specializations for the existing facet classes.\n+// NB: This isn't especially portable. Perhaps a better way would be\n+// to just specialize all of numpunct and ctype.\n+namespace std\n+{\n+  template<>\n+    bool \n+    ctype<podchar_type>::\n+    do_is(mask __m, char_type __c) const { return true; }\n+\n+  template<>\n+    const podchar_type*\n+    ctype<podchar_type>::\n+    do_is(const char_type* __lo, const char_type* __hi, mask* __vec) const\n+    { return __lo; }\n+\n+  template<>\n+    const podchar_type*\n+    ctype<podchar_type>::\n+    do_scan_is(mask __m, const char_type* __lo, const char_type* __hi) const\n+    { return __lo; }\n+\n+  template<>\n+    const podchar_type*\n+    ctype<podchar_type>::\n+    do_scan_not(mask __m, const char_type* __lo, const char_type* __hi) const\n+    { return __lo; }\n+\n+  template<>\n+    podchar_type \n+    ctype<podchar_type>::\n+    do_toupper(char_type __c) const\n+    { return __c; }\n+\n+  template<>\n+    const podchar_type*\n+    ctype<podchar_type>::\n+    do_toupper(char_type* __lo, const char_type* __hi) const\n+    { return __hi; }\n+\n+  template<>\n+    podchar_type \n+    ctype<podchar_type>::\n+    do_tolower(char_type __c) const\n+    { return __c; }\n+\n+  template<>\n+    const podchar_type*\n+    ctype<podchar_type>::\n+    do_tolower(char_type* __lo, const char_type* __hi) const\n+    { return __hi; }\n+\n+  template<>\n+    podchar_type\n+    ctype<podchar_type>::\n+    do_widen(char __c) const\n+    { \n+      char_type ret = { value_type(__c) };\n+      return ret;\n+    }\n+\n+  template<>\n+    const char*\n+    ctype<podchar_type>::\n+    do_widen(const char* __lo, const char* __hi, char_type* __dest) const\n+    {\n+      while (__lo < __hi)\n+\t{\n+\t  *__dest = this->do_widen(*__lo);\n+\t  ++__lo;\n+\t  ++__dest;\n+\t}\n+      return __hi;\n+    }\n+\n+  template<>\n+    char\n+    ctype<podchar_type>::\n+    do_narrow(char_type __wc, char) const\n+    { return static_cast<char>(__wc.value); }\n+\n+  template<>\n+    const podchar_type*\n+    ctype<podchar_type>::\n+    do_narrow(const podchar_type* __lo, const podchar_type* __hi, \n+\t      char __dfault, char* __dest) const\n+    {\n+      while (__lo < __hi)\n+\t{\n+\t  *__dest = this->do_narrow(*__lo, char());\n+\t  ++__lo;\n+\t  ++__dest;\n+\t}\n+      return __hi;\n+    }\n+\n+  template<>\n+    ctype<podchar_type>::~ctype() { }\n+\n+  template<>\n+    void\n+    numpunct<podchar_type>::_M_initialize_numpunct(__c_locale __cloc)\n+    {\n+      if (!_M_data)\n+\t_M_data = new __numpunct_cache<podchar_type>;\n+\n+      _M_data->_M_grouping = \"\";\n+      _M_data->_M_use_grouping = false;\n+\n+      _M_data->_M_decimal_point.value =  value_type('.');\n+      _M_data->_M_thousands_sep.value = value_type(',');\n+      \n+      for (size_t i = 0; i < __num_base::_S_oend; ++i)\n+\t{\n+\t  value_type v = __num_base::_S_atoms_out[i];\n+\t  _M_data->_M_atoms_out[i].value = v;\n+\t}\n+      _M_data->_M_atoms_out[__num_base::_S_oend] = podchar_type();\n+      \n+      for (size_t i = 0; i < __num_base::_S_iend; ++i)\n+\t_M_data->_M_atoms_in[i].value = value_type(__num_base::_S_atoms_in[i]);\n+      _M_data->_M_atoms_in[__num_base::_S_iend] = podchar_type();\n+\n+      // \"true\"\n+      podchar_type* __truename = new podchar_type[4 + 1];\n+      __truename[0].value = value_type('t');\n+      __truename[1].value = value_type('r');\n+      __truename[2].value = value_type('u');\n+      __truename[3].value = value_type('e');\n+      __truename[4] = podchar_type();\n+      _M_data->_M_truename = __truename;\n+\n+      // \"false\"\n+      podchar_type* __falsename = new podchar_type[5 + 1];\n+      __falsename[0].value = value_type('f');\n+      __falsename[1].value = value_type('a');\n+      __falsename[2].value = value_type('l');\n+      __falsename[3].value = value_type('s');\n+      __falsename[4].value = value_type('e');\n+      __falsename[5] = podchar_type();\n+      _M_data->_M_falsename = __falsename;\n+    }\n+\n+  template<>\n+    numpunct<podchar_type>::~numpunct()\n+    { delete _M_data; }\n+}\n+\n+// Check for numpunct and ctype dependencies. Make sure that numpunct\n+// can be created without ctype.\n+void test01()\n+{\n+  using namespace std;\n+  typedef numpunct<podchar_type>::string_type \tstring_type;\n+  typedef basic_ostringstream<podchar_type> \t\tostream_type;\n+  \n+  bool \t\ttest = true;\n+\n+  // Test formatted output.\n+  ostream_type \t\tos;\n+  const locale \tloc = locale::classic();\n+  os.imbue(loc);\n+  os.setf(ios_base::boolalpha);\n+  os.exceptions(ios_base::badbit);\n+\n+  // 1: fail, no num_put.\n+  try\n+    {\n+      // Calls to num_put.put will fail, as there's no num_put facet.\n+      os << true;\n+      test = false;\n+    }\n+  catch(const bad_cast& obj)\n+    { }\n+  catch(...)\n+    { test = false; }\n+  VERIFY( test );\n+\n+  // 2: fail, no ctype\n+  const locale \tloc2(loc, new num_put<podchar_type>);\n+  os.clear();\n+  os.imbue(loc2);\n+  try\n+    {\n+      // Calls to ctype.widen will fail, as there's no ctype facet.\n+      os << true;\n+      test = false;\n+    }\n+  catch(const bad_cast& obj)\n+    { }\n+  catch(...)\n+    { test = false; }\n+  VERIFY( test );\n+\n+  // 3: fail, no numpunct\n+  const locale \tloc3(loc, new ctype<podchar_type>);\n+  os.clear();\n+  os.imbue(loc3);\n+  try\n+    {\n+      // Formatted output fails as no numpunct.\n+      os << true;\n+      test = false;\n+    }\n+  catch(const bad_cast& obj)\n+    { }\n+  catch(...)\n+    { test = false; }\n+  VERIFY( test );\n+\n+  // 4: works.\n+  const locale \tloc4(loc3, new numpunct<podchar_type>);\n+  os.clear();\n+  os.imbue(loc4);\n+  try\n+    {\n+      os << long(500);\n+      string_type s = os.str();\n+      VERIFY( s.length() == 3 );\n+\n+      VERIFY( os.narrow(s[0], char()) == '5' );\n+      VERIFY( os.narrow(s[1], char()) == '0' );\n+      VERIFY( os.narrow(s[2], char()) == '0' );\n+    }\n+  catch(const bad_cast& obj)\n+    { test = false; }\n+  catch(...)\n+    { test = false; }\n+  VERIFY( test );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "0b41e963f50ce014b9b335498a7a08f824075509", "filename": "libstdc++-v3/testsuite/22_locale/numpunct/members/wchar_t/cache_1.cc", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cde6384093dcf3f9f90babf65aea62ceb64f8755/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct%2Fmembers%2Fwchar_t%2Fcache_1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cde6384093dcf3f9f90babf65aea62ceb64f8755/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct%2Fmembers%2Fwchar_t%2Fcache_1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct%2Fmembers%2Fwchar_t%2Fcache_1.cc?ref=cde6384093dcf3f9f90babf65aea62ceb64f8755", "patch": "@@ -0,0 +1,78 @@\n+// 2003-07-06  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <locale>\n+#include <sstream>\n+#include <ostream>\n+#include <testsuite_hooks.h>\n+\n+class numpunct_checked : public std::numpunct<wchar_t>\n+{\n+  typedef std::numpunct<wchar_t> base;\n+\n+public:\n+  explicit \n+  numpunct_checked(std::size_t refs = 0): base(refs) { }\n+\n+  string_type\n+  base_truename() const\n+  { return base::do_truename(); }\n+\n+protected:\n+  virtual string_type  \n+  do_truename() const\n+  { return base::do_truename() + L\"st\"; }\n+};\n+\n+// Thwart locale caching strategies that incorrectly overwrite base\n+// class data.\n+void test01()\n+{\n+  using namespace std;\n+\n+  bool \t\ttest = true;\n+  const wstring \tbasestr(L\"true\");\n+  const wstring \tderivedstr(L\"truest\");\n+\n+  const locale \tloc(locale::classic(), new numpunct_checked);\t\n+  wstringbuf \tsbuf;\n+  wostream \tos(&sbuf);\n+  os.setf(ios_base::boolalpha);\n+\n+  // Pre-cache sanity check.\n+  const numpunct<wchar_t>& np = use_facet<numpunct<wchar_t> >(loc);\n+  VERIFY( np.truename() == derivedstr );\n+  \n+  // Cache.\n+  os.imbue(loc);\n+  os << true;\n+  VERIFY( sbuf.str() == derivedstr );\n+\n+  // Post-cache sanity check, make sure that base class is still fine.\n+  VERIFY( np.truename() == derivedstr );\n+  const numpunct_checked& npd = static_cast<const numpunct_checked&>(np);\n+  VERIFY( npd.base_truename() == basestr );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "9a3c4872e5c2a2ff30638c9ab17734ff97b7c65a", "filename": "libstdc++-v3/testsuite/22_locale/numpunct/members/wchar_t/cache_2.cc", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cde6384093dcf3f9f90babf65aea62ceb64f8755/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct%2Fmembers%2Fwchar_t%2Fcache_2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cde6384093dcf3f9f90babf65aea62ceb64f8755/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct%2Fmembers%2Fwchar_t%2Fcache_2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct%2Fmembers%2Fwchar_t%2Fcache_2.cc?ref=cde6384093dcf3f9f90babf65aea62ceb64f8755", "patch": "@@ -0,0 +1,90 @@\n+// 2003-07-06  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <locale>\n+#include <sstream>\n+#include <ostream>\n+#include <testsuite_hooks.h>\n+\n+class numpunct_checked : public std::numpunct<wchar_t>\n+{\n+  typedef std::numpunct<wchar_t> base;\n+\n+public:\n+  explicit \n+  numpunct_checked(std::size_t refs = 0): base(refs) { }\n+\n+  string_type\n+  base_truename() const\n+  { return base::do_truename(); }\n+\n+protected:\n+  virtual string_type  \n+  do_truename() const\n+  { return base::do_truename() + L\"st\"; }\n+};\n+\n+// Changing caches deletes old cache, adds new one.\n+void test01()\n+{\n+  using namespace std;\n+\n+  bool \t\ttest = true;\n+  const wstring \tempty;\n+  const wstring \tbasestr(L\"true\");\n+  const wstring \tderivedstr(L\"truest\");\n+\n+  const locale \tloc(locale::classic(), new numpunct_checked);\t\n+  wstringbuf \tsbuf;\n+  wostream \tos(&sbuf);\n+  os.setf(ios_base::boolalpha);\n+\n+  // Pre-cache sanity check.\n+  const numpunct<wchar_t>& np = use_facet<numpunct<wchar_t> >(loc);\n+  VERIFY( np.truename() == derivedstr );\n+  \n+  // Cache.\n+  os.imbue(loc);\n+  os << true;\n+  VERIFY( sbuf.str() == derivedstr );\n+\n+  // Re-cache.\n+  sbuf.str(empty);\n+  os.imbue(locale::classic());\n+  os << true;\n+  VERIFY( sbuf.str() == basestr );\n+\n+  // Cache new locale again.\n+  sbuf.str(empty);\n+  os.imbue(loc);\n+  os << true;\n+  VERIFY( sbuf.str() == derivedstr );\n+\n+  // Post-cache sanity check, make sure that base class is still fine.\n+  VERIFY( np.truename() == derivedstr );\n+  const numpunct_checked& npd = static_cast<const numpunct_checked&>(np);\n+  VERIFY( npd.base_truename() == basestr );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "5de881aaa9922e8873c1915db1e47e42d64c65cb", "filename": "libstdc++-v3/testsuite/testsuite_hooks.h", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cde6384093dcf3f9f90babf65aea62ceb64f8755/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_hooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cde6384093dcf3f9f90babf65aea62ceb64f8755/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_hooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_hooks.h?ref=cde6384093dcf3f9f90babf65aea62ceb64f8755", "patch": "@@ -127,16 +127,6 @@ namespace __gnu_cxx_test\n     int i;\n   };\n   \n-  struct pod_unsigned_int\n-  {\n-    unsigned int i;\n-  };\n-  \n-  struct pod_long\n-  {\n-    unsigned long i;\n-  };\n-  \n   struct state\n   {\n     unsigned long l;"}]}