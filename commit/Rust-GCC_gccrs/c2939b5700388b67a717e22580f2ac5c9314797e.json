{"sha": "c2939b5700388b67a717e22580f2ac5c9314797e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzI5MzliNTcwMDM4OGI2N2E3MTdlMjI1ODBmMmFjNWM5MzE0Nzk3ZQ==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@cygnus.com", "date": "2000-02-10T21:00:09Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "2000-02-10T21:00:09Z"}, "message": "Fix for ia64 setjmp miscompilation problem.\n\n\t* calls.c (expand_call): When emitting a NOTE_INSN_SETJMP, search for\n\tthe CALL_INSN, and emit the note immediately after it.\n\nFrom-SVN: r31902", "tree": {"sha": "cd7e01baf94c3ea9f1ce4863348b648f9540e2e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cd7e01baf94c3ea9f1ce4863348b648f9540e2e5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c2939b5700388b67a717e22580f2ac5c9314797e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2939b5700388b67a717e22580f2ac5c9314797e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2939b5700388b67a717e22580f2ac5c9314797e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2939b5700388b67a717e22580f2ac5c9314797e/comments", "author": null, "committer": null, "parents": [{"sha": "aaf0766e9f897b2fbce053083d85cb739cb509d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aaf0766e9f897b2fbce053083d85cb739cb509d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aaf0766e9f897b2fbce053083d85cb739cb509d2"}], "stats": {"total": 26, "additions": 24, "deletions": 2}, "files": [{"sha": "ee832025f3d2705bcb0b80c6da37696f649804a3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2939b5700388b67a717e22580f2ac5c9314797e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2939b5700388b67a717e22580f2ac5c9314797e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c2939b5700388b67a717e22580f2ac5c9314797e", "patch": "@@ -1,3 +1,8 @@\n+Thu Feb 10 12:56:47 2000  Jim Wilson  <wilson@cygnus.com>\n+\n+\t* calls.c (expand_call): When emitting a NOTE_INSN_SETJMP, search for\n+\tthe CALL_INSN, and emit the note immediately after it.\n+\n 2000-02-10  Nick Clifton  <nickc@cygnus.com>\n \n \t* config/arm/thumb.md (epilogue): Include a (return) in the"}, {"sha": "071a89e4b4e8c6e5a91522a45e37c1c201482b0a", "filename": "gcc/calls.c", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2939b5700388b67a717e22580f2ac5c9314797e/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2939b5700388b67a717e22580f2ac5c9314797e/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=c2939b5700388b67a717e22580f2ac5c9314797e", "patch": "@@ -1602,6 +1602,7 @@ expand_call (exp, target, ignore)\n      or 0 if the function is computed (not known by name).  */\n   tree fndecl = 0;\n   char *name = 0;\n+  rtx before_call;\n \n   /* Register in which non-BLKmode value will be returned,\n      or 0 if no value or if value is BLKmode.  */\n@@ -1840,8 +1841,9 @@ expand_call (exp, target, ignore)\n   if (is_integrable)\n     {\n       rtx temp;\n+\n #ifdef ACCUMULATE_OUTGOING_ARGS\n-      rtx before_call = get_last_insn ();\n+      before_call = get_last_insn ();\n #endif\n \n       temp = expand_inline_function (fndecl, actparms, target,\n@@ -2383,6 +2385,10 @@ expand_call (exp, target, ignore)\n   /* Perform postincrements before actually calling the function.  */\n   emit_queue ();\n \n+  /* Save a pointer to the last insn before the call, so that we can\n+     later safely search backwards to find the CALL_INSN.  */\n+  before_call = get_last_insn ();\n+\n   /* All arguments and registers used for the call must be set up by now!  */\n \n   /* Generate the actual call instruction.  */\n@@ -2463,7 +2469,18 @@ expand_call (exp, target, ignore)\n \n   if (returns_twice)\n     {\n-      emit_note (name, NOTE_INSN_SETJMP);\n+      /* The NOTE_INSN_SETJMP note must be emitted immediately after the\n+\t CALL_INSN.  Some ports emit more than just a CALL_INSN above, so\n+\t we must search for it here.  */\n+      rtx last = get_last_insn ();\n+      while (GET_CODE (last) != CALL_INSN)\n+\t{\n+\t  last = PREV_INSN (last);\n+\t  /* There was no CALL_INSN?  */\n+\t  if (last == before_call)\n+\t    abort ();\n+\t}\n+      emit_note_after (NOTE_INSN_SETJMP, last);\n       current_function_calls_setjmp = 1;\n     }\n "}]}