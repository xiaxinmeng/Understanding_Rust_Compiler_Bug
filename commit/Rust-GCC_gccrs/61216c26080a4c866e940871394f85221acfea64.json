{"sha": "61216c26080a4c866e940871394f85221acfea64", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjEyMTZjMjYwODBhNGM4NjZlOTQwODcxMzk0Zjg1MjIxYWNmZWE2NA==", "commit": {"author": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2013-05-14T17:20:08Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2013-05-14T17:20:08Z"}, "message": "rtl.h (next_label, [...]): Remove prototypes.\n\n\n\t* rtl.h (next_label, skip_consecutive_labels, link_cc0_insns):\n\tRemove prototypes.\n\t* emit-rtl.c (next_label): Remove unused function.\n\t(skip_consecutive_labels, link_cc0_insns): Move to ...\n\t* reorg.c (skip_consecutive_labels, link_cc0_insns): ... here, the\n\tonly place where these functions are used, and make them static.\n\nFrom-SVN: r198894", "tree": {"sha": "cf8b9fad4b8b04ffe81b663036d85cc21724f3dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cf8b9fad4b8b04ffe81b663036d85cc21724f3dd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/61216c26080a4c866e940871394f85221acfea64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61216c26080a4c866e940871394f85221acfea64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61216c26080a4c866e940871394f85221acfea64", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61216c26080a4c866e940871394f85221acfea64/comments", "author": null, "committer": null, "parents": [{"sha": "418d1b87fb06b2df9aecb5b8b6abf1f0a1919a88", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/418d1b87fb06b2df9aecb5b8b6abf1f0a1919a88", "html_url": "https://github.com/Rust-GCC/gccrs/commit/418d1b87fb06b2df9aecb5b8b6abf1f0a1919a88"}], "stats": {"total": 98, "additions": 47, "deletions": 51}, "files": [{"sha": "61008cf956695ce6b6f8631ecb1e878543c61fc1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61216c26080a4c866e940871394f85221acfea64/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61216c26080a4c866e940871394f85221acfea64/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=61216c26080a4c866e940871394f85221acfea64", "patch": "@@ -1,3 +1,12 @@\n+2013-05-14  Steven Bosscher  <steven@gcc.gnu.org>\n+\n+\t* rtl.h (next_label, skip_consecutive_labels, link_cc0_insns):\n+\tRemove prototypes.\n+\t* emit-rtl.c (next_label): Remove unused function.\n+\t(skip_consecutive_labels, link_cc0_insns): Move to ...\n+\t* reorg.c (skip_consecutive_labels, link_cc0_insns): ... here, the\n+\tonly place where these functions are used, and make them static.\n+\n 2013-05-14  Marc Glisse  <marc.glisse@inria.fr>\n \n \t* fold-const.c (fold_negate_expr): Handle vectors."}, {"sha": "fc56776f9fac169e53230c2df39c1c38c871a552", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 0, "deletions": 48, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61216c26080a4c866e940871394f85221acfea64/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61216c26080a4c866e940871394f85221acfea64/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=61216c26080a4c866e940871394f85221acfea64", "patch": "@@ -3332,56 +3332,8 @@ prev_active_insn (rtx insn)\n \n   return insn;\n }\n-\n-/* Return the next CODE_LABEL after the insn INSN, or 0 if there is none.  */\n-\n-rtx\n-next_label (rtx insn)\n-{\n-  while (insn)\n-    {\n-      insn = NEXT_INSN (insn);\n-      if (insn == 0 || LABEL_P (insn))\n-\tbreak;\n-    }\n-\n-  return insn;\n-}\n-\n-/* Return the last label to mark the same position as LABEL.  Return LABEL\n-   itself if it is null or any return rtx.  */\n-\n-rtx\n-skip_consecutive_labels (rtx label)\n-{\n-  rtx insn;\n-\n-  if (label && ANY_RETURN_P (label))\n-    return label;\n-\n-  for (insn = label; insn != 0 && !INSN_P (insn); insn = NEXT_INSN (insn))\n-    if (LABEL_P (insn))\n-      label = insn;\n-\n-  return label;\n-}\n \f\n #ifdef HAVE_cc0\n-/* INSN uses CC0 and is being moved into a delay slot.  Set up REG_CC_SETTER\n-   and REG_CC_USER notes so we can find it.  */\n-\n-void\n-link_cc0_insns (rtx insn)\n-{\n-  rtx user = next_nonnote_insn (insn);\n-\n-  if (NONJUMP_INSN_P (user) && GET_CODE (PATTERN (user)) == SEQUENCE)\n-    user = XVECEXP (PATTERN (user), 0, 0);\n-\n-  add_reg_note (user, REG_CC_SETTER, insn);\n-  add_reg_note (insn, REG_CC_USER, user);\n-}\n-\n /* Return the next insn that uses CC0 after INSN, which is assumed to\n    set it.  This is the inverse of prev_cc0_setter (i.e., prev_cc0_setter\n    applied to the result of this function should yield INSN)."}, {"sha": "17ef35672b16062af8593a2b93e8933b66736d73", "filename": "gcc/reorg.c", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61216c26080a4c866e940871394f85221acfea64/gcc%2Freorg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61216c26080a4c866e940871394f85221acfea64/gcc%2Freorg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freorg.c?ref=61216c26080a4c866e940871394f85221acfea64", "patch": "@@ -134,6 +134,44 @@ along with GCC; see the file COPYING3.  If not see\n #define eligible_for_annul_false(INSN, SLOTS, TRIAL, FLAGS) 0\n #endif\n \n+\f\n+/* First, some functions that were used before GCC got a control flow graph.\n+   These functions are now only used here in reorg.c, and have therefore\n+   been moved here to avoid inadvertent misuse elsewhere in the compiler.  */\n+\n+/* Return the last label to mark the same position as LABEL.  Return LABEL\n+   itself if it is null or any return rtx.  */\n+\n+static rtx\n+skip_consecutive_labels (rtx label)\n+{\n+  rtx insn;\n+\n+  if (label && ANY_RETURN_P (label))\n+    return label;\n+\n+  for (insn = label; insn != 0 && !INSN_P (insn); insn = NEXT_INSN (insn))\n+    if (LABEL_P (insn))\n+      label = insn;\n+\n+  return label;\n+}\n+\n+/* INSN uses CC0 and is being moved into a delay slot.  Set up REG_CC_SETTER\n+   and REG_CC_USER notes so we can find it.  */\n+\n+static void\n+link_cc0_insns (rtx insn)\n+{\n+  rtx user = next_nonnote_insn (insn);\n+\n+  if (NONJUMP_INSN_P (user) && GET_CODE (PATTERN (user)) == SEQUENCE)\n+    user = XVECEXP (PATTERN (user), 0, 0);\n+\n+  add_reg_note (user, REG_CC_SETTER, insn);\n+  add_reg_note (insn, REG_CC_USER, user);\n+}\n+\f\n /* Insns which have delay slots that have not yet been filled.  */\n \n static struct obstack unfilled_slots_obstack;"}, {"sha": "554da54fc6ea33726418aa1ed0acd29501200cec", "filename": "gcc/rtl.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61216c26080a4c866e940871394f85221acfea64/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61216c26080a4c866e940871394f85221acfea64/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=61216c26080a4c866e940871394f85221acfea64", "patch": "@@ -1912,8 +1912,6 @@ extern rtx next_real_insn (rtx);\n extern rtx prev_active_insn (rtx);\n extern rtx next_active_insn (rtx);\n extern int active_insn_p (const_rtx);\n-extern rtx next_label (rtx);\n-extern rtx skip_consecutive_labels (rtx);\n extern rtx next_cc0_user (rtx);\n extern rtx prev_cc0_setter (rtx);\n \n@@ -2551,7 +2549,6 @@ extern unsigned int unshare_all_rtl (void);\n extern void unshare_all_rtl_again (rtx);\n extern void unshare_all_rtl_in_chain (rtx);\n extern void verify_rtl_sharing (void);\n-extern void link_cc0_insns (rtx);\n extern void add_insn (rtx);\n extern void add_insn_before (rtx, rtx, basic_block);\n extern void add_insn_after (rtx, rtx, basic_block);"}]}