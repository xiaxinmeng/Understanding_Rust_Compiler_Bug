{"sha": "19ce9cf1b8f0f1808500580fdd0fd1db00354df3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTljZTljZjFiOGYwZjE4MDg1MDA1ODBmZGQwZmQxZGIwMDM1NGRmMw==", "commit": {"author": {"name": "Paul Koning", "email": "ni1d@arrl.net", "date": "2010-10-21T19:39:30Z"}, "committer": {"name": "Paul Koning", "email": "pkoning@gcc.gnu.org", "date": "2010-10-21T19:39:30Z"}, "message": "pdp11-protos.md (arith_operand, [...]): Delete\n\n* config/pdp11/pdp11-protos.md (arith_operand,\nconst_immediate_operand, expand_shift_operand,\nimmediate15_operand): Delete\n* config/pdp11/pdp11.c: Ditto.\n* config/pdp11/pdp11.h (REG_CLASS_FROM_LETTER,\nCONST_OK_FOR_LETTER_P, CONST_DOUBLE_OK_FOR_LETTER_P,\nEXTRA_CONSTRAINT): Delete.\n* config/pdp11/pdp11.md (various): Use standard constraints\ninstead of removed ones.\n* config/pdp11/constraints.md: New file.\n* config/pdp11/predicates.md: New file.\n\nFrom-SVN: r165784", "tree": {"sha": "8104fc631e1f5f8f4c6c62cf75196d766b5df41c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8104fc631e1f5f8f4c6c62cf75196d766b5df41c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/19ce9cf1b8f0f1808500580fdd0fd1db00354df3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19ce9cf1b8f0f1808500580fdd0fd1db00354df3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19ce9cf1b8f0f1808500580fdd0fd1db00354df3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19ce9cf1b8f0f1808500580fdd0fd1db00354df3/comments", "author": null, "committer": null, "parents": [{"sha": "4fcf718a6127fc70a3d39011b1c98d829c5fc2df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fcf718a6127fc70a3d39011b1c98d829c5fc2df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4fcf718a6127fc70a3d39011b1c98d829c5fc2df"}], "stats": {"total": 236, "additions": 139, "deletions": 97}, "files": [{"sha": "3c1b8c54220cd258d3f6d2f1deff861f03e4fa45", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19ce9cf1b8f0f1808500580fdd0fd1db00354df3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19ce9cf1b8f0f1808500580fdd0fd1db00354df3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=19ce9cf1b8f0f1808500580fdd0fd1db00354df3", "patch": "@@ -1,3 +1,17 @@\n+2010-10-21  Paul Koning  <ni1d@arrl.net>\n+\n+\t* config/pdp11/pdp11-protos.md (arith_operand,\n+\tconst_immediate_operand, expand_shift_operand,\n+\timmediate15_operand): Delete\n+\t* config/pdp11/pdp11.c: Ditto.\n+\t* config/pdp11/pdp11.h (REG_CLASS_FROM_LETTER,\n+\tCONST_OK_FOR_LETTER_P, CONST_DOUBLE_OK_FOR_LETTER_P,\n+\tEXTRA_CONSTRAINT): Delete.\n+\t* config/pdp11/pdp11.md (various): Use standard constraints\n+\tinstead of removed ones.\n+\t* config/pdp11/constraints.md: New file.\n+\t* config/pdp11/predicates.md: New file.\n+\n 2010-10-21  Bingfeng Mei  <bmei@broadcom.com>\n \n \tPR c/45834"}, {"sha": "6e5a5798eccd3d0cb01acba8cf71fe0cd568fb60", "filename": "gcc/config/pdp11/constraints.md", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19ce9cf1b8f0f1808500580fdd0fd1db00354df3/gcc%2Fconfig%2Fpdp11%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19ce9cf1b8f0f1808500580fdd0fd1db00354df3/gcc%2Fconfig%2Fpdp11%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fconstraints.md?ref=19ce9cf1b8f0f1808500580fdd0fd1db00354df3", "patch": "@@ -0,0 +1,81 @@\n+;;- Constraint definitions for the pdp11 for GNU C compiler\n+;; Copyright (C) 2010 Free Software Foundation, Inc.\n+;; Contributed by Michael K. Gschwind (mike@vlsivie.tuwien.ac.at).\n+\n+;; This file is part of GCC.\n+\n+;; GCC is free software; you can redistribute it and/or modify\n+;; it under the terms of the GNU General Public License as published by\n+;; the Free Software Foundation; either version 3, or (at your option)\n+;; any later version.\n+\n+;; GCC is distributed in the hope that it will be useful,\n+;; but WITHOUT ANY WARRANTY; without even the implied warranty of\n+;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+;; GNU General Public License for more details.\n+\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING3.  If not see\n+;; <http://www.gnu.org/licenses/>.\n+\n+(define_register_constraint \"f\" \"FPU_REGS\"\n+  \"Any FPU register\")\n+\n+(define_register_constraint \"a\" \"LOAD_FPU_REGS\"\n+  \"FPU register that can be directly loaded from memory\")\n+\n+(define_register_constraint \"d\" \"MUL_REGS\"\n+  \"General register that can be used for 16-bit multiply (odd numbered)\")\n+\n+(define_constraint \"I\"\n+  \"Integer constant that fits in 16 bits unsigned\"\n+  (and (match_code \"const_int\")\n+       (match_test \"(ival & 0xffff0000) == 0\")))\n+\n+(define_constraint \"J\"\n+  \"Integer constant whose low 16 bits are zero\"\n+  (and (match_code \"const_int\")\n+       (match_test \"(ival & 0xffff) == 0\")))\n+\n+(define_constraint \"K\"\n+  \"Integer constant whose lower and upper 16 bit half are both non-zero\"\n+  (and (match_code \"const_int\")\n+       (match_test \"(ival & 0xffff) != 0 && (ival & 0xffff0000) != 0\")))\n+\n+(define_constraint \"L\"\n+  \"Integer constant 1\"\n+  (and (match_code \"const_int\")\n+       (match_test \"ival == 1\")))\n+\n+(define_constraint \"M\"\n+  \"Integer constant -1\"\n+  (and (match_code \"const_int\")\n+       (match_test \"ival == -1\")))\n+\n+(define_constraint \"N\"\n+  \"Integer constant 0\"\n+  (and (match_code \"const_int\")\n+       (match_test \"ival == 0\")))\n+\n+(define_constraint \"O\"\n+  \"Integer constant for which several individual shifts are better than one big one\"\n+  (and (match_code \"const_int\")\n+       (match_test \"abs (ival) > 1 && abs (ival) <= 4\")))\n+\n+(define_constraint \"G\"\n+  \"Defines a real zero constant.\"\n+  (and (match_code \"const_double\")\n+       (match_test \"op == CONST0_RTX (GET_MODE (op))\")))\n+\n+(define_constraint \"Q\"\n+  \"Memory reference that requires an additional word after the opcode\"\n+  (and (match_code \"mem\")\n+       (match_test \"memory_address_p (GET_MODE (op), XEXP (op, 0))\n+                    && !simple_memory_operand (op, GET_MODE (op))\")))\n+\n+(define_constraint \"R\"\n+  \"Memory reference that is encoded within the opcode\"\n+  (and (match_code \"mem\")\n+       (match_test \"memory_address_p (GET_MODE (op), XEXP (op, 0))\n+                    && simple_memory_operand (op, GET_MODE (op))\")))\n+"}, {"sha": "3b0e59a6200ed44e1bd965afd9948dde5b0b644b", "filename": "gcc/config/pdp11/pdp11-protos.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19ce9cf1b8f0f1808500580fdd0fd1db00354df3/gcc%2Fconfig%2Fpdp11%2Fpdp11-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19ce9cf1b8f0f1808500580fdd0fd1db00354df3/gcc%2Fconfig%2Fpdp11%2Fpdp11-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11-protos.h?ref=19ce9cf1b8f0f1808500580fdd0fd1db00354df3", "patch": "@@ -21,10 +21,6 @@ along with GCC; see the file COPYING3.  If not see\n \n /* declarations */\n #ifdef RTX_CODE\n-extern int arith_operand (rtx, enum machine_mode);\n-extern int const_immediate_operand (rtx, enum machine_mode);\n-extern int expand_shift_operand (rtx, enum machine_mode);\n-extern int immediate15_operand (rtx, enum machine_mode);\n extern int simple_memory_operand (rtx, enum machine_mode);\n \n extern int legitimate_const_double_p (rtx);"}, {"sha": "9fcdcd8b7a032856f56b1bb552ddfd2fcfd75195", "filename": "gcc/config/pdp11/pdp11.c", "status": "modified", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19ce9cf1b8f0f1808500580fdd0fd1db00354df3/gcc%2Fconfig%2Fpdp11%2Fpdp11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19ce9cf1b8f0f1808500580fdd0fd1db00354df3/gcc%2Fconfig%2Fpdp11%2Fpdp11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.c?ref=19ce9cf1b8f0f1808500580fdd0fd1db00354df3", "patch": "@@ -255,34 +255,6 @@ pdp11_option_init_struct (struct gcc_options *opts)\n   opts->x_flag_signaling_nans = 0;\n }\n \n-/* Nonzero if OP is a valid second operand for an arithmetic insn.  */\n-\n-int\n-arith_operand (rtx op, enum machine_mode mode)\n-{\n-  return (register_operand (op, mode) || GET_CODE (op) == CONST_INT);\n-}\n-\n-int\n-const_immediate_operand (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n-{\n-  return (GET_CODE (op) == CONST_INT);\n-}\n-\n-int \n-immediate15_operand (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n-{\n-    return (GET_CODE (op) == CONST_INT && ((INTVAL (op) & 0x8000) == 0x0000));\n-}\n-\n-int\n-expand_shift_operand (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n-{\n-    return (GET_CODE (op) == CONST_INT \n-\t    && abs (INTVAL(op)) > 1 \n-\t    && abs (INTVAL(op)) <= 4);\n-}\n-\n /*\n    stream is a stdio stream to output the code to.\n    size is an int: how many units of temporary storage to allocate."}, {"sha": "7a26eb061741e23c00a63d93c69b341610292a1d", "filename": "gcc/config/pdp11/pdp11.h", "status": "modified", "additions": 0, "deletions": 56, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19ce9cf1b8f0f1808500580fdd0fd1db00354df3/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19ce9cf1b8f0f1808500580fdd0fd1db00354df3/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.h?ref=19ce9cf1b8f0f1808500580fdd0fd1db00354df3", "patch": "@@ -320,62 +320,6 @@ enum reg_class { NO_REGS, MUL_REGS, GENERAL_REGS, LOAD_FPU_REGS, NO_LOAD_FPU_REG\n #define INDEX_REG_CLASS GENERAL_REGS\n #define BASE_REG_CLASS GENERAL_REGS\n \n-/* Get reg_class from a letter such as appears in the machine description.  */\n-\n-#define REG_CLASS_FROM_LETTER(C)\t\\\n-((C) == 'f' ? FPU_REGS :\t\t\t\\\n-  ((C) == 'd' ? MUL_REGS : \t\t\t\\\n-   ((C) == 'a' ? LOAD_FPU_REGS : NO_REGS)))\n-    \n-\n-/* The letters I, J, K, L and M in a register constraint string\n-   can be used to stand for particular ranges of immediate operands.\n-   This macro defines what the ranges are.\n-   C is the letter, and VALUE is a constant value.\n-   Return 1 if VALUE is in the range specified by C.\n-\n-   I\t\tbits 31-16 0000\n-   J\t\tbits 15-00 0000\n-   K\t\tcompletely random 32 bit\n-   L,M,N\t-1,1,0 respectively\n-   O \t\twhere doing shifts in sequence is faster than \n-                one big shift \n-*/\n-\n-#define CONST_OK_FOR_LETTER_P(VALUE, C)  \\\n-  ((C) == 'I' ? ((VALUE) & 0xffff0000) == 0\t\t\\\n-   : (C) == 'J' ? ((VALUE) & 0x0000ffff) == 0  \t       \t\\\n-   : (C) == 'K' ? (((VALUE) & 0xffff0000) != 0\t\t\\\n-\t\t   && ((VALUE) & 0x0000ffff) != 0)\t\\\n-   : (C) == 'L' ? ((VALUE) == 1)\t\t\t\\\n-   : (C) == 'M' ? ((VALUE) == -1)\t\t\t\\\n-   : (C) == 'N' ? ((VALUE) == 0)\t\t\t\\\n-   : (C) == 'O' ? (abs(VALUE) >1 && abs(VALUE) <= 4)\t\t\\\n-   : 0)\n-\n-/* Similar, but for floating constants, and defining letters G and H.\n-   Here VALUE is the CONST_DOUBLE rtx itself.  */\n-\n-#define CONST_DOUBLE_OK_FOR_LETTER_P(VALUE, C)  \\\n-  ((C) == 'G' && XINT (VALUE, 0) == 0 && XINT (VALUE, 1) == 0)\n-\n-\n-/* Letters in the range `Q' through `U' may be defined in a\n-   machine-dependent fashion to stand for arbitrary operand types. \n-   The machine description macro `EXTRA_CONSTRAINT' is passed the\n-   operand as its first argument and the constraint letter as its\n-   second operand.\n-\n-   `Q'\tis for memory references that require an extra word after the opcode.\n-   `R'\tis for memory references which are encoded within the opcode.  */\n-\n-#define EXTRA_CONSTRAINT(OP,CODE)\t\t\t\t\t\\\n-  ((GET_CODE (OP) != MEM) ? 0\t\t\t\t\t\t\\\n-   : !memory_address_p (GET_MODE (OP), XEXP (OP, 0)) ? 0\t\t\\\n-   : ((CODE) == 'Q')\t  ? !simple_memory_operand (OP, GET_MODE (OP))\t\\\n-   : ((CODE) == 'R')\t  ? simple_memory_operand (OP, GET_MODE (OP))\t\\\n-   : 0)\n-\n /* Given an rtx X being reloaded into a reg required to be\n    in class CLASS, return the class of reg to actually use.\n    In general this is just CLASS; but on some machines"}, {"sha": "3043deb9c27317b9c6c8a65011709b1891a7b7e4", "filename": "gcc/config/pdp11/pdp11.md", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19ce9cf1b8f0f1808500580fdd0fd1db00354df3/gcc%2Fconfig%2Fpdp11%2Fpdp11.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19ce9cf1b8f0f1808500580fdd0fd1db00354df3/gcc%2Fconfig%2Fpdp11%2Fpdp11.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.md?ref=19ce9cf1b8f0f1808500580fdd0fd1db00354df3", "patch": "@@ -19,10 +19,8 @@\n ;; along with GCC; see the file COPYING3.  If not see\n ;; <http://www.gnu.org/licenses/>.\n \n-;; Match CONST_DOUBLE zero for tstd/tstf.\n-(define_predicate \"register_or_const0_operand\"\n-  (ior (match_operand 0 \"register_operand\")\n-       (match_test \"op == CONST0_RTX (GET_MODE (op))\")))\n+(include \"predicates.md\")\n+(include \"constraints.md\")\n \n \n ;; HI is 16 bit\n@@ -331,7 +329,7 @@\n (define_expand \"movmemhi\"\n   [(parallel [(set (match_operand:BLK 0 \"general_operand\" \"=g,g\")\n \t\t   (match_operand:BLK 1 \"general_operand\" \"g,g\"))\n-\t      (use (match_operand:HI 2 \"arith_operand\" \"n,&mr\"))\n+\t      (use (match_operand:HI 2 \"general_operand\" \"n,&mr\"))\n \t      (use (match_operand:HI 3 \"immediate_operand\" \"i,i\"))\n \t      (clobber (match_scratch:HI 4 \"=&r,X\"))\n \t      (clobber (match_dup 5))\n@@ -925,7 +923,7 @@\n (define_insn \"xorsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n         (xor:SI (match_operand:SI 1 \"register_operand\" \"%0\")\n-                (match_operand:SI 2 \"arith_operand\" \"r\")))]\n+                (match_operand:SI 2 \"register_operand\" \"r\")))]\n   \"TARGET_40_PLUS\"\n   \"*\n { /* Here we trust that operands don't overlap */\n@@ -1078,7 +1076,7 @@\n (define_insn \"\" \n   [(set (match_operand:QI 0 \"general_operand\" \"=r,o\")\n \t(ashift:QI (match_operand:QI 1 \"general_operand\" \"0,0\")\n-\t\t   (match_operand:HI 2 \"const_immediate_operand\" \"n,n\")))]\n+\t\t   (match_operand:HI 2 \"const_int_operand\" \"n,n\")))]\n   \"\"\n   \"*\n { /* allowing predec or post_inc is possible, but hairy! */\n@@ -1109,7 +1107,7 @@\n (define_insn \"\" \n   [(set (match_operand:QI 0 \"general_operand\" \"=r,o\")\n \t(ashiftrt:QI (match_operand:QI 1 \"general_operand\" \"0,0\")\n-\t\t     (match_operand:HI 2 \"const_immediate_operand\" \"n,n\")))]\n+\t\t     (match_operand:HI 2 \"const_int_operand\" \"n,n\")))]\n   \"\"\n   \"*\n { /* allowing predec or post_inc is possible, but hairy! */\n@@ -1171,7 +1169,7 @@\n ;;(define_insn \"lshrsi3\"\n ;;  [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n ;;\t(lshiftrt:HI (match_operand:HI 1 \"register_operand\" \"0\")\n-;;\t\t     (match_operand:HI 2 \"arith_operand\" \"rI\")))]\n+;;\t\t     (match_operand:HI 2 \"general_operand\" \"rI\")))]\n ;;  \"\"\n ;;  \"srl %0,%2\")\n "}, {"sha": "3864bbb7b156683175011d7db00d03c3f44b05ae", "filename": "gcc/config/pdp11/predicates.md", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19ce9cf1b8f0f1808500580fdd0fd1db00354df3/gcc%2Fconfig%2Fpdp11%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19ce9cf1b8f0f1808500580fdd0fd1db00354df3/gcc%2Fconfig%2Fpdp11%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpredicates.md?ref=19ce9cf1b8f0f1808500580fdd0fd1db00354df3", "patch": "@@ -0,0 +1,37 @@\n+;;- Predicate definitions for the pdp11 for GNU C compiler\n+;; Copyright (C) 1994, 1995, 1997, 1998, 1999, 2000, 2001, 2004, 2005\n+;; 2007, 2008, 2010 Free Software Foundation, Inc.\n+;; Contributed by Michael K. Gschwind (mike@vlsivie.tuwien.ac.at).\n+\n+;; This file is part of GCC.\n+\n+;; GCC is free software; you can redistribute it and/or modify\n+;; it under the terms of the GNU General Public License as published by\n+;; the Free Software Foundation; either version 3, or (at your option)\n+;; any later version.\n+\n+;; GCC is distributed in the hope that it will be useful,\n+;; but WITHOUT ANY WARRANTY; without even the implied warranty of\n+;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+;; GNU General Public License for more details.\n+\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING3.  If not see\n+;; <http://www.gnu.org/licenses/>.\n+\n+;; Match CONST_DOUBLE zero for tstd/tstf.\n+(define_predicate \"register_or_const0_operand\"\n+  (ior (match_operand 0 \"register_operand\")\n+       (match_test \"op == CONST0_RTX (GET_MODE (op))\")))\n+\n+;; Accept integer arguments in the range -4..-2 and 2..4, which are the\n+;; shift counts for which we unroll a shift.  This matches the rule for\n+;; the \"O\" constraint.\n+(define_predicate \"expand_shift_operand\"\n+  (match_code \"const_int\")\n+{\n+  int sh;\n+\n+  sh = INTVAL (op);\n+  return (abs (sh) > 1 && abs (sh) <= 4);\n+})"}]}