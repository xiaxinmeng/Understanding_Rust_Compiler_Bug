{"sha": "84ab931b38ea576576927b27e9b56be80dcfb486", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODRhYjkzMWIzOGVhNTc2NTc2OTI3YjI3ZTliNTZiZTgwZGNmYjQ4Ng==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1993-04-07T13:17:34Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1993-04-07T13:17:34Z"}, "message": "Add -fpic support back in.\n\nFrom-SVN: r4040", "tree": {"sha": "3a9f3cc9d20b7babd97e60b877e3ac708b18b73c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3a9f3cc9d20b7babd97e60b877e3ac708b18b73c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/84ab931b38ea576576927b27e9b56be80dcfb486", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84ab931b38ea576576927b27e9b56be80dcfb486", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84ab931b38ea576576927b27e9b56be80dcfb486", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84ab931b38ea576576927b27e9b56be80dcfb486/comments", "author": null, "committer": null, "parents": [{"sha": "3c01f863eea2afde658d0c0e328880e5e5ad0eec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c01f863eea2afde658d0c0e328880e5e5ad0eec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c01f863eea2afde658d0c0e328880e5e5ad0eec"}], "stats": {"total": 54, "additions": 40, "deletions": 14}, "files": [{"sha": "3e3928938b760a1efb76837bcad7c71867b80a90", "filename": "gcc/config/i386/osfrose.h", "status": "modified", "additions": 40, "deletions": 14, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84ab931b38ea576576927b27e9b56be80dcfb486/gcc%2Fconfig%2Fi386%2Fosfrose.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84ab931b38ea576576927b27e9b56be80dcfb486/gcc%2Fconfig%2Fi386%2Fosfrose.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fosfrose.h?ref=84ab931b38ea576576927b27e9b56be80dcfb486", "patch": "@@ -85,11 +85,13 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #define CC1_SPEC \"\\\n %{gline:%{!g:%{!g0:%{!g1:%{!g2: -g1}}}}} \\\n %{pic-none:   -mno-half-pic} \\\n+%{fpic:\t      -mno-half-pic} \\\n+%{fPIC:\t      -mno-half-pic} \\\n %{pic-lib:    -mhalf-pic} \\\n %{pic-extern: -mhalf-pic} \\\n %{pic-calls:  -mhalf-pic} \\\n %{pic-names*: -mhalf-pic} \\\n-%{!pic-*:     -mhalf-pic}\"\n+%{!pic-*: %{!fpic: %{!fPIC: -mhalf-pic}}}\"\n \n #undef\tASM_SPEC\n #define ASM_SPEC       \"\"\n@@ -152,11 +154,14 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n    `high' expressions and `const' arithmetic expressions, in\n    addition to `const_int' and `const_double' expressions.  */\n \n+#define CONSTANT_ADDRESS_P_ORIG(X)\t\t\t\t\t\\\n+  (GET_CODE (X) == LABEL_REF || GET_CODE (X) == SYMBOL_REF\t\t\\\n+   || GET_CODE (X) == CONST_INT || GET_CODE (X) == CONST\t\t\\\n+   || GET_CODE (X) == HIGH)\n+\n #undef\tCONSTANT_ADDRESS_P\n #define CONSTANT_ADDRESS_P(X)                                           \\\n-  ((GET_CODE (X) == LABEL_REF || GET_CODE (X) == SYMBOL_REF\t\t\\\n-   || GET_CODE (X) == CONST_INT || GET_CODE (X) == CONST\t\t\\\n-   || GET_CODE (X) == HIGH) && (!HALF_PIC_P () || !HALF_PIC_ADDRESS_P (X)))\n+  ((CONSTANT_ADDRESS_P_ORIG (X)) && (!HALF_PIC_P () || !HALF_PIC_ADDRESS_P (X)))\n \n /* Nonzero if the constant value X is a legitimate general operand.\n    It is given that X satisfies CONSTANT_P or is a CONST_DOUBLE.  */\n@@ -173,29 +178,50 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n    The MODE argument is the machine mode for the MEM expression\n    that wants to use this address. */\n \n+#define GO_IF_LEGITIMATE_ADDRESS_ORIG(MODE, X, ADDR)\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  if (CONSTANT_ADDRESS_P (X)\t\t\t\t\t\t\\\n+      && (! flag_pic || LEGITIMATE_PIC_OPERAND_P (X)))\t\t\t\\\n+    goto ADDR;\t\t\t\t\t\t\t\t\\\n+  GO_IF_INDEXING (X, ADDR);\t\t\t\t\t\t\\\n+  if (GET_CODE (X) == PLUS && CONSTANT_ADDRESS_P (XEXP (X, 1)))\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      rtx x0 = XEXP (X, 0);\t\t\t\t\t\t\\\n+      if (! flag_pic || ! SYMBOLIC_CONST (XEXP (X, 1)))\t\t\t\\\n+\t{ GO_IF_INDEXING (x0, ADDR); }\t\t\t\t\t\\\n+      else if (x0 == pic_offset_table_rtx)\t\t\t\t\\\n+\tgoto ADDR;\t\t\t\t\t\t\t\\\n+      else if (GET_CODE (x0) == PLUS)\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\t\\\n+\t  if (XEXP (x0, 0) == pic_offset_table_rtx)\t\t\t\\\n+\t    { GO_IF_INDEXABLE_BASE (XEXP (x0, 1), ADDR); }\t\t\\\n+\t  if (XEXP (x0, 1) == pic_offset_table_rtx)\t\t\t\\\n+\t    { GO_IF_INDEXABLE_BASE (XEXP (x0, 0), ADDR); }\t\t\\\n+\t}\t\t\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+}\n+\n #undef\tGO_IF_LEGITIMATE_ADDRESS\n #define GO_IF_LEGITIMATE_ADDRESS(MODE, X, ADDR)\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\\n-  if (CONSTANT_P (X))\t\t\t\t\t\t\t\\\n+  if (! HALF_PIC_P ())\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n-      if (! HALF_PIC_P () || ! HALF_PIC_ADDRESS_P (X))\t\t\t\\\n-\tgoto ADDR;\t\t\t\t\t\t\t\\\n+      GO_IF_LEGITIMATE_ADDRESS_ORIG(MODE, X, ADDR);\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   else\t\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n-      GO_IF_INDEXING (X, ADDR);\t\t\t\t\t\t\\\n+      if (CONSTANT_P (X) && ! HALF_PIC_ADDRESS_P (X))\t\t\t\\\n+\tgoto ADDR;\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n+      GO_IF_INDEXING (X, ADDR);\t\t\t\t\t\t\\\n       if (GET_CODE (X) == PLUS)\t\t\t\t\t\t\\\n \t{\t\t\t\t\t\t\t\t\\\n \t  rtx x1 = XEXP (X, 1);\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n-\t  if (CONSTANT_P (x1))\t\t\t\t\t\t\\\n+\t  if (CONSTANT_P (x1) && ! HALF_PIC_ADDRESS_P (x1))\t\t\\\n \t    {\t\t\t\t\t\t\t\t\\\n-\t      if (! HALF_PIC_P () || ! HALF_PIC_ADDRESS_P (x1))\t\t\\\n-\t\t{\t\t\t\t\t\t\t\\\n-\t\t  rtx x0 = XEXP (X, 0);\t\t\t\t\t\\\n-\t\t  GO_IF_INDEXING (x0, ADDR);\t\t\t\t\\\n-\t\t}\t\t\t\t\t\t\t\\\n+\t      rtx x0 = XEXP (X, 0);\t\t\t\t\t\\\n+\t      GO_IF_INDEXING (x0, ADDR);\t\t\t\t\\\n \t    }\t\t\t\t\t\t\t\t\\\n \t}\t\t\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\"}]}