{"sha": "d4d7f1d1bbe95e484a50e4f91ac5304a7bb47bdf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDRkN2YxZDFiYmU5NWU0ODRhNTBlNGY5MWFjNTMwNGE3YmI0N2JkZg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard@codesourcery.com", "date": "2007-07-01T14:43:47Z"}, "committer": {"name": "Kenneth Zadeck", "email": "zadeck@gcc.gnu.org", "date": "2007-07-01T14:43:47Z"}, "message": "[multiple changes]\n\n2007-07-01  Richard Sandiford  <richard@codesourcery.com>\n\n\tUnreverting Richard's Revert of:\n\n\t2007-06-27  Richard Sandiford  <richard@codesourcery.com>\n\n\t* dce.c (deletable_insn_p_1): New function, split out from...\n\t(deletable_insn_p): ...here.  Only treat bare USEs and CLOBBERs\n\tspecially, not those inside PARALLELs.  Remove BODY argument\n\tand adjust recursive call accordingly.\n\t(prescan_insns_for_dce): Update call to delete_insn_p.\n\nFrom-SVN: r126168", "tree": {"sha": "74b9e0733fd2a6c49106bf5dcecb82223287f19c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/74b9e0733fd2a6c49106bf5dcecb82223287f19c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d4d7f1d1bbe95e484a50e4f91ac5304a7bb47bdf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4d7f1d1bbe95e484a50e4f91ac5304a7bb47bdf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4d7f1d1bbe95e484a50e4f91ac5304a7bb47bdf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4d7f1d1bbe95e484a50e4f91ac5304a7bb47bdf/comments", "author": null, "committer": null, "parents": [{"sha": "7ee1ad848363ca30a254981b13b57d0746ed0dc1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ee1ad848363ca30a254981b13b57d0746ed0dc1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ee1ad848363ca30a254981b13b57d0746ed0dc1"}], "stats": {"total": 76, "additions": 52, "deletions": 24}, "files": [{"sha": "9ae3a017a0591123eb3fb6517cb9a535023f79b4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4d7f1d1bbe95e484a50e4f91ac5304a7bb47bdf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4d7f1d1bbe95e484a50e4f91ac5304a7bb47bdf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d4d7f1d1bbe95e484a50e4f91ac5304a7bb47bdf", "patch": "@@ -1,3 +1,15 @@\n+2007-07-01  Richard Sandiford  <richard@codesourcery.com>\n+\n+\tUnreverting Richard's Revert of:\n+\n+\t2007-06-27  Richard Sandiford  <richard@codesourcery.com>\n+\n+\t* dce.c (deletable_insn_p_1): New function, split out from...\n+\t(deletable_insn_p): ...here.  Only treat bare USEs and CLOBBERs\n+\tspecially, not those inside PARALLELs.  Remove BODY argument\n+\tand adjust recursive call accordingly.\n+\t(prescan_insns_for_dce): Update call to delete_insn_p.\n+\n 2007-07-01  Vladimir Yanovsky  <yanov@il.ibm.com>\n \t    Revital Eres  <eres@il.ibm.com>\n "}, {"sha": "2e8b77ab33e414164e76ec4cf756a63bb8c0967d", "filename": "gcc/dce.c", "status": "modified", "additions": 40, "deletions": 24, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4d7f1d1bbe95e484a50e4f91ac5304a7bb47bdf/gcc%2Fdce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4d7f1d1bbe95e484a50e4f91ac5304a7bb47bdf/gcc%2Fdce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdce.c?ref=d4d7f1d1bbe95e484a50e4f91ac5304a7bb47bdf", "patch": "@@ -58,16 +58,15 @@ static bitmap_obstack dce_tmp_bitmap_obstack;\n \n static sbitmap marked = NULL;\n \n-/* Return true if INSN with BODY is a normal instruction that can be\n-   deleted by the DCE pass.  */\n+/* A subroutine for which BODY is part of the instruction being tested;\n+   either the top-level pattern, or an element of a PARALLEL.  The\n+   instruction is known not to be a bare USE or CLOBBER.  */\n \n static bool\n-deletable_insn_p (rtx insn, rtx body, bool fast)\n+deletable_insn_p_1 (rtx body)\n {\n-  rtx x;\n   switch (GET_CODE (body))\n     {\n-    case USE:\n     case PREFETCH:\n     case TRAP_IF:\n       /* The UNSPEC case was added here because the ia-64 claims that\n@@ -79,6 +78,35 @@ deletable_insn_p (rtx insn, rtx body, bool fast)\n     case UNSPEC:\n       return false;\n \n+    default:\n+      if (volatile_insn_p (body))\n+\treturn false;\n+\n+      if (flag_non_call_exceptions && may_trap_p (body))\n+\treturn false;\n+\n+      return true;\n+    }\n+}\n+\n+/* Return true if INSN is a normal instruction that can be deleted by\n+   the DCE pass.  */\n+\n+static bool\n+deletable_insn_p (rtx insn, bool fast)\n+{\n+  rtx body, x;\n+  int i;\n+\n+  if (!NONJUMP_INSN_P (insn))\n+    return false;\n+\n+  body = PATTERN (insn);\n+  switch (GET_CODE (body))\n+    {\n+    case USE:\n+      return false;\n+\n     case CLOBBER:\n       if (fast)\n \t{\n@@ -88,32 +116,20 @@ deletable_insn_p (rtx insn, rtx body, bool fast)\n \t  x = XEXP (body, 0);\n \t  return REG_P (x) && (!HARD_REGISTER_P (x) || reload_completed);\n \t}\n-      else \n+      else\n \t/* Because of the way that use-def chains are built, it is not\n \t   possible to tell if the clobber is dead because it can\n \t   never be the target of a use-def chain.  */\n \treturn false;\n \n     case PARALLEL:\n-      {\n-\tint i;\n-\tfor (i = XVECLEN (body, 0) - 1; i >= 0; i--)\n-\t  if (!deletable_insn_p (insn, XVECEXP (body, 0, i), fast))\n-\t    return false;\n-\treturn true;\n-      }\n+      for (i = XVECLEN (body, 0) - 1; i >= 0; i--)\n+\tif (!deletable_insn_p_1 (XVECEXP (body, 0, i)))\n+\t  return false;\n+      return true;\n \n     default:\n-      if (!NONJUMP_INSN_P (insn))\n-\treturn false;\n-\n-      if (volatile_insn_p (body))\n-\treturn false;\n-\n-      if (flag_non_call_exceptions && may_trap_p (body))\n-\treturn false;\n-\n-      return true;\n+      return deletable_insn_p_1 (body);\n     }\n }\n \n@@ -369,7 +385,7 @@ prescan_insns_for_dce (bool fast)\n         rtx note = find_reg_note (insn, REG_LIBCALL_ID, NULL_RTX);\n         if (note)\n           mark_libcall (insn, fast);\n-        else if (deletable_insn_p (insn, PATTERN (insn), fast))\n+        else if (deletable_insn_p (insn, fast))\n           mark_nonreg_stores (PATTERN (insn), insn, fast);\n         else\n           mark_insn (insn, fast);"}]}