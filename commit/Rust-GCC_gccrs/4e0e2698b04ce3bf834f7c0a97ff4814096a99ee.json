{"sha": "4e0e2698b04ce3bf834f7c0a97ff4814096a99ee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGUwZTI2OThiMDRjZTNiZjgzNGY3YzBhOTdmZjQ4MTQwOTZhOTllZQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2005-09-10T21:10:42Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2005-09-10T21:10:42Z"}, "message": "re PR debug/23806 (-gstabs with VLAs does not work)\n\n        PR debug/23806\n        * dbxout.c (dbxout_expand_expr): New.\n        (dbxout_symbol): Use it.\n\nFrom-SVN: r104129", "tree": {"sha": "e221d3a5f4f7af40413ee935b3d6a4478a7347b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e221d3a5f4f7af40413ee935b3d6a4478a7347b5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4e0e2698b04ce3bf834f7c0a97ff4814096a99ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e0e2698b04ce3bf834f7c0a97ff4814096a99ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e0e2698b04ce3bf834f7c0a97ff4814096a99ee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e0e2698b04ce3bf834f7c0a97ff4814096a99ee/comments", "author": null, "committer": null, "parents": [{"sha": "ca0d06ac97251505aecc4a6c34938ace11faab7e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca0d06ac97251505aecc4a6c34938ace11faab7e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca0d06ac97251505aecc4a6c34938ace11faab7e"}], "stats": {"total": 75, "additions": 64, "deletions": 11}, "files": [{"sha": "7197965da33b26a546717619a76c52666e72719e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e0e2698b04ce3bf834f7c0a97ff4814096a99ee/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e0e2698b04ce3bf834f7c0a97ff4814096a99ee/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4e0e2698b04ce3bf834f7c0a97ff4814096a99ee", "patch": "@@ -1,3 +1,9 @@\n+2005-09-10  Richard Henderson  <rth@redhat.com>\n+\n+\tPR debug/23806\n+\t* dbxout.c (dbxout_expand_expr): New.\n+\t(dbxout_symbol): Use it.\n+\n 2005-09-10  Richard Earnshaw  <richard.earnshaw@arm.com>\n \n \t* arm.c (arm_gen_rotated_half_load): Delete."}, {"sha": "d295ac7612abae9166f6b9738a8700df9fe158da", "filename": "gcc/dbxout.c", "status": "modified", "additions": 58, "deletions": 11, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e0e2698b04ce3bf834f7c0a97ff4814096a99ee/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e0e2698b04ce3bf834f7c0a97ff4814096a99ee/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=4e0e2698b04ce3bf834f7c0a97ff4814096a99ee", "patch": "@@ -2324,6 +2324,63 @@ dbxout_class_name_qualifiers (tree decl)\n     }\n }\n \f\n+/* This is a specialized subset of expand_expr for use by dbxout_symbol in\n+   evaluating DECL_VALUE_EXPR.  In particular, we stop if we find decls that\n+   havn't been expanded, or if the expression is getting so complex we won't\n+   be able to represent it in stabs anyway.  Returns NULL on failure.  */\n+\n+static rtx\n+dbxout_expand_expr (tree expr)\n+{\n+  switch (TREE_CODE (expr))\n+    {\n+    case VAR_DECL:\n+    case PARM_DECL:\n+      if (DECL_HAS_VALUE_EXPR_P (expr))\n+\treturn dbxout_expand_expr (DECL_VALUE_EXPR (expr));\n+      /* FALLTHRU */\n+\n+    case CONST_DECL:\n+    case RESULT_DECL:\n+      return DECL_RTL_IF_SET (expr);\n+\n+    case INTEGER_CST:\n+      return expand_expr (expr, NULL_RTX, VOIDmode, EXPAND_INITIALIZER);\n+\n+    case COMPONENT_REF:\n+    case ARRAY_REF:\n+    case ARRAY_RANGE_REF:\n+    case BIT_FIELD_REF:\n+      {\n+\tenum machine_mode mode;\n+\tHOST_WIDE_INT bitsize, bitpos;\n+\ttree offset, tem;\n+\tint volatilep = 0, unsignedp = 0;\n+\trtx x;\n+\n+\ttem = get_inner_reference (expr, &bitsize, &bitpos, &offset,\n+\t\t\t\t   &mode, &unsignedp, &volatilep, true);\n+\n+\tx = dbxout_expand_expr (tem);\n+\tif (x == NULL || !MEM_P (x))\n+\t  return NULL;\n+\tif (offset != NULL)\n+\t  {\n+\t    if (!host_integerp (offset, 0))\n+\t      return NULL;\n+\t    x = adjust_address_nv (x, mode, tree_low_cst (offset, 0));\n+\t  }\n+\tif (bitpos != 0)\n+\t  x = adjust_address_nv (x, mode, bitpos / BITS_PER_UNIT);\n+\n+\treturn x;\n+      }\n+\n+    default:\n+      return NULL;\n+    }\n+}\n+\n /* Output a .stabs for the symbol defined by DECL,\n    which must be a ..._DECL node in the normal namespace.\n    It may be a CONST_DECL, a FUNCTION_DECL, a PARM_DECL or a VAR_DECL.\n@@ -2608,23 +2665,13 @@ dbxout_symbol (tree decl, int local ATTRIBUTE_UNUSED)\n       gcc_unreachable ();\n \n     case RESULT_DECL:\n-      /* Named return value, treat like a VAR_DECL.  */\n-      decl_rtl = DECL_RTL_IF_SET (decl);\n-      goto do_var_decl;\n-\n     case VAR_DECL:\n       /* Don't mention a variable that is external.\n \t Let the file that defines it describe it.  */\n       if (DECL_EXTERNAL (decl))\n \tbreak;\n \n-      if (DECL_HAS_VALUE_EXPR_P (decl))\n-\tdecl_rtl = expand_expr (DECL_VALUE_EXPR (decl), NULL_RTX, VOIDmode,\n-\t\t\t\tEXPAND_INITIALIZER);\n-      else\n-\tdecl_rtl = DECL_RTL_IF_SET (decl);\n-\n-    do_var_decl:\n+      decl_rtl = dbxout_expand_expr (decl);\n       if (!decl_rtl)\n \tDBXOUT_DECR_NESTING_AND_RETURN (0);\n "}]}