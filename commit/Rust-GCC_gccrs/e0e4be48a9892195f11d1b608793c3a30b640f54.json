{"sha": "e0e4be48a9892195f11d1b608793c3a30b640f54", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTBlNGJlNDhhOTg5MjE5NWYxMWQxYjYwODc5M2MzYTMwYjY0MGY1NA==", "commit": {"author": {"name": "Mihail Ionescu", "email": "mihail.ionescu@arm.com", "date": "2020-01-15T10:33:52Z"}, "committer": {"name": "Mihail Ionescu", "email": "mihail.ionescu@arm.com", "date": "2020-01-16T15:11:15Z"}, "message": "[PATCH, GCC/ARM, 3/10] Save/restore FPCXTNS in nsentry functions\n\nThis patch consists mainly of creating 2 new instruction patterns to\npush and pop special FP registers via vldm and vstr and using them in\nprologue and epilogue. The patterns are defined as push/pop with an\nunspecified operation on the memory accessed, with an unspecified\nconstant indicating what special FP register is being saved/restored.\n\nOther aspects of the patch include:\n  * defining the set of special registers that can be saved/restored and\n    their name\n  * reserving space in the stack frames for these push/pop\n  * preventing return via pop\n  * guarding the clearing of FPSCR to target architecture not having\n    Armv8.1-M Mainline instructions.\n\n*** gcc/ChangeLog ***\n\n2020-01-16  Mihail-Calin Ionescu  <mihail.ionescu@arm.com>\n2020-01-16  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n\n\t* config/arm/arm.c (fp_sysreg_names): Declare and define.\n\t(use_return_insn): Also return false for Armv8.1-M Mainline.\n\t(output_return_instruction): Skip FPSCR clearing if Armv8.1-M\n\tMainline instructions are available.\n\t(arm_compute_frame_layout): Allocate space in frame for FPCXTNS\n\twhen targeting Armv8.1-M Mainline Security Extensions.\n\t(arm_expand_prologue): Save FPCXTNS if this is an Armv8.1-M\n\tMainline entry function.\n\t(cmse_nonsecure_entry_clear_before_return): Clear IP and r4 if\n\ttargeting Armv8.1-M Mainline or successor.\n\t(arm_expand_epilogue): Fix indentation of caller-saved register\n\tclearing.  Restore FPCXTNS if this is an Armv8.1-M Mainline\n\tentry function.\n\t* config/arm/arm.h (TARGET_HAVE_FP_CMSE): New macro.\n\t(FP_SYSREGS): Likewise.\n\t(enum vfp_sysregs_encoding): Define enum.\n\t(fp_sysreg_names): Declare.\n\t* config/arm/unspecs.md (VUNSPEC_VSTR_VLDR): New volatile unspec.\n\t* config/arm/vfp.md (push_fpsysreg_insn): New define_insn.\n\t(pop_fpsysreg_insn): Likewise.\n\n*** gcc/testsuite/Changelog ***\n\n2020-01-16  Mihail-Calin Ionescu  <mihail.ionescu@arm.com>\n2020-01-16  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n\n\t* gcc.target/arm/cmse/bitfield-1.c: add checks for VSTR and VLDR.\n\t* gcc.target/arm/cmse/bitfield-2.c: Likewise.\n\t* gcc.target/arm/cmse/bitfield-3.c: Likewise.\n\t* gcc.target/arm/cmse/cmse-1.c: Likewise.\n\t* gcc.target/arm/cmse/struct-1.c: Likewise.\n\t* gcc.target/arm/cmse/cmse.exp: Run existing Armv8-M Mainline tests\n\tfrom mainline/8m subdirectory and new Armv8.1-M Mainline tests from\n\tmainline/8_1m subdirectory.\n\t* gcc.target/arm/cmse/mainline/bitfield-4.c: Move into ...\n\t* gcc.target/arm/cmse/mainline/8m/bitfield-4.c: This.\n\t* gcc.target/arm/cmse/mainline/bitfield-5.c: Move into ...\n\t* gcc.target/arm/cmse/mainline/8m/bitfield-5.c: This.\n\t* gcc.target/arm/cmse/mainline/bitfield-6.c: Move into ...\n\t* gcc.target/arm/cmse/mainline/8m/bitfield-6.c: This.\n\t* gcc.target/arm/cmse/mainline/bitfield-7.c: Move into ...\n\t* gcc.target/arm/cmse/mainline/8m/bitfield-7.c: This.\n\t* gcc.target/arm/cmse/mainline/bitfield-8.c: Move into ...\n\t* gcc.target/arm/cmse/mainline/8m/bitfield-8.c: This.\n\t* gcc.target/arm/cmse/mainline/bitfield-9.c: Move into ...\n\t* gcc.target/arm/cmse/mainline/8m/bitfield-9.c: This.\n\t* gcc.target/arm/cmse/mainline/bitfield-and-union-1.c: Move and rename\n\tinto ...\n\t* gcc.target/arm/cmse/mainline/8m/bitfield-and-union.c: This.\n\t* gcc.target/arm/cmse/mainline/hard-sp/cmse-13.c: Move into ...\n\t* gcc.target/arm/cmse/mainline/8m/hard-sp/cmse-13.c: This.  Clean up\n\tdg-skip-if directive for float ABI.\n\t* gcc.target/arm/cmse/mainline/hard-sp/cmse-5.c: Move into ...\n\t* gcc.target/arm/cmse/mainline/8m/hard-sp/cmse-5.c: This.  Clean up\n\tdg-skip-if directive for float ABI.\n\t* gcc.target/arm/cmse/mainline/hard-sp/cmse-7.c: Move into ...\n\t* gcc.target/arm/cmse/mainline/8m/hard-sp/cmse-7.c: This.  Clean up\n\tdg-skip-if directive for float ABI.\n\t* gcc.target/arm/cmse/mainline/hard-sp/cmse-8.c: Move into ...\n\t* gcc.target/arm/cmse/mainline/8m/hard-sp/cmse-8.c: This.  Clean up\n\tdg-skip-if directive for float ABI.\n\t* gcc.target/arm/cmse/mainline/hard/cmse-13.c: Move into ...\n\t* gcc.target/arm/cmse/mainline/8m/hard/cmse-13.c: This.  Clean up\n\tdg-skip-if directive for float ABI.\n\t* gcc.target/arm/cmse/mainline/hard/cmse-5.c: Move into ...\n\t* gcc.target/arm/cmse/mainline/8m/hard/cmse-5.c: This.  Clean up\n\tdg-skip-if directive for float ABI.\n\t* gcc.target/arm/cmse/mainline/hard/cmse-7.c: Move into ...\n\t* gcc.target/arm/cmse/mainline/8m/hard/cmse-7.c: This.  Clean up\n\tdg-skip-if directive for float ABI.\n\t* gcc.target/arm/cmse/mainline/hard/cmse-8.c: Move into ...\n\t* gcc.target/arm/cmse/mainline/8m/hard/cmse-8.c: This.  Clean up\n\tdg-skip-if directive for float ABI.\n\t* gcc.target/arm/cmse/mainline/soft/cmse-13.c: Move into ...\n\t* gcc.target/arm/cmse/mainline/8m/soft/cmse-13.c: This.  Clean up\n\tdg-skip-if directive for float ABI.\n\t* gcc.target/arm/cmse/mainline/soft/cmse-5.c: Move into ...\n\t* gcc.target/arm/cmse/mainline/8m/soft/cmse-5.c: This.  Clean up\n\tdg-skip-if directive for float ABI.\n\t* gcc.target/arm/cmse/mainline/soft/cmse-7.c: Move into ...\n\t* gcc.target/arm/cmse/mainline/8m/soft/cmse-7.c: This.  Clean up\n\tdg-skip-if directive for float ABI.\n\t* gcc.target/arm/cmse/mainline/soft/cmse-8.c: Move into ...\n\t* gcc.target/arm/cmse/mainline/8m/soft/cmse-8.c: This.  Clean up\n\tdg-skip-if directive for float ABI.\n\t* gcc.target/arm/cmse/mainline/softfp-sp/cmse-5.c: Move into ...\n\t* gcc.target/arm/cmse/mainline/8m/softfp-sp/cmse-5.c: This.  Clean up\n\tdg-skip-if directive for float ABI.\n\t* gcc.target/arm/cmse/mainline/softfp-sp/cmse-7.c: Move into ...\n\t* gcc.target/arm/cmse/mainline/8m/softfp-sp/cmse-7.c: This.  Clean up\n\tdg-skip-if directive for float ABI.\n\t* gcc.target/arm/cmse/mainline/softfp-sp/cmse-8.c: Move into ...\n\t* gcc.target/arm/cmse/mainline/8m/softfp-sp/cmse-8.c: This.  Clean up\n\tdg-skip-if directive for float ABI.\n\t* gcc.target/arm/cmse/mainline/softfp/cmse-13.c: Move into ...\n\t* gcc.target/arm/cmse/mainline/8m/softfp/cmse-13.c: This.  Clean up\n\tdg-skip-if directive for float ABI.\n\t* gcc.target/arm/cmse/mainline/softfp/cmse-5.c: Move into ...\n\t* gcc.target/arm/cmse/mainline/8m/softfp/cmse-5.c: This.  Clean up\n\tdg-skip-if directive for float ABI.\n\t* gcc.target/arm/cmse/mainline/softfp/cmse-7.c: Move into ...\n\t* gcc.target/arm/cmse/mainline/8m/softfp/cmse-7.c: This.  Clean up\n\tdg-skip-if directive for float ABI.\n\t* gcc.target/arm/cmse/mainline/softfp/cmse-8.c: Move into ...\n\t* gcc.target/arm/cmse/mainline/8m/softfp/cmse-8.c: This.  Clean up\n\tdg-skip-if directive for float ABI.\n\t* gcc.target/arm/cmse/mainline/union-1.c: Move into ...\n\t* gcc.target/arm/cmse/mainline/8m/union-1.c: This.\n\t* gcc.target/arm/cmse/mainline/union-2.c: Move into ...\n\t* gcc.target/arm/cmse/mainline/8m/union-2.c: This.\n\t* gcc.target/arm/cmse/mainline/8_1m/bitfield-4.c: New file.\n\t* gcc.target/arm/cmse/mainline/8_1m/bitfield-5.c: New file.\n\t* gcc.target/arm/cmse/mainline/8_1m/bitfield-6.c: New file.\n\t* gcc.target/arm/cmse/mainline/8_1m/bitfield-7.c: New file.\n\t* gcc.target/arm/cmse/mainline/8_1m/bitfield-8.c: New file.\n\t* gcc.target/arm/cmse/mainline/8_1m/bitfield-9.c: New file.\n\t* gcc.target/arm/cmse/mainline/8_1m/bitfield-and-union.c: New file.\n\t* gcc.target/arm/cmse/mainline/8_1m/hard-sp/cmse-13.c: New file.\n\t* gcc.target/arm/cmse/mainline/8_1m/hard-sp/cmse-5.c: New file.\n\t* gcc.target/arm/cmse/mainline/8_1m/hard-sp/cmse-7.c: New file.\n\t* gcc.target/arm/cmse/mainline/8_1m/hard-sp/cmse-8.c: New file.\n\t* gcc.target/arm/cmse/mainline/8_1m/hard/cmse-13.c: New file.\n\t* gcc.target/arm/cmse/mainline/8_1m/hard/cmse-5.c: New file.\n\t* gcc.target/arm/cmse/mainline/8_1m/hard/cmse-7.c: New file.\n\t* gcc.target/arm/cmse/mainline/8_1m/hard/cmse-8.c: New file.\n\t* gcc.target/arm/cmse/mainline/8_1m/soft/cmse-13.c: New file.\n\t* gcc.target/arm/cmse/mainline/8_1m/soft/cmse-5.c: New file.\n\t* gcc.target/arm/cmse/mainline/8_1m/soft/cmse-7.c: New file.\n\t* gcc.target/arm/cmse/mainline/8_1m/soft/cmse-8.c: New file.\n\t* gcc.target/arm/cmse/mainline/8_1m/softfp-sp/cmse-5.c: New file.\n\t* gcc.target/arm/cmse/mainline/8_1m/softfp-sp/cmse-7.c: New file.\n\t* gcc.target/arm/cmse/mainline/8_1m/softfp-sp/cmse-8.c: New file.\n\t* gcc.target/arm/cmse/mainline/8_1m/softfp/cmse-13.c: New file.\n\t* gcc.target/arm/cmse/mainline/8_1m/softfp/cmse-5.c: New file.\n\t* gcc.target/arm/cmse/mainline/8_1m/softfp/cmse-7.c: New file.\n\t* gcc.target/arm/cmse/mainline/8_1m/softfp/cmse-8.c: New file.\n\t* gcc.target/arm/cmse/mainline/8_1m/union-1.c: New file.\n\t* gcc.target/arm/cmse/mainline/8_1m/union-2.c: New file.\n\t* lib/target-supports.exp (check_effective_target_arm_cmse_clear_ok):\n\tNew procedure.", "tree": {"sha": "c76fd00b5769275e5ef1d80ce7f812d711acf098", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c76fd00b5769275e5ef1d80ce7f812d711acf098"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e0e4be48a9892195f11d1b608793c3a30b640f54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0e4be48a9892195f11d1b608793c3a30b640f54", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0e4be48a9892195f11d1b608793c3a30b640f54", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0e4be48a9892195f11d1b608793c3a30b640f54/comments", "author": null, "committer": null, "parents": [{"sha": "e27cf2e372651997c3b46a5662dd4d47c53dd13b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e27cf2e372651997c3b46a5662dd4d47c53dd13b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e27cf2e372651997c3b46a5662dd4d47c53dd13b"}], "stats": {"total": 1037, "additions": 947, "deletions": 90}, "files": [{"sha": "677a3ab9ef05a1fa00ceb3b4c1876408701e6ca7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e0e4be48a9892195f11d1b608793c3a30b640f54", "patch": "@@ -1,3 +1,27 @@\n+2020-01-16  Mihail-Calin Ionescu <mihail.ionescu@arm.com>\n+2020-01-16  Thomas Preud'homme <thomas.preudhomme@arm.com>\n+\n+\t* config/arm/arm.c (fp_sysreg_names): Declare and define.\n+\t(use_return_insn): Also return false for Armv8.1-M Mainline.\n+\t(output_return_instruction): Skip FPSCR clearing if Armv8.1-M\n+\tMainline instructions are available.\n+\t(arm_compute_frame_layout): Allocate space in frame for FPCXTNS\n+\twhen targeting Armv8.1-M Mainline Security Extensions.\n+\t(arm_expand_prologue): Save FPCXTNS if this is an Armv8.1-M\n+\tMainline entry function.\n+\t(cmse_nonsecure_entry_clear_before_return): Clear IP and r4 if\n+\ttargeting Armv8.1-M Mainline or successor.\n+\t(arm_expand_epilogue): Fix indentation of caller-saved register\n+\tclearing.  Restore FPCXTNS if this is an Armv8.1-M Mainline\n+\tentry function.\n+\t* config/arm/arm.h (TARGET_HAVE_FP_CMSE): New macro.\n+\t(FP_SYSREGS): Likewise.\n+\t(enum vfp_sysregs_encoding): Define enum.\n+\t(fp_sysreg_names): Declare.\n+\t* config/arm/unspecs.md (VUNSPEC_VSTR_VLDR): New volatile unspec.\n+\t* config/arm/vfp.md (push_fpsysreg_insn): New define_insn.\n+\t(pop_fpsysreg_insn): Likewise.\n+\n 2020-01-16  Mihail-Calin Ionescu <mihail.ionescu@arm.com>\n 2020-01-16  Thomas Preud'homme <thomas.preudhomme@arm.com>\n "}, {"sha": "13633df7dd8705ee862b7ebe1568e82952c6f645", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 52, "deletions": 15, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=e0e4be48a9892195f11d1b608793c3a30b640f54", "patch": "@@ -1021,6 +1021,12 @@ int arm_regs_in_sequence[] =\n   0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15\n };\n \n+#define DEF_FP_SYSREG(reg) #reg,\n+const char *fp_sysreg_names[NB_FP_SYSREGS] = {\n+  FP_SYSREGS\n+};\n+#undef DEF_FP_SYSREG\n+\n #define ARM_LSL_NAME \"lsl\"\n #define streq(string1, string2) (strcmp (string1, string2) == 0)\n \n@@ -4245,8 +4251,9 @@ use_return_insn (int iscond, rtx sibling)\n     }\n \n   /* ARMv8-M nonsecure entry function need to use bxns to return and thus need\n-     several instructions if anything needs to be popped.  */\n-  if (saved_int_regs && IS_CMSE_ENTRY (func_type))\n+     several instructions if anything needs to be popped.  Armv8.1-M Mainline\n+     also needs several instructions to save and restore FP context.  */\n+  if (IS_CMSE_ENTRY (func_type) && (saved_int_regs || TARGET_HAVE_FPCXT_CMSE))\n     return 0;\n \n   /* If there are saved registers but the LR isn't saved, then we need\n@@ -20705,7 +20712,9 @@ output_return_instruction (rtx operand, bool really_return, bool reverse,\n \t\t\t  \"msr%s\\tAPSR_nzcvq, %%|lr\", conditional);\n \n \t      output_asm_insn (instr, & operand);\n-\t      if (TARGET_HARD_FLOAT)\n+\t      /* Do not clear FPSCR if targeting Armv8.1-M Mainline, VLDR takes\n+\t\t care of it.  */\n+\t      if (TARGET_HARD_FLOAT && ! TARGET_HAVE_FPCXT_CMSE)\n \t\t{\n \t\t  /* Clear the cumulative exception-status bits (0-4,7) and the\n \t\t     condition code bits (28-31) of the FPSCR.  We need to\n@@ -21997,6 +22006,11 @@ arm_compute_frame_layout (void)\n       if (! IS_VOLATILE (func_type)\n \t  && TARGET_HARD_FLOAT)\n \tsaved += arm_get_vfp_saved_size ();\n+\n+      /* Allocate space for saving/restoring FPCXTNS in Armv8.1-M Mainline\n+\t nonecure entry functions with VSTR/VLDR.  */\n+      if (TARGET_HAVE_FPCXT_CMSE && IS_CMSE_ENTRY (func_type))\n+\tsaved += 4;\n     }\n   else /* TARGET_THUMB1 */\n     {\n@@ -22698,6 +22712,15 @@ arm_expand_prologue (void)\n       RTX_FRAME_RELATED_P (insn) = 1;\n     }\n \n+  /* Armv8.1-M Mainline nonsecure entry: save FPCXTNS on stack using VSTR.  */\n+  if (TARGET_HAVE_FPCXT_CMSE && IS_CMSE_ENTRY (func_type))\n+    {\n+      saved_regs += 4;\n+      insn = emit_insn (gen_push_fpsysreg_insn (stack_pointer_rtx,\n+\t\t\t\t\t\tGEN_INT (FPCXTNS_ENUM)));\n+      RTX_FRAME_RELATED_P (insn) = 1;\n+    }\n+\n   if (args_to_push)\n     {\n       /* Push the argument registers, or reserve space for them.  */\n@@ -26261,12 +26284,15 @@ cmse_nonsecure_entry_clear_before_return (void)\n \n       bitmap_set_range (to_clear_bitmap, FIRST_VFP_REGNUM, float_bits);\n \n-      /* Make sure we don't clear the two scratch registers used to clear the\n-\t relevant FPSCR bits in output_return_instruction.  */\n-      emit_use (gen_rtx_REG (SImode, IP_REGNUM));\n-      bitmap_clear_bit (to_clear_bitmap, IP_REGNUM);\n-      emit_use (gen_rtx_REG (SImode, 4));\n-      bitmap_clear_bit (to_clear_bitmap, 4);\n+      if (!TARGET_HAVE_FPCXT_CMSE)\n+\t{\n+\t  /* Make sure we don't clear the two scratch registers used to clear\n+\t     the relevant FPSCR bits in output_return_instruction.  */\n+\t  emit_use (gen_rtx_REG (SImode, IP_REGNUM));\n+\t  bitmap_clear_bit (to_clear_bitmap, IP_REGNUM);\n+\t  emit_use (gen_rtx_REG (SImode, 4));\n+\t  bitmap_clear_bit (to_clear_bitmap, 4);\n+\t}\n     }\n \n   /* If the user has defined registers to be caller saved, these are no longer\n@@ -26876,12 +26902,23 @@ arm_expand_epilogue (bool really_return)\n \t\t\t\t   stack_pointer_rtx, stack_pointer_rtx);\n     }\n \n-    /* Clear all caller-saved regs that are not used to return.  */\n-    if (IS_CMSE_ENTRY (arm_current_func_type ()))\n-      {\n-\t/* CMSE_ENTRY always returns.  */\n-\tgcc_assert (really_return);\n-\tcmse_nonsecure_entry_clear_before_return ();\n+  if (IS_CMSE_ENTRY (func_type))\n+    {\n+      /* CMSE_ENTRY always returns.  */\n+      gcc_assert (really_return);\n+      /* Clear all caller-saved regs that are not used to return.  */\n+      cmse_nonsecure_entry_clear_before_return ();\n+\n+      /* Armv8.1-M Mainline nonsecure entry: restore FPCXTNS from stack using\n+\t VLDR.  */\n+      if (TARGET_HAVE_FPCXT_CMSE)\n+\t{\n+\t  rtx_insn *insn;\n+\n+\t  insn = emit_insn (gen_pop_fpsysreg_insn (stack_pointer_rtx,\n+\t\t\t\t\t\t   GEN_INT (FPCXTNS_ENUM)));\n+\t  RTX_FRAME_RELATED_P (insn) = 1;\n+\t}\n       }\n \n   if (!really_return)"}, {"sha": "182854f2df7d4f87f24b48077a145dc1add952ef", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=e0e4be48a9892195f11d1b608793c3a30b640f54", "patch": "@@ -315,6 +315,10 @@ emission of floating point pcs attributes.  */\n /* Nonzero if this chip provides the CBZ and CBNZ instructions.  */\n #define TARGET_HAVE_CBZ\t\t(arm_arch_thumb2 || arm_arch8)\n \n+/* Nonzero if this chip provides Armv8.1-M Mainline Security extensions\n+   instructions (most are floating-point related).  */\n+#define TARGET_HAVE_FPCXT_CMSE\t(arm_arch8_1m_main)\n+\n /* Nonzero if integer division instructions supported.  */\n #define TARGET_IDIV\t((TARGET_ARM && arm_arch_arm_hwdiv)\t\\\n \t\t\t || (TARGET_THUMB && arm_arch_thumb_hwdiv))\n@@ -1181,6 +1185,22 @@ enum reg_class\n   { 0xFFFF7FFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x0000000F }  /* ALL_REGS */\t\\\n }\n \n+#define FP_SYSREGS \\\n+  DEF_FP_SYSREG (FPSCR) \\\n+  DEF_FP_SYSREG (FPSCR_nzcvqc) \\\n+  DEF_FP_SYSREG (VPR) \\\n+  DEF_FP_SYSREG (P0) \\\n+  DEF_FP_SYSREG (FPCXTNS) \\\n+  DEF_FP_SYSREG (FPCXTS)\n+\n+#define DEF_FP_SYSREG(reg) reg ## _ENUM,\n+enum vfp_sysregs_encoding {\n+  FP_SYSREGS\n+  NB_FP_SYSREGS\n+};\n+#undef DEF_FP_SYSREG\n+extern const char *fp_sysreg_names[NB_FP_SYSREGS];\n+\n /* Any of the VFP register classes.  */\n #define IS_VFP_CLASS(X) \\\n   ((X) == VFP_D0_D7_REGS || (X) == VFP_LO_REGS \\"}, {"sha": "40f6a8b7161f764fa948d3e0dd86a92c1feb04d7", "filename": "gcc/config/arm/unspecs.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Fconfig%2Farm%2Funspecs.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Fconfig%2Farm%2Funspecs.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Funspecs.md?ref=e0e4be48a9892195f11d1b608793c3a30b640f54", "patch": "@@ -239,6 +239,7 @@\n   VUNSPEC_MRRC2\t\t; Represent the coprocessor mrrc2 instruction.\n   VUNSPEC_SPECULATION_BARRIER ; Represents an unconditional speculation barrier.\n   VUNSPEC_APSR_WRITE     ; Represent writing the APSR.\n+  VUNSPEC_VSTR_VLDR\t; Represent the vstr/vldr instruction.\n ])\n \n ;; Enumerators for NEON unspecs."}, {"sha": "a4f01e7a400f48bf22b3c5cf3e36dbf37a935ab1", "filename": "gcc/config/arm/vfp.md", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Fconfig%2Farm%2Fvfp.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Fconfig%2Farm%2Fvfp.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fvfp.md?ref=e0e4be48a9892195f11d1b608793c3a30b640f54", "patch": "@@ -1599,6 +1599,44 @@\n    (set_attr \"type\" \"f_flag\")]\n )\n \n+(define_insn \"push_fpsysreg_insn\"\n+  [(set (mem:SI (post_dec:SI (match_operand:SI 0 \"s_register_operand\" \"+&rk\")))\n+   (unspec_volatile:SI [(match_operand:SI 1 \"const_int_operand\" \"n\")]\n+\t\t       VUNSPEC_VSTR_VLDR))]\n+  \"TARGET_HAVE_FPCXT_CMSE && use_cmse\"\n+  {\n+    static char buf[32];\n+    int fp_sysreg_enum = INTVAL (operands[1]);\n+\n+    gcc_assert (IN_RANGE (fp_sysreg_enum, 0, NB_FP_SYSREGS - 1));\n+\n+    snprintf (buf, sizeof (buf), \\\"vstr%%?\\\\t%s, [%%0, #-4]!\\\",\n+\t      fp_sysreg_names[fp_sysreg_enum]);\n+    return buf;\n+  }\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"type\" \"store_4\")]\n+)\n+\n+(define_insn \"pop_fpsysreg_insn\"\n+  [(set (mem:SI (post_inc:SI (match_operand:SI 0 \"s_register_operand\" \"+&rk\")))\n+   (unspec_volatile:SI [(match_operand:SI 1 \"const_int_operand\" \"n\")]\n+\t\t       VUNSPEC_VSTR_VLDR))]\n+  \"TARGET_HAVE_FPCXT_CMSE && use_cmse\"\n+  {\n+    static char buf[32];\n+    int fp_sysreg_enum = INTVAL (operands[1]);\n+\n+    gcc_assert (IN_RANGE (fp_sysreg_enum, 0, NB_FP_SYSREGS - 1));\n+\n+    snprintf (buf, sizeof (buf), \\\"vldr%%?\\\\t%s, [%%0], #4\\\",\n+\t      fp_sysreg_names[fp_sysreg_enum]);\n+    return buf;\n+  }\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"type\" \"load_4\")]\n+)\n+\n (define_insn_and_split \"*cmpsf_split_vfp\"\n   [(set (reg:CCFP CC_REGNUM)\n \t(compare:CCFP (match_operand:SF 0 \"s_register_operand\"  \"t\")"}, {"sha": "200b1cfffbefe1ccc47dd8efed63a5523bb2ab03", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e0e4be48a9892195f11d1b608793c3a30b640f54", "patch": "@@ -1,3 +1,121 @@\n+2020-01-16  Mihail-Calin Ionescu <mihail.ionescu@arm.com>\n+2020-01-16  Thomas Preud'homme <thomas.preudhomme@arm.com>\n+\n+\t* gcc.target/arm/cmse/bitfield-1.c: add checks for VSTR and VLDR.\n+\t* gcc.target/arm/cmse/bitfield-2.c: Likewise.\n+\t* gcc.target/arm/cmse/bitfield-3.c: Likewise.\n+\t* gcc.target/arm/cmse/cmse-1.c: Likewise.\n+\t* gcc.target/arm/cmse/struct-1.c: Likewise.\n+\t* gcc.target/arm/cmse/cmse.exp: Run existing Armv8-M Mainline tests\n+\tfrom mainline/8m subdirectory and new Armv8.1-M Mainline tests from\n+\tmainline/8_1m subdirectory.\n+\t* gcc.target/arm/cmse/mainline/bitfield-4.c: Move into ...\n+\t* gcc.target/arm/cmse/mainline/8m/bitfield-4.c: This.\n+\t* gcc.target/arm/cmse/mainline/bitfield-5.c: Move into ...\n+\t* gcc.target/arm/cmse/mainline/8m/bitfield-5.c: This.\n+\t* gcc.target/arm/cmse/mainline/bitfield-6.c: Move into ...\n+\t* gcc.target/arm/cmse/mainline/8m/bitfield-6.c: This.\n+\t* gcc.target/arm/cmse/mainline/bitfield-7.c: Move into ...\n+\t* gcc.target/arm/cmse/mainline/8m/bitfield-7.c: This.\n+\t* gcc.target/arm/cmse/mainline/bitfield-8.c: Move into ...\n+\t* gcc.target/arm/cmse/mainline/8m/bitfield-8.c: This.\n+\t* gcc.target/arm/cmse/mainline/bitfield-9.c: Move into ...\n+\t* gcc.target/arm/cmse/mainline/8m/bitfield-9.c: This.\n+\t* gcc.target/arm/cmse/mainline/bitfield-and-union-1.c: Move and rename\n+\tinto ...\n+\t* gcc.target/arm/cmse/mainline/8m/bitfield-and-union.c: This.\n+\t* gcc.target/arm/cmse/mainline/hard-sp/cmse-13.c: Move into ...\n+\t* gcc.target/arm/cmse/mainline/8m/hard-sp/cmse-13.c: This.  Clean up\n+\tdg-skip-if directive for float ABI.\n+\t* gcc.target/arm/cmse/mainline/hard-sp/cmse-5.c: Move into ...\n+\t* gcc.target/arm/cmse/mainline/8m/hard-sp/cmse-5.c: This.  Clean up\n+\tdg-skip-if directive for float ABI.\n+\t* gcc.target/arm/cmse/mainline/hard-sp/cmse-7.c: Move into ...\n+\t* gcc.target/arm/cmse/mainline/8m/hard-sp/cmse-7.c: This.  Clean up\n+\tdg-skip-if directive for float ABI.\n+\t* gcc.target/arm/cmse/mainline/hard-sp/cmse-8.c: Move into ...\n+\t* gcc.target/arm/cmse/mainline/8m/hard-sp/cmse-8.c: This.  Clean up\n+\tdg-skip-if directive for float ABI.\n+\t* gcc.target/arm/cmse/mainline/hard/cmse-13.c: Move into ...\n+\t* gcc.target/arm/cmse/mainline/8m/hard/cmse-13.c: This.  Clean up\n+\tdg-skip-if directive for float ABI.\n+\t* gcc.target/arm/cmse/mainline/hard/cmse-5.c: Move into ...\n+\t* gcc.target/arm/cmse/mainline/8m/hard/cmse-5.c: This.  Clean up\n+\tdg-skip-if directive for float ABI.\n+\t* gcc.target/arm/cmse/mainline/hard/cmse-7.c: Move into ...\n+\t* gcc.target/arm/cmse/mainline/8m/hard/cmse-7.c: This.  Clean up\n+\tdg-skip-if directive for float ABI.\n+\t* gcc.target/arm/cmse/mainline/hard/cmse-8.c: Move into ...\n+\t* gcc.target/arm/cmse/mainline/8m/hard/cmse-8.c: This.  Clean up\n+\tdg-skip-if directive for float ABI.\n+\t* gcc.target/arm/cmse/mainline/soft/cmse-13.c: Move into ...\n+\t* gcc.target/arm/cmse/mainline/8m/soft/cmse-13.c: This.  Clean up\n+\tdg-skip-if directive for float ABI.\n+\t* gcc.target/arm/cmse/mainline/soft/cmse-5.c: Move into ...\n+\t* gcc.target/arm/cmse/mainline/8m/soft/cmse-5.c: This.  Clean up\n+\tdg-skip-if directive for float ABI.\n+\t* gcc.target/arm/cmse/mainline/soft/cmse-7.c: Move into ...\n+\t* gcc.target/arm/cmse/mainline/8m/soft/cmse-7.c: This.  Clean up\n+\tdg-skip-if directive for float ABI.\n+\t* gcc.target/arm/cmse/mainline/soft/cmse-8.c: Move into ...\n+\t* gcc.target/arm/cmse/mainline/8m/soft/cmse-8.c: This.  Clean up\n+\tdg-skip-if directive for float ABI.\n+\t* gcc.target/arm/cmse/mainline/softfp-sp/cmse-5.c: Move into ...\n+\t* gcc.target/arm/cmse/mainline/8m/softfp-sp/cmse-5.c: This.  Clean up\n+\tdg-skip-if directive for float ABI.\n+\t* gcc.target/arm/cmse/mainline/softfp-sp/cmse-7.c: Move into ...\n+\t* gcc.target/arm/cmse/mainline/8m/softfp-sp/cmse-7.c: This.  Clean up\n+\tdg-skip-if directive for float ABI.\n+\t* gcc.target/arm/cmse/mainline/softfp-sp/cmse-8.c: Move into ...\n+\t* gcc.target/arm/cmse/mainline/8m/softfp-sp/cmse-8.c: This.  Clean up\n+\tdg-skip-if directive for float ABI.\n+\t* gcc.target/arm/cmse/mainline/softfp/cmse-13.c: Move into ...\n+\t* gcc.target/arm/cmse/mainline/8m/softfp/cmse-13.c: This.  Clean up\n+\tdg-skip-if directive for float ABI.\n+\t* gcc.target/arm/cmse/mainline/softfp/cmse-5.c: Move into ...\n+\t* gcc.target/arm/cmse/mainline/8m/softfp/cmse-5.c: This.  Clean up\n+\tdg-skip-if directive for float ABI.\n+\t* gcc.target/arm/cmse/mainline/softfp/cmse-7.c: Move into ...\n+\t* gcc.target/arm/cmse/mainline/8m/softfp/cmse-7.c: This.  Clean up\n+\tdg-skip-if directive for float ABI.\n+\t* gcc.target/arm/cmse/mainline/softfp/cmse-8.c: Move into ...\n+\t* gcc.target/arm/cmse/mainline/8m/softfp/cmse-8.c: This.  Clean up\n+\tdg-skip-if directive for float ABI.\n+\t* gcc.target/arm/cmse/mainline/union-1.c: Move into ...\n+\t* gcc.target/arm/cmse/mainline/8m/union-1.c: This.\n+\t* gcc.target/arm/cmse/mainline/union-2.c: Move into ...\n+\t* gcc.target/arm/cmse/mainline/8m/union-2.c: This.\n+\t* gcc.target/arm/cmse/mainline/8_1m/bitfield-4.c: New file.\n+\t* gcc.target/arm/cmse/mainline/8_1m/bitfield-5.c: New file.\n+\t* gcc.target/arm/cmse/mainline/8_1m/bitfield-6.c: New file.\n+\t* gcc.target/arm/cmse/mainline/8_1m/bitfield-7.c: New file.\n+\t* gcc.target/arm/cmse/mainline/8_1m/bitfield-8.c: New file.\n+\t* gcc.target/arm/cmse/mainline/8_1m/bitfield-9.c: New file.\n+\t* gcc.target/arm/cmse/mainline/8_1m/bitfield-and-union.c: New file.\n+\t* gcc.target/arm/cmse/mainline/8_1m/hard-sp/cmse-13.c: New file.\n+\t* gcc.target/arm/cmse/mainline/8_1m/hard-sp/cmse-5.c: New file.\n+\t* gcc.target/arm/cmse/mainline/8_1m/hard-sp/cmse-7.c: New file.\n+\t* gcc.target/arm/cmse/mainline/8_1m/hard-sp/cmse-8.c: New file.\n+\t* gcc.target/arm/cmse/mainline/8_1m/hard/cmse-13.c: New file.\n+\t* gcc.target/arm/cmse/mainline/8_1m/hard/cmse-5.c: New file.\n+\t* gcc.target/arm/cmse/mainline/8_1m/hard/cmse-7.c: New file.\n+\t* gcc.target/arm/cmse/mainline/8_1m/hard/cmse-8.c: New file.\n+\t* gcc.target/arm/cmse/mainline/8_1m/soft/cmse-13.c: New file.\n+\t* gcc.target/arm/cmse/mainline/8_1m/soft/cmse-5.c: New file.\n+\t* gcc.target/arm/cmse/mainline/8_1m/soft/cmse-7.c: New file.\n+\t* gcc.target/arm/cmse/mainline/8_1m/soft/cmse-8.c: New file.\n+\t* gcc.target/arm/cmse/mainline/8_1m/softfp-sp/cmse-5.c: New file.\n+\t* gcc.target/arm/cmse/mainline/8_1m/softfp-sp/cmse-7.c: New file.\n+\t* gcc.target/arm/cmse/mainline/8_1m/softfp-sp/cmse-8.c: New file.\n+\t* gcc.target/arm/cmse/mainline/8_1m/softfp/cmse-13.c: New file.\n+\t* gcc.target/arm/cmse/mainline/8_1m/softfp/cmse-5.c: New file.\n+\t* gcc.target/arm/cmse/mainline/8_1m/softfp/cmse-7.c: New file.\n+\t* gcc.target/arm/cmse/mainline/8_1m/softfp/cmse-8.c: New file.\n+\t* gcc.target/arm/cmse/mainline/8_1m/union-1.c: New file.\n+\t* gcc.target/arm/cmse/mainline/8_1m/union-2.c: New file.\n+\t* lib/target-supports.exp (check_effective_target_arm_cmse_clear_ok):\n+\tNew procedure.\n+\n 2020-01-16  Mihail-Calin Ionescu <mihail.ionescu@arm.com>\n 2020-01-16  Thomas Preud'homme <thomas.preudhomme@arm.com>\n "}, {"sha": "6d611e130b6f3b544807b767927d99b89071343b", "filename": "gcc/testsuite/gcc.target/arm/cmse/bitfield-1.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fbitfield-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fbitfield-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fbitfield-1.c?ref=e0e4be48a9892195f11d1b608793c3a30b640f54", "patch": "@@ -32,8 +32,10 @@ main (void)\n   return 0;\n }\n \n+/* { dg-final { scan-assembler \"vstr\\tFPCXTNS, \\\\\\[sp, #-4\\\\\\]!\" { target arm_cmse_clear_ok } } } */\n /* { dg-final { scan-assembler \"movw\\tr1, #1855\" } } */\n /* { dg-final { scan-assembler \"movt\\tr1, 65535\" } } */\n /* { dg-final { scan-assembler \"ands\\tr0(, r0)?, r1\" } } */\n+/* { dg-final { scan-assembler \"vldr\\tFPCXTNS, \\\\\\[sp\\\\\\], #4\" { target arm_cmse_clear_ok } } } */\n /* { dg-final { scan-assembler \"bxns\" } } */\n "}, {"sha": "b7ec0a040319545b50590261278f1517bcb22796", "filename": "gcc/testsuite/gcc.target/arm/cmse/bitfield-2.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fbitfield-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fbitfield-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fbitfield-2.c?ref=e0e4be48a9892195f11d1b608793c3a30b640f54", "patch": "@@ -29,8 +29,10 @@ main (void)\n   return 0;\n }\n \n+/* { dg-final { scan-assembler \"vstr\\tFPCXTNS, \\\\\\[sp, #-4\\\\\\]!\" { target arm_cmse_clear_ok } } } */\n /* { dg-final { scan-assembler \"movw\\tr1, #1919\" } } */\n /* { dg-final { scan-assembler \"movt\\tr1, 2047\" } } */\n /* { dg-final { scan-assembler \"ands\\tr0(, r0)?, r1\" } } */\n+/* { dg-final { scan-assembler \"vldr\\tFPCXTNS, \\\\\\[sp\\\\\\], #4\" { target arm_cmse_clear_ok } } } */\n /* { dg-final { scan-assembler \"bxns\" } } */\n "}, {"sha": "7b9c3f0fe061317f71d3122dea7a55ab5311f234", "filename": "gcc/testsuite/gcc.target/arm/cmse/bitfield-3.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fbitfield-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fbitfield-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fbitfield-3.c?ref=e0e4be48a9892195f11d1b608793c3a30b640f54", "patch": "@@ -30,8 +30,9 @@ main (void)\n   return 0;\n }\n \n+/* { dg-final { scan-assembler \"vstr\\tFPCXTNS, \\\\\\[sp, #-4\\\\\\]!\" { target arm_cmse_clear_ok } } } */\n /* { dg-final { scan-assembler \"movw\\tr1, #65535\" } } */\n /* { dg-final { scan-assembler \"movt\\tr1, 63\" } } */\n /* { dg-final { scan-assembler \"ands\\tr0(, r0)?, r1\" } } */\n+/* { dg-final { scan-assembler \"vldr\\tFPCXTNS, \\\\\\[sp\\\\\\], #4\" { target arm_cmse_clear_ok } } } */\n /* { dg-final { scan-assembler \"bxns\" } } */\n-"}, {"sha": "aa0ec8e0b0f0953a5a5cbc2db58413176c2505f3", "filename": "gcc/testsuite/gcc.target/arm/cmse/cmse-1.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fcmse-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fcmse-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fcmse-1.c?ref=e0e4be48a9892195f11d1b608793c3a30b640f54", "patch": "@@ -104,6 +104,8 @@ qux (int_nsfunc_t * callback)\n /* { dg-final { scan-assembler \"__acle_se_qux:\" } } */\n /* { dg-final { scan-assembler \"bic\" } } */\n /* { dg-final { scan-assembler \"push\\t\\{r4, r5, r6\" } } */\n+/* { dg-final { scan-assembler \"vstr\\tFPCXTNS, \\\\\\[sp, #-4\\\\\\]!\" { target arm_cmse_clear_ok } } } */\n+/* { dg-final { scan-assembler \"vldr\\tFPCXTNS, \\\\\\[sp\\\\\\], #4\" { target arm_cmse_clear_ok } } } */\n /* { dg-final { scan-assembler \"msr\\tAPSR_nzcvq\" } } */\n \n int call_callback (void)"}, {"sha": "9ac0142a9fda0ffaf83928c2492f42c53294f0fe", "filename": "gcc/testsuite/gcc.target/arm/cmse/cmse.exp", "status": "modified", "additions": 30, "deletions": 13, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fcmse.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fcmse.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fcmse.exp?ref=e0e4be48a9892195f11d1b608793c3a30b640f54", "patch": "@@ -51,20 +51,37 @@ if {[check_effective_target_arm_arch_v8m_base_ok]} then {\n }\n \n if {[check_effective_target_arm_arch_v8m_main_ok]} then {\n-    set MAINLINE_FLAGS [add_options_for_arm_arch_v8m_main \"\"]\n-    gcc-dg-runtest [lsort [glob $srcdir/$subdir/mainline/*.c]] \\\n-\t    \"$MAINLINE_FLAGS\" $DEFAULT_CFLAGS\n+    set MAINLINE_8M_FLAGS [add_options_for_arm_arch_v8m_main \"\"]\n+    gcc-dg-runtest [lsort [glob $srcdir/$subdir/mainline/8m/*.c]] \\\n+\t    \"$MAINLINE_8M_FLAGS\" $DEFAULT_CFLAGS\n     # Mainline -mfloat-abi=soft\n-    gcc-dg-runtest [lsort [glob $srcdir/$subdir/mainline/soft/*.c]] \\\n-\t    \"$MAINLINE_FLAGS -mfloat-abi=soft\" $DEFAULT_CFLAGS\n-    gcc-dg-runtest [lsort [glob $srcdir/$subdir/mainline/softfp/*.c]] \\\n-\t    \"$MAINLINE_FLAGS\" $DEFAULT_CFLAGS\n-    gcc-dg-runtest [lsort [glob $srcdir/$subdir/mainline/softfp-sp/*.c]] \\\n-\t    \"$MAINLINE_FLAGS\" $DEFAULT_CFLAGS\n-    gcc-dg-runtest [lsort [glob $srcdir/$subdir/mainline/hard/*.c]] \\\n-\t    \"$MAINLINE_FLAGS\" $DEFAULT_CFLAGS\n-    gcc-dg-runtest [lsort [glob $srcdir/$subdir/mainline/hard-sp/*.c]] \\\n-\t    \"$MAINLINE_FLAGS\" $DEFAULT_CFLAGS\n+    gcc-dg-runtest [lsort [glob $srcdir/$subdir/mainline/8m/soft/*.c]] \\\n+\t    \"$MAINLINE_8M_FLAGS -mfloat-abi=soft\" $DEFAULT_CFLAGS\n+    gcc-dg-runtest [lsort [glob $srcdir/$subdir/mainline/8m/softfp/*.c]] \\\n+\t    \"$MAINLINE_8M_FLAGS\" $DEFAULT_CFLAGS\n+    gcc-dg-runtest [lsort [glob $srcdir/$subdir/mainline/8m/softfp-sp/*.c]] \\\n+\t    \"$MAINLINE_8M_FLAGS\" $DEFAULT_CFLAGS\n+    gcc-dg-runtest [lsort [glob $srcdir/$subdir/mainline/8m/hard/*.c]] \\\n+\t    \"$MAINLINE_8M_FLAGS\" $DEFAULT_CFLAGS\n+    gcc-dg-runtest [lsort [glob $srcdir/$subdir/mainline/8m/hard-sp/*.c]] \\\n+\t    \"$MAINLINE_8M_FLAGS\" $DEFAULT_CFLAGS\n+}\n+\n+if {[check_effective_target_arm_arch_v8_1m_main_ok]} then {\n+    set MAINLINE_8_1M_FLAGS [add_options_for_arm_arch_v8_1m_main \"\"]\n+    gcc-dg-runtest [lsort [glob $srcdir/$subdir/mainline/8_1m/*.c]] \\\n+\t    \"$MAINLINE_8_1M_FLAGS\" $DEFAULT_CFLAGS\n+    # Mainline -mfloat-abi=soft\n+    gcc-dg-runtest [lsort [glob $srcdir/$subdir/mainline/8_1m/soft/*.c]] \\\n+\t    \"$MAINLINE_8_1M_FLAGS -mfloat-abi=soft\" $DEFAULT_CFLAGS\n+    gcc-dg-runtest [lsort [glob $srcdir/$subdir/mainline/8_1m/softfp/*.c]] \\\n+\t    \"$MAINLINE_8_1M_FLAGS\" $DEFAULT_CFLAGS\n+    gcc-dg-runtest [lsort [glob $srcdir/$subdir/mainline/8_1m/softfp-sp/*.c]] \\\n+\t    \"$MAINLINE_8_1M_FLAGS\" $DEFAULT_CFLAGS\n+    gcc-dg-runtest [lsort [glob $srcdir/$subdir/mainline/8_1m/hard/*.c]] \\\n+\t    \"$MAINLINE_8_1M_FLAGS\" $DEFAULT_CFLAGS\n+    gcc-dg-runtest [lsort [glob $srcdir/$subdir/mainline/8_1m/hard-sp/*.c]] \\\n+\t    \"$MAINLINE_8_1M_FLAGS\" $DEFAULT_CFLAGS\n }\n \n set LTO_TORTURE_OPTIONS ${saved-lto_torture_options}"}, {"sha": "62c63b888ab49e99fba0a08b69941e73c9a8d33b", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8_1m/bitfield-4.c", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fbitfield-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fbitfield-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fbitfield-4.c?ref=e0e4be48a9892195f11d1b608793c3a30b640f54", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-mcmse\" } */\n \n-#include \"../bitfield-4.x\"\n+#include \"../../bitfield-4.x\"\n \n /* { dg-final { scan-assembler \"movw\\tip, #65535\" } } */\n /* { dg-final { scan-assembler \"movt\\tip, 255\" } } */", "previous_filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/bitfield-4.c"}, {"sha": "b718a70522b86e2bc58900681a781129543f8869", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8_1m/bitfield-5.c", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fbitfield-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fbitfield-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fbitfield-5.c?ref=e0e4be48a9892195f11d1b608793c3a30b640f54", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-mcmse\" } */\n \n-#include \"../bitfield-5.x\"\n+#include \"../../bitfield-5.x\"\n \n /* { dg-final { scan-assembler \"movw\\tip, #8191\" } } */\n /* { dg-final { scan-assembler \"movt\\tip, 255\" } } */\n@@ -13,4 +13,3 @@\n /* { dg-final { scan-assembler \"mov\\tr2, r4\" } } */\n /* { dg-final { scan-assembler \"mov\\tr3, r4\" } } */\n /* { dg-final { scan-assembler \"bl\\t__gnu_cmse_nonsecure_call\" } } */\n-", "previous_filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/bitfield-5.c"}, {"sha": "16536ab4f9ec5782463ab90f404a2e9f6f938850", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8_1m/bitfield-6.c", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fbitfield-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fbitfield-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fbitfield-6.c?ref=e0e4be48a9892195f11d1b608793c3a30b640f54", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-mcmse\" } */\n \n-#include \"../bitfield-6.x\"\n+#include \"../../bitfield-6.x\"\n \n /* { dg-final { scan-assembler \"movw\\tip, #65535\" } } */\n /* { dg-final { scan-assembler \"movt\\tip, 1023\" } } */", "previous_filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/bitfield-6.c"}, {"sha": "0b3cc1e2b2b26e185a9d5d4855d3bea8c70289b5", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8_1m/bitfield-7.c", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fbitfield-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fbitfield-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fbitfield-7.c?ref=e0e4be48a9892195f11d1b608793c3a30b640f54", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-mcmse\" } */\n \n-#include \"../bitfield-7.x\"\n+#include \"../../bitfield-7.x\"\n \n /* { dg-final { scan-assembler \"movw\\tip, #8191\" } } */\n /* { dg-final { scan-assembler \"movt\\tip, 255\" } } */\n@@ -13,4 +13,3 @@\n /* { dg-final { scan-assembler \"mov\\tr2, r4\" } } */\n /* { dg-final { scan-assembler \"mov\\tr3, r4\" } } */\n /* { dg-final { scan-assembler \"bl\\t__gnu_cmse_nonsecure_call\" } } */\n-", "previous_filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/bitfield-7.c"}, {"sha": "914ea39626f2f72eac8c9c1cb495b0855e58f5e1", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8_1m/bitfield-8.c", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fbitfield-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fbitfield-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fbitfield-8.c?ref=e0e4be48a9892195f11d1b608793c3a30b640f54", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-mcmse\" } */\n \n-#include \"../bitfield-8.x\"\n+#include \"../../bitfield-8.x\"\n \n /* { dg-final { scan-assembler \"mov\\tip, #255\" } } */\n /* { dg-final { scan-assembler \"and\\tr0, r0, ip\" } } */", "previous_filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/bitfield-8.c"}, {"sha": "32435d255805331c7c56a096675b7a2af3286e5e", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8_1m/bitfield-9.c", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fbitfield-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fbitfield-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fbitfield-9.c?ref=e0e4be48a9892195f11d1b608793c3a30b640f54", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-mcmse\" } */\n \n-#include \"../bitfield-9.x\"\n+#include \"../../bitfield-9.x\"\n \n /* { dg-final { scan-assembler \"movw\\tip, #1799\" } } */\n /* { dg-final { scan-assembler \"and\\tr0, r0, ip\" } } */", "previous_filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/bitfield-9.c"}, {"sha": "68f9e2254c97d7b9817f24cb4dc4315dc876fb26", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8_1m/bitfield-and-union.c", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fbitfield-and-union.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fbitfield-and-union.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fbitfield-and-union.c?ref=e0e4be48a9892195f11d1b608793c3a30b640f54", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-mcmse\" } */\n \n-#include \"../bitfield-and-union.x\"\n+#include \"../../bitfield-and-union.x\"\n \n /* { dg-final { scan-assembler \"movw\\tip, #7939\" } } */\n /* { dg-final { scan-assembler \"movt\\tip, 15\" } } */", "previous_filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/bitfield-and-union.c"}, {"sha": "eb655b5504e58dc842853c8cb874c5cef3b82aa6", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8_1m/hard-sp/cmse-13.c", "status": "renamed", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fhard-sp%2Fcmse-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fhard-sp%2Fcmse-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fhard-sp%2Fcmse-13.c?ref=e0e4be48a9892195f11d1b608793c3a30b640f54", "patch": "@@ -1,9 +1,9 @@\n /* { dg-do compile } */\n /* { dg-options \"-mcmse -mfloat-abi=hard -mfpu=fpv5-sp-d16\" }  */\n-/* { dg-skip-if \"Do not combine float-abi= hard | soft | softfp\" {*-*-*} {\"-mfloat-abi=soft\" -mfloat-abi=softfp } {\"\"} } */\n+/* { dg-skip-if \"Incompatible float ABI\" { *-*-* } { \"-mfloat-abi=*\" } { \"-mfloat-abi=hard\" } } */\n /* { dg-skip-if \"Skip these if testing double precision\" {*-*-*} {\"-mfpu=fpv[4-5]-d16\"} {\"\"} } */\n \n-#include \"../../cmse-13.x\"\n+#include \"../../../cmse-13.x\"\n \n /* Checks for saving and clearing prior to function call.  */\n /* { dg-final { scan-assembler \"lsrs\\tr4, r4, #1\" } } */\n@@ -31,4 +31,3 @@\n \n /* Now we check that we use the correct intrinsic to call.  */\n /* { dg-final { scan-assembler \"bl\\t__gnu_cmse_nonsecure_call\" } } */\n-", "previous_filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/hard-sp/cmse-13.c"}, {"sha": "ab266af7092afbce868792446124c291188e8a90", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8_1m/hard-sp/cmse-5.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fhard-sp%2Fcmse-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fhard-sp%2Fcmse-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fhard-sp%2Fcmse-5.c?ref=e0e4be48a9892195f11d1b608793c3a30b640f54", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mcmse -mfloat-abi=hard -mfpu=fpv5-sp-d16\" }  */\n+/* { dg-skip-if \"Incompatible float ABI\" { *-*-* } { \"-mfloat-abi=*\" } { \"-mfloat-abi=hard\" } } */\n+/* { dg-skip-if \"Skip these if testing double precision\" {*-*-*} {\"-mfpu=fpv[4-5]-d16\"} {\"\"} } */\n+\n+#include \"../../../cmse-5.x\"\n+\n+/* { dg-final { scan-assembler \"vstr\\tFPCXTNS, \\\\\\[sp, #-4\\\\\\]!\" } } */\n+/* { dg-final { scan-assembler \"mov\\tr0, lr\" } } */\n+/* { dg-final { scan-assembler \"mov\\tr1, lr\" } } */\n+/* { dg-final { scan-assembler \"mov\\tr2, lr\" } } */\n+/* { dg-final { scan-assembler \"mov\\tr3, lr\" } } */\n+/* { dg-final { scan-assembler-not \"vmov\\.f32\\ts0, #1\\.0\" } } */\n+/* { dg-final { scan-assembler \"vmov\\.f32\\ts1, #1\\.0\" } } */\n+/* { dg-final { scan-assembler \"vmov\\.f32\\ts2, #1\\.0\" } } */\n+/* { dg-final { scan-assembler \"vmov\\.f32\\ts3, #1\\.0\" } } */\n+/* { dg-final { scan-assembler \"vmov\\.f32\\ts4, #1\\.0\" } } */\n+/* { dg-final { scan-assembler \"vmov\\.f32\\ts5, #1\\.0\" } } */\n+/* { dg-final { scan-assembler \"vmov\\.f32\\ts6, #1\\.0\" } } */\n+/* { dg-final { scan-assembler \"vmov\\.f32\\ts7, #1\\.0\" } } */\n+/* { dg-final { scan-assembler \"vmov\\.f32\\ts8, #1\\.0\" } } */\n+/* { dg-final { scan-assembler \"vmov\\.f32\\ts9, #1\\.0\" } } */\n+/* { dg-final { scan-assembler \"vmov\\.f32\\ts10, #1\\.0\" } } */\n+/* { dg-final { scan-assembler \"vmov\\.f32\\ts11, #1\\.0\" } } */\n+/* { dg-final { scan-assembler \"vmov\\.f32\\ts12, #1\\.0\" } } */\n+/* { dg-final { scan-assembler \"vmov\\.f32\\ts13, #1\\.0\" } } */\n+/* { dg-final { scan-assembler \"vmov\\.f32\\ts14, #1\\.0\" } } */\n+/* { dg-final { scan-assembler \"vmov\\.f32\\ts15, #1\\.0\" } } */\n+/* { dg-final { scan-assembler \"msr\\tAPSR_nzcvq, lr\" { target { ! arm_dsp } } } } */\n+/* { dg-final { scan-assembler \"msr\\tAPSR_nzcvqg, lr\" { target arm_dsp } } } */\n+/* { dg-final { scan-assembler \"vldr\\tFPCXTNS, \\\\\\[sp\\\\\\], #4\" } } */\n+/* { dg-final { scan-assembler \"bxns\" } } */"}, {"sha": "fd1a24b3258e8403394dac98ff7c4712b0eb7a1b", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8_1m/hard-sp/cmse-7.c", "status": "renamed", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fhard-sp%2Fcmse-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fhard-sp%2Fcmse-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fhard-sp%2Fcmse-7.c?ref=e0e4be48a9892195f11d1b608793c3a30b640f54", "patch": "@@ -1,9 +1,9 @@\n /* { dg-do compile } */\n /* { dg-options \"-mcmse -mfloat-abi=hard -mfpu=fpv5-sp-d16\" }  */\n-/* { dg-skip-if \"Do not combine float-abi= hard | soft | softfp\" {*-*-*} {\"-mfloat-abi=soft\" -mfloat-abi=softfp } {\"\"} } */\n+/* { dg-skip-if \"Incompatible float ABI\" { *-*-* } { \"-mfloat-abi=*\" } { \"-mfloat-abi=hard\" } } */\n /* { dg-skip-if \"Skip these if testing double precision\" {*-*-*} {\"-mfpu=fpv[4-5]-d16\"} {\"\"} } */\n \n-#include \"../../cmse-7.x\"\n+#include \"../../../cmse-7.x\"\n \n /* Checks for saving and clearing prior to function call.  */\n /* { dg-final { scan-assembler \"lsrs\\tr4, r4, #1\" } } */\n@@ -31,4 +31,3 @@\n \n /* Now we check that we use the correct intrinsic to call.  */\n /* { dg-final { scan-assembler \"bl\\t__gnu_cmse_nonsecure_call\" } } */\n-", "previous_filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/hard-sp/cmse-7.c"}, {"sha": "d8f9b7758d50f74f777fcda22f3f6714ff28bb96", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8_1m/hard-sp/cmse-8.c", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fhard-sp%2Fcmse-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fhard-sp%2Fcmse-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fhard-sp%2Fcmse-8.c?ref=e0e4be48a9892195f11d1b608793c3a30b640f54", "patch": "@@ -1,9 +1,9 @@\n /* { dg-do compile } */\n /* { dg-options \"-mcmse -mfloat-abi=hard -mfpu=fpv5-sp-d16\" }  */\n-/* { dg-skip-if \"Do not combine float-abi= hard | soft | softfp\" {*-*-*} {\"-mfloat-abi=soft\" -mfloat-abi=softfp } {\"\"} } */\n+/* { dg-skip-if \"Incompatible float ABI\" { *-*-* } { \"-mfloat-abi=*\" } { \"-mfloat-abi=hard\" } } */\n /* { dg-skip-if \"Skip these if testing double precision\" {*-*-*} {\"-mfpu=fpv[4-5]-d16\"} {\"\"} } */\n \n-#include \"../../cmse-8.x\"\n+#include \"../../../cmse-8.x\"\n \n /* Checks for saving and clearing prior to function call.  */\n /* { dg-final { scan-assembler \"lsrs\\tr4, r4, #1\" } } */", "previous_filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/hard-sp/cmse-8.c"}, {"sha": "4878c6ef9157abff003780fbf6401db8eb3ef2f3", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8_1m/hard/cmse-13.c", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fhard%2Fcmse-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fhard%2Fcmse-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fhard%2Fcmse-13.c?ref=e0e4be48a9892195f11d1b608793c3a30b640f54", "patch": "@@ -1,9 +1,9 @@\n /* { dg-do compile } */\n /* { dg-options \"-mcmse -mfloat-abi=hard -mfpu=fpv5-d16\" }  */\n-/* { dg-skip-if \"Do not combine float-abi= hard | soft | softfp\" {*-*-*} {\"-mfloat-abi=soft\" -mfloat-abi=softfp } {\"\"} } */\n+/* { dg-skip-if \"Incompatible float ABI\" { *-*-* } { \"-mfloat-abi=*\" } { \"-mfloat-abi=hard\" } } */\n /* { dg-skip-if \"Skip these if testing single precision\" {*-*-*} {\"-mfpu=*-sp-*\"} {\"\"} } */\n \n-#include \"../../cmse-13.x\"\n+#include \"../../../cmse-13.x\"\n \n /* Checks for saving and clearing prior to function call.  */\n /* { dg-final { scan-assembler \"lsrs\\tr4, r4, #1\" } } */", "previous_filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/hard/cmse-13.c"}, {"sha": "82aad2d13d6b170c92fd2c2345ab76f41e383013", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8_1m/hard/cmse-5.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fhard%2Fcmse-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fhard%2Fcmse-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fhard%2Fcmse-5.c?ref=e0e4be48a9892195f11d1b608793c3a30b640f54", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mcmse -mfloat-abi=hard -mfpu=fpv5-d16\" }  */\n+/* { dg-skip-if \"Incompatible float ABI\" { *-*-* } { \"-mfloat-abi=*\" } { \"-mfloat-abi=hard\" } } */\n+/* { dg-skip-if \"Skip these if testing single precision\" {*-*-*} {\"-mfpu=*-sp-*\"} {\"\"} } */\n+\n+#include \"../../../cmse-5.x\"\n+\n+/* { dg-final { scan-assembler \"vstr\\tFPCXTNS, \\\\\\[sp, #-4\\\\\\]!\" } } */\n+/* { dg-final { scan-assembler \"mov\\tr0, lr\" } } */\n+/* { dg-final { scan-assembler \"mov\\tr1, lr\" } } */\n+/* { dg-final { scan-assembler \"mov\\tr2, lr\" } } */\n+/* { dg-final { scan-assembler \"mov\\tr3, lr\" } } */\n+/* { dg-final { scan-assembler-not \"vmov\\.f32\\ts0, #1\\.0\" } } */\n+/* { dg-final { scan-assembler \"vmov\\.f32\\ts1, #1\\.0\" } } */\n+/* { dg-final { scan-assembler \"vmov\\.f64\\td1, #1\\.0\" } } */\n+/* { dg-final { scan-assembler \"vmov\\.f64\\td2, #1\\.0\" } } */\n+/* { dg-final { scan-assembler \"vmov\\.f64\\td3, #1\\.0\" } } */\n+/* { dg-final { scan-assembler \"vmov\\.f64\\td4, #1\\.0\" } } */\n+/* { dg-final { scan-assembler \"vmov\\.f64\\td5, #1\\.0\" } } */\n+/* { dg-final { scan-assembler \"vmov\\.f64\\td6, #1\\.0\" } } */\n+/* { dg-final { scan-assembler \"vmov\\.f64\\td7, #1\\.0\" } } */\n+/* { dg-final { scan-assembler \"msr\\tAPSR_nzcvq, lr\" { target { ! arm_dsp } } } } */\n+/* { dg-final { scan-assembler \"msr\\tAPSR_nzcvqg, lr\" { target arm_dsp } } } */\n+/* { dg-final { scan-assembler \"vldr\\tFPCXTNS, \\\\\\[sp\\\\\\], #4\" } } */\n+/* { dg-final { scan-assembler \"bxns\" } } */"}, {"sha": "8e054c2aeebac4bd3f164b00ad867bc2d72cb674", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8_1m/hard/cmse-7.c", "status": "renamed", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fhard%2Fcmse-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fhard%2Fcmse-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fhard%2Fcmse-7.c?ref=e0e4be48a9892195f11d1b608793c3a30b640f54", "patch": "@@ -1,9 +1,9 @@\n /* { dg-do compile } */\n /* { dg-options \"-mcmse -mfloat-abi=hard -mfpu=fpv5-d16\" }  */\n-/* { dg-skip-if \"Do not combine float-abi= hard | soft | softfp\" {*-*-*} {\"-mfloat-abi=soft\" -mfloat-abi=softfp } {\"\"} } */\n+/* { dg-skip-if \"Incompatible float ABI\" { *-*-* } { \"-mfloat-abi=*\" } { \"-mfloat-abi=hard\" } } */\n /* { dg-skip-if \"Skip these if testing single precision\" {*-*-*} {\"-mfpu=*-sp-*\"} {\"\"} } */\n \n-#include \"../../cmse-7.x\"\n+#include \"../../../cmse-7.x\"\n \n /* Checks for saving and clearing prior to function call.  */\n /* { dg-final { scan-assembler \"lsrs\\tr4, r4, #1\" } } */\n@@ -23,4 +23,3 @@\n \n /* Now we check that we use the correct intrinsic to call.  */\n /* { dg-final { scan-assembler \"bl\\t__gnu_cmse_nonsecure_call\" } } */\n-", "previous_filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/hard/cmse-7.c"}, {"sha": "e74cea7697ba1c12ebeef21636d1b8fd60b42677", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8_1m/hard/cmse-8.c", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fhard%2Fcmse-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fhard%2Fcmse-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fhard%2Fcmse-8.c?ref=e0e4be48a9892195f11d1b608793c3a30b640f54", "patch": "@@ -1,9 +1,9 @@\n /* { dg-do compile } */\n /* { dg-options \"-mcmse -mfloat-abi=hard -mfpu=fpv5-d16\" }  */\n-/* { dg-skip-if \"Do not combine float-abi= hard | soft | softfp\" {*-*-*} {\"-mfloat-abi=soft\" -mfloat-abi=softfp } {\"\"} } */\n+/* { dg-skip-if \"Incompatible float ABI\" { *-*-* } { \"-mfloat-abi=*\" } { \"-mfloat-abi=hard\" } } */\n /* { dg-skip-if \"Skip these if testing single precision\" {*-*-*} {\"-mfpu=*-sp-*\"} {\"\"} } */\n \n-#include \"../../cmse-8.x\"\n+#include \"../../../cmse-8.x\"\n \n /* Checks for saving and clearing prior to function call.  */\n /* { dg-final { scan-assembler \"lsrs\\tr4, r4, #1\" } } */", "previous_filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/hard/cmse-8.c"}, {"sha": "4c4a0c956fa574f8fa25e4222ce9274bfbc5e32d", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8_1m/soft/cmse-13.c", "status": "renamed", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fsoft%2Fcmse-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fsoft%2Fcmse-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fsoft%2Fcmse-13.c?ref=e0e4be48a9892195f11d1b608793c3a30b640f54", "patch": "@@ -1,8 +1,8 @@\n /* { dg-do compile } */\n /* { dg-options \"-mcmse -mfloat-abi=soft\" }  */\n-/* { dg-skip-if \"Do not combine float-abi= hard | soft | softfp\" {*-*-*} {\"-mfloat-abi=hard\" -mfloat-abi=softfp } {\"\"} } */\n+/* { dg-skip-if \"Incompatible float ABI\" { *-*-* } { \"-mfloat-abi=*\" } { \"-mfloat-abi=soft\" } } */\n \n-#include \"../../cmse-13.x\"\n+#include \"../../../cmse-13.x\"\n \n /* Checks for saving and clearing prior to function call.  */\n /* { dg-final { scan-assembler \"lsrs\\tr4, r4, #1\" } } */\n@@ -16,4 +16,3 @@\n \n /* Now we check that we use the correct intrinsic to call.  */\n /* { dg-final { scan-assembler \"bl\\t__gnu_cmse_nonsecure_call\" } } */\n-", "previous_filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/soft/cmse-13.c"}, {"sha": "c684d79fae00feb8e15e9f142735f005473b6011", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8_1m/soft/cmse-5.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fsoft%2Fcmse-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fsoft%2Fcmse-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fsoft%2Fcmse-5.c?ref=e0e4be48a9892195f11d1b608793c3a30b640f54", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mcmse -mfloat-abi=soft\" }  */\n+/* { dg-skip-if \"Incompatible float ABI\" { *-*-* } { \"-mfloat-abi=*\" } { \"-mfloat-abi=soft\" } } */\n+\n+#include \"../../../cmse-5.x\"\n+\n+/* { dg-final { scan-assembler \"vstr\\tFPCXTNS, \\\\\\[sp, #-4\\\\\\]!\" } } */\n+/* { dg-final { scan-assembler \"mov\\tr1, lr\" } } */\n+/* { dg-final { scan-assembler \"mov\\tr2, lr\" } } */\n+/* { dg-final { scan-assembler \"mov\\tr3, lr\" } } */\n+/* { dg-final { scan-assembler \"mov\\tip, lr\" } } */\n+/* { dg-final { scan-assembler-not \"vmov\" } } */\n+/* { dg-final { scan-assembler-not \"vmsr\" } } */\n+/* { dg-final { scan-assembler \"msr\\tAPSR_nzcvq, lr\" { target { ! arm_dsp } } } } */\n+/* { dg-final { scan-assembler \"msr\\tAPSR_nzcvqg, lr\" { target arm_dsp } } } */\n+/* { dg-final { scan-assembler \"vldr\\tFPCXTNS, \\\\\\[sp\\\\\\], #4\" } } */\n+/* { dg-final { scan-assembler \"bxns\" } } */"}, {"sha": "4cb6a54a0a5b02954519e64503d7c2c4c0e4750d", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8_1m/soft/cmse-7.c", "status": "renamed", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fsoft%2Fcmse-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fsoft%2Fcmse-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fsoft%2Fcmse-7.c?ref=e0e4be48a9892195f11d1b608793c3a30b640f54", "patch": "@@ -1,8 +1,8 @@\n /* { dg-do compile } */\n /* { dg-options \"-mcmse -mfloat-abi=soft\" }  */\n-/* { dg-skip-if \"Do not combine float-abi= hard | soft | softfp\" {*-*-*} {\"-mfloat-abi=hard\" -mfloat-abi=softfp } {\"\"} } */\n+/* { dg-skip-if \"Incompatible float ABI\" { *-*-* } { \"-mfloat-abi=*\" } { \"-mfloat-abi=soft\" } } */\n \n-#include \"../../cmse-7.x\"\n+#include \"../../../cmse-7.x\"\n \n /* Checks for saving and clearing prior to function call.  */\n /* { dg-final { scan-assembler \"lsrs\\tr4, r4, #1\" } } */\n@@ -16,4 +16,3 @@\n \n /* Now we check that we use the correct intrinsic to call.  */\n /* { dg-final { scan-assembler \"bl\\t__gnu_cmse_nonsecure_call\" } } */\n-", "previous_filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/soft/cmse-7.c"}, {"sha": "4764b2fadfb38661764b909cdb2c9cd109e24df0", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8_1m/soft/cmse-8.c", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fsoft%2Fcmse-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fsoft%2Fcmse-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fsoft%2Fcmse-8.c?ref=e0e4be48a9892195f11d1b608793c3a30b640f54", "patch": "@@ -1,8 +1,8 @@\n /* { dg-do compile } */\n /* { dg-options \"-mcmse -mfloat-abi=soft\" }  */\n-/* { dg-skip-if \"Do not combine float-abi= hard | soft | softfp\" {*-*-*} {\"-mfloat-abi=hard\" -mfloat-abi=softfp } {\"\"} } */\n+/* { dg-skip-if \"Incompatible float ABI\" { *-*-* } { \"-mfloat-abi=*\" } { \"-mfloat-abi=soft\" } } */\n \n-#include \"../../cmse-8.x\"\n+#include \"../../../cmse-8.x\"\n \n /* Checks for saving and clearing prior to function call.  */\n /* { dg-final { scan-assembler \"lsrs\\tr4, r4, #1\" } } */", "previous_filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/soft/cmse-8.c"}, {"sha": "9b2e7565d24ff52138b0fb90a1e6268aa4c515a0", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8_1m/softfp-sp/cmse-5.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fsoftfp-sp%2Fcmse-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fsoftfp-sp%2Fcmse-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fsoftfp-sp%2Fcmse-5.c?ref=e0e4be48a9892195f11d1b608793c3a30b640f54", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mcmse -mfloat-abi=softfp -mfpu=fpv5-sp-d16\" }  */\n+/* { dg-skip-if \"Incompatible float ABI\" { *-*-* } { \"-mfloat-abi=*\" } { \"-mfloat-abi=softfp\" } } */\n+/* { dg-skip-if \"Skip these if testing double precision\" {*-*-*} {\"-mfpu=fpv[4-5]-d16\"} {\"\"} } */\n+\n+#include \"../../../cmse-5.x\"\n+\n+/* { dg-final { scan-assembler \"__acle_se_foo:\" } } */\n+/* { dg-final { scan-assembler \"vstr\\tFPCXTNS, \\\\\\[sp, #-4\\\\\\]!\" } } */\n+/* { dg-final { scan-assembler-not \"mov\\tr0, lr\" } } */\n+/* { dg-final { scan-assembler \"mov\\tr1, lr\" } } */\n+/* { dg-final { scan-assembler \"mov\\tr2, lr\" } } */\n+/* { dg-final { scan-assembler \"mov\\tr3, lr\" } } */\n+/* { dg-final { scan-assembler \"vmov\\.f32\\ts0, #1\\.0\" } } */\n+/* { dg-final { scan-assembler \"vmov\\.f32\\ts1, #1\\.0\" } } */\n+/* { dg-final { scan-assembler \"vmov\\.f32\\ts2, #1\\.0\" } } */\n+/* { dg-final { scan-assembler \"vmov\\.f32\\ts3, #1\\.0\" } } */\n+/* { dg-final { scan-assembler \"vmov\\.f32\\ts4, #1\\.0\" } } */\n+/* { dg-final { scan-assembler \"vmov\\.f32\\ts5, #1\\.0\" } } */\n+/* { dg-final { scan-assembler \"vmov\\.f32\\ts6, #1\\.0\" } } */\n+/* { dg-final { scan-assembler \"vmov\\.f32\\ts7, #1\\.0\" } } */\n+/* { dg-final { scan-assembler \"vmov\\.f32\\ts8, #1\\.0\" } } */\n+/* { dg-final { scan-assembler \"vmov\\.f32\\ts9, #1\\.0\" } } */\n+/* { dg-final { scan-assembler \"vmov\\.f32\\ts10, #1\\.0\" } } */\n+/* { dg-final { scan-assembler \"vmov\\.f32\\ts11, #1\\.0\" } } */\n+/* { dg-final { scan-assembler \"vmov\\.f32\\ts12, #1\\.0\" } } */\n+/* { dg-final { scan-assembler \"vmov\\.f32\\ts13, #1\\.0\" } } */\n+/* { dg-final { scan-assembler \"vmov\\.f32\\ts14, #1\\.0\" } } */\n+/* { dg-final { scan-assembler \"vmov\\.f32\\ts15, #1\\.0\" } } */\n+/* { dg-final { scan-assembler \"msr\\tAPSR_nzcvq, lr\" { target { ! arm_dsp } } } } */\n+/* { dg-final { scan-assembler \"msr\\tAPSR_nzcvqg, lr\" { target arm_dsp } } } */\n+/* { dg-final { scan-assembler \"vldr\\tFPCXTNS, \\\\\\[sp\\\\\\], #4\" } } */\n+/* { dg-final { scan-assembler \"bxns\" } } */"}, {"sha": "9e93d75c35de5e3dde1074fb99da94edc2648319", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8_1m/softfp-sp/cmse-7.c", "status": "renamed", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fsoftfp-sp%2Fcmse-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fsoftfp-sp%2Fcmse-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fsoftfp-sp%2Fcmse-7.c?ref=e0e4be48a9892195f11d1b608793c3a30b640f54", "patch": "@@ -1,9 +1,9 @@\n /* { dg-do compile } */\n /* { dg-options \"-mcmse -mfloat-abi=softfp -mfpu=fpv5-sp-d16\" }  */\n-/* { dg-skip-if \"Do not combine float-abi= hard | soft | softfp\" {*-*-*} {\"-mfloat-abi=soft\" -mfloat-abi=hard } {\"\"} } */\n+/* { dg-skip-if \"Incompatible float ABI\" { *-*-* } { \"-mfloat-abi=*\" } { \"-mfloat-abi=softfp\" } } */\n /* { dg-skip-if \"Skip these if testing double precision\" {*-*-*} {\"-mfpu=fpv[4-5]-d16\"} {\"\"} } */\n \n-#include \"../../cmse-7.x\"\n+#include \"../../../cmse-7.x\"\n \n /* Checks for saving and clearing prior to function call.  */\n /* { dg-final { scan-assembler \"lsrs\\tr4, r4, #1\" } } */\n@@ -15,4 +15,3 @@\n \n /* Now we check that we use the correct intrinsic to call.  */\n /* { dg-final { scan-assembler \"bl\\t__gnu_cmse_nonsecure_call\" } } */\n-", "previous_filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/softfp-sp/cmse-7.c"}, {"sha": "566889e66c8cea6ca32348f48742d2c325336995", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8_1m/softfp-sp/cmse-8.c", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fsoftfp-sp%2Fcmse-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fsoftfp-sp%2Fcmse-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fsoftfp-sp%2Fcmse-8.c?ref=e0e4be48a9892195f11d1b608793c3a30b640f54", "patch": "@@ -1,9 +1,9 @@\n /* { dg-do compile } */\n /* { dg-options \"-mcmse -mfloat-abi=softfp -mfpu=fpv5-sp-d16\" }  */\n-/* { dg-skip-if \"Do not combine float-abi= hard | soft | softfp\" {*-*-*} {\"-mfloat-abi=soft\" -mfloat-abi=hard } {\"\"} } */\n+/* { dg-skip-if \"Incompatible float ABI\" { *-*-* } { \"-mfloat-abi=*\" } { \"-mfloat-abi=softfp\" } } */\n /* { dg-skip-if \"Skip these if testing double precision\" {*-*-*} {\"-mfpu=fpv[4-5]-d16\"} {\"\"} } */\n \n-#include \"../../cmse-8.x\"\n+#include \"../../../cmse-8.x\"\n \n /* Checks for saving and clearing prior to function call.  */\n /* { dg-final { scan-assembler \"lsrs\\tr4, r4, #1\" } } */", "previous_filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/softfp-sp/cmse-8.c"}, {"sha": "0ee28de4123c5e09df7c5d1046e0bd555af6f0fa", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8_1m/softfp/cmse-13.c", "status": "renamed", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fsoftfp%2Fcmse-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fsoftfp%2Fcmse-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fsoftfp%2Fcmse-13.c?ref=e0e4be48a9892195f11d1b608793c3a30b640f54", "patch": "@@ -1,9 +1,9 @@\n /* { dg-do compile } */\n /* { dg-options \"-mcmse -mfloat-abi=softfp -mfpu=fpv5-d16\" }  */\n-/* { dg-skip-if \"Do not combine float-abi= hard | soft | softfp\" {*-*-*} {\"-mfloat-abi=soft\" -mfloat-abi=hard } {\"\"} } */\n+/* { dg-skip-if \"Incompatible float ABI\" { *-*-* } { \"-mfloat-abi=*\" } { \"-mfloat-abi=softfp\" } } */\n /* { dg-skip-if \"Skip these if testing single precision\" {*-*-*} {\"-mfpu=*-sp-*\"} {\"\"} } */\n \n-#include \"../../cmse-13.x\"\n+#include \"../../../cmse-13.x\"\n \n /* Checks for saving and clearing prior to function call.  */\n /* { dg-final { scan-assembler \"lsrs\\tr4, r4, #1\" } } */\n@@ -14,4 +14,3 @@\n \n /* Now we check that we use the correct intrinsic to call.  */\n /* { dg-final { scan-assembler \"bl\\t__gnu_cmse_nonsecure_call\" } } */\n-", "previous_filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/softfp/cmse-13.c"}, {"sha": "5af1fdb934ce5aa5afd8d096122b6e9b55591bd9", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8_1m/softfp/cmse-5.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fsoftfp%2Fcmse-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fsoftfp%2Fcmse-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fsoftfp%2Fcmse-5.c?ref=e0e4be48a9892195f11d1b608793c3a30b640f54", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mcmse -mfloat-abi=softfp -mfpu=fpv5-d16\" }  */\n+/* { dg-skip-if \"Incompatible float ABI\" { *-*-* } { \"-mfloat-abi=*\" } { \"-mfloat-abi=softfp\" } } */\n+/* { dg-skip-if \"Skip these if testing single precision\" {*-*-*} {\"-mfpu=*-sp-*\"} {\"\"} } */\n+\n+#include \"../../../cmse-5.x\"\n+\n+/* { dg-final { scan-assembler \"__acle_se_foo:\" } } */\n+/* { dg-final { scan-assembler \"vstr\\tFPCXTNS, \\\\\\[sp, #-4\\\\\\]!\" } } */\n+/* { dg-final { scan-assembler-not \"mov\\tr0, lr\" } } */\n+/* { dg-final { scan-assembler \"mov\\tr1, lr\" } } */\n+/* { dg-final { scan-assembler \"mov\\tr2, lr\" } } */\n+/* { dg-final { scan-assembler \"mov\\tr3, lr\" } } */\n+/* { dg-final { scan-assembler \"vmov\\.f64\\td0, #1\\.0\" } } */\n+/* { dg-final { scan-assembler \"vmov\\.f64\\td1, #1\\.0\" } } */\n+/* { dg-final { scan-assembler \"vmov\\.f64\\td2, #1\\.0\" } } */\n+/* { dg-final { scan-assembler \"vmov\\.f64\\td3, #1\\.0\" } } */\n+/* { dg-final { scan-assembler \"vmov\\.f64\\td4, #1\\.0\" } } */\n+/* { dg-final { scan-assembler \"vmov\\.f64\\td5, #1\\.0\" } } */\n+/* { dg-final { scan-assembler \"vmov\\.f64\\td6, #1\\.0\" } } */\n+/* { dg-final { scan-assembler \"vmov\\.f64\\td7, #1\\.0\" } } */\n+/* { dg-final { scan-assembler \"msr\\tAPSR_nzcvq, lr\" { target { ! arm_dsp } } } } */\n+/* { dg-final { scan-assembler \"msr\\tAPSR_nzcvqg, lr\" { target arm_dsp } } } */\n+/* { dg-final { scan-assembler \"vldr\\tFPCXTNS, \\\\\\[sp\\\\\\], #4\" } } */\n+/* { dg-final { scan-assembler \"bxns\" } } */"}, {"sha": "1c38290e79d18a8f94e44b974c54220e553a9a49", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8_1m/softfp/cmse-7.c", "status": "renamed", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fsoftfp%2Fcmse-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fsoftfp%2Fcmse-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fsoftfp%2Fcmse-7.c?ref=e0e4be48a9892195f11d1b608793c3a30b640f54", "patch": "@@ -1,9 +1,9 @@\n /* { dg-do compile } */\n /* { dg-options \"-mcmse -mfloat-abi=softfp -mfpu=fpv5-d16\" }  */\n-/* { dg-skip-if \"Do not combine float-abi= hard | soft | softfp\" {*-*-*} {\"-mfloat-abi=soft\" -mfloat-abi=hard } {\"\"} } */\n+/* { dg-skip-if \"Incompatible float ABI\" { *-*-* } { \"-mfloat-abi=*\" } { \"-mfloat-abi=softfp\" } } */\n /* { dg-skip-if \"Skip these if testing single precision\" {*-*-*} {\"-mfpu=*-sp-*\"} {\"\"} } */\n \n-#include \"../../cmse-7.x\"\n+#include \"../../../cmse-7.x\"\n \n /* Checks for saving and clearing prior to function call.  */\n /* { dg-final { scan-assembler \"lsrs\\tr4, r4, #1\" } } */\n@@ -15,4 +15,3 @@\n \n /* Now we check that we use the correct intrinsic to call.  */\n /* { dg-final { scan-assembler \"bl\\t__gnu_cmse_nonsecure_call\" } } */\n-", "previous_filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/softfp/cmse-7.c"}, {"sha": "39c2e72f968ce9f30d36bd347544ca26b3dfad8a", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8_1m/softfp/cmse-8.c", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fsoftfp%2Fcmse-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fsoftfp%2Fcmse-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fsoftfp%2Fcmse-8.c?ref=e0e4be48a9892195f11d1b608793c3a30b640f54", "patch": "@@ -1,9 +1,9 @@\n /* { dg-do compile } */\n /* { dg-options \"-mcmse -mfloat-abi=softfp -mfpu=fpv5-d16\" }  */\n-/* { dg-skip-if \"Do not combine float-abi= hard | soft | softfp\" {*-*-*} {\"-mfloat-abi=soft\" -mfloat-abi=hard } {\"\"} } */\n+/* { dg-skip-if \"Incompatible float ABI\" { *-*-* } { \"-mfloat-abi=*\" } { \"-mfloat-abi=softfp\" } } */\n /* { dg-skip-if \"Skip these if testing single precision\" {*-*-*} {\"-mfpu=*-sp-*\"} {\"\"} } */\n \n-#include \"../../cmse-8.x\"\n+#include \"../../../cmse-8.x\"\n \n /* Checks for saving and clearing prior to function call.  */\n /* { dg-final { scan-assembler \"lsrs\\tr4, r4, #1\" } } */", "previous_filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/softfp/cmse-8.c"}, {"sha": "d51db020c7707fa714364b10dd3ec5896a9dad17", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8_1m/union-1.c", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Funion-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Funion-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Funion-1.c?ref=e0e4be48a9892195f11d1b608793c3a30b640f54", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-mcmse\" } */\n \n-#include \"../union-1.x\"\n+#include \"../../union-1.x\"\n \n /* { dg-final { scan-assembler \"movw\\tip, #8063\" } } */\n /* { dg-final { scan-assembler \"movt\\tip, 63\" } } */\n@@ -13,4 +13,3 @@\n /* { dg-final { scan-assembler \"mov\\tr2, r4\" } } */\n /* { dg-final { scan-assembler \"mov\\tr3, r4\" } } */\n /* { dg-final { scan-assembler \"bl\\t__gnu_cmse_nonsecure_call\" } } */\n-", "previous_filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/union-1.c"}, {"sha": "131afbbf4289b238438c53ab9ea55d13b8567513", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8_1m/union-2.c", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Funion-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Funion-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Funion-2.c?ref=e0e4be48a9892195f11d1b608793c3a30b640f54", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-mcmse\" } */\n \n-#include \"../union-2.x\"\n+#include \"../../union-2.x\"\n \n /* { dg-final { scan-assembler \"movw\\tip, #8191\" } } */\n /* { dg-final { scan-assembler \"movt\\tip, 63\" } } */", "previous_filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/union-2.c"}, {"sha": "62c63b888ab49e99fba0a08b69941e73c9a8d33b", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8m/bitfield-4.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8m%2Fbitfield-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8m%2Fbitfield-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8m%2Fbitfield-4.c?ref=e0e4be48a9892195f11d1b608793c3a30b640f54", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mcmse\" } */\n+\n+#include \"../../bitfield-4.x\"\n+\n+/* { dg-final { scan-assembler \"movw\\tip, #65535\" } } */\n+/* { dg-final { scan-assembler \"movt\\tip, 255\" } } */\n+/* { dg-final { scan-assembler \"and\\tr0, r0, ip\" } } */\n+/* { dg-final { scan-assembler \"mov\\tip, #255\" } } */\n+/* { dg-final { scan-assembler \"and\\tr1, r1, ip\" } } */\n+/* { dg-final { scan-assembler \"mov\\tip, #3\" } } */\n+/* { dg-final { scan-assembler \"and\\tr2, r2, ip\" } } */\n+/* { dg-final { scan-assembler \"lsrs\\tr4, r4, #1\" } } */\n+/* { dg-final { scan-assembler \"lsls\\tr4, r4, #1\" } } */\n+/* { dg-final { scan-assembler \"mov\\tr3, r4\" } } */\n+/* { dg-final { scan-assembler \"bl\\t__gnu_cmse_nonsecure_call\" } } */"}, {"sha": "b718a70522b86e2bc58900681a781129543f8869", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8m/bitfield-5.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8m%2Fbitfield-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8m%2Fbitfield-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8m%2Fbitfield-5.c?ref=e0e4be48a9892195f11d1b608793c3a30b640f54", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mcmse\" } */\n+\n+#include \"../../bitfield-5.x\"\n+\n+/* { dg-final { scan-assembler \"movw\\tip, #8191\" } } */\n+/* { dg-final { scan-assembler \"movt\\tip, 255\" } } */\n+/* { dg-final { scan-assembler \"and\\tr0, r0, ip\" } } */\n+/* { dg-final { scan-assembler \"movw\\tip, #2047\" } } */\n+/* { dg-final { scan-assembler \"and\\tr1, r1, ip\" } } */\n+/* { dg-final { scan-assembler \"lsrs\\tr4, r4, #1\" } } */\n+/* { dg-final { scan-assembler \"lsls\\tr4, r4, #1\" } } */\n+/* { dg-final { scan-assembler \"mov\\tr2, r4\" } } */\n+/* { dg-final { scan-assembler \"mov\\tr3, r4\" } } */\n+/* { dg-final { scan-assembler \"bl\\t__gnu_cmse_nonsecure_call\" } } */"}, {"sha": "16536ab4f9ec5782463ab90f404a2e9f6f938850", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8m/bitfield-6.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8m%2Fbitfield-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8m%2Fbitfield-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8m%2Fbitfield-6.c?ref=e0e4be48a9892195f11d1b608793c3a30b640f54", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mcmse\" } */\n+\n+#include \"../../bitfield-6.x\"\n+\n+/* { dg-final { scan-assembler \"movw\\tip, #65535\" } } */\n+/* { dg-final { scan-assembler \"movt\\tip, 1023\" } } */\n+/* { dg-final { scan-assembler \"and\\tr0, r0, ip\" } } */\n+/* { dg-final { scan-assembler \"mov\\tip, #3\" } } */\n+/* { dg-final { scan-assembler \"movt\\tip, 32767\" } } */\n+/* { dg-final { scan-assembler \"and\\tr1, r1, ip\" } } */\n+/* { dg-final { scan-assembler \"mov\\tip, #255\" } } */\n+/* { dg-final { scan-assembler \"and\\tr2, r2, ip\" } } */\n+/* { dg-final { scan-assembler \"lsrs\\tr4, r4, #1\" } } */\n+/* { dg-final { scan-assembler \"lsls\\tr4, r4, #1\" } } */\n+/* { dg-final { scan-assembler \"mov\\tr3, r4\" } } */\n+/* { dg-final { scan-assembler \"bl\\t__gnu_cmse_nonsecure_call\" } } */"}, {"sha": "0b3cc1e2b2b26e185a9d5d4855d3bea8c70289b5", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8m/bitfield-7.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8m%2Fbitfield-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8m%2Fbitfield-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8m%2Fbitfield-7.c?ref=e0e4be48a9892195f11d1b608793c3a30b640f54", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mcmse\" } */\n+\n+#include \"../../bitfield-7.x\"\n+\n+/* { dg-final { scan-assembler \"movw\\tip, #8191\" } } */\n+/* { dg-final { scan-assembler \"movt\\tip, 255\" } } */\n+/* { dg-final { scan-assembler \"and\\tr0, r0, ip\" } } */\n+/* { dg-final { scan-assembler \"movw\\tip, #2047\" } } */\n+/* { dg-final { scan-assembler \"and\\tr1, r1, ip\" } } */\n+/* { dg-final { scan-assembler \"lsrs\\tr4, r4, #1\" } } */\n+/* { dg-final { scan-assembler \"lsls\\tr4, r4, #1\" } } */\n+/* { dg-final { scan-assembler \"mov\\tr2, r4\" } } */\n+/* { dg-final { scan-assembler \"mov\\tr3, r4\" } } */\n+/* { dg-final { scan-assembler \"bl\\t__gnu_cmse_nonsecure_call\" } } */"}, {"sha": "914ea39626f2f72eac8c9c1cb495b0855e58f5e1", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8m/bitfield-8.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8m%2Fbitfield-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8m%2Fbitfield-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8m%2Fbitfield-8.c?ref=e0e4be48a9892195f11d1b608793c3a30b640f54", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mcmse\" } */\n+\n+#include \"../../bitfield-8.x\"\n+\n+/* { dg-final { scan-assembler \"mov\\tip, #255\" } } */\n+/* { dg-final { scan-assembler \"and\\tr0, r0, ip\" } } */\n+/* { dg-final { scan-assembler \"mov\\tip, #1\" } } */\n+/* { dg-final { scan-assembler \"movt\\tip, 65535\" } } */\n+/* { dg-final { scan-assembler \"and\\tr1, r1, ip\" } } */\n+/* { dg-final { scan-assembler \"movw\\tip, #65535\" } } */\n+/* { dg-final { scan-assembler \"movt\\tip, 31\" } } */\n+/* { dg-final { scan-assembler \"and\\tr2, r2, ip\" } } */\n+/* { dg-final { scan-assembler \"lsrs\\tr4, r4, #1\" } } */\n+/* { dg-final { scan-assembler \"lsls\\tr4, r4, #1\" } } */\n+/* { dg-final { scan-assembler \"mov\\tr3, r4\" } } */\n+/* { dg-final { scan-assembler \"bl\\t__gnu_cmse_nonsecure_call\" } } */"}, {"sha": "32435d255805331c7c56a096675b7a2af3286e5e", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8m/bitfield-9.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8m%2Fbitfield-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8m%2Fbitfield-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8m%2Fbitfield-9.c?ref=e0e4be48a9892195f11d1b608793c3a30b640f54", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mcmse\" } */\n+\n+#include \"../../bitfield-9.x\"\n+\n+/* { dg-final { scan-assembler \"movw\\tip, #1799\" } } */\n+/* { dg-final { scan-assembler \"and\\tr0, r0, ip\" } } */\n+/* { dg-final { scan-assembler \"lsrs\\tr4, r4, #1\" } } */\n+/* { dg-final { scan-assembler \"lsls\\tr4, r4, #1\" } } */\n+/* { dg-final { scan-assembler \"mov\\tr1, r4\" } } */\n+/* { dg-final { scan-assembler \"mov\\tr2, r4\" } } */\n+/* { dg-final { scan-assembler \"mov\\tr3, r4\" } } */\n+/* { dg-final { scan-assembler \"bl\\t__gnu_cmse_nonsecure_call\" } } */"}, {"sha": "68f9e2254c97d7b9817f24cb4dc4315dc876fb26", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8m/bitfield-and-union.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8m%2Fbitfield-and-union.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8m%2Fbitfield-and-union.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8m%2Fbitfield-and-union.c?ref=e0e4be48a9892195f11d1b608793c3a30b640f54", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mcmse\" } */\n+\n+#include \"../../bitfield-and-union.x\"\n+\n+/* { dg-final { scan-assembler \"movw\\tip, #7939\" } } */\n+/* { dg-final { scan-assembler \"movt\\tip, 15\" } } */\n+/* { dg-final { scan-assembler \"and\\tr0, r0, ip\" } } */\n+/* { dg-final { scan-assembler \"movw\\tip, #65535\" } } */\n+/* { dg-final { scan-assembler \"movt\\tip, 2047\" } } */\n+/* { dg-final { scan-assembler \"and\\tr1, r1, ip\" } } */\n+/* { dg-final { scan-assembler \"mov\\tip, #1\" } } */\n+/* { dg-final { scan-assembler \"movt\\tip, 65535\" } } */\n+/* { dg-final { scan-assembler \"and\\tr2, r2, ip\" } } */\n+/* { dg-final { scan-assembler \"movw\\tip, #65535\" } } */\n+/* { dg-final { scan-assembler \"movt\\tip, 31\" } } */\n+/* { dg-final { scan-assembler \"and\\tr3, r3, ip\" } } */\n+/* { dg-final { scan-assembler \"lsrs\\tr4, r4, #1\" } } */\n+/* { dg-final { scan-assembler \"lsls\\tr4, r4, #1\" } } */\n+/* { dg-final { scan-assembler \"bl\\t__gnu_cmse_nonsecure_call\" } } */"}, {"sha": "eb655b5504e58dc842853c8cb874c5cef3b82aa6", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8m/hard-sp/cmse-13.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8m%2Fhard-sp%2Fcmse-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8m%2Fhard-sp%2Fcmse-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8m%2Fhard-sp%2Fcmse-13.c?ref=e0e4be48a9892195f11d1b608793c3a30b640f54", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mcmse -mfloat-abi=hard -mfpu=fpv5-sp-d16\" }  */\n+/* { dg-skip-if \"Incompatible float ABI\" { *-*-* } { \"-mfloat-abi=*\" } { \"-mfloat-abi=hard\" } } */\n+/* { dg-skip-if \"Skip these if testing double precision\" {*-*-*} {\"-mfpu=fpv[4-5]-d16\"} {\"\"} } */\n+\n+#include \"../../../cmse-13.x\"\n+\n+/* Checks for saving and clearing prior to function call.  */\n+/* { dg-final { scan-assembler \"lsrs\\tr4, r4, #1\" } } */\n+/* { dg-final { scan-assembler \"lsls\\tr4, r4, #1\" } } */\n+/* { dg-final { scan-assembler \"mov\\tr0, r4\" } } */\n+/* { dg-final { scan-assembler \"mov\\tr1, r4\" } } */\n+/* { dg-final { scan-assembler \"mov\\tr2, r4\" } } */\n+/* { dg-final { scan-assembler \"mov\\tr3, r4\" } } */\n+/* { dg-final { scan-assembler-not \"vmov\\.f32\\ts0, #1\\.0\" } } */\n+/* { dg-final { scan-assembler \"vmov\\.f32\\ts1, #1\\.0\" } } */\n+/* { dg-final { scan-assembler-not \"vmov\\.f32\\ts2, #1\\.0\" } } */\n+/* { dg-final { scan-assembler-not \"vmov\\.f32\\ts3, #1\\.0\" } } */\n+/* { dg-final { scan-assembler \"vmov\\.f32\\ts4, #1\\.0\" } } */\n+/* { dg-final { scan-assembler \"vmov\\.f32\\ts5, #1\\.0\" } } */\n+/* { dg-final { scan-assembler \"vmov\\.f32\\ts6, #1\\.0\" } } */\n+/* { dg-final { scan-assembler \"vmov\\.f32\\ts7, #1\\.0\" } } */\n+/* { dg-final { scan-assembler \"vmov\\.f32\\ts8, #1\\.0\" } } */\n+/* { dg-final { scan-assembler \"vmov\\.f32\\ts9, #1\\.0\" } } */\n+/* { dg-final { scan-assembler \"vmov\\.f32\\ts10, #1\\.0\" } } */\n+/* { dg-final { scan-assembler \"vmov\\.f32\\ts11, #1\\.0\" } } */\n+/* { dg-final { scan-assembler \"vmov\\.f32\\ts12, #1\\.0\" } } */\n+/* { dg-final { scan-assembler \"vmov\\.f32\\ts13, #1\\.0\" } } */\n+/* { dg-final { scan-assembler \"vmov\\.f32\\ts14, #1\\.0\" } } */\n+/* { dg-final { scan-assembler \"vmov\\.f32\\ts15, #1\\.0\" } } */\n+\n+/* Now we check that we use the correct intrinsic to call.  */\n+/* { dg-final { scan-assembler \"bl\\t__gnu_cmse_nonsecure_call\" } } */"}, {"sha": "3b73c0ee2fbb178910e87662eb22d8a7950d76e4", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8m/hard-sp/cmse-5.c", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8m%2Fhard-sp%2Fcmse-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8m%2Fhard-sp%2Fcmse-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8m%2Fhard-sp%2Fcmse-5.c?ref=e0e4be48a9892195f11d1b608793c3a30b640f54", "patch": "@@ -1,9 +1,9 @@\n /* { dg-do compile } */\n /* { dg-options \"-mcmse -mfloat-abi=hard -mfpu=fpv5-sp-d16\" }  */\n-/* { dg-skip-if \"Do not combine float-abi= hard | soft | softfp\" {*-*-*} {\"-mfloat-abi=soft\" -mfloat-abi=softfp } {\"\"} } */\n+/* { dg-skip-if \"Incompatible float ABI\" { *-*-* } { \"-mfloat-abi=*\" } { \"-mfloat-abi=hard\" } } */\n /* { dg-skip-if \"Skip these if testing double precision\" {*-*-*} {\"-mfpu=fpv[4-5]-d16\"} {\"\"} } */\n \n-#include \"../../cmse-5.x\"\n+#include \"../../../cmse-5.x\"\n \n /* { dg-final { scan-assembler \"mov\\tr0, lr\" } } */\n /* { dg-final { scan-assembler \"mov\\tr1, lr\" } } */", "previous_filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/hard-sp/cmse-5.c"}, {"sha": "fd1a24b3258e8403394dac98ff7c4712b0eb7a1b", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8m/hard-sp/cmse-7.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8m%2Fhard-sp%2Fcmse-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8m%2Fhard-sp%2Fcmse-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8m%2Fhard-sp%2Fcmse-7.c?ref=e0e4be48a9892195f11d1b608793c3a30b640f54", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mcmse -mfloat-abi=hard -mfpu=fpv5-sp-d16\" }  */\n+/* { dg-skip-if \"Incompatible float ABI\" { *-*-* } { \"-mfloat-abi=*\" } { \"-mfloat-abi=hard\" } } */\n+/* { dg-skip-if \"Skip these if testing double precision\" {*-*-*} {\"-mfpu=fpv[4-5]-d16\"} {\"\"} } */\n+\n+#include \"../../../cmse-7.x\"\n+\n+/* Checks for saving and clearing prior to function call.  */\n+/* { dg-final { scan-assembler \"lsrs\\tr4, r4, #1\" } } */\n+/* { dg-final { scan-assembler \"lsls\\tr4, r4, #1\" } } */\n+/* { dg-final { scan-assembler \"mov\\tr0, r4\" } } */\n+/* { dg-final { scan-assembler \"mov\\tr1, r4\" } } */\n+/* { dg-final { scan-assembler \"mov\\tr2, r4\" } } */\n+/* { dg-final { scan-assembler \"mov\\tr3, r4\" } } */\n+/* { dg-final { scan-assembler \"vmov\\.f32\\ts0, #1\\.0\" } } */\n+/* { dg-final { scan-assembler \"vmov\\.f32\\ts1, #1\\.0\" } } */\n+/* { dg-final { scan-assembler \"vmov\\.f32\\ts2, #1\\.0\" } } */\n+/* { dg-final { scan-assembler \"vmov\\.f32\\ts3, #1\\.0\" } } */\n+/* { dg-final { scan-assembler \"vmov\\.f32\\ts4, #1\\.0\" } } */\n+/* { dg-final { scan-assembler \"vmov\\.f32\\ts5, #1\\.0\" } } */\n+/* { dg-final { scan-assembler \"vmov\\.f32\\ts6, #1\\.0\" } } */\n+/* { dg-final { scan-assembler \"vmov\\.f32\\ts7, #1\\.0\" } } */\n+/* { dg-final { scan-assembler \"vmov\\.f32\\ts8, #1\\.0\" } } */\n+/* { dg-final { scan-assembler \"vmov\\.f32\\ts9, #1\\.0\" } } */\n+/* { dg-final { scan-assembler \"vmov\\.f32\\ts10, #1\\.0\" } } */\n+/* { dg-final { scan-assembler \"vmov\\.f32\\ts11, #1\\.0\" } } */\n+/* { dg-final { scan-assembler \"vmov\\.f32\\ts12, #1\\.0\" } } */\n+/* { dg-final { scan-assembler \"vmov\\.f32\\ts13, #1\\.0\" } } */\n+/* { dg-final { scan-assembler \"vmov\\.f32\\ts14, #1\\.0\" } } */\n+/* { dg-final { scan-assembler \"vmov\\.f32\\ts15, #1\\.0\" } } */\n+\n+/* Now we check that we use the correct intrinsic to call.  */\n+/* { dg-final { scan-assembler \"bl\\t__gnu_cmse_nonsecure_call\" } } */"}, {"sha": "d8f9b7758d50f74f777fcda22f3f6714ff28bb96", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8m/hard-sp/cmse-8.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8m%2Fhard-sp%2Fcmse-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8m%2Fhard-sp%2Fcmse-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8m%2Fhard-sp%2Fcmse-8.c?ref=e0e4be48a9892195f11d1b608793c3a30b640f54", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mcmse -mfloat-abi=hard -mfpu=fpv5-sp-d16\" }  */\n+/* { dg-skip-if \"Incompatible float ABI\" { *-*-* } { \"-mfloat-abi=*\" } { \"-mfloat-abi=hard\" } } */\n+/* { dg-skip-if \"Skip these if testing double precision\" {*-*-*} {\"-mfpu=fpv[4-5]-d16\"} {\"\"} } */\n+\n+#include \"../../../cmse-8.x\"\n+\n+/* Checks for saving and clearing prior to function call.  */\n+/* { dg-final { scan-assembler \"lsrs\\tr4, r4, #1\" } } */\n+/* { dg-final { scan-assembler \"lsls\\tr4, r4, #1\" } } */\n+/* { dg-final { scan-assembler \"mov\\tr0, r4\" } } */\n+/* { dg-final { scan-assembler \"mov\\tr1, r4\" } } */\n+/* { dg-final { scan-assembler \"mov\\tr2, r4\" } } */\n+/* { dg-final { scan-assembler \"mov\\tr3, r4\" } } */\n+/* { dg-final { scan-assembler-not \"vmov\\.f32\\ts0, #1\\.0\" } } */\n+/* { dg-final { scan-assembler-not \"vmov\\.f32\\ts1, #1\\.0\" } } */\n+/* { dg-final { scan-assembler \"vmov\\.f32\\ts2, #1\\.0\" } } */\n+/* { dg-final { scan-assembler \"vmov\\.f32\\ts3, #1\\.0\" } } */\n+/* { dg-final { scan-assembler \"vmov\\.f32\\ts4, #1\\.0\" } } */\n+/* { dg-final { scan-assembler \"vmov\\.f32\\ts5, #1\\.0\" } } */\n+/* { dg-final { scan-assembler \"vmov\\.f32\\ts6, #1\\.0\" } } */\n+/* { dg-final { scan-assembler \"vmov\\.f32\\ts7, #1\\.0\" } } */\n+/* { dg-final { scan-assembler \"vmov\\.f32\\ts8, #1\\.0\" } } */\n+/* { dg-final { scan-assembler \"vmov\\.f32\\ts9, #1\\.0\" } } */\n+/* { dg-final { scan-assembler \"vmov\\.f32\\ts10, #1\\.0\" } } */\n+/* { dg-final { scan-assembler \"vmov\\.f32\\ts11, #1\\.0\" } } */\n+/* { dg-final { scan-assembler \"vmov\\.f32\\ts12, #1\\.0\" } } */\n+/* { dg-final { scan-assembler \"vmov\\.f32\\ts13, #1\\.0\" } } */\n+/* { dg-final { scan-assembler \"vmov\\.f32\\ts14, #1\\.0\" } } */\n+/* { dg-final { scan-assembler \"vmov\\.f32\\ts15, #1\\.0\" } } */\n+\n+/* Now we check that we use the correct intrinsic to call.  */\n+/* { dg-final { scan-assembler \"bl\\t__gnu_cmse_nonsecure_call\" } } */"}, {"sha": "4878c6ef9157abff003780fbf6401db8eb3ef2f3", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8m/hard/cmse-13.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8m%2Fhard%2Fcmse-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8m%2Fhard%2Fcmse-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8m%2Fhard%2Fcmse-13.c?ref=e0e4be48a9892195f11d1b608793c3a30b640f54", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mcmse -mfloat-abi=hard -mfpu=fpv5-d16\" }  */\n+/* { dg-skip-if \"Incompatible float ABI\" { *-*-* } { \"-mfloat-abi=*\" } { \"-mfloat-abi=hard\" } } */\n+/* { dg-skip-if \"Skip these if testing single precision\" {*-*-*} {\"-mfpu=*-sp-*\"} {\"\"} } */\n+\n+#include \"../../../cmse-13.x\"\n+\n+/* Checks for saving and clearing prior to function call.  */\n+/* { dg-final { scan-assembler \"lsrs\\tr4, r4, #1\" } } */\n+/* { dg-final { scan-assembler \"lsls\\tr4, r4, #1\" } } */\n+/* { dg-final { scan-assembler \"mov\\tr0, r4\" } } */\n+/* { dg-final { scan-assembler \"mov\\tr1, r4\" } } */\n+/* { dg-final { scan-assembler \"mov\\tr2, r4\" } } */\n+/* { dg-final { scan-assembler \"mov\\tr3, r4\" } } */\n+/* { dg-final { scan-assembler \"vmov\\.f32\\ts1, #1\\.0\" } } */\n+/* { dg-final { scan-assembler-not \"vmov\\.f32\\ts0, #1\\.0\" } } */\n+/* { dg-final { scan-assembler-not \"vmov\\.f64\\td0, #1\\.0\" } } */\n+/* { dg-final { scan-assembler-not \"vmov\\.f64\\td1, #1\\.0\" } } */\n+/* { dg-final { scan-assembler-not \"vmov\\.f32\\ts2, #1\\.0\" } } */\n+/* { dg-final { scan-assembler-not \"vmov\\.f32\\ts3, #1\\.0\" } } */\n+/* { dg-final { scan-assembler \"vmov\\.f64\\td2, #1\\.0\" } } */\n+/* { dg-final { scan-assembler \"vmov\\.f64\\td3, #1\\.0\" } } */\n+/* { dg-final { scan-assembler \"vmov\\.f64\\td4, #1\\.0\" } } */\n+/* { dg-final { scan-assembler \"vmov\\.f64\\td5, #1\\.0\" } } */\n+/* { dg-final { scan-assembler \"vmov\\.f64\\td6, #1\\.0\" } } */\n+/* { dg-final { scan-assembler \"vmov\\.f64\\td7, #1\\.0\" } } */\n+\n+/* Now we check that we use the correct intrinsic to call.  */\n+/* { dg-final { scan-assembler \"bl\\t__gnu_cmse_nonsecure_call\" } } */"}, {"sha": "d6e758cc98e1a66bc6116e371caa62f2f2854c06", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8m/hard/cmse-5.c", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8m%2Fhard%2Fcmse-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8m%2Fhard%2Fcmse-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8m%2Fhard%2Fcmse-5.c?ref=e0e4be48a9892195f11d1b608793c3a30b640f54", "patch": "@@ -1,9 +1,9 @@\n /* { dg-do compile } */\n /* { dg-options \"-mcmse -mfloat-abi=hard -mfpu=fpv5-d16\" }  */\n-/* { dg-skip-if \"Do not combine float-abi= hard | soft | softfp\" {*-*-*} {\"-mfloat-abi=soft\" -mfloat-abi=softfp } {\"\"} } */\n+/* { dg-skip-if \"Incompatible float ABI\" { *-*-* } { \"-mfloat-abi=*\" } { \"-mfloat-abi=hard\" } } */\n /* { dg-skip-if \"Skip these if testing single precision\" {*-*-*} {\"-mfpu=*-sp-*\"} {\"\"} } */\n \n-#include \"../../cmse-5.x\"\n+#include \"../../../cmse-5.x\"\n \n /* { dg-final { scan-assembler \"mov\\tr0, lr\" } } */\n /* { dg-final { scan-assembler \"mov\\tr1, lr\" } } */", "previous_filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/hard/cmse-5.c"}, {"sha": "8e054c2aeebac4bd3f164b00ad867bc2d72cb674", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8m/hard/cmse-7.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8m%2Fhard%2Fcmse-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8m%2Fhard%2Fcmse-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8m%2Fhard%2Fcmse-7.c?ref=e0e4be48a9892195f11d1b608793c3a30b640f54", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mcmse -mfloat-abi=hard -mfpu=fpv5-d16\" }  */\n+/* { dg-skip-if \"Incompatible float ABI\" { *-*-* } { \"-mfloat-abi=*\" } { \"-mfloat-abi=hard\" } } */\n+/* { dg-skip-if \"Skip these if testing single precision\" {*-*-*} {\"-mfpu=*-sp-*\"} {\"\"} } */\n+\n+#include \"../../../cmse-7.x\"\n+\n+/* Checks for saving and clearing prior to function call.  */\n+/* { dg-final { scan-assembler \"lsrs\\tr4, r4, #1\" } } */\n+/* { dg-final { scan-assembler \"lsls\\tr4, r4, #1\" } } */\n+/* { dg-final { scan-assembler \"mov\\tr0, r4\" } } */\n+/* { dg-final { scan-assembler \"mov\\tr1, r4\" } } */\n+/* { dg-final { scan-assembler \"mov\\tr2, r4\" } } */\n+/* { dg-final { scan-assembler \"mov\\tr3, r4\" } } */\n+/* { dg-final { scan-assembler \"vmov\\.f64\\td0, #1\\.0\" } } */\n+/* { dg-final { scan-assembler \"vmov\\.f64\\td1, #1\\.0\" } } */\n+/* { dg-final { scan-assembler \"vmov\\.f64\\td2, #1\\.0\" } } */\n+/* { dg-final { scan-assembler \"vmov\\.f64\\td3, #1\\.0\" } } */\n+/* { dg-final { scan-assembler \"vmov\\.f64\\td4, #1\\.0\" } } */\n+/* { dg-final { scan-assembler \"vmov\\.f64\\td5, #1\\.0\" } } */\n+/* { dg-final { scan-assembler \"vmov\\.f64\\td6, #1\\.0\" } } */\n+/* { dg-final { scan-assembler \"vmov\\.f64\\td7, #1\\.0\" } } */\n+\n+/* Now we check that we use the correct intrinsic to call.  */\n+/* { dg-final { scan-assembler \"bl\\t__gnu_cmse_nonsecure_call\" } } */"}, {"sha": "e74cea7697ba1c12ebeef21636d1b8fd60b42677", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8m/hard/cmse-8.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8m%2Fhard%2Fcmse-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8m%2Fhard%2Fcmse-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8m%2Fhard%2Fcmse-8.c?ref=e0e4be48a9892195f11d1b608793c3a30b640f54", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mcmse -mfloat-abi=hard -mfpu=fpv5-d16\" }  */\n+/* { dg-skip-if \"Incompatible float ABI\" { *-*-* } { \"-mfloat-abi=*\" } { \"-mfloat-abi=hard\" } } */\n+/* { dg-skip-if \"Skip these if testing single precision\" {*-*-*} {\"-mfpu=*-sp-*\"} {\"\"} } */\n+\n+#include \"../../../cmse-8.x\"\n+\n+/* Checks for saving and clearing prior to function call.  */\n+/* { dg-final { scan-assembler \"lsrs\\tr4, r4, #1\" } } */\n+/* { dg-final { scan-assembler \"lsls\\tr4, r4, #1\" } } */\n+/* { dg-final { scan-assembler \"mov\\tr0, r4\" } } */\n+/* { dg-final { scan-assembler \"mov\\tr1, r4\" } } */\n+/* { dg-final { scan-assembler \"mov\\tr2, r4\" } } */\n+/* { dg-final { scan-assembler \"mov\\tr3, r4\" } } */\n+/* { dg-final { scan-assembler-not \"vmov\\.f64\\td0, #1\\.0\" } } */\n+/* { dg-final { scan-assembler \"vmov\\.f64\\td1, #1\\.0\" } } */\n+/* { dg-final { scan-assembler \"vmov\\.f64\\td2, #1\\.0\" } } */\n+/* { dg-final { scan-assembler \"vmov\\.f64\\td3, #1\\.0\" } } */\n+/* { dg-final { scan-assembler \"vmov\\.f64\\td4, #1\\.0\" } } */\n+/* { dg-final { scan-assembler \"vmov\\.f64\\td5, #1\\.0\" } } */\n+/* { dg-final { scan-assembler \"vmov\\.f64\\td6, #1\\.0\" } } */\n+/* { dg-final { scan-assembler \"vmov\\.f64\\td7, #1\\.0\" } } */\n+\n+/* Now we check that we use the correct intrinsic to call.  */\n+/* { dg-final { scan-assembler \"bl\\t__gnu_cmse_nonsecure_call\" } } */"}, {"sha": "4c4a0c956fa574f8fa25e4222ce9274bfbc5e32d", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8m/soft/cmse-13.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8m%2Fsoft%2Fcmse-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8m%2Fsoft%2Fcmse-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8m%2Fsoft%2Fcmse-13.c?ref=e0e4be48a9892195f11d1b608793c3a30b640f54", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mcmse -mfloat-abi=soft\" }  */\n+/* { dg-skip-if \"Incompatible float ABI\" { *-*-* } { \"-mfloat-abi=*\" } { \"-mfloat-abi=soft\" } } */\n+\n+#include \"../../../cmse-13.x\"\n+\n+/* Checks for saving and clearing prior to function call.  */\n+/* { dg-final { scan-assembler \"lsrs\\tr4, r4, #1\" } } */\n+/* { dg-final { scan-assembler \"lsls\\tr4, r4, #1\" } } */\n+/* { dg-final { scan-assembler-not \"mov\\tr0, r4\" } } */\n+/* { dg-final { scan-assembler \"mov\\tr1, r4\" } } */\n+/* { dg-final { scan-assembler-not \"mov\\tr2, r4\" } } */\n+/* { dg-final { scan-assembler-not \"mov\\tr3, r4\" } } */\n+/* { dg-final { scan-assembler-not \"vmov\" } } */\n+/* { dg-final { scan-assembler-not \"vmsr\" } } */\n+\n+/* Now we check that we use the correct intrinsic to call.  */\n+/* { dg-final { scan-assembler \"bl\\t__gnu_cmse_nonsecure_call\" } } */"}, {"sha": "71971b094c0dd7226659adeb49e788ab85e63206", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8m/soft/cmse-5.c", "status": "renamed", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8m%2Fsoft%2Fcmse-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8m%2Fsoft%2Fcmse-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8m%2Fsoft%2Fcmse-5.c?ref=e0e4be48a9892195f11d1b608793c3a30b640f54", "patch": "@@ -1,8 +1,8 @@\n /* { dg-do compile } */\n /* { dg-options \"-mcmse -mfloat-abi=soft\" }  */\n-/* { dg-skip-if \"Do not combine float-abi= hard | soft | softfp\" {*-*-*} {\"-mfloat-abi=hard\" -mfloat-abi=softfp } {\"\"} } */\n+/* { dg-skip-if \"Incompatible float ABI\" { *-*-* } { \"-mfloat-abi=*\" } { \"-mfloat-abi=soft\" } } */\n \n-#include \"../../cmse-5.x\"\n+#include \"../../../cmse-5.x\"\n \n /* { dg-final { scan-assembler \"mov\\tr1, lr\" } } */\n /* { dg-final { scan-assembler \"mov\\tr2, lr\" } } */\n@@ -13,4 +13,3 @@\n /* { dg-final { scan-assembler \"msr\\tAPSR_nzcvq, lr\" { target { ! arm_dsp } } } } */\n /* { dg-final { scan-assembler \"msr\\tAPSR_nzcvqg, lr\" { target arm_dsp } } } */\n /* { dg-final { scan-assembler \"bxns\" } } */\n-", "previous_filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/soft/cmse-5.c"}, {"sha": "4cb6a54a0a5b02954519e64503d7c2c4c0e4750d", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8m/soft/cmse-7.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8m%2Fsoft%2Fcmse-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8m%2Fsoft%2Fcmse-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8m%2Fsoft%2Fcmse-7.c?ref=e0e4be48a9892195f11d1b608793c3a30b640f54", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mcmse -mfloat-abi=soft\" }  */\n+/* { dg-skip-if \"Incompatible float ABI\" { *-*-* } { \"-mfloat-abi=*\" } { \"-mfloat-abi=soft\" } } */\n+\n+#include \"../../../cmse-7.x\"\n+\n+/* Checks for saving and clearing prior to function call.  */\n+/* { dg-final { scan-assembler \"lsrs\\tr4, r4, #1\" } } */\n+/* { dg-final { scan-assembler \"lsls\\tr4, r4, #1\" } } */\n+/* { dg-final { scan-assembler \"mov\\tr0, r4\" } } */\n+/* { dg-final { scan-assembler \"mov\\tr1, r4\" } } */\n+/* { dg-final { scan-assembler \"mov\\tr2, r4\" } } */\n+/* { dg-final { scan-assembler \"mov\\tr3, r4\" } } */\n+/* { dg-final { scan-assembler-not \"vmov\" } } */\n+/* { dg-final { scan-assembler-not \"vmsr\" } } */\n+\n+/* Now we check that we use the correct intrinsic to call.  */\n+/* { dg-final { scan-assembler \"bl\\t__gnu_cmse_nonsecure_call\" } } */"}, {"sha": "4764b2fadfb38661764b909cdb2c9cd109e24df0", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8m/soft/cmse-8.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8m%2Fsoft%2Fcmse-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8m%2Fsoft%2Fcmse-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8m%2Fsoft%2Fcmse-8.c?ref=e0e4be48a9892195f11d1b608793c3a30b640f54", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mcmse -mfloat-abi=soft\" }  */\n+/* { dg-skip-if \"Incompatible float ABI\" { *-*-* } { \"-mfloat-abi=*\" } { \"-mfloat-abi=soft\" } } */\n+\n+#include \"../../../cmse-8.x\"\n+\n+/* Checks for saving and clearing prior to function call.  */\n+/* { dg-final { scan-assembler \"lsrs\\tr4, r4, #1\" } } */\n+/* { dg-final { scan-assembler \"lsls\\tr4, r4, #1\" } } */\n+/* { dg-final { scan-assembler-not \"mov\\tr0, r4\" } } */\n+/* { dg-final { scan-assembler-not \"mov\\tr1, r4\" } } */\n+/* { dg-final { scan-assembler \"mov\\tr2, r4\" } } */\n+/* { dg-final { scan-assembler \"mov\\tr3, r4\" } } */\n+/* { dg-final { scan-assembler-not \"vmov\" } } */\n+/* { dg-final { scan-assembler-not \"vmsr\" } } */\n+\n+/* Now we check that we use the correct intrinsic to call.  */\n+/* { dg-final { scan-assembler \"bl\\t__gnu_cmse_nonsecure_call\" } } */"}, {"sha": "f550b77f616315d3eae6e1fa81161750a810f321", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8m/softfp-sp/cmse-5.c", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8m%2Fsoftfp-sp%2Fcmse-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8m%2Fsoftfp-sp%2Fcmse-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8m%2Fsoftfp-sp%2Fcmse-5.c?ref=e0e4be48a9892195f11d1b608793c3a30b640f54", "patch": "@@ -1,9 +1,9 @@\n /* { dg-do compile } */\n /* { dg-options \"-mcmse -mfloat-abi=softfp -mfpu=fpv5-sp-d16\" }  */\n-/* { dg-skip-if \"Do not combine float-abi= hard | soft | softfp\" {*-*-*} {\"-mfloat-abi=soft\" -mfloat-abi=hard } {\"\"} } */\n+/* { dg-skip-if \"Incompatible float ABI\" { *-*-* } { \"-mfloat-abi=*\" } { \"-mfloat-abi=softfp\" } } */\n /* { dg-skip-if \"Skip these if testing double precision\" {*-*-*} {\"-mfpu=fpv[4-5]-d16\"} {\"\"} } */\n \n-#include \"../../cmse-5.x\"\n+#include \"../../../cmse-5.x\"\n \n /* { dg-final { scan-assembler \"__acle_se_foo:\" } } */\n /* { dg-final { scan-assembler-not \"mov\\tr0, lr\" } } */", "previous_filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/softfp-sp/cmse-5.c"}, {"sha": "9e93d75c35de5e3dde1074fb99da94edc2648319", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8m/softfp-sp/cmse-7.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8m%2Fsoftfp-sp%2Fcmse-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8m%2Fsoftfp-sp%2Fcmse-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8m%2Fsoftfp-sp%2Fcmse-7.c?ref=e0e4be48a9892195f11d1b608793c3a30b640f54", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mcmse -mfloat-abi=softfp -mfpu=fpv5-sp-d16\" }  */\n+/* { dg-skip-if \"Incompatible float ABI\" { *-*-* } { \"-mfloat-abi=*\" } { \"-mfloat-abi=softfp\" } } */\n+/* { dg-skip-if \"Skip these if testing double precision\" {*-*-*} {\"-mfpu=fpv[4-5]-d16\"} {\"\"} } */\n+\n+#include \"../../../cmse-7.x\"\n+\n+/* Checks for saving and clearing prior to function call.  */\n+/* { dg-final { scan-assembler \"lsrs\\tr4, r4, #1\" } } */\n+/* { dg-final { scan-assembler \"lsls\\tr4, r4, #1\" } } */\n+/* { dg-final { scan-assembler \"mov\\tr0, r4\" } } */\n+/* { dg-final { scan-assembler \"mov\\tr1, r4\" } } */\n+/* { dg-final { scan-assembler \"mov\\tr2, r4\" } } */\n+/* { dg-final { scan-assembler \"mov\\tr3, r4\" } } */\n+\n+/* Now we check that we use the correct intrinsic to call.  */\n+/* { dg-final { scan-assembler \"bl\\t__gnu_cmse_nonsecure_call\" } } */"}, {"sha": "566889e66c8cea6ca32348f48742d2c325336995", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8m/softfp-sp/cmse-8.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8m%2Fsoftfp-sp%2Fcmse-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8m%2Fsoftfp-sp%2Fcmse-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8m%2Fsoftfp-sp%2Fcmse-8.c?ref=e0e4be48a9892195f11d1b608793c3a30b640f54", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mcmse -mfloat-abi=softfp -mfpu=fpv5-sp-d16\" }  */\n+/* { dg-skip-if \"Incompatible float ABI\" { *-*-* } { \"-mfloat-abi=*\" } { \"-mfloat-abi=softfp\" } } */\n+/* { dg-skip-if \"Skip these if testing double precision\" {*-*-*} {\"-mfpu=fpv[4-5]-d16\"} {\"\"} } */\n+\n+#include \"../../../cmse-8.x\"\n+\n+/* Checks for saving and clearing prior to function call.  */\n+/* { dg-final { scan-assembler \"lsrs\\tr4, r4, #1\" } } */\n+/* { dg-final { scan-assembler \"lsls\\tr4, r4, #1\" } } */\n+/* { dg-final { scan-assembler-not \"mov\\tr0, r4\" } } */\n+/* { dg-final { scan-assembler-not \"mov\\tr1, r4\" } } */\n+/* { dg-final { scan-assembler \"mov\\tr2, r4\" } } */\n+/* { dg-final { scan-assembler \"mov\\tr3, r4\" } } */\n+\n+/* Now we check that we use the correct intrinsic to call.  */\n+/* { dg-final { scan-assembler \"bl\\t__gnu_cmse_nonsecure_call\" } } */"}, {"sha": "0ee28de4123c5e09df7c5d1046e0bd555af6f0fa", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8m/softfp/cmse-13.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8m%2Fsoftfp%2Fcmse-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8m%2Fsoftfp%2Fcmse-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8m%2Fsoftfp%2Fcmse-13.c?ref=e0e4be48a9892195f11d1b608793c3a30b640f54", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mcmse -mfloat-abi=softfp -mfpu=fpv5-d16\" }  */\n+/* { dg-skip-if \"Incompatible float ABI\" { *-*-* } { \"-mfloat-abi=*\" } { \"-mfloat-abi=softfp\" } } */\n+/* { dg-skip-if \"Skip these if testing single precision\" {*-*-*} {\"-mfpu=*-sp-*\"} {\"\"} } */\n+\n+#include \"../../../cmse-13.x\"\n+\n+/* Checks for saving and clearing prior to function call.  */\n+/* { dg-final { scan-assembler \"lsrs\\tr4, r4, #1\" } } */\n+/* { dg-final { scan-assembler \"lsls\\tr4, r4, #1\" } } */\n+/* { dg-final { scan-assembler-not \"mov\\tr0, r4\" } } */\n+/* { dg-final { scan-assembler \"\\n\\tmov\\tr1, r4\" } } */\n+/* { dg-final { scan-assembler-not \"\\n\\tmov\\tr2, r4\\n\\tmov\\tr3, r4\" } } */\n+\n+/* Now we check that we use the correct intrinsic to call.  */\n+/* { dg-final { scan-assembler \"bl\\t__gnu_cmse_nonsecure_call\" } } */"}, {"sha": "cf8f3ab135a80f03bd3c5cf0276bb1ae31b2f436", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8m/softfp/cmse-5.c", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8m%2Fsoftfp%2Fcmse-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8m%2Fsoftfp%2Fcmse-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8m%2Fsoftfp%2Fcmse-5.c?ref=e0e4be48a9892195f11d1b608793c3a30b640f54", "patch": "@@ -1,9 +1,9 @@\n /* { dg-do compile } */\n /* { dg-options \"-mcmse -mfloat-abi=softfp -mfpu=fpv5-d16\" }  */\n-/* { dg-skip-if \"Do not combine float-abi= hard | soft | softfp\" {*-*-*} {\"-mfloat-abi=soft\" -mfloat-abi=hard } {\"\"} } */\n+/* { dg-skip-if \"Incompatible float ABI\" { *-*-* } { \"-mfloat-abi=*\" } { \"-mfloat-abi=softfp\" } } */\n /* { dg-skip-if \"Skip these if testing single precision\" {*-*-*} {\"-mfpu=*-sp-*\"} {\"\"} } */\n \n-#include \"../../cmse-5.x\"\n+#include \"../../../cmse-5.x\"\n \n /* { dg-final { scan-assembler \"__acle_se_foo:\" } } */\n /* { dg-final { scan-assembler-not \"mov\\tr0, lr\" } } */", "previous_filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/softfp/cmse-5.c"}, {"sha": "1c38290e79d18a8f94e44b974c54220e553a9a49", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8m/softfp/cmse-7.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8m%2Fsoftfp%2Fcmse-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8m%2Fsoftfp%2Fcmse-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8m%2Fsoftfp%2Fcmse-7.c?ref=e0e4be48a9892195f11d1b608793c3a30b640f54", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mcmse -mfloat-abi=softfp -mfpu=fpv5-d16\" }  */\n+/* { dg-skip-if \"Incompatible float ABI\" { *-*-* } { \"-mfloat-abi=*\" } { \"-mfloat-abi=softfp\" } } */\n+/* { dg-skip-if \"Skip these if testing single precision\" {*-*-*} {\"-mfpu=*-sp-*\"} {\"\"} } */\n+\n+#include \"../../../cmse-7.x\"\n+\n+/* Checks for saving and clearing prior to function call.  */\n+/* { dg-final { scan-assembler \"lsrs\\tr4, r4, #1\" } } */\n+/* { dg-final { scan-assembler \"lsls\\tr4, r4, #1\" } } */\n+/* { dg-final { scan-assembler \"mov\\tr0, r4\" } } */\n+/* { dg-final { scan-assembler \"mov\\tr1, r4\" } } */\n+/* { dg-final { scan-assembler \"mov\\tr2, r4\" } } */\n+/* { dg-final { scan-assembler \"mov\\tr3, r4\" } } */\n+\n+/* Now we check that we use the correct intrinsic to call.  */\n+/* { dg-final { scan-assembler \"bl\\t__gnu_cmse_nonsecure_call\" } } */"}, {"sha": "39c2e72f968ce9f30d36bd347544ca26b3dfad8a", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8m/softfp/cmse-8.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8m%2Fsoftfp%2Fcmse-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8m%2Fsoftfp%2Fcmse-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8m%2Fsoftfp%2Fcmse-8.c?ref=e0e4be48a9892195f11d1b608793c3a30b640f54", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mcmse -mfloat-abi=softfp -mfpu=fpv5-d16\" }  */\n+/* { dg-skip-if \"Incompatible float ABI\" { *-*-* } { \"-mfloat-abi=*\" } { \"-mfloat-abi=softfp\" } } */\n+/* { dg-skip-if \"Skip these if testing single precision\" {*-*-*} {\"-mfpu=*-sp-*\"} {\"\"} } */\n+\n+#include \"../../../cmse-8.x\"\n+\n+/* Checks for saving and clearing prior to function call.  */\n+/* { dg-final { scan-assembler \"lsrs\\tr4, r4, #1\" } } */\n+/* { dg-final { scan-assembler \"lsls\\tr4, r4, #1\" } } */\n+/* { dg-final { scan-assembler-not \"mov\\tr0, r4\" } } */\n+/* { dg-final { scan-assembler-not \"mov\\tr1, r4\" } } */\n+/* { dg-final { scan-assembler \"mov\\tr2, r4\" } } */\n+/* { dg-final { scan-assembler \"mov\\tr3, r4\" } } */\n+\n+/* Now we check that we use the correct intrinsic to call.  */\n+/* { dg-final { scan-assembler \"bl\\t__gnu_cmse_nonsecure_call\" } } */"}, {"sha": "d51db020c7707fa714364b10dd3ec5896a9dad17", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8m/union-1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8m%2Funion-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8m%2Funion-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8m%2Funion-1.c?ref=e0e4be48a9892195f11d1b608793c3a30b640f54", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mcmse\" } */\n+\n+#include \"../../union-1.x\"\n+\n+/* { dg-final { scan-assembler \"movw\\tip, #8063\" } } */\n+/* { dg-final { scan-assembler \"movt\\tip, 63\" } } */\n+/* { dg-final { scan-assembler \"and\\tr0, r0, ip\" } } */\n+/* { dg-final { scan-assembler \"movw\\tip, #511\" } } */\n+/* { dg-final { scan-assembler \"and\\tr1, r1, ip\" } } */\n+/* { dg-final { scan-assembler \"lsrs\\tr4, r4, #1\" } } */\n+/* { dg-final { scan-assembler \"lsls\\tr4, r4, #1\" } } */\n+/* { dg-final { scan-assembler \"mov\\tr2, r4\" } } */\n+/* { dg-final { scan-assembler \"mov\\tr3, r4\" } } */\n+/* { dg-final { scan-assembler \"bl\\t__gnu_cmse_nonsecure_call\" } } */"}, {"sha": "131afbbf4289b238438c53ab9ea55d13b8567513", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8m/union-2.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8m%2Funion-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8m%2Funion-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8m%2Funion-2.c?ref=e0e4be48a9892195f11d1b608793c3a30b640f54", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mcmse\" } */\n+\n+#include \"../../union-2.x\"\n+\n+/* { dg-final { scan-assembler \"movw\\tip, #8191\" } } */\n+/* { dg-final { scan-assembler \"movt\\tip, 63\" } } */\n+/* { dg-final { scan-assembler \"and\\tr0, r0, ip\" } } */\n+/* { dg-final { scan-assembler \"movw\\tip, #511\" } } */\n+/* { dg-final { scan-assembler \"movt\\tip, 65535\" } } */\n+/* { dg-final { scan-assembler \"and\\tr1, r1, ip\" } } */\n+/* { dg-final { scan-assembler \"movw\\tip, #65535\" } } */\n+/* { dg-final { scan-assembler \"movt\\tip, 31\" } } */\n+/* { dg-final { scan-assembler \"and\\tr2, r2, ip\" } } */\n+/* { dg-final { scan-assembler \"lsrs\\tr4, r4, #1\" } } */\n+/* { dg-final { scan-assembler \"lsls\\tr4, r4, #1\" } } */\n+/* { dg-final { scan-assembler \"mov\\tr3, r4\" } } */\n+/* { dg-final { scan-assembler \"bl\\t__gnu_cmse_nonsecure_call\" } } */"}, {"sha": "5f6891a26d9be6edbb81c6c9e71897d1b49c8c60", "filename": "gcc/testsuite/gcc.target/arm/cmse/struct-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fstruct-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fstruct-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fstruct-1.c?ref=e0e4be48a9892195f11d1b608793c3a30b640f54", "patch": "@@ -25,9 +25,9 @@ main (void)\n   return 0;\n }\n \n+/* { dg-final { scan-assembler \"vstr\\tFPCXTNS, \\\\\\[sp, #-4\\\\\\]!\" { target arm_cmse_clear_ok } } } */\n /* { dg-final { scan-assembler \"movs\\tr1, #255\" } } */\n /* { dg-final { scan-assembler \"movt\\tr1, 65535\" } } */\n /* { dg-final { scan-assembler \"ands\\tr0(, r0)?, r1\" } } */\n+/* { dg-final { scan-assembler \"vldr\\tFPCXTNS, \\\\\\[sp\\\\\\], #4\" { target arm_cmse_clear_ok } } } */\n /* { dg-final { scan-assembler \"bxns\" } } */\n-\n-"}, {"sha": "79166986c77b38b1ec99508a146ffd27d9725248", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e4be48a9892195f11d1b608793c3a30b640f54/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=e0e4be48a9892195f11d1b608793c3a30b640f54", "patch": "@@ -4525,6 +4525,19 @@ proc check_effective_target_arm_cmse_ok {} {\n     } \"-mcmse\"];\n }\n \n+# Return 1 if this is an ARM target where ARMv8-M Security Extensions with\n+# clearing instructions (clrm, vscclrm, vstr/vldr with FPCXT) is available.\n+\n+proc check_effective_target_arm_cmse_clear_ok {} {\n+    return [check_no_compiler_messages arm_cmse_clear object {\n+\tint\n+\tfoo (void)\n+\t{\n+\t  asm (\"clrm {r1, r2}\");\n+\t}\n+    } \"-mcmse\"];\n+}\n+\n # Return 1 if this compilation turns on string_ops_prefer_neon on.\n \n proc check_effective_target_arm_tune_string_ops_prefer_neon { } {"}]}