{"sha": "16023efc1e94fcedcd76bef886c266a30976dbde", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTYwMjNlZmMxZTk0ZmNlZGNkNzZiZWY4ODZjMjY2YTMwOTc2ZGJkZQ==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2013-05-29T13:15:16Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2013-05-29T13:15:16Z"}, "message": "re PR fortran/37336 ([F03] Finish derived-type finalization)\n\n2013-05-28  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/37336\n        * class.c (finalize_component): Fix coarray array refs.\n        (generate_finalization_wrapper): Only gfc_convert_type_warn\n        when the kind value is different.\n        (gfc_find_intrinsic_vtab): _copy's dst is now intent(inout).\n        (gfc_find_derived_vtab): Ditto. Enable finalization-wrapper\n        generation.\n        * module.c (MOD_VERSION): Bump.\n        (gfc_dump_module, gfc_use_module): Remove empty line in .mod.\n        * trans-array.c (gfc_conv_descriptor_token): Accept\n        * nonrestricted\n        void pointer.\n        (gfc_array_allocate, structure_alloc_comps): Don't nullify for\n        BT_CLASS allocations.\n        * trans-stmt.c (gfc_trans_allocate): Ditto.\n\n2013-05-28  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/37336\n        * gfortran.dg/auto_dealloc_2.f90: Update _free count in the\n        * dump.\n        * gfortran.dg/class_19.f03: Ditto.\n\nFrom-SVN: r199409", "tree": {"sha": "d9668ce9a676b9aa3ca7f365ef44fccebd997edc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d9668ce9a676b9aa3ca7f365ef44fccebd997edc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/16023efc1e94fcedcd76bef886c266a30976dbde", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16023efc1e94fcedcd76bef886c266a30976dbde", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16023efc1e94fcedcd76bef886c266a30976dbde", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16023efc1e94fcedcd76bef886c266a30976dbde/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a5350ddc612732cc2a3cb313ed86d4c6dbf7907a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5350ddc612732cc2a3cb313ed86d4c6dbf7907a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5350ddc612732cc2a3cb313ed86d4c6dbf7907a"}], "stats": {"total": 101, "additions": 49, "deletions": 52}, "files": [{"sha": "4ecf60b22dfc5e3027bef6169c4fb3f0f531c9bd", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16023efc1e94fcedcd76bef886c266a30976dbde/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16023efc1e94fcedcd76bef886c266a30976dbde/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=16023efc1e94fcedcd76bef886c266a30976dbde", "patch": "@@ -1,3 +1,20 @@\n+2013-05-28  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/37336\n+\t* class.c (finalize_component): Fix coarray array refs.\n+\t(generate_finalization_wrapper): Only gfc_convert_type_warn\n+\twhen the kind value is different.\n+\t(gfc_find_intrinsic_vtab): _copy's dst is now intent(inout).\n+\t(gfc_find_derived_vtab): Ditto. Enable finalization-wrapper\n+\tgeneration.\n+\t* module.c (MOD_VERSION): Bump.\n+\t(gfc_dump_module, gfc_use_module): Remove empty line in .mod.\n+\t* trans-array.c (gfc_conv_descriptor_token): Accept nonrestricted\n+\tvoid pointer.\n+\t(gfc_array_allocate, structure_alloc_comps): Don't nullify for\n+\tBT_CLASS allocations.\n+\t* trans-stmt.c (gfc_trans_allocate): Ditto.\n+\n 2013-05-28  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/37336"}, {"sha": "ba8efa91114ee0e0a3275170e7ef95ee81a1c328", "filename": "gcc/fortran/class.c", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16023efc1e94fcedcd76bef886c266a30976dbde/gcc%2Ffortran%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16023efc1e94fcedcd76bef886c266a30976dbde/gcc%2Ffortran%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fclass.c?ref=16023efc1e94fcedcd76bef886c266a30976dbde", "patch": "@@ -832,17 +832,18 @@ finalize_component (gfc_expr *expr, gfc_symbol *derived, gfc_component *comp,\n   ref->u.c.component = comp;\n   e->ts = comp->ts;\n \n-  if (comp->attr.dimension\n+  if (comp->attr.dimension || comp->attr.codimension\n       || (comp->ts.type == BT_CLASS && CLASS_DATA (comp)\n-\t  && CLASS_DATA (comp)->attr.dimension))\n+\t  && (CLASS_DATA (comp)->attr.dimension\n+\t      || CLASS_DATA (comp)->attr.codimension)))\n     {\n       ref->next = gfc_get_ref ();\n       ref->next->type = REF_ARRAY;\n-      ref->next->u.ar.type = AR_FULL;\n       ref->next->u.ar.dimen = 0;\n       ref->next->u.ar.as = comp->ts.type == BT_CLASS ? CLASS_DATA (comp)->as\n \t\t\t\t\t\t\t: comp->as;\n       e->rank = ref->next->u.ar.as->rank;\n+      ref->next->u.ar.type = e->rank ? AR_FULL : AR_ELEMENT;\n     }\n \n   /* Call DEALLOCATE (comp, stat=ignore).  */\n@@ -1640,7 +1641,8 @@ generate_finalization_wrapper (gfc_symbol *derived, gfc_namespace *ns,\n   rank = gfc_build_intrinsic_call (sub_ns, GFC_ISYM_RANK, \"rank\",\n \t\t\t\t   gfc_current_locus, 1,\n \t\t\t\t   gfc_lval_expr_from_sym (array));\n-  gfc_convert_type (rank, &idx->ts, 2);\n+  if (rank->ts.kind != idx->ts.kind)\n+    gfc_convert_type_warn (rank, &idx->ts, 2, 0);\n \n   /* Create is_contiguous variable.  */\n   gfc_get_symbol (\"is_contiguous\", sub_ns, &is_contiguous);\n@@ -2363,7 +2365,7 @@ gfc_find_derived_vtab (gfc_symbol *derived)\n \t\t  dst->attr.flavor = FL_VARIABLE;\n \t\t  dst->attr.dummy = 1;\n \t\t  dst->attr.artificial = 1;\n-\t\t  dst->attr.intent = INTENT_OUT;\n+\t\t  dst->attr.intent = INTENT_INOUT;\n \t\t  gfc_set_sym_referenced (dst);\n \t\t  copy->formal->next = gfc_get_formal_arglist ();\n \t\t  copy->formal->next->sym = dst;\n@@ -2382,17 +2384,13 @@ gfc_find_derived_vtab (gfc_symbol *derived)\n \t\t components and the calls to finalization subroutines.\n \t\t Note: The actual wrapper function can only be generated\n \t\t at resolution time.  */\n-\t    /* FIXME: Enable ABI-breaking \"_final\" generation.  */\n-\t    if (0)\n-\t    {\n \t      if (!gfc_add_component (vtype, \"_final\", &c))\n \t\tgoto cleanup;\n \t      c->attr.proc_pointer = 1;\n \t      c->attr.access = ACCESS_PRIVATE;\n \t      c->tb = XCNEW (gfc_typebound_proc);\n \t      c->tb->ppc = 1;\n \t      generate_finalization_wrapper (derived, ns, tname, c);\n-\t    }\n \n \t      /* Add procedure pointers for type-bound procedures.  */\n \t      if (!derived->attr.unlimited_polymorphic)\n@@ -2651,7 +2649,7 @@ gfc_find_intrinsic_vtab (gfc_typespec *ts)\n \t      dst->ts.kind = ts->kind;\n \t      dst->attr.flavor = FL_VARIABLE;\n \t      dst->attr.dummy = 1;\n-\t      dst->attr.intent = INTENT_OUT;\n+\t      dst->attr.intent = INTENT_INOUT;\n \t      gfc_set_sym_referenced (dst);\n \t      copy->formal->next = gfc_get_formal_arglist ();\n \t      copy->formal->next->sym = dst;"}, {"sha": "c390a95952e6b7a47abd853089e6fff6591ccdb7", "filename": "gcc/fortran/module.c", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16023efc1e94fcedcd76bef886c266a30976dbde/gcc%2Ffortran%2Fmodule.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16023efc1e94fcedcd76bef886c266a30976dbde/gcc%2Ffortran%2Fmodule.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmodule.c?ref=16023efc1e94fcedcd76bef886c266a30976dbde", "patch": "@@ -80,10 +80,8 @@ along with GCC; see the file COPYING3.  If not see\n #define MODULE_EXTENSION \".mod\"\n \n /* Don't put any single quote (') in MOD_VERSION, if you want it to be\n-   recognized.  \n-   TODO: When the version is bumped, remove the extra empty line at\n-   the beginning of module files.  */\n-#define MOD_VERSION \"10\"\n+   recognized.  */\n+#define MOD_VERSION \"11\"\n \n \n /* Structure that describes a position within a module file.  */\n@@ -5567,14 +5565,9 @@ gfc_dump_module (const char *name, int dump_flag)\n     gfc_fatal_error (\"Can't open module file '%s' for writing at %C: %s\",\n \t\t     filename_tmp, xstrerror (errno));\n \n-  /* Write the header.\n-     FIXME: For backwards compatibility with the old uncompressed\n-     module format, write an extra empty line. When the module version\n-     is bumped, this can be removed.  */\n-  gzprintf (module_fp, \"GFORTRAN module version '%s' created from %s\\n\\n\",\n+  gzprintf (module_fp, \"GFORTRAN module version '%s' created from %s\\n\",\n \t    MOD_VERSION, gfc_source_file);\n \n-\n   /* Write the module itself.  */\n   iomode = IO_OUTPUT;\n   module_name = gfc_get_string (name);\n@@ -6364,10 +6357,10 @@ gfc_use_module (gfc_use_list *module)\n   read_module_to_tmpbuf ();\n   gzclose (module_fp);\n \n-  /* Skip the first two lines of the module, after checking that this is\n+  /* Skip the first line of the module, after checking that this is\n      a gfortran module file.  */\n   line = 0;\n-  while (line < 2)\n+  while (line < 1)\n     {\n       c = module_char ();\n       if (c == EOF)"}, {"sha": "be3a5a0ef51f0284cdef8198e1d323edb911bdae", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 11, "deletions": 18, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16023efc1e94fcedcd76bef886c266a30976dbde/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16023efc1e94fcedcd76bef886c266a30976dbde/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=16023efc1e94fcedcd76bef886c266a30976dbde", "patch": "@@ -300,7 +300,11 @@ gfc_conv_descriptor_token (tree desc)\n   gcc_assert (GFC_TYPE_ARRAY_AKIND (type) == GFC_ARRAY_ALLOCATABLE);\n   gcc_assert (gfc_option.coarray == GFC_FCOARRAY_LIB);\n   field = gfc_advance_chain (TYPE_FIELDS (type), CAF_TOKEN_FIELD);\n-  gcc_assert (field != NULL_TREE && TREE_TYPE (field) == prvoid_type_node);\n+\n+  /* Should be a restricted pointer - except in the finalization wrapper.  */\n+  gcc_assert (field != NULL_TREE\n+\t      && (TREE_TYPE (field) == prvoid_type_node\n+\t\t  || TREE_TYPE (field) == pvoid_type_node));\n \n   return fold_build3_loc (input_location, COMPONENT_REF, TREE_TYPE (field),\n \t\t\t  desc, field, NULL_TREE);\n@@ -5222,18 +5226,6 @@ gfc_array_allocate (gfc_se * se, gfc_expr * expr, tree status, tree errmsg,\n \n   gfc_add_expr_to_block (&se->pre, tmp);\n \n-  if (expr->ts.type == BT_CLASS)\n-    {\n-      tmp = build_int_cst (unsigned_char_type_node, 0);\n-      /* With class objects, it is best to play safe and null the\n-\t memory because we cannot know if dynamic types have allocatable\n-\t components or not.  */\n-      tmp = build_call_expr_loc (input_location,\n-\t\t\t\t builtin_decl_explicit (BUILT_IN_MEMSET),\n-\t\t\t\t 3, pointer, tmp,  size);\n-      gfc_add_expr_to_block (&se->pre, tmp);\n-    }\n-\n   /* Update the array descriptors. */\n   if (dimension)\n     gfc_conv_descriptor_offset_set (&set_descriptor_block, se->expr, offset);\n@@ -7699,6 +7691,10 @@ structure_alloc_comps (gfc_symbol * der_type, tree decl,\n \t\t{\n \t\t  nelems = gfc_conv_descriptor_size (src_data,\n \t\t\t\t\t\t     CLASS_DATA (c)->as->rank);\n+\t\t  size = fold_build2_loc (input_location, MULT_EXPR,\n+\t\t\t\t\t  size_type_node, size,\n+\t\t\t\t\t  fold_convert (size_type_node,\n+\t\t\t\t\t\t\tnelems));\n \t\t  src_data = gfc_conv_descriptor_data_get (src_data);\n \t\t  dst_data = gfc_conv_descriptor_data_get (dst_data);\n \t\t}\n@@ -7707,11 +7703,8 @@ structure_alloc_comps (gfc_symbol * der_type, tree decl,\n \n \t      gfc_init_block (&tmpblock);\n \n-\t      /* We need to use CALLOC as _copy might try to free allocatable\n-\t\t components of the destination.  */\n-\t      ftn_tree = builtin_decl_explicit (BUILT_IN_CALLOC);\n-              tmp = build_call_expr_loc (input_location, ftn_tree, 2, nelems,\n-\t\t\t\t\t size);\n+\t      ftn_tree = builtin_decl_explicit (BUILT_IN_MALLOC);\n+\t      tmp = build_call_expr_loc (input_location, ftn_tree, 1, size);\n \t      gfc_add_modify (&tmpblock, dst_data,\n \t\t\t      fold_convert (TREE_TYPE (dst_data), tmp));\n "}, {"sha": "781293401af25249e3d74164b7ef1f432ec2078b", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16023efc1e94fcedcd76bef886c266a30976dbde/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16023efc1e94fcedcd76bef886c266a30976dbde/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=16023efc1e94fcedcd76bef886c266a30976dbde", "patch": "@@ -5071,16 +5071,6 @@ gfc_trans_allocate (gfc_code * code)\n \t      tmp = gfc_nullify_alloc_comp (expr->ts.u.derived, tmp, 0);\n \t      gfc_add_expr_to_block (&se.pre, tmp);\n \t    }\n-\t  else if (al->expr->ts.type == BT_CLASS)\n-\t    {\n-\t      /* With class objects, it is best to play safe and null the\n-\t\t memory because we cannot know if dynamic types have allocatable\n-\t\t components or not.  */\n-\t      tmp = build_call_expr_loc (input_location,\n-\t\t\t\t\t builtin_decl_explicit (BUILT_IN_MEMSET),\n-\t\t\t\t\t 3, se.expr, integer_zero_node,  memsz);\n-\t      gfc_add_expr_to_block (&se.pre, tmp);\n-\t    }\n \t}\n \n       gfc_add_block_to_block (&block, &se.pre);"}, {"sha": "3809f56688c331a33deeb498da1298fb7c2439cb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16023efc1e94fcedcd76bef886c266a30976dbde/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16023efc1e94fcedcd76bef886c266a30976dbde/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=16023efc1e94fcedcd76bef886c266a30976dbde", "patch": "@@ -1,3 +1,9 @@\n+2013-05-28  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/37336\n+\t* gfortran.dg/auto_dealloc_2.f90: Update _free count in the dump.\n+\t* gfortran.dg/class_19.f03: Ditto.\n+\n 2013-05-29  Richard Biener  <rguenther@suse.de>\n \n \t* gcc.dg/vect/bb-slp-32.c: New testcase."}, {"sha": "d261973e20bf229dc41d426667df052cec72c0d3", "filename": "gcc/testsuite/gfortran.dg/auto_dealloc_2.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16023efc1e94fcedcd76bef886c266a30976dbde/gcc%2Ftestsuite%2Fgfortran.dg%2Fauto_dealloc_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16023efc1e94fcedcd76bef886c266a30976dbde/gcc%2Ftestsuite%2Fgfortran.dg%2Fauto_dealloc_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fauto_dealloc_2.f90?ref=16023efc1e94fcedcd76bef886c266a30976dbde", "patch": "@@ -25,5 +25,5 @@ subroutine init(x)\n \n end program \n \n-! { dg-final { scan-tree-dump-times \"__builtin_free\" 3 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_free\" 5 \"original\" } }\n ! { dg-final { cleanup-tree-dump \"original\" } }"}, {"sha": "6dcd99c13a26711766080d0bb1dc14a14ad1389e", "filename": "gcc/testsuite/gfortran.dg/class_19.f03", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16023efc1e94fcedcd76bef886c266a30976dbde/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_19.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16023efc1e94fcedcd76bef886c266a30976dbde/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_19.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_19.f03?ref=16023efc1e94fcedcd76bef886c266a30976dbde", "patch": "@@ -39,5 +39,5 @@ program main\n \n end program main\n \n-! { dg-final { scan-tree-dump-times \"__builtin_free\" 11 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_free\" 15 \"original\" } }\n ! { dg-final { cleanup-tree-dump \"original\" } }"}]}