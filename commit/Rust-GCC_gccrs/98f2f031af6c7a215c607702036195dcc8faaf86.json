{"sha": "98f2f031af6c7a215c607702036195dcc8faaf86", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OThmMmYwMzFhZjZjN2EyMTVjNjA3NzAyMDM2MTk1ZGNjOGZhYWY4Ng==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2014-05-30T07:35:47Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2014-05-30T07:35:47Z"}, "message": "ira.c (ira_get_dup_out_num): Check for output operands at the start of the loop.\n\ngcc/\n\t* ira.c (ira_get_dup_out_num): Check for output operands at\n\tthe start of the loop.  Handle cases where an included alternative\n\tfollows an excluded one.\n\nFrom-SVN: r211072", "tree": {"sha": "355ba26239f6abd8173627db18edbe081b68b586", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/355ba26239f6abd8173627db18edbe081b68b586"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/98f2f031af6c7a215c607702036195dcc8faaf86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98f2f031af6c7a215c607702036195dcc8faaf86", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98f2f031af6c7a215c607702036195dcc8faaf86", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98f2f031af6c7a215c607702036195dcc8faaf86/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3901578cd6f259ef124bc0492a030efbd117ef96", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3901578cd6f259ef124bc0492a030efbd117ef96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3901578cd6f259ef124bc0492a030efbd117ef96"}], "stats": {"total": 22, "additions": 14, "deletions": 8}, "files": [{"sha": "a0d75fe2d61c67c832e31c27d3f6d33cd6460f5c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98f2f031af6c7a215c607702036195dcc8faaf86/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98f2f031af6c7a215c607702036195dcc8faaf86/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=98f2f031af6c7a215c607702036195dcc8faaf86", "patch": "@@ -1,3 +1,9 @@\n+2014-05-30  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* ira.c (ira_get_dup_out_num): Check for output operands at\n+\tthe start of the loop.  Handle cases where an included alternative\n+\tfollows an excluded one.\n+\n 2014-05-29  Mike Stump  <mikestump@comcast.net>\n \n \tPR debug/61352"}, {"sha": "eebd4100bc374a472148a360f4fd39e3c5fa2534", "filename": "gcc/ira.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98f2f031af6c7a215c607702036195dcc8faaf86/gcc%2Fira.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98f2f031af6c7a215c607702036195dcc8faaf86/gcc%2Fira.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira.c?ref=98f2f031af6c7a215c607702036195dcc8faaf86", "patch": "@@ -1979,33 +1979,33 @@ ira_get_dup_out_num (int op_num, HARD_REG_SET &alts)\n \n   if (op_num < 0 || recog_data.n_alternatives == 0)\n     return -1;\n-  use_commut_op_p = false;\n+  /* We should find duplications only for input operands.  */\n+  if (recog_data.operand_type[op_num] != OP_IN)\n+    return -1;\n   str = recog_data.constraints[op_num];\n+  use_commut_op_p = false;\n   for (;;)\n     {\n #ifdef EXTRA_CONSTRAINT_STR\n       op = recog_data.operand[op_num];\n #endif\n       \n-      for (ignore_p = false, original = -1, curr_alt = 0;;)\n+      for (curr_alt = 0, ignore_p = !TEST_HARD_REG_BIT (alts, curr_alt),\n+\t   original = -1;;)\n \t{\n \t  c = *str;\n \t  if (c == '\\0')\n \t    break;\n-\t  if (c == '#' || !TEST_HARD_REG_BIT (alts, curr_alt))\n+\t  if (c == '#')\n \t    ignore_p = true;\n \t  else if (c == ',')\n \t    {\n \t      curr_alt++;\n-\t      ignore_p = false;\n+\t      ignore_p = !TEST_HARD_REG_BIT (alts, curr_alt);\n \t    }\n \t  else if (! ignore_p)\n \t    switch (c)\n \t      {\n-\t\t/* We should find duplications only for input operands.  */\n-\t      case '=':\n-\t      case '+':\n-\t\tgoto fail;\n \t      case 'X':\n \t      case 'p':\n \t      case 'g':"}]}