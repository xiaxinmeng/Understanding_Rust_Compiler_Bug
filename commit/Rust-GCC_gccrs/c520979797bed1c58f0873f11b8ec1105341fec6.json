{"sha": "c520979797bed1c58f0873f11b8ec1105341fec6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzUyMDk3OTc5N2JlZDFjNThmMDg3M2YxMWI4ZWMxMTA1MzQxZmVjNg==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2004-06-26T01:43:57Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2004-06-26T01:43:57Z"}, "message": "ifcvt.c (seq_contains_jump): Delete function.\n\n\n\t* ifcvt.c (seq_contains_jump): Delete function.\n\t(end_ifcvt_sequence): Replace call to seq_contains_jump with an\n\tinline test for a jump instruction in the existing \"insn\" loop.\n\t(block_fallthru): Document function.\n\nFrom-SVN: r83697", "tree": {"sha": "2a4763fc196c16c9f0738fbed472b2ddd1c0451c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2a4763fc196c16c9f0738fbed472b2ddd1c0451c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c520979797bed1c58f0873f11b8ec1105341fec6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c520979797bed1c58f0873f11b8ec1105341fec6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c520979797bed1c58f0873f11b8ec1105341fec6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c520979797bed1c58f0873f11b8ec1105341fec6/comments", "author": null, "committer": null, "parents": [{"sha": "0e60562abe8389976483f16432c90a2c8226db77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e60562abe8389976483f16432c90a2c8226db77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e60562abe8389976483f16432c90a2c8226db77"}], "stats": {"total": 39, "additions": 15, "deletions": 24}, "files": [{"sha": "9c638b86ece117e223b7a1a5eba2bf4e524c6435", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c520979797bed1c58f0873f11b8ec1105341fec6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c520979797bed1c58f0873f11b8ec1105341fec6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c520979797bed1c58f0873f11b8ec1105341fec6", "patch": "@@ -1,3 +1,10 @@\n+2004-06-25  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* ifcvt.c (seq_contains_jump): Delete function.\n+\t(end_ifcvt_sequence): Replace call to seq_contains_jump with an\n+\tinline test for a jump instruction in the existing \"insn\" loop.\n+\t(block_fallthru): Document function.\n+\n 2004-06-25  Philip Blundell  <philb@gnu.org>\n \n \tPR wrong-code/15089"}, {"sha": "053424dc0058e18e7d767e8e8cb980f964f2f27f", "filename": "gcc/ifcvt.c", "status": "modified", "additions": 8, "deletions": 24, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c520979797bed1c58f0873f11b8ec1105341fec6/gcc%2Fifcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c520979797bed1c58f0873f11b8ec1105341fec6/gcc%2Fifcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fifcvt.c?ref=c520979797bed1c58f0873f11b8ec1105341fec6", "patch": "@@ -88,7 +88,6 @@ static bool life_data_ok;\n static int count_bb_insns (basic_block);\n static rtx first_active_insn (basic_block);\n static rtx last_active_insn (basic_block, int);\n-static int seq_contains_jump (rtx);\n static basic_block block_fallthru (basic_block);\n static int cond_exec_process_insns (ce_if_block_t *, rtx, rtx, rtx, rtx, int);\n static rtx cond_exec_get_condition (rtx);\n@@ -213,22 +212,7 @@ last_active_insn (basic_block bb, int skip_use_p)\n   return insn;\n }\n \n-/* It is possible, especially when having dealt with multi-word\n-   arithmetic, for the expanders to have emitted jumps.  Search\n-   through the sequence and return TRUE if a jump exists so that\n-   we can abort the conversion.  */\n-\n-static int\n-seq_contains_jump (rtx insn)\n-{\n-  while (insn)\n-    {\n-      if (GET_CODE (insn) == JUMP_INSN)\n-\treturn 1;\n-      insn = NEXT_INSN (insn);\n-    }\n-  return 0;\n-}\n+/* Return the basic block reached by falling though the basic block BB.  */\n \n static basic_block\n block_fallthru (basic_block bb)\n@@ -707,23 +691,23 @@ noce_emit_move_insn (rtx x, rtx y)\n static rtx\n end_ifcvt_sequence (struct noce_if_info *if_info)\n {\n-  rtx y;\n+  rtx insn;\n   rtx seq = get_insns ();\n \n   set_used_flags (if_info->x);\n   set_used_flags (if_info->cond);\n   unshare_all_rtl_in_chain (seq);\n   end_sequence ();\n \n-  if (seq_contains_jump (seq))\n-    return NULL_RTX;\n-\n-  /* Make sure that all of the instructions emitted are recognizable.\n+  /* Make sure that all of the instructions emitted are recognizable,\n+     and that we haven't introduced a new jump instruction.\n      As an excersise for the reader, build a general mechanism that\n      allows proper placement of required clobbers.  */\n-  for (y = seq; y ; y = NEXT_INSN (y))\n-    if (recog_memoized (y) == -1)\n+  for (insn = seq; insn; insn = NEXT_INSN (insn))\n+    if (GET_CODE (insn) == JUMP_INSN\n+\t|| recog_memoized (insn) == -1)\n       return NULL_RTX;\n+\n   return seq;\n }\n "}]}