{"sha": "0826f1d89fe4f843ddfe25a9e124109dfb9b75bc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDgyNmYxZDg5ZmU0Zjg0M2RkZmUyNWE5ZTEyNDEwOWRmYjliNzViYw==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "2001-07-02T20:21:15Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2001-07-02T20:21:15Z"}, "message": "toplev.c (dump_file_index): Move SSA dumps just after first jump dump.\n\n       * toplev.c (dump_file_index): Move SSA dumps just after first\n        jump dump.\n        (dump_file): Corresponding changes.\n        (rest_of_compilation): Move SSA path to just after the first\n        jump pass.\n        * doc/gcc.texi (Passes): Update due to movement of SSA path.\n        * doc/invoke.texi: Update dump file #s as they were completely\n        out of date with reality.\n\nFrom-SVN: r43704", "tree": {"sha": "ff7840de31529ac1a890e4b7e0261340de2d3ca2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ff7840de31529ac1a890e4b7e0261340de2d3ca2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0826f1d89fe4f843ddfe25a9e124109dfb9b75bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0826f1d89fe4f843ddfe25a9e124109dfb9b75bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0826f1d89fe4f843ddfe25a9e124109dfb9b75bc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0826f1d89fe4f843ddfe25a9e124109dfb9b75bc/comments", "author": null, "committer": null, "parents": [{"sha": "918a61248dc591d88ca58507f8bdbad20edbe404", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/918a61248dc591d88ca58507f8bdbad20edbe404", "html_url": "https://github.com/Rust-GCC/gccrs/commit/918a61248dc591d88ca58507f8bdbad20edbe404"}], "stats": {"total": 214, "additions": 117, "deletions": 97}, "files": [{"sha": "53caff49e718df00b3fede52ffcd0f18544a3a70", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0826f1d89fe4f843ddfe25a9e124109dfb9b75bc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0826f1d89fe4f843ddfe25a9e124109dfb9b75bc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0826f1d89fe4f843ddfe25a9e124109dfb9b75bc", "patch": "@@ -1,3 +1,14 @@\n+Mon Jul  2 14:20:13 2001  Jeffrey A Law  (law@cygnus.com)\n+\n+\t* toplev.c (dump_file_index): Move SSA dumps just after first\n+\tjump dump.\n+\t(dump_file): Corresponding changes.\n+\t(rest_of_compilation): Move SSA path to just after the first\n+\tjump pass.\n+\t* doc/gcc.texi (Passes): Update due to movement of SSA path.\n+\t* doc/invoke.texi: Update dump file #s as they were completely\n+\tout of date with reality.\n+\n 2001-07-02  Geoffrey Keating  <geoffk@redhat.com>\n \n \t* doc/tm.texi (Frame Layout): Document STACK_PUSH_CODE."}, {"sha": "d20e6b557aa1a80be237c4d0183ed3e1751fc106", "filename": "gcc/doc/gcc.texi", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0826f1d89fe4f843ddfe25a9e124109dfb9b75bc/gcc%2Fdoc%2Fgcc.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0826f1d89fe4f843ddfe25a9e124109dfb9b75bc/gcc%2Fdoc%2Fgcc.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc.texi?ref=0826f1d89fe4f843ddfe25a9e124109dfb9b75bc", "patch": "@@ -3372,6 +3372,7 @@ The option @option{-dj} causes a debugging dump of the RTL code after\n this pass is run for the first time.  This dump file's name is made by\n appending @samp{.jump} to the input file name.\n \n+\n @cindex register use analysis\n @item\n Register scan.  This pass finds the first and last use of each\n@@ -3387,20 +3388,6 @@ the second conditional test.  The source code for this pass is in\n @file{jump.c}.  This optimization is only performed if\n @option{-fthread-jumps} is enabled.\n \n-@cindex common subexpression elimination\n-@cindex constant propagation\n-@item\n-Common subexpression elimination.  This pass also does constant\n-propagation.  Its source files are @file{cse.c}, and @file{cselib.c}.\n-If constant  propagation causes conditional jumps to become\n-unconditional or to become no-ops, jump optimization is run again when\n-CSE is finished.\n-\n-@opindex ds\n-The option @option{-ds} causes a debugging dump of the RTL code after\n-this pass.  This dump file's name is made by appending @samp{.cse} to\n-the input file name.\n-\n @cindex SSA optimizations\n @cindex Single Static Assignment optimizations\n @opindex fssa\n@@ -3435,6 +3422,21 @@ The option @option{-dX} causes a debugging dump of the RTL code after\n this pass.  This dump file's name is made by appending @samp{.ssadce} to\n the input file name.\n @end itemize\n+\n+@cindex common subexpression elimination\n+@cindex constant propagation\n+@item\n+Common subexpression elimination.  This pass also does constant\n+propagation.  Its source files are @file{cse.c}, and @file{cselib.c}.\n+If constant  propagation causes conditional jumps to become\n+unconditional or to become no-ops, jump optimization is run again when\n+CSE is finished.\n+\n+@opindex ds\n+The option @option{-ds} causes a debugging dump of the RTL code after\n+this pass.  This dump file's name is made by appending @samp{.cse} to\n+the input file name.\n+\n @cindex global common subexpression elimination\n @cindex constant propagation\n @cindex copy propagation"}, {"sha": "251530a9fbe1c6e20c59f5afa5c83ff42879f936", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 31, "deletions": 27, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0826f1d89fe4f843ddfe25a9e124109dfb9b75bc/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0826f1d89fe4f843ddfe25a9e124109dfb9b75bc/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=0826f1d89fe4f843ddfe25a9e124109dfb9b75bc", "patch": "@@ -2856,101 +2856,105 @@ Here are the possible letters for use in @var{letters}, and their meanings:\n Annotate the assembler output with miscellaneous debugging information.\n @item b\n @opindex db\n-Dump after computing branch probabilities, to @file{@var{file}.11.bp}.\n+Dump after computing branch probabilities, to @file{@var{file}.13.bp}.\n @item B\n @opindex dB\n-Dump after block reordering, to @file{@var{file}.26.bbro}.\n+Dump after block reordering, to @file{@var{file}.27.bbro}.\n @item c\n @opindex dc\n-Dump after instruction combination, to the file @file{@var{file}.14.combine}.\n+Dump after instruction combination, to the file @file{@var{file}.15.combine}.\n @item C\n @opindex dC\n-Dump after the first if conversion, to the file @file{@var{file}.15.ce}.\n+Dump after the first if conversion, to the file @file{@var{file}.16.ce}.\n @item d\n @opindex dd\n-Dump after delayed branch scheduling, to @file{@var{file}.29.dbr}.\n+Dump after delayed branch scheduling, to @file{@var{file}.30.dbr}.\n @item D\n @opindex dD\n Dump all macro definitions, at the end of preprocessing, in addition to\n normal output.\n @item e\n @opindex de\n-Dump after SSA optimizations, to @file{@var{file}.05.ssa} and\n+Dump after SSA optimizations, to @file{@var{file}.04.ssa} and\n @file{@var{file}.06.ussa}.\n @item E\n @opindex dE\n-Dump after the second if conversion, to @file{@var{file}.24.ce2}.\n+Dump after the second if conversion, to @file{@var{file}.25.ce2}.\n @item f\n @opindex df\n-Dump after life analysis, to @file{@var{file}.13.life}.\n+Dump after life analysis, to @file{@var{file}.14.life}.\n @item F\n @opindex dF\n-Dump after purging @code{ADDRESSOF} codes, to @file{@var{file}.04.addressof}.\n+Dump after purging @code{ADDRESSOF} codes, to @file{@var{file}.08.addressof}.\n @item g\n @opindex dg\n-Dump after global register allocation, to @file{@var{file}.19.greg}.\n+Dump after global register allocation, to @file{@var{file}.20.greg}.\n+@item h\n+@opindex dh\n+Dump after finalization of EH handling code, to @file{@var{file}.02.eh}.\n+@item o\n @item o\n @opindex do\n-Dump after post-reload CSE and other optimizations, to @file{@var{file}.20.postreload}.\n+Dump after post-reload CSE and other optimizations, to @file{@var{file}.21.postreload}.\n @item G\n @opindex dG\n-Dump after GCSE, to @file{@var{file}.08.gcse}.\n+Dump after GCSE, to @file{@var{file}.09.gcse}.\n @item i\n @opindex di\n Dump after sibling call optimizations, to @file{@var{file}.01.sibling}.\n @item j\n @opindex dj\n-Dump after the first jump optimization, to @file{@var{file}.02.jump}.\n+Dump after the first jump optimization, to @file{@var{file}.03.jump}.\n @item J\n @opindex dJ\n-Dump after the last jump optimization, to @file{@var{file}.27.jump2}.\n+Dump after the last jump optimization, to @file{@var{file}.28.jump2}.\n @item k\n @opindex dk\n-Dump after conversion from registers to stack, to @file{@var{file}.29.stack}.\n+Dump after conversion from registers to stack, to @file{@var{file}.31.stack}.\n @item l\n @opindex dl\n-Dump after local register allocation, to @file{@var{file}.18.lreg}.\n+Dump after local register allocation, to @file{@var{file}.19.lreg}.\n @item L\n @opindex dL\n-Dump after loop optimization, to @file{@var{file}.09.loop}.\n+Dump after loop optimization, to @file{@var{file}.10.loop}.\n @item M\n @opindex dM\n Dump after performing the machine dependent reorganisation pass, to\n-@file{@var{file}.28.mach}.\n+@file{@var{file}.29.mach}.\n @item n\n @opindex dn\n-Dump after register renumbering, to @file{@var{file}.23.rnreg}.\n+Dump after register renumbering, to @file{@var{file}.24.rnreg}.\n @item N\n @opindex dN\n-Dump after the register move pass, to @file{@var{file}.16.regmove}.\n+Dump after the register move pass, to @file{@var{file}.17.regmove}.\n @item r\n @opindex dr\n Dump after RTL generation, to @file{@var{file}.00.rtl}.\n @item R\n @opindex dR\n Dump after the second instruction scheduling pass, to\n-@file{@var{file}.25.sched2}.\n+@file{@var{file}.26.sched2}.\n @item s\n @opindex ds\n Dump after CSE (including the jump optimization that sometimes follows\n-CSE), to @file{@var{file}.03.cse}.\n+CSE), to @file{@var{file}.07.cse}.\n @item S\n @opindex dS\n Dump after the first instruction scheduling pass, to\n-@file{@var{file}.17.sched}.\n+@file{@var{file}.18.sched}.\n @item t\n @opindex dt\n Dump after the second CSE pass (including the jump optimization that\n-sometimes follows CSE), to @file{@var{file}.10.cse2}.\n+sometimes follows CSE), to @file{@var{file}.11.cse2}.\n @item w\n @opindex dw\n-Dump after the second flow pass, to @file{@var{file}.21.flow2}.\n+Dump after the second flow pass, to @file{@var{file}.22.flow2}.\n @item X\n @opindex dX\n-Dump after SSA aggressive dead code elimination, to @file{@var{file}.06.ssadce}.\n+Dump after SSA aggressive dead code elimination, to @file{@var{file}.05.ssadce}.\n @item z\n @opindex dz\n-Dump after the peephole pass, to @file{@var{file}.22.peephole2}.\n+Dump after the peephole pass, to @file{@var{file}.23.peephole2}.\n @item a\n @opindex da\n Produce all the dumps listed above."}, {"sha": "762b7f1c89648dce31721c4061d17a68c2406be0", "filename": "gcc/toplev.c", "status": "modified", "additions": 59, "deletions": 56, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0826f1d89fe4f843ddfe25a9e124109dfb9b75bc/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0826f1d89fe4f843ddfe25a9e124109dfb9b75bc/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=0826f1d89fe4f843ddfe25a9e124109dfb9b75bc", "patch": "@@ -253,11 +253,11 @@ enum dump_file_index\n   DFI_sibling,\n   DFI_eh,\n   DFI_jump,\n-  DFI_cse,\n-  DFI_addressof,\n   DFI_ssa,\n   DFI_ssa_dce,\n   DFI_ussa,\n+  DFI_cse,\n+  DFI_addressof,\n   DFI_gcse,\n   DFI_loop,\n   DFI_cse2,\n@@ -299,11 +299,11 @@ struct dump_file_info dump_file[DFI_MAX] =\n   { \"sibling\",  'i', 0, 0, 0 },\n   { \"eh\",\t'h', 0, 0, 0 },\n   { \"jump\",\t'j', 0, 0, 0 },\n-  { \"cse\",\t's', 0, 0, 0 },\n-  { \"addressof\", 'F', 0, 0, 0 },\n   { \"ssa\",\t'e', 1, 0, 0 },\n   { \"ssadce\",\t'X', 1, 0, 0 },\n   { \"ussa\",\t'e', 1, 0, 0 },\t/* Yes, duplicate enable switch.  */\n+  { \"cse\",\t's', 0, 0, 0 },\n+  { \"addressof\", 'F', 0, 0, 0 },\n   { \"gcse\",\t'G', 1, 0, 0 },\n   { \"loop\",\t'L', 1, 0, 0 },\n   { \"cse2\",\t't', 1, 0, 0 },\n@@ -2947,6 +2947,61 @@ rest_of_compilation (decl)\n       goto exit_rest_of_compilation;\n     }\n \n+  /* Long term, this should probably move before the jump optimizer too,\n+     but I didn't want to disturb the rtl_dump_and_exit and related\n+     stuff at this time.  */\n+  if (optimize > 0 && flag_ssa)\n+    {\n+      /* Convert to SSA form.  */\n+\n+      timevar_push (TV_TO_SSA);\n+      open_dump_file (DFI_ssa, decl);\n+\n+      find_basic_blocks (insns, max_reg_num (), rtl_dump_file);\n+      cleanup_cfg ();\n+      convert_to_ssa ();\n+\n+      close_dump_file (DFI_ssa, print_rtl_with_bb, insns);\n+      timevar_pop (TV_TO_SSA);\n+\n+      /* The SSA implementation uses basic block numbers in its phi\n+\t nodes.  Thus, changing the control-flow graph or the basic\n+\t blocks, e.g., calling find_basic_blocks () or cleanup_cfg (),\n+\t may cause problems.  */\n+\n+      if (flag_ssa_dce)\n+\t{\n+\t  /* Remove dead code. */\n+\n+\t  timevar_push (TV_SSA_DCE);\n+\t  open_dump_file (DFI_ssa_dce, decl);\n+\n+\t  insns = get_insns ();\n+\t  ssa_eliminate_dead_code();\n+\n+\t  close_dump_file (DFI_ssa_dce, print_rtl_with_bb, insns);\n+\t  timevar_pop (TV_SSA_DCE);\n+\t}\n+\n+      /* Convert from SSA form.  */\n+\n+      timevar_push (TV_FROM_SSA);\n+      open_dump_file (DFI_ussa, decl);\n+\n+      convert_from_ssa ();\n+      /* New registers have been created.  Rescan their usage.  */\n+      reg_scan (insns, max_reg_num (), 1);\n+      /* Life analysis used in SSA adds log_links but these\n+\t shouldn't be there until the flow stage, so clear\n+\t them away.  */\n+      clear_log_links (insns);\n+\n+      close_dump_file (DFI_ussa, print_rtl_with_bb, insns);\n+      timevar_pop (TV_FROM_SSA);\n+\n+      ggc_collect ();\n+    }\n+\n   timevar_push (TV_JUMP);\n \n   if (optimize > 0)\n@@ -3045,58 +3100,6 @@ rest_of_compilation (decl)\n \n   ggc_collect ();\n \n-  if (optimize > 0 && flag_ssa)\n-    {\n-      /* Convert to SSA form.  */\n-\n-      timevar_push (TV_TO_SSA);\n-      open_dump_file (DFI_ssa, decl);\n-\n-      find_basic_blocks (insns, max_reg_num (), rtl_dump_file);\n-      cleanup_cfg ();\n-      convert_to_ssa ();\n-\n-      close_dump_file (DFI_ssa, print_rtl_with_bb, insns);\n-      timevar_pop (TV_TO_SSA);\n-\n-      /* The SSA implementation uses basic block numbers in its phi\n-\t nodes.  Thus, changing the control-flow graph or the basic\n-\t blocks, e.g., calling find_basic_blocks () or cleanup_cfg (),\n-\t may cause problems.  */\n-\n-      if (flag_ssa_dce)\n-\t{\n-\t  /* Remove dead code. */\n-\n-\t  timevar_push (TV_SSA_DCE);\n-\t  open_dump_file (DFI_ssa_dce, decl);\n-\n-\t  insns = get_insns ();\n-\t  ssa_eliminate_dead_code();\n-\n-\t  close_dump_file (DFI_ssa_dce, print_rtl_with_bb, insns);\n-\t  timevar_pop (TV_SSA_DCE);\n-\t}\n-\n-      /* Convert from SSA form.  */\n-\n-      timevar_push (TV_FROM_SSA);\n-      open_dump_file (DFI_ussa, decl);\n-\n-      convert_from_ssa ();\n-      /* New registers have been created.  Rescan their usage.  */\n-      reg_scan (insns, max_reg_num (), 1);\n-      /* Life analysis used in SSA adds log_links but these\n-\t shouldn't be there until the flow stage, so clear\n-\t them away.  */\n-      clear_log_links (insns);\n-\n-      close_dump_file (DFI_ussa, print_rtl_with_bb, insns);\n-      timevar_pop (TV_FROM_SSA);\n-\n-      ggc_collect ();\n-    }\n-\n   /* Perform global cse.  */\n \n   if (optimize > 0 && flag_gcse)"}]}