{"sha": "7171dc86e4bb022c1f55a5a0af921ec3a6c9c17c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzE3MWRjODZlNGJiMDIyYzFmNTVhNWEwYWY5MjFlYzNhNmM5YzE3Yw==", "commit": {"author": {"name": "Alan Lawrence", "email": "alan.lawrence@arm.com", "date": "2015-09-08T19:13:29Z"}, "committer": {"name": "Alan Lawrence", "email": "alalaw01@gcc.gnu.org", "date": "2015-09-08T19:13:29Z"}, "message": "[AArch64] vreinterpret(q?), vget_(low|high), vld1(q?)_dup\n\ngcc/:\n\n\t* config/aarch64/arm_neon.h (vreinterpret_p8_f16, vreinterpret_p16_f16,\n\tvreinterpret_f16_f64, vreinterpret_f16_s8, vreinterpret_f16_s16,\n\tvreinterpret_f16_s32, vreinterpret_f16_s64, vreinterpret_f16_f32,\n\tvreinterpret_f16_u8, vreinterpret_f16_u16, vreinterpret_f16_u32,\n\tvreinterpret_f16_u64, vreinterpret_f16_p8, vreinterpret_f16_p16,\n\tvreinterpretq_f16_f64, vreinterpretq_f16_s8, vreinterpretq_f16_s16,\n\tvreinterpretq_f16_s32, vreinterpretq_f16_s64, vreinterpretq_f16_f32,\n\tvreinterpretq_f16_u8, vreinterpretq_f16_u16, vreinterpretq_f16_u32,\n\tvreinterpretq_f16_u64, vreinterpretq_f16_p8, vreinterpretq_f16_p16,\n\tvreinterpret_f32_f16, vreinterpret_f64_f16, vreinterpret_s64_f16,\n\tvreinterpret_u64_f16, vreinterpretq_u64_f16, vreinterpret_s8_f16,\n\tvreinterpret_s16_f16, vreinterpret_s32_f16, vreinterpret_u8_f16,\n\tvreinterpret_u16_f16, vreinterpret_u32_f16, vreinterpretq_p8_f16,\n\tvreinterpretq_p16_f16, vreinterpretq_f32_f16, vreinterpretq_f64_f16,\n\tvreinterpretq_s64_f16, vreinterpretq_s8_f16, vreinterpretq_s16_f16,\n\tvreinterpretq_s32_f16, vreinterpretq_u8_f16, vreinterpretq_u16_f16,\n\tvreinterpretq_u32_f16, vget_low_f16, vget_high_f16, vld1_dup_f16,\n\tvld1q_dup_f16): New.\n\ngcc/testsuite/:\n\n\t* gcc.target/aarch64/vget_high_1.c: Add float16x8->float16x4 case.\n\t* gcc.target/aarch64/vget_low_1.c: Likewise.\n\nFrom-SVN: r227546", "tree": {"sha": "2dc2b889b2ff3600746bed345fcd0ba5a88bbde5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2dc2b889b2ff3600746bed345fcd0ba5a88bbde5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7171dc86e4bb022c1f55a5a0af921ec3a6c9c17c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7171dc86e4bb022c1f55a5a0af921ec3a6c9c17c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7171dc86e4bb022c1f55a5a0af921ec3a6c9c17c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7171dc86e4bb022c1f55a5a0af921ec3a6c9c17c/comments", "author": null, "committer": null, "parents": [{"sha": "922f9c255896c0e24e997292cc7518b4b6545e7c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/922f9c255896c0e24e997292cc7518b4b6545e7c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/922f9c255896c0e24e997292cc7518b4b6545e7c"}], "stats": {"total": 346, "additions": 346, "deletions": 0}, "files": [{"sha": "cba403960208d7214072e84078a72069b4e8c337", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7171dc86e4bb022c1f55a5a0af921ec3a6c9c17c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7171dc86e4bb022c1f55a5a0af921ec3a6c9c17c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7171dc86e4bb022c1f55a5a0af921ec3a6c9c17c", "patch": "@@ -1,3 +1,24 @@\n+2015-09-08  Alan Lawrence  <alan.lawrence@arm.com>\n+\n+\t* config/aarch64/arm_neon.h (vreinterpret_p8_f16, vreinterpret_p16_f16,\n+\tvreinterpret_f16_f64, vreinterpret_f16_s8, vreinterpret_f16_s16,\n+\tvreinterpret_f16_s32, vreinterpret_f16_s64, vreinterpret_f16_f32,\n+\tvreinterpret_f16_u8, vreinterpret_f16_u16, vreinterpret_f16_u32,\n+\tvreinterpret_f16_u64, vreinterpret_f16_p8, vreinterpret_f16_p16,\n+\tvreinterpretq_f16_f64, vreinterpretq_f16_s8, vreinterpretq_f16_s16,\n+\tvreinterpretq_f16_s32, vreinterpretq_f16_s64, vreinterpretq_f16_f32,\n+\tvreinterpretq_f16_u8, vreinterpretq_f16_u16, vreinterpretq_f16_u32,\n+\tvreinterpretq_f16_u64, vreinterpretq_f16_p8, vreinterpretq_f16_p16,\n+\tvreinterpret_f32_f16, vreinterpret_f64_f16, vreinterpret_s64_f16,\n+\tvreinterpret_u64_f16, vreinterpretq_u64_f16, vreinterpret_s8_f16,\n+\tvreinterpret_s16_f16, vreinterpret_s32_f16, vreinterpret_u8_f16,\n+\tvreinterpret_u16_f16, vreinterpret_u32_f16, vreinterpretq_p8_f16,\n+\tvreinterpretq_p16_f16, vreinterpretq_f32_f16, vreinterpretq_f64_f16,\n+\tvreinterpretq_s64_f16, vreinterpretq_s8_f16, vreinterpretq_s16_f16,\n+\tvreinterpretq_s32_f16, vreinterpretq_u8_f16, vreinterpretq_u16_f16,\n+\tvreinterpretq_u32_f16, vget_low_f16, vget_high_f16, vld1_dup_f16,\n+\tvld1q_dup_f16): New.\n+\n 2015-09-08  Alan Lawrence  <alan.lawrence@arm.com>\n \n \t* config/aarch64/aarch64-simd.md (aarch64_float_truncate_lo_v2sf):"}, {"sha": "c7bfadfa33cf3879eac1750e4a4bd6d96f394f8a", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 314, "deletions": 0, "changes": 314, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7171dc86e4bb022c1f55a5a0af921ec3a6c9c17c/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7171dc86e4bb022c1f55a5a0af921ec3a6c9c17c/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=7171dc86e4bb022c1f55a5a0af921ec3a6c9c17c", "patch": "@@ -2889,6 +2889,12 @@ vgetq_lane_u64 (uint64x2_t __a, const int __b)\n \n /* vreinterpret  */\n \n+__extension__ static __inline poly8x8_t __attribute__ ((__always_inline__))\n+vreinterpret_p8_f16 (float16x4_t __a)\n+{\n+  return (poly8x8_t) __a;\n+}\n+\n __extension__ static __inline poly8x8_t __attribute__ ((__always_inline__))\n vreinterpret_p8_f64 (float64x1_t __a)\n {\n@@ -2985,6 +2991,12 @@ vreinterpretq_p8_s64 (int64x2_t __a)\n   return (poly8x16_t) __a;\n }\n \n+__extension__ static __inline poly8x16_t __attribute__ ((__always_inline__))\n+vreinterpretq_p8_f16 (float16x8_t __a)\n+{\n+  return (poly8x16_t) __a;\n+}\n+\n __extension__ static __inline poly8x16_t __attribute__ ((__always_inline__))\n vreinterpretq_p8_f32 (float32x4_t __a)\n {\n@@ -3021,6 +3033,12 @@ vreinterpretq_p8_p16 (poly16x8_t __a)\n   return (poly8x16_t) __a;\n }\n \n+__extension__ static __inline poly16x4_t __attribute__ ((__always_inline__))\n+vreinterpret_p16_f16 (float16x4_t __a)\n+{\n+  return (poly16x4_t) __a;\n+}\n+\n __extension__ static __inline poly16x4_t __attribute__ ((__always_inline__))\n vreinterpret_p16_f64 (float64x1_t __a)\n {\n@@ -3117,6 +3135,12 @@ vreinterpretq_p16_s64 (int64x2_t __a)\n   return (poly16x8_t) __a;\n }\n \n+__extension__ static __inline poly16x8_t __attribute__ ((__always_inline__))\n+vreinterpretq_p16_f16 (float16x8_t __a)\n+{\n+  return (poly16x8_t) __a;\n+}\n+\n __extension__ static __inline poly16x8_t __attribute__ ((__always_inline__))\n vreinterpretq_p16_f32 (float32x4_t __a)\n {\n@@ -3153,6 +3177,156 @@ vreinterpretq_p16_p8 (poly8x16_t __a)\n   return (poly16x8_t) __a;\n }\n \n+__extension__ static __inline float16x4_t __attribute__ ((__always_inline__))\n+vreinterpret_f16_f64 (float64x1_t __a)\n+{\n+  return (float16x4_t) __a;\n+}\n+\n+__extension__ static __inline float16x4_t __attribute__ ((__always_inline__))\n+vreinterpret_f16_s8 (int8x8_t __a)\n+{\n+  return (float16x4_t) __a;\n+}\n+\n+__extension__ static __inline float16x4_t __attribute__ ((__always_inline__))\n+vreinterpret_f16_s16 (int16x4_t __a)\n+{\n+  return (float16x4_t) __a;\n+}\n+\n+__extension__ static __inline float16x4_t __attribute__ ((__always_inline__))\n+vreinterpret_f16_s32 (int32x2_t __a)\n+{\n+  return (float16x4_t) __a;\n+}\n+\n+__extension__ static __inline float16x4_t __attribute__ ((__always_inline__))\n+vreinterpret_f16_s64 (int64x1_t __a)\n+{\n+  return (float16x4_t) __a;\n+}\n+\n+__extension__ static __inline float16x4_t __attribute__ ((__always_inline__))\n+vreinterpret_f16_f32 (float32x2_t __a)\n+{\n+  return (float16x4_t) __a;\n+}\n+\n+__extension__ static __inline float16x4_t __attribute__ ((__always_inline__))\n+vreinterpret_f16_u8 (uint8x8_t __a)\n+{\n+  return (float16x4_t) __a;\n+}\n+\n+__extension__ static __inline float16x4_t __attribute__ ((__always_inline__))\n+vreinterpret_f16_u16 (uint16x4_t __a)\n+{\n+  return (float16x4_t) __a;\n+}\n+\n+__extension__ static __inline float16x4_t __attribute__ ((__always_inline__))\n+vreinterpret_f16_u32 (uint32x2_t __a)\n+{\n+  return (float16x4_t) __a;\n+}\n+\n+__extension__ static __inline float16x4_t __attribute__ ((__always_inline__))\n+vreinterpret_f16_u64 (uint64x1_t __a)\n+{\n+  return (float16x4_t) __a;\n+}\n+\n+__extension__ static __inline float16x4_t __attribute__ ((__always_inline__))\n+vreinterpret_f16_p8 (poly8x8_t __a)\n+{\n+  return (float16x4_t) __a;\n+}\n+\n+__extension__ static __inline float16x4_t __attribute__ ((__always_inline__))\n+vreinterpret_f16_p16 (poly16x4_t __a)\n+{\n+  return (float16x4_t) __a;\n+}\n+\n+__extension__ static __inline float16x8_t __attribute__ ((__always_inline__))\n+vreinterpretq_f16_f64 (float64x2_t __a)\n+{\n+  return (float16x8_t) __a;\n+}\n+\n+__extension__ static __inline float16x8_t __attribute__ ((__always_inline__))\n+vreinterpretq_f16_s8 (int8x16_t __a)\n+{\n+  return (float16x8_t) __a;\n+}\n+\n+__extension__ static __inline float16x8_t __attribute__ ((__always_inline__))\n+vreinterpretq_f16_s16 (int16x8_t __a)\n+{\n+  return (float16x8_t) __a;\n+}\n+\n+__extension__ static __inline float16x8_t __attribute__ ((__always_inline__))\n+vreinterpretq_f16_s32 (int32x4_t __a)\n+{\n+  return (float16x8_t) __a;\n+}\n+\n+__extension__ static __inline float16x8_t __attribute__ ((__always_inline__))\n+vreinterpretq_f16_s64 (int64x2_t __a)\n+{\n+  return (float16x8_t) __a;\n+}\n+\n+__extension__ static __inline float16x8_t __attribute__ ((__always_inline__))\n+vreinterpretq_f16_f32 (float32x4_t __a)\n+{\n+  return (float16x8_t) __a;\n+}\n+\n+__extension__ static __inline float16x8_t __attribute__ ((__always_inline__))\n+vreinterpretq_f16_u8 (uint8x16_t __a)\n+{\n+  return (float16x8_t) __a;\n+}\n+\n+__extension__ static __inline float16x8_t __attribute__ ((__always_inline__))\n+vreinterpretq_f16_u16 (uint16x8_t __a)\n+{\n+  return (float16x8_t) __a;\n+}\n+\n+__extension__ static __inline float16x8_t __attribute__ ((__always_inline__))\n+vreinterpretq_f16_u32 (uint32x4_t __a)\n+{\n+  return (float16x8_t) __a;\n+}\n+\n+__extension__ static __inline float16x8_t __attribute__ ((__always_inline__))\n+vreinterpretq_f16_u64 (uint64x2_t __a)\n+{\n+  return (float16x8_t) __a;\n+}\n+\n+__extension__ static __inline float16x8_t __attribute__ ((__always_inline__))\n+vreinterpretq_f16_p8 (poly8x16_t __a)\n+{\n+  return (float16x8_t) __a;\n+}\n+\n+__extension__ static __inline float16x8_t __attribute__ ((__always_inline__))\n+vreinterpretq_f16_p16 (poly16x8_t __a)\n+{\n+  return (float16x8_t) __a;\n+}\n+\n+__extension__ static __inline float32x2_t __attribute__ ((__always_inline__))\n+vreinterpret_f32_f16 (float16x4_t __a)\n+{\n+  return (float32x2_t) __a;\n+}\n+\n __extension__ static __inline float32x2_t __attribute__ ((__always_inline__))\n vreinterpret_f32_f64 (float64x1_t __a)\n {\n@@ -3219,6 +3393,12 @@ vreinterpret_f32_p16 (poly16x4_t __a)\n   return (float32x2_t) __a;\n }\n \n+__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))\n+vreinterpretq_f32_f16 (float16x8_t __a)\n+{\n+  return (float32x4_t) __a;\n+}\n+\n __extension__ static __inline float32x4_t __attribute__ ((__always_inline__))\n vreinterpretq_f32_f64 (float64x2_t __a)\n {\n@@ -3285,6 +3465,12 @@ vreinterpretq_f32_p16 (poly16x8_t __a)\n   return (float32x4_t) __a;\n }\n \n+__extension__ static __inline float64x1_t __attribute__((__always_inline__))\n+vreinterpret_f64_f16 (float16x4_t __a)\n+{\n+  return (float64x1_t) __a;\n+}\n+\n __extension__ static __inline float64x1_t __attribute__((__always_inline__))\n vreinterpret_f64_f32 (float32x2_t __a)\n {\n@@ -3351,6 +3537,12 @@ vreinterpret_f64_u64 (uint64x1_t __a)\n   return (float64x1_t) __a;\n }\n \n+__extension__ static __inline float64x2_t __attribute__((__always_inline__))\n+vreinterpretq_f64_f16 (float16x8_t __a)\n+{\n+  return (float64x2_t) __a;\n+}\n+\n __extension__ static __inline float64x2_t __attribute__((__always_inline__))\n vreinterpretq_f64_f32 (float32x4_t __a)\n {\n@@ -3417,6 +3609,12 @@ vreinterpretq_f64_u64 (uint64x2_t __a)\n   return (float64x2_t) __a;\n }\n \n+__extension__ static __inline int64x1_t __attribute__ ((__always_inline__))\n+vreinterpret_s64_f16 (float16x4_t __a)\n+{\n+  return (int64x1_t) __a;\n+}\n+\n __extension__ static __inline int64x1_t __attribute__ ((__always_inline__))\n vreinterpret_s64_f64 (float64x1_t __a)\n {\n@@ -3507,6 +3705,12 @@ vreinterpretq_s64_s32 (int32x4_t __a)\n   return (int64x2_t) __a;\n }\n \n+__extension__ static __inline int64x2_t __attribute__ ((__always_inline__))\n+vreinterpretq_s64_f16 (float16x8_t __a)\n+{\n+  return (int64x2_t) __a;\n+}\n+\n __extension__ static __inline int64x2_t __attribute__ ((__always_inline__))\n vreinterpretq_s64_f32 (float32x4_t __a)\n {\n@@ -3549,6 +3753,12 @@ vreinterpretq_s64_p16 (poly16x8_t __a)\n   return (int64x2_t) __a;\n }\n \n+__extension__ static __inline uint64x1_t __attribute__ ((__always_inline__))\n+vreinterpret_u64_f16 (float16x4_t __a)\n+{\n+  return (uint64x1_t) __a;\n+}\n+\n __extension__ static __inline uint64x1_t __attribute__ ((__always_inline__))\n vreinterpret_u64_f64 (float64x1_t __a)\n {\n@@ -3645,6 +3855,12 @@ vreinterpretq_u64_s64 (int64x2_t __a)\n   return (uint64x2_t) __a;\n }\n \n+__extension__ static __inline uint64x2_t __attribute__ ((__always_inline__))\n+vreinterpretq_u64_f16 (float16x8_t __a)\n+{\n+  return (uint64x2_t) __a;\n+}\n+\n __extension__ static __inline uint64x2_t __attribute__ ((__always_inline__))\n vreinterpretq_u64_f32 (float32x4_t __a)\n {\n@@ -3681,6 +3897,12 @@ vreinterpretq_u64_p16 (poly16x8_t __a)\n   return (uint64x2_t) __a;\n }\n \n+__extension__ static __inline int8x8_t __attribute__ ((__always_inline__))\n+vreinterpret_s8_f16 (float16x4_t __a)\n+{\n+  return (int8x8_t) __a;\n+}\n+\n __extension__ static __inline int8x8_t __attribute__ ((__always_inline__))\n vreinterpret_s8_f64 (float64x1_t __a)\n {\n@@ -3771,6 +3993,12 @@ vreinterpretq_s8_s64 (int64x2_t __a)\n   return (int8x16_t) __a;\n }\n \n+__extension__ static __inline int8x16_t __attribute__ ((__always_inline__))\n+vreinterpretq_s8_f16 (float16x8_t __a)\n+{\n+  return (int8x16_t) __a;\n+}\n+\n __extension__ static __inline int8x16_t __attribute__ ((__always_inline__))\n vreinterpretq_s8_f32 (float32x4_t __a)\n {\n@@ -3813,6 +4041,12 @@ vreinterpretq_s8_p16 (poly16x8_t __a)\n   return (int8x16_t) __a;\n }\n \n+__extension__ static __inline int16x4_t __attribute__ ((__always_inline__))\n+vreinterpret_s16_f16 (float16x4_t __a)\n+{\n+  return (int16x4_t) __a;\n+}\n+\n __extension__ static __inline int16x4_t __attribute__ ((__always_inline__))\n vreinterpret_s16_f64 (float64x1_t __a)\n {\n@@ -3903,6 +4137,12 @@ vreinterpretq_s16_s64 (int64x2_t __a)\n   return (int16x8_t) __a;\n }\n \n+__extension__ static __inline int16x8_t __attribute__ ((__always_inline__))\n+vreinterpretq_s16_f16 (float16x8_t __a)\n+{\n+  return (int16x8_t) __a;\n+}\n+\n __extension__ static __inline int16x8_t __attribute__ ((__always_inline__))\n vreinterpretq_s16_f32 (float32x4_t __a)\n {\n@@ -3945,6 +4185,12 @@ vreinterpretq_s16_p16 (poly16x8_t __a)\n   return (int16x8_t) __a;\n }\n \n+__extension__ static __inline int32x2_t __attribute__ ((__always_inline__))\n+vreinterpret_s32_f16 (float16x4_t __a)\n+{\n+  return (int32x2_t) __a;\n+}\n+\n __extension__ static __inline int32x2_t __attribute__ ((__always_inline__))\n vreinterpret_s32_f64 (float64x1_t __a)\n {\n@@ -4035,6 +4281,12 @@ vreinterpretq_s32_s64 (int64x2_t __a)\n   return (int32x4_t) __a;\n }\n \n+__extension__ static __inline int32x4_t __attribute__ ((__always_inline__))\n+vreinterpretq_s32_f16 (float16x8_t __a)\n+{\n+  return (int32x4_t) __a;\n+}\n+\n __extension__ static __inline int32x4_t __attribute__ ((__always_inline__))\n vreinterpretq_s32_f32 (float32x4_t __a)\n {\n@@ -4077,6 +4329,12 @@ vreinterpretq_s32_p16 (poly16x8_t __a)\n   return (int32x4_t) __a;\n }\n \n+__extension__ static __inline uint8x8_t __attribute__ ((__always_inline__))\n+vreinterpret_u8_f16 (float16x4_t __a)\n+{\n+  return (uint8x8_t) __a;\n+}\n+\n __extension__ static __inline uint8x8_t __attribute__ ((__always_inline__))\n vreinterpret_u8_f64 (float64x1_t __a)\n {\n@@ -4173,6 +4431,12 @@ vreinterpretq_u8_s64 (int64x2_t __a)\n   return (uint8x16_t) __a;\n }\n \n+__extension__ static __inline uint8x16_t __attribute__ ((__always_inline__))\n+vreinterpretq_u8_f16 (float16x8_t __a)\n+{\n+  return (uint8x16_t) __a;\n+}\n+\n __extension__ static __inline uint8x16_t __attribute__ ((__always_inline__))\n vreinterpretq_u8_f32 (float32x4_t __a)\n {\n@@ -4209,6 +4473,12 @@ vreinterpretq_u8_p16 (poly16x8_t __a)\n   return (uint8x16_t) __a;\n }\n \n+__extension__ static __inline uint16x4_t __attribute__ ((__always_inline__))\n+vreinterpret_u16_f16 (float16x4_t __a)\n+{\n+  return (uint16x4_t) __a;\n+}\n+\n __extension__ static __inline uint16x4_t __attribute__ ((__always_inline__))\n vreinterpret_u16_f64 (float64x1_t __a)\n {\n@@ -4305,6 +4575,12 @@ vreinterpretq_u16_s64 (int64x2_t __a)\n   return (uint16x8_t) __a;\n }\n \n+__extension__ static __inline uint16x8_t __attribute__ ((__always_inline__))\n+vreinterpretq_u16_f16 (float16x8_t __a)\n+{\n+  return (uint16x8_t) __a;\n+}\n+\n __extension__ static __inline uint16x8_t __attribute__ ((__always_inline__))\n vreinterpretq_u16_f32 (float32x4_t __a)\n {\n@@ -4341,6 +4617,12 @@ vreinterpretq_u16_p16 (poly16x8_t __a)\n   return (uint16x8_t) __a;\n }\n \n+__extension__ static __inline uint32x2_t __attribute__ ((__always_inline__))\n+vreinterpret_u32_f16 (float16x4_t __a)\n+{\n+  return (uint32x2_t) __a;\n+}\n+\n __extension__ static __inline uint32x2_t __attribute__ ((__always_inline__))\n vreinterpret_u32_f64 (float64x1_t __a)\n {\n@@ -4437,6 +4719,12 @@ vreinterpretq_u32_s64 (int64x2_t __a)\n   return (uint32x4_t) __a;\n }\n \n+__extension__ static __inline uint32x4_t __attribute__ ((__always_inline__))\n+vreinterpretq_u32_f16 (float16x8_t __a)\n+{\n+  return (uint32x4_t) __a;\n+}\n+\n __extension__ static __inline uint32x4_t __attribute__ ((__always_inline__))\n vreinterpretq_u32_f32 (float32x4_t __a)\n {\n@@ -4638,6 +4926,12 @@ vsetq_lane_u64 (uint64_t __elem, uint64x2_t __vec, const int __index)\n   uint64x1_t lo = vcreate_u64 (vgetq_lane_u64 (tmp, 0));  \\\n   return vreinterpret_##__TYPE##_u64 (lo);\n \n+__extension__ static __inline float16x4_t __attribute__ ((__always_inline__))\n+vget_low_f16 (float16x8_t __a)\n+{\n+  __GET_LOW (f16);\n+}\n+\n __extension__ static __inline float32x2_t __attribute__ ((__always_inline__))\n vget_low_f32 (float32x4_t __a)\n {\n@@ -4717,6 +5011,12 @@ vget_low_u64 (uint64x2_t __a)\n   uint64x1_t hi = vcreate_u64 (vgetq_lane_u64 (tmp, 1));\t\\\n   return vreinterpret_##__TYPE##_u64 (hi);\n \n+__extension__ static __inline float16x4_t __attribute__ ((__always_inline__))\n+vget_high_f16 (float16x8_t __a)\n+{\n+  __GET_HIGH (f16);\n+}\n+\n __extension__ static __inline float32x2_t __attribute__ ((__always_inline__))\n vget_high_f32 (float32x4_t __a)\n {\n@@ -14887,6 +15187,13 @@ vld1q_u64 (const uint64_t *a)\n \n /* vld1_dup  */\n \n+__extension__ static __inline float16x4_t __attribute__ ((__always_inline__))\n+vld1_dup_f16 (const float16_t* __a)\n+{\n+  float16_t __f = *__a;\n+  return (float16x4_t) { __f, __f, __f, __f };\n+}\n+\n __extension__ static __inline float32x2_t __attribute__ ((__always_inline__))\n vld1_dup_f32 (const float32_t* __a)\n {\n@@ -14961,6 +15268,13 @@ vld1_dup_u64 (const uint64_t* __a)\n \n /* vld1q_dup  */\n \n+__extension__ static __inline float16x8_t __attribute__ ((__always_inline__))\n+vld1q_dup_f16 (const float16_t* __a)\n+{\n+  float16_t __f = *__a;\n+  return (float16x8_t) { __f, __f, __f, __f, __f, __f, __f, __f };\n+}\n+\n __extension__ static __inline float32x4_t __attribute__ ((__always_inline__))\n vld1q_dup_f32 (const float32_t* __a)\n {"}, {"sha": "e97cc0b66f22eaaae4935204d05b6274756e1637", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7171dc86e4bb022c1f55a5a0af921ec3a6c9c17c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7171dc86e4bb022c1f55a5a0af921ec3a6c9c17c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7171dc86e4bb022c1f55a5a0af921ec3a6c9c17c", "patch": "@@ -1,3 +1,8 @@\n+2015-09-08  Alan Lawrence  <alan.lawrence@arm.com>\n+\n+\t* gcc.target/aarch64/vget_high_1.c: Add float16x8->float16x4 case.\n+\t* gcc.target/aarch64/vget_low_1.c: Likewise.\n+\n 2015-09-08  Alan Lawrence  <alan.lawrence@arm.com>\n \n \t* gcc.target/aarch64/vldN_1.c: Add float16x4_t and float16x8_t cases."}, {"sha": "b6b57e0c5468dbf571ec9e9196ac2d0fa3754d7a", "filename": "gcc/testsuite/gcc.target/aarch64/vget_high_1.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7171dc86e4bb022c1f55a5a0af921ec3a6c9c17c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvget_high_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7171dc86e4bb022c1f55a5a0af921ec3a6c9c17c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvget_high_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvget_high_1.c?ref=7171dc86e4bb022c1f55a5a0af921ec3a6c9c17c", "patch": "@@ -14,6 +14,7 @@ VARIANT (int8_t, 8, int8x8_t, int8x16_t, s8)\t\t\\\n VARIANT (int16_t, 4, int16x4_t, int16x8_t, s16)\t\t\\\n VARIANT (int32_t, 2, int32x2_t, int32x4_t, s32)\t\t\\\n VARIANT (int64_t, 1, int64x1_t, int64x2_t, s64)\t\t\\\n+VARIANT (float16_t, 4, float16x4_t, float16x8_t, f16)\t\\\n VARIANT (float32_t, 2, float32x2_t, float32x4_t, f32)\t\\\n VARIANT (float64_t, 1, float64x1_t, float64x2_t, f64)\n \n@@ -51,6 +52,8 @@ main (int argc, char **argv)\n   int16_t int16_t_data[8] = { -17, 19, 3, -999, 44048, 505, 9999, 1000};\n   int32_t int32_t_data[4] = { 123456789, -987654321, -135792468, 975318642 };\n   int64_t int64_t_data[2] = {0xfedcba9876543210LL, 0xdeadbabecafebeefLL };\n+  float16_t float16_t_data[8] = { 1.25, 4.5, 7.875, 2.3125, 5.675, 8.875,\n+      3.6875, 6.75};\n   float32_t float32_t_data[4] = { 3.14159, 2.718, 1.414, 100.0 };\n   float64_t float64_t_data[2] = { 1.01001000100001, 12345.6789 };\n "}, {"sha": "2223676521c4c10b2d839746873eb559559d76ba", "filename": "gcc/testsuite/gcc.target/aarch64/vget_low_1.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7171dc86e4bb022c1f55a5a0af921ec3a6c9c17c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvget_low_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7171dc86e4bb022c1f55a5a0af921ec3a6c9c17c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvget_low_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvget_low_1.c?ref=7171dc86e4bb022c1f55a5a0af921ec3a6c9c17c", "patch": "@@ -14,6 +14,7 @@ VARIANT (int8_t, 8, int8x8_t, int8x16_t, s8)\t\t\\\n VARIANT (int16_t, 4, int16x4_t, int16x8_t, s16)\t\t\\\n VARIANT (int32_t, 2, int32x2_t, int32x4_t, s32)\t\t\\\n VARIANT (int64_t, 1, int64x1_t, int64x2_t, s64)\t\t\\\n+VARIANT (float16_t, 4, float16x4_t, float16x8_t, f16)\t\\\n VARIANT (float32_t, 2, float32x2_t, float32x4_t, f32)\t\\\n VARIANT (float64_t, 1, float64x1_t, float64x2_t, f64)\n \n@@ -51,6 +52,8 @@ main (int argc, char **argv)\n   int16_t int16_t_data[8] = { -17, 19, 3, -999, 44048, 505, 9999, 1000};\n   int32_t int32_t_data[4] = { 123456789, -987654321, -135792468, 975318642 };\n   int64_t int64_t_data[2] = {0xfedcba9876543210LL, 0xdeadbabecafebeefLL };\n+  float16_t float16_t_data[8] = { 1.25, 4.5, 7.875, 2.3125, 5.675, 8.875,\n+      3.6875, 6.75};\n   float32_t float32_t_data[4] = { 3.14159, 2.718, 1.414, 100.0 };\n   float64_t float64_t_data[2] = { 1.01001000100001, 12345.6789 };\n "}]}