{"sha": "d15adbeb3f73ab2765c7f700c576410445d144fd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDE1YWRiZWIzZjczYWIyNzY1YzdmNzAwYzU3NjQxMDQ0NWQxNDRmZA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2010-08-24T13:25:25Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2010-08-24T13:25:25Z"}, "message": "re PR middle-end/45379 (~10% slowdown on test_fpu at revision 163278)\n\n2010-08-24  Richard Guenther  <rguenther@suse.de>\n\n\tPR middle-end/45379\n\t* tree-ssa-address.c (create_mem_ref_raw): Drop to MEM_REF\n\tif addr->index is NULL or zero.\n\t* tree-ssa-alias.c (indirect_refs_may_alias_p): Handle\n\tTARGET_MEM_REF more properly.\n\t(indirect_ref_may_alias_decl_p): Likewise.\n\t* emit-rtl.c (set_mem_attributes_minus_bitpos): Keep TARGET_MEM_REFs.\n\t* alias.c (ao_ref_from_mem): Handle TARGET_MEM_REF more\n\tproperly.\n\nFrom-SVN: r163519", "tree": {"sha": "ac7ce329d3a7ff7ad17267791793020655a605c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ac7ce329d3a7ff7ad17267791793020655a605c9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d15adbeb3f73ab2765c7f700c576410445d144fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d15adbeb3f73ab2765c7f700c576410445d144fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d15adbeb3f73ab2765c7f700c576410445d144fd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d15adbeb3f73ab2765c7f700c576410445d144fd/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1991282b0e0ebc9dd3daf38242da9d0ea7638d86", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1991282b0e0ebc9dd3daf38242da9d0ea7638d86", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1991282b0e0ebc9dd3daf38242da9d0ea7638d86"}], "stats": {"total": 68, "additions": 57, "deletions": 11}, "files": [{"sha": "259fe053ba214fb9c90aca2b0b12a3be73bc740d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d15adbeb3f73ab2765c7f700c576410445d144fd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d15adbeb3f73ab2765c7f700c576410445d144fd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d15adbeb3f73ab2765c7f700c576410445d144fd", "patch": "@@ -1,3 +1,15 @@\n+2010-08-24  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/45379\n+\t* tree-ssa-address.c (create_mem_ref_raw): Drop to MEM_REF\n+\tif addr->index is NULL or zero.\n+\t* tree-ssa-alias.c (indirect_refs_may_alias_p): Handle\n+\tTARGET_MEM_REF more properly.\n+\t(indirect_ref_may_alias_decl_p): Likewise.\n+\t* emit-rtl.c (set_mem_attributes_minus_bitpos): Keep TARGET_MEM_REFs.\n+\t* alias.c (ao_ref_from_mem): Handle TARGET_MEM_REF more\n+\tproperly.\n+\n 2010-08-23  Anatoly Sokolov  <aesok@post.ru>\n \n \t* config/m32c/m32c.c (m32c_function_value_regno_p): Make static."}, {"sha": "fac5a024c46d10eed19f602ed33ac40db003d67a", "filename": "gcc/alias.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d15adbeb3f73ab2765c7f700c576410445d144fd/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d15adbeb3f73ab2765c7f700c576410445d144fd/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=d15adbeb3f73ab2765c7f700c576410445d144fd", "patch": "@@ -283,6 +283,10 @@ ao_ref_from_mem (ao_ref *ref, const_rtx mem)\n        || TREE_CODE (base) == MEM_REF)\n       && TREE_CODE (TREE_OPERAND (base, 0)) != SSA_NAME)\n     return false;\n+  if (TREE_CODE (base) == TARGET_MEM_REF\n+      && TMR_BASE (base)\n+      && TREE_CODE (TMR_BASE (base)) != SSA_NAME)\n+    return false;\n \n   /* If this is a reference based on a partitioned decl replace the\n      base with an INDIRECT_REF of the pointer representative we\n@@ -296,6 +300,18 @@ ao_ref_from_mem (ao_ref *ref, const_rtx mem)\n       if (namep)\n \tref->base = build_simple_mem_ref (*(tree *)namep);\n     }\n+  else if (TREE_CODE (base) == TARGET_MEM_REF\n+\t   && TMR_SYMBOL (base)\n+\t   && TREE_CODE (TMR_SYMBOL (base)) == VAR_DECL\n+\t   && ! TREE_STATIC (TMR_SYMBOL (base))\n+\t   && cfun->gimple_df->decls_to_pointers != NULL)\n+    {\n+      void *namep;\n+      namep = pointer_map_contains (cfun->gimple_df->decls_to_pointers,\n+\t\t\t\t    TMR_SYMBOL (base));\n+      if (namep)\n+\tref->base = build_simple_mem_ref (*(tree *)namep);\n+    }\n \n   ref->ref_alias_set = MEM_ALIAS_SET (mem);\n "}, {"sha": "9f96abf76d26905838f8e330add2f55cf781a98c", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d15adbeb3f73ab2765c7f700c576410445d144fd/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d15adbeb3f73ab2765c7f700c576410445d144fd/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=d15adbeb3f73ab2765c7f700c576410445d144fd", "patch": "@@ -1788,6 +1788,7 @@ set_mem_attributes_minus_bitpos (rtx ref, tree t, int objectp,\n \n       /* If this is an indirect reference, record it.  */\n       else if (TREE_CODE (t) == MEM_REF \n+\t       || TREE_CODE (t) == TARGET_MEM_REF\n \t       || TREE_CODE (t) == MISALIGNED_INDIRECT_REF)\n \t{\n \t  expr = t;"}, {"sha": "ffc5541179e437843724c004abda14e548b7c18f", "filename": "gcc/tree-ssa-address.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d15adbeb3f73ab2765c7f700c576410445d144fd/gcc%2Ftree-ssa-address.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d15adbeb3f73ab2765c7f700c576410445d144fd/gcc%2Ftree-ssa-address.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-address.c?ref=d15adbeb3f73ab2765c7f700c576410445d144fd", "patch": "@@ -357,8 +357,7 @@ create_mem_ref_raw (tree type, tree alias_ptr_type, struct mem_address *addr)\n \n   /* If possible use a plain MEM_REF instead of a TARGET_MEM_REF.  */\n   if (alias_ptr_type\n-      && !addr->index\n-      && !addr->step\n+      && (!addr->index || integer_zerop (addr->index))\n       && (!addr->base || POINTER_TYPE_P (TREE_TYPE (addr->base))))\n     {\n       tree base;"}, {"sha": "a8d580e88ad3ddef23ef28949dfc38c5f4b40b1b", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 27, "deletions": 9, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d15adbeb3f73ab2765c7f700c576410445d144fd/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d15adbeb3f73ab2765c7f700c576410445d144fd/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=d15adbeb3f73ab2765c7f700c576410445d144fd", "patch": "@@ -672,10 +672,16 @@ indirect_ref_may_alias_decl_p (tree ref1 ATTRIBUTE_UNUSED, tree base1,\n \n   if (TREE_CODE (base1) == TARGET_MEM_REF)\n     {\n-      if (!TMR_BASE (base1)\n-\t  || !POINTER_TYPE_P (TMR_BASE (base1)))\n+      if (TMR_BASE (base1))\n+\t{\n+\t  if (!POINTER_TYPE_P (TREE_TYPE (TMR_BASE (base1))))\n+\t    return true;\n+\t  ptr1 = TMR_BASE (base1);\n+\t}\n+      else if (TMR_SYMBOL (base1))\n+\tptr1 = build_fold_addr_expr (TMR_SYMBOL (base1));\n+      else\n \treturn true;\n-      ptr1 = TMR_BASE (base1);\n     }\n   else\n     ptr1 = TREE_OPERAND (base1, 0);\n@@ -808,20 +814,32 @@ indirect_refs_may_alias_p (tree ref1 ATTRIBUTE_UNUSED, tree base1,\n \n   if (TREE_CODE (base1) == TARGET_MEM_REF)\n     {\n-      if (!TMR_BASE (base1)\n-\t  || !POINTER_TYPE_P (TMR_BASE (base1)))\n+      if (TMR_BASE (base1))\n+\t{\n+\t  if (!POINTER_TYPE_P (TREE_TYPE (TMR_BASE (base1))))\n+\t    return true;\n+\t  ptr1 = TMR_BASE (base1);\n+\t}\n+      else if (TMR_SYMBOL (base1))\n+\tptr1 = build_fold_addr_expr (TMR_SYMBOL (base1));\n+      else\n \treturn true;\n-      ptr1 = TMR_BASE (base1);\n     }\n   else\n     ptr1 = TREE_OPERAND (base1, 0);\n \n   if (TREE_CODE (base2) == TARGET_MEM_REF)\n     {\n-      if (!TMR_BASE (base2)\n-\t  || !POINTER_TYPE_P (TMR_BASE (base2)))\n+      if (TMR_BASE (base2))\n+\t{\n+\t  if (!POINTER_TYPE_P (TREE_TYPE (TMR_BASE (base2))))\n+\t    return true;\n+\t  ptr2 = TMR_BASE (base2);\n+\t}\n+      else if (TMR_SYMBOL (base2))\n+\tptr2 = build_fold_addr_expr (TMR_SYMBOL (base2));\n+      else\n \treturn true;\n-      ptr2 = TMR_BASE (base2);\n     }\n   else\n     ptr2 = TREE_OPERAND (base2, 0);"}]}