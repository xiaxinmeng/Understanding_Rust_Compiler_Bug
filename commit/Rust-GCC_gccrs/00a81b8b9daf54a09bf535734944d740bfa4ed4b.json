{"sha": "00a81b8b9daf54a09bf535734944d740bfa4ed4b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDBhODFiOGI5ZGFmNTRhMDliZjUzNTczNDk0NGQ3NDBiZmE0ZWQ0Yg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2010-03-29T20:07:29Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2010-03-29T20:07:29Z"}, "message": "More N3077 raw string changes\n\n\tMore N3077 raw string changes\n\t* charset.c (cpp_interpret_string): Don't transform UCNs in raw\n\tstrings.\n\t* lex.c (bufring_append): Split out from...\n\t(lex_raw_string): ...here.  Undo trigraph and line splicing\n\ttransformations.  Do process line notes in multi-line literals.\n\t(_cpp_process_line_notes): Ignore notes that were already handled.\n\nFrom-SVN: r157804", "tree": {"sha": "84b8a4bdf2073b4abe400607bab3f439398a212c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/84b8a4bdf2073b4abe400607bab3f439398a212c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/00a81b8b9daf54a09bf535734944d740bfa4ed4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00a81b8b9daf54a09bf535734944d740bfa4ed4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00a81b8b9daf54a09bf535734944d740bfa4ed4b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00a81b8b9daf54a09bf535734944d740bfa4ed4b/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0591d33ecce39bc9d1b5871f98863de70f28c898", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0591d33ecce39bc9d1b5871f98863de70f28c898", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0591d33ecce39bc9d1b5871f98863de70f28c898"}], "stats": {"total": 322, "additions": 262, "deletions": 60}, "files": [{"sha": "8e491952cd53a3ef439be6762bfbe458241f44bf", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00a81b8b9daf54a09bf535734944d740bfa4ed4b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00a81b8b9daf54a09bf535734944d740bfa4ed4b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=00a81b8b9daf54a09bf535734944d740bfa4ed4b", "patch": "@@ -1,5 +1,13 @@\n 2010-03-29  Jason Merrill  <jason@redhat.com>\n \n+\tN3077\n+\t* c-c++-common/raw-string-1.c: Update handling of trigraphs, line\n+\tsplicing and UCNs.\n+\t* c-c++-common/raw-string-2.c: Add trigraph test.\n+\t* c-c++-common/raw-string-8.c: New.\n+\t* c-c++-common/raw-string-9.c: New.\n+\t* c-c++-common/raw-string-10.c: New.\n+\n \t* c-c++-common/raw-string-1.c: Combine C and C++ raw string tests.\n \t* c-c++-common/raw-string-2.c: Combine C and C++ raw string tests.\n \t* c-c++-common/raw-string-3.c: Combine C and C++ raw string tests."}, {"sha": "199a3c6c83f9b5f96a0e86aa5eb1cacf906eb7bb", "filename": "gcc/testsuite/c-c++-common/raw-string-1.c", "status": "modified", "additions": 47, "deletions": 11, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00a81b8b9daf54a09bf535734944d740bfa4ed4b/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fraw-string-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00a81b8b9daf54a09bf535734944d740bfa4ed4b/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fraw-string-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fraw-string-1.c?ref=00a81b8b9daf54a09bf535734944d740bfa4ed4b", "patch": "@@ -1,6 +1,6 @@\n // { dg-do run }\n // { dg-require-effective-target wchar }\n-// { dg-options \"-std=gnu99 -Wno-c++-compat\" { target c } }\n+// { dg-options \"-std=gnu99 -Wno-c++-compat -trigraphs\" { target c } }\n // { dg-options \"-std=c++0x\" { target c++ } }\n \n #ifndef __cplusplus\n@@ -13,57 +13,78 @@ typedef __CHAR32_TYPE__ char32_t;\n const char s0[] = R\"(a\\\n \\u010d\\U0000010D\\\\\\'\\\"\\?\\a\\b\\f\\n\\r\\t\\v\\0\\00\\000\\xa\\xabb\n c)\";\n-const char s1[] = \"a\\U0000010d\\u010d\\\\\\\\\\\\'\\\\\\\"\\\\?\\\\a\\\\b\\\\f\\\\n\\\\r\\\\t\\\\v\\\\0\\\\00\\\\000\\\\xa\\\\xabb\\nc\";\n+const char s1[] = \"a\\\\\\n\\\\u010d\\\\U0000010D\\\\\\\\\\\\'\\\\\\\"\\\\?\\\\a\\\\b\\\\f\\\\n\\\\r\\\\t\\\\v\\\\0\\\\00\\\\000\\\\xa\\\\xabb\\nc\";\n const char s2[] = R\"*|*(a\\\n b\n c)\"\n c)*|\"\n c)*|*\";\n-const char s3[] = \"ab\\nc)\\\"\\nc)*|\\\"\\nc\";\n+const char s3[] = \"a\\\\\\nb\\nc)\\\"\\nc)*|\\\"\\nc\";\n+// The ) in ??) below is part of the raw string suffix )\".\n+const char s4[] = R\"(??/\n+??/\n+??(??<??=??'??!??-??>??)\";\n+const char s5[] = \"?\\?/\\n?\\?/\\n?\\?(?\\?<?\\?=?\\?'?\\?!?\\?-?\\?>?\\?\";\n \n const char t0[] = u8R\"(a\\\n \\u010d\\U0000010D\\\\\\'\\\"\\?\\a\\b\\f\\n\\r\\t\\v\\0\\00\\000\\xa\\xabb\n c)\";\n-const char t1[] = u8\"a\\U0000010d\\u010d\\\\\\\\\\\\'\\\\\\\"\\\\?\\\\a\\\\b\\\\f\\\\n\\\\r\\\\t\\\\v\\\\0\\\\00\\\\000\\\\xa\\\\xabb\\nc\";\n+const char t1[] = u8\"a\\\\\\n\\\\u010d\\\\U0000010D\\\\\\\\\\\\'\\\\\\\"\\\\?\\\\a\\\\b\\\\f\\\\n\\\\r\\\\t\\\\v\\\\0\\\\00\\\\000\\\\xa\\\\xabb\\nc\";\n const char t2[] = u8R\"*|*(a\\\n b\n c)\"\n c)*|\"\n c)*|*\";\n-const char t3[] = u8\"ab\\nc)\\\"\\nc)*|\\\"\\nc\";\n+const char t3[] = u8\"a\\\\\\nb\\nc)\\\"\\nc)*|\\\"\\nc\";\n+const char t4[] = u8R\"(??/\n+??/\n+??(??<??=??'??!??-??>??)\";\n+const char t5[] = u8\"?\\?/\\n?\\?/\\n?\\?(?\\?<?\\?=?\\?'?\\?!?\\?-?\\?>?\\?\";\n \n const char16_t u0[] = uR\"(a\\\n \\u010d\\U0000010D\\\\\\'\\\"\\?\\a\\b\\f\\n\\r\\t\\v\\0\\00\\000\\xa\\xabb\n c)\";\n-const char16_t u1[] = u\"a\\U0000010d\\u010d\\\\\\\\\\\\'\\\\\\\"\\\\?\\\\a\\\\b\\\\f\\\\n\\\\r\\\\t\\\\v\\\\0\\\\00\\\\000\\\\xa\\\\xabb\\nc\";\n+const char16_t u1[] = u\"a\\\\\\n\\\\u010d\\\\U0000010D\\\\\\\\\\\\'\\\\\\\"\\\\?\\\\a\\\\b\\\\f\\\\n\\\\r\\\\t\\\\v\\\\0\\\\00\\\\000\\\\xa\\\\xabb\\nc\";\n const char16_t u2[] = uR\"*|*(a\\\n b\n c)\"\n c)*|\"\n c)*|*\";\n-const char16_t u3[] = u\"ab\\nc)\\\"\\nc)*|\\\"\\nc\";\n+const char16_t u3[] = u\"a\\\\\\nb\\nc)\\\"\\nc)*|\\\"\\nc\";\n+const char16_t u4[] = uR\"(??/\n+??/\n+??(??<??=??'??!??-??>??)\";\n+const char16_t u5[] = u\"?\\?/\\n?\\?/\\n?\\?(?\\?<?\\?=?\\?'?\\?!?\\?-?\\?>?\\?\";\n \n const char32_t U0[] = UR\"(a\\\n \\u010d\\U0000010D\\\\\\'\\\"\\?\\a\\b\\f\\n\\r\\t\\v\\0\\00\\000\\xa\\xabb\n c)\";\n-const char32_t U1[] = U\"a\\U0000010d\\u010d\\\\\\\\\\\\'\\\\\\\"\\\\?\\\\a\\\\b\\\\f\\\\n\\\\r\\\\t\\\\v\\\\0\\\\00\\\\000\\\\xa\\\\xabb\\nc\";\n+const char32_t U1[] = U\"a\\\\\\n\\\\u010d\\\\U0000010D\\\\\\\\\\\\'\\\\\\\"\\\\?\\\\a\\\\b\\\\f\\\\n\\\\r\\\\t\\\\v\\\\0\\\\00\\\\000\\\\xa\\\\xabb\\nc\";\n const char32_t U2[] = UR\"*|*(a\\\n b\n c)\"\n c)*|\"\n c)*|*\";\n-const char32_t U3[] = U\"ab\\nc)\\\"\\nc)*|\\\"\\nc\";\n+const char32_t U3[] = U\"a\\\\\\nb\\nc)\\\"\\nc)*|\\\"\\nc\";\n+const char32_t U4[] = UR\"(??/\n+??/\n+??(??<??=??'??!??-??>??)\";\n+const char32_t U5[] = U\"?\\?/\\n?\\?/\\n?\\?(?\\?<?\\?=?\\?'?\\?!?\\?-?\\?>?\\?\";\n \n const wchar_t L0[] = LR\"(a\\\n \\u010d\\U0000010D\\\\\\'\\\"\\?\\a\\b\\f\\n\\r\\t\\v\\0\\00\\000\\xa\\xabb\n c)\";\n-const wchar_t L1[] = L\"a\\U0000010d\\u010d\\\\\\\\\\\\'\\\\\\\"\\\\?\\\\a\\\\b\\\\f\\\\n\\\\r\\\\t\\\\v\\\\0\\\\00\\\\000\\\\xa\\\\xabb\\nc\";\n+const wchar_t L1[] = L\"a\\\\\\n\\\\u010d\\\\U0000010D\\\\\\\\\\\\'\\\\\\\"\\\\?\\\\a\\\\b\\\\f\\\\n\\\\r\\\\t\\\\v\\\\0\\\\00\\\\000\\\\xa\\\\xabb\\nc\";\n const wchar_t L2[] = LR\"*|*(a\\\n b\n c)\"\n c)*|\"\n c)*|*\";\n-const wchar_t L3[] = L\"ab\\nc)\\\"\\nc)*|\\\"\\nc\";\n+const wchar_t L3[] = L\"a\\\\\\nb\\nc)\\\"\\nc)*|\\\"\\nc\";\n+const wchar_t L4[] = LR\"(??/\n+??/\n+??(??<??=??'??!??-??>??)\";\n+const wchar_t L5[] = L\"?\\?/\\n?\\?/\\n?\\?(?\\?<?\\?=?\\?'?\\?!?\\?-?\\?>?\\?\";\n \n int\n main (void)\n@@ -74,30 +95,45 @@ main (void)\n   if (sizeof (s2) != sizeof (s3)\n       || __builtin_memcmp (s2, s3, sizeof (s2)) != 0)\n     __builtin_abort ();\n+  if (sizeof (s4) != sizeof (s5)\n+      || __builtin_memcmp (s4, s5, sizeof (s4)) != 0)\n+    __builtin_abort ();\n   if (sizeof (t0) != sizeof (t1)\n       || __builtin_memcmp (t0, t1, sizeof (t0)) != 0)\n     __builtin_abort ();\n   if (sizeof (t2) != sizeof (t3)\n       || __builtin_memcmp (t2, t3, sizeof (t2)) != 0)\n     __builtin_abort ();\n+  if (sizeof (t4) != sizeof (t5)\n+      || __builtin_memcmp (t4, t5, sizeof (t4)) != 0)\n+    __builtin_abort ();\n   if (sizeof (u0) != sizeof (u1)\n       || __builtin_memcmp (u0, u1, sizeof (u0)) != 0)\n     __builtin_abort ();\n   if (sizeof (u2) != sizeof (u3)\n       || __builtin_memcmp (u2, u3, sizeof (u2)) != 0)\n     __builtin_abort ();\n+  if (sizeof (u4) != sizeof (u5)\n+      || __builtin_memcmp (u4, u5, sizeof (u4)) != 0)\n+    __builtin_abort ();\n   if (sizeof (U0) != sizeof (U1)\n       || __builtin_memcmp (U0, U1, sizeof (U0)) != 0)\n     __builtin_abort ();\n   if (sizeof (U2) != sizeof (U3)\n       || __builtin_memcmp (U2, U3, sizeof (U2)) != 0)\n     __builtin_abort ();\n+  if (sizeof (U4) != sizeof (U5)\n+      || __builtin_memcmp (U4, U5, sizeof (U4)) != 0)\n+    __builtin_abort ();\n   if (sizeof (L0) != sizeof (L1)\n       || __builtin_memcmp (L0, L1, sizeof (L0)) != 0)\n     __builtin_abort ();\n   if (sizeof (L2) != sizeof (L3)\n       || __builtin_memcmp (L2, L3, sizeof (L2)) != 0)\n     __builtin_abort ();\n+  if (sizeof (L4) != sizeof (L5)\n+      || __builtin_memcmp (L4, L5, sizeof (L4)) != 0)\n+    __builtin_abort ();\n   if (sizeof (R\"*()*\") != 1\n       || __builtin_memcmp (R\"*()*\", \"\", 1) != 0)\n     __builtin_abort ();"}, {"sha": "76ed34e60c34e1b372c7c3ba03baffd05d4f9b5f", "filename": "gcc/testsuite/c-c++-common/raw-string-10.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00a81b8b9daf54a09bf535734944d740bfa4ed4b/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fraw-string-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00a81b8b9daf54a09bf535734944d740bfa4ed4b/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fraw-string-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fraw-string-10.c?ref=00a81b8b9daf54a09bf535734944d740bfa4ed4b", "patch": "@@ -0,0 +1,20 @@\n+// Test that we don't revert trigraphs and line splicing when a raw string\n+// literal is formed by token pasting.\n+// { dg-options \"-std=gnu99 -trigraphs\" { target c } }\n+// { dg-options \"-std=c++0x\" { target c++ } }\n+// { dg-do run }\n+\n+#define PASTE(X,Y) X##Y\n+\n+const char a[] = PASTE(R,\"(??>\\\n+)\");\n+\n+#define TEST(str, val) \\\n+  if (sizeof (str) != sizeof (val) \\\n+      || __builtin_memcmp (str, val, sizeof (str)) != 0) \\\n+    __builtin_abort ()\n+\n+int main()\n+{\n+  TEST (a, \"}\");\n+}"}, {"sha": "e296a080504f18a2e0506d93d71cacdfdfa2851d", "filename": "gcc/testsuite/c-c++-common/raw-string-2.c", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00a81b8b9daf54a09bf535734944d740bfa4ed4b/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fraw-string-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00a81b8b9daf54a09bf535734944d740bfa4ed4b/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fraw-string-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fraw-string-2.c?ref=00a81b8b9daf54a09bf535734944d740bfa4ed4b", "patch": "@@ -1,6 +1,6 @@\n // { dg-do run }\n // { dg-require-effective-target wchar }\n-// { dg-options \"-std=gnu99 -Wno-c++-compat\" { target c } }\n+// { dg-options \"-std=gnu99 -Wno-c++-compat -trigraphs\" { target c } }\n // { dg-options \"-std=c++0x\" { target c++ } }\n \n #ifndef __cplusplus\n@@ -32,6 +32,8 @@ const char s08[] = u8R\"(a)\" R\"_{}#[]<>%:;.?*+-(b)_{}#[]<>%:;.?*+-\";\n const char s09[] = u8R\"/^&|~!=,\"'(a)/^&|~!=,\"'\" u8\"(b)\";\n const char s10[] = u8\"(a)\" u8R\"0123456789abcdef(b)0123456789abcdef\";\n const char s11[] = u8R\"ghijklmnopqrstuv(a)ghijklmnopqrstuv\" u8R\"w(b)w\";\n+const char s12[] = R\"??=??(??<??>??)??'??!??-\\\n+(a)#[{}]^|~\";\n \n const char16_t u03[] = R\"-(a)-\" u\"(b)\";\n const char16_t u04[] = \"(a)\" uR\"MNOPQRSTUVWXYZ(b)MNOPQRSTUVWXYZ\";\n@@ -42,6 +44,8 @@ const char16_t u08[] = uR\"(a)\" R\"_{}#[]<>%:;.?*+-(b)_{}#[]<>%:;.?*+-\";\n const char16_t u09[] = uR\"/^&|~!=,\"'(a)/^&|~!=,\"'\" u\"(b)\";\n const char16_t u10[] = u\"(a)\" uR\"0123456789abcdef(b)0123456789abcdef\";\n const char16_t u11[] = uR\"ghijklmnopqrstuv(a)ghijklmnopqrstuv\" uR\"w(b)w\";\n+const char16_t u12[] = uR\"??=??(??<??>??)??'??!??-\\\n+(a)#[{}]^|~\";\n \n const char32_t U03[] = R\"-(a)-\" U\"(b)\";\n const char32_t U04[] = \"(a)\" UR\"MNOPQRSTUVWXYZ(b)MNOPQRSTUVWXYZ\";\n@@ -52,6 +56,8 @@ const char32_t U08[] = UR\"(a)\" R\"_{}#[]<>%:;.?*+-(b)_{}#[]<>%:;.?*+-\";\n const char32_t U09[] = UR\"/^&|~!=,\"'(a)/^&|~!=,\"'\" U\"(b)\";\n const char32_t U10[] = U\"(a)\" UR\"0123456789abcdef(b)0123456789abcdef\";\n const char32_t U11[] = UR\"ghijklmnopqrstuv(a)ghijklmnopqrstuv\" UR\"w(b)w\";\n+const char32_t U12[] = UR\"??=??(??<??>??)??'??!??-\\\n+(a)#[{}]^|~\";\n \n const wchar_t L03[] = R\"-(a)-\" L\"(b)\";\n const wchar_t L04[] = \"(a)\" LR\"MNOPQRSTUVWXYZ(b)MNOPQRSTUVWXYZ\";\n@@ -62,6 +68,8 @@ const wchar_t L08[] = LR\"(a)\" R\"_{}#[]<>%:;.?*+-(b)_{}#[]<>%:;.?*+-\";\n const wchar_t L09[] = LR\"/^&|~!=,\"'(a)/^&|~!=,\"'\" L\"(b)\";\n const wchar_t L10[] = L\"(a)\" LR\"0123456789abcdef(b)0123456789abcdef\";\n const wchar_t L11[] = LR\"ghijklmnopqrstuv(a)ghijklmnopqrstuv\" LR\"w(b)w\";\n+const wchar_t L12[] = LR\"??=??(??<??>??)??'??!??-\\\n+(a)#[{}]^|~\";\n \n int\n main (void)\n@@ -82,6 +90,7 @@ main (void)\n   TEST (s09, \"a(b)\");\n   TEST (s10, \"(a)b\");\n   TEST (s11, \"ab\");\n+  TEST (s12, \"a\");\n   TEST (u03, u\"a(b)\");\n   TEST (u04, u\"(a)b\");\n   TEST (u05, u\"ab\");\n@@ -91,6 +100,7 @@ main (void)\n   TEST (u09, u\"a(b)\");\n   TEST (u10, u\"(a)b\");\n   TEST (u11, u\"ab\");\n+  TEST (u12, u\"a\");\n   TEST (U03, U\"a(b)\");\n   TEST (U04, U\"(a)b\");\n   TEST (U05, U\"ab\");\n@@ -100,6 +110,7 @@ main (void)\n   TEST (U09, U\"a(b)\");\n   TEST (U10, U\"(a)b\");\n   TEST (U11, U\"ab\");\n+  TEST (U12, U\"a\");\n   TEST (L03, L\"a(b)\");\n   TEST (L04, L\"(a)b\");\n   TEST (L05, L\"ab\");\n@@ -109,5 +120,6 @@ main (void)\n   TEST (L09, L\"a(b)\");\n   TEST (L10, L\"(a)b\");\n   TEST (L11, L\"ab\");\n+  TEST (L12, L\"a\");\n   return 0;\n }"}, {"sha": "685b2ef681af4200eb8a0ca71aee7313085534e0", "filename": "gcc/testsuite/c-c++-common/raw-string-8.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00a81b8b9daf54a09bf535734944d740bfa4ed4b/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fraw-string-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00a81b8b9daf54a09bf535734944d740bfa4ed4b/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fraw-string-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fraw-string-8.c?ref=00a81b8b9daf54a09bf535734944d740bfa4ed4b", "patch": "@@ -0,0 +1,10 @@\n+// Test that we track line numbers properly across newlines\n+// both escaped and not in raw strings.\n+// { dg-options \"-std=gnu99\" { target c } }\n+// { dg-options \"-std=c++0x\" { target c++ } }\n+\n+const char a[] = R\"(\\\n+\n+)\";\n+\n+T t;\t\t\t\t// { dg-error \"\" }"}, {"sha": "6ba6b1a33e38c2e6b460d36345f266251b5e0808", "filename": "gcc/testsuite/c-c++-common/raw-string-9.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00a81b8b9daf54a09bf535734944d740bfa4ed4b/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fraw-string-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00a81b8b9daf54a09bf535734944d740bfa4ed4b/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fraw-string-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fraw-string-9.c?ref=00a81b8b9daf54a09bf535734944d740bfa4ed4b", "patch": "@@ -0,0 +1,19 @@\n+// Make sure that we properly handle trigraphs in raw strings when\n+// trigraphs are disabled, too.\n+// { dg-options \"-std=gnu99\" { target c } }\n+// { dg-options \"-std=gnu++0x\" { target c++ } }\n+// { dg-do run }\n+\n+const char b[] = \"??>\";\t\t// { dg-message \"-trigraphs\" }\n+const char a[] = R\"(??>??)??/\n+??)\";\n+\n+#define TEST(str, val) \\\n+  if (sizeof (str) != sizeof (val) \\\n+      || __builtin_memcmp (str, val, sizeof (str)) != 0) \\\n+    __builtin_abort ()\n+\n+int main()\n+{\n+  TEST (a, \"?\\?>?\\?)?\\?/\\n?\\?\");\n+}"}, {"sha": "ab115d5609580e423e6e41fd592f7d3d7305c0b1", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00a81b8b9daf54a09bf535734944d740bfa4ed4b/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00a81b8b9daf54a09bf535734944d740bfa4ed4b/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=00a81b8b9daf54a09bf535734944d740bfa4ed4b", "patch": "@@ -1,5 +1,13 @@\n 2010-03-29  Jason Merrill  <jason@redhat.com>\n \n+\tMore N3077 raw string changes\n+\t* charset.c (cpp_interpret_string): Don't transform UCNs in raw\n+\tstrings.\n+\t* lex.c (bufring_append): Split out from...\n+\t(lex_raw_string): ...here.  Undo trigraph and line splicing\n+\ttransformations.  Do process line notes in multi-line literals.\n+\t(_cpp_process_line_notes): Ignore notes that were already handled.\n+\n \tSome raw string changes from N3077\n \t* charset.c (cpp_interpret_string): Change inner delimiters to ().\n \t* lex.c (lex_raw_string): Likewise.  Also disallow '\\' in delimiter."}, {"sha": "304efc8de0d55672c80fec7119136a4b351e3531", "filename": "libcpp/charset.c", "status": "modified", "additions": 4, "deletions": 17, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00a81b8b9daf54a09bf535734944d740bfa4ed4b/libcpp%2Fcharset.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00a81b8b9daf54a09bf535734944d740bfa4ed4b/libcpp%2Fcharset.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fcharset.c?ref=00a81b8b9daf54a09bf535734944d740bfa4ed4b", "patch": "@@ -1403,23 +1403,10 @@ cpp_interpret_string (cpp_reader *pfile, const cpp_string *from, size_t count,\n \t  if (limit >= p + (p - prefix) + 1)\n \t    limit -= (p - prefix) + 1;\n \n-\t  for (;;)\n-\t    {\n-\t      base = p;\n-\t      while (p < limit && (*p != '\\\\' || (p[1] != 'u' && p[1] != 'U')))\n-\t\tp++;\n-\t      if (p > base)\n-\t\t{\n-\t\t  /* We have a run of normal characters; these can be fed\n-\t\t     directly to convert_cset.  */\n-\t\t  if (!APPLY_CONVERSION (cvt, base, p - base, &tbuf))\n-\t\t    goto fail;\n-\t\t}\n-\t      if (p == limit)\n-\t\tbreak;\n-\n-\t      p = convert_ucn (pfile, p + 1, limit, &tbuf, cvt);\n-\t    }\n+\t  /* Raw strings are all normal characters; these can be fed\n+\t     directly to convert_cset.  */\n+\t  if (!APPLY_CONVERSION (cvt, p, limit - p, &tbuf))\n+\t    goto fail;\n \n \t  continue;\n \t}"}, {"sha": "9209b55def075d33b5865229b4d6b734f0b68ee5", "filename": "libcpp/internal.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00a81b8b9daf54a09bf535734944d740bfa4ed4b/libcpp%2Finternal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00a81b8b9daf54a09bf535734944d740bfa4ed4b/libcpp%2Finternal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finternal.h?ref=00a81b8b9daf54a09bf535734944d740bfa4ed4b", "patch": "@@ -240,7 +240,8 @@ struct _cpp_line_note\n \n   /* Type of note.  The 9 'from' trigraph characters represent those\n      trigraphs, '\\\\' an escaped newline, ' ' an escaped newline with\n-     intervening space, and anything else is invalid.  */\n+     intervening space, 0 represents a note that has already been handled,\n+     and anything else is invalid.  */\n   unsigned int type;\n };\n "}, {"sha": "846671da4608802b8a7a29652391902efbb1a49e", "filename": "libcpp/lex.c", "status": "modified", "additions": 131, "deletions": 30, "changes": 161, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00a81b8b9daf54a09bf535734944d740bfa4ed4b/libcpp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00a81b8b9daf54a09bf535734944d740bfa4ed4b/libcpp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Flex.c?ref=00a81b8b9daf54a09bf535734944d740bfa4ed4b", "patch": "@@ -314,6 +314,8 @@ _cpp_process_line_notes (cpp_reader *pfile, int in_comment)\n \t\t}\n \t    }\n \t}\n+      else if (note->type == 0)\n+\t/* Already processed in lex_raw_string.  */;\n       else\n \tabort ();\n     }\n@@ -674,8 +676,37 @@ create_literal (cpp_reader *pfile, cpp_token *token, const uchar *base,\n   token->val.str.text = dest;\n }\n \n+/* Subroutine of lex_raw_string: Append LEN chars from BASE to the buffer\n+   sequence from *FIRST_BUFF_P to LAST_BUFF_P.  */\n+\n+static void\n+bufring_append (cpp_reader *pfile, const uchar *base, size_t len,\n+\t\t_cpp_buff **first_buff_p, _cpp_buff **last_buff_p)\n+{\n+  _cpp_buff *first_buff = *first_buff_p;\n+  _cpp_buff *last_buff = *last_buff_p;\n+\n+  if (first_buff == NULL)\n+    first_buff = last_buff = _cpp_get_buff (pfile, len);\n+  else if (len > BUFF_ROOM (last_buff))\n+    {\n+      size_t room = BUFF_ROOM (last_buff);\n+      memcpy (BUFF_FRONT (last_buff), base, room);\n+      BUFF_FRONT (last_buff) += room;\n+      base += room;\n+      len -= room;\n+      last_buff = _cpp_append_extend_buff (pfile, last_buff, len);\n+    }\n+\n+  memcpy (BUFF_FRONT (last_buff), base, len);\n+  BUFF_FRONT (last_buff) += len;\n+\n+  *first_buff_p = first_buff;\n+  *last_buff_p = last_buff;\n+}\n+\n /* Lexes a raw string.  The stored string contains the spelling, including\n-   double quotes, delimiter string, '[' and ']', any leading\n+   double quotes, delimiter string, '(' and ')', any leading\n    'L', 'u', 'U' or 'u8' and 'R' modifier.  It returns the type of the\n    literal, or CPP_OTHER if it was not properly terminated.\n \n@@ -692,6 +723,7 @@ lex_raw_string (cpp_reader *pfile, cpp_token *token, const uchar *base,\n   enum cpp_ttype type;\n   size_t total_len = 0;\n   _cpp_buff *first_buff = NULL, *last_buff = NULL;\n+  _cpp_line_note *note = &pfile->buffer->notes[pfile->buffer->cur_note];\n \n   type = (*base == 'L' ? CPP_WSTRING :\n \t  *base == 'U' ? CPP_STRING32 :\n@@ -749,7 +781,99 @@ lex_raw_string (cpp_reader *pfile, cpp_token *token, const uchar *base,\n   cur = raw_prefix + raw_prefix_len + 1;\n   for (;;)\n     {\n-      cppchar_t c = *cur++;\n+#define BUF_APPEND(STR,LEN)\t\t\t\t\t\\\n+      do {\t\t\t\t\t\t\t\\\n+\tbufring_append (pfile, (const uchar *)(STR), (LEN),\t\\\n+\t\t\t&first_buff, &last_buff);\t\t\\\n+\ttotal_len += (LEN);\t\t\t\t\t\\\n+      } while (0);\n+\n+      cppchar_t c;\n+\n+      /* If we previously performed any trigraph or line splicing\n+\t transformations, undo them within the body of the raw string.  */\n+      while (note->pos < cur)\n+\t++note;\n+      for (; note->pos == cur; ++note)\n+\t{\n+\t  switch (note->type)\n+\t    {\n+\t    case '\\\\':\n+\t    case ' ':\n+\t      /* Restore backslash followed by newline.  */\n+\t      BUF_APPEND (base, cur - base);\n+\t      base = cur;\n+\t      BUF_APPEND (\"\\\\\", 1);\n+\t    after_backslash:\n+\t      if (note->type == ' ')\n+\t\t{\n+\t\t  /* GNU backslash whitespace newline extension.  FIXME\n+\t\t     could be any sequence of non-vertical space.  When we\n+\t\t     can properly restore any such sequence, we should mark\n+\t\t     this note as handled so _cpp_process_line_notes\n+\t\t     doesn't warn.  */\n+\t\t  BUF_APPEND (\" \", 1);\n+\t\t}\n+\n+\t      BUF_APPEND (\"\\n\", 1);\n+\t      break;\n+\n+\t    case 0:\n+\t      /* Already handled.  */\n+\t      break;\n+\n+\t    default:\n+\t      if (_cpp_trigraph_map[note->type])\n+\t\t{\n+\t\t  /* Don't warn about this trigraph in\n+\t\t     _cpp_process_line_notes, since trigraphs show up as\n+\t\t     trigraphs in raw strings.  */\n+\t\t  unsigned type = note->type;\n+\t\t  note->type = 0;\n+\n+\t\t  if (!CPP_OPTION (pfile, trigraphs))\n+\t\t    /* If we didn't convert the trigraph in the first\n+\t\t       place, don't do anything now either.  */\n+\t\t    break;\n+\n+\t\t  BUF_APPEND (base, cur - base);\n+\t\t  base = cur;\n+\t\t  BUF_APPEND (\"??\", 2);\n+\n+\t\t  /* ??/ followed by newline gets two line notes, one for\n+\t\t     the trigraph and one for the backslash/newline.  */\n+\t\t  if (type == '/' && note[1].pos == cur)\n+\t\t    {\n+\t\t      if (note[1].type != '\\\\'\n+\t\t\t  && note[1].type != ' ')\n+\t\t\tabort ();\n+\t\t      BUF_APPEND (\"/\", 1);\n+\t\t      ++note;\n+\t\t      goto after_backslash;\n+\t\t    }\n+\t\t  /* The ) from ??) could be part of the suffix.  */\n+\t\t  else if (type == ')'\n+\t\t\t   && strncmp ((const char *) cur+1,\n+\t\t\t\t       (const char *) raw_prefix,\n+\t\t\t\t       raw_prefix_len) == 0\n+\t\t\t   && cur[raw_prefix_len+1] == '\"')\n+\t\t    {\n+\t\t      cur += raw_prefix_len+2;\n+\t\t      goto break_outer_loop;\n+\t\t    }\n+\t\t  else\n+\t\t    {\n+\t\t      /* Skip the replacement character.  */\n+\t\t      base = ++cur;\n+\t\t      BUF_APPEND (&type, 1);\n+\t\t    }\n+\t\t}\n+\t      else\n+\t\tabort ();\n+\t      break;\n+\t    }\n+\t}\n+      c = *cur++;\n \n       if (c == ')'\n \t  && strncmp ((const char *) cur, (const char *) raw_prefix,\n@@ -772,39 +896,14 @@ lex_raw_string (cpp_reader *pfile, cpp_token *token, const uchar *base,\n \t      break;\n \t    }\n \n-\t  /* raw strings allow embedded non-escaped newlines, which\n-\t     complicates this routine a lot.  */\n-\t  if (first_buff == NULL)\n-\t    {\n-\t      total_len = cur - base;\n-\t      first_buff = last_buff = _cpp_get_buff (pfile, total_len);\n-\t      memcpy (BUFF_FRONT (last_buff), base, total_len);\n-\t      raw_prefix = BUFF_FRONT (last_buff) + (raw_prefix - base);\n-\t      BUFF_FRONT (last_buff) += total_len;\n-\t    }\n-\t  else\n-\t    {\n-\t      size_t len = cur - base;\n-\t      size_t cur_len = len > BUFF_ROOM (last_buff)\n-\t\t\t       ? BUFF_ROOM (last_buff) : len;\n-\n-\t      total_len += len;\n-\t      memcpy (BUFF_FRONT (last_buff), base, cur_len);\n-\t      BUFF_FRONT (last_buff) += cur_len;\n-\t      if (len > cur_len)\n-\t\t{\n-\t\t  last_buff = _cpp_append_extend_buff (pfile, last_buff,\n-\t\t\t\t\t\t       len - cur_len);\n-\t\t  memcpy (BUFF_FRONT (last_buff), base + cur_len,\n-\t\t\t  len - cur_len);\n-\t\t  BUFF_FRONT (last_buff) += len - cur_len;\n-\t\t}\n-\t    }\n+\t  BUF_APPEND (base, cur - base);\n \n \t  if (pfile->buffer->cur < pfile->buffer->rlimit)\n \t    CPP_INCREMENT_LINE (pfile, 0);\n \t  pfile->buffer->need_line = true;\n \n+\t  pfile->buffer->cur = cur-1;\n+\t  _cpp_process_line_notes (pfile, false);\n \t  if (!_cpp_get_fresh_line (pfile))\n \t    {\n \t      source_location src_loc = token->src_loc;\n@@ -820,11 +919,13 @@ lex_raw_string (cpp_reader *pfile, cpp_token *token, const uchar *base,\n \t    }\n \n \t  cur = base = pfile->buffer->cur;\n+\t  note = &pfile->buffer->notes[pfile->buffer->cur_note];\n \t}\n       else if (c == '\\0' && !saw_NUL)\n \tLINEMAP_POSITION_FOR_COLUMN (saw_NUL, pfile->line_table,\n \t\t\t\t     CPP_BUF_COLUMN (pfile->buffer, cur));\n     }\n+ break_outer_loop:\n \n   if (saw_NUL && !pfile->state.skipping)\n     cpp_error_with_line (pfile, CPP_DL_WARNING, saw_NUL, 0,"}]}