{"sha": "2894311302edaf27ed41a0b517e1c808c286974c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjg5NDMxMTMwMmVkYWYyN2VkNDFhMGI1MTdlMWM4MDhjMjg2OTc0Yw==", "commit": {"author": {"name": "Tim Shen", "email": "timshen@google.com", "date": "2015-03-28T04:17:12Z"}, "committer": {"name": "Tim Shen", "email": "timshen@gcc.gnu.org", "date": "2015-03-28T04:17:12Z"}, "message": "re PR libstdc++/65420 (Enumerators in std::regex_constants should be constexpr variables instead)\n\n\tPR libstdc++/65420\n\t* include/bits/regex_constants.h: Use constexpr variables for flags.\n\t* testsuite/28_regex/constants/constexpr.cc: New testcase.\n\nFrom-SVN: r221750", "tree": {"sha": "9372214a66ec99fa2c15937836e8235eddcb013b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9372214a66ec99fa2c15937836e8235eddcb013b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2894311302edaf27ed41a0b517e1c808c286974c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2894311302edaf27ed41a0b517e1c808c286974c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2894311302edaf27ed41a0b517e1c808c286974c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2894311302edaf27ed41a0b517e1c808c286974c/comments", "author": {"login": "timshen91", "id": 1157432, "node_id": "MDQ6VXNlcjExNTc0MzI=", "avatar_url": "https://avatars.githubusercontent.com/u/1157432?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timshen91", "html_url": "https://github.com/timshen91", "followers_url": "https://api.github.com/users/timshen91/followers", "following_url": "https://api.github.com/users/timshen91/following{/other_user}", "gists_url": "https://api.github.com/users/timshen91/gists{/gist_id}", "starred_url": "https://api.github.com/users/timshen91/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timshen91/subscriptions", "organizations_url": "https://api.github.com/users/timshen91/orgs", "repos_url": "https://api.github.com/users/timshen91/repos", "events_url": "https://api.github.com/users/timshen91/events{/privacy}", "received_events_url": "https://api.github.com/users/timshen91/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5351658ccc9a15ab43da9bdaffa8b638916c6934", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5351658ccc9a15ab43da9bdaffa8b638916c6934", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5351658ccc9a15ab43da9bdaffa8b638916c6934"}], "stats": {"total": 459, "additions": 272, "deletions": 187}, "files": [{"sha": "3183a085bef09c15bce7008a5f4263ed2e6f8fc3", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2894311302edaf27ed41a0b517e1c808c286974c/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2894311302edaf27ed41a0b517e1c808c286974c/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=2894311302edaf27ed41a0b517e1c808c286974c", "patch": "@@ -1,3 +1,9 @@\n+2015-03-28  Tim Shen  <timshen@google.com>\n+\n+\tPR libstdc++/65420\n+\t* include/bits/regex_constants.h: Use constexpr variables for flags.\n+\t* testsuite/28_regex/constants/constexpr.cc: New testcase.\n+\n 2015-03-27  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/65499"}, {"sha": "e2c763178ea676fc3b60b42c013fd991c283f2aa", "filename": "libstdc++-v3/include/bits/regex_constants.h", "status": "modified", "additions": 206, "deletions": 187, "changes": 393, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2894311302edaf27ed41a0b517e1c808c286974c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_constants.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2894311302edaf27ed41a0b517e1c808c286974c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_constants.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_constants.h?ref=2894311302edaf27ed41a0b517e1c808c286974c", "patch": "@@ -77,88 +77,97 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    * elements @c ECMAScript, @c basic, @c extended, @c awk, @c grep, @c egrep\n    * %set.\n    */\n-  enum syntax_option_type : unsigned int\n-  {\n-    /**\n-     * Specifies that the matching of regular expressions against a character\n-     * sequence shall be performed without regard to case.\n-     */\n-    icase      = 1 << _S_icase,\n-\n-    /**\n-     * Specifies that when a regular expression is matched against a character\n-     * container sequence, no sub-expression matches are to be stored in the\n-     * supplied match_results structure.\n-     */\n-    nosubs     = 1 << _S_nosubs,\n-\n-    /**\n-     * Specifies that the regular expression engine should pay more attention to\n-     * the speed with which regular expressions are matched, and less to the\n-     * speed with which regular expression objects are constructed. Otherwise\n-     * it has no detectable effect on the program output.\n-     */\n-    optimize   = 1 << _S_optimize,\n-\n-    /**\n-     * Specifies that character ranges of the form [a-b] should be locale\n-     * sensitive.\n-     */\n-    collate    = 1 << _S_collate,\n-\n-    /**\n-     * Specifies that the grammar recognized by the regular expression engine is\n-     * that used by ECMAScript in ECMA-262 [Ecma International, ECMAScript\n-     * Language Specification, Standard Ecma-262, third edition, 1999], as\n-     * modified in section [28.13].  This grammar is similar to that defined\n-     * in the PERL scripting language but extended with elements found in the\n-     * POSIX regular expression grammar.\n-     */\n-    ECMAScript = 1 << _S_ECMAScript,\n-\n-    /**\n-     * Specifies that the grammar recognized by the regular expression engine is\n-     * that used by POSIX basic regular expressions in IEEE Std 1003.1-2001,\n-     * Portable Operating System Interface (POSIX), Base Definitions and\n-     * Headers, Section 9, Regular Expressions [IEEE, Information Technology --\n-     * Portable Operating System Interface (POSIX), IEEE Standard 1003.1-2001].\n-     */\n-    basic      = 1 << _S_basic,\n-\n-    /**\n-     * Specifies that the grammar recognized by the regular expression engine is\n-     * that used by POSIX extended regular expressions in IEEE Std 1003.1-2001,\n-     * Portable Operating System Interface (POSIX), Base Definitions and\n-     * Headers, Section 9, Regular Expressions.\n-     */\n-    extended   = 1 << _S_extended,\n-\n-    /**\n-     * Specifies that the grammar recognized by the regular expression engine is\n-     * that used by POSIX utility awk in IEEE Std 1003.1-2001.  This option is\n-     * identical to syntax_option_type extended, except that C-style escape\n-     * sequences are supported.  These sequences are:\n-     * \\\\\\\\, \\\\a, \\\\b, \\\\f, \\\\n, \\\\r, \\\\t , \\\\v, \\\\&apos,, &apos,,\n-     * and \\\\ddd (where ddd is one, two, or three octal digits).\n-     */\n-    awk        = 1 << _S_awk,\n-\n-    /**\n-     * Specifies that the grammar recognized by the regular expression engine is\n-     * that used by POSIX utility grep in IEEE Std 1003.1-2001.  This option is\n-     * identical to syntax_option_type basic, except that newlines are treated\n-     * as whitespace.\n-     */\n-    grep       = 1 << _S_grep,\n-\n-    /**\n-     * Specifies that the grammar recognized by the regular expression engine is\n-     * that used by POSIX utility grep when given the -E option in\n-     * IEEE Std 1003.1-2001.  This option is identical to syntax_option_type\n-     * extended, except that newlines are treated as whitespace.\n-     */\n-    egrep      = 1 << _S_egrep,\n-  };\n+  enum syntax_option_type : unsigned int { };\n+\n+  /**\n+   * Specifies that the matching of regular expressions against a character\n+   * sequence shall be performed without regard to case.\n+   */\n+  constexpr syntax_option_type icase =\n+    static_cast<syntax_option_type>(1 << _S_icase);\n+\n+  /**\n+   * Specifies that when a regular expression is matched against a character\n+   * container sequence, no sub-expression matches are to be stored in the\n+   * supplied match_results structure.\n+   */\n+  constexpr syntax_option_type nosubs =\n+    static_cast<syntax_option_type>(1 << _S_nosubs);\n+\n+  /**\n+   * Specifies that the regular expression engine should pay more attention to\n+   * the speed with which regular expressions are matched, and less to the\n+   * speed with which regular expression objects are constructed. Otherwise\n+   * it has no detectable effect on the program output.\n+   */\n+  constexpr syntax_option_type optimize =\n+    static_cast<syntax_option_type>(1 << _S_optimize);\n+\n+  /**\n+   * Specifies that character ranges of the form [a-b] should be locale\n+   * sensitive.\n+   */\n+  constexpr syntax_option_type collate =\n+    static_cast<syntax_option_type>(1 << _S_collate);\n+\n+  /**\n+   * Specifies that the grammar recognized by the regular expression engine is\n+   * that used by ECMAScript in ECMA-262 [Ecma International, ECMAScript\n+   * Language Specification, Standard Ecma-262, third edition, 1999], as\n+   * modified in section [28.13].  This grammar is similar to that defined\n+   * in the PERL scripting language but extended with elements found in the\n+   * POSIX regular expression grammar.\n+   */\n+  constexpr syntax_option_type ECMAScript =\n+    static_cast<syntax_option_type>(1 << _S_ECMAScript);\n+\n+  /**\n+   * Specifies that the grammar recognized by the regular expression engine is\n+   * that used by POSIX basic regular expressions in IEEE Std 1003.1-2001,\n+   * Portable Operating System Interface (POSIX), Base Definitions and\n+   * Headers, Section 9, Regular Expressions [IEEE, Information Technology --\n+   * Portable Operating System Interface (POSIX), IEEE Standard 1003.1-2001].\n+   */\n+  constexpr syntax_option_type basic =\n+    static_cast<syntax_option_type>(1 << _S_basic);\n+\n+  /**\n+   * Specifies that the grammar recognized by the regular expression engine is\n+   * that used by POSIX extended regular expressions in IEEE Std 1003.1-2001,\n+   * Portable Operating System Interface (POSIX), Base Definitions and\n+   * Headers, Section 9, Regular Expressions.\n+   */\n+  constexpr syntax_option_type extended =\n+    static_cast<syntax_option_type>(1 << _S_extended);\n+\n+  /**\n+   * Specifies that the grammar recognized by the regular expression engine is\n+   * that used by POSIX utility awk in IEEE Std 1003.1-2001.  This option is\n+   * identical to syntax_option_type extended, except that C-style escape\n+   * sequences are supported.  These sequences are:\n+   * \\\\\\\\, \\\\a, \\\\b, \\\\f, \\\\n, \\\\r, \\\\t , \\\\v, \\\\&apos,, &apos,,\n+   * and \\\\ddd (where ddd is one, two, or three octal digits).\n+   */\n+  constexpr syntax_option_type awk =\n+    static_cast<syntax_option_type>(1 << _S_awk);\n+\n+  /**\n+   * Specifies that the grammar recognized by the regular expression engine is\n+   * that used by POSIX utility grep in IEEE Std 1003.1-2001.  This option is\n+   * identical to syntax_option_type basic, except that newlines are treated\n+   * as whitespace.\n+   */\n+  constexpr syntax_option_type grep =\n+    static_cast<syntax_option_type>(1 << _S_grep);\n+\n+  /**\n+   * Specifies that the grammar recognized by the regular expression engine is\n+   * that used by POSIX utility grep when given the -E option in\n+   * IEEE Std 1003.1-2001.  This option is identical to syntax_option_type\n+   * extended, except that newlines are treated as whitespace.\n+   */\n+  constexpr syntax_option_type egrep =\n+    static_cast<syntax_option_type>(1 << _S_egrep);\n \n   constexpr inline syntax_option_type\n   operator&(syntax_option_type __a, syntax_option_type __b)\n@@ -233,111 +242,121 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    * perform bitwise operations on these values and expect the right thing to\n    * happen.\n    */\n-  enum match_flag_type : unsigned int\n-  {\n-    /**\n-     * The default matching rules.\n-     */\n-    match_default     = 0,\n-\n-    /**\n-     * The first character in the sequence [first, last) is treated as though it\n-     * is not at the beginning of a line, so the character (^) in the regular\n-     * expression shall not match [first, first).\n-     */\n-    match_not_bol     = 1 << _S_not_bol,\n-\n-    /**\n-     * The last character in the sequence [first, last) is treated as though it\n-     * is not at the end of a line, so the character ($) in the regular\n-     * expression shall not match [last, last).\n-     */\n-    match_not_eol     = 1 << _S_not_eol,\n-\n-    /**\n-     * The expression \\\\b is not matched against the sub-sequence\n-     * [first,first).\n-     */\n-    match_not_bow     = 1 << _S_not_bow,\n-\n-    /**\n-     * The expression \\\\b should not be matched against the sub-sequence\n-     * [last,last).\n-     */\n-    match_not_eow     = 1 << _S_not_eow,\n-\n-    /**\n-     * If more than one match is possible then any match is an acceptable\n-     * result.\n-     */\n-    match_any         = 1 << _S_any,\n-\n-    /**\n-     * The expression does not match an empty sequence.\n-     */\n-    match_not_null    = 1 << _S_not_null,\n-\n-    /**\n-     * The expression only matches a sub-sequence that begins at first .\n-     */\n-    match_continuous  = 1 << _S_continuous,\n-\n-    /**\n-     * --first is a valid iterator position.  When this flag is set then the\n-     * flags match_not_bol and match_not_bow are ignored by the regular\n-     * expression algorithms 28.11 and iterators 28.12.\n-     */\n-    match_prev_avail  = 1 << _S_prev_avail,\n-\n-    /**\n-     * When a regular expression match is to be replaced by a new string, the\n-     * new string is constructed using the rules used by the ECMAScript replace\n-     * function in ECMA- 262 [Ecma International, ECMAScript Language\n-     * Specification, Standard Ecma-262, third edition, 1999], part 15.5.4.11\n-     * String.prototype.replace. In addition, during search and replace\n-     * operations all non-overlapping occurrences of the regular expression\n-     * are located and replaced, and sections of the input that did not match\n-     * the expression are copied unchanged to the output string.\n-     *\n-     * Format strings (from ECMA-262 [15.5.4.11]):\n-     * @li $$  The dollar-sign itself ($)\n-     * @li $&  The matched substring.\n-     * @li $`  The portion of @a string that precedes the matched substring.\n-     *         This would be match_results::prefix().\n-     * @li $'  The portion of @a string that follows the matched substring.\n-     *         This would be match_results::suffix().\n-     * @li $n  The nth capture, where n is in [1,9] and $n is not followed by a\n-     *         decimal digit.  If n <= match_results::size() and the nth capture\n-     *         is undefined, use the empty string instead.  If n >\n-     *         match_results::size(), the result is implementation-defined.\n-     * @li $nn The nnth capture, where nn is a two-digit decimal number on\n-     *         [01, 99].  If nn <= match_results::size() and the nth capture is\n-     *         undefined, use the empty string instead. If\n-     *         nn > match_results::size(), the result is implementation-defined.\n-     */\n-    format_default    = 0,\n-\n-    /**\n-     * When a regular expression match is to be replaced by a new string, the\n-     * new string is constructed using the rules used by the POSIX sed utility\n-     * in IEEE Std 1003.1- 2001 [IEEE, Information Technology -- Portable\n-     * Operating System Interface (POSIX), IEEE Standard 1003.1-2001].\n-     */\n-    format_sed        = 1 << _S_sed,\n-\n-    /**\n-     * During a search and replace operation, sections of the character\n-     * container sequence being searched that do not match the regular\n-     * expression shall not be copied to the output string.\n-     */\n-    format_no_copy    = 1 << _S_no_copy,\n-\n-    /**\n-     * When specified during a search and replace operation, only the first\n-     * occurrence of the regular expression shall be replaced.\n-     */\n-    format_first_only = 1 << _S_first_only,\n-  };\n+  enum match_flag_type : unsigned int { };\n+\n+  /**\n+   * The default matching rules.\n+   */\n+  constexpr match_flag_type match_default = static_cast<match_flag_type>(0);\n+\n+  /**\n+   * The first character in the sequence [first, last) is treated as though it\n+   * is not at the beginning of a line, so the character (^) in the regular\n+   * expression shall not match [first, first).\n+   */\n+  constexpr match_flag_type match_not_bol =\n+    static_cast<match_flag_type>(1 << _S_not_bol);\n+\n+  /**\n+   * The last character in the sequence [first, last) is treated as though it\n+   * is not at the end of a line, so the character ($) in the regular\n+   * expression shall not match [last, last).\n+   */\n+  constexpr match_flag_type match_not_eol =\n+    static_cast<match_flag_type>(1 << _S_not_eol);\n+\n+  /**\n+   * The expression \\\\b is not matched against the sub-sequence\n+   * [first,first).\n+   */\n+  constexpr match_flag_type match_not_bow =\n+    static_cast<match_flag_type>(1 << _S_not_bow);\n+\n+  /**\n+   * The expression \\\\b should not be matched against the sub-sequence\n+   * [last,last).\n+   */\n+  constexpr match_flag_type match_not_eow =\n+    static_cast<match_flag_type>(1 << _S_not_eow);\n+\n+  /**\n+   * If more than one match is possible then any match is an acceptable\n+   * result.\n+   */\n+  constexpr match_flag_type match_any =\n+    static_cast<match_flag_type>(1 << _S_any);\n+\n+  /**\n+   * The expression does not match an empty sequence.\n+   */\n+  constexpr match_flag_type match_not_null =\n+    static_cast<match_flag_type>(1 << _S_not_null);\n+\n+  /**\n+   * The expression only matches a sub-sequence that begins at first .\n+   */\n+  constexpr match_flag_type match_continuous =\n+    static_cast<match_flag_type>(1 << _S_continuous);\n+\n+  /**\n+   * --first is a valid iterator position.  When this flag is set then the\n+   * flags match_not_bol and match_not_bow are ignored by the regular\n+   * expression algorithms 28.11 and iterators 28.12.\n+   */\n+  constexpr match_flag_type match_prev_avail =\n+    static_cast<match_flag_type>(1 << _S_prev_avail);\n+\n+  /**\n+   * When a regular expression match is to be replaced by a new string, the\n+   * new string is constructed using the rules used by the ECMAScript replace\n+   * function in ECMA- 262 [Ecma International, ECMAScript Language\n+   * Specification, Standard Ecma-262, third edition, 1999], part 15.5.4.11\n+   * String.prototype.replace. In addition, during search and replace\n+   * operations all non-overlapping occurrences of the regular expression\n+   * are located and replaced, and sections of the input that did not match\n+   * the expression are copied unchanged to the output string.\n+   *\n+   * Format strings (from ECMA-262 [15.5.4.11]):\n+   * @li $$  The dollar-sign itself ($)\n+   * @li $&  The matched substring.\n+   * @li $`  The portion of @a string that precedes the matched substring.\n+   *         This would be match_results::prefix().\n+   * @li $'  The portion of @a string that follows the matched substring.\n+   *         This would be match_results::suffix().\n+   * @li $n  The nth capture, where n is in [1,9] and $n is not followed by a\n+   *         decimal digit.  If n <= match_results::size() and the nth capture\n+   *         is undefined, use the empty string instead.  If n >\n+   *         match_results::size(), the result is implementation-defined.\n+   * @li $nn The nnth capture, where nn is a two-digit decimal number on\n+   *         [01, 99].  If nn <= match_results::size() and the nth capture is\n+   *         undefined, use the empty string instead. If\n+   *         nn > match_results::size(), the result is implementation-defined.\n+   */\n+  constexpr match_flag_type format_default = static_cast<match_flag_type>(0);\n+\n+  /**\n+   * When a regular expression match is to be replaced by a new string, the\n+   * new string is constructed using the rules used by the POSIX sed utility\n+   * in IEEE Std 1003.1- 2001 [IEEE, Information Technology -- Portable\n+   * Operating System Interface (POSIX), IEEE Standard 1003.1-2001].\n+   */\n+  constexpr match_flag_type format_sed =\n+    static_cast<match_flag_type>(1 << _S_sed);\n+\n+  /**\n+   * During a search and replace operation, sections of the character\n+   * container sequence being searched that do not match the regular\n+   * expression shall not be copied to the output string.\n+   */\n+  constexpr match_flag_type format_no_copy =\n+    static_cast<match_flag_type>(1 << _S_no_copy);\n+\n+  /**\n+   * When specified during a search and replace operation, only the first\n+   * occurrence of the regular expression shall be replaced.\n+   */\n+  constexpr match_flag_type format_first_only =\n+    static_cast<match_flag_type>(1 << _S_first_only);\n \n   constexpr inline match_flag_type\n   operator&(match_flag_type __a, match_flag_type __b)"}, {"sha": "cf8513aaff9ffd38ab97f20deb22824108c77e30", "filename": "libstdc++-v3/testsuite/28_regex/constants/constexpr.cc", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2894311302edaf27ed41a0b517e1c808c286974c/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fconstants%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2894311302edaf27ed41a0b517e1c808c286974c/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fconstants%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fconstants%2Fconstexpr.cc?ref=2894311302edaf27ed41a0b517e1c808c286974c", "patch": "@@ -0,0 +1,60 @@\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n+//\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 28.5.4\n+\n+#include <regex>\n+\n+// libstdc++/65420\n+void\n+test01()\n+{\n+  const std::regex_constants::syntax_option_type* option __attribute__((unused));\n+  option = &std::regex_constants::icase;\n+  option = &std::regex_constants::nosubs;\n+  option = &std::regex_constants::optimize;\n+  option = &std::regex_constants::collate;\n+  option = &std::regex_constants::ECMAScript;\n+  option = &std::regex_constants::basic;\n+  option = &std::regex_constants::extended;\n+  option = &std::regex_constants::awk;\n+  option = &std::regex_constants::grep;\n+  option = &std::regex_constants::egrep;\n+\n+  const std::regex_constants::match_flag_type* flag __attribute__((unused));\n+  flag = &std::regex_constants::match_not_bol;\n+  flag = &std::regex_constants::match_not_eol;\n+  flag = &std::regex_constants::match_not_bow;\n+  flag = &std::regex_constants::match_not_eow;\n+  flag = &std::regex_constants::match_any;\n+  flag = &std::regex_constants::match_not_null;\n+  flag = &std::regex_constants::match_continuous;\n+  flag = &std::regex_constants::match_prev_avail;\n+  flag = &std::regex_constants::format_default;\n+  flag = &std::regex_constants::format_sed;\n+  flag = &std::regex_constants::format_no_copy;\n+  flag = &std::regex_constants::format_first_only;\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}