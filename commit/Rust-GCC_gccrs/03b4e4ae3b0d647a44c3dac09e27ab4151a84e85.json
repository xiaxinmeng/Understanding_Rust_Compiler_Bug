{"sha": "03b4e4ae3b0d647a44c3dac09e27ab4151a84e85", "node_id": "C_kwDOANBUbNoAKDAzYjRlNGFlM2IwZDY0N2E0NGMzZGFjMDllMjdhYjQxNTFhODRlODU", "commit": {"author": {"name": "Piotr Trojanek", "email": "trojanek@adacore.com", "date": "2022-09-02T20:42:57Z"}, "committer": {"name": "Marc Poulhi\u00e8s", "email": "poulhies@adacore.com", "date": "2022-11-07T08:36:30Z"}, "message": "ada: Don't reuse operator nodes in expansion\n\nThis patch removes handling of references to unset objects that relied\non Original_Node. This handling was only needed because of rewriting\nthat reused operator nodes, for example, when an array inequality like:\n\n  A < B\n\nwas rewritten into:\n\n  System.Compare_Array_Unsigned_8.Compare_Array_U8\n    (A'Address, B'Address, A'Length, B'Length) < 0\n\nby keeping the node for operator \"<\" and only substituting its operands.\nIt seems safer to simply create an new operator node when rewriting and\nnot rely on Original_Node afterwards.\n\nCleanup related to improved detection uninitialized objects.\n\ngcc/ada/\n\n\t* checks.adb (Apply_Arithmetic_Overflow_Strict): Rewrite using a\n\tnewly created operator node.\n\t* exp_ch4.adb (Expand_Array_Comparison): Likewise.\n\t* exp_ch6.adb (Add_Call_By_Copy_Code): Rewriting actual parameter\n\tusing its own location and not the location of the subprogram\n\tcall.\n\t* sem_warn.adb (Check_References): Looping with Original_Node is\n\tno longer needed.", "tree": {"sha": "e45f07121e885bd9420ca01ecb3a501e2c4802aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e45f07121e885bd9420ca01ecb3a501e2c4802aa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/03b4e4ae3b0d647a44c3dac09e27ab4151a84e85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03b4e4ae3b0d647a44c3dac09e27ab4151a84e85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03b4e4ae3b0d647a44c3dac09e27ab4151a84e85", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03b4e4ae3b0d647a44c3dac09e27ab4151a84e85/comments", "author": {"login": "ptroja", "id": 161602, "node_id": "MDQ6VXNlcjE2MTYwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/161602?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptroja", "html_url": "https://github.com/ptroja", "followers_url": "https://api.github.com/users/ptroja/followers", "following_url": "https://api.github.com/users/ptroja/following{/other_user}", "gists_url": "https://api.github.com/users/ptroja/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptroja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptroja/subscriptions", "organizations_url": "https://api.github.com/users/ptroja/orgs", "repos_url": "https://api.github.com/users/ptroja/repos", "events_url": "https://api.github.com/users/ptroja/events{/privacy}", "received_events_url": "https://api.github.com/users/ptroja/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dkm", "id": 87603, "node_id": "MDQ6VXNlcjg3NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/87603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dkm", "html_url": "https://github.com/dkm", "followers_url": "https://api.github.com/users/dkm/followers", "following_url": "https://api.github.com/users/dkm/following{/other_user}", "gists_url": "https://api.github.com/users/dkm/gists{/gist_id}", "starred_url": "https://api.github.com/users/dkm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dkm/subscriptions", "organizations_url": "https://api.github.com/users/dkm/orgs", "repos_url": "https://api.github.com/users/dkm/repos", "events_url": "https://api.github.com/users/dkm/events{/privacy}", "received_events_url": "https://api.github.com/users/dkm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ffe889d7ffcc7e8150413d4de38e066940fb7881", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffe889d7ffcc7e8150413d4de38e066940fb7881", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ffe889d7ffcc7e8150413d4de38e066940fb7881"}], "stats": {"total": 117, "additions": 58, "deletions": 59}, "files": [{"sha": "a91c1cd5568388f663ff0c1c2777e3178664df63", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03b4e4ae3b0d647a44c3dac09e27ab4151a84e85/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03b4e4ae3b0d647a44c3dac09e27ab4151a84e85/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=03b4e4ae3b0d647a44c3dac09e27ab4151a84e85", "patch": "@@ -999,21 +999,26 @@ package body Checks is\n                   Determine_Range (N, VOK, Vlo, Vhi, Assume_Valid => True);\n \n                   if VOK and then Tlo <= Vlo and then Vhi <= Thi then\n-                     Rewrite (Left_Opnd (N),\n-                       Make_Type_Conversion (Loc,\n-                         Subtype_Mark => New_Occurrence_Of (Target_Type, Loc),\n-                         Expression   => Relocate_Node (Left_Opnd (N))));\n-\n-                     Rewrite (Right_Opnd (N),\n-                       Make_Type_Conversion (Loc,\n-                        Subtype_Mark => New_Occurrence_Of (Target_Type, Loc),\n-                        Expression   => Relocate_Node (Right_Opnd (N))));\n-\n                      --  Rewrite the conversion operand so that the original\n                      --  node is retained, in order to avoid the warning for\n                      --  redundant conversions in Resolve_Type_Conversion.\n \n-                     Rewrite (N, Relocate_Node (N));\n+                     declare\n+                        Op : constant Node_Id := New_Op_Node (Nkind (N), Loc);\n+                     begin\n+                        Set_Left_Opnd (Op,\n+                          Make_Type_Conversion (Loc,\n+                            Subtype_Mark =>\n+                              New_Occurrence_Of (Target_Type, Loc),\n+                            Expression   => Relocate_Node (Left_Opnd (N))));\n+                        Set_Right_Opnd (Op,\n+                          Make_Type_Conversion (Loc,\n+                            Subtype_Mark =>\n+                              New_Occurrence_Of (Target_Type, Loc),\n+                            Expression   => Relocate_Node (Right_Opnd (N))));\n+\n+                        Rewrite (N, Op);\n+                     end;\n \n                      Set_Etype (N, Target_Type);\n "}, {"sha": "bbbcf4f69525654bdce98864dd8c0bff7ee0762d", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 41, "deletions": 22, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03b4e4ae3b0d647a44c3dac09e27ab4151a84e85/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03b4e4ae3b0d647a44c3dac09e27ab4151a84e85/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=03b4e4ae3b0d647a44c3dac09e27ab4151a84e85", "patch": "@@ -1424,33 +1424,52 @@ package body Exp_Ch4 is\n             Remove_Side_Effects (Op1, Name_Req => True);\n             Remove_Side_Effects (Op2, Name_Req => True);\n \n-            Rewrite (Op1,\n-              Make_Function_Call (Sloc (Op1),\n-                Name => New_Occurrence_Of (RTE (Comp), Loc),\n+            declare\n+               Comp_Call : constant Node_Id :=\n+                 Make_Function_Call (Loc,\n+                   Name => New_Occurrence_Of (RTE (Comp), Loc),\n \n-                Parameter_Associations => New_List (\n-                  Make_Attribute_Reference (Loc,\n-                    Prefix         => Relocate_Node (Op1),\n-                    Attribute_Name => Name_Address),\n+                   Parameter_Associations => New_List (\n+                     Make_Attribute_Reference (Loc,\n+                       Prefix         => Relocate_Node (Op1),\n+                       Attribute_Name => Name_Address),\n \n-                  Make_Attribute_Reference (Loc,\n-                    Prefix         => Relocate_Node (Op2),\n-                    Attribute_Name => Name_Address),\n+                     Make_Attribute_Reference (Loc,\n+                       Prefix         => Relocate_Node (Op2),\n+                       Attribute_Name => Name_Address),\n \n-                  Make_Attribute_Reference (Loc,\n-                    Prefix         => Relocate_Node (Op1),\n-                    Attribute_Name => Name_Length),\n+                     Make_Attribute_Reference (Loc,\n+                       Prefix         => Relocate_Node (Op1),\n+                       Attribute_Name => Name_Length),\n \n-                  Make_Attribute_Reference (Loc,\n-                    Prefix         => Relocate_Node (Op2),\n-                    Attribute_Name => Name_Length))));\n+                     Make_Attribute_Reference (Loc,\n+                       Prefix         => Relocate_Node (Op2),\n+                       Attribute_Name => Name_Length)));\n+\n+               Zero : constant Node_Id :=\n+                 Make_Integer_Literal (Loc,\n+                   Intval => Uint_0);\n \n-            Rewrite (Op2,\n-              Make_Integer_Literal (Sloc (Op2),\n-                Intval => Uint_0));\n+               Comp_Op : Node_Id;\n \n-            Analyze_And_Resolve (Op1, Standard_Integer);\n-            Analyze_And_Resolve (Op2, Standard_Integer);\n+            begin\n+               case Nkind (N) is\n+                  when N_Op_Lt =>\n+                     Comp_Op := Make_Op_Lt (Loc, Comp_Call, Zero);\n+                  when N_Op_Le =>\n+                     Comp_Op := Make_Op_Le (Loc, Comp_Call, Zero);\n+                  when N_Op_Gt =>\n+                     Comp_Op := Make_Op_Gt (Loc, Comp_Call, Zero);\n+                  when N_Op_Ge =>\n+                     Comp_Op := Make_Op_Ge (Loc, Comp_Call, Zero);\n+                  when others =>\n+                     raise Program_Error;\n+               end case;\n+\n+               Rewrite (N, Comp_Op);\n+            end;\n+\n+            Analyze_And_Resolve (N, Standard_Boolean);\n             return;\n          end if;\n       end if;\n@@ -9819,7 +9838,7 @@ package body Exp_Ch4 is\n          --  avoids anomalies when the replacement is done in an instance and\n          --  is epsilon more efficient.\n \n-         Set_Entity            (N, Standard_Entity (S_Op_Rem));\n+         pragma Assert (Entity (N) = Standard_Op_Rem);\n          Set_Etype             (N, Typ);\n          Set_Do_Division_Check (N, DDC);\n          Expand_N_Op_Rem (N);"}, {"sha": "9380f3dab0fe49de98c78ebdec98086d65b82d67", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03b4e4ae3b0d647a44c3dac09e27ab4151a84e85/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03b4e4ae3b0d647a44c3dac09e27ab4151a84e85/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=03b4e4ae3b0d647a44c3dac09e27ab4151a84e85", "patch": "@@ -1806,7 +1806,7 @@ package body Exp_Ch6 is\n                Expr := New_Occurrence_Of (Temp, Loc);\n             end if;\n \n-            Rewrite (Actual, New_Occurrence_Of (Temp, Loc));\n+            Rewrite (Actual, New_Occurrence_Of (Temp, Sloc (Actual)));\n             Analyze (Actual);\n \n             --  If the actual is a conversion of a packed reference, it may"}, {"sha": "4552d907bac0d3f5028ce9ec0eda90a6e397409e", "filename": "gcc/ada/sem_warn.adb", "status": "modified", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03b4e4ae3b0d647a44c3dac09e27ab4151a84e85/gcc%2Fada%2Fsem_warn.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03b4e4ae3b0d647a44c3dac09e27ab4151a84e85/gcc%2Fada%2Fsem_warn.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_warn.adb?ref=03b4e4ae3b0d647a44c3dac09e27ab4151a84e85", "patch": "@@ -1460,31 +1460,6 @@ package body Sem_Warn is\n                  and then not Known_To_Have_Preelab_Init (Etype (E1))\n                then\n \n-                  --  For other than access type, go back to original node to\n-                  --  deal with case where original unset reference has been\n-                  --  rewritten during expansion.\n-\n-                  --  In some cases, the original node may be a type\n-                  --  conversion, a qualification or an attribute reference and\n-                  --  in this case we want the object entity inside. Same for\n-                  --  an expression with actions.\n-\n-                  UR := Original_Node (UR);\n-                  loop\n-                     if Nkind (UR) in N_Expression_With_Actions\n-                                    | N_Qualified_Expression\n-                                    | N_Type_Conversion\n-                     then\n-                        UR := Expression (UR);\n-\n-                     elsif Nkind (UR) = N_Attribute_Reference then\n-                        UR := Prefix (UR);\n-\n-                     else\n-                        exit;\n-                     end if;\n-                  end loop;\n-\n                   --  Don't issue warning if appearing inside Initial_Condition\n                   --  pragma or aspect, since that expression is not evaluated\n                   --  at the point where it occurs in the source."}]}