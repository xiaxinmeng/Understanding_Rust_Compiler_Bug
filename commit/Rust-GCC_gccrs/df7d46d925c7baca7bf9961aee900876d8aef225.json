{"sha": "df7d46d925c7baca7bf9961aee900876d8aef225", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGY3ZDQ2ZDkyNWM3YmFjYTdiZjk5NjFhZWU5MDA4NzZkOGFlZjIyNQ==", "commit": {"author": {"name": "Robin Dapp", "email": "rdapp@linux.ibm.com", "date": "2019-08-26T10:24:44Z"}, "committer": {"name": "Robin Dapp", "email": "rdapp@gcc.gnu.org", "date": "2019-08-26T10:24:44Z"}, "message": "[PATCH 2/2] Add simplify rule for wrapped addition.\n\nAdd the transform (T)(A) + CST -> (T)(A + CST).  This enables vrp to\nsimplify sequences like\n\n_2 = a_7 - 1;\n_3 = (long unsigned int) _2;\n_5 = _3 + 1\n\nthat ivopts creates.\n\n--\n\ngcc/ChangeLog:\n\n2019-08-26  Robin Dapp  <rdapp@linux.ibm.com>\n\n        * match.pd: Add (T)(A) + CST -> (T)(A + CST).\n\ngcc/testsuite/ChangeLog:\n\n2019-08-26  Robin Dapp  <rdapp@linux.ibm.com>\n\n        * gcc.dg/tree-ssa/copy-headers-5.c: Do not run vrp pass.\n        * gcc.dg/tree-ssa/copy-headers-7.c: Do not run vrp pass.\n        * gcc.dg/tree-ssa/loop-15.c: Remove XFAIL.\n        * gcc.dg/tree-ssa/pr23744.c: Change search pattern.\n        * gcc.dg/wrapped-binop-simplify.c: New test.\n\nFrom-SVN: r274925", "tree": {"sha": "052e129ae6ca3d130003a8d22424156f81b471c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/052e129ae6ca3d130003a8d22424156f81b471c3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/df7d46d925c7baca7bf9961aee900876d8aef225", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df7d46d925c7baca7bf9961aee900876d8aef225", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df7d46d925c7baca7bf9961aee900876d8aef225", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df7d46d925c7baca7bf9961aee900876d8aef225/comments", "author": {"login": "rdapp-ibm", "id": 80318053, "node_id": "MDQ6VXNlcjgwMzE4MDUz", "avatar_url": "https://avatars.githubusercontent.com/u/80318053?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rdapp-ibm", "html_url": "https://github.com/rdapp-ibm", "followers_url": "https://api.github.com/users/rdapp-ibm/followers", "following_url": "https://api.github.com/users/rdapp-ibm/following{/other_user}", "gists_url": "https://api.github.com/users/rdapp-ibm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rdapp-ibm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rdapp-ibm/subscriptions", "organizations_url": "https://api.github.com/users/rdapp-ibm/orgs", "repos_url": "https://api.github.com/users/rdapp-ibm/repos", "events_url": "https://api.github.com/users/rdapp-ibm/events{/privacy}", "received_events_url": "https://api.github.com/users/rdapp-ibm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e944354ec05891474b0d204c6c239c04ee7b527b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e944354ec05891474b0d204c6c239c04ee7b527b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e944354ec05891474b0d204c6c239c04ee7b527b"}], "stats": {"total": 96, "additions": 91, "deletions": 5}, "files": [{"sha": "abccd69b1e4dfc5eb3f7698675c194920fbe8bb2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df7d46d925c7baca7bf9961aee900876d8aef225/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df7d46d925c7baca7bf9961aee900876d8aef225/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=df7d46d925c7baca7bf9961aee900876d8aef225", "patch": "@@ -1,3 +1,7 @@\n+2019-08-26  Robin Dapp  <rdapp@linux.ibm.com>\n+\n+\t* match.pd: Add (T)(A) + CST -> (T)(A + CST).\n+\n 2019-08-26  Robin Dapp  <rdapp@linux.ibm.com>\n \n \t* gimple-loop-versioning.cc (loop_versioning::record_address_fragment):"}, {"sha": "13e41a933f7430405a47705562fc090cca2368b5", "filename": "gcc/match.pd", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df7d46d925c7baca7bf9961aee900876d8aef225/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df7d46d925c7baca7bf9961aee900876d8aef225/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=df7d46d925c7baca7bf9961aee900876d8aef225", "patch": "@@ -2022,6 +2022,37 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n     (if (cst && !TREE_OVERFLOW (cst))\n      (plus { cst; } @0))))\n \n+/* ((T)(A)) + CST -> (T)(A + CST)  */\n+#if GIMPLE\n+  (simplify\n+   (plus (convert SSA_NAME@0) INTEGER_CST@1)\n+    (if (TREE_CODE (TREE_TYPE (@0)) == INTEGER_TYPE\n+         && TREE_CODE (type) == INTEGER_TYPE\n+         && TYPE_PRECISION (type) > TYPE_PRECISION (TREE_TYPE (@0))\n+         && int_fits_type_p (@1, TREE_TYPE (@0)))\n+     /* Perform binary operation inside the cast if the constant fits\n+        and (A + CST)'s range does not overflow.  */\n+     (with\n+      {\n+\twi::overflow_type min_ovf = wi::OVF_OVERFLOW,\n+\t\t\t  max_ovf = wi::OVF_OVERFLOW;\n+        tree inner_type = TREE_TYPE (@0);\n+\n+        wide_int w1 = wide_int::from (wi::to_wide (@1), TYPE_PRECISION (inner_type),\n+\t    TYPE_SIGN (inner_type));\n+\n+        wide_int wmin0, wmax0;\n+        if (get_range_info (@0, &wmin0, &wmax0) == VR_RANGE)\n+          {\n+            wi::add (wmin0, w1, TYPE_SIGN (inner_type), &min_ovf);\n+            wi::add (wmax0, w1, TYPE_SIGN (inner_type), &max_ovf);\n+          }\n+      }\n+     (if (min_ovf == wi::OVF_NONE && max_ovf == wi::OVF_NONE)\n+      (convert (plus @0 { wide_int_to_tree (TREE_TYPE (@0), w1); } )))\n+     )))\n+#endif\n+\n   /* ~A + A -> -1 */\n   (simplify\n    (plus:c (bit_not @0) @0)"}, {"sha": "c7bf9cc0e2f82251359d83553ec13dc95deb2b42", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df7d46d925c7baca7bf9961aee900876d8aef225/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df7d46d925c7baca7bf9961aee900876d8aef225/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=df7d46d925c7baca7bf9961aee900876d8aef225", "patch": "@@ -1,3 +1,11 @@\n+2019-08-26  Robin Dapp  <rdapp@linux.ibm.com>\n+\n+\t* gcc.dg/tree-ssa/copy-headers-5.c: Do not run vrp pass.\n+\t* gcc.dg/tree-ssa/copy-headers-7.c: Do not run vrp pass.\n+\t* gcc.dg/tree-ssa/loop-15.c: Remove XFAIL.\n+\t* gcc.dg/tree-ssa/pr23744.c: Change search pattern.\n+\t* gcc.dg/wrapped-binop-simplify.c: New test.\n+\n 2019-08-26  Kito Cheng  <kito.cheng@sifive.com>\n \n \t* gcc.target/riscv/li.c: New test."}, {"sha": "42e0ed965950bf291dc08e34769c58fbedc914dd", "filename": "gcc/testsuite/gcc.dg/tree-ssa/copy-headers-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df7d46d925c7baca7bf9961aee900876d8aef225/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fcopy-headers-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df7d46d925c7baca7bf9961aee900876d8aef225/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fcopy-headers-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fcopy-headers-5.c?ref=df7d46d925c7baca7bf9961aee900876d8aef225", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-ch2-details\" } */\n+/* { dg-options \"-O2 -fno-tree-vrp -fdump-tree-ch2-details\" } */\n \n int is_sorted(int *a, int n)\n {"}, {"sha": "3c9b3807041dd565597279e51200ae318d092ef7", "filename": "gcc/testsuite/gcc.dg/tree-ssa/copy-headers-7.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df7d46d925c7baca7bf9961aee900876d8aef225/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fcopy-headers-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df7d46d925c7baca7bf9961aee900876d8aef225/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fcopy-headers-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fcopy-headers-7.c?ref=df7d46d925c7baca7bf9961aee900876d8aef225", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-ch2-details --param logical-op-non-short-circuit=0\" } */\n+/* { dg-options \"-O2 -fno-tree-vrp -fdump-tree-ch2-details --param logical-op-non-short-circuit=0\" } */\n \n int is_sorted(int *a, int n, int m, int k)\n {"}, {"sha": "dce6ad57a04938a955141cfe1814b861b07866ca", "filename": "gcc/testsuite/gcc.dg/tree-ssa/loop-15.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df7d46d925c7baca7bf9961aee900876d8aef225/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df7d46d925c7baca7bf9961aee900876d8aef225/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-15.c?ref=df7d46d925c7baca7bf9961aee900876d8aef225", "patch": "@@ -19,7 +19,7 @@ int bla(void)\n }\n \n /* Since the loop is removed, there should be no addition.  */\n-/* { dg-final { scan-tree-dump-times \" \\\\+ \" 0 \"optimized\" { xfail *-*-* } } } */\n+/* { dg-final { scan-tree-dump-times \" \\\\+ \" 0 \"optimized\" } } */\n /* { dg-final { scan-tree-dump-times \" \\\\* \" 1 \"optimized\" } } */\n \n /* The if from the loop header copying remains in the code.  */"}, {"sha": "ba3fda352ca33d7ce8da58bb8f17f7d4c2debd24", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr23744.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df7d46d925c7baca7bf9961aee900876d8aef225/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr23744.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df7d46d925c7baca7bf9961aee900876d8aef225/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr23744.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr23744.c?ref=df7d46d925c7baca7bf9961aee900876d8aef225", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fno-tree-ccp -fdisable-tree-evrp -fdump-tree-vrp1\" } */\n+/* { dg-options \"-O2 -fno-tree-ccp -fdisable-tree-evrp -fdump-tree-vrp1-details\" } */\n \n void h (void);\n \n@@ -17,4 +17,4 @@ int g (int i, int j)\n     return 1;\n }\n \n-/* { dg-final { scan-tree-dump-times \"Folding predicate.*to 1\" 1 \"vrp1\" } } */\n+/* { dg-final { scan-tree-dump-times \"gimple_simplified\" 1 \"vrp1\" } } */"}, {"sha": "44d85c04bfbabe9fc60b9eadf5e354fcab985683", "filename": "gcc/testsuite/gcc.dg/wrapped-binop-simplify.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df7d46d925c7baca7bf9961aee900876d8aef225/gcc%2Ftestsuite%2Fgcc.dg%2Fwrapped-binop-simplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df7d46d925c7baca7bf9961aee900876d8aef225/gcc%2Ftestsuite%2Fgcc.dg%2Fwrapped-binop-simplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fwrapped-binop-simplify.c?ref=df7d46d925c7baca7bf9961aee900876d8aef225", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-vrp2-details\" } */\n+/* { dg-final { scan-tree-dump-times \"gimple_simplified to\" 4 \"vrp2\" } } */\n+\n+void v1 (unsigned long *in, unsigned long *out, unsigned int n)\n+{\n+  int i;\n+\n+  for (i = 0; i < n; i++)\n+  {\n+    out[i] = in[i];\n+  }\n+}\n+\n+void v2 (unsigned long *in, unsigned long *out, int n)\n+{\n+  int i;\n+\n+  for (i = 0; i < n; i++)\n+  {\n+    out[i] = in[i];\n+  }\n+}\n+\n+void v3 (unsigned long *in, unsigned long *out, unsigned int n)\n+{\n+  unsigned int i;\n+\n+  for (i = 0; i < n; i++)\n+  {\n+    out[i] = in[i];\n+  }\n+}\n+\n+void v4 (unsigned long *in, unsigned long *out, int n)\n+{\n+  unsigned int i;\n+\n+  for (i = 0; i < n; i++)\n+  {\n+    out[i] = in[i];\n+  }\n+}"}]}