{"sha": "05d39f0de9ee0455d7b2b60f314f4231bc9a87c1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDVkMzlmMGRlOWVlMDQ1NWQ3YjJiNjBmMzE0ZjQyMzFiYzlhODdjMQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2020-10-02T11:31:05Z"}, "committer": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2020-10-02T11:31:05Z"}, "message": "Commonize handling of attr-fnspec\n\n\t* attr-fnspec.h: New file.\n\t* calls.c (decl_return_flags): Use attr_fnspec.\n\t* gimple.c (gimple_call_arg_flags): Use attr_fnspec.\n\t(gimple_call_return_flags): Use attr_fnspec.\n\t* tree-into-ssa.c (pass_build_ssa::execute): Use attr_fnspec.\n\t* tree-ssa-alias.c (attr_fnspec::verify): New member fuction.", "tree": {"sha": "7bb10d8d757e886dbd5dc025ed425ae63fa58d93", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7bb10d8d757e886dbd5dc025ed425ae63fa58d93"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/05d39f0de9ee0455d7b2b60f314f4231bc9a87c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05d39f0de9ee0455d7b2b60f314f4231bc9a87c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05d39f0de9ee0455d7b2b60f314f4231bc9a87c1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05d39f0de9ee0455d7b2b60f314f4231bc9a87c1/comments", "author": null, "committer": null, "parents": [{"sha": "b8e773e9921904210cad1f396b2ab01ffdbc4b39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8e773e9921904210cad1f396b2ab01ffdbc4b39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8e773e9921904210cad1f396b2ab01ffdbc4b39"}], "stats": {"total": 291, "additions": 229, "deletions": 62}, "files": [{"sha": "607c0cf0f54d7d4928a9c3eafe9e9665e563687f", "filename": "gcc/attr-fnspec.h", "status": "added", "additions": 145, "deletions": 0, "changes": 145, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05d39f0de9ee0455d7b2b60f314f4231bc9a87c1/gcc%2Fattr-fnspec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05d39f0de9ee0455d7b2b60f314f4231bc9a87c1/gcc%2Fattr-fnspec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fattr-fnspec.h?ref=05d39f0de9ee0455d7b2b60f314f4231bc9a87c1", "patch": "@@ -0,0 +1,145 @@\n+/* Handling of fnspec attribute specifiers\n+   Copyright (C) 2008-2020 Free Software Foundation, Inc.\n+   Contributed by Richard Guenther  <rguenther@suse.de>\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify\n+   under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+/* Parse string of attribute \"fn spec\".  This is an internal attribute\n+   describing side effects of a function as follows:\n+\n+   character 0  specifies properties of return values as follows:\n+     '1'...'4'  specifies number of argument function returns (as in memset)\n+     'm'\tspecifies that returned value is noalias (as in malloc)\n+     '.'\tspecifies that nothing is known.\n+\n+   character 1+i specifies properties of argument number i as follows:\n+     'x' or 'X' specifies that parameter is unused.\n+     'r' or 'R' specifies that parameter is only read and memory pointed to is\n+\t\tnever dereferenced.\n+     'w' or 'W' specifies that parameter is only written to.\n+     '.'\tspecifies that nothing is known.\n+   The uppercase letter in addition specifies that parameter\n+   is non-escaping.  */\n+\n+#ifndef ATTR_FNSPEC_H\n+#define ATTR_FNSPEC_H\n+\n+class attr_fnspec\n+{\n+private:\n+  /* fn spec attribute string.  */\n+  const char *str;\n+  /* length of the fn spec string.  */\n+  const unsigned len;\n+  /* Number of characters specifying return value.  */\n+  const unsigned int return_desc_size = 1;\n+  /* Number of characters specifying size.  */\n+  const unsigned int arg_desc_size = 1;\n+\n+  /* Return start of specifier of arg i.  */\n+  unsigned int arg_idx (int i)\n+  {\n+    return return_desc_size + arg_desc_size * i;\n+  }\n+\n+public:\n+  attr_fnspec (const char *str, unsigned len)\n+  : str (str), len (len)\n+  {\n+    if (flag_checking)\n+      verify ();\n+  }\n+  attr_fnspec (const_tree identifier)\n+  : str (TREE_STRING_POINTER (identifier)),\n+    len (TREE_STRING_LENGTH (identifier))\n+  {\n+    if (flag_checking)\n+      verify ();\n+  }\n+\n+  /* Return true if arg I is specified.  */\n+  bool\n+  arg_specified_p (unsigned int i)\n+  {\n+    return len >= arg_idx (i + 1);\n+  }\n+\n+  /* True if the argument is not dereferenced recursively, thus only\n+     directly reachable memory is read or written.  */\n+  bool\n+  arg_direct_p (unsigned int i)\n+  {\n+    unsigned int idx = arg_idx (i);\n+    gcc_checking_assert (arg_specified_p (i));\n+    return str[idx] == 'R' || str[idx] == 'W';\n+  }\n+\n+  /* True if argument is used.  */\n+  bool\n+  arg_used_p (unsigned int i)\n+  {\n+    unsigned int idx = arg_idx (i);\n+    gcc_checking_assert (arg_specified_p (i));\n+    return str[idx] != 'x' && str[idx] != 'X';\n+  }\n+\n+  /* True if memory reached by the argument is readonly (not clobbered).  */\n+  bool\n+  arg_readonly_p (unsigned int i)\n+  {\n+    unsigned int idx = arg_idx (i);\n+    gcc_checking_assert (arg_specified_p (i));\n+    return str[idx] == 'r' || str[idx] == 'R';\n+  }\n+\n+  /* True if the argument does not escape.  */\n+  bool\n+  arg_noescape_p (unsigned int i)\n+  {\n+    unsigned int idx = arg_idx (i);\n+    gcc_checking_assert (arg_specified_p (i));\n+    return str[idx] == 'w' || str[idx] == 'W'\n+\t   || str[idx] == 'R' || str[idx] == 'r';\n+  }\n+\n+  /* Return true if function returns value of its parameter.  If ARG_NO is\n+     non-NULL return initialize it to the argument returned.  */\n+  bool\n+  returns_arg (unsigned int *arg_no)\n+  {\n+    if (str[0] >= '1' && str[0] <= '4')\n+      {\n+\tif (arg_no)\n+\t  *arg_no = str[0] - '1';\n+\treturn true;\n+      }\n+    return false;\n+  }\n+\n+  /* Nonzero if the return value does not alias with anything.  Functions\n+     with the malloc attribute have this set on their return value.  */\n+  bool\n+  returns_noalias_p ()\n+  {\n+    return str[0] == 'm';\n+  }\n+\n+  /* Check validity of the string.  */\n+  void verify ();\n+};\n+\n+#endif /* ATTR_FNSPEC_H  */"}, {"sha": "93da3d6256e67a8b4ae427aee85ba59af65c40da", "filename": "gcc/calls.c", "status": "modified", "additions": 8, "deletions": 17, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05d39f0de9ee0455d7b2b60f314f4231bc9a87c1/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05d39f0de9ee0455d7b2b60f314f4231bc9a87c1/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=05d39f0de9ee0455d7b2b60f314f4231bc9a87c1", "patch": "@@ -58,6 +58,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"attribs.h\"\n #include \"builtins.h\"\n #include \"gimple-fold.h\"\n+#include \"attr-fnspec.h\"\n \n #include \"tree-pretty-print.h\"\n \n@@ -642,25 +643,15 @@ decl_return_flags (tree fndecl)\n   if (!attr)\n     return 0;\n \n-  attr = TREE_VALUE (TREE_VALUE (attr));\n-  if (!attr || TREE_STRING_LENGTH (attr) < 1)\n-    return 0;\n-\n-  switch (TREE_STRING_POINTER (attr)[0])\n-    {\n-    case '1':\n-    case '2':\n-    case '3':\n-    case '4':\n-      return ERF_RETURNS_ARG | (TREE_STRING_POINTER (attr)[0] - '1');\n+  attr_fnspec fnspec (TREE_VALUE (TREE_VALUE (attr)));\n \n-    case 'm':\n-      return ERF_NOALIAS;\n+  unsigned int arg;\n+  if (fnspec.returns_arg (&arg))\n+    return ERF_RETURNS_ARG | arg;\n \n-    case '.':\n-    default:\n-      return 0;\n-    }\n+  if (fnspec.returns_noalias_p ())\n+    return ERF_NOALIAS;\n+  return 0;\n }\n \n /* Return nonzero when FNDECL represents a call to setjmp.  */"}, {"sha": "f19e24d29b3dca6e0de12178a9141389a32d55cd", "filename": "gcc/gimple.c", "status": "modified", "additions": 25, "deletions": 36, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05d39f0de9ee0455d7b2b60f314f4231bc9a87c1/gcc%2Fgimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05d39f0de9ee0455d7b2b60f314f4231bc9a87c1/gcc%2Fgimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.c?ref=05d39f0de9ee0455d7b2b60f314f4231bc9a87c1", "patch": "@@ -45,6 +45,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"attribs.h\"\n #include \"asan.h\"\n #include \"langhooks.h\"\n+#include \"attr-fnspec.h\"\n \n \n /* All the tuples have their operand vector (if present) at the very bottom\n@@ -1512,31 +1513,26 @@ gimple_call_arg_flags (const gcall *stmt, unsigned arg)\n {\n   const_tree attr = gimple_call_fnspec (stmt);\n \n-  if (!attr || 1 + arg >= (unsigned) TREE_STRING_LENGTH (attr))\n+  if (!attr)\n     return 0;\n \n-  switch (TREE_STRING_POINTER (attr)[1 + arg])\n-    {\n-    case 'x':\n-    case 'X':\n-      return EAF_UNUSED;\n-\n-    case 'R':\n-      return EAF_DIRECT | EAF_NOCLOBBER | EAF_NOESCAPE;\n-\n-    case 'r':\n-      return EAF_NOCLOBBER | EAF_NOESCAPE;\n-\n-    case 'W':\n-      return EAF_DIRECT | EAF_NOESCAPE;\n-\n-    case 'w':\n-      return EAF_NOESCAPE;\n+  int flags = 0;\n+  attr_fnspec fnspec (attr);\n \n-    case '.':\n-    default:\n-      return 0;\n+  if (!fnspec.arg_specified_p (arg))\n+    ;\n+  else if (!fnspec.arg_used_p (arg))\n+    flags = EAF_UNUSED;\n+  else\n+    {\n+      if (fnspec.arg_direct_p (arg))\n+\tflags |= EAF_DIRECT;\n+      if (fnspec.arg_noescape_p (arg))\n+\tflags |= EAF_NOESCAPE;\n+      if (fnspec.arg_readonly_p (arg))\n+\tflags |= EAF_NOCLOBBER;\n     }\n+  return flags;\n }\n \n /* Detects return flags for the call STMT.  */\n@@ -1550,24 +1546,17 @@ gimple_call_return_flags (const gcall *stmt)\n     return ERF_NOALIAS;\n \n   attr = gimple_call_fnspec (stmt);\n-  if (!attr || TREE_STRING_LENGTH (attr) < 1)\n+  if (!attr)\n     return 0;\n+  attr_fnspec fnspec (attr);\n \n-  switch (TREE_STRING_POINTER (attr)[0])\n-    {\n-    case '1':\n-    case '2':\n-    case '3':\n-    case '4':\n-      return ERF_RETURNS_ARG | (TREE_STRING_POINTER (attr)[0] - '1');\n-\n-    case 'm':\n-      return ERF_NOALIAS;\n+  unsigned int arg_no;\n+  if (fnspec.returns_arg (&arg_no))\n+    return ERF_RETURNS_ARG | arg_no;\n \n-    case '.':\n-    default:\n-      return 0;\n-    }\n+  if (fnspec.returns_noalias_p ())\n+    return ERF_NOALIAS;\n+  return 0;\n }\n \n "}, {"sha": "1493b3239569d8476ce2e23855b01739ddd9fca0", "filename": "gcc/tree-into-ssa.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05d39f0de9ee0455d7b2b60f314f4231bc9a87c1/gcc%2Ftree-into-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05d39f0de9ee0455d7b2b60f314f4231bc9a87c1/gcc%2Ftree-into-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-into-ssa.c?ref=05d39f0de9ee0455d7b2b60f314f4231bc9a87c1", "patch": "@@ -41,6 +41,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"stringpool.h\"\n #include \"attribs.h\"\n #include \"asan.h\"\n+#include \"attr-fnspec.h\"\n \n #define PERCENT(x,y) ((float)(x) * 100.0 / (float)(y))\n \n@@ -2492,19 +2493,19 @@ pass_build_ssa::execute (function *fun)\n     }\n \n   /* Initialize SSA_NAME_POINTS_TO_READONLY_MEMORY.  */\n-  tree fnspec = lookup_attribute (\"fn spec\",\n-\t\t\t\t  TYPE_ATTRIBUTES (TREE_TYPE (fun->decl)));\n-  if (fnspec)\n+  tree fnspec_tree\n+\t = lookup_attribute (\"fn spec\",\n+\t\t\t     TYPE_ATTRIBUTES (TREE_TYPE (fun->decl)));\n+  if (fnspec_tree)\n     {\n-      fnspec = TREE_VALUE (TREE_VALUE (fnspec));\n-      unsigned i = 1;\n+      attr_fnspec fnspec (TREE_VALUE (TREE_VALUE (fnspec_tree)));\n+      unsigned i = 0;\n       for (tree arg = DECL_ARGUMENTS (cfun->decl);\n \t   arg; arg = DECL_CHAIN (arg), ++i)\n \t{\n-\t  if (i >= (unsigned) TREE_STRING_LENGTH (fnspec))\n-\t    break;\n-\t  if (TREE_STRING_POINTER (fnspec)[i]  == 'R'\n-\t      || TREE_STRING_POINTER (fnspec)[i] == 'r')\n+\t  if (!fnspec.arg_specified_p (i))\n+\t   break;\n+\t  if (fnspec.arg_readonly_p (i))\n \t    {\n \t      tree name = ssa_default_def (fun, arg);\n \t      if (name)"}, {"sha": "52aeaebf47663e3502afa2230f35a2c470f45f37", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05d39f0de9ee0455d7b2b60f314f4231bc9a87c1/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05d39f0de9ee0455d7b2b60f314f4231bc9a87c1/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=05d39f0de9ee0455d7b2b60f314f4231bc9a87c1", "patch": "@@ -40,6 +40,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"varasm.h\"\n #include \"ipa-modref-tree.h\"\n #include \"ipa-modref.h\"\n+#include \"attr-fnspec.h\"\n+#include \"errors.h\"\n \n /* Broad overview of how alias analysis on gimple works:\n \n@@ -4012,3 +4014,42 @@ walk_aliased_vdefs (ao_ref *ref, tree vdef,\n   return ret;\n }\n \n+/* Verify validity of the fnspec string.\n+   See attr-fnspec.h for details.  */\n+\n+void\n+attr_fnspec::verify ()\n+{\n+  /* FIXME: Fortran trans-decl.c contains multiple wrong fnspec strings.\n+     re-enable verification after these are fixed.  */\n+  return;\n+  bool err = false;\n+\n+  /* Check return value specifier.  */\n+  if (len < return_desc_size)\n+    err = true;\n+  else if ((str[0] < '1' || str[0] > '4')\n+\t   && str[0] != '.' && str[0] != 'm')\n+    err = true;\n+\n+  /* Now check all parameters.  */\n+  for (unsigned int i = 0; arg_specified_p (i); i++)\n+    {\n+      unsigned int idx = arg_idx (i);\n+      switch (str[idx])\n+\t{\n+\t  case 'x':\n+\t  case 'X':\n+\t  case 'r':\n+\t  case 'R':\n+\t  case 'w':\n+\t  case 'W':\n+\t  case '.':\n+\t    break;\n+\t  default:\n+\t    err = true;\n+\t}\n+    }\n+  if (err)\n+    internal_error (\"invalid fn spec attribute %s\", str);\n+}"}]}