{"sha": "54ebec35abec09a24b47b997172622ca0d8e2318", "node_id": "C_kwDOANBUbNoAKDU0ZWJlYzM1YWJlYzA5YTI0YjQ3Yjk5NzE3MjYyMmNhMGQ4ZTIzMTg", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-11-29T13:49:59Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-12-01T16:11:12Z"}, "message": "path solver: Use only one ssa_global_cache.\n\nWe're using a temporary range cache while computing ranges for PHIs to\nmake sure the real cache doesn't get set until all PHIs are computed.\nWith the ltrans beast in LTO mode this causes undue overhead.\n\nSince we already have a bitmap to indicate whether there's a cache\nentry, we can avoid the extra cache object by clearing it while PHIs\nare being calculated.\n\ngcc/ChangeLog:\n\n\tPR tree-optimization/103409\n\t* gimple-range-path.cc (path_range_query::compute_ranges_in_phis):\n\tDo all the work with just one ssa_global_cache.\n\t* gimple-range-path.h: Remove m_tmp_phi_cache.", "tree": {"sha": "a0a6cf09e652417af03fab1fd85e7d5a9d164dce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a0a6cf09e652417af03fab1fd85e7d5a9d164dce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/54ebec35abec09a24b47b997172622ca0d8e2318", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54ebec35abec09a24b47b997172622ca0d8e2318", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54ebec35abec09a24b47b997172622ca0d8e2318", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54ebec35abec09a24b47b997172622ca0d8e2318/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "056551414a328b427c4bf4955b9a3832f344685c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/056551414a328b427c4bf4955b9a3832f344685c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/056551414a328b427c4bf4955b9a3832f344685c"}], "stats": {"total": 25, "additions": 11, "deletions": 14}, "files": [{"sha": "15ef72fd4925a464c6c3f177c491711831a16005", "filename": "gcc/gimple-range-path.cc", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54ebec35abec09a24b47b997172622ca0d8e2318/gcc%2Fgimple-range-path.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54ebec35abec09a24b47b997172622ca0d8e2318/gcc%2Fgimple-range-path.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-path.cc?ref=54ebec35abec09a24b47b997172622ca0d8e2318", "patch": "@@ -375,30 +375,29 @@ void\n path_range_query::compute_ranges_in_phis (basic_block bb)\n {\n   int_range_max r;\n-  gphi_iterator iter;\n+  auto_bitmap phi_set;\n \n   // PHIs must be resolved simultaneously on entry to the block\n   // because any dependencies must be satistifed with values on entry.\n   // Thus, we calculate all PHIs first, and then update the cache at\n   // the end.\n \n-  m_tmp_phi_cache.clear ();\n-  for (iter = gsi_start_phis (bb); !gsi_end_p (iter); gsi_next (&iter))\n+  for (auto iter = gsi_start_phis (bb); !gsi_end_p (iter); gsi_next (&iter))\n     {\n       gphi *phi = iter.phi ();\n       tree name = gimple_phi_result (phi);\n \n       if (import_p (name) && range_defined_in_block (r, name, bb))\n-\tm_tmp_phi_cache.set_global_range (name, r);\n-    }\n-  for (iter = gsi_start_phis (bb); !gsi_end_p (iter); gsi_next (&iter))\n-    {\n-      gphi *phi = iter.phi ();\n-      tree name = gimple_phi_result (phi);\n-\n-      if (m_tmp_phi_cache.get_global_range (r, name))\n-\tset_cache (r, name);\n+\t{\n+\t  unsigned v = SSA_NAME_VERSION (name);\n+\t  set_cache (r, name);\n+\t  bitmap_set_bit (phi_set, v);\n+\t  // Pretend we don't have a cache entry for this name until\n+\t  // we're done with all PHIs.\n+\t  bitmap_clear_bit (m_has_cache_entry, v);\n+\t}\n     }\n+  bitmap_ior_into (m_has_cache_entry, phi_set);\n }\n \n // Compute ranges defined in the current block, or exported to the"}, {"sha": "77c92c07bc130a56c06d01bba565a2ed644fdb62", "filename": "gcc/gimple-range-path.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54ebec35abec09a24b47b997172622ca0d8e2318/gcc%2Fgimple-range-path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54ebec35abec09a24b47b997172622ca0d8e2318/gcc%2Fgimple-range-path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-path.h?ref=54ebec35abec09a24b47b997172622ca0d8e2318", "patch": "@@ -82,8 +82,6 @@ class path_range_query : public range_query\n   // Range cache for SSA names.\n   ssa_global_cache *m_cache;\n \n-  ssa_global_cache m_tmp_phi_cache;\n-\n   // Set for each SSA that has an active entry in the cache.\n   bitmap m_has_cache_entry;\n "}]}