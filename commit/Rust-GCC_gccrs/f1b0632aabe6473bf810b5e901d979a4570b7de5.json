{"sha": "f1b0632aabe6473bf810b5e901d979a4570b7de5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjFiMDYzMmFhYmU2NDczYmY4MTBiNWU5MDFkOTc5YTQ1NzBiN2RlNQ==", "commit": {"author": {"name": "Olivier Hainque", "email": "hainque@adacore.com", "date": "2017-03-10T11:16:21Z"}, "committer": {"name": "Olivier Hainque", "email": "hainque@gcc.gnu.org", "date": "2017-03-10T11:16:21Z"}, "message": "tree-switch-conversion (array_value_type): Start by resetting candidate type to it's main variant.\n\n2017-03-10  Olivier Hainque  <hainque@adacore.com>\n\n\t* tree-switch-conversion (array_value_type): Start by resetting\n\tcandidate type to it's main variant.\n\n\ttestsuite/\n\t* gnat.dg/opt64.adb: New test.\n\t* gnat.dg/opt64_pkg.ads: New helper.\n\t* gnat.dg/opt64_pkg.adb: New helper.\n\nFrom-SVN: r246024", "tree": {"sha": "288a78ad82886d01310221ae6121bb0e46d117d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/288a78ad82886d01310221ae6121bb0e46d117d9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f1b0632aabe6473bf810b5e901d979a4570b7de5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1b0632aabe6473bf810b5e901d979a4570b7de5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1b0632aabe6473bf810b5e901d979a4570b7de5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1b0632aabe6473bf810b5e901d979a4570b7de5/comments", "author": {"login": "hainque", "id": 18735142, "node_id": "MDQ6VXNlcjE4NzM1MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/18735142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hainque", "html_url": "https://github.com/hainque", "followers_url": "https://api.github.com/users/hainque/followers", "following_url": "https://api.github.com/users/hainque/following{/other_user}", "gists_url": "https://api.github.com/users/hainque/gists{/gist_id}", "starred_url": "https://api.github.com/users/hainque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hainque/subscriptions", "organizations_url": "https://api.github.com/users/hainque/orgs", "repos_url": "https://api.github.com/users/hainque/repos", "events_url": "https://api.github.com/users/hainque/events{/privacy}", "received_events_url": "https://api.github.com/users/hainque/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2d9dd4fb867bffd009ebc85896dceb932559d90a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d9dd4fb867bffd009ebc85896dceb932559d90a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d9dd4fb867bffd009ebc85896dceb932559d90a"}], "stats": {"total": 69, "additions": 66, "deletions": 3}, "files": [{"sha": "5050ca8d822c4c3c6303197ab0c572baa54355e0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1b0632aabe6473bf810b5e901d979a4570b7de5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1b0632aabe6473bf810b5e901d979a4570b7de5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f1b0632aabe6473bf810b5e901d979a4570b7de5", "patch": "@@ -1,3 +1,8 @@\n+2017-03-10  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* tree-switch-conversion (array_value_type): Start by resetting\n+\tcandidate type to it's main variant.\n+\n 2017-03-10  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR rtl-optimization/79909"}, {"sha": "b17299b9400a26e8c0be9f792a5a9183cf0a7ba5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1b0632aabe6473bf810b5e901d979a4570b7de5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1b0632aabe6473bf810b5e901d979a4570b7de5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f1b0632aabe6473bf810b5e901d979a4570b7de5", "patch": "@@ -1,3 +1,9 @@\n+2017-03-10  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* gnat.dg/opt64.adb: New test.\n+\t* gnat.dg/opt64_pkg.ads: New helper.\n+\t* gnat.dg/opt64_pkg.adb: New helper.\n+\n 2017-03-10  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR rtl-optimization/79909"}, {"sha": "6d287d301a13b4d78c5aa3a05e5b47c82013a2be", "filename": "gcc/testsuite/gnat.dg/opt64.adb", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1b0632aabe6473bf810b5e901d979a4570b7de5/gcc%2Ftestsuite%2Fgnat.dg%2Fopt64.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1b0632aabe6473bf810b5e901d979a4570b7de5/gcc%2Ftestsuite%2Fgnat.dg%2Fopt64.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fopt64.adb?ref=f1b0632aabe6473bf810b5e901d979a4570b7de5", "patch": "@@ -0,0 +1,25 @@\n+-- { dg-do run }\n+-- { dg-options \"-O2\" }\n+\n+-- The issue which prompted the test is a compilation failure. Might\n+-- as well verify that the generated code performs as expected.\n+\n+with opt64_pkg; use opt64_pkg;\n+\n+procedure opt64 is\n+  procedure assert (T : boolean) is\n+  begin\n+    if not T then\n+      raise program_error;\n+    end if;\n+  end;\n+begin\n+  Encode (1);\n+  assert (last_hash = \"1\");\n+  Encode (2);\n+  assert (last_hash = \"2\");\n+  Encode (3);\n+  assert (last_hash = \"3\");\n+  Encode (6);\n+  assert (last_hash = \"?\");\n+end;"}, {"sha": "5235e73b88af366c38f25e1e5ab85b7ef48b9f40", "filename": "gcc/testsuite/gnat.dg/opt64_pkg.adb", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1b0632aabe6473bf810b5e901d979a4570b7de5/gcc%2Ftestsuite%2Fgnat.dg%2Fopt64_pkg.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1b0632aabe6473bf810b5e901d979a4570b7de5/gcc%2Ftestsuite%2Fgnat.dg%2Fopt64_pkg.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fopt64_pkg.adb?ref=f1b0632aabe6473bf810b5e901d979a4570b7de5", "patch": "@@ -0,0 +1,14 @@\n+package body Opt64_PKG is\n+   \n+   procedure Encode (X : Integer) is\n+      result : Hash;\n+   begin\n+      case X is\n+         when 1 => result := \"1\";\n+         when 2 => result := \"2\";\n+         when 3 => result := \"3\";\n+         when others => Result := \"?\";\n+      end case;     \n+      Last_Hash := Result;\n+   end;\n+end;"}, {"sha": "e4b09fcc0269985ee326dd92d7f95f303745a1d5", "filename": "gcc/testsuite/gnat.dg/opt64_pkg.ads", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1b0632aabe6473bf810b5e901d979a4570b7de5/gcc%2Ftestsuite%2Fgnat.dg%2Fopt64_pkg.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1b0632aabe6473bf810b5e901d979a4570b7de5/gcc%2Ftestsuite%2Fgnat.dg%2Fopt64_pkg.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fopt64_pkg.ads?ref=f1b0632aabe6473bf810b5e901d979a4570b7de5", "patch": "@@ -0,0 +1,6 @@\n+package Opt64_PKG is\n+   type Hash is new string (1 .. 1);   \n+   Last_Hash : Hash;\n+     \n+   procedure Encode (X : Integer);\n+end;"}, {"sha": "1ccb4bdba1aa0068636481a08399691444269f25", "filename": "gcc/tree-switch-conversion.c", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1b0632aabe6473bf810b5e901d979a4570b7de5/gcc%2Ftree-switch-conversion.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1b0632aabe6473bf810b5e901d979a4570b7de5/gcc%2Ftree-switch-conversion.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-switch-conversion.c?ref=f1b0632aabe6473bf810b5e901d979a4570b7de5", "patch": "@@ -935,9 +935,9 @@ constructor_contains_same_values_p (vec<constructor_elt, va_gc> *vec)\n   return prev;\n }\n \n-/* Return type which should be used for array elements, either TYPE,\n-   or for integral type some smaller integral type that can still hold\n-   all the constants.  */\n+/* Return type which should be used for array elements, either TYPE's\n+   main variant or, for integral types, some smaller integral type\n+   that can still hold all the constants.  */\n \n static tree\n array_value_type (gswitch *swtch, tree type, int num,\n@@ -949,6 +949,13 @@ array_value_type (gswitch *swtch, tree type, int num,\n   int sign = 0;\n   tree smaller_type;\n \n+  /* Types with alignments greater than their size can reach here, e.g. out of\n+     SRA.  We couldn't use these as an array component type so get back to the\n+     main variant first, which, for our purposes, is fine for other types as\n+     well.  */\n+\n+  type = TYPE_MAIN_VARIANT (type);\n+\n   if (!INTEGRAL_TYPE_P (type))\n     return type;\n "}]}