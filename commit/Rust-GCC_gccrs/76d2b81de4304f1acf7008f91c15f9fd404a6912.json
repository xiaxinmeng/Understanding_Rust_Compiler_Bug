{"sha": "76d2b81de4304f1acf7008f91c15f9fd404a6912", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzZkMmI4MWRlNDMwNGYxYWNmNzAwOGY5MWMxNWY5ZmQ0MDRhNjkxMg==", "commit": {"author": {"name": "Dale Johannesen", "email": "dalej@apple.com", "date": "2004-06-22T18:12:37Z"}, "committer": {"name": "Dale Johannesen", "email": "dalej@gcc.gnu.org", "date": "2004-06-22T18:12:37Z"}, "message": "rs6000.c (legitimate_offset_address_p): Make global, rename rs6000_legitimate_offset_address_p.\n\n\n2004-06-22  Dale Johannesen  <dalej@apple.com>\n\n\t* config/rs6000/rs6000.c (legitimate_offset_address_p): Make\n\tglobal, rename rs6000_legitimate_offset_address_p.\n\t(rs6000_legitimate_address_p): Adjust calls to it.\n\t(lmw_operation): Ditto.\n\t(stmw_operation): Ditto.\n\t* config/rs6000/rs6000-protos.h: Declare it.\n\t* config/rs6000/rs6000.md (*movdf_hardfloat32): Use it\n\tinstead of offsettable_memref_p.\n\n2004-06-22  Dale Johannesen  <dalej@apple.com>\n\n\t* config/rs6000/rs6000.c (rs6000_legitimate_address): Disallow\n\t[reg+reg] mode for TFmode memory accesses.\n\t(rs6000_eliminate_indexed_memrefs): New.\n\t(rs6000_emit_move): Call preceding for TImode and TFmode.\n\nFrom-SVN: r83504", "tree": {"sha": "27c0925d36248e78b8c8f63f83107797326de225", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/27c0925d36248e78b8c8f63f83107797326de225"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/76d2b81de4304f1acf7008f91c15f9fd404a6912", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76d2b81de4304f1acf7008f91c15f9fd404a6912", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76d2b81de4304f1acf7008f91c15f9fd404a6912", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76d2b81de4304f1acf7008f91c15f9fd404a6912/comments", "author": null, "committer": null, "parents": [{"sha": "e9cb3dacee78c2e173e94f11a6c68ba66c8f895f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9cb3dacee78c2e173e94f11a6c68ba66c8f895f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9cb3dacee78c2e173e94f11a6c68ba66c8f895f"}], "stats": {"total": 97, "additions": 67, "deletions": 30}, "files": [{"sha": "21f780efba6d09e7f3819dee322489844d276a85", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76d2b81de4304f1acf7008f91c15f9fd404a6912/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76d2b81de4304f1acf7008f91c15f9fd404a6912/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=76d2b81de4304f1acf7008f91c15f9fd404a6912", "patch": "@@ -1,3 +1,21 @@\n+2004-06-22  Dale Johannesen  <dalej@apple.com>\n+\n+\t* config/rs6000/rs6000.c (legitimate_offset_address_p): Make\n+\tglobal, rename rs6000_legitimate_offset_address_p.\n+\t(rs6000_legitimate_address_p): Adjust calls to it.\n+\t(lmw_operation): Ditto.\n+\t(stmw_operation): Ditto.\n+\t* config/rs6000/rs6000-protos.h: Declare it.\n+\t* config/rs6000/rs6000.md (*movdf_hardfloat32): Use it\n+\tinstead of offsettable_memref_p.\n+\n+2004-06-22  Dale Johannesen  <dalej@apple.com>\n+\n+\t* config/rs6000/rs6000.c (rs6000_legitimate_address): Disallow\n+\t[reg+reg] mode for TFmode memory accesses.\n+\t(rs6000_eliminate_indexed_memrefs): New.\n+\t(rs6000_emit_move): Call preceding for TImode and TFmode.\n+\n 2004-06-22  Paolo Bonzini  <bonzini@gnu.org>\n \n \t* tree-cfg.c (pass_warn_function_return): It needs"}, {"sha": "d626d682f328f5babd7fa4da2d91397648f2818d", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76d2b81de4304f1acf7008f91c15f9fd404a6912/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76d2b81de4304f1acf7008f91c15f9fd404a6912/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=76d2b81de4304f1acf7008f91c15f9fd404a6912", "patch": "@@ -139,6 +139,7 @@ extern bool rs6000_mode_dependent_address (rtx);\n extern rtx rs6000_return_addr (int, rtx);\n extern void rs6000_output_symbol_ref (FILE*, rtx);\n extern HOST_WIDE_INT rs6000_initial_elimination_offset (int, int);\n+extern bool rs6000_legitimate_offset_address_p (enum machine_mode, rtx, int);\n \n extern rtx rs6000_machopic_legitimize_pic_address (rtx orig, \n                             enum machine_mode mode, rtx reg);"}, {"sha": "391ef27b485345f041c9eb9b6ed4c031ea925007", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 36, "deletions": 22, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76d2b81de4304f1acf7008f91c15f9fd404a6912/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76d2b81de4304f1acf7008f91c15f9fd404a6912/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=76d2b81de4304f1acf7008f91c15f9fd404a6912", "patch": "@@ -303,7 +303,6 @@ static int constant_pool_expr_1 (rtx, int *, int *);\n static bool constant_pool_expr_p (rtx);\n static bool toc_relative_expr_p (rtx);\n static bool legitimate_small_data_p (enum machine_mode, rtx);\n-static bool legitimate_offset_address_p (enum machine_mode, rtx, int);\n static bool legitimate_indexed_address_p (rtx, int);\n static bool legitimate_indirect_address_p (rtx, int);\n static bool macho_lo_sum_memory_operand (rtx x, enum machine_mode mode);\n@@ -316,6 +315,7 @@ static void rs6000_assemble_visibility (tree, int);\n static int rs6000_ra_ever_killed (void);\n static tree rs6000_handle_longcall_attribute (tree *, tree, tree, int, bool *);\n static tree rs6000_handle_altivec_attribute (tree *, tree, tree, int, bool *);\n+static void rs6000_eliminate_indexed_memrefs (rtx operands[2]);\n static const char *rs6000_mangle_fundamental_type (tree);\n extern const struct attribute_spec rs6000_attribute_table[];\n static void rs6000_set_default_type_attributes (tree);\n@@ -2648,8 +2648,8 @@ legitimate_small_data_p (enum machine_mode mode, rtx x)\n \t  && small_data_operand (x, mode));\n }\n \n-static bool\n-legitimate_offset_address_p (enum machine_mode mode, rtx x, int strict)\n+bool\n+rs6000_legitimate_offset_address_p (enum machine_mode mode, rtx x, int strict)\n {\n   unsigned HOST_WIDE_INT offset, extra;\n \n@@ -3328,7 +3328,7 @@ rs6000_legitimize_reload_address (rtx x, enum machine_mode mode,\n    word aligned.\n \n    For modes spanning multiple registers (DFmode in 32-bit GPRs,\n-   32-bit DImode, TImode), indexed addressing cannot be used because\n+   32-bit DImode, TImode, TFmode), indexed addressing cannot be used because\n    adjacent memory cells are accessed by adding word-sized offsets\n    during assembly output.  */\n int\n@@ -3356,9 +3356,10 @@ rs6000_legitimate_address (enum machine_mode mode, rtx x, int reg_ok_strict)\n          || XEXP (x, 0) == arg_pointer_rtx)\n       && GET_CODE (XEXP (x, 1)) == CONST_INT)\n     return 1;\n-  if (legitimate_offset_address_p (mode, x, reg_ok_strict))\n+  if (rs6000_legitimate_offset_address_p (mode, x, reg_ok_strict))\n     return 1;\n   if (mode != TImode\n+      && mode != TFmode\n       && ((TARGET_HARD_FLOAT && TARGET_FPRS)\n \t  || TARGET_POWERPC64\n \t  || (mode != DFmode && mode != TFmode))\n@@ -3653,6 +3654,27 @@ rs6000_emit_set_long_const (rtx dest, HOST_WIDE_INT c1, HOST_WIDE_INT c2)\n   return dest;\n }\n \n+/* Helper for the following.  Get rid of [r+r] memory refs\n+   in cases where it won't work (TImode, TFmode).  */\n+\n+static void\n+rs6000_eliminate_indexed_memrefs (rtx operands[2])\n+{\n+  if (GET_CODE (operands[0]) == MEM\n+      && GET_CODE (XEXP (operands[0], 0)) != REG\n+      && ! reload_in_progress)\n+    operands[0]\n+      = replace_equiv_address (operands[0],\n+\t\t\t       copy_addr_to_reg (XEXP (operands[0], 0)));\n+\n+  if (GET_CODE (operands[1]) == MEM\n+      && GET_CODE (XEXP (operands[1], 0)) != REG\n+      && ! reload_in_progress)\n+    operands[1]\n+      = replace_equiv_address (operands[1],\n+\t\t\t       copy_addr_to_reg (XEXP (operands[1], 0)));\n+}\n+\n /* Emit a move from SOURCE to DEST in mode MODE.  */\n void\n rs6000_emit_move (rtx dest, rtx source, enum machine_mode mode)\n@@ -3790,6 +3812,9 @@ rs6000_emit_move (rtx dest, rtx source, enum machine_mode mode)\n       break;\n \n     case TFmode:\n+      rs6000_eliminate_indexed_memrefs (operands);\n+      /* fall through */\n+\n     case DFmode:\n     case SFmode:\n       if (CONSTANT_P (operands[1]) \n@@ -3972,19 +3997,8 @@ rs6000_emit_move (rtx dest, rtx source, enum machine_mode mode)\n       break;\n \n     case TImode:\n-      if (GET_CODE (operands[0]) == MEM\n-\t  && GET_CODE (XEXP (operands[0], 0)) != REG\n-\t  && ! reload_in_progress)\n-\toperands[0]\n-\t  = replace_equiv_address (operands[0],\n-\t\t\t\t   copy_addr_to_reg (XEXP (operands[0], 0)));\n-\n-      if (GET_CODE (operands[1]) == MEM\n-\t  && GET_CODE (XEXP (operands[1], 0)) != REG\n-\t  && ! reload_in_progress)\n-\toperands[1]\n-\t  = replace_equiv_address (operands[1],\n-\t\t\t\t   copy_addr_to_reg (XEXP (operands[1], 0)));\n+      rs6000_eliminate_indexed_memrefs (operands);\n+\n       if (TARGET_POWER)\n \t{\n \t  emit_insn (gen_rtx_PARALLEL (VOIDmode,\n@@ -8383,7 +8397,7 @@ lmw_operation (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n       if (base_regno == 0)\n \treturn 0;\n     }\n-  else if (legitimate_offset_address_p (SImode, src_addr, 0))\n+  else if (rs6000_legitimate_offset_address_p (SImode, src_addr, 0))\n     {\n       offset = INTVAL (XEXP (src_addr, 1));\n       base_regno = REGNO (XEXP (src_addr, 0));\n@@ -8411,7 +8425,7 @@ lmw_operation (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n \t  newoffset = 0;\n \t  addr_reg = newaddr;\n \t}\n-      else if (legitimate_offset_address_p (SImode, newaddr, 0))\n+      else if (rs6000_legitimate_offset_address_p (SImode, newaddr, 0))\n \t{\n \t  addr_reg = XEXP (newaddr, 0);\n \t  newoffset = INTVAL (XEXP (newaddr, 1));\n@@ -8459,7 +8473,7 @@ stmw_operation (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n       if (base_regno == 0)\n \treturn 0;\n     }\n-  else if (legitimate_offset_address_p (SImode, dest_addr, 0))\n+  else if (rs6000_legitimate_offset_address_p (SImode, dest_addr, 0))\n     {\n       offset = INTVAL (XEXP (dest_addr, 1));\n       base_regno = REGNO (XEXP (dest_addr, 0));\n@@ -8487,7 +8501,7 @@ stmw_operation (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n \t  newoffset = 0;\n \t  addr_reg = newaddr;\n \t}\n-      else if (legitimate_offset_address_p (SImode, newaddr, 0))\n+      else if (rs6000_legitimate_offset_address_p (SImode, newaddr, 0))\n \t{\n \t  addr_reg = XEXP (newaddr, 0);\n \t  newoffset = INTVAL (XEXP (newaddr, 1));"}, {"sha": "86b93d3dbd09a7c09a87fbbeb4c5efc948bd9f04", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76d2b81de4304f1acf7008f91c15f9fd404a6912/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76d2b81de4304f1acf7008f91c15f9fd404a6912/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=76d2b81de4304f1acf7008f91c15f9fd404a6912", "patch": "@@ -8051,11 +8051,13 @@\n       else\n \treturn \\\"mr %0,%1\\;mr %L0,%L1\\\";\n     case 1:\n-      if (offsettable_memref_p (operands[1])\n-\t  || (GET_CODE (operands[1]) == MEM\n-\t      && (GET_CODE (XEXP (operands[1], 0)) == LO_SUM\n+      if (GET_CODE (operands[1]) == MEM\n+\t  && (rs6000_legitimate_offset_address_p (DFmode, XEXP (operands[1], 0),\n+\t\t\treload_completed || reload_in_progress)\n+\t      || GET_CODE (XEXP (operands[1], 0)) == REG\n+\t      || GET_CODE (XEXP (operands[1], 0)) == LO_SUM\n \t\t  || GET_CODE (XEXP (operands[1], 0)) == PRE_INC\n-\t\t  || GET_CODE (XEXP (operands[1], 0)) == PRE_DEC)))\n+\t      || GET_CODE (XEXP (operands[1], 0)) == PRE_DEC))\n \t{\n \t  /* If the low-address word is used in the address, we must load\n \t     it last.  Otherwise, load it first.  Note that we cannot have\n@@ -8091,11 +8093,13 @@\n \t    }\n \t}\n     case 2:\n-      if (offsettable_memref_p (operands[0])\n-\t  || (GET_CODE (operands[0]) == MEM\n-\t      && (GET_CODE (XEXP (operands[0], 0)) == LO_SUM\n+      if (GET_CODE (operands[0]) == MEM\n+          && (rs6000_legitimate_offset_address_p (DFmode, XEXP (operands[0], 0),\n+\t\t    reload_completed || reload_in_progress)\n+\t      || GET_CODE (XEXP (operands[0], 0)) == REG\n+    \t      || GET_CODE (XEXP (operands[0], 0)) == LO_SUM\n \t\t  || GET_CODE (XEXP (operands[0], 0)) == PRE_INC\n-\t\t  || GET_CODE (XEXP (operands[0], 0)) == PRE_DEC)))\n+\t      || GET_CODE (XEXP (operands[0], 0)) == PRE_DEC))\n \treturn \\\"{st%U0|stw%U0} %1,%0\\;{st|stw} %L1,%L0\\\";\n       else\n \t{"}]}