{"sha": "967947ed6b3b9e1b3723b2587feccb4dac47715e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTY3OTQ3ZWQ2YjNiOWUxYjM3MjNiMjU4N2ZlY2NiNGRhYzQ3NzE1ZQ==", "commit": {"author": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2017-12-05T12:12:22Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2017-12-05T12:12:22Z"}, "message": "[multiple changes]\n\n2017-12-05  Olivier Hainque  <hainque@adacore.com>\n\n\t* s-dwalin.adb (Read_And_Execute_Isn): Adjust test checking for the end\n\tof section. Add comments explaining the rationale of the computation.\n\n2017-12-05  Bob Duff  <duff@adacore.com>\n\n\t* exp_ch11.adb: Minor refactoring.\n\n2017-12-05  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* debug.adb: Add debug switches d_a, d_e, and d_p, along with\n\tdocumentation.\n\t(Set_Underscored_Debug_Flag): New routine.\n\t* debug.ads: Add the flags for all underscore switches.\n\t(Set_Underscored_Debug_Flag): New routine.\n\t* einfo.adb: Flag303 is now Suppress_Elaboration_Warnings.\n\t(Suppress_Elaboration_Warnings): New routine.\n\t(Set_Suppress_Elaboration_Warnings): New routine.\n\t(Write_Entity_Flags): Add output for Suppress_Elaboration_Warnings.\n\t* einfo.ads: Add new flag Suppress_Elaboration_Warnings.\n\t(Suppress_Elaboration_Warnings): New routine along with pragma Inline.\n\t(Set_Suppress_Elaboration_Warnings): New routine along with pragma\n\tInline.\n\t* exp_ch3.adb (Build_Init_Procedure): Restore the behavior of the\n\tlegacy elaboration model.\n\t(Default_Initialize_Object): Restore the behavior of the legacy\n\telaboration model.\n\t* exp_ch9.adb: Add with and use clause for Sem_Elab.\n\t(Build_Task_Activation_Call): Restore the behavior of the legacy\n\telaboration model.\n\t* frontend.adb (Frontend): Restore the behavior of the legacy\n\telaboration model.\n\t* opt.ads: Add new flags Legacy_Elaboration_Checks and\n\tRelaxed_Elaboration_Checks, along with documentation.\n\t* sem_attr.adb (Analyze_Access_Attribute): Restore the behavior of the\n\tlegacy elaboration model.\n\t* sem_ch5.adb (Analyze_Assignment): Restore the behavior of the legacy\n\telaboration model.\n\t* sem_ch7.adb (Analyze_Package_Declaration): Restore the behavior of\n\tthe legacy elaboration model.\n\t* sem_ch8.adb (Attribute_Renaming): Restore the behavior of the legacy\n\telaboration model.\n\t* sem_ch12.adb (Analyze_Instance_And_Renamings): Restore the behavior\n\tof the legacy elaboration model.\n\t(Analyze_Package_Instantiation): Restore the behavior of the legacy\n\telaboration model.\n\t(Analyze_Subprogram_Instantiation): Restore the behavior of the legacy\n\telaboration model.\n\t* sem_elab.adb: Update the documentation of the Processing phase.\n\tUpdate the documentation on elaboration-related compilation\n\tswitches.  Update the documentation on adding a new target.  Add\n\tProcessing_Attributes which represent the state of the Processing\n\tphase.  Resurrect the previous elaboration model as \"legacy elaboration\n\tmodel\".\n\t(Build_Call_Marker): This routine does not function when the legacy\n\telaboration model is in effect. Do not consider entry calls and requeue\n\tstatements when debug flag d_e is in effect. Do not consider calls to\n\tsubprograms which verify the runtime semantics of certain assertion\n\tpragmas when debug flag d_p is in effect.\n\t(Build_Variable_Reference_Marker): This routine does not function when\n\tthe legacy elaboration model is in effect.\n\t(Check_Elaboration_Scenarios): This routine does not function when the\n\tlegacy elaboration model is in effect.\n\t(Ensure_Prior_Elaboration): The various flags have now been replaced\n\twith a state. Do not generate implicit Elaborate[_All] pragmas when\n\ttheir creation has been suppressed.\n\t(Ensure_Prior_Elaboration_Static): The with clause is marked based on\n\tthe requested pragma, not on the nature of the scenario.\n\t(In_External_Context): Removed.\n\t(Is_Assertion_Pragma_Target): New routine.\n\t(Is_Potential_Scenario): Stop the traversal of a task body when\n\treaching an accept or select statement, and debug switch d_a is in\n\teffect.\n\t(Kill_Elaboration_Scenario): This routine does not function when the\n\tlegacy elaboration model is in effect.\n\t(Process_Activation_Generic): The various flags have now been replaced\n\twith a state.\n\t(Process_Conditional_ABE): The various flags have now been replaced\n\twith a state.\n\t(Process_Conditional_ABE_Access): The various flags have now been\n\treplaced with a state.\n\t(Process_Conditional_ABE_Activation_Impl): The various flags have now\n\tbeen replaced with a state. Do not process an activation call which\n\tactivates a task whose type is defined in an external instance, and\n\tdebug switch dL is in effect. Suppress the generation of implicit\n\tElaborate[_All] pragmas once a conditional ABE check has been\n\tinstalled.\n\t(Process_Conditional_ABE_Call): The various flags have now been\n\treplaced with a state. Do not process a call which invokes a subprogram\n\tdefined in an external instance, and debug switch dL is in effect.\n\t(Process_Conditional_ABE_Call_Ada): The various flags have now been\n\treplaced with a state. Suppress the generation of implicit\n\tElaborate[_All] pragmas once a conditional ABE check has been\n\tinstalled.\n\t(Process_Conditional_ABE_Call_SPARK): The various flags have now been\n\treplaced with a state.\n\t(Process_Conditional_ABE_Instantiation): The various flags have now\n\tbeen replaced with a state.\n\t(Process_Conditional_ABE_Instantiation_Ada): The various flags have now\n\tbeen replaced with a state. Suppress the generation of implicit\n\tElaborate[_All] pragmas once a conditional ABE check has been\n\tinstalled.\n\t(Process_Conditional_ABE_Instantiation_SPARK): The various flags have\n\tnow been replaced with a state.\n\t(Process_Guaranteed_ABE_Activation_Impl): The various flags have now\n\tbeen replaced with a state.\n\t(Process_Single_Activation): The various flags have now been replaced\n\twith a state.\n\t(Record_Elaboration_Scenario): This routine does not function when the\n\tlegacy elaboration model is in effect.\n\t(Traverse_Body): The various flags have now been replaced with a state.\n\t* sem_elab.ads: Resurrect the pre-18.x elaboration model as \"legacy\n\telaboration model\".\n\t* sem_prag.adb (Analyze_Pragma): Restore the behavior of the legacy\n\telaboration model.\n\t* sem_res.adb (Resolve_Call): Restore the behavior of the legacy\n\telaboration model.\n\t(Resolve_Entity_Name): Restore the behavior of the legacy elaboration\n\tmodel.\n\t* sem_util.adb (Mark_Elaboration_Attributes): This routine does not\n\tfunction when the legacy elaboration model is in effect.\n\t* sinfo.adb (Is_Known_Guaranteed_ABE): Update the assertion check.\n\t(No_Elaboration_Check): New routine.\n\t(Set_Is_Known_Guaranteed_ABE): Update the assertion check.\n\t(Set_No_Elaboration_Check): New routine.\n\t* sinfo.ads: Update the documentation of flag Is_Known_Guaranteed_ABE\n\talong with occurrences in nodes.  Add new flag No_Elaboration_Check\n\talong with occurrences in nodes.\n\t* switch-c.adb (Scan_Front_End_Switches): Add processing for debug\n\tswitches with underscores.  Add processing for switches -gnatH and\n\t-gnatJ.\n\t* usage.adb (Usage): Add output for switches -gnatH and -gnatJ.\n\t* doc/gnat_ugn/elaboration_order_handling_in_gnat.rst: Update the\n\tdocumentation to include the legacy and relaxed elaboration models.\n\t* gnat_ugn.texi:\u00a0Regenerate.\n\n2017-12-05  Arnaud Charlet  <charlet@adacore.com>\n\n\t* doc/gnat_ugn/platform_specific_information.rst: Minor edit.\n\tImprove doc on required packages for linux 32bits.\n\n2017-12-05  Doug Rupp  <rupp@adacore.com>\n\n\t* tracebak.c (ppc64-vx7): USE_GCC_UNWINDER for 64bit.\n\n2017-12-05  Javier Miranda  <miranda@adacore.com>\n\n\t* checks.adb (Generate_Range_Check): Force evaluation of the node in\n\tmore cases.  This patch was written to improve the code generated by\n\tthe CCG compiler but it is enabled for all targets since double\n\tevaluation is always a potential source of inefficiency.\n\n2017-12-05  Gary Dismukes  <dismukes@adacore.com>\n\n\t* doc/gnat_ugn/gnat_utility_programs.rst: Remove reference to obsolete\n\t-fdump-xref switch.\n\nFrom-SVN: r255412", "tree": {"sha": "fca443d4dc9d36a11449dda831a8b95f2b870dbe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fca443d4dc9d36a11449dda831a8b95f2b870dbe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/967947ed6b3b9e1b3723b2587feccb4dac47715e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/967947ed6b3b9e1b3723b2587feccb4dac47715e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/967947ed6b3b9e1b3723b2587feccb4dac47715e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/967947ed6b3b9e1b3723b2587feccb4dac47715e/comments", "author": null, "committer": null, "parents": [{"sha": "6cbd45e40605d0f77cdc4d31f5b80c1e3d656055", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cbd45e40605d0f77cdc4d31f5b80c1e3d656055", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6cbd45e40605d0f77cdc4d31f5b80c1e3d656055"}], "stats": {"total": 6769, "additions": 5689, "deletions": 1080}, "files": [{"sha": "3507a1fa3c270ca6cadb39dc996c8872a978d19f", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 158, "deletions": 0, "changes": 158, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/967947ed6b3b9e1b3723b2587feccb4dac47715e/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/967947ed6b3b9e1b3723b2587feccb4dac47715e/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=967947ed6b3b9e1b3723b2587feccb4dac47715e", "patch": "@@ -1,3 +1,161 @@\n+2017-12-05  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* s-dwalin.adb (Read_And_Execute_Isn): Adjust test checking for the end\n+\tof section. Add comments explaining the rationale of the computation.\n+\n+2017-12-05  Bob Duff  <duff@adacore.com>\n+\n+\t* exp_ch11.adb: Minor refactoring.\n+\n+2017-12-05  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* debug.adb: Add debug switches d_a, d_e, and d_p, along with\n+\tdocumentation.\n+\t(Set_Underscored_Debug_Flag): New routine.\n+\t* debug.ads: Add the flags for all underscore switches.\n+\t(Set_Underscored_Debug_Flag): New routine.\n+\t* einfo.adb: Flag303 is now Suppress_Elaboration_Warnings.\n+\t(Suppress_Elaboration_Warnings): New routine.\n+\t(Set_Suppress_Elaboration_Warnings): New routine.\n+\t(Write_Entity_Flags): Add output for Suppress_Elaboration_Warnings.\n+\t* einfo.ads: Add new flag Suppress_Elaboration_Warnings.\n+\t(Suppress_Elaboration_Warnings): New routine along with pragma Inline.\n+\t(Set_Suppress_Elaboration_Warnings): New routine along with pragma\n+\tInline.\n+\t* exp_ch3.adb (Build_Init_Procedure): Restore the behavior of the\n+\tlegacy elaboration model.\n+\t(Default_Initialize_Object): Restore the behavior of the legacy\n+\telaboration model.\n+\t* exp_ch9.adb: Add with and use clause for Sem_Elab.\n+\t(Build_Task_Activation_Call): Restore the behavior of the legacy\n+\telaboration model.\n+\t* frontend.adb (Frontend): Restore the behavior of the legacy\n+\telaboration model.\n+\t* opt.ads: Add new flags Legacy_Elaboration_Checks and\n+\tRelaxed_Elaboration_Checks, along with documentation.\n+\t* sem_attr.adb (Analyze_Access_Attribute): Restore the behavior of the\n+\tlegacy elaboration model.\n+\t* sem_ch5.adb (Analyze_Assignment): Restore the behavior of the legacy\n+\telaboration model.\n+\t* sem_ch7.adb (Analyze_Package_Declaration): Restore the behavior of\n+\tthe legacy elaboration model.\n+\t* sem_ch8.adb (Attribute_Renaming): Restore the behavior of the legacy\n+\telaboration model.\n+\t* sem_ch12.adb (Analyze_Instance_And_Renamings): Restore the behavior\n+\tof the legacy elaboration model.\n+\t(Analyze_Package_Instantiation): Restore the behavior of the legacy\n+\telaboration model.\n+\t(Analyze_Subprogram_Instantiation): Restore the behavior of the legacy\n+\telaboration model.\n+\t* sem_elab.adb: Update the documentation of the Processing phase.\n+\tUpdate the documentation on elaboration-related compilation\n+\tswitches.  Update the documentation on adding a new target.  Add\n+\tProcessing_Attributes which represent the state of the Processing\n+\tphase.  Resurrect the previous elaboration model as \"legacy elaboration\n+\tmodel\".\n+\t(Build_Call_Marker): This routine does not function when the legacy\n+\telaboration model is in effect. Do not consider entry calls and requeue\n+\tstatements when debug flag d_e is in effect. Do not consider calls to\n+\tsubprograms which verify the runtime semantics of certain assertion\n+\tpragmas when debug flag d_p is in effect.\n+\t(Build_Variable_Reference_Marker): This routine does not function when\n+\tthe legacy elaboration model is in effect.\n+\t(Check_Elaboration_Scenarios): This routine does not function when the\n+\tlegacy elaboration model is in effect.\n+\t(Ensure_Prior_Elaboration): The various flags have now been replaced\n+\twith a state. Do not generate implicit Elaborate[_All] pragmas when\n+\ttheir creation has been suppressed.\n+\t(Ensure_Prior_Elaboration_Static): The with clause is marked based on\n+\tthe requested pragma, not on the nature of the scenario.\n+\t(In_External_Context): Removed.\n+\t(Is_Assertion_Pragma_Target): New routine.\n+\t(Is_Potential_Scenario): Stop the traversal of a task body when\n+\treaching an accept or select statement, and debug switch d_a is in\n+\teffect.\n+\t(Kill_Elaboration_Scenario): This routine does not function when the\n+\tlegacy elaboration model is in effect.\n+\t(Process_Activation_Generic): The various flags have now been replaced\n+\twith a state.\n+\t(Process_Conditional_ABE): The various flags have now been replaced\n+\twith a state.\n+\t(Process_Conditional_ABE_Access): The various flags have now been\n+\treplaced with a state.\n+\t(Process_Conditional_ABE_Activation_Impl): The various flags have now\n+\tbeen replaced with a state. Do not process an activation call which\n+\tactivates a task whose type is defined in an external instance, and\n+\tdebug switch dL is in effect. Suppress the generation of implicit\n+\tElaborate[_All] pragmas once a conditional ABE check has been\n+\tinstalled.\n+\t(Process_Conditional_ABE_Call): The various flags have now been\n+\treplaced with a state. Do not process a call which invokes a subprogram\n+\tdefined in an external instance, and debug switch dL is in effect.\n+\t(Process_Conditional_ABE_Call_Ada): The various flags have now been\n+\treplaced with a state. Suppress the generation of implicit\n+\tElaborate[_All] pragmas once a conditional ABE check has been\n+\tinstalled.\n+\t(Process_Conditional_ABE_Call_SPARK): The various flags have now been\n+\treplaced with a state.\n+\t(Process_Conditional_ABE_Instantiation): The various flags have now\n+\tbeen replaced with a state.\n+\t(Process_Conditional_ABE_Instantiation_Ada): The various flags have now\n+\tbeen replaced with a state. Suppress the generation of implicit\n+\tElaborate[_All] pragmas once a conditional ABE check has been\n+\tinstalled.\n+\t(Process_Conditional_ABE_Instantiation_SPARK): The various flags have\n+\tnow been replaced with a state.\n+\t(Process_Guaranteed_ABE_Activation_Impl): The various flags have now\n+\tbeen replaced with a state.\n+\t(Process_Single_Activation): The various flags have now been replaced\n+\twith a state.\n+\t(Record_Elaboration_Scenario): This routine does not function when the\n+\tlegacy elaboration model is in effect.\n+\t(Traverse_Body): The various flags have now been replaced with a state.\n+\t* sem_elab.ads: Resurrect the pre-18.x elaboration model as \"legacy\n+\telaboration model\".\n+\t* sem_prag.adb (Analyze_Pragma): Restore the behavior of the legacy\n+\telaboration model.\n+\t* sem_res.adb (Resolve_Call): Restore the behavior of the legacy\n+\telaboration model.\n+\t(Resolve_Entity_Name): Restore the behavior of the legacy elaboration\n+\tmodel.\n+\t* sem_util.adb (Mark_Elaboration_Attributes): This routine does not\n+\tfunction when the legacy elaboration model is in effect.\n+\t* sinfo.adb (Is_Known_Guaranteed_ABE): Update the assertion check.\n+\t(No_Elaboration_Check): New routine.\n+\t(Set_Is_Known_Guaranteed_ABE): Update the assertion check.\n+\t(Set_No_Elaboration_Check): New routine.\n+\t* sinfo.ads: Update the documentation of flag Is_Known_Guaranteed_ABE\n+\talong with occurrences in nodes.  Add new flag No_Elaboration_Check\n+\talong with occurrences in nodes.\n+\t* switch-c.adb (Scan_Front_End_Switches): Add processing for debug\n+\tswitches with underscores.  Add processing for switches -gnatH and\n+\t-gnatJ.\n+\t* usage.adb (Usage): Add output for switches -gnatH and -gnatJ.\n+\t* doc/gnat_ugn/elaboration_order_handling_in_gnat.rst: Update the\n+\tdocumentation to include the legacy and relaxed elaboration models.\n+\t* gnat_ugn.texi:\u00a0Regenerate.\n+\n+2017-12-05  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* doc/gnat_ugn/platform_specific_information.rst: Minor edit.\n+\tImprove doc on required packages for linux 32bits.\n+\n+2017-12-05  Doug Rupp  <rupp@adacore.com>\n+\n+\t* tracebak.c (ppc64-vx7): USE_GCC_UNWINDER for 64bit.\n+\n+2017-12-05  Javier Miranda  <miranda@adacore.com>\n+\n+\t* checks.adb (Generate_Range_Check): Force evaluation of the node in\n+\tmore cases.  This patch was written to improve the code generated by\n+\tthe CCG compiler but it is enabled for all targets since double\n+\tevaluation is always a potential source of inefficiency.\n+\n+2017-12-05  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* doc/gnat_ugn/gnat_utility_programs.rst: Remove reference to obsolete\n+\t-fdump-xref switch.\n+\n 2017-12-05  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* exp_ch5.adb (Expand_Iterator_Loop_Over_Array): Use the SLOC of the"}, {"sha": "6fe75a185c22c86c4528baa1f7bc970cf34dce47", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/967947ed6b3b9e1b3723b2587feccb4dac47715e/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/967947ed6b3b9e1b3723b2587feccb4dac47715e/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=967947ed6b3b9e1b3723b2587feccb4dac47715e", "patch": "@@ -6812,8 +6812,16 @@ package body Checks is\n       --  evaluation is always a potential source of inefficiency, and is\n       --  functionally incorrect in the volatile case.\n \n-      if not Is_Entity_Name (N) or else Treat_As_Volatile (Entity (N)) then\n-         Force_Evaluation (N);\n+      --  We skip the evaluation of attribute references because, after these\n+      --  runtime checks are generated, the expander may need to rewrite this\n+      --  node (for example, see Attribute_Max_Size_In_Storage_Elements in\n+      --  Expand_N_Attribute_Reference).\n+\n+      if Nkind (N) /= N_Attribute_Reference\n+        and then (not Is_Entity_Name (N)\n+                    or else Treat_As_Volatile (Entity (N)))\n+      then\n+         Force_Evaluation (N, Mode => Strict);\n       end if;\n \n       --  The easiest case is when Source_Base_Type and Target_Base_Type are"}, {"sha": "0a14cecadd2c02892fbb6a7b316c08618a5161ea", "filename": "gcc/ada/debug.adb", "status": "modified", "additions": 233, "deletions": 2, "changes": 235, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/967947ed6b3b9e1b3723b2587feccb4dac47715e/gcc%2Fada%2Fdebug.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/967947ed6b3b9e1b3723b2587feccb4dac47715e/gcc%2Fada%2Fdebug.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdebug.adb?ref=967947ed6b3b9e1b3723b2587feccb4dac47715e", "patch": "@@ -145,6 +145,60 @@ package body Debug is\n    --  d.Y\n    --  d.Z  Do not enable expansion in configurable run-time mode\n \n+   --  d_a  Stop elaboration checks on accept or select statement\n+   --  d_b\n+   --  d_c\n+   --  d_d\n+   --  d_e  Ignore entry calls and requeue statements for elaboration\n+   --  d_f\n+   --  d_g\n+   --  d_h\n+   --  d_i\n+   --  d_j\n+   --  d_k\n+   --  d_l\n+   --  d_m\n+   --  d_n\n+   --  d_o\n+   --  d_p  Ignore assertion pragmas for elaboration\n+   --  d_q\n+   --  d_r\n+   --  d_s\n+   --  d_t\n+   --  d_u\n+   --  d_v\n+   --  d_w\n+   --  d_x\n+   --  d_y\n+   --  d_z\n+\n+   --  d_A\n+   --  d_B\n+   --  d_C\n+   --  d_D\n+   --  d_E\n+   --  d_F\n+   --  d_G\n+   --  d_H\n+   --  d_I\n+   --  d_J\n+   --  d_K\n+   --  d_L  Output trace information on elaboration checking\n+   --  d_M\n+   --  d_N\n+   --  d_O\n+   --  d_P\n+   --  d_Q\n+   --  d_R\n+   --  d_S\n+   --  d_T\n+   --  d_U\n+   --  d_V\n+   --  d_W\n+   --  d_X\n+   --  d_Y\n+   --  d_Z\n+\n    --  d1   Error msgs have node numbers where possible\n    --  d2   Eliminate error flags in verbose form error messages\n    --  d3   Dump bad node in Comperr on an abort\n@@ -165,6 +219,16 @@ package body Debug is\n    --  d.8\n    --  d.9  Disable build-in-place for nonlimited types\n \n+   --  d_1\n+   --  d_2\n+   --  d_3\n+   --  d_4\n+   --  d_5\n+   --  d_6\n+   --  d_7\n+   --  d_8\n+   --  d_9\n+\n    --  Debug flags for binder (GNATBIND)\n \n    --  da  All links (including internal units) listed if there is a cycle\n@@ -759,6 +823,24 @@ package body Debug is\n    --       case if debug flag -gnatd.Z is used. This is to deal with the case\n    --       where we discover difficulties in this new processing.\n \n+   --  d_a  The compiler stops the examination of a task body once it reaches\n+   --       an accept or select statement for the static elaboration model. The\n+   --       behavior is similar to that of No_Entry_Calls_In_Elaboration_Code,\n+   --       but does not penalize actual entry calls in elaboration code.\n+\n+   --  d_e  The compiler ignores simple entry calls, asynchronous transfer of\n+   --       control, conditional entry calls, timed entry calls, and requeue\n+   --       statements in both the static and dynamic elaboration models.\n+\n+   --  d_p  The compiler ignores calls to subprograms which verify the run-time\n+   --       semantics of invariants and postconditions in both the static and\n+   --       dynamic elaboration models.\n+\n+   --  d_L  Output trace information on elaboration checking. This debug switch\n+   --       causes output to be generated showing each call or instantiation as\n+   --       it is checked, and the progress of the recursive trace through\n+   --       elaboration calls at compile time.\n+\n    --  d1   Error messages have node numbers where possible. Normally error\n    --       messages have only source locations. This option is useful when\n    --       debugging errors caused by expanded code, where the source location\n@@ -944,7 +1026,7 @@ package body Debug is\n    --------------------\n \n    procedure Set_Debug_Flag (C : Character; Val : Boolean := True) is\n-      subtype Dig is Character range '1' .. '9';\n+      subtype Dig  is Character range '1' .. '9';\n       subtype LLet is Character range 'a' .. 'z';\n       subtype ULet is Character range 'A' .. 'Z';\n \n@@ -1090,7 +1172,7 @@ package body Debug is\n    ---------------------------\n \n    procedure Set_Dotted_Debug_Flag (C : Character; Val : Boolean := True) is\n-      subtype Dig is Character range '1' .. '9';\n+      subtype Dig  is Character range '1' .. '9';\n       subtype LLet is Character range 'a' .. 'z';\n       subtype ULet is Character range 'A' .. 'Z';\n \n@@ -1231,4 +1313,153 @@ package body Debug is\n       end if;\n    end Set_Dotted_Debug_Flag;\n \n+   --------------------------------\n+   -- Set_Underscored_Debug_Flag --\n+   --------------------------------\n+\n+   procedure Set_Underscored_Debug_Flag\n+     (C   : Character;\n+      Val : Boolean := True)\n+   is\n+      subtype Dig  is Character range '1' .. '9';\n+      subtype LLet is Character range 'a' .. 'z';\n+      subtype ULet is Character range 'A' .. 'Z';\n+\n+   begin\n+      if C in Dig then\n+         case Dig (C) is\n+            when '1' =>\n+               Debug_Flag_Underscore_1 := Val;\n+            when '2' =>\n+               Debug_Flag_Underscore_2 := Val;\n+            when '3' =>\n+               Debug_Flag_Underscore_3 := Val;\n+            when '4' =>\n+               Debug_Flag_Underscore_4 := Val;\n+            when '5' =>\n+               Debug_Flag_Underscore_5 := Val;\n+            when '6' =>\n+               Debug_Flag_Underscore_6 := Val;\n+            when '7' =>\n+               Debug_Flag_Underscore_7 := Val;\n+            when '8' =>\n+               Debug_Flag_Underscore_8 := Val;\n+            when '9' =>\n+               Debug_Flag_Underscore_9 := Val;\n+         end case;\n+\n+      elsif C in ULet then\n+         case ULet (C) is\n+            when 'A' =>\n+               Debug_Flag_Underscore_AA := Val;\n+            when 'B' =>\n+               Debug_Flag_Underscore_BB := Val;\n+            when 'C' =>\n+               Debug_Flag_Underscore_CC := Val;\n+            when 'D' =>\n+               Debug_Flag_Underscore_DD := Val;\n+            when 'E' =>\n+               Debug_Flag_Underscore_EE := Val;\n+            when 'F' =>\n+               Debug_Flag_Underscore_FF := Val;\n+            when 'G' =>\n+               Debug_Flag_Underscore_GG := Val;\n+            when 'H' =>\n+               Debug_Flag_Underscore_HH := Val;\n+            when 'I' =>\n+               Debug_Flag_Underscore_II := Val;\n+            when 'J' =>\n+               Debug_Flag_Underscore_JJ := Val;\n+            when 'K' =>\n+               Debug_Flag_Underscore_KK := Val;\n+            when 'L' =>\n+               Debug_Flag_Underscore_LL := Val;\n+            when 'M' =>\n+               Debug_Flag_Underscore_MM := Val;\n+            when 'N' =>\n+               Debug_Flag_Underscore_NN := Val;\n+            when 'O' =>\n+               Debug_Flag_Underscore_OO := Val;\n+            when 'P' =>\n+               Debug_Flag_Underscore_PP := Val;\n+            when 'Q' =>\n+               Debug_Flag_Underscore_QQ := Val;\n+            when 'R' =>\n+               Debug_Flag_Underscore_RR := Val;\n+            when 'S' =>\n+               Debug_Flag_Underscore_SS := Val;\n+            when 'T' =>\n+               Debug_Flag_Underscore_TT := Val;\n+            when 'U' =>\n+               Debug_Flag_Underscore_UU := Val;\n+            when 'V' =>\n+               Debug_Flag_Underscore_VV := Val;\n+            when 'W' =>\n+               Debug_Flag_Underscore_WW := Val;\n+            when 'X' =>\n+               Debug_Flag_Underscore_XX := Val;\n+            when 'Y' =>\n+               Debug_Flag_Underscore_YY := Val;\n+            when 'Z' =>\n+               Debug_Flag_Underscore_ZZ := Val;\n+         end case;\n+\n+      else\n+         case LLet (C) is\n+            when 'a' =>\n+               Debug_Flag_Underscore_A := Val;\n+            when 'b' =>\n+               Debug_Flag_Underscore_B := Val;\n+            when 'c' =>\n+               Debug_Flag_Underscore_C := Val;\n+            when 'd' =>\n+               Debug_Flag_Underscore_D := Val;\n+            when 'e' =>\n+               Debug_Flag_Underscore_E := Val;\n+            when 'f' =>\n+               Debug_Flag_Underscore_F := Val;\n+            when 'g' =>\n+               Debug_Flag_Underscore_G := Val;\n+            when 'h' =>\n+               Debug_Flag_Underscore_H := Val;\n+            when 'i' =>\n+               Debug_Flag_Underscore_I := Val;\n+            when 'j' =>\n+               Debug_Flag_Underscore_J := Val;\n+            when 'k' =>\n+               Debug_Flag_Underscore_K := Val;\n+            when 'l' =>\n+               Debug_Flag_Underscore_L := Val;\n+            when 'm' =>\n+               Debug_Flag_Underscore_M := Val;\n+            when 'n' =>\n+               Debug_Flag_Underscore_N := Val;\n+            when 'o' =>\n+               Debug_Flag_Underscore_O := Val;\n+            when 'p' =>\n+               Debug_Flag_Underscore_P := Val;\n+            when 'q' =>\n+               Debug_Flag_Underscore_Q := Val;\n+            when 'r' =>\n+               Debug_Flag_Underscore_R := Val;\n+            when 's' =>\n+               Debug_Flag_Underscore_S := Val;\n+            when 't' =>\n+               Debug_Flag_Underscore_T := Val;\n+            when 'u' =>\n+               Debug_Flag_Underscore_U := Val;\n+            when 'v' =>\n+               Debug_Flag_Underscore_V := Val;\n+            when 'w' =>\n+               Debug_Flag_Underscore_W := Val;\n+            when 'x' =>\n+               Debug_Flag_Underscore_X := Val;\n+            when 'y' =>\n+               Debug_Flag_Underscore_Y := Val;\n+            when 'z' =>\n+               Debug_Flag_Underscore_Z := Val;\n+         end case;\n+      end if;\n+   end Set_Underscored_Debug_Flag;\n+\n end Debug;"}, {"sha": "91130c42f0646f19ef2c440c2a8aa8bd3a15dc5e", "filename": "gcc/ada/debug.ads", "status": "modified", "additions": 69, "deletions": 1, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/967947ed6b3b9e1b3723b2587feccb4dac47715e/gcc%2Fada%2Fdebug.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/967947ed6b3b9e1b3723b2587feccb4dac47715e/gcc%2Fada%2Fdebug.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdebug.ads?ref=967947ed6b3b9e1b3723b2587feccb4dac47715e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -176,6 +176,70 @@ package Debug is\n    Debug_Flag_Dot_8 : Boolean := False;\n    Debug_Flag_Dot_9 : Boolean := False;\n \n+   Debug_Flag_Underscore_A : Boolean := False;\n+   Debug_Flag_Underscore_B : Boolean := False;\n+   Debug_Flag_Underscore_C : Boolean := False;\n+   Debug_Flag_Underscore_D : Boolean := False;\n+   Debug_Flag_Underscore_E : Boolean := False;\n+   Debug_Flag_Underscore_F : Boolean := False;\n+   Debug_Flag_Underscore_G : Boolean := False;\n+   Debug_Flag_Underscore_H : Boolean := False;\n+   Debug_Flag_Underscore_I : Boolean := False;\n+   Debug_Flag_Underscore_J : Boolean := False;\n+   Debug_Flag_Underscore_K : Boolean := False;\n+   Debug_Flag_Underscore_L : Boolean := False;\n+   Debug_Flag_Underscore_M : Boolean := False;\n+   Debug_Flag_Underscore_N : Boolean := False;\n+   Debug_Flag_Underscore_O : Boolean := False;\n+   Debug_Flag_Underscore_P : Boolean := False;\n+   Debug_Flag_Underscore_Q : Boolean := False;\n+   Debug_Flag_Underscore_R : Boolean := False;\n+   Debug_Flag_Underscore_S : Boolean := False;\n+   Debug_Flag_Underscore_T : Boolean := False;\n+   Debug_Flag_Underscore_U : Boolean := False;\n+   Debug_Flag_Underscore_V : Boolean := False;\n+   Debug_Flag_Underscore_W : Boolean := False;\n+   Debug_Flag_Underscore_X : Boolean := False;\n+   Debug_Flag_Underscore_Y : Boolean := False;\n+   Debug_Flag_Underscore_Z : Boolean := False;\n+\n+   Debug_Flag_Underscore_AA : Boolean := False;\n+   Debug_Flag_Underscore_BB : Boolean := False;\n+   Debug_Flag_Underscore_CC : Boolean := False;\n+   Debug_Flag_Underscore_DD : Boolean := False;\n+   Debug_Flag_Underscore_EE : Boolean := False;\n+   Debug_Flag_Underscore_FF : Boolean := False;\n+   Debug_Flag_Underscore_GG : Boolean := False;\n+   Debug_Flag_Underscore_HH : Boolean := False;\n+   Debug_Flag_Underscore_II : Boolean := False;\n+   Debug_Flag_Underscore_JJ : Boolean := False;\n+   Debug_Flag_Underscore_KK : Boolean := False;\n+   Debug_Flag_Underscore_LL : Boolean := False;\n+   Debug_Flag_Underscore_MM : Boolean := False;\n+   Debug_Flag_Underscore_NN : Boolean := False;\n+   Debug_Flag_Underscore_OO : Boolean := False;\n+   Debug_Flag_Underscore_PP : Boolean := False;\n+   Debug_Flag_Underscore_QQ : Boolean := False;\n+   Debug_Flag_Underscore_RR : Boolean := False;\n+   Debug_Flag_Underscore_SS : Boolean := False;\n+   Debug_Flag_Underscore_TT : Boolean := False;\n+   Debug_Flag_Underscore_UU : Boolean := False;\n+   Debug_Flag_Underscore_VV : Boolean := False;\n+   Debug_Flag_Underscore_WW : Boolean := False;\n+   Debug_Flag_Underscore_XX : Boolean := False;\n+   Debug_Flag_Underscore_YY : Boolean := False;\n+   Debug_Flag_Underscore_ZZ : Boolean := False;\n+\n+   Debug_Flag_Underscore_1 : Boolean := False;\n+   Debug_Flag_Underscore_2 : Boolean := False;\n+   Debug_Flag_Underscore_3 : Boolean := False;\n+   Debug_Flag_Underscore_4 : Boolean := False;\n+   Debug_Flag_Underscore_5 : Boolean := False;\n+   Debug_Flag_Underscore_6 : Boolean := False;\n+   Debug_Flag_Underscore_7 : Boolean := False;\n+   Debug_Flag_Underscore_8 : Boolean := False;\n+   Debug_Flag_Underscore_9 : Boolean := False;\n+\n    procedure Set_Debug_Flag (C : Character; Val : Boolean := True);\n    --  Where C is 0-9, A-Z, or a-z, sets the corresponding debug flag to\n    --  the given value. In the checks off version of debug, the call to\n@@ -185,4 +249,8 @@ package Debug is\n    --  Where C is 0-9, A-Z, or a-z, sets the corresponding dotted debug\n    --  flag (e.g. call with C = 'a' for the .a flag).\n \n+   procedure Set_Underscored_Debug_Flag (C : Character; Val : Boolean := True);\n+   --  Where C is 0-9, A-Z, or a-z, sets the corresponding underscored debug\n+   --  flag (e.g. call with C = 'a' for the _a flag).\n+\n end Debug;"}, {"sha": "d29a915f417699bbf88d4d104d79e70d35bf388a", "filename": "gcc/ada/doc/gnat_ugn/elaboration_order_handling_in_gnat.rst", "status": "modified", "additions": 78, "deletions": 164, "changes": 242, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/967947ed6b3b9e1b3723b2587feccb4dac47715e/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Felaboration_order_handling_in_gnat.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/967947ed6b3b9e1b3723b2587feccb4dac47715e/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Felaboration_order_handling_in_gnat.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Felaboration_order_handling_in_gnat.rst?ref=967947ed6b3b9e1b3723b2587feccb4dac47715e", "patch": "@@ -630,6 +630,21 @@ elaboration order and to diagnose elaboration problems.\n   region subject to SPARK_Mode On, otherwise the dynamic or static model is in\n   effect.\n \n+.. index:: Legacy elaboration model\n+\n+* *Legacy elaboration model*\n+\n+  In addition to the three elabortaion models outlined above, GNAT provides the\n+  elaboration model of pre-18.x versions referred to as `legacy elaboration\n+  model`. The legacy elaboration model is enabled with compiler switch\n+  :switch:`-gnatH`.\n+\n+.. index:: Relaxed elaboration mode\n+\n+The dynamic, legacy, and static models can be relaxed using compiler switch\n+:switch:`-gnatJ`, making them more permissive. Note that in this mode, GNAT\n+may not diagnose certain elaboration issues or install run-time checks.\n+\n .. _Common_Elaboration_Model_Traits\":\n \n Common Elaboration-model Traits\n@@ -910,6 +925,15 @@ external, and compiler switch :switch:`-gnatd.v` is in effect.\n \n    4. end SPARK_Model;\n \n+Legacy Elaboration Model in GNAT\n+================================\n+\n+The legacy elaboration model is provided for compatibility with code bases\n+developed with pre-18.x versions of GNAT. It is similar in functionality to\n+the dynamic and static models of post-18.x version of GNAT, but may differ\n+in terms of diagnostics and run-time checks. The legacy elaboration model is\n+enabled with compiler switch :switch:`-gnatH`.\n+\n .. _Mixing_Elaboration_Models:\n \n Mixing Elaboration Models\n@@ -1029,6 +1053,21 @@ available.\n   and it is the programmer's responsibility to ensure that it does not raise\n   ``Program_Error``.\n \n+  If the compilation was performed using a post-18.x version of GNAT, consider\n+  using the legacy elaboration model, in the following order:\n+\n+  - Use the legacy static elaboration model, with compiler switch\n+    :switch:`-gnatH`.\n+\n+  - Use the legacy dynamic elaboration model, with compiler switches\n+    :switch:`-gnatH` :switch:`-gnatE`.\n+\n+  - Use the relaxed legacy static elaboration model, with compiler switches\n+    :switch:`-gnatH` :switch:`-gnatJ`.\n+\n+  - Use the relaxed legacy dynamic elaboration model, with compiler switches\n+    :switch:`-gnatH` :switch:`-gnatJ` :switch:`-gnatE`.\n+\n * *Suppress all elaboration checks*\n \n   The drawback of run-time checks is that they generate overhead at run time,\n@@ -1421,160 +1460,6 @@ Elaboration-related Compiler Switches\n GNAT has several switches that affect the elaboration model and consequently\n the elaboration order chosen by the binder.\n \n-.. index:: -gnatdE  (gnat)\n-\n-:switch:`-gnatdE`\n-  Elaboration checks on predefined units\n-\n-  When this switch is in effect, GNAT will consider scenarios and targets that\n-  come from the Ada, GNAT, Interfaces, and System hierarchies. This switch is\n-  useful when a programmer has defined a custom grandchild of those packages.\n-\n-.. index:: -gnatd.G  (gnat)\n-\n-:switch:`-gnatd.G`\n-  Ignore calls through generic formal parameters for elaboration\n-\n-  When this switch is in effect, GNAT will ignore calls that invoke generic\n-  actual entries, operators, or subprograms via generic formal subprograms. As\n-  a result, GNAT will not generate implicit ``Elaborate`` and ``Elaborate_All``\n-  pragmas, and run-time checks for such calls. Note that this switch does not\n-  overlap with :switch:`-gnatdL`.\n-\n-  ::\n-\n-     package body Ignore_Calls is\n-        function ABE return Integer;\n-\n-        generic\n-           with function Gen_Formal return Integer;\n-        package Gen is\n-           Val : constant Integer := Gen_Formal;\n-        end Gen;\n-\n-        package Inst is new Gen (ABE);\n-\n-        function ABE return Integer is\n-        begin\n-           ...\n-        end ABE;\n-     end Ignore_Calls;\n-\n-  In the example above, the call to function ``ABE`` will be ignored because it\n-  occurs during the elaboration of instance ``Inst``, through a call to generic\n-  formal subprogram ``Gen_Formal``.\n-\n-.. index:: -gnatdL  (gnat)\n-\n-:switch:`-gnatdL`\n-  Ignore external calls from instances for elaboration\n-\n-  When this switch is in effect, GNAT will ignore calls that originate from\n-  within an instance and directly target an entry, operator, or subprogram\n-  defined outside the instance. As a result, GNAT will not generate implicit\n-  ``Elaborate`` and ``Elaborate_All`` pragmas, and run-time checks for such\n-  calls.  Note that this switch does not overlap with :switch:`-gnatd.G`.\n-\n-  ::\n-\n-     package body Ignore_Calls is\n-        function ABE return Integer;\n-\n-        generic\n-        package Gen is\n-           Val : constant Integer := ABE;\n-        end Gen;\n-\n-        package Inst is new Gen;\n-\n-        function ABE return Integer is\n-        begin\n-           ...\n-        end ABE;\n-     end Ignore_Calls;\n-\n-  In the example above, the call to function ``ABE`` will be ignored because it\n-  originates from within an instance and targets a subprogram defined outside\n-  the instance.\n-\n-.. index:: -gnatd.o  (gnat)\n-\n-:switch:`-gnatd.o`\n-  Conservative elaboration order for indirect calls\n-\n-  When this switch is in effect, GNAT will treat ``'Access`` of an entry,\n-  operator, or subprogram as an immediate call to that target. As a result,\n-  GNAT will generate implicit ``Elaborate`` and ``Elaborate_All`` pragmas as\n-  well as run-time checks for such attribute references.\n-\n-  ::\n-\n-     1. package body Attribute_Call is\n-     2.    function Func return Integer;\n-     3.    type Func_Ptr is access function return Integer;\n-     4.\n-     5.    Ptr : constant Func_Ptr := Func'Access;\n-                                          |\n-        >>> warning: cannot call \"Func\" before body seen\n-        >>> warning: Program_Error may be raised at run time\n-        >>> warning:   body of unit \"Attribute_Call\" elaborated\n-        >>> warning:   \"Access\" of \"Func\" taken at line 5\n-        >>> warning:   function \"Func\" called at line 5\n-\n-     6.\n-     7.    function Func return Integer is\n-     8.    begin\n-     9.       ...\n-    10.    end Func;\n-    11. end Attribute_Call;\n-\n-  In the example above, the elaboration of declaration ``Ptr`` is assigned\n-  ``Func'Access`` before the body of ``Func`` has been elaborated.\n-\n-.. index:: -gnatd.U  (gnat)\n-\n-:switch:`-gnatd.U`\n-  Ignore indirect calls for static elaboration\n-\n-  When this switch is in effect, GNAT will ignore ``'Access`` of an entry,\n-  operator, or subprogram when the static model is in effect.\n-\n-.. index:: -gnatd.v  (gnat)\n-\n-:switch:`-gnatd.v`\n-  Enforce SPARK elaboration rules in SPARK code\n-\n-  When this switch is in effect, GNAT will enforce the SPARK rules of\n-  elaboration as defined in the SPARK Reference Manual, section 7.7. As a\n-  result, constructs which violate the SPARK elaboration rules are no longer\n-  accepted, even if GNAT is able to statically ensure that these constructs\n-  will not lead to ABE problems.\n-\n-.. index:: -gnatd.y  (gnat)\n-\n-:switch:`-gnatd.y`\n-  Disable implicit pragma Elaborate[_All] on task bodies\n-\n-  When this switch is in effect, GNAT will not generate ``Elaborate`` and\n-  ``Elaborate_All`` pragmas if the need for the pragma came directly or\n-  indirectly from a task body.\n-\n-  ::\n-\n-     with Server;\n-     package body Disable_Task is\n-        task T;\n-\n-        task body T is\n-        begin\n-           Server.Proc;\n-        end T;\n-     end Disable_Task;\n-\n-  In the example above, the activation of single task ``T`` invokes\n-  ``Server.Proc``, which implies that ``Server`` requires ``Elaborate_All``,\n-  however GNAT will not generate the pragma.\n-\n .. index:: -gnatE  (gnat)\n \n :switch:`-gnatE`\n@@ -1617,6 +1502,23 @@ the elaboration order chosen by the binder.\n \n        4. end Client;\n \n+.. index:: -gnatH  (gnat)\n+\n+:switch:`-gnatH`\n+  Legacy elaboration checking mode enabled\n+\n+  When this switch is in effect, GNAT will utilize the pre-18.x elaboration\n+  model.\n+\n+.. index:: -gnatJ  (gnat)\n+\n+:switch:`-gnatJ`\n+  Relaxed elaboration checking mode enabled\n+\n+  When this switch is in effect, GNAT will not process certain scenarios\n+  resulting in a more permissive elaboration model. Note that this may\n+  eliminate some diagnostics and run-time checks.\n+\n .. index:: -gnatw.f  (gnat)\n \n :switch:`-gnatw.f`\n@@ -1698,6 +1600,7 @@ A programmer should first compile the program with the default options, using\n none of the binder or compiler switches. If the binder succeeds in finding an\n elaboration order, then apart from possible cases involing dispatching calls\n and access-to-subprogram types, the program is free of elaboration errors.\n+\n If it is important for the program to be portable to compilers other than GNAT,\n then the programmer should use compiler switch :switch:`-gnatel` and consider\n the messages about missing or implicitly created ``Elaborate`` and\n@@ -1706,24 +1609,35 @@ the messages about missing or implicitly created ``Elaborate`` and\n If the binder reports an elaboration circularity, the programmer has several\n options:\n \n-* Ensure that warnings are enabled. This will allow the static model to output\n-  trace information of elaboration issues. The trace information could shed\n-  light on previously unforeseen dependencies, as well as their origins.\n+* Ensure that elaboration warnings are enabled. This will allow the static\n+  model to output trace information of elaboration issues. The trace\n+  information could shed light on previously unforeseen dependencies, as well\n+  as their origins. Elaboration warnings are enabled with compiler switch\n+  :switch:`-gnatwl`.\n \n * Use switch :switch:`-gnatel` to obtain messages on generated implicit\n   ``Elaborate`` and ``Elaborate_All`` pragmas. The trace information could\n   indicate why a server unit must be elaborated prior to a client unit.\n \n * If the warnings produced by the static model indicate that a task is\n-  involved, consider the options in the section on resolving task issues as\n-  well as compiler switch :switch:`-gnatd.y`.\n+  involved, consider the options in section `Resolving Task Issues`_.\n+\n+* If none of the steps outlined above resolve the circularity, use a more\n+  permissive elaboration model, in the following order:\n+\n+  - Use the dynamic elaboration model, with compiler switch :switch:`-gnatE`.\n+\n+  - Use the legacy static elaboration model, with compiler switch\n+    :switch:`-gnatH`.\n+\n+  - Use the legacy dynamic elaboration model, with compiler switches\n+    :switch:`-gnatH` :switch:`-gnatE`.\n \n-* If the warnings produced by the static model indicate that an generic\n-  instantiations are involved, consider using compiler switches\n-  :switch:`-gnatd.G` and :switch:`-gnatdL`.\n+  - Use the relaxed legacy static elaboration model, with compiler switches\n+    :switch:`-gnatH` :switch:`-gnatJ`.\n \n-* If none of the steps outlined above resolve the circularity, recompile the\n-  program using the dynamic model by using compiler switch :switch:`-gnatE`.\n+  - Use the relaxed legacy dynamic elaboration model, with compiler switches\n+    :switch:`-gnatH` :switch:`-gnatJ` :switch:`-gnatE`.\n \n .. _Inspecting_the_Chosen_Elaboration_Order:\n "}, {"sha": "4efbbe07635df20055a1f926f1e162d0398aa0ee", "filename": "gcc/ada/doc/gnat_ugn/gnat_utility_programs.rst", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/967947ed6b3b9e1b3723b2587feccb4dac47715e/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgnat_utility_programs.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/967947ed6b3b9e1b3723b2587feccb4dac47715e/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgnat_utility_programs.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgnat_utility_programs.rst?ref=967947ed6b3b9e1b3723b2587feccb4dac47715e", "patch": "@@ -588,8 +588,8 @@ The following switches are available for ``gnatxref``:\n :switch:`--ext={extension}`\n   Specify an alternate ali file extension. The default is ``ali`` and other\n   extensions (e.g. ``gli`` for C/C++ sources) may be specified via this switch.\n-  Note that if this switch overrides the default, which means that only the\n-  new extension will be considered.\n+  Note that if this switch overrides the default, only the new extension will\n+  be considered.\n \n \n .. index:: --RTS (gnatxref)\n@@ -776,9 +776,8 @@ The following switches are available:\n \n :switch:`--ext={extension}`\n   Specify an alternate ali file extension. The default is ``ali`` and other\n-  extensions (e.g. ``gli`` for C/C++ sources when using :switch:`-fdump-xref`)\n-  may be specified via this switch. Note that if this switch overrides the\n-  default, which means that only the new extension will be considered.\n+  extensions may be specified via this switch. Note that if this switch\n+  overrides the default, only the new extension will be considered.\n \n \n .. index:: --RTS (gnatfind)"}, {"sha": "5f2f70c672b21afacf1785ed9b49762a6c65d63e", "filename": "gcc/ada/doc/gnat_ugn/platform_specific_information.rst", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/967947ed6b3b9e1b3723b2587feccb4dac47715e/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fplatform_specific_information.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/967947ed6b3b9e1b3723b2587feccb4dac47715e/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fplatform_specific_information.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fplatform_specific_information.rst?ref=967947ed6b3b9e1b3723b2587feccb4dac47715e", "patch": "@@ -231,8 +231,8 @@ This section describes topics that are specific to GNU/Linux platforms.\n \n .. _Required_packages_on_GNU_Linux:\n \n-Required Packages on GNU/Linux:\n--------------------------------\n+Required Packages on GNU/Linux\n+------------------------------\n \n GNAT requires the C library developer's package to be installed.\n The name of of that package depends on your GNU/Linux distribution:\n@@ -241,10 +241,10 @@ The name of of that package depends on your GNU/Linux distribution:\n * Debian, Ubuntu: ``libc6-dev`` (normally installed by default).\n \n If using the 32-bit version of GNAT on a 64-bit version of GNU/Linux,\n-you'll need the 32-bit version of that package instead:\n+you'll need the 32-bit version of the glibc and glibc-devel packages:\n \n-* RedHat, SUSE: ``glibc-devel.i686``;\n-* Debian, Ubuntu: ``libc6-dev:i386``.\n+* RedHat, SUSE: ``glibc.i686``, ``glibc-devel.i686``\n+* Debian, Ubuntu: ``libc6:i386``, ``libc6-dev:i386``\n \n Other GNU/Linux distributions might be choosing a different name\n for that package."}, {"sha": "5968a7337711c1d3920aedd2660f8fcf123edd55", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/967947ed6b3b9e1b3723b2587feccb4dac47715e/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/967947ed6b3b9e1b3723b2587feccb4dac47715e/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=967947ed6b3b9e1b3723b2587feccb4dac47715e", "patch": "@@ -625,8 +625,8 @@ package body Einfo is\n \n    --    Ignore_SPARK_Mode_Pragmas       Flag301\n    --    Is_Initial_Condition_Procedure  Flag302\n+   --    Suppress_Elaboration_Warnings   Flag303\n \n-   --    (unused)                        Flag303\n    --    (unused)                        Flag304\n    --    (unused)                        Flag305\n    --    (unused)                        Flag306\n@@ -3497,6 +3497,11 @@ package body Einfo is\n       return Uint24 (Id);\n    end Subps_Index;\n \n+   function Suppress_Elaboration_Warnings (Id : E) return B is\n+   begin\n+      return Flag303 (Id);\n+   end Suppress_Elaboration_Warnings;\n+\n    function Suppress_Initialization (Id : E) return B is\n    begin\n       pragma Assert (Is_Type (Id) or else Ekind (Id) = E_Variable);\n@@ -6732,6 +6737,11 @@ package body Einfo is\n       Set_Uint24 (Id, V);\n    end Set_Subps_Index;\n \n+   procedure Set_Suppress_Elaboration_Warnings (Id : E; V : B := True) is\n+   begin\n+      Set_Flag303 (Id, V);\n+   end Set_Suppress_Elaboration_Warnings;\n+\n    procedure Set_Suppress_Initialization (Id : E; V : B := True) is\n    begin\n       pragma Assert (Is_Type (Id) or else Ekind (Id) = E_Variable);\n@@ -9786,6 +9796,7 @@ package body Einfo is\n       W (\"Static_Elaboration_Desired\",      Flag77  (Id));\n       W (\"Stores_Attribute_Old_Prefix\",     Flag270 (Id));\n       W (\"Strict_Alignment\",                Flag145 (Id));\n+      W (\"Suppress_Elaboration_Warnings\",   Flag303 (Id));\n       W (\"Suppress_Initialization\",         Flag105 (Id));\n       W (\"Suppress_Style_Checks\",           Flag165 (Id));\n       W (\"Suppress_Value_Tracking_On_Call\", Flag217 (Id));"}, {"sha": "7a8dd80d1e442650f6cd3571cc6a648fa7fa2596", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/967947ed6b3b9e1b3723b2587feccb4dac47715e/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/967947ed6b3b9e1b3723b2587feccb4dac47715e/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=967947ed6b3b9e1b3723b2587feccb4dac47715e", "patch": "@@ -4445,6 +4445,20 @@ package Einfo is\n --       for the outer level subprogram, this is the starting index in the Subp\n --       table for the entries for this subprogram.\n \n+--    Suppress_Elaboration_Warnings (Flag303)\n+--       NOTE: this flag is relevant only for the legacy ABE mechanism and\n+--       should not be used outside of that context.\n+--\n+--       Defined in all entities, can be set only for subprogram entities and\n+--       for variables. If this flag is set then Sem_Elab will not generate\n+--       elaboration warnings for the subprogram or variable. Suppression of\n+--       such warnings is automatic for subprograms for which elaboration\n+--       checks are suppressed (without the need to set this flag), but the\n+--       flag is also set for various internal entities (such as init procs)\n+--       which are known not to generate any possible access before elaboration\n+--       and it is set on variables when a warning is given to avoid multiple\n+--       elaboration warnings for the same variable.\n+\n --    Suppress_Initialization (Flag105)\n --       Defined in all variable, type and subtype entities. If set for a base\n --       type, then the generation of initialization procedures is suppressed\n@@ -5604,6 +5618,7 @@ package Einfo is\n    --    Referenced                          (Flag156)\n    --    Referenced_As_LHS                   (Flag36)\n    --    Referenced_As_Out_Parameter         (Flag227)\n+   --    Suppress_Elaboration_Warnings       (Flag303)\n    --    Suppress_Style_Checks               (Flag165)\n    --    Suppress_Value_Tracking_On_Call     (Flag217)\n    --    Used_As_Generic_Actual              (Flag222)\n@@ -7437,6 +7452,7 @@ package Einfo is\n    function String_Literal_Low_Bound            (Id : E) return N;\n    function Subprograms_For_Type                (Id : E) return L;\n    function Subps_Index                         (Id : E) return U;\n+   function Suppress_Elaboration_Warnings       (Id : E) return B;\n    function Suppress_Initialization             (Id : E) return B;\n    function Suppress_Style_Checks               (Id : E) return B;\n    function Suppress_Value_Tracking_On_Call     (Id : E) return B;\n@@ -8134,6 +8150,7 @@ package Einfo is\n    procedure Set_String_Literal_Low_Bound        (Id : E; V : N);\n    procedure Set_Subprograms_For_Type            (Id : E; V : L);\n    procedure Set_Subps_Index                     (Id : E; V : U);\n+   procedure Set_Suppress_Elaboration_Warnings   (Id : E; V : B := True);\n    procedure Set_Suppress_Initialization         (Id : E; V : B := True);\n    procedure Set_Suppress_Style_Checks           (Id : E; V : B := True);\n    procedure Set_Suppress_Value_Tracking_On_Call (Id : E; V : B := True);\n@@ -8991,6 +9008,7 @@ package Einfo is\n    pragma Inline (String_Literal_Low_Bound);\n    pragma Inline (Subprograms_For_Type);\n    pragma Inline (Subps_Index);\n+   pragma Inline (Suppress_Elaboration_Warnings);\n    pragma Inline (Suppress_Initialization);\n    pragma Inline (Suppress_Style_Checks);\n    pragma Inline (Suppress_Value_Tracking_On_Call);\n@@ -9475,6 +9493,7 @@ package Einfo is\n    pragma Inline (Set_String_Literal_Low_Bound);\n    pragma Inline (Set_Subprograms_For_Type);\n    pragma Inline (Set_Subps_Index);\n+   pragma Inline (Set_Suppress_Elaboration_Warnings);\n    pragma Inline (Set_Suppress_Initialization);\n    pragma Inline (Set_Suppress_Style_Checks);\n    pragma Inline (Set_Suppress_Value_Tracking_On_Call);"}, {"sha": "03d737187902ad23f147553f2eca44c2c1ab3a8c", "filename": "gcc/ada/exp_ch11.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/967947ed6b3b9e1b3723b2587feccb4dac47715e/gcc%2Fada%2Fexp_ch11.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/967947ed6b3b9e1b3723b2587feccb4dac47715e/gcc%2Fada%2Fexp_ch11.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch11.adb?ref=967947ed6b3b9e1b3723b2587feccb4dac47715e", "patch": "@@ -1421,9 +1421,9 @@ package body Exp_Ch11 is\n \n       --  Add clean up actions if required\n \n-      if not Nkind_In (Parent (N), N_Package_Body,\n-                                   N_Accept_Statement,\n-                                   N_Extended_Return_Statement)\n+      if not Nkind_In (Parent (N), N_Accept_Statement,\n+                                   N_Extended_Return_Statement,\n+                                   N_Package_Body)\n         and then not Delay_Cleanups (Current_Scope)\n \n         --  No cleanup action needed in thunks associated with interfaces"}, {"sha": "dc7d6af306f338e437e8e3297a8dbcccf95fc951", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 27, "deletions": 8, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/967947ed6b3b9e1b3723b2587feccb4dac47715e/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/967947ed6b3b9e1b3723b2587feccb4dac47715e/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=967947ed6b3b9e1b3723b2587feccb4dac47715e", "patch": "@@ -2731,7 +2731,8 @@ package body Exp_Ch3 is\n            and then not Restriction_Active (No_Exception_Propagation)\n          then\n             declare\n-               DF_Id : Entity_Id;\n+               DF_Call : Node_Id;\n+               DF_Id   : Entity_Id;\n \n             begin\n                --  Create a local version of Deep_Finalize which has indication\n@@ -2743,18 +2744,27 @@ package body Exp_Ch3 is\n \n                Append_To (Decls, Make_Local_Deep_Finalize (Rec_Type, DF_Id));\n \n+               DF_Call :=\n+                 Make_Procedure_Call_Statement (Loc,\n+                   Name                   => New_Occurrence_Of (DF_Id, Loc),\n+                   Parameter_Associations => New_List (\n+                     Make_Identifier (Loc, Name_uInit),\n+                     New_Occurrence_Of (Standard_False, Loc)));\n+\n+               --  Do not emit warnings related to the elaboration order when a\n+               --  controlled object is declared before the body of Finalize is\n+               --  seen.\n+\n+               if Legacy_Elaboration_Checks then\n+                  Set_No_Elaboration_Check (DF_Call);\n+               end if;\n+\n                Set_Exception_Handlers (Handled_Stmt_Node, New_List (\n                  Make_Exception_Handler (Loc,\n                    Exception_Choices => New_List (\n                      Make_Others_Choice (Loc)),\n                    Statements        => New_List (\n-                     Make_Procedure_Call_Statement (Loc,\n-                       Name                   =>\n-                         New_Occurrence_Of (DF_Id, Loc),\n-                       Parameter_Associations => New_List (\n-                         Make_Identifier (Loc, Name_uInit),\n-                         New_Occurrence_Of (Standard_False, Loc))),\n-\n+                     DF_Call,\n                      Make_Raise_Statement (Loc)))));\n             end;\n          else\n@@ -6083,6 +6093,15 @@ package body Exp_Ch3 is\n                  Skip_Self => True);\n \n             if Present (Fin_Call) then\n+\n+               --  Do not emit warnings related to the elaboration order when a\n+               --  controlled object is declared before the body of Finalize is\n+               --  seen.\n+\n+               if Legacy_Elaboration_Checks then\n+                  Set_No_Elaboration_Check (Fin_Call);\n+               end if;\n+\n                Fin_Block :=\n                  Make_Block_Statement (Loc,\n                    Declarations               => No_List,"}, {"sha": "621891d2e546e2b47590ef349a05326dcaad4a53", "filename": "gcc/ada/exp_ch9.adb", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/967947ed6b3b9e1b3723b2587feccb4dac47715e/gcc%2Fada%2Fexp_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/967947ed6b3b9e1b3723b2587feccb4dac47715e/gcc%2Fada%2Fexp_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.adb?ref=967947ed6b3b9e1b3723b2587feccb4dac47715e", "patch": "@@ -52,6 +52,7 @@ with Sem_Ch6;  use Sem_Ch6;\n with Sem_Ch8;  use Sem_Ch8;\n with Sem_Ch9;  use Sem_Ch9;\n with Sem_Ch11; use Sem_Ch11;\n+with Sem_Elab; use Sem_Elab;\n with Sem_Eval; use Sem_Eval;\n with Sem_Res;  use Sem_Res;\n with Sem_Util; use Sem_Util;\n@@ -4905,6 +4906,10 @@ package body Exp_Ch9 is\n       end if;\n \n       Analyze (Call);\n+\n+      if Legacy_Elaboration_Checks then\n+         Check_Task_Activation (N);\n+      end if;\n    end Build_Task_Activation_Call;\n \n    -------------------------------"}, {"sha": "26483f4d7787338325b7b50dbdde6df5def0cad6", "filename": "gcc/ada/frontend.adb", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/967947ed6b3b9e1b3723b2587feccb4dac47715e/gcc%2Fada%2Ffrontend.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/967947ed6b3b9e1b3723b2587feccb4dac47715e/gcc%2Fada%2Ffrontend.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffrontend.adb?ref=967947ed6b3b9e1b3723b2587feccb4dac47715e", "patch": "@@ -440,10 +440,14 @@ begin\n                   Collect_Garbage_Entities;\n                end if;\n \n+               if Legacy_Elaboration_Checks then\n+                  Check_Elab_Calls;\n+               end if;\n+\n                --  Examine all top level scenarios collected during analysis\n-               --  and resolution. Diagnose conditional and guaranteed ABEs,\n-               --  install run-time checks to catch ABEs, and guarantee the\n-               --  prior elaboration of external units.\n+               --  and resolution. Diagnose conditional ABEs, install run-time\n+               --  checks to catch conditional ABEs, and guarantee the prior\n+               --  elaboration of external units.\n \n                Check_Elaboration_Scenarios;\n \n@@ -452,9 +456,9 @@ begin\n \n                Remove_Ignored_Ghost_Code;\n \n-            --  Otherwise check the access-before-elaboration rules even when\n-            --  previous errors were detected or the compilation is verifying\n-            --  semantics.\n+            --  Examine all top level scenarios collected during analysis and\n+            --  resolution in order to diagnose conditional ABEs, even in the\n+            --  presence of serious errors.\n \n             else\n                Check_Elaboration_Scenarios;"}, {"sha": "eda994d51ae234708dffb07a5966d290c0e4c9df", "filename": "gcc/ada/gnat1drv.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/967947ed6b3b9e1b3723b2587feccb4dac47715e/gcc%2Fada%2Fgnat1drv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/967947ed6b3b9e1b3723b2587feccb4dac47715e/gcc%2Fada%2Fgnat1drv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat1drv.adb?ref=967947ed6b3b9e1b3723b2587feccb4dac47715e", "patch": "@@ -136,9 +136,9 @@ procedure Gnat1drv is\n    --  Start of processing for Adjust_Global_Switches\n \n    begin\n-      --  Define pragma GNAT_Annotate as an alias of pragma Annotate,\n-      --  to be able to work around bootstrap limitations with the old syntax\n-      --  of pragma Annotate, and use pragma GNAT_Annotate in compiler sources\n+      --  Define pragma GNAT_Annotate as an alias of pragma Annotate, to be\n+      --  able to work around bootstrap limitations with the old syntax of\n+      --  pragma Annotate, and use pragma GNAT_Annotate in compiler sources\n       --  when needed.\n \n       Map_Pragma_Name (From => Name_Gnat_Annotate, To => Name_Annotate);"}, {"sha": "cc902b3e7e59a6bc8c6e422d73803f4eee251d16", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 142, "deletions": 230, "changes": 372, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/967947ed6b3b9e1b3723b2587feccb4dac47715e/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/967947ed6b3b9e1b3723b2587feccb4dac47715e/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=967947ed6b3b9e1b3723b2587feccb4dac47715e", "patch": "@@ -21,7 +21,7 @@\n \n @copying\n @quotation\n-GNAT User's Guide for Native Platforms , Nov 16, 2017\n+GNAT User's Guide for Native Platforms , Dec 05, 2017\n \n AdaCore\n \n@@ -460,7 +460,7 @@ Specifying a Run-Time Library\n \n GNU/Linux Topics\n \n-* Required Packages on GNU/Linux;: Required Packages on GNU/Linux. \n+* Required Packages on GNU/Linux:: \n \n Microsoft Windows Topics\n \n@@ -542,6 +542,7 @@ Elaboration Order Handling in GNAT\n * Dynamic Elaboration Model in GNAT:: \n * Static Elaboration Model in GNAT:: \n * SPARK Elaboration Model in GNAT:: \n+* Legacy Elaboration Model in GNAT:: \n * Mixing Elaboration Models:: \n * Elaboration Circularities:: \n * Resolving Elaboration Circularities:: \n@@ -17943,8 +17944,8 @@ Do not look for library files in the system default directory.\n \n Specify an alternate ali file extension. The default is @code{ali} and other\n extensions (e.g. @code{gli} for C/C++ sources) may be specified via this switch.\n-Note that if this switch overrides the default, which means that only the\n-new extension will be considered.\n+Note that if this switch overrides the default, only the new extension will\n+be considered.\n @end table\n \n @geindex --RTS (gnatxref)\n@@ -18200,9 +18201,8 @@ Do not look for library files in the system default directory.\n @item @code{--ext=@emph{extension}}\n \n Specify an alternate ali file extension. The default is @code{ali} and other\n-extensions (e.g. @code{gli} for C/C++ sources when using @code{-fdump-xref})\n-may be specified via this switch. Note that if this switch overrides the\n-default, which means that only the new extension will be considered.\n+extensions may be specified via this switch. Note that if this switch\n+overrides the default, only the new extension will be considered.\n @end table\n \n @geindex --RTS (gnatfind)\n@@ -23789,13 +23789,13 @@ Program_Error.\n This section describes topics that are specific to GNU/Linux platforms.\n \n @menu\n-* Required Packages on GNU/Linux;: Required Packages on GNU/Linux. \n+* Required Packages on GNU/Linux:: \n \n @end menu\n \n @node Required Packages on GNU/Linux,,,GNU/Linux Topics\n @anchor{gnat_ugn/platform_specific_information id7}@anchor{1dc}@anchor{gnat_ugn/platform_specific_information required-packages-on-gnu-linux}@anchor{1dd}\n-@subsection Required Packages on GNU/Linux:\n+@subsection Required Packages on GNU/Linux\n \n \n GNAT requires the C library developer's package to be installed.\n@@ -23812,16 +23812,16 @@ Debian, Ubuntu: @code{libc6-dev} (normally installed by default).\n @end itemize\n \n If using the 32-bit version of GNAT on a 64-bit version of GNU/Linux,\n-you'll need the 32-bit version of that package instead:\n+you'll need the 32-bit version of the glibc and glibc-devel packages:\n \n \n @itemize *\n \n @item \n-RedHat, SUSE: @code{glibc-devel.i686};\n+RedHat, SUSE: @code{glibc.i686}, @code{glibc-devel.i686}\n \n @item \n-Debian, Ubuntu: @code{libc6-dev:i386}.\n+Debian, Ubuntu: @code{libc6:i386}, @code{libc6-dev:i386}\n @end itemize\n \n Other GNU/Linux distributions might be choosing a different name\n@@ -27083,6 +27083,7 @@ GNAT, either automatically or with explicit programming features.\n * Dynamic Elaboration Model in GNAT:: \n * Static Elaboration Model in GNAT:: \n * SPARK Elaboration Model in GNAT:: \n+* Legacy Elaboration Model in GNAT:: \n * Mixing Elaboration Models:: \n * Elaboration Circularities:: \n * Resolving Elaboration Circularities:: \n@@ -27832,6 +27833,25 @@ region subject to SPARK_Mode On, otherwise the dynamic or static model is in\n effect.\n @end itemize\n \n+@geindex Legacy elaboration model\n+\n+\n+@itemize *\n+\n+@item \n+@emph{Legacy elaboration model}\n+\n+In addition to the three elabortaion models outlined above, GNAT provides the\n+elaboration model of pre-18.x versions referred to as @cite{legacy elaboration model}. The legacy elaboration model is enabled with compiler switch\n+@code{-gnatH}.\n+@end itemize\n+\n+@geindex Relaxed elaboration mode\n+\n+The dynamic, legacy, and static models can be relaxed using compiler switch\n+@code{-gnatJ}, making them more permissive. Note that in this mode, GNAT\n+may not diagnose certain elaboration issues or install run-time checks.\n+\n @node Common Elaboration-model Traits,Dynamic Elaboration Model in GNAT,Controlling the Elaboration Order in GNAT,Elaboration Order Handling in GNAT\n @anchor{gnat_ugn/elaboration_order_handling_in_gnat common-elaboration-model-traits}@anchor{23c}@anchor{gnat_ugn/elaboration_order_handling_in_gnat id7}@anchor{23d}\n @section Common Elaboration-model Traits\n@@ -28101,7 +28121,7 @@ along with any additional dependencies that @code{Server} may require, are\n elaborated prior to the body of @code{Static_Model}.\n @end itemize\n \n-@node SPARK Elaboration Model in GNAT,Mixing Elaboration Models,Static Elaboration Model in GNAT,Elaboration Order Handling in GNAT\n+@node SPARK Elaboration Model in GNAT,Legacy Elaboration Model in GNAT,Static Elaboration Model in GNAT,Elaboration Order Handling in GNAT\n @anchor{gnat_ugn/elaboration_order_handling_in_gnat id10}@anchor{242}@anchor{gnat_ugn/elaboration_order_handling_in_gnat spark-elaboration-model-in-gnat}@anchor{243}\n @section SPARK Elaboration Model in GNAT\n \n@@ -28124,8 +28144,19 @@ external, and compiler switch @code{-gnatd.v} is in effect.\n 4. end SPARK_Model;\n @end example\n \n-@node Mixing Elaboration Models,Elaboration Circularities,SPARK Elaboration Model in GNAT,Elaboration Order Handling in GNAT\n-@anchor{gnat_ugn/elaboration_order_handling_in_gnat mixing-elaboration-models}@anchor{244}@anchor{gnat_ugn/elaboration_order_handling_in_gnat id11}@anchor{245}\n+@node Legacy Elaboration Model in GNAT,Mixing Elaboration Models,SPARK Elaboration Model in GNAT,Elaboration Order Handling in GNAT\n+@anchor{gnat_ugn/elaboration_order_handling_in_gnat legacy-elaboration-model-in-gnat}@anchor{244}\n+@section Legacy Elaboration Model in GNAT\n+\n+\n+The legacy elaboration model is provided for compatibility with code bases\n+developed with pre-18.x versions of GNAT. It is similar in functionality to\n+the dynamic and static models of post-18.x version of GNAT, but may differ\n+in terms of diagnostics and run-time checks. The legacy elaboration model is\n+enabled with compiler switch @code{-gnatH}.\n+\n+@node Mixing Elaboration Models,Elaboration Circularities,Legacy Elaboration Model in GNAT,Elaboration Order Handling in GNAT\n+@anchor{gnat_ugn/elaboration_order_handling_in_gnat mixing-elaboration-models}@anchor{245}@anchor{gnat_ugn/elaboration_order_handling_in_gnat id11}@anchor{246}\n @section Mixing Elaboration Models\n \n \n@@ -28169,7 +28200,7 @@ warning:   \"y.ads\" which has static elaboration checks\n The warnings can be suppressed by binder switch @code{-ws}.\n \n @node Elaboration Circularities,Resolving Elaboration Circularities,Mixing Elaboration Models,Elaboration Order Handling in GNAT\n-@anchor{gnat_ugn/elaboration_order_handling_in_gnat id12}@anchor{246}@anchor{gnat_ugn/elaboration_order_handling_in_gnat elaboration-circularities}@anchor{247}\n+@anchor{gnat_ugn/elaboration_order_handling_in_gnat id12}@anchor{247}@anchor{gnat_ugn/elaboration_order_handling_in_gnat elaboration-circularities}@anchor{248}\n @section Elaboration Circularities\n \n \n@@ -28228,7 +28259,7 @@ they @emph{with}, must be elaborated prior to @code{Client}. However, @code{Serv\n @code{Client}, and this leads to a circularity.\n \n @node Resolving Elaboration Circularities,Resolving Task Issues,Elaboration Circularities,Elaboration Order Handling in GNAT\n-@anchor{gnat_ugn/elaboration_order_handling_in_gnat id13}@anchor{248}@anchor{gnat_ugn/elaboration_order_handling_in_gnat resolving-elaboration-circularities}@anchor{249}\n+@anchor{gnat_ugn/elaboration_order_handling_in_gnat id13}@anchor{249}@anchor{gnat_ugn/elaboration_order_handling_in_gnat resolving-elaboration-circularities}@anchor{24a}\n @section Resolving Elaboration Circularities\n \n \n@@ -28261,6 +28292,29 @@ generate an executable program that may or may not raise @code{Program_Error},\n and it is the programmer's responsibility to ensure that it does not raise\n @code{Program_Error}.\n \n+If the compilation was performed using a post-18.x version of GNAT, consider\n+using the legacy elaboration model, in the following order:\n+\n+\n+@itemize -\n+\n+@item \n+Use the legacy static elaboration model, with compiler switch\n+@code{-gnatH}.\n+\n+@item \n+Use the legacy dynamic elaboration model, with compiler switches\n+@code{-gnatH} @code{-gnatE}.\n+\n+@item \n+Use the relaxed legacy static elaboration model, with compiler switches\n+@code{-gnatH} @code{-gnatJ}.\n+\n+@item \n+Use the relaxed legacy dynamic elaboration model, with compiler switches\n+@code{-gnatH} @code{-gnatJ} @code{-gnatE}.\n+@end itemize\n+\n @item \n @emph{Suppress all elaboration checks}\n \n@@ -28373,7 +28427,7 @@ run-time checks.\n @end itemize\n \n @node Resolving Task Issues,Elaboration-related Compiler Switches,Resolving Elaboration Circularities,Elaboration Order Handling in GNAT\n-@anchor{gnat_ugn/elaboration_order_handling_in_gnat id14}@anchor{24a}@anchor{gnat_ugn/elaboration_order_handling_in_gnat resolving-task-issues}@anchor{24b}\n+@anchor{gnat_ugn/elaboration_order_handling_in_gnat id14}@anchor{24b}@anchor{gnat_ugn/elaboration_order_handling_in_gnat resolving-task-issues}@anchor{24c}\n @section Resolving Task Issues\n \n \n@@ -28669,202 +28723,13 @@ static model will verify that no entry calls take place at elaboration time.\n @end itemize\n \n @node Elaboration-related Compiler Switches,Summary of Procedures for Elaboration Control,Resolving Task Issues,Elaboration Order Handling in GNAT\n-@anchor{gnat_ugn/elaboration_order_handling_in_gnat elaboration-related-compiler-switches}@anchor{24c}@anchor{gnat_ugn/elaboration_order_handling_in_gnat id15}@anchor{24d}\n+@anchor{gnat_ugn/elaboration_order_handling_in_gnat elaboration-related-compiler-switches}@anchor{24d}@anchor{gnat_ugn/elaboration_order_handling_in_gnat id15}@anchor{24e}\n @section Elaboration-related Compiler Switches\n \n \n GNAT has several switches that affect the elaboration model and consequently\n the elaboration order chosen by the binder.\n \n-@geindex -gnatdE (gnat)\n-\n-\n-@table @asis\n-\n-@item @code{-gnatdE}\n-\n-Elaboration checks on predefined units\n-\n-When this switch is in effect, GNAT will consider scenarios and targets that\n-come from the Ada, GNAT, Interfaces, and System hierarchies. This switch is\n-useful when a programmer has defined a custom grandchild of those packages.\n-@end table\n-\n-@geindex -gnatd.G (gnat)\n-\n-\n-@table @asis\n-\n-@item @code{-gnatd.G}\n-\n-Ignore calls through generic formal parameters for elaboration\n-\n-When this switch is in effect, GNAT will ignore calls that invoke generic\n-actual entries, operators, or subprograms via generic formal subprograms. As\n-a result, GNAT will not generate implicit @code{Elaborate} and @code{Elaborate_All}\n-pragmas, and run-time checks for such calls. Note that this switch does not\n-overlap with @code{-gnatdL}.\n-\n-@example\n-package body Ignore_Calls is\n-   function ABE return Integer;\n-\n-   generic\n-      with function Gen_Formal return Integer;\n-   package Gen is\n-      Val : constant Integer := Gen_Formal;\n-   end Gen;\n-\n-   package Inst is new Gen (ABE);\n-\n-   function ABE return Integer is\n-   begin\n-      ...\n-   end ABE;\n-end Ignore_Calls;\n-@end example\n-\n-In the example above, the call to function @code{ABE} will be ignored because it\n-occurs during the elaboration of instance @code{Inst}, through a call to generic\n-formal subprogram @code{Gen_Formal}.\n-@end table\n-\n-@geindex -gnatdL (gnat)\n-\n-\n-@table @asis\n-\n-@item @code{-gnatdL}\n-\n-Ignore external calls from instances for elaboration\n-\n-When this switch is in effect, GNAT will ignore calls that originate from\n-within an instance and directly target an entry, operator, or subprogram\n-defined outside the instance. As a result, GNAT will not generate implicit\n-@code{Elaborate} and @code{Elaborate_All} pragmas, and run-time checks for such\n-calls.  Note that this switch does not overlap with @code{-gnatd.G}.\n-\n-@example\n-package body Ignore_Calls is\n-   function ABE return Integer;\n-\n-   generic\n-   package Gen is\n-      Val : constant Integer := ABE;\n-   end Gen;\n-\n-   package Inst is new Gen;\n-\n-   function ABE return Integer is\n-   begin\n-      ...\n-   end ABE;\n-end Ignore_Calls;\n-@end example\n-\n-In the example above, the call to function @code{ABE} will be ignored because it\n-originates from within an instance and targets a subprogram defined outside\n-the instance.\n-@end table\n-\n-@geindex -gnatd.o (gnat)\n-\n-\n-@table @asis\n-\n-@item @code{-gnatd.o}\n-\n-Conservative elaboration order for indirect calls\n-\n-When this switch is in effect, GNAT will treat @code{'Access} of an entry,\n-operator, or subprogram as an immediate call to that target. As a result,\n-GNAT will generate implicit @code{Elaborate} and @code{Elaborate_All} pragmas as\n-well as run-time checks for such attribute references.\n-\n-@example\n- 1. package body Attribute_Call is\n- 2.    function Func return Integer;\n- 3.    type Func_Ptr is access function return Integer;\n- 4.\n- 5.    Ptr : constant Func_Ptr := Func'Access;\n-                                      |\n-    >>> warning: cannot call \"Func\" before body seen\n-    >>> warning: Program_Error may be raised at run time\n-    >>> warning:   body of unit \"Attribute_Call\" elaborated\n-    >>> warning:   \"Access\" of \"Func\" taken at line 5\n-    >>> warning:   function \"Func\" called at line 5\n-\n- 6.\n- 7.    function Func return Integer is\n- 8.    begin\n- 9.       ...\n-10.    end Func;\n-11. end Attribute_Call;\n-@end example\n-\n-In the example above, the elaboration of declaration @code{Ptr} is assigned\n-@code{Func'Access} before the body of @code{Func} has been elaborated.\n-@end table\n-\n-@geindex -gnatd.U (gnat)\n-\n-\n-@table @asis\n-\n-@item @code{-gnatd.U}\n-\n-Ignore indirect calls for static elaboration\n-\n-When this switch is in effect, GNAT will ignore @code{'Access} of an entry,\n-operator, or subprogram when the static model is in effect.\n-@end table\n-\n-@geindex -gnatd.v (gnat)\n-\n-\n-@table @asis\n-\n-@item @code{-gnatd.v}\n-\n-Enforce SPARK elaboration rules in SPARK code\n-\n-When this switch is in effect, GNAT will enforce the SPARK rules of\n-elaboration as defined in the SPARK Reference Manual, section 7.7. As a\n-result, constructs which violate the SPARK elaboration rules are no longer\n-accepted, even if GNAT is able to statically ensure that these constructs\n-will not lead to ABE problems.\n-@end table\n-\n-@geindex -gnatd.y (gnat)\n-\n-\n-@table @asis\n-\n-@item @code{-gnatd.y}\n-\n-Disable implicit pragma Elaborate[_All] on task bodies\n-\n-When this switch is in effect, GNAT will not generate @code{Elaborate} and\n-@code{Elaborate_All} pragmas if the need for the pragma came directly or\n-indirectly from a task body.\n-\n-@example\n-with Server;\n-package body Disable_Task is\n-   task T;\n-\n-   task body T is\n-   begin\n-      Server.Proc;\n-   end T;\n-end Disable_Task;\n-@end example\n-\n-In the example above, the activation of single task @code{T} invokes\n-@code{Server.Proc}, which implies that @code{Server} requires @code{Elaborate_All},\n-however GNAT will not generate the pragma.\n-@end table\n-\n @geindex -gnatE (gnat)\n \n \n@@ -28924,6 +28789,33 @@ a unit. This diagnostic requires compiler switch @code{-gnatd.v}.\n @end itemize\n @end table\n \n+@geindex -gnatH (gnat)\n+\n+\n+@table @asis\n+\n+@item @code{-gnatH}\n+\n+Legacy elaboration checking mode enabled\n+\n+When this switch is in effect, GNAT will utilize the pre-18.x elaboration\n+model.\n+@end table\n+\n+@geindex -gnatJ (gnat)\n+\n+\n+@table @asis\n+\n+@item @code{-gnatJ}\n+\n+Relaxed elaboration checking mode enabled\n+\n+When this switch is in effect, GNAT will not process certain scenarios\n+resulting in a more permissive elaboration model. Note that this may\n+eliminate some diagnostics and run-time checks.\n+@end table\n+\n @geindex -gnatw.f (gnat)\n \n \n@@ -29008,14 +28900,15 @@ checks. The example above will still fail at run time with an ABE.\n @end table\n \n @node Summary of Procedures for Elaboration Control,Inspecting the Chosen Elaboration Order,Elaboration-related Compiler Switches,Elaboration Order Handling in GNAT\n-@anchor{gnat_ugn/elaboration_order_handling_in_gnat summary-of-procedures-for-elaboration-control}@anchor{24e}@anchor{gnat_ugn/elaboration_order_handling_in_gnat id16}@anchor{24f}\n+@anchor{gnat_ugn/elaboration_order_handling_in_gnat summary-of-procedures-for-elaboration-control}@anchor{24f}@anchor{gnat_ugn/elaboration_order_handling_in_gnat id16}@anchor{250}\n @section Summary of Procedures for Elaboration Control\n \n \n A programmer should first compile the program with the default options, using\n none of the binder or compiler switches. If the binder succeeds in finding an\n elaboration order, then apart from possible cases involing dispatching calls\n and access-to-subprogram types, the program is free of elaboration errors.\n+\n If it is important for the program to be portable to compilers other than GNAT,\n then the programmer should use compiler switch @code{-gnatel} and consider\n the messages about missing or implicitly created @code{Elaborate} and\n@@ -29028,9 +28921,11 @@ options:\n @itemize *\n \n @item \n-Ensure that warnings are enabled. This will allow the static model to output\n-trace information of elaboration issues. The trace information could shed\n-light on previously unforeseen dependencies, as well as their origins.\n+Ensure that elaboration warnings are enabled. This will allow the static\n+model to output trace information of elaboration issues. The trace\n+information could shed light on previously unforeseen dependencies, as well\n+as their origins. Elaboration warnings are enabled with compiler switch\n+@code{-gnatwl}.\n \n @item \n Use switch @code{-gnatel} to obtain messages on generated implicit\n@@ -29039,21 +28934,38 @@ indicate why a server unit must be elaborated prior to a client unit.\n \n @item \n If the warnings produced by the static model indicate that a task is\n-involved, consider the options in the section on resolving task issues as\n-well as compiler switch @code{-gnatd.y}.\n+involved, consider the options in section @ref{24b,,Resolving Task Issues}.\n \n @item \n-If the warnings produced by the static model indicate that an generic\n-instantiations are involved, consider using compiler switches\n-@code{-gnatd.G} and @code{-gnatdL}.\n+If none of the steps outlined above resolve the circularity, use a more\n+permissive elaboration model, in the following order:\n+\n+\n+@itemize -\n+\n+@item \n+Use the dynamic elaboration model, with compiler switch @code{-gnatE}.\n+\n+@item \n+Use the legacy static elaboration model, with compiler switch\n+@code{-gnatH}.\n \n @item \n-If none of the steps outlined above resolve the circularity, recompile the\n-program using the dynamic model by using compiler switch @code{-gnatE}.\n+Use the legacy dynamic elaboration model, with compiler switches\n+@code{-gnatH} @code{-gnatE}.\n+\n+@item \n+Use the relaxed legacy static elaboration model, with compiler switches\n+@code{-gnatH} @code{-gnatJ}.\n+\n+@item \n+Use the relaxed legacy dynamic elaboration model, with compiler switches\n+@code{-gnatH} @code{-gnatJ} @code{-gnatE}.\n+@end itemize\n @end itemize\n \n @node Inspecting the Chosen Elaboration Order,,Summary of Procedures for Elaboration Control,Elaboration Order Handling in GNAT\n-@anchor{gnat_ugn/elaboration_order_handling_in_gnat inspecting-the-chosen-elaboration-order}@anchor{250}@anchor{gnat_ugn/elaboration_order_handling_in_gnat id17}@anchor{251}\n+@anchor{gnat_ugn/elaboration_order_handling_in_gnat inspecting-the-chosen-elaboration-order}@anchor{251}@anchor{gnat_ugn/elaboration_order_handling_in_gnat id17}@anchor{252}\n @section Inspecting the Chosen Elaboration Order\n \n \n@@ -29190,7 +29102,7 @@ gdbstr (body)\n @end example\n \n @node Inline Assembler,GNU Free Documentation License,Elaboration Order Handling in GNAT,Top\n-@anchor{gnat_ugn/inline_assembler inline-assembler}@anchor{10}@anchor{gnat_ugn/inline_assembler doc}@anchor{252}@anchor{gnat_ugn/inline_assembler id1}@anchor{253}\n+@anchor{gnat_ugn/inline_assembler inline-assembler}@anchor{10}@anchor{gnat_ugn/inline_assembler doc}@anchor{253}@anchor{gnat_ugn/inline_assembler id1}@anchor{254}\n @chapter Inline Assembler\n \n \n@@ -29249,7 +29161,7 @@ and with assembly language programming.\n @end menu\n \n @node Basic Assembler Syntax,A Simple Example of Inline Assembler,,Inline Assembler\n-@anchor{gnat_ugn/inline_assembler id2}@anchor{254}@anchor{gnat_ugn/inline_assembler basic-assembler-syntax}@anchor{255}\n+@anchor{gnat_ugn/inline_assembler id2}@anchor{255}@anchor{gnat_ugn/inline_assembler basic-assembler-syntax}@anchor{256}\n @section Basic Assembler Syntax\n \n \n@@ -29365,7 +29277,7 @@ Intel: Destination first; for example @code{mov eax, 4}@w{ }\n \n \n @node A Simple Example of Inline Assembler,Output Variables in Inline Assembler,Basic Assembler Syntax,Inline Assembler\n-@anchor{gnat_ugn/inline_assembler a-simple-example-of-inline-assembler}@anchor{256}@anchor{gnat_ugn/inline_assembler id3}@anchor{257}\n+@anchor{gnat_ugn/inline_assembler a-simple-example-of-inline-assembler}@anchor{257}@anchor{gnat_ugn/inline_assembler id3}@anchor{258}\n @section A Simple Example of Inline Assembler\n \n \n@@ -29514,7 +29426,7 @@ If there are no errors, @code{as} will generate an object file\n @code{nothing.out}.\n \n @node Output Variables in Inline Assembler,Input Variables in Inline Assembler,A Simple Example of Inline Assembler,Inline Assembler\n-@anchor{gnat_ugn/inline_assembler id4}@anchor{258}@anchor{gnat_ugn/inline_assembler output-variables-in-inline-assembler}@anchor{259}\n+@anchor{gnat_ugn/inline_assembler id4}@anchor{259}@anchor{gnat_ugn/inline_assembler output-variables-in-inline-assembler}@anchor{25a}\n @section Output Variables in Inline Assembler\n \n \n@@ -29881,7 +29793,7 @@ end Get_Flags_3;\n @end quotation\n \n @node Input Variables in Inline Assembler,Inlining Inline Assembler Code,Output Variables in Inline Assembler,Inline Assembler\n-@anchor{gnat_ugn/inline_assembler id5}@anchor{25a}@anchor{gnat_ugn/inline_assembler input-variables-in-inline-assembler}@anchor{25b}\n+@anchor{gnat_ugn/inline_assembler id5}@anchor{25b}@anchor{gnat_ugn/inline_assembler input-variables-in-inline-assembler}@anchor{25c}\n @section Input Variables in Inline Assembler\n \n \n@@ -29970,7 +29882,7 @@ _increment__incr.1:\n @end quotation\n \n @node Inlining Inline Assembler Code,Other Asm Functionality,Input Variables in Inline Assembler,Inline Assembler\n-@anchor{gnat_ugn/inline_assembler id6}@anchor{25c}@anchor{gnat_ugn/inline_assembler inlining-inline-assembler-code}@anchor{25d}\n+@anchor{gnat_ugn/inline_assembler id6}@anchor{25d}@anchor{gnat_ugn/inline_assembler inlining-inline-assembler-code}@anchor{25e}\n @section Inlining Inline Assembler Code\n \n \n@@ -30041,7 +29953,7 @@ movl %esi,%eax\n thus saving the overhead of stack frame setup and an out-of-line call.\n \n @node Other Asm Functionality,,Inlining Inline Assembler Code,Inline Assembler\n-@anchor{gnat_ugn/inline_assembler other-asm-functionality}@anchor{25e}@anchor{gnat_ugn/inline_assembler id7}@anchor{25f}\n+@anchor{gnat_ugn/inline_assembler other-asm-functionality}@anchor{25f}@anchor{gnat_ugn/inline_assembler id7}@anchor{260}\n @section Other @code{Asm} Functionality\n \n \n@@ -30056,7 +29968,7 @@ and @code{Volatile}, which inhibits unwanted optimizations.\n @end menu\n \n @node The Clobber Parameter,The Volatile Parameter,,Other Asm Functionality\n-@anchor{gnat_ugn/inline_assembler the-clobber-parameter}@anchor{260}@anchor{gnat_ugn/inline_assembler id8}@anchor{261}\n+@anchor{gnat_ugn/inline_assembler the-clobber-parameter}@anchor{261}@anchor{gnat_ugn/inline_assembler id8}@anchor{262}\n @subsection The @code{Clobber} Parameter\n \n \n@@ -30120,7 +30032,7 @@ Use 'register' name @code{memory} if you changed a memory location\n @end itemize\n \n @node The Volatile Parameter,,The Clobber Parameter,Other Asm Functionality\n-@anchor{gnat_ugn/inline_assembler the-volatile-parameter}@anchor{262}@anchor{gnat_ugn/inline_assembler id9}@anchor{263}\n+@anchor{gnat_ugn/inline_assembler the-volatile-parameter}@anchor{263}@anchor{gnat_ugn/inline_assembler id9}@anchor{264}\n @subsection The @code{Volatile} Parameter\n \n \n@@ -30156,7 +30068,7 @@ to @code{True} only if the compiler's optimizations have created\n problems.\n \n @node GNU Free Documentation License,Index,Inline Assembler,Top\n-@anchor{share/gnu_free_documentation_license gnu-fdl}@anchor{1}@anchor{share/gnu_free_documentation_license doc}@anchor{264}@anchor{share/gnu_free_documentation_license gnu-free-documentation-license}@anchor{265}\n+@anchor{share/gnu_free_documentation_license gnu-fdl}@anchor{1}@anchor{share/gnu_free_documentation_license doc}@anchor{265}@anchor{share/gnu_free_documentation_license gnu-free-documentation-license}@anchor{266}\n @chapter GNU Free Documentation License\n \n "}, {"sha": "e8c14faa3158da86fedcb29f3825e7acf663ef38", "filename": "gcc/ada/libgnat/s-dwalin.adb", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/967947ed6b3b9e1b3723b2587feccb4dac47715e/gcc%2Fada%2Flibgnat%2Fs-dwalin.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/967947ed6b3b9e1b3723b2587feccb4dac47715e/gcc%2Fada%2Flibgnat%2Fs-dwalin.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-dwalin.adb?ref=967947ed6b3b9e1b3723b2587feccb4dac47715e", "patch": "@@ -578,14 +578,21 @@ package body System.Dwarf_Lines is\n          Initialize_State_Machine (C);\n       end if;\n \n-      --  Read the next prologue\n+      --  If we have reached the next prologue, read it. Beware of possibly\n+      --  empty blocks.\n+\n+      --  When testing for the end of section, beware of possible zero padding\n+      --  at the end. Bail out as soon as there's not even room for at least a\n+      --  DW_LNE_end_sequence, 3 bytes from Off to Off+2. This resolves to\n+      --  Off+2 > Last_Offset_Within_Section, that is Off+2 > Section_Length-1,\n+      --  or Off+3 > Section_Length.\n \n       Tell (C.Lines, Off);\n       while Off = C.Next_Prologue loop\n          Initialize_State_Machine (C);\n          Parse_Prologue (C);\n          Tell (C.Lines, Off);\n-         exit when Off + 4 >= Length (C.Lines);\n+         exit when Off + 3 > Length (C.Lines);\n       end loop;\n \n       --  Test whether we're done\n@@ -595,7 +602,7 @@ package body System.Dwarf_Lines is\n       --  We are finished when we either reach the end of the section, or we\n       --  have reached zero padding at the end of the section.\n \n-      if Prologue.Unit_Length = 0 or else Off + 4 >= Length (C.Lines) then\n+      if Prologue.Unit_Length = 0 or else Off + 3 > Length (C.Lines) then\n          Done := True;\n          return;\n       end if;"}, {"sha": "2a32b63d2263ae787d2b1fdb8d308f823d1a0bbb", "filename": "gcc/ada/opt.ads", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/967947ed6b3b9e1b3723b2587feccb4dac47715e/gcc%2Fada%2Fopt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/967947ed6b3b9e1b3723b2587feccb4dac47715e/gcc%2Fada%2Fopt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.ads?ref=967947ed6b3b9e1b3723b2587feccb4dac47715e", "patch": "@@ -844,9 +844,9 @@ package Opt is\n \n    Ignore_Unrecognized_VWY_Switches : Boolean := False;\n    --  GNAT\n-   --  Set True to ignore unrecognized y, V, w switches. Can be set True\n-   --  by use of -gnateu, causing subsequent unrecognized switches to result\n-   --  in a warning rather than an error.\n+   --  Set True to ignore unrecognized y, V, w switches. Can be set True by\n+   --  use of -gnateu, causing subsequent unrecognized switches to result in\n+   --  a warning rather than an error.\n \n    Implementation_Unit_Warnings : Boolean := True;\n    --  GNAT\n@@ -936,6 +936,11 @@ package Opt is\n    --  Set to True to enable leap seconds support in Ada.Calendar and its\n    --  children.\n \n+   Legacy_Elaboration_Checks : Boolean := False;\n+   --  GNAT\n+   --  Set to True when the pre-18.x access-before-elaboration model is to be\n+   --  used. Modified by use of -gnatH.\n+\n    Link_Only : Boolean := False;\n    --  GNATMAKE, GPRBUILD\n    --  Set to True to skip compile and bind steps (except when Bind_Only is\n@@ -1353,6 +1358,12 @@ package Opt is\n    --  Set to True to enable compatibility mode with Rational compiler, and\n    --  to accept renamings of implicit operations in their own scope.\n \n+   Relaxed_Elaboration_Checks : Boolean := False;\n+   --  GNAT\n+   --  Set to True to ignore certain elaboration scenarios, thus making the\n+   --  current ABE mechanism more permissive. This behavior is applicable to\n+   --  both the default and the legacy ABE models. Modified by use of -gnatJ.\n+\n    Relaxed_RM_Semantics : Boolean := False;\n    --  GNAT\n    --  Set to True to ignore some Ada semantic error to help parse legacy Ada"}, {"sha": "91aa5792bf5d638ecf24cac7bdec3f2a72d55a1e", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/967947ed6b3b9e1b3723b2587feccb4dac47715e/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/967947ed6b3b9e1b3723b2587feccb4dac47715e/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=967947ed6b3b9e1b3723b2587feccb4dac47715e", "patch": "@@ -28,6 +28,7 @@ with Ada.Characters.Latin_1; use Ada.Characters.Latin_1;\n with Atree;    use Atree;\n with Casing;   use Casing;\n with Checks;   use Checks;\n+with Debug;    use Debug;\n with Einfo;    use Einfo;\n with Elists;   use Elists;\n with Errout;   use Errout;\n@@ -875,6 +876,17 @@ package body Sem_Attr is\n                Kill_Current_Values;\n             end if;\n \n+            --  In the static elaboration model, treat the attribute reference\n+            --  as a subprogram call for elaboration purposes. Suppress this\n+            --  treatment under debug flag. In any case, we are all done.\n+\n+            if Legacy_Elaboration_Checks\n+              and not Dynamic_Elaboration_Checks\n+              and not Debug_Flag_Dot_UU\n+            then\n+               Check_Elab_Call (N);\n+            end if;\n+\n             return;\n \n          --  Component is an operation of a protected type"}, {"sha": "0865f7b70d878aee76e3e60ff73eda42aecac99d", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 29, "deletions": 2, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/967947ed6b3b9e1b3723b2587feccb4dac47715e/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/967947ed6b3b9e1b3723b2587feccb4dac47715e/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=967947ed6b3b9e1b3723b2587feccb4dac47715e", "patch": "@@ -4611,6 +4611,19 @@ package body Sem_Ch12 is\n             Analyze (Act_Decl);\n             Set_Unit (Parent (N), N);\n             Set_Body_Required (Parent (N), False);\n+\n+            --  We never need elaboration checks on instantiations, since by\n+            --  definition, the body instantiation is elaborated at the same\n+            --  time as the spec instantiation.\n+\n+            if Legacy_Elaboration_Checks then\n+               Set_Kill_Elaboration_Checks       (Act_Decl_Id);\n+               Set_Suppress_Elaboration_Warnings (Act_Decl_Id);\n+            end if;\n+         end if;\n+\n+         if Legacy_Elaboration_Checks then\n+            Check_Elab_Instantiation (N);\n          end if;\n \n          --  Save the scenario for later examination by the ABE Processing\n@@ -5300,9 +5313,17 @@ package body Sem_Ch12 is\n          Set_Is_Eliminated (Anon_Id, Is_Eliminated (Act_Decl_Id));\n \n          if Nkind (Parent (N)) = N_Compilation_Unit then\n-            Set_Kill_Elaboration_Checks       (Act_Decl_Id);\n-            Set_Is_Compilation_Unit (Anon_Id);\n \n+            --  In compilation unit case, kill elaboration checks on the\n+            --  instantiation, since they are never needed - the body is\n+            --  instantiated at the same point as the spec.\n+\n+            if Legacy_Elaboration_Checks then\n+               Set_Kill_Elaboration_Checks       (Act_Decl_Id);\n+               Set_Suppress_Elaboration_Warnings (Act_Decl_Id);\n+            end if;\n+\n+            Set_Is_Compilation_Unit (Anon_Id);\n             Set_Cunit_Entity (Current_Sem_Unit, Pack_Id);\n          end if;\n \n@@ -5652,6 +5673,12 @@ package body Sem_Ch12 is\n             Set_Ignore_SPARK_Mode_Pragmas (Anon_Id);\n          end if;\n \n+         if Legacy_Elaboration_Checks\n+           and then not Is_Intrinsic_Subprogram (Gen_Unit)\n+         then\n+            Check_Elab_Instantiation (N);\n+         end if;\n+\n          --  Save the scenario for later examination by the ABE Processing\n          --  phase.\n "}, {"sha": "715e6da741c0cf43335a93a52deafd33bdb5da9f", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/967947ed6b3b9e1b3723b2587feccb4dac47715e/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/967947ed6b3b9e1b3723b2587feccb4dac47715e/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=967947ed6b3b9e1b3723b2587feccb4dac47715e", "patch": "@@ -8514,7 +8514,7 @@ package body Sem_Ch3 is\n          Parent_Base := Base_Type (Parent_Type);\n       end if;\n \n-      --  AI05-0115 : if this is a derivation from a private type in some\n+      --  AI05-0115: if this is a derivation from a private type in some\n       --  other scope that may lead to invisible components for the derived\n       --  type, mark it accordingly.\n \n@@ -21339,10 +21339,10 @@ package body Sem_Ch3 is\n       if Nkind (S) /= N_Subtype_Indication then\n          Find_Type (S);\n \n-         --  No way to proceed if the subtype indication is malformed.\n-         --  This will happen for example when the subtype indication in\n-         --  an object declaration is missing altogether and the expression\n-         --  is analyzed as if it were that indication.\n+         --  No way to proceed if the subtype indication is malformed. This\n+         --  will happen for example when the subtype indication in an object\n+         --  declaration is missing altogether and the expression is analyzed\n+         --  as if it were that indication.\n \n          if not Is_Entity_Name (S) then\n             return Any_Type;"}, {"sha": "205f414c290dfba5270241df79b023d7b4e80e22", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/967947ed6b3b9e1b3723b2587feccb4dac47715e/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/967947ed6b3b9e1b3723b2587feccb4dac47715e/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=967947ed6b3b9e1b3723b2587feccb4dac47715e", "patch": "@@ -552,6 +552,7 @@ package body Sem_Ch5 is\n       --  in-place.\n \n       if Should_Transform_BIP_Assignment (Typ => T1) then\n+\n          --  In certain cases involving user-defined concatenation operators,\n          --  we need to resolve the right-hand side before transforming the\n          --  assignment.\n@@ -580,10 +581,10 @@ package body Sem_Ch5 is\n                   end loop;\n                end;\n \n-            when N_Op\n+            when N_Attribute_Reference\n                | N_Expanded_Name\n                | N_Identifier\n-               | N_Attribute_Reference\n+               | N_Op\n             =>\n                null;\n \n@@ -987,6 +988,14 @@ package body Sem_Ch5 is\n          Error_Msg_CRT (\"composite assignment\", N);\n       end if;\n \n+      --  Check elaboration warning for left side if not in elab code\n+\n+      if Legacy_Elaboration_Checks\n+        and not In_Subprogram_Or_Concurrent_Unit\n+      then\n+         Check_Elab_Assign (Lhs);\n+      end if;\n+\n       --  Save the scenario for later examination by the ABE Processing phase\n \n       Record_Elaboration_Scenario (N);"}, {"sha": "be622564be8e2e96c923c763b9ddf2cb444071cd", "filename": "gcc/ada/sem_ch7.adb", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/967947ed6b3b9e1b3723b2587feccb4dac47715e/gcc%2Fada%2Fsem_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/967947ed6b3b9e1b3723b2587feccb4dac47715e/gcc%2Fada%2Fsem_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch7.adb?ref=967947ed6b3b9e1b3723b2587feccb4dac47715e", "patch": "@@ -1148,6 +1148,10 @@ package body Sem_Ch7 is\n \n       if Is_Comp_Unit then\n          Set_Body_Required (Parent (N), Body_Required);\n+\n+         if Legacy_Elaboration_Checks and not Body_Required then\n+            Set_Suppress_Elaboration_Warnings (Id);\n+         end if;\n       end if;\n \n       End_Package_Scope (Id);"}, {"sha": "a51abd5d3a366afbb3ad9680dc9c160c3e0f9386", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/967947ed6b3b9e1b3723b2587feccb4dac47715e/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/967947ed6b3b9e1b3723b2587feccb4dac47715e/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=967947ed6b3b9e1b3723b2587feccb4dac47715e", "patch": "@@ -4229,6 +4229,16 @@ package body Sem_Ch8 is\n          Error_Msg_N\n            (\"a library unit can only rename another library unit\", N);\n       end if;\n+\n+      --  We suppress elaboration warnings for the resulting entity, since\n+      --  clearly they are not needed, and more particularly, in the case\n+      --  of a generic formal subprogram, the resulting entity can appear\n+      --  after the instantiation itself, and thus look like a bogus case\n+      --  of access before elaboration.\n+\n+      if Legacy_Elaboration_Checks then\n+         Set_Suppress_Elaboration_Warnings (New_S);\n+      end if;\n    end Attribute_Renaming;\n \n    ----------------------"}, {"sha": "99f2dd11f700419f320895e358e96aef040a36a4", "filename": "gcc/ada/sem_elab.adb", "status": "modified", "additions": 4486, "deletions": 606, "changes": 5092, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/967947ed6b3b9e1b3723b2587feccb4dac47715e/gcc%2Fada%2Fsem_elab.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/967947ed6b3b9e1b3723b2587feccb4dac47715e/gcc%2Fada%2Fsem_elab.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_elab.adb?ref=967947ed6b3b9e1b3723b2587feccb4dac47715e"}, {"sha": "21518be825c116a9e9ddbab46fb6a97c0a3c8302", "filename": "gcc/ada/sem_elab.ads", "status": "modified", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/967947ed6b3b9e1b3723b2587feccb4dac47715e/gcc%2Fada%2Fsem_elab.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/967947ed6b3b9e1b3723b2587feccb4dac47715e/gcc%2Fada%2Fsem_elab.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_elab.ads?ref=967947ed6b3b9e1b3723b2587feccb4dac47715e", "patch": "@@ -125,4 +125,69 @@ package Sem_Elab is\n    --  ABE diagnostics or runtime checks. If this is the case, store N into\n    --  a table for later processing.\n \n+   ---------------------------------------------------------------------------\n+   --                                                                       --\n+   --  L E G A C Y    A C C E S S    B E F O R E    E L A B O R A T I O N   --\n+   --                                                                       --\n+   --                          M E C H A N I S M                            --\n+   --                                                                       --\n+   ---------------------------------------------------------------------------\n+\n+   --  This section contains the implementation of the pre-18.x Legacy ABE\n+   --  Mechanism. The mechanism can be activated using switch -gnatH (legacy\n+   --  elaboration checking mode enabled).\n+\n+   procedure Check_Elab_Assign (N : Node_Id);\n+   --  N is either the left side of an assignment, or a procedure argument for\n+   --  a mode OUT or IN OUT formal. This procedure checks for a possible case\n+   --  of access to an entity from elaboration code before the entity has been\n+   --  initialized, and issues appropriate warnings.\n+\n+   procedure Check_Elab_Call\n+     (N            : Node_Id;\n+      Outer_Scope  : Entity_Id := Empty;\n+      In_Init_Proc : Boolean   := False);\n+   --  Check a call for possible elaboration problems. The node N is either an\n+   --  N_Function_Call or N_Procedure_Call_Statement node or an access\n+   --  attribute reference whose prefix is a subprogram.\n+   --\n+   --  If SPARK_Mode is On, then N can also be a variable reference, since\n+   --  SPARK requires the use of Elaborate_All for references to variables\n+   --  in other packages.\n+\n+   --  The Outer_Scope argument indicates whether this is an outer level\n+   --  call from Sem_Res (Outer_Scope set to Empty), or an internal recursive\n+   --  call (Outer_Scope set to entity of outermost call, see body). The flag\n+   --  In_Init_Proc should be set whenever the current context is a type\n+   --  init proc.\n+\n+   --  Note: this might better be called Check_Elab_Reference (to recognize\n+   --  the SPARK case), but we prefer to keep the original name, since this\n+   --  is primarily used for checking for calls that could generate an ABE).\n+\n+   procedure Check_Elab_Calls;\n+   --  Not all the processing for Check_Elab_Call can be done at the time\n+   --  of calls to Check_Elab_Call. This is because for internal calls, we\n+   --  need to wait to complete the check until all generic bodies have been\n+   --  instantiated. The Check_Elab_Calls procedure cleans up these waiting\n+   --  checks. It is called once after the completion of instantiation.\n+\n+   procedure Check_Elab_Instantiation\n+     (N           : Node_Id;\n+      Outer_Scope : Entity_Id := Empty);\n+   --  Check an instantiation for possible elaboration problems. N is an\n+   --  instantiation node (N_Package_Instantiation, N_Function_Instantiation,\n+   --  or N_Procedure_Instantiation), and Outer_Scope indicates if this is\n+   --  an outer level call from Sem_Ch12 (Outer_Scope set to Empty), or an\n+   --  internal recursive call (Outer_Scope set to scope of outermost call,\n+   --  see body for further details). The returned value is relevant only\n+   --  for an outer level call, and is set to False if an elaboration error\n+   --  is bound to occur on the instantiation, and True otherwise. This is\n+   --  used by the caller to signal that the body of the instance should\n+   --  not be generated (see detailed description in body).\n+\n+   procedure Check_Task_Activation (N : Node_Id);\n+   --  At the point at which tasks are activated in a package body, check\n+   --  that the bodies of the tasks are elaborated.\n+\n end Sem_Elab;"}, {"sha": "86602ad7cd3d10481a610bdab985c65ddab2fcbf", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/967947ed6b3b9e1b3723b2587feccb4dac47715e/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/967947ed6b3b9e1b3723b2587feccb4dac47715e/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=967947ed6b3b9e1b3723b2587feccb4dac47715e", "patch": "@@ -15008,6 +15008,25 @@ package body Sem_Prag is\n                      Set_Elaborate_Present (Citem, True);\n                      Set_Elab_Unit_Name (Get_Pragma_Arg (Arg), Name (Citem));\n \n+                     --  With the pragma present, elaboration calls on\n+                     --  subprograms from the named unit need no further\n+                     --  checks, as long as the pragma appears in the current\n+                     --  compilation unit. If the pragma appears in some unit\n+                     --  in the context, there might still be a need for an\n+                     --  Elaborate_All_Desirable from the current compilation\n+                     --  to the named unit, so we keep the check enabled. This\n+                     --  does not apply in SPARK mode, where we allow pragma\n+                     --  Elaborate, but we don't trust it to be right so we\n+                     --  will still insist on the Elaborate_All.\n+\n+                     if Legacy_Elaboration_Checks\n+                       and then In_Extended_Main_Source_Unit (N)\n+                       and then SPARK_Mode /= On\n+                     then\n+                        Set_Suppress_Elaboration_Warnings\n+                          (Entity (Name (Citem)));\n+                     end if;\n+\n                      exit Inner;\n                   end if;\n \n@@ -15067,6 +15086,17 @@ package body Sem_Prag is\n                      Set_Elaborate_All_Present (Citem, True);\n                      Set_Elab_Unit_Name (Get_Pragma_Arg (Arg), Name (Citem));\n \n+                     --  Suppress warnings and elaboration checks on the named\n+                     --  unit if the pragma is in the current compilation, as\n+                     --  for pragma Elaborate.\n+\n+                     if Legacy_Elaboration_Checks\n+                       and then In_Extended_Main_Source_Unit (N)\n+                     then\n+                        Set_Suppress_Elaboration_Warnings\n+                          (Entity (Name (Citem)));\n+                     end if;\n+\n                      exit Innr;\n                   end if;\n \n@@ -15116,6 +15146,27 @@ package body Sem_Prag is\n             else\n                Set_Body_Required (Cunit_Node);\n                Set_Has_Pragma_Elaborate_Body (Cunit_Ent);\n+\n+               --  If we are in dynamic elaboration mode, then we suppress\n+               --  elaboration warnings for the unit, since it is definitely\n+               --  fine NOT to do dynamic checks at the first level (and such\n+               --  checks will be suppressed because no elaboration boolean\n+               --  is created for Elaborate_Body packages).\n+               --\n+               --  But in the static model of elaboration, Elaborate_Body is\n+               --  definitely NOT good enough to ensure elaboration safety on\n+               --  its own, since the body may WITH other units that are not\n+               --  safe from an elaboration point of view, so a client must\n+               --  still do an Elaborate_All on such units.\n+               --\n+               --  Debug flag -gnatdD restores the old behavior of 3.13, where\n+               --  Elaborate_Body always suppressed elab warnings.\n+\n+               if Legacy_Elaboration_Checks\n+                 and then (Dynamic_Elaboration_Checks or Debug_Flag_DD)\n+               then\n+                  Set_Suppress_Elaboration_Warnings (Cunit_Ent);\n+               end if;\n             end if;\n          end Elaborate_Body;\n \n@@ -20193,6 +20244,10 @@ package body Sem_Prag is\n                else\n                   if not Debug_Flag_U then\n                      Set_Is_Preelaborated (Ent);\n+\n+                     if Legacy_Elaboration_Checks then\n+                        Set_Suppress_Elaboration_Warnings (Ent);\n+                     end if;\n                   end if;\n                end if;\n             end if;\n@@ -20820,6 +20875,10 @@ package body Sem_Prag is\n             if not Debug_Flag_U then\n                Set_Is_Pure (Ent);\n                Set_Has_Pragma_Pure (Ent);\n+\n+               if Legacy_Elaboration_Checks then\n+                  Set_Suppress_Elaboration_Warnings (Ent);\n+               end if;\n             end if;\n          end Pure;\n "}, {"sha": "5c87fa163704aa744013fc6f241e7b24c47777a0", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 34, "deletions": 7, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/967947ed6b3b9e1b3723b2587feccb4dac47715e/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/967947ed6b3b9e1b3723b2587feccb4dac47715e/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=967947ed6b3b9e1b3723b2587feccb4dac47715e", "patch": "@@ -5116,6 +5116,7 @@ package body Sem_Res is\n       --  statement.\n \n       if Nkind (N) = N_Allocator then\n+\n          --  Avoid coextension processing for an allocator that is the\n          --  expansion of a build-in-place function call.\n \n@@ -5166,9 +5167,10 @@ package body Sem_Res is\n                if not Is_Static_Coextension (N) then\n                   Set_Is_Dynamic_Coextension (N);\n \n-                  --  ??? We currently do not handle finalization and\n-                  --  deallocation of coextensions properly so let's at\n-                  --  least warn the user about it.\n+                  --  Finalization and deallocation of coextensions utilizes an\n+                  --  approximate implementation which does not directly adhere\n+                  --  to the semantic rules. Warn on potential issues involving\n+                  --  coextensions.\n \n                   if Is_Controlled (Desig_T) then\n                      Error_Msg_N\n@@ -5187,10 +5189,11 @@ package body Sem_Res is\n                Set_Is_Dynamic_Coextension (N, False);\n                Set_Is_Static_Coextension  (N, False);\n \n-               --  ??? It seems we also do not properly finalize anonymous\n-               --  access-to-controlled objects within their declared scope and\n-               --  instead finalize them with their associated unit. Warn the\n-               --  user about it here.\n+               --  Anonymous access-to-controlled objects are not finalized on\n+               --  time because this involves run-time ownership and currently\n+               --  this property is not available. In rare cases the object may\n+               --  not be finalized at all. Warn on potential issues involving\n+               --  anonymous access-to-controlled objects.\n \n                if Ekind (Typ) = E_Anonymous_Access_Type\n                  and then Is_Controlled_Active (Desig_T)\n@@ -5910,6 +5913,10 @@ package body Sem_Res is\n       then\n          Resolve_Entry_Call (N, Typ);\n \n+         if Legacy_Elaboration_Checks then\n+            Check_Elab_Call (N);\n+         end if;\n+\n          --  Annotate the tree by creating a call marker in case the original\n          --  call is transformed by expansion. The call marker is automatically\n          --  saved for later examination by the ABE Processing phase.\n@@ -6193,6 +6200,10 @@ package body Sem_Res is\n                   Set_Etype (N, Typ);\n                   Resolve_Indexed_Component (N, Typ);\n \n+                  if Legacy_Elaboration_Checks then\n+                     Check_Elab_Call (Prefix (N));\n+                  end if;\n+\n                   --  Annotate the tree by creating a call marker in case\n                   --  the original call is transformed by expansion. The call\n                   --  marker is automatically saved for later examination by\n@@ -6710,6 +6721,10 @@ package body Sem_Res is\n \n       Eval_Call (N);\n \n+      if Legacy_Elaboration_Checks then\n+         Check_Elab_Call (N);\n+      end if;\n+\n       --  Annotate the tree by creating a call marker in case the original call\n       --  is transformed by expansion. The call marker is automatically saved\n       --  for later examination by the ABE Processing phase.\n@@ -7354,6 +7369,18 @@ package body Sem_Res is\n                   & \"(SPARK RM 7.1.3(12))\", N);\n             end if;\n \n+            --  Check for possible elaboration issues with respect to reads of\n+            --  variables. The act of renaming the variable is not considered a\n+            --  read as it simply establishes an alias.\n+\n+            if Legacy_Elaboration_Checks\n+              and then Ekind (E) = E_Variable\n+              and then Dynamic_Elaboration_Checks\n+              and then Nkind (Par) /= N_Object_Renaming_Declaration\n+            then\n+               Check_Elab_Call (N);\n+            end if;\n+\n             --  The variable may eventually become a constituent of a single\n             --  protected/task type. Record the reference now and verify its\n             --  legality when analyzing the contract of the variable"}, {"sha": "3209df418da63fe414e9ebf7bd538fbbf0eb1d2a", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/967947ed6b3b9e1b3723b2587feccb4dac47715e/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/967947ed6b3b9e1b3723b2587feccb4dac47715e/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=967947ed6b3b9e1b3723b2587feccb4dac47715e", "patch": "@@ -9086,7 +9086,8 @@ package body Sem_Util is\n \n          Lit := First_Literal (Btyp);\n \n-         --  Position in the enumeration type starts at 0.\n+         --  Position in the enumeration type starts at 0\n+\n          if UI_To_Int (Pos) < 0 then\n             raise Constraint_Error;\n          end if;\n@@ -12224,7 +12225,8 @@ package body Sem_Util is\n    ---------------------------------------\n \n    function Incomplete_View_From_Limited_With\n-     (Typ : Entity_Id) return Entity_Id is\n+     (Typ : Entity_Id) return Entity_Id\n+   is\n    begin\n       --  It might make sense to make this an attribute in Einfo, and set it\n       --  in Sem_Ch10 in Build_Shadow_Entity. However, we're running short on\n@@ -18026,6 +18028,14 @@ package body Sem_Util is\n    --  Start of processing for Mark_Elaboration_Attributes\n \n    begin\n+      --  Do not capture any elaboration-related attributes when switch -gnatH\n+      --  (legacy elaboration checking mode enabled) is in effect because the\n+      --  attributes are useless to the legacy model.\n+\n+      if Legacy_Elaboration_Checks then\n+         return;\n+      end if;\n+\n       if Nkind (N_Id) in N_Entity then\n          Mark_Elaboration_Attributes_Id (N_Id);\n       else"}, {"sha": "494b46ab4fa6dfbf4bef5ea2210f8ce891a4a190", "filename": "gcc/ada/sinfo.adb", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/967947ed6b3b9e1b3723b2587feccb4dac47715e/gcc%2Fada%2Fsinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/967947ed6b3b9e1b3723b2587feccb4dac47715e/gcc%2Fada%2Fsinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.adb?ref=967947ed6b3b9e1b3723b2587feccb4dac47715e", "patch": "@@ -2051,8 +2051,11 @@ package body Sinfo is\n    begin\n       pragma Assert (False\n         or else NT (N).Nkind = N_Call_Marker\n+        or else NT (N).Nkind = N_Formal_Package_Declaration\n+        or else NT (N).Nkind = N_Function_Call\n         or else NT (N).Nkind = N_Function_Instantiation\n         or else NT (N).Nkind = N_Package_Instantiation\n+        or else NT (N).Nkind = N_Procedure_Call_Statement\n         or else NT (N).Nkind = N_Procedure_Instantiation);\n       return Flag18 (N);\n    end Is_Known_Guaranteed_ABE;\n@@ -2543,6 +2546,15 @@ package body Sinfo is\n       return Flag7 (N);\n    end No_Ctrl_Actions;\n \n+   function No_Elaboration_Check\n+      (N : Node_Id) return Boolean is\n+   begin\n+      pragma Assert (False\n+        or else NT (N).Nkind = N_Function_Call\n+        or else NT (N).Nkind = N_Procedure_Call_Statement);\n+      return Flag4 (N);\n+   end No_Elaboration_Check;\n+\n    function No_Entities_Ref_In_Spec\n       (N : Node_Id) return Boolean is\n    begin\n@@ -5502,8 +5514,11 @@ package body Sinfo is\n    begin\n       pragma Assert (False\n         or else NT (N).Nkind = N_Call_Marker\n+        or else NT (N).Nkind = N_Formal_Package_Declaration\n+        or else NT (N).Nkind = N_Function_Call\n         or else NT (N).Nkind = N_Function_Instantiation\n         or else NT (N).Nkind = N_Package_Instantiation\n+        or else NT (N).Nkind = N_Procedure_Call_Statement\n         or else NT (N).Nkind = N_Procedure_Instantiation);\n       Set_Flag18 (N, Val);\n    end Set_Is_Known_Guaranteed_ABE;\n@@ -5994,6 +6009,15 @@ package body Sinfo is\n       Set_Flag7 (N, Val);\n    end Set_No_Ctrl_Actions;\n \n+   procedure Set_No_Elaboration_Check\n+      (N : Node_Id; Val : Boolean := True) is\n+   begin\n+      pragma Assert (False\n+        or else NT (N).Nkind = N_Function_Call\n+        or else NT (N).Nkind = N_Procedure_Call_Statement);\n+      Set_Flag4 (N, Val);\n+   end Set_No_Elaboration_Check;\n+\n    procedure Set_No_Entities_Ref_In_Spec\n       (N : Node_Id; Val : Boolean := True) is\n    begin"}, {"sha": "87d68ea71908ccef0ef692bd611f67f962ee46ab", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 41, "deletions": 5, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/967947ed6b3b9e1b3723b2587feccb4dac47715e/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/967947ed6b3b9e1b3723b2587feccb4dac47715e/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=967947ed6b3b9e1b3723b2587feccb4dac47715e", "patch": "@@ -1844,11 +1844,24 @@ package Sinfo is\n    --    finalization actions in initialization contexts.\n \n    --  Is_Known_Guaranteed_ABE (Flag18-Sem)\n-   --    Present in call markers and instantiations. Set when the elaboration\n-   --    or evaluation of the scenario results in a guaranteed ABE. The flag\n-   --    is used to suppress the instantiation of generic bodies because gigi\n-   --    cannot handle certain forms of premature instantiation, as well as to\n-   --    prevent the reexamination of the node by the ABE Processing phase.\n+   --    NOTE: this flag is shared between the legacy ABE mechanism and the\n+   --    default ABE mechanism.\n+   --\n+   --    Present in the following nodes:\n+   --\n+   --      call marker\n+   --      formal package declaration\n+   --      function call\n+   --      function instantiation\n+   --      package instantiation\n+   --      procedure call statement\n+   --      procedure instantiation\n+   --\n+   --    Set when the elaboration or evaluation of the scenario results in\n+   --    a guaranteed ABE. The flag is used to suppress the instantiation of\n+   --    generic bodies because gigi cannot handle certain forms of premature\n+   --    instantiation, as well as to prevent the reexamination of the node by\n+   --    the ABE Processing phase.\n \n    --  Is_Machine_Number (Flag11-Sem)\n    --    This flag is set in an N_Real_Literal node to indicate that the value\n@@ -2117,6 +2130,16 @@ package Sinfo is\n    --    expansions where the generated assignments are initializations, not\n    --    real assignments.\n \n+   --  No_Elaboration_Check (Flag4-Sem)\n+   --    NOTE: this flag is relevant only for the legacy ABE mechanism and\n+   --    should not be used outside of that context.\n+   --\n+   --    Present in N_Function_Call and N_Procedure_Call_Statement. Indicates\n+   --    that no elaboration check is needed on the call, because it appears in\n+   --    the context of a local Suppress pragma. This is used on calls within\n+   --    task bodies, where the actual elaboration checks are applied after\n+   --    analysis, when the local scope stack is not present\n+\n    --  No_Entities_Ref_In_Spec (Flag8-Sem)\n    --    Present in N_With_Clause nodes. Set if the with clause is on the\n    --    package or subprogram spec where the main unit is the corresponding\n@@ -5515,7 +5538,9 @@ package Sinfo is\n       --  Is_Elaboration_Checks_OK_Node (Flag1-Sem)\n       --  Is_SPARK_Mode_On_Node (Flag2-Sem)\n       --  Is_Elaboration_Warnings_OK_Node (Flag3-Sem)\n+      --  No_Elaboration_Check (Flag4-Sem)\n       --  Do_Tag_Check (Flag13-Sem)\n+      --  Is_Known_Guaranteed_ABE (Flag18-Sem)\n       --  plus fields for expression\n \n       --  If any IN parameter requires a range check, then the corresponding\n@@ -5546,9 +5571,11 @@ package Sinfo is\n       --  Is_Elaboration_Checks_OK_Node (Flag1-Sem)\n       --  Is_SPARK_Mode_On_Node (Flag2-Sem)\n       --  Is_Elaboration_Warnings_OK_Node (Flag3-Sem)\n+      --  No_Elaboration_Check (Flag4-Sem)\n       --  Is_Expanded_Build_In_Place_Call (Flag11-Sem)\n       --  Do_Tag_Check (Flag13-Sem)\n       --  No_Side_Effect_Removal (Flag17-Sem)\n+      --  Is_Known_Guaranteed_ABE (Flag18-Sem)\n       --  plus fields for expression\n \n       --------------------------------\n@@ -7422,6 +7449,7 @@ package Sinfo is\n       --   empty generic actual part)\n       --  Box_Present (Flag15)\n       --  Instance_Spec (Node5-Sem)\n+      --  Is_Known_Guaranteed_ABE (Flag18-Sem)\n \n       --------------------------------------\n       -- 12.7  Formal Package Actual Part --\n@@ -9940,6 +9968,9 @@ package Sinfo is\n    function No_Ctrl_Actions\n      (N : Node_Id) return Boolean;    -- Flag7\n \n+   function No_Elaboration_Check\n+     (N : Node_Id) return Boolean;    -- Flag4\n+\n    function No_Entities_Ref_In_Spec\n      (N : Node_Id) return Boolean;    -- Flag8\n \n@@ -11038,6 +11069,9 @@ package Sinfo is\n    procedure Set_No_Ctrl_Actions\n      (N : Node_Id; Val : Boolean := True);    -- Flag7\n \n+   procedure Set_No_Elaboration_Check\n+     (N : Node_Id; Val : Boolean := True);    -- Flag4\n+\n    procedure Set_No_Entities_Ref_In_Spec\n      (N : Node_Id; Val : Boolean := True);    -- Flag8\n \n@@ -13444,6 +13478,7 @@ package Sinfo is\n    pragma Inline (Next_Rep_Item);\n    pragma Inline (Next_Use_Clause);\n    pragma Inline (No_Ctrl_Actions);\n+   pragma Inline (No_Elaboration_Check);\n    pragma Inline (No_Entities_Ref_In_Spec);\n    pragma Inline (No_Initialization);\n    pragma Inline (No_Minimize_Eliminate);\n@@ -13806,6 +13841,7 @@ package Sinfo is\n    pragma Inline (Set_Next_Rep_Item);\n    pragma Inline (Set_Next_Use_Clause);\n    pragma Inline (Set_No_Ctrl_Actions);\n+   pragma Inline (Set_No_Elaboration_Check);\n    pragma Inline (Set_No_Entities_Ref_In_Spec);\n    pragma Inline (Set_No_Initialization);\n    pragma Inline (Set_No_Minimize_Eliminate);"}, {"sha": "c6ba97977250fd7358abd3b4015eed50ba543975", "filename": "gcc/ada/switch-c.adb", "status": "modified", "additions": 81, "deletions": 15, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/967947ed6b3b9e1b3723b2587feccb4dac47715e/gcc%2Fada%2Fswitch-c.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/967947ed6b3b9e1b3723b2587feccb4dac47715e/gcc%2Fada%2Fswitch-c.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fswitch-c.adb?ref=967947ed6b3b9e1b3723b2587feccb4dac47715e", "patch": "@@ -131,13 +131,22 @@ package body Switch.C is\n       Args         : String_List;\n       Arg_Rank     : Positive)\n    is\n-      First_Switch : Boolean := True;\n-      --  False for all but first switch\n-\n       Max : constant Natural := Switch_Chars'Last;\n-      Ptr : Natural;\n       C   : Character := ' ';\n+      Ptr : Natural;\n+\n       Dot : Boolean;\n+      --  This flag is set upon encountering a dot in a debug switch\n+\n+      First_Char : Positive;\n+      --  Marks start of switch to be stored\n+\n+      First_Ptr : Positive;\n+      --  Save position of first character after -gnatd (for checking that\n+      --  debug flags that must come first are first, in particular -gnatd.b).\n+\n+      First_Switch : Boolean := True;\n+      --  False for all but first switch\n \n       Store_Switch : Boolean;\n       --  For -gnatxx switches, the normal processing, signalled by this flag\n@@ -148,12 +157,8 @@ package body Switch.C is\n       --  appropriate calls to Store_Compilation_Switch are made from within\n       --  the case branch.\n \n-      First_Char : Positive;\n-      --  Marks start of switch to be stored\n-\n-      First_Ptr : Positive;\n-      --  Save position of first character after -gnatd (for checking that\n-      --  debug flags that must come first are first, in particular -gnatd.b),\n+      Underscore : Boolean;\n+      --  This flag is set upon encountering an underscode in a debug switch\n \n    begin\n       Ptr := Switch_Chars'First;\n@@ -342,8 +347,10 @@ package body Switch.C is\n             --  -gnatd (compiler debug options)\n \n             when 'd' =>\n+               Dot          := False;\n                Store_Switch := False;\n-               Dot := False;\n+               Underscore   := False;\n+\n                First_Ptr := Ptr + 1;\n \n                --  Note: for the debug switch, the remaining characters in this\n@@ -374,11 +381,17 @@ package body Switch.C is\n                                      or else not First_Switch)\n                         then\n                            Osint.Fail\n-                             (\"-gnatd.b must be first if combined \"\n-                              & \"with other switches\");\n+                             (\"-gnatd.b must be first if combined with other \"\n+                              & \"switches\");\n                         end if;\n \n-                     --  Not a dotted flag\n+                     --  Case of an underscored flag\n+\n+                     elsif Underscore then\n+                        Set_Underscored_Debug_Flag (C);\n+                        Store_Compilation_Switch (\"-gnatd_\" & C);\n+\n+                     --  Normal flag\n \n                      else\n                         Set_Debug_Flag (C);\n@@ -388,8 +401,15 @@ package body Switch.C is\n                   elsif C = '.' then\n                      Dot := True;\n \n+                  elsif C = '_' then\n+                     Underscore := True;\n+\n                   elsif Dot then\n                      Bad_Switch (\"-gnatd.\" & Switch_Chars (Ptr .. Max));\n+\n+                  elsif Underscore then\n+                     Bad_Switch (\"-gnatd_\" & Switch_Chars (Ptr .. Max));\n+\n                   else\n                      Bad_Switch (\"-gnatd\" & Switch_Chars (Ptr .. Max));\n                   end if;\n@@ -879,6 +899,12 @@ package body Switch.C is\n                Ptr := Ptr + 1;\n                Usage_Requested := True;\n \n+            --  -gnatH (legacy static elaboration checking mode enabled)\n+\n+            when 'H' =>\n+               Ptr := Ptr + 1;\n+               Legacy_Elaboration_Checks := True;\n+\n             --  -gnati (character set)\n \n             when 'i' =>\n@@ -916,6 +942,46 @@ package body Switch.C is\n                Ptr := Ptr + 1;\n                Scan_Nat (Switch_Chars, Max, Ptr, Error_Msg_Line_Length, C);\n \n+            --  -gnatJ (relaxed elaboration checking mode enabled)\n+\n+            when 'J' =>\n+               Ptr := Ptr + 1;\n+               Relaxed_Elaboration_Checks := True;\n+\n+               --  Common relaxations for both ABE mechanisms\n+               --\n+               --  -gnatd.G (ignore calls through generic formal parameters for\n+               --            elaboration)\n+               --  -gnatd.U (ignore indirect calls for static elaboration)\n+               --  -gnatd.y (disable implicit pragma Elaborate_All on task\n+               --            bodies)\n+\n+               Debug_Flag_Dot_GG := True;\n+               Debug_Flag_Dot_UU := True;\n+               Debug_Flag_Dot_Y  := True;\n+\n+               --  Relaxatons to the legacy ABE mechanism\n+\n+               if Legacy_Elaboration_Checks then\n+                  null;\n+\n+               --  Relaxations to the default ABE mechanism\n+               --\n+               --  -gnatd_a (stop elaboration checks on accept or select\n+               --            statement)\n+               --  -gnatd_e (ignore entry calls and requeue statements for\n+               --            elaboration)\n+               --  -gnatd_p (ignore assertion pragmas for elaboration)\n+               --  -gnatdL  (ignore activations and calls to instances for\n+               --            elaboration)\n+\n+               else\n+                  Debug_Flag_Underscore_A := True;\n+                  Debug_Flag_Underscore_E := True;\n+                  Debug_Flag_Underscore_P := True;\n+                  Debug_Flag_LL           := True;\n+               end if;\n+\n             --  -gnatk (limit file name length)\n \n             when 'k' =>\n@@ -1267,7 +1333,7 @@ package body Switch.C is\n                         Bad_Switch (\"-gnatw_\" & Switch_Chars (Ptr .. Max));\n                      end if;\n \n-                  --  Normal case, no dot\n+                  --  Normal case\n \n                   else\n                      if Set_Warning_Switch (C) then"}, {"sha": "c46a73bc838d96231e6e32b7cc39d2d8d892bed4", "filename": "gcc/ada/tracebak.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/967947ed6b3b9e1b3723b2587feccb4dac47715e/gcc%2Fada%2Ftracebak.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/967947ed6b3b9e1b3723b2587feccb4dac47715e/gcc%2Fada%2Ftracebak.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftracebak.c?ref=967947ed6b3b9e1b3723b2587feccb4dac47715e", "patch": "@@ -373,7 +373,11 @@ extern void __runnit(); /* thread entry point.  */\n   (defined (__powerpc__) && defined (__Lynx__) && defined(__ELF__)) || \\\n   (defined (__linux__) && defined (__powerpc__))\n \n+#if defined (_ARCH_PPC64) && !defined (__USING_SJLJ_EXCEPTIONS__)\n+#define USE_GCC_UNWINDER\n+#else\n #define USE_GENERIC_UNWINDER\n+#endif\n \n struct layout\n {"}, {"sha": "66b860c90b90a0eb36c3286a3c9b43295ec4ce16", "filename": "gcc/ada/usage.adb", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/967947ed6b3b9e1b3723b2587feccb4dac47715e/gcc%2Fada%2Fusage.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/967947ed6b3b9e1b3723b2587feccb4dac47715e/gcc%2Fada%2Fusage.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fusage.adb?ref=967947ed6b3b9e1b3723b2587feccb4dac47715e", "patch": "@@ -302,6 +302,11 @@ begin\n    Write_Switch_Char (\"h\");\n    Write_Line (\"Output this usage (help) information\");\n \n+   --  Line for -gnatH switch\n+\n+   Write_Switch_Char (\"H\");\n+   Write_Line (\"Legacy elaboration checking mode enabled\");\n+\n    --  Line for -gnati switch\n \n    Write_Switch_Char (\"i?\");\n@@ -317,6 +322,11 @@ begin\n    Write_Switch_Char (\"jnn\");\n    Write_Line (\"Format error and warning messages to fit nn character lines\");\n \n+   --  Line for -gnatJ switch\n+\n+   Write_Switch_Char (\"J\");\n+   Write_Line (\"Relaxed elaboration checking mode enabled\");\n+\n    --  Line for -gnatk switch\n \n    Write_Switch_Char (\"k\");"}]}