{"sha": "eafeba3e5187a53a4c08a3285b4b220e1ab68b60", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWFmZWJhM2U1MTg3YTUzYTRjMDhhMzI4NWI0YjIyMGUxYWI2OGI2MA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-04-16T07:37:44Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-04-16T10:54:38Z"}, "message": "middle-end/94614 - avoid multiword moves to nothing\n\nThis adjusts emit_move_multi_word to handle moves into paradoxical\nsubregs parts that are not there and adjusts lower-subregs\nCLOBBER resolving to deal with those as well.\n\n2020-04-16  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/94614\n\t* expr.c (emit_move_multi_word): Do not generate code when\n\tthe destination part is undefined_operand_subword_p.\n\t* lower-subreg.c (resolve_clobber): Look through a paradoxica\n\tsubreg.", "tree": {"sha": "130e5753d2a1ad6a56f8c33c1c51c2f13e5e7a2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/130e5753d2a1ad6a56f8c33c1c51c2f13e5e7a2d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eafeba3e5187a53a4c08a3285b4b220e1ab68b60", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eafeba3e5187a53a4c08a3285b4b220e1ab68b60", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eafeba3e5187a53a4c08a3285b4b220e1ab68b60", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eafeba3e5187a53a4c08a3285b4b220e1ab68b60/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "437eea66a4b010d8e94aa81c2b40ccf0588e5fab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/437eea66a4b010d8e94aa81c2b40ccf0588e5fab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/437eea66a4b010d8e94aa81c2b40ccf0588e5fab"}], "stats": {"total": 17, "additions": 17, "deletions": 0}, "files": [{"sha": "9f2f5db6f2f9284faf4a8e6ba74521a08105ac48", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eafeba3e5187a53a4c08a3285b4b220e1ab68b60/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eafeba3e5187a53a4c08a3285b4b220e1ab68b60/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=eafeba3e5187a53a4c08a3285b4b220e1ab68b60", "patch": "@@ -1,3 +1,11 @@\n+2020-04-16  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/94614\n+\t* expr.c (emit_move_multi_word): Do not generate code when\n+\tthe destination part is undefined_operand_subword_p.\n+\t* lower-subreg.c (resolve_clobber): Look through a paradoxica\n+\tsubreg.\n+\n 2020-04-16  Martin Jambor  <mjambor@suse.cz>\n \n \tPR tree-optimization/94598"}, {"sha": "dfbeae71518f6b5381a42877013ac21ad657f621", "filename": "gcc/expr.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eafeba3e5187a53a4c08a3285b4b220e1ab68b60/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eafeba3e5187a53a4c08a3285b4b220e1ab68b60/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=eafeba3e5187a53a4c08a3285b4b220e1ab68b60", "patch": "@@ -3692,6 +3692,11 @@ emit_move_multi_word (machine_mode mode, rtx x, rtx y)\n   need_clobber = false;\n   for (i = 0; i < CEIL (mode_size, UNITS_PER_WORD); i++)\n     {\n+      /* Do not generate code for a move if it would go entirely\n+\t to the non-existing bits of a paradoxical subreg.  */\n+      if (undefined_operand_subword_p (x, i))\n+\tcontinue;\n+\n       rtx xpart = operand_subword (x, i, 1, mode);\n       rtx ypart;\n "}, {"sha": "a11e535b5bfb2006e12f46a2d4b655f6fe06e093", "filename": "gcc/lower-subreg.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eafeba3e5187a53a4c08a3285b4b220e1ab68b60/gcc%2Flower-subreg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eafeba3e5187a53a4c08a3285b4b220e1ab68b60/gcc%2Flower-subreg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flower-subreg.c?ref=eafeba3e5187a53a4c08a3285b4b220e1ab68b60", "patch": "@@ -1150,6 +1150,10 @@ resolve_clobber (rtx pat, rtx_insn *insn)\n   int ret;\n \n   reg = XEXP (pat, 0);\n+  /* For clobbers we can look through paradoxical subregs which\n+     we do not handle in simplify_gen_subreg_concatn.  */\n+  if (paradoxical_subreg_p (reg))\n+    reg = SUBREG_REG (reg);\n   if (!resolve_reg_p (reg) && !resolve_subreg_p (reg))\n     return false;\n "}]}