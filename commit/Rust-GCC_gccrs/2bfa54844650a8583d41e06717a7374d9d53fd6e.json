{"sha": "2bfa54844650a8583d41e06717a7374d9d53fd6e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmJmYTU0ODQ0NjUwYTg1ODNkNDFlMDY3MTdhNzM3NGQ5ZDUzZmQ2ZQ==", "commit": {"author": {"name": "Hristian Kirtchev", "email": "kirtchev@adacore.com", "date": "2011-09-02T09:45:45Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-09-02T09:45:45Z"}, "message": "exp_ch3.adb (Expand_Freeze_Class_Wide_Type): Do not create TSS routine Finalize_Address when compiling in Alfa mode.\n\n2011-09-02  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* exp_ch3.adb (Expand_Freeze_Class_Wide_Type): Do not create\n\tTSS routine Finalize_Address when compiling in Alfa mode.\n\t(Expand_Freeze_Record_Type): Do not create TSS routine\n\tFinalize_Address when compiling in Alfa mode.\n\t* exp_ch4.adb (Expand_Allocator_Expression): Do not produce a\n\tcall to Set_Finalize_Address in Alfa mode because Finalize_Address is\n\tnot built.\n\t(Expand_N_Allocator): Do not produce a call to\n\tSet_Finalize_Address in Alfa mode because Finalize_Address is not built.\n\t* exp_ch6.adb (Make_Build_In_Place_Call_In_Allocator): Do not\n\tproduce a call to primitive Set_Finalize_Address in Alfa mode because\n\tFinalize_Address is not built.\n\t* exp_ch7.adb (Build_Finalization_Master): Do not create\n\tfinalization masters in Afa mode since they are not needed.\n\t(Build_Finalizer): Do not create scope and library-level\n\tfinalizers in Alfa mode since they are not needed.\n\t* exp_util.adb (Build_Allocate_Deallocate_Proc): Do not expand\n\t\"new\" and \"free\" when applied to controlled objects in Alfa mode since\n\tthis is not needed.\n\nFrom-SVN: r178456", "tree": {"sha": "466e29e74579589ba07fd1bf7cfea10d93f0c0e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/466e29e74579589ba07fd1bf7cfea10d93f0c0e6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2bfa54844650a8583d41e06717a7374d9d53fd6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bfa54844650a8583d41e06717a7374d9d53fd6e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2bfa54844650a8583d41e06717a7374d9d53fd6e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bfa54844650a8583d41e06717a7374d9d53fd6e/comments", "author": {"login": "kirtchev-adacore", "id": 60669983, "node_id": "MDQ6VXNlcjYwNjY5OTgz", "avatar_url": "https://avatars.githubusercontent.com/u/60669983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kirtchev-adacore", "html_url": "https://github.com/kirtchev-adacore", "followers_url": "https://api.github.com/users/kirtchev-adacore/followers", "following_url": "https://api.github.com/users/kirtchev-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/kirtchev-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/kirtchev-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kirtchev-adacore/subscriptions", "organizations_url": "https://api.github.com/users/kirtchev-adacore/orgs", "repos_url": "https://api.github.com/users/kirtchev-adacore/repos", "events_url": "https://api.github.com/users/kirtchev-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/kirtchev-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7a0ddd20bc526b759435503c980c9641a0bc6573", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a0ddd20bc526b759435503c980c9641a0bc6573", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a0ddd20bc526b759435503c980c9641a0bc6573"}], "stats": {"total": 113, "additions": 96, "deletions": 17}, "files": [{"sha": "98abf03e3714e187dc1752d980bd17a5fc1e3325", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bfa54844650a8583d41e06717a7374d9d53fd6e/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bfa54844650a8583d41e06717a7374d9d53fd6e/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=2bfa54844650a8583d41e06717a7374d9d53fd6e", "patch": "@@ -1,3 +1,25 @@\n+2011-09-02  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* exp_ch3.adb (Expand_Freeze_Class_Wide_Type): Do not create\n+\tTSS routine Finalize_Address when compiling in Alfa mode.\n+\t(Expand_Freeze_Record_Type): Do not create TSS routine\n+\tFinalize_Address when compiling in Alfa mode.\n+\t* exp_ch4.adb (Expand_Allocator_Expression): Do not produce a\n+\tcall to Set_Finalize_Address in Alfa mode because Finalize_Address is\n+\tnot built.\n+\t(Expand_N_Allocator): Do not produce a call to\n+\tSet_Finalize_Address in Alfa mode because Finalize_Address is not built.\n+\t* exp_ch6.adb (Make_Build_In_Place_Call_In_Allocator): Do not\n+\tproduce a call to primitive Set_Finalize_Address in Alfa mode because\n+\tFinalize_Address is not built.\n+\t* exp_ch7.adb (Build_Finalization_Master): Do not create\n+\tfinalization masters in Afa mode since they are not needed.\n+\t(Build_Finalizer): Do not create scope and library-level\n+\tfinalizers in Alfa mode since they are not needed.\n+\t* exp_util.adb (Build_Allocate_Deallocate_Proc): Do not expand\n+\t\"new\" and \"free\" when applied to controlled objects in Alfa mode since\n+\tthis is not needed.\n+\n 2011-09-02  Vincent Celier  <celier@adacore.com>\n \n \t* prj-nmsc.db: (Check_Stand_Alone_Library): For SALs, allow"}, {"sha": "56d0fa2ef6b1c2862886c472e3024b8964c84c88", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bfa54844650a8583d41e06717a7374d9d53fd6e/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bfa54844650a8583d41e06717a7374d9d53fd6e/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=2bfa54844650a8583d41e06717a7374d9d53fd6e", "patch": "@@ -5634,6 +5634,12 @@ package body Exp_Ch3 is\n \n       elsif CodePeer_Mode then\n          return;\n+\n+      --  Do not create TSS routine Finalize_Address when compiling in Alfa\n+      --  mode because it is not necessary and results in useless expansion.\n+\n+      elsif Alfa_Mode then\n+         return;\n       end if;\n \n       --  Create the body of TSS primitive Finalize_Address. This automatically\n@@ -6379,11 +6385,14 @@ package body Exp_Ch3 is\n \n             --  Create the body of TSS primitive Finalize_Address. This must\n             --  be done before the bodies of all predefined primitives are\n-            --  created. If Def_Id is limited, Stream_Input and Streap_Read\n-            --  may produce build-in-place allocations and for that the\n-            --  expander needs Finalize_Address.\n+            --  created. If Def_Id is limited, Stream_Input and Stream_Read\n+            --  may produce build-in-place allocations and for those the\n+            --  expander needs Finalize_Address. Do not create the body of\n+            --  Finalize_Address in Alfa mode since it is not needed.\n \n-            Make_Finalize_Address_Body (Def_Id);\n+            if not Alfa_Mode then\n+               Make_Finalize_Address_Body (Def_Id);\n+            end if;\n \n             Predef_List := Predefined_Primitive_Bodies (Def_Id, Renamed_Eq);\n             Append_Freeze_Actions (Def_Id, Predef_List);"}, {"sha": "4e652eb223494ce361ee7cecc564af306e63a11f", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 26, "deletions": 9, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bfa54844650a8583d41e06717a7374d9d53fd6e/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bfa54844650a8583d41e06717a7374d9d53fd6e/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=2bfa54844650a8583d41e06717a7374d9d53fd6e", "patch": "@@ -1149,12 +1149,19 @@ package body Exp_Ch4 is\n             --  Generate:\n             --    Set_Finalize_Address (<PtrT>FM, <T>FD'Unrestricted_Access);\n \n-            --  Since .NET/JVM compilers do not support address arithmetic,\n-            --  this call is skipped. The same is done for CodePeer because\n-            --  primitive Finalize_Address is never generated. Do not create\n-            --  this call if there is no allocator available any more.\n+            --  Do not generate this call in the following cases:\n+            --\n+            --    * .NET/JVM - these targets do not support address arithmetic\n+            --    and unchecked conversion, key elements of Finalize_Address.\n+            --\n+            --    * Alfa mode - the call is useless and results in unwanted\n+            --    expansion.\n+            --\n+            --    * CodePeer mode - TSS primitive Finalize_Address is not\n+            --    created in this mode.\n \n             if VM_Target = No_VM\n+              and then not Alfa_Mode\n               and then not CodePeer_Mode\n               and then Present (Finalization_Master (PtrT))\n               and then Present (Temp_Decl)\n@@ -3481,9 +3488,12 @@ package body Exp_Ch4 is\n          end if;\n \n          --  The finalization master must be inserted and analyzed as part of\n-         --  the current semantic unit.\n+         --  the current semantic unit. This form of expansion is not carried\n+         --  out in Alfa mode because it is useless.\n \n-         if No (Finalization_Master (PtrT)) then\n+         if No (Finalization_Master (PtrT))\n+           and then not Alfa_Mode\n+         then\n             Set_Finalization_Master (PtrT, Current_Anonymous_Master);\n          end if;\n       end if;\n@@ -3979,10 +3989,17 @@ package body Exp_Ch4 is\n                      --    Set_Finalize_Address\n                      --      (<PtrT>FM, <T>FD'Unrestricted_Access);\n \n-                     --  Do not generate the above for CodePeer compilations\n-                     --  because primitive Finalize_Address is never built.\n+                     --  Do not generate this call in the following cases:\n+                     --\n+                     --    * Alfa mode - the call is useless and results in\n+                     --    unwanted expansion.\n+                     --\n+                     --    * CodePeer mode - TSS primitive Finalize_Address is\n+                     --    not created in this mode.\n \n-                     elsif not CodePeer_Mode then\n+                     elsif not Alfa_Mode\n+                       and then not CodePeer_Mode\n+                     then\n                         Insert_Action (N,\n                           Make_Set_Finalize_Address_Call\n                             (Loc     => Loc,"}, {"sha": "fd85a038871f7aa9833e9921bedd3ecd4ecc72aa", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bfa54844650a8583d41e06717a7374d9d53fd6e/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bfa54844650a8583d41e06717a7374d9d53fd6e/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=2bfa54844650a8583d41e06717a7374d9d53fd6e", "patch": "@@ -6519,7 +6519,7 @@ package body Exp_Ch6 is\n \n          begin\n             --  Ada 2005 (AI-251): In class-wide interface objects we displace\n-            --  \"this\" to reference the base of the object --- required to get\n+            --  \"this\" to reference the base of the object required to get\n             --  access to the TSD of the object.\n \n             if Is_Class_Wide_Type (Etype (Exp))\n@@ -7245,10 +7245,14 @@ package body Exp_Ch6 is\n          then\n             null;\n \n-         --  Do not generate the call to Make_Set_Finalize_Address for\n-         --  CodePeer compilations because Finalize_Address is never built.\n+         --  Do not generate the call to Set_Finalize_Address in Alfa mode\n+         --  because it is not necessary and results in unwanted expansion.\n+         --  This expansion is also not carried out in CodePeer mode because\n+         --  Finalize_Address is never built.\n \n-         elsif not CodePeer_Mode then\n+         elsif not Alfa_Mode\n+           and then not CodePeer_Mode\n+         then\n             Insert_Action (Allocator,\n               Make_Set_Finalize_Address_Call (Loc,\n                 Typ     => Etype (Function_Id),"}, {"sha": "15980234386b517ac474528fc3eaad4f68e22bf4", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bfa54844650a8583d41e06717a7374d9d53fd6e/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bfa54844650a8583d41e06717a7374d9d53fd6e/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=2bfa54844650a8583d41e06717a7374d9d53fd6e", "patch": "@@ -888,6 +888,12 @@ package body Exp_Ch7 is\n         and then not Is_Controlled (Desig_Typ)\n       then\n          return;\n+\n+      --  Do not create finalization masters in Alfa mode because they result\n+      --  in unwanted expansion.\n+\n+      elsif Alfa_Mode then\n+         return;\n       end if;\n \n       declare\n@@ -2689,6 +2695,13 @@ package body Exp_Ch7 is\n    begin\n       Fin_Id := Empty;\n \n+      --  Do not perform this expansion in Alfa mode because it is not\n+      --  necessary.\n+\n+      if Alfa_Mode then\n+         return;\n+      end if;\n+\n       --  Step 1: Extract all lists which may contain controlled objects or\n       --  library-level tagged types.\n \n@@ -2844,6 +2857,13 @@ package body Exp_Ch7 is\n       --  which belongs to a protected type.\n \n    begin\n+      --  Do not perform this expansion in Alfa mode because we do not create\n+      --  finalizers in the first place.\n+\n+      if Alfa_Mode then\n+         return;\n+      end if;\n+\n       --  The At_End handler should have been assimilated by the finalizer\n \n       pragma Assert (No (At_End_Proc (HSS)));"}, {"sha": "022f5f63612ada9f9312f430ac75545a01f59cb8", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bfa54844650a8583d41e06717a7374d9d53fd6e/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bfa54844650a8583d41e06717a7374d9d53fd6e/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=2bfa54844650a8583d41e06717a7374d9d53fd6e", "patch": "@@ -480,6 +480,13 @@ package body Exp_Util is\n    --  Start of processing for Build_Allocate_Deallocate_Proc\n \n    begin\n+      --  Do not perform this expansion in Alfa mode because it is not\n+      --  necessary.\n+\n+      if Alfa_Mode then\n+         return;\n+      end if;\n+\n       --  Obtain the attributes of the allocation / deallocation\n \n       if Nkind (N) = N_Free_Statement then"}]}