{"sha": "bb8ebb7ff8bcf985f066e0757c91e00a76ea3559", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmI4ZWJiN2ZmOGJjZjk4NWYwNjZlMDc1N2M5MWUwMGE3NmVhMzU1OQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "1998-02-25T00:00:29Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1998-02-25T00:00:29Z"}, "message": "flags.h (g_switch_value, [...]): Declare.\n\n        * flags.h (g_switch_value, g_switch_set): Declare.\n        * alpha.c (override_options): Set g_switch_value=8 if not set.\n        * alpha/elf.h (CC1_SPEC): New.\n        (ASM_SPEC): New.\n        (LINK_SPEC): Pass along the -G value we were given.\n        (LOCAL_ASM_OP): Remove.\n        (ASM_OUTPUT_ALIGNED_LOCAL): Output to .bss or .sbss by size.\n        (MAX_OFILE_ALIGNMENT): New.\n        (BSS_SECTION_ASM_OP, SBSS_SECTION_ASM_OP, SDATA_SECTION_ASM_OP): New.\n        (EXTRA_SECTIONS): Add sbss and sdata.\n        (SECTION_FUNCTION_TEMPLATE): New.\n        (EXTRA_SECTION_FUNCTIONS): Use it.\n        (CTORS_SECTION_FUNCTION, DTORS_SECTION_FUNCTION): Remove.\n        (SELECT_SECTION): Use sdata when small enough.\n        * alpha/linux.h (ASM_SPEC): Remove.\n\nFrom-SVN: r18225", "tree": {"sha": "b90e4a3ffe7a935a921333adebab8e5aab3bc3a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b90e4a3ffe7a935a921333adebab8e5aab3bc3a4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bb8ebb7ff8bcf985f066e0757c91e00a76ea3559", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb8ebb7ff8bcf985f066e0757c91e00a76ea3559", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb8ebb7ff8bcf985f066e0757c91e00a76ea3559", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb8ebb7ff8bcf985f066e0757c91e00a76ea3559/comments", "author": null, "committer": null, "parents": [{"sha": "3eaa4d3b4dbca86aa581e83f0fb67b10900ff0a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3eaa4d3b4dbca86aa581e83f0fb67b10900ff0a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3eaa4d3b4dbca86aa581e83f0fb67b10900ff0a5"}], "stats": {"total": 117, "additions": 87, "deletions": 30}, "files": [{"sha": "847eb3ebea6965c441a69f1e3ae9107a247aa701", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb8ebb7ff8bcf985f066e0757c91e00a76ea3559/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb8ebb7ff8bcf985f066e0757c91e00a76ea3559/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bb8ebb7ff8bcf985f066e0757c91e00a76ea3559", "patch": "@@ -1,3 +1,22 @@\n+Tue Feb 24 23:54:07 1998  Richard Henderson  <rth@cygnus.com>\n+\n+\t* flags.h (g_switch_value, g_switch_set): Declare.\n+\t* alpha.c (override_options): Set g_switch_value=8 if not set.\n+\t* alpha/elf.h (CC1_SPEC): New.\n+\t(ASM_SPEC): New.\n+\t(LINK_SPEC): Pass along the -G value we were given.\n+\t(LOCAL_ASM_OP): Remove.\n+\t(ASM_OUTPUT_ALIGNED_LOCAL): Output to .bss or .sbss by size.\n+\t(MAX_OFILE_ALIGNMENT): New.\n+\t(BSS_SECTION_ASM_OP, SBSS_SECTION_ASM_OP, SDATA_SECTION_ASM_OP): New.\n+\t(EXTRA_SECTIONS): Add sbss and sdata.\n+\t(SECTION_FUNCTION_TEMPLATE): New.\n+\t(EXTRA_SECTION_FUNCTIONS): Use it.\n+\t(CTORS_SECTION_FUNCTION, DTORS_SECTION_FUNCTION): Remove.\n+\t(SELECT_SECTION): Use sdata when small enough.\n+\t* alpha/linux.h (ASM_SPEC): Remove.\n+\t\n+\n Mon Feb 23 15:09:18 1998  Bruno Haible <bruno@linuix.mathematik.uni-karlsruhe.de>\n         * config.sub (sco5): Fix typo.\n "}, {"sha": "171b311e201cbb3f7b74c126e653d24ef28f9e11", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb8ebb7ff8bcf985f066e0757c91e00a76ea3559/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb8ebb7ff8bcf985f066e0757c91e00a76ea3559/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=bb8ebb7ff8bcf985f066e0757c91e00a76ea3559", "patch": "@@ -301,6 +301,10 @@ override_options ()\n \n     alpha_memory_latency = lat;\n   }\n+\n+  /* Default the definition of \"small data\" to 8 bytes.  */\n+  if (!g_switch_set)\n+    g_switch_value = 8;\n }\n \f\n /* Returns 1 if VALUE is a mask that contains full bytes of zero or ones.  */"}, {"sha": "04bd3350be922b35e06ea7e9a968cf87fef2b7b1", "filename": "gcc/config/alpha/elf.h", "status": "modified", "additions": 60, "deletions": 27, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb8ebb7ff8bcf985f066e0757c91e00a76ea3559/gcc%2Fconfig%2Falpha%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb8ebb7ff8bcf985f066e0757c91e00a76ea3559/gcc%2Fconfig%2Falpha%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Felf.h?ref=bb8ebb7ff8bcf985f066e0757c91e00a76ea3559", "patch": "@@ -30,8 +30,15 @@ Boston, MA 02111-1307, USA.    */\n \n #undef ASM_FINAL_SPEC\n \n+#undef CC1_SPEC\n+#define CC1_SPEC  \"%{G*}\"\n+\n+#undef ASM_SPEC\n+#define ASM_SPEC  \"%{G*} %{relax:-relax}\"\n+\n #undef LINK_SPEC\n-#define LINK_SPEC \"-m elf64alpha -G 8 %{O*:-O3} %{!O*:-O1}\t\\\n+#define LINK_SPEC \"-m elf64alpha %{G*} %{relax:-relax}\t\t\\\n+  %{O*:-O3} %{!O*:-O1}\t\t\t\t\t\t\\\n   %{shared:-shared}\t\t\t\t\t\t\\\n   %{!shared:\t\t\t\t\t\t\t\\\n     %{!static:\t\t\t\t\t\t\t\\\n@@ -142,22 +149,46 @@ do {\t\t\t\t\t\t\t\t\t\\\n    the linker seems to want the alignment of data objects\n    to depend on their types.  We do exactly that here.  */\n \n-#define LOCAL_ASM_OP\t\".local\"\n-\n #undef ASM_OUTPUT_ALIGNED_LOCAL\n #define ASM_OUTPUT_ALIGNED_LOCAL(FILE, NAME, SIZE, ALIGN)\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n-  fprintf ((FILE), \"\\t%s\\t\", LOCAL_ASM_OP);\t\t\t\t\\\n-  assemble_name ((FILE), (NAME));\t\t\t\t\t\\\n-  fprintf ((FILE), \"\\n\");\t\t\t\t\t\t\\\n-  ASM_OUTPUT_ALIGNED_COMMON (FILE, NAME, SIZE, ALIGN);\t\t\t\\\n+  if ((SIZE) <= g_switch_value)\t\t\t\t\t\t\\\n+    sbss_section();\t\t\t\t\t\t\t\\\n+  else\t\t\t\t\t\t\t\t\t\\\n+    bss_section();\t\t\t\t\t\t\t\\\n+  fprintf (FILE, \"\\t%s\\t \", TYPE_ASM_OP);\t\t\t\t\\\n+  assemble_name (FILE, NAME);\t\t\t\t\t\t\\\n+  putc (',', FILE);\t\t\t\t\t\t\t\\\n+  fprintf (FILE, TYPE_OPERAND_FMT, \"object\");\t\t\t\t\\\n+  putc ('\\n', FILE);\t\t\t\t\t\t\t\\\n+  if (!flag_inhibit_size_directive)\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      fprintf (FILE, \"\\t%s\\t \", SIZE_ASM_OP);\t\t\t\t\\\n+      assemble_name (FILE, NAME);\t\t\t\t\t\\\n+      fprintf (FILE, \",%d\\n\", (SIZE));\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  ASM_OUTPUT_ALIGN ((FILE), exact_log2((ALIGN) / BITS_PER_UNIT));\t\\\n+  ASM_OUTPUT_LABEL(FILE, NAME);\t\t\t\t\t\t\\\n+  ASM_OUTPUT_SKIP((FILE), (SIZE));\t\t\t\t\t\\\n } while (0)\n \n /* This is the pseudo-op used to generate a 64-bit word of data with a\n    specific value in some section.  */\n \n #define INT_ASM_OP\t\t\".quad\"\n \n+/* Biggest alignment supported by the object file format of this\n+   machine.  Use this macro to limit the alignment which can be\n+   specified using the `__attribute__ ((aligned (N)))' construct.  If\n+   not defined, the default value is `BIGGEST_ALIGNMENT'. \n+\n+   This value is really 2^63.  Since gcc figures the alignment in bits,\n+   we could only potentially get to 2^60 on suitible hosts.  Due to other\n+   considerations in varasm, we must restrict this to what fits in an int.  */\n+\n+#define MAX_OFILE_ALIGNMENT \\\n+  (1 << (HOST_BITS_PER_INT < 64 ? HOST_BITS_PER_INT - 2 : 62))\n+\n /* This is the pseudo-op used to generate a contiguous sequence of byte\n    values from a double-quoted string WITHOUT HAVING A TERMINATING NUL\n    AUTOMATICALLY APPENDED.  This is the same for most svr4 assemblers.  */\n@@ -195,6 +226,11 @@ do {\t\t\t\t\t\t\t\t\t\\\n #define CTORS_SECTION_ASM_OP\t\".section\\t.ctors,\\\"aw\\\"\"\n #define DTORS_SECTION_ASM_OP\t\".section\\t.dtors,\\\"aw\\\"\"\n \n+/* Handle the small data sections.  */\n+#define BSS_SECTION_ASM_OP\t\".section\\t.bss\"\n+#define SBSS_SECTION_ASM_OP\t\".section\\t.sbss,\\\"aw\\\"\"\n+#define SDATA_SECTION_ASM_OP\t\".section\\t.sdata,\\\"aw\\\"\"\n+\n /* On svr4, we *do* have support for the .init and .fini sections, and we\n    can put stuff in there to be executed before and after `main'.  We let\n    crtstuff.c and other files know this by defining the following symbols.\n@@ -210,7 +246,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n    includes this file.  */\n \n #undef EXTRA_SECTIONS\n-#define EXTRA_SECTIONS in_const, in_ctors, in_dtors\n+#define EXTRA_SECTIONS in_const, in_ctors, in_dtors, in_sbss, in_sdata\n \n /* A default list of extra section function definitions.  For targets\n    that use additional sections (e.g. .tdesc) you should override this\n@@ -219,8 +255,10 @@ do {\t\t\t\t\t\t\t\t\t\\\n #undef EXTRA_SECTION_FUNCTIONS\n #define EXTRA_SECTION_FUNCTIONS\t\t\t\t\t\t\\\n   CONST_SECTION_FUNCTION\t\t\t\t\t\t\\\n-  CTORS_SECTION_FUNCTION\t\t\t\t\t\t\\\n-  DTORS_SECTION_FUNCTION\n+  SECTION_FUNCTION_TEMPLATE(ctors_section, in_ctors, CTORS_SECTION_ASM_OP) \\\n+  SECTION_FUNCTION_TEMPLATE(dtors_section, in_dtors, DTORS_SECTION_ASM_OP) \\\n+  SECTION_FUNCTION_TEMPLATE(sbss_section, in_sbss, SBSS_SECTION_ASM_OP)\t\\\n+  SECTION_FUNCTION_TEMPLATE(sdata_section, in_sdata, SDATA_SECTION_ASM_OP)\n \n #undef READONLY_DATA_SECTION\n #define READONLY_DATA_SECTION() const_section ()\n@@ -240,27 +278,16 @@ const_section ()\t\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n }\n \n-#define CTORS_SECTION_FUNCTION\t\t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\t\\\n-ctors_section ()\t\t\t\t\t\t\t\\\n+#define SECTION_FUNCTION_TEMPLATE(FN, ENUM, OP)\t\t\t\t\\\n+void FN ()\t\t\t\t\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\\n-  if (in_section != in_ctors)\t\t\t\t\t\t\\\n+  if (in_section != ENUM)\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", CTORS_SECTION_ASM_OP);\t\t\\\n-      in_section = in_ctors;\t\t\t\t\t\t\\\n+      fprintf (asm_out_file, \"%s\\n\", OP);\t\t\t\t\\\n+      in_section = ENUM;\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n }\n \n-#define DTORS_SECTION_FUNCTION\t\t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\t\\\n-dtors_section ()\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (in_section != in_dtors)\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", DTORS_SECTION_ASM_OP);\t\t\\\n-      in_section = in_dtors;\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-}\n \n /* Switch into a generic section.\n    This is currently only used to support section attributes.\n@@ -314,7 +341,13 @@ dtors_section ()\t\t\t\t\t\t\t\\\n \t  || !DECL_INITIAL (DECL)\t\t\t\t\t\\\n \t  || (DECL_INITIAL (DECL) != error_mark_node\t\t\t\\\n \t      && !TREE_CONSTANT (DECL_INITIAL (DECL))))\t\t\t\\\n-\tdata_section ();\t\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\t\\\n+\t  int size = int_size_in_bytes (TREE_TYPE (DECL));\t\t\\\n+\t  if (size >= 0 && size <= g_switch_value)\t\t\t\\\n+\t    sdata_section ();\t\t\t\t\t\t\\\n+\t  else\t\t\t\t\t\t\t\t\\\n+\t    data_section ();\t\t\t\t\t\t\\\n+\t}\t\t\t\t\t\t\t\t\\\n       else\t\t\t\t\t\t\t\t\\\n \tconst_section ();\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\"}, {"sha": "0dd303705a9552665c984ba7c77895ded4f84289", "filename": "gcc/config/alpha/linux.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb8ebb7ff8bcf985f066e0757c91e00a76ea3559/gcc%2Fconfig%2Falpha%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb8ebb7ff8bcf985f066e0757c91e00a76ea3559/gcc%2Fconfig%2Falpha%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Flinux.h?ref=bb8ebb7ff8bcf985f066e0757c91e00a76ea3559", "patch": "@@ -30,9 +30,6 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #undef LIB_SPEC\n #define LIB_SPEC \"%{pg:-lgmon} %{pg:-lc_p} %{!pg:-lc}\"\n \n-#undef ASM_SPEC\n-#define ASM_SPEC \"-nocpp\"\n-\n /* Generate calls to memcpy, etc., not bcopy, etc. */\n #define TARGET_MEM_FUNCTIONS\n "}, {"sha": "d07be98230bc4acb92cf763308898e62838a84d6", "filename": "gcc/flags.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb8ebb7ff8bcf985f066e0757c91e00a76ea3559/gcc%2Fflags.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb8ebb7ff8bcf985f066e0757c91e00a76ea3559/gcc%2Fflags.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflags.h?ref=bb8ebb7ff8bcf985f066e0757c91e00a76ea3559", "patch": "@@ -468,3 +468,7 @@ extern int flag_prefix_function_name;\n /* Nonzero if the current function is a thunk, so we should try to cut\n    corners where we can.  */\n extern int current_function_is_thunk;\n+\n+/* Value of the -G xx switch, and whether it was passed or not.  */\n+extern int g_switch_value;\n+extern int g_switch_set;"}]}