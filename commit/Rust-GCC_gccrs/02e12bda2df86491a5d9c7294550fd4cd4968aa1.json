{"sha": "02e12bda2df86491a5d9c7294550fd4cd4968aa1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDJlMTJiZGEyZGY4NjQ5MWE1ZDljNzI5NDU1MGZkNGNkNDk2OGFhMQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2017-03-16T15:27:45Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2017-03-16T15:27:45Z"}, "message": "PR libstdc++/79511 fix endianness of UTF-16 data\n\n\tPR libstdc++/79511\n\t* src/c++11/codecvt.cc (write_utf16_code_point): Don't write 0xffff\n\tas a surrogate pair.\n\t(__codecvt_utf8_utf16_base<char32_t>::do_in): Use native endianness\n\tfor internal representation.\n\t(__codecvt_utf8_utf16_base<wchar_t>::do_in): Likewise.\n\t* testsuite/22_locale/codecvt/codecvt_utf8_utf16/79511.cc: New test.\n\nFrom-SVN: r246199", "tree": {"sha": "33f94cc1c2cd76b91fa4b4764e91ca08e07ae7f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/33f94cc1c2cd76b91fa4b4764e91ca08e07ae7f2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/02e12bda2df86491a5d9c7294550fd4cd4968aa1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02e12bda2df86491a5d9c7294550fd4cd4968aa1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02e12bda2df86491a5d9c7294550fd4cd4968aa1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02e12bda2df86491a5d9c7294550fd4cd4968aa1/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d85abab445d4f458826f4ef3acbc83091257c8b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d85abab445d4f458826f4ef3acbc83091257c8b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d85abab445d4f458826f4ef3acbc83091257c8b"}], "stats": {"total": 82, "additions": 79, "deletions": 3}, "files": [{"sha": "98735ca0c38e4999cb12640684e550e6e1f14463", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02e12bda2df86491a5d9c7294550fd4cd4968aa1/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02e12bda2df86491a5d9c7294550fd4cd4968aa1/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=02e12bda2df86491a5d9c7294550fd4cd4968aa1", "patch": "@@ -1,5 +1,13 @@\n 2017-03-16  Jonathan Wakely  <jwakely@redhat.com>\n \n+\tPR libstdc++/79511\n+\t* src/c++11/codecvt.cc (write_utf16_code_point): Don't write 0xffff\n+\tas a surrogate pair.\n+\t(__codecvt_utf8_utf16_base<char32_t>::do_in): Use native endianness\n+\tfor internal representation.\n+\t(__codecvt_utf8_utf16_base<wchar_t>::do_in): Likewise.\n+\t* testsuite/22_locale/codecvt/codecvt_utf8_utf16/79511.cc: New test.\n+\n \tPR libstdc++/80064\n \t* include/bits/stl_heap.h (__is_heap, push_heap, __adjust_heap)\n \t(pop_heap, make_heap, sort_heap, is_heap_until, is_heap): Cope with"}, {"sha": "9b63e2b79f91893e29587ee95299c348c3a94d00", "filename": "libstdc++-v3/src/c++11/codecvt.cc", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02e12bda2df86491a5d9c7294550fd4cd4968aa1/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcodecvt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02e12bda2df86491a5d9c7294550fd4cd4968aa1/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcodecvt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcodecvt.cc?ref=02e12bda2df86491a5d9c7294550fd4cd4968aa1", "patch": "@@ -315,7 +315,7 @@ namespace\n   {\n     static_assert(sizeof(C) >= 2, \"a code unit must be at least 16-bit\");\n \n-    if (codepoint < max_single_utf16_unit)\n+    if (codepoint <= max_single_utf16_unit)\n       {\n \tif (to.size() > 0)\n \t  {\n@@ -1341,7 +1341,11 @@ do_in(state_type&, const extern_type* __from, const extern_type* __from_end,\n {\n   range<const char> from{ __from, __from_end };\n   range<char32_t> to{ __to, __to_end };\n-  auto res = utf16_in(from, to, _M_maxcode, _M_mode);\n+  codecvt_mode mode = codecvt_mode(_M_mode & (consume_header|generate_header));\n+#if __BYTE_ORDER__ != __ORDER_BIG_ENDIAN__\n+  mode = codecvt_mode(mode | little_endian);\n+#endif\n+  auto res = utf16_in(from, to, _M_maxcode, mode);\n   __from_next = from.next;\n   __to_next = to.next;\n   return res;\n@@ -1411,7 +1415,11 @@ do_in(state_type&, const extern_type* __from, const extern_type* __from_end,\n {\n   range<const char> from{ __from, __from_end };\n   range<wchar_t> to{ __to, __to_end };\n-  auto res = utf16_in(from, to, _M_maxcode, _M_mode);\n+  codecvt_mode mode = codecvt_mode(_M_mode & (consume_header|generate_header));\n+#if __BYTE_ORDER__ != __ORDER_BIG_ENDIAN__\n+  mode = codecvt_mode(mode | little_endian);\n+#endif\n+  auto res = utf16_in(from, to, _M_maxcode, mode);\n   __from_next = from.next;\n   __to_next = to.next;\n   return res;"}, {"sha": "5555bcba6fe5b623a12652efb37ee7d464b42221", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/codecvt_utf8_utf16/79511.cc", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02e12bda2df86491a5d9c7294550fd4cd4968aa1/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fcodecvt_utf8_utf16%2F79511.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02e12bda2df86491a5d9c7294550fd4cd4968aa1/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fcodecvt_utf8_utf16%2F79511.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fcodecvt_utf8_utf16%2F79511.cc?ref=02e12bda2df86491a5d9c7294550fd4cd4968aa1", "patch": "@@ -0,0 +1,60 @@\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { target c++11 } }\n+\n+#include <locale>\n+#include <codecvt>\n+#include <testsuite_hooks.h>\n+\n+// PR libstdc++/79511\n+\n+template<typename ElemT>\n+  std::basic_string<ElemT> conv(const char* src)\n+  {\n+    std::wstring_convert<std::codecvt_utf8_utf16<ElemT>, ElemT> conv;\n+    return conv.from_bytes(src);\n+  }\n+\n+void\n+test01()\n+{\n+  static char const src[] = \"\\xEF\\xBF\\xBF\";\n+  VERIFY( conv<char16_t>(src) == u\"\\xffff\" );\n+  VERIFY( conv<char32_t>(src) == U\"\\xffff\" );\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  VERIFY( conv<wchar_t>(src) == L\"\\xffff\" );\n+#endif\n+}\n+\n+void\n+test02()\n+{\n+  static char const src[] = \"\\xE2\\x82\\xAC\";\n+  VERIFY( conv<char16_t>(src) == u\"\\x20ac\" );\n+  VERIFY( conv<char32_t>(src) == U\"\\x20ac\" );\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  VERIFY( conv<wchar_t>(src) == L\"\\x20ac\" );\n+#endif\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+}"}]}