{"sha": "e62b6ea148dbc37744d9eaebd0a73f64aec64b5c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTYyYjZlYTE0OGRiYzM3NzQ0ZDllYWViZDBhNzNmNjRhZWM2NGI1Yw==", "commit": {"author": {"name": "Andreas Jaeger", "email": "aj@gcc.gnu.org", "date": "2003-06-07T11:46:11Z"}, "committer": {"name": "Andreas Jaeger", "email": "aj@gcc.gnu.org", "date": "2003-06-07T11:46:11Z"}, "message": "tm.texi (Costs): Remove DONT_REDUCE_ADDR documentation.\n\n\t* doc/tm.texi (Costs): Remove DONT_REDUCE_ADDR documentation.\n\n\t* config/avr/avr.h: Remove comment regarding DONT_REDUCE_ADDR.\n\t* config/dsp16xx/dsp16xx.h: Likewise.\n\t* config/i386/i386.h: Likewise.\n\t* config/ip2k/ip2k.h: Likewise.\n\nFrom-SVN: r67585", "tree": {"sha": "579cb0c1312ee35374c71800e7fdc1bbc34c7989", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/579cb0c1312ee35374c71800e7fdc1bbc34c7989"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e62b6ea148dbc37744d9eaebd0a73f64aec64b5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e62b6ea148dbc37744d9eaebd0a73f64aec64b5c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e62b6ea148dbc37744d9eaebd0a73f64aec64b5c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e62b6ea148dbc37744d9eaebd0a73f64aec64b5c/comments", "author": null, "committer": null, "parents": [{"sha": "2772ef3ef33609dd64209323e9418a847685971a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2772ef3ef33609dd64209323e9418a847685971a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2772ef3ef33609dd64209323e9418a847685971a"}], "stats": {"total": 46, "additions": 15, "deletions": 31}, "files": [{"sha": "e449a61ca6a8f660c8dbb03b19f4d8bf395c53fb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e62b6ea148dbc37744d9eaebd0a73f64aec64b5c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e62b6ea148dbc37744d9eaebd0a73f64aec64b5c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e62b6ea148dbc37744d9eaebd0a73f64aec64b5c", "patch": "@@ -1,3 +1,12 @@\n+2003-06-07  Andreas Jaeger  <aj@suse.de>\n+\n+\t* doc/tm.texi (Costs): Remove DONT_REDUCE_ADDR documentation.\n+\n+\t* config/avr/avr.h: Remove comment regarding DONT_REDUCE_ADDR.\n+\t* config/dsp16xx/dsp16xx.h: Likewise.\n+\t* config/i386/i386.h: Likewise.\n+\t* config/ip2k/ip2k.h: Likewise.\n+\n 2003-06-07  Neil Booth  <neil@daikokuya.co.uk>\n \n \t* Makefile.in (OJBS, c-opts.o): Update.\n@@ -129,7 +138,7 @@\n \t* fold-const.c (fold <ABS_EXPR>):  Re-fold the result of folding\n \tfabs(-x) into fabs(x).  Use tree_expr_nonnegative_p to determine\n \twhen the ABS_EXPR (fabs or abs) is not required.\n-  \t(tree_expr_nonnegative_p): Move the logic that sqrt and exp are\n+\t(tree_expr_nonnegative_p): Move the logic that sqrt and exp are\n \talways nonnegative from fold to here.  Additionally, cabs and fabs\n \tare always non-negative, and pow and atan are non-negative if\n \ttheir first argument is non-negative.\n@@ -247,7 +256,7 @@ Fri Jun  6 11:03:14 CEST 2003  Jan Hubicka  <jh@suse.cz>\n \n 2003-05-06  Richard Henderson  <rth@redhat.com>\n \n-\t* dwarf2out.c (loc_descriptor_from_tree): Return 0 for \n+\t* dwarf2out.c (loc_descriptor_from_tree): Return 0 for\n \tlanguage-specific tree codes.\n \n 2003-06-05  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n@@ -269,7 +278,7 @@ Thu Jun  5 18:32:46 CEST 2003  Jan Hubicka  <jh@suse.cz>\n \t(stage[2-4]_build): Add POSTSTAGE1_FLAGS_TO_PASS.\n \t(stageprofile_build, stageprofile_copy, stagefeedback_build,\n \tstagefeedback_copy): New.\n-\t(restageprofile, restagefeedback, stageprofile-start, \n+\t(restageprofile, restagefeedback, stageprofile-start,\n \tstageprofile, stagefeedback-start): Likewise.\n \n 2003-06-05  David Miller  <davem@redhat.com>\n@@ -283,7 +292,7 @@ Thu Jun  5 18:32:46 CEST 2003  Jan Hubicka  <jh@suse.cz>\n Thu Jun  5 14:59:44 CEST 2003  Jan Hubicka  <jh@suse.cz>\n \n \t* combine.c (simplify_if_then_else): (IF_THEN_ELSE (NE REG 0) (0) (8))\n-\tis REG for nonzero_bits (REG) == 8.  \n+\tis REG for nonzero_bits (REG) == 8.\n \n Thu Jun  5 13:23:51 CEST 2003  Jan Hubicka  <jh@suse.cz>\n \n@@ -297,7 +306,7 @@ Thu Jun  5 13:23:51 CEST 2003  Jan Hubicka  <jh@suse.cz>\n         multilibs.  Remove m32rx specific version.\n         (crtfini.o): Likewise.\n         (EXTRA_MULTILIB_PARTS): Define.\n-        \n+\n 2003-06-05  Eric Botcazou  <ebotcazou@libertysurf.fr>\n \n \t* doc/md.texi (Machine Constraints): Correct the meaning of"}, {"sha": "e8a90d36800c453dadd7cc2bf086c2cc74cc8230", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e62b6ea148dbc37744d9eaebd0a73f64aec64b5c/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e62b6ea148dbc37744d9eaebd0a73f64aec64b5c/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=e62b6ea148dbc37744d9eaebd0a73f64aec64b5c", "patch": "@@ -1589,11 +1589,6 @@ do {\t\t\t\t\t\t\t\t\t    \\\n \n    If the value of this macro is always zero, it need not be defined.\n \n-   `DONT_REDUCE_ADDR'\n-   Define this macro to inhibit strength reduction of memory\n-   addresses.  (On some machines, such strength reduction seems to do\n-   harm rather than good.)\n-\n    `MOVE_RATIO'\n    The number of scalar move insns which should be generated instead\n    of a string move insn or a library call.  Increasing the value"}, {"sha": "03e237de29345cc67e48ece354add67b99942b73", "filename": "gcc/config/dsp16xx/dsp16xx.h", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e62b6ea148dbc37744d9eaebd0a73f64aec64b5c/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e62b6ea148dbc37744d9eaebd0a73f64aec64b5c/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.h?ref=e62b6ea148dbc37744d9eaebd0a73f64aec64b5c", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler.  AT&T DSP1600.\n-   Copyright (C) 1994, 1995, 1996, 1997, 1998, 2000, 2001, 2002\n+   Copyright (C) 1994, 1995, 1996, 1997, 1998, 2000, 2001, 2002, 2003\n    Free Software Foundation, Inc.\n    Contributed by Michael Collison (collison@isisinc.net).\n \n@@ -1463,9 +1463,6 @@ extern struct dsp16xx_frame_info current_frame_info;\n    aligned accesses, for example if they are emulated in a trap handler */\n /* define SLOW_UNALIGNED_ACCESS(MODE, ALIGN) */\n \n-/* Define this macro to inhibit strength reduction of memory addresses */\n-/* #define DONT_REDUCE_ADDR */\n-\n \f\n /* DIVIDING THE OUTPUT IN SECTIONS */\n /* Output before read-only data.  */"}, {"sha": "a2f77bd44cf445f100d1f975bc043ad42ec8fc2c", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e62b6ea148dbc37744d9eaebd0a73f64aec64b5c/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e62b6ea148dbc37744d9eaebd0a73f64aec64b5c/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=e62b6ea148dbc37744d9eaebd0a73f64aec64b5c", "patch": "@@ -2672,12 +2672,6 @@ do {\t\t\t\t\t\t\t\\\n \n /* #define SLOW_UNALIGNED_ACCESS(MODE, ALIGN) 0 */\n \n-/* Define this macro to inhibit strength reduction of memory\n-   addresses.  (On some machines, such strength reduction seems to do\n-   harm rather than good.)  */\n-\n-/* #define DONT_REDUCE_ADDR */\n-\n /* Define this macro if it is as good or better to call a constant\n    function address than to call an address kept in a register.\n "}, {"sha": "a6c6256270f971314d9685b61ce57c50296ac314", "filename": "gcc/config/ip2k/ip2k.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e62b6ea148dbc37744d9eaebd0a73f64aec64b5c/gcc%2Fconfig%2Fip2k%2Fip2k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e62b6ea148dbc37744d9eaebd0a73f64aec64b5c/gcc%2Fconfig%2Fip2k%2Fip2k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fip2k%2Fip2k.h?ref=e62b6ea148dbc37744d9eaebd0a73f64aec64b5c", "patch": "@@ -1821,11 +1821,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n    If the value of this macro is always zero, it need not be defined.\n \n-   `DONT_REDUCE_ADDR'\n-   Define this macro to inhibit strength reduction of memory\n-   addresses.  (On some machines, such strength reduction seems to do\n-   harm rather than good.)\n-\n    `MOVE_RATIO'\n    The number of scalar move insns which should be generated instead\n    of a string move insn or a library call.  Increasing the value"}, {"sha": "6686a509c4ca3a828accb0a08bf9c2af11cb5f72", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e62b6ea148dbc37744d9eaebd0a73f64aec64b5c/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e62b6ea148dbc37744d9eaebd0a73f64aec64b5c/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=e62b6ea148dbc37744d9eaebd0a73f64aec64b5c", "patch": "@@ -5382,12 +5382,6 @@ If the value of this macro is always zero, it need not be defined.  If\n this macro is defined, it should produce a nonzero value when\n @code{STRICT_ALIGNMENT} is nonzero.\n \n-@findex DONT_REDUCE_ADDR\n-@item DONT_REDUCE_ADDR\n-Define this macro to inhibit strength reduction of memory addresses.\n-(On some machines, such strength reduction seems to do harm rather\n-than good.)\n-\n @findex MOVE_RATIO\n @item MOVE_RATIO\n The threshold of number of scalar memory-to-memory move insns, @emph{below}"}]}