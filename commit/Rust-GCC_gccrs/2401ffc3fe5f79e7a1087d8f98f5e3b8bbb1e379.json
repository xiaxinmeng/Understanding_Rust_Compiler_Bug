{"sha": "2401ffc3fe5f79e7a1087d8f98f5e3b8bbb1e379", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjQwMWZmYzNmZTVmNzllN2ExMDg3ZDhmOThmNWUzYjhiYmIxZTM3OQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2017-07-21T18:11:23Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2017-07-21T18:11:23Z"}, "message": "Remove special CDtor METHOD_VEC slots.\n\n\t* cp-tree.h (CLASSTYPE_CONSTRUCTOR_SLOT,\n\tCLASSTYPE_DESTRUCTOR_SLOT): Delete.\n\t(CLASSTYPE_CONSTRUCTORS): Use lookup_fnfields_slot_nolazy.\n\t(CLASSTYPE_DESTRUCTOR): Likewise.\n\t* class (add_method): Don't use special cdtor slots.\n\t* search.c (lookup_fnfields_idx_nolazy): Likewise.\n\t(look_for_overrides_here): Use lookup_fnfields_slot.\n\t* semantics (classtype_has_nothrow_assign_or_copy_p): Likewise.\n\nFrom-SVN: r250437", "tree": {"sha": "40eed787fa8bb290e048d9e89f14178097fc674a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/40eed787fa8bb290e048d9e89f14178097fc674a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2401ffc3fe5f79e7a1087d8f98f5e3b8bbb1e379", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2401ffc3fe5f79e7a1087d8f98f5e3b8bbb1e379", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2401ffc3fe5f79e7a1087d8f98f5e3b8bbb1e379", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2401ffc3fe5f79e7a1087d8f98f5e3b8bbb1e379/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0ab71760942f9ca14b9b7530455f390271db3106", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ab71760942f9ca14b9b7530455f390271db3106", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ab71760942f9ca14b9b7530455f390271db3106"}], "stats": {"total": 154, "additions": 57, "deletions": 97}, "files": [{"sha": "9dd5575cb80284ce76cd29f511997be43ec951d7", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2401ffc3fe5f79e7a1087d8f98f5e3b8bbb1e379/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2401ffc3fe5f79e7a1087d8f98f5e3b8bbb1e379/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2401ffc3fe5f79e7a1087d8f98f5e3b8bbb1e379", "patch": "@@ -1,5 +1,15 @@\n 2017-07-21  Nathan Sidwell  <nathan@acm.org>\n \n+\tRemove special CDtor METHOD_VEC slots.\n+\t* cp-tree.h (CLASSTYPE_CONSTRUCTOR_SLOT,\n+\tCLASSTYPE_DESTRUCTOR_SLOT): Delete.\n+\t(CLASSTYPE_CONSTRUCTORS): Use lookup_fnfields_slot_nolazy.\n+\t(CLASSTYPE_DESTRUCTOR): Likewise.\n+\t* class (add_method): Don't use special cdtor slots.\n+\t* search.c (lookup_fnfields_idx_nolazy): Likewise.\n+\t(look_for_overrides_here): Use lookup_fnfields_slot.\n+\t* semantics (classtype_has_nothrow_assign_or_copy_p): Likewise.\n+\n \t* call.c (add_candidates): Move decls to initialization.  Don't\n \tuse !!.\n "}, {"sha": "508570bdb04ccb0a862bcb7d59cbc1d789010a02", "filename": "gcc/cp/class.c", "status": "modified", "additions": 25, "deletions": 36, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2401ffc3fe5f79e7a1087d8f98f5e3b8bbb1e379/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2401ffc3fe5f79e7a1087d8f98f5e3b8bbb1e379/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=2401ffc3fe5f79e7a1087d8f98f5e3b8bbb1e379", "patch": "@@ -1039,50 +1039,39 @@ add_method (tree type, tree method, bool via_using)\n \t we're going to end up with an assignment operator at some\n \t point as well.  */\n       vec_alloc (method_vec, 8);\n-      /* Create slots for constructors and destructors.  */\n-      method_vec->quick_push (NULL_TREE);\n-      method_vec->quick_push (NULL_TREE);\n       CLASSTYPE_METHOD_VEC (type) = method_vec;\n     }\n \n   /* Maintain TYPE_HAS_USER_CONSTRUCTOR, etc.  */\n   grok_special_member_properties (method);\n \n-  /* Constructors and destructors go in special slots.  */\n-  if (DECL_MAYBE_IN_CHARGE_CONSTRUCTOR_P (method))\n-    slot = CLASSTYPE_CONSTRUCTOR_SLOT;\n-  else if (DECL_MAYBE_IN_CHARGE_DESTRUCTOR_P (method))\n-    slot = CLASSTYPE_DESTRUCTOR_SLOT;\n-  else\n-    {\n-      tree m;\n+  tree m;\n \n-      insert_p = true;\n-      /* See if we already have an entry with this name.  */\n-      for (slot = CLASSTYPE_FIRST_CONVERSION_SLOT;\n-\t   vec_safe_iterate (method_vec, slot, &m);\n-\t   ++slot)\n+  insert_p = true;\n+  /* See if we already have an entry with this name.  */\n+  for (slot = CLASSTYPE_FIRST_CONVERSION_SLOT;\n+       vec_safe_iterate (method_vec, slot, &m);\n+       ++slot)\n+    {\n+      m = OVL_FIRST (m);\n+      if (template_conv_p)\n \t{\n-\t  m = OVL_FIRST (m);\n-\t  if (template_conv_p)\n-\t    {\n-\t      if (TREE_CODE (m) == TEMPLATE_DECL\n-\t\t  && DECL_TEMPLATE_CONV_FN_P (m))\n-\t\tinsert_p = false;\n-\t      break;\n-\t    }\n-\t  if (conv_p && !DECL_CONV_FN_P (m))\n-\t    break;\n-\t  if (DECL_NAME (m) == DECL_NAME (method))\n-\t    {\n-\t      insert_p = false;\n-\t      break;\n-\t    }\n-\t  if (complete_p\n-\t      && !DECL_CONV_FN_P (m)\n-\t      && DECL_NAME (m) > DECL_NAME (method))\n-\t    break;\n+\t  if (TREE_CODE (m) == TEMPLATE_DECL\n+\t      && DECL_TEMPLATE_CONV_FN_P (m))\n+\t    insert_p = false;\n+\t  break;\n \t}\n+      if (conv_p && !DECL_CONV_FN_P (m))\n+\tbreak;\n+      if (DECL_NAME (m) == DECL_NAME (method))\n+\t{\n+\t  insert_p = false;\n+\t  break;\n+\t}\n+      if (complete_p\n+\t  && !DECL_CONV_FN_P (m)\n+\t  && DECL_NAME (m) > DECL_NAME (method))\n+\tbreak;\n     }\n   current_fns = insert_p ? NULL_TREE : (*method_vec)[slot];\n \n@@ -1256,7 +1245,7 @@ add_method (tree type, tree method, bool via_using)\n \n   if (conv_p)\n     TYPE_HAS_CONVERSION (type) = 1;\n-  else if (slot >= CLASSTYPE_FIRST_CONVERSION_SLOT && !complete_p)\n+  else if (!complete_p && !IDENTIFIER_CDTOR_P (DECL_NAME (method)))\n     push_class_level_binding (DECL_NAME (method), current_fns);\n \n   if (insert_p)"}, {"sha": "115cdaff61e1162ca7717a3ebd716ae835856725", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2401ffc3fe5f79e7a1087d8f98f5e3b8bbb1e379/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2401ffc3fe5f79e7a1087d8f98f5e3b8bbb1e379/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=2401ffc3fe5f79e7a1087d8f98f5e3b8bbb1e379", "patch": "@@ -2148,29 +2148,21 @@ struct GTY(()) lang_type {\n    and the RECORD_TYPE for the class template otherwise.  */\n #define CLASSTYPE_DECL_LIST(NODE) (LANG_TYPE_CLASS_CHECK (NODE)->decl_list)\n \n-/* The slot in the CLASSTYPE_METHOD_VEC where constructors go.  */\n-#define CLASSTYPE_CONSTRUCTOR_SLOT 0\n-\n-/* The slot in the CLASSTYPE_METHOD_VEC where destructors go.  */\n-#define CLASSTYPE_DESTRUCTOR_SLOT 1\n-\n /* The first slot in the CLASSTYPE_METHOD_VEC where conversion\n    operators can appear.  */\n-#define CLASSTYPE_FIRST_CONVERSION_SLOT 2\n+#define CLASSTYPE_FIRST_CONVERSION_SLOT 0\n \n /* A FUNCTION_DECL or OVERLOAD for the constructors for NODE.  These\n    are the constructors that take an in-charge parameter.  */\n #define CLASSTYPE_CONSTRUCTORS(NODE) \\\n-  ((*CLASSTYPE_METHOD_VEC (NODE))[CLASSTYPE_CONSTRUCTOR_SLOT])\n+  (lookup_fnfields_slot_nolazy (NODE, ctor_identifier))\n \n /* A FUNCTION_DECL for the destructor for NODE.  This is the\n    destructors that take an in-charge parameter.  If\n    CLASSTYPE_LAZY_DESTRUCTOR is true, then this entry will be NULL\n    until the destructor is created with lazily_declare_fn.  */\n #define CLASSTYPE_DESTRUCTOR(NODE) \\\n-  (CLASSTYPE_METHOD_VEC (NODE)\t\t\t\t\t\t      \\\n-   ? (*CLASSTYPE_METHOD_VEC (NODE))[CLASSTYPE_DESTRUCTOR_SLOT]\t\t      \\\n-   : NULL_TREE)\n+  (lookup_fnfields_slot_nolazy (NODE, dtor_identifier))\n \n /* A dictionary of the nested user-defined-types (class-types, or enums)\n    found within this class.  This table includes nested member class"}, {"sha": "04a229ee2b20200fc57626a8290317459f16e34c", "filename": "gcc/cp/search.c", "status": "modified", "additions": 18, "deletions": 41, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2401ffc3fe5f79e7a1087d8f98f5e3b8bbb1e379/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2401ffc3fe5f79e7a1087d8f98f5e3b8bbb1e379/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=2401ffc3fe5f79e7a1087d8f98f5e3b8bbb1e379", "patch": "@@ -1590,18 +1590,6 @@ lookup_fnfields_idx_nolazy (tree type, tree name)\n   if (GATHER_STATISTICS)\n     n_calls_lookup_fnfields_1++;\n \n-  /* Constructors are first...  */\n-  if (name == ctor_identifier)\n-    {\n-      fn = CLASSTYPE_CONSTRUCTORS (type);\n-      return fn ? CLASSTYPE_CONSTRUCTOR_SLOT : -1;\n-    }\n-  /* and destructors are second.  */\n-  if (name == dtor_identifier)\n-    {\n-      fn = CLASSTYPE_DESTRUCTOR (type);\n-      return fn ? CLASSTYPE_DESTRUCTOR_SLOT : -1;\n-    }\n   if (IDENTIFIER_CONV_OP_P (name))\n     return lookup_conversion_operator (type, TREE_TYPE (name));\n \n@@ -2428,37 +2416,26 @@ look_for_overrides (tree type, tree fndecl)\n tree\n look_for_overrides_here (tree type, tree fndecl)\n {\n-  int ix;\n+  tree ovl = lookup_fnfields_slot (type, DECL_NAME (fndecl));\n \n-  /* If there are no methods in TYPE (meaning that only implicitly\n-     declared methods will ever be provided for TYPE), then there are\n-     no virtual functions.  */\n-  if (!CLASSTYPE_METHOD_VEC (type))\n-    return NULL_TREE;\n-\n-  if (DECL_MAYBE_IN_CHARGE_DESTRUCTOR_P (fndecl))\n-    ix = CLASSTYPE_DESTRUCTOR_SLOT;\n-  else\n-    ix = lookup_fnfields_1 (type, DECL_NAME (fndecl));\n-  if (ix >= 0)\n-    for (ovl_iterator iter ((*CLASSTYPE_METHOD_VEC (type))[ix]); iter; ++iter)\n-      {\n-\ttree fn = *iter;\n+  for (ovl_iterator iter (ovl); iter; ++iter)\n+    {\n+      tree fn = *iter;\n \n-\tif (!DECL_VIRTUAL_P (fn))\n-\t  /* Not a virtual.  */;\n-\telse if (DECL_CONTEXT (fn) != type)\n-\t  /* Introduced with a using declaration.  */;\n-\telse if (DECL_STATIC_FUNCTION_P (fndecl))\n-\t  {\n-\t    tree btypes = TYPE_ARG_TYPES (TREE_TYPE (fn));\n-\t    tree dtypes = TYPE_ARG_TYPES (TREE_TYPE (fndecl));\n-\t    if (compparms (TREE_CHAIN (btypes), dtypes))\n-\t      return fn;\n-\t  }\n-\telse if (same_signature_p (fndecl, fn))\n-\t  return fn;\n-      }\n+      if (!DECL_VIRTUAL_P (fn))\n+\t/* Not a virtual.  */;\n+      else if (DECL_CONTEXT (fn) != type)\n+\t/* Introduced with a using declaration.  */;\n+      else if (DECL_STATIC_FUNCTION_P (fndecl))\n+\t{\n+\t  tree btypes = TYPE_ARG_TYPES (TREE_TYPE (fn));\n+\t  tree dtypes = TYPE_ARG_TYPES (TREE_TYPE (fndecl));\n+\t  if (compparms (TREE_CHAIN (btypes), dtypes))\n+\t    return fn;\n+\t}\n+      else if (same_signature_p (fndecl, fn))\n+\treturn fn;\n+    }\n \n   return NULL_TREE;\n }"}, {"sha": "743adbc44c67d39259198eb1b48aa56dac07de41", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2401ffc3fe5f79e7a1087d8f98f5e3b8bbb1e379/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2401ffc3fe5f79e7a1087d8f98f5e3b8bbb1e379/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=2401ffc3fe5f79e7a1087d8f98f5e3b8bbb1e379", "patch": "@@ -9083,15 +9083,7 @@ classtype_has_nothrow_assign_or_copy_p (tree type, bool assign_p)\n   if (assign_p)\n     fns = lookup_fnfields_slot (type, cp_assignment_operator_id (NOP_EXPR));\n   else if (TYPE_HAS_COPY_CTOR (type))\n-    {\n-      /* If construction of the copy constructor was postponed, create\n-\t it now.  */\n-      if (CLASSTYPE_LAZY_COPY_CTOR (type))\n-\tlazily_declare_fn (sfk_copy_constructor, type);\n-      if (CLASSTYPE_LAZY_MOVE_CTOR (type))\n-\tlazily_declare_fn (sfk_move_constructor, type);\n-      fns = CLASSTYPE_CONSTRUCTORS (type);\n-    }\n+    fns = lookup_fnfields_slot (type, ctor_identifier);\n \n   bool saw_copy = false;\n   for (ovl_iterator iter (fns); iter; ++iter)"}]}