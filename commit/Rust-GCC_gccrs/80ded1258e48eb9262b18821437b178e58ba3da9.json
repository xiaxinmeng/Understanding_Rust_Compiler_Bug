{"sha": "80ded1258e48eb9262b18821437b178e58ba3da9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODBkZWQxMjU4ZTQ4ZWI5MjYyYjE4ODIxNDM3YjE3OGU1OGJhM2RhOQ==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2004-11-30T19:35:26Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2004-11-30T19:35:26Z"}, "message": "mklibgcc.in: Correct calculation of libgcc_s_soname and libunwind_soname.\n\n\t* mklibgcc.in: Correct calculation of libgcc_s_soname and\n\tlibunwind_soname.  Use $out, not $outS, in commands for\n\tno-shared-library case.  Move EXTRA_MULTILIB_PARTS rules above\n\tlibrary build rules, make $libunwind_so and $libgcc_s_so\n\tdepend on them in the normal fashion, and filter those objects\n\tout of @shlib_objs@.\n\nFrom-SVN: r91534", "tree": {"sha": "b1454f29f0bccba9d7aff9a3173e53fa979d1e4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b1454f29f0bccba9d7aff9a3173e53fa979d1e4a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/80ded1258e48eb9262b18821437b178e58ba3da9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80ded1258e48eb9262b18821437b178e58ba3da9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80ded1258e48eb9262b18821437b178e58ba3da9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80ded1258e48eb9262b18821437b178e58ba3da9/comments", "author": null, "committer": null, "parents": [{"sha": "98705d7dfa8cd4f0ccf27676ca6d02786624b8cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98705d7dfa8cd4f0ccf27676ca6d02786624b8cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98705d7dfa8cd4f0ccf27676ca6d02786624b8cb"}], "stats": {"total": 107, "additions": 62, "deletions": 45}, "files": [{"sha": "c3400465b3b05cb3dff0d1539e9105d84d74bd2e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80ded1258e48eb9262b18821437b178e58ba3da9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80ded1258e48eb9262b18821437b178e58ba3da9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=80ded1258e48eb9262b18821437b178e58ba3da9", "patch": "@@ -1,3 +1,12 @@\n+2004-11-30  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* mklibgcc.in: Correct calculation of libgcc_s_soname and\n+\tlibunwind_soname.  Use $out, not $outS, in commands for\n+\tno-shared-library case.  Move EXTRA_MULTILIB_PARTS rules above\n+\tlibrary build rules, make $libunwind_so and $libgcc_s_so\n+\tdepend on them in the normal fashion, and filter those objects\n+\tout of @shlib_objs@.\n+\n 2004-11-30  Janis Johnson  <janis187@us.ibm.com>\n \n \t* config/rs6000/altivec.h (vec_step_help): Support const vector types.\n@@ -9,7 +18,7 @@\n \tpass right after fold builtins.\n \n 2004-11-30  Andreas Krebbel  <krebbel1@de.ibm.com>\n-\t\n+\n \t* config/s390/s390-modes.def: Added cc modes documentation.\n \t* config/s390/s390.c: (s390_tm_ccmode, s390_select_ccmode,\n \ts390_expand_addcc): Added cc mode comments.\n@@ -25,12 +34,12 @@\n 2004-11-29  Daniel Berlin  <dberlin@dberlin.org>\n \n \tFix PR tree-optimization/18673\n-\t\n+\n \t* tree-ssa-pre.c: Remove splay-tree.h include.\n \t(bitmap_value_replace_in_set): Fix to add if it does not exist.\n \t(find_or_generate_expression): Remove now-wrong condition.\n \t(create_expression_by_pieces): Fix condition and comment reason\n-\tfor it. \n+\tfor it.\n \t(insert_aux): Fix condition and comment reasons for it.\n \tFactor insertion code from here.\n \t(insert_into_preds_of_block): To here.  Fix conditions in factored\n@@ -40,7 +49,7 @@\n \n \tPR tree-opt/18607\n \t* tree-vectorizer.c (vect_analyze_data_refs): Use temporary\n-\tvariable for data_reference when looking for memtag. \n+\tvariable for data_reference when looking for memtag.\n \n 2004-11-30  Jakub Jelinek  <jakub@redhat.com>\n \n@@ -57,7 +66,7 @@\n \tPR target/18173\n \t* tree-vectorizer.c (vect_can_force_dr_alignment_p): Return false for\n \tdecls that are assembled before vectorization takes place.\n-\t(vect_compute_data_ref_alignment): Set DECL_USER_ALIGN to 1.\t\n+\t(vect_compute_data_ref_alignment): Set DECL_USER_ALIGN to 1.\n \n 2004-11-30  Ulrich Weigand  <uweigand@de.ibm.com>\n "}, {"sha": "fa6930b1c60530f6f19909903df226efb1ebd078", "filename": "gcc/mklibgcc.in", "status": "modified", "additions": 48, "deletions": 40, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80ded1258e48eb9262b18821437b178e58ba3da9/gcc%2Fmklibgcc.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80ded1258e48eb9262b18821437b178e58ba3da9/gcc%2Fmklibgcc.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmklibgcc.in?ref=80ded1258e48eb9262b18821437b178e58ba3da9", "patch": "@@ -170,23 +170,24 @@ for ml in $MULTILIBS; do\n \tlibgcc_eh_a=$dir/libgcc_eh.a\n \tlibgcc_s_so_base=$dir/libgcc_s\n \tlibgcc_s_so=${libgcc_s_so_base}${SHLIB_EXT}\n+\tlibgcc_s_soname=libgcc_s\n \tif [ \"$LIBUNWIND\" ]; then\n \t  libunwind_so_base=$dir/libunwind\n \t  libunwind_so=${libunwind_so_base}${SHLIB_EXT}\n+\t  libunwind_soname=libunwind\n \tfi\n       else\n+        suffix=`echo $dir | sed s,/,_,g`\n \tlibgcc_eh_a=$dir/libgcc_eh.a\n-\tlibgcc_s_so_base=$dir/libgcc_s_`echo $dir | sed s,/,_,g`\n+\tlibgcc_s_so_base=$dir/libgcc_s_${suffix}\n \tlibgcc_s_so=${libgcc_s_so_base}${SHLIB_EXT}\n+\tlibgcc_s_soname=libgcc_s_${suffix}\n \tif [ \"$LIBUNWIND\" ]; then\n-\t  libunwind_so_base=$dir/libunwind_`echo $dir | sed s,/,_,g`\n+\t  libunwind_so_base=$dir/libunwind_${suffix}\n \t  libunwind_so=${libunwind_so_base}${SHLIB_EXT}\n \tfi\n       fi\n \n-      libgcc_s_soname=$libgcc_s_so_base\n-      libunwind_soname=$libunwind_so_base\n-\n       if [ -n \"$MULTILIB_OSDIRNAMES\" ]; then\n \tif [ \"$dir\" != . ]; then\n \t  gcc_multilib_dir=`./xgcc -B./ $flags --print-multi-directory`\n@@ -212,15 +213,16 @@ for ml in $MULTILIBS; do\n       libgcc_eh_a=$dir/libgcc_eh.a\n       libgcc_s_so_base=$dir/libgcc_s\n       libgcc_s_so=${libgcc_s_so_base}${SHLIB_EXT}\n+      libgcc_s_soname=libgcc_s\n       if [ \"$LIBUNWIND\" ]; then\n \tlibunwind_so_base=$dir/libunwind\n \tlibunwind_so=${libunwind_so_base}${SHLIB_EXT}\n+\tlibunwind_soname=libunwind\n       fi\n-\n-      libgcc_s_soname=$libgcc_s_so_base\n-      libunwind_soname=$libunwind_so_base\n     fi\n   fi\n+  libgcc_s_so_extra=\n+  libunwind_so_extra=\n \n   echo\n   echo \\#\n@@ -312,7 +314,7 @@ for ml in $MULTILIBS; do\n     else\n       out=\"libgcc/${dir}/${name}${objext}\"\n       echo ${out}: stmp-dirs '$(srcdir)/config/$(LIB1ASMSRC)'\n-      echo \"\t$gcc_compile\" $flags -DL$name -c '$(srcdir)/libgcc2.c' -o $outS\n+      echo \"\t$gcc_compile\" $flags -DL$name -c '$(srcdir)/libgcc2.c' -o $out\n       echo $libgcc_a: $out\n     fi\n   done\n@@ -348,7 +350,7 @@ for ml in $MULTILIBS; do\n       out=\"libgcc/${dir}/${name}${objext}\"\n       echo ${out}: stmp-dirs '$(srcdir)/config/$(LIB1ASMSRC)'\n       echo \"\t$gcc_compile\" $flags -DL$name \\\n-        -fexceptions -fnon-call-exceptions -c '$(srcdir)/libgcc2.c' -o $outS\n+        -fexceptions -fnon-call-exceptions -c '$(srcdir)/libgcc2.c' -o $out\n       echo $libgcc_a: $out\n     fi\n   done\n@@ -590,7 +592,7 @@ for ml in $MULTILIBS; do\n       fi\n     done\n \n-  else # no SHLIB_LINK\n+  else # no libgcc_eh.a\n     for file in $LIB2ADDEH; do\n       case $file in\n         *.c) ;;\n@@ -652,6 +654,39 @@ for ml in $MULTILIBS; do\n     echo $libgcov_a: $out\n   done\n \n+  # EXTRA_MULTILIB_PARTS.\n+  echo\n+  for f in $EXTRA_MULTILIB_PARTS; do\n+    case $dir in\n+    .) out=$f ; t= ;;\n+    *) out=$dir/$f ; t=$dir/ ;;\n+    esac\n+    case $out in\n+    # Prevent `make' from interpreting $out as a macro assignment\n+    *'$(EQ)'*) targ=\"T_TARGET=$out T_TARGET\" ;;\n+    *) targ=$out ;;\n+    esac\n+\n+    echo $out: stmp-dirs\n+    echo \"\t$make_compile\" \\\\\n+    echo '\t  LIBGCC2_CFLAGS=\"$(LIBGCC2_CFLAGS)' $flags '\" ' \\\\\n+    echo '\t  MULTILIB_CFLAGS=\"'$flags'\"' T=$t $targ\n+    echo \"all: $out\"\n+\n+    # Make libunwind.so and libgcc_s.so depend on these, since they are\n+    # likely to be implicitly used by the link process.  However, we must\n+    # then arrange to remove them from the explicit object list generated\n+    # from $^ - see below.\n+    if [ \"$libgcc_s_so\" ]; then\n+      libgcc_s_so_extra=\"$libgcc_s_so_extra $out\"\n+      echo \"$libgcc_s_so: $out\"\n+    fi\n+    if [ \"$libunwind_so\" ]; then\n+      libunwind_so_extra=\"$libunwind_so_extra $out\"\n+      echo \"$libunwind_so: $out\"\n+    fi\n+  done\n+\n   # Library build rules.\n   dir=`echo ${ml} | sed -e 's/;.*$//' -e 's/=/$(EQ)/g'`\n   flags=`echo ${ml} | sed -e 's/^[^;]*;//' -e 's/@/ -/g'`;\n@@ -677,14 +712,6 @@ $libgcc_s_so: ${mapfile}\n EOF\n   fi\n \n-  # Depend on EXTRA_MULTILIB_PARTS, since that's where crtbegin/end\n-  # usually are put in a true multilib situation.\n-  shlib_extra_deps=\"\"\n-  for f in $EXTRA_MULTILIB_PARTS; do\n-    shlib_extra_deps=\"$shlib_extra_deps $dir/$f\"\n-  done\n-  echo $libgcc_s_so: $shlib_extra_deps\n-\n   # Static libraries.\n \n   # Each of these .a files depends on stmp-dirs.  It would seem that\n@@ -733,7 +760,7 @@ EOF\n     echo \"\t$SHLIB_LINK\" \\\n \t | sed -e \"s%@multilib_flags@%$flags%g\" \\\n \t       -e \"s%@multilib_dir@%$dir%g\" \\\n-\t       -e \"s%@shlib_objs@%\\$(objects)%g\" \\\n+\t       -e \"s%@shlib_objs@%\\$(filter-out $libgcc_s_so_extra,\\$(objects))%g\" \\\n \t       -e \"s%@shlib_base_name@%$libgcc_s_so_base%g\" \\\n \t       -e \"s%@shlib_so_name@%$libgcc_s_soname%g\" \\\n \t       -e \"s%@shlib_map_file@%$mapfile%g\" \\\n@@ -748,33 +775,14 @@ EOF\n     echo \"\t$SHLIBUNWIND_LINK\" \\\n \t   | sed -e \"s%@multilib_flags@%$flags%g\" \\\n \t\t -e \"s%@multilib_dir@%$dir%g\" \\\n-\t\t -e \"s%@shlib_objs@%\\$(objects)%g\" \\\n+\t\t -e \"s%@shlib_objs@%\\$(filter-out $libunwind_so_extra,\\$(objects))%g\" \\\n \t\t -e \"s%@shlib_base_name@%$libunwind_so_base%g\" \\\n \t\t -e \"s%@shlib_so_name@%$libunwind_soname%g\" \\\n \t\t -e \"s%@shlib_dir@%$shlib_dir%g\" \\\n \t\t -e \"s%@shlib_slibdir_qual@%$shlib_dir_qual%g\"\n     echo \"all: $libunwind_so\"\n   fi\n \n-  # EXTRA_MULTILIB_PARTS.\n-  for f in $EXTRA_MULTILIB_PARTS; do\n-    case $dir in\n-    .) out=$f ; t= ;;\n-    *) out=$dir/$f ; t=$dir/ ;;\n-    esac\n-    case $out in\n-    # Prevent `make' from interpreting $out as a macro assignment\n-    *'$(EQ)'*) targ=\"T_TARGET=$out T_TARGET\" ;;\n-    *) targ=$out ;;\n-    esac\n-\n-    echo $out: stmp-dirs\n-    echo \"\t$make_compile\" \\\\\n-    echo '\t  LIBGCC2_CFLAGS=\"$(LIBGCC2_CFLAGS)' $flags '\" ' \\\\\n-    echo '\t  MULTILIB_CFLAGS=\"'$flags'\"' T=$t $targ\n-    echo \"all: $out\"\n-  done\n-\n done # ml in MULTILIBS\n \n echo"}]}