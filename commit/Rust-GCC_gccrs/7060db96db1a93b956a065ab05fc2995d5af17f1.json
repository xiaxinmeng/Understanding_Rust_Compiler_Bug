{"sha": "7060db96db1a93b956a065ab05fc2995d5af17f1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzA2MGRiOTZkYjFhOTNiOTU2YTA2NWFiMDVmYzI5OTVkNWFmMTdmMQ==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2007-05-19T13:32:03Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2007-05-19T13:32:03Z"}, "message": "invoke.texi (Warning Options): Add -Wconversion-sign.\n\n2007-05-19  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n\n\t* doc/invoke.texi (Warning Options): Add -Wconversion-sign.\n\t(Wconversion): Update description.\n\t(Wconversion-sign): New.\n\t* c.opt (Wconversion-sign): New.\n\t* c-opts.c (c_common_post_options): Uninitialized Wconversion-sign\n\tmeans disabled for C++. Otherwise, take the status of Wconversion.\n\t* c-common.c (conversion_warning): Warn with either Wconversion or\n\tWconversion-sign.\n\t(warnings_for_convert_and_check): Conditions are already checked by\n\tconversion_warning.\n\t(convert_and_check): Don't check warnings if the conversion failed.\n\ncp/\n\t* cvt.c (cp_convert_and_check): Don't check warnings if the\n\tconversion failed.\n\ntestsuite/\n\t* gcc.dg/Wconversion-integer.c: Group testcases and add more.\n\t* gcc.dg/Wconversion-sign.c: New.\n\t* gcc.dg/Wconversion-integer-no-sign.c: New.\n\t* g++.dg/warn/Wconversion-integer.C: Move some warnings to\n\tWconversion-sign.C\n\t* g++.dg/warn/Wconversion-sign.C: New.\n\t* g++.old-deja/g++.other/warn4.C: Update.\n\t* g++.dg/warn/Wconversion1.C: Likewise.\n\nFrom-SVN: r124856", "tree": {"sha": "98d10e457cbf659848ab680b6b1b3e192890e140", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/98d10e457cbf659848ab680b6b1b3e192890e140"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7060db96db1a93b956a065ab05fc2995d5af17f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7060db96db1a93b956a065ab05fc2995d5af17f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7060db96db1a93b956a065ab05fc2995d5af17f1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7060db96db1a93b956a065ab05fc2995d5af17f1/comments", "author": null, "committer": null, "parents": [{"sha": "4fc2b4ff18b21daf43bf8d879e3edf67e556af7e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fc2b4ff18b21daf43bf8d879e3edf67e556af7e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4fc2b4ff18b21daf43bf8d879e3edf67e556af7e"}], "stats": {"total": 599, "additions": 476, "deletions": 123}, "files": [{"sha": "0c0fdcc684dc3bd8d114c9c1fd0303a4619cdc41", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7060db96db1a93b956a065ab05fc2995d5af17f1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7060db96db1a93b956a065ab05fc2995d5af17f1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7060db96db1a93b956a065ab05fc2995d5af17f1", "patch": "@@ -1,3 +1,17 @@\n+2007-05-19  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n+\n+\t* doc/invoke.texi (Warning Options): Add -Wconversion-sign.\n+\t(Wconversion): Update description.\n+\t(Wconversion-sign): New.\n+\t* c.opt (Wconversion-sign): New.\n+\t* c-opts.c (c_common_post_options): Uninitialized Wconversion-sign\n+\tmeans disabled for C++. Otherwise, take the status of Wconversion.\n+\t* c-common.c (conversion_warning): Warn with either Wconversion or\n+\tWconversion-sign.\n+\t(warnings_for_convert_and_check): Conditions are already checked by\n+\tconversion_warning.\n+\t(convert_and_check): Don't check warnings if the conversion failed.\n+\n 2007-05-19 Andy Hutchinson <HutchinsonAndy@netscape.net>\n            Anatoly Sokolov <aesok@dol.ru>\n "}, {"sha": "1026499df52896910e9d393f1e8edb0c802dedba", "filename": "gcc/c-common.c", "status": "modified", "additions": 28, "deletions": 18, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7060db96db1a93b956a065ab05fc2995d5af17f1/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7060db96db1a93b956a065ab05fc2995d5af17f1/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=7060db96db1a93b956a065ab05fc2995d5af17f1", "patch": "@@ -1204,6 +1204,9 @@ conversion_warning (tree type, tree expr)\n \n   unsigned int formal_prec = TYPE_PRECISION (type);\n \n+  if (!warn_conversion && !warn_sign_conversion)\n+    return;\n+\n   if (TREE_CODE (expr) == REAL_CST || TREE_CODE (expr) == INTEGER_CST)\n     {\n       /* Warn for real constant that is not an exact integer converted\n@@ -1220,10 +1223,13 @@ conversion_warning (tree type, tree expr)\n                && !int_fits_type_p (expr, type))\n         {\n           if (TYPE_UNSIGNED (type) && !TYPE_UNSIGNED (TREE_TYPE (expr)))\n-            warning (OPT_Wconversion,\n-                     \"negative integer implicitly converted to unsigned type\");\n-          else\n-            give_warning = true;\n+\t    warning (OPT_Wsign_conversion,\n+\t\t     \"negative integer implicitly converted to unsigned type\");\n+          else if (!TYPE_UNSIGNED (type) && TYPE_UNSIGNED (TREE_TYPE (expr)))\n+\t    warning (OPT_Wsign_conversion,\n+\t\t     \"conversion of unsigned constant value to negative integer\");\n+\t  else\n+\t    give_warning = true;\n         }\n       else if (TREE_CODE (type) == REAL_TYPE)\n         {\n@@ -1261,16 +1267,20 @@ conversion_warning (tree type, tree expr)\n                && TREE_CODE (type) == INTEGER_TYPE)\n         {\n           /* Warn for integer types converted to smaller integer types.  */\n-          if (formal_prec < TYPE_PRECISION (TREE_TYPE (expr))\n-              /* When they are the same width but different signedness,\n-                 then the value may change.  */\n-              || (formal_prec == TYPE_PRECISION (TREE_TYPE (expr))\n-                  && TYPE_UNSIGNED (TREE_TYPE (expr)) != TYPE_UNSIGNED (type))\n-              /* Even when converted to a bigger type, if the type is\n-                 unsigned but expr is signed, then negative values\n-                 will be changed.  */\n-              || (TYPE_UNSIGNED (type) && !TYPE_UNSIGNED (TREE_TYPE (expr))))\n-            give_warning = true;\n+          if (formal_prec < TYPE_PRECISION (TREE_TYPE (expr))) \n+\t    give_warning = true;\n+\n+\t  /* When they are the same width but different signedness,\n+\t     then the value may change.  */\n+\t  else if ((formal_prec == TYPE_PRECISION (TREE_TYPE (expr))\n+\t\t    && TYPE_UNSIGNED (TREE_TYPE (expr)) != TYPE_UNSIGNED (type))\n+\t\t   /* Even when converted to a bigger type, if the type is\n+\t\t      unsigned but expr is signed, then negative values\n+\t\t      will be changed.  */\n+\t\t   || (TYPE_UNSIGNED (type) && !TYPE_UNSIGNED (TREE_TYPE (expr))))\n+\t    warning (OPT_Wsign_conversion,\n+\t\t     \"conversion to %qT from %qT may change the sign of the result\",\n+\t\t     type, TREE_TYPE (expr));\n         }\n \n       /* Warn for integer types converted to real types if and only if\n@@ -1327,7 +1337,7 @@ warnings_for_convert_and_check (tree type, tree expr, tree result)\n           if (!int_fits_type_p (expr, c_common_signed_type (type)))\n             warning (OPT_Woverflow,\n                      \"large integer implicitly truncated to unsigned type\");\n-          else if (warn_conversion)\n+          else\n             conversion_warning (type, expr);\n         }\n       else if (!int_fits_type_p (expr, unsigned_type_for (type))) \n@@ -1341,13 +1351,13 @@ warnings_for_convert_and_check (tree type, tree expr, tree result)\n \twarning (OPT_Woverflow,\n \t\t \"overflow in implicit constant conversion\");\n \n-      else if (warn_conversion)\n+      else\n \tconversion_warning (type, expr);\n     }\n   else if (TREE_CODE (result) == INTEGER_CST && TREE_OVERFLOW (result)) \n     warning (OPT_Woverflow,\n              \"overflow in implicit constant conversion\");\n-  else if (warn_conversion)\n+  else\n     conversion_warning (type, expr);\n }\n \n@@ -1366,7 +1376,7 @@ convert_and_check (tree type, tree expr)\n   \n   result = convert (type, expr);\n \n-  if (!skip_evaluation && !TREE_OVERFLOW_P (expr))\n+  if (!skip_evaluation && !TREE_OVERFLOW_P (expr) && result != error_mark_node)\n     warnings_for_convert_and_check (type, expr, result);\n \n   return result;"}, {"sha": "550059fa456f8638064d41e0110040d52fe6a963", "filename": "gcc/c-opts.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7060db96db1a93b956a065ab05fc2995d5af17f1/gcc%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7060db96db1a93b956a065ab05fc2995d5af17f1/gcc%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-opts.c?ref=7060db96db1a93b956a065ab05fc2995d5af17f1", "patch": "@@ -1104,7 +1104,14 @@ c_common_post_options (const char **pfilename)\n \t}\n       if (flag_inline_functions)\n \tflag_inline_trees = 2;\n-    }\n+    } \n+\n+  /* In C, -Wconversion enables -Wsign-conversion (unless disabled\n+     through -Wno-sign-conversion). While in C++,\n+     -Wsign-conversion needs to be requested explicitly.  */\n+  if (warn_sign_conversion == -1)\n+    warn_sign_conversion =  (c_dialect_cxx ()) ? 0 : warn_conversion;\n+\n \n   /* Special format checking options don't work without -Wformat; warn if\n      they are used.  */"}, {"sha": "0ef76937947c4a1a2ce45ed24114b6a344751c77", "filename": "gcc/c.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7060db96db1a93b956a065ab05fc2995d5af17f1/gcc%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7060db96db1a93b956a065ab05fc2995d5af17f1/gcc%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc.opt?ref=7060db96db1a93b956a065ab05fc2995d5af17f1", "patch": "@@ -164,6 +164,10 @@ Wconversion\n C ObjC C++ ObjC++ Var(warn_conversion) Warning\n Warn for implicit type conversions that may change a value\n \n+Wsign-conversion\n+C ObjC C++ ObjC++ Var(warn_sign_conversion) Init(-1)\n+Warn for implicit type conversions between signed and unsigned integers\n+\n Wctor-dtor-privacy\n C++ ObjC++ Var(warn_ctor_dtor_privacy) Warning\n Warn when all constructors and destructors are private"}, {"sha": "6486ec07b367c9b1124f2f3884499b53f1f88f22", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7060db96db1a93b956a065ab05fc2995d5af17f1/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7060db96db1a93b956a065ab05fc2995d5af17f1/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=7060db96db1a93b956a065ab05fc2995d5af17f1", "patch": "@@ -1,3 +1,8 @@\n+2007-05-19  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n+\n+\t* cvt.c (cp_convert_and_check): Don't check warnings if the\n+\tconversion failed.\n+\n 2007-05-18  Geoffrey Keating  <geoffk@apple.com>\n \n \t* mangle.c (write_real_cst): Use 'unsigned long' for %lx."}, {"sha": "36e0facb725871b9405747f61e2215a9d76e9c68", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7060db96db1a93b956a065ab05fc2995d5af17f1/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7060db96db1a93b956a065ab05fc2995d5af17f1/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=7060db96db1a93b956a065ab05fc2995d5af17f1", "patch": "@@ -610,7 +610,7 @@ cp_convert_and_check (tree type, tree expr)\n   \n   result = cp_convert (type, expr);\n \n-  if (!skip_evaluation && !TREE_OVERFLOW_P (expr))\n+  if (!skip_evaluation && !TREE_OVERFLOW_P (expr) && result != error_mark_node)\n     warnings_for_convert_and_check (type, expr, result);\n \n   return result;"}, {"sha": "7aef897f0f5255ff20871ba902379b5a8fe6ebda", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7060db96db1a93b956a065ab05fc2995d5af17f1/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7060db96db1a93b956a065ab05fc2995d5af17f1/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=7060db96db1a93b956a065ab05fc2995d5af17f1", "patch": "@@ -227,7 +227,7 @@ Objective-C and Objective-C++ Dialects}.\n -w  -Wextra  -Wall  -Waddress  -Waggregate-return -Warray-bounds @gol\n -Wno-attributes -Wc++-compat -Wc++0x-compat -Wcast-align  -Wcast-qual  @gol\n -Wchar-subscripts -Wclobbered  -Wcomment @gol\n--Wconversion -Wcoverage-mismatch -Wno-deprecated-declarations @gol\n+-Wconversion  -Wcoverage-mismatch  -Wno-deprecated-declarations @gol\n -Wdisabled-optimization  -Wno-div-by-zero  @gol\n -Wempty-body  -Wno-endif-labels @gol\n -Werror  -Werror=* @gol\n@@ -247,7 +247,7 @@ Objective-C and Objective-C++ Dialects}.\n -Wparentheses  -Wpointer-arith  -Wno-pointer-to-int-cast @gol\n -Wredundant-decls @gol\n -Wreturn-type  -Wsequence-point  -Wshadow @gol\n--Wsign-compare  -Wstack-protector @gol\n+-Wsign-compare  -Wsign-conversion  -Wstack-protector @gol\n -Wstrict-aliasing -Wstrict-aliasing=n @gol\n -Wstrict-overflow -Wstrict-overflow=@var{n} @gol\n -Wswitch  -Wswitch-default  -Wswitch-enum @gol\n@@ -3437,19 +3437,24 @@ Warn for variables that might be changed by @samp{longjmp} or\n \n @item -Wconversion\n @opindex Wconversion\n+@opindex Wno-conversion\n Warn for implicit conversions that may alter a value. This includes\n conversions between real and integer, like @code{abs (x)} when\n @code{x} is @code{double}; conversions between signed and unsigned,\n like @code{unsigned ui = -1}; and conversions to smaller types, like\n @code{sqrtf (M_PI)}. Do not warn for explicit casts like @code{abs\n ((int) x)} and @code{ui = (unsigned) -1}, or if the value is not\n-changed by the conversion like in @code{abs (2.0)}.\n+changed by the conversion like in @code{abs (2.0)}.  Warnings about\n+conversions between signed and unsigned integers can be disabled by\n+using @option{-Wno-sign-conversion}.\n \n For C++, also warn for conversions between @code{NULL} and non-pointer\n types; confusing overload resolution for user-defined conversions; and\n conversions that will never use a type conversion operator:\n conversions to @code{void}, the same type, a base class or a reference\n-to them.\n+to them. Warnings about conversions between signed and unsigned\n+integers are disabled by default in C++ unless\n+@option{-Wsign-conversion} is explicitly enabled.\n \n @item -Wempty-body\n @opindex Wempty-body\n@@ -3468,6 +3473,14 @@ an incorrect result when the signed value is converted to unsigned.\n This warning is also enabled by @option{-Wextra}; to get the other warnings\n of @option{-Wextra} without this warning, use @samp{-Wextra -Wno-sign-compare}.\n \n+@item -Wsign-conversion\n+@opindex Wsign-conversion\n+@opindex Wno-sign-conversion\n+Warn for implicit conversions that may change the sign of an integer\n+value, like assigning a signed integer expression to an unsigned\n+integer variable. An explicit cast silences the warning. In C, this\n+option is enabled also by @option{-Wconversion}.\n+\n @item -Waddress\n @opindex Waddress\n @opindex Wno-address"}, {"sha": "56565874039329b9b049fffdff3e8b31048c1086", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7060db96db1a93b956a065ab05fc2995d5af17f1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7060db96db1a93b956a065ab05fc2995d5af17f1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7060db96db1a93b956a065ab05fc2995d5af17f1", "patch": "@@ -1,3 +1,14 @@\n+2007-05-19  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n+\n+\t* gcc.dg/Wconversion-integer.c: Group testcases and add more.\n+\t* gcc.dg/Wconversion-sign.c: New.\n+\t* gcc.dg/Wconversion-integer-no-sign.c: New.\n+\t* g++.dg/warn/Wconversion-integer.C: Move some warnings to\n+\tWconversion-sign.C\n+\t* g++.dg/warn/Wconversion-sign.C: New.\n+\t* g++.old-deja/g++.other/warn4.C: Update.\n+\t* g++.dg/warn/Wconversion1.C: Likewise.\n+\t\n 2007-05-19  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* gcc.dg/torture/builtin-math-2.c: Add gamma_r/lgamma_r tests."}, {"sha": "46900825a8b5167fbecbaa8a78a4d1f3342721c1", "filename": "gcc/testsuite/g++.dg/warn/Wconversion-integer.C", "status": "modified", "additions": 53, "deletions": 54, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7060db96db1a93b956a065ab05fc2995d5af17f1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWconversion-integer.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7060db96db1a93b956a065ab05fc2995d5af17f1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWconversion-integer.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWconversion-integer.C?ref=7060db96db1a93b956a065ab05fc2995d5af17f1", "patch": "@@ -18,49 +18,14 @@ void h (int x)\n   unsigned char uc = 3;\n   signed char   sc = 3;\n \n-  fuc (-1); /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n-  uc = -1; /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n-  fuc ('\\xa0'); /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n-  uc = '\\xa0'; /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n-  uc = x ? 1U : -1; /* { dg-warning \"conversion\" } */\n-  /* { dg-warning \"negative integer implicitly converted to unsigned type\" \"\" { target *-*-* } 25 } */\n-  uc = x ? SCHAR_MIN : 1U; /* { dg-warning \"conversion\" } */\n-  /* { dg-warning \"negative integer implicitly converted to unsigned type\" \"\" { target *-*-* } 27 } */\n-\n-  uc = x ? 1 : -1; /* { dg-warning \"conversion\" } */\n-\n-  uc = x ? SCHAR_MIN : 1; /* { dg-warning \"conversion\" } */\n-\n-  fuc ('A');\n-  uc = 'A';\n-  uc = (unsigned char) -1;\n-\n-  fui (-1); /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n-  ui = -1; /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n-  ui = x ? 1U : -1; /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n-  ui = x ? INT_MIN : 1U; /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n-  ui = ui ? SCHAR_MIN : 1U; /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n-  ui = 1U * -1; /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n-  ui = ui + INT_MIN; /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n-  ui = x ? 1 : -1; /* { dg-warning \"conversion\" } */\n-  ui = ui ? SCHAR_MIN : 1; /* { dg-warning \"conversion\" } */\n-\n-  ui = -1 * (1 * -1);\n-  ui = (unsigned) -1;\n-\n-  fsc (uc); /* { dg-warning \"conversion\" } */\n-  sc = uc;  /* { dg-warning \"conversion\" } */\n-  fuc (sc); /* { dg-warning \"conversion\" } */\n-  uc = sc;  /* { dg-warning \"conversion\" } */\n-  fsi (ui); /* { dg-warning \"conversion\" } */\n-  si = ui;  /* { dg-warning \"conversion\" } */\n-  fui (si); /* { dg-warning \"conversion\" } */ \n-  ui = si;  /* { dg-warning \"conversion\" } */ \n-  fui (sc); /* { dg-warning \"conversion\" } */\n-  ui = sc;  /* { dg-warning \"conversion\" } */\n-\n-  fui ('\\xa0');/* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n-  ui = '\\xa0'; /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n+  uc = ui; /* { dg-warning \"conversion\" } */\n+  uc = si; /* { dg-warning \"conversion\" } */\n+  sc = ui; /* { dg-warning \"conversion\" } */\n+  sc = si; /* { dg-warning \"conversion\" } */\n+  fuc (ui); /* { dg-warning \"conversion\" } */\n+  fuc (si); /* { dg-warning \"conversion\" } */\n+  fsc (ui); /* { dg-warning \"conversion\" } */\n+  fsc (si); /* { dg-warning \"conversion\" } */\n \n   fsi (si);\n   fui (ui);\n@@ -72,24 +37,58 @@ void h (int x)\n   ui = 'A';\n   fsi ('A');\n   si = 'A';\n-  \n+  fuc ('A');\n+  uc = 'A';\n \n-  fsi (UINT_MAX - 1);  /* { dg-warning \"conversion\" } */\n-  si = UINT_MAX - 1;   /* { dg-warning \"conversion\" } */\n-  fsi (UINT_MAX - 1U); /* { dg-warning \"conversion\" } */\n-  si = UINT_MAX - 1U;  /* { dg-warning \"conversion\" } */\n+  uc = x ? 1U : -1; /* { dg-warning \"conversion\" } */\n+  uc = x ? SCHAR_MIN : 1U; /* { dg-warning \"conversion\" } */\n+  uc = x ? 1 : -1; /* { dg-warning \"conversion\" } */\n+  uc = x ? SCHAR_MIN : 1; /* { dg-warning \"conversion\" } */\n+  ui = x ? 1U : -1; /* Warned by -Wsign-conversion.  */\n+  ui = x ? INT_MIN : 1U; /* Warned by -Wsign-conversion.  */\n+  ui = ui ? SCHAR_MIN : 1U; /* Warned by -Wsign-conversion.  */\n+  ui = 1U * -1; /* Warned by -Wsign-conversion.  */\n+  ui = ui + INT_MIN; /* Warned by -Wsign-conversion.  */\n+  ui = x ? 1 : -1; /* Warned by -Wsign-conversion.  */\n+  ui = ui ? SCHAR_MIN : 1; /* Warned by -Wsign-conversion.  */\n+\n+  fuc (-1); /* Warned by -Wsign-conversion.  */\n+  uc = -1; /* Warned by -Wsign-conversion.  */\n+  fui (-1); /* Warned by -Wsign-conversion.  */\n+  ui = -1; /* Warned by -Wsign-conversion.  */\n+  fuc ('\\xa0'); /* Warned by -Wsign-conversion.  */\n+  uc = '\\xa0'; /* Warned by -Wsign-conversion.  */\n+  fui ('\\xa0'); /* Warned by -Wsign-conversion.  */\n+  ui = '\\xa0';  /* Warned by -Wsign-conversion.  */\n+  fsi (0x80000000); /* Warned by -Wsign-conversion.  */\n+  si = 0x80000000;  /* Warned by -Wsign-conversion.  */\n+\n+\n+  fsi (UINT_MAX - 1);  /* Warned by -Wsign-conversion.  */\n+  si = UINT_MAX - 1;   /* Warned by -Wsign-conversion.  */\n+  fsi (UINT_MAX - 1U); /* Warned by -Wsign-conversion.  */\n+  si = UINT_MAX - 1U;  /* Warned by -Wsign-conversion.  */\n   fsi (UINT_MAX/3U);\n   si = UINT_MAX/3U;\n   fsi (UINT_MAX/3);\n   si = UINT_MAX/3;\n   fui (UINT_MAX - 1);\n   ui = UINT_MAX - 1;\n \n-  fsi (0x80000000); /* { dg-warning \"conversion\" } */\n-  si = 0x80000000;  /* { dg-warning \"conversion\" } */\n-}\n-\n-\n-unsigned fui (unsigned a) { return a + -1; } /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n+  uc = (unsigned char) -1;\n+  ui = -1 * (1 * -1);\n+  ui = (unsigned) -1;\n \n+  fsc (uc); /* Warned by -Wsign-conversion.  */\n+  sc = uc;  /* Warned by -Wsign-conversion.  */\n+  fuc (sc); /* Warned by -Wsign-conversion.  */\n+  uc = sc;  /* Warned by -Wsign-conversion.  */\n+  fsi (ui); /* Warned by -Wsign-conversion.  */\n+  si = ui;  /* Warned by -Wsign-conversion.  */\n+  fui (si); /* Warned by -Wsign-conversion.  */ \n+  ui = si;  /* Warned by -Wsign-conversion.  */ \n+  fui (sc); /* Warned by -Wsign-conversion.  */\n+  ui = sc;  /* Warned by -Wsign-conversion.  */\n+}\n \n+unsigned fui (unsigned a) { return a + -1; } /* Warned by -Wsign-conversion.  */"}, {"sha": "48e319ad66f0db201f081deb041ce00adbb9e108", "filename": "gcc/testsuite/g++.dg/warn/Wconversion1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7060db96db1a93b956a065ab05fc2995d5af17f1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWconversion1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7060db96db1a93b956a065ab05fc2995d5af17f1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWconversion1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWconversion1.C?ref=7060db96db1a93b956a065ab05fc2995d5af17f1", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-fsigned-char -Wconversion\" }\n+// { dg-options \"-fsigned-char -Wsign-conversion\" }\n \n char c1 = 1024; // { dg-warning \"overflow\" }\n char c2 = char(1024);"}, {"sha": "b097446c3f84f4f9d2efddd3141f32b5dca982be", "filename": "gcc/testsuite/g++.dg/warn/Wsign-conversion.C", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7060db96db1a93b956a065ab05fc2995d5af17f1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWsign-conversion.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7060db96db1a93b956a065ab05fc2995d5af17f1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWsign-conversion.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWsign-conversion.C?ref=7060db96db1a93b956a065ab05fc2995d5af17f1", "patch": "@@ -0,0 +1,95 @@\n+/* Test for diagnostics for implicit conversions between signed and\n+   unsigned integer types.\n+   C++ equivalent of gcc/testsuite/gcc.dg/Wsign-conversion.c  */\n+\n+// { dg-do compile } \n+// { dg-options \"-fsigned-char -Wsign-conversion\" } \n+#include <limits.h>\n+\n+void fsc (signed char sc);\n+void fuc (unsigned char uc);\n+unsigned fui (unsigned int  ui);\n+void fsi (signed int ui);\n+\n+void h (int x)\n+{\n+  unsigned int ui = 3;\n+  int   si = 3;\n+  unsigned char uc = 3;\n+  signed char   sc = 3;\n+\n+  uc = ui; \n+  uc = si; \n+  sc = ui; \n+  sc = si; \n+  fuc (ui);\n+  fuc (si);\n+  fsc (ui);\n+  fsc (si);\n+\n+  fsi (si);\n+  fui (ui);\n+  fsi (uc);\n+  si = uc;\n+  fui (uc);\n+  ui = uc;\n+  fui ('A');\n+  ui = 'A';\n+  fsi ('A');\n+  si = 'A';\n+  fuc ('A');\n+  uc = 'A';\n+\n+  uc = x ? 1U : -1; /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n+  uc = x ? SCHAR_MIN : 1U;  /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n+  uc = x ? 1 : -1; \n+  uc = x ? SCHAR_MIN : 1; \n+  ui = x ? 1U : -1; /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n+  ui = x ? INT_MIN : 1U; /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n+  ui = ui ? SCHAR_MIN : 1U; /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n+  ui = 1U * -1; /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n+  ui = ui + INT_MIN; /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n+  ui = x ? 1 : -1; /* { dg-warning \"conversion\" } */\n+  ui = ui ? SCHAR_MIN : 1; /* { dg-warning \"conversion\" } */\n+\n+  fuc (-1); /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n+  uc = -1;  /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n+  fui (-1); /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n+  ui = -1; /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n+  fuc ('\\xa0'); /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n+  uc = '\\xa0'; /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n+  fui ('\\xa0');/* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n+  ui = '\\xa0'; /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n+  fsi (0x80000000); /* { dg-warning \"conversion\" } */\n+  si = 0x80000000;  /* { dg-warning \"conversion\" } */\n+\n+\n+  fsi (UINT_MAX - 1);  /* { dg-warning \"conversion\" } */\n+  si = UINT_MAX - 1;   /* { dg-warning \"conversion\" } */\n+  fsi (UINT_MAX - 1U); /* { dg-warning \"conversion\" } */\n+  si = UINT_MAX - 1U;  /* { dg-warning \"conversion\" } */\n+  fsi (UINT_MAX/3U);\n+  si = UINT_MAX/3U;\n+  fsi (UINT_MAX/3);\n+  si = UINT_MAX/3;\n+  fui (UINT_MAX - 1);\n+  ui = UINT_MAX - 1;\n+\n+  uc = (unsigned char) -1;\n+  ui = -1 * (1 * -1);\n+  ui = (unsigned) -1;\n+\n+  fsc (uc); /* { dg-warning \"conversion\" } */\n+  sc = uc;  /* { dg-warning \"conversion\" } */\n+  fuc (sc); /* { dg-warning \"conversion\" } */\n+  uc = sc;  /* { dg-warning \"conversion\" } */\n+  fsi (ui); /* { dg-warning \"conversion\" } */\n+  si = ui;  /* { dg-warning \"conversion\" } */\n+  fui (si); /* { dg-warning \"conversion\" } */ \n+  ui = si;  /* { dg-warning \"conversion\" } */ \n+  fui (sc); /* { dg-warning \"conversion\" } */\n+  ui = sc;  /* { dg-warning \"conversion\" } */\n+}\n+\n+unsigned fui (unsigned a) { return a + -1; } /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n+"}, {"sha": "7973c75d0f9a2238f38dd370e0f6798071f90b6f", "filename": "gcc/testsuite/g++.old-deja/g++.other/warn4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7060db96db1a93b956a065ab05fc2995d5af17f1/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fwarn4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7060db96db1a93b956a065ab05fc2995d5af17f1/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fwarn4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fwarn4.C?ref=7060db96db1a93b956a065ab05fc2995d5af17f1", "patch": "@@ -1,5 +1,5 @@\n // { dg-do assemble  }\n-// { dg-options \"-Wconversion\" }\n+// { dg-options \"-Wsign-conversion\" }\n \n // Copyright (C) 1999 Free Software Foundation, Inc.\n // Contributed by Nathan Sidwell 21 Nov 1999 <nathan@acm.org>"}, {"sha": "3618040ee9c03f1882521aa00efd01e61b2af84f", "filename": "gcc/testsuite/gcc.dg/Wconversion-integer-no-sign.c", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7060db96db1a93b956a065ab05fc2995d5af17f1/gcc%2Ftestsuite%2Fgcc.dg%2FWconversion-integer-no-sign.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7060db96db1a93b956a065ab05fc2995d5af17f1/gcc%2Ftestsuite%2Fgcc.dg%2FWconversion-integer-no-sign.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWconversion-integer-no-sign.c?ref=7060db96db1a93b956a065ab05fc2995d5af17f1", "patch": "@@ -0,0 +1,96 @@\n+/* Test for diagnostics for implicit conversions between integer types\n+   These tests come from gcc/testsuite/gcc.dg/overflow-warn-2.c  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c99 -fsigned-char -Wconversion -Wno-sign-conversion\" } */\n+\n+#include <limits.h>\n+\n+void fsc (signed char sc);\n+void fuc (unsigned char uc);\n+unsigned fui (unsigned int  ui);\n+void fsi (signed int ui);\n+\n+void h (int x)\n+{\n+  unsigned int ui = 3;\n+  int   si = 3;\n+  unsigned char uc = 3;\n+  signed char   sc = 3;\n+\n+  uc = ui; /* { dg-warning \"conversion\" } */\n+  uc = si; /* { dg-warning \"conversion\" } */\n+  sc = ui; /* { dg-warning \"conversion\" } */\n+  sc = si; /* { dg-warning \"conversion\" } */\n+  fuc (ui); /* { dg-warning \"conversion\" } */\n+  fuc (si); /* { dg-warning \"conversion\" } */\n+  fsc (ui); /* { dg-warning \"conversion\" } */\n+  fsc (si); /* { dg-warning \"conversion\" } */\n+\n+  fsi (si);\n+  fui (ui);\n+  fsi (uc);\n+  si = uc;\n+  fui (uc);\n+  ui = uc;\n+  fui ('A');\n+  ui = 'A';\n+  fsi ('A');\n+  si = 'A';\n+  fuc ('A');\n+  uc = 'A';\n+\n+  uc = x ? 1U : -1; /* { dg-warning \"conversion\" } */\n+  uc = x ? SCHAR_MIN : 1U; /* { dg-warning \"conversion\" } */\n+  uc = x ? 1 : -1; /* { dg-warning \"conversion\" } */\n+  uc = x ? SCHAR_MIN : 1; /* { dg-warning \"conversion\" } */\n+  ui = x ? 1U : -1; /* Warned by -Wsign-conversion.  */\n+  ui = x ? INT_MIN : 1U; /* Warned by -Wsign-conversion.  */\n+  ui = ui ? SCHAR_MIN : 1U; /* Warned by -Wsign-conversion.  */\n+  ui = 1U * -1; /* Warned by -Wsign-conversion.  */\n+  ui = ui + INT_MIN; /* Warned by -Wsign-conversion.  */\n+  ui = x ? 1 : -1; /* Warned by -Wsign-conversion.  */\n+  ui = ui ? SCHAR_MIN : 1; /* Warned by -Wsign-conversion.  */\n+\n+  fuc (-1); /* Warned by -Wsign-conversion.  */\n+  uc = -1; /* Warned by -Wsign-conversion.  */\n+  fui (-1); /* Warned by -Wsign-conversion.  */\n+  ui = -1; /* Warned by -Wsign-conversion.  */\n+  fuc ('\\xa0'); /* Warned by -Wsign-conversion.  */\n+  uc = '\\xa0'; /* Warned by -Wsign-conversion.  */\n+  fui ('\\xa0'); /* Warned by -Wsign-conversion.  */\n+  ui = '\\xa0';  /* Warned by -Wsign-conversion.  */\n+  fsi (0x80000000); /* Warned by -Wsign-conversion.  */\n+  si = 0x80000000;  /* Warned by -Wsign-conversion.  */\n+\n+\n+  fsi (UINT_MAX - 1);  /* Warned by -Wsign-conversion.  */\n+  si = UINT_MAX - 1;   /* Warned by -Wsign-conversion.  */\n+  fsi (UINT_MAX - 1U); /* Warned by -Wsign-conversion.  */\n+  si = UINT_MAX - 1U;  /* Warned by -Wsign-conversion.  */\n+  fsi (UINT_MAX/3U);\n+  si = UINT_MAX/3U;\n+  fsi (UINT_MAX/3);\n+  si = UINT_MAX/3;\n+  fui (UINT_MAX - 1);\n+  ui = UINT_MAX - 1;\n+\n+  uc = (unsigned char) -1;\n+  ui = -1 * (1 * -1);\n+  ui = (unsigned) -1;\n+\n+  fsc (uc); /* Warned by -Wsign-conversion.  */\n+  sc = uc;  /* Warned by -Wsign-conversion.  */\n+  fuc (sc); /* Warned by -Wsign-conversion.  */\n+  uc = sc;  /* Warned by -Wsign-conversion.  */\n+  fsi (ui); /* Warned by -Wsign-conversion.  */\n+  si = ui;  /* Warned by -Wsign-conversion.  */\n+  fui (si); /* Warned by -Wsign-conversion.  */ \n+  ui = si;  /* Warned by -Wsign-conversion.  */ \n+  fui (sc); /* Warned by -Wsign-conversion.  */\n+  ui = sc;  /* Warned by -Wsign-conversion.  */\n+}\n+\n+unsigned fui (unsigned a) { return a + -1; } /* Warned by -Wsign-conversion.  */\n+\n+"}, {"sha": "9e3b948251c1cb9e4c7470a8f783e9a0051c60ad", "filename": "gcc/testsuite/gcc.dg/Wconversion-integer.c", "status": "modified", "additions": 46, "deletions": 43, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7060db96db1a93b956a065ab05fc2995d5af17f1/gcc%2Ftestsuite%2Fgcc.dg%2FWconversion-integer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7060db96db1a93b956a065ab05fc2995d5af17f1/gcc%2Ftestsuite%2Fgcc.dg%2FWconversion-integer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWconversion-integer.c?ref=7060db96db1a93b956a065ab05fc2995d5af17f1", "patch": "@@ -18,25 +18,34 @@ void h (int x)\n   unsigned char uc = 3;\n   signed char   sc = 3;\n \n-  fuc (-1); /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n-  uc = -1; /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n-  fuc ('\\xa0'); /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n-  uc = '\\xa0'; /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n-  uc = x ? 1U : -1; /* { dg-warning \"conversion\" } */\n-  /* { dg-warning \"negative integer implicitly converted to unsigned type\" \"\" { target *-*-* } 25 } */\n-  uc = x ? SCHAR_MIN : 1U; /* { dg-warning \"conversion\" } */\n-  /* { dg-warning \"negative integer implicitly converted to unsigned type\" \"\" { target *-*-* } 27 } */\n-\n-  uc = x ? 1 : -1; /* { dg-warning \"conversion\" } */\n-\n-  uc = x ? SCHAR_MIN : 1; /* { dg-warning \"conversion\" } */\n+  uc = ui; /* { dg-warning \"conversion\" } */\n+  uc = si; /* { dg-warning \"conversion\" } */\n+  sc = ui; /* { dg-warning \"conversion\" } */\n+  sc = si; /* { dg-warning \"conversion\" } */\n+  fuc (ui); /* { dg-warning \"conversion\" } */\n+  fuc (si); /* { dg-warning \"conversion\" } */\n+  fsc (ui); /* { dg-warning \"conversion\" } */\n+  fsc (si); /* { dg-warning \"conversion\" } */\n \n+  fsi (si);\n+  fui (ui);\n+  fsi (uc);\n+  si = uc;\n+  fui (uc);\n+  ui = uc;\n+  fui ('A');\n+  ui = 'A';\n+  fsi ('A');\n+  si = 'A';\n   fuc ('A');\n   uc = 'A';\n-  uc = (unsigned char) -1;\n \n-  fui (-1); /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n-  ui = -1; /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n+  uc = x ? 1U : -1; /* { dg-warning \"conversion\" } */\n+  /* { dg-warning \"negative integer implicitly converted to unsigned type\" \"\" { target *-*-* } 43 } */\n+  uc = x ? SCHAR_MIN : 1U; /* { dg-warning \"conversion\" } */\n+  /* { dg-warning \"negative integer implicitly converted to unsigned type\" \"\" { target *-*-* } 45 } */\n+  uc = x ? 1 : -1; /* { dg-warning \"conversion\" } */\n+  uc = x ? SCHAR_MIN : 1; /* { dg-warning \"conversion\" } */\n   ui = x ? 1U : -1; /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n   ui = x ? INT_MIN : 1U; /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n   ui = ui ? SCHAR_MIN : 1U; /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n@@ -45,34 +54,17 @@ void h (int x)\n   ui = x ? 1 : -1; /* { dg-warning \"conversion\" } */\n   ui = ui ? SCHAR_MIN : 1; /* { dg-warning \"conversion\" } */\n \n-  ui = -1 * (1 * -1);\n-  ui = (unsigned) -1;\n-\n-  fsc (uc); /* { dg-warning \"conversion\" } */\n-  sc = uc;  /* { dg-warning \"conversion\" } */\n-  fuc (sc); /* { dg-warning \"conversion\" } */\n-  uc = sc;  /* { dg-warning \"conversion\" } */\n-  fsi (ui); /* { dg-warning \"conversion\" } */\n-  si = ui;  /* { dg-warning \"conversion\" } */\n-  fui (si); /* { dg-warning \"conversion\" } */ \n-  ui = si;  /* { dg-warning \"conversion\" } */ \n-  fui (sc); /* { dg-warning \"conversion\" } */\n-  ui = sc;  /* { dg-warning \"conversion\" } */\n-\n+  fuc (-1); /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n+  uc = -1;  /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n+  fui (-1); /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n+  ui = -1; /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n+  fuc ('\\xa0'); /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n+  uc = '\\xa0'; /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n   fui ('\\xa0');/* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n   ui = '\\xa0'; /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n+  fsi (0x80000000); /* { dg-warning \"conversion\" } */\n+  si = 0x80000000;  /* { dg-warning \"conversion\" } */\n \n-  fsi (si);\n-  fui (ui);\n-  fsi (uc);\n-  si = uc;\n-  fui (uc);\n-  ui = uc;\n-  fui ('A');\n-  ui = 'A';\n-  fsi ('A');\n-  si = 'A';\n-  \n \n   fsi (UINT_MAX - 1);  /* { dg-warning \"conversion\" } */\n   si = UINT_MAX - 1;   /* { dg-warning \"conversion\" } */\n@@ -85,10 +77,21 @@ void h (int x)\n   fui (UINT_MAX - 1);\n   ui = UINT_MAX - 1;\n \n-  fsi (0x80000000); /* { dg-warning \"conversion\" } */\n-  si = 0x80000000;  /* { dg-warning \"conversion\" } */\n-}\n+  uc = (unsigned char) -1;\n+  ui = -1 * (1 * -1);\n+  ui = (unsigned) -1;\n \n+  fsc (uc); /* { dg-warning \"conversion\" } */\n+  sc = uc;  /* { dg-warning \"conversion\" } */\n+  fuc (sc); /* { dg-warning \"conversion\" } */\n+  uc = sc;  /* { dg-warning \"conversion\" } */\n+  fsi (ui); /* { dg-warning \"conversion\" } */\n+  si = ui;  /* { dg-warning \"conversion\" } */\n+  fui (si); /* { dg-warning \"conversion\" } */ \n+  ui = si;  /* { dg-warning \"conversion\" } */ \n+  fui (sc); /* { dg-warning \"conversion\" } */\n+  ui = sc;  /* { dg-warning \"conversion\" } */\n+}\n \n unsigned fui (unsigned a) { return a + -1; } /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n "}, {"sha": "45edd3b436145d0aad6b17b905537ca2808655bd", "filename": "gcc/testsuite/gcc.dg/Wsign-conversion.c", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7060db96db1a93b956a065ab05fc2995d5af17f1/gcc%2Ftestsuite%2Fgcc.dg%2FWsign-conversion.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7060db96db1a93b956a065ab05fc2995d5af17f1/gcc%2Ftestsuite%2Fgcc.dg%2FWsign-conversion.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWsign-conversion.c?ref=7060db96db1a93b956a065ab05fc2995d5af17f1", "patch": "@@ -0,0 +1,96 @@\n+/* Test for diagnostics for implicit conversions between signed and\n+   unsigned integer types.\n+   These tests come from gcc/testsuite/gcc.dg/overflow-warn-2.c  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c99 -fsigned-char -Wsign-conversion\" } */\n+#include <limits.h>\n+\n+void fsc (signed char sc);\n+void fuc (unsigned char uc);\n+unsigned fui (unsigned int  ui);\n+void fsi (signed int ui);\n+\n+void h (int x)\n+{\n+  unsigned int ui = 3;\n+  int   si = 3;\n+  unsigned char uc = 3;\n+  signed char   sc = 3;\n+\n+  uc = ui; \n+  uc = si; \n+  sc = ui; \n+  sc = si; \n+  fuc (ui);\n+  fuc (si);\n+  fsc (ui);\n+  fsc (si);\n+\n+  fsi (si);\n+  fui (ui);\n+  fsi (uc);\n+  si = uc;\n+  fui (uc);\n+  ui = uc;\n+  fui ('A');\n+  ui = 'A';\n+  fsi ('A');\n+  si = 'A';\n+  fuc ('A');\n+  uc = 'A';\n+\n+  uc = x ? 1U : -1; /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n+  uc = x ? SCHAR_MIN : 1U;  /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n+  uc = x ? 1 : -1; \n+  uc = x ? SCHAR_MIN : 1; \n+  ui = x ? 1U : -1; /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n+  ui = x ? INT_MIN : 1U; /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n+  ui = ui ? SCHAR_MIN : 1U; /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n+  ui = 1U * -1; /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n+  ui = ui + INT_MIN; /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n+  ui = x ? 1 : -1; /* { dg-warning \"conversion\" } */\n+  ui = ui ? SCHAR_MIN : 1; /* { dg-warning \"conversion\" } */\n+\n+  fuc (-1); /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n+  uc = -1;  /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n+  fui (-1); /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n+  ui = -1; /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n+  fuc ('\\xa0'); /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n+  uc = '\\xa0'; /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n+  fui ('\\xa0');/* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n+  ui = '\\xa0'; /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n+  fsi (0x80000000); /* { dg-warning \"conversion\" } */\n+  si = 0x80000000;  /* { dg-warning \"conversion\" } */\n+\n+\n+  fsi (UINT_MAX - 1);  /* { dg-warning \"conversion\" } */\n+  si = UINT_MAX - 1;   /* { dg-warning \"conversion\" } */\n+  fsi (UINT_MAX - 1U); /* { dg-warning \"conversion\" } */\n+  si = UINT_MAX - 1U;  /* { dg-warning \"conversion\" } */\n+  fsi (UINT_MAX/3U);\n+  si = UINT_MAX/3U;\n+  fsi (UINT_MAX/3);\n+  si = UINT_MAX/3;\n+  fui (UINT_MAX - 1);\n+  ui = UINT_MAX - 1;\n+\n+  uc = (unsigned char) -1;\n+  ui = -1 * (1 * -1);\n+  ui = (unsigned) -1;\n+\n+  fsc (uc); /* { dg-warning \"conversion\" } */\n+  sc = uc;  /* { dg-warning \"conversion\" } */\n+  fuc (sc); /* { dg-warning \"conversion\" } */\n+  uc = sc;  /* { dg-warning \"conversion\" } */\n+  fsi (ui); /* { dg-warning \"conversion\" } */\n+  si = ui;  /* { dg-warning \"conversion\" } */\n+  fui (si); /* { dg-warning \"conversion\" } */ \n+  ui = si;  /* { dg-warning \"conversion\" } */ \n+  fui (sc); /* { dg-warning \"conversion\" } */\n+  ui = sc;  /* { dg-warning \"conversion\" } */\n+}\n+\n+unsigned fui (unsigned a) { return a + -1; } /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n+\n+"}]}