{"sha": "7ed5d5b27f04ae693cc9d2c8221ce28f7dfa684c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2VkNWQ1YjI3ZjA0YWU2OTNjYzlkMmM4MjIxY2UyOGY3ZGZhNjg0Yw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@libertysurf.fr", "date": "2004-11-23T12:59:26Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2004-11-23T12:59:26Z"}, "message": "gthr-solaris.h (__gthread_recursive_mutex_t): New type.\n\n\t* gthr-solaris.h (__gthread_recursive_mutex_t): New type.\n\t(__GTHREAD_RECURSIVE_MUTEX_INIT_FUNCTION): Define to\n\t__gthread_recursive_mutex_init_function.\n\t(__gthread_key_create): Properly cast -1.\n\t(__gthread_recursive_mutex_init_function): New function.\n\t(__gthread_recursive_mutex_lock): Rewrite.\n\t(__gthread_recursive_mutex_trylock): Likewise.\n\t(__gthread_recursive_mutex_unlock): Likewise.\n\nFrom-SVN: r91086", "tree": {"sha": "9f10538b0f84abdc14d89454c5fbdb5abd358ac9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9f10538b0f84abdc14d89454c5fbdb5abd358ac9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7ed5d5b27f04ae693cc9d2c8221ce28f7dfa684c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ed5d5b27f04ae693cc9d2c8221ce28f7dfa684c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ed5d5b27f04ae693cc9d2c8221ce28f7dfa684c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ed5d5b27f04ae693cc9d2c8221ce28f7dfa684c/comments", "author": {"login": "ebotcazou", "id": 48091907, "node_id": "MDQ6VXNlcjQ4MDkxOTA3", "avatar_url": "https://avatars.githubusercontent.com/u/48091907?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebotcazou", "html_url": "https://github.com/ebotcazou", "followers_url": "https://api.github.com/users/ebotcazou/followers", "following_url": "https://api.github.com/users/ebotcazou/following{/other_user}", "gists_url": "https://api.github.com/users/ebotcazou/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebotcazou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebotcazou/subscriptions", "organizations_url": "https://api.github.com/users/ebotcazou/orgs", "repos_url": "https://api.github.com/users/ebotcazou/repos", "events_url": "https://api.github.com/users/ebotcazou/events{/privacy}", "received_events_url": "https://api.github.com/users/ebotcazou/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e2e9b7b8b20ca68c31859df3edcd37165e189410", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2e9b7b8b20ca68c31859df3edcd37165e189410", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2e9b7b8b20ca68c31859df3edcd37165e189410"}], "stats": {"total": 71, "additions": 64, "deletions": 7}, "files": [{"sha": "7488b6561a43eacf0a51d9d5c7ecde1dfcbc9ca1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ed5d5b27f04ae693cc9d2c8221ce28f7dfa684c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ed5d5b27f04ae693cc9d2c8221ce28f7dfa684c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7ed5d5b27f04ae693cc9d2c8221ce28f7dfa684c", "patch": "@@ -1,3 +1,14 @@\n+2004-11-23  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\t* gthr-solaris.h (__gthread_recursive_mutex_t): New type.\n+\t(__GTHREAD_RECURSIVE_MUTEX_INIT_FUNCTION): Define to\n+\t__gthread_recursive_mutex_init_function.\n+\t(__gthread_key_create): Properly cast -1.\n+\t(__gthread_recursive_mutex_init_function): New function.\n+\t(__gthread_recursive_mutex_lock): Rewrite.\n+\t(__gthread_recursive_mutex_trylock): Likewise.\n+\t(__gthread_recursive_mutex_unlock): Likewise.\n+\n 2004-11-23  Ralf Corsepius <ralf.corsepius@rtems.org>\n \n \t* config/c4x/t-rtems: New."}, {"sha": "a102262190de85bf29f70419651b359cfe545773", "filename": "gcc/gthr-solaris.h", "status": "modified", "additions": 53, "deletions": 7, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ed5d5b27f04ae693cc9d2c8221ce28f7dfa684c/gcc%2Fgthr-solaris.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ed5d5b27f04ae693cc9d2c8221ce28f7dfa684c/gcc%2Fgthr-solaris.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgthr-solaris.h?ref=7ed5d5b27f04ae693cc9d2c8221ce28f7dfa684c", "patch": "@@ -44,11 +44,16 @@ typedef struct {\n   int once;\n } __gthread_once_t;\n typedef mutex_t __gthread_mutex_t;\n-typedef mutex_t __gthread_recursive_mutex_t;\n+\n+typedef struct {\n+  long depth;\n+  thread_t owner;\n+  mutex_t actual;\n+} __gthread_recursive_mutex_t;\n \n #define __GTHREAD_ONCE_INIT { DEFAULTMUTEX, 0 }\n #define __GTHREAD_MUTEX_INIT DEFAULTMUTEX\n-#define __GTHREAD_RECURSIVE_MUTEX_INIT RECURSIVE_ERRORCHECKMUTEX\n+#define __GTHREAD_RECURSIVE_MUTEX_INIT_FUNCTION __gthread_recursive_mutex_init_function\n \n #if SUPPORTS_WEAK && GTHREAD_USE_WEAK\n \n@@ -411,8 +416,8 @@ __gthread_key_create (__gthread_key_t *key, void (*dtor) (void *))\n {\n   /* Solaris 2.5 contains thr_* routines no-op in libc, so test if we actually\n      got a reasonable key value, and if not, fail.  */\n-  *key = -1;\n-  if (thr_keycreate (key, dtor) != 0 || *key == -1)\n+  *key = (__gthread_key_t)-1;\n+  if (thr_keycreate (key, dtor) != 0 || *key == (__gthread_key_t)-1)\n     return -1;\n   else\n     return 0;\n@@ -468,22 +473,63 @@ __gthread_mutex_unlock (__gthread_mutex_t *mutex)\n     return 0;\n }\n \n+static inline int\n+__gthread_recursive_mutex_init_function (__gthread_recursive_mutex_t *mutex)\n+{\n+  mutex->depth = 0;\n+  mutex->owner = (thread_t) 0;\n+  return mutex_init (&mutex->actual, USYNC_THREAD, NULL);\n+}\n+\n static inline int\n __gthread_recursive_mutex_lock (__gthread_recursive_mutex_t *mutex)\n {\n-  return __gthread_mutex_lock (mutex);\n+  if (__gthread_active_p ())\n+    {\n+      thread_t me = thr_self ();\n+\n+      if (mutex->owner != me)\n+\t{\n+\t  mutex_lock (&mutex->actual);\n+\t  mutex->owner = me;\n+\t}\n+\n+      mutex->depth++;\n+    }\n+  return 0;\n }\n \n static inline int\n __gthread_recursive_mutex_trylock (__gthread_recursive_mutex_t *mutex)\n {\n-  return __gthread_mutex_trylock (mutex);\n+  if (__gthread_active_p ())\n+    {\n+      thread_t me = thr_self ();\n+\n+      if (mutex->owner != me)\n+\t{\n+\t  if (mutex_trylock (&mutex->actual))\n+\t    return 1;\n+\t  mutex->owner = me;\n+\t}\n+\n+      mutex->depth++;\n+    }\n+  return 0;\n }\n \n static inline int\n __gthread_recursive_mutex_unlock (__gthread_recursive_mutex_t *mutex)\n {\n-  return __gthread_mutex_unlock (mutex);\n+  if (__gthread_active_p ())\n+    {\n+      if (--mutex->depth == 0)\n+\t{\n+\t   mutex->owner = (thread_t) 0;\n+\t   mutex_unlock (&mutex->actual);\n+\t}\n+    }\n+  return 0;\n }\n \n #endif /* _LIBOBJC */"}]}