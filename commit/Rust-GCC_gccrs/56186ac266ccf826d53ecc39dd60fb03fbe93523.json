{"sha": "56186ac266ccf826d53ecc39dd60fb03fbe93523", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTYxODZhYzI2NmNjZjgyNmQ1M2VjYzM5ZGQ2MGZiMDNmYmU5MzUyMw==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2010-04-06T12:32:25Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2010-04-06T12:32:25Z"}, "message": "re PR tree-optimization/43627 (slow compilation (tree canonical iv  takes 75%))\n\n2010-04-06  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/43627\n\t* tree-vrp.c (extract_range_from_unary_expr): Widenings\n\tof [1, +INF(OVF)] go to [1, +INF(OVF)] of the wider type,\n\tnot varying.\n\n\t* gcc.dg/tree-ssa/vrp49.c: New testcase.\n\nFrom-SVN: r157992", "tree": {"sha": "2f14f42f42d043356e4dcb409a2fe721ee4ea3b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2f14f42f42d043356e4dcb409a2fe721ee4ea3b1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/56186ac266ccf826d53ecc39dd60fb03fbe93523", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56186ac266ccf826d53ecc39dd60fb03fbe93523", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56186ac266ccf826d53ecc39dd60fb03fbe93523", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56186ac266ccf826d53ecc39dd60fb03fbe93523/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d3bccded30236d16e477a7bbd79aff51724234b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3bccded30236d16e477a7bbd79aff51724234b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3bccded30236d16e477a7bbd79aff51724234b0"}], "stats": {"total": 56, "additions": 54, "deletions": 2}, "files": [{"sha": "7c66f3ef2527220550f29537d6dc050cb5a334e6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56186ac266ccf826d53ecc39dd60fb03fbe93523/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56186ac266ccf826d53ecc39dd60fb03fbe93523/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=56186ac266ccf826d53ecc39dd60fb03fbe93523", "patch": "@@ -1,3 +1,10 @@\n+2010-04-06  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/43627\n+\t* tree-vrp.c (extract_range_from_unary_expr): Widenings\n+\tof [1, +INF(OVF)] go to [1, +INF(OVF)] of the wider type,\n+\tnot varying.\n+\n 2010-04-06  Jakub Jelinek  <jakub@redhat.com>\n \n \t* BASE-VER: Change to 4.6.0."}, {"sha": "31e53ed58fe94372ea36661245a01e39533210d4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56186ac266ccf826d53ecc39dd60fb03fbe93523/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56186ac266ccf826d53ecc39dd60fb03fbe93523/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=56186ac266ccf826d53ecc39dd60fb03fbe93523", "patch": "@@ -1,3 +1,8 @@\n+2010-04-06  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/43627\n+\t* gcc.dg/tree-ssa/vrp49.c: New testcase.\n+\n 2010-04-06  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/43638"}, {"sha": "664ad93ef96c0cc62956769ce5f6fc8e62cb4590", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp49.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56186ac266ccf826d53ecc39dd60fb03fbe93523/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp49.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56186ac266ccf826d53ecc39dd60fb03fbe93523/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp49.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp49.c?ref=56186ac266ccf826d53ecc39dd60fb03fbe93523", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do link } */\n+/* { dg-options \"-O2\" } */\n+\n+extern void link_error (void) __attribute__((noreturn));\n+int n;\n+float *x;\n+int main()\n+{\n+  if (n > 0)\n+    {\n+      int i = 0;\n+      do\n+\t{\n+\t  long long index;\n+\t  i = i + 1;\n+\t  index = i;\n+\t  if (index <= 0)\n+\t    link_error ();\n+\t  x[index] = 0;\n+\t  i = i + 1;\n+\t  index = i;\n+\t  if (index <= 0)\n+\t    link_error ();\n+\t  x[index] = 0;\n+\t}\n+      while (i < n);\n+    }\n+}"}, {"sha": "c84004e6be4f08060ab02443dbbb77db45a04536", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56186ac266ccf826d53ecc39dd60fb03fbe93523/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56186ac266ccf826d53ecc39dd60fb03fbe93523/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=56186ac266ccf826d53ecc39dd60fb03fbe93523", "patch": "@@ -2715,8 +2715,16 @@ extract_range_from_unary_expr (value_range_t *vr, enum tree_code code,\n \t   || vr0.type == VR_ANTI_RANGE)\n \t  && TREE_CODE (vr0.min) == INTEGER_CST\n \t  && TREE_CODE (vr0.max) == INTEGER_CST\n-\t  && !is_overflow_infinity (vr0.min)\n-\t  && !is_overflow_infinity (vr0.max)\n+\t  && (!is_overflow_infinity (vr0.min)\n+\t      || (vr0.type == VR_RANGE\n+\t\t  && TYPE_PRECISION (outer_type) > TYPE_PRECISION (inner_type)\n+\t\t  && needs_overflow_infinity (outer_type)\n+\t\t  && supports_overflow_infinity (outer_type)))\n+\t  && (!is_overflow_infinity (vr0.max)\n+\t      || (vr0.type == VR_RANGE\n+\t\t  && TYPE_PRECISION (outer_type) > TYPE_PRECISION (inner_type)\n+\t\t  && needs_overflow_infinity (outer_type)\n+\t\t  && supports_overflow_infinity (outer_type)))\n \t  && (TYPE_PRECISION (outer_type) >= TYPE_PRECISION (inner_type)\n \t      || (vr0.type == VR_RANGE\n \t\t  && integer_zerop (int_const_binop (RSHIFT_EXPR,\n@@ -2730,6 +2738,10 @@ extract_range_from_unary_expr (value_range_t *vr, enum tree_code code,\n \t  new_max = force_fit_type_double (outer_type,\n \t\t\t\t\t   TREE_INT_CST_LOW (vr0.max),\n \t\t\t\t\t   TREE_INT_CST_HIGH (vr0.max), 0, 0);\n+\t  if (is_overflow_infinity (vr0.min))\n+\t    new_min = negative_overflow_infinity (outer_type);\n+\t  if (is_overflow_infinity (vr0.max))\n+\t    new_max = positive_overflow_infinity (outer_type);\n \t  set_and_canonicalize_value_range (vr, vr0.type,\n \t\t\t\t\t    new_min, new_max, NULL);\n \t  return;"}]}