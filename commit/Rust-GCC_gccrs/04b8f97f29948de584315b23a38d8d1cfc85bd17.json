{"sha": "04b8f97f29948de584315b23a38d8d1cfc85bd17", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDRiOGY5N2YyOTk0OGRlNTg0MzE1YjIzYTM4ZDhkMWNmYzg1YmQxNw==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2004-01-23T18:13:55Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2004-01-23T18:13:55Z"}, "message": "re PR c/18314 (Abnormal behavior in optimization)\n\n\tPR 18314\n\t* c-decl.c (diagnose_mismatched_decls): Also discard a\n\tbuilt-in if we encounter an old-style definition with the\n\tsame name.\ntestsuite:\n\t* gcc.dg/builtins-30.c: New testcase.\n\nFrom-SVN: r76441", "tree": {"sha": "cfd782672a48cf6a1c62786f30ac6d027af6b1d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cfd782672a48cf6a1c62786f30ac6d027af6b1d6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/04b8f97f29948de584315b23a38d8d1cfc85bd17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04b8f97f29948de584315b23a38d8d1cfc85bd17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04b8f97f29948de584315b23a38d8d1cfc85bd17", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04b8f97f29948de584315b23a38d8d1cfc85bd17/comments", "author": null, "committer": null, "parents": [{"sha": "1ab1739cc6a8c6c9f11075339fea83241a7e966f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ab1739cc6a8c6c9f11075339fea83241a7e966f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ab1739cc6a8c6c9f11075339fea83241a7e966f"}], "stats": {"total": 63, "additions": 53, "deletions": 10}, "files": [{"sha": "94a3436da3e9f69eb5c89ba1ea72359a5c27e6e1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04b8f97f29948de584315b23a38d8d1cfc85bd17/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04b8f97f29948de584315b23a38d8d1cfc85bd17/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=04b8f97f29948de584315b23a38d8d1cfc85bd17", "patch": "@@ -1,3 +1,10 @@\n+2004-01-23  Zack Weinberg  <zack@codesourcery.com>\n+\n+\tPR 18314\n+\t* c-decl.c (diagnose_mismatched_decls): Also discard a\n+\tbuilt-in if we encounter an old-style definition with the\n+\tsame name.\n+\n 2004-01-23  Jakub Jelinek  <jakub@redhat.com>\n \n \t* config.gcc (powerpc*-*): Clear $with_cpu or $with_tune if it was\n@@ -9,7 +16,7 @@\n \t[!__powerpc64__]: Corrected to handle kernels with changed ucontext.\n \n 2004-01-23  Eric Botcazou  <ebotcazou@act-europe.fr>\n-            Olivier Hainque  <hainque@act-europe.fr>\n+\t    Olivier Hainque  <hainque@act-europe.fr>\n \n \t* fold-const.c (fold_binary_op_with_conditional_arg): Only\n \tbuild a COMPOUND_EXPR if 'arg' is really a SAVE_EXPR.\n@@ -34,7 +41,7 @@\n 2004-01-23  Alexandre Oliva  <aoliva@redhat.com>\n \n \tPR optimization/13819\n-\t* config/sh/sh.c (sh_reorg): Compensate for sharing of CLOBBERs \n+\t* config/sh/sh.c (sh_reorg): Compensate for sharing of CLOBBERs\n \tintroduced by 2004-01-20's Jan Hubicka's copy_insn change.\n \t(sh_handle_sp_switch_attribute): Remove warning.\n \n@@ -129,7 +136,7 @@\n 2004-01-22  Daniel Jacobowitz  <drow@mvista.com>\n \n \t* config/arm/arm.c: Include \"debug.h\".\n-\t(thumb_pushpop): Take two new arguments.  Add some commentary. \n+\t(thumb_pushpop): Take two new arguments.  Add some commentary.\n \tOutput frame information when pushing.\n \t(thumb_exit, thumb_unexpanded_epilogue): Update calls to\n \tthumb_pushpop.\n@@ -210,7 +217,7 @@\n 2004-01-21  Andrew Pinski  <apinski@apple.com>\n \n \tPR target/13785\n-\t* config/rs6000/rs6000.md (call_value): Force operand \n+\t* config/rs6000/rs6000.md (call_value): Force operand\n \t1 not operand 0 into a register.\n \n 2004-01-21  Kazu Hirata  <kazu@cs.umass.edu>\n@@ -227,7 +234,7 @@\n 2004-01-21  Caroline Tice <ctice@apple.com>\n \n \tPR target/12308\n-\t* config/i386/i386.md (fix_truncxfdi2): Add clause to clobber \n+\t* config/i386/i386.md (fix_truncxfdi2): Add clause to clobber\n \tflags register.\n \t(fix_truncdfdi2): Likewise.\n \t(fix_truncsfdi2): Likewise.\n@@ -240,7 +247,7 @@\n \t(fix_truncdfhi2): Likewise.\n \t(fix_truncsfhi2): Likewise.\n \t(*fix_trunchi_1): Likewise.\n-\t\n+\n 2004-01-21  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* alias.c, basic-block.h, c-common.c, c-common.h,"}, {"sha": "3af82f4b7c7d85d8170950326cce685e3e3736af", "filename": "gcc/c-decl.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04b8f97f29948de584315b23a38d8d1cfc85bd17/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04b8f97f29948de584315b23a38d8d1cfc85bd17/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=04b8f97f29948de584315b23a38d8d1cfc85bd17", "patch": "@@ -1029,11 +1029,15 @@ diagnose_mismatched_decls (tree newdecl, tree olddecl,\n      extern-inline definition supersedes the extern-inline definition.  */\n   else if (TREE_CODE (newdecl) == FUNCTION_DECL)\n     {\n-      if (DECL_BUILT_IN (olddecl) && !TREE_PUBLIC (newdecl))\n+      /* If you declare a built-in function name as static, or\n+\t define the built-in with an old-style definition (so we\n+\t can't validate the argument list) the built-in definition is\n+\t overridden, but optionally warn this was a bad choice of name.  */\n+      if (DECL_BUILT_IN (olddecl)\n+\t  && (!TREE_PUBLIC (newdecl)\n+\t      || (DECL_INITIAL (newdecl)\n+\t\t  && !TYPE_ARG_TYPES (TREE_TYPE (newdecl)))))\n \t{\n-\t  /* If you declare a built-in function name as static, the\n-\t     built-in definition is overridden,\n-\t     but optionally warn this was a bad choice of name.  */\n \t  if (warn_shadow)\n \t    warning (\"%Jshadowing built-in function '%D'\", newdecl, newdecl);\n \t  /* Discard the old built-in function.  */"}, {"sha": "848ca88e6053b725fab41180a27aaf7545d6649f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04b8f97f29948de584315b23a38d8d1cfc85bd17/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04b8f97f29948de584315b23a38d8d1cfc85bd17/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=04b8f97f29948de584315b23a38d8d1cfc85bd17", "patch": "@@ -1,3 +1,8 @@\n+2004-01-23  Zack Weinberg  <zack@codesourcery.com>\n+\n+\tPR 18314\n+\t* gcc.dg/builtins-30.c: New testcase.\n+\n 2004-01-23  Andreas Tobler  <a.tobler@schweiz.ch>\n \n \t* g++.dg/compat/compat.exp: Add LD_LIBRARY_PATH_32/64 for Solaris."}, {"sha": "a2d7433b4c725ed66495bd97b0a40b087225b505", "filename": "gcc/testsuite/gcc.dg/builtins-30.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04b8f97f29948de584315b23a38d8d1cfc85bd17/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-30.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04b8f97f29948de584315b23a38d8d1cfc85bd17/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-30.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-30.c?ref=04b8f97f29948de584315b23a38d8d1cfc85bd17", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wall -Wshadow\" } */\n+\n+extern double strtod (const char *, char **);\n+#define UNUSED __attribute__ ((unused))\n+\n+/* A built-in function may be overridden by an old-style definition\n+   specifying too few arguments... */\n+double nan ()\n+{\n+  return strtod (\"nan\", 0);  /* { dg-warning \"shadowing built-in\" } */\n+}\n+\n+/* the right number, but the wrong type, arguments... */\n+float nanf (foo)\n+     int foo UNUSED;\n+{\n+  return strtod (\"nan\", 0);  /* { dg-warning \"shadowing built-in\" } */\n+}\n+\n+/* or too many arguments.  */\n+long double nanl (foo, bar)\n+     const char *foo UNUSED;\n+     int bar UNUSED;\n+{\n+  return strtod (\"nan\", 0);  /* { dg-warning \"shadowing built-in\" } */\n+}"}]}