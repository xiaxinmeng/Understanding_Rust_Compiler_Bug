{"sha": "f0fdd66ba4fa07d5ef314eab9aee404750ae3ef4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjBmZGQ2NmJhNGZhMDdkNWVmMzE0ZWFiOWFlZTQwNDc1MGFlM2VmNA==", "commit": {"author": {"name": "Mark Wielaard", "email": "mark@klomp.org", "date": "2001-10-20T06:26:45Z"}, "committer": {"name": "Mark Wielaard", "email": "mark@gcc.gnu.org", "date": "2001-10-20T06:26:45Z"}, "message": "Double.java: More Classpath merging\n\n\t* java/lang/Double.java: More Classpath merging\n\t(isInfinite): Don't use doubleToLongBits\n\t(isNaN (Object)): return v != v\n\t(initIDs): make native\n\t* java/lang/Float.java: Ditto\n\t(isInfinite): Don't use floatToIntBits\n\t(isNaN (Object)): return v != v\n\t* java/lang/natDouble.cc: add empty initIDs()\n\nFrom-SVN: r46370", "tree": {"sha": "a4ea1a7426a312774f365dbcd1470afc8f6da6ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a4ea1a7426a312774f365dbcd1470afc8f6da6ed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f0fdd66ba4fa07d5ef314eab9aee404750ae3ef4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0fdd66ba4fa07d5ef314eab9aee404750ae3ef4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0fdd66ba4fa07d5ef314eab9aee404750ae3ef4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0fdd66ba4fa07d5ef314eab9aee404750ae3ef4/comments", "author": null, "committer": null, "parents": [{"sha": "afb649d5c9f791f9e506053aa897804e3c53adab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/afb649d5c9f791f9e506053aa897804e3c53adab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/afb649d5c9f791f9e506053aa897804e3c53adab"}], "stats": {"total": 61, "additions": 42, "deletions": 19}, "files": [{"sha": "3e8675fb6d8b519eb7841cf8836c9040669777d0", "filename": "libjava/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0fdd66ba4fa07d5ef314eab9aee404750ae3ef4/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0fdd66ba4fa07d5ef314eab9aee404750ae3ef4/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=f0fdd66ba4fa07d5ef314eab9aee404750ae3ef4", "patch": "@@ -1,3 +1,14 @@\n+2001-10-19  Mark Wielaard  <mark@klomp.org>\n+\n+\t* java/lang/Double.java: More Classpath merging\n+\t(isInfinite): Don't use doubleToLongBits\n+\t(isNaN (Object)): return v != v\n+\t(initIDs): make native\n+\t* java/lang/Float.java: Ditto\n+\t(isInfinite): Don't use floatToIntBits\n+\t(isNaN (Object)): return v != v\n+\t* java/lang/natDouble.cc: add empty initIDs()\n+\n 2001-10-19  Mark Wielaard  <mark@klomp.org>\n \n \t* javax/naming/BinaryRefAddr.java: New file"}, {"sha": "63ee265924edad9130caf542c737dbde09490b8b", "filename": "libjava/java/lang/Double.java", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0fdd66ba4fa07d5ef314eab9aee404750ae3ef4/libjava%2Fjava%2Flang%2FDouble.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0fdd66ba4fa07d5ef314eab9aee404750ae3ef4/libjava%2Fjava%2Flang%2FDouble.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FDouble.java?ref=f0fdd66ba4fa07d5ef314eab9aee404750ae3ef4", "patch": "@@ -146,6 +146,14 @@ public String toString ()\n    * <code>instanceof</code> <code>Double</code>, and represents\n    * the same primitive <code>double</code> value return \n    * <code>true</code>.  Otherwise <code>false</code> is returned.\n+   * <p>\n+   * Note that there are two differences between <code>==</code> and\n+   * <code>equals()</code>. <code>0.0d == -0.0d</code> returns <code>true</code>\n+   * but <code>new Double(0.0d).equals(new Double(-0.0d))</code> returns\n+   * <code>false</code>. And <code>Double.NaN == Double.NaN</code> returns\n+   * <code>false</code>, but\n+   * <code>new Double(Double.NaN).equals(new Double(Double.NaN))</code> returns\n+   * <code>true</code>.\n    *\n    * @param obj the object to compare to\n    * @return whether the objects are semantically equal.\n@@ -248,11 +256,9 @@ public boolean isNaN ()\n    */\n   public static boolean isNaN (double v)\n   {\n-    long bits = doubleToLongBits (v);\n-    long e = bits & 0x7ff0000000000000L;\n-    long f = bits & 0x000fffffffffffffL;\n-\n-    return e == 0x7ff0000000000000L && f != 0L;\n+    // This works since NaN != NaN is the only reflexive inequality\n+    // comparison which returns true.\n+    return v != v;\n   }\n \n   /**\n@@ -277,10 +283,7 @@ public boolean isInfinite ()\n    */\n   public static boolean isInfinite (double v)\n   {\n-    long bits = doubleToLongBits (v);\n-    long f = bits & 0x7fffffffffffffffL;\n-\n-    return f == 0x7ff0000000000000L;\n+    return (v == POSITIVE_INFINITY || v == NEGATIVE_INFINITY);\n   }\n \n   /**\n@@ -508,5 +511,5 @@ public native static double parseDouble (String s)\n    * Initialize JNI cache.  This method is called only by the \n    * static initializer when using JNI.\n    */\n-  private static void initIDs () { /* Not used in libgcj */ };\n+  private static native void initIDs ();\n }"}, {"sha": "9e26143f77374100240434abe95d341cbe55c2be", "filename": "libjava/java/lang/Float.java", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0fdd66ba4fa07d5ef314eab9aee404750ae3ef4/libjava%2Fjava%2Flang%2FFloat.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0fdd66ba4fa07d5ef314eab9aee404750ae3ef4/libjava%2Fjava%2Flang%2FFloat.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FFloat.java?ref=f0fdd66ba4fa07d5ef314eab9aee404750ae3ef4", "patch": "@@ -215,6 +215,14 @@ public String toString ()\n    * <code>instanceof</code> <code>Float</code>, and represents\n    * the same primitive <code>float</code> value return \n    * <code>true</code>.  Otherwise <code>false</code> is returned.\n+   * <p>\n+   * Note that there are two differences between <code>==</code> and\n+   * <code>equals()</code>. <code>0.0f == -0.0f</code> returns <code>true</code>\n+   * but <code>new Float(0.0f).equals(new Float(-0.0f))</code> returns\n+   * <code>false</code>. And <code>Float.NaN == Float.NaN</code> returns\n+   * <code>false</code>, but\n+   * <code>new Float(Float.NaN).equals(new Float(Float.NaN))</code> returns\n+   * <code>true</code>.\n    *\n    * @param obj the object to compare to\n    * @return whether the objects are semantically equal.\n@@ -364,11 +372,9 @@ public boolean isNaN ()\n    */\n   public static boolean isNaN (float v)\n   {\n-    int bits = floatToIntBits (v);\n-    int e = bits & 0x7f800000;\n-    int f = bits & 0x007fffff;\n-\n-    return e == 0x7f800000 && f != 0;\n+    // This works since NaN != NaN is the only reflexive inequality\n+    // comparison which returns true.\n+    return v != v;\n   }\n \n   /**\n@@ -393,10 +399,7 @@ public boolean isInfinite ()\n    */\n   public static boolean isInfinite (float v)\n   {\n-    int bits = floatToIntBits (v);\n-    int f = bits & 0x7fffffff;\n-\n-    return f == 0x7f800000;\n+    return (v == POSITIVE_INFINITY || v == NEGATIVE_INFINITY);\n   }\n \n   /**"}, {"sha": "b0b24a7547c2fbd829fa264964cfaa7f6f958ab1", "filename": "libjava/java/lang/natDouble.cc", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0fdd66ba4fa07d5ef314eab9aee404750ae3ef4/libjava%2Fjava%2Flang%2FnatDouble.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0fdd66ba4fa07d5ef314eab9aee404750ae3ef4/libjava%2Fjava%2Flang%2FnatDouble.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatDouble.cc?ref=f0fdd66ba4fa07d5ef314eab9aee404750ae3ef4", "patch": "@@ -186,3 +186,9 @@ java::lang::Double::parseDouble(jstring str)\n     }\n   throw new NumberFormatException;\n }\n+\n+void\n+java::lang::Double::initIDs()\n+{\n+  // Not used in libgcj\n+}"}]}