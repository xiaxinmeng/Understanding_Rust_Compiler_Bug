{"sha": "f3dc41fe8e21d79b5338eca6fa50e894b6a4db14", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjNkYzQxZmU4ZTIxZDc5YjUzMzhlY2E2ZmE1MGU4OTRiNmE0ZGIxNA==", "commit": {"author": {"name": "Andrew Haley", "email": "aph@redhat.com", "date": "2005-04-29T18:35:36Z"}, "committer": {"name": "Andrew Haley", "email": "aph@gcc.gnu.org", "date": "2005-04-29T18:35:36Z"}, "message": "re PR java/19285 (Interfaces not initialized by static field access)\n\n2005-04-27  Andrew Haley  <aph@redhat.com>\n\n        PR java/19285\n        * prims.cc (_Jv_ResolvePoolEntry): New function.\n        * include/jvm.h (_Jv_Linker::find_field): New arg: found_class.\n        * link.cc (_Jv_Linker::find_field): New arg: found_class.\n        (resolve_pool_entry): Initialize the class in which a field is\n        found.\n        (link_symbol_table): Pass new arg to found_class.\n\nFrom-SVN: r99006", "tree": {"sha": "ba9d688326059397b1b085f20d47c6aba292b04f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ba9d688326059397b1b085f20d47c6aba292b04f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f3dc41fe8e21d79b5338eca6fa50e894b6a4db14", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3dc41fe8e21d79b5338eca6fa50e894b6a4db14", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3dc41fe8e21d79b5338eca6fa50e894b6a4db14", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3dc41fe8e21d79b5338eca6fa50e894b6a4db14/comments", "author": {"login": "theRealAph", "id": 254637, "node_id": "MDQ6VXNlcjI1NDYzNw==", "avatar_url": "https://avatars.githubusercontent.com/u/254637?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theRealAph", "html_url": "https://github.com/theRealAph", "followers_url": "https://api.github.com/users/theRealAph/followers", "following_url": "https://api.github.com/users/theRealAph/following{/other_user}", "gists_url": "https://api.github.com/users/theRealAph/gists{/gist_id}", "starred_url": "https://api.github.com/users/theRealAph/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theRealAph/subscriptions", "organizations_url": "https://api.github.com/users/theRealAph/orgs", "repos_url": "https://api.github.com/users/theRealAph/repos", "events_url": "https://api.github.com/users/theRealAph/events{/privacy}", "received_events_url": "https://api.github.com/users/theRealAph/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "528a7d226228804091bbcccca1ee5e97656e0092", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/528a7d226228804091bbcccca1ee5e97656e0092", "html_url": "https://github.com/Rust-GCC/gccrs/commit/528a7d226228804091bbcccca1ee5e97656e0092"}], "stats": {"total": 52, "additions": 43, "deletions": 9}, "files": [{"sha": "68bee9172f054acbb06edb9ea46230d8d17db087", "filename": "libjava/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3dc41fe8e21d79b5338eca6fa50e894b6a4db14/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3dc41fe8e21d79b5338eca6fa50e894b6a4db14/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=f3dc41fe8e21d79b5338eca6fa50e894b6a4db14", "patch": "@@ -1,3 +1,13 @@\n+2005-04-27  Andrew Haley  <aph@redhat.com>\n+\n+\tPR java/19285\n+\t* prims.cc (_Jv_ResolvePoolEntry): New function.\n+\t* include/jvm.h (_Jv_Linker::find_field): New arg: found_class.\n+\t* link.cc (_Jv_Linker::find_field): New arg: found_class.\n+\t(resolve_pool_entry): Initialize the class in which a field is\n+\tfound.\n+\t(link_symbol_table): Pass new arg to found_class.\n+\n 2005-04-29  Michael Koch  <konqueror@gmx.de>\n \n \t* java/nio/charset/Charset.java"}, {"sha": "90b61627f3dfb3912a19feba1cbc61a16b05c113", "filename": "libjava/include/jvm.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3dc41fe8e21d79b5338eca6fa50e894b6a4db14/libjava%2Finclude%2Fjvm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3dc41fe8e21d79b5338eca6fa50e894b6a4db14/libjava%2Finclude%2Fjvm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fjvm.h?ref=f3dc41fe8e21d79b5338eca6fa50e894b6a4db14", "patch": "@@ -238,7 +238,7 @@ class _Jv_Linker\n private:\n   static _Jv_Field *find_field_helper(jclass, _Jv_Utf8Const *, _Jv_Utf8Const *,\n \t\t\t\t      jclass *);\n-  static _Jv_Field *find_field(jclass, jclass, _Jv_Utf8Const *,\n+  static _Jv_Field *find_field(jclass, jclass, jclass *, _Jv_Utf8Const *,\n \t\t\t       _Jv_Utf8Const *);\n   static void prepare_constant_time_tables(jclass);\n   static jshort get_interfaces(jclass, _Jv_ifaces *);"}, {"sha": "0a705736628d659afcec9763869ddd500401ddcf", "filename": "libjava/link.cc", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3dc41fe8e21d79b5338eca6fa50e894b6a4db14/libjava%2Flink.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3dc41fe8e21d79b5338eca6fa50e894b6a4db14/libjava%2Flink.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Flink.cc?ref=f3dc41fe8e21d79b5338eca6fa50e894b6a4db14", "patch": "@@ -165,11 +165,14 @@ _Jv_Linker::has_field_p (jclass search, _Jv_Utf8Const *field_name)\n // KLASS is the class that is requesting the field.\n // OWNER is the class in which the field should be found.\n // FIELD_TYPE_NAME is the type descriptor for the field.\n+// Fill FOUND_CLASS with the address of the class in which the field\n+// is actually declared.\n // This function does the class loader type checks, and\n // also access checks.  Returns the field, or throws an\n // exception on error.\n _Jv_Field *\n _Jv_Linker::find_field (jclass klass, jclass owner,\n+\t\t\tjclass *found_class,\n \t\t\t_Jv_Utf8Const *field_name,\n \t\t\t_Jv_Utf8Const *field_type_name)\n {\n@@ -180,9 +183,8 @@ _Jv_Linker::find_field (jclass klass, jclass owner,\n   if (field_type == NULL)\n     throw new java::lang::NoClassDefFoundError(field_name->toString());\n \n-  jclass found_class = 0;\n   _Jv_Field *the_field = find_field_helper (owner, field_name,\n-\t\t\t\t\t    field_type->name, &found_class);\n+\t\t\t\t\t    field_type->name, found_class);\n \n   if (the_field == 0)\n     {\n@@ -195,7 +197,7 @@ _Jv_Linker::find_field (jclass klass, jclass owner,\n       throw new java::lang::NoSuchFieldError (sb->toString());\n     }\n \n-  if (_Jv_CheckAccess (klass, found_class, the_field->flags))\n+  if (_Jv_CheckAccess (klass, *found_class, the_field->flags))\n     {\n       // Note that the field returned by find_field_helper is always\n       // resolved.  There's no point checking class loaders here,\n@@ -212,7 +214,7 @@ _Jv_Linker::find_field (jclass klass, jclass owner,\n \t= new java::lang::StringBuffer ();\n       sb->append(klass->getName());\n       sb->append(JvNewStringLatin1(\": \"));\n-      sb->append(found_class->getName());\n+      sb->append((*found_class)->getName());\n       sb->append(JvNewStringLatin1(\".\"));\n       sb->append(_Jv_NewStringUtf8Const (field_name));\n       throw new java::lang::IllegalAccessError(sb->toString());\n@@ -300,9 +302,13 @@ _Jv_Linker::resolve_pool_entry (jclass klass, int index)\n \t_Jv_Utf8Const *field_name = pool->data[name_index].utf8;\n \t_Jv_Utf8Const *field_type_name = pool->data[type_index].utf8;\n \n-\t_Jv_Field *the_field = find_field (klass, owner, field_name,\n+\tjclass found_class = 0;\n+\t_Jv_Field *the_field = find_field (klass, owner, \n+\t\t\t\t\t   &found_class,\n+\t\t\t\t\t   field_name,\n \t\t\t\t\t   field_type_name);\n-\n+\tif (owner != found_class)\n+\t  _Jv_InitClass (found_class);\n \tpool->data[index].field = the_field;\n \tpool->tags[index] |= JV_CONSTANT_ResolvedFlag;\n       }\n@@ -967,7 +973,8 @@ _Jv_Linker::link_symbol_table (jclass klass)\n       // Try fields.\n       {\n \twait_for_state(target_class, JV_STATE_PREPARED);\n-\t_Jv_Field *the_field = find_field (klass, target_class,\n+\tjclass found_class;\n+\t_Jv_Field *the_field = find_field (klass, target_class, &found_class,\n \t\t\t\t\t   sym.name, sym.signature);\n \tif ((the_field->flags & java::lang::reflect::Modifier::STATIC))\n \t  throw new java::lang::IncompatibleClassChangeError;\n@@ -1047,7 +1054,8 @@ _Jv_Linker::link_symbol_table (jclass klass)\n       // Try fields.\n       {\n \twait_for_state(target_class, JV_STATE_PREPARED);\n-\t_Jv_Field *the_field = find_field (klass, target_class,\n+\tjclass found_class;\n+\t_Jv_Field *the_field = find_field (klass, target_class, &found_class,\n \t\t\t\t\t   sym.name, sym.signature);\n \tif ((the_field->flags & java::lang::reflect::Modifier::STATIC))\n \t  klass->atable->addresses[index] = the_field->u.addr;"}, {"sha": "98d3023245121b094eb60a0289b9c782f4be12ed", "filename": "libjava/prims.cc", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3dc41fe8e21d79b5338eca6fa50e894b6a4db14/libjava%2Fprims.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3dc41fe8e21d79b5338eca6fa50e894b6a4db14/libjava%2Fprims.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fprims.cc?ref=f3dc41fe8e21d79b5338eca6fa50e894b6a4db14", "patch": "@@ -359,6 +359,22 @@ _Jv_ThrowNullPointerException ()\n   throw new java::lang::NullPointerException;\n }\n \n+// Resolve an entry in the constant pool and return the target\n+// address.\n+void *\n+_Jv_ResolvePoolEntry (jclass this_class, jint index)\n+{\n+  _Jv_Constants *pool = &this_class->constants;\n+\n+  if ((pool->tags[index] & JV_CONSTANT_ResolvedFlag) != 0)\n+    return pool->data[index].field->u.addr;\n+\n+  JvSynchronize sync (this_class);\n+  return (_Jv_Linker::resolve_pool_entry (this_class, index))\n+    .field->u.addr;\n+}\n+\n+\n // Explicitly throw a no memory exception.\n // The collector calls this when it encounters an out-of-memory condition.\n void _Jv_ThrowNoMemory()"}]}