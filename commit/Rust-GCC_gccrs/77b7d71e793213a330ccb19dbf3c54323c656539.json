{"sha": "77b7d71e793213a330ccb19dbf3c54323c656539", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzdiN2Q3MWU3OTMyMTNhMzMwY2NiMTlkYmYzYzU0MzIzYzY1NjUzOQ==", "commit": {"author": {"name": "Andre Vehreschild", "email": "vehre@gmx.de", "date": "2015-04-28T19:03:01Z"}, "committer": {"name": "Andre Vehreschild", "email": "vehre@gcc.gnu.org", "date": "2015-04-28T19:03:01Z"}, "message": "interface.c (gfc_compare_types): Check for unlimited polymorphism flag in the correct position indepent of the...\n\ngcc/fortran/ChangeLog:\n\n2015-04-28  Andre Vehreschild  <vehre@gmx.de>\n\n\t* interface.c (gfc_compare_types): Check for unlimited\n\tpolymorphism flag in the correct position indepent of the _data\n\tcomponent being present or not.  This prevents a segfault, when\n\tthe _data component is not present.\n\t* symbol.c (gfc_type_compatible): Same.\n\ngcc/testsuite/ChangeLog:\n\n2015-04-28  Andre Vehreschild  <vehre@gmx.de>\n\n\t* gfortran.dg/implicit_class_1.f90: Adding flag to check, if\n\tsegfault is fixed.\n\nFrom-SVN: r222539", "tree": {"sha": "687628690dd631060e30c2ad86efe1d98649dc21", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/687628690dd631060e30c2ad86efe1d98649dc21"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/77b7d71e793213a330ccb19dbf3c54323c656539", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77b7d71e793213a330ccb19dbf3c54323c656539", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77b7d71e793213a330ccb19dbf3c54323c656539", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77b7d71e793213a330ccb19dbf3c54323c656539/comments", "author": {"login": "vehre", "id": 4761547, "node_id": "MDQ6VXNlcjQ3NjE1NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4761547?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vehre", "html_url": "https://github.com/vehre", "followers_url": "https://api.github.com/users/vehre/followers", "following_url": "https://api.github.com/users/vehre/following{/other_user}", "gists_url": "https://api.github.com/users/vehre/gists{/gist_id}", "starred_url": "https://api.github.com/users/vehre/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vehre/subscriptions", "organizations_url": "https://api.github.com/users/vehre/orgs", "repos_url": "https://api.github.com/users/vehre/repos", "events_url": "https://api.github.com/users/vehre/events{/privacy}", "received_events_url": "https://api.github.com/users/vehre/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f307500830e39dbab2e0bc904aecbfc1995216ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f307500830e39dbab2e0bc904aecbfc1995216ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f307500830e39dbab2e0bc904aecbfc1995216ac"}], "stats": {"total": 57, "additions": 49, "deletions": 8}, "files": [{"sha": "bb442325e8ed729c13bba7baa38ceb58a12f1ea0", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77b7d71e793213a330ccb19dbf3c54323c656539/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77b7d71e793213a330ccb19dbf3c54323c656539/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=77b7d71e793213a330ccb19dbf3c54323c656539", "patch": "@@ -1,3 +1,11 @@\n+2015-04-28  Andre Vehreschild  <vehre@gmx.de>\n+\n+\t* interface.c (gfc_compare_types): Check for unlimited\n+\tpolymorphism flag in the correct position indepent of the _data\n+\tcomponent being present or not.  This prevents a segfault, when\n+\tthe _data component is not present.\n+\t* symbol.c (gfc_type_compatible): Same.\n+\n 2015-04-27  Jim Wilson  <jim.wilson@linaro.org>\n \n \t* Make-lang.in (fortran.mostlyclean): Remove gfortran and"}, {"sha": "d4c26292feee3fd67404754d968a75c5040fd284", "filename": "gcc/fortran/interface.c", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77b7d71e793213a330ccb19dbf3c54323c656539/gcc%2Ffortran%2Finterface.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77b7d71e793213a330ccb19dbf3c54323c656539/gcc%2Ffortran%2Finterface.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finterface.c?ref=77b7d71e793213a330ccb19dbf3c54323c656539", "patch": "@@ -484,13 +484,24 @@ gfc_compare_types (gfc_typespec *ts1, gfc_typespec *ts2)\n   if (ts1->type == BT_VOID || ts2->type == BT_VOID)\n     return 1;\n \n-  if (ts1->type == BT_CLASS\n-      && ts1->u.derived->components->ts.u.derived->attr.unlimited_polymorphic)\n+  /* The _data component is not always present, therefore check for its\n+     presence before assuming, that its derived->attr is available.\n+     When the _data component is not present, then nevertheless the\n+     unlimited_polymorphic flag may be set in the derived type's attr.  */\n+  if (ts1->type == BT_CLASS && ts1->u.derived->components\n+      && ((ts1->u.derived->attr.is_class\n+\t   && ts1->u.derived->components->ts.u.derived->attr\n+\t\t\t\t\t\t  .unlimited_polymorphic)\n+\t  || ts1->u.derived->attr.unlimited_polymorphic))\n     return 1;\n \n   /* F2003: C717  */\n   if (ts2->type == BT_CLASS && ts1->type == BT_DERIVED\n-      && ts2->u.derived->components->ts.u.derived->attr.unlimited_polymorphic\n+      && ts2->u.derived->components\n+      && ((ts2->u.derived->attr.is_class\n+\t   && ts2->u.derived->components->ts.u.derived->attr\n+\t\t\t\t\t\t  .unlimited_polymorphic)\n+\t  || ts2->u.derived->attr.unlimited_polymorphic)\n       && (ts1->u.derived->attr.sequence || ts1->u.derived->attr.is_bind_c))\n     return 1;\n "}, {"sha": "b18608b9ab226ef4d886d208ccddb0e90c5c416e", "filename": "gcc/fortran/symbol.c", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77b7d71e793213a330ccb19dbf3c54323c656539/gcc%2Ffortran%2Fsymbol.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77b7d71e793213a330ccb19dbf3c54323c656539/gcc%2Ffortran%2Fsymbol.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsymbol.c?ref=77b7d71e793213a330ccb19dbf3c54323c656539", "patch": "@@ -4567,7 +4567,10 @@ gfc_type_compatible (gfc_typespec *ts1, gfc_typespec *ts2)\n \n   if (is_class1\n       && ts1->u.derived->components\n-      && ts1->u.derived->components->ts.u.derived->attr.unlimited_polymorphic)\n+      && ((ts1->u.derived->attr.is_class\n+\t   && ts1->u.derived->components->ts.u.derived->attr\n+\t\t\t\t\t\t\t.unlimited_polymorphic)\n+\t  || ts1->u.derived->attr.unlimited_polymorphic))\n     return 1;\n \n   if (!is_derived1 && !is_derived2 && !is_class1 && !is_class2)\n@@ -4578,13 +4581,21 @@ gfc_type_compatible (gfc_typespec *ts1, gfc_typespec *ts2)\n \n   if (is_derived1 && is_class2)\n     return gfc_compare_derived_types (ts1->u.derived,\n-\t\t\t\t      ts2->u.derived->components->ts.u.derived);\n+\t\t\t\t      ts2->u.derived->attr.is_class ?\n+\t\t\t\t      ts2->u.derived->components->ts.u.derived\n+\t\t\t\t      : ts2->u.derived);\n   if (is_class1 && is_derived2)\n-    return gfc_type_is_extension_of (ts1->u.derived->components->ts.u.derived,\n+    return gfc_type_is_extension_of (ts1->u.derived->attr.is_class ?\n+\t\t\t\t       ts1->u.derived->components->ts.u.derived\n+\t\t\t\t     : ts1->u.derived,\n \t\t\t\t     ts2->u.derived);\n   else if (is_class1 && is_class2)\n-    return gfc_type_is_extension_of (ts1->u.derived->components->ts.u.derived,\n-\t\t\t\t     ts2->u.derived->components->ts.u.derived);\n+    return gfc_type_is_extension_of (ts1->u.derived->attr.is_class ?\n+\t\t\t\t       ts1->u.derived->components->ts.u.derived\n+\t\t\t\t     : ts1->u.derived,\n+\t\t\t\t     ts2->u.derived->attr.is_class ?\n+\t\t\t\t       ts2->u.derived->components->ts.u.derived\n+\t\t\t\t     : ts2->u.derived);\n   else\n     return 0;\n }"}, {"sha": "1a018fa3a9e9ee521d38f601d4f61ca119b78665", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77b7d71e793213a330ccb19dbf3c54323c656539/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77b7d71e793213a330ccb19dbf3c54323c656539/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=77b7d71e793213a330ccb19dbf3c54323c656539", "patch": "@@ -1,3 +1,8 @@\n+2015-04-28  Andre Vehreschild  <vehre@gmx.de>\n+\n+\t* gfortran.dg/implicit_class_1.f90: Adding flag to check, if\n+\tsegfault is fixed.\n+\n 2015-04-28  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n \n \t* gcc.dg/vect/vect-33.c: Remove spurious line."}, {"sha": "64193daa16145121670e35942fbb9b909eb3260f", "filename": "gcc/testsuite/gfortran.dg/implicit_class_1.f90", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77b7d71e793213a330ccb19dbf3c54323c656539/gcc%2Ftestsuite%2Fgfortran.dg%2Fimplicit_class_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77b7d71e793213a330ccb19dbf3c54323c656539/gcc%2Ftestsuite%2Fgfortran.dg%2Fimplicit_class_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fimplicit_class_1.f90?ref=77b7d71e793213a330ccb19dbf3c54323c656539", "patch": "@@ -4,6 +4,12 @@\n !\n ! Contributed by Reinhold Bader <Reinhold.Bader@lrz.de>\n \n+! Add dump-fortran-original to check, if the patch preventing a gfortran\n+! segfault is working correctly.  No cleanup needed, because the dump\n+! goes to stdout.\n+! { dg-options \"-fdump-fortran-original\" }\n+! { dg-prune-output \"Namespace:.*-{42}\" }\n+\n program upimp\n   implicit class(foo) (a-b)\n   implicit class(*) (c)"}]}