{"sha": "82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODJmODRlY2JiNDdjOGU4ZTVlMWE2YmU0NzFlODFiNzRkMTBlY2QxOA==", "commit": {"author": {"name": "Matthew Fortune", "email": "matthew.fortune@imgtec.com", "date": "2014-12-19T20:17:36Z"}, "committer": {"name": "Matthew Fortune", "email": "mpf@gcc.gnu.org", "date": "2014-12-19T20:17:36Z"}, "message": "MIPS32R6 and MIPS64R6 support\n\ngcc/\n\n\t* config.gcc: Add mipsisa64r6 and mipsisa32r6 cpu support.\n\t* config/mips/constraints.md (ZD): Add r6 restrictions.\n\t* config/mips/gnu-user.h (DRIVER_SELF_SPECS): Add MIPS_ISA_LEVEL_SPEC.\n\t* config/mips/loongson.md\n\t(<u>div<mode>3, <u>mod<mode>3): Move to mips.md.\n\t* config/mips/mips-cpus.def (mips32r6, mips64r6): Define.\n\t* config/mips/mips-modes.def (CCF): New mode.\n\t* config/mips/mips-protos.h\n\t(mips_9bit_offset_address_p): New prototype.\n\t* config/mips/mips-tables.opt: Regenerate.\n\t* config/mips/mips.c (MIPS_JR): Use JALR $, <reg> for R6.\n\t(mips_rtx_cost_data): Add pseudo-processors W32 and W64.\n\t(mips_9bit_offset_address_p): New function.\n\t(mips_rtx_costs): Account for R6 multiply and FMA instructions.\n\t(mips_emit_compare): Implement R6 FPU comparisons.\n\t(mips_expand_conditional_move): Implement R6 selects.\n\t(mips_expand_conditional_trap): Account for removed trap immediate.\n\t(mips_expand_block_move): Disable inline move when LWL/LWR are removed.\n\t(mips_print_float_branch_condition): Update for R6 FPU branches.\n\t(mips_print_operand): Handle CCF mode compares.\n\t(mips_interrupt_extra_call_saved_reg_p): Do not attempt to callee-save\n\tMD_REGS for R6.\n\t(mips_hard_regno_mode_ok_p): Support CCF mode.\n\t(mips_mode_ok_for_mov_fmt_p): Likewise.\n\t(mips_secondary_reload_class): CCFmode can be loaded directly.\n\t(mips_set_fast_mult_zero_zero_p): Account for R6 multiply instructions.\n\t(mips_option_override): Ensure R6 is used with fp64.  Set default\n\tmips_nan modes.  Check for mips_nan support.  Prevent DSP with R6.\n\t(mips_conditional_register_usage): Disable MD_REGS for R6. Disable\n\tFPSW for R6.\n\t(mips_mulsidi3_gen_fn): Support R6 multiply instructions.\n\t* config/mips/mips.h (ISA_MIPS32R6, ISA_MIPS64R6): Define.\n\t(TARGET_CPU_CPP_BUILTINS): Rework for mips32/mips64.\n\t(ISA_HAS_JR): New macro.\n\t(ISA_HAS_HILO): New macro.\n\t(ISA_HAS_R6MUL): Likewise.\n\t(ISA_HAS_R6DMUL): Likewise.\n\t(ISA_HAS_R6DIV): Likewise.\n\t(ISA_HAS_R6DDIV): Likewise.\n\t(ISA_HAS_CCF): Likewise.\n\t(ISA_HAS_SEL): Likewise.\n\t(ISA_HAS_COND_TRAPI): Likewise.\n\t(ISA_HAS_FP_MADDF_MSUBF): Likewise.\n\t(ISA_HAS_LWL_LWR): Likewise.\n\t(ISA_HAS_IEEE_754_LEGACY): Likewise.\n\t(ISA_HAS_IEEE_754_2008): Likewise.\n\t(ISA_HAS_PREFETCH_9BIT): Likewise.\n\t(MIPSR6_9BIT_OFFSET_P): New macro.\n\t(BASE_DRIVER_SELF_SPECS): Use MIPS_ISA_DRIVER_SELF_SPECS.\n\t(DRIVER_SELF_SPECS): Use MIPS_ISA_LEVEL_SPEC.\n\t(MULTILIB_ISA_DEFAULT): Handle mips32r6 and mips64r6.\n\t(MIPS_ISA_LEVEL_SPEC): Likewise.\n\t(MIPS_ISA_SYNCI_SPEC): Likewise.\n\t(ISA_HAS_64BIT_REGS): Likewise.\n\t(ISA_HAS_BRANCHLIKELY): Likewise.\n\t(ISA_HAS_MUL3): Likewise.\n\t(ISA_HAS_DMULT): Likewise.\n\t(ISA_HAS_DDIV): Likewise.\n\t(ISA_HAS_DIV): Likewise.\n\t(ISA_HAS_MULT): Likewise.\n\t(ISA_HAS_FP_CONDMOVE): Likewise.\n\t(ISA_HAS_8CC): Likewise.\n\t(ISA_HAS_FP4): Likewise.\n\t(ISA_HAS_PAIRED_SINGLE): Likewise.\n\t(ISA_HAS_MADD_MSUB): Likewise.\n\t(ISA_HAS_FP_RECIP_RSQRT): Likewise.\n\t* config/mips/mips.md (processor): Add w32 and w64.\n\t(FPCC): New mode iterator.\n\t(reg): Add CCF mode.\n\t(fpcmp): New mode attribute.\n\t(fcond): Add ordered, ltgt and ne codes.\n\t(fcond): Update code attribute.\n\t(sel): New code attribute.\n\t(selinv): Likewise.\n\t(ctrap<mode>4): Update condition.\n\t(*conditional_trap_reg<mode>): New define_insn.\n\t(*conditional_trap<mode>): Update condition.\n\t(mul<mode>3): Expand R6 multiply instructions.\n\t(<su>mulsi3_highpart): Likewise.\n\t(<su>muldi3_highpart): Likewise.\n\t(mul<mode>3_mul3_loongson): Rename...\n\t(mul<mode>3_mul3_hilo): To this.  Add R6 mul instruction.\n\t(<u>mulsidi3_32bit_r6): New expander.\n\t(<u>mulsidi3_32bit): Restrict to pre-r6 multiplies.\n\t(<u>mulsidi3_32bit_r4000): Likewise.\n\t(<u>mulsidi3_64bit): Likewise.\n\t(<su>mulsi3_highpart_internal): Likewise.\n\t(mulsidi3_64bit_r6dmul): New instruction.\n\t(<su>mulsi3_highpart_r6): Likewise.\n\t(<su>muldi3_highpart_r6): Likewise.\n\t(fma<mode>4): Likewise.\n\t(movccf): Likewise.\n\t(*sel<code><GPR:mode>_using_<GPR2:mode>): Likewise.\n\t(*sel<mode>): Likewise.\n\t(<u>div<mode>3): Moved from loongson.md.  Add R6 instructions.\n\t(<u>mod<mode>3): Likewise.\n\t(extvmisalign<mode>): Require ISA_HAS_LWL_LWR.\n\t(extzvmisalign<mode>): Likewise.\n\t(insvmisalign<mode>): Likewise.\n\t(mips_cache): Account for R6 displacement field sizes.\n\t(*branch_fp): Rename...\n\t(*branch_fp_<mode>): To this.  Add CCFmode support.\n\t(*branch_fp_inverted): Rename...\n\t(*branch_fp_inverted_<mode>): To this.  Add CCFmode support.\n\t(s<code>_<mode>): Rename...\n\t(s<code>_<SCALARF:mode>_using_<FPCC:mode>): To this.  Add FCCmode\n\tcondition support.\n\t(s<code>_<mode> swapped): Rename...\n\t(s<code>_<SCALARF:mode>_using_<FPCC:mode> swapped): To this. Add\n\tCCFmode condition support.\n\t(mov<mode>cc GPR): Expand R6 selects.\n\t(mov<mode>cc FPR): Expand R6 selects.\n\t(*tls_get_tp_<mode>_split): Do not .set push for >= mips32r2.\n\t* config/mips/netbsd.h (TARGET_CPU_CPP_BUILTINS): Update similarly to\n\tmips.h.\n\t(ASM_SPEC): Add mips32r6, mips64r6.\n\t* config/mips/t-isa3264 (MULTILIB_OPTIONS, MULTILIB_DIRNAMES): Update\n\tfor mips32r6/mips64r6.\n\t* doc/invoke.texi: Document -mips32r6,-mips64r6.\n\t* doc/md.texi: Update comment for ZD constraint.\n\nlibgcc/\n\n\t* config.host: Support mipsisa32r6 and mipsisa64r6.\n\t* config/mips/mips16.S: Do not build for R6.\n\ngcc/testsuite/\n\n\t* gcc.dg/torture/mips-hilo-2.c: Unconditionally pass for R6 onwards.\n\t* gcc.dg/torture/pr19683-1.c: Likewise.\n\t* gcc.target/mips/branch-cost-2.c: Require MOVN.\n\t* gcc.target/mips/movcc-1.c: Likewise.\n\t* gcc.target/mips/movcc-2.c: Likewise.\n\t* gcc.target/mips/movcc-3.c: Likewise.\n\t* gcc.target/mips/call-saved-4.c: Require LDC.\n\t* gcc.target/mips/dmult-1.c: Require R5 or earlier.\n\t* gcc.target/mips/fpcmp-1.c: Likewise.\n\t* gcc.target/mips/fpcmp-2.c: Likewise.\n\t* gcc.target/mips/neg-abs-2.c: Likewise.\n\t* gcc.target/mips/timode-1.c: Likewise.\n\t* gcc.target/mips/unaligned-1.c: Likewise.\n\t* gcc.target/mips/madd-3.c: Require MADD.\n\t* gcc.target/mips/madd-9.c: Likewise.\n\t* gcc.target/mips/maddu-3.c: Likewise.\n\t* gcc.target/mips/msub-3.c: Likewise.\n\t* gcc.target/mips/msubu-3.c: Likewise.\n\t* gcc.target/mips/mult-1.c: Require INS and not DMUL.\n\t* gcc.target/mips/mips-ps-type-2.c: Require MADD.PS.\n\t* gcc.target/mips/mips.exp (mips_option_groups): Add ins, dmul, ldc,\n\tmovn, madd, maddps.\n\t(mips-dg-options): INS available from R2.  LDC available from MIPS II,\n\tDMUL is present in octeon.  Describe all features removed from R6.\n\nCo-Authored-By: Steve Ellcey <sellcey@imgtec.com>\n\nFrom-SVN: r218973", "tree": {"sha": "2e11668640648846ed68aa66c3b7f67e1dc1fa8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2e11668640648846ed68aa66c3b7f67e1dc1fa8a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18/comments", "author": {"login": "mfortune", "id": 10220247, "node_id": "MDQ6VXNlcjEwMjIwMjQ3", "avatar_url": "https://avatars.githubusercontent.com/u/10220247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mfortune", "html_url": "https://github.com/mfortune", "followers_url": "https://api.github.com/users/mfortune/followers", "following_url": "https://api.github.com/users/mfortune/following{/other_user}", "gists_url": "https://api.github.com/users/mfortune/gists{/gist_id}", "starred_url": "https://api.github.com/users/mfortune/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mfortune/subscriptions", "organizations_url": "https://api.github.com/users/mfortune/orgs", "repos_url": "https://api.github.com/users/mfortune/repos", "events_url": "https://api.github.com/users/mfortune/events{/privacy}", "received_events_url": "https://api.github.com/users/mfortune/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5afd44e33b13b922760a41580020f941dbdd473e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5afd44e33b13b922760a41580020f941dbdd473e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5afd44e33b13b922760a41580020f941dbdd473e"}], "stats": {"total": 1496, "additions": 1094, "deletions": 402}, "files": [{"sha": "9dce19b0d811257d5335d7ae2c25186b1e88b3a4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 123, "deletions": 0, "changes": 123, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18", "patch": "@@ -1,3 +1,126 @@\n+2014-12-19  Matthew Fortune  <matthew.fortune@imgtec.com>\n+\n+\t* config.gcc: Add mipsisa64r6 and mipsisa32r6 cpu support.\n+\t* config/mips/constraints.md (ZD): Add r6 restrictions.\n+\t* config/mips/gnu-user.h (DRIVER_SELF_SPECS): Add MIPS_ISA_LEVEL_SPEC.\n+\t* config/mips/loongson.md\n+\t(<u>div<mode>3, <u>mod<mode>3): Move to mips.md.\n+\t* config/mips/mips-cpus.def (mips32r6, mips64r6): Define.\n+\t* config/mips/mips-modes.def (CCF): New mode.\n+\t* config/mips/mips-protos.h\n+\t(mips_9bit_offset_address_p): New prototype.\n+\t* config/mips/mips-tables.opt: Regenerate.\n+\t* config/mips/mips.c (MIPS_JR): Use JALR $, <reg> for R6.\n+\t(mips_rtx_cost_data): Add pseudo-processors W32 and W64.\n+\t(mips_9bit_offset_address_p): New function.\n+\t(mips_rtx_costs): Account for R6 multiply and FMA instructions.\n+\t(mips_emit_compare): Implement R6 FPU comparisons.\n+\t(mips_expand_conditional_move): Implement R6 selects.\n+\t(mips_expand_conditional_trap): Account for removed trap immediate.\n+\t(mips_expand_block_move): Disable inline move when LWL/LWR are removed.\n+\t(mips_print_float_branch_condition): Update for R6 FPU branches.\n+\t(mips_print_operand): Handle CCF mode compares.\n+\t(mips_interrupt_extra_call_saved_reg_p): Do not attempt to callee-save\n+\tMD_REGS for R6.\n+\t(mips_hard_regno_mode_ok_p): Support CCF mode.\n+\t(mips_mode_ok_for_mov_fmt_p): Likewise.\n+\t(mips_secondary_reload_class): CCFmode can be loaded directly.\n+\t(mips_set_fast_mult_zero_zero_p): Account for R6 multiply instructions.\n+\t(mips_option_override): Ensure R6 is used with fp64.  Set default\n+\tmips_nan modes.  Check for mips_nan support.  Prevent DSP with R6.\n+\t(mips_conditional_register_usage): Disable MD_REGS for R6. Disable\n+\tFPSW for R6.\n+\t(mips_mulsidi3_gen_fn): Support R6 multiply instructions.\n+\t* config/mips/mips.h (ISA_MIPS32R6, ISA_MIPS64R6): Define.\n+\t(TARGET_CPU_CPP_BUILTINS): Rework for mips32/mips64.\n+\t(ISA_HAS_JR): New macro.\n+\t(ISA_HAS_HILO): New macro.\n+\t(ISA_HAS_R6MUL): Likewise.\n+\t(ISA_HAS_R6DMUL): Likewise.\n+\t(ISA_HAS_R6DIV): Likewise.\n+\t(ISA_HAS_R6DDIV): Likewise.\n+\t(ISA_HAS_CCF): Likewise.\n+\t(ISA_HAS_SEL): Likewise.\n+\t(ISA_HAS_COND_TRAPI): Likewise.\n+\t(ISA_HAS_FP_MADDF_MSUBF): Likewise.\n+\t(ISA_HAS_LWL_LWR): Likewise.\n+\t(ISA_HAS_IEEE_754_LEGACY): Likewise.\n+\t(ISA_HAS_IEEE_754_2008): Likewise.\n+\t(ISA_HAS_PREFETCH_9BIT): Likewise.\n+\t(MIPSR6_9BIT_OFFSET_P): New macro.\n+\t(BASE_DRIVER_SELF_SPECS): Use MIPS_ISA_DRIVER_SELF_SPECS.\n+\t(DRIVER_SELF_SPECS): Use MIPS_ISA_LEVEL_SPEC.\n+\t(MULTILIB_ISA_DEFAULT): Handle mips32r6 and mips64r6.\n+\t(MIPS_ISA_LEVEL_SPEC): Likewise.\n+\t(MIPS_ISA_SYNCI_SPEC): Likewise.\n+\t(ISA_HAS_64BIT_REGS): Likewise.\n+\t(ISA_HAS_BRANCHLIKELY): Likewise.\n+\t(ISA_HAS_MUL3): Likewise.\n+\t(ISA_HAS_DMULT): Likewise.\n+\t(ISA_HAS_DDIV): Likewise.\n+\t(ISA_HAS_DIV): Likewise.\n+\t(ISA_HAS_MULT): Likewise.\n+\t(ISA_HAS_FP_CONDMOVE): Likewise.\n+\t(ISA_HAS_8CC): Likewise.\n+\t(ISA_HAS_FP4): Likewise.\n+\t(ISA_HAS_PAIRED_SINGLE): Likewise.\n+\t(ISA_HAS_MADD_MSUB): Likewise.\n+\t(ISA_HAS_FP_RECIP_RSQRT): Likewise.\n+\t* config/mips/mips.md (processor): Add w32 and w64.\n+\t(FPCC): New mode iterator.\n+\t(reg): Add CCF mode.\n+\t(fpcmp): New mode attribute.\n+\t(fcond): Add ordered, ltgt and ne codes.\n+\t(fcond): Update code attribute.\n+\t(sel): New code attribute.\n+\t(selinv): Likewise.\n+\t(ctrap<mode>4): Update condition.\n+\t(*conditional_trap_reg<mode>): New define_insn.\n+\t(*conditional_trap<mode>): Update condition.\n+\t(mul<mode>3): Expand R6 multiply instructions.\n+\t(<su>mulsi3_highpart): Likewise.\n+\t(<su>muldi3_highpart): Likewise.\n+\t(mul<mode>3_mul3_loongson): Rename...\n+\t(mul<mode>3_mul3_hilo): To this.  Add R6 mul instruction.\n+\t(<u>mulsidi3_32bit_r6): New expander.\n+\t(<u>mulsidi3_32bit): Restrict to pre-r6 multiplies.\n+\t(<u>mulsidi3_32bit_r4000): Likewise.\n+\t(<u>mulsidi3_64bit): Likewise.\n+\t(<su>mulsi3_highpart_internal): Likewise.\n+\t(mulsidi3_64bit_r6dmul): New instruction.\n+\t(<su>mulsi3_highpart_r6): Likewise.\n+\t(<su>muldi3_highpart_r6): Likewise.\n+\t(fma<mode>4): Likewise.\n+\t(movccf): Likewise.\n+\t(*sel<code><GPR:mode>_using_<GPR2:mode>): Likewise.\n+\t(*sel<mode>): Likewise.\n+\t(<u>div<mode>3): Moved from loongson.md.  Add R6 instructions.\n+\t(<u>mod<mode>3): Likewise.\n+\t(extvmisalign<mode>): Require ISA_HAS_LWL_LWR.\n+\t(extzvmisalign<mode>): Likewise.\n+\t(insvmisalign<mode>): Likewise.\n+\t(mips_cache): Account for R6 displacement field sizes.\n+\t(*branch_fp): Rename...\n+\t(*branch_fp_<mode>): To this.  Add CCFmode support.\n+\t(*branch_fp_inverted): Rename...\n+\t(*branch_fp_inverted_<mode>): To this.  Add CCFmode support.\n+\t(s<code>_<mode>): Rename...\n+\t(s<code>_<SCALARF:mode>_using_<FPCC:mode>): To this.  Add FCCmode\n+\tcondition support.\n+\t(s<code>_<mode> swapped): Rename...\n+\t(s<code>_<SCALARF:mode>_using_<FPCC:mode> swapped): To this. Add\n+\tCCFmode condition support.\n+\t(mov<mode>cc GPR): Expand R6 selects.\n+\t(mov<mode>cc FPR): Expand R6 selects.\n+\t(*tls_get_tp_<mode>_split): Do not .set push for >= mips32r2.\n+\t* config/mips/netbsd.h (TARGET_CPU_CPP_BUILTINS): Update similarly to\n+\tmips.h.\n+\t(ASM_SPEC): Add mips32r6, mips64r6.\n+\t* config/mips/t-isa3264 (MULTILIB_OPTIONS, MULTILIB_DIRNAMES): Update\n+\tfor mips32r6/mips64r6.\n+\t* doc/invoke.texi: Document -mips32r6,-mips64r6.\n+\t* doc/md.texi: Update comment for ZD constraint.\n+\n 2014-12-19  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \tPR target/64268"}, {"sha": "259f63b30fbd4e6323679e4db8ac93f52289ac46", "filename": "gcc/config.gcc", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18", "patch": "@@ -1973,6 +1973,9 @@ mips*-*-linux*)\t\t\t\t# Linux MIPS, either endian.\n \ttm_file=\"dbxelf.h elfos.h gnu-user.h linux.h linux-android.h glibc-stdint.h ${tm_file} mips/gnu-user.h mips/linux.h mips/linux-common.h\"\n \textra_options=\"${extra_options} linux-android.opt\"\n \tcase ${target} in\n+\t\tmipsisa32r6*)\n+\t\t\tdefault_mips_arch=mips32r6\n+\t\t\t;;\n \t\tmipsisa32r2*)\n \t\t\tdefault_mips_arch=mips32r2\n \t\t\t;;\n@@ -1991,6 +1994,11 @@ mips*-*-linux*)\t\t\t\t# Linux MIPS, either endian.\n \t\t\ttarget_cpu_default=MASK_SOFT_FLOAT_ABI\n \t\t\tenable_mips_multilibs=\"yes\"\n \t\t\t;;\n+\t\tmipsisa64r6*-*-linux*)\n+\t\t\tdefault_mips_abi=n32\n+\t\t\tdefault_mips_arch=mips64r6\n+\t\t\tenable_mips_multilibs=\"yes\"\n+\t\t\t;;\n \t\tmipsisa64r2*-*-linux*)\n \t\t\tdefault_mips_abi=n32\n \t\t\tdefault_mips_arch=mips64r2\n@@ -2033,12 +2041,18 @@ mips*-sde-elf*)\n \t    ;;\n \tesac\n \tcase ${target} in\n+\t  mipsisa32r6*)\n+\t    tm_defines=\"MIPS_ISA_DEFAULT=37 MIPS_ABI_DEFAULT=ABI_32\"\n+\t    ;;\n \t  mipsisa32r2*)\n \t    tm_defines=\"MIPS_ISA_DEFAULT=33 MIPS_ABI_DEFAULT=ABI_32\"\n \t    ;;\n \t  mipsisa32*)\n \t    tm_defines=\"MIPS_ISA_DEFAULT=32 MIPS_ABI_DEFAULT=ABI_32\"\n \t    ;;\n+\t  mipsisa64r6*)\n+\t    tm_defines=\"MIPS_ISA_DEFAULT=69 MIPS_ABI_DEFAULT=ABI_N32\"\n+\t    ;;\n \t  mipsisa64r2*)\n \t    tm_defines=\"MIPS_ISA_DEFAULT=65 MIPS_ABI_DEFAULT=ABI_N32\"\n \t    ;;\n@@ -2049,17 +2063,25 @@ mips*-sde-elf*)\n \t;;\n mipsisa32-*-elf* | mipsisa32el-*-elf* | \\\n mipsisa32r2-*-elf* | mipsisa32r2el-*-elf* | \\\n+mipsisa32r6-*-elf* | mipsisa32r6el-*-elf* | \\\n mipsisa64-*-elf* | mipsisa64el-*-elf* | \\\n-mipsisa64r2-*-elf* | mipsisa64r2el-*-elf*)\n+mipsisa64r2-*-elf* | mipsisa64r2el-*-elf* | \\\n+mipsisa64r6-*-elf* | mipsisa64r6el-*-elf*)\n \ttm_file=\"elfos.h newlib-stdint.h ${tm_file} mips/elf.h\"\n \ttmake_file=\"mips/t-isa3264\"\n \tcase ${target} in\n+\t  mipsisa32r6*)\n+\t    tm_defines=\"${tm_defines} MIPS_ISA_DEFAULT=37\"\n+\t    ;;\n \t  mipsisa32r2*)\n \t    tm_defines=\"${tm_defines} MIPS_ISA_DEFAULT=33\"\n \t    ;;\n \t  mipsisa32*)\n \t    tm_defines=\"${tm_defines} MIPS_ISA_DEFAULT=32\"\n \t    ;;\n+\t  mipsisa64r6*)\n+\t    tm_defines=\"${tm_defines} MIPS_ISA_DEFAULT=69\"\n+\t    ;;\n \t  mipsisa64r2*)\n \t    tm_defines=\"${tm_defines} MIPS_ISA_DEFAULT=65\"\n \t    ;;\n@@ -4192,8 +4214,10 @@ case ${target} in\n \t\t    mips4)    tm_defines=\"$tm_defines MIPS_ISA_DEFAULT=4\" ;;\n \t\t    mips32)   tm_defines=\"$tm_defines MIPS_ISA_DEFAULT=32\" ;;\n \t\t    mips32r2) tm_defines=\"$tm_defines MIPS_ISA_DEFAULT=33\" ;;\n+\t\t    mips32r6) tm_defines=\"$tm_defines MIPS_ISA_DEFAULT=37\" ;;\n \t\t    mips64)   tm_defines=\"$tm_defines MIPS_ISA_DEFAULT=64\" ;;\n \t\t    mips64r2) tm_defines=\"$tm_defines MIPS_ISA_DEFAULT=65\" ;;\n+\t\t    mips64r6) tm_defines=\"$tm_defines MIPS_ISA_DEFAULT=69\" ;;\n \t\tesac\n \t\tcase ${default_mips_abi} in\n \t\t    32)   tm_defines=\"$tm_defines MIPS_ABI_DEFAULT=ABI_32\" ;;"}, {"sha": "816880c11570d759108fab72dd7e4c94daca16c0", "filename": "gcc/config/mips/constraints.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18/gcc%2Fconfig%2Fmips%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18/gcc%2Fconfig%2Fmips%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fconstraints.md?ref=82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18", "patch": "@@ -321,13 +321,13 @@\n \t (match_test \"mips_address_insns (XEXP (op, 0), mode, false)\"))))\n \n (define_address_constraint \"ZD\"\n-  \"When compiling microMIPS code, this constraint matches an address operand\n-   that is formed from a base register and a 12-bit offset.  These operands\n-   can be used for microMIPS instructions such as @code{prefetch}.  When\n-   not compiling for microMIPS code, @code{ZD} is equivalent to @code{p}.\"\n+  \"An address suitable for a @code{prefetch} instruction, or for any other\n+   instruction with the same addressing mode as @code{prefetch}.\"\n    (if_then_else (match_test \"TARGET_MICROMIPS\")\n \t\t (match_test \"umips_12bit_offset_address_p (op, mode)\")\n-\t\t (match_test \"mips_address_insns (op, mode, false)\")))\n+\t  (if_then_else (match_test \"ISA_HAS_PREFETCH_9BIT\")\n+\t\t\t(match_test \"mips_9bit_offset_address_p (op, mode)\")\n+\t\t\t(match_test \"mips_address_insns (op, mode, false)\"))))\n \n (define_memory_constraint \"ZR\"\n  \"@internal"}, {"sha": "6501a27bd471d8b81e417460d59dadad7d50b28d", "filename": "gcc/config/mips/gnu-user.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18/gcc%2Fconfig%2Fmips%2Fgnu-user.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18/gcc%2Fconfig%2Fmips%2Fgnu-user.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fgnu-user.h?ref=82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18", "patch": "@@ -132,6 +132,7 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n \n #undef DRIVER_SELF_SPECS\n #define DRIVER_SELF_SPECS \\\n+  MIPS_ISA_LEVEL_SPEC,    \\\n   BASE_DRIVER_SELF_SPECS, \\\n   LINUX_DRIVER_SELF_SPECS\n "}, {"sha": "08691313c69dd3af73cc261e4bad379060f1f9f2", "filename": "gcc/config/mips/loongson.md", "status": "modified", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18/gcc%2Fconfig%2Fmips%2Floongson.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18/gcc%2Fconfig%2Fmips%2Floongson.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Floongson.md?ref=82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18", "patch": "@@ -907,33 +907,3 @@\n   mips_expand_vec_reduc (operands[0], operands[1], gen_umin<mode>3);\n   DONE;\n })\n-\n-;; Integer division and modulus.  For integer multiplication, see mips.md.\n-\n-(define_insn \"<u>div<mode>3\"\n-  [(set (match_operand:GPR 0 \"register_operand\" \"=&d\")\n-\t(any_div:GPR (match_operand:GPR 1 \"register_operand\" \"d\")\n-\t\t     (match_operand:GPR 2 \"register_operand\" \"d\")))]\n-  \"TARGET_LOONGSON_2EF || TARGET_LOONGSON_3A\"\n-  {\n-    if (TARGET_LOONGSON_2EF)\n-      return mips_output_division (\"<d>div<u>.g\\t%0,%1,%2\", operands);\n-    else\n-      return mips_output_division (\"gs<d>div<u>\\t%0,%1,%2\", operands);\n-  }\n-  [(set_attr \"type\" \"idiv3\")\n-   (set_attr \"mode\" \"<MODE>\")])\n-\n-(define_insn \"<u>mod<mode>3\"\n-  [(set (match_operand:GPR 0 \"register_operand\" \"=&d\")\n-\t(any_mod:GPR (match_operand:GPR 1 \"register_operand\" \"d\")\n-\t\t     (match_operand:GPR 2 \"register_operand\" \"d\")))]\n-  \"TARGET_LOONGSON_2EF || TARGET_LOONGSON_3A\"\n-  {\n-    if (TARGET_LOONGSON_2EF)\n-      return mips_output_division (\"<d>mod<u>.g\\t%0,%1,%2\", operands);\n-    else\n-      return mips_output_division (\"gs<d>mod<u>\\t%0,%1,%2\", operands);\n-  }\n-  [(set_attr \"type\" \"idiv3\")\n-   (set_attr \"mode\" \"<MODE>\")])"}, {"sha": "0d21783b3f77de12b7b48b4349ab8091dc97b34c", "filename": "gcc/config/mips/mips-cpus.def", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18/gcc%2Fconfig%2Fmips%2Fmips-cpus.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18/gcc%2Fconfig%2Fmips%2Fmips-cpus.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-cpus.def?ref=82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18", "patch": "@@ -50,11 +50,13 @@ MIPS_CPU (\"mips32r2\", PROCESSOR_74KF2_1, 33, PTF_AVOID_BRANCHLIKELY)\n    as mips32r2.  */\n MIPS_CPU (\"mips32r3\", PROCESSOR_M4K, 34, PTF_AVOID_BRANCHLIKELY)\n MIPS_CPU (\"mips32r5\", PROCESSOR_P5600, 36, PTF_AVOID_BRANCHLIKELY)\n+MIPS_CPU (\"mips32r6\", PROCESSOR_W32, 37, PTF_AVOID_BRANCHLIKELY)\n MIPS_CPU (\"mips64\", PROCESSOR_5KC, 64, PTF_AVOID_BRANCHLIKELY)\n /* ??? For now just tune the generic MIPS64r2 and above for 5KC as well.   */\n MIPS_CPU (\"mips64r2\", PROCESSOR_5KC, 65, PTF_AVOID_BRANCHLIKELY)\n MIPS_CPU (\"mips64r3\", PROCESSOR_5KC, 66, PTF_AVOID_BRANCHLIKELY)\n MIPS_CPU (\"mips64r5\", PROCESSOR_5KC, 68, PTF_AVOID_BRANCHLIKELY)\n+MIPS_CPU (\"mips64r6\", PROCESSOR_W64, 69, PTF_AVOID_BRANCHLIKELY)\n \n /* MIPS I processors.  */\n MIPS_CPU (\"r3000\", PROCESSOR_R3000, 1, 0)"}, {"sha": "96d72c16ad456a4f1c842554f69a64e7609b7db2", "filename": "gcc/config/mips/mips-modes.def", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18/gcc%2Fconfig%2Fmips%2Fmips-modes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18/gcc%2Fconfig%2Fmips%2Fmips-modes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-modes.def?ref=82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18", "patch": "@@ -46,3 +46,6 @@ ADJUST_ALIGNMENT (CCV4, 16);\n \n /* For MIPS DSP control registers.  */\n CC_MODE (CCDSP);\n+\n+/* For floating point conditions in FP registers.  */\n+CC_MODE (CCF);"}, {"sha": "087403e57f6c061017437dc14056a01f30f10963", "filename": "gcc/config/mips/mips-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-protos.h?ref=82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18", "patch": "@@ -347,6 +347,7 @@ extern bool umips_load_store_pair_p (bool, rtx *);\n extern void umips_output_load_store_pair (bool, rtx *);\n extern bool umips_movep_target_p (rtx, rtx);\n extern bool umips_12bit_offset_address_p (rtx, machine_mode);\n+extern bool mips_9bit_offset_address_p (rtx, machine_mode);\n extern bool lwsp_swsp_address_p (rtx, machine_mode);\n extern bool m16_based_address_p (rtx, machine_mode,\n \t\t\t         int (*)(rtx_def*, machine_mode)); "}, {"sha": "c8cdfa7a401060b82151bd7e1fba6f3dc90d987e", "filename": "gcc/config/mips/mips-tables.opt", "status": "modified", "additions": 209, "deletions": 197, "changes": 406, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18/gcc%2Fconfig%2Fmips%2Fmips-tables.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18/gcc%2Fconfig%2Fmips%2Fmips-tables.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-tables.opt?ref=82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18", "patch": "@@ -82,593 +82,605 @@ EnumValue\n Enum(mips_mips_opt_value) String(32r5) Value(7)\n \n EnumValue\n-Enum(mips_arch_opt_value) String(mips64) Value(8) Canonical\n+Enum(mips_arch_opt_value) String(mips32r6) Value(8) Canonical\n \n EnumValue\n-Enum(mips_mips_opt_value) String(64) Value(8)\n+Enum(mips_mips_opt_value) String(32r6) Value(8)\n \n EnumValue\n-Enum(mips_arch_opt_value) String(mips64r2) Value(9) Canonical\n+Enum(mips_arch_opt_value) String(mips64) Value(9) Canonical\n \n EnumValue\n-Enum(mips_mips_opt_value) String(64r2) Value(9)\n+Enum(mips_mips_opt_value) String(64) Value(9)\n \n EnumValue\n-Enum(mips_arch_opt_value) String(mips64r3) Value(10) Canonical\n+Enum(mips_arch_opt_value) String(mips64r2) Value(10) Canonical\n \n EnumValue\n-Enum(mips_mips_opt_value) String(64r3) Value(10)\n+Enum(mips_mips_opt_value) String(64r2) Value(10)\n \n EnumValue\n-Enum(mips_arch_opt_value) String(mips64r5) Value(11) Canonical\n+Enum(mips_arch_opt_value) String(mips64r3) Value(11) Canonical\n \n EnumValue\n-Enum(mips_mips_opt_value) String(64r5) Value(11)\n+Enum(mips_mips_opt_value) String(64r3) Value(11)\n \n EnumValue\n-Enum(mips_arch_opt_value) String(r3000) Value(12) Canonical\n+Enum(mips_arch_opt_value) String(mips64r5) Value(12) Canonical\n \n EnumValue\n-Enum(mips_arch_opt_value) String(r3k) Value(12)\n+Enum(mips_mips_opt_value) String(64r5) Value(12)\n \n EnumValue\n-Enum(mips_arch_opt_value) String(3000) Value(12)\n+Enum(mips_arch_opt_value) String(mips64r6) Value(13) Canonical\n \n EnumValue\n-Enum(mips_arch_opt_value) String(3k) Value(12)\n+Enum(mips_mips_opt_value) String(64r6) Value(13)\n \n EnumValue\n-Enum(mips_arch_opt_value) String(r2000) Value(13) Canonical\n+Enum(mips_arch_opt_value) String(r3000) Value(14) Canonical\n \n EnumValue\n-Enum(mips_arch_opt_value) String(r2k) Value(13)\n+Enum(mips_arch_opt_value) String(r3k) Value(14)\n \n EnumValue\n-Enum(mips_arch_opt_value) String(2000) Value(13)\n+Enum(mips_arch_opt_value) String(3000) Value(14)\n \n EnumValue\n-Enum(mips_arch_opt_value) String(2k) Value(13)\n+Enum(mips_arch_opt_value) String(3k) Value(14)\n \n EnumValue\n-Enum(mips_arch_opt_value) String(r3900) Value(14) Canonical\n+Enum(mips_arch_opt_value) String(r2000) Value(15) Canonical\n \n EnumValue\n-Enum(mips_arch_opt_value) String(3900) Value(14)\n+Enum(mips_arch_opt_value) String(r2k) Value(15)\n \n EnumValue\n-Enum(mips_arch_opt_value) String(r6000) Value(15) Canonical\n+Enum(mips_arch_opt_value) String(2000) Value(15)\n \n EnumValue\n-Enum(mips_arch_opt_value) String(r6k) Value(15)\n+Enum(mips_arch_opt_value) String(2k) Value(15)\n \n EnumValue\n-Enum(mips_arch_opt_value) String(6000) Value(15)\n+Enum(mips_arch_opt_value) String(r3900) Value(16) Canonical\n \n EnumValue\n-Enum(mips_arch_opt_value) String(6k) Value(15)\n+Enum(mips_arch_opt_value) String(3900) Value(16)\n \n EnumValue\n-Enum(mips_arch_opt_value) String(r4000) Value(16) Canonical\n+Enum(mips_arch_opt_value) String(r6000) Value(17) Canonical\n \n EnumValue\n-Enum(mips_arch_opt_value) String(r4k) Value(16)\n+Enum(mips_arch_opt_value) String(r6k) Value(17)\n \n EnumValue\n-Enum(mips_arch_opt_value) String(4000) Value(16)\n+Enum(mips_arch_opt_value) String(6000) Value(17)\n \n EnumValue\n-Enum(mips_arch_opt_value) String(4k) Value(16)\n+Enum(mips_arch_opt_value) String(6k) Value(17)\n \n EnumValue\n-Enum(mips_arch_opt_value) String(vr4100) Value(17) Canonical\n+Enum(mips_arch_opt_value) String(r4000) Value(18) Canonical\n \n EnumValue\n-Enum(mips_arch_opt_value) String(4100) Value(17)\n+Enum(mips_arch_opt_value) String(r4k) Value(18)\n \n EnumValue\n-Enum(mips_arch_opt_value) String(r4100) Value(17)\n+Enum(mips_arch_opt_value) String(4000) Value(18)\n \n EnumValue\n-Enum(mips_arch_opt_value) String(vr4111) Value(18) Canonical\n+Enum(mips_arch_opt_value) String(4k) Value(18)\n \n EnumValue\n-Enum(mips_arch_opt_value) String(4111) Value(18)\n+Enum(mips_arch_opt_value) String(vr4100) Value(19) Canonical\n \n EnumValue\n-Enum(mips_arch_opt_value) String(r4111) Value(18)\n+Enum(mips_arch_opt_value) String(4100) Value(19)\n \n EnumValue\n-Enum(mips_arch_opt_value) String(vr4120) Value(19) Canonical\n+Enum(mips_arch_opt_value) String(r4100) Value(19)\n \n EnumValue\n-Enum(mips_arch_opt_value) String(4120) Value(19)\n+Enum(mips_arch_opt_value) String(vr4111) Value(20) Canonical\n \n EnumValue\n-Enum(mips_arch_opt_value) String(r4120) Value(19)\n+Enum(mips_arch_opt_value) String(4111) Value(20)\n \n EnumValue\n-Enum(mips_arch_opt_value) String(vr4130) Value(20) Canonical\n+Enum(mips_arch_opt_value) String(r4111) Value(20)\n \n EnumValue\n-Enum(mips_arch_opt_value) String(4130) Value(20)\n+Enum(mips_arch_opt_value) String(vr4120) Value(21) Canonical\n \n EnumValue\n-Enum(mips_arch_opt_value) String(r4130) Value(20)\n+Enum(mips_arch_opt_value) String(4120) Value(21)\n \n EnumValue\n-Enum(mips_arch_opt_value) String(vr4300) Value(21) Canonical\n+Enum(mips_arch_opt_value) String(r4120) Value(21)\n \n EnumValue\n-Enum(mips_arch_opt_value) String(4300) Value(21)\n+Enum(mips_arch_opt_value) String(vr4130) Value(22) Canonical\n \n EnumValue\n-Enum(mips_arch_opt_value) String(r4300) Value(21)\n+Enum(mips_arch_opt_value) String(4130) Value(22)\n \n EnumValue\n-Enum(mips_arch_opt_value) String(r4400) Value(22) Canonical\n+Enum(mips_arch_opt_value) String(r4130) Value(22)\n \n EnumValue\n-Enum(mips_arch_opt_value) String(4400) Value(22)\n+Enum(mips_arch_opt_value) String(vr4300) Value(23) Canonical\n \n EnumValue\n-Enum(mips_arch_opt_value) String(r4600) Value(23) Canonical\n+Enum(mips_arch_opt_value) String(4300) Value(23)\n \n EnumValue\n-Enum(mips_arch_opt_value) String(4600) Value(23)\n+Enum(mips_arch_opt_value) String(r4300) Value(23)\n \n EnumValue\n-Enum(mips_arch_opt_value) String(orion) Value(24) Canonical\n+Enum(mips_arch_opt_value) String(r4400) Value(24) Canonical\n \n EnumValue\n-Enum(mips_arch_opt_value) String(r4650) Value(25) Canonical\n+Enum(mips_arch_opt_value) String(4400) Value(24)\n \n EnumValue\n-Enum(mips_arch_opt_value) String(4650) Value(25)\n+Enum(mips_arch_opt_value) String(r4600) Value(25) Canonical\n \n EnumValue\n-Enum(mips_arch_opt_value) String(r4700) Value(26) Canonical\n+Enum(mips_arch_opt_value) String(4600) Value(25)\n \n EnumValue\n-Enum(mips_arch_opt_value) String(4700) Value(26)\n+Enum(mips_arch_opt_value) String(orion) Value(26) Canonical\n \n EnumValue\n-Enum(mips_arch_opt_value) String(r5900) Value(27) Canonical\n+Enum(mips_arch_opt_value) String(r4650) Value(27) Canonical\n \n EnumValue\n-Enum(mips_arch_opt_value) String(5900) Value(27)\n+Enum(mips_arch_opt_value) String(4650) Value(27)\n \n EnumValue\n-Enum(mips_arch_opt_value) String(loongson2e) Value(28) Canonical\n+Enum(mips_arch_opt_value) String(r4700) Value(28) Canonical\n \n EnumValue\n-Enum(mips_arch_opt_value) String(loongson2f) Value(29) Canonical\n+Enum(mips_arch_opt_value) String(4700) Value(28)\n \n EnumValue\n-Enum(mips_arch_opt_value) String(r8000) Value(30) Canonical\n+Enum(mips_arch_opt_value) String(r5900) Value(29) Canonical\n \n EnumValue\n-Enum(mips_arch_opt_value) String(r8k) Value(30)\n+Enum(mips_arch_opt_value) String(5900) Value(29)\n \n EnumValue\n-Enum(mips_arch_opt_value) String(8000) Value(30)\n+Enum(mips_arch_opt_value) String(loongson2e) Value(30) Canonical\n \n EnumValue\n-Enum(mips_arch_opt_value) String(8k) Value(30)\n+Enum(mips_arch_opt_value) String(loongson2f) Value(31) Canonical\n \n EnumValue\n-Enum(mips_arch_opt_value) String(r10000) Value(31) Canonical\n+Enum(mips_arch_opt_value) String(r8000) Value(32) Canonical\n \n EnumValue\n-Enum(mips_arch_opt_value) String(r10k) Value(31)\n+Enum(mips_arch_opt_value) String(r8k) Value(32)\n \n EnumValue\n-Enum(mips_arch_opt_value) String(10000) Value(31)\n+Enum(mips_arch_opt_value) String(8000) Value(32)\n \n EnumValue\n-Enum(mips_arch_opt_value) String(10k) Value(31)\n+Enum(mips_arch_opt_value) String(8k) Value(32)\n \n EnumValue\n-Enum(mips_arch_opt_value) String(r12000) Value(32) Canonical\n+Enum(mips_arch_opt_value) String(r10000) Value(33) Canonical\n \n EnumValue\n-Enum(mips_arch_opt_value) String(r12k) Value(32)\n+Enum(mips_arch_opt_value) String(r10k) Value(33)\n \n EnumValue\n-Enum(mips_arch_opt_value) String(12000) Value(32)\n+Enum(mips_arch_opt_value) String(10000) Value(33)\n \n EnumValue\n-Enum(mips_arch_opt_value) String(12k) Value(32)\n+Enum(mips_arch_opt_value) String(10k) Value(33)\n \n EnumValue\n-Enum(mips_arch_opt_value) String(r14000) Value(33) Canonical\n+Enum(mips_arch_opt_value) String(r12000) Value(34) Canonical\n \n EnumValue\n-Enum(mips_arch_opt_value) String(r14k) Value(33)\n+Enum(mips_arch_opt_value) String(r12k) Value(34)\n \n EnumValue\n-Enum(mips_arch_opt_value) String(14000) Value(33)\n+Enum(mips_arch_opt_value) String(12000) Value(34)\n \n EnumValue\n-Enum(mips_arch_opt_value) String(14k) Value(33)\n+Enum(mips_arch_opt_value) String(12k) Value(34)\n \n EnumValue\n-Enum(mips_arch_opt_value) String(r16000) Value(34) Canonical\n+Enum(mips_arch_opt_value) String(r14000) Value(35) Canonical\n \n EnumValue\n-Enum(mips_arch_opt_value) String(r16k) Value(34)\n+Enum(mips_arch_opt_value) String(r14k) Value(35)\n \n EnumValue\n-Enum(mips_arch_opt_value) String(16000) Value(34)\n+Enum(mips_arch_opt_value) String(14000) Value(35)\n \n EnumValue\n-Enum(mips_arch_opt_value) String(16k) Value(34)\n+Enum(mips_arch_opt_value) String(14k) Value(35)\n \n EnumValue\n-Enum(mips_arch_opt_value) String(vr5000) Value(35) Canonical\n+Enum(mips_arch_opt_value) String(r16000) Value(36) Canonical\n \n EnumValue\n-Enum(mips_arch_opt_value) String(vr5k) Value(35)\n+Enum(mips_arch_opt_value) String(r16k) Value(36)\n \n EnumValue\n-Enum(mips_arch_opt_value) String(5000) Value(35)\n+Enum(mips_arch_opt_value) String(16000) Value(36)\n \n EnumValue\n-Enum(mips_arch_opt_value) String(5k) Value(35)\n+Enum(mips_arch_opt_value) String(16k) Value(36)\n \n EnumValue\n-Enum(mips_arch_opt_value) String(r5000) Value(35)\n+Enum(mips_arch_opt_value) String(vr5000) Value(37) Canonical\n \n EnumValue\n-Enum(mips_arch_opt_value) String(r5k) Value(35)\n+Enum(mips_arch_opt_value) String(vr5k) Value(37)\n \n EnumValue\n-Enum(mips_arch_opt_value) String(vr5400) Value(36) Canonical\n+Enum(mips_arch_opt_value) String(5000) Value(37)\n \n EnumValue\n-Enum(mips_arch_opt_value) String(5400) Value(36)\n+Enum(mips_arch_opt_value) String(5k) Value(37)\n \n EnumValue\n-Enum(mips_arch_opt_value) String(r5400) Value(36)\n+Enum(mips_arch_opt_value) String(r5000) Value(37)\n \n EnumValue\n-Enum(mips_arch_opt_value) String(vr5500) Value(37) Canonical\n+Enum(mips_arch_opt_value) String(r5k) Value(37)\n \n EnumValue\n-Enum(mips_arch_opt_value) String(5500) Value(37)\n+Enum(mips_arch_opt_value) String(vr5400) Value(38) Canonical\n \n EnumValue\n-Enum(mips_arch_opt_value) String(r5500) Value(37)\n+Enum(mips_arch_opt_value) String(5400) Value(38)\n \n EnumValue\n-Enum(mips_arch_opt_value) String(rm7000) Value(38) Canonical\n+Enum(mips_arch_opt_value) String(r5400) Value(38)\n \n EnumValue\n-Enum(mips_arch_opt_value) String(rm7k) Value(38)\n+Enum(mips_arch_opt_value) String(vr5500) Value(39) Canonical\n \n EnumValue\n-Enum(mips_arch_opt_value) String(7000) Value(38)\n+Enum(mips_arch_opt_value) String(5500) Value(39)\n \n EnumValue\n-Enum(mips_arch_opt_value) String(7k) Value(38)\n+Enum(mips_arch_opt_value) String(r5500) Value(39)\n \n EnumValue\n-Enum(mips_arch_opt_value) String(r7000) Value(38)\n+Enum(mips_arch_opt_value) String(rm7000) Value(40) Canonical\n \n EnumValue\n-Enum(mips_arch_opt_value) String(r7k) Value(38)\n+Enum(mips_arch_opt_value) String(rm7k) Value(40)\n \n EnumValue\n-Enum(mips_arch_opt_value) String(rm9000) Value(39) Canonical\n+Enum(mips_arch_opt_value) String(7000) Value(40)\n \n EnumValue\n-Enum(mips_arch_opt_value) String(rm9k) Value(39)\n+Enum(mips_arch_opt_value) String(7k) Value(40)\n \n EnumValue\n-Enum(mips_arch_opt_value) String(9000) Value(39)\n+Enum(mips_arch_opt_value) String(r7000) Value(40)\n \n EnumValue\n-Enum(mips_arch_opt_value) String(9k) Value(39)\n+Enum(mips_arch_opt_value) String(r7k) Value(40)\n \n EnumValue\n-Enum(mips_arch_opt_value) String(r9000) Value(39)\n+Enum(mips_arch_opt_value) String(rm9000) Value(41) Canonical\n \n EnumValue\n-Enum(mips_arch_opt_value) String(r9k) Value(39)\n+Enum(mips_arch_opt_value) String(rm9k) Value(41)\n \n EnumValue\n-Enum(mips_arch_opt_value) String(4kc) Value(40) Canonical\n+Enum(mips_arch_opt_value) String(9000) Value(41)\n \n EnumValue\n-Enum(mips_arch_opt_value) String(r4kc) Value(40)\n+Enum(mips_arch_opt_value) String(9k) Value(41)\n \n EnumValue\n-Enum(mips_arch_opt_value) String(4km) Value(41) Canonical\n+Enum(mips_arch_opt_value) String(r9000) Value(41)\n \n EnumValue\n-Enum(mips_arch_opt_value) String(r4km) Value(41)\n+Enum(mips_arch_opt_value) String(r9k) Value(41)\n \n EnumValue\n-Enum(mips_arch_opt_value) String(4kp) Value(42) Canonical\n+Enum(mips_arch_opt_value) String(4kc) Value(42) Canonical\n \n EnumValue\n-Enum(mips_arch_opt_value) String(r4kp) Value(42)\n+Enum(mips_arch_opt_value) String(r4kc) Value(42)\n \n EnumValue\n-Enum(mips_arch_opt_value) String(4ksc) Value(43) Canonical\n+Enum(mips_arch_opt_value) String(4km) Value(43) Canonical\n \n EnumValue\n-Enum(mips_arch_opt_value) String(r4ksc) Value(43)\n+Enum(mips_arch_opt_value) String(r4km) Value(43)\n \n EnumValue\n-Enum(mips_arch_opt_value) String(m4k) Value(44) Canonical\n+Enum(mips_arch_opt_value) String(4kp) Value(44) Canonical\n \n EnumValue\n-Enum(mips_arch_opt_value) String(m14kc) Value(45) Canonical\n+Enum(mips_arch_opt_value) String(r4kp) Value(44)\n \n EnumValue\n-Enum(mips_arch_opt_value) String(m14k) Value(46) Canonical\n+Enum(mips_arch_opt_value) String(4ksc) Value(45) Canonical\n \n EnumValue\n-Enum(mips_arch_opt_value) String(m14ke) Value(47) Canonical\n+Enum(mips_arch_opt_value) String(r4ksc) Value(45)\n \n EnumValue\n-Enum(mips_arch_opt_value) String(m14kec) Value(48) Canonical\n+Enum(mips_arch_opt_value) String(m4k) Value(46) Canonical\n \n EnumValue\n-Enum(mips_arch_opt_value) String(4kec) Value(49) Canonical\n+Enum(mips_arch_opt_value) String(m14kc) Value(47) Canonical\n \n EnumValue\n-Enum(mips_arch_opt_value) String(r4kec) Value(49)\n+Enum(mips_arch_opt_value) String(m14k) Value(48) Canonical\n \n EnumValue\n-Enum(mips_arch_opt_value) String(4kem) Value(50) Canonical\n+Enum(mips_arch_opt_value) String(m14ke) Value(49) Canonical\n \n EnumValue\n-Enum(mips_arch_opt_value) String(r4kem) Value(50)\n+Enum(mips_arch_opt_value) String(m14kec) Value(50) Canonical\n \n EnumValue\n-Enum(mips_arch_opt_value) String(4kep) Value(51) Canonical\n+Enum(mips_arch_opt_value) String(4kec) Value(51) Canonical\n \n EnumValue\n-Enum(mips_arch_opt_value) String(r4kep) Value(51)\n+Enum(mips_arch_opt_value) String(r4kec) Value(51)\n \n EnumValue\n-Enum(mips_arch_opt_value) String(4ksd) Value(52) Canonical\n+Enum(mips_arch_opt_value) String(4kem) Value(52) Canonical\n \n EnumValue\n-Enum(mips_arch_opt_value) String(r4ksd) Value(52)\n+Enum(mips_arch_opt_value) String(r4kem) Value(52)\n \n EnumValue\n-Enum(mips_arch_opt_value) String(24kc) Value(53) Canonical\n+Enum(mips_arch_opt_value) String(4kep) Value(53) Canonical\n \n EnumValue\n-Enum(mips_arch_opt_value) String(r24kc) Value(53)\n+Enum(mips_arch_opt_value) String(r4kep) Value(53)\n \n EnumValue\n-Enum(mips_arch_opt_value) String(24kf2_1) Value(54) Canonical\n+Enum(mips_arch_opt_value) String(4ksd) Value(54) Canonical\n \n EnumValue\n-Enum(mips_arch_opt_value) String(r24kf2_1) Value(54)\n+Enum(mips_arch_opt_value) String(r4ksd) Value(54)\n \n EnumValue\n-Enum(mips_arch_opt_value) String(24kf) Value(55) Canonical\n+Enum(mips_arch_opt_value) String(24kc) Value(55) Canonical\n \n EnumValue\n-Enum(mips_arch_opt_value) String(r24kf) Value(55)\n+Enum(mips_arch_opt_value) String(r24kc) Value(55)\n \n EnumValue\n-Enum(mips_arch_opt_value) String(24kf1_1) Value(56) Canonical\n+Enum(mips_arch_opt_value) String(24kf2_1) Value(56) Canonical\n \n EnumValue\n-Enum(mips_arch_opt_value) String(r24kf1_1) Value(56)\n+Enum(mips_arch_opt_value) String(r24kf2_1) Value(56)\n \n EnumValue\n-Enum(mips_arch_opt_value) String(24kfx) Value(57) Canonical\n+Enum(mips_arch_opt_value) String(24kf) Value(57) Canonical\n \n EnumValue\n-Enum(mips_arch_opt_value) String(r24kfx) Value(57)\n+Enum(mips_arch_opt_value) String(r24kf) Value(57)\n \n EnumValue\n-Enum(mips_arch_opt_value) String(24kx) Value(58) Canonical\n+Enum(mips_arch_opt_value) String(24kf1_1) Value(58) Canonical\n \n EnumValue\n-Enum(mips_arch_opt_value) String(r24kx) Value(58)\n+Enum(mips_arch_opt_value) String(r24kf1_1) Value(58)\n \n EnumValue\n-Enum(mips_arch_opt_value) String(24kec) Value(59) Canonical\n+Enum(mips_arch_opt_value) String(24kfx) Value(59) Canonical\n \n EnumValue\n-Enum(mips_arch_opt_value) String(r24kec) Value(59)\n+Enum(mips_arch_opt_value) String(r24kfx) Value(59)\n \n EnumValue\n-Enum(mips_arch_opt_value) String(24kef2_1) Value(60) Canonical\n+Enum(mips_arch_opt_value) String(24kx) Value(60) Canonical\n \n EnumValue\n-Enum(mips_arch_opt_value) String(r24kef2_1) Value(60)\n+Enum(mips_arch_opt_value) String(r24kx) Value(60)\n \n EnumValue\n-Enum(mips_arch_opt_value) String(24kef) Value(61) Canonical\n+Enum(mips_arch_opt_value) String(24kec) Value(61) Canonical\n \n EnumValue\n-Enum(mips_arch_opt_value) String(r24kef) Value(61)\n+Enum(mips_arch_opt_value) String(r24kec) Value(61)\n \n EnumValue\n-Enum(mips_arch_opt_value) String(24kef1_1) Value(62) Canonical\n+Enum(mips_arch_opt_value) String(24kef2_1) Value(62) Canonical\n \n EnumValue\n-Enum(mips_arch_opt_value) String(r24kef1_1) Value(62)\n+Enum(mips_arch_opt_value) String(r24kef2_1) Value(62)\n \n EnumValue\n-Enum(mips_arch_opt_value) String(24kefx) Value(63) Canonical\n+Enum(mips_arch_opt_value) String(24kef) Value(63) Canonical\n \n EnumValue\n-Enum(mips_arch_opt_value) String(r24kefx) Value(63)\n+Enum(mips_arch_opt_value) String(r24kef) Value(63)\n \n EnumValue\n-Enum(mips_arch_opt_value) String(24kex) Value(64) Canonical\n+Enum(mips_arch_opt_value) String(24kef1_1) Value(64) Canonical\n \n EnumValue\n-Enum(mips_arch_opt_value) String(r24kex) Value(64)\n+Enum(mips_arch_opt_value) String(r24kef1_1) Value(64)\n \n EnumValue\n-Enum(mips_arch_opt_value) String(34kc) Value(65) Canonical\n+Enum(mips_arch_opt_value) String(24kefx) Value(65) Canonical\n \n EnumValue\n-Enum(mips_arch_opt_value) String(r34kc) Value(65)\n+Enum(mips_arch_opt_value) String(r24kefx) Value(65)\n \n EnumValue\n-Enum(mips_arch_opt_value) String(34kf2_1) Value(66) Canonical\n+Enum(mips_arch_opt_value) String(24kex) Value(66) Canonical\n \n EnumValue\n-Enum(mips_arch_opt_value) String(r34kf2_1) Value(66)\n+Enum(mips_arch_opt_value) String(r24kex) Value(66)\n \n EnumValue\n-Enum(mips_arch_opt_value) String(34kf) Value(67) Canonical\n+Enum(mips_arch_opt_value) String(34kc) Value(67) Canonical\n \n EnumValue\n-Enum(mips_arch_opt_value) String(r34kf) Value(67)\n+Enum(mips_arch_opt_value) String(r34kc) Value(67)\n \n EnumValue\n-Enum(mips_arch_opt_value) String(34kf1_1) Value(68) Canonical\n+Enum(mips_arch_opt_value) String(34kf2_1) Value(68) Canonical\n \n EnumValue\n-Enum(mips_arch_opt_value) String(r34kf1_1) Value(68)\n+Enum(mips_arch_opt_value) String(r34kf2_1) Value(68)\n \n EnumValue\n-Enum(mips_arch_opt_value) String(34kfx) Value(69) Canonical\n+Enum(mips_arch_opt_value) String(34kf) Value(69) Canonical\n \n EnumValue\n-Enum(mips_arch_opt_value) String(r34kfx) Value(69)\n+Enum(mips_arch_opt_value) String(r34kf) Value(69)\n \n EnumValue\n-Enum(mips_arch_opt_value) String(34kx) Value(70) Canonical\n+Enum(mips_arch_opt_value) String(34kf1_1) Value(70) Canonical\n \n EnumValue\n-Enum(mips_arch_opt_value) String(r34kx) Value(70)\n+Enum(mips_arch_opt_value) String(r34kf1_1) Value(70)\n \n EnumValue\n-Enum(mips_arch_opt_value) String(34kn) Value(71) Canonical\n+Enum(mips_arch_opt_value) String(34kfx) Value(71) Canonical\n \n EnumValue\n-Enum(mips_arch_opt_value) String(r34kn) Value(71)\n+Enum(mips_arch_opt_value) String(r34kfx) Value(71)\n \n EnumValue\n-Enum(mips_arch_opt_value) String(74kc) Value(72) Canonical\n+Enum(mips_arch_opt_value) String(34kx) Value(72) Canonical\n \n EnumValue\n-Enum(mips_arch_opt_value) String(r74kc) Value(72)\n+Enum(mips_arch_opt_value) String(r34kx) Value(72)\n \n EnumValue\n-Enum(mips_arch_opt_value) String(74kf2_1) Value(73) Canonical\n+Enum(mips_arch_opt_value) String(34kn) Value(73) Canonical\n \n EnumValue\n-Enum(mips_arch_opt_value) String(r74kf2_1) Value(73)\n+Enum(mips_arch_opt_value) String(r34kn) Value(73)\n \n EnumValue\n-Enum(mips_arch_opt_value) String(74kf) Value(74) Canonical\n+Enum(mips_arch_opt_value) String(74kc) Value(74) Canonical\n \n EnumValue\n-Enum(mips_arch_opt_value) String(r74kf) Value(74)\n+Enum(mips_arch_opt_value) String(r74kc) Value(74)\n \n EnumValue\n-Enum(mips_arch_opt_value) String(74kf1_1) Value(75) Canonical\n+Enum(mips_arch_opt_value) String(74kf2_1) Value(75) Canonical\n \n EnumValue\n-Enum(mips_arch_opt_value) String(r74kf1_1) Value(75)\n+Enum(mips_arch_opt_value) String(r74kf2_1) Value(75)\n \n EnumValue\n-Enum(mips_arch_opt_value) String(74kfx) Value(76) Canonical\n+Enum(mips_arch_opt_value) String(74kf) Value(76) Canonical\n \n EnumValue\n-Enum(mips_arch_opt_value) String(r74kfx) Value(76)\n+Enum(mips_arch_opt_value) String(r74kf) Value(76)\n \n EnumValue\n-Enum(mips_arch_opt_value) String(74kx) Value(77) Canonical\n+Enum(mips_arch_opt_value) String(74kf1_1) Value(77) Canonical\n \n EnumValue\n-Enum(mips_arch_opt_value) String(r74kx) Value(77)\n+Enum(mips_arch_opt_value) String(r74kf1_1) Value(77)\n \n EnumValue\n-Enum(mips_arch_opt_value) String(74kf3_2) Value(78) Canonical\n+Enum(mips_arch_opt_value) String(74kfx) Value(78) Canonical\n \n EnumValue\n-Enum(mips_arch_opt_value) String(r74kf3_2) Value(78)\n+Enum(mips_arch_opt_value) String(r74kfx) Value(78)\n \n EnumValue\n-Enum(mips_arch_opt_value) String(1004kc) Value(79) Canonical\n+Enum(mips_arch_opt_value) String(74kx) Value(79) Canonical\n \n EnumValue\n-Enum(mips_arch_opt_value) String(r1004kc) Value(79)\n+Enum(mips_arch_opt_value) String(r74kx) Value(79)\n \n EnumValue\n-Enum(mips_arch_opt_value) String(1004kf2_1) Value(80) Canonical\n+Enum(mips_arch_opt_value) String(74kf3_2) Value(80) Canonical\n \n EnumValue\n-Enum(mips_arch_opt_value) String(r1004kf2_1) Value(80)\n+Enum(mips_arch_opt_value) String(r74kf3_2) Value(80)\n \n EnumValue\n-Enum(mips_arch_opt_value) String(1004kf) Value(81) Canonical\n+Enum(mips_arch_opt_value) String(1004kc) Value(81) Canonical\n \n EnumValue\n-Enum(mips_arch_opt_value) String(r1004kf) Value(81)\n+Enum(mips_arch_opt_value) String(r1004kc) Value(81)\n \n EnumValue\n-Enum(mips_arch_opt_value) String(1004kf1_1) Value(82) Canonical\n+Enum(mips_arch_opt_value) String(1004kf2_1) Value(82) Canonical\n \n EnumValue\n-Enum(mips_arch_opt_value) String(r1004kf1_1) Value(82)\n+Enum(mips_arch_opt_value) String(r1004kf2_1) Value(82)\n \n EnumValue\n-Enum(mips_arch_opt_value) String(p5600) Value(83) Canonical\n+Enum(mips_arch_opt_value) String(1004kf) Value(83) Canonical\n \n EnumValue\n-Enum(mips_arch_opt_value) String(5kc) Value(84) Canonical\n+Enum(mips_arch_opt_value) String(r1004kf) Value(83)\n \n EnumValue\n-Enum(mips_arch_opt_value) String(r5kc) Value(84)\n+Enum(mips_arch_opt_value) String(1004kf1_1) Value(84) Canonical\n \n EnumValue\n-Enum(mips_arch_opt_value) String(5kf) Value(85) Canonical\n+Enum(mips_arch_opt_value) String(r1004kf1_1) Value(84)\n \n EnumValue\n-Enum(mips_arch_opt_value) String(r5kf) Value(85)\n+Enum(mips_arch_opt_value) String(p5600) Value(85) Canonical\n \n EnumValue\n-Enum(mips_arch_opt_value) String(20kc) Value(86) Canonical\n+Enum(mips_arch_opt_value) String(5kc) Value(86) Canonical\n \n EnumValue\n-Enum(mips_arch_opt_value) String(r20kc) Value(86)\n+Enum(mips_arch_opt_value) String(r5kc) Value(86)\n \n EnumValue\n-Enum(mips_arch_opt_value) String(sb1) Value(87) Canonical\n+Enum(mips_arch_opt_value) String(5kf) Value(87) Canonical\n \n EnumValue\n-Enum(mips_arch_opt_value) String(sb1a) Value(88) Canonical\n+Enum(mips_arch_opt_value) String(r5kf) Value(87)\n \n EnumValue\n-Enum(mips_arch_opt_value) String(sr71000) Value(89) Canonical\n+Enum(mips_arch_opt_value) String(20kc) Value(88) Canonical\n \n EnumValue\n-Enum(mips_arch_opt_value) String(sr71k) Value(89)\n+Enum(mips_arch_opt_value) String(r20kc) Value(88)\n \n EnumValue\n-Enum(mips_arch_opt_value) String(xlr) Value(90) Canonical\n+Enum(mips_arch_opt_value) String(sb1) Value(89) Canonical\n \n EnumValue\n-Enum(mips_arch_opt_value) String(loongson3a) Value(91) Canonical\n+Enum(mips_arch_opt_value) String(sb1a) Value(90) Canonical\n \n EnumValue\n-Enum(mips_arch_opt_value) String(octeon) Value(92) Canonical\n+Enum(mips_arch_opt_value) String(sr71000) Value(91) Canonical\n \n EnumValue\n-Enum(mips_arch_opt_value) String(octeon+) Value(93) Canonical\n+Enum(mips_arch_opt_value) String(sr71k) Value(91)\n \n EnumValue\n-Enum(mips_arch_opt_value) String(octeon2) Value(94) Canonical\n+Enum(mips_arch_opt_value) String(xlr) Value(92) Canonical\n \n EnumValue\n-Enum(mips_arch_opt_value) String(octeon3) Value(95) Canonical\n+Enum(mips_arch_opt_value) String(loongson3a) Value(93) Canonical\n \n EnumValue\n-Enum(mips_arch_opt_value) String(xlp) Value(96) Canonical\n+Enum(mips_arch_opt_value) String(octeon) Value(94) Canonical\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(octeon+) Value(95) Canonical\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(octeon2) Value(96) Canonical\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(octeon3) Value(97) Canonical\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(xlp) Value(98) Canonical\n "}, {"sha": "3b8daca0121871798912716c332a416825919130", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 239, "deletions": 26, "changes": 265, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18", "patch": "@@ -182,9 +182,10 @@ along with GCC; see the file COPYING3.  If not see\n #define MIPS_LUI(DEST, VALUE) \\\n   ((0xf << 26) | ((DEST) << 16) | (VALUE))\n \n-/* Return the opcode to jump to register DEST.  */\n+/* Return the opcode to jump to register DEST.  When the JR opcode is not\n+   available use JALR $0, DEST.  */\n #define MIPS_JR(DEST) \\\n-  (((DEST) << 21) | 0x8)\n+  (((DEST) << 21) | (ISA_HAS_JR ? 0x8 : 0x9))\n \n /* Return the opcode for:\n \n@@ -1225,6 +1226,32 @@ static const struct mips_rtx_cost_data\n     COSTS_N_INSNS (8),            /* int_div_di */\n \t\t    2,            /* branch_cost */\n \t\t    4             /* memory_latency */\n+  },\n+  { /* W32 */\n+    COSTS_N_INSNS (4),            /* fp_add */\n+    COSTS_N_INSNS (4),            /* fp_mult_sf */\n+    COSTS_N_INSNS (5),            /* fp_mult_df */\n+    COSTS_N_INSNS (17),           /* fp_div_sf */\n+    COSTS_N_INSNS (32),           /* fp_div_df */\n+    COSTS_N_INSNS (5),            /* int_mult_si */\n+    COSTS_N_INSNS (5),            /* int_mult_di */\n+    COSTS_N_INSNS (41),           /* int_div_si */\n+    COSTS_N_INSNS (41),           /* int_div_di */\n+\t\t     1,           /* branch_cost */\n+\t\t     4            /* memory_latency */\n+  },\n+  { /* W64 */\n+    COSTS_N_INSNS (4),            /* fp_add */\n+    COSTS_N_INSNS (4),            /* fp_mult_sf */\n+    COSTS_N_INSNS (5),            /* fp_mult_df */\n+    COSTS_N_INSNS (17),           /* fp_div_sf */\n+    COSTS_N_INSNS (32),           /* fp_div_df */\n+    COSTS_N_INSNS (5),            /* int_mult_si */\n+    COSTS_N_INSNS (5),            /* int_mult_di */\n+    COSTS_N_INSNS (41),           /* int_div_si */\n+    COSTS_N_INSNS (41),           /* int_div_di */\n+\t\t     1,           /* branch_cost */\n+\t\t     4            /* memory_latency */\n   }\n };\n \f\n@@ -2593,6 +2620,20 @@ umips_12bit_offset_address_p (rtx x, machine_mode mode)\n \t  && UMIPS_12BIT_OFFSET_P (INTVAL (addr.offset)));\n }\n \n+/* Return true if X is a legitimate address with a 9-bit offset.\n+   MODE is the mode of the value being accessed.  */\n+\n+bool\n+mips_9bit_offset_address_p (rtx x, machine_mode mode)\n+{\n+  struct mips_address_info addr;\n+\n+  return (mips_classify_address (&addr, x, mode, false)\n+\t  && addr.type == ADDRESS_REG\n+\t  && CONST_INT_P (addr.offset)\n+\t  && MIPS_9BIT_OFFSET_P (INTVAL (addr.offset)));\n+}\n+\n /* Return the number of instructions needed to load constant X,\n    assuming that BASE_INSN_LENGTH is the length of one instruction.\n    Return 0 if X isn't a valid constant.  */\n@@ -4102,6 +4143,11 @@ mips_rtx_costs (rtx x, int code, int outer_code, int opno ATTRIBUTE_UNUSED,\n \t*total = COSTS_N_INSNS (GET_MODE_SIZE (mode) > UNITS_PER_WORD ? 4 : 1);\n       return false;\n \n+    case FMA:\n+      if (ISA_HAS_FP_MADDF_MSUBF)\n+\t*total = mips_fp_mult_cost (mode);\n+      return false;\n+\n     case MULT:\n       if (float_mode_p)\n \t*total = mips_fp_mult_cost (mode);\n@@ -4112,7 +4158,7 @@ mips_rtx_costs (rtx x, int code, int outer_code, int opno ATTRIBUTE_UNUSED,\n \t\t  ? mips_cost->int_mult_si * 3 + 6\n \t\t  : COSTS_N_INSNS (ISA_HAS_MUL3 ? 7 : 9));\n       else if (!speed)\n-\t*total = COSTS_N_INSNS (ISA_HAS_MUL3 ? 1 : 2) + 1;\n+\t*total = COSTS_N_INSNS ((ISA_HAS_MUL3 || ISA_HAS_R6MUL) ? 1 : 2) + 1;\n       else if (mode == DImode)\n \t*total = mips_cost->int_mult_di;\n       else\n@@ -4188,6 +4234,52 @@ mips_rtx_costs (rtx x, int code, int outer_code, int opno ATTRIBUTE_UNUSED,\n \t}\n       *total = mips_zero_extend_cost (mode, XEXP (x, 0));\n       return false;\n+    case TRUNCATE:\n+      /* Costings for highpart multiplies.  Matching patterns of the form:\n+\n+\t (lshiftrt:DI (mult:DI (sign_extend:DI (...)\n+\t\t\t       (sign_extend:DI (...))\n+\t\t      (const_int 32)\n+      */\n+      if (ISA_HAS_R6MUL\n+\t  && (GET_CODE (XEXP (x, 0)) == ASHIFTRT\n+\t      || GET_CODE (XEXP (x, 0)) == LSHIFTRT)\n+\t  && CONST_INT_P (XEXP (XEXP (x, 0), 1))\n+\t  && ((INTVAL (XEXP (XEXP (x, 0), 1)) == 32\n+\t       && GET_MODE (XEXP (x, 0)) == DImode)\n+\t      || (ISA_HAS_R6DMUL\n+\t\t  && INTVAL (XEXP (XEXP (x, 0), 1)) == 64\n+\t\t  && GET_MODE (XEXP (x, 0)) == TImode))\n+\t  && GET_CODE (XEXP (XEXP (x, 0), 0)) == MULT\n+\t  && ((GET_CODE (XEXP (XEXP (XEXP (x, 0), 0), 0)) == SIGN_EXTEND\n+\t       && GET_CODE (XEXP (XEXP (XEXP (x, 0), 0), 1)) == SIGN_EXTEND)\n+\t      || (GET_CODE (XEXP (XEXP (XEXP (x, 0), 0), 0)) == ZERO_EXTEND\n+\t\t  && (GET_CODE (XEXP (XEXP (XEXP (x, 0), 0), 1))\n+\t\t      == ZERO_EXTEND))))\n+\t{\n+\t  if (!speed)\n+\t    *total = COSTS_N_INSNS (1) + 1;\n+\t  else if (mode == DImode)\n+\t    *total = mips_cost->int_mult_di;\n+\t  else\n+\t    *total = mips_cost->int_mult_si;\n+\n+\t  /* Sign extension is free, zero extension costs for DImode when\n+\t     on a 64bit core / when DMUL is present.  */\n+\t  for (int i = 0; i < 2; ++i)\n+\t    {\n+\t      rtx op = XEXP (XEXP (XEXP (x, 0), 0), i);\n+\t      if (ISA_HAS_R6DMUL\n+\t\t  && GET_CODE (op) == ZERO_EXTEND\n+\t\t  && GET_MODE (op) == DImode)\n+\t\t*total += rtx_cost (op, MULT, i, speed);\n+\t      else\n+\t\t*total += rtx_cost (XEXP (op, 0), GET_CODE (op), 0, speed);\n+\t    }\n+\n+\t  return true;\n+\t}\n+      return false;\n \n     case FLOAT:\n     case UNSIGNED_FLOAT:\n@@ -4971,17 +5063,32 @@ mips_emit_compare (enum rtx_code *code, rtx *op0, rtx *op1, bool need_eq_ne_p)\n     {\n       enum rtx_code cmp_code;\n \n-      /* Floating-point tests use a separate C.cond.fmt comparison to\n-\t set a condition code register.  The branch or conditional move\n-\t will then compare that register against zero.\n+      /* Floating-point tests use a separate C.cond.fmt or CMP.cond.fmt\n+\t comparison to set a register.  The branch or conditional move will\n+\t then compare that register against zero.\n \n \t Set CMP_CODE to the code of the comparison instruction and\n \t *CODE to the code that the branch or move should use.  */\n       cmp_code = *code;\n-      *code = mips_reversed_fp_cond (&cmp_code) ? EQ : NE;\n-      *op0 = (ISA_HAS_8CC\n-\t      ? mips_allocate_fcc (CCmode)\n-\t      : gen_rtx_REG (CCmode, FPSW_REGNUM));\n+      if (ISA_HAS_CCF)\n+\t{\n+\t  /* All FP conditions can be implemented directly with CMP.cond.fmt\n+\t     or by reversing the operands.  */\n+\t  *code = NE;\n+\t  *op0 = gen_reg_rtx (CCFmode);\n+\t}\n+      else\n+\t{\n+\t  /* Three FP conditions cannot be implemented by reversing the\n+\t     operands for C.cond.fmt, instead a reversed condition code is\n+\t     required and a test for false.  */\n+\t  *code = mips_reversed_fp_cond (&cmp_code) ? EQ : NE;\n+\t  if (ISA_HAS_8CC)\n+\t    *op0 = mips_allocate_fcc (CCmode);\n+\t  else\n+\t    *op0 = gen_rtx_REG (CCmode, FPSW_REGNUM);\n+\t}\n+\n       *op1 = const0_rtx;\n       mips_emit_binary (cmp_code, *op0, cmp_op0, cmp_op1);\n     }\n@@ -5071,9 +5178,45 @@ mips_expand_conditional_move (rtx *operands)\n \n   mips_emit_compare (&code, &op0, &op1, true);\n   cond = gen_rtx_fmt_ee (code, GET_MODE (op0), op0, op1);\n-  emit_insn (gen_rtx_SET (VOIDmode, operands[0],\n-\t\t\t  gen_rtx_IF_THEN_ELSE (GET_MODE (operands[0]), cond,\n-\t\t\t\t\t\toperands[2], operands[3])));\n+\n+  /* There is no direct support for general conditional GP move involving\n+     two registers using SEL.  */\n+  if (ISA_HAS_SEL\n+      && INTEGRAL_MODE_P (GET_MODE (operands[2]))\n+      && register_operand (operands[2], VOIDmode)\n+      && register_operand (operands[3], VOIDmode))\n+    {\n+      machine_mode mode = GET_MODE (operands[0]);\n+      rtx temp = gen_reg_rtx (mode);\n+      rtx temp2 = gen_reg_rtx (mode);\n+\n+      emit_insn (gen_rtx_SET (VOIDmode, temp,\n+\t\t\t      gen_rtx_IF_THEN_ELSE (mode, cond,\n+\t\t\t\t\t\t    operands[2], const0_rtx)));\n+\n+      /* Flip the test for the second operand.  */\n+      cond = gen_rtx_fmt_ee ((code == EQ) ? NE : EQ, GET_MODE (op0), op0, op1);\n+\n+      emit_insn (gen_rtx_SET (VOIDmode, temp2,\n+\t\t\t      gen_rtx_IF_THEN_ELSE (mode, cond,\n+\t\t\t\t\t\t    operands[3], const0_rtx)));\n+\n+      /* Merge the two results, at least one is guaranteed to be zero.  */\n+      emit_insn (gen_rtx_SET (VOIDmode, operands[0],\n+\t\t\t      gen_rtx_IOR (mode, temp, temp2)));\n+    }\n+  else\n+    {\n+      if (FLOAT_MODE_P (GET_MODE (operands[2])) && !ISA_HAS_SEL)\n+\t{\n+\t  operands[2] = force_reg (GET_MODE (operands[0]), operands[2]);\n+\t  operands[3] = force_reg (GET_MODE (operands[0]), operands[3]);\n+\t}\n+\n+      emit_insn (gen_rtx_SET (VOIDmode, operands[0],\n+\t\t\t      gen_rtx_IF_THEN_ELSE (GET_MODE (operands[0]), cond,\n+\t\t\t\t\t\t    operands[2], operands[3])));\n+    }\n }\n \n /* Perform the comparison in COMPARISON, then trap if the condition holds.  */\n@@ -5107,7 +5250,9 @@ mips_expand_conditional_trap (rtx comparison)\n \n   mode = GET_MODE (XEXP (comparison, 0));\n   op0 = force_reg (mode, op0);\n-  if (!arith_operand (op1, mode))\n+  if (!(ISA_HAS_COND_TRAPI\n+\t? arith_operand (op1, mode)\n+\t: reg_or_0_operand (op1, mode)))\n     op1 = force_reg (mode, op1);\n \n   emit_insn (gen_rtx_TRAP_IF (VOIDmode,\n@@ -7469,6 +7614,10 @@ mips_block_move_loop (rtx dest, rtx src, HOST_WIDE_INT length,\n bool\n mips_expand_block_move (rtx dest, rtx src, rtx length)\n {\n+  /* Disable entirely for R6 initially.  */\n+  if (!ISA_HAS_LWL_LWR)\n+    return false;\n+\n   if (CONST_INT_P (length))\n     {\n       if (INTVAL (length) <= MIPS_MAX_MOVE_BYTES_STRAIGHT)\n@@ -8231,11 +8380,17 @@ mips_print_float_branch_condition (FILE *file, enum rtx_code code, int letter)\n   switch (code)\n     {\n     case EQ:\n-      fputs (\"c1f\", file);\n+      if (ISA_HAS_CCF)\n+\tfputs (\"c1eqz\", file);\n+      else\n+\tfputs (\"c1f\", file);\n       break;\n \n     case NE:\n-      fputs (\"c1t\", file);\n+      if (ISA_HAS_CCF)\n+\tfputs (\"c1nez\", file);\n+      else\n+\tfputs (\"c1t\", file);\n       break;\n \n     default:\n@@ -8365,7 +8520,7 @@ mips_print_operand (FILE *file, rtx op, int letter)\n       break;\n \n     case 'Z':\n-      if (ISA_HAS_8CC)\n+      if (ISA_HAS_8CC || ISA_HAS_CCF)\n \t{\n \t  mips_print_operand (file, op, 0);\n \t  fputc (',', file);\n@@ -9917,7 +10072,8 @@ mips_must_initialize_gp_p (void)\n static bool\n mips_interrupt_extra_call_saved_reg_p (unsigned int regno)\n {\n-  if (MD_REG_P (regno))\n+  if ((ISA_HAS_HILO || TARGET_DSP)\n+      && MD_REG_P (regno))\n     return true;\n \n   if (TARGET_DSP && DSP_ACC_REG_P (regno))\n@@ -11891,7 +12047,7 @@ mips_hard_regno_mode_ok_p (unsigned int regno, machine_mode mode)\n   size = GET_MODE_SIZE (mode);\n   mclass = GET_MODE_CLASS (mode);\n \n-  if (GP_REG_P (regno))\n+  if (GP_REG_P (regno) && mode != CCFmode)\n     return ((regno - GP_REG_FIRST) & 1) == 0 || size <= UNITS_PER_WORD;\n \n   if (FP_REG_P (regno)\n@@ -11903,6 +12059,13 @@ mips_hard_regno_mode_ok_p (unsigned int regno, machine_mode mode)\n       if (TARGET_O32_FP64A_ABI && size <= 4 && (regno & 1) != 0)\n \treturn false;\n \n+      /* The FPXX ABI requires double-precision values to be placed in\n+\t even-numbered registers.  Disallow odd-numbered registers with\n+\t CCFmode because CCFmode double-precision compares will write a\n+\t 64-bit value to a register.  */\n+      if (mode == CCFmode)\n+\treturn !(TARGET_FLOATXX && (regno & 1) != 0);\n+\n       /* Allow 64-bit vector modes for Loongson-2E/2F.  */\n       if (TARGET_LOONGSON_VECTORS\n \t  && (mode == V2SImode\n@@ -12062,6 +12225,7 @@ mips_mode_ok_for_mov_fmt_p (machine_mode mode)\n {\n   switch (mode)\n     {\n+    case CCFmode:\n     case SFmode:\n       return TARGET_HARD_FLOAT;\n \n@@ -15934,8 +16098,10 @@ mips_mult_zero_zero_cost (struct mips_sim *state, bool setting)\n static void\n mips_set_fast_mult_zero_zero_p (struct mips_sim *state)\n {\n-  if (TARGET_MIPS16)\n-    /* No MTLO or MTHI available.  */\n+  if (TARGET_MIPS16 || !ISA_HAS_HILO)\n+    /* No MTLO or MTHI available for MIPS16. Also, when there are no HI or LO\n+       registers then there is no reason to zero them, arbitrarily choose to\n+       say that \"MULT $0,$0\" would be faster.  */\n     mips_tuning_info.fast_mult_zero_zero_p = true;\n   else\n     {\n@@ -17179,7 +17345,10 @@ mips_option_override (void)\n \n   if ((target_flags_explicit & MASK_FLOAT64) != 0)\n     {\n-      if (TARGET_SINGLE_FLOAT && TARGET_FLOAT64)\n+      if (mips_isa_rev >= 6 && !TARGET_FLOAT64)\n+\terror (\"the %qs architecture does not support %<-mfp32%>\",\n+\t       mips_arch_info->name);\n+      else if (TARGET_SINGLE_FLOAT && TARGET_FLOAT64)\n \terror (\"unsupported combination: %s\", \"-mfp64 -msingle-float\");\n       else if (TARGET_64BIT && TARGET_DOUBLE_FLOAT && !TARGET_FLOAT64)\n \terror (\"unsupported combination: %s\", \"-mgp64 -mfp32 -mdouble-float\");\n@@ -17195,16 +17364,22 @@ mips_option_override (void)\n     }\n   else\n     {\n-      /* -msingle-float selects 32-bit float registers.  Otherwise the\n-\t float registers should be the same size as the integer ones.  */\n-      if (TARGET_64BIT && TARGET_DOUBLE_FLOAT)\n+      /* -msingle-float selects 32-bit float registers.  On r6 and later,\n+\t -mdouble-float selects 64-bit float registers, since the old paired\n+\t register model is not supported.  In other cases the float registers\n+\t should be the same size as the integer ones.  */\n+      if (mips_isa_rev >= 6 && TARGET_DOUBLE_FLOAT && !TARGET_FLOATXX)\n+\ttarget_flags |= MASK_FLOAT64;\n+      else if (TARGET_64BIT && TARGET_DOUBLE_FLOAT)\n \ttarget_flags |= MASK_FLOAT64;\n       else\n \ttarget_flags &= ~MASK_FLOAT64;\n     }\n \n   if (mips_abi != ABI_32 && TARGET_FLOATXX)\n     error (\"%<-mfpxx%> can only be used with the o32 ABI\");\n+  else if (TARGET_FLOAT64 && TARGET_FLOATXX)\n+    error (\"unsupported combination: %s\", \"-mfp64 -mfpxx\");\n   else if (ISA_MIPS1 && !TARGET_FLOAT32)\n     error (\"%<-march=%s%> requires %<-mfp32%>\", mips_arch_info->name);\n   else if (TARGET_FLOATXX && !mips_lra_flag)\n@@ -17382,6 +17557,27 @@ mips_option_override (void)\n \t}\n     }\n \n+  /* Set NaN and ABS defaults.  */\n+  if (mips_nan == MIPS_IEEE_754_DEFAULT && !ISA_HAS_IEEE_754_LEGACY)\n+    mips_nan = MIPS_IEEE_754_2008;\n+  if (mips_abs == MIPS_IEEE_754_DEFAULT && !ISA_HAS_IEEE_754_LEGACY)\n+    mips_abs = MIPS_IEEE_754_2008;\n+\n+  /* Check for IEEE 754 legacy/2008 support.  */\n+  if ((mips_nan == MIPS_IEEE_754_LEGACY\n+       || mips_abs == MIPS_IEEE_754_LEGACY)\n+      && !ISA_HAS_IEEE_754_LEGACY)\n+    warning (0, \"the %qs architecture does not support %<-m%s=legacy%>\",\n+\t     mips_arch_info->name,\n+\t     mips_nan == MIPS_IEEE_754_LEGACY ? \"nan\" : \"abs\");\n+\n+  if ((mips_nan == MIPS_IEEE_754_2008\n+       || mips_abs == MIPS_IEEE_754_2008)\n+      && !ISA_HAS_IEEE_754_2008)\n+    warning (0, \"the %qs architecture does not support %<-m%s=2008%>\",\n+\t     mips_arch_info->name,\n+\t     mips_nan == MIPS_IEEE_754_2008 ? \"nan\" : \"abs\");\n+\n   /* Pre-IEEE 754-2008 MIPS hardware has a quirky almost-IEEE format\n      for all its floating point.  */\n   if (mips_nan != MIPS_IEEE_754_2008)\n@@ -17436,6 +17632,14 @@ mips_option_override (void)\n   if (TARGET_DSPR2)\n     TARGET_DSP = true;\n \n+  if (TARGET_DSP && mips_isa_rev >= 6)\n+    {\n+      error (\"the %qs architecture does not support DSP instructions\",\n+\t     mips_arch_info->name);\n+      TARGET_DSP = false;\n+      TARGET_DSPR2 = false;\n+    }\n+\n   /* .eh_frame addresses should be the same width as a C pointer.\n      Most MIPS ABIs support only one pointer size, so the assembler\n      will usually know exactly how big an .eh_frame address is.\n@@ -17616,6 +17820,10 @@ mips_conditional_register_usage (void)\n     AND_COMPL_HARD_REG_SET (accessible_reg_set,\n \t\t\t    reg_class_contents[(int) DSP_ACC_REGS]);\n \n+  if (!ISA_HAS_HILO)\n+    AND_COMPL_HARD_REG_SET (accessible_reg_set,\n+\t\t\t    reg_class_contents[(int) MD_REGS]);\n+\n   if (!TARGET_HARD_FLOAT)\n     {\n       AND_COMPL_HARD_REG_SET (accessible_reg_set,\n@@ -17630,7 +17838,8 @@ mips_conditional_register_usage (void)\n \t RTL that refers directly to ST_REG_FIRST.  */\n       AND_COMPL_HARD_REG_SET (accessible_reg_set,\n \t\t\t      reg_class_contents[(int) ST_REGS]);\n-      SET_HARD_REG_BIT (accessible_reg_set, FPSW_REGNUM);\n+      if (!ISA_HAS_CCF)\n+\tSET_HARD_REG_BIT (accessible_reg_set, FPSW_REGNUM);\n       fixed_regs[FPSW_REGNUM] = call_used_regs[FPSW_REGNUM] = 1;\n     }\n   if (TARGET_MIPS16)\n@@ -17805,6 +18014,8 @@ mips_mulsidi3_gen_fn (enum rtx_code ext_code)\n \t the extension is not needed for signed multiplication.  In order to\n \t ensure that we always remove the redundant sign-extension in this\n \t case we still expand mulsidi3 for DMUL.  */\n+      if (ISA_HAS_R6DMUL)\n+\treturn signed_p ? gen_mulsidi3_64bit_r6dmul : NULL;\n       if (ISA_HAS_DMUL3)\n \treturn signed_p ? gen_mulsidi3_64bit_dmul : NULL;\n       if (TARGET_MIPS16)\n@@ -17817,6 +18028,8 @@ mips_mulsidi3_gen_fn (enum rtx_code ext_code)\n     }\n   else\n     {\n+      if (ISA_HAS_R6MUL)\n+\treturn (signed_p ? gen_mulsidi3_32bit_r6 : gen_umulsidi3_32bit_r6);\n       if (TARGET_MIPS16)\n \treturn (signed_p\n \t\t? gen_mulsidi3_32bit_mips16"}, {"sha": "4da256dab0091f86184c7bb6620727524b4b1f7d", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 89, "deletions": 50, "changes": 139, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18", "patch": "@@ -210,10 +210,12 @@ struct mips_cpu_info {\n #define ISA_MIPS32R2\t\t    (mips_isa == 33)\n #define ISA_MIPS32R3\t\t    (mips_isa == 34)\n #define ISA_MIPS32R5\t\t    (mips_isa == 36)\n+#define ISA_MIPS32R6\t\t    (mips_isa == 37)\n #define ISA_MIPS64                  (mips_isa == 64)\n #define ISA_MIPS64R2\t\t    (mips_isa == 65)\n #define ISA_MIPS64R3\t\t    (mips_isa == 66)\n #define ISA_MIPS64R5\t\t    (mips_isa == 68)\n+#define ISA_MIPS64R6\t\t    (mips_isa == 69)\n \n /* Architecture target defines.  */\n #define TARGET_LOONGSON_2E          (mips_arch == PROCESSOR_LOONGSON_2E)\n@@ -458,42 +460,12 @@ struct mips_cpu_info {\n \t  builtin_define (\"__mips=4\");\t\t\t\t\t\\\n \t  builtin_define (\"_MIPS_ISA=_MIPS_ISA_MIPS4\");\t\t\t\\\n \t}\t\t\t\t\t\t\t\t\\\n-      else if (ISA_MIPS32)\t\t\t\t\t\t\\\n+      else if (mips_isa >= 32 && mips_isa < 64)\t\t\t\t\\\n \t{\t\t\t\t\t\t\t\t\\\n \t  builtin_define (\"__mips=32\");\t\t\t\t\t\\\n \t  builtin_define (\"_MIPS_ISA=_MIPS_ISA_MIPS32\");\t\t\\\n \t}\t\t\t\t\t\t\t\t\\\n-      else if (ISA_MIPS32R2)\t\t\t\t\t\t\\\n-\t{\t\t\t\t\t\t\t\t\\\n-\t  builtin_define (\"__mips=32\");\t\t\t\t\t\\\n-\t  builtin_define (\"_MIPS_ISA=_MIPS_ISA_MIPS32\");\t\t\\\n-\t}\t\t\t\t\t\t\t\t\\\n-      else if (ISA_MIPS32R3)\t\t\t\t\t\t\\\n-\t{\t\t\t\t\t\t\t\t\\\n-\t  builtin_define (\"__mips=32\");\t\t\t\t\t\\\n-\t  builtin_define (\"_MIPS_ISA=_MIPS_ISA_MIPS32\");\t\t\\\n-\t}\t\t\t\t\t\t\t\t\\\n-      else if (ISA_MIPS32R5)\t\t\t\t\t\t\\\n-\t{\t\t\t\t\t\t\t\t\\\n-\t  builtin_define (\"__mips=32\");\t\t\t\t\t\\\n-\t  builtin_define (\"_MIPS_ISA=_MIPS_ISA_MIPS32\");\t\t\\\n-\t}\t\t\t\t\t\t\t\t\\\n-      else if (ISA_MIPS64)\t\t\t\t\t\t\\\n-\t{\t\t\t\t\t\t\t\t\\\n-\t  builtin_define (\"__mips=64\");\t\t\t\t\t\\\n-\t  builtin_define (\"_MIPS_ISA=_MIPS_ISA_MIPS64\");\t\t\\\n-\t}\t\t\t\t\t\t\t\t\\\n-      else if (ISA_MIPS64R2)\t\t\t\t\t\t\\\n-\t{\t\t\t\t\t\t\t\t\\\n-\t  builtin_define (\"__mips=64\");\t\t\t\t\t\\\n-\t  builtin_define (\"_MIPS_ISA=_MIPS_ISA_MIPS64\");\t\t\\\n-\t}\t\t\t\t\t\t\t\t\\\n-      else if (ISA_MIPS64R3)\t\t\t\t\t\t\\\n-\t{\t\t\t\t\t\t\t\t\\\n-\t  builtin_define (\"__mips=64\");\t\t\t\t\t\\\n-\t  builtin_define (\"_MIPS_ISA=_MIPS_ISA_MIPS64\");\t\t\\\n-\t}\t\t\t\t\t\t\t\t\\\n-      else if (ISA_MIPS64R5)\t\t\t\t\t\t\\\n+      else if (mips_isa >= 64)\t\t\t\t\t\t\\\n \t{\t\t\t\t\t\t\t\t\\\n \t  builtin_define (\"__mips=64\");\t\t\t\t\t\\\n \t  builtin_define (\"_MIPS_ISA=_MIPS_ISA_MIPS64\");\t\t\\\n@@ -673,10 +645,14 @@ struct mips_cpu_info {\n #define MULTILIB_ISA_DEFAULT \"mips32\"\n #elif MIPS_ISA_DEFAULT == 33\n #define MULTILIB_ISA_DEFAULT \"mips32r2\"\n+#elif MIPS_ISA_DEFAULT == 37\n+#define MULTILIB_ISA_DEFAULT \"mips32r6\"\n #elif MIPS_ISA_DEFAULT == 64\n #define MULTILIB_ISA_DEFAULT \"mips64\"\n #elif MIPS_ISA_DEFAULT == 65\n #define MULTILIB_ISA_DEFAULT \"mips64r2\"\n+#elif MIPS_ISA_DEFAULT == 69\n+#define MULTILIB_ISA_DEFAULT \"mips64r6\"\n #else\n #define MULTILIB_ISA_DEFAULT \"mips1\"\n #endif\n@@ -743,11 +719,13 @@ struct mips_cpu_info {\n        |march=34k*|march=74k*|march=m14k*|march=1004k*: -mips32r2} \\\n      %{march=mips32r3: -mips32r3} \\\n      %{march=mips32r5|march=p5600: -mips32r5} \\\n+     %{march=mips32r6: -mips32r6} \\\n      %{march=mips64|march=5k*|march=20k*|march=sb1*|march=sr71000 \\\n        |march=xlr: -mips64} \\\n      %{march=mips64r2|march=loongson3a|march=octeon|march=xlp: -mips64r2} \\\n      %{march=mips64r3: -mips64r3} \\\n      %{march=mips64r5: -mips64r5} \\\n+     %{march=mips64r6: -mips64r6} \\\n      %{!march=*: -\" MULTILIB_ISA_DEFAULT \"}}\"\n \n /* A spec that infers a -mhard-float or -msoft-float setting from an\n@@ -776,8 +754,11 @@ struct mips_cpu_info {\n /* Infer a -msynci setting from a -mips argument, on the assumption that\n    -msynci is desired where possible.  */\n #define MIPS_ISA_SYNCI_SPEC \\\n-  \"%{msynci|mno-synci:;:%{mips32r2|mips32r3|mips32r5|mips64r2|mips64r3 \\\n-                          |mips64r5:-msynci;:-mno-synci}}\"\n+  \"%{msynci|mno-synci:;:%{mips32r2|mips32r3|mips32r5|mips32r6|mips64r2 \\\n+\t\t\t  |mips64r3|mips64r5|mips64r6:-msynci;:-mno-synci}}\"\n+\n+#define MIPS_ISA_NAN2008_SPEC \\\n+  \"%{mnan*:;mips32r6|mips64r6:-mnan=2008}\"\n \n #if (MIPS_ABI_DEFAULT == ABI_O64 \\\n      || MIPS_ABI_DEFAULT == ABI_N32 \\\n@@ -827,11 +808,14 @@ struct mips_cpu_info {\n \n /* A spec that infers the -mdsp setting from an -march argument.  */\n #define BASE_DRIVER_SELF_SPECS \\\n+  MIPS_ISA_NAN2008_SPEC,       \\\n   \"%{!mno-dsp: \\\n      %{march=24ke*|march=34kc*|march=34kf*|march=34kx*|march=1004k*: -mdsp} \\\n      %{march=74k*|march=m14ke*: %{!mno-dspr2: -mdspr2 -mdsp}}}\"\n \n-#define DRIVER_SELF_SPECS BASE_DRIVER_SELF_SPECS\n+#define DRIVER_SELF_SPECS \\\n+  MIPS_ISA_LEVEL_SPEC,\t  \\\n+  BASE_DRIVER_SELF_SPECS\n \n #define GENERATE_DIVIDE_TRAPS (TARGET_DIVIDE_TRAPS \\\n                                && ISA_HAS_COND_TRAP)\n@@ -864,12 +848,15 @@ struct mips_cpu_info {\n \t\t\t\t || ISA_MIPS64\t\t\t\t\\\n \t\t\t\t || ISA_MIPS64R2\t\t\t\\\n \t\t\t\t || ISA_MIPS64R3\t\t\t\\\n-\t\t\t\t || ISA_MIPS64R5)\n+\t\t\t\t || ISA_MIPS64R5\t\t\t\\\n+\t\t\t\t || ISA_MIPS64R6)\n+\n+#define ISA_HAS_JR\t\t(mips_isa_rev <= 5)\n \n /* ISA has branch likely instructions (e.g. mips2).  */\n /* Disable branchlikely for tx39 until compare rewrite.  They haven't\n    been generated up to this point.  */\n-#define ISA_HAS_BRANCHLIKELY\t(!ISA_MIPS1)\n+#define ISA_HAS_BRANCHLIKELY\t(!ISA_MIPS1 && mips_isa_rev <= 5)\n \n /* ISA has 32 single-precision registers.  */\n #define ISA_HAS_ODD_SPREG\t((mips_isa_rev >= 1\t\t\t\\\n@@ -885,38 +872,57 @@ struct mips_cpu_info {\n \t\t\t\t  || TARGET_MIPS7000\t\t\t\\\n \t\t\t\t  || TARGET_MIPS9000\t\t\t\\\n \t\t\t\t  || TARGET_MAD\t\t\t\t\\\n-\t\t\t\t  || mips_isa_rev >= 1)\t\t\t\\\n+\t\t\t\t  || (mips_isa_rev >= 1\t\t\t\\\n+\t\t\t\t      && mips_isa_rev <= 5))\t\t\\\n \t\t\t\t && !TARGET_MIPS16)\n \n /* ISA has a three-operand multiplication instruction.  */\n #define ISA_HAS_DMUL3\t\t(TARGET_64BIT\t\t\t\t\\\n \t\t\t\t && TARGET_OCTEON\t\t\t\\\n \t\t\t\t && !TARGET_MIPS16)\n \n+/* ISA has HI and LO registers.  */\n+#define ISA_HAS_HILO\t\t(mips_isa_rev <= 5)\n+\n /* ISA supports instructions DMULT and DMULTU. */\n-#define ISA_HAS_DMULT\t\t(TARGET_64BIT && !TARGET_MIPS5900)\n+#define ISA_HAS_DMULT\t\t(TARGET_64BIT\t\t\t\t\\\n+\t\t\t\t && !TARGET_MIPS5900\t\t\t\\\n+\t\t\t\t && mips_isa_rev <= 5)\n \n-/* ISA supports instructions MULT and MULTU.\n-   This is always true, but the macro is needed for ISA_HAS_<D>MULT\n-   in mips.md.  */\n-#define ISA_HAS_MULT\t\t(1)\n+/* ISA supports instructions MULT and MULTU.  */\n+#define ISA_HAS_MULT\t\t(mips_isa_rev <= 5)\n+\n+/* ISA supports instructions MUL, MULU, MUH, MUHU.  */\n+#define ISA_HAS_R6MUL\t\t(mips_isa_rev >= 6)\n+\n+/* ISA supports instructions DMUL, DMULU, DMUH, DMUHU.  */\n+#define ISA_HAS_R6DMUL\t\t(TARGET_64BIT && mips_isa_rev >= 6)\n \n /* ISA supports instructions DDIV and DDIVU. */\n-#define ISA_HAS_DDIV\t\t(TARGET_64BIT && !TARGET_MIPS5900)\n+#define ISA_HAS_DDIV\t\t(TARGET_64BIT\t\t\t\t\\\n+\t\t\t\t && !TARGET_MIPS5900\t\t\t\\\n+\t\t\t\t && mips_isa_rev <= 5)\n \n /* ISA supports instructions DIV and DIVU.\n    This is always true, but the macro is needed for ISA_HAS_<D>DIV\n    in mips.md.  */\n-#define ISA_HAS_DIV\t\t(1)\n+#define ISA_HAS_DIV\t\t(mips_isa_rev <= 5)\n \n #define ISA_HAS_DIV3\t\t((TARGET_LOONGSON_2EF\t\t\t\\\n \t\t\t\t  || TARGET_LOONGSON_3A)\t\t\\\n \t\t\t\t && !TARGET_MIPS16)\n \n+/* ISA supports instructions DIV, DIVU, MOD and MODU.  */\n+#define ISA_HAS_R6DIV\t\t(mips_isa_rev >= 6)\n+\n+/* ISA supports instructions DDIV, DDIVU, DMOD and DMODU.  */\n+#define ISA_HAS_R6DDIV\t\t(TARGET_64BIT && mips_isa_rev >= 6)\n+\n /* ISA has the floating-point conditional move instructions introduced\n    in mips4.  */\n #define ISA_HAS_FP_CONDMOVE\t((ISA_MIPS4\t\t\t\t\\\n-\t\t\t\t  || mips_isa_rev >= 1)\t\t\t\\\n+\t\t\t\t  || (mips_isa_rev >= 1\t\t\t\\\n+\t\t\t\t      && mips_isa_rev <= 5))\t\t\\\n \t\t\t\t && !TARGET_MIPS5500\t\t\t\\\n \t\t\t\t && !TARGET_MIPS16)\n \n@@ -933,37 +939,57 @@ struct mips_cpu_info {\n \n /* ISA has the mips4 FP condition code instructions: FP-compare to CC,\n    branch on CC, and move (both FP and non-FP) on CC.  */\n-#define ISA_HAS_8CC\t\t(ISA_MIPS4 || mips_isa_rev >= 1)\n+#define ISA_HAS_8CC\t\t(ISA_MIPS4\t\t\t\t\\\n+\t\t\t\t || (mips_isa_rev >= 1\t\t\t\\\n+\t\t\t\t     && mips_isa_rev <= 5))\n+\n+/* ISA has the FP condition code instructions that store the flag in an\n+   FP register.  */\n+#define ISA_HAS_CCF\t\t(mips_isa_rev >= 6)\n+\n+#define ISA_HAS_SEL\t\t(mips_isa_rev >= 6)\n \n /* This is a catch all for other mips4 instructions: indexed load, the\n    FP madd and msub instructions, and the FP recip and recip sqrt\n    instructions.  Note that this macro should only be used by other\n    ISA_HAS_* macros.  */\n #define ISA_HAS_FP4\t\t((ISA_MIPS4\t\t\t\t\\\n \t\t\t\t  || ISA_MIPS64\t\t\t\t\\\n-\t\t\t\t  || mips_isa_rev >= 2)\t\t\t\\\n+\t\t\t\t  || (mips_isa_rev >= 2\t\t\t\\\n+\t\t\t\t      && mips_isa_rev <= 5))\t\t\\\n \t\t\t\t && !TARGET_MIPS16)\n \n /* ISA has floating-point indexed load and store instructions\n    (LWXC1, LDXC1, SWXC1 and SDXC1).  */\n #define ISA_HAS_LXC1_SXC1\tISA_HAS_FP4\n \n /* ISA has paired-single instructions.  */\n-#define ISA_HAS_PAIRED_SINGLE\t(ISA_MIPS64 || mips_isa_rev >= 2)\n+#define ISA_HAS_PAIRED_SINGLE\t(ISA_MIPS64\t\t\t\t\\\n+\t\t\t\t || (mips_isa_rev >= 2\t\t\t\\\n+\t\t\t\t     && mips_isa_rev <= 5))\n \n /* ISA has conditional trap instructions.  */\n #define ISA_HAS_COND_TRAP\t(!ISA_MIPS1\t\t\t\t\\\n \t\t\t\t && !TARGET_MIPS16)\n \n+/* ISA has conditional trap with immediate instructions.  */\n+#define ISA_HAS_COND_TRAPI\t(!ISA_MIPS1\t\t\t\t\\\n+\t\t\t\t && mips_isa_rev <= 5\t\t\t\\\n+\t\t\t\t && !TARGET_MIPS16)\n+\n /* ISA has integer multiply-accumulate instructions, madd and msub.  */\n-#define ISA_HAS_MADD_MSUB\t(mips_isa_rev >= 1)\n+#define ISA_HAS_MADD_MSUB\t(mips_isa_rev >= 1\t\t\t\\\n+\t\t\t\t && mips_isa_rev <= 5)\n \n /* Integer multiply-accumulate instructions should be generated.  */\n #define GENERATE_MADD_MSUB\t(TARGET_IMADD && !TARGET_MIPS16)\n \n /* ISA has floating-point madd and msub instructions 'd = a * b [+-] c'.  */\n #define ISA_HAS_FP_MADD4_MSUB4  ISA_HAS_FP4\n \n+/* ISA has floating-point MADDF and MSUBF instructions 'd = d [+-] a * b'.  */\n+#define ISA_HAS_FP_MADDF_MSUBF  (mips_isa_rev >= 6)\n+\n /* ISA has floating-point madd and msub instructions 'c = a * b [+-] c'.  */\n #define ISA_HAS_FP_MADD3_MSUB3  TARGET_LOONGSON_2EF\n \n@@ -985,10 +1011,19 @@ struct mips_cpu_info {\n \t\t\t\t       || ((TARGET_FLOAT64\t\t\\\n \t\t\t\t\t    || mips_isa_rev >= 2)\t\\\n \t\t\t\t\t   && (MODE) == DFmode)))\t\\\n+\t\t\t\t  || (((MODE) == SFmode\t\t\t\\\n+\t\t\t\t       || (MODE) == DFmode)\t\t\\\n+\t\t\t\t      && (mips_isa_rev >= 6))\t\t\\\n \t\t\t\t  || (TARGET_SB1\t\t\t\\\n \t\t\t\t      && (MODE) == V2SFmode))\t\t\\\n \t\t\t\t && !TARGET_MIPS16)\n \n+#define ISA_HAS_LWL_LWR\t\t(mips_isa_rev <= 5 && !TARGET_MIPS16)\n+\n+#define ISA_HAS_IEEE_754_LEGACY\t(mips_isa_rev <= 5)\n+\n+#define ISA_HAS_IEEE_754_2008\t(mips_isa_rev >= 2)\n+\n /* ISA has count leading zeroes/ones instruction (not implemented).  */\n #define ISA_HAS_CLZ_CLO\t\t(mips_isa_rev >= 1 && !TARGET_MIPS16)\n \n@@ -1046,6 +1081,9 @@ struct mips_cpu_info {\n \t\t\t\t  || mips_isa_rev >= 1)\t\t\t\\\n \t\t\t\t && !TARGET_MIPS16)\n \n+/* ISA has data prefetch with limited 9-bit displacement.  */\n+#define ISA_HAS_PREFETCH_9BIT\t(mips_isa_rev >= 6)\n+\n /* ISA has data indexed prefetch instructions.  This controls use of\n    'prefx', along with TARGET_HARD_FLOAT and TARGET_DOUBLE_FLOAT.\n    (prefx is a cop1x instruction, so can only be used if FP is\n@@ -2133,6 +2171,7 @@ enum reg_class\n #define SMALL_INT_UNSIGNED(X) SMALL_OPERAND_UNSIGNED (INTVAL (X))\n #define LUI_INT(X) LUI_OPERAND (INTVAL (X))\n #define UMIPS_12BIT_OFFSET_P(OFFSET) (IN_RANGE (OFFSET, -2048, 2047))\n+#define MIPS_9BIT_OFFSET_P(OFFSET) (IN_RANGE (OFFSET, -256, 255))\n \n /* The HI and LO registers can only be reloaded via the general\n    registers.  Condition code registers can only be loaded to the"}, {"sha": "bdcd694a894b43dfcd4dfefbbddd0282df4c7255", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 240, "deletions": 40, "changes": 280, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18", "patch": "@@ -67,6 +67,8 @@\n   xlr\n   xlp\n   p5600\n+  w32\n+  w64\n ])\n \n (define_c_enum \"unspec\" [\n@@ -768,6 +770,11 @@\n \t\t\t\t   && !TARGET_LOONGSON_2EF\n \t\t\t\t   && !TARGET_MIPS5900\")])\n \n+;; This mode iterator allows :FPCC to be used anywhere that an FP condition\n+;; is needed.\n+(define_mode_iterator FPCC [(CC \"!ISA_HAS_CCF\")\n+\t\t\t    (CCF \"ISA_HAS_CCF\")])\n+\n ;; 32-bit integer moves for which we provide move patterns.\n (define_mode_iterator IMOVE32\n   [SI\n@@ -857,7 +864,7 @@\n \n ;; This attribute gives the best constraint to use for registers of\n ;; a given mode.\n-(define_mode_attr reg [(SI \"d\") (DI \"d\") (CC \"z\")])\n+(define_mode_attr reg [(SI \"d\") (DI \"d\") (CC \"z\") (CCF \"f\")])\n \n ;; This attribute gives the format suffix for floating-point operations.\n (define_mode_attr fmt [(SF \"s\") (DF \"d\") (V2SF \"ps\")])\n@@ -897,6 +904,9 @@\n (define_mode_attr sqrt_condition\n   [(SF \"!ISA_MIPS1\") (DF \"!ISA_MIPS1\") (V2SF \"TARGET_SB1\")])\n \n+;; This attribute provides the correct mnemonic for each FP condition mode.\n+(define_mode_attr fpcmp [(CC \"c\") (CCF \"cmp\")])\n+\n ;; This code iterator allows signed and unsigned widening multiplications\n ;; to use the same template.\n (define_code_iterator any_extend [sign_extend zero_extend])\n@@ -919,7 +929,10 @@\n \n ;; This code iterator allows all native floating-point comparisons to be\n ;; generated from the same template.\n-(define_code_iterator fcond [unordered uneq unlt unle eq lt le])\n+(define_code_iterator fcond [unordered uneq unlt unle eq lt le\n+\t\t\t     (ordered \"ISA_HAS_CCF\")\n+\t\t\t     (ltgt \"ISA_HAS_CCF\")\n+\t\t\t     (ne \"ISA_HAS_CCF\")])\n \n ;; This code iterator is used for comparisons that can be implemented\n ;; by swapping the operands.\n@@ -992,7 +1005,10 @@\n \t\t\t (unle \"ule\")\n \t\t\t (eq \"eq\")\n \t\t\t (lt \"lt\")\n-\t\t\t (le \"le\")])\n+\t\t\t (le \"le\")\n+\t\t\t (ordered \"or\")\n+\t\t\t (ltgt \"ne\")\n+\t\t\t (ne \"une\")])\n \n ;; Similar, but for swapped conditions.\n (define_code_attr swapped_fcond [(ge \"le\")\n@@ -1006,6 +1022,10 @@\n \n ;; This is the inverse value of bbv.\n (define_code_attr bbinv [(eq \"1\") (ne \"0\")])\n+\n+;; The sel mnemonic to use depending on the condition test.\n+(define_code_attr sel [(eq \"seleqz\") (ne \"selnez\")])\n+(define_code_attr selinv [(eq \"selnez\") (ne \"seleqz\")])\n \f\n ;; .........................\n ;;\n@@ -1114,18 +1134,27 @@\n \t\t\t    [(match_operand:GPR 1 \"reg_or_0_operand\")\n \t\t\t     (match_operand:GPR 2 \"arith_operand\")])\n \t    (match_operand 3 \"const_0_operand\"))]\n-  \"ISA_HAS_COND_TRAP\"\n+  \"ISA_HAS_COND_TRAPI || ISA_HAS_COND_TRAP\"\n {\n   mips_expand_conditional_trap (operands[0]);\n   DONE;\n })\n \n+(define_insn \"*conditional_trap_reg<mode>\"\n+  [(trap_if (match_operator:GPR 0 \"trap_comparison_operator\"\n+\t\t\t\t[(match_operand:GPR 1 \"reg_or_0_operand\" \"dJ\")\n+\t\t\t\t (match_operand:GPR 2 \"reg_or_0_operand\" \"dJ\")])\n+\t    (const_int 0))]\n+  \"ISA_HAS_COND_TRAP && !ISA_HAS_COND_TRAPI\"\n+  \"t%C0\\t%z1,%2\"\n+  [(set_attr \"type\" \"trap\")])\n+\n (define_insn \"*conditional_trap<mode>\"\n   [(trap_if (match_operator:GPR 0 \"trap_comparison_operator\"\n \t\t\t\t[(match_operand:GPR 1 \"reg_or_0_operand\" \"dJ\")\n \t\t\t\t (match_operand:GPR 2 \"arith_operand\" \"dI\")])\n \t    (const_int 0))]\n-  \"ISA_HAS_COND_TRAP\"\n+  \"ISA_HAS_COND_TRAPI\"\n   \"t%C0\\t%z1,%2\"\n   [(set_attr \"type\" \"trap\")])\n \f\n@@ -1493,13 +1522,13 @@\n   [(set (match_operand:GPR 0 \"register_operand\")\n \t(mult:GPR (match_operand:GPR 1 \"register_operand\")\n \t\t  (match_operand:GPR 2 \"register_operand\")))]\n-  \"ISA_HAS_<D>MULT\"\n+  \"ISA_HAS_<D>MULT || ISA_HAS_R6<D>MUL\"\n {\n   rtx lo;\n \n-  if (TARGET_LOONGSON_2EF || TARGET_LOONGSON_3A)\n-    emit_insn (gen_mul<mode>3_mul3_loongson (operands[0], operands[1],\n-                                             operands[2]));\n+  if (TARGET_LOONGSON_2EF || TARGET_LOONGSON_3A || ISA_HAS_R6<D>MUL)\n+    emit_insn (gen_mul<mode>3_mul3_nohilo (operands[0], operands[1],\n+\t\t\t\t\t   operands[2]));\n   else if (ISA_HAS_<D>MUL3)\n     emit_insn (gen_mul<mode>3_mul3 (operands[0], operands[1], operands[2]));\n   else if (TARGET_MIPS16)\n@@ -1516,16 +1545,18 @@\n   DONE;\n })\n \n-(define_insn \"mul<mode>3_mul3_loongson\"\n+(define_insn \"mul<mode>3_mul3_nohilo\"\n   [(set (match_operand:GPR 0 \"register_operand\" \"=d\")\n         (mult:GPR (match_operand:GPR 1 \"register_operand\" \"d\")\n                   (match_operand:GPR 2 \"register_operand\" \"d\")))]\n-  \"TARGET_LOONGSON_2EF || TARGET_LOONGSON_3A\"\n+  \"TARGET_LOONGSON_2EF || TARGET_LOONGSON_3A || ISA_HAS_R6<D>MUL\"\n {\n   if (TARGET_LOONGSON_2EF)\n     return \"<d>multu.g\\t%0,%1,%2\";\n-  else\n+  else if (TARGET_LOONGSON_3A)\n     return \"gs<d>multu\\t%0,%1,%2\";\n+  else\n+    return \"<d>mul\\t%0,%1,%2\";\n }\n   [(set_attr \"type\" \"imul3nc\")\n    (set_attr \"mode\" \"<MODE>\")])\n@@ -1961,6 +1992,24 @@\n   DONE;\n })\n \n+(define_expand \"<u>mulsidi3_32bit_r6\"\n+  [(set (match_operand:DI 0 \"register_operand\")\n+\t(mult:DI (any_extend:DI (match_operand:SI 1 \"register_operand\"))\n+\t\t (any_extend:DI (match_operand:SI 2 \"register_operand\"))))]\n+  \"!TARGET_64BIT && ISA_HAS_R6MUL\"\n+{\n+  rtx dest = gen_reg_rtx (DImode);\n+  rtx low = mips_subword (dest, 0);\n+  rtx high = mips_subword (dest, 1);\n+\n+  emit_insn (gen_mulsi3_mul3_nohilo (low, operands[1], operands[2]));\n+  emit_insn (gen_<su>mulsi3_highpart_r6 (high, operands[1], operands[2]));\n+\n+  emit_move_insn (mips_subword (operands[0], 0), low);\n+  emit_move_insn (mips_subword (operands[0], 1), high);\n+  DONE;\n+})\n+\n (define_expand \"<u>mulsidi3_32bit_mips16\"\n   [(set (match_operand:DI 0 \"register_operand\")\n \t(mult:DI (any_extend:DI (match_operand:SI 1 \"register_operand\"))\n@@ -1982,7 +2031,7 @@\n   [(set (match_operand:DI 0 \"muldiv_target_operand\" \"=ka\")\n \t(mult:DI (any_extend:DI (match_operand:SI 1 \"register_operand\" \"d\"))\n \t\t (any_extend:DI (match_operand:SI 2 \"register_operand\" \"d\"))))]\n-  \"!TARGET_64BIT && (!TARGET_FIX_R4000 || ISA_HAS_DSP)\"\n+  \"!TARGET_64BIT && (!TARGET_FIX_R4000 || ISA_HAS_DSP) && ISA_HAS_MULT\"\n {\n   if (ISA_HAS_DSP_MULT)\n     return \"mult<u>\\t%q0,%1,%2\";\n@@ -1997,7 +2046,7 @@\n \t(mult:DI (any_extend:DI (match_operand:SI 1 \"register_operand\" \"d\"))\n \t\t (any_extend:DI (match_operand:SI 2 \"register_operand\" \"d\"))))\n    (clobber (match_scratch:DI 3 \"=x\"))]\n-  \"!TARGET_64BIT && TARGET_FIX_R4000 && !ISA_HAS_DSP\"\n+  \"!TARGET_64BIT && TARGET_FIX_R4000 && !ISA_HAS_DSP && ISA_HAS_MULT\"\n   \"mult<u>\\t%1,%2\\;mflo\\t%L0\\;mfhi\\t%M0\"\n   [(set_attr \"type\" \"imul\")\n    (set_attr \"mode\" \"SI\")\n@@ -2009,7 +2058,8 @@\n \t\t (any_extend:DI (match_operand:SI 2 \"register_operand\" \"d\"))))\n    (clobber (match_scratch:TI 3 \"=x\"))\n    (clobber (match_scratch:DI 4 \"=d\"))]\n-  \"TARGET_64BIT && !TARGET_FIX_R4000 && !ISA_HAS_DMUL3 && !TARGET_MIPS16\"\n+  \"TARGET_64BIT && !TARGET_FIX_R4000 && !ISA_HAS_DMUL3\n+   && !TARGET_MIPS16 && ISA_HAS_MULT\"\n   \"#\"\n   \"&& reload_completed\"\n   [(const_int 0)]\n@@ -2092,6 +2142,15 @@\n   [(set_attr \"type\" \"imul3\")\n    (set_attr \"mode\" \"DI\")])\n \n+(define_insn \"mulsidi3_64bit_r6dmul\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n+\t(mult:DI (sign_extend:DI (match_operand:SI 1 \"register_operand\" \"d\"))\n+\t\t (sign_extend:DI (match_operand:SI 2 \"register_operand\" \"d\"))))]\n+  \"ISA_HAS_R6DMUL\"\n+  \"dmul\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"imul3nc\")\n+   (set_attr \"mode\" \"DI\")])\n+\n ;; Widening multiply with negation.\n (define_insn \"*muls<u>_di\"\n   [(set (match_operand:DI 0 \"muldiv_target_operand\" \"=x\")\n@@ -2149,12 +2208,27 @@\n   else if (TARGET_MIPS16)\n     emit_insn (gen_<su>mulsi3_highpart_split (operands[0], operands[1],\n \t\t\t\t\t      operands[2]));\n+  else if (ISA_HAS_R6MUL)\n+    emit_insn (gen_<su>mulsi3_highpart_r6 (operands[0], operands[1],\n+\t\t\t\t\t   operands[2]));\n   else\n     emit_insn (gen_<su>mulsi3_highpart_internal (operands[0], operands[1],\n \t\t\t\t\t         operands[2]));\n   DONE;\n })\n \n+(define_insn \"<su>mulsi3_highpart_r6\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n+\t(truncate:SI\n+\t (lshiftrt:DI\n+\t  (mult:DI (any_extend:DI (match_operand:SI 1 \"register_operand\" \"d\"))\n+\t\t   (any_extend:DI (match_operand:SI 2 \"register_operand\" \"d\")))\n+\t  (const_int 32))))]\n+  \"ISA_HAS_R6MUL\"\n+  \"muh<u>\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"imul3nc\")\n+   (set_attr \"mode\" \"SI\")])\n+\n (define_insn_and_split \"<su>mulsi3_highpart_internal\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n \t(truncate:SI\n@@ -2163,7 +2237,7 @@\n \t\t   (any_extend:DI (match_operand:SI 2 \"register_operand\" \"d\")))\n \t  (const_int 32))))\n    (clobber (match_scratch:SI 3 \"=l\"))]\n-  \"!ISA_HAS_MULHI && !TARGET_MIPS16\"\n+  \"ISA_HAS_MULT && !ISA_HAS_MULHI && !TARGET_MIPS16\"\n   { return TARGET_FIX_R4000 ? \"mult<u>\\t%1,%2\\n\\tmfhi\\t%0\" : \"#\"; }\n   \"&& reload_completed && !TARGET_FIX_R4000\"\n   [(const_int 0)]\n@@ -2241,17 +2315,34 @@\n \t  (mult:TI (any_extend:TI (match_operand:DI 1 \"register_operand\"))\n \t\t   (any_extend:TI (match_operand:DI 2 \"register_operand\")))\n \t  (const_int 64))))]\n-  \"ISA_HAS_DMULT && !(<CODE> == ZERO_EXTEND && TARGET_FIX_VR4120)\"\n+  \"ISA_HAS_R6DMUL\n+   || (ISA_HAS_DMULT\n+       && !(<CODE> == ZERO_EXTEND && TARGET_FIX_VR4120))\"\n {\n   if (TARGET_MIPS16)\n     emit_insn (gen_<su>muldi3_highpart_split (operands[0], operands[1],\n \t\t\t\t\t      operands[2]));\n+  else if (ISA_HAS_R6DMUL)\n+    emit_insn (gen_<su>muldi3_highpart_r6 (operands[0], operands[1],\n+\t\t\t\t\t   operands[2]));\n   else\n     emit_insn (gen_<su>muldi3_highpart_internal (operands[0], operands[1],\n \t\t\t\t\t\t operands[2]));\n   DONE;\n })\n \n+(define_insn \"<su>muldi3_highpart_r6\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n+\t(truncate:DI\n+\t (lshiftrt:TI\n+\t  (mult:TI (any_extend:TI (match_operand:DI 1 \"register_operand\" \"d\"))\n+\t\t   (any_extend:TI (match_operand:DI 2 \"register_operand\" \"d\")))\n+\t  (const_int 64))))]\n+  \"ISA_HAS_R6DMUL\"\n+  \"dmuh<u>\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"imul3nc\")\n+   (set_attr \"mode\" \"DI\")])\n+\n (define_insn_and_split \"<su>muldi3_highpart_internal\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n \t(truncate:DI\n@@ -2390,6 +2481,16 @@\n    (set_attr \"accum_in\"\t\"3\")\n    (set_attr \"mode\" \"<UNITMODE>\")])\n \n+(define_insn \"fma<mode>4\"\n+  [(set (match_operand:ANYF 0 \"register_operand\" \"=f\")\n+\t(fma:ANYF (match_operand:ANYF 1 \"register_operand\" \"f\")\n+\t\t  (match_operand:ANYF 2 \"register_operand\" \"f\")\n+\t\t  (match_operand:ANYF 3 \"register_operand\" \"0\")))]\n+  \"ISA_HAS_FP_MADDF_MSUBF\"\n+  \"maddf.<fmt>\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"fmadd\")\n+   (set_attr \"mode\" \"<UNITMODE>\")])\n+\n (define_insn \"*madd3<mode>\"\n   [(set (match_operand:ANYF 0 \"register_operand\" \"=f\")\n \t(plus:ANYF (mult:ANYF (match_operand:ANYF 1 \"register_operand\" \"f\")\n@@ -2773,6 +2874,40 @@\n   { return mips_output_division (\"<GPR:d>div<u>\\t%.,%1,%2\", operands); }\n   [(set_attr \"type\" \"idiv\")\n    (set_attr \"mode\" \"<GPR:MODE>\")])\n+\n+;; Integer division and modulus.\n+\n+(define_insn \"<u>div<mode>3\"\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=&d\")\n+\t(any_div:GPR (match_operand:GPR 1 \"register_operand\" \"d\")\n+\t\t     (match_operand:GPR 2 \"register_operand\" \"d\")))]\n+  \"TARGET_LOONGSON_2EF || TARGET_LOONGSON_3A || ISA_HAS_R6<D>DIV\"\n+  {\n+    if (TARGET_LOONGSON_2EF)\n+      return mips_output_division (\"<d>div<u>.g\\t%0,%1,%2\", operands);\n+    else if (TARGET_LOONGSON_3A)\n+      return mips_output_division (\"gs<d>div<u>\\t%0,%1,%2\", operands);\n+    else\n+      return mips_output_division (\"<d>div<u>\\t%0,%1,%2\", operands);\n+  }\n+  [(set_attr \"type\" \"idiv3\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"<u>mod<mode>3\"\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=&d\")\n+\t(any_mod:GPR (match_operand:GPR 1 \"register_operand\" \"d\")\n+\t\t     (match_operand:GPR 2 \"register_operand\" \"d\")))]\n+  \"TARGET_LOONGSON_2EF || TARGET_LOONGSON_3A || ISA_HAS_R6<D>DIV\"\n+  {\n+    if (TARGET_LOONGSON_2EF)\n+      return mips_output_division (\"<d>mod<u>.g\\t%0,%1,%2\", operands);\n+    else if (TARGET_LOONGSON_3A)\n+      return mips_output_division (\"gs<d>mod<u>\\t%0,%1,%2\", operands);\n+    else\n+      return mips_output_division (\"<d>mod<u>\\t%0,%1,%2\", operands);\n+  }\n+  [(set_attr \"type\" \"idiv3\")\n+   (set_attr \"mode\" \"<MODE>\")])\n \f\n ;;\n ;;  ....................\n@@ -3918,7 +4053,7 @@\n \t(sign_extract:GPR (match_operand:BLK 1 \"memory_operand\")\n \t\t\t  (match_operand 2 \"const_int_operand\")\n \t\t\t  (match_operand 3 \"const_int_operand\")))]\n-  \"!TARGET_MIPS16\"\n+  \"ISA_HAS_LWL_LWR\"\n {\n   if (mips_expand_ext_as_unaligned_load (operands[0], operands[1],\n \t\t\t\t\t INTVAL (operands[2]),\n@@ -3955,7 +4090,7 @@\n \t(zero_extract:GPR (match_operand:BLK 1 \"memory_operand\")\n \t\t\t  (match_operand 2 \"const_int_operand\")\n \t\t\t  (match_operand 3 \"const_int_operand\")))]\n-  \"!TARGET_MIPS16\"\n+  \"ISA_HAS_LWL_LWR\"\n {\n   if (mips_expand_ext_as_unaligned_load (operands[0], operands[1],\n \t\t\t\t\t INTVAL (operands[2]),\n@@ -4006,7 +4141,7 @@\n \t\t\t  (match_operand 1 \"const_int_operand\")\n \t\t\t  (match_operand 2 \"const_int_operand\"))\n \t(match_operand:GPR 3 \"reg_or_0_operand\"))]\n-  \"!TARGET_MIPS16\"\n+  \"ISA_HAS_LWL_LWR\"\n {\n   if (mips_expand_ins_as_unaligned_store (operands[0], operands[3],\n \t\t\t\t\t  INTVAL (operands[1]),\n@@ -4762,6 +4897,13 @@\n     DONE;\n })\n \n+(define_insn \"movccf\"\n+  [(set (match_operand:CCF 0 \"nonimmediate_operand\" \"=f,f,m\")\n+\t(match_operand:CCF 1 \"nonimmediate_operand\" \"f,m,f\"))]\n+  \"ISA_HAS_CCF\"\n+  { return mips_output_move (operands[0], operands[1]); }\n+  [(set_attr \"move_type\" \"fmove,fpload,fpstore\")])\n+\n (define_insn \"*movsf_hardfloat\"\n   [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=f,f,f,m,m,*f,*d,*d,*d,*m\")\n \t(match_operand:SF 1 \"move_operand\" \"f,G,m,f,G,*d,*f,*G*d,*m,*d\"))]\n@@ -5280,7 +5422,7 @@\n (define_insn \"mips_cache\"\n   [(set (mem:BLK (scratch))\n \t(unspec:BLK [(match_operand:SI 0 \"const_int_operand\")\n-\t\t     (match_operand:QI 1 \"address_operand\" \"p\")]\n+\t\t     (match_operand:QI 1 \"address_operand\" \"ZD\")]\n \t\t    UNSPEC_MIPS_CACHE))]\n   \"ISA_HAS_CACHE\"\n   \"cache\\t%X0,%a1\")\n@@ -5557,11 +5699,11 @@\n \n ;; Conditional branches on floating-point equality tests.\n \n-(define_insn \"*branch_fp\"\n+(define_insn \"*branch_fp_<mode>\"\n   [(set (pc)\n         (if_then_else\n          (match_operator 1 \"equality_operator\"\n-                         [(match_operand:CC 2 \"register_operand\" \"z\")\n+                         [(match_operand:FPCC 2 \"register_operand\" \"<reg>\")\n \t\t\t  (const_int 0)])\n          (label_ref (match_operand 0 \"\" \"\"))\n          (pc)))]\n@@ -5573,11 +5715,11 @@\n }\n   [(set_attr \"type\" \"branch\")])\n \n-(define_insn \"*branch_fp_inverted\"\n+(define_insn \"*branch_fp_inverted_<mode>\"\n   [(set (pc)\n         (if_then_else\n          (match_operator 1 \"equality_operator\"\n-                         [(match_operand:CC 2 \"register_operand\" \"z\")\n+                         [(match_operand:FPCC 2 \"register_operand\" \"<reg>\")\n \t\t\t  (const_int 0)])\n          (pc)\n          (label_ref (match_operand 0 \"\" \"\"))))]\n@@ -5921,21 +6063,21 @@\n ;;\n ;;  ....................\n \n-(define_insn \"s<code>_<mode>\"\n-  [(set (match_operand:CC 0 \"register_operand\" \"=z\")\n-\t(fcond:CC (match_operand:SCALARF 1 \"register_operand\" \"f\")\n-\t\t  (match_operand:SCALARF 2 \"register_operand\" \"f\")))]\n+(define_insn \"s<code>_<SCALARF:mode>_using_<FPCC:mode>\"\n+  [(set (match_operand:FPCC 0 \"register_operand\" \"=<reg>\")\n+\t(fcond:FPCC (match_operand:SCALARF 1 \"register_operand\" \"f\")\n+\t\t    (match_operand:SCALARF 2 \"register_operand\" \"f\")))]\n   \"\"\n-  \"c.<fcond>.<fmt>\\t%Z0%1,%2\"\n+  \"<fpcmp>.<fcond>.<fmt>\\t%Z0%1,%2\"\n   [(set_attr \"type\" \"fcmp\")\n    (set_attr \"mode\" \"FPSW\")])\n \n-(define_insn \"s<code>_<mode>\"\n-  [(set (match_operand:CC 0 \"register_operand\" \"=z\")\n-\t(swapped_fcond:CC (match_operand:SCALARF 1 \"register_operand\" \"f\")\n-\t\t          (match_operand:SCALARF 2 \"register_operand\" \"f\")))]\n+(define_insn \"s<code>_<SCALARF:mode>_using_<FPCC:mode>\"\n+  [(set (match_operand:FPCC 0 \"register_operand\" \"=<reg>\")\n+\t(swapped_fcond:FPCC (match_operand:SCALARF 1 \"register_operand\" \"f\")\n+\t\t\t    (match_operand:SCALARF 2 \"register_operand\" \"f\")))]\n   \"\"\n-  \"c.<swapped_fcond>.<fmt>\\t%Z0%2,%1\"\n+  \"<fpcmp>.<swapped_fcond>.<fmt>\\t%Z0%2,%1\"\n   [(set_attr \"type\" \"fcmp\")\n    (set_attr \"mode\" \"FPSW\")])\n \f\n@@ -6953,6 +7095,41 @@\n   [(set_attr \"type\" \"condmove\")\n    (set_attr \"mode\" \"<SCALARF:MODE>\")])\n \n+(define_insn \"*sel<code><GPR:mode>_using_<GPR2:mode>\"\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=d,d\")\n+\t(if_then_else:GPR\n+\t (equality_op:GPR2 (match_operand:GPR2 1 \"register_operand\" \"d,d\")\n+\t\t\t   (const_int 0))\n+\t (match_operand:GPR 2 \"reg_or_0_operand\" \"d,J\")\n+\t (match_operand:GPR 3 \"reg_or_0_operand\" \"J,d\")))]\n+  \"ISA_HAS_SEL\n+   && (register_operand (operands[2], <GPR:MODE>mode)\n+       != register_operand (operands[3], <GPR:MODE>mode))\"\n+  \"@\n+   <sel>\\t%0,%2,%1\n+   <selinv>\\t%0,%3,%1\"\n+  [(set_attr \"type\" \"condmove\")\n+   (set_attr \"mode\" \"<GPR:MODE>\")])\n+\n+;; sel.fmt copies the 3rd argument when the 1st is non-zero and the 2nd\n+;; argument if the 1st is zero.  This means operand 2 and 3 are\n+;; inverted in the instruction.\n+\n+(define_insn \"*sel<mode>\"\n+  [(set (match_operand:SCALARF 0 \"register_operand\" \"=f,f,f\")\n+\t(if_then_else:SCALARF\n+\t (ne:CCF (match_operand:CCF 1 \"register_operand\" \"0,f,f\")\n+\t\t (const_int 0))\n+\t (match_operand:SCALARF 2 \"reg_or_0_operand\" \"f,G,f\")\n+\t (match_operand:SCALARF 3 \"reg_or_0_operand\" \"f,f,G\")))]\n+  \"ISA_HAS_SEL && ISA_HAS_CCF\"\n+  \"@\n+   sel.<fmt>\\t%0,%3,%2\n+   seleqz.<fmt>\\t%0,%3,%1\n+   selnez.<fmt>\\t%0,%2,%1\"\n+  [(set_attr \"type\" \"condmove\")\n+   (set_attr \"mode\" \"<SCALARF:MODE>\")])\n+\n ;; These are the main define_expand's used to make conditional moves.\n \n (define_expand \"mov<mode>cc\"\n@@ -6961,8 +7138,11 @@\n \t(if_then_else:GPR (match_dup 5)\n \t\t\t  (match_operand:GPR 2 \"reg_or_0_operand\")\n \t\t\t  (match_operand:GPR 3 \"reg_or_0_operand\")))]\n-  \"ISA_HAS_CONDMOVE\"\n+  \"ISA_HAS_CONDMOVE || ISA_HAS_SEL\"\n {\n+  if (ISA_HAS_SEL && !INTEGRAL_MODE_P (GET_MODE (XEXP (operands[1], 0))))\n+    FAIL;\n+\n   mips_expand_conditional_move (operands);\n   DONE;\n })\n@@ -6971,10 +7151,25 @@\n   [(set (match_dup 4) (match_operand 1 \"comparison_operator\"))\n    (set (match_operand:SCALARF 0 \"register_operand\")\n \t(if_then_else:SCALARF (match_dup 5)\n-\t\t\t      (match_operand:SCALARF 2 \"register_operand\")\n-\t\t\t      (match_operand:SCALARF 3 \"register_operand\")))]\n-  \"ISA_HAS_FP_CONDMOVE\"\n+\t\t\t      (match_operand:SCALARF 2 \"reg_or_0_operand\")\n+\t\t\t      (match_operand:SCALARF 3 \"reg_or_0_operand\")))]\n+  \"ISA_HAS_FP_CONDMOVE\n+   || (ISA_HAS_SEL && ISA_HAS_CCF)\"\n {\n+  if (ISA_HAS_SEL && !FLOAT_MODE_P (GET_MODE (XEXP (operands[1], 0))))\n+    FAIL;\n+\n+  /* Workaround an LRA bug which means that tied operands in the sel.fmt\n+     pattern lead to the double precision destination of sel.d getting\n+     reloaded with the full register file usable and the restrictions on\n+     whether the CCFmode input can be used in odd-numbered single-precision\n+     registers are ignored.  For consistency reasons the CCF mode values\n+     must be guaranteed to only exist in the even-registers because of\n+     the unusual duality between single and double precision values.  */\n+  if (ISA_HAS_SEL && <MODE>mode == DFmode\n+      && (!TARGET_ODD_SPREG || TARGET_FLOATXX))\n+    FAIL;\n+\n   mips_expand_conditional_move (operands);\n   DONE;\n })\n@@ -7089,7 +7284,12 @@\n   [(set (reg:P TLS_GET_TP_REGNUM)\n \t(unspec:P [(const_int 0)] UNSPEC_TLS_GET_TP))]\n   \"HAVE_AS_TLS && !TARGET_MIPS16\"\n-  \".set\\tpush\\;.set\\tmips32r2\\t\\;rdhwr\\t$3,$29\\;.set\\tpop\"\n+  {\n+    if (mips_isa_rev >= 2)\n+      return \"rdhwr\\t$3,$29\";\n+\n+    return \".set\\tpush\\;.set\\tmips32r2\\t\\;rdhwr\\t$3,$29\\;.set\\tpop\";\n+  }\n   [(set_attr \"type\" \"unknown\")\n    ; Since rdhwr always generates a trap for now, putting it in a delay\n    ; slot would make the kernel's emulation of it much slower."}, {"sha": "ed41e0f837fb7edcf47b0ae6d6fe98a8a57531a0", "filename": "gcc/config/mips/netbsd.h", "status": "modified", "additions": 9, "deletions": 16, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18/gcc%2Fconfig%2Fmips%2Fnetbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18/gcc%2Fconfig%2Fmips%2Fnetbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fnetbsd.h?ref=82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18", "patch": "@@ -84,21 +84,13 @@ along with GCC; see the file COPYING3.  If not see\n \tbuiltin_define (\"__mips=3\");\t\t\t\t\\\n       else if (ISA_MIPS4)\t\t\t\t\t\\\n \tbuiltin_define (\"__mips=4\");\t\t\t\t\\\n-      else if (ISA_MIPS32)\t\t\t\t\t\\\n-\t{\t\t\t\t\t\t\t\\\n-\t  builtin_define (\"__mips=32\");\t\t\t\t\\\n-\t  builtin_define (\"__mips_isa_rev=1\");\t\t\t\\\n-\t}\t\t\t\t\t\t\t\\\n-      else if (ISA_MIPS32R2)\t\t\t\t\t\\\n-\t{\t\t\t\t\t\t\t\\\n-\t  builtin_define (\"__mips=32\");\t\t\t\t\\\n-\t  builtin_define (\"__mips_isa_rev=2\");\t\t\t\\\n-\t}\t\t\t\t\t\t\t\\\n-      else if (ISA_MIPS64)\t\t\t\t\t\\\n-\t{\t\t\t\t\t\t\t\\\n-\t  builtin_define (\"__mips=64\");\t\t\t\t\\\n-\t  builtin_define (\"__mips_isa_rev=1\");\t\t\t\\\n-\t}\t\t\t\t\t\t\t\\\n+      else if (mips_isa >= 32 && mips_isa < 64)\t\t\t\\\n+\tbuiltin_define (\"__mips=32\");\t\t\t\t\\\n+      else if (mips_isa >= 64)\t\t\t\t\t\\\n+\tbuiltin_define (\"__mips=64\");\t\t\t\t\\\n+      if (mips_isa_rev > 0)\t\t\t\t\t\\\n+        builtin_define_with_int_value (\"__mips_isa_rev\",\t\\\n+                                       mips_isa_rev);\t\t\\\n \t\t\t\t\t\t\t\t\\\n       if (TARGET_HARD_FLOAT)\t\t\t\t\t\\\n \tbuiltin_define (\"__mips_hard_float\");\t\t\t\\\n@@ -141,7 +133,8 @@ along with GCC; see the file COPYING3.  If not see\n   \"%{EL:-m elf32lmip} \\\n    %{EB:-m elf32bmip} \\\n    %(endian_spec) \\\n-   %{G*} %{mips1} %{mips2} %{mips3} %{mips4} %{mips32} %{mips32r2} %{mips64} \\\n+   %{G*} %{mips1} %{mips2} %{mips3} %{mips4} %{mips32} %{mips32r2} \\\n+   %{mips32r6} %{mips64} %{mips64r6} \\\n    %(netbsd_link_spec)\"\n \n #define NETBSD_ENTRY_POINT \"__start\""}, {"sha": "8455745233e450e32cc6f7ba09d4287a728538f6", "filename": "gcc/config/mips/t-isa3264", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18/gcc%2Fconfig%2Fmips%2Ft-isa3264", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18/gcc%2Fconfig%2Fmips%2Ft-isa3264", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Ft-isa3264?ref=82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18", "patch": "@@ -22,10 +22,10 @@ ifneq ($(filter MIPS_ABI_DEFAULT=ABI_EABI,$(tm_defines)),)\n MULTILIB_OPTIONS = msoft-float EL/EB mips32/mips32r2/mips64/mips64r2\n MULTILIB_DIRNAMES = soft-float el eb mips32 mips32r2 mips64 mips64r2\n else\n-MULTILIB_OPTIONS = msoft-float/mfp64 EL/EB mips32/mips32r2/mips64/mips64r2\n-MULTILIB_DIRNAMES = soft-float fp64 el eb mips32 mips32r2 mips64 mips64r2\n+MULTILIB_OPTIONS = msoft-float/mfp64 EL/EB mips32/mips32r2/mips32r6/mips64/mips64r2/mips64r6\n+MULTILIB_DIRNAMES = soft-float fp64 el eb mips32 mips32r2 mips32r6 mips64 mips64r2 mips64r6\n ifneq ($(filter MIPS_ISA_DEFAULT=33,$(tm_defines)),)\n-MULTILIB_EXCLUSIONS = mips32/mfp64 mips64/mfp64 mips64r2/mfp64\n+MULTILIB_EXCLUSIONS = mips32/mfp64 mips64/mfp64 mips64r2/mfp64 mips32r6/mfp64 mips64r6/mfp64\n else\n MULTILIB_EXCLUSIONS = !mips32r2/mfp64\n endif"}, {"sha": "e37c777e89562b54a4b64d4c78111a75ee6f3660", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18", "patch": "@@ -785,7 +785,7 @@ Objective-C and Objective-C++ Dialects}.\n @emph{MIPS Options}\n @gccoptlist{-EL  -EB  -march=@var{arch}  -mtune=@var{arch} @gol\n -mips1  -mips2  -mips3  -mips4  -mips32  -mips32r2  -mips32r3  -mips32r5 @gol\n--mips64  -mips64r2  -mips64r3  -mips64r5 @gol\n+-mips32r6  -mips64  -mips64r2  -mips64r3  -mips64r5  -mips64r6 @gol\n -mips16  -mno-mips16  -mflip-mips16 @gol\n -minterlink-compressed -mno-interlink-compressed @gol\n -minterlink-mips16  -mno-interlink-mips16 @gol\n@@ -17671,8 +17671,9 @@ Generate code that runs on @var{arch}, which can be the name of a\n generic MIPS ISA, or the name of a particular processor.\n The ISA names are:\n @samp{mips1}, @samp{mips2}, @samp{mips3}, @samp{mips4},\n-@samp{mips32}, @samp{mips32r2}, @samp{mips32r3}, @samp{mips32r5}, \n-@samp{mips64}, @samp{mips64r2}, @samp{mips64r3} and @samp{mips64r5}.\n+@samp{mips32}, @samp{mips32r2}, @samp{mips32r3}, @samp{mips32r5},\n+@samp{mips32r6}, @samp{mips64}, @samp{mips64r2}, @samp{mips64r3},\n+@samp{mips64r5} and @samp{mips64r6}.\n The processor names are:\n @samp{4kc}, @samp{4km}, @samp{4kp}, @samp{4ksc},\n @samp{4kec}, @samp{4kem}, @samp{4kep}, @samp{4ksd},\n@@ -17779,6 +17780,10 @@ Equivalent to @option{-march=mips32r3}.\n @opindex mips32r5\n Equivalent to @option{-march=mips32r5}.\n \n+@item -mips32r6\n+@opindex mips32r6\n+Equivalent to @option{-march=mips32r6}.\n+\n @item -mips64\n @opindex mips64\n Equivalent to @option{-march=mips64}.\n@@ -17795,6 +17800,10 @@ Equivalent to @option{-march=mips64r3}.\n @opindex mips64r5\n Equivalent to @option{-march=mips64r5}.\n \n+@item -mips64r6\n+@opindex mips64r6\n+Equivalent to @option{-march=mips64r6}.\n+\n @item -mips16\n @itemx -mno-mips16\n @opindex mips16"}, {"sha": "7f0426c0bff4d33e61ea8f52a13f642175cb42ac", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18", "patch": "@@ -2994,10 +2994,8 @@ operands can be used for microMIPS instructions such as @code{ll} and\n equivalent to @code{R}.\n \n @item ZD\n-When compiling microMIPS code, this constraint matches an address operand\n-that is formed from a base register and a 12-bit offset.  These operands\n-can be used for microMIPS instructions such as @code{prefetch}.  When\n-not compiling for microMIPS code, @code{ZD} is equivalent to @code{p}.\n+An address suitable for a @code{prefetch} instruction, or for any other\n+instruction with the same addressing mode as @code{prefetch}.\n @end table\n \n @item Motorola 680x0---@file{config/m68k/constraints.md}"}, {"sha": "8d2f41ca05fd7076a3ad5835421d6d14e12964aa", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18", "patch": "@@ -1,3 +1,31 @@\n+2014-12-19  Matthew Fortune  <matthew.fortune@imgtec.com>\n+\t    Steve Ellcey  <sellcey@imgtec.com>\n+\n+\t* gcc.dg/torture/mips-hilo-2.c: Unconditionally pass for R6 onwards.\n+\t* gcc.dg/torture/pr19683-1.c: Likewise.\n+\t* gcc.target/mips/branch-cost-2.c: Require MOVN.\n+\t* gcc.target/mips/movcc-1.c: Likewise.\n+\t* gcc.target/mips/movcc-2.c: Likewise.\n+\t* gcc.target/mips/movcc-3.c: Likewise.\n+\t* gcc.target/mips/call-saved-4.c: Require LDC.\n+\t* gcc.target/mips/dmult-1.c: Require R5 or earlier.\n+\t* gcc.target/mips/fpcmp-1.c: Likewise.\n+\t* gcc.target/mips/fpcmp-2.c: Likewise.\n+\t* gcc.target/mips/neg-abs-2.c: Likewise.\n+\t* gcc.target/mips/timode-1.c: Likewise.\n+\t* gcc.target/mips/unaligned-1.c: Likewise.\n+\t* gcc.target/mips/madd-3.c: Require MADD.\n+\t* gcc.target/mips/madd-9.c: Likewise.\n+\t* gcc.target/mips/maddu-3.c: Likewise.\n+\t* gcc.target/mips/msub-3.c: Likewise.\n+\t* gcc.target/mips/msubu-3.c: Likewise.\n+\t* gcc.target/mips/mult-1.c: Require INS and not DMUL.\n+\t* gcc.target/mips/mips-ps-type-2.c: Require MADD.PS.\n+\t* gcc.target/mips/mips.exp (mips_option_groups): Add ins, dmul, ldc,\n+\tmovn, madd, maddps.\n+\t(mips-dg-options): INS available from R2.  LDC available from MIPS II,\n+\tDMUL is present in octeon.  Describe all features removed from R6.\n+\n 2014-12-19  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/64209"}, {"sha": "78f7710d67bed114ea291ddfaac41f7aa57d6ba0", "filename": "gcc/testsuite/gcc.dg/torture/mips-hilo-2.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fmips-hilo-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fmips-hilo-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fmips-hilo-2.c?ref=82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18", "patch": "@@ -5,6 +5,7 @@\n extern void abort (void);\n extern void exit (int);\n \n+#if __mips_isa_rev <= 5\n unsigned int g;\n \n unsigned __attribute__ ((nomips16)) long long f (unsigned int x)\n@@ -15,13 +16,16 @@ unsigned __attribute__ ((nomips16)) long long f (unsigned int x)\n   asm (\"mflo\\t%0\" : \"=r\" (g) : \"l\" (u.parts[1]));\n   return u.ll;\n }\n+#endif\n \n int __attribute__ ((nomips16)) main ()\n {\n+#if __mips_isa_rev <= 5\n   union { unsigned long long ll; unsigned int parts[2]; } u;\n \n   u.ll = f (0x12345678);\n   if (g != u.parts[1])\n     abort ();\n+#endif\n   exit (0);\n }"}, {"sha": "aa7205f7c6f6261b00571ede1ce2109f287d451b", "filename": "gcc/testsuite/gcc.dg/torture/pr19683-1.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr19683-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr19683-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr19683-1.c?ref=82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18", "patch": "@@ -14,6 +14,7 @@ extern void exit (int);\n #define IN(X) unsigned int x##X = ptr[0]\n #define OUT(X) ptr[0] = x##X\n \n+#if __mips_isa_rev <= 5\n union u { unsigned long long ll; unsigned int i[2]; };\n \n unsigned int __attribute__ ((nomips16))\n@@ -28,15 +29,18 @@ foo (volatile unsigned int *ptr)\n   asm (\"#\" : \"=l\" (result) : \"l\" (u.i[1]));\n   return result;\n }\n+#endif\n \n int __attribute__ ((nomips16))\n main (void)\n {\n+#if __mips_isa_rev <= 5\n   unsigned int array[] = { 1000 * 1000 * 1000 };\n   union u u;\n \n   u.ll = (unsigned long long) array[0] * array[0];\n   if (foo (array) != u.i[1])\n     abort ();\n+#endif\n   exit (0);\n }"}, {"sha": "5eddabf8371618e932b911d57d5e2ebfae16d3a3", "filename": "gcc/testsuite/gcc.target/mips/args-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fargs-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fargs-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fargs-3.c?ref=82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18", "patch": "@@ -24,7 +24,7 @@ int foo (float inf, int64 in64, int32 in32)\n     abort ();\n #endif\n \n-#if (__mips == 4 || __mips == 32 || __mips == 64) && !defined (__mips16)\n+#if (__mips == 4 || ((__mips == 32 || __mips == 64) && __mips_isa_rev < 6)) && !defined (__mips16)\n   __asm__ (\"move %0,%.\\n\\tmovn %0,%1,%2\"\n \t   : \"=&r\" (res32) : \"r\" (in32), \"r\" (in64 != 0));\n   if (res32 != 60)"}, {"sha": "5a422ae29b483d0596d30535bb9733a26147c7fa", "filename": "gcc/testsuite/gcc.target/mips/branch-cost-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fbranch-cost-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fbranch-cost-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fbranch-cost-2.c?ref=82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-options \"-mbranch-cost=10 isa>=4\" } */\n+/* { dg-options \"-mbranch-cost=10 (HAS_MOVN)\" } */\n /* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n NOMIPS16 int\n foo (int x, int y, int z, int k)"}, {"sha": "846ea321e7c7018476579bdb4fa5db3771ad9367", "filename": "gcc/testsuite/gcc.target/mips/call-saved-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fcall-saved-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fcall-saved-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fcall-saved-4.c?ref=82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18", "patch": "@@ -1,5 +1,5 @@\n /* Check that we save the correct call-saved GPRs and FPRs.  */\n-/* { dg-options \"isa>=2 -mabi=32 -mfp32\" } */\n+/* { dg-options \"(HAS_LDC) -mabi=32 -mfp32\" } */\n \n void bar (void);\n "}, {"sha": "92573168d77ffd828bbfbffbd58de6159cb094b4", "filename": "gcc/testsuite/gcc.target/mips/dmult-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fdmult-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fdmult-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fdmult-1.c?ref=82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-options \"forbid_cpu=octeon.* -mgp64\" } */\n+/* { dg-options \"isa_rev<=5 forbid_cpu=octeon.* -mgp64\" } */\n /* { dg-final { scan-assembler \"\\tdmult\\t\" } } */\n /* { dg-final { scan-assembler \"\\tmflo\\t\" } } */\n /* { dg-final { scan-assembler-not \"\\tdmul\\t\" } } */"}, {"sha": "03c2f7926123396b8b335d10ce8b6fbde8c4115b", "filename": "gcc/testsuite/gcc.target/mips/fpcmp-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffpcmp-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffpcmp-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffpcmp-1.c?ref=82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18", "patch": "@@ -1,5 +1,5 @@\n /* We used to use c.lt.fmt instead of c.ule.fmt here.  */\n-/* { dg-options \"-mhard-float\" } */\n+/* { dg-options \"isa_rev<=5 -mhard-float\" } */\n NOMIPS16 int f1 (float x, float y) { return __builtin_isless (x, y); }\n NOMIPS16 int f2 (double x, double y) { return __builtin_isless (x, y); }\n /* { dg-final { scan-assembler \"\\tc\\\\.ule\\\\.s\\t\" } } */"}, {"sha": "6936b9009d331527a6d18721571167610d6ec5fc", "filename": "gcc/testsuite/gcc.target/mips/fpcmp-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffpcmp-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffpcmp-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffpcmp-2.c?ref=82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18", "patch": "@@ -1,5 +1,5 @@\n /* We used to use c.le.fmt instead of c.ult.fmt here.  */\n-/* { dg-options \"-mhard-float\" } */\n+/* { dg-options \"isa_rev<=5 -mhard-float\" } */\n NOMIPS16 int f1 (float x, float y) { return __builtin_islessequal (x, y); }\n NOMIPS16 int f2 (double x, double y) { return __builtin_islessequal (x, y); }\n /* { dg-final { scan-assembler \"\\tc\\\\.ult\\\\.s\\t\" } } */"}, {"sha": "b0771ad9920f57190477e8c88910218711ac6078", "filename": "gcc/testsuite/gcc.target/mips/madd-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmadd-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmadd-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmadd-3.c?ref=82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"isa_rev>=1 -mgp32\" } */\n+/* { dg-options \"(HAS_MADD) -mgp32\" } */\n /* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n /* { dg-final { scan-assembler-times \"\\tmadd\\t\" 3 } } */\n "}, {"sha": "acafc7a2be513c8e8295caa9e70fece26b2df45e", "filename": "gcc/testsuite/gcc.target/mips/madd-9.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmadd-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmadd-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmadd-9.c?ref=82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"isa_rev>=1 -mgp32 -mtune=4kc\" } */\n+/* { dg-options \"(HAS_MADD) -mgp32 -mtune=4kc\" } */\n /* References to X within the loop need to have a higher frequency than\n    references to X outside the loop, otherwise there is no reason\n    to prefer multiply/accumulator registers over GPRs.  */"}, {"sha": "e180fa74131e668664ddbf088aab27eae483eb2c", "filename": "gcc/testsuite/gcc.target/mips/maddu-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmaddu-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmaddu-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmaddu-3.c?ref=82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile } */\n /* This test requires widening_mul */\n-/* { dg-options \"isa_rev>=1 -mgp32 -fexpensive-optimizations\" } */\n+/* { dg-options \"(HAS_MADD) -mgp32 -fexpensive-optimizations\" } */\n /* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n /* { dg-final { scan-assembler-times \"\\tmaddu\\t\" 3 } } */\n "}, {"sha": "a4dfbaea645d08ffee5a8a060b46f5e950a76778", "filename": "gcc/testsuite/gcc.target/mips/mips-ps-type-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips-ps-type-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips-ps-type-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips-ps-type-2.c?ref=82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18", "patch": "@@ -1,7 +1,7 @@\n /* Test v2sf calculations.  The nmadd and nmsub patterns need\n    -ffinite-math-only.  */\n /* { dg-do compile } */\n-/* { dg-options \"isa_rev>=2 -mgp32 -mpaired-single -ffinite-math-only\" } */\n+/* { dg-options \"(HAS_MADDPS) -mgp32 -mpaired-single -ffinite-math-only\" } */\n /* { dg-skip-if \"nmadd and nmsub need combine\" { *-*-* } { \"-O0\" } { \"\" } } */\n /* { dg-final { scan-assembler \"\\tcvt.ps.s\\t\" } } */\n /* { dg-final { scan-assembler \"\\tmov.ps\\t\" } } */"}, {"sha": "febc73a9389417943b44d39bef1dddad616f707f", "filename": "gcc/testsuite/gcc.target/mips/mips.exp", "status": "modified", "additions": 63, "deletions": 3, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips.exp?ref=82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18", "patch": "@@ -247,6 +247,12 @@ set mips_option_groups {\n     small-data \"-G[0-9]+\"\n     warnings \"-w\"\n     dump \"-fdump-.*\"\n+    ins \"HAS_INS\"\n+    dmul \"NOT_HAS_DMUL\"\n+    ldc \"HAS_LDC\"\n+    movn \"HAS_MOVN\"\n+    madd \"HAS_MADD\"\n+    maddps \"HAS_MADDPS\"\n }\n \n for { set option 0 } { $option < 32 } { incr option } {\n@@ -1063,6 +1069,9 @@ proc mips-dg-options { args } {\n \t     && (($gp_size == 32 && [mips_have_test_option_p options \"-mfp64\"])\n \t\t || [mips_have_test_option_p options \"-msynci\"]\n \t\t || [mips_have_test_option_p options \"-mdsp\"]\n+\t\t || [mips_have_test_option_p options \"HAS_INS\"]\n+\t\t || [mips_have_test_option_p options \"HAS_MADD\"]\n+\t\t || [mips_have_test_option_p options \"HAS_MADDPS\"]\n \t\t || [mips_have_test_option_p options \"-mdspr2\"]) } {\n \t    if { $gp_size == 32 } {\n \t\tmips_make_test_option options \"-mips32r2\"\n@@ -1084,6 +1093,12 @@ proc mips-dg-options { args } {\n \t    } else {\n \t\tmips_make_test_option options \"-mips64\"\n \t    }\n+        # We need MIPS IV or higher for:\n+\t#\n+\t#\n+\t} elseif { $isa < 3\n+\t\t   && [mips_have_test_option_p options \"HAS_MOVN\"] } {\n+\t    mips_make_test_option options \"-mips4\"\n         # We need MIPS III or higher for:\n \t#\n \t#   - the \"cache\" instruction\n@@ -1102,8 +1117,38 @@ proc mips-dg-options { args } {\n \t\t   && ([mips_have_test_option_p options \"-mbranch-likely\"]\n \t\t       || [mips_have_test_option_p options \"-mfix-r10000\"]\n \t\t       || ($gp_size == 32\n-\t\t\t   && [mips_have_test_option_p options \"-mfpxx\"])) } {\n+\t\t\t   && ([mips_have_test_option_p options \"-mfpxx\"]\n+\t\t\t       || [mips_have_test_option_p options \"HAS_LDC\"]))) } {\n \t    mips_make_test_option options \"-mips2\"\n+\t# We need to use octeon's base ISA if a test must not run with an\n+\t# architecture that supports dmul.\n+\t} elseif { [regexp -- \"^-march=octeon.*\\$\" $arch]\n+\t\t   && [mips_have_test_option_p options \"NOT_HAS_DMUL\"] } {\n+\t    mips_make_test_option options \"-mips${isa}r${isa_rev}\"\n+\t# Check whether we need to switch from mips*r6 down to mips*r5 due\n+\t# to options that are incompatible with mips*r6.  If we do, use\n+\t# -mnan=2008 because r6 is nan2008 by default and without this flag\n+\t# tests that include stdlib.h will fail due to not finding\n+\t# stubs-o32_hard.h  (r6 compilers only have stubs-o32_hard_2008.h)\n+\t} elseif { $isa_rev > 5\n+\t\t   && ([mips_have_test_option_p options \"-mdsp\"]\n+\t\t       || [mips_have_test_option_p options \"-mdspr2\"]\n+\t\t       || [mips_have_test_option_p options \"-mips16\"]\n+\t\t       || [mips_have_test_option_p options \"-mmicromips\"]\n+\t\t       || [mips_have_test_option_p options \"-mfp32\"]\n+\t\t       || [mips_have_test_option_p options \"-mfix-r10000\"]\n+\t\t       || [mips_have_test_option_p options \"NOT_HAS_DMUL\"]\n+\t\t       || [mips_have_test_option_p options \"HAS_MOVN\"]\n+\t\t       || [mips_have_test_option_p options \"HAS_MADD\"]\n+\t\t       || [mips_have_test_option_p options \"-mpaired-single\"]\n+\t\t       || [mips_have_test_option_p options \"-mnan=legacy\"]\n+\t\t       || [mips_have_test_option_p options \"-mabs=legacy\"]) } {\n+\t    if { $gp_size == 32 } {\n+\t\tmips_make_test_option options \"-mips32r5\"\n+\t    } else {\n+\t\tmips_make_test_option options \"-mips64r5\"\n+\t    }\n+\t    mips_make_test_option options \"-mnan=2008\"\n \t# Check whether we need to switch from a 32-bit processor to the\n \t# \"nearest\" 64-bit processor.\n \t} elseif { $gp_size == 64 && [mips_32bit_arch_p $arch] } {\n@@ -1128,6 +1173,10 @@ proc mips-dg-options { args } {\n \tunset isa_rev\n     }\n \n+    # Re-calculate the isa_rev for use in the abi handling code below\n+    set arch [mips_option options arch]\n+    set isa_rev [mips_arch_info $arch isa_rev]\n+\n     # Set an appropriate ABI, handling dependencies between the pre-abi\n     # options and the abi options.  This should mirror the abi and post-abi\n     # code below.\n@@ -1192,8 +1241,8 @@ proc mips-dg-options { args } {\n     if { $abi_test_option_p } {\n \tif { $eabi_p } {\n \t    mips_make_test_option options \"-mno-abicalls\"\n-\t    if { $gp_size == 32 } {\n-\t\tmips_make_test_option options \"-mfp32\"\n+\t    if { $isa_rev < 6 && $gp_size == 32 } {\n+\t\t    mips_make_test_option options \"-mfp32\"\n \t    }\n \t}\n \tif { [mips_using_mips16_p options]\n@@ -1238,6 +1287,17 @@ proc mips-dg-options { args } {\n \t    mips_make_test_option options \"-mno-dsp\"\n \t    mips_make_test_option options \"-mno-synci\"\n \t}\n+        if { $isa_rev > 5 } {\n+\t    mips_make_test_option options \"-mno-dsp\"\n+\t    mips_make_test_option options \"-mno-mips16\"\n+\t    if { [mips_have_test_option_p options \"-mdsp\"] } {\n+\t\tmips_make_test_option options \"-mfp64\"\n+\t    }\n+\t    mips_make_test_option options \"-mno-fix-r10000\"\n+\t    mips_make_test_option options \"-mno-paired-single\"\n+\t    mips_make_test_option options \"-mnan=2008\"\n+\t    mips_make_test_option options \"-mabs=2008\"\n+\t}\n \tunset arch\n \tunset isa\n \tunset isa_rev"}, {"sha": "7943fecbcef20670447da98e14d341bd0020f20d", "filename": "gcc/testsuite/gcc.target/mips/movcc-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmovcc-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmovcc-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmovcc-1.c?ref=82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"isa>=4\" } */\n+/* { dg-options \"(HAS_MOVN)\" } */\n /* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n /* { dg-final { scan-assembler \"\\tmovz\\t\" } } */\n /* { dg-final { scan-assembler \"\\tmovn\\t\" } } */"}, {"sha": "1926e6460d1440eee905b4dcfbd5fb7bd3917a80", "filename": "gcc/testsuite/gcc.target/mips/movcc-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmovcc-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmovcc-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmovcc-2.c?ref=82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"isa>=4\" } */\n+/* { dg-options \"(HAS_MOVN)\" } */\n /* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n /* { dg-final { scan-assembler \"\\tmovz\\t\" } } */\n /* { dg-final { scan-assembler \"\\tmovn\\t\" } } */"}, {"sha": "55434b72c72b585975da5d06c7ea8b234dca6b24", "filename": "gcc/testsuite/gcc.target/mips/movcc-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmovcc-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmovcc-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmovcc-3.c?ref=82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"isa>=4 -mhard-float\" } */\n+/* { dg-options \"(HAS_MOVN) -mhard-float\" } */\n /* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n /* { dg-final { scan-assembler \"\\tmovt\\t\" } } */\n /* { dg-final { scan-assembler \"\\tmovf\\t\" } } */"}, {"sha": "132db857de8acfbba1f58b1cca7d833dd5b8ae71", "filename": "gcc/testsuite/gcc.target/mips/msub-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmsub-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmsub-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmsub-3.c?ref=82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile } */\n /* This test requires widening_mul */\n-/* { dg-options \"isa_rev>=1 -mgp32 -fexpensive-optimizations\" } */\n+/* { dg-options \"(HAS_MADD) -mgp32 -fexpensive-optimizations\" } */\n /* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n /* { dg-final { scan-assembler-times \"\\tmsub\\t\" 2 } } */\n "}, {"sha": "07cb7c714f6baafb6370533b4fd305b468b99d8a", "filename": "gcc/testsuite/gcc.target/mips/msubu-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmsubu-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmsubu-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmsubu-3.c?ref=82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile } */\n /* This test requires widening_mul */\n-/* { dg-options \"isa_rev>=1 -mgp32 -fexpensive-optimizations\" } */\n+/* { dg-options \"(HAS_MADD) -mgp32 -fexpensive-optimizations\" } */\n /* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n /* { dg-final { scan-assembler-times \"\\tmsubu\\t\" 2 } } */\n "}, {"sha": "bd9757cc0ed2043be154fcc3e4b7377abd942081", "filename": "gcc/testsuite/gcc.target/mips/mult-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmult-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmult-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmult-1.c?ref=82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18", "patch": "@@ -1,7 +1,7 @@\n /* For SI->DI widening multiplication we should use DINS to combine the two\n    halves.  For Octeon use DMUL with explicit widening.  */\n /* This test requires widening_mul */\n-/* { dg-options \"-mgp64 isa_rev>=2 forbid_cpu=octeon.* -fexpensive-optimizations\" } */\n+/* { dg-options \"-mgp64 (HAS_INS) (NOT_HAS_DMUL) -fexpensive-optimizations\" } */\n /* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n /* { dg-final { scan-assembler \"\\tdins\\t\" } } */\n /* { dg-final { scan-assembler-not \"\\tdsll\\t\" } } */"}, {"sha": "59e797def1a18591f9c3af910ccc7726415f7b51", "filename": "gcc/testsuite/gcc.target/mips/neg-abs-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fneg-abs-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fneg-abs-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fneg-abs-2.c?ref=82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18", "patch": "@@ -1,7 +1,7 @@\n /* Make sure that we avoid abs.fmt and neg.fmt when the signs of NaNs\n    matter.  */\n /* { dg-do compile } */\n-/* { dg-options \"-mhard-float -fno-finite-math-only\" } */\n+/* { dg-options \"isa_rev<=5 -mhard-float -fno-finite-math-only -mabs=legacy\" } */\n /* { dg-final { scan-assembler-not \"\\tneg.s\\t\" } } */\n /* { dg-final { scan-assembler-not \"\\tneg.d\\t\" } } */\n /* { dg-final { scan-assembler-not \"\\tabs.s\\t\" } } */"}, {"sha": "be3d317cb691f91ffbd22eb37f11150ad954f2e9", "filename": "gcc/testsuite/gcc.target/mips/timode-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ftimode-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ftimode-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ftimode-1.c?ref=82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-options \"-mgp64\" } */\n+/* { dg-options \"isa_rev<=5 -mgp64\" } */\n /* { dg-skip-if \"we deliberately use calls when optimizing for size\" { *-*-* } { \"-Os\" } { \"\" } } */\n typedef int int128_t __attribute__((mode(TI)));\n typedef unsigned int uint128_t __attribute__((mode(TI)));"}, {"sha": "4888ca8b51f7d6fc5d5187b09c795c88e915429c", "filename": "gcc/testsuite/gcc.target/mips/unaligned-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Funaligned-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Funaligned-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Funaligned-1.c?ref=82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-options \"-mgp64\" } */\n+/* { dg-options \"isa_rev<=5 -mgp64\" } */\n /* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n /* { dg-final { scan-assembler-times \"\\tsdl\\t\" 1 } } */\n /* { dg-final { scan-assembler-times \"\\tsdr\\t\" 1 } } */"}, {"sha": "efd08c4fd1437cbc27d9684ba398952438ae0e7b", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18", "patch": "@@ -1,3 +1,8 @@\n+2014-12-19  Matthew Fortune  <matthew.fortune@imgtec.com>\n+\n+\t* config.host: Support mipsisa32r6 and mipsisa64r6.\n+\t* config/mips/mips16.S: Do not build for R6.\n+\n 2014-12-17  Oleg Endo  <olegendo@gcc.gnu.org>\n \n \t* config/sh/crt.h: New."}, {"sha": "b10d7250e94adc456c4afb4a4fb427954366a0e1", "filename": "libgcc/config.host", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18/libgcc%2Fconfig.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18/libgcc%2Fconfig.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig.host?ref=82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18", "patch": "@@ -827,8 +827,10 @@ mips*-sde-elf*)\n \t;;\n mipsisa32-*-elf* | mipsisa32el-*-elf* | \\\n mipsisa32r2-*-elf* | mipsisa32r2el-*-elf* | \\\n+mipsisa32r6-*-elf* | mipsisa32r6el-*-elf* | \\\n mipsisa64-*-elf* | mipsisa64el-*-elf* | \\\n-mipsisa64r2-*-elf* | mipsisa64r2el-*-elf*)\n+mipsisa64r2-*-elf* | mipsisa64r2el-*-elf* | \\\n+mipsisa64r6-*-elf* | mipsisa64r6el-*-elf*)\n \ttmake_file=\"$tmake_file mips/t-elf mips/t-crtstuff mips/t-mips16\"\n \textra_parts=\"$extra_parts crti.o crtn.o\"\n \t;;"}, {"sha": "1783d1178dc98f3b16128d05db2e5353d155f2c5", "filename": "libgcc/config/mips/mips16.S", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18/libgcc%2Fconfig%2Fmips%2Fmips16.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18/libgcc%2Fconfig%2Fmips%2Fmips16.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fmips%2Fmips16.S?ref=82f84ecbb47c8e8e5e1a6be471e81b74d10ecd18", "patch": "@@ -23,12 +23,13 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n \n #include \"auto-host.h\"\n \n-#if defined(__mips_micromips) || defined(__mips_soft_float)\n+#if defined(__mips_micromips) || defined(__mips_soft_float) \\\n+    || __mips_isa_rev >= 6\n   /* Do nothing because this code is only needed when linking\n      against mips16 hard-float objects.  Neither micromips code\n-     nor soft-float code can be linked against mips16 hard-float\n-     objects so we do not need these routines when building libgcc\n-     for those cases.  */\n+     nor soft-float nor MIPS R6 code can be linked against mips16\n+     hard-float objects so we do not need these routines when\n+     building libgcc for those cases.  */\n #else\n \n #if defined(HAVE_AS_MODULE)"}]}