{"sha": "a68e7e6c6648e57706db51b202f3e72406517b9f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTY4ZTdlNmM2NjQ4ZTU3NzA2ZGI1MWIyMDJmM2U3MjQwNjUxN2I5Zg==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gnu.org", "date": "2006-01-25T17:39:37Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2006-01-25T17:39:37Z"}, "message": "Makefile.in (sched-vis.o): Update dependencies.\n\n2006-01-25  Paolo Bonzini  <bonzini@gnu.org>\n\n\t* Makefile.in (sched-vis.o): Update dependencies.\n\t* haifa-sched.c (sched_finish): Clear current_sched_info.\n\t* cfg.c (dump_bb_info): New, split from dump_flow_info.\n\t(dump_flow_info): Call it.\n\t* passes.c (execute_todo): Call print_rtl_slim_with_bb to make\n\ta slim RTL dump.\n\t* basic-block.h (dump_bb_info): Declare.\n\t* tree-dump.c (dump_enable_all): OR the flags of a -fdump-tree-all\n\toption, and apply options only for dump files whose TDF_RTL,\n\tTDF_TREE, or TDF_IPA bits match.\n\t* rtl.h: Declare new functions exported from sched-vis.c.\n\t* sched-vis.c: Enable also if scheduling is not used.\n\t(print_value): Print the mode of registers if not inside scheduling.\n\t(print_insn): Make it work outside the scheduler.  Beautify the output\n\ta bit.\n\t(dump_insn_slim, debug_insn_slim, print_rtl_slim_with_bb): New.\n\nFrom-SVN: r110217", "tree": {"sha": "0224d6afcc2c0d457d50b20bc90f70a16273ba21", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0224d6afcc2c0d457d50b20bc90f70a16273ba21"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a68e7e6c6648e57706db51b202f3e72406517b9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a68e7e6c6648e57706db51b202f3e72406517b9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a68e7e6c6648e57706db51b202f3e72406517b9f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a68e7e6c6648e57706db51b202f3e72406517b9f/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6d3874a7e42efbe54406950fea9c3de746971099", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d3874a7e42efbe54406950fea9c3de746971099", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d3874a7e42efbe54406950fea9c3de746971099"}], "stats": {"total": 271, "additions": 197, "deletions": 74}, "files": [{"sha": "2e713bcb9b741b15e8f81ccdef0575bb9d292aec", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a68e7e6c6648e57706db51b202f3e72406517b9f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a68e7e6c6648e57706db51b202f3e72406517b9f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a68e7e6c6648e57706db51b202f3e72406517b9f", "patch": "@@ -1,3 +1,22 @@\n+2006-01-25  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\t* Makefile.in (sched-vis.o): Update dependencies.\n+\t* haifa-sched.c (sched_finish): Clear current_sched_info.\n+\t* cfg.c (dump_bb_info): New, split from dump_flow_info.\n+\t(dump_flow_info): Call it.\n+\t* passes.c (execute_todo): Call print_rtl_slim_with_bb to make\n+\ta slim RTL dump.\n+\t* basic-block.h (dump_bb_info): Declare.\n+\t* tree-dump.c (dump_enable_all): OR the flags of a -fdump-tree-all\n+\toption, and apply options only for dump files whose TDF_RTL,\n+\tTDF_TREE, or TDF_IPA bits match.\n+\t* rtl.h: Declare new functions exported from sched-vis.c.\n+\t* sched-vis.c: Enable also if scheduling is not used.\n+\t(print_value): Print the mode of registers if not inside scheduling.\n+\t(print_insn): Make it work outside the scheduler.  Beautify the output\n+\ta bit.\n+\t(dump_insn_slim, debug_insn_slim, print_rtl_slim_with_bb): New.\n+\n 2006-01-25  Richard Sandiford  <richard@codesourcery.com>\n \n \t* doc/rtl.texi (SYMBOL_REF_CONSTANT, SYMBOL_REF_DATA): Document."}, {"sha": "cda9d74bc55b8a6917c13a50d1044c4824d46f18", "filename": "gcc/Makefile.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a68e7e6c6648e57706db51b202f3e72406517b9f/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a68e7e6c6648e57706db51b202f3e72406517b9f/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=a68e7e6c6648e57706db51b202f3e72406517b9f", "patch": "@@ -2518,8 +2518,8 @@ sched-ebb.o : sched-ebb.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(FUNCTION_H) $(INSN_ATTR_H) toplev.h $(RECOG_H) except.h $(TM_P_H) \\\n    $(PARAMS_H) $(CFGLAYOUT_H) $(TARGET_H)\n sched-vis.o : sched-vis.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n-   $(RTL_H) $(SCHED_INT_H) hard-reg-set.h $(BASIC_BLOCK_H) $(INSN_ATTR_H) \\\n-   $(REGS_H) $(TM_P_H) $(TARGET_H) real.h toplev.h\n+   $(RTL_H) $(SCHED_INT_H) hard-reg-set.h $(BASIC_BLOCK_H) $(OBSTACK_H) \\\n+   $(TM_P_H) real.h toplev.h tree-pass.h\n final.o : final.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(TREE_H) $(FLAGS_H) intl.h $(REGS_H) $(RECOG_H) conditions.h \\\n    insn-config.h $(INSN_ATTR_H) $(FUNCTION_H) real.h output.h hard-reg-set.h \\"}, {"sha": "19a2de7a00f03aebdcd6495b2e88194de07e9337", "filename": "gcc/basic-block.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a68e7e6c6648e57706db51b202f3e72406517b9f/gcc%2Fbasic-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a68e7e6c6648e57706db51b202f3e72406517b9f/gcc%2Fbasic-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbasic-block.h?ref=a68e7e6c6648e57706db51b202f3e72406517b9f", "patch": "@@ -514,6 +514,7 @@ extern int dfs_enumerate_from (basic_block, int,\n \t\t\t       bool (*)(basic_block, void *),\n \t\t\t       basic_block *, int, void *);\n extern void compute_dominance_frontiers (bitmap *);\n+extern void dump_bb_info (basic_block, bool, bool, int, const char *, FILE *);\n extern void dump_edge_info (FILE *, edge, int);\n extern void brief_dump_cfg (FILE *);\n extern void clear_edges (void);"}, {"sha": "feac79bc71ccb6d4f5134d5ced93878e83167da7", "filename": "gcc/cfg.c", "status": "modified", "additions": 66, "deletions": 39, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a68e7e6c6648e57706db51b202f3e72406517b9f/gcc%2Fcfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a68e7e6c6648e57706db51b202f3e72406517b9f/gcc%2Fcfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfg.c?ref=a68e7e6c6648e57706db51b202f3e72406517b9f", "patch": "@@ -62,6 +62,7 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n #include \"tm_p.h\"\n #include \"obstack.h\"\n #include \"timevar.h\"\n+#include \"tree-pass.h\"\n #include \"ggc.h\"\n #include \"hashtab.h\"\n #include \"alloc-pool.h\"\n@@ -467,11 +468,75 @@ check_bb_profile (basic_block bb, FILE * file)\n     }\n }\n \f\n+/* Emit basic block information for BB.  HEADER is true if the user wants\n+   the generic information and the predecessors, FOOTER is true if they want\n+   the successors.  FLAGS is the dump flags of interest; TDF_DETAILS emit\n+   global register liveness information.  PREFIX is put in front of every\n+   line.  The output is emitted to FILE.  */\n+void\n+dump_bb_info (basic_block bb, bool header, bool footer, int flags,\n+\t      const char *prefix, FILE *file)\n+{\n+  edge e;\n+  edge_iterator ei;\n+\n+  if (header)\n+    {\n+      fprintf (file, \"\\n%sBasic block %d \", prefix, bb->index);\n+      if (bb->prev_bb)\n+        fprintf (file, \", prev %d\", bb->prev_bb->index);\n+      if (bb->next_bb)\n+        fprintf (file, \", next %d\", bb->next_bb->index);\n+      fprintf (file, \", loop_depth %d, count \", bb->loop_depth);\n+      fprintf (file, HOST_WIDEST_INT_PRINT_DEC, bb->count);\n+      fprintf (file, \", freq %i\", bb->frequency);\n+      if (maybe_hot_bb_p (bb))\n+\tfprintf (file, \", maybe hot\");\n+      if (probably_never_executed_bb_p (bb))\n+\tfprintf (file, \", probably never executed\");\n+      fprintf (file, \".\\n\");\n+\n+      fprintf (file, \"%sPredecessors: \", prefix);\n+      FOR_EACH_EDGE (e, ei, bb->preds)\n+\tdump_edge_info (file, e, 0);\n+   }\n+\n+  if (footer)\n+    {\n+      fprintf (file, \"\\n%sSuccessors: \", prefix);\n+      FOR_EACH_EDGE (e, ei, bb->succs)\n+\tdump_edge_info (file, e, 1);\n+   }\n+\n+  if ((flags & TDF_DETAILS)\n+      && (bb->flags & BB_RTL))\n+    {\n+      if (bb->il.rtl->global_live_at_start && header)\n+\t{\n+\t  fprintf (file, \"\\n%sRegisters live at start:\", prefix);\n+\t  dump_regset (bb->il.rtl->global_live_at_start, file);\n+\t}\n+\n+      if (bb->il.rtl->global_live_at_end && footer)\n+\t{\n+\t  fprintf (file, \"\\n%sRegisters live at end:\", prefix);\n+\t  dump_regset (bb->il.rtl->global_live_at_end, file);\n+\t}\n+   }\n+\n+  putc ('\\n', file);\n+}\n+\n void\n dump_flow_info (FILE *file)\n {\n   basic_block bb;\n \n+  if (file == dump_file\n+      && (dump_flags & TDF_SLIM)\n+      && !(dump_flags & TDF_DETAILS))\n+    return;\n+\n   /* There are no pseudo registers after reload.  Don't dump them.  */\n   if (reg_n_info && !reload_completed)\n     {\n@@ -524,45 +589,7 @@ dump_flow_info (FILE *file)\n   fprintf (file, \"\\n%d basic blocks, %d edges.\\n\", n_basic_blocks, n_edges);\n   FOR_EACH_BB (bb)\n     {\n-      edge e;\n-      edge_iterator ei;\n-\n-      fprintf (file, \"\\nBasic block %d \", bb->index);\n-      fprintf (file, \"prev %d, next %d, \",\n-\t       bb->prev_bb->index, bb->next_bb->index);\n-      fprintf (file, \"loop_depth %d, count \", bb->loop_depth);\n-      fprintf (file, HOST_WIDEST_INT_PRINT_DEC, bb->count);\n-      fprintf (file, \", freq %i\", bb->frequency);\n-      if (maybe_hot_bb_p (bb))\n-\tfprintf (file, \", maybe hot\");\n-      if (probably_never_executed_bb_p (bb))\n-\tfprintf (file, \", probably never executed\");\n-      fprintf (file, \".\\n\");\n-\n-      fprintf (file, \"Predecessors: \");\n-      FOR_EACH_EDGE (e, ei, bb->preds)\n-\tdump_edge_info (file, e, 0);\n-\n-      fprintf (file, \"\\nSuccessors: \");\n-      FOR_EACH_EDGE (e, ei, bb->succs)\n-\tdump_edge_info (file, e, 1);\n-\n-      if (bb->flags & BB_RTL)\n-\t{\n-\t  if (bb->il.rtl->global_live_at_start)\n-\t    {\n-\t      fprintf (file, \"\\nRegisters live at start:\");\n-\t      dump_regset (bb->il.rtl->global_live_at_start, file);\n-\t    }\n-\n-\t  if (bb->il.rtl->global_live_at_end)\n-\t    {\n-\t      fprintf (file, \"\\nRegisters live at end:\");\n-\t      dump_regset (bb->il.rtl->global_live_at_end, file);\n-\t    }\n-\t}\n-\n-      putc ('\\n', file);\n+      dump_bb_info (bb, true, true, TDF_DETAILS, \"\", file);\n       check_bb_profile (bb, file);\n     }\n "}, {"sha": "ab362cbab37f7c44cab5449d8f7186a1536995fe", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a68e7e6c6648e57706db51b202f3e72406517b9f/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a68e7e6c6648e57706db51b202f3e72406517b9f/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=a68e7e6c6648e57706db51b202f3e72406517b9f", "patch": "@@ -2362,5 +2362,7 @@ sched_finish (void)\n \n   if (targetm.sched.md_finish_global)\n       targetm.sched.md_finish_global (sched_dump, sched_verbose);\n+\n+  current_sched_info = NULL;\n }\n #endif /* INSN_SCHEDULING */"}, {"sha": "5b84c39730425b30df8771a4b19bea8936875069", "filename": "gcc/passes.c", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a68e7e6c6648e57706db51b202f3e72406517b9f/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a68e7e6c6648e57706db51b202f3e72406517b9f/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=a68e7e6c6648e57706db51b202f3e72406517b9f", "patch": "@@ -748,16 +748,20 @@ execute_todo (struct tree_opt_pass *pass, unsigned int flags, bool use_required)\n       if (properties & PROP_trees)\n         dump_function_to_file (current_function_decl,\n                                dump_file, dump_flags);\n-      else if (properties & PROP_cfg)\n+      else\n \t{\n-\t  print_rtl_with_bb (dump_file, get_insns ());\n-\n-\t  if (graph_dump_format != no_graph\n+\t  if (dump_flags & TDF_SLIM)\n+\t    print_rtl_slim_with_bb (dump_file, get_insns (), dump_flags);\n+\t  else if (properties & PROP_cfg)\n+\t    print_rtl_with_bb (dump_file, get_insns ());\n+          else\n+\t    print_rtl (dump_file, get_insns ());\n+\n+\t  if (properties & PROP_cfg\n+\t      && graph_dump_format != no_graph\n \t      && (dump_flags & TDF_GRAPH))\n \t    print_rtl_graph_with_bb (dump_file_name, get_insns ());\n \t}\n-      else\n-        print_rtl (dump_file, get_insns ());\n \n       /* Flush the file.  If verification fails, we won't be able to\n \t close the file before aborting.  */"}, {"sha": "8a959b89dbdcdf21fa70d476455d2bd37b8a2497", "filename": "gcc/rtl.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a68e7e6c6648e57706db51b202f3e72406517b9f/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a68e7e6c6648e57706db51b202f3e72406517b9f/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=a68e7e6c6648e57706db51b202f3e72406517b9f", "patch": "@@ -1988,6 +1988,11 @@ extern rtx remove_death (unsigned int, rtx);\n extern void dump_combine_stats (FILE *);\n extern void dump_combine_total_stats (FILE *);\n \n+/* In sched-vis.c.  */\n+extern void print_rtl_slim_with_bb (FILE *, rtx, int);\n+extern void dump_insn_slim (FILE *f, rtx x);\n+extern void debug_insn_slim (rtx x);\n+\n /* In sched-rgn.c.  */\n extern void schedule_insns (FILE *);\n "}, {"sha": "20129559470e03004a6c1e3ce3f8170af0034077", "filename": "gcc/sched-vis.c", "status": "modified", "additions": 87, "deletions": 23, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a68e7e6c6648e57706db51b202f3e72406517b9f/gcc%2Fsched-vis.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a68e7e6c6648e57706db51b202f3e72406517b9f/gcc%2Fsched-vis.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-vis.c?ref=a68e7e6c6648e57706db51b202f3e72406517b9f", "patch": "@@ -25,18 +25,13 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n #include \"system.h\"\n #include \"coretypes.h\"\n #include \"tm.h\"\n-#include \"toplev.h\"\n #include \"rtl.h\"\n-#include \"tm_p.h\"\n-#include \"regs.h\"\n+#include \"obstack.h\"\n #include \"hard-reg-set.h\"\n #include \"basic-block.h\"\n-#include \"insn-attr.h\"\n #include \"real.h\"\n #include \"sched-int.h\"\n-#include \"target.h\"\n-\n-#ifdef INSN_SCHEDULING\n+#include \"tree-pass.h\"\n \n static char *safe_concat (char *, char *, const char *);\n static void print_exp (char *, rtx, int);\n@@ -478,6 +473,15 @@ print_value (char *buf, rtx x, int verbose)\n \t  sprintf (t, \"r%d\", REGNO (x));\n \t  cur = safe_concat (buf, cur, t);\n \t}\n+      if (verbose\n+#ifdef INSN_SCHEDULING\n+\t  && !current_sched_info\n+#endif\n+\t )\n+\t{\n+\t  sprintf (t, \":%s\", GET_MODE_NAME (GET_MODE (x)));\n+\t  cur = safe_concat (buf, cur, t);\n+\t}\n       break;\n     case SUBREG:\n       print_value (t, SUBREG_REG (x), verbose);\n@@ -629,19 +633,23 @@ print_insn (char *buf, rtx x, int verbose)\n     {\n     case INSN:\n       print_pattern (t, PATTERN (x), verbose);\n-      if (verbose)\n+#ifdef INSN_SCHEDULING\n+      if (verbose && current_sched_info)\n \tsprintf (buf, \"%s: %s\", (*current_sched_info->print_insn) (x, 1),\n \t\t t);\n       else\n-\tsprintf (buf, \"%-4d %s\", INSN_UID (x), t);\n+#endif\n+\tsprintf (buf, \" %4d %s\", INSN_UID (x), t);\n       break;\n     case JUMP_INSN:\n       print_pattern (t, PATTERN (x), verbose);\n-      if (verbose)\n+#ifdef INSN_SCHEDULING\n+      if (verbose && current_sched_info)\n \tsprintf (buf, \"%s: jump %s\", (*current_sched_info->print_insn) (x, 1),\n \t\t t);\n       else\n-\tsprintf (buf, \"%-4d %s\", INSN_UID (x), t);\n+#endif\n+\tsprintf (buf, \" %4d %s\", INSN_UID (x), t);\n       break;\n     case CALL_INSN:\n       x = PATTERN (insn);\n@@ -652,38 +660,94 @@ print_insn (char *buf, rtx x, int verbose)\n \t}\n       else\n \tstrcpy (t, \"call <...>\");\n-      if (verbose)\n+#ifdef INSN_SCHEDULING\n+      if (verbose && current_sched_info)\n \tsprintf (buf, \"%s: %s\", (*current_sched_info->print_insn) (x, 1), t);\n       else\n-\tsprintf (buf, \"%-4d %s\", INSN_UID (insn), t);\n+#endif\n+\tsprintf (buf, \" %4d %s\", INSN_UID (insn), t);\n       break;\n     case CODE_LABEL:\n       sprintf (buf, \"L%d:\", INSN_UID (x));\n       break;\n     case BARRIER:\n-      sprintf (buf, \"i% 4d: barrier\", INSN_UID (x));\n+      sprintf (buf, \"i%4d: barrier\", INSN_UID (x));\n       break;\n     case NOTE:\n       if (NOTE_LINE_NUMBER (x) > 0)\n \t{\n \t  expanded_location xloc;\n \t  NOTE_EXPANDED_LOCATION (xloc, x);\n-\t  sprintf (buf, \"%4d note \\\"%s\\\" %d\", INSN_UID (x),\n+\t  sprintf (buf, \" %4d note \\\"%s\\\" %d\", INSN_UID (x),\n \t\t   xloc.file, xloc.line);\n \t}\n       else\n-\tsprintf (buf, \"%4d %s\", INSN_UID (x),\n+\tsprintf (buf, \" %4d %s\", INSN_UID (x),\n \t\t GET_NOTE_INSN_NAME (NOTE_LINE_NUMBER (x)));\n       break;\n     default:\n-      if (verbose)\n+      sprintf (buf, \"i%4d  <What %s?>\", INSN_UID (x),\n+\t       GET_RTX_NAME (GET_CODE (x)));\n+    }\n+}\t\t\t\t/* print_insn */\n+\n+\n+/* Emit a slim dump of X (an insn) to the file F, including any register\n+   note attached to the instruction.  */\n+void\n+dump_insn_slim (FILE *f, rtx x)\n+{\n+  char t[BUF_LEN + 32];\n+  rtx note;\n+\n+  print_insn (t, x, 1);\n+  fputs (t, f);\n+  putc ('\\n', f);\n+  if (INSN_P (x) && REG_NOTES (x))\n+    for (note = REG_NOTES (x); note; note = XEXP (note, 1))\n+      {\n+        print_value (t, XEXP (note, 0), 1);\n+\tfprintf (f, \"      %s: %s\\n\",\n+\t\t GET_REG_NOTE_NAME (REG_NOTE_KIND (note)), t);\n+      }\n+}\n+\n+/* Emit a slim dump of X (an insn) to stderr.  */\n+void\n+debug_insn_slim (rtx x)\n+{\n+  dump_insn_slim (stderr, x);\n+}\n+\n+/* Provide a slim dump the instruction chain starting at FIRST to F, honoring\n+   the dump flags given in FLAGS.  Currently, TDF_BLOCKS and TDF_DETAILS\n+   include more information on the basic blocks.  */\n+void\n+print_rtl_slim_with_bb (FILE *f, rtx first, int flags)\n+{\n+  basic_block current_bb = NULL;\n+  rtx insn;\n+\n+  for (insn = first; NULL != insn; insn = NEXT_INSN (insn))\n+    {\n+      if ((flags & TDF_BLOCKS)\n+\t  && (INSN_P (insn) || GET_CODE (insn) == NOTE)\n+\t  && BLOCK_FOR_INSN (insn)\n+\t  && !current_bb)\n \t{\n-\t  sprintf (buf, \"Not an INSN at all\\n\");\n-\t  debug_rtx (x);\n+\t  current_bb = BLOCK_FOR_INSN (insn);\n+\t  dump_bb_info (current_bb, true, false, flags, \";; \", f);\n+\t}\n+\n+      dump_insn_slim (f, insn);\n+\n+      if ((flags & TDF_BLOCKS)\n+\t  && current_bb\n+\t  && insn == BB_END (current_bb))\n+\t{\n+\t  dump_bb_info (current_bb, false, true, flags, \";; \", f);\n+\t  current_bb = NULL;\n \t}\n-      else\n-\tsprintf (buf, \"i%-4d  <What?>\", INSN_UID (x));\n     }\n-}\t\t\t\t/* print_insn */\n+}\n \n-#endif"}, {"sha": "dfcf456237a836a44315b60f77d25443db271e13", "filename": "gcc/tree-dump.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a68e7e6c6648e57706db51b202f3e72406517b9f/gcc%2Ftree-dump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a68e7e6c6648e57706db51b202f3e72406517b9f/gcc%2Ftree-dump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dump.c?ref=a68e7e6c6648e57706db51b202f3e72406517b9f", "patch": "@@ -926,24 +926,25 @@ dump_end (enum tree_dump_index phase ATTRIBUTE_UNUSED, FILE *stream)\n static int\n dump_enable_all (int flags, int letter)\n {\n+  int ir_type = (flags & (TDF_TREE | TDF_RTL | TDF_IPA));\n   int n = 0;\n   size_t i;\n \n   for (i = TDI_none + 1; i < (size_t) TDI_end; i++)\n-    if ((dump_files[i].flags & flags)\n+    if ((dump_files[i].flags & ir_type)\n \t&& (letter == 0 || letter == dump_files[i].letter))\n       {\n         dump_files[i].state = -1;\n-        dump_files[i].flags = flags;\n+        dump_files[i].flags |= flags;\n         n++;\n       }\n \n   for (i = 0; i < extra_dump_files_in_use; i++)\n-    if ((extra_dump_files[i].flags & flags)\n+    if ((extra_dump_files[i].flags & ir_type)\n \t&& (letter == 0 || letter == extra_dump_files[i].letter))\n       {\n         extra_dump_files[i].state = -1;\n-        extra_dump_files[i].flags = flags;\n+        extra_dump_files[i].flags |= flags;\n \tn++;\n       }\n "}]}