{"sha": "41e5a1f5931abac1ced8f9b8e12bd5db19c9b844", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDFlNWExZjU5MzFhYmFjMWNlZDhmOWI4ZTEyYmQ1ZGIxOWM5Yjg0NA==", "commit": {"author": {"name": "David O'Brien", "email": "obrien@FreeBSD.org", "date": "2000-09-29T01:56:02Z"}, "committer": {"name": "David O'Brien", "email": "obrien@gcc.gnu.org", "date": "2000-09-29T01:56:02Z"}, "message": "freebsd-aout.h: New, FreeBSD a.out config file.\n\n2000-09-28  David O'Brien  <obrien@FreeBSD.org>\n\t* config/i386/freebsd-aout.h: New, FreeBSD a.out config file.\n\tContains the old contents of config/i386/freebsd.h\n\t* config/i386/freebsd.h: Now the ELF rather than a.out config file.\n\tContains the old contents of config/i386/freebsd-elf.h\n\t* config/i386/freebsd-elf.h: Retire this file -- contents moved to\n\tconfig/i386/freebsd.h.\n\t* configure.in: Adjust for above changes.\n\t* po/POTFILES.in: Likewise.\n\t* po/en_GB.po: Likewise.\n\t* po/gcc.pot: Likewise.\n\t* configure: Rebuilt.\n\nApproved by:  Richard Henderson <rth@cygnus.com>\n              Message-ID: <20000927093029.A30906@cygnus.com>\n\nFrom-SVN: r36662", "tree": {"sha": "5e26746a7b3a2bd843feccb29c5b875d6c32362d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5e26746a7b3a2bd843feccb29c5b875d6c32362d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/41e5a1f5931abac1ced8f9b8e12bd5db19c9b844", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41e5a1f5931abac1ced8f9b8e12bd5db19c9b844", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41e5a1f5931abac1ced8f9b8e12bd5db19c9b844", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41e5a1f5931abac1ced8f9b8e12bd5db19c9b844/comments", "author": null, "committer": null, "parents": [{"sha": "1db88ef97966a671405ab7d165e1b11fa1e2bc61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1db88ef97966a671405ab7d165e1b11fa1e2bc61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1db88ef97966a671405ab7d165e1b11fa1e2bc61"}], "stats": {"total": 726, "additions": 373, "deletions": 353}, "files": [{"sha": "0df5e8f1f8d46f85b0df08613cccf90a24f45fe6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e5a1f5931abac1ced8f9b8e12bd5db19c9b844/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e5a1f5931abac1ced8f9b8e12bd5db19c9b844/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=41e5a1f5931abac1ced8f9b8e12bd5db19c9b844", "patch": "@@ -1,3 +1,17 @@\n+2000-09-28  David O'Brien  <obrien@FreeBSD.org>\n+\n+\t* config/i386/freebsd-aout.h: New, FreeBSD a.out config file.\n+\tContains the old contents of config/i386/freebsd.h\n+\t* config/i386/freebsd.h: Now the ELF rather than a.out config file.\n+\tContains the old contents of config/i386/freebsd-elf.h\n+\t* config/i386/freebsd-elf.h: Retire this file -- contents moved to\n+\tconfig/i386/freebsd.h.\n+\t* configure.in: Adjust for above changes.\n+\t* po/POTFILES.in: Likewise.\n+\t* po/en_GB.po: Likewise.\n+\t* po/gcc.pot: Likewise.\n+\t* configure: Rebuilt.\n+\n 2000-09-28  Franz Sirl  <Franz.Sirl-kernel@lauterbach.com>\n \t* doloop.c (doloop_modify): Prevent delete_insn() from\n \tdeleting too much.  Prefer loop->top over loop->start as"}, {"sha": "55b49cfac39a67f1b2f3a55d5ca7d3022502a2be", "filename": "gcc/config/i386/freebsd-aout.h", "status": "added", "additions": 252, "deletions": 0, "changes": 252, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e5a1f5931abac1ced8f9b8e12bd5db19c9b844/gcc%2Fconfig%2Fi386%2Ffreebsd-aout.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e5a1f5931abac1ced8f9b8e12bd5db19c9b844/gcc%2Fconfig%2Fi386%2Ffreebsd-aout.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ffreebsd-aout.h?ref=41e5a1f5931abac1ced8f9b8e12bd5db19c9b844", "patch": "@@ -0,0 +1,252 @@\n+/* Definitions of target machine for GNU compiler for Intel 80386\n+   running FreeBSD.\n+   Copyright (C) 1988, 1992, 1994, 1996, 1997, 1999, 2000 Free Software\n+   Foundation, Inc.\n+   Contributed by Poul-Henning Kamp <phk@login.dkuug.dk>\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+/* This is tested by i386gas.h.  */\n+#define YES_UNDERSCORES\n+\n+/* Don't assume anything about the header files. */\n+#define NO_IMPLICIT_EXTERN_C\n+\n+#include \"i386/gstabs.h\"\n+\n+/* This goes away when the math-emulator is fixed */\n+#undef TARGET_DEFAULT\n+#define TARGET_DEFAULT \\\n+  (MASK_80387 | MASK_IEEE_FP | MASK_FLOAT_RETURNS | MASK_NO_FANCY_MATH_387)\n+\n+#undef CPP_PREDEFINES\n+#define CPP_PREDEFINES \"-Dunix -D__FreeBSD__\\\n+ -Asystem(unix) -Asystem(bsd) -Asystem(FreeBSD)\"\n+\n+/* Like the default, except no -lg.  */\n+#define LIB_SPEC \"%{!shared:%{!pg:-lc}%{pg:-lc_p}}\"\n+\n+#undef SIZE_TYPE\n+#define SIZE_TYPE \"unsigned int\"\n+\n+#undef PTRDIFF_TYPE\n+#define PTRDIFF_TYPE \"int\"\n+\n+#undef WCHAR_TYPE\n+#define WCHAR_TYPE \"int\"\n+\n+#define WCHAR_UNSIGNED 0\n+\n+#undef WCHAR_TYPE_SIZE\n+#define WCHAR_TYPE_SIZE BITS_PER_WORD\n+\n+/* Override the default comment-starter of \"/\".  */\n+\n+#undef ASM_COMMENT_START\n+#define ASM_COMMENT_START \"#\"\n+\n+#undef ASM_APP_ON\n+#define ASM_APP_ON \"#APP\\n\"\n+\n+#undef ASM_APP_OFF\n+#define ASM_APP_OFF \"#NO_APP\\n\"\n+\n+/* FreeBSD using a.out does not support DWARF2 unwinding mechanisms.  */\n+#define DWARF2_UNWIND_INFO 0\n+\f\n+/* The following macros are stolen from i386v4.h */\n+/* These have to be defined to get PIC code correct */\n+\n+/* This is how to output an element of a case-vector that is relative.\n+   This is only used for PIC code.  See comments by the `casesi' insn in\n+   i386.md for an explanation of the expression this outputs. */\n+\n+#undef ASM_OUTPUT_ADDR_DIFF_ELT\n+#define ASM_OUTPUT_ADDR_DIFF_ELT(FILE, BODY, VALUE, REL) \\\n+  fprintf (FILE, \"\\t.long _GLOBAL_OFFSET_TABLE_+[.-%s%d]\\n\", LPREFIX, VALUE)\n+\n+/* Indicate that jump tables go in the text section.  This is\n+   necessary when compiling PIC code.  */\n+\n+#define JUMP_TABLES_IN_TEXT_SECTION 1\n+\n+/* Don't default to pcc-struct-return, because in FreeBSD we prefer the\n+   superior nature of the older gcc way.  */\n+#define DEFAULT_PCC_STRUCT_RETURN 0\n+\n+/* Ensure we the configuration knows our system correctly so we can link with\n+   libraries compiled with the native cc. */\n+#undef NO_DOLLAR_IN_LABEL\n+\f\n+/* i386 freebsd still uses old binutils that don't insert nops by default\n+   when the .align directive demands to insert extra space in the text\n+   segment.  */\n+#undef ASM_OUTPUT_ALIGN\n+#define ASM_OUTPUT_ALIGN(FILE,LOG) \\\n+  if ((LOG)!=0) fprintf ((FILE), \"\\t.align %d,0x90\\n\", (LOG))\n+\f\n+/* Profiling routines, partially copied from i386/osfrose.h.  */\n+\n+/* Redefine this to use %eax instead of %edx.  */\n+#undef FUNCTION_PROFILER\n+#define FUNCTION_PROFILER(FILE, LABELNO)  \\\n+{\t\t\t\t\t\t\t\t\t\\\n+  if (flag_pic)\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      fprintf (FILE, \"\\tleal %sP%d@GOTOFF(%%ebx),%%eax\\n\",\t\t\\\n+\t       LPREFIX, (LABELNO));\t\t\t\t\t\\\n+      fprintf (FILE, \"\\tcall *mcount@GOT(%%ebx)\\n\");\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  else\t\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      fprintf (FILE, \"\\tmovl $%sP%d,%%eax\\n\", LPREFIX, (LABELNO));\t\\\n+      fprintf (FILE, \"\\tcall mcount\\n\");\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+}\n+\n+/*\n+ * Some imports from svr4.h in support of shared libraries.\n+ * Currently, we need the DECLARE_OBJECT_SIZE stuff.\n+ */\n+\n+/* Define the strings used for the special svr4 .type and .size directives.\n+   These strings generally do not vary from one system running svr4 to\n+   another, but if a given system (e.g. m88k running svr) needs to use\n+   different pseudo-op names for these, they may be overridden in the\n+   file which includes this one.  */\n+\n+#define TYPE_ASM_OP\t\"\\t.type\\t\"\n+#define SIZE_ASM_OP\t\"\\t.size\\t\"\n+\n+/* The following macro defines the format used to output the second\n+   operand of the .type assembler directive.  Different svr4 assemblers\n+   expect various different forms for this operand.  The one given here\n+   is just a default.  You may need to override it in your machine-\n+   specific tm.h file (depending upon the particulars of your assembler).  */\n+\n+#define TYPE_OPERAND_FMT\t\"@%s\"\n+\n+/* Write the extra assembler code needed to declare a function's result.\n+   Most svr4 assemblers don't require any special declaration of the\n+   result value, but there are exceptions.  */\n+\n+#ifndef ASM_DECLARE_RESULT\n+#define ASM_DECLARE_RESULT(FILE, RESULT)\n+#endif\n+\n+/* These macros generate the special .type and .size directives which\n+   are used to set the corresponding fields of the linker symbol table\n+   entries in an ELF object file under SVR4.  These macros also output\n+   the starting labels for the relevant functions/objects.  */\n+\n+/* Write the extra assembler code needed to declare a function properly.\n+   Some svr4 assemblers need to also have something extra said about the\n+   function's return value.  We allow for that here.  */\n+\n+#define ASM_DECLARE_FUNCTION_NAME(FILE, NAME, DECL)\t\t\t\\\n+  do {\t\t\t\t\t\t\t\t\t\\\n+    fprintf (FILE, \"%s\", TYPE_ASM_OP);\t\t\t\t\t\\\n+    assemble_name (FILE, NAME);\t\t\t\t\t\t\\\n+    putc (',', FILE);\t\t\t\t\t\t\t\\\n+    fprintf (FILE, TYPE_OPERAND_FMT, \"function\");\t\t\t\\\n+    putc ('\\n', FILE);\t\t\t\t\t\t\t\\\n+    ASM_DECLARE_RESULT (FILE, DECL_RESULT (DECL));\t\t\t\\\n+    ASM_OUTPUT_LABEL(FILE, NAME);\t\t\t\t\t\\\n+  } while (0)\n+\n+/* Write the extra assembler code needed to declare an object properly.  */\n+\n+#define ASM_DECLARE_OBJECT_NAME(FILE, NAME, DECL)\t\t\t\\\n+  do {\t\t\t\t\t\t\t\t\t\\\n+    fprintf (FILE, \"%s\", TYPE_ASM_OP);\t\t\t\t\t\\\n+    assemble_name (FILE, NAME);\t\t\t\t\t\t\\\n+    putc (',', FILE);\t\t\t\t\t\t\t\\\n+    fprintf (FILE, TYPE_OPERAND_FMT, \"object\");\t\t\t\t\\\n+    putc ('\\n', FILE);\t\t\t\t\t\t\t\\\n+    size_directive_output = 0;\t\t\t\t\t\t\\\n+    if (!flag_inhibit_size_directive && DECL_SIZE (DECL))\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+        size_directive_output = 1;\t\t\t\t\t\\\n+\tfprintf (FILE, \"%s\", SIZE_ASM_OP);\t\t\t\t\\\n+\tassemble_name (FILE, NAME);\t\t\t\t\t\\\n+\tfprintf (FILE, \",%d\\n\",  int_size_in_bytes (TREE_TYPE (DECL)));\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n+    ASM_OUTPUT_LABEL(FILE, NAME);\t\t\t\t\t\\\n+  } while (0)\n+\n+/* Output the size directive for a decl in rest_of_decl_compilation\n+   in the case where we did not do so before the initializer.\n+   Once we find the error_mark_node, we know that the value of\n+   size_directive_output was set\n+   by ASM_DECLARE_OBJECT_NAME when it was run for the same decl.  */\n+\n+#define ASM_FINISH_DECLARE_OBJECT(FILE, DECL, TOP_LEVEL, AT_END)        \\\n+do {                                                                    \\\n+     const char *name = XSTR (XEXP (DECL_RTL (DECL), 0), 0);            \\\n+     if (!flag_inhibit_size_directive && DECL_SIZE (DECL)\t        \\\n+         && ! AT_END && TOP_LEVEL                                       \\\n+         && DECL_INITIAL (DECL) == error_mark_node                      \\\n+         && !size_directive_output)                                     \\\n+       {                                                                \\\n+         fprintf (FILE, \"%s\", SIZE_ASM_OP);                             \\\n+\t assemble_name (FILE, name);                                    \\\n+\t fprintf (FILE, \",%d\\n\",  int_size_in_bytes (TREE_TYPE (DECL)));\\\n+\t}\t\t\t\t\t\t\t\t\\\n+   } while (0)\n+\n+\n+/* This is how to declare the size of a function.  */\n+\n+#define ASM_DECLARE_FUNCTION_SIZE(FILE, FNAME, DECL)\t\t\t\\\n+  do {\t\t\t\t\t\t\t\t\t\\\n+    if (!flag_inhibit_size_directive)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+        char label[256];\t\t\t\t\t\t\\\n+\tstatic int labelno;\t\t\t\t\t\t\\\n+\tlabelno++;\t\t\t\t\t\t\t\\\n+\tASM_GENERATE_INTERNAL_LABEL (label, \"Lfe\", labelno);\t\t\\\n+\tASM_OUTPUT_INTERNAL_LABEL (FILE, \"Lfe\", labelno);\t\t\\\n+\tfprintf (FILE, \"%s\", SIZE_ASM_OP);\t\t\t\t\\\n+\tassemble_name (FILE, (FNAME));\t\t\t\t\t\\\n+        fprintf (FILE, \",\");\t\t\t\t\t\t\\\n+\tassemble_name (FILE, label);\t\t\t\t\t\\\n+        fprintf (FILE, \"-\");\t\t\t\t\t\t\\\n+\tassemble_name (FILE, (FNAME));\t\t\t\t\t\\\n+\tputc ('\\n', FILE);\t\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n+  } while (0)\n+\n+#define ASM_SPEC   \" %| %{fpic:-k} %{fPIC:-k}\"\n+#define LINK_SPEC \\\n+  \"%{p:%e`-p' not supported; use `-pg' and gprof(1)} \\\n+   %{shared:-Bshareable} \\\n+   %{!shared:%{!nostdlib:%{!r:%{!e*:-e start}}} -dc -dp %{static:-Bstatic} \\\n+   %{pg:-Bstatic} %{Z}} \\\n+   %{assert*} %{R*}\"\n+\n+#define STARTFILE_SPEC  \\\n+  \"%{shared:c++rt0.o%s} \\\n+   %{!shared:%{pg:gcrt0.o%s}%{!pg:%{static:scrt0.o%s}%{!static:crt0.o%s}}}\"\n+\n+/* Define this so we can compile MS code for use with WINE.  */\n+#define HANDLE_PRAGMA_PACK_PUSH_POP\n+\n+/* This is the pseudo-op used to generate a 32-bit word of data with a\n+   specific value in some section.  */\n+\n+#define INT_ASM_OP \"\\t.long\\t\""}, {"sha": "4653346f4bb24541e6c857d4352fa6ee12d35462", "filename": "gcc/config/i386/freebsd-elf.h", "status": "removed", "additions": 0, "deletions": 143, "changes": 143, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1db88ef97966a671405ab7d165e1b11fa1e2bc61/gcc%2Fconfig%2Fi386%2Ffreebsd-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1db88ef97966a671405ab7d165e1b11fa1e2bc61/gcc%2Fconfig%2Fi386%2Ffreebsd-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ffreebsd-elf.h?ref=1db88ef97966a671405ab7d165e1b11fa1e2bc61", "patch": "@@ -1,143 +0,0 @@\n-/* Definitions for Intel 386 running FreeBSD with ELF format\n-   Copyright (C) 1996, 2000 Free Software Foundation, Inc.\n-   Contributed by Eric Youngdale.\n-   Modified for stabs-in-ELF by H.J. Lu.\n-   Adapted from GNU/Linux version by John Polstra.\n-   Continued development by David O'Brien <obrien@freebsd.org>\n-\n-This file is part of GNU CC.\n-\n-GNU CC is free software; you can redistribute it and/or modify\n-it under the terms of the GNU General Public License as published by\n-the Free Software Foundation; either version 2, or (at your option)\n-any later version.\n-\n-GNU CC is distributed in the hope that it will be useful,\n-but WITHOUT ANY WARRANTY; without even the implied warranty of\n-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-GNU General Public License for more details.\n-\n-You should have received a copy of the GNU General Public License\n-along with GNU CC; see the file COPYING.  If not, write to\n-the Free Software Foundation, 59 Temple Place - Suite 330,\n-Boston, MA 02111-1307, USA.  */\n-\n-#undef TARGET_VERSION\n-#define TARGET_VERSION fprintf (stderr, \" (i386 FreeBSD/ELF)\");\n-\n-/* Override the default comment-starter of \"/\".  */\n-#undef ASM_COMMENT_START\n-#define ASM_COMMENT_START \"#\"\n-\n-#undef ASM_APP_ON\n-#define ASM_APP_ON \"#APP\\n\"\n-\n-#undef ASM_APP_OFF\n-#define ASM_APP_OFF \"#NO_APP\\n\"\n-\n-#undef SET_ASM_OP\n-#define SET_ASM_OP\t\"\\t.set\\t\"\n-\n-/* This is how to output an element of a case-vector that is relative.\n-   This is only used for PIC code.  See comments by the `casesi' insn in\n-   i386.md for an explanation of the expression this outputs. */\n-#undef ASM_OUTPUT_ADDR_DIFF_ELT\n-#define ASM_OUTPUT_ADDR_DIFF_ELT(FILE, BODY, VALUE, REL) \\\n-  fprintf ((FILE), \"\\t.long _GLOBAL_OFFSET_TABLE_+[.-%s%d]\\n\", LPREFIX, VALUE)\n-\n-/* Indicate that jump tables go in the text section.  This is\n-   necessary when compiling PIC code.  */\n-#define JUMP_TABLES_IN_TEXT_SECTION (flag_pic)\n-\n-#undef DBX_REGISTER_NUMBER\n-#define DBX_REGISTER_NUMBER(n)  svr4_dbx_register_map[n]\n-\n-/* Tell final.c that we don't need a label passed to mcount.  */\n-\n-#undef FUNCTION_PROFILER\n-#define FUNCTION_PROFILER(FILE, LABELNO)  \\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (flag_pic)\t\t\t\t\t\t\t\t\\\n-      fprintf ((FILE), \"\\tcall *.mcount@GOT(%%ebx)\\n\");\t\t\t\\\n-  else\t\t\t\t\t\t\t\t\t\\\n-      fprintf ((FILE), \"\\tcall .mcount\\n\");\t\t\t\t\\\n-}\n-\n-/* Make gcc agree with <machine/ansi.h>.  */\n-\n-#undef SIZE_TYPE\n-#define SIZE_TYPE \"unsigned int\"\n- \n-#undef PTRDIFF_TYPE\n-#define PTRDIFF_TYPE \"int\"\n-  \n-#undef WCHAR_TYPE_SIZE\n-#define WCHAR_TYPE_SIZE BITS_PER_WORD\n-    \n-#undef CPP_PREDEFINES\n-#define CPP_PREDEFINES \"-Dunix -D__ELF__ -D__FreeBSD__\\\n- -Asystem(unix) -Asystem(bsd) -Asystem(FreeBSD)\"\n-\n-/* Provide a STARTFILE_SPEC appropriate for FreeBSD.  Here we add\n-   the magical crtbegin.o file (see crtstuff.c) which provides part \n-\tof the support for getting C++ file-scope static object constructed \n-\tbefore entering `main'. */\n-   \n-#undef\tSTARTFILE_SPEC\n-#define STARTFILE_SPEC \\\n-  \"%{!shared: \\\n-     %{pg:gcrt1.o%s} %{!pg:%{p:gcrt1.o%s} \\\n-\t\t       %{!p:%{profile:gcrt1.o%s} \\\n-\t\t\t %{!profile:crt1.o%s}}}} \\\n-   crti.o%s %{!shared:crtbegin.o%s} %{shared:crtbeginS.o%s}\"\n-\n-/* Provide a ENDFILE_SPEC appropriate for FreeBSD.  Here we tack on\n-   the magical crtend.o file (see crtstuff.c) which provides part of \n-\tthe support for getting C++ file-scope static object constructed \n-\tbefore entering `main', followed by a normal \"finalizer\" file, \n-\t`crtn.o'.  */\n-\n-#undef\tENDFILE_SPEC\n-#define ENDFILE_SPEC \\\n-  \"%{!shared:crtend.o%s} %{shared:crtendS.o%s} crtn.o%s\"\n-\n-/* Provide a LINK_SPEC appropriate for FreeBSD.  Here we provide support\n-   for the special GCC options -static and -shared, which allow us to\n-   link things in one of these three modes by applying the appropriate\n-   combinations of options at link-time. We like to support here for\n-   as many of the other GNU linker options as possible. But I don't\n-   have the time to search for those flags. I am sure how to add\n-   support for -soname shared_object_name. H.J.\n-\n-   I took out %{v:%{!V:-V}}. It is too much :-(. They can use\n-   -Wl,-V.\n-\n-   When the -shared link option is used a final link is not being\n-   done.  */\n-\n-#undef\tLINK_SPEC\n-#define LINK_SPEC \"-m elf_i386 \\\n-  %{Wl,*:%*} \\\n-  %{v:-V} \\\n-  %{assert*} %{R*} %{rpath*} %{defsym*} \\\n-  %{shared:-Bshareable %{h*} %{soname*}} \\\n-    %{!shared: \\\n-      %{!static: \\\n-        %{rdynamic:-export-dynamic} \\\n-\t%{!dynamic-linker:-dynamic-linker /usr/libexec/ld-elf.so.1}} \\\n-    %{static:-Bstatic}} \\\n-  %{symbolic:-Bsymbolic}\"\n-\n-/* A C statement to output to the stdio stream FILE an assembler\n-   command to advance the location counter to a multiple of 1<<LOG\n-   bytes if it is within MAX_SKIP bytes.\n-\n-   This is used to align code labels according to Intel recommendations.  */\n-\n-#ifdef HAVE_GAS_MAX_SKIP_P2ALIGN\n-#define ASM_OUTPUT_MAX_SKIP_ALIGN(FILE, LOG, MAX_SKIP)\t\t\t\t\t\\\n-  if ((LOG) != 0) {\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\\n-    if ((MAX_SKIP) == 0) fprintf ((FILE), \"\\t.p2align %d\\n\", (LOG));\t\\\n-    else fprintf ((FILE), \"\\t.p2align %d,,%d\\n\", (LOG), (MAX_SKIP));\t\\\n-  }\n-#endif"}, {"sha": "4653346f4bb24541e6c857d4352fa6ee12d35462", "filename": "gcc/config/i386/freebsd.h", "status": "modified", "additions": 94, "deletions": 203, "changes": 297, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e5a1f5931abac1ced8f9b8e12bd5db19c9b844/gcc%2Fconfig%2Fi386%2Ffreebsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e5a1f5931abac1ced8f9b8e12bd5db19c9b844/gcc%2Fconfig%2Fi386%2Ffreebsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ffreebsd.h?ref=41e5a1f5931abac1ced8f9b8e12bd5db19c9b844", "patch": "@@ -1,8 +1,9 @@\n-/* Definitions of target machine for GNU compiler for Intel 80386\n-   running FreeBSD.\n-   Copyright (C) 1988, 1992, 1994, 1996, 1997, 1999, 2000 Free Software\n-   Foundation, Inc.\n-   Contributed by Poul-Henning Kamp <phk@login.dkuug.dk>\n+/* Definitions for Intel 386 running FreeBSD with ELF format\n+   Copyright (C) 1996, 2000 Free Software Foundation, Inc.\n+   Contributed by Eric Youngdale.\n+   Modified for stabs-in-ELF by H.J. Lu.\n+   Adapted from GNU/Linux version by John Polstra.\n+   Continued development by David O'Brien <obrien@freebsd.org>\n \n This file is part of GNU CC.\n \n@@ -21,42 +22,10 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-/* This is tested by i386gas.h.  */\n-#define YES_UNDERSCORES\n-\n-/* Don't assume anything about the header files. */\n-#define NO_IMPLICIT_EXTERN_C\n-\n-#include \"i386/gstabs.h\"\n-\n-/* This goes away when the math-emulator is fixed */\n-#undef TARGET_DEFAULT\n-#define TARGET_DEFAULT \\\n-  (MASK_80387 | MASK_IEEE_FP | MASK_FLOAT_RETURNS | MASK_NO_FANCY_MATH_387)\n-\n-#undef CPP_PREDEFINES\n-#define CPP_PREDEFINES \"-Dunix -D__FreeBSD__\\\n- -Asystem(unix) -Asystem(bsd) -Asystem(FreeBSD)\"\n-\n-/* Like the default, except no -lg.  */\n-#define LIB_SPEC \"%{!shared:%{!pg:-lc}%{pg:-lc_p}}\"\n-\n-#undef SIZE_TYPE\n-#define SIZE_TYPE \"unsigned int\"\n-\n-#undef PTRDIFF_TYPE\n-#define PTRDIFF_TYPE \"int\"\n-\n-#undef WCHAR_TYPE\n-#define WCHAR_TYPE \"int\"\n-\n-#define WCHAR_UNSIGNED 0\n-\n-#undef WCHAR_TYPE_SIZE\n-#define WCHAR_TYPE_SIZE BITS_PER_WORD\n+#undef TARGET_VERSION\n+#define TARGET_VERSION fprintf (stderr, \" (i386 FreeBSD/ELF)\");\n \n /* Override the default comment-starter of \"/\".  */\n-\n #undef ASM_COMMENT_START\n #define ASM_COMMENT_START \"#\"\n \n@@ -66,187 +35,109 @@ Boston, MA 02111-1307, USA.  */\n #undef ASM_APP_OFF\n #define ASM_APP_OFF \"#NO_APP\\n\"\n \n-/* FreeBSD using a.out does not support DWARF2 unwinding mechanisms.  */\n-#define DWARF2_UNWIND_INFO 0\n-\f\n-/* The following macros are stolen from i386v4.h */\n-/* These have to be defined to get PIC code correct */\n+#undef SET_ASM_OP\n+#define SET_ASM_OP\t\"\\t.set\\t\"\n \n /* This is how to output an element of a case-vector that is relative.\n    This is only used for PIC code.  See comments by the `casesi' insn in\n    i386.md for an explanation of the expression this outputs. */\n-\n #undef ASM_OUTPUT_ADDR_DIFF_ELT\n #define ASM_OUTPUT_ADDR_DIFF_ELT(FILE, BODY, VALUE, REL) \\\n-  fprintf (FILE, \"\\t.long _GLOBAL_OFFSET_TABLE_+[.-%s%d]\\n\", LPREFIX, VALUE)\n+  fprintf ((FILE), \"\\t.long _GLOBAL_OFFSET_TABLE_+[.-%s%d]\\n\", LPREFIX, VALUE)\n \n /* Indicate that jump tables go in the text section.  This is\n    necessary when compiling PIC code.  */\n+#define JUMP_TABLES_IN_TEXT_SECTION (flag_pic)\n+\n+#undef DBX_REGISTER_NUMBER\n+#define DBX_REGISTER_NUMBER(n)  svr4_dbx_register_map[n]\n+\n+/* Tell final.c that we don't need a label passed to mcount.  */\n \n-#define JUMP_TABLES_IN_TEXT_SECTION 1\n-\n-/* Don't default to pcc-struct-return, because in FreeBSD we prefer the\n-   superior nature of the older gcc way.  */\n-#define DEFAULT_PCC_STRUCT_RETURN 0\n-\n-/* Ensure we the configuration knows our system correctly so we can link with\n-   libraries compiled with the native cc. */\n-#undef NO_DOLLAR_IN_LABEL\n-\f\n-/* i386 freebsd still uses old binutils that don't insert nops by default\n-   when the .align directive demands to insert extra space in the text\n-   segment.  */\n-#undef ASM_OUTPUT_ALIGN\n-#define ASM_OUTPUT_ALIGN(FILE,LOG) \\\n-  if ((LOG)!=0) fprintf ((FILE), \"\\t.align %d,0x90\\n\", (LOG))\n-\f\n-/* Profiling routines, partially copied from i386/osfrose.h.  */\n-\n-/* Redefine this to use %eax instead of %edx.  */\n #undef FUNCTION_PROFILER\n #define FUNCTION_PROFILER(FILE, LABELNO)  \\\n {\t\t\t\t\t\t\t\t\t\\\n   if (flag_pic)\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      fprintf (FILE, \"\\tleal %sP%d@GOTOFF(%%ebx),%%eax\\n\",\t\t\\\n-\t       LPREFIX, (LABELNO));\t\t\t\t\t\\\n-      fprintf (FILE, \"\\tcall *mcount@GOT(%%ebx)\\n\");\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n+      fprintf ((FILE), \"\\tcall *.mcount@GOT(%%ebx)\\n\");\t\t\t\\\n   else\t\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      fprintf (FILE, \"\\tmovl $%sP%d,%%eax\\n\", LPREFIX, (LABELNO));\t\\\n-      fprintf (FILE, \"\\tcall mcount\\n\");\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n+      fprintf ((FILE), \"\\tcall .mcount\\n\");\t\t\t\t\\\n }\n \n-/*\n- * Some imports from svr4.h in support of shared libraries.\n- * Currently, we need the DECLARE_OBJECT_SIZE stuff.\n- */\n-\n-/* Define the strings used for the special svr4 .type and .size directives.\n-   These strings generally do not vary from one system running svr4 to\n-   another, but if a given system (e.g. m88k running svr) needs to use\n-   different pseudo-op names for these, they may be overridden in the\n-   file which includes this one.  */\n+/* Make gcc agree with <machine/ansi.h>.  */\n \n-#define TYPE_ASM_OP\t\"\\t.type\\t\"\n-#define SIZE_ASM_OP\t\"\\t.size\\t\"\n-\n-/* The following macro defines the format used to output the second\n-   operand of the .type assembler directive.  Different svr4 assemblers\n-   expect various different forms for this operand.  The one given here\n-   is just a default.  You may need to override it in your machine-\n-   specific tm.h file (depending upon the particulars of your assembler).  */\n-\n-#define TYPE_OPERAND_FMT\t\"@%s\"\n-\n-/* Write the extra assembler code needed to declare a function's result.\n-   Most svr4 assemblers don't require any special declaration of the\n-   result value, but there are exceptions.  */\n+#undef SIZE_TYPE\n+#define SIZE_TYPE \"unsigned int\"\n+ \n+#undef PTRDIFF_TYPE\n+#define PTRDIFF_TYPE \"int\"\n+  \n+#undef WCHAR_TYPE_SIZE\n+#define WCHAR_TYPE_SIZE BITS_PER_WORD\n+    \n+#undef CPP_PREDEFINES\n+#define CPP_PREDEFINES \"-Dunix -D__ELF__ -D__FreeBSD__\\\n+ -Asystem(unix) -Asystem(bsd) -Asystem(FreeBSD)\"\n \n-#ifndef ASM_DECLARE_RESULT\n-#define ASM_DECLARE_RESULT(FILE, RESULT)\n+/* Provide a STARTFILE_SPEC appropriate for FreeBSD.  Here we add\n+   the magical crtbegin.o file (see crtstuff.c) which provides part \n+\tof the support for getting C++ file-scope static object constructed \n+\tbefore entering `main'. */\n+   \n+#undef\tSTARTFILE_SPEC\n+#define STARTFILE_SPEC \\\n+  \"%{!shared: \\\n+     %{pg:gcrt1.o%s} %{!pg:%{p:gcrt1.o%s} \\\n+\t\t       %{!p:%{profile:gcrt1.o%s} \\\n+\t\t\t %{!profile:crt1.o%s}}}} \\\n+   crti.o%s %{!shared:crtbegin.o%s} %{shared:crtbeginS.o%s}\"\n+\n+/* Provide a ENDFILE_SPEC appropriate for FreeBSD.  Here we tack on\n+   the magical crtend.o file (see crtstuff.c) which provides part of \n+\tthe support for getting C++ file-scope static object constructed \n+\tbefore entering `main', followed by a normal \"finalizer\" file, \n+\t`crtn.o'.  */\n+\n+#undef\tENDFILE_SPEC\n+#define ENDFILE_SPEC \\\n+  \"%{!shared:crtend.o%s} %{shared:crtendS.o%s} crtn.o%s\"\n+\n+/* Provide a LINK_SPEC appropriate for FreeBSD.  Here we provide support\n+   for the special GCC options -static and -shared, which allow us to\n+   link things in one of these three modes by applying the appropriate\n+   combinations of options at link-time. We like to support here for\n+   as many of the other GNU linker options as possible. But I don't\n+   have the time to search for those flags. I am sure how to add\n+   support for -soname shared_object_name. H.J.\n+\n+   I took out %{v:%{!V:-V}}. It is too much :-(. They can use\n+   -Wl,-V.\n+\n+   When the -shared link option is used a final link is not being\n+   done.  */\n+\n+#undef\tLINK_SPEC\n+#define LINK_SPEC \"-m elf_i386 \\\n+  %{Wl,*:%*} \\\n+  %{v:-V} \\\n+  %{assert*} %{R*} %{rpath*} %{defsym*} \\\n+  %{shared:-Bshareable %{h*} %{soname*}} \\\n+    %{!shared: \\\n+      %{!static: \\\n+        %{rdynamic:-export-dynamic} \\\n+\t%{!dynamic-linker:-dynamic-linker /usr/libexec/ld-elf.so.1}} \\\n+    %{static:-Bstatic}} \\\n+  %{symbolic:-Bsymbolic}\"\n+\n+/* A C statement to output to the stdio stream FILE an assembler\n+   command to advance the location counter to a multiple of 1<<LOG\n+   bytes if it is within MAX_SKIP bytes.\n+\n+   This is used to align code labels according to Intel recommendations.  */\n+\n+#ifdef HAVE_GAS_MAX_SKIP_P2ALIGN\n+#define ASM_OUTPUT_MAX_SKIP_ALIGN(FILE, LOG, MAX_SKIP)\t\t\t\t\t\\\n+  if ((LOG) != 0) {\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\\n+    if ((MAX_SKIP) == 0) fprintf ((FILE), \"\\t.p2align %d\\n\", (LOG));\t\\\n+    else fprintf ((FILE), \"\\t.p2align %d,,%d\\n\", (LOG), (MAX_SKIP));\t\\\n+  }\n #endif\n-\n-/* These macros generate the special .type and .size directives which\n-   are used to set the corresponding fields of the linker symbol table\n-   entries in an ELF object file under SVR4.  These macros also output\n-   the starting labels for the relevant functions/objects.  */\n-\n-/* Write the extra assembler code needed to declare a function properly.\n-   Some svr4 assemblers need to also have something extra said about the\n-   function's return value.  We allow for that here.  */\n-\n-#define ASM_DECLARE_FUNCTION_NAME(FILE, NAME, DECL)\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-    fprintf (FILE, \"%s\", TYPE_ASM_OP);\t\t\t\t\t\\\n-    assemble_name (FILE, NAME);\t\t\t\t\t\t\\\n-    putc (',', FILE);\t\t\t\t\t\t\t\\\n-    fprintf (FILE, TYPE_OPERAND_FMT, \"function\");\t\t\t\\\n-    putc ('\\n', FILE);\t\t\t\t\t\t\t\\\n-    ASM_DECLARE_RESULT (FILE, DECL_RESULT (DECL));\t\t\t\\\n-    ASM_OUTPUT_LABEL(FILE, NAME);\t\t\t\t\t\\\n-  } while (0)\n-\n-/* Write the extra assembler code needed to declare an object properly.  */\n-\n-#define ASM_DECLARE_OBJECT_NAME(FILE, NAME, DECL)\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-    fprintf (FILE, \"%s\", TYPE_ASM_OP);\t\t\t\t\t\\\n-    assemble_name (FILE, NAME);\t\t\t\t\t\t\\\n-    putc (',', FILE);\t\t\t\t\t\t\t\\\n-    fprintf (FILE, TYPE_OPERAND_FMT, \"object\");\t\t\t\t\\\n-    putc ('\\n', FILE);\t\t\t\t\t\t\t\\\n-    size_directive_output = 0;\t\t\t\t\t\t\\\n-    if (!flag_inhibit_size_directive && DECL_SIZE (DECL))\t\t\\\n-      {\t\t\t\t\t\t\t\t\t\\\n-        size_directive_output = 1;\t\t\t\t\t\\\n-\tfprintf (FILE, \"%s\", SIZE_ASM_OP);\t\t\t\t\\\n-\tassemble_name (FILE, NAME);\t\t\t\t\t\\\n-\tfprintf (FILE, \",%d\\n\",  int_size_in_bytes (TREE_TYPE (DECL)));\t\\\n-      }\t\t\t\t\t\t\t\t\t\\\n-    ASM_OUTPUT_LABEL(FILE, NAME);\t\t\t\t\t\\\n-  } while (0)\n-\n-/* Output the size directive for a decl in rest_of_decl_compilation\n-   in the case where we did not do so before the initializer.\n-   Once we find the error_mark_node, we know that the value of\n-   size_directive_output was set\n-   by ASM_DECLARE_OBJECT_NAME when it was run for the same decl.  */\n-\n-#define ASM_FINISH_DECLARE_OBJECT(FILE, DECL, TOP_LEVEL, AT_END)        \\\n-do {                                                                    \\\n-     const char *name = XSTR (XEXP (DECL_RTL (DECL), 0), 0);            \\\n-     if (!flag_inhibit_size_directive && DECL_SIZE (DECL)\t        \\\n-         && ! AT_END && TOP_LEVEL                                       \\\n-         && DECL_INITIAL (DECL) == error_mark_node                      \\\n-         && !size_directive_output)                                     \\\n-       {                                                                \\\n-         fprintf (FILE, \"%s\", SIZE_ASM_OP);                             \\\n-\t assemble_name (FILE, name);                                    \\\n-\t fprintf (FILE, \",%d\\n\",  int_size_in_bytes (TREE_TYPE (DECL)));\\\n-\t}\t\t\t\t\t\t\t\t\\\n-   } while (0)\n-\n-\n-/* This is how to declare the size of a function.  */\n-\n-#define ASM_DECLARE_FUNCTION_SIZE(FILE, FNAME, DECL)\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-    if (!flag_inhibit_size_directive)\t\t\t\t\t\\\n-      {\t\t\t\t\t\t\t\t\t\\\n-        char label[256];\t\t\t\t\t\t\\\n-\tstatic int labelno;\t\t\t\t\t\t\\\n-\tlabelno++;\t\t\t\t\t\t\t\\\n-\tASM_GENERATE_INTERNAL_LABEL (label, \"Lfe\", labelno);\t\t\\\n-\tASM_OUTPUT_INTERNAL_LABEL (FILE, \"Lfe\", labelno);\t\t\\\n-\tfprintf (FILE, \"%s\", SIZE_ASM_OP);\t\t\t\t\\\n-\tassemble_name (FILE, (FNAME));\t\t\t\t\t\\\n-        fprintf (FILE, \",\");\t\t\t\t\t\t\\\n-\tassemble_name (FILE, label);\t\t\t\t\t\\\n-        fprintf (FILE, \"-\");\t\t\t\t\t\t\\\n-\tassemble_name (FILE, (FNAME));\t\t\t\t\t\\\n-\tputc ('\\n', FILE);\t\t\t\t\t\t\\\n-      }\t\t\t\t\t\t\t\t\t\\\n-  } while (0)\n-\n-#define ASM_SPEC   \" %| %{fpic:-k} %{fPIC:-k}\"\n-#define LINK_SPEC \\\n-  \"%{p:%e`-p' not supported; use `-pg' and gprof(1)} \\\n-   %{shared:-Bshareable} \\\n-   %{!shared:%{!nostdlib:%{!r:%{!e*:-e start}}} -dc -dp %{static:-Bstatic} \\\n-   %{pg:-Bstatic} %{Z}} \\\n-   %{assert*} %{R*}\"\n-\n-#define STARTFILE_SPEC  \\\n-  \"%{shared:c++rt0.o%s} \\\n-   %{!shared:%{pg:gcrt0.o%s}%{!pg:%{static:scrt0.o%s}%{!static:crt0.o%s}}}\"\n-\n-/* Define this so we can compile MS code for use with WINE.  */\n-#define HANDLE_PRAGMA_PACK_PUSH_POP\n-\n-/* This is the pseudo-op used to generate a 32-bit word of data with a\n-   specific value in some section.  */\n-\n-#define INT_ASM_OP \"\\t.long\\t\""}, {"sha": "eadb8be6406152afd21a3ab14a708f7f5d1e4bb9", "filename": "gcc/configure", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e5a1f5931abac1ced8f9b8e12bd5db19c9b844/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e5a1f5931abac1ced8f9b8e12bd5db19c9b844/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=41e5a1f5931abac1ced8f9b8e12bd5db19c9b844", "patch": "@@ -4562,11 +4562,11 @@ for machine in $build $host $target; do\n #\t\tuse_collect2=yes\n \t\t;;\n \ti[34567]86-*-freebsd[12] | i[34567]86-*-freebsd[12].* | i[34567]86-*-freebsd*aout*)\n-\t\ttm_file=\"i386/freebsd.h i386/perform.h\"\n+\t\ttm_file=\"i386/freebsd-aout.h i386/perform.h\"\n \t\ttmake_file=t-freebsd\n \t\t;;\n \ti[34567]86-*-freebsd*)\n-\t\ttm_file=\"i386/i386.h i386/att.h svr4.h freebsd.h i386/freebsd-elf.h i386/perform.h\"\n+\t\ttm_file=\"i386/i386.h i386/att.h svr4.h freebsd.h i386/freebsd.h i386/perform.h\"\n \t\textra_parts=\"crtbegin.o crtbeginS.o crtend.o crtendS.o\"\n \t\ttmake_file=t-freebsd\n \t\tgas=yes"}, {"sha": "dfbeca2cedcd3f1a6b5915cf080a9ef6ca84b3b0", "filename": "gcc/configure.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e5a1f5931abac1ced8f9b8e12bd5db19c9b844/gcc%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e5a1f5931abac1ced8f9b8e12bd5db19c9b844/gcc%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.in?ref=41e5a1f5931abac1ced8f9b8e12bd5db19c9b844", "patch": "@@ -1477,13 +1477,13 @@ changequote([,])dnl\n changequote(,)dnl\n \ti[34567]86-*-freebsd[12] | i[34567]86-*-freebsd[12].* | i[34567]86-*-freebsd*aout*)\n changequote([,])dnl\n-\t\ttm_file=\"i386/freebsd.h i386/perform.h\"\n+\t\ttm_file=\"i386/freebsd-aout.h i386/perform.h\"\n \t\ttmake_file=t-freebsd\n \t\t;;\n changequote(,)dnl\n \ti[34567]86-*-freebsd*)\n changequote([,])dnl\n-\t\ttm_file=\"i386/i386.h i386/att.h svr4.h freebsd.h i386/freebsd-elf.h i386/perform.h\"\n+\t\ttm_file=\"i386/i386.h i386/att.h svr4.h freebsd.h i386/freebsd.h i386/perform.h\"\n \t\textra_parts=\"crtbegin.o crtbeginS.o crtend.o crtendS.o\"\n \t\ttmake_file=t-freebsd\n \t\tgas=yes"}, {"sha": "69eced98e45e77c6827e7e1189c26dd89a1cf177", "filename": "gcc/po/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e5a1f5931abac1ced8f9b8e12bd5db19c9b844/gcc%2Fpo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e5a1f5931abac1ced8f9b8e12bd5db19c9b844/gcc%2Fpo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpo%2FChangeLog?ref=41e5a1f5931abac1ced8f9b8e12bd5db19c9b844", "patch": "@@ -1,3 +1,9 @@\n+2000-09-28  David O'Brien  <obrien@FreeBSD.org>\n+\n+\t* po/POTFILES.in: Adjust for move of freebsd.h -> freebsd-aout.h\n+\t* po/en_GB.po: Likewise.\n+\t* po/gcc.pot: Likewise.\n+\n 2000-09-26  Philipp Thomas  <pthomas@suse.de>\n \n \t* Makefile.in.in: Remove stamp-check-pot from list"}, {"sha": "b99efbb6cc8b283da8dada4b0e26103484cc00c2", "filename": "gcc/po/POTFILES.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e5a1f5931abac1ced8f9b8e12bd5db19c9b844/gcc%2Fpo%2FPOTFILES.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e5a1f5931abac1ced8f9b8e12bd5db19c9b844/gcc%2Fpo%2FPOTFILES.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpo%2FPOTFILES.in?ref=41e5a1f5931abac1ced8f9b8e12bd5db19c9b844", "patch": "@@ -166,7 +166,7 @@ config/i386/crtdll.h\n config/i386/cygwin.h\n config/i386/dgux.c\n config/i386/dgux.h\n-config/i386/freebsd-elf.h\n+config/i386/freebsd-aout.h\n config/i386/freebsd.h\n config/i386/gas.h\n config/i386/gmon-sol2.c"}, {"sha": "cdfa1dce075d87aea6fe774d80de99086d3f8186", "filename": "gcc/po/en_GB.po", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e5a1f5931abac1ced8f9b8e12bd5db19c9b844/gcc%2Fpo%2Fen_GB.po", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e5a1f5931abac1ced8f9b8e12bd5db19c9b844/gcc%2Fpo%2Fen_GB.po", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpo%2Fen_GB.po?ref=41e5a1f5931abac1ced8f9b8e12bd5db19c9b844", "patch": "@@ -4320,7 +4320,7 @@ msgstr \"\"\n msgid \"A -ifile option requires a -map option\"\n msgstr \"\"\n \n-#: config/i386/freebsd.h:236\n+#: config/i386/freebsd-aout.h:236\n msgid \"`-p' not supported; use `-pg' and gprof(1)\"\n msgstr \"\"\n "}, {"sha": "f517c5c51d9a19a22b07e946975d9b38d7288486", "filename": "gcc/po/gcc.pot", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e5a1f5931abac1ced8f9b8e12bd5db19c9b844/gcc%2Fpo%2Fgcc.pot", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e5a1f5931abac1ced8f9b8e12bd5db19c9b844/gcc%2Fpo%2Fgcc.pot", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpo%2Fgcc.pot?ref=41e5a1f5931abac1ced8f9b8e12bd5db19c9b844", "patch": "@@ -10810,7 +10810,7 @@ msgstr \"\"\n msgid \"A -ifile option requires a -map option\"\n msgstr \"\"\n \n-#: config/i386/freebsd.h:236\n+#: config/i386/freebsd-aout.h:236\n msgid \"`-p' not supported; use `-pg' and gprof(1)\"\n msgstr \"\"\n "}]}