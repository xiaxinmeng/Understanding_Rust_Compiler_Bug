{"sha": "93e3ba4f76f03707689b847c6b96b1b17c14a5f5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTNlM2JhNGY3NmYwMzcwNzY4OWI4NDdjNmI5NmIxYjE3YzE0YTVmNQ==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-05-18T05:09:24Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-05-18T05:09:24Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r1006", "tree": {"sha": "078ae13ae6a6d5d2faaffa94e8575721415ad7b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/078ae13ae6a6d5d2faaffa94e8575721415ad7b7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/93e3ba4f76f03707689b847c6b96b1b17c14a5f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93e3ba4f76f03707689b847c6b96b1b17c14a5f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93e3ba4f76f03707689b847c6b96b1b17c14a5f5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93e3ba4f76f03707689b847c6b96b1b17c14a5f5/comments", "author": null, "committer": null, "parents": [{"sha": "26b3c423d5a1bbefbdd659dce21a84a260bae459", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26b3c423d5a1bbefbdd659dce21a84a260bae459", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26b3c423d5a1bbefbdd659dce21a84a260bae459"}], "stats": {"total": 32, "additions": 24, "deletions": 8}, "files": [{"sha": "fd0eb57d3a7c1d9087655b8c6fb469439995c234", "filename": "gcc/c-decl.c", "status": "modified", "additions": 24, "deletions": 8, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93e3ba4f76f03707689b847c6b96b1b17c14a5f5/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93e3ba4f76f03707689b847c6b96b1b17c14a5f5/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=93e3ba4f76f03707689b847c6b96b1b17c14a5f5", "patch": "@@ -203,6 +203,10 @@ int pending_invalid_xref_line;\n \n static tree enum_next_value;\n \n+/* Nonzero means that there was overflow computing enum_next_value.  */\n+\n+static int enum_overflow;\n+\n /* Parsing a function declarator leaves a list of parameter names\n    or a chain or parameter decls here.  */\n \n@@ -3100,7 +3104,7 @@ void\n push_parm_decl (parm)\n      tree parm;\n {\n-  tree decl;\n+  tree decl, olddecl;\n   int old_immediate_size_expand = immediate_size_expand;\n   /* Don't try computing parm sizes now -- wait till fn is called.  */\n   immediate_size_expand = 0;\n@@ -3109,6 +3113,12 @@ push_parm_decl (parm)\n   push_obstacks_nochange ();\n \n   decl = grokdeclarator (TREE_VALUE (parm), TREE_PURPOSE (parm), PARM, 0);\n+  if (DECL_NAME (decl))\n+    {\n+      olddecl = lookup_name (DECL_NAME (decl));\n+      if (pedantic && olddecl != 0 && TREE_CODE (olddecl) == TYPE_DECL)\n+\tpedwarn_with_decl (decl, \"ANSI C forbids parameter `%s' shadowing typedef\");\n+    }\n   decl = pushdecl (decl);\n \n   immediate_size_expand = old_immediate_size_expand;\n@@ -3339,7 +3349,7 @@ grokdeclarator (declarator, declspecs, decl_context, initialized)\n \t\t      longlong = 1;\n \t\t  }\n \t\telse if (specbits & (1 << i))\n-\t\t  warning (\"duplicate `%s'\", IDENTIFIER_POINTER (id));\n+\t\t  pedwarn (\"duplicate `%s'\", IDENTIFIER_POINTER (id));\n \t\tspecbits |= 1 << i;\n \t\tgoto found;\n \t      }\n@@ -3490,9 +3500,9 @@ grokdeclarator (declarator, declspecs, decl_context, initialized)\n   volatilep = !! (specbits & 1 << (int) RID_VOLATILE) + TYPE_VOLATILE (type);\n   inlinep = !! (specbits & (1 << (int) RID_INLINE));\n   if (constp > 1)\n-    warning (\"duplicate `const'\");\n+    pedwarn (\"duplicate `const'\");\n   if (volatilep > 1)\n-    warning (\"duplicate `volatile'\");\n+    pedwarn (\"duplicate `volatile'\");\n   if (! flag_gen_aux_info && (TYPE_READONLY (type) || TYPE_VOLATILE (type)))\n     type = TYPE_MAIN_VARIANT (type);\n \n@@ -4793,6 +4803,7 @@ start_enum (name)\n     }\n \n   enum_next_value = integer_zero_node;\n+  enum_overflow = 0;\n \n   return enumtype;\n }\n@@ -4931,7 +4942,11 @@ build_enumerator (name, value)\n   /* It should no longer be possible to have NON_LVALUE_EXPR\n      in the default.  */\n   if (value == 0)\n-    value = enum_next_value;\n+    {\n+      value = enum_next_value;\n+      if (enum_overflow)\n+\terror (\"overflow in enumeration values\");\n+    }\n \n   if (pedantic && ! int_fits_type_p (value, integer_type_node))\n     {\n@@ -4941,6 +4956,7 @@ build_enumerator (name, value)\n \n   /* Set basis for default for next value.  */\n   enum_next_value = build_binary_op (PLUS_EXPR, value, integer_one_node, 0);\n+  enum_overflow = tree_int_cst_lt (enum_next_value, value);\n \n   /* Now create a declaration for the enum value name.  */\n \n@@ -5082,9 +5098,6 @@ start_function (declspecs, declarator, nested)\n   if (TREE_ADDRESSABLE (DECL_ASSEMBLER_NAME (current_function_decl)))\n     TREE_ADDRESSABLE (current_function_decl) = 1;\n \n-  /* Declare __NAME__ for this function.  */\n-  declare_function_name (IDENTIFIER_POINTER (DECL_NAME (current_function_decl)));\n-\n   return 1;\n }\n \n@@ -5460,6 +5473,9 @@ store_parm_decls ()\n   if (c_function_varargs)\n     mark_varargs ();\n \n+  /* Declare __NAME__ for this function.  */\n+  declare_function_name (IDENTIFIER_POINTER (DECL_NAME (current_function_decl)));\n+\n   /* Set up parameters and prepare for return, for the function.  */\n \n   expand_function_start (fndecl, 0);"}]}