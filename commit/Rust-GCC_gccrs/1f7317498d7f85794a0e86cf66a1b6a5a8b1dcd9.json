{"sha": "1f7317498d7f85794a0e86cf66a1b6a5a8b1dcd9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWY3MzE3NDk4ZDdmODU3OTRhMGU4NmNmNjZhMWI2YTVhOGIxZGNkOQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2001-06-05T06:51:02Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2001-06-05T06:51:02Z"}, "message": "c-tree.h (lang_decl): Add pending_sizes fields.\n\n\t* c-tree.h (lang_decl): Add pending_sizes fields.\n\t* c-decl.c (store_parm_decls): Save pending_sizes away for nested\n\tfunctions.\n\t(c_expand_body): Expand them.\n\t(lang_mark_tree): Mark lang_decl:pending_sizes.\n\t* function.c (expand_pending_sizes): New function, broken out\n\tfrom ...\n\t(expand_function_start): ... here.\n\t* tree.h (expand_pending_sizes): Declare it.\n\nFrom-SVN: r42892", "tree": {"sha": "44b13ffdf8f48f0846c6fa756dcb798b1402864b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/44b13ffdf8f48f0846c6fa756dcb798b1402864b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1f7317498d7f85794a0e86cf66a1b6a5a8b1dcd9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f7317498d7f85794a0e86cf66a1b6a5a8b1dcd9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f7317498d7f85794a0e86cf66a1b6a5a8b1dcd9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f7317498d7f85794a0e86cf66a1b6a5a8b1dcd9/comments", "author": null, "committer": null, "parents": [{"sha": "333e14b0da82d2a6f002ca385175c63df7d6050a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/333e14b0da82d2a6f002ca385175c63df7d6050a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/333e14b0da82d2a6f002ca385175c63df7d6050a"}], "stats": {"total": 100, "additions": 85, "deletions": 15}, "files": [{"sha": "ae31dd4b3ef72a423b367d1af0a150fb202e22b8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f7317498d7f85794a0e86cf66a1b6a5a8b1dcd9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f7317498d7f85794a0e86cf66a1b6a5a8b1dcd9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1f7317498d7f85794a0e86cf66a1b6a5a8b1dcd9", "patch": "@@ -1,3 +1,15 @@\n+2001-06-04  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* c-tree.h (lang_decl): Add pending_sizes fields.\n+\t* c-decl.c (store_parm_decls): Save pending_sizes away for nested\n+\tfunctions.\n+\t(c_expand_body): Expand them.\n+\t(lang_mark_tree): Mark lang_decl:pending_sizes.\n+\t* function.c (expand_pending_sizes): New function, broken out \n+\tfrom ...\n+\t(expand_function_start): ... here.\n+\t* tree.h (expand_pending_sizes): Declare it.\n+\t\n 2001-06-04  Loren J. Rittle  <ljrittle@acm.org>\n \n \t* doc/install.texi: Update FreeBSD information.  Generalize"}, {"sha": "314a306d5609ea1cb42aebd51c188c6162b510ad", "filename": "gcc/c-decl.c", "status": "modified", "additions": 28, "deletions": 5, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f7317498d7f85794a0e86cf66a1b6a5a8b1dcd9/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f7317498d7f85794a0e86cf66a1b6a5a8b1dcd9/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=1f7317498d7f85794a0e86cf66a1b6a5a8b1dcd9", "patch": "@@ -6167,6 +6167,9 @@ store_parm_decls ()\n   /* Nonzero if this definition is written with a prototype.  */\n   int prototype = 0;\n \n+  /* The function containing FNDECL, if any.  */\n+  tree context = decl_function_context (fndecl);\n+\n   if (specparms != 0 && TREE_CODE (specparms) != TREE_LIST)\n     {\n       /* This case is when the function was defined with an ANSI prototype.\n@@ -6534,14 +6537,28 @@ store_parm_decls ()\n   gen_aux_info_record (fndecl, 1, 0, prototype);\n \n   /* Initialize the RTL code for the function.  */\n-\n   init_function_start (fndecl, input_filename, lineno);\n \n   /* Begin the statement tree for this function.  */\n   DECL_LANG_SPECIFIC (current_function_decl)\n-    =((struct lang_decl *) ggc_alloc (sizeof (struct lang_decl)));\n+    =((struct lang_decl *) ggc_alloc_cleared (sizeof (struct lang_decl)));\n   begin_stmt_tree (&DECL_SAVED_TREE (current_function_decl));\n \n+  /* If this is a nested function, save away the sizes of any\n+     variable-size types so that we can expand them when generating\n+     RTL.  */\n+  if (context)\n+    {\n+      tree t;\n+\n+      DECL_LANG_SPECIFIC (fndecl)->pending_sizes \n+\t= nreverse (get_pending_sizes ());\n+      for (t = DECL_LANG_SPECIFIC (fndecl)->pending_sizes;\n+\t   t;\n+\t   t = TREE_CHAIN (t))\n+\tSAVE_EXPR_CONTEXT (TREE_VALUE (t)) = context;\n+    }\n+\n   /* This function is being processed in whole-function mode.  */\n   cfun->x_whole_function_mode_p = 1;\n \n@@ -6786,9 +6803,14 @@ c_expand_body (fndecl, nested_p)\n   if (flag_syntax_only)\n     return;\n \n-  /* Squirrel away our current state.  */\n   if (nested_p)\n-    push_function_context ();\n+    {\n+      /* Make sure that we will evaluate variable-sized types involved\n+\t in our function's type.  */\n+      expand_pending_sizes (DECL_LANG_SPECIFIC (fndecl)->pending_sizes);\n+      /* Squirrel away our current state.  */\n+      push_function_context ();\n+    }\n \n   /* Initialize the RTL code for the function.  */\n   current_function_decl = fndecl;\n@@ -6823,7 +6845,7 @@ c_expand_body (fndecl, nested_p)\n   /* Allow the body of the function to be garbage collected.  */\n   DECL_SAVED_TREE (fndecl) = NULL_TREE;\n \n-  /* We hard-wired immediate_size_expand to zero in start_function.\n+  /* We hard-wired immediate_size_expand to zero above.\n      expand_function_end will decrement this variable.  So, we set the\n      variable to one here, so that after the decrement it will remain\n      zero.  */\n@@ -7116,6 +7138,7 @@ lang_mark_tree (t)\n     {\n       ggc_mark (DECL_LANG_SPECIFIC (t));\n       c_mark_lang_decl (&DECL_LANG_SPECIFIC (t)->base);\n+      ggc_mark_tree (DECL_LANG_SPECIFIC (t)->pending_sizes);\n     }\n }\n "}, {"sha": "1ea096f88b29e7fd20fe22dae56fbcd094479218", "filename": "gcc/c-tree.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f7317498d7f85794a0e86cf66a1b6a5a8b1dcd9/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f7317498d7f85794a0e86cf66a1b6a5a8b1dcd9/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=1f7317498d7f85794a0e86cf66a1b6a5a8b1dcd9", "patch": "@@ -41,12 +41,15 @@ struct lang_identifier\n   tree error_locus, limbo_value;\n };\n \n-/* Wrapping c_lang_decl in another struct is an unfortunate\n-   necessity.  */\n+/* Language-specific declaration information.  */\n \n struct lang_decl\n {\n   struct c_lang_decl base;\n+  /* The return types and parameter types may have variable size.\n+     This is a list of any SAVE_EXPRs that need to be evaluated to\n+     compute those sizes.  */\n+  tree pending_sizes;\n };\n \n /* Macros for access to language-specific slots in an identifier.  */"}, {"sha": "64df1bd42e6da148d4eee3c7552ba267e0784f14", "filename": "gcc/function.c", "status": "modified", "additions": 24, "deletions": 8, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f7317498d7f85794a0e86cf66a1b6a5a8b1dcd9/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f7317498d7f85794a0e86cf66a1b6a5a8b1dcd9/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=1f7317498d7f85794a0e86cf66a1b6a5a8b1dcd9", "patch": "@@ -6270,6 +6270,29 @@ expand_main_function ()\n \f\n extern struct obstack permanent_obstack;\n \n+/* The PENDING_SIZES represent the sizes of variable-sized types.\n+   Create RTL for the various sizes now (using temporary variables),\n+   so that we can refer to the sizes from the RTL we are generating\n+   for the current function.  The PENDING_SIZES are a TREE_LIST.  The\n+   TREE_VALUE of each node is a SAVE_EXPR.  */\n+\n+void\n+expand_pending_sizes (pending_sizes)\n+     tree pending_sizes;\n+{\n+  tree tem;\n+\n+  /* Evaluate now the sizes of any types declared among the arguments.  */\n+  for (tem = pending_sizes; tem; tem = TREE_CHAIN (tem))\n+    {\n+      expand_expr (TREE_VALUE (tem), const0_rtx, VOIDmode,\n+\t\t   EXPAND_MEMORY_USE_BAD);\n+      /* Flush the queue in case this parameter declaration has\n+\t side-effects.  */\n+      emit_queue ();\n+    }\n+}\n+\n /* Start the RTL for a new function, and set variables used for\n    emitting RTL.\n    SUBR is the FUNCTION_DECL node.\n@@ -6487,14 +6510,7 @@ expand_function_start (subr, parms_have_cleanups)\n   tail_recursion_reentry = emit_note (NULL, NOTE_INSN_DELETED);\n \n   /* Evaluate now the sizes of any types declared among the arguments.  */\n-  for (tem = nreverse (get_pending_sizes ()); tem; tem = TREE_CHAIN (tem))\n-    {\n-      expand_expr (TREE_VALUE (tem), const0_rtx, VOIDmode,\n-\t\t   EXPAND_MEMORY_USE_BAD);\n-      /* Flush the queue in case this parameter declaration has\n-\t side-effects.  */\n-      emit_queue ();\n-    }\n+  expand_pending_sizes (nreverse (get_pending_sizes ()));\n \n   /* Make sure there is a line number after the function entry setup code.  */\n   force_next_line_note ();"}, {"sha": "036b796982e0ea098e95a941346f6100b6e00be8", "filename": "gcc/testsuite/gcc.c-torture/compile/20010605-1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f7317498d7f85794a0e86cf66a1b6a5a8b1dcd9/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20010605-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f7317498d7f85794a0e86cf66a1b6a5a8b1dcd9/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20010605-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20010605-1.c?ref=1f7317498d7f85794a0e86cf66a1b6a5a8b1dcd9", "patch": "@@ -0,0 +1,15 @@\n+int\n+main (int argc, char **argv)\n+{\n+  int size = 10;\n+\n+  typedef struct {\n+    char val[size];\n+  } block;\n+  block retframe_block()\n+    {\n+      return *(block*)0;\n+    }\n+\n+  return 0;\n+}"}, {"sha": "8634acb6617a7e50d34d9176c1ce1452063ed2fa", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f7317498d7f85794a0e86cf66a1b6a5a8b1dcd9/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f7317498d7f85794a0e86cf66a1b6a5a8b1dcd9/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=1f7317498d7f85794a0e86cf66a1b6a5a8b1dcd9", "patch": "@@ -2720,6 +2720,7 @@ extern void print_obstack_name\t\tPARAMS ((char *, FILE *,\n #endif\n extern void expand_function_end\t\tPARAMS ((const char *, int, int));\n extern void expand_function_start\tPARAMS ((tree, int));\n+extern void expand_pending_sizes        PARAMS ((tree));\n \n extern int real_onep\t\t\tPARAMS ((tree));\n extern int real_twop\t\t\tPARAMS ((tree));"}]}