{"sha": "099590dcb65d899ffdf0c24785fb31dbdfed06cc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDk5NTkwZGNiNjVkODk5ZmZkZjBjMjQ3ODVmYjMxZGJkZmVkMDZjYw==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.vnet.ibm.com", "date": "2008-10-24T23:45:02Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2008-10-24T23:45:02Z"}, "message": "PR target/37841: Fix SPU abi\n\nFrom-SVN: r141356", "tree": {"sha": "841e64726b868ed51db543466533595a6ff847a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/841e64726b868ed51db543466533595a6ff847a6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/099590dcb65d899ffdf0c24785fb31dbdfed06cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/099590dcb65d899ffdf0c24785fb31dbdfed06cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/099590dcb65d899ffdf0c24785fb31dbdfed06cc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/099590dcb65d899ffdf0c24785fb31dbdfed06cc/comments", "author": null, "committer": null, "parents": [{"sha": "d3a5ecb5dcf6ad53d8d4256c54fca5256bfbd3bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3a5ecb5dcf6ad53d8d4256c54fca5256bfbd3bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3a5ecb5dcf6ad53d8d4256c54fca5256bfbd3bc"}], "stats": {"total": 512, "additions": 512, "deletions": 0}, "files": [{"sha": "ec04a4d96946f4e88e31229f7dcadf734a10411d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/099590dcb65d899ffdf0c24785fb31dbdfed06cc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/099590dcb65d899ffdf0c24785fb31dbdfed06cc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=099590dcb65d899ffdf0c24785fb31dbdfed06cc", "patch": "@@ -1,3 +1,15 @@\n+2008-10-24  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\tPR target/37841\n+\t* function.c (locate_and_pad_parm): If FUNCTION_ARG_ADJUST_OFFSET\n+\tis defined, use it to modify the constant offset.\n+\n+\t* doc/tm.texi (FUNCTION_ARG_OFFSET): Document new macro.\n+\n+\t* config/spu/spu.h (FUNCTION_ARG_OFFSET): New macro to move char\n+\tand short arguments to the correct location as mandated by the\n+\tABI.\n+\n 2008-10-24  Kaz Kojima  <kkojima@gcc.gnu.org>\n \n \tPR rtl-optimization/37769"}, {"sha": "4789c10387eb64e7771215d25d17c029a9f5d592", "filename": "gcc/config/spu/spu.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/099590dcb65d899ffdf0c24785fb31dbdfed06cc/gcc%2Fconfig%2Fspu%2Fspu.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/099590dcb65d899ffdf0c24785fb31dbdfed06cc/gcc%2Fconfig%2Fspu%2Fspu.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.h?ref=099590dcb65d899ffdf0c24785fb31dbdfed06cc", "patch": "@@ -354,6 +354,14 @@ targetm.resolve_overloaded_builtin = spu_resolve_overloaded_builtin;\t\\\n          : (MODE) == VOIDmode ? 1 \\\n \t : HARD_REGNO_NREGS(CUM,MODE))\n \n+\n+/* The SPU ABI wants 32/64-bit types at offset 0 in the quad-word on the\n+   stack.  8/16-bit types should be at offsets 3/2 respectively.  */\n+#define FUNCTION_ARG_OFFSET(MODE, TYPE)\t\t\t\t\t\\\n+(((TYPE) && INTEGRAL_TYPE_P (TYPE) && GET_MODE_SIZE (MODE) < 4)\t\t\\\n+ ? (4 - GET_MODE_SIZE (MODE))\t\t\t\t\t\t\\\n+ : 0)\n+\n #define FUNCTION_ARG_PADDING(MODE,TYPE) upward\n \n #define PAD_VARARGS_DOWN 0"}, {"sha": "880884f5f52f60577e9c42806a0e40516efb80d0", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/099590dcb65d899ffdf0c24785fb31dbdfed06cc/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/099590dcb65d899ffdf0c24785fb31dbdfed06cc/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=099590dcb65d899ffdf0c24785fb31dbdfed06cc", "patch": "@@ -4110,6 +4110,15 @@ on the stack.  The compiler knows how to track the amount of stack space\n used for arguments without any special help.\n @end defmac\n \n+\n+@defmac FUNCTION_ARG_OFFSET (@var{mode}, @var{type})\n+If defined, a C expression that is the number of bytes to add to the\n+offset of the argument passed in memory.  This is needed for the SPU,\n+which passes @code{char} and @code{short} arguments in the preferred\n+slot that is in the middle of the quad word instead of starting at the\n+top.\n+@end defmac\n+\n @defmac FUNCTION_ARG_PADDING (@var{mode}, @var{type})\n If defined, a C expression which determines whether, and in which direction,\n to pad out an argument with extra space.  The value should be of type"}, {"sha": "b40b0dbff96673acaabb1a1e6e45fccad213fea2", "filename": "gcc/function.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/099590dcb65d899ffdf0c24785fb31dbdfed06cc/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/099590dcb65d899ffdf0c24785fb31dbdfed06cc/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=099590dcb65d899ffdf0c24785fb31dbdfed06cc", "patch": "@@ -3473,6 +3473,10 @@ locate_and_pad_parm (enum machine_mode passed_mode, tree type, int in_regs,\n \n   locate->size.constant -= part_size_in_regs;\n #endif /* ARGS_GROW_DOWNWARD */\n+\n+#ifdef FUNCTION_ARG_OFFSET\n+  locate->offset.constant += FUNCTION_ARG_OFFSET (passed_mode, type);\n+#endif\n }\n \n /* Round the stack offset in *OFFSET_PTR up to a multiple of BOUNDARY."}, {"sha": "886e542fca25f887be5a7a6d81349235f74d2b9f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/099590dcb65d899ffdf0c24785fb31dbdfed06cc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/099590dcb65d899ffdf0c24785fb31dbdfed06cc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=099590dcb65d899ffdf0c24785fb31dbdfed06cc", "patch": "@@ -1,3 +1,8 @@\n+2008-10-24  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\tPR target/37841\n+\t* gcc.target/spu/abi.c: New file.\n+\n 2008-10-24  DJ Delorie  <dj@redhat.com>\n \n \t* lib/scanasm.exp (scan-assembler, scan-assembler-not,"}, {"sha": "b435f1ede5cc053afb1ac7c0e3656415b98435c9", "filename": "gcc/testsuite/gcc.target/spu/abi.c", "status": "added", "additions": 474, "deletions": 0, "changes": 474, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/099590dcb65d899ffdf0c24785fb31dbdfed06cc/gcc%2Ftestsuite%2Fgcc.target%2Fspu%2Fabi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/099590dcb65d899ffdf0c24785fb31dbdfed06cc/gcc%2Ftestsuite%2Fgcc.target%2Fspu%2Fabi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fspu%2Fabi.c?ref=099590dcb65d899ffdf0c24785fb31dbdfed06cc", "patch": "@@ -0,0 +1,474 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2\" } */\n+/* Test that arguments are passed in the correct location according to the ABI.  */\n+\n+#include <stdlib.h>\n+\n+/* Hack to allow calling func_asm which takes 84 arguments that are scalars.\n+   The function func_call takes 84 union quadword arguments, so we can check to\n+   see if each scalar is passed in the correct location.  This asm glues the\n+   two functions together, so that the compiler is not aware of the\n+   aliasing.  */\n+__asm__ (\"func_asm = func_call\");\n+\n+typedef unsigned int uqword __attribute__((mode(TI)));\n+typedef int qword __attribute__((mode(TI)));\n+\n+union u\n+{\n+  uqword\t\tuq;\n+  qword\t\t\tsq;\n+  double\t\td[2];\n+  float\t\t\tf[4];\n+  unsigned long long\tull[2];\n+  long long\t\tsll[2];\n+  unsigned long\t\tul[4];\n+  long\t\t\tsl[4];\n+  unsigned int\t\tui[4];\n+  int\t\t\tsi[4];\n+  unsigned short\tus[8];\n+  short\t\t\tss[8];\n+  unsigned char\t\tuc[16];\n+  signed char\t\tsc[16];\n+};\n+\n+\n+extern void func_asm(signed char a1,\n+\t\t     unsigned char a2,\n+\t\t     short a3,\n+\t\t     unsigned short a4,\n+\t\t     int a5,\n+\t\t     unsigned int a6,\n+\t\t     long a7,\n+\t\t     unsigned long a8,\n+\t\t     long long a9,\n+\t\t     unsigned long long a10,\n+\t\t     float a11,\n+\t\t     double a12,\n+\t\t     int a13,\n+\t\t     int a14,\n+\t\t     int a15,\n+\t\t     int a16,\n+\t\t     int a17,\n+\t\t     int a18,\n+\t\t     int a19,\n+\t\t     int a20,\n+\t\t     int a21,\n+\t\t     int a22,\n+\t\t     int a23,\n+\t\t     int a24,\n+\t\t     int a25,\n+\t\t     int a26,\n+\t\t     int a27,\n+\t\t     int a28,\n+\t\t     int a29,\n+\t\t     int a30,\n+\t\t     int a31,\n+\t\t     int a32,\n+\t\t     int a33,\n+\t\t     int a34,\n+\t\t     int a35,\n+\t\t     int a36,\n+\t\t     int a37,\n+\t\t     int a38,\n+\t\t     int a39,\n+\t\t     int a40,\n+\t\t     int a41,\n+\t\t     int a42,\n+\t\t     int a43,\n+\t\t     int a44,\n+\t\t     int a45,\n+\t\t     int a46,\n+\t\t     int a47,\n+\t\t     int a48,\n+\t\t     int a49,\n+\t\t     int a50,\n+\t\t     int a51,\n+\t\t     int a52,\n+\t\t     int a53,\n+\t\t     int a54,\n+\t\t     int a55,\n+\t\t     int a56,\n+\t\t     int a57,\n+\t\t     int a58,\n+\t\t     int a59,\n+\t\t     int a60,\n+\t\t     int a61,\n+\t\t     int a62,\n+\t\t     int a63,\n+\t\t     int a64,\n+\t\t     int a65,\n+\t\t     int a66,\n+\t\t     int a67,\n+\t\t     int a68,\n+\t\t     int a69,\n+\t\t     int a70,\n+\t\t     int a71,\n+\t\t     int a72,\n+\t\t     signed char a73,\n+\t\t     unsigned char a74,\n+\t\t     short a75,\n+\t\t     unsigned short a76,\n+\t\t     int a77,\n+\t\t     unsigned int a78,\n+\t\t     long a79,\n+\t\t     unsigned long a80,\n+\t\t     long long a81,\n+\t\t     unsigned long long a82,\n+\t\t     float a83,\n+\t\t     double a84);\n+\n+void func_call(union u a1,\n+\t       union u a2,\n+\t       union u a3,\n+\t       union u a4,\n+\t       union u a5,\n+\t       union u a6,\n+\t       union u a7,\n+\t       union u a8,\n+\t       union u a9,\n+\t       union u a10,\n+\t       union u a11,\n+\t       union u a12,\n+\t       union u a13,\n+\t       union u a14,\n+\t       union u a15,\n+\t       union u a16,\n+\t       union u a17,\n+\t       union u a18,\n+\t       union u a19,\n+\t       union u a20,\n+\t       union u a21,\n+\t       union u a22,\n+\t       union u a23,\n+\t       union u a24,\n+\t       union u a25,\n+\t       union u a26,\n+\t       union u a27,\n+\t       union u a28,\n+\t       union u a29,\n+\t       union u a30,\n+\t       union u a31,\n+\t       union u a32,\n+\t       union u a33,\n+\t       union u a34,\n+\t       union u a35,\n+\t       union u a36,\n+\t       union u a37,\n+\t       union u a38,\n+\t       union u a39,\n+\t       union u a40,\n+\t       union u a41,\n+\t       union u a42,\n+\t       union u a43,\n+\t       union u a44,\n+\t       union u a45,\n+\t       union u a46,\n+\t       union u a47,\n+\t       union u a48,\n+\t       union u a49,\n+\t       union u a50,\n+\t       union u a51,\n+\t       union u a52,\n+\t       union u a53,\n+\t       union u a54,\n+\t       union u a55,\n+\t       union u a56,\n+\t       union u a57,\n+\t       union u a58,\n+\t       union u a59,\n+\t       union u a60,\n+\t       union u a61,\n+\t       union u a62,\n+\t       union u a63,\n+\t       union u a64,\n+\t       union u a65,\n+\t       union u a66,\n+\t       union u a67,\n+\t       union u a68,\n+\t       union u a69,\n+\t       union u a70,\n+\t       union u a71,\n+\t       union u a72,\n+\t       union u a73,\n+\t       union u a74,\n+\t       union u a75,\n+\t       union u a76,\n+\t       union u a77,\n+\t       union u a78,\n+\t       union u a79,\n+\t       union u a80,\n+\t       union u a81,\n+\t       union u a82,\n+\t       union u a83,\n+\t       union u a84)\n+{\n+  /* arguments passed in registers */\n+  if (a1.sc[3] != -1)\t\t\t/* signed char */\n+    abort ();\n+\n+  if (a2.uc[3] != +2)\t\t\t/* unsigned char */\n+    abort ();\n+\n+  if (a3.ss[1] != -3)\t\t\t/* short */\n+    abort ();\n+\n+  if (a4.us[1] != +4)\t\t\t/* unsigned short */\n+    abort ();\n+\n+  if (a5.si[0] != -5)\t\t\t/* int */\n+    abort ();\n+\n+  if (a6.ui[0] != +6)\t\t\t/* unsigned int */\n+    abort ();\n+\n+  if (a7.sl[0] != -7)\t\t\t/* long */\n+    abort ();\n+\n+  if (a8.ul[0] != +8)\t\t\t/* unsigned long */\n+    abort ();\n+\n+  if (a9.sll[0] != -9)\t\t\t/* long long */\n+    abort ();\n+\n+  if (a10.ull[0] != +10)\t\t/* unsigned long long */\n+    abort ();\n+\n+  if (a11.f[0] != -11.0f)\t\t/* float */\n+    abort ();\n+\n+  if (a12.d[0] != +12.0)\t\t/* double */\n+    abort ();\n+\n+  if (a13.si[0] != -13)\t\t\t/* int */\n+    abort ();\n+\n+  if (a14.si[0] != +14)\t\t\t/* int */\n+    abort ();\n+\n+  if (a15.si[0] != -15)\t\t\t/* int */\n+    abort ();\n+\n+  if (a16.si[0] != +16)\t\t\t/* int */\n+    abort ();\n+\n+  if (a17.si[0] != -17)\t\t\t/* int */\n+    abort ();\n+\n+  if (a18.si[0] != +18)\t\t\t/* int */\n+    abort ();\n+\n+  if (a19.si[0] != -19)\t\t\t/* int */\n+    abort ();\n+\n+  if (a20.si[0] != +20)\t\t\t/* int */\n+    abort ();\n+\n+  if (a21.si[0] != -21)\t\t\t/* int */\n+    abort ();\n+\n+  if (a22.si[0] != +22)\t\t\t/* int */\n+    abort ();\n+\n+  if (a23.si[0] != -23)\t\t\t/* int */\n+    abort ();\n+\n+  if (a24.si[0] != +24)\t\t\t/* int */\n+    abort ();\n+\n+  if (a25.si[0] != -25)\t\t\t/* int */\n+    abort ();\n+\n+  if (a26.si[0] != +26)\t\t\t/* int */\n+    abort ();\n+\n+  if (a27.si[0] != -27)\t\t\t/* int */\n+    abort ();\n+\n+  if (a28.si[0] != +28)\t\t\t/* int */\n+    abort ();\n+\n+  if (a29.si[0] != -29)\t\t\t/* int */\n+    abort ();\n+\n+  if (a30.si[0] != +30)\t\t\t/* int */\n+    abort ();\n+\n+  if (a31.si[0] != -31)\t\t\t/* int */\n+    abort ();\n+\n+  if (a32.si[0] != +32)\t\t\t/* int */\n+    abort ();\n+\n+  if (a33.si[0] != -33)\t\t\t/* int */\n+    abort ();\n+\n+  if (a34.si[0] != +34)\t\t\t/* int */\n+    abort ();\n+\n+  if (a35.si[0] != -35)\t\t\t/* int */\n+    abort ();\n+\n+  if (a36.si[0] != +36)\t\t\t/* int */\n+    abort ();\n+\n+  if (a37.si[0] != -37)\t\t\t/* int */\n+    abort ();\n+\n+  if (a38.si[0] != +38)\t\t\t/* int */\n+    abort ();\n+\n+  if (a39.si[0] != -39)\t\t\t/* int */\n+    abort ();\n+\n+  if (a40.si[0] != +40)\t\t\t/* int */\n+    abort ();\n+\n+  if (a41.si[0] != -41)\t\t\t/* int */\n+    abort ();\n+\n+  if (a42.si[0] != +42)\t\t\t/* int */\n+    abort ();\n+\n+  if (a43.si[0] != -43)\t\t\t/* int */\n+    abort ();\n+\n+  if (a44.si[0] != +44)\t\t\t/* int */\n+    abort ();\n+\n+  if (a45.si[0] != -45)\t\t\t/* int */\n+    abort ();\n+\n+  if (a46.si[0] != +46)\t\t\t/* int */\n+    abort ();\n+\n+  if (a47.si[0] != -47)\t\t\t/* int */\n+    abort ();\n+\n+  if (a48.si[0] != +48)\t\t\t/* int */\n+    abort ();\n+\n+  if (a49.si[0] != -49)\t\t\t/* int */\n+    abort ();\n+\n+  if (a50.si[0] != +50)\t\t\t/* int */\n+    abort ();\n+\n+  if (a51.si[0] != -51)\t\t\t/* int */\n+    abort ();\n+\n+  if (a52.si[0] != +52)\t\t\t/* int */\n+    abort ();\n+\n+  if (a53.si[0] != -53)\t\t\t/* int */\n+    abort ();\n+\n+  if (a54.si[0] != +54)\t\t\t/* int */\n+    abort ();\n+\n+  if (a55.si[0] != -55)\t\t\t/* int */\n+    abort ();\n+\n+  if (a56.si[0] != +56)\t\t\t/* int */\n+    abort ();\n+\n+  if (a57.si[0] != -57)\t\t\t/* int */\n+    abort ();\n+\n+  if (a58.si[0] != +58)\t\t\t/* int */\n+    abort ();\n+\n+  if (a59.si[0] != -59)\t\t\t/* int */\n+    abort ();\n+\n+  if (a60.si[0] != +60)\t\t\t/* int */\n+    abort ();\n+\n+  if (a61.si[0] != -61)\t\t\t/* int */\n+    abort ();\n+\n+  if (a62.si[0] != +62)\t\t\t/* int */\n+    abort ();\n+\n+  if (a63.si[0] != -63)\t\t\t/* int */\n+    abort ();\n+\n+  if (a64.si[0] != +64)\t\t\t/* int */\n+    abort ();\n+\n+  if (a65.si[0] != -65)\t\t\t/* int */\n+    abort ();\n+\n+  if (a66.si[0] != +66)\t\t\t/* int */\n+    abort ();\n+\n+  if (a67.si[0] != -67)\t\t\t/* int */\n+    abort ();\n+\n+  if (a68.si[0] != +68)\t\t\t/* int */\n+    abort ();\n+\n+  if (a69.si[0] != -69)\t\t\t/* int */\n+    abort ();\n+\n+  if (a70.si[0] != +70)\t\t\t/* int */\n+    abort ();\n+\n+  if (a71.si[0] != -71)\t\t\t/* int */\n+    abort ();\n+\n+  if (a72.si[0] != +72)\t\t\t/* int */\n+    abort ();\n+\n+  /* arguments passed on the stack */\n+  if (a73.sc[3] != -73)\t\t\t/* signed char */\n+    abort ();\n+\n+  if (a74.uc[3] != 74)\t\t\t/* unsigned char */\n+    abort ();\n+\n+  if (a75.ss[1] != -75)\t\t\t/* short */\n+    abort ();\n+\n+  if (a76.us[1] != +76)\t\t\t/* unsigned short */\n+    abort ();\n+\n+  if (a77.si[0] != -77)\t\t\t/* int */\n+    abort ();\n+\n+  if (a78.ui[0] != +78)\t\t\t/* unsigned int */\n+    abort ();\n+\n+  if (a79.sl[0] != -79)\t\t\t/* long */\n+    abort ();\n+\n+  if (a80.ul[0] != +80)\t\t\t/* unsigned long */\n+    abort ();\n+\n+  if (a81.sll[0] != -81)\t\t/* long long */\n+    abort ();\n+\n+  if (a82.ull[0] != +82)\t\t/* unsigned long long */\n+    abort ();\n+\n+  if (a83.f[0] != -83.0f)\t\t/* float */\n+    abort ();\n+\n+  if (a84.d[0] != +84.0)\t\t/* double */\n+    abort ();\n+}\n+\n+int main(void)\n+{\n+  func_asm(-1,   +2,  -3,  +4,  -5,  +6,  -7,  +8,  -9, +10,\n+\t   -11, +12, -13, +14, -15, +16, -17, +18, -19, +20,\n+\t   -21, +22, -23, +24, -25, +26, -27, +28, -29, +30,\n+\t   -31, +32, -33, +34, -35, +36, -37, +38, -39, +40,\n+\t   -41, +42, -43, +44, -45, +46, -47, +48, -49, +50,\n+\t   -51, +52, -53, +54, -55, +56, -57, +58, -59, +60,\n+\t   -61, +62, -63, +64, -65, +66, -67, +68, -69, +70,\n+\t   -71, +72, -73, +74, -75, +76, -77, +78, -79, +80,\n+\t   -81, +82, -83, +84);\n+\n+  return 0;\n+}"}]}