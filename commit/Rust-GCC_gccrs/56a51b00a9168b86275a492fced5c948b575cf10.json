{"sha": "56a51b00a9168b86275a492fced5c948b575cf10", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTZhNTFiMDBhOTE2OGI4NjI3NWE0OTJmY2VkNWM5NDhiNTc1Y2YxMA==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2007-10-09T13:30:56Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2007-10-09T13:30:56Z"}, "message": "boost_concept_check.h (*AssociativeContainerConcept): Remove, unused.\n\n2007-10-09  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/bits/boost_concept_check.h (*AssociativeContainerConcept):\n\tRemove, unused.\n\nFrom-SVN: r129165", "tree": {"sha": "6b631ffa87b512deccc2b04434295b4d984b0e37", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6b631ffa87b512deccc2b04434295b4d984b0e37"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/56a51b00a9168b86275a492fced5c948b575cf10", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56a51b00a9168b86275a492fced5c948b575cf10", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56a51b00a9168b86275a492fced5c948b575cf10", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56a51b00a9168b86275a492fced5c948b575cf10/comments", "author": null, "committer": null, "parents": [{"sha": "05c42b11e64489819f65e0daec4679f311ec3632", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05c42b11e64489819f65e0daec4679f311ec3632", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05c42b11e64489819f65e0daec4679f311ec3632"}], "stats": {"total": 148, "additions": 6, "deletions": 142}, "files": [{"sha": "03972e033705ec336796dad8545ca84b16dad438", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56a51b00a9168b86275a492fced5c948b575cf10/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56a51b00a9168b86275a492fced5c948b575cf10/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=56a51b00a9168b86275a492fced5c948b575cf10", "patch": "@@ -1,3 +1,8 @@\n+2007-10-09  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/bits/boost_concept_check.h (*AssociativeContainerConcept):\n+\tRemove, unused.\n+\n 2007-10-08  Johannes Singler  <singler@ira.uka.de>\n \n \t* include/parallel/base.h: Added plus and multiplies functor"}, {"sha": "83555fd72687e70c082be9742f5f70dbc1d581ea", "filename": "libstdc++-v3/include/bits/boost_concept_check.h", "status": "modified", "additions": 1, "deletions": 142, "changes": 143, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56a51b00a9168b86275a492fced5c948b575cf10/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fboost_concept_check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56a51b00a9168b86275a492fced5c948b575cf10/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fboost_concept_check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fboost_concept_check.h?ref=56a51b00a9168b86275a492fced5c948b575cf10", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2004, 2005 Free Software Foundation, Inc.\n+// Copyright (C) 2004, 2005, 2006, 2007 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -48,7 +48,6 @@\n \n #include <cstddef>                // for ptrdiff_t, used next\n #include <bits/stl_iterator_base_types.h>    // for traits and tags\n-#include <utility>                           // for pair<>\n \n _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \n@@ -784,146 +783,6 @@ struct _Aux_require_same<_Tp,_Tp> { typedef _Tp _Type; };\n     typename _BackInsertionSequence::value_type __t;\n   };\n \n-  template <class _AssociativeContainer>\n-  struct _AssociativeContainerConcept\n-  {\n-    void __constraints() {\n-      __function_requires< _ForwardContainerConcept<_AssociativeContainer> >();\n-      __function_requires<\n-        _DefaultConstructibleConcept<_AssociativeContainer> >();\n-\n-      __i = __c.find(__k);\n-      __r = __c.equal_range(__k);\n-      __c.erase(__k);\n-      __c.erase(__i);\n-      __c.erase(__r.first, __r.second);\n-      __const_constraints(__c);\n-    }\n-    void __const_constraints(const _AssociativeContainer& __c) {\n-      __ci = __c.find(__k);\n-      __n = __c.count(__k);\n-      __cr = __c.equal_range(__k);\n-    }\n-    typedef typename _AssociativeContainer::iterator _Iterator;\n-    typedef typename _AssociativeContainer::const_iterator _Const_iterator;\n-\n-    _AssociativeContainer __c;\n-    _Iterator __i;\n-    std::pair<_Iterator,_Iterator> __r;\n-    _Const_iterator __ci;\n-    std::pair<_Const_iterator,_Const_iterator> __cr;\n-    typename _AssociativeContainer::key_type __k;\n-    typename _AssociativeContainer::size_type __n;\n-  };\n-\n-  template <class _UniqueAssociativeContainer>\n-  struct _UniqueAssociativeContainerConcept\n-  {\n-    void __constraints() {\n-      __function_requires<\n-        _AssociativeContainerConcept<_UniqueAssociativeContainer> >();\n-\n-      _UniqueAssociativeContainer __c(__first, __last);\n-\n-      __pos_flag = __c.insert(__t);\n-      __c.insert(__first, __last);\n-    }\n-    std::pair<typename _UniqueAssociativeContainer::iterator, bool> __pos_flag;\n-    typename _UniqueAssociativeContainer::value_type __t;\n-    typename _UniqueAssociativeContainer::value_type *__first, *__last;\n-  };\n-\n-  template <class _MultipleAssociativeContainer>\n-  struct _MultipleAssociativeContainerConcept\n-  {\n-    void __constraints() {\n-      __function_requires<\n-        _AssociativeContainerConcept<_MultipleAssociativeContainer> >();\n-\n-      _MultipleAssociativeContainer __c(__first, __last);\n-\n-      __pos = __c.insert(__t);\n-      __c.insert(__first, __last);\n-\n-    }\n-    typename _MultipleAssociativeContainer::iterator __pos;\n-    typename _MultipleAssociativeContainer::value_type __t;\n-    typename _MultipleAssociativeContainer::value_type *__first, *__last;\n-  };\n-\n-  template <class _SimpleAssociativeContainer>\n-  struct _SimpleAssociativeContainerConcept\n-  {\n-    void __constraints() {\n-      __function_requires<\n-        _AssociativeContainerConcept<_SimpleAssociativeContainer> >();\n-      typedef typename _SimpleAssociativeContainer::key_type _Key_type;\n-      typedef typename _SimpleAssociativeContainer::value_type _Value_type;\n-      typedef typename _Aux_require_same<_Key_type, _Value_type>::_Type\n-        _Required;\n-    }\n-  };\n-\n-  template <class _SimpleAssociativeContainer>\n-  struct _PairAssociativeContainerConcept\n-  {\n-    void __constraints() {\n-      __function_requires<\n-        _AssociativeContainerConcept<_SimpleAssociativeContainer> >();\n-      typedef typename _SimpleAssociativeContainer::key_type _Key_type;\n-      typedef typename _SimpleAssociativeContainer::value_type _Value_type;\n-      typedef typename _SimpleAssociativeContainer::mapped_type _Mapped_type;\n-      typedef std::pair<const _Key_type, _Mapped_type> _Required_value_type;\n-      typedef typename _Aux_require_same<_Value_type,\n-        _Required_value_type>::_Type _Required;\n-    }\n-  };\n-\n-  template <class _SortedAssociativeContainer>\n-  struct _SortedAssociativeContainerConcept\n-  {\n-    void __constraints() {\n-      __function_requires<\n-        _AssociativeContainerConcept<_SortedAssociativeContainer> >();\n-      __function_requires<\n-        _ReversibleContainerConcept<_SortedAssociativeContainer> >();\n-\n-      _SortedAssociativeContainer\n-        __c _IsUnused(__kc),\n-        __c2 _IsUnused(__first, __last),\n-        __c3 _IsUnused(__first, __last, __kc);\n-\n-      __p = __c.upper_bound(__k);\n-      __p = __c.lower_bound(__k);\n-      __r = __c.equal_range(__k);\n-\n-      __c.insert(__p, __t);\n-    }\n-    void __const_constraints(const _SortedAssociativeContainer& __c) {\n-      __kc = __c.key_comp();\n-      __vc = __c.value_comp();\n-\n-      __cp = __c.upper_bound(__k);\n-      __cp = __c.lower_bound(__k);\n-      __cr = __c.equal_range(__k);\n-    }\n-    typename _SortedAssociativeContainer::key_compare __kc;\n-    typename _SortedAssociativeContainer::value_compare __vc;\n-    typename _SortedAssociativeContainer::value_type __t;\n-    typename _SortedAssociativeContainer::key_type __k;\n-    typedef typename _SortedAssociativeContainer::iterator _Iterator;\n-    typedef typename _SortedAssociativeContainer::const_iterator\n-      _Const_iterator;\n-\n-    _Iterator __p;\n-    _Const_iterator __cp;\n-    std::pair<_Iterator,_Iterator> __r;\n-    std::pair<_Const_iterator,_Const_iterator> __cr;\n-    typename _SortedAssociativeContainer::value_type *__first, *__last;\n-  };\n-\n-  // HashedAssociativeContainer\n-\n _GLIBCXX_END_NAMESPACE\n \n #undef _IsUnused"}]}