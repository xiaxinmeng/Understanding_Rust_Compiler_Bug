{"sha": "140592a0131cb2dc88d3f55b2671977f20c85be2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTQwNTkyYTAxMzFjYjJkYzg4ZDNmNTViMjY3MTk3N2YyMGM4NWJlMg==", "commit": {"author": {"name": "Anthony Green", "email": "green@cygnus.com", "date": "1999-11-28T20:45:34Z"}, "committer": {"name": "Anthony Green", "email": "green@gcc.gnu.org", "date": "1999-11-28T20:45:34Z"}, "message": "tree.h (struct tree_decl): Add malloc_flag.\n\n\t* tree.h (struct tree_decl): Add malloc_flag.\n\t(DECL_IS_MALLOC): Define.\n\t* c-common.c (attrs): Add A_MALLOC attribute.\n\t(init_attributes): Add this attribute to the table.\n\t(decl_attributes): Handle malloc attribute.\n\t* calls.c (special_function_p): Check for the malloc attribute.\n\t* extend.texi (Function Attributes): Document malloc attribute.\n\nFrom-SVN: r30689", "tree": {"sha": "64c16fe212dcb5f1d77505bd5b8e158441e8665e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/64c16fe212dcb5f1d77505bd5b8e158441e8665e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/140592a0131cb2dc88d3f55b2671977f20c85be2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/140592a0131cb2dc88d3f55b2671977f20c85be2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/140592a0131cb2dc88d3f55b2671977f20c85be2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/140592a0131cb2dc88d3f55b2671977f20c85be2/comments", "author": null, "committer": null, "parents": [{"sha": "8b4b9b7ad3d1bbc16516a5a73a6ba3c3c21d1822", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b4b9b7ad3d1bbc16516a5a73a6ba3c3c21d1822", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b4b9b7ad3d1bbc16516a5a73a6ba3c3c21d1822"}], "stats": {"total": 52, "additions": 44, "deletions": 8}, "files": [{"sha": "109c83451b389a5030b5f0705bdeae86ea045848", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/140592a0131cb2dc88d3f55b2671977f20c85be2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/140592a0131cb2dc88d3f55b2671977f20c85be2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=140592a0131cb2dc88d3f55b2671977f20c85be2", "patch": "@@ -1,3 +1,13 @@\n+1999-11-28  Anthony Green  <green@cygnus.com>\n+\n+\t* tree.h (struct tree_decl): Add malloc_flag.\n+\t(DECL_IS_MALLOC): Define.\n+\t* c-common.c (attrs): Add A_MALLOC attribute.\n+\t(init_attributes): Add this attribute to the table.\n+\t(decl_attributes): Handle malloc attribute.\n+\t* calls.c (special_function_p): Check for the malloc attribute.\n+\t* extend.texi (Function Attributes): Document malloc attribute.\n+\n Sun Nov 28 13:21:00 1999  Jeffrey A Law  (law@cygnus.com)\n \n \t* pa.md (reload shift-add patterns): Remove."}, {"sha": "10c162402844f6fb57283c70884b71f0d5a9f93e", "filename": "gcc/c-common.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/140592a0131cb2dc88d3f55b2671977f20c85be2/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/140592a0131cb2dc88d3f55b2671977f20c85be2/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=140592a0131cb2dc88d3f55b2671977f20c85be2", "patch": "@@ -140,7 +140,7 @@ int skip_evaluation;\n enum attrs {A_PACKED, A_NOCOMMON, A_COMMON, A_NORETURN, A_CONST, A_T_UNION,\n \t    A_NO_CHECK_MEMORY_USAGE, A_NO_INSTRUMENT_FUNCTION,\n \t    A_CONSTRUCTOR, A_DESTRUCTOR, A_MODE, A_SECTION, A_ALIGNED,\n-\t    A_UNUSED, A_FORMAT, A_FORMAT_ARG, A_WEAK, A_ALIAS};\n+\t    A_UNUSED, A_FORMAT, A_FORMAT_ARG, A_WEAK, A_ALIAS, A_MALLOC};\n \n enum format_type { printf_format_type, scanf_format_type,\n \t\t   strftime_format_type };\n@@ -481,6 +481,7 @@ init_attributes ()\n   add_attribute (A_ALIAS, \"alias\", 1, 1, 1);\n   add_attribute (A_NO_INSTRUMENT_FUNCTION, \"no_instrument_function\", 0, 0, 1);\n   add_attribute (A_NO_CHECK_MEMORY_USAGE, \"no_check_memory_usage\", 0, 0, 1);\n+  add_attribute (A_MALLOC, \"malloc\", 0, 0, 1);\n }\n \f\n /* Default implementation of valid_lang_attribute, below.  By default, there\n@@ -617,6 +618,13 @@ decl_attributes (node, attributes, prefix_attributes)\n \t    warning (\"`%s' attribute ignored\", IDENTIFIER_POINTER (name));\n \t  break;\n \n+\tcase A_MALLOC:\n+\t  if (TREE_CODE (decl) == FUNCTION_DECL)\n+\t    DECL_IS_MALLOC (decl) = 1;\n+\t  else\n+\t    warning (\"`%s' attribute ignored\", IDENTIFIER_POINTER (name));\n+\t  break;\n+\n \tcase A_UNUSED:\n \t  if (is_type)\n \t    TREE_USED (type) = 1;"}, {"sha": "d8805955a852d920f7d5b0743b9feccb878d097e", "filename": "gcc/calls.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/140592a0131cb2dc88d3f55b2671977f20c85be2/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/140592a0131cb2dc88d3f55b2671977f20c85be2/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=140592a0131cb2dc88d3f55b2671977f20c85be2", "patch": "@@ -546,10 +546,14 @@ special_function_p (name, fndecl, returns_twice, is_longjmp,\n {\n   *returns_twice = 0;\n   *is_longjmp = 0;\n-  *is_malloc = 0;\n   *may_be_alloca = 0;\n \n-  if (name != 0 && IDENTIFIER_LENGTH (DECL_NAME (fndecl)) <= 17\n+  /* The function decl may have the `malloc' attribute.  */\n+  *is_malloc = fndecl && DECL_IS_MALLOC (fndecl);\n+\n+  if (! is_malloc \n+      && name != 0 \n+      && IDENTIFIER_LENGTH (DECL_NAME (fndecl)) <= 17\n       /* Exclude functions not at the file scope, or not `extern',\n \t since they are not the magic functions we would otherwise\n \t think they are.  */\n@@ -602,8 +606,8 @@ special_function_p (name, fndecl, returns_twice, is_longjmp,\n       else if (tname[0] == 'l' && tname[1] == 'o'\n \t       && ! strcmp (tname, \"longjmp\"))\n \t*is_longjmp = 1;\n-      /* XXX should have \"malloc\" attribute on functions instead\n-\t of recognizing them by name.  */\n+      /* Do not add any more malloc-like functions to this list,\n+\t instead mark as malloc functions using the malloc attribute.  */\n       else if (! strcmp (tname, \"malloc\")\n \t       || ! strcmp (tname, \"calloc\")\n \t       || ! strcmp (tname, \"realloc\")"}, {"sha": "be217a35c8ccef435142fcc757511458002935ef", "filename": "gcc/extend.texi", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/140592a0131cb2dc88d3f55b2671977f20c85be2/gcc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/140592a0131cb2dc88d3f55b2671977f20c85be2/gcc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fextend.texi?ref=140592a0131cb2dc88d3f55b2671977f20c85be2", "patch": "@@ -1310,6 +1310,7 @@ hack ((union foo) x);\n @cindex functions that never return\n @cindex functions that have no side effects\n @cindex functions in arbitrary sections\n+@cindex functions that bahave like malloc\n @cindex @code{volatile} applied to function\n @cindex @code{const} applied to function\n @cindex functions with @code{printf}, @code{scanf} or @code{strftime} style arguments\n@@ -1323,10 +1324,10 @@ carefully.\n \n The keyword @code{__attribute__} allows you to specify special\n attributes when making a declaration.  This keyword is followed by an\n-attribute specification inside double parentheses.  Nine attributes,\n+attribute specification inside double parentheses.  Ten attributes,\n @code{noreturn}, @code{const}, @code{format},\n-@code{no_instrument_function}, @code{section},\n-@code{constructor}, @code{destructor}, @code{unused} and @code{weak} are\n+@code{no_instrument_function}, @code{section}, @code{constructor},\n+@code{destructor}, @code{unused}, @code{weak} and @code{malloc} are\n currently defined for functions.  Other attributes, including\n @code{section} are supported for variables declarations (@pxref{Variable\n Attributes}) and for types (@pxref{Type Attributes}).\n@@ -1540,6 +1541,13 @@ also be used with non-function declarations.  Weak symbols are supported\n for ELF targets, and also for a.out targets when using the GNU assembler\n and linker.\n \n+@item malloc\n+@cindex @code{malloc} attribute\n+The @code{malloc} attribute is used to tell the compiler that a function\n+may be treated as if it were the malloc function.  The compiler assumes\n+that calls to malloc result in a pointers that cannot alias anything.\n+This will often improve optimization.\n+\n @item alias (\"target\")\n @cindex @code{alias} attribute\n The @code{alias} attribute causes the declaration to be emitted as an"}, {"sha": "fcfa2190b362bdc36846d9b11dd144ffeca5d33a", "filename": "gcc/tree.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/140592a0131cb2dc88d3f55b2671977f20c85be2/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/140592a0131cb2dc88d3f55b2671977f20c85be2/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=140592a0131cb2dc88d3f55b2671977f20c85be2", "patch": "@@ -1238,6 +1238,11 @@ struct tree_type\n    to redefine for any purpose whatever.  */\n #define DECL_BUILT_IN_NONANSI(NODE) ((NODE)->common.unsigned_flag)\n \n+/* Nonzero in a FUNCTION_DECL means this function should be treated\n+   as if it were a malloc, meaning it returns a pointer that is\n+   not an alias.  */\n+#define DECL_IS_MALLOC(NODE) (DECL_CHECK (NODE)->decl.malloc_flag)\n+\n /* Nonzero in a FIELD_DECL means it is a bit field, and must be accessed\n    specially.  */\n #define DECL_BIT_FIELD(NODE) (DECL_CHECK (NODE)->decl.bit_field_flag)\n@@ -1370,6 +1375,7 @@ struct tree_decl\n   unsigned no_instrument_function_entry_exit : 1;\n   unsigned no_check_memory_usage : 1;\n   unsigned comdat_flag : 1;\n+  unsigned malloc_flag : 1;\n \n   /* For a FUNCTION_DECL, if inline, this is the size of frame needed.\n      If built-in, this is the code for which built-in function."}]}