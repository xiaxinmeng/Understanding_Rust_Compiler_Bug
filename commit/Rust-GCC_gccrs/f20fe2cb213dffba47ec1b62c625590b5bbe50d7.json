{"sha": "f20fe2cb213dffba47ec1b62c625590b5bbe50d7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjIwZmUyY2IyMTNkZmZiYTQ3ZWMxYjYyYzYyNTU5MGI1YmJlNTBkNw==", "commit": {"author": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2021-03-15T09:12:58Z"}, "committer": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2021-03-15T09:12:58Z"}, "message": "OpenMP: Fix 'omp declare target' handling for vars [PR99509]\n\nFor variables with 'declare target' attribute,\nvarpool_node::get_create marks variables as offload; however,\nif the node already exists, it is not updated. C/C++ may tag\ndecl with 'declare target implicit', which may only be after\nvarpool creation turned into 'declare target' or 'declare target link';\nin this case, the tagging has to happen in the FE.\n\ngcc/c/ChangeLog:\n\n\tPR c++/99509\n\t* c-decl.c (finish_decl): For 'omp declare target implicit' vars,\n\tensure that the varpool node is marked as offloadable.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/99509\n\t* decl.c (cp_finish_decl): For 'omp declare target implicit' vars,\n\tensure that the varpool node is marked as offloadable.\n\nlibgomp/ChangeLog:\n\n\tPR c++/99509\n\t* testsuite/libgomp.c-c++-common/declare_target-1.c: New test.", "tree": {"sha": "fa3270858cb57054342ce942421477f83e8454eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fa3270858cb57054342ce942421477f83e8454eb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f20fe2cb213dffba47ec1b62c625590b5bbe50d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f20fe2cb213dffba47ec1b62c625590b5bbe50d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f20fe2cb213dffba47ec1b62c625590b5bbe50d7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f20fe2cb213dffba47ec1b62c625590b5bbe50d7/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b516a15371503bae35f2a1c7bc5d7e0c503eefdd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b516a15371503bae35f2a1c7bc5d7e0c503eefdd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b516a15371503bae35f2a1c7bc5d7e0c503eefdd"}], "stats": {"total": 65, "additions": 59, "deletions": 6}, "files": [{"sha": "3b2241bfd970ff4f2e9304033064f902970afe85", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f20fe2cb213dffba47ec1b62c625590b5bbe50d7/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f20fe2cb213dffba47ec1b62c625590b5bbe50d7/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=f20fe2cb213dffba47ec1b62c625590b5bbe50d7", "patch": "@@ -58,6 +58,9 @@ along with GCC; see the file COPYING3.  If not see\n #include \"c-family/name-hint.h\"\n #include \"c-family/known-headers.h\"\n #include \"c-family/c-spellcheck.h\"\n+#include \"context.h\"  /* For 'g'.  */\n+#include \"omp-general.h\"\n+#include \"omp-offload.h\"  /* For offload_vars.  */\n \n #include \"tree-pretty-print.h\"\n \n@@ -5658,9 +5661,22 @@ finish_decl (tree decl, location_t init_loc, tree init,\n \t\t\t\t  DECL_ATTRIBUTES (decl))\n \t       && !lookup_attribute (\"omp declare target link\",\n \t\t\t\t     DECL_ATTRIBUTES (decl)))\n-\tDECL_ATTRIBUTES (decl)\n-\t  = tree_cons (get_identifier (\"omp declare target\"),\n-\t\t       NULL_TREE, DECL_ATTRIBUTES (decl));\n+\t{\n+\t  DECL_ATTRIBUTES (decl)\n+\t    = tree_cons (get_identifier (\"omp declare target\"),\n+\t\t\t NULL_TREE, DECL_ATTRIBUTES (decl));\n+\t    symtab_node *node = symtab_node::get (decl);\n+\t    if (node != NULL)\n+\t      {\n+\t\tnode->offloadable = 1;\n+\t\tif (ENABLE_OFFLOADING)\n+\t\t  {\n+\t\t    g->have_offload = true;\n+\t\t    if (is_a <varpool_node *> (node))\n+\t\t      vec_safe_push (offload_vars, decl);\n+\t\t  }\n+\t      }\n+\t}\n     }\n \n   /* This is the last point we can lower alignment so give the target the"}, {"sha": "1b671cec9a322e26ba483689bf62fbaa1ae818e3", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f20fe2cb213dffba47ec1b62c625590b5bbe50d7/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f20fe2cb213dffba47ec1b62c625590b5bbe50d7/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=f20fe2cb213dffba47ec1b62c625590b5bbe50d7", "patch": "@@ -53,7 +53,9 @@ along with GCC; see the file COPYING3.  If not see\n #include \"asan.h\"\n #include \"gcc-rich-location.h\"\n #include \"langhooks.h\"\n+#include \"context.h\"  /* For 'g'.  */\n #include \"omp-general.h\"\n+#include \"omp-offload.h\"  /* For offload_vars.  */\n \n /* Possible cases of bad specifiers type used by bad_specifiers. */\n enum bad_spec_place {\n@@ -8176,9 +8178,22 @@ cp_finish_decl (tree decl, tree init, bool init_const_expr_p,\n \t\t\t\t  DECL_ATTRIBUTES (decl))\n \t       && !lookup_attribute (\"omp declare target link\",\n \t\t\t\t     DECL_ATTRIBUTES (decl)))\n-\tDECL_ATTRIBUTES (decl)\n-\t  = tree_cons (get_identifier (\"omp declare target\"),\n-\t\t       NULL_TREE, DECL_ATTRIBUTES (decl));\n+\t{\n+\t  DECL_ATTRIBUTES (decl)\n+\t    = tree_cons (get_identifier (\"omp declare target\"),\n+\t\t\t NULL_TREE, DECL_ATTRIBUTES (decl));\n+\t  symtab_node *node = symtab_node::get (decl);\n+\t  if (node != NULL)\n+\t    {\n+\t      node->offloadable = 1;\n+\t      if (ENABLE_OFFLOADING)\n+\t\t{\n+\t\t  g->have_offload = true;\n+\t\t  if (is_a <varpool_node *> (node))\n+\t\t    vec_safe_push (offload_vars, decl);\n+\t\t}\n+\t    }\n+\t}\n     }\n \n   /* This is the last point we can lower alignment so give the target the"}, {"sha": "c5670dfb7db73408a39e1fd8b52f9961a7153fb6", "filename": "libgomp/testsuite/libgomp.c-c++-common/declare_target-1.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f20fe2cb213dffba47ec1b62c625590b5bbe50d7/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Fdeclare_target-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f20fe2cb213dffba47ec1b62c625590b5bbe50d7/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Fdeclare_target-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Fdeclare_target-1.c?ref=f20fe2cb213dffba47ec1b62c625590b5bbe50d7", "patch": "@@ -0,0 +1,22 @@\n+/* PR c++/99509  */\n+\n+#pragma omp declare target\n+int data[] = {5};\n+#pragma omp end declare target\n+\n+static inline int\n+foo (int idx)\n+{\n+  return data[idx];\n+}\n+\n+int\n+main ()\n+{\n+  int i = -1;\n+  #pragma omp target map(from:i)\n+    i = foo(0);\n+  if (i != 5)\n+    __builtin_abort ();\n+  return 0;\n+}"}]}