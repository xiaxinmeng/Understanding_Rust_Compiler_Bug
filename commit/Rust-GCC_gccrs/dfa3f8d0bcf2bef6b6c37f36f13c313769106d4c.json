{"sha": "dfa3f8d0bcf2bef6b6c37f36f13c313769106d4c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGZhM2Y4ZDBiY2YyYmVmNmI2YzM3ZjM2ZjEzYzMxMzc2OTEwNmQ0Yw==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2013-04-04T16:14:50Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2013-04-04T16:14:50Z"}, "message": "arm-protos.h (arm_builtin_vectorized_function): New function prototype.\n\n2013-04-04  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n\n\t* config/arm/arm-protos.h (arm_builtin_vectorized_function):\n\tNew function prototype.\n\t* config/arm/arm.c (TARGET_VECTORIZE_BUILTINS): Define.\n\t(TARGET_VECTORIZE_BUILTIN_VECTORIZED_FUNCTION): Likewise.\n\t(arm_builtin_vectorized_function): New function.\n\nFrom-SVN: r197490", "tree": {"sha": "4345b62d30872d6cb8ac895a14571097fe3ccd88", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4345b62d30872d6cb8ac895a14571097fe3ccd88"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dfa3f8d0bcf2bef6b6c37f36f13c313769106d4c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfa3f8d0bcf2bef6b6c37f36f13c313769106d4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dfa3f8d0bcf2bef6b6c37f36f13c313769106d4c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfa3f8d0bcf2bef6b6c37f36f13c313769106d4c/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f783775863de46654119ab67cfa814f1408cf713", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f783775863de46654119ab67cfa814f1408cf713", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f783775863de46654119ab67cfa814f1408cf713"}], "stats": {"total": 70, "additions": 70, "deletions": 0}, "files": [{"sha": "6b9c6ce840a742c32267f1a37664dad68b5cb9e9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfa3f8d0bcf2bef6b6c37f36f13c313769106d4c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfa3f8d0bcf2bef6b6c37f36f13c313769106d4c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dfa3f8d0bcf2bef6b6c37f36f13c313769106d4c", "patch": "@@ -1,3 +1,11 @@\n+2013-04-04  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/arm/arm-protos.h (arm_builtin_vectorized_function):\n+\tNew function prototype.\n+\t* config/arm/arm.c (TARGET_VECTORIZE_BUILTINS): Define.\n+\t(TARGET_VECTORIZE_BUILTIN_VECTORIZED_FUNCTION): Likewise.\n+\t(arm_builtin_vectorized_function): New function.\n+\n 2013-04-04  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* config/arm/arm_neon_builtins.def: New file."}, {"sha": "4274c0dbd7b9fdead7b825c04c303ba1fb76a310", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfa3f8d0bcf2bef6b6c37f36f13c313769106d4c/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfa3f8d0bcf2bef6b6c37f36f13c313769106d4c/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=dfa3f8d0bcf2bef6b6c37f36f13c313769106d4c", "patch": "@@ -78,6 +78,7 @@ extern char *neon_output_shift_immediate (const char *, char, rtx *,\n extern void neon_pairwise_reduce (rtx, rtx, enum machine_mode,\n \t\t\t\t  rtx (*) (rtx, rtx, rtx));\n extern rtx neon_make_constant (rtx);\n+extern tree arm_builtin_vectorized_function (tree, tree, tree);\n extern void neon_expand_vector_init (rtx, rtx);\n extern void neon_lane_bounds (rtx, HOST_WIDE_INT, HOST_WIDE_INT);\n extern void neon_const_bounds (rtx, HOST_WIDE_INT, HOST_WIDE_INT);"}, {"sha": "231a27f5ffdeb6d640d00de326fa934fa98186c8", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfa3f8d0bcf2bef6b6c37f36f13c313769106d4c/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfa3f8d0bcf2bef6b6c37f36f13c313769106d4c/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=dfa3f8d0bcf2bef6b6c37f36f13c313769106d4c", "patch": "@@ -620,6 +620,13 @@ static const struct attribute_spec arm_attribute_table[] =\n #undef TARGET_CLASS_LIKELY_SPILLED_P\n #define TARGET_CLASS_LIKELY_SPILLED_P arm_class_likely_spilled_p\n \n+#undef TARGET_VECTORIZE_BUILTINS\n+#define TARGET_VECTORIZE_BUILTINS\n+\n+#undef TARGET_VECTORIZE_BUILTIN_VECTORIZED_FUNCTION\n+#define TARGET_VECTORIZE_BUILTIN_VECTORIZED_FUNCTION \\\n+  arm_builtin_vectorized_function\n+\n #undef TARGET_VECTOR_ALIGNMENT\n #define TARGET_VECTOR_ALIGNMENT arm_vector_alignment\n \n@@ -25853,6 +25860,60 @@ arm_have_conditional_execution (void)\n   return !TARGET_THUMB1;\n }\n \n+tree\n+arm_builtin_vectorized_function (tree fndecl, tree type_out, tree type_in)\n+{\n+  enum machine_mode in_mode, out_mode;\n+  int in_n, out_n;\n+\n+  if (TREE_CODE (type_out) != VECTOR_TYPE\n+      || TREE_CODE (type_in) != VECTOR_TYPE\n+      || !(TARGET_NEON && TARGET_FPU_ARMV8 && flag_unsafe_math_optimizations))\n+    return NULL_TREE;\n+\n+  out_mode = TYPE_MODE (TREE_TYPE (type_out));\n+  out_n = TYPE_VECTOR_SUBPARTS (type_out);\n+  in_mode = TYPE_MODE (TREE_TYPE (type_in));\n+  in_n = TYPE_VECTOR_SUBPARTS (type_in);\n+\n+/* ARM_CHECK_BUILTIN_MODE and ARM_FIND_VRINT_VARIANT are used to find the\n+   decl of the vectorized builtin for the appropriate vector mode.\n+   NULL_TREE is returned if no such builtin is available.  */\n+#undef ARM_CHECK_BUILTIN_MODE\n+#define ARM_CHECK_BUILTIN_MODE(C) \\\n+  (out_mode == SFmode && out_n == C \\\n+   && in_mode == SFmode && in_n == C)\n+\n+#undef ARM_FIND_VRINT_VARIANT\n+#define ARM_FIND_VRINT_VARIANT(N) \\\n+  (ARM_CHECK_BUILTIN_MODE (2) \\\n+    ? arm_builtin_decl(ARM_BUILTIN_NEON_##N##v2sf, false) \\\n+    : (ARM_CHECK_BUILTIN_MODE (4) \\\n+      ? arm_builtin_decl(ARM_BUILTIN_NEON_##N##v4sf, false) \\\n+      : NULL_TREE))\n+\n+  if (DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_NORMAL)\n+    {\n+      enum built_in_function fn = DECL_FUNCTION_CODE (fndecl);\n+      switch (fn)\n+        {\n+          case BUILT_IN_FLOORF:\n+            return ARM_FIND_VRINT_VARIANT (vrintm);\n+          case BUILT_IN_CEILF:\n+            return ARM_FIND_VRINT_VARIANT (vrintp);\n+          case BUILT_IN_TRUNCF:\n+            return ARM_FIND_VRINT_VARIANT (vrintz);\n+          case BUILT_IN_ROUNDF:\n+            return ARM_FIND_VRINT_VARIANT (vrinta);\n+          default:\n+            return NULL_TREE;\n+        }\n+    }\n+  return NULL_TREE;\n+}\n+#undef ARM_CHECK_BUILTIN_MODE\n+#undef ARM_FIND_VRINT_VARIANT\n+\n /* The AAPCS sets the maximum alignment of a vector to 64 bits.  */\n static HOST_WIDE_INT\n arm_vector_alignment (const_tree type)"}]}