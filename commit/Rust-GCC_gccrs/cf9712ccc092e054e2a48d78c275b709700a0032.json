{"sha": "cf9712ccc092e054e2a48d78c275b709700a0032", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2Y5NzEyY2NjMDkyZTA1NGUyYTQ4ZDc4YzI3NWI3MDk3MDBhMDAzMg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2011-01-10T14:33:04Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2011-01-10T14:33:04Z"}, "message": "re PR tree-optimization/47234 (ipa-split is executed before profile feedback is read)\n\n\n\tPR tree-optimization/47234 \n\t* tree-pass.h (TODO_rebuild_cgraph_edges): New TODO.\n\t(pass_feedback_split_functions): Declare.\n\t* passes.c (init_optimization_passes): Add ipa-split as subpass of\n\ttree-profile.\n\t* ipa-split.c (gate_split_functions): Update comments; disable\n\tsplit-functions for profile_arc_flag and branch_probabilities.\n\t(gate_feedback_split_functions): New function.\n\t(execute_feedback_split_functions): New function.\n\t(pass_feedback_split_functions): New global var.\n\nFrom-SVN: r168632", "tree": {"sha": "bbc73f1eb46e75ef826904a55147a08ff0e52674", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bbc73f1eb46e75ef826904a55147a08ff0e52674"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cf9712ccc092e054e2a48d78c275b709700a0032", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf9712ccc092e054e2a48d78c275b709700a0032", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf9712ccc092e054e2a48d78c275b709700a0032", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf9712ccc092e054e2a48d78c275b709700a0032/comments", "author": null, "committer": null, "parents": [{"sha": "94cd932caeac5f720dd5a5f78583a5eaea456c6c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94cd932caeac5f720dd5a5f78583a5eaea456c6c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94cd932caeac5f720dd5a5f78583a5eaea456c6c"}], "stats": {"total": 76, "additions": 74, "deletions": 2}, "files": [{"sha": "4eff7926d8ca8df2e12636600089a4190bf87aeb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf9712ccc092e054e2a48d78c275b709700a0032/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf9712ccc092e054e2a48d78c275b709700a0032/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cf9712ccc092e054e2a48d78c275b709700a0032", "patch": "@@ -1,3 +1,16 @@\n+2011-01-10  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR tree-optimization/47234 \n+\t* tree-pass.h (TODO_rebuild_cgraph_edges): New TODO.\n+\t(pass_feedback_split_functions): Declare.\n+\t* passes.c (init_optimization_passes): Add ipa-split as subpass of\n+\ttree-profile.\n+\t* ipa-split.c (gate_split_functions): Update comments; disable\n+\tsplit-functions for profile_arc_flag and branch_probabilities.\n+\t(gate_feedback_split_functions): New function.\n+\t(execute_feedback_split_functions): New function.\n+\t(pass_feedback_split_functions): New global var.\n+\n 2011-01-10  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR lto/46760"}, {"sha": "4fcbfe940ba57a95458807b1d427cee7ced148d4", "filename": "gcc/ipa-split.c", "status": "modified", "additions": 50, "deletions": 2, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf9712ccc092e054e2a48d78c275b709700a0032/gcc%2Fipa-split.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf9712ccc092e054e2a48d78c275b709700a0032/gcc%2Fipa-split.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-split.c?ref=cf9712ccc092e054e2a48d78c275b709700a0032", "patch": "@@ -1265,7 +1265,9 @@ execute_split_functions (void)\n   /* See if it makes sense to try to split.\n      It makes sense to split if we inline, that is if we have direct calls to\n      handle or direct calls are possibly going to appear as result of indirect\n-     inlining or LTO.\n+     inlining or LTO.  Also handle -fprofile-generate as LTO to allow non-LTO\n+     training for LTO -fprofile-use build.\n+\n      Note that we are not completely conservative about disqualifying functions\n      called once.  It is possible that the caller is called more then once and\n      then inlining would still benefit.  */\n@@ -1336,10 +1338,15 @@ execute_split_functions (void)\n   return todo;\n }\n \n+/* Gate function splitting pass.  When doing profile feedback, we want\n+   to execute the pass after profiling is read.  So disable one in \n+   early optimization.  */\n+\n static bool\n gate_split_functions (void)\n {\n-  return flag_partial_inlining;\n+  return (flag_partial_inlining\n+\t  && !profile_arc_flag && !flag_branch_probabilities);\n }\n \n struct gimple_opt_pass pass_split_functions =\n@@ -1360,3 +1367,44 @@ struct gimple_opt_pass pass_split_functions =\n   TODO_dump_func\t\t\t/* todo_flags_finish */\n  }\n };\n+\n+/* Gate feedback driven function splitting pass.\n+   We don't need to split when profiling at all, we are producing\n+   lousy code anyway.  */\n+\n+static bool\n+gate_feedback_split_functions (void)\n+{\n+  return (flag_partial_inlining\n+\t  && flag_branch_probabilities);\n+}\n+\n+/* Execute function splitting pass.  */\n+\n+static unsigned int\n+execute_feedback_split_functions (void)\n+{\n+  unsigned int retval = execute_split_functions ();\n+  if (retval)\n+    retval |= TODO_rebuild_cgraph_edges;\n+  return retval;\n+}\n+\n+struct gimple_opt_pass pass_feedback_split_functions =\n+{\n+ {\n+  GIMPLE_PASS,\n+  \"feedback_fnsplit\",\t\t\t/* name */\n+  gate_feedback_split_functions,\t/* gate */\n+  execute_feedback_split_functions,\t/* execute */\n+  NULL,\t\t\t\t\t/* sub */\n+  NULL,\t\t\t\t\t/* next */\n+  0,\t\t\t\t\t/* static_pass_number */\n+  TV_IPA_FNSPLIT,\t\t\t/* tv_id */\n+  PROP_cfg,\t\t\t\t/* properties_required */\n+  0,\t\t\t\t\t/* properties_provided */\n+  0,\t\t\t\t\t/* properties_destroyed */\n+  0,\t\t\t\t\t/* todo_flags_start */\n+  TODO_dump_func\t\t\t/* todo_flags_finish */\n+ }\n+};"}, {"sha": "804ac9f2a601f26157ba6802bd1bfd38aefe5dfe", "filename": "gcc/passes.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf9712ccc092e054e2a48d78c275b709700a0032/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf9712ccc092e054e2a48d78c275b709700a0032/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=cf9712ccc092e054e2a48d78c275b709700a0032", "patch": "@@ -785,6 +785,10 @@ init_optimization_passes (void)\n       NEXT_PASS (pass_inline_parameters);\n     }\n   NEXT_PASS (pass_ipa_tree_profile);\n+    {\n+      struct opt_pass **p = &pass_ipa_tree_profile.pass.sub;\n+      NEXT_PASS (pass_feedback_split_functions);\n+    }\n   NEXT_PASS (pass_ipa_increase_alignment);\n   NEXT_PASS (pass_ipa_matrix_reorg);\n   NEXT_PASS (pass_ipa_lower_emutls);\n@@ -1227,6 +1231,9 @@ execute_function_todo (void *data)\n   if (flags & TODO_rebuild_frequencies)\n     rebuild_frequencies ();\n \n+  if (flags & TODO_rebuild_cgraph_edges)\n+    rebuild_cgraph_edges ();\n+\n   /* If we've seen errors do not bother running any verifiers.  */\n   if (seen_error ())\n     return;"}, {"sha": "32d8f40470cc29756617e653347f8a79149d5f3a", "filename": "gcc/tree-pass.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf9712ccc092e054e2a48d78c275b709700a0032/gcc%2Ftree-pass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf9712ccc092e054e2a48d78c275b709700a0032/gcc%2Ftree-pass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pass.h?ref=cf9712ccc092e054e2a48d78c275b709700a0032", "patch": "@@ -312,6 +312,9 @@ struct dump_file_info\n /* Rebuild the addressable-vars bitmap and do register promotion.  */\n #define TODO_update_address_taken\t(1 << 21)\n \n+/* Rebuild the callgraph edges.  */\n+#define TODO_rebuild_cgraph_edges       (1 << 22)\n+\n /* Internally used in execute_function_todo().  */\n #define TODO_update_ssa_any\t\t\\\n     (TODO_update_ssa\t\t\t\\\n@@ -442,6 +445,7 @@ extern struct gimple_opt_pass pass_local_pure_const;\n extern struct gimple_opt_pass pass_tracer;\n extern struct gimple_opt_pass pass_warn_unused_result;\n extern struct gimple_opt_pass pass_split_functions;\n+extern struct gimple_opt_pass pass_feedback_split_functions;\n \n /* IPA Passes */\n extern struct simple_ipa_opt_pass pass_ipa_lower_emutls;"}]}