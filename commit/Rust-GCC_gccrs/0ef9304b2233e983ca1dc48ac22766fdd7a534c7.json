{"sha": "0ef9304b2233e983ca1dc48ac22766fdd7a534c7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGVmOTMwNGIyMjMzZTk4M2NhMWRjNDhhYzIyNzY2ZmRkN2E1MzRjNw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2009-09-22T15:12:02Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2009-09-22T15:12:02Z"}, "message": "arm.c (TARGET_ASM_TRAMPOLINE_TEMPLATE): New.\n\n        * config/arm/arm.c (TARGET_ASM_TRAMPOLINE_TEMPLATE): New.\n        (TARGET_TRAMPOLINE_INIT, TARGET_TRAMPOLINE_ADJUST_ADDRESS): New.\n        (arm_asm_trampoline_template): New.\n        (arm_trampoline_init, arm_trampoline_adjust_address): New.\n        * config/arm/arm.h (TRAMPOLINE_TEMPLATE,\n        * ARM_TRAMPOLINE_TEMPLATE,\n        THUMB2_TRAMPOLINE_TEMPLATE, THUMB1_TRAMPOLINE_TEMPLATE): Move all\n        code to arm_asm_trampoline_template.\n        (TRAMPOLINE_ADJUST_ADDRESS): Move code to\n        arm_trampoline_adjust_address.\n        (INITIALIZE_TRAMPOLINE): Move code to arm_trampoline_init;\n        adjust for target hook parameters.\n\nFrom-SVN: r151986", "tree": {"sha": "bbe8cef727238349f8302a178cfe1a753063734a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bbe8cef727238349f8302a178cfe1a753063734a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0ef9304b2233e983ca1dc48ac22766fdd7a534c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ef9304b2233e983ca1dc48ac22766fdd7a534c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ef9304b2233e983ca1dc48ac22766fdd7a534c7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ef9304b2233e983ca1dc48ac22766fdd7a534c7/comments", "author": null, "committer": null, "parents": [{"sha": "672f0baaec5def33eb97a0936844a4f18b417e87", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/672f0baaec5def33eb97a0936844a4f18b417e87", "html_url": "https://github.com/Rust-GCC/gccrs/commit/672f0baaec5def33eb97a0936844a4f18b417e87"}], "stats": {"total": 191, "additions": 100, "deletions": 91}, "files": [{"sha": "4dd20d4d4be35db6ad65bc977e6f698e52804cc3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ef9304b2233e983ca1dc48ac22766fdd7a534c7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ef9304b2233e983ca1dc48ac22766fdd7a534c7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0ef9304b2233e983ca1dc48ac22766fdd7a534c7", "patch": "@@ -50,6 +50,18 @@\n \t* config/arc/arc.c (arc_trampoline_init): ... here.\n \t(TARGET_TRAMPOLINE_INIT): New.\n \n+\t* config/arm/arm.c (TARGET_ASM_TRAMPOLINE_TEMPLATE): New.\n+\t(TARGET_TRAMPOLINE_INIT, TARGET_TRAMPOLINE_ADJUST_ADDRESS): New.\n+\t(arm_asm_trampoline_template): New.\n+\t(arm_trampoline_init, arm_trampoline_adjust_address): New.\n+\t* config/arm/arm.h (TRAMPOLINE_TEMPLATE, ARM_TRAMPOLINE_TEMPLATE,\n+\tTHUMB2_TRAMPOLINE_TEMPLATE, THUMB1_TRAMPOLINE_TEMPLATE): Move all\n+\tcode to arm_asm_trampoline_template.\n+\t(TRAMPOLINE_ADJUST_ADDRESS): Move code to\n+\tarm_trampoline_adjust_address.\n+\t(INITIALIZE_TRAMPOLINE): Move code to arm_trampoline_init;\n+\tadjust for target hook parameters.\n+\n 2009-09-22  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/41395"}, {"sha": "efc329b823bf015b469cd0765535d8a3f42649c2", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ef9304b2233e983ca1dc48ac22766fdd7a534c7/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ef9304b2233e983ca1dc48ac22766fdd7a534c7/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=0ef9304b2233e983ca1dc48ac22766fdd7a534c7", "patch": "@@ -219,6 +219,9 @@ static tree arm_convert_to_type (tree type, tree expr);\n static bool arm_scalar_mode_supported_p (enum machine_mode);\n static bool arm_frame_pointer_required (void);\n static bool arm_can_eliminate (const int, const int);\n+static void arm_asm_trampoline_template (FILE *);\n+static void arm_trampoline_init (rtx, tree, rtx);\n+static rtx arm_trampoline_adjust_address (rtx);\n \n \f\n /* Table of machine attributes.  */\n@@ -366,6 +369,13 @@ static const struct attribute_spec arm_attribute_table[] =\n #undef TARGET_ALLOCATE_STACK_SLOTS_FOR_ARGS\n #define TARGET_ALLOCATE_STACK_SLOTS_FOR_ARGS arm_allocate_stack_slots_for_args\n \n+#undef TARGET_ASM_TRAMPOLINE_TEMPLATE\n+#define TARGET_ASM_TRAMPOLINE_TEMPLATE arm_asm_trampoline_template\n+#undef TARGET_TRAMPOLINE_INIT\n+#define TARGET_TRAMPOLINE_INIT arm_trampoline_init\n+#undef TARGET_TRAMPOLINE_ADJUST_ADDRESS\n+#define TARGET_TRAMPOLINE_ADJUST_ADDRESS arm_trampoline_adjust_address\n+\n #undef TARGET_DEFAULT_SHORT_ENUMS\n #define TARGET_DEFAULT_SHORT_ENUMS arm_default_short_enums\n \n@@ -1985,6 +1995,84 @@ arm_allocate_stack_slots_for_args (void)\n   return !IS_NAKED (arm_current_func_type ());\n }\n \n+\f\n+/* Output assembler code for a block containing the constant parts\n+   of a trampoline, leaving space for the variable parts.\n+\n+   On the ARM, (if r8 is the static chain regnum, and remembering that\n+   referencing pc adds an offset of 8) the trampoline looks like:\n+\t   ldr \t\tr8, [pc, #0]\n+\t   ldr\t\tpc, [pc]\n+\t   .word\tstatic chain value\n+\t   .word\tfunction's address\n+   XXX FIXME: When the trampoline returns, r8 will be clobbered.  */\n+\n+static void\n+arm_asm_trampoline_template (FILE *f)\n+{\n+  if (TARGET_ARM)\n+    {\n+      asm_fprintf (f, \"\\tldr\\t%r, [%r, #0]\\n\", STATIC_CHAIN_REGNUM, PC_REGNUM);\n+      asm_fprintf (f, \"\\tldr\\t%r, [%r, #0]\\n\", PC_REGNUM, PC_REGNUM);\n+    }\n+  else if (TARGET_THUMB2)\n+    {\n+      /* The Thumb-2 trampoline is similar to the arm implementation.\n+\t Unlike 16-bit Thumb, we enter the stub in thumb mode.  */\n+      asm_fprintf (f, \"\\tldr.w\\t%r, [%r, #4]\\n\",\n+\t\t   STATIC_CHAIN_REGNUM, PC_REGNUM);\n+      asm_fprintf (f, \"\\tldr.w\\t%r, [%r, #4]\\n\", PC_REGNUM, PC_REGNUM);\n+    }\n+  else\n+    {\n+      ASM_OUTPUT_ALIGN (f, 2);\n+      fprintf (f, \"\\t.code\\t16\\n\");\n+      fprintf (f, \".Ltrampoline_start:\\n\");\n+      asm_fprintf (f, \"\\tpush\\t{r0, r1}\\n\");\n+      asm_fprintf (f, \"\\tldr\\tr0, [%r, #8]\\n\", PC_REGNUM);\n+      asm_fprintf (f, \"\\tmov\\t%r, r0\\n\", STATIC_CHAIN_REGNUM);\n+      asm_fprintf (f, \"\\tldr\\tr0, [%r, #8]\\n\", PC_REGNUM);\n+      asm_fprintf (f, \"\\tstr\\tr0, [%r, #4]\\n\", SP_REGNUM);\n+      asm_fprintf (f, \"\\tpop\\t{r0, %r}\\n\", PC_REGNUM);\n+    }\n+  assemble_aligned_integer (UNITS_PER_WORD, const0_rtx);\n+  assemble_aligned_integer (UNITS_PER_WORD, const0_rtx);\n+}\n+\n+/* Emit RTL insns to initialize the variable parts of a trampoline.  */\n+\n+static void\n+arm_trampoline_init (rtx m_tramp, tree fndecl, rtx chain_value)\n+{\n+  rtx fnaddr, mem, a_tramp;\n+\n+  emit_block_move (m_tramp, assemble_trampoline_template (),\n+\t\t   GEN_INT (TRAMPOLINE_SIZE), BLOCK_OP_NORMAL);\n+\n+  mem = adjust_address (m_tramp, SImode, TARGET_32BIT ? 8 : 12);\n+  emit_move_insn (mem, chain_value);\n+\n+  mem = adjust_address (m_tramp, SImode, TARGET_32BIT ? 12 : 16);\n+  fnaddr = XEXP (DECL_RTL (fndecl), 0);\n+  emit_move_insn (mem, fnaddr);\n+\n+  a_tramp = XEXP (m_tramp, 0);\n+  emit_library_call (gen_rtx_SYMBOL_REF (Pmode, \"__clear_cache\"),\n+\t\t     LCT_NORMAL, VOIDmode, 2, a_tramp, Pmode,\n+\t\t     plus_constant (a_tramp, TRAMPOLINE_SIZE), Pmode);\n+}\n+\n+/* Thumb trampolines should be entered in thumb mode, so set\n+   the bottom bit of the address.  */\n+\n+static rtx\n+arm_trampoline_adjust_address (rtx addr)\n+{\n+  if (TARGET_THUMB)\n+    addr = expand_simple_binop (Pmode, IOR, addr, const1_rtx,\n+\t\t\t\tNULL, 0, OPTAB_LIB_WIDEN);\n+  return addr;\n+}\n \f\n /* Return 1 if it is possible to return using a single instruction.\n    If SIBLING is non-null, this is a test for a return before a sibling"}, {"sha": "9272ca51cbadf1d34800d43665a268d8991f0a99", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 0, "deletions": 91, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ef9304b2233e983ca1dc48ac22766fdd7a534c7/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ef9304b2233e983ca1dc48ac22766fdd7a534c7/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=0ef9304b2233e983ca1dc48ac22766fdd7a534c7", "patch": "@@ -1861,102 +1861,11 @@ typedef struct\n    once for every function before code is generated.  */\n #define INIT_EXPANDERS  arm_init_expanders ()\n \n-/* Output assembler code for a block containing the constant parts\n-   of a trampoline, leaving space for the variable parts.\n-\n-   On the ARM, (if r8 is the static chain regnum, and remembering that\n-   referencing pc adds an offset of 8) the trampoline looks like:\n-\t   ldr \t\tr8, [pc, #0]\n-\t   ldr\t\tpc, [pc]\n-\t   .word\tstatic chain value\n-\t   .word\tfunction's address\n-   XXX FIXME: When the trampoline returns, r8 will be clobbered.  */\n-#define ARM_TRAMPOLINE_TEMPLATE(FILE)\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\\\n-  asm_fprintf (FILE, \"\\tldr\\t%r, [%r, #0]\\n\",\t\t\t\\\n-\t       STATIC_CHAIN_REGNUM, PC_REGNUM);\t\t\t\\\n-  asm_fprintf (FILE, \"\\tldr\\t%r, [%r, #0]\\n\",\t\t\t\\\n-\t       PC_REGNUM, PC_REGNUM);\t\t\t\t\\\n-  assemble_aligned_integer (UNITS_PER_WORD, const0_rtx);\t\\\n-  assemble_aligned_integer (UNITS_PER_WORD, const0_rtx);\t\\\n-}\n-\n-/* The Thumb-2 trampoline is similar to the arm implementation.\n-   Unlike 16-bit Thumb, we enter the stub in thumb mode.  */\n-#define THUMB2_TRAMPOLINE_TEMPLATE(FILE)\t\t\t\\\n-{\t\t\t\t\t\t\t\t\\\n-  asm_fprintf (FILE, \"\\tldr.w\\t%r, [%r, #4]\\n\",\t\t\t\\\n-\t       STATIC_CHAIN_REGNUM, PC_REGNUM);\t\t\t\\\n-  asm_fprintf (FILE, \"\\tldr.w\\t%r, [%r, #4]\\n\",\t\t\t\\\n-\t       PC_REGNUM, PC_REGNUM);\t\t\t\t\\\n-  assemble_aligned_integer (UNITS_PER_WORD, const0_rtx);\t\\\n-  assemble_aligned_integer (UNITS_PER_WORD, const0_rtx);\t\\\n-}\n-\n-#define THUMB1_TRAMPOLINE_TEMPLATE(FILE)\t\\\n-{\t\t\t\t\t\t\\\n-  ASM_OUTPUT_ALIGN(FILE, 2);\t\t\t\\\n-  fprintf (FILE, \"\\t.code\\t16\\n\");\t\t\\\n-  fprintf (FILE, \".Ltrampoline_start:\\n\");\t\\\n-  asm_fprintf (FILE, \"\\tpush\\t{r0, r1}\\n\");\t\\\n-  asm_fprintf (FILE, \"\\tldr\\tr0, [%r, #8]\\n\",\t\\\n-\t       PC_REGNUM);\t\t\t\\\n-  asm_fprintf (FILE, \"\\tmov\\t%r, r0\\n\",\t\t\\\n-\t       STATIC_CHAIN_REGNUM);\t\t\\\n-  asm_fprintf (FILE, \"\\tldr\\tr0, [%r, #8]\\n\",\t\\\n-\t       PC_REGNUM);\t\t\t\\\n-  asm_fprintf (FILE, \"\\tstr\\tr0, [%r, #4]\\n\",\t\\\n-\t       SP_REGNUM);\t\t\t\\\n-  asm_fprintf (FILE, \"\\tpop\\t{r0, %r}\\n\",\t\\\n-\t       PC_REGNUM);\t\t\t\\\n-  assemble_aligned_integer (UNITS_PER_WORD, const0_rtx);\t\\\n-  assemble_aligned_integer (UNITS_PER_WORD, const0_rtx);\t\\\n-}\n-\n-#define TRAMPOLINE_TEMPLATE(FILE)\t\t\\\n-  if (TARGET_ARM)\t\t\t\t\\\n-    ARM_TRAMPOLINE_TEMPLATE (FILE)\t\t\\\n-  else if (TARGET_THUMB2)\t\t\t\\\n-    THUMB2_TRAMPOLINE_TEMPLATE (FILE)\t\t\\\n-  else\t\t\t\t\t\t\\\n-    THUMB1_TRAMPOLINE_TEMPLATE (FILE)\n-\n-/* Thumb trampolines should be entered in thumb mode, so set the bottom bit\n-   of the address.  */\n-#define TRAMPOLINE_ADJUST_ADDRESS(ADDR) do\t\t\t\t    \\\n-{\t\t\t\t\t\t\t\t\t    \\\n-  if (TARGET_THUMB)\t\t\t\t\t\t\t    \\\n-    (ADDR) = expand_simple_binop (Pmode, IOR, (ADDR), GEN_INT(1),\t    \\\n-\t\t\t\t  gen_reg_rtx (Pmode), 0, OPTAB_LIB_WIDEN); \\\n-} while(0)\n-\n /* Length in units of the trampoline for entering a nested function.  */\n #define TRAMPOLINE_SIZE  (TARGET_32BIT ? 16 : 20)\n \n /* Alignment required for a trampoline in bits.  */\n #define TRAMPOLINE_ALIGNMENT  32\n-\n-\n-/* Emit RTL insns to initialize the variable parts of a trampoline.\n-   FNADDR is an RTX for the address of the function's pure code.\n-   CXT is an RTX for the static chain value for the function.  */\n-#ifndef INITIALIZE_TRAMPOLINE\n-#define INITIALIZE_TRAMPOLINE(TRAMP, FNADDR, CXT)\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  emit_move_insn (gen_rtx_MEM (SImode,\t\t\t\t\t\\\n-\t\t\t       plus_constant (TRAMP,\t\t\t\\\n-\t\t\t\t\t      TARGET_32BIT ? 8 : 12)),\t\\\n-\t\t  CXT);\t\t\t\t\t\t\t\\\n-  emit_move_insn (gen_rtx_MEM (SImode,\t\t\t\t\t\\\n-\t\t\t       plus_constant (TRAMP,\t\t\t\\\n-\t\t\t\t\t      TARGET_32BIT ? 12 : 16)),\t\\\n-\t\t  FNADDR);\t\t\t\t\t\t\\\n-  emit_library_call (gen_rtx_SYMBOL_REF (Pmode, \"__clear_cache\"),\t\\\n-\t\t     LCT_NORMAL, VOIDmode, 2, TRAMP, Pmode,\t\t\\\n-\t\t     plus_constant (TRAMP, TRAMPOLINE_SIZE), Pmode);\t\\\n-}\n-#endif\n-\n \f\n /* Addressing modes, and classification of registers for them.  */\n #define HAVE_POST_INCREMENT   1"}]}