{"sha": "5cc19c62469ac106abc24b9a684132eb7c77b92d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWNjMTljNjI0NjlhYzEwNmFiYzI0YjlhNjg0MTMyZWI3Yzc3YjkyZA==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@gmail.com", "date": "2013-06-04T14:11:28Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2013-06-04T14:11:28Z"}, "message": "ibm-ldouble.c: Enable for little-endian.\n\n\t* config/rs6000/ibm-ldouble.c: Enable for little-endian.\n\nFrom-SVN: r199650", "tree": {"sha": "01faa98425018aa23b45a1406b9caa1959a53729", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/01faa98425018aa23b45a1406b9caa1959a53729"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5cc19c62469ac106abc24b9a684132eb7c77b92d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5cc19c62469ac106abc24b9a684132eb7c77b92d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5cc19c62469ac106abc24b9a684132eb7c77b92d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5cc19c62469ac106abc24b9a684132eb7c77b92d/comments", "author": {"login": "amodra", "id": 6006325, "node_id": "MDQ6VXNlcjYwMDYzMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amodra", "html_url": "https://github.com/amodra", "followers_url": "https://api.github.com/users/amodra/followers", "following_url": "https://api.github.com/users/amodra/following{/other_user}", "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}", "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amodra/subscriptions", "organizations_url": "https://api.github.com/users/amodra/orgs", "repos_url": "https://api.github.com/users/amodra/repos", "events_url": "https://api.github.com/users/amodra/events{/privacy}", "received_events_url": "https://api.github.com/users/amodra/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "44b20bb8ce8bda790febf1e1afd33c4b97bfc8de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44b20bb8ce8bda790febf1e1afd33c4b97bfc8de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44b20bb8ce8bda790febf1e1afd33c4b97bfc8de"}], "stats": {"total": 10, "additions": 7, "deletions": 3}, "files": [{"sha": "956ecb0fdb40368144479155b356f19e2bc46750", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cc19c62469ac106abc24b9a684132eb7c77b92d/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cc19c62469ac106abc24b9a684132eb7c77b92d/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=5cc19c62469ac106abc24b9a684132eb7c77b92d", "patch": "@@ -1,3 +1,7 @@\n+2013-06-04  Alan Modra  <amodra@gmail.com>\n+\n+\t* config/rs6000/ibm-ldouble.c: Enable for little-endian.\n+\n 2013-06-03  Yuri Rumyantsev  <yuri.s.rumyantsev@intel.com>\n \n \t* config/i386/cpuinfo.c (INTEL_SLM): New enum value."}, {"sha": "28e02e995d4a3369d538efff9d503a35e433e7ee", "filename": "libgcc/config/rs6000/ibm-ldouble.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cc19c62469ac106abc24b9a684132eb7c77b92d/libgcc%2Fconfig%2Frs6000%2Fibm-ldouble.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cc19c62469ac106abc24b9a684132eb7c77b92d/libgcc%2Fconfig%2Frs6000%2Fibm-ldouble.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frs6000%2Fibm-ldouble.c?ref=5cc19c62469ac106abc24b9a684132eb7c77b92d", "patch": "@@ -42,10 +42,10 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n    represented as (1.0, +0.0) or (1.0, -0.0), and the low part of a\n    NaN is don't-care.\n \n-   This code currently assumes big-endian.  */\n+   This code currently assumes the most significant double is in\n+   the lower numbered register or lower addressed memory.  */\n \n-#if (!defined (__LITTLE_ENDIAN__) \\\n-     && (defined (__MACH__) || defined (__powerpc__) || defined (_AIX)))\n+#if defined (__MACH__) || defined (__powerpc__) || defined (_AIX)\n \n #define fabs(x) __builtin_fabs(x)\n #define isless(x, y) __builtin_isless (x, y)"}]}