{"sha": "32a8d3f66a4d02b77774a713e5c4ff8d586af4f4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzJhOGQzZjY2YTRkMDJiNzc3NzRhNzEzZTVjNGZmOGQ1ODZhZjRmNA==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2017-01-15T17:03:55Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2017-01-15T17:03:55Z"}, "message": "ifcvt: Don't make invalid insns for a cond trap (PR78751)\n\nAs shown in the PR, ifcvt will happily make invalid insns when given the\nchance.  This patch teaches it some manners.\n\n\n\tPR rtl-optimization/78751\n\t* ifcvt.c (find_cond_trap): If we generated a non-existing insn,\n\tgive up.\n\nFrom-SVN: r244476", "tree": {"sha": "9d147960c82aa065ac13ca22a63ca37f25b4917e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9d147960c82aa065ac13ca22a63ca37f25b4917e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/32a8d3f66a4d02b77774a713e5c4ff8d586af4f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32a8d3f66a4d02b77774a713e5c4ff8d586af4f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32a8d3f66a4d02b77774a713e5c4ff8d586af4f4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32a8d3f66a4d02b77774a713e5c4ff8d586af4f4/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0cb4b758f5372ed1b5be14f79723ad59afba25f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cb4b758f5372ed1b5be14f79723ad59afba25f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0cb4b758f5372ed1b5be14f79723ad59afba25f2"}], "stats": {"total": 11, "additions": 11, "deletions": 0}, "files": [{"sha": "c689c58670c67f9aca625f57c9733dd9678a03f4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32a8d3f66a4d02b77774a713e5c4ff8d586af4f4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32a8d3f66a4d02b77774a713e5c4ff8d586af4f4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=32a8d3f66a4d02b77774a713e5c4ff8d586af4f4", "patch": "@@ -1,3 +1,9 @@\n+2017-01-15  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\tPR rtl-optimization/78751\n+\t* ifcvt.c (find_cond_trap): If we generated a non-existing insn,\n+\tgive up.\n+\n 2017-01-14  Jeff Law  <law@redhat.com>\n \n \tPR tree-optimization/79090"}, {"sha": "6d306392f603ba2990032dc5bf0a18cc9f7a451f", "filename": "gcc/ifcvt.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32a8d3f66a4d02b77774a713e5c4ff8d586af4f4/gcc%2Fifcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32a8d3f66a4d02b77774a713e5c4ff8d586af4f4/gcc%2Fifcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fifcvt.c?ref=32a8d3f66a4d02b77774a713e5c4ff8d586af4f4", "patch": "@@ -4686,6 +4686,11 @@ find_cond_trap (basic_block test_bb, edge then_edge, edge else_edge)\n   if (seq == NULL)\n     return FALSE;\n \n+  /* If that results in an invalid insn, back out.  */\n+  for (rtx_insn *x = seq; x; x = NEXT_INSN (x))\n+    if (recog_memoized (x) < 0)\n+      return FALSE;\n+\n   /* Emit the new insns before cond_earliest.  */\n   emit_insn_before_setloc (seq, cond_earliest, INSN_LOCATION (trap));\n "}]}