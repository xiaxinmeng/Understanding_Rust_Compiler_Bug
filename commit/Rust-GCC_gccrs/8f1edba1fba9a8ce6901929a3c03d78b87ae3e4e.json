{"sha": "8f1edba1fba9a8ce6901929a3c03d78b87ae3e4e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGYxZWRiYTFmYmE5YThjZTY5MDE5MjlhM2MwM2Q3OGI4N2FlM2U0ZQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2013-11-20T03:33:33Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2013-11-20T03:33:33Z"}, "message": "gdbhooks.py: Reorganize, to support regex matching and typedefs\n\n\t* gdbhooks.py (GdbSubprinter.__init__): Drop str_type_ field.\n\t(GdbSubprinter.handles_type): New.\n\t(GdbSubprinterTypeList): New subclass of GdbSubprinter.\n\t(GdbSubprinterRegex): New subclass of GdbSubprinter.\n\t(GdbPrettyPrinters.add_printer): Remove in favor of...\n\t(GdbPrettyPrinters.add_printer_for_types): ...this new method\n\tand...\n\t(GdbPrettyPrinters.add_printer_for_regex): ...this other new method.\n\t(GdbPrettyPrinters.__call__): Update search for subprinter\n\tto use handles_type method.\n\t(build_pretty_printer): Update registration of subprinters to\n\tuse the new API above, supporting multiple spelling of each type,\n\tand allowing for future regex-based subprinters.\n\nFrom-SVN: r205085", "tree": {"sha": "53631e39ee9d133a8eb5c5efbdb19a39f139cfb1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/53631e39ee9d133a8eb5c5efbdb19a39f139cfb1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8f1edba1fba9a8ce6901929a3c03d78b87ae3e4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f1edba1fba9a8ce6901929a3c03d78b87ae3e4e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f1edba1fba9a8ce6901929a3c03d78b87ae3e4e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f1edba1fba9a8ce6901929a3c03d78b87ae3e4e/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7900247f6eae25f5c199900ef937142680988900", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7900247f6eae25f5c199900ef937142680988900", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7900247f6eae25f5c199900ef937142680988900"}], "stats": {"total": 78, "additions": 65, "deletions": 13}, "files": [{"sha": "eb39253d89f02148abc8265073cf68a51cd56ac1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f1edba1fba9a8ce6901929a3c03d78b87ae3e4e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f1edba1fba9a8ce6901929a3c03d78b87ae3e4e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8f1edba1fba9a8ce6901929a3c03d78b87ae3e4e", "patch": "@@ -1,3 +1,19 @@\n+2013-11-19  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* gdbhooks.py (GdbSubprinter.__init__): Drop str_type_ field.\n+\t(GdbSubprinter.handles_type): New.\n+\t(GdbSubprinterTypeList): New subclass of GdbSubprinter.\n+\t(GdbSubprinterRegex): New subclass of GdbSubprinter.\n+\t(GdbPrettyPrinters.add_printer): Remove in favor of...\n+\t(GdbPrettyPrinters.add_printer_for_types): ...this new method\n+\tand...\n+\t(GdbPrettyPrinters.add_printer_for_regex): ...this other new method.\n+\t(GdbPrettyPrinters.__call__): Update search for subprinter\n+\tto use handles_type method.\n+\t(build_pretty_printer): Update registration of subprinters to\n+\tuse the new API above, supporting multiple spelling of each type,\n+\tand allowing for future regex-based subprinters.\n+\n 2013-11-19  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n \n \t* config/rs6000/rs6000.c (altivec_expand_vec_perm_const): Adjust"}, {"sha": "3afa7961feb1ea43f4a9c96818299593f063f795", "filename": "gcc/gdbhooks.py", "status": "modified", "additions": 49, "deletions": 13, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f1edba1fba9a8ce6901929a3c03d78b87ae3e4e/gcc%2Fgdbhooks.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f1edba1fba9a8ce6901929a3c03d78b87ae3e4e/gcc%2Fgdbhooks.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgdbhooks.py?ref=8f1edba1fba9a8ce6901929a3c03d78b87ae3e4e", "patch": "@@ -355,23 +355,50 @@ def to_string (self):\n #   * location_t\n \n class GdbSubprinter(gdb.printing.SubPrettyPrinter):\n-    def __init__(self, name, str_type_, class_):\n+    def __init__(self, name, class_):\n         super(GdbSubprinter, self).__init__(name)\n-        self.str_type_ = str_type_\n         self.class_ = class_\n \n+    def handles_type(self, str_type):\n+        raise NotImplementedError\n+\n+class GdbSubprinterTypeList(GdbSubprinter):\n+    \"\"\"\n+    A GdbSubprinter that handles a specific set of types\n+    \"\"\"\n+    def __init__(self, str_types, name, class_):\n+        super(GdbSubprinterTypeList, self).__init__(name, class_)\n+        self.str_types = frozenset(str_types)\n+\n+    def handles_type(self, str_type):\n+        return str_type in self.str_types\n+\n+class GdbSubprinterRegex(GdbSubprinter):\n+    \"\"\"\n+    A GdbSubprinter that handles types that match a regex\n+    \"\"\"\n+    def __init__(self, regex, name, class_):\n+        super(GdbSubprinterRegex, self).__init__(name, class_)\n+        self.regex = re.compile(regex)\n+\n+    def handles_type(self, str_type):\n+        return self.regex.match(str_type)\n+\n class GdbPrettyPrinters(gdb.printing.PrettyPrinter):\n     def __init__(self, name):\n         super(GdbPrettyPrinters, self).__init__(name, [])\n \n-    def add_printer(self, name, exp, class_):\n-        self.subprinters.append(GdbSubprinter(name, exp, class_))\n+    def add_printer_for_types(self, name, class_, types):\n+        self.subprinters.append(GdbSubprinterTypeList(name, class_, types))\n+\n+    def add_printer_for_regex(self, name, class_, regex):\n+        self.subprinters.append(GdbSubprinterRegex(name, class_, regex))\n \n     def __call__(self, gdbval):\n         type_ = gdbval.type.unqualified()\n-        str_type_ = str(type_)\n+        str_type = str(type_)\n         for printer in self.subprinters:\n-            if printer.enabled and str_type_ == printer.str_type_:\n+            if printer.enabled and printer.handles_type(str_type):\n                 return printer.class_(gdbval)\n \n         # Couldn't find a pretty printer (or it was disabled):\n@@ -380,13 +407,22 @@ def __call__(self, gdbval):\n \n def build_pretty_printer():\n     pp = GdbPrettyPrinters('gcc')\n-    pp.add_printer('tree', 'tree', TreePrinter)\n-    pp.add_printer('cgraph_node', 'cgraph_node *', CGraphNodePrinter)\n-    pp.add_printer('gimple', 'gimple', GimplePrinter)\n-    pp.add_printer('basic_block', 'basic_block', BasicBlockPrinter)\n-    pp.add_printer('edge', 'edge', CfgEdgePrinter)\n-    pp.add_printer('rtx_def', 'rtx_def *', RtxPrinter)\n-    pp.add_printer('opt_pass', 'opt_pass *', PassPrinter)\n+    pp.add_printer_for_types(['tree'],\n+                             'tree', TreePrinter)\n+    pp.add_printer_for_types(['cgraph_node *'],\n+                             'cgraph_node', CGraphNodePrinter)\n+    pp.add_printer_for_types(['gimple', 'gimple_statement_base *'],\n+                             'gimple',\n+                             GimplePrinter)\n+    pp.add_printer_for_types(['basic_block', 'basic_block_def *'],\n+                             'basic_block',\n+                             BasicBlockPrinter)\n+    pp.add_printer_for_types(['edge', 'edge_def *'],\n+                             'edge',\n+                             CfgEdgePrinter)\n+    pp.add_printer_for_types(['rtx_def *'], 'rtx_def', RtxPrinter)\n+    pp.add_printer_for_types(['opt_pass *'], 'opt_pass', PassPrinter)\n+\n     return pp\n \n gdb.printing.register_pretty_printer("}]}