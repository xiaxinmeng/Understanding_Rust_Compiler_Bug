{"sha": "ac1a0a388cd9529b4ba8b10d8ccd8099a2a95b23", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWMxYTBhMzg4Y2Q5NTI5YjRiYThiMTBkOGNjZDgwOTlhMmE5NWIyMw==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2020-04-20T16:20:12Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2020-04-21T12:19:13Z"}, "message": "libphobos: Fix compilation dependencies on s390x-linux-musl\n\nlibphobos/ChangeLog:\n\n\t* configure: Regenerate.\n\t* configure.ac: Call DRUNTIME_LIBRARIES_UCONTEXT.\n\t* m4/druntime/libraries.m4 (DRUNTIME_LIBRARIES_UCONTEXT): Define to\n\tsearch libraries for swapcontext.\n\t* libdruntime/gcc/sections/elf_shared.d (getTLSRange): Always use\n\t__tls_get_addr on Musl.\n\nCo-Authored-By: Mathias Lang <pro.mathias.lang@gmail.com>", "tree": {"sha": "f99abc45fa3539cbc1ff479320b4de061f1a781d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f99abc45fa3539cbc1ff479320b4de061f1a781d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ac1a0a388cd9529b4ba8b10d8ccd8099a2a95b23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac1a0a388cd9529b4ba8b10d8ccd8099a2a95b23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac1a0a388cd9529b4ba8b10d8ccd8099a2a95b23", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac1a0a388cd9529b4ba8b10d8ccd8099a2a95b23/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "187bdbd5645ff5271bee436e0c854a11b69e9570", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/187bdbd5645ff5271bee436e0c854a11b69e9570", "html_url": "https://github.com/Rust-GCC/gccrs/commit/187bdbd5645ff5271bee436e0c854a11b69e9570"}], "stats": {"total": 112, "additions": 111, "deletions": 1}, "files": [{"sha": "3b89f9b00d90deabeec25b3700d454291d55ce58", "filename": "libphobos/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac1a0a388cd9529b4ba8b10d8ccd8099a2a95b23/libphobos%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac1a0a388cd9529b4ba8b10d8ccd8099a2a95b23/libphobos%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2FChangeLog?ref=ac1a0a388cd9529b4ba8b10d8ccd8099a2a95b23", "patch": "@@ -1,3 +1,13 @@\n+2020-04-21  Mathias Lang  <pro.mathias.lang@gmail.com>\n+\t    Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* configure: Regenerate.\n+\t* configure.ac: Call DRUNTIME_LIBRARIES_UCONTEXT.\n+\t* m4/druntime/libraries.m4 (DRUNTIME_LIBRARIES_UCONTEXT): Define to\n+\tsearch libraries for swapcontext.\n+\t* libdruntime/gcc/sections/elf_shared.d (getTLSRange): Always use\n+\t__tls_get_addr on Musl.\n+\n 2020-04-20  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \t* configure: Regenerate."}, {"sha": "2658cc1728afa3a779e449221fcca487598e6616", "filename": "libphobos/configure", "status": "modified", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac1a0a388cd9529b4ba8b10d8ccd8099a2a95b23/libphobos%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac1a0a388cd9529b4ba8b10d8ccd8099a2a95b23/libphobos%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fconfigure?ref=ac1a0a388cd9529b4ba8b10d8ccd8099a2a95b23", "patch": "@@ -15047,6 +15047,79 @@ $as_echo \"$druntime_cv_lib_sockets\" >&6; }\n   LIBS=\"$LIBS $druntime_cv_lib_sockets\"\n \n \n+  # Keep this in sync with core/thread.d, set druntime_fiber_asm_external to\n+  # \"yes\" for targets that have 'version = AsmExternal'.\n+  druntime_fiber_asm_external=no\n+  case \"$target_cpu\" in\n+    aarch64* | \\\n+    arm* | \\\n+    i[34567]86|x86_64 | \\\n+    powerpc)\n+      druntime_fiber_asm_external=yes\n+      ;;\n+  esac\n+  if test \"$druntime_fiber_asm_external\" = no; then\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for library containing swapcontext\" >&5\n+$as_echo_n \"checking for library containing swapcontext... \" >&6; }\n+if ${ac_cv_search_swapcontext+:} false; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  ac_func_search_save_LIBS=$LIBS\n+cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+/* Override any GCC internal prototype to avoid an error.\n+   Use char because int might match the return type of a GCC\n+   builtin and then its argument prototype would still apply.  */\n+#ifdef __cplusplus\n+extern \"C\"\n+#endif\n+char swapcontext ();\n+int\n+main ()\n+{\n+return swapcontext ();\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+for ac_lib in '' c ucontext; do\n+  if test -z \"$ac_lib\"; then\n+    ac_res=\"none required\"\n+  else\n+    ac_res=-l$ac_lib\n+    LIBS=\"-l$ac_lib  $ac_func_search_save_LIBS\"\n+  fi\n+  if ac_fn_c_try_link \"$LINENO\"; then :\n+  ac_cv_search_swapcontext=$ac_res\n+fi\n+rm -f core conftest.err conftest.$ac_objext \\\n+    conftest$ac_exeext\n+  if ${ac_cv_search_swapcontext+:} false; then :\n+  break\n+fi\n+done\n+if ${ac_cv_search_swapcontext+:} false; then :\n+\n+else\n+  ac_cv_search_swapcontext=no\n+fi\n+rm conftest.$ac_ext\n+LIBS=$ac_func_search_save_LIBS\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_cv_search_swapcontext\" >&5\n+$as_echo \"$ac_cv_search_swapcontext\" >&6; }\n+ac_res=$ac_cv_search_swapcontext\n+if test \"$ac_res\" != no; then :\n+  test \"$ac_res\" = \"none required\" || LIBS=\"$ac_res $LIBS\"\n+\n+else\n+  as_fn_error $? \"swapcontext required but not found\" \"$LINENO\" 5\n+fi\n+\n+  fi\n+\n+\n   ac_ext=c\n ac_cpp='$CPP $CPPFLAGS'\n ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'"}, {"sha": "9de36c84be712fe7e39b4de799845516f27b895c", "filename": "libphobos/configure.ac", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac1a0a388cd9529b4ba8b10d8ccd8099a2a95b23/libphobos%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac1a0a388cd9529b4ba8b10d8ccd8099a2a95b23/libphobos%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fconfigure.ac?ref=ac1a0a388cd9529b4ba8b10d8ccd8099a2a95b23", "patch": "@@ -143,6 +143,7 @@ DRUNTIME_LIBRARIES_ATOMIC\n DRUNTIME_LIBRARIES_BACKTRACE\n DRUNTIME_LIBRARIES_DLOPEN\n DRUNTIME_LIBRARIES_NET\n+DRUNTIME_LIBRARIES_UCONTEXT\n DRUNTIME_LIBRARIES_ZLIB\n DRUNTIME_INSTALL_DIRECTORIES\n "}, {"sha": "59e2dd60a1feddfdc67a73d2023fa7fc5a504b87", "filename": "libphobos/libdruntime/gcc/sections/elf_shared.d", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac1a0a388cd9529b4ba8b10d8ccd8099a2a95b23/libphobos%2Flibdruntime%2Fgcc%2Fsections%2Felf_shared.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac1a0a388cd9529b4ba8b10d8ccd8099a2a95b23/libphobos%2Flibdruntime%2Fgcc%2Fsections%2Felf_shared.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fgcc%2Fsections%2Felf_shared.d?ref=ac1a0a388cd9529b4ba8b10d8ccd8099a2a95b23", "patch": "@@ -1084,7 +1084,9 @@ void[] getTLSRange(size_t mod, size_t sz) nothrow @nogc\n \n         // base offset\n         auto ti = tls_index(mod, 0);\n-        version (IBMZ_Any)\n+        version (CRuntime_Musl)\n+            return (__tls_get_addr(&ti)-TLS_DTV_OFFSET)[0 .. sz];\n+        else version (IBMZ_Any)\n         {\n             // IBM Z only provides __tls_get_offset instead of __tls_get_addr\n             // which returns an offset relative to the thread pointer."}, {"sha": "957bf98b442f6df5325418da041ade762d7be027", "filename": "libphobos/m4/druntime/libraries.m4", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac1a0a388cd9529b4ba8b10d8ccd8099a2a95b23/libphobos%2Fm4%2Fdruntime%2Flibraries.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac1a0a388cd9529b4ba8b10d8ccd8099a2a95b23/libphobos%2Fm4%2Fdruntime%2Flibraries.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fm4%2Fdruntime%2Flibraries.m4?ref=ac1a0a388cd9529b4ba8b10d8ccd8099a2a95b23", "patch": "@@ -212,3 +212,27 @@ AC_DEFUN([DRUNTIME_LIBRARIES_CLIB],\n   AC_SUBST(DCFG_HAVE_QSORT_R)\n   AC_LANG_POP([C])\n ])\n+\n+# DRUNTIME_LIBRARIES_UCONTEXT\n+# ------------------------------\n+# Autodetect and add ucontext library to LIBS if necessary.\n+# This is only required if fiber_switchContext does not have\n+# its own internal asm implementation.\n+AC_DEFUN([DRUNTIME_LIBRARIES_UCONTEXT],\n+[\n+  # Keep this in sync with core/thread.d, set druntime_fiber_asm_external to\n+  # \"yes\" for targets that have 'version = AsmExternal'.\n+  druntime_fiber_asm_external=no\n+  case \"$target_cpu\" in\n+    aarch64* | \\\n+    arm* | \\\n+    i[[34567]]86|x86_64 | \\\n+    powerpc)\n+      druntime_fiber_asm_external=yes\n+      ;;\n+  esac\n+  if test \"$druntime_fiber_asm_external\" = no; then\n+    AC_SEARCH_LIBS([swapcontext], [c ucontext], [],\n+      AC_MSG_ERROR([swapcontext required but not found]))\n+  fi\n+])"}]}