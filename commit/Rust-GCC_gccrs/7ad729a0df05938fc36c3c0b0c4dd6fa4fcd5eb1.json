{"sha": "7ad729a0df05938fc36c3c0b0c4dd6fa4fcd5eb1", "node_id": "C_kwDOANBUbNoAKDdhZDcyOWEwZGYwNTkzOGZjMzZjM2MwYjBjNGRkNmZhNGZjZDVlYjE", "commit": {"author": {"name": "Ju-Zhe Zhong", "email": "juzhe.zhong@rivai.ai", "date": "2023-02-05T01:47:38Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2023-02-12T02:59:13Z"}, "message": "RISC-V: Add saturating Addition && Subtraction C/C++ Support\n\ngcc/ChangeLog:\n\n\t* config/riscv/iterators.md: Add saturating Addition && Subtraction.\n\t* config/riscv/riscv-v.cc (has_vi_variant_p): Ditto.\n\t* config/riscv/riscv-vector-builtins-bases.cc (BASE): Ditto.\n\t* config/riscv/riscv-vector-builtins-bases.h: Ditto.\n\t* config/riscv/riscv-vector-builtins-functions.def (vsadd): New def.\n\t(vssub): Ditto.\n\t(vsaddu): Ditto.\n\t(vssubu): Ditto.\n\t* config/riscv/vector-iterators.md (sll.vi): Adjust for Saturating\n\tsupport.\n\t(sll.vv): Ditto.\n\t(%3,%v4): Ditto.\n\t(%3,%4): Ditto.\n\t* config/riscv/vector.md (@pred_<optab><mode>): New pattern.\n\t(@pred_<optab><mode>_scalar): New pattern.\n\t(*pred_<optab><mode>_scalar): New pattern.\n\t(*pred_<optab><mode>_extended_scalar): New pattern.", "tree": {"sha": "c522975d074a106ca2587e7676a3a285e9e88892", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c522975d074a106ca2587e7676a3a285e9e88892"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7ad729a0df05938fc36c3c0b0c4dd6fa4fcd5eb1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ad729a0df05938fc36c3c0b0c4dd6fa4fcd5eb1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ad729a0df05938fc36c3c0b0c4dd6fa4fcd5eb1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ad729a0df05938fc36c3c0b0c4dd6fa4fcd5eb1/comments", "author": {"login": "zhongjuzhe", "id": 66454988, "node_id": "MDQ6VXNlcjY2NDU0OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/66454988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhongjuzhe", "html_url": "https://github.com/zhongjuzhe", "followers_url": "https://api.github.com/users/zhongjuzhe/followers", "following_url": "https://api.github.com/users/zhongjuzhe/following{/other_user}", "gists_url": "https://api.github.com/users/zhongjuzhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhongjuzhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhongjuzhe/subscriptions", "organizations_url": "https://api.github.com/users/zhongjuzhe/orgs", "repos_url": "https://api.github.com/users/zhongjuzhe/repos", "events_url": "https://api.github.com/users/zhongjuzhe/events{/privacy}", "received_events_url": "https://api.github.com/users/zhongjuzhe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eeb50b70354aa8f198d814ae254ba29e595470a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eeb50b70354aa8f198d814ae254ba29e595470a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eeb50b70354aa8f198d814ae254ba29e595470a9"}], "stats": {"total": 340, "additions": 320, "deletions": 20}, "files": [{"sha": "7e5415cc80b53dc59fd65219960d0c9becde73c3", "filename": "gcc/config/riscv/iterators.md", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ad729a0df05938fc36c3c0b0c4dd6fa4fcd5eb1/gcc%2Fconfig%2Friscv%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ad729a0df05938fc36c3c0b0c4dd6fa4fcd5eb1/gcc%2Fconfig%2Friscv%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fiterators.md?ref=7ad729a0df05938fc36c3c0b0c4dd6fa4fcd5eb1", "patch": "@@ -203,7 +203,11 @@\n \t\t\t (umax \"umax\")\n \t\t\t (mult \"mul\")\n \t\t\t (not \"one_cmpl\")\n-\t\t\t (neg \"neg\")])\n+\t\t\t (neg \"neg\")\n+\t\t\t (ss_plus \"ssadd\")\n+\t\t\t (us_plus \"usadd\")\n+\t\t\t (ss_minus \"sssub\")\n+\t\t\t (us_minus \"ussub\")])\n \n ;; <or_optab> code attributes\n (define_code_attr or_optab [(ior \"ior\")\n@@ -228,7 +232,11 @@\n \t\t\t(umax \"maxu\")\n \t\t\t(mult \"mul\")\n \t\t\t(not \"not\")\n-\t\t\t(neg \"neg\")])\n+\t\t\t(neg \"neg\")\n+\t\t\t(ss_plus \"sadd\")\n+\t\t\t(us_plus \"saddu\")\n+\t\t\t(ss_minus \"ssub\")\n+\t\t\t(us_minus \"ssubu\")])\n \n ; atomics code attribute\n (define_code_attr atomic_optab"}, {"sha": "df89c9be308709ed8f48ceda1539e23f098d9f4b", "filename": "gcc/config/riscv/riscv-v.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ad729a0df05938fc36c3c0b0c4dd6fa4fcd5eb1/gcc%2Fconfig%2Friscv%2Friscv-v.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ad729a0df05938fc36c3c0b0c4dd6fa4fcd5eb1/gcc%2Fconfig%2Friscv%2Friscv-v.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-v.cc?ref=7ad729a0df05938fc36c3c0b0c4dd6fa4fcd5eb1", "patch": "@@ -427,8 +427,9 @@ neg_simm5_p (rtx x)\n bool\n has_vi_variant_p (rtx_code code, rtx x)\n {\n-  if (code != PLUS && code != MINUS && code != AND && code != IOR\n-      && code != XOR)\n+  if (code != PLUS && code != MINUS && code != AND && code != IOR && code != XOR\n+      && code != SS_PLUS && code != SS_MINUS && code != US_PLUS\n+      && code != US_MINUS)\n     return false;\n   return simm5_p (x);\n }"}, {"sha": "7e6ee1d7b53db8af5735d11b7e4da795000a85b8", "filename": "gcc/config/riscv/riscv-vector-builtins-bases.cc", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ad729a0df05938fc36c3c0b0c4dd6fa4fcd5eb1/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ad729a0df05938fc36c3c0b0c4dd6fa4fcd5eb1/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.cc?ref=7ad729a0df05938fc36c3c0b0c4dd6fa4fcd5eb1", "patch": "@@ -241,6 +241,10 @@ static CONSTEXPR const binop<UDIV> vdivu_obj;\n static CONSTEXPR const binop<UMOD> vremu_obj;\n static CONSTEXPR const unop<NEG> vneg_obj;\n static CONSTEXPR const unop<NOT> vnot_obj;\n+static CONSTEXPR const binop<SS_PLUS> vsadd_obj;\n+static CONSTEXPR const binop<SS_MINUS> vssub_obj;\n+static CONSTEXPR const binop<US_PLUS> vsaddu_obj;\n+static CONSTEXPR const binop<US_MINUS> vssubu_obj;\n \n /* Declare the function base NAME, pointing it to an instance\n    of class <NAME>_obj.  */\n@@ -291,5 +295,9 @@ BASE (vdivu)\n BASE (vremu)\n BASE (vneg)\n BASE (vnot)\n+BASE (vsadd)\n+BASE (vssub)\n+BASE (vsaddu)\n+BASE (vssubu)\n \n } // end namespace riscv_vector"}, {"sha": "a59fd918af8b4d07230bf6a3973dc25bebd57ecb", "filename": "gcc/config/riscv/riscv-vector-builtins-bases.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ad729a0df05938fc36c3c0b0c4dd6fa4fcd5eb1/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ad729a0df05938fc36c3c0b0c4dd6fa4fcd5eb1/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.h?ref=7ad729a0df05938fc36c3c0b0c4dd6fa4fcd5eb1", "patch": "@@ -68,6 +68,10 @@ extern const function_base *const vdivu;\n extern const function_base *const vremu;\n extern const function_base *const vneg;\n extern const function_base *const vnot;\n+extern const function_base *const vsadd;\n+extern const function_base *const vssub;\n+extern const function_base *const vsaddu;\n+extern const function_base *const vssubu;\n }\n \n } // end namespace riscv_vector"}, {"sha": "74a1864b725692cfd6f968867afe66fcd20ccfa3", "filename": "gcc/config/riscv/riscv-vector-builtins-functions.def", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ad729a0df05938fc36c3c0b0c4dd6fa4fcd5eb1/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-functions.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ad729a0df05938fc36c3c0b0c4dd6fa4fcd5eb1/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-functions.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-functions.def?ref=7ad729a0df05938fc36c3c0b0c4dd6fa4fcd5eb1", "patch": "@@ -100,5 +100,14 @@ DEF_RVV_FUNCTION (vdivu, alu, full_preds, u_vvx_ops)\n DEF_RVV_FUNCTION (vremu, alu, full_preds, u_vvx_ops)\n DEF_RVV_FUNCTION (vneg, alu, full_preds, iu_v_ops)\n DEF_RVV_FUNCTION (vnot, alu, full_preds, iu_v_ops)\n+/* 12. Vector Fixed-Point Arithmetic Instructions. */\n+DEF_RVV_FUNCTION (vsadd, alu, full_preds, i_vvv_ops)\n+DEF_RVV_FUNCTION (vssub, alu, full_preds, i_vvv_ops)\n+DEF_RVV_FUNCTION (vsaddu, alu, full_preds, u_vvv_ops)\n+DEF_RVV_FUNCTION (vssubu, alu, full_preds, u_vvv_ops)\n+DEF_RVV_FUNCTION (vsadd, alu, full_preds, i_vvx_ops)\n+DEF_RVV_FUNCTION (vssub, alu, full_preds, i_vvx_ops)\n+DEF_RVV_FUNCTION (vsaddu, alu, full_preds, u_vvx_ops)\n+DEF_RVV_FUNCTION (vssubu, alu, full_preds, u_vvx_ops)\n \n #undef DEF_RVV_FUNCTION"}, {"sha": "2460ed670c0070ad9856b4bf43e7f19e4b593ebb", "filename": "gcc/config/riscv/vector-iterators.md", "status": "modified", "additions": 40, "deletions": 12, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ad729a0df05938fc36c3c0b0c4dd6fa4fcd5eb1/gcc%2Fconfig%2Friscv%2Fvector-iterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ad729a0df05938fc36c3c0b0c4dd6fa4fcd5eb1/gcc%2Fconfig%2Friscv%2Fvector-iterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fvector-iterators.md?ref=7ad729a0df05938fc36c3c0b0c4dd6fa4fcd5eb1", "patch": "@@ -217,6 +217,10 @@\n \n (define_code_iterator any_non_commutative_binop [minus div udiv mod umod])\n \n+(define_code_iterator any_sat_int_binop [ss_plus ss_minus us_plus us_minus])\n+(define_code_iterator sat_int_plus_binop [ss_plus us_plus])\n+(define_code_iterator sat_int_minus_binop [ss_minus us_minus])\n+\n (define_code_attr binop_rhs1_predicate [\n \t\t\t(plus \"register_operand\")\n \t\t\t(minus \"vector_arith_operand\")\n@@ -234,7 +238,11 @@\n \t\t\t(div \"register_operand\")\n \t\t\t(mod \"register_operand\")\n \t\t\t(udiv \"register_operand\")\n-\t\t\t(umod \"register_operand\")])\n+\t\t\t(umod \"register_operand\")\n+\t\t\t(ss_plus \"register_operand\")\n+\t\t\t(us_plus \"register_operand\")\n+\t\t\t(ss_minus \"register_operand\")\n+\t\t\t(us_minus \"register_operand\")])\n \n (define_code_attr binop_rhs2_predicate [\n \t\t\t(plus \"vector_arith_operand\")\n@@ -253,7 +261,11 @@\n \t\t\t(div \"register_operand\")\n \t\t\t(mod \"register_operand\")\n \t\t\t(udiv \"register_operand\")\n-\t\t\t(umod \"register_operand\")])\n+\t\t\t(umod \"register_operand\")\n+\t\t\t(ss_plus \"vector_arith_operand\")\n+\t\t\t(us_plus \"vector_arith_operand\")\n+\t\t\t(ss_minus \"vector_neg_arith_operand\")\n+\t\t\t(us_minus \"register_operand\")])\n \n (define_code_attr binop_rhs1_constraint [\n \t\t\t(plus \"vr,vr,vr,vr,vr,vr\")\n@@ -291,7 +303,11 @@\n \t\t\t(div \"vr,vr,vr,vr,vr,vr\")\n \t\t\t(mod \"vr,vr,vr,vr,vr,vr\")\n \t\t\t(udiv \"vr,vr,vr,vr,vr,vr\")\n-\t\t\t(umod \"vr,vr,vr,vr,vr,vr\")])\n+\t\t\t(umod \"vr,vr,vr,vr,vr,vr\")\n+\t\t\t(ss_plus \"vr,vr,vi,vi\")\n+\t\t\t(us_plus \"vr,vr,vi,vi\")\n+\t\t\t(ss_minus \"vr,vr,vj,vj\")\n+\t\t\t(us_minus \"vr,vr,vr,vr\")])\n \n (define_code_attr int_binop_insn_type [\n \t\t\t(plus \"vialu\")\n@@ -310,11 +326,15 @@\n \t\t\t(div \"vidiv\")\n \t\t\t(mod \"vidiv\")\n \t\t\t(udiv \"vidiv\")\n-\t\t\t(umod \"vidiv\")])\n+\t\t\t(umod \"vidiv\")\n+\t\t\t(ss_plus \"vsalu\")\n+\t\t\t(us_plus \"vsalu\")\n+\t\t\t(ss_minus \"vsalu\")\n+\t\t\t(us_minus \"vsalu\")])\n \n-;; <binop_imm_rhs1_insn> expands to the insn name of binop matching constraint rhs1 is immediate.\n+;; <binop_vi_variant_insn> expands to the insn name of binop matching constraint rhs1 is immediate.\n ;; minus is negated as vadd and ss_minus is negated as vsadd, others remain <insn>.\n-(define_code_attr binop_imm_rhs1_insn [(ashift \"sll.vi\")\n+(define_code_attr binop_vi_variant_insn [(ashift \"sll.vi\")\n \t\t\t       (ashiftrt \"sra.vi\")\n \t\t\t       (lshiftrt \"srl.vi\")\n \t\t\t       (div \"div.vv\")\n@@ -330,11 +350,15 @@\n \t\t\t       (smax \"max.vv\")\n \t\t\t       (umin \"minu.vv\")\n \t\t\t       (umax \"maxu.vv\")\n-\t\t\t       (mult \"mul.vv\")])\n+\t\t\t       (mult \"mul.vv\")\n+\t\t\t       (ss_plus \"sadd.vi\")\n+\t\t\t       (us_plus \"saddu.vi\")\n+\t\t\t       (ss_minus \"sadd.vi\")\n+\t\t\t       (us_minus \"ssubu.vv\")])\n \n-;; <binop_imm_rhs2_insn> expands to the insn name of binop matching constraint rhs2 is immediate.\n+;; <binop_reverse_vi_variant_insn> expands to the insn name of binop matching constraint rhs2 is immediate.\n ;; minus is reversed as vrsub, others remain <insn>.\n-(define_code_attr binop_imm_rhs2_insn [(ashift \"sll.vv\")\n+(define_code_attr binop_reverse_vi_variant_insn [(ashift \"sll.vv\")\n \t\t\t       (ashiftrt \"sra.vv\")\n \t\t\t       (lshiftrt \"srl.vv\")\n \t\t\t       (div \"div.vv\")\n@@ -352,7 +376,7 @@\n \t\t\t       (umax \"maxu.vv\")\n \t\t\t       (mult \"mul.vv\")])\n \n-(define_code_attr binop_imm_rhs1_op [(ashift \"%3,%v4\")\n+(define_code_attr binop_vi_variant_op [(ashift \"%3,%v4\")\n \t\t\t     (ashiftrt \"%3,%v4\")\n \t\t\t     (lshiftrt \"%3,%v4\")\n \t\t\t     (div \"%3,%4\")\n@@ -368,9 +392,13 @@\n \t\t\t     (smax \"%3,%4\")\n \t\t\t     (umin \"%3,%4\")\n \t\t\t     (umax \"%3,%4\")\n-\t\t\t     (mult \"%3,%4\")])\n+\t\t\t     (mult \"%3,%4\")\n+\t\t\t     (ss_plus \"%3,%v4\")\n+\t\t\t     (us_plus \"%3,%v4\")\n+\t\t\t     (ss_minus \"%3,%V4\")\n+\t\t\t     (us_minus \"%3,%4\")])\n \n-(define_code_attr binop_imm_rhs2_op [(ashift \"%3,%4\")\n+(define_code_attr binop_reverse_vi_variant_op [(ashift \"%3,%4\")\n \t\t\t      (ashiftrt \"%3,%4\")\n \t\t\t      (lshiftrt \"%3,%4\")\n \t\t\t      (div \"%3,%4\")"}, {"sha": "44584e171057b65696027649e5cbea94a7d66536", "filename": "gcc/config/riscv/vector.md", "status": "modified", "additions": 246, "deletions": 4, "changes": 250, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ad729a0df05938fc36c3c0b0c4dd6fa4fcd5eb1/gcc%2Fconfig%2Friscv%2Fvector.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ad729a0df05938fc36c3c0b0c4dd6fa4fcd5eb1/gcc%2Fconfig%2Friscv%2Fvector.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fvector.md?ref=7ad729a0df05938fc36c3c0b0c4dd6fa4fcd5eb1", "patch": "@@ -1170,10 +1170,10 @@\n   \"@\n    v<insn>.vv\\t%0,%3,%4%p1\n    v<insn>.vv\\t%0,%3,%4%p1\n-   v<binop_imm_rhs1_insn>\\t%0,<binop_imm_rhs1_op>%p1\n-   v<binop_imm_rhs1_insn>\\t%0,<binop_imm_rhs1_op>%p1\n-   v<binop_imm_rhs2_insn>\\t%0,<binop_imm_rhs2_op>%p1\n-   v<binop_imm_rhs2_insn>\\t%0,<binop_imm_rhs2_op>%p1\"\n+   v<binop_vi_variant_insn>\\t%0,<binop_vi_variant_op>%p1\n+   v<binop_vi_variant_insn>\\t%0,<binop_vi_variant_op>%p1\n+   v<binop_reverse_vi_variant_insn>\\t%0,<binop_reverse_vi_variant_op>%p1\n+   v<binop_reverse_vi_variant_insn>\\t%0,<binop_reverse_vi_variant_op>%p1\"\n   [(set_attr \"type\" \"<int_binop_insn_type>\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n@@ -1532,6 +1532,248 @@\n   [(set_attr \"type\" \"vialu\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n+;; Saturating Add and Subtract\n+(define_insn \"@pred_<optab><mode>\"\n+  [(set (match_operand:VI 0 \"register_operand\"                   \"=vd, vr, vd, vr\")\n+\t(if_then_else:VI\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\"         \" vm,Wc1, vm,Wc1\")\n+\t     (match_operand 5 \"vector_length_operand\"            \" rK, rK, rK, rK\")\n+\t     (match_operand 6 \"const_int_operand\"                \"  i,  i,  i,  i\")\n+\t     (match_operand 7 \"const_int_operand\"                \"  i,  i,  i,  i\")\n+\t     (match_operand 8 \"const_int_operand\"                \"  i,  i,  i,  i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (any_sat_int_binop:VI\n+\t    (match_operand:VI 3 \"<binop_rhs1_predicate>\"         \" vr, vr, vr, vr\")\n+\t    (match_operand:VI 4 \"<binop_rhs2_predicate>\" \"<binop_rhs2_constraint>\"))\n+\t  (match_operand:VI 2 \"vector_merge_operand\"             \"0vu,0vu,0vu,0vu\")))]\n+  \"TARGET_VECTOR\"\n+  \"@\n+   v<insn>.vv\\t%0,%3,%4%p1\n+   v<insn>.vv\\t%0,%3,%4%p1\n+   v<binop_vi_variant_insn>\\t%0,<binop_vi_variant_op>%p1\n+   v<binop_vi_variant_insn>\\t%0,<binop_vi_variant_op>%p1\"\n+  [(set_attr \"type\" \"<int_binop_insn_type>\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+;; Handle GET_MODE_INNER (mode) = QImode, HImode, SImode.\n+(define_insn \"@pred_<optab><mode>_scalar\"\n+  [(set (match_operand:VI_QHS 0 \"register_operand\"       \"=vd, vr\")\n+\t(if_then_else:VI_QHS\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\" \" vm,Wc1\")\n+\t     (match_operand 5 \"vector_length_operand\"    \" rK, rK\")\n+\t     (match_operand 6 \"const_int_operand\"        \"  i,  i\")\n+\t     (match_operand 7 \"const_int_operand\"        \"  i,  i\")\n+\t     (match_operand 8 \"const_int_operand\"        \"  i,  i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (sat_int_plus_binop:VI_QHS\n+\t    (vec_duplicate:VI_QHS\n+\t      (match_operand:<VEL> 4 \"register_operand\"  \"  r,  r\"))\n+\t    (match_operand:VI_QHS 3 \"register_operand\"   \" vr, vr\"))\n+\t  (match_operand:VI_QHS 2 \"vector_merge_operand\" \"0vu,0vu\")))]\n+  \"TARGET_VECTOR\"\n+  \"v<insn>.vx\\t%0,%3,%4%p1\"\n+  [(set_attr \"type\" \"<int_binop_insn_type>\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"@pred_<optab><mode>_scalar\"\n+  [(set (match_operand:VI_QHS 0 \"register_operand\"       \"=vd, vr\")\n+\t(if_then_else:VI_QHS\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\" \" vm,Wc1\")\n+\t     (match_operand 5 \"vector_length_operand\"    \" rK, rK\")\n+\t     (match_operand 6 \"const_int_operand\"        \"  i,  i\")\n+\t     (match_operand 7 \"const_int_operand\"        \"  i,  i\")\n+\t     (match_operand 8 \"const_int_operand\"        \"  i,  i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (sat_int_minus_binop:VI_QHS\n+\t    (match_operand:VI_QHS 3 \"register_operand\"   \" vr, vr\")\n+\t    (vec_duplicate:VI_QHS\n+\t      (match_operand:<VEL> 4 \"register_operand\"  \"  r,  r\")))\n+\t  (match_operand:VI_QHS 2 \"vector_merge_operand\" \"0vu,0vu\")))]\n+  \"TARGET_VECTOR\"\n+  \"v<insn>.vx\\t%0,%3,%4%p1\"\n+  [(set_attr \"type\" \"<int_binop_insn_type>\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_expand \"@pred_<optab><mode>_scalar\"\n+  [(set (match_operand:VI_D 0 \"register_operand\")\n+\t(if_then_else:VI_D\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\")\n+\t     (match_operand 5 \"vector_length_operand\")\n+\t     (match_operand 6 \"const_int_operand\")\n+\t     (match_operand 7 \"const_int_operand\")\n+\t     (match_operand 8 \"const_int_operand\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (sat_int_plus_binop:VI_D\n+\t    (vec_duplicate:VI_D\n+\t      (match_operand:<VEL> 4 \"reg_or_int_operand\"))\n+\t    (match_operand:VI_D 3 \"register_operand\"))\n+\t  (match_operand:VI_D 2 \"vector_merge_operand\")))]\n+  \"TARGET_VECTOR\"\n+  {\n+    if (riscv_vector::has_vi_variant_p (<CODE>, operands[4]))\n+      operands[4] = force_reg (<VEL>mode, operands[4]);\n+    else if (!TARGET_64BIT)\n+      {\n+\trtx v = gen_reg_rtx (<MODE>mode);\n+\n+\tif (riscv_vector::simm32_p (operands[4]))\n+\t  operands[4] = gen_rtx_SIGN_EXTEND (<VEL>mode,\n+\t\tforce_reg (Pmode, operands[4]));\n+\telse\n+\t  {\n+\t    if (CONST_INT_P (operands[4]))\n+\t      operands[4] = force_reg (<VEL>mode, operands[4]);\n+\n+\t    riscv_vector::emit_nonvlmax_op (code_for_pred_broadcast (<MODE>mode),\n+\t\t\tv, operands[4], operands[5], <VM>mode);\n+\t    emit_insn (gen_pred_<optab><mode> (operands[0], operands[1],\n+\t\t\toperands[2], operands[3], v, operands[5],\n+\t\t\toperands[6], operands[7], operands[8]));\n+\t    DONE;\n+\t  }\n+      }\n+    else\n+      operands[4] = force_reg (<VEL>mode, operands[4]);\n+  })\n+\n+(define_insn \"*pred_<optab><mode>_scalar\"\n+  [(set (match_operand:VI_D 0 \"register_operand\"         \"=vd, vr\")\n+\t(if_then_else:VI_D\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\" \" vm,Wc1\")\n+\t     (match_operand 5 \"vector_length_operand\"    \" rK, rK\")\n+\t     (match_operand 6 \"const_int_operand\"        \"  i,  i\")\n+\t     (match_operand 7 \"const_int_operand\"        \"  i,  i\")\n+\t     (match_operand 8 \"const_int_operand\"        \"  i,  i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (sat_int_plus_binop:VI_D\n+\t    (vec_duplicate:VI_D\n+\t      (match_operand:<VEL> 4 \"register_operand\"  \"  r,  r\"))\n+\t    (match_operand:VI_D 3 \"register_operand\"     \" vr, vr\"))\n+\t  (match_operand:VI_D 2 \"vector_merge_operand\"   \"0vu,0vu\")))]\n+  \"TARGET_VECTOR\"\n+  \"v<insn>.vx\\t%0,%3,%4%p1\"\n+  [(set_attr \"type\" \"<int_binop_insn_type>\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"*pred_<optab><mode>_extended_scalar\"\n+  [(set (match_operand:VI_D 0 \"register_operand\"             \"=vd, vr\")\n+\t(if_then_else:VI_D\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\"     \" vm,Wc1\")\n+\t     (match_operand 5 \"vector_length_operand\"        \" rK, rK\")\n+\t     (match_operand 6 \"const_int_operand\"            \"  i,  i\")\n+\t     (match_operand 7 \"const_int_operand\"            \"  i,  i\")\n+\t     (match_operand 8 \"const_int_operand\"            \"  i,  i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (sat_int_plus_binop:VI_D\n+\t    (vec_duplicate:VI_D\n+\t      (sign_extend:<VEL>\n+\t        (match_operand:<VSUBEL> 4 \"register_operand\" \"  r,  r\")))\n+\t    (match_operand:VI_D 3 \"register_operand\"         \" vr, vr\"))\n+\t  (match_operand:VI_D 2 \"vector_merge_operand\"       \"0vu,0vu\")))]\n+  \"TARGET_VECTOR\"\n+  \"v<insn>.vx\\t%0,%3,%4%p1\"\n+  [(set_attr \"type\" \"<int_binop_insn_type>\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_expand \"@pred_<optab><mode>_scalar\"\n+  [(set (match_operand:VI_D 0 \"register_operand\")\n+\t(if_then_else:VI_D\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\")\n+\t     (match_operand 5 \"vector_length_operand\")\n+\t     (match_operand 6 \"const_int_operand\")\n+\t     (match_operand 7 \"const_int_operand\")\n+\t     (match_operand 8 \"const_int_operand\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (sat_int_minus_binop:VI_D\n+\t    (match_operand:VI_D 3 \"register_operand\")\n+\t    (vec_duplicate:VI_D\n+\t      (match_operand:<VEL> 4 \"reg_or_int_operand\")))\n+\t  (match_operand:VI_D 2 \"vector_merge_operand\")))]\n+  \"TARGET_VECTOR\"\n+  {\n+    if (riscv_vector::has_vi_variant_p (<CODE>, operands[4]))\n+      operands[4] = force_reg (<VEL>mode, operands[4]);\n+    else if (!TARGET_64BIT)\n+      {\n+\trtx v = gen_reg_rtx (<MODE>mode);\n+\n+\tif (riscv_vector::simm32_p (operands[4]))\n+\t  operands[4] = gen_rtx_SIGN_EXTEND (<VEL>mode,\n+\t\tforce_reg (Pmode, operands[4]));\n+\telse\n+\t  {\n+\t    if (CONST_INT_P (operands[4]))\n+\t      operands[4] = force_reg (<VEL>mode, operands[4]);\n+\n+\t    riscv_vector::emit_nonvlmax_op (code_for_pred_broadcast (<MODE>mode),\n+\t\t\tv, operands[4], operands[5], <VM>mode);\n+\t    emit_insn (gen_pred_<optab><mode> (operands[0], operands[1],\n+\t\t\toperands[2], operands[3], v, operands[5],\n+\t\t\toperands[6], operands[7], operands[8]));\n+\t    DONE;\n+\t  }\n+      }\n+    else\n+      operands[4] = force_reg (<VEL>mode, operands[4]);\n+  })\n+\n+(define_insn \"*pred_<optab><mode>_scalar\"\n+  [(set (match_operand:VI_D 0 \"register_operand\"         \"=vd, vr\")\n+\t(if_then_else:VI_D\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\" \" vm,Wc1\")\n+\t     (match_operand 5 \"vector_length_operand\"    \" rK, rK\")\n+\t     (match_operand 6 \"const_int_operand\"        \"  i,  i\")\n+\t     (match_operand 7 \"const_int_operand\"        \"  i,  i\")\n+\t     (match_operand 8 \"const_int_operand\"        \"  i,  i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (sat_int_minus_binop:VI_D\n+\t    (match_operand:VI_D 3 \"register_operand\"     \" vr, vr\")\n+\t    (vec_duplicate:VI_D\n+\t      (match_operand:<VEL> 4 \"register_operand\"  \"  r,  r\")))\n+\t  (match_operand:VI_D 2 \"vector_merge_operand\"   \"0vu,0vu\")))]\n+  \"TARGET_VECTOR\"\n+  \"v<insn>.vx\\t%0,%3,%4%p1\"\n+  [(set_attr \"type\" \"<int_binop_insn_type>\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"*pred_<optab><mode>_extended_scalar\"\n+  [(set (match_operand:VI_D 0 \"register_operand\"             \"=vd, vr\")\n+\t(if_then_else:VI_D\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\"     \" vm,Wc1\")\n+\t     (match_operand 5 \"vector_length_operand\"        \" rK, rK\")\n+\t     (match_operand 6 \"const_int_operand\"            \"  i,  i\")\n+\t     (match_operand 7 \"const_int_operand\"            \"  i,  i\")\n+\t     (match_operand 8 \"const_int_operand\"            \"  i,  i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (sat_int_minus_binop:VI_D\n+\t    (match_operand:VI_D 3 \"register_operand\"         \" vr, vr\")\n+\t    (vec_duplicate:VI_D\n+\t      (sign_extend:<VEL>\n+\t        (match_operand:<VSUBEL> 4 \"register_operand\" \"  r,  r\"))))\n+\t  (match_operand:VI_D 2 \"vector_merge_operand\"       \"0vu,0vu\")))]\n+  \"TARGET_VECTOR\"\n+  \"v<insn>.vx\\t%0,%3,%4%p1\"\n+  [(set_attr \"type\" \"<int_binop_insn_type>\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n ;; -------------------------------------------------------------------------------\n ;; ---- Predicated integer unary operations\n ;; -------------------------------------------------------------------------------"}]}