{"sha": "2c0b35cb894747518533852e3a60cde8a8e6250b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmMwYjM1Y2I4OTQ3NDc1MTg1MzM4NTJlM2E2MGNkZThhOGU2MjUwYg==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@wolery.cumb.org", "date": "2000-05-17T18:07:16Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2000-05-17T18:07:16Z"}, "message": "cpplib.c: New feature, #pragma system_header.\n\n\t* cpplib.c: New feature, #pragma system_header.\n\t* cpp.texi: Document special treatment of system headers, and\n\tthe various mechanisms to get a header that special treatment.\n\nFrom-SVN: r33962", "tree": {"sha": "9be6e344dab33858e4721bbe595b287ff04e34ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9be6e344dab33858e4721bbe595b287ff04e34ee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2c0b35cb894747518533852e3a60cde8a8e6250b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c0b35cb894747518533852e3a60cde8a8e6250b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c0b35cb894747518533852e3a60cde8a8e6250b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c0b35cb894747518533852e3a60cde8a8e6250b/comments", "author": null, "committer": null, "parents": [{"sha": "3f69bd930cb156f6b33e8e9d2126c1f956849370", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f69bd930cb156f6b33e8e9d2126c1f956849370", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f69bd930cb156f6b33e8e9d2126c1f956849370"}], "stats": {"total": 82, "additions": 79, "deletions": 3}, "files": [{"sha": "8d1c0acdf5245232b94be2daa74bee8d49555b7c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c0b35cb894747518533852e3a60cde8a8e6250b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c0b35cb894747518533852e3a60cde8a8e6250b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2c0b35cb894747518533852e3a60cde8a8e6250b", "patch": "@@ -1,3 +1,9 @@\n+2000-05-17  Zack Weinberg  <zack@wolery.cumb.org>\n+\n+\t* cpplib.c: New feature, #pragma system_header.\n+\t* cpp.texi: Document special treatment of system headers, and\n+\tthe various mechanisms to get a header that special treatment.\n+\n 2000-05-17  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* system.h (offsetof): Define at the very end, to ensure we prefer"}, {"sha": "ed126f8db09c17bb997468c8bb93601bf453f3a6", "filename": "gcc/cpp.texi", "status": "modified", "additions": 51, "deletions": 3, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c0b35cb894747518533852e3a60cde8a8e6250b/gcc%2Fcpp.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c0b35cb894747518533852e3a60cde8a8e6250b/gcc%2Fcpp.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpp.texi?ref=2c0b35cb894747518533852e3a60cde8a8e6250b", "patch": "@@ -302,6 +302,7 @@ the use of a header file in your program with the C preprocessing directive\n * Include Operation::   What @samp{#include} does.\n * Once-Only::\t\tPreventing multiple inclusion of one header file.\n * Inheritance::         Including one header file in another header file.\n+* System Headers::      Special treatment for some header files.\n @end menu\n \n @node Header Uses, Include Syntax, Header Files, Header Files\n@@ -311,7 +312,7 @@ Header files serve two kinds of purposes.\n \n @itemize @bullet\n @item\n-@findex system header files\n+@cindex system header files\n System header files declare the interfaces to parts of the operating\n system.  You include them in your program to supply the definitions and\n declarations you need to invoke system calls and libraries.\n@@ -518,7 +519,7 @@ once.  It is much better for the header file's implementor to write the\n file so that users don't need to know this.  Using @samp{#ifndef}\n accomplishes this goal.\n \n-@node Inheritance,, Once-Only, Header Files\n+@node Inheritance, System Headers, Once-Only, Header Files\n @subsection Inheritance and Header Files\n @cindex inheritance\n @cindex overriding a header file\n@@ -573,6 +574,53 @@ both directories contain @file{sys/signal.h}.  Ordinary\n <sys/signal.h>}, it starts searching after that directory, and finds the\n file in @file{/usr/include}.\n \n+@samp{#include_next} is a GCC extension and should not be used in\n+programs intended to be portable to other compilers.\n+\n+@node System Headers,, Inheritance, Header Files\n+@subsection System Headers\n+@cindex system header files\n+\n+The header files declaring interfaces to the operating system and\n+runtime libraries often cannot be written in strictly conforming C.\n+Therefore, GNU C gives code found in @dfn{system headers} special\n+treatment.  Certain categories of warnings are suppressed, notably those\n+enabled by @samp{-pedantic}.  For example, a hypothetical definition of\n+@code{printf} as a variable argument macro:\n+\n+@smallexample\n+#define printf(format, args...) fprintf(stdout, format , ##args)\n+@end smallexample\n+\n+@noindent\n+would cause a warning with -pedantic if it appeared in your own code,\n+but not if it appeared in @file{stdio.h}.\n+\n+Normally, only the headers found in specific directories are considered\n+system headers.  The set of these directories is determined when GCC is\n+compiled.  There are, however, two ways to add to the set.\n+\n+@findex -isystem\n+The @samp{-isystem} command line option adds its argument to the list of\n+directories to search for headers, just like @samp{-I}.  In addition,\n+any headers found in that directory will be considered system headers.\n+Note that unlike @samp{-I}, you must put a space between @samp{-isystem}\n+and its argument.\n+\n+All directories named by @samp{-isystem} are searched @strong{after} all\n+directories named by @samp{-I}, no matter what their order was on the\n+command line.  If the same directory is named by both @samp{-I} and\n+@samp{-isystem}, @samp{-I} wins; it is as if the @samp{-isystem} option\n+had never been specified at all.\n+\n+@findex #pragma system_header\n+There is also a directive, @samp{#pragma system_header}, which tells GCC\n+to consider the rest of the current include file a system header, no\n+matter where it was found.  Code that comes before the @samp{#pragma} in\n+the file will not be affected.\n+\n+@samp{#pragma system_header} has no effect in the primary source file.\n+\n @node Macros, Conditionals, Header Files, Top\n @section Macros\n \n@@ -3040,7 +3088,7 @@ was specified previously with @samp{-iprefix}.\n @findex -isystem\n Add a directory to the beginning of the second include path, marking it\n as a system directory, so that it gets the same special treatment as\n-is applied to the standard system directories.\n+is applied to the standard system directories.  @xref{System Headers}.\n \n @item -x c\n @itemx -x c++"}, {"sha": "e249555057a2534f1d7532377a1db9ecfb7ed6db", "filename": "gcc/cpplib.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c0b35cb894747518533852e3a60cde8a8e6250b/gcc%2Fcpplib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c0b35cb894747518533852e3a60cde8a8e6250b/gcc%2Fcpplib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.c?ref=2c0b35cb894747518533852e3a60cde8a8e6250b", "patch": "@@ -811,6 +811,7 @@ do_ident (pfile)\n static int do_pragma_once\t\tPARAMS ((cpp_reader *));\n static int do_pragma_implementation\tPARAMS ((cpp_reader *));\n static int do_pragma_poison\t\tPARAMS ((cpp_reader *));\n+static int do_pragma_system_header\tPARAMS ((cpp_reader *));\n static int do_pragma_default\t\tPARAMS ((cpp_reader *));\n \n static int\n@@ -846,6 +847,8 @@ do_pragma (pfile)\n     pop = do_pragma_implementation (pfile);\n   else if (tokis (\"poison\"))\n     pop = do_pragma_poison (pfile);\n+  else if (tokis (\"system_header\"))\n+    pop = do_pragma_system_header (pfile);\n   else\n     pop = do_pragma_default (pfile);\n #undef tokis\n@@ -979,6 +982,25 @@ do_pragma_poison (pfile)\n     }\n   return !writeit;\n }\n+\n+/* Mark the current header as a system header.  This will suppress\n+   some categories of warnings (notably those from -pedantic).  It is\n+   intended for use in system libraries that cannot be implemented in\n+   conforming C, but cannot be certain that their headers appear in a\n+   system include directory.  To prevent abuse, it is rejected in the\n+   primary source file.  */\n+static int\n+do_pragma_system_header (pfile)\n+     cpp_reader *pfile;\n+{\n+  cpp_buffer *ip = cpp_file_buffer (pfile);\n+  if (CPP_PREV_BUFFER (ip) == NULL)\n+    cpp_warning (pfile, \"#pragma system_header outside include file\");\n+  else\n+    ip->system_header_p = 1;\n+\n+  return 1;\n+}\n  \n /* Just ignore #sccs, on systems where we define it at all.  */\n #ifdef SCCS_DIRECTIVE"}]}