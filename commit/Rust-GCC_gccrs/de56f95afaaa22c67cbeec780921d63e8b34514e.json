{"sha": "de56f95afaaa22c67cbeec780921d63e8b34514e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGU1NmY5NWFmYWFhMjJjNjdjYmVlYzc4MDkyMWQ2M2U4YjM0NTE0ZQ==", "commit": {"author": {"name": "Xionghu Luo", "email": "luoxhu@linux.ibm.com", "date": "2021-05-19T02:34:18Z"}, "committer": {"name": "Xionghu Luo", "email": "luoxhu@linux.ibm.com", "date": "2021-05-19T02:34:18Z"}, "message": "Run pass_sink_code once more before store_merging\n\nGimple sink code pass runs quite early, there may be some new\noppertunities exposed by later gimple optmization passes, this patch\nruns the sink code pass once more before store_merging.  For detailed\ndiscussion, please refer to:\nhttps://gcc.gnu.org/pipermail/gcc-patches/2020-December/562352.html\n\nTested the SPEC2017 performance on P8LE, 544.nab_r is improved\nby 2.43%, but no big changes to other cases, GEOMEAN is improved quite\nsmall with 0.25%.\n\ngcc/ChangeLog:\n\n2021-05-18  Xionghu Luo  <luoxhu@linux.ibm.com>\n\n\t* passes.def: Add sink_code pass before store_merging.\n\t* tree-ssa-sink.c (pass_sink_code:clone): New.\n\ngcc/testsuite/ChangeLog:\n\n2021-05-18  Xionghu Luo  <luoxhu@linux.ibm.com>\n\n\t* gcc.dg/tree-ssa/ssa-sink-1.c: Adjust.\n\t* gcc.dg/tree-ssa/ssa-sink-2.c: Ditto.\n\t* gcc.dg/tree-ssa/ssa-sink-3.c: Ditto.\n\t* gcc.dg/tree-ssa/ssa-sink-4.c: Ditto.\n\t* gcc.dg/tree-ssa/ssa-sink-5.c: Ditto.\n\t* gcc.dg/tree-ssa/ssa-sink-6.c: Ditto.\n\t* gcc.dg/tree-ssa/ssa-sink-7.c: Ditto.\n\t* gcc.dg/tree-ssa/ssa-sink-8.c: Ditto.\n\t* gcc.dg/tree-ssa/ssa-sink-9.c: Ditto.\n\t* gcc.dg/tree-ssa/ssa-sink-10.c: Ditto.\n\t* gcc.dg/tree-ssa/ssa-sink-13.c: Ditto.\n\t* gcc.dg/tree-ssa/ssa-sink-14.c: Ditto.\n\t* gcc.dg/tree-ssa/ssa-sink-16.c: Ditto.\n\t* gcc.dg/tree-ssa/ssa-sink-17.c: Ditto.\n\t* gcc.dg/tree-ssa/ssa-sink-18.c: New.", "tree": {"sha": "c1f3457e45da38b04c2bd5d60e100e94fd974141", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c1f3457e45da38b04c2bd5d60e100e94fd974141"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/de56f95afaaa22c67cbeec780921d63e8b34514e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de56f95afaaa22c67cbeec780921d63e8b34514e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de56f95afaaa22c67cbeec780921d63e8b34514e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de56f95afaaa22c67cbeec780921d63e8b34514e/comments", "author": {"login": "xionghul", "id": 4607154, "node_id": "MDQ6VXNlcjQ2MDcxNTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4607154?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xionghul", "html_url": "https://github.com/xionghul", "followers_url": "https://api.github.com/users/xionghul/followers", "following_url": "https://api.github.com/users/xionghul/following{/other_user}", "gists_url": "https://api.github.com/users/xionghul/gists{/gist_id}", "starred_url": "https://api.github.com/users/xionghul/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xionghul/subscriptions", "organizations_url": "https://api.github.com/users/xionghul/orgs", "repos_url": "https://api.github.com/users/xionghul/repos", "events_url": "https://api.github.com/users/xionghul/events{/privacy}", "received_events_url": "https://api.github.com/users/xionghul/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xionghul", "id": 4607154, "node_id": "MDQ6VXNlcjQ2MDcxNTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4607154?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xionghul", "html_url": "https://github.com/xionghul", "followers_url": "https://api.github.com/users/xionghul/followers", "following_url": "https://api.github.com/users/xionghul/following{/other_user}", "gists_url": "https://api.github.com/users/xionghul/gists{/gist_id}", "starred_url": "https://api.github.com/users/xionghul/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xionghul/subscriptions", "organizations_url": "https://api.github.com/users/xionghul/orgs", "repos_url": "https://api.github.com/users/xionghul/repos", "events_url": "https://api.github.com/users/xionghul/events{/privacy}", "received_events_url": "https://api.github.com/users/xionghul/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "39ed6a88c74db5412652f0167d03f71eca4f02fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39ed6a88c74db5412652f0167d03f71eca4f02fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39ed6a88c74db5412652f0167d03f71eca4f02fc"}], "stats": {"total": 259, "additions": 229, "deletions": 30}, "files": [{"sha": "945d2bc797c00249c2f5fdcc5d4ac42bdd4648c4", "filename": "gcc/passes.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de56f95afaaa22c67cbeec780921d63e8b34514e/gcc%2Fpasses.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de56f95afaaa22c67cbeec780921d63e8b34514e/gcc%2Fpasses.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.def?ref=de56f95afaaa22c67cbeec780921d63e8b34514e", "patch": "@@ -348,6 +348,7 @@ along with GCC; see the file COPYING3.  If not see\n       NEXT_PASS (pass_phiopt, false /* early_p */);\n       NEXT_PASS (pass_fold_builtins);\n       NEXT_PASS (pass_optimize_widening_mul);\n+      NEXT_PASS (pass_sink_code);\n       NEXT_PASS (pass_store_merging);\n       NEXT_PASS (pass_tail_calls);\n       /* If DCE is not run before checking for uninitialized uses,"}, {"sha": "57b501681f397bbdbf4e31d26c81ce13ddb2d56f", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-sink-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de56f95afaaa22c67cbeec780921d63e8b34514e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-sink-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de56f95afaaa22c67cbeec780921d63e8b34514e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-sink-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-sink-1.c?ref=de56f95afaaa22c67cbeec780921d63e8b34514e", "patch": "@@ -7,4 +7,4 @@ foo (int a, int b, int c)\n   return c ? x : a;\n }\n /* We should sink the x = a * b calculation into the branch that returns x. */\n-/* { dg-final { scan-tree-dump-times \"Sunk statements: 1\" 1 \"sink\" } } */\n+/* { dg-final { scan-tree-dump-times \"Sunk statements: 1\" 1 \"sink1\" } } */"}, {"sha": "535cb3208f502cfcc73c07ad1f40794d6492e6c9", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-sink-10.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de56f95afaaa22c67cbeec780921d63e8b34514e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-sink-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de56f95afaaa22c67cbeec780921d63e8b34514e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-sink-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-sink-10.c?ref=de56f95afaaa22c67cbeec780921d63e8b34514e", "patch": "@@ -16,4 +16,4 @@ void foo (void)\n     }\n }\n \n-/* { dg-final { scan-tree-dump-times \"Sinking # VUSE\" 4 \"sink\" } } */\n+/* { dg-final { scan-tree-dump-times \"Sinking # VUSE\" 4 \"sink1\" } } */"}, {"sha": "584fd91f43a8155818c848034f3ac014cf1e9616", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-sink-13.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de56f95afaaa22c67cbeec780921d63e8b34514e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-sink-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de56f95afaaa22c67cbeec780921d63e8b34514e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-sink-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-sink-13.c?ref=de56f95afaaa22c67cbeec780921d63e8b34514e", "patch": "@@ -21,5 +21,5 @@ void test ()\n \n /* We should sink/merge all stores and end up with a single BB.  */\n \n-/* { dg-final { scan-tree-dump-times \"MEM\\[^\\n\\r\\]* = 0;\" 3 \"sink\" } } */\n-/* { dg-final { scan-tree-dump-times \"<bb \" 1 \"sink\" } } */\n+/* { dg-final { scan-tree-dump-times \"MEM\\[^\\n\\r\\]* = 0;\" 3 \"sink1\" } } */\n+/* { dg-final { scan-tree-dump-times \"<bb \" 1 \"sink1\" } } */"}, {"sha": "f5418b06deb1b10dd359dd6223e43defa9571e63", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-sink-14.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de56f95afaaa22c67cbeec780921d63e8b34514e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-sink-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de56f95afaaa22c67cbeec780921d63e8b34514e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-sink-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-sink-14.c?ref=de56f95afaaa22c67cbeec780921d63e8b34514e", "patch": "@@ -13,5 +13,5 @@ void foo (int b)\n /* We should have sunk the store and inserted a PHI to merge the\n    stored values.  */\n \n-/* { dg-final { scan-tree-dump-times \" = PHI\" 1 \"sink\" } } */\n-/* { dg-final { scan-tree-dump-times \"x = \" 1 \"sink\" } } */\n+/* { dg-final { scan-tree-dump-times \" = PHI\" 1 \"sink1\" } } */\n+/* { dg-final { scan-tree-dump-times \"x = \" 1 \"sink1\" } } */"}, {"sha": "012b165fbab71fdabdf9b7c51604e7728f7739d6", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-sink-16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de56f95afaaa22c67cbeec780921d63e8b34514e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-sink-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de56f95afaaa22c67cbeec780921d63e8b34514e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-sink-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-sink-16.c?ref=de56f95afaaa22c67cbeec780921d63e8b34514e", "patch": "@@ -10,5 +10,5 @@ int f(int n)\n   return j;\n }\n \n-/* { dg-final { scan-tree-dump \"Sinking j_. = __builtin_ffs\" \"sink\" } } */\n+/* { dg-final { scan-tree-dump \"Sinking j_. = __builtin_ffs\" \"sink1\" } } */\n /* { dg-final { scan-tree-dump \"return 2;\" \"optimized\" } } */"}, {"sha": "d0aeeb312cc0a1927e47270cb730fdbfaa9b8349", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-sink-17.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de56f95afaaa22c67cbeec780921d63e8b34514e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-sink-17.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de56f95afaaa22c67cbeec780921d63e8b34514e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-sink-17.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-sink-17.c?ref=de56f95afaaa22c67cbeec780921d63e8b34514e", "patch": "@@ -12,4 +12,4 @@ int my_f(int a, int b)\n }\n \n /* We should sink the call to pure_f to the if block.  */\n-/* { dg-final { scan-tree-dump \"Sinking # VUSE\" \"sink\" } } */\n+/* { dg-final { scan-tree-dump \"Sinking # VUSE\" \"sink1\" } } */"}, {"sha": "421c78eba50f87787ac970201e557d9e5487b725", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-sink-18.c", "status": "added", "additions": 212, "deletions": 0, "changes": 212, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de56f95afaaa22c67cbeec780921d63e8b34514e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-sink-18.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de56f95afaaa22c67cbeec780921d63e8b34514e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-sink-18.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-sink-18.c?ref=de56f95afaaa22c67cbeec780921d63e8b34514e", "patch": "@@ -0,0 +1,212 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-sink-stats\" } */\n+\n+#include <stdint.h>\n+\n+#define HLOG 16\n+#define        MAX_LIT        (1 <<  5)\n+typedef const uint8_t *LZF_HSLOT;\n+typedef LZF_HSLOT LZF_STATE[1 << (HLOG)];\n+\n+int\n+compute_on_bytes (uint8_t *in_data, int in_len, uint8_t *out_data, int out_len)\n+{\n+  LZF_STATE htab;\n+\n+  uint8_t *ip = in_data;\n+  uint8_t *op = out_data;\n+  uint8_t *in_end = ip + in_len;\n+  uint8_t *out_end = op + out_len;\n+  uint8_t *ref;\n+\n+  unsigned long off;\n+  unsigned int hval;\n+  int lit;\n+\n+  if (!in_len || !out_len)\n+    return 0;\n+\n+  lit = 0;\n+  op++;\n+  hval = (((ip[0]) << 8) | ip[1]);\n+\n+  while (ip < in_end - 2)\n+    {\n+      uint8_t *hslot;\n+\n+      hval = (((hval) << 8) | ip[2]);\n+      hslot = (uint8_t*)(htab + (((hval >> (3 * 8 - 16)) - hval * 5) & ((1 << (16)) - 1)));\n+\n+      ref = *hslot + in_data;\n+      *hslot = ip - in_data;\n+\n+      if (1 && (off = ip - ref - 1) < (1 << 13) && ref > in_data\n+\t  && ref[2] == ip[2]\n+\t  && ((ref[1] << 8) | ref[0]) == ((ip[1] << 8) | ip[0]))\n+\t{\n+\t  unsigned int len = 2;\n+\t  unsigned int maxlen = in_end - ip - len;\n+\t  maxlen\n+\t    = maxlen > ((1 << 8) + (1 << 3)) ? ((1 << 8) + (1 << 3)) : maxlen;\n+\n+\t  if ((op + 3 + 1 >= out_end) != 0)\n+\t    if (op - !lit + 3 + 1 >= out_end)\n+\t      return 0;\n+\n+\t  op[-lit - 1] = lit - 1;\n+\t  op -= !lit;\n+\n+\t  for (;;)\n+\t    {\n+\t      if (maxlen > 16)\n+\t\t{\n+\t\t  len++;\n+\t\t  if (ref[len] != ip[len])\n+\t\t    break;\n+\t\t  len++;\n+\t\t  if (ref[len] != ip[len])\n+\t\t    break;\n+\t\t  len++;\n+\t\t  if (ref[len] != ip[len])\n+\t\t    break;\n+\t\t  len++;\n+\t\t  if (ref[len] != ip[len])\n+\t\t    break;\n+\n+\t\t  len++;\n+\t\t  if (ref[len] != ip[len])\n+\t\t    break;\n+\t\t  len++;\n+\t\t  if (ref[len] != ip[len])\n+\t\t    break;\n+\t\t  len++;\n+\t\t  if (ref[len] != ip[len])\n+\t\t    break;\n+\t\t  len++;\n+\t\t  if (ref[len] != ip[len])\n+\t\t    break;\n+\n+\t\t  len++;\n+\t\t  if (ref[len] != ip[len])\n+\t\t    break;\n+\t\t  len++;\n+\t\t  if (ref[len] != ip[len])\n+\t\t    break;\n+\t\t  len++;\n+\t\t  if (ref[len] != ip[len])\n+\t\t    break;\n+\t\t  len++;\n+\t\t  if (ref[len] != ip[len])\n+\t\t    break;\n+\n+\t\t  len++;\n+\t\t  if (ref[len] != ip[len])\n+\t\t    break;\n+\t\t  len++;\n+\t\t  if (ref[len] != ip[len])\n+\t\t    break;\n+\t\t  len++;\n+\t\t  if (ref[len] != ip[len])\n+\t\t    break;\n+\t\t  len++;\n+\t\t  if (ref[len] != ip[len])\n+\t\t    break;\n+\t\t}\n+\n+\t      do\n+\t\t{\n+\t\t  len++;\n+\t\t}\n+\t      while (len < maxlen && ip[len] == ref[len]);\n+\n+\t      break;\n+\t    }\n+\n+\t  len -= 2;\n+\t  ip++;\n+\n+\t  if (len < 7)\n+\t    {\n+\t      *op++ = (off >> 8) + (len << 5);\n+\t    }\n+\t  else\n+\t    {\n+\t      *op++ = (off >> 8) + (7 << 5);\n+\t      *op++ = len - 7;\n+\t    }\n+\t  *op++ = off;\n+\t  lit = 0;\n+\t  op++;\n+\t  ip += len + 1;\n+\n+\t  if (ip >= in_end - 2)\n+\t    break;\n+\n+\t  --ip;\n+\t  --ip;\n+\n+\t  hval = (((ip[0]) << 8) | ip[1]);\n+\t  hval = (((hval) << 8) | ip[2]);\n+\t  htab[(((hval >> (3 * 8 - 16)) - hval * 5) & ((1 << (16)) - 1))]\n+\t    = (LZF_HSLOT)(ip - in_data);\n+\t  ip++;\n+\n+\t  hval = (((hval) << 8) | ip[2]);\n+\t  htab[(((hval >> (3 * 8 - 16)) - hval * 5) & ((1 << (16)) - 1))]\n+\t    = (LZF_HSLOT)(ip - in_data);\n+\t  ip++;\n+\t}\n+      else\n+\t{\n+\t  if (op >= out_end)\n+\t    return 0;\n+\n+\t  lit++;\n+\t  *op++ = *ip++;\n+\n+\t  if (lit == (1 << 5))\n+\t    {\n+\t      op[-lit - 1] = lit - 1;\n+\t      lit = 0;\n+\t      op++;\n+\t    }\n+\t}\n+    }\n+  if (op + 3 > out_end) /* at most 3 bytes can be missing here */\n+    return 0;\n+\n+  while (ip < in_end)\n+    {\n+      lit++;\n+      *op++ = *ip++;\n+      if (lit == MAX_LIT)\n+\t{\n+\t  op[-lit - 1] = lit - 1; /* stop run */\n+\t  lit = 0;\n+\t  op++; /* start run */\n+\t}\n+    }\n+\n+  op[-lit - 1] = lit - 1; /* end run */\n+  op -= !lit;\t\t  /* undo run if length is zero */\n+\n+  return op - out_data;\n+ }\n+\n+ /* For this case, pass sink2 sinks statements from hot loop header to loop\n+    exits after gimple loop optimizations, which generates instructions executed\n+    each iteration in loop, but the results are used outside of loop:\n+    With -m64,\n+    \"Sinking _367 = (uint8_t *) _320;\n+    from bb 31 to bb 90\n+    Sinking _320 = _321 + ivtmp.25_326;\n+    from bb 31 to bb 90\n+    Sinking _321 = (unsigned long) ip_229;\n+    from bb 31 to bb 90\n+    Sinking len_158 = _322 + 4294967295;\n+    from bb 31 to bb 33\"\n+    When -m32, Power and X86 will sink 3 instructions, but arm ilp32 couldn't\n+    sink due to ivopts chooses two IV candidates instead of one, which is\n+    expected, so this case is restricted to lp64 only so far.  */\n+\n+ /* { dg-final { scan-tree-dump-times \"Sunk statements: 4\" 1 \"sink2\" { target lp64 } } } */"}, {"sha": "a0b4734b1e01e75b17e10392d61ae429bba3513d", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-sink-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de56f95afaaa22c67cbeec780921d63e8b34514e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-sink-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de56f95afaaa22c67cbeec780921d63e8b34514e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-sink-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-sink-2.c?ref=de56f95afaaa22c67cbeec780921d63e8b34514e", "patch": "@@ -9,4 +9,4 @@ bar (int a, int b, int c)\n   return y;\n }\n /* We should sink the x = a * b calculation into the else branch  */\n-/* { dg-final { scan-tree-dump-times \"Sunk statements: 1\" 1 \"sink\" } } */\n+/* { dg-final { scan-tree-dump-times \"Sunk statements: 1\" 1 \"sink1\" } } */"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-sink-3.c", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de56f95afaaa22c67cbeec780921d63e8b34514e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-sink-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de56f95afaaa22c67cbeec780921d63e8b34514e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-sink-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-sink-3.c?ref=de56f95afaaa22c67cbeec780921d63e8b34514e", "patch": "@@ -1,15 +0,0 @@\n-/* { dg-do compile } */ \n-/* { dg-options \"-O2 -fdump-tree-sink-stats\" } */\n-extern void foo(int a);\n-int\n-main (int argc)\n-{\n-  int a;\n-  a = argc + 1;\n-  if (argc + 3)\n-    {\n-      foo (a);\n-    }\n-}\n-/* We should sink the a = argc + 1 calculation into the if branch  */\n-/* { dg-final { scan-tree-dump-times \"Sunk statements: 1\" 1 \"sink\" } } */"}, {"sha": "1e3cfa93fa859ebae7535ebe2301af003ab05c87", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-sink-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de56f95afaaa22c67cbeec780921d63e8b34514e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-sink-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de56f95afaaa22c67cbeec780921d63e8b34514e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-sink-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-sink-4.c?ref=de56f95afaaa22c67cbeec780921d63e8b34514e", "patch": "@@ -17,4 +17,4 @@ main (int argc)\n   foo2 (a);\n }\n /* We should sink the first a = b + c calculation into the else branch  */\n-/* { dg-final { scan-tree-dump-times \"Sunk statements: 1\" 1 \"sink\" } } */\n+/* { dg-final { scan-tree-dump-times \"Sunk statements: 1\" 1 \"sink1\" } } */"}, {"sha": "f04da5da9b0f71ca12e4d0a9f2c9812945d6553a", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-sink-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de56f95afaaa22c67cbeec780921d63e8b34514e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-sink-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de56f95afaaa22c67cbeec780921d63e8b34514e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-sink-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-sink-5.c?ref=de56f95afaaa22c67cbeec780921d63e8b34514e", "patch": "@@ -44,4 +44,4 @@ void foo(int16_t runs[], uint8_t alpha[], int x, int count)\n }\n \n /* We should not sink the next_runs = runs + x calculation after the loop.  */\n-/* { dg-final { scan-tree-dump-times \"Sunk statements:\" 0 \"sink\" } } */\n+/* { dg-final { scan-tree-dump-times \"Sunk statements:\" 0 \"sink1\" } } */"}, {"sha": "31f5af330f9561b4c1d9e8d8cfc83cf5bd76b389", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-sink-6.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de56f95afaaa22c67cbeec780921d63e8b34514e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-sink-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de56f95afaaa22c67cbeec780921d63e8b34514e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-sink-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-sink-6.c?ref=de56f95afaaa22c67cbeec780921d63e8b34514e", "patch": "@@ -14,4 +14,4 @@ int foo(int *a, int r)\n \n /* *a = 1 should be sunk to the else block.  */\n \n-/* { dg-final { scan-tree-dump-times \"Sinking\" 1 \"sink\" } } */\n+/* { dg-final { scan-tree-dump-times \"Sinking\" 1 \"sink1\" } } */"}, {"sha": "bd748442edc8167af53df7b0b6a36de6eeed7f06", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-sink-7.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de56f95afaaa22c67cbeec780921d63e8b34514e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-sink-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de56f95afaaa22c67cbeec780921d63e8b34514e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-sink-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-sink-7.c?ref=de56f95afaaa22c67cbeec780921d63e8b34514e", "patch": "@@ -15,4 +15,4 @@ int foo(int *a, int r, short *b)\n \n /* *a = 1 should be sunk to the else block.  */\n \n-/* { dg-final { scan-tree-dump-times \"Sinking\" 1 \"sink\" } } */\n+/* { dg-final { scan-tree-dump-times \"Sinking\" 1 \"sink1\" } } */"}, {"sha": "4b23b567fd02032142d3fa3f88be08f60e150d46", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-sink-8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de56f95afaaa22c67cbeec780921d63e8b34514e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-sink-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de56f95afaaa22c67cbeec780921d63e8b34514e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-sink-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-sink-8.c?ref=de56f95afaaa22c67cbeec780921d63e8b34514e", "patch": "@@ -24,4 +24,4 @@ int foo(int *a, int r, short *b)\n \n /* *a = 1 should be sunk into the default case.  */\n \n-/* { dg-final { scan-tree-dump-times \"Sinking\" 1 \"sink\" } } */\n+/* { dg-final { scan-tree-dump-times \"Sinking\" 1 \"sink1\" } } */"}, {"sha": "32bfc81741aa244d85f0cb52484f35eda0516e98", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-sink-9.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de56f95afaaa22c67cbeec780921d63e8b34514e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-sink-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de56f95afaaa22c67cbeec780921d63e8b34514e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-sink-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-sink-9.c?ref=de56f95afaaa22c67cbeec780921d63e8b34514e", "patch": "@@ -15,4 +15,4 @@ int foo(int *a, int r, int *b)\n \n /* *a = 1 should be sunk to the else block.  */\n \n-/* { dg-final { scan-tree-dump-times \"Sinking\" 1 \"sink\" } } */\n+/* { dg-final { scan-tree-dump-times \"Sinking\" 1 \"sink1\" } } */"}, {"sha": "d252cbb5c518632477ed84650ec8f256244c618f", "filename": "gcc/tree-ssa-sink.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de56f95afaaa22c67cbeec780921d63e8b34514e/gcc%2Ftree-ssa-sink.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de56f95afaaa22c67cbeec780921d63e8b34514e/gcc%2Ftree-ssa-sink.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sink.c?ref=de56f95afaaa22c67cbeec780921d63e8b34514e", "patch": "@@ -819,6 +819,7 @@ class pass_sink_code : public gimple_opt_pass\n   /* opt_pass methods: */\n   virtual bool gate (function *) { return flag_tree_sink != 0; }\n   virtual unsigned int execute (function *);\n+  opt_pass *clone (void) { return new pass_sink_code (m_ctxt); }\n \n }; // class pass_sink_code\n "}]}