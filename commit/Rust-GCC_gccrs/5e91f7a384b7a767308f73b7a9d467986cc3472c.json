{"sha": "5e91f7a384b7a767308f73b7a9d467986cc3472c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWU5MWY3YTM4NGI3YTc2NzMwOGY3M2I3YTlkNDY3OTg2Y2MzNDcyYw==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2005-03-09T16:39:43Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2005-03-09T16:39:43Z"}, "message": "cfgbuild.c (state, [...]): Move just before make_edges.\n\n\t* cfgbuild.c (state, STATE, SET_STATE,\n\tBLOCK_USED_BY_TABLEJUMP, FULL_STATE): Move just before\n\tmake_edges.\n\t(make_edges): Speed up by skipping blocks with BLOCK_ORIGINAL.\n\t(find_basic_blocks): Set the state of each basic block to\n\tBLOCK_NEW.\n\nFrom-SVN: r96193", "tree": {"sha": "f2100186cbe0e3bf89dcfd0fd35db20afce5a387", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f2100186cbe0e3bf89dcfd0fd35db20afce5a387"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5e91f7a384b7a767308f73b7a9d467986cc3472c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e91f7a384b7a767308f73b7a9d467986cc3472c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e91f7a384b7a767308f73b7a9d467986cc3472c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e91f7a384b7a767308f73b7a9d467986cc3472c/comments", "author": null, "committer": null, "parents": [{"sha": "974b30f0ae978dc9c3c5f7d0cef914f99d8c48d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/974b30f0ae978dc9c3c5f7d0cef914f99d8c48d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/974b30f0ae978dc9c3c5f7d0cef914f99d8c48d5"}], "stats": {"total": 54, "additions": 35, "deletions": 19}, "files": [{"sha": "9cd776693d43a529464b9c52598b5fd3b7676b6e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e91f7a384b7a767308f73b7a9d467986cc3472c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e91f7a384b7a767308f73b7a9d467986cc3472c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5e91f7a384b7a767308f73b7a9d467986cc3472c", "patch": "@@ -34,6 +34,13 @@\n \n \t* tree-ssa-loop-im.c (lhs): Remove.\n \n+\t* cfgbuild.c (state, STATE, SET_STATE,\n+\tBLOCK_USED_BY_TABLEJUMP, FULL_STATE): Move just before\n+\tmake_edges.\n+\t(make_edges): Speed up by skipping blocks with BLOCK_ORIGINAL.\n+\t(find_basic_blocks): Set the state of each basic block to\n+\tBLOCK_NEW.\n+\n 2005-03-08  Jeff Law  <law@redhat.com>\n \n \t* tree-cfg.c (cleanup_control_flow): If removal of a computed"}, {"sha": "3890bd172b441d4206b8098bf43a318ca28abd7c", "filename": "gcc/cfgbuild.c", "status": "modified", "additions": 28, "deletions": 19, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e91f7a384b7a767308f73b7a9d467986cc3472c/gcc%2Fcfgbuild.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e91f7a384b7a767308f73b7a9d467986cc3472c/gcc%2Fcfgbuild.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgbuild.c?ref=5e91f7a384b7a767308f73b7a9d467986cc3472c", "patch": "@@ -211,6 +211,16 @@ rtl_make_eh_edge (sbitmap *edge_cache, basic_block src, rtx insn)\n   free_INSN_LIST_list (&handlers);\n }\n \n+/* State of basic block as seen by find_many_sub_basic_blocks.  */\n+enum state {BLOCK_NEW = 0, BLOCK_ORIGINAL, BLOCK_TO_SPLIT};\n+\n+#define STATE(BB) (enum state) ((size_t) (BB)->aux)\n+#define SET_STATE(BB, STATE) ((BB)->aux = (void *) (size_t) (STATE))\n+\n+/* Used internally by purge_dead_tablejump_edges, ORed into state.  */\n+#define BLOCK_USED_BY_TABLEJUMP\t\t32\n+#define FULL_STATE(BB) ((size_t) (BB)->aux)\n+\n /* Identify the edges between basic blocks MIN to MAX.\n \n    NONLOCAL_LABEL_LIST is a list of non-local labels in the function.  Blocks\n@@ -234,15 +244,18 @@ make_edges (basic_block min, basic_block max, int update_p)\n       sbitmap_vector_zero (edge_cache, last_basic_block);\n \n       if (update_p)\n-        FOR_BB_BETWEEN (bb, min, max->next_bb, next_bb)\n-\t  {\n-\t    edge e;\n-\t    edge_iterator ei;\n-\n-\t    FOR_EACH_EDGE (e, ei, bb->succs)\n-\t      if (e->dest != EXIT_BLOCK_PTR)\n-\t\tSET_BIT (edge_cache[bb->index], e->dest->index);\n-\t  }\n+\t{\n+\t  FOR_BB_BETWEEN (bb, min, max->next_bb, next_bb)\n+\t    if (STATE (bb) != BLOCK_ORIGINAL)\n+\t      {\n+\t\tedge e;\n+\t\tedge_iterator ei;\n+\t\t\n+\t\tFOR_EACH_EDGE (e, ei, bb->succs)\n+\t\t  if (e->dest != EXIT_BLOCK_PTR)\n+\t\t    SET_BIT (edge_cache[bb->index], e->dest->index);\n+\t      }\n+\t}\n     }\n \n   /* By nature of the way these get numbered, ENTRY_BLOCK_PTR->next_bb block\n@@ -257,6 +270,9 @@ make_edges (basic_block min, basic_block max, int update_p)\n       enum rtx_code code;\n       edge e;\n \n+      if (STATE (bb) == BLOCK_ORIGINAL)\n+\tcontinue;\n+\n       if (LABEL_P (BB_HEAD (bb))\n \t  && LABEL_ALT_ENTRY_P (BB_HEAD (bb)))\n \tcached_make_edge (NULL, ENTRY_BLOCK_PTR, bb, 0);\n@@ -522,6 +538,9 @@ find_basic_blocks (rtx f)\n \n   profile_status = PROFILE_ABSENT;\n \n+  FOR_EACH_BB (bb)\n+    SET_STATE (bb, BLOCK_NEW);\n+\n   /* Discover the edges of our cfg.  */\n   make_edges (ENTRY_BLOCK_PTR->next_bb, EXIT_BLOCK_PTR->prev_bb, 0);\n \n@@ -535,16 +554,6 @@ find_basic_blocks (rtx f)\n   timevar_pop (TV_CFG);\n }\n \f\n-/* State of basic block as seen by find_many_sub_basic_blocks.  */\n-enum state {BLOCK_NEW = 0, BLOCK_ORIGINAL, BLOCK_TO_SPLIT};\n-\n-#define STATE(BB) (enum state) ((size_t) (BB)->aux)\n-#define SET_STATE(BB, STATE) ((BB)->aux = (void *) (size_t) (STATE))\n-\n-/* Used internally by purge_dead_tablejump_edges, ORed into state.  */\n-#define BLOCK_USED_BY_TABLEJUMP\t\t32\n-#define FULL_STATE(BB) ((size_t) (BB)->aux)\n-\n static void\n mark_tablejump_edge (rtx label)\n {"}]}