{"sha": "e59b917109ad5ecb461cd4fc6b7fda924eda8fa7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTU5YjkxNzEwOWFkNWVjYjQ2MWNkNGZjNmI3ZmRhOTI0ZWRhOGZhNw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-04-01T23:02:16Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-04-01T23:02:16Z"}, "message": "libgo: Support for alpha.\n\nFrom Uros Bizjak.\n\nFrom-SVN: r171860", "tree": {"sha": "7e44bdc2d5869d3188f44a45c44af937965a9f3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e44bdc2d5869d3188f44a45c44af937965a9f3e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e59b917109ad5ecb461cd4fc6b7fda924eda8fa7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e59b917109ad5ecb461cd4fc6b7fda924eda8fa7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e59b917109ad5ecb461cd4fc6b7fda924eda8fa7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e59b917109ad5ecb461cd4fc6b7fda924eda8fa7/comments", "author": null, "committer": null, "parents": [{"sha": "4ac7fcaac05916bfbf58851691f9e19e288181aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ac7fcaac05916bfbf58851691f9e19e288181aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ac7fcaac05916bfbf58851691f9e19e288181aa"}], "stats": {"total": 253, "additions": 251, "deletions": 2}, "files": [{"sha": "2821967d49a9f438178a5f98dadc1741c69719da", "filename": "libgo/configure", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e59b917109ad5ecb461cd4fc6b7fda924eda8fa7/libgo%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e59b917109ad5ecb461cd4fc6b7fda924eda8fa7/libgo%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fconfigure?ref=e59b917109ad5ecb461cd4fc6b7fda924eda8fa7", "patch": "@@ -644,6 +644,8 @@ LIBGO_IS_M68K_FALSE\n LIBGO_IS_M68K_TRUE\n LIBGO_IS_ARM_FALSE\n LIBGO_IS_ARM_TRUE\n+LIBGO_IS_ALPHA_FALSE\n+LIBGO_IS_ALPHA_TRUE\n LIBGO_IS_386_FALSE\n LIBGO_IS_386_TRUE\n GOOS\n@@ -10911,7 +10913,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 10914 \"configure\"\n+#line 10916 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -11017,7 +11019,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11020 \"configure\"\n+#line 11022 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -13290,6 +13292,7 @@ fi\n \n \n is_386=no\n+is_alpha=no\n is_arm=no\n is_m68k=no\n mips_abi=\"\"\n@@ -13300,6 +13303,10 @@ is_sparc64=no\n is_x86_64=no\n GOARCH=unknown\n case ${host} in\n+  alpha*-*-*)\n+    is_alpha=yes\n+    GOARCH=alpha\n+    ;;\n   arm*-*-* | strongarm*-*-* | ep9312*-*-* | xscale-*-*)\n     is_arm=yes\n     GOARCH=arm\n@@ -13435,6 +13442,14 @@ else\n   LIBGO_IS_386_FALSE=\n fi\n \n+ if test $is_alpha = yes; then\n+  LIBGO_IS_ALPHA_TRUE=\n+  LIBGO_IS_ALPHA_FALSE='#'\n+else\n+  LIBGO_IS_ALPHA_TRUE='#'\n+  LIBGO_IS_ALPHA_FALSE=\n+fi\n+\n  if test $is_arm = yes; then\n   LIBGO_IS_ARM_TRUE=\n   LIBGO_IS_ARM_FALSE='#'\n@@ -14612,6 +14627,10 @@ if test -z \"${LIBGO_IS_386_TRUE}\" && test -z \"${LIBGO_IS_386_FALSE}\"; then\n   as_fn_error \"conditional \\\"LIBGO_IS_386\\\" was never defined.\n Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n fi\n+if test -z \"${LIBGO_IS_ALPHA_TRUE}\" && test -z \"${LIBGO_IS_ALPHA_FALSE}\"; then\n+  as_fn_error \"conditional \\\"LIBGO_IS_ALPHA\\\" was never defined.\n+Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n+fi\n if test -z \"${LIBGO_IS_ARM_TRUE}\" && test -z \"${LIBGO_IS_ARM_FALSE}\"; then\n   as_fn_error \"conditional \\\"LIBGO_IS_ARM\\\" was never defined.\n Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5"}, {"sha": "77b9f94aba055b18fee5f27e7c20017f26817250", "filename": "libgo/configure.ac", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e59b917109ad5ecb461cd4fc6b7fda924eda8fa7/libgo%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e59b917109ad5ecb461cd4fc6b7fda924eda8fa7/libgo%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fconfigure.ac?ref=e59b917109ad5ecb461cd4fc6b7fda924eda8fa7", "patch": "@@ -137,6 +137,7 @@ AC_SUBST(GOOS)\n \n dnl N.B. Keep in sync with gcc/testsuite/go.test/go-test.exp (go-set-goarch).\n is_386=no\n+is_alpha=no\n is_arm=no\n is_m68k=no\n mips_abi=\"\"\n@@ -147,6 +148,10 @@ is_sparc64=no\n is_x86_64=no\n GOARCH=unknown\n case ${host} in\n+  alpha*-*-*)\n+    is_alpha=yes\n+    GOARCH=alpha\n+    ;;\n   arm*-*-* | strongarm*-*-* | ep9312*-*-* | xscale-*-*)\n     is_arm=yes\n     GOARCH=arm\n@@ -225,6 +230,7 @@ changequote([,])dnl\n     ;;\n esac\n AM_CONDITIONAL(LIBGO_IS_386, test $is_386 = yes)\n+AM_CONDITIONAL(LIBGO_IS_ALPHA, test $is_alpha = yes)\n AM_CONDITIONAL(LIBGO_IS_ARM, test $is_arm = yes)\n AM_CONDITIONAL(LIBGO_IS_M68K, test $is_m68k = yes)\n AM_CONDITIONAL(LIBGO_IS_MIPS, test $mips_abi != \"\")"}, {"sha": "3c9f8d85f17ea7facaf675412f5288537d4ef223", "filename": "libgo/go/debug/proc/regs_linux_alpha.go", "status": "added", "additions": 209, "deletions": 0, "changes": 209, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e59b917109ad5ecb461cd4fc6b7fda924eda8fa7/libgo%2Fgo%2Fdebug%2Fproc%2Fregs_linux_alpha.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e59b917109ad5ecb461cd4fc6b7fda924eda8fa7/libgo%2Fgo%2Fdebug%2Fproc%2Fregs_linux_alpha.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fdebug%2Fproc%2Fregs_linux_alpha.go?ref=e59b917109ad5ecb461cd4fc6b7fda924eda8fa7", "patch": "@@ -0,0 +1,209 @@\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package proc\n+\n+import (\n+\t\"os\"\n+\t\"strconv\"\n+\t\"syscall\"\n+)\n+\n+type alphaRegs struct {\n+\tsyscall.PtraceRegs\n+\tsetter func(*syscall.PtraceRegs) os.Error\n+}\n+\n+var names = [...]string{\n+\t\"r0\",\n+\t\"r1\",\n+\t\"r2\",\n+\t\"r3\",\n+\t\"r4\",\n+\t\"r5\",\n+\t\"r6\",\n+\t\"r7\",\n+\t\"r8\",\n+\t\"r19\",\n+\t\"r20\",\n+\t\"r21\",\n+\t\"r22\",\n+\t\"r23\",\n+\t\"r24\",\n+\t\"r25\",\n+\t\"r26\",\n+\t\"r27\",\n+\t\"r28\",\n+\t\"hae\",\n+\t\"trap_a0\",\n+\t\"trap_a1\",\n+\t\"trap_a2\",\n+\t\"ps\",\n+\t\"pc\",\n+\t\"gp\",\n+\t\"r16\",\n+\t\"r17\",\n+\t\"r18\",\n+}\n+\n+func (r *alphaRegs) PC() Word { return Word(r.Pc) }\n+\n+func (r *alphaRegs) SetPC(val Word) os.Error {\n+\tr.Pc = uint64(val)\n+\treturn r.setter(&r.PtraceRegs)\n+}\n+\n+func (r *alphaRegs) Link() Word {\n+\tpanic(\"No link register\")\n+}\n+\n+func (r *alphaRegs) SetLink(val Word) os.Error {\n+\tpanic(\"No link register\")\n+}\n+\n+func (r *alphaRegs) SP() Word { return Word(r.Ps) }\n+\n+func (r *alphaRegs) SetSP(val Word) os.Error {\n+\tr.Ps = uint64(val)\n+\treturn r.setter(&r.PtraceRegs)\n+}\n+\n+func (r *alphaRegs) Names() []string { return names[0:] }\n+\n+func (r *alphaRegs) Get(i int) Word {\n+\tswitch i {\n+\tcase 0:\n+\t\treturn Word(r.R0)\n+\tcase 1:\n+\t\treturn Word(r.R1)\n+\tcase 2:\n+\t\treturn Word(r.R2)\n+\tcase 3:\n+\t\treturn Word(r.R3)\n+\tcase 4:\n+\t\treturn Word(r.R4)\n+\tcase 5:\n+\t\treturn Word(r.R5)\n+\tcase 6:\n+\t\treturn Word(r.R6)\n+\tcase 7:\n+\t\treturn Word(r.R7)\n+\tcase 8:\n+\t\treturn Word(r.R8)\n+\tcase 9:\n+\t\treturn Word(r.R19)\n+\tcase 10:\n+\t\treturn Word(r.R20)\n+\tcase 11:\n+\t\treturn Word(r.R21)\n+\tcase 12:\n+\t\treturn Word(r.R22)\n+\tcase 13:\n+\t\treturn Word(r.R23)\n+\tcase 14:\n+\t\treturn Word(r.R24)\n+\tcase 15:\n+\t\treturn Word(r.R25)\n+\tcase 16:\n+\t\treturn Word(r.R26)\n+\tcase 17:\n+\t\treturn Word(r.R27)\n+\tcase 18:\n+\t\treturn Word(r.R28)\n+\tcase 19:\n+\t\treturn Word(r.Hae)\n+\tcase 20:\n+\t\treturn Word(r.Trap_a0)\n+\tcase 21:\n+\t\treturn Word(r.Trap_a1)\n+\tcase 22:\n+\t\treturn Word(r.Trap_a2)\n+\tcase 23:\n+\t\treturn Word(r.Ps)\n+\tcase 24:\n+\t\treturn Word(r.Pc)\n+\tcase 25:\n+\t\treturn Word(r.Gp)\n+\tcase 26:\n+\t\treturn Word(r.R16)\n+\tcase 27:\n+\t\treturn Word(r.R17)\n+\tcase 28:\n+\t\treturn Word(r.R18)\n+\t}\n+\tpanic(\"invalid register index \" + strconv.Itoa(i))\n+}\n+\n+func (r *alphaRegs) Set(i int, val Word) os.Error {\n+\tswitch i {\n+\tcase 0:\n+\t\tr.R0 = uint64(val)\n+\tcase 1:\n+\t\tr.R1 = uint64(val)\n+\tcase 2:\n+\t\tr.R2 = uint64(val)\n+\tcase 3:\n+\t\tr.R3 = uint64(val)\n+\tcase 4:\n+\t\tr.R4 = uint64(val)\n+\tcase 5:\n+\t\tr.R5 = uint64(val)\n+\tcase 6:\n+\t\tr.R6 = uint64(val)\n+\tcase 7:\n+\t\tr.R7 = uint64(val)\n+\tcase 8:\n+\t\tr.R8 = uint64(val)\n+\tcase 9:\n+\t\tr.R19 = uint64(val)\n+\tcase 10:\n+\t\tr.R20 = uint64(val)\n+\tcase 11:\n+\t\tr.R21 = uint64(val)\n+\tcase 12:\n+\t\tr.R22 = uint64(val)\n+\tcase 13:\n+\t\tr.R23 = uint64(val)\n+\tcase 14:\n+\t\tr.R24 = uint64(val)\n+\tcase 15:\n+\t\tr.R25 = uint64(val)\n+\tcase 16:\n+\t\tr.R26 = uint64(val)\n+\tcase 17:\n+\t\tr.R27 = uint64(val)\n+\tcase 18:\n+\t\tr.R28 = uint64(val)\n+\tcase 19:\n+\t\tr.Hae = uint64(val)\n+\tcase 20:\n+\t\tr.Trap_a0 = uint64(val)\n+\tcase 21:\n+\t\tr.Trap_a1 = uint64(val)\n+\tcase 22:\n+\t\tr.Trap_a2 = uint64(val)\n+\tcase 23:\n+\t\tr.Ps = uint64(val)\n+\tcase 24:\n+\t\tr.Pc = uint64(val)\n+\tcase 25:\n+\t\tr.Gp = uint64(val)\n+\tcase 26:\n+\t\tr.R16 = uint64(val)\n+\tcase 27:\n+\t\tr.R17 = uint64(val)\n+\tcase 28:\n+\t\tr.R18 = uint64(val)\n+\tdefault:\n+\t\tpanic(\"invalid register index \" + strconv.Itoa(i))\n+\t}\n+\treturn r.setter(&r.PtraceRegs)\n+}\n+\n+func newRegs(regs *syscall.PtraceRegs, setter func(*syscall.PtraceRegs) os.Error) Regs {\n+\tres := alphaRegs{}\n+\tres.PtraceRegs = *regs\n+\tres.setter = setter\n+\treturn &res\n+}"}, {"sha": "35259b27fe7fa21eb4a94c1beb97172a813aea92", "filename": "libgo/syscalls/syscall_linux_alpha.go", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e59b917109ad5ecb461cd4fc6b7fda924eda8fa7/libgo%2Fsyscalls%2Fsyscall_linux_alpha.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e59b917109ad5ecb461cd4fc6b7fda924eda8fa7/libgo%2Fsyscalls%2Fsyscall_linux_alpha.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fsyscalls%2Fsyscall_linux_alpha.go?ref=e59b917109ad5ecb461cd4fc6b7fda924eda8fa7", "patch": "@@ -0,0 +1,15 @@\n+// syscall_linux_alpha.go -- GNU/Linux ALPHA specific support\n+\n+// Copyright 2011 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package syscall\n+\n+func (r *PtraceRegs) PC() uint64 {\n+\treturn r.Pc;\n+}\n+\n+func (r *PtraceRegs) SetPC(pc uint64) {\n+\tr.Pc = pc;\n+}"}]}