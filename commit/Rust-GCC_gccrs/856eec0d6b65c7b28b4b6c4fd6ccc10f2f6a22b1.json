{"sha": "856eec0d6b65c7b28b4b6c4fd6ccc10f2f6a22b1", "node_id": "C_kwDOANBUbNoAKDg1NmVlYzBkNmI2NWM3YjI4YjRiNmM0ZmQ2Y2NjMTBmMmY2YTIyYjE", "commit": {"author": {"name": "Ju-Zhe Zhong", "email": "juzhe.zhong@rivai.ai", "date": "2022-12-29T15:34:02Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2023-01-26T18:52:40Z"}, "message": "RISC-V: Fix inferior codegen for vse intrinsics.\n\nCurrently we use pred_mov to to do the codegen for vse intrinsics. However, it\ngenerates inferior codegen when I am testing AVL model of VSETVL PASS using vse\nintrinsics.\n\nConsider this following code:\nvoid f2 (int * restrict in, int * restrict out, void * restrict mask_in, int n)\n{\n  vfloat32mf2_t v = __riscv_vle32_v_f32mf2 ((float *)(in + 10000), 19);\n  __riscv_vse32_v_f32mf2 ((float *)(out + 10000), v, 19);\n  vbool64_t mask = *(vbool64_t*)mask_in;\n  for (int i = 0; i < n; i++)\n    {\n      vint16mf2_t v1 = __riscv_vle16_v_i16mf2 ((int16_t *)(in + i + 1), 19);\n      __riscv_vse16_v_i16mf2 ((int16_t *)(out + i + 1), v1, 19);\n\n      vint32mf2_t v2 = __riscv_vle32_v_i32mf2 ((int32_t *)(in + i + 2), 19);\n      __riscv_vse32_v_i32mf2 ((int32_t *)(out + i + 2), v2, 19);\n\n      vint32mf2_t v3 = __riscv_vle32_v_i32mf2_tumu (mask, v2, (int32_t *)(in + i + 200), 13);\n      __riscv_vse32_v_i32mf2 ((int32_t *)(out + i + 200), v2, 13);\n\n      vfloat64m1_t v4 = __riscv_vle64_v_f64m1_m (mask, (double *)(in + i + 300), 11);\n      __riscv_vse64_v_f64m1 ((double *)(out + i + 300), v4, 11);\n\n      vfloat64m1_t v5 = __riscv_vle64_v_f64m1_tum (mask, v4, (double *)(in + i + 500), 11);\n      __riscv_vse64_v_f64m1 ((double *)(out + i + 500), v5, 11);\n\n      vfloat64m1_t v6 = __riscv_vle64_v_f64m1_mu (mask, v5, (double *)(in + i + 600), 11);\n      __riscv_vse64_v_f64m1_m (mask, (double *)(out + i + 600), v6, 11);\n\n      vuint8mf4_t v7 = __riscv_vle8_v_u8mf4 ((uint8_t *)(in + i + 700), 11);\n      __riscv_vse8_v_u8mf4 ((uint8_t *)(out + i + 700), v7, 11);\n    }\n}\n\nBefore this patch:\n\tcsrr\tt2,vlenb\n\tsrli\tt2,t2,1\n\tslli\ts0,t2,2\n\tvsetvli\tzero,19,e16,mf2,ta,ma\n\tsub\ts0,s0,t2\n\tcsrr\tt2,vlenb\n\tvle16.v\tv24,0(a3)\n\tmv\ta4,a3\n\tvse16.v\tv24,0(a1)\n\tsrli\tt2,t2,1\n\tadd\ta2,a3,t6\n\tadd\ts0,s0,sp\n\tvsetvli\tzero,19,e32,mf2,ta,ma\n\taddi\ta3,a3,4\n\tvle32.v\tv24,0(a3)\n\tvsetvli\tzero,t0,e32,mf2,ta,ma\n\tvse32.v\tv24,0(s0)\n\tslli\ts0,t2,2\n\tsub\ts0,s0,t2\n\tadd\ts0,s0,sp\n\tvsetvli\tt0,zero,e32,mf2,ta,ma\n\tvle32.v\tv24,0(s0)\n\tmv\ts0,t2\n\tslli\tt2,t2,2\n\tmv\ta5,a1\n\tvsetvli\tzero,19,e32,mf2,ta,ma\n\taddi\ta1,a1,4\n\tsub\tt2,t2,s0\n\tvse32.v\tv24,0(a1)\n\tadd\tt2,t2,sp\n\tvsetvli\tt0,zero,e32,mf2,ta,ma\n\taddi\tt1,a5,796\n\tvle32.v\tv24,0(t2)\n\taddi\tt5,a4,1196\n\taddi\ta7,a5,1196\n\taddi\tt4,a4,1996\n\taddi\ta6,a5,1996\n\tvsetvli\tzero,13,e32,mf2,ta,ma\n\tadd\ta4,a4,t3\n\tvse32.v\tv24,0(t1)\n\tadd\ta5,a5,t3\n\tvsetvli\tzero,11,e64,m1,tu,mu\n\tvle64.v\tv24,0(t5),v0.t\n\tvse64.v\tv24,0(a7)\n\tvle64.v\tv24,0(t4),v0.t\n\tvse64.v\tv24,0(a6)\n\tvle64.v\tv24,0(a4),v0.t\n\tvse64.v\tv24,0(a5),v0.t\n\tvsetvli\tzero,11,e8,mf4,ta,ma\n\tvle8.v\tv24,0(a2)\n\tvse8.v\tv24,0(a2)\n\tbne\ta0,a3,.L8\n\tcsrr\tt0,vlenb\n\tslli\tt1,t0,1\n\tadd\tsp,sp,t1\n\tlw\ts0,12(sp)\n\taddi\tsp,sp,16\n\tjr\tra\n\nWe are generating redundant spilling codes.\nHere we introduce a dedicated pred_store pattern for vse intrinsics like\nmaskstore in ARM SVE.\n\nAfter this patch:\nvsetvli\tzero,19,e16,mf2,ta,ma\n\tmv\ta5,a4\n\tvle16.v\tv24,0(a0)\n\tmv\ta3,a0\n\tvse16.v\t19,0(a4)\n\taddi\tt1,a4,796\n\tvsetvli\tzero,19,e32,mf2,ta,ma\n\taddi\ta0,a0,4\n\taddi\ta4,a4,4\n\tvle32.v\tv24,0(a0)\n\taddi\tt0,a3,1196\n\tvse32.v\t19,0(a4)\n\taddi\ta7,a5,1196\n\taddi\tt6,a3,1996\n\taddi\ta6,a5,1996\n\tadd\tt5,a3,t4\n\tvsetvli\tzero,13,e32,mf2,ta,ma\n\tadd\ta2,a5,t4\n\tvse32.v\t13,0(t1)\n\tadd\ta3,a3,t3\n\tvsetvli\tzero,11,e64,m1,tu,mu\n\tadd\ta5,a5,t3\n\tvle64.v\tv24,0(t0),v0.t\n\tvse64.v\t11,0(a7)\n\tvle64.v\tv24,0(t6),v0.t\n\tvse64.v\t11,0(a6)\n\tvle64.v\tv24,0(t5),v0.t\n\tvse64.v\t11,0(a2),v0.t\n\tvsetvli\tzero,11,e8,mf4,ta,ma\n\tvle8.v\tv24,0(a3)\n\tvse8.v\t11,0(a5)\n\tbne\ta1,a4,.L8\n.L6:\n\tret\n\ngcc/ChangeLog:\n\n\t* config/riscv/riscv-vector-builtins-bases.cc (class loadstore): use\n\tpred_store for vse.\n\t* config/riscv/riscv-vector-builtins.cc\n\t(function_expander::add_mem_operand): Refine function.\n\t(function_expander::use_contiguous_load_insn): Adjust new\n\timplementation.\n\t(function_expander::use_contiguous_store_insn): Ditto.\n\t* config/riscv/riscv-vector-builtins.h: Refine function.\n\t* config/riscv/vector.md (@pred_store<mode>): New pattern.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/riscv/rvv/base/vse-constraint-1.c: New test.", "tree": {"sha": "4cbad74492df19fcdef945472c5841aab62a4c89", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4cbad74492df19fcdef945472c5841aab62a4c89"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/856eec0d6b65c7b28b4b6c4fd6ccc10f2f6a22b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/856eec0d6b65c7b28b4b6c4fd6ccc10f2f6a22b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/856eec0d6b65c7b28b4b6c4fd6ccc10f2f6a22b1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/856eec0d6b65c7b28b4b6c4fd6ccc10f2f6a22b1/comments", "author": {"login": "zhongjuzhe", "id": 66454988, "node_id": "MDQ6VXNlcjY2NDU0OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/66454988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhongjuzhe", "html_url": "https://github.com/zhongjuzhe", "followers_url": "https://api.github.com/users/zhongjuzhe/followers", "following_url": "https://api.github.com/users/zhongjuzhe/following{/other_user}", "gists_url": "https://api.github.com/users/zhongjuzhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhongjuzhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhongjuzhe/subscriptions", "organizations_url": "https://api.github.com/users/zhongjuzhe/orgs", "repos_url": "https://api.github.com/users/zhongjuzhe/repos", "events_url": "https://api.github.com/users/zhongjuzhe/events{/privacy}", "received_events_url": "https://api.github.com/users/zhongjuzhe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f91cd98ebc3599d514c42db23606b4b9474ef1fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f91cd98ebc3599d514c42db23606b4b9474ef1fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f91cd98ebc3599d514c42db23606b4b9474ef1fe"}], "stats": {"total": 152, "additions": 128, "deletions": 24}, "files": [{"sha": "5cd8e4d827c825e792c8975e7ce58454ad66e7c3", "filename": "gcc/config/riscv/riscv-vector-builtins-bases.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/856eec0d6b65c7b28b4b6c4fd6ccc10f2f6a22b1/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/856eec0d6b65c7b28b4b6c4fd6ccc10f2f6a22b1/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.cc?ref=856eec0d6b65c7b28b4b6c4fd6ccc10f2f6a22b1", "patch": "@@ -106,7 +106,7 @@ class loadstore : public function_base\n   rtx expand (function_expander &e) const override\n   {\n     if (STORE_P)\n-      return e.use_contiguous_store_insn (code_for_pred_mov (e.vector_mode ()));\n+      return e.use_contiguous_store_insn (code_for_pred_store (e.vector_mode ()));\n     else\n       return e.use_contiguous_load_insn (code_for_pred_mov (e.vector_mode ()));\n   }"}, {"sha": "4c5ecce6219776abd549830cb1f7a1182c30fb9f", "filename": "gcc/config/riscv/riscv-vector-builtins.cc", "status": "modified", "additions": 5, "deletions": 17, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/856eec0d6b65c7b28b4b6c4fd6ccc10f2f6a22b1/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/856eec0d6b65c7b28b4b6c4fd6ccc10f2f6a22b1/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.cc?ref=856eec0d6b65c7b28b4b6c4fd6ccc10f2f6a22b1", "patch": "@@ -845,15 +845,15 @@ function_expander::add_vundef_operand (machine_mode mode)\n }\n \n /* Add a memory operand with mode MODE and address ADDR.  */\n-rtx\n-function_expander::add_mem_operand (machine_mode mode, rtx addr)\n+void\n+function_expander::add_mem_operand (machine_mode mode, unsigned argno)\n {\n   gcc_assert (VECTOR_MODE_P (mode));\n+  rtx addr = expand_normal (CALL_EXPR_ARG (exp, argno));\n   rtx mem = gen_rtx_MEM (mode, memory_address (mode, addr));\n   /* The memory is only guaranteed to be element-aligned.  */\n   set_mem_align (mem, GET_MODE_ALIGNMENT (GET_MODE_INNER (mode)));\n   add_fixed_operand (mem);\n-  return mem;\n }\n \n /* Use contiguous load INSN.  */\n@@ -878,9 +878,7 @@ function_expander::use_contiguous_load_insn (insn_code icode)\n   else\n     add_vundef_operand (mode);\n \n-  tree addr_arg = CALL_EXPR_ARG (exp, arg_offset++);\n-  rtx addr = expand_normal (addr_arg);\n-  add_mem_operand (mode, addr);\n+  add_mem_operand (mode, arg_offset++);\n \n   for (int argno = arg_offset; argno < call_expr_nargs (exp); argno++)\n     add_input_operand (argno);\n@@ -904,27 +902,17 @@ function_expander::use_contiguous_store_insn (insn_code icode)\n   /* Record the offset to get the argument.  */\n   int arg_offset = 0;\n \n-  int addr_loc = use_real_mask_p (pred) ? 1 : 0;\n-  tree addr_arg = CALL_EXPR_ARG (exp, addr_loc);\n-  rtx addr = expand_normal (addr_arg);\n-  rtx mem = add_mem_operand (mode, addr);\n+  add_mem_operand (mode, use_real_mask_p (pred) ? 1 : 0);\n \n   if (use_real_mask_p (pred))\n     add_input_operand (arg_offset++);\n   else\n     add_all_one_mask_operand (mask_mode);\n \n-  /* To model \"+m\" constraint, we include memory operand into input.  */\n-  add_input_operand (mode, mem);\n-\n   arg_offset++;\n   for (int argno = arg_offset; argno < call_expr_nargs (exp); argno++)\n     add_input_operand (argno);\n \n-  add_input_operand (Pmode, get_tail_policy_for_pred (pred));\n-  add_input_operand (Pmode, get_mask_policy_for_pred (pred));\n-  add_input_operand (Pmode, get_avl_type_rtx (avl_type::NONVLMAX));\n-\n   return generate_insn (icode);\n }\n "}, {"sha": "fb3f818e15a5ab92353f6e60296cca96dced1ca3", "filename": "gcc/config/riscv/riscv-vector-builtins.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/856eec0d6b65c7b28b4b6c4fd6ccc10f2f6a22b1/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/856eec0d6b65c7b28b4b6c4fd6ccc10f2f6a22b1/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.h?ref=856eec0d6b65c7b28b4b6c4fd6ccc10f2f6a22b1", "patch": "@@ -317,12 +317,12 @@ class function_expander : public function_call_info\n   rtx expand ();\n \n   void add_input_operand (machine_mode, rtx);\n-  void add_input_operand (unsigned argno);\n+  void add_input_operand (unsigned);\n   void add_output_operand (machine_mode, rtx);\n-  void add_all_one_mask_operand (machine_mode mode);\n-  void add_vundef_operand (machine_mode mode);\n+  void add_all_one_mask_operand (machine_mode);\n+  void add_vundef_operand (machine_mode);\n   void add_fixed_operand (rtx);\n-  rtx add_mem_operand (machine_mode, rtx);\n+  void add_mem_operand (machine_mode, unsigned);\n \n   machine_mode vector_mode (void) const;\n "}, {"sha": "1ec0a4d660482c8528465a6b399de2e2cdc5b3ec", "filename": "gcc/config/riscv/vector.md", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/856eec0d6b65c7b28b4b6c4fd6ccc10f2f6a22b1/gcc%2Fconfig%2Friscv%2Fvector.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/856eec0d6b65c7b28b4b6c4fd6ccc10f2f6a22b1/gcc%2Fconfig%2Friscv%2Fvector.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fvector.md?ref=856eec0d6b65c7b28b4b6c4fd6ccc10f2f6a22b1", "patch": "@@ -209,7 +209,7 @@\n \n ;; The index of operand[] to get the merge op.\n (define_attr \"merge_op_idx\" \"\"\n-\t(cond [(eq_attr \"type\" \"vlde,vste,vimov,vfmov,vldm,vstm,vlds,vmalu\")\n+\t(cond [(eq_attr \"type\" \"vlde,vimov,vfmov,vldm,vstm,vlds,vmalu\")\n \t (const_int 2)]\n \t(const_int INVALID_ATTRIBUTE)))\n \n@@ -667,7 +667,7 @@\n \t     (reg:SI VL_REGNUM)\n \t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n \t  (match_operand:V 3 \"vector_move_operand\"       \"    m,     m,    vr,    vr, viWc0\")\n-\t  (match_operand:V 2 \"vector_merge_operand\"      \"    0,    vu,   vu0,   vu0,   vu0\")))]\n+\t  (match_operand:V 2 \"vector_merge_operand\"      \"    0,    vu,    vu,   vu0,   vu0\")))]\n   \"TARGET_VECTOR\"\n   \"@\n    vle<sew>.v\\t%0,%3%p1\n@@ -683,6 +683,25 @@\n   [(set_attr \"type\" \"vlde,vlde,vste,vimov,vimov\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n+;; Dedicated pattern for vse.v instruction since we can't reuse pred_mov pattern to include\n+;; memory operand as input which will produce inferior codegen.\n+(define_insn \"@pred_store<mode>\"\n+  [(set (match_operand:V 0 \"memory_operand\"                 \"+m\")\n+\t(if_then_else:V\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\" \"vmWc1\")\n+\t     (match_operand 3 \"vector_length_operand\"    \"   rK\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (match_operand:V 2 \"register_operand\"         \"    vr\")\n+\t  (match_dup 0)))]\n+  \"TARGET_VECTOR\"\n+  \"vse<sew>.v\\t%2,%0%p1\"\n+  [(set_attr \"type\" \"vste\")\n+   (set_attr \"mode\" \"<MODE>\")\n+   (set (attr \"avl_type\") (symbol_ref \"riscv_vector::NONVLMAX\"))\n+   (set_attr \"vl_op_idx\" \"3\")])\n+\n ;; vlm.v/vsm.v/vmclr.m/vmset.m.\n ;; constraint alternative 0 match vlm.v.\n ;; constraint alternative 1 match vsm.v."}, {"sha": "5b8b9b41c7b3063ea76ff3194978bbad135ea195", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vse-constraint-1.c", "status": "added", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/856eec0d6b65c7b28b4b6c4fd6ccc10f2f6a22b1/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvse-constraint-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/856eec0d6b65c7b28b4b6c4fd6ccc10f2f6a22b1/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvse-constraint-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvse-constraint-1.c?ref=856eec0d6b65c7b28b4b6c4fd6ccc10f2f6a22b1", "patch": "@@ -0,0 +1,97 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (int * restrict in, int * restrict out, void * restrict mask_in, int n)\n+{\n+  vfloat32mf2_t v = __riscv_vle32_v_f32mf2 ((float *)(in + 10000), 19);\n+  __riscv_vse32_v_f32mf2 ((float *)(out + 10000), v, 19);\n+  vbool64_t mask = *(vbool64_t*)mask_in;\n+  for (int i = 0; i < n; i++)\n+    {\n+      vint16mf2_t v1 = __riscv_vle16_v_i16mf2 ((int16_t *)(in + i + 1), 19);\n+      __riscv_vse16_v_i16mf2 ((int16_t *)(out + i + 1), v1, 19);\n+\n+      vint32mf2_t v2 = __riscv_vle32_v_i32mf2 ((int32_t *)(in + i + 2), 19);\n+      __riscv_vse32_v_i32mf2 ((int32_t *)(out + i + 2), v2, 19);\n+\n+      vint32mf2_t v3 = __riscv_vle32_v_i32mf2_tumu (mask, v2, (int32_t *)(in + i + 200), 13);\n+      __riscv_vse32_v_i32mf2 ((int32_t *)(out + i + 200), v3, 13);\n+\n+      vfloat64m1_t v4 = __riscv_vle64_v_f64m1_m (mask, (double *)(in + i + 300), 11);\n+      __riscv_vse64_v_f64m1 ((double *)(out + i + 300), v4, 11);\n+\n+      vfloat64m1_t v5 = __riscv_vle64_v_f64m1_tum (mask, v4, (double *)(in + i + 500), 11);\n+      __riscv_vse64_v_f64m1 ((double *)(out + i + 500), v5, 11);\n+\n+      vfloat64m1_t v6 = __riscv_vle64_v_f64m1_mu (mask, v5, (double *)(in + i + 600), 11);\n+      __riscv_vse64_v_f64m1_m (mask, (double *)(out + i + 600), v6, 11);\n+\n+      vuint8mf4_t v7 = __riscv_vle8_v_u8mf4 ((uint8_t *)(in + i + 700), 11);\n+      __riscv_vse8_v_u8mf4 ((uint8_t *)(out + i + 700), v7, 11);\n+    }\n+}\n+\n+void f2 (int * restrict in, int * restrict out, void * restrict mask_in, int n)\n+{\n+  vfloat32mf2_t v = __riscv_vle32_v_f32mf2 ((float *)(in + 10000), 19);\n+  __riscv_vse32_v_f32mf2 ((float *)(out + 10000), v, 19);\n+  vbool64_t mask = *(vbool64_t*)mask_in;\n+  for (int i = 0; i < n; i++)\n+    {\n+      vint16mf2_t v1 = __riscv_vle16_v_i16mf2 ((int16_t *)(in + i + 1), 19);\n+      __riscv_vse16_v_i16mf2 ((int16_t *)(out + i + 1), v1, 19);\n+\n+      vint32mf2_t v2 = __riscv_vle32_v_i32mf2 ((int32_t *)(in + i + 2), 19);\n+      __riscv_vse32_v_i32mf2 ((int32_t *)(out + i + 2), v2, 19);\n+\n+      vint32mf2_t v3 = __riscv_vle32_v_i32mf2_tumu (mask, v2, (int32_t *)(in + i + 200), 13);\n+      __riscv_vse32_v_i32mf2 ((int32_t *)(out + i + 200), v2, 13);\n+\n+      vfloat64m1_t v4 = __riscv_vle64_v_f64m1_m (mask, (double *)(in + i + 300), 11);\n+      __riscv_vse64_v_f64m1 ((double *)(out + i + 300), v4, 11);\n+\n+      vfloat64m1_t v5 = __riscv_vle64_v_f64m1_tum (mask, v4, (double *)(in + i + 500), 11);\n+      __riscv_vse64_v_f64m1 ((double *)(out + i + 500), v5, 11);\n+\n+      vfloat64m1_t v6 = __riscv_vle64_v_f64m1_mu (mask, v5, (double *)(in + i + 600), 11);\n+      __riscv_vse64_v_f64m1_m (mask, (double *)(out + i + 600), v6, 11);\n+\n+      vuint8mf4_t v7 = __riscv_vle8_v_u8mf4 ((uint8_t *)(in + i + 700), 11);\n+      __riscv_vse8_v_u8mf4 ((uint8_t *)(out + i + 700), v7, 11);\n+    }\n+}\n+\n+void f3 (int * restrict in, int * restrict out, void * restrict mask_in, int n)\n+{\n+  vfloat32mf2_t v = __riscv_vle32_v_f32mf2 ((float *)(in + 10000), 19);\n+  __riscv_vse32_v_f32mf2 ((float *)(out + 10000), v, 19);\n+  vbool64_t mask = *(vbool64_t*)mask_in;\n+  for (int i = 0; i < n; i++)\n+    {\n+      vint16mf2_t v1 = __riscv_vle16_v_i16mf2 ((int16_t *)(in + i + 1), 19);\n+      __riscv_vse16_v_i16mf2 ((int16_t *)(out + i + 1), v1, 19);\n+\n+      vint32mf2_t v2 = __riscv_vle32_v_i32mf2 ((int32_t *)(in + i + 2), 19);\n+      __riscv_vse32_v_i32mf2 ((int32_t *)(out + i + 2), v2, 19);\n+\n+      vint32mf2_t v3 = __riscv_vle32_v_i32mf2_tumu (mask, v2, (int32_t *)(in + i + 200), 13);\n+      *(vint32mf2_t*)(out + i + 200) = v3;\n+\n+      vfloat64m1_t v4 = __riscv_vle64_v_f64m1_m (mask, (double *)(in + i + 300), 11);\n+      __riscv_vse64_v_f64m1 ((double *)(out + i + 300), v4, 11);\n+\n+      vfloat64m1_t v5 = __riscv_vle64_v_f64m1_tum (mask, v4, (double *)(in + i + 500), 11);\n+      __riscv_vse64_v_f64m1 ((double *)(out + i + 500), v5, 11);\n+\n+      vfloat64m1_t v6 = __riscv_vle64_v_f64m1_mu (mask, v5, (double *)(in + i + 600), 11);\n+      __riscv_vse64_v_f64m1_m (mask, (double *)(out + i + 600), v6, 11);\n+\n+      vuint8mf4_t v7 = __riscv_vle8_v_u8mf4 ((uint8_t *)(in + i + 700), 11);\n+      __riscv_vse8_v_u8mf4 ((uint8_t *)(out + i + 700), v7, 11);\n+    }\n+}\n+\n+/* It should not have redundant vector register spills which produce csrr vlenb instructions allocate stack.  */\n+/* { dg-final { scan-assembler-not {csrr\\s+[a-x0-9]+,\\s*vlenb} } } */"}]}