{"sha": "c3167b004d64be32e926e053e83e34774ad0e2bd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzMxNjdiMDA0ZDY0YmUzMmU5MjZlMDUzZTgzZTM0Nzc0YWQwZTJiZA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2013-05-09T09:51:52Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2013-05-09T09:51:52Z"}, "message": "re PR lto/54095 (Unnecessary static variable renaming)\n\n\n\tPR lto/54095\n\t* symtab.c (insert_to_assembler_name_hash): Handle clones.\n\t(unlink_from_assembler_name_hash): Likewise.\n\t(symtab_prevail_in_asm_name_hash, symtab_register_node,\n\tsymtab_unregister_node, symtab_initialize_asm_name_hash,\n\tchange_decl_assembler_name): Update.\n\nFrom-SVN: r198736", "tree": {"sha": "f04563384b910cbbbd0ca88f6ed37cdb2cd3fcbf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f04563384b910cbbbd0ca88f6ed37cdb2cd3fcbf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c3167b004d64be32e926e053e83e34774ad0e2bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3167b004d64be32e926e053e83e34774ad0e2bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3167b004d64be32e926e053e83e34774ad0e2bd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3167b004d64be32e926e053e83e34774ad0e2bd/comments", "author": null, "committer": null, "parents": [{"sha": "12dc6974799424cb128bd3c25d2bcb1d9f5492c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12dc6974799424cb128bd3c25d2bcb1d9f5492c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12dc6974799424cb128bd3c25d2bcb1d9f5492c7"}], "stats": {"total": 49, "additions": 39, "deletions": 10}, "files": [{"sha": "94ed1690f8d828f2f47ddcfb97d8645da9be78a3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3167b004d64be32e926e053e83e34774ad0e2bd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3167b004d64be32e926e053e83e34774ad0e2bd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c3167b004d64be32e926e053e83e34774ad0e2bd", "patch": "@@ -1,3 +1,12 @@\n+2013-05-09  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR lto/54095\n+\t* symtab.c (insert_to_assembler_name_hash): Handle clones.\n+\t(unlink_from_assembler_name_hash): Likewise.\n+\t(symtab_prevail_in_asm_name_hash, symtab_register_node,\n+\tsymtab_unregister_node, symtab_initialize_asm_name_hash,\n+\tchange_decl_assembler_name): Update.\n+\n 2013-05-09  Sofiane Naci  <sofiane.naci@arm.com>\n \n \t* config/aarch64/aarch64.md: New movtf split."}, {"sha": "a474bfe96f0ac4fc8bfd2c9459d38f243c2a3e02", "filename": "gcc/symtab.c", "status": "modified", "additions": 30, "deletions": 10, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3167b004d64be32e926e053e83e34774ad0e2bd/gcc%2Fsymtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3167b004d64be32e926e053e83e34774ad0e2bd/gcc%2Fsymtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsymtab.c?ref=c3167b004d64be32e926e053e83e34774ad0e2bd", "patch": "@@ -102,7 +102,7 @@ eq_assembler_name (const void *p1, const void *p2)\n /* Insert NODE to assembler name hash.  */\n \n static void\n-insert_to_assembler_name_hash (symtab_node node)\n+insert_to_assembler_name_hash (symtab_node node, bool with_clones)\n {\n   if (is_a <varpool_node> (node) && DECL_HARD_REGISTER (node->symbol.decl))\n     return;\n@@ -111,6 +111,9 @@ insert_to_assembler_name_hash (symtab_node node)\n   if (assembler_name_hash)\n     {\n       void **aslot;\n+      struct cgraph_node *cnode;\n+      tree decl = node->symbol.decl;\n+\n       tree name = DECL_ASSEMBLER_NAME (node->symbol.decl);\n \n       aslot = htab_find_slot_with_hash (assembler_name_hash, name,\n@@ -121,17 +124,27 @@ insert_to_assembler_name_hash (symtab_node node)\n       if (*aslot != NULL)\n \t((symtab_node)*aslot)->symbol.previous_sharing_asm_name = node;\n       *aslot = node;\n+\n+      /* Update also possible inline clones sharing a decl.  */\n+      cnode = dyn_cast <cgraph_node> (node);\n+      if (cnode && cnode->clones && with_clones)\n+\tfor (cnode = cnode->clones; cnode; cnode = cnode->next_sibling_clone)\n+\t  if (cnode->symbol.decl == decl)\n+\t    insert_to_assembler_name_hash ((symtab_node) cnode, true);\n     }\n \n }\n \n /* Remove NODE from assembler name hash.  */\n \n static void\n-unlink_from_assembler_name_hash (symtab_node node)\n+unlink_from_assembler_name_hash (symtab_node node, bool with_clones)\n {\n   if (assembler_name_hash)\n     {\n+      struct cgraph_node *cnode;\n+      tree decl = node->symbol.decl;\n+\n       if (node->symbol.next_sharing_asm_name)\n \tnode->symbol.next_sharing_asm_name->symbol.previous_sharing_asm_name\n \t  = node->symbol.previous_sharing_asm_name;\n@@ -155,6 +168,13 @@ unlink_from_assembler_name_hash (symtab_node node)\n \t}\n       node->symbol.next_sharing_asm_name = NULL;\n       node->symbol.previous_sharing_asm_name = NULL;\n+\n+      /* Update also possible inline clones sharing a decl.  */\n+      cnode = dyn_cast <cgraph_node> (node);\n+      if (cnode && cnode->clones && with_clones)\n+\tfor (cnode = cnode->clones; cnode; cnode = cnode->next_sibling_clone)\n+\t  if (cnode->symbol.decl == decl)\n+\t    unlink_from_assembler_name_hash ((symtab_node) cnode, true);\n     }\n }\n \n@@ -163,8 +183,8 @@ unlink_from_assembler_name_hash (symtab_node node)\n void\n symtab_prevail_in_asm_name_hash (symtab_node node)\n {\n-  unlink_from_assembler_name_hash (node);\n-  insert_to_assembler_name_hash (node);\n+  unlink_from_assembler_name_hash (node, false);\n+  insert_to_assembler_name_hash (node, false);\n }\n \n \n@@ -196,7 +216,7 @@ symtab_register_node (symtab_node node)\n \n   /* Be sure to do this last; C++ FE might create new nodes via\n      DECL_ASSEMBLER_NAME langhook!  */\n-  insert_to_assembler_name_hash (node);\n+  insert_to_assembler_name_hash (node, false);\n }\n \n /* Make NODE to be the one symtab hash is pointing to.  Used when reshaping tree\n@@ -259,7 +279,7 @@ symtab_unregister_node (symtab_node node)\n       else\n \t*slot = replacement_node;\n     }\n-  unlink_from_assembler_name_hash (node);\n+  unlink_from_assembler_name_hash (node, false);\n }\n \n /* Return symbol table node associated with DECL, if any,\n@@ -312,7 +332,7 @@ symtab_initialize_asm_name_hash (void)\n \thtab_create_ggc (10, hash_node_by_assembler_name, eq_assembler_name,\n \t\t\t NULL);\n       FOR_EACH_SYMBOL (node)\n-\tinsert_to_assembler_name_hash (node);\n+\tinsert_to_assembler_name_hash (node, false);\n     }\n }\n \n@@ -355,22 +375,22 @@ change_decl_assembler_name (tree decl, tree name)\n     {\n       SET_DECL_ASSEMBLER_NAME (decl, name);\n       if (node)\n-\tinsert_to_assembler_name_hash (node);\n+\tinsert_to_assembler_name_hash (node, true);\n     }\n   else\n     {\n       if (name == DECL_ASSEMBLER_NAME (decl))\n \treturn;\n \n       if (node)\n-\tunlink_from_assembler_name_hash (node);\n+\tunlink_from_assembler_name_hash (node, true);\n       if (TREE_SYMBOL_REFERENCED (DECL_ASSEMBLER_NAME (decl))\n \t  && DECL_RTL_SET_P (decl))\n \twarning (0, \"%D renamed after being referenced in assembly\", decl);\n \n       SET_DECL_ASSEMBLER_NAME (decl, name);\n       if (node)\n-\tinsert_to_assembler_name_hash (node);\n+\tinsert_to_assembler_name_hash (node, true);\n     }\n }\n "}]}