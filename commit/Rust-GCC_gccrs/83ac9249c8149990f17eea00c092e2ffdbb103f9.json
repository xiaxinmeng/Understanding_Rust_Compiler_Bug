{"sha": "83ac9249c8149990f17eea00c092e2ffdbb103f9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODNhYzkyNDljODE0OTk5MGYxN2VlYTAwYzA5MmUyZmZkYmIxMDNmOQ==", "commit": {"author": {"name": "Ed Smith-Rowland", "email": "3dw4rd@verizon.net", "date": "2013-06-08T22:37:50Z"}, "committer": {"name": "Edward Smith-Rowland", "email": "emsr@gcc.gnu.org", "date": "2013-06-08T22:37:50Z"}, "message": "Implement N3654 - Quoted Strings Library Proposal\n\n2013-06-08  Ed Smith-Rowland  <3dw4rd@verizon.net>\n\n\tImplement N3654 - Quoted Strings Library Proposal\n\t* include/std/iomanip: Add quoted(String, Char delim, Char escape)\n\tmanipulators and supporting machinery in c++1y mode.\n\t* testsuite/27_io/manipulators/standard/char/quoted.cc: New.\n\t* testsuite/27_io/manipulators/standard/wchar_t/quoted.cc: New.\n\nFrom-SVN: r199860", "tree": {"sha": "2f5574e46f254c45a03ef70f1d5a43fe6b4b78fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2f5574e46f254c45a03ef70f1d5a43fe6b4b78fc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/83ac9249c8149990f17eea00c092e2ffdbb103f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83ac9249c8149990f17eea00c092e2ffdbb103f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83ac9249c8149990f17eea00c092e2ffdbb103f9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83ac9249c8149990f17eea00c092e2ffdbb103f9/comments", "author": {"login": "emsr", "id": 1936479, "node_id": "MDQ6VXNlcjE5MzY0Nzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1936479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emsr", "html_url": "https://github.com/emsr", "followers_url": "https://api.github.com/users/emsr/followers", "following_url": "https://api.github.com/users/emsr/following{/other_user}", "gists_url": "https://api.github.com/users/emsr/gists{/gist_id}", "starred_url": "https://api.github.com/users/emsr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emsr/subscriptions", "organizations_url": "https://api.github.com/users/emsr/orgs", "repos_url": "https://api.github.com/users/emsr/repos", "events_url": "https://api.github.com/users/emsr/events{/privacy}", "received_events_url": "https://api.github.com/users/emsr/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ed52a84e3ffde82c52557d0f027488d9fe69563f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed52a84e3ffde82c52557d0f027488d9fe69563f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed52a84e3ffde82c52557d0f027488d9fe69563f"}], "stats": {"total": 339, "additions": 338, "deletions": 1}, "files": [{"sha": "deb7ae2c336b1c584e9064ead62957771d1aefe6", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83ac9249c8149990f17eea00c092e2ffdbb103f9/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83ac9249c8149990f17eea00c092e2ffdbb103f9/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=83ac9249c8149990f17eea00c092e2ffdbb103f9", "patch": "@@ -1,3 +1,11 @@\n+2013-06-08  Ed Smith-Rowland  <3dw4rd@verizon.net>\n+\n+\tImplement N3654 - Quoted Strings Library Proposal\n+\t* include/std/iomanip: Add quoted(String, Char delim, Char escape)\n+\tmanipulators and supporting machinery in c++1y mode.\n+\t* testsuite/27_io/manipulators/standard/char/quoted.cc: New.\n+\t* testsuite/27_io/manipulators/standard/wchar_t/quoted.cc: New.\n+\n 2013-06-08  Jonathan Wakely  <jwakely.gcc@gmail.com>\n \n \t* include/bits/alloc_traits.h (allocator_traits::max_size()): LWG"}, {"sha": "47284e82a5a669b58c9b2dd30f7e901bf1f9cc8e", "filename": "libstdc++-v3/include/std/iomanip", "status": "modified", "additions": 154, "deletions": 1, "changes": 155, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83ac9249c8149990f17eea00c092e2ffdbb103f9/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fiomanip", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83ac9249c8149990f17eea00c092e2ffdbb103f9/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fiomanip", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fiomanip?ref=83ac9249c8149990f17eea00c092e2ffdbb103f9", "patch": "@@ -334,7 +334,160 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return __os; \n     }\n \n-#endif\n+#if __cplusplus > 201103L\n+\n+  namespace __detail {\n+\n+    /**\n+     * @brief Struct for delimited strings.\n+     *        The left and right delimiters can be different.\n+     */\n+    template<typename _String, typename _CharT>\n+      struct _Quoted_string\n+      {\n+\tstatic_assert(is_reference<_String>::value\n+\t\t   || is_pointer<_String>::value,\n+\t\t      \"String type must be pointer or reference\");\n+\n+\t_Quoted_string(_String __str, _CharT __del, _CharT __esc)\n+\t: _M_string(__str), _M_delim{__del}, _M_escape{__esc}\n+\t{ }\n+\n+\t_Quoted_string&\n+\toperator=(_Quoted_string&) = delete;\n+\n+\t_String _M_string;\n+\t_CharT _M_delim;\n+\t_CharT _M_escape;\n+      };\n+\n+    /**\n+     * @brief Inserter for delimited strings.\n+     *        The left and right delimiters can be different.\n+     */\n+    template<typename _CharT, typename _Traits>\n+      auto&\n+      operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n+\t\t const _Quoted_string<const _CharT*, _CharT>& __str)\n+      {\n+\t__os << __str._M_delim;\n+\tfor (const _CharT* __c = __str._M_string; *__c; ++__c)\n+\t  {\n+\t    if (*__c == __str._M_delim || *__c == __str._M_escape)\n+\t      __os << __str._M_escape;\n+\t    __os << *__c;\n+\t  }\n+\t__os << __str._M_delim;\n+\n+\treturn __os;\n+      }\n+\n+    /**\n+     * @brief Inserter for delimited strings.\n+     *        The left and right delimiters can be different.\n+     */\n+    template<typename _CharT, typename _Traits, typename _String>\n+      auto&\n+      operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n+\t\t const _Quoted_string<_String, _CharT>& __str)\n+      {\n+\t__os << __str._M_delim;\n+\tfor (auto& __c : __str._M_string)\n+\t  {\n+\t    if (__c == __str._M_delim || __c == __str._M_escape)\n+\t      __os << __str._M_escape;\n+\t    __os << __c;\n+\t  }\n+\t__os << __str._M_delim;\n+\n+\treturn __os;\n+      }\n+\n+    /**\n+     * @brief Extractor for delimited strings.\n+     *        The left and right delimiters can be different.\n+     */\n+    template<typename _CharT, typename _Traits, typename _Alloc>\n+      auto&\n+      operator>>(std::basic_istream<_CharT, _Traits>& __is,\n+\t\t const _Quoted_string<basic_string<_CharT, _Traits, _Alloc>&,\n+\t\t\t\t      _CharT>& __str)\n+      {\n+\t__str._M_string.clear();\n+\n+\t_CharT __c;\n+\t__is >> __c;\n+\tif (!__is.good())\n+\t  return __is;\n+\tif (__c != __str._M_delim)\n+\t  {\n+\t    __is.unget();\n+\t    __is >> __str._M_string;\n+\t    return __is;\n+\t  }\n+\tstd::ios_base::fmtflags __flags\n+\t  = __is.flags(__is.flags() & ~std::ios_base::skipws);\n+\tdo\n+\t  {\n+\t    __is >> __c;\n+\t    if (!__is.good())\n+\t      break;\n+\t    if (__c == __str._M_escape)\n+\t      {\n+\t\t__is >> __c;\n+\t\tif (!__is.good())\n+\t\t  break;\n+\t      }\n+\t    else if (__c == __str._M_delim)\n+\t      break;\n+\t    __str._M_string += __c;\n+\t  }\n+\twhile (true);\n+\t__is.setf(__flags);\n+\n+\treturn __is;\n+      }\n+\n+  } // namespace __detail\n+\n+  /**\n+   * @brief Manipulator for quoted strings.\n+   * @param __str    String to quote.\n+   * @param __delim  Character to quote string with.\n+   * @param __escape Escape character to escape itself or quote character.\n+   */\n+  template<typename _CharT>\n+    inline auto\n+    quoted(const _CharT* __string,\n+\t   _CharT __delim = _CharT('\"'), _CharT __escape = _CharT('\\\\'))\n+    {\n+      return __detail::_Quoted_string<const _CharT*, _CharT>(__string, __delim,\n+\t\t\t\t\t\t\t     __escape);\n+    }\n+\n+  template<typename _CharT, typename _Traits, typename _Alloc>\n+    inline auto\n+    quoted(const basic_string<_CharT, _Traits, _Alloc>& __string,\n+\t   _CharT __delim = _CharT('\"'), _CharT __escape = _CharT('\\\\'))\n+    {\n+      return __detail::_Quoted_string<\n+\t\t\tconst basic_string<_CharT, _Traits, _Alloc>&, _CharT>(\n+\t\t\t\t__string, __delim, __escape);\n+    }\n+\n+  template<typename _CharT, typename _Traits, typename _Alloc>\n+    inline auto\n+    quoted(basic_string<_CharT, _Traits, _Alloc>& __string,\n+\t   _CharT __delim = _CharT('\"'), _CharT __escape = _CharT('\\\\'))\n+    {\n+      return __detail::_Quoted_string<\n+\t\t\tbasic_string<_CharT, _Traits, _Alloc>&, _CharT>(\n+\t\t\t\t__string, __delim, __escape);\n+    }\n+\n+#endif // __cplusplus > 201103L\n+\n+#endif // __cplusplus >= 201103L\n \n   // Inhibit implicit instantiations for required instantiations,\n   // which are defined via explicit instantiations elsewhere.  "}, {"sha": "bcfae1e3977074a8b973db0f547acf530449c0dd", "filename": "libstdc++-v3/testsuite/27_io/manipulators/standard/char/quoted.cc", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83ac9249c8149990f17eea00c092e2ffdbb103f9/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fmanipulators%2Fstandard%2Fchar%2Fquoted.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83ac9249c8149990f17eea00c092e2ffdbb103f9/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fmanipulators%2Fstandard%2Fchar%2Fquoted.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fmanipulators%2Fstandard%2Fchar%2Fquoted.cc?ref=83ac9249c8149990f17eea00c092e2ffdbb103f9", "patch": "@@ -0,0 +1,88 @@\n+// { dg-do run }\n+// { dg-options \"-std=gnu++1y\" }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 27.7.6 - Quoted manipulators\t\t[quoted.manip]\n+\n+#include <string>\n+#include <sstream>\n+#include <iomanip>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  //  Basic test from paper.\n+  bool test [[gnu::unused]] = true;\n+  std::stringstream ss;\n+  std::string original = \"foolish me\";\n+  std::string round_trip;\n+  ss << std::quoted(original);\n+  ss >> std::quoted(round_trip);\n+  VERIFY( original == round_trip );\n+}\n+\n+void\n+test02()\n+{\n+  //  Test skipws correctness.\n+  bool test [[gnu::unused]] = true;\n+  std::stringstream ss;\n+  ss << std::quoted(\"Hello Goodbye\") << ' ' << 1 << ' ' << 2;\n+  std::string song;\n+  int thing1, thing2;\n+  ss >> std::quoted(song) >> thing1 >> thing2;\n+  VERIFY( song == \"Hello Goodbye\" );\n+  VERIFY( thing1 == 1 );\n+  VERIFY( thing2 == 2 );\n+}\n+\n+void\n+test03()\n+{\n+  //  Test read of unquoted string.\n+  bool test [[gnu::unused]] = true;\n+  std::stringstream ss;\n+  ss << \"Alpha Omega\";\n+  std::string testit;\n+  ss >> std::quoted(testit);\n+  VERIFY( testit == \"Alpha\" );\n+}\n+\n+auto\n+test04(const std::string& message)\n+{\n+  //  Test 'const basic_string&'\n+  bool test [[gnu::unused]] = true;\n+  std::stringstream ss;\n+  ss << \"**  Error: \" << std::quoted(message) << \"  **\";\n+  return ss.str();\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+  auto ss = test04(\"My biscuits are burnin'!\");\n+  VERIFY( ss == \"**  Error: \\\"My biscuits are burnin'!\\\"  **\" );\n+\n+  return 0;\n+}"}, {"sha": "ac4e0fb65e06bfe9fea7646c701c2e611bb57290", "filename": "libstdc++-v3/testsuite/27_io/manipulators/standard/wchar_t/quoted.cc", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83ac9249c8149990f17eea00c092e2ffdbb103f9/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fmanipulators%2Fstandard%2Fwchar_t%2Fquoted.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83ac9249c8149990f17eea00c092e2ffdbb103f9/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fmanipulators%2Fstandard%2Fwchar_t%2Fquoted.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fmanipulators%2Fstandard%2Fwchar_t%2Fquoted.cc?ref=83ac9249c8149990f17eea00c092e2ffdbb103f9", "patch": "@@ -0,0 +1,88 @@\n+// { dg-do run }\n+// { dg-options \"-std=gnu++1y\" }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 27.7.6 - Quoted manipulators\t\t[quoted.manip]\n+\n+#include <string>\n+#include <sstream>\n+#include <iomanip>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  //  Basic test from paper.\n+  bool test [[gnu::unused]] = true;\n+  std::wstringstream ss;\n+  std::wstring original = L\"foolish me\";\n+  std::wstring round_trip;\n+  ss << std::quoted(original);\n+  ss >> std::quoted(round_trip);\n+  VERIFY( original == round_trip );\n+}\n+\n+void\n+test02()\n+{\n+  //  Test skipws correctness.\n+  bool test [[gnu::unused]] = true;\n+  std::wstringstream ss;\n+  ss << std::quoted(L\"Hello Goodbye\") << L' ' << 1 << L' ' << 2;\n+  std::wstring song;\n+  int thing1, thing2;\n+  ss >> std::quoted(song) >> thing1 >> thing2;\n+  VERIFY( song == L\"Hello Goodbye\" );\n+  VERIFY( thing1 == 1 );\n+  VERIFY( thing2 == 2 );\n+}\n+\n+void\n+test03()\n+{\n+  //  Test read of unquoted string.\n+  bool test [[gnu::unused]] = true;\n+  std::wstringstream ss;\n+  ss << L\"Alpha Omega\";\n+  std::wstring testit;\n+  ss >> std::quoted(testit);\n+  VERIFY( testit == L\"Alpha\" );\n+}\n+\n+auto\n+test04(const std::wstring& message)\n+{\n+  //  Test 'const basic_string&'\n+  bool test [[gnu::unused]] = true;\n+  std::wstringstream ss;\n+  ss << L\"**  Error: \" << std::quoted(message) << L\"  **\";\n+  return ss.str();\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+  auto ss = test04(L\"My biscuits are burnin'!\");\n+  VERIFY( ss == L\"**  Error: \\\"My biscuits are burnin'!\\\"  **\" );\n+\n+  return 0;\n+}"}]}