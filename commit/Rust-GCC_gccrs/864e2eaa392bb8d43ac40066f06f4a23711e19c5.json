{"sha": "864e2eaa392bb8d43ac40066f06f4a23711e19c5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODY0ZTJlYWEzOTJiYjhkNDNhYzQwMDY2ZjA2ZjRhMjM3MTFlMTljNQ==", "commit": {"author": {"name": "Claudiu Zissulescu", "email": "claziss@synopsys.com", "date": "2019-03-18T09:28:11Z"}, "committer": {"name": "Claudiu Zissulescu", "email": "claziss@gcc.gnu.org", "date": "2019-03-18T09:28:11Z"}, "message": "[ARC] Introduce ADJUST_REG_ALLOC_ORDER.\n\nThe ARC port is changing the allocation order in the\narc_conditional_register_usage function, but this is not the proper\nway. Thus, we employ ADJUST_REG_ALLOC_ORDER hook for this task.\n\ngcc/\nxxxx-xx-xx  Claudiu Zissulescu  <claziss@synopsys.com>\n\n\t* config/arc/arc-protos.h (arc_adjust_reg_alloc_order): Declare.\n\t* config/arc/arc.c (arc_conditional_register_usage): Remove all\n\treg_alloc_order references.\n\t(size_alloc_order): Define.\n\t(arc_adjust_reg_alloc_order): New function.\n\t* config/arc/arc.h (REG_ALLOC_ORDER): Proper define the register\n\torder.\n\t(ADJUST_REG_ALLOC_ORDER): Define.\n\t(HONOR_REG_ALLOC_ORDER): Likewise.\n\nFrom-SVN: r269755", "tree": {"sha": "761f993336bfd40221cbc378d7243d81dc893023", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/761f993336bfd40221cbc378d7243d81dc893023"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/864e2eaa392bb8d43ac40066f06f4a23711e19c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/864e2eaa392bb8d43ac40066f06f4a23711e19c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/864e2eaa392bb8d43ac40066f06f4a23711e19c5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/864e2eaa392bb8d43ac40066f06f4a23711e19c5/comments", "author": {"login": "claziss", "id": 2761368, "node_id": "MDQ6VXNlcjI3NjEzNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/2761368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/claziss", "html_url": "https://github.com/claziss", "followers_url": "https://api.github.com/users/claziss/followers", "following_url": "https://api.github.com/users/claziss/following{/other_user}", "gists_url": "https://api.github.com/users/claziss/gists{/gist_id}", "starred_url": "https://api.github.com/users/claziss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/claziss/subscriptions", "organizations_url": "https://api.github.com/users/claziss/orgs", "repos_url": "https://api.github.com/users/claziss/repos", "events_url": "https://api.github.com/users/claziss/events{/privacy}", "received_events_url": "https://api.github.com/users/claziss/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7d7d1ce83889ee17fbf7fb8aadf23e1f5179b9ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d7d1ce83889ee17fbf7fb8aadf23e1f5179b9ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d7d1ce83889ee17fbf7fb8aadf23e1f5179b9ce"}], "stats": {"total": 113, "additions": 59, "deletions": 54}, "files": [{"sha": "6c82a61633da3268d4d40a64faede85be7eaad5f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/864e2eaa392bb8d43ac40066f06f4a23711e19c5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/864e2eaa392bb8d43ac40066f06f4a23711e19c5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=864e2eaa392bb8d43ac40066f06f4a23711e19c5", "patch": "@@ -1,3 +1,15 @@\n+2019-03-18  Claudiu Zissulescu  <claziss@synopsys.com>\n+\n+\t* config/arc/arc-protos.h (arc_adjust_reg_alloc_order): Declare.\n+\t* config/arc/arc.c (arc_conditional_register_usage): Remove all\n+\treg_alloc_order references.\n+\t(size_alloc_order): Define.\n+\t(arc_adjust_reg_alloc_order): New function.\n+\t* config/arc/arc.h (REG_ALLOC_ORDER): Proper define the register\n+\torder.\n+\t(ADJUST_REG_ALLOC_ORDER): Define.\n+\t(HONOR_REG_ALLOC_ORDER): Likewise.\n+\n 2019-03-18  Richard Biener  <rguenther@suse.de>\n \n \tPR target/87561"}, {"sha": "8f0f197f14a0137bac251f1f2f73a08031069e1d", "filename": "gcc/config/arc/arc-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/864e2eaa392bb8d43ac40066f06f4a23711e19c5/gcc%2Fconfig%2Farc%2Farc-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/864e2eaa392bb8d43ac40066f06f4a23711e19c5/gcc%2Fconfig%2Farc%2Farc-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc-protos.h?ref=864e2eaa392bb8d43ac40066f06f4a23711e19c5", "patch": "@@ -47,6 +47,7 @@ extern unsigned int arc_compute_function_type (struct function *);\n extern bool arc_is_uncached_mem_p (rtx);\n extern bool gen_operands_ldd_std (rtx *operands, bool load, bool commute);\n extern bool arc_check_multi (rtx, bool);\n+extern void arc_adjust_reg_alloc_order (void);\n #endif /* RTX_CODE */\n \n extern unsigned int arc_compute_frame_size (int);"}, {"sha": "e2eaaa437893e013287489f1cda539af9b90b76e", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 19, "deletions": 48, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/864e2eaa392bb8d43ac40066f06f4a23711e19c5/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/864e2eaa392bb8d43ac40066f06f4a23711e19c5/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=864e2eaa392bb8d43ac40066f06f4a23711e19c5", "patch": "@@ -1806,54 +1806,6 @@ arc_conditional_register_usage (void)\n \twarning (0, \"multiply option implies r%d is fixed\", regno);\n       fixed_regs [regno] = call_used_regs[regno] = 1;\n     }\n-  if (TARGET_Q_CLASS)\n-    {\n-      if (optimize_size)\n-\t{\n-\t  reg_alloc_order[0] = 0;\n-\t  reg_alloc_order[1] = 1;\n-\t  reg_alloc_order[2] = 2;\n-\t  reg_alloc_order[3] = 3;\n-\t  reg_alloc_order[4] = 12;\n-\t  reg_alloc_order[5] = 13;\n-\t  reg_alloc_order[6] = 14;\n-\t  reg_alloc_order[7] = 15;\n-\t  reg_alloc_order[8] = 4;\n-\t  reg_alloc_order[9] = 5;\n-\t  reg_alloc_order[10] = 6;\n-\t  reg_alloc_order[11] = 7;\n-\t  reg_alloc_order[12] = 8;\n-\t  reg_alloc_order[13] = 9;\n-\t  reg_alloc_order[14] = 10;\n-\t  reg_alloc_order[15] = 11;\n-\t}\n-      else\n-\t{\n-\t  reg_alloc_order[2] = 12;\n-\t  reg_alloc_order[3] = 13;\n-\t  reg_alloc_order[4] = 14;\n-\t  reg_alloc_order[5] = 15;\n-\t  reg_alloc_order[6] = 1;\n-\t  reg_alloc_order[7] = 0;\n-\t  reg_alloc_order[8] = 4;\n-\t  reg_alloc_order[9] = 5;\n-\t  reg_alloc_order[10] = 6;\n-\t  reg_alloc_order[11] = 7;\n-\t  reg_alloc_order[12] = 8;\n-\t  reg_alloc_order[13] = 9;\n-\t  reg_alloc_order[14] = 10;\n-\t  reg_alloc_order[15] = 11;\n-\t}\n-    }\n-  if (TARGET_SIMD_SET)\n-    {\n-      int i;\n-      for (i = ARC_FIRST_SIMD_VR_REG; i <= ARC_LAST_SIMD_VR_REG; i++)\n-\treg_alloc_order [i] = i;\n-      for (i = ARC_FIRST_SIMD_DMA_CONFIG_REG;\n-\t   i <= ARC_LAST_SIMD_DMA_CONFIG_REG; i++)\n-\treg_alloc_order [i] = i;\n-    }\n \n   /* Reduced configuration: don't use r4-r9, r16-r25.  */\n   if (TARGET_RF16)\n@@ -11404,6 +11356,25 @@ gen_operands_ldd_std (rtx *operands, bool load, bool commute)\n   return false;\n }\n \n+/* This order of allocation is used when we compile for size.  It\n+   allocates first the registers which are most probably to end up in\n+   a short instruction.  */\n+static const int size_alloc_order[] =\n+{\n+ 0, 1, 2, 3, 12, 13, 14, 15,\n+ 4, 5, 6, 7, 8, 9, 10, 11\n+};\n+\n+/* Adjust register allocation order when compiling for size.  */\n+void\n+arc_adjust_reg_alloc_order (void)\n+{\n+  const int arc_default_alloc_order[] = REG_ALLOC_ORDER;\n+  memcpy (reg_alloc_order, arc_default_alloc_order, sizeof (reg_alloc_order));\n+  if (optimize_size)\n+    memcpy (reg_alloc_order, size_alloc_order, sizeof (size_alloc_order));\n+}\n+\n #undef TARGET_USE_ANCHORS_FOR_SYMBOL_P\n #define TARGET_USE_ANCHORS_FOR_SYMBOL_P arc_use_anchors_for_symbol_p\n "}, {"sha": "8ed469a64144723c9de889515ce71b4c056d3226", "filename": "gcc/config/arc/arc.h", "status": "modified", "additions": 27, "deletions": 6, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/864e2eaa392bb8d43ac40066f06f4a23711e19c5/gcc%2Fconfig%2Farc%2Farc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/864e2eaa392bb8d43ac40066f06f4a23711e19c5/gcc%2Fconfig%2Farc%2Farc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.h?ref=864e2eaa392bb8d43ac40066f06f4a23711e19c5", "patch": "@@ -361,7 +361,6 @@ if (GET_MODE_CLASS (MODE) == MODE_INT\t\t\\\n \n    By default, the extension registers are not available.  */\n /* Present implementations only have VR0-VR23 only.  */\n-/* ??? FIXME: r27 and r31 should not be fixed registers.  */\n #define FIXED_REGISTERS \\\n { 0, 0, 0, 0, 0, 0, 0, 0,\t\\\n   0, 0, 0, 0, 0, 0, 0, 0,\t\\\n@@ -422,12 +421,34 @@ if (GET_MODE_CLASS (MODE) == MODE_INT\t\t\\\n /* If defined, an initializer for a vector of integers, containing the\n    numbers of hard registers in the order in which GCC should\n    prefer to use them (from most preferred to least).  */\n-#define REG_ALLOC_ORDER \\\n-{ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0, 1,\t\t\t\\\n-  16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, \t\t\t\t\\\n+#define REG_ALLOC_ORDER\t\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  /* General registers.  */\t\t\t\t\t\t\\\n+  2, 3, 12, 13, 14, 15, 1, 0, 4, 5, 6, 7, 8, 9, 10, 11,\t\t\t\\\n+  16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30,\t\t\t\\\n+  /* Extension core registers.  */\t\t\t\t\t\\\n   32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\t\\\n-  48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62,\t\t\\\n-  27, 28, 29, 30, 31, 63}\n+  48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\t\t\t\\\n+  /* VR regs.  */\t\t\t\t\t\t\t\\\n+  64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\t\\\n+  80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95,\t\\\n+  96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109,\t\\\n+  110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, \\\n+  124, 125, 126, 127,\t\t\t\t\t\t\t\\\n+  /* DMA registers.  */\t\t\t\t\t\t\t\\\n+  128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, \\\n+  142, 143,\t\t\t\t\t\t\t\t\\\n+  /* Register not used for general use.  */\t\t\t\t\\\n+  62, FRAME_POINTER_REGNUM, ARG_POINTER_REGNUM,\t\t\t\t\\\n+  SP_REG, ILINK1_REG, RETURN_ADDR_REGNUM, LP_COUNT, CC_REG, PCL_REG\t\\\n+}\n+\n+/* Use different register alloc ordering for Thumb.  */\n+#define ADJUST_REG_ALLOC_ORDER arc_adjust_reg_alloc_order ()\n+\n+/* Tell IRA to use the order we define rather than messing it up with its\n+   own cost calculations.  */\n+#define HONOR_REG_ALLOC_ORDER 1\n \n /* Internal macros to classify a register number as to whether it's a\n    general purpose register for compact insns (r0-r3,r12-r15), or"}]}