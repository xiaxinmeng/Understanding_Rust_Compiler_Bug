{"sha": "01850a764f2740773a3c922d3689c1a42c787d5c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDE4NTBhNzY0ZjI3NDA3NzNhM2M5MjJkMzY4OWMxYTQyYzc4N2Q1Yw==", "commit": {"author": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2012-10-30T09:22:14Z"}, "committer": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2012-10-30T09:22:14Z"}, "message": "re PR target/54963 (Wrong code generated for libgfortran/generated/eoshift3_8.c on SH)\n\n\tPR target/54963\n\t* config/sh/iterators.md (SIDI): New mode iterator.\n\t* config/sh/sh.md (negdi2): Use parallel around operation and T_REG\n\tclobber in expander.\n\t(*negdi2): Mark output operand as early clobbered.  Add T_REG clobber.\n\tSplit after reload.  Simplify split code.\n\t(abssi2, absdi2): Fold expanders into abs<mode>2.\n\t(*abssi2, *absdi2): Fold into *abs<mode>2 insn_and_split.  Split insns\n\tbefore reload.\n\t(*negabssi2, *negabsdi2): Fold into *negabs<mode>2.  Add T_REG clobber.\n\tSplit insns before reload.\n\t(negsi_cond): Reformat.  Use emit_move_insn instead of\n\tgen_movesi.\n\t(negdi_cond): Reformat.  Use emit_move_insn instead of a pair\n\tof gen_movsi.  Split insn before reload.\n\nFrom-SVN: r192983", "tree": {"sha": "223ada87e201e092ef44466c8d35c61788daeea6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/223ada87e201e092ef44466c8d35c61788daeea6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/01850a764f2740773a3c922d3689c1a42c787d5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01850a764f2740773a3c922d3689c1a42c787d5c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01850a764f2740773a3c922d3689c1a42c787d5c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01850a764f2740773a3c922d3689c1a42c787d5c/comments", "author": null, "committer": null, "parents": [{"sha": "197ddd06a0f70f89b2ffc376592d4e9318a9596a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/197ddd06a0f70f89b2ffc376592d4e9318a9596a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/197ddd06a0f70f89b2ffc376592d4e9318a9596a"}], "stats": {"total": 176, "additions": 84, "deletions": 92}, "files": [{"sha": "137e6a3b3732f153d50e2ba3aea1e303d745abbe", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01850a764f2740773a3c922d3689c1a42c787d5c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01850a764f2740773a3c922d3689c1a42c787d5c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=01850a764f2740773a3c922d3689c1a42c787d5c", "patch": "@@ -1,3 +1,21 @@\n+2012-10-30  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\tPR target/54963\n+\t* config/sh/iterators.md (SIDI): New mode iterator.\n+\t* config/sh/sh.md (negdi2): Use parallel around operation and T_REG\n+\tclobber in expander.\n+\t(*negdi2): Mark output operand as early clobbered.  Add T_REG clobber.\n+\tSplit after reload.  Simplify split code.\n+\t(abssi2, absdi2): Fold expanders into abs<mode>2.\n+\t(*abssi2, *absdi2): Fold into *abs<mode>2 insn_and_split.  Split insns\n+\tbefore reload.\n+\t(*negabssi2, *negabsdi2): Fold into *negabs<mode>2.  Add T_REG clobber.\n+\tSplit insns before reload.\n+\t(negsi_cond): Reformat.  Use emit_move_insn instead of\n+\tgen_movesi.\n+\t(negdi_cond): Reformat.  Use emit_move_insn instead of a pair\n+\tof gen_movsi.  Split insn before reload.\n+\n 2012-10-30  Oleg Endo  <olegendo@gcc.gnu.org>\n \n \tPR target/54988"}, {"sha": "ab6143f5386075a5d0a3be2fd998e682c7f877d6", "filename": "gcc/config/sh/iterators.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01850a764f2740773a3c922d3689c1a42c787d5c/gcc%2Fconfig%2Fsh%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01850a764f2740773a3c922d3689c1a42c787d5c/gcc%2Fconfig%2Fsh%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fiterators.md?ref=01850a764f2740773a3c922d3689c1a42c787d5c", "patch": "@@ -22,6 +22,7 @@\n (define_mode_iterator QIHISI [QI HI SI])\n (define_mode_iterator QIHI [QI HI])\n (define_mode_iterator HISI [HI SI])\n+(define_mode_iterator SIDI [SI DI])\n \n ;; Mode attributes that can be used as the instruction suffix for mode\n ;; variant instructions."}, {"sha": "bfb4fbf459a5132b74e25ffe5c30187bfd0dfaea", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 65, "deletions": 92, "changes": 157, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01850a764f2740773a3c922d3689c1a42c787d5c/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01850a764f2740773a3c922d3689c1a42c787d5c/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=01850a764f2740773a3c922d3689c1a42c787d5c", "patch": "@@ -5203,28 +5203,25 @@ label:\n ;; Don't expand immediately because otherwise neg:DI (abs:DI) will not be\n ;; combined.\n (define_expand \"negdi2\"\n-  [(set (match_operand:DI 0 \"arith_reg_dest\" \"\")\n-\t(neg:DI (match_operand:DI 1 \"arith_reg_operand\" \"\")))\n-   (clobber (reg:SI T_REG))]\n-  \"TARGET_SH1\"\n-  \"\")\n+  [(parallel [(set (match_operand:DI 0 \"arith_reg_dest\")\n+\t\t   (neg:DI (match_operand:DI 1 \"arith_reg_operand\")))\n+\t      (clobber (reg:SI T_REG))])]\n+  \"TARGET_SH1\")\n \n (define_insn_and_split \"*negdi2\"\n-  [(set (match_operand:DI 0 \"arith_reg_dest\" \"=r\")\n-\t(neg:DI (match_operand:DI 1 \"arith_reg_operand\" \"r\")))]\n+  [(set (match_operand:DI 0 \"arith_reg_dest\" \"=&r\")\n+\t(neg:DI (match_operand:DI 1 \"arith_reg_operand\" \"r\")))\n+   (clobber (reg:SI T_REG))]\n   \"TARGET_SH1\"\n   \"#\"\n-  \"TARGET_SH1\"\n+  \"&& reload_completed\"\n   [(const_int 0)]\n {\n-  rtx low_src = gen_lowpart (SImode, operands[1]);\n-  rtx high_src = gen_highpart (SImode, operands[1]);\n-  rtx low_dst = gen_lowpart (SImode, operands[0]);\n-  rtx high_dst = gen_highpart (SImode, operands[0]);\n-\n   emit_insn (gen_clrt ());\n-  emit_insn (gen_negc (low_dst, low_src));\n-  emit_insn (gen_negc (high_dst, high_src));\n+  emit_insn (gen_negc (gen_lowpart (SImode, operands[0]),\n+\t\t       gen_lowpart (SImode, operands[1])));\n+  emit_insn (gen_negc (gen_highpart (SImode, operands[0]),\n+\t\t       gen_highpart (SImode, operands[1])));\n   DONE;\n })\n \n@@ -5298,38 +5295,53 @@ label:\n \t\t(const_int -1)))]\n   \"TARGET_SHMEDIA\" \"\")\n \n-(define_expand \"abssi2\"\n-  [(set (match_operand:SI 0 \"arith_reg_dest\" \"\")\n-  \t(abs:SI (match_operand:SI 1 \"arith_reg_operand\" \"\")))\n-   (clobber (reg:SI T_REG))]\n-  \"TARGET_SH1\"\n-  \"\")\n+(define_expand \"abs<mode>2\"\n+  [(parallel [(set (match_operand:SIDI 0 \"arith_reg_dest\")\n+\t\t   (abs:SIDI (match_operand:SIDI 1 \"arith_reg_operand\")))\n+\t      (clobber (reg:SI T_REG))])]\n+  \"TARGET_SH1\")\n \n-(define_insn_and_split \"*abssi2\"\n-  [(set (match_operand:SI 0 \"arith_reg_dest\" \"=r\")\n-  \t(abs:SI (match_operand:SI 1 \"arith_reg_operand\" \"r\")))]\n+(define_insn_and_split \"*abs<mode>2\"\n+  [(set (match_operand:SIDI 0 \"arith_reg_dest\")\n+  \t(abs:SIDI (match_operand:SIDI 1 \"arith_reg_operand\")))\n+   (clobber (reg:SI T_REG))]\n   \"TARGET_SH1\"\n   \"#\"\n-  \"TARGET_SH1\"\n+  \"&& can_create_pseudo_p ()\"\n   [(const_int 0)]\n {\n-  emit_insn (gen_cmpgesi_t (operands[1], const0_rtx));\n-  emit_insn (gen_negsi_cond (operands[0], operands[1], operands[1],\n-\t\t const1_rtx));\n+  if (<MODE>mode == SImode)\n+    emit_insn (gen_cmpgesi_t (operands[1], const0_rtx));\n+  else\n+    {\n+      rtx high_src = gen_highpart (SImode, operands[1]);\n+      emit_insn (gen_cmpgesi_t (high_src, const0_rtx));\n+    }\n+\n+  emit_insn (gen_neg<mode>_cond (operands[0], operands[1], operands[1],\n+\t\t\t\t const1_rtx));\n   DONE;\n })\n \n-(define_insn_and_split \"*negabssi2\"\n-  [(set (match_operand:SI 0 \"arith_reg_dest\" \"=r\")\n-  \t(neg:SI (abs:SI (match_operand:SI 1 \"arith_reg_operand\" \"r\"))))]\n+(define_insn_and_split \"*negabs<mode>2\"\n+  [(set (match_operand:SIDI 0 \"arith_reg_dest\")\n+\t(neg:SIDI (abs:SIDI (match_operand:SIDI 1 \"arith_reg_operand\"))))\n+   (clobber (reg:SI T_REG))]\n   \"TARGET_SH1\"\n   \"#\"\n-  \"TARGET_SH1\"\n+  \"&& can_create_pseudo_p ()\"\n   [(const_int 0)]\n {\n-  emit_insn (gen_cmpgesi_t (operands[1], const0_rtx));\n-  emit_insn (gen_negsi_cond (operands[0], operands[1], operands[1],\n-\t\t const0_rtx));\n+  if (<MODE>mode == SImode)\n+    emit_insn (gen_cmpgesi_t (operands[1], const0_rtx));\n+  else\n+    {\n+      rtx high_src = gen_highpart (SImode, operands[1]);\n+      emit_insn (gen_cmpgesi_t (high_src, const0_rtx));\n+    }\n+\n+  emit_insn (gen_neg<mode>_cond (operands[0], operands[1], operands[1],\n+\t\t\t\t const0_rtx));\n   DONE;\n })\n \n@@ -5342,10 +5354,10 @@ label:\n \n (define_insn_and_split \"negsi_cond\"\n   [(set (match_operand:SI 0 \"arith_reg_dest\" \"=r,r\")\n-\t(if_then_else:SI (eq:SI (reg:SI T_REG)\n-\t\t\t  (match_operand:SI 3 \"const_int_operand\" \"M,N\"))\n-\t (match_operand:SI 1 \"arith_reg_operand\" \"0,0\")\n-\t (neg:SI (match_operand:SI 2 \"arith_reg_operand\" \"r,r\"))))]\n+\t(if_then_else\n+\t  (eq:SI (reg:SI T_REG) (match_operand:SI 3 \"const_int_operand\" \"M,N\"))\n+\t  (match_operand:SI 1 \"arith_reg_operand\" \"0,0\")\n+\t  (neg:SI (match_operand:SI 2 \"arith_reg_operand\" \"r,r\"))))]\n   \"TARGET_SH1 && TARGET_ZDCBRANCH\"\n {\n   static const char* alt[] =\n@@ -5365,7 +5377,7 @@ label:\n {\n   rtx skip_neg_label = gen_label_rtx ();\n \n-  emit_insn (gen_movsi (operands[0], operands[1]));\n+  emit_move_insn (operands[0], operands[1]);\n \n   emit_jump_insn (INTVAL (operands[3])\n \t\t  ? gen_branch_true (skip_neg_label)\n@@ -5378,63 +5390,21 @@ label:\n   [(set_attr \"type\" \"arith\") ;; poor approximation\n    (set_attr \"length\" \"4\")])\n \n-(define_expand \"absdi2\"\n-  [(set (match_operand:DI 0 \"arith_reg_dest\" \"\")\n-\t(abs:DI (match_operand:DI 1 \"arith_reg_operand\" \"\")))\n-   (clobber (reg:SI T_REG))]\n-  \"TARGET_SH1\"\n-  \"\")\n-\n-(define_insn_and_split \"*absdi2\"\n-  [(set (match_operand:DI 0 \"arith_reg_dest\" \"=r\")\n-\t(abs:DI (match_operand:DI 1 \"arith_reg_operand\" \"r\")))]\n-  \"TARGET_SH1\"\n-  \"#\"\n-  \"&& reload_completed\"\n-  [(const_int 0)]\n-{\n-  rtx high_src = gen_highpart (SImode, operands[1]);\n-  emit_insn (gen_cmpgesi_t (high_src, const0_rtx));\n-  emit_insn (gen_negdi_cond (operands[0], operands[1], operands[1],\n-\t\t\t     const1_rtx));\n-  DONE;\n-})\n-\n-(define_insn_and_split \"*negabsdi2\"\n-  [(set (match_operand:DI 0 \"arith_reg_dest\" \"=r\")\n-  \t(neg:DI (abs:DI (match_operand:DI 1 \"arith_reg_operand\" \"r\"))))]\n-  \"TARGET_SH1\"\n-  \"#\"\n-  \"&& reload_completed\"\n-  [(const_int 0)]\n-{\n-  rtx high_src = gen_highpart (SImode, operands[1]);\n-  emit_insn (gen_cmpgesi_t (high_src, const0_rtx));\n-  emit_insn (gen_negdi_cond (operands[0], operands[1], operands[1],\n-\t\t\t     const0_rtx));\n-  DONE;\n-})\n-\n (define_insn_and_split \"negdi_cond\"\n-  [(set (match_operand:DI 0 \"arith_reg_dest\" \"=r,r\")\n-\t(if_then_else:DI (eq:SI (reg:SI T_REG)\n-\t\t\t\t(match_operand:SI 3 \"const_int_operand\" \"M,N\"))\n-\t (match_operand:DI 1 \"arith_reg_operand\" \"r,r\")\n-\t (neg:DI (match_operand:DI 2 \"arith_reg_operand\" \"1,1\"))))]\n+  [(set (match_operand:DI 0 \"arith_reg_dest\")\n+\t(if_then_else\n+\t  (eq:SI (reg:SI T_REG) (match_operand:SI 3 \"const_int_operand\"))\n+\t  (match_operand:DI 1 \"arith_reg_operand\")\n+\t  (neg:DI (match_operand:DI 2 \"arith_reg_operand\"))))\n+   (clobber (reg:SI T_REG))]\n   \"TARGET_SH1\"\n   \"#\"\n-  \"TARGET_SH1\"\n+  \"&& can_create_pseudo_p ()\"\n   [(const_int 0)]\n {\n-  rtx low_src = gen_lowpart (SImode, operands[1]);\n-  rtx high_src = gen_highpart (SImode, operands[1]);\n-  rtx low_dst = gen_lowpart (SImode, operands[0]);\n-  rtx high_dst = gen_highpart (SImode, operands[0]);\n-\n   rtx skip_neg_label = gen_label_rtx ();\n \n-  emit_insn (gen_movsi (low_dst, low_src));\n-  emit_insn (gen_movsi (high_dst, high_src));\n+  emit_move_insn (operands[0], operands[1]);\n \n   emit_jump_insn (INTVAL (operands[3]) \n \t\t  ? gen_branch_true (skip_neg_label)\n@@ -5443,8 +5413,11 @@ label:\n   if (!INTVAL (operands[3]))\n     emit_insn (gen_clrt ());\n \n-  emit_insn (gen_negc (low_dst, low_src));\n-  emit_label_after (skip_neg_label, emit_insn (gen_negc (high_dst, high_src)));\n+  emit_insn (gen_negc (gen_lowpart (SImode, operands[0]),\n+\t\t       gen_lowpart (SImode, operands[1])));\n+  emit_label_after (skip_neg_label,\n+\t\t    emit_insn (gen_negc (gen_highpart (SImode, operands[0]),\n+\t\t\t\t\t gen_highpart (SImode, operands[1]))));\n   DONE;\n })\n "}]}