{"sha": "a2419b9670586c6d01b07fa6d653c14ba2a9dd7b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTI0MTliOTY3MDU4NmM2ZDAxYjA3ZmE2ZDY1M2MxNGJhMmE5ZGQ3Yg==", "commit": {"author": {"name": "David Edelsohn", "email": "edelsohn@gnu.org", "date": "2002-10-09T20:54:05Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2002-10-09T20:54:05Z"}, "message": "rs6000.md (extenddftf2): Change to define_insn which copies first FPR and clears second.\n\n        * config/rs6000/rs6000.md (extenddftf2): Change to define_insn\n        which copies first FPR and clears second.\n        (extendsftf2): Same.\n        (floatditf2): Fix typo.\n        (floatsitf2): Same.\n        (fix_trunctfdi2): Same.\n        (fix_trunctfsi2): Same.\n\nFrom-SVN: r57990", "tree": {"sha": "c7d51d31ff98d9e2100e653630f9dacf0bdbc040", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c7d51d31ff98d9e2100e653630f9dacf0bdbc040"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a2419b9670586c6d01b07fa6d653c14ba2a9dd7b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2419b9670586c6d01b07fa6d653c14ba2a9dd7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2419b9670586c6d01b07fa6d653c14ba2a9dd7b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2419b9670586c6d01b07fa6d653c14ba2a9dd7b/comments", "author": null, "committer": null, "parents": [{"sha": "fb7e6024db53e6e658bde922399e7e94930f25d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb7e6024db53e6e658bde922399e7e94930f25d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb7e6024db53e6e658bde922399e7e94930f25d3"}], "stats": {"total": 78, "additions": 45, "deletions": 33}, "files": [{"sha": "4492c111c8ae6deac1119afc34b65f704cf9fafa", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2419b9670586c6d01b07fa6d653c14ba2a9dd7b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2419b9670586c6d01b07fa6d653c14ba2a9dd7b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a2419b9670586c6d01b07fa6d653c14ba2a9dd7b", "patch": "@@ -1,3 +1,13 @@\n+2002-10-09  David Edelsohn  <edelsohn@gnu.org>\n+\n+\t* config/rs6000/rs6000.md (extenddftf2): Change to define_insn\n+\twhich copies first FPR and clears second.\n+\t(extendsftf2): Same.\n+\t(floatditf2): Fix typo.\n+\t(floatsitf2): Same.\n+\t(fix_trunctfdi2): Same.\n+\t(fix_trunctfsi2): Same.\n+\n 2002-10-09  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* conflict.c (arc_hash): Change return type to hashval_t."}, {"sha": "bc89259d0e711b861aea6d342a98a89af64a39d3", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 35, "deletions": 33, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2419b9670586c6d01b07fa6d653c14ba2a9dd7b/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2419b9670586c6d01b07fa6d653c14ba2a9dd7b/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=a2419b9670586c6d01b07fa6d653c14ba2a9dd7b", "patch": "@@ -8516,8 +8516,8 @@\n   operands[2] = gen_lowpart (DImode, operands[0]);\n   /* HIGHPART is lower memory address when WORDS_BIG_ENDIAN.  */\n #if HOST_BITS_PER_WIDE_INT >= 64\n-  val = ((HOST_WIDE_INT)(unsigned long)l[endian] << 32 |\n-        ((HOST_WIDE_INT)(unsigned long)l[1 - endian]));\n+  val = ((HOST_WIDE_INT)(unsigned long)l[endian] << 32\n+         | ((HOST_WIDE_INT)(unsigned long)l[1 - endian]));\n \n   operands[3] = gen_int_mode (val, DImode);\n #else\n@@ -8797,46 +8797,46 @@\n   operands[2] = gen_lowpart (DImode, operands[0]);\n   operands[3] = gen_highpart (DImode, operands[0]);\n #if HOST_BITS_PER_WIDE_INT >= 64\n-  val = ((HOST_WIDE_INT)(unsigned long)l[0] << 32 |\n-        ((HOST_WIDE_INT)(unsigned long)l[1]));\n+  val = ((HOST_WIDE_INT)(unsigned long)l[0] << 32\n+         | ((HOST_WIDE_INT)(unsigned long)l[1]));\n   operands[4] = gen_int_mode (val, DImode);\n \n-  val = ((HOST_WIDE_INT)(unsigned long)l[2] << 32 |\n-        ((HOST_WIDE_INT)(unsigned long)l[3]));\n+  val = ((HOST_WIDE_INT)(unsigned long)l[2] << 32\n+         | ((HOST_WIDE_INT)(unsigned long)l[3]));\n   operands[5] = gen_int_mode (val, DImode);\n #else\n   operands[4] = immed_double_const (l[1], l[0], DImode);\n   operands[5] = immed_double_const (l[3], l[2], DImode);\n #endif\n }\")\n \n-(define_insn_and_split \"extenddftf2\"\n+(define_insn \"extenddftf2\"\n   [(set (match_operand:TF 0 \"gpc_reg_operand\" \"=f\")\n \t(float_extend:TF (match_operand:DF 1 \"gpc_reg_operand\" \"f\")))]\n   \"DEFAULT_ABI == ABI_AIX && TARGET_HARD_FLOAT && TARGET_FPRS\n    && TARGET_LONG_DOUBLE_128\"\n-  \"#\"\n-  \"\"\n-  [(set (match_dup 2) (match_dup 3))]\n-  \"\n+  \"*\n {\n-  operands[2] = gen_rtx_REG (DFmode, REGNO (operands[0] + 1));\n-  operands[3] = CONST0_RTX (DFmode);\n-}\")\n+  if (REGNO (operands[0]) == REGNO (operands[1]))\n+    return \\\"fsub %L0,%L0,%L0\\\";\n+  else\n+    return \\\"fmr %0,%1\\;fsub %L0,%L0,%L0\\\";\n+}\"\n+  [(set_attr \"type\" \"fp\")])\n \n-(define_insn_and_split \"extendsftf2\"\n+(define_insn \"extendsftf2\"\n   [(set (match_operand:TF 0 \"gpc_reg_operand\" \"=f\")\n \t(float_extend:TF (match_operand:SF 1 \"gpc_reg_operand\" \"f\")))]\n   \"DEFAULT_ABI == ABI_AIX && TARGET_HARD_FLOAT && TARGET_FPRS\n    && TARGET_LONG_DOUBLE_128\"\n-  \"#\"\n-  \"\"\n-  [(set (match_dup 2) (match_dup 3))]\n-  \"\n+  \"*\n {\n-  operands[2] = gen_rtx_REG (SFmode, REGNO (operands[0] + 1));\n-  operands[3] = CONST0_RTX (SFmode);\n-}\")\n+  if (REGNO (operands[0]) == REGNO (operands[1]))\n+    return \\\"fsub %L0,%L0,%L0\\\";\n+  else\n+    return \\\"fmr %0,%1\\;fsub %L0,%L0,%L0\\\";\n+}\"\n+  [(set_attr \"type\" \"fp\")])\n \n (define_insn \"trunctfdf2\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=f\")\n@@ -8870,8 +8870,8 @@\n   \"#\"\n   \"&& reload_completed\"\n   [(set (match_dup 2)\n-\t(float:DF (match_operand:DI 1 \"gpc_reg_operand\" \"\")))\n-   (set (match_operand:TF 0 \"gpc_reg_operand\" \"\")\n+\t(float:DF (match_dup 1)))\n+   (set (match_dup 0)\n \t(float_extend:TF (match_dup 2)))]\n   \"\")\n \n@@ -8884,34 +8884,36 @@\n   \"#\"\n   \"&& reload_completed\"\n   [(set (match_dup 2)\n-\t(float:DF (match_operand:SI 1 \"gpc_reg_operand\" \"\")))\n-   (set (match_operand:TF 0 \"gpc_reg_operand\" \"\")\n+\t(float:DF (match_dup 1)))\n+   (set (match_dup 0)\n \t(float_extend:TF (match_dup 2)))]\n   \"\")\n \n (define_insn_and_split \"fix_trunctfdi2\"\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=*f\")\n-        (fix:DI (match_operand:TF 1 \"gpc_reg_operand\" \"f\")))]\n+        (fix:DI (match_operand:TF 1 \"gpc_reg_operand\" \"f\")))\n+   (clobber (match_scratch:DF 2 \"=f\"))]\n   \"DEFAULT_ABI == ABI_AIX && TARGET_POWERPC64\n    && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_LONG_DOUBLE_128\"\n   \"#\"\n   \"&& reload_completed\"\n   [(set (match_dup 2)\n-\t(float_truncate:DF (match_operand:TF 1 \"gpc_reg_operand\" \"\")))\n-   (set (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n-\t(fix:SI (match_dup 2)))]\n+\t(float_truncate:DF (match_dup 1)))\n+   (set (match_dup 0)\n+\t(fix:DI (match_dup 2)))]\n   \"\")\n \n (define_insn_and_split \"fix_trunctfsi2\"\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n-        (fix:SI (match_operand:TF 1 \"gpc_reg_operand\" \"f\")))]\n+        (fix:SI (match_operand:TF 1 \"gpc_reg_operand\" \"f\")))\n+   (clobber (match_scratch:DF 2 \"=f\"))]\n   \"DEFAULT_ABI == ABI_AIX && TARGET_HARD_FLOAT && TARGET_FPRS\n    && TARGET_LONG_DOUBLE_128\"\n   \"#\"\n   \"&& reload_completed\"\n   [(set (match_dup 2)\n-\t(float_truncate:DF (match_operand:TF 1 \"gpc_reg_operand\" \"\")))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n+\t(float_truncate:DF (match_dup 1)))\n+   (set (match_dup 0)\n \t(fix:SI (match_dup 2)))]\n   \"\")\n "}]}