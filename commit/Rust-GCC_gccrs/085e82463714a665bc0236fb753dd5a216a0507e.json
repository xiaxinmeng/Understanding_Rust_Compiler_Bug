{"sha": "085e82463714a665bc0236fb753dd5a216a0507e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDg1ZTgyNDYzNzE0YTY2NWJjMDIzNmZiNzUzZGQ1YTIxNmEwNTA3ZQ==", "commit": {"author": {"name": "Alan Hayward", "email": "alan.hayward@arm.com", "date": "2018-02-07T16:25:28Z"}, "committer": {"name": "Alan Hayward", "email": "alahay01@gcc.gnu.org", "date": "2018-02-07T16:25:28Z"}, "message": "Support >26 operands in generation code.\n\n2018-02-07  Alan Hayward  <alan.hayward@arm.com>\n\n        * genextract.c (push_pathstr_operand): New function to support [a-zA-Z].\n        (walk_rtx): Call push_pathstr_operand.\n        (print_path): Support [a-zA-Z].\n\nFrom-SVN: r257455", "tree": {"sha": "9ea7789ea3b4b8cdf80dd2f90cb6ffedea8c0277", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9ea7789ea3b4b8cdf80dd2f90cb6ffedea8c0277"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/085e82463714a665bc0236fb753dd5a216a0507e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/085e82463714a665bc0236fb753dd5a216a0507e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/085e82463714a665bc0236fb753dd5a216a0507e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/085e82463714a665bc0236fb753dd5a216a0507e/comments", "author": {"login": "a74nh", "id": 4146708, "node_id": "MDQ6VXNlcjQxNDY3MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/4146708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/a74nh", "html_url": "https://github.com/a74nh", "followers_url": "https://api.github.com/users/a74nh/followers", "following_url": "https://api.github.com/users/a74nh/following{/other_user}", "gists_url": "https://api.github.com/users/a74nh/gists{/gist_id}", "starred_url": "https://api.github.com/users/a74nh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/a74nh/subscriptions", "organizations_url": "https://api.github.com/users/a74nh/orgs", "repos_url": "https://api.github.com/users/a74nh/repos", "events_url": "https://api.github.com/users/a74nh/events{/privacy}", "received_events_url": "https://api.github.com/users/a74nh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "828ca2ed0bd81c6aeb6ec8e45e8f30c0441a382c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/828ca2ed0bd81c6aeb6ec8e45e8f30c0441a382c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/828ca2ed0bd81c6aeb6ec8e45e8f30c0441a382c"}], "stats": {"total": 51, "additions": 38, "deletions": 13}, "files": [{"sha": "bcd892c8b3c4792ea4031bffdc68a3e07000f3b2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/085e82463714a665bc0236fb753dd5a216a0507e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/085e82463714a665bc0236fb753dd5a216a0507e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=085e82463714a665bc0236fb753dd5a216a0507e", "patch": "@@ -1,3 +1,10 @@\n+2018-02-07  Alan Hayward  <alan.hayward@arm.com>\n+\n+\t* genextract.c (push_pathstr_operand): New function to support\n+\t[a-zA-Z].\n+\t(walk_rtx): Call push_pathstr_operand.\n+\t(print_path): Support [a-zA-Z].\n+\n 2018-02-07  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/84037"}, {"sha": "387184b4ae1681851cb62cc25f5caa1b69cbbde9", "filename": "gcc/genextract.c", "status": "modified", "additions": 31, "deletions": 13, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/085e82463714a665bc0236fb753dd5a216a0507e/gcc%2Fgenextract.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/085e82463714a665bc0236fb753dd5a216a0507e/gcc%2Fgenextract.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenextract.c?ref=085e82463714a665bc0236fb753dd5a216a0507e", "patch": "@@ -33,9 +33,10 @@ along with GCC; see the file COPYING3.  If not see\n \n    The string for each operand describes that path to the operand and\n    contains `0' through `9' when going into an expression and `a' through\n-   `z' when going into a vector.  We assume here that only the first operand\n-   of an rtl expression is a vector.  genrecog.c makes the same assumption\n-   (and uses the same representation) and it is currently true.  */\n+   `z' then 'A' through to 'Z' when going into a vector.  We assume here that\n+   only the first operand of an rtl expression is a vector.  genrecog.c makes\n+   the same assumption (and uses the same representation) and it is currently\n+   true.  */\n \n typedef char *locstr;\n \n@@ -80,6 +81,23 @@ struct accum_extract\n /* Forward declarations.  */\n static void walk_rtx (md_rtx_info *, rtx, struct accum_extract *);\n \n+#define UPPER_OFFSET ('A' - ('z' - 'a' + 1))\n+\n+/* Convert integer OPERAND into a character - either into [a-zA-Z] for vector\n+   operands or [0-9] for integer operands - and push onto the end of the path\n+   in ACC.  */\n+static void\n+push_pathstr_operand (int operand, bool is_vector,\n+\t\t     struct accum_extract *acc)\n+{\n+  if (is_vector && 'a' + operand > 'z')\n+    acc->pathstr.safe_push (operand + UPPER_OFFSET);\n+  else if (is_vector)\n+    acc->pathstr.safe_push (operand + 'a');\n+  else\n+    acc->pathstr.safe_push (operand + '0');\n+}\n+\n static void\n gen_insn (md_rtx_info *info)\n {\n@@ -98,7 +116,7 @@ gen_insn (md_rtx_info *info)\n   else\n     for (i = XVECLEN (insn, 1) - 1; i >= 0; i--)\n       {\n-\tacc.pathstr.safe_push ('a' + i);\n+\tpush_pathstr_operand (i, true, &acc);\n \twalk_rtx (info, XVECEXP (insn, 1, i), &acc);\n \tacc.pathstr.pop ();\n       }\n@@ -208,7 +226,7 @@ static void\n walk_rtx (md_rtx_info *info, rtx x, struct accum_extract *acc)\n {\n   RTX_CODE code;\n-  int i, len, base;\n+  int i, len;\n   const char *fmt;\n \n   if (x == 0)\n@@ -234,10 +252,9 @@ walk_rtx (md_rtx_info *info, rtx x, struct accum_extract *acc)\n       VEC_safe_set_locstr (info, &acc->oplocs, XINT (x, 0),\n \t\t\t   VEC_char_to_string (acc->pathstr));\n \n-      base = (code == MATCH_OPERATOR ? '0' : 'a');\n       for (i = XVECLEN (x, 2) - 1; i >= 0; i--)\n \t{\n-\t  acc->pathstr.safe_push (base + i);\n+\t  push_pathstr_operand (i, code != MATCH_OPERATOR, acc);\n \t  walk_rtx (info, XVECEXP (x, 2, i), acc);\n \t  acc->pathstr.pop ();\n         }\n@@ -252,10 +269,9 @@ walk_rtx (md_rtx_info *info, rtx x, struct accum_extract *acc)\n       if (code == MATCH_DUP)\n \tbreak;\n \n-      base = (code == MATCH_OP_DUP ? '0' : 'a');\n       for (i = XVECLEN (x, 1) - 1; i >= 0; i--)\n         {\n-\t  acc->pathstr.safe_push (base + i);\n+\t  push_pathstr_operand (i, code != MATCH_OP_DUP, acc);\n \t  walk_rtx (info, XVECEXP (x, 1, i), acc);\n \t  acc->pathstr.pop ();\n         }\n@@ -271,7 +287,7 @@ walk_rtx (md_rtx_info *info, rtx x, struct accum_extract *acc)\n     {\n       if (fmt[i] == 'e' || fmt[i] == 'u')\n \t{\n-\t  acc->pathstr.safe_push ('0' + i);\n+\t  push_pathstr_operand (i, false, acc);\n \t  walk_rtx (info, XEXP (x, i), acc);\n \t  acc->pathstr.pop ();\n \t}\n@@ -280,7 +296,7 @@ walk_rtx (md_rtx_info *info, rtx x, struct accum_extract *acc)\n \t  int j;\n \t  for (j = XVECLEN (x, i) - 1; j >= 0; j--)\n \t    {\n-\t      acc->pathstr.safe_push ('a' + j);\n+\t      push_pathstr_operand (j, true, acc);\n \t      walk_rtx (info, XVECEXP (x, i, j), acc);\n \t      acc->pathstr.pop ();\n \t    }\n@@ -311,7 +327,7 @@ print_path (const char *path)\n \n   for (i = len - 1; i >= 0 ; i--)\n     {\n-      if (ISLOWER (path[i]))\n+      if (ISLOWER (path[i]) || ISUPPER (path[i]))\n \tfputs (\"XVECEXP (\", stdout);\n       else if (ISDIGIT (path[i]))\n \tfputs (\"XEXP (\", stdout);\n@@ -323,7 +339,9 @@ print_path (const char *path)\n \n   for (i = 0; i < len; i++)\n     {\n-      if (ISLOWER (path[i]))\n+      if (ISUPPER (path[i]))\n+\tprintf (\", 0, %d)\", path[i] - UPPER_OFFSET);\n+      else if (ISLOWER (path[i]))\n \tprintf (\", 0, %d)\", path[i] - 'a');\n       else if (ISDIGIT (path[i]))\n \tprintf (\", %d)\", path[i] - '0');"}]}