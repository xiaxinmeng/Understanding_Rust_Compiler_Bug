{"sha": "061a745005d69e44d6ff50e3ee7fd5b21194c6ac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDYxYTc0NTAwNWQ2OWU0NGQ2ZmY1MGUzZWU3ZmQ1YjIxMTk0YzZhYw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-06-06T12:13:42Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-06-06T12:13:42Z"}, "message": "Fix tests that fail with -std=gnu++98 or -std=gnu++11\n\n\t* testsuite/18_support/set_terminate.cc: Do not run for C++98 mode.\n\t* testsuite/18_support/set_unexpected.cc: Likewise.\n\t* testsuite/20_util/is_nothrow_invocable/value.cc: Test converting to\n\tvoid.\n\t* testsuite/20_util/is_nothrow_invocable/value_ext.cc: Fix constexpr\n\tfunction to be valid in C++11.\n\t* testsuite/26_numerics/complex/proj.cc: Do not run for C++98 mode.\n\t* testsuite/experimental/names.cc: Do not run for C++98 mode. Do not\n\tinclude Library Fundamentals or Networking headers in C++11 mode.\n\t* testsuite/ext/char8_t/atomic-1.cc: Do not run for C++98 mode.\n\nFrom-SVN: r271999", "tree": {"sha": "28359b4cfc5857210d78d24ea95e8ce988f4a995", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/28359b4cfc5857210d78d24ea95e8ce988f4a995"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/061a745005d69e44d6ff50e3ee7fd5b21194c6ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/061a745005d69e44d6ff50e3ee7fd5b21194c6ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/061a745005d69e44d6ff50e3ee7fd5b21194c6ac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/061a745005d69e44d6ff50e3ee7fd5b21194c6ac/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d355635e6b96d5d9e67a526b6dfd534cd9a9dd57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d355635e6b96d5d9e67a526b6dfd534cd9a9dd57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d355635e6b96d5d9e67a526b6dfd534cd9a9dd57"}], "stats": {"total": 54, "additions": 41, "deletions": 13}, "files": [{"sha": "283c6b9e057eb195d65aaa767b7dc11841c559e4", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/061a745005d69e44d6ff50e3ee7fd5b21194c6ac/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/061a745005d69e44d6ff50e3ee7fd5b21194c6ac/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=061a745005d69e44d6ff50e3ee7fd5b21194c6ac", "patch": "@@ -1,5 +1,16 @@\n 2019-06-06  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* testsuite/18_support/set_terminate.cc: Do not run for C++98 mode.\n+\t* testsuite/18_support/set_unexpected.cc: Likewise.\n+\t* testsuite/20_util/is_nothrow_invocable/value.cc: Test converting to\n+\tvoid.\n+\t* testsuite/20_util/is_nothrow_invocable/value_ext.cc: Fix constexpr\n+\tfunction to be valid in C++11.\n+\t* testsuite/26_numerics/complex/proj.cc: Do not run for C++98 mode.\n+\t* testsuite/experimental/names.cc: Do not run for C++98 mode. Do not\n+\tinclude Library Fundamentals or Networking headers in C++11 mode.\n+\t* testsuite/ext/char8_t/atomic-1.cc: Do not run for C++98 mode.\n+\n \t* include/std/tuple (_TC): Replace with _TupleConstraints.\n \t(_TupleConstraints): New helper for SFINAE constraints, with more\n \texpressive member functions to reduce duplication when used."}, {"sha": "81f182a7a762079630bafc851ec6d07a32e56aab", "filename": "libstdc++-v3/testsuite/18_support/set_terminate.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/061a745005d69e44d6ff50e3ee7fd5b21194c6ac/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fset_terminate.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/061a745005d69e44d6ff50e3ee7fd5b21194c6ac/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fset_terminate.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fset_terminate.cc?ref=061a745005d69e44d6ff50e3ee7fd5b21194c6ac", "patch": "@@ -15,6 +15,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n+// { dg-options \"-std=gnu++11\" }\n // { dg-do run }\n \n #include <exception>"}, {"sha": "7c3f3d44790bb48943da39d93830c4f95b04afe7", "filename": "libstdc++-v3/testsuite/18_support/set_unexpected.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/061a745005d69e44d6ff50e3ee7fd5b21194c6ac/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fset_unexpected.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/061a745005d69e44d6ff50e3ee7fd5b21194c6ac/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fset_unexpected.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fset_unexpected.cc?ref=061a745005d69e44d6ff50e3ee7fd5b21194c6ac", "patch": "@@ -15,7 +15,8 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// { dg-do run { target { c++98_only || { c++11_only || c++14_only } } } }\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do run { target { c++11_only || c++14_only } } }\n \n #include <exception>\n #include <testsuite_hooks.h>"}, {"sha": "c0c6a7dc8ea358cfc8c1c279e75671d76c8b397b", "filename": "libstdc++-v3/testsuite/20_util/is_nothrow_invocable/value.cc", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/061a745005d69e44d6ff50e3ee7fd5b21194c6ac/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_invocable%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/061a745005d69e44d6ff50e3ee7fd5b21194c6ac/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_invocable%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_invocable%2Fvalue.cc?ref=061a745005d69e44d6ff50e3ee7fd5b21194c6ac", "patch": "@@ -119,9 +119,11 @@ void test01()\n   static_assert( ! is_nt_invocable_r< T,     F  >(), \"call throws\");\n   static_assert( ! is_nt_invocable_r< NT,    F  >(), \"call throws\");\n   static_assert( ! is_nt_invocable_r< Ex,    F  >(), \"call throws\");\n+  static_assert( ! is_nt_invocable_r< void,  F  >(), \"call throws\");\n   static_assert( ! is_nt_invocable_r< T,     CF >(), \"conversion throws\");\n   static_assert(   is_nt_invocable_r< NT,    CF >(), \"\" );\n   static_assert( ! is_nt_invocable_r< Ex,    CF >(), \"conversion fails\");\n+  static_assert(   is_nt_invocable_r< void,  CF >(), \"\");\n \n   static_assert( ! is_nt_invocable< F,   int >(), \"call throws\");\n   static_assert(   is_nt_invocable< F&,  int >(), \"\");\n@@ -140,12 +142,14 @@ void test01()\n \n   static_assert(   is_nt_invocable_r< char&,  CF,  int >(), \"\");\n   static_assert(   is_nt_invocable_r< char&,  CF&, int >(), \"\");\n+  static_assert(   is_nt_invocable_r< void,   CF&, int >(), \"\");\n \n   static_assert( ! is_nt_invocable_r< T,      CF&, int >(),\n \t\t   \"conversion throws\");\n   static_assert(   is_nt_invocable_r< NT,     CF&, int >(), \"\");\n   static_assert( ! is_nt_invocable_r< Ex,     CF&, int >(),\n \t\t   \"conversion fails, would use explicit constructor\");\n+  static_assert(   is_nt_invocable_r< void,   CF&, int >(), \"\");\n \n   static_assert( ! is_nt_invocable< F, int, int >(),\n \t\t   \"would call private member\");\n@@ -157,6 +161,7 @@ void test01()\n   };\n   static_assert( is_nt_invocable< FX >(), \"FX::operator() is nothrow\" );\n   static_assert( is_nt_invocable_r<X, FX >(), \"no conversion needed\" );\n+  static_assert( is_nt_invocable_r<void, FX >(), \"\" );\n \n   struct Y {\n     explicit Y(X) noexcept; // not viable for implicit conversions"}, {"sha": "2c00b1fbe75d5e200c5b97717ed69bd584dc0d9f", "filename": "libstdc++-v3/testsuite/20_util/is_nothrow_invocable/value_ext.cc", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/061a745005d69e44d6ff50e3ee7fd5b21194c6ac/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_invocable%2Fvalue_ext.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/061a745005d69e44d6ff50e3ee7fd5b21194c6ac/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_invocable%2Fvalue_ext.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_invocable%2Fvalue_ext.cc?ref=061a745005d69e44d6ff50e3ee7fd5b21194c6ac", "patch": "@@ -24,19 +24,24 @@ template<typename... T>\n   { return std::__is_nothrow_invocable<T...>::value; }\n \n template<typename R, typename... T>\n-  constexpr bool is_nt_invocable_conv(std::true_type)\n+  struct ConvIsNothrow\n   {\n     using result_type = typename std::__invoke_result<T...>::type;\n+    static void test(std::true_type, R) noexcept;\n+    static void test(std::false_type, const result_type&);\n+    static constexpr bool value\n+      = noexcept(test(std::is_convertible<result_type, R>(),\n+\t\t      std::declval<result_type>()));\n+  };\n \n-    struct ConvIsNothrow\n-    {\n-      static void test(std::true_type, R) noexcept;\n-      static void test(std::false_type, const result_type&);\n-    };\n+template<typename... T>\n+  struct ConvIsNothrow<void, T...> : std::true_type\n+  { };\n \n-    return std::is_void<R>::value\n-      || noexcept(ConvIsNothrow::test(std::is_convertible<result_type, R>(),\n-\t\t\t\t      std::declval<result_type>()));\n+template<typename R, typename... T>\n+  constexpr bool is_nt_invocable_conv(std::true_type)\n+  {\n+    return ConvIsNothrow<R, T...>::value;\n   }\n \n template<typename R, typename... T>"}, {"sha": "64e0dec71292834b13281bb6f26ded3d591e15c5", "filename": "libstdc++-v3/testsuite/26_numerics/complex/proj.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/061a745005d69e44d6ff50e3ee7fd5b21194c6ac/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fcomplex%2Fproj.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/061a745005d69e44d6ff50e3ee7fd5b21194c6ac/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fcomplex%2Fproj.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fcomplex%2Fproj.cc?ref=061a745005d69e44d6ff50e3ee7fd5b21194c6ac", "patch": "@@ -15,7 +15,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// { dg-do run }\n+// { dg-do run { target c++11 } }\n \n #include <complex>\n #include <limits>"}, {"sha": "cfda34948af249a7e0ef9256ac56b2b45922b5c0", "filename": "libstdc++-v3/testsuite/experimental/names.cc", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/061a745005d69e44d6ff50e3ee7fd5b21194c6ac/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnames.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/061a745005d69e44d6ff50e3ee7fd5b21194c6ac/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnames.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnames.cc?ref=061a745005d69e44d6ff50e3ee7fd5b21194c6ac", "patch": "@@ -15,7 +15,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// { dg-do compile }\n+// { dg-do compile { target c++11 } }\n \n // Define macros for some common variables names that we must not use for\n // naming variables, parameters etc. in the library.\n@@ -25,6 +25,9 @@\n #if __has_include(<experimental/filesystem>)\n # include <experimental/filesystem>\n #endif\n+\n+#if __cplusplus >= 201402L\n+\n // Library Fundamentals\n #include <experimental/algorithm>\n #include <experimental/any>\n@@ -66,3 +69,5 @@\n # include <experimental/timer>\n # include <experimental/executor>\n #endif\n+\n+#endif // C++14"}, {"sha": "0841aa3bb06555e8dcc7f607f27878a2c7ee9382", "filename": "libstdc++-v3/testsuite/ext/char8_t/atomic-1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/061a745005d69e44d6ff50e3ee7fd5b21194c6ac/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fchar8_t%2Fatomic-1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/061a745005d69e44d6ff50e3ee7fd5b21194c6ac/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fchar8_t%2Fatomic-1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fchar8_t%2Fatomic-1.cc?ref=061a745005d69e44d6ff50e3ee7fd5b21194c6ac", "patch": "@@ -1,6 +1,6 @@\n // Test that char8_t related atomic types and macros are not present when\n // -fchar8_t is not enabled.\n-// { dg-do compile }\n+// { dg-do compile { target c++11 } }\n // { dg-options \"-fno-char8_t\" }\n \n #include <atomic>"}]}