{"sha": "7ab8aa36203ef49ae94f239ca6b148ac99922e46", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2FiOGFhMzYyMDNlZjQ5YWU5NGYyMzljYTZiMTQ4YWM5OTkyMmU0Ng==", "commit": {"author": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2007-03-18T18:13:50Z"}, "committer": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2007-03-18T18:13:50Z"}, "message": "re PR libfortran/31052 ([4.2 only] Bad IOSTAT values when readings NAMELISTs past EOF)\n\n2007-03-18  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n\n\tPR libgfortran/31052\n\t* io/file_position (st_rewind): Fix comments. Remove use of\n\ttest_endfile. Don't seek if already at 0 position.  Use new is_special\n\tfunction to set endfile state.\n\t* io/open.c (test_endfile): Delete this function.\n\t* io/io.h: Delete prototype for test_endfile.  Add prototype\n\tfor is_special.\n\t* io/unix.c (is_special): New function. Fix whitespace.\n\t* io/transfer.c (next_record_r): Remove use of test_endfile.\n\nFrom-SVN: r123038", "tree": {"sha": "871476a5899e38bd7a956355df12cf05c6dd4f79", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/871476a5899e38bd7a956355df12cf05c6dd4f79"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7ab8aa36203ef49ae94f239ca6b148ac99922e46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ab8aa36203ef49ae94f239ca6b148ac99922e46", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ab8aa36203ef49ae94f239ca6b148ac99922e46", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ab8aa36203ef49ae94f239ca6b148ac99922e46/comments", "author": null, "committer": null, "parents": [{"sha": "7453378e3d16d7b048668ec46ab93f7bb9043308", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7453378e3d16d7b048668ec46ab93f7bb9043308", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7453378e3d16d7b048668ec46ab93f7bb9043308"}], "stats": {"total": 80, "additions": 43, "deletions": 37}, "files": [{"sha": "6512c687d84c9ec4076c00ee7f245d050dfc34ed", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ab8aa36203ef49ae94f239ca6b148ac99922e46/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ab8aa36203ef49ae94f239ca6b148ac99922e46/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=7ab8aa36203ef49ae94f239ca6b148ac99922e46", "patch": "@@ -1,3 +1,15 @@\n+2007-03-18  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n+\n+\tPR libgfortran/31052\n+\t* io/file_position (st_rewind): Fix comments. Remove use of\n+\ttest_endfile. Don't seek if already at 0 position.  Use new is_special\n+\tfunction to set endfile state.\n+\t* io/open.c (test_endfile): Delete this function.\n+\t* io/io.h: Delete prototype for test_endfile.  Add prototype\n+\tfor is_special.\n+\t* io/unix.c (is_special): New function. Fix whitespace.\n+\t* io/transfer.c (next_record_r): Remove use of test_endfile.\n+\n 2007-03-16  David Edelsohn  <edelsohn@gnu.org>\n \n \t* runtime/main.c: Include \"config.h\" first."}, {"sha": "085921b04ccf60fb6bb425596e716c3b52750fb5", "filename": "libgfortran/io/file_pos.c", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ab8aa36203ef49ae94f239ca6b148ac99922e46/libgfortran%2Fio%2Ffile_pos.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ab8aa36203ef49ae94f239ca6b148ac99922e46/libgfortran%2Fio%2Ffile_pos.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Ffile_pos.c?ref=7ab8aa36203ef49ae94f239ca6b148ac99922e46", "patch": "@@ -306,14 +306,27 @@ st_rewind (st_parameter_filepos *fpp)\n \n \t  u->mode = READING;\n \t  u->last_record = 0;\n-\t  if (sseek (u->s, 0) == FAILURE)\n+\n+\t  if (file_position (u->s) != 0 && sseek (u->s, 0) == FAILURE)\n \t    generate_error (&fpp->common, ERROR_OS, NULL);\n \n-\t  u->endfile = NO_ENDFILE;\n+\t  /* Handle special files like /dev/null differently.  */\n+\t  if (!is_special (u->s))\n+\t    {\n+\t      /* We are rewinding so we are not at the end.  */\n+\t      u->endfile = NO_ENDFILE;\n+\t    }\n+\t  else\n+\t    {\n+\t      /* Set this for compatibilty with g77 for /dev/null.  */\n+\t      if (file_length (u->s) == 0  && file_position (u->s) == 0)\n+\t\tu->endfile = AT_ENDFILE;\n+\t      /* Future refinements on special files can go here.  */\n+\t    }\n+\n \t  u->current_record = 0;\n \t  u->strm_pos = 1;\n \t  u->read_bad = 0;\n-\t  test_endfile (u);\n \t}\n       /* Update position for INQUIRE.  */\n       u->flags.position = POSITION_REWIND;"}, {"sha": "3ec9506abda2a5c9b018b8780b51353b35cabc12", "filename": "libgfortran/io/io.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ab8aa36203ef49ae94f239ca6b148ac99922e46/libgfortran%2Fio%2Fio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ab8aa36203ef49ae94f239ca6b148ac99922e46/libgfortran%2Fio%2Fio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fio.h?ref=7ab8aa36203ef49ae94f239ca6b148ac99922e46", "patch": "@@ -622,6 +622,9 @@ internal_proto(file_position);\n extern int is_seekable (stream *);\n internal_proto(is_seekable);\n \n+extern int is_special (stream *);\n+internal_proto(is_special);\n+\n extern int is_preconnected (stream *);\n internal_proto(is_preconnected);\n \n@@ -691,9 +694,6 @@ internal_proto(unlock_unit);\n \n /* open.c */\n \n-extern void test_endfile (gfc_unit *);\n-internal_proto(test_endfile);\n-\n extern gfc_unit *new_unit (st_parameter_open *, gfc_unit *, unit_flags *);\n internal_proto(new_unit);\n "}, {"sha": "d22663d9d057642c5bba115f34f452141bbd5770", "filename": "libgfortran/io/open.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ab8aa36203ef49ae94f239ca6b148ac99922e46/libgfortran%2Fio%2Fopen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ab8aa36203ef49ae94f239ca6b148ac99922e46/libgfortran%2Fio%2Fopen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fopen.c?ref=7ab8aa36203ef49ae94f239ca6b148ac99922e46", "patch": "@@ -109,19 +109,6 @@ static const st_option convert_opt[] =\n   { NULL, 0}\n };\n \n-/* Given a unit, test to see if the file is positioned at the terminal\n-   point, and if so, change state from NO_ENDFILE flag to AT_ENDFILE.\n-   This prevents us from changing the state from AFTER_ENDFILE to\n-   AT_ENDFILE.  */\n-\n-void\n-test_endfile (gfc_unit * u)\n-{\n-  if (u->endfile == NO_ENDFILE && file_length (u->s) == file_position (u->s))\n-    u->endfile = AT_ENDFILE;\n-}\n-\n-\n /* Change the modes of a file, those that are allowed * to be\n    changed.  */\n \n@@ -208,8 +195,6 @@ edit_modes (st_parameter_open *opp, gfc_unit * u, unit_flags * flags)\n \n       u->current_record = 0;\n       u->last_record = 0;\n-\n-      test_endfile (u);\t\t/* We might be at the end.  */\n       break;\n \n     case POSITION_APPEND:\n@@ -486,13 +471,6 @@ new_unit (st_parameter_open *opp, gfc_unit *u, unit_flags * flags)\n   memmove (u->file, opp->file, opp->file_len);\n   u->file_len = opp->file_len;\n \n-  /* Curiously, the standard requires that the\n-     position specifier be ignored for new files so a newly connected\n-     file starts out that the initial point.  We still need to figure\n-     out if the file is at the end or not.  */\n-\n-  test_endfile (u);\n-\n   if (flags->status == STATUS_SCRATCH && opp->file != NULL)\n     free_mem (opp->file);\n   return u;"}, {"sha": "efa788cda52731d68c55033be2e03d2e737542b0", "filename": "libgfortran/io/transfer.c", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ab8aa36203ef49ae94f239ca6b148ac99922e46/libgfortran%2Fio%2Ftransfer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ab8aa36203ef49ae94f239ca6b148ac99922e46/libgfortran%2Fio%2Ftransfer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Ftransfer.c?ref=7ab8aa36203ef49ae94f239ca6b148ac99922e46", "patch": "@@ -2222,9 +2222,6 @@ next_record_r (st_parameter_dt *dtp)\n \n       break;\n     }\n-\n-  if (dtp->u.p.current_unit->flags.access == ACCESS_SEQUENTIAL)\n-    test_endfile (dtp->u.p.current_unit);\n }\n \n \n@@ -2684,10 +2681,7 @@ st_read (st_parameter_dt *dtp)\n \n   data_transfer_init (dtp, 1);\n \n-  /* Handle complications dealing with the endfile record.  It is\n-     significant that this is the only place where ERROR_END is\n-     generated.  Reading an end of file elsewhere is either end of\n-     record or an I/O error. */\n+  /* Handle complications dealing with the endfile record. */\n \n   if (dtp->u.p.current_unit->flags.access == ACCESS_SEQUENTIAL)\n     switch (dtp->u.p.current_unit->endfile)"}, {"sha": "4b9d87f4ee8396d2d16b663c3bd865b7908f14dd", "filename": "libgfortran/io/unix.c", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ab8aa36203ef49ae94f239ca6b148ac99922e46/libgfortran%2Fio%2Funix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ab8aa36203ef49ae94f239ca6b148ac99922e46/libgfortran%2Fio%2Funix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Funix.c?ref=7ab8aa36203ef49ae94f239ca6b148ac99922e46", "patch": "@@ -1872,7 +1872,7 @@ file_length (stream * s)\n /* file_position()-- Return the current position of the file */\n \n gfc_offset\n-file_position (stream * s)\n+file_position (stream *s)\n {\n   return ((unix_stream *) s)->logical_offset;\n }\n@@ -1882,13 +1882,22 @@ file_position (stream * s)\n  * it is not */\n \n int\n-is_seekable (stream * s)\n+is_seekable (stream *s)\n {\n   /* By convention, if file_length == -1, the file is not\n      seekable.  */\n   return ((unix_stream *) s)->file_length!=-1;\n }\n \n+\n+/* is_special()-- Return nonzero if the stream is not a regular file.  */\n+\n+is_special (stream *s)\n+{\n+  return ((unix_stream *) s)->special_file;\n+}\n+\n+\n try\n flush (stream *s)\n {"}]}