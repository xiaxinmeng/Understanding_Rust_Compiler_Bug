{"sha": "1f65ae7afe4d8d6d53a8ffb561e0b66c6f07bc12", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWY2NWFlN2FmZTRkOGQ2ZDUzYThmZmI1NjFlMGI2NmM2ZjA3YmMxMg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2013-08-09T09:13:32Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2013-08-09T09:13:32Z"}, "message": "configure.ac: Add GAS check for LEON instructions on SPARC.\n\n\t* configure.ac: Add GAS check for LEON instructions on SPARC.\n\t* configure: Regenerate.\n\t* config.in: Likewise.\n\t* config.gcc (with_cpu): Remove sparc-leon*-* and deal with LEON in the\n\tsparc*-*-* block.\n\t* config/sparc/sparc.opt (LEON, LEON3): New masks.\n\t* config/sparc/sparc.h (ASM_CPU32_DEFAULT_SPEC): Set to AS_LEON_FLAG\n\tfor LEON or LEON3.\n\t(ASM_CPU_SPEC): Pass AS_LEON_FLAG if -mcpu=leon or -mcpu=leon3.\n\t(AS_LEON_FLAG): New macro.\n\t* config/sparc/sparc.c (sparc_option_override): Set MASK_LEON for leon\n\tand MASK_LEON3 for leon3 and unset them if HAVE_AS_LEON is not defined.\n\tDeal with LEON and LEON3 for the memory model.\n\t* config/sparc/sync.m (atomic_compare_and_swap<mode>): Enable for LEON3\n\t(atomic_compare_and_swap<mode>_1): Likewise.\n\t(*atomic_compare_and_swap<mode>_1): Likewise.\n\nFrom-SVN: r201622", "tree": {"sha": "d1a9cb605f9623b55eb0aa9302465169641496d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d1a9cb605f9623b55eb0aa9302465169641496d3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1f65ae7afe4d8d6d53a8ffb561e0b66c6f07bc12", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f65ae7afe4d8d6d53a8ffb561e0b66c6f07bc12", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f65ae7afe4d8d6d53a8ffb561e0b66c6f07bc12", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f65ae7afe4d8d6d53a8ffb561e0b66c6f07bc12/comments", "author": null, "committer": null, "parents": [{"sha": "6646d624d0901f1bd5a494b67205d00b63ff554b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6646d624d0901f1bd5a494b67205d00b63ff554b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6646d624d0901f1bd5a494b67205d00b63ff554b"}], "stats": {"total": 131, "additions": 116, "deletions": 15}, "files": [{"sha": "b70e7fba0c3fab0c5d5f251a490c5ad7464ada74", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f65ae7afe4d8d6d53a8ffb561e0b66c6f07bc12/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f65ae7afe4d8d6d53a8ffb561e0b66c6f07bc12/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1f65ae7afe4d8d6d53a8ffb561e0b66c6f07bc12", "patch": "@@ -1,3 +1,22 @@\n+2013-08-09  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* configure.ac: Add GAS check for LEON instructions on SPARC.\n+\t* configure: Regenerate.\n+\t* config.in: Likewise.\n+\t* config.gcc (with_cpu): Remove sparc-leon*-* and deal with LEON in the\n+\tsparc*-*-* block.\n+\t* config/sparc/sparc.opt (LEON, LEON3): New masks.\n+\t* config/sparc/sparc.h (ASM_CPU32_DEFAULT_SPEC): Set to AS_LEON_FLAG\n+\tfor LEON or LEON3.\n+\t(ASM_CPU_SPEC): Pass AS_LEON_FLAG if -mcpu=leon or -mcpu=leon3.\n+\t(AS_LEON_FLAG): New macro.\n+\t* config/sparc/sparc.c (sparc_option_override): Set MASK_LEON for leon\n+\tand MASK_LEON3 for leon3 and unset them if HAVE_AS_LEON is not defined.\n+\tDeal with LEON and LEON3 for the memory model.\n+\t* config/sparc/sync.m (atomic_compare_and_swap<mode>): Enable for LEON3\n+\t(atomic_compare_and_swap<mode>_1): Likewise.\n+\t(*atomic_compare_and_swap<mode>_1): Likewise.\n+\n 2013-08-09  Zhenqiang Chen  <zhenqiang.chen@linaro.org>\n \n \t* config/arm/neon.md (vcond): Fix floating-point vector\n@@ -58,13 +77,13 @@\n 2013-08-08  Richard Earnshaw  <rearnsha@arm.com>\n \n \tPR target/57431\n-\t* arm/neon.md (neon_vld1_dupdi): New expand pattern.\n+\t* config/arm/arm/neon.md (neon_vld1_dupdi): New expand pattern.\n \t(neon_vld1_dup<mode> VD iterator): Iterate over VD not VDX.\n \n 2013-08-08  Richard Earnshaw  <rearnsha@arm.com>\n \n \tPR target/56979\n-\t* arm.c (aapcs_vfp_allocate): Decompose the argument if the\n+\t* config/arm/arm.c (aapcs_vfp_allocate): Decompose the argument if the\n \tsuggested mode for the assignment isn't compatible with the\n \tregisters required.\n "}, {"sha": "b2565fa76640e664e813100ba5d7a5504ef40f94", "filename": "gcc/config.gcc", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f65ae7afe4d8d6d53a8ffb561e0b66c6f07bc12/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f65ae7afe4d8d6d53a8ffb561e0b66c6f07bc12/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=1f65ae7afe4d8d6d53a8ffb561e0b66c6f07bc12", "patch": "@@ -3036,11 +3036,18 @@ if test x$with_cpu = x ; then\n          with_cpu=8540\n       fi       \n       ;;\n-    sparc-leon*-*)\n-      with_cpu=v8;\n-      ;;\n     sparc*-*-*)\n-      with_cpu=\"`echo ${target} | sed 's/-.*$//'`\"\n+      case ${target} in\n+\t*-leon-*)\n+\t  with_cpu=leon\n+\t  ;;\n+\t*-leon[3-9]*)\n+\t  with_cpu=leon3\n+\t  ;;\n+\t*)\n+\t  with_cpu=\"`echo ${target} | sed 's/-.*$//'`\"\n+\t  ;;\n+      esac\n       ;;\n   esac\n "}, {"sha": "44f9a320c275f7131d7205121b996561748fdd5b", "filename": "gcc/config.in", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f65ae7afe4d8d6d53a8ffb561e0b66c6f07bc12/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f65ae7afe4d8d6d53a8ffb561e0b66c6f07bc12/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=1f65ae7afe4d8d6d53a8ffb561e0b66c6f07bc12", "patch": "@@ -387,6 +387,12 @@\n #endif\n \n \n+/* Define if your assembler supports LEON instructions. */\n+#ifndef USED_FOR_TARGET\n+#undef HAVE_AS_LEON\n+#endif\n+\n+\n /* Define if the assembler won't complain about a line such as # 0 \"\" 2. */\n #ifndef USED_FOR_TARGET\n #undef HAVE_AS_LINE_ZERO"}, {"sha": "e5b4662512df293da2d5c128bc78978c1c5391c8", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f65ae7afe4d8d6d53a8ffb561e0b66c6f07bc12/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f65ae7afe4d8d6d53a8ffb561e0b66c6f07bc12/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=1f65ae7afe4d8d6d53a8ffb561e0b66c6f07bc12", "patch": "@@ -1151,9 +1151,8 @@ sparc_option_override (void)\n     /* TI TMS390Z55 supersparc */\n     { \"supersparc\",\tMASK_ISA, MASK_V8 },\n     { \"hypersparc\",\tMASK_ISA, MASK_V8|MASK_FPU },\n-    /* LEON */\n-    { \"leon\",\t\tMASK_ISA, MASK_V8|MASK_FPU },\n-    { \"leon3\",\t\tMASK_ISA, MASK_V8|MASK_FPU },\n+    { \"leon\",\t\tMASK_ISA, MASK_V8|MASK_LEON|MASK_FPU },\n+    { \"leon3\",\t\tMASK_ISA, MASK_V8|MASK_LEON3|MASK_FPU },\n     { \"sparclite\",\tMASK_ISA, MASK_SPARCLITE },\n     /* The Fujitsu MB86930 is the original sparclite chip, with no FPU.  */\n     { \"f930\",\t\tMASK_ISA|MASK_FPU, MASK_SPARCLITE },\n@@ -1312,6 +1311,9 @@ sparc_option_override (void)\n #endif\n #ifndef HAVE_AS_SPARC4\n \t\t   & ~MASK_CBCOND\n+#endif\n+#ifndef HAVE_AS_LEON\n+\t\t   & ~(MASK_LEON | MASK_LEON3)\n #endif\n \t\t   );\n \n@@ -1441,6 +1443,10 @@ sparc_option_override (void)\n       /* Choose the most relaxed model for the processor.  */\n       else if (TARGET_V9)\n \tsparc_memory_model = SMM_RMO;\n+      else if (TARGET_LEON3)\n+\tsparc_memory_model = SMM_TSO;\n+      else if (TARGET_LEON)\n+\tsparc_memory_model = SMM_SC;\n       else if (TARGET_V8)\n \tsparc_memory_model = SMM_PSO;\n       else"}, {"sha": "d96c1b6b422b8f083c692f9eb3096e52b6cbc71e", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f65ae7afe4d8d6d53a8ffb561e0b66c6f07bc12/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f65ae7afe4d8d6d53a8ffb561e0b66c6f07bc12/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=1f65ae7afe4d8d6d53a8ffb561e0b66c6f07bc12", "patch": "@@ -236,7 +236,7 @@ extern enum cmodel sparc_cmodel;\n #if TARGET_CPU_DEFAULT == TARGET_CPU_leon \\\n  || TARGET_CPU_DEFAULT == TARGET_CPU_leon3\n #define CPP_CPU32_DEFAULT_SPEC \"-D__leon__ -D__sparc_v8__\"\n-#define ASM_CPU32_DEFAULT_SPEC \"\"\n+#define ASM_CPU32_DEFAULT_SPEC AS_LEON_FLAG\n #endif\n \n #endif\n@@ -332,8 +332,8 @@ extern enum cmodel sparc_cmodel;\n %{mcpu=v8:-Av8} \\\n %{mcpu=supersparc:-Av8} \\\n %{mcpu=hypersparc:-Av8} \\\n-%{mcpu=leon:-Av8} \\\n-%{mcpu=leon3:-Av8} \\\n+%{mcpu=leon:\" AS_LEON_FLAG \"} \\\n+%{mcpu=leon3:\" AS_LEON_FLAG \"} \\\n %{mv8plus:-Av8plus} \\\n %{mcpu=v9:-Av9} \\\n %{mcpu=ultrasparc:%{!mv8plus:-Av9a}} \\\n@@ -1758,6 +1758,12 @@ extern int sparc_indent_opcode;\n #define AS_NIAGARA4_FLAG \"-Av9\" AS_NIAGARA3_FLAG\n #endif\n \n+#ifdef HAVE_AS_LEON\n+#define AS_LEON_FLAG \"-Aleon\"\n+#else\n+#define AS_LEON_FLAG \"-Av8\"\n+#endif\n+\n /* We use gcc _mcount for profiling.  */\n #define NO_PROFILE_COUNTERS 0\n "}, {"sha": "3ccd54fa463d9d877bb223c45a34f6f839be1f06", "filename": "gcc/config/sparc/sparc.opt", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f65ae7afe4d8d6d53a8ffb561e0b66c6f07bc12/gcc%2Fconfig%2Fsparc%2Fsparc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f65ae7afe4d8d6d53a8ffb561e0b66c6f07bc12/gcc%2Fconfig%2Fsparc%2Fsparc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.opt?ref=1f65ae7afe4d8d6d53a8ffb561e0b66c6f07bc12", "patch": "@@ -211,6 +211,12 @@ Enable workarounds for the errata of the UT699 processor\n Mask(LONG_DOUBLE_128)\n ;; Use 128-bit long double\n \n+Mask(LEON)\n+;; Generate code for LEON\n+\n+Mask(LEON3)\n+;; Generate code for LEON3\n+\n Mask(SPARCLITE)\n ;; Generate code for SPARClite\n "}, {"sha": "130f52191946d52b7175ee48cb5e03f09d11ba41", "filename": "gcc/config/sparc/sync.md", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f65ae7afe4d8d6d53a8ffb561e0b66c6f07bc12/gcc%2Fconfig%2Fsparc%2Fsync.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f65ae7afe4d8d6d53a8ffb561e0b66c6f07bc12/gcc%2Fconfig%2Fsparc%2Fsync.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsync.md?ref=1f65ae7afe4d8d6d53a8ffb561e0b66c6f07bc12", "patch": "@@ -161,7 +161,8 @@\n    (match_operand:SI 5 \"const_int_operand\" \"\")\t\t;; is_weak\n    (match_operand:SI 6 \"const_int_operand\" \"\")\t\t;; mod_s\n    (match_operand:SI 7 \"const_int_operand\" \"\")]\t\t;; mod_f\n-  \"TARGET_V9 && (<MODE>mode != DImode || TARGET_ARCH64 || TARGET_V8PLUS)\"\n+  \"(TARGET_V9 || TARGET_LEON3)\n+   && (<MODE>mode != DImode || TARGET_ARCH64 || TARGET_V8PLUS)\"\n {\n   sparc_expand_compare_and_swap (operands);\n   DONE;\n@@ -176,7 +177,7 @@\n \t     [(match_operand:I48MODE 2 \"register_operand\" \"\")\n \t      (match_operand:I48MODE 3 \"register_operand\" \"\")]\n \t     UNSPECV_CAS))])]\n-  \"TARGET_V9\"\n+  \"TARGET_V9 || TARGET_LEON3\"\n   \"\")\n \n (define_insn \"*atomic_compare_and_swap<mode>_1\"\n@@ -187,7 +188,7 @@\n \t  [(match_operand:I48MODE 2 \"register_operand\" \"r\")\n \t   (match_operand:I48MODE 3 \"register_operand\" \"0\")]\n \t  UNSPECV_CAS))]\n-  \"TARGET_V9 && (<MODE>mode == SImode || TARGET_ARCH64)\"\n+  \"(TARGET_V9 || TARGET_LEON3) && (<MODE>mode != DImode || TARGET_ARCH64)\"\n   \"cas<modesuffix>\\t%1, %2, %0\"\n   [(set_attr \"type\" \"multi\")])\n "}, {"sha": "1e9be8e9fe70134016a97daed63d2e5bc36a7097", "filename": "gcc/configure", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f65ae7afe4d8d6d53a8ffb561e0b66c6f07bc12/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f65ae7afe4d8d6d53a8ffb561e0b66c6f07bc12/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=1f65ae7afe4d8d6d53a8ffb561e0b66c6f07bc12", "patch": "@@ -24331,6 +24331,43 @@ if test $gcc_cv_as_sparc_sparc4 = yes; then\n \n $as_echo \"#define HAVE_AS_SPARC4 1\" >>confdefs.h\n \n+fi\n+\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking assembler for LEON instructions\" >&5\n+$as_echo_n \"checking assembler for LEON instructions... \" >&6; }\n+if test \"${gcc_cv_as_sparc_leon+set}\" = set; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  gcc_cv_as_sparc_leon=no\n+  if test x$gcc_cv_as != x; then\n+    $as_echo '.text\n+       .register %g2, #scratch\n+       .register %g3, #scratch\n+       .align 4\n+       smac %g2, %g3, %g1\n+       umac %g2, %g3, %g1\n+       cas [%g2], %g3, %g1' > conftest.s\n+    if { ac_try='$gcc_cv_as $gcc_cv_as_flags -Aleon -o conftest.o conftest.s >&5'\n+  { { eval echo \"\\\"\\$as_me\\\":${as_lineno-$LINENO}: \\\"$ac_try\\\"\"; } >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n+  test $ac_status = 0; }; }\n+    then\n+\tgcc_cv_as_sparc_leon=yes\n+    else\n+      echo \"configure: failed program was\" >&5\n+      cat conftest.s >&5\n+    fi\n+    rm -f conftest.o conftest.s\n+  fi\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_as_sparc_leon\" >&5\n+$as_echo \"$gcc_cv_as_sparc_leon\" >&6; }\n+if test $gcc_cv_as_sparc_leon = yes; then\n+\n+$as_echo \"#define HAVE_AS_LEON 1\" >>confdefs.h\n+\n fi\n     ;;\n "}, {"sha": "116ba133145aeb9805d2922e2778898412279122", "filename": "gcc/configure.ac", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f65ae7afe4d8d6d53a8ffb561e0b66c6f07bc12/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f65ae7afe4d8d6d53a8ffb561e0b66c6f07bc12/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=1f65ae7afe4d8d6d53a8ffb561e0b66c6f07bc12", "patch": "@@ -3613,6 +3613,19 @@ foo:\n        kasumi_fi_xor %f46, %f48, %f50, %f52],,\n       [AC_DEFINE(HAVE_AS_SPARC4, 1,\n                 [Define if your assembler supports SPARC4 instructions.])])\n+\n+    gcc_GAS_CHECK_FEATURE([LEON instructions],\n+      gcc_cv_as_sparc_leon,,\n+      [-Aleon],\n+      [.text\n+       .register %g2, #scratch\n+       .register %g3, #scratch\n+       .align 4\n+       smac %g2, %g3, %g1\n+       umac %g2, %g3, %g1\n+       cas [[%g2]], %g3, %g1],,\n+      [AC_DEFINE(HAVE_AS_LEON, 1,\n+                [Define if your assembler supports LEON instructions.])])\n     ;;\n \n changequote(,)dnl"}]}