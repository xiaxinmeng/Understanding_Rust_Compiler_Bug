{"sha": "b53b1b04f5039120bcaad25da99a2f8fecdfa569", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjUzYjFiMDRmNTAzOTEyMGJjYWFkMjVkYTk5YTJmOGZlY2RmYTU2OQ==", "commit": {"author": {"name": "James A. Morrison", "email": "phython@gcc.gnu.org", "date": "2005-08-06T18:25:31Z"}, "committer": {"name": "James A. Morrison", "email": "phython@gcc.gnu.org", "date": "2005-08-06T18:25:31Z"}, "message": "re PR treelang/23072 (multiple runs of treelang testsuite does not work...)\n\n2005-08-06  James A. Morrison  <phython@gcc.gnu.org>\n\n        PR treelang/23072\n        * Make-lang.in: Remove old testing cruft.\n\nFrom-SVN: r102813", "tree": {"sha": "efe9d29d56ad9bcdfcb2978455ae8dc894bf5154", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/efe9d29d56ad9bcdfcb2978455ae8dc894bf5154"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b53b1b04f5039120bcaad25da99a2f8fecdfa569", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b53b1b04f5039120bcaad25da99a2f8fecdfa569", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b53b1b04f5039120bcaad25da99a2f8fecdfa569", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b53b1b04f5039120bcaad25da99a2f8fecdfa569/comments", "author": null, "committer": null, "parents": [{"sha": "2c4a108eec40a96ac7c5fcb8811678c11c71c529", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c4a108eec40a96ac7c5fcb8811678c11c71c529", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c4a108eec40a96ac7c5fcb8811678c11c71c529"}], "stats": {"total": 387, "additions": 76, "deletions": 311}, "files": [{"sha": "1eb4cea362bf5364a8fc08c080290a648bf1db5b", "filename": "gcc/testsuite/treelang/ChangeLog", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b53b1b04f5039120bcaad25da99a2f8fecdfa569/gcc%2Ftestsuite%2Ftreelang%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b53b1b04f5039120bcaad25da99a2f8fecdfa569/gcc%2Ftestsuite%2Ftreelang%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Ftreelang%2FChangeLog?ref=b53b1b04f5039120bcaad25da99a2f8fecdfa569", "patch": "@@ -1,8 +1,19 @@\n-2005-07-23  James A. Morrrison  <phython@gcc.gnu.org>\n+2005-08-06  James A. Morrison  <phython@gcc.gnu.org>\n+\n+\t* treetests.exp: Remove.\n+\t* a01gcco01runpgm: Move to...\n+\t* output/output-1.out: here.\n+\t* a01gcci01.c: Move to...\n+\t* output/output-1.c: here.\n+\t* a01gcci01.tree: Move to...\n+\t* output/output-1.tree: here.\n+\t* output/output.exp: New.\n+\n+2005-07-23  James A. Morrison  <phython@gcc.gnu.org>\n \n \t* compile/var_defs.tree: Remove extra lines.\n \n-2005-07-19  James A. Morrrison  <phython@gcc.gnu.org>\n+2005-07-19  James A. Morrison  <phython@gcc.gnu.org>\n \n \t* compile/var_defs.tree: Remove duplicate variable.\n \t* compile/var_defs-2.tree: Add duplicate variable test."}, {"sha": "745f93eecbfe1c0ad93f15fa2ac6fcb21515d599", "filename": "gcc/testsuite/treelang/output/output-1.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b53b1b04f5039120bcaad25da99a2f8fecdfa569/gcc%2Ftestsuite%2Ftreelang%2Foutput%2Foutput-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b53b1b04f5039120bcaad25da99a2f8fecdfa569/gcc%2Ftestsuite%2Ftreelang%2Foutput%2Foutput-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Ftreelang%2Foutput%2Foutput-1.c?ref=b53b1b04f5039120bcaad25da99a2f8fecdfa569", "previous_filename": "gcc/testsuite/treelang/a01gcci01.c"}, {"sha": "3c2c743c77d9a89de567d0bcee6d01d325015a51", "filename": "gcc/testsuite/treelang/output/output-1.out", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b53b1b04f5039120bcaad25da99a2f8fecdfa569/gcc%2Ftestsuite%2Ftreelang%2Foutput%2Foutput-1.out", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b53b1b04f5039120bcaad25da99a2f8fecdfa569/gcc%2Ftestsuite%2Ftreelang%2Foutput%2Foutput-1.out", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Ftreelang%2Foutput%2Foutput-1.out?ref=b53b1b04f5039120bcaad25da99a2f8fecdfa569", "previous_filename": "gcc/testsuite/treelang/a01gcco01runpgm"}, {"sha": "be811a463fa673077b173c4e693ce9e9ad7959ac", "filename": "gcc/testsuite/treelang/output/output-1.tree", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b53b1b04f5039120bcaad25da99a2f8fecdfa569/gcc%2Ftestsuite%2Ftreelang%2Foutput%2Foutput-1.tree", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b53b1b04f5039120bcaad25da99a2f8fecdfa569/gcc%2Ftestsuite%2Ftreelang%2Foutput%2Foutput-1.tree", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Ftreelang%2Foutput%2Foutput-1.tree?ref=b53b1b04f5039120bcaad25da99a2f8fecdfa569", "previous_filename": "gcc/testsuite/treelang/a01gcci01.tree"}, {"sha": "8284a8f9cbbcedbecfb5fff0e7860e4075c63a3b", "filename": "gcc/testsuite/treelang/output/output.exp", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b53b1b04f5039120bcaad25da99a2f8fecdfa569/gcc%2Ftestsuite%2Ftreelang%2Foutput%2Foutput.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b53b1b04f5039120bcaad25da99a2f8fecdfa569/gcc%2Ftestsuite%2Ftreelang%2Foutput%2Foutput.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Ftreelang%2Foutput%2Foutput.exp?ref=b53b1b04f5039120bcaad25da99a2f8fecdfa569", "patch": "@@ -0,0 +1,58 @@\n+proc test_treelang_output { testname srcfiles infile resfile args } {\n+    set comp_output [treelang_target_compile $srcfiles $testname executable $args]\n+    if { [treelang_check_compile $testname $args $testname $comp_output] == 0 } {\n+    \treturn 0;\n+    }\n+\n+    verbose \"Expected output is in $resfile\"\n+    set id [open $resfile r]\n+    set expected \"\"\n+    append expected [read $id]\n+    close $id\n+    set output \"\"\n+    set output [exec $testname $infile]\n+    regsub -all \"\\r\" \"$output\" \"\" output\n+    regsub \"\\n*$\" $expected \"\" expected\n+    regsub \"\\n*$\" $output \"\" output\n+    regsub \"^\\n*\" $expected \"\" expected\n+    regsub \"^\\n*\" $output \"\" output\n+    regsub -all \"\\[ \\t\\]\\[ \\t\\]*\" $expected \" \" expected\n+    regsub -all \"\\[ \\t\\]*\\n\\n*\" $expected \"\\n\" expected\n+    regsub -all \"\\[ \\t\\]\\[ \\t\\]*\" $output \" \" output\n+    regsub -all \"\\[ \\t\\]*\\n\\n*\" $output \"\\n\" output\n+    verbose \"expected is $expected\"\n+    verbose \"actual is $output\"\n+\n+    if { $expected == $output } {\n+\tpass $testname\n+    } else {\n+        fail $testname\n+    }\n+    exec rm $testname\n+}\n+global srcdir subdir\n+\n+catch { lsort [glob -nocomplain ${srcdir}/${subdir}/*.out] } outfiles\n+verbose \"Output files are $outfiles\"\n+\n+set prefix \"\"\n+foreach x $outfiles {\n+    regsub \"\\\\.out$\" $x \"\" prefix\n+    set bname [file tail $prefix]\n+\n+    if [file exists ${prefix}.inp] {\n+\tset inpfile ${prefix}.inp\n+    } else {\n+\tset inpfile \"\"\n+    }\n+\n+    verbose \"inpfile is $inpfile\"\n+\n+    set srcfiles [lsort [glob -nocomplain ${prefix}.{c,tree}]]\n+    verbose \"source files are $srcfiles\"\n+    test_treelang_output \"treelang/$bname\" $srcfiles $inpfile $x \"\"\n+}\n+\n+# Local Variables:\n+# tcl-indent-level:4\n+# End:"}, {"sha": "4fe9bce4ecd5a82ee8ceeaf96fbec4736dbf420d", "filename": "gcc/testsuite/treelang/treetests.exp", "status": "removed", "additions": 0, "deletions": 307, "changes": 307, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c4a108eec40a96ac7c5fcb8811678c11c71c529/gcc%2Ftestsuite%2Ftreelang%2Ftreetests.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c4a108eec40a96ac7c5fcb8811678c11c71c529/gcc%2Ftestsuite%2Ftreelang%2Ftreetests.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Ftreelang%2Ftreetests.exp?ref=2c4a108eec40a96ac7c5fcb8811678c11c71c529", "patch": "@@ -1,307 +0,0 @@\n-\n-# Tests for treelang; run from gcc/treelang/Make-lang.in => gcc/Makefile\n-# find ttt for the actual tests\n-\n-# Copyright (C) 1999, 2000, 2001, 2002 by The Free Software Foundation\n-\n-# This program is free software; you can redistribute it and/or modify it\n-# under the terms of the GNU General Public License as published by the\n-# Free Software Foundation; either version 2, or (at your option) any\n-# later version.\n-#\n-# This program is distributed in the hope that it will be useful,\n-# but WITHOUT ANY WARRANTY; without even the implied warranty of\n-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-# GNU General Public License for more details.\n-#\n-# You should have received a copy of the GNU General Public License\n-# along with this program; if not, write to the Free Software\n-# Foundation, 51 Franklin Street, Fifth Floor,\n-# Boston, MA 02110-1301, USA.\n-#\n-# In other words, you are welcome to use, share and improve this program.\n-# You are forbidden to forbid anyone else to use, share and improve\n-# what you give them.   Help stamp out software-hoarding!  \n-\n-# Check the pgm is even there and set up the basics\n-proc init_utility {pgm} {\n-    global transform\n-    global pgm_actual\n-    global pgm_base\n-    global fix_progname\n-    global path\n-# maybe add \"X\" to front of fail to say it is an expected failure\n-    global X\n-\n-    set pgm_base ${pgm}\n-    set pgm_actual ${pgm}\n-\n-    if { ${transform} != \"s,x,x,\"} {\n-        verbose \"1. program name was ${pgm}\" 2\n-        set sed_rc [catch {eval exec sed -e \"${transform}\" <<${pgm} } catch_res]\n-        if { ${sed_rc} != \"0\" } {\n-            verbose \"2. Program name transform failed rc=${sed_rc} stat=${catch_res}\" 1\n-            ${X}fail \"${pgm} sed\"\n-            return 0\n-        }\n-        set pgm_actual ${catch_res}\n-        verbose \"3. program name after transformation is ${pgm_actual}\" 2\n-    }\n-\n-    set which_rc [catch {exec which ${pgm_actual}} stat]\n-    if { ${which_rc} != \"0\" } {\n-        verbose \"4. ${pgm_base} cannot be found rc=${which_rc} stat=${stat}\" 1\n-        ${X}fail \"${pgm} = ${pgm_actual} not found in path (${path})\"\n-        return 0\n-    }\n-    set fix_progname \"s,${pgm_actual},${pgm_base},\"\n-    verbose \"5. fix program name value = ${fix_progname}\" 4\n-    return 1\n-}\n-\n-#run pgm, option to remove file names from outputs\n-proc run3 {srcdd testdd parms group_nbr item_nbr nonzero_RC_expected check_file sanitize_output tree1 pipe} {\n-\n-    global transform\n-    global pgm_actual\n-    global pgm_base\n-    global fix_progname\n-    global X\n-    global extras\n-\n-    set error_msg 0\n-    set basefile \"a${group_nbr}${pgm_base}.out${item_nbr}\"\n-    set infile  \"\"\n-    set outfile  \"\"\n-    set suffix \"\"\n-    set temp_extras \"-O3 \"\n-    set real_pgm_actual ${pgm_actual}\n-\n-    if  {${tree1} > 0} {\n-        if {\"${pgm_actual}\" == \"gcc\"} {\n-            set real_pgm_actual \"xgcc\"\n-            set temp_extras \"${extras}\"\n-        }\n-        set infile \"${srcdd}/a${group_nbr}${pgm_base}i${item_nbr}.tree\"\n-        set mainfile \"${srcdd}/a${group_nbr}${pgm_base}i${item_nbr}.c\"\n-        set outfile \"-o ${testdd}/a${group_nbr}${pgm_base}o${item_nbr}${suffix}\"\n-    }\n-    \n-    verbose \"6. exec ${real_pgm_actual} ${temp_extras} ${parms} ${mainfile} ${infile} ${outfile} >${testdd}/${basefile} 2>${testdd}/${basefile}err\" 2\n-    set run_rc [catch {eval exec ${real_pgm_actual} ${temp_extras} ${parms} ${mainfile} ${infile} ${outfile} >${testdd}/${basefile} 2>${testdd}/${basefile}err} catch_res]\n-    if {${run_rc} == 1} {\n-        if {${nonzero_RC_expected} == 0} {\n-            verbose \"7. ${real_pgm_actual} ${group_nbr} ${item_nbr} failed due to rc=${run_rc} status=${catch_res}\" 1\n-            ${X}fail \"${pgm_base} ${group_nbr} ${item_nbr} rc!=0\" \n-            return\n-        } \n-    } else {\n-        if {${nonzero_RC_expected} == 1} {\n-            verbose \"8. ${pgm_actual} ${group_nbr} ${item_nbr} failed - did not produce nonzero return code as expected rc=${run_rc} status=${catch_res}\" 1\n-            ${X}fail \"${pgm_base} ${group_nbr} ${item_nbr} rc=0\" \n-            return\n-        } \n-    }\n-\n-# change the filenames to (file) in output if needed to allow testing\n-    set checkfile1 \"${srcdd}/${basefile}\"\n-    set checkfile2 \"${testdd}/${basefile}\"\n-    if {${sanitize_output} != 0} {\n-        set oldcheckfile1 \"${checkfile1}\"\n-        set oldcheckfile2 \"${checkfile2}\"\n-        set checkfile1 \"${testdd}/${basefile}.test.nofilename\"\n-        set checkfile2 \"${testdd}/${basefile}.run.nofilename\"\n-        set run_rc [catch {eval exec sed -f ${srcdd}/filefix.sed <${oldcheckfile1} >${checkfile1}} catch_res]\n-        if {${run_rc} == 1} {\n-            verbose \"9. sed to cleanup filenames (std 1) in pgm output failed due to rc=${run_rc} status=${catch_res}\" 1\n-            if  {${error_msg} == 0} {\n-                set error_msg \"9. sed to cleanup filenames (std 1) in pgm output failed due to rc=${run_rc} status=${catch_res}\"\n-            }\n-        }\n-        set run_rc [catch {eval exec sed -f ${srcdd}/filefix.sed <${oldcheckfile2} | sed -e  \"${fix_progname}\"  >${checkfile2}} catch_res]\n-        if {${run_rc} == 1} {\n-            verbose \"10. sed to cleanup filenames (std 2) in pgm output failed due to rc=${run_rc} status=${catch_res}\" 1\n-            if  {${error_msg} == 0} {\n-                set error_msg \"10. sed to cleanup filenames (std 2) in pgm output failed due to rc=${run_rc} status=${catch_res}\" \n-            }\n-        }\n-    }\n-    set diff [diff ${checkfile1} ${checkfile2}]\n-    if {${diff} != 1} {\n-        verbose \"11. ${pgm_actual} ${group_nbr} ${item_nbr} diff stdout failed rc=${diff}\" 1\n-        if  {${error_msg} == 0} {\n-            set error_msg \"11. ${pgm_actual} ${group_nbr} ${item_nbr} diff stdout failed rc=${diff}\"\n-        }\n-    }\n-\n-    set checkfile1 \"${srcdd}/${basefile}err\"\n-    set checkfile2 \"${testdd}/${basefile}err\"\n-    if {${sanitize_output} != 0} {\n-        set oldcheckfile1 \"${checkfile1}\"\n-        set oldcheckfile2 \"${checkfile2}\"\n-        set checkfile1 \"${testdd}/${basefile}err.test.nofilename\"\n-        set checkfile2 \"${testdd}/${basefile}err.run.nofilename\"\n-        set run_rc [catch {eval exec sed -f ${srcdd}/filefix.sed <${oldcheckfile1} >${checkfile1}} catch_res]\n-        if {${run_rc} == 1} {\n-            verbose \"12. sed to cleanup filenames (err 1) in pgm output failed due to rc=${run_rc} status=${catch_res}\" 1\n-            if  {${error_msg} == 0} {\n-                set error_msg \"12. sed to cleanup filenames (err 1) in pgm output failed due to rc=${run_rc} status=${catch_res}\"\n-            }\n-        }\n-        set run_rc [catch {eval exec sed -f ${srcdd}/filefix.sed <${oldcheckfile2} | sed -e  \"${fix_progname}\"  >${checkfile2}} catch_res]\n-        if {${run_rc} == 1} {\n-            verbose \"13. sed to cleanup filenames (err 2) in pgm output failed due to rc=${run_rc} status=${catch_res}\" 1\n-            if  {${error_msg} == 0} {\n-                set error_msg \"13. sed to cleanup filenames (err 2) in pgm output failed due to rc=${run_rc} status=${catch_res}\"\n-            }\n-        }\n-    }\n-    set diff [diff ${checkfile1} ${checkfile2}]\n-    if {${diff} != 1} {\n-        verbose \"14. ${pgm_actual} ${group_nbr} ${item_nbr} diff stderr failed rc=${diff}\" 1\n-        if  {${error_msg} == 0} {\n-            set error_msg \"14. ${pgm_actual} ${group_nbr} ${item_nbr} diff stderr failed rc=${diff}\"\n-        }\n-    }\n-\n-    if {${check_file} >0} {\n-        if  {${tree1} == 0} {\n-            set checkfile1 \"${srcdd}/${basefile}file\"\n-            set checkfile2 \"${testdd}/${basefile}file\"\n-            if {${sanitize_output} != 0} {\n-                set oldcheckfile1 \"${checkfile1}\"\n-                set oldcheckfile2 \"${checkfile2}\"\n-                set checkfile1 \"${testdd}/${basefile}file.test.nofilename\"\n-                set checkfile2 \"${testdd}/${basefile}file.run.nofilename\"\n-                set run_rc [catch {eval exec sed -f ${srcdd}/filefix.sed <${oldcheckfile1} >${checkfile1}} catch_res]\n-                if {${run_rc} == 1} {\n-                    verbose \"15. sed to cleanup filenames (err 1) in pgm stdout failed due to rc=${run_rc} status=${catch_res}\" 1\n-                    if  {${error_msg} == 0} {\n-                        set error_msg \"15. sed to cleanup filenames (err 1) in pgm stdout failed due to rc=${run_rc} status=${catch_res}\"\n-                    }\n-                }\n-                set run_rc [catch {eval exec sed -f ${srcdd}/filefix.sed <${oldcheckfile2} | sed -e  \"${fix_progname}\"  >${checkfile2}} catch_res]\n-                if {${run_rc} == 1} {\n-                    verbose \"16. sed to cleanup filenames (err 2) in pgm stdout failed due to rc=${run_rc} status=${catch_res}\" 1\n-                    if  {${error_msg} == 0} {\n-                        set error_msg \"16. sed to cleanup filenames (err 2) in pgm stdout failed due to rc=${run_rc} status=${catch_res}\"\n-                    }\n-                }\n-            }\n-            set diff [diff ${checkfile1} ${checkfile2}]\n-            if {${diff} != 1} {\n-                verbose \"17. ${pgm_actual} ${group_nbr} ${item_nbr} diff stdout file failed rc=${diff}\" 1\n-                if  {${error_msg} == 0} {\n-                    set error_msg \"17. ${pgm_actual} ${group_nbr} ${item_nbr} diff stdout file failed rc=${diff}\"\n-                }\n-            }\n-        }\n-    }\n-    \n-    if {${check_file} >1} {\n-        if  {${tree1} == 0} {\n-            set checkfile1 \"${srcdd}/${outfile}\"\n-            set checkfile2 \"${testdd}/${outfile}\"\n-            if {${sanitize_output} != 0} {\n-                set oldcheckfile1 \"${checkfile1}\"\n-                set oldcheckfile2 \"${checkfile2}\"\n-                set checkfile1 \"${testdd}/${basefile}out.test.nofilename\"\n-                set checkfile2 \"${testdd}/${basefile}out.run.nofilename\"\n-                set run_rc [catch {eval exec sed -f ${srcdd}/filefix.sed <${oldcheckfile1} >${checkfile1}} catch_res]\n-                if {${run_rc} == 1} {\n-                    verbose \"18. sed to cleanup filenames (err 1) in pgm output failed due to rc=${run_rc} status=${catch_res}\" 1\n-                    if  {${error_msg} == 0} {\n-                        set error_msg \"18. sed to cleanup filenames (err 1) in pgm output failed due to rc=${run_rc} status=${catch_res}\"\n-                    }\n-                }\n-                set run_rc [catch {eval exec sed -f ${srcdd}/filefix.sed <${oldcheckfile2} | sed -e  \"${fix_progname}\"  >${checkfile2}} catch_res]\n-                if {${run_rc} == 1} {\n-                    verbose \"19. sed to cleanup filenames (err 2) in pgm output failed due to rc=${run_rc} status=${catch_res}\" 1\n-                    if  {${error_msg} == 0} {\n-                        set error_msg \"19. sed to cleanup filenames (err 2) in pgm output failed due to rc=${run_rc} status=${catch_res}\"\n-                    }\n-                }\n-            }\n-            set diff [diff ${checkfile1} ${checkfile2}]\n-            if {${diff} != 1} {\n-                verbose \"20. ${pgm_actual} ${group_nbr} ${item_nbr} diff output file failed rc=${diff}\" 1\n-                if  {${error_msg} == 0} {\n-                    set error_msg \"20. ${pgm_actual} ${group_nbr} ${item_nbr} diff output file failed rc=${diff}\"\n-                }\n-            }\n-        }\n-    }\n-    \n-    if {${check_file} >2} {\n-        set outfile \"a${group_nbr}${pgm_base}o${item_nbr}${suffix}\"\n-        set pgmrun \"${testdd}/a${group_nbr}${pgm_base}o${item_nbr}${suffix}\"\n-        set checkfile1 \"${srcdd}/${outfile}runpgm\"\n-        set checkfile2 \"${testdd}/${outfile}runpgm\"\n-        verbose \"21. exec ${pgmrun} >${checkfile2} 2>${checkfile2}err\" 2\n-        set run_rc [catch {eval exec ${pgmrun} >${checkfile2} 2>${checkfile2}err} catch_res]\n-        if {${run_rc} == 1} {\n-            if {${nonzero_RC_expected} == 0} {\n-                verbose \"22. ${pgm_actual} ${group_nbr} ${item_nbr} failed due to rc=${run_rc} status=${catch_res}\" 1\n-                ${X}fail \"${pgm_base} ${group_nbr} ${item_nbr} run\" \n-                return\n-            } \n-        } else {\n-            if {${nonzero_RC_expected} == 1} {\n-                verbose \"23. ${pgm_actual} ${group_nbr} ${item_nbr} failed - did not produce nonzero return code as expected rc=${run_rc} status=${catch_res}\" 1\n-                ${X}fail \"${pgm_base} ${group_nbr} ${item_nbr} run\" \n-                return\n-            } \n-        }\n-        set diff [diff ${checkfile1} ${checkfile2}]\n-        if {${diff} != 1} {\n-            verbose \"24. ${pgm_actual} ${group_nbr} ${item_nbr} diff run output file failed rc=${diff}\" 1\n-            if  {${error_msg} == 0} {\n-                set error_msg \"24. ${pgm_actual} ${group_nbr} ${item_nbr} diff run output file failed rc=${diff}\"\n-            }\n-        }\n-        set diff [diff ${checkfile1}err ${checkfile2}err]\n-        if {${diff} != 1} {\n-            verbose \"25. ${pgm_actual} ${group_nbr} ${item_nbr} diff run stderr file failed rc=${diff}\" 1\n-            if  {${error_msg} == 0} {\n-                set error_msg \"25. ${pgm_actual} ${group_nbr} ${item_nbr} diff run stderr file failed rc=${diff}\"\n-            }\n-        }\n-    }\n-\n-    if {${error_msg}>0} {\n-        ${X}fail \"${pgm_base} ${group_nbr} ${item_nbr} fail code=${error_msg}\" \n-    } else {\n-        pass \"${pgm_base} ${group_nbr} ${item_nbr}\" \n-    }\n-    return \n-}\n-\n-set extras \"$env(gcc_extras)\"\n-set path $env(PATH)\n-set transform $env(TRANSFORM)\n-set srcdir $env(srcdir)\n-verbose \"source directory ${srcdir}\\n\" 2\n-verbose \"transform ${transform}\\n\" 2\n-set sourcedir \"${srcdir}/testsuite/treelang\"\n-set testdir \"treelang\"\n-\n-set pgm_actual \"\"\n-\n-# srcdd testdd parms group_nbr item_nbr nonzero_RC_expected check_file sanitize_output tree1\n-\n-# ttt\n-\n-#GCC - main C compiler tests via GCC\n-\n-set X \"\"\n-\n-set check_rc [init_utility \"gcc\"]\n-\n-if {${check_rc} == 1} {\n-#\n-#set X \"x\"\n-set X \"\"\n-run3 \"${sourcedir}\" \"${testdir}\" \" -g -O3 --param ggc-min-heapsize=0 --param ggc-min-expand=0 \" 01 01 0 3 0 1 0\n-set X \"\"\n-}\n-"}, {"sha": "d02096110669c4da6b4117098a90715bb150d85c", "filename": "gcc/treelang/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b53b1b04f5039120bcaad25da99a2f8fecdfa569/gcc%2Ftreelang%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b53b1b04f5039120bcaad25da99a2f8fecdfa569/gcc%2Ftreelang%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2FChangeLog?ref=b53b1b04f5039120bcaad25da99a2f8fecdfa569", "patch": "@@ -1,3 +1,8 @@\n+2005-08-06  James A. Morrison  <phython@gcc.gnu.org>\n+\n+\tPR treelang/23072\n+\t* Make-lang.in: Remove old testing cruft.\n+\n 2005-06-25  Kelley Cook  <kcook@gcc.gnu.org>\n \n \t* all files: Update FSF address in copyright headers."}, {"sha": "8e99dd770c2a9772f57be66a339f01bd3a0339c9", "filename": "gcc/treelang/Make-lang.in", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b53b1b04f5039120bcaad25da99a2f8fecdfa569/gcc%2Ftreelang%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b53b1b04f5039120bcaad25da99a2f8fecdfa569/gcc%2Ftreelang%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2FMake-lang.in?ref=b53b1b04f5039120bcaad25da99a2f8fecdfa569", "patch": "@@ -295,7 +295,6 @@ treelang.check: $(TESTSUITEDIR)/site.exp\n # these three files are empty and it seems diff has trouble generating\n # patch files for new empty files as required for cvs.\n # STAMP does not cut it here as I need an empty file.\n-\ttouch $(srcdir)/testsuite/treelang/{a01gcco01runpgmerr,a01gcc.out01,a01gcc.out01err}\n \t-rootme=`${PWD_COMMAND}`; export rootme; \\\n \tsrcdir=`cd ${srcdir}; ${PWD_COMMAND}` ; export srcdir ; \\\n \tcd testsuite; \\\n@@ -307,7 +306,6 @@ treelang.check: $(TESTSUITEDIR)/site.exp\n \tPATH=`cd ..;${PWD_COMMAND}`:$$PATH; export PATH; \\\n \tgcc_extras=\"-B`cd ..;${PWD_COMMAND}` -B`cd ..;${PWD_COMMAND}`/treelang\"; export gcc_extras; \\\n \t$(RUNTEST) --tool treelang $(RUNTESTFLAGS)\n-\trm $(srcdir)/testsuite/treelang/{a01gcco01runpgmerr,a01gcc.out01,a01gcc.out01err}\n \n # copy the output files from the current test to source ie say the new results are OK\n treelang.check.fix: force"}]}