{"sha": "59014d0a6fb7f546b7f289f147d9a0c5eb820e35", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTkwMTRkMGE2ZmI3ZjU0NmI3ZjI4OWYxNDdkOWEwYzVlYjgyMGUzNQ==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-04-04T08:44:53Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-04-04T08:44:53Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r678", "tree": {"sha": "397da3b730e7403f8bee09e2596534d3877df252", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/397da3b730e7403f8bee09e2596534d3877df252"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/59014d0a6fb7f546b7f289f147d9a0c5eb820e35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59014d0a6fb7f546b7f289f147d9a0c5eb820e35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59014d0a6fb7f546b7f289f147d9a0c5eb820e35", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59014d0a6fb7f546b7f289f147d9a0c5eb820e35/comments", "author": null, "committer": null, "parents": [{"sha": "aaf625e5fa3176cd18cf127b092b653ba24ac4df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aaf625e5fa3176cd18cf127b092b653ba24ac4df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aaf625e5fa3176cd18cf127b092b653ba24ac4df"}], "stats": {"total": 45, "additions": 33, "deletions": 12}, "files": [{"sha": "6c9d17819b67e81c3390007ec851c393018b0a8d", "filename": "gcc/gcc.c", "status": "modified", "additions": 33, "deletions": 12, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59014d0a6fb7f546b7f289f147d9a0c5eb820e35/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59014d0a6fb7f546b7f289f147d9a0c5eb820e35/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=59014d0a6fb7f546b7f289f147d9a0c5eb820e35", "patch": "@@ -534,14 +534,14 @@ static int n_default_compilers\n /* Have gcc do the search.  */\n /* -u* was put back because both BSD and SysV seem to support it.  */\n static char *link_command_spec = \"\\\n-%{!c:%{!M:%{!MM:%{!E:%{!S:ld %X %l %{o*} %{A} %{d} %{e*} %{m} %{N} %{n} \\\n+%{!c:%{!M:%{!MM:%{!E:%{!S:ld %l %X %{o*} %{A} %{d} %{e*} %{m} %{N} %{n} \\\n \t\t\t%{r} %{s} %{T*} %{t} %{u*} %{x} %{z}\\\n \t\t\t%{!A:%{!nostdlib:%S}} \\\n \t\t\t%{L*} %D %o %{!nostdlib:libgcc.a%s %L libgcc.a%s %{!A:%E}}\\n }}}}}\";\n #else\n /* Use -l and have the linker do the search.  */\n static char *link_command_spec = \"\\\n-%{!c:%{!M:%{!MM:%{!E:%{!S:ld %X %l %{o*} %{A} %{d} %{e*} %{m} %{N} %{n} \\\n+%{!c:%{!M:%{!MM:%{!E:%{!S:ld %l %X %{o*} %{A} %{d} %{e*} %{m} %{N} %{n} \\\n \t\t\t%{r} %{s} %{T*} %{t} %{u*} %{x} %{z}\\\n \t\t\t%{!A:%{!nostdlib:%S}} \\\n \t\t\t%{L*} %D %o %{!nostdlib:-lgcc %L -lgcc %{!A:%E}}\\n }}}}}\";\n@@ -1371,19 +1371,19 @@ pexecute (func, program, argv, not_last)\n   FILE *argfile;\n   int i;\n \n-  scmd = (char *)malloc(strlen(program) + strlen(temp_filename) + 6);\n-  sprintf(scmd, \"%s @%s.gp\", program, temp_filename);\n-  argfile = fopen(scmd+strlen(program)+2, \"w\");\n+  scmd = (char *)malloc (strlen (program) + strlen (temp_filename) + 6);\n+  sprintf (scmd, \"%s @%s.gp\", program, temp_filename);\n+  argfile = fopen (scmd+strlen (program) + 2, \"w\");\n   if (argfile == 0)\n-    pfatal_with_name(scmd+strlen(program)+2);\n+    pfatal_with_name (scmd + strlen (program) + 2);\n \n   for (i=1; argv[i]; i++)\n-    fprintf(argfile, \"%s\\n\", argv[i]);\n-  fclose(argfile);\n+    fprintf (argfile, \"%s\\n\", argv[i]);\n+  fclose (argfile);\n \n-  i = system(scmd);\n+  i = system (scmd);\n \n-  remove(scmd+strlen(program)+2);\n+  remove (scmd + strlen (program) + 2);\n   return i << 8;\n }\n \n@@ -2210,6 +2210,10 @@ do_spec_1 (spec, inswitch, soft_matched_part)\n \t      {\n \t\tstruct prefix_list *pl\n \t\t  = (i == 0 ? library_prefix.plist : startfile_prefix.plist);\n+\t\tint bufsize = 100;\n+\t\tchar *buffer = (char *) xmalloc (bufsize);\n+\t\tint idx;\n+\n \t\tfor (; pl; pl = pl->next)\n \t\t  {\n #ifdef RELATIVE_PREFIX_NOT_LINKDIR\n@@ -2230,7 +2234,15 @@ do_spec_1 (spec, inswitch, soft_matched_part)\n \t\t\t    do_spec_1 (\" \", 0, 0);\n #endif\n \t\t\t    do_spec_1 (pl->prefix, 1, 0);\n-\t\t\t    do_spec_1 (machine_suffix, 1, 0);\n+\t\t\t    /* Remove slash from machine_suffix.  */\n+\t\t\t    if (strlen (machine_suffix) >= bufsize)\n+\t\t\t      bufsize = strlen (machine_suffix) * 2 + 1;\n+\t\t\t    buffer = (char *) xrealloc (buffer, bufsize);\n+\t\t\t    strcpy (buffer, machine_suffix);\n+\t\t\t    idx = strlen (buffer);\n+\t\t\t    if (buffer[idx - 1] == '/')\n+\t\t\t      buffer[idx - 1] = 0;\n+\t\t\t    do_spec_1 (buffer, 1, 0);\n \t\t\t    /* Make this a separate argument.  */\n \t\t\t    do_spec_1 (\" \", 0, 0);\n \t\t\t  }\n@@ -2243,12 +2255,21 @@ do_spec_1 (spec, inswitch, soft_matched_part)\n #ifdef SPACE_AFTER_L_OPTION\n \t\t\t    do_spec_1 (\" \", 0, 0);\n #endif\n-\t\t\t    do_spec_1 (pl->prefix, 1, 0);\n+\t\t\t    /* Remove slash from pl->prefix.  */\n+\t\t\t    if (strlen (pl->prefix) >= bufsize)\n+\t\t\t      bufsize = strlen (pl->prefix) * 2 + 1;\n+\t\t\t    buffer = (char *) xrealloc (buffer, bufsize);\n+\t\t\t    strcpy (buffer, pl->prefix);\n+\t\t\t    idx = strlen (buffer);\n+\t\t\t    if (buffer[idx - 1] == '/')\n+\t\t\t      buffer[idx - 1] = 0;\n+\t\t\t    do_spec_1 (buffer, 1, 0);\n \t\t\t    /* Make this a separate argument.  */\n \t\t\t    do_spec_1 (\" \", 0, 0);\n \t\t\t  }\n \t\t      }\n \t\t  }\n+\t\tfree (buffer);\n \t      }\n \t    break;\n "}]}