{"sha": "ca11219d65a65220fcf26e16be26c134c0100874", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2ExMTIxOWQ2NWE2NTIyMGZjZjI2ZTE2YmUyNmMxMzRjMDEwMDg3NA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-02-25T14:58:29Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-02-25T14:58:29Z"}, "message": "[multiple changes]\n\n2014-02-25  Yannick Moy  <moy@adacore.com>\n\n\t* sem_prag.adb (Analyze_Pragma/Pragma_Validity_Checks): Ignore pragma\n\tValidity_Checks in GNATprove and CodePeer modes.\n\n2014-02-25  Pascal Obry  <obry@adacore.com>\n\n\t* prj-attr.adb, projects.texi, snames.ads-tmpl: Add package Install's\n\tArtifacts attribute.\n\nFrom-SVN: r208130", "tree": {"sha": "cf4a37a30c72257e17b1ecf95ca80845b7984883", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cf4a37a30c72257e17b1ecf95ca80845b7984883"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca11219d65a65220fcf26e16be26c134c0100874", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca11219d65a65220fcf26e16be26c134c0100874", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca11219d65a65220fcf26e16be26c134c0100874", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca11219d65a65220fcf26e16be26c134c0100874/comments", "author": null, "committer": null, "parents": [{"sha": "6e32b1abbaaf5af6b96c055b432b7f6fea6dd814", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e32b1abbaaf5af6b96c055b432b7f6fea6dd814", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e32b1abbaaf5af6b96c055b432b7f6fea6dd814"}], "stats": {"total": 120, "additions": 75, "deletions": 45}, "files": [{"sha": "5bd6574f0f3126da391bd45e188ec40b3f75da0e", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca11219d65a65220fcf26e16be26c134c0100874/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca11219d65a65220fcf26e16be26c134c0100874/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=ca11219d65a65220fcf26e16be26c134c0100874", "patch": "@@ -1,3 +1,13 @@\n+2014-02-25  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_prag.adb (Analyze_Pragma/Pragma_Validity_Checks): Ignore pragma\n+\tValidity_Checks in GNATprove and CodePeer modes.\n+\n+2014-02-25  Pascal Obry  <obry@adacore.com>\n+\n+\t* prj-attr.adb, projects.texi, snames.ads-tmpl: Add package Install's\n+\tArtifacts attribute.\n+\n 2014-02-25  Yannick Moy  <moy@adacore.com>\n \n \t* sem_prag.adb: Minor reformatting to get consistent messages."}, {"sha": "04ce48a4aa8190e1ed7e3466929badd698f9f10f", "filename": "gcc/ada/prj-attr.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca11219d65a65220fcf26e16be26c134c0100874/gcc%2Fada%2Fprj-attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca11219d65a65220fcf26e16be26c134c0100874/gcc%2Fada%2Fprj-attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-attr.adb?ref=ca11219d65a65220fcf26e16be26c134c0100874", "patch": "@@ -364,6 +364,7 @@ package body Prj.Attr is\n    \"SVlib_subdir#\" &\n    \"SVproject_subdir#\" &\n    \"SVactive#\" &\n+   \"LAartifacts#\" &\n \n    --  package Remote\n "}, {"sha": "e23f9fadd832c7cc1e37b625b6bc609e0fb1cd35", "filename": "gcc/ada/projects.texi", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca11219d65a65220fcf26e16be26c134c0100874/gcc%2Fada%2Fprojects.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca11219d65a65220fcf26e16be26c134c0100874/gcc%2Fada%2Fprojects.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprojects.texi?ref=ca11219d65a65220fcf26e16be26c134c0100874", "patch": "@@ -1085,6 +1085,14 @@ The following attributes can be defined in package @code{Install}:\n Whether the project is to be installed, values are @code{true}\n (default) or @code{false}.\n \n+@item @b{Artifacts}\n+@cindex @code{Artifacts}\n+\n+An array attribute to declare a set of files not part of the sources\n+to be installed. The array discriminant is the directory where the\n+file is to be installed. If a relative directory then Prefix (see\n+below) is prepended.\n+\n @item @b{Prefix}:\n @cindex @code{Prefix}\n "}, {"sha": "c9c15172374fd99209b57eac594fdb93aea4573c", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 55, "deletions": 45, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca11219d65a65220fcf26e16be26c134c0100874/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca11219d65a65220fcf26e16be26c134c0100874/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=ca11219d65a65220fcf26e16be26c134c0100874", "patch": "@@ -5238,10 +5238,9 @@ package body Sem_Prag is\n                end if;\n             end if;\n \n-            --  Retain a copy of the pre- or postcondition pragma for formal\n-            --  verification purposes. The copy is needed because the pragma is\n-            --  expanded into other constructs which are not acceptable in the\n-            --  N_Contract node.\n+            --  Retain copy of the pre/postcondition pragma in GNATprove mode.\n+            --  The copy is needed because the pragma is expanded into other\n+            --  constructs which are not acceptable in the N_Contract node.\n \n             if Acts_As_Spec (PO)\n               and then GNATprove_Mode\n@@ -5279,10 +5278,9 @@ package body Sem_Prag is\n \n          elsif Nkind (PO) = N_Compilation_Unit_Aux then\n \n-            --  In formal verification mode, analyze pragma expression for\n-            --  correctness, as it is not expanded later. Ditto in ASIS_Mode\n-            --  where there is no later point at which the aspect will be\n-            --  analyzed.\n+            --  In GNATprove mode, analyze pragma expression for correctness,\n+            --  as it is not expanded later. Ditto in ASIS_Mode where there is\n+            --  no later point at which the aspect will be analyzed.\n \n             if GNATprove_Mode or ASIS_Mode then\n                Analyze_Pre_Post_Condition_In_Decl_Part\n@@ -9121,8 +9119,8 @@ package body Sem_Prag is\n       --  Start of processing for Process_Suppress_Unsuppress\n \n       begin\n-         --  Ignore pragma Suppress/Unsuppress in CodePeer and SPARK modes on\n-         --  user code: we want to generate checks for analysis purposes, as\n+         --  Ignore pragma Suppress/Unsuppress in CodePeer and GNATprove modes\n+         --  on user code: we want to generate checks for analysis purposes, as\n          --  set respectively by -gnatC and -gnatd.F\n \n          if (CodePeer_Mode or GNATprove_Mode)\n@@ -15026,8 +15024,8 @@ package body Sem_Prag is\n             Check_Restriction (No_Initialize_Scalars, N);\n \n             --  Initialize_Scalars creates false positives in CodePeer, and\n-            --  incorrect negative results in SPARK mode, so ignore this pragma\n-            --  in these modes.\n+            --  incorrect negative results in GNATprove mode, so ignore this\n+            --  pragma in these modes.\n \n             if not Restriction_Active (No_Initialize_Scalars)\n               and then not (CodePeer_Mode or GNATprove_Mode)\n@@ -15148,8 +15146,8 @@ package body Sem_Prag is\n          when Pragma_Inline_Always =>\n             GNAT_Pragma;\n \n-            --  Pragma always active unless in CodePeer or SPARK mode, since\n-            --  this causes walk order issues.\n+            --  Pragma always active unless in CodePeer or GNATprove mode,\n+            --  since this causes walk order issues.\n \n             if not (CodePeer_Mode or GNATprove_Mode) then\n                Process_Inline (Enabled);\n@@ -16832,8 +16830,8 @@ package body Sem_Prag is\n             Check_Valid_Configuration_Pragma;\n \n             --  Normalize_Scalars creates false positives in CodePeer, and\n-            --  incorrect negative results in SPARK mode, so ignore this pragma\n-            --  in these modes.\n+            --  incorrect negative results in GNATprove mode, so ignore this\n+            --  pragma in these modes.\n \n             if not (CodePeer_Mode or GNATprove_Mode) then\n                Normalize_Scalars := True;\n@@ -20964,7 +20962,7 @@ package body Sem_Prag is\n          --  pragma Validity_Checks (On | Off | ALL_CHECKS | STRING_LITERAL);\n \n          when Pragma_Validity_Checks => Validity_Checks : declare\n-            A  : constant Node_Id   := Get_Pragma_Arg (Arg1);\n+            A  : constant Node_Id := Get_Pragma_Arg (Arg1);\n             S  : String_Id;\n             C  : Char_Code;\n \n@@ -20973,37 +20971,49 @@ package body Sem_Prag is\n             Check_Arg_Count (1);\n             Check_No_Identifiers;\n \n-            if Nkind (A) = N_String_Literal then\n-               S   := Strval (A);\n+            --  Pragma always active unless in CodePeer or GNATprove modes,\n+            --  which use a fixed configuration of validity checks.\n \n-               declare\n-                  Slen    : constant Natural := Natural (String_Length (S));\n-                  Options : String (1 .. Slen);\n-                  J       : Natural;\n+            if not (CodePeer_Mode or GNATprove_Mode) then\n+               if Nkind (A) = N_String_Literal then\n+                  S := Strval (A);\n \n-               begin\n-                  J := 1;\n-                  loop\n-                     C := Get_String_Char (S, Int (J));\n-                     exit when not In_Character_Range (C);\n-                     Options (J) := Get_Character (C);\n+                  declare\n+                     Slen    : constant Natural := Natural (String_Length (S));\n+                     Options : String (1 .. Slen);\n+                     J       : Natural;\n \n-                     if J = Slen then\n-                        Set_Validity_Check_Options (Options);\n-                        exit;\n-                     else\n-                        J := J + 1;\n-                     end if;\n-                  end loop;\n-               end;\n+                  begin\n+                     --  Couldn't we use a for loop here over Options'Range???\n \n-            elsif Nkind (A) = N_Identifier then\n-               if Chars (A) = Name_All_Checks then\n-                  Set_Validity_Check_Options (\"a\");\n-               elsif Chars (A) = Name_On then\n-                  Validity_Checks_On := True;\n-               elsif Chars (A) = Name_Off then\n-                  Validity_Checks_On := False;\n+                     J := 1;\n+                     loop\n+                        C := Get_String_Char (S, Int (J));\n+\n+                        --  This is a weird test, it skips setting validity\n+                        --  checks entirely if any element of S is out of\n+                        --  range of Character, what is that about ???\n+\n+                        exit when not In_Character_Range (C);\n+                        Options (J) := Get_Character (C);\n+\n+                        if J = Slen then\n+                           Set_Validity_Check_Options (Options);\n+                           exit;\n+                        else\n+                           J := J + 1;\n+                        end if;\n+                     end loop;\n+                  end;\n+\n+               elsif Nkind (A) = N_Identifier then\n+                  if Chars (A) = Name_All_Checks then\n+                     Set_Validity_Check_Options (\"a\");\n+                  elsif Chars (A) = Name_On then\n+                     Validity_Checks_On := True;\n+                  elsif Chars (A) = Name_Off then\n+                     Validity_Checks_On := False;\n+                  end if;\n                end if;\n             end if;\n          end Validity_Checks;\n@@ -23119,7 +23129,7 @@ package body Sem_Prag is\n         and then not Has_Null_State\n       then\n          Error_Msg_NE\n-           (\"useless refinement, subprogram & does not depends on abstract \"\n+           (\"useless refinement, subprogram & does not depend on abstract \"\n             & \"state with visible refinement\", N, Spec_Id);\n          return;\n       end if;"}, {"sha": "fb3660024c1747390e0240a9b43ffb5ace92529a", "filename": "gcc/ada/snames.ads-tmpl", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca11219d65a65220fcf26e16be26c134c0100874/gcc%2Fada%2Fsnames.ads-tmpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca11219d65a65220fcf26e16be26c134c0100874/gcc%2Fada%2Fsnames.ads-tmpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.ads-tmpl?ref=ca11219d65a65220fcf26e16be26c134c0100874", "patch": "@@ -1232,6 +1232,7 @@ package Snames is\n    Name_Archive_Builder_Append_Option      : constant Name_Id := N + $;\n    Name_Archive_Indexer                    : constant Name_Id := N + $;\n    Name_Archive_Suffix                     : constant Name_Id := N + $;\n+   Name_Artifacts                          : constant Name_Id := N + $;\n    Name_Artifacts_In_Exec_Dir              : constant Name_Id := N + $; -- GB\n    Name_Artifacts_In_Object_Dir            : constant Name_Id := N + $; -- GB\n    Name_Binder                             : constant Name_Id := N + $;"}]}