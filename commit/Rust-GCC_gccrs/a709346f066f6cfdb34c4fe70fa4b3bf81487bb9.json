{"sha": "a709346f066f6cfdb34c4fe70fa4b3bf81487bb9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTcwOTM0NmYwNjZmNmNmZGIzNGM0ZmU3MGZhNGIzYmY4MTQ4N2JiOQ==", "commit": {"author": {"name": "Francois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2014-07-07T07:47:41Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2014-07-07T07:47:41Z"}, "message": "fpu-387.h, [...]: Use static assertions.\n\n\t* config/fpu-387.h, config/fpu-aix.h, config/fpu-sysv.h,\n\tconfig/fpu-glibc.h: Use static assertions.\n\nFrom-SVN: r212323", "tree": {"sha": "b8e4282de31de91e2dd8eec2555c0544331c84ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b8e4282de31de91e2dd8eec2555c0544331c84ec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a709346f066f6cfdb34c4fe70fa4b3bf81487bb9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a709346f066f6cfdb34c4fe70fa4b3bf81487bb9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a709346f066f6cfdb34c4fe70fa4b3bf81487bb9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a709346f066f6cfdb34c4fe70fa4b3bf81487bb9/comments", "author": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b38fe0e93229eefa1259e45f90c5d936b288a3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b38fe0e93229eefa1259e45f90c5d936b288a3d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b38fe0e93229eefa1259e45f90c5d936b288a3d"}], "stats": {"total": 55, "additions": 25, "deletions": 30}, "files": [{"sha": "03f6f2ac60afaacf0e8774b2d27ffa8117c1be07", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a709346f066f6cfdb34c4fe70fa4b3bf81487bb9/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a709346f066f6cfdb34c4fe70fa4b3bf81487bb9/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=a709346f066f6cfdb34c4fe70fa4b3bf81487bb9", "patch": "@@ -1,3 +1,8 @@\n+2014-07-07  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\t* config/fpu-387.h, config/fpu-aix.h, config/fpu-sysv.h,\n+\tconfig/fpu-glibc.h: Use static assertions.\n+\n 2014-07-05  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* configure, config.h.in: Regenerate."}, {"sha": "2c5a5fcc6fa71af8f52ffda5de5141c9e1ef90d2", "filename": "libgfortran/config/fpu-387.h", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a709346f066f6cfdb34c4fe70fa4b3bf81487bb9/libgfortran%2Fconfig%2Ffpu-387.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a709346f066f6cfdb34c4fe70fa4b3bf81487bb9/libgfortran%2Fconfig%2Ffpu-387.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfig%2Ffpu-387.h?ref=a709346f066f6cfdb34c4fe70fa4b3bf81487bb9", "patch": "@@ -23,8 +23,6 @@ a copy of the GCC Runtime Library Exception along with this program;\n see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n <http://www.gnu.org/licenses/>.  */\n \n-#include <assert.h>\n-\n #ifndef __SSE_MATH__\n #include \"cpuid.h\"\n #endif\n@@ -85,6 +83,11 @@ typedef struct\n my_fenv_t;\n \n \n+/* Check we can actually store the FPU state in the allocated size.  */\n+_Static_assert (sizeof(my_fenv_t) <= (size_t) GFC_FPE_STATE_BUFFER_SIZE,\n+\t\t\"GFC_FPE_STATE_BUFFER_SIZE is too small\");\n+\n+\n /* Raise the supported floating-point exceptions from EXCEPTS.  Other\n    bits in EXCEPTS are ignored.  Code originally borrowed from\n    libatomic/config/x86/fenv.c.  */\n@@ -429,9 +432,6 @@ get_fpu_state (void *state)\n {\n   my_fenv_t *envp = state;\n \n-  /* Check we can actually store the FPU state in the allocated size.  */\n-  assert (sizeof(my_fenv_t) <= (size_t) GFC_FPE_STATE_BUFFER_SIZE);\n-\n   __asm__ __volatile__ (\"fnstenv\\t%0\" : \"=m\" (*envp));\n \n   /* fnstenv has the side effect of masking all exceptions, so we need\n@@ -447,9 +447,6 @@ set_fpu_state (void *state)\n {\n   my_fenv_t *envp = state;\n \n-  /* Check we can actually store the FPU state in the allocated size.  */\n-  assert (sizeof(my_fenv_t) <= (size_t) GFC_FPE_STATE_BUFFER_SIZE);\n-\n   /* glibc sources (sysdeps/x86_64/fpu/fesetenv.c) do something more\n      complex than this, but I think it suffices in our case.  */\n   __asm__ __volatile__ (\"fldenv\\t%0\" : : \"m\" (*envp));"}, {"sha": "c2970452bc13e05801489a584c398b549149b527", "filename": "libgfortran/config/fpu-aix.h", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a709346f066f6cfdb34c4fe70fa4b3bf81487bb9/libgfortran%2Fconfig%2Ffpu-aix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a709346f066f6cfdb34c4fe70fa4b3bf81487bb9/libgfortran%2Fconfig%2Ffpu-aix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfig%2Ffpu-aix.h?ref=a709346f066f6cfdb34c4fe70fa4b3bf81487bb9", "patch": "@@ -38,6 +38,11 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #endif\n \n \n+/* Check we can actually store the FPU state in the allocated size.  */\n+_Static_assert (sizeof(fenv_t) <= (size_t) GFC_FPE_STATE_BUFFER_SIZE,\n+\t\t\"GFC_FPE_STATE_BUFFER_SIZE is too small\");\n+\n+\n void\n set_fpu_trap_exceptions (int trap, int notrap)\n {\n@@ -403,18 +408,12 @@ support_fpu_rounding_mode (int mode)\n void\n get_fpu_state (void *state)\n {\n-  /* Check we can actually store the FPU state in the allocated size.  */\n-  assert (sizeof(fenv_t) <= GFC_FPE_STATE_BUFFER_SIZE);\n-\n   fegetenv (state);\n }\n \n void\n set_fpu_state (void *state)\n {\n-  /* Check we can actually store the FPU state in the allocated size.  */\n-  assert (sizeof(fenv_t) <= GFC_FPE_STATE_BUFFER_SIZE);\n-\n   fesetenv (state);\n }\n "}, {"sha": "b6ea1203a6264eccbf348631939e6c58889213fb", "filename": "libgfortran/config/fpu-glibc.h", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a709346f066f6cfdb34c4fe70fa4b3bf81487bb9/libgfortran%2Fconfig%2Ffpu-glibc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a709346f066f6cfdb34c4fe70fa4b3bf81487bb9/libgfortran%2Fconfig%2Ffpu-glibc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfig%2Ffpu-glibc.h?ref=a709346f066f6cfdb34c4fe70fa4b3bf81487bb9", "patch": "@@ -27,13 +27,16 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n    feenableexcept function in fenv.h to set individual exceptions\n    (there's nothing to do that in C99).  */\n \n-#include <assert.h>\n-\n #ifdef HAVE_FENV_H\n #include <fenv.h>\n #endif\n \n \n+/* Check we can actually store the FPU state in the allocated size.  */\n+_Static_assert (sizeof(fenv_t) <= (size_t) GFC_FPE_STATE_BUFFER_SIZE,\n+\t\t\"GFC_FPE_STATE_BUFFER_SIZE is too small\");\n+\n+\n void set_fpu_trap_exceptions (int trap, int notrap)\n {\n #ifdef FE_INVALID\n@@ -416,19 +419,13 @@ support_fpu_rounding_mode (int mode)\n void\n get_fpu_state (void *state)\n {\n-  /* Check we can actually store the FPU state in the allocated size.  */\n-  assert (sizeof(fenv_t) <= GFC_FPE_STATE_BUFFER_SIZE);\n-\n   fegetenv (state);\n }\n \n \n void\n set_fpu_state (void *state)\n {\n-  /* Check we can actually store the FPU state in the allocated size.  */\n-  assert (sizeof(fenv_t) <= GFC_FPE_STATE_BUFFER_SIZE);\n-\n   fesetenv (state);\n }\n "}, {"sha": "97eed2833c68c223bf431ac631178dddb3742e86", "filename": "libgfortran/config/fpu-sysv.h", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a709346f066f6cfdb34c4fe70fa4b3bf81487bb9/libgfortran%2Fconfig%2Ffpu-sysv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a709346f066f6cfdb34c4fe70fa4b3bf81487bb9/libgfortran%2Fconfig%2Ffpu-sysv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfig%2Ffpu-sysv.h?ref=a709346f066f6cfdb34c4fe70fa4b3bf81487bb9", "patch": "@@ -25,8 +25,6 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n \n /* FPU-related code for SysV platforms with fpsetmask().  */\n \n-#include <assert.h>\n-\n /* BSD and Solaris systems have slightly different types and functions\n    naming.  We deal with these here, to simplify the code below.  */\n \n@@ -444,14 +442,16 @@ typedef struct\n } fpu_state_t;\n \n \n+/* Check we can actually store the FPU state in the allocated size.  */\n+_Static_assert (sizeof(fpu_state_t) <= (size_t) GFC_FPE_STATE_BUFFER_SIZE,\n+\t\t\"GFC_FPE_STATE_BUFFER_SIZE is too small\");\n+\n+\n void\n get_fpu_state (void *s)\n {\n   fpu_state_t *state = s;\n \n-  /* Check we can actually store the FPU state in the allocated size.  */\n-  assert (sizeof(fpu_state_t) <= GFC_FPE_STATE_BUFFER_SIZE);\n-\n   state->mask = fpgetmask ();\n   state->sticky = fpgetsticky ();\n   state->round = fpgetround ();\n@@ -462,9 +462,6 @@ set_fpu_state (void *s)\n {\n   fpu_state_t *state = s;\n \n-  /* Check we can actually store the FPU state in the allocated size.  */\n-  assert (sizeof(fpu_state_t) <= GFC_FPE_STATE_BUFFER_SIZE);\n-\n   fpsetmask (state->mask);\n   FPSETSTICKY (state->sticky);\n   fpsetround (state->round);"}]}