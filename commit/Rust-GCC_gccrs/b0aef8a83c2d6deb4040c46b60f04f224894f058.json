{"sha": "b0aef8a83c2d6deb4040c46b60f04f224894f058", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjBhZWY4YTgzYzJkNmRlYjQwNDBjNDZiNjBmMDRmMjI0ODk0ZjA1OA==", "commit": {"author": {"name": "Maxim Kuvyrkov", "email": "maxim@codesourcery.com", "date": "2010-04-08T08:20:36Z"}, "committer": {"name": "Maxim Kuvyrkov", "email": "mkuvyrkov@gcc.gnu.org", "date": "2010-04-08T08:20:36Z"}, "message": "re PR middle-end/40815 (redundant neg instruction caused by loop-invariant)\n\n\tPR middle-end/40815\n\t* tree-ssa-reassoc.c (broken_up_substracts): Rename to plus_negates.\n\t(negate_value): Move code to push elements to broken_up_substracts ...\n\t(eliminate_plus_minus_pair): ... here.  Push operands that have no\n\tnegative pair to plus_negates.\n\t(repropagate_negates, init_reassoc, fini_reassoc): Update.\n\n\tPR middle-end/40815\n\t* gcc.dg/tree-ssa/reassoc-19.c: New.\n\nFrom-SVN: r158105", "tree": {"sha": "6ce00310b5e89f1a541aa38b1128562367380e03", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6ce00310b5e89f1a541aa38b1128562367380e03"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b0aef8a83c2d6deb4040c46b60f04f224894f058", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0aef8a83c2d6deb4040c46b60f04f224894f058", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0aef8a83c2d6deb4040c46b60f04f224894f058", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0aef8a83c2d6deb4040c46b60f04f224894f058/comments", "author": null, "committer": null, "parents": [{"sha": "0b2de948243781018a9d292d0b1ebdbf3c8cbb31", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b2de948243781018a9d292d0b1ebdbf3c8cbb31", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b2de948243781018a9d292d0b1ebdbf3c8cbb31"}], "stats": {"total": 50, "additions": 44, "deletions": 6}, "files": [{"sha": "fc4a4a9f0d2e5338633387d6d2d632d03081515c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0aef8a83c2d6deb4040c46b60f04f224894f058/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0aef8a83c2d6deb4040c46b60f04f224894f058/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b0aef8a83c2d6deb4040c46b60f04f224894f058", "patch": "@@ -1,3 +1,12 @@\n+2010-04-08  Maxim Kuvyrkov  <maxim@codesourcery.com>\n+\n+\tPR middle-end/40815\n+\t* tree-ssa-reassoc.c (broken_up_substracts): Rename to plus_negates.\n+\t(negate_value): Move code to push elements to broken_up_substracts ...\n+\t(eliminate_plus_minus_pair): ... here.  Push operands that have no\n+\tnegative pair to plus_negates.\n+\t(repropagate_negates, init_reassoc, fini_reassoc): Update.\n+\n 2010-04-07  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n \n \t* doc/install.texi (Configuration): Move description of"}, {"sha": "30ee707c3d3ff3f4aa2983c29066ca8807910d4f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0aef8a83c2d6deb4040c46b60f04f224894f058/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0aef8a83c2d6deb4040c46b60f04f224894f058/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b0aef8a83c2d6deb4040c46b60f04f224894f058", "patch": "@@ -1,3 +1,8 @@\n+2010-04-08  Maxim Kuvyrkov  <maxim@codesourcery.com>\n+\n+\tPR middle-end/40815\n+\t* gcc.dg/tree-ssa/reassoc-19.c: New.\n+\n 2010-04-07  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/18624"}, {"sha": "c13e1d36fedd56a996e9c3f6dfa48494c9207492", "filename": "gcc/testsuite/gcc.dg/tree-ssa/reassoc-19.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0aef8a83c2d6deb4040c46b60f04f224894f058/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Freassoc-19.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0aef8a83c2d6deb4040c46b60f04f224894f058/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Freassoc-19.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Freassoc-19.c?ref=b0aef8a83c2d6deb4040c46b60f04f224894f058", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Os -fdump-tree-reassoc2\" } */\n+\n+/* Slightly changed testcase from PR middle-end/40815.  */\n+void bar(char*, char*, int);\n+void foo(char* left, char* rite, int element)\n+{\n+  while (left <= rite)\n+  {\n+    /* This should expand into\n+       D.zzzz = D.zzzz - D.xxxx;\n+       and NOT to\n+       D.D.yyyy = -D.xxxx; D.zzzz = D.zzzz + D.yyyy;  */\n+    rite -= element;\n+    bar(left, rite, element);\n+  }\n+}\n+\n+/* There should be no \" + \" in the dump.  */\n+/* { dg-final { scan-tree-dump-times \" \\\\\\+ \" 0 \"reassoc2\" } } */\n+/* { dg-final { cleanup-tree-dump \"reassoc2\" } } */"}, {"sha": "cf05de5be711f05a0dc02432664023bb2d4939c1", "filename": "gcc/tree-ssa-reassoc.c", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0aef8a83c2d6deb4040c46b60f04f224894f058/gcc%2Ftree-ssa-reassoc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0aef8a83c2d6deb4040c46b60f04f224894f058/gcc%2Ftree-ssa-reassoc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-reassoc.c?ref=b0aef8a83c2d6deb4040c46b60f04f224894f058", "patch": "@@ -467,6 +467,8 @@ eliminate_duplicate_pair (enum tree_code opcode,\n   return false;\n }\n \n+static VEC(tree, heap) *plus_negates;\n+\n /* If OPCODE is PLUS_EXPR, CURR->OP is really a negate expression,\n    look in OPS for a corresponding positive operation to cancel it\n    out.  If we find one, remove the other from OPS, replace\n@@ -521,6 +523,10 @@ eliminate_plus_minus_pair (enum tree_code opcode,\n \t}\n     }\n \n+  /* CURR->OP is a negate expr in a plus expr: save it for later\n+     inspection in repropagate_negates().  */\n+  VEC_safe_push (tree, heap, plus_negates, curr->op);\n+\n   return false;\n }\n \n@@ -1500,8 +1506,6 @@ get_single_immediate_use (tree lhs)\n   return NULL;\n }\n \n-static VEC(tree, heap) *broken_up_subtracts;\n-\n /* Recursively negate the value of TONEGATE, and return the SSA_NAME\n    representing the negated value.  Insertions of any necessary\n    instructions go before GSI.\n@@ -1544,7 +1548,6 @@ negate_value (tree tonegate, gimple_stmt_iterator *gsi)\n   tonegate = fold_build1 (NEGATE_EXPR, TREE_TYPE (tonegate), tonegate);\n   resultofnegate = force_gimple_operand_gsi (gsi, tonegate, true,\n \t\t\t\t\t     NULL_TREE, true, GSI_SAME_STMT);\n-  VEC_safe_push (tree, heap, broken_up_subtracts, resultofnegate);\n   return resultofnegate;\n }\n \n@@ -1700,7 +1703,7 @@ repropagate_negates (void)\n   unsigned int i = 0;\n   tree negate;\n \n-  for (i = 0; VEC_iterate (tree, broken_up_subtracts, i, negate); i++)\n+  for (i = 0; VEC_iterate (tree, plus_negates, i, negate); i++)\n     {\n       gimple user = get_single_immediate_use (negate);\n \n@@ -2014,7 +2017,7 @@ init_reassoc (void)\n \n   free (bbs);\n   calculate_dominance_info (CDI_POST_DOMINATORS);\n-  broken_up_subtracts = NULL;\n+  plus_negates = NULL;\n }\n \n /* Cleanup after the reassociation pass, and print stats if\n@@ -2035,7 +2038,7 @@ fini_reassoc (void)\n   pointer_map_destroy (operand_rank);\n   free_alloc_pool (operand_entry_pool);\n   free (bb_rank);\n-  VEC_free (tree, heap, broken_up_subtracts);\n+  VEC_free (tree, heap, plus_negates);\n   free_dominance_info (CDI_POST_DOMINATORS);\n   loop_optimizer_finalize ();\n }"}]}