{"sha": "a5b378d6f7919d686c194efa5f322914b4dc744d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTViMzc4ZDZmNzkxOWQ2ODZjMTk0ZWZhNWYzMjI5MTRiNGRjNzQ0ZA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2003-04-02T22:19:30Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2003-04-02T22:19:30Z"}, "message": "i386.c (override_options): Disable red zone by default on i386.\n\n\t* i386.c (override_options):  Disable red zone by default on i386.\n\t(compute_frame_layout, ix86_force_to_memory, ix86_free_from_memory):\n\tDo not test TARGET_64BIT together with TARGET_RED_ZONE\n\nFrom-SVN: r65178", "tree": {"sha": "5423b76b2f79b1a8bd05ad0220268da746fe3917", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5423b76b2f79b1a8bd05ad0220268da746fe3917"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a5b378d6f7919d686c194efa5f322914b4dc744d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5b378d6f7919d686c194efa5f322914b4dc744d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5b378d6f7919d686c194efa5f322914b4dc744d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5b378d6f7919d686c194efa5f322914b4dc744d/comments", "author": null, "committer": null, "parents": [{"sha": "8fc9a7ba7b2f94550dcc912b917d7429ea1f081f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fc9a7ba7b2f94550dcc912b917d7429ea1f081f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8fc9a7ba7b2f94550dcc912b917d7429ea1f081f"}], "stats": {"total": 24, "additions": 19, "deletions": 5}, "files": [{"sha": "7ee299bb1aea518b011edaff8ce478556fb6a1ea", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5b378d6f7919d686c194efa5f322914b4dc744d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5b378d6f7919d686c194efa5f322914b4dc744d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a5b378d6f7919d686c194efa5f322914b4dc744d", "patch": "@@ -1,3 +1,9 @@\n+Thu Apr  3 00:18:49 CEST 2003  Jan HUbicka  <jh@suse.cz>\n+\n+\t* i386.c (override_options):  Disable red zone by default on i386.\n+\t(compute_frame_layout, ix86_force_to_memory, ix86_free_from_memory):  \n+\tDo not test TARGET_64BIT together with TARGET_RED_ZONE\n+\n 2003-04-02  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* config/h8300/h8300.md (a peephole2): Tighten the condition."}, {"sha": "80a280fbcf03f205a579bc18d61a4b981d323530", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5b378d6f7919d686c194efa5f322914b4dc744d/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5b378d6f7919d686c194efa5f322914b4dc744d/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=a5b378d6f7919d686c194efa5f322914b4dc744d", "patch": "@@ -1380,7 +1380,13 @@ override_options ()\n       ix86_fpmath = FPMATH_SSE;\n      }\n   else\n-    ix86_fpmath = FPMATH_387;\n+    {\n+      ix86_fpmath = FPMATH_387;\n+      /* i386 ABI does not specify red zone.  It still makes sense to use it\n+         when programmer takes care to stack from being destroyed.  */\n+      if (!(target_flags_explicit & MASK_NO_RED_ZONE))\n+        target_flags |= MASK_NO_RED_ZONE;\n+    }\n \n   if (ix86_fpmath_string != 0)\n     {\n@@ -5026,7 +5032,7 @@ ix86_compute_frame_layout (frame)\n   if (!frame->to_allocate && frame->nregs <= 1)\n     frame->save_regs_using_mov = false;\n \n-  if (TARGET_64BIT && TARGET_RED_ZONE && current_function_sp_is_unchanging\n+  if (TARGET_RED_ZONE && current_function_sp_is_unchanging\n       && current_function_is_leaf)\n     {\n       frame->red_zone_size = frame->to_allocate;\n@@ -6074,11 +6080,13 @@ legitimate_address_p (mode, addr, strict)\n \t     that never results in lea, this seems to be easier and\n \t     correct fix for crash to disable this test.  */\n \t}\n+#if 0\n       else if (!CONSTANT_ADDRESS_P (disp))\n \t{\n \t  reason = \"displacement is not constant\";\n \t  goto report_error;\n \t}\n+#endif\n       else if (TARGET_64BIT && !x86_64_sign_extended_value (disp))\n \t{\n \t  reason = \"displacement is out of range\";\n@@ -14572,15 +14580,15 @@ ix86_force_to_memory (mode, operand)\n   rtx result;\n   if (!reload_completed)\n     abort ();\n-  if (TARGET_64BIT && TARGET_RED_ZONE)\n+  if (TARGET_RED_ZONE)\n     {\n       result = gen_rtx_MEM (mode,\n \t\t\t    gen_rtx_PLUS (Pmode,\n \t\t\t\t\t  stack_pointer_rtx,\n \t\t\t\t\t  GEN_INT (-RED_ZONE_SIZE)));\n       emit_move_insn (result, operand);\n     }\n-  else if (TARGET_64BIT && !TARGET_RED_ZONE)\n+  else if (!TARGET_RED_ZONE && TARGET_64BIT)\n     {\n       switch (mode)\n \t{\n@@ -14649,7 +14657,7 @@ void\n ix86_free_from_memory (mode)\n      enum machine_mode mode;\n {\n-  if (!TARGET_64BIT || !TARGET_RED_ZONE)\n+  if (!TARGET_RED_ZONE)\n     {\n       int size;\n "}]}