{"sha": "32e0a7d983cd3076bbdff448e583773ee4081a37", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzJlMGE3ZDk4M2NkMzA3NmJiZGZmNDQ4ZTU4Mzc3M2VlNDA4MWEzNw==", "commit": {"author": {"name": "Kugan Vivekanandarajah", "email": "kuganv@linaro.org", "date": "2015-06-02T22:53:15Z"}, "committer": {"name": "Kugan Vivekanandarajah", "email": "kugan@gcc.gnu.org", "date": "2015-06-02T22:53:15Z"}, "message": "re PR target/65768 (sub-optimimal code for constant Uses in loop)\n\ngcc/ChangeLog:\n\n2015-06-03  Kugan Vivekanandarajah  <kuganv@linaro.org>\n\t    Zhenqiang Chen  <zhenqiang.chen@linaro.org>\n\n\tPR target/65768\n\t* cprop.c (try_replace_reg): Check cost of constants before propagating.\n\n\ngcc/testsuite/ChangeLog:\n\n2015-06-03  Kugan Vivekanandarajah  <kuganv@linaro.org>\n\n\tPR target/65768\n\t* gcc.target/arm/maskdata.c: Remove -fno-gcse.\n\n\nCo-Authored-By: Zhenqiang Chen <zhenqiang.chen@linaro.org>\n\nFrom-SVN: r224048", "tree": {"sha": "aa3f931c05cc63c4985ddf3fb2069f2f31bb9393", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aa3f931c05cc63c4985ddf3fb2069f2f31bb9393"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/32e0a7d983cd3076bbdff448e583773ee4081a37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32e0a7d983cd3076bbdff448e583773ee4081a37", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32e0a7d983cd3076bbdff448e583773ee4081a37", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32e0a7d983cd3076bbdff448e583773ee4081a37/comments", "author": null, "committer": null, "parents": [{"sha": "2b263f6a0133495b978ef20aead430854e5aa538", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b263f6a0133495b978ef20aead430854e5aa538", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b263f6a0133495b978ef20aead430854e5aa538"}], "stats": {"total": 38, "additions": 37, "deletions": 1}, "files": [{"sha": "d1e55c74e1f33883c957f58090622b6a68753533", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32e0a7d983cd3076bbdff448e583773ee4081a37/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32e0a7d983cd3076bbdff448e583773ee4081a37/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=32e0a7d983cd3076bbdff448e583773ee4081a37", "patch": "@@ -1,3 +1,9 @@\n+2015-06-03  Kugan Vivekanandarajah  <kuganv@linaro.org>\n+\t    Zhenqiang Chen  <zhenqiang.chen@linaro.org>\n+\n+\tPR target/65768\n+\t* cprop.c (try_replace_reg): Check cost of constants before propagating.\n+\n 2015-06-02  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \t* config/rs6000/rs6000-modes.def (IFmode): Define IFmode to"}, {"sha": "6a756f3fceda8f0a945dd02b6249420d5d2f6840", "filename": "gcc/cprop.c", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32e0a7d983cd3076bbdff448e583773ee4081a37/gcc%2Fcprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32e0a7d983cd3076bbdff448e583773ee4081a37/gcc%2Fcprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcprop.c?ref=32e0a7d983cd3076bbdff448e583773ee4081a37", "patch": "@@ -766,12 +766,37 @@ try_replace_reg (rtx from, rtx to, rtx_insn *insn)\n   int success = 0;\n   rtx set = single_set (insn);\n \n+  bool check_rtx_costs = true;\n+  bool speed = optimize_bb_for_speed_p (BLOCK_FOR_INSN (insn));\n+  int old_cost = set ? set_rtx_cost (set, speed) : 0;\n+\n+  if ((note != 0\n+      && REG_NOTE_KIND (note) == REG_EQUAL\n+      && (GET_CODE (XEXP (note, 0)) == CONST\n+\t  || CONSTANT_P (XEXP (note, 0))))\n+      || (set && CONSTANT_P (SET_SRC (set))))\n+    check_rtx_costs = false;\n+\n   /* Usually we substitute easy stuff, so we won't copy everything.\n      We however need to take care to not duplicate non-trivial CONST\n      expressions.  */\n   to = copy_rtx (to);\n \n   validate_replace_src_group (from, to, insn);\n+\n+  /* If TO is a constant, check the cost of the set after propagation\n+     to the cost of the set before the propagation.  If the cost is\n+     higher, then do not replace FROM with TO.  */\n+\n+  if (check_rtx_costs\n+      && CONSTANT_P (to)\n+      && (set_rtx_cost (set, speed) > old_cost))\n+    {\n+      cancel_changes (0);\n+      return false;\n+    }\n+\n+\n   if (num_changes_pending () && apply_change_group ())\n     success = 1;\n "}, {"sha": "9175014001db62ff47279a1d560a3634725a4082", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32e0a7d983cd3076bbdff448e583773ee4081a37/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32e0a7d983cd3076bbdff448e583773ee4081a37/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=32e0a7d983cd3076bbdff448e583773ee4081a37", "patch": "@@ -1,3 +1,8 @@\n+2015-06-01  Kugan Vivekanandarajah  <kuganv@linaro.org>\n+\n+\tPR target/65768\n+\t* gcc.target/arm/maskdata.c: Remove -fno-gcse.\n+\n 2015-06-02  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/66380"}, {"sha": "35d2f060d10850c5b50b68e5b597e3d7893bad7d", "filename": "gcc/testsuite/gcc.target/arm/maskdata.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32e0a7d983cd3076bbdff448e583773ee4081a37/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmaskdata.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32e0a7d983cd3076bbdff448e583773ee4081a37/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmaskdata.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmaskdata.c?ref=32e0a7d983cd3076bbdff448e583773ee4081a37", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \" -O2 -fno-gcse \" }  */\n+/* { dg-options \" -O2\" }  */\n /* { dg-require-effective-target arm_thumb2_ok } */\n \n #define MASK 0xff00ff"}]}