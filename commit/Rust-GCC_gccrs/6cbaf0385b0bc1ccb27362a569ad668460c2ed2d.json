{"sha": "6cbaf0385b0bc1ccb27362a569ad668460c2ed2d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmNiYWYwMzg1YjBiYzFjY2IyNzM2MmE1NjlhZDY2ODQ2MGMyZWQyZA==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2003-09-25T15:35:21Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-09-25T15:35:21Z"}, "message": "2003-09-25  Michael Koch  <konqueror@gmx.de>\n\n\t* gnu/java/nio/SelectorImpl.java\n\t(selectNow): Made final, throws IOException.\n\t(select): Likewise.\n\t(getFDsAsArray): Made final.\n\t(selectedKeys): Likewise.\n\t(wakeup): Likewise.\n\t(deregisterCancelledKeys): Likewise.\n\t(register): Likewise.\n\t(ass): Removed.\n\t(add_selected): Removed.\n\t* gnu/java/nio/natSelectorImpl.cc:\n\tNo need to include bstring.h or gcj/cni.h.\n\t(helper_put_filedescriptors): Rewritten.\n\t(helper_get_filedescriptors): Rewritten.\n\nFrom-SVN: r71779", "tree": {"sha": "91b112227de2473bd988da306c97292f4e5e6325", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/91b112227de2473bd988da306c97292f4e5e6325"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6cbaf0385b0bc1ccb27362a569ad668460c2ed2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cbaf0385b0bc1ccb27362a569ad668460c2ed2d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6cbaf0385b0bc1ccb27362a569ad668460c2ed2d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cbaf0385b0bc1ccb27362a569ad668460c2ed2d/comments", "author": null, "committer": null, "parents": [{"sha": "bc7ac0d88b1a48c25af598f636de44cd60e5aa1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc7ac0d88b1a48c25af598f636de44cd60e5aa1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc7ac0d88b1a48c25af598f636de44cd60e5aa1a"}], "stats": {"total": 110, "additions": 42, "deletions": 68}, "files": [{"sha": "48b2145d4992559e0b3386c4cdaf897ebc235301", "filename": "libjava/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cbaf0385b0bc1ccb27362a569ad668460c2ed2d/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cbaf0385b0bc1ccb27362a569ad668460c2ed2d/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=6cbaf0385b0bc1ccb27362a569ad668460c2ed2d", "patch": "@@ -1,3 +1,20 @@\n+2003-09-25  Michael Koch  <konqueror@gmx.de>\n+\n+\t* gnu/java/nio/SelectorImpl.java\n+\t(selectNow): Made final, throws IOException.\n+\t(select): Likewise.\n+\t(getFDsAsArray): Made final.\n+\t(selectedKeys): Likewise.\n+\t(wakeup): Likewise.\n+\t(deregisterCancelledKeys): Likewise.\n+\t(register): Likewise.\n+\t(ass): Removed.\n+\t(add_selected): Removed.\n+\t* gnu/java/nio/natSelectorImpl.cc:\n+\tNo need to include bstring.h or gcj/cni.h.\n+\t(helper_put_filedescriptors): Rewritten.\n+\t(helper_get_filedescriptors): Rewritten.\n+\n 2003-09-25  Sascha Brawer  <brawer@dandelis.ch>\n \n \t* java/awt/font/FontRenderContext.java (getTransform): Return"}, {"sha": "b2c2d87c5a7e62b809d387e2abfd01ce8734664d", "filename": "libjava/gnu/java/nio/SelectorImpl.java", "status": "modified", "additions": 12, "deletions": 20, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cbaf0385b0bc1ccb27362a569ad668460c2ed2d/libjava%2Fgnu%2Fjava%2Fnio%2FSelectorImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cbaf0385b0bc1ccb27362a569ad668460c2ed2d/libjava%2Fgnu%2Fjava%2Fnio%2FSelectorImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnio%2FSelectorImpl.java?ref=6cbaf0385b0bc1ccb27362a569ad668460c2ed2d", "patch": "@@ -80,12 +80,14 @@ public final Set keys()\n     return Collections.unmodifiableSet (keys);\n   }\n     \n-  public int selectNow ()\n+  public final int selectNow()\n+    throws IOException\n   {\n     return select (1);\n   }\n \n-  public int select ()\n+  public final int select()\n+    throws IOException\n   {\n     return select (-1);\n   }\n@@ -94,7 +96,7 @@ public int select ()\n   private static native int java_do_select (int[] read, int[] write,\n                                             int[] except, long timeout);\n \n-  private int[] getFDsAsArray (int ops)\n+  private final int[] getFDsAsArray (int ops)\n   {\n     int[] result;\n     int counter = 0;\n@@ -206,7 +208,7 @@ public int select (long timeout)\n         // If key is not yet selected add it.\n         if (!selected.contains (key))\n           {\n-            add_selected (key);\n+            selected.add (key);\n           }\n \n         // Set new ready ops\n@@ -217,27 +219,17 @@ public int select (long timeout)\n     return ret;\n   }\n     \n-  public Set selectedKeys ()\n+  public final Set selectedKeys()\n   {\n     return selected;\n   }\n \n-  public Selector wakeup ()\n+  public final Selector wakeup()\n   {\n     return null;\n   }\n \n-  public void add (SelectionKeyImpl k)\n-  {\n-    keys.add (k);\n-  }\n-\n-  void add_selected (SelectionKeyImpl k)\n-  {\n-    selected.add (k);\n-  }\n-\n-  private void deregisterCancelledKeys ()\n+  private final void deregisterCancelledKeys()\n   {\n     Iterator it = cancelledKeys().iterator();\n \n@@ -253,8 +245,8 @@ protected SelectionKey register (SelectableChannel ch, int ops, Object att)\n     return register ((AbstractSelectableChannel) ch, ops, att);\n   }\n \n-  protected SelectionKey register (AbstractSelectableChannel ch, int ops,\n-                                   Object att)\n+  protected final SelectionKey register (AbstractSelectableChannel ch, int ops,\n+                                         Object att)\n   {\n     SelectionKeyImpl result;\n     \n@@ -278,7 +270,7 @@ else if (ch instanceof ServerSocketChannelImpl)\n         throw new InternalError (\"No known channel type\");\n       }\n \n-    add (result);\n+    keys.add (result);\n     result.interestOps (ops);\n     result.attach (att);\n     return result;"}, {"sha": "208aa0595087f173e502b9f8f640cffbbd1223e8", "filename": "libjava/gnu/java/nio/natSelectorImpl.cc", "status": "modified", "additions": 13, "deletions": 48, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cbaf0385b0bc1ccb27362a569ad668460c2ed2d/libjava%2Fgnu%2Fjava%2Fnio%2FnatSelectorImpl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cbaf0385b0bc1ccb27362a569ad668460c2ed2d/libjava%2Fgnu%2Fjava%2Fnio%2FnatSelectorImpl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnio%2FnatSelectorImpl.cc?ref=6cbaf0385b0bc1ccb27362a569ad668460c2ed2d", "patch": "@@ -1,6 +1,6 @@\n // natSelectorImpl.cc\n \n-/* Copyright (C) 2002  Free Software Foundation\n+/* Copyright (C) 2002, 2003  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -14,66 +14,31 @@ details.  */\n #include <errno.h>\n #include <string.h>\n \n-#if HAVE_BSTRING_H\n-// Needed for bzero, implicitly used by FD_ZERO on IRIX 5.2 \n-#include <bstring.h>\n-#endif\n-\n-//#include <gcj/cni.h>\n #include <gnu/java/nio/SelectorImpl.h>\n #include <java/io/IOException.h>\n \n void\n-helper_put_filedescriptors (jintArray java_fd_array, fd_set& fds, int& max_fd)\n+helper_put_filedescriptors (jintArray fdArray, fd_set& fds, int& max_fd)\n {\n-  int counter;\n-  jint* java_fds;\n-\n-  java_fds = elements (java_fd_array);\n+  jint* tmpFDArray = elements (fdArray);\n \n-  for (counter = 0; counter < JvGetArrayLength (java_fd_array); counter++)\n+  for (int index = 0; index < JvGetArrayLength (fdArray); index++)\n     {\n-      FD_SET (java_fds [counter], &fds);\n+      FD_SET (tmpFDArray [index], &fds);\n \n-      if (java_fds [counter] > max_fd)\n-        {\n-          max_fd = java_fds [counter];\n-        }\n+      if (tmpFDArray [index] > max_fd)\n+        max_fd = tmpFDArray [index];\n     }\n }\n \n void\n-helper_get_filedescriptors (jintArray& java_fd_array, fd_set fds)\n+helper_get_filedescriptors (jintArray& fdArray, fd_set fds)\n {\n-  int counter;\n-  int counter_fds;\n-  jint* java_fds;\n-  jintArray new_array_fds;\n-  jint* new_data_fds;\n-\n-  counter_fds = 0;\n-  java_fds = elements (java_fd_array);\n-\n-  for (counter = 0; counter < JvGetArrayLength (java_fd_array); counter++)\n-    {\n-      if (FD_ISSET (java_fds[counter], &fds))\n-        {\n-          counter_fds++;\n-        }\n-    }\n-\n-  new_array_fds = JvNewIntArray (counter_fds);\n-  new_data_fds = elements (new_array_fds);\n-\n-  for (counter = 0; counter < JvGetArrayLength (java_fd_array); counter++)\n-    {\n-      if (FD_ISSET (java_fds[counter], &fds))\n-        {\n-          new_data_fds[counter] = java_fds[counter];\n-        }      \n-    }\n-\n-  java_fd_array = new_array_fds;\n+  jint* tmpFDArray = elements (fdArray);\n+  \n+  for (int index = 0; index < JvGetArrayLength (fdArray); index++)\n+    if (!FD_ISSET (tmpFDArray [index], &fds))\n+      tmpFDArray [index] = 0;\n }\n \n jint"}]}