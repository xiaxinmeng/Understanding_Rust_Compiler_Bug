{"sha": "ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWE1MTMyYmM1ZWQyMGNjNGFiMTZmMmQ4YjIzZTBkMTZkYzY3ZGVhMQ==", "commit": {"author": {"name": "Simon Cook", "email": "simon.cook@embecosm.com", "date": "2013-09-30T08:23:48Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2013-09-30T08:23:48Z"}, "message": "barrel-shifter-1.c: New test.\n\n2013-09-30  Simon Cook  <simon.cook@embecosm.com>\n            Joern Rennecke  <joern.rennecke@embecosm.com>\n\n        * gcc.target/arc/barrel-shifter-1.c: New test.\n        * gcc.target/arc/barrel-shifter-2.c: Likewise.\n        * gcc.target/arc/long-calls.c, gcc.target/arc/mA6.c: Likewise.\n        * gcc.target/arc/mA7.c, gcc.target/arc/mARC600.c: Likewise.\n        * gcc.target/arc/mARC601.c, gcc.target/arc/mARC700.c: Likewise.\n        * gcc.target/arc/mcpu-arc600.c, gcc.target/arc/mcpu-arc601.c: Likewise.\n        * gcc.target/arc/mcpu-arc700.c, gcc.target/arc/mcrc.c: Likewise.\n        * gcc.target/arc/mdpfp.c, gcc.target/arc/mdsp-packa.c: Likewise.\n        * gcc.target/arc/mdvbf.c, gcc.target/arc/mlock.c: Likewise.\n        * gcc.target/arc/mmac-24.c, gcc.target/arc/mmac-d16.c: Likewise.\n        * gcc.target/arc/mno-crc.c, gcc.target/arc/mno-dsp-packa.c: Likewise.\n        * gcc.target/arc/mno-dvbf.c, gcc.target/arc/mno-lock.c: Likewise.\n        * gcc.target/arc/mno-mac-24.c, gcc.target/arc/mno-mac-d16.c: Likewise.\n        * gcc.target/arc/mno-rtsc.c, gcc.target/arc/mno-swape.c: Likewise.\n        * gcc.target/arc/mno-xy.c, gcc.target/arc/mrtsc.c: Likewise.\n        * gcc.target/arc/mspfp.c, gcc.target/arc/mswape.c: Likewise.\n        * gcc.target/arc/mtune-ARC600.c: Likewise.\n        * gcc.target/arc/mtune-ARC601.c: Likewise.\n        * gcc.target/arc/mtune-ARC700-xmac: Likewise.\n        * gcc.target/arc/mtune-ARC700.c: Likewise.\n        * gcc.target/arc/mtune-ARC725D.c: Likewise.\n        * gcc.target/arc/mtune-ARC750D.c: Likewise.\n        * gcc.target/arc/mul64.c, gcc.target/arc/mxy.c: Likewise.\n        * gcc.target/arc/no-dpfp-lrsr.c: Likewise.\n\nCo-Authored-By: Joern Rennecke <joern.rennecke@embecosm.com>\n\nFrom-SVN: r203025", "tree": {"sha": "036bb75558d8e1c9f5f9dedcf989148d303f73f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/036bb75558d8e1c9f5f9dedcf989148d303f73f9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1/comments", "author": {"login": "simonpcook", "id": 90491, "node_id": "MDQ6VXNlcjkwNDkx", "avatar_url": "https://avatars.githubusercontent.com/u/90491?v=4", "gravatar_id": "", "url": "https://api.github.com/users/simonpcook", "html_url": "https://github.com/simonpcook", "followers_url": "https://api.github.com/users/simonpcook/followers", "following_url": "https://api.github.com/users/simonpcook/following{/other_user}", "gists_url": "https://api.github.com/users/simonpcook/gists{/gist_id}", "starred_url": "https://api.github.com/users/simonpcook/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/simonpcook/subscriptions", "organizations_url": "https://api.github.com/users/simonpcook/orgs", "repos_url": "https://api.github.com/users/simonpcook/repos", "events_url": "https://api.github.com/users/simonpcook/events{/privacy}", "received_events_url": "https://api.github.com/users/simonpcook/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "791d904434fc46397ff32cb6aceb9b54e5c866c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/791d904434fc46397ff32cb6aceb9b54e5c866c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/791d904434fc46397ff32cb6aceb9b54e5c866c1"}], "stats": {"total": 344, "additions": 344, "deletions": 0}, "files": [{"sha": "6d56fa61bfc67f56126b2b439b75b034982543af", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1", "patch": "@@ -1,3 +1,31 @@\n+2013-09-30  Simon Cook  <simon.cook@embecosm.com>\n+\t    Joern Rennecke  <joern.rennecke@embecosm.com>\n+\n+\t* gcc.target/arc/barrel-shifter-1.c: New test.\n+\t* gcc.target/arc/barrel-shifter-2.c: Likewise.\n+\t* gcc.target/arc/long-calls.c, gcc.target/arc/mA6.c: Likewise.\n+\t* gcc.target/arc/mA7.c, gcc.target/arc/mARC600.c: Likewise.\n+\t* gcc.target/arc/mARC601.c, gcc.target/arc/mARC700.c: Likewise.\n+\t* gcc.target/arc/mcpu-arc600.c, gcc.target/arc/mcpu-arc601.c: Likewise.\n+\t* gcc.target/arc/mcpu-arc700.c, gcc.target/arc/mcrc.c: Likewise.\n+\t* gcc.target/arc/mdpfp.c, gcc.target/arc/mdsp-packa.c: Likewise.\n+\t* gcc.target/arc/mdvbf.c, gcc.target/arc/mlock.c: Likewise.\n+\t* gcc.target/arc/mmac-24.c, gcc.target/arc/mmac-d16.c: Likewise.\n+\t* gcc.target/arc/mno-crc.c, gcc.target/arc/mno-dsp-packa.c: Likewise.\n+\t* gcc.target/arc/mno-dvbf.c, gcc.target/arc/mno-lock.c: Likewise.\n+\t* gcc.target/arc/mno-mac-24.c, gcc.target/arc/mno-mac-d16.c: Likewise.\n+\t* gcc.target/arc/mno-rtsc.c, gcc.target/arc/mno-swape.c: Likewise.\n+\t* gcc.target/arc/mno-xy.c, gcc.target/arc/mrtsc.c: Likewise.\n+\t* gcc.target/arc/mspfp.c, gcc.target/arc/mswape.c: Likewise.\n+\t* gcc.target/arc/mtune-ARC600.c: Likewise.\n+\t* gcc.target/arc/mtune-ARC601.c: Likewise.\n+\t* gcc.target/arc/mtune-ARC700-xmac: Likewise.\n+\t* gcc.target/arc/mtune-ARC700.c: Likewise.\n+\t* gcc.target/arc/mtune-ARC725D.c: Likewise.\n+\t* gcc.target/arc/mtune-ARC750D.c: Likewise.\n+\t* gcc.target/arc/mul64.c, gcc.target/arc/mxy.c: Likewise.\n+\t* gcc.target/arc/no-dpfp-lrsr.c: Likewise.\n+\n 2013-09-30  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/58532"}, {"sha": "a0eb6d70c39e20df8d9cf5bf76b57ee0785e027c", "filename": "gcc/testsuite/gcc.target/arc/barrel-shifter-1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fbarrel-shifter-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fbarrel-shifter-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fbarrel-shifter-1.c?ref=ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mcpu=ARC601 -mbarrel-shifter\" } */\n+int i;\n+\n+int f (void)\n+{\n+  i >>= 2;\n+}\n+\n+/* { dg-final { scan-assembler \"asr_s\" } } */"}, {"sha": "97998fbf1a38c3241bc11cb40648db41f2860a38", "filename": "gcc/testsuite/gcc.target/arc/barrel-shifter-2.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fbarrel-shifter-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fbarrel-shifter-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fbarrel-shifter-2.c?ref=ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+int i;\n+\n+int f (void)\n+{\n+  i >>= 2;\n+}\n+\n+/* { dg-final { scan-assembler \"asr_s\" } } */"}, {"sha": "63fafbcc67430f6d3913e4471ecc3fbd70f9212c", "filename": "gcc/testsuite/gcc.target/arc/long-calls.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Flong-calls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Flong-calls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Flong-calls.c?ref=ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mlong-calls\" } */\n+\n+int g (void);\n+\n+int f (void)\n+{\n+        g();\n+}\n+\n+/* { dg-final { scan-assembler \"j @g\" } } */"}, {"sha": "2e15a86f8a4d165237c70bd565ae6707c61d0e1f", "filename": "gcc/testsuite/gcc.target/arc/mA6.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1/gcc%2Ftestsuite%2Fgcc.target%2Farc%2FmA6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1/gcc%2Ftestsuite%2Fgcc.target%2Farc%2FmA6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2FmA6.c?ref=ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1", "patch": "@@ -0,0 +1,4 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mA6\" } */\n+\n+/* { dg-final { scan-assembler \".cpu ARC600\" } } */"}, {"sha": "c4430f43b416f6cde1159ad833410b0bd8291488", "filename": "gcc/testsuite/gcc.target/arc/mA7.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1/gcc%2Ftestsuite%2Fgcc.target%2Farc%2FmA7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1/gcc%2Ftestsuite%2Fgcc.target%2Farc%2FmA7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2FmA7.c?ref=ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1", "patch": "@@ -0,0 +1,4 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mA7\" } */\n+\n+/* { dg-final { scan-assembler \".cpu ARC700\" } } */"}, {"sha": "20e086aa754f9e0040a9f52a46b4670c42944789", "filename": "gcc/testsuite/gcc.target/arc/mARC600.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1/gcc%2Ftestsuite%2Fgcc.target%2Farc%2FmARC600.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1/gcc%2Ftestsuite%2Fgcc.target%2Farc%2FmARC600.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2FmARC600.c?ref=ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1", "patch": "@@ -0,0 +1,4 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mARC600\" } */\n+\n+/* { dg-final { scan-assembler \".cpu ARC600\" } } */"}, {"sha": "1d30da4cafb17823b21a25e04ccbe7a820070722", "filename": "gcc/testsuite/gcc.target/arc/mARC601.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1/gcc%2Ftestsuite%2Fgcc.target%2Farc%2FmARC601.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1/gcc%2Ftestsuite%2Fgcc.target%2Farc%2FmARC601.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2FmARC601.c?ref=ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1", "patch": "@@ -0,0 +1,4 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mARC601\" } */\n+\n+/* { dg-final { scan-assembler \".cpu ARC601\" } } */"}, {"sha": "43e9baa3f3015e1e1ccb82f7785a994470c36490", "filename": "gcc/testsuite/gcc.target/arc/mARC700.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1/gcc%2Ftestsuite%2Fgcc.target%2Farc%2FmARC700.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1/gcc%2Ftestsuite%2Fgcc.target%2Farc%2FmARC700.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2FmARC700.c?ref=ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1", "patch": "@@ -0,0 +1,4 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mARC700\" } */\n+\n+/* { dg-final { scan-assembler \".cpu ARC700\" } } */"}, {"sha": "4c915fda0e388e253de500dbab114a273c2755e8", "filename": "gcc/testsuite/gcc.target/arc/mcpu-arc600.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fmcpu-arc600.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fmcpu-arc600.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fmcpu-arc600.c?ref=ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1", "patch": "@@ -0,0 +1,4 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mcpu=ARC600\" } */\n+\n+/* { dg-final { scan-assembler \".cpu ARC600\" } } */"}, {"sha": "7c93c9dc4acfc984dd406246b06a47f3347810e7", "filename": "gcc/testsuite/gcc.target/arc/mcpu-arc601.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fmcpu-arc601.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fmcpu-arc601.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fmcpu-arc601.c?ref=ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1", "patch": "@@ -0,0 +1,4 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mcpu=ARC601\" } */\n+\n+/* { dg-final { scan-assembler \".cpu ARC601\" } } */"}, {"sha": "c805a5af76b1fcdd1127acfd5885660913d630b5", "filename": "gcc/testsuite/gcc.target/arc/mcpu-arc700.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fmcpu-arc700.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fmcpu-arc700.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fmcpu-arc700.c?ref=ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1", "patch": "@@ -0,0 +1,4 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mcpu=ARC700\" } */\n+\n+/* { dg-final { scan-assembler \".cpu ARC700\" } } */"}, {"sha": "d3780bb00d6b91af14e3f4e027e904e15605de77", "filename": "gcc/testsuite/gcc.target/arc/mcrc.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fmcrc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fmcrc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fmcrc.c?ref=ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mcrc\" } */\n+/* { dg-do assemble } */\n+\n+int f (int i)\n+{\n+  __asm__(\"crc %1, %1, %1\" : \"=r\"(i) : \"r\"(i));\n+  return i;\n+}"}, {"sha": "4bbc9057b85677a464c8594ebdcbecff3151274a", "filename": "gcc/testsuite/gcc.target/arc/mdpfp.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fmdpfp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fmdpfp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fmdpfp.c?ref=ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mdpfp\" } */\n+\n+double i;\n+\n+int f (void)\n+{\n+        i *= 2.0;\n+}\n+\n+/* { dg-final { scan-assembler \"daddh\" } } */"}, {"sha": "f013a6dd1ea684c9f770d0999529cc712cb7e2e9", "filename": "gcc/testsuite/gcc.target/arc/mdsp-packa.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fmdsp-packa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fmdsp-packa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fmdsp-packa.c?ref=ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mdsp-packa\" } */\n+/* { dg-do assemble } */\n+\n+int f (int i)\n+{\n+  __asm__(\"minidl %1, %1, %1\" : \"=r\"(i) : \"r\"(i));\n+  return i;\n+}"}, {"sha": "e2e545e8bb32e4219e699945ad6b0ebaedeeb5ca", "filename": "gcc/testsuite/gcc.target/arc/mdvbf.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fmdvbf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fmdvbf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fmdvbf.c?ref=ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mdvbf\" } */\n+/* { dg-do assemble } */\n+\n+int f (int i)\n+{\n+  __asm__(\"vbfdw %1, %1\" : \"=r\"(i) : \"r\"(i));\n+  return i;\n+}"}, {"sha": "3a8b050c30efcefc741cd76796e2e1777a117ff4", "filename": "gcc/testsuite/gcc.target/arc/mlock.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fmlock.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fmlock.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fmlock.c?ref=ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mlock\" } */\n+/* { dg-do assemble } */\n+\n+int f (void *p)\n+{\n+  int i;\n+\n+  __asm__(\"llock %0, [%1]\\n\\t\"\n+\t  \"scond %0, [%1]\" : \"=&r\"(i) : \"r\"(p));\n+  return i;\n+}"}, {"sha": "30cb6981a03fea55d865eac0567275772c536fde", "filename": "gcc/testsuite/gcc.target/arc/mmac-24.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fmmac-24.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fmmac-24.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fmmac-24.c?ref=ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mmac-24\" } */\n+/* { dg-do assemble } */\n+\n+int f (int i)\n+{\n+  __asm__(\"mult %1, %1, %1\" : \"=r\"(i) : \"r\"(i));\n+  return i;\n+}"}, {"sha": "0570011fd267fe5675911816e226b5616702d83f", "filename": "gcc/testsuite/gcc.target/arc/mmac-d16.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fmmac-d16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fmmac-d16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fmmac-d16.c?ref=ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mmac-d16\" } */\n+/* { dg-do assemble } */\n+\n+int f (int i)\n+{\n+  __asm__(\"muldw %1, %1, %1\" : \"=r\"(i) : \"r\"(i));\n+  return i;\n+}"}, {"sha": "70ab9c1176149f95b62bfb02caf0c81d8b1f9d3c", "filename": "gcc/testsuite/gcc.target/arc/mno-crc.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fmno-crc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fmno-crc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fmno-crc.c?ref=ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mno-crc\" } */\n+/* Would also like to assemble and check that we get the expected\n+   \"Error: bad instruction\" assembler messages, but at the moment our\n+   testharness can't do that.  */\n+\n+int f (int i)\n+{\n+  __asm__(\"crc %1, %1, %1\" : \"=r\"(i) : \"r\"(i));\n+  return i;\n+}"}, {"sha": "eb21522af063aeb8f27151d2a22c02961cdad814", "filename": "gcc/testsuite/gcc.target/arc/mno-dsp-packa.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fmno-dsp-packa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fmno-dsp-packa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fmno-dsp-packa.c?ref=ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mno-dsp-packa\" } */\n+/* Would also like to assemble and check that we get the expected\n+   \"Error: bad instruction\" assembler messages, but at the moment our\n+   testharness can't do that.  */\n+\n+int f (int i)\n+{\n+  __asm__(\"minidl %1, %1, %1\" : \"=r\"(i) : \"r\"(i));\n+  return i;\n+}"}, {"sha": "ea96d987c18608de72762967f2c6c0d0b723476c", "filename": "gcc/testsuite/gcc.target/arc/mno-dvbf.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fmno-dvbf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fmno-dvbf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fmno-dvbf.c?ref=ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mno-dvbf\" } */\n+/* Would also like to assemble and check that we get the expected\n+   \"Error: bad instruction\" assembler messages, but at the moment our\n+   testharness can't do that.  */\n+\n+int f (int i)\n+{\n+  __asm__(\"vbfdw %1, %1\" : \"=r\"(i) : \"r\"(i));\n+  return i;\n+}"}, {"sha": "62ac885ba995065472a09d0cec3bb4e856596e27", "filename": "gcc/testsuite/gcc.target/arc/mno-lock.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fmno-lock.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fmno-lock.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fmno-lock.c?ref=ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mno-lock\" } */\n+/* Would also like to assemble and check that we get the expected\n+   \"Error: bad instruction\" assembler messages, but at the moment our\n+   testharness can't do that.  */\n+\n+int f (void *p)\n+{\n+  int i;\n+\n+  __asm__(\"llock %0, [%1]\\n\\t\"\n+\t  \"scond %0, [%1]\" : \"=&r\"(i) : \"r\"(p));\n+  return i;\n+}"}, {"sha": "b4839579b12556771dfcfb93ef5418e963a0fb39", "filename": "gcc/testsuite/gcc.target/arc/mno-mac-24.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fmno-mac-24.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fmno-mac-24.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fmno-mac-24.c?ref=ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mno-mac-24\" } */\n+/* Would also like to assemble and check that we get the expected\n+   \"Error: bad instruction\" assembler messages, but at the moment our\n+   testharness can't do that.  */\n+\n+int f (int i)\n+{\n+  __asm__(\"mult %1, %1, %1\" : \"=r\"(i) : \"r\"(i));\n+  return i;\n+}"}, {"sha": "68a20f4f55ac192d740031b7efcbad2f79e44f4b", "filename": "gcc/testsuite/gcc.target/arc/mno-mac-d16.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fmno-mac-d16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fmno-mac-d16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fmno-mac-d16.c?ref=ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mno-mac-d16\" } */\n+/* Would also like to assemble and check that we get the expected\n+   \"Error: bad instruction\" assembler messages, but at the moment our\n+   testharness can't do that.  */\n+\n+int f (int i)\n+{\n+  __asm__(\"muldw %1, %1, %1\" : \"=r\"(i) : \"r\"(i));\n+  return i;\n+}"}, {"sha": "d74a60e935148124c2e7c8aaae33c910d530a58e", "filename": "gcc/testsuite/gcc.target/arc/mno-rtsc.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fmno-rtsc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fmno-rtsc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fmno-rtsc.c?ref=ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mno-rtsc\" } */\n+/* Would also like to assemble and check that we get the expected\n+   \"Error: bad instruction\" assembler messages, but at the moment our\n+   testharness can't do that.  */\n+\n+int f (int i)\n+{\n+  __asm__(\"rtsc %1, %1\" : \"=r\"(i) : \"r\"(i));\n+  return i;\n+}"}, {"sha": "c853ab4bdcc818dc234b8fe21e216c723db8aac3", "filename": "gcc/testsuite/gcc.target/arc/mno-swape.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fmno-swape.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fmno-swape.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fmno-swape.c?ref=ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mno-swape\" } */\n+/* Would also like to assemble and check that we get the expected\n+   \"Error: bad instruction\" assembler messages, but at the moment our\n+   testharness can't do that.  */\n+\n+int f (int i)\n+{\n+  __asm__(\"swape %1, %1\" : \"=r\"(i) : \"r\"(i));\n+  return i;\n+}"}, {"sha": "e378b3fc9b637de601383585eff5ef401aaad7f7", "filename": "gcc/testsuite/gcc.target/arc/mno-xy.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fmno-xy.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fmno-xy.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fmno-xy.c?ref=ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mno-xy\" } */\n+/* Would also like to assemble and check that we get the expected\n+   \"Error: bad instruction\" assembler messages, but at the moment our\n+   testharness can't do that.  */\n+\n+void f (int i)\n+{\n+  __asm__(\"add x0_u0, x0_u0, %0\" : :  \"r\" (i));\n+}"}, {"sha": "31852a5e479b8fc6f3aae9e1caf2453acea338cd", "filename": "gcc/testsuite/gcc.target/arc/mrtsc.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fmrtsc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fmrtsc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fmrtsc.c?ref=ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mrtsc\" } */\n+/* { dg-do assemble } */\n+\n+int f (int i)\n+{\n+  __asm__(\"rtsc %1, %1\" : \"=r\"(i) : \"r\"(i));\n+  return i;\n+}"}, {"sha": "0e41ff89d351775b842a6d7605084917b00c5661", "filename": "gcc/testsuite/gcc.target/arc/mspfp.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fmspfp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fmspfp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fmspfp.c?ref=ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mspfp\" } */\n+\n+float i;\n+\n+int f (void)\n+{\n+        i *= 2.0;\n+}\n+\n+/* { dg-final { scan-assembler \"fadd\" } } */"}, {"sha": "692e6a2bb6eec8abac48556bc6c91aead723bf45", "filename": "gcc/testsuite/gcc.target/arc/mswape.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fmswape.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fmswape.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fmswape.c?ref=ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mswape\" } */\n+/* { dg-do assemble } */\n+\n+int f (int i)\n+{\n+  __asm__(\"swape %1, %1\" : \"=r\"(i) : \"r\"(i));\n+  return i;\n+}"}, {"sha": "a483d1435cae0ce276d5b9f5ff9ab36b80f14d0a", "filename": "gcc/testsuite/gcc.target/arc/mtune-ARC600.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fmtune-ARC600.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fmtune-ARC600.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fmtune-ARC600.c?ref=ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1", "patch": "@@ -0,0 +1,4 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mtune=ARC600\" } */\n+\n+/* { dg-final { scan-assembler \".cpu ARC700\" } } */"}, {"sha": "ed57bd7092dedf15abc6bef2a1b8fb21a217499c", "filename": "gcc/testsuite/gcc.target/arc/mtune-ARC601.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fmtune-ARC601.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fmtune-ARC601.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fmtune-ARC601.c?ref=ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1", "patch": "@@ -0,0 +1,4 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mtune=ARC601\" } */\n+\n+/* { dg-final { scan-assembler \".cpu ARC700\" } } */"}, {"sha": "2f1e137be4d45ea6ae59bbd62553c177d3372f4c", "filename": "gcc/testsuite/gcc.target/arc/mtune-ARC700-xmac", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fmtune-ARC700-xmac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fmtune-ARC700-xmac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fmtune-ARC700-xmac?ref=ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1", "patch": "@@ -0,0 +1,4 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mtune=ARC700-xmac\" } */\n+\n+/* { dg-final { scan-assembler \".cpu ARC700\" } } */"}, {"sha": "851ea7305e03fa76ea6bb071d471dd0a36341bee", "filename": "gcc/testsuite/gcc.target/arc/mtune-ARC700.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fmtune-ARC700.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fmtune-ARC700.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fmtune-ARC700.c?ref=ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1", "patch": "@@ -0,0 +1,4 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mtune=ARC700\" } */\n+\n+/* { dg-final { scan-assembler \".cpu ARC700\" } } */"}, {"sha": "e2aa4846291c24c9ca2052af94a6cb4955f0ee5b", "filename": "gcc/testsuite/gcc.target/arc/mtune-ARC725D.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fmtune-ARC725D.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fmtune-ARC725D.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fmtune-ARC725D.c?ref=ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1", "patch": "@@ -0,0 +1,4 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mtune=ARC725D\" } */\n+\n+/* { dg-final { scan-assembler \".cpu ARC700\" } } */"}, {"sha": "20923300ee1240a004216950e760711a71d3b1d1", "filename": "gcc/testsuite/gcc.target/arc/mtune-ARC750D.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fmtune-ARC750D.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fmtune-ARC750D.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fmtune-ARC750D.c?ref=ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1", "patch": "@@ -0,0 +1,4 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mtune=ARC750D\" } */\n+\n+/* { dg-final { scan-assembler \".cpu ARC700\" } } */"}, {"sha": "3678b2799d54911b75d139ef83540c230848341b", "filename": "gcc/testsuite/gcc.target/arc/mul64.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fmul64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fmul64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fmul64.c?ref=ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mcpu=ARC600 -mmul64\" } */\n+#include <stdint.h>\n+\n+int64_t i;\n+int j, k;\n+\n+int f (void)\n+{\n+        i = j * k;\n+}\n+\n+/* { dg-final { scan-assembler \"mul64\" } } */"}, {"sha": "1ecc34d2bdb58d70a4536dd26023e9805e75112f", "filename": "gcc/testsuite/gcc.target/arc/mxy.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fmxy.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fmxy.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fmxy.c?ref=ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mxy\" } */\n+/* { dg-do assemble } */\n+\n+void f (int i)\n+{\n+  __asm__(\"add x0_u0, x0_u0, %0\" : :  \"r\" (i));\n+}"}, {"sha": "e4e23e4a40f66138be708e6b9dd6775b55003493", "filename": "gcc/testsuite/gcc.target/arc/no-dpfp-lrsr.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fno-dpfp-lrsr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fno-dpfp-lrsr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fno-dpfp-lrsr.c?ref=ea5132bc5ed20cc4ab16f2d8b23e0d16dc67dea1", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mdpfp -mno-dpfp-lrsr\" } */\n+\n+double i;\n+\n+int f (void)\n+{\n+        i *= 2.0;\n+}\n+\n+/* { dg-final { scan-assembler-not \"\\tlr\" } } */"}]}