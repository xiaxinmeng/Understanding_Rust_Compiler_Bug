{"sha": "52a1ff8bc1fadcafdb5ac432abb5d1bdd053097c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTJhMWZmOGJjMWZhZGNhZmRiNWFjNDMyYWJiNWQxYmRkMDUzMDk3Yw==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@redhat.com", "date": "2014-11-13T08:34:41Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2014-11-13T08:34:41Z"}, "message": "divmodhi.S: Add support for the G10 architecture.\n\n\t* config/rl78/divmodhi.S: Add support for the G10 architecture.\n\tUse START_FUNC and END_FUNC macros to enable linker garbage\n\tcollection.\n\t* config/rl78/divmodqi.S: Likewise.\n\t* config/rl78/divmodsi.S: Likewise.\n\t* config/rl78/mulsi3.S: Likewise.\n\t* config/rl78/lib2div.c: Remove G10 functions.\n\t* config/rl78/lib2muls.c: Likewise.\n\t* config/rl78/t-rl8 (HOST_LIBGCC2_CFLAGS): Define.\n\t* config/rl78/vregs.h (START_FUNC): New macro.\n\t(END_FUNC): New macro.\n\nFrom-SVN: r217463", "tree": {"sha": "6a458405a2f35e04f3a2aac27b7cec07bacf9dab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6a458405a2f35e04f3a2aac27b7cec07bacf9dab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/52a1ff8bc1fadcafdb5ac432abb5d1bdd053097c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52a1ff8bc1fadcafdb5ac432abb5d1bdd053097c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52a1ff8bc1fadcafdb5ac432abb5d1bdd053097c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52a1ff8bc1fadcafdb5ac432abb5d1bdd053097c/comments", "author": {"login": "nickclifton", "id": 31441682, "node_id": "MDQ6VXNlcjMxNDQxNjgy", "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nickclifton", "html_url": "https://github.com/nickclifton", "followers_url": "https://api.github.com/users/nickclifton/followers", "following_url": "https://api.github.com/users/nickclifton/following{/other_user}", "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}", "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions", "organizations_url": "https://api.github.com/users/nickclifton/orgs", "repos_url": "https://api.github.com/users/nickclifton/repos", "events_url": "https://api.github.com/users/nickclifton/events{/privacy}", "received_events_url": "https://api.github.com/users/nickclifton/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "79b576cc38fbb037993d56b9e5f7e1fca7ee5807", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79b576cc38fbb037993d56b9e5f7e1fca7ee5807", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79b576cc38fbb037993d56b9e5f7e1fca7ee5807"}], "stats": {"total": 469, "additions": 257, "deletions": 212}, "files": [{"sha": "6bbea5ebc968b40a27d6ff41014bd6bcb13e141f", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52a1ff8bc1fadcafdb5ac432abb5d1bdd053097c/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52a1ff8bc1fadcafdb5ac432abb5d1bdd053097c/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=52a1ff8bc1fadcafdb5ac432abb5d1bdd053097c", "patch": "@@ -1,3 +1,17 @@\n+2014-11-13  Nick Clifton  <nickc@redhat.com>\n+\n+\t* config/rl78/divmodhi.S: Add support for the G10 architecture.\n+\tUse START_FUNC and END_FUNC macros to enable linker garbage\n+\tcollection.\n+\t* config/rl78/divmodqi.S: Likewise.\n+\t* config/rl78/divmodsi.S: Likewise.\n+\t* config/rl78/mulsi3.S: Likewise.\n+\t* config/rl78/lib2div.c: Remove G10 functions.\n+\t* config/rl78/lib2muls.c: Likewise.\n+\t* config/rl78/t-rl8 (HOST_LIBGCC2_CFLAGS): Define.\n+\t* config/rl78/vregs.h (START_FUNC): New macro.\n+\t(END_FUNC): New macro.\n+\n 2014-11-12  Matthew Fortune  <matthew.fortune@imgtec.com>\n \n \t* config/mips/mips16.S: Set .module when supported.  Update O32"}, {"sha": "12070e3fa14bf2f8cb9ffa95a69dd884d1070834", "filename": "libgcc/config/rl78/divmodhi.S", "status": "modified", "additions": 40, "deletions": 47, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52a1ff8bc1fadcafdb5ac432abb5d1bdd053097c/libgcc%2Fconfig%2Frl78%2Fdivmodhi.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52a1ff8bc1fadcafdb5ac432abb5d1bdd053097c/libgcc%2Fconfig%2Frl78%2Fdivmodhi.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frl78%2Fdivmodhi.S?ref=52a1ff8bc1fadcafdb5ac432abb5d1bdd053097c", "patch": "@@ -23,11 +23,9 @@\n    see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n    <http://www.gnu.org/licenses/>.  */\n \n-#ifndef __RL78_G10__\n-\n #include \"vregs.h\"\n \n-\t.macro make_generic  which,need_result\n+.macro MAKE_GENERIC  which,need_result\n \n \t.if \\need_result\n \tquot = r8\n@@ -53,11 +51,11 @@\n \tbitB0 = bit\n \tbitB1 = bit+1\n \n-#if 1\n #define bit\tbc\n #define bitB0\tc\n #define bitB1\tb\n-#endif\n+\n+\tSTART_FUNC __generic_hidivmod\\which\n \n num_lt_den\\which:\n \t.if \\need_result\n@@ -72,12 +70,13 @@ num_lt_den\\which:\n \t;; to store sign information that must remain intact\n \n \t.if \\need_result\n-\n-generic_div:\n+\t.global __generic_hidiv\n+__generic_hidiv:\n \n \t.else\n \n-generic_mod:\n+\t.global __generic_himod\n+__generic_himod:\n \n \t.endif\n \n@@ -193,42 +192,40 @@ enter_main_loop\\which:\n \n main_loop_done\\which:\t\n \tret\n-\t.endm\n+\tEND_FUNC __generic_hidivmod\\which\n+.endm\n+;----------------------------------------------------------------------\n \n-\tmake_generic _d 1\n-\tmake_generic _m 0\n+\tMAKE_GENERIC _d 1\n+\tMAKE_GENERIC _m 0\n \n ;----------------------------------------------------------------------\n \n-\t.global\t___udivhi3\n-\t.type\t___udivhi3,@function\n-___udivhi3:\n+START_FUNC ___udivhi3\n \t;; r8 = 4[sp] / 6[sp]\n-\tcall\t$!generic_div\n+\tcall\t$!__generic_hidiv\n \tret\n-\t.size\t___udivhi3, . - ___udivhi3\n+END_FUNC ___udivhi3\n \t\n \n-\t.global\t___umodhi3\n-\t.type\t___umodhi3,@function\n-___umodhi3:\n+START_FUNC ___umodhi3\n \t;; r8 = 4[sp] % 6[sp]\n-\tcall\t$!generic_mod\n+\tcall\t$!__generic_himod\n \tret\n-\t.size\t___umodhi3, . - ___umodhi3\n+END_FUNC ___umodhi3\n \n ;----------------------------------------------------------------------\n \n-\t.macro neg_ax\n+.macro NEG_AX\n \tmovw\thl, ax\n \tmovw\tax, #0\n \tsubw\tax, [hl]\n \tmovw\t[hl], ax\n-\t.endm\n+.endm\n \n-\t.global\t___divhi3\n-\t.type\t___divhi3,@function\n-___divhi3:\n+;----------------------------------------------------------------------\n+\n+START_FUNC ___divhi3\n \t;; r8 = 4[sp] / 6[sp]\n \tmovw\tde, #0\n \tmov\ta, [sp+5]\n@@ -237,14 +234,14 @@ ___divhi3:\n \tmov\ta, [sp+7]\n \tmov1\tcy, a.7\n \tbc\t$div_signed_den\n-\tcall\t$!generic_div\n+\tcall\t$!__generic_hidiv\n \tret\n \t\n div_signed_num:\n \t;; neg [sp+4]\n \tmovw\tax, sp\n \taddw\tax, #4\n-\tneg_ax\n+\tNEG_AX\n \tmov\td, #1\n \tmov\ta, [sp+7]\n \tmov1\tcy, a.7\n@@ -253,39 +250,37 @@ div_signed_den:\n \t;; neg [sp+6]\n \tmovw\tax, sp\n \taddw\tax, #6\n-\tneg_ax\n+\tNEG_AX\n \tmov\te, #1\n div_unsigned_den:\t\n-\tcall\t$!generic_div\n+\tcall\t$!__generic_hidiv\n \n \tmov\ta, d\n \tcmp0\ta\n \tbz\t$div_skip_restore_num\n \t;;  We have to restore the numerator [sp+4]\n \tmovw\tax, sp\n \taddw\tax, #4\n-\tneg_ax\n+\tNEG_AX\n \tmov\ta, d\n div_skip_restore_num:\t\n \txor\ta, e\n \tbz\t$div_no_neg\n \tmovw\tax, #r8\n-\tneg_ax\n+\tNEG_AX\n div_no_neg:\n \tmov\ta, e\n \tcmp0\ta\n \tbz\t$div_skip_restore_den\n \tmovw\tax, sp\n \taddw\tax, #6\n-\tneg_ax\n+\tNEG_AX\n div_skip_restore_den:\t\n \tret\n-\t.size\t___divhi3, . - ___divhi3\n+END_FUNC ___divhi3\n \t\n \n-\t.global\t___modhi3\n-\t.type\t___modhi3,@function\n-___modhi3:\n+START_FUNC ___modhi3\n \t;; r8 = 4[sp] % 6[sp]\n \tmovw\tde, #0\n \tmov\ta, [sp+5]\n@@ -294,14 +289,14 @@ ___modhi3:\n \tmov\ta, [sp+7]\n \tmov1\tcy, a.7\n \tbc\t$mod_signed_den\n-\tcall\t$!generic_mod\n+\tcall\t$!__generic_himod\n \tret\n \t\n mod_signed_num:\n \t;; neg [sp+4]\n \tmovw\tax, sp\n \taddw\tax, #4\n-\tneg_ax\n+\tNEG_AX\n \tmov\td, #1\n \tmov\ta, [sp+7]\n \tmov1\tcy, a.7\n@@ -310,28 +305,26 @@ mod_signed_den:\n \t;; neg [sp+6]\n \tmovw\tax, sp\n \taddw\tax, #6\n-\tneg_ax\n+\tNEG_AX\n mod_unsigned_den:\t\n-\tcall\t$!generic_mod\n+\tcall\t$!__generic_himod\n \n \tmov\ta, d\n \tcmp0\ta\n \tbz\t$mod_no_neg\n \tmovw\tax, #r8\n-\tneg_ax\n+\tNEG_AX\n \t;;  Also restore numerator\n \tmovw \tax, sp\n \taddw\tax, #4\n-\tneg_ax\n+\tNEG_AX\n mod_no_neg:\n \tmov\ta, e\n \tcmp0\ta\n \tbz\t$mod_skip_restore_den\n \tmovw\tax, sp\n \taddw\tax, #6\n-\tneg_ax\n+\tNEG_AX\n mod_skip_restore_den:\t\n \tret\n-\t.size\t___modhi3, . - ___modhi3\n-\n-#endif\n+END_FUNC ___modhi3"}, {"sha": "8d1022bcf04636dc8fee29f02a25b736cdbbeddd", "filename": "libgcc/config/rl78/divmodqi.S", "status": "modified", "additions": 41, "deletions": 46, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52a1ff8bc1fadcafdb5ac432abb5d1bdd053097c/libgcc%2Fconfig%2Frl78%2Fdivmodqi.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52a1ff8bc1fadcafdb5ac432abb5d1bdd053097c/libgcc%2Fconfig%2Frl78%2Fdivmodqi.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frl78%2Fdivmodqi.S?ref=52a1ff8bc1fadcafdb5ac432abb5d1bdd053097c", "patch": "@@ -23,11 +23,9 @@\n    see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n    <http://www.gnu.org/licenses/>.  */\n \n-#ifndef __RL78_G10__\n-\n #include \"vregs.h\"\n \n-\t.macro make_generic  which,need_result\n+.macro MAKE_GENERIC  which,need_result\n \n \t.if \\need_result\n \tquot = r8\n@@ -41,11 +39,11 @@\n \tbit = r14\n \t.endif\n \n-#if 1\n #define bit\tb\n #define den\tc\n #define bitden\tbc\n-#endif\n+\n+\tSTART_FUNC __generic_qidivmod\\which\n \n num_lt_den\\which:\n \t.if \\need_result\n@@ -72,12 +70,13 @@ den_is_zero\\which:\n \t;; to store sign information that must remain intact\n \n \t.if \\need_result\n-\n-generic_div:\n+\t.global __generic_qidiv\n+__generic_qidiv:\n \n \t.else\n \n-generic_mod:\n+\t.global __generic_qimod\n+__generic_qimod:\n \n \t.endif\n \n@@ -111,7 +110,8 @@ den_not_zero\\which:\n ; while (den < num && !(den & (1L << BITS_MINUS_1)))\n \n shift_den_bit\\which:\n-\t.macro\tsdb_one\\which\n+\n+.macro\tSDB_ONE\\which\n \tmov\ta, den\n \tmov1\tcy,a.7\n \tbc\t$enter_main_loop\\which\n@@ -125,10 +125,10 @@ shift_den_bit\\which:\n \n \t;; bit <<= 1\n \tshl\tbit, 1\n-\t.endm\n+.endm\n \n-\tsdb_one\\which\n-\tsdb_one\\which\n+\tSDB_ONE\\which\n+\tSDB_ONE\\which\n \n \tbr\t$shift_den_bit\\which\n \n@@ -164,42 +164,41 @@ enter_main_loop\\which:\n \n main_loop_done\\which:\t\n \tret\n-\t.endm\n+\tEND_FUNC __generic_qidivmod\\which\n+.endm\n \n-\tmake_generic _d 1\n-\tmake_generic _m 0\n+;----------------------------------------------------------------------\n+\n+\tMAKE_GENERIC _d 1\n+\tMAKE_GENERIC _m 0\n \n ;----------------------------------------------------------------------\n \n-\t.global\t___udivqi3\n-\t.type\t___udivqi3,@function\n-___udivqi3:\n+START_FUNC ___udivqi3\n \t;; r8 = 4[sp] / 6[sp]\n \tmovw\thl, sp\n-\tbr\t$!generic_div\n-\t.size\t___udivqi3, . - ___udivqi3\n+\tbr\t$!__generic_qidiv\n+END_FUNC ___udivqi3\n \t\n \n-\t.global\t___umodqi3\n-\t.type\t___umodqi3,@function\n-___umodqi3:\n+START_FUNC ___umodqi3\n \t;; r8 = 4[sp] % 6[sp]\n \tmovw\thl, sp\n-\tbr\t$!generic_mod\n-\t.size\t___umodqi3, . - ___umodqi3\n+\tbr\t$!__generic_qimod\n+END_FUNC ___umodqi3\n \n ;----------------------------------------------------------------------\n \n-\t.macro neg_ax\n+.macro NEG_AX\n \tmovw\thl, ax\n \tmov\ta, #0\n \tsub\ta, [hl]\n \tmov\t[hl], a\n-\t.endm\n+.endm\n+\n+;----------------------------------------------------------------------\n \n-\t.global\t___divqi3\n-\t.type\t___divqi3,@function\n-___divqi3:\n+START_FUNC\t___divqi3\n \t;; r8 = 4[sp] / 6[sp]\n \tmovw\thl, sp\n \tmovw\tde, #0\n@@ -209,7 +208,7 @@ ___divqi3:\n \tmov\ta, [sp+6]\n \tmov1\tcy, a.7\n \tbc\t$div_signed_den\n-\tbr\t$!generic_div\n+\tbr\t$!__generic_qidiv\n \t\n div_signed_num:\n \t;; neg [sp+4]\n@@ -227,36 +226,34 @@ div_signed_den:\n \tmov\t[hl+6], a\n \tmov\te, #1\n div_unsigned_den:\t\n-\tcall\t$!generic_div\n+\tcall\t$!__generic_qidiv\n \n \tmov\ta, d\n \tcmp0\ta\n \tbz\t$div_skip_restore_num\n \t;;  We have to restore the numerator [sp+4]\n \tmovw\tax, sp\n \taddw\tax, #4\n-\tneg_ax\n+\tNEG_AX\n \tmov\ta, d\n div_skip_restore_num:\t\n \txor\ta, e\n \tbz\t$div_no_neg\n \tmovw\tax, #r8\n-\tneg_ax\n+\tNEG_AX\n div_no_neg:\n \tmov\ta, e\n \tcmp0\ta\n \tbz\t$div_skip_restore_den\n \tmovw\tax, sp\n \taddw\tax, #6\n-\tneg_ax\n+\tNEG_AX\n div_skip_restore_den:\t\n \tret\n-\t.size\t___divqi3, . - ___divqi3\n+END_FUNC ___divqi3\n \t\n \n-\t.global\t___modqi3\n-\t.type\t___modqi3,@function\n-___modqi3:\n+START_FUNC ___modqi3\n \t;; r8 = 4[sp] % 6[sp]\n \tmovw\thl, sp\n \tmovw\tde, #0\n@@ -266,7 +263,7 @@ ___modqi3:\n \tmov\ta, [hl+6]\n \tmov1\tcy, a.7\n \tbc\t$mod_signed_den\n-\tbr\t$!generic_mod\n+\tbr\t$!__generic_qimod\n \t\n mod_signed_num:\n \t;; neg [sp+4]\n@@ -284,7 +281,7 @@ mod_signed_den:\n \tmov\t[hl+6], a\n \tmov\te, #1\n mod_unsigned_den:\t\n-\tcall\t$!generic_mod\n+\tcall\t$!__generic_qimod\n \n \tmov\ta, d\n \tcmp0\ta\n@@ -295,16 +292,14 @@ mod_unsigned_den:\n \t;;  Also restore numerator\n \tmovw \tax, sp\n \taddw\tax, #4\n-\tneg_ax\n+\tNEG_AX\n mod_no_neg:\n \tmov\ta, e\n \tcmp0\ta\n \tbz\t$mod_skip_restore_den\n \tmovw\tax, sp\n \taddw\tax, #6\n-\tneg_ax\n+\tNEG_AX\n mod_skip_restore_den:\t\n \tret\n-\t.size\t___modqi3, . - ___modqi3\n-\n-#endif\n+END_FUNC ___modqi3"}, {"sha": "a580c3eb403d9229f51ad9e872c22a1e4e21b8e1", "filename": "libgcc/config/rl78/divmodsi.S", "status": "modified", "additions": 61, "deletions": 47, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52a1ff8bc1fadcafdb5ac432abb5d1bdd053097c/libgcc%2Fconfig%2Frl78%2Fdivmodsi.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52a1ff8bc1fadcafdb5ac432abb5d1bdd053097c/libgcc%2Fconfig%2Frl78%2Fdivmodsi.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frl78%2Fdivmodsi.S?ref=52a1ff8bc1fadcafdb5ac432abb5d1bdd053097c", "patch": "@@ -23,11 +23,9 @@\n    see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n    <http://www.gnu.org/licenses/>.  */\n \n-#ifndef __RL78_G10__\n-\n #include \"vregs.h\"\n \n-\t.macro make_generic  which,need_result\n+.macro MAKE_GENERIC  which,need_result\n \n \t.if \\need_result\n \tquot = r8\n@@ -69,6 +67,8 @@\n \tbitB2 = bit+2\n \tbitB3 = bit+3\n \n+START_FUNC __generic_sidivmod\\which\n+\n num_lt_den\\which:\n \t.if \\need_result\n \tmovw\tr8, #0\n@@ -100,12 +100,13 @@ shift_den_bit16\\which:\n \t;; to store sign information that must remain intact\n \n \t.if \\need_result\n-\n-generic_div:\n+\t.global __generic_sidiv\n+__generic_sidiv:\n \n \t.else\n \n-generic_mod:\n+\t.global __generic_simod\n+__generic_simod:\n \n \t.endif\n \n@@ -119,12 +120,21 @@ generic_mod:\n \tcmpw\tax, [hl+8] ; numL\n \tbh\t$num_lt_den\\which\n \n+#ifdef __RL78_G10__\n+\tmovw\tax, denL\n+\tpush\tax\n+\tmovw\tax, bitL\n+\tpush\tax\n+\tmovw\tax, bitH\n+\tpush\tax\n+#else\n \tsel\trb2\n \tpush\tax\t\t; denL\n ;\tpush\tbc\t\t; denH\n \tpush\tde\t\t; bitL\n \tpush\thl\t\t; bitH - stored in BC\n \tsel\trb0\n+#endif\n \n \t;; (quot,rem) = 16[sp] /% 20[sp]\n \n@@ -360,41 +370,49 @@ next_loop_himode\\which:\n \tbnz\t$main_loop_himode\\which\n \n main_loop_done_himode\\which:\t\n+#ifdef __RL78_G10__\n+\tpop\tax\n+\tmovw\tbitH, ax\n+\tpop\tax\n+\tmovw\tbitL, ax\n+\tpop\tax\n+\tmovw\tdenL, ax\n+#else\n \tsel\trb2\n \tpop\thl\t\t; bitH - stored in BC\n \tpop\tde\t\t; bitL\n ;\tpop\tbc\t\t; denH\n \tpop\tax\t\t; denL\n \tsel\trb0\n+#endif\n \n \tret\n-\t.endm\n+END_FUNC __generic_sidivmod\\which\n+.endm\n \n-\tmake_generic _d 1\n-\tmake_generic _m 0\n+;----------------------------------------------------------------------\n+\n+\tMAKE_GENERIC _d 1\n+\tMAKE_GENERIC _m 0\n \n ;----------------------------------------------------------------------\n \n-\t.global\t___udivsi3\n-\t.type\t___udivsi3,@function\n-___udivsi3:\n+START_FUNC ___udivsi3\n \t;; r8 = 4[sp] / 8[sp]\n-\tcall\t$!generic_div\n+\tcall\t$!__generic_sidiv\n \tret\n-\t.size\t___udivsi3, . - ___udivsi3\n+END_FUNC ___udivsi3\n \t\n \n-\t.global\t___umodsi3\n-\t.type\t___umodsi3,@function\n-___umodsi3:\n+START_FUNC ___umodsi3\n \t;; r8 = 4[sp] % 8[sp]\n-\tcall\t$!generic_mod\n+\tcall\t$!__generic_simod\n \tret\n-\t.size\t___umodsi3, . - ___umodsi3\n+END_FUNC ___umodsi3\n \n ;----------------------------------------------------------------------\n \n-\t.macro neg_ax\n+.macro NEG_AX\n \tmovw\thl, ax\n \tmovw\tax, #0\n \tsubw\tax, [hl]\n@@ -404,11 +422,11 @@ ___umodsi3:\n \tdecw\tax\n \tsubw\tax, [hl+2]\n \tmovw\t[hl+2], ax\n-\t.endm\n+.endm\n \n-\t.global\t___divsi3\n-\t.type\t___divsi3,@function\n-___divsi3:\n+;----------------------------------------------------------------------\n+\n+START_FUNC ___divsi3\n \t;; r8 = 4[sp] / 8[sp]\n \tmovw\tde, #0\n \tmov\ta, [sp+7]\n@@ -417,14 +435,14 @@ ___divsi3:\n \tmov\ta, [sp+11]\n \tmov1\tcy, a.7\n \tbc\t$div_signed_den\n-\tcall\t$!generic_div\n+\tcall\t$!__generic_sidiv\n \tret\n-\t\n+\n div_signed_num:\n \t;; neg [sp+4]\n \tmovw\tax, sp\n \taddw\tax, #4\n-\tneg_ax\n+\tNEG_AX\n \tmov\td, #1\n \tmov\ta, [sp+11]\n \tmov1\tcy, a.7\n@@ -433,40 +451,38 @@ div_signed_den:\n \t;; neg [sp+8]\n \tmovw\tax, sp\n \taddw\tax, #8\n-\tneg_ax\n+\tNEG_AX\n \tmov\te, #1\n div_unsigned_den:\t\n-\tcall\t$!generic_div\n+\tcall\t$!__generic_sidiv\n \n \tmov\ta, d\n \tcmp0\ta\n \tbz\t$div_skip_restore_num\n \t;;  We have to restore the numerator [sp+4]\n \tmovw\tax, sp\n \taddw\tax, #4\n-\tneg_ax\n+\tNEG_AX\n \tmov\ta, d\n div_skip_restore_num:\t\n \txor\ta, e\n \tbz\t$div_no_neg\n \tmovw\tax, #r8\n-\tneg_ax\n+\tNEG_AX\n div_no_neg:\n \tmov\ta, e\n \tcmp0\ta\n \tbz\t$div_skip_restore_den\n \t;;  We have to restore the denominator [sp+8]\n \tmovw\tax, sp\n \taddw\tax, #8\n-\tneg_ax\n+\tNEG_AX\n div_skip_restore_den:\n \tret\n-\t.size\t___divsi3, . - ___divsi3\n+END_FUNC ___divsi3\n \t\n \n-\t.global\t___modsi3\n-\t.type\t___modsi3,@function\n-___modsi3:\n+START_FUNC ___modsi3\n \t;; r8 = 4[sp] % 8[sp]\n \tmovw\tde, #0\n \tmov\ta, [sp+7]\n@@ -475,14 +491,14 @@ ___modsi3:\n \tmov\ta, [sp+11]\n \tmov1\tcy, a.7\n \tbc\t$mod_signed_den\n-\tcall\t$!generic_mod\n+\tcall\t$!__generic_simod\n \tret\n-\t\n+\n mod_signed_num:\n \t;; neg [sp+4]\n \tmovw\tax, sp\n \taddw\tax, #4\n-\tneg_ax\n+\tNEG_AX\n \tmov\td, #1\n \tmov\ta, [sp+11]\n \tmov1\tcy, a.7\n@@ -491,31 +507,29 @@ mod_signed_den:\n \t;; neg [sp+8]\n \tmovw\tax, sp\n \taddw\tax, #8\n-\tneg_ax\n+\tNEG_AX\n \tmov\te, #1\n mod_unsigned_den:\t\n-\tcall\t$!generic_mod\n+\tcall\t$!__generic_simod\n \n \tmov\ta, d\n \tcmp0\ta\n \tbz\t$mod_no_neg\n \tmovw\tax, #r8\n-\tneg_ax\n+\tNEG_AX\n \t;;  We have to restore [sp+4] as well.\n \tmovw\tax, sp\n \taddw\tax, #4\n-\tneg_ax\n+\tNEG_AX\n mod_no_neg:\n  .if 1\n \tmov\ta, e\n \tcmp0\ta\n \tbz\t$mod_skip_restore_den\n \tmovw\tax, sp\n \taddw\tax, #8\n-\tneg_ax\n+\tNEG_AX\n mod_skip_restore_den:\t\n  .endif\t\n \tret\n-\t.size\t___modsi3, . - ___modsi3\n-\n-#endif\n+END_FUNC ___modsi3"}, {"sha": "2e9a16dfb2679f4251e48c277ead05a2e560b4b8", "filename": "libgcc/config/rl78/lib2div.c", "status": "modified", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52a1ff8bc1fadcafdb5ac432abb5d1bdd053097c/libgcc%2Fconfig%2Frl78%2Flib2div.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52a1ff8bc1fadcafdb5ac432abb5d1bdd053097c/libgcc%2Fconfig%2Frl78%2Flib2div.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frl78%2Flib2div.c?ref=52a1ff8bc1fadcafdb5ac432abb5d1bdd053097c", "patch": "@@ -34,41 +34,6 @@ typedef int           word_type     __attribute__ ((mode (__word__)));\n #define C3B(a,b,c) a##b##c\n #define C3(a,b,c) C3B(a,b,c)\n \n-#ifdef __RL78_G10__\n-\n-#define UINT_TYPE\tuint32_type\n-#define SINT_TYPE\tsint32_type\n-#define BITS_MINUS_1\t31\n-#define NAME_MODE\tsi\n-\n-#include \"rl78-divmod.h\"\n-\n-#undef UINT_TYPE\n-#undef SINT_TYPE\n-#undef BITS_MINUS_1\n-#undef NAME_MODE\n-\n-#define UINT_TYPE\tuint16_type\n-#define SINT_TYPE\tsint16_type\n-#define BITS_MINUS_1\t15\n-#define NAME_MODE\thi\n-\n-#include \"rl78-divmod.h\"\n-\n-#undef UINT_TYPE\n-#undef SINT_TYPE\n-#undef BITS_MINUS_1\n-#undef NAME_MODE\n-\n-#define UINT_TYPE\tuint08_type\n-#define SINT_TYPE\tsint08_type\n-#define BITS_MINUS_1\t7\n-#define NAME_MODE\tqi\n-\n-#include \"rl78-divmod.h\"\n-\n-#endif\n-\n /* See the comment by the definition of LIBGCC2_UNITS_PER_WORD in\n    m32c.h for why we are creating extra versions of some of the\n    functions defined in libgcc2.c.  */"}, {"sha": "3788b6f2114cd7f67069267d6ebdbaaf93312bd6", "filename": "libgcc/config/rl78/lib2mul.c", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52a1ff8bc1fadcafdb5ac432abb5d1bdd053097c/libgcc%2Fconfig%2Frl78%2Flib2mul.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52a1ff8bc1fadcafdb5ac432abb5d1bdd053097c/libgcc%2Fconfig%2Frl78%2Flib2mul.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frl78%2Flib2mul.c?ref=52a1ff8bc1fadcafdb5ac432abb5d1bdd053097c", "patch": "@@ -30,26 +30,6 @@ typedef unsigned int  uint08_type   __attribute__ ((mode (QI)));\n #define C3B(a,b,c) a##b##c\n #define C3(a,b,c) C3B(a,b,c)\n \n-#ifdef __RL78_G10__\n-\n-#define UINT_TYPE\tuint32_type\n-#define BITS_MINUS_1\t31\n-#define NAME_MODE\tsi\n-\n-#include \"rl78-mul.h\"\n-\n-#undef UINT_TYPE\n-#undef BITS_MINUS_1\n-#undef NAME_MODE\n-\n-#define UINT_TYPE\tuint16_type\n-#define BITS_MINUS_1\t15\n-#define NAME_MODE\thi\n-\n-#include \"rl78-mul.h\"\n-\n-#endif\n-\n #undef UINT_TYPE\n #undef BITS_MINUS_1\n #undef NAME_MODE"}, {"sha": "190f4112360dce387cc402a1b717f032e0733d86", "filename": "libgcc/config/rl78/mulsi3.S", "status": "modified", "additions": 84, "deletions": 17, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52a1ff8bc1fadcafdb5ac432abb5d1bdd053097c/libgcc%2Fconfig%2Frl78%2Fmulsi3.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52a1ff8bc1fadcafdb5ac432abb5d1bdd053097c/libgcc%2Fconfig%2Frl78%2Fmulsi3.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frl78%2Fmulsi3.S?ref=52a1ff8bc1fadcafdb5ac432abb5d1bdd053097c", "patch": "@@ -24,12 +24,6 @@\n \n #include \"vregs.h\"\n  \n-; the G10 only has one register bank, so cannot use these optimized\n-; versions.  Use the C version instead.\n-\n-#ifndef __RL78_G10__\n-\n-\n ;----------------------------------------------------------------------\n \n ; Register use:\n@@ -39,19 +33,22 @@\n ; DE\tcount\t(resL-tmp)\n ; HL\t[sp+4]\n \n-\t.text\n-\tnop\n-\t.global\t___mulsi3\t\t; (USI a, USI b)\n-___mulsi3:\n+START_FUNC ___mulsi3\n \t;; A is at [sp+4]\n \t;; B is at [sp+8]\n \t;; result is in R8..R11\n \n+#ifdef __RL78_G10__\n+\tmovw\tax, r16\n+\tpush\tax\n+\tmovw\tax, r18\n+\tpush\tax\n+#else\n \tsel\trb2\n \tpush\tax\n \tpush\tbc\n \tsel\trb0\n-\n+#endif\n \tclrw\tax\n \tmovw\tr8, ax\n \tmovw\tr16, ax\n@@ -62,9 +59,19 @@ ___mulsi3:\n \tcmpw\tax, #0xffff\n \tbnz\t$2f\n \tmovw\tax, [sp+8]\n+#ifdef __RL78_G10__\n+\tpush    bc\n+\tmovw    bc, r8\n+\txchw\tax, bc\n+\tsubw    ax, bc\n+\tmovw\tr8, ax\n+\tmovw    ax, bc\n+\tpop     bc\n+#else\n \tsel\trb1\n \tsubw\tax, r_0\n \tsel\trb0\n+#endif\n \tbr\t$1f\n 2:\t\n \tmovw\tbc, ax\n@@ -80,9 +87,19 @@ ___mulsi3:\n \tcmpw\tax, #0xffff\n \tbnz\t$2f\n \tmovw\tax, [sp+12]\n+#ifdef __RL78_G10__\n+\tpush    bc\n+\tmovw    bc, r8\n+\txchw\tax, bc\n+\tsubw    ax, bc\n+\tmovw\tr8, ax\n+\tmovw    ax, bc\n+\tpop     bc\n+#else\n \tsel\trb1\n \tsubw\tax, r_0\n \tsel\trb0\n+#endif\n \tbr\t$1f\n 2:\t\n \tmovw\tbc, ax\n@@ -113,12 +130,28 @@ ___mulsi3:\n \tmovw\tr10, ax\n \tmovw\tax, bc\n \n-\n .Lmul_hisi_top:\n \tmovw\tbc, #0\n \n .Lmul_hisi_loop:\n \tshrw\tax, 1\n+#ifdef __RL78_G10__\n+\tpush\tax\n+\tbnc\t$.Lmul_hisi_no_add_g10\n+\tmovw\tax, r8\n+\taddw\tax, r10\n+\tmovw\tr8, ax\n+\tsknc\n+\tincw\tr16\n+\tmovw\tax, r16\n+\taddw\tax, r_2\n+\tmovw\tr16, ax\n+.Lmul_hisi_no_add_g10:\n+\tmovw\tax, r10\n+\tshlw\tax, 1\n+\tmovw\tr10, ax\n+\tpop\tax\n+#else\n \tbnc\t$.Lmul_hisi_no_add\n \tsel\trb1\n \taddw\tax, bc\n@@ -130,11 +163,29 @@ ___mulsi3:\n \tsel\trb1\n \tshlw\tbc, 1\n \tsel\trb0\n+#endif\n \trolwc\tbc, 1\n \tcmpw\tax, #0\n \tbz\t$.Lmul_hisi_done\n \n \tshrw\tax, 1\n+#ifdef __RL78_G10__\n+\tpush\tax\n+\tbnc\t$.Lmul_hisi_no_add2_g10\n+\tmovw\tax, r8\n+\taddw\tax, r10\n+\tmovw\tr8, ax\n+\tmovw\tax, r16\n+\tsknc\n+\tincw\tax\n+\taddw\tax, r_2\n+\tmovw\tr16, ax\n+.Lmul_hisi_no_add2_g10:\n+\tmovw\tax, r10\n+\tshlw\tax, 1\n+\tmovw\tr10, ax\n+\tpop\tax\n+#else\n \tbnc\t$.Lmul_hisi_no_add2\n \tsel\trb1\n \taddw\tax, bc\n@@ -146,6 +197,7 @@ ___mulsi3:\n \tsel\trb1\n \tshlw\tbc, 1\n \tsel\trb0\n+#endif\n \trolwc\tbc, 1\n \tcmpw\tax, #0\n \tbnz\t$.Lmul_hisi_loop\n@@ -154,18 +206,25 @@ ___mulsi3:\n \n \tmovw\tax, r16\n \tmovw\tr10, ax\n-\t\n+\n+#ifdef __RL78_G10__\n+\tpop\tax\n+\tmovw\tr18, ax\n+\tpop\tax\n+\tmovw\tr16, ax\n+#else\n \tsel\trb2\n \tpop\tbc\n \tpop\tax\n \tsel\trb0\n+#endif\n \n \tret\n+END_FUNC ___mulsi3\n \n ;----------------------------------------------------------------------\n \n-\t.global\t___mulhi3\n-___mulhi3:\n+START_FUNC ___mulhi3\n \tmovw\tr8, #0\n \tmovw\tax, [sp+6]\n \tmovw\tbc, ax\n@@ -179,9 +238,18 @@ ___mulhi3:\n \tbr\t$.Lmul_hi_loop\n \t\n .Lmul_hi_top:\n+#ifdef __RL78_G10__\n+\tpush\tax\n+\tmovw\tax, r8\n+\taddw\tax, r_2\n+\tmovw\tr8, ax\n+\tpop\tax\n+#else\n \tsel\trb1\n \taddw\tax, r_2\n \tsel\trb0\n+#endif\n+\n .Lmul_hi_no_add:\t\n \tshlw\tbc, 1\n .Lmul_hi_loop:\n@@ -198,5 +266,4 @@ ___mulhi3:\n \n .Lmul_hi_done:\n \tret\n-\n-#endif\n+END_FUNC ___mulhi3"}, {"sha": "be0d643d8be8e72fe39c907b2f59e98a7ba491a7", "filename": "libgcc/config/rl78/t-rl78", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52a1ff8bc1fadcafdb5ac432abb5d1bdd053097c/libgcc%2Fconfig%2Frl78%2Ft-rl78", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52a1ff8bc1fadcafdb5ac432abb5d1bdd053097c/libgcc%2Fconfig%2Frl78%2Ft-rl78", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frl78%2Ft-rl78?ref=52a1ff8bc1fadcafdb5ac432abb5d1bdd053097c", "patch": "@@ -30,3 +30,5 @@ LIB2ADD = \\\n \t$(srcdir)/config/rl78/divmodqi.S \\\n \t$(srcdir)/config/rl78/signbit.S \\\n \t$(srcdir)/config/rl78/cmpsi2.S\n+\n+HOST_LIBGCC2_CFLAGS += -Os -ffunction-sections -fdata-sections"}, {"sha": "d5209e20fa58524cde6790f0a3f08d42af13e338", "filename": "libgcc/config/rl78/vregs.h", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52a1ff8bc1fadcafdb5ac432abb5d1bdd053097c/libgcc%2Fconfig%2Frl78%2Fvregs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52a1ff8bc1fadcafdb5ac432abb5d1bdd053097c/libgcc%2Fconfig%2Frl78%2Fvregs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frl78%2Fvregs.h?ref=52a1ff8bc1fadcafdb5ac432abb5d1bdd053097c", "patch": "@@ -54,3 +54,18 @@ r22\t=\t0xffeee\n r23\t=\t0xffeef\n \n #endif\n+\n+    /* Start a function in its own section, so that it\n+       can be subject to linker garbage collection.  */\n+.macro START_FUNC name\n+\t.pushsection .text.\\name,\"ax\",@progbits\n+\t.global \\name\n+\t.type \\name , @function\n+\\name:\n+.endm\n+\n+    /* End the function.  Set the size.  */\n+.macro END_FUNC name\t\n+\t.size \\name , . - \\name\n+\t.popsection\n+.endm"}]}