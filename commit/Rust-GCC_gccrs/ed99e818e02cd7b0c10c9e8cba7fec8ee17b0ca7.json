{"sha": "ed99e818e02cd7b0c10c9e8cba7fec8ee17b0ca7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWQ5OWU4MThlMDJjZDdiMGMxMGM5ZThjYmE3ZmVjOGVlMTdiMGNhNw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-02-05T15:45:24Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-02-05T15:45:24Z"}, "message": "PR libstdc++/89194 untangle is_convertible and is_nothrow_convertible\n\nThe additional logic added to __is_convertible_helper in order to\nsupport is_nothrow_convertible makes some uses of is_convertible\nill-formed. This appears to be due to PR c++/87603, but can be avoided\njust by defining a separate helper for is_nothrow_convertible. The same\nproblems are likely to still exist for is_nothrow_convertible, but that\nis new and so won't cause regressions for existing users of\nis_convertible.\n\n\tPR libstdc++/89194\n\t* include/std/type_traits (__is_convertible_helper)\n\t(__is_convertible_helper<_From, _To, false>): Revert changes to\n\tsupport is_nothrow_convertible.\n\t(__is_nt_convertible_helper): New helper.\n\t(is_nothrow_convertible): Use __is_nt_convertible_helper.\n\nFrom-SVN: r268543", "tree": {"sha": "05d62d0809c00286cbb2770e05c70fdde6e5dfc1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/05d62d0809c00286cbb2770e05c70fdde6e5dfc1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ed99e818e02cd7b0c10c9e8cba7fec8ee17b0ca7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed99e818e02cd7b0c10c9e8cba7fec8ee17b0ca7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed99e818e02cd7b0c10c9e8cba7fec8ee17b0ca7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed99e818e02cd7b0c10c9e8cba7fec8ee17b0ca7/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7356fbde50dd4bfd55eaa0bed31b31da55d1461c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7356fbde50dd4bfd55eaa0bed31b31da55d1461c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7356fbde50dd4bfd55eaa0bed31b31da55d1461c"}], "stats": {"total": 52, "additions": 33, "deletions": 19}, "files": [{"sha": "5408cc72bf4c7785d48ba8b57e2622ad22b44822", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed99e818e02cd7b0c10c9e8cba7fec8ee17b0ca7/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed99e818e02cd7b0c10c9e8cba7fec8ee17b0ca7/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=ed99e818e02cd7b0c10c9e8cba7fec8ee17b0ca7", "patch": "@@ -1,5 +1,12 @@\n 2019-02-05  Jonathan Wakely  <jwakely@redhat.com>\n \n+\tPR libstdc++/89194\n+\t* include/std/type_traits (__is_convertible_helper)\n+\t(__is_convertible_helper<_From, _To, false>): Revert changes to\n+\tsupport is_nothrow_convertible.\n+\t(__is_nt_convertible_helper): New helper.\n+\t(is_nothrow_convertible): Use __is_nt_convertible_helper.\n+\n \t* testsuite/23_containers/vector/modifiers/push_back/49836.cc: Restore\n \tuse of CopyConsOnlyType, but also test DelAnyAssign for completeness.\n "}, {"sha": "f05a583cb04f4fbabb489f450d8afd76059cdfcb", "filename": "libstdc++-v3/include/std/type_traits", "status": "modified", "additions": 26, "deletions": 19, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed99e818e02cd7b0c10c9e8cba7fec8ee17b0ca7/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed99e818e02cd7b0c10c9e8cba7fec8ee17b0ca7/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits?ref=ed99e818e02cd7b0c10c9e8cba7fec8ee17b0ca7", "patch": "@@ -1344,9 +1344,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct __is_convertible_helper\n     {\n       typedef typename is_void<_To>::type type;\n-#if __cplusplus > 201703L\n-      typedef type __is_nothrow_type;\n-#endif\n     };\n \n   template<typename _From, typename _To>\n@@ -1364,23 +1361,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tstatic false_type\n \t__test(...);\n \n-#if __cplusplus > 201703L\n-      template<typename _From1, typename _To1,\n-\t       bool _NoEx = noexcept(__test_aux<_To1>(std::declval<_From1>()))>\n-\tstatic __bool_constant<_NoEx>\n-\t__test_nothrow(int);\n-\n-      template<typename, typename>\n-\tstatic false_type\n-\t__test_nothrow(...);\n-#endif\n-\n     public:\n       typedef decltype(__test<_From, _To>(0)) type;\n-\n-#if __cplusplus > 201703L\n-      typedef decltype(__test_nothrow<_From, _To>(0)) __is_nothrow_type;\n-#endif\n     };\n \n \n@@ -1391,10 +1373,35 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { };\n \n #if __cplusplus > 201703L\n+    template<typename _From, typename _To,\n+           bool = __or_<is_void<_From>, is_function<_To>,\n+                        is_array<_To>>::value>\n+    struct __is_nt_convertible_helper\n+    : is_void<_To>\n+    { };\n+\n+  template<typename _From, typename _To>\n+    class __is_nt_convertible_helper<_From, _To, false>\n+    {\n+      template<typename _To1>\n+\tstatic void __test_aux(_To1) noexcept;\n+\n+      template<typename _From1, typename _To1>\n+\tstatic bool_constant<noexcept(__test_aux<_To1>(std::declval<_From1>()))>\n+\t__test(int);\n+\n+      template<typename, typename>\n+\tstatic false_type\n+\t__test(...);\n+\n+    public:\n+      using type = decltype(__test<_From, _To>(0));\n+    };\n+\n   /// is_nothrow_convertible\n   template<typename _From, typename _To>\n     struct is_nothrow_convertible\n-    : public __is_convertible_helper<_From, _To>::__is_nothrow_type\n+    : public __is_nt_convertible_helper<_From, _To>::type\n     { };\n \n   /// is_nothrow_convertible_v"}]}