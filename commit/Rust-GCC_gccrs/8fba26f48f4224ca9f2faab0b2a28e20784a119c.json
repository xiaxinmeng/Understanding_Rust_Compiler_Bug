{"sha": "8fba26f48f4224ca9f2faab0b2a28e20784a119c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGZiYTI2ZjQ4ZjQyMjRjYTlmMmZhYWIwYjJhMjhlMjA3ODRhMTE5Yw==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2018-02-25T12:41:26Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2018-02-25T12:41:26Z"}, "message": "re PR fortran/84523 (Runtime crash deallocating allocatable array within derived type)\n\n2018-02-25  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/84523\n\t* trans-intrinsic.c (gfc_conv_allocated): If the argument se\n\thas a pre block, add it to the expression pre block.\n\n2018-02-25  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/84523\n\t* gfortran.dg/pr84523.f90: New test.\n\nFrom-SVN: r257970", "tree": {"sha": "7736367a759834239d9df93cb718fb1e4d2b44fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7736367a759834239d9df93cb718fb1e4d2b44fe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8fba26f48f4224ca9f2faab0b2a28e20784a119c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fba26f48f4224ca9f2faab0b2a28e20784a119c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8fba26f48f4224ca9f2faab0b2a28e20784a119c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fba26f48f4224ca9f2faab0b2a28e20784a119c/comments", "author": null, "committer": null, "parents": [{"sha": "6ef1366a5516de64a6fcf35014359aba9d631c9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ef1366a5516de64a6fcf35014359aba9d631c9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ef1366a5516de64a6fcf35014359aba9d631c9a"}], "stats": {"total": 58, "additions": 58, "deletions": 0}, "files": [{"sha": "2c2aa2b8d9031dc5a74dc508384a7cff9f708075", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fba26f48f4224ca9f2faab0b2a28e20784a119c/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fba26f48f4224ca9f2faab0b2a28e20784a119c/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=8fba26f48f4224ca9f2faab0b2a28e20784a119c", "patch": "@@ -1,3 +1,9 @@\n+2018-02-25  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/84523\n+\t* trans-intrinsic.c (gfc_conv_allocated): If the argument se\n+\thas a pre block, add it to the expression pre block.\n+\n 2018-02-25  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/78238"}, {"sha": "816f3b99ac19cd6740965fa7c2335bd63121b796", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fba26f48f4224ca9f2faab0b2a28e20784a119c/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fba26f48f4224ca9f2faab0b2a28e20784a119c/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=8fba26f48f4224ca9f2faab0b2a28e20784a119c", "patch": "@@ -7606,6 +7606,11 @@ gfc_conv_allocated (gfc_se *se, gfc_expr *expr)\n       tmp = fold_build2_loc (input_location, NE_EXPR, logical_type_node, tmp,\n \t\t\t     fold_convert (TREE_TYPE (tmp), null_pointer_node));\n     }\n+\n+  /* Components of pointer array references sometimes come back with a pre block.  */\n+  if (arg1se.pre.head)\n+    gfc_add_block_to_block (&se->pre, &arg1se.pre);\n+\n   se->expr = convert (gfc_typenode_for_spec (&expr->ts), tmp);\n }\n "}, {"sha": "0a015c8ca593847631d663b54175522ec3b4253a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fba26f48f4224ca9f2faab0b2a28e20784a119c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fba26f48f4224ca9f2faab0b2a28e20784a119c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8fba26f48f4224ca9f2faab0b2a28e20784a119c", "patch": "@@ -1,3 +1,8 @@\n+2018-02-25  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/84523\n+\t* gfortran.dg/pr84523.f90: New test.\n+\n 2018-02-25  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/78238"}, {"sha": "69b9c27e5039fcdfbfb9cf705df25ea7f276e589", "filename": "gcc/testsuite/gfortran.dg/pr84523.f90", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fba26f48f4224ca9f2faab0b2a28e20784a119c/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr84523.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fba26f48f4224ca9f2faab0b2a28e20784a119c/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr84523.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr84523.f90?ref=8fba26f48f4224ca9f2faab0b2a28e20784a119c", "patch": "@@ -0,0 +1,42 @@\n+! { dg-do run }\n+!\n+! Test the fix for PR84523.\n+!\n+! Contributed by Harald Anlauf  <anlauf@gmx.de>\n+!\n+program gfcbug148\n+  implicit none\n+  integer, parameter :: nspots = 80\n+  type t_spot\n+    real, allocatable     :: vm(:,:,:)\n+  end type t_spot\n+  type t_rowcol\n+    integer               :: nh\n+    type(t_spot), pointer :: spots(:) => NULL ()\n+  end type t_rowcol\n+  type(t_rowcol)          :: col\n+  call construct (col, nspots)\n+  call destruct  (col)\n+  !========================================================================\n+contains\n+  !========================================================================\n+  subroutine construct (rc, nh)\n+    type(t_rowcol) ,intent(out) :: rc   ! row or column to set\n+    integer        ,intent(in)  :: nh   ! number of spots in a row\n+    rc%nh = nh\n+    allocate (rc%spots(nh))\n+  end subroutine construct\n+  !------------------------------------------------------------------------\n+  subroutine destruct (rc)\n+    type(t_rowcol) ,intent(inout) :: rc   ! row or column to free\n+    integer :: k\n+    if (associated (rc%spots)) then\n+      if (size(rc%spots) .ne. nspots) stop 1\n+      do k=1, size(rc% spots)\n+        if (allocated (rc%spots(k)%vm)) stop 2  ! Would segfault in runtime.\n+      end do\n+      deallocate (rc%spots)\n+    endif\n+    nullify (rc%spots)\n+  end subroutine destruct\n+end program gfcbug148"}]}