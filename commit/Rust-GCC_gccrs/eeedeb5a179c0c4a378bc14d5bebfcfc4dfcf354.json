{"sha": "eeedeb5a179c0c4a378bc14d5bebfcfc4dfcf354", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWVlZGViNWExNzljMGM0YTM3OGJjMTRkNWJlYmZjZmM0ZGZjZjM1NA==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2001-10-10T22:25:43Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2001-10-10T22:25:43Z"}, "message": "natFinalizerThread.cc: New file.\n\n\t* gnu/gcj/runtime/natFinalizerThread.cc: New file.\n\t* java/lang/natRuntime.cc: Include FinalizerThread.h.\n\t(runFinalization): Call finalizerReady.\n\t* nogc.cc (_Jv_GCInitializeFinalizers): New function.\n\t* prims.cc: Include VirtualMachineError.h, FinalizerThread.h.\n\t(_Jv_CreateJavaVM): Start the finalizer thread.\n\t* no-threads.cc: Include InternalError.h.\n\t(_Jv_ThreadStart): Throw InternalError.\n\t(_Jv_ThreadInitData): Don't throw error if this is not the first\n\tthread.\n\t* Makefile.in: Rebuilt.\n\t* Makefile.am (ordinary_java_source_files): Added\n\tFinalizerThread.java.\n\t(nat_source_files): Added natFinalizerThread.cc.\n\t* include/jvm.h (_Jv_GCInitializeFinalizers): Declare.\n\t* boehm.cc (_Jv_GCInitializeFinalizers): New function.\n\t* gnu/gcj/runtime/FirstThread.java (run): Start finalizer thread.\n\t* gnu/gcj/runtime/FinalizerThread.java: New file.\n\nFrom-SVN: r46163", "tree": {"sha": "6facc0ca8bcfaba4b6989fa00c24d85c2c5d0aa0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6facc0ca8bcfaba4b6989fa00c24d85c2c5d0aa0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eeedeb5a179c0c4a378bc14d5bebfcfc4dfcf354", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eeedeb5a179c0c4a378bc14d5bebfcfc4dfcf354", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eeedeb5a179c0c4a378bc14d5bebfcfc4dfcf354", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eeedeb5a179c0c4a378bc14d5bebfcfc4dfcf354/comments", "author": null, "committer": null, "parents": [{"sha": "a8fee9482f156705563bc70af58254b3d8a1292d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8fee9482f156705563bc70af58254b3d8a1292d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8fee9482f156705563bc70af58254b3d8a1292d"}], "stats": {"total": 249, "additions": 210, "deletions": 39}, "files": [{"sha": "37ef2aa6a24e7644d03a50416e5ca2c267875ebe", "filename": "libjava/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeedeb5a179c0c4a378bc14d5bebfcfc4dfcf354/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeedeb5a179c0c4a378bc14d5bebfcfc4dfcf354/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=eeedeb5a179c0c4a378bc14d5bebfcfc4dfcf354", "patch": "@@ -1,3 +1,24 @@\n+2001-10-10  Tom Tromey  <tromey@redhat.com>\n+\n+\t* gnu/gcj/runtime/natFinalizerThread.cc: New file.\n+\t* java/lang/natRuntime.cc: Include FinalizerThread.h.\n+\t(runFinalization): Call finalizerReady.\n+\t* nogc.cc (_Jv_GCInitializeFinalizers): New function.\n+\t* prims.cc: Include VirtualMachineError.h, FinalizerThread.h.\n+\t(_Jv_CreateJavaVM): Start the finalizer thread.\n+\t* no-threads.cc: Include InternalError.h.\n+\t(_Jv_ThreadStart): Throw InternalError.\n+\t(_Jv_ThreadInitData): Don't throw error if this is not the first\n+\tthread.\n+\t* Makefile.in: Rebuilt.\n+\t* Makefile.am (ordinary_java_source_files): Added\n+\tFinalizerThread.java.\n+\t(nat_source_files): Added natFinalizerThread.cc.\n+\t* include/jvm.h (_Jv_GCInitializeFinalizers): Declare.\n+\t* boehm.cc (_Jv_GCInitializeFinalizers): New function.\n+\t* gnu/gcj/runtime/FirstThread.java (run): Start finalizer thread.\n+\t* gnu/gcj/runtime/FinalizerThread.java: New file.\n+\n 2001-10-09  Per Bothner  <per@bothner.com>\n \n \t* strtod.c (_strtod_r):  Logic to check for missing digits"}, {"sha": "3b5541260f5167d6ed4991b07bdda4b48a04c71a", "filename": "libjava/Makefile.am", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeedeb5a179c0c4a378bc14d5bebfcfc4dfcf354/libjava%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeedeb5a179c0c4a378bc14d5bebfcfc4dfcf354/libjava%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.am?ref=eeedeb5a179c0c4a378bc14d5bebfcfc4dfcf354", "patch": "@@ -1137,6 +1137,7 @@ gnu/gcj/protocol/http/Handler.java \\\n gnu/gcj/protocol/jar/Connection.java \\\n gnu/gcj/protocol/jar/Handler.java \\\n gnu/gcj/runtime/FileDeleter.java \\\n+gnu/gcj/runtime/FinalizerThread.java \\\n gnu/gcj/runtime/FirstThread.java \\\n gnu/gcj/runtime/SharedLibLoader.java \\\n gnu/gcj/runtime/VMClassLoader.java \\\n@@ -1495,6 +1496,7 @@ gnu/gcj/convert/natOutput_SJIS.cc \\\n gnu/gcj/io/natSimpleSHSStream.cc \\\n gnu/gcj/io/shs.cc \\\n gnu/gcj/protocol/core/natCoreInputStream.cc \\\n+gnu/gcj/runtime/natFinalizerThread.cc \\\n gnu/gcj/runtime/natFirstThread.cc \\\n gnu/gcj/runtime/natSharedLibLoader.cc \\\n java/io/natFile.cc \\"}, {"sha": "5204ced139f7f9551174ab446a061ae2fdb6eb16", "filename": "libjava/Makefile.in", "status": "modified", "additions": 46, "deletions": 25, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeedeb5a179c0c4a378bc14d5bebfcfc4dfcf354/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeedeb5a179c0c4a378bc14d5bebfcfc4dfcf354/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=eeedeb5a179c0c4a378bc14d5bebfcfc4dfcf354", "patch": "@@ -123,26 +123,38 @@ libgcj_basedir = @libgcj_basedir@\n mkinstalldirs = @mkinstalldirs@\n \n AUTOMAKE_OPTIONS = foreign\n-@TESTSUBDIR_TRUE@SUBDIRS = @TESTSUBDIR_TRUE@$(DIRLTDL) testsuite gcj include\n-@TESTSUBDIR_FALSE@SUBDIRS = @TESTSUBDIR_FALSE@$(DIRLTDL) gcj include\n-@USE_LIBDIR_TRUE@toolexeclibdir = @USE_LIBDIR_TRUE@$(libdir)$(MULTISUBDIR)\n-@USE_LIBDIR_FALSE@toolexeclibdir = @USE_LIBDIR_FALSE@$(toolexecdir)/lib$(MULTISUBDIR)\n-@USE_LIBDIR_FALSE@toolexecdir = @USE_LIBDIR_FALSE@$(exec_prefix)/$(target_alias)\n-@XLIB_AWT_TRUE@cond_x_ltlibrary = @XLIB_AWT_TRUE@libgcjx.la\n-@XLIB_AWT_FALSE@cond_x_ltlibrary = \n+@TESTSUBDIR_TRUE@SUBDIRS = \\\n+@TESTSUBDIR_TRUE@$(DIRLTDL) testsuite gcj include\n+@TESTSUBDIR_FALSE@SUBDIRS = \\\n+@TESTSUBDIR_FALSE@$(DIRLTDL) gcj include\n+@USE_LIBDIR_TRUE@toolexeclibdir = \\\n+@USE_LIBDIR_TRUE@$(libdir)$(MULTISUBDIR)\n+@USE_LIBDIR_FALSE@toolexeclibdir = \\\n+@USE_LIBDIR_FALSE@$(toolexecdir)/lib$(MULTISUBDIR)\n+@USE_LIBDIR_FALSE@toolexecdir = \\\n+@USE_LIBDIR_FALSE@$(exec_prefix)/$(target_alias)\n+@XLIB_AWT_TRUE@cond_x_ltlibrary = \\\n+@XLIB_AWT_TRUE@libgcjx.la\n+@XLIB_AWT_FALSE@cond_x_ltlibrary = \\\n \n toolexeclib_LTLIBRARIES = libgcj.la $(cond_x_ltlibrary)\n toolexeclib_DATA = libgcj.spec\n data_DATA = libgcj.jar\n \n-@NATIVE_TRUE@bin_PROGRAMS = @NATIVE_TRUE@jv-convert gij rmic rmiregistry\n+@NATIVE_TRUE@bin_PROGRAMS = \\\n+@NATIVE_TRUE@jv-convert gij rmic rmiregistry\n \n bin_SCRIPTS = addr2name.awk\n-@CANADIAN_TRUE@@NULL_TARGET_TRUE@ZIP = @CANADIAN_TRUE@@NULL_TARGET_TRUE@$(MULTIBUILDTOP)../$(COMPPATH)/fastjar/jar$(EXEEXT)\n-@CANADIAN_TRUE@@NULL_TARGET_FALSE@ZIP = @CANADIAN_TRUE@@NULL_TARGET_FALSE@jar\n-@CANADIAN_FALSE@ZIP = @CANADIAN_FALSE@$(MULTIBUILDTOP)../$(COMPPATH)/fastjar/jar$(EXEEXT)\n-@CANADIAN_TRUE@GCJH = @CANADIAN_TRUE@gcjh\n-@CANADIAN_FALSE@GCJH = @CANADIAN_FALSE@$(MULTIBUILDTOP)../$(COMPPATH)/gcc/gcjh$(EXEEXT)\n+@CANADIAN_TRUE@@NULL_TARGET_TRUE@ZIP = \\\n+@CANADIAN_TRUE@@NULL_TARGET_TRUE@$(MULTIBUILDTOP)../$(COMPPATH)/fastjar/jar$(EXEEXT)\n+@CANADIAN_TRUE@@NULL_TARGET_FALSE@ZIP = \\\n+@CANADIAN_TRUE@@NULL_TARGET_FALSE@jar\n+@CANADIAN_FALSE@ZIP = \\\n+@CANADIAN_FALSE@$(MULTIBUILDTOP)../$(COMPPATH)/fastjar/jar$(EXEEXT)\n+@CANADIAN_TRUE@GCJH = \\\n+@CANADIAN_TRUE@gcjh\n+@CANADIAN_FALSE@GCJH = \\\n+@CANADIAN_FALSE@$(MULTIBUILDTOP)../$(COMPPATH)/gcc/gcjh$(EXEEXT)\n \n GCJ_WITH_FLAGS = $(GCJ) --encoding=UTF-8\n \n@@ -162,8 +174,10 @@ AM_CXXFLAGS = -fno-rtti -fnon-call-exceptions \\\n \t@LIBGCJ_CXXFLAGS@ @X_CFLAGS@ $(WARNINGS) -D_GNU_SOURCE \\\n \t-DPREFIX=\"\\\"$(prefix)\\\"\"\n \n-@USING_GCC_TRUE@AM_CFLAGS = @USING_GCC_TRUE@@LIBGCJ_CFLAGS@ $(WARNINGS)\n-@USING_GCC_FALSE@AM_CFLAGS = @USING_GCC_FALSE@@LIBGCJ_CFLAGS@\n+@USING_GCC_TRUE@AM_CFLAGS = \\\n+@USING_GCC_TRUE@@LIBGCJ_CFLAGS@ $(WARNINGS)\n+@USING_GCC_FALSE@AM_CFLAGS = \\\n+@USING_GCC_FALSE@@LIBGCJ_CFLAGS@\n \n JCFLAGS = -g\n JC1FLAGS = @LIBGCJ_JAVAFLAGS@ $(GCJFLAGS)\n@@ -232,7 +246,8 @@ extra_headers = java/lang/Object.h java/lang/Class.h\n \n NM = nm\n \n-@NATIVE_TRUE@@MAINTAINER_MODE_TRUE@noinst_PROGRAMS = @NATIVE_TRUE@@MAINTAINER_MODE_TRUE@gen-from-JIS\n+@NATIVE_TRUE@@MAINTAINER_MODE_TRUE@noinst_PROGRAMS = \\\n+@NATIVE_TRUE@@MAINTAINER_MODE_TRUE@gen-from-JIS\n \n CONVERT_DIR = gnu/gcj/convert\n \n@@ -863,6 +878,7 @@ gnu/gcj/protocol/http/Handler.java \\\n gnu/gcj/protocol/jar/Connection.java \\\n gnu/gcj/protocol/jar/Handler.java \\\n gnu/gcj/runtime/FileDeleter.java \\\n+gnu/gcj/runtime/FinalizerThread.java \\\n gnu/gcj/runtime/FirstThread.java \\\n gnu/gcj/runtime/SharedLibLoader.java \\\n gnu/gcj/runtime/VMClassLoader.java \\\n@@ -1220,6 +1236,7 @@ gnu/gcj/convert/natOutput_SJIS.cc \\\n gnu/gcj/io/natSimpleSHSStream.cc \\\n gnu/gcj/io/shs.cc \\\n gnu/gcj/protocol/core/natCoreInputStream.cc \\\n+gnu/gcj/runtime/natFinalizerThread.cc \\\n gnu/gcj/runtime/natFirstThread.cc \\\n gnu/gcj/runtime/natSharedLibLoader.cc \\\n java/io/natFile.cc \\\n@@ -1385,13 +1402,14 @@ gnu/gcj/convert/natIconv.lo gnu/gcj/convert/natInput_EUCJIS.lo \\\n gnu/gcj/convert/natInput_SJIS.lo gnu/gcj/convert/natOutput_EUCJIS.lo \\\n gnu/gcj/convert/natOutput_SJIS.lo gnu/gcj/io/natSimpleSHSStream.lo \\\n gnu/gcj/io/shs.lo gnu/gcj/protocol/core/natCoreInputStream.lo \\\n-gnu/gcj/runtime/natFirstThread.lo gnu/gcj/runtime/natSharedLibLoader.lo \\\n-java/io/natFile.lo java/io/natFileDescriptor.lo \\\n-java/io/natObjectInputStream.lo java/io/natObjectOutputStream.lo \\\n-java/lang/natCharacter.lo java/lang/natClass.lo \\\n-java/lang/natClassLoader.lo java/lang/natConcreteProcess.lo \\\n-java/lang/natDouble.lo java/lang/natFloat.lo java/lang/natMath.lo \\\n-java/lang/natObject.lo java/lang/natRuntime.lo java/lang/natString.lo \\\n+gnu/gcj/runtime/natFinalizerThread.lo gnu/gcj/runtime/natFirstThread.lo \\\n+gnu/gcj/runtime/natSharedLibLoader.lo java/io/natFile.lo \\\n+java/io/natFileDescriptor.lo java/io/natObjectInputStream.lo \\\n+java/io/natObjectOutputStream.lo java/lang/natCharacter.lo \\\n+java/lang/natClass.lo java/lang/natClassLoader.lo \\\n+java/lang/natConcreteProcess.lo java/lang/natDouble.lo \\\n+java/lang/natFloat.lo java/lang/natMath.lo java/lang/natObject.lo \\\n+java/lang/natRuntime.lo java/lang/natString.lo \\\n java/lang/natStringBuffer.lo java/lang/natSystem.lo \\\n java/lang/natThread.lo java/lang/natThrowable.lo \\\n java/lang/ref/natReference.lo java/lang/reflect/natArray.lo \\\n@@ -1500,9 +1518,12 @@ DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n .deps/gnu/gcj/protocol/http/Handler.P \\\n .deps/gnu/gcj/protocol/jar/Connection.P \\\n .deps/gnu/gcj/protocol/jar/Handler.P \\\n-.deps/gnu/gcj/runtime/FileDeleter.P .deps/gnu/gcj/runtime/FirstThread.P \\\n+.deps/gnu/gcj/runtime/FileDeleter.P \\\n+.deps/gnu/gcj/runtime/FinalizerThread.P \\\n+.deps/gnu/gcj/runtime/FirstThread.P \\\n .deps/gnu/gcj/runtime/SharedLibLoader.P \\\n .deps/gnu/gcj/runtime/VMClassLoader.P \\\n+.deps/gnu/gcj/runtime/natFinalizerThread.P \\\n .deps/gnu/gcj/runtime/natFirstThread.P \\\n .deps/gnu/gcj/runtime/natSharedLibLoader.P .deps/gnu/gcj/xlib/Clip.P \\\n .deps/gnu/gcj/xlib/Colormap.P .deps/gnu/gcj/xlib/Display.P \\\n@@ -2485,7 +2506,7 @@ distdir: $(DISTFILES)\n \t@for file in $(DISTFILES); do \\\n \t  d=$(srcdir); \\\n \t  if test -d $$d/$$file; then \\\n-\t    cp -pr $$d/$$file $(distdir)/$$file; \\\n+\t    cp -pr $$/$$file $(distdir)/$$file; \\\n \t  else \\\n \t    test -f $(distdir)/$$file \\\n \t    || ln $$d/$$file $(distdir)/$$file 2> /dev/null \\"}, {"sha": "e3dfe89f1e14d21132f0af75af0c561010d18a11", "filename": "libjava/boehm.cc", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeedeb5a179c0c4a378bc14d5bebfcfc4dfcf354/libjava%2Fboehm.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeedeb5a179c0c4a378bc14d5bebfcfc4dfcf354/libjava%2Fboehm.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fboehm.cc?ref=eeedeb5a179c0c4a378bc14d5bebfcfc4dfcf354", "patch": "@@ -543,6 +543,13 @@ _Jv_AllocTraceOne (jsize size /* includes vtable slot */)\n \n #endif /* JV_HASH_SYNCHRONIZATION */\n \n+void\n+_Jv_GCInitializeFinalizers (void (*notifier) (void))\n+{\n+  GC_finalize_on_demand = 1;\n+  GC_finalizer_notifier = notifier;\n+}\n+\n void\n _Jv_GCRegisterDisappearingLink (jobject *objp)\n {"}, {"sha": "e333d7a41c7d66140a743ea5d6c71e8758607c1a", "filename": "libjava/gnu/gcj/runtime/FinalizerThread.java", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeedeb5a179c0c4a378bc14d5bebfcfc4dfcf354/libjava%2Fgnu%2Fgcj%2Fruntime%2FFinalizerThread.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeedeb5a179c0c4a378bc14d5bebfcfc4dfcf354/libjava%2Fgnu%2Fgcj%2Fruntime%2FFinalizerThread.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Fruntime%2FFinalizerThread.java?ref=eeedeb5a179c0c4a378bc14d5bebfcfc4dfcf354", "patch": "@@ -0,0 +1,73 @@\n+// FinalizerThread.java -- Thread in which finalizers are run.\n+\n+/* Copyright (C) 2001  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+package gnu.gcj.runtime;\n+\n+/**\n+ * @author Tom Tromey <tromey@redhat.com>\n+ * @date October 3, 2001\n+ */\n+public final class FinalizerThread extends Thread\n+{\n+  // Finalizers must be run in a thread with no Java-visible locks\n+  // held.  This qualifies because we don't make the lock visible.\n+  private static final Object lock = new Object ();\n+\n+  // This is true if the finalizer thread started successfully.  It\n+  // might be false if, for instance, there are no threads on the\n+  // current platform.  In this situation we run finalizers in the\n+  // caller's thread.\n+  private static boolean thread_started = false;\n+\n+  public FinalizerThread ()\n+  {\n+    super (\"LibgcjInternalFinalizerThread\");\n+    setDaemon (true);\n+  }\n+\n+  // This is called by the runtime when a finalizer is ready to be\n+  // run.  It simply wakes up the finalizer thread.\n+  public static void finalizerReady ()\n+  {\n+    synchronized (lock)\n+      {\n+\tif (! thread_started)\n+\t  runFinalizers ();\n+\telse\n+\t  lock.notify ();\n+      }\n+  }\n+\n+  // Actually run the finalizers.\n+  private static native void runFinalizers ();\n+\n+  public void run ()\n+  {\n+    // Wait on a lock.  Whenever we wake up, try to invoke the\n+    // finalizers.\n+    synchronized (lock)\n+      {\n+\tthread_started = true;\n+\twhile (true)\n+\t  {\n+\t    try\n+\t      {\n+\t\tlock.wait ();\n+\t      }\n+\t    catch (InterruptedException _)\n+\t      {\n+\t\t// Just ignore it.  It doesn't hurt to run finalizers\n+\t\t// when none are pending.\n+\t      }\n+\t    runFinalizers ();\n+\t  }\n+      }\n+  }\n+}"}, {"sha": "fbc7a5bee2b64217759580583f5059bf62cda4c5", "filename": "libjava/gnu/gcj/runtime/FirstThread.java", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeedeb5a179c0c4a378bc14d5bebfcfc4dfcf354/libjava%2Fgnu%2Fgcj%2Fruntime%2FFirstThread.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeedeb5a179c0c4a378bc14d5bebfcfc4dfcf354/libjava%2Fgnu%2Fgcj%2Fruntime%2FFirstThread.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Fruntime%2FFirstThread.java?ref=eeedeb5a179c0c4a378bc14d5bebfcfc4dfcf354", "patch": "@@ -1,6 +1,6 @@\n // FirstThread.java - Implementation of very first thread.\n \n-/* Copyright (C) 1998, 1999, 2000  Free Software Foundation\n+/* Copyright (C) 1998, 1999, 2000, 2001  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -33,12 +33,12 @@ public FirstThread (String class_name, String[] args, boolean is_jar)\n     this.args = args;\n     this.is_jar = is_jar;\n   }\n-  \n+\n   public void run()\n   {\n     if (is_jar)\n       klass_name = getMain(klass_name);\n-    \n+\n     if (klass == null)\n       {\n         try\n@@ -50,7 +50,7 @@ public void run()\n \t    throw new NoClassDefFoundError(klass_name);\n \t  }\n       }\n-    \n+\n     call_main();\n   }\n "}, {"sha": "d296bc40551b31539aad1a5653cf2393962172ef", "filename": "libjava/gnu/gcj/runtime/natFinalizerThread.cc", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeedeb5a179c0c4a378bc14d5bebfcfc4dfcf354/libjava%2Fgnu%2Fgcj%2Fruntime%2FnatFinalizerThread.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeedeb5a179c0c4a378bc14d5bebfcfc4dfcf354/libjava%2Fgnu%2Fgcj%2Fruntime%2FnatFinalizerThread.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Fruntime%2FnatFinalizerThread.cc?ref=eeedeb5a179c0c4a378bc14d5bebfcfc4dfcf354", "patch": "@@ -0,0 +1,22 @@\n+// natFinalizerThread.cc - Implementation of FinalizerThread native methods.\n+\n+/* Copyright (C) 2001  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+#include <config.h>\n+\n+#include <gcj/cni.h>\n+#include <jvm.h>\n+\n+#include <gnu/gcj/runtime/FinalizerThread.h>\n+\n+void\n+gnu::gcj::runtime::FinalizerThread::runFinalizers ()\n+{\n+  _Jv_RunFinalizers ();\n+}"}, {"sha": "b4fceac4482013757a9d995183819e424d60098f", "filename": "libjava/include/jvm.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeedeb5a179c0c4a378bc14d5bebfcfc4dfcf354/libjava%2Finclude%2Fjvm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeedeb5a179c0c4a378bc14d5bebfcfc4dfcf354/libjava%2Finclude%2Fjvm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fjvm.h?ref=eeedeb5a179c0c4a378bc14d5bebfcfc4dfcf354", "patch": "@@ -157,6 +157,9 @@ void * _Jv_BuildGCDescr(jclass);\n    memory.  */\n void *_Jv_MallocUnchecked (jsize size) __attribute__((__malloc__));\n \n+/* Initialize finalizers.  The argument is a function to be called\n+   when a finalizer is ready to be run.  */\n+void _Jv_GCInitializeFinalizers (void (*notifier) (void));\n /* Run finalizers for objects ready to be finalized..  */\n void _Jv_RunFinalizers (void);\n /* Run all finalizers.  Should be called only before exit.  */"}, {"sha": "0551ba620a6a13dec4665f8f78042f263ae599a9", "filename": "libjava/java/lang/natRuntime.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeedeb5a179c0c4a378bc14d5bebfcfc4dfcf354/libjava%2Fjava%2Flang%2FnatRuntime.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeedeb5a179c0c4a378bc14d5bebfcfc4dfcf354/libjava%2Fjava%2Flang%2FnatRuntime.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatRuntime.cc?ref=eeedeb5a179c0c4a378bc14d5bebfcfc4dfcf354", "patch": "@@ -18,6 +18,7 @@ details.  */\n #include <java/lang/UnknownError.h>\n #include <java/lang/UnsatisfiedLinkError.h>\n #include <gnu/gcj/runtime/FileDeleter.h>\n+#include <gnu/gcj/runtime/FinalizerThread.h>\n \n #include <jni.h>\n \n@@ -208,7 +209,7 @@ java::lang::Runtime::init (void)\n void\n java::lang::Runtime::runFinalization (void)\n {\n-  _Jv_RunFinalizers ();\n+  gnu::gcj::runtime::FinalizerThread::finalizerReady ();\n }\n \n jlong"}, {"sha": "4153dcd04dee6c6b3cce9076e62fe0c736abc90b", "filename": "libjava/no-threads.cc", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeedeb5a179c0c4a378bc14d5bebfcfc4dfcf354/libjava%2Fno-threads.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeedeb5a179c0c4a378bc14d5bebfcfc4dfcf354/libjava%2Fno-threads.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fno-threads.cc?ref=eeedeb5a179c0c4a378bc14d5bebfcfc4dfcf354", "patch": "@@ -1,6 +1,6 @@\n // no-thread.cc - Implementation of `no threads' threads.\n \n-/* Copyright (C) 1998, 1999  Free Software Foundation\n+/* Copyright (C) 1998, 1999, 2001  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -13,22 +13,21 @@ details.  */\n #include <gcj/cni.h>\n #include <jvm.h>\n #include <java/lang/Thread.h>\n+#include <java/lang/InternalError.h>\n \n java::lang::Thread *_Jv_OnlyThread = NULL;\n \n _Jv_Thread_t *\n-_Jv_ThreadInitData (java::lang::Thread * thread)\n+_Jv_ThreadInitData (java::lang::Thread *thread)\n {\n-  // Don't use JvAssert, since we want this to fail even when compiled\n-  // without assertions.\n-  if (_Jv_OnlyThread)\n-    JvFail (\"only thread already running\");\n-  _Jv_OnlyThread = thread;\n+  // It is ok to create a new Thread object, as long as it isn't started.\n+  if (_Jv_OnlyThread == NULL)\n+    _Jv_OnlyThread = thread;\n   return NULL;\n }\n \n void\n _Jv_ThreadStart (java::lang::Thread *, _Jv_Thread_t *, _Jv_ThreadStartFunc *)\n {\n-  JvFail (\"Thread.start called but threads not available\");\n+  throw new java::lang::InternalError (JvNewStringLatin1 (\"Thread.start called but threads not available\"));\n }"}, {"sha": "82bf1192f351d0ba93f9a8e8b49f783225cb7c16", "filename": "libjava/nogc.cc", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeedeb5a179c0c4a378bc14d5bebfcfc4dfcf354/libjava%2Fnogc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeedeb5a179c0c4a378bc14d5bebfcfc4dfcf354/libjava%2Fnogc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fnogc.cc?ref=eeedeb5a179c0c4a378bc14d5bebfcfc4dfcf354", "patch": "@@ -91,6 +91,11 @@ _Jv_RunAllFinalizers (void)\n   // FIXME: should still run all finalizers.\n }\n \n+void\n+_Jv_GCInitializeFinalizers (void (*) (void))\n+{\n+}\n+\n void\n _Jv_RunGC (void)\n {"}, {"sha": "7205e1f6bfce04f8f1415027a153d5ac3d01b0dd", "filename": "libjava/prims.cc", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeedeb5a179c0c4a378bc14d5bebfcfc4dfcf354/libjava%2Fprims.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeedeb5a179c0c4a378bc14d5bebfcfc4dfcf354/libjava%2Fprims.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fprims.cc?ref=eeedeb5a179c0c4a378bc14d5bebfcfc4dfcf354", "patch": "@@ -53,7 +53,6 @@ details.  */\n #include <java/lang/String.h>\n #include <java/lang/Thread.h>\n #include <java/lang/ThreadGroup.h>\n-#include <gnu/gcj/runtime/FirstThread.h>\n #include <java/lang/ArrayIndexOutOfBoundsException.h>\n #include <java/lang/ArithmeticException.h>\n #include <java/lang/ClassFormatError.h>\n@@ -64,7 +63,10 @@ details.  */\n #include <java/lang/reflect/Modifier.h>\n #include <java/io/PrintStream.h>\n #include <java/lang/UnsatisfiedLinkError.h>\n+#include <java/lang/VirtualMachineError.h>\n #include <gnu/gcj/runtime/VMClassLoader.h>\n+#include <gnu/gcj/runtime/FinalizerThread.h>\n+#include <gnu/gcj/runtime/FirstThread.h>\n \n #ifdef USE_LTDL\n #include <ltdl.h>\n@@ -894,6 +896,21 @@ _Jv_CreateJavaVM (void* /*vm_args*/)\n \n   _Jv_JNI_Init ();\n \n+  _Jv_GCInitializeFinalizers (&::gnu::gcj::runtime::FinalizerThread::finalizerReady);\n+\n+  // Start the GC finalizer thread.  A VirtualMachineError can be\n+  // thrown by the runtime if, say, threads aren't available.  In this\n+  // case finalizers simply won't run.\n+  try\n+    {\n+      using namespace gnu::gcj::runtime;\n+      FinalizerThread *ft = new FinalizerThread ();\n+      ft->start ();\n+    }\n+  catch (java::lang::VirtualMachineError *ignore)\n+    {\n+    }\n+\n   return 0;\n }\n "}]}