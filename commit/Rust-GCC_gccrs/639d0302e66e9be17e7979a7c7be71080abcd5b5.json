{"sha": "639d0302e66e9be17e7979a7c7be71080abcd5b5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjM5ZDAzMDJlNjZlOWJlMTdlNzk3OWE3YzdiZTcxMDgwYWJjZDViNQ==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "avr@gjlay.de", "date": "2012-02-28T08:57:39Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2012-02-28T08:57:39Z"}, "message": "builtins.def: New file.\n\n\t* config/avr/builtins.def: New file.\n\t* config/avr/t-avr (avr.o, avr-c.o): Depend on it.\n\t* config/avr/avr.c (enum avr_builtin_id): Use it.\n\t(avr_init_builtins): Use it. And use avr_bdesc.\n\t(bdesc_1arg): Remove.\n\t(bdesc_2arg): Remove.\n\t(bdesc_3arg): Remove.\n\t(struct avr_builtin_description): Add field n_args.\n\t(avr_bdesc): New static variable using builtins.def.\n\t(avr_expand_builtin): Use it.\n\tDon't call avr_expand_delay_cycles if op0 is not CONST_INT.\n\t(avr_fold_builtin): Fold AVR_BUILTIN_SWAP.\n\tDon't fold AVR_BUILTIN_INSERT_BITS if arg0 is not INTEGER_CST.\n\nFrom-SVN: r184616", "tree": {"sha": "825810f4862db52ee58d2ce059b5c409b59da8bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/825810f4862db52ee58d2ce059b5c409b59da8bb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/639d0302e66e9be17e7979a7c7be71080abcd5b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/639d0302e66e9be17e7979a7c7be71080abcd5b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/639d0302e66e9be17e7979a7c7be71080abcd5b5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/639d0302e66e9be17e7979a7c7be71080abcd5b5/comments", "author": null, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8310dca7787a4f1fee92fedc041095f2fb902d5c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8310dca7787a4f1fee92fedc041095f2fb902d5c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8310dca7787a4f1fee92fedc041095f2fb902d5c"}], "stats": {"total": 258, "additions": 151, "deletions": 107}, "files": [{"sha": "a89a8ff6943d4ad1117fa0a8f5ae1dbf3ce4ed5b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/639d0302e66e9be17e7979a7c7be71080abcd5b5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/639d0302e66e9be17e7979a7c7be71080abcd5b5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=639d0302e66e9be17e7979a7c7be71080abcd5b5", "patch": "@@ -1,3 +1,19 @@\n+2012-02-28  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\t* config/avr/builtins.def: New file.\n+\t* config/avr/t-avr (avr.o, avr-c.o): Depend on it.\n+\t* config/avr/avr.c (enum avr_builtin_id): Use it.\n+\t(avr_init_builtins): Use it. And use avr_bdesc.\n+\t(bdesc_1arg): Remove.\n+\t(bdesc_2arg): Remove.\n+\t(bdesc_3arg): Remove.\n+\t(struct avr_builtin_description): Add field n_args.\n+\t(avr_bdesc): New static variable using builtins.def.\n+\t(avr_expand_builtin): Use it.\n+\tDon't call avr_expand_delay_cycles if op0 is not CONST_INT.\n+\t(avr_fold_builtin): Fold AVR_BUILTIN_SWAP.\n+\tDon't fold AVR_BUILTIN_INSERT_BITS if arg0 is not INTEGER_CST.\n+\n 2012-02-28  Georg-Johann Lay  <avr@gjlay.de>\n \n \tPR target/52148"}, {"sha": "598a340e07e9963c7aca7de24c6511bfe43dad57", "filename": "gcc/config/avr/avr-c.c", "status": "modified", "additions": 17, "deletions": 18, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/639d0302e66e9be17e7979a7c7be71080abcd5b5/gcc%2Fconfig%2Favr%2Favr-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/639d0302e66e9be17e7979a7c7be71080abcd5b5/gcc%2Fconfig%2Favr%2Favr-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr-c.c?ref=639d0302e66e9be17e7979a7c7be71080abcd5b5", "patch": "@@ -71,9 +71,19 @@ avr_toupper (char *up, const char *lo)\n              \n /* Worker function for TARGET_CPU_CPP_BUILTINS.  */\n \n+static const char *const avr_builtin_name[] =\n+  {\n+#define DEF_BUILTIN(NAME, N_ARGS, ID, TYPE, CODE) NAME,\n+#include \"builtins.def\"\n+#undef DEF_BUILTIN\n+    NULL\n+  };\n+\n void\n avr_cpu_cpp_builtins (struct cpp_reader *pfile)\n {\n+  int i;\n+  \n   builtin_define_std (\"AVR\");\n \n   if (avr_current_arch->macro)\n@@ -140,8 +150,6 @@ avr_cpu_cpp_builtins (struct cpp_reader *pfile)\n   \n   if (!strcmp (lang_hooks.name, \"GNU C\"))\n     {\n-      int i;\n-      \n       for (i = 0; avr_addrspace[i].name; i++)\n         if (!ADDR_SPACE_GENERIC_P (i)\n             /* Only supply __FLASH<n> macro if the address space is reasonable\n@@ -161,20 +169,11 @@ avr_cpu_cpp_builtins (struct cpp_reader *pfile)\n      easily query if or if not a specific builtin\n      is available. */\n \n-  cpp_define (pfile, \"__BUILTIN_AVR_NOP\");\n-  cpp_define (pfile, \"__BUILTIN_AVR_SEI\");\n-  cpp_define (pfile, \"__BUILTIN_AVR_CLI\");\n-  cpp_define (pfile, \"__BUILTIN_AVR_WDR\");\n-  cpp_define (pfile, \"__BUILTIN_AVR_SLEEP\");\n-  cpp_define (pfile, \"__BUILTIN_AVR_SWAP\");\n-  cpp_define (pfile, \"__BUILTIN_AVR_INSERT_BITS\");\n-  cpp_define (pfile, \"__BUILTIN_AVR_DELAY_CYCLES\");\n-\n-  cpp_define (pfile, \"__BUILTIN_AVR_FMUL\");\n-  cpp_define (pfile, \"__BUILTIN_AVR_FMULS\");\n-  cpp_define (pfile, \"__BUILTIN_AVR_FMULSU\");\n-\n-  cpp_define (pfile, \"__INT24_MAX__=8388607L\");\n-  cpp_define (pfile, \"__INT24_MIN__=(-__INT24_MAX__-1)\");\n-  cpp_define (pfile, \"__UINT24_MAX__=16777215UL\");\n+  for (i = 0; avr_builtin_name[i]; i++)\n+    {\n+      const char *name = avr_builtin_name[i];\n+      char *Name = (char*) alloca (1 + strlen (name));\n+\n+      cpp_define (pfile, avr_toupper (Name, name));\n+    }\n }"}, {"sha": "de556352079f60ab68c04b69fee573d71ef24312", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 66, "deletions": 89, "changes": 155, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/639d0302e66e9be17e7979a7c7be71080abcd5b5/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/639d0302e66e9be17e7979a7c7be71080abcd5b5/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=639d0302e66e9be17e7979a7c7be71080abcd5b5", "patch": "@@ -10528,17 +10528,12 @@ avr_out_insert_bits (rtx *op, int *plen)\n \n enum avr_builtin_id\n   {\n-    AVR_BUILTIN_NOP,\n-    AVR_BUILTIN_SEI,\n-    AVR_BUILTIN_CLI,\n-    AVR_BUILTIN_WDR,\n-    AVR_BUILTIN_SLEEP,\n-    AVR_BUILTIN_SWAP,\n-    AVR_BUILTIN_INSERT_BITS,\n-    AVR_BUILTIN_FMUL,\n-    AVR_BUILTIN_FMULS,\n-    AVR_BUILTIN_FMULSU,\n-    AVR_BUILTIN_DELAY_CYCLES\n+    \n+#define DEF_BUILTIN(NAME, N_ARGS, ID, TYPE, CODE) ID,\n+#include \"builtins.def\"  \n+#undef DEF_BUILTIN\n+\n+    AVR_BUILTIN_COUNT\n   };\n \n static void\n@@ -10551,14 +10546,6 @@ avr_init_builtin_int24 (void)\n   (*lang_hooks.types.register_builtin_type) (uint24_type, \"__uint24\");\n }\n \n-#define DEF_BUILTIN(NAME, TYPE, CODE)                                   \\\n-  do                                                                    \\\n-    {                                                                   \\\n-      add_builtin_function ((NAME), (TYPE), (CODE), BUILT_IN_MD,        \\\n-                            NULL, NULL_TREE);                           \\\n-    } while (0)\n-\n-\n /* Implement `TARGET_INIT_BUILTINS' */\n /* Set up all builtin functions for this target.  */\n \n@@ -10598,58 +10585,36 @@ avr_init_builtins (void)\n                                 unsigned_char_type_node,\n                                 NULL_TREE);\n \n-  DEF_BUILTIN (\"__builtin_avr_nop\", void_ftype_void, AVR_BUILTIN_NOP);\n-  DEF_BUILTIN (\"__builtin_avr_sei\", void_ftype_void, AVR_BUILTIN_SEI);\n-  DEF_BUILTIN (\"__builtin_avr_cli\", void_ftype_void, AVR_BUILTIN_CLI);\n-  DEF_BUILTIN (\"__builtin_avr_wdr\", void_ftype_void, AVR_BUILTIN_WDR);\n-  DEF_BUILTIN (\"__builtin_avr_sleep\", void_ftype_void, AVR_BUILTIN_SLEEP);\n-  DEF_BUILTIN (\"__builtin_avr_swap\", uchar_ftype_uchar, AVR_BUILTIN_SWAP);\n-  DEF_BUILTIN (\"__builtin_avr_delay_cycles\", void_ftype_ulong, \n-               AVR_BUILTIN_DELAY_CYCLES);\n-\n-  DEF_BUILTIN (\"__builtin_avr_fmul\", uint_ftype_uchar_uchar, \n-               AVR_BUILTIN_FMUL);\n-  DEF_BUILTIN (\"__builtin_avr_fmuls\", int_ftype_char_char, \n-               AVR_BUILTIN_FMULS);\n-  DEF_BUILTIN (\"__builtin_avr_fmulsu\", int_ftype_char_uchar, \n-               AVR_BUILTIN_FMULSU);\n-\n-  DEF_BUILTIN (\"__builtin_avr_insert_bits\", uchar_ftype_ulong_uchar_uchar,\n-               AVR_BUILTIN_INSERT_BITS);\n-\n+#define DEF_BUILTIN(NAME, N_ARGS, ID, TYPE, CODE)                       \\\n+  add_builtin_function (NAME, TYPE, ID, BUILT_IN_MD, NULL, NULL_TREE);\n+#include \"builtins.def\"  \n+#undef DEF_BUILTIN\n+  \n   avr_init_builtin_int24 ();\n }\n \n-#undef DEF_BUILTIN\n \n struct avr_builtin_description\n {\n-  const enum insn_code icode;\n-  const char *const name;\n-  const enum avr_builtin_id id;\n+  enum insn_code icode;\n+  const char *name;\n+  enum avr_builtin_id id;\n+  int n_args;\n };\n \n static const struct avr_builtin_description\n-bdesc_1arg[] =\n+avr_bdesc[] =\n   {\n-    { CODE_FOR_rotlqi3_4, \"__builtin_avr_swap\", AVR_BUILTIN_SWAP }\n-  };\n \n-static const struct avr_builtin_description\n-bdesc_2arg[] =\n-  {\n-    { CODE_FOR_fmul, \"__builtin_avr_fmul\", AVR_BUILTIN_FMUL },\n-    { CODE_FOR_fmuls, \"__builtin_avr_fmuls\", AVR_BUILTIN_FMULS },\n-    { CODE_FOR_fmulsu, \"__builtin_avr_fmulsu\", AVR_BUILTIN_FMULSU }\n-  };\n+#define DEF_BUILTIN(NAME, N_ARGS, ID, TYPE, ICODE)      \\\n+    { ICODE, NAME, ID, N_ARGS },\n+#include \"builtins.def\"  \n+#undef DEF_BUILTIN\n \n-static const struct avr_builtin_description\n-bdesc_3arg[] =\n-  {\n-    { CODE_FOR_insert_bits, \"__builtin_avr_insert_bits\",\n-      AVR_BUILTIN_INSERT_BITS }\n+    { CODE_FOR_nothing, NULL, 0, -1 }\n   };\n \n+\n /* Subroutine of avr_expand_builtin to take care of unop insns.  */\n \n static rtx\n@@ -10831,7 +10796,6 @@ avr_expand_builtin (tree exp, rtx target,\n                     int ignore ATTRIBUTE_UNUSED)\n {\n   size_t i;\n-  const struct avr_builtin_description *d;\n   tree fndecl = TREE_OPERAND (CALL_EXPR_FN (exp), 0);\n   const char* bname = IDENTIFIER_POINTER (DECL_NAME (fndecl));\n   unsigned int id = DECL_FUNCTION_CODE (fndecl);\n@@ -10844,31 +10808,16 @@ avr_expand_builtin (tree exp, rtx target,\n       emit_insn (gen_nopv (GEN_INT(1)));\n       return 0;\n       \n-    case AVR_BUILTIN_SEI:\n-      emit_insn (gen_enable_interrupt ());\n-      return 0;\n-      \n-    case AVR_BUILTIN_CLI:\n-      emit_insn (gen_disable_interrupt ());\n-      return 0;\n-      \n-    case AVR_BUILTIN_WDR:\n-      emit_insn (gen_wdr ());\n-      return 0;\n-      \n-    case AVR_BUILTIN_SLEEP:\n-      emit_insn (gen_sleep ());\n-      return 0;\n-      \n     case AVR_BUILTIN_DELAY_CYCLES:\n       {\n         arg0 = CALL_EXPR_ARG (exp, 0);\n         op0 = expand_expr (arg0, NULL_RTX, VOIDmode, EXPAND_NORMAL);\n \n-        if (! CONST_INT_P (op0))\n+        if (!CONST_INT_P (op0))\n           error (\"%s expects a compile time integer constant\", bname);\n+        else\n+          avr_expand_delay_cycles (op0);\n \n-        avr_expand_delay_cycles (op0);\n         return 0;\n       }\n \n@@ -10886,18 +10835,31 @@ avr_expand_builtin (tree exp, rtx target,\n       }\n     }\n \n-  for (i = 0, d = bdesc_1arg; i < ARRAY_SIZE (bdesc_1arg); i++, d++)\n-    if (d->id == id)\n-      return avr_expand_unop_builtin (d->icode, exp, target);\n-\n-  for (i = 0, d = bdesc_2arg; i < ARRAY_SIZE (bdesc_2arg); i++, d++)\n-    if (d->id == id)\n-      return avr_expand_binop_builtin (d->icode, exp, target);\n-\n-  for (i = 0, d = bdesc_3arg; i < ARRAY_SIZE (bdesc_3arg); i++, d++)\n-    if (d->id == id)\n-      return avr_expand_triop_builtin (d->icode, exp, target);\n-\n+  for (i = 0; avr_bdesc[i].name; i++)\n+    {\n+      const struct avr_builtin_description *d = &avr_bdesc[i];\n+      \n+      if (d->id == id)\n+        switch (d->n_args)\n+          {\n+          case 0:\n+            emit_insn ((GEN_FCN (d->icode)) (target));\n+            return 0;\n+            \n+          case 1:\n+            return avr_expand_unop_builtin (d->icode, exp, target);\n+            \n+          case 2:\n+            return avr_expand_binop_builtin (d->icode, exp, target);\n+            \n+          case 3:\n+            return avr_expand_triop_builtin (d->icode, exp, target);\n+            \n+          default:\n+            gcc_unreachable();\n+        }\n+    }\n+  \n   gcc_unreachable ();\n }\n \n@@ -10919,17 +10881,32 @@ avr_fold_builtin (tree fndecl, int n_args ATTRIBUTE_UNUSED, tree *arg,\n     default:\n       break;\n \n+    case AVR_BUILTIN_SWAP:\n+      {\n+        return fold_build2 (LROTATE_EXPR, val_type, arg[0],\n+                            build_int_cst (val_type, 4));\n+      }\n+  \n     case AVR_BUILTIN_INSERT_BITS:\n       {\n         tree tbits = arg[1];\n         tree tval = arg[2];\n         tree tmap;\n         tree map_type = TREE_VALUE (TYPE_ARG_TYPES (TREE_TYPE (fndecl)));\n-        double_int map = tree_to_double_int (arg[0]);\n+        double_int map;\n         bool changed = false;\n         unsigned i;\n         avr_map_op_t best_g;\n+\n+        if (TREE_CODE (arg[0]) != INTEGER_CST)\n+          {\n+            /* No constant as first argument: Don't fold this and run into\n+               error in avr_expand_builtin.  */\n+            \n+            break;\n+          }\n         \n+        map = tree_to_double_int (arg[0]);\n         tmap = double_int_to_tree (map_type, map);\n \n         if (TREE_CODE (tval) != INTEGER_CST"}, {"sha": "4aa0f1159f914a7a46614f84dabf1f6a4796c52a", "filename": "gcc/config/avr/builtins.def", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/639d0302e66e9be17e7979a7c7be71080abcd5b5/gcc%2Fconfig%2Favr%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/639d0302e66e9be17e7979a7c7be71080abcd5b5/gcc%2Fconfig%2Favr%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Fbuiltins.def?ref=639d0302e66e9be17e7979a7c7be71080abcd5b5", "patch": "@@ -0,0 +1,50 @@\n+/* Copyright (C) 2012 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it under\n+   the terms of the GNU General Public License as published by the Free\n+   Software Foundation; either version 3, or (at your option) any later\n+   version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+   WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+   FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+   for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+/* This file contains the definitions and documentation for the\n+   builtins defined in the AVR part of the GNU compiler.\n+   Befor including this file, define a macro\n+\n+   DEF_BUILTIN(NAME, N_ARGS, ID, TYPE, ICODE)\n+\n+   NAME:   The name as visible by the user as a C string.\n+   ID:     An integer to identify the built-in.\n+   N_ARGS: Number of input arguments.  If special treatment is needed,\n+           set to -1 and handle it by hand, see avr.c:avr_expand_builtin().\n+   TYPE:   A tree node describing the prototype of the built-in.\n+   ICODE:  Insn code number for the insn attached to the built-in.\n+           If special treatment is needed to expand the built-in, set to -1.\n+*/\n+\n+/* Mapped to respective instruction.  */\n+DEF_BUILTIN (\"__builtin_avr_nop\",  -1, AVR_BUILTIN_NOP, void_ftype_void, -1)\n+DEF_BUILTIN (\"__builtin_avr_sei\",   0, AVR_BUILTIN_SEI, void_ftype_void, CODE_FOR_enable_interrupt)\n+DEF_BUILTIN (\"__builtin_avr_cli\",   0, AVR_BUILTIN_CLI, void_ftype_void, CODE_FOR_disable_interrupt)\n+DEF_BUILTIN (\"__builtin_avr_wdr\",   0, AVR_BUILTIN_WDR,   void_ftype_void, CODE_FOR_wdr)\n+DEF_BUILTIN (\"__builtin_avr_sleep\", 0, AVR_BUILTIN_SLEEP, void_ftype_void, CODE_FOR_sleep)\n+\n+/* Mapped to respective instruction but might alse be folded away\n+   or emit as libgcc call if ISA does not provide the instruction.  */\n+DEF_BUILTIN (\"__builtin_avr_swap\",   1, AVR_BUILTIN_SWAP,   uchar_ftype_uchar,      CODE_FOR_rotlqi3_4)\n+DEF_BUILTIN (\"__builtin_avr_fmul\",   2, AVR_BUILTIN_FMUL,   uint_ftype_uchar_uchar, CODE_FOR_fmul)\n+DEF_BUILTIN (\"__builtin_avr_fmuls\",  2, AVR_BUILTIN_FMULS,  int_ftype_char_char,    CODE_FOR_fmuls)\n+DEF_BUILTIN (\"__builtin_avr_fmulsu\", 2, AVR_BUILTIN_FMULSU, int_ftype_char_uchar,   CODE_FOR_fmulsu)\n+\n+/* More complex stuff that cannot be mapped 1:1 to an instruction.  */\n+DEF_BUILTIN (\"__builtin_avr_delay_cycles\", -1, AVR_BUILTIN_DELAY_CYCLES, void_ftype_ulong, -1)\n+DEF_BUILTIN (\"__builtin_avr_insert_bits\", 3, AVR_BUILTIN_INSERT_BITS, uchar_ftype_ulong_uchar_uchar, CODE_FOR_insert_bits)"}, {"sha": "e6b4adee182b4e508a38a8937fbe0d3dce5a0d91", "filename": "gcc/config/avr/t-avr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/639d0302e66e9be17e7979a7c7be71080abcd5b5/gcc%2Fconfig%2Favr%2Ft-avr", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/639d0302e66e9be17e7979a7c7be71080abcd5b5/gcc%2Fconfig%2Favr%2Ft-avr", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Ft-avr?ref=639d0302e66e9be17e7979a7c7be71080abcd5b5", "patch": "@@ -34,6 +34,8 @@ avr-log.o: $(srcdir)/config/avr/avr-log.c \\\n   $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) $(INPUT_H)\n \t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $<\n \n+avr.o avr-c.o: $(srcdir)/config/avr/builtins.def\n+\n # Files and Variables auto-generated from avr-mcus.def\n \n AVR_MCUS = $(srcdir)/config/avr/avr-mcus.def"}]}