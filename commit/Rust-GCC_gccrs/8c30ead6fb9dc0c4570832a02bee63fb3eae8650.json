{"sha": "8c30ead6fb9dc0c4570832a02bee63fb3eae8650", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGMzMGVhZDZmYjlkYzBjNDU3MDgzMmEwMmJlZTYzZmIzZWFlODY1MA==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2010-08-08T02:16:06Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2010-08-08T02:16:06Z"}, "message": "parser.c (cp_default_arg_entry): Declare.\n\n\t* parser.c (cp_default_arg_entry): Declare.  Declare a VEC of it.\n\t(cp_unparsed_functions_entry): Declare.  Declare a VEC of it.\n\t(cp_parser) [unparsed_functions_queues]: Rename to unparsed_queues.\n\tChange type to a VEC.\n\t(unparsed_funs_with_default_args): Define.\n\t(unparsed_funs_with_definitions): Define.\n\t(push_unparsed_function_queues): New function.\n\t(cp_parser_new): Call it.\n\t(pop_unparsed_function_queues): New function.\n\t(cp_parser_class_specifier): Adjust processing of unparsed functions.\n\t(cp_parser_template_declaration_after_export): Use VEC_safe_push.\n\t(cp_parser_save_member_function_body): Likewise.\n\t(cp_parser_late_parsing_for_member): Call push_unparsed_function_queues\n\tand pop_unparsed_function_queues.\n\t(cp_parser_late_parsing_default_args): Likewise.\n\t(cp_parser_save_default_args): Use VEC_safe_push.\n\nFrom-SVN: r162992", "tree": {"sha": "77efe4a500d974639c5df03160d1a57604bb8a83", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/77efe4a500d974639c5df03160d1a57604bb8a83"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8c30ead6fb9dc0c4570832a02bee63fb3eae8650", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c30ead6fb9dc0c4570832a02bee63fb3eae8650", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c30ead6fb9dc0c4570832a02bee63fb3eae8650", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c30ead6fb9dc0c4570832a02bee63fb3eae8650/comments", "author": null, "committer": null, "parents": [{"sha": "4d2fb7695429f6003e4038dbbb786e0eac5d64c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d2fb7695429f6003e4038dbbb786e0eac5d64c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d2fb7695429f6003e4038dbbb786e0eac5d64c0"}], "stats": {"total": 154, "additions": 101, "deletions": 53}, "files": [{"sha": "85a84d0c7e8b6846c34785d898fbb880d6acf232", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c30ead6fb9dc0c4570832a02bee63fb3eae8650/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c30ead6fb9dc0c4570832a02bee63fb3eae8650/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8c30ead6fb9dc0c4570832a02bee63fb3eae8650", "patch": "@@ -1,3 +1,22 @@\n+2010-08-07  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* parser.c (cp_default_arg_entry): Declare.  Declare a VEC of it.\n+\t(cp_unparsed_functions_entry): Declare.  Declare a VEC of it.\n+\t(cp_parser) [unparsed_functions_queues]: Rename to unparsed_queues.\n+\tChange type to a VEC.\n+\t(unparsed_funs_with_default_args): Define.\n+\t(unparsed_funs_with_definitions): Define.\n+\t(push_unparsed_function_queues): New function.\n+\t(cp_parser_new): Call it.\n+\t(pop_unparsed_function_queues): New function.\n+\t(cp_parser_class_specifier): Adjust processing of unparsed functions.\n+\t(cp_parser_template_declaration_after_export): Use VEC_safe_push.\n+\t(cp_parser_save_member_function_body): Likewise.\n+\t(cp_parser_late_parsing_for_member): Call push_unparsed_function_queues\n+\tand pop_unparsed_function_queues.\n+\t(cp_parser_late_parsing_default_args): Likewise.\n+\t(cp_parser_save_default_args): Use VEC_safe_push.\n+\n 2010-08-07  Nathan Froyd  <froydnj@codesourcery.com>\n \n \t* name-lookup.h (cp_label_binding): Declare.  Declare a VEC type"}, {"sha": "dd6f04c000254874c840e8473a31d44416e7264e", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 82, "deletions": 53, "changes": 135, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c30ead6fb9dc0c4570832a02bee63fb3eae8650/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c30ead6fb9dc0c4570832a02bee63fb3eae8650/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=8c30ead6fb9dc0c4570832a02bee63fb3eae8650", "patch": "@@ -1514,6 +1514,34 @@ cp_parser_context_new (cp_parser_context* next)\n   return context;\n }\n \n+/* An entry in a queue of function arguments that require post-processing.  */\n+\n+typedef struct GTY(()) cp_default_arg_entry_d {\n+  /* The current_class_type when we parsed this arg.  */\n+  tree class_type;\n+\n+  /* The function decl itself.  */\n+  tree decl;\n+} cp_default_arg_entry;\n+\n+DEF_VEC_O(cp_default_arg_entry);\n+DEF_VEC_ALLOC_O(cp_default_arg_entry,gc);\n+\n+/* An entry in a stack for member functions of local classes.  */\n+\n+typedef struct GTY(()) cp_unparsed_functions_entry_d {\n+  /* Functions with default arguments that require post-processing.\n+     Functions appear in this list in declaration order.  */\n+  VEC(cp_default_arg_entry,gc) *funs_with_default_args;\n+\n+  /* Functions with defintions that require post-processing.  Functions\n+     appear in this list in declaration order.  */\n+  VEC(tree,gc) *funs_with_definitions;\n+} cp_unparsed_functions_entry;\n+\n+DEF_VEC_O(cp_unparsed_functions_entry);\n+DEF_VEC_ALLOC_O(cp_unparsed_functions_entry,gc);\n+\n /* The cp_parser structure represents the C++ parser.  */\n \n typedef struct GTY(()) cp_parser {\n@@ -1640,21 +1668,10 @@ typedef struct GTY(()) cp_parser {\n      issued as an error message if a type is defined.  */\n   const char *type_definition_forbidden_message;\n \n-  /* A list of lists. The outer list is a stack, used for member\n-     functions of local classes. At each level there are two sub-list,\n-     one on TREE_VALUE and one on TREE_PURPOSE. Each of those\n-     sub-lists has a FUNCTION_DECL or TEMPLATE_DECL on their\n-     TREE_VALUE's. The functions are chained in reverse declaration\n-     order.\n-\n-     The TREE_PURPOSE sublist contains those functions with default\n-     arguments that need post processing, and the TREE_VALUE sublist\n-     contains those functions with definitions that need post\n-     processing.\n-\n-     These lists can only be processed once the outermost class being\n-     defined is complete.  */\n-  tree unparsed_functions_queues;\n+  /* A stack used for member functions of local classes.  The lists\n+     contained in an individual entry can only be processed once the\n+     outermost class being defined is complete.  */\n+  VEC(cp_unparsed_functions_entry,gc) *unparsed_queues;\n \n   /* The number of classes whose definitions are currently in\n      progress.  */\n@@ -1665,6 +1682,29 @@ typedef struct GTY(()) cp_parser {\n   unsigned num_template_parameter_lists;\n } cp_parser;\n \n+/* Managing the unparsed function queues.  */\n+\n+#define unparsed_funs_with_default_args \\\n+  VEC_last (cp_unparsed_functions_entry, parser->unparsed_queues)->funs_with_default_args\n+#define unparsed_funs_with_definitions \\\n+  VEC_last (cp_unparsed_functions_entry, parser->unparsed_queues)->funs_with_definitions\n+\n+static void\n+push_unparsed_function_queues (cp_parser *parser)\n+{\n+  VEC_safe_push (cp_unparsed_functions_entry, gc,\n+\t\t parser->unparsed_queues, NULL);\n+  unparsed_funs_with_default_args = NULL;\n+  unparsed_funs_with_definitions = make_tree_vector ();\n+}\n+\n+static void\n+pop_unparsed_function_queues (cp_parser *parser)\n+{\n+  release_tree_vector (unparsed_funs_with_definitions);\n+  VEC_pop (cp_unparsed_functions_entry, parser->unparsed_queues);\n+}\n+\n /* Prototypes.  */\n \n /* Constructors and destructors.  */\n@@ -3151,7 +3191,7 @@ cp_parser_new (void)\n   parser->in_function_body = false;\n \n   /* The unparsed function queue is empty.  */\n-  parser->unparsed_functions_queues = build_tree_list (NULL_TREE, NULL_TREE);\n+  push_unparsed_function_queues (parser);\n \n   /* There are no classes being defined.  */\n   parser->num_classes_being_defined = 0;\n@@ -16263,10 +16303,11 @@ cp_parser_class_specifier (cp_parser* parser)\n      there is no need to delay the parsing of `A::B::f'.  */\n   if (--parser->num_classes_being_defined == 0)\n     {\n-      tree queue_entry;\n       tree fn;\n       tree class_type = NULL_TREE;\n       tree pushed_scope = NULL_TREE;\n+      unsigned ix;\n+      cp_default_arg_entry *e;\n \n       /* In a first pass, parse default arguments to the functions.\n \t Then, in a second pass, parse the bodies of the functions.\n@@ -16278,20 +16319,19 @@ cp_parser_class_specifier (cp_parser* parser)\n \t    };\n \n \t */\n-      for (TREE_PURPOSE (parser->unparsed_functions_queues)\n-\t     = nreverse (TREE_PURPOSE (parser->unparsed_functions_queues));\n-\t   (queue_entry = TREE_PURPOSE (parser->unparsed_functions_queues));\n-\t   TREE_PURPOSE (parser->unparsed_functions_queues)\n-\t     = TREE_CHAIN (TREE_PURPOSE (parser->unparsed_functions_queues)))\n+      for (ix = 0;\n+\t   VEC_iterate (cp_default_arg_entry, unparsed_funs_with_default_args,\n+\t\t\tix, e);\n+\t   ix++)\n \t{\n-\t  fn = TREE_VALUE (queue_entry);\n+\t  fn = e->decl;\n \t  /* If there are default arguments that have not yet been processed,\n \t     take care of them now.  */\n-\t  if (class_type != TREE_PURPOSE (queue_entry))\n+\t  if (class_type != e->class_type)\n \t    {\n \t      if (pushed_scope)\n \t\tpop_scope (pushed_scope);\n-\t      class_type = TREE_PURPOSE (queue_entry);\n+\t      class_type = e->class_type;\n \t      pushed_scope = push_scope (class_type);\n \t    }\n \t  /* Make sure that any template parameters are in scope.  */\n@@ -16303,18 +16343,13 @@ cp_parser_class_specifier (cp_parser* parser)\n \t}\n       if (pushed_scope)\n \tpop_scope (pushed_scope);\n+      VEC_truncate (cp_default_arg_entry, unparsed_funs_with_default_args, 0);\n       /* Now parse the body of the functions.  */\n-      for (TREE_VALUE (parser->unparsed_functions_queues)\n-\t     = nreverse (TREE_VALUE (parser->unparsed_functions_queues));\n-\t   (queue_entry = TREE_VALUE (parser->unparsed_functions_queues));\n-\t   TREE_VALUE (parser->unparsed_functions_queues)\n-\t     = TREE_CHAIN (TREE_VALUE (parser->unparsed_functions_queues)))\n-\t{\n-\t  /* Figure out which function we need to process.  */\n-\t  fn = TREE_VALUE (queue_entry);\n-\t  /* Parse the function.  */\n-\t  cp_parser_late_parsing_for_member (parser, fn);\n-\t}\n+      for (ix = 0;\n+\t   VEC_iterate (tree, unparsed_funs_with_definitions, ix, fn);\n+\t   ix++)\n+\tcp_parser_late_parsing_for_member (parser, fn);\n+      VEC_truncate (tree, unparsed_funs_with_definitions, 0);\n     }\n \n   /* Put back any saved access checks.  */\n@@ -19167,9 +19202,7 @@ cp_parser_template_declaration_after_export (cp_parser* parser, bool member_p)\n   if (member_p && decl\n       && (TREE_CODE (decl) == FUNCTION_DECL\n \t  || DECL_FUNCTION_TEMPLATE_P (decl)))\n-    TREE_VALUE (parser->unparsed_functions_queues)\n-      = tree_cons (NULL_TREE, decl,\n-\t\t   TREE_VALUE (parser->unparsed_functions_queues));\n+    VEC_safe_push (tree, gc, unparsed_funs_with_definitions, decl);\n }\n \n /* Perform the deferred access checks from a template-parameter-list.\n@@ -19439,9 +19472,7 @@ cp_parser_save_member_function_body (cp_parser* parser,\n   DECL_INITIALIZED_IN_CLASS_P (fn) = 1;\n \n   /* Add FN to the queue of functions to be parsed later.  */\n-  TREE_VALUE (parser->unparsed_functions_queues)\n-    = tree_cons (NULL_TREE, fn,\n-\t\t TREE_VALUE (parser->unparsed_functions_queues));\n+  VEC_safe_push (tree, gc, unparsed_funs_with_definitions, fn);\n \n   return fn;\n }\n@@ -19572,8 +19603,7 @@ cp_parser_late_parsing_for_member (cp_parser* parser, tree member_function)\n      classes.  We want to handle them right away, but we don't want\n      them getting mixed up with functions that are currently in the\n      queue.  */\n-  parser->unparsed_functions_queues\n-    = tree_cons (NULL_TREE, NULL_TREE, parser->unparsed_functions_queues);\n+  push_unparsed_function_queues (parser);\n \n   /* Make sure that any template parameters are in scope.  */\n   maybe_begin_member_template_processing (member_function);\n@@ -19625,8 +19655,7 @@ cp_parser_late_parsing_for_member (cp_parser* parser, tree member_function)\n   maybe_end_member_template_processing ();\n \n   /* Restore the queue.  */\n-  parser->unparsed_functions_queues\n-    = TREE_CHAIN (parser->unparsed_functions_queues);\n+  pop_unparsed_function_queues (parser);\n }\n \n /* If DECL contains any default args, remember it on the unparsed\n@@ -19642,9 +19671,11 @@ cp_parser_save_default_args (cp_parser* parser, tree decl)\n        probe = TREE_CHAIN (probe))\n     if (TREE_PURPOSE (probe))\n       {\n-\tTREE_PURPOSE (parser->unparsed_functions_queues)\n-\t  = tree_cons (current_class_type, decl,\n-\t\t       TREE_PURPOSE (parser->unparsed_functions_queues));\n+\tcp_default_arg_entry *entry\n+\t  = VEC_safe_push (cp_default_arg_entry, gc,\n+\t\t\t   unparsed_funs_with_default_args, NULL);\n+\tentry->class_type = current_class_type;\n+\tentry->decl = decl;\n \tbreak;\n       }\n }\n@@ -19664,8 +19695,7 @@ cp_parser_late_parsing_default_args (cp_parser *parser, tree fn)\n      statement expression extension) encounter more classes.  We want\n      to handle them right away, but we don't want them getting mixed\n      up with default args that are currently in the queue.  */\n-  parser->unparsed_functions_queues\n-    = tree_cons (NULL_TREE, NULL_TREE, parser->unparsed_functions_queues);\n+  push_unparsed_function_queues (parser);\n \n   /* Local variable names (and the `this' keyword) may not appear\n      in a default argument.  */\n@@ -19737,8 +19767,7 @@ cp_parser_late_parsing_default_args (cp_parser *parser, tree fn)\n   parser->local_variables_forbidden_p = saved_local_variables_forbidden_p;\n \n   /* Restore the queue.  */\n-  parser->unparsed_functions_queues\n-    = TREE_CHAIN (parser->unparsed_functions_queues);\n+  pop_unparsed_function_queues (parser);\n }\n \n /* Parse the operand of `sizeof' (or a similar operator).  Returns"}]}