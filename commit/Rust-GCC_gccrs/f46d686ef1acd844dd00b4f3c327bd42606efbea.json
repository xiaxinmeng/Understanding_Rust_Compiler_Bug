{"sha": "f46d686ef1acd844dd00b4f3c327bd42606efbea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjQ2ZDY4NmVmMWFjZDg0NGRkMDBiNGYzYzMyN2JkNDI2MDZlZmJlYQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2013-02-20T20:04:36Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2013-02-20T20:04:36Z"}, "message": "re PR go/56171 (syscall FAILs on Solaris)\n\n\tPR go/56171\nsyscall: Solaris fixes for passing file descriptor.\n\nFrom Rainer Orth.\n\nFrom-SVN: r196180", "tree": {"sha": "dff5156dfe573447879d9fd15abd7f5df573c922", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dff5156dfe573447879d9fd15abd7f5df573c922"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f46d686ef1acd844dd00b4f3c327bd42606efbea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f46d686ef1acd844dd00b4f3c327bd42606efbea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f46d686ef1acd844dd00b4f3c327bd42606efbea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f46d686ef1acd844dd00b4f3c327bd42606efbea/comments", "author": null, "committer": null, "parents": [{"sha": "aa777e7a23c38690a205ece9ebee9d2d4ad23097", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa777e7a23c38690a205ece9ebee9d2d4ad23097", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa777e7a23c38690a205ece9ebee9d2d4ad23097"}], "stats": {"total": 132, "additions": 103, "deletions": 29}, "files": [{"sha": "ea90318cee147bcd14f7e1d2729f2919e51b9298", "filename": "libgo/Makefile.am", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f46d686ef1acd844dd00b4f3c327bd42606efbea/libgo%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f46d686ef1acd844dd00b4f3c327bd42606efbea/libgo%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMakefile.am?ref=f46d686ef1acd844dd00b4f3c327bd42606efbea", "patch": "@@ -1656,6 +1656,13 @@ endif\n endif\n endif\n \n+# Define socket functions.\n+if LIBGO_IS_SOLARIS\n+syscall_socket_os_file = go/syscall/socket_xnet.go\n+else\n+syscall_socket_os_file = go/syscall/socket_posix.go\n+endif\n+\n # Support for uname.\n if LIBGO_IS_SOLARIS\n if LIBGO_IS_386\n@@ -1722,6 +1729,7 @@ go_base_syscall_files = \\\n \t$(syscall_errstr_file) \\\n \t$(syscall_size_file) \\\n \t$(syscall_socket_file) \\\n+\t$(syscall_socket_os_file) \\\n \t$(syscall_uname_file) \\\n \t$(syscall_netlink_file) \\\n \t$(syscall_lsf_file) \\\n@@ -1746,13 +1754,20 @@ go_syscall_test_files = \\\n \tgo/syscall/passfd_test.go\n \n libcalls.go: s-libcalls; @true\n-s-libcalls: Makefile go/syscall/mksyscall.awk $(go_base_syscall_files)\n+s-libcalls: libcalls-list go/syscall/mksyscall.awk $(go_base_syscall_files)\n \trm -f libcalls.go.tmp\n-\tfiles=`echo $^ | sed -e 's/Makefile//' -e 's|[^ ]*go/syscall/mksyscall.awk||'`; \\\n+\tfiles=`echo $^ | sed -e 's/libcalls-list//' -e 's|[^ ]*go/syscall/mksyscall.awk||'`; \\\n \t$(AWK) -f $(srcdir)/go/syscall/mksyscall.awk $${files} > libcalls.go.tmp\n \t$(SHELL) $(srcdir)/../move-if-change libcalls.go.tmp libcalls.go\n \t$(STAMP) $@\n \n+libcalls-list: s-libcalls-list; @true\n+s-libcalls-list: Makefile\n+\trm -f libcalls-list.tmp\n+\techo $(go_base_syscall_files) > libcalls-list.tmp\n+\t$(SHELL) $(srcdir)/../move-if-change libcalls-list.tmp libcalls-list\n+\t$(STAMP) $@\n+\n syscall_arch.go: s-syscall_arch; @true\n s-syscall_arch: Makefile\n \trm -f syscall_arch.go.tmp"}, {"sha": "2ec60d3894db39d7f163cf66bf6802946b790e5c", "filename": "libgo/Makefile.in", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f46d686ef1acd844dd00b4f3c327bd42606efbea/libgo%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f46d686ef1acd844dd00b4f3c327bd42606efbea/libgo%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMakefile.in?ref=f46d686ef1acd844dd00b4f3c327bd42606efbea", "patch": "@@ -1849,6 +1849,10 @@ go_unicode_utf8_files = \\\n \n # Define socket sizes and types.\n @LIBGO_IS_LINUX_TRUE@syscall_socket_file = go/syscall/socket_linux.go epoll.go\n+@LIBGO_IS_SOLARIS_FALSE@syscall_socket_os_file = go/syscall/socket_posix.go\n+\n+# Define socket functions.\n+@LIBGO_IS_SOLARIS_TRUE@syscall_socket_os_file = go/syscall/socket_xnet.go\n @LIBGO_IS_386_FALSE@@LIBGO_IS_SOLARIS_TRUE@syscall_uname_file = go/syscall/libcall_uname.go\n \n # Support for uname.\n@@ -1894,6 +1898,7 @@ go_base_syscall_files = \\\n \t$(syscall_errstr_file) \\\n \t$(syscall_size_file) \\\n \t$(syscall_socket_file) \\\n+\t$(syscall_socket_os_file) \\\n \t$(syscall_uname_file) \\\n \t$(syscall_netlink_file) \\\n \t$(syscall_lsf_file) \\\n@@ -4448,13 +4453,20 @@ s-version: Makefile\n \t$(STAMP) $@\n \n libcalls.go: s-libcalls; @true\n-s-libcalls: Makefile go/syscall/mksyscall.awk $(go_base_syscall_files)\n+s-libcalls: libcalls-list go/syscall/mksyscall.awk $(go_base_syscall_files)\n \trm -f libcalls.go.tmp\n-\tfiles=`echo $^ | sed -e 's/Makefile//' -e 's|[^ ]*go/syscall/mksyscall.awk||'`; \\\n+\tfiles=`echo $^ | sed -e 's/libcalls-list//' -e 's|[^ ]*go/syscall/mksyscall.awk||'`; \\\n \t$(AWK) -f $(srcdir)/go/syscall/mksyscall.awk $${files} > libcalls.go.tmp\n \t$(SHELL) $(srcdir)/../move-if-change libcalls.go.tmp libcalls.go\n \t$(STAMP) $@\n \n+libcalls-list: s-libcalls-list; @true\n+s-libcalls-list: Makefile\n+\trm -f libcalls-list.tmp\n+\techo $(go_base_syscall_files) > libcalls-list.tmp\n+\t$(SHELL) $(srcdir)/../move-if-change libcalls-list.tmp libcalls-list\n+\t$(STAMP) $@\n+\n syscall_arch.go: s-syscall_arch; @true\n s-syscall_arch: Makefile\n \trm -f syscall_arch.go.tmp"}, {"sha": "951bc18fcdfa45773c3623d23cbc12100abf2e9d", "filename": "libgo/go/syscall/sockcmsg_unix.go", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f46d686ef1acd844dd00b4f3c327bd42606efbea/libgo%2Fgo%2Fsyscall%2Fsockcmsg_unix.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f46d686ef1acd844dd00b4f3c327bd42606efbea/libgo%2Fgo%2Fsyscall%2Fsockcmsg_unix.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Fsockcmsg_unix.go?ref=f46d686ef1acd844dd00b4f3c327bd42606efbea", "patch": "@@ -8,7 +8,10 @@\n \n package syscall\n \n-import \"unsafe\"\n+import (\n+\t\"runtime\"\n+\t\"unsafe\"\n+)\n \n // Round the length of a raw sockaddr up to align it propery.\n func cmsgAlignOf(salen int) int {\n@@ -18,6 +21,11 @@ func cmsgAlignOf(salen int) int {\n \tif darwinAMD64 {\n \t\tsalign = 4\n \t}\n+\t// NOTE: Solaris always uses 32-bit alignment,\n+\t// cf. _CMSG_DATA_ALIGNMENT in <sys/socket.h>.\n+\tif runtime.GOOS == \"solaris\" {\n+\t\tsalign = 4\n+\t}\n \tif salen == 0 {\n \t\treturn salign\n \t}"}, {"sha": "a625eb698516f57905c1b258581c45046e19cd1b", "filename": "libgo/go/syscall/socket.go", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f46d686ef1acd844dd00b4f3c327bd42606efbea/libgo%2Fgo%2Fsyscall%2Fsocket.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f46d686ef1acd844dd00b4f3c327bd42606efbea/libgo%2Fgo%2Fsyscall%2Fsocket.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Fsocket.go?ref=f46d686ef1acd844dd00b4f3c327bd42606efbea", "patch": "@@ -177,9 +177,6 @@ func Getpeername(fd int) (sa Sockaddr, err error) {\n \treturn anyToSockaddr(&rsa)\n }\n \n-//sys\tbind(fd int, sa *RawSockaddrAny, len Socklen_t) (err error)\n-//bind(fd _C_int, sa *RawSockaddrAny, len Socklen_t) _C_int\n-\n func Bind(fd int, sa Sockaddr) (err error) {\n \tptr, n, err := sa.sockaddr()\n \tif err != nil {\n@@ -188,9 +185,6 @@ func Bind(fd int, sa Sockaddr) (err error) {\n \treturn bind(fd, ptr, n)\n }\n \n-//sys\tconnect(s int, addr *RawSockaddrAny, addrlen Socklen_t) (err error)\n-//connect(s _C_int, addr *RawSockaddrAny, addrlen Socklen_t) _C_int\n-\n func Connect(fd int, sa Sockaddr) (err error) {\n \tptr, n, err := sa.sockaddr()\n \tif err != nil {\n@@ -199,9 +193,6 @@ func Connect(fd int, sa Sockaddr) (err error) {\n \treturn connect(fd, ptr, n)\n }\n \n-//sysnb\tsocket(domain int, typ int, proto int) (fd int, err error)\n-//socket(domain _C_int, typ _C_int, protocol _C_int) _C_int\n-\n func Socket(domain, typ, proto int) (fd int, err error) {\n \tif domain == AF_INET6 && SocketDisableIPv6 {\n \t\treturn -1, EAFNOSUPPORT\n@@ -210,9 +201,6 @@ func Socket(domain, typ, proto int) (fd int, err error) {\n \treturn\n }\n \n-//sysnb\tsocketpair(domain int, typ int, proto int, fd *[2]_C_int) (err error)\n-//socketpair(domain _C_int, typ _C_int, protocol _C_int, fd *[2]_C_int) _C_int\n-\n func Socketpair(domain, typ, proto int) (fd [2]int, err error) {\n \tvar fdx [2]_C_int\n \terr = socketpair(domain, typ, proto, &fdx)\n@@ -223,9 +211,6 @@ func Socketpair(domain, typ, proto int) (fd [2]int, err error) {\n \treturn\n }\n \n-//sys\tgetsockopt(s int, level int, name int, val uintptr, vallen *Socklen_t) (err error)\n-//getsockopt(s _C_int, level _C_int, name _C_int, val *byte, vallen *Socklen_t) _C_int\n-\n func GetsockoptByte(fd, level, opt int) (value byte, err error) {\n \tvar n byte\n \tvallen := Socklen_t(1)\n@@ -326,9 +311,6 @@ func Recvfrom(fd int, p []byte, flags int) (n int, from Sockaddr, err error) {\n \treturn\n }\n \n-//sys\tsendto(s int, buf []byte, flags int, to *RawSockaddrAny, tolen Socklen_t) (err error)\n-//sendto(s _C_int, buf *byte, len Size_t, flags _C_int, to *RawSockaddrAny, tolen Socklen_t) Ssize_t\n-\n func Sendto(fd int, p []byte, flags int, to Sockaddr) (err error) {\n \tptr, n, err := to.sockaddr()\n \tif err != nil {\n@@ -337,9 +319,6 @@ func Sendto(fd int, p []byte, flags int, to Sockaddr) (err error) {\n \treturn sendto(fd, p, flags, ptr, n)\n }\n \n-//sys\trecvmsg(s int, msg *Msghdr, flags int) (n int, err error)\n-//recvmsg(s _C_int, msg *Msghdr, flags _C_int) Ssize_t\n-\n func Recvmsg(fd int, p, oob []byte, flags int) (n, oobn int, recvflags int, from Sockaddr, err error) {\n \tvar msg Msghdr\n \tvar rsa RawSockaddrAny\n@@ -374,9 +353,6 @@ func Recvmsg(fd int, p, oob []byte, flags int) (n, oobn int, recvflags int, from\n \treturn\n }\n \n-//sys\tsendmsg(s int, msg *Msghdr, flags int) (err error)\n-//sendmsg(s _C_int, msg *Msghdr, flags _C_int) Ssize_t\n-\n func Sendmsg(fd int, p, oob []byte, to Sockaddr, flags int) (err error) {\n \tvar ptr *RawSockaddrAny\n \tvar salen Socklen_t"}, {"sha": "06d7dab464a0fe07d1d1c11495d2f4570109ab76", "filename": "libgo/go/syscall/socket_posix.go", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f46d686ef1acd844dd00b4f3c327bd42606efbea/libgo%2Fgo%2Fsyscall%2Fsocket_posix.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f46d686ef1acd844dd00b4f3c327bd42606efbea/libgo%2Fgo%2Fsyscall%2Fsocket_posix.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Fsocket_posix.go?ref=f46d686ef1acd844dd00b4f3c327bd42606efbea", "patch": "@@ -0,0 +1,31 @@\n+// socket_posix.go -- Socket handling for generic POSIX systems.\n+\n+// Copyright 2013 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package syscall\n+\n+//sys\tbind(fd int, sa *RawSockaddrAny, len Socklen_t) (err error)\n+//bind(fd _C_int, sa *RawSockaddrAny, len Socklen_t) _C_int\n+\n+//sys\tconnect(s int, addr *RawSockaddrAny, addrlen Socklen_t) (err error)\n+//connect(s _C_int, addr *RawSockaddrAny, addrlen Socklen_t) _C_int\n+\n+//sysnb\tsocket(domain int, typ int, proto int) (fd int, err error)\n+//socket(domain _C_int, typ _C_int, protocol _C_int) _C_int\n+\n+//sysnb\tsocketpair(domain int, typ int, proto int, fd *[2]_C_int) (err error)\n+//socketpair(domain _C_int, typ _C_int, protocol _C_int, fd *[2]_C_int) _C_int\n+\n+//sys\tgetsockopt(s int, level int, name int, val uintptr, vallen *Socklen_t) (err error)\n+//getsockopt(s _C_int, level _C_int, name _C_int, val *byte, vallen *Socklen_t) _C_int\n+\n+//sys\tsendto(s int, buf []byte, flags int, to *RawSockaddrAny, tolen Socklen_t) (err error)\n+//sendto(s _C_int, buf *byte, len Size_t, flags _C_int, to *RawSockaddrAny, tolen Socklen_t) Ssize_t\n+\n+//sys\trecvmsg(s int, msg *Msghdr, flags int) (n int, err error)\n+//recvmsg(s _C_int, msg *Msghdr, flags _C_int) Ssize_t\n+\n+//sys\tsendmsg(s int, msg *Msghdr, flags int) (err error)\n+//sendmsg(s _C_int, msg *Msghdr, flags _C_int) Ssize_t"}, {"sha": "8f86c622b9faddd4abaa7e7882740e999d5b55e6", "filename": "libgo/go/syscall/socket_xnet.go", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f46d686ef1acd844dd00b4f3c327bd42606efbea/libgo%2Fgo%2Fsyscall%2Fsocket_xnet.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f46d686ef1acd844dd00b4f3c327bd42606efbea/libgo%2Fgo%2Fsyscall%2Fsocket_xnet.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Fsocket_xnet.go?ref=f46d686ef1acd844dd00b4f3c327bd42606efbea", "patch": "@@ -0,0 +1,32 @@\n+// socket_xnet.go -- Socket handling specific to Solaris.\n+// Enforce use of XPG 4.2 versions of socket functions.\n+\n+// Copyright 2013 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package syscall\n+\n+//sys\tbind(fd int, sa *RawSockaddrAny, len Socklen_t) (err error)\n+//__xnet_bind(fd _C_int, sa *RawSockaddrAny, len Socklen_t) _C_int\n+\n+//sys\tconnect(s int, addr *RawSockaddrAny, addrlen Socklen_t) (err error)\n+//__xnet_connect(s _C_int, addr *RawSockaddrAny, addrlen Socklen_t) _C_int\n+\n+//sysnb\tsocket(domain int, typ int, proto int) (fd int, err error)\n+//__xnet_socket(domain _C_int, typ _C_int, protocol _C_int) _C_int\n+\n+//sysnb\tsocketpair(domain int, typ int, proto int, fd *[2]_C_int) (err error)\n+//__xnet_socketpair(domain _C_int, typ _C_int, protocol _C_int, fd *[2]_C_int) _C_int\n+\n+//sys\tgetsockopt(s int, level int, name int, val uintptr, vallen *Socklen_t) (err error)\n+//__xnet_getsockopt(s _C_int, level _C_int, name _C_int, val *byte, vallen *Socklen_t) _C_int\n+\n+//sys\tsendto(s int, buf []byte, flags int, to *RawSockaddrAny, tolen Socklen_t) (err error)\n+//__xnet_sendto(s _C_int, buf *byte, len Size_t, flags _C_int, to *RawSockaddrAny, tolen Socklen_t) Ssize_t\n+\n+//sys\trecvmsg(s int, msg *Msghdr, flags int) (n int, err error)\n+//__xnet_recvmsg(s _C_int, msg *Msghdr, flags _C_int) Ssize_t\n+\n+//sys\tsendmsg(s int, msg *Msghdr, flags int) (err error)\n+//__xnet_sendmsg(s _C_int, msg *Msghdr, flags _C_int) Ssize_t"}]}