{"sha": "5402023f05e8fc28c2f1cfd7107264403b118a17", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTQwMjAyM2YwNWU4ZmMyOGMyZjFjZmQ3MTA3MjY0NDAzYjExOGExNw==", "commit": {"author": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2021-07-15T12:16:00Z"}, "committer": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2021-07-15T12:16:00Z"}, "message": "Revert \"AArch64: Correct dot-product auto-vect optab RTL\"\n\nThis reverts commit 6d1cdb27828d2ef1ae1ab0209836646a269b9610.", "tree": {"sha": "b9399f9a44003c0f02c1390c284186990b1114fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b9399f9a44003c0f02c1390c284186990b1114fa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5402023f05e8fc28c2f1cfd7107264403b118a17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5402023f05e8fc28c2f1cfd7107264403b118a17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5402023f05e8fc28c2f1cfd7107264403b118a17", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5402023f05e8fc28c2f1cfd7107264403b118a17/comments", "author": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6dde32b9d487dd6e343d0a1e1d1f60783f5e735", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6dde32b9d487dd6e343d0a1e1d1f60783f5e735", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6dde32b9d487dd6e343d0a1e1d1f60783f5e735"}], "stats": {"total": 74, "additions": 45, "deletions": 29}, "files": [{"sha": "063f503ebd96657f017dfaa067cb231991376bda", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5402023f05e8fc28c2f1cfd7107264403b118a17/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5402023f05e8fc28c2f1cfd7107264403b118a17/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=5402023f05e8fc28c2f1cfd7107264403b118a17", "patch": "@@ -375,8 +375,8 @@\n   BUILTIN_VSDQ_I_DI (BINOP_UUS, urshl, 0, NONE)\n \n   /* Implemented by <sur><dotprod>_prod<dot_mode>.  */\n-  BUILTIN_VB (TERNOP, sdot_prod, 10, NONE)\n-  BUILTIN_VB (TERNOPU, udot_prod, 10, NONE)\n+  BUILTIN_VB (TERNOP, sdot, 0, NONE)\n+  BUILTIN_VB (TERNOPU, udot, 0, NONE)\n   BUILTIN_VB (TERNOP_SSUS, usdot_prod, 10, NONE)\n   /* Implemented by aarch64_<sur><dotprod>_lane{q}<dot_mode>.  */\n   BUILTIN_VB (QUADOP_LANE, sdot_lane, 0, NONE)"}, {"sha": "74890989cb3045798bf8d0241467eaaf72238297", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 39, "deletions": 23, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5402023f05e8fc28c2f1cfd7107264403b118a17/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5402023f05e8fc28c2f1cfd7107264403b118a17/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=5402023f05e8fc28c2f1cfd7107264403b118a17", "patch": "@@ -587,28 +587,8 @@\n   DONE;\n })\n \n-;; These expands map to the Dot Product optab the vectorizer checks for\n-;; and to the intrinsics patttern.\n-;; The auto-vectorizer expects a dot product builtin that also does an\n-;; accumulation into the provided register.\n-;; Given the following pattern\n-;;\n-;; for (i=0; i<len; i++) {\n-;;     c = a[i] * b[i];\n-;;     r += c;\n-;; }\n-;; return result;\n-;;\n-;; This can be auto-vectorized to\n-;; r  = a[0]*b[0] + a[1]*b[1] + a[2]*b[2] + a[3]*b[3];\n-;;\n-;; given enough iterations.  However the vectorizer can keep unrolling the loop\n-;; r += a[4]*b[4] + a[5]*b[5] + a[6]*b[6] + a[7]*b[7];\n-;; r += a[8]*b[8] + a[9]*b[9] + a[10]*b[10] + a[11]*b[11];\n-;; ...\n-;;\n-;; and so the vectorizer provides r, in which the result has to be accumulated.\n-(define_insn \"<sur>dot_prod<vsi2qi>\"\n+;; These instructions map to the __builtins for the Dot Product operations.\n+(define_insn \"aarch64_<sur>dot<vsi2qi>\"\n   [(set (match_operand:VS 0 \"register_operand\" \"=w\")\n \t(plus:VS (match_operand:VS 1 \"register_operand\" \"0\")\n \t\t(unspec:VS [(match_operand:<VSI2QI> 2 \"register_operand\" \"w\")\n@@ -633,6 +613,41 @@\n   [(set_attr \"type\" \"neon_dot<q>\")]\n )\n \n+;; These expands map to the Dot Product optab the vectorizer checks for.\n+;; The auto-vectorizer expects a dot product builtin that also does an\n+;; accumulation into the provided register.\n+;; Given the following pattern\n+;;\n+;; for (i=0; i<len; i++) {\n+;;     c = a[i] * b[i];\n+;;     r += c;\n+;; }\n+;; return result;\n+;;\n+;; This can be auto-vectorized to\n+;; r  = a[0]*b[0] + a[1]*b[1] + a[2]*b[2] + a[3]*b[3];\n+;;\n+;; given enough iterations.  However the vectorizer can keep unrolling the loop\n+;; r += a[4]*b[4] + a[5]*b[5] + a[6]*b[6] + a[7]*b[7];\n+;; r += a[8]*b[8] + a[9]*b[9] + a[10]*b[10] + a[11]*b[11];\n+;; ...\n+;;\n+;; and so the vectorizer provides r, in which the result has to be accumulated.\n+(define_expand \"<sur>dot_prod<vsi2qi>\"\n+  [(set (match_operand:VS 0 \"register_operand\")\n+\t(plus:VS (unspec:VS [(match_operand:<VSI2QI> 1 \"register_operand\")\n+\t\t\t    (match_operand:<VSI2QI> 2 \"register_operand\")]\n+\t\t DOTPROD)\n+\t\t(match_operand:VS 3 \"register_operand\")))]\n+  \"TARGET_DOTPROD\"\n+{\n+  emit_insn (\n+    gen_aarch64_<sur>dot<vsi2qi> (operands[3], operands[3], operands[1],\n+\t\t\t\t    operands[2]));\n+  emit_insn (gen_rtx_SET (operands[0], operands[3]));\n+  DONE;\n+})\n+\n ;; These instructions map to the __builtins for the Dot Product\n ;; indexed operations.\n (define_insn \"aarch64_<sur>dot_lane<vsi2qi>\"\n@@ -929,7 +944,8 @@\n \trtx ones = force_reg (V16QImode, CONST1_RTX (V16QImode));\n \trtx abd = gen_reg_rtx (V16QImode);\n \temit_insn (gen_aarch64_<sur>abdv16qi (abd, operands[1], operands[2]));\n-\temit_insn (gen_udot_prodv16qi (operands[0], operands[3], abd, ones));\n+\temit_insn (gen_aarch64_udotv16qi (operands[0], operands[3],\n+\t\t\t\t\t  abd, ones));\n \tDONE;\n       }\n     rtx reduc = gen_reg_rtx (V8HImode);"}, {"sha": "00d76ea937ace5763746478cbdfadf6479e0b15a", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5402023f05e8fc28c2f1cfd7107264403b118a17/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5402023f05e8fc28c2f1cfd7107264403b118a17/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=5402023f05e8fc28c2f1cfd7107264403b118a17", "patch": "@@ -31767,28 +31767,28 @@ __extension__ extern __inline uint32x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vdot_u32 (uint32x2_t __r, uint8x8_t __a, uint8x8_t __b)\n {\n-  return __builtin_aarch64_udot_prodv8qi_uuuu (__r, __a, __b);\n+  return __builtin_aarch64_udotv8qi_uuuu (__r, __a, __b);\n }\n \n __extension__ extern __inline uint32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vdotq_u32 (uint32x4_t __r, uint8x16_t __a, uint8x16_t __b)\n {\n-  return __builtin_aarch64_udot_prodv16qi_uuuu (__r, __a, __b);\n+  return __builtin_aarch64_udotv16qi_uuuu (__r, __a, __b);\n }\n \n __extension__ extern __inline int32x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vdot_s32 (int32x2_t __r, int8x8_t __a, int8x8_t __b)\n {\n-  return __builtin_aarch64_sdot_prodv8qi (__r, __a, __b);\n+  return __builtin_aarch64_sdotv8qi (__r, __a, __b);\n }\n \n __extension__ extern __inline int32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vdotq_s32 (int32x4_t __r, int8x16_t __a, int8x16_t __b)\n {\n-  return __builtin_aarch64_sdot_prodv16qi (__r, __a, __b);\n+  return __builtin_aarch64_sdotv16qi (__r, __a, __b);\n }\n \n __extension__ extern __inline uint32x2_t"}]}