{"sha": "72459cfd86389ead7ce0cdd09a3d272684105874", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzI0NTljZmQ4NjM4OWVhZDdjZTBjZGQwOWEzZDI3MjY4NDEwNTg3NA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-08-20T21:21:15Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-08-20T21:21:15Z"}, "message": "PR libstdc++/91371 make std::is_function handle other calling conventions\n\nThe x86 attributes such as ms_abi, stdcall, fastcall etc. alter the\nfunction type, which means that functions with one of those attributes\ndo not match any of the partial specializations of std::is_function.\n\nRather than duplicating the list for every calling convention, use a\nmuch simpler definition of std::is_function.\n\nAlso redefine __is_referenceable to not rely on partial specializations\nfor each type of referenceable function.\n\n\tPR libstdc++/91371\n\t* include/std/type_traits (is_function): Simplify definition. Remove\n\tpartial specializations for function types.\n\t(__is_referenceable): Simplify definition.\n\t* testsuite/20_util/bind/91371.cc: New test.\n\t* testsuite/20_util/is_function/91371.cc: New test.\n\t* testsuite/20_util/is_function/value.cc: Check more pointer types.\n\t* testsuite/20_util/is_member_function_pointer/91371.cc: New test.\n\t* testsuite/20_util/is_object/91371.cc: New test.\n\nFrom-SVN: r274756", "tree": {"sha": "bba28d22e9f22b7aae5f3c05b6f90681faa83426", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bba28d22e9f22b7aae5f3c05b6f90681faa83426"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/72459cfd86389ead7ce0cdd09a3d272684105874", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72459cfd86389ead7ce0cdd09a3d272684105874", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72459cfd86389ead7ce0cdd09a3d272684105874", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72459cfd86389ead7ce0cdd09a3d272684105874/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "43055d2379cfb1b5b1b09e243a9829e52e12b60a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43055d2379cfb1b5b1b09e243a9829e52e12b60a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43055d2379cfb1b5b1b09e243a9829e52e12b60a"}], "stats": {"total": 305, "additions": 195, "deletions": 110}, "files": [{"sha": "0717400f9576667d39229e0466646bf77526a5a6", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72459cfd86389ead7ce0cdd09a3d272684105874/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72459cfd86389ead7ce0cdd09a3d272684105874/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=72459cfd86389ead7ce0cdd09a3d272684105874", "patch": "@@ -1,3 +1,15 @@\n+2019-08-20  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/91371\n+\t* include/std/type_traits (is_function): Simplify definition. Remove\n+\tpartial specializations for function types.\n+\t(__is_referenceable): Simplify definition.\n+\t* testsuite/20_util/bind/91371.cc: New test.\n+\t* testsuite/20_util/is_function/91371.cc: New test.\n+\t* testsuite/20_util/is_function/value.cc: Check more pointer types.\n+\t* testsuite/20_util/is_member_function_pointer/91371.cc: New test.\n+\t* testsuite/20_util/is_object/91371.cc: New test.\n+\n 2019-08-16  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/abi/post/alpha-linux-gnu/baseline_symbols.txt: Update."}, {"sha": "443208813b16759e6d3d3eec11c5b352eec88666", "filename": "libstdc++-v3/include/std/type_traits", "status": "modified", "additions": 20, "deletions": 110, "changes": 130, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72459cfd86389ead7ce0cdd09a3d272684105874/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72459cfd86389ead7ce0cdd09a3d272684105874/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits?ref=72459cfd86389ead7ce0cdd09a3d272684105874", "patch": "@@ -223,11 +223,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   struct __failure_type\n   { };\n \n-  // Primary type categories.\n-\n   template<typename>\n     struct remove_cv;\n \n+  template<typename>\n+    struct is_const;\n+\n+  // Primary type categories.\n+\n   template<typename>\n     struct __is_void_helper\n     : public false_type { };\n@@ -481,105 +484,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { };\n \n   /// is_function\n-  template<typename>\n+  template<typename _Tp>\n     struct is_function\n-    : public false_type { };\n-\n-  template<typename _Res, typename... _ArgTypes _GLIBCXX_NOEXCEPT_PARM>\n-    struct is_function<_Res(_ArgTypes...) _GLIBCXX_NOEXCEPT_QUAL>\n-    : public true_type { };\n-\n-  template<typename _Res, typename... _ArgTypes _GLIBCXX_NOEXCEPT_PARM>\n-    struct is_function<_Res(_ArgTypes...) & _GLIBCXX_NOEXCEPT_QUAL>\n-    : public true_type { };\n-\n-  template<typename _Res, typename... _ArgTypes _GLIBCXX_NOEXCEPT_PARM>\n-    struct is_function<_Res(_ArgTypes...) && _GLIBCXX_NOEXCEPT_QUAL>\n-    : public true_type { };\n-\n-  template<typename _Res, typename... _ArgTypes _GLIBCXX_NOEXCEPT_PARM>\n-    struct is_function<_Res(_ArgTypes......) _GLIBCXX_NOEXCEPT_QUAL>\n-    : public true_type { };\n-\n-  template<typename _Res, typename... _ArgTypes _GLIBCXX_NOEXCEPT_PARM>\n-    struct is_function<_Res(_ArgTypes......) & _GLIBCXX_NOEXCEPT_QUAL>\n-    : public true_type { };\n-\n-  template<typename _Res, typename... _ArgTypes _GLIBCXX_NOEXCEPT_PARM>\n-    struct is_function<_Res(_ArgTypes......) && _GLIBCXX_NOEXCEPT_QUAL>\n-    : public true_type { };\n-\n-  template<typename _Res, typename... _ArgTypes _GLIBCXX_NOEXCEPT_PARM>\n-    struct is_function<_Res(_ArgTypes...) const _GLIBCXX_NOEXCEPT_QUAL>\n-    : public true_type { };\n-\n-  template<typename _Res, typename... _ArgTypes _GLIBCXX_NOEXCEPT_PARM>\n-    struct is_function<_Res(_ArgTypes...) const & _GLIBCXX_NOEXCEPT_QUAL>\n-    : public true_type { };\n-\n-  template<typename _Res, typename... _ArgTypes _GLIBCXX_NOEXCEPT_PARM>\n-    struct is_function<_Res(_ArgTypes...) const && _GLIBCXX_NOEXCEPT_QUAL>\n-    : public true_type { };\n+    : public __bool_constant<!is_const<const _Tp>::value> { };\n \n-  template<typename _Res, typename... _ArgTypes _GLIBCXX_NOEXCEPT_PARM>\n-    struct is_function<_Res(_ArgTypes......) const _GLIBCXX_NOEXCEPT_QUAL>\n-    : public true_type { };\n-\n-  template<typename _Res, typename... _ArgTypes _GLIBCXX_NOEXCEPT_PARM>\n-    struct is_function<_Res(_ArgTypes......) const & _GLIBCXX_NOEXCEPT_QUAL>\n-    : public true_type { };\n-\n-  template<typename _Res, typename... _ArgTypes _GLIBCXX_NOEXCEPT_PARM>\n-    struct is_function<_Res(_ArgTypes......) const && _GLIBCXX_NOEXCEPT_QUAL>\n-    : public true_type { };\n-\n-  template<typename _Res, typename... _ArgTypes _GLIBCXX_NOEXCEPT_PARM>\n-    struct is_function<_Res(_ArgTypes...) volatile _GLIBCXX_NOEXCEPT_QUAL>\n-    : public true_type { };\n-\n-  template<typename _Res, typename... _ArgTypes _GLIBCXX_NOEXCEPT_PARM>\n-    struct is_function<_Res(_ArgTypes...) volatile & _GLIBCXX_NOEXCEPT_QUAL>\n-    : public true_type { };\n-\n-  template<typename _Res, typename... _ArgTypes _GLIBCXX_NOEXCEPT_PARM>\n-    struct is_function<_Res(_ArgTypes...) volatile && _GLIBCXX_NOEXCEPT_QUAL>\n-    : public true_type { };\n-\n-  template<typename _Res, typename... _ArgTypes _GLIBCXX_NOEXCEPT_PARM>\n-    struct is_function<_Res(_ArgTypes......) volatile _GLIBCXX_NOEXCEPT_QUAL>\n-    : public true_type { };\n-\n-  template<typename _Res, typename... _ArgTypes _GLIBCXX_NOEXCEPT_PARM>\n-    struct is_function<_Res(_ArgTypes......) volatile & _GLIBCXX_NOEXCEPT_QUAL>\n-    : public true_type { };\n-\n-  template<typename _Res, typename... _ArgTypes _GLIBCXX_NOEXCEPT_PARM>\n-    struct is_function<_Res(_ArgTypes......) volatile && _GLIBCXX_NOEXCEPT_QUAL>\n-    : public true_type { };\n-\n-  template<typename _Res, typename... _ArgTypes _GLIBCXX_NOEXCEPT_PARM>\n-    struct is_function<_Res(_ArgTypes...) const volatile _GLIBCXX_NOEXCEPT_QUAL>\n-    : public true_type { };\n-\n-  template<typename _Res, typename... _ArgTypes _GLIBCXX_NOEXCEPT_PARM>\n-    struct is_function<_Res(_ArgTypes...) const volatile & _GLIBCXX_NOEXCEPT_QUAL>\n-    : public true_type { };\n-\n-  template<typename _Res, typename... _ArgTypes _GLIBCXX_NOEXCEPT_PARM>\n-    struct is_function<_Res(_ArgTypes...) const volatile && _GLIBCXX_NOEXCEPT_QUAL>\n-    : public true_type { };\n-\n-  template<typename _Res, typename... _ArgTypes _GLIBCXX_NOEXCEPT_PARM>\n-    struct is_function<_Res(_ArgTypes......) const volatile _GLIBCXX_NOEXCEPT_QUAL>\n-    : public true_type { };\n-\n-  template<typename _Res, typename... _ArgTypes _GLIBCXX_NOEXCEPT_PARM>\n-    struct is_function<_Res(_ArgTypes......) const volatile & _GLIBCXX_NOEXCEPT_QUAL>\n-    : public true_type { };\n+  template<typename _Tp>\n+    struct is_function<_Tp&>\n+    : public false_type { };\n \n-  template<typename _Res, typename... _ArgTypes _GLIBCXX_NOEXCEPT_PARM>\n-    struct is_function<_Res(_ArgTypes......) const volatile && _GLIBCXX_NOEXCEPT_QUAL>\n-    : public true_type { };\n+  template<typename _Tp>\n+    struct is_function<_Tp&&>\n+    : public false_type { };\n \n #define __cpp_lib_is_null_pointer 201309\n \n@@ -706,20 +621,18 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  >;\n \n \n+  // __void_t (std::void_t for C++11)\n+  template<typename...> using __void_t = void;\n+\n   // Utility to detect referenceable types ([defns.referenceable]).\n \n-  template<typename _Tp>\n+  template<typename _Tp, typename = void>\n     struct __is_referenceable\n-    : public __or_<is_object<_Tp>, is_reference<_Tp>>::type\n-    { };\n-\n-  template<typename _Res, typename... _Args _GLIBCXX_NOEXCEPT_PARM>\n-    struct __is_referenceable<_Res(_Args...) _GLIBCXX_NOEXCEPT_QUAL>\n-    : public true_type\n+    : public false_type\n     { };\n \n-  template<typename _Res, typename... _Args _GLIBCXX_NOEXCEPT_PARM>\n-    struct __is_referenceable<_Res(_Args......) _GLIBCXX_NOEXCEPT_QUAL>\n+  template<typename _Tp>\n+    struct __is_referenceable<_Tp, __void_t<_Tp&>>\n     : public true_type\n     { };\n \n@@ -2261,9 +2174,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct conditional<false, _Iftrue, _Iffalse>\n     { typedef _Iffalse type; };\n \n-  // __void_t (std::void_t for C++11)\n-  template<typename...> using __void_t = void;\n-\n   /// common_type\n   template<typename... _Tp>\n     struct common_type;"}, {"sha": "1c6f55e9eceb690b61b1de0a2fe3abd4ee763478", "filename": "libstdc++-v3/testsuite/20_util/bind/91371.cc", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72459cfd86389ead7ce0cdd09a3d272684105874/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fbind%2F91371.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72459cfd86389ead7ce0cdd09a3d272684105874/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fbind%2F91371.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fbind%2F91371.cc?ref=72459cfd86389ead7ce0cdd09a3d272684105874", "patch": "@@ -0,0 +1,37 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target i?86-*-* x86_64-*-* } }\n+// { dg-require-effective-target c++11 }\n+\n+#include <functional>\n+\n+int bar(int) __attribute__((ms_abi));\n+int baz(int) __attribute__((sysv_abi));\n+\n+void\n+test01()\n+{\n+  // PR libstdc++/91371\n+  std::bind(bar, 5)();\n+  std::bind(baz, 5)();\n+\n+  static_assert(std::is_function<decltype(bar)>::value, \"\");\n+  static_assert(std::is_function<decltype(baz)>::value, \"\");\n+  static_assert(std::is_pointer<std::decay_t<decltype(bar)>>::value, \"\");\n+  static_assert(std::is_pointer<std::decay_t<decltype(baz)>>::value, \"\");\n+}"}, {"sha": "c51d373027b62fdae43a288d357d2d8cfbfaab33", "filename": "libstdc++-v3/testsuite/20_util/is_function/91371.cc", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72459cfd86389ead7ce0cdd09a3d272684105874/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_function%2F91371.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72459cfd86389ead7ce0cdd09a3d272684105874/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_function%2F91371.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_function%2F91371.cc?ref=72459cfd86389ead7ce0cdd09a3d272684105874", "patch": "@@ -0,0 +1,47 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target i?86-*-* x86_64-*-* } }\n+// { dg-require-effective-target c++11 }\n+\n+#include <type_traits>\n+\n+using std::is_function;\n+\n+#ifdef __i386__\n+static_assert(is_function<void __attribute__((thiscall)) ()>::value, \"\");\n+static_assert(is_function<void __attribute__((thiscall)) () const>::value, \"\");\n+static_assert(is_function<void __attribute__((fastcall)) ()>::value, \"\");\n+static_assert(is_function<void __attribute__((fastcall)) () const>::value, \"\");\n+static_assert(is_function<void __attribute__((stdcall)) ()>::value, \"\");\n+static_assert(is_function<void __attribute__((stdcall)) () const>::value, \"\");\n+#endif\n+static_assert(is_function<void __attribute__((ms_abi)) ()>::value, \"\");\n+static_assert(is_function<void __attribute__((ms_abi)) () const>::value, \"\");\n+static_assert(is_function<void __attribute__((ms_abi)) () const &>::value, \"\");\n+static_assert(is_function<void __attribute__((ms_abi)) () &&>::value, \"\");\n+static_assert(is_function<void __attribute__((sysv_abi)) ()>::value, \"\");\n+static_assert(is_function<void __attribute__((sysv_abi)) () const>::value, \"\");\n+\n+struct X { operator X*(); };\n+static_assert(!is_function<X>::value, \"\");\n+static_assert(!is_function<X&>::value, \"\");\n+static_assert(!is_function<X*>::value, \"\");\n+union Y { operator Y*(); int i; long l;};\n+static_assert(!is_function<Y>::value, \"\");\n+static_assert(!is_function<Y&>::value, \"\");\n+static_assert(!is_function<Y*>::value, \"\");"}, {"sha": "4a3bb7c57403ce842cba5a2812673adf969df9b2", "filename": "libstdc++-v3/testsuite/20_util/is_function/value.cc", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72459cfd86389ead7ce0cdd09a3d272684105874/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_function%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72459cfd86389ead7ce0cdd09a3d272684105874/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_function%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_function%2Fvalue.cc?ref=72459cfd86389ead7ce0cdd09a3d272684105874", "patch": "@@ -37,12 +37,18 @@ void test01()\n \t\tchar (int, ClassType) const volatile &&>(true), \"\");\n \n   // Negative tests.\n+  static_assert(test_category<is_function, int*>(false), \"\");\n   static_assert(test_category<is_function, int&>(false), \"\");\n   static_assert(test_category<is_function, void>(false), \"\");\n   static_assert(test_category<is_function, const void>(false), \"\");\n+  static_assert(test_category<is_function, void*>(false), \"\");\n+  static_assert(test_category<is_function, const void*>(false), \"\");\n+  static_assert(test_category<is_function, void**>(false), \"\");\n+  static_assert(test_category<is_function, std::nullptr_t>(false), \"\");\n \n   static_assert(test_category<is_function, AbstractClass>(false), \"\");\n   static_assert(test_category<is_function, int(&)(int)>(false), \"\");\n+  static_assert(test_category<is_function, int(*)(int)>(false), \"\");\n   \n   // Sanity check.\n   static_assert(test_category<is_function, ClassType>(false), \"\");"}, {"sha": "25fecc11cd8594d0271f002f59aa7ff8d48334f5", "filename": "libstdc++-v3/testsuite/20_util/is_member_function_pointer/91371.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72459cfd86389ead7ce0cdd09a3d272684105874/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_member_function_pointer%2F91371.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72459cfd86389ead7ce0cdd09a3d272684105874/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_member_function_pointer%2F91371.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_member_function_pointer%2F91371.cc?ref=72459cfd86389ead7ce0cdd09a3d272684105874", "patch": "@@ -0,0 +1,35 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target i?86-*-* x86_64-*-* } }\n+// { dg-require-effective-target c++11 }\n+\n+#include <type_traits>\n+\n+struct Z\n+{\n+  void __attribute__((ms_abi)) f() const { }\n+  void __attribute__((sysv_abi)) g() const { }\n+#ifdef __i386__\n+  void __attribute__((thiscall)) h() const { }\n+#endif\n+};\n+static_assert( std::is_member_function_pointer<decltype(&Z::f)>::value, \"\" );\n+static_assert( std::is_member_function_pointer<decltype(&Z::g)>::value, \"\" );\n+#ifdef __i386__\n+static_assert( std::is_member_function_pointer<decltype(&Z::h)>::value, \"\" );\n+#endif"}, {"sha": "3520d7680d2639d870a80e21a903aef63691ec28", "filename": "libstdc++-v3/testsuite/20_util/is_object/91371.cc", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72459cfd86389ead7ce0cdd09a3d272684105874/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_object%2F91371.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72459cfd86389ead7ce0cdd09a3d272684105874/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_object%2F91371.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_object%2F91371.cc?ref=72459cfd86389ead7ce0cdd09a3d272684105874", "patch": "@@ -0,0 +1,38 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target i?86-*-* x86_64-*-* } }\n+// { dg-require-effective-target c++11 }\n+\n+#include <type_traits>\n+\n+using std::is_object;\n+\n+#ifdef __i386__\n+static_assert(!is_object<void __attribute__((thiscall)) ()>::value, \"\");\n+static_assert(!is_object<void __attribute__((thiscall)) () const>::value, \"\");\n+static_assert(!is_object<void __attribute__((fastcall)) ()>::value, \"\");\n+static_assert(!is_object<void __attribute__((fastcall)) () const>::value, \"\");\n+static_assert(!is_object<void __attribute__((stdcall)) ()>::value, \"\");\n+static_assert(!is_object<void __attribute__((stdcall)) () const>::value, \"\");\n+#endif\n+static_assert(!is_object<void __attribute__((ms_abi)) ()>::value, \"\");\n+static_assert(!is_object<void __attribute__((ms_abi)) () const>::value, \"\");\n+static_assert(!is_object<void __attribute__((ms_abi)) () const &>::value, \"\");\n+static_assert(!is_object<void __attribute__((ms_abi)) () &&>::value, \"\");\n+static_assert(!is_object<void __attribute__((sysv_abi)) ()>::value, \"\");\n+static_assert(!is_object<void __attribute__((sysv_abi)) () const>::value, \"\");"}]}