{"sha": "c10638c92243bc58ec745d4229927a55ba8da730", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzEwNjM4YzkyMjQzYmM1OGVjNzQ1ZDQyMjk5MjdhNTViYThkYTczMA==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "amylaar@cygnus.co.uk", "date": "1998-09-24T10:51:35Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "1998-09-24T10:51:35Z"}, "message": "reload.c (find_reloads): In code to promote RELOAD_FOR_X_ADDR_ADDR reloads to RELOAD_FOR_X_ADDRESS...\n\n\t* reload.c (find_reloads): In code to promote RELOAD_FOR_X_ADDR_ADDR\n\treloads to RELOAD_FOR_X_ADDRESS reloads, test for reload sharing.\n\tProperly keep track of first RELOAD_FOR_X_ADDRESS also for\n\tmore than 3 such reloads.\n\tIf there is not more than one RELOAD_FOR_X_ADDRESS, don't change\n\tRELOAD_FOR_X_ADDR_ADDR reload.\n\nFrom-SVN: r22568", "tree": {"sha": "847a74a395f5537267706887c3082299e0c03adc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/847a74a395f5537267706887c3082299e0c03adc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c10638c92243bc58ec745d4229927a55ba8da730", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c10638c92243bc58ec745d4229927a55ba8da730", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c10638c92243bc58ec745d4229927a55ba8da730", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c10638c92243bc58ec745d4229927a55ba8da730/comments", "author": null, "committer": null, "parents": [{"sha": "34c73909813a5b2225ceac86dc6402f86b64d451", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34c73909813a5b2225ceac86dc6402f86b64d451", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34c73909813a5b2225ceac86dc6402f86b64d451"}], "stats": {"total": 40, "additions": 34, "deletions": 6}, "files": [{"sha": "de76637cc571cc53666c5b3cc0eb4b801e8f5ef4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c10638c92243bc58ec745d4229927a55ba8da730/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c10638c92243bc58ec745d4229927a55ba8da730/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c10638c92243bc58ec745d4229927a55ba8da730", "patch": "@@ -1,3 +1,14 @@\n+Thu Sep 24 18:48:43 1998  J\"orn Rennecke <amylaar@cygnus.co.uk>\n+\n+\t* reload.c (find_reloads): In code to promote RELOAD_FOR_X_ADDR_ADDR\n+\treloads to RELOAD_FOR_X_ADDRESS reloads, test for reload sharing.\n+\n+\tProperly keep track of first RELOAD_FOR_X_ADDRESS also for\n+\tmore than 3 such reloads.\n+\n+\tIf there is not more than one RELOAD_FOR_X_ADDRESS, don't change\n+\tRELOAD_FOR_X_ADDR_ADDR reload.\n+\n Thu Sep 24 17:45:55 1998  J\"orn Rennecke <amylaar@cygnus.co.uk>\n \n \t* expr.c (store_constructor): When initializing a field that is smaller"}, {"sha": "428ce8798941c22551d7019c91fe8d3bd0908549", "filename": "gcc/reload.c", "status": "modified", "additions": 23, "deletions": 6, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c10638c92243bc58ec745d4229927a55ba8da730/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c10638c92243bc58ec745d4229927a55ba8da730/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=c10638c92243bc58ec745d4229927a55ba8da730", "patch": "@@ -4018,7 +4018,8 @@ find_reloads (insn, replace, ind_levels, live_known, reload_reg_p)\n      a single operand.\n      We can reduce the register pressure by exploiting that a\n      RELOAD_FOR_X_ADDR_ADDR that precedes all RELOAD_FOR_X_ADDRESS reloads\n-     does not conflict with any of them.  */\n+     does not conflict with any of them, if it is only used for the first of\n+     the RELOAD_FOR_X_ADDRESS reloads.  */\n   {\n     int first_op_addr_num = -2;\n     int first_inpaddr_num[MAX_RECOG_OPERANDS];\n@@ -4037,21 +4038,21 @@ find_reloads (insn, replace, ind_levels, live_known, reload_reg_p)\n \tswitch (reload_when_needed[i])\n \t  {\n \t  case RELOAD_FOR_OPERAND_ADDRESS:\n-\t    if (! ++first_op_addr_num)\n+\t    if (++first_op_addr_num >= 0)\n \t      {\n-\t\tfirst_op_addr_num= i;\n+\t\tfirst_op_addr_num = i;\n \t\tneed_change = 1;\n \t      }\n \t    break;\n \t  case RELOAD_FOR_INPUT_ADDRESS:\n-\t    if (! ++first_inpaddr_num[reload_opnum[i]])\n+\t    if (++first_inpaddr_num[reload_opnum[i]] >= 0)\n \t      {\n \t\tfirst_inpaddr_num[reload_opnum[i]] = i;\n \t\tneed_change = 1;\n \t      }\n \t    break;\n \t  case RELOAD_FOR_OUTPUT_ADDRESS:\n-\t    if (! ++first_outpaddr_num[reload_opnum[i]])\n+\t    if (++first_outpaddr_num[reload_opnum[i]] >= 0)\n \t      {\n \t\tfirst_outpaddr_num[reload_opnum[i]] = i;\n \t\tneed_change = 1;\n@@ -4085,8 +4086,24 @@ find_reloads (insn, replace, ind_levels, live_known, reload_reg_p)\n \t      default:\n \t\tcontinue;\n \t      }\n-\t    if (i > first_num)\n+\t    if (first_num < 0)\n+\t      continue;\n+\t    else if (i > first_num)\n \t      reload_when_needed[i] = type;\n+\t    else\n+\t      {\n+\t\t/* Check if the only TYPE reload that uses reload I is\n+\t\t   reload FIRST_NUM.  */\n+\t\tfor (j = n_reloads - 1; j > first_num; j--)\n+\t\t  {\n+\t\t    if (reload_when_needed[j] == type\n+\t\t\t&& reg_mentioned_p (reload_in[i], reload_in[j]))\n+\t\t      {\n+\t\t\treload_when_needed[i] = type;\n+\t\t\tbreak;\n+\t\t      }\n+\t\t  }\n+\t      }\n \t  }\n       }\n   }"}]}