{"sha": "1fe61adfcc44c4e6bf4b02f1d4043ba708b2953d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWZlNjFhZGZjYzQ0YzRlNmJmNGIwMmYxZDQwNDNiYTcwOGIyOTUzZA==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2019-03-12T15:11:42Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2019-03-12T15:11:42Z"}, "message": "Replace can't in error messages for Fortran.\n\n2019-03-12  Martin Liska  <mliska@suse.cz>\n\n\t* c-opts.c (c_common_handle_option): Wrap option with %< and %>.\n2019-03-12  Martin Liska  <mliska@suse.cz>\n\n\t* decl.c (add_init_expr_to_sym): Replace usage of 'can't'\n\twith 'cannot'.\n\t(variable_decl): Likewise.\n\t(cray_pointer_decl): Likewise.\n\t(match_binding_attributes): Likewise.\n\t* f95-lang.c (gfc_init): Likewise.\n\t* interface.c (gfc_check_typebound_override): Likewise.\n\t* intrinsic.c (make_generic): Likewise.\n\t* module.c (dump_module): Likewise.\n\t(gfc_use_module): Likewise.\n\t* primary.c (gfc_convert_to_structure_constructor): Likewise.\n\t* resolve.c (resolve_entries): Likewise.\n\t(check_generic_tbp_ambiguity): Likewise.\n\t(get_checked_tb_operator_target): Likewise.\n\t* scanner.c (load_file): Likewise.\n\t* trans-expr.c (gfc_conv_intrinsic_to_class): Likewise.\n2019-03-12  Martin Liska  <mliska@suse.cz>\n\n\t* config/i386/i386.c: Reword an error message.\n2019-03-12  Martin Liska  <mliska@suse.cz>\n\n\t* gfortran.dg/abstract_type_3.f03: Amend test-case scan\n\tpatterns.\n\t* gfortran.dg/binding_label_tests_4.f03: Likewise.\n\t* gfortran.dg/c_f_pointer_tests_6.f90: Likewise.\n\t* gfortran.dg/c_funloc_tests_6.f90: Likewise.\n\t* gfortran.dg/c_loc_tests_17.f90: Likewise.\n\t* gfortran.dg/constructor_9.f90: Likewise.\n\t* gfortran.dg/dec_structure_8.f90: Likewise.\n\t* gfortran.dg/entry_4.f90: Likewise.\n\t* gfortran.dg/init_char_with_nonchar_ctr.f90: Likewise.\n\t* gfortran.dg/initialization_23.f90: Likewise.\n\t* gfortran.dg/logical_assignment_1.f90: Likewise.\n\t* gfortran.dg/pr80752.f90: Likewise.\n\t* gfortran.dg/pr88116_1.f90: Likewise.\n\t* gfortran.dg/pr88467.f90: Likewise.\n\t* gfortran.dg/typebound_call_7.f03: Likewise.\n\t* gfortran.dg/typebound_generic_1.f03: Likewise.\n\t* gfortran.dg/typebound_operator_2.f03: Likewise.\n\t* gfortran.dg/typebound_operator_4.f03: Likewise.\n\t* gfortran.dg/typebound_proc_9.f03: Likewise.\n\t* gfortran.dg/unlimited_polymorphic_2.f03: Likewise.\n\nFrom-SVN: r269616", "tree": {"sha": "fb5191a672ee34e225f0c4142a36b3901c48649a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fb5191a672ee34e225f0c4142a36b3901c48649a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1fe61adfcc44c4e6bf4b02f1d4043ba708b2953d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fe61adfcc44c4e6bf4b02f1d4043ba708b2953d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1fe61adfcc44c4e6bf4b02f1d4043ba708b2953d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fe61adfcc44c4e6bf4b02f1d4043ba708b2953d/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0e3088806577e8050d6cc10215196d5f57cb5aa4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e3088806577e8050d6cc10215196d5f57cb5aa4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e3088806577e8050d6cc10215196d5f57cb5aa4"}], "stats": {"total": 178, "additions": 115, "deletions": 63}, "files": [{"sha": "f9cc4c2b2468a890257028479663a3e02ff4a442", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fe61adfcc44c4e6bf4b02f1d4043ba708b2953d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fe61adfcc44c4e6bf4b02f1d4043ba708b2953d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1fe61adfcc44c4e6bf4b02f1d4043ba708b2953d", "patch": "@@ -1,3 +1,7 @@\n+2019-03-12  Martin Liska  <mliska@suse.cz>\n+\n+\t* config/i386/i386.c: Reword an error message.\n+\n 2019-03-12  Martin Jambor  <mjambor@suse.cz>\n \n \t* cgraph.c (cgraph_node::dump): Dump more info for former thunks,"}, {"sha": "910cee859419f8daade879a51507428e5af0682d", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fe61adfcc44c4e6bf4b02f1d4043ba708b2953d/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fe61adfcc44c4e6bf4b02f1d4043ba708b2953d/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=1fe61adfcc44c4e6bf4b02f1d4043ba708b2953d", "patch": "@@ -1,3 +1,7 @@\n+2019-03-12  Martin Liska  <mliska@suse.cz>\n+\n+\t* c-opts.c (c_common_handle_option): Wrap option with %< and %>.\n+\n 2019-03-11  Martin Liska  <mliska@suse.cz>\n \n \t* c-opts.c (c_common_post_options): Wrap apostrophes"}, {"sha": "454cfa0ee3e157d9ffdfe9527ff7b669e66253dc", "filename": "gcc/c-family/c-opts.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fe61adfcc44c4e6bf4b02f1d4043ba708b2953d/gcc%2Fc-family%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fe61adfcc44c4e6bf4b02f1d4043ba708b2953d/gcc%2Fc-family%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.c?ref=1fe61adfcc44c4e6bf4b02f1d4043ba708b2953d", "patch": "@@ -324,7 +324,7 @@ c_common_handle_option (size_t scode, const char *arg, HOST_WIDE_INT value,\n       else\n \t{\n \t  if (quote_chain_split)\n-\t    error (\"-I- specified twice\");\n+\t    error (\"%<-I-%> specified twice\");\n \t  quote_chain_split = true;\n \t  split_quote_chain ();\n \t  inform (input_location, \"obsolete option %<-I-%> used, \""}, {"sha": "fe459071aaff0b21cbd0c6fed3547c57cd4f8b8e", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fe61adfcc44c4e6bf4b02f1d4043ba708b2953d/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fe61adfcc44c4e6bf4b02f1d4043ba708b2953d/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=1fe61adfcc44c4e6bf4b02f1d4043ba708b2953d", "patch": "@@ -38375,7 +38375,8 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget,\n       mode0 = insn_data[icode].operand[0].mode;\n       if (!insn_data[icode].operand[0].predicate (op0, mode0))\n \t{\n-\t  error (\"xabort argument must be an 8-bit immediate\");\n+\t  error (\"the argument to %<xabort%> intrinsic must \"\n+\t\t \"be an 8-bit immediate\");\n \t  return const0_rtx;\n \t}\n       emit_insn (gen_xabort (op0));"}, {"sha": "49825741b950f4023227fb947d762e5b4ac5915b", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fe61adfcc44c4e6bf4b02f1d4043ba708b2953d/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fe61adfcc44c4e6bf4b02f1d4043ba708b2953d/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=1fe61adfcc44c4e6bf4b02f1d4043ba708b2953d", "patch": "@@ -1,3 +1,22 @@\n+2019-03-12  Martin Liska  <mliska@suse.cz>\n+\n+\t* decl.c (add_init_expr_to_sym): Replace usage of 'can't'\n+\twith 'cannot'.\n+\t(variable_decl): Likewise.\n+\t(cray_pointer_decl): Likewise.\n+\t(match_binding_attributes): Likewise.\n+\t* f95-lang.c (gfc_init): Likewise.\n+\t* interface.c (gfc_check_typebound_override): Likewise.\n+\t* intrinsic.c (make_generic): Likewise.\n+\t* module.c (dump_module): Likewise.\n+\t(gfc_use_module): Likewise.\n+\t* primary.c (gfc_convert_to_structure_constructor): Likewise.\n+\t* resolve.c (resolve_entries): Likewise.\n+\t(check_generic_tbp_ambiguity): Likewise.\n+\t(get_checked_tb_operator_target): Likewise.\n+\t* scanner.c (load_file): Likewise.\n+\t* trans-expr.c (gfc_conv_intrinsic_to_class): Likewise.\n+\n 2019-03-12  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/89363"}, {"sha": "f6411f148752f2dfeb8894aa46d1998ff14dac27", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fe61adfcc44c4e6bf4b02f1d4043ba708b2953d/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fe61adfcc44c4e6bf4b02f1d4043ba708b2953d/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=1fe61adfcc44c4e6bf4b02f1d4043ba708b2953d", "patch": "@@ -1978,7 +1978,7 @@ add_init_expr_to_sym (const char *name, gfc_expr **initp, locus *var_locus)\n \n \t  if (init->rank == 0)\n \t    {\n-\t      gfc_error (\"Can't initialize implied-shape array at %L\"\n+\t      gfc_error (\"Cannot initialize implied-shape array at %L\"\n \t\t\t \" with scalar\", &sym->declared_at);\n \t      return false;\n \t    }\n@@ -2490,7 +2490,7 @@ variable_decl (int elem)\n       if (as->type == AS_IMPLIED_SHAPE && current_attr.flavor != FL_PARAMETER)\n \t{\n \t  m = MATCH_ERROR;\n-\t  gfc_error (\"Non-PARAMETER symbol %qs at %L can't be implied-shape\",\n+\t  gfc_error (\"Non-PARAMETER symbol %qs at %L cannot be implied-shape\",\n \t\t     name, &var_locus);\n \t  goto cleanup;\n \t}\n@@ -2668,7 +2668,7 @@ variable_decl (int elem)\n \t      else\n \t\t{\n \t\t  if (!gfc_set_array_spec (sym, cp_as, &var_locus))\n-\t\t    gfc_internal_error (\"Couldn't set pointee array spec.\");\n+\t\t    gfc_internal_error (\"Cannot set pointee array spec.\");\n \n \t\t  /* Fix the array spec.  */\n \t\t  m = gfc_mod_pointee_as (sym->as);\n@@ -8538,7 +8538,7 @@ cray_pointer_decl (void)\n       if (cpte->as == NULL)\n \t{\n \t  if (!gfc_set_array_spec (cpte, as, &var_locus))\n-\t    gfc_internal_error (\"Couldn't set Cray pointee array spec.\");\n+\t    gfc_internal_error (\"Cannot set Cray pointee array spec.\");\n \t}\n       else if (as != NULL)\n \t{\n@@ -10706,7 +10706,7 @@ match_binding_attributes (gfc_typebound_proc* ba, bool generic, bool ppc)\n   /* NON_OVERRIDABLE and DEFERRED exclude themselves.  */\n   if (ba->non_overridable && ba->deferred)\n     {\n-      gfc_error (\"NON_OVERRIDABLE and DEFERRED can't both appear at %C\");\n+      gfc_error (\"NON_OVERRIDABLE and DEFERRED cannot both appear at %C\");\n       goto error;\n     }\n "}, {"sha": "3e3d3046bdb5147fafb0d4e2b050cd11ded5608e", "filename": "gcc/fortran/f95-lang.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fe61adfcc44c4e6bf4b02f1d4043ba708b2953d/gcc%2Ffortran%2Ff95-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fe61adfcc44c4e6bf4b02f1d4043ba708b2953d/gcc%2Ffortran%2Ff95-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ff95-lang.c?ref=1fe61adfcc44c4e6bf4b02f1d4043ba708b2953d", "patch": "@@ -248,7 +248,7 @@ gfc_init (void)\n   gfc_init_1 ();\n \n   if (!gfc_new_file ())\n-    fatal_error (input_location, \"can't open input file: %s\", gfc_source_file);\n+    fatal_error (input_location, \"cannot open input file: %s\", gfc_source_file);\n \n   if (flag_preprocess_only)\n     return false;"}, {"sha": "c9781d7b9f800d7b0ea227a89bd08c1d346c8f39", "filename": "gcc/fortran/interface.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fe61adfcc44c4e6bf4b02f1d4043ba708b2953d/gcc%2Ffortran%2Finterface.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fe61adfcc44c4e6bf4b02f1d4043ba708b2953d/gcc%2Ffortran%2Finterface.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finterface.c?ref=1fe61adfcc44c4e6bf4b02f1d4043ba708b2953d", "patch": "@@ -4552,7 +4552,7 @@ gfc_check_typebound_override (gfc_symtree* proc, gfc_symtree* old)\n   /* If the overwritten procedure is GENERIC, this is an error.  */\n   if (old->n.tb->is_generic)\n     {\n-      gfc_error (\"Can't overwrite GENERIC %qs at %L\",\n+      gfc_error (\"Cannot overwrite GENERIC %qs at %L\",\n \t\t old->name, &proc->n.tb->where);\n       return false;\n     }"}, {"sha": "c21fbddd5fb4216a302ba8429b7020223a113cc0", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fe61adfcc44c4e6bf4b02f1d4043ba708b2953d/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fe61adfcc44c4e6bf4b02f1d4043ba708b2953d/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=1fe61adfcc44c4e6bf4b02f1d4043ba708b2953d", "patch": "@@ -1157,7 +1157,7 @@ make_generic (const char *name, gfc_isym_id id, int standard ATTRIBUTE_UNUSED)\n \n   g = gfc_find_function (name);\n   if (g == NULL)\n-    gfc_internal_error (\"make_generic(): Can't find generic symbol %qs\",\n+    gfc_internal_error (\"make_generic(): Cannot find generic symbol %qs\",\n \t\t\tname);\n \n   gcc_assert (g->id == id);\n@@ -4217,7 +4217,7 @@ sort_actual (const char *name, gfc_actual_arglist **ap,\n \t    gfc_error (\"The argument list functions %%VAL, %%LOC or %%REF \"\n \t\t       \"are not allowed in this context at %L\", where);\n \t  else\n-\t    gfc_error (\"Can't find keyword named %qs in call to %qs at %L\",\n+\t    gfc_error (\"Cannot find keyword named %qs in call to %qs at %L\",\n \t\t       a->name, name, where);\n \t  return false;\n \t}\n@@ -5179,12 +5179,12 @@ gfc_convert_type_warn (gfc_expr *expr, gfc_typespec *ts, int eflag, int wflag)\n bad:\n   if (eflag == 1)\n     {\n-      gfc_error (\"Can't convert %s to %s at %L\",\n+      gfc_error (\"Cannot convert %s to %s at %L\",\n \t\t gfc_typename (&from_ts), gfc_typename (ts), &expr->where);\n       return false;\n     }\n \n-  gfc_internal_error (\"Can't convert %qs to %qs at %L\",\n+  gfc_internal_error (\"Cannot convert %qs to %qs at %L\",\n \t\t      gfc_typename (&from_ts), gfc_typename (ts),\n \t\t      &expr->where);\n   /* Not reached */"}, {"sha": "0572b8e02c17aa1e465dd49562c0b0f51024bc8c", "filename": "gcc/fortran/module.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fe61adfcc44c4e6bf4b02f1d4043ba708b2953d/gcc%2Ffortran%2Fmodule.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fe61adfcc44c4e6bf4b02f1d4043ba708b2953d/gcc%2Ffortran%2Fmodule.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmodule.c?ref=1fe61adfcc44c4e6bf4b02f1d4043ba708b2953d", "patch": "@@ -6170,7 +6170,7 @@ dump_module (const char *name, int dump_flag)\n   /* Write the module to the temporary file.  */\n   module_fp = gzopen (filename_tmp, \"w\");\n   if (module_fp == NULL)\n-    gfc_fatal_error (\"Can't open module file %qs for writing at %C: %s\",\n+    gfc_fatal_error (\"Cannot open module file %qs for writing at %C: %s\",\n \t\t     filename_tmp, xstrerror (errno));\n \n   /* Use lbasename to ensure module files are reproducible regardless\n@@ -6202,16 +6202,16 @@ dump_module (const char *name, int dump_flag)\n     {\n       /* Module file have changed, replace the old one.  */\n       if (remove (filename) && errno != ENOENT)\n-\tgfc_fatal_error (\"Can't delete module file %qs: %s\", filename,\n+\tgfc_fatal_error (\"Cannot delete module file %qs: %s\", filename,\n \t\t\t xstrerror (errno));\n       if (rename (filename_tmp, filename))\n-\tgfc_fatal_error (\"Can't rename module file %qs to %qs: %s\",\n+\tgfc_fatal_error (\"Cannot rename module file %qs to %qs: %s\",\n \t\t\t filename_tmp, filename, xstrerror (errno));\n     }\n   else\n     {\n       if (remove (filename_tmp))\n-\tgfc_fatal_error (\"Can't delete temporary module file %qs: %s\",\n+\tgfc_fatal_error (\"Cannot delete temporary module file %qs: %s\",\n \t\t\t filename_tmp, xstrerror (errno));\n     }\n }\n@@ -7000,7 +7000,7 @@ gfc_use_module (gfc_use_list *module)\n       module_fp = gzopen_intrinsic_module (filename);\n \n       if (module_fp == NULL && module->intrinsic)\n-\tgfc_fatal_error (\"Can't find an intrinsic module named %qs at %C\",\n+\tgfc_fatal_error (\"Cannot find an intrinsic module named %qs at %C\",\n \t\t\t module_name);\n \n       /* Check for the IEEE modules, so we can mark their symbols\n@@ -7028,7 +7028,7 @@ gfc_use_module (gfc_use_list *module)\n     {\n       if (gfc_state_stack->state != COMP_SUBMODULE\n \t  && module->submodule_name == NULL)\n-\tgfc_fatal_error (\"Can't open module file %qs for reading at %C: %s\",\n+\tgfc_fatal_error (\"Cannot open module file %qs for reading at %C: %s\",\n \t\t\t filename, xstrerror (errno));\n       else\n \tgfc_fatal_error (\"Module file %qs has not been generated, either \"\n@@ -7088,7 +7088,7 @@ gfc_use_module (gfc_use_list *module)\n   for (p = gfc_state_stack; p; p = p->previous)\n     if ((p->state == COMP_MODULE || p->state == COMP_SUBMODULE)\n \t && strcmp (p->sym->name, module_name) == 0)\n-      gfc_fatal_error (\"Can't USE the same %smodule we're building\",\n+      gfc_fatal_error (\"Cannot USE the same %smodule we're building\",\n \t\t       p->state == COMP_SUBMODULE ? \"sub\" : \"\");\n \n   init_pi_tree ();"}, {"sha": "e918372ef8503d7cf1795dd6f00714e69b582b2c", "filename": "gcc/fortran/primary.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fe61adfcc44c4e6bf4b02f1d4043ba708b2953d/gcc%2Ffortran%2Fprimary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fe61adfcc44c4e6bf4b02f1d4043ba708b2953d/gcc%2Ffortran%2Fprimary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fprimary.c?ref=1fe61adfcc44c4e6bf4b02f1d4043ba708b2953d", "patch": "@@ -2979,7 +2979,7 @@ gfc_convert_to_structure_constructor (gfc_expr *e, gfc_symbol *sym, gfc_expr **c\n \n   if (!parent && sym->attr.abstract)\n     {\n-      gfc_error (\"Can't construct ABSTRACT type %qs at %L\",\n+      gfc_error (\"Cannot construct ABSTRACT type %qs at %L\",\n \t\t sym->name, &expr->where);\n       goto cleanup;\n     }"}, {"sha": "6677deb3bdcafa435ae1dcba33fa44aa2cb341ea", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fe61adfcc44c4e6bf4b02f1d4043ba708b2953d/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fe61adfcc44c4e6bf4b02f1d4043ba708b2953d/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=1fe61adfcc44c4e6bf4b02f1d4043ba708b2953d", "patch": "@@ -838,22 +838,22 @@ resolve_entries (gfc_namespace *ns)\n \t      if (sym->attr.dimension)\n \t\t{\n \t\t  if (el == ns->entries)\n-\t\t    gfc_error (\"FUNCTION result %s can't be an array in \"\n+\t\t    gfc_error (\"FUNCTION result %s cannot be an array in \"\n \t\t\t       \"FUNCTION %s at %L\", sym->name,\n \t\t\t       ns->entries->sym->name, &sym->declared_at);\n \t\t  else\n-\t\t    gfc_error (\"ENTRY result %s can't be an array in \"\n+\t\t    gfc_error (\"ENTRY result %s cannot be an array in \"\n \t\t\t       \"FUNCTION %s at %L\", sym->name,\n \t\t\t       ns->entries->sym->name, &sym->declared_at);\n \t\t}\n \t      else if (sym->attr.pointer)\n \t\t{\n \t\t  if (el == ns->entries)\n-\t\t    gfc_error (\"FUNCTION result %s can't be a POINTER in \"\n+\t\t    gfc_error (\"FUNCTION result %s cannot be a POINTER in \"\n \t\t\t       \"FUNCTION %s at %L\", sym->name,\n \t\t\t       ns->entries->sym->name, &sym->declared_at);\n \t\t  else\n-\t\t    gfc_error (\"ENTRY result %s can't be a POINTER in \"\n+\t\t    gfc_error (\"ENTRY result %s cannot be a POINTER in \"\n \t\t\t       \"FUNCTION %s at %L\", sym->name,\n \t\t\t       ns->entries->sym->name, &sym->declared_at);\n \t\t}\n@@ -891,12 +891,12 @@ resolve_entries (gfc_namespace *ns)\n \t\t  if (sym)\n \t\t    {\n \t\t      if (el == ns->entries)\n-\t\t\tgfc_error (\"FUNCTION result %s can't be of type %s \"\n+\t\t\tgfc_error (\"FUNCTION result %s cannot be of type %s \"\n \t\t\t\t   \"in FUNCTION %s at %L\", sym->name,\n \t\t\t\t   gfc_typename (ts), ns->entries->sym->name,\n \t\t\t\t   &sym->declared_at);\n \t\t      else\n-\t\t\tgfc_error (\"ENTRY result %s can't be of type %s \"\n+\t\t\tgfc_error (\"ENTRY result %s cannot be of type %s \"\n \t\t\t\t   \"in FUNCTION %s at %L\", sym->name,\n \t\t\t\t   gfc_typename (ts), ns->entries->sym->name,\n \t\t\t\t   &sym->declared_at);\n@@ -13115,7 +13115,7 @@ check_generic_tbp_ambiguity (gfc_tbp_generic* t1, gfc_tbp_generic* t2,\n   if (sym1->attr.subroutine != sym2->attr.subroutine\n       || sym1->attr.function != sym2->attr.function)\n     {\n-      gfc_error (\"%qs and %qs can't be mixed FUNCTION/SUBROUTINE for\"\n+      gfc_error (\"%qs and %qs cannot be mixed FUNCTION/SUBROUTINE for\"\n \t\t \" GENERIC %qs at %L\",\n \t\t sym1->name, sym2->name, generic_name, &where);\n       return false;\n@@ -13250,7 +13250,7 @@ resolve_tb_generic_targets (gfc_symbol* super_type,\n   /* If we attempt to \"overwrite\" a specific binding, this is an error.  */\n   if (p->overridden && !p->overridden->is_generic)\n     {\n-      gfc_error (\"GENERIC %qs at %L can't overwrite specific binding with\"\n+      gfc_error (\"GENERIC %qs at %L cannot overwrite specific binding with\"\n \t\t \" the same name\", name, &p->where);\n       return false;\n     }\n@@ -13306,7 +13306,7 @@ get_checked_tb_operator_target (gfc_tbp_generic* target, locus where)\n   /* F08:C468. All operator bindings must have a passed-object dummy argument.  */\n   if (target->specific->nopass)\n     {\n-      gfc_error (\"Type-bound operator at %L can't be NOPASS\", &where);\n+      gfc_error (\"Type-bound operator at %L cannot be NOPASS\", &where);\n       return NULL;\n     }\n "}, {"sha": "eeba2ab2ae7141c5436414dcece33e6cbdc4c7ca", "filename": "gcc/fortran/scanner.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fe61adfcc44c4e6bf4b02f1d4043ba708b2953d/gcc%2Ffortran%2Fscanner.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fe61adfcc44c4e6bf4b02f1d4043ba708b2953d/gcc%2Ffortran%2Fscanner.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fscanner.c?ref=1fe61adfcc44c4e6bf4b02f1d4043ba708b2953d", "patch": "@@ -2469,7 +2469,7 @@ load_file (const char *realfilename, const char *displayedname, bool initial)\n \n       if (input == NULL)\n \t{\n-\t  gfc_error_now (\"Can't open file %qs\", filename);\n+\t  gfc_error_now (\"Cannot open file %qs\", filename);\n \t  return false;\n \t}\n     }"}, {"sha": "9019c5589159391b4197226287680adb4ff6ae86", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fe61adfcc44c4e6bf4b02f1d4043ba708b2953d/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fe61adfcc44c4e6bf4b02f1d4043ba708b2953d/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=1fe61adfcc44c4e6bf4b02f1d4043ba708b2953d", "patch": "@@ -926,8 +926,8 @@ gfc_conv_intrinsic_to_class (gfc_se *parmse, gfc_expr *e,\n \t\t}\n \t      else\n \t\t{\n-\t\t  gfc_error (\"Can't compute the length of the char array at %L.\",\n-\t\t\t     &e->where);\n+\t\t  gfc_error (\"Cannot compute the length of the char array \"\n+\t\t\t     \"at %L.\", &e->where);\n \t\t}\n \t    }\n \t}"}, {"sha": "bf50d9d2cb67dbc30b1261ef874fe02744c0827f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fe61adfcc44c4e6bf4b02f1d4043ba708b2953d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fe61adfcc44c4e6bf4b02f1d4043ba708b2953d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1fe61adfcc44c4e6bf4b02f1d4043ba708b2953d", "patch": "@@ -1,3 +1,27 @@\n+2019-03-12  Martin Liska  <mliska@suse.cz>\n+\n+\t* gfortran.dg/abstract_type_3.f03: Amend test-case scan\n+\tpatterns.\n+\t* gfortran.dg/binding_label_tests_4.f03: Likewise.\n+\t* gfortran.dg/c_f_pointer_tests_6.f90: Likewise.\n+\t* gfortran.dg/c_funloc_tests_6.f90: Likewise.\n+\t* gfortran.dg/c_loc_tests_17.f90: Likewise.\n+\t* gfortran.dg/constructor_9.f90: Likewise.\n+\t* gfortran.dg/dec_structure_8.f90: Likewise.\n+\t* gfortran.dg/entry_4.f90: Likewise.\n+\t* gfortran.dg/init_char_with_nonchar_ctr.f90: Likewise.\n+\t* gfortran.dg/initialization_23.f90: Likewise.\n+\t* gfortran.dg/logical_assignment_1.f90: Likewise.\n+\t* gfortran.dg/pr80752.f90: Likewise.\n+\t* gfortran.dg/pr88116_1.f90: Likewise.\n+\t* gfortran.dg/pr88467.f90: Likewise.\n+\t* gfortran.dg/typebound_call_7.f03: Likewise.\n+\t* gfortran.dg/typebound_generic_1.f03: Likewise.\n+\t* gfortran.dg/typebound_operator_2.f03: Likewise.\n+\t* gfortran.dg/typebound_operator_4.f03: Likewise.\n+\t* gfortran.dg/typebound_proc_9.f03: Likewise.\n+\t* gfortran.dg/unlimited_polymorphic_2.f03: Likewise.\n+\n 2019-03-12  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/89363"}, {"sha": "542037397ab797501ef84d470d4aa59f9ddf7d7f", "filename": "gcc/testsuite/gfortran.dg/abstract_type_3.f03", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fe61adfcc44c4e6bf4b02f1d4043ba708b2953d/gcc%2Ftestsuite%2Fgfortran.dg%2Fabstract_type_3.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fe61adfcc44c4e6bf4b02f1d4043ba708b2953d/gcc%2Ftestsuite%2Fgfortran.dg%2Fabstract_type_3.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fabstract_type_3.f03?ref=1fe61adfcc44c4e6bf4b02f1d4043ba708b2953d", "patch": "@@ -41,7 +41,7 @@ END FUNCTION func\n   SUBROUTINE sub (arg) ! { dg-error \"is of the ABSTRACT type 'again_abst_t'\" }\n     IMPLICIT NONE\n     TYPE(again_abst_t) :: arg\n-    arg = again_abst_t () ! { dg-error \"Can't construct ABSTRACT type 'again_abst_t'\" }\n+    arg = again_abst_t () ! { dg-error \"Cannot construct ABSTRACT type 'again_abst_t'\" }\n   END SUBROUTINE sub\n \n   SUBROUTINE impl ()"}, {"sha": "f8c0f0460638ae8272693b32cd2f47e17978aa45", "filename": "gcc/testsuite/gfortran.dg/binding_label_tests_4.f03", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fe61adfcc44c4e6bf4b02f1d4043ba708b2953d/gcc%2Ftestsuite%2Fgfortran.dg%2Fbinding_label_tests_4.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fe61adfcc44c4e6bf4b02f1d4043ba708b2953d/gcc%2Ftestsuite%2Fgfortran.dg%2Fbinding_label_tests_4.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbinding_label_tests_4.f03?ref=1fe61adfcc44c4e6bf4b02f1d4043ba708b2953d", "patch": "@@ -18,6 +18,6 @@ end module B\n \n module C\n use A\n-use B ! { dg-error \"Can't open module file\" }\n+use B ! { dg-error \"Cannot open module file\" }\n end module C\n ! { dg-excess-errors \"compilation terminated\" }"}, {"sha": "23ca88b0de059b46650eb7443327eae737fbabb7", "filename": "gcc/testsuite/gfortran.dg/c_f_pointer_tests_6.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fe61adfcc44c4e6bf4b02f1d4043ba708b2953d/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_f_pointer_tests_6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fe61adfcc44c4e6bf4b02f1d4043ba708b2953d/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_f_pointer_tests_6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_f_pointer_tests_6.f90?ref=1fe61adfcc44c4e6bf4b02f1d4043ba708b2953d", "patch": "@@ -12,7 +12,7 @@ subroutine test2\n integer, pointer :: bari\n call c_f_procpointer(fptr,bar) ! { dg-error \"Argument CPTR at .1. to C_F_PROCPOINTER shall have the type TYPE.C_FUNPTR.\" }\n call c_f_pointer(fun,bari) ! { dg-error \"Argument CPTR at .1. to C_F_POINTER shall have the type TYPE.C_PTR.\" }\n-fun = fptr ! { dg-error \"Can't convert TYPE.c_ptr. to TYPE.c_funptr.\" }\n+fun = fptr ! { dg-error \"Cannot convert TYPE.c_ptr. to TYPE.c_funptr.\" }\n end\n \n subroutine test()"}, {"sha": "45d095566d134f16a607909b3bbf39d6859a2e0b", "filename": "gcc/testsuite/gfortran.dg/c_funloc_tests_6.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fe61adfcc44c4e6bf4b02f1d4043ba708b2953d/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_funloc_tests_6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fe61adfcc44c4e6bf4b02f1d4043ba708b2953d/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_funloc_tests_6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_funloc_tests_6.f90?ref=1fe61adfcc44c4e6bf4b02f1d4043ba708b2953d", "patch": "@@ -20,8 +20,8 @@ end subroutine sub\n integer, external :: noCsub\n procedure(integer), pointer :: fint\n \n-cp = c_funloc (sub) ! { dg-error \"Can't convert TYPE.c_funptr. to TYPE.c_ptr.\" })\n-cfp = c_loc (int)   ! { dg-error \"Can't convert TYPE.c_ptr. to TYPE.c_funptr.\" }\n+cp = c_funloc (sub) ! { dg-error \"Cannot convert TYPE.c_funptr. to TYPE.c_ptr.\" })\n+cfp = c_loc (int)   ! { dg-error \"Cannot convert TYPE.c_ptr. to TYPE.c_funptr.\" }\n \n call c_f_pointer (cfp, int)     ! { dg-error \"Argument CPTR at .1. to C_F_POINTER shall have the type TYPE.C_PTR.\" }\n call c_f_procpointer (cp, fsub) ! { dg-error \"Argument CPTR at .1. to C_F_PROCPOINTER shall have the type TYPE.C_FUNPTR.\" }"}, {"sha": "2ed8307ddcfbbb96f098c817d7e7578f11a5524a", "filename": "gcc/testsuite/gfortran.dg/c_loc_tests_17.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fe61adfcc44c4e6bf4b02f1d4043ba708b2953d/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_loc_tests_17.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fe61adfcc44c4e6bf4b02f1d4043ba708b2953d/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_loc_tests_17.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_loc_tests_17.f90?ref=1fe61adfcc44c4e6bf4b02f1d4043ba708b2953d", "patch": "@@ -10,5 +10,5 @@ program aaaa\n   use iso_c_binding, only : c_loc\n   integer, target :: i\n   type(C_PTR) :: f_ptr ! { dg-error \"being used before it is defined\" }\n-  f_ptr=c_loc(i)  ! { dg-error \"Can't convert\" }\n+  f_ptr=c_loc(i)  ! { dg-error \"Cannot convert\" }\n end program aaaa"}, {"sha": "a61b63a0fe5644c78cbb491d5e30da9e2706d9d1", "filename": "gcc/testsuite/gfortran.dg/constructor_9.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fe61adfcc44c4e6bf4b02f1d4043ba708b2953d/gcc%2Ftestsuite%2Fgfortran.dg%2Fconstructor_9.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fe61adfcc44c4e6bf4b02f1d4043ba708b2953d/gcc%2Ftestsuite%2Fgfortran.dg%2Fconstructor_9.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fconstructor_9.f90?ref=1fe61adfcc44c4e6bf4b02f1d4043ba708b2953d", "patch": "@@ -15,6 +15,6 @@ module cf\n contains\n   subroutine cfi()\n     type(cfmde), pointer :: cfd\n-    cfd=cfmde()                  ! { dg-error \"Can't convert\" }\n+    cfd=cfmde()                  ! { dg-error \"Cannot convert\" }\n   end subroutine\n end module"}, {"sha": "70faabfc0f5ff2cbbabe4313083b44d56d8aa50f", "filename": "gcc/testsuite/gfortran.dg/dec_structure_8.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fe61adfcc44c4e6bf4b02f1d4043ba708b2953d/gcc%2Ftestsuite%2Fgfortran.dg%2Fdec_structure_8.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fe61adfcc44c4e6bf4b02f1d4043ba708b2953d/gcc%2Ftestsuite%2Fgfortran.dg%2Fdec_structure_8.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdec_structure_8.f90?ref=1fe61adfcc44c4e6bf4b02f1d4043ba708b2953d", "patch": "@@ -11,7 +11,7 @@\n   integer   b //            ! { dg-error \"Empty old style initializer list\" }\n   integer   c /2*3/         ! { dg-error \"Repeat spec invalid in scalar\" }\n   integer   d /1,2,3/       ! { dg-error \"End of scalar initializer expected\" }\n-  integer   e /\"HI\"/        ! { dg-error \"Can't convert\" }\n+  integer   e /\"HI\"/        ! { dg-error \"Cannot convert\" }\n   integer   f(as) /4*9/     ! { dg-error \"Too many elements\" }\n   integer   g(3) /1,3/      ! { dg-error \"Not enough elements\" }\n   integer   h(3) /1,3,5,7/  ! { dg-error \"Too many elements\" }"}, {"sha": "22d411b602205da7ce6184a9637f1470cb5a4b8d", "filename": "gcc/testsuite/gfortran.dg/entry_4.f90", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fe61adfcc44c4e6bf4b02f1d4043ba708b2953d/gcc%2Ftestsuite%2Fgfortran.dg%2Fentry_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fe61adfcc44c4e6bf4b02f1d4043ba708b2953d/gcc%2Ftestsuite%2Fgfortran.dg%2Fentry_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fentry_4.f90?ref=1fe61adfcc44c4e6bf4b02f1d4043ba708b2953d", "patch": "@@ -1,5 +1,5 @@\n ! { dg-do compile { target i?86-*-* x86_64-*-* } }\n-function f1 () result (r)      ! { dg-error \"can't be a POINTER\" }\n+function f1 () result (r)      ! { dg-error \"cannot be a POINTER\" }\n integer, pointer :: r\n real e1\n allocate (r)\n@@ -11,14 +11,14 @@ function f1 () result (r)      ! { dg-error \"can't be a POINTER\" }\n e1a = 13\n end function\n function f2 ()\n-integer, dimension (2, 7, 6) :: e2   ! { dg-error \"can't be an array\" }\n+integer, dimension (2, 7, 6) :: e2   ! { dg-error \"cannot be an array\" }\n f2 = 6\n return\n entry e2 ()\n e2 (:, :, :) = 2\n end function\n-integer(kind=8) function f3 ()      ! { dg-error \"can't be of type\" }\n-complex(kind=8) e3              ! { dg-error \"can't be of type\" }\n+integer(kind=8) function f3 ()      ! { dg-error \"cannot be of type\" }\n+complex(kind=8) e3              ! { dg-error \"cannot be of type\" }\n f3 = 1\n return\n entry e3 ()"}, {"sha": "301118266456545b87db557fb58cbaffbd9b8e5e", "filename": "gcc/testsuite/gfortran.dg/init_char_with_nonchar_ctr.f90", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fe61adfcc44c4e6bf4b02f1d4043ba708b2953d/gcc%2Ftestsuite%2Fgfortran.dg%2Finit_char_with_nonchar_ctr.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fe61adfcc44c4e6bf4b02f1d4043ba708b2953d/gcc%2Ftestsuite%2Fgfortran.dg%2Finit_char_with_nonchar_ctr.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finit_char_with_nonchar_ctr.f90?ref=1fe61adfcc44c4e6bf4b02f1d4043ba708b2953d", "patch": "@@ -7,28 +7,28 @@ subroutine s1\n       integer :: n = 0\n    end type\n    type t2\n-      character :: c = t() ! { dg-error \"Can't convert TYPE\\\\(t\\\\) to CHARACTER\\\\(1\\\\)\" }\n+      character :: c = t() ! { dg-error \"Cannot convert TYPE\\\\(t\\\\) to CHARACTER\\\\(1\\\\)\" }\n    end type\n end subroutine\n \n subroutine s2\n    type t\n    end type\n    type t2\n-      character :: c(1) = [t()] ! { dg-error \"Can't convert TYPE\\\\(t\\\\) to CHARACTER\\\\(1\\\\)\" }\n+      character :: c(1) = [t()] ! { dg-error \"Cannot convert TYPE\\\\(t\\\\) to CHARACTER\\\\(1\\\\)\" }\n    end type\n end subroutine\n \n subroutine s3\n    type t\n       integer :: a = 1\n-      character :: c = t() ! { dg-error \"Can't convert TYPE\\\\(t\\\\) to CHARACTER\\\\(1\\\\)\" }\n+      character :: c = t() ! { dg-error \"Cannot convert TYPE\\\\(t\\\\) to CHARACTER\\\\(1\\\\)\" }\n    end type\n end subroutine\n \n subroutine s4\n    type t\n       integer, allocatable :: a\n-      character :: c = t() ! { dg-error \"Can't convert TYPE\\\\(t\\\\) to CHARACTER\\\\(1\\\\)\" }\n+      character :: c = t() ! { dg-error \"Cannot convert TYPE\\\\(t\\\\) to CHARACTER\\\\(1\\\\)\" }\n    end type\n end subroutine"}, {"sha": "a4683a3ddd2fce0b26a465c9d50a630fe13f11e6", "filename": "gcc/testsuite/gfortran.dg/initialization_23.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fe61adfcc44c4e6bf4b02f1d4043ba708b2953d/gcc%2Ftestsuite%2Fgfortran.dg%2Finitialization_23.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fe61adfcc44c4e6bf4b02f1d4043ba708b2953d/gcc%2Ftestsuite%2Fgfortran.dg%2Finitialization_23.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finitialization_23.f90?ref=1fe61adfcc44c4e6bf4b02f1d4043ba708b2953d", "patch": "@@ -9,6 +9,6 @@ MODULE cdf_aux_mod\n       TYPE :: one_parameter\n         CHARACTER :: name\n       END TYPE one_parameter\n-      CHARACTER, PARAMETER :: the_alpha = one_parameter('c') ! { dg-error \"Can't convert TYPE\" }\n+      CHARACTER, PARAMETER :: the_alpha = one_parameter('c') ! { dg-error \"Cannot convert TYPE\" }\n       CHARACTER, PARAMETER :: the_beta = (/one_parameter('c')/) ! { dg-error \"Incompatible ranks\" }\n     END MODULE cdf_aux_mod"}, {"sha": "e3c14f5b3929ea19d88d9f53f96adf58f8f91bee", "filename": "gcc/testsuite/gfortran.dg/logical_assignment_1.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fe61adfcc44c4e6bf4b02f1d4043ba708b2953d/gcc%2Ftestsuite%2Fgfortran.dg%2Flogical_assignment_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fe61adfcc44c4e6bf4b02f1d4043ba708b2953d/gcc%2Ftestsuite%2Fgfortran.dg%2Flogical_assignment_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Flogical_assignment_1.f90?ref=1fe61adfcc44c4e6bf4b02f1d4043ba708b2953d", "patch": "@@ -5,6 +5,6 @@\n program emptyarray5\n   implicit none\n   real a(0)\n-  a = [logical::] ! { dg-error \"Can't convert LOGICAL\" }\n+  a = [logical::] ! { dg-error \"Cannot convert LOGICAL\" }\n   print *,size(a)\n end program emptyarray5"}, {"sha": "710065ce4c9d928373204719bc3db5ec3bee7cb9", "filename": "gcc/testsuite/gfortran.dg/pr80752.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fe61adfcc44c4e6bf4b02f1d4043ba708b2953d/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr80752.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fe61adfcc44c4e6bf4b02f1d4043ba708b2953d/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr80752.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr80752.f90?ref=1fe61adfcc44c4e6bf4b02f1d4043ba708b2953d", "patch": "@@ -7,7 +7,7 @@ module exchange_utils\n   integer, parameter, public :: knd = 8\n \n   type, private :: a\n-     logical :: add_vs98 = 0.0_knd ! { dg-error \"Can't convert\" }\n+     logical :: add_vs98 = 0.0_knd ! { dg-error \"Cannot convert\" }\n   end type a\n \n   type, private :: x_param_t"}, {"sha": "67c6a2603400d14965060a0ba9119dcc6434e9cb", "filename": "gcc/testsuite/gfortran.dg/pr88116_1.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fe61adfcc44c4e6bf4b02f1d4043ba708b2953d/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr88116_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fe61adfcc44c4e6bf4b02f1d4043ba708b2953d/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr88116_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr88116_1.f90?ref=1fe61adfcc44c4e6bf4b02f1d4043ba708b2953d", "patch": "@@ -1,4 +1,4 @@\n ! { dg-do compile }\n program p\n-   print *, [integer :: 1, [integer(8) :: 2, ['3']]] ! { dg-error \"Can't convert\" }\n+   print *, [integer :: 1, [integer(8) :: 2, ['3']]] ! { dg-error \"Cannot convert\" }\n end"}, {"sha": "5424c06b8849ddeeb713a3e3b30d3dae004cfb4d", "filename": "gcc/testsuite/gfortran.dg/pr88467.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fe61adfcc44c4e6bf4b02f1d4043ba708b2953d/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr88467.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fe61adfcc44c4e6bf4b02f1d4043ba708b2953d/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr88467.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr88467.f90?ref=1fe61adfcc44c4e6bf4b02f1d4043ba708b2953d", "patch": "@@ -1,4 +1,4 @@\n ! { dg-do compile }\n program foo\n-   print *, [integer :: 1, [integer(8) :: 2, '3']] ! { dg-error \"Can't convert\" }\n+   print *, [integer :: 1, [integer(8) :: 2, '3']] ! { dg-error \"Cannot convert\" }\n end program foo"}, {"sha": "81d8162528ba7f85790458d05e3138e49aa746e8", "filename": "gcc/testsuite/gfortran.dg/typebound_call_7.f03", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fe61adfcc44c4e6bf4b02f1d4043ba708b2953d/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_call_7.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fe61adfcc44c4e6bf4b02f1d4043ba708b2953d/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_call_7.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_call_7.f03?ref=1fe61adfcc44c4e6bf4b02f1d4043ba708b2953d", "patch": "@@ -38,7 +38,7 @@ SUBROUTINE fill_gap ()\n     REAL :: resArr(3), resSmall(2)\n \n     res = sys%solve1 () ! { dg-error \"Incompatible rank\" }\n-    res = sys%solve2 () ! { dg-error \"Can't convert\" }\n+    res = sys%solve2 () ! { dg-error \"Cannot convert\" }\n     resSmall = sys%solve1 () ! { dg-error \"Different shape\" }\n \n     res = sys%solve3 ()"}, {"sha": "dd54e66881b619f96dc0964821433fb7529c1324", "filename": "gcc/testsuite/gfortran.dg/typebound_generic_1.f03", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fe61adfcc44c4e6bf4b02f1d4043ba708b2953d/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_generic_1.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fe61adfcc44c4e6bf4b02f1d4043ba708b2953d/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_generic_1.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_generic_1.f03?ref=1fe61adfcc44c4e6bf4b02f1d4043ba708b2953d", "patch": "@@ -55,10 +55,10 @@ MODULE m\n   CONTAINS\n     GENERIC :: gen2 => p1a ! { dg-error \"are ambiguous\" }\n     GENERIC :: gen2 => p3\n-    GENERIC :: p1 => p2 ! { dg-error \"can't overwrite specific\" }\n+    GENERIC :: p1 => p2 ! { dg-error \"cannot overwrite specific\" }\n     GENERIC :: gensub => p2 ! { dg-error \"mixed FUNCTION/SUBROUTINE\" }\n \n-    PROCEDURE, NOPASS :: gen1 => intf1 ! { dg-error \"Can't overwrite GENERIC\" }\n+    PROCEDURE, NOPASS :: gen1 => intf1 ! { dg-error \"Cannot overwrite GENERIC\" }\n   END TYPE t\n \n CONTAINS"}, {"sha": "bdef47d4087c2194d12305886ace10878015da5c", "filename": "gcc/testsuite/gfortran.dg/typebound_operator_2.f03", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fe61adfcc44c4e6bf4b02f1d4043ba708b2953d/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_operator_2.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fe61adfcc44c4e6bf4b02f1d4043ba708b2953d/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_operator_2.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_operator_2.f03?ref=1fe61adfcc44c4e6bf4b02f1d4043ba708b2953d", "patch": "@@ -31,8 +31,8 @@ MODULE m\n     GENERIC :: OPERATOR(.UNARY.) => onearg_alt\n     GENERIC, PRIVATE :: OPERATOR(.UNARY.) => onearg_alt2 ! { dg-error \"must have the same access\" }\n \n-    GENERIC :: OPERATOR(.UNARYPRIME.) => nopassed ! { dg-error \"can't be NOPASS\" }\n-    GENERIC :: OPERATOR(-) => nopassed ! { dg-error \"can't be NOPASS\" }\n+    GENERIC :: OPERATOR(.UNARYPRIME.) => nopassed ! { dg-error \"cannot be NOPASS\" }\n+    GENERIC :: OPERATOR(-) => nopassed ! { dg-error \"cannot be NOPASS\" }\n   END TYPE t\n \n CONTAINS"}, {"sha": "3dc3cae3156197216d314acc1658f36f61d5c664", "filename": "gcc/testsuite/gfortran.dg/typebound_operator_4.f03", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fe61adfcc44c4e6bf4b02f1d4043ba708b2953d/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_operator_4.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fe61adfcc44c4e6bf4b02f1d4043ba708b2953d/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_operator_4.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_operator_4.f03?ref=1fe61adfcc44c4e6bf4b02f1d4043ba708b2953d", "patch": "@@ -54,7 +54,7 @@ END SUBROUTINE assign_real\n \n   SUBROUTINE in_module ()\n     TYPE(myint) :: x\n-    x = 0 ! { dg-bogus \"Can't convert\" }\n+    x = 0 ! { dg-bogus \"Cannot convert\" }\n     x = x + 42 ! { dg-bogus \"Operands of\" }\n     x = x .PLUS. 5 ! { dg-bogus \"Unknown operator\" }\n   END SUBROUTINE in_module\n@@ -83,7 +83,7 @@ PROGRAM main\n   IMPLICIT NONE\n   TYPE(myint) :: x\n \n-  x = 0 ! { dg-error \"Can't convert\" }\n+  x = 0 ! { dg-error \"Cannot convert\" }\n   x = x + 42 ! { dg-error \"binary intrinsic numeric operator\" }\n   x = x .PLUS. 5 ! { dg-error \"Unknown operator\" }\n END PROGRAM main"}, {"sha": "e3dc7863f01fc62b3e5eed413cbc572a8ba5cc75", "filename": "gcc/testsuite/gfortran.dg/typebound_proc_9.f03", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fe61adfcc44c4e6bf4b02f1d4043ba708b2953d/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_proc_9.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fe61adfcc44c4e6bf4b02f1d4043ba708b2953d/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_proc_9.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_proc_9.f03?ref=1fe61adfcc44c4e6bf4b02f1d4043ba708b2953d", "patch": "@@ -20,7 +20,7 @@ END SUBROUTINE intf\n   CONTAINS\n     PROCEDURE, DEFERRED :: p2 ! { dg-error \"Interface must be specified\" }\n     PROCEDURE(intf), NOPASS :: p3 ! { dg-error \"should be declared DEFERRED\" }\n-    PROCEDURE(intf), DEFERRED, NON_OVERRIDABLE :: p4 ! { dg-error \"can't both\" }\n+    PROCEDURE(intf), DEFERRED, NON_OVERRIDABLE :: p4 ! { dg-error \"cannot both\" }\n     PROCEDURE(unknown), DEFERRED :: p5 ! { dg-error \"has no IMPLICIT|must be explicit\" }\n     PROCEDURE(intf), DEFERRED, DEFERRED :: p6 ! { dg-error \"Duplicate DEFERRED\" }\n     PROCEDURE(intf), DEFERRED :: p6 => proc ! { dg-error \"is invalid for DEFERRED\" }"}, {"sha": "ee4523dd696eb596abf4701045cb5d4b5c2a9045", "filename": "gcc/testsuite/gfortran.dg/unlimited_polymorphic_2.f03", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fe61adfcc44c4e6bf4b02f1d4043ba708b2953d/gcc%2Ftestsuite%2Fgfortran.dg%2Funlimited_polymorphic_2.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fe61adfcc44c4e6bf4b02f1d4043ba708b2953d/gcc%2Ftestsuite%2Fgfortran.dg%2Funlimited_polymorphic_2.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Funlimited_polymorphic_2.f03?ref=1fe61adfcc44c4e6bf4b02f1d4043ba708b2953d", "patch": "@@ -20,7 +20,7 @@\n ! F2008: C4106\r\n   u2 = [u1] ! { dg-error \"shall not be unlimited polymorphic\" }\r\n \r\n-  i = u2 ! { dg-error \"Can\\\\'t convert CLASS\\\\(\\\\*\\\\)\" }\r\n+  i = u2 ! { dg-error \"Cannot convert CLASS\\\\(\\\\*\\\\)\" }\r\n \r\n ! Repeats same_type_as_1.f03 for unlimited polymorphic u2\r\n   flag = same_type_as (i, u2) ! { dg-error \"cannot be of type INTEGER\" }\r"}]}