{"sha": "728761beb09e1d14952d08ffe18cf1494e05c782", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzI4NzYxYmViMDllMWQxNDk1MmQwOGZmZTE4Y2YxNDk0ZTA1Yzc4Mg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2013-02-28T20:21:23Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2013-02-28T20:21:23Z"}, "message": "re PR c++/56481 (endless loop compiling a C++ file)\n\n\tPR c++/56481\n\t* semantics.c (potential_constant_expression_1): Use\n\tcxx_eval_outermost_constant_expr rather than maybe_constant_value.\n\nFrom-SVN: r196358", "tree": {"sha": "057a232c70168d39ceaf82e43e99f4fd566d83db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/057a232c70168d39ceaf82e43e99f4fd566d83db"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/728761beb09e1d14952d08ffe18cf1494e05c782", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/728761beb09e1d14952d08ffe18cf1494e05c782", "html_url": "https://github.com/Rust-GCC/gccrs/commit/728761beb09e1d14952d08ffe18cf1494e05c782", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/728761beb09e1d14952d08ffe18cf1494e05c782/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "15fd8332c06b873289196e91bdc3fe9723648ca9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15fd8332c06b873289196e91bdc3fe9723648ca9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15fd8332c06b873289196e91bdc3fe9723648ca9"}], "stats": {"total": 17, "additions": 12, "deletions": 5}, "files": [{"sha": "11ea5d437521820cf6a804d2b452a74515ea9bd4", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/728761beb09e1d14952d08ffe18cf1494e05c782/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/728761beb09e1d14952d08ffe18cf1494e05c782/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=728761beb09e1d14952d08ffe18cf1494e05c782", "patch": "@@ -1,5 +1,9 @@\n 2013-02-28  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/56481\n+\t* semantics.c (potential_constant_expression_1): Use\n+\tcxx_eval_outermost_constant_expr rather than maybe_constant_value.\n+\n \tPR c++/56243\n \t* call.c (build_over_call): Avoid virtual lookup in a template.\n "}, {"sha": "8038aa26e4800ea99de241f28b40e7d4261db701", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/728761beb09e1d14952d08ffe18cf1494e05c782/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/728761beb09e1d14952d08ffe18cf1494e05c782/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=728761beb09e1d14952d08ffe18cf1494e05c782", "patch": "@@ -8683,10 +8683,12 @@ potential_constant_expression_1 (tree t, bool want_rval, tsubst_flags_t flags)\n     case ROUND_MOD_EXPR:\n       {\n \ttree denom = TREE_OPERAND (t, 1);\n-\t/* We can't call maybe_constant_value on an expression\n+\tif (!potential_constant_expression_1 (denom, rval, flags))\n+\t  return false;\n+\t/* We can't call cxx_eval_outermost_constant_expr on an expression\n \t   that hasn't been through fold_non_dependent_expr yet.  */\n \tif (!processing_template_decl)\n-\t  denom = maybe_constant_value (denom);\n+\t  denom = cxx_eval_outermost_constant_expr (denom, true);\n \tif (integer_zerop (denom))\n \t  {\n \t    if (flags & tf_error)\n@@ -8696,7 +8698,8 @@ potential_constant_expression_1 (tree t, bool want_rval, tsubst_flags_t flags)\n \telse\n \t  {\n \t    want_rval = true;\n-\t    goto binary;\n+\t    return potential_constant_expression_1 (TREE_OPERAND (t, 0),\n+\t\t\t\t\t\t    want_rval, flags);\n \t  }\n       }\n \n@@ -8731,7 +8734,7 @@ potential_constant_expression_1 (tree t, bool want_rval, tsubst_flags_t flags)\n \tif (!potential_constant_expression_1 (op, rval, flags))\n \t  return false;\n \tif (!processing_template_decl)\n-\t  op = maybe_constant_value (op);\n+\t  op = cxx_eval_outermost_constant_expr (op, true);\n \tif (tree_int_cst_equal (op, tmp))\n \t  return potential_constant_expression_1 (TREE_OPERAND (t, 1), rval, flags);\n \telse\n@@ -8793,7 +8796,7 @@ potential_constant_expression_1 (tree t, bool want_rval, tsubst_flags_t flags)\n       if (!potential_constant_expression_1 (tmp, rval, flags))\n \treturn false;\n       if (!processing_template_decl)\n-\ttmp = maybe_constant_value (tmp);\n+\ttmp = cxx_eval_outermost_constant_expr (tmp, true);\n       if (integer_zerop (tmp))\n \treturn potential_constant_expression_1 (TREE_OPERAND (t, 2),\n \t\t\t\t\t\twant_rval, flags);"}]}