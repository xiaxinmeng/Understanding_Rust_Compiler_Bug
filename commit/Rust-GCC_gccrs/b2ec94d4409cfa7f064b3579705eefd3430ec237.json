{"sha": "b2ec94d4409cfa7f064b3579705eefd3430ec237", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjJlYzk0ZDQ0MDljZmE3ZjA2NGIzNTc5NzA1ZWVmZDM0MzBlYzIzNw==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2012-08-03T08:55:43Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-08-03T08:55:43Z"}, "message": "tree-vect-loop-manip.c (vect_can_advance_ivs_p): Query is_gimple_reg on the SSA name, not its variable.\n\n2012-08-03  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-vect-loop-manip.c (vect_can_advance_ivs_p): Query\n\tis_gimple_reg on the SSA name, not its variable.\n\t(vect_update_ivs_after_vectorizer): Likewise.\n\t* tree-ssa-copyrename.c (rename_ssa_copies): Likewise.\n\t* tree-if-conv.c (if_convertible_phi_p): Likewise.\n\t(predicate_scalar_phi): Likewise.\n\t* tree-vect-loop.c (vect_analyze_scalar_cycles_1): Likewise.\n\t(vect_analyze_scalar_cycles_1): Likewise.\n\t* tree-ssa-live.c (register_ssa_partition_check): Likewise.\n\t* tree-outof-ssa.c (eliminate_useless_phis): Likewise.\n\t* tree-ssa-reassoc.c (phi_rank): Likewise.\n\t* tree-parloops.c (separate_decls_in_region_name): Use\n\treplace_ssa_name_symbol.\n\t* tree-predcom.c (base_names_in_chain_on): Likewise.\n\t* matrix-reorg.c (update_type_size): Query the type of the SSA name,\n\tnot its variable.\n\t* gimple-ssa-strength-reduction.c (create_mul_ssa_cand): Likewise.\n\t(create_mul_imm_cand): Likewise.\n\t(create_add_ssa_cand): Likewise.\n\t(create_add_imm_cand): Likewise.\n\t(slsr_process_add): Likewise.\n\t* tree-inline.c (remap_ssa_name): Do not set the type of the\n\tnew SSA_NAME.\n\t* tree-ssa-structalias.c (get_constraint_for_ssa_var): Clarify\n\tassert.  Check for default def first.\n\nFrom-SVN: r190116", "tree": {"sha": "464db285ec9884ff3ce7490e4697b1d1f1925eb3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/464db285ec9884ff3ce7490e4697b1d1f1925eb3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b2ec94d4409cfa7f064b3579705eefd3430ec237", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2ec94d4409cfa7f064b3579705eefd3430ec237", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2ec94d4409cfa7f064b3579705eefd3430ec237", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2ec94d4409cfa7f064b3579705eefd3430ec237/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1b03a96df6de779e0ef83460223ef99a90111c3b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b03a96df6de779e0ef83460223ef99a90111c3b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b03a96df6de779e0ef83460223ef99a90111c3b"}], "stats": {"total": 84, "additions": 55, "deletions": 29}, "files": [{"sha": "12241aa58c7e348450dec2d696cc7eecc7c793dd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2ec94d4409cfa7f064b3579705eefd3430ec237/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2ec94d4409cfa7f064b3579705eefd3430ec237/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b2ec94d4409cfa7f064b3579705eefd3430ec237", "patch": "@@ -1,3 +1,31 @@\n+2012-08-03  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-vect-loop-manip.c (vect_can_advance_ivs_p): Query\n+\tis_gimple_reg on the SSA name, not its variable.\n+\t(vect_update_ivs_after_vectorizer): Likewise.\n+\t* tree-ssa-copyrename.c (rename_ssa_copies): Likewise.\n+\t* tree-if-conv.c (if_convertible_phi_p): Likewise.\n+\t(predicate_scalar_phi): Likewise.\n+\t* tree-vect-loop.c (vect_analyze_scalar_cycles_1): Likewise.\n+\t(vect_analyze_scalar_cycles_1): Likewise.\n+\t* tree-ssa-live.c (register_ssa_partition_check): Likewise.\n+\t* tree-outof-ssa.c (eliminate_useless_phis): Likewise.\n+\t* tree-ssa-reassoc.c (phi_rank): Likewise.\n+\t* tree-parloops.c (separate_decls_in_region_name): Use\n+\treplace_ssa_name_symbol.\n+\t* tree-predcom.c (base_names_in_chain_on): Likewise.\n+\t* matrix-reorg.c (update_type_size): Query the type of the SSA name,\n+\tnot its variable.\n+\t* gimple-ssa-strength-reduction.c (create_mul_ssa_cand): Likewise.\n+\t(create_mul_imm_cand): Likewise.\n+\t(create_add_ssa_cand): Likewise.\n+\t(create_add_imm_cand): Likewise.\n+\t(slsr_process_add): Likewise.\n+\t* tree-inline.c (remap_ssa_name): Do not set the type of the\n+\tnew SSA_NAME.\n+\t* tree-ssa-structalias.c (get_constraint_for_ssa_var): Clarify\n+\tassert.  Check for default def first.\n+\n 2012-08-04  Steven Bosscher  <steven@gcc.gnu.org>\n \n \t* cfgrtl.c (print_rtl_with_bb): Do not print a newline between insns."}, {"sha": "6a46408f0ca4b1de2f82add7917cd6168ab12350", "filename": "gcc/gimple-ssa-strength-reduction.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2ec94d4409cfa7f064b3579705eefd3430ec237/gcc%2Fgimple-ssa-strength-reduction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2ec94d4409cfa7f064b3579705eefd3430ec237/gcc%2Fgimple-ssa-strength-reduction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-strength-reduction.c?ref=b2ec94d4409cfa7f064b3579705eefd3430ec237", "patch": "@@ -656,7 +656,7 @@ create_mul_ssa_cand (gimple gs, tree base_in, tree stride_in, bool speed)\n       base = base_in;\n       index = double_int_zero;\n       stride = stride_in;\n-      ctype = TREE_TYPE (SSA_NAME_VAR (base_in));\n+      ctype = TREE_TYPE (base_in);\n     }\n \n   c = alloc_cand_and_find_basis (CAND_MULT, gs, base, index, stride,\n@@ -744,7 +744,7 @@ create_mul_imm_cand (gimple gs, tree base_in, tree stride_in, bool speed)\n       base = base_in;\n       index = double_int_zero;\n       stride = stride_in;\n-      ctype = TREE_TYPE (SSA_NAME_VAR (base_in));\n+      ctype = TREE_TYPE (base_in);\n     }\n \n   c = alloc_cand_and_find_basis (CAND_MULT, gs, base, index, stride,\n@@ -828,7 +828,7 @@ create_add_ssa_cand (gimple gs, tree base_in, tree addend_in,\n \t  if (subtract_p)\n \t    index = double_int_neg (index);\n \t  stride = addend_cand->base_expr;\n-\t  ctype = TREE_TYPE (SSA_NAME_VAR (base_in));\n+\t  ctype = TREE_TYPE (base_in);\n \t  if (has_single_use (addend_in))\n \t    savings = (addend_cand->dead_savings\n \t\t       + stmt_cost (addend_cand->cand_stmt, speed));\n@@ -877,7 +877,7 @@ create_add_ssa_cand (gimple gs, tree base_in, tree addend_in,\n \t\t  index = tree_to_double_int (subtrahend_cand->stride);\n \t\t  index = double_int_neg (index);\n \t\t  stride = subtrahend_cand->base_expr;\n-\t\t  ctype = TREE_TYPE (SSA_NAME_VAR (base_in));\n+\t\t  ctype = TREE_TYPE (base_in);\n \t\t  if (has_single_use (addend_in))\n \t\t    savings = (subtrahend_cand->dead_savings \n \t\t\t       + stmt_cost (subtrahend_cand->cand_stmt, speed));\n@@ -903,7 +903,7 @@ create_add_ssa_cand (gimple gs, tree base_in, tree addend_in,\n       base = base_in;\n       index = subtract_p ? double_int_minus_one : double_int_one;\n       stride = addend_in;\n-      ctype = TREE_TYPE (SSA_NAME_VAR (base_in));\n+      ctype = TREE_TYPE (base_in);\n     }\n \n   c = alloc_cand_and_find_basis (CAND_ADD, gs, base, index, stride,\n@@ -968,7 +968,7 @@ create_add_imm_cand (gimple gs, tree base_in, double_int index_in, bool speed)\n       base = base_in;\n       index = index_in;\n       stride = integer_one_node;\n-      ctype = TREE_TYPE (SSA_NAME_VAR (base_in));\n+      ctype = TREE_TYPE (base_in);\n     }\n \n   c = alloc_cand_and_find_basis (kind, gs, base, index, stride,\n@@ -990,7 +990,7 @@ slsr_process_add (gimple gs, tree rhs1, tree rhs2, bool speed)\n       /* First record an interpretation assuming RHS1 is the base expression\n \t and RHS2 is the stride.  But it doesn't make sense for the\n \t stride to be a pointer, so don't record a candidate in that case.  */\n-      if (!POINTER_TYPE_P (TREE_TYPE (SSA_NAME_VAR (rhs2))))\n+      if (!POINTER_TYPE_P (TREE_TYPE (rhs2)))\n \t{\n \t  c = create_add_ssa_cand (gs, rhs1, rhs2, subtract_p, speed);\n \n@@ -1007,7 +1007,7 @@ slsr_process_add (gimple gs, tree rhs1, tree rhs2, bool speed)\n       /* Otherwise, record another interpretation assuming RHS2 is the\n \t base expression and RHS1 is the stride, again provided that the\n \t stride is not a pointer.  */\n-      if (!POINTER_TYPE_P (TREE_TYPE (SSA_NAME_VAR (rhs1))))\n+      if (!POINTER_TYPE_P (TREE_TYPE (rhs1)))\n \t{\n \t  c2 = create_add_ssa_cand (gs, rhs2, rhs1, false, speed);\n \t  if (c)"}, {"sha": "6fe561369606ee2309d7773f8d1f09460ebd8233", "filename": "gcc/matrix-reorg.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2ec94d4409cfa7f064b3579705eefd3430ec237/gcc%2Fmatrix-reorg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2ec94d4409cfa7f064b3579705eefd3430ec237/gcc%2Fmatrix-reorg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatrix-reorg.c?ref=b2ec94d4409cfa7f064b3579705eefd3430ec237", "patch": "@@ -976,11 +976,10 @@ update_type_size (struct matrix_info *mi, gimple stmt, tree ssa_var,\n     {\n       lhs = gimple_assign_lhs (stmt);\n       gcc_assert (POINTER_TYPE_P\n-\t\t  (TREE_TYPE (SSA_NAME_VAR (TREE_OPERAND (lhs, 0)))));\n+\t\t  (TREE_TYPE (TREE_OPERAND (lhs, 0))));\n       type_size =\n \tint_size_in_bytes (TREE_TYPE\n-\t\t\t   (TREE_TYPE\n-\t\t\t    (SSA_NAME_VAR (TREE_OPERAND (lhs, 0)))));\n+\t\t\t   (TREE_TYPE (TREE_OPERAND (lhs, 0))));\n     }\n   else\n     type_size = int_size_in_bytes (TREE_TYPE (ssa_var));"}, {"sha": "56d375a3ce3bb9f3f7193f071be48337e31bd4d5", "filename": "gcc/tree-if-conv.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2ec94d4409cfa7f064b3579705eefd3430ec237/gcc%2Ftree-if-conv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2ec94d4409cfa7f064b3579705eefd3430ec237/gcc%2Ftree-if-conv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-if-conv.c?ref=b2ec94d4409cfa7f064b3579705eefd3430ec237", "patch": "@@ -425,7 +425,7 @@ if_convertible_phi_p (struct loop *loop, basic_block bb, gimple phi)\n   /* When the flag_tree_loop_if_convert_stores is not set, check\n      that there are no memory writes in the branches of the loop to be\n      if-converted.  */\n-  if (!is_gimple_reg (SSA_NAME_VAR (gimple_phi_result (phi))))\n+  if (!is_gimple_reg (gimple_phi_result (phi)))\n     {\n       imm_use_iterator imm_iter;\n       use_operand_p use_p;\n@@ -1277,7 +1277,7 @@ predicate_scalar_phi (gimple phi, tree cond,\n \n   res = gimple_phi_result (phi);\n   /* Do not handle virtual phi nodes.  */\n-  if (!is_gimple_reg (SSA_NAME_VAR (res)))\n+  if (!is_gimple_reg (res))\n     return;\n \n   bb = gimple_bb (phi);"}, {"sha": "ae6027b8a80dd04f20460ad1e952d725a26e6db0", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2ec94d4409cfa7f064b3579705eefd3430ec237/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2ec94d4409cfa7f064b3579705eefd3430ec237/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=b2ec94d4409cfa7f064b3579705eefd3430ec237", "patch": "@@ -237,7 +237,6 @@ remap_ssa_name (tree name, copy_body_data *id)\n       insert_decl_map (id, name, new_tree);\n       SSA_NAME_OCCURS_IN_ABNORMAL_PHI (new_tree)\n \t= SSA_NAME_OCCURS_IN_ABNORMAL_PHI (name);\n-      TREE_TYPE (new_tree) = TREE_TYPE (SSA_NAME_VAR (new_tree));\n       /* At least IPA points-to info can be directly transferred.  */\n       if (id->src_cfun->gimple_df\n \t  && id->src_cfun->gimple_df->ipa_pta"}, {"sha": "ceb816d286d6dd722e77737148b32c330e4ff77e", "filename": "gcc/tree-outof-ssa.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2ec94d4409cfa7f064b3579705eefd3430ec237/gcc%2Ftree-outof-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2ec94d4409cfa7f064b3579705eefd3430ec237/gcc%2Ftree-outof-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-outof-ssa.c?ref=b2ec94d4409cfa7f064b3579705eefd3430ec237", "patch": "@@ -762,7 +762,7 @@ eliminate_useless_phis (void)\n         {\n \t  gimple phi = gsi_stmt (gsi);\n \t  result = gimple_phi_result (phi);\n-\t  if (!is_gimple_reg (SSA_NAME_VAR (result)))\n+\t  if (!is_gimple_reg (result))\n \t    {\n #ifdef ENABLE_CHECKING\n \t      size_t i;\n@@ -772,7 +772,7 @@ eliminate_useless_phis (void)\n \t        {\n \t\t  tree arg = PHI_ARG_DEF (phi, i);\n \t\t  if (TREE_CODE (arg) == SSA_NAME\n-\t\t      && is_gimple_reg (SSA_NAME_VAR (arg)))\n+\t\t      && is_gimple_reg (arg))\n \t\t    {\n \t\t      fprintf (stderr, \"Argument of PHI is not virtual (\");\n \t\t      print_generic_expr (stderr, arg, TDF_SLIM);"}, {"sha": "9ccf7dfb3e5b26ed22dc378a4532626efba7346f", "filename": "gcc/tree-parloops.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2ec94d4409cfa7f064b3579705eefd3430ec237/gcc%2Ftree-parloops.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2ec94d4409cfa7f064b3579705eefd3430ec237/gcc%2Ftree-parloops.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-parloops.c?ref=b2ec94d4409cfa7f064b3579705eefd3430ec237", "patch": "@@ -837,7 +837,7 @@ separate_decls_in_region_name (tree name,\n       copy = name;\n     }\n \n-  SSA_NAME_VAR (copy) = var_copy;\n+  replace_ssa_name_symbol (copy, var_copy);\n   return copy;\n }\n "}, {"sha": "1cde8bd9ee0919e6ff8513c246f085d7b126851e", "filename": "gcc/tree-predcom.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2ec94d4409cfa7f064b3579705eefd3430ec237/gcc%2Ftree-predcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2ec94d4409cfa7f064b3579705eefd3430ec237/gcc%2Ftree-predcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-predcom.c?ref=b2ec94d4409cfa7f064b3579705eefd3430ec237", "patch": "@@ -1862,7 +1862,7 @@ base_names_in_chain_on (struct loop *loop, tree name, tree var)\n   gimple stmt, phi;\n   imm_use_iterator iter;\n \n-  SSA_NAME_VAR (name) = var;\n+  replace_ssa_name_symbol (name, var);\n \n   while (1)\n     {\n@@ -1880,7 +1880,7 @@ base_names_in_chain_on (struct loop *loop, tree name, tree var)\n \treturn;\n \n       name = PHI_RESULT (phi);\n-      SSA_NAME_VAR (name) = var;\n+      replace_ssa_name_symbol (name, var);\n     }\n }\n "}, {"sha": "e02d729803171e29e5f449d4b56c1abc64ee8e73", "filename": "gcc/tree-ssa-copyrename.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2ec94d4409cfa7f064b3579705eefd3430ec237/gcc%2Ftree-ssa-copyrename.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2ec94d4409cfa7f064b3579705eefd3430ec237/gcc%2Ftree-ssa-copyrename.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-copyrename.c?ref=b2ec94d4409cfa7f064b3579705eefd3430ec237", "patch": "@@ -332,7 +332,7 @@ rename_ssa_copies (void)\n \t  res = gimple_phi_result (phi);\n \n \t  /* Do not process virtual SSA_NAMES.  */\n-\t  if (!is_gimple_reg (SSA_NAME_VAR (res)))\n+\t  if (!is_gimple_reg (res))\n \t    continue;\n \n           for (i = 0; i < gimple_phi_num_args (phi); i++)"}, {"sha": "869269603d83b41c8af7cfe7373ac3c45cae71f7", "filename": "gcc/tree-ssa-live.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2ec94d4409cfa7f064b3579705eefd3430ec237/gcc%2Ftree-ssa-live.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2ec94d4409cfa7f064b3579705eefd3430ec237/gcc%2Ftree-ssa-live.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-live.c?ref=b2ec94d4409cfa7f064b3579705eefd3430ec237", "patch": "@@ -1199,7 +1199,7 @@ void\n register_ssa_partition_check (tree ssa_var)\n {\n   gcc_assert (TREE_CODE (ssa_var) == SSA_NAME);\n-  if (!is_gimple_reg (SSA_NAME_VAR (ssa_var)))\n+  if (!is_gimple_reg (ssa_var))\n     {\n       fprintf (stderr, \"Illegally registering a virtual SSA name :\");\n       print_generic_expr (stderr, ssa_var, TDF_SLIM);"}, {"sha": "5b301f6df8ba7d495d7442eb4d8079ddaf857808", "filename": "gcc/tree-ssa-reassoc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2ec94d4409cfa7f064b3579705eefd3430ec237/gcc%2Ftree-ssa-reassoc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2ec94d4409cfa7f064b3579705eefd3430ec237/gcc%2Ftree-ssa-reassoc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-reassoc.c?ref=b2ec94d4409cfa7f064b3579705eefd3430ec237", "patch": "@@ -234,7 +234,7 @@ phi_rank (gimple stmt)\n \n   /* Ignore virtual SSA_NAMEs.  */\n   res = gimple_phi_result (stmt);\n-  if (!is_gimple_reg (SSA_NAME_VAR (res)))\n+  if (!is_gimple_reg (res))\n     return bb_rank[bb->index];\n \n   /* The phi definition must have a single use, and that use must be"}, {"sha": "060ca8aa1abecac76dc5ccdd818fc7670105fa8d", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2ec94d4409cfa7f064b3579705eefd3430ec237/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2ec94d4409cfa7f064b3579705eefd3430ec237/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=b2ec94d4409cfa7f064b3579705eefd3430ec237", "patch": "@@ -2736,14 +2736,14 @@ get_constraint_for_ssa_var (tree t, VEC(ce_s, heap) **results, bool address_p)\n   varinfo_t vi;\n \n   /* We allow FUNCTION_DECLs here even though it doesn't make much sense.  */\n-  gcc_assert (SSA_VAR_P (t) || DECL_P (t));\n+  gcc_assert (TREE_CODE (t) == SSA_NAME || DECL_P (t));\n \n   /* For parameters, get at the points-to set for the actual parm\n      decl.  */\n   if (TREE_CODE (t) == SSA_NAME\n+      && SSA_NAME_IS_DEFAULT_DEF (t)\n       && (TREE_CODE (SSA_NAME_VAR (t)) == PARM_DECL\n-\t  || TREE_CODE (SSA_NAME_VAR (t)) == RESULT_DECL)\n-      && SSA_NAME_IS_DEFAULT_DEF (t))\n+\t  || TREE_CODE (SSA_NAME_VAR (t)) == RESULT_DECL))\n     {\n       get_constraint_for_ssa_var (SSA_NAME_VAR (t), results, address_p);\n       return;"}, {"sha": "65d939d0ffd5502c9acdfc3760ad9e3465742468", "filename": "gcc/tree-vect-loop-manip.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2ec94d4409cfa7f064b3579705eefd3430ec237/gcc%2Ftree-vect-loop-manip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2ec94d4409cfa7f064b3579705eefd3430ec237/gcc%2Ftree-vect-loop-manip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop-manip.c?ref=b2ec94d4409cfa7f064b3579705eefd3430ec237", "patch": "@@ -1658,7 +1658,7 @@ vect_can_advance_ivs_p (loop_vec_info loop_vinfo)\n       /* Skip virtual phi's. The data dependences that are associated with\n          virtual defs/uses (i.e., memory accesses) are analyzed elsewhere.  */\n \n-      if (!is_gimple_reg (SSA_NAME_VAR (PHI_RESULT (phi))))\n+      if (!is_gimple_reg (PHI_RESULT (phi)))\n \t{\n \t  if (vect_print_dump_info (REPORT_DETAILS))\n \t    fprintf (vect_dump, \"virtual phi. skip.\");\n@@ -1788,7 +1788,7 @@ vect_update_ivs_after_vectorizer (loop_vec_info loop_vinfo, tree niters,\n         }\n \n       /* Skip virtual phi's.  */\n-      if (!is_gimple_reg (SSA_NAME_VAR (PHI_RESULT (phi))))\n+      if (!is_gimple_reg (PHI_RESULT (phi)))\n \t{\n \t  if (vect_print_dump_info (REPORT_DETAILS))\n \t    fprintf (vect_dump, \"virtual phi. skip.\");"}, {"sha": "cd8c3afb1c7618afd1a142680ca24c8c77cd14b8", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2ec94d4409cfa7f064b3579705eefd3430ec237/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2ec94d4409cfa7f064b3579705eefd3430ec237/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=b2ec94d4409cfa7f064b3579705eefd3430ec237", "patch": "@@ -555,7 +555,7 @@ vect_analyze_scalar_cycles_1 (loop_vec_info loop_vinfo, struct loop *loop)\n \n       /* Skip virtual phi's.  The data dependences that are associated with\n          virtual defs/uses (i.e., memory accesses) are analyzed elsewhere.  */\n-      if (!is_gimple_reg (SSA_NAME_VAR (def)))\n+      if (!is_gimple_reg (def))\n \tcontinue;\n \n       STMT_VINFO_DEF_TYPE (stmt_vinfo) = vect_unknown_def_type;\n@@ -604,7 +604,7 @@ vect_analyze_scalar_cycles_1 (loop_vec_info loop_vinfo, struct loop *loop)\n           print_gimple_stmt (vect_dump, phi, 0, TDF_SLIM);\n         }\n \n-      gcc_assert (is_gimple_reg (SSA_NAME_VAR (def)));\n+      gcc_assert (is_gimple_reg (def));\n       gcc_assert (STMT_VINFO_DEF_TYPE (stmt_vinfo) == vect_unknown_def_type);\n \n       nested_cycle = (loop != LOOP_VINFO_LOOP (loop_vinfo));"}]}