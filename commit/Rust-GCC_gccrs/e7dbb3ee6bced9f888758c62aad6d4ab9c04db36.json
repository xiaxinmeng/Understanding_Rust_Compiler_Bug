{"sha": "e7dbb3ee6bced9f888758c62aad6d4ab9c04db36", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTdkYmIzZWU2YmNlZDlmODg4NzU4YzYyYWFkNmQ0YWI5YzA0ZGIzNg==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2005-10-02T10:20:16Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2005-10-02T10:20:16Z"}, "message": "re PR libstdc++/24054 (std::tr1::unordered_map's erase does not seem to return a value)\n\n2005-10-02  Paolo Carlini  <pcarlini@suse.de>\n\n\tPR libstdc++/24054\n\t* include/tr1/hashtable (erase(const key_type&)): Return the\n\tnumber of elements erased.\n\t* testsuite/tr1/6_containers/unordered/hashtable/24054.cc: New.\n\nFrom-SVN: r104867", "tree": {"sha": "549088803bbd5165bcd66b3c90f7d13373684086", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/549088803bbd5165bcd66b3c90f7d13373684086"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e7dbb3ee6bced9f888758c62aad6d4ab9c04db36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7dbb3ee6bced9f888758c62aad6d4ab9c04db36", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7dbb3ee6bced9f888758c62aad6d4ab9c04db36", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7dbb3ee6bced9f888758c62aad6d4ab9c04db36/comments", "author": null, "committer": null, "parents": [{"sha": "746077ffa54f6b711bd93aba1653519c12d5fbcf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/746077ffa54f6b711bd93aba1653519c12d5fbcf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/746077ffa54f6b711bd93aba1653519c12d5fbcf"}], "stats": {"total": 64, "additions": 64, "deletions": 0}, "files": [{"sha": "789c85c5c10529970d58421d1d4409db2f5acde4", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7dbb3ee6bced9f888758c62aad6d4ab9c04db36/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7dbb3ee6bced9f888758c62aad6d4ab9c04db36/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e7dbb3ee6bced9f888758c62aad6d4ab9c04db36", "patch": "@@ -1,3 +1,10 @@\n+2005-10-02  Paolo Carlini  <pcarlini@suse.de>\n+\n+\tPR libstdc++/24054\n+\t* include/tr1/hashtable (erase(const key_type&)): Return the\n+\tnumber of elements erased.\n+\t* testsuite/tr1/6_containers/unordered/hashtable/24054.cc: New.\n+\n 2005-10-01  Kenny Simpson  <theonetruekenny@yahoo.com>\n \n \t* include/tr1/tuple_iterate.h (tuple::operator=(const std::pair<>&)):"}, {"sha": "f5f1e299816ecca79d1484d336463ed93d805f34", "filename": "libstdc++-v3/include/tr1/hashtable", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7dbb3ee6bced9f888758c62aad6d4ab9c04db36/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fhashtable", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7dbb3ee6bced9f888758c62aad6d4ab9c04db36/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fhashtable", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fhashtable?ref=e7dbb3ee6bced9f888758c62aad6d4ab9c04db36", "patch": "@@ -1628,6 +1628,7 @@ namespace tr1\n     {\n       typename hashtable::hash_code_t code = this->m_hash_code (k);\n       size_type n = this->bucket_index(k, code, m_bucket_count);\n+      size_type result = 0;\n       \n       node** slot = m_buckets + n;\n       while (*slot && ! this->compare (k, code, *slot))\n@@ -1639,7 +1640,10 @@ namespace tr1\n \t  *slot = n->m_next;\n \t  m_deallocate_node (n);\n \t  --m_element_count;\n+\t  ++result;\n \t}\n+\n+      return result;\n     }\n \n   // ??? This could be optimized by taking advantage of the bucket"}, {"sha": "073d2407512b1aef87d916c5806ac124bd161bfc", "filename": "libstdc++-v3/testsuite/tr1/6_containers/unordered/hashtable/24054.cc", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7dbb3ee6bced9f888758c62aad6d4ab9c04db36/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered%2Fhashtable%2F24054.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7dbb3ee6bced9f888758c62aad6d4ab9c04db36/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered%2Fhashtable%2F24054.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered%2Fhashtable%2F24054.cc?ref=e7dbb3ee6bced9f888758c62aad6d4ab9c04db36", "patch": "@@ -0,0 +1,53 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 6.3 Unordered associative containers\n+\n+#include <tr1/unordered_set>\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/24054\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  typedef std::tr1::unordered_multiset<std::string> Set;\n+\n+  Set s;\n+\n+  s.insert(\"etaoin\");\n+  s.insert(\"etaoin\");\n+  s.insert(\"etaoin\");\n+  s.insert(\"shrdlu\");\n+\n+  VERIFY( s.erase(\"\") == 0 );\n+  VERIFY( s.size() == 4 );\n+\n+  VERIFY( s.erase(\"etaoin\") == 3 );\n+  VERIFY( s.size() == 1 );\n+\n+  VERIFY( s.erase(\"shrdlu\") == 1 );\n+  VERIFY( s.size() == 0 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}