{"sha": "d480455f2ddc3b89d8547969be9cda939c41da56", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDQ4MDQ1NWYyZGRjM2I4OWQ4NTQ3OTY5YmU5Y2RhOTM5YzQxZGE1Ng==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-06-10T20:35:14Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-06-10T20:35:14Z"}, "message": "compiler: use gcWriteBarrier for pointer-shaped struct/array\n    \n    If a struct/array is pointer-shaped (i.e. having a single field\n    that is pointer-shaped), we can use gcWriteBarrier instead of\n    typedmemmove for the write barrier.\n    \n    Reviewed-on: https://go-review.googlesource.com/c/gofrontend/+/181539\n\nFrom-SVN: r272130", "tree": {"sha": "54d7572f8541793e7012b5446173670e5bea65f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/54d7572f8541793e7012b5446173670e5bea65f3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d480455f2ddc3b89d8547969be9cda939c41da56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d480455f2ddc3b89d8547969be9cda939c41da56", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d480455f2ddc3b89d8547969be9cda939c41da56", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d480455f2ddc3b89d8547969be9cda939c41da56/comments", "author": null, "committer": null, "parents": [{"sha": "fa237d91e8cb88c7d228f0888ef5c1f3e8ad6d4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa237d91e8cb88c7d228f0888ef5c1f3e8ad6d4a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa237d91e8cb88c7d228f0888ef5c1f3e8ad6d4a"}], "stats": {"total": 25, "additions": 16, "deletions": 9}, "files": [{"sha": "05959f2c55a2a0645529a756a2ed4a59c3e289bd", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d480455f2ddc3b89d8547969be9cda939c41da56/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d480455f2ddc3b89d8547969be9cda939c41da56/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=d480455f2ddc3b89d8547969be9cda939c41da56", "patch": "@@ -1,4 +1,4 @@\n-a32739aadf0c7a65fcd5d5b6d0a0d206bff24a4f\n+3f7dcb98df3ce1d4e02d0072fd21e70dc08351db\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "c1d54e6cb4c0a46cc248ff42b771d72545809585", "filename": "gcc/go/gofrontend/wb.cc", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d480455f2ddc3b89d8547969be9cda939c41da56/gcc%2Fgo%2Fgofrontend%2Fwb.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d480455f2ddc3b89d8547969be9cda939c41da56/gcc%2Fgo%2Fgofrontend%2Fwb.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fwb.cc?ref=d480455f2ddc3b89d8547969be9cda939c41da56", "patch": "@@ -955,14 +955,21 @@ Gogo::assign_with_write_barrier(Function* function, Block* enclosing,\n       // fallthrough\n \n     case Type::TYPE_STRUCT:\n-      {\n-        // TODO: split assignments for small struct/array?\n-\trhs = Expression::make_unary(OPERATOR_AND, rhs, loc);\n-\trhs->unary_expression()->set_does_not_escape();\n-\tcall = Runtime::make_call(Runtime::TYPEDMEMMOVE, loc, 3,\n-\t\t\t\t  Expression::make_type_descriptor(type, loc),\n-\t\t\t\t  lhs, rhs);\n-      }\n+      if (type->is_direct_iface_type())\n+        {\n+          rhs = Expression::unpack_direct_iface(rhs, loc);\n+          rhs = Expression::make_unsafe_cast(uintptr_type, rhs, loc);\n+          call = Runtime::make_call(Runtime::GCWRITEBARRIER, loc, 2, lhs, rhs);\n+        }\n+      else\n+        {\n+          // TODO: split assignments for small struct/array?\n+          rhs = Expression::make_unary(OPERATOR_AND, rhs, loc);\n+          rhs->unary_expression()->set_does_not_escape();\n+          call = Runtime::make_call(Runtime::TYPEDMEMMOVE, loc, 3,\n+                                    Expression::make_type_descriptor(type, loc),\n+                                    lhs, rhs);\n+        }\n       break;\n     }\n "}]}