{"sha": "e742722f76c70be303248da7ca4842198d4fd1cc", "node_id": "C_kwDOANBUbNoAKGU3NDI3MjJmNzZjNzBiZTMwMzI0OGRhN2NhNDg0MjE5OGQ0ZmQxY2M", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2021-12-18T13:47:52Z"}, "committer": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2021-12-18T13:47:52Z"}, "message": "PR target/32803: Add -Oz option for improved clang compatibility.\n\nThis patch adds support for an -Oz command line option, aggressively\noptimizing for size at the expense of performance.  GCC's current -Os\nprovides a reasonable balance of size and performance, whereas -Oz is\nprobably only useful for code size benchmarks such as CSiBE.  Or so I\nthought until I read in https://news.ycombinator.com/item?id=25408853\nthat clang's -Oz sometimes outperforms -O[23s]; I suspect modern instruction\ndecode stages can treat \"pushq $1; popq %rax\" as a short uop encoding.\n\nInstead of introducing a new global variable, this patch simply abuses\nthe existing optimize_size by setting its value to 2.  The only change\nin behaviour is the tweak to the i386 backend implementing the suggestion\nin PR target/32803 to use a short push/pop sequence for loading small\nimmediate values (-128..127) on x86, matching the behaviour of LLVM.\n\nOn x86_64, the simple function:\nint foo() { return 25; }\n\ncurrently generates with -Os:\nfoo:    movl    $25, %eax       // 5 bytes\n        ret\n\nWith the proposed -Oz, it generates:\nfoo:    pushq   $25             // 2 bytes\n        popq    %rax            // 1 byte\n        ret\n\nOn CSiBE, this results in a 0.94% improvement (3703513 bytes total\ndown to 3668516 bytes).\n\n2021-12-18  Roger Sayle  <roger@nextmovesoftware.com>\n\ngcc/ChangeLog\n\tPR target/32803\n\t* common.opt (Oz): New command line option.\n\t* doc/invoke.texi: Document the new -Oz option.\n\t* lto-wrapper.c (merge_and_complain, append_compiler_options):\n\tTreat OPT_Oz as synonymous with OPT_Os.\n\t* optc-save-gen.awk: Increase maximum value of optimize_size to 2.\n\t* opts.c (default_options_optimization) [OPT_Oz]: Handle OPT_Oz\n\tjust like OPT_Os, except set opt->x_optimize_size to 2.\n\t(common_handle_option): Skip OPT_Oz just like OPT_Os.\n\n\t* config/i386/i386.md (*movdi_internal): Use a push/pop sequence\n\tfor suitable SImode TYPE_IMOV moves when optimize_size > 1.\n\t(*movsi_internal): Likewise.\n\ngcc/testsuite/ChangeLog\n\tPR target/32803\n\t* gcc.target/i386/pr32803.c: New test case.", "tree": {"sha": "caf44d6eb01f547b4cb58c4d158ddc475bfe4971", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/caf44d6eb01f547b4cb58c4d158ddc475bfe4971"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e742722f76c70be303248da7ca4842198d4fd1cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e742722f76c70be303248da7ca4842198d4fd1cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e742722f76c70be303248da7ca4842198d4fd1cc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e742722f76c70be303248da7ca4842198d4fd1cc/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc032ec1ecb34b006f42e170ccb9d76aa42fd8eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc032ec1ecb34b006f42e170ccb9d76aa42fd8eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc032ec1ecb34b006f42e170ccb9d76aa42fd8eb"}], "stats": {"total": 59, "additions": 55, "deletions": 4}, "files": [{"sha": "2ed818d6057de6081f613e90e91e579f832c9544", "filename": "gcc/common.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e742722f76c70be303248da7ca4842198d4fd1cc/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e742722f76c70be303248da7ca4842198d4fd1cc/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=e742722f76c70be303248da7ca4842198d4fd1cc", "patch": "@@ -483,6 +483,10 @@ Og\n Common Optimization\n Optimize for debugging experience rather than speed or size.\n \n+Oz\n+Common Optimization\n+Optimize for space aggressively rather than speed.\n+\n Q\n Driver\n "}, {"sha": "862d933465b806829d7500d9a80666c8b4a73e9d", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e742722f76c70be303248da7ca4842198d4fd1cc/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e742722f76c70be303248da7ca4842198d4fd1cc/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=e742722f76c70be303248da7ca4842198d4fd1cc", "patch": "@@ -2213,7 +2213,14 @@\n     case TYPE_IMOV:\n       gcc_assert (!flag_pic || LEGITIMATE_PIC_OPERAND_P (operands[1]));\n       if (get_attr_mode (insn) == MODE_SI)\n-\treturn \"mov{l}\\t{%k1, %k0|%k0, %k1}\";\n+\t{\n+\t  if (optimize_size > 1\n+\t      && TARGET_64BIT\n+\t      && CONST_INT_P (operands[1])\n+\t      && IN_RANGE (INTVAL (operands[1]), -128, 127))\n+\t    return \"push{q}\\t%1\\n\\tpop{q}\\t%0\";\n+\t  return \"mov{l}\\t{%k1, %k0|%k0, %k1}\";\n+\t}\n       else if (which_alternative == 4)\n \treturn \"movabs{q}\\t{%1, %0|%0, %1}\";\n       else if (ix86_use_lea_for_mov (insn, operands))\n@@ -2431,6 +2438,14 @@\n       gcc_assert (!flag_pic || LEGITIMATE_PIC_OPERAND_P (operands[1]));\n       if (ix86_use_lea_for_mov (insn, operands))\n \treturn \"lea{l}\\t{%E1, %0|%0, %E1}\";\n+      else if (optimize_size > 1\n+\t       && CONST_INT_P (operands[1])\n+\t       && IN_RANGE (INTVAL (operands[1]), -128, 127))\n+\t{\n+\t  if (TARGET_64BIT)\n+\t    return \"push{q}\\t%1\\n\\tpop{q}\\t%q0\";\n+\t  return \"push{l}\\t%1\\n\\tpop{l}\\t%0\";\n+\t}\n       else\n \treturn \"mov{l}\\t{%1, %0|%0, %1}\";\n "}, {"sha": "ca621577432cf9117a44e97693ff16ca034d1f91", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e742722f76c70be303248da7ca4842198d4fd1cc/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e742722f76c70be303248da7ca4842198d4fd1cc/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=e742722f76c70be303248da7ca4842198d4fd1cc", "patch": "@@ -588,7 +588,7 @@ Objective-C and Objective-C++ Dialects}.\n -fipa-ra  -fvariable-expansion-in-unroller  -fvect-cost-model  -fvpt @gol\n -fweb  -fwhole-program  -fwpa  -fuse-linker-plugin -fzero-call-used-regs @gol\n --param @var{name}=@var{value}\n--O  -O0  -O1  -O2  -O3  -Os  -Ofast  -Og}\n+-O  -O0  -O1  -O2  -O3  -Os  -Ofast  -Og  -Oz}\n \n @item Program Instrumentation Options\n @xref{Instrumentation Options,,Program Instrumentation Options}.\n@@ -10734,6 +10734,13 @@ optimization flags except for those that may interfere with debugging:\n -fmove-loop-invariants  -fmove-loop-stores  -fssa-phiopt @gol\n -ftree-bit-ccp  -ftree-dse  -ftree-pta  -ftree-sra}\n \n+@item -Oz\n+@opindex Oz\n+Optimize aggressively for size rather than speed.  This may increase\n+the number of instructions executed if those instructions require\n+fewer bytes to encode.  @option{-Oz} behaves similarly to @option{-Os}\n+including enabling most @option{-O2} optimizations.\n+\n @end table\n \n If you use multiple @option{-O} options, with or without level numbers,"}, {"sha": "7d2b7e56ded11d58eea56e8ed45d7154b136b996", "filename": "gcc/lto-wrapper.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e742722f76c70be303248da7ca4842198d4fd1cc/gcc%2Flto-wrapper.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e742722f76c70be303248da7ca4842198d4fd1cc/gcc%2Flto-wrapper.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-wrapper.c?ref=e742722f76c70be303248da7ca4842198d4fd1cc", "patch": "@@ -370,12 +370,14 @@ merge_and_complain (vec<cl_decoded_option> &decoded_options,\n \tcase OPT_Ofast:\n \tcase OPT_Og:\n \tcase OPT_Os:\n+\tcase OPT_Oz:\n \t  existing_opt = -1;\n \t  for (j = 0; j < decoded_options.length (); ++j)\n \t    if (decoded_options[j].opt_index == OPT_O\n \t\t|| decoded_options[j].opt_index == OPT_Ofast\n \t\t|| decoded_options[j].opt_index == OPT_Og\n-\t\t|| decoded_options[j].opt_index == OPT_Os)\n+\t\t|| decoded_options[j].opt_index == OPT_Os\n+\t\t|| decoded_options[j].opt_index == OPT_Oz)\n \t      {\n \t\texisting_opt = j;\n \t\tbreak;\n@@ -407,6 +409,7 @@ merge_and_complain (vec<cl_decoded_option> &decoded_options,\n \t\t  level = MAX (level, 1);\n \t\t  break;\n \t\tcase OPT_Os:\n+\t\tcase OPT_Oz:\n \t\t  level = MAX (level, 2);\n \t\t  break;\n \t\tdefault:\n@@ -428,6 +431,7 @@ merge_and_complain (vec<cl_decoded_option> &decoded_options,\n \t\t  level = MAX (level, 1);\n \t\t  break;\n \t\tcase OPT_Os:\n+\t\tcase OPT_Oz:\n \t\t  level = MAX (level, 2);\n \t\t  break;\n \t\tdefault:\n@@ -725,6 +729,7 @@ append_compiler_options (obstack *argv_obstack, vec<cl_decoded_option> opts)\n \tcase OPT_Ofast:\n \tcase OPT_Og:\n \tcase OPT_Os:\n+\tcase OPT_Oz:\n \t  break;\n \n \tcase OPT_Xassembler:"}, {"sha": "81c2db03f63be59ab84d29c75d68f6a2c460db51", "filename": "gcc/optc-save-gen.awk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e742722f76c70be303248da7ca4842198d4fd1cc/gcc%2Foptc-save-gen.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e742722f76c70be303248da7ca4842198d4fd1cc/gcc%2Foptc-save-gen.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptc-save-gen.awk?ref=e742722f76c70be303248da7ca4842198d4fd1cc", "patch": "@@ -93,7 +93,7 @@ var_opt_char[1] = \"optimize_size\";\n var_opt_char[2] = \"optimize_debug\";\n var_opt_char[3] = \"optimize_fast\";\n var_opt_range[\"optimize\"] = \"0, 255\";\n-var_opt_range[\"optimize_size\"] = \"0, 1\";\n+var_opt_range[\"optimize_size\"] = \"0, 2\";\n var_opt_range[\"optimize_debug\"] = \"0, 1\";\n var_opt_range[\"optimize_fast\"] = \"0, 1\";\n "}, {"sha": "f45ecc5672603236dc3db497f31fdfc06e22d9cc", "filename": "gcc/opts.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e742722f76c70be303248da7ca4842198d4fd1cc/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e742722f76c70be303248da7ca4842198d4fd1cc/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=e742722f76c70be303248da7ca4842198d4fd1cc", "patch": "@@ -745,6 +745,15 @@ default_options_optimization (struct gcc_options *opts,\n \t  opts->x_optimize_debug = 0;\n \t  break;\n \n+\tcase OPT_Oz:\n+\t  opts->x_optimize_size = 2;\n+\n+\t  /* Optimizing for size forces optimize to be 2.  */\n+\t  opts->x_optimize = 2;\n+\t  opts->x_optimize_fast = 0;\n+\t  opts->x_optimize_debug = 0;\n+\t  break;\n+\n \tcase OPT_Ofast:\n \t  /* -Ofast only adds flags to -O3.  */\n \t  opts->x_optimize_size = 0;\n@@ -2609,6 +2618,7 @@ common_handle_option (struct gcc_options *opts,\n     case OPT_Os:\n     case OPT_Ofast:\n     case OPT_Og:\n+    case OPT_Oz:\n       /* Currently handled in a prescan.  */\n       break;\n "}, {"sha": "f26f07a3b292f6a40caa3b5f54533bc5f4c93ea5", "filename": "gcc/testsuite/gcc.target/i386/pr32803.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e742722f76c70be303248da7ca4842198d4fd1cc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr32803.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e742722f76c70be303248da7ca4842198d4fd1cc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr32803.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr32803.c?ref=e742722f76c70be303248da7ca4842198d4fd1cc", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Oz\" } */\n+\n+int foo()\n+{\n+  return 25;\n+}\n+\n+/* { dg-final { scan-assembler \"push\" } } */\n+/* { dg-final { scan-assembler \"pop\" } } */"}]}