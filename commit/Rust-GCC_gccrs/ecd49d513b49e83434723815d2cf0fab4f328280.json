{"sha": "ecd49d513b49e83434723815d2cf0fab4f328280", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWNkNDlkNTEzYjQ5ZTgzNDM0NzIzODE1ZDJjZjBmYWI0ZjMyODI4MA==", "commit": {"author": {"name": "Olivier Hainque", "email": "hainque@adacore.com", "date": "2012-06-28T07:56:40Z"}, "committer": {"name": "Olivier Hainque", "email": "hainque@gcc.gnu.org", "date": "2012-06-28T07:56:40Z"}, "message": "expr.c (convert_move): Latch mem integer inputs into a register before expanding a multi-instructions...\n\n        * expr.c (convert_move): Latch mem integer inputs into a\n        register before expanding a multi-instructions sequence.\n\nFrom-SVN: r189040", "tree": {"sha": "46944d76395ac668b80f580398d3ed5da26fd2fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/46944d76395ac668b80f580398d3ed5da26fd2fe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ecd49d513b49e83434723815d2cf0fab4f328280", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecd49d513b49e83434723815d2cf0fab4f328280", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ecd49d513b49e83434723815d2cf0fab4f328280", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecd49d513b49e83434723815d2cf0fab4f328280/comments", "author": {"login": "hainque", "id": 18735142, "node_id": "MDQ6VXNlcjE4NzM1MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/18735142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hainque", "html_url": "https://github.com/hainque", "followers_url": "https://api.github.com/users/hainque/followers", "following_url": "https://api.github.com/users/hainque/following{/other_user}", "gists_url": "https://api.github.com/users/hainque/gists{/gist_id}", "starred_url": "https://api.github.com/users/hainque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hainque/subscriptions", "organizations_url": "https://api.github.com/users/hainque/orgs", "repos_url": "https://api.github.com/users/hainque/repos", "events_url": "https://api.github.com/users/hainque/events{/privacy}", "received_events_url": "https://api.github.com/users/hainque/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e07b233d2e7b2add3e3ca6564ad4f8295e8a8cb6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e07b233d2e7b2add3e3ca6564ad4f8295e8a8cb6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e07b233d2e7b2add3e3ca6564ad4f8295e8a8cb6"}], "stats": {"total": 14, "additions": 11, "deletions": 3}, "files": [{"sha": "213cca11de58884d3c127edc99881cbd8553ea0a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecd49d513b49e83434723815d2cf0fab4f328280/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecd49d513b49e83434723815d2cf0fab4f328280/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ecd49d513b49e83434723815d2cf0fab4f328280", "patch": "@@ -1,3 +1,8 @@\n+2012-06-28  OLivier Hainque  <hainque@adacore.com>\n+\n+\t* expr.c (convert_move): Latch mem integer inputs into a\n+\tregister before expanding a multi-instructions sequence.\n+\n 2012-06-28  Alexandre Oliva  <aoliva@redhat.com>,\n             Uros Bizjak  <ubizjak@gmail.com>,\n             Jakub Jelinek  <jakub@redhat.com>"}, {"sha": "0d26442b500b4c8f1a423e3cde023ecf83bc6d5a", "filename": "gcc/expr.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecd49d513b49e83434723815d2cf0fab4f328280/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecd49d513b49e83434723815d2cf0fab4f328280/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=ecd49d513b49e83434723815d2cf0fab4f328280", "patch": "@@ -520,10 +520,13 @@ convert_move (rtx to, rtx from, int unsignedp)\n       /* No special multiword conversion insn; do it by hand.  */\n       start_sequence ();\n \n-      /* Since we will turn this into a no conflict block, we must ensure\n-\t that the source does not overlap the target.  */\n+      /* Since we will turn this into a no conflict block, we must ensure the\n+         the source does not overlap the target so force it into an isolated\n+         register when maybe so.  Likewise for any MEM input, since the\n+         conversion sequence might require several references to it and we\n+         must ensure we're getting the same value every time.  */\n \n-      if (reg_overlap_mentioned_p (to, from))\n+      if (MEM_P (from) || reg_overlap_mentioned_p (to, from))\n \tfrom = force_reg (from_mode, from);\n \n       /* Get a copy of FROM widened to a word, if necessary.  */"}]}