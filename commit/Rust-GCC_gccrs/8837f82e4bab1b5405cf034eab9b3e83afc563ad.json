{"sha": "8837f82e4bab1b5405cf034eab9b3e83afc563ad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODgzN2Y4MmU0YmFiMWI1NDA1Y2YwMzRlYWI5YjNlODNhZmM1NjNhZA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-01-04T08:53:11Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-01-04T09:47:43Z"}, "message": "tree-optimization/98291 - allow SLP more vectorization of reductions\n\nWhen the VF is one a SLP reduction is in-order and thus we can\nvectorize even when the reduction op is not associative.\n\n2021-01-04  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/98291\n\t* tree-vect-loop.c (vectorizable_reduction): Bypass\n\tassociativity check for SLP reductions with VF 1.\n\n\t* gcc.dg/vect/slp-reduc-11.c: New testcase.\n\t* gcc.dg/vect/vect-reduc-in-order-4.c: Adjust.", "tree": {"sha": "aaf2a349e092221769a6a891d3d398f3f1dd73a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aaf2a349e092221769a6a891d3d398f3f1dd73a5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8837f82e4bab1b5405cf034eab9b3e83afc563ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8837f82e4bab1b5405cf034eab9b3e83afc563ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8837f82e4bab1b5405cf034eab9b3e83afc563ad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8837f82e4bab1b5405cf034eab9b3e83afc563ad/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad64e807ffca93e927b68f1aa0cea54dacbe9afd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad64e807ffca93e927b68f1aa0cea54dacbe9afd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad64e807ffca93e927b68f1aa0cea54dacbe9afd"}], "stats": {"total": 32, "additions": 28, "deletions": 4}, "files": [{"sha": "a2f86fb8d660721da80d761e759a52d8777e0eb2", "filename": "gcc/testsuite/gcc.dg/vect/slp-reduc-11.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8837f82e4bab1b5405cf034eab9b3e83afc563ad/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-reduc-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8837f82e4bab1b5405cf034eab9b3e83afc563ad/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-reduc-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-reduc-11.c?ref=8837f82e4bab1b5405cf034eab9b3e83afc563ad", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target vect_double } */\n+\n+double dotprod(const double *a, const double *b, unsigned long long n)\n+{\n+  double d1 = 0.0;\n+  double d2 = 0.0;\n+\n+  for (unsigned long long i = 0; i < n; i += 2) {\n+    d1 += a[i] * b[i];\n+    d2 += a[i + 1] * b[i + 1];\n+  }\n+\n+  return (d1 + d2);\n+}\n+\n+/* We should use a SLP reduction even without -ffast-math by using a\n+   VF of one.  */\n+/* { dg-final { scan-tree-dump \"vectorizing stmts using SLP\" \"vect\" } } */\n+/* { dg-final { scan-tree-dump \"vectorized 1 loops\" \"vect\" } } */"}, {"sha": "eff3994a3352ba727e79a66ae969ca0c8c89ec7a", "filename": "gcc/testsuite/gcc.dg/vect/vect-reduc-in-order-4.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8837f82e4bab1b5405cf034eab9b3e83afc563ad/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-in-order-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8837f82e4bab1b5405cf034eab9b3e83afc563ad/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-in-order-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-in-order-4.c?ref=8837f82e4bab1b5405cf034eab9b3e83afc563ad", "patch": "@@ -41,6 +41,4 @@ main ()\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump {in-order unchained SLP reductions not supported} \"vect\" } } */\n-/* { dg-final { scan-tree-dump-not {vectorizing stmts using SLP} \"vect\" } } */\n /* { dg-final { scan-tree-dump-times \"VECT_PERM_EXPR\" 0 \"vect\" } } */"}, {"sha": "2985bfe89d6ef5e8205daffea735a808480b2b01", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8837f82e4bab1b5405cf034eab9b3e83afc563ad/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8837f82e4bab1b5405cf034eab9b3e83afc563ad/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=8837f82e4bab1b5405cf034eab9b3e83afc563ad", "patch": "@@ -6868,8 +6868,14 @@ vectorizable_reduction (loop_vec_info loop_vinfo,\n \t cases, so we need to check that this is ok.  One exception is when\n \t vectorizing an outer-loop: the inner-loop is executed sequentially,\n \t and therefore vectorizing reductions in the inner-loop during\n-\t outer-loop vectorization is safe.  */\n-      if (needs_fold_left_reduction_p (scalar_type, orig_code))\n+\t outer-loop vectorization is safe.  Likewise when we are vectorizing\n+\t a series of reductions using SLP and the VF is one the reductions\n+\t are performed in scalar order.  */\n+      if (slp_node\n+\t  && !REDUC_GROUP_FIRST_ELEMENT (stmt_info)\n+\t  && known_eq (LOOP_VINFO_VECT_FACTOR (loop_vinfo), 1u))\n+\t;\n+      else if (needs_fold_left_reduction_p (scalar_type, orig_code))\n \t{\n \t  /* When vectorizing a reduction chain w/o SLP the reduction PHI\n \t     is not directy used in stmt.  */"}]}