{"sha": "ff507401c03ac8c83066346b7072888313d8ed91", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmY1MDc0MDFjMDNhYzhjODMwNjYzNDZiNzA3Mjg4ODMxM2Q4ZWQ5MQ==", "commit": {"author": {"name": "Trevor Saunders", "email": "tbsaunde+gcc@tbsaunde.org", "date": "2015-09-13T16:54:48Z"}, "committer": {"name": "Trevor Saunders", "email": "tbsaunde@gcc.gnu.org", "date": "2015-09-13T16:54:48Z"}, "message": "tree-vrp.c: remove typedefs that hide pointerness\n\ngcc/ChangeLog:\n\n2015-09-13  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n\n\t* tree-vrp.c (struct assert_locus_d): Rename to assert_locus.\n\t(dump_asserts_for): Adjust.\n\t(register_new_assert_for): Likewise.\n\t(process_assert_insertions): Likewise.\n\t(insert_range_assertions): Likewise.\n\nFrom-SVN: r227724", "tree": {"sha": "581243f6def8feace515f5ce869cbdcdb7206d60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/581243f6def8feace515f5ce869cbdcdb7206d60"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ff507401c03ac8c83066346b7072888313d8ed91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff507401c03ac8c83066346b7072888313d8ed91", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff507401c03ac8c83066346b7072888313d8ed91", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff507401c03ac8c83066346b7072888313d8ed91/comments", "author": null, "committer": null, "parents": [{"sha": "09a23476dfc4ea56adc24faf73198781cd755057", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09a23476dfc4ea56adc24faf73198781cd755057", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09a23476dfc4ea56adc24faf73198781cd755057"}], "stats": {"total": 30, "additions": 18, "deletions": 12}, "files": [{"sha": "5e8bc636775ea2924ed6ac8b335cdef2f4b5d0a0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff507401c03ac8c83066346b7072888313d8ed91/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff507401c03ac8c83066346b7072888313d8ed91/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ff507401c03ac8c83066346b7072888313d8ed91", "patch": "@@ -1,3 +1,11 @@\n+2015-09-13  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n+\n+\t* tree-vrp.c (struct assert_locus_d): Rename to assert_locus.\n+\t(dump_asserts_for): Adjust.\n+\t(register_new_assert_for): Likewise.\n+\t(process_assert_insertions): Likewise.\n+\t(insert_range_assertions): Likewise.\n+\n 2015-09-13  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n \n \t* tree-ssa-ter.c (temp_expr_table_d): Rename to temp_expr_table"}, {"sha": "00923c091a22a436bc6297cb920407b46e1427f3", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff507401c03ac8c83066346b7072888313d8ed91/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff507401c03ac8c83066346b7072888313d8ed91/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=ff507401c03ac8c83066346b7072888313d8ed91", "patch": "@@ -126,7 +126,7 @@ static tree vrp_evaluate_conditional_warnv_with_ops (enum tree_code,\n    SSA name may have more than one assertion associated with it, these\n    locations are kept in a linked list attached to the corresponding\n    SSA name.  */\n-struct assert_locus_d\n+struct assert_locus\n {\n   /* Basic block where the assertion would be inserted.  */\n   basic_block bb;\n@@ -148,19 +148,17 @@ struct assert_locus_d\n   tree expr;\n \n   /* Next node in the linked list.  */\n-  struct assert_locus_d *next;\n+  assert_locus *next;\n };\n \n-typedef struct assert_locus_d *assert_locus_t;\n-\n /* If bit I is present, it means that SSA name N_i has a list of\n    assertions that should be inserted in the IL.  */\n static bitmap need_assert_for;\n \n /* Array of locations lists where to insert assertions.  ASSERTS_FOR[I]\n    holds a list of ASSERT_LOCUS_T nodes that describe where\n    ASSERT_EXPRs for SSA name N_I should be inserted.  */\n-static assert_locus_t *asserts_for;\n+static assert_locus **asserts_for;\n \n /* Value range array.  After propagation, VR_VALUE[I] holds the range\n    of values that SSA name N_I may take.  */\n@@ -4897,7 +4895,7 @@ void debug_all_asserts (void);\n void\n dump_asserts_for (FILE *file, tree name)\n {\n-  assert_locus_t loc;\n+  assert_locus *loc;\n \n   fprintf (file, \"Assertions to be inserted for \");\n   print_generic_expr (file, name, 0);\n@@ -4979,7 +4977,7 @@ register_new_assert_for (tree name, tree expr,\n \t\t\t edge e,\n \t\t\t gimple_stmt_iterator si)\n {\n-  assert_locus_t n, loc, last_loc;\n+  assert_locus *n, *loc, *last_loc;\n   basic_block dest_bb;\n \n   gcc_checking_assert (bb == NULL || e == NULL);\n@@ -5054,7 +5052,7 @@ register_new_assert_for (tree name, tree expr,\n   /* If we didn't find an assertion already registered for\n      NAME COMP_CODE VAL, add a new one at the end of the list of\n      assertions associated with NAME.  */\n-  n = XNEW (struct assert_locus_d);\n+  n = XNEW (struct assert_locus);\n   n->bb = dest_bb;\n   n->e = e;\n   n->si = si;\n@@ -6333,7 +6331,7 @@ find_assert_locations (void)\n    indicated by LOC.  Return true if we made any edge insertions.  */\n \n static bool\n-process_assert_insertions_for (tree name, assert_locus_t loc)\n+process_assert_insertions_for (tree name, assert_locus *loc)\n {\n   /* Build the comparison expression NAME_i COMP_CODE VAL.  */\n   gimple stmt;\n@@ -6401,12 +6399,12 @@ process_assert_insertions (void)\n \n   EXECUTE_IF_SET_IN_BITMAP (need_assert_for, 0, i, bi)\n     {\n-      assert_locus_t loc = asserts_for[i];\n+      assert_locus *loc = asserts_for[i];\n       gcc_assert (loc);\n \n       while (loc)\n \t{\n-\t  assert_locus_t next = loc->next;\n+\t  assert_locus *next = loc->next;\n \t  update_edges_p |= process_assert_insertions_for (ssa_name (i), loc);\n \t  free (loc);\n \t  loc = next;\n@@ -6458,7 +6456,7 @@ static void\n insert_range_assertions (void)\n {\n   need_assert_for = BITMAP_ALLOC (NULL);\n-  asserts_for = XCNEWVEC (assert_locus_t, num_ssa_names);\n+  asserts_for = XCNEWVEC (assert_locus *, num_ssa_names);\n \n   calculate_dominance_info (CDI_DOMINATORS);\n "}]}