{"sha": "ad9945b50ec36f020b8414555622d815977a08da", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWQ5OTQ1YjUwZWMzNmYwMjBiODQxNDU1NTYyMmQ4MTU5NzdhMDhkYQ==", "commit": {"author": {"name": "Laurent GUERBY", "email": "laurent@guerby.net", "date": "2005-04-07T19:07:41Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2005-04-07T19:07:41Z"}, "message": "Makefile.in: Add make ifeq define for hppa linux tasking support.\n\n\t* Makefile.in: Add make ifeq define for hppa linux tasking support.\n\t* system-hpux.ads: Define Signed_Zeros to be True.\n\t* system-linux-hppa.ads, s-osinte-linux-hppa.ads: New files.\n\nCo-Authored-By: John David Anglin <dave.anglin@nrc-cnrc.gc.ca>\n\nFrom-SVN: r97796", "tree": {"sha": "508f8d31da5388103ac4d6fca94b41cd0b4adde1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/508f8d31da5388103ac4d6fca94b41cd0b4adde1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ad9945b50ec36f020b8414555622d815977a08da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad9945b50ec36f020b8414555622d815977a08da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad9945b50ec36f020b8414555622d815977a08da", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad9945b50ec36f020b8414555622d815977a08da/comments", "author": {"login": "guerby", "id": 6659329, "node_id": "MDQ6VXNlcjY2NTkzMjk=", "avatar_url": "https://avatars.githubusercontent.com/u/6659329?v=4", "gravatar_id": "", "url": "https://api.github.com/users/guerby", "html_url": "https://github.com/guerby", "followers_url": "https://api.github.com/users/guerby/followers", "following_url": "https://api.github.com/users/guerby/following{/other_user}", "gists_url": "https://api.github.com/users/guerby/gists{/gist_id}", "starred_url": "https://api.github.com/users/guerby/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/guerby/subscriptions", "organizations_url": "https://api.github.com/users/guerby/orgs", "repos_url": "https://api.github.com/users/guerby/repos", "events_url": "https://api.github.com/users/guerby/events{/privacy}", "received_events_url": "https://api.github.com/users/guerby/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c908c7683de626a6258463bcd57b54d51770f8bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c908c7683de626a6258463bcd57b54d51770f8bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c908c7683de626a6258463bcd57b54d51770f8bc"}], "stats": {"total": 718, "additions": 717, "deletions": 1}, "files": [{"sha": "b70b7fd538db4ffcfce511fa57dfabdf99dd9dec", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad9945b50ec36f020b8414555622d815977a08da/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad9945b50ec36f020b8414555622d815977a08da/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=ad9945b50ec36f020b8414555622d815977a08da", "patch": "@@ -1,3 +1,10 @@\n+2005-04-07  Laurent GUERBY  <laurent@guerby.net>\n+\t    John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n+\n+\t* Makefile.in: Add make ifeq define for hppa linux tasking support.\n+\t* system-hpux.ads: Define Signed_Zeros to be True.\n+\t* system-linux-hppa.ads, s-osinte-linux-hppa.ads: New files.\n+\n 2005-04-01  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* adaint.c, cal.c, decl.c, gigi.h, gmem.c, init.c, link.c,"}, {"sha": "22ef98dfbff2211eb2c846dbbb903dd373e805a5", "filename": "gcc/ada/Makefile.in", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad9945b50ec36f020b8414555622d815977a08da/gcc%2Fada%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad9945b50ec36f020b8414555622d815977a08da/gcc%2Fada%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FMakefile.in?ref=ad9945b50ec36f020b8414555622d815977a08da", "patch": "@@ -1365,6 +1365,31 @@ ifeq ($(strip $(filter-out sparc% linux%,$(arch) $(osys))),)\n   LIBRARY_VERSION := $(LIB_VERSION)\n endif\n \n+ifeq ($(strip $(filter-out hppa% linux%,$(arch) $(osys))),)\n+  LIBGNAT_TARGET_PAIRS = \\\n+  a-intnam.ads<a-intnam-linux.ads \\\n+  s-inmaop.adb<s-inmaop-posix.adb \\\n+  s-intman.adb<s-intman-posix.adb \\\n+  s-osinte.adb<s-osinte-posix.adb \\\n+  s-osinte.ads<s-osinte-linux-hppa.ads \\\n+  s-osprim.adb<s-osprim-posix.adb \\\n+  s-taprop.adb<s-taprop-linux.adb \\\n+  s-taspri.ads<s-taspri-linux.ads \\\n+  s-tpopsp.adb<s-tpopsp-posix-foreign.adb \\\n+  s-parame.adb<s-parame-linux.adb \\\n+  system.ads<system-linux-hppa.ads\n+\n+  TOOLS_TARGET_PAIRS =  \\\n+    mlib-tgt.adb<mlib-tgt-linux.adb \\\n+    indepsw.adb<indepsw-linux.adb\n+\n+  THREADSLIB = -lpthread\n+  GNATLIB_SHARED = gnatlib-shared-dual\n+  GMEM_LIB = gmemlib\n+  PREFIX_OBJS = $(PREFIX_REAL_OBJS)\n+  LIBRARY_VERSION := $(LIB_VERSION)\n+endif\n+\n ifeq ($(strip $(filter-out %ia64 linux%,$(arch) $(osys))),)\n   LIBGNAT_TARGET_PAIRS = \\\n   a-intnam.ads<a-intnam-linux.ads \\"}, {"sha": "327fd5bd99056625ae7c59186820c38be7194d7f", "filename": "gcc/ada/s-osinte-linux-hppa.ads", "status": "added", "additions": 533, "deletions": 0, "changes": 533, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad9945b50ec36f020b8414555622d815977a08da/gcc%2Fada%2Fs-osinte-linux-hppa.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad9945b50ec36f020b8414555622d815977a08da/gcc%2Fada%2Fs-osinte-linux-hppa.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osinte-linux-hppa.ads?ref=ad9945b50ec36f020b8414555622d815977a08da", "patch": "@@ -0,0 +1,533 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                GNU ADA RUN-TIME LIBRARY (GNARL) COMPONENTS               --\n+--                                                                          --\n+--                   S Y S T E M . O S _ I N T E R F A C E                  --\n+--                                                                          --\n+--                                  S p e c                                 --\n+--                          (GNU/Linux-HPPA Version)                        --\n+--                                                                          --\n+--             Copyright (C) 1991-1994, Florida State University            --\n+--             Copyright (C) 1995-2005, Free Software Foundation, Inc.      --\n+--                                                                          --\n+-- GNARL is free software; you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion. GNARL is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNARL; see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNARL was developed by the GNARL team at Florida State University.       --\n+-- Extensive contributions were provided by Ada Core Technologies, Inc.     --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This is a GNU/Linux (GNU/LinuxThreads) version of this package\n+\n+--  This package encapsulates all direct interfaces to OS services\n+--  that are needed by children of System.\n+\n+--  PLEASE DO NOT add any with-clauses to this package or remove the pragma\n+--  Preelaborate. This package is designed to be a bottom-level (leaf) package.\n+\n+with Interfaces.C;\n+with Unchecked_Conversion;\n+\n+package System.OS_Interface is\n+   pragma Preelaborate;\n+\n+   pragma Linker_Options (\"-lpthread\");\n+\n+   subtype int            is Interfaces.C.int;\n+   subtype char           is Interfaces.C.char;\n+   subtype short          is Interfaces.C.short;\n+   subtype long           is Interfaces.C.long;\n+   subtype unsigned       is Interfaces.C.unsigned;\n+   subtype unsigned_short is Interfaces.C.unsigned_short;\n+   subtype unsigned_long  is Interfaces.C.unsigned_long;\n+   subtype unsigned_char  is Interfaces.C.unsigned_char;\n+   subtype plain_char     is Interfaces.C.plain_char;\n+   subtype size_t         is Interfaces.C.size_t;\n+\n+   -----------\n+   -- Errno --\n+   -----------\n+\n+   function errno return int;\n+   pragma Import (C, errno, \"__get_errno\");\n+\n+   EAGAIN    : constant := 11;\n+   EINTR     : constant := 4;\n+   EINVAL    : constant := 22;\n+   ENOMEM    : constant := 12;\n+   EPERM     : constant := 1;\n+   ETIMEDOUT : constant := 238;\n+\n+   -------------\n+   -- Signals --\n+   -------------\n+\n+   Max_Interrupt : constant := 63;\n+   type Signal is new int range 0 .. Max_Interrupt;\n+   for Signal'Size use int'Size;\n+\n+   SIGHUP     : constant := 1; --  hangup\n+   SIGINT     : constant := 2; --  interrupt (rubout)\n+   SIGQUIT    : constant := 3; --  quit (ASCD FS)\n+   SIGILL     : constant := 4; --  illegal instruction (not reset)\n+   SIGTRAP    : constant := 5; --  trace trap (not reset)\n+   SIGIOT     : constant := 6; --  IOT instruction\n+   SIGABRT    : constant := 6; --  used by abort, replace SIGIOT in the  future\n+   SIGEMT     : constant := 7; --  EMT\n+   SIGFPE     : constant := 8; --  floating point exception\n+   SIGKILL    : constant := 9; --  kill (cannot be caught or ignored)\n+   SIGBUS     : constant := 10; --  bus error\n+   SIGSEGV    : constant := 11; --  segmentation violation\n+   SIGSYS     : constant := 12; --  bad system call\n+   SIGPIPE    : constant := 13; --  write on a pipe with no one to read it\n+   SIGALRM    : constant := 14; --  alarm clock\n+   SIGTERM    : constant := 15; --  software termination signal from kill\n+   SIGUSR1    : constant := 16; --  user defined signal 1\n+   SIGUSR2    : constant := 17; --  user defined signal 2\n+   SIGCLD     : constant := 18; --  alias for SIGCHLD\n+   SIGCHLD    : constant := 18; --  child status change\n+   SIGPWR     : constant := 19; --  power-fail restart\n+   SIGVTALRM  : constant := 20; --  virtual timer expired\n+   SIGPROF    : constant := 21; --  profiling timer expired\n+   SIGPOLL    : constant := 22; --  pollable event occurred\n+   SIGIO      : constant := 22; --  I/O now possible (4.2 BSD)\n+   SIGWINCH   : constant := 23; --  window size change\n+   SIGSTOP    : constant := 24; --  stop (cannot be caught or ignored)\n+   SIGTSTP    : constant := 25; --  user stop requested from tty\n+   SIGCONT    : constant := 26; --  stopped process has been continued\n+   SIGTTIN    : constant := 27; --  background tty read attempted\n+   SIGTTOU    : constant := 28; --  background tty write attempted\n+   SIGURG     : constant := 29; --  urgent condition on IO channel\n+   SIGLOST    : constant := 30; --  File lock lost\n+   SIGUNUSED  : constant := 31; --  unused signal (GNU/Linux)\n+   SIGXCPU    : constant := 33; --  CPU time limit exceeded\n+   SIGXFSZ    : constant := 34; --  filesize limit exceeded\n+   SIGSTKFLT  : constant := 36; --  coprocessor stack fault (Linux)\n+   SIGLTHRRES : constant := 37; --  GNU/LinuxThreads restart signal\n+   SIGLTHRCAN : constant := 38; --  GNU/LinuxThreads cancel signal\n+   SIGLTHRDBG : constant := 39; --  GNU/LinuxThreads debugger signal\n+\n+   SIGADAABORT : constant := SIGABRT;\n+   --  Change this if you want to use another signal for task abort.\n+   --  SIGTERM might be a good one.\n+\n+   type Signal_Set is array (Natural range <>) of Signal;\n+\n+   Unmasked    : constant Signal_Set := (\n+      SIGTRAP,\n+      --  To enable debugging on multithreaded applications, mark SIGTRAP to\n+      --  be kept unmasked.\n+\n+      SIGBUS,\n+\n+      SIGTTIN, SIGTTOU, SIGTSTP,\n+      --  Keep these three signals unmasked so that background processes\n+      --  and IO behaves as normal \"C\" applications\n+\n+      SIGPROF,\n+      --  To avoid confusing the profiler\n+\n+      SIGKILL, SIGSTOP,\n+      --  These two signals actually cannot be masked;\n+      --  POSIX simply won't allow it.\n+\n+      SIGLTHRRES, SIGLTHRCAN, SIGLTHRDBG);\n+      --  These three signals are used by GNU/LinuxThreads starting from\n+      --  glibc 2.1 (future 2.2).\n+\n+   Reserved    : constant Signal_Set :=\n+   --  I am not sure why the following two signals are reserved.\n+   --  I guess they are not supported by this version of GNU/Linux.\n+     (SIGVTALRM, SIGUNUSED);\n+\n+   type sigset_t is private;\n+\n+   function sigaddset (set : access sigset_t; sig : Signal) return int;\n+   pragma Import (C, sigaddset, \"sigaddset\");\n+\n+   function sigdelset (set : access sigset_t; sig : Signal) return int;\n+   pragma Import (C, sigdelset, \"sigdelset\");\n+\n+   function sigfillset (set : access sigset_t) return int;\n+   pragma Import (C, sigfillset, \"sigfillset\");\n+\n+   function sigismember (set : access sigset_t; sig : Signal) return int;\n+   pragma Import (C, sigismember, \"sigismember\");\n+\n+   function sigemptyset (set : access sigset_t) return int;\n+   pragma Import (C, sigemptyset, \"sigemptyset\");\n+\n+   type union_type_3 is new String (1 .. 116);\n+   type siginfo_t is record\n+      si_signo : int;\n+      si_code  : int;\n+      si_errno : int;\n+      X_data   : union_type_3;\n+   end record;\n+   pragma Convention (C, siginfo_t);\n+\n+   type struct_sigaction is record\n+      sa_handler   : System.Address;\n+      sa_flags     : unsigned_long;\n+      sa_mask      : sigset_t;\n+   end record;\n+   pragma Convention (C, struct_sigaction);\n+   type struct_sigaction_ptr is access all struct_sigaction;\n+\n+   type Machine_State is record\n+      eip : unsigned_long;\n+      ebx : unsigned_long;\n+      esp : unsigned_long;\n+      ebp : unsigned_long;\n+      esi : unsigned_long;\n+      edi : unsigned_long;\n+   end record;\n+   type Machine_State_Ptr is access all Machine_State;\n+\n+   SA_SIGINFO  : constant := 16;\n+\n+   SIG_BLOCK   : constant := 0;\n+   SIG_UNBLOCK : constant := 1;\n+   SIG_SETMASK : constant := 2;\n+\n+   SIG_DFL : constant := 0;\n+   SIG_IGN : constant := 1;\n+\n+   function sigaction\n+     (sig  : Signal;\n+      act  : struct_sigaction_ptr;\n+      oact : struct_sigaction_ptr) return int;\n+   pragma Import (C, sigaction, \"sigaction\");\n+\n+   ----------\n+   -- Time --\n+   ----------\n+\n+   type timespec is private;\n+\n+   function To_Duration (TS : timespec) return Duration;\n+   pragma Inline (To_Duration);\n+\n+   function To_Timespec (D : Duration) return timespec;\n+   pragma Inline (To_Timespec);\n+\n+   type struct_timeval is private;\n+\n+   function To_Duration (TV : struct_timeval) return Duration;\n+   pragma Inline (To_Duration);\n+\n+   function To_Timeval (D : Duration) return struct_timeval;\n+   pragma Inline (To_Timeval);\n+\n+   function gettimeofday\n+     (tv : access struct_timeval;\n+      tz : System.Address := System.Null_Address) return int;\n+   pragma Import (C, gettimeofday, \"gettimeofday\");\n+\n+   function sysconf (name : int) return long;\n+   pragma Import (C, sysconf);\n+\n+   SC_CLK_TCK : constant := 2;\n+\n+   -------------------------\n+   -- Priority Scheduling --\n+   -------------------------\n+\n+   SCHED_OTHER : constant := 0;\n+   SCHED_FIFO  : constant := 1;\n+   SCHED_RR    : constant := 2;\n+\n+   -------------\n+   -- Process --\n+   -------------\n+\n+   type pid_t is private;\n+\n+   function kill (pid : pid_t; sig : Signal) return int;\n+   pragma Import (C, kill, \"kill\");\n+\n+   function getpid return pid_t;\n+   pragma Import (C, getpid, \"getpid\");\n+\n+   -------------\n+   -- Threads --\n+   -------------\n+\n+   type Thread_Body is access\n+     function (arg : System.Address) return System.Address;\n+\n+   function Thread_Body_Access is new\n+     Unchecked_Conversion (System.Address, Thread_Body);\n+\n+   type pthread_t is new unsigned_long;\n+   subtype Thread_Id        is pthread_t;\n+\n+   function To_pthread_t is new Unchecked_Conversion\n+     (unsigned_long, pthread_t);\n+\n+   type pthread_mutex_t     is limited private;\n+   type pthread_cond_t      is limited private;\n+   type pthread_attr_t      is limited private;\n+   type pthread_mutexattr_t is limited private;\n+   type pthread_condattr_t  is limited private;\n+   type pthread_key_t       is private;\n+\n+   PTHREAD_CREATE_DETACHED : constant := 1;\n+\n+   -----------\n+   -- Stack --\n+   -----------\n+\n+   function Get_Stack_Base (thread : pthread_t) return Address;\n+   pragma Inline (Get_Stack_Base);\n+   --  This is a dummy procedure to share some GNULLI files\n+\n+   ---------------------------------------\n+   -- Nonstandard Thread Initialization --\n+   ---------------------------------------\n+\n+   procedure pthread_init;\n+   pragma Inline (pthread_init);\n+   --  This is a dummy procedure to share some GNULLI files\n+\n+   -------------------------\n+   -- POSIX.1c  Section 3 --\n+   -------------------------\n+\n+   function sigwait (set : access sigset_t; sig : access Signal) return int;\n+   pragma Import (C, sigwait, \"sigwait\");\n+\n+   function pthread_kill (thread : pthread_t; sig : Signal) return int;\n+   pragma Import (C, pthread_kill, \"pthread_kill\");\n+\n+   type sigset_t_ptr is access all sigset_t;\n+\n+   function pthread_sigmask\n+     (how  : int;\n+      set  : sigset_t_ptr;\n+      oset : sigset_t_ptr) return int;\n+   pragma Import (C, pthread_sigmask, \"pthread_sigmask\");\n+\n+   --------------------------\n+   -- POSIX.1c  Section 11 --\n+   --------------------------\n+\n+   function pthread_mutexattr_init\n+     (attr : access pthread_mutexattr_t) return int;\n+   pragma Import (C, pthread_mutexattr_init, \"pthread_mutexattr_init\");\n+\n+   function pthread_mutexattr_destroy\n+     (attr : access pthread_mutexattr_t) return int;\n+   pragma Import (C, pthread_mutexattr_destroy, \"pthread_mutexattr_destroy\");\n+\n+   function pthread_mutex_init\n+     (mutex : access pthread_mutex_t;\n+      attr  : access pthread_mutexattr_t) return int;\n+   pragma Import (C, pthread_mutex_init, \"pthread_mutex_init\");\n+\n+   function pthread_mutex_destroy (mutex : access pthread_mutex_t) return int;\n+   pragma Import (C, pthread_mutex_destroy, \"pthread_mutex_destroy\");\n+\n+   function pthread_mutex_lock (mutex : access pthread_mutex_t) return int;\n+   pragma Import (C, pthread_mutex_lock, \"pthread_mutex_lock\");\n+\n+   function pthread_mutex_unlock (mutex : access pthread_mutex_t) return int;\n+   pragma Import (C, pthread_mutex_unlock, \"pthread_mutex_unlock\");\n+\n+   function pthread_condattr_init\n+     (attr : access pthread_condattr_t) return int;\n+   pragma Import (C, pthread_condattr_init, \"pthread_condattr_init\");\n+\n+   function pthread_condattr_destroy\n+     (attr : access pthread_condattr_t) return int;\n+   pragma Import (C, pthread_condattr_destroy, \"pthread_condattr_destroy\");\n+\n+   function pthread_cond_init\n+     (cond : access pthread_cond_t;\n+      attr : access pthread_condattr_t) return int;\n+   pragma Import (C, pthread_cond_init, \"pthread_cond_init\");\n+\n+   function pthread_cond_destroy (cond : access pthread_cond_t) return int;\n+   pragma Import (C, pthread_cond_destroy, \"pthread_cond_destroy\");\n+\n+   function pthread_cond_signal (cond : access pthread_cond_t) return int;\n+   pragma Import (C, pthread_cond_signal, \"pthread_cond_signal\");\n+\n+   function pthread_cond_wait\n+     (cond  : access pthread_cond_t;\n+      mutex : access pthread_mutex_t) return int;\n+   pragma Import (C, pthread_cond_wait, \"pthread_cond_wait\");\n+\n+   function pthread_cond_timedwait\n+     (cond    : access pthread_cond_t;\n+      mutex   : access pthread_mutex_t;\n+      abstime : access timespec) return int;\n+   pragma Import (C, pthread_cond_timedwait, \"pthread_cond_timedwait\");\n+\n+   --------------------------\n+   -- POSIX.1c  Section 13 --\n+   --------------------------\n+\n+   type struct_sched_param is record\n+      sched_priority : int;  --  scheduling priority\n+   end record;\n+   pragma Convention (C, struct_sched_param);\n+\n+   function pthread_setschedparam\n+     (thread : pthread_t;\n+      policy : int;\n+      param  : access struct_sched_param) return int;\n+   pragma Import (C, pthread_setschedparam, \"pthread_setschedparam\");\n+\n+   function pthread_attr_setschedpolicy\n+     (attr   : access pthread_attr_t;\n+      policy : int) return int;\n+   pragma Import\n+     (C, pthread_attr_setschedpolicy, \"pthread_attr_setschedpolicy\");\n+\n+   function sched_yield return int;\n+   pragma Import (C, sched_yield, \"sched_yield\");\n+\n+   ---------------------------\n+   -- P1003.1c - Section 16 --\n+   ---------------------------\n+\n+   function pthread_attr_init\n+     (attributes : access pthread_attr_t) return int;\n+   pragma Import (C, pthread_attr_init, \"pthread_attr_init\");\n+\n+   function pthread_attr_destroy\n+     (attributes : access pthread_attr_t) return int;\n+   pragma Import (C, pthread_attr_destroy, \"pthread_attr_destroy\");\n+\n+   function pthread_attr_setdetachstate\n+     (attr        : access pthread_attr_t;\n+      detachstate : int) return int;\n+   pragma Import\n+     (C, pthread_attr_setdetachstate, \"pthread_attr_setdetachstate\");\n+\n+   function pthread_attr_setstacksize\n+     (attr      : access pthread_attr_t;\n+      stacksize : size_t) return int;\n+   pragma Import (C, pthread_attr_setstacksize, \"pthread_attr_setstacksize\");\n+\n+   function pthread_create\n+     (thread        : access pthread_t;\n+      attributes    : access pthread_attr_t;\n+      start_routine : Thread_Body;\n+      arg           : System.Address) return int;\n+   pragma Import (C, pthread_create, \"pthread_create\");\n+\n+   procedure pthread_exit (status : System.Address);\n+   pragma Import (C, pthread_exit, \"pthread_exit\");\n+\n+   function pthread_self return pthread_t;\n+   pragma Import (C, pthread_self, \"pthread_self\");\n+\n+   --------------------------\n+   -- POSIX.1c  Section 17 --\n+   --------------------------\n+\n+   function pthread_setspecific\n+     (key   : pthread_key_t;\n+      value : System.Address) return int;\n+   pragma Import (C, pthread_setspecific, \"pthread_setspecific\");\n+\n+   function pthread_getspecific (key : pthread_key_t) return System.Address;\n+   pragma Import (C, pthread_getspecific, \"pthread_getspecific\");\n+\n+   type destructor_pointer is access procedure (arg : System.Address);\n+\n+   function pthread_key_create\n+     (key        : access pthread_key_t;\n+      destructor : destructor_pointer) return int;\n+   pragma Import (C, pthread_key_create, \"pthread_key_create\");\n+\n+private\n+\n+   type sigset_t is array (0 .. 31) of unsigned_long;\n+   pragma Convention (C, sigset_t);\n+\n+   type pid_t is new int;\n+\n+   type time_t is new long;\n+\n+   type timespec is record\n+      tv_sec  : time_t;\n+      tv_nsec : long;\n+   end record;\n+   pragma Convention (C, timespec);\n+\n+   type struct_timeval is record\n+      tv_sec  : time_t;\n+      tv_usec : time_t;\n+   end record;\n+   pragma Convention (C, struct_timeval);\n+\n+   type pthread_attr_t is record\n+      detachstate   : int;\n+      schedpolicy   : int;\n+      schedparam    : struct_sched_param;\n+      inheritsched  : int;\n+      scope         : int;\n+      guardsize     : size_t;\n+      stackaddr_set : int;\n+      stackaddr     : System.Address;\n+      stacksize     : size_t;\n+   end record;\n+   pragma Convention (C, pthread_attr_t);\n+\n+   type pthread_condattr_t is record\n+      dummy : int;\n+   end record;\n+   pragma Convention (C, pthread_condattr_t);\n+\n+   type pthread_mutexattr_t is record\n+      mutexkind : int;\n+   end record;\n+   pragma Convention (C, pthread_mutexattr_t);\n+\n+   type lock_array is array (1 .. 4) of int;\n+   type atomic_lock_t is record\n+      lock : lock_array;\n+   end record;\n+   pragma Convention (C, atomic_lock_t);\n+   for atomic_lock_t'Alignment use 8 * 16;\n+\n+   type struct_pthread_fast_lock is record\n+      spinlock : atomic_lock_t;\n+      status   : long;\n+   end record;\n+   pragma Convention (C, struct_pthread_fast_lock);\n+\n+   type pthread_mutex_t is record\n+      m_reserved : int;\n+      m_count    : int;\n+      m_owner    : System.Address;\n+      m_kind     : int;\n+      m_lock     : struct_pthread_fast_lock;\n+   end record;\n+   pragma Convention (C, pthread_mutex_t);\n+\n+   type pthread_cond_t is array (0 .. 47) of unsigned_char;\n+   pragma Convention (C, pthread_cond_t);\n+\n+   type pthread_key_t is new unsigned;\n+\n+end System.OS_Interface;"}, {"sha": "0ac0bb7408ecc89e4f841d09052bc1da4f02f1b7", "filename": "gcc/ada/system-hpux.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad9945b50ec36f020b8414555622d815977a08da/gcc%2Fada%2Fsystem-hpux.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad9945b50ec36f020b8414555622d815977a08da/gcc%2Fada%2Fsystem-hpux.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsystem-hpux.ads?ref=ad9945b50ec36f020b8414555622d815977a08da", "patch": "@@ -130,7 +130,7 @@ private\n    Machine_Rounds            : constant Boolean := True;\n    OpenVMS                   : constant Boolean := False;\n    Preallocated_Stacks       : constant Boolean := False;\n-   Signed_Zeros              : constant Boolean := False;\n+   Signed_Zeros              : constant Boolean := True;\n    Stack_Check_Default       : constant Boolean := False;\n    Stack_Check_Probes        : constant Boolean := False;\n    Support_64_Bit_Divides    : constant Boolean := True;"}, {"sha": "fde1129b7b595b62406216aa290a7c28d8c4c412", "filename": "gcc/ada/system-linux-hppa.ads", "status": "added", "additions": 151, "deletions": 0, "changes": 151, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad9945b50ec36f020b8414555622d815977a08da/gcc%2Fada%2Fsystem-linux-hppa.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad9945b50ec36f020b8414555622d815977a08da/gcc%2Fada%2Fsystem-linux-hppa.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsystem-linux-hppa.ads?ref=ad9945b50ec36f020b8414555622d815977a08da", "patch": "@@ -0,0 +1,151 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                        GNAT RUN-TIME COMPONENTS                          --\n+--                                                                          --\n+--                               S Y S T E M                                --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                          (GNU/Linux-HPPA Version)                        --\n+--                                                                          --\n+--          Copyright (C) 1992-2005 Free Software Foundation, Inc.          --\n+--                                                                          --\n+-- This specification is derived from the Ada Reference Manual for use with --\n+-- GNAT. The copyright notice above, and the license provisions that follow --\n+-- apply solely to the  contents of the part following the private keyword. --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+package System is\n+pragma Pure (System);\n+--  Note that we take advantage of the implementation permission to\n+--  make this unit Pure instead of Preelaborable, see RM 13.7(36)\n+\n+   type Name is (SYSTEM_NAME_GNAT);\n+   System_Name : constant Name := SYSTEM_NAME_GNAT;\n+\n+   --  System-Dependent Named Numbers\n+\n+   Min_Int               : constant := Long_Long_Integer'First;\n+   Max_Int               : constant := Long_Long_Integer'Last;\n+\n+   Max_Binary_Modulus    : constant := 2 ** Long_Long_Integer'Size;\n+   Max_Nonbinary_Modulus : constant := Integer'Last;\n+\n+   Max_Base_Digits       : constant := Long_Long_Float'Digits;\n+   Max_Digits            : constant := Long_Long_Float'Digits;\n+\n+   Max_Mantissa          : constant := 63;\n+   Fine_Delta            : constant := 2.0 ** (-Max_Mantissa);\n+\n+   Tick                  : constant := 0.000_001;\n+\n+   --  Storage-related Declarations\n+\n+   type Address is private;\n+   Null_Address : constant Address;\n+\n+   Storage_Unit : constant := 8;\n+   Word_Size    : constant := 32;\n+   Memory_Size  : constant := 2 ** 32;\n+\n+   --  Address comparison\n+\n+   function \"<\"  (Left, Right : Address) return Boolean;\n+   function \"<=\" (Left, Right : Address) return Boolean;\n+   function \">\"  (Left, Right : Address) return Boolean;\n+   function \">=\" (Left, Right : Address) return Boolean;\n+   function \"=\"  (Left, Right : Address) return Boolean;\n+\n+   pragma Import (Intrinsic, \"<\");\n+   pragma Import (Intrinsic, \"<=\");\n+   pragma Import (Intrinsic, \">\");\n+   pragma Import (Intrinsic, \">=\");\n+   pragma Import (Intrinsic, \"=\");\n+\n+   --  Other System-Dependent Declarations\n+\n+   type Bit_Order is (High_Order_First, Low_Order_First);\n+   Default_Bit_Order : constant Bit_Order := High_Order_First;\n+\n+   --  Priority-related Declarations (RM D.1)\n+\n+   Max_Priority           : constant Positive := 30;\n+   Max_Interrupt_Priority : constant Positive := 31;\n+\n+   subtype Any_Priority       is Integer      range  0 .. 31;\n+   subtype Priority           is Any_Priority range  0 .. 30;\n+   subtype Interrupt_Priority is Any_Priority range 31 .. 31;\n+\n+   Default_Priority : constant Priority := 15;\n+\n+private\n+\n+   type Address is mod Memory_Size;\n+   Null_Address : constant Address := 0;\n+\n+   --------------------------------------\n+   -- System Implementation Parameters --\n+   --------------------------------------\n+\n+   --  These parameters provide information about the target that is used\n+   --  by the compiler. They are in the private part of System, where they\n+   --  can be accessed using the special circuitry in the Targparm unit\n+   --  whose source should be consulted for more detailed descriptions\n+   --  of the individual switch values.\n+\n+   AAMP                      : constant Boolean := False;\n+   Backend_Divide_Checks     : constant Boolean := False;\n+   Backend_Overflow_Checks   : constant Boolean := False;\n+   Command_Line_Args         : constant Boolean := True;\n+   Configurable_Run_Time     : constant Boolean := False;\n+   Denorm                    : constant Boolean := True;\n+   Duration_32_Bits          : constant Boolean := False;\n+   Exit_Status_Supported     : constant Boolean := True;\n+   Fractional_Fixed_Ops      : constant Boolean := False;\n+   Frontend_Layout           : constant Boolean := False;\n+   Functions_Return_By_DSP   : constant Boolean := False;\n+   Machine_Overflows         : constant Boolean := False;\n+   Machine_Rounds            : constant Boolean := True;\n+   OpenVMS                   : constant Boolean := False;\n+   Preallocated_Stacks       : constant Boolean := False;\n+   Signed_Zeros              : constant Boolean := True;\n+   Stack_Check_Default       : constant Boolean := False;\n+   Stack_Check_Probes        : constant Boolean := False;\n+   Support_64_Bit_Divides    : constant Boolean := True;\n+   Support_Aggregates        : constant Boolean := True;\n+   Support_Composite_Assign  : constant Boolean := True;\n+   Support_Composite_Compare : constant Boolean := True;\n+   Support_Long_Shifts       : constant Boolean := True;\n+   Suppress_Standard_Library : constant Boolean := False;\n+   Use_Ada_Main_Program_Name : constant Boolean := False;\n+   ZCX_By_Default            : constant Boolean := True;\n+   GCC_ZCX_Support           : constant Boolean := True;\n+   Front_End_ZCX_Support     : constant Boolean := False;\n+\n+   --  Obsolete entries, to be removed eventually (bootstrap issues!)\n+\n+   High_Integrity_Mode       : constant Boolean := False;\n+   Long_Shifts_Inlined       : constant Boolean := False;\n+\n+end System;"}]}