{"sha": "2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmE2MGE5ZjY1MjNiOTk0MmMyYTJkOWY1NjVlY2M3MGVlYWQ1ZWIxZA==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2010-02-04T18:20:34Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2010-02-04T18:20:34Z"}, "message": "re PR libstdc++/42460 (man page errors for generated libstdc++ man pages)\n\n2010-02-04  Benjamin Kosnik  <bkoz@redhat.com>\n\n\tPR libstdc++/42460\n\t* doc/doxygen/user.cfg.in: Update file list.\n\t* include/debug/safe_sequence.h: Doxygen markup fixes for '' and \"\".\n\t* include/debug/safe_base.h: Same.\n\t* include/debug/macros.h: Same.\n\t* include/tr1_impl/regex: Same.\n\t* include/std/iostream: Same.\n\t* include/std/streambuf: Same.\n\t* include/std/bitset: Same.\n\t* include/std/iosfwd: Same.\n\t* include/std/limits: Same.\n\t* include/std/fstream: Same.\n\t* include/std/istream: Same.\n\t* include/std/ostream: Same.\n\t* include/std/sstream: Same.\n\t* include/parallel/multiway_merge.h: Same.\n\t* include/parallel/for_each.h: Same.\n\t* include/parallel/workstealing.h: Same.\n\t* include/parallel/omp_loop_static.h: Same.\n\t* include/parallel/omp_loop.h: Same.\n\t* include/c_std/csignal: Same.\n\t* include/c_std/cstdlib: Same.\n\t* include/c_std/cstdio: Same.\n\t* include/c_std/cstdarg: Same.\n\t* include/c_std/cctype: Same.\n\t* include/c_std/cerrno: Same.\n\t* include/c_std/cmath: Same.\n\t* include/c_std/ciso646: Same.\n\t* include/c_std/ctime: Same.\n\t* include/c_std/clocale: Same.\n\t* include/c_std/climits: Same.\n\t* include/c_std/cassert: Same.\n\t* include/c_std/csetjmp: Same.\n\t* include/c_std/cwchar: Same.\n\t* include/c_std/cfloat: Same.\n\t* include/c_std/cstring: Same.\n\t* include/c_std/cstddef: Same.\n\t* include/c_std/cwctype: Same.\n\t* include/profile/iterator_tracker.h: Same.\n\t* include/profile/impl/profiler_trace.h: Same.\n\t* include/ext/vstring.h: Same.\n\t* include/ext/algorithm: Same.\n\t* include/ext/pb_ds/detail/pat_trie_/pat_trie_.h.pp: Same.\n\t* include/ext/pb_ds/detail/bin_search_tree_/bin_search_tree_.h.pp: Same.\n\t* include/ext/pb_ds/detail/type_utils.hpp: Same.\n\t* include/ext/pb_ds/detail/splay_tree_/splay_tree_.hpp: Same\n\t* include/ext/pb_ds/detail/rb_tree_map_/rb_tree_.hpp: Same.\n\t* include/ext/rc_string_base.h: Same.\n\t* include/ext/stdio_sync_filebuf.h: Same.\n\t* include/ext/functional: Same.\n\t* include/ext/mt_allocator.h: Same.\n\t* include/bits/basic_ios.h: Same.\n\t* include/bits/stl_map.h: Same.\n\t* include/bits/stl_algobase.h: Same.\n\t* include/bits/stl_queue.h: Same.\n\t* include/bits/locale_classes.h: Same.\n\t* include/bits/stl_set.h: Same.\n\t* include/bits/locale_facets.h: Same.\n\t* include/bits/stl_stack.h: Same.\n\t* include/bits/stl_iterator_base_types.h: Same.\n\t* include/bits/basic_string.h: Same.\n\t* include/bits/stl_multimap.h: Same.\n\t* include/bits/ios_base.h: Same.\n\t* include/bits/stl_deque.h: Same.\n\t* include/bits/stl_multiset.h: Same.\n\t* include/bits/stl_iterator_base_funcs.h: Same.\n\t* include/bits/char_traits.h: Same.\n\t* include/bits/stl_algo.h: Same.\n\t* include/bits/stl_iterator.h: Same.\n\t* include/bits/stl_tempbuf.h: Same.\n\t* include/bits/random.tcc: Same.\n\t* include/bits/stl_function.h: Same.\n\t* include/bits/cpp_type_traits.h: Same.\n\t* include/bits/random.h: Same.\n\t* include/bits/allocator.h: Same.\n\t* include/bits/locale_facets_nonio.h: Same.\n\t* include/c_global/csignal: Same.\n\t* include/c_global/cstdlib: Same.\n\t* include/c_global/cstdio: Same.\n\t* include/c_global/cstdarg: Same.\n\t* include/c_global/cctype: Same.\n\t* include/c_global/cerrno: Same.\n\t* include/c_global/cmath: Same.\n\t* include/c_global/ciso646: Same.\n\t* include/c_global/ctime: Same.\n\t* include/c_global/clocale: Same.\n\t* include/c_global/climits: Same.\n\t* include/c_global/cassert: Same.\n\t* include/c_global/csetjmp: Same.\n\t* include/c_global/cwchar: Same.\n\t* include/c_global/cfloat: Same.\n\t* include/c_global/cstring: Same.\n\t* include/c_global/cstddef: Same.\n\t* include/c_global/cwctype: Same.\n\t* include/tr1/hypergeometric.tcc: Same.\n\t* include/tr1/random.tcc: Same.\n\t* include/tr1/functional: Same.\n\t* include/tr1/random.h: Same.\n\t* include/backward/auto_ptr.h: Same.\n\t* include/backward/binders.h: Same.\n\t* testsuite/23_containers/deque/requirements/dr438/assign_neg.cc:\n\tAdjust line numbers.\n\t* testsuite/23_containers/deque/requirements/dr438/insert_neg.cc: Same.\n\t* testsuite/23_containers/deque/requirements/dr438/constructor_1_neg.cc:\n\tSame.\n\t* testsuite/23_containers/deque/requirements/dr438/constructor_2_neg.cc:\n\tSame.\n\nFrom-SVN: r156502", "tree": {"sha": "6e1ccffdd20429524a30357350839bd5d4964941", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6e1ccffdd20429524a30357350839bd5d4964941"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/comments", "author": null, "committer": null, "parents": [{"sha": "2480e18fe054c7b3a343d7b7bccbc0deb03d4a4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2480e18fe054c7b3a343d7b7bccbc0deb03d4a4a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2480e18fe054c7b3a343d7b7bccbc0deb03d4a4a"}], "stats": {"total": 1019, "additions": 579, "deletions": 440}, "files": [{"sha": "5e5f22a200aebad6b216206c830b5d8760a38417", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d", "patch": "@@ -1,3 +1,113 @@\n+2010-02-04  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\tPR libstdc++/42460\n+\t* doc/doxygen/user.cfg.in: Update file list.\n+\t* include/debug/safe_sequence.h: Doxygen markup fixes for '' and \"\".\n+\t* include/debug/safe_base.h: Same.\n+\t* include/debug/macros.h: Same.\n+\t* include/tr1_impl/regex: Same.\n+\t* include/std/iostream: Same.\n+\t* include/std/streambuf: Same.\n+\t* include/std/bitset: Same.\n+\t* include/std/iosfwd: Same.\n+\t* include/std/limits: Same.\n+\t* include/std/fstream: Same.\n+\t* include/std/istream: Same.\n+\t* include/std/ostream: Same.\n+\t* include/std/sstream: Same.\n+\t* include/parallel/multiway_merge.h: Same.\n+\t* include/parallel/for_each.h: Same.\n+\t* include/parallel/workstealing.h: Same.\n+\t* include/parallel/omp_loop_static.h: Same.\n+\t* include/parallel/omp_loop.h: Same.\n+\t* include/c_std/csignal: Same.\n+\t* include/c_std/cstdlib: Same.\n+\t* include/c_std/cstdio: Same.\n+\t* include/c_std/cstdarg: Same.\n+\t* include/c_std/cctype: Same.\n+\t* include/c_std/cerrno: Same.\n+\t* include/c_std/cmath: Same.\n+\t* include/c_std/ciso646: Same.\n+\t* include/c_std/ctime: Same.\n+\t* include/c_std/clocale: Same.\n+\t* include/c_std/climits: Same.\n+\t* include/c_std/cassert: Same.\n+\t* include/c_std/csetjmp: Same.\n+\t* include/c_std/cwchar: Same.\n+\t* include/c_std/cfloat: Same.\n+\t* include/c_std/cstring: Same.\n+\t* include/c_std/cstddef: Same.\n+\t* include/c_std/cwctype: Same.\n+\t* include/profile/iterator_tracker.h: Same.\n+\t* include/profile/impl/profiler_trace.h: Same.\n+\t* include/ext/vstring.h: Same.\n+\t* include/ext/algorithm: Same.\n+\t* include/ext/pb_ds/detail/pat_trie_/pat_trie_.h.pp: Same.\n+\t* include/ext/pb_ds/detail/bin_search_tree_/bin_search_tree_.h.pp: Same.\n+\t* include/ext/pb_ds/detail/type_utils.hpp: Same.\n+\t* include/ext/pb_ds/detail/splay_tree_/splay_tree_.hpp: Same\n+\t* include/ext/pb_ds/detail/rb_tree_map_/rb_tree_.hpp: Same.\n+\t* include/ext/rc_string_base.h: Same.\n+\t* include/ext/stdio_sync_filebuf.h: Same.\n+\t* include/ext/functional: Same.\n+\t* include/ext/mt_allocator.h: Same.\n+\t* include/bits/basic_ios.h: Same.\n+\t* include/bits/stl_map.h: Same.\n+\t* include/bits/stl_algobase.h: Same.\n+\t* include/bits/stl_queue.h: Same.\n+\t* include/bits/locale_classes.h: Same.\n+\t* include/bits/stl_set.h: Same.\n+\t* include/bits/locale_facets.h: Same.\n+\t* include/bits/stl_stack.h: Same.\n+\t* include/bits/stl_iterator_base_types.h: Same.\n+\t* include/bits/basic_string.h: Same.\n+\t* include/bits/stl_multimap.h: Same.\n+\t* include/bits/ios_base.h: Same.\n+\t* include/bits/stl_deque.h: Same.\n+\t* include/bits/stl_multiset.h: Same.\n+\t* include/bits/stl_iterator_base_funcs.h: Same.\n+\t* include/bits/char_traits.h: Same.\n+\t* include/bits/stl_algo.h: Same.\n+\t* include/bits/stl_iterator.h: Same.\n+\t* include/bits/stl_tempbuf.h: Same.\n+\t* include/bits/random.tcc: Same.\n+\t* include/bits/stl_function.h: Same.\n+\t* include/bits/cpp_type_traits.h: Same.\n+\t* include/bits/random.h: Same.\n+\t* include/bits/allocator.h: Same.\n+\t* include/bits/locale_facets_nonio.h: Same.\n+\t* include/c_global/csignal: Same.\n+\t* include/c_global/cstdlib: Same.\n+\t* include/c_global/cstdio: Same.\n+\t* include/c_global/cstdarg: Same.\n+\t* include/c_global/cctype: Same.\n+\t* include/c_global/cerrno: Same.\n+\t* include/c_global/cmath: Same.\n+\t* include/c_global/ciso646: Same.\n+\t* include/c_global/ctime: Same.\n+\t* include/c_global/clocale: Same.\n+\t* include/c_global/climits: Same.\n+\t* include/c_global/cassert: Same.\n+\t* include/c_global/csetjmp: Same.\n+\t* include/c_global/cwchar: Same.\n+\t* include/c_global/cfloat: Same.\n+\t* include/c_global/cstring: Same.\n+\t* include/c_global/cstddef: Same.\n+\t* include/c_global/cwctype: Same.\n+\t* include/tr1/hypergeometric.tcc: Same.\n+\t* include/tr1/random.tcc: Same.\n+\t* include/tr1/functional: Same.\n+\t* include/tr1/random.h: Same.\n+\t* include/backward/auto_ptr.h: Same.\n+\t* include/backward/binders.h: Same.\n+\t* testsuite/23_containers/deque/requirements/dr438/assign_neg.cc:\n+\tAdjust line numbers.\n+\t* testsuite/23_containers/deque/requirements/dr438/insert_neg.cc: Same.\n+\t* testsuite/23_containers/deque/requirements/dr438/constructor_1_neg.cc:\n+\tSame.\n+\t* testsuite/23_containers/deque/requirements/dr438/constructor_2_neg.cc:\n+\tSame.\n+\n 2010-02-03  Jonathan Wakely  <jwakely.gcc@gmail.com>\n \n \t* include/std/condition_variable (condition_variable_any): Provide"}, {"sha": "318dc8404dceca332b0eb94e3d1e7a42e29e7bb4", "filename": "libstdc++-v3/doc/doxygen/user.cfg.in", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Fdoc%2Fdoxygen%2Fuser.cfg.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Fdoc%2Fdoxygen%2Fuser.cfg.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fdoxygen%2Fuser.cfg.in?ref=2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d", "patch": "@@ -704,7 +704,6 @@ INPUT                  = @srcdir@/doc/doxygen/doxygroups.cc \\\n                          include/tr1_impl/cstdlib \\\n                          include/tr1_impl/cwchar \\\n                          include/tr1_impl/cwctype \\\n-                         include/tr1_impl/functional \\\n                          include/tr1_impl/hashtable \\\n                          include/tr1_impl/regex \\\n                          include/tr1_impl/type_traits \\"}, {"sha": "aa3213d6373d0da867f7117ea4de99905df4dc6b", "filename": "libstdc++-v3/include/backward/auto_ptr.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fauto_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fauto_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fauto_ptr.h?ref=2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d", "patch": "@@ -1,6 +1,6 @@\n // auto_ptr implementation -*- C++ -*-\n \n-// Copyright (C) 2007, 2008, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2007, 2008, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -171,8 +171,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *  @brief  Smart pointer dereferencing.\n        *\n        *  If this %auto_ptr no longer owns anything, then this\n-       *  operation will crash.  (For a smart pointer, \"no longer owns\n-       *  anything\" is the same as being a null pointer, and you know\n+       *  operation will crash.  (For a smart pointer, <em>no longer owns\n+       *  anything</em> is the same as being a null pointer, and you know\n        *  what happens when you dereference one of those...)\n        */\n       element_type&"}, {"sha": "5145860c52aadba1693f6c0c3dbc0c802abc8ecd", "filename": "libstdc++-v3/include/backward/binders.h", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fbinders.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fbinders.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fbinders.h?ref=2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d", "patch": "@@ -1,6 +1,6 @@\n // Functor implementations -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2009\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -63,27 +63,28 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   /** @defgroup binders Binder Classes\n    * @ingroup functors\n    *\n-   *  Binders turn functions/functors with two arguments into functors with\n-   *  a single argument, storing an argument to be applied later.  For\n-   *  example, a variable @c B of type @c binder1st is constructed from a\n-   *  functor @c f and an argument @c x.  Later, B's @c operator() is called\n-   *  with a single argument @c y.  The return value is the value of @c f(x,y).\n-   *  @c B can be \"called\" with various arguments (y1, y2, ...) and will in\n-   *  turn call @c f(x,y1), @c f(x,y2), ...\n+   *  Binders turn functions/functors with two arguments into functors\n+   *  with a single argument, storing an argument to be applied later.\n+   *  For example, a variable @c B of type @c binder1st is constructed\n+   *  from a functor @c f and an argument @c x. Later, B's @c\n+   *  operator() is called with a single argument @c y. The return\n+   *  value is the value of @c f(x,y). @c B can be @a called with\n+   *  various arguments (y1, y2, ...) and will in turn call @c\n+   *  f(x,y1), @c f(x,y2), ...\n    *\n-   *  The function @c bind1st is provided to save some typing.  It takes the\n+   *  The function @c bind1st is provided to save some typing. It takes the\n    *  function and an argument as parameters, and returns an instance of\n    *  @c binder1st.\n    *\n    *  The type @c binder2nd and its creator function @c bind2nd do the same\n    *  thing, but the stored argument is passed as the second parameter instead\n    *  of the first, e.g., @c bind2nd(std::minus<float>,1.3) will create a\n    *  functor whose @c operator() accepts a floating-point number, subtracts\n-   *  1.3 from it, and returns the result.  (If @c bind1st had been used,\n-   *  the functor would perform \"1.3 - x\" instead.\n+   *  1.3 from it, and returns the result. (If @c bind1st had been used,\n+   *  the functor would perform <em>1.3 - x</em> instead.\n    *\n    *  Creator-wrapper functions like @c bind1st are intended to be used in\n-   *  calling algorithms.  Their return values will be temporary objects.\n+   *  calling algorithms. Their return values will be temporary objects.\n    *  (The goal is to not require you to type names like\n    *  @c std::binder1st<std::plus<int>> for declaring a variable to hold the\n    *  return value from @c bind1st(std::plus<int>,5)."}, {"sha": "ddf48db4cc26ba1c6653b4ff9fb1c07a5c965cbd", "filename": "libstdc++-v3/include/bits/allocator.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fallocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fallocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fallocator.h?ref=2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d", "patch": "@@ -76,7 +76,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     };\n \n   /**\n-   * @brief  The \"standard\" allocator, as per [20.4].\n+   * @brief  The @a standard allocator, as per [20.4].\n    * @ingroup allocators\n    *\n    *  Further details:"}, {"sha": "ba06316b8d1ca13660a7f9fe690bc0ff217f9fea", "filename": "libstdc++-v3/include/bits/basic_ios.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.h?ref=2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d", "patch": "@@ -1,7 +1,7 @@\n // Iostreams base classes -*- C++ -*-\n \n // Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-// 2006, 2007, 2008, 2009\n+// 2006, 2007, 2008, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -106,7 +106,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *  @brief  The quick-and-easy status check.\n        *\n        *  This allows you to write constructs such as\n-       *  \"if (!a_stream) ...\" and \"while (a_stream) ...\"\n+       *  <code>if (!a_stream) ...</code> and <code>while (a_stream) ...</code>\n       */\n       operator void*() const\n       { return this->fail() ? 0 : const_cast<basic_ios*>(this); }\n@@ -351,7 +351,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       copyfmt(const basic_ios& __rhs);\n \n       /**\n-       *  @brief  Retrieves the \"empty\" character.\n+       *  @brief  Retrieves the @a empty character.\n        *  @return  The current fill character.\n        *\n        *  It defaults to a space (' ') in the current locale.\n@@ -368,7 +368,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       }\n \n       /**\n-       *  @brief  Sets a new \"empty\" character.\n+       *  @brief  Sets a new @a empty character.\n        *  @param  ch  The new character.\n        *  @return  The previous fill character.\n        *"}, {"sha": "b0f18101a7649bf51dce044df3fd721ee1dfb671", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d", "patch": "@@ -79,7 +79,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n    *  This approach has the enormous advantage that a string object\n    *  requires only one allocation.  All the ugliness is confined\n    *  within a single pair of inline functions, which each compile to\n-   *  a single \"add\" instruction: _Rep::_M_data(), and\n+   *  a single @a add instruction: _Rep::_M_data(), and\n    *  string::_M_rep(); and the allocation function which gets a\n    *  block of raw bytes and with room enough and constructs a _Rep\n    *  object at the front.\n@@ -91,7 +91,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n    *  string length.)\n    *\n    *  Note that the _Rep object is a POD so that you can have a\n-   *  static \"empty string\" _Rep object already \"constructed\" before\n+   *  static <em>empty string</em> _Rep object already @a constructed before\n    *  static constructors have run.  The reference-count encoding is\n    *  chosen so that a 0 indicates one reference, so you never try to\n    *  destroy the empty-string _Rep object.\n@@ -462,8 +462,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *  @param  n  Number of characters to copy.\n        *  @param  a  Allocator to use (default is default allocator).\n        *\n-       *  NB: @a s must have at least @a n characters, '\\\\0' has no special\n-       *  meaning.\n+       *  NB: @a s must have at least @a n characters, &apos;\\\\0&apos;\n+       *  has no special meaning.\n        */\n       basic_string(const _CharT* __s, size_type __n,\n \t\t   const _Alloc& __a = _Alloc());\n@@ -786,7 +786,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       { _M_mutate(0, this->size(), 0); }\n \n       /**\n-       *  Returns true if the %string is empty.  Equivalent to *this == \"\".\n+       *  Returns true if the %string is empty.  Equivalent to \n+       *  <code>*this == \"\"</code>.\n        */\n       bool\n       empty() const\n@@ -2241,8 +2242,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *  result of the comparison is nonzero returns it, otherwise the shorter\n        *  one is ordered first.\n        *\n-       *  NB: s must have at least n2 characters, '\\\\0' has no special\n-       *  meaning.\n+       *  NB: s must have at least n2 characters, &apos;\\\\0&apos; has\n+       *  no special meaning.\n       */\n       int\n       compare(size_type __pos, size_type __n1, const _CharT* __s,\n@@ -2627,11 +2628,12 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n    *  @param str  Buffer to store into.\n    *  @return  Reference to the input stream.\n    *\n-   *  Stores characters from is into @a str until '\\n' is found, the end of\n-   *  the stream is encountered, or str.max_size() is reached.  If is.width()\n-   *  is non-zero, that is the limit on the number of characters stored into\n-   *  @a str.  Any previous contents of @a str are erased.  If end of line was\n-   *  encountered, it is extracted but not stored into @a str.\n+   *  Stores characters from is into @a str until &apos;\\n&apos; is\n+   *  found, the end of the stream is encountered, or str.max_size()\n+   *  is reached.  If is.width() is non-zero, that is the limit on the\n+   *  number of characters stored into @a str.  Any previous contents\n+   *  of @a str are erased.  If end of line was encountered, it is\n+   *  extracted but not stored into @a str.\n    */\n   template<typename _CharT, typename _Traits, typename _Alloc>\n     inline basic_istream<_CharT, _Traits>&"}, {"sha": "412e75a2ec01bee45c5ab9c0197fa7bbc14ba880", "filename": "libstdc++-v3/include/bits/char_traits.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fchar_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fchar_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fchar_traits.h?ref=2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d", "patch": "@@ -1,7 +1,7 @@\n // Character Traits for use by standard string and iostream -*- C++ -*-\n \n // Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-// 2006, 2007, 2008, 2009\n+// 2006, 2007, 2008, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -83,7 +83,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n    *  namespace __gnu_cxx may be.\n    *\n    *  See http://gcc.gnu.org/onlinedocs/libstdc++/manual/bk01pt05ch13s03.html\n-   *  for advice on how to make use of this class for \"unusual\" character\n+   *  for advice on how to make use of this class for @a unusual character\n    *  types. Also, check out include/ext/pod_char_traits.h.  \n    */\n   template<typename _CharT>\n@@ -224,7 +224,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n    *  appropriate definition by specializing __gnu_cxx::char_traits.\n    *\n    *  See http://gcc.gnu.org/onlinedocs/libstdc++/manual/bk01pt05ch13s03.html\n-   *  for advice on how to make use of this class for \"unusual\" character\n+   *  for advice on how to make use of this class for @a unusual character\n    *  types. Also, check out include/ext/pod_char_traits.h.\n   */\n   template<class _CharT>"}, {"sha": "0d7b9ff09fcd0a384f3ee8ec62ae3788ee0686d6", "filename": "libstdc++-v3/include/bits/cpp_type_traits.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcpp_type_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcpp_type_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcpp_type_traits.h?ref=2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d", "patch": "@@ -1,6 +1,6 @@\n // The  -*- C++ -*- type traits classes for internal use in libstdc++\n \n-// Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2009\n+// Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -136,8 +136,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     };\n \n   // Thirteen specializations (yes there are eleven standard integer\n-  // types; 'long long' and 'unsigned long long' are supported as\n-  // extensions)\n+  // types; <em>long long</em> and <em>unsigned long long</em> are\n+  // supported as extensions)\n   template<>\n     struct __is_integer<bool>\n     {"}, {"sha": "f1be6aeb2e9803665553b921a9987cdc0376bd37", "filename": "libstdc++-v3/include/bits/ios_base.h", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h?ref=2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d", "patch": "@@ -1,7 +1,7 @@\n // Iostreams base classes -*- C++ -*-\n \n // Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-// 2006, 2007, 2008, 2009\n+// 2006, 2007, 2008, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -238,7 +238,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     /**\n      *  @brief This is a bitmask type.\n      *\n-     *  @c \"_Ios_Fmtflags\" is implementation-defined, but it is valid to\n+     *  @c @a _Ios_Fmtflags is implementation-defined, but it is valid to\n      *  perform bitwise operations on these values and expect the Right\n      *  Thing to happen.  Defined objects of type fmtflags are:\n      *  - boolalpha\n@@ -327,7 +327,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     /**\n      *  @brief This is a bitmask type.\n      *\n-     *  @c \"_Ios_Iostate\" is implementation-defined, but it is valid to\n+     *  @c @a _Ios_Iostate is implementation-defined, but it is valid to\n      *  perform bitwise operations on these values and expect the Right\n      *  Thing to happen.  Defined objects of type iostate are:\n      *  - badbit\n@@ -356,7 +356,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     /**\n      *  @brief This is a bitmask type.\n      *\n-     *  @c \"_Ios_Openmode\" is implementation-defined, but it is valid to\n+     *  @c @a _Ios_Openmode is implementation-defined, but it is valid to\n      *  perform bitwise operations on these values and expect the Right\n      *  Thing to happen.  Defined objects of type openmode are:\n      *  - app\n@@ -392,7 +392,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     /**\n      *  @brief This is an enumerated type.\n      *\n-     *  @c \"_Ios_Seekdir\" is implementation-defined.  Defined values\n+     *  @c @a _Ios_Seekdir is implementation-defined.  Defined values\n      *  of type seekdir are:\n      *  - beg\n      *  - cur, equivalent to @c SEEK_CUR in the C standard library.\n@@ -618,7 +618,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n      *  @brief  Flags access.\n      *  @return  The precision to generate on certain output operations.\n      *\n-     *  Be careful if you try to give a definition of \"precision\" here; see\n+     *  Be careful if you try to give a definition of @a precision here; see\n      *  DR 189.\n     */\n     streamsize\n@@ -642,7 +642,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n      *  @brief  Flags access.\n      *  @return  The minimum field width to generate on output operations.\n      *\n-     *  \"Minimum field width\" refers to the number of characters.\n+     *  <em>Minimum field width</em> refers to the number of characters.\n     */\n     streamsize\n     width() const"}, {"sha": "d966a3119bc17b2ee5fe682b61ee7768c9ce21b8", "filename": "libstdc++-v3/include/bits/locale_classes.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.h?ref=2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d", "patch": "@@ -1,7 +1,7 @@\n // Locale support -*- C++ -*-\n \n // Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-// 2006, 2007, 2008, 2009\n+// 2006, 2007, 2008, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -111,7 +111,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n      *  @brief  Default constructor.\n      *\n      *  Constructs a copy of the global locale.  If no locale has been\n-     *  explicitly set, this is the \"C\" locale.\n+     *  explicitly set, this is the C locale.\n     */\n     locale() throw();\n \n@@ -268,7 +268,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     global(const locale&);\n \n     /**\n-     *  @brief  Return reference to the \"C\" locale.\n+     *  @brief  Return reference to the C locale.\n     */\n     static const locale&\n     classic();\n@@ -641,7 +641,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *  This is a constructor for use by the library itself to set up new\n        *  locales.\n        *\n-       *  @param cloc  The \"C\" locale.\n+       *  @param cloc  The C locale.\n        *  @param refs  Passed to the base facet class.\n       */\n       explicit\n@@ -671,7 +671,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *\n        *  This function is a wrapper for strxfrm functionality.  It takes the\n        *  input string and returns a modified string that can be directly\n-       *  compared to other transformed strings.  In the \"C\" locale, this\n+       *  compared to other transformed strings.  In the C locale, this\n        *  function just returns a copy of the input string.  In some other\n        *  locales, it may replace two chars with one, change a char for\n        *  another, etc.  It does so by returning collate::do_transform()."}, {"sha": "b3f2139ed4067f7963540c56a3d867f7b579e452", "filename": "libstdc++-v3/include/bits/locale_facets.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h?ref=2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d", "patch": "@@ -1,7 +1,7 @@\n // Locale support -*- C++ -*-\n \n // Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-// 2006, 2007, 2008, 2009\n+// 2006, 2007, 2008, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -1680,7 +1680,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *  This is a constructor for use by the library itself to set up new\n        *  locales.\n        *\n-       *  @param  cloc  The \"C\" locale.\n+       *  @param  cloc  The C locale.\n        *  @param  refs  Refcount to pass to the base class.\n        */\n       explicit"}, {"sha": "b1d4c6049f5e16dd8ccfd8b625bce09cee3b2025", "filename": "libstdc++-v3/include/bits/locale_facets_nonio.h", "status": "modified", "additions": 38, "deletions": 33, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets_nonio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets_nonio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets_nonio.h?ref=2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d", "patch": "@@ -200,7 +200,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *  This is a constructor for use by the library itself to set up new\n        *  locales.\n        *\n-       *  @param cloc  The \"C\" locale.\n+       *  @param cloc  The C locale.\n        *  @param s  The name of a locale.\n        *  @param refs  Passed to the base facet class.\n       */\n@@ -387,8 +387,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *  @brief  Return preferred order of month, day, and year.\n        *\n        *  This function returns an enum from timebase::dateorder giving the\n-       *  preferred ordering if the format \"x\" given to time_put::put() only\n-       *  uses month, day, and year.  If the format \"x\" for the associated\n+       *  preferred ordering if the format @a x given to time_put::put() only\n+       *  uses month, day, and year.  If the format @a x for the associated\n        *  locale uses other fields, this function returns\n        *  timebase::dateorder::noorder.\n        *\n@@ -403,11 +403,11 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       /**\n        *  @brief  Parse input time string.\n        *\n-       *  This function parses a time according to the format \"x\" and puts the\n+       *  This function parses a time according to the format @a x and puts the\n        *  results into a user-supplied struct tm.  The result is returned by\n        *  calling time_get::do_get_time().\n        *\n-       *  If there is a valid time string according to format \"x\", @a tm will\n+       *  If there is a valid time string according to format @a x, @a tm will\n        *  be filled in accordingly and the returned iterator will point to the\n        *  first character beyond the time string.  If an error occurs before\n        *  the end, err |= ios_base::failbit.  If parsing reads all the\n@@ -428,11 +428,11 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       /**\n        *  @brief  Parse input date string.\n        *\n-       *  This function parses a date according to the format \"X\" and puts the\n+       *  This function parses a date according to the format @a X and puts the\n        *  results into a user-supplied struct tm.  The result is returned by\n        *  calling time_get::do_get_date().\n        *\n-       *  If there is a valid date string according to format \"X\", @a tm will\n+       *  If there is a valid date string according to format @a X, @a tm will\n        *  be filled in accordingly and the returned iterator will point to the\n        *  first character beyond the date string.  If an error occurs before\n        *  the end, err |= ios_base::failbit.  If parsing reads all the\n@@ -542,7 +542,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *  @brief  Return preferred order of month, day, and year.\n        *\n        *  This function returns an enum from timebase::dateorder giving the\n-       *  preferred ordering if the format \"x\" given to time_put::put() only\n+       *  preferred ordering if the format @a x given to time_put::put() only\n        *  uses month, day, and year.  This function is a hook for derived\n        *  classes to change the value returned.\n        *\n@@ -554,7 +554,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       /**\n        *  @brief  Parse input time string.\n        *\n-       *  This function parses a time according to the format \"x\" and puts the\n+       *  This function parses a time according to the format @a x and puts the\n        *  results into a user-supplied struct tm.  This function is a hook for\n        *  derived classes to change the value returned.  @see get_time() for\n        *  details.\n@@ -573,7 +573,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       /**\n        *  @brief  Parse input date string.\n        *\n-       *  This function parses a date according to the format \"X\" and puts the\n+       *  This function parses a date according to the format @a X and puts the\n        *  results into a user-supplied struct tm.  This function is a hook for\n        *  derived classes to change the value returned.  @see get_date() for\n        *  details.\n@@ -972,7 +972,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *  This is a constructor for use by the library itself to set up new\n        *  locales.\n        *\n-       *  @param cloc  The \"C\" locale.\n+       *  @param cloc  The C locale.\n        *  @param s  The name of a locale.\n        *  @param refs  Passed to the base facet class.\n       */\n@@ -1022,10 +1022,11 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *  string are required to group a number, the last char is used\n        *  repeatedly.\n        *\n-       *  For example, if the grouping() returns \"\\003\\002\" and is applied to\n-       *  the number 123456789, this corresponds to 12,34,56,789.  Note that\n-       *  if the string was \"32\", this would put more than 50 digits into the\n-       *  least significant group if the character set is ASCII.\n+       *  For example, if the grouping() returns <code>\\003\\002</code>\n+       *  and is applied to the number 123456789, this corresponds to\n+       *  12,34,56,789.  Note that if the string was <code>32</code>, this would\n+       *  put more than 50 digits into the least significant group if\n+       *  the character set is ASCII.\n        *\n        *  The string is returned by calling\n        *  moneypunct<char_type>::do_grouping().\n@@ -1124,9 +1125,10 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *  present.\n        *\n        *  For example, for the US locale and pos_format() pattern\n-       *  {symbol,sign,value,none}, curr_symbol() == '$' positive_sign() ==\n-       *  '+', and value 10.01, and options set to force the symbol, the\n-       *  corresponding string is \"$+10.01\".\n+       *  {symbol,sign,value,none}, curr_symbol() == &apos;$&apos;\n+       *  positive_sign() == &apos;+&apos;, and value 10.01, and\n+       *  options set to force the symbol, the corresponding string is\n+       *  <code>$+10.01</code>.\n        *\n        *  @return  Pattern for money values.\n       */\n@@ -1412,10 +1414,11 @@ _GLIBCXX_BEGIN_LDBL_NAMESPACE\n       /**\n        *  @brief  Read and parse a monetary value.\n        *\n-       *  This function reads characters from @a s, interprets them as a\n-       *  monetary value according to moneypunct and ctype facets retrieved\n-       *  from io.getloc(), and returns the result in @a digits.  For example,\n-       *  the string $10.01 in a US locale would store \"1001\" in @a digits.\n+       *  This function reads characters from @a s, interprets them as\n+       *  a monetary value according to moneypunct and ctype facets\n+       *  retrieved from io.getloc(), and returns the result in @a\n+       *  digits.  For example, the string $10.01 in a US locale would\n+       *  store <code>1001</code> in @a digits.\n        *\n        *  Any characters not part of a valid money amount are not consumed.\n        *\n@@ -1531,7 +1534,7 @@ _GLIBCXX_BEGIN_LDBL_NAMESPACE\n        *  This function formats @a units as a monetary value according to\n        *  moneypunct and ctype facets retrieved from io.getloc(), and writes\n        *  the resulting characters to @a s.  For example, the value 1001 in a\n-       *  US locale would write \"$10.01\" to @a s.\n+       *  US locale would write <code>$10.01</code> to @a s.\n        *\n        *  This function works by returning the result of do_put().\n        *\n@@ -1550,10 +1553,11 @@ _GLIBCXX_BEGIN_LDBL_NAMESPACE\n       /**\n        *  @brief  Format and output a monetary value.\n        *\n-       *  This function formats @a digits as a monetary value according to\n-       *  moneypunct and ctype facets retrieved from io.getloc(), and writes\n-       *  the resulting characters to @a s.  For example, the string \"1001\" in\n-       *  a US locale would write \"$10.01\" to @a s.\n+       *  This function formats @a digits as a monetary value\n+       *  according to moneypunct and ctype facets retrieved from\n+       *  io.getloc(), and writes the resulting characters to @a s.\n+       *  For example, the string <code>1001</code> in a US locale\n+       *  would write <code>$10.01</code> to @a s.\n        *\n        *  This function works by returning the result of do_put().\n        *\n@@ -1580,7 +1584,7 @@ _GLIBCXX_BEGIN_LDBL_NAMESPACE\n        *  This function formats @a units as a monetary value according to\n        *  moneypunct and ctype facets retrieved from io.getloc(), and writes\n        *  the resulting characters to @a s.  For example, the value 1001 in a\n-       *  US locale would write \"$10.01\" to @a s.\n+       *  US locale would write <code>$10.01</code> to @a s.\n        *\n        *  This function is a hook for derived classes to change the value\n        *  returned.  @see put().\n@@ -1606,10 +1610,11 @@ _GLIBCXX_BEGIN_LDBL_NAMESPACE\n       /**\n        *  @brief  Format and output a monetary value.\n        *\n-       *  This function formats @a digits as a monetary value according to\n-       *  moneypunct and ctype facets retrieved from io.getloc(), and writes\n-       *  the resulting characters to @a s.  For example, the string \"1001\" in\n-       *  a US locale would write \"$10.01\" to @a s.\n+       *  This function formats @a digits as a monetary value\n+       *  according to moneypunct and ctype facets retrieved from\n+       *  io.getloc(), and writes the resulting characters to @a s.\n+       *  For example, the string <code>1001</code> in a US locale\n+       *  would write <code>$10.01</code> to @a s.\n        *\n        *  This function is a hook for derived classes to change the value\n        *  returned.  @see put().\n@@ -1709,7 +1714,7 @@ _GLIBCXX_END_LDBL_NAMESPACE\n        *  This is a constructor for use by the library itself to set up new\n        *  locales.\n        *\n-       *  @param  cloc  The \"C\" locale.\n+       *  @param  cloc  The C locale.\n        *  @param  s  The name of a locale.\n        *  @param  refs  Refcount to pass to the base class.\n        */"}, {"sha": "3a53fe30d211c72e75342812ef025a9ae0c09664", "filename": "libstdc++-v3/include/bits/random.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h?ref=2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d", "patch": "@@ -1340,8 +1340,8 @@ namespace std\n    * The classic Mersenne Twister.\n    *\n    * Reference:\n-   * M. Matsumoto and T. Nishimura, \"Mersenne Twister: A 623-Dimensionally\n-   * Equidistributed Uniform Pseudo-Random Number Generator\", ACM Transactions\n+   * M. Matsumoto and T. Nishimura, Mersenne Twister: A 623-Dimensionally\n+   * Equidistributed Uniform Pseudo-Random Number Generator, ACM Transactions\n    * on Modeling and Computer Simulation, Vol. 8, No. 1, January 1998, pp 3-30.\n    */\n   typedef mersenne_twister_engine<"}, {"sha": "ee92240365af5b4c19da1436e0ec9688b28608b0", "filename": "libstdc++-v3/include/bits/random.tcc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.tcc?ref=2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d", "patch": "@@ -1140,7 +1140,7 @@ namespace std\n    * is defined.\n    *\n    * Reference:\n-   * Devroye, L. \"Non-Uniform Random Variates Generation.\" Springer-Verlag,\n+   * Devroye, L. Non-Uniform Random Variates Generation. Springer-Verlag,\n    * New York, 1986, Ch. X, Sects. 3.3 & 3.4 (+ Errata!).\n    */\n   template<typename _IntType>\n@@ -1372,7 +1372,7 @@ namespace std\n    * is defined.\n    *\n    * Reference:\n-   * Devroye, L. \"Non-Uniform Random Variates Generation.\" Springer-Verlag,\n+   * Devroye, L. Non-Uniform Random Variates Generation. Springer-Verlag,\n    * New York, 1986, Ch. X, Sect. 4 (+ Errata!).\n    */\n   template<typename _IntType>\n@@ -1589,7 +1589,7 @@ namespace std\n   /**\n    * Polar method due to Marsaglia.\n    *\n-   * Devroye, L. \"Non-Uniform Random Variates Generation.\" Springer-Verlag,\n+   * Devroye, L. Non-Uniform Random Variates Generation. Springer-Verlag,\n    * New York, 1986, Ch. V, Sect. 4.4.\n    */\n   template<typename _RealType>"}, {"sha": "ed72656c09bcd7b64585619fe8d19e8cb8ba301d", "filename": "libstdc++-v3/include/bits/stl_algo.h", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h?ref=2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d", "patch": "@@ -1,6 +1,6 @@\n // Algorithm implementation -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -2460,8 +2460,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n    *  @param  first   An iterator.\n    *  @param  last    Another iterator.\n    *  @param  val     The search term.\n-   *  @return         An iterator pointing to the first element \"not less\n-   *                  than\" @a val, or end() if every element is less than \n+   *  @return         An iterator pointing to the first element <em>not less\n+   *                  than</em> @a val, or end() if every element is less than \n    *                  @a val.\n    *  @ingroup binary_search_algorithms\n   */\n@@ -2509,8 +2509,9 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n    *  @param  last    Another iterator.\n    *  @param  val     The search term.\n    *  @param  comp    A functor to use for comparisons.\n-   *  @return  An iterator pointing to the first element \"not less than\" @a val,\n-   *           or end() if every element is less than @a val.\n+   *  @return An iterator pointing to the first element <em>not less\n+   *           than</em> @a val, or end() if every element is less\n+   *           than @a val.\n    *  @ingroup binary_search_algorithms\n    *\n    *  The comparison function should have the same effects on ordering as\n@@ -3633,13 +3634,13 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   // max_element\n \n   /**\n-   *  @brief  Permute range into the next \"dictionary\" ordering.\n+   *  @brief  Permute range into the next @a dictionary ordering.\n    *  @ingroup sorting_algorithms\n    *  @param  first  Start of range.\n    *  @param  last   End of range.\n    *  @return  False if wrapped to first permutation, true otherwise.\n    *\n-   *  Treats all permutations of the range as a set of \"dictionary\" sorted\n+   *  Treats all permutations of the range as a set of @a dictionary sorted\n    *  sequences.  Permutes the current sequence into the next one of this set.\n    *  Returns true if there are more sequences to generate.  If the sequence\n    *  is the largest of the set, the smallest is generated and false returned.\n@@ -3687,7 +3688,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     }\n \n   /**\n-   *  @brief  Permute range into the next \"dictionary\" ordering using\n+   *  @brief  Permute range into the next @a dictionary ordering using\n    *          comparison functor.\n    *  @ingroup sorting_algorithms\n    *  @param  first  Start of range.\n@@ -3696,7 +3697,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n    *  @return  False if wrapped to first permutation, true otherwise.\n    *\n    *  Treats all permutations of the range [first,last) as a set of\n-   *  \"dictionary\" sorted sequences ordered by @a comp.  Permutes the current\n+   *  @a dictionary sorted sequences ordered by @a comp.  Permutes the current\n    *  sequence into the next one of this set.  Returns true if there are more\n    *  sequences to generate.  If the sequence is the largest of the set, the\n    *  smallest is generated and false returned.\n@@ -3745,13 +3746,13 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     }\n \n   /**\n-   *  @brief  Permute range into the previous \"dictionary\" ordering.\n+   *  @brief  Permute range into the previous @a dictionary ordering.\n    *  @ingroup sorting_algorithms\n    *  @param  first  Start of range.\n    *  @param  last   End of range.\n    *  @return  False if wrapped to last permutation, true otherwise.\n    *\n-   *  Treats all permutations of the range as a set of \"dictionary\" sorted\n+   *  Treats all permutations of the range as a set of @a dictionary sorted\n    *  sequences.  Permutes the current sequence into the previous one of this\n    *  set.  Returns true if there are more sequences to generate.  If the\n    *  sequence is the smallest of the set, the largest is generated and false\n@@ -3800,7 +3801,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     }\n \n   /**\n-   *  @brief  Permute range into the previous \"dictionary\" ordering using\n+   *  @brief  Permute range into the previous @a dictionary ordering using\n    *          comparison functor.\n    *  @ingroup sorting_algorithms\n    *  @param  first  Start of range.\n@@ -3809,7 +3810,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n    *  @return  False if wrapped to last permutation, true otherwise.\n    *\n    *  Treats all permutations of the range [first,last) as a set of\n-   *  \"dictionary\" sorted sequences ordered by @a comp.  Permutes the current\n+   *  @a dictionary sorted sequences ordered by @a comp.  Permutes the current\n    *  sequence into the previous one of this set.  Returns true if there are\n    *  more sequences to generate.  If the sequence is the smallest of the set,\n    *  the largest is generated and false returned.\n@@ -5347,8 +5348,8 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_P)\n    *  @param  last1   Another iterator.\n    *  @param  last2   Another iterator.\n    *  @param  result  An iterator pointing to the end of the merged range.\n-   *  @return         An iterator pointing to the first element \"not less\n-   *                  than\" @a val.\n+   *  @return         An iterator pointing to the first element <em>not less\n+   *                  than</em> @a val.\n    *\n    *  Merges the ranges [first1,last1) and [first2,last2) into the sorted range\n    *  [result, result + (last1-first1) + (last2-first2)).  Both input ranges"}, {"sha": "8e756a4fe4c1f2f7d3b8b305c9ce3f2eb23c6a2f", "filename": "libstdc++-v3/include/bits/stl_algobase.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h?ref=2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d", "patch": "@@ -995,17 +995,17 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_P)\n     }\n \n   /**\n-   *  @brief Performs 'dictionary' comparison on ranges.\n+   *  @brief Performs @b dictionary comparison on ranges.\n    *  @ingroup sorting_algorithms\n    *  @param  first1  An input iterator.\n    *  @param  last1   An input iterator.\n    *  @param  first2  An input iterator.\n    *  @param  last2   An input iterator.\n    *  @return   A boolean true or false.\n    *\n-   *  'Returns true if the sequence of elements defined by the range\n+   *  <em>Returns true if the sequence of elements defined by the range\n    *  [first1,last1) is lexicographically less than the sequence of elements\n-   *  defined by the range [first2,last2).  Returns false otherwise.'\n+   *  defined by the range [first2,last2).  Returns false otherwise.</em>\n    *  (Quoted from [25.3.8]/1.)  If the iterators are all character pointers,\n    *  then this is an inline call to @c memcmp.\n   */\n@@ -1032,7 +1032,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_P)\n     }\n \n   /**\n-   *  @brief Performs \"dictionary\" comparison on ranges.\n+   *  @brief Performs @b dictionary comparison on ranges.\n    *  @ingroup sorting_algorithms\n    *  @param  first1  An input iterator.\n    *  @param  last1   An input iterator."}, {"sha": "19022b0cf344e2ca83cf3a5138a7712539543f81", "filename": "libstdc++-v3/include/bits/stl_deque.h", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h?ref=2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d", "patch": "@@ -69,12 +69,13 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n    *  @param  size  The size of an element.\n    *  @return   The number (not byte size) of elements per node.\n    *\n-   *  This function started off as a compiler kludge from SGI, but seems to\n-   *  be a useful wrapper around a repeated constant expression.  The '512' is\n-   *  tunable (and no other code needs to change), but no investigation has\n-   *  been done since inheriting the SGI code.  Touch _GLIBCXX_DEQUE_BUF_SIZE\n-   *  only if you know what you are doing, however: changing it breaks the\n-   *  binary compatibility!!\n+   *  This function started off as a compiler kludge from SGI, but\n+   *  seems to be a useful wrapper around a repeated constant\n+   *  expression.  The @b 512 is tunable (and no other code needs to\n+   *  change), but no investigation has been done since inheriting the\n+   *  SGI code.  Touch _GLIBCXX_DEQUE_BUF_SIZE only if you know what\n+   *  you are doing, however: changing it breaks the binary\n+   *  compatibility!!\n   */\n \n #ifndef _GLIBCXX_DEQUE_BUF_SIZE\n@@ -650,14 +651,14 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n    *  - iterator    _M_start, _M_finish\n    *\n    *  map_size is at least 8.  %map is an array of map_size\n-   *  pointers-to-\"nodes\".  (The name %map has nothing to do with the\n-   *  std::map class, and \"nodes\" should not be confused with\n-   *  std::list's usage of \"node\".)\n+   *  pointers-to-@anodes.  (The name %map has nothing to do with the\n+   *  std::map class, and @b nodes should not be confused with\n+   *  std::list's usage of @a node.)\n    *\n-   *  A \"node\" has no specific type name as such, but it is referred\n-   *  to as \"node\" in this file.  It is a simple array-of-Tp.  If Tp\n+   *  A @a node has no specific type name as such, but it is referred\n+   *  to as @a node in this file.  It is a simple array-of-Tp.  If Tp\n    *  is very large, there will be one Tp element per node (i.e., an\n-   *  \"array\" of one).  For non-huge Tp's, node size is inversely\n+   *  @a array of one).  For non-huge Tp's, node size is inversely\n    *  related to Tp size: the larger the Tp, the fewer Tp's will fit\n    *  in a node.  The goal here is to keep the total size of a node\n    *  relatively small and constant over different Tp's, to improve\n@@ -669,7 +670,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n    *  will be unused.  This same situation will arise as the %map\n    *  grows: available %map pointers, if any, will be on the ends.  As\n    *  new nodes are created, only a subset of the %map's pointers need\n-   *  to be copied \"outward\".\n+   *  to be copied @a outward.\n    *\n    *  Class invariants:\n    * - For any nonsingular iterator i:\n@@ -699,11 +700,11 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n    *   node if and only if the pointer is in the range\n    *   [start.node, finish.node].\n    *\n-   *  Here's the magic:  nothing in deque is \"aware\" of the discontiguous\n+   *  Here's the magic:  nothing in deque is @b aware of the discontiguous\n    *  storage!\n    *\n    *  The memory setup and layout occurs in the parent, _Base, and the iterator\n-   *  class is entirely responsible for \"leaping\" from one node to the next.\n+   *  class is entirely responsible for @a leaping from one node to the next.\n    *  All the implementation routines for deque itself work only through the\n    *  start and finish iterators.  This keeps the routines simple and sane,\n    *  and we can use other standard algorithms as well.\n@@ -1392,7 +1393,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n        *\n        *  This function will insert copies of the data in the\n        *  initializer_list @a l into the %deque before the location\n-       *  specified by @a p.  This is known as \"list insert.\"\n+       *  specified by @a p.  This is known as <em>list insert</em>.\n        */\n       void\n       insert(iterator __p, initializer_list<value_type> __l)\n@@ -1420,7 +1421,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n        *\n        *  This function will insert copies of the data in the range\n        *  [first,last) into the %deque before the location specified\n-       *  by @a pos.  This is known as \"range insert.\"\n+       *  by @a pos.  This is known as <em>range insert</em>.\n        */\n       template<typename _InputIterator>\n         void"}, {"sha": "fd9c3589d699c50ba81ca63d193a746c5833c4ca", "filename": "libstdc++-v3/include/bits/stl_function.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_function.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_function.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_function.h?ref=2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d", "patch": "@@ -1,6 +1,6 @@\n // Functor implementations -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2009\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -68,7 +68,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n    *  templates and used in place of a function pointer.  Not only is the\n    *  resulting expressiveness of the library increased, but the generated\n    *  code can be more efficient than what you might write by hand.  When we\n-   *  refer to \"functors,\" then, generally we include function pointers in\n+   *  refer to @a functors, then, generally we include function pointers in\n    *  the description as well.\n    *\n    *  Often, functors are only created as temporaries passed to algorithm\n@@ -333,7 +333,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n    *  std::find_if (v.begin(), v.end(), not1(IntGreaterThanThree()));\n    *  \\endcode\n    *  The call to @c find_if will locate the first index (i) of @c v for which\n-   *  \"!(v[i] > 3)\" is true.\n+   *  <code>!(v[i] > 3)</code> is true.\n    *\n    *  The not1/unary_negate combination works on predicates taking a single\n    *  argument.  The not2/binary_negate combination works on predicates which"}, {"sha": "105469acb4e85295e6557b84ce9c74c5d725108c", "filename": "libstdc++-v3/include/bits/stl_iterator.h", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h?ref=2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d", "patch": "@@ -1,6 +1,6 @@\n // Iterators -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -83,9 +83,9 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n    *      &*(reverse_iterator(i)) == &*(i - 1)\n    *  @endcode\n    *\n-   *  This mapping is dictated by the fact that while there is always a\n+   *  <em>This mapping is dictated by the fact that while there is always a\n    *  pointer past the end of an array, there might not be a valid pointer\n-   *  before the beginning of an array.' [24.4.1]/1,2\n+   *  before the beginning of an array.</em> [24.4.1]/1,2\n    *\n    *  Reverse iterators can be tricky and surprising at first.  Their\n    *  semantics make sense, however, and the trickiness is a side effect of\n@@ -411,7 +411,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *                 reference-to-const T for container<T>.\n        *  @return  This %iterator, for chained operations.\n        *\n-       *  This kind of %iterator doesn't really have a \"position\" in the\n+       *  This kind of %iterator doesn't really have a @a position in the\n        *  container (you can think of the position as being permanently at\n        *  the end, if you like).  Assigning a value to the %iterator will\n        *  always append the value to the end of the container.\n@@ -437,12 +437,12 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       operator*()\n       { return *this; }\n \n-      /// Simply returns *this.  (This %iterator does not \"move\".)\n+      /// Simply returns *this.  (This %iterator does not @a move.)\n       back_insert_iterator&\n       operator++()\n       { return *this; }\n \n-      /// Simply returns *this.  (This %iterator does not \"move\".)\n+      /// Simply returns *this.  (This %iterator does not @a move.)\n       back_insert_iterator\n       operator++(int)\n       { return *this; }\n@@ -494,7 +494,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *                 reference-to-const T for container<T>.\n        *  @return  This %iterator, for chained operations.\n        *\n-       *  This kind of %iterator doesn't really have a \"position\" in the\n+       *  This kind of %iterator doesn't really have a @a position in the\n        *  container (you can think of the position as being permanently at\n        *  the front, if you like).  Assigning a value to the %iterator will\n        *  always prepend the value to the front of the container.\n@@ -520,12 +520,12 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       operator*()\n       { return *this; }\n \n-      /// Simply returns *this.  (This %iterator does not \"move\".)\n+      /// Simply returns *this.  (This %iterator does not @a move.)\n       front_insert_iterator&\n       operator++()\n       { return *this; }\n \n-      /// Simply returns *this.  (This %iterator does not \"move\".)\n+      /// Simply returns *this.  (This %iterator does not @a move.)\n       front_insert_iterator\n       operator++(int)\n       { return *this; }\n@@ -626,12 +626,12 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       operator*()\n       { return *this; }\n \n-      /// Simply returns *this.  (This %iterator does not \"move\".)\n+      /// Simply returns *this.  (This %iterator does not @a move.)\n       insert_iterator&\n       operator++()\n       { return *this; }\n \n-      /// Simply returns *this.  (This %iterator does not \"move\".)\n+      /// Simply returns *this.  (This %iterator does not @a move.)\n       insert_iterator&\n       operator++(int)\n       { return *this; }\n@@ -662,7 +662,7 @@ _GLIBCXX_END_NAMESPACE\n \n _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \n-  // This iterator adapter is 'normal' in the sense that it does not\n+  // This iterator adapter is @a normal in the sense that it does not\n   // change the semantics of any of the operators of its iterator\n   // parameter.  Its primary purpose is to convert an iterator that is\n   // not a class, e.g. a pointer, into an iterator that is a class."}, {"sha": "627fbe917eed5edef65eee48c5a27e81e0e10ea6", "filename": "libstdc++-v3/include/bits/stl_iterator_base_funcs.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_funcs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_funcs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_funcs.h?ref=2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d", "patch": "@@ -1,6 +1,6 @@\n // Functions used by iterators -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -154,7 +154,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   /**\n    *  @brief A generalization of pointer arithmetic.\n    *  @param  i  An input iterator.\n-   *  @param  n  The \"delta\" by which to change @p i.\n+   *  @param  n  The @a delta by which to change @p i.\n    *  @return  Nothing.\n    *\n    *  This increments @p i by @p n.  For bidirectional and random access"}, {"sha": "07687bd2cd37ab46d00f96e9e8c35bed79dca84a", "filename": "libstdc++-v3/include/bits/stl_iterator_base_types.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_types.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_types.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_types.h?ref=2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d", "patch": "@@ -1,6 +1,6 @@\n // Types used in iterator implementation -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -123,7 +123,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n    *  @brief  Traits class for iterators.\n    *\n    *  This class does nothing but define nested typedefs.  The general\n-   *  version simply \"forwards\" the nested typedefs from the Iterator\n+   *  version simply @a forwards the nested typedefs from the Iterator\n    *  argument.  Specialized versions for pointers and pointers-to-const\n    *  provide tighter, more correct semantics.\n   */"}, {"sha": "7f81fab1c642e95271942f5cd1073ae39fcd0b0b", "filename": "libstdc++-v3/include/bits/stl_map.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h?ref=2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d", "patch": "@@ -532,7 +532,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n        *\n        *  See\n        *  http://gcc.gnu.org/onlinedocs/libstdc++/manual/bk01pt07ch17.html\n-       *  for more on \"hinting\".\n+       *  for more on @a hinting.\n        *\n        *  Insertion requires logarithmic time (if the hint is not taken).\n        */"}, {"sha": "e5575bc9f722f7cf48733247d6998bfebc6379f7", "filename": "libstdc++-v3/include/bits/stl_multimap.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h?ref=2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d", "patch": "@@ -453,7 +453,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n        *  improve the performance of the insertion process.  A bad hint would\n        *  cause no gains in efficiency.\n        *\n-       *  For more on \"hinting,\" see:\n+       *  For more on @a hinting, see:\n        *  http://gcc.gnu.org/onlinedocs/libstdc++/manual/bk01pt07ch17.html\n        *\n        *  Insertion requires logarithmic time (if the hint is not taken)."}, {"sha": "209e58eb9e80c3058c4ffa9515f134b058c2f35e", "filename": "libstdc++-v3/include/bits/stl_multiset.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h?ref=2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d", "patch": "@@ -412,7 +412,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n        *  cause no gains in efficiency.\n        *\n        *  See http://gcc.gnu.org/onlinedocs/libstdc++/manual/bk01pt07ch17.html\n-       *  for more on \"hinting\".\n+       *  for more on @a hinting.\n        *\n        *  Insertion requires logarithmic time (if the hint is not taken).\n        */\n@@ -421,7 +421,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n       { return _M_t._M_insert_equal_(__position, __x); }\n \n       /**\n-       *  @brief A template function that attempts to insert a range of elements.\n+       *  @brief A template function that tries to insert a range of elements.\n        *  @param  first  Iterator pointing to the start of the range to be\n        *                 inserted.\n        *  @param  last  Iterator pointing to the end of the range."}, {"sha": "058f1b65d271f2fbca461cf34ec2477828e12314", "filename": "libstdc++-v3/include/bits/stl_queue.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_queue.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_queue.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_queue.h?ref=2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d", "patch": "@@ -81,7 +81,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n    *  that supports @c front, @c back, @c push_back, and @c pop_front,\n    *  such as std::list or an appropriate user-defined type.\n    *\n-   *  Members not found in \"normal\" containers are @c container_type,\n+   *  Members not found in @a normal containers are @c container_type,\n    *  which is a typedef for the second Sequence parameter, and @c push and\n    *  @c pop, which are standard %queue/FIFO operations.\n   */\n@@ -340,7 +340,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n    *  priority comparisons.  It defaults to @c less<value_type> but\n    *  can be anything defining a strict weak ordering.\n    *\n-   *  Members not found in \"normal\" containers are @c container_type,\n+   *  Members not found in @a normal containers are @c container_type,\n    *  which is a typedef for the second Sequence parameter, and @c\n    *  push, @c pop, and @c top, which are standard %queue operations.\n    *"}, {"sha": "54321e278ac3ba5037a0cb325c6d0f34973a4f7a", "filename": "libstdc++-v3/include/bits/stl_set.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h?ref=2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d", "patch": "@@ -423,7 +423,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n        *  potentially improve the performance of the insertion process.  A bad\n        *  hint would cause no gains in efficiency.\n        *\n-       *  For more on \"hinting\", see:\n+       *  For more on @a hinting, see:\n        *  http://gcc.gnu.org/onlinedocs/libstdc++/manual/bk01pt07ch17.html\n        *  \n        *  Insertion requires logarithmic time (if the hint is not taken)."}, {"sha": "26f50ad66f89b661fa471bcdf911367909f1f64b", "filename": "libstdc++-v3/include/bits/stl_stack.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_stack.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_stack.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_stack.h?ref=2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d", "patch": "@@ -1,6 +1,6 @@\n // Stack implementation -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -83,7 +83,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n    *  such as std::list, std::vector, or an appropriate user-defined\n    *  type.\n    *\n-   *  Members not found in \"normal\" containers are @c container_type,\n+   *  Members not found in @a normal containers are @c container_type,\n    *  which is a typedef for the second Sequence parameter, and @c\n    *  push, @c pop, and @c top, which are standard %stack/FILO\n    *  operations."}, {"sha": "a08b1ee1324ab2c87427ab28e0cb535f1db0e982", "filename": "libstdc++-v3/include/bits/stl_tempbuf.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tempbuf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tempbuf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tempbuf.h?ref=2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d", "patch": "@@ -1,6 +1,6 @@\n // Temporary buffer implementation -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -72,9 +72,9 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n    *\n    *  This function tries to obtain storage for @c len adjacent Tp\n    *  objects.  The objects themselves are not constructed, of course.\n-   *  A pair<> is returned containing 'the buffer s address and\n+   *  A pair<> is returned containing <em>the buffer s address and\n    *  capacity (in the units of sizeof(Tp)), or a pair of 0 values if\n-   *  no storage can be obtained.'  Note that the capacity obtained\n+   *  no storage can be obtained.</em>  Note that the capacity obtained\n    *  may be less than that requested if the memory is unavailable;\n    *  you should compare len with the .second return value.\n    *"}, {"sha": "dc8af688dc8828b353a1c2021bc16bbb45d4e93a", "filename": "libstdc++-v3/include/c_global/cassert", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcassert", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcassert", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcassert?ref=2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d", "patch": "@@ -1,7 +1,7 @@\n // -*- C++ -*- forwarding header.\n \n // Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-// 2006, 2007, 2008, 2009\n+// 2006, 2007, 2008, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -26,7 +26,7 @@\n \n /** @file cassert\n  *  This is a Standard C++ Library file.  You should @c \\#include this file\n- *  in your programs, rather than any of the \"*.h\" implementation files.\n+ *  in your programs, rather than any of the @a *.h implementation files.\n  *\n  *  This is the C++ version of the Standard C Library header @c assert.h,\n  *  and its contents are (mostly) the same as that header, but are all"}, {"sha": "1dfe1720c4f30d26e618fc07f607c44e2549cff7", "filename": "libstdc++-v3/include/c_global/cctype", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcctype", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcctype", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcctype?ref=2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d", "patch": "@@ -1,7 +1,7 @@\n // -*- C++ -*- forwarding header.\n \n // Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-// 2006, 2007, 2008, 2009\n+// 2006, 2007, 2008, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -26,7 +26,7 @@\n \n /** @file include/cctype\n  *  This is a Standard C++ Library file.  You should @c \\#include this file\n- *  in your programs, rather than any of the \"*.h\" implementation files.\n+ *  in your programs, rather than any of the @a *.h implementation files.\n  *\n  *  This is the C++ version of the Standard C Library header @c ctype.h,\n  *  and its contents are (mostly) the same as that header, but are all"}, {"sha": "0451cd9aa1e1d6e3871229e57f8c7240916199b9", "filename": "libstdc++-v3/include/c_global/cerrno", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcerrno", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcerrno", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcerrno?ref=2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d", "patch": "@@ -1,7 +1,7 @@\n // The -*- C++ -*- forwarding header.\n \n // Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-// 2006, 2007, 2008, 2009\n+// 2006, 2007, 2008, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -26,7 +26,7 @@\n \n /** @file cerrno\n  *  This is a Standard C++ Library file.  You should @c \\#include this file\n- *  in your programs, rather than any of the \"*.h\" implementation files.\n+ *  in your programs, rather than any of the @a *.h implementation files.\n  *\n  *  This is the C++ version of the Standard C Library header @c errno.h,\n  *  and its contents are (mostly) the same as that header, but are all"}, {"sha": "1be81d34d68a649d5d2fad0bbf6e0ed2dd4be888", "filename": "libstdc++-v3/include/c_global/cfloat", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcfloat", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcfloat", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcfloat?ref=2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d", "patch": "@@ -1,7 +1,7 @@\n // -*- C++ -*- forwarding header.\n \n // Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-// 2006, 2007, 2008, 2009\n+// 2006, 2007, 2008, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -26,7 +26,7 @@\n \n /** @file include/cfloat\n  *  This is a Standard C++ Library file.  You should @c \\#include this file\n- *  in your programs, rather than any of the \"*.h\" implementation files.\n+ *  in your programs, rather than any of the @a *.h implementation files.\n  *\n  *  This is the C++ version of the Standard C Library header @c float.h,\n  *  and its contents are (mostly) the same as that header, but are all"}, {"sha": "55594aed832ea5ddc6cd6dbefc6e24beb94e50b4", "filename": "libstdc++-v3/include/c_global/ciso646", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fciso646", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fciso646", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fciso646?ref=2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d", "patch": "@@ -1,6 +1,7 @@\n // -*- C++ -*- forwarding header.\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2009, 2010\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -24,7 +25,7 @@\n \n /** @file ciso646\n  *  This is a Standard C++ Library file.  You should @c \\#include this file\n- *  in your programs, rather than any of the \"*.h\" implementation files.\n+ *  in your programs, rather than any of the @a *.h implementation files.\n  *\n  *  This is the C++ version of the Standard C Library header @c iso646.h,\n  *  and its contents are (mostly) the same as that header, but are all"}, {"sha": "f080fcbcb640f5790decc236ba74e5cf5fd61d76", "filename": "libstdc++-v3/include/c_global/climits", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fclimits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fclimits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fclimits?ref=2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d", "patch": "@@ -1,7 +1,7 @@\n // -*- C++ -*- forwarding header.\n \n // Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-// 2006, 2007, 2008, 2009\n+// 2006, 2007, 2008, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -26,7 +26,7 @@\n \n /** @file include/climits\n  *  This is a Standard C++ Library file.  You should @c \\#include this file\n- *  in your programs, rather than any of the \"*.h\" implementation files.\n+ *  in your programs, rather than any of the @a *.h implementation files.\n  *\n  *  This is the C++ version of the Standard C Library header @c limits.h,\n  *  and its contents are (mostly) the same as that header, but are all"}, {"sha": "7cf42e239ef03493809106ea86ece596bcd3bc41", "filename": "libstdc++-v3/include/c_global/clocale", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fclocale", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fclocale", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fclocale?ref=2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d", "patch": "@@ -1,7 +1,7 @@\n // -*- C++ -*- forwarding header.\n \n // Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-// 2006, 2007, 2008, 2009\n+// 2006, 2007, 2008, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -26,7 +26,7 @@\n \n /** @file clocale\n  *  This is a Standard C++ Library file.  You should @c \\#include this file\n- *  in your programs, rather than any of the \"*.h\" implementation files.\n+ *  in your programs, rather than any of the @a *.h implementation files.\n  *\n  *  This is the C++ version of the Standard C Library header @c locale.h,\n  *  and its contents are (mostly) the same as that header, but are all"}, {"sha": "126721163d17e63dc7b9744066e409bc37b2aead", "filename": "libstdc++-v3/include/c_global/cmath", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcmath", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcmath", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcmath?ref=2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d", "patch": "@@ -1,7 +1,7 @@\n // -*- C++ -*- C forwarding header.\n \n // Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-// 2006, 2007, 2008, 2009\n+// 2006, 2007, 2008, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -26,7 +26,7 @@\n \n /** @file include/cmath\n  *  This is a Standard C++ Library file.  You should @c \\#include this file\n- *  in your programs, rather than any of the \"*.h\" implementation files.\n+ *  in your programs, rather than any of the @a *.h implementation files.\n  *\n  *  This is the C++ version of the Standard C Library header @c math.h,\n  *  and its contents are (mostly) the same as that header, but are all"}, {"sha": "16c3de6b00bbe7419fb49a5fcd3aca1c4ab27f20", "filename": "libstdc++-v3/include/c_global/csetjmp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcsetjmp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcsetjmp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcsetjmp?ref=2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d", "patch": "@@ -1,7 +1,7 @@\n // -*- C++ -*- forwarding header.\n \n // Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-// 2006, 2007, 2008, 2009\n+// 2006, 2007, 2008, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -26,7 +26,7 @@\n \n /** @file csetjmp\n  *  This is a Standard C++ Library file.  You should @c \\#include this file\n- *  in your programs, rather than any of the \"*.h\" implementation files.\n+ *  in your programs, rather than any of the @a *.h implementation files.\n  *\n  *  This is the C++ version of the Standard C Library header @c setjmp.h,\n  *  and its contents are (mostly) the same as that header, but are all"}, {"sha": "bbd58ca0420c5e6a0a068304d9e31b454fc4bb4a", "filename": "libstdc++-v3/include/c_global/csignal", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcsignal", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcsignal", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcsignal?ref=2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d", "patch": "@@ -1,7 +1,7 @@\n // -*- C++ -*- forwarding header.\n \n // Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-// 2006, 2007, 2008, 2009\n+// 2006, 2007, 2008, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -26,7 +26,7 @@\n \n /** @file csignal\n  *  This is a Standard C++ Library file.  You should @c \\#include this file\n- *  in your programs, rather than any of the \"*.h\" implementation files.\n+ *  in your programs, rather than any of the @a *.h implementation files.\n  *\n  *  This is the C++ version of the Standard C Library header @c signal.h,\n  *  and its contents are (mostly) the same as that header, but are all"}, {"sha": "82ca4e811920eef1edf0bd25b75c28e19dbaaed5", "filename": "libstdc++-v3/include/c_global/cstdarg", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstdarg", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstdarg", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstdarg?ref=2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d", "patch": "@@ -1,7 +1,7 @@\n // -*- C++ -*- forwarding header.\n \n // Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-// 2006, 2007, 2008, 2009\n+// 2006, 2007, 2008, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -26,7 +26,7 @@\n \n /** @file include/cstdarg\n  *  This is a Standard C++ Library file.  You should @c \\#include this file\n- *  in your programs, rather than any of the \"*.h\" implementation files.\n+ *  in your programs, rather than any of the @a *.h implementation files.\n  *\n  *  This is the C++ version of the Standard C Library header @c stdarg.h,\n  *  and its contents are (mostly) the same as that header, but are all"}, {"sha": "ce2d310244c994c49f994346ca5d0cd6f438f70d", "filename": "libstdc++-v3/include/c_global/cstddef", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstddef", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstddef", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstddef?ref=2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d", "patch": "@@ -1,7 +1,7 @@\n // -*- C++ -*- forwarding header.\n \n // Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-// 2006, 2007, 2008, 2009\n+// 2006, 2007, 2008, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -26,7 +26,7 @@\n \n /** @file cstddef\n  *  This is a Standard C++ Library file.  You should @c \\#include this file\n- *  in your programs, rather than any of the \"*.h\" implementation files.\n+ *  in your programs, rather than any of the @a *.h implementation files.\n  *\n  *  This is the C++ version of the Standard C Library header @c stddef.h,\n  *  and its contents are (mostly) the same as that header, but are all"}, {"sha": "f87af196936a65e65c7ae1164e4e5c2606063ef7", "filename": "libstdc++-v3/include/c_global/cstdio", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstdio", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstdio", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstdio?ref=2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d", "patch": "@@ -1,7 +1,7 @@\n // -*- C++ -*- forwarding header.\n \n // Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-// 2006, 2007, 2008, 2009\n+// 2006, 2007, 2008, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -26,7 +26,7 @@\n \n /** @file include/cstdio\n  *  This is a Standard C++ Library file.  You should @c \\#include this file\n- *  in your programs, rather than any of the \"*.h\" implementation files.\n+ *  in your programs, rather than any of the @a *.h implementation files.\n  *\n  *  This is the C++ version of the Standard C Library header @c stdio.h,\n  *  and its contents are (mostly) the same as that header, but are all"}, {"sha": "dc9b95641709303ffa0f1eda348623a9927139a1", "filename": "libstdc++-v3/include/c_global/cstdlib", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstdlib", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstdlib", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstdlib?ref=2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d", "patch": "@@ -1,7 +1,7 @@\n // -*- C++ -*- forwarding header.\n \n // Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-// 2006, 2007, 2008, 2009\n+// 2006, 2007, 2008, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -26,7 +26,7 @@\n \n /** @file include/cstdlib\n  *  This is a Standard C++ Library file.  You should @c \\#include this file\n- *  in your programs, rather than any of the \"*.h\" implementation files.\n+ *  in your programs, rather than any of the @a *.h implementation files.\n  *\n  *  This is the C++ version of the Standard C Library header @c stdlib.h,\n  *  and its contents are (mostly) the same as that header, but are all"}, {"sha": "445202035d58998784d0c74c8b2bef50c51ad096", "filename": "libstdc++-v3/include/c_global/cstring", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstring", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstring", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstring?ref=2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d", "patch": "@@ -26,7 +26,7 @@\n \n /** @file cstring\n  *  This is a Standard C++ Library file.  You should @c \\#include this file\n- *  in your programs, rather than any of the \"*.h\" implementation files.\n+ *  in your programs, rather than any of the @a *.h implementation files.\n  *\n  *  This is the C++ version of the Standard C Library header @c string.h,\n  *  and its contents are (mostly) the same as that header, but are all"}, {"sha": "55f1f069766f96b5381a9d88c91af819e975cb01", "filename": "libstdc++-v3/include/c_global/ctime", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fctime", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fctime", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fctime?ref=2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d", "patch": "@@ -1,7 +1,7 @@\n // -*- C++ -*- forwarding header.\n \n // Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-// 2006, 2007, 2008, 2009\n+// 2006, 2007, 2008, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -26,7 +26,7 @@\n \n /** @file include/ctime\n  *  This is a Standard C++ Library file.  You should @c \\#include this file\n- *  in your programs, rather than any of the \"*.h\" implementation files.\n+ *  in your programs, rather than any of the @a *.h implementation files.\n  *\n  *  This is the C++ version of the Standard C Library header @c time.h,\n  *  and its contents are (mostly) the same as that header, but are all"}, {"sha": "537f39a023ba0e668e3b639c569ee41e1b99bce3", "filename": "libstdc++-v3/include/c_global/cwchar", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcwchar", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcwchar", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcwchar?ref=2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d", "patch": "@@ -1,7 +1,7 @@\n // -*- C++ -*- forwarding header.\n \n // Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-// 2006, 2007, 2008, 2009\n+// 2006, 2007, 2008, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -26,7 +26,7 @@\n \n /** @file include/cwchar\n  *  This is a Standard C++ Library file.  You should @c \\#include this file\n- *  in your programs, rather than any of the \"*.h\" implementation files.\n+ *  in your programs, rather than any of the @a *.h implementation files.\n  *\n  *  This is the C++ version of the Standard C Library header @c wchar.h,\n  *  and its contents are (mostly) the same as that header, but are all"}, {"sha": "be649a289503250007280bf3da85afcaf4c87755", "filename": "libstdc++-v3/include/c_global/cwctype", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcwctype", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcwctype", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcwctype?ref=2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d", "patch": "@@ -1,7 +1,7 @@\n // -*- C++ -*- forwarding header.\n \n // Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-// 2006, 2007, 2008, 2009\n+// 2006, 2007, 2008, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -26,7 +26,7 @@\n \n /** @file include/cwctype\n  *  This is a Standard C++ Library file.  You should @c \\#include this file\n- *  in your programs, rather than any of the \"*.h\" implementation files.\n+ *  in your programs, rather than any of the @a *.h implementation files.\n  *\n  *  This is the C++ version of the Standard C Library header @c wctype.h,\n  *  and its contents are (mostly) the same as that header, but are all"}, {"sha": "4ea0adc3724e17e31ccab8785247e9f9c680376c", "filename": "libstdc++-v3/include/c_std/cassert", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcassert", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcassert", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcassert?ref=2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d", "patch": "@@ -1,7 +1,7 @@\n // -*- C++ -*- forwarding header.\n \n // Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-// 2009  Free Software Foundation, Inc.\n+// 2009, 2010  Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -25,7 +25,7 @@\n \n /** @file cassert\n  *  This is a Standard C++ Library file.  You should @c #include this file\n- *  in your programs, rather than any of the \"*.h\" implementation files.\n+ *  in your programs, rather than any of the @a *.h implementation files.\n  *\n  *  This is the C++ version of the Standard C Library header @c assert.h,\n  *  and its contents are (mostly) the same as that header, but are all"}, {"sha": "7ba540b5b8a8921c1c7e112594f3f7a34026aa2e", "filename": "libstdc++-v3/include/c_std/cctype", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcctype", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcctype", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcctype?ref=2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d", "patch": "@@ -1,7 +1,7 @@\n // -*- C++ -*- forwarding header.\n \n // Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-// 2009  Free Software Foundation, Inc.\n+// 2009, 2010  Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -25,7 +25,7 @@\n \n /** @file include/cctype\n  *  This is a Standard C++ Library file.  You should @c #include this file\n- *  in your programs, rather than any of the \"*.h\" implementation files.\n+ *  in your programs, rather than any of the @a *.h implementation files.\n  *\n  *  This is the C++ version of the Standard C Library header @c ctype.h,\n  *  and its contents are (mostly) the same as that header, but are all"}, {"sha": "d9d832fe6b7248fd646cfbf8083fab56db13b547", "filename": "libstdc++-v3/include/c_std/cerrno", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcerrno", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcerrno", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcerrno?ref=2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d", "patch": "@@ -1,7 +1,7 @@\n // The -*- C++ -*- forwarding header.\n \n // Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-// 2009  Free Software Foundation, Inc.\n+// 2009, 2010  Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -25,7 +25,7 @@\n \n /** @file cerrno\n  *  This is a Standard C++ Library file.  You should @c #include this file\n- *  in your programs, rather than any of the \"*.h\" implementation files.\n+ *  in your programs, rather than any of the @a *.h implementation files.\n  *\n  *  This is the C++ version of the Standard C Library header @c errno.h,\n  *  and its contents are (mostly) the same as that header, but are all"}, {"sha": "a9072b72773f9675e3b75842af8e638ae7de8c3b", "filename": "libstdc++-v3/include/c_std/cfloat", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcfloat", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcfloat", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcfloat?ref=2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d", "patch": "@@ -1,7 +1,7 @@\n // -*- C++ -*- forwarding header.\n \n // Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-// 2009  Free Software Foundation, Inc.\n+// 2009, 2010  Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -25,7 +25,7 @@\n \n /** @file include/cfloat\n  *  This is a Standard C++ Library file.  You should @c #include this file\n- *  in your programs, rather than any of the \"*.h\" implementation files.\n+ *  in your programs, rather than any of the @a *.h implementation files.\n  *\n  *  This is the C++ version of the Standard C Library header @c float.h,\n  *  and its contents are (mostly) the same as that header, but are all"}, {"sha": "0eaad86a32b26ea92c06d33bce5bcd529e1a1aed", "filename": "libstdc++-v3/include/c_std/ciso646", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fciso646", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fciso646", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fciso646?ref=2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d", "patch": "@@ -1,6 +1,7 @@\n // -*- C++ -*- forwarding header.\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2009, 2010\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -24,7 +25,7 @@\n \n /** @file ciso646\n  *  This is a Standard C++ Library file.  You should @c #include this file\n- *  in your programs, rather than any of the \"*.h\" implementation files.\n+ *  in your programs, rather than any of the @a *.h implementation files.\n  *\n  *  This is the C++ version of the Standard C Library header @c iso646.h,\n  *  and its contents are (mostly) the same as that header, but are all"}, {"sha": "91f52d2c8c12a90983b6f003aa9b020f4665eb63", "filename": "libstdc++-v3/include/c_std/climits", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fclimits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fclimits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fclimits?ref=2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d", "patch": "@@ -1,7 +1,7 @@\n // -*- C++ -*- forwarding header.\n \n // Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-// 2009  Free Software Foundation, Inc.\n+// 2009, 2010  Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -25,7 +25,7 @@\n \n /** @file include/climits\n  *  This is a Standard C++ Library file.  You should @c #include this file\n- *  in your programs, rather than any of the \"*.h\" implementation files.\n+ *  in your programs, rather than any of the @a *.h implementation files.\n  *\n  *  This is the C++ version of the Standard C Library header @c limits.h,\n  *  and its contents are (mostly) the same as that header, but are all"}, {"sha": "36d8bd77ff50566e318b02bc2ad1bb517450c5c0", "filename": "libstdc++-v3/include/c_std/clocale", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fclocale", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fclocale", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fclocale?ref=2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d", "patch": "@@ -1,7 +1,7 @@\n // -*- C++ -*- forwarding header.\n \n // Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-// 2009  Free Software Foundation, Inc.\n+// 2009, 2010  Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -25,7 +25,7 @@\n \n /** @file clocale\n  *  This is a Standard C++ Library file.  You should @c #include this file\n- *  in your programs, rather than any of the \"*.h\" implementation files.\n+ *  in your programs, rather than any of the @a *.h implementation files.\n  *\n  *  This is the C++ version of the Standard C Library header @c locale.h,\n  *  and its contents are (mostly) the same as that header, but are all"}, {"sha": "e97089664d9b47b41d0115d9cf4f38e2ac01ecd1", "filename": "libstdc++-v3/include/c_std/cmath", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcmath", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcmath", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcmath?ref=2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d", "patch": "@@ -1,7 +1,7 @@\n // -*- C++ -*- C forwarding header.\n \n // Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-// 2006, 2007, 2008, 2009\n+// 2006, 2007, 2008, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -26,7 +26,7 @@\n \n /** @file include/cmath\n  *  This is a Standard C++ Library file.  You should @c #include this file\n- *  in your programs, rather than any of the \"*.h\" implementation files.\n+ *  in your programs, rather than any of the @a *.h implementation files.\n  *\n  *  This is the C++ version of the Standard C Library header @c math.h,\n  *  and its contents are (mostly) the same as that header, but are all"}, {"sha": "c5a91bd068336ad7be12382e829b96ba1cb52d88", "filename": "libstdc++-v3/include/c_std/csetjmp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcsetjmp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcsetjmp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcsetjmp?ref=2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d", "patch": "@@ -1,7 +1,7 @@\n // -*- C++ -*- forwarding header.\n \n // Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-// 2009  Free Software Foundation, Inc.\n+// 2009, 2010  Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -25,7 +25,7 @@\n \n /** @file csetjmp\n  *  This is a Standard C++ Library file.  You should @c #include this file\n- *  in your programs, rather than any of the \"*.h\" implementation files.\n+ *  in your programs, rather than any of the @a *.h implementation files.\n  *\n  *  This is the C++ version of the Standard C Library header @c setjmp.h,\n  *  and its contents are (mostly) the same as that header, but are all"}, {"sha": "7cba945b5970e4a247d9a8989215468a674f06c9", "filename": "libstdc++-v3/include/c_std/csignal", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcsignal", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcsignal", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcsignal?ref=2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d", "patch": "@@ -1,7 +1,7 @@\n // -*- C++ -*- forwarding header.\n \n // Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-// 2009  Free Software Foundation, Inc.\n+// 2009, 2010  Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -25,7 +25,7 @@\n \n /** @file csignal\n  *  This is a Standard C++ Library file.  You should @c #include this file\n- *  in your programs, rather than any of the \"*.h\" implementation files.\n+ *  in your programs, rather than any of the @a *.h implementation files.\n  *\n  *  This is the C++ version of the Standard C Library header @c signal.h,\n  *  and its contents are (mostly) the same as that header, but are all"}, {"sha": "b033d9eb4e763f52ecf487e2720dafbdd5603f5f", "filename": "libstdc++-v3/include/c_std/cstdarg", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcstdarg", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcstdarg", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcstdarg?ref=2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d", "patch": "@@ -1,7 +1,7 @@\n // -*- C++ -*- forwarding header.\n \n // Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-// 2009  Free Software Foundation, Inc.\n+// 2009, 2010  Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -25,7 +25,7 @@\n \n /** @file include/cstdarg\n  *  This is a Standard C++ Library file.  You should @c #include this file\n- *  in your programs, rather than any of the \"*.h\" implementation files.\n+ *  in your programs, rather than any of the @a *.h implementation files.\n  *\n  *  This is the C++ version of the Standard C Library header @c stdarg.h,\n  *  and its contents are (mostly) the same as that header, but are all"}, {"sha": "93fed5db6acc8c0d8c193b2139d53548737b6c53", "filename": "libstdc++-v3/include/c_std/cstddef", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcstddef", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcstddef", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcstddef?ref=2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d", "patch": "@@ -1,7 +1,7 @@\n // -*- C++ -*- forwarding header.\n \n // Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-// 2009  Free Software Foundation, Inc.\n+// 2009, 2010  Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -25,7 +25,7 @@\n \n /** @file cstddef\n  *  This is a Standard C++ Library file.  You should @c #include this file\n- *  in your programs, rather than any of the \"*.h\" implementation files.\n+ *  in your programs, rather than any of the @a *.h implementation files.\n  *\n  *  This is the C++ version of the Standard C Library header @c stddef.h,\n  *  and its contents are (mostly) the same as that header, but are all"}, {"sha": "a697437a6621db103076c021f4082731375a65a1", "filename": "libstdc++-v3/include/c_std/cstdio", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcstdio", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcstdio", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcstdio?ref=2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d", "patch": "@@ -1,7 +1,7 @@\n // -*- C++ -*- forwarding header.\n \n // Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-// 2009  Free Software Foundation, Inc.\n+// 2009, 2010  Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -25,7 +25,7 @@\n \n /** @file include/cstdio\n  *  This is a Standard C++ Library file.  You should @c #include this file\n- *  in your programs, rather than any of the \"*.h\" implementation files.\n+ *  in your programs, rather than any of the @a *.h implementation files.\n  *\n  *  This is the C++ version of the Standard C Library header @c stdio.h,\n  *  and its contents are (mostly) the same as that header, but are all"}, {"sha": "c1e3379c12132f952763b3c8aa8d3b88828401b1", "filename": "libstdc++-v3/include/c_std/cstdlib", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcstdlib", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcstdlib", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcstdlib?ref=2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d", "patch": "@@ -1,7 +1,7 @@\n // -*- C++ -*- forwarding header.\n \n // Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-// 2009  Free Software Foundation, Inc.\n+// 2009, 2010  Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -25,7 +25,7 @@\n \n /** @file include/cstdlib\n  *  This is a Standard C++ Library file.  You should @c #include this file\n- *  in your programs, rather than any of the \"*.h\" implementation files.\n+ *  in your programs, rather than any of the @a *.h implementation files.\n  *\n  *  This is the C++ version of the Standard C Library header @c stdlib.h,\n  *  and its contents are (mostly) the same as that header, but are all"}, {"sha": "914365655eca8cdd7953601ceca5467091cd001c", "filename": "libstdc++-v3/include/c_std/cstring", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcstring", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcstring", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcstring?ref=2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d", "patch": "@@ -26,7 +26,7 @@\n \n /** @file cstring\n  *  This is a Standard C++ Library file.  You should @c #include this file\n- *  in your programs, rather than any of the \"*.h\" implementation files.\n+ *  in your programs, rather than any of the @a *.h implementation files.\n  *\n  *  This is the C++ version of the Standard C Library header @c string.h,\n  *  and its contents are (mostly) the same as that header, but are all"}, {"sha": "dca90eb8d88065acdcbd5967cc442ebbbaa19975", "filename": "libstdc++-v3/include/c_std/ctime", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fctime", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fctime", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fctime?ref=2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d", "patch": "@@ -1,7 +1,7 @@\n // -*- C++ -*- forwarding header.\n \n // Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-// 2009  Free Software Foundation, Inc.\n+// 2009, 2010  Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -25,7 +25,7 @@\n \n /** @file include/ctime\n  *  This is a Standard C++ Library file.  You should @c #include this file\n- *  in your programs, rather than any of the \"*.h\" implementation files.\n+ *  in your programs, rather than any of the @a *.h implementation files.\n  *\n  *  This is the C++ version of the Standard C Library header @c time.h,\n  *  and its contents are (mostly) the same as that header, but are all"}, {"sha": "3d503674ed19e3118874278351a06f14dbfa64cb", "filename": "libstdc++-v3/include/c_std/cwchar", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcwchar", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcwchar", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcwchar?ref=2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d", "patch": "@@ -1,7 +1,7 @@\n // -*- C++ -*- forwarding header.\n \n // Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-// 2006, 2007, 2009\n+// 2006, 2007, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -26,7 +26,7 @@\n \n /** @file include/cwchar\n  *  This is a Standard C++ Library file.  You should @c #include this file\n- *  in your programs, rather than any of the \"*.h\" implementation files.\n+ *  in your programs, rather than any of the @a *.h implementation files.\n  *\n  *  This is the C++ version of the Standard C Library header @c wchar.h,\n  *  and its contents are (mostly) the same as that header, but are all"}, {"sha": "4af425067b96201f65fcf106b6fb0e3a3cd08e1f", "filename": "libstdc++-v3/include/c_std/cwctype", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcwctype", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcwctype", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcwctype?ref=2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d", "patch": "@@ -1,7 +1,7 @@\n // -*- C++ -*- forwarding header.\n \n // Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-// 2009  Free Software Foundation, Inc.\n+// 2009, 2010  Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -25,7 +25,7 @@\n \n /** @file include/cwctype\n  *  This is a Standard C++ Library file.  You should @c #include this file\n- *  in your programs, rather than any of the \"*.h\" implementation files.\n+ *  in your programs, rather than any of the @a *.h implementation files.\n  *\n  *  This is the C++ version of the Standard C Library header @c wctype.h,\n  *  and its contents are (mostly) the same as that header, but are all"}, {"sha": "a56001a26dea062ac16223f62c7391f2b489da76", "filename": "libstdc++-v3/include/debug/macros.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmacros.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmacros.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmacros.h?ref=2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d", "patch": "@@ -1,6 +1,6 @@\n // Debugging support implementation -*- C++ -*-\n \n-// Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2009\n+// Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -34,7 +34,7 @@\n  * Macros used by the implementation to verify certain\n  * properties. These macros may only be used directly by the debug\n  * wrappers. Note that these are macros (instead of the more obviously\n- * \"correct\" choice of making them functions) because we need line and\n+ * @a correct choice of making them functions) because we need line and\n  * file information at the call site, to minimize the distance between\n  * the user error and where the error is reported.\n  *"}, {"sha": "3e81f9b8a99639dbc84799c69397f79374b0488b", "filename": "libstdc++-v3/include/debug/safe_base.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_base.h?ref=2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d", "patch": "@@ -1,6 +1,6 @@\n // Safe sequence/iterator base implementation  -*- C++ -*-\n \n-// Copyright (C) 2003, 2004, 2005, 2006, 2009\n+// Copyright (C) 2003, 2004, 2005, 2006, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -36,7 +36,7 @@ namespace __gnu_debug\n {\n   class _Safe_sequence_base;\n \n-  /** \\brief Basic functionality for a \"safe\" iterator.\n+  /** \\brief Basic functionality for a @a safe iterator.\n    *\n    *  The %_Safe_iterator_base base class implements the functionality\n    *  of a safe iterator that is not specific to a particular iterator\n@@ -153,7 +153,7 @@ namespace __gnu_debug\n    * invalidation of all iterators that reference the container.\n    *\n    * This class must ensure that no operation on it may throw an\n-   * exception, otherwise \"safe\" sequences may fail to provide the\n+   * exception, otherwise @a safe sequences may fail to provide the\n    * exception-safety guarantees required by the C++ standard.\n    */\n   class _Safe_sequence_base"}, {"sha": "830372d78a03a8c1d3a46cadea23fa4d115d5eff", "filename": "libstdc++-v3/include/debug/safe_sequence.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_sequence.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_sequence.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_sequence.h?ref=2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d", "patch": "@@ -1,6 +1,6 @@\n // Safe sequence implementation  -*- C++ -*-\n \n-// Copyright (C) 2003, 2004, 2005, 2006, 2009\n+// Copyright (C) 2003, 2004, 2005, 2006, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -78,11 +78,11 @@ namespace __gnu_debug\n     };\n \n   /**\n-   * @brief Base class for constructing a \"safe\" sequence type that\n+   * @brief Base class for constructing a @a safe sequence type that\n    * tracks iterators that reference it.\n    *\n    * The class template %_Safe_sequence simplifies the construction of\n-   * \"safe\" sequences that track the iterators that reference the\n+   * @a safe sequences that track the iterators that reference the\n    * sequence, so that the iterators are notified of changes in the\n    * sequence that may affect their operation, e.g., if the container\n    * invalidates its iterators or is destructed. This class template"}, {"sha": "9b2108b7f7dd17f2267f0cf77cea455c61de552c", "filename": "libstdc++-v3/include/ext/algorithm", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fext%2Falgorithm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fext%2Falgorithm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Falgorithm?ref=2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d", "patch": "@@ -1,6 +1,6 @@\n // Algorithm extensions -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -189,8 +189,9 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n    *  @return   An int, as with @c memcmp.\n    *\n    *  The return value will be less than zero if the first range is\n-   *  \"lexigraphically less than\" the second, greater than zero if the second\n-   *  range is \"lexigraphically less than\" the first, and zero otherwise.\n+   *  <em>lexigraphically less than</em> the second, greater than zero\n+   *  if the second range is <em>lexigraphically less than</em> the\n+   *  first, and zero otherwise.\n    *  This is an SGI extension.\n    *  @ingroup SGIextensions\n   */"}, {"sha": "546b9c68d6ce581a636ae2eeb94870f88aba160d", "filename": "libstdc++-v3/include/ext/functional", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fext%2Ffunctional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fext%2Ffunctional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Ffunctional?ref=2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d", "patch": "@@ -188,7 +188,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n    *  @c operator()s\n    *  take a @c std::pair as an argument, and return either the first member\n    *  or the second member, respectively.  They can be used (especially with\n-   *  the composition functors) to \"strip\" data from a sequence before\n+   *  the composition functors) to @a strip data from a sequence before\n    *  performing the remainder of an algorithm.\n    *\n    *  @addtogroup SGIextensions\n@@ -288,7 +288,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n    *  - @c constant_binary_fun's @c operator() takes two arguments (ignored)\n    *\n    *  The helper creator functions @c constant0, @c constant1, and\n-   *  @c constant2 each take a \"result\" argument and construct variables of\n+   *  @c constant2 each take a @a result argument and construct variables of\n    *  the appropriate functor type.\n    *\n    *  @addtogroup SGIextensions"}, {"sha": "0e675133296d6def8e0dcf6df312c9a8b154d533", "filename": "libstdc++-v3/include/ext/mt_allocator.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmt_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmt_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmt_allocator.h?ref=2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d", "patch": "@@ -1,6 +1,6 @@\n // MT-optimized allocator -*- C++ -*-\n \n-// Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2009\n+// Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -612,9 +612,9 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n   /**\n    *  @brief  This is a fixed size (power of 2) allocator which - when\n    *  compiled with thread support - will maintain one freelist per\n-   *  size per thread plus a \"global\" one. Steps are taken to limit\n+   *  size per thread plus a @a global one. Steps are taken to limit\n    *  the per thread freelist sizes (by returning excess back to\n-   *  the \"global\" list).\n+   *  the @a global list).\n    *  @ingroup allocators\n    *\n    *  Further details:"}, {"sha": "cb3ffe161535d81f66a278e9b3ea1fdc624ed626", "filename": "libstdc++-v3/include/ext/pb_ds/detail/bin_search_tree_/bin_search_tree_.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fbin_search_tree_.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fbin_search_tree_.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fbin_search_tree_.hpp?ref=2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d", "patch": "@@ -38,7 +38,7 @@\n  * Contains an implementation class for bin_search_tree_.\n  */\n /*\n- * This implementation uses an idea from the SGI STL (using a \"header\" node\n+ * This implementation uses an idea from the SGI STL (using a @a header node\n  *    which is needed for efficient iteration).\n  */\n "}, {"sha": "627f8b172a5ba2fc2f73e430082b649dd713f0bb", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pat_trie_/pat_trie_.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fpat_trie_.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fpat_trie_.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fpat_trie_.hpp?ref=2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d", "patch": "@@ -40,8 +40,8 @@\n \n /**\n  * This implementation loosely borrows ideas from:\n- * 1) \"Fast Mergeable Integer Maps\", Okasaki, Gill 1998\n- * 2) \"Ptset: Sets of integers implemented as Patricia trees\",\n+ * 1) Fast Mergeable Integer Maps, Okasaki, Gill 1998\n+ * 2) Ptset: Sets of integers implemented as Patricia trees,\n  *    Jean-Christophe Filliatr, 2000\n  **/\n "}, {"sha": "e0f4b4e148f0391831bab6bfbcde9649f1dc324e", "filename": "libstdc++-v3/include/ext/pb_ds/detail/rb_tree_map_/rb_tree_.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Frb_tree_.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Frb_tree_.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Frb_tree_.hpp?ref=2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d", "patch": "@@ -38,7 +38,7 @@\n  * Contains an implementation for rb_tree_.\n  */\n /*\n- * This implementation uses an idea from the SGI STL (using a \"header\" node\n+ * This implementation uses an idea from the SGI STL (using a @a header node\n  *    which is needed for efficient iteration).\n  */\n "}, {"sha": "674c5c983ac82ca5002af563ecec020ec3432d6a", "filename": "libstdc++-v3/include/ext/pb_ds/detail/splay_tree_/splay_tree_.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Fsplay_tree_.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Fsplay_tree_.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Fsplay_tree_.hpp?ref=2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d", "patch": "@@ -38,7 +38,7 @@\n  * Contains an implementation class for splay_tree_.\n  */\n /*\n- * This implementation uses an idea from the SGI STL (using a \"header\" node\n+ * This implementation uses an idea from the SGI STL (using a @a header node\n  *    which is needed for efficient iteration). Following is the SGI STL\n  *    copyright.\n  *"}, {"sha": "b82d21bd0d9cb5600d70a42daa51697f4ef9f754", "filename": "libstdc++-v3/include/ext/pb_ds/detail/type_utils.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftype_utils.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftype_utils.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftype_utils.hpp?ref=2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d", "patch": "@@ -36,7 +36,7 @@\n /**\n  * @file type_utils.hpp\n  * Contains utilities for handnling types. All of these classes are based on\n- *    \"Modern C++\" by Andrei Alxandrescu.\n+ * Modern C++ by Andrei Alxandrescu.\n  */\n \n #ifndef PB_DS_TYPE_UTILS_HPP"}, {"sha": "a18b274fa88d26a20801476f9d7577088b854264", "filename": "libstdc++-v3/include/ext/rc_string_base.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fext%2Frc_string_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fext%2Frc_string_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Frc_string_base.h?ref=2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d", "patch": "@@ -58,7 +58,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n    *  This approach has the enormous advantage that a string object\n    *  requires only one allocation.  All the ugliness is confined\n    *  within a single pair of inline functions, which each compile to\n-   *  a single \"add\" instruction: _Rep::_M_refdata(), and\n+   *  a single @a add instruction: _Rep::_M_refdata(), and\n    *  __rc_string_base::_M_rep(); and the allocation function which gets a\n    *  block of raw bytes and with room enough and constructs a _Rep\n    *  object at the front.\n@@ -70,7 +70,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n    *  string length.)\n    *\n    *  Note that the _Rep object is a POD so that you can have a\n-   *  static \"empty string\" _Rep object already \"constructed\" before\n+   *  static <em>empty string</em> _Rep object already @a constructed before\n    *  static constructors have run.  The reference-count encoding is\n    *  chosen so that a 0 indicates one reference, so you never try to\n    *  destroy the empty-string _Rep object."}, {"sha": "de44fdc1f94c7c1711e836a1a82338ca838b9f4a", "filename": "libstdc++-v3/include/ext/stdio_sync_filebuf.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstdio_sync_filebuf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstdio_sync_filebuf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstdio_sync_filebuf.h?ref=2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d", "patch": "@@ -1,6 +1,7 @@\n // Iostreams wrapper for stdio FILE* -*- C++ -*-\n \n-// Copyright (C) 2003, 2004, 2005, 2006, 2007, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2003, 2004, 2005, 2006, 2007, 2009, 2010\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -71,7 +72,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       /**\n        *  @return  The underlying FILE*.\n        *\n-       *  This function can be used to access the underlying \"C\" file pointer.\n+       *  This function can be used to access the underlying C file pointer.\n        *  Note that there is no way for the library to track what you do\n        *  with the file, so be careful.\n        */"}, {"sha": "37d36bc2e82bf65f132574ab6deef833b10b8bdd", "filename": "libstdc++-v3/include/ext/vstring.h", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h?ref=2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d", "patch": "@@ -505,7 +505,8 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       { this->_M_clear(); }\n \n       /**\n-       *  Returns true if the %string is empty.  Equivalent to *this == \"\".\n+       *  Returns true if the %string is empty.  Equivalent to \n+       *  <code>*this == \"\"</code>.\n        */\n       bool\n       empty() const\n@@ -2027,7 +2028,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n        *  the comparison is nonzero returns it, otherwise the shorter\n        *  one is ordered first.\n        *\n-       *  NB: s must have at least n2 characters, '\\\\0' has no special\n+       *  NB: s must have at least n2 characters, <em>\\\\0</em> has no special\n        *  meaning.\n       */\n       int\n@@ -2432,12 +2433,12 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n    *  @param __str  Buffer to store into.\n    *  @return  Reference to the input stream.\n    *\n-   *  Stores characters from is into @a __str until '\\n' is found, the\n-   *  end of the stream is encountered, or str.max_size() is reached.\n-   *  If is.width() is non-zero, that is the limit on the number of\n-   *  characters stored into @a __str.  Any previous contents of @a\n-   *  __str are erased.  If end of line was encountered, it is\n-   *  extracted but not stored into @a __str.\n+   *  Stores characters from is into @a __str until &apos;\\n&apos; is\n+   *  found, the end of the stream is encountered, or str.max_size()\n+   *  is reached.  If is.width() is non-zero, that is the limit on the\n+   *  number of characters stored into @a __str.  Any previous\n+   *  contents of @a __str are erased.  If end of line was\n+   *  encountered, it is extracted but not stored into @a __str.\n    */\n   template<typename _CharT, typename _Traits, typename _Alloc,\n            template <typename, typename, typename> class _Base>"}, {"sha": "0132593158312f2be23bb240bd06e2cbeaba3982", "filename": "libstdc++-v3/include/parallel/for_each.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Ffor_each.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Ffor_each.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Ffor_each.h?ref=2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2007, 2008, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2007, 2008, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -47,7 +47,7 @@ namespace __gnu_parallel\n    *  @param __end End iterator of input sequence.\n    *  @param __user_op A user-specified functor (comparator, predicate,\n    *  associative operator,...)\n-   *  @param __functionality functor to \"process\" an element with\n+   *  @param __functionality functor to @a process an element with\n    *  __user_op (depends on desired functionality, e. g. accumulate,\n    *  for_each,...\n    *  @param __reduction Reduction functor."}, {"sha": "445184ae5ecd647b61262b64759d5ba39634a781", "filename": "libstdc++-v3/include/parallel/multiway_merge.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fmultiway_merge.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fmultiway_merge.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fmultiway_merge.h?ref=2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2007, 2008, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2007, 2008, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -210,7 +210,7 @@ namespace __gnu_parallel\n    *\n    * This works well for merging up to 4 sequences.\n    *\n-   * Note that making the merging stable does <em>not</em> come at a\n+   * Note that making the merging stable does @a not come at a\n    * performance hit.\n    *\n    * Whether the merging is done guarded or unguarded is selected by the\n@@ -329,7 +329,7 @@ namespace __gnu_parallel\n    *\n    * This works well for merging up to 4 sequences.\n    *\n-   * Note that making the merging stable does <em>not</em> come at a\n+   * Note that making the merging stable does @a not come at a\n    * performance hit.\n    *\n    * Whether the merging is done guarded or unguarded is selected by the"}, {"sha": "94f9e6bbaef4d4c01a76d0efc2d590cc9ae6cc22", "filename": "libstdc++-v3/include/parallel/omp_loop.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fomp_loop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fomp_loop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fomp_loop.h?ref=2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2007, 2008, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2007, 2008, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -48,9 +48,9 @@ namespace __gnu_parallel\n    *  @param __end End iterator of element sequence.\n    *  @param __o User-supplied functor (comparator, predicate, adding\n    *  functor, etc.).\n-   *  @param __f Functor to \"process\" an element with __op (depends on\n+   *  @param __f Functor to @a process an element with __op (depends on\n    *  desired functionality, e. g. for std::for_each(), ...).\n-   *  @param __r Functor to \"add\" a single __result to the already\n+   *  @param __r Functor to @a add a single __result to the already\n    *  processed elements (depends on functionality).\n    *  @param __base Base value for reduction.\n    *  @param __output Pointer to position where final result is written to"}, {"sha": "ca22d5999e36bf4362dbb3587e9bc104802c6c7c", "filename": "libstdc++-v3/include/parallel/omp_loop_static.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fomp_loop_static.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fomp_loop_static.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fomp_loop_static.h?ref=2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2007, 2008, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2007, 2008, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -47,9 +47,9 @@ namespace __gnu_parallel\n    *  @param __end End iterator of element sequence.\n    *  @param __o User-supplied functor (comparator, predicate, adding\n    *  functor, ...).\n-   *  @param __f Functor to \"process\" an element with __op (depends on\n+   *  @param __f Functor to @a process an element with __op (depends on\n    *  desired functionality, e. g. for std::for_each(), ...).\n-   *  @param __r Functor to \"add\" a single __result to the already processed\n+   *  @param __r Functor to @a add a single __result to the already processed\n    *  __elements (depends on functionality).\n    *  @param __base Base value for reduction.\n    *  @param __output Pointer to position where final result is written to"}, {"sha": "5e90ae992db02e32682703850229953cc704bfc2", "filename": "libstdc++-v3/include/parallel/workstealing.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fworkstealing.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fworkstealing.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fworkstealing.h?ref=2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2007, 2008, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2007, 2008, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -80,9 +80,9 @@ namespace __gnu_parallel\n     *  @param __end End iterator of element sequence.\n     *  @param __op User-supplied functor (comparator, predicate, adding\n     *  functor, ...).\n-    *  @param __f Functor to \"process\" an element with __op (depends on\n+    *  @param __f Functor to @a process an element with __op (depends on\n     *  desired functionality, e. g. for std::for_each(), ...).\n-    *  @param __r Functor to \"add\" a single __result to the already\n+    *  @param __r Functor to @a add a single __result to the already\n     *  processed elements (depends on functionality).\n     *  @param __base Base value for reduction.\n     *  @param __output Pointer to position where final result is written to"}, {"sha": "c6ddfe774a856ecae8dc76779e1a553e3b5ed5b9", "filename": "libstdc++-v3/include/profile/impl/profiler_trace.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_trace.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_trace.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_trace.h?ref=2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n //\n-// Copyright (C) 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -468,7 +468,7 @@ inline FILE* __open_output_file(const char* extension)\n   }\n }\n \n-/** @brief Final report method, registered with \"atexit\".\n+/** @brief Final report method, registered with @b atexit.\n  *\n  * This can also be called directly by user code, including signal handlers.\n  * It is protected against deadlocks by the reentrance guard in profiler.h."}, {"sha": "0febb9babaee7b1949fc507c9ef6cdab467dedd0", "filename": "libstdc++-v3/include/profile/iterator_tracker.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fiterator_tracker.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fiterator_tracker.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fiterator_tracker.h?ref=2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d", "patch": "@@ -22,7 +22,7 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file profile/literator_tracker.h\n+/** @file profile/iterator_tracker.h\n  *  This file is a GNU profile extension to the Standard C++ Library.\n  */\n "}, {"sha": "9101e6797ea13a804a4ca195ce79149d2b1bdc79", "filename": "libstdc++-v3/include/std/bitset", "status": "modified", "additions": 19, "deletions": 18, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbitset", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbitset", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbitset?ref=2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d", "patch": "@@ -1,6 +1,6 @@\n // <bitset> -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -646,16 +646,17 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n    *  the high-order bits in the highest word.)  It is a class invariant\n    *  that those unused bits are always zero.\n    *\n-   *  If you think of %bitset as \"a simple array of bits,\" be aware that\n-   *  your mental picture is reversed:  a %bitset behaves the same way as\n-   *  bits in integers do, with the bit at index 0 in the \"least significant\n-   *  / right-hand\" position, and the bit at index Nb-1 in the \"most\n-   *  significant / left-hand\" position.  Thus, unlike other containers, a\n-   *  %bitset's index \"counts from right to left,\" to put it very loosely.\n+   *  If you think of %bitset as <em>a simple array of bits</em>, be\n+   *  aware that your mental picture is reversed: a %bitset behaves\n+   *  the same way as bits in integers do, with the bit at index 0 in\n+   *  the <em>least significant / right-hand</em> position, and the bit at\n+   *  index Nb-1 in the <em>most significant / left-hand</em> position.\n+   *  Thus, unlike other containers, a %bitset's index <em>counts from\n+   *  right to left</em>, to put it very loosely.\n    *\n    *  This behavior is preserved when translating to and from strings.  For\n    *  example, the first line of the following program probably prints\n-   *  \"b('a') is 0001100001\" on a modern ASCII system.\n+   *  <em>b(&apos;a&apos;) is 0001100001</em> on a modern ASCII system.\n    *\n    *  @code\n    *     #include <bitset>\n@@ -717,8 +718,8 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n        *  to and from bool are automatic and should be transparent.  Overloaded\n        *  operators help to preserve the illusion.\n        *\n-       *  (On a typical system, this \"bit %reference\" is 64 times the size of\n-       *  an actual bit.  Ha.)\n+       *  (On a typical system, this <em>bit %reference</em> is 64\n+       *  times the size of an actual bit.  Ha.)\n        */\n       class reference\n       {\n@@ -797,12 +798,12 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \n       /**\n        *  @brief  Use a subset of a string.\n-       *  @param  s  A string of '0' and '1' characters.\n+       *  @param  s  A string of @a 0 and @a 1 characters.\n        *  @param  position  Index of the first character in @a s to use;\n        *                    defaults to zero.\n        *  @throw  std::out_of_range  If @a pos is bigger the size of @a s.\n        *  @throw  std::invalid_argument  If a character appears in the string\n-       *                                 which is neither '0' nor '1'.\n+       *                                 which is neither @a 0 nor @a 1.\n        */\n       template<class _CharT, class _Traits, class _Alloc>\n \texplicit\n@@ -820,12 +821,12 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \n       /**\n        *  @brief  Use a subset of a string.\n-       *  @param  s  A string of '0' and '1' characters.\n+       *  @param  s  A string of @a 0 and @a 1 characters.\n        *  @param  position  Index of the first character in @a s to use.\n        *  @param  n    The number of characters to copy.\n        *  @throw  std::out_of_range  If @a pos is bigger the size of @a s.\n        *  @throw  std::invalid_argument  If a character appears in the string\n-       *                                 which is neither '0' nor '1'.\n+       *                                 which is neither @a 0 nor @a 1.\n        */\n       template<class _CharT, class _Traits, class _Alloc>\n \tbitset(const std::basic_string<_CharT, _Traits, _Alloc>& __s,\n@@ -855,9 +856,9 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       /**\n        *  @brief  Construct from a string.\n-       *  @param  str  A string of '0' and '1' characters.\n+       *  @param  str  A string of @a 0 and @a 1 characters.\n        *  @throw  std::invalid_argument  If a character appears in the string\n-       *                                 which is neither '0' nor '1'.\n+       *                                 which is neither @a 0 nor @a 1.\n        */\n       explicit\n       bitset(const char* __str)\n@@ -1063,7 +1064,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n       /**\n        *  @brief  Array-indexing support.\n        *  @param  position  Index into the %bitset.\n-       *  @return  A bool for a 'const %bitset'.  For non-const bitsets, an\n+       *  @return  A bool for a <em>const %bitset</em>.  For non-const bitsets, an\n        *           instance of the reference proxy class.\n        *  @note  These operators do no range checking and throw no exceptions,\n        *         as required by DR 11 to the standard.\n@@ -1377,7 +1378,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n    *  @brief Global I/O operators for bitsets.\n    *\n    *  Direct I/O between streams and bitsets is supported.  Output is\n-   *  straightforward.  Input will skip whitespace, only accept '0' and '1'\n+   *  straightforward.  Input will skip whitespace, only accept @a 0 and @a 1\n    *  characters, and will only extract as many digits as the %bitset will\n    *  hold.\n   */"}, {"sha": "9aa4f1ab10f6fbe2158ceef4ddcd63f346a9e8bf", "filename": "libstdc++-v3/include/std/fstream", "status": "modified", "additions": 28, "deletions": 27, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffstream", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffstream", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffstream?ref=2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d", "patch": "@@ -1,7 +1,7 @@\n // File based streams -*- C++ -*-\n \n // Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-// 2006, 2007, 2008, 2009\n+// 2006, 2007, 2008, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -119,9 +119,9 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       bool\t\t\t_M_buf_allocated;\n \n       /**\n-       *  _M_reading == false && _M_writing == false for 'uncommitted' mode;\n-       *  _M_reading == true for 'read' mode;\n-       *  _M_writing == true for 'write' mode;\n+       *  _M_reading == false && _M_writing == false for @b uncommitted mode;\n+       *  _M_reading == true for @b read mode;\n+       *  _M_writing == true for @b write mode;\n        *\n        *  NB: _M_reading == true && _M_writing == true is unused.\n        */\n@@ -240,25 +240,25 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *  | ios_base Flag combination            stdio equivalent   |\n        *  |binary  in  out  trunc  app                              |\n        *  +---------------------------------------------------------+\n-       *  |             +                        \"w\"                |\n-       *  |             +           +            \"a\"                |\n-       *  |                         +            \"a\"                |\n-       *  |             +     +                  \"w\"                |\n-       *  |         +                            \"r\"                |\n-       *  |         +   +                        \"r+\"               |\n-       *  |         +   +     +                  \"w+\"               |\n-       *  |         +   +           +            \"a+\"               |\n-       *  |         +               +            \"a+\"               |\n+       *  |             +                        w                  |\n+       *  |             +           +            a                  |\n+       *  |                         +            a                  |\n+       *  |             +     +                  w                  |\n+       *  |         +                            r                  |\n+       *  |         +   +                        r+                 |\n+       *  |         +   +     +                  w+                 |\n+       *  |         +   +           +            a+                 |\n+       *  |         +               +            a+                 |\n        *  +---------------------------------------------------------+\n-       *  |   +         +                        \"wb\"               |\n-       *  |   +         +           +            \"ab\"               |\n-       *  |   +                     +            \"ab\"               |\n-       *  |   +         +     +                  \"wb\"               |\n-       *  |   +     +                            \"rb\"               |\n-       *  |   +     +   +                        \"r+b\"              |\n-       *  |   +     +   +     +                  \"w+b\"              |\n-       *  |   +     +   +           +            \"a+b\"              |\n-       *  |   +     +               +            \"a+b\"              |\n+       *  |   +         +                        wb                 |\n+       *  |   +         +           +            ab                 |\n+       *  |   +                     +            ab                 |\n+       *  |   +         +     +                  wb                 |\n+       *  |   +     +                            rb                 |\n+       *  |   +     +   +                        r+b                |\n+       *  |   +     +   +     +                  w+b                |\n+       *  |   +     +   +           +            a+b                |\n+       *  |   +     +               +            a+b                |\n        *  +---------------------------------------------------------+\n        */\n       __filebuf_type*\n@@ -282,8 +282,9 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *\n        *  If no file is currently open, this function immediately fails.\n        *\n-       *  If a \"put buffer area\" exists, @c overflow(eof) is called to flush\n-       *  all the characters.  The file is then closed.\n+       *  If a <em>put buffer area</em> exists, @c overflow(eof) is\n+       *  called to flush all the characters.  The file is then\n+       *  closed.\n        *\n        *  If any operations fail, this function also fails.\n        */\n@@ -374,9 +375,9 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *  This function sets the pointers of the internal buffer, both get\n        *  and put areas. Typically:\n        *\n-       *   __off == egptr() - eback() upon underflow/uflow ('read' mode);\n-       *   __off == 0 upon overflow ('write' mode);\n-       *   __off == -1 upon open, setbuf, seekoff/pos ('uncommitted' mode).\n+       *   __off == egptr() - eback() upon underflow/uflow (@b read mode);\n+       *   __off == 0 upon overflow (@b write mode);\n+       *   __off == -1 upon open, setbuf, seekoff/pos (@b uncommitted mode).\n        *\n        *  NB: epptr() - pbase() == _M_buf_size - 1, since _M_buf_size\n        *  reflects the actual allocated memory and the last cell is reserved"}, {"sha": "9ac72fd5c00b0f1ef3f8819dd62cd25646ce4a88", "filename": "libstdc++-v3/include/std/iosfwd", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fiosfwd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fiosfwd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fiosfwd?ref=2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d", "patch": "@@ -1,7 +1,7 @@\n // Forwarding declarations -*- C++ -*-\n \n // Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-// 2006, 2007, 2009\n+// 2006, 2007, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -64,7 +64,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n    *  should not do it yourself.  Instead, include the &lt;iosfwd&gt;\n    *  header, which contains only declarations of all the I/O classes as\n    *  well as the typedefs.  Trying to forward-declare the typedefs\n-   *  themselves (e.g., \"class ostream;\") is not valid ISO C++.\n+   *  themselves (e.g., <code>class ostream;</code>) is not valid ISO C++.\n    *\n    *  For more specific declarations, see\n    *  http://gcc.gnu.org/onlinedocs/libstdc++/manual/bk01pt11ch24.html"}, {"sha": "9212ea82846f3bc0fd5085a22aeb7abd9bafbe50", "filename": "libstdc++-v3/include/std/iostream", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fiostream", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fiostream", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fiostream?ref=2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d", "patch": "@@ -1,6 +1,6 @@\n // Standard iostream objects -*- C++ -*-\n \n-// Copyright (C) 1997, 1998, 1999, 2001, 2002, 2005, 2008, 2009\n+// Copyright (C) 1997, 1998, 1999, 2001, 2002, 2005, 2008, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -50,9 +50,10 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n    *  http://gcc.gnu.org/onlinedocs/libstdc++/manual/bk01pt11ch24.html\n    *  and the @link iosfwd I/O forward declarations @endlink\n    *\n-   *  They are required by default to cooperate with the global C library's\n-   *  @c FILE streams, and to be available during program startup and\n-   *  termination.  For more information, see the HOWTO linked to above.\n+   *  They are required by default to cooperate with the global C\n+   *  library's @c FILE streams, and to be available during program\n+   *  startup and termination. For more information, see the HOWTO\n+   *  linked to above.\n   */\n   //@{\n   extern istream cin;\t\t///< Linked to standard input"}, {"sha": "f97e1fec0e12e8cbbcb71dea3ff2948b1b8258e5", "filename": "libstdc++-v3/include/std/istream", "status": "modified", "additions": 18, "deletions": 15, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fistream", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fistream", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fistream?ref=2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d", "patch": "@@ -1,7 +1,7 @@\n // Input streams -*- C++ -*-\n \n // Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-// 2006, 2007, 2008, 2009\n+// 2006, 2007, 2008, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -112,8 +112,9 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *  @brief  Interface for manipulators.\n        *\n        *  Manipulators such as @c std::ws and @c std::dec use these\n-       *  functions in constructs like \"std::cin >> std::ws\".  For more\n-       *  information, see the iomanip header.\n+       *  functions in constructs like \n+       *  <code>std::cin >> std::ws</code>. \n+       *  For more information, see the iomanip header.\n       */\n       __istream_type&\n       operator>>(__istream_type& (*__pf)(__istream_type&))\n@@ -326,7 +327,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *  @param  n  Maximum number of characters to store in @a s.\n        *  @return  *this\n        *\n-       *  Returns @c get(s,n,widen('\\n')).\n+       *  Returns @c get(s,n,widen(&apos;\\n&apos;)).\n       */\n       __istream_type& \n       get(char_type* __s, streamsize __n)\n@@ -359,7 +360,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *  @param  sb  A streambuf in which to store data.\n        *  @return  *this\n        *\n-       *  Returns @c get(sb,widen('\\n')).\n+       *  Returns @c get(sb,widen(&apos;\\n&apos;)).\n       */\n       __istream_type&\n       get(__streambuf_type& __sb)\n@@ -399,7 +400,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *  @param  n  Maximum number of characters to extract.\n        *  @return  *this\n        *\n-       *  Returns @c getline(s,n,widen('\\n')).\n+       *  Returns @c getline(s,n,widen(&apos;\\n&apos;)).\n       */\n       __istream_type& \n       getline(char_type* __s, streamsize __n)\n@@ -624,9 +625,9 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n    *  @brief  Performs setup work for input streams.\n    *\n    *  Objects of this class are created before all of the standard\n-   *  extractors are run.  It is responsible for \"exception-safe prefix and\n-   *  suffix operations,\" although only prefix actions are currently required\n-   *  by the standard. \n+   *  extractors are run.  It is responsible for <em>exception-safe\n+   *  prefix and suffix operations,</em> although only prefix actions\n+   *  are currently required by the standard.\n   */\n   template<typename _CharT, typename _Traits>\n     class basic_istream<_CharT, _Traits>::sentry\n@@ -648,8 +649,9 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *  @param  noskipws  Whether to consume whitespace or not.\n        *\n        *  If the stream state is good (@a is.good() is true), then the\n-       *  following actions are performed, otherwise the sentry state is\n-       *  false (\"not okay\") and failbit is set in the stream state.\n+       *  following actions are performed, otherwise the sentry state\n+       *  is false (<em>not okay</em>) and failbit is set in the\n+       *  stream state.\n        *\n        *  The sentry's preparatory actions are:\n        *\n@@ -661,7 +663,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *     used to determine whether each character is whitespace.\n        *\n        *  If the stream state is still good, then the sentry state becomes\n-       *  true (\"okay\").\n+       *  true (@a okay).\n       */\n       explicit\n       sentry(basic_istream<_CharT, _Traits>& __is, bool __noskipws = false);\n@@ -720,9 +722,10 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n    *  status, this function extracts up to @c n characters and stores them\n    *  into the array starting at @a s.  @c n is defined as:\n    *\n-   *  - if @c width() is greater than zero, @c n is width()\n-   *  - otherwise @c n is \"the number of elements of the largest array of\n-   *    @c char_type that can store a terminating @c eos.\" [27.6.1.2.3]/6\n+   *  - if @c width() is greater than zero, @c n is width() otherwise\n+   *  - @c n is <em>the number of elements of the largest array of *\n+   *  - @c char_type that can store a terminating @c eos.</em>\n+   *  - [27.6.1.2.3]/6\n    *\n    *  Characters are extracted and stored until one of the following happens:\n    *  - @c n-1 characters are stored"}, {"sha": "76a53222893aef20b7f71229e6fe5c081a12e200", "filename": "libstdc++-v3/include/std/limits", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fstd%2Flimits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fstd%2Flimits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Flimits?ref=2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d", "patch": "@@ -1,7 +1,7 @@\n // The template and inlines for the numeric_limits classes. -*- C++ -*- \n \n // Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007,\n-// 2008, 2009  Free Software Foundation, Inc.\n+// 2008, 2009, 2010  Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -200,12 +200,12 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     /** True if the type is signed.  */\n     static const bool is_signed = false;\n     /** True if the type is integer.\n-     *  Is this supposed to be \"if the type is integral\"?\n+     *  Is this supposed to be <em>if the type is integral?</em>\n     */\n     static const bool is_integer = false;\n-    /** True if the type uses an exact representation.  'All integer types are\n+    /** True if the type uses an exact representation. <em>All integer types are\n         exact, but not all exact types are integer.  For example, rational and\n-        fixed-exponent representations are exact but not integer.'\n+        fixed-exponent representations are exact but not integer.</em>\n         [18.2.1.2]/15  */\n     static const bool is_exact = false;\n     /** For integer types, specifies the base of the representation.  For\n@@ -229,23 +229,23 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     /** True if the type has a representation for positive infinity.  */\n     static const bool has_infinity = false;\n     /** True if the type has a representation for a quiet (non-signaling)\n-        'Not a Number.'  */\n+        <em>Not a Number</em>.  */\n     static const bool has_quiet_NaN = false;\n     /** True if the type has a representation for a signaling\n-        'Not a Number.'  */\n+        <em>Not a Number</em>.  */\n     static const bool has_signaling_NaN = false;\n     /** See std::float_denorm_style for more information.  */\n     static const float_denorm_style has_denorm = denorm_absent;\n-    /** 'True if loss of accuracy is detected as a denormalization loss,\n-        rather than as an inexact result.' [18.2.1.2]/42  */\n+    /** <em>True if loss of accuracy is detected as a denormalization loss,\n+        rather than as an inexact result.</em> [18.2.1.2]/42  */\n     static const bool has_denorm_loss = false;\n \n     /** True if-and-only-if the type adheres to the IEC 559 standard, also\n         known as IEEE 754.  (Only makes sense for floating point types.)  */\n     static const bool is_iec559 = false;\n-    /** 'True if the set of values representable by the type is finite.   All\n-        built-in types are bounded, this member would be false for arbitrary\n-\tprecision types.' [18.2.1.2]/54  */\n+    /** <em>True if the set of values representable by the type is\n+        finite.  All built-in types are bounded, this member would be\n+        false for arbitrary precision types.</em> [18.2.1.2]/54  */\n     static const bool is_bounded = false;\n     /** True if the type is @e modulo, that is, if it is possible to add two\n         positive numbers and have a result that wraps around to a third number\n@@ -289,9 +289,11 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       static _Tp round_error() throw() { return static_cast<_Tp>(0); }\n       /** The representation of positive infinity, if @c has_infinity.  */\n       static _Tp infinity() throw()  { return static_cast<_Tp>(0); }\n-      /** The representation of a quiet \"Not a Number,\" if @c has_quiet_NaN. */\n+\n+      /** The representation of a quiet <em>Not a Number</em>, \n+\t  if @c has_quiet_NaN. */\n       static _Tp quiet_NaN() throw() { return static_cast<_Tp>(0); }\n-      /** The representation of a signaling \"Not a Number,\" if\n+      /** The representation of a signaling <em>Not a Number</em>, if\n           @c has_signaling_NaN. */\n       static _Tp signaling_NaN() throw() { return static_cast<_Tp>(0); }\n       /** The minimum positive denormalized value.  For types where"}, {"sha": "17426f482492307dc690d3857c2bee7f62d2d1c8", "filename": "libstdc++-v3/include/std/ostream", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fostream", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fostream", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fostream?ref=2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d", "patch": "@@ -1,7 +1,7 @@\n // Output streams -*- C++ -*-\n \n // Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-// 2006, 2007, 2008, 2009\n+// 2006, 2007, 2008, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -370,8 +370,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n    *  @brief  Performs setup work for output streams.\n    *\n    *  Objects of this class are created before all of the standard\n-   *  inserters are run.  It is responsible for \"exception-safe prefix and\n-   *  suffix operations.\" \n+   *  inserters are run.  It is responsible for <em>exception-safe prefix and\n+   *  suffix operations</em>.\n   */\n   template <typename _CharT, typename _Traits>\n     class basic_ostream<_CharT, _Traits>::sentry\n@@ -390,7 +390,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *  is called to synchronize the output sequences.\n        *\n        *  If the stream state is still good, then the sentry state becomes\n-       *  true (\"okay\").\n+       *  true (@a okay).\n       */\n       explicit\n       sentry(basic_ostream<_CharT, _Traits>& __os);\n@@ -544,7 +544,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   /**\n    *  @brief  Write a null character into the output sequence.\n    *\n-   *  \"Null character\" is @c CharT() by definition.  For CharT of @c char,\n+   *  <em>Null character</em> is @c CharT() by definition.  For CharT of @c char,\n    *  this correctly writes the ASCII @c NUL character string terminator.\n   */\n   template<typename _CharT, typename _Traits>"}, {"sha": "f000ac079c824b51b79072d362516b2f25c1c58d", "filename": "libstdc++-v3/include/std/sstream", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsstream", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsstream", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsstream?ref=2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d", "patch": "@@ -1,7 +1,7 @@\n // String based streams -*- C++ -*-\n \n // Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-// 2006, 2008, 2009 Free Software Foundation, Inc.\n+// 2006, 2008, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -112,9 +112,9 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *  @brief  Copying out the string buffer.\n        *  @return  A copy of one of the underlying sequences.\n        *\n-       *  'If the buffer is only created in input mode, the underlying\n+       *  <em>If the buffer is only created in input mode, the underlying\n        *  character sequence is equal to the input sequence; otherwise, it\n-       *  is equal to the output sequence.' [27.7.1.2]/1\n+       *  is equal to the output sequence.</em> [27.7.1.2]/1\n       */\n       __string_type\n       str() const"}, {"sha": "ac8767e9c5ab4ea06630ffad97b396eb54149acf", "filename": "libstdc++-v3/include/std/streambuf", "status": "modified", "additions": 33, "deletions": 31, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstreambuf", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstreambuf", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstreambuf?ref=2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d", "patch": "@@ -1,7 +1,7 @@\n // Stream buffer classes -*- C++ -*-\n \n // Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-// 2006, 2007, 2008, 2009 Free Software Foundation, Inc.\n+// 2006, 2007, 2008, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -79,7 +79,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n    *     represents, at any moment, a (sub)sequence of characters from the\n    *     sequence.  Operations performed on a sequence alter the values\n    *     stored in these pointers, perform reads and writes directly to or\n-   *     from associated sequences, and alter \"the stream position\" and\n+   *     from associated sequences, and alter <em>the stream position</em> and\n    *     conversion state as needed to maintain this subsequence relationship.\n    *     The three pointers are:\n    *     - the <em>beginning pointer</em>, or lowest element address in the\n@@ -340,9 +340,10 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *  @param  c  The character to push back.\n        *  @return  The previous character, if possible.\n        *\n-       *  Similar to sungetc(), but @a c is pushed onto the stream instead\n-       *  of 'the previous character.'  If successful, the next character\n-       *  fetched from the input stream will be @a c.\n+       *  Similar to sungetc(), but @a c is pushed onto the stream\n+       *  instead of <em>the previous character.</em> If successful,\n+       *  the next character fetched from the input stream will be @a\n+       *  c.\n       */\n       int_type \n       sputbackc(char_type __c)\n@@ -364,10 +365,10 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *  @brief  Moving backwards in the input stream.\n        *  @return  The previous character, if possible.\n        *\n-       *  If a putback position is available, this function decrements the\n-       *  input pointer and returns that character.  Otherwise, calls and\n-       *  returns pbackfail().  The effect is to 'unget' the last character\n-       *  'gotten.'\n+       *  If a putback position is available, this function decrements\n+       *  the input pointer and returns that character.  Otherwise,\n+       *  calls and returns pbackfail().  The effect is to @a unget\n+       *  the last character @a gotten.\n       */\n       int_type \n       sungetc()\n@@ -540,11 +541,11 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *  @brief  Changes translations.\n        *  @param  loc  A new locale.\n        *\n-       *  Translations done during I/O which depend on the current locale\n-       *  are changed by this call.  The standard adds, 'Between invocations\n-       *  of this function a class derived from streambuf can safely cache\n-       *  results of calls to locale functions and to members of facets\n-       *  so obtained.'\n+       *  Translations done during I/O which depend on the current\n+       *  locale are changed by this call.  The standard adds,\n+       *  <em>Between invocations of this function a class derived\n+       *  from streambuf can safely cache results of calls to locale\n+       *  functions and to members of facets so obtained.</em>\n        *\n        *  @note  Base class version does nothing.\n       */\n@@ -596,7 +597,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *  @return  -1 on failure.\n        *\n        *  Each derived class provides its own appropriate behavior,\n-       *  including the definition of \"failure\".\n+       *  including the definition of @a failure.\n        *  @note  Base class version does nothing, returns zero.\n       */\n       virtual int \n@@ -608,18 +609,18 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *  @return  An estimate of the number of characters available in the\n        *           input sequence, or -1.\n        *\n-       *  'If it returns a positive value, then successive calls to\n-       *  @c underflow() will not return @c traits::eof() until at least that\n-       *  number of characters have been supplied.  If @c showmanyc()\n-       *  returns -1, then calls to @c underflow() or @c uflow() will fail.'\n-       *  [27.5.2.4.3]/1\n+       *  <em>If it returns a positive value, then successive calls to\n+       *  @c underflow() will not return @c traits::eof() until at\n+       *  least that number of characters have been supplied.  If @c\n+       *  showmanyc() returns -1, then calls to @c underflow() or @c\n+       *  uflow() will fail.</em> [27.5.2.4.3]/1\n        *\n        *  @note  Base class version does nothing, returns zero.\n-       *  @note  The standard adds that 'the intention is not only that the\n+       *  @note  The standard adds that <em>the intention is not only that the\n        *         calls [to underflow or uflow] will not return @c eof() but\n-       *         that they will return immediately.'\n-       *  @note  The standard adds that 'the morphemes of @c showmanyc are\n-       *         'es-how-many-see', not 'show-manic'.'\n+       *         that they will return immediately.</em>\n+       *  @note  The standard adds that <em>the morphemes of @c showmanyc are\n+       *         @b es-how-many-see, not @b show-manic.</em>\n       */\n       virtual streamsize \n       showmanyc() { return 0; }\n@@ -646,7 +647,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *\n        *  Informally, this function is called when the input buffer is\n        *  exhausted (or does not exist, as buffering need not actually be\n-       *  done).  If a buffer exists, it is 'refilled'.  In either case, the\n+       *  done).  If a buffer exists, it is @a refilled.  In either case, the\n        *  next available character is returned, or @c traits::eof() to\n        *  indicate a null pending sequence.\n        *\n@@ -690,7 +691,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       /**\n        *  @brief  Tries to back up the input sequence.\n        *  @param  c  The character to be inserted back into the sequence.\n-       *  @return  eof() on failure, 'some other value' on success\n+       *  @return  eof() on failure, <em>some other value</em> on success\n        *  @post  The constraints of @c gptr(), @c eback(), and @c pptr()\n        *         are the same as for @c underflow().\n        *\n@@ -724,11 +725,12 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *  @return  eof() to indicate failure, something else (usually\n        *           @a c, or not_eof())\n        *\n-       *  Informally, this function is called when the output buffer is full\n-       *  (or does not exist, as buffering need not actually be done).  If a\n-       *  buffer exists, it is 'consumed', with 'some effect' on the\n-       *  controlled sequence.  (Typically, the buffer is written out to the\n-       *  sequence verbatim.)  In either case, the character @a c is also\n+       *  Informally, this function is called when the output buffer\n+       *  is full (or does not exist, as buffering need not actually\n+       *  be done).  If a buffer exists, it is @a consumed, with\n+       *  <em>some effect</em> on the controlled sequence.\n+       *  (Typically, the buffer is written out to the sequence\n+       *  verbatim.)  In either case, the character @a c is also\n        *  written out, if @a c is not @c eof().\n        *\n        *  For a formal definition of this function, see a good text"}, {"sha": "7bc0d5e5f75b646cff94d6272240967d6fd606cf", "filename": "libstdc++-v3/include/tr1/functional", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional?ref=2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d", "patch": "@@ -1,6 +1,7 @@\n // TR1 functional header -*- C++ -*-\n \n-// Copyright (C) 2004, 2005, 2006, 2007, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2004, 2005, 2006, 2007, 2009, 2010\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -1383,7 +1384,7 @@ namespace tr1\n   struct _M_clear_type;\n \n   /**\n-   *  Trait identifying \"location-invariant\" types, meaning that the\n+   *  Trait identifying @a location-invariant types, meaning that the\n    *  address of the object (or any of its members) will not escape.\n    *  Also implies a trivial copy constructor and assignment operator.\n    */"}, {"sha": "c53fb8e5e81809df4bc898c1067ed6485b2ea848", "filename": "libstdc++-v3/include/tr1/hypergeometric.tcc", "status": "modified", "additions": 24, "deletions": 20, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fhypergeometric.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fhypergeometric.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fhypergeometric.tcc?ref=2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d", "patch": "@@ -1,6 +1,6 @@\n // Special functions -*- C++ -*-\n \n-// Copyright (C) 2006, 2007, 2008, 2009\n+// Copyright (C) 2006, 2007, 2008, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -64,9 +64,10 @@ namespace tr1\n      *                      \\frac{x^n}{n!}\n      *   @f]\n      * \n-     *   If a and b are integers and a < 0 and either b > 0 or b < a then the\n-     *   series is a polynomial with a finite number of terms.  If b is an integer\n-     *   and b <= 0 the confluent hypergeometric function is undefined.\n+     *   If a and b are integers and a < 0 and either b > 0 or b < a\n+     *   then the series is a polynomial with a finite number of\n+     *   terms.  If b is an integer and b <= 0 the confluent\n+     *   hypergeometric function is undefined.\n      *\n      *   @param  __a  The \"numerator\" parameter.\n      *   @param  __c  The \"denominator\" parameter.\n@@ -212,8 +213,8 @@ namespace tr1\n      * \n      *   @todo  Handle b == nonpositive integer blowup - return NaN.\n      *\n-     *   @param  __a  The \"numerator\" parameter.\n-     *   @param  __c  The \"denominator\" parameter.\n+     *   @param  __a  The @a numerator parameter.\n+     *   @param  __c  The @a denominator parameter.\n      *   @param  __x  The argument of the confluent hypergeometric function.\n      *   @return  The confluent hypergeometric function.\n      */\n@@ -255,9 +256,9 @@ namespace tr1\n      * \n      *   This works and it's pretty fast.\n      *\n-     *   @param  __a  The first \"numerator\" parameter.\n-     *   @param  __a  The second \"numerator\" parameter.\n-     *   @param  __c  The \"denominator\" parameter.\n+     *   @param  __a  The first @a numerator parameter.\n+     *   @param  __a  The second @a numerator parameter.\n+     *   @param  __c  The @a denominator parameter.\n      *   @param  __x  The argument of the confluent hypergeometric function.\n      *   @return  The confluent hypergeometric function.\n      */\n@@ -401,10 +402,11 @@ namespace tr1\n \n \n     /**\n-     *  @brief  Return the hypogeometric function @f$ _2F_1(a,b;c;x) @f$ by the reflection\n-     *          formulae in Abramowitz & Stegun formula 15.3.6 for d = c - a - b not integral\n-     *          and formula 15.3.11 for d = c - a - b integral.\n-     *          This assumes a, b, c != negative integer.\n+     *  @brief  Return the hypogeometric function @f$ _2F_1(a,b;c;x) @f$ \n+     *  by the reflection formulae in Abramowitz & Stegun formula\n+     *  15.3.6 for d = c - a - b not integral and formula 15.3.11 for\n+     *  d = c - a - b integral.  This assumes a, b, c != negative\n+     *  integer.\n      *\n      *   The hypogeometric function is defined by\n      *   @f[\n@@ -504,8 +506,8 @@ namespace tr1\n                     }\n \n                   if (__ln_pre1 > __log_max)\n-                    std::__throw_runtime_error(__N(\"Overflow of gamma functions \"\n-                                                   \"in __hyperg_luke.\"));\n+                    std::__throw_runtime_error(__N(\"Overflow of gamma functions\"\n+                                                   \" in __hyperg_luke.\"));\n                   else\n                     __F1 = std::exp(__ln_pre1) * __sum1;\n                 }\n@@ -551,7 +553,8 @@ namespace tr1\n               int __j;\n               for (__j = 1; __j < __maxiter; ++__j)\n                 {\n-                  //  Values for psi functions use recurrence; Abramowitz & Stegun 6.3.5\n+                  //  Values for psi functions use recurrence;\n+                  //  Abramowitz & Stegun 6.3.5\n                   const _Tp __term1 = _Tp(1) / _Tp(__j)\n                                     + _Tp(1) / (__ad + __j);\n                   const _Tp __term2 = _Tp(1) / (__a + __d1 + _Tp(__j - 1))\n@@ -713,9 +716,9 @@ namespace tr1\n      *                      \\frac{x^n}{n!}\n      *   @f]\n      *\n-     *   @param  __a  The first \"numerator\" parameter.\n-     *   @param  __a  The second \"numerator\" parameter.\n-     *   @param  __c  The \"denominator\" parameter.\n+     *   @param  __a  The first @a numerator parameter.\n+     *   @param  __a  The second @a numerator parameter.\n+     *   @param  __c  The @a denominator parameter.\n      *   @param  __x  The argument of the confluent hypergeometric function.\n      *   @return  The confluent hypergeometric function.\n      */\n@@ -748,7 +751,8 @@ namespace tr1\n         return __hyperg_series(__a, __b, __c, __x);\n       else if (std::abs(__a) < _Tp(10) && std::abs(__b) < _Tp(10))\n         {\n-          //  For integer a and b the hypergeometric function is a finite polynomial.\n+          //  For integer a and b the hypergeometric function is a\n+          //  finite polynomial.\n           if (__a < _Tp(0)  &&  std::abs(__a - __a_nint) < __toler)\n             return __hyperg_series(__a_nint, __b, __c, __x);\n           else if (__b < _Tp(0)  &&  std::abs(__b - __b_nint) < __toler)"}, {"sha": "0d43c850e96e7bee86e137f20fef9d8d9eaf68c9", "filename": "libstdc++-v3/include/tr1/random.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom.h?ref=2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d", "patch": "@@ -1,6 +1,6 @@\n // random number generation -*- C++ -*-\n \n-// Copyright (C) 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -683,8 +683,8 @@ namespace tr1\n    * The classic Mersenne Twister.\n    *\n    * Reference:\n-   * M. Matsumoto and T. Nishimura, \"Mersenne Twister: A 623-Dimensionally\n-   * Equidistributed Uniform Pseudo-Random Number Generator\", ACM Transactions\n+   * M. Matsumoto and T. Nishimura, Mersenne Twister: A 623-Dimensionally\n+   * Equidistributed Uniform Pseudo-Random Number Generator, ACM Transactions\n    * on Modeling and Computer Simulation, Vol. 8, No. 1, January 1998, pp 3-30.\n    */\n   typedef mersenne_twister<\n@@ -708,8 +708,8 @@ namespace tr1\n    * The size of the state is @f$ r @f$\n    * and the maximum period of the generator is @f$ m^r - m^s -1 @f$.\n    *\n-   * N1688[4.13] says \"the template parameter _IntType shall denote an integral\n-   * type large enough to store values up to m.\"\n+   * N1688[4.13] says <em>the template parameter _IntType shall denote\n+   * an integral type large enough to store values up to m</em>.\n    *\n    * @var _M_x     The state of the generator.  This is a ring buffer.\n    * @var _M_carry The carry."}, {"sha": "f458cc74748a2cc4cd6d413768df986b198d2106", "filename": "libstdc++-v3/include/tr1/random.tcc", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom.tcc?ref=2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d", "patch": "@@ -1,6 +1,6 @@\n // random number generation (out of line) -*- C++ -*-\n \n-// Copyright (C) 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -1060,7 +1060,7 @@ namespace tr1\n    * is defined.\n    *\n    * Reference:\n-   * Devroye, L. \"Non-Uniform Random Variates Generation.\" Springer-Verlag,\n+   * Devroye, L. Non-Uniform Random Variates Generation. Springer-Verlag,\n    * New York, 1986, Ch. X, Sects. 3.3 & 3.4 (+ Errata!).\n    */\n   template<typename _IntType, typename _RealType>\n@@ -1285,7 +1285,7 @@ namespace tr1\n    * is defined.\n    *\n    * Reference:\n-   * Devroye, L. \"Non-Uniform Random Variates Generation.\" Springer-Verlag,\n+   * Devroye, L. Non-Uniform Random Variates Generation. Springer-Verlag,\n    * New York, 1986, Ch. X, Sect. 4 (+ Errata!).\n    */\n   template<typename _IntType, typename _RealType>\n@@ -1514,7 +1514,7 @@ namespace tr1\n   /**\n    * Polar method due to Marsaglia.\n    *\n-   * Devroye, L. \"Non-Uniform Random Variates Generation.\" Springer-Verlag,\n+   * Devroye, L. Non-Uniform Random Variates Generation. Springer-Verlag,\n    * New York, 1986, Ch. V, Sect. 4.4.\n    */\n   template<typename _RealType>\n@@ -1618,14 +1618,14 @@ namespace tr1\n    * alpha < 1.\n    *\n    * References:\n-   * Cheng, R. C. \"The Generation of Gamma Random Variables with Non-integral\n-   * Shape Parameter.\" Applied Statistics, 26, 71-75, 1977.\n+   * Cheng, R. C. The Generation of Gamma Random Variables with Non-integral\n+   * Shape Parameter. Applied Statistics, 26, 71-75, 1977.\n    *\n-   * Vaduva, I. \"Computer Generation of Gamma Gandom Variables by Rejection\n-   * and Composition Procedures.\" Math. Operationsforschung and Statistik,\n+   * Vaduva, I. Computer Generation of Gamma Gandom Variables by Rejection\n+   * and Composition Procedures. Math. Operationsforschung and Statistik,\n    * Series in Statistics, 8, 545-576, 1977.\n    *\n-   * Devroye, L. \"Non-Uniform Random Variates Generation.\" Springer-Verlag,\n+   * Devroye, L. Non-Uniform Random Variates Generation. Springer-Verlag,\n    * New York, 1986, Ch. IX, Sect. 3.4 (+ Errata!).\n    */\n   template<typename _RealType>"}, {"sha": "6a4567bbc8a8451b2420a85cc9d5ddf029edda72", "filename": "libstdc++-v3/include/tr1_impl/regex", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Fregex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Fregex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Fregex?ref=2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d", "patch": "@@ -1,6 +1,6 @@\n // class template regex -*- C++ -*-\n \n-// Copyright (C) 2007, 2008, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2007, 2008, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -262,9 +262,9 @@ namespace regex_constants\n    * Format strings (from ECMA-262 [15.5.4.11]):\n    * @li $$  The dollar-sign itself ($)\n    * @li $&  The matched substring.\n-   * @li $`  The portion of <em>string</em> that precedes the matched substring.\n+   * @li $`  The portion of @a string that precedes the matched substring.\n    *         This would be match_results::prefix().\n-   * @li $'  The portion of <em>string</em> that follows the matched substring.\n+   * @li $'  The portion of @a string that follows the matched substring.\n    *         This would be match_results::suffix().\n    * @li $n  The nth capture, where n is in [1,9] and $n is not followed by a\n    *         decimal digit.  If n <= match_results::size() and the nth capture"}, {"sha": "96be31cb62af3745b8e9755ad041018ec1bd4ba8", "filename": "libstdc++-v3/testsuite/23_containers/deque/requirements/dr438/assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fassign_neg.cc?ref=2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1576 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1577 }\n // { dg-excess-errors \"\" }\n \n #include <deque>"}, {"sha": "59d4e2f4158daa064303eaa3f48c1c1014eceb6a", "filename": "libstdc++-v3/testsuite/23_containers/deque/requirements/dr438/constructor_1_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc?ref=2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1515 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1516 }\n // { dg-excess-errors \"\" }\n \n #include <deque>"}, {"sha": "6208581b87753ae0aa773b66ccf963214216305a", "filename": "libstdc++-v3/testsuite/23_containers/deque/requirements/dr438/constructor_2_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc?ref=2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1515 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1516 }\n // { dg-excess-errors \"\" }\n \n #include <deque>"}, {"sha": "7fb2479d02cce8052bf00070a841f1e6d647c40f", "filename": "libstdc++-v3/testsuite/23_containers/deque/requirements/dr438/insert_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Finsert_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Finsert_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Finsert_neg.cc?ref=2a60a9f6523b9942c2a2d9f565ecc70eead5eb1d", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1660 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1661 }\n // { dg-excess-errors \"\" }\n \n #include <deque>"}]}