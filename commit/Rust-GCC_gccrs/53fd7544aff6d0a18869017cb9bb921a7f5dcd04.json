{"sha": "53fd7544aff6d0a18869017cb9bb921a7f5dcd04", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTNmZDc1NDRhZmY2ZDBhMTg4NjkwMTdjYjliYjkyMWE3ZjVkY2QwNA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-06-29T09:24:38Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-06-29T09:24:38Z"}, "message": "match.pd: Avoid (intptr_t)x eq/ne CST to x eq/ne (typeof x) CST opt in GENERIC when sanitizing [PR101210]\n\nWhen we have (intptr_t) x == cst where x has REFERENCE_TYPE, this\noptimization creates x == cst out of it where cst has REFERENCE_TYPE.\nIf it is done in GENERIC folding, it can results in ubsan failures\nwhere the INTEGER_CST with REFERENCE_TYPE is instrumented.\n\nFixed by deferring it to GIMPLE folding in this case.\n\n2021-06-29  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/101210\n\t* match.pd ((intptr_t)x eq/ne CST to x eq/ne (typeof x) CST): Don't\n\tperform the optimization in GENERIC when sanitizing and x has a\n\treference type.\n\n\t* g++.dg/ubsan/pr101210.C: New test.", "tree": {"sha": "710f2740fdeb90cb0f0fb62a1e619a90b67b3f18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/710f2740fdeb90cb0f0fb62a1e619a90b67b3f18"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/53fd7544aff6d0a18869017cb9bb921a7f5dcd04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53fd7544aff6d0a18869017cb9bb921a7f5dcd04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53fd7544aff6d0a18869017cb9bb921a7f5dcd04", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53fd7544aff6d0a18869017cb9bb921a7f5dcd04/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c01760bc548ba79bc9ac15168b27fe7aabcb19ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c01760bc548ba79bc9ac15168b27fe7aabcb19ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c01760bc548ba79bc9ac15168b27fe7aabcb19ae"}], "stats": {"total": 20, "additions": 19, "deletions": 1}, "files": [{"sha": "82052714e1c2f46f3eb4b2cf78ad79e50c562110", "filename": "gcc/match.pd", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53fd7544aff6d0a18869017cb9bb921a7f5dcd04/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53fd7544aff6d0a18869017cb9bb921a7f5dcd04/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=53fd7544aff6d0a18869017cb9bb921a7f5dcd04", "patch": "@@ -5124,7 +5124,12 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n   (cmp (convert @0) INTEGER_CST@1)\n   (if (((POINTER_TYPE_P (TREE_TYPE (@0))\n \t && !FUNC_OR_METHOD_TYPE_P (TREE_TYPE (TREE_TYPE (@0)))\n-\t && INTEGRAL_TYPE_P (TREE_TYPE (@1)))\n+\t && INTEGRAL_TYPE_P (TREE_TYPE (@1))\n+\t /* Don't perform this optimization in GENERIC if @0 has reference\n+\t    type when sanitizing.  See PR101210.  */\n+\t && !(GENERIC\n+\t      && TREE_CODE (TREE_TYPE (@0)) == REFERENCE_TYPE\n+\t      && (flag_sanitize & (SANITIZE_NULL | SANITIZE_ALIGNMENT))))\n \t|| (INTEGRAL_TYPE_P (TREE_TYPE (@0))\n \t    && POINTER_TYPE_P (TREE_TYPE (@1))\n \t    && !FUNC_OR_METHOD_TYPE_P (TREE_TYPE (TREE_TYPE (@1)))))"}, {"sha": "955b8203f446b9ee73239e68cff230abdc2cd3da", "filename": "gcc/testsuite/g++.dg/ubsan/pr101210.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53fd7544aff6d0a18869017cb9bb921a7f5dcd04/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fpr101210.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53fd7544aff6d0a18869017cb9bb921a7f5dcd04/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fpr101210.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fpr101210.C?ref=53fd7544aff6d0a18869017cb9bb921a7f5dcd04", "patch": "@@ -0,0 +1,13 @@\n+// PR c++/101210\n+// { dg-do run }\n+// { dg-options \"-fsanitize=null,alignment -fno-sanitize-recover=null,alignment\" }\n+\n+int v[2];\n+int\n+main ()\n+{\n+  int x;\n+  int &y = x;\n+  v[0] = reinterpret_cast<__INTPTR_TYPE__>(&y) == 0;\n+  v[1] = reinterpret_cast<__INTPTR_TYPE__>(&y) == 1;\n+}"}]}