{"sha": "16659fcf3307e1d41924bd4176053f2a2643fb38", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTY2NTlmY2YzMzA3ZTFkNDE5MjRiZDQxNzYwNTNmMmEyNjQzZmIzOA==", "commit": {"author": {"name": "DJ Delorie", "email": "dj@redhat.com", "date": "2006-03-31T21:53:04Z"}, "committer": {"name": "DJ Delorie", "email": "dj@gcc.gnu.org", "date": "2006-03-31T21:53:04Z"}, "message": "cond.md: Set condition flags properly throughout.\n\n* config/m32c/cond.md: Set condition flags properly throughout.\n* config/m32c/minmax.md: Likewise.\n* config/m32c/prologue.md: Likewise.\n* config/m32c/bitops.md: Likewise.\n* config/m32c/muldiv.md: Likewise.\n* config/m32c/mov.md: Likewise.\n* config/m32c/addsub.md: Likewise.\n* config/m32c/m32c.md: Likewise.\n* config/m32c/jump.md: Likewise.\n* config/m32c/shift.md: Likewise.\n\n* config/m32c/cond.md (cmp<mode>): Call m32c_output_compare to\nconditionally output the pattern for this.\n* config/m32c/m32c.c (flags_needed_for_conditional): New.\n(m32c_compare_redundant): New.\n(m32c_output_compare): New.\n* config/m32c/m32c-protos.h (m32c_output_compare): New.\n\n* config/m32c/m32c.c (m32c_prepare_shift): Fix logic to clobber\ndest, not src.  Allow other 4-byte modes.\n\nFrom-SVN: r112591", "tree": {"sha": "a80662e4b59d239f622614367ca06c2977266d84", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a80662e4b59d239f622614367ca06c2977266d84"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/16659fcf3307e1d41924bd4176053f2a2643fb38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16659fcf3307e1d41924bd4176053f2a2643fb38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16659fcf3307e1d41924bd4176053f2a2643fb38", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16659fcf3307e1d41924bd4176053f2a2643fb38/comments", "author": null, "committer": null, "parents": [{"sha": "6b04402b9228b0d62e5dc8c3715543d19dde1e66", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b04402b9228b0d62e5dc8c3715543d19dde1e66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b04402b9228b0d62e5dc8c3715543d19dde1e66"}], "stats": {"total": 402, "additions": 367, "deletions": 35}, "files": [{"sha": "d11b14c29791867d8524c6d66c1153c1fae1f2a4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16659fcf3307e1d41924bd4176053f2a2643fb38/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16659fcf3307e1d41924bd4176053f2a2643fb38/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=16659fcf3307e1d41924bd4176053f2a2643fb38", "patch": "@@ -1,3 +1,26 @@\n+2006-03-31  DJ Delorie  <dj@redhat.com>\n+\n+\t* config/m32c/cond.md: Set condition flags properly throughout.\n+\t* config/m32c/minmax.md: Likewise.\n+\t* config/m32c/prologue.md: Likewise.\n+\t* config/m32c/bitops.md: Likewise.\n+\t* config/m32c/muldiv.md: Likewise.\n+\t* config/m32c/mov.md: Likewise.\n+\t* config/m32c/addsub.md: Likewise.\n+\t* config/m32c/m32c.md: Likewise.\n+\t* config/m32c/jump.md: Likewise.\n+\t* config/m32c/shift.md: Likewise.\n+\n+\t* config/m32c/cond.md (cmp<mode>): Call m32c_output_compare to\n+\tconditionally output the pattern for this.\n+\t* config/m32c/m32c.c (flags_needed_for_conditional): New.\n+\t(m32c_compare_redundant): New.\n+\t(m32c_output_compare): New.\n+\t* config/m32c/m32c-protos.h (m32c_output_compare): New.\n+\n+\t* config/m32c/m32c.c (m32c_prepare_shift): Fix logic to clobber\n+\tdest, not src.  Allow other 4-byte modes.\n+\n 2006-03-30  Denis Chertykov  <denisc@overta.ru>\n \n \t* doc/md.texi: Refer to avr/constraints.md instead of"}, {"sha": "83587564ebdb209b716b4a06814d7a17d0ca69bb", "filename": "gcc/config/m32c/addsub.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16659fcf3307e1d41924bd4176053f2a2643fb38/gcc%2Fconfig%2Fm32c%2Faddsub.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16659fcf3307e1d41924bd4176053f2a2643fb38/gcc%2Fconfig%2Fm32c%2Faddsub.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Faddsub.md?ref=16659fcf3307e1d41924bd4176053f2a2643fb38", "patch": "@@ -53,7 +53,7 @@\n    stc\\t%1,%0\n    mova\\t%D2[%1],%0\n    add.w\\t%2,%0\"\n-  [(set_attr \"flags\" \"oszc,oszc,oszc,oszc,oszc,oszc,oszc,oszc,oszc,oszc\")]\n+  [(set_attr \"flags\" \"oszc,oszc,oszc,oszc,oszc,oszc,n,n,n,oszc\")]\n   )\n \n (define_insn \"addpsi3\"\n@@ -69,7 +69,7 @@\n    add.l\\t%2,%0\n    mova\\t%d2[%1],%0\n    mova\\t%D2[%1],%0\"\n-  [(set_attr \"flags\" \"oszc,oszc,oszc,oszc,oszc,*,*\")]\n+  [(set_attr \"flags\" \"oszc,oszc,oszc,oszc,oszc,n,n\")]\n   )\n \n (define_insn \"subqi3\"\n@@ -134,7 +134,7 @@\n \t(neg:SI (match_operand:SI 1 \"mra_operand\" \"0,0\")))]\n   \"\"\n   \"not.w %h0 | not.w %H0 | add.w #1,%h0 | adcf.w %H0\"\n-  [(set_attr \"flags\" \"oszc,oszc\")]\n+  [(set_attr \"flags\" \"x\")]\n   )\n \n (define_insn \"absqi2\""}, {"sha": "56d6a75e1630b90de1c6fbd40c426d3702fe529b", "filename": "gcc/config/m32c/bitops.md", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16659fcf3307e1d41924bd4176053f2a2643fb38/gcc%2Fconfig%2Fm32c%2Fbitops.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16659fcf3307e1d41924bd4176053f2a2643fb38/gcc%2Fconfig%2Fm32c%2Fbitops.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fbitops.md?ref=16659fcf3307e1d41924bd4176053f2a2643fb38", "patch": "@@ -47,7 +47,7 @@\n \t\t(match_operand:QI 2 \"\" \"0\")))]\n   \"TARGET_A16\"\n   \"bset\\t%0[%1]\"\n-  [(set_attr \"flags\" \"sz\")]\n+  [(set_attr \"flags\" \"n\")]\n   )  \n \n (define_insn \"bset_hi\"\n@@ -57,7 +57,7 @@\n \t(const_int 1))]\n   \"TARGET_A16\"\n   \"bset\\t%0[%1]\"\n-  [(set_attr \"flags\" \"sz\")]\n+  [(set_attr \"flags\" \"n\")]\n   )  \n \n ;;----------------------------------------------------------------------\n@@ -73,7 +73,7 @@\n \t(const_int 0))]\n   \"TARGET_A16\"\n   \"bclr\\t%0[%1]\"\n-  [(set_attr \"flags\" \"sz\")]\n+  [(set_attr \"flags\" \"n\")]\n   )  \n \n \n@@ -183,18 +183,17 @@\n \n \n (define_insn \"iorqi3_24\"\n-  [(set (match_operand:QI 0 \"mra_operand\" \"=Sd,Rqi,RqiSd,??Rmm,RqiSd,??Rmm\")\n-\t(ior:QI (match_operand:QI 1 \"mra_operand\" \"%0,0,0,0,0,0\")\n-\t\t(match_operand:QI 2 \"mrai_operand\" \"Ilb,Ilb,iRhlSd,iRhlSd,?Rmm,?Rmm\")))]\n+  [(set (match_operand:QI 0 \"mra_operand\" \"=RqiSd,RqiSd,??Rmm,RqiSd,??Rmm\")\n+\t(ior:QI (match_operand:QI 1 \"mra_operand\" \"%0,0,0,0,0\")\n+\t\t(match_operand:QI 2 \"mrai_operand\" \"Ilb,iRhlSd,iRhlSd,?Rmm,?Rmm\")))]\n   \"TARGET_A24\"\n   \"@\n-   bset\\t%B2,%0\n    bset\\t%B2,%0\n    or.b\\t%x2,%0\n    or.b\\t%x2,%0\n    or.b\\t%x2,%0\n    or.b\\t%x2,%0\"\n-  [(set_attr \"flags\" \"n,n,sz,sz,sz,sz\")]\n+  [(set_attr \"flags\" \"n,sz,sz,sz,sz\")]\n   )\n \n (define_insn \"iorhi3_24\""}, {"sha": "9df4d041409c5a04778be6b61ac9cabe888a3fcf", "filename": "gcc/config/m32c/cond.md", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16659fcf3307e1d41924bd4176053f2a2643fb38/gcc%2Fconfig%2Fm32c%2Fcond.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16659fcf3307e1d41924bd4176053f2a2643fb38/gcc%2Fconfig%2Fm32c%2Fcond.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fcond.md?ref=16659fcf3307e1d41924bd4176053f2a2643fb38", "patch": "@@ -60,7 +60,9 @@\n   \"@\n    stzx\\t%1,%2,%0\n    stz\\t%1,%0\n-   stnz\\t%2,%0\")\n+   stnz\\t%2,%0\"\n+  [(set_attr \"flags\" \"n,n,n\")]\n+)\n \n (define_insn \"stzx_24_<mode>\"\n   [(set (match_operand:QHI 0 \"mrai_operand\" \"=RraSd,RraSd,RraSd\")\n@@ -71,7 +73,8 @@\n   \"@\n    stzx.<bwl>\\t%1,%2,%0\n    stz.<bwl>\\t%1,%0\n-   stnz.<bwl>\\t%2,%0\")\n+   stnz.<bwl>\\t%2,%0\"\n+  [(set_attr \"flags\" \"n,n,n\")])\n \n (define_insn_and_split \"stzx_reversed\"\n   [(set (match_operand 0 \"m32c_r0_operand\" \"\")\n@@ -94,7 +97,8 @@\n \t(compare (match_operand:QHPSI 0 \"mra_operand\" \"RraSd\")\n \t\t (match_operand:QHPSI 1 \"mrai_operand\" \"RraSdi\")))]\n   \"\"\n-  \"cmp.<bwl>\\t%1,%0\")\n+  \"* return m32c_output_compare(insn, operands); \"\n+  [(set_attr \"flags\" \"oszc\")])\n \n (define_insn \"b<code>\"\n   [(set (pc)\n@@ -104,6 +108,7 @@\n                       (pc)))]\n   \"\"\n   \"j<code>\\t%l0\"\n+  [(set_attr \"flags\" \"n\")]\n )\n \n ;; m32c_conditional_register_usage changes the setcc_gen_code array to\n@@ -119,7 +124,9 @@\n   [(set (match_operand:HI 0 \"mra_operand\" \"=RhiSd\")\n \t(any_cond:HI (reg:CC FLG_REGNO) (const_int 0)))]\n   \"TARGET_A24\"\n-  \"sc<code>\\t%0\")\n+  \"sc<code>\\t%0\"\n+  [(set_attr \"flags\" \"n\")]\n+)\n \n (define_expand \"movqicc\"\n   [(set (match_operand:QI 0 \"register_operand\" \"\")\n@@ -148,10 +155,10 @@\n ;; value.  This pattern recovers the sign of the discarded value based\n ;; on the flags.  Operand 0 is set to -1, 0, or 1.  This is used for\n ;; the cmpstr pattern.  For optimal code, this should be removed if\n-;; followed by a suitable CMP insn, as SCMPU sets the flags correctly\n-;; already (see the peephole following).  This pattern is 7 bytes and\n-;; 5 cycles.  If you don't need specific values, a 5/4 pattern can be\n-;; made with SCGT and BMLT to set the appropriate bits.\n+;; followed by a suitable CMP insn (see the peephole following).  This\n+;; pattern is 7 bytes and 5 cycles.  If you don't need specific\n+;; values, a 5/4 pattern can be made with SCGT and BMLT to set the\n+;; appropriate bits.\n \n (define_insn \"cond_to_int\"\n   [(set (match_operand:HI 0 \"mra_qi_operand\" \"=Rqi\")\n@@ -162,7 +169,7 @@\n \t\t\t\t\t  (const_int -1))))]\n   \"TARGET_A24\"\n   \"sceq\\t%0\\n\\tbmgt\\t1,%h0\\n\\tdec.w\\t%0\"\n-  [(set_attr \"flags\" \"sz\")]\n+  [(set_attr \"flags\" \"x\")]\n   )  \n \n ;; A cond_to_int followed by a compare against zero is essentially a no-op."}, {"sha": "5507fb465613255a420e589936e15eb1ee7fdf7a", "filename": "gcc/config/m32c/jump.md", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16659fcf3307e1d41924bd4176053f2a2643fb38/gcc%2Fconfig%2Fm32c%2Fjump.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16659fcf3307e1d41924bd4176053f2a2643fb38/gcc%2Fconfig%2Fm32c%2Fjump.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fjump.md?ref=16659fcf3307e1d41924bd4176053f2a2643fb38", "patch": "@@ -29,13 +29,15 @@\n ;  \"jmpi.a\\t%0\"\n   ; no 16 bit jmpi in r8c\n   \"push.b #0 | push.w\\t%0 | rts\"\n+  [(set_attr \"flags\" \"x\")]\n   )\n \n (define_insn \"indirect_jump_24\"\n   [(set (pc)\n        (match_operand:PSI 0 \"register_operand\" \"Rpi\"))]\n   \"TARGET_A24\"\n   \"jmpi.a\\t%0\"\n+  [(set_attr \"flags\" \"n\")]\n   )\n \n (define_expand \"indirect_jump\"\n@@ -56,6 +58,7 @@\n \t(label_ref (match_operand 0 \"\" \"\")))]\n   \"\"\n   \"jmp.a\\t%l0\"\n+  [(set_attr \"flags\" \"n\")]\n )\n \n ; No 16 bit indirect calls on r8c/m16c.  */\n@@ -70,6 +73,7 @@ switch (which_alternative) {\n   case 1: return TARGET_A16 ? \\\"push.w %a0 | jsr.a\\tm32c_jsri16\\\" : \\\"jsri.a\\t%a0\\\";\n   case 2: return \\\"jsri.a\\t%a0\\\";\n }\"\n+  [(set_attr \"flags\" \"x\")]\n   )\n \n (define_insn \"call_value\"\n@@ -84,4 +88,5 @@ switch (which_alternative) {\n   case 1: return TARGET_A16 ? \\\"push.w %a1 | jsr.a\\tm32c_jsri16\\\" : \\\"jsri.a\\t%a1\\\";\n   case 2: return \\\"jsri.a\\t%a1\\\";\n }\"\n+  [(set_attr \"flags\" \"x,x,x\")]\n   )"}, {"sha": "a7bcd334393803a6e9177bade755177a19313d74", "filename": "gcc/config/m32c/m32c-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16659fcf3307e1d41924bd4176053f2a2643fb38/gcc%2Fconfig%2Fm32c%2Fm32c-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16659fcf3307e1d41924bd4176053f2a2643fb38/gcc%2Fconfig%2Fm32c%2Fm32c-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fm32c-protos.h?ref=16659fcf3307e1d41924bd4176053f2a2643fb38", "patch": "@@ -84,6 +84,7 @@ int  m32c_memory_move_cost (MM, int, int);\n int  m32c_mode_dependent_address (rtx);\n int  m32c_modes_tieable_p (MM, MM);\n bool m32c_mov_ok (rtx *, MM);\n+char * m32c_output_compare (rtx, rtx *);\n int  m32c_preferred_output_reload_class (rtx, int);\n int  m32c_preferred_reload_class (rtx, int);\n int  m32c_prepare_move (rtx *, MM);"}, {"sha": "3625640c4e4a1fe19e8a5de730bb91e4aef8679d", "filename": "gcc/config/m32c/m32c.c", "status": "modified", "additions": 244, "deletions": 7, "changes": 251, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16659fcf3307e1d41924bd4176053f2a2643fb38/gcc%2Fconfig%2Fm32c%2Fm32c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16659fcf3307e1d41924bd4176053f2a2643fb38/gcc%2Fconfig%2Fm32c%2Fm32c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fm32c.c?ref=16659fcf3307e1d41924bd4176053f2a2643fb38", "patch": "@@ -3291,9 +3291,8 @@ m32c_prepare_shift (rtx * operands, int scale, int shift_code)\n   else\n     /* We'll only use it for the shift, no point emitting a move.  */\n     temp = operands[2];\n-    \n \n-  if (TARGET_A16 && mode == SImode)\n+  if (TARGET_A16 && GET_MODE_SIZE (mode) == 4)\n     {\n       /* The m16c has a limit of -16..16 for SI shifts, even when the\n \t shift count is in a register.  Since there are so many targets\n@@ -3318,6 +3317,8 @@ m32c_prepare_shift (rtx * operands, int scale, int shift_code)\n       rtx count;\n       rtx label, lref, insn;\n \n+      emit_move_insn (operands[0], operands[1]);\n+\n       count = temp;\n       label = gen_label_rtx ();\n       lref = gen_rtx_LABEL_REF (VOIDmode, label);\n@@ -3328,8 +3329,8 @@ m32c_prepare_shift (rtx * operands, int scale, int shift_code)\n \t  /* This is a left shift.  We only need check positive counts.  */\n \t  emit_jump_insn (gen_cbranchqi4 (gen_rtx_LE (VOIDmode, 0, 0),\n \t\t\t\t\t  count, GEN_INT (16), label));\n-\t  emit_insn (func (operands[1], operands[1], GEN_INT (8)));\n-\t  emit_insn (func (operands[1], operands[1], GEN_INT (8)));\n+\t  emit_insn (func (operands[0], operands[0], GEN_INT (8)));\n+\t  emit_insn (func (operands[0], operands[0], GEN_INT (8)));\n \t  insn = emit_insn (gen_addqi3 (count, count, GEN_INT (-16)));\n \t  emit_label_after (label, insn);\n \t}\n@@ -3338,12 +3339,14 @@ m32c_prepare_shift (rtx * operands, int scale, int shift_code)\n \t  /* This is a right shift.  We only need check negative counts.  */\n \t  emit_jump_insn (gen_cbranchqi4 (gen_rtx_GE (VOIDmode, 0, 0),\n \t\t\t\t\t  count, GEN_INT (-16), label));\n-\t  emit_insn (func (operands[1], operands[1], GEN_INT (-8)));\n-\t  emit_insn (func (operands[1], operands[1], GEN_INT (-8)));\n+\t  emit_insn (func (operands[0], operands[0], GEN_INT (-8)));\n+\t  emit_insn (func (operands[0], operands[0], GEN_INT (-8)));\n \t  insn = emit_insn (gen_addqi3 (count, count, GEN_INT (16)));\n \t  emit_label_after (label, insn);\n \t}\n-\n+      operands[1] = operands[0];\n+      emit_insn (func (operands[0], operands[0], count));\n+      return 1;\n     }\n \n   operands[2] = temp;\n@@ -3459,6 +3462,7 @@ m32c_expand_insv (rtx *operands)\n      storing a zero, we want an AND mask, so invert it.  */\n   if (INTVAL (operands[3]) == 0)\n     {\n+      /* Storing a zero, use an AND mask */\n       if (GET_MODE (op0) == HImode)\n \tmask ^= 0xffff;\n       else\n@@ -3691,6 +3695,239 @@ m32c_emit_eh_epilogue (rtx ret_addr)\n   emit_barrier ();\n }\n \n+/* Indicate which flags must be properly set for a given conditional.  */\n+static int\n+flags_needed_for_conditional (rtx cond)\n+{\n+  switch (GET_CODE (cond))\n+    {\n+    case LE:\n+    case GT:\n+      return FLAGS_OSZ;\n+    case LEU:\n+    case GTU:\n+      return FLAGS_ZC;\n+    case LT:\n+    case GE:\n+      return FLAGS_OS;\n+    case LTU:\n+    case GEU:\n+      return FLAGS_C;\n+    case EQ:\n+    case NE:\n+      return FLAGS_Z;\n+    default:\n+      return FLAGS_N;\n+    }\n+}\n+\n+#define DEBUG_CMP 0\n+\n+/* Returns true if a compare insn is redundant because it would only\n+   set flags that are already set correctly.  */\n+static bool\n+m32c_compare_redundant (rtx cmp, rtx *operands)\n+{\n+  int flags_needed;\n+  int pflags;\n+  rtx prev, pp, next;\n+  rtx op0, op1, op2;\n+#if DEBUG_CMP\n+  int prev_icode, i;\n+#endif\n+\n+  op0 = operands[0];\n+  op1 = operands[1];\n+  op2 = operands[2];\n+\n+#if DEBUG_CMP\n+  fprintf(stderr, \"\\n\\033[32mm32c_compare_redundant\\033[0m\\n\");\n+  debug_rtx(cmp);\n+  for (i=0; i<2; i++)\n+    {\n+      fprintf(stderr, \"operands[%d] = \", i);\n+      debug_rtx(operands[i]);\n+    }\n+#endif\n+\n+  next = next_nonnote_insn (cmp);\n+  if (!next || !INSN_P (next))\n+    {\n+#if DEBUG_CMP\n+      fprintf(stderr, \"compare not followed by insn\\n\");\n+      debug_rtx(next);\n+#endif\n+      return false;\n+    }\n+  if (GET_CODE (PATTERN (next)) == SET\n+      && GET_CODE (XEXP ( PATTERN (next), 1)) == IF_THEN_ELSE)\n+    {\n+      next = XEXP (XEXP (PATTERN (next), 1), 0);\n+    }\n+  else if (GET_CODE (PATTERN (next)) == SET)\n+    {\n+      /* If this is a conditional, flags_needed will be something\n+\t other than FLAGS_N, which we test below.  */\n+      next = XEXP (PATTERN (next), 1);\n+    }\n+  else\n+    {\n+#if DEBUG_CMP\n+      fprintf(stderr, \"compare not followed by conditional\\n\");\n+      debug_rtx(next);\n+#endif\n+      return false;\n+    }\n+#if DEBUG_CMP\n+  fprintf(stderr, \"conditional is: \");\n+  debug_rtx(next);\n+#endif\n+\n+  flags_needed = flags_needed_for_conditional (next);\n+  if (flags_needed == FLAGS_N)\n+    {\n+#if DEBUG_CMP\n+      fprintf(stderr, \"compare not followed by conditional\\n\");\n+      debug_rtx(next);\n+#endif\n+      return false;\n+    }\n+\n+  /* Compare doesn't set overflow and carry the same way that\n+     arithmetic instructions do, so we can't replace those.  */\n+  if (flags_needed & FLAGS_OC)\n+    return false;\n+\n+  prev = cmp;\n+  do {\n+    prev = prev_nonnote_insn (prev);\n+    if (!prev)\n+      {\n+#if DEBUG_CMP\n+\tfprintf(stderr, \"No previous insn.\\n\");\n+#endif\n+\treturn false;\n+      }\n+    if (!INSN_P (prev))\n+      {\n+#if DEBUG_CMP\n+\tfprintf(stderr, \"Previous insn is a non-insn.\\n\");\n+#endif\n+\treturn false;\n+      }\n+    pp = PATTERN (prev);\n+    if (GET_CODE (pp) != SET)\n+      {\n+#if DEBUG_CMP\n+\tfprintf(stderr, \"Previous insn is not a SET.\\n\");\n+#endif\n+\treturn false;\n+      }\n+    pflags = get_attr_flags (prev);\n+\n+    /* Looking up attributes of previous insns corrupted the recog\n+       tables.  */\n+    INSN_UID (cmp) = -1;\n+    recog (PATTERN (cmp), cmp, 0);\n+\n+    if (pflags == FLAGS_N\n+\t&& reg_mentioned_p (op0, pp))\n+      {\n+#if DEBUG_CMP\n+\tfprintf(stderr, \"intermediate non-flags insn uses op:\\n\");\n+\tdebug_rtx(prev);\n+#endif\n+\treturn false;\n+      }\n+  } while (pflags == FLAGS_N);\n+#if DEBUG_CMP\n+  fprintf(stderr, \"previous flag-setting insn:\\n\");\n+  debug_rtx(prev);\n+  debug_rtx(pp);\n+#endif\n+\n+  if (GET_CODE (pp) == SET\n+      && GET_CODE (XEXP (pp, 0)) == REG\n+      && REGNO (XEXP (pp, 0)) == FLG_REGNO\n+      && GET_CODE (XEXP (pp, 1)) == COMPARE)\n+    {\n+      /* Adjacent cbranches must have the same operands to be\n+\t redundant.  */\n+      rtx pop0 = XEXP (XEXP (pp, 1), 0);\n+      rtx pop1 = XEXP (XEXP (pp, 1), 1);\n+#if DEBUG_CMP\n+      fprintf(stderr, \"adjacent cbranches\\n\");\n+      debug_rtx(pop0);\n+      debug_rtx(pop1);\n+#endif\n+      if (rtx_equal_p (op0, pop0)\n+\t  && rtx_equal_p (op1, pop1))\n+\treturn true;\n+#if DEBUG_CMP\n+      fprintf(stderr, \"prev cmp not same\\n\");\n+#endif\n+      return false;\n+    }\n+\n+  /* Else the previous insn must be a SET, with either the source or\n+     dest equal to operands[0], and operands[1] must be zero.  */\n+\n+  if (!rtx_equal_p (op1, const0_rtx))\n+    {\n+#if DEBUG_CMP\n+      fprintf(stderr, \"operands[1] not const0_rtx\\n\");\n+#endif\n+      return false;\n+    }\n+  if (GET_CODE (pp) != SET)\n+    {\n+#if DEBUG_CMP\n+      fprintf (stderr, \"pp not set\\n\");\n+#endif\n+      return false;\n+    }\n+  if (!rtx_equal_p (op0, SET_SRC (pp))\n+      && !rtx_equal_p (op0, SET_DEST (pp)))\n+    {\n+#if DEBUG_CMP\n+      fprintf(stderr, \"operands[0] not found in set\\n\");\n+#endif\n+      return false;\n+    }\n+\n+#if DEBUG_CMP\n+  fprintf(stderr, \"cmp flags %x prev flags %x\\n\", flags_needed, pflags);\n+#endif\n+  if ((pflags & flags_needed) == flags_needed)\n+    return true;\n+\n+  return false;\n+}\n+\n+/* Return the pattern for a compare.  This will be commented out if\n+   the compare is redundant, else a normal pattern is returned.  Thus,\n+   the assembler output says where the compare would have been.  */\n+char *\n+m32c_output_compare (rtx insn, rtx *operands)\n+{\n+  static char template[] = \";cmp.b\\t%1,%0\";\n+  /*                             ^ 5  */\n+\n+  template[5] = \" bwll\"[GET_MODE_SIZE(GET_MODE(operands[0]))];\n+  if (m32c_compare_redundant (insn, operands))\n+    {\n+#if DEBUG_CMP\n+      fprintf(stderr, \"cbranch: cmp not needed\\n\");\n+#endif\n+      return template;\n+    }\n+\n+#if DEBUG_CMP\n+  fprintf(stderr, \"cbranch: cmp needed: `%s'\\n\", template);\n+#endif\n+  return template + 1;\n+}\n+\n /* The Global `targetm' Variable. */\n \n struct gcc_target targetm = TARGET_INITIALIZER;"}, {"sha": "cffa5ba961bfba50df5eb38de6d52432fdc66a25", "filename": "gcc/config/m32c/m32c.md", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16659fcf3307e1d41924bd4176053f2a2643fb38/gcc%2Fconfig%2Fm32c%2Fm32c.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16659fcf3307e1d41924bd4176053f2a2643fb38/gcc%2Fconfig%2Fm32c%2Fm32c.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fm32c.md?ref=16659fcf3307e1d41924bd4176053f2a2643fb38", "patch": "@@ -70,9 +70,13 @@\n (define_insn \"nop\"\n   [(const_int 0)]\n   \"\"\n-  \"nop\")\n+  \"nop\"\n+  [(set_attr \"flags\" \"n\")]\n+)\n \n (define_insn \"no_insn\"\n   [(const_int 1)]\n   \"\"\n-  \"\")\n+  \"\"\n+  [(set_attr \"flags\" \"n\")]\n+)"}, {"sha": "21d63dc701935be67095b541d24594b240a1b635", "filename": "gcc/config/m32c/minmax.md", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16659fcf3307e1d41924bd4176053f2a2643fb38/gcc%2Fconfig%2Fm32c%2Fminmax.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16659fcf3307e1d41924bd4176053f2a2643fb38/gcc%2Fconfig%2Fm32c%2Fminmax.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fminmax.md?ref=16659fcf3307e1d41924bd4176053f2a2643fb38", "patch": "@@ -28,6 +28,7 @@\n \t\t (match_operand:QI 2 \"mrai_operand\" \"iRhlSdRaa,?Rmm,iRhlSdRaa,?Rmm,iRhlSd,?Rmm\")))]\n   \"TARGET_A24\"\n   \"min.b\\t%2,%0\"\n+  [(set_attr \"flags\" \"n\")]\n   )\n \n (define_insn \"sminhi3\"\n@@ -36,6 +37,7 @@\n \t\t (match_operand:HI 2 \"mrai_operand\" \"iRhiSd,?Rmm,iRhiSd,?Rmm\")))]\n   \"TARGET_A24\"\n   \"min.w\\t%2,%0\"\n+  [(set_attr \"flags\" \"n\")]\n   )\n \n (define_insn \"smaxqi3\"\n@@ -44,6 +46,7 @@\n \t\t (match_operand:QI 2 \"mrai_operand\" \"iRhlSdRaa,?Rmm,iRhlSdRaa,?Rmm,iRhlSd,?Rmm\")))]\n   \"TARGET_A24\"\n   \"max.b\\t%2,%0\"\n+  [(set_attr \"flags\" \"n\")]\n   )\n \n (define_insn \"smaxhi3\"\n@@ -52,4 +55,5 @@\n \t\t (match_operand:HI 2 \"mrai_operand\" \"iRhiSd,?Rmm,iRhiSd,?Rmm\")))]\n   \"TARGET_A24\"\n   \"max.w\\t%2,%0\"\n+  [(set_attr \"flags\" \"n\")]\n   )"}, {"sha": "791ac5dcdbd54858fffd3c6aedbc9186094b40ff", "filename": "gcc/config/m32c/mov.md", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16659fcf3307e1d41924bd4176053f2a2643fb38/gcc%2Fconfig%2Fm32c%2Fmov.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16659fcf3307e1d41924bd4176053f2a2643fb38/gcc%2Fconfig%2Fm32c%2Fmov.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fmov.md?ref=16659fcf3307e1d41924bd4176053f2a2643fb38", "patch": "@@ -71,7 +71,7 @@\n    pop.w\\t%0\n    pushc\\t%1\n    popc\\t%0\"\n-  [(set_attr \"flags\" \"sz,sz,sz,*,*,*,*,*,*\")]\n+  [(set_attr \"flags\" \"sz,sz,sz,n,n,n,n,n,n\")]\n   )\n \n (define_expand \"movhi\"\n@@ -97,7 +97,7 @@\n    pushc\\t%1\n    popc\\t%0\n    #\"\n-  [(set_attr \"flags\" \"sz,sz,*,*,*,*,*,*\")]\n+  [(set_attr \"flags\" \"sz,sz,n,n,n,n,n,*\")]\n   )\n \n \n@@ -182,6 +182,7 @@\n \t(match_operand 0 \"a_operand\" \"Raa\"))]\n   \"\"\n   \"push.l\\t%0\"\n+  [(set_attr \"flags\" \"n\")]\n   )\n \n (define_insn \"movsi_24\"\n@@ -193,6 +194,7 @@\n    mov.l\\t%1,%0\n    #\n    push.l\\t%1\"\n+  [(set_attr \"flags\" \"sz,sz,*,n\")]\n   )\n \n (define_expand \"movdi\"\n@@ -220,6 +222,7 @@\n         (match_operand:QI 0 \"mrai_operand\" \"iRqiSd*Rmm\"))]\n   \"\"\n   \"push.b\\t%0\"\n+  [(set_attr \"flags\" \"n\")]\n   )\n \n (define_expand \"pushhi\"\n@@ -240,13 +243,15 @@\n   \"@\n    push.w\\t%0\n    pushc\\t%0\"\n+  [(set_attr \"flags\" \"n,n\")]\n   )\n \n (define_insn \"pushhi_24\"\n   [(set (mem:HI (pre_dec:PSI (reg:PSI SP_REGNO)))\n         (match_operand:HI 0 \"mrai_operand\" \"iRhiSd*Rmm\"))]\n   \"TARGET_A24\"\n   \"push.w\\t%0\"\n+  [(set_attr \"flags\" \"n\")]\n   )\n \n ;(define_insn \"pushpi\"\n@@ -263,6 +268,7 @@\n         (match_operand:SI 0 \"mrai_operand\" \"iRsiSd*Rmm\"))]\n   \"TARGET_A24\"\n   \"push.l\\t%0\"\n+  [(set_attr \"flags\" \"n\")]\n   )\n \n (define_expand \"pophi\"\n@@ -283,20 +289,23 @@\n   \"@\n    pop.w\\t%0\n    popc\\t%0\"\n+  [(set_attr \"flags\" \"n,n\")]\n   )\n \n (define_insn \"pophi_24\"\n   [(set (match_operand:HI 0 \"mra_operand\" \"=RhiSd*Rmm\")\n         (mem:HI (post_inc:PSI (reg:PSI SP_REGNO))))]\n   \"TARGET_A24\"\n   \"pop.w\\t%0\"\n+  [(set_attr \"flags\" \"n\")]\n   )\n \n (define_insn \"poppsi\"\n   [(set (match_operand:PSI 0 \"cr_operand\" \"=Rcl\")\n         (mem:PSI (post_inc:PSI (reg:PSI SP_REGNO))))]\n   \"TARGET_A24\"\n   \"popc\\t%0\"\n+  [(set_attr \"flags\" \"n\")]\n   )\n \n \n@@ -316,35 +325,39 @@\n   \"*\n    if (REGNO(operands[0]) == 0) return \\\"exts.w\\t%1\\\";\n    else return \\\"mov.w r1,r3 | sha.w #-8,r3 | sha.w #-7,r3\\\";\"\n-  [(set_attr \"flags\" \"sz\")]\n+  [(set_attr \"flags\" \"x\")]\n   )\n \n (define_insn \"extendpsisi2\"\n   [(set (match_operand:SI 0 \"mr_operand\" \"=R03Sd*Rmm\")\n \t(sign_extend:SI (match_operand:PSI 1 \"mr_operand\" \"0\")))]\n   \"\"\n   \"; expand psi %1 to si %0\"\n+  [(set_attr \"flags\" \"n\")]\n   )\n \n (define_insn \"zero_extendpsisi2\"\n   [(set (match_operand:SI 0 \"mr_operand\" \"=R03Sd*Rmm\")\n \t(zero_extend:SI (match_operand:PSI 1 \"mr_operand\" \"0\")))]\n   \"\"\n   \"; expand psi %1 to si %0\"\n+  [(set_attr \"flags\" \"n\")]\n   )\n \n (define_insn \"zero_extendhipsi2\"\n   [(set (match_operand:PSI 0 \"register_operand\" \"=Raa\")\n \t(truncate:PSI (zero_extend:SI (match_operand:HI 1 \"register_operand\" \"R03\"))))]\n   \"\"\n   \"mov.w\\t%1,%0\"\n+  [(set_attr \"flags\" \"sz\")]\n   )\n \n (define_insn \"zero_extendhisi2\"\n   [(set (match_operand:SI 0 \"m32c_nonimmediate_operand\" \"=RsiSd\")\n \t(zero_extend:SI (match_operand:HI 1 \"nonimmediate_operand\" \"0\")))]\n   \"\"\n   \"mov.w\\t#0,%H0\"\n+  [(set_attr \"flags\" \"x\")]\n   )\n \n (define_insn \"zero_extendqihi2\"\n@@ -354,6 +367,7 @@\n   \"@\n    mov.b\\t#0,%H0\n    and.w\\t#255,%0\"\n+  [(set_attr \"flags\" \"x,x\")]\n   )\n \n (define_insn \"truncsipsi2_16\"\n@@ -365,13 +379,15 @@\n    #\n    ldc\\t%1,%0\n    stc\\t%1,%0\"\n+  [(set_attr \"flags\" \"n,*,n,n\")]\n   )\n \n (define_insn \"trunchiqi2\"\n   [(set (match_operand:QI 0 \"m32c_nonimmediate_operand\" \"=RqiRmmSd\")\n \t(truncate:QI (match_operand:HI 1 \"mra_qi_operand\" \"0\")))]\n   \"\"\n   \"; no-op trunc hi %1 to qi %0\"\n+  [(set_attr \"flags\" \"n\")]\n   )\n \n (define_insn \"truncsipsi2_24\"\n@@ -383,6 +399,7 @@\n    mov.l\\t%1,%0\n    ldc\\t%1,%0\n    stc\\t%1,%0\"\n+  [(set_attr \"flags\" \"n,sz,n,n\")]\n   )\n \n (define_expand \"truncsipsi2\""}, {"sha": "a4bde6496ab5d835aa4fcbb3393682de1e404858", "filename": "gcc/config/m32c/muldiv.md", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16659fcf3307e1d41924bd4176053f2a2643fb38/gcc%2Fconfig%2Fm32c%2Fmuldiv.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16659fcf3307e1d41924bd4176053f2a2643fb38/gcc%2Fconfig%2Fm32c%2Fmuldiv.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fmuldiv.md?ref=16659fcf3307e1d41924bd4176053f2a2643fb38", "patch": "@@ -29,6 +29,7 @@\n                  (match_operand 2 \"immediate_operand\" \"i,i\")))]\n   \"\"\n   \"mul.b\\t%2,%1\"\n+  [(set_attr \"flags\" \"o\")]\n )\n \n ; Here is the pattern for registers and such.\n@@ -38,6 +39,7 @@\n                  (sign_extend:HI (match_operand:QI 2 \"mra_operand\" \"RqiSd,?Rmm,RqiSd,?Rmm,RhlSd,?Rmm\"))))]\n   \"\"\n   \"mul.b\\t%2,%1\"\n+  [(set_attr \"flags\" \"o\")]\n )\n \n ; Don't try to sign_extend a const_int.  Same for all other multiplies.\n@@ -56,6 +58,7 @@\n                  (match_operand 2 \"immediate_operand\" \"i,i\")))]\n   \"\"\n   \"mulu.b\\t%U2,%1\"\n+  [(set_attr \"flags\" \"o\")]\n )\n \n (define_insn \"umulqihi3_r\"\n@@ -64,6 +67,7 @@\n                  (zero_extend:HI (match_operand:QI 2 \"mra_operand\" \"RqiSd,?Rmm,RqiSd,?Rmm,RhlSd,?Rmm\"))))]\n   \"\"\n   \"mulu.b\\t%U2,%1\"\n+  [(set_attr \"flags\" \"o\")]\n )\n \n (define_expand \"umulqihi3\"\n@@ -81,6 +85,7 @@\n                  (match_operand 2 \"immediate_operand\" \"i,i\")))]\n   \"\"\n   \"mul.w\\t%2,%1\"\n+  [(set_attr \"flags\" \"o\")]\n )\n \n (define_insn \"mulhisi3_r\"\n@@ -89,6 +94,7 @@\n                  (sign_extend:SI (match_operand:HI 2 \"mra_operand\" \"RhiSd,?Rmm,RhiSd,?Rmm\"))))]\n   \"\"\n   \"mul.w\\t%2,%1\"\n+  [(set_attr \"flags\" \"o\")]\n )\n \n (define_expand \"mulhisi3\"\n@@ -106,6 +112,7 @@\n                  (match_operand 2 \"immediate_operand\" \"i,i\")))]\n   \"\"\n   \"mulu.w\\t%u2,%1\"\n+  [(set_attr \"flags\" \"o\")]\n )\n \n (define_insn \"umulhisi3_r\"\n@@ -114,6 +121,7 @@\n                  (zero_extend:SI (match_operand:HI 2 \"mra_operand\" \"RhiSd,?Rmm,RhiSd,?Rmm\"))))]\n   \"\"\n   \"mulu.w\\t%u2,%1\"\n+  [(set_attr \"flags\" \"o\")]\n )\n \n (define_expand \"umulhisi3\"\n@@ -175,6 +183,7 @@\n    ]\n   \"0\"\n   \"div.b\\t%2\"\n+  [(set_attr \"flags\" \"o\")]\n   )\n \n (define_expand \"udivmodqi4\"\n@@ -199,6 +208,7 @@\n    ]\n   \"0\"\n   \"divu.b\\t%2\"\n+  [(set_attr \"flags\" \"o\")]\n   )\n \n (define_expand \"divmodhi4\"\n@@ -223,6 +233,7 @@\n    ]\n   \"\"\n   \"div.w\\t%2\"\n+  [(set_attr \"flags\" \"o\")]\n   )\n \n (define_expand \"udivmodhi4\"\n@@ -247,4 +258,5 @@\n    ]\n   \"\"\n   \"divu.w\\t%2\"\n+  [(set_attr \"flags\" \"o\")]\n   )"}, {"sha": "98c40acc3ca19515f772821cb4c118de7a862737", "filename": "gcc/config/m32c/prologue.md", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16659fcf3307e1d41924bd4176053f2a2643fb38/gcc%2Fconfig%2Fm32c%2Fprologue.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16659fcf3307e1d41924bd4176053f2a2643fb38/gcc%2Fconfig%2Fm32c%2Fprologue.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fprologue.md?ref=16659fcf3307e1d41924bd4176053f2a2643fb38", "patch": "@@ -43,6 +43,7 @@\n    ]\n   \"TARGET_A16\"\n   \"enter\\t%0\"\n+  [(set_attr \"flags\" \"x\")]\n   )\n \n (define_insn \"prologue_enter_24\"\n@@ -56,13 +57,15 @@\n    ]\n   \"TARGET_A24\"\n   \"enter\\t%0\"\n+  [(set_attr \"flags\" \"x\")]\n   )\n \n ; Just a comment, for debugging the assembler output.\n (define_insn \"prologue_end\"\n   [(unspec_volatile [(const_int 0)] UNS_PROLOGUE_END)]\n   \"\"\n   \"; end of prologue\"\n+  [(set_attr \"flags\" \"n\")]\n   )\n \n \n@@ -86,6 +89,7 @@\n \t\t\t  ] UNS_EH_EPILOGUE))]\n   \"\"\n   \"jmp.a\\t__m32c_eh_return\"\n+  [(set_attr \"flags\" \"x\")]\n   )\n \n (define_insn \"epilogue_exitd\"\n@@ -100,6 +104,7 @@\n    ]\n   \"\"\n   \"exitd\"\n+  [(set_attr \"flags\" \"x\")]\n   )\n \n (define_insn \"epilogue_reit\"\n@@ -110,19 +115,22 @@\n    ]\n   \"\"\n   \"reit\"\n+  [(set_attr \"flags\" \"x\")]\n   )\n \n (define_insn \"epilogue_rts\"\n   [(return)\n    ]\n   \"\"\n   \"rts\"\n+  [(set_attr \"flags\" \"x\")]\n   )\n \n (define_insn \"epilogue_start\"\n   [(unspec_volatile [(const_int 0)] UNS_EPILOGUE_START)]\n   \"\"\n   \"; start of epilogue\"\n+  [(set_attr \"flags\" \"n\")]\n   )\n \n \n@@ -131,9 +139,13 @@\n (define_insn \"pushm\"\n   [(unspec [(match_operand 0 \"const_int_operand\" \"i\")] UNS_PUSHM)]\n   \"\"\n-  \"pushm\\t%p0\")\n+  \"pushm\\t%p0\"\n+  [(set_attr \"flags\" \"n\")]\n+  )\n \n (define_insn \"popm\"\n   [(unspec [(match_operand 0 \"const_int_operand\" \"i\")] UNS_POPM)]\n   \"\"\n-  \"popm\\t%p0\")\n+  \"popm\\t%p0\"\n+  [(set_attr \"flags\" \"n\")]\n+  )"}, {"sha": "6679f38ffe715a079fecde857c6a5ee7fd310626", "filename": "gcc/config/m32c/shift.md", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16659fcf3307e1d41924bd4176053f2a2643fb38/gcc%2Fconfig%2Fm32c%2Fshift.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16659fcf3307e1d41924bd4176053f2a2643fb38/gcc%2Fconfig%2Fm32c%2Fshift.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fshift.md?ref=16659fcf3307e1d41924bd4176053f2a2643fb38", "patch": "@@ -39,6 +39,7 @@\n   \"@\n    sha.b\\t%2,%0\n    mov.b\\t%2,r1h\\n\\tsha.b\\tr1h,%0\"\n+  [(set_attr \"flags\" \"oszc,oszc\")]\n   )\n \n (define_insn \"ashrqi3_i\"\n@@ -50,6 +51,7 @@\n   \"@\n    sha.b\\t%2,%0\n    mov.b\\t%2,r1h\\n\\tsha.b\\tr1h,%0\"\n+  [(set_attr \"flags\" \"oszc,oszc\")]\n   )\n \n (define_insn \"lshrqi3_i\"\n@@ -61,6 +63,7 @@\n   \"@\n    shl.b\\t%2,%0\n    mov.b\\t%2,r1h\\n\\tshl.b\\tr1h,%0\"\n+  [(set_attr \"flags\" \"szc,szc\")]\n   )\n \n \n@@ -105,6 +108,7 @@\n   \"@\n    sha.w\\t%2,%0\n    mov.b\\t%2,r1h\\n\\tsha.w\\tr1h,%0\"\n+  [(set_attr \"flags\" \"oszc,oszc\")]\n   )\n \n (define_insn \"ashrhi3_i\"\n@@ -116,6 +120,7 @@\n   \"@\n    sha.w\\t%2,%0\n    mov.b\\t%2,r1h\\n\\tsha.w\\tr1h,%0\"\n+  [(set_attr \"flags\" \"oszc,oszc\")]\n   )\n \n (define_insn \"lshrhi3_i\"\n@@ -127,6 +132,7 @@\n   \"@\n    shl.w\\t%2,%0\n    mov.b\\t%2,r1h\\n\\tshl.w\\tr1h,%0\"\n+  [(set_attr \"flags\" \"szc,szc\")]\n   )\n \n \n@@ -175,6 +181,7 @@\n   \"@\n    sha.l\\t%2,%0\n    mov.b\\t%2,r1h\\n\\tsha.l\\tr1h,%0\"\n+  [(set_attr \"flags\" \"oszc,oszc\")]\n   )\n \n (define_insn \"ashrpsi3_i\"\n@@ -186,6 +193,7 @@\n   \"@\n    sha.l\\t%2,%0\n    mov.b\\t%2,r1h\\n\\tsha.l\\tr1h,%0\"\n+  [(set_attr \"flags\" \"oszc,oszc\")]\n   )\n \n (define_insn \"lshrpsi3_i\"\n@@ -197,6 +205,7 @@\n   \"@\n    shl.l\\t%2,%0\n    mov.b\\t%2,r1h\\n\\tshl.l\\tr1h,%0\"\n+  [(set_attr \"flags\" \"szc,szc\")]\n   )\n \n \n@@ -248,7 +257,7 @@\n   \"@\n    sha.l\\t%2,%0\n    mov.b\\t%2,r1h\\n\\tsha.l\\tr1h,%0\"\n-  [(set_attr \"flags\" \"sz,sz\")]\n+  [(set_attr \"flags\" \"oszc,oszc\")]\n   )\n \n (define_insn \"ashrsi3_16\"\n@@ -260,6 +269,7 @@\n   \"@\n    sha.l\\t%2,%0\n    mov.b\\t%2,r1h\\n\\tsha.l\\tr1h,%0\"\n+  [(set_attr \"flags\" \"oszc,oszc\")]\n   )\n \n (define_insn \"lshrsi3_16\"\n@@ -271,6 +281,7 @@\n   \"@\n    shl.l\\t%2,%0\n    mov.b\\t%2,r1h\\n\\tshl.l\\tr1h,%0\"\n+  [(set_attr \"flags\" \"szc,szc\")]\n   )\n \n "}]}