{"sha": "6f86467975d959c1da841dc6f2df8cc90b7da489", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmY4NjQ2Nzk3NWQ5NTljMWRhODQxZGM2ZjJkZjhjYzkwYjdkYTQ4OQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2015-06-30T13:35:36Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2015-06-30T13:35:36Z"}, "message": "* include/bits/stl_pair.h: Replace class keyword with typename.\n\nFrom-SVN: r225190", "tree": {"sha": "7353ae7122a9eef015bfd555142c3efa1322db6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7353ae7122a9eef015bfd555142c3efa1322db6b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6f86467975d959c1da841dc6f2df8cc90b7da489", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f86467975d959c1da841dc6f2df8cc90b7da489", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f86467975d959c1da841dc6f2df8cc90b7da489", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f86467975d959c1da841dc6f2df8cc90b7da489/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf7818bfb0c70e626f8b71501ada3263f306a476", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf7818bfb0c70e626f8b71501ada3263f306a476", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf7818bfb0c70e626f8b71501ada3263f306a476"}], "stats": {"total": 50, "additions": 27, "deletions": 23}, "files": [{"sha": "e2d1f51f374401cdb94296d8e81ad825c5cd4789", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f86467975d959c1da841dc6f2df8cc90b7da489/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f86467975d959c1da841dc6f2df8cc90b7da489/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=6f86467975d959c1da841dc6f2df8cc90b7da489", "patch": "@@ -1,3 +1,7 @@\n+2015-06-30  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/stl_pair.h: Replace class keyword with typename.\n+\n 2015-06-30  Ville Voutilainen  <ville.voutilainen@gmail.com>\n \n \tImplement N4387, \"Improving pair and tuple\", and LWG 2367."}, {"sha": "a5a7898f2b75de031c8d1a3f04da2e39da8935d8", "filename": "libstdc++-v3/include/bits/stl_pair.h", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f86467975d959c1da841dc6f2df8cc90b7da489/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f86467975d959c1da841dc6f2df8cc90b7da489/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h?ref=6f86467975d959c1da841dc6f2df8cc90b7da489", "patch": "@@ -124,7 +124,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @tparam _T1  Type of first object.\n    *  @tparam _T2  Type of second object.\n    */\n-  template<class _T1, class _T2>\n+  template<typename _T1, typename _T2>\n     struct pair\n     {\n       typedef _T1 first_type;    /// @c first_type is the first bound type\n@@ -170,18 +170,18 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       /** There is also a templated copy ctor for the @c pair class itself.  */\n #if __cplusplus < 201103L\n-      template<class _U1, class _U2>\n+      template<typename _U1, typename _U2>\n \tpair(const pair<_U1, _U2>& __p)\n \t: first(__p.first), second(__p.second) { }\n #else\n-      template<class _U1, class _U2, typename\n+      template<typename _U1, typename _U2, typename\n \t       enable_if<_ConstructiblePair<_T1, _T2, _U1, _U2>()\n                          && _ImplicitlyConvertiblePair<_T1, _T2, _U1, _U2>(),\n                          bool>::type=true>\n         constexpr pair(const pair<_U1, _U2>& __p)\n         : first(__p.first), second(__p.second) { }\n \n-      template<class _U1, class _U2, typename\n+      template<typename _U1, typename _U2, typename\n                enable_if<_ConstructiblePair<_T1, _T2, _U1, _U2>()\n                          && !_ImplicitlyConvertiblePair<_T1, _T2, _U1, _U2>(),\n                          bool>::type=false>\n@@ -192,7 +192,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       constexpr pair(pair&&) = default;\n \n       // DR 811.\n-      template<class _U1, typename\n+      template<typename _U1, typename\n                enable_if<_ConstructiblePair<_T2, _T2, _T2, _T2>()\n                          && _MoveConstructiblePair<_T1, _T2, _U1, _T2>()\n                          && _ImplicitlyConvertiblePair<_T2, _T2, _T2, _T2>()\n@@ -202,7 +202,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        constexpr pair(_U1&& __x, const _T2& __y)\n        : first(std::forward<_U1>(__x)), second(__y) { }\n \n-      template<class _U1, typename\n+      template<typename _U1, typename\n                enable_if<_ConstructiblePair<_T2, _T2, _T2, _T2>()\n                          && _MoveConstructiblePair<_T1, _T2, _U1, _T2>()\n                          && (!_ImplicitlyConvertiblePair<_T2, _T2, _T2, _T2>()\n@@ -212,7 +212,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        explicit constexpr pair(_U1&& __x, const _T2& __y)\n        : first(std::forward<_U1>(__x)), second(__y) { }\n \n-      template<class _U2, typename\n+      template<typename _U2, typename\n                enable_if<_ConstructiblePair<_T1, _T1, _T1, _T1>()\n                          && _MoveConstructiblePair<_T1, _T2, _T1, _U2>()\n                          && _ImplicitlyConvertiblePair<_T1, _T1, _T1, _T1>()\n@@ -222,7 +222,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        constexpr pair(const _T1& __x, _U2&& __y)\n        : first(__x), second(std::forward<_U2>(__y)) { }\n \n-      template<class _U2, typename\n+      template<typename _U2, typename\n                enable_if<_ConstructiblePair<_T1, _T1, _T1, _T1>()\n                          && _MoveConstructiblePair<_T1, _T2, _T1, _U2>()\n                          && (!_ImplicitlyConvertiblePair<_T1, _T1, _T1, _T1>()\n@@ -232,15 +232,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        explicit pair(const _T1& __x, _U2&& __y)\n        : first(__x), second(std::forward<_U2>(__y)) { }\n \n-      template<class _U1, class _U2, typename\n+      template<typename _U1, typename _U2, typename\n \t       enable_if<_MoveConstructiblePair<_T1, _T2, _U1, _U2>()\n                          && _ImplicitlyMoveConvertiblePair<_T1, _T2,\n \t\t\t\t\t\t\t   _U1, _U2>(),\n                          bool>::type=true>\n \tconstexpr pair(_U1&& __x, _U2&& __y)\n \t: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }\n \n-      template<class _U1, class _U2, typename\n+      template<typename _U1, typename _U2, typename\n \t       enable_if<_MoveConstructiblePair<_T1, _T2, _U1, _U2>()\n                          && !_ImplicitlyMoveConvertiblePair<_T1, _T2,\n \t\t\t\t\t\t\t    _U1, _U2>(),\n@@ -249,7 +249,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }\n \n \n-      template<class _U1, class _U2, typename\n+      template<typename _U1, typename _U2, typename\n \t       enable_if<_MoveConstructiblePair<_T1, _T2, _U1, _U2>()\n                          && _ImplicitlyMoveConvertiblePair<_T1, _T2,\n \t\t\t\t\t\t\t   _U1, _U2>(),\n@@ -258,7 +258,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t: first(std::forward<_U1>(__p.first)),\n \t  second(std::forward<_U2>(__p.second)) { }\n \n-      template<class _U1, class _U2, typename\n+      template<typename _U1, typename _U2, typename\n \t       enable_if<_MoveConstructiblePair<_T1, _T2, _U1, _U2>()\n                          && !_ImplicitlyMoveConvertiblePair<_T1, _T2,\n \t\t\t\t\t\t\t   _U1, _U2>(),\n@@ -288,7 +288,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn *this;\n       }\n \n-      template<class _U1, class _U2>\n+      template<typename _U1, typename _U2>\n \tpair&\n \toperator=(const pair<_U1, _U2>& __p)\n \t{\n@@ -297,7 +297,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  return *this;\n \t}\n \n-      template<class _U1, class _U2>\n+      template<typename _U1, typename _U2>\n \tpair&\n \toperator=(pair<_U1, _U2>&& __p)\n \t{\n@@ -325,38 +325,38 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     };\n \n   /// Two pairs of the same type are equal iff their members are equal.\n-  template<class _T1, class _T2>\n+  template<typename _T1, typename _T2>\n     inline _GLIBCXX_CONSTEXPR bool\n     operator==(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)\n     { return __x.first == __y.first && __x.second == __y.second; }\n \n   /// <http://gcc.gnu.org/onlinedocs/libstdc++/manual/utilities.html>\n-  template<class _T1, class _T2>\n+  template<typename _T1, typename _T2>\n     inline _GLIBCXX_CONSTEXPR bool\n     operator<(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)\n     { return __x.first < __y.first\n \t     || (!(__y.first < __x.first) && __x.second < __y.second); }\n \n   /// Uses @c operator== to find the result.\n-  template<class _T1, class _T2>\n+  template<typename _T1, typename _T2>\n     inline _GLIBCXX_CONSTEXPR bool\n     operator!=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)\n     { return !(__x == __y); }\n \n   /// Uses @c operator< to find the result.\n-  template<class _T1, class _T2>\n+  template<typename _T1, typename _T2>\n     inline _GLIBCXX_CONSTEXPR bool\n     operator>(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)\n     { return __y < __x; }\n \n   /// Uses @c operator< to find the result.\n-  template<class _T1, class _T2>\n+  template<typename _T1, typename _T2>\n     inline _GLIBCXX_CONSTEXPR bool\n     operator<=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)\n     { return !(__y < __x); }\n \n   /// Uses @c operator< to find the result.\n-  template<class _T1, class _T2>\n+  template<typename _T1, typename _T2>\n     inline _GLIBCXX_CONSTEXPR bool\n     operator>=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)\n     { return !(__x < __y); }\n@@ -365,7 +365,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   /// See std::pair::swap().\n   // Note:  no std::swap overloads in C++03 mode, this has performance\n   //        implications, see, eg, libstdc++/38466.\n-  template<class _T1, class _T2>\n+  template<typename _T1, typename _T2>\n     inline void\n     swap(pair<_T1, _T2>& __x, pair<_T1, _T2>& __y)\n     noexcept(noexcept(__x.swap(__y)))\n@@ -386,7 +386,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // 181.  make_pair() unintended behavior\n #if __cplusplus >= 201103L\n   // NB: DR 706.\n-  template<class _T1, class _T2>\n+  template<typename _T1, typename _T2>\n     constexpr pair<typename __decay_and_strip<_T1>::__type,\n                    typename __decay_and_strip<_T2>::__type>\n     make_pair(_T1&& __x, _T2&& __y)\n@@ -397,7 +397,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return __pair_type(std::forward<_T1>(__x), std::forward<_T2>(__y));\n     }\n #else\n-  template<class _T1, class _T2>\n+  template<typename _T1, typename _T2>\n     inline pair<_T1, _T2>\n     make_pair(_T1 __x, _T2 __y)\n     { return pair<_T1, _T2>(__x, __y); }"}]}