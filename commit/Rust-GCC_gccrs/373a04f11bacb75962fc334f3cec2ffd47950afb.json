{"sha": "373a04f11bacb75962fc334f3cec2ffd47950afb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzczYTA0ZjExYmFjYjc1OTYyZmMzMzRmM2NlYzJmZmQ0Nzk1MGFmYg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2003-12-18T21:27:03Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2003-12-18T21:27:03Z"}, "message": "note that in-out operands should only be used with register constraints\n\nFrom-SVN: r74802", "tree": {"sha": "c4c1b61aec7a4a7c333ac6ee355fad68ade4b3f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c4c1b61aec7a4a7c333ac6ee355fad68ade4b3f7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/373a04f11bacb75962fc334f3cec2ffd47950afb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/373a04f11bacb75962fc334f3cec2ffd47950afb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/373a04f11bacb75962fc334f3cec2ffd47950afb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/373a04f11bacb75962fc334f3cec2ffd47950afb/comments", "author": null, "committer": null, "parents": [{"sha": "f37d2ca669c58f728b040337a9556c30d9e57f9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f37d2ca669c58f728b040337a9556c30d9e57f9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f37d2ca669c58f728b040337a9556c30d9e57f9a"}], "stats": {"total": 25, "additions": 13, "deletions": 12}, "files": [{"sha": "ac038554b9ab3eff262decb901bf2b08715d808c", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/373a04f11bacb75962fc334f3cec2ffd47950afb/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/373a04f11bacb75962fc334f3cec2ffd47950afb/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=373a04f11bacb75962fc334f3cec2ffd47950afb", "patch": "@@ -3913,18 +3913,19 @@ The ordinary output operands must be write-only; GCC will assume that\n the values in these operands before the instruction are dead and need\n not be generated.  Extended asm supports input-output or read-write\n operands.  Use the constraint character @samp{+} to indicate such an\n-operand and list it with the output operands.\n-\n-When the constraints for the read-write operand (or the operand in which\n-only some of the bits are to be changed) allows a register, you may, as\n-an alternative, logically split its function into two separate operands,\n-one input operand and one write-only output operand.  The connection\n-between them is expressed by constraints which say they need to be in\n-the same location when the instruction executes.  You can use the same C\n-expression for both operands, or different expressions.  For example,\n-here we write the (fictitious) @samp{combine} instruction with\n-@code{bar} as its read-only source operand and @code{foo} as its\n-read-write destination:\n+operand and list it with the output operands.  You should only use\n+read-write operands when the constraints for the operand (or the\n+operand in which only some of the bits are to be changed) allow a\n+register.\n+\n+You may, as an alternative, logically split its function into two\n+separate operands, one input operand and one write-only output\n+operand.  The connection between them is expressed by constraints\n+which say they need to be in the same location when the instruction\n+executes.  You can use the same C expression for both operands, or\n+different expressions.  For example, here we write the (fictitious)\n+@samp{combine} instruction with @code{bar} as its read-only source\n+operand and @code{foo} as its read-write destination:\n \n @example\n asm (\"combine %2,%0\" : \"=r\" (foo) : \"0\" (foo), \"g\" (bar));"}]}