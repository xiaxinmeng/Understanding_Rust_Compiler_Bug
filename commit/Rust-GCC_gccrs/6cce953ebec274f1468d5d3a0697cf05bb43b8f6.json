{"sha": "6cce953ebec274f1468d5d3a0697cf05bb43b8f6", "node_id": "C_kwDOANBUbNoAKDZjY2U5NTNlYmVjMjc0ZjE0NjhkNWQzYTA2OTdjZjA1YmI0M2I4ZjY", "commit": {"author": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2023-02-27T20:37:11Z"}, "committer": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2023-02-27T21:30:29Z"}, "message": "Fortran: fix corner case of IBITS intrinsic [PR108937]\n\ngcc/fortran/ChangeLog:\n\n\tPR fortran/108937\n\t* trans-intrinsic.cc (gfc_conv_intrinsic_ibits): Handle corner case\n\tLEN argument of IBITS equal to BITSIZE(I).\n\ngcc/testsuite/ChangeLog:\n\n\tPR fortran/108937\n\t* gfortran.dg/ibits_2.f90: New test.", "tree": {"sha": "0cb73689f4ede61e1c284024071ead1e17d0e6c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0cb73689f4ede61e1c284024071ead1e17d0e6c6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6cce953ebec274f1468d5d3a0697cf05bb43b8f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cce953ebec274f1468d5d3a0697cf05bb43b8f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6cce953ebec274f1468d5d3a0697cf05bb43b8f6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cce953ebec274f1468d5d3a0697cf05bb43b8f6/comments", "author": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "committer": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8020c9c42349f51f75239b9d35a2be41848a97bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8020c9c42349f51f75239b9d35a2be41848a97bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8020c9c42349f51f75239b9d35a2be41848a97bd"}], "stats": {"total": 42, "additions": 42, "deletions": 0}, "files": [{"sha": "3cce9c0166efcb8df2f2c83e0621684a3b5663c0", "filename": "gcc/fortran/trans-intrinsic.cc", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cce953ebec274f1468d5d3a0697cf05bb43b8f6/gcc%2Ffortran%2Ftrans-intrinsic.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cce953ebec274f1468d5d3a0697cf05bb43b8f6/gcc%2Ffortran%2Ftrans-intrinsic.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.cc?ref=6cce953ebec274f1468d5d3a0697cf05bb43b8f6", "patch": "@@ -6638,6 +6638,7 @@ gfc_conv_intrinsic_ibits (gfc_se * se, gfc_expr * expr)\n   tree type;\n   tree tmp;\n   tree mask;\n+  tree num_bits, cond;\n \n   gfc_conv_intrinsic_function_args (se, expr, args, 3);\n   type = TREE_TYPE (args[0]);\n@@ -6678,8 +6679,17 @@ gfc_conv_intrinsic_ibits (gfc_se * se, gfc_expr * expr)\n \t\t\t       \"in intrinsic IBITS\", tmp1, tmp2, nbits);\n     }\n \n+  /* The Fortran standard allows (shift width) LEN <= BIT_SIZE(I), whereas\n+     gcc requires a shift width < BIT_SIZE(I), so we have to catch this\n+     special case.  See also gfc_conv_intrinsic_ishft ().  */\n+  num_bits = build_int_cst (TREE_TYPE (args[2]), TYPE_PRECISION (type));\n+\n   mask = build_int_cst (type, -1);\n   mask = fold_build2_loc (input_location, LSHIFT_EXPR, type, mask, args[2]);\n+  cond = fold_build2_loc (input_location, GE_EXPR, logical_type_node, args[2],\n+\t\t\t  num_bits);\n+  mask = fold_build3_loc (input_location, COND_EXPR, type, cond,\n+\t\t\t  build_int_cst (type, 0), mask);\n   mask = fold_build1_loc (input_location, BIT_NOT_EXPR, type, mask);\n \n   tmp = fold_build2_loc (input_location, RSHIFT_EXPR, type, args[0], args[1]);"}, {"sha": "2af5542d764f9c69b54e96aa467f1b9b643b8d95", "filename": "gcc/testsuite/gfortran.dg/ibits_2.f90", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cce953ebec274f1468d5d3a0697cf05bb43b8f6/gcc%2Ftestsuite%2Fgfortran.dg%2Fibits_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cce953ebec274f1468d5d3a0697cf05bb43b8f6/gcc%2Ftestsuite%2Fgfortran.dg%2Fibits_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fibits_2.f90?ref=6cce953ebec274f1468d5d3a0697cf05bb43b8f6", "patch": "@@ -0,0 +1,32 @@\n+! { dg-do run }\n+! { dg-additional-options \"-fcheck=bits\" }\n+! PR fortran/108937 - Intrinsic IBITS(I,POS,LEN) fails when LEN equals\n+!                     to BIT_SIZE(I)\n+! Contributed by saitofuyuki@jamstec.go.jp\n+\n+program test_bits\n+  implicit none\n+  integer, parameter :: KT = kind (1)\n+  integer, parameter :: lbits = bit_size (0_KT)\n+  integer(kind=KT) :: x, y0, y1\n+  integer(kind=KT) :: p, l\n+\n+  x = -1\n+  p = 0\n+  do l = 0, lbits\n+     y0 = ibits  (x, p, l)\n+     y1 = ibits_1(x, p, l)\n+     if (y0 /= y1) then\n+        print *, l, y0, y1\n+        stop 1+l\n+     end if\n+  end do\n+contains\n+  elemental integer(kind=KT) function ibits_1(I, POS, LEN) result(n)\n+    !! IBITS(I, POS, LEN) = (I >> POS) & ~((~0) << LEN)\n+    implicit none\n+    integer(kind=KT),intent(in) :: I\n+    integer,         intent(in) :: POS, LEN\n+    n = IAND (ISHFT(I, - POS), NOT(ISHFT(-1_KT, LEN)))\n+  end function ibits_1\n+end program test_bits"}]}