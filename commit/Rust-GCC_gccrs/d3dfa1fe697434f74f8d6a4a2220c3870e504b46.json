{"sha": "d3dfa1fe697434f74f8d6a4a2220c3870e504b46", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDNkZmExZmU2OTc0MzRmNzRmOGQ2YTRhMjIyMGMzODcwZTUwNGI0Ng==", "commit": {"author": {"name": "Brooks Moses", "email": "brooks.moses@codesourcery.com", "date": "2007-01-19T23:21:34Z"}, "committer": {"name": "Brooks Moses", "email": "brooks@gcc.gnu.org", "date": "2007-01-19T23:21:34Z"}, "message": "intrinsic.texi: general whitespace cleanup.\n\n* intrinsic.texi: general whitespace cleanup.\n\t(menu): Added TIME8, removed UNMASK.\n\t(AINT): Clarified argument requirement.\n\t(ANINT): Clarified argument requirement.\n\t(CEILING): Clarified argument requirement.\n\t(CHAR): Clarified argument requirement.\n\t(CMPLX): Clarified argument requirement.\n\t(DCMPLX): Clarified argument requirement.\n\t(FGET): Line rewrapping.\n\t(FLOOR): Clarified argument requirement.\n\t(GMTIME): Added documentation.\n\t(IAND): Added cross-reference.\n\t(IBCLR): Added cross-reference.\n\t(IBSET): Added cross-reference.\n\t(IEOR): Added cross-reference.\n\t(INT): Collapsed examples, clarified argument requirement.\n\t(IOR): Added cross-references.\n\t(LEN_TRIM): Corrected result kind.\n\t(LINK): Added cross-reference.\n\t(LLT): Removed \"documentation pending\".\n\t(LOGICAL): Added documentation.\n\t(LSHIFT): Added documentation.\n\t(LTIME): Added documentation.\n\t(MATMUL): Added documentation.\n\t(MAX): Added documentation.\n\t(MAXLOC): Added documentation.\n\t(MAXVAL): Added documentation.\n\t(MERGE): Added documentation.\n\t(MIN): Added documentation.\n\t(MINLOC): Added documentation.\n\t(MINVAL): Added documentation.\n\t(MVBITS): Moved to correct place, added documentation.\n\t(NOT): Added documentation.\n\t(PERROR): Added documentation.\n\t(RAN): Moved to correct place, added documentation.\n\t(REAL): Clarified argument requirement.\n\t(RENAME): Added documentation.\n\t(RSHIFT): Clarified argument requirement.\n\t(SIGN): Corrected table specification.\n\t(SYMLNK): Added documentation.\n\t(SYSTEM): Added documentation.\n\t(TIME): Added documentation.\n\t(TIME8): Added section and documentation.\n\t(UNMASK): Removed erroneous section.\n\nFrom-SVN: r120980", "tree": {"sha": "793ffdcda2b8540a01206fa233f8e1382674da70", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/793ffdcda2b8540a01206fa233f8e1382674da70"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d3dfa1fe697434f74f8d6a4a2220c3870e504b46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3dfa1fe697434f74f8d6a4a2220c3870e504b46", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3dfa1fe697434f74f8d6a4a2220c3870e504b46", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3dfa1fe697434f74f8d6a4a2220c3870e504b46/comments", "author": null, "committer": null, "parents": [{"sha": "db02da79174dea480aa4217dbe7afd3d3b8364d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db02da79174dea480aa4217dbe7afd3d3b8364d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db02da79174dea480aa4217dbe7afd3d3b8364d1"}], "stats": {"total": 945, "additions": 689, "deletions": 256}, "files": [{"sha": "af49d0ce776777340d54c113cd724e92b8693858", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3dfa1fe697434f74f8d6a4a2220c3870e504b46/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3dfa1fe697434f74f8d6a4a2220c3870e504b46/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=d3dfa1fe697434f74f8d6a4a2220c3870e504b46", "patch": "@@ -1,3 +1,50 @@\n+2007-01-19  Brooks Moses  <brooks.moses@codesourcery.com>\n+\n+\t* intrinsic.texi: general whitespace cleanup.\n+\t(menu): Added TIME8, removed UNMASK.\n+\t(AINT): Clarified argument requirement.\n+\t(ANINT): Clarified argument requirement.\n+\t(CEILING): Clarified argument requirement.\n+\t(CHAR): Clarified argument requirement.\n+\t(CMPLX): Clarified argument requirement.\n+\t(DCMPLX): Clarified argument requirement.\n+\t(FGET): Line rewrapping.\n+\t(FLOOR): Clarified argument requirement.\n+\t(GMTIME): Added documentation.\n+\t(IAND): Added cross-reference.\n+\t(IBCLR): Added cross-reference.\n+\t(IBSET): Added cross-reference.\n+\t(IEOR): Added cross-reference.\n+\t(INT): Collapsed examples, clarified argument requirement.\n+\t(IOR): Added cross-references.\n+\t(LEN_TRIM): Corrected result kind.\n+\t(LINK): Added cross-reference.\n+\t(LLT): Removed \"documentation pending\".\n+\t(LOGICAL): Added documentation.\n+\t(LSHIFT): Added documentation.\n+\t(LTIME): Added documentation.\n+\t(MATMUL): Added documentation.\n+\t(MAX): Added documentation.\n+\t(MAXLOC): Added documentation.\n+\t(MAXVAL): Added documentation.\n+\t(MERGE): Added documentation.\n+\t(MIN): Added documentation.\n+\t(MINLOC): Added documentation.\n+\t(MINVAL): Added documentation.\n+\t(MVBITS): Moved to correct place, added documentation.\n+\t(NOT): Added documentation.\n+\t(PERROR): Added documentation.\n+\t(RAN): Moved to correct place, added documentation.\n+\t(REAL): Clarified argument requirement.\n+\t(RENAME): Added documentation.\n+\t(RSHIFT): Clarified argument requirement.\n+\t(SIGN): Corrected table specification.\n+\t(SYMLNK): Added documentation.\n+\t(SYSTEM): Added documentation.\n+\t(TIME): Added documentation.\n+\t(TIME8): Added section and documentation.\n+\t(UNMASK): Removed erroneous section.\n+\n 2007-01-18  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* trans-stmt.c (compute_overall_iter_number): Fix a typo."}, {"sha": "93e5112e4c0740a905179916f04401ff516470a3", "filename": "gcc/fortran/intrinsic.texi", "status": "modified", "additions": 642, "deletions": 256, "changes": 898, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3dfa1fe697434f74f8d6a4a2220c3870e504b46/gcc%2Ffortran%2Fintrinsic.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3dfa1fe697434f74f8d6a4a2220c3870e504b46/gcc%2Ffortran%2Fintrinsic.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.texi?ref=d3dfa1fe697434f74f8d6a4a2220c3870e504b46", "patch": "@@ -238,14 +238,14 @@ Some intrinsics have documentation yet to be completed as indicated by 'document\n * @code{TAN}:           TAN,       Tangent function\n * @code{TANH}:          TANH,      Hyperbolic tangent function\n * @code{TIME}:          TIME,      Time function\n+* @code{TIME8}:         TIME8,     Time function (64-bit)\n * @code{TINY}:          TINY,      Smallest positive number of a real kind\n * @code{TRANSFER}:      TRANSFER,  Transfer bit patterns\n * @code{TRANSPOSE}:     TRANSPOSE, Transpose an array of rank two\n * @code{TRIM}:          TRIM,      Function to remove trailing blank characters of a string\n * @code{UBOUND}:        UBOUND,    Upper dimension bounds of an array\n * @code{UMASK}:         UMASK,     Set the file creation mask\n * @code{UNLINK}:        UNLINK,    Remove a file from the file system\n-* @code{UNMASK}:        UNMASK,    (?)\n * @code{UNPACK}:        UNPACK,    Unpack an array of rank one into an array\n * @code{VERIFY}:        VERIFY,    Scan a string for the absence of a set of characters\n * @code{XOR}:           XOR,       Bitwise logical exclusive or\n@@ -735,8 +735,9 @@ Elemental function\n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n @item @var{X}    @tab The type of the argument shall be @code{REAL(*)}.\n-@item @var{KIND} @tab (Optional) @var{KIND} shall be a scalar integer\n-initialization expression.\n+@item @var{KIND} @tab (Optional) An @code{INTEGER(*)} initialization\n+                      expression indicating the kind parameter of\n+\t\t      the result.\n @end multitable\n \n @item @emph{Return value}:\n@@ -996,8 +997,9 @@ Elemental function\n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n @item @var{X}    @tab The type of the argument shall be @code{REAL(*)}.\n-@item @var{KIND} @tab (Optional) @var{KIND} shall be a scalar integer\n-initialization expression.\n+@item @var{KIND} @tab (Optional) An @code{INTEGER(*)} initialization\n+                      expression indicating the kind parameter of\n+\t\t      the result.\n @end multitable\n \n @item @emph{Return value}:\n@@ -1785,12 +1787,14 @@ F95 and later\n Elemental function\n \n @item @emph{Syntax}:\n-@code{I = CEILING(X[,KIND])}\n+@code{I = CEILING(X [, KIND])}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n @item @var{X} @tab The type shall be @code{REAL(*)}.\n-@item @var{KIND} @tab (Optional) scalar integer initialization expression.\n+@item @var{KIND} @tab (Optional) An @code{INTEGER(*)} initialization\n+                      expression indicating the kind parameter of\n+\t\t      the result.\n @end multitable\n \n @item @emph{Return value}:\n@@ -1820,7 +1824,7 @@ end program test_ceiling\n \n @table @asis\n @item @emph{Description}:\n-@code{CHAR(I,[KIND])} returns the character represented by the integer @var{I}.\n+@code{CHAR(I [, KIND])} returns the character represented by the integer @var{I}.\n \n @item @emph{Standard}:\n F77 and later\n@@ -1829,12 +1833,14 @@ F77 and later\n Elemental function\n \n @item @emph{Syntax}:\n-@code{C = CHAR(I[,KIND])}\n+@code{C = CHAR(I [, KIND])}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n @item @var{I} @tab The type shall be @code{INTEGER(*)}.\n-@item @var{KIND} @tab Optional scaler integer initialization expression.\n+@item @var{KIND} @tab (Optional) An @code{INTEGER(*)} initialization\n+                      expression indicating the kind parameter of\n+\t\t      the result.\n @end multitable\n \n @item @emph{Return value}:\n@@ -1976,7 +1982,7 @@ end program chmod_test\n \n @table @asis\n @item @emph{Description}:\n-@code{CMPLX(X[,Y[,KIND]])} returns a complex number where @var{X} is converted to\n+@code{CMPLX(X [, Y [, KIND]])} returns a complex number where @var{X} is converted to\n the real component.  If @var{Y} is present it is converted to the imaginary\n component.  If @var{Y} is not present then the imaginary component is set to\n 0.0.  If @var{X} is complex then @var{Y} must not be present.\n@@ -1988,16 +1994,18 @@ F77 and later\n Elemental function\n \n @item @emph{Syntax}:\n-@code{C = CMPLX(X[,Y[,KIND]])}\n+@code{C = CMPLX(X [, Y [, KIND]])}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n @item @var{X} @tab The type may be @code{INTEGER(*)}, @code{REAL(*)},\n                    or @code{COMPLEX(*)}.\n-@item @var{Y} @tab Optional, allowed if @var{X} is not\n-                   @code{COMPLEX(*)}.  May be @code{INTEGER(*)}\n-\t\t   or @code{REAL(*)}. \n-@item @var{KIND} @tab Optional scaler integer initialization expression.\n+@item @var{Y} @tab (Optional; only allowed if @var{X} is not\n+                   @code{COMPLEX(*)}.)  May be @code{INTEGER(*)}\n+\t\t   or @code{REAL(*)}.\n+@item @var{KIND} @tab (Optional) An @code{INTEGER(*)} initialization\n+                      expression indicating the kind parameter of\n+\t\t      the result.\n @end multitable\n \n @item @emph{Return value}:\n@@ -2415,8 +2423,14 @@ program test_ctime\n     print *, 'Program was started on ', date\n end program test_ctime\n @end smallexample\n+\n+@item @emph{See Also}:\n+@ref{GMTIME}, @ref{LTIME}, @ref{TIME}, @ref{TIME8}\n+\n @end table\n \n+\n+\n @node DATE_AND_TIME\n @section @code{DATE_AND_TIME} --- Date and time subroutine\n @cindex @code{DATE_AND_TIME} intrinsic\n@@ -2556,7 +2570,7 @@ Elemental function\n @multitable @columnfractions .15 .80\n @item @var{X} @tab The type may be @code{INTEGER(*)}, @code{REAL(*)},\n                    or @code{COMPLEX(*)}.\n-@item @var{Y} @tab Optional if @var{X} is not @code{COMPLEX(*)}. May be\n+@item @var{Y} @tab (Optional if @var{X} is not @code{COMPLEX(*)}.) May be\n                    @code{INTEGER(*)} or @code{REAL(*)}. \n @end multitable\n \n@@ -3454,8 +3468,9 @@ Non-elemental subroutine\n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n @item @var{C}      @tab The type shall be @code{CHARACTER}.\n-@item @var{STATUS} @tab (Optional) status flag of type @code{INTEGER}. Returns 0 on success,\n-                        -1 on end-of-file and a system specific positive error code otherwise.\n+@item @var{STATUS} @tab (Optional) status flag of type @code{INTEGER}.\n+                        Returns 0 on success, -1 on end-of-file, and a\n+                        system specific positive error code otherwise.\n @end multitable\n \n @item @emph{Example}:\n@@ -3552,12 +3567,14 @@ F95 and later\n Elemental function\n \n @item @emph{Syntax}:\n-@code{I = FLOOR(X[,KIND])}\n+@code{I = FLOOR(X [, KIND])}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n @item @var{X} @tab The type shall be @code{REAL(*)}.\n-@item @var{KIND} @tab Optional scaler integer initialization expression.\n+@item @var{KIND} @tab (Optional) An @code{INTEGER(*)} initialization\n+                      expression indicating the kind parameter of\n+\t\t      the result.\n @end multitable\n \n @item @emph{Return value}:\n@@ -4392,10 +4409,12 @@ See @code{GETPID} for an example.\n @cindex @code{GMTIME} intrinsic\n @cindex time, conversion function\n \n-Not yet implemented in GNU Fortran.\n-\n @table @asis\n @item @emph{Description}:\n+Given a system time value @var{STIME} (as provided by the @code{TIME8()}\n+intrinsic), fills @var{TARRAY} with values extracted from it appropriate\n+to the UTC time zone (Universal Coordinated Time, also known in some\n+countries as GMT, Greenwich Mean Time), using @code{gmtime(3)}.\n \n @item @emph{Standard}:\n GNU extension\n@@ -4404,11 +4423,36 @@ GNU extension\n Subroutine\n \n @item @emph{Syntax}:\n+@code{CALL GMTIME(STIME, TARRAY)}\n+\n @item @emph{Arguments}:\n+@multitable @columnfractions .15 .80\n+@item @var{STIME}  @tab An @code{INTEGER(*)} scalar expression\n+                        corresponding to a system time, with \n+\t\t\t@code{INTENT(IN)}.\n+@item @var{TARRAY} @tab A default @code{INTEGER} array with 9 elements,\n+                        with @code{INTENT(OUT)}.\n+@end multitable\n+\n @item @emph{Return value}:\n-@item @emph{Example}:\n-@item @emph{Specific names}:\n+The elements of @var{TARRAY} are assigned as follows:\n+@enumerate\n+@item Seconds after the minute, range 0--59 or 0--61 to allow for leap\n+      seconds\n+@item Minutes after the hour, range 0--59\n+@item Hours past midnight, range 0--23\n+@item Day of month, range 0--31\n+@item Number of months since January, range 0--12\n+@item Years since 1900\n+@item Number of days since Sunday, range 0--6\n+@item Days since January 1\n+@item Daylight savings indicator: positive if daylight savings is in\n+      effect, zero if not, and negative if the information is not\n+      available.\n+@end enumerate\n+\n @item @emph{See also}:\n+@ref{CTIME}, @ref{LTIME}, @ref{TIME}, @ref{TIME8}\n \n @end table\n \n@@ -4575,7 +4619,8 @@ END PROGRAM\n @end smallexample\n \n @item @emph{See also}:\n-@ref{IOR}, @ref{IEOR}, @ref{IBITS}, @ref{IBSET}, @ref{IBCLR},\n+@ref{IOR}, @ref{IEOR}, @ref{IBITS}, @ref{IBSET}, @ref{IBCLR}, @ref{NOT}\n+\n @end table\n \n \n@@ -4652,7 +4697,8 @@ The return value is of type @code{INTEGER(*)} and of the same kind as\n @var{I}.\n \n @item @emph{See also}:\n-@ref{IBITS}, @ref{IBSET}, @ref{IAND}, @ref{IOR}, @ref{IEOR}\n+@ref{IBITS}, @ref{IBSET}, @ref{IAND}, @ref{IOR}, @ref{IEOR}, @ref{MVBITS}\n+\n @end table\n \n \n@@ -4726,7 +4772,8 @@ The return value is of type @code{INTEGER(*)} and of the same kind as\n @var{I}.\n \n @item @emph{See also}:\n-@ref{IBCLR}, @ref{IBITS}, @ref{IAND}, @ref{IOR}, @ref{IEOR}\n+@ref{IBCLR}, @ref{IBITS}, @ref{IAND}, @ref{IOR}, @ref{IEOR}, @ref{MVBITS}\n+\n @end table\n \n \n@@ -4865,7 +4912,7 @@ arguments.  (If the argument kinds differ, it is of the same kind as\n the larger argument.)\n \n @item @emph{See also}:\n-@ref{IOR}, @ref{IAND}, @ref{IBITS}, @ref{IBSET}, @ref{IBCLR},\n+@ref{IOR}, @ref{IAND}, @ref{IBITS}, @ref{IBSET}, @ref{IBCLR}, @ref{NOT}\n @end table\n \n \n@@ -4959,16 +5006,15 @@ F77 and later\n Elemental function\n \n @item @emph{Syntax}:\n-@multitable @columnfractions .30 .80\n-@item @code{X = INT(X)}\n-@item @code{X = INT(X, KIND)}\n-@end multitable\n+@item @code{X = INT(X [, KIND))}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n-@item @var{X} @tab shall be of type @code{INTEGER(*)}, @code{REAL(*)} or\n-@code{COMPLEX(*)} @item @var{KIND}  @tab (Optional) @var{KIND} shall be\n-a scalar integer.\n+@item @var{X}    @tab shall be of type @code{INTEGER(*)},\n+                      @code{REAL(*)}, or @code{COMPLEX(*)}.\n+@item @var{KIND} @tab (Optional) An @code{INTEGER(*)} initialization\n+                      expression indicating the kind parameter of\n+\t\t      the result.\n @end multitable\n \n @item @emph{Return value}:\n@@ -4979,7 +5025,7 @@ the following rules:\n @item (A)\n If @var{X} is of type @code{INTEGER(*)}, @code{INT(X) = X} \n @item (B)\n-If @var{X} is of type @code{REAL(*)} and @math{|X| < 1} @code{INT(X)} equals @var{0}. \n+If @var{X} is of type @code{REAL(*)} and @math{|X| < 1}, @code{INT(X)} equals @var{0}. \n If @math{|X| \\geq 1}, then @code{INT(X)} equals the largest integer that does not exceed \n the range of @var{X} and whose sign is the same as the sign of @var{X}.\n @item (C)\n@@ -5041,7 +5087,7 @@ arguments.  (If the argument kinds differ, it is of the same kind as\n the larger argument.)\n \n @item @emph{See also}:\n-@ref{IEOR}, @ref{IAND}, @ref{IBITS}, @ref{IBSET}, @ref{IBCLR},\n+@ref{IEOR}, @ref{IAND}, @ref{IBITS}, @ref{IBSET}, @ref{IBCLR}, @ref{NOT}\n @end table\n \n \n@@ -5393,7 +5439,7 @@ with @code{INTENT(IN)}\n @end multitable\n \n @item @emph{Return value}:\n-The return value is of @code{INTEGER(kind=4)} type.\n+The return value is an @code{INTEGER} of the default kind.\n \n @item @emph{See also}:\n @ref{LEN}, @ref{ADJUSTL}, @ref{ADJUSTR}\n@@ -5524,7 +5570,7 @@ Subroutine\n @end multitable\n \n @item @emph{See also}:\n-@ref{UNLINK}\n+@ref{SYMLNK}, @ref{UNLINK}\n @end table\n \n \n@@ -5581,8 +5627,6 @@ otherwise, based on the ASCII ordering.\n @cindex comparison (lexical)\n @cindex lexical comparison\n \n-Intrinsic implemented, documentation pending.\n-\n @table @asis\n @item @emph{Description}:\n Determines whether one string is lexically less than another string,\n@@ -5807,22 +5851,34 @@ end program test_log10\n @cindex @code{LOGICAL} intrinsic\n @cindex conversion function (logical)\n \n-Intrinsic implemented, documentation pending.\n-\n @table @asis\n @item @emph{Description}:\n+Converts one kind of @code{LOGICAL} variable to another.\n+\n @item @emph{Standard}:\n F95 and later\n \n @item @emph{Class}:\n Elemental function\n \n @item @emph{Syntax}:\n+@code{RESULT = LOGICAL(L [, KIND])}\n+\n @item @emph{Arguments}:\n+@multitable @columnfractions .15 .80\n+@item @var{L}    @tab The type shall be @code{LOGICAL(*)}.\n+@item @var{KIND} @tab (Optional) An @code{INTEGER(*)} initialization\n+                      expression indicating the kind parameter of\n+\t\t      the result.\n+@end multitable\n+\n @item @emph{Return value}:\n-@item @emph{Example}:\n-@item @emph{Specific names}:\n+The return value is a @code{LOGICAL} value equal to @var{L}, with a\n+kind corresponding to @var{KIND}, or of the default logical kind if\n+@var{KIND} is not given.\n+\n @item @emph{See also}:\n+@ref{INT}, @ref{REAL}, @ref{CMPLX}\n @end table\n \n \n@@ -5833,23 +5889,38 @@ Elemental function\n @cindex @code{LSHIFT} intrinsic\n @cindex bit operations\n \n-Intrinsic implemented, documentation pending.\n-\n @table @asis\n @item @emph{Description}:\n+@code{LSHIFT} returns a value corresponding to @var{I} with all of the\n+bits shifted left by @var{SHIFT} places.  If the absolute value of\n+@var{SHIFT} is greater than @code{BIT_SIZE(I)}, the value is undefined. \n+Bits shifted out from the left end are lost; zeros are shifted in from\n+the opposite end.\n+\n+This function has been superceded by the @code{ISHFT} intrinsic, which\n+is standard in Fortran 95 and later.\n \n @item @emph{Standard}:\n GNU extension\n \n @item @emph{Class}:\n-Function\n+Elemental function\n \n @item @emph{Syntax}:\n+@code{RESULT = LSHIFT(I, SHIFT)}\n+\n @item @emph{Arguments}:\n+@multitable @columnfractions .15 .80\n+@item @var{I} @tab The type shall be @code{INTEGER(*)}.\n+@item @var{SHIFT} @tab The type shall be @code{INTEGER(*)}.\n+@end multitable\n+\n @item @emph{Return value}:\n-@item @emph{Example}:\n-@item @emph{Specific names}:\n+The return value is of type @code{INTEGER(*)} and of the same kind as\n+@var{I}.\n+\n @item @emph{See also}:\n+@ref{ISHFT}, @ref{ISHFTC}, @ref{RSHIFT}\n \n @end table\n \n@@ -5897,10 +5968,11 @@ To stat an open file: @ref{FSTAT}, to stat a file: @ref{STAT}\n @cindex @code{LTIME} intrinsic\n @cindex time, conversion function\n \n-Intrinsic implemented, documentation pending.\n-\n @table @asis\n @item @emph{Description}:\n+Given a system time value @var{STIME} (as provided by the @code{TIME8()}\n+intrinsic), fills @var{TARRAY} with values extracted from it appropriate\n+to the local time zone using @code{localtime(3)}.\n \n @item @emph{Standard}:\n GNU extension\n@@ -5909,11 +5981,36 @@ GNU extension\n Subroutine\n \n @item @emph{Syntax}:\n+@code{CALL LTIME(STIME, TARRAY)}\n+\n @item @emph{Arguments}:\n+@multitable @columnfractions .15 .80\n+@item @var{STIME}  @tab An @code{INTEGER(*)} scalar expression\n+                        corresponding to a system time, with \n+\t\t\t@code{INTENT(IN)}.\n+@item @var{TARRAY} @tab A default @code{INTEGER} array with 9 elements,\n+                        with @code{INTENT(OUT)}.\n+@end multitable\n+\n @item @emph{Return value}:\n-@item @emph{Example}:\n-@item @emph{Specific names}:\n+The elements of @var{TARRAY} are assigned as follows:\n+@enumerate\n+@item Seconds after the minute, range 0--59 or 0--61 to allow for leap\n+      seconds\n+@item Minutes after the hour, range 0--59\n+@item Hours past midnight, range 0--23\n+@item Day of month, range 0--31\n+@item Number of months since January, range 0--12\n+@item Years since 1900\n+@item Number of days since Sunday, range 0--6\n+@item Days since January 1\n+@item Daylight savings indicator: positive if daylight savings is in\n+      effect, zero if not, and negative if the information is not\n+      available.\n+@end enumerate\n+\n @item @emph{See also}:\n+@ref{CTIME}, @ref{GMTIME}, @ref{TIME}, @ref{TIME8}\n \n @end table\n \n@@ -5984,48 +6081,81 @@ end program test_malloc\n @end table\n \n \n+\n @node MATMUL\n @section @code{MATMUL} --- matrix multiplication\n @cindex @code{MATMUL} intrinsic\n @cindex matrix operations\n \n-Intrinsic implemented, documentation pending.\n-\n @table @asis\n @item @emph{Description}:\n+Performs a matrix multiplication on numeric or logical arguments.\n+\n @item @emph{Standard}:\n F95 and later\n \n @item @emph{Class}:\n Transformational function\n \n @item @emph{Syntax}:\n+@code{RESULT = MATMUL(MATRIX_A, MATRIX_B)}\n+\n @item @emph{Arguments}:\n+@multitable @columnfractions .15 .80\n+@item @var{MATRIX_A} @tab An array of @code{INTEGER(*)},\n+                          @code{REAL(*)}, @code{COMPLEX(*)}, or\n+\t\t\t  @code{LOGICAL(*)} type, with a rank of\n+\t\t\t  one or two.\n+@item @var{MATRIX_B} @tab An array of @code{INTEGER(*)},\n+                          @code{REAL(*)}, or @code{COMPLEX(*)} type if\n+\t\t\t  @var{MATRIX_A} is of a numeric type;\n+\t\t\t  otherwise, an array of @code{LOGICAL(*)}\n+\t\t\t  type. The rank shall be one or two, and the\n+\t\t\t  first (or only) dimension of @var{MATRIX(B)}\n+\t\t\t  shall be equal to the last (or only)\n+\t\t\t  dimension of @var{MATRIX_A}.\n+@end multitable\n+\n @item @emph{Return value}:\n-@item @emph{Example}:\n+The matrix product of @var{MATRIX_A} and @var{MATRIX_B}.  The type and\n+kind of the result follow the usual type and kind promotion rules, as\n+for the @code{*} or @code{.AND.} operators.\n+\n @item @emph{See also}:\n @end table\n \n \n+\n @node MAX\n @section @code{MAX} --- Maximum value of an argument list\n @cindex @code{MAX} intrinsic\n-@cindex undocumented intrinsic \n-\n-Intrinsic implemented, documentation pending.\n \n @table @asis\n @item @emph{Description}:\n+Returns the argument with the largest (most positive) value.\n+\n @item @emph{Standard}:\n F77 and later\n \n @item @emph{Class}:\n Elemental function\n \n @item @emph{Syntax}:\n+@code{RESULT = MAX(A1, A2 [, A3 [, ...]])}\n+\n @item @emph{Arguments}:\n+@multitable @columnfractions .15 .80\n+@item @var{A1}          @tab The type shall be @code{INTEGER(*)} or\n+                             @code{REAL(*)}.\n+@item @var{A2, A3, ...} @tab An expression of the same type and kind\n+                             as @var{A1}.  (As a GNU extension, \n+\t\t\t     arguments of different kinds are\n+\t\t\t     permitted.)\n+@end multitable\n+\n @item @emph{Return value}:\n-@item @emph{Example}:\n+The return value corresponds to the maximum value among the arguments,\n+and has the same type and kind as the first argument.\n \n @item @emph{Specific names}:\n @multitable @columnfractions .20 .20 .20 .40\n@@ -6038,10 +6168,12 @@ Elemental function\n @end multitable\n \n @item @emph{See also}:\n-@ref{MAXLOC} @ref{MAXVAL}\n+@ref{MAXLOC} @ref{MAXVAL}, @ref{MIN}\n+\n @end table\n \n \n+\n @node MAXEXPONENT\n @section @code{MAXEXPONENT} --- Maximum exponent of a real kind\n @cindex @code{MAXEXPONENT} intrinsic\n@@ -6084,102 +6216,183 @@ end program exponents\n @end table\n \n \n+\n @node MAXLOC\n @section @code{MAXLOC} --- Location of the maximum value within an array\n @cindex @code{MAXLOC} intrinsic\n-@cindex undocumented intrinsic \n-\n-Intrinsic implemented, documentation pending.\n \n @table @asis\n @item @emph{Description}:\n+Determines the location of the element in the array with the maximum\n+value, or, if the @var{DIM} argument is supplied, determines the\n+locations of the maximum element along each row of the array in the\n+@var{DIM} direction.  If @var{MASK} is present, only the elements for\n+which @var{MASK} is @code{.TRUE.} are considered.  If more than one\n+element in the array has the maximum value, the location returned is\n+that of the first such element in array element order.  If the array has\n+zero size, or all of the elements of @var{MASK} are @code{.FALSE.}, then\n+the result is an array of zeroes.  Similarly, if @var{DIM} is supplied\n+and all of the elements of @var{MASK} along a given row are zero, the\n+result value for that row is zero.\n+\n @item @emph{Standard}:\n F95 and later\n \n @item @emph{Class}:\n Transformational function\n \n @item @emph{Syntax}:\n+@multitable @columnfractions .80\n+@item @code{RESULT = MAXLOC(ARRAY, DIM [, MASK])}\n+@item @code{RESULT = MAXLOC(ARRAY [, MASK])}\n+@end multitable\n+\n @item @emph{Arguments}:\n+@multitable @columnfractions .15 .80\n+@item @var{ARRAY} @tab Shall be an array of type @code{INTEGER(*)},\n+                       @code{REAL(*)}, or @code{CHARACTER(*)}.\n+@item @var{DIM}   @tab (Optional) Shall be a scalar of type\n+                       @code{INTEGER(*)}, with a value between one\n+\t\t       and the rank of @var{ARRAY}, inclusive.  It\n+\t\t       may not be an optional dummy argument.\n+@item @var{MASK}  @tab Shall be an array of type @code{LOGICAL(*)},\n+                       and conformable with @var{ARRAY}.\n+@end multitable\n+\n @item @emph{Return value}:\n-@item @emph{Example}:\n+If @var{DIM} is absent, the result is a rank-one array with a length\n+equal to the rank of @var{ARRAY}.  If @var{DIM} is present, the result\n+is an array with a rank one less than the rank of @var{ARRAY}, and a\n+size corresponding to the size of @var{ARRAY} with the @var{DIM}\n+dimension removed.  If @var{DIM} is present and @var{ARRAY} has a rank\n+of one, the result is a scalar.  In all cases, the result is of default\n+@code{INTEGER} type.\n+\n @item @emph{See also}:\n @ref{MAX}, @ref{MAXVAL}\n+\n @end table\n \n \n \n @node MAXVAL\n @section @code{MAXVAL} --- Maximum value of an array\n @cindex @code{MAXVAL} intrinsic\n-@cindex undocumented intrinsic \n-\n-Intrinsic implemented, documentation pending.\n \n @table @asis\n @item @emph{Description}:\n-@item @emph{Standard}:\n+Determines the maximum value of the elements in an array value, or, if\n+the @var{DIM} argument is supplied, determines the maximum value along\n+each row of the array in the @var{DIM} direction.  If @var{MASK} is\n+present, only the elements for which @var{MASK} is @code{.TRUE.} are\n+considered.  If the array has zero size, or all of the elements of\n+@var{MASK} are @code{.FALSE.}, then the result is the most negative\n+number of the type and kind of @var{ARRAY} if @var{ARRAY} is numeric, or\n+a string of nulls if @var{ARRAY} is of character type.\n \n+@item @emph{Standard}:\n+F95 and later\n \n @item @emph{Class}:\n Transformational function\n \n @item @emph{Syntax}:\n+@multitable @columnfractions .80\n+@item @code{RESULT = MAXVAL(ARRAY, DIM [, MASK])}\n+@item @code{RESULT = MAXVAL(ARRAY [, MASK])}\n+@end multitable\n+\n @item @emph{Arguments}:\n+@multitable @columnfractions .15 .80\n+@item @var{ARRAY} @tab Shall be an array of type @code{INTEGER(*)},\n+                       @code{REAL(*)}, or @code{CHARACTER(*)}.\n+@item @var{DIM}   @tab (Optional) Shall be a scalar of type\n+                       @code{INTEGER(*)}, with a value between one\n+\t\t       and the rank of @var{ARRAY}, inclusive.  It\n+\t\t       may not be an optional dummy argument.\n+@item @var{MASK}  @tab Shall be an array of type @code{LOGICAL(*)},\n+                       and conformable with @var{ARRAY}.\n+@end multitable\n+\n @item @emph{Return value}:\n-@item @emph{Example}:\n-@item @emph{Specific names}:\n+If @var{DIM} is absent, the result is a rank-one array with a length\n+equal to the rank of @var{ARRAY}.  If @var{DIM} is present, the result\n+is an array with a rank one less than the rank of @var{ARRAY}, and a\n+size corresponding to the size of @var{ARRAY} with the @var{DIM}\n+dimension removed.  If @var{DIM} is present and @var{ARRAY} has a rank\n+of one, the result is a scalar.  In all cases, the result is of the same\n+type and kind as @var{ARRAY}.\n \n @item @emph{See also}:\n @ref{MAX}, @ref{MAXLOC}\n @end table\n \n \n \n-\n @node MERGE\n-@section @code{MERGE} --- Merge arrays\n+@section @code{MERGE} --- Merge variables\n @cindex @code{MERGE} intrinsic\n-@cindex undocumented intrinsic \n-\n-Intrinsic implemented, documentation pending.\n \n @table @asis\n @item @emph{Description}:\n+Select values from two arrays according to a logical mask.  The result\n+is equal to @var{TSOURCE} if @var{MASK} is @code{.TRUE.}, or equal to\n+@var{FSOURCE} if it is @code{.FALSE.}.\n+\n @item @emph{Standard}:\n F95 and later\n \n @item @emph{Class}:\n-elemental function\n+Elemental function\n \n @item @emph{Syntax}:\n+@code{RESULT = MERGE(TSOURCE, FSOURCE, MASK)}\n+\n @item @emph{Arguments}:\n+@multitable @columnfractions .15 .80\n+@item @var{TSOURCE} @tab May be of any type.\n+@item @var{FSOURCE} @tab Shall be of the same type and type parameters\n+                         as @var{TSOURCE}.\n+@item @var{MASK}    @tab Shall be of type @code{LOGICAL(*)}.\n+@end multitable\n+\n @item @emph{Return value}:\n-@item @emph{Example}:\n-@item @emph{Specific names}:\n-@item @emph{See also}:\n+The result is of the same type and type parameters as @var{TSOURCE}.\n+\n @end table\n \n \n+\n @node MIN\n @section @code{MIN} --- Minimum value of an argument list\n @cindex @code{MIN} intrinsic\n-@cindex undocumented intrinsic \n-\n-Intrinsic implemented, documentation pending.\n \n @table @asis\n @item @emph{Description}:\n+Returns the argument with the smallest (most negative) value.\n+\n @item @emph{Standard}:\n F77 and later\n \n @item @emph{Class}:\n Elemental function\n \n @item @emph{Syntax}:\n+@code{RESULT = MIN(A1, A2 [, A3 [, ...]])}\n+\n @item @emph{Arguments}:\n+@multitable @columnfractions .15 .80\n+@item @var{A1}          @tab The type shall be @code{INTEGER(*)} or\n+                             @code{REAL(*)}.\n+@item @var{A2, A3, ...} @tab An expression of the same type and kind\n+                             as @var{A1}.  (As a GNU extension, \n+\t\t\t     arguments of different kinds are\n+\t\t\t     permitted.)\n+@end multitable\n+\n @item @emph{Return value}:\n-@item @emph{Example}:\n+The return value corresponds to the maximum value among the arguments,\n+and has the same type and kind as the first argument.\n \n @item @emph{Specific names}:\n @multitable @columnfractions .20 .20 .20 .40\n@@ -6192,7 +6405,7 @@ Elemental function\n @end multitable\n \n @item @emph{See also}:\n-@ref{MINLOC}, @ref{MINVAL}\n+@ref{MAX}, @ref{MINLOC}, @ref{MINVAL}\n @end table\n \n @node MINEXPONENT\n@@ -6229,56 +6442,117 @@ See @code{MAXEXPONENT} for an example.\n @end table\n \n \n+\n @node MINLOC\n @section @code{MINLOC} --- Location of the minimum value within an array\n @cindex @code{MINLOC} intrinsic\n-@cindex undocumented intrinsic \n-\n-Intrinsic implemented, documentation pending.\n \n @table @asis\n @item @emph{Description}:\n+Determines the location of the element in the array with the minimum\n+value, or, if the @var{DIM} argument is supplied, determines the\n+locations of the minimum element along each row of the array in the\n+@var{DIM} direction.  If @var{MASK} is present, only the elements for\n+which @var{MASK} is @code{.TRUE.} are considered.  If more than one\n+element in the array has the minimum value, the location returned is\n+that of the first such element in array element order.  If the array has\n+zero size, or all of the elements of @var{MASK} are @code{.FALSE.}, then\n+the result is an array of zeroes.  Similarly, if @var{DIM} is supplied\n+and all of the elements of @var{MASK} along a given row are zero, the\n+result value for that row is zero.\n+\n @item @emph{Standard}:\n F95 and later\n \n @item @emph{Class}:\n Transformational function\n \n @item @emph{Syntax}:\n+@multitable @columnfractions .80\n+@item @code{RESULT = MINLOC(ARRAY, DIM [, MASK])}\n+@item @code{RESULT = MINLOC(ARRAY [, MASK])}\n+@end multitable\n+\n @item @emph{Arguments}:\n+@multitable @columnfractions .15 .80\n+@item @var{ARRAY} @tab Shall be an array of type @code{INTEGER(*)},\n+                       @code{REAL(*)}, or @code{CHARACTER(*)}.\n+@item @var{DIM}   @tab (Optional) Shall be a scalar of type\n+                       @code{INTEGER(*)}, with a value between one\n+\t\t       and the rank of @var{ARRAY}, inclusive.  It\n+\t\t       may not be an optional dummy argument.\n+@item @var{MASK}  @tab Shall be an array of type @code{LOGICAL(*)},\n+                       and conformable with @var{ARRAY}.\n+@end multitable\n+\n @item @emph{Return value}:\n-@item @emph{Example}:\n+If @var{DIM} is absent, the result is a rank-one array with a length\n+equal to the rank of @var{ARRAY}.  If @var{DIM} is present, the result\n+is an array with a rank one less than the rank of @var{ARRAY}, and a\n+size corresponding to the size of @var{ARRAY} with the @var{DIM}\n+dimension removed.  If @var{DIM} is present and @var{ARRAY} has a rank\n+of one, the result is a scalar.  In all cases, the result is of default\n+@code{INTEGER} type.\n \n @item @emph{See also}:\n @ref{MIN}, @ref{MINVAL}\n \n @end table\n \n \n+\n @node MINVAL\n @section @code{MINVAL} --- Minimum value of an array\n @cindex @code{MINVAL} intrinsic\n-@cindex undocumented intrinsic \n-\n-Intrinsic implemented, documentation pending.\n \n @table @asis\n @item @emph{Description}:\n+Determines the minimum value of the elements in an array value, or, if\n+the @var{DIM} argument is supplied, determines the minimum value along\n+each row of the array in the @var{DIM} direction.  If @var{MASK} is\n+present, only the elements for which @var{MASK} is @code{.TRUE.} are\n+considered.  If the array has zero size, or all of the elements of\n+@var{MASK} are @code{.FALSE.}, then the result is @code{HUGE(ARRAY)} if\n+@var{ARRAY} is numeric, or a string of @code{CHAR(255)} characters if\n+@var{ARRAY} is of character type.\n+\n @item @emph{Standard}:\n F95 and later\n \n @item @emph{Class}:\n Transformational function\n \n @item @emph{Syntax}:\n+@multitable @columnfractions .80\n+@item @code{RESULT = MINVAL(ARRAY, DIM [, MASK])}\n+@item @code{RESULT = MINVAL(ARRAY [, MASK])}\n+@end multitable\n+\n @item @emph{Arguments}:\n+@multitable @columnfractions .15 .80\n+@item @var{ARRAY} @tab Shall be an array of type @code{INTEGER(*)},\n+                       @code{REAL(*)}, or @code{CHARACTER(*)}.\n+@item @var{DIM}   @tab (Optional) Shall be a scalar of type\n+                       @code{INTEGER(*)}, with a value between one\n+\t\t       and the rank of @var{ARRAY}, inclusive.  It\n+\t\t       may not be an optional dummy argument.\n+@item @var{MASK}  @tab Shall be an array of type @code{LOGICAL(*)},\n+                       and conformable with @var{ARRAY}.\n+@end multitable\n+\n @item @emph{Return value}:\n-@item @emph{Example}:\n+If @var{DIM} is absent, the result is a rank-one array with a length\n+equal to the rank of @var{ARRAY}.  If @var{DIM} is present, the result\n+is an array with a rank one less than the rank of @var{ARRAY}, and a\n+size corresponding to the size of @var{ARRAY} with the @var{DIM}\n+dimension removed.  If @var{DIM} is present and @var{ARRAY} has a rank\n+of one, the result is a scalar.  In all cases, the result is of the same\n+type and kind as @var{ARRAY}.\n \n @item @emph{See also}:\n @ref{MIN}, @ref{MINLOC}\n-@end table\n \n+@end table\n \n \n \n@@ -6398,31 +6672,6 @@ end program test_mod\n \n \n \n-@node MVBITS\n-@section @code{MVBITS} --- Move bits from one integer to another\n-@cindex @code{MVBITS} intrinsic\n-@cindex bit operations\n-\n-Intrinsic implemented, documentation pending.\n-\n-@table @asis\n-@item @emph{Description}:\n-@item @emph{Standard}:\n-F95 and later\n-\n-@item @emph{Class}:\n-Elemental subroutine\n-\n-@item @emph{Syntax}:\n-@item @emph{Arguments}:\n-@item @emph{Return value}:\n-@item @emph{Example}:\n-@item @emph{See also}:\n-@end table\n-\n-\n-\n-\n @node MOVE_ALLOC\n @section @code{MOVE_ALLOC} --- Move allocation from one object to another\n @cindex @code{MOVE_ALLOC} intrinsic\n@@ -6470,6 +6719,50 @@ end program test_move_alloc\n \n \n \n+@node MVBITS\n+@section @code{MVBITS} --- Move bits from one integer to another\n+@cindex @code{MVBITS} intrinsic\n+@cindex bit operations\n+\n+@table @asis\n+@item @emph{Description}:\n+Moves @var{LEN} bits from positions @var{FROMPOS} through\n+@code{FROMPOS+LEN-1} of @var{FROM} to positions @var{TOPOS} through\n+@code{TOPOS+LEN-1} of @var{TO}. The portion of argument @var{TO} not\n+affected by the movement of bits is unchanged. The values of\n+@code{FROMPOS+LEN-1} and @code{TOPOS+LEN-1} must be less than\n+@code{BIT_SIZE(FROM)}.\n+\n+@item @emph{Standard}:\n+F95 and later\n+\n+@item @emph{Class}:\n+Elemental function\n+\n+@item @emph{Syntax}:\n+@code{RESULT = MVBITS(FROM, FROMPOS, LEN, TO, TOPOS)}\n+\n+@item @emph{Arguments}:\n+@multitable @columnfractions .15 .80\n+@item @var{FROM}    @tab The type shall be @code{INTEGER(*)}.\n+@item @var{FROMPOS} @tab The type shall be @code{INTEGER(*)}.\n+@item @var{LEN}     @tab The type shall be @code{INTEGER(*)}.\n+@item @var{TO}      @tab The type shall be @code{INTEGER(*)}, of the\n+                         same kind as @var{FROM}.\n+@item @var{TOPOS}   @tab The type shall be @code{INTEGER(*)}.\n+@end multitable\n+\n+@item @emph{Return value}:\n+The return value is of type @code{INTEGER(*)} and of the same kind as\n+@var{FROM}.\n+\n+@item @emph{See also}:\n+@ref{IBCLR}, @ref{IBSET}, @ref{IBITS}, @ref{IAND}, @ref{IOR}, @ref{IEOR}\n+\n+@end table\n+\n+\n+\n @node NEAREST\n @section @code{NEAREST} --- Nearest representable number\n @cindex @code{NEAREST} intrinsic\n@@ -6523,7 +6816,7 @@ end program test_nearest\n \n @table @asis\n @item @emph{Description}:\n-@code{NEW_LINE(C)} returns the new-line character\n+@code{NEW_LINE(C)} returns the new-line character.\n \n @item @emph{Standard}:\n F2003 and later\n@@ -6610,23 +6903,33 @@ end program test_nint\n @node NOT\n @section @code{NOT} --- Logical negation\n @cindex @code{NOT} intrinsic\n-@cindex logical operations\n-\n-Intrinsic implemented, documentation pending.\n+@cindex bit operations\n \n @table @asis\n @item @emph{Description}:\n+@code{NOT} returns the bitwise boolean inverse of @var{I}.\n+\n @item @emph{Standard}:\n-F77 and later\n+F95 and later\n \n @item @emph{Class}:\n Elemental function\n \n @item @emph{Syntax}:\n+@code{RESULT = NOT(I)}\n+\n @item @emph{Arguments}:\n+@multitable @columnfractions .15 .80\n+@item @var{I} @tab The type shall be @code{INTEGER(*)}.\n+@end multitable\n+\n @item @emph{Return value}:\n-@item @emph{Example}:\n+The return type is @code{INTEGER(*)}, of the same kind as the\n+argument.\n+\n @item @emph{See also}:\n+@ref{IAND}, @ref{IEOR}, @ref{IOR}, @ref{IBITS}, @ref{IBSET}, @ref{IBCLR}\n+\n @end table\n \n \n@@ -6735,34 +7038,36 @@ Transformational function\n \n \n \n-\n @node PERROR\n @section @code{PERROR} --- Print system error message\n @cindex @code{PERROR} intrinsic\n-@cindex undocumented intrinsic \n-\n-Intrinsic implemented, documentation pending.\n \n @table @asis\n @item @emph{Description}:\n+Prints (on the C @code{stderr} stream) a newline-terminated error\n+message corresponding to the last system error. This is prefixed by\n+@var{STRING}, a colon and a space. See @code{perror(3)}.\n+\n @item @emph{Standard}:\n GNU extension\n \n @item @emph{Class}:\n Subroutine\n \n @item @emph{Syntax}:\n+@code{CALL PERROR(STRING)}\n+\n @item @emph{Arguments}:\n-@item @emph{Return value}:\n-@item @emph{Example}:\n-@item @emph{Specific names}:\n+@multitable @columnfractions .15 .80\n+@item @var{STRING} @tab A scalar of default @code{CHARACTER} type.\n+@end multitable\n+\n @item @emph{See also}:\n @ref{IERRNO}\n @end table\n \n \n \n-\n @node PRECISION\n @section @code{PRECISION} --- Decimal precision of a real kind\n @cindex @code{PRECISION} intrinsic\n@@ -6829,7 +7134,6 @@ Inquiry function\n \n \n \n-\n @node PRODUCT\n @section @code{PRODUCT} --- Product of array elements\n @cindex @code{PRODUCT} intrinsic\n@@ -6856,7 +7160,6 @@ Transformational function\n \n \n \n-\n @node RADIX\n @section @code{RADIX} --- Base of a model number\n @cindex @code{RADIX} intrinsic\n@@ -6896,62 +7199,32 @@ end program test_radix\n \n \n \n-@node RANDOM_NUMBER\n-@section @code{RANDOM_NUMBER} --- Pseudo-random number\n-@cindex @code{RANDOM_NUMBER} intrinsic\n+@node RAN\n+@section @code{RAN} --- Real pseudo-random number\n+@cindex @code{RAN} intrinsic\n @cindex random numbers\n \n-Intrinsic implemented, documentation pending.\n-\n @table @asis\n @item @emph{Description}:\n-@item @emph{Standard}:\n-F95 and later\n-\n-@item @emph{Class}:\n-Elemental subroutine\n-\n-@item @emph{Syntax}:\n-@item @emph{Arguments}:\n-@item @emph{Return value}:\n-@item @emph{Example}:\n-@item @emph{See also}:\n-@ref{RANDOM_SEED}\n-@end table\n-\n-\n-\n-\n-@node RANDOM_SEED\n-@section @code{RANDOM_SEED} --- Initialize a pseudo-random number sequence\n-@cindex @code{RANDOM_SEED} intrinsic\n-@cindex random numbers\n-\n-Intrinsic implemented, documentation pending.\n+For compatibility with HP FORTRAN 77/iX, the @code{RAN} intrinsic is\n+provided as an alias for @code{RAND}.  See @ref{RAND} for complete\n+documentation.\n \n-@table @asis\n-@item @emph{Description}:\n @item @emph{Standard}:\n-F95 and later\n+GNU extension\n \n @item @emph{Class}:\n-Subroutine\n+Non-elemental function\n \n-@item @emph{Syntax}:\n-@item @emph{Arguments}:\n-@item @emph{Return value}:\n-@item @emph{Example}:\n @item @emph{See also}:\n-@ref{RANDOM_NUMBER}\n+@ref{RAND}, @ref{RANDOM_NUMBER}\n @end table\n \n \n \n-\n @node RAND\n @section @code{RAND} --- Real pseudo-random number\n @cindex @code{RAND} intrinsic\n-@cindex @code{RAN} intrinsic\n @cindex random numbers\n \n @table @asis\n@@ -6966,7 +7239,7 @@ it is used as a new seed with @code{SRAND}.\n GNU extension\n \n @item @emph{Class}:\n-non-elemental function\n+Non-elemental function\n \n @item @emph{Syntax}:\n @code{X = RAND(FLAG)}\n@@ -6990,17 +7263,63 @@ program test_rand\n end program test_rand\n @end smallexample\n \n-@item @emph{Note}:\n-For compatibility with HP FORTRAN 77/iX, the @code{RAN} intrinsic is\n-provided as an alias for @code{RAND}.\n-\n @item @emph{See also}:\n @ref{SRAND}, @ref{RANDOM_NUMBER}\n \n @end table\n \n \n \n+@node RANDOM_NUMBER\n+@section @code{RANDOM_NUMBER} --- Pseudo-random number\n+@cindex @code{RANDOM_NUMBER} intrinsic\n+@cindex random numbers\n+\n+Intrinsic implemented, documentation pending.\n+\n+@table @asis\n+@item @emph{Description}:\n+@item @emph{Standard}:\n+F95 and later\n+\n+@item @emph{Class}:\n+Elemental subroutine\n+\n+@item @emph{Syntax}:\n+@item @emph{Arguments}:\n+@item @emph{Return value}:\n+@item @emph{Example}:\n+@item @emph{See also}:\n+@ref{RANDOM_SEED}\n+@end table\n+\n+\n+\n+@node RANDOM_SEED\n+@section @code{RANDOM_SEED} --- Initialize a pseudo-random number sequence\n+@cindex @code{RANDOM_SEED} intrinsic\n+@cindex random numbers\n+\n+Intrinsic implemented, documentation pending.\n+\n+@table @asis\n+@item @emph{Description}:\n+@item @emph{Standard}:\n+F95 and later\n+\n+@item @emph{Class}:\n+Subroutine\n+\n+@item @emph{Syntax}:\n+@item @emph{Arguments}:\n+@item @emph{Return value}:\n+@item @emph{Example}:\n+@item @emph{See also}:\n+@ref{RANDOM_NUMBER}\n+@end table\n+\n+\n+\n @node RANGE\n @section @code{RANGE} --- Decimal exponent range of a real kind\n @cindex @code{RANGE} intrinsic\n@@ -7035,21 +7354,6 @@ See @code{PRECISION} for an example.\n \n \n \n-@node RAN\n-@section @code{RAN} --- Real pseudo-random number\n-@cindex @code{RAN} intrinsic\n-@cindex random numbers\n-\n-@table @asis\n-@item @emph{Standard}:\n-GNU extension\n-\n-@item @emph{See also}:\n-@ref{RAND}, @ref{RANDOM_NUMBER}\n-@end table\n-\n-\n-\n @node REAL\n @section @code{REAL} --- Convert to real type \n @cindex @code{REAL} intrinsic\n@@ -7077,9 +7381,11 @@ Elemental function\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n-@item @var{X} @tab shall be @code{INTEGER(*)}, @code{REAL(*)}, or  \n-@code{COMPLEX(*)}.\n-@item @var{KIND}  @tab (Optional) @var{KIND} shall be a scalar integer.\n+@item @var{X}    @tab shall be @code{INTEGER(*)}, @code{REAL(*)}, or\n+                      @code{COMPLEX(*)}.\n+@item @var{KIND} @tab (Optional) An @code{INTEGER(*)} initialization\n+                      expression indicating the kind parameter of\n+\t\t      the result.\n @end multitable\n \n @item @emph{Return value}:\n@@ -7113,28 +7419,41 @@ end program test_real\n @end table\n \n \n+\n @node RENAME\n @section @code{RENAME} --- Rename a file\n @cindex @code{RENAME} intrinsic\n @cindex file system operations\n \n-Intrinsic implemented, documentation pending.\n-\n @table @asis\n @item @emph{Description}:\n+Renames a file from file @var{PATH1} to @var{PATH2}. A null\n+character (@code{CHAR(0)}) can be used to mark the end of the names in\n+@var{PATH1} and @var{PATH2}; otherwise, trailing blanks in the file\n+names are ignored.  If the @var{STATUS} argument is supplied, it\n+contains 0 on success or a nonzero error code upon return; see\n+@code{rename(2)}.\n+\n @item @emph{Standard}:\n GNU extension\n \n @item @emph{Class}:\n Subroutine\n \n @item @emph{Syntax}:\n+@code{CALL RENAME(PATH1, PATH2 [, STATUS])}\n+\n @item @emph{Arguments}:\n-@item @emph{Return value}:\n-@item @emph{Example}:\n+@multitable @columnfractions .15 .80\n+@item @var{PATH1} @tab Shall be of default @code{CHARACTER} type.\n+@item @var{PATH2} @tab Shall be of default @code{CHARACTER} type.\n+@item @var{STATUS} @tab (Optional) Shall be of default @code{INTEGER} type.\n+@end multitable\n+\n @item @emph{See also}:\n-@end table\n+@ref{LINK}\n \n+@end table\n \n \n \n@@ -7225,22 +7544,38 @@ The value returned is equal to\n @cindex @code{RSHIFT} intrinsic\n @cindex bit operations\n \n-Intrinsic implemented, documentation pending.\n-\n @table @asis\n @item @emph{Description}:\n+@code{RSHIFT} returns a value corresponding to @var{I} with all of the\n+bits shifted right by @var{SHIFT} places.  If the absolute value of\n+@var{SHIFT} is greater than @code{BIT_SIZE(I)}, the value is undefined. \n+Bits shifted out from the left end are lost; zeros are shifted in from\n+the opposite end.\n+\n+This function has been superceded by the @code{ISHFT} intrinsic, which\n+is standard in Fortran 95 and later.\n \n @item @emph{Standard}:\n GNU extension\n \n @item @emph{Class}:\n-Function\n+Elemental function\n \n @item @emph{Syntax}:\n+@code{RESULT = RSHIFT(I, SHIFT)}\n+\n @item @emph{Arguments}:\n+@multitable @columnfractions .15 .80\n+@item @var{I} @tab The type shall be @code{INTEGER(*)}.\n+@item @var{SHIFT} @tab The type shall be @code{INTEGER(*)}.\n+@end multitable\n+\n @item @emph{Return value}:\n-@item @emph{Example}:\n+The return value is of type @code{INTEGER(*)} and of the same kind as\n+@var{I}.\n+\n @item @emph{See also}:\n+@ref{ISHFT}, @ref{ISHFTC}, @ref{LSHIFT}\n \n @end table\n \n@@ -7377,7 +7712,7 @@ F95 and later\n Transformational function\n \n @item @emph{Syntax}:\n-@multitable @columnfractions .30 .80\n+@multitable @columnfractions .80\n @item @code{J = SELECTED_INT_KIND(I)}\n @end multitable\n \n@@ -7423,7 +7758,7 @@ F95 and later\n Transformational function\n \n @item @emph{Syntax}:\n-@multitable @columnfractions .30 .80\n+@multitable @columnfractions .80\n @item @code{I = SELECTED_REAL_KIND(P,R)}\n @end multitable\n \n@@ -7538,7 +7873,6 @@ Inquiry function\n \n \n \n-\n @node SIGN\n @section @code{SIGN} --- Sign copying function\n @cindex @code{SIGN} intrinsic\n@@ -7616,7 +7950,7 @@ GNU extension\n subroutine, non-elemental function\n \n @item @emph{Syntax}:\n-@multitable @columnfractions .30 .80\n+@multitable @columnfractions .80\n @item @code{CALL SIGNAL(NUMBER, HANDLER)}\n @item @code{CALL SIGNAL(NUMBER, HANDLER, STATUS)}\n @item @code{STATUS = SIGNAL(NUMBER, HANDLER)}\n@@ -7651,7 +7985,6 @@ end program test_signal\n \n \n \n-\n @node SIN\n @section @code{SIN} --- Sine function \n @cindex @code{SIN} intrinsic\n@@ -7960,6 +8293,7 @@ pseudo-random number generators.\n @end table\n \n \n+\n @node STAT\n @section @code{STAT} --- Get file status\n @cindex @code{STAT} intrinsic\n@@ -8066,55 +8400,76 @@ Transformational function\n \n \n \n-\n @node SYMLNK\n @section @code{SYMLNK} --- Create a symbolic link\n @cindex @code{SYMLNK} intrinsic\n @cindex file system operations\n \n-Intrinsic implemented, documentation pending.\n-\n @table @asis\n @item @emph{Description}:\n+Makes a symbolic link from file @var{PATH1} to @var{PATH2}. A null\n+character (@code{CHAR(0)}) can be used to mark the end of the names in\n+@var{PATH1} and @var{PATH2}; otherwise, trailing blanks in the file\n+names are ignored.  If the @var{STATUS} argument is supplied, it\n+contains 0 on success or a nonzero error code upon return; see\n+@code{symlink(2)}.  If the system does not supply @code{symlink(2)}, \n+@code{ENOSYS} is returned.\n+\n @item @emph{Standard}:\n-@item @emph{Class}:\n GNU extension\n \n+@item @emph{Class}:\n+Subroutine\n+\n @item @emph{Syntax}:\n+@code{CALL SYMLNK(PATH1, PATH2 [, STATUS])}\n+\n @item @emph{Arguments}:\n-@item @emph{Return value}:\n-@item @emph{Example}:\n+@multitable @columnfractions .15 .80\n+@item @var{PATH1} @tab Shall be of default @code{CHARACTER} type.\n+@item @var{PATH2} @tab Shall be of default @code{CHARACTER} type.\n+@item @var{STATUS} @tab (Optional) Shall be of default @code{INTEGER} type.\n+@end multitable\n+\n @item @emph{See also}:\n-@end table\n+@ref{LINK}, @ref{UNLINK}\n \n+@end table\n \n \n \n @node SYSTEM\n @section @code{SYSTEM} --- Execute a shell command\n @cindex @code{SYSTEM} intrinsic\n-@cindex undocumented intrinsic \n-\n-Intrinsic implemented, documentation pending.\n \n @table @asis\n @item @emph{Description}:\n+Passes the command @var{COMMAND} to a shell (see @code{system(3)}). If\n+argument @var{STATUS} is present, it contains the value returned by\n+@code{system(3)}, which is presumably 0 if the shell command succeeded.\n+Note that which shell is used to invoke the command is system-dependent\n+and environment-dependent.\n+\n @item @emph{Standard}:\n GNU extension\n \n @item @emph{Class}:\n Subroutine\n \n @item @emph{Syntax}:\n+@code{CALL SYSTEM(COMMAND [, STATUS])}\n+\n @item @emph{Arguments}:\n-@item @emph{Return value}:\n-@item @emph{Example}:\n+@multitable @columnfractions .15 .80\n+@item @var{COMMAND} @tab Shall be of default @code{CHARACTER} type.\n+@item @var{STATUS}  @tab (Optional) Shall be of default @code{INTEGER} type.\n+@end multitable\n+\n @item @emph{See also}:\n @end table\n \n \n \n-\n @node SYSTEM_CLOCK\n @section @code{SYSTEM_CLOCK} --- Time function\n @cindex @code{SYSTEM_CLOCK} intrinsic\n@@ -8242,21 +8597,76 @@ end program test_tanh\n @cindex time, current\n @cindex current time\n \n-Intrinsic implemented, documentation pending.\n+@table @asis\n+@item @emph{Description}:\n+Returns the current time encoded as an integer (in the manner of the\n+UNIX function @code{time(3)}). This value is suitable for passing to\n+@code{CTIME()}, @code{GMTIME()}, and @code{LTIME()}.\n+\n+This intrinsic is not fully portable, such as to systems with 32-bit\n+@code{INTEGER} types but supporting times wider than 32 bits. Therefore,\n+the values returned by this intrinsic might be, or become, negative, or\n+numerically less than previous values, during a single run of the\n+compiled program.\n+\n+See @ref{TIME8}, for information on a similar intrinsic that might be\n+portable to more GNU Fortran implementations, though to fewer Fortran\n+compilers.\n+\n+@item @emph{Standard}:\n+GNU extension\n+\n+@item @emph{Class}:\n+Non-elemental function\n+\n+@item @emph{Syntax}:\n+@code{RESULT = TIME()}\n+\n+@item @emph{Return value}:\n+The return value is a scalar of type @code{INTEGER(4)}.\n+\n+@item @emph{See also}:\n+@ref{CTIME}, @ref{GMTIME}, @ref{LTIME}, @ref{TIME8}\n+\n+@end table\n+\n+\n+\n+@node TIME8\n+@section @code{TIME8} --- Time function (64-bit)\n+@cindex @code{TIME8} intrinsic\n+@cindex time, current\n+@cindex current time\n \n @table @asis\n @item @emph{Description}:\n+Returns the current time encoded as an integer (in the manner of the\n+UNIX function @code{time(3)}). This value is suitable for passing to\n+@code{CTIME()}, @code{GMTIME()}, and @code{LTIME()}.\n+\n+@emph{Warning:} this intrinsic does not increase the range of the timing\n+values over that returned by @code{time(3)}. On a system with a 32-bit\n+@code{time(3)}, @code{TIME8()} will return a 32-bit value, even though\n+it is converted to a 64-bit @code{INTEGER(8)} value. That means\n+overflows of the 32-bit value can still occur. Therefore, the values\n+returned by this intrinsic might be or become negative or numerically\n+less than previous values during a single run of the compiled program.\n+\n @item @emph{Standard}:\n GNU extension\n \n @item @emph{Class}:\n Non-elemental function\n \n @item @emph{Syntax}:\n-@item @emph{Arguments}:\n+@code{RESULT = TIME8()}\n+\n @item @emph{Return value}:\n-@item @emph{Example}:\n+The return value is a scalar of type @code{INTEGER(8)}.\n+\n @item @emph{See also}:\n+@ref{CTIME}, @ref{GMTIME}, @ref{LTIME}, @ref{TIME}\n+\n @end table\n \n \n@@ -8318,7 +8728,6 @@ Transformational function\n \n \n \n-\n @node TRANSPOSE\n @section @code{TRANSPOSE} --- Transpose an array of rank two\n @cindex @code{TRANSPOSE} intrinsic\n@@ -8343,7 +8752,6 @@ Transformational function\n \n \n \n-\n @node TRIM\n @section @code{TRIM} --- Function to remove trailing blank characters of a string\n @cindex @code{TRIM} intrinsic\n@@ -8442,7 +8850,7 @@ Unlinks the file @var{PATH}. A null character (@code{CHAR(0)}) can be\n used to mark the end of the name in @var{PATH}; otherwise, trailing\n blanks in the file name are ignored.  If the @var{STATUS} argument is\n supplied, it contains 0 on success or a nonzero error code upon return;\n-see @code{link(2)}.\n+see @code{unlink(2)}.\n \n @item @emph{Standard}:\n GNU extension\n@@ -8460,33 +8868,11 @@ Subroutine\n @end multitable\n \n @item @emph{See also}:\n-@ref{LINK}\n-@end table\n-\n-\n-\n-@node UNMASK\n-@section @code{UNMASK} --- (?)\n-@cindex @code{UNMASK} intrinsic\n-@cindex undocumented intrinsic \n-\n-Intrinsic implemented, documentation pending.\n-\n-@table @asis\n-@item @emph{Description}:\n-@item @emph{Standard}:\n-@item @emph{Class}:\n-@item @emph{Syntax}:\n-@item @emph{Arguments}:\n-@item @emph{Return value}:\n-@item @emph{Example}:\n-@item @emph{Specific names}:\n-@item @emph{See also}:\n+@ref{LINK}, @ref{SYMLNK}\n @end table\n \n \n \n-\n @node UNPACK\n @section @code{UNPACK} --- Unpack an array of rank one into an array\n @cindex @code{UNPACK} intrinsic\n@@ -8513,7 +8899,6 @@ Transformational function\n \n \n \n-\n @node VERIFY\n @section @code{VERIFY} --- Scan a string for the absence of a set of characters\n @cindex @code{VERIFY} intrinsic\n@@ -8538,6 +8923,7 @@ Elemental function\n @end table\n \n \n+\n @node XOR\n @section @code{XOR} --- Bitwise logical exclusive OR\n @cindex @code{XOR} intrinsic"}]}