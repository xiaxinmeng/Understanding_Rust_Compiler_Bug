{"sha": "b6c3aea1892c148c21f8b87668f344b2397f4aa5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjZjM2FlYTE4OTJjMTQ4YzIxZjhiODc2NjhmMzQ0YjIzOTdmNGFhNQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-08-15T08:22:07Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-08-15T08:22:07Z"}, "message": "[AArch64] Use SVE MLA, MLS, MAD and MSB for conditional arithmetic\n\nThis patch uses predicated MLA, MLS, MAD and MSB to implement\nconditional \"FMA\"s on integers.  This also requires providing\nthe unpredicated optabs (fma and fnma) since otherwise\ntree-ssa-math-opts.c won't try to use the conditional forms.\n\nWe still want to use shifts and adds in preference to multiplications,\nso the patch makes the optab expanders check for that.\n\nThe tests cover floating-point types too, which are already handled,\nand which were already tested to some extent by gcc.dg/vect.\n\n2019-08-15  Richard Sandiford  <richard.sandiford@arm.com>\n\t    Kugan Vivekanandarajah  <kugan.vivekanandarajah@linaro.org>\n\ngcc/\n\t* config/aarch64/aarch64-protos.h (aarch64_prepare_sve_int_fma)\n\t(aarch64_prepare_sve_cond_int_fma): Declare.\n\t* config/aarch64/aarch64.c (aarch64_convert_mult_to_shift)\n\t(aarch64_prepare_sve_int_fma): New functions.\n\t(aarch64_prepare_sve_cond_int_fma): Likewise.\n\t* config/aarch64/aarch64-sve.md\n\t(cond_<SVE_INT_BINARY:optab><SVE_I:mode>): Add a \"@\" marker.\n\t(fma<SVE_I:mode>4, cond_fma<SVE_I:mode>, *cond_fma<SVE_I:mode>_2)\n\t(*cond_fma<SVE_I:mode>_4, *cond_fma<SVE_I:mode>_any, fnma<SVE_I:mode>4)\n\t(cond_fnma<SVE_I:mode>, *cond_fnma<SVE_I:mode>_2)\n\t(*cond_fnma<SVE_I:mode>_4, *cond_fnma<SVE_I:mode>_any): New patterns.\n\t(*madd<mode>): Rename to...\n\t(*fma<mode>4): ...this.\n\t(*msub<mode>): Rename to...\n\t(*fnma<mode>4): ...this.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/sve/cond_mla_1.c: New test.\n\t* gcc.target/aarch64/sve/cond_mla_1_run.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_mla_2.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_mla_2_run.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_mla_3.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_mla_3_run.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_mla_4.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_mla_4_run.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_mla_5.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_mla_5_run.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_mla_6.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_mla_6_run.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_mla_7.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_mla_7_run.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_mla_8.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_mla_8_run.c: Likewise.\n\nCo-Authored-By: Kugan Vivekanandarajah <kuganv@linaro.org>\n\nFrom-SVN: r274509", "tree": {"sha": "ce3dcc012c010a984c7d56a052e556408229b0ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ce3dcc012c010a984c7d56a052e556408229b0ba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b6c3aea1892c148c21f8b87668f344b2397f4aa5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6c3aea1892c148c21f8b87668f344b2397f4aa5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6c3aea1892c148c21f8b87668f344b2397f4aa5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6c3aea1892c148c21f8b87668f344b2397f4aa5/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a19ba9e1b15d248e5a13ee773f4acd4ae29fdeaa"}], "stats": {"total": 1085, "additions": 1082, "deletions": 3}, "files": [{"sha": "66631f6b37c141608362e9ab52122f524aa8aec7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6c3aea1892c148c21f8b87668f344b2397f4aa5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6c3aea1892c148c21f8b87668f344b2397f4aa5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b6c3aea1892c148c21f8b87668f344b2397f4aa5", "patch": "@@ -1,3 +1,22 @@\n+2019-08-15  Richard Sandiford  <richard.sandiford@arm.com>\n+\t    Kugan Vivekanandarajah  <kugan.vivekanandarajah@linaro.org>\n+\n+\t* config/aarch64/aarch64-protos.h (aarch64_prepare_sve_int_fma)\n+\t(aarch64_prepare_sve_cond_int_fma): Declare.\n+\t* config/aarch64/aarch64.c (aarch64_convert_mult_to_shift)\n+\t(aarch64_prepare_sve_int_fma): New functions.\n+\t(aarch64_prepare_sve_cond_int_fma): Likewise.\n+\t* config/aarch64/aarch64-sve.md\n+\t(cond_<SVE_INT_BINARY:optab><SVE_I:mode>): Add a \"@\" marker.\n+\t(fma<SVE_I:mode>4, cond_fma<SVE_I:mode>, *cond_fma<SVE_I:mode>_2)\n+\t(*cond_fma<SVE_I:mode>_4, *cond_fma<SVE_I:mode>_any, fnma<SVE_I:mode>4)\n+\t(cond_fnma<SVE_I:mode>, *cond_fnma<SVE_I:mode>_2)\n+\t(*cond_fnma<SVE_I:mode>_4, *cond_fnma<SVE_I:mode>_any): New patterns.\n+\t(*madd<mode>): Rename to...\n+\t(*fma<mode>4): ...this.\n+\t(*msub<mode>): Rename to...\n+\t(*fnma<mode>4): ...this.\n+\n 2019-08-15  Richard Sandiford  <richard.sandiford@arm.com>\n \t    Kugan Vivekanandarajah  <kugan.vivekanandarajah@linaro.org>\n "}, {"sha": "24e724004f833e16ba2e3dc4f06bba1069cf8f98", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6c3aea1892c148c21f8b87668f344b2397f4aa5/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6c3aea1892c148c21f8b87668f344b2397f4aa5/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=b6c3aea1892c148c21f8b87668f344b2397f4aa5", "patch": "@@ -630,6 +630,9 @@ bool aarch64_gen_adjusted_ldpstp (rtx *, bool, scalar_mode, RTX_CODE);\n void aarch64_expand_sve_vec_cmp_int (rtx, rtx_code, rtx, rtx);\n bool aarch64_expand_sve_vec_cmp_float (rtx, rtx_code, rtx, rtx, bool);\n void aarch64_expand_sve_vcond (machine_mode, machine_mode, rtx *);\n+\n+bool aarch64_prepare_sve_int_fma (rtx *, rtx_code);\n+bool aarch64_prepare_sve_cond_int_fma (rtx *, rtx_code);\n #endif /* RTX_CODE */\n \n void aarch64_init_builtins (void);"}, {"sha": "93f55360d69652e1ca434682e92440c014ce84fe", "filename": "gcc/config/aarch64/aarch64-sve.md", "status": "modified", "additions": 222, "deletions": 3, "changes": 225, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6c3aea1892c148c21f8b87668f344b2397f4aa5/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6c3aea1892c148c21f8b87668f344b2397f4aa5/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md?ref=b6c3aea1892c148c21f8b87668f344b2397f4aa5", "patch": "@@ -1844,7 +1844,7 @@\n )\n \n ;; Predicated integer operations with merging.\n-(define_expand \"cond_<optab><mode>\"\n+(define_expand \"@cond_<optab><mode>\"\n   [(set (match_operand:SVE_I 0 \"register_operand\")\n \t(unspec:SVE_I\n \t  [(match_operand:<VPRED> 1 \"register_operand\")\n@@ -3384,8 +3384,26 @@\n ;; - MLA\n ;; -------------------------------------------------------------------------\n \n+;; Unpredicated integer addition of product.\n+(define_expand \"fma<mode>4\"\n+  [(set (match_operand:SVE_I 0 \"register_operand\")\n+\t(plus:SVE_I\n+\t  (unspec:SVE_I\n+\t    [(match_dup 4)\n+\t     (mult:SVE_I (match_operand:SVE_I 1 \"register_operand\")\n+\t\t\t (match_operand:SVE_I 2 \"nonmemory_operand\"))]\n+\t    UNSPEC_PRED_X)\n+\t  (match_operand:SVE_I 3 \"register_operand\")))]\n+  \"TARGET_SVE\"\n+  {\n+    if (aarch64_prepare_sve_int_fma (operands, PLUS))\n+      DONE;\n+    operands[4] = aarch64_ptrue_reg (<VPRED>mode);\n+  }\n+)\n+\n ;; Predicated integer addition of product.\n-(define_insn \"*madd<mode>\"\n+(define_insn \"*fma<mode>4\"\n   [(set (match_operand:SVE_I 0 \"register_operand\" \"=w, w, ?&w\")\n \t(plus:SVE_I\n \t  (unspec:SVE_I\n@@ -3402,6 +3420,97 @@\n   [(set_attr \"movprfx\" \"*,*,yes\")]\n )\n \n+;; Predicated integer addition of product with merging.\n+(define_expand \"cond_fma<mode>\"\n+  [(set (match_operand:SVE_I 0 \"register_operand\")\n+\t(unspec:SVE_I\n+\t  [(match_operand:<VPRED> 1 \"register_operand\")\n+\t   (plus:SVE_I\n+\t     (mult:SVE_I (match_operand:SVE_I 2 \"register_operand\")\n+\t\t\t (match_operand:SVE_I 3 \"general_operand\"))\n+\t     (match_operand:SVE_I 4 \"register_operand\"))\n+\t   (match_operand:SVE_I 5 \"aarch64_simd_reg_or_zero\")]\n+\t  UNSPEC_SEL))]\n+  \"TARGET_SVE\"\n+  {\n+    if (aarch64_prepare_sve_cond_int_fma (operands, PLUS))\n+      DONE;\n+    /* Swap the multiplication operands if the fallback value is the\n+       second of the two.  */\n+    if (rtx_equal_p (operands[3], operands[5]))\n+      std::swap (operands[2], operands[3]);\n+  }\n+)\n+\n+;; Predicated integer addition of product, merging with the first input.\n+(define_insn \"*cond_fma<mode>_2\"\n+  [(set (match_operand:SVE_I 0 \"register_operand\" \"=w, ?&w\")\n+\t(unspec:SVE_I\n+\t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl\")\n+\t   (plus:SVE_I\n+\t     (mult:SVE_I (match_operand:SVE_I 2 \"register_operand\" \"0, w\")\n+\t\t\t (match_operand:SVE_I 3 \"register_operand\" \"w, w\"))\n+\t     (match_operand:SVE_I 4 \"register_operand\" \"w, w\"))\n+\t   (match_dup 2)]\n+\t  UNSPEC_SEL))]\n+  \"TARGET_SVE\"\n+  \"@\n+   mad\\t%0.<Vetype>, %1/m, %3.<Vetype>, %4.<Vetype>\n+   movprfx\\t%0, %2\\;mad\\t%0.<Vetype>, %1/m, %3.<Vetype>, %4.<Vetype>\"\n+  [(set_attr \"movprfx\" \"*,yes\")]\n+)\n+\n+;; Predicated integer addition of product, merging with the third input.\n+(define_insn \"*cond_fma<mode>_4\"\n+  [(set (match_operand:SVE_I 0 \"register_operand\" \"=w, ?&w\")\n+\t(unspec:SVE_I\n+\t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl\")\n+\t   (plus:SVE_I\n+\t     (mult:SVE_I (match_operand:SVE_I 2 \"register_operand\" \"w, w\")\n+\t\t\t (match_operand:SVE_I 3 \"register_operand\" \"w, w\"))\n+\t     (match_operand:SVE_I 4 \"register_operand\" \"0, w\"))\n+\t   (match_dup 4)]\n+\t  UNSPEC_SEL))]\n+  \"TARGET_SVE\"\n+  \"@\n+   mla\\t%0.<Vetype>, %1/m, %2.<Vetype>, %3.<Vetype>\n+   movprfx\\t%0, %4\\;mla\\t%0.<Vetype>, %1/m, %2.<Vetype>, %3.<Vetype>\"\n+  [(set_attr \"movprfx\" \"*,yes\")]\n+)\n+\n+;; Predicated integer addition of product, merging with an independent value.\n+(define_insn_and_rewrite \"*cond_fma<mode>_any\"\n+  [(set (match_operand:SVE_I 0 \"register_operand\" \"=&w, &w, &w, &w, &w, ?&w\")\n+\t(unspec:SVE_I\n+\t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl, Upl, Upl, Upl, Upl\")\n+\t   (plus:SVE_I\n+\t     (mult:SVE_I (match_operand:SVE_I 2 \"register_operand\" \"w, w, 0, w, w, w\")\n+\t\t\t (match_operand:SVE_I 3 \"register_operand\" \"w, w, w, 0, w, w\"))\n+\t     (match_operand:SVE_I 4 \"register_operand\" \"w, 0, w, w, w, w\"))\n+\t   (match_operand:SVE_I 5 \"aarch64_simd_reg_or_zero\" \"Dz, Dz, Dz, Dz, 0, w\")]\n+\t  UNSPEC_SEL))]\n+  \"TARGET_SVE\n+   && !rtx_equal_p (operands[2], operands[5])\n+   && !rtx_equal_p (operands[3], operands[5])\n+   && !rtx_equal_p (operands[4], operands[5])\"\n+  \"@\n+   movprfx\\t%0.<Vetype>, %1/z, %4.<Vetype>\\;mla\\t%0.<Vetype>, %1/m, %2.<Vetype>, %3.<Vetype>\n+   movprfx\\t%0.<Vetype>, %1/z, %0.<Vetype>\\;mla\\t%0.<Vetype>, %1/m, %2.<Vetype>, %3.<Vetype>\n+   movprfx\\t%0.<Vetype>, %1/z, %0.<Vetype>\\;mad\\t%0.<Vetype>, %1/m, %3.<Vetype>, %4.<Vetype>\n+   movprfx\\t%0.<Vetype>, %1/z, %0.<Vetype>\\;mad\\t%0.<Vetype>, %1/m, %2.<Vetype>, %4.<Vetype>\n+   movprfx\\t%0.<Vetype>, %1/m, %4.<Vetype>\\;mla\\t%0.<Vetype>, %1/m, %2.<Vetype>, %3.<Vetype>\n+   #\"\n+  \"&& reload_completed\n+   && register_operand (operands[5], <MODE>mode)\n+   && !rtx_equal_p (operands[0], operands[5])\"\n+  {\n+    emit_insn (gen_vcond_mask_<mode><vpred> (operands[0], operands[4],\n+\t\t\t\t\t     operands[5], operands[1]));\n+    operands[5] = operands[4] = operands[0];\n+  }\n+  [(set_attr \"movprfx\" \"yes\")]\n+)\n+\n ;; -------------------------------------------------------------------------\n ;; ---- [INT] MLS and MSB\n ;; -------------------------------------------------------------------------\n@@ -3410,8 +3519,26 @@\n ;; - MSB\n ;; -------------------------------------------------------------------------\n \n+;; Unpredicated integer subtraction of product.\n+(define_expand \"fnma<mode>4\"\n+  [(set (match_operand:SVE_I 0 \"register_operand\")\n+\t(minus:SVE_I\n+\t  (match_operand:SVE_I 3 \"register_operand\")\n+\t  (unspec:SVE_I\n+\t    [(match_dup 4)\n+\t     (mult:SVE_I (match_operand:SVE_I 1 \"register_operand\")\n+\t\t\t (match_operand:SVE_I 2 \"general_operand\"))]\n+\t    UNSPEC_PRED_X)))]\n+  \"TARGET_SVE\"\n+  {\n+    if (aarch64_prepare_sve_int_fma (operands, MINUS))\n+      DONE;\n+    operands[4] = aarch64_ptrue_reg (<VPRED>mode);\n+  }\n+)\n+\n ;; Predicated integer subtraction of product.\n-(define_insn \"*msub<mode>3\"\n+(define_insn \"*fnma<mode>3\"\n   [(set (match_operand:SVE_I 0 \"register_operand\" \"=w, w, ?&w\")\n \t(minus:SVE_I\n \t  (match_operand:SVE_I 4 \"register_operand\" \"w, 0, w\")\n@@ -3428,6 +3555,98 @@\n   [(set_attr \"movprfx\" \"*,*,yes\")]\n )\n \n+;; Predicated integer subtraction of product with merging.\n+(define_expand \"cond_fnma<mode>\"\n+  [(set (match_operand:SVE_I 0 \"register_operand\")\n+   (unspec:SVE_I\n+\t[(match_operand:<VPRED> 1 \"register_operand\")\n+\t (minus:SVE_I\n+\t   (match_operand:SVE_I 4 \"register_operand\")\n+\t   (mult:SVE_I (match_operand:SVE_I 2 \"register_operand\")\n+\t\t       (match_operand:SVE_I 3 \"general_operand\")))\n+\t (match_operand:SVE_I 5 \"aarch64_simd_reg_or_zero\")]\n+\tUNSPEC_SEL))]\n+  \"TARGET_SVE\"\n+  {\n+    if (aarch64_prepare_sve_cond_int_fma (operands, MINUS))\n+      DONE;\n+    /* Swap the multiplication operands if the fallback value is the\n+       second of the two.  */\n+    if (rtx_equal_p (operands[3], operands[5]))\n+      std::swap (operands[2], operands[3]);\n+  }\n+)\n+\n+;; Predicated integer subtraction of product, merging with the first input.\n+(define_insn \"*cond_fnma<mode>_2\"\n+  [(set (match_operand:SVE_I 0 \"register_operand\" \"=w, ?&w\")\n+\t(unspec:SVE_I\n+\t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl\")\n+\t   (minus:SVE_I\n+\t     (match_operand:SVE_I 4 \"register_operand\" \"w, w\")\n+\t     (mult:SVE_I (match_operand:SVE_I 2 \"register_operand\" \"0, w\")\n+\t\t\t (match_operand:SVE_I 3 \"register_operand\" \"w, w\")))\n+\t   (match_dup 2)]\n+\t  UNSPEC_SEL))]\n+  \"TARGET_SVE\"\n+  \"@\n+   msb\\t%0.<Vetype>, %1/m, %3.<Vetype>, %4.<Vetype>\n+   movprfx\\t%0, %2\\;msb\\t%0.<Vetype>, %1/m, %3.<Vetype>, %4.<Vetype>\"\n+  [(set_attr \"movprfx\" \"*,yes\")]\n+)\n+\n+;; Predicated integer subtraction of product, merging with the third input.\n+(define_insn \"*cond_fnma<mode>_4\"\n+  [(set (match_operand:SVE_I 0 \"register_operand\" \"=w, ?&w\")\n+\t(unspec:SVE_I\n+\t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl\")\n+\t   (minus:SVE_I\n+\t     (match_operand:SVE_I 4 \"register_operand\" \"0, w\")\n+\t     (mult:SVE_I (match_operand:SVE_I 2 \"register_operand\" \"w, w\")\n+\t\t\t (match_operand:SVE_I 3 \"register_operand\" \"w, w\")))\n+\t   (match_dup 4)]\n+\t  UNSPEC_SEL))]\n+  \"TARGET_SVE\"\n+  \"@\n+   mls\\t%0.<Vetype>, %1/m, %2.<Vetype>, %3.<Vetype>\n+   movprfx\\t%0, %4\\;mls\\t%0.<Vetype>, %1/m, %2.<Vetype>, %3.<Vetype>\"\n+  [(set_attr \"movprfx\" \"*,yes\")]\n+)\n+\n+;; Predicated integer subtraction of product, merging with an\n+;; independent value.\n+(define_insn_and_rewrite \"*cond_fnma<mode>_any\"\n+  [(set (match_operand:SVE_I 0 \"register_operand\" \"=&w, &w, &w, &w, &w, ?&w\")\n+\t(unspec:SVE_I\n+\t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl, Upl, Upl, Upl, Upl\")\n+\t   (minus:SVE_I\n+\t     (match_operand:SVE_I 4 \"register_operand\" \"w, 0, w, w, w, w\")\n+\t     (mult:SVE_I (match_operand:SVE_I 2 \"register_operand\" \"w, w, 0, w, w, w\")\n+\t\t\t (match_operand:SVE_I 3 \"register_operand\" \"w, w, w, 0, w, w\")))\n+\t   (match_operand:SVE_I 5 \"aarch64_simd_reg_or_zero\" \"Dz, Dz, Dz, Dz, 0, w\")]\n+\t  UNSPEC_SEL))]\n+  \"TARGET_SVE\n+   && !rtx_equal_p (operands[2], operands[5])\n+   && !rtx_equal_p (operands[3], operands[5])\n+   && !rtx_equal_p (operands[4], operands[5])\"\n+  \"@\n+   movprfx\\t%0.<Vetype>, %1/z, %4.<Vetype>\\;mls\\t%0.<Vetype>, %1/m, %2.<Vetype>, %3.<Vetype>\n+   movprfx\\t%0.<Vetype>, %1/z, %0.<Vetype>\\;mls\\t%0.<Vetype>, %1/m, %2.<Vetype>, %3.<Vetype>\n+   movprfx\\t%0.<Vetype>, %1/z, %0.<Vetype>\\;msb\\t%0.<Vetype>, %1/m, %3.<Vetype>, %4.<Vetype>\n+   movprfx\\t%0.<Vetype>, %1/z, %0.<Vetype>\\;msb\\t%0.<Vetype>, %1/m, %2.<Vetype>, %4.<Vetype>\n+   movprfx\\t%0.<Vetype>, %1/m, %4.<Vetype>\\;mls\\t%0.<Vetype>, %1/m, %2.<Vetype>, %3.<Vetype>\n+   #\"\n+  \"&& reload_completed\n+   && register_operand (operands[5], <MODE>mode)\n+   && !rtx_equal_p (operands[0], operands[5])\"\n+  {\n+    emit_insn (gen_vcond_mask_<mode><vpred> (operands[0], operands[4],\n+\t\t\t\t\t     operands[5], operands[1]));\n+    operands[5] = operands[4] = operands[0];\n+  }\n+  [(set_attr \"movprfx\" \"yes\")]\n+)\n+\n ;; -------------------------------------------------------------------------\n ;; ---- [INT] Dot product\n ;; -------------------------------------------------------------------------"}, {"sha": "ec787727aa69290ea6202999b99b8658cfdb9f2f", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6c3aea1892c148c21f8b87668f344b2397f4aa5/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6c3aea1892c148c21f8b87668f344b2397f4aa5/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=b6c3aea1892c148c21f8b87668f344b2397f4aa5", "patch": "@@ -16469,6 +16469,98 @@ aarch64_sve_expand_vector_init (rtx target, rtx vals)\n     aarch64_sve_expand_vector_init_insert_elems (target, v, nelts);\n }\n \n+/* Check whether VALUE is a vector constant in which every element\n+   is either a power of 2 or a negated power of 2.  If so, return\n+   a constant vector of log2s, and flip CODE between PLUS and MINUS\n+   if VALUE contains negated powers of 2.  Return NULL_RTX otherwise.  */\n+\n+static rtx\n+aarch64_convert_mult_to_shift (rtx value, rtx_code &code)\n+{\n+  if (GET_CODE (value) != CONST_VECTOR)\n+    return NULL_RTX;\n+\n+  rtx_vector_builder builder;\n+  if (!builder.new_unary_operation (GET_MODE (value), value, false))\n+    return NULL_RTX;\n+\n+  scalar_mode int_mode = GET_MODE_INNER (GET_MODE (value));\n+  /* 1 if the result of the multiplication must be negated,\n+     0 if it mustn't, or -1 if we don't yet care.  */\n+  int negate = -1;\n+  unsigned int encoded_nelts = const_vector_encoded_nelts (value);\n+  for (unsigned int i = 0; i < encoded_nelts; ++i)\n+    {\n+      rtx elt = CONST_VECTOR_ENCODED_ELT (value, i);\n+      if (!CONST_SCALAR_INT_P (elt))\n+\treturn NULL_RTX;\n+      rtx_mode_t val (elt, int_mode);\n+      wide_int pow2 = wi::neg (val);\n+      if (val != pow2)\n+\t{\n+\t  /* It matters whether we negate or not.  Make that choice,\n+\t     and make sure that it's consistent with previous elements.  */\n+\t  if (negate == !wi::neg_p (val))\n+\t    return NULL_RTX;\n+\t  negate = wi::neg_p (val);\n+\t  if (!negate)\n+\t    pow2 = val;\n+\t}\n+      /* POW2 is now the value that we want to be a power of 2.  */\n+      int shift = wi::exact_log2 (pow2);\n+      if (shift < 0)\n+\treturn NULL_RTX;\n+      builder.quick_push (gen_int_mode (shift, int_mode));\n+    }\n+  if (negate == -1)\n+    /* PLUS and MINUS are equivalent; canonicalize on PLUS.  */\n+    code = PLUS;\n+  else if (negate == 1)\n+    code = code == PLUS ? MINUS : PLUS;\n+  return builder.build ();\n+}\n+\n+/* Prepare for an integer SVE multiply-add or multiply-subtract pattern;\n+   CODE is PLUS for the former and MINUS for the latter.  OPERANDS is the\n+   operands array, in the same order as for fma_optab.  Return true if\n+   the function emitted all the necessary instructions, false if the caller\n+   should generate the pattern normally with the new OPERANDS array.  */\n+\n+bool\n+aarch64_prepare_sve_int_fma (rtx *operands, rtx_code code)\n+{\n+  machine_mode mode = GET_MODE (operands[0]);\n+  if (rtx shifts = aarch64_convert_mult_to_shift (operands[2], code))\n+    {\n+      rtx product = expand_binop (mode, vashl_optab, operands[1], shifts,\n+\t\t\t\t  NULL_RTX, true, OPTAB_DIRECT);\n+      force_expand_binop (mode, code == PLUS ? add_optab : sub_optab,\n+\t\t\t  operands[3], product, operands[0], true,\n+\t\t\t  OPTAB_DIRECT);\n+      return true;\n+    }\n+  operands[2] = force_reg (mode, operands[2]);\n+  return false;\n+}\n+\n+/* Likewise, but for a conditional pattern.  */\n+\n+bool\n+aarch64_prepare_sve_cond_int_fma (rtx *operands, rtx_code code)\n+{\n+  machine_mode mode = GET_MODE (operands[0]);\n+  if (rtx shifts = aarch64_convert_mult_to_shift (operands[3], code))\n+    {\n+      rtx product = expand_binop (mode, vashl_optab, operands[2], shifts,\n+\t\t\t\t  NULL_RTX, true, OPTAB_DIRECT);\n+      emit_insn (gen_cond (code, mode, operands[0], operands[1],\n+\t\t\t   operands[4], product, operands[5]));\n+      return true;\n+    }\n+  operands[3] = force_reg (mode, operands[3]);\n+  return false;\n+}\n+\n static unsigned HOST_WIDE_INT\n aarch64_shift_truncation_mask (machine_mode mode)\n {"}, {"sha": "63596d8497e4b5da42de8cca81190d3de8352135", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6c3aea1892c148c21f8b87668f344b2397f4aa5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6c3aea1892c148c21f8b87668f344b2397f4aa5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b6c3aea1892c148c21f8b87668f344b2397f4aa5", "patch": "@@ -1,3 +1,23 @@\n+2019-08-15  Richard Sandiford  <richard.sandiford@arm.com>\n+\t    Kugan Vivekanandarajah  <kugan.vivekanandarajah@linaro.org>\n+\n+\t* gcc.target/aarch64/sve/cond_mla_1.c: New test.\n+\t* gcc.target/aarch64/sve/cond_mla_1_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_mla_2.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_mla_2_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_mla_3.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_mla_3_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_mla_4.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_mla_4_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_mla_5.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_mla_5_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_mla_6.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_mla_6_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_mla_7.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_mla_7_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_mla_8.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_mla_8_run.c: Likewise.\n+\n 2019-08-15  Richard Sandiford  <richard.sandiford@arm.com>\n \t    Kugan Vivekanandarajah  <kugan.vivekanandarajah@linaro.org>\n "}, {"sha": "cb01d50f3a59ebeaeee6849e754e454945b9ce0a", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_mla_1.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6c3aea1892c148c21f8b87668f344b2397f4aa5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_mla_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6c3aea1892c148c21f8b87668f344b2397f4aa5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_mla_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_mla_1.c?ref=b6c3aea1892c148c21f8b87668f344b2397f4aa5", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include <stdint.h>\n+\n+#define DEF_LOOP(TYPE, NAME, OP)\t\t\t\\\n+  void __attribute__ ((noipa))\t\t\t\t\\\n+  test_##TYPE##_##NAME (TYPE *__restrict r,\t\t\\\n+\t\t\tTYPE *__restrict a,\t\t\\\n+\t\t\tTYPE *__restrict b, TYPE c,\t\\\n+\t\t\tTYPE *__restrict pred, int n)\t\\\n+  {\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < n; ++i)\t\t\t\t\\\n+      r[i] = pred[i] != 1 ? a[i] OP b[i] * c : b[i];\t\\\n+  }\n+\n+#define TEST_TYPE(T, TYPE) \\\n+  T (TYPE, add, +) \\\n+  T (TYPE, sub, -)\n+\n+#define TEST_ALL(T) \\\n+  TEST_TYPE (T, uint8_t) \\\n+  TEST_TYPE (T, uint16_t) \\\n+  TEST_TYPE (T, uint32_t) \\\n+  TEST_TYPE (T, uint64_t) \\\n+  TEST_TYPE (T, _Float16) \\\n+  TEST_TYPE (T, float) \\\n+  TEST_TYPE (T, double)\n+\n+TEST_ALL (DEF_LOOP)\n+\n+/* { dg-final { scan-assembler-times {\\tmad\\tz[0-9]+\\.b, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tmad\\tz[0-9]+\\.h, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tmad\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tmad\\tz[0-9]+\\.d, p[0-7]/m,} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tmsb\\tz[0-9]+\\.b, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tmsb\\tz[0-9]+\\.h, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tmsb\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tmsb\\tz[0-9]+\\.d, p[0-7]/m,} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfmad\\tz[0-9]+\\.h, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmad\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmad\\tz[0-9]+\\.d, p[0-7]/m,} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfmsb\\tz[0-9]+\\.h, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmsb\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmsb\\tz[0-9]+\\.d, p[0-7]/m,} 1 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tmov\\tz[^,]*z} } } */\n+/* { dg-final { scan-assembler-not {\\tmovprfx\\t} } } */\n+/* { dg-final { scan-assembler-not {\\tsel\\t} } } */"}, {"sha": "bcfc62280660cb794e01d722453f981f443f9fec", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_mla_1_run.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6c3aea1892c148c21f8b87668f344b2397f4aa5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_mla_1_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6c3aea1892c148c21f8b87668f344b2397f4aa5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_mla_1_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_mla_1_run.c?ref=b6c3aea1892c148c21f8b87668f344b2397f4aa5", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"cond_mla_1.c\"\n+\n+#define FACTOR 17\n+#define N 99\n+\n+#define TEST_LOOP(TYPE, NAME, OP)\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    TYPE r[N], a[N], b[N], pred[N];\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\ta[i] = (i & 1 ? i : 3 * i);\t\t\t\t\\\n+\tb[i] = (i >> 4) << (i & 15);\t\t\t\t\\\n+\tpred[i] = i % 3 < i % 5;\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    test_##TYPE##_##NAME (r, a, b, FACTOR, pred, N);\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tTYPE expected\t\t\t\t\t\t\\\n+\t  = pred[i] != 1 ? a[i] OP b[i] * (TYPE) FACTOR : b[i];\t\\\n+\tif (r[i] != expected)\t\t\t\t\t\\\n+\t  __builtin_abort ();\t\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+  }\n+\n+int\n+main (void)\n+{\n+  TEST_ALL (TEST_LOOP)\n+  return 0;\n+}"}, {"sha": "b6ea1a3e21fa5752bb39fbf3141e70f8808a1c3f", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_mla_2.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6c3aea1892c148c21f8b87668f344b2397f4aa5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_mla_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6c3aea1892c148c21f8b87668f344b2397f4aa5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_mla_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_mla_2.c?ref=b6c3aea1892c148c21f8b87668f344b2397f4aa5", "patch": "@@ -0,0 +1,53 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include <stdint.h>\n+\n+#define DEF_LOOP(TYPE, NAME, OP)\t\t\t\\\n+  void __attribute__ ((noipa))\t\t\t\t\\\n+  test_##TYPE##_##NAME (TYPE *__restrict r,\t\t\\\n+\t\t\tTYPE *__restrict a,\t\t\\\n+\t\t\tTYPE *__restrict b, TYPE c,\t\\\n+\t\t\tTYPE *__restrict pred, int n)\t\\\n+  {\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < n; ++i)\t\t\t\t\\\n+      r[i] = pred[i] != 1 ? a[i] OP b[i] * c : c;\t\\\n+  }\n+\n+#define TEST_TYPE(T, TYPE) \\\n+  T (TYPE, add, +) \\\n+  T (TYPE, sub, -)\n+\n+#define TEST_ALL(T) \\\n+  TEST_TYPE (T, uint8_t) \\\n+  TEST_TYPE (T, uint16_t) \\\n+  TEST_TYPE (T, uint32_t) \\\n+  TEST_TYPE (T, uint64_t) \\\n+  TEST_TYPE (T, _Float16) \\\n+  TEST_TYPE (T, float) \\\n+  TEST_TYPE (T, double)\n+\n+TEST_ALL (DEF_LOOP)\n+\n+/* { dg-final { scan-assembler-times {\\tmad\\tz[0-9]+\\.b, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tmad\\tz[0-9]+\\.h, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tmad\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tmad\\tz[0-9]+\\.d, p[0-7]/m,} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tmsb\\tz[0-9]+\\.b, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tmsb\\tz[0-9]+\\.h, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tmsb\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tmsb\\tz[0-9]+\\.d, p[0-7]/m,} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfmad\\tz[0-9]+\\.h, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmad\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmad\\tz[0-9]+\\.d, p[0-7]/m,} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfmsb\\tz[0-9]+\\.h, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmsb\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmsb\\tz[0-9]+\\.d, p[0-7]/m,} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+, z[0-9]+\\n} 14 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tmov\\tz[^,]*z} } } */\n+/* { dg-final { scan-assembler-not {\\tsel\\t} } } */"}, {"sha": "79998b84eeac163a9075c1741605af42702fb6b4", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_mla_2_run.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6c3aea1892c148c21f8b87668f344b2397f4aa5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_mla_2_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6c3aea1892c148c21f8b87668f344b2397f4aa5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_mla_2_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_mla_2_run.c?ref=b6c3aea1892c148c21f8b87668f344b2397f4aa5", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"cond_mla_2.c\"\n+\n+#define FACTOR 17\n+#define N 99\n+\n+#define TEST_LOOP(TYPE, NAME, OP)\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    TYPE r[N], a[N], b[N], pred[N];\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\ta[i] = (i & 1 ? i : 3 * i);\t\t\t\t\\\n+\tb[i] = (i >> 4) << (i & 15);\t\t\t\t\\\n+\tpred[i] = i % 3 < i % 5;\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    test_##TYPE##_##NAME (r, a, b, FACTOR, pred, N);\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tTYPE expected = (pred[i] != 1\t\t\t\t\\\n+\t\t\t ? a[i] OP b[i] * (TYPE) FACTOR\t\t\\\n+\t\t\t : (TYPE) FACTOR);\t\t\t\\\n+\tif (r[i] != expected)\t\t\t\t\t\\\n+\t  __builtin_abort ();\t\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+  }\n+\n+int\n+main (void)\n+{\n+  TEST_ALL (TEST_LOOP)\n+  return 0;\n+}"}, {"sha": "085fccf53e2591ad29c48105eda0c47f22ae5774", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_mla_3.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6c3aea1892c148c21f8b87668f344b2397f4aa5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_mla_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6c3aea1892c148c21f8b87668f344b2397f4aa5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_mla_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_mla_3.c?ref=b6c3aea1892c148c21f8b87668f344b2397f4aa5", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include <stdint.h>\n+\n+#define DEF_LOOP(TYPE, NAME, OP)\t\t\t\\\n+  void __attribute__ ((noipa))\t\t\t\t\\\n+  test_##TYPE##_##NAME (TYPE *__restrict r,\t\t\\\n+\t\t\tTYPE *__restrict a,\t\t\\\n+\t\t\tTYPE *__restrict b, TYPE c,\t\\\n+\t\t\tTYPE *__restrict pred, int n)\t\\\n+  {\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < n; ++i)\t\t\t\t\\\n+      r[i] = pred[i] != 1 ? a[i] OP b[i] * c : a[i];\t\\\n+  }\n+\n+#define TEST_TYPE(T, TYPE) \\\n+  T (TYPE, add, +) \\\n+  T (TYPE, sub, -)\n+\n+#define TEST_ALL(T) \\\n+  TEST_TYPE (T, uint8_t) \\\n+  TEST_TYPE (T, uint16_t) \\\n+  TEST_TYPE (T, uint32_t) \\\n+  TEST_TYPE (T, uint64_t) \\\n+  TEST_TYPE (T, _Float16) \\\n+  TEST_TYPE (T, float) \\\n+  TEST_TYPE (T, double)\n+\n+TEST_ALL (DEF_LOOP)\n+\n+/* { dg-final { scan-assembler-times {\\tmla\\tz[0-9]+\\.b, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tmla\\tz[0-9]+\\.h, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tmla\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tmla\\tz[0-9]+\\.d, p[0-7]/m,} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tmls\\tz[0-9]+\\.b, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tmls\\tz[0-9]+\\.h, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tmls\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tmls\\tz[0-9]+\\.d, p[0-7]/m,} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfmla\\tz[0-9]+\\.h, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmla\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmla\\tz[0-9]+\\.d, p[0-7]/m,} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfmls\\tz[0-9]+\\.h, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmls\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmls\\tz[0-9]+\\.d, p[0-7]/m,} 1 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tmov\\tz[^,]*z} } } */\n+/* { dg-final { scan-assembler-not {\\tmovprfx\\t} } } */\n+/* { dg-final { scan-assembler-not {\\tsel\\t} } } */"}, {"sha": "cbd1185b25738117c6dfd7cfe619f2829e41bf6e", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_mla_3_run.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6c3aea1892c148c21f8b87668f344b2397f4aa5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_mla_3_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6c3aea1892c148c21f8b87668f344b2397f4aa5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_mla_3_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_mla_3_run.c?ref=b6c3aea1892c148c21f8b87668f344b2397f4aa5", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"cond_mla_3.c\"\n+\n+#define FACTOR 17\n+#define N 99\n+\n+#define TEST_LOOP(TYPE, NAME, OP)\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    TYPE r[N], a[N], b[N], pred[N];\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\ta[i] = (i & 1 ? i : 3 * i);\t\t\t\t\\\n+\tb[i] = (i >> 4) << (i & 15);\t\t\t\t\\\n+\tpred[i] = i % 3 < i % 5;\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    test_##TYPE##_##NAME (r, a, b, FACTOR, pred, N);\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tTYPE expected\t\t\t\t\t\t\\\n+\t  = pred[i] != 1 ? a[i] OP b[i] * (TYPE) FACTOR : a[i];\t\\\n+\tif (r[i] != expected)\t\t\t\t\t\\\n+\t  __builtin_abort ();\t\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+  }\n+\n+int\n+main (void)\n+{\n+  TEST_ALL (TEST_LOOP)\n+  return 0;\n+}"}, {"sha": "ed9f73e9c48e6a2dd4f58b7922cbf6acdc1f111d", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_mla_4.c", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6c3aea1892c148c21f8b87668f344b2397f4aa5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_mla_4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6c3aea1892c148c21f8b87668f344b2397f4aa5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_mla_4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_mla_4.c?ref=b6c3aea1892c148c21f8b87668f344b2397f4aa5", "patch": "@@ -0,0 +1,56 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include <stdint.h>\n+\n+#define DEF_LOOP(TYPE, NAME, OP)\t\t\t\\\n+  void __attribute__ ((noipa))\t\t\t\t\\\n+  test_##TYPE##_##NAME (TYPE *__restrict r,\t\t\\\n+\t\t\tTYPE *__restrict a,\t\t\\\n+\t\t\tTYPE *__restrict b, TYPE c,\t\\\n+\t\t\tTYPE *__restrict pred, int n)\t\\\n+  {\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < n; ++i)\t\t\t\t\\\n+      r[i] = pred[i] == 1 ? a[i] OP b[i] * c : pred[i];\t\\\n+  }\n+\n+#define TEST_TYPE(T, TYPE) \\\n+  T (TYPE, add, +) \\\n+  T (TYPE, sub, -)\n+\n+#define TEST_ALL(T) \\\n+  TEST_TYPE (T, uint8_t) \\\n+  TEST_TYPE (T, uint16_t) \\\n+  TEST_TYPE (T, uint32_t) \\\n+  TEST_TYPE (T, uint64_t) \\\n+  TEST_TYPE (T, _Float16) \\\n+  TEST_TYPE (T, float) \\\n+  TEST_TYPE (T, double)\n+\n+TEST_ALL (DEF_LOOP)\n+\n+/* { dg-final { scan-assembler-times {\\tmla\\tz[0-9]+\\.b, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tmla\\tz[0-9]+\\.h, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tmla\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tmla\\tz[0-9]+\\.d, p[0-7]/m,} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tmls\\tz[0-9]+\\.b, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tmls\\tz[0-9]+\\.h, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tmls\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tmls\\tz[0-9]+\\.d, p[0-7]/m,} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfmla\\tz[0-9]+\\.h, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmla\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmla\\tz[0-9]+\\.d, p[0-7]/m,} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfmls\\tz[0-9]+\\.h, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmls\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmls\\tz[0-9]+\\.d, p[0-7]/m,} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.b, p[0-7]/m,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.h, p[0-7]/m,} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.s, p[0-7]/m,} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.d, p[0-7]/m,} 4 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tmov\\tz[^,]*z} } } */\n+/* { dg-final { scan-assembler-not {\\tsel\\t} } } */"}, {"sha": "5e078594a1a47374c99fdf114c73d36947e55d9f", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_mla_4_run.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6c3aea1892c148c21f8b87668f344b2397f4aa5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_mla_4_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6c3aea1892c148c21f8b87668f344b2397f4aa5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_mla_4_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_mla_4_run.c?ref=b6c3aea1892c148c21f8b87668f344b2397f4aa5", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"cond_mla_4.c\"\n+\n+#define FACTOR 17\n+#define N 99\n+\n+#define TEST_LOOP(TYPE, NAME, OP)\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    TYPE r[N], a[N], b[N], pred[N];\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\ta[i] = (i & 1 ? i : 3 * i);\t\t\t\t\\\n+\tb[i] = (i >> 4) << (i & 15);\t\t\t\t\\\n+\tpred[i] = i % 3;\t\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    test_##TYPE##_##NAME (r, a, b, FACTOR, pred, N);\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tTYPE expected = (pred[i] == 1\t\t\t\t\\\n+\t\t\t ? a[i] OP b[i] * (TYPE) FACTOR\t\t\\\n+\t\t\t : pred[i]);\t\t\t\t\\\n+\tif (r[i] != expected)\t\t\t\t\t\\\n+\t  __builtin_abort ();\t\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+  }\n+\n+int\n+main (void)\n+{\n+  TEST_ALL (TEST_LOOP)\n+  return 0;\n+}"}, {"sha": "e71f2b0336ff84ced19026d8e4901e3db1cbd5f0", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_mla_5.c", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6c3aea1892c148c21f8b87668f344b2397f4aa5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_mla_5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6c3aea1892c148c21f8b87668f344b2397f4aa5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_mla_5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_mla_5.c?ref=b6c3aea1892c148c21f8b87668f344b2397f4aa5", "patch": "@@ -0,0 +1,56 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include <stdint.h>\n+\n+#define DEF_LOOP(TYPE, NAME, OP)\t\t\t\\\n+  void __attribute__ ((noipa))\t\t\t\t\\\n+  test_##TYPE##_##NAME (TYPE *__restrict r,\t\t\\\n+\t\t\tTYPE *__restrict a,\t\t\\\n+\t\t\tTYPE *__restrict b, TYPE c,\t\\\n+\t\t\tTYPE *__restrict pred, int n)\t\\\n+  {\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < n; ++i)\t\t\t\t\\\n+      r[i] = pred[i] ? a[i] OP b[i] * c : 0;\t\t\\\n+  }\n+\n+#define TEST_TYPE(T, TYPE) \\\n+  T (TYPE, add, +) \\\n+  T (TYPE, sub, -)\n+\n+#define TEST_ALL(T) \\\n+  TEST_TYPE (T, uint8_t) \\\n+  TEST_TYPE (T, uint16_t) \\\n+  TEST_TYPE (T, uint32_t) \\\n+  TEST_TYPE (T, uint64_t) \\\n+  TEST_TYPE (T, _Float16) \\\n+  TEST_TYPE (T, float) \\\n+  TEST_TYPE (T, double)\n+\n+TEST_ALL (DEF_LOOP)\n+\n+/* { dg-final { scan-assembler-times {\\t(?:mla|mad)\\tz[0-9]+\\.b, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\t(?:mla|mad)\\tz[0-9]+\\.h, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\t(?:mla|mad)\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\t(?:mla|mad)\\tz[0-9]+\\.d, p[0-7]/m,} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\t(?:mls|msb)\\tz[0-9]+\\.b, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\t(?:mls|msb)\\tz[0-9]+\\.h, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\t(?:mls|msb)\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\t(?:mls|msb)\\tz[0-9]+\\.d, p[0-7]/m,} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfmla\\tz[0-9]+\\.h, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmla\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmla\\tz[0-9]+\\.d, p[0-7]/m,} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfmls\\tz[0-9]+\\.h, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmls\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmls\\tz[0-9]+\\.d, p[0-7]/m,} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.b, p[0-7]/z,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.h, p[0-7]/z,} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.s, p[0-7]/z,} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.d, p[0-7]/z,} 4 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tmov\\tz[^,]*z} } } */\n+/* { dg-final { scan-assembler-not {\\tsel\\t} } } */"}, {"sha": "9de46e30f9a11b688657fc6f95d84fe8d1fc8673", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_mla_5_run.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6c3aea1892c148c21f8b87668f344b2397f4aa5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_mla_5_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6c3aea1892c148c21f8b87668f344b2397f4aa5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_mla_5_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_mla_5_run.c?ref=b6c3aea1892c148c21f8b87668f344b2397f4aa5", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"cond_mla_5.c\"\n+\n+#define FACTOR 17\n+#define N 99\n+\n+#define TEST_LOOP(TYPE, NAME, OP)\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    TYPE r[N], a[N], b[N], pred[N];\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\ta[i] = (i & 1 ? i : 3 * i);\t\t\t\t\\\n+\tb[i] = (i >> 4) << (i & 15);\t\t\t\t\\\n+\tpred[i] = i % 3 < i % 5;\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    test_##TYPE##_##NAME (r, a, b, FACTOR, pred, N);\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tTYPE expected\t\t\t\t\t\t\\\n+\t  = pred[i] ? a[i] OP b[i] * (TYPE) FACTOR : 0;\t\t\\\n+\tif (r[i] != expected)\t\t\t\t\t\\\n+\t  __builtin_abort ();\t\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+  }\n+\n+int\n+main (void)\n+{\n+  TEST_ALL (TEST_LOOP)\n+  return 0;\n+}"}, {"sha": "832bdb3d83c6b2ba455e4fa701c95102d5043db1", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_mla_6.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6c3aea1892c148c21f8b87668f344b2397f4aa5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_mla_6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6c3aea1892c148c21f8b87668f344b2397f4aa5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_mla_6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_mla_6.c?ref=b6c3aea1892c148c21f8b87668f344b2397f4aa5", "patch": "@@ -0,0 +1,53 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include <stdint.h>\n+\n+#define DEF_LOOP(TYPE, NAME, OP)\t\t\t\\\n+  void __attribute__ ((noipa))\t\t\t\t\\\n+  test_##TYPE##_##NAME (TYPE *__restrict r,\t\t\\\n+\t\t\tTYPE *__restrict a,\t\t\\\n+\t\t\tTYPE *__restrict b, TYPE c,\t\\\n+\t\t\tTYPE *__restrict pred, int n)\t\\\n+  {\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < n; ++i)\t\t\t\t\\\n+      r[i] = pred[i] ? a[i] OP b[i] * c : 5;\t\t\\\n+  }\n+\n+#define TEST_TYPE(T, TYPE) \\\n+  T (TYPE, add, +) \\\n+  T (TYPE, sub, -)\n+\n+#define TEST_ALL(T) \\\n+  TEST_TYPE (T, uint8_t) \\\n+  TEST_TYPE (T, uint16_t) \\\n+  TEST_TYPE (T, uint32_t) \\\n+  TEST_TYPE (T, uint64_t) \\\n+  TEST_TYPE (T, _Float16) \\\n+  TEST_TYPE (T, float) \\\n+  TEST_TYPE (T, double)\n+\n+TEST_ALL (DEF_LOOP)\n+\n+/* { dg-final { scan-assembler-times {\\tmla\\tz[0-9]+\\.b, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tmla\\tz[0-9]+\\.h, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tmla\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tmla\\tz[0-9]+\\.d, p[0-7]/m,} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tmls\\tz[0-9]+\\.b, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tmls\\tz[0-9]+\\.h, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tmls\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tmls\\tz[0-9]+\\.d, p[0-7]/m,} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfmla\\tz[0-9]+\\.h, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmla\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmla\\tz[0-9]+\\.d, p[0-7]/m,} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfmls\\tz[0-9]+\\.h, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmls\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmls\\tz[0-9]+\\.d, p[0-7]/m,} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tsel\\t} 14 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tmov\\tz[^,]*z} } } */\n+/* { dg-final { scan-assembler-not {\\tmovprfx\\t} } } */"}, {"sha": "59f57a2db139e79ecf1a3efd5801b7dcb91d9d43", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_mla_6_run.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6c3aea1892c148c21f8b87668f344b2397f4aa5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_mla_6_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6c3aea1892c148c21f8b87668f344b2397f4aa5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_mla_6_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_mla_6_run.c?ref=b6c3aea1892c148c21f8b87668f344b2397f4aa5", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"cond_mla_6.c\"\n+\n+#define FACTOR 17\n+#define N 99\n+\n+#define TEST_LOOP(TYPE, NAME, OP)\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    TYPE r[N], a[N], b[N], pred[N];\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\ta[i] = (i & 1 ? i : 3 * i);\t\t\t\t\\\n+\tb[i] = (i >> 4) << (i & 15);\t\t\t\t\\\n+\tpred[i] = i % 3 < i % 5;\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    test_##TYPE##_##NAME (r, a, b, FACTOR, pred, N);\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tTYPE expected\t\t\t\t\t\t\\\n+\t  = pred[i] ? a[i] OP b[i] * (TYPE) FACTOR : 5;\t\\\n+\tif (r[i] != expected)\t\t\t\t\t\\\n+\t  __builtin_abort ();\t\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+  }\n+\n+int\n+main (void)\n+{\n+  TEST_ALL (TEST_LOOP)\n+  return 0;\n+}"}, {"sha": "5561f421979022b9ec0951d05e7345b4e2ac5920", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_mla_7.c", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6c3aea1892c148c21f8b87668f344b2397f4aa5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_mla_7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6c3aea1892c148c21f8b87668f344b2397f4aa5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_mla_7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_mla_7.c?ref=b6c3aea1892c148c21f8b87668f344b2397f4aa5", "patch": "@@ -0,0 +1,62 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include <stdint.h>\n+\n+#define DEF_LOOP(TYPE, NAME, OP, CONST)\t\t\t\t\\\n+  void __attribute__ ((noipa))\t\t\t\t\t\\\n+  test_##TYPE##_##NAME##_##CONST (TYPE *__restrict r, \t\t\\\n+\t\t\t\t  TYPE *__restrict a,\t\t\\\n+\t\t\t\t  TYPE *__restrict b,\t\t\\\n+\t\t\t\t  TYPE *__restrict pred, int n)\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < n; ++i)\t\t\t\t\t\\\n+      r[i] = pred[i] != 1 ? a[i] OP b[i] * CONST : a[i];\t\\\n+  }\n+\n+#define TEST_COUNT(T, TYPE, CONST) \\\n+  T (TYPE, add, +, CONST) \\\n+  T (TYPE, sub, -, CONST)\n+\n+#define TEST_TYPE(T, TYPE, CONST) \\\n+  TEST_COUNT (T, TYPE, 2) \\\n+  TEST_COUNT (T, TYPE, 4) \\\n+  TEST_COUNT (T, TYPE, CONST)\n+\n+#define TEST_ALL(T) \\\n+  TEST_TYPE (T, uint8_t, 0x80) \\\n+  TEST_TYPE (T, uint16_t, 0x8000) \\\n+  TEST_TYPE (T, uint32_t, 0x80000000) \\\n+  TEST_TYPE (T, uint64_t, 0x8000000000000000ULL)\n+\n+TEST_ALL (DEF_LOOP)\n+\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.b, z[0-9]+\\.b, #1\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.b, z[0-9]+\\.b, #2\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.b, z[0-9]+\\.b, #7\\n} 2 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.h, z[0-9]+\\.h, #1\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.h, z[0-9]+\\.h, #2\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.h, z[0-9]+\\.h, #15\\n} 2 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.s, z[0-9]+\\.s, #1\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.s, z[0-9]+\\.s, #2\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.s, z[0-9]+\\.s, #31\\n} 2 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.d, z[0-9]+\\.d, #1\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.d, z[0-9]+\\.d, #2\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.d, z[0-9]+\\.d, #63\\n} 2 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tadd\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, z[0-9]+\\.b\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tadd\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tadd\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tadd\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, z[0-9]+\\.d\\n} 4 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tsub\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, z[0-9]+\\.b\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tsub\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tsub\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tsub\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, z[0-9]+\\.d\\n} 2 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tmov\\tz[^,]*z} } } */\n+/* { dg-final { scan-assembler-not {\\tmovprfx\\t} } } */\n+/* { dg-final { scan-assembler-not {\\tsel\\t} } } */"}, {"sha": "b094f40a28a83c1be04f3e8f2629d0e4f154c0d1", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_mla_7_run.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6c3aea1892c148c21f8b87668f344b2397f4aa5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_mla_7_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6c3aea1892c148c21f8b87668f344b2397f4aa5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_mla_7_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_mla_7_run.c?ref=b6c3aea1892c148c21f8b87668f344b2397f4aa5", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"cond_mla_7.c\"\n+\n+#define N 99\n+\n+#define TEST_LOOP(TYPE, NAME, OP, CONST)\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    TYPE r[N], a[N], b[N], pred[N];\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\ta[i] = (i & 1 ? i : 3 * i);\t\t\t\t\\\n+\tb[i] = (i >> 4) << (i & 15);\t\t\t\t\\\n+\tpred[i] = i % 3 < i % 5;\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    test_##TYPE##_##NAME##_##CONST (r, a, b, pred, N);\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tTYPE expected\t\t\t\t\t\t\\\n+\t  = pred[i] != 1 ? a[i] OP b[i] * CONST : a[i];\t\t\\\n+\tif (r[i] != expected)\t\t\t\t\t\\\n+\t  __builtin_abort ();\t\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+  }\n+\n+int\n+main (void)\n+{\n+  TEST_ALL (TEST_LOOP)\n+  return 0;\n+}"}, {"sha": "d5549272e570657c70f4df9ab1162a9509302fc2", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_mla_8.c", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6c3aea1892c148c21f8b87668f344b2397f4aa5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_mla_8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6c3aea1892c148c21f8b87668f344b2397f4aa5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_mla_8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_mla_8.c?ref=b6c3aea1892c148c21f8b87668f344b2397f4aa5", "patch": "@@ -0,0 +1,62 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include <stdint.h>\n+\n+#define DEF_LOOP(TYPE, NAME, OP, CONST)\t\t\t\t\\\n+  void __attribute__ ((noipa))\t\t\t\t\t\\\n+  test_##TYPE##_##NAME##_##CONST (TYPE *__restrict r, \t\t\\\n+\t\t\t\t  TYPE *__restrict a,\t\t\\\n+\t\t\t\t  TYPE *__restrict b,\t\t\\\n+\t\t\t\t  TYPE *__restrict pred, int n)\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < n; ++i)\t\t\t\t\t\\\n+      r[i] = pred[i] != 1 ? a[i] OP b[i] * -CONST : a[i];\t\\\n+  }\n+\n+#define TEST_COUNT(T, TYPE, CONST) \\\n+  T (TYPE, add, +, CONST) \\\n+  T (TYPE, sub, -, CONST)\n+\n+#define TEST_TYPE(T, TYPE, CONST) \\\n+  TEST_COUNT (T, TYPE, 2) \\\n+  TEST_COUNT (T, TYPE, 4) \\\n+  TEST_COUNT (T, TYPE, CONST)\n+\n+#define TEST_ALL(T) \\\n+  TEST_TYPE (T, uint8_t, 0x80) \\\n+  TEST_TYPE (T, uint16_t, 0x8000) \\\n+  TEST_TYPE (T, uint32_t, 0x80000000) \\\n+  TEST_TYPE (T, uint64_t, 0x8000000000000000ULL)\n+\n+TEST_ALL (DEF_LOOP)\n+\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.b, z[0-9]+\\.b, #1\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.b, z[0-9]+\\.b, #2\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.b, z[0-9]+\\.b, #7\\n} 2 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.h, z[0-9]+\\.h, #1\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.h, z[0-9]+\\.h, #2\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.h, z[0-9]+\\.h, #15\\n} 2 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.s, z[0-9]+\\.s, #1\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.s, z[0-9]+\\.s, #2\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.s, z[0-9]+\\.s, #31\\n} 2 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.d, z[0-9]+\\.d, #1\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.d, z[0-9]+\\.d, #2\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.d, z[0-9]+\\.d, #63\\n} 2 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tadd\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, z[0-9]+\\.b\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tadd\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tadd\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tadd\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, z[0-9]+\\.d\\n} 4 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tsub\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, z[0-9]+\\.b\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tsub\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tsub\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tsub\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, z[0-9]+\\.d\\n} 2 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tmov\\tz[^,]*z} } } */\n+/* { dg-final { scan-assembler-not {\\tmovprfx\\t} } } */\n+/* { dg-final { scan-assembler-not {\\tsel\\t} } } */"}, {"sha": "7fb58aa70de52b262d2363ceb5b0e3e772a58645", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_mla_8_run.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6c3aea1892c148c21f8b87668f344b2397f4aa5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_mla_8_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6c3aea1892c148c21f8b87668f344b2397f4aa5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_mla_8_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_mla_8_run.c?ref=b6c3aea1892c148c21f8b87668f344b2397f4aa5", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"cond_mla_8.c\"\n+\n+#define N 99\n+\n+#define TEST_LOOP(TYPE, NAME, OP, CONST)\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    TYPE r[N], a[N], b[N], pred[N];\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\ta[i] = (i & 1 ? i : 3 * i);\t\t\t\t\\\n+\tb[i] = (i >> 4) << (i & 15);\t\t\t\t\\\n+\tpred[i] = i % 3 < i % 5;\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    test_##TYPE##_##NAME##_##CONST (r, a, b, pred, N);\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tTYPE expected\t\t\t\t\t\t\\\n+\t  = pred[i] != 1 ? a[i] OP b[i] * -CONST : a[i];\t\\\n+\tif (r[i] != expected)\t\t\t\t\t\\\n+\t  __builtin_abort ();\t\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+  }\n+\n+int\n+main (void)\n+{\n+  TEST_ALL (TEST_LOOP)\n+  return 0;\n+}"}]}