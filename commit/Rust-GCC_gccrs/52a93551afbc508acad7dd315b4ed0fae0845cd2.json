{"sha": "52a93551afbc508acad7dd315b4ed0fae0845cd2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTJhOTM1NTFhZmJjNTA4YWNhZDdkZDMxNWI0ZWQwZmFlMDg0NWNkMg==", "commit": {"author": {"name": "Bill Schmidt", "email": "wschmidt@linux.vnet.ibm.com", "date": "2014-02-05T20:07:51Z"}, "committer": {"name": "William Schmidt", "email": "wschmidt@gcc.gnu.org", "date": "2014-02-05T20:07:51Z"}, "message": "altivec.md (UNSPEC_VPACK_UNS_UNS_MOD_DIRECT): New unspec.\n\ngcc:\n\n2014-02-05  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n\n\t* altivec.md (UNSPEC_VPACK_UNS_UNS_MOD_DIRECT): New unspec.\n\t(UNSPEC_VUNPACK_HI_SIGN_DIRECT): Likewise.\n\t(UNSPEC_VUNPACK_LO_SIGN_DIRECT): Likewise.\n\t(mulv8hi3): Use gen_altivec_vpkuwum_direct instead of\n\tgen_altivec_vpkuwum.\n\t(altivec_vpkpx): Test for VECTOR_ELT_ORDER_BIG instead of for\n\tBYTES_BIG_ENDIAN.\n\t(altivec_vpks<VI_char>ss): Likewise.\n\t(altivec_vpks<VI_char>us): Likewise.\n\t(altivec_vpku<VI_char>us): Likewise.\n\t(altivec_vpku<VI_char>um): Likewise.\n\t(altivec_vpku<VI_char>um_direct): New (copy of\n\taltivec_vpku<VI_char>um that still relies on BYTES_BIG_ENDIAN, for\n\tinternal use).\n\t(altivec_vupkhs<VU_char>): Emit vupkls* instead of vupkhs* when\n\ttarget is little endian and -maltivec=be is not specified.\n\t(*altivec_vupkhs<VU_char>_direct): New (copy of\n\taltivec_vupkhs<VU_char> that always emits vupkhs*, for internal\n\tuse).\n\t(altivec_vupkls<VU_char>): Emit vupkhs* instead of vupkls* when\n\ttarget is little endian and -maltivec=be is not specified.\n\t(*altivec_vupkls<VU_char>_direct): New (copy of\n\taltivec_vupkls<VU_char> that always emits vupkls*, for internal\n\tuse).\n\t(altivec_vupkhpx): Emit vupklpx instead of vupkhpx when target is\n\tlittle endian and -maltivec=be is not specified.\n\t(altivec_vupklpx): Emit vupkhpx instead of vupklpx when target is\n\tlittle endian and -maltivec=be is not specified.\n\ngcc/testsuite:\n\n2014-02-05  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n\n\t* gcc.dg/vmx/pack.c: New.\n\t* gcc.dg/vmx/pack-be-order.c: New.\n\t* gcc.dg/vmx/unpack.c: New.\n\t* gcc.dg/vmx/unpack-be-order.c: New.\n\nFrom-SVN: r207520", "tree": {"sha": "c0605282fec4ba93c0565ad148598413fc0cf77a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c0605282fec4ba93c0565ad148598413fc0cf77a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/52a93551afbc508acad7dd315b4ed0fae0845cd2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52a93551afbc508acad7dd315b4ed0fae0845cd2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52a93551afbc508acad7dd315b4ed0fae0845cd2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52a93551afbc508acad7dd315b4ed0fae0845cd2/comments", "author": {"login": "wschmidt-ibm", "id": 5520937, "node_id": "MDQ6VXNlcjU1MjA5Mzc=", "avatar_url": "https://avatars.githubusercontent.com/u/5520937?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wschmidt-ibm", "html_url": "https://github.com/wschmidt-ibm", "followers_url": "https://api.github.com/users/wschmidt-ibm/followers", "following_url": "https://api.github.com/users/wschmidt-ibm/following{/other_user}", "gists_url": "https://api.github.com/users/wschmidt-ibm/gists{/gist_id}", "starred_url": "https://api.github.com/users/wschmidt-ibm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wschmidt-ibm/subscriptions", "organizations_url": "https://api.github.com/users/wschmidt-ibm/orgs", "repos_url": "https://api.github.com/users/wschmidt-ibm/repos", "events_url": "https://api.github.com/users/wschmidt-ibm/events{/privacy}", "received_events_url": "https://api.github.com/users/wschmidt-ibm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7a62e56652c69f6c95302b06a1812e42041c9ea4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a62e56652c69f6c95302b06a1812e42041c9ea4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a62e56652c69f6c95302b06a1812e42041c9ea4"}], "stats": {"total": 507, "additions": 499, "deletions": 8}, "files": [{"sha": "6d11ae492499e0229a4246e96fcdc1eb5fcd637f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52a93551afbc508acad7dd315b4ed0fae0845cd2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52a93551afbc508acad7dd315b4ed0fae0845cd2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=52a93551afbc508acad7dd315b4ed0fae0845cd2", "patch": "@@ -1,3 +1,34 @@\n+2014-02-05  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n+\n+\t* altivec.md (UNSPEC_VPACK_UNS_UNS_MOD_DIRECT): New unspec.\n+\t(UNSPEC_VUNPACK_HI_SIGN_DIRECT): Likewise.\n+\t(UNSPEC_VUNPACK_LO_SIGN_DIRECT): Likewise.\n+\t(mulv8hi3): Use gen_altivec_vpkuwum_direct instead of\n+\tgen_altivec_vpkuwum.\n+\t(altivec_vpkpx): Test for VECTOR_ELT_ORDER_BIG instead of for\n+\tBYTES_BIG_ENDIAN.\n+\t(altivec_vpks<VI_char>ss): Likewise.\n+\t(altivec_vpks<VI_char>us): Likewise.\n+\t(altivec_vpku<VI_char>us): Likewise.\n+\t(altivec_vpku<VI_char>um): Likewise.\n+\t(altivec_vpku<VI_char>um_direct): New (copy of\n+\taltivec_vpku<VI_char>um that still relies on BYTES_BIG_ENDIAN, for\n+\tinternal use).\n+\t(altivec_vupkhs<VU_char>): Emit vupkls* instead of vupkhs* when\n+\ttarget is little endian and -maltivec=be is not specified.\n+\t(*altivec_vupkhs<VU_char>_direct): New (copy of\n+\taltivec_vupkhs<VU_char> that always emits vupkhs*, for internal\n+\tuse).\n+\t(altivec_vupkls<VU_char>): Emit vupkhs* instead of vupkls* when\n+\ttarget is little endian and -maltivec=be is not specified.\n+\t(*altivec_vupkls<VU_char>_direct): New (copy of\n+\taltivec_vupkls<VU_char> that always emits vupkls*, for internal\n+\tuse).\n+\t(altivec_vupkhpx): Emit vupklpx instead of vupkhpx when target is\n+\tlittle endian and -maltivec=be is not specified.\n+\t(altivec_vupklpx): Emit vupkhpx instead of vupklpx when target is\n+\tlittle endian and -maltivec=be is not specified.\n+\n 2014-02-05  Richard Henderson <rth@redhat.com>\n \n \tPR debug/52727"}, {"sha": "6d7898884a4ed91bb0bbd5405eb4026b098c9f80", "filename": "gcc/config/rs6000/altivec.md", "status": "modified", "additions": 62, "deletions": 8, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52a93551afbc508acad7dd315b4ed0fae0845cd2/gcc%2Fconfig%2Frs6000%2Faltivec.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52a93551afbc508acad7dd315b4ed0fae0845cd2/gcc%2Fconfig%2Frs6000%2Faltivec.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.md?ref=52a93551afbc508acad7dd315b4ed0fae0845cd2", "patch": "@@ -46,6 +46,7 @@\n    UNSPEC_VPACK_SIGN_UNS_SAT\n    UNSPEC_VPACK_UNS_UNS_SAT\n    UNSPEC_VPACK_UNS_UNS_MOD\n+   UNSPEC_VPACK_UNS_UNS_MOD_DIRECT\n    UNSPEC_VSLV4SI\n    UNSPEC_VSLO\n    UNSPEC_VSR\n@@ -69,6 +70,8 @@\n    UNSPEC_VLSDOI\n    UNSPEC_VUNPACK_HI_SIGN\n    UNSPEC_VUNPACK_LO_SIGN\n+   UNSPEC_VUNPACK_HI_SIGN_DIRECT\n+   UNSPEC_VUNPACK_LO_SIGN_DIRECT\n    UNSPEC_VUPKHPX\n    UNSPEC_VUPKLPX\n    UNSPEC_DST\n@@ -683,15 +686,15 @@\n        emit_insn (gen_altivec_vmulosh (odd, operands[1], operands[2]));\n        emit_insn (gen_altivec_vmrghw_direct (high, even, odd));\n        emit_insn (gen_altivec_vmrglw_direct (low, even, odd));\n-       emit_insn (gen_altivec_vpkuwum (operands[0], high, low));\n+       emit_insn (gen_altivec_vpkuwum_direct (operands[0], high, low));\n      }\n    else\n      {\n        emit_insn (gen_altivec_vmulosh (even, operands[1], operands[2]));\n        emit_insn (gen_altivec_vmulesh (odd, operands[1], operands[2]));\n        emit_insn (gen_altivec_vmrghw_direct (high, odd, even));\n        emit_insn (gen_altivec_vmrglw_direct (low, odd, even));\n-       emit_insn (gen_altivec_vpkuwum (operands[0], low, high));\n+       emit_insn (gen_altivec_vpkuwum_direct (operands[0], low, high));\n      } \n \n    DONE;\n@@ -1432,7 +1435,7 @@\n   \"TARGET_ALTIVEC\"\n   \"*\n   {\n-    if (BYTES_BIG_ENDIAN)\n+    if (VECTOR_ELT_ORDER_BIG)\n       return \\\"vpkpx %0,%1,%2\\\";\n     else\n       return \\\"vpkpx %0,%2,%1\\\";\n@@ -1447,7 +1450,7 @@\n   \"<VI_unit>\"\n   \"*\n   {\n-    if (BYTES_BIG_ENDIAN)\n+    if (VECTOR_ELT_ORDER_BIG)\n       return \\\"vpks<VI_char>ss %0,%1,%2\\\";\n     else\n       return \\\"vpks<VI_char>ss %0,%2,%1\\\";\n@@ -1462,7 +1465,7 @@\n   \"<VI_unit>\"\n   \"*\n   {\n-    if (BYTES_BIG_ENDIAN)\n+    if (VECTOR_ELT_ORDER_BIG)\n       return \\\"vpks<VI_char>us %0,%1,%2\\\";\n     else\n       return \\\"vpks<VI_char>us %0,%2,%1\\\";\n@@ -1477,7 +1480,7 @@\n   \"<VI_unit>\"\n   \"*\n   {\n-    if (BYTES_BIG_ENDIAN)\n+    if (VECTOR_ELT_ORDER_BIG)\n       return \\\"vpku<VI_char>us %0,%1,%2\\\";\n     else\n       return \\\"vpku<VI_char>us %0,%2,%1\\\";\n@@ -1491,6 +1494,21 @@\n \t\t\t   UNSPEC_VPACK_UNS_UNS_MOD))]\n   \"<VI_unit>\"\n   \"*\n+  {\n+    if (VECTOR_ELT_ORDER_BIG)\n+      return \\\"vpku<VI_char>um %0,%1,%2\\\";\n+    else\n+      return \\\"vpku<VI_char>um %0,%2,%1\\\";\n+  }\"\n+  [(set_attr \"type\" \"vecperm\")])\n+\n+(define_insn \"altivec_vpku<VI_char>um_direct\"\n+  [(set (match_operand:<VP_small> 0 \"register_operand\" \"=v\")\n+\t(unspec:<VP_small> [(match_operand:VP 1 \"register_operand\" \"v\")\n+\t\t\t    (match_operand:VP 2 \"register_operand\" \"v\")]\n+\t\t\t   UNSPEC_VPACK_UNS_UNS_MOD_DIRECT))]\n+  \"<VI_unit>\"\n+  \"*\n   {\n     if (BYTES_BIG_ENDIAN)\n       return \\\"vpku<VI_char>um %0,%1,%2\\\";\n@@ -2034,6 +2052,19 @@\n \t(unspec:VP [(match_operand:<VP_small> 1 \"register_operand\" \"v\")]\n \t\t     UNSPEC_VUNPACK_HI_SIGN))]\n   \"<VI_unit>\"\n+{\n+  if (VECTOR_ELT_ORDER_BIG)\n+    return \"vupkhs<VU_char> %0,%1\";\n+  else\n+    return \"vupkls<VU_char> %0,%1\";\n+}\n+  [(set_attr \"type\" \"vecperm\")])\n+\n+(define_insn \"*altivec_vupkhs<VU_char>_direct\"\n+  [(set (match_operand:VP 0 \"register_operand\" \"=v\")\n+\t(unspec:VP [(match_operand:<VP_small> 1 \"register_operand\" \"v\")]\n+\t\t     UNSPEC_VUNPACK_HI_SIGN_DIRECT))]\n+  \"<VI_unit>\"\n   \"vupkhs<VU_char> %0,%1\"\n   [(set_attr \"type\" \"vecperm\")])\n \n@@ -2042,6 +2073,19 @@\n \t(unspec:VP [(match_operand:<VP_small> 1 \"register_operand\" \"v\")]\n \t\t     UNSPEC_VUNPACK_LO_SIGN))]\n   \"<VI_unit>\"\n+{\n+  if (VECTOR_ELT_ORDER_BIG)\n+    return \"vupkls<VU_char> %0,%1\";\n+  else\n+    return \"vupkhs<VU_char> %0,%1\";\n+}\n+  [(set_attr \"type\" \"vecperm\")])\n+\n+(define_insn \"*altivec_vupkls<VU_char>_direct\"\n+  [(set (match_operand:VP 0 \"register_operand\" \"=v\")\n+\t(unspec:VP [(match_operand:<VP_small> 1 \"register_operand\" \"v\")]\n+\t\t     UNSPEC_VUNPACK_LO_SIGN_DIRECT))]\n+  \"<VI_unit>\"\n   \"vupkls<VU_char> %0,%1\"\n   [(set_attr \"type\" \"vecperm\")])\n \n@@ -2050,15 +2094,25 @@\n \t(unspec:V4SI [(match_operand:V8HI 1 \"register_operand\" \"v\")]\n \t\t     UNSPEC_VUPKHPX))]\n   \"TARGET_ALTIVEC\"\n-  \"vupkhpx %0,%1\"\n+{\n+  if (VECTOR_ELT_ORDER_BIG)\n+    return \"vupkhpx %0,%1\";\n+  else\n+    return \"vupklpx %0,%1\";\n+}\n   [(set_attr \"type\" \"vecperm\")])\n \n (define_insn \"altivec_vupklpx\"\n   [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n \t(unspec:V4SI [(match_operand:V8HI 1 \"register_operand\" \"v\")]\n \t\t     UNSPEC_VUPKLPX))]\n   \"TARGET_ALTIVEC\"\n-  \"vupklpx %0,%1\"\n+{\n+  if (VECTOR_ELT_ORDER_BIG)\n+    return \"vupklpx %0,%1\";\n+  else\n+    return \"vupkhpx %0,%1\";\n+}\n   [(set_attr \"type\" \"vecperm\")])\n \n ;; Compare vectors producing a vector result and a predicate, setting CR6 to"}, {"sha": "7a57477f950b2adf9be12a60799222151d81bde3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52a93551afbc508acad7dd315b4ed0fae0845cd2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52a93551afbc508acad7dd315b4ed0fae0845cd2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=52a93551afbc508acad7dd315b4ed0fae0845cd2", "patch": "@@ -1,3 +1,10 @@\n+2014-02-05  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n+\n+\t* gcc.dg/vmx/pack.c: New.\n+\t* gcc.dg/vmx/pack-be-order.c: New.\n+\t* gcc.dg/vmx/unpack.c: New.\n+\t* gcc.dg/vmx/unpack-be-order.c: New.\n+\n 2014-02-05  Balaji V. Iyer  <balaji.v.iyer@intel.com>\n \n \t* g++.dg/cilk-plus/CK/catch_exc.cc: Disable test for -O1."}, {"sha": "c400fc882dd7d31aa14d4db22b5ea1653862bef8", "filename": "gcc/testsuite/gcc.dg/vmx/pack-be-order.c", "status": "added", "additions": 136, "deletions": 0, "changes": 136, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52a93551afbc508acad7dd315b4ed0fae0845cd2/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fpack-be-order.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52a93551afbc508acad7dd315b4ed0fae0845cd2/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fpack-be-order.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fpack-be-order.c?ref=52a93551afbc508acad7dd315b4ed0fae0845cd2", "patch": "@@ -0,0 +1,136 @@\n+/* { dg-options \"-maltivec=be -mabi=altivec -std=gnu99 -mno-vsx\" } */\n+\n+#include \"harness.h\"\n+\n+#define BIG 4294967295\n+\n+static void test()\n+{\n+  /* Input vectors.  */\n+  vector unsigned short vusa = {0,1,2,3,4,5,6,7};\n+  vector unsigned short vusb = {8,9,10,11,12,13,14,15};\n+  vector signed short vssa = {-8,-7,-6,-5,-4,-3,-2,-1};\n+  vector signed short vssb = {0,1,2,3,4,5,6,7};\n+  vector bool short vbsa = {0,65535,65535,0,0,0,65535,0};\n+  vector bool short vbsb = {65535,0,0,65535,65535,65535,0,65535};\n+  vector unsigned int vuia = {0,1,2,3};\n+  vector unsigned int vuib = {4,5,6,7};\n+  vector signed int vsia = {-4,-3,-2,-1};\n+  vector signed int vsib = {0,1,2,3};\n+  vector bool int vbia = {0,BIG,BIG,BIG};\n+  vector bool int vbib = {BIG,0,0,0};\n+  vector unsigned int vipa = {(0<<24) + (2<<19) + (3<<11) + (4<<3),\n+\t\t\t      (1<<24) + (5<<19) + (6<<11) + (7<<3),\n+\t\t\t      (0<<24) + (8<<19) + (9<<11) + (10<<3),\n+\t\t\t      (1<<24) + (11<<19) + (12<<11) + (13<<3)};\n+  vector unsigned int vipb = {(1<<24) + (14<<19) + (15<<11) + (16<<3),\n+\t\t\t      (0<<24) + (17<<19) + (18<<11) + (19<<3),\n+\t\t\t      (1<<24) + (20<<19) + (21<<11) + (22<<3),\n+\t\t\t      (0<<24) + (23<<19) + (24<<11) + (25<<3)};\n+  vector unsigned short vusc = {0,256,1,257,2,258,3,259};\n+  vector unsigned short vusd = {4,260,5,261,6,262,7,263};\n+  vector signed short vssc = {-1,-128,0,127,-2,-129,1,128};\n+  vector signed short vssd = {-3,-130,2,129,-4,-131,3,130};\n+  vector unsigned int vuic = {0,65536,1,65537};\n+  vector unsigned int vuid = {2,65538,3,65539};\n+  vector signed int vsic = {-1,-32768,0,32767};\n+  vector signed int vsid = {-2,-32769,1,32768};\n+\n+  /* Result vectors.  */\n+  vector unsigned char vucr;\n+  vector signed char vscr;\n+  vector bool char vbcr;\n+  vector unsigned short vusr;\n+  vector signed short vssr;\n+  vector bool short vbsr;\n+  vector pixel vpr;\n+  vector unsigned char vucsr;\n+  vector signed char vscsr;\n+  vector unsigned short vussr;\n+  vector signed short vsssr;\n+  vector unsigned char vucsur1, vucsur2;\n+  vector unsigned short vussur1, vussur2;\n+\n+  /* Expected result vectors.  */\n+#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__\n+  vector unsigned char vucer = {8,9,10,11,12,13,14,15,0,1,2,3,4,5,6,7};\n+  vector signed char vscer = {0,1,2,3,4,5,6,7,-8,-7,-6,-5,-4,-3,-2,-1};\n+  vector bool char vbcer = {255,0,0,255,255,255,0,255,0,255,255,0,0,0,255,0};\n+  vector unsigned short vuser = {4,5,6,7,0,1,2,3};\n+  vector signed short vsser = {0,1,2,3,-4,-3,-2,-1};\n+  vector bool short vbser = {65535,0,0,0,0,65535,65535,65535};\n+  vector pixel vper = {(1<<15) + (14<<10) + (15<<5) + 16,\n+\t\t       (0<<15) + (17<<10) + (18<<5) + 19,\n+\t\t       (1<<15) + (20<<10) + (21<<5) + 22,\n+\t\t       (0<<15) + (23<<10) + (24<<5) + 25,\n+\t\t       (0<<15) + (2<<10) + (3<<5) + 4,\n+\t\t       (1<<15) + (5<<10) + (6<<5) + 7,\n+\t\t       (0<<15) + (8<<10) + (9<<5) + 10,\n+\t\t       (1<<15) + (11<<10) + (12<<5) + 13};\n+  vector unsigned char vucser = {4,255,5,255,6,255,7,255,0,255,1,255,2,255,3,255};\n+  vector signed char vscser = {-3,-128,2,127,-4,-128,3,127,\n+\t\t\t       -1,-128,0,127,-2,-128,1,127};\n+  vector unsigned short vusser = {2,65535,3,65535,0,65535,1,65535};\n+  vector signed short vssser = {-2,-32768,1,32767,-1,-32768,0,32767};\n+  vector unsigned char vucsuer1 = {4,255,5,255,6,255,7,255,0,255,1,255,2,255,3,255};\n+  vector unsigned char vucsuer2 = {0,0,2,129,0,0,3,130,0,0,0,127,0,0,1,128};\n+  vector unsigned short vussuer1 = {2,65535,3,65535,0,65535,1,65535};\n+  vector unsigned short vussuer2 = {0,0,1,32768,0,0,0,32767};\n+#else\n+  vector unsigned char vucer = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n+  vector signed char vscer = {-8,-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6,7};\n+  vector bool char vbcer = {0,255,255,0,0,0,255,0,255,0,0,255,255,255,0,255};\n+  vector unsigned short vuser = {0,1,2,3,4,5,6,7};\n+  vector signed short vsser = {-4,-3,-2,-1,0,1,2,3};\n+  vector bool short vbser = {0,65535,65535,65535,65535,0,0,0};\n+  vector pixel vper = {(0<<15) + (2<<10) + (3<<5) + 4,\n+\t\t       (1<<15) + (5<<10) + (6<<5) + 7,\n+\t\t       (0<<15) + (8<<10) + (9<<5) + 10,\n+\t\t       (1<<15) + (11<<10) + (12<<5) + 13,\n+\t\t       (1<<15) + (14<<10) + (15<<5) + 16,\n+\t\t       (0<<15) + (17<<10) + (18<<5) + 19,\n+\t\t       (1<<15) + (20<<10) + (21<<5) + 22,\n+\t\t       (0<<15) + (23<<10) + (24<<5) + 25};\n+  vector unsigned char vucser = {0,255,1,255,2,255,3,255,4,255,5,255,6,255,7,255};\n+  vector signed char vscser = {-1,-128,0,127,-2,-128,1,127,\n+\t\t\t       -3,-128,2,127,-4,-128,3,127};\n+  vector unsigned short vusser = {0,65535,1,65535,2,65535,3,65535};\n+  vector signed short vssser = {-1,-32768,0,32767,-2,-32768,1,32767};\n+  vector unsigned char vucsuer1 = {0,255,1,255,2,255,3,255,4,255,5,255,6,255,7,255};\n+  vector unsigned char vucsuer2 = {0,0,0,127,0,0,1,128,0,0,2,129,0,0,3,130};\n+  vector unsigned short vussuer1 = {0,65535,1,65535,2,65535,3,65535};\n+  vector unsigned short vussuer2 = {0,0,0,32767,0,0,1,32768};\n+#endif\n+\n+  vucr = vec_pack (vusa, vusb);\n+  vscr = vec_pack (vssa, vssb);\n+  vbcr = vec_pack (vbsa, vbsb);\n+  vusr = vec_pack (vuia, vuib);\n+  vssr = vec_pack (vsia, vsib);\n+  vbsr = vec_pack (vbia, vbib);\n+  vpr  = vec_packpx (vipa, vipb);\n+  vucsr = vec_packs (vusc, vusd);\n+  vscsr = vec_packs (vssc, vssd);\n+  vussr = vec_packs (vuic, vuid);\n+  vsssr = vec_packs (vsic, vsid);\n+  vucsur1 = vec_packsu (vusc, vusd);\n+  vucsur2 = vec_packsu (vssc, vssd);\n+  vussur1 = vec_packsu (vuic, vuid);\n+  vussur2 = vec_packsu (vsic, vsid);\n+\n+  check (vec_all_eq (vucr, vucer), \"vucr\");\n+  check (vec_all_eq (vscr, vscer), \"vscr\");\n+  check (vec_all_eq (vbcr, vbcer), \"vbcr\");\n+  check (vec_all_eq (vusr, vuser), \"vusr\");\n+  check (vec_all_eq (vssr, vsser), \"vssr\");\n+  check (vec_all_eq (vbsr, vbser), \"vbsr\");\n+  check (vec_all_eq (vpr,  vper ), \"vpr\" );\n+  check (vec_all_eq (vucsr, vucser), \"vucsr\");\n+  check (vec_all_eq (vscsr, vscser), \"vscsr\");\n+  check (vec_all_eq (vussr, vusser), \"vussr\");\n+  check (vec_all_eq (vsssr, vssser), \"vsssr\");\n+  check (vec_all_eq (vucsur1, vucsuer1), \"vucsur1\");\n+  check (vec_all_eq (vucsur2, vucsuer2), \"vucsur2\");\n+  check (vec_all_eq (vussur1, vussuer1), \"vussur1\");\n+  check (vec_all_eq (vussur2, vussuer2), \"vussur2\");\n+}"}, {"sha": "d1b49f0a62a0620b1cc6d0f10e8465d0fa3b9d37", "filename": "gcc/testsuite/gcc.dg/vmx/pack.c", "status": "added", "additions": 108, "deletions": 0, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52a93551afbc508acad7dd315b4ed0fae0845cd2/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fpack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52a93551afbc508acad7dd315b4ed0fae0845cd2/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fpack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fpack.c?ref=52a93551afbc508acad7dd315b4ed0fae0845cd2", "patch": "@@ -0,0 +1,108 @@\n+#include \"harness.h\"\n+\n+#define BIG 4294967295\n+\n+static void test()\n+{\n+  /* Input vectors.  */\n+  vector unsigned short vusa = {0,1,2,3,4,5,6,7};\n+  vector unsigned short vusb = {8,9,10,11,12,13,14,15};\n+  vector signed short vssa = {-8,-7,-6,-5,-4,-3,-2,-1};\n+  vector signed short vssb = {0,1,2,3,4,5,6,7};\n+  vector bool short vbsa = {0,65535,65535,0,0,0,65535,0};\n+  vector bool short vbsb = {65535,0,0,65535,65535,65535,0,65535};\n+  vector unsigned int vuia = {0,1,2,3};\n+  vector unsigned int vuib = {4,5,6,7};\n+  vector signed int vsia = {-4,-3,-2,-1};\n+  vector signed int vsib = {0,1,2,3};\n+  vector bool int vbia = {0,BIG,BIG,BIG};\n+  vector bool int vbib = {BIG,0,0,0};\n+  vector unsigned int vipa = {(0<<24) + (2<<19) + (3<<11) + (4<<3),\n+\t\t\t      (1<<24) + (5<<19) + (6<<11) + (7<<3),\n+\t\t\t      (0<<24) + (8<<19) + (9<<11) + (10<<3),\n+\t\t\t      (1<<24) + (11<<19) + (12<<11) + (13<<3)};\n+  vector unsigned int vipb = {(1<<24) + (14<<19) + (15<<11) + (16<<3),\n+\t\t\t      (0<<24) + (17<<19) + (18<<11) + (19<<3),\n+\t\t\t      (1<<24) + (20<<19) + (21<<11) + (22<<3),\n+\t\t\t      (0<<24) + (23<<19) + (24<<11) + (25<<3)};\n+  vector unsigned short vusc = {0,256,1,257,2,258,3,259};\n+  vector unsigned short vusd = {4,260,5,261,6,262,7,263};\n+  vector signed short vssc = {-1,-128,0,127,-2,-129,1,128};\n+  vector signed short vssd = {-3,-130,2,129,-4,-131,3,130};\n+  vector unsigned int vuic = {0,65536,1,65537};\n+  vector unsigned int vuid = {2,65538,3,65539};\n+  vector signed int vsic = {-1,-32768,0,32767};\n+  vector signed int vsid = {-2,-32769,1,32768};\n+\n+  /* Result vectors.  */\n+  vector unsigned char vucr;\n+  vector signed char vscr;\n+  vector bool char vbcr;\n+  vector unsigned short vusr;\n+  vector signed short vssr;\n+  vector bool short vbsr;\n+  vector pixel vpr;\n+  vector unsigned char vucsr;\n+  vector signed char vscsr;\n+  vector unsigned short vussr;\n+  vector signed short vsssr;\n+  vector unsigned char vucsur1, vucsur2;\n+  vector unsigned short vussur1, vussur2;\n+\n+  /* Expected result vectors.  */\n+  vector unsigned char vucer = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n+  vector signed char vscer = {-8,-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6,7};\n+  vector bool char vbcer = {0,255,255,0,0,0,255,0,255,0,0,255,255,255,0,255};\n+  vector unsigned short vuser = {0,1,2,3,4,5,6,7};\n+  vector signed short vsser = {-4,-3,-2,-1,0,1,2,3};\n+  vector bool short vbser = {0,65535,65535,65535,65535,0,0,0};\n+  vector pixel vper = {(0<<15) + (2<<10) + (3<<5) + 4,\n+\t\t       (1<<15) + (5<<10) + (6<<5) + 7,\n+\t\t       (0<<15) + (8<<10) + (9<<5) + 10,\n+\t\t       (1<<15) + (11<<10) + (12<<5) + 13,\n+\t\t       (1<<15) + (14<<10) + (15<<5) + 16,\n+\t\t       (0<<15) + (17<<10) + (18<<5) + 19,\n+\t\t       (1<<15) + (20<<10) + (21<<5) + 22,\n+\t\t       (0<<15) + (23<<10) + (24<<5) + 25};\n+  vector unsigned char vucser = {0,255,1,255,2,255,3,255,4,255,5,255,6,255,7,255};\n+  vector signed char vscser = {-1,-128,0,127,-2,-128,1,127,\n+\t\t\t       -3,-128,2,127,-4,-128,3,127};\n+  vector unsigned short vusser = {0,65535,1,65535,2,65535,3,65535};\n+  vector signed short vssser = {-1,-32768,0,32767,-2,-32768,1,32767};\n+  vector unsigned char vucsuer1 = {0,255,1,255,2,255,3,255,4,255,5,255,6,255,7,255};\n+  vector unsigned char vucsuer2 = {0,0,0,127,0,0,1,128,0,0,2,129,0,0,3,130};\n+  vector unsigned short vussuer1 = {0,65535,1,65535,2,65535,3,65535};\n+  vector unsigned short vussuer2 = {0,0,0,32767,0,0,1,32768};\n+\n+  vucr = vec_pack (vusa, vusb);\n+  vscr = vec_pack (vssa, vssb);\n+  vbcr = vec_pack (vbsa, vbsb);\n+  vusr = vec_pack (vuia, vuib);\n+  vssr = vec_pack (vsia, vsib);\n+  vbsr = vec_pack (vbia, vbib);\n+  vpr  = vec_packpx (vipa, vipb);\n+  vucsr = vec_packs (vusc, vusd);\n+  vscsr = vec_packs (vssc, vssd);\n+  vussr = vec_packs (vuic, vuid);\n+  vsssr = vec_packs (vsic, vsid);\n+  vucsur1 = vec_packsu (vusc, vusd);\n+  vucsur2 = vec_packsu (vssc, vssd);\n+  vussur1 = vec_packsu (vuic, vuid);\n+  vussur2 = vec_packsu (vsic, vsid);\n+\n+  check (vec_all_eq (vucr, vucer), \"vucr\");\n+  check (vec_all_eq (vscr, vscer), \"vscr\");\n+  check (vec_all_eq (vbcr, vbcer), \"vbcr\");\n+  check (vec_all_eq (vusr, vuser), \"vusr\");\n+  check (vec_all_eq (vssr, vsser), \"vssr\");\n+  check (vec_all_eq (vbsr, vbser), \"vbsr\");\n+  check (vec_all_eq (vpr,  vper ), \"vpr\" );\n+  check (vec_all_eq (vucsr, vucser), \"vucsr\");\n+  check (vec_all_eq (vscsr, vscser), \"vscsr\");\n+  check (vec_all_eq (vussr, vusser), \"vussr\");\n+  check (vec_all_eq (vsssr, vssser), \"vsssr\");\n+  check (vec_all_eq (vucsur1, vucsuer1), \"vucsur1\");\n+  check (vec_all_eq (vucsur2, vucsuer2), \"vucsur2\");\n+  check (vec_all_eq (vussur1, vussuer1), \"vussur1\");\n+  check (vec_all_eq (vussur2, vussuer2), \"vussur2\");\n+}"}, {"sha": "e174433dd23637ee9013b6c44ea75ea3a6f9fee0", "filename": "gcc/testsuite/gcc.dg/vmx/unpack-be-order.c", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52a93551afbc508acad7dd315b4ed0fae0845cd2/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Funpack-be-order.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52a93551afbc508acad7dd315b4ed0fae0845cd2/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Funpack-be-order.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Funpack-be-order.c?ref=52a93551afbc508acad7dd315b4ed0fae0845cd2", "patch": "@@ -0,0 +1,88 @@\n+/* { dg-options \"-maltivec=be -mabi=altivec -std=gnu99 -mno-vsx\" } */\n+\n+#include \"harness.h\"\n+\n+#define BIG 4294967295\n+\n+static void test()\n+{\n+  /* Input vectors.  */\n+  vector signed char vsc = {-8,-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6,7};\n+  vector bool char vbc = {0,255,255,0,0,0,255,0,255,0,0,255,255,255,0,255};\n+  vector pixel vp = {(0<<15) + (1<<10)  + (2<<5)  + 3,\n+\t\t     (1<<15) + (4<<10)  + (5<<5)  + 6,\n+\t\t     (0<<15) + (7<<10)  + (8<<5)  + 9,\n+\t\t     (1<<15) + (10<<10) + (11<<5) + 12,\n+\t\t     (1<<15) + (13<<10) + (14<<5) + 15,\n+\t\t     (0<<15) + (16<<10) + (17<<5) + 18,\n+\t\t     (1<<15) + (19<<10) + (20<<5) + 21,\n+\t\t     (0<<15) + (22<<10) + (23<<5) + 24};\n+  vector signed short vss = {-4,-3,-2,-1,0,1,2,3};\n+  vector bool short vbs = {0,65535,65535,0,0,0,65535,0};\n+\n+  /* Result vectors.  */\n+  vector signed short vsch, vscl;\n+  vector bool short vbsh, vbsl;\n+  vector unsigned int vuih, vuil;\n+  vector signed int vsih, vsil;\n+  vector bool int vbih, vbil;\n+\n+  /* Expected result vectors.  */\n+#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__\n+  vector signed short vschr = {0,1,2,3,4,5,6,7};\n+  vector signed short vsclr = {-8,-7,-6,-5,-4,-3,-2,-1};\n+  vector bool short vbshr = {65535,0,0,65535,65535,65535,0,65535};\n+  vector bool short vbslr = {0,65535,65535,0,0,0,65535,0};\n+  vector unsigned int vuihr = {(65535<<24) + (13<<16) + (14<<8) + 15,\n+\t\t\t       (0<<24)     + (16<<16) + (17<<8) + 18,\n+\t\t\t       (65535<<24) + (19<<16) + (20<<8) + 21,\n+\t\t\t       (0<<24)     + (22<<16) + (23<<8) + 24};\n+  vector unsigned int vuilr = {(0<<24)     + (1<<16)  + (2<<8)  + 3,\n+\t\t\t       (65535<<24) + (4<<16)  + (5<<8)  + 6,\n+\t\t\t       (0<<24)     + (7<<16)  + (8<<8)  + 9,\n+\t\t\t       (65535<<24) + (10<<16) + (11<<8) + 12};\n+  vector signed int vsihr = {0,1,2,3};\n+  vector signed int vsilr = {-4,-3,-2,-1};\n+  vector bool int vbihr = {0,0,BIG,0};\n+  vector bool int vbilr = {0,BIG,BIG,0};\n+#else\n+  vector signed short vschr = {-8,-7,-6,-5,-4,-3,-2,-1};\n+  vector signed short vsclr = {0,1,2,3,4,5,6,7};\n+  vector bool short vbshr = {0,65535,65535,0,0,0,65535,0};\n+  vector bool short vbslr = {65535,0,0,65535,65535,65535,0,65535};\n+  vector unsigned int vuihr = {(0<<24)     + (1<<16)  + (2<<8)  + 3,\n+\t\t\t       (65535<<24) + (4<<16)  + (5<<8)  + 6,\n+\t\t\t       (0<<24)     + (7<<16)  + (8<<8)  + 9,\n+\t\t\t       (65535<<24) + (10<<16) + (11<<8) + 12};\n+  vector unsigned int vuilr = {(65535<<24) + (13<<16) + (14<<8) + 15,\n+\t\t\t       (0<<24)     + (16<<16) + (17<<8) + 18,\n+\t\t\t       (65535<<24) + (19<<16) + (20<<8) + 21,\n+\t\t\t       (0<<24)     + (22<<16) + (23<<8) + 24};\n+  vector signed int vsihr = {-4,-3,-2,-1};\n+  vector signed int vsilr = {0,1,2,3};\n+  vector bool int vbihr = {0,BIG,BIG,0};\n+  vector bool int vbilr = {0,0,BIG,0};\n+#endif\n+\n+  vsch = vec_unpackh (vsc);\n+  vscl = vec_unpackl (vsc);\n+  vbsh = vec_unpackh (vbc);\n+  vbsl = vec_unpackl (vbc);\n+  vuih = vec_unpackh (vp);\n+  vuil = vec_unpackl (vp);\n+  vsih = vec_unpackh (vss);\n+  vsil = vec_unpackl (vss);\n+  vbih = vec_unpackh (vbs);\n+  vbil = vec_unpackl (vbs);\n+\n+  check (vec_all_eq (vsch, vschr), \"vsch\");\n+  check (vec_all_eq (vscl, vsclr), \"vscl\");\n+  check (vec_all_eq (vbsh, vbshr), \"vbsh\");\n+  check (vec_all_eq (vbsl, vbslr), \"vbsl\");\n+  check (vec_all_eq (vuih, vuihr), \"vuih\");\n+  check (vec_all_eq (vuil, vuilr), \"vuil\");\n+  check (vec_all_eq (vsih, vsihr), \"vsih\");\n+  check (vec_all_eq (vsil, vsilr), \"vsil\");\n+  check (vec_all_eq (vbih, vbihr), \"vbih\");\n+  check (vec_all_eq (vbil, vbilr), \"vbil\");\n+}"}, {"sha": "3c13163cb7b0bfcd8bf292b879fe9736b6f59131", "filename": "gcc/testsuite/gcc.dg/vmx/unpack.c", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52a93551afbc508acad7dd315b4ed0fae0845cd2/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Funpack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52a93551afbc508acad7dd315b4ed0fae0845cd2/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Funpack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Funpack.c?ref=52a93551afbc508acad7dd315b4ed0fae0845cd2", "patch": "@@ -0,0 +1,67 @@\n+#include \"harness.h\"\n+\n+#define BIG 4294967295\n+\n+static void test()\n+{\n+  /* Input vectors.  */\n+  vector signed char vsc = {-8,-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6,7};\n+  vector bool char vbc = {0,255,255,0,0,0,255,0,255,0,0,255,255,255,0,255};\n+  vector pixel vp = {(0<<15) + (1<<10)  + (2<<5)  + 3,\n+\t\t     (1<<15) + (4<<10)  + (5<<5)  + 6,\n+\t\t     (0<<15) + (7<<10)  + (8<<5)  + 9,\n+\t\t     (1<<15) + (10<<10) + (11<<5) + 12,\n+\t\t     (1<<15) + (13<<10) + (14<<5) + 15,\n+\t\t     (0<<15) + (16<<10) + (17<<5) + 18,\n+\t\t     (1<<15) + (19<<10) + (20<<5) + 21,\n+\t\t     (0<<15) + (22<<10) + (23<<5) + 24};\n+  vector signed short vss = {-4,-3,-2,-1,0,1,2,3};\n+  vector bool short vbs = {0,65535,65535,0,0,0,65535,0};\n+\n+  /* Result vectors.  */\n+  vector signed short vsch, vscl;\n+  vector bool short vbsh, vbsl;\n+  vector unsigned int vuih, vuil;\n+  vector signed int vsih, vsil;\n+  vector bool int vbih, vbil;\n+\n+  /* Expected result vectors.  */\n+  vector signed short vschr = {-8,-7,-6,-5,-4,-3,-2,-1};\n+  vector signed short vsclr = {0,1,2,3,4,5,6,7};\n+  vector bool short vbshr = {0,65535,65535,0,0,0,65535,0};\n+  vector bool short vbslr = {65535,0,0,65535,65535,65535,0,65535};\n+  vector unsigned int vuihr = {(0<<24)     + (1<<16)  + (2<<8)  + 3,\n+\t\t\t       (65535<<24) + (4<<16)  + (5<<8)  + 6,\n+\t\t\t       (0<<24)     + (7<<16)  + (8<<8)  + 9,\n+\t\t\t       (65535<<24) + (10<<16) + (11<<8) + 12};\n+  vector unsigned int vuilr = {(65535<<24) + (13<<16) + (14<<8) + 15,\n+\t\t\t       (0<<24)     + (16<<16) + (17<<8) + 18,\n+\t\t\t       (65535<<24) + (19<<16) + (20<<8) + 21,\n+\t\t\t       (0<<24)     + (22<<16) + (23<<8) + 24};\n+  vector signed int vsihr = {-4,-3,-2,-1};\n+  vector signed int vsilr = {0,1,2,3};\n+  vector bool int vbihr = {0,BIG,BIG,0};\n+  vector bool int vbilr = {0,0,BIG,0};\n+\n+  vsch = vec_unpackh (vsc);\n+  vscl = vec_unpackl (vsc);\n+  vbsh = vec_unpackh (vbc);\n+  vbsl = vec_unpackl (vbc);\n+  vuih = vec_unpackh (vp);\n+  vuil = vec_unpackl (vp);\n+  vsih = vec_unpackh (vss);\n+  vsil = vec_unpackl (vss);\n+  vbih = vec_unpackh (vbs);\n+  vbil = vec_unpackl (vbs);\n+\n+  check (vec_all_eq (vsch, vschr), \"vsch\");\n+  check (vec_all_eq (vscl, vsclr), \"vscl\");\n+  check (vec_all_eq (vbsh, vbshr), \"vbsh\");\n+  check (vec_all_eq (vbsl, vbslr), \"vbsl\");\n+  check (vec_all_eq (vuih, vuihr), \"vuih\");\n+  check (vec_all_eq (vuil, vuilr), \"vuil\");\n+  check (vec_all_eq (vsih, vsihr), \"vsih\");\n+  check (vec_all_eq (vsil, vsilr), \"vsil\");\n+  check (vec_all_eq (vbih, vbihr), \"vbih\");\n+  check (vec_all_eq (vbil, vbilr), \"vbil\");\n+}"}]}