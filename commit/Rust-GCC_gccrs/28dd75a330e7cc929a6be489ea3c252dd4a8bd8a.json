{"sha": "28dd75a330e7cc929a6be489ea3c252dd4a8bd8a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjhkZDc1YTMzMGU3Y2M5MjlhNmJlNDg5ZWEzYzI1MmRkNGE4YmQ4YQ==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2018-10-18T21:29:55Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2018-10-18T21:29:55Z"}, "message": "Limit mask of vec_merge to HOST_BITS_PER_WIDE_INT\n\nSince mask of vec_merge is in HOST_WIDE_INT, HOST_BITS_PER_WIDE_INT is\nthe maximum number of vector elements.\n\n\t* simplify-rtx.c (simplify_subreg): Limit mask of vec_merge to\n\tHOST_BITS_PER_WIDE_INT.\n\t(test_vector_ops_duplicate): Likewise.\n\nFrom-SVN: r265290", "tree": {"sha": "d9b332802b405d6535065c2a11ff02798b0534dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d9b332802b405d6535065c2a11ff02798b0534dd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/28dd75a330e7cc929a6be489ea3c252dd4a8bd8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28dd75a330e7cc929a6be489ea3c252dd4a8bd8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28dd75a330e7cc929a6be489ea3c252dd4a8bd8a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28dd75a330e7cc929a6be489ea3c252dd4a8bd8a/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9a91ed2a2ebf5d38b9a47cb7a154592fca582e5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a91ed2a2ebf5d38b9a47cb7a154592fca582e5f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a91ed2a2ebf5d38b9a47cb7a154592fca582e5f"}], "stats": {"total": 9, "additions": 9, "deletions": 0}, "files": [{"sha": "7c5f9dd4814789dfdccc49ce2da89636bd8b6fff", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28dd75a330e7cc929a6be489ea3c252dd4a8bd8a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28dd75a330e7cc929a6be489ea3c252dd4a8bd8a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=28dd75a330e7cc929a6be489ea3c252dd4a8bd8a", "patch": "@@ -1,3 +1,9 @@\n+2018-10-18  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* simplify-rtx.c (simplify_subreg): Limit mask of vec_merge to\n+\tHOST_BITS_PER_WIDE_INT.\n+\t(test_vector_ops_duplicate): Likewise.\n+\n 2018-10-18  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/72782"}, {"sha": "2ff68ceb4e335d5b4fb257da3ae7553c0eb29aed", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28dd75a330e7cc929a6be489ea3c252dd4a8bd8a/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28dd75a330e7cc929a6be489ea3c252dd4a8bd8a/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=28dd75a330e7cc929a6be489ea3c252dd4a8bd8a", "patch": "@@ -6611,6 +6611,7 @@ simplify_subreg (machine_mode outermode, rtx op,\n    */\n   unsigned int idx;\n   if (constant_multiple_p (byte, GET_MODE_SIZE (outermode), &idx)\n+      && idx < HOST_BITS_PER_WIDE_INT\n       && GET_CODE (op) == VEC_MERGE\n       && GET_MODE_INNER (innermode) == outermode\n       && CONST_INT_P (XEXP (op, 2))\n@@ -6861,6 +6862,8 @@ test_vector_ops_duplicate (machine_mode mode, rtx scalar_reg)\n       rtx vector_reg = make_test_reg (mode);\n       for (unsigned HOST_WIDE_INT i = 0; i < const_nunits; i++)\n \t{\n+\t  if (i >= HOST_BITS_PER_WIDE_INT)\n+\t    break;\n \t  rtx mask = GEN_INT ((HOST_WIDE_INT_1U << i) | (i + 1));\n \t  rtx vm = gen_rtx_VEC_MERGE (mode, duplicate, vector_reg, mask);\n \t  poly_uint64 offset = i * GET_MODE_SIZE (inner_mode);"}]}