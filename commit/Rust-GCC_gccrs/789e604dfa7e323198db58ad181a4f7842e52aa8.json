{"sha": "789e604dfa7e323198db58ad181a4f7842e52aa8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzg5ZTYwNGRmYTdlMzIzMTk4ZGI1OGFkMTgxYTRmNzg0MmU1MmFhOA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2006-11-05T12:13:46Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2006-11-05T12:13:46Z"}, "message": "re PR middle-end/29695 (Folding breaks (a & 0x80) ? 0x80 : 0 for unsigned char or unsigned short a)\n\n\tPR middle-end/29695\n\t* fold-const.c (fold_ternary): Fix A < 0 ? <sign bit of A> : 0\n\tsimplification.\n\n\t* gcc.c-torture/execute/pr29695-1.c: New test.\n\t* gcc.c-torture/execute/pr29695-2.c: New test.\n\nFrom-SVN: r118497", "tree": {"sha": "522eca333cf72507bfdc594f48625ff147830b42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/522eca333cf72507bfdc594f48625ff147830b42"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/789e604dfa7e323198db58ad181a4f7842e52aa8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/789e604dfa7e323198db58ad181a4f7842e52aa8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/789e604dfa7e323198db58ad181a4f7842e52aa8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/789e604dfa7e323198db58ad181a4f7842e52aa8/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "75c0ed055fcc0a895c8b9f195cdbfad094e84204", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75c0ed055fcc0a895c8b9f195cdbfad094e84204", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75c0ed055fcc0a895c8b9f195cdbfad094e84204"}], "stats": {"total": 252, "additions": 245, "deletions": 7}, "files": [{"sha": "72ee3fe5a0b7a1f2057925415da35d7796e991ef", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/789e604dfa7e323198db58ad181a4f7842e52aa8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/789e604dfa7e323198db58ad181a4f7842e52aa8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=789e604dfa7e323198db58ad181a4f7842e52aa8", "patch": "@@ -1,3 +1,9 @@\n+2006-11-05  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/29695\n+\t* fold-const.c (fold_ternary): Fix A < 0 ? <sign bit of A> : 0\n+\tsimplification.\n+\n 2006-11-04  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/26915"}, {"sha": "d70e5b0260571e9891c3c1d829943c36228d8a7d", "filename": "gcc/fold-const.c", "status": "modified", "additions": 70, "deletions": 7, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/789e604dfa7e323198db58ad181a4f7842e52aa8/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/789e604dfa7e323198db58ad181a4f7842e52aa8/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=789e604dfa7e323198db58ad181a4f7842e52aa8", "patch": "@@ -11380,13 +11380,76 @@ fold_ternary (enum tree_code code, tree type, tree op0, tree op1, tree op2)\n \n       /* A < 0 ? <sign bit of A> : 0 is simply (A & <sign bit of A>).  */\n       if (TREE_CODE (arg0) == LT_EXPR\n-          && integer_zerop (TREE_OPERAND (arg0, 1))\n-          && integer_zerop (op2)\n-          && (tem = sign_bit_p (TREE_OPERAND (arg0, 0), arg1)))\n-        return fold_convert (type,\n-\t\t\t     fold_build2 (BIT_AND_EXPR,\n-\t\t\t\t\t  TREE_TYPE (tem), tem,\n-\t\t\t\t\t  fold_convert (TREE_TYPE (tem), arg1)));\n+\t  && integer_zerop (TREE_OPERAND (arg0, 1))\n+\t  && integer_zerop (op2)\n+\t  && (tem = sign_bit_p (TREE_OPERAND (arg0, 0), arg1)))\n+\t{\n+\t  /* sign_bit_p only checks ARG1 bits within A's precision.\n+\t     If <sign bit of A> has wider type than A, bits outside\n+\t     of A's precision in <sign bit of A> need to be checked.\n+\t     If they are all 0, this optimization needs to be done\n+\t     in unsigned A's type, if they are all 1 in signed A's type,\n+\t     otherwise this can't be done.  */\n+\t  if (TYPE_PRECISION (TREE_TYPE (tem))\n+\t      < TYPE_PRECISION (TREE_TYPE (arg1))\n+\t      && TYPE_PRECISION (TREE_TYPE (tem))\n+\t\t < TYPE_PRECISION (type))\n+\t    {\n+\t      unsigned HOST_WIDE_INT mask_lo;\n+\t      HOST_WIDE_INT mask_hi;\n+\t      int inner_width, outer_width;\n+\t      tree tem_type;\n+\n+\t      inner_width = TYPE_PRECISION (TREE_TYPE (tem));\n+\t      outer_width = TYPE_PRECISION (TREE_TYPE (arg1));\n+\t      if (outer_width > TYPE_PRECISION (type))\n+\t\touter_width = TYPE_PRECISION (type);\n+\n+\t      if (outer_width > HOST_BITS_PER_WIDE_INT)\n+\t\t{\n+\t\t  mask_hi = ((unsigned HOST_WIDE_INT) -1\n+\t\t\t     >> (2 * HOST_BITS_PER_WIDE_INT - outer_width));\n+\t\t  mask_lo = -1;\n+\t\t}\n+\t      else\n+\t\t{\n+\t\t  mask_hi = 0;\n+\t\t  mask_lo = ((unsigned HOST_WIDE_INT) -1\n+\t\t\t     >> (HOST_BITS_PER_WIDE_INT - outer_width));\n+\t\t}\n+\t      if (inner_width > HOST_BITS_PER_WIDE_INT)\n+\t\t{\n+\t\t  mask_hi &= ~((unsigned HOST_WIDE_INT) -1\n+\t\t\t       >> (HOST_BITS_PER_WIDE_INT - inner_width));\n+\t\t  mask_lo = 0;\n+\t\t}\n+\t      else\n+\t\tmask_lo &= ~((unsigned HOST_WIDE_INT) -1\n+\t\t\t     >> (HOST_BITS_PER_WIDE_INT - inner_width));\n+\n+\t      if ((TREE_INT_CST_HIGH (arg1) & mask_hi) == mask_hi\n+\t\t  && (TREE_INT_CST_LOW (arg1) & mask_lo) == mask_lo)\n+\t\t{\n+\t\t  tem_type = lang_hooks.types.signed_type (TREE_TYPE (tem));\n+\t\t  tem = fold_convert (tem_type, tem);\n+\t\t}\n+\t      else if ((TREE_INT_CST_HIGH (arg1) & mask_hi) == 0\n+\t\t       && (TREE_INT_CST_LOW (arg1) & mask_lo) == 0)\n+\t\t{\n+\t\t  tem_type = lang_hooks.types.unsigned_type (TREE_TYPE (tem));\n+\t\t  tem = fold_convert (tem_type, tem);\n+\t\t}\n+\t      else\n+\t\ttem = NULL;\n+\t    }\n+\n+\t  if (tem)\n+\t    return fold_convert (type,\n+\t\t\t\t fold_build2 (BIT_AND_EXPR,\n+\t\t\t\t\t      TREE_TYPE (tem), tem,\n+\t\t\t\t\t      fold_convert (TREE_TYPE (tem),\n+\t\t\t\t\t\t\t    arg1)));\n+\t}\n \n       /* (A >> N) & 1 ? (1 << N) : 0 is simply A & (1 << N).  A & 1 was\n \t already handled above.  */"}, {"sha": "bacc45a91e6e7b78b718eef48ce7d655334b04ea", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/789e604dfa7e323198db58ad181a4f7842e52aa8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/789e604dfa7e323198db58ad181a4f7842e52aa8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=789e604dfa7e323198db58ad181a4f7842e52aa8", "patch": "@@ -1,3 +1,9 @@\n+2006-11-05  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/29695\n+\t* gcc.c-torture/execute/pr29695-1.c: New test.\n+\t* gcc.c-torture/execute/pr29695-2.c: New test.\n+\n 2006-11-05  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/29565"}, {"sha": "9ecb3142509d218aa49d7d1b4bdad85db2e5757c", "filename": "gcc/testsuite/gcc.c-torture/execute/pr29695-1.c", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/789e604dfa7e323198db58ad181a4f7842e52aa8/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr29695-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/789e604dfa7e323198db58ad181a4f7842e52aa8/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr29695-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr29695-1.c?ref=789e604dfa7e323198db58ad181a4f7842e52aa8", "patch": "@@ -0,0 +1,83 @@\n+/* PR middle-end/29695 */\n+\n+extern void abort (void);\n+\n+int\n+f1 (void)\n+{\n+  int a = 128;\n+  return (a & 0x80) ? 0x80 : 0;\n+}\n+\n+int\n+f2 (void)\n+{\n+  unsigned char a = 128;\n+  return (a & 0x80) ? 0x80 : 0;\n+}\n+\n+int\n+f3 (void)\n+{\n+  unsigned char a = 128;\n+  return (a & 0x80) ? 0x380 : 0;\n+}\n+\n+int\n+f4 (void)\n+{\n+  unsigned char a = 128;\n+  return (a & 0x80) ? -128 : 0;\n+}\n+\n+long long\n+f5 (void)\n+{\n+  long long a = 0x80000000LL;\n+  return (a & 0x80000000) ? 0x80000000LL : 0LL;\n+}\n+\n+long long\n+f6 (void)\n+{\n+  unsigned int a = 0x80000000;\n+  return (a & 0x80000000) ? 0x80000000LL : 0LL;\n+}\n+\n+long long\n+f7 (void)\n+{\n+  unsigned int a = 0x80000000;\n+  return (a & 0x80000000) ? 0x380000000LL : 0LL;\n+}\n+\n+long long\n+f8 (void)\n+{\n+  unsigned int a = 0x80000000;\n+  return (a & 0x80000000) ? -2147483648LL : 0LL;\n+}\n+\n+int\n+main (void)\n+{\n+  if ((char) 128 != -128 || (int) 0x80000000 != -2147483648)\n+    return 0;\n+  if (f1 () != 128)\n+    abort ();\n+  if (f2 () != 128)\n+    abort ();\n+  if (f3 () != 896)\n+    abort ();\n+  if (f4 () != -128)\n+    abort ();\n+  if (f5 () != 0x80000000LL)\n+    abort ();\n+  if (f6 () != 0x80000000LL)\n+    abort ();\n+  if (f7 () != 0x380000000LL)\n+    abort ();\n+  if (f8 () != -2147483648LL)\n+    abort ();\n+  return 0;\n+}"}, {"sha": "339428e32792b3d6803e6da7eb3a37e5ba857731", "filename": "gcc/testsuite/gcc.c-torture/execute/pr29695-2.c", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/789e604dfa7e323198db58ad181a4f7842e52aa8/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr29695-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/789e604dfa7e323198db58ad181a4f7842e52aa8/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr29695-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr29695-2.c?ref=789e604dfa7e323198db58ad181a4f7842e52aa8", "patch": "@@ -0,0 +1,80 @@\n+/* PR middle-end/29695 */\n+\n+extern void abort (void);\n+\n+int a = 128;\n+unsigned char b = 128;\n+long long c = 0x80000000LL;\n+unsigned int d = 0x80000000;\n+\n+int\n+f1 (void)\n+{\n+  return (a & 0x80) ? 0x80 : 0;\n+}\n+\n+int\n+f2 (void)\n+{\n+  return (b & 0x80) ? 0x80 : 0;\n+}\n+\n+int\n+f3 (void)\n+{\n+  return (b & 0x80) ? 0x380 : 0;\n+}\n+\n+int\n+f4 (void)\n+{\n+  return (b & 0x80) ? -128 : 0;\n+}\n+\n+long long\n+f5 (void)\n+{\n+  return (c & 0x80000000) ? 0x80000000LL : 0LL;\n+}\n+\n+long long\n+f6 (void)\n+{\n+  return (d & 0x80000000) ? 0x80000000LL : 0LL;\n+}\n+\n+long long\n+f7 (void)\n+{\n+  return (d & 0x80000000) ? 0x380000000LL : 0LL;\n+}\n+\n+long long\n+f8 (void)\n+{\n+  return (d & 0x80000000) ? -2147483648LL : 0LL;\n+}\n+\n+int\n+main (void)\n+{\n+  if ((char) 128 != -128 || (int) 0x80000000 != -2147483648)\n+    return 0;\n+  if (f1 () != 128)\n+    abort ();\n+  if (f2 () != 128)\n+    abort ();\n+  if (f3 () != 896)\n+    abort ();\n+  if (f4 () != -128)\n+    abort ();\n+  if (f5 () != 0x80000000LL)\n+    abort ();\n+  if (f6 () != 0x80000000LL)\n+    abort ();\n+  if (f7 () != 0x380000000LL)\n+    abort ();\n+  if (f8 () != -2147483648LL)\n+    abort ();\n+  return 0;\n+}"}]}