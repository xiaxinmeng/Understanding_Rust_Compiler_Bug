{"sha": "8390b3354ddf6af5adad8a8d0bdc8482e4956371", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODM5MGIzMzU0ZGRmNmFmNWFkYWQ4YThkMGJkYzg0ODJlNDk1NjM3MQ==", "commit": {"author": {"name": "Andreas Schwab", "email": "schwab@linux-m68k.org", "date": "2010-11-07T20:48:57Z"}, "committer": {"name": "Andreas Schwab", "email": "schwab@gcc.gnu.org", "date": "2010-11-07T20:48:57Z"}, "message": "m68k.c (m68k_delegitimize_address): Update to handle all possible addressing modes.\n\n* config/m68k/m68k.c (m68k_delegitimize_address): Update to handle\nall possible addressing modes.\n\nFrom-SVN: r166422", "tree": {"sha": "180acb62ba18d330c076cf0767f3374e76f1f25c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/180acb62ba18d330c076cf0767f3374e76f1f25c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8390b3354ddf6af5adad8a8d0bdc8482e4956371", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8390b3354ddf6af5adad8a8d0bdc8482e4956371", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8390b3354ddf6af5adad8a8d0bdc8482e4956371", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8390b3354ddf6af5adad8a8d0bdc8482e4956371/comments", "author": {"login": "andreas-schwab", "id": 2175493, "node_id": "MDQ6VXNlcjIxNzU0OTM=", "avatar_url": "https://avatars.githubusercontent.com/u/2175493?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andreas-schwab", "html_url": "https://github.com/andreas-schwab", "followers_url": "https://api.github.com/users/andreas-schwab/followers", "following_url": "https://api.github.com/users/andreas-schwab/following{/other_user}", "gists_url": "https://api.github.com/users/andreas-schwab/gists{/gist_id}", "starred_url": "https://api.github.com/users/andreas-schwab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andreas-schwab/subscriptions", "organizations_url": "https://api.github.com/users/andreas-schwab/orgs", "repos_url": "https://api.github.com/users/andreas-schwab/repos", "events_url": "https://api.github.com/users/andreas-schwab/events{/privacy}", "received_events_url": "https://api.github.com/users/andreas-schwab/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "879cc7220f88933f80831178f7aac1754f3fc5a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/879cc7220f88933f80831178f7aac1754f3fc5a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/879cc7220f88933f80831178f7aac1754f3fc5a4"}], "stats": {"total": 78, "additions": 40, "deletions": 38}, "files": [{"sha": "ce49a50cd77de9bb41e0053b37b14987c0d860cf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8390b3354ddf6af5adad8a8d0bdc8482e4956371/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8390b3354ddf6af5adad8a8d0bdc8482e4956371/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8390b3354ddf6af5adad8a8d0bdc8482e4956371", "patch": "@@ -1,3 +1,8 @@\n+2010-11-07  Andreas Schwab  <schwab@linux-m68k.org>\n+\n+\t* config/m68k/m68k.c (m68k_delegitimize_address): Update to handle\n+\tall possible addressing modes.\n+\n 2010-11-07  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR tree-optimization/46346"}, {"sha": "0132cbf68926db71596b858589fcdcc0ec87003c", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 35, "deletions": 38, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8390b3354ddf6af5adad8a8d0bdc8482e4956371/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8390b3354ddf6af5adad8a8d0bdc8482e4956371/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=8390b3354ddf6af5adad8a8d0bdc8482e4956371", "patch": "@@ -4659,49 +4659,46 @@ m68k_output_dwarf_dtprel (FILE *file, int size, rtx x)\n static rtx\n m68k_delegitimize_address (rtx orig_x)\n {\n-  rtx x, y;\n-  rtx addend = NULL_RTX;\n-  rtx result;\n+  rtx x;\n+  struct m68k_address addr;\n+  rtx unspec;\n \n   orig_x = delegitimize_mem_from_attrs (orig_x);\n-  if (! MEM_P (orig_x))\n-    return orig_x;\n-\n-  x = XEXP (orig_x, 0);\n-\n-  if (GET_CODE (x) == PLUS\n-      && GET_CODE (XEXP (x, 1)) == CONST\n-      && REG_P (XEXP (x, 0))\n-      && REGNO (XEXP (x, 0)) == PIC_REG)\n-    {\n-      y = x = XEXP (XEXP (x, 1), 0);\n+  x = orig_x;\n+  if (MEM_P (x))\n+    x = XEXP (x, 0);\n \n-      /* Handle an addend.  */\n-      if ((GET_CODE (x) == PLUS || GET_CODE (x) == MINUS)\n-\t  && CONST_INT_P (XEXP (x, 1)))\n-\t{\n-\t  addend = XEXP (x, 1);\n-\t  x = XEXP (x, 0);\n-\t}\n+  if (GET_CODE (x) != PLUS || GET_MODE (x) != Pmode)\n+    return orig_x;\n \n-      if (GET_CODE (x) == UNSPEC\n-\t  && (XINT (x, 1) == UNSPEC_RELOC16\n-\t      || XINT (x, 1) == UNSPEC_RELOC32))\n-\t{\n-\t  result = XVECEXP (x, 0, 0);\n-\t  if (addend)\n-\t    {\n-\t      if (GET_CODE (y) == PLUS)\n-\t\tresult = gen_rtx_PLUS (Pmode, result, addend);\n-\t      else\n-\t\tresult = gen_rtx_MINUS (Pmode, result, addend);\n-\t      result = gen_rtx_CONST (Pmode, result);\n-\t    }\n-\t  return result;\n-\t}\n-    }\n+  if (!m68k_decompose_address (GET_MODE (x), x, false, &addr)\n+      || addr.offset == NULL_RTX\n+      || GET_CODE (addr.offset) != CONST)\n+    return orig_x;\n \n-  return orig_x;\n+  unspec = XEXP (addr.offset, 0);\n+  if (GET_CODE (unspec) == PLUS && CONST_INT_P (XEXP (unspec, 1)))\n+    unspec = XEXP (unspec, 0);\n+  if (GET_CODE (unspec) != UNSPEC \n+      || (XINT (unspec, 1) != UNSPEC_RELOC16\n+\t  && XINT (unspec, 1) != UNSPEC_RELOC32))\n+    return orig_x;\n+  x = XVECEXP (unspec, 0, 0);\n+  gcc_assert (GET_CODE (x) == SYMBOL_REF);\n+  if (unspec != XEXP (addr.offset, 0))\n+    x = gen_rtx_PLUS (Pmode, x, XEXP (XEXP (addr.offset, 0), 1));\n+  if (addr.index)\n+    {\n+      rtx idx = addr.index;\n+      if (addr.scale != 1)\n+\tidx = gen_rtx_MULT (Pmode, idx, GEN_INT (addr.scale));\n+      x = gen_rtx_PLUS (Pmode, idx, x);\n+    }\n+  if (addr.base)\n+    x = gen_rtx_PLUS (Pmode, addr.base, x);\n+  if (MEM_P (orig_x))\n+    x = replace_equiv_address_nv (orig_x, x);\n+  return x;\n }\n   \n \f"}]}