{"sha": "2eddfed1f242d4c8ab33faec15e52eef1cbff6f4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmVkZGZlZDFmMjQyZDRjOGFiMzNmYWVjMTVlNTJlZWYxY2JmZjZmNA==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "1997-09-02T05:33:19Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1997-09-02T05:33:19Z"}, "message": "pa.c (restore_unscaled_index_insn_codes): New function.\n\n        * pa.c (restore_unscaled_index_insn_codes): New function.\n        (record_unscaled_index_insn_codes): Likewise.\n        (output_function_prologue): Call restore_unscaled_index_insn_codes.\n        (output_function_epilogue): Free memory for unscaled_index_insn_codes.\n        (pa_reorg): Call record_unscaled_index_insn_codes.\n\nFrom-SVN: r15028", "tree": {"sha": "1f76551b201c3abb164c19c35d0350644103aef6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1f76551b201c3abb164c19c35d0350644103aef6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2eddfed1f242d4c8ab33faec15e52eef1cbff6f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2eddfed1f242d4c8ab33faec15e52eef1cbff6f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2eddfed1f242d4c8ab33faec15e52eef1cbff6f4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2eddfed1f242d4c8ab33faec15e52eef1cbff6f4/comments", "author": null, "committer": null, "parents": [{"sha": "c9e03727e0c20171c1b1dc0e5f3922b097bb527d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9e03727e0c20171c1b1dc0e5f3922b097bb527d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9e03727e0c20171c1b1dc0e5f3922b097bb527d"}], "stats": {"total": 119, "additions": 119, "deletions": 0}, "files": [{"sha": "d28a963dfa2579b8fd95876b936a7e467af1692b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2eddfed1f242d4c8ab33faec15e52eef1cbff6f4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2eddfed1f242d4c8ab33faec15e52eef1cbff6f4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2eddfed1f242d4c8ab33faec15e52eef1cbff6f4", "patch": "@@ -2,6 +2,12 @@ Mon Sep  1 22:13:18 1997  Jeffrey A Law  (law@cygnus.com)\n \n \t* version.c: Bump for snapshot.\n \n+\t* pa.c (restore_unscaled_index_insn_codes): New function.\n+\t(record_unscaled_index_insn_codes): Likewise.\n+\t(output_function_prologue): Call restore_unscaled_index_insn_codes.\n+\t(output_function_epilogue): Free memory for unscaled_index_insn_codes.\n+\t(pa_reorg): Call record_unscaled_index_insn_codes.\n+\n \t* haifa-sched.c (move_insn): Handle notes correctly for insns\n \twith SCHED_GROUP_P set.\n \t"}, {"sha": "37a7d494e5d93563c0e1af152565b8d38793e693", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 113, "deletions": 0, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2eddfed1f242d4c8ab33faec15e52eef1cbff6f4/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2eddfed1f242d4c8ab33faec15e52eef1cbff6f4/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=2eddfed1f242d4c8ab33faec15e52eef1cbff6f4", "patch": "@@ -37,6 +37,9 @@ Boston, MA 02111-1307, USA.  */\n #include \"expr.h\"\n #include \"obstack.h\"\n \n+static void restore_unscaled_index_insn_codes\t\tPROTO((rtx));\n+static void record_unscaled_index_insn_codes\t\tPROTO((rtx));\n+\n /* Save the operands last given to a compare for use when we\n    generate a scc or bcc insn.  */\n \n@@ -77,6 +80,13 @@ struct deferred_plabel\n } *deferred_plabels = 0;\n int n_deferred_plabels = 0;\n \n+/* Array indexed by INSN_UIDs holding the INSN_CODE of an insn which\n+   uses an unscaled indexed address before delay slot scheduling.  */\n+static int *unscaled_index_insn_codes;\n+\n+/* Upper bound for the array.  */\n+static int max_unscaled_index_insn_codes_uid;\n+\n void\n override_options ()\n {\n@@ -2567,6 +2577,9 @@ output_function_prologue (file, size)\n     total_code_bytes = -1;\n \n   remove_useless_addtr_insns (get_insns (), 0);\n+\n+  /* Restore INSN_CODEs for insn which use unscaled indexed addresses.  */\n+  restore_unscaled_index_insn_codes (get_insns ());\n }\n \n void\n@@ -2916,6 +2929,11 @@ output_function_epilogue (file, size)\n     fputs (\"\\tnop\\n\", file);\n \n   fputs (\"\\t.EXIT\\n\\t.PROCEND\\n\", file);\n+\n+  /* Free up stuff we don't need anymore.  */\n+  if (unscaled_index_insn_codes)\n+    free (unscaled_index_insn_codes);\n+  max_unscaled_index_insn_codes_uid = 0;\n }\n \n void\n@@ -5802,6 +5820,97 @@ following_call (insn)\n   return 0;\n }\n \n+/* Restore any INSN_CODEs for insns with unscaled indexed addresses since\n+   the INSN_CODE might be clobberd by rerecognition triggered by reorg.  */\n+\n+static void\n+restore_unscaled_index_insn_codes (insns)\n+     rtx insns;\n+{\n+  rtx insn;\n+\n+  for (insn = insns; insn; insn = NEXT_INSN (insn))\n+    {\n+      if (INSN_UID (insn) < max_unscaled_index_insn_codes_uid\n+\t  && unscaled_index_insn_codes[INSN_UID (insn)] != -1)\n+\tINSN_CODE (insn) = unscaled_index_insn_codes[INSN_UID (insn)];\n+    }\n+}\n+\n+/* Severe braindamage:\n+\n+   On the PA, address computations within MEM expressions are not\n+   commutative because of the implicit space register selection\n+   from the base register (instead of the entire effective address).\n+\n+   Because of this mis-feature we have to know which register in a reg+reg\n+   address is the base and which is the index.\n+\n+   Before reload, the base can be identified by REGNO_POINTER_FLAG.  We use\n+   this to force base + index addresses to match a different insn than\n+   index + base addresses.\n+\n+   We assume that no pass during or after reload creates new unscaled indexed\n+   addresses, so any unscaled indexed address we find after reload must have\n+   at one time been recognized a base + index or index + base and we accept\n+   any register as a base register.\n+\n+   This scheme assumes that no pass during/after reload will rerecognize an\n+   insn with an unscaled indexed address.  This failed due to a reorg call\n+   to rerecognize certain insns.\n+\n+   So, we record if an insn uses an unscaled indexed address and which\n+   register is the base (via recording of the INSN_CODE for such insns).\n+\n+   Just before we output code for the function, we make sure all the insns\n+   using unscaled indexed addresses have the same INSN_CODE as they did\n+   immediately before delay slot scheduling.\n+\n+   This is extremely gross.  Long term, I'd like to be able to look at\n+   REG_POINTER_FLAG to handle these kinds of problems.  */\n+ \n+static void\n+record_unscaled_index_insn_codes (insns)\n+     rtx insns;\n+{\n+  rtx insn;\n+\n+  max_unscaled_index_insn_codes_uid = get_max_uid ();\n+  unscaled_index_insn_codes\n+    = (int *)xmalloc (max_unscaled_index_insn_codes_uid * sizeof (int));\n+  memset (unscaled_index_insn_codes, -1,\n+\t  max_unscaled_index_insn_codes_uid * sizeof (int));\n+\n+  for (insn = insns; insn; insn = NEXT_INSN (insn))\n+    {\n+      rtx set = single_set (insn);\n+      rtx mem = NULL_RTX;\n+\n+      /* Ignore anything that isn't a normal SET.  */\n+      if (set == NULL_RTX)\n+\tcontinue;\n+\n+      /* No insns can have more than one MEM.  */\n+      if (GET_CODE (SET_SRC (set)) == MEM)\n+\tmem = SET_SRC (set);\n+\n+      if (GET_CODE (SET_DEST (set)) == MEM)\n+\tmem = SET_DEST (set);\n+\t\n+      /* If neither operand is a mem, then there's nothing to do.  */\n+      if (mem == NULL_RTX)\n+\tcontinue;\n+\n+      if (GET_CODE (XEXP (mem, 0)) != PLUS)\n+\tcontinue;\n+\n+      /* If both are REGs (or SUBREGs), then record the insn code for\n+\t this insn.  */\n+      if (REG_P (XEXP (XEXP (mem, 0), 0)) && REG_P (XEXP (XEXP (mem, 0), 1)))\n+        unscaled_index_insn_codes[INSN_UID (insn)] = INSN_CODE (insn);\n+    }\n+}\n+\n /* We use this hook to perform a PA specific optimization which is difficult\n    to do in earlier passes.\n \n@@ -5840,6 +5949,10 @@ pa_reorg (insns)\n {\n   rtx insn;\n \n+  /* Keep track of which insns have unscaled indexed addresses, and which\n+     register is the base address in such insns.  */\n+  record_unscaled_index_insn_codes (insns);\n+\n   remove_useless_addtr_insns (insns, 1);\n \n   pa_combine_instructions (get_insns ());"}]}