{"sha": "9585381acd709663a97f2c7b208a674a3ed4f4a9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTU4NTM4MWFjZDcwOTY2M2E5N2YyYzdiMjA4YTY3NGEzZWQ0ZjRhOQ==", "commit": {"author": {"name": "Torvald Riegel", "email": "triegel@redhat.com", "date": "2016-01-18T20:09:55Z"}, "committer": {"name": "Torvald Riegel", "email": "torvald@gcc.gnu.org", "date": "2016-01-18T20:09:55Z"}, "message": "libstdc++: Fix usage of __GXX_WEAK__ in TM TS support.\n\n\t* include/bits/c++config (_GLIBCXX_USE_WEAK_REF): New.\n\t(_GLIBCXX_TXN_SAFE, _GLIBCXX_TXN_SAFE_DYN): Use\t_GLIBCXX_USE_WEAK_REF\n\tand move after its definition.\n\t* config/os/aix/os_defines.h (_GLIBCXX_USE_WEAK_REF): Override.\n\t* src/c++11/cow-stdexcept.cc: Use _GLIBCXX_USE_WEAK_REF instead of\n\t__GXX_WEAK__, and only provide transactional clones if\n\t_GLIBCXX_USE_WEAK_REF is true.  Don't provide stubs of libitm\n\tfunctions.\n\nFrom-SVN: r232539", "tree": {"sha": "49ee6652da9adf8feed33f3c2f60477d6ac3e3a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/49ee6652da9adf8feed33f3c2f60477d6ac3e3a6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9585381acd709663a97f2c7b208a674a3ed4f4a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9585381acd709663a97f2c7b208a674a3ed4f4a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9585381acd709663a97f2c7b208a674a3ed4f4a9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9585381acd709663a97f2c7b208a674a3ed4f4a9/comments", "author": {"login": "triegelrh", "id": 62400967, "node_id": "MDQ6VXNlcjYyNDAwOTY3", "avatar_url": "https://avatars.githubusercontent.com/u/62400967?v=4", "gravatar_id": "", "url": "https://api.github.com/users/triegelrh", "html_url": "https://github.com/triegelrh", "followers_url": "https://api.github.com/users/triegelrh/followers", "following_url": "https://api.github.com/users/triegelrh/following{/other_user}", "gists_url": "https://api.github.com/users/triegelrh/gists{/gist_id}", "starred_url": "https://api.github.com/users/triegelrh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/triegelrh/subscriptions", "organizations_url": "https://api.github.com/users/triegelrh/orgs", "repos_url": "https://api.github.com/users/triegelrh/repos", "events_url": "https://api.github.com/users/triegelrh/events{/privacy}", "received_events_url": "https://api.github.com/users/triegelrh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "66bc83c2a7e472ea641697b85bbd2f4955611edf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66bc83c2a7e472ea641697b85bbd2f4955611edf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66bc83c2a7e472ea641697b85bbd2f4955611edf"}], "stats": {"total": 73, "additions": 45, "deletions": 28}, "files": [{"sha": "d68f5a529cda51886fa29ee8c70544715e5b9cb9", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9585381acd709663a97f2c7b208a674a3ed4f4a9/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9585381acd709663a97f2c7b208a674a3ed4f4a9/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=9585381acd709663a97f2c7b208a674a3ed4f4a9", "patch": "@@ -1,3 +1,14 @@\n+2016-01-18  Torvald Riegel  <triegel@redhat.com>\n+\n+\t* include/bits/c++config (_GLIBCXX_USE_WEAK_REF): New.\n+\t(_GLIBCXX_TXN_SAFE, _GLIBCXX_TXN_SAFE_DYN): Use\t_GLIBCXX_USE_WEAK_REF\n+\tand move after its definition.\n+\t* config/os/aix/os_defines.h (_GLIBCXX_USE_WEAK_REF): Override.\n+\t* src/c++11/cow-stdexcept.cc: Use _GLIBCXX_USE_WEAK_REF instead of\n+\t__GXX_WEAK__, and only provide transactional clones if\n+\t_GLIBCXX_USE_WEAK_REF is true.  Don't provide stubs of libitm\n+\tfunctions.\n+\n 2016-01-18  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/60637"}, {"sha": "09494468768dcd7cf78b0dab1752a2ad42008907", "filename": "libstdc++-v3/config/os/aix/os_defines.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9585381acd709663a97f2c7b208a674a3ed4f4a9/libstdc%2B%2B-v3%2Fconfig%2Fos%2Faix%2Fos_defines.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9585381acd709663a97f2c7b208a674a3ed4f4a9/libstdc%2B%2B-v3%2Fconfig%2Fos%2Faix%2Fos_defines.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Faix%2Fos_defines.h?ref=9585381acd709663a97f2c7b208a674a3ed4f4a9", "patch": "@@ -48,4 +48,7 @@\n #define __COMPATMATH__\n #endif\n \n+// No support for referencing weak symbols without a definition.\n+#define _GLIBCXX_USE_WEAK_REF 0\n+\n #endif"}, {"sha": "57024e40ec0de20263e3d23170a03a9706df650d", "filename": "libstdc++-v3/include/bits/c++config", "status": "modified", "additions": 22, "deletions": 14, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9585381acd709663a97f2c7b208a674a3ed4f4a9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9585381acd709663a97f2c7b208a674a3ed4f4a9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig?ref=9585381acd709663a97f2c7b208a674a3ed4f4a9", "patch": "@@ -483,20 +483,6 @@ namespace std\n \n #define _GLIBCXX_USE_ALLOCATOR_NEW\n \n-// Conditionally enable annotations for the Transactional Memory TS on C++11.\n-// Most of the following conditions are due to limitations in the current\n-// implementation.\n-#if __cplusplus >= 201103L && _GLIBCXX_USE_CXX11_ABI\t\t\t\\\n-  && _GLIBCXX_USE_DUAL_ABI && __cpp_transactional_memory >= 201505L\t\\\n-  &&  !_GLIBCXX_FULLY_DYNAMIC_STRING && __GXX_WEAK__ \t\t\t\\\n-  && _GLIBCXX_USE_ALLOCATOR_NEW\n-#define _GLIBCXX_TXN_SAFE transaction_safe\n-#define _GLIBCXX_TXN_SAFE_DYN transaction_safe_dynamic\n-#else\n-#define _GLIBCXX_TXN_SAFE\n-#define _GLIBCXX_TXN_SAFE_DYN\n-#endif\n-\n #else // !__cplusplus\n # define _GLIBCXX_BEGIN_EXTERN_C\n # define _GLIBCXX_END_EXTERN_C\n@@ -524,6 +510,28 @@ namespace std\n # define _GLIBCXX_WEAK_DEFINITION\n #endif\n \n+// By default, we assume that __GXX_WEAK__ also means that there is support\n+// for declaring functions as weak while not defining such functions.  This\n+// allows for referring to functions provided by other libraries (e.g.,\n+// libitm) without depending on them if the respective features are not used.\n+#ifndef _GLIBCXX_USE_WEAK_REF\n+# define _GLIBCXX_USE_WEAK_REF __GXX_WEAK__\n+#endif\n+\n+// Conditionally enable annotations for the Transactional Memory TS on C++11.\n+// Most of the following conditions are due to limitations in the current\n+// implementation.\n+#if __cplusplus >= 201103L && _GLIBCXX_USE_CXX11_ABI\t\t\t\\\n+  && _GLIBCXX_USE_DUAL_ABI && __cpp_transactional_memory >= 201505L\t\\\n+  &&  !_GLIBCXX_FULLY_DYNAMIC_STRING && _GLIBCXX_USE_WEAK_REF\t\t\\\n+  && _GLIBCXX_USE_ALLOCATOR_NEW\n+#define _GLIBCXX_TXN_SAFE transaction_safe\n+#define _GLIBCXX_TXN_SAFE_DYN transaction_safe_dynamic\n+#else\n+#define _GLIBCXX_TXN_SAFE\n+#define _GLIBCXX_TXN_SAFE_DYN\n+#endif\n+\n \n // The remainder of the prewritten config is automatic; all the\n // user hooks are listed above."}, {"sha": "a0f505c218755ca522a6f8066a73a3e08375d3f1", "filename": "libstdc++-v3/src/c++11/cow-stdexcept.cc", "status": "modified", "additions": 9, "deletions": 14, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9585381acd709663a97f2c7b208a674a3ed4f4a9/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcow-stdexcept.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9585381acd709663a97f2c7b208a674a3ed4f4a9/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcow-stdexcept.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcow-stdexcept.cc?ref=9585381acd709663a97f2c7b208a674a3ed4f4a9", "patch": "@@ -179,6 +179,13 @@ _GLIBCXX_END_NAMESPACE_VERSION\n // Furthermore, _Rep will always have been allocated or deallocated via\n // global new or delete, so nontransactional writes we do to _Rep cannot\n // interfere with transactional accesses.\n+\n+// We depend on having support for referencing functions declared weak that\n+// are not defined by us.  Without such support, the exceptions will not be\n+// declared transaction-safe, so we just don't provide transactional clones\n+// in this case.\n+#if _GLIBCXX_USE_WEAK_REF\n+\n extern \"C\" {\n \n #ifndef _GLIBCXX_MANGLE_SIZE_T\n@@ -195,7 +202,6 @@ extern \"C\" {\n # define ITM_REGPARM\n #endif\n \n-#if __GXX_WEAK__\n // Declare all libitm symbols we rely on, but make them weak so that we do\n // not depend on libitm.\n extern void* _ZGTtnaX (size_t sz) __attribute__((weak));\n@@ -213,19 +219,6 @@ extern void _ITM_memcpyRnWt(void *, const void *, size_t)\n extern void _ITM_addUserCommitAction(void (*)(void *), uint64_t, void *)\n   ITM_REGPARM __attribute__((weak));\n \n-#else\n-// If there is no support for weak symbols, create dummies.  The exceptions\n-// will not be declared transaction_safe in this case.\n-void* _ZGTtnaX (size_t) { return NULL; }\n-void _ZGTtdlPv (void*) { }\n-uint8_t _ITM_RU1(const uint8_t *) { return 0; }\n-uint32_t _ITM_RU4(const uint32_t *) { return 0; }\n-uint64_t _ITM_RU8(const uint64_t *) { return 0; }\n-void _ITM_memcpyRtWn(void *, const void *, size_t) { }\n-void _ITM_memcpyRnWt(void *, const void *, size_t) { }\n-void _ITM_addUserCommitAction(void (*)(void *), uint64_t, void *) { };\n-#endif\n-\n }\n \n // A transactional version of basic_string::basic_string(const char *s)\n@@ -441,3 +434,5 @@ CTORDTOR(14overflow_error, std::overflow_error, runtime_error)\n CTORDTOR(15underflow_error, std::underflow_error, runtime_error)\n \n }\n+\n+#endif  // _GLIBCXX_USE_WEAK_REF"}]}