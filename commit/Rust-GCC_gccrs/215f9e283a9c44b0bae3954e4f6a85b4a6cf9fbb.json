{"sha": "215f9e283a9c44b0bae3954e4f6a85b4a6cf9fbb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjE1ZjllMjgzYTljNDRiMGJhZTM5NTRlNGY2YTg1YjRhNmNmOWZiYg==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2003-06-27T07:25:38Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2003-06-27T07:25:38Z"}, "message": "ios_base.h (ios_base::_M_getloc): Return reference to the imbued locale.\n\n\n2003-06-26  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* include/bits/ios_base.h (ios_base::_M_getloc): Return reference\n\tto the imbued locale.\n\t* include/bits/locale_facets.tcc (num_put::_M_convert_int): Use\n\t_M_getloc.\n\t(num_put::_M_convert_float): Use.\n\n2003-06-26  Benjamin Kosnik  <bkoz@redhat.com>\n\t    Jerry Quinn  <jlquinn@optonline.net>\n\n\t* config/linker-map.gnu: Add __numpunct_cache.\n\t* config/locale/gnu/numeric_members.cc\n\t(numpunct::_M_initialize_numpunct): Account for _M_data, fill in\n\tall elements for \"C\" locale.\n\t(numpunct::~numpunct): Delete _M_data.\n\t* config/locale/generic/numeric_members.cc: Same.\n\t* include/bits/basic_ios.tcc\n\t(basic_ios::init): Remove __locale_cache bits.\n\t(basic_ios::_M_cache_locale): Same.\n\t* include/bits/ios_base.h: Same. Tweaks.\n\t* include/bits/locale_classes.h: Tweaks. Reorder classes.\n\t(__use_cache): Make friends with _Impl, locale.\n\t(_Impl::_M_caches): Add.\n\t(_Impl::_M_install_cache): Add.\n\t* include/bits/locale_facets.h (__numpunct_cache): New.\n\t(numpunct): Encapsulate data members in __numpunct_cache member,\n\t_M_data. Adjust virtuals.\n\t(numpunct::numpunct): New ctor for the same.\n\t(__locale_cache_base): Remove.\n\t(__locale_cache): Remove.\n\t* include/bits/locale_facets.tcc (__use_cache): New function,\n\tspecializations.\n\t(num_put::_M_convert_int, _M_convert_float, do_put): Use it.\n\t* src/globals.cc: Add cache_vec, numpunct_cache_c, numpunct_cache_w.\n\t* src/ios.cc (ios_base::ios_base): Remove __locale_cache.\n\t* src/locale-inst.cc: Same. Add __numpunct_cache.\n\t* src/locale.cc: Tweak inlines.\n\t(__use_cache): Define specializations.\n\t* src/localename.cc: Use global bits.\n\t(_Impl::~Impl): Deal with __numpunct_cache destruction.\n\t(_Impl::_Impl): Same. Pre-cache standard numpunct facets.\n\t(_Impl::_M_init_facet): Take into account __numpunct_cache.\n\t* testsuite/27_io/ios_base/cons/assign_neg.cc: Update line numbers.\n\t* testsuite/27_io/ios_base/cons/copy_neg.cc: Same.\n\nCo-Authored-By: Jerry Quinn <jlquinn@optonline.net>\n\nFrom-SVN: r68558", "tree": {"sha": "55f27f578e57b31cc0b90efe9cb35cc77809288e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/55f27f578e57b31cc0b90efe9cb35cc77809288e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/215f9e283a9c44b0bae3954e4f6a85b4a6cf9fbb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/215f9e283a9c44b0bae3954e4f6a85b4a6cf9fbb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/215f9e283a9c44b0bae3954e4f6a85b4a6cf9fbb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/215f9e283a9c44b0bae3954e4f6a85b4a6cf9fbb/comments", "author": null, "committer": null, "parents": [{"sha": "d51d146fb0b430c15bac310bd4bc5531efc1a6cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d51d146fb0b430c15bac310bd4bc5531efc1a6cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d51d146fb0b430c15bac310bd4bc5531efc1a6cc"}], "stats": {"total": 935, "additions": 620, "deletions": 315}, "files": [{"sha": "4572136f010cc851089bc1b6cbb40d8ec8cdfe84", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/215f9e283a9c44b0bae3954e4f6a85b4a6cf9fbb/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/215f9e283a9c44b0bae3954e4f6a85b4a6cf9fbb/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=215f9e283a9c44b0bae3954e4f6a85b4a6cf9fbb", "patch": "@@ -1,3 +1,49 @@\n+2003-06-26  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* include/bits/ios_base.h (ios_base::_M_getloc): Return reference\n+\tto the imbued locale.\n+\t* include/bits/locale_facets.tcc (num_put::_M_convert_int): Use\n+\t_M_getloc.\n+\t(num_put::_M_convert_float): Use.\n+\n+2003-06-26  Benjamin Kosnik  <bkoz@redhat.com>\n+\t    Jerry Quinn  <jlquinn@optonline.net>\n+\n+\t* config/linker-map.gnu: Add __numpunct_cache.\n+\t* config/locale/gnu/numeric_members.cc\n+\t(numpunct::_M_initialize_numpunct): Account for _M_data, fill in\n+\tall elements for \"C\" locale.\n+\t(numpunct::~numpunct): Delete _M_data.\n+\t* config/locale/generic/numeric_members.cc: Same.\t\n+\t* include/bits/basic_ios.tcc\n+\t(basic_ios::init): Remove __locale_cache bits.\n+\t(basic_ios::_M_cache_locale): Same.\n+\t* include/bits/ios_base.h: Same. Tweaks. \n+\t* include/bits/locale_classes.h: Tweaks. Reorder classes.\n+\t(__use_cache): Make friends with _Impl, locale.\n+\t(_Impl::_M_caches): Add.\n+\t(_Impl::_M_install_cache): Add.\n+\t* include/bits/locale_facets.h (__numpunct_cache): New.\n+\t(numpunct): Encapsulate data members in __numpunct_cache member,\n+\t_M_data. Adjust virtuals.\n+\t(numpunct::numpunct): New ctor for the same. \n+\t(__locale_cache_base): Remove.\n+\t(__locale_cache): Remove.\t\n+\t* include/bits/locale_facets.tcc (__use_cache): New function,\n+\tspecializations.\n+\t(num_put::_M_convert_int, _M_convert_float, do_put): Use it.\n+\t* src/globals.cc: Add cache_vec, numpunct_cache_c, numpunct_cache_w.\n+\t* src/ios.cc (ios_base::ios_base): Remove __locale_cache.\n+\t* src/locale-inst.cc: Same. Add __numpunct_cache.\n+\t* src/locale.cc: Tweak inlines.\n+\t(__use_cache): Define specializations.\n+\t* src/localename.cc: Use global bits.\n+\t(_Impl::~Impl): Deal with __numpunct_cache destruction.\n+\t(_Impl::_Impl): Same. Pre-cache standard numpunct facets.\n+\t(_Impl::_M_init_facet): Take into account __numpunct_cache.\n+\t* testsuite/27_io/ios_base/cons/assign_neg.cc: Update line numbers.\n+\t* testsuite/27_io/ios_base/cons/copy_neg.cc: Same.\n+\n 2003-06-26  Nathan C. Myers  <ncm-nospam@cantrip.org>\n             Paolo Carlini  <pcarlini@unitus.it>\n "}, {"sha": "21bdfd322a87ac9773c69eca1c7024a5c4fc8e2c", "filename": "libstdc++-v3/config/linker-map.gnu", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/215f9e283a9c44b0bae3954e4f6a85b4a6cf9fbb/libstdc%2B%2B-v3%2Fconfig%2Flinker-map.gnu", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/215f9e283a9c44b0bae3954e4f6a85b4a6cf9fbb/libstdc%2B%2B-v3%2Fconfig%2Flinker-map.gnu", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flinker-map.gnu?ref=215f9e283a9c44b0bae3954e4f6a85b4a6cf9fbb", "patch": "@@ -55,7 +55,8 @@ GLIBCPP_3.4 {\n       std::__num_base::_S_format_float*;\n       std::__num_base::_S_format_int*;\n       std::__num_base::_S_atoms_in;\n-      std::__num_base::_S_atoms_out\n+      std::__num_base::_S_atoms_out;\n+      std::__numpunct_cache*;\n     };\n \n     # Names not in an 'extern' block are mangled names."}, {"sha": "320f0ff4ba1ebbd1f5f813004b8e572741bfa263", "filename": "libstdc++-v3/config/locale/generic/numeric_members.cc", "status": "modified", "additions": 49, "deletions": 13, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/215f9e283a9c44b0bae3954e4f6a85b4a6cf9fbb/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fnumeric_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/215f9e283a9c44b0bae3954e4f6a85b4a6cf9fbb/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fnumeric_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fnumeric_members.cc?ref=215f9e283a9c44b0bae3954e4f6a85b4a6cf9fbb", "patch": "@@ -1,6 +1,6 @@\n // std::numpunct implementation details, generic version -*- C++ -*-\n \n-// Copyright (C) 2001, 2002 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -42,32 +42,68 @@ namespace std\n     numpunct<char>::_M_initialize_numpunct(__c_locale)\n     {\n       // \"C\" locale\n-      _M_decimal_point = '.';\n-      _M_thousands_sep = ',';\n-      _M_grouping = \"\";\n-      _M_truename = \"true\";\n-      _M_falsename = \"false\";\n+      if (!_M_data)\n+\t_M_data = new __numpunct_cache<char>;\n+\n+      _M_data->_M_grouping = \"\";\n+      _M_data->_M_use_grouping = false;\n+\n+      _M_data->_M_decimal_point = '.';\n+      _M_data->_M_thousands_sep = ',';\n+      \n+      for (size_t i = 0; i < __num_base::_S_oend; ++i)\n+\t_M_data->_M_atoms_out[i] = __num_base::_S_atoms_out[i];\n+      _M_data->_M_atoms_out[__num_base::_S_oend] = wchar_t();\n+      \n+      for (size_t i = 0; i < __num_base::_S_iend; ++i)\n+\t_M_data->_M_atoms_in[i] = __num_base::_S_atoms_in[i];\n+      _M_data->_M_atoms_in[__num_base::_S_iend] = wchar_t();\n+\n+      _M_data->_M_truename = \"true\";\n+      _M_data->_M_falsename = \"false\";      \n     }\n \n   template<> \n     numpunct<char>::~numpunct()\n-    { }\n+    { delete _M_data; }\n       \n #ifdef _GLIBCPP_USE_WCHAR_T\n   template<> \n     void\n     numpunct<wchar_t>::_M_initialize_numpunct(__c_locale)\n     {\n       // \"C\" locale\n-      _M_decimal_point = L'.';\n-      _M_thousands_sep = L',';\n-      _M_grouping = \"\";\n-      _M_truename = L\"true\";\n-      _M_falsename = L\"false\";\n+      if (!_M_data)\n+\t_M_data = new __numpunct_cache<wchar_t>;\n+\n+      _M_data->_M_grouping = \"\";\n+      _M_data->_M_use_grouping = false;\n+      \n+      _M_data->_M_decimal_point = L'.';\n+      _M_data->_M_thousands_sep = L',';\n+      \n+      // Use ctype::widen code without the facet...\n+      unsigned char uc;\n+      for (size_t i = 0; i < __num_base::_S_oend; ++i)\n+\t{\n+\t  uc = static_cast<unsigned char>(__num_base::_S_atoms_out[i]);\n+\t  _M_data->_M_atoms_out[i] = btowc(uc);\n+\t}\n+      _M_data->_M_atoms_out[__num_base::_S_oend] = wchar_t();\n+      \n+      for (size_t i = 0; i < __num_base::_S_iend; ++i)\n+\t{\n+\t  uc = static_cast<unsigned char>(__num_base::_S_atoms_in[i]);\n+\t  _M_data->_M_atoms_in[i] = btowc(uc);\n+\t}\n+      _M_data->_M_atoms_in[__num_base::_S_iend] = wchar_t();\n+      \n+      _M_data->_M_truename = L\"true\";\n+      _M_data->_M_falsename = L\"false\";\n     }\n \n   template<> \n     numpunct<wchar_t>::~numpunct()\n-    { }\n+    { delete _M_data; }\n #endif\n }"}, {"sha": "dd8c76b38f30bbdf91d46d5e0b0a3b5c743cf08b", "filename": "libstdc++-v3/config/locale/gnu/numeric_members.cc", "status": "modified", "additions": 66, "deletions": 24, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/215f9e283a9c44b0bae3954e4f6a85b4a6cf9fbb/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fnumeric_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/215f9e283a9c44b0bae3954e4f6a85b4a6cf9fbb/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fnumeric_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fnumeric_members.cc?ref=215f9e283a9c44b0bae3954e4f6a85b4a6cf9fbb", "patch": "@@ -1,6 +1,6 @@\n // std::numpunct implementation details, GNU version -*- C++ -*-\n \n-// Copyright (C) 2001, 2002 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -42,70 +42,112 @@ namespace std\n     void\n     numpunct<char>::_M_initialize_numpunct(__c_locale __cloc)\n     {\n+      if (!_M_data)\n+\t_M_data = new __numpunct_cache<char>;\n+\n       if (!__cloc)\n \t{\n \t  // \"C\" locale\n-\t  _M_decimal_point = '.';\n-\t  _M_thousands_sep = ',';\n-\t  _M_grouping = \"\";\n+\t  _M_data->_M_grouping = \"\";\n+\t  _M_data->_M_use_grouping = false;\n+\n+\t  _M_data->_M_decimal_point = '.';\n+\t  _M_data->_M_thousands_sep = ',';\n+\n+\t  for (size_t i = 0; i < __num_base::_S_oend; ++i)\n+\t    _M_data->_M_atoms_out[i] = __num_base::_S_atoms_out[i];\n+\t  _M_data->_M_atoms_out[__num_base::_S_oend] = wchar_t();\n+\n+\t  for (size_t i = 0; i < __num_base::_S_iend; ++i)\n+\t    _M_data->_M_atoms_in[i] = __num_base::_S_atoms_in[i];\n+\t  _M_data->_M_atoms_in[__num_base::_S_iend] = wchar_t();\n \t}\n       else\n \t{\n \t  // Named locale.\n-\t  _M_decimal_point = *(__nl_langinfo_l(RADIXCHAR, __cloc));\n-\t  _M_thousands_sep = *(__nl_langinfo_l(THOUSEP, __cloc));\n-\t  // Check for NUL, which implies no grouping.\n-\t  if (_M_thousands_sep == '\\0')\n-\t    _M_grouping = \"\";\n+\t  _M_data->_M_decimal_point = *(__nl_langinfo_l(RADIXCHAR, __cloc));\n+\t  _M_data->_M_thousands_sep = *(__nl_langinfo_l(THOUSEP, __cloc));\n+\n+\t  // Check for NULL, which implies no grouping.\n+\t  if (_M_data->_M_thousands_sep == '\\0')\n+\t    _M_data->_M_grouping = \"\";\n \t  else\n-\t    _M_grouping = __nl_langinfo_l(GROUPING, __cloc);\n+\t    _M_data->_M_grouping = __nl_langinfo_l(GROUPING, __cloc);\n \t}\n       // NB: There is no way to extact this info from posix locales.\n       // _M_truename = __nl_langinfo_l(YESSTR, __cloc);\n-      _M_truename = \"true\";\n+      _M_data->_M_truename = \"true\";\n       // _M_falsename = __nl_langinfo_l(NOSTR, __cloc);\n-      _M_falsename = \"false\";\n+      _M_data->_M_falsename = \"false\";\n     }\n  \n   template<> \n     numpunct<char>::~numpunct()\n-    { }\n+    { delete _M_data; }\n    \n #ifdef _GLIBCPP_USE_WCHAR_T\n   template<> \n     void\n     numpunct<wchar_t>::_M_initialize_numpunct(__c_locale __cloc)\n     {\n+      if (!_M_data)\n+\t_M_data = new __numpunct_cache<wchar_t>;\n+\n       if (!__cloc)\n \t{\n \t  // \"C\" locale\n-\t  _M_decimal_point = L'.';\n-\t  _M_thousands_sep = L',';\n-\t  _M_grouping = \"\";\n+\t  _M_data->_M_grouping = \"\";\n+\t  _M_data->_M_use_grouping = false;\n+\n+\t  _M_data->_M_decimal_point = L'.';\n+\t  _M_data->_M_thousands_sep = L',';\n+\n+#if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2)\n+\t  __c_locale __old = __uselocale(_S_c_locale);\n+#endif\n+\t  // Use ctype::widen code without the facet...\n+\t  unsigned char uc;\n+\t  for (size_t i = 0; i < __num_base::_S_oend; ++i)\n+\t    {\n+\t      uc = static_cast<unsigned char>(__num_base::_S_atoms_out[i]);\n+\t      _M_data->_M_atoms_out[i] = btowc(uc);\n+\t    }\n+\t  _M_data->_M_atoms_out[__num_base::_S_oend] = wchar_t();\n+\n+\t  for (size_t i = 0; i < __num_base::_S_iend; ++i)\n+\t    {\n+\t      uc = static_cast<unsigned char>(__num_base::_S_atoms_in[i]);\n+\t      _M_data->_M_atoms_in[i] = btowc(uc);\n+\t    }\n+\t  _M_data->_M_atoms_in[__num_base::_S_iend] = wchar_t();\n+#if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2)\n+\t  __uselocale(__old);\n+#endif\n \t}\n       else\n \t{\n \t  // Named locale.\n \t  union __s_and_w { const char *__s; unsigned int __w; } __u;\n \t  __u.__s = __nl_langinfo_l(_NL_NUMERIC_DECIMAL_POINT_WC, __cloc);\n-\t  _M_decimal_point = static_cast<wchar_t>(__u.__w);\n+\t  _M_data->_M_decimal_point = static_cast<wchar_t>(__u.__w);\n \n \t  __u.__s = __nl_langinfo_l(_NL_NUMERIC_THOUSANDS_SEP_WC, __cloc);\n-\t  _M_thousands_sep = static_cast<wchar_t>(__u.__w);\n-\t  if (_M_thousands_sep == L'\\0')\n-\t    _M_grouping = \"\";\n+\t  _M_data->_M_thousands_sep = static_cast<wchar_t>(__u.__w);\n+\n+\t  if (_M_data->_M_thousands_sep == L'\\0')\n+\t    _M_data->_M_grouping = \"\";\n \t  else\n-\t    _M_grouping = __nl_langinfo_l(GROUPING, __cloc);\n+\t    _M_data->_M_grouping = __nl_langinfo_l(GROUPING, __cloc);\n \t}\n       // NB: There is no way to extact this info from posix locales.\n       // _M_truename = __nl_langinfo_l(YESSTR, __cloc);\n-      _M_truename = L\"true\";\n+      _M_data->_M_truename = L\"true\";\n       // _M_falsename = __nl_langinfo_l(NOSTR, __cloc);\n-      _M_falsename = L\"false\";\n+      _M_data->_M_falsename = L\"false\";\n     }\n \n   template<> \n     numpunct<wchar_t>::~numpunct()\n-    { }\n+    { delete _M_data; }\n  #endif\n }"}, {"sha": "54f34b599e521b5aa1af87b5e8b1efc9be7b610a", "filename": "libstdc++-v3/include/bits/basic_ios.tcc", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/215f9e283a9c44b0bae3954e4f6a85b4a6cf9fbb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/215f9e283a9c44b0bae3954e4f6a85b4a6cf9fbb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.tcc?ref=215f9e283a9c44b0bae3954e4f6a85b4a6cf9fbb", "patch": "@@ -138,12 +138,7 @@ namespace std\n       ios_base::_M_init();\n \n       // Cache locale data and specific facets used by iostreams.\n-      if (!_M_locale_cache.get())\n-\t{\n-\t  typedef __locale_cache<_CharT> __cache_t;\n-\t  this->_M_locale_cache = auto_ptr<__locale_cache_base>(static_cast<__locale_cache_base*>(new __cache_t));\n-\t  _M_cache_locale(_M_ios_locale);\n-\t}\n+      _M_cache_locale(_M_ios_locale);\n \n       // NB: The 27.4.4.1 Postconditions Table specifies requirements\n       // after basic_ios::init() has been called. As part of this,\n@@ -176,7 +171,6 @@ namespace std\n \t_M_num_put = &use_facet<__numput_type>(__loc); \n       if (__builtin_expect(has_facet<__numget_type>(__loc), true))\n \t_M_num_get = &use_facet<__numget_type>(__loc); \n-      static_cast<__locale_cache<_CharT>&>(_M_cache())._M_init(__loc); \n     }\n \n   // Inhibit implicit instantiations for required instantiations,"}, {"sha": "ef2f57ab0f89a0d8376e6b31ef2ea034767fa173", "filename": "libstdc++-v3/include/bits/ios_base.h", "status": "modified", "additions": 42, "deletions": 12, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/215f9e283a9c44b0bae3954e4f6a85b4a6cf9fbb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/215f9e283a9c44b0bae3954e4f6a85b4a6cf9fbb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h?ref=215f9e283a9c44b0bae3954e4f6a85b4a6cf9fbb", "patch": "@@ -146,8 +146,6 @@ namespace std\n \n   enum _Ios_Seekdir { _S_ios_seekdir_end = 1L << 16 };\n \n-  class __locale_cache_base;\n-\n   // 27.4.2  Class ios_base\n   /**\n    *  @brief  The very top of the I/O class hierarchy.\n@@ -212,47 +210,65 @@ namespace std\n      *  - floatfield\n     */\n     typedef _Ios_Fmtflags fmtflags;\n+\n     /// Insert/extract @c bool in alphabetic rather than numeric format.\n     static const fmtflags boolalpha =   fmtflags(__ios_flags::_S_boolalpha);\n+\n     /// Converts integer input or generates integer output in decimal base.\n     static const fmtflags dec =         fmtflags(__ios_flags::_S_dec);\n+\n     /// Generate floating-point output in fixed-point notation.\n     static const fmtflags fixed =       fmtflags(__ios_flags::_S_fixed);\n+\n     /// Converts integer input or generates integer output in hexadecimal base.\n     static const fmtflags hex =         fmtflags(__ios_flags::_S_hex);\n+\n     /// Adds fill characters at a designated internal point in certain\n     /// generated output, or identical to @c right if no such point is\n     /// designated.\n     static const fmtflags internal =    fmtflags(__ios_flags::_S_internal);\n+\n     /// Adds fill characters on the right (final positions) of certain\n     /// generated output.  (I.e., the thing you print is flush left.)\n     static const fmtflags left =        fmtflags(__ios_flags::_S_left);\n+\n     /// Converts integer input or generates integer output in octal base.\n     static const fmtflags oct =         fmtflags(__ios_flags::_S_oct);\n+\n     /// Adds fill characters on the left (initial positions) of certain\n     /// generated output.  (I.e., the thing you print is flush right.)\n     static const fmtflags right =       fmtflags(__ios_flags::_S_right);\n+\n     /// Generates floating-point output in scientific notation.\n     static const fmtflags scientific =  fmtflags(__ios_flags::_S_scientific);\n+\n     /// Generates a prefix indicating the numeric base of generated integer\n     /// output.\n     static const fmtflags showbase =    fmtflags(__ios_flags::_S_showbase);\n+\n     /// Generates a decimal-point character unconditionally in generated\n     /// floating-point output.\n     static const fmtflags showpoint =   fmtflags(__ios_flags::_S_showpoint);\n+\n     /// Generates a + sign in non-negative generated numeric output.\n     static const fmtflags showpos =     fmtflags(__ios_flags::_S_showpos);\n+\n     /// Skips leading white space before certain input operations.\n     static const fmtflags skipws =      fmtflags(__ios_flags::_S_skipws);\n+\n     /// Flushes output after each output operation.\n     static const fmtflags unitbuf =     fmtflags(__ios_flags::_S_unitbuf);\n+\n     /// Replaces certain lowercase letters with their uppercase equivalents\n     /// in generated output.\n     static const fmtflags uppercase =   fmtflags(__ios_flags::_S_uppercase);\n+\n     /// A mask of left|right|internal.  Useful for the 2-arg form of @c setf.\n     static const fmtflags adjustfield = fmtflags(__ios_flags::_S_adjustfield);\n+\n     /// A mask of dec|oct|hex.  Useful for the 2-arg form of @c setf.\n     static const fmtflags basefield =   fmtflags(__ios_flags::_S_basefield);\n+\n     /// A mask of scientific|fixed.  Useful for the 2-arg form of @c setf.\n     static const fmtflags floatfield =  fmtflags(__ios_flags::_S_floatfield);\n \n@@ -269,15 +285,19 @@ namespace std\n      *  - goodbit\n     */\n     typedef _Ios_Iostate iostate;\n+\n     /// Indicates a loss of integrity in an input or output sequence (such\n     /// as an irrecoverable read error from a file).\n     static const iostate badbit =  \tiostate(__ios_flags::_S_badbit);\n+\n     /// Indicates that an input operation reached the end of an input sequence.\n     static const iostate eofbit =  \tiostate(__ios_flags::_S_eofbit);\n+\n     /// Indicates that an input operation failed to read the expected\n     /// characters, or that an output operation failed to generate the\n     /// desired characters.\n     static const iostate failbit = \tiostate(__ios_flags::_S_failbit);\n+\n     /// Indicates all is well.\n     static const iostate goodbit = \tiostate(0);\n \n@@ -296,19 +316,25 @@ namespace std\n      *  - trunc\n     */\n     typedef _Ios_Openmode openmode;\n+\n     /// Seek to end before each write.\n     static const openmode app =    \topenmode(__ios_flags::_S_app);\n+\n     /// Open and seek to end immediately after opening.\n     static const openmode ate =    \topenmode(__ios_flags::_S_ate);\n+\n     /// Perform input and output in binary mode (as opposed to text mode).\n     /// This is probably not what you think it is; see\n     /// http://gcc.gnu.org/onlinedocs/libstdc++/27_io/howto.html#3 and\n     /// http://gcc.gnu.org/onlinedocs/libstdc++/27_io/howto.html#7 for more.\n     static const openmode binary = \topenmode(__ios_flags::_S_bin);\n+\n     /// Open for input.  Default for @c ifstream and fstream.\n     static const openmode in =     \topenmode(__ios_flags::_S_in);\n+\n     /// Open for output.  Default for @c ofstream and fstream.\n     static const openmode out =    \topenmode(__ios_flags::_S_out);\n+\n     /// Open for input.  Default for @c ofstream.\n     static const openmode trunc =  \topenmode(__ios_flags::_S_trunc);\n \n@@ -323,10 +349,13 @@ namespace std\n      *  - end, equivalent to @c SEEK_END in the C standard library.\n     */\n     typedef _Ios_Seekdir seekdir;\n+\n     /// Request a seek relative to the beginning of the stream.\n     static const seekdir beg = \t\tseekdir(0);\n+\n     /// Request a seek relative to the current position within the sequence.\n     static const seekdir cur = \t\tseekdir(SEEK_CUR);\n+\n     /// Request a seek relative to the current end of the sequence.\n     static const seekdir end = \t\tseekdir(SEEK_END);\n \n@@ -432,10 +461,6 @@ namespace std\n     // Members for locale and locale caching.\n     locale \t\t_M_ios_locale;\n \n-    // Cache of locale and facet data.\n-    // Cast this to __locale_cache<_CharT>*\n-    auto_ptr<__locale_cache_base>\t_M_locale_cache;\n-\n     void \n     _M_init();\n \n@@ -604,7 +629,7 @@ namespace std\n \n     /**\n      *  @brief  Locale access\n-     *  @return  The locale currently in effect.\n+     *  @return  A copy of the current locale.\n      *\n      *  If @c imbue(loc) has previously been called, then this function\n      *  returns @c loc.  Otherwise, it returns a copy of @c std::locale(),\n@@ -613,6 +638,16 @@ namespace std\n     inline locale \n     getloc() const { return _M_ios_locale; }\n \n+    /**\n+     *  @brief  Locale access\n+     *  @return  A reference to the current locale.\n+     *\n+     *  Like getloc above, but returns a reference instead of\n+     *  generating a copy.\n+    */\n+    inline const locale& \n+    _M_getloc() const { return _M_ios_locale; }\n+\n     // [27.4.2.5] ios_base storage functions\n     /**\n      *  @doctodo\n@@ -642,11 +677,6 @@ namespace std\n       return __word._M_pword;\n     }\n \n-    // Access to the cache.  Not safe to call until basic_ios::_M_init() has\n-    // happened.\n-    __locale_cache_base&\n-    _M_cache() { return *_M_locale_cache; }\n-\n     // Destructor\n     /**\n      *  Destroys local storage and"}, {"sha": "cfc11493216a23c302fa27bae421257426a32148", "filename": "libstdc++-v3/include/bits/locale_classes.h", "status": "modified", "additions": 128, "deletions": 99, "changes": 227, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/215f9e283a9c44b0bae3954e4f6a85b4a6cf9fbb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/215f9e283a9c44b0bae3954e4f6a85b4a6cf9fbb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.h?ref=215f9e283a9c44b0bae3954e4f6a85b4a6cf9fbb", "patch": "@@ -71,7 +71,11 @@ namespace std\n     template<typename _Facet>\n       friend const _Facet& \n       use_facet(const locale&);\n-     \n+\n+    template<typename _Cache>\n+      friend const _Cache&\n+      __use_cache(const locale& __loc);\n+   \n     // Category values:\n     // NB: Order must match _S_facet_categories definition in locale.cc\n     static const category none\t\t= 0;\n@@ -141,6 +145,12 @@ namespace std\n     // Current global locale\n     static _Impl* \t_S_global;  \n \n+    // Names of underlying locale categories.  \n+    // NB: locale::global() has to know how to modify all the\n+    // underlying categories, not just the ones required by the C++\n+    // standard.\n+    static const char** _S_categories;\n+\n     // Number of standard categories. For C++, these categories are\n     // collate, ctype, monetary, numeric, time, and messages. These\n     // directly correspond to ISO C99 macros LC_COLLATE, LC_CTYPE,\n@@ -153,12 +163,6 @@ namespace std\n     // and LC_IDENTIFICATION.\n     static const size_t _S_categories_size = 6 + _GLIBCPP_NUM_CATEGORIES;\n \n-    // Names of underlying locale categories.  \n-    // NB: locale::global() has to know how to modify all the\n-    // underlying categories, not just the ones required by the C++\n-    // standard.\n-    static const char** _S_categories;\n-\n     explicit \n     locale(_Impl*) throw();\n \n@@ -177,27 +181,132 @@ namespace std\n   };\n \n \n-  // Implementation object for locale \n+  // 22.1.1.1.2  Class locale::facet\n+  class locale::facet\n+  {\n+  private:\n+    friend class locale;\n+    friend class locale::_Impl;\n+\n+    mutable _Atomic_word\t\t_M_references;\n+\n+  protected:\n+    // Contains data from the underlying \"C\" library for the classic locale.\n+    static __c_locale\t\t     \t_S_c_locale;\n+\n+    // String literal for the name of the classic locale.\n+    static char\t\t\t\t_S_c_name[2];\n+    \n+    explicit \n+    facet(size_t __refs = 0) throw() : _M_references(__refs ? 1 : 0)\n+    { }\n+\n+    virtual \n+    ~facet();\n+\n+    static void\n+    _S_create_c_locale(__c_locale& __cloc, const char* __s, \n+\t\t       __c_locale __old = 0);\n+\n+    static __c_locale\n+    _S_clone_c_locale(__c_locale& __cloc);\n+\n+    static void\n+    _S_destroy_c_locale(__c_locale& __cloc);\n+\n+  private:\n+    inline void\n+    _M_add_reference() const throw()\n+    { __atomic_add(&_M_references, 1); }\n+\n+    inline void\n+    _M_remove_reference() const throw()\n+    {\n+      if (__exchange_and_add(&_M_references, -1) == 1)\n+\t{\n+\t  try \n+\t    { delete this; }  \n+\t  catch (...) \n+\t    { }\n+\t}\n+    }\n+\n+    facet(const facet&);  // Not defined.\n+\n+    void \n+    operator=(const facet&);  // Not defined.\n+  };\n+\n+\n+  // 22.1.1.1.3 Class locale::id\n+  class locale::id\n+  {\n+  private:\n+    friend class locale;\n+    friend class locale::_Impl;\n+\n+    template<typename _Facet>\n+      friend const _Facet&  \n+      use_facet(const locale&);\n+\n+    template<typename _Facet>\n+      friend bool           \n+      has_facet(const locale&) throw ();\n+\n+    // NB: There is no accessor for _M_index because it may be used\n+    // before the constructor is run; the effect of calling a member\n+    // function (even an inline) would be undefined.\n+    mutable size_t \t\t_M_index;\n+\n+    // Last id number assigned.\n+    static _Atomic_word \t_S_highwater;   \n+\n+    void \n+    operator=(const id&);  // Not defined.\n+\n+    id(const id&);  // Not defined.\n+\n+  public:\n+    // NB: This class is always a static data member, and thus can be\n+    // counted on to be zero-initialized.\n+    id() { }\n+\n+    inline size_t\n+    _M_id() const\n+    {\n+      if (!_M_index)\n+\t_M_index = 1 + __exchange_and_add(&_S_highwater, 1);\n+      return _M_index - 1;\n+    }\n+  };\n+\n+\n+  // Implementation object for locale.\n   class locale::_Impl\n   {\n   public:\n     // Friends.\n     friend class locale;\n     friend class locale::facet;\n \n+    template<typename _Facet>\n+      friend bool  \n+      has_facet(const locale&) throw();\n+\n     template<typename _Facet>\n       friend const _Facet&  \n       use_facet(const locale&);\n \n-    template<typename _Facet>\n-      friend bool  \n-      has_facet(const locale&) throw();\n+    template<typename _Cache>\n+      friend const _Cache&\n+      __use_cache(const locale& __loc);\n \n   private:\n     // Data Members.\n     _Atomic_word\t\t\t_M_references;\n     const facet**\t\t\t_M_facets;\n     size_t \t\t\t\t_M_facets_size;\n+    const facet**\t\t\t_M_caches;\n     char** \t\t\t\t_M_names;\n     static const locale::id* const \t_S_id_ctype[];\n     static const locale::id* const \t_S_id_numeric[];\n@@ -258,7 +367,14 @@ namespace std\n     template<typename _Facet>\n       inline void \n       _M_init_facet(_Facet* __facet)\n-      { _M_install_facet(&_Facet::id, __facet);  }\n+      { _M_install_facet(&_Facet::id, __facet); }\n+\n+    void\n+    _M_install_cache(const facet* __cache, size_t __index)\n+    { \n+      __cache->_M_add_reference();\n+      _M_caches[__index] = __cache; \n+    }      \n   };\n \n   template<typename _Facet>\n@@ -274,93 +390,6 @@ namespace std\n \t  _M_impl->_M_names[__i] = __new;\n \t}\n     }\n-\n-\n-  // 22.1.1.1.2  Class locale::facet\n-  class locale::facet\n-  {\n-  private:\n-    friend class locale;\n-    friend class locale::_Impl;\n-\n-    mutable _Atomic_word\t\t_M_references;\n-\n-  protected:\n-    // Contains data from the underlying \"C\" library for the classic locale.\n-    static __c_locale\t\t     \t_S_c_locale;\n-\n-    // String literal for the name of the classic locale.\n-    static char\t\t\t\t_S_c_name[2];\n-    \n-    explicit \n-    facet(size_t __refs = 0) throw();\n-\n-    virtual \n-    ~facet();\n-\n-    static void\n-    _S_create_c_locale(__c_locale& __cloc, const char* __s, \n-\t\t       __c_locale __old = 0);\n-\n-    static __c_locale\n-    _S_clone_c_locale(__c_locale& __cloc);\n-\n-    static void\n-    _S_destroy_c_locale(__c_locale& __cloc);\n-\n-  private:\n-    void \n-    _M_add_reference() const throw();\n-\n-    void \n-    _M_remove_reference() const throw();\n-\n-    facet(const facet&);  // Not defined.\n-\n-    void \n-    operator=(const facet&);  // Not defined.\n-  };\n-\n-\n-  // 22.1.1.1.3 Class locale::id\n-  class locale::id\n-  {\n-  private:\n-    friend class locale;\n-    friend class locale::_Impl;\n-    template<typename _Facet>\n-      friend const _Facet&  \n-      use_facet(const locale&);\n-    template<typename _Facet>\n-      friend bool           \n-      has_facet(const locale&) throw ();\n-\n-    // NB: There is no accessor for _M_index because it may be used\n-    // before the constructor is run; the effect of calling a member\n-    // function (even an inline) would be undefined.\n-    mutable size_t \t\t_M_index;\n-\n-    // Last id number assigned.\n-    static _Atomic_word \t_S_highwater;   \n-\n-    void \n-    operator=(const id&);  // Not defined.\n-\n-    id(const id&);  // Not defined.\n-\n-  public:\n-    // NB: This class is always a static data member, and thus can be\n-    // counted on to be zero-initialized.\n-    id();\n-\n-    inline size_t\n-    _M_id() const\n-    {\n-      if (!_M_index)\n-\t_M_index = 1 + __exchange_and_add(&_S_highwater, 1);\n-      return _M_index - 1;\n-    }\n-  };\n } // namespace std\n \n #endif"}, {"sha": "72141f1983eb20549f075fe58c8334dcf4f9025a", "filename": "libstdc++-v3/include/bits/locale_facets.h", "status": "modified", "additions": 107, "deletions": 83, "changes": 190, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/215f9e283a9c44b0bae3954e4f6a85b4a6cf9fbb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/215f9e283a9c44b0bae3954e4f6a85b4a6cf9fbb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h?ref=215f9e283a9c44b0bae3954e4f6a85b4a6cf9fbb", "patch": "@@ -574,6 +574,96 @@ namespace std\n     _S_format_float(const ios_base& __io, char* __fptr, char __mod);\n   };\n \n+  template<typename _CharT>\n+    struct __numpunct_cache : public locale::facet\n+    {\n+      // Types:\n+      typedef _CharT          \t\tchar_type;\n+\n+      const char* \t\t\t_M_grouping;\n+      bool\t\t\t\t_M_use_grouping;\n+      const char_type* \t\t\t_M_truename;\n+      const char_type*\t\t\t_M_falsename;\n+      char_type \t\t\t_M_decimal_point;\n+      char_type \t\t\t_M_thousands_sep;\n+      \n+      // A list of valid numeric literals for output: in the standard\n+      // \"C\" locale, this is \"-+xX0123456789abcdef0123456789ABCDEF\".\n+      // This array contains the chars after having been passed\n+      // through the current locale's ctype<_CharT>.widen().\n+      _CharT                    \t_M_atoms_out[__num_base::_S_oend + 1];\n+\n+      // A list of valid numeric literals for output: in the standard\n+      // \"C\" locale, this is \"0123456789eEabcdfABCDF\"\n+      // This array contains the chars after having been passed\n+      // through the current locale's ctype<_CharT>.widen().\n+      _CharT                    \t_M_atoms_in[__num_base::_S_iend + 1];\n+\n+      bool\t\t\t\t_M_allocated;\n+\n+      __numpunct_cache(size_t __refs = 0) : locale::facet(__refs), \n+      _M_grouping(NULL), _M_use_grouping(false), _M_truename(NULL), \n+      _M_falsename(NULL), _M_decimal_point(char_type()), \n+      _M_thousands_sep(char_type()), _M_allocated(false)\n+      { } \n+\n+      ~__numpunct_cache();\n+\n+      void\n+      _M_cache(const locale& __loc);\n+    };\n+\n+  template<typename _CharT>\n+    void\n+    __numpunct_cache<_CharT>::_M_cache(const locale& __loc)\n+    {\n+      const numpunct<_CharT>& __np = use_facet<numpunct<_CharT> >(__loc);\n+      string __grouping = __np.grouping();\n+      char* __group = new char[__grouping.length() + 1];\n+      __grouping.copy(__group, __grouping.length());\n+      __group[__grouping.length()] = _CharT();\n+      _M_grouping = __group;\n+      \n+      _M_use_grouping = __grouping.length() != 0 && __grouping.data()[0] != 0;\n+\n+      typedef basic_string<_CharT> __string_type;\n+\n+      __string_type __true = __np.truename();\n+      _CharT* __truename = new _CharT[__true.length() + 1];\n+      __true.copy(__truename, __true.length());\n+      __truename[__true.length()] = _CharT(); \n+      _M_truename = __truename;\n+\n+      __string_type __false = __np.falsename();\n+      _CharT* __falsename = new _CharT[__false.length() + 1];\n+      __false.copy(__falsename, __false.length());\n+      __falsename[__false.length()] = _CharT(); \n+      _M_falsename = __falsename;\n+            \n+      _M_decimal_point = __np.decimal_point();\n+      _M_thousands_sep = __np.thousands_sep();\n+\n+      const ctype<_CharT>& __ct = use_facet<ctype<_CharT> >(__loc);\n+      __ct.widen(__num_base::_S_atoms_out, \n+\t\t __num_base::_S_atoms_out + __num_base::_S_oend, _M_atoms_out);\n+      _M_atoms_out[__num_base::_S_oend] = _CharT();\n+      __ct.widen(__num_base::_S_atoms_in, \n+\t\t __num_base::_S_atoms_in + __num_base::_S_iend, _M_atoms_in);\n+      _M_atoms_in[__num_base::_S_iend] = _CharT();\n+\n+      _M_allocated = true;\n+    }\n+\n+  template<typename _CharT>\n+    __numpunct_cache<_CharT>::~__numpunct_cache()\n+    {\n+      if (_M_allocated)\n+\t{\n+\t  delete [] _M_grouping;\n+\t  delete [] _M_truename;\n+\t  delete [] _M_falsename;\n+\t}\n+    }\n \n   template<typename _CharT>\n     class numpunct : public locale::facet\n@@ -582,23 +672,26 @@ namespace std\n       // Types:\n       typedef _CharT          \t\tchar_type;\n       typedef basic_string<_CharT> \tstring_type;\n+      typedef __numpunct_cache<_CharT>  __cache_type;\n+\n+    protected:\n+      __cache_type*\t\t\t_M_data;\n \n+    public:\n       static locale::id \t\tid;\n \n-    private:\n-      char_type \t\t\t_M_decimal_point;\n-      char_type \t\t\t_M_thousands_sep;\n-      const char* \t\t\t_M_grouping;\n-      const char_type* \t\t\t_M_truename;\n-      const char_type*\t\t\t_M_falsename;\n+      explicit \n+      numpunct(size_t __refs = 0) : facet(__refs), _M_data(NULL)\n+      { _M_initialize_numpunct(); }\n \n-    public:\n       explicit \n-      numpunct(size_t __refs = 0) : locale::facet(__refs) \n+      numpunct(__cache_type* __cache, size_t __refs = 0) \n+      : facet(__refs), _M_data(__cache)\n       { _M_initialize_numpunct(); }\n \n       explicit \n-      numpunct(__c_locale __cloc, size_t __refs = 0) : locale::facet(__refs) \n+      numpunct(__c_locale __cloc, size_t __refs = 0) \n+      : locale::facet(__refs), _M_data(NULL)\n       { _M_initialize_numpunct(__cloc); }\n \n       char_type    \n@@ -627,23 +720,23 @@ namespace std\n \n       virtual char_type    \n       do_decimal_point() const\n-      { return _M_decimal_point; }\n+      { return _M_data->_M_decimal_point; }\n \n       virtual char_type    \n       do_thousands_sep() const\n-      { return _M_thousands_sep; }\n+      { return _M_data->_M_thousands_sep; }\n \n       virtual string\n       do_grouping() const\n-      { return _M_grouping; }\n+      { return _M_data->_M_grouping; }\n \n       virtual string_type  \n       do_truename() const\n-      { return _M_truename; }\n+      { return _M_data->_M_truename; }\n \n       virtual string_type  \n       do_falsename() const\n-      { return _M_falsename; }\n+      { return _M_data->_M_falsename; }\n \n       // For use at construction time only.\n       void \n@@ -1928,75 +2021,6 @@ namespace std\n     inline _CharT \n     tolower(_CharT __c, const locale& __loc)\n     { return use_facet<ctype<_CharT> >(__loc).tolower(__c); }\n-\n-\n-  // __locale_cache holds the information extracted from the\n-  // numpunct<> and moneypunct<> facets in a form optimized for\n-  // parsing and formatting.  It is stored as an\n-  // auto_ptr<__locale_cache_base> member of ios_base and directly\n-  // accessed via a casting to the derived __locale_cache<_CharT> in\n-  // parameterized facets.\n-  // The intent twofold: to avoid the costs of creating a locale\n-  // object and to avoid calling the virtual functions in a locale's\n-  // facet to look up data.\n-  class __locale_cache_base\n-  {\n-  public:\n-    virtual\n-    ~__locale_cache_base() { }\n-  };\n-\n-  template<typename _CharT>\n-    class __locale_cache : public __locale_cache_base\n-    {\n-      // Types:\n-      typedef _CharT               \tchar_type;\n-      typedef char_traits<_CharT>       traits_type;\n-      typedef basic_string<_CharT>\tstring_type;\n-\n-    public: \n-      // Data Members:\n-\n-      // A list of valid numeric literals: for the standard \"C\"\n-      // locale, this is \"-+xX0123456789abcdef0123456789ABCDEF\".  This\n-      // array contains the chars after having been passed through the\n-      // current locale's ctype<_CharT>.widen().\n-      _CharT                    _M_literals[__num_base::_S_oend];\n-\n-      // The sign used to separate decimal values: for standard US\n-      // locales, this would usually be: \".\"  Abstracted from\n-      // numpunct::decimal_point().\n-      _CharT                    _M_decimal_point;\n-\n-      // The sign used to separate groups of digits into smaller\n-      // strings that the eye can parse with less difficulty: for\n-      // standard US locales, this would usually be: \",\" Abstracted\n-      // from numpunct::thousands_sep().\n-      _CharT                    _M_thousands_sep;\n-      \n-      // However the US's \"false\" and \"true\" are translated.  From\n-      // numpunct::truename() and numpunct::falsename(), respectively.\n-      string_type \t\t_M_truename;\n-      string_type \t\t_M_falsename;\n-\n-      // If we are checking groupings. This should be equivalent to\n-      // numpunct::groupings().size() != 0\n-      bool                      _M_use_grouping;\n-\n-      // If we are using numpunct's groupings, this is the current\n-      // grouping string in effect (from numpunct::grouping()).\n-      string                    _M_grouping;\n-\n-      __locale_cache() : _M_use_grouping(false) \n-      { };\n-\n-      __locale_cache& \n-      operator=(const __locale_cache& __lc);\n-\n-      // Make sure the cache is built before the first use.\n-      void \n-      _M_init(const locale&);\n-    };\n } // namespace std\n \n #endif"}, {"sha": "5081591c1cbe0bd80e048a685328c06d04da888e", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 27, "deletions": 34, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/215f9e283a9c44b0bae3954e4f6a85b4a6cf9fbb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/215f9e283a9c44b0bae3954e4f6a85b4a6cf9fbb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=215f9e283a9c44b0bae3954e4f6a85b4a6cf9fbb", "patch": "@@ -86,6 +86,21 @@ namespace std\n       return static_cast<const _Facet&>(*__facets[__i]);\n     }\n \n+  // Routine to access a cache for the facet.  If the cache didn't\n+  // exist before, it gets constructed on the fly.\n+  template<typename _Facet>\n+    const _Facet&\n+    __use_cache(const locale& __loc);\n+\n+  template<>\n+    const __numpunct_cache<char>&\n+    __use_cache(const locale& __loc);\n+\n+#ifdef _GLIBCPP_USE_WCHAR_T\n+  template<>\n+    const __numpunct_cache<wchar_t>&\n+    __use_cache(const locale& __loc);\n+#endif\n \n   // Stage 1: Determine a conversion specifier.\n   template<typename _CharT, typename _InIter>\n@@ -768,11 +783,12 @@ namespace std\n       _M_convert_int(_OutIter __s, ios_base& __io, _CharT __fill, \n \t\t     _ValueT __v) const\n       {\n-\ttypedef __locale_cache<_CharT> __cache_type;\n-\t__cache_type& __lc = static_cast<__cache_type&>(__io._M_cache());\n-\t_CharT* __lit = __lc._M_literals;\n+\ttypedef typename numpunct<_CharT>::__cache_type  __cache_type;\n+\tconst locale& __loc = __io._M_getloc();\n+\tconst __cache_type& __lc = __use_cache<__cache_type>(__loc);\n+\tconst _CharT* __lit = __lc._M_atoms_out;\n \n-\t// Long enough to hold hex, dec, and octal representations.\n+ \t// Long enough to hold hex, dec, and octal representations.\n \tint __ilen = 4 * sizeof(_ValueT);\n \t_CharT* __cs = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT) \n \t\t\t\t\t\t\t     * __ilen));\n@@ -872,8 +888,9 @@ namespace std\n \telse if (__prec < static_cast<streamsize>(0))\n \t  __prec = static_cast<streamsize>(6);\n \n-\ttypedef __locale_cache<_CharT> __cache_type;\n-\t__cache_type& __lc = static_cast<__cache_type&>(__io._M_cache());\n+\ttypedef typename numpunct<_CharT>::__cache_type  __cache_type;\n+\tconst locale& __loc = __io._M_getloc();\n+\tconst __cache_type& __lc = __use_cache<__cache_type>(__loc);\n \n \t// [22.2.2.2.2] Stage 1, numeric conversion to character.\n \tint __len;\n@@ -918,7 +935,6 @@ namespace std\n \n       // [22.2.2.2.2] Stage 2, convert to char_type, using correct\n       // numpunct.decimal_point() values for '.' and adding grouping.\n-      const locale __loc = __io.getloc();\n       const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc);\n \n       _CharT* __ws = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT) \n@@ -974,8 +990,10 @@ namespace std\n         }\n       else\n         {\n-\t  typedef __locale_cache<_CharT> __cache_type;\n-\t  __cache_type& __lc = static_cast<__cache_type&>(__io._M_cache());\n+\t  typedef typename numpunct<_CharT>::__cache_type  __cache_type;\n+\t  const locale& __loc = __io._M_getloc();\n+\t  const __cache_type& __lc = __use_cache<__cache_type>(__loc);\n+\n \t  typedef basic_string<_CharT> \t__string_type;\n \t  __string_type __name;\n           if (__v)\n@@ -2273,31 +2291,6 @@ namespace std\n       return __s;\n     }\n \n-  // Generic definition, locale cache initialization.\n-  template<typename _CharT>\n-    void\n-    __locale_cache<_CharT>::_M_init(const locale& __loc)\n-    {\n-      if (__builtin_expect(has_facet<numpunct<_CharT> >(__loc), true))\n-\t{\n-\t  const numpunct<_CharT>& __np = use_facet<numpunct<_CharT> >(__loc);\n-\t  _M_falsename = __np.falsename();\n-\t  _M_truename = __np.truename();\n-\t  _M_thousands_sep = __np.thousands_sep();\n-\t  _M_decimal_point = __np.decimal_point();\n-\t  _M_grouping = __np.grouping();\n-\t  _M_use_grouping = _M_grouping.size() != 0 \n-\t    \t\t    && _M_grouping.data()[0] != 0;\n-\t}\n-      if (__builtin_expect(has_facet<ctype<_CharT> >(__loc), true))\n-\t{\n-\t  const ctype<_CharT>& __ct = use_facet<ctype<_CharT> >(__loc);\n-\t  __ct.widen(__num_base::_S_atoms_out,\n-\t\t     __num_base::_S_atoms_out + __num_base::_S_oend, \n-\t\t     _M_literals);\n-\t}\n-    }\n-\n   // Inhibit implicit instantiations for required instantiations,\n   // which are defined via explicit instantiations elsewhere.  \n   // NB: This syntax is a GNU extension."}, {"sha": "6793a9b5da1becf2c64224135d6d6294137208b9", "filename": "libstdc++-v3/src/globals.cc", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/215f9e283a9c44b0bae3954e4f6a85b4a6cf9fbb/libstdc%2B%2B-v3%2Fsrc%2Fglobals.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/215f9e283a9c44b0bae3954e4f6a85b4a6cf9fbb/libstdc%2B%2B-v3%2Fsrc%2Fglobals.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fglobals.cc?ref=215f9e283a9c44b0bae3954e4f6a85b4a6cf9fbb", "patch": "@@ -127,6 +127,10 @@ namespace __gnu_cxx\n   __attribute__ ((aligned(__alignof__(locale::facet*))));\n   fake_facet_vec facet_vec[_GLIBCPP_NUM_FACETS];\n \n+  typedef char fake_cache_vec[sizeof(locale::facet*)]\n+  __attribute__ ((aligned(__alignof__(locale::facet*))));\n+  fake_cache_vec cache_vec[_GLIBCPP_NUM_FACETS];\n+\n   typedef char fake_ctype_c[sizeof(std::ctype<char>)]\n   __attribute__ ((aligned(__alignof__(std::ctype<char>))));\n   fake_ctype_c ctype_c;\n@@ -235,6 +239,17 @@ namespace __gnu_cxx\n   fake_messages_w messages_w;\n #endif\n \n+  // Storage for C locale caches\n+  typedef char fake_locale_cache_c[sizeof(std::__numpunct_cache<char>)]\n+  __attribute__ ((aligned(__alignof__(std::__numpunct_cache<char>))));\n+  fake_locale_cache_c numpunct_cache_c;\n+\n+#ifdef _GLIBCPP_USE_WCHAR_T\n+  typedef char fake_locale_cache_w[sizeof(std::__numpunct_cache<wchar_t>)]\n+  __attribute__ ((aligned(__alignof__(std::__numpunct_cache<wchar_t>))));\n+  fake_locale_cache_w numpunct_cache_w;\n+#endif\n+\n   // Globals for once-only runtime initialization of mutex objects.  This\n   // allows static initialization of these objects on systems that need a\n   // function call to initialize a mutex.  For example, see stl_threads.h."}, {"sha": "ee969b5d9c76dd38e39e94b06aa2f6d2bc5c5eae", "filename": "libstdc++-v3/src/ios.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/215f9e283a9c44b0bae3954e4f6a85b4a6cf9fbb/libstdc%2B%2B-v3%2Fsrc%2Fios.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/215f9e283a9c44b0bae3954e4f6a85b4a6cf9fbb/libstdc%2B%2B-v3%2Fsrc%2Fios.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fios.cc?ref=215f9e283a9c44b0bae3954e4f6a85b4a6cf9fbb", "patch": "@@ -297,8 +297,8 @@ namespace std\n     return __old;\n   }\n \n-  ios_base::ios_base() : _M_callbacks(0), _M_word_size(_S_local_word_size),\n-\t\t\t _M_word(_M_local_word), _M_locale_cache(0)\n+  ios_base::ios_base() \n+  : _M_callbacks(0), _M_word_size(_S_local_word_size), _M_word(_M_local_word)\n   {\n     // Do nothing: basic_ios::init() does it.  \n     // NB: _M_callbacks and _M_word must be zero for non-initialized"}, {"sha": "0936102a916c61da7d30e7e8fa9f68680a268577", "filename": "libstdc++-v3/src/locale-inst.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/215f9e283a9c44b0bae3954e4f6a85b4a6cf9fbb/libstdc%2B%2B-v3%2Fsrc%2Flocale-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/215f9e283a9c44b0bae3954e4f6a85b4a6cf9fbb/libstdc%2B%2B-v3%2Fsrc%2Flocale-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocale-inst.cc?ref=215f9e283a9c44b0bae3954e4f6a85b4a6cf9fbb", "patch": "@@ -45,7 +45,6 @@ namespace std\n   template class moneypunct_byname<char, true>;\n   template class money_get<char, istreambuf_iterator<char> >;\n   template class money_put<char, ostreambuf_iterator<char> >;\n-  template class __locale_cache<char>;\n \n #ifdef _GLIBCPP_USE_WCHAR_T\n   template class moneypunct<wchar_t, false>;\n@@ -54,11 +53,11 @@ namespace std\n   template class moneypunct_byname<wchar_t, true>;\n   template class money_get<wchar_t, istreambuf_iterator<wchar_t> >;\n   template class money_put<wchar_t, ostreambuf_iterator<wchar_t> >;\n-  template class __locale_cache<wchar_t>;\n #endif\n \n   // numpunct, numpunct_byname, num_get, and num_put\n   template class numpunct<char>;\n+  template struct __numpunct_cache<char>;\n   template class numpunct_byname<char>;\n   template class num_get<char, istreambuf_iterator<char> >;\n   template class num_put<char, ostreambuf_iterator<char> >; \n@@ -102,6 +101,7 @@ namespace std\n   \n #ifdef _GLIBCPP_USE_WCHAR_T\n   template class numpunct<wchar_t>;\n+  template struct __numpunct_cache<wchar_t>;\n   template class numpunct_byname<wchar_t>;\n   template class num_get<wchar_t, istreambuf_iterator<wchar_t> >;\n   template class num_put<wchar_t, ostreambuf_iterator<wchar_t> >;"}, {"sha": "7788a58419d21d08ddb0462c21744645e04bdfad", "filename": "libstdc++-v3/src/locale.cc", "status": "modified", "additions": 30, "deletions": 23, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/215f9e283a9c44b0bae3954e4f6a85b4a6cf9fbb/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/215f9e283a9c44b0bae3954e4f6a85b4a6cf9fbb/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc?ref=215f9e283a9c44b0bae3954e4f6a85b4a6cf9fbb", "patch": "@@ -449,30 +449,37 @@ namespace std\n   locale::facet::\n   ~facet() { }\n \n-  locale::facet::\n-  facet(size_t __refs) throw() : _M_references(__refs ? 1 : 0) \n-  { }\n-\n-  void  \n-  locale::facet::\n-  _M_add_reference() const throw()\n-  { __atomic_add(&_M_references, 1); }\n+  template<>\n+    const __numpunct_cache<char>&\n+    __use_cache(const locale& __loc)\n+    {\n+      size_t __i = numpunct<char>::id._M_id();\n+      const locale::facet** __caches = __loc._M_impl->_M_caches;\n+      if (!__caches[__i])\n+\t{\n+\t  __numpunct_cache<char>* __tmp = new __numpunct_cache<char>;\n+\t  __tmp->_M_cache(__loc);\n+\t  __loc._M_impl->_M_install_cache(__tmp, __i);\n+\t}\n+      return static_cast<const __numpunct_cache<char>&>(*__caches[__i]);\n+    }\n \n-  void  \n-  locale::facet::\n-  _M_remove_reference() const throw()\n-  {\n-    if (__exchange_and_add(&_M_references, -1) == 1)\n-      {\n-        try \n-\t  { delete this; }  \n-\tcatch (...) \n-\t  { }\n-      }\n-  }\n-  \n-  locale::id::id() \n-  { }\n+#ifdef _GLIBCPP_USE_WCHAR_T\n+  template<>\n+    const __numpunct_cache<wchar_t>&\n+    __use_cache(const locale& __loc)\n+    {\n+      size_t __i = numpunct<wchar_t>::id._M_id();\n+      const locale::facet** __caches = __loc._M_impl->_M_caches;\n+      if (!__caches[__i])\n+\t{\n+\t  __numpunct_cache<wchar_t>* __tmp = new __numpunct_cache<wchar_t>;\n+\t  __tmp->_M_cache(__loc);\n+\t  __loc._M_impl->_M_install_cache(__tmp, __i);\n+\t}\n+      return static_cast<const __numpunct_cache<wchar_t>&>(*__caches[__i]);\n+    }\n+#endif\n \n   // Definitions for static const data members of time_base\n   template<> "}, {"sha": "424bc64fec7349727ecbf0e0c32d781b8703e249", "filename": "libstdc++-v3/src/localename.cc", "status": "modified", "additions": 101, "deletions": 13, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/215f9e283a9c44b0bae3954e4f6a85b4a6cf9fbb/libstdc%2B%2B-v3%2Fsrc%2Flocalename.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/215f9e283a9c44b0bae3954e4f6a85b4a6cf9fbb/libstdc%2B%2B-v3%2Fsrc%2Flocalename.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocalename.cc?ref=215f9e283a9c44b0bae3954e4f6a85b4a6cf9fbb", "patch": "@@ -69,6 +69,12 @@ namespace __gnu_cxx\n   extern time_put<wchar_t> \t\t\ttime_put_w;\n   extern std::messages<wchar_t> \t\tmessages_w;\n #endif\n+\n+  extern locale::facet* cache_vec[_GLIBCPP_NUM_FACETS];\n+  extern std::__numpunct_cache<char>\t\tnumpunct_cache_c;\n+#ifdef  _GLIBCPP_USE_WCHAR_T\n+  extern std::__numpunct_cache<wchar_t>\t\tnumpunct_cache_w;\n+#endif\n } // namespace __gnu_cxx\n \n namespace std\n@@ -83,6 +89,11 @@ namespace std\n \t_M_facets[__i]->_M_remove_reference();\n     delete [] _M_facets;\n \n+    for (size_t __i = 0; __i < _M_facets_size; ++__i)\n+      if (_M_caches[__i])\n+\t_M_caches[__i]->_M_remove_reference(); \n+    delete [] _M_caches;\n+\n     for (size_t __i = 0; __i < _S_categories_size; ++__i)\n       delete [] _M_names[__i];  \n     delete [] _M_names;\n@@ -91,7 +102,7 @@ namespace std\n   // Clone existing _Impl object.\n   locale::_Impl::\n   _Impl(const _Impl& __imp, size_t __refs)\n-  : _M_references(__refs), _M_facets_size(__imp._M_facets_size) // XXX\n+  : _M_references(__refs), _M_facets_size(__imp._M_facets_size)\n   {\n     try\n       { \n@@ -111,6 +122,22 @@ namespace std\n \t  _M_facets[__i]->_M_add_reference();\n       }\n \n+    try \n+      {\n+      \t_M_caches = new const facet*[_M_facets_size];\n+      }\n+    catch(...)\n+      {\n+\tdelete [] _M_caches;\n+\t__throw_exception_again;\n+      }\n+    for (size_t __i = 0; __i < _M_facets_size; ++__i)\n+      {\n+\t_M_caches[__i] = __imp._M_caches[__i];\n+\tif (_M_caches[__i])\n+\t  _M_caches[__i]->_M_add_reference(); \n+      }\n+\n     try \n       {\n       \t_M_names = new char*[_S_categories_size];\n@@ -131,10 +158,10 @@ namespace std\n   // Construct named _Impl.\n   locale::_Impl::\n   _Impl(const char* __s, size_t __refs) \n-  : _M_references(__refs), _M_facets_size(_GLIBCPP_NUM_FACETS) \n+  : _M_references(__refs), _M_facets_size(_GLIBCPP_NUM_FACETS)\n   {\n-    // Initialize the underlying locale model, which also checks\n-    // to see if the given name is valid.\n+    // Initialize the underlying locale model, which also checks to\n+    // see if the given name is valid.\n     __c_locale __cloc;\n     locale::facet::_S_create_c_locale(__cloc, __s);\n \n@@ -150,6 +177,18 @@ namespace std\n \t__throw_exception_again;\n       }\n \n+    try \n+      {\n+      \t_M_caches = new const facet*[_M_facets_size];\n+\tfor (size_t __i = 0; __i < _M_facets_size; ++__i)\n+\t  _M_caches[__i] = 0;\n+      }\n+    catch(...)\n+      {\n+\tdelete [] _M_caches;\n+\t__throw_exception_again;\n+      }\n+\n     // Name all the categories.\n     try \n       {\n@@ -235,6 +274,10 @@ namespace std\n     for (size_t __i = 0; __i < _M_facets_size; ++__i)\n       _M_facets[__i] = 0;\n \n+    _M_caches = new (&cache_vec) const facet*[_M_facets_size];\n+    for (size_t __i = 0; __i < _M_facets_size; ++__i)\n+      _M_caches[__i] = 0;\n+\n     // Name all the categories.\n     _M_names = new (&name_vec) char*[_S_categories_size];\n     for (size_t __i = 0; __i < _S_categories_size; ++__i)\n@@ -252,7 +295,12 @@ namespace std\n     // destroyed.\n     _M_init_facet(new (&ctype_c) std::ctype<char>(0, false, 1));\n     _M_init_facet(new (&codecvt_c) codecvt<char, char, mbstate_t>(1));\n-    _M_init_facet(new (&numpunct_c) numpunct<char>(1));\n+\n+    // Safe to cache this.\n+    typedef __numpunct_cache<char> num_cache_c;\n+    num_cache_c* __npc = new (&numpunct_cache_c) num_cache_c(2);\n+    _M_init_facet(new (&numpunct_c) numpunct<char>(__npc, 1));\n+\n     _M_init_facet(new (&num_get_c) num_get<char>(1));\n     _M_init_facet(new (&num_put_c) num_put<char>(1));\n     _M_init_facet(new (&collate_c) std::collate<char>(1));\n@@ -264,10 +312,15 @@ namespace std\n     _M_init_facet(new (&time_get_c) time_get<char>(1));\n     _M_init_facet(new (&time_put_c) time_put<char>(1));\n     _M_init_facet(new (&messages_c) std::messages<char>(1));\t\n+\n #ifdef  _GLIBCPP_USE_WCHAR_T\n     _M_init_facet(new (&ctype_w) std::ctype<wchar_t>(1));\n     _M_init_facet(new (&codecvt_w) codecvt<wchar_t, char, mbstate_t>(1));\n-    _M_init_facet(new (&numpunct_w) numpunct<wchar_t>(1));\n+\n+    typedef __numpunct_cache<wchar_t> num_cache_w;\n+    num_cache_w* __npw = new (&numpunct_cache_w) num_cache_w(2);\n+    _M_init_facet(new (&numpunct_w) numpunct<wchar_t>(__npw, 1));\n+\n     _M_init_facet(new (&num_get_w) num_get<wchar_t>(1));\n     _M_init_facet(new (&num_put_w) num_put<wchar_t>(1));\n     _M_init_facet(new (&collate_w) std::collate<wchar_t>(1));\n@@ -280,6 +333,13 @@ namespace std\n     _M_init_facet(new (&time_put_w) time_put<wchar_t>(1));\n     _M_init_facet(new (&messages_w) std::messages<wchar_t>(1));\n #endif \n+\n+    // This locale is safe to pre-cache, after all the facets have\n+    // been installed.\n+    _M_caches[numpunct<char>::id._M_id()] = __npc;\n+#ifdef  _GLIBCPP_USE_WCHAR_T\n+    _M_caches[numpunct<wchar_t>::id._M_id()] = __npw;\n+#endif\n   }\n   \n   void\n@@ -336,18 +396,31 @@ namespace std\n \t// Check size of facet vector to ensure adequate room.\n \tif (__index > _M_facets_size - 1)\n \t  {\n-\t    const facet** __old = _M_facets;\n-\t    const facet** __new;\n \t    const size_t __new_size = __index + 4;\n-\t    __new = new const facet*[__new_size]; \n+\n+\t    // New facet array.\n+\t    const facet** __oldf = _M_facets;\n+\t    const facet** __newf;\n+\t    __newf = new const facet*[__new_size]; \n+\t    for (size_t __i = 0; __i < _M_facets_size; ++__i)\n+\t      __newf[__i] = _M_facets[__i];\n+\t    for (size_t __i2 = _M_facets_size; __i2 < __new_size; ++__i2)\n+\t      __newf[__i2] = 0;\n+\n+\t    // New cache array.\n+\t    const facet** __oldc = _M_caches;\n+\t    const facet** __newc;\n+\t    __newc = new const facet*[__new_size]; \n \t    for (size_t __i = 0; __i < _M_facets_size; ++__i)\n-\t      __new[__i] = _M_facets[__i];\n+\t      __newc[__i] = _M_caches[__i];\n \t    for (size_t __i2 = _M_facets_size; __i2 < __new_size; ++__i2)\n-\t      __new[__i2] = 0;\n+\t      __newc[__i2] = 0;\n \n \t    _M_facets_size = __new_size;\n-\t    _M_facets = __new;\n-\t    delete [] __old;\n+\t    _M_facets = __newf;\n+\t    _M_caches = __newc;\n+\t    delete [] __oldf;\n+\t    delete [] __oldc;\n \t  }\n \n \t__fp->_M_add_reference();\n@@ -365,6 +438,21 @@ namespace std\n \t    // swanky-fresh _Impl.\n \t    _M_facets[__index] = __fp;\n \t  }\n+\n+\t// Ideally, it would be nice to only remove the caches that\n+\t// are now incorrect. However, some of the caches depend on\n+\t// multiple facets, and we only know about one facet\n+\t// here. It's no great loss: the first use of the new facet\n+\t// will create a new, correctly cached facet anyway.\n+\tfor (size_t __i = 0; __i < _M_facets_size; ++__i)\n+\t  {\n+\t    const facet* __cpr = _M_caches[__i];\n+\t    if (__cpr)\n+\t      {\n+\t\t__cpr->_M_remove_reference();\n+\t\t_M_caches[__i] = 0;\n+\t      }\n+\t  }\n       }\n   }\n } // namespace std"}, {"sha": "e6f9921b3686b49dd6c09f9465d1e252ad27f462", "filename": "libstdc++-v3/testsuite/27_io/ios_base/cons/assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/215f9e283a9c44b0bae3954e4f6a85b4a6cf9fbb/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Fcons%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/215f9e283a9c44b0bae3954e4f6a85b4a6cf9fbb/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Fcons%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Fcons%2Fassign_neg.cc?ref=215f9e283a9c44b0bae3954e4f6a85b4a6cf9fbb", "patch": "@@ -41,5 +41,5 @@ void test01()\n   io1 = io2;\n }\n // { dg-error \"within this context\" \"\" { target *-*-* } 41 } \n-// { dg-error \"is private\" \"\" { target *-*-* } 666 } \n+// { dg-error \"is private\" \"\" { target *-*-* } 696 } \n // { dg-error \"operator=\" \"\" { target *-*-* } 0 } "}, {"sha": "5d77444b342a4230df6c6b636643e3e02771562a", "filename": "libstdc++-v3/testsuite/27_io/ios_base/cons/copy_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/215f9e283a9c44b0bae3954e4f6a85b4a6cf9fbb/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Fcons%2Fcopy_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/215f9e283a9c44b0bae3954e4f6a85b4a6cf9fbb/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Fcons%2Fcopy_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Fcons%2Fcopy_neg.cc?ref=215f9e283a9c44b0bae3954e4f6a85b4a6cf9fbb", "patch": "@@ -41,5 +41,5 @@ void test02()\n   test_base io2 = io1; \n }\n // { dg-error \"within this context\" \"\" { target *-*-* } 41 } \n-// { dg-error \"is private\" \"\" { target *-*-* } 663 } \n+// { dg-error \"is private\" \"\" { target *-*-* } 693 } \n // { dg-error \"copy constructor\" \"\" { target *-*-* } 0 } "}]}