{"sha": "f7d605acaacc68d4c50af8e4ca3e1d30c3f13a80", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjdkNjA1YWNhYWNjNjhkNGM1MGFmOGU0Y2EzZTFkMzBjM2YxM2E4MA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-08-23T16:03:44Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-08-23T16:03:44Z"}, "message": "re PR c++/49045 ([C++0x] unexpected \"different exception specifier\" error with noexcept)\n\n\tPR c++/49045\n\tCore 1321\n\t* tree.c (dependent_name): New.\n\t(cp_tree_equal): Two calls with the same dependent name are\n\tequivalent even if the overload sets are different.\n\nFrom-SVN: r177998", "tree": {"sha": "d88cc7f6a94052edc9790e4eabd3f202d48474db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d88cc7f6a94052edc9790e4eabd3f202d48474db"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f7d605acaacc68d4c50af8e4ca3e1d30c3f13a80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7d605acaacc68d4c50af8e4ca3e1d30c3f13a80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7d605acaacc68d4c50af8e4ca3e1d30c3f13a80", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7d605acaacc68d4c50af8e4ca3e1d30c3f13a80/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "30fdd4f2bf86abb827cd82c25723cd08acb9fb26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30fdd4f2bf86abb827cd82c25723cd08acb9fb26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30fdd4f2bf86abb827cd82c25723cd08acb9fb26"}], "stats": {"total": 60, "additions": 59, "deletions": 1}, "files": [{"sha": "4870f3570fe66b0e9e0e40c9a1ce1fe13a30878e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7d605acaacc68d4c50af8e4ca3e1d30c3f13a80/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7d605acaacc68d4c50af8e4ca3e1d30c3f13a80/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f7d605acaacc68d4c50af8e4ca3e1d30c3f13a80", "patch": "@@ -1,3 +1,11 @@\n+2011-08-23  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/49045\n+\tCore 1321\n+\t* tree.c (dependent_name): New.\n+\t(cp_tree_equal): Two calls with the same dependent name are\n+\tequivalent even if the overload sets are different.\n+\n 2011-08-23  Jason Merrill  <jason@redhat.com>\n \n \t* tree.c (build_target_expr): Set TREE_CONSTANT on"}, {"sha": "13421a4e7ab2d21c29c42e1a1aff1f8bfe64673e", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7d605acaacc68d4c50af8e4ca3e1d30c3f13a80/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7d605acaacc68d4c50af8e4ca3e1d30c3f13a80/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=f7d605acaacc68d4c50af8e4ca3e1d30c3f13a80", "patch": "@@ -1450,6 +1450,21 @@ is_overloaded_fn (tree x)\n \t   || TREE_CODE (x) == OVERLOAD);\n }\n \n+/* X is the CALL_EXPR_FN of a CALL_EXPR.  If X represents a dependent name\n+   (14.6.2), return the IDENTIFIER_NODE for that name.  Otherwise, return\n+   NULL_TREE.  */\n+\n+static tree\n+dependent_name (tree x)\n+{\n+  if (TREE_CODE (x) == IDENTIFIER_NODE)\n+    return x;\n+  if (TREE_CODE (x) != COMPONENT_REF\n+      && is_overloaded_fn (x))\n+    return DECL_NAME (get_first_fn (x));\n+  return NULL_TREE;\n+}\n+\n /* Returns true iff X is an expression for an overloaded function\n    whose type cannot be known without performing overload\n    resolution.  */\n@@ -2187,7 +2202,12 @@ cp_tree_equal (tree t1, tree t2)\n       {\n \ttree arg1, arg2;\n \tcall_expr_arg_iterator iter1, iter2;\n-\tif (!cp_tree_equal (CALL_EXPR_FN (t1), CALL_EXPR_FN (t2)))\n+\t/* Core 1321: dependent names are equivalent even if the\n+\t   overload sets are different.  */\n+\ttree name1 = dependent_name (CALL_EXPR_FN (t1));\n+\ttree name2 = dependent_name (CALL_EXPR_FN (t2));\n+\tif (!(name1 && name2 && name1 == name2)\n+\t    && !cp_tree_equal (CALL_EXPR_FN (t1), CALL_EXPR_FN (t2)))\n \t  return false;\n \tfor (arg1 = first_call_expr_arg (t1, &iter1),\n \t       arg2 = first_call_expr_arg (t2, &iter2);"}, {"sha": "bacec37e9ace6141cd691e96d6c0a9e47232bb28", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7d605acaacc68d4c50af8e4ca3e1d30c3f13a80/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7d605acaacc68d4c50af8e4ca3e1d30c3f13a80/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f7d605acaacc68d4c50af8e4ca3e1d30c3f13a80", "patch": "@@ -1,3 +1,9 @@\n+2011-08-23  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/49045\n+\tCore 1321\n+\t* g++.dg/cpp0x/overload2.C: New.\n+\n 2011-08-23  Jason Merrill  <jason@redhat.com>\n \n \tCore 903"}, {"sha": "ff8ad22bea69f24214529a07615314b2d57bee1a", "filename": "gcc/testsuite/g++.dg/cpp0x/overload2.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7d605acaacc68d4c50af8e4ca3e1d30c3f13a80/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Foverload2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7d605acaacc68d4c50af8e4ca3e1d30c3f13a80/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Foverload2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Foverload2.C?ref=f7d605acaacc68d4c50af8e4ca3e1d30c3f13a80", "patch": "@@ -0,0 +1,24 @@\n+// Core 1321\n+// { dg-options -std=c++0x }\n+// Two dependent names are equivalent even if the overload sets found by\n+// phase 1 lookup are different.  Merging them keeps the earlier set.\n+\n+int g1(int);\n+template <class T> decltype(g1(T())) f1();\n+int g1();\n+template <class T> decltype(g1(T())) f1()\n+{ return g1(T()); }\n+int i1 = f1<int>();\t    // OK, g1(int) was declared before the first f1\n+\n+template <class T> decltype(g2(T())) f2();\n+int g2(int);\n+template <class T> decltype(g2(T())) f2() // { dg-error \"g2. was not declared\" }\n+{ return g2(T()); }\n+int i2 = f2<int>();\t\t\t  // { dg-error \"no match\" }\n+\n+int g3();\n+template <class T> decltype(g3(T())) f3();\n+int g3(int);\n+template <class T> decltype(g3(T())) f3() // { dg-error \"too many arguments\" }\n+{ return g3(T()); }\n+int i3 = f3<int>();\t\t\t  // { dg-error \"no match\" }"}]}