{"sha": "4966381af5a597dd1cf0f4f73b70d12f5d17be13", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDk2NjM4MWFmNWE1OTdkZDFjZjBmNGY3M2I3MGQxMmY1ZDE3YmUxMw==", "commit": {"author": {"name": "Brendan Kehoe", "email": "brendan@cygnus.com", "date": "1997-10-23T00:00:20Z"}, "committer": {"name": "Brendan Kehoe", "email": "brendan@gcc.gnu.org", "date": "1997-10-23T00:00:20Z"}, "message": "method.c (build_template_parm_names, [...]): Add static to definitions.\n\n        * method.c (build_template_parm_names, build_decl_overload_real):\n        Add static to definitions.\n        * pt.c (add_to_template_args, note_template_header,\n        processing_explicit_specialization, type_unification_real): Likewise.\n        ({determine,check}_explicit_specialization): Use a single string for\n        error messages.\n\nfixes problems building with sunos4 system cc\n\nFrom-SVN: r16150", "tree": {"sha": "8abffc7e1ba3683a36edc89cfa35c91a46421068", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8abffc7e1ba3683a36edc89cfa35c91a46421068"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4966381af5a597dd1cf0f4f73b70d12f5d17be13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4966381af5a597dd1cf0f4f73b70d12f5d17be13", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4966381af5a597dd1cf0f4f73b70d12f5d17be13", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4966381af5a597dd1cf0f4f73b70d12f5d17be13/comments", "author": null, "committer": null, "parents": [{"sha": "a04232e5ffc460e6afc45299c98a1d8cb9273504", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a04232e5ffc460e6afc45299c98a1d8cb9273504", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a04232e5ffc460e6afc45299c98a1d8cb9273504"}], "stats": {"total": 30, "additions": 19, "deletions": 11}, "files": [{"sha": "ca3ef801b5a7fda6b99f573534ab80ec07f5a8f2", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4966381af5a597dd1cf0f4f73b70d12f5d17be13/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4966381af5a597dd1cf0f4f73b70d12f5d17be13/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4966381af5a597dd1cf0f4f73b70d12f5d17be13", "patch": "@@ -1,3 +1,12 @@\n+1997-10-22  Brendan Kehoe  <brendan@cygnus.com>\n+\n+\t* method.c (build_template_parm_names, build_decl_overload_real):\n+\tAdd static to definitions.\n+\t* pt.c (add_to_template_args, note_template_header,\n+\tprocessing_explicit_specialization, type_unification_real): Likewise.\n+\t({determine,check}_explicit_specialization): Use a single string for\n+\terror messages.\n+\n Mon Oct 20 12:06:34 1997  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* except.c (expand_exception_blocks): Call do_pending_stack_adust."}, {"sha": "3b7dbc833a37035a57b2292146b2f9449ddfec65", "filename": "gcc/cp/method.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4966381af5a597dd1cf0f4f73b70d12f5d17be13/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4966381af5a597dd1cf0f4f73b70d12f5d17be13/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=4966381af5a597dd1cf0f4f73b70d12f5d17be13", "patch": "@@ -656,7 +656,7 @@ build_overload_value (type, value, in_template)\n /* Add encodings for the vector of template parameters in PARMLIST,\n    given the vector of arguments to be substituted in ARGLIST.  */\n \n-void\n+static void\n build_template_parm_names (parmlist, arglist)\n      tree parmlist;\n      tree arglist;\n@@ -1104,7 +1104,7 @@ build_static_name (context, name)\n   return get_identifier ((char *)obstack_base (&scratch_obstack));\n }\n \f\n-tree \n+static tree \n build_decl_overload_real (dname, parms, ret_type, tparms, targs,\n \t\t\t  for_method) \n      tree dname;"}, {"sha": "e960f131707de61650dd97a6b58bc7058449b607", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4966381af5a597dd1cf0f4f73b70d12f5d17be13/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4966381af5a597dd1cf0f4f73b70d12f5d17be13/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=4966381af5a597dd1cf0f4f73b70d12f5d17be13", "patch": "@@ -214,7 +214,7 @@ is_member_template (t)\n /* Return a new template argument vector which contains all of ARGS,\n    but has as its innermost set of arguments the EXTRA_ARGS.  */\n \n-tree\n+static tree\n add_to_template_args (args, extra_args)\n      tree args;\n      tree extra_args;\n@@ -288,7 +288,7 @@ reset_specialization ()\n /* We've just seen a template header.  If SPECIALIZATION is non-zero,\n    it was of the form template <>.  */\n \n-void \n+static void \n note_template_header (specialization)\n      int specialization;\n {\n@@ -301,8 +301,8 @@ note_template_header (specialization)\n    types that appeared was TEMPLATE_COUNT, is an explicit\n    specialization.  */\n \n-int\n-processing_explicit_specialization(template_count)\n+static int\n+processing_explicit_specialization (template_count)\n      int template_count;\n {\n   /* A function declaration is an explicit specialization of a member\n@@ -424,8 +424,8 @@ determine_explicit_specialization (template_id, type, targs_out,\n   if (matching_fns == NULL_TREE)\n     {\n       if (complain)\n-\tcp_error (\"Specialization of `%s' does not match any template \"\n-\t\t  \"declaration.\", IDENTIFIER_POINTER (name));\n+\tcp_error (\"Specialization of `%s' does not match any template declaration.\",\n+\t\t  IDENTIFIER_POINTER (name));\n       *targs_out = NULL_TREE;\n       return NULL_TREE;\n     }\n@@ -501,8 +501,7 @@ check_explicit_specialization (declarator, decl, template_count, flags)\n \t       an explicit instantiation.  */\n \t    return 2;\n \t  else if (pedantic)\n-\t    pedwarn (\"Explicit specialization not preceeded by \"\n-\t\t     \"`template <>'\");\n+\t    pedwarn (\"Explicit specialization not preceeded by `template <>'\");\n \t}\n \n       if (TREE_CODE (declarator) != TEMPLATE_ID_EXPR)\n@@ -3564,7 +3563,7 @@ type_unification (tparms, targs, parms, args, targs_in, nsubsts,\n }\n \n \n-int\n+static int\n type_unification_real (tparms, targs, parms, args, nsubsts, subr,\n \t\t       strict, allow_incomplete)\n      tree tparms, *targs, parms, args;"}]}