{"sha": "b9b44fb9f8a93235405ff70ee339e7e8f7f6d4f9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjliNDRmYjlmOGE5MzIzNTQwNWZmNzBlZTMzOWU3ZThmN2Y2ZDRmOQ==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@integrable-solutions.net", "date": "2004-03-21T23:55:03Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2004-03-21T23:55:03Z"}, "message": "pretty-print.c (pp_base_maybe_space): New function.\n\n\t* pretty-print.c (pp_base_maybe_space): New function.\n\t* pretty-print.h (pp_base_maybe_space): Declare.\n\t(pp_maybe_space): New macro.\ncp/\n\t* error.c (enum pad): Remove.\n\t(dump_qualifiers): Likewise.\n\t(dump_type): Replace dump_qualifiers with\n\t* pp_cxx_cv_qualifier_seq.\n\t(dump_aggr_type): Likewise.\n\t(dump_type_suffix): Likewise.\n\t(dump_simple_decl): Likewise.\n\t(dump_function_decl): Likewise.\n\t(cv_to_string): Likewise.\n\t(dump_type_prefix): Likewise.  Adjust return void.\n\t* cxx-pretty-print.c (pp_cxx_cv_qualifier_seq): Move to\n\tcxx_pretty_print.h.\n\t(pp_cxx_template_keyword_if_needed): Document.\n\t(pp_cxx_qualified_id): Document case FUNCTION_DECL.  Tidy.\n\t(pp_cxx_expression): Handle NON_DEPENDENT_EXPR and\n\tMUST_NOT_THROW_EXPR.\ntestsuite/\n\t* g++.dg/template/qualttp20.C: Adjust dg- regexp.\n\nFrom-SVN: r79796", "tree": {"sha": "2e58fc55718cfb98106df9ec9e9dac796b80a2e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2e58fc55718cfb98106df9ec9e9dac796b80a2e8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b9b44fb9f8a93235405ff70ee339e7e8f7f6d4f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9b44fb9f8a93235405ff70ee339e7e8f7f6d4f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9b44fb9f8a93235405ff70ee339e7e8f7f6d4f9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9b44fb9f8a93235405ff70ee339e7e8f7f6d4f9/comments", "author": {"login": "cxx-undef", "id": 5528103, "node_id": "MDQ6VXNlcjU1MjgxMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/5528103?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cxx-undef", "html_url": "https://github.com/cxx-undef", "followers_url": "https://api.github.com/users/cxx-undef/followers", "following_url": "https://api.github.com/users/cxx-undef/following{/other_user}", "gists_url": "https://api.github.com/users/cxx-undef/gists{/gist_id}", "starred_url": "https://api.github.com/users/cxx-undef/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cxx-undef/subscriptions", "organizations_url": "https://api.github.com/users/cxx-undef/orgs", "repos_url": "https://api.github.com/users/cxx-undef/repos", "events_url": "https://api.github.com/users/cxx-undef/events{/privacy}", "received_events_url": "https://api.github.com/users/cxx-undef/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1c7b1b7e259afc4c210dc55f407a05f75c3e7122", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c7b1b7e259afc4c210dc55f407a05f75c3e7122", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c7b1b7e259afc4c210dc55f407a05f75c3e7122"}], "stats": {"total": 199, "additions": 126, "deletions": 73}, "files": [{"sha": "79bf01b542696dc1208561c05b80dd4c266380eb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9b44fb9f8a93235405ff70ee339e7e8f7f6d4f9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9b44fb9f8a93235405ff70ee339e7e8f7f6d4f9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b9b44fb9f8a93235405ff70ee339e7e8f7f6d4f9", "patch": "@@ -1,3 +1,9 @@\n+2004-03-21  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n+\n+\t* pretty-print.c (pp_base_maybe_space): New function.\n+\t* pretty-print.h (pp_base_maybe_space): Declare.\n+\t(pp_maybe_space): New macro.\n+\n 2004-03-21  Ulrich Weigand  <uweigand@de.ibm.com>\n \n \t* config/s390/s390.md (\"addti3\", \"subti3\"): New insns and splitters."}, {"sha": "f1071535e98e9895b4b68898b09ea508c9385d58", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9b44fb9f8a93235405ff70ee339e7e8f7f6d4f9/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9b44fb9f8a93235405ff70ee339e7e8f7f6d4f9/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b9b44fb9f8a93235405ff70ee339e7e8f7f6d4f9", "patch": "@@ -1,3 +1,21 @@\n+2004-03-21  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n+\n+\t* error.c (enum pad): Remove.\n+\t(dump_qualifiers): Likewise.\n+\t(dump_type): Replace dump_qualifiers with pp_cxx_cv_qualifier_seq.\n+\t(dump_aggr_type): Likewise.\n+\t(dump_type_suffix): Likewise.\n+\t(dump_simple_decl): Likewise.\n+\t(dump_function_decl): Likewise.\n+\t(cv_to_string): Likewise.\n+\t(dump_type_prefix): Likewise.  Adjust return void.  \n+\t* cxx-pretty-print.c (pp_cxx_cv_qualifier_seq): Move to\n+\tcxx_pretty_print.h.\n+\t(pp_cxx_template_keyword_if_needed): Document.\n+\t(pp_cxx_qualified_id): Document case FUNCTION_DECL.  Tidy.\n+\t(pp_cxx_expression): Handle NON_DEPENDENT_EXPR and\n+\tMUST_NOT_THROW_EXPR.  \n+\n 2004-03-21  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/14616"}, {"sha": "1a109a8f2c66a2a7c259c67835fee780469936c5", "filename": "gcc/cp/cxx-pretty-print.c", "status": "modified", "additions": 54, "deletions": 2, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9b44fb9f8a93235405ff70ee339e7e8f7f6d4f9/gcc%2Fcp%2Fcxx-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9b44fb9f8a93235405ff70ee339e7e8f7f6d4f9/gcc%2Fcp%2Fcxx-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcxx-pretty-print.c?ref=b9b44fb9f8a93235405ff70ee339e7e8f7f6d4f9", "patch": "@@ -70,8 +70,6 @@ pp_cxx_nonconsecutive_character (cxx_pretty_printer *pp, int c)\n #define pp_cxx_identifier(PP, ID) pp_c_identifier (pp_c_base (PP), ID)\n #define pp_cxx_tree_identifier(PP, T) pp_c_tree_identifier (pp_c_base (PP), T)\n \n-#define pp_cxx_cv_qualifier_seq(PP, T)   \\\n-   pp_c_type_qualifier_list (pp_c_base (PP), T)\n #define pp_cxx_storage_class_specifier(PP, T) \\\n    pp_c_storage_class_specifier (pp_c_base (PP), T)\n #define pp_cxx_expression_list(PP, T)    \\\n@@ -109,6 +107,7 @@ is_destructor_name (tree name)\n \n    conversion-declarator:\n       ptr-operator conversion-declarator(opt)  */\n+\n static inline void\n pp_cxx_conversion_function_id (cxx_pretty_printer *pp, tree t)\n {\n@@ -131,6 +130,7 @@ pp_cxx_template_id (cxx_pretty_printer *pp, tree t)\n      conversion-function-id\n      ~ class-name\n      template-id  */\n+\n static void\n pp_cxx_unqualified_id (cxx_pretty_printer *pp, tree t)\n {\n@@ -195,6 +195,11 @@ pp_cxx_unqualified_id (cxx_pretty_printer *pp, tree t)\n     }\n }\n \n+/* Pretty-print out the token sequence \":: template\" in template codes\n+   where it is needed to \"inline declare\" the (following) member as\n+   a template.  This situtation arises when SCOPE of T is dependent\n+   on template parameters.  */\n+\n static inline void\n pp_cxx_template_keyword_if_needed (cxx_pretty_printer *pp, tree scope, tree t)\n {\n@@ -206,6 +211,7 @@ pp_cxx_template_keyword_if_needed (cxx_pretty_printer *pp, tree scope, tree t)\n /* nested-name-specifier:\n       class-or-namespace-name :: nested-name-specifier(opt)\n       class-or-namespace-name :: template nested-name-specifier   */\n+\n static void\n pp_cxx_nested_name_specifier (cxx_pretty_printer *pp, tree t)\n {\n@@ -221,23 +227,34 @@ pp_cxx_nested_name_specifier (cxx_pretty_printer *pp, tree t)\n \n /* qualified-id:\n       nested-name-specifier template(opt) unqualified-id  */\n+\n static void\n pp_cxx_qualified_id (cxx_pretty_printer *pp, tree t)\n {\n   switch (TREE_CODE (t))\n     {\n+      /* A pointer-to-member is always qualified.  */\n     case PTRMEM_CST:\n       pp_cxx_nested_name_specifier (pp, PTRMEM_CST_CLASS (t));\n       pp_cxx_unqualified_id (pp, PTRMEM_CST_MEMBER (t));\n       break;\n \n+      /* In Standard C++, functions cannot possibly be used as\n+         nested-name-specifiers.  However, there are situations where\n+         is \"makes sense\" to output the surrouding function name for the\n+         purpose of emphasizing on the scope kind.  Just printing the\n+         function name might not be sufficient as it may be overloaded; so,\n+         we decorate the function with its signature too.\n+         FIXME:  This is probably the wrong pretty-printing for conversion\n+         functions and some function templates.  */\n     case OVERLOAD:\n       t = OVL_CURRENT (t);\n     case FUNCTION_DECL:\n       if (DECL_FUNCTION_MEMBER_P (t))\n         pp_cxx_nested_name_specifier (pp, DECL_CONTEXT (t));\n       pp_cxx_unqualified_id\n         (pp, DECL_CONSTRUCTOR_P (t) ? DECL_CONTEXT (t) : t);\n+      pp_cxx_parameter_declaration_clause (pp, TREE_TYPE (t));\n       break;\n \n     case OFFSET_REF:\n@@ -263,6 +280,7 @@ pp_cxx_qualified_id (cxx_pretty_printer *pp, tree t)\n /* id-expression:\n       unqualified-id\n       qualified-id   */\n+\n static inline void\n pp_cxx_id_expression (cxx_pretty_printer *pp, tree t)\n {\n@@ -282,6 +300,7 @@ pp_cxx_id_expression (cxx_pretty_printer *pp, tree t)\n      :: qualifier-id\n      ( expression )\n      id-expression   */\n+\n static void\n pp_cxx_primary_expression (cxx_pretty_printer *pp, tree t)\n {\n@@ -482,6 +501,7 @@ pp_cxx_postfix_expression (cxx_pretty_printer *pp, tree t)\n \n    new-initializer:\n       ( expression-list(opt) )  */\n+\n static void\n pp_cxx_new_expression (cxx_pretty_printer *pp, tree t)\n {\n@@ -522,6 +542,7 @@ pp_cxx_new_expression (cxx_pretty_printer *pp, tree t)\n /* delete-expression:\n       ::(opt) delete cast-expression\n       ::(opt) delete [ ] cast-expression   */\n+\n static void\n pp_cxx_delete_expression (cxx_pretty_printer *pp, tree t)\n {\n@@ -562,6 +583,7 @@ pp_cxx_delete_expression (cxx_pretty_printer *pp, tree t)\n    GNU extensions:\n       __alignof__ unary-expression\n       __alignof__ ( type-id )  */\n+\n static void\n pp_cxx_unary_expression (cxx_pretty_printer *pp, tree t)\n {\n@@ -587,6 +609,7 @@ pp_cxx_unary_expression (cxx_pretty_printer *pp, tree t)\n /* cast-expression:\n       unary-expression\n       ( type-id ) cast-expression  */\n+\n static void\n pp_cxx_cast_expression (cxx_pretty_printer *pp, tree t)\n {\n@@ -607,6 +630,7 @@ pp_cxx_cast_expression (cxx_pretty_printer *pp, tree t)\n       cast-expression\n       pm-expression .* cast-expression\n       pm-expression ->* cast-expression  */\n+\n static void\n pp_cxx_pm_expression (cxx_pretty_printer *pp, tree t)\n {\n@@ -640,6 +664,7 @@ pp_cxx_pm_expression (cxx_pretty_printer *pp, tree t)\n       multiplicative-expression * pm-expression\n       multiplicative-expression / pm-expression\n       multiplicative-expression % pm-expression  */\n+\n static void\n pp_cxx_multiplicative_expression (cxx_pretty_printer *pp, tree e)\n {\n@@ -670,6 +695,7 @@ pp_cxx_multiplicative_expression (cxx_pretty_printer *pp, tree e)\n /* conditional-expression:\n       logical-or-expression\n       logical-or-expression ?  expression  : assignment-expression  */\n+\n static void\n pp_cxx_conditional_expression (cxx_pretty_printer *pp, tree e)\n {\n@@ -687,6 +713,8 @@ pp_cxx_conditional_expression (cxx_pretty_printer *pp, tree e)\n     pp_c_logical_or_expression (pp_c_base (pp), e);\n }\n \n+/* Pretty-print a compound assignment operator token as indicated by T.  */\n+\n static void\n pp_cxx_assignment_operator (cxx_pretty_printer *pp, tree t)\n {\n@@ -733,6 +761,7 @@ pp_cxx_assignment_operator (cxx_pretty_printer *pp, tree t)\n \n    assignment-operator: one of\n       =    *=    /=    %=    +=    -=    >>=    <<=    &=    ^=    |=  */\n+\n static void\n pp_cxx_assignment_expression (cxx_pretty_printer *pp, tree e)\n {\n@@ -854,6 +883,11 @@ pp_cxx_expression (cxx_pretty_printer *pp, tree t)\n       pp_cxx_assignment_expression (pp, t);\n       break;\n \n+    case NON_DEPENDENT_EXPR:\n+    case MUST_NOT_THROW_EXPR:\n+      pp_cxx_expression (pp, t);\n+      break;\n+\n     default:\n       pp_c_expression (pp_c_base (pp), t);\n       break;      \n@@ -867,6 +901,7 @@ pp_cxx_expression (cxx_pretty_printer *pp, tree t)\n       inline\n       virtual\n       explicit   */\n+\n static void\n pp_cxx_function_specifier (cxx_pretty_printer *pp, tree t)\n {\n@@ -894,6 +929,7 @@ pp_cxx_function_specifier (cxx_pretty_printer *pp, tree t)\n       function-specifier\n       friend\n       typedef  */\n+\n static void\n pp_cxx_decl_specifier_seq (cxx_pretty_printer *pp, tree t)\n {\n@@ -950,6 +986,7 @@ pp_cxx_decl_specifier_seq (cxx_pretty_printer *pp, tree t)\n       float\n       double\n       void  */\n+\n static void\n pp_cxx_simple_type_specifier (cxx_pretty_printer *pp, tree t)\n {\n@@ -1075,6 +1112,7 @@ pp_cxx_implicit_parameter_type (tree mf)\n       decl-specifier-seq declarator = assignment-expression\n       decl-specifier-seq abstract-declarator(opt)\n       decl-specifier-seq abstract-declarator(opt) assignment-expression  */\n+\n static inline void\n pp_cxx_parameter_declaration (cxx_pretty_printer *pp, tree t)\n {\n@@ -1092,6 +1130,7 @@ pp_cxx_parameter_declaration (cxx_pretty_printer *pp, tree t)\n    parameter-declaration-list:\n       parameter-declaration\n       parameter-declaration-list , parameter-declaration  */\n+\n static void\n pp_cxx_parameter_declaration_clause (cxx_pretty_printer *pp, tree t)\n {\n@@ -1129,6 +1168,7 @@ pp_cxx_parameter_declaration_clause (cxx_pretty_printer *pp, tree t)\n    type-id-list\n       type-id\n       type-id-list , type-id   */\n+\n static void\n pp_cxx_exception_specification (cxx_pretty_printer *pp, tree t)\n {\n@@ -1153,6 +1193,7 @@ pp_cxx_exception_specification (cxx_pretty_printer *pp, tree t)\n                                             exception-specification(opt)\n       direct-declaration [ constant-expression(opt) ]\n       ( declarator )  */\n+\n static void\n pp_cxx_direct_declarator (cxx_pretty_printer *pp, tree t)\n {\n@@ -1199,6 +1240,7 @@ pp_cxx_direct_declarator (cxx_pretty_printer *pp, tree t)\n /* declarator:\n    direct-declarator\n    ptr-operator declarator  */\n+\n static void\n pp_cxx_declarator (cxx_pretty_printer *pp, tree t)\n {\n@@ -1218,6 +1260,7 @@ pp_cxx_declarator (cxx_pretty_printer *pp, tree t)\n    mem-initializer-id:\n       ::(opt) nested-name-specifier(opt) class-name\n       identifier   */\n+\n static void\n pp_cxx_ctor_initializer (cxx_pretty_printer *pp, tree t)\n {\n@@ -1270,6 +1313,7 @@ pp_cxx_function_definition (cxx_pretty_printer *pp, tree t)\n /* abstract-declarator:\n       ptr-operator abstract-declarator(opt)\n       direct-abstract-declarator  */\n+\n static void\n pp_cxx_abstract_declarator (cxx_pretty_printer *pp, tree t)\n {\n@@ -1290,6 +1334,7 @@ pp_cxx_abstract_declarator (cxx_pretty_printer *pp, tree t)\n                            cv-qualifier-seq(opt) exception-specification(opt)\n       direct-abstract-declarator(opt) [ constant-expression(opt) ]\n       ( abstract-declarator )  */\n+\n static void\n pp_cxx_direct_abstract_declarator (cxx_pretty_printer *pp, tree t)\n {\n@@ -1332,6 +1377,7 @@ pp_cxx_direct_abstract_declarator (cxx_pretty_printer *pp, tree t)\n \n /* type-id:\n      type-specifier-seq abstract-declarator(opt) */\n+\n static void\n pp_cxx_type_id (cxx_pretty_printer *pp, tree t)\n {\n@@ -1374,6 +1420,7 @@ pp_cxx_type_id (cxx_pretty_printer *pp, tree t)\n       assignment-expression\n       type-id\n       template-name   */\n+\n static void\n pp_cxx_template_argument_list (cxx_pretty_printer *pp, tree t)\n {\n@@ -1511,6 +1558,7 @@ pp_cxx_namespace_alias_definition (cxx_pretty_printer *pp, tree t)\n \n /* simple-declaration:\n       decl-specifier-seq(opt) init-declarator-list(opt)  */\n+\n static void\n pp_cxx_simple_declaration (cxx_pretty_printer *pp, tree t)\n {\n@@ -1550,6 +1598,7 @@ pp_cxx_template_parameter_list (cxx_pretty_printer *pp, tree t)\n      template < template-parameter-list > class identifier(opt)\n      template < template-parameter-list > class identifier(opt) = template-name\n */\n+\n static void\n pp_cxx_template_parameter (cxx_pretty_printer *pp, tree t)\n {\n@@ -1600,6 +1649,7 @@ pp_cxx_canonical_template_parameter (cxx_pretty_printer *pp, tree parm)\n /*\n   template-declaration:\n      export(opt) template < template-parameter-list > declaration   */\n+\n static void\n pp_cxx_template_declaration (cxx_pretty_printer *pp, tree t)\n {\n@@ -1704,6 +1754,8 @@ pp_cxx_declaration (cxx_pretty_printer *pp, tree t)\n \f\n typedef c_pretty_print_fn pp_fun;\n \n+/* Initialization of a C++ pretty-printer object.  */\n+\n void\n pp_cxx_pretty_printer_init (cxx_pretty_printer *pp)\n {"}, {"sha": "6c9dfb7f59584f219dd5628606a607ecaae27763", "filename": "gcc/cp/cxx-pretty-print.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9b44fb9f8a93235405ff70ee339e7e8f7f6d4f9/gcc%2Fcp%2Fcxx-pretty-print.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9b44fb9f8a93235405ff70ee339e7e8f7f6d4f9/gcc%2Fcp%2Fcxx-pretty-print.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcxx-pretty-print.h?ref=b9b44fb9f8a93235405ff70ee339e7e8f7f6d4f9", "patch": "@@ -41,6 +41,9 @@ typedef struct\n   tree enclosing_scope;\n } cxx_pretty_printer;\n \n+#define pp_cxx_cv_qualifier_seq(PP, T)   \\\n+   pp_c_type_qualifier_list (pp_c_base (PP), T)\n+\n void pp_cxx_pretty_printer_init (cxx_pretty_printer *);\n \n void pp_cxx_declaration (cxx_pretty_printer *, tree);"}, {"sha": "324975c4d672b2e9877cb74a2e905f35619b483f", "filename": "gcc/cp/error.c", "status": "modified", "additions": 27, "deletions": 69, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9b44fb9f8a93235405ff70ee339e7e8f7f6d4f9/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9b44fb9f8a93235405ff70ee339e7e8f7f6d4f9/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=b9b44fb9f8a93235405ff70ee339e7e8f7f6d4f9", "patch": "@@ -32,8 +32,6 @@ Boston, MA 02111-1307, USA.  */\n #include \"langhooks-def.h\"\n #include \"cxx-pretty-print.h\"\n \n-enum pad { none, before, after };\n-\n #define pp_template_argument_list_start(PP) \\\n    pp_non_consecutive_character (PP, '<')\n #define pp_template_argument_list_end(PP)  \\\n@@ -72,12 +70,11 @@ static void dump_expr (tree, int);\n static void dump_unary_op (const char *, tree, int);\n static void dump_binary_op (const char *, tree, int);\n static void dump_aggr_type (tree, int);\n-static enum pad dump_type_prefix (tree, int);\n+static void dump_type_prefix (tree, int);\n static void dump_type_suffix (tree, int);\n static void dump_function_name (tree, int);\n static void dump_expr_list (tree, int);\n static void dump_global_iord (tree);\n-static enum pad dump_qualifiers (tree, enum pad);\n static void dump_parameters (tree, int);\n static void dump_exception_spec (tree, int);\n static const char *class_key_or_enum (tree);\n@@ -143,38 +140,6 @@ dump_scope (tree scope, int flags)\n     }\n }\n \n-/* Dump type qualifiers, providing padding as requested. Return an\n-   indication of whether we dumped something.  */\n-\n-static enum pad\n-dump_qualifiers (tree t, enum pad p)\n-{\n-  static const int masks[] =\n-    {TYPE_QUAL_CONST, TYPE_QUAL_VOLATILE, TYPE_QUAL_RESTRICT};\n-  static const char *const names[] =\n-    {\"const\", \"volatile\", \"__restrict\"};\n-  int ix;\n-  int quals = TYPE_QUALS (t);\n-  int do_after = p == after;\n-\n-  if (quals)\n-    {\n-      for (ix = 0; ix != 3; ix++)\n-        if (masks[ix] & quals)\n-          {\n-            if (p == before)\n-              pp_space (cxx_pp);\n-            p = before;\n-            pp_identifier (cxx_pp, names[ix]);\n-          }\n-      if (do_after)\n-        pp_space (cxx_pp);\n-    }\n-  else\n-    p = none;\n-  return p;\n-}\n-\n /* Dump the template ARGument under control of FLAGS.  */\n \n static void\n@@ -367,7 +332,7 @@ dump_type (tree t, int flags)\n       break;\n \n     case TEMPLATE_TYPE_PARM:\n-      dump_qualifiers (t, after);\n+      pp_cxx_cv_qualifier_seq (cxx_pp, t);\n       if (TYPE_IDENTIFIER (t))\n \tpp_tree_identifier (cxx_pp, TYPE_IDENTIFIER (t));\n       else\n@@ -390,7 +355,7 @@ dump_type (tree t, int flags)\n       break;\n     }\n     case TYPENAME_TYPE:\n-      dump_qualifiers (t, after);\n+      pp_cxx_cv_qualifier_seq (cxx_pp, t);\n       pp_string (cxx_pp, \"typename \");\n       dump_typename (t, flags);\n       break;\n@@ -460,7 +425,7 @@ dump_aggr_type (tree t, int flags)\n   int typdef = 0;\n   int tmplate = 0;\n \n-  dump_qualifiers (t, after);\n+  pp_cxx_cv_qualifier_seq (cxx_pp, t);\n \n   if (flags & TFF_CLASS_KEY_OR_ENUM)\n     {\n@@ -520,15 +485,12 @@ dump_aggr_type (tree t, int flags)\n    deal with prefix and suffix.\n \n    Arrays must also do this for DECL nodes, like int a[], and for things like\n-   int *[]&.\n-\n-   Return indicates how you should pad an object name after this. I.e. you\n-   want to pad non-*, non-& cores, but not pad * or & types.  */\n+   int *[]&.  */\n \n-static enum pad\n+static void \n dump_type_prefix (tree t, int flags)\n {\n-  enum pad padding = before;\n+  pp_base (cxx_pp)->padding = pp_none;\n \n   if (TYPE_PTRMEMFUNC_P (t))\n     {\n@@ -543,53 +505,49 @@ dump_type_prefix (tree t, int flags)\n       {\n \ttree sub = TREE_TYPE (t);\n \n-\tpadding = dump_type_prefix (sub, flags);\n+\tdump_type_prefix (sub, flags);\n \tif (TREE_CODE (sub) == ARRAY_TYPE)\n \t  {\n \t    pp_space (cxx_pp);\n \t    pp_left_paren (cxx_pp);\n \t  }\n \tpp_character (cxx_pp, \"&*\"[TREE_CODE (t) == POINTER_TYPE]);\n-\tpadding = dump_qualifiers (t, before);\n+        pp_base (cxx_pp)->padding = pp_before;\n+        pp_cxx_cv_qualifier_seq (cxx_pp, t);\n       }\n       break;\n \n     case OFFSET_TYPE:\n     offset_type:\n-      padding = dump_type_prefix (TREE_TYPE (t), flags);\n+      dump_type_prefix (TREE_TYPE (t), flags);\n       if (TREE_CODE (t) == OFFSET_TYPE)\t/* pmfs deal with this in d_t_p */\n \t{\n-\t  if (padding != none)\n-\t    pp_space (cxx_pp);\n+          pp_maybe_space (cxx_pp);\n \t  dump_type (TYPE_OFFSET_BASETYPE (t), flags);\n \t  pp_colon_colon (cxx_pp);\n \t}\n       pp_star (cxx_pp);\n-      padding = dump_qualifiers (t, none);\n+      pp_cxx_cv_qualifier_seq (cxx_pp, t);\n       break;\n \n       /* Can only be reached through function pointer -- this would not be\n          correct if FUNCTION_DECLs used it.  */\n     case FUNCTION_TYPE:\n-      padding = dump_type_prefix (TREE_TYPE (t), flags);\n-      if (padding != none)\n-        pp_space (cxx_pp);\n+      dump_type_prefix (TREE_TYPE (t), flags);\n+      pp_maybe_space (cxx_pp);\n       pp_left_paren (cxx_pp);\n-      padding = none;\n       break;\n \n     case METHOD_TYPE:\n-      padding = dump_type_prefix (TREE_TYPE (t), flags);\n-      if (padding != none)\n-        pp_space (cxx_pp);\n+      dump_type_prefix (TREE_TYPE (t), flags);\n+      pp_maybe_space (cxx_pp);\n       pp_left_paren (cxx_pp);\n-      padding = none;\n       dump_aggr_type (TYPE_METHOD_BASETYPE (t), flags);\n       pp_colon_colon (cxx_pp);\n       break;\n \n     case ARRAY_TYPE:\n-      padding = dump_type_prefix (TREE_TYPE (t), flags);\n+      dump_type_prefix (TREE_TYPE (t), flags);\n       break;\n \n     case ENUMERAL_TYPE:\n@@ -612,7 +570,7 @@ dump_type_prefix (tree t, int flags)\n     case VECTOR_TYPE:\n     case TYPEOF_TYPE:\n       dump_type (t, flags);\n-      padding = before;\n+      pp_base (cxx_pp)->padding = pp_before;\n       break;\n \n     default:\n@@ -622,7 +580,6 @@ dump_type_prefix (tree t, int flags)\n       pp_identifier (cxx_pp, \"<typeprefixerror>\");\n       break;\n     }\n-  return padding;\n }\n \n /* Dump the suffix of type T, under control of FLAGS.  This is the part\n@@ -659,8 +616,8 @@ dump_type_suffix (tree t, int flags)\n \tdump_parameters (arg, flags & ~TFF_FUNCTION_DEFAULT_ARGUMENTS);\n \n \tif (TREE_CODE (t) == METHOD_TYPE)\n-\t  dump_qualifiers\n-\t    (TREE_TYPE (TREE_VALUE (TYPE_ARG_TYPES (t))), before);\n+          pp_cxx_cv_qualifier_seq\n+            (cxx_pp, TREE_TYPE (TREE_VALUE (TYPE_ARG_TYPES (t))));\n \tdump_exception_spec (TYPE_RAISES_EXCEPTIONS (t), flags);\n \tdump_type_suffix (TREE_TYPE (t), flags);\n \tbreak;\n@@ -736,8 +693,8 @@ dump_simple_decl (tree t, tree type, int flags)\n {\n   if (flags & TFF_DECL_SPECIFIERS)\n     {\n-      if (dump_type_prefix (type, flags) != none)\n-        pp_space (cxx_pp);\n+      dump_type_prefix (type, flags);\n+      pp_maybe_space (cxx_pp);\n     }\n   if (!DECL_INITIAL (t) || TREE_CODE (DECL_INITIAL (t)) != TEMPLATE_PARM_INDEX)\n     dump_scope (CP_DECL_CONTEXT (t), flags);\n@@ -1095,8 +1052,8 @@ dump_function_decl (tree t, int flags)\n       dump_parameters (parmtypes, flags);\n \n       if (TREE_CODE (fntype) == METHOD_TYPE)\n-\tdump_qualifiers (TREE_TYPE (TREE_VALUE (TYPE_ARG_TYPES (fntype))),\n-\t\t\t before);\n+        pp_cxx_cv_qualifier_seq\n+          (cxx_pp, TREE_TYPE (TREE_VALUE (TYPE_ARG_TYPES (fntype))));\n \n       if (flags & TFF_EXCEPTION_SPECIFICATION)\n \tdump_exception_spec (TYPE_RAISES_EXCEPTIONS (fntype), flags);\n@@ -2116,7 +2073,8 @@ static const char *\n cv_to_string (tree p, int v)\n {\n   pp_clear_output_area (cxx_pp);\n-  dump_qualifiers (p, v ? before : none);\n+  pp_base (cxx_pp)->padding = v ? pp_before : pp_none;\n+  pp_cxx_cv_qualifier_seq (cxx_pp, p);\n   return pp_formatted_text (cxx_pp);\n }\n "}, {"sha": "b92caab695804c2d212c4b9ad8bd66a79acc45a7", "filename": "gcc/pretty-print.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9b44fb9f8a93235405ff70ee339e7e8f7f6d4f9/gcc%2Fpretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9b44fb9f8a93235405ff70ee339e7e8f7f6d4f9/gcc%2Fpretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpretty-print.c?ref=b9b44fb9f8a93235405ff70ee339e7e8f7f6d4f9", "patch": "@@ -545,4 +545,14 @@ pp_base_string (pretty_printer *pp, const char *str)\n   pp_maybe_wrap_text (pp, str, str + (str ? strlen (str) : 0));\n }\n \n+/* Maybe print out a whitespace if needed.   */\n \n+void\n+pp_base_maybe_space (pretty_printer *pp)\n+{\n+  if (pp_base (pp)->padding != pp_none)\n+    {\n+      pp_space (pp);\n+      pp_base (pp)->padding = pp_none;\n+    }\n+}"}, {"sha": "1fece74a2d2d245d878eaae3f9b7abe88b989791", "filename": "gcc/pretty-print.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9b44fb9f8a93235405ff70ee339e7e8f7f6d4f9/gcc%2Fpretty-print.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9b44fb9f8a93235405ff70ee339e7e8f7f6d4f9/gcc%2Fpretty-print.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpretty-print.h?ref=b9b44fb9f8a93235405ff70ee339e7e8f7f6d4f9", "patch": "@@ -205,6 +205,7 @@ struct pretty_print_info\n   } while (0)\n #define pp_maybe_newline_and_indent(PP, N) \\\n   if (pp_needs_newline (PP)) pp_newline_and_indent (PP, N)\n+#define pp_maybe_space(PP)   pp_base_maybe_space (pp_base (PP))\n #define pp_separate_with(PP, C)     \\\n    do {                             \\\n      pp_character (PP, C);          \\\n@@ -257,5 +258,6 @@ extern void pp_base_indent (pretty_printer *);\n extern void pp_base_newline (pretty_printer *);\n extern void pp_base_character (pretty_printer *, int);\n extern void pp_base_string (pretty_printer *, const char *);\n+extern void pp_base_maybe_space (pretty_printer *);\n \n #endif /* GCC_PRETTY_PRINT_H */"}, {"sha": "d7c7ee117a99f57c5d5d34378f415f99e307d3ec", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9b44fb9f8a93235405ff70ee339e7e8f7f6d4f9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9b44fb9f8a93235405ff70ee339e7e8f7f6d4f9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b9b44fb9f8a93235405ff70ee339e7e8f7f6d4f9", "patch": "@@ -1,3 +1,7 @@\n+2004-03-21  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n+\n+\t* g++.dg/template/qualttp20.C: Adjust dg- regexp.\n+\n 2004-03-21  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/14616"}, {"sha": "13f07e14c5c2497e08f11213194c1de30980c03d", "filename": "gcc/testsuite/g++.dg/template/qualttp20.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9b44fb9f8a93235405ff70ee339e7e8f7f6d4f9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqualttp20.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9b44fb9f8a93235405ff70ee339e7e8f7f6d4f9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqualttp20.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqualttp20.C?ref=b9b44fb9f8a93235405ff70ee339e7e8f7f6d4f9", "patch": "@@ -15,8 +15,8 @@ struct AS\n \n template <typename T> struct B1 : T\n {\n-  typedef typename T::L __restrict__ r;// { dg-error \"`__restrict' qualifiers cannot\" \"\" }\n-  typedef typename T::myT __restrict__ p;// { dg-warning \"ignoring `__restrict'\" \"\" { xfail *-*-* } }\n+  typedef typename T::L __restrict__ r;// { dg-error \"`__restrict__' qualifiers cannot\" \"\" }\n+  typedef typename T::myT __restrict__ p;// { dg-warning \"ignoring `__restrict__'\" \"\" { xfail *-*-* } }\n \n   // The following are DR 295 dependent\n   typedef typename T::myT volatile *myvolatile; // { dg-error \"qualifiers\" \"\"  }"}]}