{"sha": "76bb5af63db66ccaee0f0ae59783eda972d0db83", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzZiYjVhZjYzZGI2NmNjYWVlMGYwYWU1OTc4M2VkYTk3MmQwZGI4Mw==", "commit": {"author": {"name": "Yuliang Wang", "email": "yuliang.wang@arm.com", "date": "2019-09-27T08:10:30Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-09-27T08:10:30Z"}, "message": "[AArch64][SVE2] Shift-Right Accumulate combine patterns\n\nThis patch adds combining support for SVE2's shift-right accumulate\ninstructions.\n\n2019-09-27  Yuliang Wang  <yuliang.wang@arm.com>\n\ngcc/\n\t* config/aarch64/aarch64-sve2.md (aarch64_sve2_sra<mode>):\n\tNew combine pattern.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/sve2/shracc_1.c: New test.\n\nFrom-SVN: r276174", "tree": {"sha": "d3246691a2f325d294fd92c5d30f53aef86ae7c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d3246691a2f325d294fd92c5d30f53aef86ae7c3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/76bb5af63db66ccaee0f0ae59783eda972d0db83", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76bb5af63db66ccaee0f0ae59783eda972d0db83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76bb5af63db66ccaee0f0ae59783eda972d0db83", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76bb5af63db66ccaee0f0ae59783eda972d0db83/comments", "author": null, "committer": null, "parents": [{"sha": "639a28ba6e0e5807ae062475f35cc6895e32ef17", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/639a28ba6e0e5807ae062475f35cc6895e32ef17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/639a28ba6e0e5807ae062475f35cc6895e32ef17"}], "stats": {"total": 67, "additions": 67, "deletions": 0}, "files": [{"sha": "64cc0a95f35d8caddaa63e4020072fe968109796", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76bb5af63db66ccaee0f0ae59783eda972d0db83/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76bb5af63db66ccaee0f0ae59783eda972d0db83/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=76bb5af63db66ccaee0f0ae59783eda972d0db83", "patch": "@@ -1,3 +1,8 @@\n+2019-09-27  Yuliang Wang  <yuliang.wang@arm.com>\n+\n+\t* config/aarch64/aarch64-sve2.md (aarch64_sve2_sra<mode>):\n+\tNew combine pattern.\n+\n 2019-09-26  Max Filippov  <jcmvbkbc@gmail.com>\n \n \t* config/xtensa/xtensa.c (hwloop_optimize): Insert zero overhead"}, {"sha": "b018f5b0bc9b51edf831e2571f0f5a9af2210829", "filename": "gcc/config/aarch64/aarch64-sve2.md", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76bb5af63db66ccaee0f0ae59783eda972d0db83/gcc%2Fconfig%2Faarch64%2Faarch64-sve2.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76bb5af63db66ccaee0f0ae59783eda972d0db83/gcc%2Fconfig%2Faarch64%2Faarch64-sve2.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve2.md?ref=76bb5af63db66ccaee0f0ae59783eda972d0db83", "patch": "@@ -123,3 +123,22 @@\n   }\n )\n \n+;; Unpredicated signed / unsigned shift-right accumulate.\n+(define_insn_and_rewrite \"*aarch64_sve2_sra<mode>\"\n+  [(set (match_operand:SVE_I 0 \"register_operand\" \"=w\")\n+\t(plus:SVE_I\n+\t  (unspec:SVE_I\n+\t    [(match_operand 4)\n+\t     (SHIFTRT:SVE_I\n+\t       (match_operand:SVE_I 2 \"register_operand\" \"w\")\n+\t       (match_operand:SVE_I 3 \"aarch64_simd_rshift_imm\" \"Dr\"))]\n+\t    UNSPEC_PRED_X)\n+\t (match_operand:SVE_I 1 \"register_operand\" \"0\")))]\n+  \"TARGET_SVE2\"\n+  \"<sra_op>sra\\t%0.<Vetype>, %2.<Vetype>, #%3\"\n+  \"&& !CONSTANT_P (operands[4])\"\n+  {\n+    operands[4] = CONSTM1_RTX (<VPRED>mode);\n+  }\n+)\n+"}, {"sha": "84670ec162b70cb9f7c4b5de9557b02e1ead74d9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76bb5af63db66ccaee0f0ae59783eda972d0db83/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76bb5af63db66ccaee0f0ae59783eda972d0db83/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=76bb5af63db66ccaee0f0ae59783eda972d0db83", "patch": "@@ -1,3 +1,7 @@\n+2019-09-27  Yuliang Wang  <yuliang.wang@arm.com>\n+\n+\t* gcc.target/aarch64/sve2/shracc_1.c: New test.\n+\n 2019-09-26  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc.dg/cpp/ucs.c: Add test for new warning and adjust."}, {"sha": "5535c7dded6280df44d04e78bb61af161da06e4b", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/shracc_1.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76bb5af63db66ccaee0f0ae59783eda972d0db83/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Fshracc_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76bb5af63db66ccaee0f0ae59783eda972d0db83/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Fshracc_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Fshracc_1.c?ref=76bb5af63db66ccaee0f0ae59783eda972d0db83", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-details --save-temps\" } */\n+\n+#include <stdint.h>\n+\n+#define SHRACC(TYPE,SHIFT)\t\t\t\\\n+void __attribute__ ((noinline, noclone))\t\\\n+f_##TYPE##_##SHIFT\t\t\t\t\\\n+  (TYPE *restrict a, TYPE *restrict b, int n)\t\\\n+{\t\t\t\t\t\t\\\n+  for (int i = 0; i < n; i++)\t\t\t\\\n+    a[i] += b[i] >> (SHIFT);\t\t\t\\\n+}\n+\n+SHRACC (int8_t, 5);\n+SHRACC (int16_t, 14);\n+SHRACC (int32_t, 19);\n+SHRACC (int64_t, 27);\n+\n+SHRACC (uint8_t, 2);\n+SHRACC (uint16_t, 6);\n+SHRACC (uint32_t, 24);\n+SHRACC (uint64_t, 53);\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops in function\" 8 \"vect\" } } */\n+\n+/* { dg-final { scan-assembler-not {\\tasr\\t} } } */\n+/* { dg-final { scan-assembler-not {\\tlsr\\t} } } */\n+/* { dg-final { scan-assembler-not {\\tadd\\t} } } */\n+\n+/* { dg-final { scan-assembler-times {\\tssra\\tz[0-9]+\\.b, z[0-9]+\\.b, #5\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tssra\\tz[0-9]+\\.h, z[0-9]+\\.h, #14\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tssra\\tz[0-9]+\\.s, z[0-9]+\\.s, #19\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tssra\\tz[0-9]+\\.d, z[0-9]+\\.d, #27\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tusra\\tz[0-9]+\\.b, z[0-9]+\\.b, #2\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tusra\\tz[0-9]+\\.h, z[0-9]+\\.h, #6\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tusra\\tz[0-9]+\\.s, z[0-9]+\\.s, #24\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tusra\\tz[0-9]+\\.d, z[0-9]+\\.d, #53\\n} 1 } } */"}]}