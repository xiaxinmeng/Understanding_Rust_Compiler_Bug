{"sha": "59119253b3133b30114194a04171f9d353b5c7f7", "node_id": "C_kwDOANBUbNoAKDU5MTE5MjUzYjMxMzNiMzAxMTQxOTRhMDQxNzFmOWQzNTNiNWM3Zjc", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2022-04-29T11:27:48Z"}, "committer": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2022-04-29T11:31:12Z"}, "message": "i386: Optimize double-word negation [PR51954]\n\nIntroduce peephole2 pattern to convert from:\n\n   mov %esi, %edx\n   negl %eax\n   adcl $0, %edx\n   negl %edx\n to:\n   xorl %edx, %edx\n   negl %eax\n   sbbl %esi, %edx\n\nThis conversion is profitable only when initial move is found.  Otherwise,\nadditional move to a temporary together with clearing xor is needed.\n\n2022-04-29  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n\ngcc/ChangeLog:\n\n\tPR target/51954\n\t* config/i386/i386.md (adcl/neg -> sbb peephole): New peephole2.\ngcc/testsuite/ChangeLog:\n\n\tPR target/51954\n\t* gcc.target/i386/pr51954.c: New test.", "tree": {"sha": "105aa73678b251a054964c0602875c73a40ef3f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/105aa73678b251a054964c0602875c73a40ef3f7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/59119253b3133b30114194a04171f9d353b5c7f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59119253b3133b30114194a04171f9d353b5c7f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59119253b3133b30114194a04171f9d353b5c7f7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59119253b3133b30114194a04171f9d353b5c7f7/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c090743b2ae0095f792371c7cbeb3cf6e2978f5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c090743b2ae0095f792371c7cbeb3cf6e2978f5d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c090743b2ae0095f792371c7cbeb3cf6e2978f5d"}], "stats": {"total": 59, "additions": 59, "deletions": 0}, "files": [{"sha": "b321cda1f22f75af03813dd26cce3a738dd5e8b4", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59119253b3133b30114194a04171f9d353b5c7f7/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59119253b3133b30114194a04171f9d353b5c7f7/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=59119253b3133b30114194a04171f9d353b5c7f7", "patch": "@@ -10929,6 +10929,50 @@\n      (clobber (reg:CC FLAGS_REG))])]\n   \"split_double_mode (<DWI>mode, &operands[0], 2, &operands[0], &operands[2]);\")\n \n+;; Convert:\n+;;   mov %esi, %edx\n+;;   negl %eax\n+;;   adcl $0, %edx\n+;;   negl %edx\n+;; to:\n+;;   xorl %edx, %edx\n+;;   negl %eax\n+;;   sbbl %esi, %edx\n+\n+(define_peephole2\n+  [(set (match_operand:SWI48 0 \"general_reg_operand\")\n+\t(match_operand:SWI48 1 \"nonimmediate_gr_operand\"))\n+   (parallel\n+    [(set (reg:CCC FLAGS_REG)\n+\t  (ne:CCC (match_operand:SWI48 2 \"general_reg_operand\") (const_int 0)))\n+     (set (match_dup 2) (neg:SWI48 (match_dup 2)))])\n+   (parallel\n+    [(set (match_dup 0)\n+\t  (plus:SWI48 (plus:SWI48\n+\t\t\t(ltu:SWI48 (reg:CC FLAGS_REG) (const_int 0))\n+\t\t\t(match_dup 0))\n+\t\t      (const_int 0)))\n+     (clobber (reg:CC FLAGS_REG))])\n+   (parallel\n+    [(set (match_dup 0)\n+\t  (neg:SWI48 (match_dup 0)))\n+     (clobber (reg:CC FLAGS_REG))])]\n+  \"REGNO (operands[0]) != REGNO (operands[2])\n+   && !reg_mentioned_p (operands[0], operands[1])\n+   && !reg_mentioned_p (operands[2], operands[1])\"\n+  [(parallel\n+    [(set (reg:CCC FLAGS_REG)\n+\t  (ne:CCC (match_dup 2) (const_int 0)))\n+     (set (match_dup 2) (neg:SWI48 (match_dup 2)))])\n+   (parallel\n+    [(set (match_dup 0)\n+\t  (minus:SWI48 (minus:SWI48\n+\t\t\t (match_dup 0)\n+\t\t\t (ltu:SWI48 (reg:CC FLAGS_REG) (const_int 0)))\n+\t\t       (match_dup 1)))\n+     (clobber (reg:CC FLAGS_REG))])]\n+  \"ix86_expand_clear (operands[0]);\")\n+\n (define_insn \"*neg<mode>_1\"\n   [(set (match_operand:SWI 0 \"nonimmediate_operand\" \"=<r>m\")\n \t(neg:SWI (match_operand:SWI 1 \"nonimmediate_operand\" \"0\")))"}, {"sha": "5e757de22f930ed407a4aea772929b51fc88dfc8", "filename": "gcc/testsuite/gcc.target/i386/pr51954.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59119253b3133b30114194a04171f9d353b5c7f7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr51954.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59119253b3133b30114194a04171f9d353b5c7f7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr51954.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr51954.c?ref=59119253b3133b30114194a04171f9d353b5c7f7", "patch": "@@ -0,0 +1,15 @@\n+/* PR target/51954 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-final { scan-assembler-not \"adc\" } } */\n+\n+#ifdef __x86_64__\n+#define TYPE __int128\n+#else\n+#define TYPE long long\n+#endif\n+\n+TYPE bar (TYPE x)\n+{\n+  return -x;\n+}"}]}