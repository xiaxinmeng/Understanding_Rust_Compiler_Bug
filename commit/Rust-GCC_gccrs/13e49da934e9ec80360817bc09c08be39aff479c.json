{"sha": "13e49da934e9ec80360817bc09c08be39aff479c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTNlNDlkYTkzNGU5ZWM4MDM2MDgxN2JjMDljMDhiZTM5YWZmNDc5Yw==", "commit": {"author": {"name": "Tom de Vries", "email": "tom@codesourcery.com", "date": "2011-10-07T12:49:49Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2011-10-07T12:49:49Z"}, "message": "re PR middle-end/50527 (inconsistent vla align)\n\n2011-10-07  Tom de Vries  <tom@codesourcery.com>\n\n\tPR middle-end/50527\n\t* tree.c (build_common_builtin_nodes): Add local_define_builtin for\n\tBUILT_IN_ALLOCA_WITH_ALIGN.  Mark that BUILT_IN_ALLOCA_WITH_ALIGN can\n\tthrow.\n\t* builtins.c (expand_builtin_alloca): Handle BUILT_IN_ALLOCA_WITH_ALIGN\n\targlist.  Set align for\tBUILT_IN_ALLOCA_WITH_ALIGN.\n\t(expand_builtin): Handle BUILT_IN_ALLOCA_WITH_ALIGN.\n\t(is_inexpensive_builtin): Handle BUILT_IN_ALLOCA_WITH_ALIGN.\n\t* tree-ssa-ccp.c (evaluate_stmt): Set align for\n\tBUILT_IN_ALLOCA_WITH_ALIGN.\n\t(fold_builtin_alloca_for_var): Rename to ...\n\t(fold_builtin_alloca_with_align): Set DECL_ALIGN from 2nd\n\tBUILT_IN_ALLOCA_WITH_ALIGN argument.\n\t(ccp_fold_stmt): Try folding BUILT_IN_ALLOCA_WITH_ALIGN using\n\tfold_builtin_alloca_with_align.\n\t(optimize_stack_restore): Handle BUILT_IN_ALLOCA_WITH_ALIGN.\n\t* builtins.def (BUILT_IN_ALLOCA_WITH_ALIGN): Declare using\n\tDEF_BUILTIN_STUB.\n\t* ipa-pure-const.c (special_builtin_state): Handle\n\tBUILT_IN_ALLOCA_WITH_ALIGN.\n\t* tree-ssa-alias.c (ref_maybe_used_by_call_p_1)\n\t(call_may_clobber_ref_p_1): Same.\n\t* function.c (gimplify_parameters): Lower vla to\n\tBUILT_IN_ALLOCA_WITH_ALIGN.\n\t* gimplify.c (gimplify_vla_decl): Same.\n\t* cfgexpand.c (expand_call_stmt): Handle BUILT_IN_ALLOCA_WITH_ALIGN.\n\t* tree-mudflap.c (mf_xform_statements): Same.\n\t* tree-ssa-dce.c (mark_stmt_if_obviously_necessary)\n\t(mark_all_reaching_defs_necessary_1, propagate_necessity): Same.\n\t* varasm.c (incorporeal_function_p): Same.\n\t* tree-object-size.c (alloc_object_size): Same.\n\t* gimple.c (gimple_build_call_from_tree): Same.\n\nFrom-SVN: r179655", "tree": {"sha": "274fa9d31e31f79687aa8785b52bbd7532b95632", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/274fa9d31e31f79687aa8785b52bbd7532b95632"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/13e49da934e9ec80360817bc09c08be39aff479c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13e49da934e9ec80360817bc09c08be39aff479c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13e49da934e9ec80360817bc09c08be39aff479c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13e49da934e9ec80360817bc09c08be39aff479c/comments", "author": null, "committer": null, "parents": [{"sha": "764a2546bb1b7a4e3478042008ea75736de7c224", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/764a2546bb1b7a4e3478042008ea75736de7c224", "html_url": "https://github.com/Rust-GCC/gccrs/commit/764a2546bb1b7a4e3478042008ea75736de7c224"}], "stats": {"total": 123, "additions": 93, "deletions": 30}, "files": [{"sha": "7658511a533651677a09b15c764643aa9bd248f0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13e49da934e9ec80360817bc09c08be39aff479c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13e49da934e9ec80360817bc09c08be39aff479c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=13e49da934e9ec80360817bc09c08be39aff479c", "patch": "@@ -1,3 +1,21 @@\n+2011-10-07  Tom de Vries  <tom@codesourcery.com>\n+\n+\tPR middle-end/50527\n+\t* tree.c (build_common_builtin_nodes): Add local_define_builtin for\n+\t* builtins.c (expand_builtin_alloca): Handle BUILT_IN_ALLOCA_WITH_ALIGN\n+\t* tree-ssa-ccp.c (evaluate_stmt): Set align for\n+\t* builtins.def (BUILT_IN_ALLOCA_WITH_ALIGN): Declare using\n+\t* ipa-pure-const.c (special_builtin_state): Handle\n+\t* tree-ssa-alias.c (ref_maybe_used_by_call_p_1)\n+\t* function.c (gimplify_parameters): Lower vla to\n+\t* gimplify.c (gimplify_vla_decl): Same.\n+\t* cfgexpand.c (expand_call_stmt): Handle BUILT_IN_ALLOCA_WITH_ALIGN.\n+\t* tree-mudflap.c (mf_xform_statements): Same.\n+\t* tree-ssa-dce.c (mark_stmt_if_obviously_necessary)\n+\t* varasm.c (incorporeal_function_p): Same.\n+\t* tree-object-size.c (alloc_object_size): Same.\n+\t* gimple.c (gimple_build_call_from_tree): Same.\n+\n 2011-10-07  Bernd Schmidt  <bernds@codesourcery.com>\n \n \t* function.c (frame_required_for_rtx): Remove function."}, {"sha": "bf1766a56a61a1a0064d6d92349fa8d5b189dc13", "filename": "gcc/builtins.c", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13e49da934e9ec80360817bc09c08be39aff479c/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13e49da934e9ec80360817bc09c08be39aff479c/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=13e49da934e9ec80360817bc09c08be39aff479c", "patch": "@@ -4516,20 +4516,33 @@ expand_builtin_alloca (tree exp, bool cannot_accumulate)\n {\n   rtx op0;\n   rtx result;\n+  bool valid_arglist;\n+  unsigned int align;\n+  bool alloca_with_align = (DECL_FUNCTION_CODE (get_callee_fndecl (exp))\n+\t\t\t    == BUILT_IN_ALLOCA_WITH_ALIGN);\n \n   /* Emit normal call if marked not-inlineable.  */\n   if (CALL_CANNOT_INLINE_P (exp))\n     return NULL_RTX;\n \n-  if (!validate_arglist (exp, INTEGER_TYPE, VOID_TYPE))\n+  valid_arglist\n+    = (alloca_with_align\n+       ? validate_arglist (exp, INTEGER_TYPE, INTEGER_TYPE, VOID_TYPE)\n+       : validate_arglist (exp, INTEGER_TYPE, VOID_TYPE));\n+\n+  if (!valid_arglist)\n     return NULL_RTX;\n \n   /* Compute the argument.  */\n   op0 = expand_normal (CALL_EXPR_ARG (exp, 0));\n \n+  /* Compute the alignment.  */\n+  align = (alloca_with_align\n+\t   ? TREE_INT_CST_LOW (CALL_EXPR_ARG (exp, 1))\n+\t   : BIGGEST_ALIGNMENT);\n+\n   /* Allocate the desired space.  */\n-  result = allocate_dynamic_stack_space (op0, 0, BIGGEST_ALIGNMENT,\n-\t\t\t\t\t cannot_accumulate);\n+  result = allocate_dynamic_stack_space (op0, 0, align, cannot_accumulate);\n   result = convert_memory_address (ptr_mode, result);\n \n   return result;\n@@ -5304,6 +5317,7 @@ expand_builtin (tree exp, rtx target, rtx subtarget, enum machine_mode mode,\n       && !called_as_built_in (fndecl)\n       && DECL_ASSEMBLER_NAME_SET_P (fndecl)\n       && fcode != BUILT_IN_ALLOCA\n+      && fcode != BUILT_IN_ALLOCA_WITH_ALIGN\n       && fcode != BUILT_IN_FREE)\n     return expand_call (exp, target, ignore);\n \n@@ -5559,6 +5573,7 @@ expand_builtin (tree exp, rtx target, rtx subtarget, enum machine_mode mode,\n \treturn XEXP (DECL_RTL (DECL_RESULT (current_function_decl)), 0);\n \n     case BUILT_IN_ALLOCA:\n+    case BUILT_IN_ALLOCA_WITH_ALIGN:\n       /* If the allocation stems from the declaration of a variable-sized\n \t object, it cannot accumulate.  */\n       target = expand_builtin_alloca (exp, CALL_ALLOCA_FOR_VAR_P (exp));\n@@ -13568,6 +13583,7 @@ is_inexpensive_builtin (tree decl)\n       {\n       case BUILT_IN_ABS:\n       case BUILT_IN_ALLOCA:\n+      case BUILT_IN_ALLOCA_WITH_ALIGN:\n       case BUILT_IN_BSWAP32:\n       case BUILT_IN_BSWAP64:\n       case BUILT_IN_CLZ:"}, {"sha": "59c082de983ebe05fbd9e50d0f098f187fd0570a", "filename": "gcc/builtins.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13e49da934e9ec80360817bc09c08be39aff479c/gcc%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13e49da934e9ec80360817bc09c08be39aff479c/gcc%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.def?ref=13e49da934e9ec80360817bc09c08be39aff479c", "patch": "@@ -738,6 +738,7 @@ DEF_BUILTIN_STUB (BUILT_IN_SETJMP_RECEIVER, \"__builtin_setjmp_receiver\")\n /* Implementing variable sized local variables.  */\n DEF_BUILTIN_STUB (BUILT_IN_STACK_SAVE, \"__builtin_stack_save\")\n DEF_BUILTIN_STUB (BUILT_IN_STACK_RESTORE, \"__builtin_stack_restore\")\n+DEF_BUILTIN_STUB (BUILT_IN_ALLOCA_WITH_ALIGN, \"__builtin_alloca_with_align\")\n \n /* Object size checking builtins.  */\n DEF_GCC_BUILTIN\t       (BUILT_IN_OBJECT_SIZE, \"object_size\", BT_FN_SIZE_CONST_PTR_INT, ATTR_PURE_NOTHROW_LEAF_LIST)"}, {"sha": "4089b40dc415c847a9c445cf44e9ae695312a0d3", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13e49da934e9ec80360817bc09c08be39aff479c/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13e49da934e9ec80360817bc09c08be39aff479c/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=13e49da934e9ec80360817bc09c08be39aff479c", "patch": "@@ -1858,7 +1858,8 @@ expand_call_stmt (gimple stmt)\n   CALL_EXPR_RETURN_SLOT_OPT (exp) = gimple_call_return_slot_opt_p (stmt);\n   if (decl\n       && DECL_BUILT_IN_CLASS (decl) == BUILT_IN_NORMAL\n-      && DECL_FUNCTION_CODE (decl) == BUILT_IN_ALLOCA)\n+      && (DECL_FUNCTION_CODE (decl) == BUILT_IN_ALLOCA\n+\t  || DECL_FUNCTION_CODE (decl) == BUILT_IN_ALLOCA_WITH_ALIGN))\n     CALL_ALLOCA_FOR_VAR_P (exp) = gimple_call_alloca_for_var_p (stmt);\n   else\n     CALL_FROM_THUNK_P (exp) = gimple_call_from_thunk_p (stmt);"}, {"sha": "ae9b535550de744c95f64cf5e8c2890ae2c3c1a2", "filename": "gcc/function.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13e49da934e9ec80360817bc09c08be39aff479c/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13e49da934e9ec80360817bc09c08be39aff479c/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=13e49da934e9ec80360817bc09c08be39aff479c", "patch": "@@ -3635,8 +3635,10 @@ gimplify_parameters (void)\n \t\t  DECL_IGNORED_P (addr) = 0;\n \t\t  local = build_fold_indirect_ref (addr);\n \n-\t\t  t = built_in_decls[BUILT_IN_ALLOCA];\n-\t\t  t = build_call_expr (t, 1, DECL_SIZE_UNIT (parm));\n+\t\t  t = built_in_decls[BUILT_IN_ALLOCA_WITH_ALIGN];\n+\t\t  t = build_call_expr (t, 1, DECL_SIZE_UNIT (parm),\n+\t\t\t\t       size_int (DECL_ALIGN (parm)));\n+\n \t\t  /* The call has been built for a variable-sized object.  */\n \t\t  CALL_ALLOCA_FOR_VAR_P (t) = 1;\n \t\t  t = fold_convert (ptr_type, t);"}, {"sha": "2c655cd3ef61babb7ef8571f179986e7422abdee", "filename": "gcc/gimple.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13e49da934e9ec80360817bc09c08be39aff479c/gcc%2Fgimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13e49da934e9ec80360817bc09c08be39aff479c/gcc%2Fgimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.c?ref=13e49da934e9ec80360817bc09c08be39aff479c", "patch": "@@ -374,7 +374,8 @@ gimple_build_call_from_tree (tree t)\n   gimple_call_set_return_slot_opt (call, CALL_EXPR_RETURN_SLOT_OPT (t));\n   if (fndecl\n       && DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_NORMAL\n-      && DECL_FUNCTION_CODE (fndecl) == BUILT_IN_ALLOCA)\n+      && (DECL_FUNCTION_CODE (fndecl) == BUILT_IN_ALLOCA\n+\t  || DECL_FUNCTION_CODE (fndecl) == BUILT_IN_ALLOCA_WITH_ALIGN))\n     gimple_call_set_alloca_for_var (call, CALL_ALLOCA_FOR_VAR_P (t));\n   else\n     gimple_call_set_from_thunk (call, CALL_FROM_THUNK_P (t));"}, {"sha": "90de915852f8e5415911fa240575b5de9ff3546b", "filename": "gcc/gimplify.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13e49da934e9ec80360817bc09c08be39aff479c/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13e49da934e9ec80360817bc09c08be39aff479c/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=13e49da934e9ec80360817bc09c08be39aff479c", "patch": "@@ -1329,8 +1329,9 @@ gimplify_vla_decl (tree decl, gimple_seq *seq_p)\n   SET_DECL_VALUE_EXPR (decl, t);\n   DECL_HAS_VALUE_EXPR_P (decl) = 1;\n \n-  t = built_in_decls[BUILT_IN_ALLOCA];\n-  t = build_call_expr (t, 1, DECL_SIZE_UNIT (decl));\n+  t = built_in_decls[BUILT_IN_ALLOCA_WITH_ALIGN];\n+  t = build_call_expr (t, 2, DECL_SIZE_UNIT (decl),\n+\t\t       size_int (DECL_ALIGN (decl)));\n   /* The call has been built for a variable-sized object.  */\n   CALL_ALLOCA_FOR_VAR_P (t) = 1;\n   t = fold_convert (ptr_type, t);"}, {"sha": "82e24cf5a015a2dc426839c01caa3a2ea9bc559d", "filename": "gcc/ipa-pure-const.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13e49da934e9ec80360817bc09c08be39aff479c/gcc%2Fipa-pure-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13e49da934e9ec80360817bc09c08be39aff479c/gcc%2Fipa-pure-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-pure-const.c?ref=13e49da934e9ec80360817bc09c08be39aff479c", "patch": "@@ -437,6 +437,7 @@ special_builtin_state (enum pure_const_state_e *state, bool *looping,\n \tcase BUILT_IN_RETURN:\n \tcase BUILT_IN_UNREACHABLE:\n \tcase BUILT_IN_ALLOCA:\n+\tcase BUILT_IN_ALLOCA_WITH_ALIGN:\n \tcase BUILT_IN_STACK_SAVE:\n \tcase BUILT_IN_STACK_RESTORE:\n \tcase BUILT_IN_EH_POINTER:"}, {"sha": "9479aebfb342153eec60ec74f9d37b6d556331f9", "filename": "gcc/tree-mudflap.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13e49da934e9ec80360817bc09c08be39aff479c/gcc%2Ftree-mudflap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13e49da934e9ec80360817bc09c08be39aff479c/gcc%2Ftree-mudflap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-mudflap.c?ref=13e49da934e9ec80360817bc09c08be39aff479c", "patch": "@@ -973,7 +973,9 @@ mf_xform_statements (void)\n             case GIMPLE_CALL:\n               {\n                 tree fndecl = gimple_call_fndecl (s);\n-                if (fndecl && (DECL_FUNCTION_CODE (fndecl) == BUILT_IN_ALLOCA))\n+                if (fndecl && (DECL_FUNCTION_CODE (fndecl) == BUILT_IN_ALLOCA\n+\t\t\t       || (DECL_FUNCTION_CODE (fndecl)\n+\t\t\t\t   == BUILT_IN_ALLOCA_WITH_ALIGN)))\n                   gimple_call_set_cannot_inline (s, true);\n               }\n               break;"}, {"sha": "2998fb59da05edf6f56f64b2a11c24c5ee2904ea", "filename": "gcc/tree-object-size.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13e49da934e9ec80360817bc09c08be39aff479c/gcc%2Ftree-object-size.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13e49da934e9ec80360817bc09c08be39aff479c/gcc%2Ftree-object-size.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-object-size.c?ref=13e49da934e9ec80360817bc09c08be39aff479c", "patch": "@@ -411,6 +411,7 @@ alloc_object_size (const_gimple call, int object_size_type)\n \t/* fall through */\n       case BUILT_IN_MALLOC:\n       case BUILT_IN_ALLOCA:\n+      case BUILT_IN_ALLOCA_WITH_ALIGN:\n \targ1 = 0;\n       default:\n \tbreak;"}, {"sha": "506e778ee062dd3e185e6cc46e4aa39aa41a9b44", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13e49da934e9ec80360817bc09c08be39aff479c/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13e49da934e9ec80360817bc09c08be39aff479c/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=13e49da934e9ec80360817bc09c08be39aff479c", "patch": "@@ -1260,6 +1260,7 @@ ref_maybe_used_by_call_p_1 (gimple call, ao_ref *ref)\n \tcase BUILT_IN_MALLOC:\n \tcase BUILT_IN_CALLOC:\n \tcase BUILT_IN_ALLOCA:\n+\tcase BUILT_IN_ALLOCA_WITH_ALIGN:\n \tcase BUILT_IN_STACK_SAVE:\n \tcase BUILT_IN_STACK_RESTORE:\n \tcase BUILT_IN_MEMSET:\n@@ -1554,6 +1555,7 @@ call_may_clobber_ref_p_1 (gimple call, ao_ref *ref)\n \t  return false;\n \tcase BUILT_IN_STACK_SAVE:\n \tcase BUILT_IN_ALLOCA:\n+\tcase BUILT_IN_ALLOCA_WITH_ALIGN:\n \tcase BUILT_IN_ASSUME_ALIGNED:\n \t  return false;\n \t/* Freeing memory kills the pointed-to memory.  More importantly"}, {"sha": "e207e232e01728f2fb9c8c2bb2465a8dd9b8396a", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 21, "deletions": 18, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13e49da934e9ec80360817bc09c08be39aff479c/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13e49da934e9ec80360817bc09c08be39aff479c/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=13e49da934e9ec80360817bc09c08be39aff479c", "patch": "@@ -1492,6 +1492,7 @@ evaluate_stmt (gimple stmt)\n   tree simplified = NULL_TREE;\n   ccp_lattice_t likelyvalue = likely_value (stmt);\n   bool is_constant = false;\n+  unsigned int align;\n \n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {\n@@ -1632,10 +1633,14 @@ evaluate_stmt (gimple stmt)\n \t      break;\n \n \t    case BUILT_IN_ALLOCA:\n+\t    case BUILT_IN_ALLOCA_WITH_ALIGN:\n+\t      align = (DECL_FUNCTION_CODE (fndecl) == BUILT_IN_ALLOCA_WITH_ALIGN\n+\t\t       ? TREE_INT_CST_LOW (gimple_call_arg (stmt, 1))\n+\t\t       : BIGGEST_ALIGNMENT);\n \t      val.lattice_val = CONSTANT;\n \t      val.value = build_int_cst (TREE_TYPE (gimple_get_lhs (stmt)), 0);\n \t      val.mask = shwi_to_double_int\n-\t\t  \t   (~(((HOST_WIDE_INT) BIGGEST_ALIGNMENT)\n+\t\t  \t   (~(((HOST_WIDE_INT) align)\n \t\t\t      / BITS_PER_UNIT - 1));\n \t      break;\n \n@@ -1685,15 +1690,15 @@ evaluate_stmt (gimple stmt)\n   return val;\n }\n \n-/* Detects a vla-related alloca with a constant argument.  Declares fixed-size\n-   array and return the address, if found, otherwise returns NULL_TREE.  */\n+/* Detects a __builtin_alloca_with_align with constant size argument.  Declares\n+   fixed-size array and returns the address, if found, otherwise returns\n+   NULL_TREE.  */\n \n static tree\n-fold_builtin_alloca_for_var (gimple stmt)\n+fold_builtin_alloca_with_align (gimple stmt)\n {\n   unsigned HOST_WIDE_INT size, threshold, n_elem;\n   tree lhs, arg, block, var, elem_type, array_type;\n-  unsigned int align;\n \n   /* Get lhs.  */\n   lhs = gimple_call_lhs (stmt);\n@@ -1709,10 +1714,10 @@ fold_builtin_alloca_for_var (gimple stmt)\n \n   size = TREE_INT_CST_LOW (arg);\n \n-  /* Heuristic: don't fold large vlas.  */\n+  /* Heuristic: don't fold large allocas.  */\n   threshold = (unsigned HOST_WIDE_INT)PARAM_VALUE (PARAM_LARGE_STACK_FRAME);\n-  /* In case a vla is declared at function scope, it has the same lifetime as a\n-     declared array, so we allow a larger size.  */\n+  /* In case the alloca is located at function entry, it has the same lifetime\n+     as a declared array, so we allow a larger size.  */\n   block = gimple_block (stmt);\n   if (!(cfun->after_inlining\n         && TREE_CODE (BLOCK_SUPERCONTEXT (block)) == FUNCTION_DECL))\n@@ -1723,12 +1728,9 @@ fold_builtin_alloca_for_var (gimple stmt)\n   /* Declare array.  */\n   elem_type = build_nonstandard_integer_type (BITS_PER_UNIT, 1);\n   n_elem = size * 8 / BITS_PER_UNIT;\n-  align = MIN (size * 8, BIGGEST_ALIGNMENT);\n-  if (align < BITS_PER_UNIT)\n-    align = BITS_PER_UNIT;\n   array_type = build_array_type_nelts (elem_type, n_elem);\n   var = create_tmp_var (array_type, NULL);\n-  DECL_ALIGN (var) = align;\n+  DECL_ALIGN (var) = TREE_INT_CST_LOW (gimple_call_arg (stmt, 1));\n   {\n     struct ptr_info_def *pi = SSA_NAME_PTR_INFO (lhs);\n     if (pi != NULL && !pi->pt.anything)\n@@ -1813,12 +1815,12 @@ ccp_fold_stmt (gimple_stmt_iterator *gsi)\n \tif (gimple_call_internal_p (stmt))\n \t  return false;\n \n-        /* The heuristic of fold_builtin_alloca_for_var differs before and after\n-           inlining, so we don't require the arg to be changed into a constant\n-           for folding, but just to be constant.  */\n-        if (gimple_call_alloca_for_var_p (stmt))\n+        /* The heuristic of fold_builtin_alloca_with_align differs before and\n+\t   after inlining, so we don't require the arg to be changed into a\n+\t   constant for folding, but just to be constant.  */\n+        if (gimple_call_builtin_p (stmt, BUILT_IN_ALLOCA_WITH_ALIGN))\n           {\n-            tree new_rhs = fold_builtin_alloca_for_var (stmt);\n+            tree new_rhs = fold_builtin_alloca_with_align (stmt);\n             if (new_rhs)\n \t      {\n \t\tbool res = update_call_from_tree (gsi, new_rhs);\n@@ -2093,7 +2095,8 @@ optimize_stack_restore (gimple_stmt_iterator i)\n       if (!callee\n \t  || DECL_BUILT_IN_CLASS (callee) != BUILT_IN_NORMAL\n \t  /* All regular builtins are ok, just obviously not alloca.  */\n-\t  || DECL_FUNCTION_CODE (callee) == BUILT_IN_ALLOCA)\n+\t  || DECL_FUNCTION_CODE (callee) == BUILT_IN_ALLOCA\n+\t  || DECL_FUNCTION_CODE (callee) == BUILT_IN_ALLOCA_WITH_ALIGN)\n \treturn NULL_TREE;\n \n       if (DECL_FUNCTION_CODE (callee) == BUILT_IN_STACK_RESTORE)"}, {"sha": "b84b6f9a99e64e838a1c183a7c4db8463860f86f", "filename": "gcc/tree-ssa-dce.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13e49da934e9ec80360817bc09c08be39aff479c/gcc%2Ftree-ssa-dce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13e49da934e9ec80360817bc09c08be39aff479c/gcc%2Ftree-ssa-dce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dce.c?ref=13e49da934e9ec80360817bc09c08be39aff479c", "patch": "@@ -308,6 +308,7 @@ mark_stmt_if_obviously_necessary (gimple stmt, bool aggressive)\n \t    case BUILT_IN_MALLOC:\n \t    case BUILT_IN_CALLOC:\n \t    case BUILT_IN_ALLOCA:\n+\t    case BUILT_IN_ALLOCA_WITH_ALIGN:\n \t      return;\n \n \t    default:;\n@@ -639,6 +640,7 @@ mark_all_reaching_defs_necessary_1 (ao_ref *ref ATTRIBUTE_UNUSED,\n \t  case BUILT_IN_MALLOC:\n \t  case BUILT_IN_CALLOC:\n \t  case BUILT_IN_ALLOCA:\n+\t  case BUILT_IN_ALLOCA_WITH_ALIGN:\n \t  case BUILT_IN_FREE:\n \t    return false;\n \n@@ -890,6 +892,8 @@ propagate_necessity (struct edge_list *el)\n \t\t      || DECL_FUNCTION_CODE (callee) == BUILT_IN_FREE\n \t\t      || DECL_FUNCTION_CODE (callee) == BUILT_IN_VA_END\n \t\t      || DECL_FUNCTION_CODE (callee) == BUILT_IN_ALLOCA\n+\t\t      || (DECL_FUNCTION_CODE (callee)\n+\t\t\t  == BUILT_IN_ALLOCA_WITH_ALIGN)\n \t\t      || DECL_FUNCTION_CODE (callee) == BUILT_IN_STACK_SAVE\n \t\t      || DECL_FUNCTION_CODE (callee) == BUILT_IN_STACK_RESTORE\n \t\t      || DECL_FUNCTION_CODE (callee) == BUILT_IN_ASSUME_ALIGNED))"}, {"sha": "03edb9c03246c616410b667e3852202a6b8df99a", "filename": "gcc/tree.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13e49da934e9ec80360817bc09c08be39aff479c/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13e49da934e9ec80360817bc09c08be39aff479c/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=13e49da934e9ec80360817bc09c08be39aff479c", "patch": "@@ -9483,9 +9483,18 @@ build_common_builtin_nodes (void)\n \t\t\t    \"alloca\", ECF_MALLOC | ECF_NOTHROW | ECF_LEAF);\n     }\n \n+  ftype = build_function_type_list (ptr_type_node, size_type_node,\n+\t\t\t\t    size_type_node, NULL_TREE);\n+  local_define_builtin (\"__builtin_alloca_with_align\", ftype,\n+\t\t\tBUILT_IN_ALLOCA_WITH_ALIGN, \"alloca\",\n+\t\t\tECF_MALLOC | ECF_NOTHROW | ECF_LEAF);\n+\n   /* If we're checking the stack, `alloca' can throw.  */\n   if (flag_stack_check)\n-    TREE_NOTHROW (built_in_decls[BUILT_IN_ALLOCA]) = 0;\n+    {\n+      TREE_NOTHROW (built_in_decls[BUILT_IN_ALLOCA]) = 0;\n+      TREE_NOTHROW (built_in_decls[BUILT_IN_ALLOCA_WITH_ALIGN]) = 0;\n+    }\n \n   ftype = build_function_type_list (void_type_node,\n \t\t\t\t    ptr_type_node, ptr_type_node,"}, {"sha": "94e31115d1e3e2e2da4741387cea76e587f81ffd", "filename": "gcc/varasm.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13e49da934e9ec80360817bc09c08be39aff479c/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13e49da934e9ec80360817bc09c08be39aff479c/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=13e49da934e9ec80360817bc09c08be39aff479c", "patch": "@@ -2104,7 +2104,8 @@ incorporeal_function_p (tree decl)\n       const char *name;\n \n       if (DECL_BUILT_IN_CLASS (decl) == BUILT_IN_NORMAL\n-\t  && DECL_FUNCTION_CODE (decl) == BUILT_IN_ALLOCA)\n+\t  && (DECL_FUNCTION_CODE (decl) == BUILT_IN_ALLOCA\n+\t      || DECL_FUNCTION_CODE (decl) == BUILT_IN_ALLOCA_WITH_ALIGN))\n \treturn true;\n \n       name = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl));"}]}