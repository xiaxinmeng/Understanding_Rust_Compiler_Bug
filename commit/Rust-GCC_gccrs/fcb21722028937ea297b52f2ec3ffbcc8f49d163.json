{"sha": "fcb21722028937ea297b52f2ec3ffbcc8f49d163", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmNiMjE3MjIwMjg5MzdlYTI5N2I1MmYyZWMzZmZiY2M4ZjQ5ZDE2Mw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-07-22T16:06:08Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-07-22T16:06:08Z"}, "message": "re PR c++/49813 ([C++0x] sinh vs asinh vs constexpr)\n\n\tPR c++/49813\n\t* c-opts.c (set_std_cxx0x): Set flag_isoc94 and flag_isoc99.\n\t* c-pretty-print.c (pp_c_cv_qualifiers): Check c_dialect_cxx as well\n\tas flag_isoc99 for 'restrict'.\n\t(pp_c_specifier_qualifier_list): Likewise for _Complex.\n\nFrom-SVN: r176635", "tree": {"sha": "a99f2e902eac5e170646c92ae98d13b328f91484", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a99f2e902eac5e170646c92ae98d13b328f91484"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fcb21722028937ea297b52f2ec3ffbcc8f49d163", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fcb21722028937ea297b52f2ec3ffbcc8f49d163", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fcb21722028937ea297b52f2ec3ffbcc8f49d163", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fcb21722028937ea297b52f2ec3ffbcc8f49d163/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3de69514c3f04c875510f9e3fbc2aeeccf80087c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3de69514c3f04c875510f9e3fbc2aeeccf80087c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3de69514c3f04c875510f9e3fbc2aeeccf80087c"}], "stats": {"total": 46, "additions": 38, "deletions": 8}, "files": [{"sha": "167ba510c9b8c6aaca8b1075564d3c4bbde54086", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcb21722028937ea297b52f2ec3ffbcc8f49d163/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcb21722028937ea297b52f2ec3ffbcc8f49d163/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=fcb21722028937ea297b52f2ec3ffbcc8f49d163", "patch": "@@ -1,3 +1,11 @@\n+2011-07-22  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/49813\n+\t* c-opts.c (set_std_cxx0x): Set flag_isoc94 and flag_isoc99.\n+\t* c-pretty-print.c (pp_c_cv_qualifiers): Check c_dialect_cxx as well\n+\tas flag_isoc99 for 'restrict'.\n+\t(pp_c_specifier_qualifier_list): Likewise for _Complex.\n+\n 2011-07-21  Ian Lance Taylor  <iant@google.com>\n \n \tPR middle-end/49705"}, {"sha": "3227f7b986019f29342ca7d417b7b8776926d295", "filename": "gcc/c-family/c-opts.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcb21722028937ea297b52f2ec3ffbcc8f49d163/gcc%2Fc-family%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcb21722028937ea297b52f2ec3ffbcc8f49d163/gcc%2Fc-family%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.c?ref=fcb21722028937ea297b52f2ec3ffbcc8f49d163", "patch": "@@ -1488,6 +1488,9 @@ set_std_cxx0x (int iso)\n   flag_no_gnu_keywords = iso;\n   flag_no_nonansi_builtin = iso;\n   flag_iso = iso;\n+  /* C++0x includes the C99 standard library.  */\n+  flag_isoc94 = 1;\n+  flag_isoc99 = 1;\n   cxx_dialect = cxx0x;\n }\n "}, {"sha": "53d39d643d08e425d2162d5ba75320baf55c8c26", "filename": "gcc/c-family/c-pretty-print.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcb21722028937ea297b52f2ec3ffbcc8f49d163/gcc%2Fc-family%2Fc-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcb21722028937ea297b52f2ec3ffbcc8f49d163/gcc%2Fc-family%2Fc-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-pretty-print.c?ref=fcb21722028937ea297b52f2ec3ffbcc8f49d163", "patch": "@@ -205,7 +205,8 @@ pp_c_cv_qualifiers (c_pretty_printer *pp, int qualifiers, bool func_type)\n     {\n       if (previous)\n         pp_c_whitespace (pp);\n-      pp_c_ws_string (pp, flag_isoc99 ? \"restrict\" : \"__restrict__\");\n+      pp_c_ws_string (pp, (flag_isoc99 && !c_dialect_cxx ()\n+\t\t\t   ? \"restrict\" : \"__restrict__\"));\n     }\n }\n \n@@ -476,7 +477,8 @@ pp_c_specifier_qualifier_list (c_pretty_printer *pp, tree t)\n     case VECTOR_TYPE:\n     case COMPLEX_TYPE:\n       if (code == COMPLEX_TYPE)\n-\tpp_c_ws_string (pp, flag_isoc99 ? \"_Complex\" : \"__complex__\");\n+\tpp_c_ws_string (pp, (flag_isoc99 && !c_dialect_cxx ()\n+\t\t\t     ? \"_Complex\" : \"__complex__\"));\n       else if (code == VECTOR_TYPE)\n \t{\n \t  pp_c_ws_string (pp, \"__vector\");"}, {"sha": "edb8c7205a6cfaa4125fa07b21ee3fd26fd499ed", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcb21722028937ea297b52f2ec3ffbcc8f49d163/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcb21722028937ea297b52f2ec3ffbcc8f49d163/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fcb21722028937ea297b52f2ec3ffbcc8f49d163", "patch": "@@ -1,3 +1,9 @@\n+2011-07-22  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/49813\n+\t* g++.dg/opt/builtins2.C: New.\n+\t* g++.dg/other/error27.C: Don't rely on __builtin.\n+\n 2011-07-22  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* gcc/testsuite/gcc.target/i386/avx-vzeroupper-16.c: Only run"}, {"sha": "00a28dbc1bf2e8250ad3a9bd1e0243124cbfed7a", "filename": "gcc/testsuite/g++.dg/opt/builtins2.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcb21722028937ea297b52f2ec3ffbcc8f49d163/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fbuiltins2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcb21722028937ea297b52f2ec3ffbcc8f49d163/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fbuiltins2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fbuiltins2.C?ref=fcb21722028937ea297b52f2ec3ffbcc8f49d163", "patch": "@@ -0,0 +1,11 @@\n+// PR c++/49813\n+// We should handle asinh as a built-in in C++0x mode, even when strict.\n+// { dg-options \"-std=c++0x\" }\n+// { dg-final { scan-assembler-not \"asinh\" } }\n+\n+#include <math.h>\n+\n+int main()\n+{\n+  double das = asinh(1.0);\n+}"}, {"sha": "ef1e5906b6b0d1a8d09df3e901bbb1a106c815f0", "filename": "gcc/testsuite/g++.dg/other/error27.C", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcb21722028937ea297b52f2ec3ffbcc8f49d163/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ferror27.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcb21722028937ea297b52f2ec3ffbcc8f49d163/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ferror27.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ferror27.C?ref=fcb21722028937ea297b52f2ec3ffbcc8f49d163", "patch": "@@ -4,10 +4,10 @@\n \n void foo (double x, double y)\n {\n-  __builtin_isgreater(x, y)();\t\t// { dg-error \"__builtin_\\[^\\n\\]*cannot be used as a function\" }\n-  __builtin_isless(x, y)();\t\t// { dg-error \"__builtin_\\[^\\n\\]*cannot be used as a function\" }\n-  __builtin_isgreaterequal(x, y)();\t// { dg-error \"__builtin_\\[^\\n\\]*cannot be used as a function\" }\n-  __builtin_islessequal(x, y)();\t// { dg-error \"__builtin_\\[^\\n\\]*cannot be used as a function\" }\n-  __builtin_isunordered(x, y)();\t// { dg-error \"__builtin_\\[^\\n\\]*cannot be used as a function\" }\n-  __builtin_islessgreater(x, y)();\t// { dg-error \"__builtin_\\[^\\n\\]*cannot be used as a function\" }\n+  __builtin_isgreater(x, y)();\t\t// { dg-error \"cannot be used as a function\" }\n+  __builtin_isless(x, y)();\t\t// { dg-error \"cannot be used as a function\" }\n+  __builtin_isgreaterequal(x, y)();\t// { dg-error \"cannot be used as a function\" }\n+  __builtin_islessequal(x, y)();\t// { dg-error \"cannot be used as a function\" }\n+  __builtin_isunordered(x, y)();\t// { dg-error \"cannot be used as a function\" }\n+  __builtin_islessgreater(x, y)();\t// { dg-error \"cannot be used as a function\" }\n }"}]}