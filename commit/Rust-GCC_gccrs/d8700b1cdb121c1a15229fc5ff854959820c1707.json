{"sha": "d8700b1cdb121c1a15229fc5ff854959820c1707", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDg3MDBiMWNkYjEyMWMxYTE1MjI5ZmM1ZmY4NTQ5NTk4MjBjMTcwNw==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-04-11T21:39:40Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-04-11T21:39:40Z"}, "message": "sse.md (VI): New mode iterator.\n\n\t* config/i386/sse.md (VI): New mode iterator.\n\t(SSEMODEI): Remove.\n\t(AVX256MODEI): Ditto.\n\t(AVXMODEF4P): Ditto.\n\t(avxvecpsmode): Ditto.\n\t(one_cmpl<mode>2): Enable for TARGET_SSE.  Use VI mode iterator.\n\t(sse2_andnot<mode>3): New expander.\n\t(*andnot<mode>3): Merge with *sse2_andnot<mode>3 and\n\t*avx_andnot<mode>3.  Enable for TARGET_SSE.  Use VI mode iterator.\n\t(<any_logic:code><mode>3): Use VI mode iterator.\n\t(*<any_logic:code><mode>3): Merge with *sse2_<any_logic:code><mode>3\n\tand *avx_<any_logic:code><mode>3.  Use VI mode iterator.\n\t(*andnottf3): Handle AVX three-operand constraints.\n\t(*<any_logic:code>tf3): Handle AVX three-operand constraints.\n\nFrom-SVN: r172280", "tree": {"sha": "06cf642ef983dfb8e3c92dfd3cc6ed7e0ca22cb4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/06cf642ef983dfb8e3c92dfd3cc6ed7e0ca22cb4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d8700b1cdb121c1a15229fc5ff854959820c1707", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8700b1cdb121c1a15229fc5ff854959820c1707", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8700b1cdb121c1a15229fc5ff854959820c1707", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8700b1cdb121c1a15229fc5ff854959820c1707/comments", "author": null, "committer": null, "parents": [{"sha": "b1372d5de2cf9b5c2d4cb97eeb2256ee60b49ef9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1372d5de2cf9b5c2d4cb97eeb2256ee60b49ef9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1372d5de2cf9b5c2d4cb97eeb2256ee60b49ef9"}], "stats": {"total": 276, "additions": 151, "deletions": 125}, "files": [{"sha": "89dc4087041199cf23506460b9ec4db0b9a9c0a1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 9, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8700b1cdb121c1a15229fc5ff854959820c1707/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8700b1cdb121c1a15229fc5ff854959820c1707/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d8700b1cdb121c1a15229fc5ff854959820c1707", "patch": "@@ -1,5 +1,22 @@\n+2011-04-12  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/sse.md (VI): New mode iterator.\n+\t(SSEMODEI): Remove.\n+\t(AVX256MODEI): Ditto.\n+\t(AVXMODEF4P): Ditto.\n+\t(avxvecpsmode): Ditto.\n+\t(one_cmpl<mode>2): Enable for TARGET_SSE.  Use VI mode iterator.\n+\t(sse2_andnot<mode>3): New expander.\n+\t(*andnot<mode>3): Merge with *sse2_andnot<mode>3 and\n+\t*avx_andnot<mode>3.  Enable for TARGET_SSE.  Use VI mode iterator.\n+\t(<any_logic:code><mode>3): Use VI mode iterator.\n+\t(*<any_logic:code><mode>3): Merge with *sse2_<any_logic:code><mode>3\n+\tand *avx_<any_logic:code><mode>3.  Use VI mode iterator.\n+\t(*andnottf3): Handle AVX three-operand constraints.\n+\t(*<any_logic:code>tf3): Handle AVX three-operand constraints.\n+\n 2011-04-11  Joseph Myers  <joseph@codesourcery.com>\n-            Robert Millan  <rmh@gnu.org>\n+\t    Robert Millan  <rmh@gnu.org>\n \n \t* config.gcc (x86_64-*-kfreebsd*-gnu): Use i386/kfreebsd-gnu.h.\n \t* config/i386/kfreebsd-gnu.h (GNU_USER_DYNAMIC_LINKER32,\n@@ -9,8 +26,7 @@\n \t* config/i386/knetbsd-gnu.h (GNU_USER_LINK_EMULATION): Define.\n \t(REG_NAME): Don't undefine.\n \t(MD_UNWIND_SUPPORT): Undefine.\n-\t* config/i386/kopensolaris-gnu.h (GNU_USER_LINK_EMULATION):\n-\tDefine.\n+\t* config/i386/kopensolaris-gnu.h (GNU_USER_LINK_EMULATION): Define.\n \n 2011-04-11  Joseph Myers  <joseph@codesourcery.com>\n \n@@ -110,8 +126,7 @@\n \tLINUX_TARGET_OS_CPP_BUILTINS to GNU_USER_TARGET_OS_CPP_BUILTINS.\n \t* config/pa/pa-linux.h (TARGET_OS_CPP_BUILTINS): Change\n \tLINUX_TARGET_OS_CPP_BUILTINS to GNU_USER_TARGET_OS_CPP_BUILTINS.\n-\t(LINK_SPEC): Change LINUX_DYNAMIC_LINKER to\n-\tGNU_USER_DYNAMIC_LINKER.\n+\t(LINK_SPEC): Change LINUX_DYNAMIC_LINKER to GNU_USER_DYNAMIC_LINKER.\n \t* config/rs6000/linux64.h (LINUX_DYNAMIC_LINKER32): Rename to\n \tGNU_USER_DYNAMIC_LINKER32.\n \t(LINUX_DYNAMIC_LINKER64): Rename to GNU_USER_DYNAMIC_LINKER64.\n@@ -142,8 +157,7 @@\n \tLINUX_TARGET_OS_CPP_BUILTINS to GNU_USER_TARGET_OS_CPP_BUILTINS.\n \t* config/xtensa/linux.h (TARGET_OS_CPP_BUILTINS): Change\n \tLINUX_TARGET_OS_CPP_BUILTINS to GNU_USER_TARGET_OS_CPP_BUILTINS.\n-\t(LINK_SPEC): Change LINUX_DYNAMIC_LINKER to\n-\tGNU_USER_DYNAMIC_LINKER.\n+\t(LINK_SPEC): Change LINUX_DYNAMIC_LINKER to GNU_USER_DYNAMIC_LINKER.\n \n 2011-04-11  Joseph Myers  <joseph@codesourcery.com>\n \n@@ -194,8 +208,7 @@\n \t* config.gcc (i[34567]86-*-linux* | i[34567]86-*-kfreebsd*-gnu |\n \ti[34567]86-*-knetbsd*-gnu | i[34567]86-*-gnu* |\n \ti[34567]86-*-kopensolaris*-gnu, x86_64-*-linux* |\n-\tx86_64-*-kfreebsd*-gnu | x86_64-*-knetbsd*-gnu): Use the new\n-\theaders.\n+\tx86_64-*-kfreebsd*-gnu | x86_64-*-knetbsd*-gnu): Use the new headers.\n \n 2011-04-11  Kai Tietz  <ktietz@redhat.com>\n "}, {"sha": "14060cf15ec6cc226edd53dc0aecb848fad87169", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 129, "deletions": 116, "changes": 245, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8700b1cdb121c1a15229fc5ff854959820c1707/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8700b1cdb121c1a15229fc5ff854959820c1707/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=d8700b1cdb121c1a15229fc5ff854959820c1707", "patch": "@@ -36,6 +36,13 @@\n (define_mode_iterator VF_128\n   [(V4SF \"TARGET_SSE\") (V2DF \"TARGET_SSE2\")])\n \n+;; All vector integer modes\n+(define_mode_iterator VI\n+  [(V32QI \"TARGET_AVX\") V16QI\n+   (V16HI \"TARGET_AVX\") V8HI\n+   (V8SI \"TARGET_AVX\") V4SI\n+   (V4DI \"TARGET_AVX\") V2DI])\n+\n ;; All 128bit vector integer modes\n (define_mode_iterator VI_128 [V16QI V8HI V4SI V2DI])\n \n@@ -50,16 +57,10 @@\n ;; Instruction suffix for sign and zero extensions.\n (define_code_attr extsuffix [(sign_extend \"sx\") (zero_extend \"zx\")])\n \n-;; 16 byte integral modes handled by SSE\n-(define_mode_iterator SSEMODEI [V16QI V8HI V4SI V2DI])\n-\n ;; All 16-byte vector modes handled by SSE\n (define_mode_iterator SSEMODE [V16QI V8HI V4SI V2DI V4SF V2DF])\n (define_mode_iterator SSEMODE16 [V16QI V8HI V4SI V2DI V1TI V4SF V2DF])\n \n-;; 32 byte integral vector modes handled by AVX\n-(define_mode_iterator AVX256MODEI [V32QI V16HI V8SI V4DI])\n-\n ;; All 32-byte vector modes handled by AVX\n (define_mode_iterator AVX256MODE [V32QI V16HI V8SI V4DI V8SF V4DF])\n \n@@ -86,7 +87,6 @@\n (define_mode_iterator AVX256MODE4P [V4DI V4DF])\n (define_mode_iterator AVX256MODE8P [V8SI V8SF])\n (define_mode_iterator AVXMODEF2P [V4SF V2DF V8SF V4DF])\n-(define_mode_iterator AVXMODEF4P [V4SF V4DF])\n (define_mode_iterator AVXMODEFDP [V2DF V4DF])\n (define_mode_iterator AVXMODEFSP [V4SF V8SF])\n \n@@ -160,9 +160,6 @@\n   [(V16QI \"TI\") (V8HI \"TI\") (V4SI \"TI\") (V2DI \"TI\") (V1TI \"TI\")\n    (V4SF \"V4SF\") (V8SF \"V8SF\") (V2DF \"V2DF\") (V4DF \"V4DF\")\n    (V32QI \"OI\") (V16HI \"OI\") (V8SI \"OI\") (V4DI \"OI\")])\n-(define_mode_attr avxvecpsmode\n-  [(V16QI \"V4SF\") (V8HI \"V4SF\") (V4SI \"V4SF\") (V2DI \"V4SF\")\n-   (V32QI \"V8SF\") (V16HI \"V8SF\") (V8SI \"V8SF\") (V4DI \"V8SF\")])\n (define_mode_attr avxhalfvecmode\n   [(V32QI \"V16QI\") (V16HI \"V8HI\") (V8SI \"V4SI\") (V4DI \"V2DI\")\n    (V8SF \"V4SF\") (V4DF \"V2DF\")\n@@ -5775,10 +5772,10 @@\n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n \n (define_expand \"one_cmpl<mode>2\"\n-  [(set (match_operand:SSEMODEI 0 \"register_operand\" \"\")\n-\t(xor:SSEMODEI (match_operand:SSEMODEI 1 \"nonimmediate_operand\" \"\")\n-\t\t      (match_dup 2)))]\n-  \"TARGET_SSE2\"\n+  [(set (match_operand:VI 0 \"register_operand\" \"\")\n+\t(xor:VI (match_operand:VI 1 \"nonimmediate_operand\" \"\")\n+\t\t(match_dup 2)))]\n+  \"TARGET_SSE\"\n {\n   int i, n = GET_MODE_NUNITS (<MODE>mode);\n   rtvec v = rtvec_alloc (n);\n@@ -5789,112 +5786,123 @@\n   operands[2] = force_reg (<MODE>mode, gen_rtx_CONST_VECTOR (<MODE>mode, v));\n })\n \n-(define_insn \"*avx_andnot<mode>3\"\n-  [(set (match_operand:AVX256MODEI 0 \"register_operand\" \"=x\")\n-\t(and:AVX256MODEI\n-\t  (not:AVX256MODEI (match_operand:AVX256MODEI 1 \"register_operand\" \"x\"))\n-          (match_operand:AVX256MODEI 2 \"nonimmediate_operand\" \"xm\")))]\n-  \"TARGET_AVX\"\n-  \"vandnps\\t{%2, %1, %0|%0, %1, %2}\"\n-  [(set_attr \"type\" \"sselog\")\n-   (set_attr \"prefix\" \"vex\")\n-   (set_attr \"mode\" \"<avxvecpsmode>\")])\n-\n-(define_insn \"*sse_andnot<mode>3\"\n-  [(set (match_operand:SSEMODEI 0 \"register_operand\" \"=x\")\n-\t(and:SSEMODEI\n-\t  (not:SSEMODEI (match_operand:SSEMODEI 1 \"register_operand\" \"0\"))\n-          (match_operand:SSEMODEI 2 \"nonimmediate_operand\" \"xm\")))]\n-  \"(TARGET_SSE && !TARGET_SSE2)\"\n-  \"andnps\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"sselog\")\n-   (set_attr \"mode\" \"V4SF\")])\n+(define_expand \"sse2_andnot<mode>3\"\n+  [(set (match_operand:VI_128 0 \"register_operand\" \"\")\n+\t(and:VI_128\n+\t  (not:VI_128 (match_operand:VI_128 1 \"register_operand\" \"\"))\n+\t  (match_operand:VI_128 2 \"nonimmediate_operand\" \"\")))]\n+  \"TARGET_SSE2\")\n \n-(define_insn \"*avx_andnot<mode>3\"\n-  [(set (match_operand:SSEMODEI 0 \"register_operand\" \"=x\")\n-\t(and:SSEMODEI\n-\t  (not:SSEMODEI (match_operand:SSEMODEI 1 \"register_operand\" \"x\"))\n-\t  (match_operand:SSEMODEI 2 \"nonimmediate_operand\" \"xm\")))]\n-  \"TARGET_AVX\"\n-  \"vpandn\\t{%2, %1, %0|%0, %1, %2}\"\n-  [(set_attr \"type\" \"sselog\")\n-   (set_attr \"prefix\" \"vex\")\n-   (set_attr \"mode\" \"TI\")])\n+(define_insn \"*andnot<mode>3\"\n+  [(set (match_operand:VI 0 \"register_operand\" \"=x,x\")\n+\t(and:VI\n+\t  (not:VI (match_operand:VI 1 \"register_operand\" \"0,x\"))\n+\t  (match_operand:VI 2 \"nonimmediate_operand\" \"xm,xm\")))]\n+  \"TARGET_SSE\"\n+{\n+  static char buf[32];\n+  const char *ops;\n+  const char *tmp\n+    = (get_attr_mode (insn) == MODE_TI) ? \"pandn\" : \"andnps\";\n \n-(define_insn \"sse2_andnot<mode>3\"\n-  [(set (match_operand:SSEMODEI 0 \"register_operand\" \"=x\")\n-\t(and:SSEMODEI\n-\t  (not:SSEMODEI (match_operand:SSEMODEI 1 \"register_operand\" \"0\"))\n-\t  (match_operand:SSEMODEI 2 \"nonimmediate_operand\" \"xm\")))]\n-  \"TARGET_SSE2\"\n-  \"pandn\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"sselog\")\n-   (set_attr \"prefix_data16\" \"1\")\n-   (set_attr \"mode\" \"TI\")])\n+  switch (which_alternative)\n+    {\n+    case 0:\n+      ops = \"%s\\t{%%2, %%0|%%0, %%2}\";\n+      break;\n+    case 1:\n+      ops = \"v%s\\t{%%2, %%1, %%0|%%0, %%1, %%2}\";\n+      break;\n+    default:\n+      gcc_unreachable ();\n+    }\n \n-(define_insn \"*andnottf3\"\n-  [(set (match_operand:TF 0 \"register_operand\" \"=x\")\n-\t(and:TF\n-\t  (not:TF (match_operand:TF 1 \"register_operand\" \"0\"))\n-\t  (match_operand:TF 2 \"nonimmediate_operand\" \"xm\")))]\n-  \"TARGET_SSE2\"\n-  \"pandn\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"sselog\")\n-   (set_attr \"prefix_data16\" \"1\")\n-   (set_attr \"mode\" \"TI\")])\n+  snprintf (buf, sizeof (buf), ops, tmp);\n+  return buf;\n+}\n+  [(set_attr \"isa\" \"noavx,avx\")\n+   (set_attr \"type\" \"sselog\")\n+   (set (attr \"prefix_data16\")\n+     (if_then_else\n+       (and (eq_attr \"alternative\" \"0\")\n+\t    (eq_attr \"mode\" \"TI\"))\n+       (const_string \"1\")\n+       (const_string \"*\")))\n+   (set_attr \"prefix\" \"orig,vex\")\n+   (set (attr \"mode\")\n+     (cond [(ne (symbol_ref \"GET_MODE_SIZE (<MODE>mode) > 128\") (const_int 0))\n+\t      (const_string \"V8SF\")\n+\t    (ne (symbol_ref \"TARGET_SSE2\") (const_int 0))\n+\t      (const_string \"TI\")\n+\t   ]\n+\t   (const_string \"V4SF\")))])\n \n (define_expand \"<code><mode>3\"\n-  [(set (match_operand:SSEMODEI 0 \"register_operand\" \"\")\n-\t(any_logic:SSEMODEI\n-\t  (match_operand:SSEMODEI 1 \"nonimmediate_operand\" \"\")\n-\t  (match_operand:SSEMODEI 2 \"nonimmediate_operand\" \"\")))]\n+  [(set (match_operand:VI 0 \"register_operand\" \"\")\n+\t(any_logic:VI\n+\t  (match_operand:VI 1 \"nonimmediate_operand\" \"\")\n+\t  (match_operand:VI 2 \"nonimmediate_operand\" \"\")))]\n   \"TARGET_SSE\"\n   \"ix86_fixup_binary_operands_no_copy (<CODE>, <MODE>mode, operands);\")\n \n-(define_insn \"*avx_<code><mode>3\"\n-  [(set (match_operand:AVX256MODEI 0 \"register_operand\" \"=x\")\n-        (any_logic:AVX256MODEI\n-          (match_operand:AVX256MODEI 1 \"nonimmediate_operand\" \"%x\")\n-          (match_operand:AVX256MODEI 2 \"nonimmediate_operand\" \"xm\")))]\n-  \"TARGET_AVX\n-   && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n-  \"v<logic>ps\\t{%2, %1, %0|%0, %1, %2}\"\n-  [(set_attr \"type\" \"sselog\")\n-   (set_attr \"prefix\" \"vex\")\n-   (set_attr \"mode\" \"<avxvecpsmode>\")])\n-\n-(define_insn \"*sse_<code><mode>3\"\n-  [(set (match_operand:SSEMODEI 0 \"register_operand\" \"=x\")\n-        (any_logic:SSEMODEI\n-          (match_operand:SSEMODEI 1 \"nonimmediate_operand\" \"%0\")\n-          (match_operand:SSEMODEI 2 \"nonimmediate_operand\" \"xm\")))]\n-  \"(TARGET_SSE && !TARGET_SSE2)\n+(define_insn \"*<code><mode>3\"\n+  [(set (match_operand:VI 0 \"register_operand\" \"=x,x\")\n+\t(any_logic:VI\n+\t  (match_operand:VI 1 \"nonimmediate_operand\" \"%0,x\")\n+\t  (match_operand:VI 2 \"nonimmediate_operand\" \"xm,xm\")))]\n+  \"TARGET_SSE\n    && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n-  \"<logic>ps\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"sselog\")\n-   (set_attr \"mode\" \"V4SF\")])\n+{\n+  static char buf[32];\n+  const char *ops;\n+  const char *tmp\n+    = (get_attr_mode (insn) == MODE_TI) ? \"p<logic>\" : \"<logic>ps\";\n \n-(define_insn \"*avx_<code><mode>3\"\n-  [(set (match_operand:SSEMODEI 0 \"register_operand\" \"=x\")\n-        (any_logic:SSEMODEI\n-          (match_operand:SSEMODEI 1 \"nonimmediate_operand\" \"%x\")\n-          (match_operand:SSEMODEI 2 \"nonimmediate_operand\" \"xm\")))]\n-  \"TARGET_AVX\n-   && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n-  \"vp<logic>\\t{%2, %1, %0|%0, %1, %2}\"\n-  [(set_attr \"type\" \"sselog\")\n-   (set_attr \"prefix\" \"vex\")\n-   (set_attr \"mode\" \"TI\")])\n+  switch (which_alternative)\n+    {\n+    case 0:\n+      ops = \"%s\\t{%%2, %%0|%%0, %%2}\";\n+      break;\n+    case 1:\n+      ops = \"v%s\\t{%%2, %%1, %%0|%%0, %%1, %%2}\";\n+      break;\n+    default:\n+      gcc_unreachable ();\n+    }\n \n-(define_insn \"*sse2_<code><mode>3\"\n-  [(set (match_operand:SSEMODEI 0 \"register_operand\" \"=x\")\n-\t(any_logic:SSEMODEI\n-\t  (match_operand:SSEMODEI 1 \"nonimmediate_operand\" \"%0\")\n-\t  (match_operand:SSEMODEI 2 \"nonimmediate_operand\" \"xm\")))]\n-  \"TARGET_SSE2 && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n-  \"p<logic>\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"sselog\")\n-   (set_attr \"prefix_data16\" \"1\")\n+  snprintf (buf, sizeof (buf), ops, tmp);\n+  return buf;\n+}\n+  [(set_attr \"isa\" \"noavx,avx\")\n+   (set_attr \"type\" \"sselog\")\n+   (set (attr \"prefix_data16\")\n+     (if_then_else\n+       (and (eq_attr \"alternative\" \"0\")\n+\t    (eq_attr \"mode\" \"TI\"))\n+       (const_string \"1\")\n+       (const_string \"*\")))\n+   (set_attr \"prefix\" \"orig,vex\")\n+   (set (attr \"mode\")\n+     (cond [(ne (symbol_ref \"GET_MODE_SIZE (<MODE>mode) > 128\") (const_int 0))\n+\t      (const_string \"V8SF\")\n+\t    (ne (symbol_ref \"TARGET_SSE2\") (const_int 0))\n+\t      (const_string \"TI\")\n+\t   ]\n+\t   (const_string \"V4SF\")))])\n+\n+(define_insn \"*andnottf3\"\n+  [(set (match_operand:TF 0 \"register_operand\" \"=x,x\")\n+\t(and:TF\n+\t  (not:TF (match_operand:TF 1 \"register_operand\" \"0,x\"))\n+\t  (match_operand:TF 2 \"nonimmediate_operand\" \"xm,xm\")))]\n+  \"TARGET_SSE2\"\n+  \"@\n+   pandn\\t{%2, %0|%0, %2}\n+   vpandn\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"isa\" \"noavx,avx\")\n+   (set_attr \"type\" \"sselog\")\n+   (set_attr \"prefix_data16\" \"1,*\")\n+   (set_attr \"prefix\" \"orig,vex\")\n    (set_attr \"mode\" \"TI\")])\n \n (define_expand \"<code>tf3\"\n@@ -5906,14 +5914,19 @@\n   \"ix86_fixup_binary_operands_no_copy (<CODE>, TFmode, operands);\")\n \n (define_insn \"*<code>tf3\"\n-  [(set (match_operand:TF 0 \"register_operand\" \"=x\")\n+  [(set (match_operand:TF 0 \"register_operand\" \"=x,x\")\n \t(any_logic:TF\n-\t  (match_operand:TF 1 \"nonimmediate_operand\" \"%0\")\n-\t  (match_operand:TF 2 \"nonimmediate_operand\" \"xm\")))]\n-  \"TARGET_SSE2 && ix86_binary_operator_ok (<CODE>, TFmode, operands)\"\n-  \"p<logic>\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"sselog\")\n-   (set_attr \"prefix_data16\" \"1\")\n+\t  (match_operand:TF 1 \"nonimmediate_operand\" \"%0,x\")\n+\t  (match_operand:TF 2 \"nonimmediate_operand\" \"xm,xm\")))]\n+  \"TARGET_SSE2\n+   && ix86_binary_operator_ok (<CODE>, TFmode, operands)\"\n+  \"@\n+   p<logic>\\t{%2, %0|%0, %2}\n+   vp<logic>\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"isa\" \"noavx,avx\")\n+   (set_attr \"type\" \"sselog\")\n+   (set_attr \"prefix_data16\" \"1,*\")\n+   (set_attr \"prefix\" \"orig,vex\")\n    (set_attr \"mode\" \"TI\")])\n \n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}]}