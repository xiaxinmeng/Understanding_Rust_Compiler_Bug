{"sha": "e92f9bcf4d5c6d54954469b27835924194b02aa7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTkyZjliY2Y0ZDVjNmQ1NDk1NDQ2OWIyNzgzNTkyNDE5NGIwMmFhNw==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1997-10-21T19:52:12Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1997-10-21T19:52:12Z"}, "message": "mn10200.h (GO_IF_LEGITIMATE_ADDRESS): Do not allow indexed addresses.\n\n        * mn10200.h (GO_IF_LEGITIMATE_ADDRESS): Do not allow indexed\n        addresses.\n        * mn10200.md (neghi2): Provide an alternative which works if\n        the input and output register are the same.\n\nFrom-SVN: r16136", "tree": {"sha": "aa129c52262daa9310a8dda62f91c0b649261581", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aa129c52262daa9310a8dda62f91c0b649261581"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e92f9bcf4d5c6d54954469b27835924194b02aa7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e92f9bcf4d5c6d54954469b27835924194b02aa7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e92f9bcf4d5c6d54954469b27835924194b02aa7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e92f9bcf4d5c6d54954469b27835924194b02aa7/comments", "author": null, "committer": null, "parents": [{"sha": "576e5accbda5cfee3abf23a411d7baf53e7cd729", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/576e5accbda5cfee3abf23a411d7baf53e7cd729", "html_url": "https://github.com/Rust-GCC/gccrs/commit/576e5accbda5cfee3abf23a411d7baf53e7cd729"}], "stats": {"total": 25, "additions": 17, "deletions": 8}, "files": [{"sha": "4ab05e915a1c3b945fb81752a1f2c793ac14da7b", "filename": "gcc/config/mn10200/mn10200.h", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e92f9bcf4d5c6d54954469b27835924194b02aa7/gcc%2Fconfig%2Fmn10200%2Fmn10200.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e92f9bcf4d5c6d54954469b27835924194b02aa7/gcc%2Fconfig%2Fmn10200%2Fmn10200.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10200%2Fmn10200.h?ref=e92f9bcf4d5c6d54954469b27835924194b02aa7", "patch": "@@ -566,7 +566,7 @@ extern struct rtx_def *function_arg();\n #define TRAMPOLINE_TEMPLATE(FILE)\t\t\t\\\n   do {\t\t\t\t\t\t\t\\\n     fprintf (FILE, \"\\t.byte 0xfd\\n\");\t\t\t\\\n-    fprintf (FILE, \"\\t.byte 0x02\\n\");\t\t\t\\\n+    fprintf (FILE, \"\\t.byte 0x00\\n\");\t\t\t\\\n     fprintf (FILE, \"\\t.byte 0x00\\n\");\t\t\t\\\n     fprintf (FILE, \"\\tmov (a3),a0\\n\");\t\t\t\\\n     fprintf (FILE, \"\\tadd -4,a3\\n\");\t\t\t\\\n@@ -663,6 +663,11 @@ extern struct rtx_def *function_arg();\n    The MODE argument is the machine mode for the MEM expression\n    that wants to use this address.\n \n+   We used to allow reg+reg addresses for QImode and HImode; however,\n+   they tended to cause the register allocator to run out of registers.\n+   Basically, an indexed load/store always keeps 2 data and one address\n+   register live, which is just too many for this machine.  */\n+\n    The other macros defined here are used only in GO_IF_LEGITIMATE_ADDRESS,\n    except for CONSTANT_ADDRESS_P which is actually machine-independent.  */\n \n@@ -692,10 +697,6 @@ extern struct rtx_def *function_arg();\n \t{\t\t\t\t\t\t\\\n \t  if (GET_CODE (index) == CONST_INT)\t\t\\\n \t    goto ADDR;\t\t\t\t\t\\\n-\t  if (GET_CODE (index) == REG\t\t\t\\\n-\t      && REG_OK_FOR_INDEX_P (index)\t\t\\\n-\t      && GET_MODE_SIZE (MODE) <= word_mode)\t\\\n-\t    goto ADDR;\t\t\t\t\t\\\n \t}\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\\\n }"}, {"sha": "2fffb91c4964226cfb72bb40008dc333eac50947", "filename": "gcc/config/mn10200/mn10200.md", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e92f9bcf4d5c6d54954469b27835924194b02aa7/gcc%2Fconfig%2Fmn10200%2Fmn10200.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e92f9bcf4d5c6d54954469b27835924194b02aa7/gcc%2Fconfig%2Fmn10200%2Fmn10200.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10200%2Fmn10200.md?ref=e92f9bcf4d5c6d54954469b27835924194b02aa7", "patch": "@@ -497,13 +497,21 @@\n ;; \n ;; We could do HImode negations with a \"not;add\" sequence, but\n ;; generally it's generated slightly worse code.\n+;;\n+;; The second alternative is not strictly necesasry, but helps\n+;; when the register allocators start running short of registers.\n (define_insn \"neghi2\"\n-  [(set (match_operand:HI 0 \"general_operand\" \"=&d\")\n-        (neg:HI (match_operand:HI 1 \"general_operand\" \"d\")))]\n+  [(set (match_operand:HI 0 \"general_operand\" \"=&d,d\")\n+        (neg:HI (match_operand:HI 1 \"general_operand\" \"d,0\")))]\n   \"\"\n-  \"sub %0,%0\\;sub %1,%0\"\n+  \"@\n+  sub %0,%0\\;sub %1,%0\n+  not %0\\;add 1,%0\"\n   [(set_attr \"cc\" \"set_zn\")])\n \n+;; The not/and sequence won't work here.  It's not clear if we'll\n+;; ever need to provide an alternate sequence since this should\n+;; be used much less frequently than neghi2.\n (define_insn \"negpsi2\"\n   [(set (match_operand:PSI 0 \"general_operand\" \"=&d\")\n         (neg:PSI (match_operand:PSI 1 \"general_operand\" \"d\")))]"}]}