{"sha": "d68d275a00573be49f5e83eba52ce3f26d11db9e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDY4ZDI3NWEwMDU3M2JlNDlmNWU4M2ViYTUyY2UzZjI2ZDExZGI5ZQ==", "commit": {"author": {"name": "Andrew Pinski", "email": "apinski@marvell.com", "date": "2021-07-29T19:56:18Z"}, "committer": {"name": "Andrew Pinski", "email": "apinski@marvell.com", "date": "2021-07-30T17:25:55Z"}, "message": "Add testcases that got lost when tree-ssa was merged\n\nSo I was looking at some older PRs (PR 16016 in this case),\nI noticed that some of the testcases were removed when\nthe tree-ssa branch was merged. This adds them back in.\n\nOK? Bootstrapped and tested on x86_64-linux-gnu with no regressions.\n\nThanks,\nAndrew Pinski\n\ngcc/testsuite/ChangeLog:\n\n\tPR testsuite/101517\n\t* g++.dg/warn/Wunused-18.C: New test.\n\t* gcc.c-torture/compile/20030405-2.c: New test.\n\t* gcc.c-torture/compile/20040304-2.c: New test.\n\t* gcc.dg/20030612-2.c: New test.", "tree": {"sha": "7cb42cd9d157548b5d5051bc440e3a142a643906", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7cb42cd9d157548b5d5051bc440e3a142a643906"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d68d275a00573be49f5e83eba52ce3f26d11db9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d68d275a00573be49f5e83eba52ce3f26d11db9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d68d275a00573be49f5e83eba52ce3f26d11db9e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d68d275a00573be49f5e83eba52ce3f26d11db9e/comments", "author": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "committer": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3dbd4d94bf380f3efa8bba9b203ce7d4c8f47fbb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3dbd4d94bf380f3efa8bba9b203ce7d4c8f47fbb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3dbd4d94bf380f3efa8bba9b203ce7d4c8f47fbb"}], "stats": {"total": 136, "additions": 136, "deletions": 0}, "files": [{"sha": "06d1a0516bc103c3fde172d33f93afab6d28acf3", "filename": "gcc/testsuite/g++.dg/warn/Wunused-18.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d68d275a00573be49f5e83eba52ce3f26d11db9e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunused-18.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d68d275a00573be49f5e83eba52ce3f26d11db9e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunused-18.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunused-18.C?ref=d68d275a00573be49f5e83eba52ce3f26d11db9e", "patch": "@@ -0,0 +1,13 @@\n+// PR c++/14199\n+// { dg-options \"-W -Wall -Wunused\" }\n+\n+struct X { \n+    static void foo (); \n+}; \n+ \n+template <typename T> \n+void foo (const T &t) { \n+  t.foo(); \n+}\n+\n+template void foo (const X &); "}, {"sha": "2e61f1fa3ff3dd3cd7b6f64b18cbca4e09b6fb2a", "filename": "gcc/testsuite/gcc.c-torture/compile/20030405-2.c", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d68d275a00573be49f5e83eba52ce3f26d11db9e/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20030405-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d68d275a00573be49f5e83eba52ce3f26d11db9e/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20030405-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20030405-2.c?ref=d68d275a00573be49f5e83eba52ce3f26d11db9e", "patch": "@@ -0,0 +1,58 @@\n+/* PR optimization/10024 */\n+extern int *allegro_errno;\n+typedef long fixed;\n+extern inline int\n+fixfloor (fixed x)\n+{\n+  if (x >= 0)\n+    return (x >> 16);\n+  else\n+    return ~((~x) >> 16);\n+}\n+extern inline int\n+fixtoi (fixed x)\n+{\n+  return fixfloor (x) + ((x & 0x8000) >> 15);\n+}\n+extern inline fixed\n+ftofix (double x)\n+{\n+  if (x > 32767.0)\n+    {\n+      *allegro_errno = 34;\n+      return 0x7FFFFFFF;\n+    }\n+  if (x < -32767.0)\n+    {\n+      *allegro_errno = 34;\n+      return -0x7FFFFFFF;\n+    }\n+  return (long) (x * 65536.0 + (x < 0 ? -0.5 : 0.5));\n+}\n+extern inline double\n+fixtof (fixed x)\n+{\n+  return (double) x / 65536.0;\n+}\n+extern inline fixed\n+fixdiv (fixed x, fixed y)\n+{\n+  if (y == 0)\n+    {\n+      *allegro_errno = 34;\n+      return (x < 0) ? -0x7FFFFFFF : 0x7FFFFFFF;\n+    }\n+  else\n+    return ftofix (fixtof (x) / fixtof (y));\n+}\n+extern inline fixed\n+itofix (int x)\n+{\n+  return x << 16;\n+}\n+\n+int\n+foo (int n)\n+{\n+  return fixtoi (fixdiv (itofix (512), itofix (n)));\n+}"}, {"sha": "146d42f23d641a76e0ce52edc865a87a80d8f841", "filename": "gcc/testsuite/gcc.c-torture/compile/20040304-2.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d68d275a00573be49f5e83eba52ce3f26d11db9e/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20040304-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d68d275a00573be49f5e83eba52ce3f26d11db9e/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20040304-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20040304-2.c?ref=d68d275a00573be49f5e83eba52ce3f26d11db9e", "patch": "@@ -0,0 +1,45 @@\n+/* PR optimization/14235 */\n+/* Origin: <senor_fjord@yahoo.com> */\n+\n+typedef signed char        int8_t;\n+typedef short              int16_t;\n+typedef int                int32_t;\n+typedef unsigned long long uint64_t;\n+\n+static const uint64_t LOW_BYTE_MASK    = 0x00000000000000ffULL;\n+static const uint64_t HIGH_BYTE_MASK   = 0x000000000000ff00ULL;\n+static const uint64_t WORD_MASK        = 0x000000000000ffffULL;\n+static const uint64_t DWORD_MASK       = 0x00000000ffffffffULL;\n+\n+extern uint64_t *srca_mask;\n+extern int *assert_thrown;\n+\n+void foo()\n+{\n+  uint64_t tempA = 0; /* actually a bunch of code to set A */ \n+  uint64_t tempB = 0; /* actually a bunch of code to set B */ \n+\n+  /* cast A to right size */\n+  tempA = (((*srca_mask == LOW_BYTE_MASK) || \n+            (*srca_mask == HIGH_BYTE_MASK)) ?\n+           ((int8_t)tempA) : \n+           ((*srca_mask == WORD_MASK) ? \n+            ((int16_t)tempA) : \n+            ((*srca_mask == DWORD_MASK) ? \n+             ((int32_t)tempA) : \n+             tempA)));\n+\n+  /* cast B to right size */\n+  tempB = (((*srca_mask == LOW_BYTE_MASK) || \n+            (*srca_mask == HIGH_BYTE_MASK)) ? \n+           ((int8_t)tempB) : \n+           ((*srca_mask == WORD_MASK) ? \n+            ((int16_t)tempB) : \n+            ((*srca_mask == DWORD_MASK) ? \n+             ((int32_t)tempB) : \n+             tempB))); \n+    \n+  if ((int) tempA > (int) tempB) { \n+    *assert_thrown = 1;\n+  }\n+}"}, {"sha": "f9f212caba112278fb463846c8efa760106aaf55", "filename": "gcc/testsuite/gcc.dg/20030612-2.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d68d275a00573be49f5e83eba52ce3f26d11db9e/gcc%2Ftestsuite%2Fgcc.dg%2F20030612-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d68d275a00573be49f5e83eba52ce3f26d11db9e/gcc%2Ftestsuite%2Fgcc.dg%2F20030612-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20030612-2.c?ref=d68d275a00573be49f5e83eba52ce3f26d11db9e", "patch": "@@ -0,0 +1,20 @@\n+/* Derived from PR middle-end/168.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-W\" } */\n+\n+extern void foo ();\n+\n+unsigned char uc;\n+unsigned short int usi;\n+unsigned int ui;\n+\n+\n+void bar()\n+{\n+  if (uc + usi >= ui)  /* { dg-bogus \"between signed and unsigned\" } */\n+    foo ();\n+  if (uc * usi >= ui)  /* { dg-bogus \"between signed and unsigned\" } */\n+    foo ();\n+}\n+"}]}