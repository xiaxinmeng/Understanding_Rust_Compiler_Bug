{"sha": "997de8ed6b50b6e24573e6bf562f2845b1660088", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTk3ZGU4ZWQ2YjUwYjZlMjQ1NzNlNmJmNTYyZjI4NDViMTY2MDA4OA==", "commit": {"author": {"name": "Steven Bosscher", "email": "stevenb@suse.de", "date": "2005-04-12T21:33:53Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2005-04-12T21:33:53Z"}, "message": "Makefile.in: Add function.h to BASIC_BLOCK_H.\n\n\t* Makefile.in: Add function.h to BASIC_BLOCK_H.  Remove all\n\treferences to gt-tree-cfg.h.\n\t* basic-block.h (struct basic_block_def): Don't skip rbi\n\tfor garbage collection.\n\t(struct reorder_block_def): Make GTY-able.\n\t(struct control_flow_graph): New structure.\n\t(n_edges, n_basic_blocks, last_basic_block, basic_block_info,\n\tBASIC_BLOCK, EXIT_BLOCK_PTR, ENTRY_BLOCK_PTR): No longer vars,\n\tbut instead defines to the control_flow_graph for cfun.\n\t(label_to_block_map): New define, points to the label map of\n\tthe control_flow_graph for cfun.\n\t(n_edges_for_function, n_basic_blocks_for_function,\n\tlast_basic_block_for_function, basic_block_info_for_function,\n\tEXIT_BLOCK_PTR_FOR_FUNCTION, ENTRY_BLOCK_PTR_FOR_FUNCTION,\n\tbasic_block_info_for_function, label_to_block_map_for_function):\n\tCounterparts for the above, taking a struct function as an extra\n\targument.\n\t(alloc_rbi_pool, free_rbi_pool): Remove prototypes.\n\t* cfg.c: (n_edges, n_basic_blocks, last_basic_block,\n\tbasic_block_info, ENTRY_BLOCK_PTR, EXIT_BLOCK_PTR): Remove.\n\t(alloc_rbi_pool, free_rbi_pool): Remove.\n\t(initialize_bb_rbi): Use ggc_alloc_cleared instead of pool_alloc.\n\t* cfglayout.c: (cfg_layout_initialize): Don't allocate the rbi pool\n\there...\n\t(cfg_layout_finalize) ... and don't free it here.\n\t* cfgrtl.c (cfg_layout_delete_block): Zero out rbi so it gets\n\tgarbage collected.\n\t* flow.c (free_basic_block_vars): Set label_to_block_map and\n\tn_edges to zero too.\n\t* function.h (struct function): Add cfg field.\n\t* function.c (allocate_struct_function): Allocate the cfg.\n\t* tree-cfg.c (label_to_block_map): Remove.\n\t(build_tree_cfg): Don't allocate the rbi pool here...\n\t(delete_tree_cfg_annotations): ...and don't free it here.\n\tAlso don't nullify label_to_block_map for cfun.\n\nCo-Authored-By: Jan Hubicka <jh@suse.cz>\nCo-Authored-By: Stuart Hastings <stuart@apple.com>\n\nFrom-SVN: r98048", "tree": {"sha": "172b7b8923ca5862deb02ac22abcd4d3155f0d6d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/172b7b8923ca5862deb02ac22abcd4d3155f0d6d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/997de8ed6b50b6e24573e6bf562f2845b1660088", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/997de8ed6b50b6e24573e6bf562f2845b1660088", "html_url": "https://github.com/Rust-GCC/gccrs/commit/997de8ed6b50b6e24573e6bf562f2845b1660088", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/997de8ed6b50b6e24573e6bf562f2845b1660088/comments", "author": null, "committer": null, "parents": [{"sha": "fee978121c61126f7ef22bfb4cb31f04b2430600", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fee978121c61126f7ef22bfb4cb31f04b2430600", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fee978121c61126f7ef22bfb4cb31f04b2430600"}], "stats": {"total": 260, "additions": 146, "deletions": 114}, "files": [{"sha": "5febe1d442863297083f56257080a338ea03738e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/997de8ed6b50b6e24573e6bf562f2845b1660088/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/997de8ed6b50b6e24573e6bf562f2845b1660088/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=997de8ed6b50b6e24573e6bf562f2845b1660088", "patch": "@@ -1,3 +1,43 @@\n+2005-04-12  Steven Bosscher  <stevenb@suse.de>\n+\t    Stuart Hastings <stuart@apple.com>\n+\t    Jan Hubicka  <jh@suse.cz>\n+\n+\t* Makefile.in: Add function.h to BASIC_BLOCK_H.  Remove all\n+\treferences to gt-tree-cfg.h.\n+\t* basic-block.h (struct basic_block_def): Don't skip rbi\n+\tfor garbage collection.\n+\t(struct reorder_block_def): Make GTY-able.\n+\t(struct control_flow_graph): New structure.\n+\t(n_edges, n_basic_blocks, last_basic_block, basic_block_info,\n+\tBASIC_BLOCK, EXIT_BLOCK_PTR, ENTRY_BLOCK_PTR): No longer vars,\n+\tbut instead defines to the control_flow_graph for cfun.\n+\t(label_to_block_map): New define, points to the label map of\n+\tthe control_flow_graph for cfun.\n+\t(n_edges_for_function, n_basic_blocks_for_function,\n+\tlast_basic_block_for_function, basic_block_info_for_function,\n+\tEXIT_BLOCK_PTR_FOR_FUNCTION, ENTRY_BLOCK_PTR_FOR_FUNCTION,\n+\tbasic_block_info_for_function, label_to_block_map_for_function):\n+\tCounterparts for the above, taking a struct function as an extra\n+\targument.\n+\t(alloc_rbi_pool, free_rbi_pool): Remove prototypes.\n+\t* cfg.c: (n_edges, n_basic_blocks, last_basic_block,\n+\tbasic_block_info, ENTRY_BLOCK_PTR, EXIT_BLOCK_PTR): Remove.\n+\t(alloc_rbi_pool, free_rbi_pool): Remove.\n+\t(initialize_bb_rbi): Use ggc_alloc_cleared instead of pool_alloc.\n+\t* cfglayout.c: (cfg_layout_initialize): Don't allocate the rbi pool\n+\there...\n+\t(cfg_layout_finalize) ... and don't free it here.\n+\t* cfgrtl.c (cfg_layout_delete_block): Zero out rbi so it gets\n+\tgarbage collected.\n+\t* flow.c (free_basic_block_vars): Set label_to_block_map and\n+\tn_edges to zero too.\n+\t* function.h (struct function): Add cfg field.\n+\t* function.c (allocate_struct_function): Allocate the cfg.\n+\t* tree-cfg.c (label_to_block_map): Remove.\n+\t(build_tree_cfg): Don't allocate the rbi pool here...\n+\t(delete_tree_cfg_annotations): ...and don't free it here.\n+\tAlso don't nullify label_to_block_map for cfun.\n+\n 2005-04-12  Caroline Tice  <ctice@apple.com>\n \n \t* bb-reorder.c (find_rarely_executed_basic_blocks_and_crossing_edges):"}, {"sha": "fc3ab24452db983f39e8f77a93c792bdcc6152c8", "filename": "gcc/Makefile.in", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/997de8ed6b50b6e24573e6bf562f2845b1660088/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/997de8ed6b50b6e24573e6bf562f2845b1660088/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=997de8ed6b50b6e24573e6bf562f2845b1660088", "patch": "@@ -729,7 +729,7 @@ EMIT_RTL_H = emit-rtl.h\n FLAGS_H = flags.h options.h\n EXPR_H = expr.h insn-config.h function.h $(RTL_H) $(FLAGS_H) $(TREE_H) $(MACHMODE_H) $(EMIT_RTL_H)\n OPTABS_H = optabs.h insn-codes.h\n-REGS_H = regs.h varray.h $(MACHMODE_H) $(OBSTACK_H) $(BASIC_BLOCK_H)\n+REGS_H = regs.h varray.h $(MACHMODE_H) $(OBSTACK_H) $(BASIC_BLOCK_H) $(FUNCTION_H)\n RESOURCE_H = resource.h hard-reg-set.h\n SCHED_INT_H = sched-int.h $(INSN_ATTR_H) $(BASIC_BLOCK_H) $(RTL_H)\n INTEGRATE_H = integrate.h varray.h\n@@ -1699,7 +1699,7 @@ tree-vrp.o : tree-vrp.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n tree-cfg.o : tree-cfg.c $(TREE_FLOW_H) $(CONFIG_H) $(SYSTEM_H) \\\n    $(RTL_H) $(TREE_H) $(TM_P_H) $(EXPR_H) $(GGC_H) $(FLAGS_H) output.h \\\n    diagnostic.h errors.h function.h $(TIMEVAR_H) $(TM_H) coretypes.h \\\n-   $(TREE_DUMP_H) except.h langhooks.h $(CFGLOOP_H) gt-tree-cfg.h tree-pass.h \\\n+   $(TREE_DUMP_H) except.h langhooks.h $(CFGLOOP_H) tree-pass.h \\\n    $(CFGLAYOUT_H)\n tree-tailcall.o : tree-tailcall.c $(TREE_FLOW_H) $(CONFIG_H) $(SYSTEM_H) \\\n    $(RTL_H) $(TREE_H) $(TM_P_H) function.h $(TM_H) coretypes.h \\\n@@ -2492,7 +2492,7 @@ gt-c-pragma.h gtype-c.h gt-cfglayout.h \\\n gt-tree-mudflap.h gt-tree-complex.h \\\n gt-tree-eh.h \\\n gt-tree-ssanames.h gt-tree-iterator.h gt-gimplify.h \\\n-gt-tree-phinodes.h gt-tree-cfg.h gt-tree-nested.h \\\n+gt-tree-phinodes.h gt-tree-nested.h \\\n gt-tree-ssa-operands.h gt-tree-ssa-propagate.h \\\n gt-stringpool.h : s-gtype ; @true\n "}, {"sha": "965c3226562b6847db4dd600bba7e6d44a86633f", "filename": "gcc/basic-block.h", "status": "modified", "additions": 80, "deletions": 38, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/997de8ed6b50b6e24573e6bf562f2845b1660088/gcc%2Fbasic-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/997de8ed6b50b6e24573e6bf562f2845b1660088/gcc%2Fbasic-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbasic-block.h?ref=997de8ed6b50b6e24573e6bf562f2845b1660088", "patch": "@@ -30,6 +30,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"predict.h\"\n #include \"vec.h\"\n #include \"errors.h\"\n+#include \"function.h\"\n \n /* Head of register set linked list.  */\n typedef bitmap_head regset_head;\n@@ -242,7 +243,7 @@ struct basic_block_def GTY((chain_next (\"%h.next_bb\"), chain_prev (\"%h.prev_bb\")\n   struct basic_block_def *next_bb;\n \n   /* The data used by basic block copying and reordering functions.  */\n-  struct reorder_block_def * GTY ((skip (\"\"))) rbi;\n+  struct reorder_block_def * rbi;\n \n   /* Annotations used at the tree level.  */\n   struct bb_ann_d *tree_annotations;\n@@ -261,27 +262,38 @@ struct basic_block_def GTY((chain_next (\"%h.next_bb\"), chain_prev (\"%h.prev_bb\")\n \n   /* Various flags.  See BB_* below.  */\n   int flags;\n+\n+  /* Which section block belongs in, when partitioning basic blocks.  */\n+  int partition;\n };\n \n typedef struct basic_block_def *basic_block;\n \n /* Structure to hold information about the blocks during reordering and\n-   copying.  */\n+   copying.  Needs to be put on a diet.  */\n \n-typedef struct reorder_block_def\n+struct reorder_block_def GTY(())\n {\n   rtx header;\n   rtx footer;\n+\n   basic_block next;\n-  basic_block original;\n-  /* Used by loop copying.  */\n-  basic_block copy;\n+\n+  /* These pointers may be unreliable as the first is only used for\n+     debugging (and should probably be removed, and the second is only\n+     used by copying.  The basic blocks pointed to may be removed and\n+     that leaves these pointers pointing to garbage.  */\n+  basic_block GTY ((skip (\"\"))) original;\n+  basic_block GTY ((skip (\"\"))) copy;\n+\n   int duplicated;\n   int copy_number;\n \n-  /* These fields are used by bb-reorder pass.  */\n+  /* This field is used by the bb-reorder and tracer passes.  */\n   int visited;\n-} *reorder_block_def_p;\n+};\n+\n+typedef struct reorder_block_def *reorder_block_def;\n \n #define BB_FREQ_MAX 10000\n \n@@ -338,45 +350,81 @@ enum\n #define BB_COPY_PARTITION(dstbb, srcbb) \\\n   BB_SET_PARTITION (dstbb, BB_PARTITION (srcbb))\n \n-/* Number of basic blocks in the current function.  */\n+/* A structure to group all the per-function control flow graph data.\n+   The x_* prefixing is necessary because otherwise references to the\n+   fields of this struct are interpreted as the defines for backward\n+   source compatibility following the definition of this struct.  */\n+struct control_flow_graph GTY(())\n+{\n+  /* Block pointers for the exit and entry of a function.\n+     These are always the head and tail of the basic block list.  */\n+  basic_block x_entry_block_ptr;\n+  basic_block x_exit_block_ptr;\n+\n+  /* Index by basic block number, get basic block struct info.  */\n+  varray_type x_basic_block_info;\n+\n+  /* Number of basic blocks in this flow graph.  */\n+  int x_n_basic_blocks;\n \n-extern int n_basic_blocks;\n+  /* Number of edges in this flow graph.  */\n+  int x_n_edges;\n \n-/* First free basic block number.  */\n+  /* The first free basic block number.  */\n+  int x_last_basic_block;\n \n-extern int last_basic_block;\n+  /* Mapping of labels to their associated blocks.  At present\n+     only used for the tree CFG.  */\n+  varray_type x_label_to_block_map;\n \n-/* Number of edges in the current function.  */\n+  enum profile_status {\n+    PROFILE_ABSENT,\n+    PROFILE_GUESSED,\n+    PROFILE_READ\n+  } x_profile_status;\n+};\n \n-extern int n_edges;\n+/* Defines for accessing the fields of the CFG structure for function FN.  */\n+#define ENTRY_BLOCK_PTR_FOR_FUNCTION(FN)     ((FN)->cfg->x_entry_block_ptr)\n+#define EXIT_BLOCK_PTR_FOR_FUNCTION(FN)\t     ((FN)->cfg->x_exit_block_ptr)\n+#define basic_block_info_for_function(FN)    ((FN)->cfg->x_basic_block_info)\n+#define n_basic_blocks_for_function(FN)\t     ((FN)->cfg->x_n_basic_blocks)\n+#define n_edges_for_function(FN)\t     ((FN)->cfg->x_n_edges)\n+#define last_basic_block_for_function(FN)    ((FN)->cfg->x_last_basic_block)\n+#define label_to_block_map_for_function(FN)  ((FN)->cfg->x_label_to_block_map)\n+\n+#define BASIC_BLOCK_FOR_FUNCTION(FN,N) \\\n+  (VARRAY_BB (basic_block_info_for_function(FN), (N)))\n+\n+/* Defines for texual backward source compatibility.  */\n+#define ENTRY_BLOCK_PTR\t\t(cfun->cfg->x_entry_block_ptr)\n+#define EXIT_BLOCK_PTR\t\t(cfun->cfg->x_exit_block_ptr)\n+#define basic_block_info\t(cfun->cfg->x_basic_block_info)\n+#define n_basic_blocks\t\t(cfun->cfg->x_n_basic_blocks)\n+#define n_edges\t\t\t(cfun->cfg->x_n_edges)\n+#define last_basic_block\t(cfun->cfg->x_last_basic_block)\n+#define label_to_block_map\t(cfun->cfg->x_label_to_block_map)\n+#define profile_status\t\t(cfun->cfg->x_profile_status)\n+\n+#define BASIC_BLOCK(N)\t\t(VARRAY_BB (basic_block_info, (N)))\n \n /* TRUE if we should re-run loop discovery after threading jumps, FALSE\n    otherwise.  */\n extern bool rediscover_loops_after_threading;\n \n-/* Signalize the status of profile information in the CFG.  */\n-extern enum profile_status\n-{\n-  PROFILE_ABSENT,\n-  PROFILE_GUESSED,\n-  PROFILE_READ\n-} profile_status;\n-\n-/* Index by basic block number, get basic block struct info.  */\n-\n-extern GTY(()) varray_type basic_block_info;\n-\n-#define BASIC_BLOCK(N)  (VARRAY_BB (basic_block_info, (N)))\n-\n /* For iterating over basic blocks.  */\n #define FOR_BB_BETWEEN(BB, FROM, TO, DIR) \\\n   for (BB = FROM; BB != TO; BB = BB->DIR)\n \n-#define FOR_EACH_BB(BB) \\\n-  FOR_BB_BETWEEN (BB, ENTRY_BLOCK_PTR->next_bb, EXIT_BLOCK_PTR, next_bb)\n+#define FOR_EACH_BB_FN(BB, FN) \\\n+  FOR_BB_BETWEEN (BB, (FN)->cfg->x_entry_block_ptr->next_bb, (FN)->cfg->x_exit_block_ptr, next_bb)\n+\n+#define FOR_EACH_BB(BB) FOR_EACH_BB_FN (BB, cfun)\n \n-#define FOR_EACH_BB_REVERSE(BB) \\\n-  FOR_BB_BETWEEN (BB, EXIT_BLOCK_PTR->prev_bb, ENTRY_BLOCK_PTR, prev_bb)\n+#define FOR_EACH_BB_REVERSE_FN(BB, FN) \\\n+  FOR_BB_BETWEEN (BB, (FN)->cfg->x_exit_block_ptr->prev_bb, (FN)->cfg->x_entry_block_ptr, prev_bb)\n+\n+#define FOR_EACH_BB_REVERSE(BB) FOR_EACH_BB_REVERSE_FN(BB, cfun)\n \n /* For iterating over insns in basic block.  */\n #define FOR_BB_INSNS(BB, INSN)\t\t\t\\\n@@ -425,10 +473,6 @@ extern bitmap_obstack reg_obstack;\n /* Special block number not valid for any block.  */\n #define INVALID_BLOCK (-3)\n \n-/* Similarly, block pointers for the edge list.  */\n-extern GTY(()) basic_block ENTRY_BLOCK_PTR;\n-extern GTY(()) basic_block EXIT_BLOCK_PTR;\n-\n #define BLOCK_NUM(INSN)\t      (BLOCK_FOR_INSN (INSN)->index + 0)\n #define set_block_for_insn(INSN, BB)  (BLOCK_FOR_INSN (INSN) = BB)\n \n@@ -870,9 +914,7 @@ extern void duplicate_computed_gotos (void);\n extern void partition_hot_cold_basic_blocks (void);\n \n /* In cfg.c */\n-extern void alloc_rbi_pool (void);\n extern void initialize_bb_rbi (basic_block bb);\n-extern void free_rbi_pool (void);\n \n /* In dominance.c */\n "}, {"sha": "a38cea99c62281f0ff9d44d33fcd62fdfec2c201", "filename": "gcc/cfg.c", "status": "modified", "additions": 4, "deletions": 50, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/997de8ed6b50b6e24573e6bf562f2845b1660088/gcc%2Fcfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/997de8ed6b50b6e24573e6bf562f2845b1660088/gcc%2Fcfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfg.c?ref=997de8ed6b50b6e24573e6bf562f2845b1660088", "patch": "@@ -60,41 +60,16 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"except.h\"\n #include \"toplev.h\"\n #include \"tm_p.h\"\n-#include \"alloc-pool.h\"\n+#include \"obstack.h\"\n #include \"timevar.h\"\n #include \"ggc.h\"\n \n /* The obstack on which the flow graph components are allocated.  */\n \n struct bitmap_obstack reg_obstack;\n \n-/* Number of basic blocks in the current function.  */\n-\n-int n_basic_blocks;\n-\n-/* First free basic block number.  */\n-\n-int last_basic_block;\n-\n-/* Number of edges in the current function.  */\n-\n-int n_edges;\n-\n-/* The basic block array.  */\n-\n-varray_type basic_block_info;\n-\n-/* The special entry and exit blocks.  */\n-basic_block ENTRY_BLOCK_PTR, EXIT_BLOCK_PTR;\n-\n-/* Memory alloc pool for bb member rbi.  */\n-static alloc_pool rbi_pool;\n-\n void debug_flow_info (void);\n static void free_edge (edge);\n-\n-/* Indicate the presence of the profile.  */\n-enum profile_status profile_status;\n \f\n #define RDIV(X,Y) (((X) + (Y) / 2) / (Y))\n \n@@ -103,11 +78,10 @@ enum profile_status profile_status;\n void\n init_flow (void)\n {\n-  n_edges = 0;\n \n-  ENTRY_BLOCK_PTR = ggc_alloc_cleared (sizeof (*ENTRY_BLOCK_PTR));\n+  ENTRY_BLOCK_PTR = ggc_alloc_cleared (sizeof (struct basic_block_def));\n   ENTRY_BLOCK_PTR->index = ENTRY_BLOCK;\n-  EXIT_BLOCK_PTR = ggc_alloc_cleared (sizeof (*EXIT_BLOCK_PTR));\n+  EXIT_BLOCK_PTR = ggc_alloc_cleared (sizeof (struct basic_block_def));\n   EXIT_BLOCK_PTR->index = EXIT_BLOCK;\n   ENTRY_BLOCK_PTR->next_bb = EXIT_BLOCK_PTR;\n   EXIT_BLOCK_PTR->prev_bb = ENTRY_BLOCK_PTR;\n@@ -158,33 +132,14 @@ alloc_block (void)\n   return bb;\n }\n \n-/* Create memory pool for rbi_pool.  */\n-\n-void\n-alloc_rbi_pool (void)\n-{\n-  rbi_pool = create_alloc_pool (\"rbi pool\", \n-\t\t\t\tsizeof (struct reorder_block_def),\n-\t\t\t\tn_basic_blocks + 2);\n-}\n-\n-/* Free rbi_pool.  */\n-\n-void\n-free_rbi_pool (void)\n-{\n-  free_alloc_pool (rbi_pool);\n-}\n-\n /* Initialize rbi (the structure containing data used by basic block\n    duplication and reordering) for the given basic block.  */\n \n void\n initialize_bb_rbi (basic_block bb)\n {\n   gcc_assert (!bb->rbi);\n-  bb->rbi = pool_alloc (rbi_pool);\n-  memset (bb->rbi, 0, sizeof (struct reorder_block_def));\n+  bb->rbi = ggc_alloc_cleared (sizeof (struct reorder_block_def));\n }\n \n /* Link block B to chain after AFTER.  */\n@@ -522,7 +477,6 @@ dump_flow_info (FILE *file)\n   /* There are no pseudo registers after reload.  Don't dump them.  */\n   if (reg_n_info && !reload_completed)\n     {\n-      int max_regno = max_reg_num ();\n       fprintf (file, \"%d registers.\\n\", max_regno);\n       for (i = FIRST_PSEUDO_REGISTER; i < max_regno; i++)\n \tif (REG_N_REFS (i))"}, {"sha": "e7df2aeece6165d78b9ee32a51a5a824d27e42d3", "filename": "gcc/cfgcleanup.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/997de8ed6b50b6e24573e6bf562f2845b1660088/gcc%2Fcfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/997de8ed6b50b6e24573e6bf562f2845b1660088/gcc%2Fcfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgcleanup.c?ref=997de8ed6b50b6e24573e6bf562f2845b1660088", "patch": "@@ -536,7 +536,7 @@ try_forward_edges (int mode, basic_block b)\n \t     For fallthru forwarders, the LOOP_BEG note must appear between\n \t     the header of block and CODE_LABEL of the loop, for non forwarders\n \t     it must appear before the JUMP_INSN.  */\n-\t  if ((mode & CLEANUP_PRE_LOOP) && optimize)\n+\t  if ((mode & CLEANUP_PRE_LOOP) && optimize && flag_loop_optimize)\n \t    {\n \t      rtx insn = (EDGE_SUCC (target, 0)->flags & EDGE_FALLTHRU\n \t\t\t  ? BB_HEAD (target) : prev_nonnote_insn (BB_END (target)));"}, {"sha": "d71f0114a0ffe3a0acc3e26ea40ae40137da759a", "filename": "gcc/cfglayout.c", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/997de8ed6b50b6e24573e6bf562f2845b1660088/gcc%2Fcfglayout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/997de8ed6b50b6e24573e6bf562f2845b1660088/gcc%2Fcfglayout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfglayout.c?ref=997de8ed6b50b6e24573e6bf562f2845b1660088", "patch": "@@ -1097,10 +1097,6 @@ cfg_layout_initialize (unsigned int flags)\n {\n   basic_block bb;\n \n-  /* Our algorithm depends on fact that there are no dead jumptables\n-     around the code.  */\n-  alloc_rbi_pool ();\n-\n   FOR_BB_BETWEEN (bb, ENTRY_BLOCK_PTR, NULL, next_bb)\n     initialize_bb_rbi (bb);\n \n@@ -1162,8 +1158,6 @@ cfg_layout_finalize (void)\n #ifdef ENABLE_CHECKING\n   verify_insn_chain ();\n #endif\n-  \n-  free_rbi_pool ();\n   FOR_BB_BETWEEN (bb, ENTRY_BLOCK_PTR, NULL, next_bb)\n     bb->rbi = NULL;\n "}, {"sha": "ca788af37af2e6575d36ff77e8b24c338de76616", "filename": "gcc/cfgloopanal.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/997de8ed6b50b6e24573e6bf562f2845b1660088/gcc%2Fcfgloopanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/997de8ed6b50b6e24573e6bf562f2845b1660088/gcc%2Fcfgloopanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloopanal.c?ref=997de8ed6b50b6e24573e6bf562f2845b1660088", "patch": "@@ -419,7 +419,7 @@ expected_loop_iterations (const struct loop *loop)\n   edge e;\n   edge_iterator ei;\n \n-  if (loop->header->count)\n+  if (loop->latch->count || loop->header->count)\n     {\n       gcov_type count_in, count_latch, expected;\n "}, {"sha": "0f8d5ebff7f26ae113210528de1d0c116c7bcc4e", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/997de8ed6b50b6e24573e6bf562f2845b1660088/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/997de8ed6b50b6e24573e6bf562f2845b1660088/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=997de8ed6b50b6e24573e6bf562f2845b1660088", "patch": "@@ -2652,6 +2652,9 @@ cfg_layout_delete_block (basic_block bb)\n     to = &bb->next_bb->rbi->header;\n   else\n     to = &cfg_layout_function_footer;\n+\n+  bb->rbi = NULL;\n+\n   rtl_delete_block (bb);\n \n   if (prev)"}, {"sha": "2c7e84fbe6b86998dbdfa5d617075c4425efda67", "filename": "gcc/flow.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/997de8ed6b50b6e24573e6bf562f2845b1660088/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/997de8ed6b50b6e24573e6bf562f2845b1660088/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=997de8ed6b50b6e24573e6bf562f2845b1660088", "patch": "@@ -760,6 +760,9 @@ free_basic_block_vars (void)\n     }\n   n_basic_blocks = 0;\n   last_basic_block = 0;\n+  n_edges = 0;\n+\n+  label_to_block_map = NULL;\n \n   ENTRY_BLOCK_PTR->aux = NULL;\n   ENTRY_BLOCK_PTR->global_live_at_end = NULL;"}, {"sha": "6d8eb829cb1b1fcb3bb6d5285c025df4cce9c215", "filename": "gcc/function.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/997de8ed6b50b6e24573e6bf562f2845b1660088/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/997de8ed6b50b6e24573e6bf562f2845b1660088/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=997de8ed6b50b6e24573e6bf562f2845b1660088", "patch": "@@ -317,6 +317,7 @@ free_after_compilation (struct function *f)\n   f->emit = NULL;\n   f->varasm = NULL;\n   f->machine = NULL;\n+  f->cfg = NULL;\n \n   f->x_avail_temp_slots = NULL;\n   f->x_used_temp_slots = NULL;\n@@ -3908,6 +3909,9 @@ allocate_struct_function (tree fndecl)\n   tree fntype = fndecl ? TREE_TYPE (fndecl) : NULL_TREE;\n \n   cfun = ggc_alloc_cleared (sizeof (struct function));\n+  cfun->cfg = ggc_alloc_cleared (sizeof (struct control_flow_graph));\n+\n+  n_edges = 0;\n \n   cfun->stack_alignment_needed = STACK_BOUNDARY;\n   cfun->preferred_stack_boundary = STACK_BOUNDARY;"}, {"sha": "f12452d2fdcf22caa68bea8ccd4a1c3cd0fe56aa", "filename": "gcc/function.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/997de8ed6b50b6e24573e6bf562f2845b1660088/gcc%2Ffunction.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/997de8ed6b50b6e24573e6bf562f2845b1660088/gcc%2Ffunction.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.h?ref=997de8ed6b50b6e24573e6bf562f2845b1660088", "patch": "@@ -166,6 +166,9 @@ struct function GTY(())\n   struct emit_status *emit;\n   struct varasm_status *varasm;\n \n+  /* The control flow graph for this function.  */\n+  struct control_flow_graph *cfg;\n+\n   /* For tree-optimize.c.  */\n \n   /* Saved tree and arguments during tree optimization.  Used later for"}, {"sha": "8ae8b3127cc48af5f725925d802314d4bed6781b", "filename": "gcc/passes.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/997de8ed6b50b6e24573e6bf562f2845b1660088/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/997de8ed6b50b6e24573e6bf562f2845b1660088/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=997de8ed6b50b6e24573e6bf562f2845b1660088", "patch": "@@ -78,7 +78,6 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"opts.h\"\n #include \"coverage.h\"\n #include \"value-prof.h\"\n-#include \"alloc-pool.h\"\n #include \"tree-pass.h\"\n #include \"tree-dump.h\"\n "}, {"sha": "a9a9fdcab738e6928591c2f0d16d3e2fb4c36961", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/997de8ed6b50b6e24573e6bf562f2845b1660088/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/997de8ed6b50b6e24573e6bf562f2845b1660088/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=997de8ed6b50b6e24573e6bf562f2845b1660088", "patch": "@@ -54,10 +54,6 @@ Boston, MA 02111-1307, USA.  */\n /* Initial capacity for the basic block array.  */\n static const int initial_cfg_capacity = 20;\n \n-/* Mapping of labels to their associated blocks.  This can greatly speed up\n-   building of the CFG in code with lots of gotos.  */\n-static GTY(()) varray_type label_to_block_map;\n-\n /* This hash table allows us to efficiently lookup all CASE_LABEL_EXPRs\n    which use a particular edge.  The CASE_LABEL_EXPRs are chained together\n    via their TREE_CHAIN field, which we clear after we're done with the\n@@ -150,9 +146,6 @@ build_tree_cfg (tree *tp)\n   /* Register specific tree functions.  */\n   tree_register_cfg_hooks ();\n \n-  /* Initialize rbi_pool.  */\n-  alloc_rbi_pool ();\n-\n   /* Initialize the basic block array.  */\n   init_flow ();\n   profile_status = PROFILE_ABSENT;\n@@ -812,7 +805,7 @@ make_switch_expr_edges (basic_block bb)\n /* Return the basic block holding label DEST.  */\n \n basic_block\n-label_to_block (tree dest)\n+label_to_block_fn (struct function *ifun, tree dest)\n {\n   int uid = LABEL_DECL_UID (dest);\n \n@@ -828,10 +821,9 @@ label_to_block (tree dest)\n       bsi_insert_before (&bsi, stmt, BSI_NEW_STMT);\n       uid = LABEL_DECL_UID (dest);\n     }\n-  return VARRAY_BB (label_to_block_map, uid);\n+  return VARRAY_BB (ifun->cfg->x_label_to_block_map, uid);\n }\n \n-\n /* Create edges for a goto statement at block BB.  */\n \n static void\n@@ -2898,7 +2890,6 @@ delete_tree_cfg_annotations (void)\n     free_blocks_annotations ();\n \n   label_to_block_map = NULL;\n-  free_rbi_pool ();\n   FOR_EACH_BB (bb)\n     bb->rbi = NULL;\n }\n@@ -6052,5 +6043,3 @@ struct tree_opt_pass pass_warn_function_return =\n   0,\t\t\t\t\t/* todo_flags_finish */\n   0\t\t\t\t\t/* letter */\n };\n-\n-#include \"gt-tree-cfg.h\""}, {"sha": "961ddde50c6d1d96f54de49f571cf9f3e98fc09d", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/997de8ed6b50b6e24573e6bf562f2845b1660088/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/997de8ed6b50b6e24573e6bf562f2845b1660088/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=997de8ed6b50b6e24573e6bf562f2845b1660088", "patch": "@@ -523,7 +523,8 @@ extern tree *last_stmt_ptr (basic_block);\n extern tree last_and_only_stmt (basic_block);\n extern edge find_taken_edge (basic_block, tree);\n extern void cfg_remove_useless_stmts (void);\n-extern basic_block label_to_block (tree);\n+extern basic_block label_to_block_fn (struct function *, tree);\n+#define label_to_block(t) (label_to_block_fn (cfun, t))\n extern void bsi_insert_on_edge (edge, tree);\n extern basic_block bsi_insert_on_edge_immediate (edge, tree);\n extern void bsi_commit_one_edge_insert (edge, basic_block *);"}]}