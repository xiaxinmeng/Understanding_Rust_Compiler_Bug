{"sha": "22243c12a3f738ff003bef6ec8cdbfba7ba273fd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjIyNDNjMTJhM2Y3MzhmZjAwM2JlZjZlYzhjZGJmYmE3YmEyNzNmZA==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2012-01-30T10:26:25Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-01-30T10:26:25Z"}, "message": "einfo.ads, [...]: Minor reformatting.\n\n2012-01-30  Robert Dewar  <dewar@adacore.com>\n\n\t* einfo.ads, sem_prag.adb, sem_attr.adb, aspects.ads,\n\tsem_cat.adb, sem_aggr.adb, exp_aggr.adb: Minor reformatting.\n\nFrom-SVN: r183699", "tree": {"sha": "7de135d51215afe7f9ff2ff1e4da038b28c6a571", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7de135d51215afe7f9ff2ff1e4da038b28c6a571"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/22243c12a3f738ff003bef6ec8cdbfba7ba273fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22243c12a3f738ff003bef6ec8cdbfba7ba273fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22243c12a3f738ff003bef6ec8cdbfba7ba273fd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22243c12a3f738ff003bef6ec8cdbfba7ba273fd/comments", "author": null, "committer": null, "parents": [{"sha": "25081892c432b0234fd29bdbf970c89f2083eed5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25081892c432b0234fd29bdbf970c89f2083eed5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25081892c432b0234fd29bdbf970c89f2083eed5"}], "stats": {"total": 196, "additions": 97, "deletions": 99}, "files": [{"sha": "829ae3bba95be1a582740c4be281ebacdfdcff65", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22243c12a3f738ff003bef6ec8cdbfba7ba273fd/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22243c12a3f738ff003bef6ec8cdbfba7ba273fd/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=22243c12a3f738ff003bef6ec8cdbfba7ba273fd", "patch": "@@ -1,3 +1,8 @@\n+2012-01-30  Robert Dewar  <dewar@adacore.com>\n+\n+\t* einfo.ads, sem_prag.adb, sem_attr.adb, aspects.ads,\n+\tsem_cat.adb, sem_aggr.adb, exp_aggr.adb: Minor reformatting.\n+\n 2012-01-30  Robert Dewar  <dewar@adacore.com>\n \n \t* a-cdlili.adb, a-cidlli.adb, a-cbdlli.adb: Minor reformatting."}, {"sha": "187b6451a78b4a20eb07515dfb8aba2f4a92ea0d", "filename": "gcc/ada/aspects.ads", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22243c12a3f738ff003bef6ec8cdbfba7ba273fd/gcc%2Fada%2Faspects.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22243c12a3f738ff003bef6ec8cdbfba7ba273fd/gcc%2Fada%2Faspects.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Faspects.ads?ref=22243c12a3f738ff003bef6ec8cdbfba7ba273fd", "patch": "@@ -301,7 +301,6 @@ package Aspects is\n    -----------------------------------------\n \n    --  Table linking aspect names and id's\n-   --  Shouldn't this be automatically generated in Snames???\n \n    Aspect_Names : constant array (Aspect_Id) of Name_Id := (\n      No_Aspect                           => No_Name,"}, {"sha": "d89b15f7fd80fa625c05b3ac963b17e87c5b5fe3", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22243c12a3f738ff003bef6ec8cdbfba7ba273fd/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22243c12a3f738ff003bef6ec8cdbfba7ba273fd/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=22243c12a3f738ff003bef6ec8cdbfba7ba273fd", "patch": "@@ -2272,7 +2272,7 @@ package Einfo is\n --    Is_Generic_Type (Flag13)\n --       Present in all entities. Set for types which are generic formal types.\n --       Such types have an Ekind that corresponds to their classification, so\n---       the Ekind cannot be used to identify generic types.\n+--       the Ekind cannot be used to identify generic formal types.\n \n --    Is_Generic_Unit (synthesized)\n --       Applies to all entities. Yields True for a generic unit (generic\n@@ -2721,8 +2721,8 @@ package Einfo is\n --       Present in all entities. Set in E_Package and E_Generic_Package\n --       entities to which a pragma Remote_Types is applied, and also on\n --       entities declared in the visible part of the spec of such a package.\n---       Also set for generic formal types to which pragma Remote_Access_Type\n---       applies.\n+--       Also set for types which are generic formal types to which the\n+--       pragma Remote_Access_Type applies.\n \n --    Is_Renaming_Of_Object (Flag112)\n --       Present in all entities, set only for a variable or constant for"}, {"sha": "849a7e9227bedf33c8fe7a35474eb2a936efc14b", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22243c12a3f738ff003bef6ec8cdbfba7ba273fd/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22243c12a3f738ff003bef6ec8cdbfba7ba273fd/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=22243c12a3f738ff003bef6ec8cdbfba7ba273fd", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -244,8 +244,8 @@ package body Exp_Aggr is\n       Target : Node_Id) return List_Id;\n    --  This routine implements top-down expansion of nested aggregates. In\n    --  doing so, it avoids the generation of temporaries at each level. N is a\n-   --  nested (record or array) aggregate that has been marked with 'Delay_\n-   --  Expansion'. Typ is the expected type of the aggregate. Target is a\n+   --  nested (record or array) aggregate that has been marked with Expansion_\n+   --  Delayed. Typ is the expected type of the aggregate. Target is a\n    --  (duplicable) expression that will hold the result of the aggregate\n    --  expansion.\n \n@@ -5297,7 +5297,7 @@ package body Exp_Aggr is\n \n       --  Ada 2005 (AI-318-2): We need to convert to assignments if components\n       --  are build-in-place function calls. The assignments will each turn\n-      --  into a build-in-place function call.  If components are all static,\n+      --  into a build-in-place function call. If components are all static,\n       --  we can pass the aggregate to the backend regardless of limitedness.\n \n       --  Extension aggregates, aggregates in extended return statements, and\n@@ -5547,16 +5547,16 @@ package body Exp_Aggr is\n \n          if Is_Tagged_Type (Typ) then\n \n-            --  The tagged case, _parent and _tag component must be created\n+            --  In the tagged case, _parent and _tag component must be created\n \n-            --  Reset null_present unconditionally. tagged records always have\n-            --  at least one field (the tag or the parent)\n+            --  Reset Null_Present unconditionally. Tagged records always have\n+            --  at least one field (the tag or the parent).\n \n             Set_Null_Record_Present (N, False);\n \n             --  When the current aggregate comes from the expansion of an\n             --  extension aggregate, the parent expr is replaced by an\n-            --  aggregate formed by selected components of this expr\n+            --  aggregate formed by selected components of this expr.\n \n             if Present (Parent_Expr)\n               and then Is_Empty_List (Comps)\n@@ -5596,12 +5596,14 @@ package body Exp_Aggr is\n \n             --  Compute the value for the Tag now, if the type is a root it\n             --  will be included in the aggregate right away, otherwise it will\n-            --  be propagated to the parent aggregate\n+            --  be propagated to the parent aggregate.\n \n             if Present (Orig_Tag) then\n                Tag_Value := Orig_Tag;\n+\n             elsif not Tagged_Type_Expansion then\n                Tag_Value := Empty;\n+\n             else\n                Tag_Value :=\n                  New_Occurrence_Of\n@@ -5657,8 +5659,8 @@ package body Exp_Aggr is\n \n                   --  Expand recursively the parent propagating the right Tag\n \n-                  Expand_Record_Aggregate (\n-                    Parent_Aggr, Tag_Value, Parent_Expr);\n+                  Expand_Record_Aggregate\n+                    (Parent_Aggr, Tag_Value, Parent_Expr);\n                end;\n \n             --  For a root type, the tag component is added (unless compiling"}, {"sha": "920a42a0185740f5c326867fc6d5e29b5eedec66", "filename": "gcc/ada/sem_aggr.adb", "status": "modified", "additions": 20, "deletions": 16, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22243c12a3f738ff003bef6ec8cdbfba7ba273fd/gcc%2Fada%2Fsem_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22243c12a3f738ff003bef6ec8cdbfba7ba273fd/gcc%2Fada%2Fsem_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aggr.adb?ref=22243c12a3f738ff003bef6ec8cdbfba7ba273fd", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -3185,14 +3185,18 @@ package body Sem_Aggr is\n          --  dynamic-sized aggregate in the code, something that gigi cannot\n          --  handle.\n \n-         Relocate  : Boolean;\n-         --  Set to True if the resolved Expr node needs to be relocated\n-         --  when attached to the newly created association list. This node\n-         --  need not be relocated if its parent pointer is not set.\n-         --  In fact in this case Expr is the output of a New_Copy_Tree call.\n-         --  if Relocate is True then we have analyzed the expression node\n-         --  in the original aggregate and hence it needs to be relocated\n-         --  when moved over the new association list.\n+         Relocate : Boolean;\n+         --  Set to True if the resolved Expr node needs to be relocated when\n+         --  attached to the newly created association list. This node need not\n+         --  be relocated if its parent pointer is not set. In fact in this\n+         --  case Expr is the output of a New_Copy_Tree call. If Relocate is\n+         --  True then we have analyzed the expression node in the original\n+         --  aggregate and hence it needs to be relocated when moved over to\n+         --  the new association list.\n+\n+         ---------------------------\n+         -- Has_Expansion_Delayed --\n+         ---------------------------\n \n          function Has_Expansion_Delayed (Expr : Node_Id) return Boolean is\n             Kind : constant Node_Kind := Nkind (Expr);\n@@ -3205,7 +3209,7 @@ package body Sem_Aggr is\n                         and then Has_Expansion_Delayed (Expression (Expr)));\n          end Has_Expansion_Delayed;\n \n-      --  Start of processing for  Resolve_Aggr_Expr\n+      --  Start of processing for Resolve_Aggr_Expr\n \n       begin\n          --  If the type of the component is elementary or the type of the\n@@ -3315,8 +3319,8 @@ package body Sem_Aggr is\n             Set_Raises_Constraint_Error (N);\n          end if;\n \n-         --  If the expression has been marked as requiring a range check,\n-         --  then generate it here.\n+         --  If the expression has been marked as requiring a range check, then\n+         --  generate it here.\n \n          if Do_Range_Check (Expr) then\n             Set_Do_Range_Check (Expr, False);\n@@ -3396,10 +3400,10 @@ package body Sem_Aggr is\n \n       --  If the type has no components, then the aggregate should either\n       --  have \"null record\", or in Ada 2005 it could instead have a single\n-      --  component association given by \"others => <>\". For Ada 95 we flag\n-      --  an error at this point, but for Ada 2005 we proceed with checking\n-      --  the associations below, which will catch the case where it's not\n-      --  an aggregate with \"others => <>\". Note that the legality of a <>\n+      --  component association given by \"others => <>\". For Ada 95 we flag an\n+      --  error at this point, but for Ada 2005 we proceed with checking the\n+      --  associations below, which will catch the case where it's not an\n+      --  aggregate with \"others => <>\". Note that the legality of a <>\n       --  aggregate for a null record type was established by AI05-016.\n \n       elsif No (First_Entity (Typ))"}, {"sha": "a832612009b3a3d6872693f938cec915d9188058", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22243c12a3f738ff003bef6ec8cdbfba7ba273fd/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22243c12a3f738ff003bef6ec8cdbfba7ba273fd/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=22243c12a3f738ff003bef6ec8cdbfba7ba273fd", "patch": "@@ -4638,19 +4638,19 @@ package body Sem_Attr is\n \n          if Is_Remote_Access_To_Class_Wide_Type (Base_Type (P_Type)) then\n \n-            if not Is_Generic_Type (P_Type) then\n-               --  For a real RACW [sub]type, use corresponding stub type\n+            --  For a real RACW [sub]type, use corresponding stub type\n \n+            if not Is_Generic_Type (P_Type) then\n                Rewrite (N,\n                  New_Occurrence_Of\n                    (Corresponding_Stub_Type (Base_Type (P_Type)), Loc));\n \n-            else\n-               --  For a generic type (that has been marked as an RACW using\n-               --  the Remote_Access_Type aspect or pragma), use a generic RACW\n-               --  stub type. Note that if the actual is not a remote access\n-               --  type, the instantiation will fail.\n+            --  For a generic type (that has been marked as an RACW using the\n+            --  Remote_Access_Type aspect or pragma), use a generic RACW stub\n+            --  type. Note that if the actual is not a remote access type, the\n+            --  instantiation will fail.\n \n+            else\n                --  Note: we go to the underlying type here because the view\n                --  returned by RTE (RE_RACW_Stub_Type) might be incomplete.\n "}, {"sha": "be594cbcd0323b5b33fa54777bc88e797351fbbb", "filename": "gcc/ada/sem_cat.adb", "status": "modified", "additions": 48, "deletions": 61, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22243c12a3f738ff003bef6ec8cdbfba7ba273fd/gcc%2Fada%2Fsem_cat.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22243c12a3f738ff003bef6ec8cdbfba7ba273fd/gcc%2Fada%2Fsem_cat.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_cat.adb?ref=22243c12a3f738ff003bef6ec8cdbfba7ba273fd", "patch": "@@ -161,7 +161,7 @@ package body Sem_Cat is\n \n          if Is_Pure (E)\n            and then not\n-             (Has_Pragma_Pure_Function (E) and not Has_Pragma_Pure (E))\n+            (Has_Pragma_Pure_Function (E) and not Has_Pragma_Pure (E))\n          then\n             return Pure;\n \n@@ -214,7 +214,7 @@ package body Sem_Cat is\n          --  to WITH anything in the package body, per (RM E.2(5)).\n \n          if (Unit_Category = Remote_Types\n-               or else Unit_Category = Remote_Call_Interface)\n+              or else Unit_Category = Remote_Call_Interface)\n            and then In_Package_Body (Unit_Entity)\n          then\n             null;\n@@ -409,10 +409,10 @@ package body Sem_Cat is\n    function Has_Read_Write_Attributes (E : Entity_Id) return Boolean is\n    begin\n       return True\n-        and then Has_Stream_Attribute_Definition (E,\n-                   TSS_Stream_Read,  At_Any_Place => True)\n-        and then Has_Stream_Attribute_Definition (E,\n-                   TSS_Stream_Write, At_Any_Place => True);\n+        and then Has_Stream_Attribute_Definition\n+                   (E, TSS_Stream_Read,  At_Any_Place => True)\n+        and then Has_Stream_Attribute_Definition\n+                   (E, TSS_Stream_Write, At_Any_Place => True);\n    end Has_Read_Write_Attributes;\n \n    -------------------------------------\n@@ -500,7 +500,7 @@ package body Sem_Cat is\n                     or else Is_Shared_Passive (Unit_Entity)\n                     or else\n                       ((Is_Remote_Types (Unit_Entity)\n-                               or else Is_Remote_Call_Interface (Unit_Entity))\n+                          or else Is_Remote_Call_Interface (Unit_Entity))\n                          and then Ekind (Unit_Entity) = E_Package\n                          and then Unit_Kind /= N_Package_Body\n                          and then not In_Package_Body (Unit_Entity)\n@@ -533,8 +533,8 @@ package body Sem_Cat is\n         and then Is_Package_Or_Generic_Package (Unit_Entity)\n         and then Unit_Kind /= N_Package_Body\n         and then List_Containing (N) =\n-                  Visible_Declarations\n-                    (Specification (Unit_Declaration_Node (Unit_Entity)))\n+                   Visible_Declarations\n+                     (Specification (Unit_Declaration_Node (Unit_Entity)))\n         and then not In_Package_Body (Unit_Entity)\n         and then not In_Instance;\n \n@@ -695,9 +695,7 @@ package body Sem_Cat is\n          PN : Node_Id;\n \n       begin\n-         if Is_Child_Unit (S)\n-           and then Is_Generic_Instance (S)\n-         then\n+         if Is_Child_Unit (S) and then Is_Generic_Instance (S) then\n             Set_Parents (True);\n          end if;\n \n@@ -722,9 +720,7 @@ package body Sem_Cat is\n             Next (PN);\n          end loop;\n \n-         if Is_Child_Unit (S)\n-           and then Is_Generic_Instance (S)\n-         then\n+         if Is_Child_Unit (S) and then Is_Generic_Instance (S) then\n             Set_Parents (False);\n          end if;\n       end;\n@@ -739,24 +735,23 @@ package body Sem_Cat is\n       Specification : Node_Id := Empty;\n \n    begin\n-      Set_Is_Pure (E,\n-        Is_Pure (Scop) and then Is_Library_Level_Entity (E));\n+      Set_Is_Pure\n+        (E, Is_Pure (Scop) and then Is_Library_Level_Entity (E));\n \n       if not Is_Remote_Call_Interface (E) then\n          if Ekind (E) in Subprogram_Kind then\n             Declaration := Unit_Declaration_Node (E);\n \n-            if Nkind (Declaration) = N_Subprogram_Body\n-                 or else\n-               Nkind (Declaration) = N_Subprogram_Renaming_Declaration\n+            if Nkind_In (Declaration, N_Subprogram_Body,\n+                                      N_Subprogram_Renaming_Declaration)\n             then\n                Specification := Corresponding_Spec (Declaration);\n             end if;\n          end if;\n \n-         --  A subprogram body or renaming-as-body is a remote call\n-         --  interface if it serves as the completion of a subprogram\n-         --  declaration that is a remote call interface.\n+         --  A subprogram body or renaming-as-body is a remote call interface\n+         --  if it serves as the completion of a subprogram declaration that\n+         --  is a remote call interface.\n \n          if Nkind (Specification) in N_Entity then\n             Set_Is_Remote_Call_Interface\n@@ -770,14 +765,14 @@ package body Sem_Cat is\n             Set_Is_Remote_Call_Interface\n               (E, Is_Remote_Call_Interface (Scop)\n                     and then not (In_Private_Part (Scop)\n-                                    or else In_Package_Body (Scop)));\n+                                   or else In_Package_Body (Scop)));\n          end if;\n       end if;\n \n       Set_Is_Remote_Types\n         (E, Is_Remote_Types (Scop)\n               and then not (In_Private_Part (Scop)\n-                              or else In_Package_Body (Scop)));\n+                             or else In_Package_Body (Scop)));\n    end Set_Categorization_From_Scope;\n \n    ------------------------------\n@@ -875,7 +870,7 @@ package body Sem_Cat is\n \n       if Comes_From_Source (T)\n         and then not (In_Package_Body (Scope (T))\n-                        or else In_Private_Part (Scope (T)))\n+                       or else In_Private_Part (Scope (T)))\n       then\n          Set_Is_Remote_Call_Interface\n            (T, Is_Remote_Call_Interface (Scope (T)));\n@@ -956,8 +951,7 @@ package body Sem_Cat is\n       --  Body of RCI unit does not need validation\n \n       if Is_Remote_Call_Interface (E)\n-        and then (Nkind (N) = N_Package_Body\n-                   or else Nkind (N) = N_Subprogram_Body)\n+        and then Nkind_In (N, N_Package_Body, N_Subprogram_Body)\n       then\n          return;\n       end if;\n@@ -973,16 +967,16 @@ package body Sem_Cat is\n          while Present (Item) loop\n             if Nkind (Item) = N_With_Clause\n               and then not (Implicit_With (Item)\n-                              or else Limited_Present (Item)\n+                             or else Limited_Present (Item)\n \n-                              --  Skip if error already posted on the WITH\n-                              --  clause (in which case the Name attribute\n-                              --  may be invalid). In particular, this fixes\n-                              --  the problem of hanging in the presence of a\n-                              --  WITH clause on a child that is an illegal\n-                              --  generic instantiation.\n+                             --  Skip if error already posted on the WITH\n+                             --  clause (in which case the Name attribute\n+                             --  may be invalid). In particular, this fixes\n+                             --  the problem of hanging in the presence of a\n+                             --  WITH clause on a child that is an illegal\n+                             --  generic instantiation.\n \n-                              or else Error_Posted (Item))\n+                             or else Error_Posted (Item))\n             then\n                Entity_Of_Withed := Entity (Name (Item));\n                Check_Categorization_Dependencies\n@@ -1298,9 +1292,7 @@ package body Sem_Cat is\n                PEE : Node_Id;\n \n             begin\n-               if Has_Discriminants (ET)\n-                 and then Present (EE)\n-               then\n+               if Has_Discriminants (ET) and then Present (EE) then\n                   PEE := Parent (EE);\n \n                   if Nkind (PEE) = N_Full_Type_Declaration\n@@ -1425,7 +1417,7 @@ package body Sem_Cat is\n          --  Check that the return type supports external streaming\n \n          elsif No_External_Streaming (Rtyp)\n-                 and then not Error_Posted (Rtyp)\n+           and then not Error_Posted (Rtyp)\n          then\n             Illegal_Remote_Subp (\"return type containing non-remote access \"\n               & \"must have Read and Write attributes\",\n@@ -1671,7 +1663,7 @@ package body Sem_Cat is\n \n       if not Comes_From_Source (T)\n         or else (not In_RCI_Declaration (Parent (T))\n-                   and then not In_RT_Declaration)\n+                  and then not In_RT_Declaration)\n       then\n          return;\n       end if;\n@@ -1791,9 +1783,7 @@ package body Sem_Cat is\n          --  If we have a true dereference that comes from source and that\n          --  is a controlling argument for a dispatching call, accept it.\n \n-         if Is_Actual_Parameter (N)\n-           and then Is_Controlling_Actual (N)\n-         then\n+         if Is_Actual_Parameter (N) and then Is_Controlling_Actual (N) then\n             return;\n          end if;\n \n@@ -1803,8 +1793,7 @@ package body Sem_Cat is\n          --  apply in the case of dereference that is the prefix of a selected\n          --  component, which can be a call given in prefixed form.\n \n-         if (Is_Actual_Parameter (N)\n-              or else PK = N_Selected_Component)\n+         if (Is_Actual_Parameter (N) or else PK = N_Selected_Component)\n            and then not Analyzed (N)\n          then\n             return;\n@@ -1922,9 +1911,8 @@ package body Sem_Cat is\n             --  partition (E.2.2(8)).\n \n             if (Ada_Version < Ada_2005 and then Has_Non_Remote_Access (U_Typ))\n-                 or else\n-               (Stream_Attributes_Available (Typ)\n-                  and then No_External_Streaming (U_Typ))\n+                 or else (Stream_Attributes_Available (Typ)\n+                           and then No_External_Streaming (U_Typ))\n             then\n                if Is_Non_Remote_Access_Type (Typ) then\n                   Error_Msg_N (\"error in non-remote access type\", U_Typ);\n@@ -1958,8 +1946,8 @@ package body Sem_Cat is\n       Direct_Designated_Type : Entity_Id;\n \n       function Has_Entry_Declarations (E : Entity_Id) return Boolean;\n-      --  Return true if the protected type designated by T has\n-      --  entry declarations.\n+      --  Return true if the protected type designated by T has entry\n+      --  declarations.\n \n       ----------------------------\n       -- Has_Entry_Declarations --\n@@ -2134,16 +2122,15 @@ package body Sem_Cat is\n               and then\n                 Enclosing_Lib_Unit_Node (N) /= Enclosing_Lib_Unit_Node (E)\n               and then (Is_Preelaborated (Scope (E))\n-                          or else Is_Pure (Scope (E))\n-                          or else (Present (Renamed_Object (E))\n-                                     and then\n-                                       Is_Entity_Name (Renamed_Object (E))\n-                                     and then\n-                                       (Is_Preelaborated\n-                                         (Scope (Renamed_Object (E)))\n-                                            or else\n-                                              Is_Pure (Scope\n-                                                (Renamed_Object (E))))))\n+                         or else Is_Pure (Scope (E))\n+                         or else (Present (Renamed_Object (E))\n+                                   and then Is_Entity_Name (Renamed_Object (E))\n+                                   and then\n+                                     (Is_Preelaborated\n+                                       (Scope (Renamed_Object (E)))\n+                                         or else\n+                                           Is_Pure (Scope\n+                                             (Renamed_Object (E))))))\n             then\n                null;\n "}, {"sha": "c0e0e582b1fdfc6d3e1b734977f0d0647ee1f5dd", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22243c12a3f738ff003bef6ec8cdbfba7ba273fd/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22243c12a3f738ff003bef6ec8cdbfba7ba273fd/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=22243c12a3f738ff003bef6ec8cdbfba7ba273fd", "patch": "@@ -12904,6 +12904,7 @@ package body Sem_Prag is\n             Check_Arg_Count (1);\n             Check_Optional_Identifier (Arg1, Name_Entity);\n             Check_Arg_Is_Local_Name (Arg1);\n+\n             E := Entity (Get_Pragma_Arg (Arg1));\n \n             if Nkind (Parent (E)) = N_Formal_Type_Declaration"}]}