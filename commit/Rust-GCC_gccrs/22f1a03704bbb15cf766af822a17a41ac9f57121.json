{"sha": "22f1a03704bbb15cf766af822a17a41ac9f57121", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjJmMWEwMzcwNGJiYjE1Y2Y3NjZhZjgyMmExN2E0MWFjOWY1NzEyMQ==", "commit": {"author": {"name": "Tom de Vries", "email": "tom@codesourcery.com", "date": "2017-06-27T15:51:37Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2017-06-27T15:51:37Z"}, "message": "Use secure_getenv for GOMP_DEBUG\n\n2017-06-27  Tom de Vries  <tom@codesourcery.com>\n\n\t* env.c (parse_unsigned_long_1): Factor out of ...\n\t(parse_unsigned_long): ... here.\n\t(parse_int_1): Factor out of ...\n\t(parse_int): ... here.\n\t(parse_int_secure): New function.\n\t(initialize_env): Use parse_int_secure for GOMP_DEBUG.\n\t* secure_getenv.h: Factor out of ...\n\t* plugin/plugin-hsa.c: ... here.\n\t* testsuite/libgomp.oacc-c-c++-common/gomp-debug-env.c: New test.\n\nFrom-SVN: r249694", "tree": {"sha": "e0abf5f9fc8bcbed50120155f56b0f77255f8f87", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e0abf5f9fc8bcbed50120155f56b0f77255f8f87"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/22f1a03704bbb15cf766af822a17a41ac9f57121", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22f1a03704bbb15cf766af822a17a41ac9f57121", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22f1a03704bbb15cf766af822a17a41ac9f57121", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22f1a03704bbb15cf766af822a17a41ac9f57121/comments", "author": null, "committer": null, "parents": [{"sha": "5fee5eca5fe329cfd6c6fc1ae81d4da566a57431", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fee5eca5fe329cfd6c6fc1ae81d4da566a57431", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5fee5eca5fe329cfd6c6fc1ae81d4da566a57431"}], "stats": {"total": 157, "additions": 124, "deletions": 33}, "files": [{"sha": "8a82d4f5aa6ea54f673aa67acbdad1c187d2a04f", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22f1a03704bbb15cf766af822a17a41ac9f57121/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22f1a03704bbb15cf766af822a17a41ac9f57121/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=22f1a03704bbb15cf766af822a17a41ac9f57121", "patch": "@@ -1,3 +1,15 @@\n+2017-06-27  Tom de Vries  <tom@codesourcery.com>\n+\n+\t* env.c (parse_unsigned_long_1): Factor out of ...\n+\t(parse_unsigned_long): ... here.\n+\t(parse_int_1): Factor out of ...\n+\t(parse_int): ... here.\n+\t(parse_int_secure): New function.\n+\t(initialize_env): Use parse_int_secure for GOMP_DEBUG.\n+\t* secure_getenv.h: Factor out of ...\n+\t* plugin/plugin-hsa.c: ... here.\n+\t* testsuite/libgomp.oacc-c-c++-common/gomp-debug-env.c: New test.\n+\n 2017-06-21  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/81130"}, {"sha": "802c73bb4648eb07a8e7277710cc20aed8000cd4", "filename": "libgomp/env.c", "status": "modified", "additions": 37, "deletions": 7, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22f1a03704bbb15cf766af822a17a41ac9f57121/libgomp%2Fenv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22f1a03704bbb15cf766af822a17a41ac9f57121/libgomp%2Fenv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fenv.c?ref=22f1a03704bbb15cf766af822a17a41ac9f57121", "patch": "@@ -26,6 +26,7 @@\n /* This file defines the OpenMP internal control variables and arranges\n    for them to be initialized from environment variables at startup.  */\n \n+#define _GNU_SOURCE\n #include \"libgomp.h\"\n #include \"gomp-constants.h\"\n #include <limits.h>\n@@ -58,6 +59,8 @@\n #endif\n #endif /* LIBGOMP_OFFLOADED_ONLY */\n \n+#include \"secure_getenv.h\"\n+\n struct gomp_task_icv gomp_global_icv = {\n   .nthreads_var = 1,\n   .thread_limit_var = UINT_MAX,\n@@ -171,15 +174,17 @@ parse_schedule (void)\n }\n \n /* Parse an unsigned long environment variable.  Return true if one was\n-   present and it was successfully parsed.  */\n+   present and it was successfully parsed.  If SECURE, use secure_getenv to the\n+   environment variable.  */\n \n static bool\n-parse_unsigned_long (const char *name, unsigned long *pvalue, bool allow_zero)\n+parse_unsigned_long_1 (const char *name, unsigned long *pvalue, bool allow_zero,\n+\t\t       bool secure)\n {\n   char *env, *end;\n   unsigned long value;\n \n-  env = getenv (name);\n+  env = (secure ? secure_getenv (name) : getenv (name));\n   if (env == NULL)\n     return false;\n \n@@ -206,14 +211,23 @@ parse_unsigned_long (const char *name, unsigned long *pvalue, bool allow_zero)\n   return false;\n }\n \n+/* As parse_unsigned_long_1, but always use getenv.  */\n+\n+static bool\n+parse_unsigned_long (const char *name, unsigned long *pvalue, bool allow_zero)\n+{\n+  return parse_unsigned_long_1 (name, pvalue, allow_zero, false);\n+}\n+\n /* Parse a positive int environment variable.  Return true if one was\n-   present and it was successfully parsed.  */\n+   present and it was successfully parsed.  If SECURE, use secure_getenv to the\n+   environment variable.  */\n \n static bool\n-parse_int (const char *name, int *pvalue, bool allow_zero)\n+parse_int_1 (const char *name, int *pvalue, bool allow_zero, bool secure)\n {\n   unsigned long value;\n-  if (!parse_unsigned_long (name, &value, allow_zero))\n+  if (!parse_unsigned_long_1 (name, &value, allow_zero, secure))\n     return false;\n   if (value > INT_MAX)\n     {\n@@ -224,6 +238,22 @@ parse_int (const char *name, int *pvalue, bool allow_zero)\n   return true;\n }\n \n+/* As parse_int_1, but use getenv.  */\n+\n+static bool\n+parse_int (const char *name, int *pvalue, bool allow_zero)\n+{\n+  return parse_int_1 (name, pvalue, allow_zero, false);\n+}\n+\n+/* As parse_int_1, but use getenv_secure.  */\n+\n+static bool\n+parse_int_secure (const char *name, int *pvalue, bool allow_zero)\n+{\n+  return parse_int_1 (name, pvalue, allow_zero, true);\n+}\n+\n /* Parse an unsigned long list environment variable.  Return true if one was\n    present and it was successfully parsed.  */\n \n@@ -1207,7 +1237,7 @@ initialize_env (void)\n       gomp_global_icv.thread_limit_var\n \t= thread_limit_var > INT_MAX ? UINT_MAX : thread_limit_var;\n     }\n-  parse_int (\"GOMP_DEBUG\", &gomp_debug_var, true);\n+  parse_int_secure (\"GOMP_DEBUG\", &gomp_debug_var, true);\n #ifndef HAVE_SYNC_BUILTINS\n   gomp_mutex_init (&gomp_managed_threads_lock);\n #endif"}, {"sha": "adb07acf262b677e2f0e698c600ee9d1bb3d3141", "filename": "libgomp/plugin/plugin-hsa.c", "status": "modified", "additions": 1, "deletions": 26, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22f1a03704bbb15cf766af822a17a41ac9f57121/libgomp%2Fplugin%2Fplugin-hsa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22f1a03704bbb15cf766af822a17a41ac9f57121/libgomp%2Fplugin%2Fplugin-hsa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fplugin%2Fplugin-hsa.c?ref=22f1a03704bbb15cf766af822a17a41ac9f57121", "patch": "@@ -39,32 +39,7 @@\n #include <dlfcn.h>\n #include \"libgomp-plugin.h\"\n #include \"gomp-constants.h\"\n-\n-/* Secure getenv() which returns NULL if running as SUID/SGID.  */\n-#ifndef HAVE_SECURE_GETENV\n-#ifdef HAVE___SECURE_GETENV\n-#define secure_getenv __secure_getenv\n-#elif defined (HAVE_UNISTD_H) && defined(HAVE_GETUID) && defined(HAVE_GETEUID) \\\n-  && defined(HAVE_GETGID) && defined(HAVE_GETEGID)\n-\n-#include <unistd.h>\n-\n-/* Implementation of secure_getenv() for targets where it is not provided but\n-   we have at least means to test real and effective IDs. */\n-\n-static char *\n-secure_getenv (const char *name)\n-{\n-  if ((getuid () == geteuid ()) && (getgid () == getegid ()))\n-    return getenv (name);\n-  else\n-    return NULL;\n-}\n-\n-#else\n-#define secure_getenv getenv\n-#endif\n-#endif\n+#include \"secure-getenv.h\"\n \n /* As an HSA runtime is dlopened, following structure defines function\n    pointers utilized by the HSA plug-in.  */"}, {"sha": "0d3ec5f6868ddb30e1833447f62a0489f0dcb868", "filename": "libgomp/secure_getenv.h", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22f1a03704bbb15cf766af822a17a41ac9f57121/libgomp%2Fsecure_getenv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22f1a03704bbb15cf766af822a17a41ac9f57121/libgomp%2Fsecure_getenv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fsecure_getenv.h?ref=22f1a03704bbb15cf766af822a17a41ac9f57121", "patch": "@@ -0,0 +1,61 @@\n+/* Copyright (C) 2017 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#ifndef _SECURE_GETENV_H\n+#define _SECURE_GETENV_H 1\n+\n+/* Secure getenv() which returns NULL if running as SUID/SGID.  */\n+#ifndef HAVE_SECURE_GETENV\n+#if defined (HAVE_UNISTD_H) && defined (HAVE_GETUID) \\\n+  && defined (HAVE_GETEUID) && defined (HAVE_GETGID) \\\n+  && defined (HAVE_GETEGID)\n+\n+#include <unistd.h>\n+\n+#if SUPPORTS_WEAKREF && defined (HAVE___SECURE_GETENV)\n+static char* weak_secure_getenv (const char*)\n+  __attribute__((__weakref__(\"__secure_getenv\")));\n+#endif\n+\n+/* Implementation of secure_getenv() for targets where it is not provided but\n+   we have at least means to test real and effective IDs.  */\n+\n+static inline char *\n+secure_getenv (const char *name)\n+{\n+#if SUPPORTS_WEAKREF && defined (HAVE___SECURE_GETENV)\n+  if (weak_secure_getenv)\n+    return weak_secure_getenv (name);\n+#endif\n+\n+  if ((getuid () == geteuid ()) && (getgid () == getegid ()))\n+    return getenv (name);\n+  else\n+    return NULL;\n+}\n+#else\n+#define secure_getenv getenv\n+#endif\n+#endif\n+\n+#endif /* _SECURE_GETENV_H.  */"}, {"sha": "3fc3503c3aa1cb240de09650c00045b233d17ca9", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/gomp-debug-env.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22f1a03704bbb15cf766af822a17a41ac9f57121/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fgomp-debug-env.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22f1a03704bbb15cf766af822a17a41ac9f57121/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fgomp-debug-env.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fgomp-debug-env.c?ref=22f1a03704bbb15cf766af822a17a41ac9f57121", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do run } */\n+/* { dg-set-target-env-var GOMP_DEBUG \"1\" } */\n+\n+/* Check that GOMP_DEBUG=1 triggers some output.  */\n+\n+int\n+main (void)\n+{\n+#pragma acc parallel\n+  ;\n+}\n+\n+/* { dg-output \"GOACC_parallel_keyed\" } */"}]}