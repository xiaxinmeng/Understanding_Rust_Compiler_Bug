{"sha": "db4e52814df0022e937794d28cca0d159c76a890", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGI0ZTUyODE0ZGYwMDIyZTkzNzc5NGQyOGNjYTBkMTU5Yzc2YTg5MA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2011-11-29T04:50:13Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2011-11-29T04:50:13Z"}, "message": "rs6000: Streamline boolval output for compare-and-swap.\n\n        * config/rs6000/rs6000.c (rs6000_expand_atomic_compare_and_swap):\n        Handle overlap between retval and oldval.  Always compute boolval\n        from CR0 EQ value.\n\nFrom-SVN: r181796", "tree": {"sha": "ebd00c31c8855b827d6a4da8ba9c5025b767e461", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ebd00c31c8855b827d6a4da8ba9c5025b767e461"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/db4e52814df0022e937794d28cca0d159c76a890", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db4e52814df0022e937794d28cca0d159c76a890", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db4e52814df0022e937794d28cca0d159c76a890", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db4e52814df0022e937794d28cca0d159c76a890/comments", "author": null, "committer": null, "parents": [{"sha": "20bc9eb1b8cd7e8fe9a3685d3183077ae160c821", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20bc9eb1b8cd7e8fe9a3685d3183077ae160c821", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20bc9eb1b8cd7e8fe9a3685d3183077ae160c821"}], "stats": {"total": 31, "additions": 18, "deletions": 13}, "files": [{"sha": "e8204e5dcd67756ed66b96b28ea59802d3ee144a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db4e52814df0022e937794d28cca0d159c76a890/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db4e52814df0022e937794d28cca0d159c76a890/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=db4e52814df0022e937794d28cca0d159c76a890", "patch": "@@ -1,3 +1,9 @@\n+2011-11-28  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/rs6000/rs6000.c (rs6000_expand_atomic_compare_and_swap):\n+\tHandle overlap between retval and oldval.  Always compute boolval\n+\tfrom CR0 EQ value.\n+\n 2011-11-28  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR debug/50317"}, {"sha": "5a33f91d94c4809e7a119191a38bf97c1131521b", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db4e52814df0022e937794d28cca0d159c76a890/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db4e52814df0022e937794d28cca0d159c76a890/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=db4e52814df0022e937794d28cca0d159c76a890", "patch": "@@ -17352,11 +17352,11 @@ rs6000_expand_atomic_compare_and_swap (rtx operands[])\n       retval = gen_reg_rtx (SImode);\n       mode = SImode;\n     }\n+  else if (reg_overlap_mentioned_p (retval, oldval))\n+    oldval = copy_to_reg (oldval);\n \n   rs6000_pre_atomic_barrier (mod_s);\n \n-  emit_move_insn (boolval, const0_rtx);\n-\n   label1 = NULL_RTX;\n   if (!is_weak)\n     {\n@@ -17374,28 +17374,23 @@ rs6000_expand_atomic_compare_and_swap (rtx operands[])\n \t\t\t       NULL_RTX, 1, OPTAB_LIB_WIDEN);\n     }\n \n-  x = gen_rtx_NE (VOIDmode, x, oldval);\n-  x = rs6000_generate_compare (x, mode);\n+  cond = gen_reg_rtx (CCmode);\n+  x = gen_rtx_COMPARE (CCmode, x, oldval);\n+  emit_insn (gen_rtx_SET (VOIDmode, cond, x));\n+\n+  x = gen_rtx_NE (VOIDmode, cond, const0_rtx);\n   emit_unlikely_jump (x, label2);\n \n   x = newval;\n   if (mask)\n     x = rs6000_mask_atomic_subword (retval, newval, mask);\n \n-  cond = gen_reg_rtx (CCmode);\n   emit_store_conditional (mode, cond, mem, x);\n \n-  if (is_weak)\n-    {\n-      /* ??? It's either this or an unlikely jump over (set bool 1).  */\n-      x = gen_rtx_EQ (SImode, cond, const0_rtx);\n-      emit_insn (gen_rtx_SET (VOIDmode, boolval, x));\n-    }\n-  else\n+  if (!is_weak)\n     {\n       x = gen_rtx_NE (VOIDmode, cond, const0_rtx);\n       emit_unlikely_jump (x, label1);\n-      emit_move_insn (boolval, const1_rtx);\n     }\n \n   if (mod_f != MEMMODEL_RELAXED)\n@@ -17408,6 +17403,10 @@ rs6000_expand_atomic_compare_and_swap (rtx operands[])\n \n   if (shift)\n     rs6000_finish_atomic_subword (operands[1], retval, shift);\n+\n+  /* In all cases, CR0 contains EQ on success, and NE on failure.  */\n+  x = gen_rtx_EQ (SImode, cond, const0_rtx);\n+  emit_insn (gen_rtx_SET (VOIDmode, boolval, x));\n }\n \n /* Expand an atomic exchange operation.  */"}]}