{"sha": "3b59004a6dccaa88c178edde7e497debe098ef6e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2I1OTAwNGE2ZGNjYWE4OGMxNzhlZGRlN2U0OTdkZWJlMDk4ZWY2ZQ==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2011-12-22T08:54:26Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-12-22T08:54:26Z"}, "message": "a-cohase.ads, [...]: Update to latest RM version.\n\n2011-12-22  Ed Schonberg  <schonberg@adacore.com>\n\n\t* a-cohase.ads, a-cohase.adb: Update to latest RM version. Add\n\taspect Constant_Reference to set type, and corresponding\n\tfunctions.\n\t* a-cihama.ads, a-cihama.adb: Update to latest RM version. Add\n\tfunction Reference to provide a proper element iterator construct\n\tover indefinite maps.\n\n2011-12-22  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_attr.adb (Expand_N_Attribute, case 'Access): Do not insert\n\timplicit conversion on prefix of Unrestricted_Access when prefix\n\tis an explicit dereference.\n\nFrom-SVN: r182617", "tree": {"sha": "8ae97f6c9b1cf91d31b83f4294ee87b5c265aba1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ae97f6c9b1cf91d31b83f4294ee87b5c265aba1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3b59004a6dccaa88c178edde7e497debe098ef6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b59004a6dccaa88c178edde7e497debe098ef6e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b59004a6dccaa88c178edde7e497debe098ef6e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b59004a6dccaa88c178edde7e497debe098ef6e/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9a7e930fb278bb55e5387b9342d5566afb1f2c3b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a7e930fb278bb55e5387b9342d5566afb1f2c3b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a7e930fb278bb55e5387b9342d5566afb1f2c3b"}], "stats": {"total": 132, "additions": 125, "deletions": 7}, "files": [{"sha": "f50b44ed257b32d6a86f1403b78e9ac8962985de", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b59004a6dccaa88c178edde7e497debe098ef6e/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b59004a6dccaa88c178edde7e497debe098ef6e/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=3b59004a6dccaa88c178edde7e497debe098ef6e", "patch": "@@ -1,3 +1,18 @@\n+2011-12-22  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* a-cohase.ads, a-cohase.adb: Update to latest RM version. Add\n+\taspect Constant_Reference to set type, and corresponding\n+\tfunctions.\n+\t* a-cihama.ads, a-cihama.adb: Update to latest RM version. Add\n+\tfunction Reference to provide a proper element iterator construct\n+\tover indefinite maps.\n+\n+2011-12-22  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_attr.adb (Expand_N_Attribute, case 'Access): Do not insert\n+\timplicit conversion on prefix of Unrestricted_Access when prefix\n+\tis an explicit dereference.\n+\n 2011-12-22  Vincent Pucci  <pucci@adacore.com>\n \n \t* sem_dim.adb: Addressed all ??? comments. Replacement of warnings by"}, {"sha": "51e8c0c2424961c98808e9e8b065c073effafead", "filename": "gcc/ada/a-cihama.adb", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b59004a6dccaa88c178edde7e497debe098ef6e/gcc%2Fada%2Fa-cihama.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b59004a6dccaa88c178edde7e497debe098ef6e/gcc%2Fada%2Fa-cihama.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cihama.adb?ref=3b59004a6dccaa88c178edde7e497debe098ef6e", "patch": "@@ -973,6 +973,15 @@ package body Ada.Containers.Indefinite_Hashed_Maps is\n          Container.Find (Key).Node.Element.all'Unrestricted_Access);\n    end Reference;\n \n+   function Reference\n+     (Container : aliased in out Map;\n+      Position  : Cursor) return Reference_Type\n+   is\n+      pragma Unreferenced (Container);\n+   begin\n+      return (Element => Element (Position)'Unrestricted_Access);\n+   end Reference;\n+\n    -------------\n    -- Replace --\n    -------------"}, {"sha": "567fe4ed6f63d3d43e5bd262a78a8cf2b30c02c3", "filename": "gcc/ada/a-cihama.ads", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b59004a6dccaa88c178edde7e497debe098ef6e/gcc%2Fada%2Fa-cihama.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b59004a6dccaa88c178edde7e497debe098ef6e/gcc%2Fada%2Fa-cihama.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cihama.ads?ref=3b59004a6dccaa88c178edde7e497debe098ef6e", "patch": "@@ -293,8 +293,13 @@ package Ada.Containers.Indefinite_Hashed_Maps is\n       Key       : Key_Type)    --  SHOULD BE ALIASED ???\n       return Constant_Reference_Type;\n \n-   function Reference (Container : Map; Key : Key_Type)\n-   return Reference_Type;\n+   function Reference\n+     (Container : Map;\n+      Key       : Key_Type) return Reference_Type;\n+\n+   function Reference\n+     (Container : aliased in out Map;\n+      Position  : Cursor) return Reference_Type;\n \n    procedure Iterate\n      (Container : Map;"}, {"sha": "cf3354270d7fa758407f7848047e44fa4d0b264a", "filename": "gcc/ada/a-cohase.adb", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b59004a6dccaa88c178edde7e497debe098ef6e/gcc%2Fada%2Fa-cohase.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b59004a6dccaa88c178edde7e497debe098ef6e/gcc%2Fada%2Fa-cohase.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cohase.adb?ref=3b59004a6dccaa88c178edde7e497debe098ef6e", "patch": "@@ -1100,6 +1100,14 @@ package body Ada.Containers.Hashed_Sets is\n       raise Program_Error with \"attempt to stream set cursor\";\n    end Read;\n \n+   procedure Read\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : out Constant_Reference_Type)\n+   is\n+   begin\n+      raise Program_Error with \"attempt to stream reference\";\n+   end Read;\n+\n    ---------------\n    -- Read_Node --\n    ---------------\n@@ -1118,6 +1126,19 @@ package body Ada.Containers.Hashed_Sets is\n          raise;\n    end Read_Node;\n \n+   ---------------\n+   -- Reference --\n+   ---------------\n+\n+   function Constant_Reference\n+     (Container : aliased Set;\n+      Position  : Cursor) return Constant_Reference_Type\n+   is\n+      pragma Unreferenced (Container);\n+   begin\n+      return (Element => Position.Node.Element'Unrestricted_Access);\n+   end Constant_Reference;\n+\n    -------------\n    -- Replace --\n    -------------\n@@ -1655,6 +1676,14 @@ package body Ada.Containers.Hashed_Sets is\n       raise Program_Error with \"attempt to stream set cursor\";\n    end Write;\n \n+   procedure Write\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : Constant_Reference_Type)\n+   is\n+   begin\n+      raise Program_Error with \"attempt to stream reference\";\n+   end Write;\n+\n    ----------------\n    -- Write_Node --\n    ----------------\n@@ -1923,6 +1952,27 @@ package body Ada.Containers.Hashed_Sets is\n          raise Program_Error with \"key was modified\";\n       end Update_Element_Preserving_Key;\n \n+      ------------------------------\n+      -- Reference_Preserving_Key --\n+      ------------------------------\n+\n+      function Reference_Preserving_Key\n+        (Container : aliased in out Set;\n+         Position  : Cursor) return Reference_Type\n+      is\n+         pragma Unreferenced (Container);\n+      begin\n+         return (Element => Position.Node.Element'Unrestricted_Access);\n+      end Reference_Preserving_Key;\n+\n+      function Reference_Preserving_Key\n+        (Container : aliased in out Set;\n+         Key       : Key_Type) return Reference_Type\n+      is\n+         Position : constant Cursor := Find (Container, Key);\n+      begin\n+         return (Element => Position.Node.Element'Unrestricted_Access);\n+      end Reference_Preserving_Key;\n    end Generic_Keys;\n \n end Ada.Containers.Hashed_Sets;"}, {"sha": "b31001c90f34932ba4c2775f50f04a27dffe1c43", "filename": "gcc/ada/a-cohase.ads", "status": "modified", "additions": 41, "deletions": 3, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b59004a6dccaa88c178edde7e497debe098ef6e/gcc%2Fada%2Fa-cohase.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b59004a6dccaa88c178edde7e497debe098ef6e/gcc%2Fada%2Fa-cohase.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cohase.ads?ref=3b59004a6dccaa88c178edde7e497debe098ef6e", "patch": "@@ -31,10 +31,10 @@\n -- This unit was originally developed by Matthew J Heaney.                  --\n ------------------------------------------------------------------------------\n \n+with Ada.Iterator_Interfaces;\n private with Ada.Containers.Hash_Tables;\n private with Ada.Streams;\n private with Ada.Finalization;\n-with Ada.Iterator_Interfaces;\n \n generic\n    type Element_Type is private;\n@@ -52,6 +52,7 @@ package Ada.Containers.Hashed_Sets is\n \n    type Set is tagged private\n    with\n+      constant_Indexing => Constant_Reference,\n       Default_Iterator  => Iterate,\n       Iterator_Element  => Element_Type;\n \n@@ -148,6 +149,14 @@ package Ada.Containers.Hashed_Sets is\n \n    function Copy (Source : Set; Capacity : Count_Type := 0) return Set;\n \n+   type Constant_Reference_Type\n+     (Element : not null access constant Element_Type) is private\n+        with Implicit_Dereference => Element;\n+\n+   function Constant_Reference\n+     (Container : aliased Set;\n+      Position  : Cursor) return Constant_Reference_Type;\n+\n    procedure Move (Target : in out Set; Source : in out Set);\n    --  Clears Target (if it's not empty), and then moves (not copies) the\n    --  buckets array and nodes from Source to Target.\n@@ -403,13 +412,27 @@ package Ada.Containers.Hashed_Sets is\n       --  Equivalent_Keys to compare the saved key-value to the value returned\n       --  by applying generic formal operation Key to the post-Process value of\n       --  element. If the key values compare equal then the operation\n-      --  completes. Otherwise, the node is removed from the map and\n+      --  completes. Otherwise, the node is removed from the set and\n       --  Program_Error is raised.\n \n+      type Reference_Type (Element : not null access Element_Type) is private\n+        with Implicit_Dereference => Element;\n+\n+      function Reference_Preserving_Key\n+        (Container : aliased in out Set;\n+         Position  : Cursor) return Reference_Type;\n+\n+      function Reference_Preserving_Key\n+        (Container : aliased in out Set;\n+         Key  : Key_Type) return Reference_Type;\n+\n+   private\n+      type Reference_Type (Element : not null access Element_Type)\n+         is null record;\n+\n    end Generic_Keys;\n \n private\n-\n    pragma Inline (Next);\n \n    type Node_Type;\n@@ -469,6 +492,21 @@ private\n \n    for Set'Read use Read;\n \n+   type Constant_Reference_Type\n+     (Element : not null access constant Element_Type) is null record;\n+\n+   procedure Read\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : out Constant_Reference_Type);\n+\n+   for Constant_Reference_Type'Read use Read;\n+\n+   procedure Write\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : Constant_Reference_Type);\n+\n+   for Constant_Reference_Type'Write use Write;\n+\n    Empty_Set : constant Set := (Controlled with HT => (null, 0, 0, 0));\n \n end Ada.Containers.Hashed_Sets;"}, {"sha": "14d9da1609a7cadc21ed50348d221f7c91ec7579", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b59004a6dccaa88c178edde7e497debe098ef6e/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b59004a6dccaa88c178edde7e497debe098ef6e/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=3b59004a6dccaa88c178edde7e497debe098ef6e", "patch": "@@ -971,11 +971,12 @@ package body Exp_Attr is\n                                      (Etype (Prefix (Ref_Object))));\n                   begin\n                      --  No implicit conversion required if designated types\n-                     --  match.\n+                     --  match, or if we have an unrestricted access.\n \n                      if Obj_DDT /= Btyp_DDT\n+                       and then Id /= Attribute_Unrestricted_Access\n                        and then not (Is_Class_Wide_Type (Obj_DDT)\n-                                       and then Etype (Obj_DDT) = Btyp_DDT)\n+                                      and then Etype (Obj_DDT) = Btyp_DDT)\n                      then\n                         Rewrite (N,\n                           Convert_To (Typ,"}]}