{"sha": "8965dd164b1c72dec9e5f3dcc6506813f8fbe4c3", "node_id": "C_kwDOANBUbNoAKDg5NjVkZDE2NGIxYzcyZGVjOWU1ZjNkY2M2NTA2ODEzZjhmYmU0YzM", "commit": {"author": {"name": "Andrea Corallo", "email": "andrea.corallo@arm.com", "date": "2022-10-10T14:25:17Z"}, "committer": {"name": "Andrea Corallo", "email": "andrea.corallo@arm.com", "date": "2022-11-28T09:06:14Z"}, "message": "arm: improve tests for vabavq*\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/arm/mve/intrinsics/vabavq_p_s16.c: Improve test.\n\t* gcc.target/arm/mve/intrinsics/vabavq_p_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabavq_p_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabavq_p_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabavq_p_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabavq_p_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabavq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabavq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabavq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabavq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabavq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabavq_u8.c: Likewise.", "tree": {"sha": "d261b9c3d313f6c1e49606b9f0a2954a4e3beec1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d261b9c3d313f6c1e49606b9f0a2954a4e3beec1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8965dd164b1c72dec9e5f3dcc6506813f8fbe4c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8965dd164b1c72dec9e5f3dcc6506813f8fbe4c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8965dd164b1c72dec9e5f3dcc6506813f8fbe4c3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8965dd164b1c72dec9e5f3dcc6506813f8fbe4c3/comments", "author": {"login": "AndreaCorallo", "id": 6765576, "node_id": "MDQ6VXNlcjY3NjU1NzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6765576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndreaCorallo", "html_url": "https://github.com/AndreaCorallo", "followers_url": "https://api.github.com/users/AndreaCorallo/followers", "following_url": "https://api.github.com/users/AndreaCorallo/following{/other_user}", "gists_url": "https://api.github.com/users/AndreaCorallo/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndreaCorallo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndreaCorallo/subscriptions", "organizations_url": "https://api.github.com/users/AndreaCorallo/orgs", "repos_url": "https://api.github.com/users/AndreaCorallo/repos", "events_url": "https://api.github.com/users/AndreaCorallo/events{/privacy}", "received_events_url": "https://api.github.com/users/AndreaCorallo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "AndreaCorallo", "id": 6765576, "node_id": "MDQ6VXNlcjY3NjU1NzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6765576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndreaCorallo", "html_url": "https://github.com/AndreaCorallo", "followers_url": "https://api.github.com/users/AndreaCorallo/followers", "following_url": "https://api.github.com/users/AndreaCorallo/following{/other_user}", "gists_url": "https://api.github.com/users/AndreaCorallo/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndreaCorallo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndreaCorallo/subscriptions", "organizations_url": "https://api.github.com/users/AndreaCorallo/orgs", "repos_url": "https://api.github.com/users/AndreaCorallo/repos", "events_url": "https://api.github.com/users/AndreaCorallo/events{/privacy}", "received_events_url": "https://api.github.com/users/AndreaCorallo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862"}], "stats": {"total": 408, "additions": 384, "deletions": 24}, "files": [{"sha": "843d022c4188ee52f37d36b515dbe19e18f81d69", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vabavq_p_s16.c", "status": "modified", "additions": 38, "deletions": 2, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8965dd164b1c72dec9e5f3dcc6506813f8fbe4c3/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabavq_p_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8965dd164b1c72dec9e5f3dcc6506813f8fbe4c3/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabavq_p_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabavq_p_s16.c?ref=8965dd164b1c72dec9e5f3dcc6506813f8fbe4c3", "patch": "@@ -1,21 +1,57 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvabavt.s16\t(?:ip|fp|r[0-9]+), q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32_t\n foo (uint32_t a, int16x8_t b, int16x8_t c, mve_pred16_t p)\n {\n   return vabavq_p_s16 (a, b, c, p);\n }\n \n-/* { dg-final { scan-assembler \"vabavt.s16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvabavt.s16\t(?:ip|fp|r[0-9]+), q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32_t\n foo1 (uint32_t a, int16x8_t b, int16x8_t c, mve_pred16_t p)\n {\n   return vabavq_p (a, b, c, p);\n }\n \n-/* { dg-final { scan-assembler \"vabavt.s16\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvabavt.s16\t(?:ip|fp|r[0-9]+), q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n+uint32_t\n+foo2 (int16x8_t b, int16x8_t c, mve_pred16_t p)\n+{\n+  return vabavq_p (1, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "6ed9b9ac1c4b6c90685909686dc1fedc4f5c10d4", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vabavq_p_s32.c", "status": "modified", "additions": 38, "deletions": 2, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8965dd164b1c72dec9e5f3dcc6506813f8fbe4c3/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabavq_p_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8965dd164b1c72dec9e5f3dcc6506813f8fbe4c3/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabavq_p_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabavq_p_s32.c?ref=8965dd164b1c72dec9e5f3dcc6506813f8fbe4c3", "patch": "@@ -1,21 +1,57 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvabavt.s32\t(?:ip|fp|r[0-9]+), q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32_t\n foo (uint32_t a, int32x4_t b, int32x4_t c, mve_pred16_t p)\n {\n   return vabavq_p_s32 (a, b, c, p);\n }\n \n-/* { dg-final { scan-assembler \"vabavt.s32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvabavt.s32\t(?:ip|fp|r[0-9]+), q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32_t\n foo1 (uint32_t a, int32x4_t b, int32x4_t c, mve_pred16_t p)\n {\n   return vabavq_p (a, b, c, p);\n }\n \n-/* { dg-final { scan-assembler \"vabavt.s32\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvabavt.s32\t(?:ip|fp|r[0-9]+), q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n+uint32_t\n+foo2 (int32x4_t b, int32x4_t c, mve_pred16_t p)\n+{\n+  return vabavq_p (1, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "ec34be92a2844d0c1627f20221981e6682cd9c22", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vabavq_p_s8.c", "status": "modified", "additions": 38, "deletions": 2, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8965dd164b1c72dec9e5f3dcc6506813f8fbe4c3/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabavq_p_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8965dd164b1c72dec9e5f3dcc6506813f8fbe4c3/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabavq_p_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabavq_p_s8.c?ref=8965dd164b1c72dec9e5f3dcc6506813f8fbe4c3", "patch": "@@ -1,21 +1,57 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvabavt.s8\t(?:ip|fp|r[0-9]+), q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32_t\n foo (uint32_t a, int8x16_t b, int8x16_t c, mve_pred16_t p)\n {\n   return vabavq_p_s8 (a, b, c, p);\n }\n \n-/* { dg-final { scan-assembler \"vabavt.s8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvabavt.s8\t(?:ip|fp|r[0-9]+), q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32_t\n foo1 (uint32_t a, int8x16_t b, int8x16_t c, mve_pred16_t p)\n {\n   return vabavq_p (a, b, c, p);\n }\n \n-/* { dg-final { scan-assembler \"vabavt.s8\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvabavt.s8\t(?:ip|fp|r[0-9]+), q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n+uint32_t\n+foo2 (int8x16_t b, int8x16_t c, mve_pred16_t p)\n+{\n+  return vabavq_p (1, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "440b603a18ea500d32d7684f379de66f600dbd46", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vabavq_p_u16.c", "status": "modified", "additions": 38, "deletions": 2, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8965dd164b1c72dec9e5f3dcc6506813f8fbe4c3/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabavq_p_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8965dd164b1c72dec9e5f3dcc6506813f8fbe4c3/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabavq_p_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabavq_p_u16.c?ref=8965dd164b1c72dec9e5f3dcc6506813f8fbe4c3", "patch": "@@ -1,21 +1,57 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvabavt.u16\t(?:ip|fp|r[0-9]+), q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32_t\n foo (uint32_t a, uint16x8_t b, uint16x8_t c, mve_pred16_t p)\n {\n   return vabavq_p_u16 (a, b, c, p);\n }\n \n-/* { dg-final { scan-assembler \"vabavt.u16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvabavt.u16\t(?:ip|fp|r[0-9]+), q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32_t\n foo1 (uint32_t a, uint16x8_t b, uint16x8_t c, mve_pred16_t p)\n {\n   return vabavq_p (a, b, c, p);\n }\n \n-/* { dg-final { scan-assembler \"vabavt.u16\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvabavt.u16\t(?:ip|fp|r[0-9]+), q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n+uint32_t\n+foo2 (uint16x8_t b, uint16x8_t c, mve_pred16_t p)\n+{\n+  return vabavq_p (1, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "9500ee054b13bf44abc3801ecb1f502872931094", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vabavq_p_u32.c", "status": "modified", "additions": 38, "deletions": 2, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8965dd164b1c72dec9e5f3dcc6506813f8fbe4c3/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabavq_p_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8965dd164b1c72dec9e5f3dcc6506813f8fbe4c3/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabavq_p_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabavq_p_u32.c?ref=8965dd164b1c72dec9e5f3dcc6506813f8fbe4c3", "patch": "@@ -1,21 +1,57 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvabavt.u32\t(?:ip|fp|r[0-9]+), q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32_t\n foo (uint32_t a, uint32x4_t b, uint32x4_t c, mve_pred16_t p)\n {\n   return vabavq_p_u32 (a, b, c, p);\n }\n \n-/* { dg-final { scan-assembler \"vabavt.u32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvabavt.u32\t(?:ip|fp|r[0-9]+), q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32_t\n foo1 (uint32_t a, uint32x4_t b, uint32x4_t c, mve_pred16_t p)\n {\n   return vabavq_p (a, b, c, p);\n }\n \n-/* { dg-final { scan-assembler \"vabavt.u32\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvabavt.u32\t(?:ip|fp|r[0-9]+), q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n+uint32_t\n+foo2 (uint32x4_t b, uint32x4_t c, mve_pred16_t p)\n+{\n+  return vabavq_p (1, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "40c9a51fbe4518de1a8e70c953209ef04730d116", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vabavq_p_u8.c", "status": "modified", "additions": 38, "deletions": 2, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8965dd164b1c72dec9e5f3dcc6506813f8fbe4c3/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabavq_p_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8965dd164b1c72dec9e5f3dcc6506813f8fbe4c3/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabavq_p_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabavq_p_u8.c?ref=8965dd164b1c72dec9e5f3dcc6506813f8fbe4c3", "patch": "@@ -1,21 +1,57 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvabavt.u8\t(?:ip|fp|r[0-9]+), q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32_t\n foo (uint32_t a, uint8x16_t b, uint8x16_t c, mve_pred16_t p)\n {\n   return vabavq_p_u8 (a, b, c, p);\n }\n \n-/* { dg-final { scan-assembler \"vabavt.u8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvabavt.u8\t(?:ip|fp|r[0-9]+), q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32_t\n foo1 (uint32_t a, uint8x16_t b, uint8x16_t c, mve_pred16_t p)\n {\n   return vabavq_p (a, b, c, p);\n }\n \n-/* { dg-final { scan-assembler \"vabavt.u8\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvabavt.u8\t(?:ip|fp|r[0-9]+), q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n+uint32_t\n+foo2 (uint8x16_t b, uint8x16_t c, mve_pred16_t p)\n+{\n+  return vabavq_p (1, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "27684fa4a88e93034af38d9234dcd8d3059c3412", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vabavq_s16.c", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8965dd164b1c72dec9e5f3dcc6506813f8fbe4c3/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabavq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8965dd164b1c72dec9e5f3dcc6506813f8fbe4c3/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabavq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabavq_s16.c?ref=8965dd164b1c72dec9e5f3dcc6506813f8fbe4c3", "patch": "@@ -1,21 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvabav.s16\t(?:ip|fp|r[0-9]+), q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32_t\n foo (uint32_t a, int16x8_t b, int16x8_t c)\n {\n   return vabavq_s16 (a, b, c);\n }\n \n-/* { dg-final { scan-assembler \"vabav.s16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvabav.s16\t(?:ip|fp|r[0-9]+), q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32_t\n foo1 (uint32_t a, int16x8_t b, int16x8_t c)\n {\n   return vabavq (a, b, c);\n }\n \n-/* { dg-final { scan-assembler \"vabav.s16\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvabav.s16\t(?:ip|fp|r[0-9]+), q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n+uint32_t\n+foo2 (int16x8_t b, int16x8_t c)\n+{\n+  return vabavq (1, b, c);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "f595609a2a0ebaf48565b72d36ce9c6bc4d8443a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vabavq_s32.c", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8965dd164b1c72dec9e5f3dcc6506813f8fbe4c3/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabavq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8965dd164b1c72dec9e5f3dcc6506813f8fbe4c3/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabavq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabavq_s32.c?ref=8965dd164b1c72dec9e5f3dcc6506813f8fbe4c3", "patch": "@@ -1,21 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvabav.s32\t(?:ip|fp|r[0-9]+), q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32_t\n foo (uint32_t a, int32x4_t b, int32x4_t c)\n {\n   return vabavq_s32 (a, b, c);\n }\n \n-/* { dg-final { scan-assembler \"vabav.s32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvabav.s32\t(?:ip|fp|r[0-9]+), q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32_t\n foo1 (uint32_t a, int32x4_t b, int32x4_t c)\n {\n   return vabavq (a, b, c);\n }\n \n-/* { dg-final { scan-assembler \"vabav.s32\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvabav.s32\t(?:ip|fp|r[0-9]+), q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n+uint32_t\n+foo2 (int32x4_t b, int32x4_t c)\n+{\n+  return vabavq (1, b, c);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "60fa9e23b7b0800defc0935095d314832c419c71", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vabavq_s8.c", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8965dd164b1c72dec9e5f3dcc6506813f8fbe4c3/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabavq_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8965dd164b1c72dec9e5f3dcc6506813f8fbe4c3/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabavq_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabavq_s8.c?ref=8965dd164b1c72dec9e5f3dcc6506813f8fbe4c3", "patch": "@@ -1,21 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvabav.s8\t(?:ip|fp|r[0-9]+), q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32_t\n foo (uint32_t a, int8x16_t b, int8x16_t c)\n {\n   return vabavq_s8 (a, b, c);\n }\n \n-/* { dg-final { scan-assembler \"vabav.s8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvabav.s8\t(?:ip|fp|r[0-9]+), q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32_t\n foo1 (uint32_t a, int8x16_t b, int8x16_t c)\n {\n   return vabavq (a, b, c);\n }\n \n-/* { dg-final { scan-assembler \"vabav.s8\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvabav.s8\t(?:ip|fp|r[0-9]+), q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n+uint32_t\n+foo2 (int8x16_t b, int8x16_t c)\n+{\n+  return vabavq (1, b, c);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "f3255276eda2e22b28ded2812c8885414d1f14ba", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vabavq_u16.c", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8965dd164b1c72dec9e5f3dcc6506813f8fbe4c3/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabavq_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8965dd164b1c72dec9e5f3dcc6506813f8fbe4c3/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabavq_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabavq_u16.c?ref=8965dd164b1c72dec9e5f3dcc6506813f8fbe4c3", "patch": "@@ -1,21 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvabav.u16\t(?:ip|fp|r[0-9]+), q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32_t\n foo (uint32_t a, uint16x8_t b, uint16x8_t c)\n {\n   return vabavq_u16 (a, b, c);\n }\n \n-/* { dg-final { scan-assembler \"vabav.u16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvabav.u16\t(?:ip|fp|r[0-9]+), q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32_t\n foo1 (uint32_t a, uint16x8_t b, uint16x8_t c)\n {\n   return vabavq (a, b, c);\n }\n \n-/* { dg-final { scan-assembler \"vabav.u16\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvabav.u16\t(?:ip|fp|r[0-9]+), q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n+uint32_t\n+foo2 (uint16x8_t b, uint16x8_t c)\n+{\n+  return vabavq (1, b, c);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "f41fa1f39529bd0c42d3f0c062955f25ffdaf469", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vabavq_u32.c", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8965dd164b1c72dec9e5f3dcc6506813f8fbe4c3/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabavq_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8965dd164b1c72dec9e5f3dcc6506813f8fbe4c3/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabavq_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabavq_u32.c?ref=8965dd164b1c72dec9e5f3dcc6506813f8fbe4c3", "patch": "@@ -1,21 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvabav.u32\t(?:ip|fp|r[0-9]+), q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32_t\n foo (uint32_t a, uint32x4_t b, uint32x4_t c)\n {\n   return vabavq_u32 (a, b, c);\n }\n \n-/* { dg-final { scan-assembler \"vabav.u32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvabav.u32\t(?:ip|fp|r[0-9]+), q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32_t\n foo1 (uint32_t a, uint32x4_t b, uint32x4_t c)\n {\n   return vabavq (a, b, c);\n }\n \n-/* { dg-final { scan-assembler \"vabav.u32\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvabav.u32\t(?:ip|fp|r[0-9]+), q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n+uint32_t\n+foo2 (uint32x4_t b, uint32x4_t c)\n+{\n+  return vabavq (1, b, c);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "3a2654435df6eac88b61fe42ff90e45f78bbf2bc", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vabavq_u8.c", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8965dd164b1c72dec9e5f3dcc6506813f8fbe4c3/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabavq_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8965dd164b1c72dec9e5f3dcc6506813f8fbe4c3/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabavq_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabavq_u8.c?ref=8965dd164b1c72dec9e5f3dcc6506813f8fbe4c3", "patch": "@@ -1,21 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvabav.u8\t(?:ip|fp|r[0-9]+), q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32_t\n foo (uint32_t a, uint8x16_t b, uint8x16_t c)\n {\n   return vabavq_u8 (a, b, c);\n }\n \n-/* { dg-final { scan-assembler \"vabav.u8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvabav.u8\t(?:ip|fp|r[0-9]+), q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32_t\n foo1 (uint32_t a, uint8x16_t b, uint8x16_t c)\n {\n   return vabavq (a, b, c);\n }\n \n-/* { dg-final { scan-assembler \"vabav.u8\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvabav.u8\t(?:ip|fp|r[0-9]+), q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n+uint32_t\n+foo2 (uint8x16_t b, uint8x16_t c)\n+{\n+  return vabavq (1, b, c);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}]}