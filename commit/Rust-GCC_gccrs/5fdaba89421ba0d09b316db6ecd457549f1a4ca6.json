{"sha": "5fdaba89421ba0d09b316db6ecd457549f1a4ca6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWZkYWJhODk0MjFiYTBkMDliMzE2ZGI2ZWNkNDU3NTQ5ZjFhNGNhNg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "1999-09-23T02:04:33Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-09-23T02:04:33Z"}, "message": "decl.c (pushdecl): Do create a binding for extern \"C\" functions...\n\n\t* decl.c (pushdecl): Do create a binding for extern \"C\" functions,\n\tbut not for their DECL_ASSEMBLER_NAMEs.\n\t(lookup_name_current_level): Fix formatting.\n\t(xref_tag): Likewise.\n\t* decl2.c (start_objects): Mark static constructors and\n\tdestructors as used.\n\nFrom-SVN: r29609", "tree": {"sha": "b92af04f73f780e1b9d1f304f1f89d5e9759730f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b92af04f73f780e1b9d1f304f1f89d5e9759730f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5fdaba89421ba0d09b316db6ecd457549f1a4ca6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fdaba89421ba0d09b316db6ecd457549f1a4ca6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5fdaba89421ba0d09b316db6ecd457549f1a4ca6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fdaba89421ba0d09b316db6ecd457549f1a4ca6/comments", "author": null, "committer": null, "parents": [{"sha": "8da665d583ad51bbba86a5e135dfc33d4b764455", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8da665d583ad51bbba86a5e135dfc33d4b764455", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8da665d583ad51bbba86a5e135dfc33d4b764455"}], "stats": {"total": 32, "additions": 24, "deletions": 8}, "files": [{"sha": "350a92777eea967a92983408e00529e5ff7e8795", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fdaba89421ba0d09b316db6ecd457549f1a4ca6/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fdaba89421ba0d09b316db6ecd457549f1a4ca6/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5fdaba89421ba0d09b316db6ecd457549f1a4ca6", "patch": "@@ -1,3 +1,12 @@\n+1999-09-22  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* decl.c (pushdecl): Do create a binding for extern \"C\" functions,\n+\tbut not for their DECL_ASSEMBLER_NAMEs.\n+\t(lookup_name_current_level): Fix formatting.\n+\t(xref_tag): Likewise.\n+\t* decl2.c (start_objects): Mark static constructors and\n+\tdestructors as used.\n+\n 1999-09-22  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* decl.c (define_case_label): Don't crash if we're not in a switch."}, {"sha": "1e63523cdaede8b382896aa3c2f175169dab24b7", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fdaba89421ba0d09b316db6ecd457549f1a4ca6/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fdaba89421ba0d09b316db6ecd457549f1a4ca6/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=5fdaba89421ba0d09b316db6ecd457549f1a4ca6", "patch": "@@ -3806,7 +3806,7 @@ pushdecl (x)\n       if (TREE_CODE (x) == FUNCTION_DECL && ! DECL_FUNCTION_MEMBER_P (x))\n \t{\n \t  t = push_overloaded_decl (x, PUSH_LOCAL);\n-\t  if (t != x || DECL_LANGUAGE (x) == lang_c)\n+\t  if (t != x)\n \t    return t;\n \t  if (!namespace_bindings_p ())\n \t    /* We do not need to create a binding for this name;\n@@ -3898,7 +3898,13 @@ pushdecl (x)\n \t    TREE_PUBLIC (name) = 1;\n \n \t  if (!(TREE_CODE (x) == TYPE_DECL && DECL_ARTIFICIAL (x)\n-\t\t&& t != NULL_TREE))\n+\t\t&& t != NULL_TREE)\n+\t      /* For an ordinary function, we create a binding from\n+\t\t the mangled name (i.e., NAME) to the DECL.  But, for\n+\t\t an `extern \"C\"' function, the mangled name and the\n+\t\t ordinary name are the same so we need not do this.  */\n+\t      && !(TREE_CODE (x) == FUNCTION_DECL && \n+\t\t   DECL_LANGUAGE (x) == lang_c))\n \t    {\n \t      if (TREE_CODE (x) == FUNCTION_DECL)\n \t\tmy_friendly_assert \n@@ -5766,7 +5772,7 @@ lookup_name_current_level (name)\n \n   if (b->namespace_p)\n     {\n-      t =  IDENTIFIER_NAMESPACE_VALUE (name);\n+      t = IDENTIFIER_NAMESPACE_VALUE (name);\n \n       /* extern \"C\" function() */\n       if (t != NULL_TREE && TREE_CODE (t) == TREE_LIST)\n@@ -12138,11 +12144,9 @@ xref_tag (code_type_node, name, globalize)\n \t in global scope.  \n          If it is not an IDENTIFIER, this is not a declaration */\n       if (b->namespace_p && !class_binding_level\n-\t  && TREE_CODE (name) == IDENTIFIER_NODE)\n-\t{\n-\t  if (IDENTIFIER_NAMESPACE_VALUE (name) == NULL_TREE)\n-\t    SET_IDENTIFIER_NAMESPACE_VALUE (name, TYPE_NAME (ref));\n-\t}\n+\t  && TREE_CODE (name) == IDENTIFIER_NODE\n+\t  && IDENTIFIER_NAMESPACE_VALUE (name) == NULL_TREE)\n+\tSET_IDENTIFIER_NAMESPACE_VALUE (name, TYPE_NAME (ref));\n \n       if (!globalize && processing_template_decl && IS_AGGR_TYPE (ref))\n \tredeclare_class_template (ref, current_template_parms);"}, {"sha": "0b8083aac6154d8d74e15ea31b024834d1a53878", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fdaba89421ba0d09b316db6ecd457549f1a4ca6/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fdaba89421ba0d09b316db6ecd457549f1a4ca6/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=5fdaba89421ba0d09b316db6ecd457549f1a4ca6", "patch": "@@ -2789,6 +2789,9 @@ start_objects (method_type, initp)\n   TREE_PUBLIC (current_function_decl) = 0;\n #endif\n \n+  /* Mark this declaration as used to avoid spurious warnings.  */\n+  TREE_USED (current_function_decl) = 1;\n+\n   store_parm_decls ();\n   pushlevel (0);\n   clear_last_expr ();"}]}