{"sha": "854a5c7722041c3c37ac68eca357bac225e58b88", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODU0YTVjNzcyMjA0MWMzYzM3YWM2OGVjYTM1N2JhYzIyNWU1OGI4OA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-05-04T14:35:33Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-05-04T14:35:33Z"}, "message": "PR libstdc++/90299 make filesystem::absolute overloads consistent\n\nIn this implementation it is an error to pass the empty path to absolute,\nbecause the empty path doesn't represent any file in the filesystem so\nthe function cannot meet its postcondition.\n\nCurrently the absolute(const path&, error_code&) overload reports an\nerror for the empty path, but using errc::no_such_file_or_directory, and\nthe other overload does not report an error. This patch makes them\nconsistntly report an errc::invalid_argument error for the empty path.\n\n\tPR libstdc++/90299\n\t* src/c++17/fs_ops.cc (absolute(const path&)): Report an error if the\n\targument is an empty path.\n\t(absolute(const path&, error_code&)): Use invalid_argument as error\n\tcode instead of no_such_file_or_directory.\n\t* testsuite/27_io/filesystem/operations/absolute.cc: Check handling\n\tof non-existent paths and empty paths with both overloads of absolute.\n\nFrom-SVN: r270874", "tree": {"sha": "d345f7c0c2d3d13cf33bd877b2e10ba9ddb45322", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d345f7c0c2d3d13cf33bd877b2e10ba9ddb45322"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/854a5c7722041c3c37ac68eca357bac225e58b88", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/854a5c7722041c3c37ac68eca357bac225e58b88", "html_url": "https://github.com/Rust-GCC/gccrs/commit/854a5c7722041c3c37ac68eca357bac225e58b88", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/854a5c7722041c3c37ac68eca357bac225e58b88/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f7f1aca2959712d4d66f1409719a5bde871a626", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f7f1aca2959712d4d66f1409719a5bde871a626", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f7f1aca2959712d4d66f1409719a5bde871a626"}], "stats": {"total": 41, "additions": 40, "deletions": 1}, "files": [{"sha": "e517c15f6392d6abfb3941691361587ee4af9897", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/854a5c7722041c3c37ac68eca357bac225e58b88/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/854a5c7722041c3c37ac68eca357bac225e58b88/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=854a5c7722041c3c37ac68eca357bac225e58b88", "patch": "@@ -1,5 +1,13 @@\n 2019-05-04  Jonathan Wakely  <jwakely@redhat.com>\n \n+\tPR libstdc++/90299\n+\t* src/c++17/fs_ops.cc (absolute(const path&)): Report an error if the\n+\targument is an empty path.\n+\t(absolute(const path&, error_code&)): Use invalid_argument as error\n+\tcode instead of no_such_file_or_directory.\n+\t* testsuite/27_io/filesystem/operations/absolute.cc: Check handling\n+\tof non-existent paths and empty paths with both overloads of absolute.\n+\n \t* include/std/system_error (error_category, error_code)\n \t(error_condition): Improve docs.\n \t* libsupc++/exception: Add missing @addtogroup Doxygen command."}, {"sha": "2d13b172d696924351d6cd7c62c4cf3a33eb41ae", "filename": "libstdc++-v3/src/c++17/fs_ops.cc", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/854a5c7722041c3c37ac68eca357bac225e58b88/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffs_ops.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/854a5c7722041c3c37ac68eca357bac225e58b88/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffs_ops.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffs_ops.cc?ref=854a5c7722041c3c37ac68eca357bac225e58b88", "patch": "@@ -72,6 +72,9 @@ fs::absolute(const path& p)\n \t\t\t\t\t     ec));\n   return ret;\n #else\n+  if (p.empty())\n+    _GLIBCXX_THROW_OR_ABORT(filesystem_error(\"cannot make absolute path\", p,\n+\t  make_error_code(std::errc::invalid_argument)));\n   return current_path() / p;\n #endif\n }\n@@ -82,7 +85,7 @@ fs::absolute(const path& p, error_code& ec)\n   path ret;\n   if (p.empty())\n     {\n-      ec = make_error_code(std::errc::no_such_file_or_directory);\n+      ec = make_error_code(std::errc::invalid_argument);\n       return ret;\n     }\n   ec.clear();"}, {"sha": "156e68ac87de11127a6c4022b41ceed35564900b", "filename": "libstdc++-v3/testsuite/27_io/filesystem/operations/absolute.cc", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/854a5c7722041c3c37ac68eca357bac225e58b88/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fabsolute.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/854a5c7722041c3c37ac68eca357bac225e58b88/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fabsolute.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fabsolute.cc?ref=854a5c7722041c3c37ac68eca357bac225e58b88", "patch": "@@ -67,9 +67,37 @@ test02()\n #endif\n }\n \n+void\n+test03()\n+{\n+  // PR libstdc++/90299\n+  const path p = __gnu_test::nonexistent_path();\n+  std::error_code ec;\n+  const path pabs = absolute(p, ec);\n+  VERIFY( !ec );\n+  VERIFY( pabs.is_absolute() );\n+\n+  const path pabs2 = absolute(p);\n+  VERIFY( pabs2 == pabs );\n+\n+  const path eabs = absolute(path{}, ec);\n+  VERIFY( ec == std::errc::invalid_argument );\n+  VERIFY( eabs.empty() );\n+\n+  try {\n+    absolute(path{});\n+    VERIFY( false );\n+  } catch (const std::filesystem::filesystem_error& e) {\n+    VERIFY( e.code() == std::errc::invalid_argument );\n+    VERIFY( e.path1().empty() );\n+    VERIFY( e.path2().empty() );\n+  }\n+}\n+\n int\n main()\n {\n   test01();\n   test02();\n+  test03();\n }"}]}