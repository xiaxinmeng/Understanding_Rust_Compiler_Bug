{"sha": "76beabf41a6e89bc773ede6c7709d41b3be14821", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzZiZWFiZjQxYTZlODliYzc3M2VkZTZjNzcwOWQ0MWIzYmUxNDgyMQ==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "avr@gjlay.de", "date": "2016-10-11T08:02:48Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2016-10-11T08:02:48Z"}, "message": "New avr-passes.def to register AVR specific passes.\n\n\t* config/avr/avr-passes.def: New file.\n\t* config/avr/t-avr (PASSES_EXTRA): Add avr-passes.def.\n\t* config/avr/avr-protos.h (gcc::context, rtl_opt_pass): Declare.\n\t(make_avr_pass_recompute_note): New proto.\n\t* config/avr/avr.c (make_avr_pass_recompute_notes): New function.\n\t(avr_pass_recompute_notes): Use anonymous namespace.\n\t(avr_register_passes): Remove function...\n\t(avr_option_override): ...and its call.\n\nFrom-SVN: r240966", "tree": {"sha": "e0b440c80cd14688bfa45f4afb4b3ac2664396e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e0b440c80cd14688bfa45f4afb4b3ac2664396e3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/76beabf41a6e89bc773ede6c7709d41b3be14821", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76beabf41a6e89bc773ede6c7709d41b3be14821", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76beabf41a6e89bc773ede6c7709d41b3be14821", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76beabf41a6e89bc773ede6c7709d41b3be14821/comments", "author": null, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c507664891d053d0e95e3c7f179a2043c2b1210", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c507664891d053d0e95e3c7f179a2043c2b1210", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c507664891d053d0e95e3c7f179a2043c2b1210"}], "stats": {"total": 70, "additions": 53, "deletions": 17}, "files": [{"sha": "8dbf87c884c234fc1f05948d8d3295e007d468dc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76beabf41a6e89bc773ede6c7709d41b3be14821/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76beabf41a6e89bc773ede6c7709d41b3be14821/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=76beabf41a6e89bc773ede6c7709d41b3be14821", "patch": "@@ -1,3 +1,16 @@\n+2016-10-11  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\tNew avr-passes.def to register AVR specific passes.\n+\n+\t* config/avr/avr-passes.def: New file.\n+\t* config/avr/t-avr (PASSES_EXTRA): Add avr-passes.def.\n+\t* config/avr/avr-protos.h (gcc::context, rtl_opt_pass): Declare.\n+\t(make_avr_pass_recompute_note): New proto.\n+\t* config/avr/avr.c (make_avr_pass_recompute_notes): New function.\n+\t(avr_pass_recompute_notes): Use anonymous namespace.\n+\t(avr_register_passes): Remove function...\n+\t(avr_option_override): ...and its call.\n+\n 2016-10-11  Robert Suchanek  <robert.suchanek@imgtec.com>\n \n \t* config/mips/mips-cpus.def: Replace PTF_AVOID_BRANCHLIKELY with"}, {"sha": "64d9ce4f183c9bd2d63fa680f900ba4587358a5d", "filename": "gcc/config/avr/avr-passes.def", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76beabf41a6e89bc773ede6c7709d41b3be14821/gcc%2Fconfig%2Favr%2Favr-passes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76beabf41a6e89bc773ede6c7709d41b3be14821/gcc%2Fconfig%2Favr%2Favr-passes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr-passes.def?ref=76beabf41a6e89bc773ede6c7709d41b3be14821", "patch": "@@ -0,0 +1,28 @@\n+/* Description of target passes for AVR.\n+   Copyright (C) 2016 Free Software Foundation, Inc. */\n+\n+/* This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it under\n+   the terms of the GNU General Public License as published by the Free\n+   Software Foundation; either version 3, or (at your option) any later\n+   version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+   WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+   FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+   for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+/* This avr-specific pass (re)computes insn notes, in particular REG_DEAD\n+   notes which are used by `avr.c::reg_unused_after' and branch offset\n+   computations.  These notes must be correct, i.e. there must be no\n+   dangling REG_DEAD notes; otherwise wrong code might result, cf. PR64331.\n+\n+   DF needs (correct) CFG, hence right before free_cfg is the last\n+   opportunity to rectify notes.  */\n+\n+INSERT_PASS_BEFORE (pass_free_cfg, 1, avr_pass_recompute_notes);"}, {"sha": "1a5efa8fb3160dea29ca55d5fdbe8247c6209835", "filename": "gcc/config/avr/avr-protos.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76beabf41a6e89bc773ede6c7709d41b3be14821/gcc%2Fconfig%2Favr%2Favr-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76beabf41a6e89bc773ede6c7709d41b3be14821/gcc%2Fconfig%2Favr%2Favr-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr-protos.h?ref=76beabf41a6e89bc773ede6c7709d41b3be14821", "patch": "@@ -154,6 +154,11 @@ extern void asm_output_float (FILE *file, REAL_VALUE_TYPE n);\n \n extern bool avr_have_dimode;\n \n+namespace gcc { class context; }\n+class rtl_opt_pass;\n+\n+extern rtl_opt_pass *make_avr_pass_recompute_notes (gcc::context *);\n+\n /* From avr-log.c */\n \n #define avr_dump(...) avr_vdump (NULL, __FUNCTION__, __VA_ARGS__)"}, {"sha": "7310b54f9ed46252e2001fcae4b606def4197757", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 5, "deletions": 17, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76beabf41a6e89bc773ede6c7709d41b3be14821/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76beabf41a6e89bc773ede6c7709d41b3be14821/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=76beabf41a6e89bc773ede6c7709d41b3be14821", "patch": "@@ -295,6 +295,7 @@ avr_to_int_mode (rtx x)\n     : simplify_gen_subreg (int_mode_for_mode (mode), x, mode, 0);\n }\n \n+namespace {\n \n static const pass_data avr_pass_data_recompute_notes =\n {\n@@ -328,20 +329,12 @@ class avr_pass_recompute_notes : public rtl_opt_pass\n   }\n }; // avr_pass_recompute_notes\n \n+} // anon namespace\n \n-static void\n-avr_register_passes (void)\n+rtl_opt_pass*\n+make_avr_pass_recompute_notes (gcc::context *ctxt)\n {\n-  /* This avr-specific pass (re)computes insn notes, in particular REG_DEAD\n-     notes which are used by `avr.c::reg_unused_after' and branch offset\n-     computations.  These notes must be correct, i.e. there must be no\n-     dangling REG_DEAD notes; otherwise wrong code might result, cf. PR64331.\n-\n-     DF needs (correct) CFG, hence right before free_cfg is the last\n-     opportunity to rectify notes.  */\n-\n-  register_pass (new avr_pass_recompute_notes (g, \"avr-notes-free-cfg\"),\n-                 PASS_POS_INSERT_BEFORE, \"*free_cfg\", 1);\n+  return new avr_pass_recompute_notes (ctxt, \"avr-notes-free-cfg\");\n }\n \n \n@@ -464,11 +457,6 @@ avr_option_override (void)\n   init_machine_status = avr_init_machine_status;\n \n   avr_log_set_avr_log();\n-\n-  /* Register some avr-specific pass(es).  There is no canonical place for\n-     pass registration.  This function is convenient.  */\n-\n-  avr_register_passes ();\n }\n \n /* Function to set up the backend function structure.  */"}, {"sha": "ffa5b5010a136300921619a17a76015e9159de31", "filename": "gcc/config/avr/t-avr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76beabf41a6e89bc773ede6c7709d41b3be14821/gcc%2Fconfig%2Favr%2Ft-avr", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76beabf41a6e89bc773ede6c7709d41b3be14821/gcc%2Fconfig%2Favr%2Ft-avr", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Ft-avr?ref=76beabf41a6e89bc773ede6c7709d41b3be14821", "patch": "@@ -16,6 +16,8 @@\n # along with GCC; see the file COPYING3.  If not see\n # <http://www.gnu.org/licenses/>.\n \n+PASSES_EXTRA += $(srcdir)/config/avr/avr-passes.def\n+\n driver-avr.o: $(srcdir)/config/avr/driver-avr.c \\\n   $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n   $(srcdir)/config/avr/avr-arch.h $(TM_H)"}]}