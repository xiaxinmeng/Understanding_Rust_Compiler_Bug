{"sha": "5ac9118ef9eac76fe38b89c6af869203a6980969", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWFjOTExOGVmOWVhYzc2ZmUzOGI4OWM2YWY4NjkyMDNhNjk4MDk2OQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2000-06-11T04:29:49Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2000-06-11T04:29:49Z"}, "message": "Warning fixes:\n\n\t* bb-reorder.c (build_scope_forest): Initialize variable\n\t`curr_scope'.\n\n\t* calls.c (expand_call): Likewise for variables\n\t`save_pending_stack_adjust' and `save_stack_pointer_delta'.\n\n\t* i386.c (function_arg_advance, function_arg): Cast to avoid\n\tsigned/unsigned warnings.\n\n\t* i386.h (MEMORY_MOVE_COST): Likewise.\n\n\t* ifcvt.c (cond_exec_process_if_block): Initialize variables\n\t`else_start' and `else_end'.\n\n\t* libgcc2.h (__eh_alloc, __eh_free): Prototype.\n\n\t* regrename.c (rr_replace_reg): Initialize variable `dest_subregno'.\n\nch:\n\t* Makefile.in (EXPR_H): New dependency variable.\n\t(actions.o, expr.o): Use EXPR_H.\n\t(lang.o): Depend on RTL_H and EXPR_H.\n\n\t* lang.c: Include rtl.h and expr.h.\n\t(lang_get_alias_set): Mark parameter with ATTRIBUTE_UNUSED.\n\ncp:\n\t* decl2.c (compare_options): Don't needlessly cast away const-ness.\n\nf:\n\t* com.c (lang_get_alias_set): Mark parameter with ATTRIBUTE_UNUSED.\n\njava:\n\t* decl.c (create_primitive_vtable): Prototype.\n\n\t* jcf-write.c (generate_bytecode_insns): Initialize variable\n\t`saved_context'.\n\n\t* lang.c (lang_get_alias_set): Mark parameter with ATTRIBUTE_UNUSED.\n\nFrom-SVN: r34490", "tree": {"sha": "97625e0db2f6e73a7658484e5353f5687151cca6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/97625e0db2f6e73a7658484e5353f5687151cca6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5ac9118ef9eac76fe38b89c6af869203a6980969", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ac9118ef9eac76fe38b89c6af869203a6980969", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ac9118ef9eac76fe38b89c6af869203a6980969", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ac9118ef9eac76fe38b89c6af869203a6980969/comments", "author": null, "committer": null, "parents": [{"sha": "7b176381ecd654fb32ab47a22a896087141ed843", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b176381ecd654fb32ab47a22a896087141ed843", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b176381ecd654fb32ab47a22a896087141ed843"}], "stats": {"total": 93, "additions": 72, "deletions": 21}, "files": [{"sha": "db4cb70b1458ed22728a2f76db16cdf080391492", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ac9118ef9eac76fe38b89c6af869203a6980969/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ac9118ef9eac76fe38b89c6af869203a6980969/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5ac9118ef9eac76fe38b89c6af869203a6980969", "patch": "@@ -1,3 +1,23 @@\n+2000-06-11  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* bb-reorder.c (build_scope_forest): Initialize variable\n+\t`curr_scope'.\n+\n+\t* calls.c (expand_call): Likewise for variables\n+\t`save_pending_stack_adjust' and `save_stack_pointer_delta'.\n+\n+\t* i386.c (function_arg_advance, function_arg): Cast to avoid\n+\tsigned/unsigned warnings.\n+\n+\t* i386.h (MEMORY_MOVE_COST): Likewise.\n+\n+\t* ifcvt.c (cond_exec_process_if_block): Initialize variables\n+\t`else_start' and `else_end'.\n+\n+\t* libgcc2.h (__eh_alloc, __eh_free): Prototype.\n+\n+\t* regrename.c (rr_replace_reg): Initialize variable `dest_subregno'.\n+\n 2000-06-10  Mark Mitchell  <mark@codesourcery.com>\n \n \t* Makefile.in (libintl.a): Depend on intl.all."}, {"sha": "13943a8e3ee34d9e03bbcadcdec9123304ee1f86", "filename": "gcc/bb-reorder.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ac9118ef9eac76fe38b89c6af869203a6980969/gcc%2Fbb-reorder.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ac9118ef9eac76fe38b89c6af869203a6980969/gcc%2Fbb-reorder.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbb-reorder.c?ref=5ac9118ef9eac76fe38b89c6af869203a6980969", "patch": "@@ -964,7 +964,7 @@ build_scope_forest (forest)\n   rtx x;\n   int level, bbi, i;\n   basic_block curr_bb;\n-  scope root, curr_scope;\n+  scope root, curr_scope = 0;\n \n   forest->num_trees = 0;\n   forest->trees = NULL;"}, {"sha": "5892cba4ce19dce735350b90248d1b5d402010ca", "filename": "gcc/calls.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ac9118ef9eac76fe38b89c6af869203a6980969/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ac9118ef9eac76fe38b89c6af869203a6980969/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=5ac9118ef9eac76fe38b89c6af869203a6980969", "patch": "@@ -2490,8 +2490,8 @@ expand_call (exp, target, ignore)\n \t recursion \"call\".  That way we know any adjustment after the tail\n \t recursion call can be ignored if we indeed use the tail recursion\n \t call expansion.  */\n-      int save_pending_stack_adjust;\n-      int save_stack_pointer_delta;\n+      int save_pending_stack_adjust = 0;\n+      int save_stack_pointer_delta = 0;\n       rtx insns;\n       rtx before_call, next_arg_reg;\n "}, {"sha": "624a63b020690bb7ab39f921b57f2f7dadabde90", "filename": "gcc/ch/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ac9118ef9eac76fe38b89c6af869203a6980969/gcc%2Fch%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ac9118ef9eac76fe38b89c6af869203a6980969/gcc%2Fch%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2FChangeLog?ref=5ac9118ef9eac76fe38b89c6af869203a6980969", "patch": "@@ -1,3 +1,12 @@\n+2000-06-11  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* Makefile.in (EXPR_H): New dependency variable.\n+\t(actions.o, expr.o): Use EXPR_H.\n+\t(lang.o): Depend on RTL_H and EXPR_H.\n+\n+\t* lang.c: Include rtl.h and expr.h.\n+\t(lang_get_alias_set): Mark parameter with ATTRIBUTE_UNUSED.\n+\n 2000-06-04  Philipp Thomas  <pthomas@suse.de>\n \n \t* Makefile.in(INTLLIBS): New macro."}, {"sha": "4bc7e3b76bbdadc05f0922ba3815cd6d6d1d5a12", "filename": "gcc/ch/Makefile.in", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ac9118ef9eac76fe38b89c6af869203a6980969/gcc%2Fch%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ac9118ef9eac76fe38b89c6af869203a6980969/gcc%2Fch%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2FMakefile.in?ref=5ac9118ef9eac76fe38b89c6af869203a6980969", "patch": "@@ -249,6 +249,7 @@ native: config.status ../cc1chill$(exeext) ../chill\n \n # CHILL language specific files.\n \n+EXPR_H = $(srcdir)/../expr.h ../insn-codes.h\n RTL_H = $(srcdir)/../rtl.h $(srcdir)/../rtl.def \\\n \t$(srcdir)/../machmode.h $(srcdir)/../machmode.def\n TREE_H = $(srcdir)/../tree.h $(srcdir)/../real.h $(srcdir)/../tree.def \\\n@@ -274,8 +275,7 @@ $(srcdir)/hash.h:\n \n actions.o : actions.c $(CONFIG_H) $(CHILL_TREE_H) actions.h $(RTL_H)\t\\\n \tlex.h $(srcdir)/../flags.h $(srcdir)/../input.h\t\t\t\\\n-\t$(srcdir)/../expr.h ../insn-codes.h $(srcdir)/../system.h\t\\\n-\t$(srcdir)/../toplev.h\n+\t$(EXPR_H) $(srcdir)/../system.h $(srcdir)/../toplev.h\n convert.o : convert.c $(CONFIG_H) $(CHILL_TREE_H) $(srcdir)/../flags.h \\\n \t$(srcdir)/../tree.h $(srcdir)/../system.h $(srcdir)/../toplev.h \\\n \t$(srcdir)/../convert.h\n@@ -284,15 +284,15 @@ decl.o : decl.c $(CONFIG_H) $(CHILL_TREE_H) $(srcdir)/../flags.h lex.h \\\n except.o : except.c $(CONFIG_H) $(srcdir)/../tree.h $(RTL_H) $(CHILL_TREE_H) \\\n \t$(srcdir)/../system.h $(srcdir)/../toplev.h\n expr.o : expr.c $(CONFIG_H) $(RTL_H) $(CHILL_TREE_H) $(srcdir)/../flags.h \\\n-\t$(srcdir)/../expr.h ../insn-codes.h $(srcdir)/../tree.h lex.h \\\n-\t$(srcdir)/../system.h $(srcdir)/../toplev.h\n+\t$(EXPR_H) $(srcdir)/../tree.h lex.h $(srcdir)/../system.h \\\n+\t$(srcdir)/../toplev.h\n grant.o: grant.c $(CONFIG_H) $(CHILL_TREE_H) $(RTL_H) $(srcdir)/../flags.h \\\n \t$(srcdir)/../input.h lex.h actions.h $(srcdir)/../system.h \\\n \t$(srcdir)/../toplev.h $(srcdir)/../output.h\n inout.o : inout.c $(CONFIG_H) $(CHILL_TREE_H) $(srcdir)/../flags.h \\\n \t$(srcdir)/../input.h $(srcdir)/../system.h $(srcdir)/../toplev.h\n lang.o : lang.c $(CONFIG_H) $(CHILL_TREE_H) $(srcdir)/../input.h lex.h \\\n-\t$(srcdir)/../system.h $(srcdir)/../toplev.h\n+\t$(srcdir)/../system.h $(srcdir)/../toplev.h $(EXPR_H) $(RTL_H)\n lex.o : lex.c $(CONFIG_H) $(CHILL_TREE_H) $(RTL_H) $(srcdir)/../flags.h \\\n \t$(srcdir)/../input.h $(srcdir)/parse.h $(srcdir)/../system.h\t\\\n \t$(srcdir)/../toplev.h lex.h $(srcdir)/../dwarfout.h hash.h"}, {"sha": "86d300425ba6af5fc7fe7342e5a662639a6053f9", "filename": "gcc/ch/lang.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ac9118ef9eac76fe38b89c6af869203a6980969/gcc%2Fch%2Flang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ac9118ef9eac76fe38b89c6af869203a6980969/gcc%2Fch%2Flang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Flang.c?ref=5ac9118ef9eac76fe38b89c6af869203a6980969", "patch": "@@ -26,6 +26,8 @@ Boston, MA 02111-1307, USA.  */\n #include \"lex.h\"\n #include \"input.h\"\n #include \"toplev.h\"\n+#include \"rtl.h\"\n+#include \"expr.h\"\n \n /* Type node for boolean types.  */\n \n@@ -288,7 +290,7 @@ incomplete_type_error (value, type)\n \n HOST_WIDE_INT\n lang_get_alias_set (t)\n-     tree t;\n+     tree t ATTRIBUTE_UNUSED;\n {\n   /* ??? Need to figure out what the rules are.  Certainly we'd need\n      to handle union-like things, and probably variant records. "}, {"sha": "f91692a1c36482bebf1fbf808f1933c70ea61be4", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ac9118ef9eac76fe38b89c6af869203a6980969/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ac9118ef9eac76fe38b89c6af869203a6980969/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=5ac9118ef9eac76fe38b89c6af869203a6980969", "patch": "@@ -901,8 +901,8 @@ function_arg_advance (cum, mode, type, named)\n      tree type;\t\t\t/* type of the argument or 0 if lib support */\n      int named;\t\t\t/* whether or not the argument was named */\n {\n-  int bytes\n-    = (mode == BLKmode) ? int_size_in_bytes (type) : GET_MODE_SIZE (mode);\n+  int bytes =\n+    (mode == BLKmode) ? int_size_in_bytes (type) : (int) GET_MODE_SIZE (mode);\n   int words = (bytes + UNITS_PER_WORD - 1) / UNITS_PER_WORD;\n \n   if (TARGET_DEBUG_ARG)\n@@ -944,8 +944,8 @@ function_arg (cum, mode, type, named)\n      int named;\t\t\t/* != 0 for normal args, == 0 for ... args */\n {\n   rtx ret   = NULL_RTX;\n-  int bytes\n-    = (mode == BLKmode) ? int_size_in_bytes (type) : GET_MODE_SIZE (mode);\n+  int bytes =\n+    (mode == BLKmode) ? int_size_in_bytes (type) : (int) GET_MODE_SIZE (mode);\n   int words = (bytes + UNITS_PER_WORD - 1) / UNITS_PER_WORD;\n \n   switch (mode)"}, {"sha": "7bf706ca7b7577f2c947fc1a296722f2489783ce", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ac9118ef9eac76fe38b89c6af869203a6980969/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ac9118ef9eac76fe38b89c6af869203a6980969/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=5ac9118ef9eac76fe38b89c6af869203a6980969", "patch": "@@ -2093,7 +2093,7 @@ while (0)\n       : (GET_MODE_SIZE (MODE)==2\t\t\t\t\t\\\n \t ? (IN ? ix86_cost->int_load[1] : ix86_cost->int_store[1])\t\\\n \t : ((IN ? ix86_cost->int_load[2] : ix86_cost->int_store[2])\t\\\n-\t    * GET_MODE_SIZE (MODE) / 4))))\n+\t    * (int) GET_MODE_SIZE (MODE) / 4))))\n \n /* A C expression for the cost of a branch instruction.  A value of 1\n    is the default; other values are interpreted relative to that.  */"}, {"sha": "f20402fc5bd7b8ac150c8076ed2091ffaaebd070", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ac9118ef9eac76fe38b89c6af869203a6980969/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ac9118ef9eac76fe38b89c6af869203a6980969/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5ac9118ef9eac76fe38b89c6af869203a6980969", "patch": "@@ -1,3 +1,7 @@\n+2000-06-11  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* decl2.c (compare_options): Don't needlessly cast away const-ness.\n+\n 2000-06-10  Mark Mitchell  <mark@codesourcery.com>\n \n \t* decl.c (add_binding): Handle duplicate declarations of external"}, {"sha": "5c36132d3913a4e9ef40125387977bdba358f0d5", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ac9118ef9eac76fe38b89c6af869203a6980969/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ac9118ef9eac76fe38b89c6af869203a6980969/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=5ac9118ef9eac76fe38b89c6af869203a6980969", "patch": "@@ -581,7 +581,7 @@ compare_options (p1, p2)\n      const PTR p1;\n      const PTR p2;\n {\n-  return strcmp (*((char **) p1), *((char **) p2));\n+  return strcmp (*((const char *const *) p1), *((const char *const *) p2));\n }\n \n /* Decode the string P as a language-specific option."}, {"sha": "a31553bf3709e85724cef4e0a8c5f385a73cc035", "filename": "gcc/f/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ac9118ef9eac76fe38b89c6af869203a6980969/gcc%2Ff%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ac9118ef9eac76fe38b89c6af869203a6980969/gcc%2Ff%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog?ref=5ac9118ef9eac76fe38b89c6af869203a6980969", "patch": "@@ -1,3 +1,7 @@\n+Sun Jun 11 00:03:00 2000  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* com.c (lang_get_alias_set): Mark parameter with ATTRIBUTE_UNUSED.\n+\n 2000-06-04  Philipp Thomas  <pthomas@suse.de>\n \n \t* Makefile.in(INTLLIBS): New macro."}, {"sha": "7d593fd5b7a01684d3c03bac1e2d57770a9d7e7b", "filename": "gcc/f/com.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ac9118ef9eac76fe38b89c6af869203a6980969/gcc%2Ff%2Fcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ac9118ef9eac76fe38b89c6af869203a6980969/gcc%2Ff%2Fcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fcom.c?ref=5ac9118ef9eac76fe38b89c6af869203a6980969", "patch": "@@ -14875,7 +14875,7 @@ lang_identify ()\n \n HOST_WIDE_INT\n lang_get_alias_set (t)\n-     tree t;\n+     tree t ATTRIBUTE_UNUSED;\n {\n   /* We do not wish to use alias-set based aliasing at all.  Used in the\n      extreme (every object with its own set, with equivalences recorded)"}, {"sha": "7703d1e3289718d27d831c21acddeddfb6e90d2c", "filename": "gcc/ifcvt.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ac9118ef9eac76fe38b89c6af869203a6980969/gcc%2Fifcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ac9118ef9eac76fe38b89c6af869203a6980969/gcc%2Fifcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fifcvt.c?ref=5ac9118ef9eac76fe38b89c6af869203a6980969", "patch": "@@ -307,8 +307,8 @@ cond_exec_process_if_block (test_bb, then_bb, else_bb, join_bb)\n   rtx test_expr;\t\t/* expression in IF_THEN_ELSE that is tested */\n   rtx then_start;\t\t/* first insn in THEN block */\n   rtx then_end;\t\t\t/* last insn + 1 in THEN block */\n-  rtx else_start;\t\t/* first insn in ELSE block or NULL */\n-  rtx else_end;\t\t\t/* last insn + 1 in ELSE block */\n+  rtx else_start = NULL_RTX;\t/* first insn in ELSE block or NULL */\n+  rtx else_end = NULL_RTX;\t/* last insn + 1 in ELSE block */\n   int max;\t\t\t/* max # of insns to convert. */\n   int then_mod_ok;\t\t/* whether conditional mods are ok in THEN */\n   rtx true_expr;\t\t/* test for else block insns */"}, {"sha": "ca638d747ab0ce0bc2acced18242069b0d59becd", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ac9118ef9eac76fe38b89c6af869203a6980969/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ac9118ef9eac76fe38b89c6af869203a6980969/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=5ac9118ef9eac76fe38b89c6af869203a6980969", "patch": "@@ -1,3 +1,12 @@\n+2000-06-11  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* decl.c (create_primitive_vtable): Prototype.\n+\n+\t* jcf-write.c (generate_bytecode_insns): Initialize variable\n+\t`saved_context'.\n+\n+\t* lang.c (lang_get_alias_set): Mark parameter with ATTRIBUTE_UNUSED.\n+\n Tue Jun  6 11:39:05 2000  Tom Tromey  <tromey@ferrule.cygnus.com>\n \n \t* parse.y (check_modifiers_consistency): Don't subtract out"}, {"sha": "06156330b596bdbb34ae4fc005941485b8abe93a", "filename": "gcc/java/decl.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ac9118ef9eac76fe38b89c6af869203a6980969/gcc%2Fjava%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ac9118ef9eac76fe38b89c6af869203a6980969/gcc%2Fjava%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fdecl.c?ref=5ac9118ef9eac76fe38b89c6af869203a6980969", "patch": "@@ -48,6 +48,7 @@ static tree push_promoted_type PARAMS ((const char *, tree));\n static struct binding_level *make_binding_level PARAMS ((void));\n static boolean emit_init_test_initialization PARAMS ((struct hash_entry *,\n \t\t\t\t\t\t      hash_table_key));\n+static tree create_primitive_vtable PARAMS ((const char *));\n \n /* Set to non-zero value in order to emit class initilization code\n    before static field references.  */"}, {"sha": "64e490581ecfbf601054ee2eb87f00b263d76c3d", "filename": "gcc/java/jcf-write.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ac9118ef9eac76fe38b89c6af869203a6980969/gcc%2Fjava%2Fjcf-write.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ac9118ef9eac76fe38b89c6af869203a6980969/gcc%2Fjava%2Fjcf-write.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-write.c?ref=5ac9118ef9eac76fe38b89c6af869203a6980969", "patch": "@@ -2534,7 +2534,7 @@ generate_bytecode_insns (exp, target, state)\n \t  NOTE_POP (1);  /* Pop implicit this. */\n \tif (TREE_CODE (f) == FUNCTION_DECL && DECL_CONTEXT (f) != NULL_TREE)\n \t  {\n-\t    tree saved_context;\n+\t    tree saved_context = NULL_TREE;\n \t    int index, interface = 0;\n \t    RESERVE (5);\n \t    if (METHOD_STATIC (f))"}, {"sha": "c86b568fb5f9fb58c8398747bea8dc82071054dc", "filename": "gcc/java/lang.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ac9118ef9eac76fe38b89c6af869203a6980969/gcc%2Fjava%2Flang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ac9118ef9eac76fe38b89c6af869203a6980969/gcc%2Fjava%2Flang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang.c?ref=5ac9118ef9eac76fe38b89c6af869203a6980969", "patch": "@@ -652,7 +652,7 @@ lang_print_xnode (file, node, indent)\n \n HOST_WIDE_INT\n lang_get_alias_set (t)\n-     tree t;\n+     tree t ATTRIBUTE_UNUSED;\n {\n   return -1;\n }"}, {"sha": "fdb0f49513f4bbed4dd1bd6f3a9f22b428a04f9c", "filename": "gcc/libgcc2.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ac9118ef9eac76fe38b89c6af869203a6980969/gcc%2Flibgcc2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ac9118ef9eac76fe38b89c6af869203a6980969/gcc%2Flibgcc2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibgcc2.h?ref=5ac9118ef9eac76fe38b89c6af869203a6980969", "patch": "@@ -42,6 +42,8 @@ extern void __sjthrow (void) __attribute__ ((__noreturn__));\n extern void __sjpopnthrow (void) __attribute__ ((__noreturn__));\n extern void __eprintf (const char *, const char *, unsigned int, const char *)\n   __attribute__ ((__noreturn__));\n+extern void *__eh_alloc (size_t);\n+extern void __eh_free (void *);\n \n struct bb;\n extern void __bb_exit_func (void);"}, {"sha": "5f41f6bba0cb481313ea4c4165053bc79ed021eb", "filename": "gcc/regrename.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ac9118ef9eac76fe38b89c6af869203a6980969/gcc%2Fregrename.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ac9118ef9eac76fe38b89c6af869203a6980969/gcc%2Fregrename.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregrename.c?ref=5ac9118ef9eac76fe38b89c6af869203a6980969", "patch": "@@ -671,7 +671,7 @@ rr_replace_reg (x, reg_use, reg_sub, replace_type, insn, status)\n \t\t\t\t       replace_type, insn, status);\n       else if (replace_type == SOURCE)\n \t{\n-\t  unsigned int dest_subregno;\n+\t  unsigned int dest_subregno = 0;\n \t  int had_subreg = GET_CODE (SET_DEST (x)) == SUBREG;\n \n \t  if (had_subreg)"}]}