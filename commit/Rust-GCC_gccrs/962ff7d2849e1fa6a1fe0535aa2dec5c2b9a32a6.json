{"sha": "962ff7d2849e1fa6a1fe0535aa2dec5c2b9a32a6", "node_id": "C_kwDOANBUbNoAKDk2MmZmN2QyODQ5ZTFmYTZhMWZlMDUzNWFhMmRlYzVjMmI5YTMyYTY", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2021-11-07T14:38:35Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2021-11-07T22:06:46Z"}, "message": "Fix keyword name for co_reduce.\n\ngcc/fortran/ChangeLog:\n\n\t* intrinsic.c (add_subroutines): Change keyword \"operator\"\n\tto the correct one, \"operation\".\n\t* check.c (gfc_check_co_reduce): Change OPERATOR to\n\tOPERATION in error messages.\n\t* intrinsic.texi: Change OPERATOR to OPERATION in\n\tdocumentation.\n\ngcc/testsuite/ChangeLog:\n\n\t* gfortran.dg/co_reduce_2.f90: New test.\n\t* gfortran.dg/coarray_collectives_14.f90: Change OPERATOR\n\tto OPERATION.\n\t* gfortran.dg/coarray_collectives_16.f90: Likewise.\n\t* gfortran.dg/coarray_collectives_9.f90: Likewise.\n\n\tCo-authored by: Steve Kargl <steve@gcc.gnu.org>", "tree": {"sha": "3c3dcbabe1b94a3b0c19d7617190e457afa7451c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3c3dcbabe1b94a3b0c19d7617190e457afa7451c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/962ff7d2849e1fa6a1fe0535aa2dec5c2b9a32a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/962ff7d2849e1fa6a1fe0535aa2dec5c2b9a32a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/962ff7d2849e1fa6a1fe0535aa2dec5c2b9a32a6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/962ff7d2849e1fa6a1fe0535aa2dec5c2b9a32a6/comments", "author": null, "committer": null, "parents": [{"sha": "87e57378ba554212a32a0743fee03481d1289318", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87e57378ba554212a32a0743fee03481d1289318", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87e57378ba554212a32a0743fee03481d1289318"}], "stats": {"total": 77, "additions": 46, "deletions": 31}, "files": [{"sha": "15772009af47f662b392b1da51d11d78ae018e7f", "filename": "gcc/fortran/check.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/962ff7d2849e1fa6a1fe0535aa2dec5c2b9a32a6/gcc%2Ffortran%2Fcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/962ff7d2849e1fa6a1fe0535aa2dec5c2b9a32a6/gcc%2Ffortran%2Fcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcheck.c?ref=962ff7d2849e1fa6a1fe0535aa2dec5c2b9a32a6", "patch": "@@ -2265,7 +2265,7 @@ gfc_check_co_reduce (gfc_expr *a, gfc_expr *op, gfc_expr *result_image,\n   attr = gfc_expr_attr (op);\n   if (!attr.pure || !attr.function)\n     {\n-      gfc_error (\"OPERATOR argument at %L must be a PURE function\",\n+      gfc_error (\"OPERATION argument at %L must be a PURE function\",\n \t\t &op->where);\n       return false;\n     }\n@@ -2292,7 +2292,7 @@ gfc_check_co_reduce (gfc_expr *a, gfc_expr *op, gfc_expr *result_image,\n \n   if (!formal || !formal->next || formal->next->next)\n     {\n-      gfc_error (\"The function passed as OPERATOR at %L shall have two \"\n+      gfc_error (\"The function passed as OPERATION at %L shall have two \"\n \t\t \"arguments\", &op->where);\n       return false;\n     }\n@@ -2303,15 +2303,15 @@ gfc_check_co_reduce (gfc_expr *a, gfc_expr *op, gfc_expr *result_image,\n   if (!gfc_compare_types (&a->ts, &sym->result->ts))\n     {\n       gfc_error (\"The A argument at %L has type %s but the function passed as \"\n-\t\t \"OPERATOR at %L returns %s\",\n+\t\t \"OPERATION at %L returns %s\",\n \t\t &a->where, gfc_typename (a), &op->where,\n \t\t gfc_typename (&sym->result->ts));\n       return false;\n     }\n   if (!gfc_compare_types (&a->ts, &formal->sym->ts)\n       || !gfc_compare_types (&a->ts, &formal->next->sym->ts))\n     {\n-      gfc_error (\"The function passed as OPERATOR at %L has arguments of type \"\n+      gfc_error (\"The function passed as OPERATION at %L has arguments of type \"\n \t\t \"%s and %s but shall have type %s\", &op->where,\n \t\t gfc_typename (&formal->sym->ts),\n \t\t gfc_typename (&formal->next->sym->ts), gfc_typename (a));\n@@ -2322,37 +2322,37 @@ gfc_check_co_reduce (gfc_expr *a, gfc_expr *op, gfc_expr *result_image,\n       || formal->next->sym->attr.allocatable || formal->sym->attr.pointer\n       || formal->next->sym->attr.pointer)\n     {\n-      gfc_error (\"The function passed as OPERATOR at %L shall have scalar \"\n+      gfc_error (\"The function passed as OPERATION at %L shall have scalar \"\n \t\t \"nonallocatable nonpointer arguments and return a \"\n \t\t \"nonallocatable nonpointer scalar\", &op->where);\n       return false;\n     }\n \n   if (formal->sym->attr.value != formal->next->sym->attr.value)\n     {\n-      gfc_error (\"The function passed as OPERATOR at %L shall have the VALUE \"\n+      gfc_error (\"The function passed as OPERATION at %L shall have the VALUE \"\n \t\t \"attribute either for none or both arguments\", &op->where);\n       return false;\n     }\n \n   if (formal->sym->attr.target != formal->next->sym->attr.target)\n     {\n-      gfc_error (\"The function passed as OPERATOR at %L shall have the TARGET \"\n+      gfc_error (\"The function passed as OPERATION at %L shall have the TARGET \"\n \t\t \"attribute either for none or both arguments\", &op->where);\n       return false;\n     }\n \n   if (formal->sym->attr.asynchronous != formal->next->sym->attr.asynchronous)\n     {\n-      gfc_error (\"The function passed as OPERATOR at %L shall have the \"\n+      gfc_error (\"The function passed as OPERATION at %L shall have the \"\n \t\t \"ASYNCHRONOUS attribute either for none or both arguments\",\n \t\t &op->where);\n       return false;\n     }\n \n   if (formal->sym->attr.optional || formal->next->sym->attr.optional)\n     {\n-      gfc_error (\"The function passed as OPERATOR at %L shall not have the \"\n+      gfc_error (\"The function passed as OPERATION at %L shall not have the \"\n \t\t \"OPTIONAL attribute for either of the arguments\", &op->where);\n       return false;\n     }\n@@ -2383,14 +2383,14 @@ gfc_check_co_reduce (gfc_expr *a, gfc_expr *op, gfc_expr *result_image,\n \t       || (formal_size2 && actual_size != formal_size2)))\n \t{\n \t  gfc_error (\"The character length of the A argument at %L and of the \"\n-\t\t     \"arguments of the OPERATOR at %L shall be the same\",\n+\t\t     \"arguments of the OPERATION at %L shall be the same\",\n \t\t     &a->where, &op->where);\n \t  return false;\n \t}\n       if (actual_size && result_size && actual_size != result_size)\n \t{\n \t  gfc_error (\"The character length of the A argument at %L and of the \"\n-\t\t     \"function result of the OPERATOR at %L shall be the same\",\n+\t\t     \"function result of the OPERATION at %L shall be the same\",\n \t\t     &a->where, &op->where);\n \t  return false;\n \t}"}, {"sha": "a5a087be08362128874015351f99c2fe0dd45c2c", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/962ff7d2849e1fa6a1fe0535aa2dec5c2b9a32a6/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/962ff7d2849e1fa6a1fe0535aa2dec5c2b9a32a6/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=962ff7d2849e1fa6a1fe0535aa2dec5c2b9a32a6", "patch": "@@ -3806,7 +3806,7 @@ add_subroutines (void)\n \t      BT_UNKNOWN, 0, GFC_STD_F2018,\n \t      gfc_check_co_reduce, NULL, NULL,\n \t      a, BT_REAL, dr, REQUIRED, INTENT_INOUT,\n-\t      \"operator\", BT_INTEGER, di, REQUIRED, INTENT_IN,\n+\t      \"operation\", BT_INTEGER, di, REQUIRED, INTENT_IN,\n \t      result_image, BT_INTEGER, di, OPTIONAL, INTENT_IN,\n \t      stat, BT_INTEGER, di, OPTIONAL, INTENT_OUT,\n \t      errmsg, BT_CHARACTER, dc, OPTIONAL, INTENT_INOUT);"}, {"sha": "c757afd869062a382d4a5018e9eb6e45abe7ed27", "filename": "gcc/fortran/intrinsic.texi", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/962ff7d2849e1fa6a1fe0535aa2dec5c2b9a32a6/gcc%2Ffortran%2Fintrinsic.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/962ff7d2849e1fa6a1fe0535aa2dec5c2b9a32a6/gcc%2Ffortran%2Fintrinsic.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.texi?ref=962ff7d2849e1fa6a1fe0535aa2dec5c2b9a32a6", "patch": "@@ -3841,7 +3841,7 @@ end program test\n @table @asis\n @item @emph{Description}:\n @code{CO_REDUCE} determines element-wise the reduction of the value of @var{A}\n-on all images of the current team.  The pure function passed as @var{OPERATOR}\n+on all images of the current team.  The pure function passed as @var{OPERATION}\n is used to pairwise reduce the values of @var{A} by passing either the value\n of @var{A} of different images or the result values of such a reduction as\n argument.  If @var{A} is an array, the deduction is done element wise. If\n@@ -3860,7 +3860,7 @@ Technical Specification (TS) 18508 or later\n Collective subroutine\n \n @item @emph{Syntax}:\n-@code{CALL CO_REDUCE(A, OPERATOR, [, RESULT_IMAGE, STAT, ERRMSG])}\n+@code{CALL CO_REDUCE(A, OPERATION, [, RESULT_IMAGE, STAT, ERRMSG])}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .20 .65\n@@ -3869,12 +3869,12 @@ nonpolymorphic. If it is allocatable, it shall be allocated; if it is a pointer,\n it shall be associated.  @var{A} shall have the same type and type parameters on\n all images of the team; if it is an array, it shall have the same shape on all\n images.\n-@item @var{OPERATOR}     @tab pure function with two scalar nonallocatable\n+@item @var{OPERATION}     @tab pure function with two scalar nonallocatable\n arguments, which shall be nonpolymorphic and have the same type and type\n parameters as @var{A}.  The function shall return a nonallocatable scalar of\n the same type and type parameters as @var{A}.  The function shall be the same on\n all images and with regards to the arguments mathematically commutative and\n-associative.  Note that @var{OPERATOR} may not be an elemental function, unless\n+associative.  Note that @var{OPERATION} may not be an elemental function, unless\n it is an intrisic function.\n @item @var{RESULT_IMAGE} @tab (optional) a scalar integer expression; if\n present, it shall have the same value on all images and refer to an\n@@ -3888,7 +3888,7 @@ image of the current team.\n program test\n   integer :: val\n   val = this_image ()\n-  call co_reduce (val, result_image=1, operator=myprod)\n+  call co_reduce (val, result_image=1, operation=myprod)\n   if (this_image() == 1) then\n     write(*,*) \"Product value\", val  ! prints num_images() factorial\n   end if"}, {"sha": "42bd02a714e1f8b3a96bbdd32db943e646ea11c3", "filename": "gcc/testsuite/gfortran.dg/co_reduce_2.f90", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/962ff7d2849e1fa6a1fe0535aa2dec5c2b9a32a6/gcc%2Ftestsuite%2Fgfortran.dg%2Fco_reduce_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/962ff7d2849e1fa6a1fe0535aa2dec5c2b9a32a6/gcc%2Ftestsuite%2Fgfortran.dg%2Fco_reduce_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fco_reduce_2.f90?ref=962ff7d2849e1fa6a1fe0535aa2dec5c2b9a32a6", "patch": "@@ -0,0 +1,15 @@\n+! { dg-do compile }\n+! { dg-options \"-fcoarray=single\" }\n+! PR 103054 - wrong keyword name.\n+! Original test case by Damian Rouson.\n+program main\n+  implicit none\n+  logical :: co_all= .true.\n+  call co_reduce(co_all, operator=both) ! { dg-error \"Cannot find keyword\" }\n+  call co_reduce(co_all, operation=both)\n+contains\n+  logical pure function both(lhs,rhs)\n+    logical, intent(in) :: lhs, rhs\n+    both = lhs .and. rhs\n+  end function\n+end"}, {"sha": "15679eed8944dcc940a944373c3177e1cd2d3c36", "filename": "gcc/testsuite/gfortran.dg/coarray_collectives_14.f90", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/962ff7d2849e1fa6a1fe0535aa2dec5c2b9a32a6/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_collectives_14.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/962ff7d2849e1fa6a1fe0535aa2dec5c2b9a32a6/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_collectives_14.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_collectives_14.f90?ref=962ff7d2849e1fa6a1fe0535aa2dec5c2b9a32a6", "patch": "@@ -63,10 +63,10 @@ program test\n   call co_reduce(caf, dt%arg3) ! { dg-error \"shall have two arguments\" }\n   call co_reduce(caf, elem) ! { dg-error \"ELEMENTAL non-INTRINSIC procedure 'elem' is not allowed as an actual argument\" }\n   call co_reduce(caf, dt%elem) ! { dg-error \"ELEMENTAL procedure pointer component 'elem' is not allowed as an actual argument\" }\n-  call co_reduce(caf, realo) ! { dg-error \"A argument at .1. has type INTEGER.4. but the function passed as OPERATOR at .2. returns REAL.4.\" }\n-  call co_reduce(caf, dt%realo) ! { dg-error \"A argument at .1. has type INTEGER.4. but the function passed as OPERATOR at .2. returns REAL.4.\" }\n-  call co_reduce(caf, int8) ! { dg-error \"A argument at .1. has type INTEGER.4. but the function passed as OPERATOR at .2. returns INTEGER.8.\" }\n-  call co_reduce(caf, dt%int8) ! { dg-error \"A argument at .1. has type INTEGER.4. but the function passed as OPERATOR at .2. returns INTEGER.8.\" }\n+  call co_reduce(caf, realo) ! { dg-error \"A argument at .1. has type INTEGER.4. but the function passed as OPERATION at .2. returns REAL.4.\" }\n+  call co_reduce(caf, dt%realo) ! { dg-error \"A argument at .1. has type INTEGER.4. but the function passed as OPERATION at .2. returns REAL.4.\" }\n+  call co_reduce(caf, int8) ! { dg-error \"A argument at .1. has type INTEGER.4. but the function passed as OPERATION at .2. returns INTEGER.8.\" }\n+  call co_reduce(caf, dt%int8) ! { dg-error \"A argument at .1. has type INTEGER.4. but the function passed as OPERATION at .2. returns INTEGER.8.\" }\n   call co_reduce(caf, arr) ! { dg-error \"scalar nonallocatable nonpointer arguments and return a nonallocatable nonpointer scalar\" }\n   call co_reduce(caf, dt%arr) ! { dg-error \"scalar nonallocatable nonpointer arguments and return a nonallocatable nonpointer scalar\" }\n   call co_reduce(caf, ptr) ! { dg-error \"scalar nonallocatable nonpointer arguments and return a nonallocatable nonpointer scalar\" }\n@@ -83,10 +83,10 @@ program test\n   call co_reduce(caf, dt%tgt) ! { dg-error \"shall have the TARGET attribute either for none or both arguments\" }\n   call co_reduce(c4, char44) ! OK\n   call co_reduce(c4, dt%char44) ! OK\n-  call co_reduce(c3, char34) ! { dg-error \"character length of the A argument at .1. and of the arguments of the OPERATOR at .2. shall be the same\" }\n-  call co_reduce(c3, dt%char34) ! { dg-error \"character length of the A argument at .1. and of the arguments of the OPERATOR at .2. shall be the same\" }\n-  call co_reduce(c4, char34) ! { dg-error \"The character length of the A argument at .1. and of the function result of the OPERATOR at .2. shall be the same\" }\n-  call co_reduce(c4, dt%char34) ! { dg-error \"The character length of the A argument at .1. and of the function result of the OPERATOR at .2. shall be the same\" }\n+  call co_reduce(c3, char34) ! { dg-error \"character length of the A argument at .1. and of the arguments of the OPERATION at .2. shall be the same\" }\n+  call co_reduce(c3, dt%char34) ! { dg-error \"character length of the A argument at .1. and of the arguments of the OPERATION at .2. shall be the same\" }\n+  call co_reduce(c4, char34) ! { dg-error \"The character length of the A argument at .1. and of the function result of the OPERATION at .2. shall be the same\" }\n+  call co_reduce(c4, dt%char34) ! { dg-error \"The character length of the A argument at .1. and of the function result of the OPERATION at .2. shall be the same\" }\n \n contains\n   pure integer function valid(x,y)"}, {"sha": "8419cf9159d96ffbe29c54e604201a88cf8bb2cb", "filename": "gcc/testsuite/gfortran.dg/coarray_collectives_16.f90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/962ff7d2849e1fa6a1fe0535aa2dec5c2b9a32a6/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_collectives_16.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/962ff7d2849e1fa6a1fe0535aa2dec5c2b9a32a6/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_collectives_16.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_collectives_16.f90?ref=962ff7d2849e1fa6a1fe0535aa2dec5c2b9a32a6", "patch": "@@ -15,9 +15,9 @@ program test\n   character(len=99) :: val3\n   integer :: res\n \n-  call co_reduce(val1, operator=fr, result_image=num_images(), stat=stat1, errmsg=errmesg1)\n-  call co_reduce(val2, operator=gz, result_image=4, stat=stat2, errmsg=errmesg2)\n-  call co_reduce(val3, operator=hc, result_image=res,stat=stat3, errmsg=errmesg3)\n+  call co_reduce(val1, operation=fr, result_image=num_images(), stat=stat1, errmsg=errmesg1)\n+  call co_reduce(val2, operation=gz, result_image=4, stat=stat2, errmsg=errmesg2)\n+  call co_reduce(val3, operation=hc, result_image=res,stat=stat3, errmsg=errmesg3)\n contains\n   pure real function fr(x,y)\n     real, value :: x, y"}, {"sha": "ee3902c25e202116e81a4b2b74fb0d89e0f15881", "filename": "gcc/testsuite/gfortran.dg/coarray_collectives_9.f90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/962ff7d2849e1fa6a1fe0535aa2dec5c2b9a32a6/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_collectives_9.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/962ff7d2849e1fa6a1fe0535aa2dec5c2b9a32a6/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_collectives_9.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_collectives_9.f90?ref=962ff7d2849e1fa6a1fe0535aa2dec5c2b9a32a6", "patch": "@@ -26,10 +26,10 @@ end function red_f2\n   end interface\n \n   call co_broadcast(\"abc\") ! { dg-error \"Missing actual argument 'source_image' in call to 'co_broadcast'\" }\n-  call co_reduce(\"abc\") ! { dg-error \"Missing actual argument 'operator' in call to 'co_reduce'\" }\n+  call co_reduce(\"abc\") ! { dg-error \"Missing actual argument 'operation' in call to 'co_reduce'\" }\n   call co_broadcast(1, source_image=1) ! { dg-error \"'a' argument of 'co_broadcast' intrinsic at .1. must be a variable\" }\n-  call co_reduce(a=1, operator=red_f) ! { dg-error \"'a' argument of 'co_reduce' intrinsic at .1. must be a variable\" }\n-  call co_reduce(a=val, operator=red_f2) ! { dg-error \"OPERATOR argument at \\\\(1\\\\) must be a PURE function\" }\n+  call co_reduce(a=1, operation=red_f) ! { dg-error \"'a' argument of 'co_reduce' intrinsic at .1. must be a variable\" }\n+  call co_reduce(a=val, operation=red_f2) ! { dg-error \"OPERATION argument at \\\\(1\\\\) must be a PURE function\" }\n \n   call co_broadcast(val, source_image=[1,2]) ! { dg-error \"must be a scalar\" }\n   call co_broadcast(val, source_image=1.0) ! { dg-error \"must be INTEGER\" }"}]}