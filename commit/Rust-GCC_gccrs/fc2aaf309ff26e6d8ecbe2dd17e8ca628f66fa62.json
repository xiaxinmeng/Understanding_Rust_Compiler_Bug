{"sha": "fc2aaf309ff26e6d8ecbe2dd17e8ca628f66fa62", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmMyYWFmMzA5ZmYyNmU2ZDhlY2JlMmRkMTdlOGNhNjI4ZjY2ZmE2Mg==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@cam.ac.uk", "date": "2000-12-23T00:48:08Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2000-12-23T00:48:08Z"}, "message": "c-common.c (builtin_function_2): New function.\n\n\t* c-common.c (builtin_function_2): New function.\n\t(c_common_nodes_and_builtins): Use it to define each pair (foo,\n\t__builtin_foo) of builtins in one place.\n\nFrom-SVN: r38474", "tree": {"sha": "8a5fcffb12c146c8c2aea25507a767c4f2681747", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8a5fcffb12c146c8c2aea25507a767c4f2681747"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fc2aaf309ff26e6d8ecbe2dd17e8ca628f66fa62", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc2aaf309ff26e6d8ecbe2dd17e8ca628f66fa62", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc2aaf309ff26e6d8ecbe2dd17e8ca628f66fa62", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc2aaf309ff26e6d8ecbe2dd17e8ca628f66fa62/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e2851abe86d4d7d9cf4fe5b91466f4970bc0652", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e2851abe86d4d7d9cf4fe5b91466f4970bc0652", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e2851abe86d4d7d9cf4fe5b91466f4970bc0652"}], "stats": {"total": 427, "additions": 214, "deletions": 213}, "files": [{"sha": "032125bd9b5e209e09a6ebc76a771a43f860d22d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc2aaf309ff26e6d8ecbe2dd17e8ca628f66fa62/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc2aaf309ff26e6d8ecbe2dd17e8ca628f66fa62/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fc2aaf309ff26e6d8ecbe2dd17e8ca628f66fa62", "patch": "@@ -1,3 +1,9 @@\n+2000-12-23  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* c-common.c (builtin_function_2): New function.\n+\t(c_common_nodes_and_builtins): Use it to define each pair (foo,\n+\t__builtin_foo) of builtins in one place.\n+\n 2000-12-22  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* gccbug.in: Add libgcj and preprocessor categories."}, {"sha": "3e1c0df48afadcbb09952785a392c248390195c3", "filename": "gcc/c-common.c", "status": "modified", "additions": 208, "deletions": 213, "changes": 421, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc2aaf309ff26e6d8ecbe2dd17e8ca628f66fa62/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc2aaf309ff26e6d8ecbe2dd17e8ca628f66fa62/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=fc2aaf309ff26e6d8ecbe2dd17e8ca628f66fa62", "patch": "@@ -4836,6 +4836,10 @@ truthvalue_conversion (expr)\n   return build_binary_op (NE_EXPR, expr, integer_zero_node, 1);\n }\n \f\n+static tree builtin_function_2 PARAMS ((const char *, const char *, tree, tree,\n+\t\t\t\t\tint, enum built_in_class, int, int,\n+\t\t\t\t\tint));\n+\n /* Make a variant type in the proper way for C/C++, propagating qualifiers\n    down to the element type of an array.  */\n \n@@ -5244,60 +5248,57 @@ c_common_nodes_and_builtins ()\n \n   builtin_function (\"__builtin_alloca\", ptr_ftype_sizetype,\n \t\t    BUILT_IN_ALLOCA, BUILT_IN_NORMAL, \"alloca\");\n-  builtin_function (\"__builtin_ffs\", int_ftype_int, BUILT_IN_FFS,\n-\t\t    BUILT_IN_NORMAL, NULL_PTR);\n-  /* Define alloca, ffs as builtins.\n-     Declare _exit just to mark it as volatile.  */\n-  if (! flag_no_builtin && ! flag_no_nonansi_builtin)\n-    {\n+  builtin_function_2 (\"__builtin_ffs\", \"ffs\",\n+\t\t      int_ftype_int, int_ftype_int,\n+\t\t      BUILT_IN_FFS, BUILT_IN_NORMAL, 0, 1, 0);\n+  /* Define alloca as builtin, unless SMALL_STACK.  */\n #ifndef SMALL_STACK\n-      temp = builtin_function (\"alloca\", ptr_ftype_sizetype,\n-\t\t\t       BUILT_IN_ALLOCA, BUILT_IN_NORMAL, NULL_PTR);\n-      /* Suppress error if redefined as a non-function.  */\n-      DECL_BUILT_IN_NONANSI (temp) = 1;\n+  builtin_function_2 (NULL_PTR, \"alloca\", NULL_TREE, ptr_ftype_sizetype,\n+\t\t      BUILT_IN_ALLOCA, BUILT_IN_NORMAL, 0, 1, 0);\n #endif\n-      temp = builtin_function (\"ffs\", int_ftype_int, BUILT_IN_FFS,\n-\t\t\t       BUILT_IN_NORMAL, NULL_PTR);\n-      /* Suppress error if redefined as a non-function.  */\n-      DECL_BUILT_IN_NONANSI (temp) = 1;\n-      temp = builtin_function (\"_exit\", void_ftype_int,\n-\t\t\t       0, NOT_BUILT_IN, NULL_PTR);\n-      TREE_THIS_VOLATILE (temp) = 1;\n-      TREE_SIDE_EFFECTS (temp) = 1;\n-      /* Suppress error if redefined as a non-function.  */\n-      DECL_BUILT_IN_NONANSI (temp) = 1;\n-\n-      temp = builtin_function (\"index\", string_ftype_cstring_int,\n-\t\t\t       BUILT_IN_INDEX, BUILT_IN_NORMAL, NULL_PTR);\n-      DECL_BUILT_IN_NONANSI (temp) = 1;\n-      temp = builtin_function (\"rindex\", string_ftype_cstring_int,\n-\t\t\t       BUILT_IN_RINDEX, BUILT_IN_NORMAL, NULL_PTR);\n-      DECL_BUILT_IN_NONANSI (temp) = 1;\n-      /* The system prototypes for these functions have many\n-\t variations, so don't specify parameters to avoid conflicts.\n-\t The expand_* functions check the argument types anyway.  */\n-      temp = builtin_function (\"bzero\", void_ftype_any,\n-\t\t\t       BUILT_IN_BZERO, BUILT_IN_NORMAL, NULL_PTR);\n-      DECL_BUILT_IN_NONANSI (temp) = 1;\n-      temp = builtin_function (\"bcmp\", int_ftype_any,\n-\t\t\t       BUILT_IN_BCMP, BUILT_IN_NORMAL, NULL_PTR);\n-      DECL_BUILT_IN_NONANSI (temp) = 1;\n-    }\n+  /* Declare _exit just to mark it as non-returning.  */\n+  builtin_function_2 (NULL_PTR, \"_exit\", NULL_TREE, void_ftype_int,\n+\t\t      0, NOT_BUILT_IN, 0, 1, 1);\n+\n+  builtin_function_2 (\"__builtin_index\", \"index\",\n+\t\t      string_ftype_cstring_int, string_ftype_cstring_int,\n+\t\t      BUILT_IN_INDEX, BUILT_IN_NORMAL, 1, 1, 0);\n+  builtin_function_2 (\"__builtin_rindex\", \"rindex\",\n+\t\t      string_ftype_cstring_int, string_ftype_cstring_int,\n+\t\t      BUILT_IN_RINDEX, BUILT_IN_NORMAL, 1, 1, 0);\n+\n+  /* The system prototypes for these functions have many\n+     variations, so don't specify parameters to avoid conflicts.\n+     The expand_* functions check the argument types anyway.  */\n+  builtin_function_2 (\"__builtin_bzero\", \"bzero\",\n+\t\t      bzero_ftype, void_ftype_any,\n+\t\t      BUILT_IN_BZERO, BUILT_IN_NORMAL, 1, 1, 0);\n+  builtin_function_2 (\"__builtin_bcmp\", \"bcmp\",\n+\t\t      bcmp_ftype, int_ftype_any,\n+\t\t      BUILT_IN_BCMP, BUILT_IN_NORMAL, 1, 1, 0);\n+\n+  builtin_function_2 (\"__builtin_abs\", \"abs\",\n+\t\t      int_ftype_int, int_ftype_int,\n+\t\t      BUILT_IN_ABS, BUILT_IN_NORMAL, 0, 0, 0);\n+  builtin_function_2 (\"__builtin_fabsf\", \"fabsf\",\n+\t\t      float_ftype_float, float_ftype_float,\n+\t\t      BUILT_IN_FABS, BUILT_IN_NORMAL, 0, 0, 0);\n+  builtin_function_2 (\"__builtin_fabs\", \"fabs\",\n+\t\t      double_ftype_double, double_ftype_double,\n+\t\t      BUILT_IN_FABS, BUILT_IN_NORMAL, 0, 0, 0);\n+  builtin_function_2 (\"__builtin_fabsl\", \"fabsl\",\n+\t\t      ldouble_ftype_ldouble, ldouble_ftype_ldouble,\n+\t\t      BUILT_IN_FABS, BUILT_IN_NORMAL, 0, 0, 0);\n+  builtin_function_2 (\"__builtin_labs\", \"labs\",\n+\t\t      long_ftype_long, long_ftype_long,\n+\t\t      BUILT_IN_LABS, BUILT_IN_NORMAL, 0, 0, 0);\n+  builtin_function_2 (\"__builtin_llabs\", \"llabs\",\n+\t\t      longlong_ftype_longlong, longlong_ftype_longlong,\n+\t\t      BUILT_IN_LLABS, BUILT_IN_NORMAL, 0, !flag_isoc99, 0);\n+  builtin_function_2 (\"__builtin_imaxabs\", \"imaxabs\",\n+\t\t      intmax_ftype_intmax, intmax_ftype_intmax,\n+\t\t      BUILT_IN_IMAXABS, BUILT_IN_NORMAL, 0, !flag_isoc99, 0);\n \n-  builtin_function (\"__builtin_abs\", int_ftype_int, BUILT_IN_ABS,\n-\t\t    BUILT_IN_NORMAL, NULL_PTR);\n-  builtin_function (\"__builtin_fabsf\", float_ftype_float, BUILT_IN_FABS,\n-\t\t    BUILT_IN_NORMAL, NULL_PTR);\n-  builtin_function (\"__builtin_fabs\", double_ftype_double, BUILT_IN_FABS,\n-\t\t    BUILT_IN_NORMAL, NULL_PTR);\n-  builtin_function (\"__builtin_fabsl\", ldouble_ftype_ldouble, BUILT_IN_FABS,\n-\t\t    BUILT_IN_NORMAL, NULL_PTR);\n-  builtin_function (\"__builtin_labs\", long_ftype_long, BUILT_IN_LABS,\n-\t\t    BUILT_IN_NORMAL, NULL_PTR);\n-  builtin_function (\"__builtin_llabs\", longlong_ftype_longlong, BUILT_IN_LLABS,\n-\t\t    BUILT_IN_NORMAL, NULL_PTR);\n-  builtin_function (\"__builtin_imaxabs\", intmax_ftype_intmax, BUILT_IN_IMAXABS,\n-\t\t    BUILT_IN_NORMAL, NULL_PTR);\n   builtin_function (\"__builtin_saveregs\", ptr_ftype, BUILT_IN_SAVEREGS,\n \t\t    BUILT_IN_NORMAL, NULL_PTR);\n   builtin_function (\"__builtin_classify_type\", default_function_type,\n@@ -5389,76 +5390,99 @@ c_common_nodes_and_builtins ()\n \t\t    BUILT_IN_EXPECT, BUILT_IN_NORMAL, NULL_PTR);\n \n   /* Currently under experimentation.  */\n-  builtin_function (\"__builtin_memcpy\", memcpy_ftype, BUILT_IN_MEMCPY,\n-\t\t    BUILT_IN_NORMAL, \"memcpy\");\n-  builtin_function (\"__builtin_memcmp\", int_ftype_cptr_cptr_sizet,\n-\t\t    BUILT_IN_MEMCMP, BUILT_IN_NORMAL, \"memcmp\");\n-  builtin_function (\"__builtin_memset\", memset_ftype,\n-\t\t    BUILT_IN_MEMSET, BUILT_IN_NORMAL, \"memset\");\n-  builtin_function (\"__builtin_bzero\", bzero_ftype,\n-\t\t    BUILT_IN_BZERO, BUILT_IN_NORMAL, \"bzero\");\n-  builtin_function (\"__builtin_bcmp\", bcmp_ftype,\n-\t\t    BUILT_IN_BCMP, BUILT_IN_NORMAL, \"bcmp\");\n-  builtin_function (\"__builtin_index\", string_ftype_cstring_int,\n-\t\t    BUILT_IN_INDEX, BUILT_IN_NORMAL, \"index\");\n-  builtin_function (\"__builtin_rindex\", string_ftype_cstring_int,\n-\t\t    BUILT_IN_RINDEX, BUILT_IN_NORMAL, \"rindex\");\n+  builtin_function_2 (\"__builtin_memcpy\", \"memcpy\",\n+\t\t      memcpy_ftype, memcpy_ftype,\n+\t\t      BUILT_IN_MEMCPY, BUILT_IN_NORMAL, 1, 0, 0);\n+  builtin_function_2 (\"__builtin_memcmp\", \"memcmp\",\n+\t\t      int_ftype_cptr_cptr_sizet, int_ftype_cptr_cptr_sizet,\n+\t\t      BUILT_IN_MEMCMP, BUILT_IN_NORMAL, 1, 0, 0);\n+  builtin_function_2 (\"__builtin_memset\", \"memset\",\n+\t\t      memset_ftype, memset_ftype,\n+\t\t      BUILT_IN_MEMSET, BUILT_IN_NORMAL, 1, 0, 0);\n   built_in_decls[BUILT_IN_STRCMP] =\n-    builtin_function (\"__builtin_strcmp\", int_ftype_cstring_cstring,\n-\t\t      BUILT_IN_STRCMP, BUILT_IN_NORMAL, \"strcmp\");\n-  builtin_function (\"__builtin_strncmp\", int_ftype_cstring_cstring_sizet,\n-\t\t    BUILT_IN_STRNCMP, BUILT_IN_NORMAL, \"strncmp\");\n-  builtin_function (\"__builtin_strstr\", string_ftype_cstring_cstring,\n-\t\t    BUILT_IN_STRSTR, BUILT_IN_NORMAL, \"strstr\");\n-  builtin_function (\"__builtin_strpbrk\", string_ftype_cstring_cstring,\n-\t\t    BUILT_IN_STRPBRK, BUILT_IN_NORMAL, \"strpbrk\");\n+    builtin_function_2 (\"__builtin_strcmp\", \"strcmp\",\n+\t\t\tint_ftype_cstring_cstring, int_ftype_cstring_cstring,\n+\t\t\tBUILT_IN_STRCMP, BUILT_IN_NORMAL, 1, 0, 0);\n+  builtin_function_2 (\"__builtin_strncmp\", \"strncmp\",\n+\t\t      int_ftype_cstring_cstring_sizet,\n+\t\t      int_ftype_cstring_cstring_sizet,\n+\t\t      BUILT_IN_STRNCMP, BUILT_IN_NORMAL, 1, 0, 0);\n+  builtin_function_2 (\"__builtin_strstr\", \"strstr\",\n+\t\t      string_ftype_cstring_cstring, string_ftype_cstring_cstring,\n+\t\t      BUILT_IN_STRSTR, BUILT_IN_NORMAL, 1, 0, 0);\n+  builtin_function_2 (\"__builtin_strpbrk\", \"strpbrk\",\n+\t\t      string_ftype_cstring_cstring, string_ftype_cstring_cstring,\n+\t\t      BUILT_IN_STRPBRK, BUILT_IN_NORMAL, 1, 0, 0);\n   built_in_decls[BUILT_IN_STRCHR] =\n-    builtin_function (\"__builtin_strchr\", string_ftype_cstring_int,\n-\t\t    BUILT_IN_STRCHR, BUILT_IN_NORMAL, \"strchr\");\n-  builtin_function (\"__builtin_strrchr\", string_ftype_cstring_int,\n-\t\t    BUILT_IN_STRRCHR, BUILT_IN_NORMAL, \"strrchr\");\n-  builtin_function (\"__builtin_strcpy\", string_ftype_string_cstring,\n-\t\t    BUILT_IN_STRCPY, BUILT_IN_NORMAL, \"strcpy\");\n-  builtin_function (\"__builtin_strncpy\", string_ftype_string_cstring_sizet,\n-\t\t    BUILT_IN_STRNCPY, BUILT_IN_NORMAL, \"strncpy\");\n+    builtin_function_2 (\"__builtin_strchr\", \"strchr\",\n+\t\t\tstring_ftype_cstring_int, string_ftype_cstring_int,\n+\t\t\tBUILT_IN_STRCHR, BUILT_IN_NORMAL, 1, 0, 0);\n+  builtin_function_2 (\"__builtin_strrchr\", \"strrchr\",\n+\t\t      string_ftype_cstring_int, string_ftype_cstring_int,\n+\t\t      BUILT_IN_STRRCHR, BUILT_IN_NORMAL, 1, 0, 0);\n+  builtin_function_2 (\"__builtin_strcpy\", \"strcpy\",\n+\t\t      string_ftype_string_cstring, string_ftype_string_cstring,\n+\t\t      BUILT_IN_STRCPY, BUILT_IN_NORMAL, 1, 0, 0);\n+  builtin_function_2 (\"__builtin_strncpy\", \"strncpy\",\n+\t\t      string_ftype_string_cstring_sizet,\n+\t\t      string_ftype_string_cstring_sizet,\n+\t\t      BUILT_IN_STRNCPY, BUILT_IN_NORMAL, 1, 0, 0);\n   built_in_decls[BUILT_IN_STRCAT] =\n-    builtin_function (\"__builtin_strcat\", string_ftype_string_cstring,\n-\t\t      BUILT_IN_STRCAT, BUILT_IN_NORMAL, \"strcat\");\n-  builtin_function (\"__builtin_strncat\", string_ftype_string_cstring_sizet,\n-\t\t    BUILT_IN_STRNCAT, BUILT_IN_NORMAL, \"strncat\");\n-  builtin_function (\"__builtin_strspn\", string_ftype_cstring_cstring,\n-\t\t    BUILT_IN_STRSPN, BUILT_IN_NORMAL, \"strspn\");\n-  builtin_function (\"__builtin_strcspn\", string_ftype_cstring_cstring,\n-\t\t    BUILT_IN_STRCSPN, BUILT_IN_NORMAL, \"strcspn\");\n+    builtin_function_2 (\"__builtin_strcat\", \"strcat\",\n+\t\t\tstring_ftype_string_cstring,\n+\t\t\tstring_ftype_string_cstring,\n+\t\t\tBUILT_IN_STRCAT, BUILT_IN_NORMAL, 1, 0, 0);\n+  builtin_function_2 (\"__builtin_strncat\", \"strncat\",\n+\t\t      string_ftype_string_cstring_sizet,\n+\t\t      string_ftype_string_cstring_sizet,\n+\t\t      BUILT_IN_STRNCAT, BUILT_IN_NORMAL, 1, 0, 0);\n+  builtin_function_2 (\"__builtin_strspn\", \"strspn\",\n+\t\t      sizet_ftype_cstring_cstring, sizet_ftype_cstring_cstring,\n+\t\t      BUILT_IN_STRSPN, BUILT_IN_NORMAL, 1, 0, 0);\n+  builtin_function_2 (\"__builtin_strcspn\", \"strcspn\",\n+\t\t      sizet_ftype_cstring_cstring, sizet_ftype_cstring_cstring,\n+\t\t      BUILT_IN_STRCSPN, BUILT_IN_NORMAL, 1, 0, 0);\n   built_in_decls[BUILT_IN_STRLEN] =\n-    builtin_function (\"__builtin_strlen\", strlen_ftype,\n-\t\t      BUILT_IN_STRLEN, BUILT_IN_NORMAL, \"strlen\");\n-  builtin_function (\"__builtin_sqrtf\", float_ftype_float,\n-\t\t    BUILT_IN_FSQRT, BUILT_IN_NORMAL, \"sqrtf\");\n-  builtin_function (\"__builtin_fsqrt\", double_ftype_double,\n-\t\t    BUILT_IN_FSQRT, BUILT_IN_NORMAL, \"sqrt\");\n-  builtin_function (\"__builtin_sqrtl\", ldouble_ftype_ldouble,\n-\t\t    BUILT_IN_FSQRT, BUILT_IN_NORMAL, \"sqrtl\");\n-  builtin_function (\"__builtin_sinf\", float_ftype_float,\n-\t\t    BUILT_IN_SIN, BUILT_IN_NORMAL, \"sinf\");\n-  builtin_function (\"__builtin_sin\", double_ftype_double,\n-\t\t    BUILT_IN_SIN, BUILT_IN_NORMAL, \"sin\");\n-  builtin_function (\"__builtin_sinl\", ldouble_ftype_ldouble,\n-\t\t    BUILT_IN_SIN, BUILT_IN_NORMAL, \"sinl\");\n-  builtin_function (\"__builtin_cosf\", float_ftype_float,\n-\t\t    BUILT_IN_COS, BUILT_IN_NORMAL, \"cosf\");\n-  builtin_function (\"__builtin_cos\", double_ftype_double,\n-\t\t    BUILT_IN_COS, BUILT_IN_NORMAL, \"cos\");\n-  builtin_function (\"__builtin_cosl\", ldouble_ftype_ldouble,\n-\t\t    BUILT_IN_COS, BUILT_IN_NORMAL, \"cosl\");\n+    builtin_function_2 (\"__builtin_strlen\", \"strlen\",\n+\t\t\tstrlen_ftype, strlen_ftype,\n+\t\t\tBUILT_IN_STRLEN, BUILT_IN_NORMAL, 1, 0, 0);\n+\n+  builtin_function_2 (\"__builtin_sqrtf\", \"sqrtf\",\n+\t\t      float_ftype_float, float_ftype_float,\n+\t\t      BUILT_IN_FSQRT, BUILT_IN_NORMAL, 1, 0, 0);\n+  builtin_function_2 (\"__builtin_fsqrt\", \"sqrt\",\n+\t\t      double_ftype_double, double_ftype_double,\n+\t\t      BUILT_IN_FSQRT, BUILT_IN_NORMAL, 1, 0, 0);\n+  builtin_function_2 (\"__builtin_sqrtl\", \"sqrtl\",\n+\t\t      ldouble_ftype_ldouble, ldouble_ftype_ldouble,\n+\t\t      BUILT_IN_FSQRT, BUILT_IN_NORMAL, 1, 0, 0);\n+  builtin_function_2 (\"__builtin_sinf\", \"sinf\",\n+\t\t      float_ftype_float, float_ftype_float,\n+\t\t      BUILT_IN_SIN, BUILT_IN_NORMAL, 1, 0, 0);\n+  builtin_function_2 (\"__builtin_sin\", \"sin\",\n+\t\t      double_ftype_double, double_ftype_double,\n+\t\t      BUILT_IN_SIN, BUILT_IN_NORMAL, 1, 0, 0);\n+  builtin_function_2 (\"__builtin_sinl\", \"sinl\",\n+\t\t      ldouble_ftype_ldouble, ldouble_ftype_ldouble,\n+\t\t      BUILT_IN_SIN, BUILT_IN_NORMAL, 1, 0, 0);\n+  builtin_function_2 (\"__builtin_cosf\", \"cosf\",\n+\t\t      float_ftype_float, float_ftype_float,\n+\t\t      BUILT_IN_COS, BUILT_IN_NORMAL, 1, 0, 0);\n+  builtin_function_2 (\"__builtin_cos\", \"cos\",\n+\t\t      double_ftype_double, double_ftype_double,\n+\t\t      BUILT_IN_COS, BUILT_IN_NORMAL, 1, 0, 0);\n+  builtin_function_2 (\"__builtin_cosl\", \"cosl\",\n+\t\t      ldouble_ftype_ldouble, ldouble_ftype_ldouble,\n+\t\t      BUILT_IN_COS, BUILT_IN_NORMAL, 1, 0, 0);\n   built_in_decls[BUILT_IN_PUTCHAR] =\n     builtin_function (\"__builtin_putchar\", int_ftype_int,\n \t\t      BUILT_IN_PUTCHAR, BUILT_IN_NORMAL, \"putchar\");\n   built_in_decls[BUILT_IN_PUTS] =\n     builtin_function (\"__builtin_puts\", puts_ftype,\n \t\t      BUILT_IN_PUTS, BUILT_IN_NORMAL, \"puts\");\n-  builtin_function (\"__builtin_printf\", printf_ftype,\n-\t\t    BUILT_IN_PRINTF, BUILT_IN_FRONTEND, \"printf\");\n+  builtin_function_2 (\"__builtin_printf\", \"printf\",\n+\t\t      printf_ftype, printf_ftype,\n+\t\t      BUILT_IN_PRINTF, BUILT_IN_FRONTEND, 1, 0, 0);\n   /* We declare these without argument so that the initial declaration\n      for these identifiers is a builtin.  That allows us to redeclare\n      them later with argument without worrying about the explicit\n@@ -5468,109 +5492,25 @@ c_common_nodes_and_builtins ()\n     builtin_function (\"__builtin_fwrite\", sizet_ftype_any,\n \t\t      BUILT_IN_FWRITE, BUILT_IN_NORMAL, \"fwrite\");\n   built_in_decls[BUILT_IN_FPUTC] =\n-    builtin_function (\"__builtin_fputc\", int_ftype_any,\n-\t\t      BUILT_IN_FPUTC, BUILT_IN_NORMAL, \"fputc\");\n+    builtin_function_2 (\"__builtin_fputc\", \"fputc\",\n+\t\t\tint_ftype_any, int_ftype_any,\n+\t\t\tBUILT_IN_FPUTC, BUILT_IN_NORMAL, 1, 0, 0);\n   built_in_decls[BUILT_IN_FPUTS] =\n-    builtin_function (\"__builtin_fputs\", int_ftype_any,\n-\t\t      BUILT_IN_FPUTS, BUILT_IN_NORMAL, \"fputs\");\n-\n-  if (! flag_no_builtin)\n-    {\n-      builtin_function (\"abs\", int_ftype_int, BUILT_IN_ABS,\n-\t\t\tBUILT_IN_NORMAL, NULL_PTR);\n-      builtin_function (\"fabsf\", float_ftype_float, BUILT_IN_FABS,\n-\t\t\tBUILT_IN_NORMAL, NULL_PTR);\n-      builtin_function (\"fabs\", double_ftype_double, BUILT_IN_FABS,\n-\t\t\tBUILT_IN_NORMAL, NULL_PTR);\n-      builtin_function (\"fabsl\", ldouble_ftype_ldouble, BUILT_IN_FABS,\n-\t\t\tBUILT_IN_NORMAL, NULL_PTR);\n-      builtin_function (\"labs\", long_ftype_long, BUILT_IN_LABS,\n-\t\t\tBUILT_IN_NORMAL, NULL_PTR);\n-      if (flag_isoc99 || ! flag_no_nonansi_builtin)\n-\t{\n-\t  builtin_function (\"llabs\", longlong_ftype_longlong, BUILT_IN_LLABS,\n-\t\t\t    BUILT_IN_NORMAL, NULL_PTR);\n-\t  builtin_function (\"imaxabs\", intmax_ftype_intmax, BUILT_IN_IMAXABS,\n-\t\t\t    BUILT_IN_NORMAL, NULL_PTR);\n-\t}\n-      builtin_function (\"memcpy\", memcpy_ftype, BUILT_IN_MEMCPY,\n-\t\t\tBUILT_IN_NORMAL, NULL_PTR);\n-      builtin_function (\"memcmp\", int_ftype_cptr_cptr_sizet, BUILT_IN_MEMCMP,\n-\t\t\tBUILT_IN_NORMAL, NULL_PTR);\n-      builtin_function (\"memset\", memset_ftype, BUILT_IN_MEMSET,\n-\t\t\tBUILT_IN_NORMAL, NULL_PTR);\n-      builtin_function (\"strcmp\", int_ftype_cstring_cstring, BUILT_IN_STRCMP,\n-\t\t\tBUILT_IN_NORMAL, NULL_PTR);\n-      builtin_function (\"strncmp\", int_ftype_cstring_cstring_sizet,\n-\t\t\tBUILT_IN_STRNCMP, BUILT_IN_NORMAL, NULL_PTR);\n-      builtin_function (\"strstr\", string_ftype_cstring_cstring, BUILT_IN_STRSTR,\n-\t\t\tBUILT_IN_NORMAL, NULL_PTR);\n-      builtin_function (\"strchr\", string_ftype_cstring_int, BUILT_IN_STRCHR,\n-\t\t\tBUILT_IN_NORMAL, NULL_PTR);\n-      builtin_function (\"strrchr\", string_ftype_cstring_int, BUILT_IN_STRRCHR,\n-\t\t\tBUILT_IN_NORMAL, NULL_PTR);\n-      builtin_function (\"strpbrk\", string_ftype_cstring_cstring, BUILT_IN_STRPBRK,\n-\t\t\tBUILT_IN_NORMAL, NULL_PTR);\n-      builtin_function (\"strcpy\", string_ftype_string_cstring, BUILT_IN_STRCPY,\n-\t\t\tBUILT_IN_NORMAL, NULL_PTR);\n-      builtin_function (\"strncpy\", string_ftype_string_cstring_sizet,\n-\t\t\tBUILT_IN_STRNCPY, BUILT_IN_NORMAL, NULL_PTR);\n-      builtin_function (\"strcat\", string_ftype_string_cstring, BUILT_IN_STRCAT,\n-\t\t\tBUILT_IN_NORMAL, NULL_PTR);\n-      builtin_function (\"strncat\", string_ftype_string_cstring_sizet,\n-\t\t\tBUILT_IN_STRNCAT, BUILT_IN_NORMAL, NULL_PTR);\n-      builtin_function (\"strspn\", sizet_ftype_cstring_cstring, BUILT_IN_STRSPN,\n-\t\t\tBUILT_IN_NORMAL, NULL_PTR);\n-      builtin_function (\"strcspn\", sizet_ftype_cstring_cstring,\n-\t\t\tBUILT_IN_STRCSPN, BUILT_IN_NORMAL, NULL_PTR);\n-      builtin_function (\"strlen\", strlen_ftype, BUILT_IN_STRLEN,\n-\t\t\tBUILT_IN_NORMAL, NULL_PTR);\n-      builtin_function (\"sqrtf\", float_ftype_float, BUILT_IN_FSQRT,\n-\t\t\tBUILT_IN_NORMAL, NULL_PTR);\n-      builtin_function (\"sqrt\", double_ftype_double, BUILT_IN_FSQRT,\n-\t\t\tBUILT_IN_NORMAL, NULL_PTR);\n-      builtin_function (\"sqrtl\", ldouble_ftype_ldouble, BUILT_IN_FSQRT,\n-\t\t\tBUILT_IN_NORMAL, NULL_PTR);\n-      builtin_function (\"sinf\", float_ftype_float, BUILT_IN_SIN,\n-\t\t\tBUILT_IN_NORMAL, NULL_PTR);\n-      builtin_function (\"sin\", double_ftype_double, BUILT_IN_SIN,\n-\t\t\tBUILT_IN_NORMAL, NULL_PTR);\n-      builtin_function (\"sinl\", ldouble_ftype_ldouble, BUILT_IN_SIN,\n-\t\t\tBUILT_IN_NORMAL, NULL_PTR);\n-      builtin_function (\"cosf\", float_ftype_float, BUILT_IN_COS,\n-\t\t\tBUILT_IN_NORMAL, NULL_PTR);\n-      builtin_function (\"cos\", double_ftype_double, BUILT_IN_COS,\n-\t\t\tBUILT_IN_NORMAL, NULL_PTR);\n-      builtin_function (\"cosl\", ldouble_ftype_ldouble, BUILT_IN_COS,\n-\t\t\tBUILT_IN_NORMAL, NULL_PTR);\n-      builtin_function (\"printf\", printf_ftype, BUILT_IN_PRINTF,\n-\t\t\tBUILT_IN_FRONTEND, NULL_PTR);\n-      /* We declare these without argument so that the initial\n-         declaration for these identifiers is a builtin.  That allows\n-         us to redeclare them later with argument without worrying\n-         about the explicit declarations in stdio.h being taken as the\n-         initial declaration.  */\n-      builtin_function (\"fputc\", int_ftype_any, BUILT_IN_FPUTC,\n-\t\t\tBUILT_IN_NORMAL, NULL_PTR);\n-      builtin_function (\"fputs\", int_ftype_any, BUILT_IN_FPUTS,\n-\t\t\tBUILT_IN_NORMAL, NULL_PTR);\n-\n-      /* Declare these functions volatile\n-\t to avoid spurious \"control drops through\" warnings.  */\n-      temp = builtin_function (\"abort\", \n-\t\t\t       ((c_language == clk_cplusplus)\n-\t\t\t\t? void_ftype : void_ftype_any),\n-\t\t\t       0, NOT_BUILT_IN, NULL_PTR);\n-      TREE_THIS_VOLATILE (temp) = 1;\n-      TREE_SIDE_EFFECTS (temp) = 1;\n-\n-      temp = builtin_function (\"exit\",\n-\t\t\t       ((c_language == clk_cplusplus)\n-\t\t\t\t? void_ftype_int : void_ftype_any),\n-\t\t\t       0, NOT_BUILT_IN, NULL_PTR);\n-      TREE_THIS_VOLATILE (temp) = 1;\n-      TREE_SIDE_EFFECTS (temp) = 1;\n-    }\n+    builtin_function_2 (\"__builtin_fputs\", \"fputs\",\n+\t\t\tint_ftype_any, int_ftype_any,\n+\t\t\tBUILT_IN_FPUTS, BUILT_IN_NORMAL, 1, 0, 0);\n+\n+  /* Declare these functions non-returning\n+     to avoid spurious \"control drops through\" warnings.  */\n+  builtin_function_2 (NULL_PTR, \"abort\",\n+\t\t      NULL_TREE, ((c_language == clk_cplusplus)\n+\t\t\t\t  ? void_ftype : void_ftype_any),\n+\t\t      0, NOT_BUILT_IN, 0, 0, 1);\n+\n+  builtin_function_2 (NULL_PTR, \"exit\",\n+\t\t      NULL_TREE, ((c_language == clk_cplusplus)\n+\t\t\t\t  ? void_ftype_int : void_ftype_any),\n+\t\t      0, NOT_BUILT_IN, 0, 0, 1);\n \n #if 0\n   /* Support for these has not been written in either expand_builtin\n@@ -5606,6 +5546,61 @@ build_va_arg (expr, type)\n {\n   return build1 (VA_ARG_EXPR, type, expr);\n }\n+\n+\n+/* Possibly define a builtin function with one or two names.  BUILTIN_NAME\n+   is an __builtin_-prefixed name; NAME is the ordinary name; one or both\n+   of these may be NULL (though both being NULL is useless).\n+   BUILTIN_TYPE is the type of the __builtin_-prefixed function;\n+   TYPE is the type of the function with the ordinary name.  These\n+   may differ if the ordinary name is declared with a looser type to avoid\n+   conflicts with headers.  FUNCTION_CODE and CLASS are as for\n+   builtin_function.  If LIBRARY_NAME_P is nonzero, NAME is passed as\n+   the LIBRARY_NAME parameter to builtin_function when declaring BUILTIN_NAME.\n+   If NONANSI_P is nonzero, the name NAME is treated as a non-ANSI name; if\n+   NORETURN_P is nonzero, the function is marked as non-returning.\n+   Returns the declaration of BUILTIN_NAME, if any, otherwise\n+   the declaration of NAME.  Does not declare NAME if flag_no_builtin,\n+   or if NONANSI_P and flag_no_nonansi_builtin.  */\n+\n+static tree\n+builtin_function_2 (builtin_name, name, builtin_type, type, function_code,\n+\t\t    class, library_name_p, nonansi_p, noreturn_p)\n+     const char *builtin_name;\n+     const char *name;\n+     tree builtin_type;\n+     tree type;\n+     int function_code;\n+     enum built_in_class class;\n+     int library_name_p;\n+     int nonansi_p;\n+     int noreturn_p;\n+{\n+  tree bdecl = NULL_TREE;\n+  tree decl = NULL_TREE;\n+  if (builtin_name != 0)\n+    {\n+      bdecl = builtin_function (builtin_name, builtin_type, function_code,\n+\t\t\t\tclass, library_name_p ? name : NULL_PTR);\n+      if (noreturn_p)\n+\t{\n+\t  TREE_THIS_VOLATILE (bdecl) = 1;\n+\t  TREE_SIDE_EFFECTS (bdecl) = 1;\n+\t}\n+    }\n+  if (name != 0 && !flag_no_builtin && !(nonansi_p && flag_no_nonansi_builtin))\n+    {\n+      decl = builtin_function (name, type, function_code, class, NULL_PTR);\n+      if (nonansi_p)\n+\tDECL_BUILT_IN_NONANSI (decl) = 1;\n+      if (noreturn_p)\n+\t{\n+\t  TREE_THIS_VOLATILE (decl) = 1;\n+\t  TREE_SIDE_EFFECTS (decl) = 1;\n+\t}\n+    }\n+  return (bdecl != 0 ? bdecl : decl);\n+}\n \f\n /* Given a type, apply default promotions wrt unnamed function arguments\n    and return the new type.  Return NULL_TREE if no change.  */"}]}