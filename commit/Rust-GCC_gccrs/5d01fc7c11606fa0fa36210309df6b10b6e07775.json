{"sha": "5d01fc7c11606fa0fa36210309df6b10b6e07775", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWQwMWZjN2MxMTYwNmZhMGZhMzYyMTAzMDlkZjZiMTBiNmUwNzc3NQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2021-01-25T10:27:29Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2021-01-25T10:30:00Z"}, "message": "Fix internal error on extension with interface at -O2\n\nThis is a regression present on the mainline, 10 and 9 branches, in the\nform of an internal error with the Ada compiler when a covariant-only\nthunk is inlined into its caller.\n\ngcc/ada/\n\t* gcc-interface/trans.c (make_covariant_thunk): Set the DECL_CONTEXT\n\tof the parameters and do not set TREE_PUBLIC on the thunk.\n\t(maybe_make_gnu_thunk): Pass the alias to the covariant thunk.\n\t* gcc-interface/utils.c (finish_subprog_decl): Set the DECL_CONTEXT\n\tof the parameters here...\n\t(begin_subprog_body): ...instead of here.\n\ngcc/testsuite/\n\t* gnat.dg/thunk2.adb, gnat.dg/thunk2.ads: New test.\n\t* gnat.dg/thunk2_pkg.ads: New helper.", "tree": {"sha": "390e5b51d018b3a0f54487789c98ddc0ef682ef7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/390e5b51d018b3a0f54487789c98ddc0ef682ef7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5d01fc7c11606fa0fa36210309df6b10b6e07775", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d01fc7c11606fa0fa36210309df6b10b6e07775", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d01fc7c11606fa0fa36210309df6b10b6e07775", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d01fc7c11606fa0fa36210309df6b10b6e07775/comments", "author": null, "committer": null, "parents": [{"sha": "c6b0e33febbf73abfcc2bb0e28f0b62afe3b0f2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6b0e33febbf73abfcc2bb0e28f0b62afe3b0f2a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6b0e33febbf73abfcc2bb0e28f0b62afe3b0f2a"}], "stats": {"total": 70, "additions": 54, "deletions": 16}, "files": [{"sha": "ae7a52f3ca224bbe43431a98b38d90c0f8981139", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d01fc7c11606fa0fa36210309df6b10b6e07775/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d01fc7c11606fa0fa36210309df6b10b6e07775/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=5d01fc7c11606fa0fa36210309df6b10b6e07775", "patch": "@@ -10612,7 +10612,7 @@ make_alias_for_thunk (tree target)\n   return alias;\n }\n \n-/* Create the covariant part of the {GNAT,GNU}_THUNK.  */\n+/* Create the local covariant part of {GNAT,GNU}_THUNK.  */\n \n static tree\n make_covariant_thunk (Entity_Id gnat_thunk, tree gnu_thunk)\n@@ -10623,14 +10623,18 @@ make_covariant_thunk (Entity_Id gnat_thunk, tree gnu_thunk)\n \t\t  gnu_name, TREE_TYPE (gnu_thunk));\n \n   DECL_ARGUMENTS (gnu_cv_thunk) = copy_list (DECL_ARGUMENTS (gnu_thunk));\n+  for (tree param_decl = DECL_ARGUMENTS (gnu_cv_thunk);\n+       param_decl;\n+       param_decl = DECL_CHAIN (param_decl))\n+    DECL_CONTEXT (param_decl) = gnu_cv_thunk;\n+\n   DECL_RESULT (gnu_cv_thunk) = copy_node (DECL_RESULT (gnu_thunk));\n   DECL_CONTEXT (DECL_RESULT (gnu_cv_thunk)) = gnu_cv_thunk;\n \n   DECL_LANG_SPECIFIC (gnu_cv_thunk) = DECL_LANG_SPECIFIC (gnu_thunk);\n   DECL_CONTEXT (gnu_cv_thunk) = DECL_CONTEXT (gnu_thunk);\n   TREE_READONLY (gnu_cv_thunk) = TREE_READONLY (gnu_thunk);\n   TREE_THIS_VOLATILE (gnu_cv_thunk) = TREE_THIS_VOLATILE (gnu_thunk);\n-  TREE_PUBLIC (gnu_cv_thunk) = TREE_PUBLIC (gnu_thunk);\n   DECL_ARTIFICIAL (gnu_cv_thunk) = 1;\n \n   return gnu_cv_thunk;\n@@ -10760,6 +10764,12 @@ maybe_make_gnu_thunk (Entity_Id gnat_thunk, tree gnu_thunk)\n \n   cgraph_node *target_node = cgraph_node::get_create (gnu_target);\n \n+  /* We may also need to create an alias for the target in order to make\n+     the call local, depending on the linkage of the target.  */\n+  tree gnu_alias = use_alias_for_thunk_p (gnu_target)\n+\t\t  ? make_alias_for_thunk (gnu_target)\n+\t\t  : gnu_target;\n+\n   /* If the return type of the target is a controlling type, then we need\n      both an usual this thunk and a covariant thunk in this order:\n \n@@ -10772,17 +10782,11 @@ maybe_make_gnu_thunk (Entity_Id gnat_thunk, tree gnu_thunk)\n       tree gnu_cv_thunk = make_covariant_thunk (gnat_thunk, gnu_thunk);\n       target_node->create_thunk (gnu_cv_thunk, gnu_target, false,\n \t\t\t\t - fixed_offset, 0, 0,\n-\t\t\t\t NULL_TREE, gnu_target);\n+\t\t\t\t NULL_TREE, gnu_alias);\n \n-      gnu_target = gnu_cv_thunk;\n+      gnu_alias = gnu_target = gnu_cv_thunk;\n     }\n \n-  /* We may also need to create an alias for the target in order to make\n-     the call local, depending on the linkage of the target.  */\n-  tree gnu_alias = use_alias_for_thunk_p (gnu_target)\n-\t\t  ? make_alias_for_thunk (gnu_target)\n-\t\t  : gnu_target;\n-\n   target_node->create_thunk (gnu_thunk, gnu_target, true,\n \t\t\t     fixed_offset, virtual_value, indirect_offset,\n \t\t\t     virtual_offset, gnu_alias);"}, {"sha": "d52220a675e3f198d541651e615bd99d7e16c614", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d01fc7c11606fa0fa36210309df6b10b6e07775/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d01fc7c11606fa0fa36210309df6b10b6e07775/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=5d01fc7c11606fa0fa36210309df6b10b6e07775", "patch": "@@ -3521,6 +3521,12 @@ create_subprog_decl (tree name, tree asm_name, tree type, tree param_decl_list,\n void\n finish_subprog_decl (tree decl, tree asm_name, tree type)\n {\n+  /* DECL_ARGUMENTS is set by the caller, but not its context.  */\n+  for (tree param_decl = DECL_ARGUMENTS (decl);\n+       param_decl;\n+       param_decl = DECL_CHAIN (param_decl))\n+    DECL_CONTEXT (param_decl) = decl;\n+\n   tree result_decl\n     = build_decl (DECL_SOURCE_LOCATION (decl), RESULT_DECL, NULL_TREE,\n \t\t  TREE_TYPE (type));\n@@ -3566,8 +3572,6 @@ finish_subprog_decl (tree decl, tree asm_name, tree type)\n void\n begin_subprog_body (tree subprog_decl)\n {\n-  tree param_decl;\n-\n   announce_function (subprog_decl);\n \n   /* This function is being defined.  */\n@@ -3583,10 +3587,6 @@ begin_subprog_body (tree subprog_decl)\n   /* Enter a new binding level and show that all the parameters belong to\n      this function.  */\n   gnat_pushlevel ();\n-\n-  for (param_decl = DECL_ARGUMENTS (subprog_decl); param_decl;\n-       param_decl = DECL_CHAIN (param_decl))\n-    DECL_CONTEXT (param_decl) = subprog_decl;\n }\n \n /* Finish translating the current subprogram and set its BODY.  */"}, {"sha": "96ed883bfab5f16a361d57ec85e7c220e9ac27ea", "filename": "gcc/testsuite/gnat.dg/thunk2.adb", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d01fc7c11606fa0fa36210309df6b10b6e07775/gcc%2Ftestsuite%2Fgnat.dg%2Fthunk2.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d01fc7c11606fa0fa36210309df6b10b6e07775/gcc%2Ftestsuite%2Fgnat.dg%2Fthunk2.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fthunk2.adb?ref=5d01fc7c11606fa0fa36210309df6b10b6e07775", "patch": "@@ -0,0 +1,11 @@\n+-- { dg-do compile }\n+-- { dg-options \"-O2\" }\n+\n+package body Thunk2 is\n+\n+  overriding function Element (Self : Ext; Name : String) return Ext is\n+  begin\n+    return Self;\n+  end;\n+\n+end Thunk2;"}, {"sha": "05dc45bc74b818266f7c403acafc95c3eac091a1", "filename": "gcc/testsuite/gnat.dg/thunk2.ads", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d01fc7c11606fa0fa36210309df6b10b6e07775/gcc%2Ftestsuite%2Fgnat.dg%2Fthunk2.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d01fc7c11606fa0fa36210309df6b10b6e07775/gcc%2Ftestsuite%2Fgnat.dg%2Fthunk2.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fthunk2.ads?ref=5d01fc7c11606fa0fa36210309df6b10b6e07775", "patch": "@@ -0,0 +1,12 @@\n+with Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n+with Thunk2_Pkg; use Thunk2_Pkg;\n+\n+package Thunk2 is\n+\n+  type Ext is new Root and I with record\n+    S : Unbounded_String;\n+  end record;\n+\n+  overriding function Element (Self : Ext; Name : String) return Ext;\n+\n+end Thunk2;"}, {"sha": "75799892ed8df9a1eb0e16c5237e07383fc58637", "filename": "gcc/testsuite/gnat.dg/thunk2_pkg.ads", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d01fc7c11606fa0fa36210309df6b10b6e07775/gcc%2Ftestsuite%2Fgnat.dg%2Fthunk2_pkg.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d01fc7c11606fa0fa36210309df6b10b6e07775/gcc%2Ftestsuite%2Fgnat.dg%2Fthunk2_pkg.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fthunk2_pkg.ads?ref=5d01fc7c11606fa0fa36210309df6b10b6e07775", "patch": "@@ -0,0 +1,11 @@\n+package Thunk2_Pkg is\n+\n+  type Root is tagged record\n+    A : Integer;\n+  end record;\n+\n+  type I is interface;\n+\n+  function Element (Self : I; Name : String) return I is abstract;\n+\n+end Thunk2_Pkg;"}]}