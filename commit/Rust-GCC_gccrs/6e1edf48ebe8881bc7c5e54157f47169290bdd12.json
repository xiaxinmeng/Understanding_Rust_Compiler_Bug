{"sha": "6e1edf48ebe8881bc7c5e54157f47169290bdd12", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmUxZWRmNDhlYmU4ODgxYmM3YzVlNTQxNTdmNDcxNjkyOTBiZGQxMg==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-12-06T00:16:44Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-12-06T00:16:44Z"}, "message": "Daily bump.", "tree": {"sha": "4bdd12daaf61af4ee33726b54f77dee3423219e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4bdd12daaf61af4ee33726b54f77dee3423219e9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6e1edf48ebe8881bc7c5e54157f47169290bdd12", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e1edf48ebe8881bc7c5e54157f47169290bdd12", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e1edf48ebe8881bc7c5e54157f47169290bdd12", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e1edf48ebe8881bc7c5e54157f47169290bdd12/comments", "author": null, "committer": null, "parents": [{"sha": "bfa7dd84d1a0d83c716715e91c544203a7ad454d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfa7dd84d1a0d83c716715e91c544203a7ad454d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bfa7dd84d1a0d83c716715e91c544203a7ad454d"}], "stats": {"total": 784, "additions": 783, "deletions": 1}, "files": [{"sha": "af87f23b540cf98ccef77f6375233816ec1b383e", "filename": "ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e1edf48ebe8881bc7c5e54157f47169290bdd12/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e1edf48ebe8881bc7c5e54157f47169290bdd12/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=6e1edf48ebe8881bc7c5e54157f47169290bdd12", "patch": "@@ -1,3 +1,9 @@\n+2020-12-05  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\tPR target/97865\n+\t* libtool.m4: Update handling of Darwin platform link flags\n+\tfor Darwin20.\n+\n 2020-12-02  Simon Marchi  <simon.marchi@polymtl.ca>\n \n \t* .gitignore: Sync with binutils-gdb"}, {"sha": "7a79a4980fb78820d7c4cd7317c5c8fb917dded0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 327, "deletions": 0, "changes": 327, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e1edf48ebe8881bc7c5e54157f47169290bdd12/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e1edf48ebe8881bc7c5e54157f47169290bdd12/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6e1edf48ebe8881bc7c5e54157f47169290bdd12", "patch": "@@ -1,3 +1,330 @@\n+2020-12-05  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\t    David Edelsohn  <dje.gcc@gmail.com>\n+\n+\t* config/rs6000/xcoff.h (ASM_OUTPUT_DEF): Reference macro arguments.\n+\n+2020-12-05  Maciej W. Rozycki  <macro@linux-mips.org>\n+\n+\tPR target/95294\n+\t* config/vax/elf.h (REGISTER_NAMES): Append `%psl'.\n+\t* config/vax/vax-modes.def (CCN, CCNZ, CCZ): New modes.\n+\t* config/vax/vax-protos.h (vax_select_cc_mode): New prototype.\n+\t(vax_maybe_split_dimode_move): Likewise.\n+\t(vax_notice_update_cc): Remove prototype.\n+\t* config/vax/vax.c (TARGET_FLAGS_REGNUM): New macro.\n+\t(TARGET_CC_MODES_COMPATIBLE): Likewise.\n+\t(TARGET_MD_ASM_ADJUST): Likewise.\n+\t(vax_select_cc_mode): New function\n+\t(vax_cc_modes_compatible): Likewise.\n+\t(vax_md_asm_adjust): Likewise.\n+\t(vax_notice_update_cc): Remove function.\n+\t(vax_output_int_move): Factor out code checking if a DImode move\n+\tmay have to be split...\n+\t(vax_maybe_split_dimode_move): ... into this new function.\n+\t* config/vax/vax.h (FIRST_PSEUDO_REGISTER): Bump up.\n+\t(FIXED_REGISTERS): Append an entry for PSL.\n+\t(CALL_USED_REGISTERS): Likewise.\n+\t(NOTICE_UPDATE_CC, OUTPUT_JUMP): Remove macros.\n+\t(SELECT_CC_MODE): New macro.\n+\t(REGISTER_NAMES): Append `psl'.\n+\t* config/vax/predicates.md (const_zero_operand)\n+\t(vax_cc_comparison_operator, vax_ccn_comparison_operator)\n+\t(vax_ccnz_comparison_operator, vax_ccz_comparison_operator):\n+\tNew predicates.\n+\t* config/vax/builtins.md: Rewrite for MODE_CC representation.\n+\t* config/vax/vax.md: Likewise.\n+\n+2020-12-05  Maciej W. Rozycki  <macro@linux-mips.org>\n+\n+\t* config/vax/elf.h (VAX_CC1_SPEC, VAX_CC1PLUS_SPEC): New macros.\n+\t* config/vax/netbsd-elf.h (CC1_SPEC): Use VAX_CC1_SPEC rather\n+\tthan VAX_CC1_AND_CC1PLUS_SPEC.\n+\t(CC1PLUS_SPEC): Use VAX_CC1PLUS_SPEC rather than\n+\tVAX_CC1_AND_CC1PLUS_SPEC.\n+\n+2020-12-05  Maciej W. Rozycki  <macro@linux-mips.org>\n+\n+\t* config/pdp11/pdp11.md (fcc_cc, fcc_ccnz): Use\n+\t`const_double_zero' to express double zero constant.\n+\n+2020-12-05  Maciej W. Rozycki  <macro@linux-mips.org>\n+\n+\t* read-rtl.c (rtx_reader::read_rtx_code): Handle syntactic\n+\t`const_double_zero' rtx.\n+\t* doc/rtl.texi (Constant Expression Types): Document it.\n+\n+2020-12-05  Maciej W. Rozycki  <macro@linux-mips.org>\n+\n+\t* config/vax/vax.md (divmoddisi4, *amulsi4): Make the comment\n+\tnotation consistent with the rest of the file.\n+\n+2020-12-05  Maciej W. Rozycki  <macro@linux-mips.org>\n+\n+\t* config/vax/vax.md (movti): Fix output predicate.  Emit `movo'\n+\trather than `movh'.\n+\t(divmoddisi4): Fix output predicates, correct RTL.\n+\t(*amulsi4): Name insn.  Fix output predicate.\n+\n+2020-12-05  Maciej W. Rozycki  <macro@linux-mips.org>\n+\n+\t* config/vax/vax.md (mulsidi3): Fix the multiplicand predicates.\n+\t(*maddsidi4, *maddsidi4_const): Likewise.  Name insns.\n+\n+2020-12-05  Maciej W. Rozycki  <macro@linux-mips.org>\n+\n+\t* config/vax/vax.md (*cmpv_2): Name insn.\n+\t(*cmpv, *cmpzv, *cmpzv_2): Likewise.  Fix location predicate and\n+\tconstraint.\n+\n+2020-12-05  Maciej W. Rozycki  <macro@linux-mips.org>\n+\n+\t* config/vax/vax.md (extv): Rename insn to...\n+\t(*extv): ... this.\n+\t(extv): New expander.\n+\n+2020-12-05  Maciej W. Rozycki  <macro@linux-mips.org>\n+\n+\t* config/vax/vax.md (*insv_aligned, *extzv_aligned)\n+\t(*extv_aligned): Also make sure the memory address of a bit-field\n+\tlocation can be adjusted in the PIC mode.\n+\n+2020-12-05  Maciej W. Rozycki  <macro@linux-mips.org>\n+\n+\t* config/vax/vax.md (*insv_aligned, *extzv_aligned)\n+\t(*extv_aligned): Reject register bit-field locations that are not\n+\taligned to the least significant bit; update output statement\n+\taccordingly.\n+\n+2020-12-05  Maciej W. Rozycki  <macro@linux-mips.org>\n+\n+\t* config/vax/vax.md (*insv_aligned, *extzv_aligned)\n+\t(*extv_aligned, *extv_non_const, *extzv_non_const): Name insns.\n+\tFix location predicate.\n+\t(*extzv): Name insn.\n+\t(*insv): Likewise.  Fix location constraint.\n+\t(*insv_2): Likewise, and the predicate.\n+\n+2020-12-05  Maciej W. Rozycki  <macro@linux-mips.org>\n+\n+\t* config/vax/vax.md (cpymemhi1): Rename insn to...\n+\t(movmemhi1): ... this.\n+\t(cpymemhi): Update accordingly.  Remove constraints.\n+\t(movmemhi): New expander.\n+\n+2020-12-05  Maciej W. Rozycki  <macro@linux-mips.org>\n+\n+\t* config/vax/builtins.md: Add a peephole2 for QImode and HImode\n+\t`ctz' operations.\n+\t(any_extend): New code iterator.\n+\n+2020-12-05  Maciej W. Rozycki  <macro@linux-mips.org>\n+\n+\t* config/vax/builtins.md (width): New mode attribute.\n+\t(ffssi2): Rework expander into...\n+\t(ffs<mode>2): ... this.\n+\t(ctzsi2): Rework insn into...\n+\t(ctz<mode>2): ... this.\n+\n+2020-12-05  Maciej W. Rozycki  <macro@linux-mips.org>\n+\n+\t* config/vax/builtins.md (ffssi2_internal): Rename insn to...\n+\t(ctzsi2): ... this.  Update the RTL operation.\n+\t(ffssi2): Update accordingly.\n+\t* config/vax/vax.c (vax_notice_update_cc): Handle CTZ.\n+\t* config/vax/vax.h (CTZ_DEFINED_VALUE_AT_ZERO): New macro.\n+\n+2020-12-05  Maciej W. Rozycki  <macro@linux-mips.org>\n+\n+\t* config/vax/vax.md: Include `builtins.md'.\n+\n+2020-12-05  Maciej W. Rozycki  <macro@linux-mips.org>\n+\n+\t* config/vax/predicates.md (volatile_mem_operand)\n+\t(any_memory_operand): New predicates.\n+\t* config/vax/builtins.md (VUNSPEC_UNLOCK): Remove constant.\n+\t(sync_lock_test_and_set<mode>): Remove `set' and `unspec'\n+\toperations, match operands only.  Reformat.\n+\t(sync_lock_release<mode>): Likewise.  Remove cruft.\n+\t(jbb<ccss>i<mode>): Wrap into `unspec_volatile', use\n+\t`any_memory_operand' predicate.\n+\n+2020-12-05  Maciej W. Rozycki  <macro@linux-mips.org>\n+\n+\t* config/vax/builtins.md (bit): New int iterator.\n+\t(ccss): New int attribute.\n+\t(jbbssi<mode>, jbbcci<mode>): Fold insns into...\n+\t(jbb<ccss>i<mode>): ... this.\n+\n+2020-12-05  Maciej W. Rozycki  <macro@linux-mips.org>\n+\n+\t* config/vax/builtins.md (bb_mem): New mode attribute.\n+\t(jbbssiqi, jbbssihi, jbbssisi): Fold insns into...\n+\t(jbbssi<mode>): ... this.\n+\t(jbbcciqi, jbbccihi, jbbccisi): Likewise...\n+\t(jbbcci<mode>): ... this.\n+\n+2020-12-05  Maciej W. Rozycki  <macro@linux-mips.org>\n+\n+\t* jump.c (pc_set): Also accept a jump wrapped in UNSPEC or\n+\tUNSPEC_VOLATILE.\n+\t(any_uncondjump_p, any_condjump_p): Update comment accordingly.\n+\n+2020-12-05  Maciej W. Rozycki  <macro@linux-mips.org>\n+\n+\t* loop-doloop.c (add_test): Only remove the jump if `onlyjump_p'.\n+\n+2020-12-05  Maciej W. Rozycki  <macro@linux-mips.org>\n+\n+\t* cfgrtl.c (rtl_block_empty_p): Return false if `!onlyjump_p'\n+\ttoo.\n+\n+2020-12-05  Maciej W. Rozycki  <macro@linux-mips.org>\n+\n+\t* sel-sched-ir.c (maybe_tidy_empty_bb): Only try to remove a\n+\tconditional jump if `onlyjump_p'.\n+\n+2020-12-05  Maciej W. Rozycki  <macro@linux-mips.org>\n+\n+\t* loop-iv.c (simplify_using_initial_values): Only process jumps\n+\tthat match `onlyjump_p'.\n+\t(check_simple_exit): Likewise.\n+\n+2020-12-05  Maciej W. Rozycki  <macro@linux-mips.org>\n+\n+\t* ifcvt.c (dead_or_predicable) [!IFCVT_MODIFY_TESTS]: Bail out\n+\tif `!onlyjump_p'.\n+\n+2020-12-05  Maciej W. Rozycki  <macro@linux-mips.org>\n+\n+\t* read-rtl.c: Add a page-feed separator at the start of iterator\n+\tcode.\n+\t(struct iterator_group): Change the return type to HOST_WIDE_INT\n+\tfor the `find_builtin' member.  Likewise the second parameter\n+\ttype for the `apply_iterator' member.\n+\t(atoll) [!HAVE_ATOQ]: Reorder.\n+\t(find_mode, find_code): Change the return type to HOST_WIDE_INT.\n+\t(apply_mode_iterator, apply_code_iterator)\n+\t(apply_subst_iterator): Change the second parameter type to\n+\tHOST_WIDE_INT.\n+\t(find_int): Handle input suitable for HOST_WIDE_INT output.\n+\t(apply_int_iterator): Rewrite in terms of explicit format\n+\tinterpretation.\n+\t(rtx_reader::read_rtx_operand) <'w'>: Fold into...\n+\t<'i', 'n', 'p'>: ... this.\n+\t* doc/md.texi (Int Iterators): Document 'w' rtx format support.\n+\n+2020-12-05  Maciej W. Rozycki  <macro@linux-mips.org>\n+\n+\t* config/vax/builtins.md (ffssi2): Make preparation statements\n+\tactually buildable.\n+\t(ffssi2_internal): Fix input constraints; make the RTL pattern\n+\tmatch reality for `cc0'.\n+\n+2020-12-05  Maciej W. Rozycki  <macro@linux-mips.org>\n+\n+\t* config/vax/vax.c (vax_address_cost): Express the cost in terms\n+\tof COSTS_N_INSNS.\n+\t(vax_rtx_costs): Likewise.\n+\n+2020-12-05  Maciej W. Rozycki  <macro@linux-mips.org>\n+\n+\t* config/vax/constraints.md (A): New constraint.\n+\t* config/vax/predicates.md (external_symbolic_operand)\n+\t(external_const_operand): Remove predicates.\n+\t(local_symbolic_operand): Rename to...\n+\t(pic_symbolic_operand): ... this, and rework.\n+\t(external_memory_operand): Rename to...\n+\t(non_pic_external_memory_operand): ... this, and rework.\n+\t(illegal_blk_memory_operand, illegal_addsub_di_memory_operand):\n+\tUpdate accordingly.\n+\t* config/vax/vax-protos.h (vax_acceptable_pic_operand_p): New\n+\tprototype.\n+\t* config/vax/vax.c (vax_acceptable_pic_operand_p): New function.\n+\t(vax_output_int_add): Update according to predicate rework.\n+\t* config/vax/vax.h (LEGITIMATE_PIC_OPERAND_P): New macro.\n+\t* config/vax/vax.md (pushlclsymreg, pushextsymreg): Fold\n+\ttogether, and rename to...\n+\t(*pushsymreg): ... this.  Use the `pic_symbolic_operand'\n+\tpredicate and the `A' constraint for the displacement operand.\n+\t(movlclsymreg, movextsymreg): Fold together, and rename to...\n+\t(*movsymreg): ... this.  Use the `pic_symbolic_operand'\n+\tpredicate and the `A' constraint for the displacement operand.\n+\t(pushextsym, pushlclsym): Fold together, and rename to...\n+\t(*pushsym): ... this.  Use the `pic_symbolic_operand' predicate\n+\tand the `A' constraint for the displacement operand.\n+\t(movextsym, movlclsym): Fold together, and rename to...\n+\t(*movsym): ... this.  Use the `pic_symbolic_operand' predicate\n+\tand the `A' constraint for the displacement operand.\n+\n+2020-12-05  Maciej W. Rozycki  <macro@linux-mips.org>\n+\n+\t* config/vax/vax.c (print_operand): Replace `c' and `C' with\n+\t`k' and `K' respectively.\n+\t* config/vax/vax.md (*branch, *branch_reversed): Update\n+\taccordingly.\n+\n+2020-12-05  Matt Thomas  <matt@3am-software.com>\n+\t    Maciej W. Rozycki  <macro@linux-mips.org>\n+\n+\tPR target/58901\n+\t* reload.c (push_reload): Also reload the inner expression of a\n+\tSUBREG for pseudos associated with a mode-dependent memory\n+\treference.\n+\t(find_reloads): Force a reload likewise.\n+\n+2020-12-05  Roman Zhuykov  <zhroma@ispras.ru>\n+\n+\tPR rtl-optimization/97421\n+\t* modulo-sched.c (generate_prolog_epilog): Remove forward\n+\tdeclaration, adjust last argument name and type.\n+\t(const_iteration_count): Add bool pointer parameter to return\n+\twhether count register is read in pre-header after its\n+\tinitialization.\n+\t(sms_schedule): Fix count register initialization adjustment\n+\tprocedure according to what const_iteration_count said.\n+\n+2020-12-05  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\tPR target/97865\n+\t* configure: Regenerate.\n+\n+2020-12-05  Venkataramanan Kumar  <Venkataramanan.Kumar@amd.com>\n+\t    Sharavan Kumar  <Shravan.Kumar@amd.com>\n+\n+\t* common/config/i386/cpuinfo.h (get_amd_cpu) recognize znver3.\n+\t* common/config/i386/i386-common.c (processor_names): Add\n+\tznver3.\n+\t(processor_alias_table): Add znver3 and AMDFAM19H entry.\n+\t* common/config/i386/i386-cpuinfo.h (processor_types): Add\n+\tAMDFAM19H.\n+\t(processor_subtypes): AMDFAM19H_ZNVER3.\n+\t* config.gcc (i[34567]86-*-linux* | ...): Likewise.\n+\t* config/i386/driver-i386.c: (host_detect_local_cpu): Let\n+\t-march=native recognize znver3 processors.\n+\t* config/i386/i386-c.c (ix86_target_macros_internal): Add\n+\tznver3.\n+\t* config/i386/i386-options.c (m_znver3): New definition.\n+\t(m_ZNVER): Include m_znver3.\n+\t(processor_cost_table): Add znver3.\n+\t* config/i386/i386.c (ix86_reassociation_width): Likewise.\n+\t* config/i386/i386.h (TARGET_znver3): New definition.\n+\t(enum processor_type): Add PROCESSOR_ZNVER3.\n+\t* config/i386/i386.md (define_attr \"cpu\"): Add znver3.\n+\t* config/i386/x86-tune-sched.c: (ix86_issue_rate): Likewise.\n+\t(ix86_adjust_cost): Likewise.\n+\t* config/i386/x86-tune.def (X86_TUNE_AVOID_256FMA_CHAINS:\n+\tLikewise.\n+\t* config/i386/znver1.md: Add new reservations for znver3.\n+\t* doc/extend.texi: Add details about znver3.\n+\t* doc/invoke.texi: Likewise.\n+\n+2020-12-05  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/96226\n+\t* config/i386/i386.md (splitter after *<rotate_insn><mode>3_mask,\n+\tsplitter after *<rotate_insn><mode>3_mask_1): Drop the masking from\n+\tthe patterns to split into.\n+\n 2020-12-04  Jason Merrill  <jason@redhat.com>\n \n \t* vec.h (begin, end): Add overloads for vec*."}, {"sha": "4cbdc7e3660d8abe90abb1fd6b45c9aded551247", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e1edf48ebe8881bc7c5e54157f47169290bdd12/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e1edf48ebe8881bc7c5e54157f47169290bdd12/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=6e1edf48ebe8881bc7c5e54157f47169290bdd12", "patch": "@@ -1 +1 @@\n-20201205\n+20201206"}, {"sha": "f0386a181ff9546207b87e454d8ce757aaa30430", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e1edf48ebe8881bc7c5e54157f47169290bdd12/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e1edf48ebe8881bc7c5e54157f47169290bdd12/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=6e1edf48ebe8881bc7c5e54157f47169290bdd12", "patch": "@@ -1,3 +1,59 @@\n+2020-12-05  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/97093\n+\t* constraint.cc (parameter_mapping_equivalent_p): Add some\n+\tsanity checks.  Clarify comment.\n+\t(tsubst_nested_requirement): Always perform satisfaction\n+\tquietly first.  If that yields an erroneous result, emit a\n+\tcontext message and replay satisfaction noisily with the\n+\tdiagnostic normal form.\n+\t(finish_nested_requirement): Normalize the constraint-expression\n+\ttwice, once with diagnostic information and once without.  Store\n+\tthem in a TREE_LIST within the TREE_TYPE.\n+\t(diagnose_nested_requirement): When replaying satisfaction, use\n+\tthe diagnostic normal form instead of renormalizing on the spot.\n+\n+2020-12-05  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/97093\n+\t* constraint.cc (struct sat_info): Define.\n+\t(tsubst_nested_requirement): Pass a sat_info object to\n+\tsatisfy_constraint.\n+\t(satisfy_constraint_r): Take a sat_info argument instead of\n+\tsubst_info.\n+\t(satisfy_conjunction): Likewise.\n+\t(satisfy_disjunction): Likewise.  Instead of first evaluating\n+\teach branch quietly, evaluate each branch only with\n+\tunsatisfaction diagnostics disabled.  Exit early if evaluation\n+\tof a branch returns error_mark_node.\n+\t(satisfy_atom): Take a sat_info argument instead of subst_info.\n+\tFix a comment.  Check diagnose_unsatisfaction_p() instead of\n+\tnoisy() before replaying a substitution failure.\n+\t(satisfy_constraint): Take a sat_info argument instead of\n+\tsubst_info.\n+\t(satisfy_associated_constraints): Likewise.\n+\t(satisfy_constraint_expression): Likewise.\n+\t(satisfy_declaration_constraints): Likewise.\n+\t(constraint_satisfaction_value): Likewise and adjust\n+\taccordingly.  Fix formatting.\n+\t(constraints_satisfied_p): Pass a sat_info object to\n+\tconstraint_satisfaction_value.\n+\t(evaluate_concept_check): Pass a sat_info object to\n+\tsatisfy_constraint_expression.\n+\t(diagnose_nested_requirement): Likewise.\n+\t(diagnose_constraints): Pass an appropriate sat_info object to\n+\tconstraint_satisfaction_value.\n+\n+2020-12-05  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/98122\n+\t* constexpr.c (cxx_union_active_member): New function.\n+\t(cxx_fold_indirect_ref_1): Add ctx argument, pass it through to\n+\trecursive call.  Handle UNION_TYPE.\n+\t(cxx_fold_indirect_ref): Add ctx argument, pass it to recursive calls\n+\tand cxx_fold_indirect_ref_1.\n+\t(cxx_eval_indirect_ref): Adjust cxx_fold_indirect_ref calls.\n+\n 2020-12-04  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/93083"}, {"sha": "8357d52f35756557d1766090215a3f3ba71811c7", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e1edf48ebe8881bc7c5e54157f47169290bdd12/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e1edf48ebe8881bc7c5e54157f47169290bdd12/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=6e1edf48ebe8881bc7c5e54157f47169290bdd12", "patch": "@@ -1,3 +1,9 @@\n+2020-12-05  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/98016\n+\t* resolve.c (resolve_symbol): Set formal_arg_flag before\n+\tresolving an array spec and restore value afterwards.\n+\n 2020-12-03  Harald Anlauf  <anlauf@gmx.de>\n \n \tPR fortran/95342"}, {"sha": "a2ca0a9cf8593572d567e0c7283a66f4597b0ddf", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 301, "deletions": 0, "changes": 301, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e1edf48ebe8881bc7c5e54157f47169290bdd12/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e1edf48ebe8881bc7c5e54157f47169290bdd12/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6e1edf48ebe8881bc7c5e54157f47169290bdd12", "patch": "@@ -1,3 +1,304 @@\n+2020-12-05  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/97093\n+\t* g++.dg/cpp2a/concepts-requires22.C: New test.\n+\n+2020-12-05  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/97093\n+\t* g++.dg/concepts/pr94252.C: Verify we no longer issue a\n+\tspurious unsatisfaction note when diagnosing ill-formed\n+\tsatisfaction.\n+\t* g++.dg/cpp2a/concepts-requires18.C: No longer expect a\n+\tspurious unsatisfaction diagnostic when evaluating the\n+\tnested-requirement subst<void&> of a requires-expression that\n+\tappears outside of a template.\n+\t* g++.dg/cpp2a/concepts-requires21.C: Verify we no longer issue\n+\ta spurious unsatisfaction note when evaluating a\n+\tnested-requirement of a requires-expression that appears outside\n+\tof a template.\n+\t* g++.dg/cpp2a/concepts-nonbool3.C: New test.\n+\t* g++.dg/cpp2a/concepts-pr97093.C: New test.\n+\n+2020-12-05  Maciej W. Rozycki  <macro@linux-mips.org>\n+\n+\tPR target/95294\n+\t* gcc.target/vax/cmpelim-eq-adddf.c: New test.\n+\t* gcc.target/vax/cmpelim-eq-addhi.c: New test.\n+\t* gcc.target/vax/cmpelim-eq-addqi.c: New test.\n+\t* gcc.target/vax/cmpelim-eq-addsf.c: New test.\n+\t* gcc.target/vax/cmpelim-eq-addsi.c: New test.\n+\t* gcc.target/vax/cmpelim-eq-andhi.c: New test.\n+\t* gcc.target/vax/cmpelim-eq-andqi.c: New test.\n+\t* gcc.target/vax/cmpelim-eq-andsi.c: New test.\n+\t* gcc.target/vax/cmpelim-eq-ashlsi.c: New test.\n+\t* gcc.target/vax/cmpelim-eq-ashrsi.c: New test.\n+\t* gcc.target/vax/cmpelim-eq-divdf.c: New test.\n+\t* gcc.target/vax/cmpelim-eq-divhi.c: New test.\n+\t* gcc.target/vax/cmpelim-eq-divqi.c: New test.\n+\t* gcc.target/vax/cmpelim-eq-divsf.c: New test.\n+\t* gcc.target/vax/cmpelim-eq-divsi.c: New test.\n+\t* gcc.target/vax/cmpelim-eq-extendhisi.c: New test.\n+\t* gcc.target/vax/cmpelim-eq-extendqisi.c: New test.\n+\t* gcc.target/vax/cmpelim-eq-extvsi.c: New test.\n+\t* gcc.target/vax/cmpelim-eq-extzvsi.c: New test.\n+\t* gcc.target/vax/cmpelim-eq-fixdfhi.c: New test.\n+\t* gcc.target/vax/cmpelim-eq-fixdfqi.c: New test.\n+\t* gcc.target/vax/cmpelim-eq-fixdfsi.c: New test.\n+\t* gcc.target/vax/cmpelim-eq-fixsfhi.c: New test.\n+\t* gcc.target/vax/cmpelim-eq-fixsfqi.c: New test.\n+\t* gcc.target/vax/cmpelim-eq-fixsfsi.c: New test.\n+\t* gcc.target/vax/cmpelim-eq-floatsisf.c: New test.\n+\t* gcc.target/vax/cmpelim-eq-insvsi.c: New test.\n+\t* gcc.target/vax/cmpelim-eq-iorhi.c: New test.\n+\t* gcc.target/vax/cmpelim-eq-iorqi.c: New test.\n+\t* gcc.target/vax/cmpelim-eq-iorsi.c: New test.\n+\t* gcc.target/vax/cmpelim-eq-mova.c: New test.\n+\t* gcc.target/vax/cmpelim-eq-movdf.c: New test.\n+\t* gcc.target/vax/cmpelim-eq-movhi.c: New test.\n+\t* gcc.target/vax/cmpelim-eq-movqi.c: New test.\n+\t* gcc.target/vax/cmpelim-eq-movsf.c: New test.\n+\t* gcc.target/vax/cmpelim-eq-movsi.c: New test.\n+\t* gcc.target/vax/cmpelim-eq-muldf.c: New test.\n+\t* gcc.target/vax/cmpelim-eq-mulhi.c: New test.\n+\t* gcc.target/vax/cmpelim-eq-mulqi.c: New test.\n+\t* gcc.target/vax/cmpelim-eq-mulsf.c: New test.\n+\t* gcc.target/vax/cmpelim-eq-mulsi.c: New test.\n+\t* gcc.target/vax/cmpelim-eq-nothi.c: New test.\n+\t* gcc.target/vax/cmpelim-eq-notqi.c: New test.\n+\t* gcc.target/vax/cmpelim-eq-notsi.c: New test.\n+\t* gcc.target/vax/cmpelim-eq-rotlsi.c: New test.\n+\t* gcc.target/vax/cmpelim-eq-rotrsi.c: New test.\n+\t* gcc.target/vax/cmpelim-eq-subdf.c: New test.\n+\t* gcc.target/vax/cmpelim-eq-subhi.c: New test.\n+\t* gcc.target/vax/cmpelim-eq-subqi.c: New test.\n+\t* gcc.target/vax/cmpelim-eq-subsf.c: New test.\n+\t* gcc.target/vax/cmpelim-eq-subsi.c: New test.\n+\t* gcc.target/vax/cmpelim-eq-truncdfsf.c: New test.\n+\t* gcc.target/vax/cmpelim-eq-trunchiqi.c: New test.\n+\t* gcc.target/vax/cmpelim-eq-truncsihi.c: New test.\n+\t* gcc.target/vax/cmpelim-eq-truncsiqi.c: New test.\n+\t* gcc.target/vax/cmpelim-eq-zextendhisi.c: New test.\n+\t* gcc.target/vax/cmpelim-eq-zextendqihi.c: New test.\n+\t* gcc.target/vax/cmpelim-eq-zextendqisi.c: New test.\n+\t* gcc.target/vax/cmpelim-le-adddf.c: New test.\n+\t* gcc.target/vax/cmpelim-le-addhi.c: New test.\n+\t* gcc.target/vax/cmpelim-le-addqi.c: New test.\n+\t* gcc.target/vax/cmpelim-le-addsf.c: New test.\n+\t* gcc.target/vax/cmpelim-le-addsi.c: New test.\n+\t* gcc.target/vax/cmpelim-le-andhi.c: New test.\n+\t* gcc.target/vax/cmpelim-le-andqi.c: New test.\n+\t* gcc.target/vax/cmpelim-le-andsi.c: New test.\n+\t* gcc.target/vax/cmpelim-le-ashlsi.c: New test.\n+\t* gcc.target/vax/cmpelim-le-ashrsi.c: New test.\n+\t* gcc.target/vax/cmpelim-le-divdf.c: New test.\n+\t* gcc.target/vax/cmpelim-le-divhi.c: New test.\n+\t* gcc.target/vax/cmpelim-le-divqi.c: New test.\n+\t* gcc.target/vax/cmpelim-le-divsf.c: New test.\n+\t* gcc.target/vax/cmpelim-le-divsi.c: New test.\n+\t* gcc.target/vax/cmpelim-le-extendhisi.c: New test.\n+\t* gcc.target/vax/cmpelim-le-extendqisi.c: New test.\n+\t* gcc.target/vax/cmpelim-le-extvsi.c: New test.\n+\t* gcc.target/vax/cmpelim-le-extzvsi.c: New test.\n+\t* gcc.target/vax/cmpelim-le-fixdfhi.c: New test.\n+\t* gcc.target/vax/cmpelim-le-fixdfqi.c: New test.\n+\t* gcc.target/vax/cmpelim-le-fixdfsi.c: New test.\n+\t* gcc.target/vax/cmpelim-le-fixsfhi.c: New test.\n+\t* gcc.target/vax/cmpelim-le-fixsfqi.c: New test.\n+\t* gcc.target/vax/cmpelim-le-fixsfsi.c: New test.\n+\t* gcc.target/vax/cmpelim-le-floatsisf.c: New test.\n+\t* gcc.target/vax/cmpelim-le-insvsi.c: New test.\n+\t* gcc.target/vax/cmpelim-le-iorhi.c: New test.\n+\t* gcc.target/vax/cmpelim-le-iorqi.c: New test.\n+\t* gcc.target/vax/cmpelim-le-iorsi.c: New test.\n+\t* gcc.target/vax/cmpelim-le-movdf.c: New test.\n+\t* gcc.target/vax/cmpelim-le-movhi.c: New test.\n+\t* gcc.target/vax/cmpelim-le-movqi.c: New test.\n+\t* gcc.target/vax/cmpelim-le-movsf.c: New test.\n+\t* gcc.target/vax/cmpelim-le-movsi.c: New test.\n+\t* gcc.target/vax/cmpelim-le-muldf.c: New test.\n+\t* gcc.target/vax/cmpelim-le-mulhi.c: New test.\n+\t* gcc.target/vax/cmpelim-le-mulqi.c: New test.\n+\t* gcc.target/vax/cmpelim-le-mulsf.c: New test.\n+\t* gcc.target/vax/cmpelim-le-mulsi.c: New test.\n+\t* gcc.target/vax/cmpelim-le-nothi.c: New test.\n+\t* gcc.target/vax/cmpelim-le-notqi.c: New test.\n+\t* gcc.target/vax/cmpelim-le-notsi.c: New test.\n+\t* gcc.target/vax/cmpelim-le-rotlsi.c: New test.\n+\t* gcc.target/vax/cmpelim-le-rotrsi.c: New test.\n+\t* gcc.target/vax/cmpelim-le-subdf.c: New test.\n+\t* gcc.target/vax/cmpelim-le-subhi.c: New test.\n+\t* gcc.target/vax/cmpelim-le-subqi.c: New test.\n+\t* gcc.target/vax/cmpelim-le-subsf.c: New test.\n+\t* gcc.target/vax/cmpelim-le-subsi.c: New test.\n+\t* gcc.target/vax/cmpelim-le-truncdfsf.c: New test.\n+\t* gcc.target/vax/cmpelim-le-xorhi.c: New test.\n+\t* gcc.target/vax/cmpelim-le-xorqi.c: New test.\n+\t* gcc.target/vax/cmpelim-le-xorsi.c: New test.\n+\t* gcc.target/vax/cmpelim-leu-subhi.c: New test.\n+\t* gcc.target/vax/cmpelim-leu-subqi.c: New test.\n+\t* gcc.target/vax/cmpelim-leu-subsi.c: New test.\n+\t* gcc.target/vax/cmpelim-lt-adddf.c: New test.\n+\t* gcc.target/vax/cmpelim-lt-addhi.c: New test.\n+\t* gcc.target/vax/cmpelim-lt-addqi.c: New test.\n+\t* gcc.target/vax/cmpelim-lt-addsf.c: New test.\n+\t* gcc.target/vax/cmpelim-lt-addsi.c: New test.\n+\t* gcc.target/vax/cmpelim-lt-andhi.c: New test.\n+\t* gcc.target/vax/cmpelim-lt-andqi.c: New test.\n+\t* gcc.target/vax/cmpelim-lt-andsi.c: New test.\n+\t* gcc.target/vax/cmpelim-lt-ashlsi.c: New test.\n+\t* gcc.target/vax/cmpelim-lt-ashrsi.c: New test.\n+\t* gcc.target/vax/cmpelim-lt-divdf.c: New test.\n+\t* gcc.target/vax/cmpelim-lt-divhi.c: New test.\n+\t* gcc.target/vax/cmpelim-lt-divqi.c: New test.\n+\t* gcc.target/vax/cmpelim-lt-divsf.c: New test.\n+\t* gcc.target/vax/cmpelim-lt-divsi.c: New test.\n+\t* gcc.target/vax/cmpelim-lt-extendhisi.c: New test.\n+\t* gcc.target/vax/cmpelim-lt-extendqisi.c: New test.\n+\t* gcc.target/vax/cmpelim-lt-extvsi.c: New test.\n+\t* gcc.target/vax/cmpelim-lt-extzvsi.c: New test.\n+\t* gcc.target/vax/cmpelim-lt-fixdfhi.c: New test.\n+\t* gcc.target/vax/cmpelim-lt-fixdfqi.c: New test.\n+\t* gcc.target/vax/cmpelim-lt-fixdfsi.c: New test.\n+\t* gcc.target/vax/cmpelim-lt-fixsfhi.c: New test.\n+\t* gcc.target/vax/cmpelim-lt-fixsfqi.c: New test.\n+\t* gcc.target/vax/cmpelim-lt-fixsfsi.c: New test.\n+\t* gcc.target/vax/cmpelim-lt-floatsisf.c: New test.\n+\t* gcc.target/vax/cmpelim-lt-insvsi.c: New test.\n+\t* gcc.target/vax/cmpelim-lt-iorhi.c: New test.\n+\t* gcc.target/vax/cmpelim-lt-iorqi.c: New test.\n+\t* gcc.target/vax/cmpelim-lt-iorsi.c: New test.\n+\t* gcc.target/vax/cmpelim-lt-movdf.c: New test.\n+\t* gcc.target/vax/cmpelim-lt-movhi.c: New test.\n+\t* gcc.target/vax/cmpelim-lt-movqi.c: New test.\n+\t* gcc.target/vax/cmpelim-lt-movsf.c: New test.\n+\t* gcc.target/vax/cmpelim-lt-movsi.c: New test.\n+\t* gcc.target/vax/cmpelim-lt-muldf.c: New test.\n+\t* gcc.target/vax/cmpelim-lt-mulhi.c: New test.\n+\t* gcc.target/vax/cmpelim-lt-mulqi.c: New test.\n+\t* gcc.target/vax/cmpelim-lt-mulsf.c: New test.\n+\t* gcc.target/vax/cmpelim-lt-mulsi.c: New test.\n+\t* gcc.target/vax/cmpelim-lt-nothi.c: New test.\n+\t* gcc.target/vax/cmpelim-lt-notqi.c: New test.\n+\t* gcc.target/vax/cmpelim-lt-notsi.c: New test.\n+\t* gcc.target/vax/cmpelim-lt-rotlsi.c: New test.\n+\t* gcc.target/vax/cmpelim-lt-rotrsi.c: New test.\n+\t* gcc.target/vax/cmpelim-lt-subdf.c: New test.\n+\t* gcc.target/vax/cmpelim-lt-subhi.c: New test.\n+\t* gcc.target/vax/cmpelim-lt-subqi.c: New test.\n+\t* gcc.target/vax/cmpelim-lt-subsf.c: New test.\n+\t* gcc.target/vax/cmpelim-lt-subsi.c: New test.\n+\t* gcc.target/vax/cmpelim-lt-truncdfsf.c: New test.\n+\t* gcc.target/vax/cmpelim-lt-xorhi.c: New test.\n+\t* gcc.target/vax/cmpelim-lt-xorqi.c: New test.\n+\t* gcc.target/vax/cmpelim-lt-xorsi.c: New test.\n+\t* gcc.target/vax/cmpelim-ltu-subhi.c: New test.\n+\t* gcc.target/vax/cmpelim-ltu-subqi.c: New test.\n+\t* gcc.target/vax/cmpelim-ltu-subsi.c: New test.\n+\t* gcc.target/vax/cmpelim-xx-addsi.c: New test.\n+\t* gcc.target/vax/cmpelim-xx-insvsi.c: New test.\n+\t* gcc.target/vax/cmpelim-xxu-subsi.c: New test.\n+\t* gcc.target/vax/peephole2-eq-andhi.c: New test.\n+\t* gcc.target/vax/peephole2-eq-andqi.c: New test.\n+\t* gcc.target/vax/peephole2-eq-andsi.c: New test.\n+\t* gcc.target/vax/peephole2-eq-cmpvsi.c: New test.\n+\t* gcc.target/vax/peephole2-eq-cmpzvsi.c: New test.\n+\t* gcc.target/vax/peephole2-eq-ctzhi-0.c: New test.\n+\t* gcc.target/vax/peephole2-eq-ctzhi-1.c: New test.\n+\t* gcc.target/vax/peephole2-eq-ctzqi-0.c: New test.\n+\t* gcc.target/vax/peephole2-eq-ctzqi-1.c: New test.\n+\t* gcc.target/vax/peephole2-eq-ctzsi-0.c: New test.\n+\t* gcc.target/vax/peephole2-eq-ctzsi-1.c: New test.\n+\t* gcc.target/vax/peephole2-eq-ffshi.c: New test.\n+\t* gcc.target/vax/peephole2-eq-ffsqi.c: New test.\n+\t* gcc.target/vax/peephole2-eq-ffssi.c: New test.\n+\t* gcc.target/vax/peephole2-le-andhi.c: New test.\n+\t* gcc.target/vax/peephole2-le-andqi.c: New test.\n+\t* gcc.target/vax/peephole2-le-andsi.c: New test.\n+\t* gcc.target/vax/peephole2-le-cmpvsi.c: New test.\n+\t* gcc.target/vax/peephole2-le-cmpzvsi.c: New test.\n+\t* gcc.target/vax/peephole2-leu-cmpvsi.c: New test.\n+\t* gcc.target/vax/peephole2-leu-cmpzvsi.c: New test.\n+\t* gcc.target/vax/peephole2-lt-andhi.c: New test.\n+\t* gcc.target/vax/peephole2-lt-andqi.c: New test.\n+\t* gcc.target/vax/peephole2-lt-andsi.c: New test.\n+\t* gcc.target/vax/peephole2-lt-cmpvsi.c: New test.\n+\t* gcc.target/vax/peephole2-lt-cmpzvsi.c: New test.\n+\t* gcc.target/vax/peephole2-ltu-cmpvsi.c: New test.\n+\t* gcc.target/vax/peephole2-ltu-cmpzvsi.c: New test.\n+\n+2020-12-05  Maciej W. Rozycki  <macro@linux-mips.org>\n+\n+\t* gcc.target/vax/movmem.c: New test.\n+\n+2020-12-05  Maciej W. Rozycki  <macro@linux-mips.org>\n+\n+\t* gcc.target/vax/cpymem.c: New test.\n+\n+2020-12-05  Maciej W. Rozycki  <macro@linux-mips.org>\n+\n+\t* gcc.target/vax/ctzhi.c: New test.\n+\t* gcc.target/vax/ctzqi.c: New test.\n+\t* gcc.target/vax/ffshi.c: New test.\n+\t* gcc.target/vax/ffsqi.c: New test.\n+\n+2020-12-05  Maciej W. Rozycki  <macro@linux-mips.org>\n+\n+\t* gcc.target/vax/ctzsi.c: New test.\n+\n+2020-12-05  Maciej W. Rozycki  <macro@linux-mips.org>\n+\n+\t* gcc.target/vax/bbcci.c: New test.\n+\t* gcc.target/vax/bbssi.c: New test.\n+\n+2020-12-05  Maciej W. Rozycki  <macro@linux-mips.org>\n+\n+\t* gcc.target/vax/ffssi.c: New test.\n+\n+2020-12-05  Maciej W. Rozycki  <macro@linux-mips.org>\n+\n+\t* gcc.dg/loop-8.c: Exclude for `vax-*-*'.\n+\t* gcc.target/vax/compare-add-zero.c: New test.\n+\t* gcc.target/vax/compare-mov-zero.c: New test.\n+\n+2020-12-05  Maciej W. Rozycki  <macro@linux-mips.org>\n+\n+\t* gcc.target/vax/vax.exp: Use `gcc-dg-runtest' rather than\n+\t`dg-runtest'.\n+\t* gcc.target/vax/pr56875.c (dg-options): Make empty.\n+\t(a): Rewrite for calculations to make effect.  Reformat.\n+\n+2020-12-05  Matt Thomas  <matt@3am-software.com>\n+\t    Maciej W. Rozycki  <macro@linux-mips.org>\n+\n+\tPR target/58901\n+\t* gcc.c-torture/compile/pr58901-0.c: New test.\n+\t* gcc.c-torture/compile/pr58901-1.c: New test.\n+\n+2020-12-05  Roman Zhuykov  <zhroma@ispras.ru>\n+\n+\tPR rtl-optimization/97421\n+\t* gcc.c-torture/execute/pr97421-1.c: New test.\n+\t* gcc.c-torture/execute/pr97421-2.c: New test.\n+\t* gcc.c-torture/execute/pr97421-3.c: New test.\n+\n+2020-12-05  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/98016\n+\t* gfortran.dg/pr98016.f90: New test.\n+\n+2020-12-05  Venkataramanan Kumar  <Venkataramanan.Kumar@amd.com>\n+\t    Sharavan Kumar  <Shravan.Kumar@amd.com>\n+\n+\t* gcc.target/i386/funcspec-56.inc: Handle new march.\n+\t* g++.target/i386/mv29.C: New file.\n+\n+2020-12-05  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/98122\n+\t* g++.dg/cpp1y/constexpr-98122.C: New test.\n+\t* g++.dg/cpp2a/constexpr-98122.C: New test.\n+\n 2020-12-04  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/93083"}, {"sha": "a68232c18f3481ba0b2a6157d37f1e9b73947747", "filename": "libatomic/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e1edf48ebe8881bc7c5e54157f47169290bdd12/libatomic%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e1edf48ebe8881bc7c5e54157f47169290bdd12/libatomic%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libatomic%2FChangeLog?ref=6e1edf48ebe8881bc7c5e54157f47169290bdd12", "patch": "@@ -1,3 +1,8 @@\n+2020-12-05  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\tPR target/97865\n+\t* configure: Regenerate.\n+\n 2020-11-29  John David Anglin  <danglin@gcc.gnu.org>\n \n \t* configure: Regenerate."}, {"sha": "827196cb52dae53303f32b88a7804f7a1234f639", "filename": "libbacktrace/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e1edf48ebe8881bc7c5e54157f47169290bdd12/libbacktrace%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e1edf48ebe8881bc7c5e54157f47169290bdd12/libbacktrace%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2FChangeLog?ref=6e1edf48ebe8881bc7c5e54157f47169290bdd12", "patch": "@@ -1,3 +1,8 @@\n+2020-12-05  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\tPR target/97865\n+\t* configure: Regenerate.\n+\n 2020-12-02  Ian Lance Taylor  <iant@golang.org>\n \n \t* dwarf.c (resolve_string): Use > rather than >= to check whether"}, {"sha": "cb8197e203b1b22ac2b75ba78610b1c239f12ab9", "filename": "libcc1/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e1edf48ebe8881bc7c5e54157f47169290bdd12/libcc1%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e1edf48ebe8881bc7c5e54157f47169290bdd12/libcc1%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcc1%2FChangeLog?ref=6e1edf48ebe8881bc7c5e54157f47169290bdd12", "patch": "@@ -1,3 +1,11 @@\n+2020-12-05  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\tPR target/97865\n+\t* Makefile.am: Add dynamic_lookup to LD flags for Darwin.\n+\t* configure.ac: Test for Darwin host and set a flag.\n+\t* Makefile.in: Regenerate.\n+\t* configure: Regenerate.\n+\n 2020-11-29  John David Anglin  <danglin@gcc.gnu.org>\n \n \t* configure: Regenerate."}, {"sha": "fc59bd8a51c3af18da3f9df30d2c096e9cece4cc", "filename": "libffi/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e1edf48ebe8881bc7c5e54157f47169290bdd12/libffi%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e1edf48ebe8881bc7c5e54157f47169290bdd12/libffi%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2FChangeLog?ref=6e1edf48ebe8881bc7c5e54157f47169290bdd12", "patch": "@@ -1,3 +1,8 @@\n+2020-12-05  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\tPR target/97865\n+\t* configure: Regenerate.\n+\n 2020-11-29  John David Anglin  <danglin@gcc.gnu.org>\n \n \t* configure: Regenerate."}, {"sha": "4967867bd6d08972d7f1508f3ac17748e2422ca8", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e1edf48ebe8881bc7c5e54157f47169290bdd12/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e1edf48ebe8881bc7c5e54157f47169290bdd12/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=6e1edf48ebe8881bc7c5e54157f47169290bdd12", "patch": "@@ -1,3 +1,8 @@\n+2020-12-05  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\tPR target/97865\n+\t* configure: Regenerate.\n+\n 2020-11-29  John David Anglin  <danglin@gcc.gnu.org>\n \n \t* configure: Regenerate."}, {"sha": "ff2073709b8531cf63470d9ad7ef9d6a6e79e253", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e1edf48ebe8881bc7c5e54157f47169290bdd12/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e1edf48ebe8881bc7c5e54157f47169290bdd12/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=6e1edf48ebe8881bc7c5e54157f47169290bdd12", "patch": "@@ -1,3 +1,8 @@\n+2020-12-05  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\tPR target/97865\n+\t* configure: Regenerate.\n+\n 2020-11-29  John David Anglin  <danglin@gcc.gnu.org>\n \n \t* configure: Regenerate."}, {"sha": "ada55c4dbf7c1823b34c3fe7f2a8f8b9d9a5c6c6", "filename": "libhsail-rt/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e1edf48ebe8881bc7c5e54157f47169290bdd12/libhsail-rt%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e1edf48ebe8881bc7c5e54157f47169290bdd12/libhsail-rt%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libhsail-rt%2FChangeLog?ref=6e1edf48ebe8881bc7c5e54157f47169290bdd12", "patch": "@@ -1,3 +1,8 @@\n+2020-12-05  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\tPR target/97865\n+\t* configure: Regenerate.\n+\n 2020-11-29  John David Anglin  <danglin@gcc.gnu.org>\n \n \t* configure: Regenerate."}, {"sha": "349251e307f7f573407b90c60588ad65a6480cfb", "filename": "libitm/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e1edf48ebe8881bc7c5e54157f47169290bdd12/libitm%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e1edf48ebe8881bc7c5e54157f47169290bdd12/libitm%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2FChangeLog?ref=6e1edf48ebe8881bc7c5e54157f47169290bdd12", "patch": "@@ -1,3 +1,9 @@\n+2020-12-05  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\tPR target/97865\n+\t* configure.tgt: Add dynamic_lookup to XLDFLAGS for Darwin.\n+\t* configure: Regenerate.\n+\n 2020-11-29  John David Anglin  <danglin@gcc.gnu.org>\n \n \t* configure: Regenerate."}, {"sha": "01312dae04b76babd316f17d41bd1ebef8780a42", "filename": "libobjc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e1edf48ebe8881bc7c5e54157f47169290bdd12/libobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e1edf48ebe8881bc7c5e54157f47169290bdd12/libobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2FChangeLog?ref=6e1edf48ebe8881bc7c5e54157f47169290bdd12", "patch": "@@ -1,3 +1,8 @@\n+2020-12-05  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\tPR target/97865\n+\t* configure: Regenerate.\n+\n 2020-11-29  John David Anglin  <danglin@gcc.gnu.org>\n \n \t* configure: Regenerate."}, {"sha": "8dca301b4957a3cc75a6dda8da86f701e327abd4", "filename": "libphobos/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e1edf48ebe8881bc7c5e54157f47169290bdd12/libphobos%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e1edf48ebe8881bc7c5e54157f47169290bdd12/libphobos%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2FChangeLog?ref=6e1edf48ebe8881bc7c5e54157f47169290bdd12", "patch": "@@ -1,3 +1,8 @@\n+2020-12-05  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\tPR target/97865\n+\t* configure: Regenerate.\n+\n 2020-11-30  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \tPR d/87818"}, {"sha": "e9ba2bcd92417e5f0ec17677d4e905ba12e4746b", "filename": "libquadmath/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e1edf48ebe8881bc7c5e54157f47169290bdd12/libquadmath%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e1edf48ebe8881bc7c5e54157f47169290bdd12/libquadmath%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2FChangeLog?ref=6e1edf48ebe8881bc7c5e54157f47169290bdd12", "patch": "@@ -1,3 +1,8 @@\n+2020-12-05  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\tPR target/97865\n+\t* configure: Regenerate.\n+\n 2020-11-29  John David Anglin  <danglin@gcc.gnu.org>\n \n \t* configure: Regenerate."}, {"sha": "05ca595404f3b65317ec164d550c1be847277ca4", "filename": "libsanitizer/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e1edf48ebe8881bc7c5e54157f47169290bdd12/libsanitizer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e1edf48ebe8881bc7c5e54157f47169290bdd12/libsanitizer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2FChangeLog?ref=6e1edf48ebe8881bc7c5e54157f47169290bdd12", "patch": "@@ -1,3 +1,10 @@\n+2020-12-05  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\tPR target/97865\n+\t* configure.tgt: Add dynamic_lookup to EXTRA_CXXFLAGS for\n+\tDarwin.\n+\t* configure: Regenerate.\n+\n 2020-11-29  John David Anglin  <danglin@gcc.gnu.org>\n \n \t* configure: Regenerate."}, {"sha": "cc6cbb3955ec96079543210f63135e483b701806", "filename": "libssp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e1edf48ebe8881bc7c5e54157f47169290bdd12/libssp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e1edf48ebe8881bc7c5e54157f47169290bdd12/libssp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libssp%2FChangeLog?ref=6e1edf48ebe8881bc7c5e54157f47169290bdd12", "patch": "@@ -1,3 +1,8 @@\n+2020-12-05  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\tPR target/97865\n+\t* configure: Regenerate.\n+\n 2020-11-29  John David Anglin  <danglin@gcc.gnu.org>\n \n \t* configure: Regenerate."}, {"sha": "d3ee18ed7d1074c7cadc40e7b89c669b94fa51f0", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e1edf48ebe8881bc7c5e54157f47169290bdd12/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e1edf48ebe8881bc7c5e54157f47169290bdd12/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=6e1edf48ebe8881bc7c5e54157f47169290bdd12", "patch": "@@ -1,3 +1,8 @@\n+2020-12-05  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\tPR target/97865\n+\t* configure: Regenerate.\n+\n 2020-12-04  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/80780"}, {"sha": "7bfd460138cf9c7fee84772ccedf5356a5f9120e", "filename": "libvtv/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e1edf48ebe8881bc7c5e54157f47169290bdd12/libvtv%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e1edf48ebe8881bc7c5e54157f47169290bdd12/libvtv%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libvtv%2FChangeLog?ref=6e1edf48ebe8881bc7c5e54157f47169290bdd12", "patch": "@@ -1,3 +1,8 @@\n+2020-12-05  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\tPR target/97865\n+\t* configure: Regenerate.\n+\n 2020-11-29  John David Anglin  <danglin@gcc.gnu.org>\n \n \t* configure: Regenerate."}, {"sha": "8dfdc55f7e30f416156177ce2debd064912d08e9", "filename": "zlib/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e1edf48ebe8881bc7c5e54157f47169290bdd12/zlib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e1edf48ebe8881bc7c5e54157f47169290bdd12/zlib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/zlib%2FChangeLog?ref=6e1edf48ebe8881bc7c5e54157f47169290bdd12", "patch": "@@ -1,3 +1,8 @@\n+2020-12-05  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\tPR target/97865\n+\t* configure: Regenerate.\n+\n 2020-11-29  John David Anglin  <danglin@gcc.gnu.org>\n \n \t* configure: Regenerate."}]}