{"sha": "e1f83b4dcdd1d12f29268a3052af19fd242345dc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTFmODNiNGRjZGQxZDEyZjI5MjY4YTMwNTJhZjE5ZmQyNDIzNDVkYw==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1996-01-15T03:07:35Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1996-01-15T03:07:35Z"}, "message": "make exception table work with -mrelocable; fix long long ++/--; Make long longs passed correctly in V.4\n\nFrom-SVN: r10978", "tree": {"sha": "d645c8f137dcec51fcf704bf8b3486716803490b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d645c8f137dcec51fcf704bf8b3486716803490b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e1f83b4dcdd1d12f29268a3052af19fd242345dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1f83b4dcdd1d12f29268a3052af19fd242345dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1f83b4dcdd1d12f29268a3052af19fd242345dc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1f83b4dcdd1d12f29268a3052af19fd242345dc/comments", "author": null, "committer": null, "parents": [{"sha": "ff9b5bd87cd73e1ac1a84c290c071b373148ab37", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff9b5bd87cd73e1ac1a84c290c071b373148ab37", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff9b5bd87cd73e1ac1a84c290c071b373148ab37"}], "stats": {"total": 104, "additions": 59, "deletions": 45}, "files": [{"sha": "4c2872145c0dd7d135e02ec0c1c778ef1ceabbbb", "filename": "gcc/config/rs6000/eabi-ci.asm", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1f83b4dcdd1d12f29268a3052af19fd242345dc/gcc%2Fconfig%2Frs6000%2Feabi-ci.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1f83b4dcdd1d12f29268a3052af19fd242345dc/gcc%2Fconfig%2Frs6000%2Feabi-ci.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Feabi-ci.asm?ref=e1f83b4dcdd1d12f29268a3052af19fd242345dc", "patch": "@@ -97,3 +97,8 @@ _SDA2_BASE_ = .+32768\n \t.globl\t__SBSS2_START__\n \t.type\t__SBSS2_START__,@object\n __SBSS2_START__:\n+\n+\t.section \".gcc_except_table\",\"aw\"\n+\t.globl\t__EXCEPT_START__\n+\t.type\t__EXCEPT_START__,@object\n+__EXCEPT_START__:"}, {"sha": "e9ea7f62ff4b94731837431d8abf716028c68b29", "filename": "gcc/config/rs6000/eabi-cn.asm", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1f83b4dcdd1d12f29268a3052af19fd242345dc/gcc%2Fconfig%2Frs6000%2Feabi-cn.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1f83b4dcdd1d12f29268a3052af19fd242345dc/gcc%2Fconfig%2Frs6000%2Feabi-cn.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Feabi-cn.asm?ref=e1f83b4dcdd1d12f29268a3052af19fd242345dc", "patch": "@@ -95,3 +95,8 @@ __SDATA2_END__:\n \t.globl\t__SBSS2_END__\n \t.type\t__SBSS2_END__,@object\n __SBSS2_END__:\n+\n+\t.section \".gcc_except_table\",\"aw\"\n+\t.globl\t__EXCEPT_END__\n+\t.type\t__EXCEPT_END__,@object\n+__EXCEPT_END__:"}, {"sha": "c69dfefe424b2fc11b6bcfa9971a5f75f0f64486", "filename": "gcc/config/rs6000/eabi.asm", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1f83b4dcdd1d12f29268a3052af19fd242345dc/gcc%2Fconfig%2Frs6000%2Feabi.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1f83b4dcdd1d12f29268a3052af19fd242345dc/gcc%2Fconfig%2Frs6000%2Feabi.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Feabi.asm?ref=e1f83b4dcdd1d12f29268a3052af19fd242345dc", "patch": "@@ -90,6 +90,12 @@\n .Ldtore = .-.LCTOC1\n \t.long\t__DTOR_END__\t\t\t/* end of .dtor section */\n \n+.Lexcepts = .-.LCTOC1\n+\t.long\t__EXCEPT_START__\t\t/* start of .gcc_except_table section */\n+\n+.Lexcepte = .-.LCTOC1\n+\t.long\t__EXCEPT_END__\t\t\t/* end of .gcc_except_table section */\n+\n .Linit = .-.LCTOC1\n \t.long\t.Linit_p\t\t\t/* address of variable to say we've been called */\n \n@@ -182,7 +188,7 @@ FUNC_START(__eabi)\n \tlwz\t4,.Ldtore(11)\t\t\t/* destructors pointers end */\n \n \tcmpw\t1,3,4\t\t\t\t/* any pointers to adjust */\n-\tbc\t12,6,.Lfix\n+\tbc\t12,6,.Lexcept\n \n .Ldloop:\n \tlwz\t5,0(3)\t\t\t\t/* next pointer */\n@@ -192,6 +198,25 @@ FUNC_START(__eabi)\n \tcmpw\t1,3,4\t\t\t\t/* more pointers to adjust? */\n \tbc\t4,6,.Ldloop\n \n+/* Fixup the .gcc_except_table section for G++ exceptions */\n+\n+.Lexcept:\n+\tlwz\t3,.Lexcepts(11)\t\t\t/* exception table pointers start */\n+\tlwz\t4,.Lexcepte(11)\t\t\t/* exception table pointers end */\n+\n+\tcmpw\t1,3,4\t\t\t\t/* any pointers to adjust */\n+\tbc\t12,6,.Lfix\n+\n+.Leloop:\n+\tlwz\t5,0(3)\t\t\t\t/* next pointer */\n+\taddi\t3,3,4\t\t\t\t/* bump to next word */\n+\tcmpi\t1,5,0\n+\tbeq\t1,.Leloop\t\t\t/* if NULL pointer, don't adjust */\n+\tadd\t5,5,12\t\t\t\t/* adjust */\n+\tstw\t5,-4(3)\n+\tcmpw\t1,3,4\t\t\t\t/* more pointers to adjust? */\n+\tbc\t4,6,.Leloop\n+\n /* Fixup any user initialized pointers now (the compiler drops pointers to */\n /* each of the relocs that it does in the .fixup section).  */\n "}, {"sha": "ae045450b71e142349adbd9e3431480cf94260bc", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1f83b4dcdd1d12f29268a3052af19fd242345dc/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1f83b4dcdd1d12f29268a3052af19fd242345dc/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=e1f83b4dcdd1d12f29268a3052af19fd242345dc", "patch": "@@ -900,13 +900,18 @@ init_cumulative_args (cum, fntype, libname, incoming)\n    of an argument with the specified mode and type.  If it is not defined, \n    PARM_BOUNDARY is used for all arguments.\n    \n-   Windows NT wants anything >= 8 bytes to be double word aligned.  */\n+   Windows NT wants anything >= 8 bytes to be double word aligned.\n+\n+   V.4 wants long longs to be double word aligned.  */\n \n int\n function_arg_boundary (mode, type)\n      enum machine_mode mode;\n      tree type;\n {\n+  if (DEFAULT_ABI == ABI_V4 && mode == DImode)\n+    return 64;\n+\n   if (DEFAULT_ABI != ABI_NT || TARGET_64BIT)\n     return PARM_BOUNDARY;\n "}, {"sha": "b2dec1a338e72dfd3d3604988c80bbae780e521f", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 5, "deletions": 42, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1f83b4dcdd1d12f29268a3052af19fd242345dc/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1f83b4dcdd1d12f29268a3052af19fd242345dc/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=e1f83b4dcdd1d12f29268a3052af19fd242345dc", "patch": "@@ -3618,56 +3618,19 @@\n ;; (for example, having an input in 7,8 and an output in 6,7).  We\n ;; also allow for the the output being the same as one of the inputs.\n \n-(define_expand \"adddi3\"\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n-\t(plus:DI (match_operand:DI 1 \"gpc_reg_operand\" \"\")\n-\t\t (match_operand:DI 2 \"reg_or_short_operand\" \"\")))]\n-  \"\"\n-  \"\n-{\n-  if (! TARGET_POWER && ! TARGET_POWERPC64\n-      && short_cint_operand (operands[2], DImode))\n-    FAIL;\n-}\")\n-\n-(define_insn \"\"\n+(define_insn \"adddi3\"\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=&r,&r,r,r\")\n \t(plus:DI (match_operand:DI 1 \"gpc_reg_operand\" \"%r,r,0,0\")\n \t\t (match_operand:DI 2 \"reg_or_short_operand\" \"r,I,r,I\")))]\n-  \"TARGET_POWER && ! TARGET_POWERPC64\"\n+  \"! TARGET_POWERPC64\"\n   \"@\n    {a|addc} %L0,%L1,%L2\\;{ae|adde} %0,%1,%2\n    {ai|addic} %L0,%L1,%2\\;{a%G2e|add%G2e} %0,%1\n    {a|addc} %L0,%L1,%L2\\;{ae|adde} %0,%1,%2\n    {ai|addic} %L0,%L1,%2\\;{a%G2e|add%G2e} %0,%1\"\n   [(set_attr \"length\" \"8\")])\n \n-(define_insn \"\"\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=&r,r\")\n-\t(plus:DI (match_operand:DI 1 \"gpc_reg_operand\" \"%r,0\")\n-\t\t (match_operand:DI 2 \"gpc_reg_operand\" \"r,r\")))]\n-  \"! TARGET_POWER && ! TARGET_POWERPC64\"\n-  \"*\n-{\n-  return (WORDS_BIG_ENDIAN)\n-  ? \\\"addc %L0,%L1,%L2\\;adde %0,%1,%2\\\"\n-  : \\\"addc %0,%1,%2\\;adde %L0,%L1,%L2\\\";\n-}\"\n-  [(set_attr \"length\" \"8\")])\n-\n-(define_expand \"subdi3\"\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n-\t(minus:DI (match_operand:DI 1 \"reg_or_short_operand\" \"\")\n-\t\t  (match_operand:DI 2 \"gpc_reg_operand\" \"\")))]\n-  \"\"\n-  \"\n-{\n-  if (! TARGET_POWER && ! TARGET_POWERPC64\n-      && short_cint_operand (operands[1], DImode))\n-    FAIL;\n-}\")\n-\n-(define_insn \"\"\n+(define_insn \"subddi3\"\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=&r,&r,r,r,r\")\n \t(minus:DI (match_operand:DI 1 \"reg_or_short_operand\" \"r,I,0,r,I\")\n \t\t  (match_operand:DI 2 \"gpc_reg_operand\" \"r,r,r,0,0\")))]\n@@ -5660,7 +5623,7 @@\n    (clobber (match_scratch:SI 5 \"=&r\"))\n    (clobber (match_scratch:SI 6 \"=l\"))]\n   \"DEFAULT_ABI == ABI_NT\"\n-  \"{st|stw} %4,%a3\\;{l|lwz} %6,0(%0)\\;{l|lwz} %4,4(%0);\\;mt%6 %5\\;{brl|blrl}\\;{l|lwz} %4,%a3\"\n+  \"{st|stw} %4,%a3\\;{l|lwz} %5,0(%0)\\;{l|lwz} %4,4(%0)\\;mt%6 %5\\;{brl|blrl}\\;{l|lwz} %4,%a3\"\n   [(set_attr \"length\" \"24\")])\n \n (define_insn \"call_value_indirect_nt\"\n@@ -5673,7 +5636,7 @@\n    (clobber (match_scratch:SI 6 \"=&r\"))\n    (clobber (match_scratch:SI 7 \"=l\"))]\n   \"DEFAULT_ABI == ABI_NT\"\n-  \"{st|stw} %5,%a4\\;{l|lwz} %6,0(%1)\\;{l|lwz} %5,4(%1);\\;mt%7 %6\\;{brl|blrl}\\;{l|lwz} %5,%a4\"\n+  \"{st|stw} %5,%a4\\;{l|lwz} %6,0(%1)\\;{l|lwz} %5,4(%1)\\;mt%7 %6\\;{brl|blrl}\\;{l|lwz} %5,%a4\"\n   [(set_attr \"length\" \"24\")])\n \n ;; A function pointer under System V is just a normal pointer"}, {"sha": "4e7d826663698c04a5edec6172fd9d082690f152", "filename": "gcc/ginclude/va-ppc.h", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1f83b4dcdd1d12f29268a3052af19fd242345dc/gcc%2Fginclude%2Fva-ppc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1f83b4dcdd1d12f29268a3052af19fd242345dc/gcc%2Fginclude%2Fva-ppc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fginclude%2Fva-ppc.h?ref=e1f83b4dcdd1d12f29268a3052af19fd242345dc", "patch": "@@ -91,6 +91,9 @@ __extension__ ({\t\t\t\t\t\t\t\\\n #define __va_float_p(TYPE)\t(__builtin_classify_type(*(TYPE *)0) == 8)\n #endif\n \n+#define __va_longlong_p(TYPE) \\\n+  ((__builtin_classify_type(*(TYPE *)0) == 1) && (sizeof(TYPE) == 8))\n+\n #define __va_aggregate_p(TYPE)\t(__builtin_classify_type(*(TYPE *)0) >= 12)\n #define __va_size(TYPE)\t\t((sizeof(TYPE) + sizeof (long) - 1) / sizeof (long))\n \n@@ -111,8 +114,13 @@ __extension__ (*({\t\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n   else if (!__va_float_p (TYPE) && !__va_aggregate_p (TYPE)\t\t\\\n-\t   && (AP)->gpr + __va_size(TYPE) <= 8)\t\t\t\t\\\n+\t   && (AP)->gpr + __va_size(TYPE) <= 8\t\t\t\t\\\n+\t   && (!__va_longlong_p(TYPE)\t\t\t\t\t\\\n+\t       || (AP)->gpr + __va_size(TYPE) <= 7))\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n+      if (__va_longlong_p(TYPE) && ((AP)->gpr & 1) != 0)\t\t\\\n+\t(AP)->gpr++;\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n       __ptr = __VA_GP_REGSAVE (AP, TYPE);\t\t\t\t\\\n       (AP)->gpr += __va_size (TYPE);\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n@@ -132,6 +140,9 @@ __extension__ (*({\t\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   else\t\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n+      if (__va_longlong_p(TYPE) && ((long)(AP)->overflow_arg_area & 4) != 0) \\\n+\t(AP)->overflow_arg_area += 4;\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n       __ptr = (TYPE *) (void *) ((AP)->overflow_arg_area);\t\t\\\n       (AP)->overflow_arg_area += __va_size (TYPE) * sizeof (long);\t\\\n     }\t\t\t\t\t\t\t\t\t\\"}]}