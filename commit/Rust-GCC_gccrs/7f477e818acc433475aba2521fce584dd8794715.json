{"sha": "7f477e818acc433475aba2521fce584dd8794715", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Y0NzdlODE4YWNjNDMzNDc1YWJhMjUyMWZjZTU4NGRkODc5NDcxNQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "1999-04-29T08:33:55Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "1999-04-29T08:33:55Z"}, "message": "cp-tree.h (TYPE_NOTHROW_P): New macro.\n\n\t* cp-tree.h (TYPE_NOTHROW_P): New macro.\n\t* decl2.c (delete_sanity): Warn on deleting void *.\n\t* init.c (build_new_1): Use TYPE_NOTHROW_P.\n\t* typeck.c (c_expand_return): cp_pedwarn on returning NULL from\n\tthrowing operator new.\n\nFrom-SVN: r26692", "tree": {"sha": "2d18cbe3b572fdba5fae9997a0e9974a51d342c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2d18cbe3b572fdba5fae9997a0e9974a51d342c0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7f477e818acc433475aba2521fce584dd8794715", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f477e818acc433475aba2521fce584dd8794715", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f477e818acc433475aba2521fce584dd8794715", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f477e818acc433475aba2521fce584dd8794715/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9939c435d293b687481de7fb0d2d95d077b3e168", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9939c435d293b687481de7fb0d2d95d077b3e168", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9939c435d293b687481de7fb0d2d95d077b3e168"}], "stats": {"total": 167, "additions": 146, "deletions": 21}, "files": [{"sha": "e19e6d3da234982dafe520c36b83d67553538f16", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f477e818acc433475aba2521fce584dd8794715/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f477e818acc433475aba2521fce584dd8794715/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=7f477e818acc433475aba2521fce584dd8794715", "patch": "@@ -1,3 +1,11 @@\n+1999-04-29  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* cp-tree.h (TYPE_NOTHROW_P): New macro.\n+\t* decl2.c (delete_sanity): Warn on deleting void *.\n+\t* init.c (build_new_1): Use TYPE_NOTHROW_P.\n+\t* typeck.c (c_expand_return): cp_pedwarn on returning NULL from\n+\tthrowing operator new.\n+\n 1999-04-28  Nathan Sidwell  <nathan@acm.org>\n \n \t* cp-tree.h (build_component_addr): Remove prototype."}, {"sha": "209d95bb6fa3550b6d6a2c05e06549f5504a3556", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f477e818acc433475aba2521fce584dd8794715/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f477e818acc433475aba2521fce584dd8794715/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=7f477e818acc433475aba2521fce584dd8794715", "patch": "@@ -1130,6 +1130,11 @@ struct lang_type\n    equivalently, no throw specification.  */\n #define TYPE_RAISES_EXCEPTIONS(NODE) TYPE_NONCOPIED_PARTS (NODE)\n \n+/* For FUNCTION_TYPE or METHOD_TYPE, return 1 iff it is declared `throw()'.  */\n+#define TYPE_NOTHROW_P(NODE) \\\n+  (TYPE_RAISES_EXCEPTIONS (NODE) \\\n+   && TREE_VALUE (TYPE_RAISES_EXCEPTIONS (NODE)) == NULL_TREE)\n+\n /* The binding level associated with the namespace.  */\n #define NAMESPACE_LEVEL(NODE) (DECL_LANG_SPECIFIC(NODE)->decl_flags.level)\n \f"}, {"sha": "20a395783ecbc9d89e63530d896036a15fd4c8bb", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f477e818acc433475aba2521fce584dd8794715/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f477e818acc433475aba2521fce584dd8794715/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=7f477e818acc433475aba2521fce584dd8794715", "patch": "@@ -1212,6 +1212,10 @@ delete_sanity (exp, size, doing_vec, use_global_delete)\n       return error_mark_node;\n     }\n \n+  /* Deleting ptr to void is undefined behaviour [expr.delete/3].  */\n+  if (TREE_CODE (TREE_TYPE (type)) == VOID_TYPE)\n+    cp_warning (\"`%T' is not a pointer-to-object type\", type);\n+  \n   /* An array can't have been allocated by new, so complain.  */\n   if (TREE_CODE (t) == ADDR_EXPR\n       && TREE_CODE (TREE_OPERAND (t, 0)) == VAR_DECL"}, {"sha": "492a1ce04474a5929ddcd4a53e75f13be865eb0a", "filename": "gcc/cp/init.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f477e818acc433475aba2521fce584dd8794715/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f477e818acc433475aba2521fce584dd8794715/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=7f477e818acc433475aba2521fce584dd8794715", "patch": "@@ -2260,10 +2260,7 @@ build_new_1 (exp)\n       tree t = TREE_OPERAND (rval, 0);\n       /* The function.  */\n       t = TREE_OPERAND (TREE_OPERAND (t, 0), 0);\n-      t = TYPE_RAISES_EXCEPTIONS (TREE_TYPE (t));\n-\n-      if (t && TREE_VALUE (t) == NULL_TREE)\n-\tnothrow = 1;\n+      nothrow = TYPE_NOTHROW_P (TREE_TYPE (t));\n     }\n   check_new = (flag_check_new || nothrow) && ! use_java_new;\n "}, {"sha": "0053f1d950430220dda82d51a43c037f0a305eb1", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f477e818acc433475aba2521fce584dd8794715/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f477e818acc433475aba2521fce584dd8794715/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=7f477e818acc433475aba2521fce584dd8794715", "patch": "@@ -7307,6 +7307,13 @@ c_expand_return (retval)\n       return;\n     }\n \n+  /* Only operator new(...) throw(), can return NULL [expr.new/13].  */\n+  if ((DECL_NAME (current_function_decl) == ansi_opname[(int) NEW_EXPR]\n+       || DECL_NAME (current_function_decl) == ansi_opname[(int) VEC_NEW_EXPR])\n+      && !TYPE_NOTHROW_P (TREE_TYPE (current_function_decl))\n+      && null_ptr_cst_p (retval))\n+    cp_pedwarn (\"operator new should throw an exception, not return NULL\");\n+  \n   if (retval == NULL_TREE)\n     {\n       /* A non-named return value does not count.  */"}, {"sha": "cf4c8df89497d7d61090f2da6bedc831121715c2", "filename": "gcc/testsuite/g++.old-deja/g++.bob/delete1.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f477e818acc433475aba2521fce584dd8794715/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bob%2Fdelete1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f477e818acc433475aba2521fce584dd8794715/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bob%2Fdelete1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bob%2Fdelete1.C?ref=7f477e818acc433475aba2521fce584dd8794715", "patch": "@@ -4,11 +4,11 @@ int size = 0;\n \n struct X {\n     int x;\n-    void *operator new[](size_t sz)   {\n+    void *operator new[](size_t sz) throw()  {\n          size = sz;\n          return 0;  \n     }\n-    void operator delete[] (void *vp) { ::delete[] vp; }  \n+    void operator delete[] (void *vp) { ::operator delete(vp); }  \n };\n int main()\n {"}, {"sha": "9bf944c8c083f114176f7f21380ea0b0b6285853", "filename": "gcc/testsuite/g++.old-deja/g++.jason/new3.C", "status": "modified", "additions": 24, "deletions": 10, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f477e818acc433475aba2521fce584dd8794715/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fnew3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f477e818acc433475aba2521fce584dd8794715/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fnew3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fnew3.C?ref=7f477e818acc433475aba2521fce584dd8794715", "patch": "@@ -1,23 +1,37 @@\n // PRMS Id: 6037\n-// Special g++ Options: -fcheck-new\n+// Special g++ Options: -fcheck-new -pedantic\n \n extern \"C\" void * malloc (__SIZE_TYPE__);\n \n+int ena = 0;\n+\n struct A {\n   int i;\n   A () { i = 2; }\n+  void * operator new (__SIZE_TYPE__ s)\n+  {\n+    if (ena)\n+      return 0; // WARNING - returning NULL\n+    return malloc (s);\n+  }\n };\n \n-int ena = 0;\n-void * operator new (__SIZE_TYPE__ s)\n-{\n-  if (ena)\n-    return 0;\n-  return malloc (s);\n-}\n+struct B {\n+  int i;\n+  B () { i = 2; }\n+  void * operator new (__SIZE_TYPE__ s) throw()\n+  {\n+    if (ena)\n+      return 0;\n+    return malloc (s);\n+  }\n+};\n \n-main ()\n+int main ()\n {\n   ena = 1;\n-  A* ap = new A;\n+  A *ap = new A;\n+  B *bp = new B;\n+  \n+  return ap || bp ;\n }"}, {"sha": "0b0623c94c5b8741dd7c8984afc15f24c1a2ee44", "filename": "gcc/testsuite/g++.old-deja/g++.law/operators15.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f477e818acc433475aba2521fce584dd8794715/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Foperators15.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f477e818acc433475aba2521fce584dd8794715/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Foperators15.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Foperators15.C?ref=7f477e818acc433475aba2521fce584dd8794715", "patch": "@@ -10,7 +10,7 @@ extern \"C\" int printf(const char* ...);\n int     delete_counter = -1;\n \n struct T{\n-  void operator delete (void * p) {delete_counter ++; ::delete p;}\n+  void operator delete (void * p) {delete_counter ++; ::operator delete(p);}\n };\n \n int main(void)"}, {"sha": "7271840baa943e1cb90c76d57908cf663eb907d2", "filename": "gcc/testsuite/g++.old-deja/g++.law/operators23.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f477e818acc433475aba2521fce584dd8794715/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Foperators23.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f477e818acc433475aba2521fce584dd8794715/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Foperators23.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Foperators23.C?ref=7f477e818acc433475aba2521fce584dd8794715", "patch": "@@ -13,15 +13,15 @@ class blah {\n      int j;\n    public:\n      blah();\n-     void *operator new(size_t size);\n+     void *operator new(size_t size) throw();\n };\n \n inline blah::blah() : j(0) {\n \t  \n }\n \n \n-void *blah::operator new(size_t size) {\n+void *blah::operator new(size_t size) throw(){\n      printf (\"FAIL\\n\");\n      exit (1);\n      return NULL;"}, {"sha": "33fdb176e4adbdceed7a02bf2db2674a342996b7", "filename": "gcc/testsuite/g++.old-deja/g++.law/visibility15.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f477e818acc433475aba2521fce584dd8794715/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Fvisibility15.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f477e818acc433475aba2521fce584dd8794715/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Fvisibility15.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Fvisibility15.C?ref=7f477e818acc433475aba2521fce584dd8794715", "patch": "@@ -10,7 +10,7 @@\n \n class X {\n private:\n-  void* operator new(size_t) {// ERROR - .*\n+  void* operator new(size_t) throw(){// ERROR - .*\n     printf(\"Inside private new().\\n\");\n     return NULL;\n   }"}, {"sha": "ae98343b03c58a066f8d9f700ef46fb389846f13", "filename": "gcc/testsuite/g++.old-deja/g++.other/delete4.C", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f477e818acc433475aba2521fce584dd8794715/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fdelete4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f477e818acc433475aba2521fce584dd8794715/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fdelete4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fdelete4.C?ref=7f477e818acc433475aba2521fce584dd8794715", "patch": "@@ -0,0 +1,51 @@\n+// Build don't link:\n+\n+// Copyright (C) 1999 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 15 Apr 1999 <nathan@acm.org>\n+\n+// delete (void *)e and delete[] (void *)e result in undefined behaviour\n+// [expr.delete/3]. Check we warn about them\n+// operator new functions can only return NULL, if their exceptions\n+// specification is `throw()'. All other cases must return a non-null pointer\n+// [expr.new/13].\n+\n+void *operator new(unsigned)\n+{\n+  return 0; // ERROR - cannot return NULL\n+}\n+void *operator new[](unsigned)\n+{\n+  return 0; // ERROR - cannot return NULL\n+}\n+\n+struct X\n+{\n+  void *operator new(unsigned)\n+  {\n+    return 0; // ERROR - cannot return NULL\n+  }\n+  void *operator new[](unsigned)\n+  {\n+    return 0; // ERROR - cannot return NULL\n+  }\n+};\n+\n+struct Y\n+{\n+  void *operator new(unsigned) throw()\n+  {\n+    return 0; // ok\n+  }\n+  void *operator new[](unsigned) throw()\n+  {\n+    return 0; // ok\n+  }\n+};\n+\n+void fn(double *d, void *v)\n+{\n+  delete d;   // ok\n+  delete v;   // WARNING - deleting void\n+  delete[] d; // ok\n+  delete[] v; // WARNING - deleting void\n+}"}, {"sha": "b522e9c16bbefb18f5e65294a2563c2233665f1d", "filename": "gcc/testsuite/g++.old-deja/g++.other/delete5.C", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f477e818acc433475aba2521fce584dd8794715/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fdelete5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f477e818acc433475aba2521fce584dd8794715/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fdelete5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fdelete5.C?ref=7f477e818acc433475aba2521fce584dd8794715", "patch": "@@ -0,0 +1,39 @@\n+// Copyright (C) 1999 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 15 Apr 1999 <nathan@acm.org>\n+\n+struct X\n+{\n+  int i;\n+  \n+  X():i(){}\n+  void *operator new(unsigned)\n+  {\n+    return 0; // WARNING - cannot return NULL\n+  }\n+  void *operator new[](unsigned)\n+  {\n+    return 0; // WARNING - cannot return NULL\n+  }\n+};\n+\n+struct Y\n+{\n+  int i;\n+  \n+  Y():i(){}\n+  void *operator new(unsigned) throw()\n+  {\n+    return 0; // ok\n+  }\n+  void *operator new[](unsigned) throw()\n+  {\n+    return 0; // ok\n+  }\n+};\n+\n+int main()\n+{\n+  Y *yp = new Y;\n+  \n+  return yp != 0;\n+}"}, {"sha": "74c6cbb814177031f474376be4af16fd4fd6b236", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb101.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f477e818acc433475aba2521fce584dd8794715/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb101.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f477e818acc433475aba2521fce584dd8794715/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb101.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb101.C?ref=7f477e818acc433475aba2521fce584dd8794715", "patch": "@@ -863,7 +863,7 @@ inline ios::~ios() {\n \n \n \n-    if (_arrays) delete [] _arrays;\n+    operator delete(_arrays);\n }\n }  \n "}]}