{"sha": "ab57893bfc9987edd0af8bf30852324da2effafb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWI1Nzg5M2JmYzk5ODdlZGQwYWY4YmYzMDg1MjMyNGRhMmVmZmFmYg==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2003-01-08T11:55:50Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2003-01-08T11:55:50Z"}, "message": "arm.h (ENABLE_XF_PATTERNS): Delete.\n\n* arm.h (ENABLE_XF_PATTERNS): Delete.\n* arm.md (addxf3, subxf3, mulxf3, divxf3, modxf3, negxf2, absxf2)\n(sqrtxf2, floatsixf2, fix_truncxfsi2, truncxfsf2, truncxfdf2)\n(extendsfxf2, extenddfxf2, movxf, cmpxf, cmpxf_insn)\n(cmpxf_trap): Delete.\n(movxf_hard_insn): Remove test of ENABLE_XF_PATTERNS.\n\nFrom-SVN: r61040", "tree": {"sha": "19bb90439d0463d5786e09d83d23ec3683d34665", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/19bb90439d0463d5786e09d83d23ec3683d34665"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ab57893bfc9987edd0af8bf30852324da2effafb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab57893bfc9987edd0af8bf30852324da2effafb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab57893bfc9987edd0af8bf30852324da2effafb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab57893bfc9987edd0af8bf30852324da2effafb/comments", "author": null, "committer": null, "parents": [{"sha": "4298c66b588698054310f031cb6daae4a9f1ffa1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4298c66b588698054310f031cb6daae4a9f1ffa1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4298c66b588698054310f031cb6daae4a9f1ffa1"}], "stats": {"total": 286, "additions": 15, "deletions": 271}, "files": [{"sha": "e8c004cf1f5bb8fb7c583076e871c221dd8a1452", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab57893bfc9987edd0af8bf30852324da2effafb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab57893bfc9987edd0af8bf30852324da2effafb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ab57893bfc9987edd0af8bf30852324da2effafb", "patch": "@@ -1,3 +1,12 @@\n+2003-01-08  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* arm.h (ENABLE_XF_PATTERNS): Delete.\n+\t* arm.md (addxf3, subxf3, mulxf3, divxf3, modxf3, negxf2, absxf2)\n+\t(sqrtxf2, floatsixf2, fix_truncxfsi2, truncxfsf2, truncxfdf2)\n+\t(extendsfxf2, extenddfxf2, movxf, cmpxf, cmpxf_insn)\n+\t(cmpxf_trap): Delete.\n+\t(movxf_hard_insn): Remove test of ENABLE_XF_PATTERNS.\n+\n Wed Jan  8 12:10:57 CET 2003  Jan Hubicka  <jh@suse.cz>\n \n \t* i386.md (adddi3_carry_rex64, subdi3_carry_rex64): Name pattern."}, {"sha": "daffea208804edfe67a2c3b1a75bf641da6890cd", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab57893bfc9987edd0af8bf30852324da2effafb/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab57893bfc9987edd0af8bf30852324da2effafb/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=ab57893bfc9987edd0af8bf30852324da2effafb", "patch": "@@ -641,20 +641,6 @@ extern int arm_is_6_or_7;\n /* This is required to ensure that push insns always push a word.  */\n #define PROMOTE_FUNCTION_ARGS\n \n-/* For the ARM:\n-   I think I have added all the code to make this work.  Unfortunately,\n-   early releases of the floating point emulation code on RISCiX used a\n-   different format for extended precision numbers.  On my RISCiX box there\n-   is a bug somewhere which causes the machine to lock up when running enquire\n-   with long doubles.  There is the additional aspect that Norcroft C\n-   treats long doubles as doubles and we ought to remain compatible.\n-   Perhaps someone with an FPA coprocessor and not running RISCiX would like\n-   to try this someday. */\n-/* #define LONG_DOUBLE_TYPE_SIZE 96 */\n-\n-/* Disable XFmode patterns in md file */\n-#define ENABLE_XF_PATTERNS 0\n-\n /* Define this if most significant bit is lowest numbered\n    in instructions that operate on numbered bit-fields.  */\n #define BITS_BIG_ENDIAN  0"}, {"sha": "b7a09ce4cf2ada8e2efa6940081e6ed6f1dc8cfb", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 6, "deletions": 257, "changes": 263, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab57893bfc9987edd0af8bf30852324da2effafb/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab57893bfc9987edd0af8bf30852324da2effafb/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=ab57893bfc9987edd0af8bf30852324da2effafb", "patch": "@@ -1,6 +1,6 @@\n ;;- Machine description for ARM for GNU compiler\n ;;  Copyright 1991, 1993, 1994, 1995, 1996, 1996, 1997, 1998, 1999, 2000,\n-;;  2001, 2002  Free Software Foundation, Inc.\n+;;  2001, 2002, 2003  Free Software Foundation, Inc.\n ;;  Contributed by Pieter `Tiggr' Schoenmakers (rcpieter@win.tue.nl)\n ;;  and Martin Simmons (@harleqn.co.uk).\n ;;  More major hacks by Richard Earnshaw (rearnsha@arm.com).\n@@ -24,9 +24,6 @@\n \n ;;- See file \"rtl.def\" for documentation on define_insn, match_*, et. al.\n \n-;; There are patterns in this file to support XFmode arithmetic.\n-;; Unfortunately RISC iX doesn't work well with these so they are disabled.\n-;; (See arm.h)\n \f\n ;;---------------------------------------------------------------------------\n ;; Constants\n@@ -153,7 +150,6 @@\n ; mult\t\ta multiply instruction\n ; block\t\tblockage insn, this blocks all functional units\n ; float\t\ta floating point arithmetic operation (subject to expansion)\n-; fdivx\t\tXFmode floating point division\n ; fdivd\t\tDFmode floating point division\n ; fdivs\t\tSFmode floating point division\n ; fmul\t\tFloating point multiply\n@@ -856,18 +852,6 @@\n    (set_attr \"predicable\" \"yes\")]\n )\n \n-(define_insn \"addxf3\"\n-  [(set (match_operand:XF          0 \"s_register_operand\" \"=f,f\")\n-\t(plus:XF (match_operand:XF 1 \"s_register_operand\"  \"f,f\")\n-\t\t (match_operand:XF 2 \"fpu_add_operand\"    \"fG,H\")))]\n-  \"TARGET_ARM && ENABLE_XF_PATTERNS && TARGET_HARD_FLOAT\"\n-  \"@\n-   adf%?e\\\\t%0, %1, %2\n-   suf%?e\\\\t%0, %1, #%N2\"\n-  [(set_attr \"type\" \"farith\")\n-   (set_attr \"predicable\" \"yes\")]\n-)\n-\n (define_expand \"subdi3\"\n  [(parallel\n    [(set (match_operand:DI            0 \"s_register_operand\" \"\")\n@@ -1119,18 +1103,6 @@\n   [(set_attr \"type\" \"farith\")\n    (set_attr \"predicable\" \"yes\")]\n )\n-\n-(define_insn \"subxf3\"\n-  [(set (match_operand:XF           0 \"s_register_operand\" \"=f,f\")\n-\t(minus:XF (match_operand:XF 1 \"fpu_rhs_operand\"     \"f,G\")\n-\t\t  (match_operand:XF 2 \"fpu_rhs_operand\"    \"fG,f\")))]\n-  \"TARGET_ARM && ENABLE_XF_PATTERNS && TARGET_HARD_FLOAT\"\n-  \"@\n-   suf%?e\\\\t%0, %1, %2\n-   rsf%?e\\\\t%0, %2, %1\"\n-  [(set_attr \"type\" \"farith\")\n-   (set_attr \"predicable\" \"yes\")]\n-)\n \f\n ;; Multiplication insns\n \n@@ -1415,16 +1387,6 @@\n   [(set_attr \"type\" \"fmul\")\n    (set_attr \"predicable\" \"yes\")]\n )\n-\n-(define_insn \"mulxf3\"\n-  [(set (match_operand:XF 0 \"s_register_operand\" \"=f\")\n-\t(mult:XF (match_operand:XF 1 \"s_register_operand\" \"f\")\n-\t\t (match_operand:XF 2 \"fpu_rhs_operand\" \"fG\")))]\n-  \"TARGET_ARM && ENABLE_XF_PATTERNS && TARGET_HARD_FLOAT\"\n-  \"muf%?e\\\\t%0, %1, %2\"\n-  [(set_attr \"type\" \"fmul\")\n-   (set_attr \"predicable\" \"yes\")]\n-)\n \f\n ;; Division insns\n \n@@ -1485,18 +1447,6 @@\n   [(set_attr \"type\" \"fdivd\")\n    (set_attr \"predicable\" \"yes\")]\n )\n-\n-(define_insn \"divxf3\"\n-  [(set (match_operand:XF 0 \"s_register_operand\" \"=f,f\")\n-\t(div:XF (match_operand:XF 1 \"fpu_rhs_operand\" \"f,G\")\n-\t\t(match_operand:XF 2 \"fpu_rhs_operand\" \"fG,f\")))]\n-  \"TARGET_ARM && ENABLE_XF_PATTERNS && TARGET_HARD_FLOAT\"\n-  \"@\n-   dvf%?e\\\\t%0, %1, %2\n-   rdf%?e\\\\t%0, %2, %1\"\n-  [(set_attr \"type\" \"fdivx\")\n-   (set_attr \"predicable\" \"yes\")]\n-)\n \f\n ;; Modulo insns\n \n@@ -1553,16 +1503,6 @@\n   [(set_attr \"type\" \"fdivd\")\n    (set_attr \"predicable\" \"yes\")]\n )\n-\n-(define_insn \"modxf3\"\n-  [(set (match_operand:XF 0 \"s_register_operand\" \"=f\")\n-\t(mod:XF (match_operand:XF 1 \"s_register_operand\" \"f\")\n-\t\t(match_operand:XF 2 \"fpu_rhs_operand\" \"fG\")))]\n-  \"ENABLE_XF_PATTERNS && TARGET_HARD_FLOAT\"\n-  \"rmf%?e\\\\t%0, %1, %2\"\n-  [(set_attr \"type\" \"fdivx\")\n-   (set_attr \"predicable\" \"yes\")]\n-)\n \f\n ;; Boolean and,ior,xor insns\n \n@@ -2793,15 +2733,6 @@\n    (set_attr \"predicable\" \"yes\")]\n )\n \n-(define_insn \"negxf2\"\n-  [(set (match_operand:XF 0 \"s_register_operand\" \"=f\")\n-\t(neg:XF (match_operand:XF 1 \"s_register_operand\" \"f\")))]\n-  \"TARGET_ARM && ENABLE_XF_PATTERNS && TARGET_HARD_FLOAT\"\n-  \"mnf%?e\\\\t%0, %1\"\n-  [(set_attr \"type\" \"ffarith\")\n-   (set_attr \"predicable\" \"yes\")]\n-)\n-\n ;; abssi2 doesn't really clobber the condition codes if a different register\n ;; is being set.  To keep things simple, assume during rtl manipulations that\n ;; it does, but tell the final scan operator the truth.  Similarly for\n@@ -2863,15 +2794,6 @@\n    (set_attr \"predicable\" \"yes\")]\n )\n \n-(define_insn \"absxf2\"\n-  [(set (match_operand:XF 0 \"s_register_operand\" \"=f\")\n-\t(abs:XF (match_operand:XF 1 \"s_register_operand\" \"f\")))]\n-  \"TARGET_ARM && ENABLE_XF_PATTERNS && TARGET_HARD_FLOAT\"\n-  \"abs%?e\\\\t%0, %1\"\n-  [(set_attr \"type\" \"ffarith\")\n-   (set_attr \"predicable\" \"yes\")]\n-)\n-\n (define_insn \"sqrtsf2\"\n   [(set (match_operand:SF 0 \"s_register_operand\" \"=f\")\n \t(sqrt:SF (match_operand:SF 1 \"s_register_operand\" \"f\")))]\n@@ -2900,83 +2822,6 @@\n    (set_attr \"predicable\" \"yes\")]\n )\n \n-(define_insn \"sqrtxf2\"\n-  [(set (match_operand:XF 0 \"s_register_operand\" \"=f\")\n-\t(sqrt:XF (match_operand:XF 1 \"s_register_operand\" \"f\")))]\n-  \"TARGET_ARM && ENABLE_XF_PATTERNS && TARGET_HARD_FLOAT\"\n-  \"sqt%?e\\\\t%0, %1\"\n-  [(set_attr \"type\" \"float_em\")\n-   (set_attr \"predicable\" \"yes\")]\n-)\n-\n-;; SIN COS TAN and family are always emulated, so it's probably better\n-;; to always call a library function.\n-;(define_insn \"sinsf2\"\n-;  [(set (match_operand:SF 0 \"s_register_operand\" \"=f\")\n-;\t(unspec:SF [(match_operand:SF 1 \"s_register_operand\" \"f\")]\n-;\t\t    UNSPEC_SIN))]\n-;  \"TARGET_ARM && TARGET_HARD_FLOAT\"\n-;  \"sin%?s\\\\t%0, %1\"\n-;[(set_attr \"type\" \"float_em\")])\n-;\n-;(define_insn \"sindf2\"\n-;  [(set (match_operand:DF 0 \"s_register_operand\" \"=f\")\n-;\t(unspec:DF [(match_operand:DF 1 \"s_register_operand\" \"f\")]\n-;\t\t    UNSPEC_SIN))]\n-;  \"TARGET_ARM && TARGET_HARD_FLOAT\"\n-;  \"sin%?d\\\\t%0, %1\"\n-;[(set_attr \"type\" \"float_em\")])\n-;\n-;(define_insn \"*sindf_esfdf\"\n-;  [(set (match_operand:DF 0 \"s_register_operand\" \"=f\")\n-;\t(unspec:DF [(float_extend:DF\n-;\t\t     (match_operand:SF 1 \"s_register_operand\" \"f\"))]\n-;\t\t    UNSPEC_SIN))]\n-;  \"TARGET_ARM && TARGET_HARD_FLOAT\"\n-;  \"sin%?d\\\\t%0, %1\"\n-;[(set_attr \"type\" \"float_em\")])\n-;\n-;(define_insn \"sinxf2\"\n-;  [(set (match_operand:XF 0 \"s_register_operand\" \"=f\")\n-;\t(unspec:XF [(match_operand:XF 1 \"s_register_operand\" \"f\")]\n-;\t\t   UNSPEC_SIN))]\n-;  \"TARGET_ARM && ENABLE_XF_PATTERNS && TARGET_HARD_FLOAT\"\n-;  \"sin%?e\\\\t%0, %1\"\n-;[(set_attr \"type\" \"float_em\")])\n-;\n-;(define_insn \"cossf2\"\n-;  [(set (match_operand:SF 0 \"s_register_operand\" \"=f\")\n-;\t(unspec:SF [(match_operand:SF 1 \"s_register_operand\" \"f\")]\n-;\t\t   UNSPEC_COS))]\n-;  \"TARGET_ARM && TARGET_HARD_FLOAT\"\n-;  \"cos%?s\\\\t%0, %1\"\n-;[(set_attr \"type\" \"float_em\")])\n-;\n-;(define_insn \"cosdf2\"\n-;  [(set (match_operand:DF 0 \"s_register_operand\" \"=f\")\n-;\t(unspec:DF [(match_operand:DF 1 \"s_register_operand\" \"f\")]\n-;\t\t   UNSPEC_COS))]\n-;  \"TARGET_ARM && TARGET_HARD_FLOAT\"\n-;  \"cos%?d\\\\t%0, %1\"\n-;[(set_attr \"type\" \"float_em\")])\n-;\n-;(define_insn \"*cosdf_esfdf\"\n-;  [(set (match_operand:DF 0 \"s_register_operand\" \"=f\")\n-;\t(unspec:DF [(float_extend:DF\n-;\t\t     (match_operand:SF 1 \"s_register_operand\" \"f\"))]\n-;\t\t   UNSPEC_COS))]\n-;  \"TARGET_ARM && TARGET_HARD_FLOAT\"\n-;  \"cos%?d\\\\t%0, %1\"\n-;[(set_attr \"type\" \"float_em\")])\n-;\n-;(define_insn \"cosxf2\"\n-;  [(set (match_operand:XF 0 \"s_register_operand\" \"=f\")\n-;\t(unspec:XF [(match_operand:XF 1 \"s_register_operand\" \"f\")]\n-;\t\t   UNSEPC_COS))]\n-;  \"TARGET_ARM && ENABLE_XF_PATTERNS && TARGET_HARD_FLOAT\"\n-;  \"cos%?e\\\\t%0, %1\"\n-;[(set_attr \"type\" \"float_em\")])\n-\n (define_insn_and_split \"one_cmpldi2\"\n   [(set (match_operand:DI 0 \"s_register_operand\" \"=&r,&r\")\n \t(not:DI (match_operand:DI 1 \"s_register_operand\" \"?r,0\")))]\n@@ -3060,15 +2905,6 @@\n    (set_attr \"predicable\" \"yes\")]\n )\n \n-(define_insn \"floatsixf2\"\n-  [(set (match_operand:XF 0 \"s_register_operand\" \"=f\")\n-\t(float:XF (match_operand:SI 1 \"s_register_operand\" \"r\")))]\n-  \"TARGET_ARM && ENABLE_XF_PATTERNS && TARGET_HARD_FLOAT\"\n-  \"flt%?e\\\\t%0, %1\"\n-  [(set_attr \"type\" \"r_2_f\")\n-   (set_attr \"predicable\" \"yes\")]\n-)\n-\n (define_insn \"fix_truncsfsi2\"\n   [(set (match_operand:SI         0 \"s_register_operand\" \"=r\")\n \t(fix:SI (match_operand:SF 1 \"s_register_operand\" \"f\")))]\n@@ -3087,15 +2923,6 @@\n    (set_attr \"predicable\" \"yes\")]\n )\n \n-(define_insn \"fix_truncxfsi2\"\n-  [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n-\t(fix:SI (match_operand:XF 1 \"s_register_operand\" \"f\")))]\n-  \"TARGET_ARM && ENABLE_XF_PATTERNS && TARGET_HARD_FLOAT\"\n-  \"fix%?z\\\\t%0, %1\"\n-  [(set_attr \"type\" \"f_2_r\")\n-   (set_attr \"predicable\" \"yes\")]\n-)\n-\n ;; Truncation insns\n \n (define_insn \"truncdfsf2\"\n@@ -3107,26 +2934,6 @@\n   [(set_attr \"type\" \"ffarith\")\n    (set_attr \"predicable\" \"yes\")]\n )\n-\n-(define_insn \"truncxfsf2\"\n-  [(set (match_operand:SF 0 \"s_register_operand\" \"=f\")\n-\t(float_truncate:SF\n-\t (match_operand:XF 1 \"s_register_operand\" \"f\")))]\n-  \"TARGET_ARM && ENABLE_XF_PATTERNS && TARGET_HARD_FLOAT\"\n-  \"mvf%?s\\\\t%0, %1\"\n-  [(set_attr \"type\" \"ffarith\")\n-   (set_attr \"predicable\" \"yes\")]\n-)\n-\n-(define_insn \"truncxfdf2\"\n-  [(set (match_operand:DF 0 \"s_register_operand\" \"=f\")\n-\t(float_truncate:DF\n-\t (match_operand:XF 1 \"s_register_operand\" \"f\")))]\n-  \"TARGET_ARM && ENABLE_XF_PATTERNS && TARGET_HARD_FLOAT\"\n-  \"mvf%?d\\\\t%0, %1\"\n-  [(set_attr \"type\" \"ffarith\")\n-   (set_attr \"predicable\" \"yes\")]\n-)\n \f\n ;; Zero and sign extension instructions.\n \n@@ -3858,25 +3665,6 @@\n   [(set_attr \"type\" \"ffarith\")\n    (set_attr \"predicable\" \"yes\")]\n )\n-\n-(define_insn \"extendsfxf2\"\n-  [(set (match_operand:XF 0 \"s_register_operand\" \"=f\")\n-\t(float_extend:XF (match_operand:SF 1 \"s_register_operand\" \"f\")))]\n-  \"TARGET_ARM && ENABLE_XF_PATTERNS && TARGET_HARD_FLOAT\"\n-  \"mvf%?e\\\\t%0, %1\"\n-  [(set_attr \"type\" \"ffarith\")\n-   (set_attr \"predicable\" \"yes\")]\n-)\n-\n-(define_insn \"extenddfxf2\"\n-  [(set (match_operand:XF 0 \"s_register_operand\" \"=f\")\n-\t(float_extend:XF (match_operand:DF 1 \"s_register_operand\" \"f\")))]\n-  \"TARGET_ARM && ENABLE_XF_PATTERNS && TARGET_HARD_FLOAT\"\n-  \"mvf%?e\\\\t%0, %1\"\n-  [(set_attr \"type\" \"ffarith\")\n-   (set_attr \"predicable\" \"yes\")]\n-)\n-\n \f\n ;; Move insns (including loads and stores)\n \n@@ -5173,19 +4961,15 @@\n )\n \n \n-(define_expand \"movxf\"\n-  [(set (match_operand:XF 0 \"general_operand\" \"\")\n-\t(match_operand:XF 1 \"general_operand\" \"\"))]\n-  \"TARGET_ARM && ENABLE_XF_PATTERNS && TARGET_HARD_FLOAT\"\n-  \"\")\n-\n-;; Even when the XFmode patterns aren't enabled, we enable this after\n-;; reloading so that we can push floating point registers in the prologue.\n+;; Saving and restoring the floating point registers in the prologue should\n+;; be done in XFmode, even though we don't support that for anything else\n+;; (Well, strictly it's 'internal representation', but that's effectively\n+;; XFmode).\n \n (define_insn \"*movxf_hard_insn\"\n   [(set (match_operand:XF 0 \"nonimmediate_operand\" \"=f,f,f,m,f,r,r\")\n \t(match_operand:XF 1 \"general_operand\" \"fG,H,m,f,r,f,r\"))]\n-  \"TARGET_ARM && TARGET_HARD_FLOAT && (ENABLE_XF_PATTERNS || reload_completed)\"\n+  \"TARGET_ARM && TARGET_HARD_FLOAT && reload_completed\"\n   \"*\n   switch (which_alternative)\n     {\n@@ -5652,17 +5436,6 @@\n   \"\n )\n \n-(define_expand \"cmpxf\"\n-  [(match_operand:XF 0 \"s_register_operand\" \"\")\n-   (match_operand:XF 1 \"fpu_rhs_operand\" \"\")]\n-  \"TARGET_ARM && ENABLE_XF_PATTERNS && TARGET_HARD_FLOAT\"\n-  \"\n-  arm_compare_op0 = operands[0];\n-  arm_compare_op1 = operands[1];\n-  DONE;\n-  \"\n-)\n-\n (define_insn \"*arm_cmpsi_insn\"\n   [(set (reg:CC CC_REGNUM)\n \t(compare:CC (match_operand:SI 0 \"s_register_operand\" \"r,r\")\n@@ -5761,18 +5534,6 @@\n    (set_attr \"type\" \"f_2_r\")]\n )\n \n-(define_insn \"*cmpxf_insn\"\n-  [(set (reg:CCFP CC_REGNUM)\n-\t(compare:CCFP (match_operand:XF 0 \"s_register_operand\" \"f,f\")\n-\t\t      (match_operand:XF 1 \"fpu_add_operand\" \"fG,H\")))]\n-  \"TARGET_ARM && ENABLE_XF_PATTERNS && TARGET_HARD_FLOAT\"\n-  \"@\n-   cmf%?\\\\t%0, %1\n-   cnf%?\\\\t%0, #%N1\"\n-  [(set_attr \"conds\" \"set\")\n-   (set_attr \"type\" \"f_2_r\")]\n-)\n-\n (define_insn \"*cmpsf_trap\"\n   [(set (reg:CCFPE CC_REGNUM)\n \t(compare:CCFPE (match_operand:SF 0 \"s_register_operand\" \"f,f\")\n@@ -5821,18 +5582,6 @@\n    (set_attr \"type\" \"f_2_r\")]\n )\n \n-(define_insn \"*cmpxf_trap\"\n-  [(set (reg:CCFPE CC_REGNUM)\n-\t(compare:CCFPE (match_operand:XF 0 \"s_register_operand\" \"f,f\")\n-\t\t       (match_operand:XF 1 \"fpu_add_operand\" \"fG,H\")))]\n-  \"TARGET_ARM && ENABLE_XF_PATTERNS && TARGET_HARD_FLOAT\"\n-  \"@\n-   cmf%?e\\\\t%0, %1\n-   cnf%?e\\\\t%0, #%N1\"\n-  [(set_attr \"conds\" \"set\")\n-   (set_attr \"type\" \"f_2_r\")]\n-)\n-\n ; This insn allows redundant compares to be removed by cse, nothing should\n ; ever appear in the output file since (set (reg x) (reg x)) is a no-op that\n ; is deleted later on. The match_dup will match the mode here, so that"}]}