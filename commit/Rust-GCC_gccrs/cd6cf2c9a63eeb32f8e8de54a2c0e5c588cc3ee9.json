{"sha": "cd6cf2c9a63eeb32f8e8de54a2c0e5c588cc3ee9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2Q2Y2YyYzlhNjNlZWIzMmY4ZThkZTU0YTJjMGU1YzU4OGNjM2VlOQ==", "commit": {"author": {"name": "Kai Tietz", "email": "ktietz@redhat.com", "date": "2011-08-07T07:45:57Z"}, "committer": {"name": "Kai Tietz", "email": "ktietz@gcc.gnu.org", "date": "2011-08-07T07:45:57Z"}, "message": "pr23455.c: Adjust testcases for LLP64 for x86_64 mingw target.\n\n\t* gcc.dg/tree-ssa/pr23455.c: Adjust testcases for LLP64 for\n\tx86_64 mingw target.\n\t* gcc.dg/tree-ssa/loop-1.c: Likewise.\n\t* gcc.dg/tree-ssa/ssa-store-ccp-2.c: Likewise.\n\t* gcc.dg/tree-ssa/ssa-store-ccp-3.c: Likewise.\n\t* gcc.dg/tree-ssa/loop-33.c: Likewise.\n\t* gcc.dg/tree-ssa/ssa-store-ccp-4.c: Likewise.\n\t* gcc.dg/tree-ssa/loop-35.c: Likewise.\n\t* gcc.dg/tree-ssa/stdarg-2.c: Likewise.\n\t* gcc.dg/tree-ssa/stdarg-4.c: Likewise.\n\t* gcc.dg/tree-ssa/stdarg-5.c: Likewise.\n\t* gcc.dg/tree-ssa/gen-vect-11c.c: Likewise.\n\nFrom-SVN: r177543", "tree": {"sha": "895590cf9dfb0ba4ee7efce7457b7f2b0a844b67", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/895590cf9dfb0ba4ee7efce7457b7f2b0a844b67"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cd6cf2c9a63eeb32f8e8de54a2c0e5c588cc3ee9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd6cf2c9a63eeb32f8e8de54a2c0e5c588cc3ee9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd6cf2c9a63eeb32f8e8de54a2c0e5c588cc3ee9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd6cf2c9a63eeb32f8e8de54a2c0e5c588cc3ee9/comments", "author": null, "committer": null, "parents": [{"sha": "93c66bc68a2554cbb2ba11f90944314af378d16b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93c66bc68a2554cbb2ba11f90944314af378d16b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93c66bc68a2554cbb2ba11f90944314af378d16b"}], "stats": {"total": 107, "additions": 69, "deletions": 38}, "files": [{"sha": "2931dd2320c3ccbb46cd18eb08a36efb3798d387", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd6cf2c9a63eeb32f8e8de54a2c0e5c588cc3ee9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd6cf2c9a63eeb32f8e8de54a2c0e5c588cc3ee9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cd6cf2c9a63eeb32f8e8de54a2c0e5c588cc3ee9", "patch": "@@ -1,3 +1,18 @@\n+2011-08-07  Kai Tietz  <ktietz@redhat.com>\n+\n+\t* gcc.dg/tree-ssa/pr23455.c: Adjust testcases for LLP64 for\n+\tx86_64 mingw target.\n+\t* gcc.dg/tree-ssa/loop-1.c: Likewise.\n+\t* gcc.dg/tree-ssa/ssa-store-ccp-2.c: Likewise.\n+\t* gcc.dg/tree-ssa/ssa-store-ccp-3.c: Likewise.\n+\t* gcc.dg/tree-ssa/loop-33.c: Likewise.\n+\t* gcc.dg/tree-ssa/ssa-store-ccp-4.c: Likewise.\n+\t* gcc.dg/tree-ssa/loop-35.c: Likewise.\n+\t* gcc.dg/tree-ssa/stdarg-2.c: Likewise.\n+\t* gcc.dg/tree-ssa/stdarg-4.c: Likewise.\n+\t* gcc.dg/tree-ssa/stdarg-5.c: Likewise.\n+\t* gcc.dg/tree-ssa/gen-vect-11c.c: Likewise.\n+\n 2011-08-06  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR testsuite/48727"}, {"sha": "269a85fd1af9dfb5e1014d521cadaed56a6196f6", "filename": "gcc/testsuite/gcc.dg/tree-ssa/gen-vect-11c.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd6cf2c9a63eeb32f8e8de54a2c0e5c588cc3ee9/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fgen-vect-11c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd6cf2c9a63eeb32f8e8de54a2c0e5c588cc3ee9/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fgen-vect-11c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fgen-vect-11c.c?ref=cd6cf2c9a63eeb32f8e8de54a2c0e5c588cc3ee9", "patch": "@@ -6,7 +6,9 @@\n \n #define N 16\n \n-#if LONG_MAX == 2147483647\n+/* One x86_64 mingw a long remains 4 bytes sized, but machine word\n+   is 8 bytes.  */\n+#if LONG_MAX == 2147483647 && !defined (_WIN64)\n typedef short half_word;\n #else\n typedef int half_word;"}, {"sha": "e4ad7a9fa7e5380aeb6546fce36cd1c77602f083", "filename": "gcc/testsuite/gcc.dg/tree-ssa/loop-1.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd6cf2c9a63eeb32f8e8de54a2c0e5c588cc3ee9/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd6cf2c9a63eeb32f8e8de54a2c0e5c588cc3ee9/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-1.c?ref=cd6cf2c9a63eeb32f8e8de54a2c0e5c588cc3ee9", "patch": "@@ -44,10 +44,11 @@ void xxx(void)\n /* CRIS keeps the address in a register.  */\n /* m68k sometimes puts the address in a register, depending on CPU and PIC.  */\n \n-/* { dg-final { scan-assembler-times \"foo\" 5 { xfail hppa*-*-* ia64*-*-* sh*-*-* cris-*-* crisv32-*-* fido-*-* m68k-*-* i?86-*-mingw* i?86-*-cygwin* } } } */\n+/* { dg-final { scan-assembler-times \"foo\" 5 { xfail hppa*-*-* ia64*-*-* sh*-*-* cris-*-* crisv32-*-* fido-*-* m68k-*-* i?86-*-mingw* i?86-*-cygwin* x86_64-*-mingw* } } } */\n /* { dg-final { scan-assembler-times \"foo,%r\" 5 { target hppa*-*-* } } } */\n /* { dg-final { scan-assembler-times \"= foo\"  5 { target ia64*-*-* } } } */\n /* { dg-final { scan-assembler-times \"call\\[ \\t\\]*_foo\" 5 { target i?86-*-mingw* i?86-*-cygwin* } } } */\n+/* { dg-final { scan-assembler-times \"call\\[ \\t\\]*foo\" 5 { target x86_64-*-mingw* } } } */\n /* { dg-final { scan-assembler-times \"jsr|bsrf|blink\\ttr?,r18\"  5 { target sh*-*-* } } } */\n /* { dg-final { scan-assembler-times \"Jsr \\\\\\$r\" 5 { target cris-*-* } } } */\n /* { dg-final { scan-assembler-times \"\\[jb\\]sr\" 5 { target fido-*-* m68k-*-* } } } */"}, {"sha": "bf16b1398c97c5b621ef0e2ecf4fa1b321958457", "filename": "gcc/testsuite/gcc.dg/tree-ssa/loop-33.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd6cf2c9a63eeb32f8e8de54a2c0e5c588cc3ee9/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-33.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd6cf2c9a63eeb32f8e8de54a2c0e5c588cc3ee9/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-33.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-33.c?ref=cd6cf2c9a63eeb32f8e8de54a2c0e5c588cc3ee9", "patch": "@@ -36,5 +36,5 @@ void test5(struct a *A, unsigned b)\n     }\n }\n \n-/* { dg-final { scan-tree-dump-times \"Executing store motion of\" 4 \"lim1\" { xfail lp64 } } } */\n+/* { dg-final { scan-tree-dump-times \"Executing store motion of\" 4 \"lim1\" { xfail { lp64 || llp64 } } } } */\n /* { dg-final { cleanup-tree-dump \"lim1\" } } */"}, {"sha": "2d2db701a32f027e2308f94918d37bc4469bf934", "filename": "gcc/testsuite/gcc.dg/tree-ssa/loop-35.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd6cf2c9a63eeb32f8e8de54a2c0e5c588cc3ee9/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-35.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd6cf2c9a63eeb32f8e8de54a2c0e5c588cc3ee9/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-35.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-35.c?ref=cd6cf2c9a63eeb32f8e8de54a2c0e5c588cc3ee9", "patch": "@@ -10,6 +10,13 @@ struct a\n   int Y;\n };\n \n+/* Word size is long long for 64-bit mingw target.  */\n+#ifdef _WIN64\n+#define LONG long long\n+#else\n+#define LONG long\n+#endif\n+\n struct a arr[100];\n \n void test1(int b)\n@@ -36,7 +43,7 @@ void test2(struct a *A, int b)\n     }\n }\n \n-void test3(unsigned long b)\n+void test3(unsigned LONG b)\n {\n   unsigned i;\n \n@@ -48,7 +55,7 @@ void test3(unsigned long b)\n     }\n }\n \n-void test4(struct a *A, unsigned long b)\n+void test4(struct a *A, unsigned LONG b)\n {\n   unsigned i;\n "}, {"sha": "6522f99f9b0b824774d64048dac60486179dd232", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr23455.c", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd6cf2c9a63eeb32f8e8de54a2c0e5c588cc3ee9/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr23455.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd6cf2c9a63eeb32f8e8de54a2c0e5c588cc3ee9/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr23455.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr23455.c?ref=cd6cf2c9a63eeb32f8e8de54a2c0e5c588cc3ee9", "patch": "@@ -1,19 +1,25 @@\n /* { dg-do compile } */ \n /* { dg-options \"-O2 -fdump-tree-pre-stats\" } */\n-unsigned long outcnt;\n+#ifdef _WIN64\n+#define LONG long long\n+#else\n+#define LONG long\n+#endif\n+\n+unsigned LONG outcnt;\n extern void flush_outbuf(void);\n \n void\n bi_windup(unsigned int *outbuf, unsigned int bi_buf)\n {\n-    unsigned long t1 = outcnt;\n+    unsigned LONG t1 = outcnt;\n     outbuf[t1] = bi_buf;\n \n-    unsigned long t2 = outcnt;\n+    unsigned LONG t2 = outcnt;\n     if (t2 == 16384)\n       flush_outbuf();\n \n-    unsigned long t3 = outcnt;\n+    unsigned LONG t3 = outcnt;\n     outbuf[t3] = bi_buf;\n }\n /* We should eliminate one load of outcnt, which will in turn let us eliminate"}, {"sha": "29a2dd5ccccc0b88bbdc2ba1ace595e7084bbd58", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-store-ccp-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd6cf2c9a63eeb32f8e8de54a2c0e5c588cc3ee9/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-store-ccp-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd6cf2c9a63eeb32f8e8de54a2c0e5c588cc3ee9/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-store-ccp-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-store-ccp-2.c?ref=cd6cf2c9a63eeb32f8e8de54a2c0e5c588cc3ee9", "patch": "@@ -10,5 +10,5 @@ int f(void)\n \n /* There should be a reference to conststaticvariable since it may\n    may be overriden at link time.  */\n-/* { dg-final { scan-tree-dump-times \"conststaticvariable\" 1 \"optimized\"} } */\n+/* { dg-final { scan-tree-dump-times \"conststaticvariable\" 1 \"optimized\" { xfail { *-*-mingw* *-*-cygwin* } } } } */\n /* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "acb59e1e8a3f5887ec018b70077e4bab99cf90e4", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-store-ccp-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd6cf2c9a63eeb32f8e8de54a2c0e5c588cc3ee9/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-store-ccp-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd6cf2c9a63eeb32f8e8de54a2c0e5c588cc3ee9/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-store-ccp-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-store-ccp-3.c?ref=cd6cf2c9a63eeb32f8e8de54a2c0e5c588cc3ee9", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do compile } */\n /* Skipped on MIPS GNU/Linux and IRIX target because __PIC__ can be\n    defined for executables as well as shared libraries.  */\n-/* { dg-skip-if \"\" { *-*-darwin* hppa*64*-*-* mips*-*-linux* mips*-*-irix* } { \"*\" } { \"\" } } */\n+/* { dg-skip-if \"\" { *-*-darwin* hppa*64*-*-* mips*-*-linux* mips*-*-irix* *-*-mingw* } { \"*\" } { \"\" } } */\n /* { dg-options \"-O2 -fno-common -fdump-tree-optimized\" } */\n \n const int conststaticvariable;"}, {"sha": "c7a0fbd17a256e9b0c6d9bf7a42f72d9fd17cfef", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-store-ccp-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd6cf2c9a63eeb32f8e8de54a2c0e5c588cc3ee9/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-store-ccp-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd6cf2c9a63eeb32f8e8de54a2c0e5c588cc3ee9/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-store-ccp-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-store-ccp-4.c?ref=cd6cf2c9a63eeb32f8e8de54a2c0e5c588cc3ee9", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile } */\n /* { dg-require-effective-target fpic } */\n-/* { dg-skip-if \"\" { *-*-darwin* } { \"*\" } { \"\" } } */\n+/* { dg-skip-if \"\" { *-*-darwin* *-*-mingw* } { \"*\" } { \"\" } } */\n /* { dg-options \"-O2 -fno-common -fpic -fdump-tree-optimized\" } */\n \n const int conststaticvariable;"}, {"sha": "fe39da3528059173c33f0a8930af9de9c02541f4", "filename": "gcc/testsuite/gcc.dg/tree-ssa/stdarg-2.c", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd6cf2c9a63eeb32f8e8de54a2c0e5c588cc3ee9/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fstdarg-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd6cf2c9a63eeb32f8e8de54a2c0e5c588cc3ee9/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fstdarg-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fstdarg-2.c?ref=cd6cf2c9a63eeb32f8e8de54a2c0e5c588cc3ee9", "patch": "@@ -21,7 +21,7 @@ f1 (int i, ...)\n   va_start (ap, i);\n   va_end (ap);\n }\n-/* { dg-final { scan-tree-dump \"f1: va_list escapes 0, needs to save 0 GPR units and 0 FPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && { ! { ia32 } } } } } } */\n+/* { dg-final { scan-tree-dump \"f1: va_list escapes 0, needs to save 0 GPR units and 0 FPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && { ! { ia32 || llp64 } } } } } } */\n /* { dg-final { scan-tree-dump \"f1: va_list escapes 0, needs to save 0 GPR units and 0 FPR units\" \"stdarg\" { target { powerpc*-*-linux* && ilp32 } } } } */\n /* { dg-final { scan-tree-dump \"f1: va_list escapes 0, needs to save 0 GPR units and 0 FPR units\" \"stdarg\" { target alpha*-*-linux* } } } */\n /* { dg-final { scan-tree-dump \"f1: va_list escapes 0, needs to save 0 GPR units and 0 FPR units\" \"stdarg\" { target s390*-*-linux* } } } */\n@@ -41,7 +41,7 @@ f2 (int i, ...)\n }\n /* Assume the counters can be number of registers or bytes on 32-bit\n    architecture or bytes on 64-bit architecture.  */\n-/* { dg-final { scan-tree-dump \"f2: va_list escapes 0, needs to save \\[148\\] GPR units and 0 FPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && { ! { ia32 } } } } } } */\n+/* { dg-final { scan-tree-dump \"f2: va_list escapes 0, needs to save \\[148\\] GPR units and 0 FPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && { ! { ia32 || llp64 } } } } } } */\n /* { dg-final { scan-tree-dump \"f2: va_list escapes 0, needs to save \\[148\\] GPR units and 0 FPR units\" \"stdarg\" { target { powerpc*-*-linux* && ilp32 } } } } */\n /* { dg-final { scan-tree-dump \"f2: va_list escapes 0, needs to save 8 GPR units and 1\" \"stdarg\" { target alpha*-*-linux* } } } */\n /* { dg-final { scan-tree-dump \"f2: va_list escapes 0, needs to save 1 GPR units and 0 FPR units\" \"stdarg\" { target s390*-*-linux* } } } */\n@@ -57,7 +57,7 @@ f3 (int i, ...)\n   d = va_arg (ap, double);\n   va_end (ap);\n }\n-/* { dg-final { scan-tree-dump \"f3: va_list escapes 0, needs to save 0 GPR units and \\[1-9\\]\\[0-9\\]* FPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && { ! { ia32 } } } } } } */\n+/* { dg-final { scan-tree-dump \"f3: va_list escapes 0, needs to save 0 GPR units and \\[1-9\\]\\[0-9\\]* FPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && { ! { ia32 || llp64 } } } } } } */\n /* { dg-final { scan-tree-dump \"f3: va_list escapes 0, needs to save 0 GPR units and \\[1-9\\]\\[0-9\\]* FPR units\" \"stdarg\" { target { powerpc*-*-linux* && { powerpc_fprs && ilp32 } } } } } */\n /* { dg-final { scan-tree-dump \"f3: va_list escapes 0, needs to save 0 GPR units and 1 FPR units\" \"stdarg\" { target s390*-*-linux* } } } */\n /* { dg-final { scan-tree-dump \"f3: va_list escapes 0, needs to save 8 GPR units and 2\" \"stdarg\" { target alpha*-*-linux* } } } */\n@@ -74,7 +74,7 @@ f4 (int i, ...)\n   foo (i, ap);\n   va_end (ap);\n }\n-/* { dg-final { scan-tree-dump \"f4: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && { ! { ia32 } } } } } } */\n+/* { dg-final { scan-tree-dump \"f4: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && { ! { ia32 || llp64 } } } } } } */\n /* { dg-final { scan-tree-dump \"f4: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target { powerpc*-*-linux* && ilp32 } } } } */\n /* { dg-final { scan-tree-dump \"f4: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target alpha*-*-linux* } } } */\n /* { dg-final { scan-tree-dump \"f4: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target s390*-*-linux* } } } */\n@@ -92,7 +92,7 @@ f5 (int i, ...)\n   va_end (ap);\n   va_end (gap);\n }\n-/* { dg-final { scan-tree-dump \"f5: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && { ! { ia32 } } } } } } */\n+/* { dg-final { scan-tree-dump \"f5: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && { ! { ia32 || llp64 } } } } } } */\n /* { dg-final { scan-tree-dump \"f5: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target { powerpc*-*-linux* && ilp32 } } } } */\n /* { dg-final { scan-tree-dump \"f5: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target alpha*-*-linux* } } } */\n /* { dg-final { scan-tree-dump \"f5: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target s390*-*-linux* } } } */\n@@ -112,7 +112,7 @@ f6 (int i, ...)\n   bar (x);\n   va_end (ap);\n }\n-/* { dg-final { scan-tree-dump \"f6: va_list escapes 0, needs to save (3|12|24) GPR units and 0 FPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && { ! { ia32 } } } } } } */\n+/* { dg-final { scan-tree-dump \"f6: va_list escapes 0, needs to save (3|12|24) GPR units and 0 FPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && { ! { ia32 || llp64 } } } } } } */\n /* { dg-final { scan-tree-dump \"f6: va_list escapes 0, needs to save (3|12|24) GPR units and 0 FPR units\" \"stdarg\" { target { powerpc*-*-linux* && ilp32 } } } } */\n /* { dg-final { scan-tree-dump \"f6: va_list escapes 0, needs to save 24 GPR units and 1\" \"stdarg\" { target alpha*-*-linux* } } } */\n /* { dg-final { scan-tree-dump \"f6: va_list escapes 0, needs to save 3 GPR units and 0 FPR units\" \"stdarg\" { target s390*-*-linux* } } } */\n@@ -129,7 +129,7 @@ f7 (int i, ...)\n   bar (6);\n   va_end (ap);\n }\n-/* { dg-final { scan-tree-dump \"f7: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && { ! { ia32 } } } } } } */\n+/* { dg-final { scan-tree-dump \"f7: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && { ! { ia32 || llp64 } } } } } } */\n /* { dg-final { scan-tree-dump \"f7: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target { powerpc*-*-linux* && ilp32 } } } } */\n /* { dg-final { scan-tree-dump \"f7: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target alpha*-*-linux* } } } */\n /* { dg-final { scan-tree-dump \"f7: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target s390*-*-linux* } } } */\n@@ -148,7 +148,7 @@ f8 (int i, ...)\n   bar (x);\n   va_end (ap);\n }\n-/* { dg-final { scan-tree-dump \"f8: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && { ! { ia32 } } } } } } */\n+/* { dg-final { scan-tree-dump \"f8: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && { ! { ia32 || llp64 } } } } } } */\n /* { dg-final { scan-tree-dump \"f8: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target { powerpc*-*-linux* && ilp32 } } } } */\n /* { dg-final { scan-tree-dump \"f8: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target alpha*-*-linux* } } } */\n /* { dg-final { scan-tree-dump \"f8: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target s390*-*-linux* } } } */\n@@ -165,7 +165,7 @@ f9 (int i, ...)\n   bar (6);\n   va_end (ap);\n }\n-/* { dg-final { scan-tree-dump \"f9: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && { ! { ia32 } } } } } } */\n+/* { dg-final { scan-tree-dump \"f9: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && { ! { ia32 || llp64 } } } } } } */\n /* { dg-final { scan-tree-dump \"f9: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target { powerpc*-*-linux* && ilp32 } } } } */\n /* { dg-final { scan-tree-dump \"f9: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target alpha*-*-linux* } } } */\n /* { dg-final { scan-tree-dump \"f9: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target s390*-*-linux* } } } */\n@@ -184,7 +184,7 @@ f10 (int i, ...)\n   bar (x);\n   va_end (ap);\n }\n-/* { dg-final { scan-tree-dump \"f10: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && { ! { ia32 } } } } } } */\n+/* { dg-final { scan-tree-dump \"f10: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && { ! { ia32 || llp64 } } } } } } */\n /* { dg-final { scan-tree-dump \"f10: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target { powerpc*-*-linux* && ilp32 } } } } */\n /* { dg-final { scan-tree-dump \"f10: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target alpha*-*-linux* } } } */\n /* { dg-final { scan-tree-dump \"f10: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target s390*-*-linux* } } } */\n@@ -204,7 +204,7 @@ f11 (int i, ...)\n   bar (x);\n   va_end (ap);\n }\n-/* { dg-final { scan-tree-dump \"f11: va_list escapes 0, needs to save (3|12|24) GPR units and 0 FPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && { ! { ia32 } } } } } } */\n+/* { dg-final { scan-tree-dump \"f11: va_list escapes 0, needs to save (3|12|24) GPR units and 0 FPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && { ! { ia32 || llp64 } } } } } } */\n /* { dg-final { scan-tree-dump \"f11: va_list escapes 0, needs to save (3|12|24) GPR units and 0 FPR units\" \"stdarg\" { target { powerpc*-*-linux* && ilp32 } } } } */\n /* { dg-final { scan-tree-dump \"f11: va_list escapes 0, needs to save 24 GPR units and 1\" \"stdarg\" { target alpha*-*-linux* } } } */\n /* { dg-final { scan-tree-dump \"f11: va_list escapes 0, needs to save 3 GPR units and 0 FPR units\" \"stdarg\" { target s390*-*-linux* } } } */\n@@ -224,7 +224,7 @@ f12 (int i, ...)\n   bar (x);\n   va_end (ap);\n }\n-/* { dg-final { scan-tree-dump \"f12: va_list escapes 0, needs to save 0 GPR units and \\[1-9\\]\\[0-9\\]* FPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && { ! { ia32 } } } } } } */\n+/* { dg-final { scan-tree-dump \"f12: va_list escapes 0, needs to save 0 GPR units and \\[1-9\\]\\[0-9\\]* FPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && { ! { ia32 || llp64 } } } } } } */\n /* { dg-final { scan-tree-dump \"f12: va_list escapes 0, needs to save 0 GPR units and \\[1-9\\]\\[0-9\\]* FPR units\" \"stdarg\" { target { powerpc*-*-linux* && { powerpc_fprs && ilp32 } } } } } */\n /* { dg-final { scan-tree-dump \"f12: va_list escapes 0, needs to save 24 GPR units and 2\" \"stdarg\" { target alpha*-*-linux* } } } */\n /* { dg-final { scan-tree-dump \"f12: va_list escapes 0, needs to save 0 GPR units and 3 FPR units\" \"stdarg\" { target s390*-*-linux* } } } */\n@@ -244,7 +244,7 @@ f13 (int i, ...)\n   bar (x);\n   va_end (ap);\n }\n-/* { dg-final { scan-tree-dump \"f13: va_list escapes 0, needs to save 0 GPR units and \\[1-9\\]\\[0-9\\]* FPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && { ! { ia32 } } } } } } */\n+/* { dg-final { scan-tree-dump \"f13: va_list escapes 0, needs to save 0 GPR units and \\[1-9\\]\\[0-9\\]* FPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && { ! { ia32 || llp64 } } } } } } */\n /* { dg-final { scan-tree-dump \"f13: va_list escapes 0, needs to save 0 GPR units and \\[1-9\\]\\[0-9\\]* FPR units\" \"stdarg\" { target { powerpc*-*-linux* && { powerpc_fprs && ilp32 } } } } } */\n /* { dg-final { scan-tree-dump \"f13: va_list escapes 0, needs to save 24 GPR units and 2\" \"stdarg\" { target alpha*-*-linux* } } } */\n /* { dg-final { scan-tree-dump \"f13: va_list escapes 0, needs to save 0 GPR units and 3 FPR units\" \"stdarg\" { target s390*-*-linux* } } } */\n@@ -264,7 +264,7 @@ f14 (int i, ...)\n   bar (x);\n   va_end (ap);\n }\n-/* { dg-final { scan-tree-dump \"f14: va_list escapes 0, needs to save \\[148\\] GPR units and \\[1-9\\]\\[0-9\\]* FPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && { ! { ia32 } } } } } } */\n+/* { dg-final { scan-tree-dump \"f14: va_list escapes 0, needs to save \\[148\\] GPR units and \\[1-9\\]\\[0-9\\]* FPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && { ! { ia32 || llp64 } } } } } } */\n /* { dg-final { scan-tree-dump \"f14: va_list escapes 0, needs to save \\[148\\] GPR units and \\[1-9\\]\\[0-9\\]* FPR units\" \"stdarg\" { target { powerpc*-*-linux* && { powerpc_fprs && ilp32 } } } } } */\n /* { dg-final { scan-tree-dump \"f14: va_list escapes 0, needs to save 24 GPR units and 3\" \"stdarg\" { target alpha*-*-linux* } } } */\n /* { dg-final { scan-tree-dump \"f14: va_list escapes 0, needs to save 1 GPR units and 2 FPR units\" \"stdarg\" { target s390*-*-linux* } } } */\n@@ -288,7 +288,7 @@ f15 (int i, ...)\n   f15_1 (ap);\n   va_end (ap);\n }\n-/* { dg-final { scan-tree-dump \"f15: va_list escapes 0, needs to save \\[148\\] GPR units and \\[1-9\\]\\[0-9\\]* FPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && { ! { ia32 } } } } } } */\n+/* { dg-final { scan-tree-dump \"f15: va_list escapes 0, needs to save \\[148\\] GPR units and \\[1-9\\]\\[0-9\\]* FPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && { ! { ia32 || llp64 } } } } } } */\n /* { dg-final { scan-tree-dump \"f15: va_list escapes 0, needs to save \\[148\\] GPR units and \\[1-9\\]\\[0-9\\]* FPR units\" \"stdarg\" { target { powerpc*-*-linux* && { powerpc_fprs && ilp32 } } } } } */\n /* { dg-final { scan-tree-dump \"f15: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" { target alpha*-*-linux* } } } */\n /* { dg-final { scan-tree-dump \"f15: va_list escapes 0, needs to save 1 GPR units and 2 FPR units\" \"stdarg\" { target s390*-*-linux* } } } */"}, {"sha": "5e22b1d9e065f32bc4165562daa387223c073a60", "filename": "gcc/testsuite/gcc.dg/tree-ssa/stdarg-4.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd6cf2c9a63eeb32f8e8de54a2c0e5c588cc3ee9/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fstdarg-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd6cf2c9a63eeb32f8e8de54a2c0e5c588cc3ee9/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fstdarg-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fstdarg-4.c?ref=cd6cf2c9a63eeb32f8e8de54a2c0e5c588cc3ee9", "patch": "@@ -23,7 +23,7 @@ f1 (int i, ...)\n     x = va_arg (ap, long);\n   va_end (ap);\n }\n-/* { dg-final { scan-tree-dump \"f1: va_list escapes 0, needs to save all GPR units and 0 FPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && { x32 || { ! { ia32 } } } } } } } */\n+/* { dg-final { scan-tree-dump \"f1: va_list escapes 0, needs to save all GPR units and 0 FPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && { x32 || { ! { ia32 || llp64 } } } } } } } */\n /* { dg-final { scan-tree-dump \"f1: va_list escapes 0, needs to save all GPR units and 0 FPR units\" \"stdarg\" { target { powerpc*-*-linux* && ilp32 } } } } */\n /* { dg-final { scan-tree-dump \"f1: va_list escapes 0, needs to save all GPR units and 1\" \"stdarg\" { target alpha*-*-linux* } } } */\n /* { dg-final { scan-tree-dump \"f1: va_list escapes 0, needs to save all GPR units and 0 FPR units\" \"stdarg\" { target s390*-*-linux* } } } */\n@@ -40,7 +40,7 @@ f2 (int i, ...)\n     d = va_arg (ap, double);\n   va_end (ap);\n }\n-/* { dg-final { scan-tree-dump \"f2: va_list escapes 0, needs to save 0 GPR units and all FPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && { x32 || { ! { ia32 } } } } } } } */\n+/* { dg-final { scan-tree-dump \"f2: va_list escapes 0, needs to save 0 GPR units and all FPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && { x32 || { ! { ia32 || llp64 } } } } } } } */\n /* { dg-final { scan-tree-dump \"f2: va_list escapes 0, needs to save 0 GPR units and all FPR units\" \"stdarg\" { target { powerpc*-*-linux* && { powerpc_fprs && ilp32 } } } } } */\n /* { dg-final { scan-tree-dump \"f2: va_list escapes 0, needs to save all GPR units and 2\" \"stdarg\" { target alpha*-*-linux* } } } */\n /* { dg-final { scan-tree-dump \"f2: va_list escapes 0, needs to save 0 GPR units and all FPR units\" \"stdarg\" { target s390*-*-linux* } } } */\n@@ -63,7 +63,7 @@ f3 (int i, ...)\n       bar (x);\n     }\n }\n-/* { dg-final { scan-tree-dump \"f3: va_list escapes 0, needs to save \\[148\\] GPR units and 0 FPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && { ! { ia32 } } } } } } */\n+/* { dg-final { scan-tree-dump \"f3: va_list escapes 0, needs to save \\[148\\] GPR units and 0 FPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && { ! { ia32 || llp64 } } } } } } */\n /* { dg-final { scan-tree-dump \"f3: va_list escapes 0, needs to save \\[148\\] GPR units and 0 FPR units\" \"stdarg\" { target { powerpc*-*-linux* && ilp32 } } } } */\n /* { dg-final { scan-tree-dump \"f3: va_list escapes 0, needs to save 8 GPR units and 1\" \"stdarg\" { target alpha*-*-linux* } } } */\n /* { dg-final { scan-tree-dump \"f3: va_list escapes 0, needs to save 1 GPR units and 0 FPR units\" \"stdarg\" { target s390*-*-linux* } } } */\n@@ -84,7 +84,7 @@ f4 (int i, ...)\n       bar (d + 2.5);\n     }\n }\n-/* { dg-final { scan-tree-dump \"f4: va_list escapes 0, needs to save 0 GPR units and \\[1-9\\]\\[0-9\\]* FPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && { ! { ia32 } } } } } } */\n+/* { dg-final { scan-tree-dump \"f4: va_list escapes 0, needs to save 0 GPR units and \\[1-9\\]\\[0-9\\]* FPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && { ! { ia32 || llp64 } } } } } } */\n /* { dg-final { scan-tree-dump \"f4: va_list escapes 0, needs to save 0 GPR units and \\[1-9\\]\\[0-9\\]* FPR units\" \"stdarg\" { target { powerpc*-*-linux* && { powerpc_fprs && ilp32 } } } } } */\n /* { dg-final { scan-tree-dump \"f4: va_list escapes 0, needs to save 8 GPR units and 2\" \"stdarg\" { target alpha*-*-linux* } } } */\n /* { dg-final { scan-tree-dump \"f4: va_list escapes 0, needs to save 0 GPR units and 1 FPR units\" \"stdarg\" { target s390*-*-linux* } } } */"}, {"sha": "82352f7c2652819e73a511b3dd9f24b1db28e1d5", "filename": "gcc/testsuite/gcc.dg/tree-ssa/stdarg-5.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd6cf2c9a63eeb32f8e8de54a2c0e5c588cc3ee9/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fstdarg-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd6cf2c9a63eeb32f8e8de54a2c0e5c588cc3ee9/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fstdarg-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fstdarg-5.c?ref=cd6cf2c9a63eeb32f8e8de54a2c0e5c588cc3ee9", "patch": "@@ -22,7 +22,7 @@ f1 (int i, ...)\n     s1 = va_arg (ap, struct S1);\n   va_end (ap);\n }\n-/* { dg-final { scan-tree-dump \"f1: va_list escapes 0, needs to save 0 GPR units and 0 FPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && { ! { ia32 } } } } } } */\n+/* { dg-final { scan-tree-dump \"f1: va_list escapes 0, needs to save 0 GPR units and 0 FPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && { ! { ia32 || llp64 } } } } } } */\n /* { dg-final { scan-tree-dump \"f1: va_list escapes 0, needs to save all GPR units and 1\" \"stdarg\" { target alpha*-*-linux* } } } */\n /* { dg-final { scan-tree-dump \"f1: va_list escapes 0, needs to save all GPR units and 0 FPR units\" \"stdarg\" { target s390*-*-linux* } } } */\n \n@@ -35,7 +35,7 @@ f2 (int i, ...)\n     s2 = va_arg (ap, struct S2);\n   va_end (ap);\n }\n-/* { dg-final { scan-tree-dump \"f2: va_list escapes 0, needs to save all GPR units and all FPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && { ! { ia32 } } } } } } */\n+/* { dg-final { scan-tree-dump \"f2: va_list escapes 0, needs to save all GPR units and all FPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && { ! { ia32 || llp64 } } } } } } */\n /* { dg-final { scan-tree-dump \"f2: va_list escapes 0, needs to save all GPR units and 1\" \"stdarg\" { target alpha*-*-linux* } } } */\n /* { dg-final { scan-tree-dump \"f2: va_list escapes 0, needs to save all GPR units and 0 FPR units\" \"stdarg\" { target s390*-*-linux* } } } */\n \n@@ -53,7 +53,7 @@ f3 (int i, ...)\n       bar (s1.i);\n     }\n }\n-/* { dg-final { scan-tree-dump \"f3: va_list escapes 0, needs to save 0 GPR units and 0 FPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && { ! { ia32 } } } } } } */\n+/* { dg-final { scan-tree-dump \"f3: va_list escapes 0, needs to save 0 GPR units and 0 FPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && { ! { ia32 || llp64 } } } } } } */\n /* { dg-final { scan-tree-dump \"f3: va_list escapes 0, needs to save 32 GPR units and 1\" \"stdarg\" { target alpha*-*-linux* } } } */\n /* { dg-final { scan-tree-dump \"f3: va_list escapes 0, needs to save 1 GPR units and 0 FPR units\" \"stdarg\" { target s390*-*-linux* } } } */\n \n@@ -71,7 +71,7 @@ f4 (int i, ...)\n       bar (s2.i);\n     }\n }\n-/* { dg-final { scan-tree-dump \"f4: va_list escapes 0, needs to save 16 GPR units and 16 FPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && { ! { ia32 } } } } } } */\n+/* { dg-final { scan-tree-dump \"f4: va_list escapes 0, needs to save 16 GPR units and 16 FPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && { ! { ia32 || llp64 } } } } } } */\n /* { dg-final { scan-tree-dump \"f4: va_list escapes 0, needs to save 24 GPR units and 1\" \"stdarg\" { target alpha*-*-linux* } } } */\n /* { dg-final { scan-tree-dump \"f4: va_list escapes 0, needs to save 2 GPR units and 0 FPR units\" \"stdarg\" { target s390*-*-linux* } } } */\n \n@@ -85,7 +85,7 @@ f5 (int i, ...)\n   va_end (ap);\n   bar (__real__ ci + __imag__ ci);\n }\n-/* { dg-final { scan-tree-dump \"f5: va_list escapes 0, needs to save 16 GPR units and 0 FPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && { ! { ia32 } } } } } } */\n+/* { dg-final { scan-tree-dump \"f5: va_list escapes 0, needs to save 16 GPR units and 0 FPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && { ! { ia32 || llp64 } } } } } } */\n /* { dg-final { scan-tree-dump \"f5: va_list escapes 0, needs to save 32 GPR units and 1\" \"stdarg\" { target alpha*-*-linux* } } } */\n /* { dg-final { scan-tree-dump \"f5: va_list escapes 0, needs to save (4|2) GPR units and 0 FPR units\" \"stdarg\" { target s390*-*-linux* } } } */\n \n@@ -99,7 +99,7 @@ f6 (int i, ...)\n   va_end (ap);\n   bar (__real__ ci + __imag__ cd);\n }\n-/* { dg-final { scan-tree-dump \"f6: va_list escapes 0, needs to save 8 GPR units and 32 FPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && { ! { ia32 } } } } } } */\n+/* { dg-final { scan-tree-dump \"f6: va_list escapes 0, needs to save 8 GPR units and 32 FPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && { ! { ia32 || llp64 } } } } } } */\n /* { dg-final { scan-tree-dump \"f6: va_list escapes 0, needs to save 32 GPR units and 3\" \"stdarg\" { target alpha*-*-linux* } } } */\n /* { dg-final { scan-tree-dump \"f6: va_list escapes 0, needs to save (3|2) GPR units and 0 FPR units\" \"stdarg\" { target s390*-*-linux* } } } */\n \n@@ -113,7 +113,7 @@ f7 (int i, ...)\n   va_end (ap);\n   bar (__real__ cd + __imag__ cd);\n }\n-/* { dg-final { scan-tree-dump \"f7: va_list escapes 0, needs to save 0 GPR units and 64 FPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && { ! { ia32 } } } } } } */\n+/* { dg-final { scan-tree-dump \"f7: va_list escapes 0, needs to save 0 GPR units and 64 FPR units\" \"stdarg\" { target { { i?86-*-* x86_64-*-* } && { ! { ia32 || llp64 } } } } } } */\n /* { dg-final { scan-tree-dump \"f7: va_list escapes 0, needs to save 32 GPR units and 2\" \"stdarg\" { target alpha*-*-linux* } } } */\n /* { dg-final { scan-tree-dump \"f7: va_list escapes 0, needs to save 2 GPR units and 0 FPR units\" \"stdarg\" { target s390*-*-linux* } } } */\n /* { dg-final { cleanup-tree-dump \"stdarg\" } } */"}]}