{"sha": "0679a1c2187925df670507b188eaeb45ea81842b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDY3OWExYzIxODc5MjVkZjY3MDUwN2IxODhlYWViNDVlYTgxODQyYg==", "commit": {"author": {"name": "Chung-Ju Wu", "email": "jasonwucj@gmail.com", "date": "2018-05-19T12:01:11Z"}, "committer": {"name": "Chung-Ju Wu", "email": "jasonwucj@gcc.gnu.org", "date": "2018-05-19T12:01:11Z"}, "message": "[NDS32] Refine functions that deal with lwm and smw operations.\n\ngcc/\n\t* config/nds32/nds32-md-auxiliary.c\n\t(nds32_valid_smw_lwm_base_p): Refine.\n\t(nds32_output_smw_single_word): Refine.\n\t(nds32_output_smw_double_word): New.\n\t* config/nds32/nds32-protos.h (nds32_output_smw_double_word): New.\n\nFrom-SVN: r260396", "tree": {"sha": "4ce91ed6dc58558e6abc09e2b4505fc284bf1b57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4ce91ed6dc58558e6abc09e2b4505fc284bf1b57"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0679a1c2187925df670507b188eaeb45ea81842b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0679a1c2187925df670507b188eaeb45ea81842b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0679a1c2187925df670507b188eaeb45ea81842b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0679a1c2187925df670507b188eaeb45ea81842b/comments", "author": {"login": "jasonwucj", "id": 5520732, "node_id": "MDQ6VXNlcjU1MjA3MzI=", "avatar_url": "https://avatars.githubusercontent.com/u/5520732?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jasonwucj", "html_url": "https://github.com/jasonwucj", "followers_url": "https://api.github.com/users/jasonwucj/followers", "following_url": "https://api.github.com/users/jasonwucj/following{/other_user}", "gists_url": "https://api.github.com/users/jasonwucj/gists{/gist_id}", "starred_url": "https://api.github.com/users/jasonwucj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jasonwucj/subscriptions", "organizations_url": "https://api.github.com/users/jasonwucj/orgs", "repos_url": "https://api.github.com/users/jasonwucj/repos", "events_url": "https://api.github.com/users/jasonwucj/events{/privacy}", "received_events_url": "https://api.github.com/users/jasonwucj/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4c2b79729727a3856a931f3972fcc838defccf59", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c2b79729727a3856a931f3972fcc838defccf59", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c2b79729727a3856a931f3972fcc838defccf59"}], "stats": {"total": 103, "additions": 80, "deletions": 23}, "files": [{"sha": "6312e0282a48231ad5168de7166c387e0327d2a9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0679a1c2187925df670507b188eaeb45ea81842b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0679a1c2187925df670507b188eaeb45ea81842b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0679a1c2187925df670507b188eaeb45ea81842b", "patch": "@@ -1,3 +1,11 @@\n+2018-05-19  Chung-Ju Wu  <jasonwucj@gmail.com>\n+\n+\t* config/nds32/nds32-md-auxiliary.c\n+\t(nds32_valid_smw_lwm_base_p): Refine.\n+\t(nds32_output_smw_single_word): Refine.\n+\t(nds32_output_smw_double_word): New.\n+\t* config/nds32/nds32-protos.h (nds32_output_smw_double_word): New.\n+\n 2018-05-19  Chung-Ju Wu  <jasonwucj@gmail.com>\n \n \t* config/nds32/nds32-md-auxiliary.c (nds32_output_stack_push): Refine."}, {"sha": "3040bde9423ae3483b013100ad98f6325ba5da3d", "filename": "gcc/config/nds32/nds32-md-auxiliary.c", "status": "modified", "additions": 67, "deletions": 19, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0679a1c2187925df670507b188eaeb45ea81842b/gcc%2Fconfig%2Fnds32%2Fnds32-md-auxiliary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0679a1c2187925df670507b188eaeb45ea81842b/gcc%2Fconfig%2Fnds32%2Fnds32-md-auxiliary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32-md-auxiliary.c?ref=0679a1c2187925df670507b188eaeb45ea81842b", "patch": "@@ -2446,41 +2446,59 @@ nds32_output_float_store (rtx *operands)\n   return \"\";\n }\n \n-\n-/* Auxiliary functions for lwm/smw.  */\n-bool\n-nds32_valid_smw_lwm_base_p (rtx op)\n+const char *\n+nds32_output_smw_single_word (rtx *operands)\n {\n-  rtx base_addr;\n+  char buff[100];\n+  unsigned regno;\n+  int enable4;\n+  bool update_base_p;\n+  rtx base_addr = operands[0];\n+  rtx base_reg;\n+  rtx otherops[2];\n \n-  if (!MEM_P (op))\n-    return false;\n+  if (REG_P (XEXP (base_addr, 0)))\n+    {\n+      update_base_p = false;\n+      base_reg = XEXP (base_addr, 0);\n+    }\n+  else\n+    {\n+      update_base_p = true;\n+      base_reg = XEXP (XEXP (base_addr, 0), 0);\n+    }\n \n-  base_addr = XEXP (op, 0);\n+  const char *update_base = update_base_p ? \"m\" : \"\";\n \n-  if (REG_P (base_addr))\n-    return true;\n+  regno = REGNO (operands[1]);\n+\n+  otherops[0] = base_reg;\n+  otherops[1] = operands[1];\n+\n+  if (regno >= 28)\n+    {\n+      enable4 = nds32_regno_to_enable4 (regno);\n+      sprintf (buff, \"smw.bi%s\\t$sp, [%%0], $sp, %x\", update_base, enable4);\n+    }\n   else\n     {\n-      if (GET_CODE (base_addr) == POST_INC\n-\t  && REG_P (XEXP (base_addr, 0)))\n-        return true;\n+      sprintf (buff, \"smw.bi%s\\t%%1, [%%0], %%1\", update_base);\n     }\n-\n-  return false;\n+  output_asm_insn (buff, otherops);\n+  return \"\";\n }\n \n /* ------------------------------------------------------------------------ */\n const char *\n-nds32_output_smw_single_word (rtx *operands)\n+nds32_output_smw_double_word (rtx *operands)\n {\n   char buff[100];\n   unsigned regno;\n   int enable4;\n   bool update_base_p;\n   rtx base_addr = operands[0];\n   rtx base_reg;\n-  rtx otherops[2];\n+  rtx otherops[3];\n \n   if (REG_P (XEXP (base_addr, 0)))\n     {\n@@ -2499,15 +2517,22 @@ nds32_output_smw_single_word (rtx *operands)\n \n   otherops[0] = base_reg;\n   otherops[1] = operands[1];\n+  otherops[2] = gen_rtx_REG (SImode, REGNO (operands[1]) + 1);;\n \n   if (regno >= 28)\n     {\n-      enable4 = nds32_regno_to_enable4 (regno);\n+      enable4 = nds32_regno_to_enable4 (regno)\n+\t\t| nds32_regno_to_enable4 (regno + 1);\n       sprintf (buff, \"smw.bi%s\\t$sp, [%%0], $sp, %x\", update_base, enable4);\n     }\n+  else if (regno == 27)\n+    {\n+      enable4 = nds32_regno_to_enable4 (regno + 1);\n+      sprintf (buff, \"smw.bi%s\\t%%1, [%%0], %%1, %x\", update_base, enable4);\n+    }\n   else\n     {\n-      sprintf (buff, \"smw.bi%s\\t%%1, [%%0], %%1\", update_base);\n+      sprintf (buff, \"smw.bi%s\\t%%1, [%%0], %%2\", update_base);\n     }\n   output_asm_insn (buff, otherops);\n   return \"\";\n@@ -3774,6 +3799,29 @@ nds32_expand_constant (machine_mode mode, HOST_WIDE_INT val,\n     }\n }\n \n+/* Auxiliary functions for lwm/smw.  */\n+bool\n+nds32_valid_smw_lwm_base_p (rtx op)\n+{\n+  rtx base_addr;\n+\n+  if (!MEM_P (op))\n+    return false;\n+\n+  base_addr = XEXP (op, 0);\n+\n+  if (REG_P (base_addr))\n+    return true;\n+  else\n+    {\n+      if (GET_CODE (base_addr) == POST_INC\n+\t  && REG_P (XEXP (base_addr, 0)))\n+\treturn true;\n+    }\n+\n+  return false;\n+}\n+\n /* Auxiliary functions for manipulation DI mode.  */\n rtx nds32_di_high_part_subreg(rtx reg)\n {"}, {"sha": "9b8b8fa09a54a0ec15aad7113fb1fca885b44099", "filename": "gcc/config/nds32/nds32-protos.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0679a1c2187925df670507b188eaeb45ea81842b/gcc%2Fconfig%2Fnds32%2Fnds32-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0679a1c2187925df670507b188eaeb45ea81842b/gcc%2Fconfig%2Fnds32%2Fnds32-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32-protos.h?ref=0679a1c2187925df670507b188eaeb45ea81842b", "patch": "@@ -69,10 +69,6 @@ extern unsigned int nds32_dbx_register_number (unsigned int);\n \n /* ------------------------------------------------------------------------ */\n \n-/* Auxiliary functions for lwm/smw.  */\n-\n-extern bool nds32_valid_smw_lwm_base_p (rtx);\n-\n /* Auxiliary functions for manipulation DI mode.  */\n \n extern rtx nds32_di_high_part_subreg(rtx);\n@@ -246,6 +242,7 @@ extern const char *nds32_output_32bit_load_s (rtx *, int);\n extern const char *nds32_output_float_load(rtx *);\n extern const char *nds32_output_float_store(rtx *);\n extern const char *nds32_output_smw_single_word (rtx *);\n+extern const char *nds32_output_smw_double_word (rtx *);\n extern const char *nds32_output_lmw_single_word (rtx *);\n extern const char *nds32_output_double (rtx *, bool);\n extern const char *nds32_output_cbranchsi4_equality_zero (rtx_insn *, rtx *);\n@@ -328,6 +325,10 @@ extern bool nds32_valid_CVs5_p (rtx);\n extern bool nds32_valid_CVs2_p (rtx);\n extern bool nds32_valid_CVhi_p (rtx);\n \n+/* Auxiliary functions for lwm/smw.  */\n+\n+extern bool nds32_valid_smw_lwm_base_p (rtx);\n+\n extern bool nds32_split_double_word_load_store_p (rtx *,bool);\n \n namespace nds32 {"}]}