{"sha": "150594ba69066ade4b78e51d0a20ef9a16029bc2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTUwNTk0YmE2OTA2NmFkZTRiNzhlNTFkMGEyMGVmOWExNjAyOWJjMg==", "commit": {"author": {"name": "Andrew Pinski", "email": "andrew_pinski@playstation.sony.com", "date": "2007-05-26T03:29:58Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2007-05-26T03:29:58Z"}, "message": "re PR tree-optimization/32090 (ICE in forwprop with zero sized array)\n\n2007-05-25  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n\n        PR tree-opt/32090\n        * tree-ssa-forwprop.c\n        (forward_propagate_addr_into_variable_array_index): Remove\n        the lhs argument.  Use the type of def_rhs instead of lhs.\n        (forward_propagate_addr_expr_1): Update use of\n        forward_propagate_addr_into_variable_array_index.\n\n2007-05-25  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n\n        PR tree-opt/32090\n        * g++.dg/opt/array2.C: New testcase.\n\nFrom-SVN: r125087", "tree": {"sha": "701640b5f9e9f9335a876008b9da83e849d8609b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/701640b5f9e9f9335a876008b9da83e849d8609b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/150594ba69066ade4b78e51d0a20ef9a16029bc2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/150594ba69066ade4b78e51d0a20ef9a16029bc2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/150594ba69066ade4b78e51d0a20ef9a16029bc2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/150594ba69066ade4b78e51d0a20ef9a16029bc2/comments", "author": null, "committer": null, "parents": [{"sha": "cd3a59b38ed5414f55606720817999b869e02762", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd3a59b38ed5414f55606720817999b869e02762", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd3a59b38ed5414f55606720817999b869e02762"}], "stats": {"total": 39, "additions": 32, "deletions": 7}, "files": [{"sha": "c85ce3325d202abb57ffcff238ea0087fe7005d3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/150594ba69066ade4b78e51d0a20ef9a16029bc2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/150594ba69066ade4b78e51d0a20ef9a16029bc2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=150594ba69066ade4b78e51d0a20ef9a16029bc2", "patch": "@@ -1,3 +1,12 @@\n+2007-05-25  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n+\n+\tPR tree-opt/32090\n+\t* tree-ssa-forwprop.c\n+\t(forward_propagate_addr_into_variable_array_index): Remove\n+\tthe lhs argument.  Use the type of def_rhs instead of lhs.\n+\t(forward_propagate_addr_expr_1): Update use of\n+\tforward_propagate_addr_into_variable_array_index.\n+\n 2007-05-25  Sandra Loosemore  <sandra@codesourcery.com>\n \t    Nigel Stephens  <nigel@mips.com>\n "}, {"sha": "66ba361ccc39925a3635ae5153b0e4867e6edd15", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/150594ba69066ade4b78e51d0a20ef9a16029bc2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/150594ba69066ade4b78e51d0a20ef9a16029bc2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=150594ba69066ade4b78e51d0a20ef9a16029bc2", "patch": "@@ -1,3 +1,8 @@\n+2007-05-25  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n+\n+\tPR tree-opt/32090\n+\t* g++.dg/opt/array2.C: New testcase.\n+\n 007-05-26  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/32065"}, {"sha": "b40b052d7c6e9e9bd926bebf51b827b5e40c5975", "filename": "gcc/testsuite/g++.dg/opt/array2.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/150594ba69066ade4b78e51d0a20ef9a16029bc2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Farray2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/150594ba69066ade4b78e51d0a20ef9a16029bc2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Farray2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Farray2.C?ref=150594ba69066ade4b78e51d0a20ef9a16029bc2", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+struct JArray\n+{\n+  int data[1];\n+};\n+void *copyIntoByteArray (struct JArray *dest, __SIZE_TYPE__ offset)\n+{\n+  void *pdest = dest->data + offset;\n+  return pdest;\n+}"}, {"sha": "e42406c3ed6096bfae6d9f995d91a430d441427a", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/150594ba69066ade4b78e51d0a20ef9a16029bc2/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/150594ba69066ade4b78e51d0a20ef9a16029bc2/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=150594ba69066ade4b78e51d0a20ef9a16029bc2", "patch": "@@ -478,8 +478,8 @@ tidy_after_forward_propagate_addr (tree stmt)\n   mark_symbols_for_renaming (stmt);\n }\n \n-/* DEF_RHS defines LHS which is contains the address of the 0th element\n-   in an array.  USE_STMT uses LHS to compute the address of an\n+/* DEF_RHS contains the address of the 0th element in an array. \n+   USE_STMT uses type of DEF_RHS to compute the address of an\n    arbitrary element within the array.  The (variable) byte offset\n    of the element is contained in OFFSET.\n \n@@ -494,7 +494,7 @@ tidy_after_forward_propagate_addr (tree stmt)\n    with the new address computation.  */\n \n static bool\n-forward_propagate_addr_into_variable_array_index (tree offset, tree lhs,\n+forward_propagate_addr_into_variable_array_index (tree offset,\n \t\t\t\t\t\t  tree def_rhs, tree use_stmt)\n {\n   tree index;\n@@ -516,7 +516,7 @@ forward_propagate_addr_into_variable_array_index (tree offset, tree lhs,\n   /* Try to find an expression for a proper index.  This is either\n      a multiplication expression by the element size or just the\n      ssa name we came along in case the element size is one.  */\n-  if (integer_onep (TYPE_SIZE_UNIT (TREE_TYPE (TREE_TYPE (lhs)))))\n+  if (integer_onep (TYPE_SIZE_UNIT (TREE_TYPE (TREE_TYPE (def_rhs)))))\n     index = offset;\n   else\n     {\n@@ -531,7 +531,7 @@ forward_propagate_addr_into_variable_array_index (tree offset, tree lhs,\n       if (TREE_CODE (offset) != MULT_EXPR\n \t  || TREE_CODE (TREE_OPERAND (offset, 1)) != INTEGER_CST\n \t  || !simple_cst_equal (TREE_OPERAND (offset, 1),\n-\t\t\t\tTYPE_SIZE_UNIT (TREE_TYPE (TREE_TYPE (lhs)))))\n+\t\t\t\tTYPE_SIZE_UNIT (TREE_TYPE (TREE_TYPE (def_rhs)))))\n \treturn false;\n \n       /* The first operand to the MULT_EXPR is the desired index.  */\n@@ -679,7 +679,7 @@ forward_propagate_addr_expr_1 (tree name, tree def_rhs, tree use_stmt,\n       bool res;\n       tree offset_stmt = SSA_NAME_DEF_STMT (TREE_OPERAND (rhs, 1));\n       \n-      res = forward_propagate_addr_into_variable_array_index (offset_stmt, lhs,\n+      res = forward_propagate_addr_into_variable_array_index (offset_stmt,\n \t\t\t\t\t\t\t      def_rhs, use_stmt);\n       return res;\n     }\n@@ -694,7 +694,7 @@ forward_propagate_addr_expr_1 (tree name, tree def_rhs, tree use_stmt,\n     {\n       bool res;\n       tree offset_stmt = SSA_NAME_DEF_STMT (TREE_OPERAND (rhs, 0));\n-      res = forward_propagate_addr_into_variable_array_index (offset_stmt, lhs,\n+      res = forward_propagate_addr_into_variable_array_index (offset_stmt,\n \t\t\t\t\t\t\t      def_rhs, use_stmt);\n       return res;\n     }"}]}