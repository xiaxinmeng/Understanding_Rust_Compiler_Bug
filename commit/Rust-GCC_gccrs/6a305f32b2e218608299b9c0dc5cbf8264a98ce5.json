{"sha": "6a305f32b2e218608299b9c0dc5cbf8264a98ce5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmEzMDVmMzJiMmUyMTg2MDgyOTliOWMwZGM1Y2JmODI2NGE5OGNlNQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-08-12T02:27:09Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-08-12T02:27:09Z"}, "message": "Formatting changes.\n\nFrom-SVN: r12617", "tree": {"sha": "c666cf772fff72b154b690af1b830983c8882d24", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c666cf772fff72b154b690af1b830983c8882d24"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6a305f32b2e218608299b9c0dc5cbf8264a98ce5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a305f32b2e218608299b9c0dc5cbf8264a98ce5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a305f32b2e218608299b9c0dc5cbf8264a98ce5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a305f32b2e218608299b9c0dc5cbf8264a98ce5/comments", "author": null, "committer": null, "parents": [{"sha": "2a7c93ee56f03c7cc14103b1f2ec5efa51efb3ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a7c93ee56f03c7cc14103b1f2ec5efa51efb3ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a7c93ee56f03c7cc14103b1f2ec5efa51efb3ef"}], "stats": {"total": 62, "additions": 39, "deletions": 23}, "files": [{"sha": "41196da5ae5a3644c515242cc0617a9e5ef7d5d2", "filename": "gcc/objc/archive.c", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a305f32b2e218608299b9c0dc5cbf8264a98ce5/gcc%2Fobjc%2Farchive.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a305f32b2e218608299b9c0dc5cbf8264a98ce5/gcc%2Fobjc%2Farchive.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Farchive.c?ref=6a305f32b2e218608299b9c0dc5cbf8264a98ce5", "patch": "@@ -141,7 +141,8 @@ __objc_code_unsigned_short (unsigned char* buf, unsigned short val)\n }\n \n int\n-objc_write_unsigned_short (struct objc_typed_stream* stream, unsigned short value)\n+objc_write_unsigned_short (struct objc_typed_stream* stream, \n+\t\t\t   unsigned short value)\n {\n   unsigned char buf[sizeof (unsigned short)+1];\n   int len = __objc_code_unsigned_short (buf, value);\n@@ -252,7 +253,8 @@ __objc_code_unsigned_long (unsigned char* buf, unsigned long val)\n }\n \n int\n-objc_write_unsigned_long (struct objc_typed_stream* stream, unsigned long value)\n+objc_write_unsigned_long (struct objc_typed_stream* stream, \n+\t\t\t  unsigned long value)\n {\n   unsigned char buf[sizeof(unsigned long)+1];\n   int len = __objc_code_unsigned_long (buf, value);\n@@ -315,7 +317,8 @@ objc_write_string_atomic (struct objc_typed_stream* stream,\n }\n \n static int\n-objc_write_register_common (struct objc_typed_stream* stream, unsigned long key)\n+objc_write_register_common (struct objc_typed_stream* stream, \n+\t\t\t    unsigned long key)\n {\n   unsigned char buf[sizeof (unsigned long)+2];\n   int len = __objc_code_unsigned_long (buf+1, key);\n@@ -488,7 +491,8 @@ objc_write_selector (struct objc_typed_stream* stream, SEL selector)\n   else\n     {\n       int length;\n-      hash_add (&stream->stream_table, LONG2PTR(key=PTR2LONG(sel_name)), (char*)sel_name);\n+      hash_add (&stream->stream_table, \n+\t\tLONG2PTR(key=PTR2LONG(sel_name)), (char*)sel_name);\n       if ((length = objc_write_register_common (stream, key)))\n \treturn __objc_write_selector (stream, selector);\n       return length;\n@@ -840,8 +844,10 @@ objc_read_object (struct objc_typed_stream* stream, id* object)\n \t{\n \t  struct objc_list* other;\n \t  len = objc_read_unsigned_long (stream, &key);\n-\t  other = (struct objc_list*)hash_value_for_key (stream->object_refs, LONG2PTR(key));\n-\t  hash_add (&stream->object_refs, LONG2PTR(key), (void*)list_cons(object, other));\n+\t  other = (struct objc_list*)hash_value_for_key (stream->object_refs, \n+\t\t\t\t\t\t\t LONG2PTR(key));\n+\t  hash_add (&stream->object_refs, LONG2PTR(key), \n+\t\t    (void*)list_cons(object, other));\n \t}\n \n       else if (buf[0] == (_B_EXT | _BX_OBJROOT)) /* a root object */\n@@ -948,7 +954,8 @@ objc_read_selector (struct objc_typed_stream* stream, SEL* selector)\n \t  if (key)\n \t    __objc_fatal(\"cannot register use upcode...\");\n \t  len = __objc_read_nbyte_ulong(stream, (buf[0] & _B_VALUE), &key);\n-\t  (*selector) = hash_value_for_key (stream->stream_table, LONG2PTR(key));\n+\t  (*selector) = hash_value_for_key (stream->stream_table, \n+\t\t\t\t\t    LONG2PTR(key));\n \t}\n \n       else\n@@ -1019,7 +1026,8 @@ objc_write_type(TypedStream* stream, const char* type, const void* data)\n     break;\n \n   case _C_ATOM:\n-    return objc_write_string_atomic (stream, *(char**)data, strlen(*(char**)data));\n+    return objc_write_string_atomic (stream, *(char**)data, \n+\t\t\t\t     strlen(*(char**)data));\n     break;\n \n   case _C_ARY_B:"}, {"sha": "ae7d2800dca3c3f7c563d2b48e617cad7ef0274a", "filename": "gcc/objc/class.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a305f32b2e218608299b9c0dc5cbf8264a98ce5/gcc%2Fobjc%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a305f32b2e218608299b9c0dc5cbf8264a98ce5/gcc%2Fobjc%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fclass.c?ref=6a305f32b2e218608299b9c0dc5cbf8264a98ce5", "patch": "@@ -306,7 +306,8 @@ class_pose_as (Class impostor, Class super_class)\n \t    if (CLS_ISCLASS (sub))\n \t      {\n \t\t/* meta classes */\n-\t\tCLASSOF (sub)->sibling_class = CLASSOF (impostor)->subclass_list;\n+\t\tCLASSOF (sub)->sibling_class = \n+\t\t  CLASSOF (impostor)->subclass_list;\n \t\tCLASSOF (sub)->super_class = CLASSOF (impostor);\n \t\tCLASSOF (impostor)->subclass_list = CLASSOF (sub);\n \t      }"}, {"sha": "bdfa3c82eaf5a16428d6b0b0b96932432932316f", "filename": "gcc/objc/objc.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a305f32b2e218608299b9c0dc5cbf8264a98ce5/gcc%2Fobjc%2Fobjc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a305f32b2e218608299b9c0dc5cbf8264a98ce5/gcc%2Fobjc%2Fobjc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc.h?ref=6a305f32b2e218608299b9c0dc5cbf8264a98ce5", "patch": "@@ -1,5 +1,5 @@\n /* Basic data types for Objective C.\n-   Copyright (C) 1993, 1995 Free Software Foundation, Inc.\n+   Copyright (C) 1993, 1995, 1996 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -103,9 +103,9 @@ struct objc_class {\n   unsigned long       info;                   /* Bit mask.  See class masks \n                                                 defined above. */\n   long                instance_size;          /* Size in bytes of the class.  \n-                                                The sum of the class definition \n-                                                and all super class \n-                                                definitions. */\n+                                                The sum of the class \n+\t\t\t\t\t\tdefinition and all super \n+\t\t\t\t\t\tclass definitions. */\n   struct objc_ivar_list* ivars;               /* Pointer to a structure that\n                                                 describes the instance \n                                                 variables in the class"}, {"sha": "fec92b18a2bc36e8742de33c22e3b486db25652f", "filename": "gcc/objc/sarray.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a305f32b2e218608299b9c0dc5cbf8264a98ce5/gcc%2Fobjc%2Fsarray.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a305f32b2e218608299b9c0dc5cbf8264a98ce5/gcc%2Fobjc%2Fsarray.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fsarray.c?ref=6a305f32b2e218608299b9c0dc5cbf8264a98ce5", "patch": "@@ -174,7 +174,8 @@ sarray_at_put(struct sarray* array, sidx index, void* element)\n     /* The bucket was previously empty (or something like that), */\n     /* allocate a new.  This is the effect of `lazy' allocation */  \n     new_bucket = (struct sbucket*)__objc_xmalloc(sizeof(struct sbucket));\n-    memcpy((void *) new_bucket, (const void*)array->empty_bucket, sizeof(struct sbucket));\n+    memcpy((void *) new_bucket, (const void*)array->empty_bucket, \n+\t   sizeof(struct sbucket));\n     new_bucket->version.version = array->version.version;\n     *the_bucket = new_bucket;                   /* Prepared for install. */\n     "}, {"sha": "69074a45d33e660c7e6cc4b90e28b0bbd1e429cd", "filename": "gcc/objc/thr-decosf1.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a305f32b2e218608299b9c0dc5cbf8264a98ce5/gcc%2Fobjc%2Fthr-decosf1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a305f32b2e218608299b9c0dc5cbf8264a98ce5/gcc%2Fobjc%2Fthr-decosf1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fthr-decosf1.c?ref=6a305f32b2e218608299b9c0dc5cbf8264a98ce5", "patch": "@@ -82,7 +82,8 @@ objc_thread_create(void (*func)(void *arg), void *arg)\n     \n     if (pthread_create(&new_thread_handle, pthread_attr_default,\n                        (void *)func, arg) == 0) {\n-        thread_id = *(_objc_thread_t *)&new_thread_handle; /* ??? May not work! (64bit)*/\n+      /* ??? May not work! (64bit)*/\n+        thread_id = *(_objc_thread_t *)&new_thread_handle; \n         pthread_detach(&new_thread_handle);     /* Fully detach thread.     */\n \t__objc_runtime_threads_alive++;\n     }"}, {"sha": "ad04a3db5e922fd2fc7e2a2ac787cc98d5555cae", "filename": "gcc/objc/thr-mach.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a305f32b2e218608299b9c0dc5cbf8264a98ce5/gcc%2Fobjc%2Fthr-mach.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a305f32b2e218608299b9c0dc5cbf8264a98ce5/gcc%2Fobjc%2Fthr-mach.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fthr-mach.c?ref=6a305f32b2e218608299b9c0dc5cbf8264a98ce5", "patch": "@@ -107,7 +107,8 @@ objc_thread_create(void (*func)(void *arg), void *arg)\n     new_thread_handle = cthread_fork((cthread_fn_t)func, arg);\n \n     if(new_thread_handle) {\n-        thread_id = *(_objc_thread_t *)&new_thread_handle; /* this is not terribly portable */\n+      /* this is not terribly portable */\n+        thread_id = *(_objc_thread_t *)&new_thread_handle; \n         cthread_detach(new_thread_handle);      /* fully detach thread */\n         __objc_runtime_threads_alive++;         /* increment thread count */\n     }\n@@ -122,10 +123,10 @@ objc_thread_create(void (*func)(void *arg), void *arg)\n int\n objc_thread_set_priority(int priority)\n {\n-    _objc_thread_t \t*t\t     = objc_thread_id();\n-    cthread_t      \tcT\t     = (cthread_t) t; /* see objc_thread_id() */\n-    int \t\tmaxPriority  = __mach_get_max_thread_priority(cT, NULL);\n-    int         \tsys_priority = 0;\n+    _objc_thread_t   *t\t     = objc_thread_id();\n+    cthread_t        cT\t     = (cthread_t) t; \n+    int \t     maxPriority  = __mach_get_max_thread_priority(cT, NULL);\n+    int              sys_priority = 0;\n \n     if (maxPriority == -1)\n \treturn -1;"}, {"sha": "4a846c8fb85cee3f1c8075d9f9fe97b659e440a2", "filename": "gcc/objc/thr-win32.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a305f32b2e218608299b9c0dc5cbf8264a98ce5/gcc%2Fobjc%2Fthr-win32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a305f32b2e218608299b9c0dc5cbf8264a98ce5/gcc%2Fobjc%2Fthr-win32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fthr-win32.c?ref=6a305f32b2e218608299b9c0dc5cbf8264a98ce5", "patch": "@@ -24,10 +24,14 @@ Boston, MA 02111-1307, USA.  */\n    however invalidate any other reasons why the executable file might be\n    covered by the GNU General Public License.  */\n \n-#include <windows.h>\n #include <objc/thr.h>\n #include \"runtime.h\"\n \n+#ifndef __OBJC__\n+#define __OBJC__\n+#endif\n+#include <windows.h>\n+\n /********\n  *  This structure represents a single mutual exclusion lock.  Lock semantics\n  *  are detailed with the subsequent functions.  We use whatever lock is"}, {"sha": "4b8c2fc467df6b60e32d1a2de0e0d08f60797f9c", "filename": "gcc/objc/thr.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a305f32b2e218608299b9c0dc5cbf8264a98ce5/gcc%2Fobjc%2Fthr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a305f32b2e218608299b9c0dc5cbf8264a98ce5/gcc%2Fobjc%2Fthr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fthr.c?ref=6a305f32b2e218608299b9c0dc5cbf8264a98ce5", "patch": "@@ -27,10 +27,10 @@ Boston, MA 02111-1307, USA.  */\n #include <stdlib.h>\n #include \"runtime.h\"\n \n-/*****************************************************************************\n+/*************************************************************************\n  *  Universal static variables:\n  */\n-int     __objc_thread_exit_status = 0;          /* Global exit status.      */\n+int __objc_thread_exit_status = 0;      /* Global exit status.   */\n \n /* Flag which lets us know if we ever became multi threaded */\n int __objc_is_multi_threaded = 0;"}]}