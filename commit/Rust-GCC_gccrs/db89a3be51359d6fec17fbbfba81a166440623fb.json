{"sha": "db89a3be51359d6fec17fbbfba81a166440623fb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGI4OWEzYmU1MTM1OWQ2ZmVjMTdmYmJmYmE4MWExNjY0NDA2MjNmYg==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2008-12-10T17:31:07Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2008-12-10T17:31:07Z"}, "message": "re PR target/37033 (Revision 138733 breaks -g vs -g0 for PCH)\n\ngcc/ChangeLog:\nPR target/37033\n* dwarf2out.c (saved_do_cfi_asm): New.\n(dwarf2out_do_frame): Take it into account.\n(dwarf2out_d_cfi_asm): Likewise.  Set it when appropriate.\nlibcpp/ChangeLog:\nPR target/37033\n* pch.c (cpp_valid_state): Improve message for poisoned symbols.\nAllow for differences in __GCC_HAVE_DWARF2_CFI_ASM.\n\nFrom-SVN: r142652", "tree": {"sha": "031df0cf1ce30d17e5c1252ae913a706c0218960", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/031df0cf1ce30d17e5c1252ae913a706c0218960"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/db89a3be51359d6fec17fbbfba81a166440623fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db89a3be51359d6fec17fbbfba81a166440623fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db89a3be51359d6fec17fbbfba81a166440623fb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db89a3be51359d6fec17fbbfba81a166440623fb/comments", "author": null, "committer": null, "parents": [{"sha": "aee91ff0bdb624e4a90149b035413be2cd1d6db9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aee91ff0bdb624e4a90149b035413be2cd1d6db9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aee91ff0bdb624e4a90149b035413be2cd1d6db9"}], "stats": {"total": 46, "additions": 42, "deletions": 4}, "files": [{"sha": "2a1d73f668504e7370ac14a7fc19fe4cb15e2b5f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db89a3be51359d6fec17fbbfba81a166440623fb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db89a3be51359d6fec17fbbfba81a166440623fb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=db89a3be51359d6fec17fbbfba81a166440623fb", "patch": "@@ -1,3 +1,10 @@\n+2008-12-10  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\tPR target/37033\n+\t* dwarf2out.c (saved_do_cfi_asm): New.\n+\t(dwarf2out_do_frame): Take it into account.\n+\t(dwarf2out_d_cfi_asm): Likewise.  Set it when appropriate.\n+\n 2008-12-10  Alexandre Oliva  <aoliva@redhat.com>\n \n \tPR middle-end/38271"}, {"sha": "669948bc7cefc032e9177907b88629ee377ecd51", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db89a3be51359d6fec17fbbfba81a166440623fb/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db89a3be51359d6fec17fbbfba81a166440623fb/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=db89a3be51359d6fec17fbbfba81a166440623fb", "patch": "@@ -110,6 +110,9 @@ static void dwarf2out_source_line (unsigned int, const char *);\n #define DWARF2_FRAME_REG_OUT(REGNO, FOR_EH) (REGNO)\n #endif\n \n+/* Save the result of dwarf2out_do_frame across PCH.  */\n+static GTY(()) bool saved_do_cfi_asm = 0;\n+\n /* Decide whether we want to emit frame unwind information for the current\n    translation unit.  */\n \n@@ -121,7 +124,7 @@ dwarf2out_do_frame (void)\n      we're not going to output frame or unwind info.  */\n   return (write_symbols == DWARF2_DEBUG\n \t  || write_symbols == VMS_AND_DWARF2_DEBUG\n-\t  || DWARF2_FRAME_INFO\n+\t  || DWARF2_FRAME_INFO || saved_do_cfi_asm\n #ifdef DWARF2_UNWIND_INFO\n \t  || (DWARF2_UNWIND_INFO\n \t      && (flag_unwind_tables\n@@ -142,7 +145,7 @@ dwarf2out_do_cfi_asm (void)\n #endif\n   if (!flag_dwarf2_cfi_asm || !dwarf2out_do_frame ())\n     return false;\n-  if (!eh_personality_libfunc)\n+  if (saved_do_cfi_asm || !eh_personality_libfunc)\n     return true;\n   if (!HAVE_GAS_CFI_PERSONALITY_DIRECTIVE)\n     return false;\n@@ -156,6 +159,7 @@ dwarf2out_do_cfi_asm (void)\n   if ((enc & 0x70) != 0 && (enc & 0x70) != DW_EH_PE_pcrel)\n     return false;\n \n+  saved_do_cfi_asm = true;\n   return true;\n }\n "}, {"sha": "a6378bc339c7fa8f641118bdc0647d498a9d8766", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db89a3be51359d6fec17fbbfba81a166440623fb/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db89a3be51359d6fec17fbbfba81a166440623fb/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=db89a3be51359d6fec17fbbfba81a166440623fb", "patch": "@@ -1,3 +1,9 @@\n+2008-12-10  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\tPR target/37033\n+\t* pch.c (cpp_valid_state): Improve message for poisoned symbols.\n+\tAllow for differences in __GCC_HAVE_DWARF2_CFI_ASM.\n+\n 2008-11-29  Joseph Myers  <joseph@codesourcery.com>\n \n \t* lex.c (cpp_token_len): Use 6 as default length."}, {"sha": "f459d2cb9064f64a9a995e1065fe01adddf7edef", "filename": "libcpp/pch.c", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db89a3be51359d6fec17fbbfba81a166440623fb/libcpp%2Fpch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db89a3be51359d6fec17fbbfba81a166440623fb/libcpp%2Fpch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fpch.c?ref=db89a3be51359d6fec17fbbfba81a166440623fb", "patch": "@@ -1,5 +1,5 @@\n /* Part of CPP library.  (Precompiled header reading/writing.)\n-   Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005\n+   Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005, 2008\n    Free Software Foundation, Inc.\n \n This program is free software; you can redistribute it and/or modify it\n@@ -477,9 +477,30 @@ cpp_valid_state (cpp_reader *r, const char *name, int fd)\n \n       h = cpp_lookup (r, namebuf, m.name_length);\n       if (m.flags & NODE_POISONED\n-\t  || h->type != NT_MACRO\n \t  || h->flags & NODE_POISONED)\n \t{\n+\t  if (CPP_OPTION (r, warn_invalid_pch))\n+\t    cpp_error (r, CPP_DL_WARNING_SYSHDR,\n+\t\t       \"%s: not used because `%.*s' is poisoned\",\n+\t\t       name, m.name_length, namebuf);\n+\t  goto fail;\n+\t}\n+\n+      if (h->type != NT_MACRO)\n+\t{\n+\t  /* It's ok if __GCC_HAVE_DWARF2_CFI_ASM becomes undefined,\n+\t     as in, when the PCH file is created with -g and we're\n+\t     attempting to use it without -g.  Restoring the PCH file\n+\t     is supposed to bring in this definition *and* enable the\n+\t     generation of call frame information, so that precompiled\n+\t     definitions that take this macro into accout, to decide\n+\t     what asm to emit, won't issue .cfi directives when the\n+\t     compiler doesn't.  */\n+\t  if (!(h->flags & NODE_USED)\n+\t      && m.name_length == sizeof (\"__GCC_HAVE_DWARF2_CFI_ASM\") - 1\n+\t      && !memcmp (namebuf, \"__GCC_HAVE_DWARF2_CFI_ASM\", m.name_length))\n+\t    continue;\n+\n \t  if (CPP_OPTION (r, warn_invalid_pch))\n \t    cpp_error (r, CPP_DL_WARNING_SYSHDR,\n \t\t       \"%s: not used because `%.*s' not defined\","}]}