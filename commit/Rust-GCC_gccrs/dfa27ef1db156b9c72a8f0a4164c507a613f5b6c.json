{"sha": "dfa27ef1db156b9c72a8f0a4164c507a613f5b6c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGZhMjdlZjFkYjE1NmI5YzcyYThmMGE0MTY0YzUwN2E2MTNmNWI2Yw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "1999-01-09T18:37:42Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1999-01-09T18:37:42Z"}, "message": "tree.c (make_node): Call bzero instead of inline clear.\n\n        * tree.c (make_node): Call bzero instead of inline clear.\n        (copy_node, make_tree_vec, build1): Likewise.\n        (get_identifier): Call strlen instead of inline count.\n        (maybe_get_identifier): Likewise.\n\nFrom-SVN: r24599", "tree": {"sha": "e093a56744e204b091f418d279f1b78733259460", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e093a56744e204b091f418d279f1b78733259460"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dfa27ef1db156b9c72a8f0a4164c507a613f5b6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfa27ef1db156b9c72a8f0a4164c507a613f5b6c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dfa27ef1db156b9c72a8f0a4164c507a613f5b6c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfa27ef1db156b9c72a8f0a4164c507a613f5b6c/comments", "author": null, "committer": null, "parents": [{"sha": "dfb31eec9d163d706940539f4a2b0375c752a107", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfb31eec9d163d706940539f4a2b0375c752a107", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dfb31eec9d163d706940539f4a2b0375c752a107"}], "stats": {"total": 34, "additions": 13, "deletions": 21}, "files": [{"sha": "ab5938e7d21a927f28af3474c039b23976140b45", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfa27ef1db156b9c72a8f0a4164c507a613f5b6c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfa27ef1db156b9c72a8f0a4164c507a613f5b6c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dfa27ef1db156b9c72a8f0a4164c507a613f5b6c", "patch": "@@ -1,3 +1,10 @@\n+Sat Jan  9 18:35:29 1999  Richard Henderson  <rth@cygnus.com>\n+\n+\t* tree.c (make_node): Call bzero instead of inline clear.\n+\t(copy_node, make_tree_vec, build1): Likewise.\n+\t(get_identifier): Call strlen instead of inline count.\n+\t(maybe_get_identifier): Likewise.\n+\n Sun Jan 10 14:04:51 1999  Michael Hayes  <m.hayes@elec.canterbury.ac.nz>\n \n \t* config/c4x/c4x.md: (in_annul_slot_3): Allow unarycc and binarycc"}, {"sha": "62d2a1287b59a3c472cf9a17a134a0c274df9a4b", "filename": "gcc/tree.c", "status": "modified", "additions": 6, "deletions": 21, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfa27ef1db156b9c72a8f0a4164c507a613f5b6c/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfa27ef1db156b9c72a8f0a4164c507a613f5b6c/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=dfa27ef1db156b9c72a8f0a4164c507a613f5b6c", "patch": "@@ -1071,19 +1071,13 @@ make_node (code)\n     }\n \n   t = (tree) obstack_alloc (obstack, length);\n+  bzero (t, length);\n \n #ifdef GATHER_STATISTICS\n   tree_node_counts[(int)kind]++;\n   tree_node_sizes[(int)kind] += length;\n #endif\n \n-  /* Clear a word at a time.  */\n-  for (i = (length / sizeof (int)) - 1; i >= 0; i--)\n-    ((int *) t)[i] = 0;\n-  /* Clear any extra bytes.  */\n-  for (i = length / sizeof (int) * sizeof (int); i < length; i++)\n-    ((char *) t)[i] = 0;\n-\n   TREE_SET_CODE (t, code);\n   if (obstack == &permanent_obstack)\n     TREE_PERMANENT (t) = 1;\n@@ -1189,12 +1183,7 @@ copy_node (node)\n     }\n \n   t = (tree) obstack_alloc (current_obstack, length);\n-\n-  for (i = (length / sizeof (int)) - 1; i >= 0; i--)\n-    ((int *) t)[i] = ((int *) node)[i];\n-  /* Clear any extra bytes.  */\n-  for (i = length / sizeof (int) * sizeof (int); i < length; i++)\n-    ((char *) t)[i] = ((char *) node)[i];\n+  bzero (t, length);\n \n   /* EXPR_WITH_FILE_LOCATION must keep filename info stored in TREE_CHAIN */\n   if (TREE_CODE (node) != EXPR_WITH_FILE_LOCATION)\n@@ -1262,7 +1251,7 @@ get_identifier (text)\n   register int len, hash_len;\n \n   /* Compute length of text in len.  */\n-  for (len = 0; text[len]; len++);\n+  len = strlen (text);\n \n   /* Decide how much of that length to hash on */\n   hash_len = len;\n@@ -1325,7 +1314,7 @@ maybe_get_identifier (text)\n   register int len, hash_len;\n \n   /* Compute length of text in len.  */\n-  for (len = 0; text[len]; len++);\n+  len = strlen (text);\n \n   /* Decide how much of that length to hash on */\n   hash_len = len;\n@@ -1565,9 +1554,7 @@ make_tree_vec (len)\n #endif\n \n   t = (tree) obstack_alloc (obstack, length);\n-\n-  for (i = (length / sizeof (int)) - 1; i >= 0; i--)\n-    ((int *) t)[i] = 0;\n+  bzero (t, length);\n \n   TREE_SET_CODE (t, TREE_VEC);\n   TREE_VEC_LENGTH (t) = len;\n@@ -3074,15 +3061,13 @@ build1 (code, type, node)\n   length = sizeof (struct tree_exp);\n \n   t = (tree) obstack_alloc (obstack, length);\n+  bzero (t, length);\n \n #ifdef GATHER_STATISTICS\n   tree_node_counts[(int)kind]++;\n   tree_node_sizes[(int)kind] += length;\n #endif\n \n-  for (i = (length / sizeof (int)) - 1; i >= 0; i--)\n-    ((int *) t)[i] = 0;\n-\n   TREE_TYPE (t) = type;\n   TREE_SET_CODE (t, code);\n "}]}