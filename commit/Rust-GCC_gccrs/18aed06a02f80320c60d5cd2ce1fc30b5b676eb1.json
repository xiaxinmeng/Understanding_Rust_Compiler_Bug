{"sha": "18aed06a02f80320c60d5cd2ce1fc30b5b676eb1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MThhZWQwNmEwMmY4MDMyMGM2MGQ1Y2QyY2UxZmMzMGI1YjY3NmViMQ==", "commit": {"author": {"name": "Sebastian Pop", "email": "pop@cri.ensmp.fr", "date": "2005-09-09T10:56:41Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2005-09-09T10:56:41Z"}, "message": "Makefile.in (tree-chrec.o): Depends on SCEV_H.\n\n\t* Makefile.in (tree-chrec.o): Depends on SCEV_H.\n\t* tree-chrec.c: Include tree-scalar-evolution.h.\n\t(chrec_convert): Instantiate the base and step before calling\n\tscev_probably_wraps_p that would fail on parametric evolutions.\n\tCollect all the fails into a single section failed_to_convert,\n\tprint a diagnostic, and return chrec_dont_know instead of calling\n\tfold_convert.\n\t* tree-scalar-evolution.c (loop_closed_phi_def): New.\n\t(instantiate_parameters_1): Avoid instantiation of loop closed ssa\n\tphi nodes.\n\t(scev_const_prop): Don't replace the definition of a loop closed ssa\n\tphi node by itself, or by another loop closed ssa phi node.\n\t* tree-ssa-loop-niter.c (scev_probably_wraps_p, convert_step): Check\n\tthat base and step are defined.\n\nFrom-SVN: r104092", "tree": {"sha": "c7edd2ccfdc78d98667b7a53d37015f541602224", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c7edd2ccfdc78d98667b7a53d37015f541602224"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/18aed06a02f80320c60d5cd2ce1fc30b5b676eb1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18aed06a02f80320c60d5cd2ce1fc30b5b676eb1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18aed06a02f80320c60d5cd2ce1fc30b5b676eb1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18aed06a02f80320c60d5cd2ce1fc30b5b676eb1/comments", "author": null, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35885ceb44d03c909d9e271c8a934b5b1f901790", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35885ceb44d03c909d9e271c8a934b5b1f901790", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35885ceb44d03c909d9e271c8a934b5b1f901790"}], "stats": {"total": 124, "additions": 110, "deletions": 14}, "files": [{"sha": "e9295e65252e288b09e775a0c0148edaf3fe2274", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18aed06a02f80320c60d5cd2ce1fc30b5b676eb1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18aed06a02f80320c60d5cd2ce1fc30b5b676eb1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=18aed06a02f80320c60d5cd2ce1fc30b5b676eb1", "patch": "@@ -1,3 +1,20 @@\n+2005-09-09  Sebastian Pop  <pop@cri.ensmp.fr>\n+\n+\t* Makefile.in (tree-chrec.o): Depends on SCEV_H.\n+\t* tree-chrec.c: Include tree-scalar-evolution.h.\n+\t(chrec_convert): Instantiate the base and step before calling\n+\tscev_probably_wraps_p that would fail on parametric evolutions.\n+\tCollect all the fails into a single section failed_to_convert,\n+\tprint a diagnostic, and return chrec_dont_know instead of calling\n+\tfold_convert.\n+\t* tree-scalar-evolution.c (loop_closed_phi_def): New.\n+\t(instantiate_parameters_1): Avoid instantiation of loop closed ssa\n+\tphi nodes.\n+\t(scev_const_prop): Don't replace the definition of a loop closed ssa\n+\tphi node by itself, or by another loop closed ssa phi node.\n+\t* tree-ssa-loop-niter.c (scev_probably_wraps_p, convert_step): Check\n+\tthat base and step are defined.\n+\n 2005-09-09  Richard Guenther  <rguenther@suse.de>\n \n \tPR c++/23624"}, {"sha": "3ed71862980814723bd3800a5076830f4bc0333e", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18aed06a02f80320c60d5cd2ce1fc30b5b676eb1/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18aed06a02f80320c60d5cd2ce1fc30b5b676eb1/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=18aed06a02f80320c60d5cd2ce1fc30b5b676eb1", "patch": "@@ -1944,7 +1944,7 @@ tree-browser.o : tree-browser.c tree-browser.def $(CONFIG_H) $(SYSTEM_H) \\\n    $(TREE_H) tree-inline.h $(DIAGNOSTIC_H) $(HASHTAB_H) \\\n    $(TM_H) coretypes.h\n tree-chrec.o: tree-chrec.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n-   $(GGC_H) $(TREE_H) real.h tree-chrec.h tree-pass.h $(PARAMS_H) \\\n+   $(GGC_H) $(TREE_H) real.h $(SCEV_H) tree-pass.h $(PARAMS_H) \\\n    $(DIAGNOSTIC_H) $(VARRAY_H) $(CFGLOOP_H) $(TREE_FLOW_H)\n tree-scalar-evolution.o: tree-scalar-evolution.c $(CONFIG_H) $(SYSTEM_H) \\\n    coretypes.h $(TM_H) $(GGC_H) $(TREE_H) real.h $(RTL_H) \\"}, {"sha": "3324c8bc2b7c1f007c281da1aa7b08ffa7abdf23", "filename": "gcc/tree-chrec.c", "status": "modified", "additions": 29, "deletions": 8, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18aed06a02f80320c60d5cd2ce1fc30b5b676eb1/gcc%2Ftree-chrec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18aed06a02f80320c60d5cd2ce1fc30b5b676eb1/gcc%2Ftree-chrec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-chrec.c?ref=18aed06a02f80320c60d5cd2ce1fc30b5b676eb1", "patch": "@@ -38,6 +38,7 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n #include \"tree-chrec.h\"\n #include \"tree-pass.h\"\n #include \"params.h\"\n+#include \"tree-scalar-evolution.h\"\n \n \f\n \n@@ -1120,8 +1121,12 @@ chrec_convert (tree type, tree chrec, tree at_stmt)\n \n   if (evolution_function_is_affine_p (chrec))\n     {\n-      tree step;\n+      tree base, step;\n       bool dummy;\n+      struct loop *loop = current_loops->parray[CHREC_VARIABLE (chrec)];\n+\n+      base = instantiate_parameters (loop, CHREC_LEFT (chrec));\n+      step = instantiate_parameters (loop, CHREC_RIGHT (chrec));\n \n       /* Avoid conversion of (signed char) {(uchar)1, +, (uchar)1}_x\n \t when it is not possible to prove that the scev does not wrap.\n@@ -1130,16 +1135,32 @@ chrec_convert (tree type, tree chrec, tree at_stmt)\n \t 1, 2, ..., 127, -128, ...  The result should not be\n \t {(schar)1, +, (schar)1}_x, but instead, we should keep the\n \t conversion: (schar) {(uchar)1, +, (uchar)1}_x.  */\n-      if (scev_probably_wraps_p (type, CHREC_LEFT (chrec), CHREC_RIGHT (chrec),\n-\t\t\t\t at_stmt,\n-\t\t\t\t current_loops->parray[CHREC_VARIABLE (chrec)],\n+      if (scev_probably_wraps_p (type, base, step, at_stmt, loop,\n \t\t\t\t &dummy, &dummy))\n-\treturn fold_convert (type, chrec);\n+\tgoto failed_to_convert;\n \n-      step = convert_step (current_loops->parray[CHREC_VARIABLE (chrec)], type,\n-\t\t\t   CHREC_LEFT (chrec), CHREC_RIGHT (chrec), at_stmt);\n+      step = convert_step (loop, type, base, step, at_stmt);\n       if (!step)\n- \treturn fold_convert (type, chrec);\n+ \t{\n+\tfailed_to_convert:;\n+\t  if (dump_file && (dump_flags & TDF_DETAILS))\n+\t    {\n+\t      fprintf (dump_file, \"(failed conversion:\");\n+\t      fprintf (dump_file, \"\\n  type: \");\n+\t      print_generic_expr (dump_file, type, 0);\n+\t      fprintf (dump_file, \"\\n  base: \");\n+\t      print_generic_expr (dump_file, base, 0);\n+\t      fprintf (dump_file, \"\\n  step: \");\n+\t      print_generic_expr (dump_file, step, 0);\n+\t      fprintf (dump_file, \"\\n  estimated_nb_iterations: \");\n+\t      print_generic_expr (dump_file, loop->estimated_nb_iterations, 0);\n+\t      fprintf (dump_file, \"\\n)\\n\");\n+\t    }\n+\n+\t  /* Directly convert to \"don't know\": no worth dealing with\n+\t     difficult cases.  */\n+\t  return chrec_dont_know;\n+\t}\n \n       return build_polynomial_chrec (CHREC_VARIABLE (chrec),\n  \t\t\t\t     chrec_convert (type, CHREC_LEFT (chrec),"}, {"sha": "235edcdcf354e6e18a7b81278f5324a43b5f2426", "filename": "gcc/tree-scalar-evolution.c", "status": "modified", "additions": 53, "deletions": 3, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18aed06a02f80320c60d5cd2ce1fc30b5b676eb1/gcc%2Ftree-scalar-evolution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18aed06a02f80320c60d5cd2ce1fc30b5b676eb1/gcc%2Ftree-scalar-evolution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-scalar-evolution.c?ref=18aed06a02f80320c60d5cd2ce1fc30b5b676eb1", "patch": "@@ -1928,6 +1928,32 @@ set_instantiated_value (htab_t cache, tree version, tree val)\n   info->chrec = val;\n }\n \n+/* Return the closed_loop_phi node for VAR.  If there is none, return\n+   NULL_TREE.  */\n+\n+static tree\n+loop_closed_phi_def (tree var)\n+{\n+  struct loop *loop;\n+  edge exit;\n+  tree phi;\n+\n+  if (var == NULL_TREE\n+      || TREE_CODE (var) != SSA_NAME)\n+    return NULL_TREE;\n+\n+  loop = loop_containing_stmt (SSA_NAME_DEF_STMT (var));\n+  exit = loop->single_exit;\n+  if (!exit)\n+    return NULL_TREE;\n+\n+  for (phi = phi_nodes (exit->dest); phi; phi = PHI_CHAIN (phi))\n+    if (PHI_ARG_DEF_FROM_EDGE (phi, exit) == var)\n+      return PHI_RESULT (phi);\n+\n+  return NULL_TREE;\n+}\n+\n /* Analyze all the parameters of the chrec that were left under a symbolic form,\n    with respect to LOOP.  CHREC is the chrec to instantiate.  If\n    ALLOW_SUPERLOOP_CHRECS is true, replacing loop invariants with\n@@ -1993,9 +2019,26 @@ instantiate_parameters_1 (struct loop *loop, tree chrec,\n \t result again.  */\n       bitmap_set_bit (already_instantiated, SSA_NAME_VERSION (chrec));\n       res = analyze_scalar_evolution (def_loop, chrec);\n-      if (res != chrec_dont_know)\n+\n+      /* Don't instantiate loop-closed-ssa phi nodes.  */\n+      if (TREE_CODE (res) == SSA_NAME\n+\t  && (loop_containing_stmt (SSA_NAME_DEF_STMT (res)) == NULL\n+\t      || (loop_containing_stmt (SSA_NAME_DEF_STMT (res))->depth\n+\t\t  > def_loop->depth)))\n+\t{\n+\t  if (res == chrec)\n+\t    res = loop_closed_phi_def (chrec);\n+\t  else\n+\t    res = chrec;\n+\n+\t  if (res == NULL_TREE)\n+\t    res = chrec_dont_know;\n+\t}\n+\n+      else if (res != chrec_dont_know)\n \tres = instantiate_parameters_1 (loop, res, allow_superloop_chrecs,\n \t\t\t\t\tcache);\n+\n       bitmap_clear_bit (already_instantiated, SSA_NAME_VERSION (chrec));\n \n       /* Store the correct value to the cache.  */\n@@ -2652,7 +2695,8 @@ scev_const_prop (void)\n \t    continue;\n \n \t  /* Replace the uses of the name.  */\n-\t  replace_uses_by (name, ev);\n+\t  if (name != ev)\n+\t    replace_uses_by (name, ev);\n \n \t  if (!ssa_names_to_remove)\n \t    ssa_names_to_remove = BITMAP_ALLOC (NULL);\n@@ -2712,7 +2756,13 @@ scev_const_prop (void)\n \n \t  def = analyze_scalar_evolution_in_loop (ex_loop, ex_loop, def);\n \t  if (!tree_does_not_contain_chrecs (def)\n-\t      || chrec_contains_symbols_defined_in_loop (def, loop->num))\n+\t      || chrec_contains_symbols_defined_in_loop (def, loop->num)\n+\t      || def == PHI_RESULT (phi)\n+\t      || (TREE_CODE (def) == SSA_NAME\n+\t\t  && loop_containing_stmt (SSA_NAME_DEF_STMT (def))\n+\t\t  && loop_containing_stmt (phi)\n+\t\t  && loop_containing_stmt (SSA_NAME_DEF_STMT (def))\n+\t\t  == loop_containing_stmt (phi)))\n \t    continue;\n \n \t  /* If computing the expression is expensive, let it remain in"}, {"sha": "b86641871e5efbd38d419175a1992f0fa663be12", "filename": "gcc/tree-ssa-loop-niter.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18aed06a02f80320c60d5cd2ce1fc30b5b676eb1/gcc%2Ftree-ssa-loop-niter.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18aed06a02f80320c60d5cd2ce1fc30b5b676eb1/gcc%2Ftree-ssa-loop-niter.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-niter.c?ref=18aed06a02f80320c60d5cd2ce1fc30b5b676eb1", "patch": "@@ -1857,7 +1857,9 @@ scev_probably_wraps_p (tree type, tree base, tree step,\n \t}\n     }\n \n-  if (TREE_CODE (base) == REAL_CST\n+  if (chrec_contains_undetermined (base)\n+      || chrec_contains_undetermined (step)\n+      || TREE_CODE (base) == REAL_CST\n       || TREE_CODE (step) == REAL_CST)\n     {\n       *unknown_max = true;\n@@ -1978,7 +1980,13 @@ tree\n convert_step (struct loop *loop, tree new_type, tree base, tree step,\n \t      tree at_stmt)\n {\n-  tree base_type = TREE_TYPE (base);\n+  tree base_type;\n+\n+  if (chrec_contains_undetermined (base)\n+      || chrec_contains_undetermined (step))\n+    return NULL_TREE;\n+\n+  base_type = TREE_TYPE (base);\n \n   /* When not using wrapping arithmetic, signed types don't wrap.  */\n   if (!flag_wrapv && !TYPE_UNSIGNED (base_type))"}]}