{"sha": "4c118453c7c6db1e24145401abf70d286133de3f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGMxMTg0NTNjN2M2ZGIxZTI0MTQ1NDAxYWJmNzBkMjg2MTMzZGUzZg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@adacore.com", "date": "2021-04-07T09:11:57Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-04-28T09:37:53Z"}, "message": "[Ada] Fix the Sphinx configuration and port it to Python3\n\ngcc/ada/\n\n\t* .gitignore: New.\n\t* doc/share/conf.py: Add Python 3 compatibility.\n\t* doc/share/gnat.sty: Add missing file.", "tree": {"sha": "4e418194a4575fb22bde262c9aea30df9068679b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4e418194a4575fb22bde262c9aea30df9068679b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4c118453c7c6db1e24145401abf70d286133de3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c118453c7c6db1e24145401abf70d286133de3f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c118453c7c6db1e24145401abf70d286133de3f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c118453c7c6db1e24145401abf70d286133de3f/comments", "author": {"login": "ArnaudCharlet", "id": 30291825, "node_id": "MDQ6VXNlcjMwMjkxODI1", "avatar_url": "https://avatars.githubusercontent.com/u/30291825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArnaudCharlet", "html_url": "https://github.com/ArnaudCharlet", "followers_url": "https://api.github.com/users/ArnaudCharlet/followers", "following_url": "https://api.github.com/users/ArnaudCharlet/following{/other_user}", "gists_url": "https://api.github.com/users/ArnaudCharlet/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArnaudCharlet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArnaudCharlet/subscriptions", "organizations_url": "https://api.github.com/users/ArnaudCharlet/orgs", "repos_url": "https://api.github.com/users/ArnaudCharlet/repos", "events_url": "https://api.github.com/users/ArnaudCharlet/events{/privacy}", "received_events_url": "https://api.github.com/users/ArnaudCharlet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b4b66291f2086f56dc3a1d7df494f901cd0b63e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b4b66291f2086f56dc3a1d7df494f901cd0b63e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b4b66291f2086f56dc3a1d7df494f901cd0b63e"}], "stats": {"total": 106, "additions": 90, "deletions": 16}, "files": [{"sha": "36a0db08087fd9e0ef5b76f8880a4ed39e1ab78c", "filename": "gcc/ada/.gitignore", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c118453c7c6db1e24145401abf70d286133de3f/gcc%2Fada%2F.gitignore", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c118453c7c6db1e24145401abf70d286133de3f/gcc%2Fada%2F.gitignore", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2F.gitignore?ref=4c118453c7c6db1e24145401abf70d286133de3f", "patch": "@@ -0,0 +1,2 @@\n+# Sphinx build artifacts\n+doc/build"}, {"sha": "debd71688b895c9380e4a72fba6ec0f4117bbc0a", "filename": "gcc/ada/doc/share/conf.py", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c118453c7c6db1e24145401abf70d286133de3f/gcc%2Fada%2Fdoc%2Fshare%2Fconf.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c118453c7c6db1e24145401abf70d286133de3f/gcc%2Fada%2Fdoc%2Fshare%2Fconf.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fshare%2Fconf.py?ref=4c118453c7c6db1e24145401abf70d286133de3f", "patch": "@@ -37,45 +37,45 @@ def get_copyright():\n \n \n def get_gnat_version():\n-    m = re.search(r'Gnat_Static_Version_String : ' +\n-                  r'constant String := \"([^\\(\\)]+)\\(.*\\)?\";',\n+    m = re.search(br'Gnat_Static_Version_String : ' +\n+                  br'constant String := \"([^\\(\\)]+)\\(.*\\)?\";',\n                   gnatvsn_content)\n     if m:\n-        return m.group(1).strip()\n+        return m.group(1).strip().decode()\n     else:\n         if texi_fsf and os.path.exists(basever):\n             return ''\n \n         try:\n-            with open(basever, 'rb') as fd:\n+            with open(basever) as fd:\n                 return fd.read()\n-        except:\n+        except Exception:\n             pass\n \n-    print 'cannot find GNAT version in gnatvsn.ads or in ' + basever\n+    print('cannot find GNAT version in gnatvsn.ads or in ' + basever)\n     sys.exit(1)\n \n \n def get_gnat_build_type():\n-    m = re.search(r'Build_Type : constant Gnat_Build_Type := (.+);',\n+    m = re.search(br'Build_Type : constant Gnat_Build_Type := (.+);',\n                   gnatvsn_content)\n     if m:\n-        return {'Gnatpro': 'PRO',\n-                'FSF': 'FSF',\n-                'GPL': 'GPL'}[m.group(1).strip()]\n+        return {b'Gnatpro': 'PRO',\n+                b'FSF': 'FSF',\n+                b'GPL': 'GPL'}[m.group(1).strip()]\n     else:\n-        print 'cannot compute GNAT build type'\n+        print('cannot compute GNAT build type')\n         sys.exit(1)\n \n \n # First retrieve the name of the documentation we are building\n doc_name = os.environ.get('DOC_NAME', None)\n if doc_name is None:\n-    print 'DOC_NAME environment variable should be set'\n+    print('DOC_NAME environment variable should be set')\n     sys.exit(1)\n \n if doc_name not in DOCS:\n-    print '%s is not a valid documentation name' % doc_name\n+    print('%s is not a valid documentation name' % doc_name)\n     sys.exit(1)\n \n \n@@ -84,11 +84,11 @@ def get_gnat_build_type():\n for d in os.listdir(root_source_dir):\n     if d not in ('share', doc_name, doc_name + '.rst'):\n         exclude_patterns.append(d)\n-        print 'ignoring %s' % d\n+        print('ignoring %s' % d)\n \n if doc_name == 'gnat_rm':\n     exclude_patterns.append('share/gnat_project_manager.rst')\n-    print 'ignoring share/gnat_project_manager.rst'\n+    print('ignoring share/gnat_project_manager.rst')\n \n extensions = []\n templates_path = ['_templates']\n@@ -103,7 +103,7 @@ def get_gnat_build_type():\n version = get_gnat_version()\n release = get_gnat_version()\n \n-pygments_style = 'sphinx'\n+pygments_style = None\n tags.add(get_gnat_build_type())\n html_theme = 'sphinxdoc'\n if os.path.isfile('adacore_transparent.png'):"}, {"sha": "1a152fb2e0aeddbb53488fb5bcc79c8e880c5a79", "filename": "gcc/ada/doc/share/gnat.sty", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c118453c7c6db1e24145401abf70d286133de3f/gcc%2Fada%2Fdoc%2Fshare%2Fgnat.sty", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c118453c7c6db1e24145401abf70d286133de3f/gcc%2Fada%2Fdoc%2Fshare%2Fgnat.sty", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fshare%2Fgnat.sty?ref=4c118453c7c6db1e24145401abf70d286133de3f", "patch": "@@ -0,0 +1,72 @@\n+% Needed to generate footers with total number of pages\n+\\RequirePackage{lastpage}\n+\n+% AdaCore specific maketitle\n+\\renewcommand{\\maketitle}{%\n+  \\begin{titlepage}%\n+    \\let\\footnotesize\\small\n+    \\let\\footnoterule\\relax\n+    \\rule{\\textwidth}{1pt}%\n+    \\ifsphinxpdfoutput\n+      \\begingroup\n+      % These \\defs are required to deal with multi-line authors; it\n+      % changes \\\\ to ', ' (comma-space), making it pass muster for\n+      % generating document info in the PDF file.\n+      \\def\\\\{, }\n+      \\def\\and{and }\n+      \\pdfinfo{\n+        /Author (\\@author)\n+        /Title (\\@title)\n+      }\n+      \\endgroup\n+    \\fi\n+    \\begin{flushright}%\n+      \\sphinxlogo%\n+      {\\rm\\Huge \\@title \\par}%\n+      {\\em\\LARGE\\py@HeaderFamily \\py@release\\releaseinfo \\par}\n+      \\vfill\n+      {\\LARGE\\py@HeaderFamily\n+        \\par}\n+      \\vfill\\vfill\n+      {\\large\n+       \\@date \\par\n+       \\vfill\n+       \\py@authoraddress \\par\n+      }%\n+    \\end{flushright}%\\par\n+    \\@thanks\n+  \\end{titlepage}%\n+  \\cleardoublepage%\n+  \\setcounter{footnote}{0}%\n+  \\let\\thanks\\relax\\let\\maketitle\\relax\n+}\n+\n+% AdaCore specific headers/footers\n+% Redefine the 'normal' header/footer style when using \"fancyhdr\" package:\n+\\@ifundefined{fancyhf}{}{\n+  % Use \\pagestyle{normal} as the primary pagestyle for text.\n+  \\fancypagestyle{normal}{\n+    \\fancyhf{}\n+    \\fancyfoot[LE,RO]{{\\py@HeaderFamily\\thepage\\ of \\pageref*{LastPage}}}\n+    \\fancyfoot[LO]{{\\py@HeaderFamily\\nouppercase{\\rightmark}}}\n+    \\fancyfoot[RE]{{\\py@HeaderFamily\\nouppercase{\\leftmark}}}\n+    \\fancyhead[LE,RO]{{\\py@HeaderFamily \\@title, \\py@release}}\n+    \\renewcommand{\\headrulewidth}{0.4pt}\n+    \\renewcommand{\\footrulewidth}{0.4pt}\n+    % define chaptermark with \\@chappos when \\@chappos is available for Japanese\n+    \\ifx\\@chappos\\undefined\\else\n+      \\def\\chaptermark##1{\\markboth{\\@chapapp\\space\\thechapter\\space\\@chappos\\space ##1}{}}\n+    \\fi\n+  }\n+  % Update the plain style so we get the page number & footer line,\n+  % but not a chapter or section title.  This is to keep the first\n+  % page of a chapter and the blank page between chapters `clean.'\n+  \\fancypagestyle{plain}{\n+    \\fancyhf{}\n+    \\fancyfoot[LE,RO]{{\\py@HeaderFamily\\thepage\\ of \\pageref*{LastPage}}}\n+    \\fancyfoot[LO,RE]{{\\py@HeaderFamily \\GNATFullDocumentName}}\n+    \\fancyhead[LE,RO]{{\\py@HeaderFamily \\@title\\ \\GNATVersion}}\n+    \\renewcommand{\\headrulewidth}{0.0pt}\n+    \\renewcommand{\\footrulewidth}{0.4pt}\n+  }\n+}"}]}