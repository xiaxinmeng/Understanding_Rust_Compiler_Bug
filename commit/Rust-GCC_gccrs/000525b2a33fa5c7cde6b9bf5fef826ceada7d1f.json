{"sha": "000525b2a33fa5c7cde6b9bf5fef826ceada7d1f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDAwNTI1YjJhMzNmYTVjN2NkZTZiOWJmNWZlZjgyNmNlYWRhN2QxZg==", "commit": {"author": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2014-12-30T17:26:18Z"}, "committer": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2014-12-30T17:26:18Z"}, "message": "re PR target/53987 ([SH] Unnecessary zero-extensions)\n\ngcc/testsuite/\n\tPR target/53987\n\t* gcc.target/sh/pr53987-1.c: New.\n\nFrom-SVN: r219110", "tree": {"sha": "726fee498c25cdf0550c2ca908f01d5139332dd0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/726fee498c25cdf0550c2ca908f01d5139332dd0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/000525b2a33fa5c7cde6b9bf5fef826ceada7d1f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/000525b2a33fa5c7cde6b9bf5fef826ceada7d1f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/000525b2a33fa5c7cde6b9bf5fef826ceada7d1f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/000525b2a33fa5c7cde6b9bf5fef826ceada7d1f/comments", "author": null, "committer": null, "parents": [{"sha": "7aa358f2fd55a9483c88fa22fea2f587a3b71995", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7aa358f2fd55a9483c88fa22fea2f587a3b71995", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7aa358f2fd55a9483c88fa22fea2f587a3b71995"}], "stats": {"total": 71, "additions": 71, "deletions": 0}, "files": [{"sha": "f72bb697c96565f15ed15eadd617951364e0f05a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/000525b2a33fa5c7cde6b9bf5fef826ceada7d1f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/000525b2a33fa5c7cde6b9bf5fef826ceada7d1f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=000525b2a33fa5c7cde6b9bf5fef826ceada7d1f", "patch": "@@ -1,3 +1,8 @@\n+2014-12-30  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\tPR target/53987\n+\t* gcc.target/sh/pr53987-1.c: New.\n+\n 2014-12-30  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* gcc.dg/ipa/inline-7.c: New testcase."}, {"sha": "a0394ac32d2024942e73cd15ca8e90e3569ac182", "filename": "gcc/testsuite/gcc.target/sh/pr53987-1.c", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/000525b2a33fa5c7cde6b9bf5fef826ceada7d1f/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr53987-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/000525b2a33fa5c7cde6b9bf5fef826ceada7d1f/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr53987-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr53987-1.c?ref=000525b2a33fa5c7cde6b9bf5fef826ceada7d1f", "patch": "@@ -0,0 +1,66 @@\n+/* Check that no unnecessary sign/zero extensions are being emitted.  */\n+/* { dg-do compile }  */\n+/* { dg-options \"-O2\" }  */\n+/* { dg-final { scan-assembler-times \"extu.b\" 2 } }  */\n+/* { dg-final { scan-assembler-not \"extu.w\" } }  */\n+/* { dg-final { scan-assembler-not \"exts.b\" } }  */\n+/* { dg-final { scan-assembler-not \"exts.w\" } }  */\n+/* { dg-final { scan-assembler-not \"movu\" } }  */\n+/* { dg-final { scan-assembler-not \"tst\\t#255\" { xfail *-*-*} } }  */\n+\n+int\n+test_00 (unsigned char* x, char* xx, int y, int z)\n+{\n+  /* If x[0] / b is treated as a non-extended QImode subreg the zero\n+     test will be a QImode subreg test, which is supposed to ignore\n+     bits[31:8].  However, since the QImode memory load always sign\n+     extends, it's also OK to test all the bits.  Thus we don't want\n+     to see a tst #255 here.  */\n+  int b = x[0];\n+  xx[0] = b;\n+  return b ? y : z;\n+}\n+\n+int\n+test_01 (unsigned char a, unsigned char b, int c, int d)\n+{\n+  /* 2x extu.b  */\n+  if (a == b)\n+    return c;\n+  return d;\n+}\n+\n+int\n+test_02 (unsigned char* a, unsigned char* b, int c, int d)\n+{\n+  /* 2x mov.b  */\n+  if (*a != 0 && *b == 0)\n+    return c;\n+  return d;\n+}\n+\n+int\n+test_03 (unsigned char* a)\n+{\n+  /* 1x mov.b  */\n+  return *a == 0;\n+}\n+\n+int\n+test_04 (unsigned short* a)\n+{\n+  /* 1x mov.w  */\n+  return *a == 0;\n+}\n+\n+unsigned char test_05_var;\n+int\n+test_05 (int a, int b, int c, int d)\n+{\n+  /* Must not see sign/zero extension here.  */\n+  test_05_var = (a == b) | (b == c);\n+  if (test_05_var)\n+    return d;\n+\n+  return 0;\n+}"}]}