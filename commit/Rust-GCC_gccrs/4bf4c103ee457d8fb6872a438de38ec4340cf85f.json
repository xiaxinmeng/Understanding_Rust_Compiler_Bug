{"sha": "4bf4c103ee457d8fb6872a438de38ec4340cf85f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGJmNGMxMDNlZTQ1N2Q4ZmI2ODcyYTQzOGRlMzhlYzQzNDBjZjg1Zg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-08-29T09:22:57Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-08-29T09:22:57Z"}, "message": "re PR target/91560 (Try harder for AVX non-AVX2 cross-lane permutations)\n\n\tPR target/91560\n\t* config/i386/i386-expand.c (expand_vec_perm_movs,\n\texpand_vec_perm_blend, expand_vec_perm_vpermil,\n\texpand_vec_perm_pshufb, expand_vec_perm_1,\n\texpand_vec_perm_pshuflw_pshufhw, expand_vec_perm_palignr,\n\texpand_vec_perm_interleave2, expand_vec_perm_vpermq_perm_1,\n\texpand_vec_perm_vperm2f128, expand_vec_perm_interleave3,\n\texpand_vec_perm_vperm2f128_vblend, expand_vec_perm_2vperm2f128_vshuf,\n\texpand_vec_perm_even_odd, expand_vec_perm_broadcast): Adjust function\n\tcomments - replace ix86_expand_vec_perm_builtin_1 with\n\tix86_expand_vec_perm_const_1.\n\t(expand_vec_perm2_vperm2f128_vblend): New function.\n\t(ix86_expand_vec_perm_const_1): New forward declaration.  Call\n\texpand_vec_perm2_vperm2f128_vblend as last resort.\n\t(canonicalize_perm): Formatting fix.\n\n\t* gcc.dg/torture/vshuf-8.inc: Add two further permutations.\n\nFrom-SVN: r275027", "tree": {"sha": "22e6169685a0e1b219269b113b7c1f184fb54836", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/22e6169685a0e1b219269b113b7c1f184fb54836"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4bf4c103ee457d8fb6872a438de38ec4340cf85f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4bf4c103ee457d8fb6872a438de38ec4340cf85f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4bf4c103ee457d8fb6872a438de38ec4340cf85f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4bf4c103ee457d8fb6872a438de38ec4340cf85f/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1d9cd701ec31686dbd037e0fe264c8738d993e41", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d9cd701ec31686dbd037e0fe264c8738d993e41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d9cd701ec31686dbd037e0fe264c8738d993e41"}], "stats": {"total": 163, "additions": 144, "deletions": 19}, "files": [{"sha": "9deb5b0eba3d41e83869975d81652e173adc68c0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bf4c103ee457d8fb6872a438de38ec4340cf85f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bf4c103ee457d8fb6872a438de38ec4340cf85f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4bf4c103ee457d8fb6872a438de38ec4340cf85f", "patch": "@@ -1,5 +1,21 @@\n 2019-08-29  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR target/91560\n+\t* config/i386/i386-expand.c (expand_vec_perm_movs,\n+\texpand_vec_perm_blend, expand_vec_perm_vpermil,\n+\texpand_vec_perm_pshufb, expand_vec_perm_1,\n+\texpand_vec_perm_pshuflw_pshufhw, expand_vec_perm_palignr,\n+\texpand_vec_perm_interleave2, expand_vec_perm_vpermq_perm_1,\n+\texpand_vec_perm_vperm2f128, expand_vec_perm_interleave3,\n+\texpand_vec_perm_vperm2f128_vblend, expand_vec_perm_2vperm2f128_vshuf,\n+\texpand_vec_perm_even_odd, expand_vec_perm_broadcast): Adjust function\n+\tcomments - replace ix86_expand_vec_perm_builtin_1 with\n+\tix86_expand_vec_perm_const_1.\n+\t(expand_vec_perm2_vperm2f128_vblend): New function.\n+\t(ix86_expand_vec_perm_const_1): New forward declaration.  Call\n+\texpand_vec_perm2_vperm2f128_vblend as last resort.\n+\t(canonicalize_perm): Formatting fix.\n+\n \tPR tree-optimization/91351\n \t* tree-cfg.c (generate_range_test): Use range_check_type instead of\n \tunsigned_type_for."}, {"sha": "ec50de297eefd478a3ec17af540aef6be404e282", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 122, "deletions": 18, "changes": 140, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bf4c103ee457d8fb6872a438de38ec4340cf85f/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bf4c103ee457d8fb6872a438de38ec4340cf85f/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=4bf4c103ee457d8fb6872a438de38ec4340cf85f", "patch": "@@ -16372,7 +16372,7 @@ expand_vselect_vconcat (rtx target, rtx op0, rtx op1,\n   return ok;\n }\n \n-/* A subroutine of ix86_expand_vec_perm_builtin_1.  Try to implement D\n+/* A subroutine of ix86_expand_vec_perm_const_1.  Try to implement D\n    using movss or movsd.  */\n static bool\n expand_vec_perm_movs (struct expand_vec_perm_d *d)\n@@ -16408,7 +16408,7 @@ expand_vec_perm_movs (struct expand_vec_perm_d *d)\n   return true;\n }\n \n-/* A subroutine of ix86_expand_vec_perm_builtin_1.  Try to implement D\n+/* A subroutine of ix86_expand_vec_perm_const_1.  Try to implement D\n    in terms of blendp[sd] / pblendw / pblendvb / vpblendd.  */\n \n static bool\n@@ -16633,7 +16633,7 @@ expand_vec_perm_blend (struct expand_vec_perm_d *d)\n   return true;\n }\n \n-/* A subroutine of ix86_expand_vec_perm_builtin_1.  Try to implement D\n+/* A subroutine of ix86_expand_vec_perm_const_1.  Try to implement D\n    in terms of the variable form of vpermilps.\n \n    Note that we will have already failed the immediate input vpermilps,\n@@ -16709,7 +16709,7 @@ valid_perm_using_mode_p (machine_mode vmode, struct expand_vec_perm_d *d)\n   return true;\n }\n \n-/* A subroutine of ix86_expand_vec_perm_builtin_1.  Try to implement D\n+/* A subroutine of ix86_expand_vec_perm_const_1.  Try to implement D\n    in terms of pshufb, vpperm, vpermq, vpermd, vpermps or vperm2i128.  */\n \n static bool\n@@ -17026,7 +17026,7 @@ ix86_expand_vec_one_operand_perm_avx512 (struct expand_vec_perm_d *d)\n \n static bool expand_vec_perm_palignr (struct expand_vec_perm_d *d, bool);\n \n-/* A subroutine of ix86_expand_vec_perm_builtin_1.  Try to instantiate D\n+/* A subroutine of ix86_expand_vec_perm_const_1.  Try to instantiate D\n    in a single instruction.  */\n \n static bool\n@@ -17216,7 +17216,7 @@ expand_vec_perm_1 (struct expand_vec_perm_d *d)\n   return false;\n }\n \n-/* A subroutine of ix86_expand_vec_perm_builtin_1.  Try to implement D\n+/* A subroutine of ix86_expand_vec_perm_const_1.  Try to implement D\n    in terms of a pair of pshuflw + pshufhw instructions.  */\n \n static bool\n@@ -17257,7 +17257,7 @@ expand_vec_perm_pshuflw_pshufhw (struct expand_vec_perm_d *d)\n   return true;\n }\n \n-/* A subroutine of ix86_expand_vec_perm_builtin_1.  Try to simplify\n+/* A subroutine of ix86_expand_vec_perm_const_1.  Try to simplify\n    the permutation using the SSSE3 palignr instruction.  This succeeds\n    when all of the elements in PERM fit within one vector and we merely\n    need to shift them down so that a single vector permutation has a\n@@ -17474,7 +17474,7 @@ expand_vec_perm_pblendv (struct expand_vec_perm_d *d)\n \n static bool expand_vec_perm_interleave3 (struct expand_vec_perm_d *d);\n \n-/* A subroutine of ix86_expand_vec_perm_builtin_1.  Try to simplify\n+/* A subroutine of ix86_expand_vec_perm_const_1.  Try to simplify\n    a two vector permutation into a single vector permutation by using\n    an interleave operation to merge the vectors.  */\n \n@@ -17752,7 +17752,7 @@ expand_vec_perm_interleave2 (struct expand_vec_perm_d *d)\n   return true;\n }\n \n-/* A subroutine of ix86_expand_vec_perm_builtin_1.  Try to simplify\n+/* A subroutine of ix86_expand_vec_perm_const_1.  Try to simplify\n    a single vector cross-lane permutation into vpermq followed\n    by any of the single insn permutations.  */\n \n@@ -17833,7 +17833,7 @@ expand_vec_perm_vpermq_perm_1 (struct expand_vec_perm_d *d)\n \n static bool canonicalize_perm (struct expand_vec_perm_d *d);\n \n-/* A subroutine of ix86_expand_vec_perm_builtin_1.  Try to expand\n+/* A subroutine of ix86_expand_vec_perm_const_1.  Try to expand\n    a vector permutation using two instructions, vperm2f128 resp.\n    vperm2i128 followed by any single in-lane permutation.  */\n \n@@ -17950,7 +17950,7 @@ expand_vec_perm_vperm2f128 (struct expand_vec_perm_d *d)\n   return false;\n }\n \n-/* A subroutine of ix86_expand_vec_perm_builtin_1.  Try to simplify\n+/* A subroutine of ix86_expand_vec_perm_const_1.  Try to simplify\n    a two vector permutation using 2 intra-lane interleave insns\n    and cross-lane shuffle for 32-byte vectors.  */\n \n@@ -18026,7 +18026,7 @@ expand_vec_perm_interleave3 (struct expand_vec_perm_d *d)\n   return true;\n }\n \n-/* A subroutine of ix86_expand_vec_perm_builtin_1.  Try to implement\n+/* A subroutine of ix86_expand_vec_perm_const_1.  Try to implement\n    a single vector permutation using a single intra-lane vector\n    permutation, vperm2f128 swapping the lanes and vblend* insn blending\n    the non-swapped and swapped vectors together.  */\n@@ -18094,7 +18094,7 @@ expand_vec_perm_vperm2f128_vblend (struct expand_vec_perm_d *d)\n   return true;\n }\n \n-/* A subroutine of ix86_expand_vec_perm_builtin_1.  Implement a V4DF\n+/* A subroutine of ix86_expand_vec_perm_const_1.  Implement a V4DF\n    permutation using two vperm2f128, followed by a vshufpd insn blending\n    the two vectors together.  */\n \n@@ -18145,6 +18145,106 @@ expand_vec_perm_2vperm2f128_vshuf (struct expand_vec_perm_d *d)\n   return true;\n }\n \n+static bool ix86_expand_vec_perm_const_1 (struct expand_vec_perm_d *);\n+\n+/* A subroutine of ix86_expand_vec_perm_const_1.  Try to implement\n+   a two vector permutation using two intra-lane vector\n+   permutations, vperm2f128 swapping the lanes and vblend* insn blending\n+   the non-swapped and swapped vectors together.  */\n+\n+static bool\n+expand_vec_perm2_vperm2f128_vblend (struct expand_vec_perm_d *d)\n+{\n+  struct expand_vec_perm_d dfirst, dsecond, dthird;\n+  unsigned i, j, msk, nelt = d->nelt, nelt2 = nelt / 2, which1 = 0, which2 = 0;\n+  rtx_insn *seq1, *seq2;\n+  bool ok;\n+  rtx (*blend) (rtx, rtx, rtx, rtx) = NULL;\n+\n+  if (!TARGET_AVX\n+      || TARGET_AVX2\n+      || (d->vmode != V8SFmode && d->vmode != V4DFmode)\n+      || d->one_operand_p)\n+    return false;\n+\n+  dfirst = *d;\n+  dsecond = *d;\n+  for (i = 0; i < nelt; i++)\n+    {\n+      dfirst.perm[i] = 0xff;\n+      dsecond.perm[i] = 0xff;\n+    }\n+  for (i = 0, msk = 0; i < nelt; i++)\n+    {\n+      j = (d->perm[i] & nelt2) ? i | nelt2 : i & ~nelt2;\n+      if (j == i)\n+\t{\n+\t  dfirst.perm[j] = d->perm[i];\n+\t  which1 |= (d->perm[i] < nelt ? 1 : 2);\n+\t}\n+      else\n+\t{\n+\t  dsecond.perm[j] = d->perm[i];\n+\t  which2 |= (d->perm[i] < nelt ? 1 : 2);\n+\t  msk |= (1U << i);\n+\t}\n+    }\n+  if (msk == 0 || msk == (1U << nelt) - 1)\n+    return false;\n+\n+  if (!d->testing_p)\n+    {\n+      dfirst.target = gen_reg_rtx (dfirst.vmode);\n+      dsecond.target = gen_reg_rtx (dsecond.vmode);\n+    }\n+\n+  for (i = 0; i < nelt; i++)\n+    {\n+      if (dfirst.perm[i] == 0xff)\n+\tdfirst.perm[i] = (which1 == 2 ? i + nelt : i);\n+      if (dsecond.perm[i] == 0xff)\n+\tdsecond.perm[i] = (which2 == 2 ? i + nelt : i);\n+    }\n+  canonicalize_perm (&dfirst);\n+  start_sequence ();\n+  ok = ix86_expand_vec_perm_const_1 (&dfirst);\n+  seq1 = get_insns ();\n+  end_sequence ();\n+\n+  if (!ok)\n+    return false;\n+\n+  canonicalize_perm (&dsecond);\n+  start_sequence ();\n+  ok = ix86_expand_vec_perm_const_1 (&dsecond);\n+  seq2 = get_insns ();\n+  end_sequence ();\n+\n+  if (!ok)\n+    return false;\n+\n+  if (d->testing_p)\n+    return true;\n+\n+  emit_insn (seq1);\n+  emit_insn (seq2);\n+\n+  dthird = *d;\n+  dthird.op0 = dsecond.target;\n+  dthird.op1 = dsecond.target;\n+  dthird.one_operand_p = true;\n+  dthird.target = gen_reg_rtx (dthird.vmode);\n+  for (i = 0; i < nelt; i++)\n+    dthird.perm[i] = i ^ nelt2;\n+\n+  ok = expand_vec_perm_1 (&dthird);\n+  gcc_assert (ok);\n+\n+  blend = d->vmode == V8SFmode ? gen_avx_blendps256 : gen_avx_blendpd256;\n+  emit_insn (blend (d->target, dfirst.target, dthird.target, GEN_INT (msk)));\n+  return true;\n+}\n+\n /* A subroutine of expand_vec_perm_even_odd_1.  Implement the double-word\n    permutation with two pshufb insns and an ior.  We should have already\n    failed all two instruction sequences.  */\n@@ -18534,7 +18634,7 @@ expand_vec_perm_even_odd_trunc (struct expand_vec_perm_d *d)\n   return true;\n }\n \n-/* A subroutine of ix86_expand_vec_perm_builtin_1.  Implement extract-even\n+/* A subroutine of ix86_expand_vec_perm_const_1.  Implement extract-even\n    and extract-odd permutations.  */\n \n static bool\n@@ -18743,7 +18843,7 @@ expand_vec_perm_even_odd_1 (struct expand_vec_perm_d *d, unsigned odd)\n   return true;\n }\n \n-/* A subroutine of ix86_expand_vec_perm_builtin_1.  Pattern match\n+/* A subroutine of ix86_expand_vec_perm_const_1.  Pattern match\n    extract-even and extract-odd permutations.  */\n \n static bool\n@@ -18762,7 +18862,7 @@ expand_vec_perm_even_odd (struct expand_vec_perm_d *d)\n   return expand_vec_perm_even_odd_1 (d, odd);\n }\n \n-/* A subroutine of ix86_expand_vec_perm_builtin_1.  Implement broadcast\n+/* A subroutine of ix86_expand_vec_perm_const_1.  Implement broadcast\n    permutations.  We assume that expand_vec_perm_1 has already failed.  */\n \n static bool\n@@ -18841,7 +18941,7 @@ expand_vec_perm_broadcast_1 (struct expand_vec_perm_d *d)\n     }\n }\n \n-/* A subroutine of ix86_expand_vec_perm_builtin_1.  Pattern match\n+/* A subroutine of ix86_expand_vec_perm_const_1.  Pattern match\n    broadcast permutations.  */\n \n static bool\n@@ -19137,6 +19237,10 @@ ix86_expand_vec_perm_const_1 (struct expand_vec_perm_d *d)\n       return true;\n     }\n \n+  /* Even longer, including recursion to ix86_expand_vec_perm_const_1.  */\n+  if (expand_vec_perm2_vperm2f128_vblend (d))\n+    return true;\n+\n   return false;\n }\n \n@@ -19149,7 +19253,7 @@ canonicalize_perm (struct expand_vec_perm_d *d)\n   int i, which, nelt = d->nelt;\n \n   for (i = which = 0; i < nelt; ++i)\n-      which |= (d->perm[i] < nelt ? 1 : 2);\n+    which |= (d->perm[i] < nelt ? 1 : 2);\n \n   d->one_operand_p = true;\n   switch (which)"}, {"sha": "02734ee90ceb692af9d37b5e3d118a8807012a4a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bf4c103ee457d8fb6872a438de38ec4340cf85f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bf4c103ee457d8fb6872a438de38ec4340cf85f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4bf4c103ee457d8fb6872a438de38ec4340cf85f", "patch": "@@ -1,5 +1,8 @@\n 2019-08-29  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR target/91560\n+\t* gcc.dg/torture/vshuf-8.inc: Add two further permutations.\n+\n \tPR tree-optimization/91351\n \t* g++.dg/opt/pr91351.C: New test.\n "}, {"sha": "de358f36f7b6929c9e7a98b6ab8fa47255b3d5ea", "filename": "gcc/testsuite/gcc.dg/torture/vshuf-8.inc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bf4c103ee457d8fb6872a438de38ec4340cf85f/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fvshuf-8.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bf4c103ee457d8fb6872a438de38ec4340cf85f/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fvshuf-8.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fvshuf-8.inc?ref=4bf4c103ee457d8fb6872a438de38ec4340cf85f", "patch": "@@ -25,7 +25,9 @@ T (21,\t4, 12, 5, 13, 6, 14, 7, 15) \\\n T (22,\t1, 2, 3, 4, 5, 6, 7, 0) \\\n T (23,\t6, 5, 4, 3, 2, 1, 0, 7) \\\n T (24,\t0, 1, 2, 3, 8, 9, 10, 11) \\\n-T (25,\t0, 1, 2, 3, 12, 13, 14, 15)\n+T (25,\t0, 1, 2, 3, 12, 13, 14, 15) \\\n+T (26,\t0, 1, 8, 9, 10, 11, 12, 13) \\\n+T (27,\t0, 8, 9, 10, 11, 12, 13, 14)\n #define EXPTESTS \\\n T (116,\t9, 3, 9, 4, 7, 0, 0, 6) \\\n T (117,\t4, 14, 12, 8, 9, 6, 0, 10) \\"}]}