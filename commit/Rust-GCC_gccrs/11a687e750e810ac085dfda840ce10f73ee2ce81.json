{"sha": "11a687e750e810ac085dfda840ce10f73ee2ce81", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTFhNjg3ZTc1MGU4MTBhYzA4NWRmZGE4NDBjZTEwZjczZWUyY2U4MQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2012-06-09T16:27:52Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2012-06-09T16:27:52Z"}, "message": "re PR c++/53602 (Libre Office causes an internal compiler error)\n\nPR c++/53602\n        * cfgcleanup.c (execute_jump): Rename from rest_of_handle_jump2.\n        (pass_jump): Rename from pass_jump2.\n        (execute_jump2, pass_jump2): New.\n        * combine-stack-adj.c (rest_of_handle_stack_adjustments): Don't\n        perform cfg cleanup here.  Move the test of PUSH_ROUNDING\n        and ACCUMULATE_OUTGOING_ARGS test...\n        (gate_handle_stack_adjustments): ... here.\n        * passes.c (init_optimization_passes): Update for pass_jump2 rename.\n        Place new pass_jump2 after pass_stack_adjustments.\n        * tree-pass.h (pass_jump): Declare.\n\nFrom-SVN: r188360", "tree": {"sha": "55f5584472a05a0e58bdd1b98b62d88b9b689b18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/55f5584472a05a0e58bdd1b98b62d88b9b689b18"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/11a687e750e810ac085dfda840ce10f73ee2ce81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11a687e750e810ac085dfda840ce10f73ee2ce81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11a687e750e810ac085dfda840ce10f73ee2ce81", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11a687e750e810ac085dfda840ce10f73ee2ce81/comments", "author": null, "committer": null, "parents": [{"sha": "aef2b1d1f03eacdad6ec5fac97a04eea7cc68174", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aef2b1d1f03eacdad6ec5fac97a04eea7cc68174", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aef2b1d1f03eacdad6ec5fac97a04eea7cc68174"}], "stats": {"total": 94, "additions": 66, "deletions": 28}, "files": [{"sha": "1342b2df648931459fc21a30f10040a02e9dc98b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11a687e750e810ac085dfda840ce10f73ee2ce81/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11a687e750e810ac085dfda840ce10f73ee2ce81/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=11a687e750e810ac085dfda840ce10f73ee2ce81", "patch": "@@ -1,3 +1,17 @@\n+2012-06-09  Richard Henderson  <rth@redhat.com>\n+\n+\tPR c++/53602\n+\t* cfgcleanup.c (execute_jump): Rename from rest_of_handle_jump2.\n+\t(pass_jump): Rename from pass_jump2.\n+\t(execute_jump2, pass_jump2): New.\n+\t* combine-stack-adj.c (rest_of_handle_stack_adjustments): Don't\n+\tperform cfg cleanup here.  Move the test of PUSH_ROUNDING\n+\tand ACCUMULATE_OUTGOING_ARGS test...\n+\t(gate_handle_stack_adjustments): ... here.\n+\t* passes.c (init_optimization_passes): Update for pass_jump2 rename.\n+\tPlace new pass_jump2 after pass_stack_adjustments.\n+\t* tree-pass.h (pass_jump): Declare.\n+\n 2012-06-09  Kenneth Zadeck <zadeck@naturalbridge.com>\n \n \t* simplify-rtx.c (simplify_const_binary_operation): Fixed shift"}, {"sha": "1aa4cbb7eae4c443acfaa773908091da5e8920e2", "filename": "gcc/cfgcleanup.c", "status": "modified", "additions": 38, "deletions": 13, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11a687e750e810ac085dfda840ce10f73ee2ce81/gcc%2Fcfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11a687e750e810ac085dfda840ce10f73ee2ce81/gcc%2Fcfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgcleanup.c?ref=11a687e750e810ac085dfda840ce10f73ee2ce81", "patch": "@@ -2990,7 +2990,7 @@ cleanup_cfg (int mode)\n }\n \f\n static unsigned int\n-rest_of_handle_jump2 (void)\n+execute_jump (void)\n {\n   delete_trivially_dead_insns (get_insns (), max_reg_num ());\n   if (dump_file)\n@@ -3000,22 +3000,47 @@ rest_of_handle_jump2 (void)\n   return 0;\n }\n \n+struct rtl_opt_pass pass_jump =\n+{\n+ {\n+  RTL_PASS,\n+  \"jump\",\t\t\t\t/* name */\n+  NULL,\t\t\t\t\t/* gate */\n+  execute_jump,\t\t\t\t/* execute */\n+  NULL,\t\t\t\t\t/* sub */\n+  NULL,\t\t\t\t\t/* next */\n+  0,\t\t\t\t\t/* static_pass_number */\n+  TV_JUMP,\t\t\t\t/* tv_id */\n+  0,\t\t\t\t\t/* properties_required */\n+  0,\t\t\t\t\t/* properties_provided */\n+  0,\t\t\t\t\t/* properties_destroyed */\n+  TODO_ggc_collect,\t\t\t/* todo_flags_start */\n+  TODO_verify_rtl_sharing,\t\t/* todo_flags_finish */\n+ }\n+};\n+\f\n+static unsigned int\n+execute_jump2 (void)\n+{\n+  cleanup_cfg (flag_crossjumping ? CLEANUP_CROSSJUMP : 0);\n+  return 0;\n+}\n \n struct rtl_opt_pass pass_jump2 =\n {\n  {\n   RTL_PASS,\n-  \"jump\",                               /* name */\n-  NULL,                                 /* gate */\n-  rest_of_handle_jump2,\t\t\t/* execute */\n-  NULL,                                 /* sub */\n-  NULL,                                 /* next */\n-  0,                                    /* static_pass_number */\n-  TV_JUMP,                              /* tv_id */\n-  0,                                    /* properties_required */\n-  0,                                    /* properties_provided */\n-  0,                                    /* properties_destroyed */\n-  TODO_ggc_collect,                     /* todo_flags_start */\n-  TODO_verify_rtl_sharing,              /* todo_flags_finish */\n+  \"jump2\",\t\t\t\t/* name */\n+  NULL,\t\t\t\t\t/* gate */\n+  execute_jump2,\t\t\t/* execute */\n+  NULL,\t\t\t\t\t/* sub */\n+  NULL,\t\t\t\t\t/* next */\n+  0,\t\t\t\t\t/* static_pass_number */\n+  TV_JUMP,\t\t\t\t/* tv_id */\n+  0,\t\t\t\t\t/* properties_required */\n+  0,\t\t\t\t\t/* properties_provided */\n+  0,\t\t\t\t\t/* properties_destroyed */\n+  TODO_ggc_collect,\t\t\t/* todo_flags_start */\n+  TODO_verify_rtl_sharing,\t\t/* todo_flags_finish */\n  }\n };"}, {"sha": "65e8f0444a773b5322857ea256aa90b282783128", "filename": "gcc/combine-stack-adj.c", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11a687e750e810ac085dfda840ce10f73ee2ce81/gcc%2Fcombine-stack-adj.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11a687e750e810ac085dfda840ce10f73ee2ce81/gcc%2Fcombine-stack-adj.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine-stack-adj.c?ref=11a687e750e810ac085dfda840ce10f73ee2ce81", "patch": "@@ -626,26 +626,23 @@ combine_stack_adjustments_for_block (basic_block bb)\n static bool\n gate_handle_stack_adjustments (void)\n {\n-  return flag_combine_stack_adjustments;\n-}\n-\n-static unsigned int\n-rest_of_handle_stack_adjustments (void)\n-{\n-  cleanup_cfg (flag_crossjumping ? CLEANUP_CROSSJUMP : 0);\n-\n   /* This is kind of a heuristic.  We need to run combine_stack_adjustments\n      even for machines with possibly nonzero TARGET_RETURN_POPS_ARGS\n      and ACCUMULATE_OUTGOING_ARGS.  We expect that only ports having\n      push instructions will have popping returns.  */\n #ifndef PUSH_ROUNDING\n-  if (!ACCUMULATE_OUTGOING_ARGS)\n+  if (ACCUMULATE_OUTGOING_ARGS)\n+    return false;\n #endif\n-    {\n-      df_note_add_problem ();\n-      df_analyze ();\n-      combine_stack_adjustments ();\n-    }\n+  return flag_combine_stack_adjustments;\n+}\n+\n+static unsigned int\n+rest_of_handle_stack_adjustments (void)\n+{\n+  df_note_add_problem ();\n+  df_analyze ();\n+  combine_stack_adjustments ();\n   return 0;\n }\n "}, {"sha": "3974231562a2259c27d10bca60d4cde146189040", "filename": "gcc/passes.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11a687e750e810ac085dfda840ce10f73ee2ce81/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11a687e750e810ac085dfda840ce10f73ee2ce81/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=11a687e750e810ac085dfda840ce10f73ee2ce81", "patch": "@@ -1515,7 +1515,7 @@ init_optimization_passes (void)\n       struct opt_pass **p = &pass_rest_of_compilation.pass.sub;\n       NEXT_PASS (pass_instantiate_virtual_regs);\n       NEXT_PASS (pass_into_cfg_layout_mode);\n-      NEXT_PASS (pass_jump2);\n+      NEXT_PASS (pass_jump);\n       NEXT_PASS (pass_lower_subreg);\n       NEXT_PASS (pass_df_initialize_opt);\n       NEXT_PASS (pass_cse);\n@@ -1577,6 +1577,7 @@ init_optimization_passes (void)\n \t  NEXT_PASS (pass_thread_prologue_and_epilogue);\n \t  NEXT_PASS (pass_rtl_dse2);\n \t  NEXT_PASS (pass_stack_adjustments);\n+\t  NEXT_PASS (pass_jump2);\n \t  NEXT_PASS (pass_peephole2);\n \t  NEXT_PASS (pass_if_after_reload);\n \t  NEXT_PASS (pass_regrename);"}, {"sha": "055293704b41bfb940e623bbed3074d7b7709c24", "filename": "gcc/tree-pass.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11a687e750e810ac085dfda840ce10f73ee2ce81/gcc%2Ftree-pass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11a687e750e810ac085dfda840ce10f73ee2ce81/gcc%2Ftree-pass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pass.h?ref=11a687e750e810ac085dfda840ce10f73ee2ce81", "patch": "@@ -484,6 +484,7 @@ extern struct rtl_opt_pass pass_expand;\n extern struct rtl_opt_pass pass_instantiate_virtual_regs;\n extern struct rtl_opt_pass pass_rtl_fwprop;\n extern struct rtl_opt_pass pass_rtl_fwprop_addr;\n+extern struct rtl_opt_pass pass_jump;\n extern struct rtl_opt_pass pass_jump2;\n extern struct rtl_opt_pass pass_lower_subreg;\n extern struct rtl_opt_pass pass_cse;"}]}