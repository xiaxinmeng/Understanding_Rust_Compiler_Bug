{"sha": "67b8ac46a606b677b20b3834beb2d24c27c86e8c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjdiOGFjNDZhNjA2YjY3N2IyMGIzODM0YmViMmQyNGMyN2M4NmU4Yw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-01-04T09:25:59Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-01-04T09:25:59Z"}, "message": "[multiple changes]\n\n2013-01-04  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_util.adb (Remove_Side_Effects): Make sure scope suppress\n\tis restored on exit.\n\n2013-01-04  Robert Dewar  <dewar@adacore.com>\n\n\t* usage.adb: Document -gnateF (check overflow for predefined Float).\n\n2013-01-04  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_res.adb (Resolve_Type_Conversion): Remove incorrect\n\tprevention of call to Apply_Type_Conversion_Checks, which resulted\n\tin missing check flags in formal mode.\n\n2013-01-04  Vincent Celier  <celier@adacore.com>\n\n\t* makeutl.ads (Db_Switch_Args): New table used by gprbuild.\n\t* prj-conf.adb (Check_Builder_Switches): Check for switches\n\t--config= (Get_Db_Switches): New procedure to get the --db\n\tswitches so that they are used when invoking gprconfig in\n\tauto-configuration.\n\t(Do_Autoconf): When invoking gprconfig, use the --db switches, if any.\n\nFrom-SVN: r194894", "tree": {"sha": "0d4726eb66808f1aa09f196c091d7ee298d9dc4d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0d4726eb66808f1aa09f196c091d7ee298d9dc4d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/67b8ac46a606b677b20b3834beb2d24c27c86e8c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67b8ac46a606b677b20b3834beb2d24c27c86e8c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67b8ac46a606b677b20b3834beb2d24c27c86e8c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67b8ac46a606b677b20b3834beb2d24c27c86e8c/comments", "author": null, "committer": null, "parents": [{"sha": "dc8b370ac022cd0cfd0a5498f2cb8dbc0a286cf6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc8b370ac022cd0cfd0a5498f2cb8dbc0a286cf6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc8b370ac022cd0cfd0a5498f2cb8dbc0a286cf6"}], "stats": {"total": 600, "additions": 344, "deletions": 256}, "files": [{"sha": "42768377489e018ed63dc536d941cf988235e0ef", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67b8ac46a606b677b20b3834beb2d24c27c86e8c/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67b8ac46a606b677b20b3834beb2d24c27c86e8c/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=67b8ac46a606b677b20b3834beb2d24c27c86e8c", "patch": "@@ -1,3 +1,27 @@\n+2013-01-04  Robert Dewar  <dewar@adacore.com>\n+\n+\t* exp_util.adb (Remove_Side_Effects): Make sure scope suppress\n+\tis restored on exit.\n+\n+2013-01-04  Robert Dewar  <dewar@adacore.com>\n+\n+\t* usage.adb: Document -gnateF (check overflow for predefined Float).\n+\n+2013-01-04  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_res.adb (Resolve_Type_Conversion): Remove incorrect\n+\tprevention of call to Apply_Type_Conversion_Checks, which resulted\n+\tin missing check flags in formal mode.\n+\n+2013-01-04  Vincent Celier  <celier@adacore.com>\n+\n+\t* makeutl.ads (Db_Switch_Args): New table used by gprbuild.\n+\t* prj-conf.adb (Check_Builder_Switches): Check for switches\n+\t--config= (Get_Db_Switches): New procedure to get the --db\n+\tswitches so that they are used when invoking gprconfig in\n+\tauto-configuration.\n+\t(Do_Autoconf): When invoking gprconfig, use the --db switches, if any.\n+\n 2013-01-04  Pascal Obry  <obry@adacore.com>\n \n \t* prj-nmsc.adb: Minor reformatting."}, {"sha": "883effee6c1595b6392e953d3ee2d4b547d118f8", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67b8ac46a606b677b20b3834beb2d24c27c86e8c/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67b8ac46a606b677b20b3834beb2d24c27c86e8c/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=67b8ac46a606b677b20b3834beb2d24c27c86e8c", "patch": "@@ -6712,8 +6712,8 @@ package body Exp_Util is\n            or else Nkind (N) = N_Selected_Component\n          then\n             return Within_In_Parameter (Prefix (N));\n-         else\n \n+         else\n             return False;\n          end if;\n       end Within_In_Parameter;\n@@ -6743,7 +6743,10 @@ package body Exp_Util is\n          return;\n       end if;\n \n-      --  All this must not have any checks\n+      --  The remaining procesaing is done with all checks suppressed\n+\n+      --  Note: from now on, don't use return statements, instead do a goto\n+      --  Leave, to ensure that we properly restore Scope_Suppress.Suppress.\n \n       Scope_Suppress.Suppress := (others => True);\n \n@@ -6809,8 +6812,7 @@ package body Exp_Util is\n         and then Nkind (Expression (Exp)) = N_Explicit_Dereference\n       then\n          Remove_Side_Effects (Expression (Exp), Name_Req, Variable_Ref);\n-         Scope_Suppress := Svg_Suppress;\n-         return;\n+         goto Leave;\n \n       --  If this is a type conversion, leave the type conversion and remove\n       --  the side effects in the expression. This is important in several\n@@ -6820,8 +6822,7 @@ package body Exp_Util is\n \n       elsif Nkind (Exp) = N_Type_Conversion then\n          Remove_Side_Effects (Expression (Exp), Name_Req, Variable_Ref);\n-         Scope_Suppress := Svg_Suppress;\n-         return;\n+         goto Leave;\n \n       --  If this is an unchecked conversion that Gigi can't handle, make\n       --  a copy or a use a renaming to capture the value.\n@@ -6935,7 +6936,7 @@ package body Exp_Util is\n          if Alfa_Mode\n            and then Nkind (Parent (Exp)) = N_Object_Declaration\n          then\n-            return;\n+            goto Leave;\n          end if;\n \n          --  Special processing for function calls that return a limited type.\n@@ -6965,7 +6966,7 @@ package body Exp_Util is\n                Insert_Action (Exp, Decl);\n                Set_Etype (Obj, Exp_Type);\n                Rewrite (Exp, New_Occurrence_Of (Obj, Loc));\n-               return;\n+               goto Leave;\n             end;\n          end if;\n \n@@ -7064,6 +7065,8 @@ package body Exp_Util is\n \n       Rewrite (Exp, Res);\n       Analyze_And_Resolve (Exp, Exp_Type);\n+\n+   <<Leave>>\n       Scope_Suppress := Svg_Suppress;\n    end Remove_Side_Effects;\n "}, {"sha": "37e9f6107752143fe86c03e1d0eb1298426188b8", "filename": "gcc/ada/makeutl.ads", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67b8ac46a606b677b20b3834beb2d24c27c86e8c/gcc%2Fada%2Fmakeutl.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67b8ac46a606b677b20b3834beb2d24c27c86e8c/gcc%2Fada%2Fmakeutl.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmakeutl.ads?ref=67b8ac46a606b677b20b3834beb2d24c27c86e8c", "patch": "@@ -82,6 +82,15 @@ package Makeutl is\n    Load_Standard_Base : Boolean := True;\n    --  False when gprbuild is called with --db-\n \n+   package Db_Switch_Args is new Table.Table\n+     (Table_Component_Type => Name_Id,\n+      Table_Index_Type     => Integer,\n+      Table_Low_Bound      => 1,\n+      Table_Initial        => 200,\n+      Table_Increment      => 100,\n+      Table_Name           => \"Makegpr.Db_Switch_Args\");\n+   --  Table of all the arguments of --db switches of gprbuild\n+\n    package Directories is new Table.Table\n      (Table_Component_Type => Path_Name_Type,\n       Table_Index_Type     => Integer,"}, {"sha": "2a00c098621daeace0f4b9f25317fabe292c08ec", "filename": "gcc/ada/prj-conf.adb", "status": "modified", "additions": 293, "deletions": 241, "changes": 534, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67b8ac46a606b677b20b3834beb2d24c27c86e8c/gcc%2Fada%2Fprj-conf.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67b8ac46a606b677b20b3834beb2d24c27c86e8c/gcc%2Fada%2Fprj-conf.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-conf.adb?ref=67b8ac46a606b677b20b3834beb2d24c27c86e8c", "patch": "@@ -621,6 +621,10 @@ package body Prj.Conf is\n       --  Set to True if at least one attribute Ide'Compiler_Command is\n       --  specified for one language of the system.\n \n+      Conf_File_Name : String_Access := new String'(Config_File_Name);\n+      --  The configuration project file name. May be modified if there are\n+      --  switches --config= in the Builder package of the main project.\n+\n       function Default_File_Name return String;\n       --  Return the name of the default config file that should be tested\n \n@@ -629,11 +633,14 @@ package body Prj.Conf is\n       --  raises the Invalid_Config exception with an appropriate message\n \n       procedure Check_Builder_Switches;\n-      --  Check for switch --RTS in package Builder\n+      --  Check for switches --config and --RTS in package Builder\n \n       function Get_Config_Switches return Argument_List_Access;\n       --  Return the --config switches to use for gprconfig\n \n+      function Get_Db_Switches return Argument_List_Access;\n+      --  Return the --db switches to use for gprconfig\n+\n       function Might_Have_Sources (Project : Project_Id) return Boolean;\n       --  True if the specified project might have sources (ie the user has not\n       --  explicitly specified it. We haven't checked the file system, nor do\n@@ -681,7 +688,14 @@ package body Prj.Conf is\n                   if Switch.Value /= No_Name then\n                      Get_Name_String (Switch.Value);\n \n-                     if Get_RTS_Switches\n+                     if Conf_File_Name'Length = 0 and then\n+                        Name_Len > 9 and then\n+                        Name_Buffer (1 .. 9) = \"--config=\"\n+                     then\n+                        Conf_File_Name :=\n+                          new String'(Name_Buffer (10 .. Name_Len));\n+\n+                     elsif Get_RTS_Switches\n                        and then Name_Len >= 7\n                        and then Name_Buffer (1 .. 5) = \"--RTS\"\n                      then\n@@ -791,238 +805,6 @@ package body Prj.Conf is\n          end if;\n       end Default_File_Name;\n \n-      ------------------------\n-      -- Might_Have_Sources --\n-      ------------------------\n-\n-      function Might_Have_Sources (Project : Project_Id) return Boolean is\n-         Variable : Variable_Value;\n-\n-      begin\n-         Variable :=\n-           Value_Of\n-             (Name_Source_Dirs,\n-              Project.Decl.Attributes,\n-              Shared);\n-\n-         if Variable = Nil_Variable_Value\n-           or else Variable.Default\n-           or else Variable.Values /= Nil_String\n-         then\n-            Variable :=\n-              Value_Of\n-                (Name_Source_Files,\n-                 Project.Decl.Attributes,\n-                 Shared);\n-            return Variable = Nil_Variable_Value\n-              or else Variable.Default\n-              or else Variable.Values /= Nil_String;\n-\n-         else\n-            return False;\n-         end if;\n-      end Might_Have_Sources;\n-\n-      -------------------------\n-      -- Get_Config_Switches --\n-      -------------------------\n-\n-      function Get_Config_Switches return Argument_List_Access is\n-\n-         package Language_Htable is new GNAT.HTable.Simple_HTable\n-           (Header_Num => Prj.Header_Num,\n-            Element    => Name_Id,\n-            No_Element => No_Name,\n-            Key        => Name_Id,\n-            Hash       => Prj.Hash,\n-            Equal      => \"=\");\n-         --  Hash table to keep the languages used in the project tree\n-\n-         IDE : constant Package_Id :=\n-                 Value_Of (Name_Ide, Project.Decl.Packages, Shared);\n-\n-         procedure Add_Config_Switches_For_Project\n-           (Project    : Project_Id;\n-            Tree       : Project_Tree_Ref;\n-            With_State : in out Integer);\n-         --  Add all --config switches for this project. This is also called\n-         --  for aggregate projects.\n-\n-         -------------------------------------\n-         -- Add_Config_Switches_For_Project --\n-         -------------------------------------\n-\n-         procedure Add_Config_Switches_For_Project\n-           (Project    : Project_Id;\n-            Tree       : Project_Tree_Ref;\n-            With_State : in out Integer)\n-         is\n-            pragma Unreferenced (With_State);\n-\n-            Shared : constant Shared_Project_Tree_Data_Access := Tree.Shared;\n-\n-            Variable      : Variable_Value;\n-            Check_Default : Boolean;\n-            Lang          : Name_Id;\n-            List          : String_List_Id;\n-            Elem          : String_Element;\n-\n-         begin\n-            if Might_Have_Sources (Project) then\n-               Variable :=\n-                 Value_Of (Name_Languages, Project.Decl.Attributes, Shared);\n-\n-               if Variable = Nil_Variable_Value or else Variable.Default then\n-\n-                  --  Languages is not declared. If it is not an extending\n-                  --  project, or if it extends a project with no Languages,\n-                  --  check for Default_Language.\n-\n-                  Check_Default := Project.Extends = No_Project;\n-\n-                  if not Check_Default then\n-                     Variable :=\n-                       Value_Of\n-                         (Name_Languages,\n-                          Project.Extends.Decl.Attributes,\n-                          Shared);\n-                     Check_Default :=\n-                       Variable /= Nil_Variable_Value\n-                         and then Variable.Values = Nil_String;\n-                  end if;\n-\n-                  if Check_Default then\n-                     Variable :=\n-                       Value_Of\n-                         (Name_Default_Language,\n-                          Project.Decl.Attributes,\n-                          Shared);\n-\n-                     if Variable /= Nil_Variable_Value\n-                       and then not Variable.Default\n-                     then\n-                        Get_Name_String (Variable.Value);\n-                        To_Lower (Name_Buffer (1 .. Name_Len));\n-                        Lang := Name_Find;\n-                        Language_Htable.Set (Lang, Lang);\n-\n-                     --  If no default language is declared, default to Ada\n-\n-                     else\n-                        Language_Htable.Set (Name_Ada, Name_Ada);\n-                     end if;\n-                  end if;\n-\n-               elsif Variable.Values /= Nil_String then\n-\n-                  --  Attribute Languages is declared with a non empty list:\n-                  --  put all the languages in Language_HTable.\n-\n-                  List := Variable.Values;\n-                  while List /= Nil_String loop\n-                     Elem := Shared.String_Elements.Table (List);\n-\n-                     Get_Name_String (Elem.Value);\n-                     To_Lower (Name_Buffer (1 .. Name_Len));\n-                     Lang := Name_Find;\n-                     Language_Htable.Set (Lang, Lang);\n-\n-                     List := Elem.Next;\n-                  end loop;\n-               end if;\n-            end if;\n-         end Add_Config_Switches_For_Project;\n-\n-         procedure For_Every_Imported_Project is new For_Every_Project_Imported\n-           (State => Integer, Action => Add_Config_Switches_For_Project);\n-         --  Document this procedure ???\n-\n-         --  Local variables\n-\n-         Name     : Name_Id;\n-         Count    : Natural;\n-         Result   : Argument_List_Access;\n-         Variable : Variable_Value;\n-         Dummy    : Integer := 0;\n-\n-      --  Start of processing for Get_Config_Switches\n-\n-      begin\n-         For_Every_Imported_Project\n-           (By                 => Project,\n-            Tree               => Project_Tree,\n-            With_State         => Dummy,\n-            Include_Aggregated => True);\n-\n-         Name  := Language_Htable.Get_First;\n-         Count := 0;\n-         while Name /= No_Name loop\n-            Count := Count + 1;\n-            Name := Language_Htable.Get_Next;\n-         end loop;\n-\n-         Result := new String_List (1 .. Count);\n-\n-         Count := 1;\n-         Name  := Language_Htable.Get_First;\n-         while Name /= No_Name loop\n-\n-            --  Check if IDE'Compiler_Command is declared for the language.\n-            --  If it is, use its value to invoke gprconfig.\n-\n-            Variable :=\n-              Value_Of\n-                (Name,\n-                 Attribute_Or_Array_Name => Name_Compiler_Command,\n-                 In_Package              => IDE,\n-                 Shared                  => Shared,\n-                 Force_Lower_Case_Index  => True);\n-\n-            declare\n-               Config_Command : constant String :=\n-                                  \"--config=\" & Get_Name_String (Name);\n-\n-               Runtime_Name   : constant String :=\n-                                  Runtime_Name_For (Name);\n-\n-            begin\n-               if Variable = Nil_Variable_Value\n-                 or else Length_Of_Name (Variable.Value) = 0\n-               then\n-                  Result (Count) :=\n-                    new String'(Config_Command & \",,\" & Runtime_Name);\n-\n-               else\n-                  At_Least_One_Compiler_Command := True;\n-\n-                  declare\n-                     Compiler_Command : constant String :=\n-                                          Get_Name_String (Variable.Value);\n-\n-                  begin\n-                     if Is_Absolute_Path (Compiler_Command) then\n-                        Result (Count) :=\n-                          new String'\n-                            (Config_Command & \",,\" & Runtime_Name & \",\" &\n-                             Containing_Directory (Compiler_Command) & \",\" &\n-                             Simple_Name (Compiler_Command));\n-                     else\n-                        Result (Count) :=\n-                          new String'\n-                            (Config_Command & \",,\" & Runtime_Name & \",,\" &\n-                             Compiler_Command);\n-                     end if;\n-                  end;\n-               end if;\n-            end;\n-\n-            Count := Count + 1;\n-            Name  := Language_Htable.Get_Next;\n-         end loop;\n-\n-         return Result;\n-      end Get_Config_Switches;\n-\n       -----------------\n       -- Do_Autoconf --\n       -----------------\n@@ -1083,6 +865,7 @@ package body Prj.Conf is\n          declare\n             Obj_Dir         : constant String := Name_Buffer (1 .. Name_Len);\n             Config_Switches : Argument_List_Access;\n+            Db_Switches     : Argument_List_Access;\n             Args            : Argument_List (1 .. 5);\n             Arg_Last        : Positive;\n             Obj_Dir_Exists  : Boolean := True;\n@@ -1134,14 +917,18 @@ package body Prj.Conf is\n \n             Config_Switches := Get_Config_Switches;\n \n+            --  Get eventual --db switches\n+\n+            Db_Switches := Get_Db_Switches;\n+\n             --  Invoke gprconfig\n \n             Args (1) := new String'(\"--batch\");\n             Args (2) := new String'(\"-o\");\n \n             --  If no config file was specified, set the auto.cgpr one\n \n-            if Config_File_Name'Length = 0 then\n+            if Conf_File_Name'Length = 0 then\n                if Obj_Dir_Exists then\n                   Args (3) := new String'(Obj_Dir & Auto_Cgpr);\n \n@@ -1179,7 +966,7 @@ package body Prj.Conf is\n                   end;\n                end if;\n             else\n-               Args (3) := new String'(Config_File_Name);\n+               Args (3) := Conf_File_Name;\n             end if;\n \n             if Normalized_Hostname = \"\" then\n@@ -1253,6 +1040,11 @@ package body Prj.Conf is\n                   Write_Str (Config_Switches (J).all);\n                end loop;\n \n+               for J in Db_Switches'Range loop\n+                  Write_Char (' ');\n+                  Write_Str (Db_Switches (J).all);\n+               end loop;\n+\n                Write_Eol;\n \n             elsif not Quiet_Output then\n@@ -1269,7 +1061,7 @@ package body Prj.Conf is\n             end if;\n \n             Spawn (Gprconfig_Path.all, Args (1 .. Arg_Last) &\n-                   Config_Switches.all,\n+                   Config_Switches.all & Db_Switches.all,\n                    Success);\n \n             Free (Config_Switches);\n@@ -1287,6 +1079,266 @@ package body Prj.Conf is\n          end;\n       end Do_Autoconf;\n \n+      ---------------------\n+      -- Get_Db_Switches --\n+      ---------------------\n+\n+      function Get_Db_Switches return Argument_List_Access is\n+         Result : Argument_List_Access;\n+         Nmb_Arg : Natural;\n+      begin\n+         Nmb_Arg :=\n+           (2 * Db_Switch_Args.Last) + Boolean'Pos (not Load_Standard_Base);\n+         Result := new Argument_List (1 .. Nmb_Arg);\n+\n+         if Nmb_Arg /= 0 then\n+            for J in 1 .. Db_Switch_Args.Last loop\n+               Result (2 * J - 1) :=\n+                 new String'(\"--db\");\n+               Result (2 * J) :=\n+                 new String'(Get_Name_String (Db_Switch_Args.Table (J)));\n+            end loop;\n+\n+            if not Load_Standard_Base then\n+               Result (Result'Last) := new String'(\"--db-\");\n+            end if;\n+         end if;\n+\n+         return Result;\n+      end Get_Db_Switches;\n+\n+      -------------------------\n+      -- Get_Config_Switches --\n+      -------------------------\n+\n+      function Get_Config_Switches return Argument_List_Access is\n+\n+         package Language_Htable is new GNAT.HTable.Simple_HTable\n+           (Header_Num => Prj.Header_Num,\n+            Element    => Name_Id,\n+            No_Element => No_Name,\n+            Key        => Name_Id,\n+            Hash       => Prj.Hash,\n+            Equal      => \"=\");\n+         --  Hash table to keep the languages used in the project tree\n+\n+         IDE : constant Package_Id :=\n+                 Value_Of (Name_Ide, Project.Decl.Packages, Shared);\n+\n+         procedure Add_Config_Switches_For_Project\n+           (Project    : Project_Id;\n+            Tree       : Project_Tree_Ref;\n+            With_State : in out Integer);\n+         --  Add all --config switches for this project. This is also called\n+         --  for aggregate projects.\n+\n+         -------------------------------------\n+         -- Add_Config_Switches_For_Project --\n+         -------------------------------------\n+\n+         procedure Add_Config_Switches_For_Project\n+           (Project    : Project_Id;\n+            Tree       : Project_Tree_Ref;\n+            With_State : in out Integer)\n+         is\n+            pragma Unreferenced (With_State);\n+\n+            Shared : constant Shared_Project_Tree_Data_Access := Tree.Shared;\n+\n+            Variable      : Variable_Value;\n+            Check_Default : Boolean;\n+            Lang          : Name_Id;\n+            List          : String_List_Id;\n+            Elem          : String_Element;\n+\n+         begin\n+            if Might_Have_Sources (Project) then\n+               Variable :=\n+                 Value_Of (Name_Languages, Project.Decl.Attributes, Shared);\n+\n+               if Variable = Nil_Variable_Value or else Variable.Default then\n+\n+                  --  Languages is not declared. If it is not an extending\n+                  --  project, or if it extends a project with no Languages,\n+                  --  check for Default_Language.\n+\n+                  Check_Default := Project.Extends = No_Project;\n+\n+                  if not Check_Default then\n+                     Variable :=\n+                       Value_Of\n+                         (Name_Languages,\n+                          Project.Extends.Decl.Attributes,\n+                          Shared);\n+                     Check_Default :=\n+                       Variable /= Nil_Variable_Value\n+                         and then Variable.Values = Nil_String;\n+                  end if;\n+\n+                  if Check_Default then\n+                     Variable :=\n+                       Value_Of\n+                         (Name_Default_Language,\n+                          Project.Decl.Attributes,\n+                          Shared);\n+\n+                     if Variable /= Nil_Variable_Value\n+                       and then not Variable.Default\n+                     then\n+                        Get_Name_String (Variable.Value);\n+                        To_Lower (Name_Buffer (1 .. Name_Len));\n+                        Lang := Name_Find;\n+                        Language_Htable.Set (Lang, Lang);\n+\n+                     --  If no default language is declared, default to Ada\n+\n+                     else\n+                        Language_Htable.Set (Name_Ada, Name_Ada);\n+                     end if;\n+                  end if;\n+\n+               elsif Variable.Values /= Nil_String then\n+\n+                  --  Attribute Languages is declared with a non empty list:\n+                  --  put all the languages in Language_HTable.\n+\n+                  List := Variable.Values;\n+                  while List /= Nil_String loop\n+                     Elem := Shared.String_Elements.Table (List);\n+\n+                     Get_Name_String (Elem.Value);\n+                     To_Lower (Name_Buffer (1 .. Name_Len));\n+                     Lang := Name_Find;\n+                     Language_Htable.Set (Lang, Lang);\n+\n+                     List := Elem.Next;\n+                  end loop;\n+               end if;\n+            end if;\n+         end Add_Config_Switches_For_Project;\n+\n+         procedure For_Every_Imported_Project is new For_Every_Project_Imported\n+           (State => Integer, Action => Add_Config_Switches_For_Project);\n+         --  Document this procedure ???\n+\n+         --  Local variables\n+\n+         Name     : Name_Id;\n+         Count    : Natural;\n+         Result   : Argument_List_Access;\n+         Variable : Variable_Value;\n+         Dummy    : Integer := 0;\n+\n+      --  Start of processing for Get_Config_Switches\n+\n+      begin\n+         For_Every_Imported_Project\n+           (By                 => Project,\n+            Tree               => Project_Tree,\n+            With_State         => Dummy,\n+            Include_Aggregated => True);\n+\n+         Name  := Language_Htable.Get_First;\n+         Count := 0;\n+         while Name /= No_Name loop\n+            Count := Count + 1;\n+            Name := Language_Htable.Get_Next;\n+         end loop;\n+\n+         Result := new String_List (1 .. Count);\n+\n+         Count := 1;\n+         Name  := Language_Htable.Get_First;\n+         while Name /= No_Name loop\n+\n+            --  Check if IDE'Compiler_Command is declared for the language.\n+            --  If it is, use its value to invoke gprconfig.\n+\n+            Variable :=\n+              Value_Of\n+                (Name,\n+                 Attribute_Or_Array_Name => Name_Compiler_Command,\n+                 In_Package              => IDE,\n+                 Shared                  => Shared,\n+                 Force_Lower_Case_Index  => True);\n+\n+            declare\n+               Config_Command : constant String :=\n+                                  \"--config=\" & Get_Name_String (Name);\n+\n+               Runtime_Name   : constant String :=\n+                                  Runtime_Name_For (Name);\n+\n+            begin\n+               if Variable = Nil_Variable_Value\n+                 or else Length_Of_Name (Variable.Value) = 0\n+               then\n+                  Result (Count) :=\n+                    new String'(Config_Command & \",,\" & Runtime_Name);\n+\n+               else\n+                  At_Least_One_Compiler_Command := True;\n+\n+                  declare\n+                     Compiler_Command : constant String :=\n+                                          Get_Name_String (Variable.Value);\n+\n+                  begin\n+                     if Is_Absolute_Path (Compiler_Command) then\n+                        Result (Count) :=\n+                          new String'\n+                            (Config_Command & \",,\" & Runtime_Name & \",\" &\n+                             Containing_Directory (Compiler_Command) & \",\" &\n+                             Simple_Name (Compiler_Command));\n+                     else\n+                        Result (Count) :=\n+                          new String'\n+                            (Config_Command & \",,\" & Runtime_Name & \",,\" &\n+                             Compiler_Command);\n+                     end if;\n+                  end;\n+               end if;\n+            end;\n+\n+            Count := Count + 1;\n+            Name  := Language_Htable.Get_Next;\n+         end loop;\n+\n+         return Result;\n+      end Get_Config_Switches;\n+\n+      ------------------------\n+      -- Might_Have_Sources --\n+      ------------------------\n+\n+      function Might_Have_Sources (Project : Project_Id) return Boolean is\n+         Variable : Variable_Value;\n+\n+      begin\n+         Variable :=\n+           Value_Of\n+             (Name_Source_Dirs,\n+              Project.Decl.Attributes,\n+              Shared);\n+\n+         if Variable = Nil_Variable_Value\n+           or else Variable.Default\n+           or else Variable.Values /= Nil_String\n+         then\n+            Variable :=\n+              Value_Of\n+                (Name_Source_Files,\n+                 Project.Decl.Attributes,\n+                 Shared);\n+            return Variable = Nil_Variable_Value\n+              or else Variable.Default\n+              or else Variable.Values /= Nil_String;\n+\n+         else\n+            return False;\n+         end if;\n+      end Might_Have_Sources;\n+\n       Success             : Boolean;\n       Config_Project_Node : Project_Node_Id := Empty_Node;\n \n@@ -1298,19 +1350,19 @@ package body Prj.Conf is\n \n       Check_Builder_Switches;\n \n-      if Config_File_Name'Length > 0 then\n-         Config_File_Path := Locate_Config_File (Config_File_Name);\n+      if Conf_File_Name'Length > 0 then\n+         Config_File_Path := Locate_Config_File (Conf_File_Name.all);\n       else\n          Config_File_Path := Locate_Config_File (Default_File_Name);\n       end if;\n \n       if Config_File_Path = null then\n          if (not Allow_Automatic_Generation)\n-           and then Config_File_Name'Length > 0\n+           and then Conf_File_Name'Length > 0\n          then\n             Raise_Invalid_Config\n               (\"could not locate main configuration project \"\n-               & Config_File_Name);\n+               & Conf_File_Name.all);\n          end if;\n       end if;\n "}, {"sha": "a2bc095a2d4acac0981364f2074093dfd8266c77", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67b8ac46a606b677b20b3834beb2d24c27c86e8c/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67b8ac46a606b677b20b3834beb2d24c27c86e8c/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=67b8ac46a606b677b20b3834beb2d24c27c86e8c", "patch": "@@ -9474,8 +9474,8 @@ package body Sem_Res is\n               and then abs (Realval (Rop)) < Delta_Value (Standard_Duration)\n             then\n                Error_Msg_N\n-                 (\"??universal real operand can only \" &\n-                  \"be interpreted as Duration!\", Rop);\n+                 (\"??universal real operand can only \"\n+                  & \"be interpreted as Duration!\", Rop);\n                Error_Msg_N\n                  (\"\\??precision will be lost in the conversion!\", Rop);\n             end if;\n@@ -9556,11 +9556,6 @@ package body Sem_Res is\n         and then not Is_Generic_Type (Root_Type (Target_Typ))\n         and then Target_Typ  /= Universal_Fixed\n         and then Operand_Typ /= Universal_Fixed\n-\n-        --  Also skip type conversion checks in formal verification mode, as\n-        --  the formal verification backend deals directly with these checks.\n-\n-        and then not Alfa_Mode\n       then\n          Apply_Type_Conversion_Checks (N);\n       end if;"}, {"sha": "436a8865f2232527901cd285cf6d423438670b8a", "filename": "gcc/ada/usage.adb", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67b8ac46a606b677b20b3834beb2d24c27c86e8c/gcc%2Fada%2Fusage.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67b8ac46a606b677b20b3834beb2d24c27c86e8c/gcc%2Fada%2Fusage.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fusage.adb?ref=67b8ac46a606b677b20b3834beb2d24c27c86e8c", "patch": "@@ -202,6 +202,11 @@ begin\n    Write_Switch_Char (\"ef\");\n    Write_Line (\"Full source path in brief error messages\");\n \n+   --  Line for -gnateF switch\n+\n+   Write_Switch_Char (\"eF\");\n+   Write_Line (\"Check overflow on predefined Float types\");\n+\n    --  Line for -gnateG switch\n \n    Write_Switch_Char (\"eG\");"}]}