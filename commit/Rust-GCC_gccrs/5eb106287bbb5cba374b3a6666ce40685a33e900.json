{"sha": "5eb106287bbb5cba374b3a6666ce40685a33e900", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWViMTA2Mjg3YmJiNWNiYTM3NGIzYTY2NjZjZTQwNjg1YTMzZTkwMA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2003-04-15T20:23:36Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2003-04-15T20:23:36Z"}, "message": "re PR c++/10381 (Accepts call to inexistent function)\n\n\tPR c++/10381\n\t* parser.c (cp_parser_primary_expression): Reorganize logic for\n\tdealing with name lookup failures.\n\n\tPR c++/10381\n\t* g++.dg/parse/lookup3.C: New test.\n\nFrom-SVN: r65656", "tree": {"sha": "8187fbf0bd1bb690a6a10b2f1cf5858182c6f6e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8187fbf0bd1bb690a6a10b2f1cf5858182c6f6e2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5eb106287bbb5cba374b3a6666ce40685a33e900", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5eb106287bbb5cba374b3a6666ce40685a33e900", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5eb106287bbb5cba374b3a6666ce40685a33e900", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5eb106287bbb5cba374b3a6666ce40685a33e900/comments", "author": null, "committer": null, "parents": [{"sha": "98475c572e3d589811aa15cf17184dcd5e265db2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98475c572e3d589811aa15cf17184dcd5e265db2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98475c572e3d589811aa15cf17184dcd5e265db2"}], "stats": {"total": 92, "additions": 62, "deletions": 30}, "files": [{"sha": "7ce14982dd1e46da4aeb5515757bc2ef1eb2e2d5", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5eb106287bbb5cba374b3a6666ce40685a33e900/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5eb106287bbb5cba374b3a6666ce40685a33e900/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5eb106287bbb5cba374b3a6666ce40685a33e900", "patch": "@@ -1,3 +1,9 @@\n+2003-04-15  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/10381\n+\t* parser.c (cp_parser_primary_expression): Reorganize logic for\n+\tdealing with name lookup failures.\n+\n 2003-04-15  Jason Merrill  <jason@redhat.com>\n \n \t* decl2.c (mark_used): Don't instantiate anything if"}, {"sha": "751508906b1b79c0bf16dabf591f4318162fe3fc", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 38, "deletions": 29, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5eb106287bbb5cba374b3a6666ce40685a33e900/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5eb106287bbb5cba374b3a6666ce40685a33e900/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=5eb106287bbb5cba374b3a6666ce40685a33e900", "patch": "@@ -2558,43 +2558,52 @@ cp_parser_primary_expression (cp_parser *parser,\n \t\t  }\n \t      }\n \n-\t    if (!parser->scope \n-\t\t&& decl == error_mark_node\n-\t\t&& processing_template_decl)\n+\t    if (decl == error_mark_node)\n \t      {\n-\t\t/* Unqualified name lookup failed while processing a\n-\t\t   template.  */\n-\t\t*idk = CP_PARSER_ID_KIND_UNQUALIFIED;\n-\t\t/* If the next token is a parenthesis, assume that\n-\t\t   Koenig lookup will succeed when instantiating the\n-\t\t   template.  */\n-\t\tif (cp_lexer_next_token_is (parser->lexer, CPP_OPEN_PAREN))\n-\t\t  return build_min_nt (LOOKUP_EXPR, id_expression);\n-\t\t/* If we're not doing Koenig lookup, issue an error.  */\n-\t\terror (\"`%D' has not been declared\", id_expression);\n-\t\treturn error_mark_node;\n-\t      }\n-\t    else if (decl == error_mark_node\n-\t\t     && !processing_template_decl)\n-\t      {\n-\t\tif (!parser->scope)\n+\t\t/* Name lookup failed.  */\n+\t\tif (!parser->scope \n+\t\t    && processing_template_decl)\n+\t\t  {\n+\t\t    /* Unqualified name lookup failed while processing a\n+\t\t       template.  */\n+\t\t    *idk = CP_PARSER_ID_KIND_UNQUALIFIED;\n+\t\t    /* If the next token is a parenthesis, assume that\n+\t\t       Koenig lookup will succeed when instantiating the\n+\t\t       template.  */\n+\t\t    if (cp_lexer_next_token_is (parser->lexer, CPP_OPEN_PAREN))\n+\t\t      return build_min_nt (LOOKUP_EXPR, id_expression);\n+\t\t    /* If we're not doing Koenig lookup, issue an error.  */\n+\t\t    error (\"`%D' has not been declared\", id_expression);\n+\t\t    return error_mark_node;\n+\t\t  }\n+\t\telse if (parser->scope\n+\t\t\t && (!TYPE_P (parser->scope)\n+\t\t\t     || !dependent_type_p (parser->scope)))\n+\t\t  {\n+\t\t    /* Qualified name lookup failed, and the\n+\t\t       qualifying name was not a dependent type.  That\n+\t\t       is always an error.  */\n+\t\t    if (TYPE_P (parser->scope)\n+\t\t\t&& !COMPLETE_TYPE_P (parser->scope))\n+\t\t      error (\"incomplete type `%T' used in nested name \"\n+\t\t\t     \"specifier\",\n+\t\t\t     parser->scope);\n+\t\t    else if (parser->scope != global_namespace)\n+\t\t      error (\"`%D' is not a member of `%D'\",\n+\t\t\t     id_expression, parser->scope);\n+\t\t    else\n+\t\t      error (\"`::%D' has not been declared\", id_expression);\n+\t\t    return error_mark_node;\n+\t\t  }\n+\t\telse if (!parser->scope && !processing_template_decl)\n \t\t  {\n \t\t    /* It may be resolvable as a koenig lookup function\n \t\t       call.  */\n \t\t    *idk = CP_PARSER_ID_KIND_UNQUALIFIED;\n \t\t    return id_expression;\n \t\t  }\n-\t\telse if (TYPE_P (parser->scope)\n-\t\t\t && !COMPLETE_TYPE_P (parser->scope))\n-\t\t  error (\"incomplete type `%T' used in nested name specifier\",\n-\t\t\t parser->scope);\n-\t\telse if (parser->scope != global_namespace)\n-\t\t  error (\"`%D' is not a member of `%D'\",\n-\t\t\t id_expression, parser->scope);\n-\t\telse\n-\t\t  error (\"`::%D' has not been declared\", id_expression);\n \t      }\n-\t    /* If DECL is a variable would be out of scope under\n+\t    /* If DECL is a variable that would be out of scope under\n \t       ANSI/ISO rules, but in scope in the ARM, name lookup\n \t       will succeed.  Issue a diagnostic here.  */\n \t    else"}, {"sha": "7cce91789ca3b6c3f397743678055422b9178f4e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5eb106287bbb5cba374b3a6666ce40685a33e900/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5eb106287bbb5cba374b3a6666ce40685a33e900/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5eb106287bbb5cba374b3a6666ce40685a33e900", "patch": "@@ -1,3 +1,8 @@\n+2003-04-15  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/10381\n+\t* g++.dg/parse/lookup3.C: New test.\n+\n 2003-04-15  J\"orn Rennecke <joern.rennecke@superh.com>\n \n \t* gcc.c-torture/compile/20030415-1.c : New test."}, {"sha": "d4bf79830304ec32cea18cf16402fd74a43f6255", "filename": "gcc/testsuite/g++.dg/parse/lookup3.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5eb106287bbb5cba374b3a6666ce40685a33e900/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Flookup3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5eb106287bbb5cba374b3a6666ce40685a33e900/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Flookup3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Flookup3.C?ref=5eb106287bbb5cba374b3a6666ce40685a33e900", "patch": "@@ -0,0 +1,12 @@\n+struct X {};\n+\n+template <int>\n+struct Base {\n+    static void foo () { \n+      X::NONEXISTENT (); // { dg-error \"\" }\n+    }\n+};\n+\n+int main () {\n+  Base<2>::foo ();\n+}"}, {"sha": "8105340cfcd7ebd7c5cd7cccfb03be807dd74ae5", "filename": "gcc/testsuite/lib/prune.exp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5eb106287bbb5cba374b3a6666ce40685a33e900/gcc%2Ftestsuite%2Flib%2Fprune.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5eb106287bbb5cba374b3a6666ce40685a33e900/gcc%2Ftestsuite%2Flib%2Fprune.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fprune.exp?ref=5eb106287bbb5cba374b3a6666ce40685a33e900", "patch": "@@ -19,7 +19,7 @@\n proc prune_gcc_output { text } {\n     #send_user \"Before:$text\\n\"\n \n-    regsub -all \"(^|\\n)\\[^\\n\\]*: In (function|member|method|(copy )?constructor|instantiation|program|subroutine|block-data) \\[^\\n\\]*\" $text \"\" text\n+    regsub -all \"(^|\\n)\\[^\\n\\]*: In ((static member )?function|member|method|(copy )?constructor|instantiation|program|subroutine|block-data) \\[^\\n\\]*\" $text \"\" text\n     regsub -all \"(^|\\n)\\[^\\n\\]*: At (top level|global scope):\\[^\\n\\]*\" $text \"\" text\n     regsub -all \"(^|\\n)collect2: ld returned \\[^\\n\\]*\" $text \"\" text\n     regsub -all \"(^|\\n)Please submit.*instructions\\[^\\n\\]*\" $text \"\" text"}]}