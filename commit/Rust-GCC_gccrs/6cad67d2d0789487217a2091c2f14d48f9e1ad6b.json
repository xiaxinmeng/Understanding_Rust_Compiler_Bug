{"sha": "6cad67d2d0789487217a2091c2f14d48f9e1ad6b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmNhZDY3ZDJkMDc4OTQ4NzIxN2EyMDkxYzJmMTRkNDhmOWUxYWQ2Yg==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1996-01-01T02:32:57Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1996-01-01T02:32:57Z"}, "message": "hard-reg-set.h (losing_caller_save_reg_set): Declare.\n\n        * hard-reg-set.h (losing_caller_save_reg_set): Declare.\n        * regclass.c (losing_caller_save_reg_set): Define.\n        (init_reg_sets_1): Initialize losing_caller_save_reg_set.\n        * global.c (find_reg): Avoid caller-saving registers in\n        LOSING_CALLER_SAVE_REGS if it's defined.\n        * local-alloc.c (find_free_reg): Avoid caller-saving registers\n        in losing_caller_save_reg_set.\n        (CLASS_LIKELY_SPILLED_P): Delete definition.  Moved into regs.h.\n        * regs.h (CLASS_LIKELY_SPILLED_P): Define if not already defined.\n\nFrom-SVN: r10926", "tree": {"sha": "6954fbd4d8694312315db4ec5b21e6a62873aec7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6954fbd4d8694312315db4ec5b21e6a62873aec7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6cad67d2d0789487217a2091c2f14d48f9e1ad6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cad67d2d0789487217a2091c2f14d48f9e1ad6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6cad67d2d0789487217a2091c2f14d48f9e1ad6b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cad67d2d0789487217a2091c2f14d48f9e1ad6b/comments", "author": null, "committer": null, "parents": [{"sha": "6e81958a66749a62fdd4f50de26e52a10fa559da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e81958a66749a62fdd4f50de26e52a10fa559da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e81958a66749a62fdd4f50de26e52a10fa559da"}], "stats": {"total": 41, "additions": 29, "deletions": 12}, "files": [{"sha": "78da99b99a8e6300a1b684b54d42e111ca6c85ae", "filename": "gcc/global.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cad67d2d0789487217a2091c2f14d48f9e1ad6b/gcc%2Fglobal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cad67d2d0789487217a2091c2f14d48f9e1ad6b/gcc%2Fglobal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fglobal.c?ref=6cad67d2d0789487217a2091c2f14d48f9e1ad6b", "patch": "@@ -1085,7 +1085,14 @@ find_reg (allocno, losers, alt_regs_p, accept_call_clobbered, retrying)\n \t  && CALLER_SAVE_PROFITABLE (allocno_n_refs[allocno],\n \t\t\t\t     allocno_calls_crossed[allocno]))\n \t{\n-\t  find_reg (allocno, losers, alt_regs_p, 1, retrying);\n+\t  HARD_REG_SET new_losers;\n+\t  if (! losers)\n+\t    CLEAR_HARD_REG_SET (new_losers);\n+\t  else\n+\t    COPY_HARD_REG_SET (new_losers, losers);\n+\t    \n+\t  IOR_HARD_REG_SET(new_losers, losing_caller_save_reg_set);\n+\t  find_reg (allocno, new_losers, alt_regs_p, 1, retrying);\n \t  if (reg_renumber[allocno_reg[allocno]] >= 0)\n \t    {\n \t      caller_save_needed = 1;"}, {"sha": "b2bec47012bc22e3d5d5c320b10e3990a6599348", "filename": "gcc/hard-reg-set.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cad67d2d0789487217a2091c2f14d48f9e1ad6b/gcc%2Fhard-reg-set.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cad67d2d0789487217a2091c2f14d48f9e1ad6b/gcc%2Fhard-reg-set.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhard-reg-set.h?ref=6cad67d2d0789487217a2091c2f14d48f9e1ad6b", "patch": "@@ -211,6 +211,9 @@ extern char call_used_regs[FIRST_PSEUDO_REGISTER];\n \n extern HARD_REG_SET call_used_reg_set;\n   \n+/* Registers that we don't want to caller save.  */\n+extern HARD_REG_SET losing_caller_save_reg_set;\n+\n /* Indexed by hard register number, contains 1 for registers that are\n    fixed use -- i.e. in fixed_regs -- or a function value return register\n    or STRUCT_VALUE_REGNUM or STATIC_CHAIN_REGNUM.  These are the"}, {"sha": "20bcc1cc4b5c5244f25e031139c89d67dc917f25", "filename": "gcc/local-alloc.c", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cad67d2d0789487217a2091c2f14d48f9e1ad6b/gcc%2Flocal-alloc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cad67d2d0789487217a2091c2f14d48f9e1ad6b/gcc%2Flocal-alloc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flocal-alloc.c?ref=6cad67d2d0789487217a2091c2f14d48f9e1ad6b", "patch": "@@ -55,6 +55,10 @@ Boston, MA 02111-1307, USA.  */\n    But this is currently disabled since tying in global_alloc is not\n    yet implemented.  */\n \n+/* Pseudos allocated here cannot be reallocated by global.c if the hard\n+   register is used as a spill register.  So we don't allocate such pseudos\n+   here if their preferred class is likely to be used by spills.  */\n+\n #include <stdio.h>\n #include \"config.h\"\n #include \"rtl.h\"\n@@ -66,17 +70,6 @@ Boston, MA 02111-1307, USA.  */\n #include \"recog.h\"\n #include \"output.h\"\n \f\n-/* Pseudos allocated here cannot be reallocated by global.c if the hard\n-   register is used as a spill register.  So we don't allocate such pseudos\n-   here if their preferred class is likely to be used by spills.\n-\n-   On most machines, the appropriate test is if the class has one\n-   register, so we default to that.  */\n-\n-#ifndef CLASS_LIKELY_SPILLED_P\n-#define CLASS_LIKELY_SPILLED_P(CLASS) (reg_class_size[(int) (CLASS)] == 1)\n-#endif\n-\n /* Next quantity number available for allocation.  */\n \n static int next_qty;\n@@ -2106,6 +2099,9 @@ find_free_reg (class, mode, qty, accept_call_clobbered, just_try_suggested,\n   else\n     COPY_HARD_REG_SET (used, call_used_reg_set);\n \n+  if (accept_call_clobbered)\n+    IOR_HARD_REG_SET(used, losing_caller_save_reg_set);\n+\n   for (ins = born_index; ins < dead_index; ins++)\n     IOR_HARD_REG_SET (used, regs_live_at[ins]);\n "}, {"sha": "3147ba55fb39da568956795c28ae495cff30423f", "filename": "gcc/regclass.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cad67d2d0789487217a2091c2f14d48f9e1ad6b/gcc%2Fregclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cad67d2d0789487217a2091c2f14d48f9e1ad6b/gcc%2Fregclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregclass.c?ref=6cad67d2d0789487217a2091c2f14d48f9e1ad6b", "patch": "@@ -81,6 +81,9 @@ char call_used_regs[FIRST_PSEUDO_REGISTER];\n \n HARD_REG_SET call_used_reg_set;\n \n+/* HARD_REG_SET of registers we want to avoid caller saving.  */\n+HARD_REG_SET losing_caller_save_reg_set;\n+\n /* Data for initializing the above.  */\n \n static char initial_call_used_regs[] = CALL_USED_REGISTERS;\n@@ -390,6 +393,8 @@ init_reg_sets_1 ()\n \tSET_HARD_REG_BIT (call_used_reg_set, i);\n       if (call_fixed_regs[i])\n \tSET_HARD_REG_BIT (call_fixed_reg_set, i);\n+      if (CLASS_LIKELY_SPILLED_P (REGNO_REG_CLASS (i)))\n+\tSET_HARD_REG_BIT (losing_caller_save_reg_set, i);\n     }\n }\n "}, {"sha": "c26528d05742c4158cdefb4f01f040b6dd4cf612", "filename": "gcc/regs.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cad67d2d0789487217a2091c2f14d48f9e1ad6b/gcc%2Fregs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cad67d2d0789487217a2091c2f14d48f9e1ad6b/gcc%2Fregs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregs.h?ref=6cad67d2d0789487217a2091c2f14d48f9e1ad6b", "patch": "@@ -176,6 +176,12 @@ extern int caller_save_needed;\n #define CALLER_SAVE_PROFITABLE(REFS, CALLS)  (4 * (CALLS) < (REFS))\n #endif\n \n+/* On most machines a register class is likely to be spilled if it\n+   only has one register.  */\n+#ifndef CLASS_LIKELY_SPILLED_P\n+#define CLASS_LIKELY_SPILLED_P(CLASS) (reg_class_size[(int) (CLASS)] == 1)\n+#endif\n+\n /* Allocated in local_alloc.  */\n \n /* A list of SCRATCH rtl allocated by local-alloc.  */"}]}