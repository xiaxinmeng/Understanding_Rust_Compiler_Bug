{"sha": "807e3be2b82b3e15572ac6b0128e9b7dd306fdc4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODA3ZTNiZTJiODJiM2UxNTU3MmFjNmIwMTI4ZTliN2RkMzA2ZmRjNA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2017-10-05T13:27:37Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2017-10-05T13:27:37Z"}, "message": "Re: [PATCH] C++ warning on vexing parse\n\nhttps://gcc.gnu.org/ml/gcc-patches/2017-10/msg00249.html\n\tgcc/cp/\n\tWarn on MVP declarations\n\t* cp-tree.h (struct cp_declarator): Add parenthesized field.\n\t* decl.c (grokdeclarator): Warn about unnecessary parens.\n\t* parser.c (make_declarator): Init parenthesized field.\n\t(cp_parser_direct_declarator): Set parenthesized field.\n\n\tgcc/\n\t* doc/invoke.texi (Wparentheses): Document C++ MVP behaviour.\n\n\tgcc/testsuite/\n\t* g++.dg/warn/mvp.C: New.\n\nFrom-SVN: r253446", "tree": {"sha": "cb5e29d8ce9047c30566c15d6f09c02ec94c2909", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cb5e29d8ce9047c30566c15d6f09c02ec94c2909"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/807e3be2b82b3e15572ac6b0128e9b7dd306fdc4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/807e3be2b82b3e15572ac6b0128e9b7dd306fdc4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/807e3be2b82b3e15572ac6b0128e9b7dd306fdc4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/807e3be2b82b3e15572ac6b0128e9b7dd306fdc4/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "87e3d7cfb5c5c9cf265e5ee803cce904f2a5a123", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87e3d7cfb5c5c9cf265e5ee803cce904f2a5a123", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87e3d7cfb5c5c9cf265e5ee803cce904f2a5a123"}], "stats": {"total": 137, "additions": 137, "deletions": 0}, "files": [{"sha": "8b735d7f5a50f7a286753fde1095c8eada9a2bee", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/807e3be2b82b3e15572ac6b0128e9b7dd306fdc4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/807e3be2b82b3e15572ac6b0128e9b7dd306fdc4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=807e3be2b82b3e15572ac6b0128e9b7dd306fdc4", "patch": "@@ -1,3 +1,7 @@\n+2017-10-05  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* doc/invoke.texi (Wparentheses): Document C++ MVP behaviour.\n+\n 2017-10-05  Tamar Christina  <tamar.christina@arm.com>\n \n \t* config/arm/arm.c (arm_test_fpu_data): New."}, {"sha": "b5ae7451513348af1545822d1be596adb192eae4", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/807e3be2b82b3e15572ac6b0128e9b7dd306fdc4/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/807e3be2b82b3e15572ac6b0128e9b7dd306fdc4/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=807e3be2b82b3e15572ac6b0128e9b7dd306fdc4", "patch": "@@ -1,5 +1,11 @@\n 2017-10-05  Nathan Sidwell  <nathan@acm.org>\n \n+\tWarn on MVP declarations\n+\t* cp-tree.h (struct cp_declarator): Add parenthesized field.\n+\t* decl.c (grokdeclarator): Warn about unnecessary parens.\n+\t* parser.c (make_declarator): Init parenthesized field.\n+\t(cp_parser_direct_declarator): Set parenthesized field.\n+\n \tKill IDENTIFIER_GLOBAL_VALUE, SET_IDENTIFIER_GLOBAL_VALUE\n \t* cp-tree.h (IDENTIFIER_GLOBAL_VALUE,\n \tSET_IDENTIFIER_GLOBAL_VALUE): Delete."}, {"sha": "8445bfae6e58c300da5af32430a483a8b7c1a651", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/807e3be2b82b3e15572ac6b0128e9b7dd306fdc4/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/807e3be2b82b3e15572ac6b0128e9b7dd306fdc4/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=807e3be2b82b3e15572ac6b0128e9b7dd306fdc4", "patch": "@@ -5671,6 +5671,10 @@ struct cp_declarator {\n   /* Whether we parsed an ellipsis (`...') just before the declarator,\n      to indicate this is a parameter pack.  */\n   BOOL_BITFIELD parameter_pack_p : 1;\n+  /* If this declarator is parenthesized, this the open-paren.  It is\n+     UNKNOWN_LOCATION when not parenthesized.  */\n+  location_t parenthesized;\n+\n   location_t id_loc; /* Currently only set for cdk_id, cdk_decomp and\n \t\t\tcdk_function. */\n   /* GNU Attributes that apply to this declarator.  If the declarator"}, {"sha": "7c68f68b9bdbfa1857f4a05c18d06ec7e22abcdd", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/807e3be2b82b3e15572ac6b0128e9b7dd306fdc4/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/807e3be2b82b3e15572ac6b0128e9b7dd306fdc4/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=807e3be2b82b3e15572ac6b0128e9b7dd306fdc4", "patch": "@@ -10807,6 +10807,13 @@ grokdeclarator (const cp_declarator *declarator,\n \t\t\t\t\t    attr_flags);\n \t}\n \n+      /* We don't want to warn in parmeter context because we don't\n+\t yet know if the parse will succeed, and this might turn out\n+\t to be a constructor call.  */\n+      if (decl_context != PARM\n+\t  && declarator->parenthesized != UNKNOWN_LOCATION)\n+\twarning_at (declarator->parenthesized, OPT_Wparentheses,\n+\t\t    \"unnecessary parentheses in declaration of %qs\", name);\n       if (declarator->kind == cdk_id || declarator->kind == cdk_decomp)\n \tbreak;\n "}, {"sha": "3b0ee3934f2f7cdc6887382c0bbe40f6a33778d4", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/807e3be2b82b3e15572ac6b0128e9b7dd306fdc4/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/807e3be2b82b3e15572ac6b0128e9b7dd306fdc4/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=807e3be2b82b3e15572ac6b0128e9b7dd306fdc4", "patch": "@@ -1451,6 +1451,7 @@ make_declarator (cp_declarator_kind kind)\n \n   declarator = (cp_declarator *) alloc_declarator (sizeof (cp_declarator));\n   declarator->kind = kind;\n+  declarator->parenthesized = UNKNOWN_LOCATION;\n   declarator->attributes = NULL_TREE;\n   declarator->std_attributes = NULL_TREE;\n   declarator->declarator = NULL;\n@@ -19808,6 +19809,7 @@ cp_parser_direct_declarator (cp_parser* parser,\n   bool saved_in_declarator_p = parser->in_declarator_p;\n   bool first = true;\n   tree pushed_scope = NULL_TREE;\n+  cp_token *open_paren = NULL, *close_paren = NULL;\n \n   while (true)\n     {\n@@ -19858,6 +19860,8 @@ cp_parser_direct_declarator (cp_parser* parser,\n \t      tree params;\n \t      bool is_declarator = false;\n \n+\t      open_paren = NULL;\n+\n \t      /* In a member-declarator, the only valid interpretation\n \t\t of a parenthesis is the start of a\n \t\t parameter-declaration-clause.  (It is invalid to\n@@ -19979,6 +19983,7 @@ cp_parser_direct_declarator (cp_parser* parser,\n \t      parser->default_arg_ok_p = saved_default_arg_ok_p;\n \t      parser->in_declarator_p = saved_in_declarator_p;\n \n+\t      open_paren = token;\n \t      /* Consume the `('.  */\n \t      matching_parens parens;\n \t      parens.consume_open (parser);\n@@ -19992,6 +19997,7 @@ cp_parser_direct_declarator (cp_parser* parser,\n \t      parser->in_type_id_in_expr_p = saved_in_type_id_in_expr_p;\n \t      first = false;\n \t      /* Expect a `)'.  */\n+\t      close_paren = cp_lexer_peek_token (parser->lexer);\n \t      if (!parens.require_close (parser))\n \t\tdeclarator = cp_error_declarator;\n \t      if (declarator == cp_error_declarator)\n@@ -20013,6 +20019,7 @@ cp_parser_direct_declarator (cp_parser* parser,\n \t  if (ctor_dtor_or_conv_p)\n \t    *ctor_dtor_or_conv_p = 0;\n \n+\t  open_paren = NULL;\n \t  first = false;\n \t  parser->default_arg_ok_p = false;\n \t  parser->in_declarator_p = true;\n@@ -20308,6 +20315,22 @@ cp_parser_direct_declarator (cp_parser* parser,\n      point.  That's an error; the declarator is not optional.  */\n   if (!declarator)\n     cp_parser_error (parser, \"expected declarator\");\n+  else if (open_paren)\n+    {\n+      /* Record overly parenthesized declarator so we can give a\n+\t diagnostic about confusing decl/expr disambiguation.  */\n+      if (declarator->kind == cdk_array)\n+\t{\n+\t  /* If the open and close parens are on different lines, this\n+\t     is probably a formatting thing, so ignore.  */\n+\t  expanded_location open = expand_location (open_paren->location);\n+\t  expanded_location close = expand_location (close_paren->location);\n+\t  if (open.line != close.line || open.file != close.file)\n+\t    open_paren = NULL;\n+\t}\n+      if (open_paren)\n+\tdeclarator->parenthesized = open_paren->location;\n+    }\n \n   /* If we entered a scope, we must exit it now.  */\n   if (pushed_scope)"}, {"sha": "84cc43a7355cf3c6704ab422a6ffdc53ed249e2c", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/807e3be2b82b3e15572ac6b0128e9b7dd306fdc4/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/807e3be2b82b3e15572ac6b0128e9b7dd306fdc4/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=807e3be2b82b3e15572ac6b0128e9b7dd306fdc4", "patch": "@@ -4579,6 +4579,17 @@ in the @code{?}: operator is a boolean expression, the omitted value is\n always 1.  Often programmers expect it to be a value computed\n inside the conditional expression instead.\n \n+For C++ this also warns for some cases of unnecessary parentheses in\n+declarations, which can indicate an attempt at a function call instead\n+of a declaration:\n+@smallexample\n+@{\n+  // Declares a local variable called mymutex.\n+  std::unique_lock<std::mutex> (mymutex);\n+  // User meant std::unique_lock<std::mutex> lock (mymutex);\n+@}\n+@end smallexample\n+\n This warning is enabled by @option{-Wall}.\n \n @item -Wsequence-point"}, {"sha": "8b462b40fa01268afa9a81317563966c05497769", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/807e3be2b82b3e15572ac6b0128e9b7dd306fdc4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/807e3be2b82b3e15572ac6b0128e9b7dd306fdc4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=807e3be2b82b3e15572ac6b0128e9b7dd306fdc4", "patch": "@@ -1,3 +1,7 @@\n+2017-10-05  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* g++.dg/warn/mvp.C: New.\n+\n 2017-10-05  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gcc.dg/gomp/pr82374.c (SIZE): Change from 1G to 1M to make it ilp32"}, {"sha": "9fbe2272233e42e56ba45ebf1b7440402a01d7c0", "filename": "gcc/testsuite/g++.dg/warn/mvp.C", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/807e3be2b82b3e15572ac6b0128e9b7dd306fdc4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fmvp.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/807e3be2b82b3e15572ac6b0128e9b7dd306fdc4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fmvp.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fmvp.C?ref=807e3be2b82b3e15572ac6b0128e9b7dd306fdc4", "patch": "@@ -0,0 +1,78 @@\n+// { dg-additional-options -Wparentheses }\n+\n+// Most Vexing Parse warnings\n+// in C++ anythig that syntactically looks like a decl IS a decl, this\n+// can lead to confused users, but worse silent unexpectedly unsafe\n+// code generation.\n+\n+int (a); // { dg-warning \"\" }\n+int (*b);  // { dg-warning \"\" }\n+extern int (&c);  // { dg-warning \"\" }\n+\n+int h1 = 0, h2 = 0;\n+struct H { H(...);};\n+\n+namespace fns \n+{\n+  int (*a) ();\n+  int (b) ();\n+  int (*c ()) ();\n+  int (d1 ()); // { dg-warning \"\" }\n+  int (d2 // { dg-warning \"\" }\n+       ());\n+  int (e) (int);\n+  int g (int (a)); // No warning because ...\n+  H h (int (h1), int (h2), 3); // ... not a function decl.\n+}\n+\n+namespace arys\n+{\n+  int (*a)[1];\n+  int (b)[1];\n+  int (*c[1])[1];\n+  int (d1[1]); // { dg-warning \"\" }\n+  int (d2\n+       [1]);\n+  int (e[1])[1];\n+}\n+\n+namespace complex\n+{\n+  int (*a())[1];\n+  int (*b[1])();\n+  int ((*c1())[1]); // { dg-warning \"\" }\n+  int ((*c2())\n+       [1]);\n+  int ((*d1[1])()); // { dg-warning \"\" }\n+  int ((*d2[1])\t // { dg-warning \"\" }\n+       ());\n+}\n+\n+namespace motivation\n+{\n+  typedef int shared_mutex; // for exposition\n+  struct locker\n+  {\n+    locker ();\n+    locker (int &r);\n+    ~locker ();\n+  };\n+  class protected_state \n+  {\n+    shared_mutex mutex; // not a real mutex type\n+    int state;\n+\n+  public:\n+    void not_thread_safe ()\n+    {\n+      locker (mutex); // { dg-warning \"\" }\n+      state++; // oops\n+    }\n+    \n+    void thread_safe ()\n+    {\n+      locker lock (mutex);\n+      state++; // ok;\n+    }\n+  };\n+}"}]}