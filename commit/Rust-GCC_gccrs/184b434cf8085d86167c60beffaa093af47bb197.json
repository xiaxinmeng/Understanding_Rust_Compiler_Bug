{"sha": "184b434cf8085d86167c60beffaa093af47bb197", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTg0YjQzNGNmODA4NWQ4NjE2N2M2MGJlZmZhYTA5M2FmNDdiYjE5Nw==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@unitus.it", "date": "2003-10-04T07:52:02Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2003-10-04T07:52:02Z"}, "message": "re PR libstdc++/12206 (Segmentation fault in basic_filebuf::seekoff)\n\n2003-10-04  Paolo Carlini  <pcarlini@unitus.it>\n\n\tPR libstdc++/12206\n\t* include/bits/fstream.tcc (imbue): In case a codecvt facet\n\tis not available, set _M_codecvt = 0.\n\t* testsuite/27_io/basic_filebuf/imbue/12206.cc: New.\n\nFrom-SVN: r72087", "tree": {"sha": "e3ff980a06cecae273a87f107efed9ef101f6ea4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e3ff980a06cecae273a87f107efed9ef101f6ea4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/184b434cf8085d86167c60beffaa093af47bb197", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/184b434cf8085d86167c60beffaa093af47bb197", "html_url": "https://github.com/Rust-GCC/gccrs/commit/184b434cf8085d86167c60beffaa093af47bb197", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/184b434cf8085d86167c60beffaa093af47bb197/comments", "author": null, "committer": null, "parents": [{"sha": "62cdd71e1109e4c5de0f5a8bc3010b94767490ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62cdd71e1109e4c5de0f5a8bc3010b94767490ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62cdd71e1109e4c5de0f5a8bc3010b94767490ab"}], "stats": {"total": 135, "additions": 135, "deletions": 0}, "files": [{"sha": "2dd488bb987d536f00f2ee8434b9563357f23d41", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/184b434cf8085d86167c60beffaa093af47bb197/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/184b434cf8085d86167c60beffaa093af47bb197/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=184b434cf8085d86167c60beffaa093af47bb197", "patch": "@@ -1,3 +1,10 @@\n+2003-10-04  Paolo Carlini  <pcarlini@unitus.it>\n+\n+\tPR libstdc++/12206\n+\t* include/bits/fstream.tcc (imbue): In case a codecvt facet\n+\tis not available, set _M_codecvt = 0.\n+\t* testsuite/27_io/basic_filebuf/imbue/12206.cc: New.\n+\n 2003-10-02  Harald Boehme  <boehme@informatik.hu-berlin.de>\n \n \tPR libstdc++/12451"}, {"sha": "35cb3c7f4466d457d05866ad22645eb0e6b6a6df", "filename": "libstdc++-v3/include/bits/fstream.tcc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/184b434cf8085d86167c60beffaa093af47bb197/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/184b434cf8085d86167c60beffaa093af47bb197/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc?ref=184b434cf8085d86167c60beffaa093af47bb197", "patch": "@@ -671,6 +671,8 @@ namespace std\n \t  this->_M_buf_locale = __loc;\n \t  if (__builtin_expect(has_facet<__codecvt_type>(__loc), true))\n \t    _M_codecvt = &use_facet<__codecvt_type>(__loc);\n+\t  else\n+\t    _M_codecvt = 0;\n \n \t  // NB This may require the reconversion of previously\n \t  // converted chars. This in turn may cause the"}, {"sha": "23f14faaeac5d10dd9399bb51d0b02e3ff69afac", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/imbue/12206.cc", "status": "added", "additions": 126, "deletions": 0, "changes": 126, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/184b434cf8085d86167c60beffaa093af47bb197/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fimbue%2F12206.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/184b434cf8085d86167c60beffaa093af47bb197/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fimbue%2F12206.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fimbue%2F12206.cc?ref=184b434cf8085d86167c60beffaa093af47bb197", "patch": "@@ -0,0 +1,126 @@\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+\n+typedef unsigned char Char;\n+\n+namespace std\n+{\n+  template <>\n+  class codecvt<Char, char, mbstate_t> :\n+    public locale::facet, public codecvt_base\n+  {\n+  public:\n+    typedef Char intern_type;\n+    typedef char extern_type;\n+    typedef mbstate_t state_type;\n+    \n+    explicit codecvt(size_t refs = 0)\n+      : locale::facet(refs) { }\n+    result out(mbstate_t& state, const Char* from,\n+\t       const Char* from_end, const Char*& from_next,\n+\t       char* to, char* to_limit, char*& to_next) const\n+    {\n+      return do_out(state, from, from_end, from_next,\n+\t\t    to, to_limit, to_next);\n+    }\n+    result in(mbstate_t& state, const char* from,\n+\t      const char* from_end, const char*& from_next,\n+\t      Char* to, Char* to_limit, Char*& to_next) const\n+    {\n+      return do_in(state, from, from_end, from_next,\n+\t\t   to, to_limit, to_next);\n+    }\n+    result unshift(mbstate_t& state, char* to, char* to_end,\n+\t\t   char*& to_next) const\n+    { return do_unshift(state, to, to_end, to_next); }\n+    int length(mbstate_t& state, const char* from,\n+\t       const char* from_end, size_t max) const\n+    { return do_length(state, from, from_end, max); }\n+    int encoding() const throw()\n+    { return do_encoding(); }\n+    bool always_noconv() const throw()\n+    { return do_always_noconv(); }\n+    int max_length() const throw()\n+    { return do_max_length(); }\n+    \n+    static locale::id id;\n+    \n+  protected:\n+    virtual result do_out(mbstate_t&, const Char* from,\n+\t\t\t  const Char* from_end,\n+\t\t\t  const Char*& from_next, char* to,\n+\t\t\t  char* to_limit, char*& to_next) const\n+    { return ok; }\n+    virtual result do_in(mbstate_t&, const char* from,\n+\t\t\t const char* from_end,\n+\t\t\t const char*& from_next, Char* to,\n+\t\t\t Char* to_limit, Char*& to_next) const\n+    { return ok; }\n+    virtual result do_unshift(mbstate_t&, char* to, char*,\n+\t\t\t      char*& to_next) const\n+    { return noconv; }\n+    virtual int do_length(mbstate_t&, const char* from,\n+\t\t\t  const char* from_end, size_t max) const\n+    { return 1; }\n+    virtual int do_encoding() const throw()\n+    { return 1; }\n+    virtual bool do_always_noconv() const throw()\n+    { return false; }\n+    virtual int do_max_length() const throw()\n+    { return 1; }\n+  };\n+  \n+  locale::id codecvt<Char, char, mbstate_t>::id;\n+}\n+\n+// libstdc++/12206\n+void test01()\n+{\n+  using namespace std;\n+  bool test __attribute__((unused)) = true;\n+  \n+  locale loc(locale::classic(),\n+\t     new codecvt<Char, char, std::mbstate_t>);\n+  locale::global(loc);\n+  \n+  basic_filebuf<Char, char_traits<Char> > fb;\n+\n+  loc = locale::classic();\n+  locale::global(loc);\n+  fb.pubimbue(loc);\n+\n+  fb.open(\"tmp_12206\", ios_base::out);\n+  try\n+    {\n+      fb.pubseekoff(0, ios_base::cur);\n+    }\n+  catch (std::exception&)\n+    {\n+    }\n+  fb.close();\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}