{"sha": "351168fe551a792fac3dac3359de72c1bcdc651e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzUxMTY4ZmU1NTFhNzkyZmFjM2RhYzMzNTlkZTcyYzFiY2RjNjUxZQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2016-07-14T12:15:38Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2016-07-14T12:15:38Z"}, "message": "re PR tree-optimization/71866 (gcc locks up after fix for PR70159)\n\n2016-07-14  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/71866\n\t* tree-ssa-pre.c (get_constant_for_value_id): Remove.\n\t(do_hoist_insertion): Avoid endless recursion when we\n\tdidn't insert anything because we managed to simplify\n\tthings down to a constant or SSA name.\n\t(fully_constant_expression): Re-write in terms of ...\n\t* tree-ssa-sccvn.h (vn_nary_simplify): ... this.  Declare.\n\t* tree-ssa-sccvn.c (vn_nary_simplify): New wrapper around\n\tvn_nary_build_or_lookup_1.\n\t(vn_nary_build_or_lookup_1): Added flag and renamed from ...\n\t(vn_nary_build_or_lookup): ... this which now wraps it.\n\n\t* gcc.dg/torture/pr71866.c: New testcase.\n\nFrom-SVN: r238334", "tree": {"sha": "e63596b59c87415b491b0e9c85ffdeff0cdb6f3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e63596b59c87415b491b0e9c85ffdeff0cdb6f3d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/351168fe551a792fac3dac3359de72c1bcdc651e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/351168fe551a792fac3dac3359de72c1bcdc651e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/351168fe551a792fac3dac3359de72c1bcdc651e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/351168fe551a792fac3dac3359de72c1bcdc651e/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8234d02aa47d9cba294b4263e47a336e9c67f5b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8234d02aa47d9cba294b4263e47a336e9c67f5b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8234d02aa47d9cba294b4263e47a336e9c67f5b1"}], "stats": {"total": 208, "additions": 109, "deletions": 99}, "files": [{"sha": "24b929812b64c1ef7bb122d641005e7d4b20feab", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/351168fe551a792fac3dac3359de72c1bcdc651e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/351168fe551a792fac3dac3359de72c1bcdc651e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=351168fe551a792fac3dac3359de72c1bcdc651e", "patch": "@@ -1,3 +1,17 @@\n+2016-07-14  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/71866\n+\t* tree-ssa-pre.c (get_constant_for_value_id): Remove.\n+\t(do_hoist_insertion): Avoid endless recursion when we\n+\tdidn't insert anything because we managed to simplify\n+\tthings down to a constant or SSA name.\n+\t(fully_constant_expression): Re-write in terms of ...\n+\t* tree-ssa-sccvn.h (vn_nary_simplify): ... this.  Declare.\n+\t* tree-ssa-sccvn.c (vn_nary_simplify): New wrapper around\n+\tvn_nary_build_or_lookup_1.\n+\t(vn_nary_build_or_lookup_1): Added flag and renamed from ...\n+\t(vn_nary_build_or_lookup): ... this which now wraps it.\n+\n 2016-07-14  Alan Modra  <amodra@gmail.com>\n \n \tPR target/71733"}, {"sha": "6c85d55bcadb954aed1ec8994150adc66634abfe", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/351168fe551a792fac3dac3359de72c1bcdc651e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/351168fe551a792fac3dac3359de72c1bcdc651e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=351168fe551a792fac3dac3359de72c1bcdc651e", "patch": "@@ -1,3 +1,8 @@\n+2016-07-14  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/71866\n+\t* gcc.dg/torture/pr71866.c: New testcase.\n+\n 2016-07-14  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n \n \t* gcc.target/arm/pr42574.c: Add missing target keyword for the dg-do"}, {"sha": "e1b36cb8b7d16660f757b2de450fa06099b0d940", "filename": "gcc/testsuite/gcc.dg/torture/pr71866.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/351168fe551a792fac3dac3359de72c1bcdc651e/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr71866.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/351168fe551a792fac3dac3359de72c1bcdc651e/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr71866.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr71866.c?ref=351168fe551a792fac3dac3359de72c1bcdc651e", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-ftree-pre -fcode-hoisting\" } */\n+\n+typedef unsigned char u8;\n+extern unsigned long pci_io_base;\n+u8 in_8 (const volatile void *);\n+int eeh_enabled ();\n+void eeh_check_failure ();\n+static inline \n+u8 eeh_readb(const volatile void *addr)\n+{\n+  u8 val = in_8(addr);\n+  if (((val) == (u8)~0 && eeh_enabled()))   eeh_check_failure();\n+  return val;\n+}\n+extern struct ppc_pci_io {\n+    void (*outb) (u8 val, unsigned long port);\n+}\n+ppc_pci_io;\n+static inline\n+u8 readb (const volatile void * addr)\n+{\n+  return eeh_readb((addr));\n+}\n+static inline\n+u8 inb (unsigned long port)\n+{\n+  return readb((volatile void *)pci_io_base + port);\n+}\n+static inline\n+void outb (u8 val, unsigned long port)\n+{\n+  if (ppc_pci_io.outb != ((void *)0)) ppc_pci_io.outb (val, port);\n+};\n+void frob_econtrol(unsigned long base_hi, unsigned char m, unsigned char v)\n+{\n+  unsigned char ectr = 0;\n+  if (m != 0xff)   ectr = inb((base_hi + 0x2));\n+  outb((ectr & ~m) ^ v, (base_hi + 0x2));\n+}"}, {"sha": "518346aa8f28bb903e0c7a25d734a721bd081729", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 21, "deletions": 96, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/351168fe551a792fac3dac3359de72c1bcdc651e/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/351168fe551a792fac3dac3359de72c1bcdc651e/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=351168fe551a792fac3dac3359de72c1bcdc651e", "patch": "@@ -1164,29 +1164,6 @@ get_or_alloc_expr_for_constant (tree constant)\n   return newexpr;\n }\n \n-/* Given a value id V, find the actual tree representing the constant\n-   value if there is one, and return it. Return NULL if we can't find\n-   a constant.  */\n-\n-static tree\n-get_constant_for_value_id (unsigned int v)\n-{\n-  if (value_id_constant_p (v))\n-    {\n-      unsigned int i;\n-      bitmap_iterator bi;\n-      bitmap exprset = value_expressions[v];\n-\n-      EXECUTE_IF_SET_IN_BITMAP (exprset, 0, i, bi)\n-\t{\n-\t  pre_expr expr = expression_for_id (i);\n-\t  if (expr->kind == CONSTANT)\n-\t    return PRE_EXPR_CONSTANT (expr);\n-\t}\n-    }\n-  return NULL;\n-}\n-\n /* Get or allocate a pre_expr for a piece of GIMPLE, and return it.\n    Currently only supports constants and SSA_NAMES.  */\n static pre_expr\n@@ -1236,76 +1213,16 @@ fully_constant_expression (pre_expr e)\n     case NARY:\n       {\n \tvn_nary_op_t nary = PRE_EXPR_NARY (e);\n-\tswitch (TREE_CODE_CLASS (nary->opcode))\n-\t  {\n-\t  case tcc_binary:\n-\t  case tcc_comparison:\n-\t    {\n-\t      /* We have to go from trees to pre exprs to value ids to\n-\t\t constants.  */\n-\t      tree naryop0 = nary->op[0];\n-\t      tree naryop1 = nary->op[1];\n-\t      tree result;\n-\t      if (!is_gimple_min_invariant (naryop0))\n-\t\t{\n-\t\t  pre_expr rep0 = get_or_alloc_expr_for (naryop0);\n-\t\t  unsigned int vrep0 = get_expr_value_id (rep0);\n-\t\t  tree const0 = get_constant_for_value_id (vrep0);\n-\t\t  if (const0)\n-\t\t    naryop0 = fold_convert (TREE_TYPE (naryop0), const0);\n-\t\t}\n-\t      if (!is_gimple_min_invariant (naryop1))\n-\t\t{\n-\t\t  pre_expr rep1 = get_or_alloc_expr_for (naryop1);\n-\t\t  unsigned int vrep1 = get_expr_value_id (rep1);\n-\t\t  tree const1 = get_constant_for_value_id (vrep1);\n-\t\t  if (const1)\n-\t\t    naryop1 = fold_convert (TREE_TYPE (naryop1), const1);\n-\t\t}\n-\t      result = fold_binary (nary->opcode, nary->type,\n-\t\t\t\t    naryop0, naryop1);\n-\t      if (result && is_gimple_min_invariant (result))\n-\t\treturn get_or_alloc_expr_for_constant (result);\n-\t      /* We might have simplified the expression to a\n-\t\t SSA_NAME for example from x_1 * 1.  But we cannot\n-\t\t insert a PHI for x_1 unconditionally as x_1 might\n-\t\t not be available readily.  */\n-\t      return e;\n-\t    }\n-\t  case tcc_reference:\n-\t    if (nary->opcode != REALPART_EXPR\n-\t\t&& nary->opcode != IMAGPART_EXPR\n-\t\t&& nary->opcode != VIEW_CONVERT_EXPR)\n-\t      return e;\n-\t    /* Fallthrough.  */\n-\t  case tcc_unary:\n-\t    {\n-\t      /* We have to go from trees to pre exprs to value ids to\n-\t\t constants.  */\n-\t      tree naryop0 = nary->op[0];\n-\t      tree const0, result;\n-\t      if (is_gimple_min_invariant (naryop0))\n-\t\tconst0 = naryop0;\n-\t      else\n-\t\t{\n-\t\t  pre_expr rep0 = get_or_alloc_expr_for (naryop0);\n-\t\t  unsigned int vrep0 = get_expr_value_id (rep0);\n-\t\t  const0 = get_constant_for_value_id (vrep0);\n-\t\t}\n-\t      result = NULL;\n-\t      if (const0)\n-\t\t{\n-\t\t  tree type1 = TREE_TYPE (nary->op[0]);\n-\t\t  const0 = fold_convert (type1, const0);\n-\t\t  result = fold_unary (nary->opcode, nary->type, const0);\n-\t\t}\n-\t      if (result && is_gimple_min_invariant (result))\n-\t\treturn get_or_alloc_expr_for_constant (result);\n-\t      return e;\n-\t    }\n-\t  default:\n-\t    return e;\n-\t  }\n+\ttree res = vn_nary_simplify (nary);\n+\tif (!res)\n+\t  return e;\n+\tif (is_gimple_min_invariant (res))\n+\t  return get_or_alloc_expr_for_constant (res);\n+\t/* We might have simplified the expression to a\n+\t   SSA_NAME for example from x_1 * 1.  But we cannot\n+\t   insert a PHI for x_1 unconditionally as x_1 might\n+\t   not be available readily.  */\n+\treturn e;\n       }\n     case REFERENCE:\n       {\n@@ -3618,10 +3535,18 @@ do_hoist_insertion (basic_block block)\n       gimple_seq stmts = NULL;\n       tree res = create_expression_by_pieces (block, expr, &stmts,\n \t\t\t\t\t      get_expr_type (expr));\n-      if (gsi_end_p (last) || is_ctrl_stmt (gsi_stmt (last)))\n-\tgsi_insert_seq_before (&last, stmts, GSI_SAME_STMT);\n+\n+      /* Do not return true if expression creation ultimately\n+         did not insert any statements.  */\n+      if (gimple_seq_empty_p (stmts))\n+\tres = NULL_TREE;\n       else\n-\tgsi_insert_seq_after (&last, stmts, GSI_NEW_STMT);\n+\t{\n+\t  if (gsi_end_p (last) || is_ctrl_stmt (gsi_stmt (last)))\n+\t    gsi_insert_seq_before (&last, stmts, GSI_SAME_STMT);\n+\t  else\n+\t    gsi_insert_seq_after (&last, stmts, GSI_NEW_STMT);\n+\t}\n \n       /* Make sure to not return true if expression creation ultimately\n          failed but also make sure to insert any stmts produced as they"}, {"sha": "bd752a5eccd78bb7ed56b43dbcd74d59add77fbc", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 28, "deletions": 3, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/351168fe551a792fac3dac3359de72c1bcdc651e/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/351168fe551a792fac3dac3359de72c1bcdc651e/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=351168fe551a792fac3dac3359de72c1bcdc651e", "patch": "@@ -1625,10 +1625,12 @@ vn_lookup_simplify_result (code_helper rcode, tree type, tree *ops)\n }\n \n /* Return a value-number for RCODE OPS... either by looking up an existing\n-   value-number for the simplified result or by inserting the operation.  */\n+   value-number for the simplified result or by inserting the operation if\n+   INSERT is true.  */\n \n static tree\n-vn_nary_build_or_lookup (code_helper rcode, tree type, tree *ops)\n+vn_nary_build_or_lookup_1 (code_helper rcode, tree type, tree *ops,\n+\t\t\t   bool insert)\n {\n   tree result = NULL_TREE;\n   /* We will be creating a value number for\n@@ -1658,7 +1660,7 @@ vn_nary_build_or_lookup (code_helper rcode, tree type, tree *ops)\n   else\n     {\n       tree val = vn_lookup_simplify_result (rcode, type, ops);\n-      if (!val)\n+      if (!val && insert)\n \t{\n \t  gimple_seq stmts = NULL;\n \t  result = maybe_push_res_to_seq (rcode, type, ops, &stmts);\n@@ -1719,6 +1721,29 @@ vn_nary_build_or_lookup (code_helper rcode, tree type, tree *ops)\n   return result;\n }\n \n+/* Return a value-number for RCODE OPS... either by looking up an existing\n+   value-number for the simplified result or by inserting the operation.  */\n+\n+static tree\n+vn_nary_build_or_lookup (code_helper rcode, tree type, tree *ops)\n+{\n+  return vn_nary_build_or_lookup_1 (rcode, type, ops, true);\n+}\n+\n+/* Try to simplify the expression RCODE OPS... of type TYPE and return\n+   its value if present.  */\n+\n+tree\n+vn_nary_simplify (vn_nary_op_t nary)\n+{\n+  if (nary->length > 3)\n+    return NULL_TREE;\n+  tree ops[3];\n+  memcpy (ops, nary->op, sizeof (tree) * nary->length);\n+  return vn_nary_build_or_lookup_1 (nary->opcode, nary->type, ops, false);\n+}\n+\n+\n /* Callback for walk_non_aliased_vuses.  Tries to perform a lookup\n    from the statement defining VUSE and if not successful tries to\n    translate *REFP and VR_ through an aggregate copy at the definition"}, {"sha": "92c255d93d2b072b803f6c37fff30b3363124767", "filename": "gcc/tree-ssa-sccvn.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/351168fe551a792fac3dac3359de72c1bcdc651e/gcc%2Ftree-ssa-sccvn.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/351168fe551a792fac3dac3359de72c1bcdc651e/gcc%2Ftree-ssa-sccvn.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.h?ref=351168fe551a792fac3dac3359de72c1bcdc651e", "patch": "@@ -234,6 +234,7 @@ unsigned int get_constant_value_id (tree);\n unsigned int get_or_alloc_constant_value_id (tree);\n bool value_id_constant_p (unsigned int);\n tree fully_constant_vn_reference_p (vn_reference_t);\n+tree vn_nary_simplify (vn_nary_op_t);\n \n /* Valueize NAME if it is an SSA name, otherwise just return it.  */\n "}]}