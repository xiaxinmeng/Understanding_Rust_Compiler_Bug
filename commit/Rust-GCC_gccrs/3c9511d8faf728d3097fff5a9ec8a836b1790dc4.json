{"sha": "3c9511d8faf728d3097fff5a9ec8a836b1790dc4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2M5NTExZDhmYWY3MjhkMzA5N2ZmZjVhOWVjOGE4MzZiMTc5MGRjNA==", "commit": {"author": {"name": "Sandra Loosemore", "email": "sandra@codesourcery.com", "date": "2016-01-04T02:44:45Z"}, "committer": {"name": "Sandra Loosemore", "email": "sandra@gcc.gnu.org", "date": "2016-01-04T02:44:45Z"}, "message": "extend.texi (Common Function Attributes): Move docs for MSP430-specific attributes to....\n\n2016-01-03  Sandra Loosemore <sandra@codesourcery.com>\n\n\tgcc/\n\t* doc/extend.texi (Common Function Attributes): Move docs for\n\tMSP430-specific attributes to....\n\t(MSP430 Function Attributes): ...here.  Delete the redundant\n\tentries and copy-edit the remaining text.\n\t(MSP430 Variable Attributes): Use uniform format for index\n\tentries and add a cross-reference to the corresponding function\n\tattribute docs.\n\nFrom-SVN: r232047", "tree": {"sha": "f69e27798b8b58705b17855f295edc8462a4c929", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f69e27798b8b58705b17855f295edc8462a4c929"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c9511d8faf728d3097fff5a9ec8a836b1790dc4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c9511d8faf728d3097fff5a9ec8a836b1790dc4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c9511d8faf728d3097fff5a9ec8a836b1790dc4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c9511d8faf728d3097fff5a9ec8a836b1790dc4/comments", "author": {"login": "SandraLoosemore", "id": 104087111, "node_id": "U_kgDOBjQ-Rw", "avatar_url": "https://avatars.githubusercontent.com/u/104087111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SandraLoosemore", "html_url": "https://github.com/SandraLoosemore", "followers_url": "https://api.github.com/users/SandraLoosemore/followers", "following_url": "https://api.github.com/users/SandraLoosemore/following{/other_user}", "gists_url": "https://api.github.com/users/SandraLoosemore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SandraLoosemore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SandraLoosemore/subscriptions", "organizations_url": "https://api.github.com/users/SandraLoosemore/orgs", "repos_url": "https://api.github.com/users/SandraLoosemore/repos", "events_url": "https://api.github.com/users/SandraLoosemore/events{/privacy}", "received_events_url": "https://api.github.com/users/SandraLoosemore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "db750ef997aa9bb8bc33d95420b13fe76240eaf7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db750ef997aa9bb8bc33d95420b13fe76240eaf7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db750ef997aa9bb8bc33d95420b13fe76240eaf7"}], "stats": {"total": 105, "additions": 49, "deletions": 56}, "files": [{"sha": "099682761b546daf982432ceb805fc107eaf840e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c9511d8faf728d3097fff5a9ec8a836b1790dc4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c9511d8faf728d3097fff5a9ec8a836b1790dc4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3c9511d8faf728d3097fff5a9ec8a836b1790dc4", "patch": "@@ -1,3 +1,13 @@\n+2016-01-03  Sandra Loosemore <sandra@codesourcery.com>\n+\n+\t* doc/extend.texi (Common Function Attributes): Move docs for\n+\tMSP430-specific attributes to....\n+\t(MSP430 Function Attributes): ...here.  Delete the redundant\n+\tentries and copy-edit the remaining text.\n+\t(MSP430 Variable Attributes): Use uniform format for index\n+\tentries and add a cross-reference to the corresponding function\n+\tattribute docs.\n+\n 2016-01-03  Vladim\u00edr \u010cun\u00e1t <vcunat@gmail.com>\n \n \t* doc/invoke.texi (RS/6000 and PowerPC Options): Fix"}, {"sha": "2e55328cdf6ad897cf261600f38f9e971c1fab0a", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 39, "deletions": 56, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c9511d8faf728d3097fff5a9ec8a836b1790dc4/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c9511d8faf728d3097fff5a9ec8a836b1790dc4/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=3c9511d8faf728d3097fff5a9ec8a836b1790dc4", "patch": "@@ -3394,55 +3394,6 @@ performing a reloadable link on them.\n At present, a declaration to which @code{weakref} is attached can\n only be @code{static}.\n \n-@item lower\n-@itemx upper\n-@itemx either\n-@cindex lower memory region on the MSP430\n-@cindex upper memory region on the MSP430\n-@cindex either memory region on the MSP430\n-On the MSP430 target these attributes can be used to specify whether\n-the function or variable should be placed into low memory, high\n-memory, or the placement should be left to the linker to decide.  The\n-attributes are only significant if compiling for the MSP430X\n-architecture.\n-\n-The attributes work in conjunction with a linker script that has been\n-augmented to specify where to place sections with a @code{.lower} and\n-a @code{.upper} prefix.  So for example as well as placing the\n-@code{.data} section the script would also specify the placement of a\n-@code{.lower.data} and a @code{.upper.data} section.  The intention\n-being that @code{lower} sections are placed into a small but easier to\n-access memory region and the upper sections are placed into a larger, but\n-slower to access region.\n-\n-The @code{either} attribute is special.  It tells the linker to place\n-the object into the corresponding @code{lower} section if there is\n-room for it.  If there is insufficient room then the object is placed\n-into the corresponding @code{upper} section instead.  Note - the\n-placement algorithm is not very sophisticated.  It will not attempt to\n-find an optimal packing of the @code{lower} sections.  It just makes\n-one pass over the objects and does the best that it can.  Using the\n-@option{-ffunction-sections} and @option{-fdata-sections} command line\n-options can help the packing however, since they produce smaller,\n-easier to pack regions.\n-\n-@item reentrant\n-On the MSP430 a function can be given the @code{reentant} attribute.\n-This makes the function disable interrupts upon entry and enable\n-interrupts upon exit.  Reentrant functions cannot be @code{naked}.\n-\n-@item critical\n-On the MSP430 a function can be given the @code{critical} attribute.\n-This makes the function disable interrupts upon entry and restore the\n-previous interrupt enabled/disabled state upon exit.  A function\n-cannot have both the @code{reentrant} and @code{critical} attributes.\n-Critical functions cannot be @code{naked}.\n-\n-@item wakeup\n-On the MSP430 a function can be given the @code{wakeup} attribute.\n-Such a function must also have the @code{interrupt} attribute.  When a\n-function with the @code{wakeup} attribute exists the processor will be\n-woken up from any low-power state in which it may be residing.\n \n @end table\n \n@@ -4531,6 +4482,38 @@ This attribute only applies to interrupt functions.  It is silently\n ignored if applied to a non-interrupt function.  A wakeup interrupt\n function will rouse the processor from any low-power state that it\n might be in when the function exits.\n+\n+@item lower\n+@itemx upper\n+@itemx either\n+@cindex @code{lower} function attribute, MSP430\n+@cindex @code{upper} function attribute, MSP430\n+@cindex @code{either} function attribute, MSP430\n+On the MSP430 target these attributes can be used to specify whether\n+the function or variable should be placed into low memory, high\n+memory, or the placement should be left to the linker to decide.  The\n+attributes are only significant if compiling for the MSP430X\n+architecture.\n+\n+The attributes work in conjunction with a linker script that has been\n+augmented to specify where to place sections with a @code{.lower} and\n+a @code{.upper} prefix.  So, for example, as well as placing the\n+@code{.data} section, the script also specifies the placement of a\n+@code{.lower.data} and a @code{.upper.data} section.  The intention\n+is that @code{lower} sections are placed into a small but easier to\n+access memory region and the upper sections are placed into a larger, but\n+slower to access, region.\n+\n+The @code{either} attribute is special.  It tells the linker to place\n+the object into the corresponding @code{lower} section if there is\n+room for it.  If there is insufficient room then the object is placed\n+into the corresponding @code{upper} section instead.  Note that the\n+placement algorithm is not very sophisticated.  It does not attempt to\n+find an optimal packing of the @code{lower} sections.  It just makes\n+one pass over the objects and does the best that it can.  Using the\n+@option{-ffunction-sections} and @option{-fdata-sections} command-line\n+options can help the packing, however, since they produce smaller,\n+easier to pack regions.\n @end table\n \n @node NDS32 Function Attributes\n@@ -6042,13 +6025,13 @@ The @code{shared} attribute is only available on Microsoft Windows@.\n \n @table @code\n @item noinit\n-@cindex @code{noinit} MSP430 variable attribute\n+@cindex @code{noinit} variable attribute, MSP430 \n Any data with the @code{noinit} attribute will not be initialised by\n the C runtime startup code, or the program loader.  Not initialising\n data in this way can reduce program startup times.\n \n @item persistent\n-@cindex @code{persistent} MSP430 variable attribute\n+@cindex @code{persistent} variable attribute, MSP430 \n Any variable with the @code{persistent} attribute will not be\n initialised by the C runtime startup code.  Instead its value will be\n set once, when the application is loaded, and then never initialised\n@@ -6061,12 +6044,12 @@ placed.\n @item lower\n @itemx upper\n @itemx either\n-@cindex @code{lower} memory region on the MSP430\n-@cindex @code{upper} memory region on the MSP430\n-@cindex @code{either} memory region on the MSP430\n+@cindex @code{lower} variable attribute, MSP430 \n+@cindex @code{upper} variable attribute, MSP430 \n+@cindex @code{either} variable attribute, MSP430 \n These attributes are the same as the MSP430 function attributes of the\n-same name.  These attributes can be applied to both functions and\n-variables.\n+same name (@pxref{MSP430 Function Attributes}).  \n+These attributes can be applied to both functions and variables.\n @end table\n \n @node PowerPC Variable Attributes"}]}