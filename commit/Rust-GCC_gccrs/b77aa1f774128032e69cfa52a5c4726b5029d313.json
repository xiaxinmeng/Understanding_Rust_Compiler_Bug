{"sha": "b77aa1f774128032e69cfa52a5c4726b5029d313", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjc3YWExZjc3NDEyODAzMmU2OWNmYTUyYTVjNDcyNmI1MDI5ZDMxMw==", "commit": {"author": {"name": "Andrew Pinski", "email": "pinskia@physics.uc.edu", "date": "2004-10-14T22:01:45Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2004-10-14T22:01:45Z"}, "message": "stmt.c (add_case_node): Make sure that we have integer constant before calling tree_int_cst_compare.\n\n2004-10-14  Andrew Pinski  <pinskia@physics.uc.edu>\n\n        * stmt.c (add_case_node): Make sure that we have integer\n        constant before calling tree_int_cst_compare.\n\nFrom-SVN: r89058", "tree": {"sha": "f7918bbe2d3560c746926c104702902d16a92e9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f7918bbe2d3560c746926c104702902d16a92e9f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b77aa1f774128032e69cfa52a5c4726b5029d313", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b77aa1f774128032e69cfa52a5c4726b5029d313", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b77aa1f774128032e69cfa52a5c4726b5029d313", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b77aa1f774128032e69cfa52a5c4726b5029d313/comments", "author": null, "committer": null, "parents": [{"sha": "4965c1630ef510db74c8e167f65703d1947870a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4965c1630ef510db74c8e167f65703d1947870a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4965c1630ef510db74c8e167f65703d1947870a1"}], "stats": {"total": 23, "additions": 17, "deletions": 6}, "files": [{"sha": "8f4d0337949a5235a8ec1431c2bf72b1f2bbce49", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b77aa1f774128032e69cfa52a5c4726b5029d313/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b77aa1f774128032e69cfa52a5c4726b5029d313/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b77aa1f774128032e69cfa52a5c4726b5029d313", "patch": "@@ -1,3 +1,8 @@\n+2004-10-14  Andrew Pinski  <pinskia@physics.uc.edu>\n+\n+\t* stmt.c (add_case_node): Make sure that we have integer\n+\tconstant before calling tree_int_cst_compare.\n+\n 2004-10-14  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \tPR middle-end/17967"}, {"sha": "a9bb3e6682ac2d09e3942dcdfdc6acd272dc4bc4", "filename": "gcc/stmt.c", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b77aa1f774128032e69cfa52a5c4726b5029d313/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b77aa1f774128032e69cfa52a5c4726b5029d313/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=b77aa1f774128032e69cfa52a5c4726b5029d313", "patch": "@@ -2139,28 +2139,34 @@ add_case_node (struct case_node *head, tree type, tree low, tree high,\n   if (!high || tree_int_cst_equal (low, high))\n     {\n       /* If the simple case value is unreachable, ignore it.  */\n-      if (tree_int_cst_compare (low, min_value) < 0\n-\t  || tree_int_cst_compare (low, max_value) > 0)\n+      if ((TREE_CODE (min_value) == INTEGER_CST\n+            && tree_int_cst_compare (low, min_value) < 0)\n+\t  || (TREE_CODE (max_value) == INTEGER_CST\n+\t      && tree_int_cst_compare (low, max_value) > 0))\n \treturn head;\n       low = fold_convert (type, low);\n       high = low;\n     }\n   else\n     {\n       /* If the entire case range is unreachable, ignore it.  */\n-      if (tree_int_cst_compare (high, min_value) < 0\n-\t  || tree_int_cst_compare (low, max_value) > 0)\n+      if ((TREE_CODE (min_value) == INTEGER_CST\n+            && tree_int_cst_compare (high, min_value) < 0)\n+\t  || (TREE_CODE (max_value) == INTEGER_CST\n+\t      && tree_int_cst_compare (low, max_value) > 0))\n \treturn head;\n \n       /* If the lower bound is less than the index type's minimum\n \t value, truncate the range bounds.  */\n-      if (tree_int_cst_compare (low, min_value) < 0)\n+      if (TREE_CODE (min_value) == INTEGER_CST\n+            && tree_int_cst_compare (low, min_value) < 0)\n \tlow = min_value;\n       low = fold_convert (type, low);\n \n       /* If the upper bound is greater than the index type's maximum\n \t value, truncate the range bounds.  */\n-      if (tree_int_cst_compare (high, max_value) > 0)\n+      if (TREE_CODE (max_value) == INTEGER_CST\n+\t  && tree_int_cst_compare (high, max_value) > 0)\n \thigh = max_value;\n       high = fold_convert (type, high);\n     }"}]}