{"sha": "2503de8d44bdfaf97b1ba1efb9455af3d206f911", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjUwM2RlOGQ0NGJkZmFmOTdiMWJhMWVmYjk0NTVhZjNkMjA2ZjkxMQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2010-11-11T22:08:26Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2010-11-11T22:08:26Z"}, "message": "re PR tree-optimization/40436 (0.5% code size regression caused by r147852)\n\n\tPR tree-optimize/40436\n\t* gcc.dg/tree-ssa/inline-5.c: New testcase.\n\t* gcc.dg/tree-ssa/inline-6.c: New testcase.\n\n\t* ipa-inline.c (likely_eliminated_by_inlining_p): Rename to ...\n\t(eliminated_by_inlining_prob): ... this one; return 50% probability for\n\tSRA.\n\t(estimate_function_body_sizes): Update use of eliminated_by_inlining_prob;\n\testimate static function size for 2 instructions.\n\nFrom-SVN: r166624", "tree": {"sha": "4800089d337a4a1815a383a54681ca2ef6d35280", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4800089d337a4a1815a383a54681ca2ef6d35280"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2503de8d44bdfaf97b1ba1efb9455af3d206f911", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2503de8d44bdfaf97b1ba1efb9455af3d206f911", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2503de8d44bdfaf97b1ba1efb9455af3d206f911", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2503de8d44bdfaf97b1ba1efb9455af3d206f911/comments", "author": null, "committer": null, "parents": [{"sha": "8be3d7da69db5781f0f6004c1fdadf1eab2f736d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8be3d7da69db5781f0f6004c1fdadf1eab2f736d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8be3d7da69db5781f0f6004c1fdadf1eab2f736d"}], "stats": {"total": 141, "additions": 118, "deletions": 23}, "files": [{"sha": "8ae4ecb822348cc50839d627a944ceaddd4e1017", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2503de8d44bdfaf97b1ba1efb9455af3d206f911/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2503de8d44bdfaf97b1ba1efb9455af3d206f911/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2503de8d44bdfaf97b1ba1efb9455af3d206f911", "patch": "@@ -1,3 +1,12 @@\n+2010-11-11  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR tree-optimize/40436\n+\t* ipa-inline.c (likely_eliminated_by_inlining_p): Rename to ...\n+\t(eliminated_by_inlining_prob): ... this one; return 50% probability for\n+\tSRA.\n+\t(estimate_function_body_sizes): Update use of eliminated_by_inlining_prob;\n+\testimate static function size for 2 instructions.\n+\n 2010-11-11  Joern Rennecke  <amylaar@spamcop.net>\n \n \tPR target/44749"}, {"sha": "e8c78f9f5fb7c78afdf6f9b90960bc5ad83b3c6d", "filename": "gcc/ipa-inline.c", "status": "modified", "additions": 32, "deletions": 22, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2503de8d44bdfaf97b1ba1efb9455af3d206f911/gcc%2Fipa-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2503de8d44bdfaf97b1ba1efb9455af3d206f911/gcc%2Fipa-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.c?ref=2503de8d44bdfaf97b1ba1efb9455af3d206f911", "patch": "@@ -1861,24 +1861,29 @@ struct gimple_opt_pass pass_early_inline =\n };\n \n \n-/* See if statement might disappear after inlining.  We are not terribly\n-   sophisficated, basically looking for simple abstraction penalty wrappers.  */\n+/* See if statement might disappear after inlining.\n+   0 - means not eliminated\n+   1 - half of statements goes away\n+   2 - for sure it is eliminated.\n+   We are not terribly sophisficated, basically looking for simple abstraction\n+   penalty wrappers.  */\n \n-static bool\n-likely_eliminated_by_inlining_p (gimple stmt)\n+static int\n+eliminated_by_inlining_prob (gimple stmt)\n {\n   enum gimple_code code = gimple_code (stmt);\n   switch (code)\n     {\n       case GIMPLE_RETURN:\n-        return true;\n+        return 2;\n       case GIMPLE_ASSIGN:\n \tif (gimple_num_ops (stmt) != 2)\n-\t  return false;\n+\t  return 0;\n \n \t/* Casts of parameters, loads from parameters passed by reference\n-\t   and stores to return value or parameters are probably free after\n-\t   inlining.  */\n+\t   and stores to return value or parameters are often free after\n+\t   inlining dua to SRA and further combining.\n+\t   Assume that half of statements goes away.  */\n \tif (gimple_assign_rhs_code (stmt) == CONVERT_EXPR\n \t    || gimple_assign_rhs_code (stmt) == NOP_EXPR\n \t    || gimple_assign_rhs_code (stmt) == VIEW_CONVERT_EXPR\n@@ -1920,11 +1925,11 @@ likely_eliminated_by_inlining_p (gimple stmt)\n \t\t&& (is_gimple_reg (rhs) || is_gimple_min_invariant (rhs)))\n \t      rhs_free = true;\n \t    if (lhs_free && rhs_free)\n-\t      return true;\n+\t      return 1;\n \t  }\n-\treturn false;\n+\treturn 0;\n       default:\n-\treturn false;\n+\treturn 0;\n     }\n }\n \n@@ -1935,8 +1940,11 @@ estimate_function_body_sizes (struct cgraph_node *node)\n {\n   gcov_type time = 0;\n   gcov_type time_inlining_benefit = 0;\n-  int size = 0;\n-  int size_inlining_benefit = 0;\n+  /* Estimate static overhead for function prologue/epilogue and alignment. */\n+  int size = 2;\n+  /* Benefits are scaled by probability of elimination that is in range\n+     <0,2>.  */\n+  int size_inlining_benefit = 2 * 2;\n   basic_block bb;\n   gimple_stmt_iterator bsi;\n   struct function *my_function = DECL_STRUCT_FUNCTION (node->decl);\n@@ -1957,6 +1965,7 @@ estimate_function_body_sizes (struct cgraph_node *node)\n \t  gimple stmt = gsi_stmt (bsi);\n \t  int this_size = estimate_num_insns (stmt, &eni_size_weights);\n \t  int this_time = estimate_num_insns (stmt, &eni_time_weights);\n+\t  int prob;\n \n \t  if (dump_file && (dump_flags & TDF_DETAILS))\n \t    {\n@@ -1967,20 +1976,21 @@ estimate_function_body_sizes (struct cgraph_node *node)\n \t  this_time *= freq;\n \t  time += this_time;\n \t  size += this_size;\n-\t  if (likely_eliminated_by_inlining_p (stmt))\n-\t    {\n-\t      size_inlining_benefit += this_size;\n-\t      time_inlining_benefit += this_time;\n-\t      if (dump_file && (dump_flags & TDF_DETAILS))\n-\t\tfprintf (dump_file, \"    Likely eliminated\\n\");\n-\t    }\n+\t  prob = eliminated_by_inlining_prob (stmt);\n+\t  if (prob == 1 && dump_file && (dump_flags & TDF_DETAILS))\n+\t    fprintf (dump_file, \"    50%% will be eliminated by inlining\\n\");\n+\t  if (prob == 2 && dump_file && (dump_flags & TDF_DETAILS))\n+\t    fprintf (dump_file, \"    will eliminated by inlining\\n\");\n+\t  size_inlining_benefit += this_size * prob;\n+\t  time_inlining_benefit += this_time * prob;\n \t  gcc_assert (time >= 0);\n \t  gcc_assert (size >= 0);\n \t}\n     }\n   time = (time + CGRAPH_FREQ_BASE / 2) / CGRAPH_FREQ_BASE;\n-  time_inlining_benefit = ((time_inlining_benefit + CGRAPH_FREQ_BASE / 2)\n-  \t\t\t   / CGRAPH_FREQ_BASE);\n+  time_inlining_benefit = ((time_inlining_benefit + CGRAPH_FREQ_BASE)\n+  \t\t\t   / (CGRAPH_FREQ_BASE * 2));\n+  size_inlining_benefit = (size_inlining_benefit + 1) / 2;\n   if (dump_file)\n     fprintf (dump_file, \"Overall function body time: %i-%i size: %i-%i\\n\",\n \t     (int)time, (int)time_inlining_benefit,"}, {"sha": "821ad573011a0cd47a2706b554a23c22dfc579fd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2503de8d44bdfaf97b1ba1efb9455af3d206f911/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2503de8d44bdfaf97b1ba1efb9455af3d206f911/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2503de8d44bdfaf97b1ba1efb9455af3d206f911", "patch": "@@ -1,9 +1,14 @@\n+2010-11-11  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR tree-optimize/40436\n+\t* gcc.dg/tree-ssa/inline-5.c: New testcase.\n+\t* gcc.dg/tree-ssa/inline-6.c: New testcase.\n+\n 2010-11-11  Janus Weil  <janus@gcc.gnu.org>\n \n \t* gfortran.dg/proc_decl_24.f90: New.\n \n 2010-11-11  Nicola Pero  <nicola.pero@meta-innovation.com>\n-\n \t* objc.dg/property/at-property-20.m: New.\n \t* objc.dg/property/synthesize-8.m: New.\t\n \t* obj-c++.dg/property/at-property-20.m: New."}, {"sha": "1cac5ba010e8ce332d883a4fa2145fbcc3b36fd1", "filename": "gcc/testsuite/gcc.dg/tree-ssa/inline-5.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2503de8d44bdfaf97b1ba1efb9455af3d206f911/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Finline-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2503de8d44bdfaf97b1ba1efb9455af3d206f911/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Finline-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Finline-5.c?ref=2503de8d44bdfaf97b1ba1efb9455af3d206f911", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Os -fdump-tree-optimize\" } */\n+struct a {int a,b,c,d,e,f;};\n+\n+do_inc (struct a *a)\n+{\n+  a->a=a->b;\n+  a->b=a->c;\n+  a->c=a->d;\n+  a->e=a->f;\n+}\n+\n+test(struct a *a)\n+{\n+  do_inc (a);\n+  do_something (a);\n+  do_inc (a);\n+  do_something (a);\n+  do_inc (a);\n+  do_something (a);\n+  do_inc (a);\n+  do_something (a);\n+  do_inc (a);\n+  do_something (a);\n+  do_inc (a);\n+  do_something (a);\n+  do_inc (a);\n+  do_something (a);\n+  do_inc (a);\n+  do_something (a);\n+  do_inc (a);\n+  do_something (a);\n+}\n+/* { dg-final { scan-tree-dump-times \"do_inc.*;\" 10 \"optimized\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "b6ee91d057538ccfb8d1e055cb7eb46c90be3e3f", "filename": "gcc/testsuite/gcc.dg/tree-ssa/inline-6.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2503de8d44bdfaf97b1ba1efb9455af3d206f911/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Finline-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2503de8d44bdfaf97b1ba1efb9455af3d206f911/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Finline-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Finline-6.c?ref=2503de8d44bdfaf97b1ba1efb9455af3d206f911", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Os -fdump-tree-optimize\" } */\n+struct a {int a,b,c,d,e,f;};\n+\n+do_inc (struct a *a)\n+{\n+  a->a=1;\n+  a->b=2;\n+  a->c=3;\n+  a->e=4;\n+  a->f=5;\n+}\n+\n+test(struct a *a)\n+{\n+  do_inc (a);\n+  do_something (a);\n+  do_inc (a);\n+  do_something (a);\n+  do_inc (a);\n+  do_something (a);\n+  do_inc (a);\n+  do_something (a);\n+  do_inc (a);\n+  do_something (a);\n+  do_inc (a);\n+  do_something (a);\n+  do_inc (a);\n+  do_something (a);\n+  do_inc (a);\n+  do_something (a);\n+  do_inc (a);\n+  do_something (a);\n+}\n+/* { dg-final { scan-tree-dump-times \"do_inc.*;\" 10 \"optimized\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}]}