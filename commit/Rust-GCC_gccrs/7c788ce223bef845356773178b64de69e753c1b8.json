{"sha": "7c788ce223bef845356773178b64de69e753c1b8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2M3ODhjZTIyM2JlZjg0NTM1Njc3MzE3OGI2NGRlNjllNzUzYzFiOA==", "commit": {"author": {"name": "Pat Haugen", "email": "pthaugen@us.ibm.com", "date": "2016-06-28T03:14:54Z"}, "committer": {"name": "Pat Haugen", "email": "pthaugen@gcc.gnu.org", "date": "2016-06-28T03:14:54Z"}, "message": "rs6000.md ('type' attribute): Add veclogical,veccmpfx,vecexts,vecmove insn types.\n\n\t* config/rs6000/rs6000.md ('type' attribute): Add\n\tveclogical,veccmpfx,vecexts,vecmove insn types.\n\t(*abs<mode>2_fpr, *nabs<mode>2_fpr, *neg<mode>2_fpr, *extendsfdf2_fpr,\n\tcopysign<mode>3_fcpsgn, trunc<mode>df2_internal1, neg<mode>2_internal,\n\tp8_fmrgow_<mode>, pack<mode>): Change type to fpsimple.\n\t(*xxsel<mode>, copysign<mode>3_hard, neg<mode>2_hw, abs<mode>2_hw,\n\t*nabs<mode>2_hw): Change type to vecmove.\n\t(*and<mode>3_internal, *bool<mode>3_internal, *boolc<mode>3_internal,\n\t*boolcc<mode>3_internal, *eqv<mode>3_internal,\n\t*one_cmpl<mode>3_internal, *ieee_128bit_vsx_neg<mode>2_internal,\n\t*ieee_128bit_vsx_abs<mode>2_internal,\n\t*ieee_128bit_vsx_nabs<mode>2_internal, extendkftf2, trunctfkf2,\n\t*ieee128_mfvsrd_64bit, *ieee128_mfvsrd_32bit, *ieee128_mtvsrd_64bit,\n\t*ieee128_mtvsrd_32bit): Change type to veclogical.\n\t(mov<mode>_hardfloat, *mov<mode>_hardfloat32, *mov<mode>_hardfloat64,\n\t*movdi_internal32, *movdi_internal64): Update insn types.\n\t* config/rs6000/vsx.md (*vsx_le_undo_permute_<mode>,\n\tvsx_extract_<mode>): Change type to veclogical.\n\t(*vsx_xxsel<mode>, *vsx_xxsel<mode>_uns): Change type to vecmove.\n\t(vsx_sign_extend_qi_<mode>, *vsx_sign_extend_hi_<mode>,\n\t*vsx_sign_extend_si_v2di): Change type to vecexts.\n\t* config/rs6000/altivec.md (*altivec_mov<mode>, *altivec_movti): Change\n\ttype to veclogical.\n\t(*altivec_eq<mode>, *altivec_gt<mode>, *altivec_gtu<mode>,\n\t*altivec_vcmpequ<VI_char>_p, *altivec_vcmpgts<VI_char>_p,\n\t*altivec_vcmpgtu<VI_char>_p): Change type to veccmpfx.\n\t(*altivec_vsel<mode>, *altivec_vsel<mode>_uns): Change type to vecmove.\n\t* config/rs6000/dfp.md (*negdd2_fpr, *absdd2_fpr, *nabsdd2_fpr,\n\tnegtd2, *abstd2_fpr, *nabstd2_fpr): Change type to fpsimple.\n\t* config/rs6000/40x.md (ppc405-float): Add fpsimple.\n\t* config/rs6000/440.md (ppc440-fp): Add fpsimple.\n\t* config/rs6000/476.md (ppc476-fp): Add fpsimple.\n\t* config/rs6000/601.md (ppc601-fp): Add fpsimple.\n\t* config/rs6000/603.md (ppc603-fp): Add fpsimple.\n\t* config/rs6000/6xx.md (ppc604-fp): Add fpsimple.\n\t* config/rs6000/7xx.md (ppc750-fp): Add fpsimple.\n\t(ppc7400-vecsimple): Add veclogical, vecmove, veccmpfx.\n\t* config/rs6000/7450.md (ppc7450-fp): Add fpsimple.\n\t(ppc7450-vecsimple): Add veclogical, vecmove.\n\t(ppc7450-veccmp): Add veccmpfx.\n\t* config/rs6000/8540.md (ppc8540_simple_vector): Add veclogical,\n\tvecmove.\n\t(ppc8540_vector_compare): Add veccmpfx.\n\t* config/rs6000/a2.md (ppca2-fp): Add fpsimple.\n\t* config/rs6000/cell.md (cell-fp): Add fpsimple.\n\t(cell-vecsimple): Add veclogical, vecmove.\n\t(cell-veccmp): Add veccmpfx.\n\t* config/rs6000/e300c2c3.md (ppce300c3_fp): Add fpsimple.\n\t* config/rs6000/e6500.md (e6500_vecsimple): Add veclogical, vecmove,\n\tveccmpfx.\n\t* config/rs6000/mpc.md (mpccore-fp): Add fpsimple.\n\t * config/rs6000/power4.md (power4-fp): Add fpsimple.\n\t(power4-vecsimple): Add veclogical, vecmove.\n\t(power4-veccmp): Add veccmpfx.\n\t* config/rs6000/power5.md (power5-fp): Add fpsimple.\n\t* config/rs6000/power6.md (power6-fp): Add fpsimple.\n\t(power6-vecsimple): Add veclogical, vecmove.\n\t(power6-veccmp): Add veccmpfx.\n\t* config/rs6000/power7.md (power7-fp): Add fpsimple.\n\t(power7-vecsimple): Add veclogical, vecmove, veccmpfx.\n\t* config/rs6000/power8.md (power8-fp): Add fpsimple.\n\t(power8-vecsimple): Add veclogical, vecmove, veccmpfx.\n\t* config/rs6000/rs64.md (rs64a-fp): Add fpsimple.\n\t* config/rs6000/titan.md (titan_fp): Add fpsimple.\n\t* config/rs6000/xfpu.md (fp-default, fp-addsub-s, fp-addsub-d): Add\n\tfpsimple.\n\t* config/rs6000/rs6000.c (rs6000_adjust_cost): Add TYPE_FPSIMPLE.\n\nFrom-SVN: r237812", "tree": {"sha": "0879d080bbe2fb45170ef3caa18fb3bd3311b4db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0879d080bbe2fb45170ef3caa18fb3bd3311b4db"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7c788ce223bef845356773178b64de69e753c1b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c788ce223bef845356773178b64de69e753c1b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c788ce223bef845356773178b64de69e753c1b8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c788ce223bef845356773178b64de69e753c1b8/comments", "author": null, "committer": null, "parents": [{"sha": "0dc47331b8bbb633fc3783b0d5dc9cec19b2c6b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0dc47331b8bbb633fc3783b0d5dc9cec19b2c6b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0dc47331b8bbb633fc3783b0d5dc9cec19b2c6b0"}], "stats": {"total": 274, "additions": 174, "deletions": 100}, "files": [{"sha": "4c91c5f85222d4b779452d845927a7de06a345e0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c788ce223bef845356773178b64de69e753c1b8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c788ce223bef845356773178b64de69e753c1b8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7c788ce223bef845356773178b64de69e753c1b8", "patch": "@@ -1,3 +1,73 @@\n+2016-06-27  Pat Haugen  <pthaugen@us.ibm.com>\n+\n+\t* config/rs6000/rs6000.md ('type' attribute): Add\n+\tveclogical,veccmpfx,vecexts,vecmove insn types.\n+\t(*abs<mode>2_fpr, *nabs<mode>2_fpr, *neg<mode>2_fpr, *extendsfdf2_fpr,\n+\tcopysign<mode>3_fcpsgn, trunc<mode>df2_internal1, neg<mode>2_internal,\n+\tp8_fmrgow_<mode>, pack<mode>): Change type to fpsimple.\n+\t(*xxsel<mode>, copysign<mode>3_hard, neg<mode>2_hw, abs<mode>2_hw,\n+\t*nabs<mode>2_hw): Change type to vecmove.\n+\t(*and<mode>3_internal, *bool<mode>3_internal, *boolc<mode>3_internal,\n+\t*boolcc<mode>3_internal, *eqv<mode>3_internal,\n+\t*one_cmpl<mode>3_internal, *ieee_128bit_vsx_neg<mode>2_internal,\n+\t*ieee_128bit_vsx_abs<mode>2_internal,\n+\t*ieee_128bit_vsx_nabs<mode>2_internal, extendkftf2, trunctfkf2,\n+\t*ieee128_mfvsrd_64bit, *ieee128_mfvsrd_32bit, *ieee128_mtvsrd_64bit,\n+\t*ieee128_mtvsrd_32bit): Change type to veclogical.\n+\t(mov<mode>_hardfloat, *mov<mode>_hardfloat32, *mov<mode>_hardfloat64,\n+\t*movdi_internal32, *movdi_internal64): Update insn types.\n+\t* config/rs6000/vsx.md (*vsx_le_undo_permute_<mode>,\n+\tvsx_extract_<mode>): Change type to veclogical.\n+\t(*vsx_xxsel<mode>, *vsx_xxsel<mode>_uns): Change type to vecmove.\n+\t(vsx_sign_extend_qi_<mode>, *vsx_sign_extend_hi_<mode>,\n+\t*vsx_sign_extend_si_v2di): Change type to vecexts.\n+\t* config/rs6000/altivec.md (*altivec_mov<mode>, *altivec_movti): Change\n+\ttype to veclogical.\n+\t(*altivec_eq<mode>, *altivec_gt<mode>, *altivec_gtu<mode>,\n+\t*altivec_vcmpequ<VI_char>_p, *altivec_vcmpgts<VI_char>_p,\n+\t*altivec_vcmpgtu<VI_char>_p): Change type to veccmpfx.\n+\t(*altivec_vsel<mode>, *altivec_vsel<mode>_uns): Change type to vecmove.\n+\t* config/rs6000/dfp.md (*negdd2_fpr, *absdd2_fpr, *nabsdd2_fpr,\n+\tnegtd2, *abstd2_fpr, *nabstd2_fpr): Change type to fpsimple.\n+\t* config/rs6000/40x.md (ppc405-float): Add fpsimple.\n+\t* config/rs6000/440.md (ppc440-fp): Add fpsimple.\n+\t* config/rs6000/476.md (ppc476-fp): Add fpsimple.\n+\t* config/rs6000/601.md (ppc601-fp): Add fpsimple.\n+\t* config/rs6000/603.md (ppc603-fp): Add fpsimple.\n+\t* config/rs6000/6xx.md (ppc604-fp): Add fpsimple.\n+\t* config/rs6000/7xx.md (ppc750-fp): Add fpsimple.\n+\t(ppc7400-vecsimple): Add veclogical, vecmove, veccmpfx.\n+\t* config/rs6000/7450.md (ppc7450-fp): Add fpsimple.\n+\t(ppc7450-vecsimple): Add veclogical, vecmove.\n+\t(ppc7450-veccmp): Add veccmpfx.\n+\t* config/rs6000/8540.md (ppc8540_simple_vector): Add veclogical,\n+\tvecmove.\n+\t(ppc8540_vector_compare): Add veccmpfx.\n+\t* config/rs6000/a2.md (ppca2-fp): Add fpsimple.\n+\t* config/rs6000/cell.md (cell-fp): Add fpsimple.\n+\t(cell-vecsimple): Add veclogical, vecmove.\n+\t(cell-veccmp): Add veccmpfx.\n+\t* config/rs6000/e300c2c3.md (ppce300c3_fp): Add fpsimple.\n+\t* config/rs6000/e6500.md (e6500_vecsimple): Add veclogical, vecmove,\n+\tveccmpfx.\n+\t* config/rs6000/mpc.md (mpccore-fp): Add fpsimple.\n+\t* config/rs6000/power4.md (power4-fp): Add fpsimple.\n+\t(power4-vecsimple): Add veclogical, vecmove.\n+\t(power4-veccmp): Add veccmpfx.\n+\t* config/rs6000/power5.md (power5-fp): Add fpsimple.\n+\t* config/rs6000/power6.md (power6-fp): Add fpsimple.\n+\t(power6-vecsimple): Add veclogical, vecmove.\n+\t(power6-veccmp): Add veccmpfx.\n+\t* config/rs6000/power7.md (power7-fp): Add fpsimple.\n+\t(power7-vecsimple): Add veclogical, vecmove, veccmpfx.\n+\t* config/rs6000/power8.md (power8-fp): Add fpsimple.\n+\t(power8-vecsimple): Add veclogical, vecmove, veccmpfx.\n+\t* config/rs6000/rs64.md (rs64a-fp): Add fpsimple.\n+\t* config/rs6000/titan.md (titan_fp): Add fpsimple.\n+\t* config/rs6000/xfpu.md (fp-default, fp-addsub-s, fp-addsub-d): Add\n+\tfpsimple.\n+\t* config/rs6000/rs6000.c (rs6000_adjust_cost): Add TYPE_FPSIMPLE.\n+\n 2016-06-27  Peter Bergner  <bergner@vnet.ibm.com>\n \n \tPR target/71656"}, {"sha": "98d9ae02ba41e9c9ce33d9d40864285c47d66a21", "filename": "gcc/config/rs6000/40x.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c788ce223bef845356773178b64de69e753c1b8/gcc%2Fconfig%2Frs6000%2F40x.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c788ce223bef845356773178b64de69e753c1b8/gcc%2Fconfig%2Frs6000%2F40x.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2F40x.md?ref=7c788ce223bef845356773178b64de69e753c1b8", "patch": "@@ -119,6 +119,6 @@\n   \"bpu_40x\")\n \n (define_insn_reservation \"ppc405-float\" 11\n-  (and (eq_attr \"type\" \"fpload,fpstore,fpcompare,fp,dmul,sdiv,ddiv\")\n+  (and (eq_attr \"type\" \"fpload,fpstore,fpcompare,fp,fpsimple,dmul,sdiv,ddiv\")\n        (eq_attr \"cpu\" \"ppc405\"))\n   \"fpu_405*10\")"}, {"sha": "c33f4accb00a6193f5fcc56d3f04f8a0fb0cbf6e", "filename": "gcc/config/rs6000/440.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c788ce223bef845356773178b64de69e753c1b8/gcc%2Fconfig%2Frs6000%2F440.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c788ce223bef845356773178b64de69e753c1b8/gcc%2Fconfig%2Frs6000%2F440.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2F440.md?ref=7c788ce223bef845356773178b64de69e753c1b8", "patch": "@@ -107,7 +107,7 @@\n   \"ppc440_issue,ppc440_f_pipe+ppc440_i_pipe\")\n \n (define_insn_reservation \"ppc440-fp\" 5\n-  (and (eq_attr \"type\" \"fp,dmul\")\n+  (and (eq_attr \"type\" \"fp,fpsimple,dmul\")\n        (eq_attr \"cpu\" \"ppc440\"))\n   \"ppc440_issue,ppc440_f_pipe\")\n "}, {"sha": "4cae8fcc9e0b82c6ed4d937ae935ce7b380df1e7", "filename": "gcc/config/rs6000/476.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c788ce223bef845356773178b64de69e753c1b8/gcc%2Fconfig%2Frs6000%2F476.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c788ce223bef845356773178b64de69e753c1b8/gcc%2Fconfig%2Frs6000%2F476.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2F476.md?ref=7c788ce223bef845356773178b64de69e753c1b8", "patch": "@@ -124,7 +124,7 @@\n    ppc476_f_pipe+ppc476_i_pipe\")\n \n (define_insn_reservation \"ppc476-fp\" 6\n-  (and (eq_attr \"type\" \"fp,dmul\")\n+  (and (eq_attr \"type\" \"fp,fpsimple,dmul\")\n        (eq_attr \"cpu\" \"ppc476\"))\n   \"ppc476_issue_fp,\\\n    ppc476_f_pipe\")"}, {"sha": "aa869d86d8a8dad330542334ec2939930b8784b2", "filename": "gcc/config/rs6000/601.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c788ce223bef845356773178b64de69e753c1b8/gcc%2Fconfig%2Frs6000%2F601.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c788ce223bef845356773178b64de69e753c1b8/gcc%2Fconfig%2Frs6000%2F601.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2F601.md?ref=7c788ce223bef845356773178b64de69e753c1b8", "patch": "@@ -86,7 +86,7 @@\n   \"(fpu_ppc601+iu_ppc601*2),nothing*2,bpu_ppc601\")\n \n (define_insn_reservation \"ppc601-fp\" 4\n-  (and (eq_attr \"type\" \"fp\")\n+  (and (eq_attr \"type\" \"fp,fpsimple\")\n        (eq_attr \"cpu\" \"ppc601\"))\n   \"fpu_ppc601\")\n "}, {"sha": "052c1c1c95a947fec2cdc7fb86865521b3ddfc3a", "filename": "gcc/config/rs6000/603.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c788ce223bef845356773178b64de69e753c1b8/gcc%2Fconfig%2Frs6000%2F603.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c788ce223bef845356773178b64de69e753c1b8/gcc%2Fconfig%2Frs6000%2F603.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2F603.md?ref=7c788ce223bef845356773178b64de69e753c1b8", "patch": "@@ -105,7 +105,7 @@\n   \"(fpu_603+iu_603*2),bpu_603\")\n \n (define_insn_reservation \"ppc603-fp\" 3\n-  (and (eq_attr \"type\" \"fp\")\n+  (and (eq_attr \"type\" \"fp,fpsimple\")\n        (eq_attr \"cpu\" \"ppc603\"))\n   \"fpu_603\")\n "}, {"sha": "3ab80a2b263b5df1e1a6f6852b450ddfb1917ecc", "filename": "gcc/config/rs6000/6xx.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c788ce223bef845356773178b64de69e753c1b8/gcc%2Fconfig%2Frs6000%2F6xx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c788ce223bef845356773178b64de69e753c1b8/gcc%2Fconfig%2Frs6000%2F6xx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2F6xx.md?ref=7c788ce223bef845356773178b64de69e753c1b8", "patch": "@@ -160,7 +160,7 @@\n   \"fpu_6xx\")\n \n (define_insn_reservation \"ppc604-fp\" 3\n-  (and (eq_attr \"type\" \"fp\")\n+  (and (eq_attr \"type\" \"fp,fpsimple\")\n        (eq_attr \"cpu\" \"ppc604,ppc604e,ppc620\"))\n   \"fpu_6xx\")\n "}, {"sha": "0ebf6fa0cd586da997a3a06cfdc9d9b199a57fbd", "filename": "gcc/config/rs6000/7450.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c788ce223bef845356773178b64de69e753c1b8/gcc%2Fconfig%2Frs6000%2F7450.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c788ce223bef845356773178b64de69e753c1b8/gcc%2Fconfig%2Frs6000%2F7450.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2F7450.md?ref=7c788ce223bef845356773178b64de69e753c1b8", "patch": "@@ -120,7 +120,7 @@\n   \"ppc7450_du,fpu_7450\")\n \n (define_insn_reservation \"ppc7450-fp\" 5\n-  (and (eq_attr \"type\" \"fp,dmul\")\n+  (and (eq_attr \"type\" \"fp,fpsimple,dmul\")\n        (eq_attr \"cpu\" \"ppc7450\"))\n   \"ppc7450_du,fpu_7450\")\n \n@@ -162,7 +162,7 @@\n \n ;; Altivec\n (define_insn_reservation \"ppc7450-vecsimple\" 1\n-  (and (eq_attr \"type\" \"vecsimple\")\n+  (and (eq_attr \"type\" \"vecsimple,veclogical,vecmove\")\n        (eq_attr \"cpu\" \"ppc7450\"))\n   \"ppc7450_du,ppc7450_vec_du,vecsmpl_7450\")\n \n@@ -172,7 +172,7 @@\n   \"ppc7450_du,ppc7450_vec_du,veccmplx_7450\")\n \n (define_insn_reservation \"ppc7450-veccmp\" 2\n-  (and (eq_attr \"type\" \"veccmp\")\n+  (and (eq_attr \"type\" \"veccmp,veccmpfx\")\n        (eq_attr \"cpu\" \"ppc7450\"))\n   \"ppc7450_du,ppc7450_vec_du,veccmplx_7450\")\n "}, {"sha": "70e2eb17f12b1ce8e017a0f3f76b983e775dcb74", "filename": "gcc/config/rs6000/7xx.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c788ce223bef845356773178b64de69e753c1b8/gcc%2Fconfig%2Frs6000%2F7xx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c788ce223bef845356773178b64de69e753c1b8/gcc%2Fconfig%2Frs6000%2F7xx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2F7xx.md?ref=7c788ce223bef845356773178b64de69e753c1b8", "patch": "@@ -113,7 +113,7 @@\n   \"ppc750_du,fpu_7xx\")\n \n (define_insn_reservation \"ppc750-fp\" 3\n-  (and (eq_attr \"type\" \"fp\")\n+  (and (eq_attr \"type\" \"fp,fpsimple\")\n        (eq_attr \"cpu\" \"ppc750,ppc7400\"))\n   \"ppc750_du,fpu_7xx\")\n \n@@ -165,7 +165,7 @@\n \n ;; Altivec\n (define_insn_reservation \"ppc7400-vecsimple\" 1\n-  (and (eq_attr \"type\" \"vecsimple,veccmp\")\n+  (and (eq_attr \"type\" \"vecsimple,veclogical,vecmove,veccmp,veccmpfx\")\n        (eq_attr \"cpu\" \"ppc7400\"))\n   \"ppc750_du,ppc7400_vec_du,veccmplx_7xx\")\n "}, {"sha": "f39f1f675131f068b6ea53ecbc5df9ffdd38141e", "filename": "gcc/config/rs6000/8540.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c788ce223bef845356773178b64de69e753c1b8/gcc%2Fconfig%2Frs6000%2F8540.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c788ce223bef845356773178b64de69e753c1b8/gcc%2Fconfig%2Frs6000%2F8540.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2F8540.md?ref=7c788ce223bef845356773178b64de69e753c1b8", "patch": "@@ -190,7 +190,7 @@\n \n ;; Simple vector\n (define_insn_reservation \"ppc8540_simple_vector\" 1\n-  (and (eq_attr \"type\" \"vecsimple\")\n+  (and (eq_attr \"type\" \"vecsimple,veclogical,vecmove\")\n        (eq_attr \"cpu\" \"ppc8540,ppc8548\"))\n   \"ppc8540_decode,ppc8540_issue+ppc8540_su1_stage0+ppc8540_retire\")\n \n@@ -202,7 +202,7 @@\n \n ;; Vector compare\n (define_insn_reservation \"ppc8540_vector_compare\" 1\n-  (and (eq_attr \"type\" \"veccmp\")\n+  (and (eq_attr \"type\" \"veccmp,veccmpfx\")\n        (eq_attr \"cpu\" \"ppc8540,ppc8548\"))\n   \"ppc8540_decode,ppc8540_issue+ppc8540_su1_stage0+ppc8540_retire\")\n "}, {"sha": "e0b800ce61bdcf86415a51aa44b6b5cd1d6dd299", "filename": "gcc/config/rs6000/a2.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c788ce223bef845356773178b64de69e753c1b8/gcc%2Fconfig%2Frs6000%2Fa2.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c788ce223bef845356773178b64de69e753c1b8/gcc%2Fconfig%2Frs6000%2Fa2.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fa2.md?ref=7c788ce223bef845356773178b64de69e753c1b8", "patch": "@@ -81,7 +81,7 @@\n \n ;; D.8.1\n (define_insn_reservation \"ppca2-fp\" 6\n-  (and (eq_attr \"type\" \"fp\")     \t   ;; Ignore fpsimple insn types (SPE only).\n+  (and (eq_attr \"type\" \"fp,fpsimple\")\n        (eq_attr \"cpu\" \"ppca2\"))\n   \"axu\")\n "}, {"sha": "fcc00b515bb5bef1bfdc2305634876bbf9e9b32e", "filename": "gcc/config/rs6000/altivec.md", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c788ce223bef845356773178b64de69e753c1b8/gcc%2Fconfig%2Frs6000%2Faltivec.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c788ce223bef845356773178b64de69e753c1b8/gcc%2Fconfig%2Frs6000%2Faltivec.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.md?ref=7c788ce223bef845356773178b64de69e753c1b8", "patch": "@@ -242,7 +242,7 @@\n     default: gcc_unreachable ();\n     }\n }\n-  [(set_attr \"type\" \"vecstore,vecload,vecsimple,store,load,*,vecsimple,*,*\")\n+  [(set_attr \"type\" \"vecstore,vecload,veclogical,store,load,*,veclogical,*,*\")\n    (set_attr \"length\" \"4,4,4,20,20,20,4,8,32\")])\n \n ;; Unlike other altivec moves, allow the GPRs, since a normal use of TImode\n@@ -268,7 +268,7 @@\n     default: gcc_unreachable ();\n     }\n }\n-  [(set_attr \"type\" \"vecstore,vecload,vecsimple,store,load,*,vecsimple,*\")])\n+  [(set_attr \"type\" \"vecstore,vecload,veclogical,store,load,*,veclogical,*\")])\n \n ;; Load up a vector with the most significant bit set by loading up -1 and\n ;; doing a shift left\n@@ -603,23 +603,23 @@\n \t\t(match_operand:VI2 2 \"altivec_register_operand\" \"v\")))]\n   \"<VI_unit>\"\n   \"vcmpequ<VI_char> %0,%1,%2\"\n-  [(set_attr \"type\" \"veccmp\")])\n+  [(set_attr \"type\" \"veccmpfx\")])\n \n (define_insn \"*altivec_gt<mode>\"\n   [(set (match_operand:VI2 0 \"altivec_register_operand\" \"=v\")\n \t(gt:VI2 (match_operand:VI2 1 \"altivec_register_operand\" \"v\")\n \t\t(match_operand:VI2 2 \"altivec_register_operand\" \"v\")))]\n   \"<VI_unit>\"\n   \"vcmpgts<VI_char> %0,%1,%2\"\n-  [(set_attr \"type\" \"veccmp\")])\n+  [(set_attr \"type\" \"veccmpfx\")])\n \n (define_insn \"*altivec_gtu<mode>\"\n   [(set (match_operand:VI2 0 \"altivec_register_operand\" \"=v\")\n \t(gtu:VI2 (match_operand:VI2 1 \"altivec_register_operand\" \"v\")\n \t\t (match_operand:VI2 2 \"altivec_register_operand\" \"v\")))]\n   \"<VI_unit>\"\n   \"vcmpgtu<VI_char> %0,%1,%2\"\n-  [(set_attr \"type\" \"veccmp\")])\n+  [(set_attr \"type\" \"veccmpfx\")])\n \n (define_insn \"*altivec_eqv4sf\"\n   [(set (match_operand:V4SF 0 \"altivec_register_operand\" \"=v\")\n@@ -654,7 +654,7 @@\n \t (match_operand:VM 3 \"altivec_register_operand\" \"v\")))]\n   \"VECTOR_MEM_ALTIVEC_P (<MODE>mode)\"\n   \"vsel %0,%3,%2,%1\"\n-  [(set_attr \"type\" \"vecperm\")])\n+  [(set_attr \"type\" \"vecmove\")])\n \n (define_insn \"*altivec_vsel<mode>_uns\"\n   [(set (match_operand:VM 0 \"altivec_register_operand\" \"=v\")\n@@ -665,7 +665,7 @@\n \t (match_operand:VM 3 \"altivec_register_operand\" \"v\")))]\n   \"VECTOR_MEM_ALTIVEC_P (<MODE>mode)\"\n   \"vsel %0,%3,%2,%1\"\n-  [(set_attr \"type\" \"vecperm\")])\n+  [(set_attr \"type\" \"vecmove\")])\n \n ;; Fused multiply add.\n \n@@ -2283,7 +2283,7 @@\n \t\t(match_dup 2)))]\n   \"<VI_unit>\"\n   \"vcmpequ<VI_char>. %0,%1,%2\"\n-  [(set_attr \"type\" \"veccmp\")])\n+  [(set_attr \"type\" \"veccmpfx\")])\n \n (define_insn \"*altivec_vcmpgts<VI_char>_p\"\n   [(set (reg:CC 74)\n@@ -2295,7 +2295,7 @@\n \t\t(match_dup 2)))]\n   \"<VI_unit>\"\n   \"vcmpgts<VI_char>. %0,%1,%2\"\n-  [(set_attr \"type\" \"veccmp\")])\n+  [(set_attr \"type\" \"veccmpfx\")])\n \n (define_insn \"*altivec_vcmpgtu<VI_char>_p\"\n   [(set (reg:CC 74)\n@@ -2307,7 +2307,7 @@\n \t\t (match_dup 2)))]\n   \"<VI_unit>\"\n   \"vcmpgtu<VI_char>. %0,%1,%2\"\n-  [(set_attr \"type\" \"veccmp\")])\n+  [(set_attr \"type\" \"veccmpfx\")])\n \n (define_insn \"*altivec_vcmpeqfp_p\"\n   [(set (reg:CC 74)"}, {"sha": "7eee77cd5f1aaf5b731fe57cca76b71f22fb0cbb", "filename": "gcc/config/rs6000/cell.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c788ce223bef845356773178b64de69e753c1b8/gcc%2Fconfig%2Frs6000%2Fcell.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c788ce223bef845356773178b64de69e753c1b8/gcc%2Fconfig%2Frs6000%2Fcell.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fcell.md?ref=7c788ce223bef845356773178b64de69e753c1b8", "patch": "@@ -306,7 +306,7 @@\n \n ; Basic FP latency is 10 cycles, thoughput is 1/cycle\n (define_insn_reservation \"cell-fp\" 10\n-  (and (eq_attr \"type\" \"fp,dmul\")\n+  (and (eq_attr \"type\" \"fp,fpsimple,dmul\")\n        (eq_attr \"cpu\" \"cell\"))\n   \"slot01,vsu1_cell,vsu1_cell*8\")\n \n@@ -329,7 +329,7 @@\n \n ; VMX\n (define_insn_reservation \"cell-vecsimple\" 4\n-  (and (eq_attr \"type\" \"vecsimple\")\n+  (and (eq_attr \"type\" \"vecsimple,veclogical,vecmove\")\n        (eq_attr \"cpu\" \"cell\"))\n   \"slot01,vsu1_cell,vsu1_cell*2\")\n \n@@ -341,7 +341,7 @@\n \n ;; TODO: add support for recording instructions\n (define_insn_reservation \"cell-veccmp\" 4\n-  (and (eq_attr \"type\" \"veccmp\")\n+  (and (eq_attr \"type\" \"veccmp,veccmpfx\")\n        (eq_attr \"cpu\" \"cell\"))\n   \"slot01,vsu1_cell,vsu1_cell*2\")\n "}, {"sha": "09d0fd62081247da54a37d3dec36bd3ddd5094f1", "filename": "gcc/config/rs6000/dfp.md", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c788ce223bef845356773178b64de69e753c1b8/gcc%2Fconfig%2Frs6000%2Fdfp.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c788ce223bef845356773178b64de69e753c1b8/gcc%2Fconfig%2Frs6000%2Fdfp.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdfp.md?ref=7c788ce223bef845356773178b64de69e753c1b8", "patch": "@@ -89,7 +89,7 @@\n \t(neg:DD (match_operand:DD 1 \"gpc_reg_operand\" \"d\")))]\n   \"TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"fneg %0,%1\"\n-  [(set_attr \"type\" \"fp\")])\n+  [(set_attr \"type\" \"fpsimple\")])\n \n (define_expand \"absdd2\"\n   [(set (match_operand:DD 0 \"gpc_reg_operand\" \"\")\n@@ -102,14 +102,14 @@\n \t(abs:DD (match_operand:DD 1 \"gpc_reg_operand\" \"d\")))]\n   \"TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"fabs %0,%1\"\n-  [(set_attr \"type\" \"fp\")])\n+  [(set_attr \"type\" \"fpsimple\")])\n \n (define_insn \"*nabsdd2_fpr\"\n   [(set (match_operand:DD 0 \"gpc_reg_operand\" \"=d\")\n \t(neg:DD (abs:DD (match_operand:DD 1 \"gpc_reg_operand\" \"d\"))))]\n   \"TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"fnabs %0,%1\"\n-  [(set_attr \"type\" \"fp\")])\n+  [(set_attr \"type\" \"fpsimple\")])\n \n (define_expand \"negtd2\"\n   [(set (match_operand:TD 0 \"gpc_reg_operand\" \"\")\n@@ -124,7 +124,7 @@\n   \"@\n    fneg %0,%1\n    fneg %0,%1\\;fmr %L0,%L1\"\n-  [(set_attr \"type\" \"fp\")\n+  [(set_attr \"type\" \"fpsimple\")\n    (set_attr \"length\" \"4,8\")])\n \n (define_expand \"abstd2\"\n@@ -140,7 +140,7 @@\n   \"@\n    fabs %0,%1\n    fabs %0,%1\\;fmr %L0,%L1\"\n-  [(set_attr \"type\" \"fp\")\n+  [(set_attr \"type\" \"fpsimple\")\n    (set_attr \"length\" \"4,8\")])\n \n (define_insn \"*nabstd2_fpr\"\n@@ -150,7 +150,7 @@\n   \"@\n    fnabs %0,%1\n    fnabs %0,%1\\;fmr %L0,%L1\"\n-  [(set_attr \"type\" \"fp\")\n+  [(set_attr \"type\" \"fpsimple\")\n    (set_attr \"length\" \"4,8\")])\n \n ;; Hardware support for decimal floating point operations."}, {"sha": "e48979979ab6f26e1c572c25512fa364d1ba1bc1", "filename": "gcc/config/rs6000/e300c2c3.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c788ce223bef845356773178b64de69e753c1b8/gcc%2Fconfig%2Frs6000%2Fe300c2c3.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c788ce223bef845356773178b64de69e753c1b8/gcc%2Fconfig%2Frs6000%2Fe300c2c3.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fe300c2c3.md?ref=7c788ce223bef845356773178b64de69e753c1b8", "patch": "@@ -150,7 +150,7 @@\n   \"ppce300c3_decode,ppce300c3_issue+ppce300c3_fpu,nothing,ppce300c3_retire\")\n \n (define_insn_reservation \"ppce300c3_fp\" 3\n-  (and (eq_attr \"type\" \"fp\")\n+  (and (eq_attr \"type\" \"fp,fpsimple\")\n        (eq_attr \"cpu\" \"ppce300c3\"))\n   \"ppce300c3_decode,ppce300c3_issue+ppce300c3_fpu,nothing,ppce300c3_retire\")\n "}, {"sha": "e094192d61db3543f1c14b7d5ec5e42b8f67235d", "filename": "gcc/config/rs6000/e6500.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c788ce223bef845356773178b64de69e753c1b8/gcc%2Fconfig%2Frs6000%2Fe6500.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c788ce223bef845356773178b64de69e753c1b8/gcc%2Fconfig%2Frs6000%2Fe6500.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fe6500.md?ref=7c788ce223bef845356773178b64de69e753c1b8", "patch": "@@ -205,7 +205,7 @@\n \n ;; VSFX.\n (define_insn_reservation \"e6500_vecsimple\" 1\n-  (and (eq_attr \"type\" \"vecsimple,veccmp\")\n+  (and (eq_attr \"type\" \"vecsimple,veclogical,vecmove,veccmp,veccmpfx\")\n        (eq_attr \"cpu\" \"ppce6500\"))\n   \"e6500_decode,e6500_vec\")\n "}, {"sha": "42cb11a5980e14316f345a2653f4dc9e2a72e9cf", "filename": "gcc/config/rs6000/mpc.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c788ce223bef845356773178b64de69e753c1b8/gcc%2Fconfig%2Frs6000%2Fmpc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c788ce223bef845356773178b64de69e753c1b8/gcc%2Fconfig%2Frs6000%2Fmpc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fmpc.md?ref=7c788ce223bef845356773178b64de69e753c1b8", "patch": "@@ -81,7 +81,7 @@\n   \"fpu_mpc,bpu_mpc\")\n \n (define_insn_reservation \"mpccore-fp\" 4\n-  (and (eq_attr \"type\" \"fp\")\n+  (and (eq_attr \"type\" \"fp,fpsimple\")\n        (eq_attr \"cpu\" \"mpccore\"))\n   \"fpu_mpc*2\")\n "}, {"sha": "84ac439fe97e7fa97e3a47625c0787672e7ec462", "filename": "gcc/config/rs6000/power4.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c788ce223bef845356773178b64de69e753c1b8/gcc%2Fconfig%2Frs6000%2Fpower4.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c788ce223bef845356773178b64de69e753c1b8/gcc%2Fconfig%2Frs6000%2Fpower4.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpower4.md?ref=7c788ce223bef845356773178b64de69e753c1b8", "patch": "@@ -381,7 +381,7 @@\n \n ; Basic FP latency is 6 cycles\n (define_insn_reservation \"power4-fp\" 6\n-  (and (eq_attr \"type\" \"fp,dmul\")\n+  (and (eq_attr \"type\" \"fp,fpsimple,dmul\")\n        (eq_attr \"cpu\" \"power4\"))\n   \"fpq_power4\")\n \n@@ -410,7 +410,7 @@\n \n ; VMX\n (define_insn_reservation \"power4-vecsimple\" 2\n-  (and (eq_attr \"type\" \"vecsimple\")\n+  (and (eq_attr \"type\" \"vecsimple,veclogical,vecmove\")\n        (eq_attr \"cpu\" \"power4\"))\n   \"vq_power4\")\n \n@@ -421,7 +421,7 @@\n \n ; vecfp compare\n (define_insn_reservation \"power4-veccmp\" 8\n-  (and (eq_attr \"type\" \"veccmp\")\n+  (and (eq_attr \"type\" \"veccmp,veccmpfx\")\n        (eq_attr \"cpu\" \"power4\"))\n   \"vq_power4\")\n "}, {"sha": "b00d5ead14341106be4f9778fe38b0dfda43ff80", "filename": "gcc/config/rs6000/power5.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c788ce223bef845356773178b64de69e753c1b8/gcc%2Fconfig%2Frs6000%2Fpower5.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c788ce223bef845356773178b64de69e753c1b8/gcc%2Fconfig%2Frs6000%2Fpower5.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpower5.md?ref=7c788ce223bef845356773178b64de69e753c1b8", "patch": "@@ -322,7 +322,7 @@\n \n ; Basic FP latency is 6 cycles\n (define_insn_reservation \"power5-fp\" 6\n-  (and (eq_attr \"type\" \"fp,dmul\")\n+  (and (eq_attr \"type\" \"fp,fpsimple,dmul\")\n        (eq_attr \"cpu\" \"power5\"))\n   \"fpq_power5\")\n "}, {"sha": "5bff2a73a7b95499ba32aea23333465f1ea9c481", "filename": "gcc/config/rs6000/power6.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c788ce223bef845356773178b64de69e753c1b8/gcc%2Fconfig%2Frs6000%2Fpower6.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c788ce223bef845356773178b64de69e753c1b8/gcc%2Fconfig%2Frs6000%2Fpower6.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpower6.md?ref=7c788ce223bef845356773178b64de69e753c1b8", "patch": "@@ -500,7 +500,7 @@\n (define_bypass 9 \"power6-mtcr\" \"power6-branch\")\n \n (define_insn_reservation \"power6-fp\" 6\n-  (and (eq_attr \"type\" \"fp,dmul\")\n+  (and (eq_attr \"type\" \"fp,fpsimple,dmul\")\n        (eq_attr \"cpu\" \"power6\"))\n   \"FPU_power6\")\n \n@@ -556,7 +556,7 @@\n   \"LSF_power6\")\n \n (define_insn_reservation \"power6-vecsimple\" 3\n-  (and (eq_attr \"type\" \"vecsimple\")\n+  (and (eq_attr \"type\" \"vecsimple,veclogical,vecmove\")\n        (eq_attr \"cpu\" \"power6\"))\n   \"FPU_power6\")\n \n@@ -568,7 +568,7 @@\n (define_bypass 4 \"power6-vecsimple\" \"power6-vecstore\" )\n \n (define_insn_reservation \"power6-veccmp\" 1\n-  (and (eq_attr \"type\" \"veccmp\")\n+  (and (eq_attr \"type\" \"veccmp,veccmpfx\")\n        (eq_attr \"cpu\" \"power6\"))\n   \"FPU_power6\")\n "}, {"sha": "adda1df84c5d0e10c3ea38c2b53aab03a26bdfeb", "filename": "gcc/config/rs6000/power7.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c788ce223bef845356773178b64de69e753c1b8/gcc%2Fconfig%2Frs6000%2Fpower7.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c788ce223bef845356773178b64de69e753c1b8/gcc%2Fconfig%2Frs6000%2Fpower7.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpower7.md?ref=7c788ce223bef845356773178b64de69e753c1b8", "patch": "@@ -292,7 +292,7 @@\n \n ; VS Unit (includes FP/VSX/VMX/DFP)\n (define_insn_reservation \"power7-fp\" 6\n-  (and (eq_attr \"type\" \"fp,dmul\")\n+  (and (eq_attr \"type\" \"fp,fpsimple,dmul\")\n        (eq_attr \"cpu\" \"power7\"))\n   \"DU_power7,VSU_power7\")\n \n@@ -324,7 +324,7 @@\n   \"DU_power7,VSU_power7\")\n \n (define_insn_reservation \"power7-vecsimple\" 2\n-  (and (eq_attr \"type\" \"vecsimple,veccmp\")\n+  (and (eq_attr \"type\" \"vecsimple,veclogical,vecmove,veccmp,veccmpfx\")\n        (eq_attr \"cpu\" \"power7\"))\n   \"DU_power7,vsu1_power7\")\n "}, {"sha": "c0c06c5cbe9801a70085d802eb32fc7ed89f8ed2", "filename": "gcc/config/rs6000/power8.md", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c788ce223bef845356773178b64de69e753c1b8/gcc%2Fconfig%2Frs6000%2Fpower8.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c788ce223bef845356773178b64de69e753c1b8/gcc%2Fconfig%2Frs6000%2Fpower8.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpower8.md?ref=7c788ce223bef845356773178b64de69e753c1b8", "patch": "@@ -317,7 +317,7 @@\n \n ; VS Unit (includes FP/VSX/VMX/DFP/Crypto)\n (define_insn_reservation \"power8-fp\" 6\n-  (and (eq_attr \"type\" \"fp,dmul\")\n+  (and (eq_attr \"type\" \"fp,fpsimple,dmul\")\n        (eq_attr \"cpu\" \"power8\"))\n   \"DU_any_power8,VSU_power8\")\n \n@@ -350,7 +350,8 @@\n   \"DU_any_power8,VSU_power8\")\n \n (define_insn_reservation \"power8-vecsimple\" 2\n-  (and (eq_attr \"type\" \"vecperm,vecsimple,veccmp\")\n+  (and (eq_attr \"type\" \"vecperm,vecsimple,veclogical,vecmove,veccmp,\n+\t\t\tveccmpfx\")\n        (eq_attr \"cpu\" \"power8\"))\n   \"DU_any_power8,VSU_power8\")\n "}, {"sha": "12b2e4d37fcfa6b2ce6e8b74416c933bba8fbcf4", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c788ce223bef845356773178b64de69e753c1b8/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c788ce223bef845356773178b64de69e753c1b8/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=7c788ce223bef845356773178b64de69e753c1b8", "patch": "@@ -30171,7 +30171,9 @@ rs6000_adjust_cost (rtx_insn *insn, rtx link, rtx_insn *dep_insn, int cost)\n           switch (attr_type)\n             {\n             case TYPE_FP:\n-              if (get_attr_type (dep_insn) == TYPE_FP)\n+            case TYPE_FPSIMPLE:\n+              if (get_attr_type (dep_insn) == TYPE_FP\n+\t\t  || get_attr_type (dep_insn) == TYPE_FPSIMPLE)\n                 return 1;\n               break;\n             case TYPE_FPLOAD:"}, {"sha": "bb31e41e2568afa2dbb2a2484b4434255f61ea8c", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 41, "deletions": 40, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c788ce223bef845356773178b64de69e753c1b8/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c788ce223bef845356773178b64de69e753c1b8/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=7c788ce223bef845356773178b64de69e753c1b8", "patch": "@@ -183,6 +183,7 @@\n    brinc,\n    vecsimple,veccomplex,vecdiv,veccmp,veccmpsimple,vecperm,\n    vecfloat,vecfdiv,vecdouble,mffgpr,mftgpr,crypto,\n+   veclogical,veccmpfx,vecexts,vecmove,\n    htm\"\n   (const_string \"integer\"))\n \n@@ -4354,7 +4355,7 @@\n   \"@\n    fabs %0,%1\n    xsabsdp %x0,%x1\"\n-  [(set_attr \"type\" \"fp\")\n+  [(set_attr \"type\" \"fpsimple\")\n    (set_attr \"fp_type\" \"fp_addsub_<Fs>\")])\n \n (define_insn \"*nabs<mode>2_fpr\"\n@@ -4366,7 +4367,7 @@\n   \"@\n    fnabs %0,%1\n    xsnabsdp %x0,%x1\"\n-  [(set_attr \"type\" \"fp\")\n+  [(set_attr \"type\" \"fpsimple\")\n    (set_attr \"fp_type\" \"fp_addsub_<Fs>\")])\n \n (define_expand \"neg<mode>2\"\n@@ -4382,7 +4383,7 @@\n   \"@\n    fneg %0,%1\n    xsnegdp %x0,%x1\"\n-  [(set_attr \"type\" \"fp\")\n+  [(set_attr \"type\" \"fpsimple\")\n    (set_attr \"fp_type\" \"fp_addsub_<Fs>\")])\n \n (define_expand \"add<mode>3\"\n@@ -4543,7 +4544,7 @@\n   emit_note (NOTE_INSN_DELETED);\n   DONE;\n }\n-  [(set_attr \"type\" \"fp,fp,fpload,fp,fp,fpload,fpload\")])\n+  [(set_attr \"type\" \"fp,fpsimple,fpload,fp,fpsimple,fpload,fpload\")])\n \n (define_expand \"truncdfsf2\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"\")\n@@ -4633,7 +4634,7 @@\n   \"@\n    fcpsgn %0,%2,%1\n    xscpsgndp %x0,%x2,%x1\"\n-  [(set_attr \"type\" \"fp\")])\n+  [(set_attr \"type\" \"fpsimple\")])\n \n ;; For MIN, MAX, and conditional move, we use DEFINE_EXPAND's that involve a\n ;; fsel instruction and some auxiliary computations.  Then we just have a\n@@ -4846,7 +4847,7 @@\n \t\t\t   (match_operand:SFDF 4 \"vsx_register_operand\" \"<Fv>\")))]\n   \"TARGET_P9_MINMAX\"\n   \"xxsel %x0,%x1,%x3,%x4\"\n-  [(set_attr \"type\" \"vecperm\")])\n+  [(set_attr \"type\" \"vecmove\")])\n \n \f\n ;; Conversions to and from floating-point.\n@@ -6092,7 +6093,7 @@\n   [(set (attr \"type\")\n       (if_then_else\n \t(match_test \"vsx_register_operand (operands[0], <MODE>mode)\")\n-\t(const_string \"vecsimple\")\n+\t(const_string \"veclogical\")\n \t(const_string \"integer\")))\n    (set (attr \"length\")\n       (if_then_else\n@@ -6128,7 +6129,7 @@\n   [(set (attr \"type\")\n       (if_then_else\n \t(match_test \"vsx_register_operand (operands[0], <MODE>mode)\")\n-\t(const_string \"vecsimple\")\n+\t(const_string \"veclogical\")\n \t(const_string \"integer\")))\n    (set (attr \"length\")\n       (if_then_else\n@@ -6166,7 +6167,7 @@\n   [(set (attr \"type\")\n       (if_then_else\n \t(match_test \"vsx_register_operand (operands[0], <MODE>mode)\")\n-\t(const_string \"vecsimple\")\n+\t(const_string \"veclogical\")\n \t(const_string \"integer\")))\n    (set (attr \"length\")\n       (if_then_else\n@@ -6226,7 +6227,7 @@\n   [(set (attr \"type\")\n       (if_then_else\n \t(match_test \"vsx_register_operand (operands[0], <MODE>mode)\")\n-\t(const_string \"vecsimple\")\n+\t(const_string \"veclogical\")\n \t(const_string \"integer\")))\n    (set (attr \"length\")\n       (if_then_else\n@@ -6284,7 +6285,7 @@\n   [(set (attr \"type\")\n       (if_then_else\n \t(match_test \"vsx_register_operand (operands[0], <MODE>mode)\")\n-\t(const_string \"vecsimple\")\n+\t(const_string \"veclogical\")\n \t(const_string \"integer\")))\n    (set (attr \"length\")\n       (if_then_else\n@@ -6340,7 +6341,7 @@\n   [(set (attr \"type\")\n       (if_then_else\n \t(match_test \"vsx_register_operand (operands[0], <MODE>mode)\")\n-\t(const_string \"vecsimple\")\n+\t(const_string \"veclogical\")\n \t(const_string \"integer\")))\n    (set (attr \"length\")\n       (if_then_else\n@@ -6655,7 +6656,7 @@\n    mt%0 %1\n    mf%1 %0\n    nop\"\n-  [(set_attr \"type\" \"*,load,store,fp,fp,vecsimple,integer,fpload,fpload,fpstore,fpstore,fpload,fpstore,mffgpr,mftgpr,mtjmpr,mfjmpr,*\")\n+  [(set_attr \"type\" \"*,load,store,fpsimple,fpsimple,veclogical,integer,fpload,fpload,fpstore,fpstore,fpload,fpstore,mffgpr,mftgpr,mtjmpr,mfjmpr,*\")\n    (set_attr \"length\" \"4\")])\n \n (define_insn \"*mov<mode>_softfloat\"\n@@ -6790,7 +6791,7 @@\n    #\n    #\n    #\"\n-  [(set_attr \"type\" \"fpstore,fpload,fp,fpload,fpstore,fpload,fpstore,vecsimple,vecsimple,two,store,load,two\")\n+  [(set_attr \"type\" \"fpstore,fpload,fpsimple,fpload,fpstore,fpload,fpstore,veclogical,veclogical,two,store,load,two\")\n    (set_attr \"length\" \"4,4,4,4,4,4,4,4,4,8,8,8,8\")])\n \n (define_insn \"*mov<mode>_softfloat32\"\n@@ -6835,7 +6836,7 @@\n    mffgpr %0,%1\n    mfvsrd %0,%x1\n    mtvsrd %x0,%1\"\n-  [(set_attr \"type\" \"fpstore,fpload,fp,fpload,fpstore,fpload,fpstore,vecsimple,vecsimple,integer,store,load,*,mtjmpr,mfjmpr,*,mftgpr,mffgpr,mftgpr,mffgpr\")\n+  [(set_attr \"type\" \"fpstore,fpload,fpsimple,fpload,fpstore,fpload,fpstore,veclogical,veclogical,integer,store,load,*,mtjmpr,mfjmpr,*,mftgpr,mffgpr,mftgpr,mffgpr\")\n    (set_attr \"length\" \"4\")])\n \n (define_insn \"*mov<mode>_softfloat64\"\n@@ -7046,7 +7047,7 @@\n   emit_note (NOTE_INSN_DELETED);\n   DONE;\n }\n-  [(set_attr \"type\" \"fp\")])\n+  [(set_attr \"type\" \"fpsimple\")])\n \n (define_insn \"trunc<mode>df2_internal2\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=d\")\n@@ -7279,7 +7280,7 @@\n   else\n     return \\\"fneg %0,%1\\;fneg %L0,%L1\\\";\n }\"\n-  [(set_attr \"type\" \"fp\")\n+  [(set_attr \"type\" \"fpsimple\")\n    (set_attr \"length\" \"8\")])\n \n (define_expand \"abs<mode>2\"\n@@ -7414,7 +7415,7 @@\n    (use (match_operand:V16QI 2 \"register_operand\" \"v\"))]\n   \"TARGET_FLOAT128 && !TARGET_FLOAT128_HW\"\n   \"xxlxor %x0,%x1,%x2\"\n-  [(set_attr \"type\" \"vecsimple\")])\n+  [(set_attr \"type\" \"veclogical\")])\n \n ;; IEEE 128-bit absolute value\n (define_insn_and_split \"ieee_128bit_vsx_abs<mode>2\"\n@@ -7443,7 +7444,7 @@\n    (use (match_operand:V16QI 2 \"register_operand\" \"v\"))]\n   \"TARGET_FLOAT128 && !TARGET_FLOAT128_HW\"\n   \"xxlandc %x0,%x1,%x2\"\n-  [(set_attr \"type\" \"vecsimple\")])\n+  [(set_attr \"type\" \"veclogical\")])\n \n ;; IEEE 128-bit negative absolute value\n (define_insn_and_split \"*ieee_128bit_vsx_nabs<mode>2\"\n@@ -7476,7 +7477,7 @@\n    (use (match_operand:V16QI 2 \"register_operand\" \"v\"))]\n   \"TARGET_FLOAT128 && !TARGET_FLOAT128_HW\"\n   \"xxlor %x0,%x1,%x2\"\n-  [(set_attr \"type\" \"vecsimple\")])\n+  [(set_attr \"type\" \"veclogical\")])\n \n ;; Float128 conversion functions.  These expand to library function calls.\n ;; We use expand to convert from IBM double double to IEEE 128-bit\n@@ -7632,7 +7633,7 @@\n \t\t\t UNSPEC_P8V_FMRGOW))]\n   \"!TARGET_POWERPC64 && TARGET_DIRECT_MOVE\"\n   \"fmrgow %0,%1,%2\"\n-  [(set_attr \"type\" \"vecperm\")])\n+  [(set_attr \"type\" \"fpsimple\")])\n \n (define_insn \"p8_mtvsrwz\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=d\")\n@@ -7884,9 +7885,9 @@\n    #\n    #\"\n   [(set_attr \"type\"\n-               \"store,     load,      *,         fpstore,   fpload,     fp,\n-                *,         fpstore,   fpstore,   fpload,    fpload,     vecsimple,\n-                vecsimple, vecsimple, vecsimple, vecsimple, vecsimple,  vecsimple,\n+               \"store,     load,      *,         fpstore,     fpload,       fpsimple,\n+                *,         fpstore,   fpstore,   fpload,      fpload,       veclogical,\n+                vecsimple, vecsimple, vecsimple, veclogical, veclogical,  vecsimple,\n                 vecsimple\")])\n \n (define_split\n@@ -7970,11 +7971,11 @@\n    mfvsrd %0,%x1\n    mtvsrd %x0,%1\"\n   [(set_attr \"type\"\n-               \"store,     load,      *,         *,         *,          *,\n-                fpstore,   fpload,    fp,        fpstore,   fpstore,    fpload,\n-                fpload,    vecsimple, vecsimple, vecsimple, vecsimple,  vecsimple,\n-                vecsimple, vecsimple, vecsimple, mfjmpr,    mtjmpr,     *,\n-                mftgpr,    mffgpr,    mftgpr,    mffgpr\")\n+               \"store,       load,\t  *,         *,         *,         *,\n+                fpstore,     fpload,      fpsimple,  fpstore,   fpstore,   fpload,\n+                fpload,      veclogical, vecsimple, vecsimple, vecsimple, veclogical,\n+                veclogical, vecsimple,   vecsimple, mfjmpr,    mtjmpr,    *,\n+                mftgpr,      mffgpr,      mftgpr,    mffgpr\")\n \n    (set_attr \"length\"\n                \"4,         4,         4,         4,         4,          20,\n@@ -13391,7 +13392,7 @@\n   operands[3] = gen_rtx_REG (<FP128_64>mode, dest_hi);\n   operands[4] = gen_rtx_REG (<FP128_64>mode, dest_lo);\n }\n-  [(set_attr \"type\" \"fp,fp\")\n+  [(set_attr \"type\" \"fpsimple,fp\")\n    (set_attr \"length\" \"4,8\")])\n \n (define_insn \"unpack<mode>\"\n@@ -13493,7 +13494,7 @@\n \t UNSPEC_COPYSIGN))]\n   \"TARGET_FLOAT128_HW && FLOAT128_IEEE_P (<MODE>mode)\"\n    \"xscpsgnqp %0,%2,%1\"\n-  [(set_attr \"type\" \"vecsimple\")])\n+  [(set_attr \"type\" \"vecmove\")])\n \n (define_insn \"copysign<mode>3_soft\"\n   [(set (match_operand:IEEE128 0 \"altivec_register_operand\" \"=v\")\n@@ -13513,7 +13514,7 @@\n \t (match_operand:IEEE128 1 \"altivec_register_operand\" \"v\")))]\n   \"TARGET_FLOAT128_HW && FLOAT128_IEEE_P (<MODE>mode)\"\n   \"xsnegqp %0,%1\"\n-  [(set_attr \"type\" \"vecfloat\")])\n+  [(set_attr \"type\" \"vecmove\")])\n \n \n (define_insn \"abs<mode>2_hw\"\n@@ -13522,7 +13523,7 @@\n \t (match_operand:IEEE128 1 \"altivec_register_operand\" \"v\")))]\n   \"TARGET_FLOAT128_HW && FLOAT128_IEEE_P (<MODE>mode)\"\n   \"xsabsqp %0,%1\"\n-  [(set_attr \"type\" \"vecfloat\")])\n+  [(set_attr \"type\" \"vecmove\")])\n \n \n (define_insn \"*nabs<mode>2_hw\"\n@@ -13532,7 +13533,7 @@\n \t  (match_operand:IEEE128 1 \"altivec_register_operand\" \"v\"))))]\n   \"TARGET_FLOAT128_HW && FLOAT128_IEEE_P (<MODE>mode)\"\n   \"xsnabsqp %0,%1\"\n-  [(set_attr \"type\" \"vecfloat\")])\n+  [(set_attr \"type\" \"vecmove\")])\n \n ;; Initially don't worry about doing fusion\n (define_insn \"*fma<mode>4_hw\"\n@@ -13602,7 +13603,7 @@\n   emit_note (NOTE_INSN_DELETED);\n   DONE;\n }\n-  [(set_attr \"type\" \"*,vecsimple\")\n+  [(set_attr \"type\" \"*,veclogical\")\n    (set_attr \"length\" \"0,4\")])\n \n (define_insn_and_split \"trunctfkf2\"\n@@ -13618,7 +13619,7 @@\n   emit_note (NOTE_INSN_DELETED);\n   DONE;\n }\n-  [(set_attr \"type\" \"*,vecsimple\")\n+  [(set_attr \"type\" \"*,veclogical\")\n    (set_attr \"length\" \"0,4\")])\n \n (define_insn \"trunc<mode>df2_hw\"\n@@ -13754,7 +13755,7 @@\n    mfvsrd %0,%x1\n    stxsdx %x1,%y0\n    xxlor %x0,%x1,%x1\"\n-  [(set_attr \"type\" \"mftgpr,fpstore,vecsimple\")])\n+  [(set_attr \"type\" \"mftgpr,fpstore,veclogical\")])\n \n \n (define_insn \"*ieee128_mfvsrd_32bit\"\n@@ -13765,7 +13766,7 @@\n   \"@\n    stxsdx %x1,%y0\n    xxlor %x0,%x1,%x1\"\n-  [(set_attr \"type\" \"fpstore,vecsimple\")])\n+  [(set_attr \"type\" \"fpstore,veclogical\")])\n \n (define_insn \"*ieee128_mfvsrwz\"\n   [(set (match_operand:SI 0 \"reg_or_indexed_operand\" \"=r,Z\")\n@@ -13801,7 +13802,7 @@\n    mtvsrd %x0,%1\n    lxsdx %x0,%y1\n    xxlor %x0,%x1,%x1\"\n-  [(set_attr \"type\" \"mffgpr,fpload,vecsimple\")])\n+  [(set_attr \"type\" \"mffgpr,fpload,veclogical\")])\n \n (define_insn \"*ieee128_mtvsrd_32bit\"\n   [(set (match_operand:V2DI 0 \"altivec_register_operand\" \"=v,v\")\n@@ -13811,7 +13812,7 @@\n   \"@\n    lxsdx %x0,%y1\n    xxlor %x0,%x1,%x1\"\n-  [(set_attr \"type\" \"fpload,vecsimple\")])\n+  [(set_attr \"type\" \"fpload,veclogical\")])\n \n ;; IEEE 128-bit instructions with round to odd semantics\n (define_insn \"*trunc<mode>df2_odd\""}, {"sha": "e33cb7855956d841cc1f3deaa63751c595f8c223", "filename": "gcc/config/rs6000/rs64.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c788ce223bef845356773178b64de69e753c1b8/gcc%2Fconfig%2Frs6000%2Frs64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c788ce223bef845356773178b64de69e753c1b8/gcc%2Fconfig%2Frs6000%2Frs64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs64.md?ref=7c788ce223bef845356773178b64de69e753c1b8", "patch": "@@ -111,7 +111,7 @@\n   \"mciu_rs64,fpu_rs64,bpu_rs64\")\n \n (define_insn_reservation \"rs64a-fp\" 4\n-  (and (eq_attr \"type\" \"fp,dmul\")\n+  (and (eq_attr \"type\" \"fp,fpsimple,dmul\")\n        (eq_attr \"cpu\" \"rs64a\"))\n   \"mciu_rs64,fpu_rs64\")\n "}, {"sha": "e6658d67bd34874de9344dc61882d5f53f7702a9", "filename": "gcc/config/rs6000/titan.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c788ce223bef845356773178b64de69e753c1b8/gcc%2Fconfig%2Frs6000%2Ftitan.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c788ce223bef845356773178b64de69e753c1b8/gcc%2Fconfig%2Frs6000%2Ftitan.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Ftitan.md?ref=7c788ce223bef845356773178b64de69e753c1b8", "patch": "@@ -156,7 +156,7 @@\n ;; Make sure the \"titan_fp\" rule stays last, as it's a catch all for\n ;; double-precision and unclassified (e.g. fsel) FP-instructions\n (define_insn_reservation \"titan_fp\" 10\n-  (and (eq_attr \"type\" \"fpcompare,fp,dmul\")\n+  (and (eq_attr \"type\" \"fpcompare,fp,fpsimple,dmul\")\n        (eq_attr \"cpu\" \"titan\"))\n   \"titan_issue,titan_fp0*2,nothing*8,titan_fpwb\")\n "}, {"sha": "4fa7f6a181c3479aa694c5f440234ca99cedad62", "filename": "gcc/config/rs6000/vsx.md", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c788ce223bef845356773178b64de69e753c1b8/gcc%2Fconfig%2Frs6000%2Fvsx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c788ce223bef845356773178b64de69e753c1b8/gcc%2Fconfig%2Frs6000%2Fvsx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvsx.md?ref=7c788ce223bef845356773178b64de69e753c1b8", "patch": "@@ -686,7 +686,7 @@\n     }\n }\n   [(set_attr \"length\" \"0,4\")\n-   (set_attr \"type\" \"vecsimple\")])\n+   (set_attr \"type\" \"veclogical\")])\n \n (define_insn_and_split \"*vsx_le_perm_load_<mode>\"\n   [(set (match_operand:VSX_LE_128 0 \"vsx_register_operand\" \"=<VSa>\")\n@@ -1493,7 +1493,7 @@\n \t (match_operand:VSX_L 3 \"vsx_register_operand\" \"<VSr>,<VSa>\")))]\n   \"VECTOR_MEM_VSX_P (<MODE>mode)\"\n   \"xxsel %x0,%x3,%x2,%x1\"\n-  [(set_attr \"type\" \"vecperm\")])\n+  [(set_attr \"type\" \"vecmove\")])\n \n (define_insn \"*vsx_xxsel<mode>_uns\"\n   [(set (match_operand:VSX_L 0 \"vsx_register_operand\" \"=<VSr>,?<VSa>\")\n@@ -1504,7 +1504,7 @@\n \t (match_operand:VSX_L 3 \"vsx_register_operand\" \"<VSr>,<VSa>\")))]\n   \"VECTOR_MEM_VSX_P (<MODE>mode)\"\n   \"xxsel %x0,%x3,%x2,%x1\"\n-  [(set_attr \"type\" \"vecperm\")])\n+  [(set_attr \"type\" \"vecmove\")])\n \n ;; Copy sign\n (define_insn \"vsx_copysign<mode>3\"\n@@ -2158,7 +2158,7 @@\n   else\n     gcc_unreachable ();\n }\n-  [(set_attr \"type\" \"vecsimple,mftgpr,mftgpr,vecperm\")])\n+  [(set_attr \"type\" \"veclogical,mftgpr,mftgpr,vecperm\")])\n \n ;; Optimize extracting a single scalar element from memory if the scalar is in\n ;; the correct location to use a single load.\n@@ -2704,7 +2704,7 @@\n \t UNSPEC_VSX_SIGN_EXTEND))]\n   \"TARGET_P9_VECTOR\"\n   \"vextsb2<wd> %0,%1\"\n-  [(set_attr \"type\" \"vecsimple\")])\n+  [(set_attr \"type\" \"vecexts\")])\n \n (define_insn \"vsx_sign_extend_hi_<mode>\"\n   [(set (match_operand:VSINT_84 0 \"vsx_register_operand\" \"=v\")\n@@ -2713,15 +2713,15 @@\n \t UNSPEC_VSX_SIGN_EXTEND))]\n   \"TARGET_P9_VECTOR\"\n   \"vextsh2<wd> %0,%1\"\n-  [(set_attr \"type\" \"vecsimple\")])\n+  [(set_attr \"type\" \"vecexts\")])\n \n (define_insn \"*vsx_sign_extend_si_v2di\"\n   [(set (match_operand:V2DI 0 \"vsx_register_operand\" \"=v\")\n \t(unspec:V2DI [(match_operand:V4SI 1 \"vsx_register_operand\" \"v\")]\n \t\t     UNSPEC_VSX_SIGN_EXTEND))]\n   \"TARGET_P9_VECTOR\"\n   \"vextsw2d %0,%1\"\n-  [(set_attr \"type\" \"vecsimple\")])\n+  [(set_attr \"type\" \"vecexts\")])\n \n \f\n ;; ISA 3.0 memory operations"}, {"sha": "963a1b5e7515179651a250782055ddb25ed54172", "filename": "gcc/config/rs6000/xfpu.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c788ce223bef845356773178b64de69e753c1b8/gcc%2Fconfig%2Frs6000%2Fxfpu.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c788ce223bef845356773178b64de69e753c1b8/gcc%2Fconfig%2Frs6000%2Fxfpu.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fxfpu.md?ref=7c788ce223bef845356773178b64de69e753c1b8", "patch": "@@ -55,7 +55,7 @@\n \n (define_insn_reservation \"fp-default\" 2\n   (and (and \n-        (eq_attr \"type\" \"fp\")\n+        (eq_attr \"type\" \"fp,fpsimple\")\n         (eq_attr \"fp_type\" \"fp_default\"))\n        (eq_attr \"cpu\" \"ppc405\"))\n   \"Xfpu_issue*2\")\n@@ -67,14 +67,14 @@\n \n (define_insn_reservation \"fp-addsub-s\" 14\n   (and (and\n-        (eq_attr \"type\" \"fp\")\n+        (eq_attr \"type\" \"fp,fpsimple\")\n         (eq_attr \"fp_type\" \"fp_addsub_s\"))\n        (eq_attr \"cpu\" \"ppc405\"))\n   \"Xfpu_issue*2,Xfpu_addsub\")\n \n (define_insn_reservation \"fp-addsub-d\" 18\n   (and (and\n-        (eq_attr \"type\" \"fp\")\n+        (eq_attr \"type\" \"fp,fpsimple\")\n         (eq_attr \"fp_type\" \"fp_addsub_d\"))\n        (eq_attr \"cpu\" \"ppc405\"))\n   \"Xfpu_issue*2,Xfpu_addsub\")"}]}