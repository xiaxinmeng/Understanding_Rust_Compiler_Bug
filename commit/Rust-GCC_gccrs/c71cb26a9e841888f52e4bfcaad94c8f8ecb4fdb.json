{"sha": "c71cb26a9e841888f52e4bfcaad94c8f8ecb4fdb", "node_id": "C_kwDOANBUbNoAKGM3MWNiMjZhOWU4NDE4ODhmNTJlNGJmY2FhZDk0YzhmOGVjYjRmZGI", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2021-11-09T09:55:15Z"}, "committer": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2021-11-09T12:20:41Z"}, "message": "Get rid of infinite recursion for 'typedef' used with GTY-marked 'gcc/diagnostic-spec.h:nowarn_map' [PR101204, PR103157]\n\nReproduced with clang version 10.0.0-4ubuntu1:\n\n    gtype-desc.c:11333:1: warning: all paths through this function will call itself [-Winfinite-recursion]\n\n... as well as some GCC's '-O2 -fdump-tree-optimized':\n\n    void gt_pch_nx(int_hash<unsigned int, 0u, 4294967295u>*, gt_pointer_operator, void*) ([...])\n    {\n      <bb 2>:\n\n      <bb 3>:\n      goto <bb 3>;\n\n    }\n\nThat three-arguments 'gt_pch_nx' function as well as two one-argument\n'gt_ggc_mx', 'gt_pch_nx' functions now turn empty:\n\n    [...]\n     void\n    -gt_ggc_mx (int_hash<location_t,0,UINT_MAX>& x_r ATTRIBUTE_UNUSED)\n    +gt_ggc_mx (struct xint_hash_t& x_r ATTRIBUTE_UNUSED)\n     {\n    -  int_hash<location_t,0,UINT_MAX> * ATTRIBUTE_UNUSED x = &x_r;\n    -  gt_ggc_mx (&((*x)));\n    +  struct xint_hash_t * ATTRIBUTE_UNUSED x = &x_r;\n     }\n    [...]\n     void\n    -gt_pch_nx (int_hash<location_t,0,UINT_MAX>& x_r ATTRIBUTE_UNUSED)\n    +gt_pch_nx (struct xint_hash_t& x_r ATTRIBUTE_UNUSED)\n     {\n    -  int_hash<location_t,0,UINT_MAX> * ATTRIBUTE_UNUSED x = &x_r;\n    -  gt_pch_nx (&((*x)));\n    +  struct xint_hash_t * ATTRIBUTE_UNUSED x = &x_r;\n     }\n    [...]\n     void\n    -gt_pch_nx (int_hash<location_t,0,UINT_MAX>* x ATTRIBUTE_UNUSED,\n    +gt_pch_nx (struct xint_hash_t* x ATTRIBUTE_UNUSED,\n            ATTRIBUTE_UNUSED gt_pointer_operator op,\n            ATTRIBUTE_UNUSED void *cookie)\n     {\n    -    gt_pch_nx (&((*x)), op, cookie);\n     }\n    [...]\n\n\tgcc/\n\tPR middle-end/101204\n\tPR other/103157\n\t* diagnostic-spec.h (typedef xint_hash_t): Turn into...\n\t(struct xint_hash_t): ... this.\n\t* doc/gty.texi: Update.", "tree": {"sha": "827bd644fadfd007cd9e5010fc493375fef2b6ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/827bd644fadfd007cd9e5010fc493375fef2b6ff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c71cb26a9e841888f52e4bfcaad94c8f8ecb4fdb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c71cb26a9e841888f52e4bfcaad94c8f8ecb4fdb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c71cb26a9e841888f52e4bfcaad94c8f8ecb4fdb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c71cb26a9e841888f52e4bfcaad94c8f8ecb4fdb/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "32ba7860ccaddd5219e6dae94a3d0653e124c9dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32ba7860ccaddd5219e6dae94a3d0653e124c9dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32ba7860ccaddd5219e6dae94a3d0653e124c9dd"}], "stats": {"total": 14, "additions": 13, "deletions": 1}, "files": [{"sha": "e54e9e3ddbedc2df7267b37a4653205a69bd004c", "filename": "gcc/diagnostic-spec.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71cb26a9e841888f52e4bfcaad94c8f8ecb4fdb/gcc%2Fdiagnostic-spec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71cb26a9e841888f52e4bfcaad94c8f8ecb4fdb/gcc%2Fdiagnostic-spec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic-spec.h?ref=c71cb26a9e841888f52e4bfcaad94c8f8ecb4fdb", "patch": "@@ -130,7 +130,11 @@ operator!= (const nowarn_spec_t &lhs, const nowarn_spec_t &rhs)\n   return !(lhs == rhs);\n }\n \n-typedef int_hash <location_t, 0, UINT_MAX> xint_hash_t;\n+/* Per PR103157 \"'gengtype': 'typedef' causing infinite-recursion code to be\n+   generated\", don't use\n+       typedef int_hash<location_t, 0, UINT_MAX> xint_hash_t;\n+   here.  */\n+struct xint_hash_t : int_hash<location_t, 0, UINT_MAX> {};\n typedef hash_map<xint_hash_t, nowarn_spec_t> xint_hash_map_t;\n \n /* A mapping from a 'location_t' to the warning spec set for it.  */"}, {"sha": "b996ff2c44e8ee4a85ad8d6d0ca5befb4120baa5", "filename": "gcc/doc/gty.texi", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71cb26a9e841888f52e4bfcaad94c8f8ecb4fdb/gcc%2Fdoc%2Fgty.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71cb26a9e841888f52e4bfcaad94c8f8ecb4fdb/gcc%2Fdoc%2Fgty.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgty.texi?ref=c71cb26a9e841888f52e4bfcaad94c8f8ecb4fdb", "patch": "@@ -64,6 +64,14 @@ The parser understands simple typedefs such as\n @code{typedef int @var{name};}.\n These don't need to be marked.\n \n+However, in combination with GTY, avoid using typedefs such as\n+@code{typedef int_hash<@dots{}> @var{name};}\n+for these generate infinite-recursion code.\n+See @uref{https://gcc.gnu.org/PR103157,PR103157}.\n+Instead, you may use\n+@code{struct @var{name} : int_hash<@dots{}> @{@};},\n+for example.\n+\n Since @code{gengtype}'s understanding of C++ is limited, there are\n several constructs and declarations that are not supported inside\n classes/structures marked for automatic GC code generation.  The"}]}