{"sha": "5638268e4d699fe33f71b7f9dc95c50de6e6fa60", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTYzODI2OGU0ZDY5OWZlMzNmNzFiN2Y5ZGM5NWM1MGRlNmU2ZmE2MA==", "commit": {"author": {"name": "David Edelsohn", "email": "edelsohn@gnu.org", "date": "2000-09-06T21:29:14Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2000-09-06T21:29:14Z"}, "message": "rs6000.md: Correct function unit definitions for cr_logical and mtjmpr.\n\n\t* rs6000.md: Correct function unit definitions for cr_logical and\n\tmtjmpr.\n\t(sCOND): Additionally fail for sgt, slt, sge, sle if !TARGET_POWER\n\tand use portable method for >=0 and floating point >=.  Remove\n\tassociated matchers.\n\nFrom-SVN: r36211", "tree": {"sha": "ba453935758c42f4e75d06b6ed4d016d49935a66", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ba453935758c42f4e75d06b6ed4d016d49935a66"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5638268e4d699fe33f71b7f9dc95c50de6e6fa60", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5638268e4d699fe33f71b7f9dc95c50de6e6fa60", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5638268e4d699fe33f71b7f9dc95c50de6e6fa60", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5638268e4d699fe33f71b7f9dc95c50de6e6fa60/comments", "author": null, "committer": null, "parents": [{"sha": "44835fdd5d38ae34088ca2304588382c61064558", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44835fdd5d38ae34088ca2304588382c61064558", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44835fdd5d38ae34088ca2304588382c61064558"}], "stats": {"total": 319, "additions": 33, "deletions": 286}, "files": [{"sha": "5f18e6dec5b7a26df5551a04addf3e68525460cb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5638268e4d699fe33f71b7f9dc95c50de6e6fa60/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5638268e4d699fe33f71b7f9dc95c50de6e6fa60/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5638268e4d699fe33f71b7f9dc95c50de6e6fa60", "patch": "@@ -1,3 +1,11 @@\n+2000-09-06  David Edelsohn  <edelsohn@gnu.org>\n+\n+\t* rs6000.md: Correct function unit definitions for cr_logical and\n+\tmtjmpr.\n+\t(sCOND): Additionally fail for sgt, slt, sge, sle if !TARGET_POWER\n+\tand use portable method for >=0 and floating point >=.  Remove\n+\tassociated matchers.\n+\n 2000-09-06  Mark Mitchell  <mark@codesourcery.com>\n \n \t* extend.texi: Mark named return value extension as deprecated."}, {"sha": "b3fdd97461c07ee1686d68f4eb090b4066064cec", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 25, "deletions": 286, "changes": 311, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5638268e4d699fe33f71b7f9dc95c50de6e6fa60/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5638268e4d699fe33f71b7f9dc95c50de6e6fa60/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=5638268e4d699fe33f71b7f9dc95c50de6e6fa60", "patch": "@@ -125,7 +125,7 @@\n \n (define_function_unit \"iu\" 1 0\n   (and (eq_attr \"type\" \"cr_logical\")\n-       (eq_attr \"cpu\" \"rios1,rs64a,mpccore,ppc403,ppc601\"))\n+       (eq_attr \"cpu\" \"mpccore,ppc403,ppc601\"))\n   1 1)\n \n (define_function_unit \"iu\" 1 0\n@@ -353,7 +353,7 @@\n ; fp compare uses fp unit\n (define_function_unit \"fpu\" 1 0\n   (and (eq_attr \"type\" \"fpcompare\")\n-       (eq_attr \"cpu\" \"rs64a,ppc601,ppc603,ppc604,ppc604e,ppc620,ppc750\"))\n+       (eq_attr \"cpu\" \"rs64a,ppc601,ppc603,ppc604,ppc604e,ppc620,ppc630,ppc750\"))\n   5 1)\n \n (define_function_unit \"fpu\" 1 0\n@@ -368,19 +368,18 @@\n \n (define_function_unit \"bpu\" 1 0\n   (and (eq_attr \"type\" \"mtjmpr\")\n-       (eq_attr \"cpu\" \"rs64a,mpccore,ppc403,ppc601,ppc603,ppc604,ppc604e,ppc620,ppc750\"))\n+       (eq_attr \"cpu\" \"mpccore,ppc403,ppc601,ppc603,ppc604,ppc604e,ppc620,ppc630,ppc750\"))\n   4 1)\n \n (define_function_unit \"bpu\" 1 0\n   (and (eq_attr \"type\" \"cr_logical\")\n-       (eq_attr \"cpu\" \"ppc604,ppc620\"))\n+       (eq_attr \"cpu\" \"rios1,rios2,ppc604\"))\n   4 1)\n   \n (define_function_unit \"cru\" 1 0\n   (and (eq_attr \"type\" \"cr_logical\")\n-       (eq_attr \"cpu\" \"ppc604e\"))\n-  4 1)\n-  \n+       (eq_attr \"cpu\" \"ppc604e,ppc620,ppc630,rs64a\"))\n+  1 1)\n \n ; all jumps/branches are executing on the bpu, in 1 cycle, for all machines.\n (define_function_unit \"bpu\" 1 0\n@@ -9988,8 +9987,9 @@ operands[2] = GEN_INT (INTVAL (operands[1]) >> 32);\n   [(clobber (match_operand:SI 0 \"gpc_reg_operand\" \"\"))]\n   \"\"\n   \"\n-{ \n-  if (! rs6000_compare_fp_p && rs6000_compare_op1 == const0_rtx)\n+{\n+  if (! rs6000_compare_fp_p\n+      && (! TARGET_POWER || rs6000_compare_op1 == const0_rtx))\n     FAIL;\n \n   rs6000_emit_sCOND (GT, operands[0]); \n@@ -10001,26 +10001,37 @@ operands[2] = GEN_INT (INTVAL (operands[1]) >> 32);\n   [(clobber (match_operand:SI 0 \"gpc_reg_operand\" \"\"))]\n   \"\"\n   \"\n-{ \n-  if (! rs6000_compare_fp_p && rs6000_compare_op1 == const0_rtx)\n+{\n+  if (! rs6000_compare_fp_p \n+      && (! TARGET_POWER || rs6000_compare_op1 == const0_rtx))\n     FAIL;\n \n   rs6000_emit_sCOND (LT, operands[0]); \n   DONE;\n }\")\n \n+;; A >= 0 is best done the portable way for A an integer.\n (define_expand \"sge\"\n   [(clobber (match_operand:SI 0 \"gpc_reg_operand\" \"\"))]\n   \"\"\n-  \"{ rs6000_emit_sCOND (GE, operands[0]); DONE; }\")\n+  \"\n+{\n+  if (! rs6000_compare_fp_p\n+      && (! TARGET_POWER || rs6000_compare_op1 == const0_rtx))\n+    FAIL;\n+\n+  rs6000_emit_sCOND (GE, operands[0]);\n+  DONE;\n+}\")\n \n ;; A <= 0 is best done the portable way for A an integer.\n (define_expand \"sle\"\n   [(clobber (match_operand:SI 0 \"gpc_reg_operand\" \"\"))]\n   \"\"\n   \"\n-{ \n-  if (! rs6000_compare_fp_p && rs6000_compare_op1 == const0_rtx)\n+{\n+  if (! rs6000_compare_fp_p\n+      && (! TARGET_POWER || rs6000_compare_op1 == const0_rtx))\n     FAIL;\n \n   rs6000_emit_sCOND (LE, operands[0]); \n@@ -11462,22 +11473,6 @@ operands[2] = GEN_INT (INTVAL (operands[1]) >> 32);\n   \"doz%I2 %3,%1,%2\\;{sfi|subfic} %0,%3,0\\;{ae|adde} %0,%0,%3\"\n    [(set_attr \"length\" \"12\")])\n \n-(define_insn \"\"\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n-\t(ge:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n-\t       (const_int 0)))]\n-  \"! TARGET_POWER && ! TARGET_POWERPC64\"\n-  \"nand %0,%1,%1\\;{sri|srwi} %0,%0,31\"\n-   [(set_attr \"length\" \"8\")])\n-\n-(define_insn \"\"\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n-\t(ge:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r\")\n-\t       (const_int 0)))]\n-  \"TARGET_POWERPC64\"\n-  \"nand %0,%1,%1\\;srdi %0,%0,63\"\n-   [(set_attr \"length\" \"8\")])\n-\n (define_insn \"\"\n   [(set (match_operand:CC 4 \"cc_reg_operand\" \"=x,?y\")\n \t(compare:CC\n@@ -11512,68 +11507,6 @@ operands[2] = GEN_INT (INTVAL (operands[1]) >> 32);\n \t\t    (const_int 0)))]\n   \"\")\n \n-(define_insn \"\"\n-  [(set (match_operand:CC 4 \"cc_reg_operand\" \"=x,?y\")\n-\t(compare:CC\n-\t (ge:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r\")\n-\t\t(const_int 0))\n-\t (const_int 0)))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r\")\n-\t(ge:SI (match_dup 1) (const_int 0)))]\n-  \"! TARGET_POWER\"\n-  \"@\n-   nand %0,%1,%1\\;{sri.|srwi.} %0,%0,31\n-   #\"\n-  [(set_attr \"type\" \"compare\")\n-   (set_attr \"length\" \"8,12\")])\n-\n-(define_split\n-  [(set (match_operand:CC 4 \"cc_reg_not_cr0_operand\" \"\")\n-\t(compare:CC\n-\t (ge:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\")\n-\t\t(const_int 0))\n-\t (const_int 0)))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n-\t(ge:SI (match_dup 1) (const_int 0)))]\n-  \"! TARGET_POWER && reload_completed\"\n-  [(set (match_dup 0)\n-\t(ge:SI (match_dup 1) (const_int 0)))\n-   (set (match_dup 4)\n-\t(compare:CC (match_dup 0)\n-\t\t    (const_int 0)))]\n-  \"\")\n-\n-(define_insn \"\"\n-  [(set (match_operand:CC 4 \"cc_reg_operand\" \"=x,?y\")\n-\t(compare:CC\n-\t (ge:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r,r\")\n-\t\t(const_int 0))\n-\t (const_int 0)))\n-   (set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r\")\n-\t(ge:DI (match_dup 1) (const_int 0)))]\n-  \"TARGET_POWERPC64\"\n-  \"@\n-   nand %0,%1,%1\\;srdi. %0,%0,63\n-   #\"\n-  [(set_attr \"type\" \"compare\")\n-   (set_attr \"length\" \"8,12\")])\n-\n-(define_split\n-  [(set (match_operand:CC 4 \"cc_reg_not_cr0_operand\" \"\")\n-\t(compare:CC\n-\t (ge:DI (match_operand:DI 1 \"gpc_reg_operand\" \"\")\n-\t\t(const_int 0))\n-\t (const_int 0)))\n-   (set (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n-\t(ge:DI (match_dup 1) (const_int 0)))]\n-  \"TARGET_POWERPC64 && reload_completed\"\n-  [(set (match_dup 0)\n-\t(ge:DI (match_dup 1) (const_int 0)))\n-   (set (match_dup 4)\n-\t(compare:CC (match_dup 0)\n-\t\t    (const_int 0)))]\n-  \"\")\n-\n (define_insn \"\"\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n \t(plus:SI (ge:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n@@ -11660,200 +11593,6 @@ operands[2] = GEN_INT (INTVAL (operands[1]) >> 32);\n   \"doz%I2 %0,%1,%2\\;{ai|addic} %0,%0,-1\\;{sfe|subfe} %0,%0,%0\"\n   [(set_attr \"length\" \"12\")])\n \n-;; This is (and (neg (ge X (const_int 0))) Y).\n-;; srawi sign-extends, so these patterrns are 64-bit safe.\n-(define_insn \"\"\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n-\t(and:SI (neg:SI\n-\t\t (lshiftrt:SI\n-\t\t  (not:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\"))\n-\t\t  (const_int 31)))\n-\t\t(match_operand:SI 2 \"gpc_reg_operand\" \"r\")))\n-   (clobber (match_scratch:SI 3 \"=&r\"))]\n-  \"\"\n-  \"{srai|srawi} %3,%1,31\\;andc %0,%2,%3\"\n-  [(set_attr \"length\" \"8\")])\n-\n-(define_insn \"\"\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n-\t(and:DI (neg:DI\n-\t\t (lshiftrt:DI\n-\t\t  (not:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r\"))\n-\t\t  (const_int 63)))\n-\t\t(match_operand:DI 2 \"gpc_reg_operand\" \"r\")))\n-   (clobber (match_scratch:DI 3 \"=&r\"))]\n-  \"TARGET_POWERPC64\"\n-  \"sradi %3,%1,63\\;andc %0,%2,%3\"\n-  [(set_attr \"length\" \"8\")])\n-\n-(define_insn \"\"\n-  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,?y\")\n-\t(compare:CC\n-\t (and:SI (neg:SI\n-\t\t  (lshiftrt:SI\n-\t\t   (not:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r\"))\n-\t\t   (const_int 31)))\n-\t\t (match_operand:SI 2 \"gpc_reg_operand\" \"r,r\"))\n-\t (const_int 0)))\n-   (clobber (match_scratch:SI 3 \"=&r,&r\"))]\n-  \"\"\n-  \"@\n-   {srai|srawi} %3,%1,31\\;andc. %3,%2,%3\n-   #\"\n-  [(set_attr \"type\" \"compare\")\n-   (set_attr \"length\" \"8,12\")])\n-\n-(define_split\n-  [(set (match_operand:CC 0 \"cc_reg_not_cr0_operand\" \"\")\n-\t(compare:CC\n-\t (and:SI (neg:SI\n-\t\t  (lshiftrt:SI\n-\t\t   (not:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\"))\n-\t\t   (const_int 31)))\n-\t\t (match_operand:SI 2 \"gpc_reg_operand\" \"\"))\n-\t (const_int 0)))\n-   (clobber (match_scratch:SI 3 \"\"))]\n-  \"reload_completed\"\n-  [(set (match_dup 3)\n-\t(and:SI (neg:SI (lshiftrt:SI\n-\t\t   (not:SI (match_dup 1))\n-\t\t   (const_int 31)))\n-\t\t (match_dup 2)))\n-   (set (match_dup 0)\n-\t(compare:CC (match_dup 3)\n-\t\t    (const_int 0)))]\n-  \"\")\n-\n-(define_insn \"\"\n-  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,?y\")\n-\t(compare:CC\n-\t (and:DI (neg:DI\n-\t\t  (lshiftrt:DI\n-\t\t   (not:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r,r\"))\n-\t\t   (const_int 63)))\n-\t\t (match_operand:DI 2 \"gpc_reg_operand\" \"r,r\"))\n-\t (const_int 0)))\n-   (clobber (match_scratch:DI 3 \"=&r,&r\"))]\n-  \"TARGET_POWERPC64\"\n-  \"@\n-   sradi %3,%1,63\\;andc. %3,%2,%3\n-   #\"\n-  [(set_attr \"type\" \"compare\")\n-   (set_attr \"length\" \"8,12\")])\n-\n-(define_split\n-  [(set (match_operand:CC 0 \"cc_reg_not_cr0_operand\" \"\")\n-\t(compare:CC\n-\t (and:DI (neg:DI\n-\t\t  (lshiftrt:DI\n-\t\t   (not:DI (match_operand:DI 1 \"gpc_reg_operand\" \"\"))\n-\t\t   (const_int 63)))\n-\t\t (match_operand:DI 2 \"gpc_reg_operand\" \"\"))\n-\t (const_int 0)))\n-   (clobber (match_scratch:DI 3 \"\"))]\n-  \"TARGET_POWERPC64 && reload_completed\"\n-  [(set (match_dup 3)\n-\t(and:DI (neg:DI (lshiftrt:DI\n-\t\t   (not:DI (match_dup 1))\n-\t\t   (const_int 63)))\n-\t\t (match_dup 2)))\n-   (set (match_dup 0)\n-\t(compare:CC (match_dup 3)\n-\t\t    (const_int 0)))]\n-  \"\")\n-\n-(define_insn \"\"\n-  [(set (match_operand:CC 4 \"cc_reg_operand\" \"=x,?y\")\n-\t(compare:CC\n-\t (and:SI (neg:SI\n-\t\t  (lshiftrt:SI\n-\t\t   (not:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r\"))\n-\t\t   (const_int 31)))\n-\t\t (match_operand:SI 2 \"gpc_reg_operand\" \"r,r\"))\n-\t (const_int 0)))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r\")\n-\t(and:SI (neg:SI (lshiftrt:SI (not:SI (match_dup 1))\n-\t\t\t\t     (const_int 31)))\n-\t\t(match_dup 2)))\n-   (clobber (match_scratch:SI 3 \"=&r,&r\"))]\n-  \"\"\n-  \"@\n-   {srai|srawi} %3,%1,31\\;andc. %0,%2,%3\n-   #\"\n-  [(set_attr \"type\" \"compare\")\n-   (set_attr \"length\" \"8,12\")])\n-\n-(define_split\n-  [(set (match_operand:CC 4 \"cc_reg_not_cr0_operand\" \"\")\n-\t(compare:CC\n-\t (and:SI (neg:SI\n-\t\t  (lshiftrt:SI\n-\t\t   (not:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\"))\n-\t\t   (const_int 31)))\n-\t\t (match_operand:SI 2 \"gpc_reg_operand\" \"\"))\n-\t (const_int 0)))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n-\t(and:SI (neg:SI (lshiftrt:SI (not:SI (match_dup 1))\n-\t\t\t\t     (const_int 31)))\n-\t\t(match_dup 2)))\n-   (clobber (match_scratch:SI 3 \"\"))]\n-  \"reload_completed\"\n-  [(parallel [(set (match_dup 0)\n-\t(and:SI (neg:SI (lshiftrt:SI (not:SI (match_dup 1))\n-\t\t\t\t     (const_int 31)))\n-\t\t(match_dup 2)))\n-   (clobber (match_dup 3))])\n-   (set (match_dup 4)\n-\t(compare:CC (match_dup 0)\n-\t\t    (const_int 0)))]\n-  \"\")\n-\n-(define_insn \"\"\n-  [(set (match_operand:CC 4 \"cc_reg_operand\" \"=x,?y\")\n-\t(compare:CC\n-\t (and:DI (neg:DI\n-\t\t  (lshiftrt:DI\n-\t\t   (not:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r,r\"))\n-\t\t   (const_int 63)))\n-\t\t (match_operand:DI 2 \"gpc_reg_operand\" \"r,r\"))\n-\t (const_int 0)))\n-   (set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r\")\n-\t(and:DI (neg:DI (lshiftrt:SI (not:DI (match_dup 1))\n-\t\t\t\t     (const_int 63)))\n-\t\t(match_dup 2)))\n-   (clobber (match_scratch:SI 3 \"=&r,&r\"))]\n-  \"TARGET_POWERPC64\"\n-  \"@\n-   sradi %3,%1,63\\;andc. %0,%2,%3\n-   #\"\n-  [(set_attr \"type\" \"compare\")\n-   (set_attr \"length\" \"8,12\")])\n-\n-(define_split\n-  [(set (match_operand:CC 4 \"cc_reg_not_cr0_operand\" \"\")\n-\t(compare:CC\n-\t (and:DI (neg:DI\n-\t\t  (lshiftrt:DI\n-\t\t   (not:DI (match_operand:DI 1 \"gpc_reg_operand\" \"\"))\n-\t\t   (const_int 63)))\n-\t\t (match_operand:DI 2 \"gpc_reg_operand\" \"\"))\n-\t (const_int 0)))\n-   (set (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n-\t(and:DI (neg:DI (lshiftrt:SI (not:DI (match_dup 1))\n-\t\t\t\t     (const_int 63)))\n-\t\t(match_dup 2)))\n-   (clobber (match_scratch:SI 3 \"\"))]\n-  \"TARGET_POWERPC64 && reload_completed\"\n-  [(parallel [(set (match_dup 0)\n-\t(and:DI (neg:DI (lshiftrt:SI (not:DI (match_dup 1))\n-\t\t\t\t     (const_int 63)))\n-\t\t(match_dup 2)))\n-   (clobber (match_dup 3))])\n-   (set (match_dup 4)\n-\t(compare:CC (match_dup 0)\n-\t\t    (const_int 0)))]\n-  \"\")\n-\n (define_insn \"\"\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r\")\n \t(geu:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r\")"}]}