{"sha": "c003c6d6c3398cd119bbbaf2a2bb8a6134022ff8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzAwM2M2ZDZjMzM5OGNkMTE5YmJiYWYyYTJiYjhhNjEzNDAyMmZmOA==", "commit": {"author": {"name": "Alexander Ivchenko", "email": "alexander.ivchenko@intel.com", "date": "2013-10-28T14:25:05Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2013-10-28T14:25:05Z"}, "message": "i386.md (any_truncate): New.\n\n\t* config/i386/i386.md (any_truncate): New.\n\t(trunsuffix): Ditto.\n\t* config/i386/predicates.md (const_8_to_9_operand): New.\n\t(const_10_to_11_operand): Ditto.\n\t(const_12_to_13_operand): Ditto.\n\t(const_14_to_15_operand): Ditto.\n\t(const_16_to_19_operand): Ditto.\n\t(const_20_to_23_operand): Ditto.\n\t(const_24_to_27_operand): Ditto.\n\t(const_28_to_31_operand): Ditto.\n\t* config/i386/sse.md (unspec): Add UNSPEC_UNSIGNED_FIX_NOTRUNC.\n\t(cvtusi2<ssescalarmodesuffix>32): New.\n\t(cvtusi2<ssescalarmodesuffix>64): Ditto.\n\t(ufloatv16siv16sf2): Ditto.\n\t(avx512f_fix_notruncv16sfv16si): Ditto.\n\t(avx512f_ufix_notruncv16sfv16si): Ditto.\n\t(avx512f_vcvtss2usi): Ditto.\n\t(avx512f_vcvtss2usiq): Ditto.\n\t(avx512f_vcvttss2usi): Ditto.\n\t(avx512f_vcvttss2usiq): Ditto.\n\t(avx512f_vcvtsd2usi): Ditto.\n\t(avx512f_vcvtsd2usiq): Ditto.\n\t(avx512f_vcvttsd2usi): Ditto.\n\t(avx512f_vcvttsd2usiq): Ditto.\n\t(ufloatv8siv8df): Ditto.\n\t(avx512f_cvtdq2pd512_2): Ditto.\n\t(avx512f_cvtpd2dq512): Ditto.\n\t(avx512f_ufix_notruncv8dfv8si): Ditto.\n\t(avx512f_cvtpd2ps512): Ditto.\n\t(vec_unpacks_lo_v16sf): Ditto.\n\t(vec_unpacks_hi_v16sf): Ditto.\n\t(vec_unpacks_float_hi_v16si): Ditto.\n\t(vec_unpacks_float_lo_v16si): Ditto.\n\t(avx512f_unpckhps512): Ditto.\n\t(avx512f_unpcklps512): Ditto.\n\t(avx512f_movshdup512): Ditto.\n\t(avx512f_movsldup512): Ditto.\n\t(vec_extract_lo_v32hi): Ditto.\n\t(vec_extract_hi_v32hi): Ditto.\n\t(vec_extract_lo_v64qi): Ditto.\n\t(vec_extract_hi_v64qi): Ditto.\n\t(avx512f_unpckhpd512): Ditto.\n\t(avx512f_movddup512): Ditto.\n\t(avx512f_unpcklpd512): Ditto.\n\t(*avx512f_unpcklpd512): Ditto.\n\t(avx512f_shufps512_1): Ditto.\n\t(avx512f_shufpd512_1): Ditto.\n\t(avx512f_interleave_highv8di): Ditto.\n\t(avx512f_interleave_lowv8di): Ditto.\n\t(PMOV_DST_MODE): Ditto.\n\t(pmov_src_mode): Ditto.\n\t(pmov_src_lower): Ditto.\n\t(pmov_suff): Ditto.\n\t(*avx512f_<code><pmov_src_lower><mode>2): Ditto.\n\t(*avx512f_<code>v8div16qi2): Ditto.\n\t(*avx512f_<code>v8div16qi2_store): Ditto.\n\t(vec_widen_umult_even_v16si): Ditto.\n\t(*vec_widen_umult_even_v16si): Ditto.\n\t(vec_widen_smult_even_v16si): Ditto.\n\t(*vec_widen_smult_even_v16si): Ditto.\n\t(avx512f_interleave_highv16si): Ditto.\n\t(avx512f_interleave_lowv16si): Ditto.\n\t(avx512f_<code>v16qiv16si2): Ditto.\n\t(avx512f_<code>v16hiv16si2): Ditto.\n\t(avx512f_<code>v8qiv8di2): Ditto.\n\t(avx512f_<code>v8hiv8di2): Ditto.\n\t(avx512f_<code>v8siv8di2): Ditto.\n\t(avx512cd_maskb_vec_dupv8di): Ditto.\n\t(avx512cd_maskw_vec_dupv16si): Ditto.\n\t(avx512f_vcvtph2ps512): Ditto.\n\t(avx512f_vcvtps2ph512): Ditto.\n\t(VEC_EXTRACT_MODE): Extened with wider modes.\n\t(VEC_PERM_AVX2): Ditto.\n\t(VEC_PERM_CONST): Ditto.\n\n\nCo-Authored-By: Andrey Turetskiy <andrey.turetskiy@intel.com>\nCo-Authored-By: Anna Tikhonova <anna.tikhonova@intel.com>\nCo-Authored-By: Ilya Tocar <ilya.tocar@intel.com>\nCo-Authored-By: Ilya Verbin <ilya.verbin@intel.com>\nCo-Authored-By: Kirill Yukhin <kirill.yukhin@intel.com>\nCo-Authored-By: Maxim Kuznetsov <maxim.kuznetsov@intel.com>\nCo-Authored-By: Michael Zolotukhin <michael.v.zolotukhin@intel.com>\nCo-Authored-By: Sergey Lega <sergey.s.lega@intel.com>\n\nFrom-SVN: r204128", "tree": {"sha": "7ee1c16b27df95041c64ea5e09f524b46d727d6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7ee1c16b27df95041c64ea5e09f524b46d727d6b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c003c6d6c3398cd119bbbaf2a2bb8a6134022ff8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c003c6d6c3398cd119bbbaf2a2bb8a6134022ff8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c003c6d6c3398cd119bbbaf2a2bb8a6134022ff8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c003c6d6c3398cd119bbbaf2a2bb8a6134022ff8/comments", "author": null, "committer": null, "parents": [{"sha": "1ea1e1b53ff1b68842b80b61845653a9a8fc94fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ea1e1b53ff1b68842b80b61845653a9a8fc94fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ea1e1b53ff1b68842b80b61845653a9a8fc94fc"}], "stats": {"total": 1063, "additions": 1057, "deletions": 6}, "files": [{"sha": "9b43ced922e10145d7aaa8cb90db2099cd9d4aee", "filename": "gcc/ChangeLog", "status": "modified", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c003c6d6c3398cd119bbbaf2a2bb8a6134022ff8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c003c6d6c3398cd119bbbaf2a2bb8a6134022ff8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c003c6d6c3398cd119bbbaf2a2bb8a6134022ff8", "patch": "@@ -1,3 +1,89 @@\n+2013-10-28  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n+\t    Maxim Kuznetsov  <maxim.kuznetsov@intel.com>\n+\t    Sergey Lega  <sergey.s.lega@intel.com>\n+\t    Anna Tikhonova  <anna.tikhonova@intel.com>\n+\t    Ilya Tocar  <ilya.tocar@intel.com>\n+\t    Andrey Turetskiy  <andrey.turetskiy@intel.com>\n+\t    Ilya Verbin  <ilya.verbin@intel.com>\n+\t    Kirill Yukhin  <kirill.yukhin@intel.com>\n+\t    Michael Zolotukhin  <michael.v.zolotukhin@intel.com>\n+\n+\t* config/i386/i386.md (any_truncate): New.\n+\t(trunsuffix): Ditto.\n+\t* config/i386/predicates.md (const_8_to_9_operand): New.\n+\t(const_10_to_11_operand): Ditto.\n+\t(const_12_to_13_operand): Ditto.\n+\t(const_14_to_15_operand): Ditto.\n+\t(const_16_to_19_operand): Ditto.\n+\t(const_20_to_23_operand): Ditto.\n+\t(const_24_to_27_operand): Ditto.\n+\t(const_28_to_31_operand): Ditto.\n+\t* config/i386/sse.md (unspec): Add UNSPEC_UNSIGNED_FIX_NOTRUNC.\n+\t(cvtusi2<ssescalarmodesuffix>32): New.\n+\t(cvtusi2<ssescalarmodesuffix>64): Ditto.\n+\t(ufloatv16siv16sf2): Ditto.\n+\t(avx512f_fix_notruncv16sfv16si): Ditto.\n+\t(avx512f_ufix_notruncv16sfv16si): Ditto.\n+\t(avx512f_vcvtss2usi): Ditto.\n+\t(avx512f_vcvtss2usiq): Ditto.\n+\t(avx512f_vcvttss2usi): Ditto.\n+\t(avx512f_vcvttss2usiq): Ditto.\n+\t(avx512f_vcvtsd2usi): Ditto.\n+\t(avx512f_vcvtsd2usiq): Ditto.\n+\t(avx512f_vcvttsd2usi): Ditto.\n+\t(avx512f_vcvttsd2usiq): Ditto.\n+\t(ufloatv8siv8df): Ditto.\n+\t(avx512f_cvtdq2pd512_2): Ditto.\n+\t(avx512f_cvtpd2dq512): Ditto.\n+\t(avx512f_ufix_notruncv8dfv8si): Ditto.\n+\t(avx512f_cvtpd2ps512): Ditto.\n+\t(vec_unpacks_lo_v16sf): Ditto.\n+\t(vec_unpacks_hi_v16sf): Ditto.\n+\t(vec_unpacks_float_hi_v16si): Ditto.\n+\t(vec_unpacks_float_lo_v16si): Ditto.\n+\t(avx512f_unpckhps512): Ditto.\n+\t(avx512f_unpcklps512): Ditto.\n+\t(avx512f_movshdup512): Ditto.\n+\t(avx512f_movsldup512): Ditto.\n+\t(vec_extract_lo_v32hi): Ditto.\n+\t(vec_extract_hi_v32hi): Ditto.\n+\t(vec_extract_lo_v64qi): Ditto.\n+\t(vec_extract_hi_v64qi): Ditto.\n+\t(avx512f_unpckhpd512): Ditto.\n+\t(avx512f_movddup512): Ditto.\n+\t(avx512f_unpcklpd512): Ditto.\n+\t(*avx512f_unpcklpd512): Ditto.\n+\t(avx512f_shufps512_1): Ditto.\n+\t(avx512f_shufpd512_1): Ditto.\n+\t(avx512f_interleave_highv8di): Ditto.\n+\t(avx512f_interleave_lowv8di): Ditto.\n+\t(PMOV_DST_MODE): Ditto.\n+\t(pmov_src_mode): Ditto.\n+\t(pmov_src_lower): Ditto.\n+\t(pmov_suff): Ditto.\n+\t(*avx512f_<code><pmov_src_lower><mode>2): Ditto.\n+\t(*avx512f_<code>v8div16qi2): Ditto.\n+\t(*avx512f_<code>v8div16qi2_store): Ditto.\n+\t(vec_widen_umult_even_v16si): Ditto.\n+\t(*vec_widen_umult_even_v16si): Ditto.\n+\t(vec_widen_smult_even_v16si): Ditto.\n+\t(*vec_widen_smult_even_v16si): Ditto.\n+\t(avx512f_interleave_highv16si): Ditto.\n+\t(avx512f_interleave_lowv16si): Ditto.\n+\t(avx512f_<code>v16qiv16si2): Ditto.\n+\t(avx512f_<code>v16hiv16si2): Ditto.\n+\t(avx512f_<code>v8qiv8di2): Ditto.\n+\t(avx512f_<code>v8hiv8di2): Ditto.\n+\t(avx512f_<code>v8siv8di2): Ditto.\n+\t(avx512cd_maskb_vec_dupv8di): Ditto.\n+\t(avx512cd_maskw_vec_dupv16si): Ditto.\n+\t(avx512f_vcvtph2ps512): Ditto.\n+\t(avx512f_vcvtps2ph512): Ditto.\n+\t(VEC_EXTRACT_MODE): Extened with wider modes.\n+\t(VEC_PERM_AVX2): Ditto.\n+\t(VEC_PERM_CONST): Ditto.\n+\n+\n 2013-10-28  Joern Rennecke  <joern.rennecke@embecosm.com>\n \n \t* config/arc/arc.c (arc_ccfsm_post_advance):"}, {"sha": "81f565c889170d57ef173e775a51ca88dd4460b3", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c003c6d6c3398cd119bbbaf2a2bb8a6134022ff8/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c003c6d6c3398cd119bbbaf2a2bb8a6134022ff8/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=c003c6d6c3398cd119bbbaf2a2bb8a6134022ff8", "patch": "@@ -861,6 +861,11 @@\n (define_code_attr s [(sign_extend \"s\") (zero_extend \"u\")])\n (define_code_attr u_bool [(sign_extend \"false\") (zero_extend \"true\")])\n \n+;; Used in signed and unsigned truncations.\n+(define_code_iterator any_truncate [ss_truncate truncate us_truncate])\n+;; Instruction suffix for truncations.\n+(define_code_attr trunsuffix [(ss_truncate \"s\") (truncate \"\") (us_truncate \"us\")])\n+\n ;; Used in signed and unsigned fix.\n (define_code_iterator any_fix [fix unsigned_fix])\n (define_code_attr fixsuffix [(fix \"\") (unsigned_fix \"u\")])"}, {"sha": "6ecb8719e9e4729ebc1a2d6e6a28f3ec2f1b27a5", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c003c6d6c3398cd119bbbaf2a2bb8a6134022ff8/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c003c6d6c3398cd119bbbaf2a2bb8a6134022ff8/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=c003c6d6c3398cd119bbbaf2a2bb8a6134022ff8", "patch": "@@ -752,6 +752,11 @@\n   (and (match_code \"const_int\")\n        (match_test \"IN_RANGE (INTVAL (op), 6, 7)\")))\n \n+;; Match 8 to 9.\n+(define_predicate \"const_8_to_9_operand\"\n+  (and (match_code \"const_int\")\n+       (match_test \"IN_RANGE (INTVAL (op), 8, 9)\")))\n+\n ;; Match 8 to 11.\n (define_predicate \"const_8_to_11_operand\"\n   (and (match_code \"const_int\")\n@@ -762,16 +767,51 @@\n   (and (match_code \"const_int\")\n        (match_test \"IN_RANGE (INTVAL (op), 8, 15)\")))\n \n+;; Match 10 to 11.\n+(define_predicate \"const_10_to_11_operand\"\n+  (and (match_code \"const_int\")\n+       (match_test \"IN_RANGE (INTVAL (op), 10, 11)\")))\n+\n+;; Match 12 to 13.\n+(define_predicate \"const_12_to_13_operand\"\n+  (and (match_code \"const_int\")\n+       (match_test \"IN_RANGE (INTVAL (op), 12, 13)\")))\n+\n ;; Match 12 to 15.\n (define_predicate \"const_12_to_15_operand\"\n   (and (match_code \"const_int\")\n        (match_test \"IN_RANGE (INTVAL (op), 12, 15)\")))\n \n+;; Match 14 to 15.\n+(define_predicate \"const_14_to_15_operand\"\n+  (and (match_code \"const_int\")\n+       (match_test \"IN_RANGE (INTVAL (op), 14, 15)\")))\n+\n+;; Match 16 to 19.\n+(define_predicate \"const_16_to_19_operand\"\n+  (and (match_code \"const_int\")\n+       (match_test \"IN_RANGE (INTVAL (op), 16, 19)\")))\n+\n ;; Match 16 to 31.\n (define_predicate \"const_16_to_31_operand\"\n   (and (match_code \"const_int\")\n        (match_test \"IN_RANGE (INTVAL (op), 16, 31)\")))\n \n+;; Match 20 to 23.\n+(define_predicate \"const_20_to_23_operand\"\n+  (and (match_code \"const_int\")\n+       (match_test \"IN_RANGE (INTVAL (op), 20, 23)\")))\n+\n+;; Match 24 to 27.\n+(define_predicate \"const_24_to_27_operand\"\n+  (and (match_code \"const_int\")\n+       (match_test \"IN_RANGE (INTVAL (op), 24, 27)\")))\n+\n+;; Match 28 to 31.\n+(define_predicate \"const_28_to_31_operand\"\n+  (and (match_code \"const_int\")\n+       (match_test \"IN_RANGE (INTVAL (op), 28, 31)\")))\n+\n ;; True if this is a constant appropriate for an increment or decrement.\n (define_predicate \"incdec_operand\"\n   (match_code \"const_int\")"}, {"sha": "09f194c1af997ea5415a2b0e5c61a7072c2e0df9", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 926, "deletions": 6, "changes": 932, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c003c6d6c3398cd119bbbaf2a2bb8a6134022ff8/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c003c6d6c3398cd119bbbaf2a2bb8a6134022ff8/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=c003c6d6c3398cd119bbbaf2a2bb8a6134022ff8", "patch": "@@ -87,6 +87,7 @@\n   ;; For AVX512F support\n   UNSPEC_VPERMI2\n   UNSPEC_VPERMT2\n+  UNSPEC_UNSIGNED_FIX_NOTRUNC\n   UNSPEC_UNSIGNED_PCMP\n   UNSPEC_TESTM\n   UNSPEC_TESTNM\n@@ -2998,6 +2999,34 @@\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"DI\")])\n \n+(define_insn \"cvtusi2<ssescalarmodesuffix>32\"\n+  [(set (match_operand:VF_128 0 \"register_operand\" \"=v\")\n+\t(vec_merge:VF_128\n+\t  (vec_duplicate:VF_128\n+\t    (unsigned_float:<ssescalarmode>\n+\t      (match_operand:SI 2 \"nonimmediate_operand\" \"rm\")))\n+\t  (match_operand:VF_128 1 \"register_operand\" \"v\")\n+\t  (const_int 1)))]\n+  \"TARGET_AVX512F\"\n+  \"vcvtusi2<ssescalarmodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"type\" \"sseicvt\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<ssescalarmode>\")])\n+\n+(define_insn \"cvtusi2<ssescalarmodesuffix>64\"\n+  [(set (match_operand:VF_128 0 \"register_operand\" \"=v\")\n+\t(vec_merge:VF_128\n+\t  (vec_duplicate:VF_128\n+\t    (unsigned_float:<ssescalarmode>\n+\t      (match_operand:DI 2 \"nonimmediate_operand\" \"rm\")))\n+\t  (match_operand:VF_128 1 \"register_operand\" \"v\")\n+\t  (const_int 1)))]\n+  \"TARGET_AVX512F && TARGET_64BIT\"\n+  \"vcvtusi2<ssescalarmodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"type\" \"sseicvt\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<ssescalarmode>\")])\n+\n (define_insn \"float<sseintvecmodelower><mode>2\"\n   [(set (match_operand:VF1 0 \"register_operand\" \"=v\")\n \t(float:VF1\n@@ -3008,6 +3037,16 @@\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n+(define_insn \"ufloatv16siv16sf2\"\n+  [(set (match_operand:V16SF 0 \"register_operand\" \"=v\")\n+\t(unsigned_float:V16SF\n+\t  (match_operand:V16SI 1 \"nonimmediate_operand\" \"vm\")))]\n+  \"TARGET_AVX512F\"\n+  \"vcvtudq2ps\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"ssecvt\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"V16SF\")])\n+\n (define_expand \"floatuns<sseintvecmodelower><mode>2\"\n   [(match_operand:VF1 0 \"register_operand\")\n    (match_operand:<sseintvecmode> 1 \"register_operand\")]\n@@ -3038,6 +3077,28 @@\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n+(define_insn \"avx512f_fix_notruncv16sfv16si\"\n+  [(set (match_operand:V16SI 0 \"register_operand\" \"=v\")\n+\t(unspec:V16SI\n+\t  [(match_operand:V16SF 1 \"nonimmediate_operand\" \"vm\")]\n+\t  UNSPEC_FIX_NOTRUNC))]\n+  \"TARGET_AVX512F\"\n+  \"vcvtps2dq\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"ssecvt\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"XI\")])\n+\n+(define_insn \"avx512f_ufix_notruncv16sfv16si\"\n+  [(set (match_operand:V16SI 0 \"register_operand\" \"=v\")\n+\t(unspec:V16SI\n+\t  [(match_operand:V16SF 1 \"nonimmediate_operand\" \"vm\")]\n+\t  UNSPEC_UNSIGNED_FIX_NOTRUNC))]\n+  \"TARGET_AVX512F\"\n+  \"vcvtps2udq\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"ssecvt\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"XI\")])\n+\n (define_insn \"<fixsuffix>fix_truncv16sfv16si2\"\n   [(set (match_operand:V16SI 0 \"register_operand\" \"=v\")\n \t(any_fix:V16SI\n@@ -3173,6 +3234,106 @@\n    (set_attr \"prefix\" \"orig,orig,maybe_evex\")\n    (set_attr \"mode\" \"DF\")])\n \n+(define_insn \"avx512f_vcvtss2usi\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(unspec:SI\n+\t  [(vec_select:SF\n+\t     (match_operand:V4SF 1 \"nonimmediate_operand\" \"vm\")\n+\t     (parallel [(const_int 0)]))]\n+\t  UNSPEC_UNSIGNED_FIX_NOTRUNC))]\n+  \"TARGET_AVX512F\"\n+  \"vcvtss2usi\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"sseicvt\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"SI\")])\n+\n+(define_insn \"avx512f_vcvtss2usiq\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(unspec:DI\n+\t  [(vec_select:SF\n+\t     (match_operand:V4SF 1 \"nonimmediate_operand\" \"vm\")\n+\t     (parallel [(const_int 0)]))]\n+\t  UNSPEC_UNSIGNED_FIX_NOTRUNC))]\n+  \"TARGET_AVX512F && TARGET_64BIT\"\n+  \"vcvtss2usi\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"sseicvt\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"DI\")])\n+\n+(define_insn \"avx512f_vcvttss2usi\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(unsigned_fix:SI\n+\t  (vec_select:SF\n+\t    (match_operand:V4SF 1 \"nonimmediate_operand\" \"vm\")\n+\t    (parallel [(const_int 0)]))))]\n+  \"TARGET_AVX512F\"\n+  \"vcvttss2usi\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"sseicvt\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"SI\")])\n+\n+(define_insn \"avx512f_vcvttss2usiq\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(unsigned_fix:DI\n+\t  (vec_select:SF\n+\t    (match_operand:V4SF 1 \"nonimmediate_operand\" \"vm\")\n+\t    (parallel [(const_int 0)]))))]\n+  \"TARGET_AVX512F && TARGET_64BIT\"\n+  \"vcvttss2usi\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"sseicvt\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"DI\")])\n+\n+(define_insn \"avx512f_vcvtsd2usi\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(unspec:SI\n+\t  [(vec_select:DF\n+\t     (match_operand:V2DF 1 \"nonimmediate_operand\" \"vm\")\n+\t     (parallel [(const_int 0)]))]\n+\t  UNSPEC_UNSIGNED_FIX_NOTRUNC))]\n+  \"TARGET_AVX512F\"\n+  \"vcvtsd2usi\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"sseicvt\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"SI\")])\n+\n+(define_insn \"avx512f_vcvtsd2usiq\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(unspec:DI\n+\t  [(vec_select:DF\n+\t     (match_operand:V2DF 1 \"nonimmediate_operand\" \"vm\")\n+\t     (parallel [(const_int 0)]))]\n+\t  UNSPEC_UNSIGNED_FIX_NOTRUNC))]\n+  \"TARGET_AVX512F && TARGET_64BIT\"\n+  \"vcvtsd2usi\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"sseicvt\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"DI\")])\n+\n+(define_insn \"avx512f_vcvttsd2usi\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(unsigned_fix:SI\n+\t  (vec_select:DF\n+\t    (match_operand:V2DF 1 \"nonimmediate_operand\" \"vm\")\n+\t    (parallel [(const_int 0)]))))]\n+  \"TARGET_AVX512F\"\n+  \"vcvttsd2usi\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"sseicvt\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"SI\")])\n+\n+(define_insn \"avx512f_vcvttsd2usiq\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(unsigned_fix:DI\n+\t  (vec_select:DF\n+\t    (match_operand:V2DF 1 \"nonimmediate_operand\" \"vm\")\n+\t    (parallel [(const_int 0)]))))]\n+  \"TARGET_AVX512F && TARGET_64BIT\"\n+  \"vcvttsd2usi\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"sseicvt\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"DI\")])\n+\n (define_insn \"sse2_cvtsd2si\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n \t(unspec:SI\n@@ -3282,6 +3443,30 @@\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n+(define_insn \"ufloatv8siv8df\"\n+  [(set (match_operand:V8DF 0 \"register_operand\" \"=v\")\n+\t(unsigned_float:V8DF (match_operand:V8SI 1 \"nonimmediate_operand\" \"vm\")))]\n+  \"TARGET_AVX512F\"\n+  \"vcvtudq2pd\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"ssecvt\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"V8DF\")])\n+\n+(define_insn \"avx512f_cvtdq2pd512_2\"\n+  [(set (match_operand:V8DF 0 \"register_operand\" \"=v\")\n+\t(float:V8DF\n+\t  (vec_select:V8SI\n+\t    (match_operand:V16SI 1 \"nonimmediate_operand\" \"vm\")\n+\t    (parallel [(const_int 0) (const_int 1)\n+\t\t       (const_int 2) (const_int 3)\n+\t\t       (const_int 4) (const_int 5)\n+\t\t       (const_int 6) (const_int 7)]))))]\n+  \"TARGET_AVX\"\n+  \"vcvtdq2pd\\t{%t1, %0|%0, %t1}\"\n+  [(set_attr \"type\" \"ssecvt\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"V8DF\")])\n+\n (define_insn \"avx_cvtdq2pd256_2\"\n   [(set (match_operand:V4DF 0 \"register_operand\" \"=x\")\n \t(float:V4DF\n@@ -3307,6 +3492,16 @@\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"V2DF\")])\n \n+(define_insn \"avx512f_cvtpd2dq512\"\n+  [(set (match_operand:V8SI 0 \"register_operand\" \"=v\")\n+\t(unspec:V8SI [(match_operand:V8DF 1 \"nonimmediate_operand\" \"vm\")]\n+\t\t     UNSPEC_FIX_NOTRUNC))]\n+  \"TARGET_AVX512F\"\n+  \"vcvtpd2dq\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"ssecvt\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"OI\")])\n+\n (define_insn \"avx_cvtpd2dq256\"\n   [(set (match_operand:V4SI 0 \"register_operand\" \"=x\")\n \t(unspec:V4SI [(match_operand:V4DF 1 \"nonimmediate_operand\" \"xm\")]\n@@ -3370,6 +3565,17 @@\n    (set_attr \"athlon_decode\" \"vector\")\n    (set_attr \"bdver1_decode\" \"double\")])\n \n+(define_insn \"avx512f_ufix_notruncv8dfv8si\"\n+  [(set (match_operand:V8SI 0 \"register_operand\" \"=v\")\n+\t(unspec:V8SI\n+\t  [(match_operand:V8DF 1 \"nonimmediate_operand\" \"vm\")]\n+\t  UNSPEC_UNSIGNED_FIX_NOTRUNC))]\n+  \"TARGET_AVX512F\"\n+  \"vcvtpd2udq\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"ssecvt\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"OI\")])\n+\n (define_insn \"<fixsuffix>fix_truncv8dfv8si2\"\n   [(set (match_operand:V8SI 0 \"register_operand\" \"=v\")\n \t(any_fix:V8SI (match_operand:V8DF 1 \"nonimmediate_operand\" \"vm\")))]\n@@ -3480,6 +3686,16 @@\n    (set_attr \"prefix\" \"orig,orig,vex\")\n    (set_attr \"mode\" \"DF\")])\n \n+(define_insn \"avx512f_cvtpd2ps512\"\n+  [(set (match_operand:V8SF 0 \"register_operand\" \"=v\")\n+\t(float_truncate:V8SF\n+\t  (match_operand:V8DF 1 \"nonimmediate_operand\" \"vm\")))]\n+  \"TARGET_AVX512F\"\n+  \"vcvtpd2ps\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"ssecvt\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"V8SF\")])\n+\n (define_insn \"avx_cvtpd2ps256\"\n   [(set (match_operand:V4SF 0 \"register_operand\" \"=x\")\n \t(float_truncate:V4SF\n@@ -3548,6 +3764,21 @@\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"V4DF\")])\n \n+(define_insn \"vec_unpacks_lo_v16sf\"\n+  [(set (match_operand:V8DF 0 \"register_operand\" \"=v\")\n+\t(float_extend:V8DF\n+\t  (vec_select:V8SF\n+\t    (match_operand:V16SF 1 \"nonimmediate_operand\" \"vm\")\n+\t    (parallel [(const_int 0) (const_int 1)\n+\t\t       (const_int 2) (const_int 3)\n+\t\t       (const_int 4) (const_int 5)\n+\t\t       (const_int 6) (const_int 7)]))))]\n+  \"TARGET_AVX512F\"\n+  \"vcvtps2pd\\t{%t1, %0|%0, %t1}\"\n+  [(set_attr \"type\" \"ssecvt\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"V8DF\")])\n+\n (define_insn \"sse2_cvtps2pd\"\n   [(set (match_operand:V2DF 0 \"register_operand\" \"=x\")\n \t(float_extend:V2DF\n@@ -3592,6 +3823,20 @@\n   \"TARGET_AVX\"\n   \"operands[2] = gen_reg_rtx (V4SFmode);\")\n \n+(define_expand \"vec_unpacks_hi_v16sf\"\n+  [(set (match_dup 2)\n+\t(vec_select:V8SF\n+\t  (match_operand:V16SF 1 \"nonimmediate_operand\")\n+\t  (parallel [(const_int 8) (const_int 9)\n+\t\t     (const_int 10) (const_int 11)\n+\t\t     (const_int 12) (const_int 13)\n+\t\t     (const_int 14) (const_int 15)])))\n+   (set (match_operand:V8DF 0 \"register_operand\")\n+\t(float_extend:V8DF\n+\t  (match_dup 2)))]\n+\"TARGET_AVX512F\"\n+\"operands[2] = gen_reg_rtx (V8SFmode);\")\n+\n (define_expand \"vec_unpacks_lo_v4sf\"\n   [(set (match_operand:V2DF 0 \"register_operand\")\n \t(float_extend:V2DF\n@@ -3708,6 +3953,31 @@\n \t\t       (const_int 2) (const_int 3)]))))]\n   \"TARGET_AVX\")\n \n+(define_expand \"vec_unpacks_float_hi_v16si\"\n+  [(set (match_dup 2)\n+\t(vec_select:V8SI\n+\t  (match_operand:V16SI 1 \"nonimmediate_operand\")\n+\t  (parallel [(const_int 8) (const_int 9)\n+\t\t     (const_int 10) (const_int 11)\n+\t\t     (const_int 12) (const_int 13)\n+\t\t     (const_int 14) (const_int 15)])))\n+   (set (match_operand:V8DF 0 \"register_operand\")\n+\t(float:V8DF\n+\t  (match_dup 2)))]\n+  \"TARGET_AVX512F\"\n+  \"operands[2] = gen_reg_rtx (V8SImode);\")\n+\n+(define_expand \"vec_unpacks_float_lo_v16si\"\n+  [(set (match_operand:V8DF 0 \"register_operand\")\n+\t(float:V8DF\n+\t  (vec_select:V8SI\n+\t    (match_operand:V16SI 1 \"nonimmediate_operand\")\n+\t    (parallel [(const_int 0) (const_int 1)\n+\t\t       (const_int 2) (const_int 3)\n+\t\t       (const_int 4) (const_int 5)\n+\t\t       (const_int 6) (const_int 7)]))))]\n+  \"TARGET_AVX512F\")\n+\n (define_expand \"vec_unpacku_float_hi_v4si\"\n   [(set (match_dup 5)\n \t(vec_select:V4SI\n@@ -4112,6 +4382,26 @@\n    (set_attr \"prefix\" \"orig,vex,orig,vex,maybe_vex\")\n    (set_attr \"mode\" \"V4SF,V4SF,V2SF,V2SF,V2SF\")])\n \n+(define_insn \"avx512f_unpckhps512\"\n+  [(set (match_operand:V16SF 0 \"register_operand\" \"=v\")\n+\t(vec_select:V16SF\n+\t  (vec_concat:V32SF\n+\t    (match_operand:V16SF 1 \"register_operand\" \"v\")\n+\t    (match_operand:V16SF 2 \"nonimmediate_operand\" \"vm\"))\n+\t  (parallel [(const_int 2) (const_int 18)\n+\t\t     (const_int 3) (const_int 19)\n+\t\t     (const_int 6) (const_int 22)\n+\t\t     (const_int 7) (const_int 23)\n+\t\t     (const_int 10) (const_int 26)\n+\t\t     (const_int 11) (const_int 27)\n+\t\t     (const_int 14) (const_int 30)\n+\t\t     (const_int 15) (const_int 31)])))]\n+  \"TARGET_AVX512F\"\n+  \"vunpckhps\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"type\" \"sselog\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"V16SF\")])\n+\n ;; Recall that the 256-bit unpck insns only shuffle within their lanes.\n (define_insn \"avx_unpckhps256\"\n   [(set (match_operand:V8SF 0 \"register_operand\" \"=x\")\n@@ -4180,6 +4470,26 @@\n    (set_attr \"prefix\" \"orig,vex\")\n    (set_attr \"mode\" \"V4SF\")])\n \n+(define_insn \"avx512f_unpcklps512\"\n+  [(set (match_operand:V16SF 0 \"register_operand\" \"=v\")\n+\t(vec_select:V16SF\n+\t  (vec_concat:V32SF\n+\t    (match_operand:V16SF 1 \"register_operand\" \"v\")\n+\t    (match_operand:V16SF 2 \"nonimmediate_operand\" \"vm\"))\n+\t  (parallel [(const_int 0) (const_int 16)\n+\t\t     (const_int 1) (const_int 17)\n+\t\t     (const_int 4) (const_int 20)\n+\t\t     (const_int 5) (const_int 21)\n+\t\t     (const_int 8) (const_int 24)\n+\t\t     (const_int 9) (const_int 25)\n+\t\t     (const_int 12) (const_int 28)\n+\t\t     (const_int 13) (const_int 29)])))]\n+  \"TARGET_AVX512F\"\n+  \"vunpcklps\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"type\" \"sselog\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"V16SF\")])\n+\n ;; Recall that the 256-bit unpck insns only shuffle within their lanes.\n (define_insn \"avx_unpcklps256\"\n   [(set (match_operand:V8SF 0 \"register_operand\" \"=x\")\n@@ -4283,6 +4593,26 @@\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"V4SF\")])\n \n+(define_insn \"avx512f_movshdup512\"\n+  [(set (match_operand:V16SF 0 \"register_operand\" \"=v\")\n+\t(vec_select:V16SF\n+\t  (vec_concat:V32SF\n+\t    (match_operand:V16SF 1 \"nonimmediate_operand\" \"vm\")\n+\t    (match_dup 1))\n+\t  (parallel [(const_int 1) (const_int 1)\n+\t\t     (const_int 3) (const_int 3)\n+\t\t     (const_int 5) (const_int 5)\n+\t\t     (const_int 7) (const_int 7)\n+\t\t     (const_int 9) (const_int 9)\n+\t\t     (const_int 11) (const_int 11)\n+\t\t     (const_int 13) (const_int 13)\n+\t\t     (const_int 15) (const_int 15)])))]\n+  \"TARGET_AVX512F\"\n+  \"vmovshdup\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"sse\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"V16SF\")])\n+\n (define_insn \"avx_movsldup256\"\n   [(set (match_operand:V8SF 0 \"register_operand\" \"=x\")\n \t(vec_select:V8SF\n@@ -4316,6 +4646,26 @@\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"V4SF\")])\n \n+(define_insn \"avx512f_movsldup512\"\n+  [(set (match_operand:V16SF 0 \"register_operand\" \"=v\")\n+\t(vec_select:V16SF\n+\t  (vec_concat:V32SF\n+\t    (match_operand:V16SF 1 \"nonimmediate_operand\" \"vm\")\n+\t    (match_dup 1))\n+\t  (parallel [(const_int 0) (const_int 0)\n+\t\t     (const_int 2) (const_int 2)\n+\t\t     (const_int 4) (const_int 4)\n+\t\t     (const_int 6) (const_int 6)\n+\t\t     (const_int 8) (const_int 8)\n+\t\t     (const_int 10) (const_int 10)\n+\t\t     (const_int 12) (const_int 12)\n+\t\t     (const_int 14) (const_int 14)])))]\n+  \"TARGET_AVX512F\"\n+  \"vmovsldup\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"sse\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"V16SF\")])\n+\n (define_expand \"avx_shufps256\"\n   [(match_operand:V8SF 0 \"register_operand\")\n    (match_operand:V8SF 1 \"register_operand\")\n@@ -5050,6 +5400,50 @@\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n+(define_insn_and_split \"vec_extract_lo_v32hi\"\n+  [(set (match_operand:V16HI 0 \"nonimmediate_operand\" \"=v,m\")\n+\t(vec_select:V16HI\n+\t  (match_operand:V32HI 1 \"nonimmediate_operand\" \"vm,v\")\n+\t  (parallel [(const_int 0) (const_int 1)\n+\t\t     (const_int 2) (const_int 3)\n+\t\t     (const_int 4) (const_int 5)\n+\t\t     (const_int 6) (const_int 7)\n+\t\t     (const_int 8) (const_int 9)\n+\t\t     (const_int 10) (const_int 11)\n+\t\t     (const_int 12) (const_int 13)\n+\t\t     (const_int 14) (const_int 15)])))]\n+  \"TARGET_AVX512F && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(set (match_dup 0) (match_dup 1))]\n+{\n+  if (REG_P (operands[1]))\n+    operands[1] = gen_rtx_REG (V16HImode, REGNO (operands[1]));\n+  else\n+    operands[1] = adjust_address (operands[1], V16HImode, 0);\n+})\n+\n+(define_insn \"vec_extract_hi_v32hi\"\n+  [(set (match_operand:V16HI 0 \"nonimmediate_operand\" \"=v,m\")\n+\t(vec_select:V16HI\n+\t  (match_operand:V32HI 1 \"nonimmediate_operand\" \"v,v\")\n+\t  (parallel [(const_int 16) (const_int 17)\n+\t\t     (const_int 18) (const_int 19)\n+\t\t     (const_int 20) (const_int 21)\n+\t\t     (const_int 22) (const_int 23)\n+\t\t     (const_int 24) (const_int 25)\n+\t\t     (const_int 26) (const_int 27)\n+\t\t     (const_int 28) (const_int 29)\n+\t\t     (const_int 30) (const_int 31)])))]\n+  \"TARGET_AVX512F\"\n+  \"vextracti64x4\\t{$0x1, %1, %0|%0, %1, 0x1}\"\n+  [(set_attr \"type\" \"sselog\")\n+   (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"length_immediate\" \"1\")\n+   (set_attr \"memory\" \"none,store\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"XI\")])\n+\n (define_insn_and_split \"vec_extract_lo_v16hi\"\n   [(set (match_operand:V8HI 0 \"nonimmediate_operand\" \"=x,m\")\n \t(vec_select:V8HI\n@@ -5086,6 +5480,66 @@\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"OI\")])\n \n+(define_insn_and_split \"vec_extract_lo_v64qi\"\n+  [(set (match_operand:V32QI 0 \"nonimmediate_operand\" \"=v,m\")\n+\t(vec_select:V32QI\n+\t  (match_operand:V64QI 1 \"nonimmediate_operand\" \"vm,v\")\n+\t  (parallel [(const_int 0) (const_int 1)\n+\t\t     (const_int 2) (const_int 3)\n+\t\t     (const_int 4) (const_int 5)\n+\t\t     (const_int 6) (const_int 7)\n+\t\t     (const_int 8) (const_int 9)\n+\t\t     (const_int 10) (const_int 11)\n+\t\t     (const_int 12) (const_int 13)\n+\t\t     (const_int 14) (const_int 15)\n+\t\t     (const_int 16) (const_int 17)\n+\t\t     (const_int 18) (const_int 19)\n+\t\t     (const_int 20) (const_int 21)\n+\t\t     (const_int 22) (const_int 23)\n+\t\t     (const_int 24) (const_int 25)\n+\t\t     (const_int 26) (const_int 27)\n+\t\t     (const_int 28) (const_int 29)\n+\t\t     (const_int 30) (const_int 31)])))]\n+  \"TARGET_AVX512F && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(set (match_dup 0) (match_dup 1))]\n+{\n+  if (REG_P (operands[1]))\n+    operands[1] = gen_rtx_REG (V32QImode, REGNO (operands[1]));\n+  else\n+    operands[1] = adjust_address (operands[1], V32QImode, 0);\n+})\n+\n+(define_insn \"vec_extract_hi_v64qi\"\n+  [(set (match_operand:V32QI 0 \"nonimmediate_operand\" \"=v,m\")\n+\t(vec_select:V32QI\n+\t  (match_operand:V64QI 1 \"nonimmediate_operand\" \"v,v\")\n+\t  (parallel [(const_int 32) (const_int 33)\n+\t\t     (const_int 34) (const_int 35)\n+\t\t     (const_int 36) (const_int 37)\n+\t\t     (const_int 38) (const_int 39)\n+\t\t     (const_int 40) (const_int 41)\n+\t\t     (const_int 42) (const_int 43)\n+\t\t     (const_int 44) (const_int 45)\n+\t\t     (const_int 46) (const_int 47)\n+\t\t     (const_int 48) (const_int 49)\n+\t\t     (const_int 50) (const_int 51)\n+\t\t     (const_int 52) (const_int 53)\n+\t\t     (const_int 54) (const_int 55)\n+\t\t     (const_int 56) (const_int 57)\n+\t\t     (const_int 58) (const_int 59)\n+\t\t     (const_int 60) (const_int 61)\n+\t\t     (const_int 62) (const_int 63)])))]\n+  \"TARGET_AVX512F\"\n+  \"vextracti64x4\\t{$0x1, %1, %0|%0, %1, 0x1}\"\n+  [(set_attr \"type\" \"sselog\")\n+   (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"length_immediate\" \"1\")\n+   (set_attr \"memory\" \"none,store\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"XI\")])\n+\n (define_insn_and_split \"vec_extract_lo_v32qi\"\n   [(set (match_operand:V16QI 0 \"nonimmediate_operand\" \"=x,m\")\n \t(vec_select:V16QI\n@@ -5134,10 +5588,10 @@\n (define_mode_iterator VEC_EXTRACT_MODE\n   [(V32QI \"TARGET_AVX\") V16QI\n    (V16HI \"TARGET_AVX\") V8HI\n-   (V8SI \"TARGET_AVX\") V4SI\n-   (V4DI \"TARGET_AVX\") V2DI\n-   (V8SF \"TARGET_AVX\") V4SF\n-   (V4DF \"TARGET_AVX\") V2DF])\n+   (V16SI \"TARGET_AVX512F\") (V8SI \"TARGET_AVX\") V4SI\n+   (V8DI \"TARGET_AVX512F\") (V4DI \"TARGET_AVX\") V2DI\n+   (V16SF \"TARGET_AVX512F\") (V8SF \"TARGET_AVX\") V4SF\n+   (V8DF \"TARGET_AVX512F\") (V4DF \"TARGET_AVX\") V2DF])\n \n (define_expand \"vec_extract<mode>\"\n   [(match_operand:<ssescalarmode> 0 \"register_operand\")\n@@ -5156,6 +5610,22 @@\n ;;\n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n \n+(define_insn \"avx512f_unpckhpd512\"\n+  [(set (match_operand:V8DF 0 \"register_operand\" \"=v\")\n+\t(vec_select:V8DF\n+\t  (vec_concat:V16DF\n+\t    (match_operand:V8DF 1 \"nonimmediate_operand\" \"v\")\n+\t    (match_operand:V8DF 2 \"nonimmediate_operand\" \"vm\"))\n+\t  (parallel [(const_int 1) (const_int 9)\n+\t\t     (const_int 3) (const_int 11)\n+\t\t     (const_int 5) (const_int 13)\n+\t\t     (const_int 7) (const_int 15)])))]\n+  \"TARGET_AVX512F\"\n+  \"vunpckhpd\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"type\" \"sselog\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"V8DF\")])\n+\n ;; Recall that the 256-bit unpck insns only shuffle within their lanes.\n (define_insn \"avx_unpckhpd256\"\n   [(set (match_operand:V4DF 0 \"register_operand\" \"=x\")\n@@ -5236,6 +5706,48 @@\n    (set_attr \"prefix\" \"orig,vex,maybe_vex,orig,vex,maybe_vex\")\n    (set_attr \"mode\" \"V2DF,V2DF,DF,V1DF,V1DF,V1DF\")])\n \n+(define_expand \"avx512f_movddup512\"\n+  [(set (match_operand:V8DF 0 \"register_operand\")\n+\t(vec_select:V8DF\n+\t  (vec_concat:V16DF\n+\t    (match_operand:V8DF 1 \"nonimmediate_operand\")\n+\t    (match_dup 1))\n+\t  (parallel [(const_int 0) (const_int 8)\n+\t\t     (const_int 2) (const_int 10)\n+\t\t     (const_int 4) (const_int 12)\n+\t\t     (const_int 6) (const_int 14)])))]\n+  \"TARGET_AVX512F\")\n+\n+(define_expand \"avx512f_unpcklpd512\"\n+  [(set (match_operand:V8DF 0 \"register_operand\")\n+\t(vec_select:V8DF\n+\t  (vec_concat:V16DF\n+\t    (match_operand:V8DF 1 \"register_operand\")\n+\t    (match_operand:V8DF 2 \"nonimmediate_operand\"))\n+\t  (parallel [(const_int 0) (const_int 8)\n+\t\t     (const_int 2) (const_int 10)\n+\t\t     (const_int 4) (const_int 12)\n+\t\t     (const_int 6) (const_int 14)])))]\n+  \"TARGET_AVX512F\")\n+\n+(define_insn \"*avx512f_unpcklpd512\"\n+  [(set (match_operand:V8DF 0 \"register_operand\" \"=v,v\")\n+\t(vec_select:V8DF\n+\t  (vec_concat:V16DF\n+\t    (match_operand:V8DF 1 \"nonimmediate_operand\" \"vm, v\")\n+\t    (match_operand:V8DF 2 \"nonimmediate_operand\" \"1 ,vm\"))\n+\t  (parallel [(const_int 0) (const_int 8)\n+\t\t     (const_int 2) (const_int 10)\n+\t\t     (const_int 4) (const_int 12)\n+\t\t     (const_int 6) (const_int 14)])))]\n+  \"TARGET_AVX512F\"\n+  \"@\n+   vmovddup\\t{%1, %0|%0, %1}\n+   vunpcklpd\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"type\" \"sselog\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"V8DF\")])\n+\n ;; Recall that the 256-bit unpck insns only shuffle within their lanes.\n (define_expand \"avx_movddup256\"\n   [(set (match_operand:V4DF 0 \"register_operand\")\n@@ -5495,6 +6007,91 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n+;; One bit in mask selects 2 elements.\n+(define_insn \"avx512f_shufps512_1\"\n+  [(set (match_operand:V16SF 0 \"register_operand\" \"=v\")\n+\t(vec_select:V16SF\n+\t  (vec_concat:V32SF\n+\t    (match_operand:V16SF 1 \"register_operand\" \"v\")\n+\t    (match_operand:V16SF 2 \"nonimmediate_operand\" \"vm\"))\n+\t  (parallel [(match_operand 3  \"const_0_to_3_operand\")\n+\t\t     (match_operand 4  \"const_0_to_3_operand\")\n+\t\t     (match_operand 5  \"const_16_to_19_operand\")\n+\t\t     (match_operand 6  \"const_16_to_19_operand\")\n+\t\t     (match_operand 7  \"const_4_to_7_operand\")\n+\t\t     (match_operand 8  \"const_4_to_7_operand\")\n+\t\t     (match_operand 9  \"const_20_to_23_operand\")\n+\t\t     (match_operand 10  \"const_20_to_23_operand\")\n+\t\t     (match_operand 11  \"const_8_to_11_operand\")\n+\t\t     (match_operand 12  \"const_8_to_11_operand\")\n+\t\t     (match_operand 13  \"const_24_to_27_operand\")\n+\t\t     (match_operand 14  \"const_24_to_27_operand\")\n+\t\t     (match_operand 15  \"const_12_to_15_operand\")\n+\t\t     (match_operand 16  \"const_12_to_15_operand\")\n+\t\t     (match_operand 17  \"const_28_to_31_operand\")\n+\t\t     (match_operand 18  \"const_28_to_31_operand\")])))]\n+  \"TARGET_AVX512F\n+   && (INTVAL (operands[3]) == (INTVAL (operands[7]) - 4)\n+       && INTVAL (operands[4]) == (INTVAL (operands[8]) - 4)\n+       && INTVAL (operands[5]) == (INTVAL (operands[9]) - 4)\n+       && INTVAL (operands[6]) == (INTVAL (operands[10]) - 4)\n+       && INTVAL (operands[3]) == (INTVAL (operands[11]) - 8)\n+       && INTVAL (operands[4]) == (INTVAL (operands[12]) - 8)\n+       && INTVAL (operands[5]) == (INTVAL (operands[13]) - 8)\n+       && INTVAL (operands[6]) == (INTVAL (operands[14]) - 8)\n+       && INTVAL (operands[3]) == (INTVAL (operands[15]) - 12)\n+       && INTVAL (operands[4]) == (INTVAL (operands[16]) - 12)\n+       && INTVAL (operands[5]) == (INTVAL (operands[17]) - 12)\n+       && INTVAL (operands[6]) == (INTVAL (operands[18]) - 12))\"\n+{\n+  int mask;\n+  mask = INTVAL (operands[3]);\n+  mask |= INTVAL (operands[4]) << 2;\n+  mask |= (INTVAL (operands[5]) - 16) << 4;\n+  mask |= (INTVAL (operands[6]) - 16) << 6;\n+  operands[3] = GEN_INT (mask);\n+\n+  return \"vshufps\\t{%3, %2, %1, %0|%0, %1, %2, %3}\";\n+}\n+  [(set_attr \"type\" \"sselog\")\n+   (set_attr \"length_immediate\" \"1\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"V16SF\")])\n+\n+(define_insn \"avx512f_shufpd512_1\"\n+  [(set (match_operand:V8DF 0 \"register_operand\" \"=v\")\n+\t(vec_select:V8DF\n+\t  (vec_concat:V16DF\n+\t    (match_operand:V8DF 1 \"register_operand\" \"v\")\n+\t    (match_operand:V8DF 2 \"nonimmediate_operand\" \"vm\"))\n+\t  (parallel [(match_operand 3 \"const_0_to_1_operand\")\n+\t\t     (match_operand 4 \"const_8_to_9_operand\")\n+\t\t     (match_operand 5 \"const_2_to_3_operand\")\n+\t\t     (match_operand 6 \"const_10_to_11_operand\")\n+\t\t     (match_operand 7 \"const_4_to_5_operand\")\n+\t\t     (match_operand 8 \"const_12_to_13_operand\")\n+\t\t     (match_operand 9 \"const_6_to_7_operand\")\n+\t\t     (match_operand 10 \"const_14_to_15_operand\")])))]\n+  \"TARGET_AVX512F\"\n+{\n+  int mask;\n+  mask = INTVAL (operands[3]);\n+  mask |= (INTVAL (operands[4]) - 8) << 1;\n+  mask |= (INTVAL (operands[5]) - 2) << 2;\n+  mask |= (INTVAL (operands[6]) - 10) << 3;\n+  mask |= (INTVAL (operands[7]) - 4) << 4;\n+  mask |= (INTVAL (operands[8]) - 12) << 5;\n+  mask |= (INTVAL (operands[9]) - 6) << 6;\n+  mask |= (INTVAL (operands[10]) - 14) << 7;\n+  operands[3] = GEN_INT (mask);\n+\n+  return \"vshufpd\\t{%3, %2, %1, %0|%0, %1, %2, %3}\";\n+}\n+  [(set_attr \"type\" \"sselog\")\n+   (set_attr \"length_immediate\" \"1\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"V8DF\")])\n+\n (define_expand \"avx_shufpd256\"\n   [(match_operand:V4DF 0 \"register_operand\")\n    (match_operand:V4DF 1 \"register_operand\")\n@@ -5568,6 +6165,22 @@\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"OI\")])\n \n+(define_insn \"avx512f_interleave_highv8di\"\n+  [(set (match_operand:V8DI 0 \"register_operand\" \"=v\")\n+\t(vec_select:V8DI\n+\t  (vec_concat:V16DI\n+\t    (match_operand:V8DI 1 \"register_operand\" \"v\")\n+\t    (match_operand:V8DI 2 \"nonimmediate_operand\" \"vm\"))\n+\t  (parallel [(const_int 1) (const_int 9)\n+\t\t     (const_int 3) (const_int 11)\n+\t\t     (const_int 5) (const_int 13)\n+\t\t     (const_int 7) (const_int 15)])))]\n+  \"TARGET_AVX512F\"\n+  \"vpunpckhqdq\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"type\" \"sselog\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"XI\")])\n+\n (define_insn \"vec_interleave_highv2di\"\n   [(set (match_operand:V2DI 0 \"register_operand\" \"=x,x\")\n \t(vec_select:V2DI\n@@ -5602,6 +6215,22 @@\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"OI\")])\n \n+(define_insn \"avx512f_interleave_lowv8di\"\n+  [(set (match_operand:V8DI 0 \"register_operand\" \"=v\")\n+\t(vec_select:V8DI\n+\t  (vec_concat:V16DI\n+\t    (match_operand:V8DI 1 \"register_operand\" \"v\")\n+\t    (match_operand:V8DI 2 \"nonimmediate_operand\" \"vm\"))\n+\t  (parallel [(const_int 0) (const_int 8)\n+\t\t     (const_int 2) (const_int 10)\n+\t\t     (const_int 4) (const_int 12)\n+\t\t     (const_int 6) (const_int 14)])))]\n+  \"TARGET_AVX512F\"\n+  \"vpunpcklqdq\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"type\" \"sselog\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"XI\")])\n+\n (define_insn \"vec_interleave_lowv2di\"\n   [(set (match_operand:V2DI 0 \"register_operand\" \"=x,x\")\n \t(vec_select:V2DI\n@@ -5943,6 +6572,64 @@\n    (set_attr \"prefix\" \"orig,vex,maybe_vex,orig,vex,maybe_vex,orig,orig\")\n    (set_attr \"mode\" \"V2DF,V2DF,DF,V1DF,V1DF,DF,V4SF,V2SF\")])\n \n+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n+;;\n+;; Parallel integer down-conversion operations\n+;;\n+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n+\n+(define_mode_iterator PMOV_DST_MODE [V16QI V16HI V8SI V8HI])\n+(define_mode_attr pmov_src_mode\n+  [(V16QI \"V16SI\") (V16HI \"V16SI\") (V8SI \"V8DI\") (V8HI \"V8DI\")])\n+(define_mode_attr pmov_src_lower\n+  [(V16QI \"v16si\") (V16HI \"v16si\") (V8SI \"v8di\") (V8HI \"v8di\")])\n+(define_mode_attr pmov_suff\n+  [(V16QI \"db\") (V16HI \"dw\") (V8SI \"qd\") (V8HI \"qw\")])\n+\n+(define_insn \"*avx512f_<code><pmov_src_lower><mode>2\"\n+  [(set (match_operand:PMOV_DST_MODE 0 \"nonimmediate_operand\" \"=v,m\")\n+\t(any_truncate:PMOV_DST_MODE\n+\t  (match_operand:<pmov_src_mode> 1 \"register_operand\" \"v,v\")))]\n+  \"TARGET_AVX512F\"\n+  \"vpmov<trunsuffix><pmov_suff>\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"ssemov\")\n+   (set_attr \"memory\" \"none,store\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<sseinsnmode>\")])\n+\n+(define_insn \"*avx512f_<code>v8div16qi2\"\n+  [(set (match_operand:V16QI 0 \"register_operand\" \"=v\")\n+\t(vec_concat:V16QI\n+\t  (any_truncate:V8QI\n+\t    (match_operand:V8DI 1 \"register_operand\" \"v\"))\n+\t  (const_vector:V8QI [(const_int 0) (const_int 0)\n+\t\t\t      (const_int 0) (const_int 0)\n+\t\t\t      (const_int 0) (const_int 0)\n+\t\t\t      (const_int 0) (const_int 0)])))]\n+  \"TARGET_AVX512F\"\n+  \"vpmov<trunsuffix>qb\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"ssemov\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"TI\")])\n+\n+(define_insn \"*avx512f_<code>v8div16qi2_store\"\n+  [(set (match_operand:V16QI 0 \"memory_operand\" \"=m\")\n+\t(vec_concat:V16QI\n+\t  (any_truncate:V8QI\n+\t    (match_operand:V8DI 1 \"register_operand\" \"v\"))\n+\t  (vec_select:V8QI\n+\t    (match_dup 0)\n+\t    (parallel [(const_int 8) (const_int 9)\n+\t\t       (const_int 10) (const_int 11)\n+\t\t       (const_int 12) (const_int 13)\n+\t\t       (const_int 14) (const_int 15)]))))]\n+  \"TARGET_AVX512F\"\n+  \"vpmov<trunsuffix>qb\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"ssemov\")\n+   (set_attr \"memory\" \"store\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"TI\")])\n+\n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n ;;\n ;; Parallel integral arithmetic\n@@ -6067,6 +6754,51 @@\n    (set_attr \"prefix\" \"orig,vex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n+(define_expand \"vec_widen_umult_even_v16si\"\n+  [(set (match_operand:V8DI 0 \"register_operand\")\n+        (mult:V8DI\n+          (zero_extend:V8DI\n+            (vec_select:V8SI\n+              (match_operand:V16SI 1 \"nonimmediate_operand\")\n+              (parallel [(const_int 0) (const_int 2)\n+                         (const_int 4) (const_int 6)\n+                         (const_int 8) (const_int 10)\n+                         (const_int 12) (const_int 14)])))\n+          (zero_extend:V8DI\n+            (vec_select:V8SI\n+              (match_operand:V16SI 2 \"nonimmediate_operand\")\n+              (parallel [(const_int 0) (const_int 2)\n+                         (const_int 4) (const_int 6)\n+                         (const_int 8) (const_int 10)\n+                         (const_int 12) (const_int 14)])))))]\n+  \"TARGET_AVX512F\"\n+  \"ix86_fixup_binary_operands_no_copy (MULT, V16SImode, operands);\")\n+\n+(define_insn \"*vec_widen_umult_even_v16si\"\n+  [(set (match_operand:V8DI 0 \"register_operand\" \"=v\")\n+        (mult:V8DI\n+          (zero_extend:V8DI\n+            (vec_select:V8SI\n+              (match_operand:V16SI 1 \"nonimmediate_operand\" \"%v\")\n+              (parallel [(const_int 0) (const_int 2)\n+                         (const_int 4) (const_int 6)\n+                         (const_int 8) (const_int 10)\n+                         (const_int 12) (const_int 14)])))\n+          (zero_extend:V8DI\n+            (vec_select:V8SI\n+              (match_operand:V16SI 2 \"nonimmediate_operand\" \"vm\")\n+              (parallel [(const_int 0) (const_int 2)\n+                         (const_int 4) (const_int 6)\n+                         (const_int 8) (const_int 10)\n+                         (const_int 12) (const_int 14)])))))]\n+  \"TARGET_AVX512F && ix86_binary_operator_ok (MULT, V16SImode, operands)\"\n+  \"vpmuludq\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"isa\" \"avx512f\")\n+   (set_attr \"type\" \"sseimul\")\n+   (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"XI\")])\n+\n (define_expand \"vec_widen_umult_even_v8si\"\n   [(set (match_operand:V4DI 0 \"register_operand\")\n \t(mult:V4DI\n@@ -6137,6 +6869,51 @@\n    (set_attr \"prefix\" \"orig,vex\")\n    (set_attr \"mode\" \"TI\")])\n \n+(define_expand \"vec_widen_smult_even_v16si\"\n+  [(set (match_operand:V8DI 0 \"register_operand\")\n+        (mult:V8DI\n+          (sign_extend:V8DI\n+            (vec_select:V8SI\n+              (match_operand:V16SI 1 \"nonimmediate_operand\")\n+              (parallel [(const_int 0) (const_int 2)\n+                         (const_int 4) (const_int 6)\n+                         (const_int 8) (const_int 10)\n+                         (const_int 12) (const_int 14)])))\n+          (sign_extend:V8DI\n+            (vec_select:V8SI\n+              (match_operand:V16SI 2 \"nonimmediate_operand\")\n+              (parallel [(const_int 0) (const_int 2)\n+                         (const_int 4) (const_int 6)\n+                         (const_int 8) (const_int 10)\n+                         (const_int 12) (const_int 14)])))))]\n+  \"TARGET_AVX512F\"\n+  \"ix86_fixup_binary_operands_no_copy (MULT, V16SImode, operands);\")\n+\n+(define_insn \"*vec_widen_smult_even_v16si\"\n+  [(set (match_operand:V8DI 0 \"register_operand\" \"=v\")\n+        (mult:V8DI\n+          (sign_extend:V8DI\n+            (vec_select:V8SI\n+              (match_operand:V16SI 1 \"nonimmediate_operand\" \"%v\")\n+              (parallel [(const_int 0) (const_int 2)\n+                         (const_int 4) (const_int 6)\n+                         (const_int 8) (const_int 10)\n+                         (const_int 12) (const_int 14)])))\n+          (sign_extend:V8DI\n+            (vec_select:V8SI\n+              (match_operand:V16SI 2 \"nonimmediate_operand\" \"vm\")\n+              (parallel [(const_int 0) (const_int 2)\n+                         (const_int 4) (const_int 6)\n+                         (const_int 8) (const_int 10)\n+                         (const_int 12) (const_int 14)])))))]\n+  \"TARGET_AVX512F && ix86_binary_operator_ok (MULT, V16SImode, operands)\"\n+  \"vpmuldq\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"isa\" \"avx512f\")\n+   (set_attr \"type\" \"sseimul\")\n+   (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"XI\")])\n+\n (define_expand \"vec_widen_smult_even_v8si\"\n   [(set (match_operand:V4DI 0 \"register_operand\")\n \t(mult:V4DI\n@@ -7108,7 +7885,9 @@\n   [V16QI V8HI V4SI V2DI V4SF V2DF\n    (V32QI \"TARGET_AVX2\") (V16HI \"TARGET_AVX2\")\n    (V8SI \"TARGET_AVX2\") (V4DI \"TARGET_AVX2\")\n-   (V8SF \"TARGET_AVX2\") (V4DF \"TARGET_AVX2\")])\n+   (V8SF \"TARGET_AVX2\") (V4DF \"TARGET_AVX2\")\n+   (V16SF \"TARGET_AVX512F\") (V8DF \"TARGET_AVX512F\")\n+   (V16SI \"TARGET_AVX512F\") (V8DI \"TARGET_AVX512F\")])\n \n (define_expand \"vec_perm<mode>\"\n   [(match_operand:VEC_PERM_AVX2 0 \"register_operand\")\n@@ -7127,7 +7906,9 @@\n    (V16QI \"TARGET_SSE2\") (V8HI \"TARGET_SSE2\")\n    (V8SF \"TARGET_AVX\") (V4DF \"TARGET_AVX\")\n    (V8SI \"TARGET_AVX\") (V4DI \"TARGET_AVX\")\n-   (V32QI \"TARGET_AVX2\") (V16HI \"TARGET_AVX2\")])\n+   (V32QI \"TARGET_AVX2\") (V16HI \"TARGET_AVX2\")\n+   (V16SI \"TARGET_AVX512F\") (V8DI \"TARGET_AVX512F\")\n+   (V16SF \"TARGET_AVX512F\") (V8DF \"TARGET_AVX512F\")])\n \n (define_expand \"vec_perm_const<mode>\"\n   [(match_operand:VEC_PERM_CONST 0 \"register_operand\")\n@@ -7632,6 +8413,27 @@\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"OI\")])\n \n+(define_insn \"avx512f_interleave_highv16si\"\n+  [(set (match_operand:V16SI 0 \"register_operand\" \"=v\")\n+\t(vec_select:V16SI\n+\t  (vec_concat:V32SI\n+\t    (match_operand:V16SI 1 \"register_operand\" \"v\")\n+\t    (match_operand:V16SI 2 \"nonimmediate_operand\" \"vm\"))\n+\t  (parallel [(const_int 2) (const_int 18)\n+\t\t     (const_int 3) (const_int 19)\n+\t\t     (const_int 6) (const_int 22)\n+\t\t     (const_int 7) (const_int 23)\n+\t\t     (const_int 10) (const_int 26)\n+\t\t     (const_int 11) (const_int 27)\n+\t\t     (const_int 14) (const_int 30)\n+\t\t     (const_int 15) (const_int 31)])))]\n+  \"TARGET_AVX512F\"\n+  \"vpunpckhdq\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"type\" \"sselog\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"XI\")])\n+\n+\n (define_insn \"vec_interleave_highv4si\"\n   [(set (match_operand:V4SI 0 \"register_operand\" \"=x,x\")\n \t(vec_select:V4SI\n@@ -7666,6 +8468,26 @@\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"OI\")])\n \n+(define_insn \"avx512f_interleave_lowv16si\"\n+  [(set (match_operand:V16SI 0 \"register_operand\" \"=v\")\n+\t(vec_select:V16SI\n+\t  (vec_concat:V32SI\n+\t    (match_operand:V16SI 1 \"register_operand\" \"v\")\n+\t    (match_operand:V16SI 2 \"nonimmediate_operand\" \"vm\"))\n+\t  (parallel [(const_int 0) (const_int 16)\n+\t\t     (const_int 1) (const_int 17)\n+\t\t     (const_int 4) (const_int 20)\n+\t\t     (const_int 5) (const_int 21)\n+\t\t     (const_int 8) (const_int 24)\n+\t\t     (const_int 9) (const_int 25)\n+\t\t     (const_int 12) (const_int 28)\n+\t\t     (const_int 13) (const_int 29)])))]\n+  \"TARGET_AVX512F\"\n+  \"vpunpckldq\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"type\" \"sselog\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"XI\")])\n+\n (define_insn \"vec_interleave_lowv4si\"\n   [(set (match_operand:V4SI 0 \"register_operand\" \"=x,x\")\n \t(vec_select:V4SI\n@@ -9766,6 +10588,16 @@\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"TI\")])\n \n+(define_insn \"avx512f_<code>v16qiv16si2\"\n+  [(set (match_operand:V16SI 0 \"register_operand\" \"=v\")\n+\t(any_extend:V16SI\n+\t  (match_operand:V16QI 1 \"nonimmediate_operand\" \"vm\")))]\n+  \"TARGET_AVX512F\"\n+  \"vpmov<extsuffix>bd\\t{%1, %0|%0, %q1}\"\n+  [(set_attr \"type\" \"ssemov\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"XI\")])\n+\n (define_insn \"avx2_<code>v8qiv8si2\"\n   [(set (match_operand:V8SI 0 \"register_operand\" \"=x\")\n \t(any_extend:V8SI\n@@ -9796,6 +10628,16 @@\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"TI\")])\n \n+(define_insn \"avx512f_<code>v16hiv16si2\"\n+  [(set (match_operand:V16SI 0 \"register_operand\" \"=v\")\n+\t(any_extend:V16SI\n+\t  (match_operand:V16HI 1 \"nonimmediate_operand\" \"vm\")))]\n+  \"TARGET_AVX512F\"\n+  \"vpmov<extsuffix>wd\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"ssemov\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"XI\")])\n+\n (define_insn \"avx2_<code>v8hiv8si2\"\n   [(set (match_operand:V8SI 0 \"register_operand\" \"=x\")\n \t(any_extend:V8SI\n@@ -9821,6 +10663,21 @@\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"TI\")])\n \n+(define_insn \"avx512f_<code>v8qiv8di2\"\n+  [(set (match_operand:V8DI 0 \"register_operand\" \"=v\")\n+\t(any_extend:V8DI\n+\t  (vec_select:V8QI\n+\t    (match_operand:V16QI 1 \"nonimmediate_operand\" \"vm\")\n+\t    (parallel [(const_int 0) (const_int 1)\n+\t\t       (const_int 2) (const_int 3)\n+\t\t       (const_int 4) (const_int 5)\n+\t\t       (const_int 6) (const_int 7)]))))]\n+  \"TARGET_AVX512F\"\n+  \"vpmov<extsuffix>bq\\t{%1, %0|%0, %k1}\"\n+  [(set_attr \"type\" \"ssemov\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"XI\")])\n+\n (define_insn \"avx2_<code>v4qiv4di2\"\n   [(set (match_operand:V4DI 0 \"register_operand\" \"=x\")\n \t(any_extend:V4DI\n@@ -9848,6 +10705,16 @@\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"TI\")])\n \n+(define_insn \"avx512f_<code>v8hiv8di2\"\n+  [(set (match_operand:V8DI 0 \"register_operand\" \"=v\")\n+\t(any_extend:V8DI\n+\t  (match_operand:V8HI 1 \"nonimmediate_operand\" \"vm\")))]\n+  \"TARGET_AVX512F\"\n+  \"vpmov<extsuffix>wq\\t{%1, %0|%0, %q1}\"\n+  [(set_attr \"type\" \"ssemov\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"XI\")])\n+\n (define_insn \"avx2_<code>v4hiv4di2\"\n   [(set (match_operand:V4DI 0 \"register_operand\" \"=x\")\n \t(any_extend:V4DI\n@@ -9875,6 +10742,16 @@\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"TI\")])\n \n+(define_insn \"avx512f_<code>v8siv8di2\"\n+  [(set (match_operand:V8DI 0 \"register_operand\" \"=v\")\n+\t(any_extend:V8DI\n+\t  (match_operand:V8SI 1 \"nonimmediate_operand\" \"vm\")))]\n+  \"TARGET_AVX512F\"\n+  \"vpmov<extsuffix>dq\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"ssemov\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"XI\")])\n+\n (define_insn \"avx2_<code>v4siv4di2\"\n   [(set (match_operand:V4DI 0 \"register_operand\" \"=x\")\n \t(any_extend:V4DI\n@@ -11911,6 +12788,28 @@\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n+(define_insn \"avx512cd_maskb_vec_dupv8di\"\n+  [(set (match_operand:V8DI 0 \"register_operand\" \"=v\")\n+\t(vec_duplicate:V8DI\n+\t  (zero_extend:DI\n+\t    (match_operand:QI 1 \"register_operand\" \"k\"))))]\n+  \"TARGET_AVX512CD\"\n+  \"vpbroadcastmb2q\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"mskmov\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"XI\")])\n+\n+(define_insn \"avx512cd_maskw_vec_dupv16si\"\n+  [(set (match_operand:V16SI 0 \"register_operand\" \"=v\")\n+\t(vec_duplicate:V16SI\n+\t  (zero_extend:SI\n+\t    (match_operand:HI 1 \"register_operand\" \"k\"))))]\n+  \"TARGET_AVX512CD\"\n+  \"vpbroadcastmw2d\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"mskmov\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"XI\")])\n+\n ;; Recognize broadcast as a vec_select as produced by builtin_vec_perm.\n ;; If it so happens that the input is in memory, use vbroadcast.\n ;; Otherwise use vpermilp (and in the case of 256-bit modes, vperm2f128).\n@@ -12578,6 +13477,16 @@\n    (set_attr \"btver2_decode\" \"double\")\n    (set_attr \"mode\" \"V8SF\")])\n \n+(define_insn \"avx512f_vcvtph2ps512\"\n+  [(set (match_operand:V16SF 0 \"register_operand\" \"=v\")\n+\t(unspec:V16SF [(match_operand:V16HI 1 \"nonimmediate_operand\" \"vm\")]\n+\t\t      UNSPEC_VCVTPH2PS))]\n+  \"TARGET_AVX512F\"\n+  \"vcvtph2ps\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"ssecvt\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"V16SF\")])\n+\n (define_expand \"vcvtps2ph\"\n   [(set (match_operand:V8HI 0 \"register_operand\")\n \t(vec_concat:V8HI\n@@ -12624,6 +13533,17 @@\n    (set_attr \"btver2_decode\" \"vector\")\n    (set_attr \"mode\" \"V8SF\")])\n \n+(define_insn \"avx512f_vcvtps2ph512\"\n+  [(set (match_operand:V16HI 0 \"nonimmediate_operand\" \"=vm\")\n+\t(unspec:V16HI [(match_operand:V16SF 1 \"register_operand\" \"v\")\n+\t\t      (match_operand:SI 2 \"const_0_to_255_operand\" \"N\")]\n+\t\t     UNSPEC_VCVTPS2PH))]\n+  \"TARGET_AVX512F\"\n+  \"vcvtps2ph\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"type\" \"ssecvt\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"V16SF\")])\n+\n ;; For gather* insn patterns\n (define_mode_iterator VEC_GATHER_MODE\n \t\t      [V2DI V2DF V4DI V4DF V4SI V4SF V8SI V8SF])"}]}