{"sha": "595278beb1772272cbd59fc022a11706d60338c9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTk1Mjc4YmViMTc3MjI3MmNiZDU5ZmMwMjJhMTE3MDZkNjAzMzhjOQ==", "commit": {"author": {"name": "Mikhail Maltsev", "email": "maltsevm@gmail.com", "date": "2015-11-04T14:32:42Z"}, "committer": {"name": "Mikhail Maltsev", "email": "miyuki@gcc.gnu.org", "date": "2015-11-04T14:32:42Z"}, "message": "ENABLE_CHECKING refactoring: C family front ends\n\ngcc/c-family/\n\n\t* c-omp.c (c_omp_split_clauses): Remove conditional compilation. Use\n\tflag_checking.\n\ngcc/cp/\n\n\t* call.c (validate_conversion_obstack): Define unconditionally.\n\t* constexpr.c (maybe_constant_value, fold_non_dependent_expr): Use\n\tgcc_checking_assert.\n\t* cp-tree.h: Use CHECKING_P instead of ENABLE_CHECKING.\n\t* decl2.c (cxx_post_compilation_parsing_cleanups): Use flag_checking.\n\t* mangle.c (add_substitution): Likewise.\n\t* method.c (maybe_explain_implicit_delete): Likewise.\n\t* parser.c (cp_parser_template_argument_list): Remove conditional\n\tcompilation.\n\t* pt.c (check_unstripped_args): Rename to...\n\t(verify_unstripped_args): ... this and remove conditional compilation.\n\t(retrieve_specialization): Guard call of verify_unstripped_args with\n\tflag_checking.\n\t(template_parm_to_arg): Remove conditional compilation.\n\t(template_parms_to_args, coerce_template_parameter_pack,\n\tcoerce_template_parms): Likewise.\n\t(tsubst_copy): Use flag_checking.\n\t(type_unification_real): Remove conditional compilation.\n\t(build_non_dependent_expr): Use flag_checking.\n\t* tree.c (build_target_expr): Remove conditional compilation, use\n\tgcc_checking_assert.\n\t* typeck.c (comptypes): Likewise.\n\t* typeck2.c (digest_init_r): Likewise.\n\nFrom-SVN: r229756", "tree": {"sha": "14a6eb201692f7e1d251cb78d7407f4f1ea97584", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/14a6eb201692f7e1d251cb78d7407f4f1ea97584"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/595278beb1772272cbd59fc022a11706d60338c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/595278beb1772272cbd59fc022a11706d60338c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/595278beb1772272cbd59fc022a11706d60338c9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/595278beb1772272cbd59fc022a11706d60338c9/comments", "author": {"login": "miyuki", "id": 4668268, "node_id": "MDQ6VXNlcjQ2NjgyNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/4668268?v=4", "gravatar_id": "", "url": "https://api.github.com/users/miyuki", "html_url": "https://github.com/miyuki", "followers_url": "https://api.github.com/users/miyuki/followers", "following_url": "https://api.github.com/users/miyuki/following{/other_user}", "gists_url": "https://api.github.com/users/miyuki/gists{/gist_id}", "starred_url": "https://api.github.com/users/miyuki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/miyuki/subscriptions", "organizations_url": "https://api.github.com/users/miyuki/orgs", "repos_url": "https://api.github.com/users/miyuki/repos", "events_url": "https://api.github.com/users/miyuki/events{/privacy}", "received_events_url": "https://api.github.com/users/miyuki/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7da5eaa09b6685d90da4271af9a1410aea231fb0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7da5eaa09b6685d90da4271af9a1410aea231fb0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7da5eaa09b6685d90da4271af9a1410aea231fb0"}], "stats": {"total": 183, "additions": 93, "deletions": 90}, "files": [{"sha": "97a2a84b37d295747a4ccb195d72fa5a1cc58321", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/595278beb1772272cbd59fc022a11706d60338c9/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/595278beb1772272cbd59fc022a11706d60338c9/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=595278beb1772272cbd59fc022a11706d60338c9", "patch": "@@ -1,3 +1,8 @@\n+2015-11-04  Mikhail Maltsev  <maltsevm@gmail.com>\n+\n+\t* c-omp.c (c_omp_split_clauses): Remove conditional compilation. Use\n+\tflag_checking.\n+\n 2015-11-03  Bernd Schmidt <bschmidt@redhat.com>\n \n \tPR c++-common/67882"}, {"sha": "ca64eda54263bbc432e4ea625a74f4a6d8ca3c8e", "filename": "gcc/c-family/c-omp.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/595278beb1772272cbd59fc022a11706d60338c9/gcc%2Fc-family%2Fc-omp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/595278beb1772272cbd59fc022a11706d60338c9/gcc%2Fc-family%2Fc-omp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-omp.c?ref=595278beb1772272cbd59fc022a11706d60338c9", "patch": "@@ -1135,7 +1135,10 @@ c_omp_split_clauses (location_t loc, enum tree_code code,\n       OMP_CLAUSE_CHAIN (clauses) = cclauses[s];\n       cclauses[s] = clauses;\n     }\n-#ifdef ENABLE_CHECKING\n+\n+  if (!flag_checking)\n+    return;\n+\n   if ((mask & (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_MAP)) == 0)\n     gcc_assert (cclauses[C_OMP_CLAUSE_SPLIT_TARGET] == NULL_TREE);\n   if ((mask & (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_NUM_TEAMS)) == 0)\n@@ -1150,7 +1153,6 @@ c_omp_split_clauses (location_t loc, enum tree_code code,\n     gcc_assert (cclauses[C_OMP_CLAUSE_SPLIT_FOR] == NULL_TREE);\n   if (code != OMP_SIMD)\n     gcc_assert (cclauses[C_OMP_CLAUSE_SPLIT_SIMD] == NULL_TREE);\n-#endif\n }\n \n "}, {"sha": "6243afac9671a8b282eba82b4e9dd9fac78f325c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/595278beb1772272cbd59fc022a11706d60338c9/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/595278beb1772272cbd59fc022a11706d60338c9/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=595278beb1772272cbd59fc022a11706d60338c9", "patch": "@@ -1,3 +1,29 @@\n+2015-11-04  Mikhail Maltsev  <maltsevm@gmail.com>\n+\n+\t* call.c (validate_conversion_obstack): Define unconditionally.\n+\t* constexpr.c (maybe_constant_value, fold_non_dependent_expr): Use\n+\tgcc_checking_assert.\n+\t* cp-tree.h: Use CHECKING_P instead of ENABLE_CHECKING.\n+\t* decl2.c (cxx_post_compilation_parsing_cleanups): Use flag_checking.\n+\t* mangle.c (add_substitution): Likewise.\n+\t* method.c (maybe_explain_implicit_delete): Likewise.\n+\t* parser.c (cp_parser_template_argument_list): Remove conditional\n+\tcompilation.\n+\t* pt.c (check_unstripped_args): Rename to...\n+\t(verify_unstripped_args): ... this and remove conditional compilation.\n+\t(retrieve_specialization): Guard call of verify_unstripped_args with\n+\tflag_checking.\n+\t(template_parm_to_arg): Remove conditional compilation.\n+\t(template_parms_to_args, coerce_template_parameter_pack,\n+\tcoerce_template_parms): Likewise.\n+\t(tsubst_copy): Use flag_checking.\n+\t(type_unification_real): Remove conditional compilation.\n+\t(build_non_dependent_expr): Use flag_checking.\n+\t* tree.c (build_target_expr): Remove conditional compilation, use\n+\tgcc_checking_assert.\n+\t* typeck.c (comptypes): Likewise.\n+\t* typeck2.c (digest_init_r): Likewise.\n+\n 2015-11-03  Jason Merrill  <jason@redhat.com>\n \n \t* pt.c (struct find_parameter_pack_data): Add"}, {"sha": "0b7d143c557684ccf91830fc4c35b53a59848dca", "filename": "gcc/cp/call.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/595278beb1772272cbd59fc022a11706d60338c9/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/595278beb1772272cbd59fc022a11706d60338c9/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=595278beb1772272cbd59fc022a11706d60338c9", "patch": "@@ -724,8 +724,6 @@ alloc_conversion (conversion_kind kind)\n   return c;\n }\n \n-#ifdef ENABLE_CHECKING\n-\n /* Make sure that all memory on the conversion obstack has been\n    freed.  */\n \n@@ -737,8 +735,6 @@ validate_conversion_obstack (void)\n \t\t == obstack_base (&conversion_obstack)));\n }\n \n-#endif /* ENABLE_CHECKING */\n-\n /* Dynamically allocate an array of N conversions.  */\n \n static conversion **"}, {"sha": "51fae5af294688357e7e5f642b05e02fee531f36", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/595278beb1772272cbd59fc022a11706d60338c9/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/595278beb1772272cbd59fc022a11706d60338c9/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=595278beb1772272cbd59fc022a11706d60338c9", "patch": "@@ -3856,13 +3856,11 @@ maybe_constant_value (tree t, tree decl)\n     }\n \n   r = cxx_eval_outermost_constant_expr (t, true, true, decl);\n-#ifdef ENABLE_CHECKING\n-  gcc_assert (r == t\n-\t      || CONVERT_EXPR_P (t)\n-\t      || TREE_CODE (t) == VIEW_CONVERT_EXPR\n-\t      || (TREE_CONSTANT (t) && !TREE_CONSTANT (r))\n-\t      || !cp_tree_equal (r, t));\n-#endif\n+  gcc_checking_assert (r == t\n+\t\t       || CONVERT_EXPR_P (t)\n+\t\t       || TREE_CODE (t) == VIEW_CONVERT_EXPR\n+\t\t       || (TREE_CONSTANT (t) && !TREE_CONSTANT (r))\n+\t\t       || !cp_tree_equal (r, t));\n   return r;\n }\n \n@@ -3906,14 +3904,12 @@ fold_non_dependent_expr (tree t)\n \t    }\n \n \t  tree r = cxx_eval_outermost_constant_expr (t, true, true, NULL_TREE);\n-#ifdef ENABLE_CHECKING\n \t  /* cp_tree_equal looks through NOPs, so allow them.  */\n-\t  gcc_assert (r == t\n-\t\t      || CONVERT_EXPR_P (t)\n-\t\t      || TREE_CODE (t) == VIEW_CONVERT_EXPR\n-\t\t      || (TREE_CONSTANT (t) && !TREE_CONSTANT (r))\n-\t\t      || !cp_tree_equal (r, t));\n-#endif\n+\t  gcc_checking_assert (r == t\n+\t\t\t       || CONVERT_EXPR_P (t)\n+\t\t\t       || TREE_CODE (t) == VIEW_CONVERT_EXPR\n+\t\t\t       || (TREE_CONSTANT (t) && !TREE_CONSTANT (r))\n+\t\t\t       || !cp_tree_equal (r, t));\n \t  return r;\n \t}\n       else if (TREE_OVERFLOW_P (t))"}, {"sha": "3c54e76a3abc38379fb9cb371bf6b04fe91ccc8b", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/595278beb1772272cbd59fc022a11706d60338c9/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/595278beb1772272cbd59fc022a11706d60338c9/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=595278beb1772272cbd59fc022a11706d60338c9", "patch": "@@ -3010,7 +3010,7 @@ extern void decl_shadowed_for_var_insert (tree, tree);\n    property.  */\n #define SET_NON_DEFAULT_TEMPLATE_ARGS_COUNT(NODE, INT_VALUE) \\\n   NON_DEFAULT_TEMPLATE_ARGS_COUNT(NODE) = build_int_cst (NULL_TREE, INT_VALUE)\n-#ifdef ENABLE_CHECKING\n+#if CHECKING_P\n #define GET_NON_DEFAULT_TEMPLATE_ARGS_COUNT(NODE) \\\n     int_cst_value (NON_DEFAULT_TEMPLATE_ARGS_COUNT (NODE))\n #else\n@@ -5517,9 +5517,7 @@ extern tree build_cxx_call\t\t\t(tree, int, tree *,\n \t\t\t\t\t\t tsubst_flags_t);\n extern bool is_std_init_list\t\t\t(tree);\n extern bool is_list_ctor\t\t\t(tree);\n-#ifdef ENABLE_CHECKING\n extern void validate_conversion_obstack\t\t(void);\n-#endif /* ENABLE_CHECKING */\n extern void mark_versions_used\t\t\t(tree);\n extern tree get_function_version_dispatcher\t(tree);\n "}, {"sha": "23f59eb5e68f043c3f4c33beba022a25cdb6aad0", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/595278beb1772272cbd59fc022a11706d60338c9/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/595278beb1772272cbd59fc022a11706d60338c9/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=595278beb1772272cbd59fc022a11706d60338c9", "patch": "@@ -4923,9 +4923,8 @@ cxx_post_compilation_parsing_cleanups (void)\n \n   input_location = locus_at_end_of_parsing;\n \n-#ifdef ENABLE_CHECKING\n-  validate_conversion_obstack ();\n-#endif /* ENABLE_CHECKING */\n+  if (flag_checking)\n+    validate_conversion_obstack ();\n \n   timevar_stop (TV_PHASE_LATE_PARSING_CLEANUPS);\n }"}, {"sha": "182e6055b636615a781ad8b72241e424aa34df48", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/595278beb1772272cbd59fc022a11706d60338c9/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/595278beb1772272cbd59fc022a11706d60338c9/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=595278beb1772272cbd59fc022a11706d60338c9", "patch": "@@ -396,20 +396,19 @@ add_substitution (tree node)\n \t     get_tree_code_name (TREE_CODE (node)), (void *) node);\n   node = c;\n \n-#if ENABLE_CHECKING\n   /* Make sure NODE isn't already a candidate.  */\n-  {\n-    int i;\n-    tree candidate;\n+  if (flag_checking)\n+    {\n+      int i;\n+      tree candidate;\n \n-    FOR_EACH_VEC_SAFE_ELT (G.substitutions, i, candidate)\n-      {\n-\tgcc_assert (!(DECL_P (node) && node == candidate));\n-\tgcc_assert (!(TYPE_P (node) && TYPE_P (candidate)\n+      FOR_EACH_VEC_SAFE_ELT (G.substitutions, i, candidate)\n+\t{\n+\t  gcc_assert (!(DECL_P (node) && node == candidate));\n+\t  gcc_assert (!(TYPE_P (node) && TYPE_P (candidate)\n \t\t      && same_type_p (node, candidate)));\n-      }\n-  }\n-#endif /* ENABLE_CHECKING */\n+\t}\n+    }\n \n   /* Put the decl onto the varray of substitution candidates.  */\n   vec_safe_push (G.substitutions, node);"}, {"sha": "97643b7f4f01e2645fc5447ff7ed116cd36f4731", "filename": "gcc/cp/method.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/595278beb1772272cbd59fc022a11706d60338c9/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/595278beb1772272cbd59fc022a11706d60338c9/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=595278beb1772272cbd59fc022a11706d60338c9", "patch": "@@ -1645,10 +1645,8 @@ maybe_explain_implicit_delete (tree decl)\n \t\t    \"deleted because its exception-specification does not \"\n \t\t    \"match the implicit exception-specification %qX\",\n \t\t    decl, raises);\n-#ifdef ENABLE_CHECKING\n-\t  else\n+\t  else if (flag_checking)\n \t    gcc_unreachable ();\n-#endif\n \n \t  pop_scope (scope);\n \t}"}, {"sha": "12452e689ff58f9eb0757f8ab8854d437ed92656", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/595278beb1772272cbd59fc022a11706d60338c9/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/595278beb1772272cbd59fc022a11706d60338c9/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=595278beb1772272cbd59fc022a11706d60338c9", "patch": "@@ -14838,9 +14838,8 @@ cp_parser_template_argument_list (cp_parser* parser)\n   parser->non_integral_constant_expression_p = saved_non_ice_p;\n   parser->integral_constant_expression_p = saved_ice_p;\n   parser->in_template_argument_list_p = saved_in_template_argument_list_p;\n-#ifdef ENABLE_CHECKING\n-  SET_NON_DEFAULT_TEMPLATE_ARGS_COUNT (vec, TREE_VEC_LENGTH (vec));\n-#endif\n+  if (CHECKING_P)\n+    SET_NON_DEFAULT_TEMPLATE_ARGS_COUNT (vec, TREE_VEC_LENGTH (vec));\n   return vec;\n }\n "}, {"sha": "e3f55a7a9d88013fea780a0753523d77d0cd6222", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 21, "deletions": 30, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/595278beb1772272cbd59fc022a11706d60338c9/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/595278beb1772272cbd59fc022a11706d60338c9/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=595278beb1772272cbd59fc022a11706d60338c9", "patch": "@@ -1134,9 +1134,8 @@ optimize_specialization_lookup_p (tree tmpl)\n    gone through coerce_template_parms by now.  */\n \n static void\n-check_unstripped_args (tree args ATTRIBUTE_UNUSED)\n+verify_unstripped_args (tree args)\n {\n-#ifdef ENABLE_CHECKING\n   ++processing_template_decl;\n   if (!any_dependent_template_arguments_p (args))\n     {\n@@ -1156,7 +1155,6 @@ check_unstripped_args (tree args ATTRIBUTE_UNUSED)\n \t}\n     }\n   --processing_template_decl;\n-#endif\n }\n \n /* Retrieve the specialization (in the sense of [temp.spec] - a\n@@ -1192,7 +1190,8 @@ retrieve_specialization (tree tmpl, tree args, hashval_t hash)\n \t\t  ? TMPL_PARMS_DEPTH (DECL_TEMPLATE_PARMS (tmpl))\n \t\t  : template_class_depth (DECL_CONTEXT (tmpl))));\n \n-  check_unstripped_args (args);\n+  if (flag_checking)\n+    verify_unstripped_args (args);\n \n   if (optimize_specialization_lookup_p (tmpl))\n     {\n@@ -4213,10 +4212,9 @@ template_parm_to_arg (tree t)\n \t  /* Turn this argument into a TYPE_ARGUMENT_PACK\n \t     with a single element, which expands T.  */\n \t  tree vec = make_tree_vec (1);\n-#ifdef ENABLE_CHECKING\n-\t  SET_NON_DEFAULT_TEMPLATE_ARGS_COUNT\n-\t    (vec, TREE_VEC_LENGTH (vec));\n-#endif\n+\t  if (CHECKING_P)\n+\t    SET_NON_DEFAULT_TEMPLATE_ARGS_COUNT (vec, TREE_VEC_LENGTH (vec));\n+\n \t  TREE_VEC_ELT (vec, 0) = make_pack_expansion (t);\n \n \t  t = cxx_make_type (TYPE_ARGUMENT_PACK);\n@@ -4233,10 +4231,9 @@ template_parm_to_arg (tree t)\n \t     with a single element, which expands T.  */\n \t  tree vec = make_tree_vec (1);\n \t  tree type = TREE_TYPE (TEMPLATE_PARM_DECL (t));\n-#ifdef ENABLE_CHECKING\n-\t  SET_NON_DEFAULT_TEMPLATE_ARGS_COUNT\n-\t    (vec, TREE_VEC_LENGTH (vec));\n-#endif\n+\t  if (CHECKING_P)\n+\t    SET_NON_DEFAULT_TEMPLATE_ARGS_COUNT (vec, TREE_VEC_LENGTH (vec));\n+\n \t  t = convert_from_reference (t);\n \t  TREE_VEC_ELT (vec, 0) = make_pack_expansion (t);\n \n@@ -4277,9 +4274,8 @@ template_parms_to_args (tree parms)\n       for (i = TREE_VEC_LENGTH (a) - 1; i >= 0; --i)\n \tTREE_VEC_ELT (a, i) = template_parm_to_arg (TREE_VEC_ELT (a, i));\n \n-#ifdef ENABLE_CHECKING\n-      SET_NON_DEFAULT_TEMPLATE_ARGS_COUNT (a, TREE_VEC_LENGTH (a));\n-#endif\n+      if (CHECKING_P)\n+\tSET_NON_DEFAULT_TEMPLATE_ARGS_COUNT (a, TREE_VEC_LENGTH (a));\n \n       if (length > 1)\n \tTREE_VEC_ELT (args, --l) = a;\n@@ -7398,10 +7394,9 @@ coerce_template_parameter_pack (tree parms,\n     }\n \n   SET_ARGUMENT_PACK_ARGS (argument_pack, packed_args);\n-#ifdef ENABLE_CHECKING\n-  SET_NON_DEFAULT_TEMPLATE_ARGS_COUNT (packed_args,\n-\t\t\t\t       TREE_VEC_LENGTH (packed_args));\n-#endif\n+  if (CHECKING_P)\n+    SET_NON_DEFAULT_TEMPLATE_ARGS_COUNT (packed_args,\n+\t\t\t\t\t TREE_VEC_LENGTH (packed_args));\n   return argument_pack;\n }\n \n@@ -7708,11 +7703,9 @@ coerce_template_parms (tree parms,\n   if (lost)\n     return error_mark_node;\n \n-#ifdef ENABLE_CHECKING\n-  if (!NON_DEFAULT_TEMPLATE_ARGS_COUNT (new_inner_args))\n+  if (CHECKING_P && !NON_DEFAULT_TEMPLATE_ARGS_COUNT (new_inner_args))\n     SET_NON_DEFAULT_TEMPLATE_ARGS_COUNT (new_inner_args,\n \t\t\t\t\t TREE_VEC_LENGTH (new_inner_args));\n-#endif\n \n   return new_inner_args;\n }\n@@ -14292,8 +14285,9 @@ tsubst_copy (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n       return tsubst_binary_right_fold (t, args, complain, in_decl);\n \n     default:\n-      /* We shouldn't get here, but keep going if !ENABLE_CHECKING.  */\n-      gcc_checking_assert (false);\n+      /* We shouldn't get here, but keep going if !flag_checking.  */\n+      if (flag_checking)\n+\tgcc_unreachable ();\n       return t;\n     }\n }\n@@ -18201,10 +18195,9 @@ type_unification_real (tree tparms,\n       if (saw_undeduced++ == 1)\n \tgoto again;\n     }\n-#ifdef ENABLE_CHECKING\n-  if (!NON_DEFAULT_TEMPLATE_ARGS_COUNT (targs))\n+\n+  if (CHECKING_P && !NON_DEFAULT_TEMPLATE_ARGS_COUNT (targs))\n     SET_NON_DEFAULT_TEMPLATE_ARGS_COUNT (targs, TREE_VEC_LENGTH (targs));\n-#endif\n \n   return unify_success (explain_p);\n }\n@@ -23252,12 +23245,10 @@ build_non_dependent_expr (tree expr)\n {\n   tree inner_expr;\n \n-#ifdef ENABLE_CHECKING\n   /* Try to get a constant value for all non-dependent expressions in\n       order to expose bugs in *_dependent_expression_p and constexpr.  */\n-  if (cxx_dialect >= cxx11)\n+  if (flag_checking && cxx_dialect >= cxx11)\n     fold_non_dependent_expr (expr);\n-#endif\n \n   /* Preserve OVERLOADs; the functions must be available to resolve\n      types.  */"}, {"sha": "4311212770f78121e19e824cb7b3bc1e1da1c2fe", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/595278beb1772272cbd59fc022a11706d60338c9/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/595278beb1772272cbd59fc022a11706d60338c9/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=595278beb1772272cbd59fc022a11706d60338c9", "patch": "@@ -321,15 +321,13 @@ build_target_expr (tree decl, tree value, tsubst_flags_t complain)\n   tree t;\n   tree type = TREE_TYPE (decl);\n \n-#ifdef ENABLE_CHECKING\n-  gcc_assert (VOID_TYPE_P (TREE_TYPE (value))\n-\t      || TREE_TYPE (decl) == TREE_TYPE (value)\n-\t      /* On ARM ctors return 'this'.  */\n-\t      || (TYPE_PTR_P (TREE_TYPE (value))\n-\t\t  && TREE_CODE (value) == CALL_EXPR)\n-\t      || useless_type_conversion_p (TREE_TYPE (decl),\n-\t\t\t\t\t    TREE_TYPE (value)));\n-#endif\n+  gcc_checking_assert (VOID_TYPE_P (TREE_TYPE (value))\n+\t\t       || TREE_TYPE (decl) == TREE_TYPE (value)\n+\t\t       /* On ARM ctors return 'this'.  */\n+\t\t       || (TYPE_PTR_P (TREE_TYPE (value))\n+\t\t\t   && TREE_CODE (value) == CALL_EXPR)\n+\t\t       || useless_type_conversion_p (TREE_TYPE (decl),\n+\t\t\t\t\t\t     TREE_TYPE (value)));\n \n   t = cxx_maybe_build_cleanup (decl, complain);\n   if (t == error_mark_node)"}, {"sha": "0501e4ded95310928da79b5aced1e48f9d4698f0", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/595278beb1772272cbd59fc022a11706d60338c9/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/595278beb1772272cbd59fc022a11706d60338c9/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=595278beb1772272cbd59fc022a11706d60338c9", "patch": "@@ -1418,8 +1418,7 @@ comptypes (tree t1, tree t2, int strict)\n \t   perform a deep check. */\n \treturn structural_comptypes (t1, t2, strict);\n \n-#ifdef ENABLE_CHECKING\n-      if (USE_CANONICAL_TYPES)\n+      if (flag_checking && USE_CANONICAL_TYPES)\n \t{\n \t  bool result = structural_comptypes (t1, t2, strict);\n \t  \n@@ -1440,10 +1439,8 @@ comptypes (tree t1, tree t2, int strict)\n \t  \n \t  return result;\n \t}\n-#else\n-      if (USE_CANONICAL_TYPES)\n+      if (!flag_checking && USE_CANONICAL_TYPES)\n \treturn TYPE_CANONICAL (t1) == TYPE_CANONICAL (t2);\n-#endif\n       else\n \treturn structural_comptypes (t1, t2, strict);\n     }"}, {"sha": "000f5e3df42d41f71ed972352188109ec489fd1b", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/595278beb1772272cbd59fc022a11706d60338c9/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/595278beb1772272cbd59fc022a11706d60338c9/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=595278beb1772272cbd59fc022a11706d60338c9", "patch": "@@ -1075,11 +1075,11 @@ digest_init_r (tree type, tree init, bool nested, int flags,\n \t      || TREE_CODE (type) == UNION_TYPE\n \t      || TREE_CODE (type) == COMPLEX_TYPE);\n \n-#ifdef ENABLE_CHECKING\n   /* \"If T is a class type and the initializer list has a single\n      element of type cv U, where U is T or a class derived from T,\n      the object is initialized from that element.\"  */\n-  if (cxx_dialect >= cxx11\n+  if (flag_checking\n+      && cxx_dialect >= cxx11\n       && BRACE_ENCLOSED_INITIALIZER_P (init)\n       && CONSTRUCTOR_NELTS (init) == 1\n       && ((CLASS_TYPE_P (type) && !CLASSTYPE_NON_AGGREGATE (type))\n@@ -1090,7 +1090,6 @@ digest_init_r (tree type, tree init, bool nested, int flags,\n \t/* We should have fixed this in reshape_init.  */\n \tgcc_unreachable ();\n     }\n-#endif\n \n   if (BRACE_ENCLOSED_INITIALIZER_P (init)\n       && !TYPE_NON_AGGREGATE_CLASS (type))"}]}