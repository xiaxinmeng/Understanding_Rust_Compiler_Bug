{"sha": "dce586ff83e5bf86956cb24e646c7b9a21283ce4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGNlNTg2ZmY4M2U1YmY4Njk1NmNiMjRlNjQ2YzdiOWEyMTI4M2NlNA==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-03-15T14:31:45Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-03-15T14:31:45Z"}, "message": "libstdc++: Implement missing operator overloads in max_size_type.h\n\nThis implements operator++, operator-- and operator<=> for the\ninteger-class types defined in max_size_type.h, which I overlooked\nwhen originally implementing the class.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/max_size_type.h (__max_size_type::operator _Tp):\n\tFix formatting.\n\t(__max_size_type::operator++): Define.\n\t(__max_size_type::operator--): Likewise.\n\t(__max_size_type::operator<=>): Conditionally define (in place\n\tof the other comparison operators).\n\t(__max_diff_type::operator _Tp): Fix formatting.\n\t(__max_diff_type::operator++): Define.\n\t(__max_diff_type::operator--): Likewise.\n\t(__max_diff_type::operator<=>): Conditionally define (in place\n\tof the other comparison operators).\n\t* testsuite/std/ranges/iota/max_size_type.cc (test01): Test\n\tthese operator overloads.", "tree": {"sha": "bda38ab3ea0d336f441ad1c8d4ce229571bad175", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bda38ab3ea0d336f441ad1c8d4ce229571bad175"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dce586ff83e5bf86956cb24e646c7b9a21283ce4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dce586ff83e5bf86956cb24e646c7b9a21283ce4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dce586ff83e5bf86956cb24e646c7b9a21283ce4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dce586ff83e5bf86956cb24e646c7b9a21283ce4/comments", "author": null, "committer": null, "parents": [{"sha": "33f36b34ac20d410d07ff4d144fc8165efcc11ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33f36b34ac20d410d07ff4d144fc8165efcc11ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33f36b34ac20d410d07ff4d144fc8165efcc11ef"}], "stats": {"total": 114, "additions": 112, "deletions": 2}, "files": [{"sha": "27d63797c497e83a7e535b2fb0389165dd32225c", "filename": "libstdc++-v3/include/bits/max_size_type.h", "status": "modified", "additions": 76, "deletions": 2, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dce586ff83e5bf86956cb24e646c7b9a21283ce4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmax_size_type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dce586ff83e5bf86956cb24e646c7b9a21283ce4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmax_size_type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmax_size_type.h?ref=dce586ff83e5bf86956cb24e646c7b9a21283ce4", "patch": "@@ -71,7 +71,8 @@ namespace ranges\n       __max_size_type(const __max_diff_type& __d) noexcept;\n \n       template<typename _Tp> requires integral<_Tp> || __is_int128<_Tp>\n-\tconstexpr explicit operator _Tp() const noexcept\n+\tconstexpr explicit\n+\toperator _Tp() const noexcept\n \t{ return _M_val; }\n \n       constexpr explicit\n@@ -90,6 +91,30 @@ namespace ranges\n       operator-() const noexcept\n       { return operator~() + 1; }\n \n+      constexpr __max_size_type&\n+      operator++() noexcept\n+      { return *this += 1; }\n+\n+      constexpr __max_size_type\n+      operator++(int) noexcept\n+      {\n+\tauto __tmp = *this;\n+\t++*this;\n+\treturn __tmp;\n+      }\n+\n+      constexpr __max_size_type&\n+      operator--() noexcept\n+      { return *this -= 1; }\n+\n+      constexpr __max_size_type\n+      operator--(int) noexcept\n+      {\n+\tauto __tmp = *this;\n+\t--*this;\n+\treturn __tmp;\n+      }\n+\n       constexpr __max_size_type&\n       operator+=(const __max_size_type& __r) noexcept\n       {\n@@ -355,6 +380,16 @@ namespace ranges\n       operator==(const __max_size_type& __l, const __max_size_type& __r) noexcept\n       { return __l._M_val == __r._M_val && __l._M_msb == __r._M_msb; }\n \n+#if __cpp_lib_three_way_comparison\n+      friend constexpr strong_ordering\n+      operator<=>(const __max_size_type& __l, const __max_size_type& __r) noexcept\n+      {\n+\tif (__l._M_msb ^ __r._M_msb)\n+\t  return __l._M_msb ? strong_ordering::greater : strong_ordering::less;\n+\telse\n+\t  return __l._M_val <=> __r._M_val;\n+      }\n+#else\n       friend constexpr bool\n       operator!=(const __max_size_type& __l, const __max_size_type& __r) noexcept\n       { return !(__l == __r); }\n@@ -379,6 +414,7 @@ namespace ranges\n       friend constexpr bool\n       operator>=(const __max_size_type& __l, const __max_size_type& __r) noexcept\n       { return __r <= __l; }\n+#endif\n \n #if __SIZEOF_INT128__\n       using __rep = unsigned __int128;\n@@ -417,7 +453,8 @@ namespace ranges\n       { }\n \n       template<typename _Tp> requires integral<_Tp> || __is_int128<_Tp>\n-\tconstexpr explicit operator _Tp() const noexcept\n+\tconstexpr explicit\n+\toperator _Tp() const noexcept\n \t{ return static_cast<_Tp>(_M_rep); }\n \n       constexpr explicit\n@@ -436,6 +473,30 @@ namespace ranges\n       operator~() const noexcept\n       { return __max_diff_type(~_M_rep); }\n \n+      constexpr __max_diff_type&\n+      operator++() noexcept\n+      { return *this += 1; }\n+\n+      constexpr __max_diff_type\n+      operator++(int) noexcept\n+      {\n+\tauto __tmp = *this;\n+\t++*this;\n+\treturn __tmp;\n+      }\n+\n+      constexpr __max_diff_type&\n+      operator--() noexcept\n+      { return *this -= 1; }\n+\n+      constexpr __max_diff_type\n+      operator--(int) noexcept\n+      {\n+\tauto __tmp = *this;\n+\t--*this;\n+\treturn __tmp;\n+      }\n+\n       constexpr __max_diff_type&\n       operator+=(const __max_diff_type& __r) noexcept\n       {\n@@ -647,6 +708,18 @@ namespace ranges\n       operator==(const __max_diff_type& __l, const __max_diff_type& __r) noexcept\n       { return __l._M_rep == __r._M_rep; }\n \n+#if __cpp_lib_three_way_comparison\n+      constexpr strong_ordering\n+      operator<=>(const __max_diff_type& __r) const noexcept\n+      {\n+\tconst auto __lsign = _M_rep._M_msb;\n+\tconst auto __rsign = __r._M_rep._M_msb;\n+\tif (__lsign ^ __rsign)\n+\t  return __lsign ? strong_ordering::less : strong_ordering::greater;\n+\telse\n+\t  return _M_rep <=> __r._M_rep;\n+      }\n+#else\n       friend constexpr bool\n       operator!=(const __max_diff_type& __l, const __max_diff_type& __r) noexcept\n       { return !(__l == __r); }\n@@ -673,6 +746,7 @@ namespace ranges\n       friend constexpr bool\n       operator>=(const __max_diff_type& __l, const __max_diff_type& __r) noexcept\n       { return !(__l < __r); }\n+#endif\n \n     private:\n       __max_size_type _M_rep = 0;"}, {"sha": "983bdfbdaa6ca900b0e8ab287cc65b71b39fc81a", "filename": "libstdc++-v3/testsuite/std/ranges/iota/max_size_type.cc", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dce586ff83e5bf86956cb24e646c7b9a21283ce4/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fiota%2Fmax_size_type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dce586ff83e5bf86956cb24e646c7b9a21283ce4/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fiota%2Fmax_size_type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fiota%2Fmax_size_type.cc?ref=dce586ff83e5bf86956cb24e646c7b9a21283ce4", "patch": "@@ -145,6 +145,42 @@ test01()\n   auto h = [] (auto a) { a <<= a; return a; };\n   static_assert(h(max_size_t(3)) == 24);\n   static_assert(h(max_diff_t(3)) == 24);\n+\n+  auto w = [] (auto a) {\n+    const auto b = a;\n+    VERIFY( a++ == b   && a == b+1 );\n+    VERIFY( a-- == b+1 && a == b );\n+\n+    VERIFY( ++(++a) == b+2 );\n+    VERIFY( --(--a) == b );\n+    return true;\n+  };\n+  static_assert(w(max_size_t(10)));\n+  static_assert(w(-max_diff_t(10)));\n+\n+#if __cpp_lib_three_way_comparison\n+  static_assert(max_size_t{1} <=> max_size_t{9} == std::strong_ordering::less);\n+  static_assert(max_size_t{3} <=> max_size_t{2} == std::strong_ordering::greater);\n+  static_assert(max_size_t{5} <=> max_size_t{5} == std::strong_ordering::equal);\n+  static_assert(~max_size_t{1} <=> ~max_size_t{9} == std::strong_ordering::greater);\n+  static_assert(~max_size_t{3} <=> ~max_size_t{2} == std::strong_ordering::less);\n+  static_assert(~max_size_t{5} <=> ~max_size_t{5} == std::strong_ordering::equal);\n+  static_assert(~max_size_t{5} <=> max_size_t{9} == std::strong_ordering::greater);\n+  static_assert(~max_size_t{9} <=> max_size_t{5} == std::strong_ordering::greater);\n+  static_assert(max_size_t{5} <=> ~max_size_t{9} == std::strong_ordering::less);\n+  static_assert(max_size_t{9} <=> ~max_size_t{5} == std::strong_ordering::less);\n+\n+  static_assert(max_diff_t{1} <=> max_diff_t{9} == std::strong_ordering::less);\n+  static_assert(max_diff_t{3} <=> max_diff_t{2} == std::strong_ordering::greater);\n+  static_assert(max_diff_t{5} <=> max_diff_t{5} == std::strong_ordering::equal);\n+  static_assert(max_diff_t{-1} <=> max_diff_t{-9} == std::strong_ordering::greater);\n+  static_assert(max_diff_t{-3} <=> max_diff_t{-2} == std::strong_ordering::less);\n+  static_assert(max_diff_t{-5} <=> max_diff_t{-5} == std::strong_ordering::equal);\n+  static_assert(max_diff_t{-5} <=> max_diff_t{9} == std::strong_ordering::less);\n+  static_assert(max_diff_t{-9} <=> max_diff_t{5} == std::strong_ordering::less);\n+  static_assert(max_diff_t{5} <=> max_diff_t{-9} == std::strong_ordering::greater);\n+  static_assert(max_diff_t{9} <=> max_diff_t{-5} == std::strong_ordering::greater);\n+#endif\n }\n \n template<bool signed_p, bool shorten_p>"}]}