{"sha": "138d4703b2ccacb339bea8c3085cf6818d9ce504", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTM4ZDQ3MDNiMmNjYWNiMzM5YmVhOGMzMDg1Y2Y2ODE4ZDljZTUwNA==", "commit": {"author": {"name": "Janis Johnson", "email": "janis187@us.ibm.com", "date": "2003-04-07T21:37:59Z"}, "committer": {"name": "Janis Johnson", "email": "janis@gcc.gnu.org", "date": "2003-04-07T21:37:59Z"}, "message": "sourcebuild.texi (Test Suites): Document testing support for gcov and profile-directed optimizations...\n\n2003-04-07  Janis Johnson  <janis187@us.ibm.com>\n\n\t* doc/sourcebuild.texi (Test Suites): Document testing support for\n\tgcov and profile-directed optimizations; describe gcc.misc-tests.\n\nFrom-SVN: r65347", "tree": {"sha": "21a51bb24c4c8c8ecdcefad08f0a420e2e76b579", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/21a51bb24c4c8c8ecdcefad08f0a420e2e76b579"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/138d4703b2ccacb339bea8c3085cf6818d9ce504", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/138d4703b2ccacb339bea8c3085cf6818d9ce504", "html_url": "https://github.com/Rust-GCC/gccrs/commit/138d4703b2ccacb339bea8c3085cf6818d9ce504", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/138d4703b2ccacb339bea8c3085cf6818d9ce504/comments", "author": null, "committer": null, "parents": [{"sha": "1d5b4e0b115a05febfe03ec880487e40aec0e9a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d5b4e0b115a05febfe03ec880487e40aec0e9a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d5b4e0b115a05febfe03ec880487e40aec0e9a5"}], "stats": {"total": 139, "additions": 134, "deletions": 5}, "files": [{"sha": "841d6ad4b71aac6804fc705c5272fa63be6d9cf6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/138d4703b2ccacb339bea8c3085cf6818d9ce504/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/138d4703b2ccacb339bea8c3085cf6818d9ce504/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=138d4703b2ccacb339bea8c3085cf6818d9ce504", "patch": "@@ -1,3 +1,8 @@\n+2003-04-07  Janis Johnson  <janis187@us.ibm.com>\n+\n+\t* doc/sourcebuild.texi (Test Suites): Document testing support for\n+\tgcov and profile-directed optimizations; describe gcc.misc-tests.\n+\n Mon Apr  7 22:19:59 CEST 2003  Jan Hubicka  <jh@suse.cz>\n \n \tPR target/10077"}, {"sha": "65819ffad9fca463b9a416b518a29d247e00d874", "filename": "gcc/doc/sourcebuild.texi", "status": "modified", "additions": 129, "deletions": 5, "changes": 134, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/138d4703b2ccacb339bea8c3085cf6818d9ce504/gcc%2Fdoc%2Fsourcebuild.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/138d4703b2ccacb339bea8c3085cf6818d9ce504/gcc%2Fdoc%2Fsourcebuild.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fsourcebuild.texi?ref=138d4703b2ccacb339bea8c3085cf6818d9ce504", "patch": "@@ -754,9 +754,11 @@ suites.  Currently only the C language test suites are documented\n here; FIXME: document the others.\n \n @menu\n-* Test Idioms::  Idioms used in test suite code.\n-* C Tests::      The C language test suites.\n-* libgcj Tests:: The Java library test suites.\n+* Test Idioms::     Idioms used in test suite code.\n+* C Tests::         The C language test suites.\n+* libgcj Tests::    The Java library test suites.\n+* gcov Testing::    Support for testing gcov.\n+* profopt Testing:: Support for testing profile-directed optimizations.\n @end menu\n \n @node Test Idioms\n@@ -901,8 +903,28 @@ FIXME: describe this.\n \n This directory should probably not be used for new tests.\n @item gcc.c-torture/misc-tests\n-FIXME: describe this, when it should be used for new tests and when it\n-shouldn't.\n+This directory contains C tests that require special handling.  Some\n+of these tests have individual expect files, and others share\n+special-purpose expect files:\n+\n+@table @file\n+@item @code{bprob*.c}\n+Test @option{-fbranch-probabilities} using @file{bprob.exp}, which\n+in turn uses the generic, language-independent framework\n+(@pxref{profopt Testing, , Support for testing profile-directed\n+optimizations}).\n+\n+@item @code{dg-*.c}\n+Test the testsuite itself using @file{dg-test.exp}.\n+\n+@item @code{gcov*.c}\n+Test @command{gcov} output using @file{gcov.exp}, which in turn uses the\n+language-independent support (@pxref{gcov Testing, , Support for testing gcov}).\n+\n+@item @code{i386-pf-*.c}\n+Test i386-specific support for data prefetch using @file{i386-prefetch.exp}.\n+@end table\n+\n @end table\n \n FIXME: merge in @file{testsuite/README.gcc} and discuss the format of\n@@ -936,3 +958,105 @@ part of Java testing by placing the Jacks tree within the the libjava\n testsuite sources at @file{libjava/testsuite/libjava.jacks/jacks}.\n \n We encourage developers to contribute test cases to Mauve and Jacks.\n+\n+@node gcov Testing\n+@subsection Support for testing @command{gcov}\n+\n+Language-independent support for testing @command{gcov}, and for checking\n+that branch profiling produces expected values, is provided by the\n+expect file @file{gcov.exp}.  @command{gcov} tests also rely on procedures\n+in @file{gcc.dg.exp} to compile and run the test program.  A typical\n+@command{gcov} test contains the following DejaGNU commands within comments:\n+\n+@smallexample\n+@{ dg-options \"-fprofile-arcs -ftest-coverage\" @}\n+@{ dg-do run @{ target native @} @}\n+@{ dg-final @{ run-gcov sourcefile @} @}\n+@end smallexample\n+\n+Checks of @command{gcov} output can include line counts, branch percentages,\n+and call return percentages.  All of these checks are requested via\n+commands that appear in comments in the test's source file.\n+Commands to check line counts are processed by default.\n+Commands to check branch percentages and call return percentages are\n+processed if there is a file with the same basename as the source\n+file and a suffix @file{.x} that contains a line\n+@code{set gcov_verify_branches 1} or @code{set gcov_verify_calls 1},\n+respectively.\n+\n+A line count command appears within a comment on the source line\n+that is expected to get the specified count and has the form\n+@code{count(@var{cnt})}.  A test should only check line counts for\n+lines that will get the same count for any architecture.\n+\n+Commands to check branch percentages (@code{branch}) and call\n+return percentages (@code{returns}) are very similar to each other.\n+A beginning command appears on or before the first of a range of\n+lines that will report the percentage, and the ending command\n+follows that range of lines.  The beginning command can include a\n+list of percentages, all of which are expected to be found within\n+the range.  A range is terminated by the next command of the same\n+kind.  A command @code{branch(end)} or @code{returns(end)} marks\n+the end of a range without starting a new one.  For example:\n+\n+@smallexample\n+if (i > 10 && j > i && j < 20)  /* branch(27 50 75) */\n+                                /* branch(end) */\n+  foo (i, j);\n+@end smallexample\n+\n+For a call return percentage, the value specified is the\n+percentage of calls reported to return.  For a branch percentage,\n+the value is either the expected percentage or 100 minus that\n+value, since the direction of a branch can differ depending on the\n+target or the optimization level.\n+\n+Not all branches and calls need to be checked.  A test should not\n+check for branches that might be optimized away or replaced with\n+predicated instructions.  Don't check for calls inserted by the\n+compiler or ones that might be inlined or optimized away.\n+\n+A single test can check for combinations of line counts, branch\n+percentages, and call return percentages.  The command to check a\n+line count must appear on the line that will report that count, but\n+commands to check branch percentages and call return percentages can\n+bracket the lines that report them.\n+\n+@node profopt Testing\n+@subsection Support for testing profile-directed optimizations\n+\n+The file @file{profopt.exp} provides language-independent support for\n+checking correct execution of a test built with profile-directed\n+optimization.  This testing requires that a test program be built and\n+executed twice.  The first time it is compiled to generate profile\n+data, and the second time it is compiled to use the data that was\n+generated during the first execution.  The second execution is to\n+verify that the test produces the expected results.\n+\n+To check that the optimization actually generated better code, a\n+test can be built and run a third time with normal optimizations to\n+verify that the performance is better with the profile-directed\n+optimizations.  @file{profopt.exp} has the beginnings of this kind\n+of support.\n+\n+@file{profopt.exp} provides generic support for profile-directed\n+optimizations.  Each set of tests that uses it provides information\n+about a specific optimization:\n+\n+@table @code\n+@item tool\n+tool being tested, e.g., gcc\n+\n+@item profile_option\n+options used to generate profile data\n+\n+@item feedback_option\n+options used to optimize using that profile data\n+\n+@item prof_ext\n+suffix of profile data files\n+\n+@item PROFOPT_OPTIONS\n+list of options with which to run each test, similar to the lists for\n+torture tests\n+@end table"}]}