{"sha": "96f5b13771253b981866176b7539e26d58dd5e75", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTZmNWIxMzc3MTI1M2I5ODE4NjYxNzZiNzUzOWUyNmQ1OGRkNWU3NQ==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2011-01-07T20:35:05Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2011-01-07T20:35:05Z"}, "message": "Keep -m[arch|tune]=native in COLLECT_GCC_OPTIONS.\n\n2011-01-07  H.J. Lu  <hongjiu.lu@intel.com>\n\n\tPR driver/42445\n\t* gcc.c (%>S): New.\n\t(SWITCH_KEEP_FOR_GCC): Likewise.\n\t(set_collect_gcc_options): Check SWITCH_KEEP_FOR_GCC.\n\t(do_spec_1): Handle \"%>\".\n\n\t* config/i386/i386.h (CC1_CPU_SPEC): Replace \"%<\" with \"%>\".\n\nFrom-SVN: r168583", "tree": {"sha": "49315d4236678f94f5900e65d53d250f374c711b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/49315d4236678f94f5900e65d53d250f374c711b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/96f5b13771253b981866176b7539e26d58dd5e75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96f5b13771253b981866176b7539e26d58dd5e75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96f5b13771253b981866176b7539e26d58dd5e75", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96f5b13771253b981866176b7539e26d58dd5e75/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c21bbd7a5e90834d14fd097412ff5be6c71c7b3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c21bbd7a5e90834d14fd097412ff5be6c71c7b3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c21bbd7a5e90834d14fd097412ff5be6c71c7b3e"}], "stats": {"total": 39, "additions": 30, "deletions": 9}, "files": [{"sha": "6b8a742822a57e59a51570d779933f17e4d7bbba", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96f5b13771253b981866176b7539e26d58dd5e75/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96f5b13771253b981866176b7539e26d58dd5e75/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=96f5b13771253b981866176b7539e26d58dd5e75", "patch": "@@ -1,3 +1,13 @@\n+2011-01-07  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR driver/42445\n+\t* gcc.c (%>S): New.\n+\t(SWITCH_KEEP_FOR_GCC): Likewise.\n+\t(set_collect_gcc_options): Check SWITCH_KEEP_FOR_GCC.\n+\t(do_spec_1): Handle \"%>\".\n+\n+\t* config/i386/i386.h (CC1_CPU_SPEC): Replace \"%<\" with \"%>\".\n+\n 2011-01-07  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/47201"}, {"sha": "65f005b01d3fd1df17d79e1b448dd17c8797e2ee", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96f5b13771253b981866176b7539e26d58dd5e75/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96f5b13771253b981866176b7539e26d58dd5e75/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=96f5b13771253b981866176b7539e26d58dd5e75", "patch": "@@ -561,9 +561,9 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n #define CC1_CPU_SPEC CC1_CPU_SPEC_1\n #else\n #define CC1_CPU_SPEC CC1_CPU_SPEC_1 \\\n-\"%{march=native:%<march=native %:local_cpu_detect(arch) \\\n-  %{!mtune=*:%<mtune=native %:local_cpu_detect(tune)}} \\\n-%{mtune=native:%<mtune=native %:local_cpu_detect(tune)}\"\n+\"%{march=native:%>march=native %:local_cpu_detect(arch) \\\n+  %{!mtune=*:%>mtune=native %:local_cpu_detect(tune)}} \\\n+%{mtune=native:%>mtune=native %:local_cpu_detect(tune)}\"\n #endif\n #endif\n \f"}, {"sha": "2aebceffd57c6af9441bb3d84a9109d2641d1814", "filename": "gcc/gcc.c", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96f5b13771253b981866176b7539e26d58dd5e75/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96f5b13771253b981866176b7539e26d58dd5e75/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=96f5b13771253b981866176b7539e26d58dd5e75", "patch": "@@ -390,6 +390,7 @@ or with constant text in a single argument.\n         Note - this command is position dependent.  % commands in the\n         spec string before this one will see -S, % commands in the\n         spec string after this one will not.\n+ %>S\tSimilar to \"%<S\", but keep it in the GCC command line.\n  %<S*\tremove all occurrences of all switches beginning with -S from the\n         command line.\n  %:function(args)\n@@ -2743,10 +2744,11 @@ execute (void)\n    The `validated' field is nonzero if any spec has looked at this switch;\n    if it remains zero at the end of the run, it must be meaningless.  */\n \n-#define SWITCH_LIVE    \t\t\t0x1\n-#define SWITCH_FALSE   \t\t\t0x2\n-#define SWITCH_IGNORE\t\t\t0x4\n-#define SWITCH_IGNORE_PERMANENTLY\t0x8\n+#define SWITCH_LIVE    \t\t\t(1 << 0)\n+#define SWITCH_FALSE   \t\t\t(1 << 1)\n+#define SWITCH_IGNORE\t\t\t(1 << 2)\n+#define SWITCH_IGNORE_PERMANENTLY\t(1 << 3)\n+#define SWITCH_KEEP_FOR_GCC\t\t(1 << 4)\n \n struct switchstr\n {\n@@ -3926,7 +3928,9 @@ set_collect_gcc_options (void)\n       first_time = FALSE;\n \n       /* Ignore elided switches.  */\n-      if ((switches[i].live_cond & SWITCH_IGNORE) != 0)\n+      if ((switches[i].live_cond\n+\t   & (SWITCH_IGNORE | SWITCH_KEEP_FOR_GCC))\n+\t  == SWITCH_IGNORE)\n \tcontinue;\n \n       obstack_grow (&collect_obstack, \"'-\", 2);\n@@ -5091,10 +5095,17 @@ do_spec_1 (const char *spec, int inswitch, const char *soft_matched_part)\n \t   /* Henceforth ignore the option(s) matching the pattern\n \t      after the %<.  */\n \t  case '<':\n+\t  case '>':\n \t    {\n \t      unsigned len = 0;\n \t      int have_wildcard = 0;\n \t      int i;\n+\t      int switch_option;\n+\n+\t      if (c == '>')\n+\t\tswitch_option = SWITCH_IGNORE | SWITCH_KEEP_FOR_GCC;\n+\t      else\n+\t\tswitch_option = SWITCH_IGNORE;\n \n \t      while (p[len] && p[len] != ' ' && p[len] != '\\t')\n \t\tlen++;\n@@ -5106,7 +5117,7 @@ do_spec_1 (const char *spec, int inswitch, const char *soft_matched_part)\n \t\tif (!strncmp (switches[i].part1, p, len - have_wildcard)\n \t\t    && (have_wildcard || switches[i].part1[len] == '\\0'))\n \t\t  {\n-\t\t    switches[i].live_cond |= SWITCH_IGNORE;\n+\t\t    switches[i].live_cond |= switch_option;\n \t\t    switches[i].validated = 1;\n \t\t  }\n "}]}