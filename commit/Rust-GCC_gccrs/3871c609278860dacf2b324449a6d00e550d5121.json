{"sha": "3871c609278860dacf2b324449a6d00e550d5121", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzg3MWM2MDkyNzg4NjBkYWNmMmIzMjQ0NDlhNmQwMGU1NTBkNTEyMQ==", "commit": {"author": {"name": "Gavin Koch", "email": "gavin@cygnus.com", "date": "1998-02-12T08:37:06Z"}, "committer": {"name": "Gavin Romig-Koch", "email": "gavin@gcc.gnu.org", "date": "1998-02-12T08:37:06Z"}, "message": "mips.c (movdi_operand): Direct referances to symbols that arn't mips16 consts in mips16 mode arn't...\n\n\t* mips/mips.c (movdi_operand): Direct referances to symbols\n\tthat arn't mips16 consts in mips16 mode arn't valid operands.\n\t* mips/mips.c (mips_move_2words): Add gprel handling.\n\nFrom-SVN: r17867", "tree": {"sha": "28d04dcda5a79c52a12bb29f1ae2c2dfa0d43fa4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/28d04dcda5a79c52a12bb29f1ae2c2dfa0d43fa4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3871c609278860dacf2b324449a6d00e550d5121", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3871c609278860dacf2b324449a6d00e550d5121", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3871c609278860dacf2b324449a6d00e550d5121", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3871c609278860dacf2b324449a6d00e550d5121/comments", "author": null, "committer": null, "parents": [{"sha": "2e72fa6af1d3d3a808b2f0d3d951d35163c11d11", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e72fa6af1d3d3a808b2f0d3d951d35163c11d11", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e72fa6af1d3d3a808b2f0d3d951d35163c11d11"}], "stats": {"total": 55, "additions": 51, "deletions": 4}, "files": [{"sha": "e4a07cb2a67b42a0a2a84b0240c3903991ad1e34", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3871c609278860dacf2b324449a6d00e550d5121/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3871c609278860dacf2b324449a6d00e550d5121/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3871c609278860dacf2b324449a6d00e550d5121", "patch": "@@ -1,3 +1,10 @@\n+Thu Feb 12 11:34:55 1998  Gavin Koch  <gavin@cygnus.com>\n+\n+\t* mips/mips.c (movdi_operand): Direct referances to symbols\n+\tthat arn't mips16 consts in mips16 mode arn't valid operands.\n+\n+\t* mips/mips.c (mips_move_2words): Add gprel handling.\n+\n Thu Feb 12 11:18:37 1998  Gavin Koch  <gavin@cygnus.com>\n \n \t* mips.md (extendsidi2): Allow extension to/from a non-mips16 "}, {"sha": "b7774b3f9c5148dec30a6eab65031223229cbd87", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 44, "deletions": 4, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3871c609278860dacf2b324449a6d00e550d5121/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3871c609278860dacf2b324449a6d00e550d5121/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=3871c609278860dacf2b324449a6d00e550d5121", "patch": "@@ -985,7 +985,10 @@ movdi_operand (op, mode)\n \t  || immediate_operand (XEXP (op, 0), SImode)))\n     return 1;\n \n-  return general_operand (op, mode);\n+  return (general_operand (op, mode)\n+\t  && ! (TARGET_MIPS16\n+\t\t&& GET_CODE (op) == SYMBOL_REF\n+\t\t&& ! mips16_constant (op, mode, 1, 0)));\n }\n \n /* Like register_operand, but when in 64 bit mode also accept a sign\n@@ -2316,9 +2319,7 @@ mips_move_2words (operands, insn)\n \t    }\n \t}\n \n-      else if (code1 == LABEL_REF\n-\t       || code1 == SYMBOL_REF\n-\t       || code1 == CONST)\n+      else if (code1 == LABEL_REF)\n \t{\n \t  if (TARGET_STATS)\n \t    mips_count_memory_refs (op1, 2);\n@@ -2332,6 +2333,45 @@ mips_move_2words (operands, insn)\n \t  else\n \t    ret = \"dla\\t%0,%a1\";\n \t}\n+      else if (code1 == SYMBOL_REF\n+\t       || code1 == CONST)\n+\t{\n+\t  if (TARGET_MIPS16\n+\t      && code1 == CONST\n+\t      && GET_CODE (XEXP (op1, 0)) == REG\n+\t      && REGNO (XEXP (op1, 0)) == GP_REG_FIRST + 28)\n+\t    {\n+\t      /* This case arises on the mips16; see\n+                 mips16_gp_pseudo_reg.  */\n+\t      ret = \"move\\t%0,%+\";\n+\t    }\n+\t  else if (TARGET_MIPS16\n+\t\t   && code1 == SYMBOL_REF\n+\t\t   && SYMBOL_REF_FLAG (op1)\n+\t\t   && (XSTR (op1, 0)[0] != '*'\n+\t\t       || strncmp (XSTR (op1, 0) + 1,\n+\t\t\t\t   LOCAL_LABEL_PREFIX,\n+\t\t\t\t   sizeof LOCAL_LABEL_PREFIX - 1) != 0))\n+\t    {\n+\t      /* This can occur when reloading the address of a GP\n+                 relative symbol on the mips16.  */\n+\t      ret = \"move\\t%0,%+\\n\\taddu\\t%0,%%gprel(%a1)\";\n+\t    }\n+\t  else\n+\t    {\n+\t      if (TARGET_STATS)\n+\t\tmips_count_memory_refs (op1, 2);\n+\n+\t      if (GET_CODE (operands[1]) == SIGN_EXTEND)\n+\t\t/* We deliberately remove the 'a' from '%1', so that we don't\n+\t\t   have to add SIGN_EXTEND support to print_operand_address.\n+\t\t   print_operand will just call print_operand_address in this\n+\t\t   case, so there is no problem.  */\n+\t\tret = \"la\\t%0,%1\";\n+\t      else\n+\t\tret = \"dla\\t%0,%a1\";\n+\t    }\n+\t}\n     }\n \n   else if (code0 == MEM)"}]}