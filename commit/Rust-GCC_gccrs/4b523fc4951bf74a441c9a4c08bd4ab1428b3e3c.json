{"sha": "4b523fc4951bf74a441c9a4c08bd4ab1428b3e3c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGI1MjNmYzQ5NTFiZjc0YTQ0MWM5YTRjMDhiZDRhYjE0MjhiM2UzYw==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "1999-03-06T17:19:39Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1999-03-06T17:19:39Z"}, "message": "flow.c (make_edges): Handle casesi that jump to default branch.\n\n        * flow.c (make_edges): Handle casesi that jump to default branch.\n        If CASE_DROPS_THROUGH, force fallthru to block after casesi.\n\nCo-Authored-By: Richard Henderson <rth@cygnus.com>\n\nFrom-SVN: r25617", "tree": {"sha": "02cafb62ef987938d8bc0e26fbfd9114eb2b2648", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/02cafb62ef987938d8bc0e26fbfd9114eb2b2648"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4b523fc4951bf74a441c9a4c08bd4ab1428b3e3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b523fc4951bf74a441c9a4c08bd4ab1428b3e3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b523fc4951bf74a441c9a4c08bd4ab1428b3e3c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b523fc4951bf74a441c9a4c08bd4ab1428b3e3c/comments", "author": null, "committer": null, "parents": [{"sha": "8e1f2d4c56e3d43c878a6ffe5e5c4aa6409fa035", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e1f2d4c56e3d43c878a6ffe5e5c4aa6409fa035", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e1f2d4c56e3d43c878a6ffe5e5c4aa6409fa035"}], "stats": {"total": 26, "additions": 24, "deletions": 2}, "files": [{"sha": "02eac6ea4b0956ea6b15c0e7703272cfc1a17841", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b523fc4951bf74a441c9a4c08bd4ab1428b3e3c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b523fc4951bf74a441c9a4c08bd4ab1428b3e3c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4b523fc4951bf74a441c9a4c08bd4ab1428b3e3c", "patch": "@@ -1,3 +1,9 @@\n+Sat Mar  6 17:18:44 1999  Richard Earnshaw  (rearnsha@arm.com)\n+\t\t\t  Richard Henderson  <rth@cygnus.com>\n+\n+\t* flow.c (make_edges): Handle casesi that jump to default branch.\n+\tIf CASE_DROPS_THROUGH, force fallthru to block after casesi.\n+\n Sat Mar  6 07:49:23 1999  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* c-aux-info.c (data_type, affix_data_type, gen_decl, "}, {"sha": "5b72509732a0828b2a7d6049751488c0d19777a5", "filename": "gcc/flow.c", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b523fc4951bf74a441c9a4c08bd4ab1428b3e3c/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b523fc4951bf74a441c9a4c08bd4ab1428b3e3c/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=4b523fc4951bf74a441c9a4c08bd4ab1428b3e3c", "patch": "@@ -871,6 +871,7 @@ make_edges (label_value_list, bb_eh_end)\n       basic_block bb = BASIC_BLOCK (i);\n       rtx insn, x, eh_list;\n       enum rtx_code code;\n+      int force_fallthru = 0;\n \n       /* If we have asynchronous exceptions, scan the notes for all exception\n \t regions active in the block.  In the normal case, we only need the\n@@ -915,6 +916,21 @@ make_edges (label_value_list, bb_eh_end)\n \n \t      for (j = GET_NUM_ELEM (vec) - 1; j >= 0; --j)\n \t\tmake_label_edge (bb, XEXP (RTVEC_ELT (vec, j), 0), 0);\n+\n+\t      /* Some targets (eg, ARM) emit a conditional jump that also\n+\t\t contains the out-of-range target.  Scan for these and\n+\t\t add an edge if necessary.  */\n+\t      if ((tmp = single_set (insn)) != NULL\n+\t\t  && SET_DEST (tmp) == pc_rtx\n+\t\t  && GET_CODE (SET_SRC (tmp)) == IF_THEN_ELSE\n+\t\t  && GET_CODE (XEXP (SET_SRC (tmp), 2)) == LABEL_REF)\n+\t\tmake_label_edge (bb, XEXP (XEXP (SET_SRC (tmp), 2), 0), 0);\n+\n+#ifdef CASE_DROPS_THROUGH\n+\t      /* Silly VAXen.  The ADDR_VEC is going to be in the way of\n+\t\t us naturally detecting fallthru into the next block.  */\n+\t      force_fallthru = 1;\n+#endif\n \t    }\n \n \t  /* If this is a computed jump, then mark it as reaching\n@@ -1015,14 +1031,14 @@ make_edges (label_value_list, bb_eh_end)\n \n       /* Find out if we can drop through to the next block.  */\n       insn = next_nonnote_insn (insn);\n-      if (!insn)\n+      if (!insn || (i + 1 == n_basic_blocks && force_fallthru))\n \tmake_edge (bb, EXIT_BLOCK_PTR, EDGE_FALLTHRU);\n       else if (i + 1 < n_basic_blocks)\n \t{\n \t  rtx tmp = BLOCK_HEAD (i + 1);\n \t  if (GET_CODE (tmp) == NOTE)\n \t    tmp = next_nonnote_insn (tmp);\n-\t  if (insn == tmp)\n+\t  if (force_fallthru || insn == tmp)\n \t    make_edge (bb, BASIC_BLOCK (i + 1), EDGE_FALLTHRU);\n \t}\n     }"}]}