{"sha": "d3e40b7647aa1bb68bf1299e8a72bcb38af16cfb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDNlNDBiNzY0N2FhMWJiNjhiZjEyOTllOGE3MmJjYjM4YWYxNmNmYg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2016-05-04T12:37:56Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2016-05-04T12:37:56Z"}, "message": "match.pd: Add BIT_FIELD_REF canonicalizations and vector constructor simplifications.\n\n2016-05-04  Richard Biener  <rguenther@suse.de>\n\n\t* match.pd: Add BIT_FIELD_REF canonicalizations and vector\n\tconstructor simplifications.\n\t* fold-const.c (fold_ternary_loc): Remove duplicate functionality\n\there.\n\nFrom-SVN: r235871", "tree": {"sha": "1859cbbe1c39033d68f82d1d449c3a22d8fbc161", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1859cbbe1c39033d68f82d1d449c3a22d8fbc161"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d3e40b7647aa1bb68bf1299e8a72bcb38af16cfb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3e40b7647aa1bb68bf1299e8a72bcb38af16cfb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3e40b7647aa1bb68bf1299e8a72bcb38af16cfb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3e40b7647aa1bb68bf1299e8a72bcb38af16cfb/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e01cda69d4ae88e71f9e2ff6d750f5d9556d87d"}], "stats": {"total": 189, "additions": 117, "deletions": 72}, "files": [{"sha": "623b269d3e0fe19e8205de2fbedf14c972c661a1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3e40b7647aa1bb68bf1299e8a72bcb38af16cfb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3e40b7647aa1bb68bf1299e8a72bcb38af16cfb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d3e40b7647aa1bb68bf1299e8a72bcb38af16cfb", "patch": "@@ -1,3 +1,10 @@\n+2016-05-04  Richard Biener  <rguenther@suse.de>\n+\n+\t* match.pd: Add BIT_FIELD_REF canonicalizations and vector\n+\tconstructor simplifications.\n+\t* fold-const.c (fold_ternary_loc): Remove duplicate functionality\n+\there.\n+\n 2016-05-04  Oleg Endo  <olegendo@gcc.gnu.org>\n \n \t* config/sh/predicates (post_inc_mem, pre_dec_mem): New predicates."}, {"sha": "416ec5d7a840fc944b01aa2dcfa747b7d23b633a", "filename": "gcc/fold-const.c", "status": "modified", "additions": 14, "deletions": 72, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3e40b7647aa1bb68bf1299e8a72bcb38af16cfb/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3e40b7647aa1bb68bf1299e8a72bcb38af16cfb/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=d3e40b7647aa1bb68bf1299e8a72bcb38af16cfb", "patch": "@@ -11719,9 +11719,7 @@ fold_ternary_loc (location_t loc, enum tree_code code, tree type,\n       gcc_unreachable ();\n \n     case BIT_FIELD_REF:\n-      if ((TREE_CODE (arg0) == VECTOR_CST\n-\t   || (TREE_CODE (arg0) == CONSTRUCTOR\n-\t       && TREE_CODE (TREE_TYPE (arg0)) == VECTOR_TYPE))\n+      if (TREE_CODE (arg0) == VECTOR_CST\n \t  && (type == TREE_TYPE (TREE_TYPE (arg0))\n \t      || (TREE_CODE (type) == VECTOR_TYPE\n \t\t  && TREE_TYPE (type) == TREE_TYPE (TREE_TYPE (arg0)))))\n@@ -11749,88 +11747,32 @@ fold_ternary_loc (location_t loc, enum tree_code code, tree type,\n \t\t    vals[i] = VECTOR_CST_ELT (arg0, idx + i);\n \t\t  return build_vector (type, vals);\n \t\t}\n-\n-\t      /* Constructor elements can be subvectors.  */\n-\t      unsigned HOST_WIDE_INT k = 1;\n-\t      if (CONSTRUCTOR_NELTS (arg0) != 0)\n-\t\t{\n-\t\t  tree cons_elem = TREE_TYPE (CONSTRUCTOR_ELT (arg0, 0)->value);\n-\t\t  if (TREE_CODE (cons_elem) == VECTOR_TYPE)\n-\t\t    k = TYPE_VECTOR_SUBPARTS (cons_elem);\n-\t\t}\n-\n-\t      /* We keep an exact subset of the constructor elements.  */\n-\t      if ((idx % k) == 0 && (n % k) == 0)\n-\t\t{\n-\t\t  if (CONSTRUCTOR_NELTS (arg0) == 0)\n-\t\t    return build_constructor (type, NULL);\n-\t\t  idx /= k;\n-\t\t  n /= k;\n-\t\t  if (n == 1)\n-\t\t    {\n-\t\t      if (idx < CONSTRUCTOR_NELTS (arg0))\n-\t\t\treturn CONSTRUCTOR_ELT (arg0, idx)->value;\n-\t\t      return build_zero_cst (type);\n-\t\t    }\n-\n-\t\t  vec<constructor_elt, va_gc> *vals;\n-\t\t  vec_alloc (vals, n);\n-\t\t  for (unsigned i = 0;\n-\t\t       i < n && idx + i < CONSTRUCTOR_NELTS (arg0);\n-\t\t       ++i)\n-\t\t    CONSTRUCTOR_APPEND_ELT (vals, NULL_TREE,\n-\t\t\t\t\t    CONSTRUCTOR_ELT\n-\t\t\t\t\t      (arg0, idx + i)->value);\n-\t\t  return build_constructor (type, vals);\n-\t\t}\n-\t      /* The bitfield references a single constructor element.  */\n-\t      else if (idx + n <= (idx / k + 1) * k)\n-\t\t{\n-\t\t  if (CONSTRUCTOR_NELTS (arg0) <= idx / k)\n-\t\t    return build_zero_cst (type);\n-\t\t  else if (n == k)\n-\t\t    return CONSTRUCTOR_ELT (arg0, idx / k)->value;\n-\t\t  else\n-\t\t    return fold_build3_loc (loc, code, type,\n-\t\t      CONSTRUCTOR_ELT (arg0, idx / k)->value, op1,\n-\t\t      build_int_cst (TREE_TYPE (op2), (idx % k) * width));\n-\t\t}\n \t    }\n \t}\n \n-      /* A bit-field-ref that referenced the full argument can be stripped.  */\n-      if (INTEGRAL_TYPE_P (TREE_TYPE (arg0))\n-\t  && TYPE_PRECISION (TREE_TYPE (arg0)) == tree_to_uhwi (arg1)\n-\t  && integer_zerop (op2))\n-\treturn fold_convert_loc (loc, type, arg0);\n-\n       /* On constants we can use native encode/interpret to constant\n          fold (nearly) all BIT_FIELD_REFs.  */\n       if (CONSTANT_CLASS_P (arg0)\n \t  && can_native_interpret_type_p (type)\n-\t  && tree_fits_uhwi_p (TYPE_SIZE_UNIT (TREE_TYPE (arg0)))\n-\t  /* This limitation should not be necessary, we just need to\n-\t     round this up to mode size.  */\n-\t  && tree_to_uhwi (op1) % BITS_PER_UNIT == 0\n-\t  /* Need bit-shifting of the buffer to relax the following.  */\n-\t  && tree_to_uhwi (op2) % BITS_PER_UNIT == 0)\n+\t  && BITS_PER_UNIT == 8)\n \t{\n \t  unsigned HOST_WIDE_INT bitpos = tree_to_uhwi (op2);\n \t  unsigned HOST_WIDE_INT bitsize = tree_to_uhwi (op1);\n-\t  unsigned HOST_WIDE_INT clen;\n-\t  clen = tree_to_uhwi (TYPE_SIZE_UNIT (TREE_TYPE (arg0)));\n-\t  /* ???  We cannot tell native_encode_expr to start at\n-\t     some random byte only.  So limit us to a reasonable amount\n-\t     of work.  */\n-\t  if (clen <= 4096)\n+\t  /* Limit us to a reasonable amount of work.  To relax the\n+\t     other limitations we need bit-shifting of the buffer\n+\t     and rounding up the size.  */\n+\t  if (bitpos % BITS_PER_UNIT == 0\n+\t      && bitsize % BITS_PER_UNIT == 0\n+\t      && bitsize <= MAX_BITSIZE_MODE_ANY_MODE)\n \t    {\n-\t      unsigned char *b = XALLOCAVEC (unsigned char, clen);\n-\t      unsigned HOST_WIDE_INT len = native_encode_expr (arg0, b, clen);\n+\t      unsigned char b[MAX_BITSIZE_MODE_ANY_MODE / BITS_PER_UNIT];\n+\t      unsigned HOST_WIDE_INT len\n+\t\t= native_encode_expr (arg0, b, bitsize / BITS_PER_UNIT,\n+\t\t\t\t      bitpos / BITS_PER_UNIT);\n \t      if (len > 0\n-\t\t  && len * BITS_PER_UNIT >= bitpos + bitsize)\n+\t\t  && len * BITS_PER_UNIT >= bitsize)\n \t\t{\n-\t\t  tree v = native_interpret_expr (type,\n-\t\t\t\t\t\t  b + bitpos / BITS_PER_UNIT,\n+\t\t  tree v = native_interpret_expr (type, b,\n \t\t\t\t\t\t  bitsize / BITS_PER_UNIT);\n \t\t  if (v)\n \t\t    return v;"}, {"sha": "55dd23cc6706ef5dacc310150c39039577f29f16", "filename": "gcc/match.pd", "status": "modified", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3e40b7647aa1bb68bf1299e8a72bcb38af16cfb/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3e40b7647aa1bb68bf1299e8a72bcb38af16cfb/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=d3e40b7647aa1bb68bf1299e8a72bcb38af16cfb", "patch": "@@ -3229,3 +3229,99 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n \t\t\t\t WARN_STRICT_OVERFLOW_COMPARISON);\n \t}\n \t(cmp @0 { res; })))))))))\n+\n+/* Canonicalizations of BIT_FIELD_REFs.  */\n+\n+(simplify\n+ (BIT_FIELD_REF @0 @1 @2)\n+ (switch\n+  (if (TREE_CODE (TREE_TYPE (@0)) == COMPLEX_TYPE\n+       && tree_int_cst_equal (@1, TYPE_SIZE (TREE_TYPE (TREE_TYPE (@0)))))\n+   (switch\n+    (if (integer_zerop (@2))\n+     (view_convert (realpart @0)))\n+    (if (tree_int_cst_equal (@2, TYPE_SIZE (TREE_TYPE (TREE_TYPE (@0)))))\n+     (view_convert (imagpart @0)))))\n+  (if (INTEGRAL_TYPE_P (TREE_TYPE (@0))\n+       && INTEGRAL_TYPE_P (type)\n+       /* A bit-field-ref that referenced the full argument can be stripped.  */\n+       && ((compare_tree_int (@1, TYPE_PRECISION (TREE_TYPE (@0))) == 0\n+\t    && integer_zerop (@2))\n+\t   /* Low-parts can be reduced to integral conversions.\n+\t      ???  The following doesn't work for PDP endian.  */\n+\t   || (BYTES_BIG_ENDIAN == WORDS_BIG_ENDIAN\n+\t       /* Don't even think about BITS_BIG_ENDIAN.  */\n+\t       && TYPE_PRECISION (TREE_TYPE (@0)) % BITS_PER_UNIT == 0\n+\t       && TYPE_PRECISION (type) % BITS_PER_UNIT == 0\n+\t       && compare_tree_int (@2, (BYTES_BIG_ENDIAN\n+\t\t\t\t\t ? (TYPE_PRECISION (TREE_TYPE (@0))\n+\t\t\t\t\t    - TYPE_PRECISION (type))\n+\t\t\t\t\t : 0)) == 0)))\n+   (convert @0))))\n+\n+/* Simplify vector extracts.  */\n+\n+(simplify\n+ (BIT_FIELD_REF CONSTRUCTOR@0 @1 @2)\n+ (if (VECTOR_TYPE_P (TREE_TYPE (@0))\n+      && (types_match (type, TREE_TYPE (TREE_TYPE (@0)))\n+          || (VECTOR_TYPE_P (type)\n+\t      && types_match (TREE_TYPE (type), TREE_TYPE (TREE_TYPE (@0))))))\n+  (with\n+   {\n+     tree ctor = (TREE_CODE (@0) == SSA_NAME\n+\t\t  ? gimple_assign_rhs1 (SSA_NAME_DEF_STMT (@0)) : @0);\n+     tree eltype = TREE_TYPE (TREE_TYPE (ctor));\n+     unsigned HOST_WIDE_INT width = tree_to_uhwi (TYPE_SIZE (eltype));\n+     unsigned HOST_WIDE_INT n = tree_to_uhwi (@1);\n+     unsigned HOST_WIDE_INT idx = tree_to_uhwi (@2);\n+   }\n+   (if (n != 0\n+\t&& (idx % width) == 0\n+\t&& (n % width) == 0\n+\t&& ((idx + n) / width) <= TYPE_VECTOR_SUBPARTS (TREE_TYPE (ctor)))\n+    (with\n+     {\n+       idx = idx / width;\n+       n = n / width;\n+       /* Constructor elements can be subvectors.  */\n+       unsigned HOST_WIDE_INT k = 1;\n+       if (CONSTRUCTOR_NELTS (ctor) != 0)\n+         {\n+           tree cons_elem = TREE_TYPE (CONSTRUCTOR_ELT (ctor, 0)->value);\n+\t   if (TREE_CODE (cons_elem) == VECTOR_TYPE)\n+\t     k = TYPE_VECTOR_SUBPARTS (cons_elem);\n+\t }\n+     }\n+     (switch\n+      /* We keep an exact subset of the constructor elements.  */\n+      (if ((idx % k) == 0 && (n % k) == 0)\n+       (if (CONSTRUCTOR_NELTS (ctor) == 0)\n+        { build_constructor (type, NULL); }\n+\t(with\n+\t {\n+\t   idx /= k;\n+\t   n /= k;\n+\t }\n+\t (if (n == 1)\n+\t  (if (idx < CONSTRUCTOR_NELTS (ctor))\n+\t   { CONSTRUCTOR_ELT (ctor, idx)->value; }\n+\t   { build_zero_cst (type); })\n+\t  {\n+\t    vec<constructor_elt, va_gc> *vals;\n+\t    vec_alloc (vals, n);\n+\t    for (unsigned i = 0;\n+\t         i < n && idx + i < CONSTRUCTOR_NELTS (ctor); ++i)\n+\t      CONSTRUCTOR_APPEND_ELT (vals, NULL_TREE,\n+\t\t\t\t      CONSTRUCTOR_ELT (ctor, idx + i)->value);\n+\t    build_constructor (type, vals);\n+\t  }))))\n+      /* The bitfield references a single constructor element.  */\n+      (if (idx + n <= (idx / k + 1) * k)\n+       (switch\n+        (if (CONSTRUCTOR_NELTS (ctor) <= idx / k)\n+\t { build_zero_cst (type); })\n+\t(if (n == k)\n+\t { CONSTRUCTOR_ELT (ctor, idx / k)->value; })\n+\t(BIT_FIELD_REF { CONSTRUCTOR_ELT (ctor, idx / k)->value; }\n+\t\t       @1 { bitsize_int ((idx % k) * width); })))))))))"}]}