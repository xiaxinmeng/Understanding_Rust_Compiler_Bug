{"sha": "a9007865750a9c7698d7bcfd015c4006dae611c5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTkwMDc4NjU3NTBhOWM3Njk4ZDdiY2ZkMDE1YzQwMDZkYWU2MTFjNQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2017-12-16T16:01:26Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2017-12-16T16:01:26Z"}, "message": "re PR rtl-optimization/82849 (ICE on valid code since r254379)\n\n2017-12-16  Jan Hubicka  <hubicka@ucw.cz>\n\n\tPR rtl-optimization/82849\n\t* modulo-sched.c (sms_schedule): Use get_estimated_loop_iterations_int\n\tand get_max_loop_iterations_int.\n\nFrom-SVN: r255748", "tree": {"sha": "a6bec15d431dc80952b2f43a40969c3df0f3fe6a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a6bec15d431dc80952b2f43a40969c3df0f3fe6a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a9007865750a9c7698d7bcfd015c4006dae611c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9007865750a9c7698d7bcfd015c4006dae611c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9007865750a9c7698d7bcfd015c4006dae611c5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9007865750a9c7698d7bcfd015c4006dae611c5/comments", "author": null, "committer": null, "parents": [{"sha": "b4d43553e9353de4fefb3a1fde1277eeb1bad7be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4d43553e9353de4fefb3a1fde1277eeb1bad7be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4d43553e9353de4fefb3a1fde1277eeb1bad7be"}], "stats": {"total": 28, "additions": 17, "deletions": 11}, "files": [{"sha": "b15d84d64219e5a52b92c1dc282150d528d9eda6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9007865750a9c7698d7bcfd015c4006dae611c5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9007865750a9c7698d7bcfd015c4006dae611c5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a9007865750a9c7698d7bcfd015c4006dae611c5", "patch": "@@ -1,3 +1,9 @@\n+2017-12-16  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\tPR rtl-optimization/82849\n+\t* modulo-sched.c (sms_schedule): Use get_estimated_loop_iterations_int\n+\tand get_max_loop_iterations_int.\n+\n 2017-12-16  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "d02f23f3b029f313ee4e0fcf311e2a07bcc5baf2", "filename": "gcc/modulo-sched.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9007865750a9c7698d7bcfd015c4006dae611c5/gcc%2Fmodulo-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9007865750a9c7698d7bcfd015c4006dae611c5/gcc%2Fmodulo-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmodulo-sched.c?ref=a9007865750a9c7698d7bcfd015c4006dae611c5", "patch": "@@ -1346,7 +1346,7 @@ sms_schedule (void)\n   struct loop *loop;\n   basic_block condition_bb = NULL;\n   edge latch_edge;\n-  gcov_type trip_count = 0;\n+  HOST_WIDE_INT trip_count, max_trip_count;\n \n   loop_optimizer_init (LOOPS_HAVE_PREHEADERS\n \t\t       | LOOPS_HAVE_RECORDED_EXITS);\n@@ -1422,9 +1422,8 @@ sms_schedule (void)\n       get_ebb_head_tail (bb, bb, &head, &tail);\n       latch_edge = loop_latch_edge (loop);\n       gcc_assert (single_exit (loop));\n-      if (single_exit (loop)->count () > profile_count::zero ())\n-\ttrip_count = latch_edge->count ().to_gcov_type ()\n-\t\t     / single_exit (loop)->count ().to_gcov_type ();\n+      trip_count = get_estimated_loop_iterations_int (loop);\n+      max_trip_count = get_max_loop_iterations_int (loop);\n \n       /* Perform SMS only on loops that their average count is above threshold.  */\n \n@@ -1444,8 +1443,8 @@ sms_schedule (void)\n \t             \t   (int64_t) bb->count.to_gcov_type ());\n \t      \t  fprintf (dump_file, \"\\n\");\n                   fprintf (dump_file, \"SMS trip-count \");\n-                  fprintf (dump_file, \"%\" PRId64,\n-                           (int64_t) trip_count);\n+                  fprintf (dump_file, \"%\" PRId64 \"max %\" PRId64,\n+                           (int64_t) trip_count, (int64_t) max_trip_count);\n                   fprintf (dump_file, \"\\n\");\n \t      \t  fprintf (dump_file, \"SMS profile-sum-max \");\n \t      \t  fprintf (dump_file, \"%\" PRId64,\n@@ -1552,9 +1551,8 @@ sms_schedule (void)\n \n       latch_edge = loop_latch_edge (loop);\n       gcc_assert (single_exit (loop));\n-      if (single_exit (loop)->count ()> profile_count::zero ())\n-\ttrip_count = latch_edge->count ().to_gcov_type ()\n-\t\t     / single_exit (loop)->count ().to_gcov_type ();\n+      trip_count = get_estimated_loop_iterations_int (loop);\n+      max_trip_count = get_max_loop_iterations_int (loop);\n \n       if (dump_file)\n \t{\n@@ -1648,7 +1646,8 @@ sms_schedule (void)\n \t     we let the scheduling passes do the job in this case.  */\n \t  if (stage_count < PARAM_VALUE (PARAM_SMS_MIN_SC)\n \t      || (count_init && (loop_count <= stage_count))\n-\t      || (flag_branch_probabilities && (trip_count <= stage_count)))\n+\t      || (max_trip_count >= 0 && max_trip_count <= stage_count)\n+\t      || (trip_count >= 0 && trip_count <= stage_count))\n \t    {\n \t      if (dump_file)\n \t\t{\n@@ -1657,7 +1656,8 @@ sms_schedule (void)\n \t\t\t   \" loop-count=\", stage_count);\n \t\t  fprintf (dump_file, \"%\" PRId64, loop_count);\n \t\t  fprintf (dump_file, \", trip-count=\");\n-\t\t  fprintf (dump_file, \"%\" PRId64, trip_count);\n+\t\t  fprintf (dump_file, \"%\" PRId64 \"max %\" PRId64,\n+\t\t\t   (int64_t) trip_count, (int64_t) max_trip_count);\n \t\t  fprintf (dump_file, \")\\n\");\n \t\t}\n \t      break;"}]}