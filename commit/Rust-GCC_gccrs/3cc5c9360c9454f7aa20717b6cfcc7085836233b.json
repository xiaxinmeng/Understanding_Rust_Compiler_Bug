{"sha": "3cc5c9360c9454f7aa20717b6cfcc7085836233b", "node_id": "C_kwDOANBUbNoAKDNjYzVjOTM2MGM5NDU0ZjdhYTIwNzE3YjZjZmNjNzA4NTgzNjIzM2I", "commit": {"author": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2023-03-29T13:24:12Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2023-03-30T16:52:24Z"}, "message": "gccrs: add missing name resolution to self params with specified types\n\nIn rust it is possible to write method where you explicitly specify the\ntype of a self param. It does not however allow for you to use reference\ndestructuring in this senario.\n\ngcc/rust/ChangeLog:\n\n\t* resolve/rust-ast-resolve-item.cc\n\t(ResolveTraitItems::visit): add name resolution self param\n\t(ResolveItem::visit): likewise\n\nSigned-off-by: Philip Herron <herron.philip@googlemail.com>", "tree": {"sha": "2399888e30b72e0065f94c514bcfc8ac825a3a18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2399888e30b72e0065f94c514bcfc8ac825a3a18"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3cc5c9360c9454f7aa20717b6cfcc7085836233b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cc5c9360c9454f7aa20717b6cfcc7085836233b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3cc5c9360c9454f7aa20717b6cfcc7085836233b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cc5c9360c9454f7aa20717b6cfcc7085836233b/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "efc3154162fff62d71859ef7d30a5a1ff1a4ba53", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efc3154162fff62d71859ef7d30a5a1ff1a4ba53", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efc3154162fff62d71859ef7d30a5a1ff1a4ba53"}], "stats": {"total": 62, "additions": 46, "deletions": 16}, "files": [{"sha": "0605acc49dc57c2e19a10194208151165933f1b7", "filename": "gcc/rust/resolve/rust-ast-resolve-item.cc", "status": "modified", "additions": 46, "deletions": 16, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cc5c9360c9454f7aa20717b6cfcc7085836233b/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cc5c9360c9454f7aa20717b6cfcc7085836233b/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.cc?ref=3cc5c9360c9454f7aa20717b6cfcc7085836233b", "patch": "@@ -138,16 +138,31 @@ ResolveTraitItems::visit (AST::TraitItemMethod &func)\n \t\t\t\t       self_param.get_has_ref (),\n \t\t\t\t       self_param.get_is_mut (),\n \t\t\t\t       std::unique_ptr<AST::Pattern> (nullptr));\n-\n-  std::vector<std::unique_ptr<AST::TypePathSegment>> segments;\n-  segments.push_back (std::unique_ptr<AST::TypePathSegment> (\n-    new AST::TypePathSegment (\"Self\", false, self_param.get_locus ())));\n-\n-  AST::TypePath self_type_path (std::move (segments), self_param.get_locus ());\n-\n-  ResolveType::go (&self_type_path);\n   PatternDeclaration::go (&self_pattern, Rib::ItemType::Param);\n \n+  if (self_param.has_type ())\n+    {\n+      if (self_param.get_has_ref ())\n+\t{\n+\t  // FIXME is this true?\n+\t  rust_error_at (\n+\t    self_param.get_locus (),\n+\t    \"it is not possible to mark self as reference and specify type\");\n+\t}\n+      ResolveType::go (self_param.get_type ().get ());\n+    }\n+  else\n+    {\n+      // here we implicitly make self have a type path of Self\n+      std::vector<std::unique_ptr<AST::TypePathSegment>> segments;\n+      segments.push_back (std::unique_ptr<AST::TypePathSegment> (\n+\tnew AST::TypePathSegment (\"Self\", false, self_param.get_locus ())));\n+\n+      AST::TypePath self_type_path (std::move (segments),\n+\t\t\t\t    self_param.get_locus ());\n+      ResolveType::go (&self_type_path);\n+    }\n+\n   std::vector<PatternBinding> bindings\n     = {PatternBinding (PatternBoundCtx::Product, std::set<Identifier> ())};\n \n@@ -636,16 +651,31 @@ ResolveItem::visit (AST::Method &method)\n \t\t\t\t       self_param.get_has_ref (),\n \t\t\t\t       self_param.get_is_mut (),\n \t\t\t\t       std::unique_ptr<AST::Pattern> (nullptr));\n-\n-  std::vector<std::unique_ptr<AST::TypePathSegment>> segments;\n-  segments.push_back (std::unique_ptr<AST::TypePathSegment> (\n-    new AST::TypePathSegment (\"Self\", false, self_param.get_locus ())));\n-\n-  AST::TypePath self_type_path (std::move (segments), self_param.get_locus ());\n-\n-  ResolveType::go (&self_type_path);\n   PatternDeclaration::go (&self_pattern, Rib::ItemType::Param);\n \n+  if (self_param.has_type ())\n+    {\n+      if (self_param.get_has_ref ())\n+\t{\n+\t  // FIXME is this true?\n+\t  rust_error_at (\n+\t    self_param.get_locus (),\n+\t    \"it is not possible to mark self as reference and specify type\");\n+\t}\n+      ResolveType::go (self_param.get_type ().get ());\n+    }\n+  else\n+    {\n+      // here we implicitly make self have a type path of Self\n+      std::vector<std::unique_ptr<AST::TypePathSegment>> segments;\n+      segments.push_back (std::unique_ptr<AST::TypePathSegment> (\n+\tnew AST::TypePathSegment (\"Self\", false, self_param.get_locus ())));\n+\n+      AST::TypePath self_type_path (std::move (segments),\n+\t\t\t\t    self_param.get_locus ());\n+      ResolveType::go (&self_type_path);\n+    }\n+\n   std::vector<PatternBinding> bindings\n     = {PatternBinding (PatternBoundCtx::Product, std::set<Identifier> ())};\n "}]}