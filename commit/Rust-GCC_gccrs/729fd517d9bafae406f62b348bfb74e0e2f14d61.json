{"sha": "729fd517d9bafae406f62b348bfb74e0e2f14d61", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzI5ZmQ1MTdkOWJhZmFlNDA2ZjYyYjM0OGJmYjc0ZTBlMmYxNGQ2MQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@nildram.co.uk", "date": "2007-10-02T20:56:47Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2007-10-02T20:56:47Z"}, "message": "mips.exp (setup_mips_tests): Set mips_abi to the default ABI.\n\ngcc/testsuite/\n\t* gcc.target/mips/mips.exp (setup_mips_tests): Set mips_abi to the\n\tdefault ABI.  Split mips_forced_abi into mips_forced_abi and\n\tmips_forced_regs.\n\t(is_gp32_flag): Return true for -mabi=32.\n\t(is_gp64_flag): New function.  Handle 64-bit -mabi options.\n\t(dg-mips-options): Use is_gp64_flag instead of checking specifically\n\tfor -mgp64.  Update after the mips_forced_abi split.  Handle -mabi=*.\n\tDon't force an ABI for -mgp32 or -mfp32 if the flags contain -mabi=*.\n\t* gcc.target/mips/pr33256.c: Remove -mips3 requirement.\n\t* gcc.target/mips/save-restore-1.c: Use -mabi=32 instead of -mgp32.\n\t* gcc.target/mips/save-restore-2.c: Likewise.\n\t* gcc.target/mips/save-restore-3.c: Likewise.\n\t* gcc.target/mips/save-restore-4.c: Likewise.\n\nFrom-SVN: r128966", "tree": {"sha": "f663f0500b89b0492ac62f546a637edf4471d724", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f663f0500b89b0492ac62f546a637edf4471d724"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/729fd517d9bafae406f62b348bfb74e0e2f14d61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/729fd517d9bafae406f62b348bfb74e0e2f14d61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/729fd517d9bafae406f62b348bfb74e0e2f14d61", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/729fd517d9bafae406f62b348bfb74e0e2f14d61/comments", "author": null, "committer": null, "parents": [{"sha": "16089886c228cc1361ddc01ac3461017dc1072c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16089886c228cc1361ddc01ac3461017dc1072c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16089886c228cc1361ddc01ac3461017dc1072c3"}], "stats": {"total": 81, "additions": 69, "deletions": 12}, "files": [{"sha": "2e45a08cff4b53d2b7ba974e5a36954edaa2b8e9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/729fd517d9bafae406f62b348bfb74e0e2f14d61/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/729fd517d9bafae406f62b348bfb74e0e2f14d61/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=729fd517d9bafae406f62b348bfb74e0e2f14d61", "patch": "@@ -1,3 +1,19 @@\n+2007-10-02  Richard Sandiford  <rsandifo@nildram.co.uk>\n+\n+\t* gcc.target/mips/mips.exp (setup_mips_tests): Set mips_abi to the\n+\tdefault ABI.  Split mips_forced_abi into mips_forced_abi and\n+\tmips_forced_regs.\n+\t(is_gp32_flag): Return true for -mabi=32.\n+\t(is_gp64_flag): New function.  Handle 64-bit -mabi options.\n+\t(dg-mips-options): Use is_gp64_flag instead of checking specifically\n+\tfor -mgp64.  Update after the mips_forced_abi split.  Handle -mabi=*.\n+\tDon't force an ABI for -mgp32 or -mfp32 if the flags contain -mabi=*.\n+\t* gcc.target/mips/pr33256.c: Remove -mips3 requirement.\n+\t* gcc.target/mips/save-restore-1.c: Use -mabi=32 instead of -mgp32.\n+\t* gcc.target/mips/save-restore-2.c: Likewise.\n+\t* gcc.target/mips/save-restore-3.c: Likewise.\n+\t* gcc.target/mips/save-restore-4.c: Likewise.\n+\n 2007-10-02  Richard Sandiford  <rsandifo@nildram.co.uk>\n \n \tPR middle-end/33617"}, {"sha": "7e2b781456bf0dbbb3f4ea9d95f3fddf93b60c39", "filename": "gcc/testsuite/gcc.target/mips/mips.exp", "status": "modified", "additions": 48, "deletions": 7, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/729fd517d9bafae406f62b348bfb74e0e2f14d61/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/729fd517d9bafae406f62b348bfb74e0e2f14d61/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips.exp?ref=729fd517d9bafae406f62b348bfb74e0e2f14d61", "patch": "@@ -33,9 +33,11 @@ load_lib gcc-dg.exp\n #    $mips_gp64:\t true if 64-bit output is selected\n #    $mips_fp64:\t true if 64-bit FPRs are selected\n #    $mips_float:\t \"hard\" or \"soft\"\n+#    $mips_abi:\t\t the ABI specified by _MIPS_SIM\n #\n #    $mips_forced_isa:\t true if the command line uses -march=* or -mips*\n-#    $mips_forced_abi:\t true if the command line uses -mabi=* or -mgp*\n+#    $mips_forced_abi:\t true if the command line uses -mabi=*\n+#    $mips_forced_regs:  true if the command line uses -mgp* or -mfp*\n #    $mips_forced_float: true if the command line uses -mhard/soft-float\n #    $mips_forced_le\t true if the command line uses -EL or -mel\n #    $mips_forced_gp\t true if the command line forces a particular GP mode\n@@ -46,13 +48,15 @@ proc setup_mips_tests {} {\n     global mips_gp64\n     global mips_fp64\n     global mips_float\n+    global mips_abi\n \n     global mips_forced_isa\n     global mips_forced_abi\n     global mips_forced_float\n     global mips_forced_le\n     global mips_forced_gp\n     global mips_forced_no_er\n+    global mips_forced_regs\n \n     global compiler_flags\n     global tool\n@@ -73,6 +77,17 @@ proc setup_mips_tests {} {\n \t#else\n \tconst char *float = \"soft\";\n \t#endif\n+\t#if !defined _MIPS_SIM\n+\tconst char *abi = \"eabi\";\n+\t#elif _MIPS_SIM=_ABIO32\n+\tconst char *abi = \"32\";\n+\t#elif _MIPS_SIM=_ABIO64\n+\tconst char *abi = \"o64\";\n+\t#elif _MIPS_SIM=_ABIN32\n+\tconst char *abi = \"n32\";\n+\t#else\n+\tconst char *abi = \"64\";\n+\t#endif\n     }\n     close $f\n     set output [${tool}_target_compile $src \"\" preprocess \"\"]\n@@ -83,9 +98,11 @@ proc setup_mips_tests {} {\n     set mips_gp64 [regexp {gp64 = 1} $output]\n     set mips_fp64 [regexp {fp64 = 1} $output]\n     regexp {float = \"([^\"]*)} $output dummy mips_float\n+    regexp {abi = \"([^\"]*)} $output dummy mips_abi\n \n     set mips_forced_isa [regexp -- {(-mips[1-5][[:>:]]|-mips32*|-mips64*|-march)} $compiler_flags]\n-    set mips_forced_abi [regexp -- {(-mgp|-mfp|-mabi)} $compiler_flags]\n+    set mips_forced_abi [regexp -- {-mabi} $compiler_flags]\n+    set mips_forced_regs [regexp -- {(-mgp|-mfp)} $compiler_flags]\n     set mips_forced_float [regexp -- {-m(hard|soft)-float} $compiler_flags]\n     set mips_forced_le [regexp -- {-(EL|mel)[[:>:]]} $compiler_flags]\n     set mips_forced_gp [regexp -- {-(G|m(|no-)((extern|local)-sdata|gpopt)|mabicalls|mrtp)} $compiler_flags]\n@@ -99,11 +116,23 @@ proc is_gp32_flag {flag} {\n \t-mips[12] -\n \t-mips32* -\n \t-march=mips32* -\n+\t-mabi=32 -\n \t-mgp32 { return 1 }\n \tdefault { return 0 }\n     }\n }\n \n+# Return true if command-line option FLAG forces 64-bit code.\n+proc is_gp64_flag {flag} {\n+    switch -glob -- $flag {\n+\t-mabi=64 -\n+\t-mabi=o64 -\n+\t-mabi=n32 -\n+\t-mgp64 { return 1 }\n+\tdefault { return 0 }\n+    }\n+}\n+\n # Like dg-options, but treats certain MIPS-specific options specially:\n #\n #    -mgp32\n@@ -116,6 +145,10 @@ proc is_gp32_flag {flag} {\n #\tif the other flags don't do so.  Skip the test if the multilib\n #\tflags force a 32-bit ABI or a 32-bit architecture.\n #\n+#    -mabi=*\n+#\tForce a particular ABI.  Skip the test if the multilib flags\n+#\tforce a specific ABI or a different register size.\n+#\n #    -march=*\n #    -mips*\n #\tSelect the target architecture.  Skip the test if the multilib\n@@ -150,9 +183,11 @@ proc dg-mips-options {args} {\n     global mips_gp64\n     global mips_fp64\n     global mips_float\n+    global mips_abi\n \n     global mips_forced_isa\n     global mips_forced_abi\n+    global mips_forced_regs\n     global mips_forced_float\n     global mips_forced_le\n     global mips_forced_gp\n@@ -166,16 +201,18 @@ proc dg-mips-options {args} {\n \tif {[is_gp32_flag $flag]\n \t    && ($mips_gp64\n \t\t|| ($mips_fp64 && [lsearch $flags -mfp64] < 0)) } {\n-\t    if {$mips_forced_abi} {\n+\t    if {$mips_forced_regs || $mips_forced_abi} {\n \t\tset matches 0\n-\t    } else {\n+\t    } elseif {[lsearch $flags \"-mabi=*\"] < 0} {\n \t\tappend flags \" -mabi=32\"\n \t    }\n-\t} elseif {$flag == \"-mgp64\" && !$mips_gp64} {\n-\t    if {$mips_forced_abi} {\n+\t} elseif {[is_gp64_flag $flag] && !$mips_gp64} {\n+\t    if {$mips_forced_regs || $mips_forced_abi} {\n \t\tset matches 0\n \t    } else {\n-\t\tappend flags \" -mabi=o64\"\n+\t    \tif {[lsearch $flags \"-mabi=*\"] < 0} {\n+\t\t    append flags \" -mabi=o64\"\n+\t\t}\n \t\tif {[lsearch -regexp $flags {^(-mips|-march)}] < 0} {\n \t\t    append flags \" -mips3\"\n \t\t}\n@@ -188,6 +225,10 @@ proc dg-mips-options {args} {\n \t    if {$mips_isa < 33 || $mips_float != \"hard\"} {\n \t\tset matches 0\n \t    }\n+\t} elseif {[regexp -- {^-mabi=(.*)} $flag dummy abi]} {\n+\t    if {$abi != $mips_abi && $mips_forced_abi} {\n+\t\tset matches 0\n+\t    }\n \t} elseif {[regexp -- {^-march=(.*)} $flag dummy arch]} {\n \t    if {$arch != $mips_arch && $mips_forced_isa} {\n \t\tset matches 0"}, {"sha": "e19c93291a26125de39a86d9aa62143d56c673e7", "filename": "gcc/testsuite/gcc.target/mips/pr33256.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/729fd517d9bafae406f62b348bfb74e0e2f14d61/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fpr33256.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/729fd517d9bafae406f62b348bfb74e0e2f14d61/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fpr33256.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fpr33256.c?ref=729fd517d9bafae406f62b348bfb74e0e2f14d61", "patch": "@@ -1,6 +1,6 @@\n /* GCC used to report an ICE for this test because we generated a LO_SUM\n    for an illegitimate constant.  */\n-/* { dg-mips-options \"-mabi=64 -mips3 -msym32 -O2 -EB -mno-abicalls\" } */\n+/* { dg-mips-options \"-mabi=64 -msym32 -O2 -EB -mno-abicalls\" } */\n extern unsigned long a[];\n int b (int);\n "}, {"sha": "9c8017c7c6595886e02e1aaca94ffa1c139a5118", "filename": "gcc/testsuite/gcc.target/mips/save-restore-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/729fd517d9bafae406f62b348bfb74e0e2f14d61/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fsave-restore-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/729fd517d9bafae406f62b348bfb74e0e2f14d61/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fsave-restore-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fsave-restore-1.c?ref=729fd517d9bafae406f62b348bfb74e0e2f14d61", "patch": "@@ -1,6 +1,6 @@\n /* Check that we can use the save instruction to save varargs.  */\n /* { dg-do compile { target mips16_attribute } } */\n-/* { dg-mips-options \"-mips32r2 -mgp32 -O2\" } */\n+/* { dg-mips-options \"-mips32r2 -mabi=32 -O2\" } */\n /* { dg-add-options mips16_attribute } */\n \n #include <stdarg.h>"}, {"sha": "de082d331cda9d8a5e809aa24b8494add6b393c9", "filename": "gcc/testsuite/gcc.target/mips/save-restore-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/729fd517d9bafae406f62b348bfb74e0e2f14d61/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fsave-restore-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/729fd517d9bafae406f62b348bfb74e0e2f14d61/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fsave-restore-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fsave-restore-2.c?ref=729fd517d9bafae406f62b348bfb74e0e2f14d61", "patch": "@@ -1,6 +1,6 @@\n /* Check that we can use the save instruction to save spilled arguments.  */\n /* { dg-do compile { target mips16_attribute } } */\n-/* { dg-mips-options \"-mips32r2 -mgp32 -O2\" } */\n+/* { dg-mips-options \"-mips32r2 -mabi=32 -O2\" } */\n /* { dg-add-options mips16_attribute } */\n \n MIPS16 void"}, {"sha": "674072dd7b0253104a3ace4984238e6bf50c5eee", "filename": "gcc/testsuite/gcc.target/mips/save-restore-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/729fd517d9bafae406f62b348bfb74e0e2f14d61/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fsave-restore-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/729fd517d9bafae406f62b348bfb74e0e2f14d61/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fsave-restore-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fsave-restore-3.c?ref=729fd517d9bafae406f62b348bfb74e0e2f14d61", "patch": "@@ -1,7 +1,7 @@\n /* Check that we can use the save instruction to save spilled arguments\n    when the argument save area is out of range of a direct load or store.  */\n /* { dg-do compile { target mips16_attribute } } */\n-/* { dg-mips-options \"-mips32r2 -mgp32 -O2\" } */\n+/* { dg-mips-options \"-mips32r2 -mabi=32 -O2\" } */\n /* { dg-add-options mips16_attribute } */\n \n void bar (int *);"}, {"sha": "13f1f0454ee74c94b6ee35d3f1c593be2f4264a5", "filename": "gcc/testsuite/gcc.target/mips/save-restore-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/729fd517d9bafae406f62b348bfb74e0e2f14d61/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fsave-restore-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/729fd517d9bafae406f62b348bfb74e0e2f14d61/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fsave-restore-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fsave-restore-4.c?ref=729fd517d9bafae406f62b348bfb74e0e2f14d61", "patch": "@@ -1,6 +1,6 @@\n /* Check that we can use the save instruction to save $16, $17 and $31.  */\n /* { dg-do compile { target mips16_attribute } } */\n-/* { dg-mips-options \"-mips32r2 -mgp32 -O2\" } */\n+/* { dg-mips-options \"-mips32r2 -mabi=32 -O2\" } */\n /* { dg-add-options mips16_attribute } */\n \n void bar (void);"}]}