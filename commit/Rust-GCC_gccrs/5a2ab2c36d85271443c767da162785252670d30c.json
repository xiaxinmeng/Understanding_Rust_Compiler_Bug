{"sha": "5a2ab2c36d85271443c767da162785252670d30c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWEyYWIyYzM2ZDg1MjcxNDQzYzc2N2RhMTYyNzg1MjUyNjcwZDMwYw==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2005-08-26T15:52:53Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2005-08-26T15:52:53Z"}, "message": "re PR libstdc++/23081 (Finish the implementation of tr1::array)\n\n2005-08-26  Paolo Carlini  <pcarlini@suse.de>\n\n\tPR libstdc++/23081\n\t* include/tr1/array: Implement members back(), front(), data(),\n\tand the tuple interface; tidy.\n\t* testsuite/tr1/6_containers/array/element_access/back.cc: New.\n\t* testsuite/tr1/6_containers/array/element_access/data.cc: Likewise.\n\t* testsuite/tr1/6_containers/array/element_access/front.cc: Likewise.\n\t* testsuite/tr1/6_containers/array/tuple_interface/get.cc: Likewise.\n\t* testsuite/tr1/6_containers/array/tuple_interface/tuple_element.cc:\n\tLikewise.\n\t* testsuite/tr1/6_containers/array/tuple_interface/tuple_size.cc:\n\tLikewise.\n\nFrom-SVN: r103525", "tree": {"sha": "2137778c26f216db35fd58a264af6aeb3630b453", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2137778c26f216db35fd58a264af6aeb3630b453"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5a2ab2c36d85271443c767da162785252670d30c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a2ab2c36d85271443c767da162785252670d30c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a2ab2c36d85271443c767da162785252670d30c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a2ab2c36d85271443c767da162785252670d30c/comments", "author": null, "committer": null, "parents": [{"sha": "d7ae6cfb81e5f880cea3c4b50fb61cbe9d209b45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7ae6cfb81e5f880cea3c4b50fb61cbe9d209b45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7ae6cfb81e5f880cea3c4b50fb61cbe9d209b45"}], "stats": {"total": 465, "additions": 407, "deletions": 58}, "files": [{"sha": "e512e6f9177aa84d652ac702c3cad5c84b962ad7", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a2ab2c36d85271443c767da162785252670d30c/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a2ab2c36d85271443c767da162785252670d30c/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=5a2ab2c36d85271443c767da162785252670d30c", "patch": "@@ -1,3 +1,17 @@\n+2005-08-26  Paolo Carlini  <pcarlini@suse.de>\n+\n+\tPR libstdc++/23081\n+\t* include/tr1/array: Implement members back(), front(), data(),\n+\tand the tuple interface; tidy.\n+\t* testsuite/tr1/6_containers/array/element_access/back.cc: New.\n+\t* testsuite/tr1/6_containers/array/element_access/data.cc: Likewise.\n+\t* testsuite/tr1/6_containers/array/element_access/front.cc: Likewise.\n+\t* testsuite/tr1/6_containers/array/tuple_interface/get.cc: Likewise.\n+\t* testsuite/tr1/6_containers/array/tuple_interface/tuple_element.cc:\n+\tLikewise.\n+\t* testsuite/tr1/6_containers/array/tuple_interface/tuple_size.cc:\n+\tLikewise.\n+\n 2005-08-25  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/tr1/hashtable: Use __throw_exception_again,"}, {"sha": "4b500fc48a2176eb2214b184da5d2f33e8f273b3", "filename": "libstdc++-v3/include/tr1/array", "status": "modified", "additions": 87, "deletions": 58, "changes": 145, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a2ab2c36d85271443c767da162785252670d30c/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Farray", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a2ab2c36d85271443c767da162785252670d30c/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Farray", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Farray?ref=5a2ab2c36d85271443c767da162785252670d30c", "patch": "@@ -1,6 +1,6 @@\n // class template array -*- C++ -*-\n \n-// Copyright (C) 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -37,6 +37,7 @@\n #include <new>\n #include <iterator>\n #include <algorithm>\n+#include <cstddef>\n #include <bits/functexcept.h>\n \n //namespace std::tr1\n@@ -46,16 +47,16 @@ namespace tr1\n {\n   /// @brief  struct array [6.2.2].\n   /// NB: Requires complete type _Tp.\n-  template<typename _Tp, size_t _Nm = 1>\n+  template<typename _Tp, std::size_t _Nm = 1>\n     struct array\n     {\n       typedef _Tp \t    \t\t\tvalue_type;\n       typedef value_type&                   \treference;\n       typedef const value_type&             \tconst_reference;\n       typedef value_type*          \t\titerator;\n       typedef const value_type*\t\t\tconst_iterator;\n-      typedef size_t                    \tsize_type;\n-      typedef ptrdiff_t                     \tdifference_type;\n+      typedef std::size_t                    \tsize_type;\n+      typedef std::ptrdiff_t                   \tdifference_type;\n       typedef std::reverse_iterator<iterator>\treverse_iterator;\n       typedef std::reverse_iterator<const_iterator>\tconst_reverse_iterator;\n \n@@ -76,35 +77,35 @@ namespace tr1\n       // Iterators.\n       iterator \n       begin()\n-      { return reinterpret_cast<iterator>(&_M_instance[0]); }\n+      { return &_M_instance[0]; }\n \n       const_iterator \n       begin() const \n-      { return reinterpret_cast<const_iterator>(&_M_instance[0]); }\n+      { return &_M_instance[0]; }\n \n       iterator \n       end() \n-      { return reinterpret_cast<iterator>(&_M_instance[_Nm]); }\n+      { return &_M_instance[_Nm]; }\n \n       const_iterator \n       end() const\n-      { return reinterpret_cast<const_iterator>(&_M_instance[_Nm]); }\n+      { return &_M_instance[_Nm]; }\n \n       reverse_iterator \n       rbegin()\n-      { return reverse_iterator(this->end()); }\n+      { return reverse_iterator(end()); }\n \n       const_reverse_iterator \n       rbegin() const\n-      { return const_reverse_iterator(this->end()); }\n+      { return const_reverse_iterator(end()); }\n \n       reverse_iterator \n       rend()\n-      { return reverse_iterator(this->begin()); }\n+      { return reverse_iterator(begin()); }\n \n       const_reverse_iterator \n       rend() const\n-      { return const_reverse_iterator(this->begin()); }\n+      { return const_reverse_iterator(begin()); }\n \n       // Capacity.\n       size_type \n@@ -119,86 +120,114 @@ namespace tr1\n       // Element access.\n       reference \n       operator[](size_type __n)\n-      { return reinterpret_cast<reference>(_M_instance[__n]); }\n+      { return _M_instance[__n]; }\n \n       const_reference \n       operator[](size_type __n) const\n-      { return reinterpret_cast<const_reference>(_M_instance[__n]); }\n+      { return _M_instance[__n]; }\n \n       const_reference \n       at(size_type __n) const\n       { \n \tif (__builtin_expect(__n > _Nm, false))\n \t  std::__throw_out_of_range(\"array::at\");\n-\treturn reinterpret_cast<const_reference>(_M_instance[__n]); \n+\treturn _M_instance[__n]; \n       }\n \n       reference \n       at(size_type __n)\n       { \n \tif (__builtin_expect(__n > _Nm, false))\n \t  std::__throw_out_of_range(\"array::at\");\n-\treturn reinterpret_cast<reference>(_M_instance[__n]); \n+\treturn _M_instance[__n]; \n       }\n \n       reference \n-      front(); \n+      front()\n+      { return *begin(); }\n \n       const_reference \n-      front() const; \n+      front() const\n+      { return *begin(); }\n \n       reference \n-      back(); \n+      back()\n+      { return *(end() - 1); }\n \n       const_reference \n-      back() const; \n+      back() const\n+      { return *(end() - 1); }\n \n       _Tp* \n-      data(); \n+      data()\n+      { return &_M_instance[0]; }\n \n       const _Tp* \n-      data() const;\n+      data() const\n+      { return &_M_instance[0]; }\n     };\n \n   // Array comparisons.\n- template<typename _Tp, size_t _Nm>\n-   bool \n-   operator==(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)\n-   { return std::equal(__one.begin(), __one.end(), __two.begin()); }\n-\n- template<typename _Tp, size_t _Nm>\n-   bool \n-   operator!=(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)\n-   { return !(__one == __two); }\n-\n- template<typename _Tp, size_t _Nm>\n-   bool \n-   operator<(const array<_Tp, _Nm>& a, const array<_Tp, _Nm>& b)\n-   { \n-     return std::lexicographical_compare(a.begin(), a.end(), \n-\t\t\t\t\t b.begin(), b.end()); \n-   }\n-\n- template<typename _Tp, size_t _Nm>\n-   bool \n-   operator>(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)\n-   { return __two < __one; }\n-\n- template<typename _Tp, size_t _Nm>\n-   bool \n-   operator<=(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)\n-   { return !(__one > __two); }\n-\n- template<typename _Tp, size_t _Nm>\n-   bool \n-   operator>=(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)\n-   { return !(__one < __two); }\n+  template<typename _Tp, std::size_t _Nm>\n+    bool \n+    operator==(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)\n+    { return std::equal(__one.begin(), __one.end(), __two.begin()); }\n+\n+  template<typename _Tp, std::size_t _Nm>\n+    bool \n+    operator!=(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)\n+    { return !(__one == __two); }\n+\n+  template<typename _Tp, std::size_t _Nm>\n+    bool \n+    operator<(const array<_Tp, _Nm>& __a, const array<_Tp, _Nm>& __b)\n+    { \n+      return std::lexicographical_compare(__a.begin(), __a.end(),\n+\t\t\t\t\t  __b.begin(), __b.end()); \n+    }\n+\n+  template<typename _Tp, std::size_t _Nm>\n+    bool \n+    operator>(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)\n+    { return __two < __one; }\n+\n+  template<typename _Tp, std::size_t _Nm>\n+    bool \n+    operator<=(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)\n+    { return !(__one > __two); }\n+\n+  template<typename _Tp, std::size_t _Nm>\n+    bool \n+    operator>=(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)\n+    { return !(__one < __two); }\n \n   // Specialized algorithms [6.2.2.2].\n- template<typename _Tp, size_t _Nm>\n-   void\n-   swap(array<_Tp, _Nm>& __one, array<_Tp, _Nm>& __two)\n-   { swap_ranges(__one.begin(), __one.end(), __two.begin()); }\n+  template<typename _Tp, std::size_t _Nm>\n+    void\n+    swap(array<_Tp, _Nm>& __one, array<_Tp, _Nm>& __two)\n+    { swap_ranges(__one.begin(), __one.end(), __two.begin()); }\n+\n+  // Tuple interface to class template array [6.2.2.5].\n+  template<typename _Tp> class tuple_size;\n+  template<int _Int, typename _Tp> class tuple_element;\n+  \n+  template<typename _Tp, std::size_t _Nm>\n+    struct tuple_size<array<_Tp, _Nm> >\n+    { static const int value = _Nm; };\n+ \n+  template<int _Int, typename _Tp, std::size_t _Nm>\n+    struct tuple_element<_Int, array<_Tp, _Nm> >\n+    { typedef _Tp type; };\n+\n+  template<int _Int, typename _Tp, std::size_t _Nm>\n+    _Tp&\n+    get(array<_Tp, _Nm>& __arr)\n+    { return __arr[_Int]; }\n+\n+  template<int _Int, typename _Tp, std::size_t _Nm>\n+    const _Tp&\n+    get(const array<_Tp, _Nm>& __arr)\n+    { return __arr[_Int]; }\n } // namespace std::tr1\n }\n "}, {"sha": "cc08381341e2467f66996584c346dec0398c64e3", "filename": "libstdc++-v3/testsuite/tr1/6_containers/array/element_access/back.cc", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a2ab2c36d85271443c767da162785252670d30c/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Felement_access%2Fback.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a2ab2c36d85271443c767da162785252670d30c/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Felement_access%2Fback.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Felement_access%2Fback.cc?ref=5a2ab2c36d85271443c767da162785252670d30c", "patch": "@@ -0,0 +1,51 @@\n+// 2005-08-26  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 6.2.2 Class template array\n+\n+#include <tr1/array>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01() \n+{ \n+  bool test __attribute__((unused)) = true;\n+\n+  const size_t len = 5;\n+  typedef std::tr1::array<int, len> array_type;\n+  \n+  {\n+    array_type a = { 0, 1, 2, 3, 4 };\n+    int& ri = a.back();\n+    VERIFY( ri == 4 );\n+  }\n+\n+  {\n+    const array_type ca = { 4, 3, 2, 1, 0 };\n+    const int& cri = ca.back();\n+    VERIFY( cri == 0 );\n+  }\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "f6866dcc67000a9db015eb1328b702bf40e4d8cb", "filename": "libstdc++-v3/testsuite/tr1/6_containers/array/element_access/data.cc", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a2ab2c36d85271443c767da162785252670d30c/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Felement_access%2Fdata.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a2ab2c36d85271443c767da162785252670d30c/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Felement_access%2Fdata.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Felement_access%2Fdata.cc?ref=5a2ab2c36d85271443c767da162785252670d30c", "patch": "@@ -0,0 +1,51 @@\n+// 2005-08-26  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 6.2.2 Class template array\n+\n+#include <tr1/array>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01() \n+{ \n+  bool test __attribute__((unused)) = true;\n+\n+  const size_t len = 5;\n+  typedef std::tr1::array<int, len> array_type;\n+  \n+  {\n+    array_type a = { 0, 1, 2, 3, 4 };\n+    int* pi = a.data();\n+    VERIFY( *pi == 0 );\n+  }\n+\n+  {\n+    const array_type ca = { 4, 3, 2, 1, 0 };\n+    const int* pci = ca.data();\n+    VERIFY( *pci == 4 );\n+  }\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "33c93bef52f5a80b9b58c7be0caa24d30242e5f0", "filename": "libstdc++-v3/testsuite/tr1/6_containers/array/element_access/front.cc", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a2ab2c36d85271443c767da162785252670d30c/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Felement_access%2Ffront.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a2ab2c36d85271443c767da162785252670d30c/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Felement_access%2Ffront.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Felement_access%2Ffront.cc?ref=5a2ab2c36d85271443c767da162785252670d30c", "patch": "@@ -0,0 +1,51 @@\n+// 2005-08-26  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 6.2.2 Class template array\n+\n+#include <tr1/array>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01() \n+{ \n+  bool test __attribute__((unused)) = true;\n+\n+  const size_t len = 5;\n+  typedef std::tr1::array<int, len> array_type;\n+  \n+  {\n+    array_type a = { 0, 1, 2, 3, 4 };\n+    int& ri = a.front();\n+    VERIFY( ri == 0 );\n+  }\n+\n+  {\n+    const array_type ca = { 4, 3, 2, 1, 0 };\n+    const int& cri = ca.front();\n+    VERIFY( cri == 4 );\n+  }\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "b7463b389579e7c17aacf070ff6c841fac400faf", "filename": "libstdc++-v3/testsuite/tr1/6_containers/array/tuple_interface/get.cc", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a2ab2c36d85271443c767da162785252670d30c/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Ftuple_interface%2Fget.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a2ab2c36d85271443c767da162785252670d30c/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Ftuple_interface%2Fget.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Ftuple_interface%2Fget.cc?ref=5a2ab2c36d85271443c767da162785252670d30c", "patch": "@@ -0,0 +1,52 @@\n+// 2005-08-26  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 6.2.2 Class template array\n+\n+#include <tr1/array>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01() \n+{ \n+  bool test __attribute__((unused)) = true;\n+  using namespace std::tr1;\n+\n+  const size_t len = 5;\n+  typedef array<int, len> array_type;\n+\n+  {\n+    array_type a = { 0, 1, 2, 3, 4 };\n+    int& ri = get<0>(a);\n+    VERIFY( ri == 0 );\n+  }\n+\n+  {\n+    const array_type a = { 4, 3, 2, 1, 0 };\n+    const int& cri = get<1>(a);\n+    VERIFY( cri == 3 );\n+  }\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "6ffa7bb064f6f4b604d9b4e4cd48bde2089b4cc9", "filename": "libstdc++-v3/testsuite/tr1/6_containers/array/tuple_interface/tuple_element.cc", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a2ab2c36d85271443c767da162785252670d30c/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Ftuple_interface%2Ftuple_element.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a2ab2c36d85271443c767da162785252670d30c/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Ftuple_interface%2Ftuple_element.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Ftuple_interface%2Ftuple_element.cc?ref=5a2ab2c36d85271443c767da162785252670d30c", "patch": "@@ -0,0 +1,52 @@\n+// 2005-08-26  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 6.2.2 Class template array\n+\n+#include <tr1/array>\n+#include <tr1/type_traits>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01() \n+{ \n+  bool test __attribute__((unused)) = true;\n+  using namespace std::tr1;\n+\n+  {\n+    const size_t len = 3;\n+    typedef array<int, len> array_type;\n+    VERIFY( (is_same<tuple_element<0, array_type>::type, int>::value == true) );\n+    VERIFY( (is_same<tuple_element<1, array_type>::type, int>::value == true) );\n+    VERIFY( (is_same<tuple_element<2, array_type>::type, int>::value == true) );\n+  }\n+\n+  {\n+    const size_t len = 0;\n+    typedef array<int, len> array_type;\n+    VERIFY( (is_same<tuple_element<0, array_type>::type, int>::value == true) );\n+  }\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "3e6974f6aa4d940173fc48bbe3a15dec0a54f3b0", "filename": "libstdc++-v3/testsuite/tr1/6_containers/array/tuple_interface/tuple_size.cc", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a2ab2c36d85271443c767da162785252670d30c/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Ftuple_interface%2Ftuple_size.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a2ab2c36d85271443c767da162785252670d30c/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Ftuple_interface%2Ftuple_size.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Ftuple_interface%2Ftuple_size.cc?ref=5a2ab2c36d85271443c767da162785252670d30c", "patch": "@@ -0,0 +1,49 @@\n+// 2005-08-26  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 6.2.2 Class template array\n+\n+#include <tr1/array>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01() \n+{ \n+  bool test __attribute__((unused)) = true;\n+  using namespace std::tr1;\n+\n+  {\n+    const size_t len = 5;\n+    typedef array<int, len> array_type;\n+    VERIFY( tuple_size<array_type>::value == 5 );\n+  }\n+\n+  {\n+    const size_t len = 0;\n+    typedef array<float, len> array_type;\n+    VERIFY( tuple_size<array_type>::value == 0 );\n+  }\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}