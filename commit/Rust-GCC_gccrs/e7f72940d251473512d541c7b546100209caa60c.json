{"sha": "e7f72940d251473512d541c7b546100209caa60c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTdmNzI5NDBkMjUxNDczNTEyZDU0MWM3YjU0NjEwMDIwOWNhYTYwYw==", "commit": {"author": {"name": "Matt Austern", "email": "austern@google.com", "date": "2010-09-13T18:23:56Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-09-13T18:23:56Z"}, "message": "hash_bytes.cc: New file...\n\n2010-09-13  Matt Austern  <austern@google.com>\n\n\t* src/hash_bytes.cc: New file, exports _Hash_bytes (a Murmur hash),\n\tand _Fnv_hash_bytes (based on a FNV algorithm).\n\t* src/compatibility-c++0x.cc (hash<string>::operator(),\n\thash<const string&>::operator(), hash<wstring>::operator(),\n\thash<const wstring&>::operator(), hash<error_code>::operator()):\n\tAdjust, use _Hash_bytes.\n\t* include/std/system_error (hash<error_code>::operator()): Likewise.\n\t* include/std/thread (hash<thread::id>operator()): Likewise.\n\t* include/std/bitset (hash<bitset>operator()): Likewise.\n\t* include/bits/basic_string.h (hash<string>::operator(),\n\thash<wstring>::operator(), hash<u16string>::operator(),\n\thash<u32string>::operator()): Adjust.\n\t* include/bits/vector.tcc (hash<vector<bool>>::operator()): Adjust.\n\t* include/bits/functional_hash.h (_Hash_bytes, _Fnv_hash_bytes):\n\tDeclare.\n\t(struct _Hash_impl, struct _Fnv_hash_impl): Add, use _Hash_bytes\n\tand _Fnv_hash_bytes, respectively.\n\t(hash<float>::operator(), hash<double>::operator()): Adjust.\n\t* config/abi/pre/gnu.ver: Add exports.\n\t* src/Makefile.am: Add.\n\t* src/Makefile.in: Regenerate.\n\nFrom-SVN: r164253", "tree": {"sha": "3f3b9859209b496beacdf65286399d7462f58285", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3f3b9859209b496beacdf65286399d7462f58285"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e7f72940d251473512d541c7b546100209caa60c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7f72940d251473512d541c7b546100209caa60c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7f72940d251473512d541c7b546100209caa60c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7f72940d251473512d541c7b546100209caa60c/comments", "author": {"login": "austern", "id": 2576694, "node_id": "MDQ6VXNlcjI1NzY2OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2576694?v=4", "gravatar_id": "", "url": "https://api.github.com/users/austern", "html_url": "https://github.com/austern", "followers_url": "https://api.github.com/users/austern/followers", "following_url": "https://api.github.com/users/austern/following{/other_user}", "gists_url": "https://api.github.com/users/austern/gists{/gist_id}", "starred_url": "https://api.github.com/users/austern/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/austern/subscriptions", "organizations_url": "https://api.github.com/users/austern/orgs", "repos_url": "https://api.github.com/users/austern/repos", "events_url": "https://api.github.com/users/austern/events{/privacy}", "received_events_url": "https://api.github.com/users/austern/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2ea5ee06a9ab474d15c98f432cfdfeaf2503ff8f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ea5ee06a9ab474d15c98f432cfdfeaf2503ff8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ea5ee06a9ab474d15c98f432cfdfeaf2503ff8f"}], "stats": {"total": 411, "additions": 309, "deletions": 102}, "files": [{"sha": "179b1e6240fd1f01a16d25f1d326a7b2a9a61e3e", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7f72940d251473512d541c7b546100209caa60c/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7f72940d251473512d541c7b546100209caa60c/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e7f72940d251473512d541c7b546100209caa60c", "patch": "@@ -1,3 +1,27 @@\n+2010-09-13  Matt Austern  <austern@google.com>\n+\n+\t* src/hash_bytes.cc: New file, exports _Hash_bytes (a Murmur hash),\n+\tand _Fnv_hash_bytes (based on a FNV algorithm).\n+\t* src/compatibility-c++0x.cc (hash<string>::operator(),\n+\thash<const string&>::operator(), hash<wstring>::operator(),\n+\thash<const wstring&>::operator(), hash<error_code>::operator()):\n+\tAdjust, use _Hash_bytes.\n+\t* include/std/system_error (hash<error_code>::operator()): Likewise.\n+\t* include/std/thread (hash<thread::id>operator()): Likewise.\n+\t* include/std/bitset (hash<bitset>operator()): Likewise.\n+\t* include/bits/basic_string.h (hash<string>::operator(),\n+\thash<wstring>::operator(), hash<u16string>::operator(),\n+\thash<u32string>::operator()): Adjust.\n+\t* include/bits/vector.tcc (hash<vector<bool>>::operator()): Adjust.\n+\t* include/bits/functional_hash.h (_Hash_bytes, _Fnv_hash_bytes):\n+\tDeclare.\n+\t(struct _Hash_impl, struct _Fnv_hash_impl): Add, use _Hash_bytes\n+\tand _Fnv_hash_bytes, respectively.\n+\t(hash<float>::operator(), hash<double>::operator()): Adjust.\n+\t* config/abi/pre/gnu.ver: Add exports.\n+\t* src/Makefile.am: Add.\n+\t* src/Makefile.in: Regenerate.\n+\n 2010-09-13  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/bits/forward_list.h (forward_list<>::resize(size_type,"}, {"sha": "aff2593425e584c0392e6472837f880f873d8e9c", "filename": "libstdc++-v3/config/abi/pre/gnu.ver", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7f72940d251473512d541c7b546100209caa60c/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7f72940d251473512d541c7b546100209caa60c/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver?ref=e7f72940d251473512d541c7b546100209caa60c", "patch": "@@ -1178,6 +1178,12 @@ GLIBCXX_3.4.15 {\n     _ZNSbIwSt11char_traitsIwESaIwEE4backEv;\n     _ZNKSbIwSt11char_traitsIwESaIwEE4backEv;\n \n+    # Default function.\n+    _ZSt11_Hash_bytesPKv*;\n+\n+    # FNV hash.\n+    _ZSt15_Fnv_hash_bytesPKv*;\n+\n } GLIBCXX_3.4.14;\n \n # Symbols in the support library (libsupc++) have their own tag."}, {"sha": "2fb671721ab334ed62c5ba2a53eb20f11b8a4e80", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7f72940d251473512d541c7b546100209caa60c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7f72940d251473512d541c7b546100209caa60c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=e7f72940d251473512d541c7b546100209caa60c", "patch": "@@ -2929,7 +2929,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     {\n       size_t\n       operator()(const string& __s) const\n-      { return std::_Fnv_hash::hash(__s.data(), __s.length()); }\n+      { return std::_Hash_impl::hash(__s.data(), __s.length()); }\n     };\n \n #ifdef _GLIBCXX_USE_WCHAR_T\n@@ -2940,8 +2940,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     {\n       size_t\n       operator()(const wstring& __s) const\n-      { return std::_Fnv_hash::hash(__s.data(),\n-\t\t\t\t    __s.length() * sizeof(wchar_t)); }\n+      { return std::_Hash_impl::hash(__s.data(),\n+                                     __s.length() * sizeof(wchar_t)); }\n     };\n #endif\n #endif /* _GLIBCXX_COMPATIBILITY_CXX0X */\n@@ -2954,8 +2954,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     {\n       size_t\n       operator()(const u16string& __s) const\n-      { return std::_Fnv_hash::hash(__s.data(),\n-\t\t\t\t    __s.length() * sizeof(char16_t)); }\n+      { return std::_Hash_impl::hash(__s.data(),\n+                                     __s.length() * sizeof(char16_t)); }\n     };\n \n   /// std::hash specialization for u32string.\n@@ -2965,8 +2965,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     {\n       size_t\n       operator()(const u32string& __s) const\n-      { return std::_Fnv_hash::hash(__s.data(),\n-\t\t\t\t    __s.length() * sizeof(char32_t)); }\n+      { return std::_Hash_impl::hash(__s.data(),\n+                                     __s.length() * sizeof(char32_t)); }\n     };\n #endif\n "}, {"sha": "363968788924c74f81a00d6b3ef14e4104292094", "filename": "libstdc++-v3/include/bits/functional_hash.h", "status": "modified", "additions": 51, "deletions": 70, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7f72940d251473512d541c7b546100209caa60c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffunctional_hash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7f72940d251473512d541c7b546100209caa60c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffunctional_hash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffunctional_hash.h?ref=e7f72940d251473512d541c7b546100209caa60c", "patch": "@@ -116,82 +116,63 @@ namespace std\n \n #undef _Cxx_hashtable_define_trivial_hash\n \n-  // Fowler / Noll / Vo (FNV) Hash (type FNV-1a)\n-\n-  // Dummy generic implementation (for sizeof(size_t) != 4, 8).\n-  template<size_t>\n-    struct _Fnv_hash_base\n-    {\n-      template<typename _Tp>\n-        static size_t\n-        hash(const _Tp* __ptr, size_t __clength, size_t __hash = 0)\n-        {\n-\t  const char* __cptr = reinterpret_cast<const char*>(__ptr);\n-\t  for (; __clength; --__clength)\n-\t    __hash = (__hash * 131) + *__cptr++;\n-\t  return __hash;\n-\t}\n-    };\n-\n-  template<>\n-    struct _Fnv_hash_base<4>\n-    {\n-      template<typename _Tp>\n-        static size_t\n-        hash(const _Tp* __ptr, size_t __clength,\n-\t     size_t __hash = static_cast<size_t>(2166136261UL))\n-        {\n-\t  const char* __cptr = reinterpret_cast<const char*>(__ptr);\n-\t  for (; __clength; --__clength)\n-\t    {\n-\t      __hash ^= static_cast<size_t>(*__cptr++);\n-\t      __hash *= static_cast<size_t>(16777619UL);\n-\t    }\n-\t  return __hash;\n-\t}\n-    };\n-  \n-  template<>\n-    struct _Fnv_hash_base<8>\n-    {\n-      template<typename _Tp>\n-        static size_t\n-        hash(const _Tp* __ptr, size_t __clength,\n-\t     size_t __hash = static_cast<size_t>(14695981039346656037ULL))\n-        {\n-\t  const char* __cptr = reinterpret_cast<const char*>(__ptr);\n-\t  for (; __clength; --__clength)\n-\t    {\n-\t      __hash ^= static_cast<size_t>(*__cptr++);\n-\t      __hash *= static_cast<size_t>(1099511628211ULL);\n-\t    }\n-\t  return __hash;\n-\t}\n-    };\n-\n-    struct _Fnv_hash\n-    : public _Fnv_hash_base<sizeof(size_t)>\n-    {\n-      using _Fnv_hash_base<sizeof(size_t)>::hash;\n-\n-      template<typename _Tp>\n-        static size_t\n-        hash(const _Tp& __val)\n-        { return hash(&__val, sizeof(__val)); }\n-\n-      template<typename _Tp>\n-        static size_t\n-        __hash_combine(const _Tp& __val, size_t __hash)\n-        { return hash(&__val, sizeof(__val), __hash); }\n-    };\n+  // Hash function implementation for the nontrivial specialization.\n+  // All of them are based on a primitive that hashes a pointer to\n+  // a byte array. The actual hash algorithm is not guaranteed to\n+  // stay the same from release to release -- it may be updated or\n+  // tuned to improve hash quality or speed.\n+  size_t\n+  _Hash_bytes(const void* __ptr, size_t __len, size_t __seed);\n+\n+  // A similar hash primitive, using the FNV hash algorithm. This\n+  // algorithm is guaranteed to stay the same from release to release.\n+  // (although it might not produce the same values on different machines.)\n+  size_t\n+  _Fnv_hash_bytes(const void* __ptr, size_t __len, size_t __seed);\n+\n+  struct _Hash_impl\n+  {\n+    static size_t\n+    hash(const void* __ptr, size_t __clength,\n+\t size_t __seed = static_cast<size_t>(0xc70f6907UL))\n+    { return _Hash_bytes(__ptr, __clength, __seed); }\n+\n+    template<typename _Tp>\n+      static size_t\n+      hash(const _Tp& __val)\n+      { return hash(&__val, sizeof(__val)); }\n+\n+    template<typename _Tp>\n+      static size_t\n+      __hash_combine(const _Tp& __val, size_t __hash)\n+      { return hash(&__val, sizeof(__val), __hash); }\n+  };\n+\n+  struct _Fnv_hash_impl\n+  {\n+    static size_t\n+    hash(const void* __ptr, size_t __clength,\n+         size_t __seed = static_cast<size_t>(2166136261UL))\n+    { return _Fnv_hash_bytes(__ptr, __clength, __seed); }\n+\n+    template<typename _Tp>\n+      static size_t\n+      hash(const _Tp& __val)\n+      { return hash(&__val, sizeof(__val)); }\n+\n+    template<typename _Tp>\n+      static size_t\n+      __hash_combine(const _Tp& __val, size_t __hash)\n+      { return hash(&__val, sizeof(__val), __hash); }\n+  };\n \n   /// Specialization for float.\n   template<>\n     inline size_t\n     hash<float>::operator()(float __val) const\n     {\n       // 0 and -0 both hash to zero.\n-      return __val != 0.0f ? std::_Fnv_hash::hash(__val) : 0;\n+      return __val != 0.0f ? std::_Hash_impl::hash(__val) : 0;\n     }\n \n   /// Specialization for double.\n@@ -200,7 +181,7 @@ namespace std\n     hash<double>::operator()(double __val) const\n     {\n       // 0 and -0 both hash to zero.\n-      return __val != 0.0 ? std::_Fnv_hash::hash(__val) : 0;\n+      return __val != 0.0 ? std::_Hash_impl::hash(__val) : 0;\n     }\n \n   /// Specialization for long double."}, {"sha": "ffe4bb8e630588662a15f71a75f4b1a081daba87", "filename": "libstdc++-v3/include/bits/vector.tcc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7f72940d251473512d541c7b546100209caa60c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7f72940d251473512d541c7b546100209caa60c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc?ref=e7f72940d251473512d541c7b546100209caa60c", "patch": "@@ -748,7 +748,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       if (__words)\n \t{\n \t  const size_t __clength = __words * sizeof(_Bit_type);\n-\t  __hash = std::_Fnv_hash::hash(__b._M_impl._M_start._M_p, __clength);\n+\t  __hash = std::_Hash_impl::hash(__b._M_impl._M_start._M_p, __clength);\n \t}\n \n       const size_t __extrabits = __b.size() % _S_word_bit;\n@@ -760,9 +760,9 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t  const size_t __clength\n \t    = (__extrabits + __CHAR_BIT__ - 1) / __CHAR_BIT__;\n \t  if (__words)\n-\t    __hash = std::_Fnv_hash::hash(&__hiword, __clength, __hash);\n+\t    __hash = std::_Hash_impl::hash(&__hiword, __clength, __hash);\n \t  else\n-\t    __hash = std::_Fnv_hash::hash(&__hiword, __clength);\n+\t    __hash = std::_Hash_impl::hash(&__hiword, __clength);\n \t}\n \n       return __hash;"}, {"sha": "909ed770735cccfe554de1a6d43b8525821b7594", "filename": "libstdc++-v3/include/std/bitset", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7f72940d251473512d541c7b546100209caa60c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbitset", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7f72940d251473512d541c7b546100209caa60c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbitset", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbitset?ref=e7f72940d251473512d541c7b546100209caa60c", "patch": "@@ -1501,7 +1501,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       operator()(const _GLIBCXX_STD_D::bitset<_Nb>& __b) const\n       {\n \tconst size_t __clength = (_Nb + __CHAR_BIT__ - 1) / __CHAR_BIT__;\n-\treturn std::_Fnv_hash::hash(__b._M_getdata(), __clength);\n+\treturn std::_Hash_impl::hash(__b._M_getdata(), __clength);\n       }\n     };\n "}, {"sha": "e2242427e2e7298868afabc79902d08e61895d38", "filename": "libstdc++-v3/include/std/system_error", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7f72940d251473512d541c7b546100209caa60c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsystem_error", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7f72940d251473512d541c7b546100209caa60c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsystem_error", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsystem_error?ref=e7f72940d251473512d541c7b546100209caa60c", "patch": "@@ -355,8 +355,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       size_t\n       operator()(const error_code& __e) const\n       {\n-\tconst size_t __tmp = std::_Fnv_hash::hash(__e._M_value);\n-\treturn std::_Fnv_hash::__hash_combine(__e._M_cat, __tmp);\n+\tconst size_t __tmp = std::_Hash_impl::hash(__e._M_value);\n+\treturn std::_Hash_impl::__hash_combine(__e._M_cat, __tmp);\n       }\n     };\n \n@@ -367,4 +367,3 @@ _GLIBCXX_END_NAMESPACE\n #endif // __GXX_EXPERIMENTAL_CXX0X__\n \n #endif // _GLIBCXX_SYSTEM_ERROR\n-"}, {"sha": "38e9d45a46d8cb38e1094bd6f9cac89d67ea56ae", "filename": "libstdc++-v3/include/std/thread", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7f72940d251473512d541c7b546100209caa60c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7f72940d251473512d541c7b546100209caa60c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread?ref=e7f72940d251473512d541c7b546100209caa60c", "patch": "@@ -228,7 +228,7 @@ namespace std\n     {\n       size_t\n       operator()(const thread::id& __id) const\n-      { return std::_Fnv_hash::hash(__id._M_thread); }\n+      { return std::_Hash_impl::hash(__id._M_thread); }\n     };\n \n   template<class _CharT, class _Traits>"}, {"sha": "d5194c3366e6431c4140470620cc8e85fd248283", "filename": "libstdc++-v3/src/Makefile.am", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7f72940d251473512d541c7b546100209caa60c/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7f72940d251473512d541c7b546100209caa60c/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am?ref=e7f72940d251473512d541c7b546100209caa60c", "patch": "@@ -179,6 +179,7 @@ sources = \\\n \thash_tr1.cc \\\n \thashtable_c++0x.cc \\\n \thashtable_tr1.cc \\\n+\thash_bytes.cc \\\n \tios.cc \\\n \tios_failure.cc \\\n \tios_init.cc \\\n@@ -309,6 +310,11 @@ hashtable_c++0x.lo: hashtable_c++0x.cc\n hashtable_c++0x.o: hashtable_c++0x.cc\n \t$(CXXCOMPILE) -std=gnu++0x -c $<\n \n+hash_bytes.lo: hash_bytes.cc\n+\t$(LTCXXCOMPILE) -std=gnu++0x -c $<\n+hash_bytes.o: hash_bytes.cc\n+\t$(CXXCOMPILE) -std=gnu++0x -c $<\n+\n limits.lo: limits.cc\n \t$(LTCXXCOMPILE) -std=gnu++0x -c $<\n limits.o: limits.cc"}, {"sha": "92390975740d9028e6370e39a88e11f1030bc62c", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7f72940d251473512d541c7b546100209caa60c/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7f72940d251473512d541c7b546100209caa60c/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=e7f72940d251473512d541c7b546100209caa60c", "patch": "@@ -100,17 +100,18 @@ am__objects_5 = atomic.lo bitmap_allocator.lo pool_allocator.lo \\\n \tcompatibility-c++0x.lo compatibility-debug_list.lo \\\n \tcompatibility-list.lo complex_io.lo ctype.lo debug.lo \\\n \tfunctexcept.lo globals_io.lo hash_c++0x.lo hash_tr1.lo \\\n-\thashtable_c++0x.lo hashtable_tr1.lo ios.lo ios_failure.lo \\\n-\tios_init.lo ios_locale.lo limits.lo list.lo debug_list.lo \\\n-\tlocale.lo locale_init.lo locale_facets.lo localename.lo \\\n-\tmath_stubs_float.lo math_stubs_long_double.lo stdexcept.lo \\\n-\tstrstream.lo system_error.lo tree.lo allocator-inst.lo \\\n-\tconcept-inst.lo fstream-inst.lo ext-inst.lo ios-inst.lo \\\n-\tiostream-inst.lo istream-inst.lo istream.lo locale-inst.lo \\\n-\tmisc-inst.lo ostream-inst.lo sstream-inst.lo streambuf-inst.lo \\\n-\tstreambuf.lo string-inst.lo valarray-inst.lo wlocale-inst.lo \\\n-\twstring-inst.lo mutex.lo condition_variable.lo chrono.lo \\\n-\tthread.lo future.lo $(am__objects_1) $(am__objects_4)\n+\thashtable_c++0x.lo hashtable_tr1.lo hash_bytes.lo ios.lo \\\n+\tios_failure.lo ios_init.lo ios_locale.lo limits.lo list.lo \\\n+\tdebug_list.lo locale.lo locale_init.lo locale_facets.lo \\\n+\tlocalename.lo math_stubs_float.lo math_stubs_long_double.lo \\\n+\tstdexcept.lo strstream.lo system_error.lo tree.lo \\\n+\tallocator-inst.lo concept-inst.lo fstream-inst.lo ext-inst.lo \\\n+\tios-inst.lo iostream-inst.lo istream-inst.lo istream.lo \\\n+\tlocale-inst.lo misc-inst.lo ostream-inst.lo sstream-inst.lo \\\n+\tstreambuf-inst.lo streambuf.lo string-inst.lo valarray-inst.lo \\\n+\twlocale-inst.lo wstring-inst.lo mutex.lo condition_variable.lo \\\n+\tchrono.lo thread.lo future.lo $(am__objects_1) \\\n+\t$(am__objects_4)\n am_libstdc___la_OBJECTS = $(am__objects_5)\n libstdc___la_OBJECTS = $(am_libstdc___la_OBJECTS)\n DEFAULT_INCLUDES = -I.@am__isrc@ -I$(top_builddir)\n@@ -383,6 +384,7 @@ sources = \\\n \thash_tr1.cc \\\n \thashtable_c++0x.cc \\\n \thashtable_tr1.cc \\\n+\thash_bytes.cc \\\n \tios.cc \\\n \tios_failure.cc \\\n \tios_init.cc \\\n@@ -885,6 +887,11 @@ hashtable_c++0x.lo: hashtable_c++0x.cc\n hashtable_c++0x.o: hashtable_c++0x.cc\n \t$(CXXCOMPILE) -std=gnu++0x -c $<\n \n+hash_bytes.lo: hash_bytes.cc\n+\t$(LTCXXCOMPILE) -std=gnu++0x -c $<\n+hash_bytes.o: hash_bytes.cc\n+\t$(CXXCOMPILE) -std=gnu++0x -c $<\n+\n limits.lo: limits.cc\n \t$(LTCXXCOMPILE) -std=gnu++0x -c $<\n limits.o: limits.cc"}, {"sha": "4941b17a3fda5d762bab7e93490d542fa519e45e", "filename": "libstdc++-v3/src/compatibility-c++0x.cc", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7f72940d251473512d541c7b546100209caa60c/libstdc%2B%2B-v3%2Fsrc%2Fcompatibility-c%2B%2B0x.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7f72940d251473512d541c7b546100209caa60c/libstdc%2B%2B-v3%2Fsrc%2Fcompatibility-c%2B%2B0x.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fcompatibility-c%2B%2B0x.cc?ref=e7f72940d251473512d541c7b546100209caa60c", "patch": "@@ -54,31 +54,31 @@ namespace std\n   template<>\n     size_t\n     hash<string>::operator()(string __s) const\n-    { return _Fnv_hash::hash(__s.data(), __s.length()); }\n+    { return _Hash_impl::hash(__s.data(), __s.length()); }\n \n   template<>\n     size_t\n     hash<const string&>::operator()(const string& __s) const\n-    { return _Fnv_hash::hash(__s.data(), __s.length()); }\n+    { return _Hash_impl::hash(__s.data(), __s.length()); }\n \n #ifdef _GLIBCXX_USE_WCHAR_T\n   template<>\n     size_t\n     hash<wstring>::operator()(wstring __s) const\n-    { return _Fnv_hash::hash(__s.data(), __s.length() * sizeof(wchar_t)); }\n+    { return _Hash_impl::hash(__s.data(), __s.length() * sizeof(wchar_t)); }\n \n   template<>\n     size_t\n     hash<const wstring&>::operator()(const wstring& __s) const\n-    { return _Fnv_hash::hash(__s.data(), __s.length() * sizeof(wchar_t)); }\n+    { return _Hash_impl::hash(__s.data(), __s.length() * sizeof(wchar_t)); }\n #endif\n #endif\n \n   template<>\n     size_t\n     hash<error_code>::operator()(error_code __e) const\n     {\n-      const size_t __tmp = std::_Fnv_hash::hash(__e._M_value);\n-      return std::_Fnv_hash::__hash_combine(__e._M_cat, __tmp);\n+      const size_t __tmp = std::_Hash_impl::hash(__e._M_value);\n+      return std::_Hash_impl::__hash_combine(__e._M_cat, __tmp);\n     }\n }"}, {"sha": "5dfa1eec1d66e45d93ae665d27eee2d2f7206daf", "filename": "libstdc++-v3/src/hash_bytes.cc", "status": "added", "additions": 184, "deletions": 0, "changes": 184, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7f72940d251473512d541c7b546100209caa60c/libstdc%2B%2B-v3%2Fsrc%2Fhash_bytes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7f72940d251473512d541c7b546100209caa60c/libstdc%2B%2B-v3%2Fsrc%2Fhash_bytes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fhash_bytes.cc?ref=e7f72940d251473512d541c7b546100209caa60c", "patch": "@@ -0,0 +1,184 @@\n+// Definition of _Hash_bytes. -*- C++ -*-\n+\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+// This file defines Hash_bytes, a primitive used for defining hash\n+// functions. Based on public domain MurmurHashUnaligned2, by Austin\n+// Appleby.  http://murmurhash.googlepages.com/\n+\n+// This file also defines _Fnv_hash_bytes, another primitive with\n+// exactly the same interface but using a different hash algorithm,\n+// Fowler / Noll / Vo (FNV) Hash (type FNV-1a). The Murmur hash\n+// function apears to be better in both speed and hash quality, and\n+// FNV is provided primarily for backward compatibility.\n+\n+#include <cstring>\n+#include <bits/functional_hash.h>\n+\n+namespace\n+{\n+  inline std::size_t\n+  unaligned_load(const char* p)\n+  {\n+    std::size_t result;\n+    std::memcpy(&result, p, sizeof(result));\n+    return result;\n+  }\n+\n+  // Loads n bytes, where 1 <= n < 8.\n+  inline std::size_t\n+  load_bytes(const char* p, int n)\n+  {\n+    size_t result = 0;\n+    --n;\n+    do\n+      result = (result << 8) + static_cast<unsigned char>(p[n]);\n+    while (--n >= 0);\n+    return result;\n+  }\n+\n+  inline std::size_t\n+  shift_mix(std::size_t v)\n+  { return v ^ (v >> 47);}\n+}\n+\n+namespace std\n+{\n+#if __SIZEOF_SIZE_T__ == 4\n+\n+  // Implementation of Murmur hash for 32-bit size_t.\n+  size_t\n+  _Hash_bytes(const void* ptr, size_t len, size_t seed)\n+  {\n+    const size_t m = 0x5bd1e995;\n+    size_t hash = seed ^ len;\n+    const char* buf = static_cast<const char*>(ptr);\n+\n+    // Mix 4 bytes at a time into the hash.\n+    while(len >= 4)\n+      {\n+\tsize_t k = unaligned_load(buf);\n+\tk *= m;\n+\tk ^= k >> 24;\n+\tk *= m;\n+\thash *= m;\n+\thash ^= k;\n+\tbuf += 4;\n+\tlen -= 4;\n+      }\n+\n+    // Handle the last few bytes of the input array.\n+    switch(len)\n+      {\n+      case 3:\n+\thash ^= static_cast<unsigned char>(buf[2]) << 16;\n+      case 2:\n+\thash ^= static_cast<unsigned char>(buf[1]) << 8;\n+      case 1:\n+\thash ^= static_cast<unsigned char>(buf[0]);\n+        hash *= m;\n+      };\n+\n+    // Do a few final mixes of the hash.\n+    hash ^= hash >> 13;\n+    hash *= m;\n+    hash ^= hash >> 15;\n+    return hash;\n+  }\n+\n+  // Implementation of FNV hash for 32-bit size_t.\n+  size_t\n+  _Fnv_hash_bytes(const void* ptr, size_t len, size_t hash)\n+  {\n+    const char* cptr = static_cast<const char*>(ptr);\n+    for (; len; --len)\n+      {\n+\thash ^= static_cast<size_t>(*cptr++);\n+\thash *= static_cast<size_t>(16777619UL);\n+      }\n+    return hash;\n+  }\n+\n+#elif __SIZEOF_SIZE_T__ == 8\n+\n+  // Implementation of Murmur hash for 64-bit size_t.\n+  size_t\n+  _Hash_bytes(const void* ptr, size_t len, size_t seed)\n+  {\n+    static const size_t mul = (0xc6a4a793UL << 32UL) + 0x5bd1e995UL;\n+    const char* const buf = static_cast<const char*>(ptr);\n+\n+    // Remove the bytes not divisible by the sizeof(size_t).  This\n+    // allows the main loop to process the data as 64-bit integers.\n+    const int len_aligned = len & ~0x7;\n+    const char* const end = buf + len_aligned;\n+    size_t hash = seed ^ (len * mul);\n+    for (const char* p = buf; p != end; p += 8)\n+      {\n+\tconst size_t data = shift_mix(unaligned_load(p) * mul) * mul;\n+\thash ^= data;\n+\thash *= mul;\n+      }\n+    if ((len & 0x7) != 0)\n+      {\n+\tconst size_t data = load_bytes(end, len & 0x7);\n+\thash ^= data;\n+\thash *= mul;\n+      }\n+    hash = shift_mix(hash) * mul;\n+    hash = shift_mix(hash);\n+    return hash;\n+  }\n+\n+  // Implementation of FNV hash for 64-bit size_t.\n+  size_t\n+  _Fnv_hash_bytes(const void* ptr, size_t len, size_t hash)\n+  {\n+    const char* cptr = static_cast<const char*>(ptr);\n+    for (; len; --len)\n+      {\n+\thash ^= static_cast<size_t>(*cptr++);\n+\thash *= static_cast<size_t>(1099511628211ULL);\n+      }\n+    return hash;\n+  }\n+\n+#else\n+\n+  // Dummy hash implementation for unusual sizeof(size_t).\n+  size_t\n+  _Hash_bytes(const void* ptr, size_t len, size_t seed)\n+  {\n+    size_t hash = seed;\n+    const char* cptr = reinterpret_cast<const char*>(ptr);\n+    for (; clength; --clength)\n+      hash = (hash * 131) + *cptr++;\n+    return hash;\n+  }\n+\n+  size_t\n+  _Fnv_hash_bytes(const void* ptr, size_t len, size_t seed)\n+  { return _Hash_bytes(ptr, len, seed); }\n+\n+#endif /* __SIZEOF_SIZE_T__ */\n+}"}]}