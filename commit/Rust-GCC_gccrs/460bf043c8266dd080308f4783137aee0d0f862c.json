{"sha": "460bf043c8266dd080308f4783137aee0d0f862c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDYwYmYwNDNjODI2NmRkMDgwMzA4ZjQ3ODMxMzdhZWUwZDBmODYyYw==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2019-07-16T17:18:32Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2019-07-16T17:18:32Z"}, "message": "i386.md (*testdi_1): Match CCZmode for constants that might have the SImode sign bit set.\n\n\t* config/i386/i386.md (*testdi_1): Match CCZmode for\n\tconstants that might have the SImode sign bit set.\n\t(*testqi_1_maybe_si): Remove \"!\" constraint modifier.\n\tUse correct constraints for pentium pairing.\n\t(*test<mode>_1): Ditto.\n\nFrom-SVN: r273534", "tree": {"sha": "57dc801e82373eeaa7e80b6c8d52e8bbdb591469", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/57dc801e82373eeaa7e80b6c8d52e8bbdb591469"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/460bf043c8266dd080308f4783137aee0d0f862c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/460bf043c8266dd080308f4783137aee0d0f862c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/460bf043c8266dd080308f4783137aee0d0f862c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/460bf043c8266dd080308f4783137aee0d0f862c/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f615b74e95263a697cfe4c8e5f6909db7243d589", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f615b74e95263a697cfe4c8e5f6909db7243d589", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f615b74e95263a697cfe4c8e5f6909db7243d589"}], "stats": {"total": 53, "additions": 36, "deletions": 17}, "files": [{"sha": "851f04a8659c40bf40eceae56b6cccdde8e21d21", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/460bf043c8266dd080308f4783137aee0d0f862c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/460bf043c8266dd080308f4783137aee0d0f862c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=460bf043c8266dd080308f4783137aee0d0f862c", "patch": "@@ -1,3 +1,11 @@\n+2019-07-16  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (*testdi_1): Match CCZmode for\n+\tconstants that might have the SImode sign bit set.\n+\t(*testqi_1_maybe_si): Remove \"!\" constraint modifier.\n+\tUse correct constraints for pentium pairing.\n+\t(*test<mode>_1): Ditto.\n+\n 2019-07-16  Jeff Law  <law@redhat.com>\n \n \tPR rtl-optimization/91173\n@@ -6180,7 +6188,6 @@\n \t(*call_indirect_pcrel): New insn.\n \t(*call_value_indirect_pcrel): Likewise.\n \n-\n 2019-05-29  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/sse.md (*save_multiple<mode>): Rename from"}, {"sha": "eb32d7c1d2a5bb537cee44889f04a24af1b9d175", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 28, "deletions": 16, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/460bf043c8266dd080308f4783137aee0d0f862c/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/460bf043c8266dd080308f4783137aee0d0f862c/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=460bf043c8266dd080308f4783137aee0d0f862c", "patch": "@@ -8134,18 +8134,31 @@\n \n (define_expand \"testqi_ccz_1\"\n   [(set (reg:CCZ FLAGS_REG)\n-        (compare:CCZ (and:QI (match_operand:QI 0 \"nonimmediate_operand\")\n-\t\t\t     (match_operand:QI 1 \"nonmemory_operand\"))\n-\t\t (const_int 0)))])\n+\t(compare:CCZ\n+\t  (and:QI\n+\t    (match_operand:QI 0 \"nonimmediate_operand\")\n+\t    (match_operand:QI 1 \"nonmemory_operand\"))\n+\t  (const_int 0)))])\n \n (define_insn \"*testdi_1\"\n   [(set (reg FLAGS_REG)\n \t(compare\n-\t (and:DI\n-\t  (match_operand:DI 0 \"nonimmediate_operand\" \"%r,rm\")\n-\t  (match_operand:DI 1 \"x86_64_szext_nonmemory_operand\" \"Z,re\"))\n+\t  (and:DI\n+\t    (match_operand:DI 0 \"nonimmediate_operand\" \"%r,rm\")\n+\t    (match_operand:DI 1 \"x86_64_szext_nonmemory_operand\" \"Z,re\"))\n \t (const_int 0)))]\n-  \"TARGET_64BIT && ix86_match_ccmode (insn, CCNOmode)\"\n+  \"TARGET_64BIT\n+   && ix86_match_ccmode\n+\t(insn,\n+\t /* If we are going to emit testl instead of testq, and the operands[1]\n+\t    constant might have the SImode sign bit set, make sure the sign\n+\t    flag isn't tested, because the instruction will set the sign flag\n+\t    based on bit 31 rather than bit 63.  If it isn't CONST_INT,\n+\t    conservatively assume it might have bit 31 set.  */\n+\t (satisfies_constraint_Z (operands[1])\n+\t  && (!CONST_INT_P (operands[1])\n+\t      || val_signbit_known_set_p (SImode, INTVAL (operands[1]))))\n+\t ? CCZmode : CCNOmode)\"\n   \"@\n    test{l}\\t{%k1, %k0|%k0, %k1}\n    test{q}\\t{%1, %0|%0, %1}\"\n@@ -8154,12 +8167,11 @@\n \n (define_insn \"*testqi_1_maybe_si\"\n   [(set (reg FLAGS_REG)\n-        (compare\n+\t(compare\n \t  (and:QI\n-\t    (match_operand:QI 0 \"nonimmediate_operand\" \"%!*a,q,qm,r\")\n-\t    (match_operand:QI 1 \"nonmemory_operand\" \"n,n,qn,n\"))\n+\t    (match_operand:QI 0 \"nonimmediate_operand\" \"%qm,*a,qm,r\")\n+\t    (match_operand:QI 1 \"nonmemory_operand\" \"q,n,n,n\"))\n \t  (const_int 0)))]\n-\n   \"ix86_match_ccmode (insn,\n \t\t      CONST_INT_P (operands[1])\n \t\t      && INTVAL (operands[1]) >= 0 ? CCNOmode : CCZmode)\"\n@@ -8174,20 +8186,20 @@\n }\n   [(set_attr \"type\" \"test\")\n    (set_attr \"mode\" \"QI,QI,QI,SI\")\n-   (set_attr \"pent_pair\" \"uv,np,uv,np\")])\n+   (set_attr \"pent_pair\" \"uv,uv,np,np\")])\n \n (define_insn \"*test<mode>_1\"\n   [(set (reg FLAGS_REG)\n \t(compare\n-\t (and:SWI124\n-\t  (match_operand:SWI124 0 \"nonimmediate_operand\" \"%!*a,<r>,<r>m\")\n-\t  (match_operand:SWI124 1 \"<nonmemory_szext_operand>\" \"<i>,<i>,<r><i>\"))\n+\t  (and:SWI124\n+\t    (match_operand:SWI124 0 \"nonimmediate_operand\" \"%<r>m,*a,<r>m\")\n+\t    (match_operand:SWI124 1 \"<nonmemory_szext_operand>\" \"<r>,<i>,<i>\"))\n \t (const_int 0)))]\n   \"ix86_match_ccmode (insn, CCNOmode)\"\n   \"test{<imodesuffix>}\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"test\")\n    (set_attr \"mode\" \"<MODE>\")\n-   (set_attr \"pent_pair\" \"uv,np,uv\")])\n+   (set_attr \"pent_pair\" \"uv,uv,np\")])\n \n (define_expand \"testqi_ext_1_ccno\"\n   [(set (reg:CCNO FLAGS_REG)"}]}