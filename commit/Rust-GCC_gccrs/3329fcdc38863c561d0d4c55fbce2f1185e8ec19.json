{"sha": "3329fcdc38863c561d0d4c55fbce2f1185e8ec19", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzMyOWZjZGMzODg2M2M1NjFkMGQ0YzU1ZmJjZTJmMTE4NWU4ZWMxOQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2006-07-04T15:42:32Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2006-07-04T15:42:32Z"}, "message": "random (_Adaptor<>::operator()()): Cast 1 to result_type.\n\n2006-07-04  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/tr1/random (_Adaptor<>::operator()()): Cast 1 to\n\tresult_type.\n\t(variate_generator<>::operator()(),\n\tvariate_generator<>::operator()(_Tp)): Inline.\n\n\t* include/tr1/random: Minor cosmetic changes.\n\nFrom-SVN: r115179", "tree": {"sha": "371d8fe199cc09bdd3158aa86f64e01c2bd1d8d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/371d8fe199cc09bdd3158aa86f64e01c2bd1d8d6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3329fcdc38863c561d0d4c55fbce2f1185e8ec19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3329fcdc38863c561d0d4c55fbce2f1185e8ec19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3329fcdc38863c561d0d4c55fbce2f1185e8ec19", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3329fcdc38863c561d0d4c55fbce2f1185e8ec19/comments", "author": null, "committer": null, "parents": [{"sha": "8a71d22bdd2bc14145e72606ccd9dac1ef60fd6a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a71d22bdd2bc14145e72606ccd9dac1ef60fd6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a71d22bdd2bc14145e72606ccd9dac1ef60fd6a"}], "stats": {"total": 77, "additions": 36, "deletions": 41}, "files": [{"sha": "d5a6f03fa27d9b1e493d02e0a49587ddbd316200", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3329fcdc38863c561d0d4c55fbce2f1185e8ec19/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3329fcdc38863c561d0d4c55fbce2f1185e8ec19/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=3329fcdc38863c561d0d4c55fbce2f1185e8ec19", "patch": "@@ -1,3 +1,12 @@\n+2006-07-04  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/tr1/random (_Adaptor<>::operator()()): Cast 1 to\n+\tresult_type.\n+\t(variate_generator<>::operator()(),\n+\tvariate_generator<>::operator()(_Tp)): Inline.\n+\n+\t* include/tr1/random: Minor cosmetic changes.\n+\n 2006-07-03  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/ext/rc_string_base.h (__rc_string_base::_S_max_size):"}, {"sha": "5124ccb312c63ca77623484f282a8a2e1f8f3a31", "filename": "libstdc++-v3/include/tr1/random", "status": "modified", "additions": 27, "deletions": 41, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3329fcdc38863c561d0d4c55fbce2f1185e8ec19/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3329fcdc38863c561d0d4c55fbce2f1185e8ec19/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom?ref=3329fcdc38863c561d0d4c55fbce2f1185e8ec19", "patch": "@@ -80,21 +80,21 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n      * An adaptor class for converting the output of any Generator into\n      * the input for a specific Distribution.\n      */\n-    template<typename _Generator, typename _Distribution>\n+    template<typename _Engine, typename _Distribution>\n       struct _Adaptor\n       { \n-\ttypedef typename _Generator::result_type   generated_type;\n-\ttypedef typename _Distribution::input_type result_type;\n+\ttypedef typename _Engine::result_type        _Engine_result_type;\n+\ttypedef typename _Distribution::input_type   result_type;\n \n       public:\n-\t_Adaptor(const _Generator& __g)\n+\t_Adaptor(const _Engine& __g)\n \t: _M_g(__g) { }\n \n \tresult_type\n \toperator()();\n \n       private:\n-\t_Generator _M_g;\n+\t_Engine _M_g;\n       };\n \n     /*\n@@ -104,20 +104,20 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n      * Because the type traits are compile time constants only the appropriate\n      * clause of the if statements will actually be emitted by the compiler.\n      */\n-    template<typename _Generator, typename _Distribution>\n-      typename _Adaptor<_Generator, _Distribution>::result_type\n-      _Adaptor<_Generator, _Distribution>::\n+    template<typename _Engine, typename _Distribution>\n+      typename _Adaptor<_Engine, _Distribution>::result_type\n+      _Adaptor<_Engine, _Distribution>::\n       operator()()\n       {\n \tresult_type __return_value = 0;\n-\tif (is_integral<generated_type>::value\n+\tif (is_integral<_Engine_result_type>::value\n \t    && is_integral<result_type>::value)\n \t  __return_value = _M_g();\n-      \telse if (is_integral<generated_type>::value\n+      \telse if (is_integral<_Engine_result_type>::value\n \t\t && !is_integral<result_type>::value)\n \t  __return_value = result_type(_M_g())\n-\t    / result_type(_M_g.max() - _M_g.min() + 1);\n-\telse if (!is_integral<generated_type>::value\n+\t    / result_type(_M_g.max() - _M_g.min() + result_type(1));\n+\telse if (!is_integral<_Engine_result_type>::value\n \t\t && !is_integral<result_type>::value)\n \t  __return_value = result_type(_M_g())\n \t    / result_type(_M_g.max() - _M_g.min());\n@@ -142,17 +142,17 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n    *\n    * @todo the engine_value_type needs to be studied more carefully.\n    */\n-  template<typename _Generator, typename _Dist>\n+  template<typename _Engine, typename _Dist>\n     class variate_generator\n     {\n       // Concept requirements.\n-      __glibcxx_class_requires(_Generator, _CopyConstructibleConcept)\n-      //  __glibcxx_class_requires(_Generator, _GeneratorConcept)\n-      //  __glibcxx_class_requires(_Dist,      _GeneratorConcept)\n+      __glibcxx_class_requires(_Engine, _CopyConstructibleConcept)\n+      //  __glibcxx_class_requires(_Engine, _EngineConcept)\n+      //  __glibcxx_class_requires(_Dist, _EngineConcept)\n \n     public:\n-      typedef _Generator                             engine_type;\n-      typedef _Private::_Adaptor<_Generator, _Dist>  engine_value_type;\n+      typedef _Engine                                engine_type;\n+      typedef _Private::_Adaptor<_Engine, _Dist>     engine_value_type;\n       typedef _Dist                                  distribution_type;\n       typedef typename _Dist::result_type            result_type;\n \n@@ -167,7 +167,7 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n        * generator @p __eng for the random distribution @p __dist.\n        *\n        * @throws Any exceptions which may thrown by the copy constructors of\n-       * the @p _Generator or @p _Dist objects.\n+       * the @p _Engine or @p _Dist objects.\n        */\n       variate_generator(engine_type __eng, distribution_type __dist)\n       : _M_engine(__eng), _M_dist(__dist) { }\n@@ -176,11 +176,16 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n        * Gets the next generated value on the distribution.\n        */\n       result_type\n-      operator()();\n+      operator()()\n+      { return _M_dist(_M_engine); }\n \n+      /**\n+       * WTF?\n+       */\n       template<typename _Tp>\n         result_type\n-        operator()(_Tp __value);\n+        operator()(_Tp __value)\n+        { return _M_dist(_M_engine, __value); }\n \n       /**\n        * Gets a reference to the underlying uniform random number generator\n@@ -231,25 +236,6 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n       distribution_type _M_dist;\n     };\n \n-  /**\n-   * Gets the next random value on the given distribution.\n-   */\n-  template<typename _Generator, typename _Dist>\n-    typename variate_generator<_Generator, _Dist>::result_type\n-    variate_generator<_Generator, _Dist>::\n-    operator()()\n-    { return _M_dist(_M_engine); }\n-\n-  /**\n-   * WTF?\n-   */\n-  template<typename _Generator, typename _Dist>\n-    template<typename _Tp>\n-      typename variate_generator<_Generator, _Dist>::result_type\n-      variate_generator<_Generator, _Dist>::\n-      operator()(_Tp __value)\n-      { return _M_dist(_M_engine, __value); }\n-\n \n   /**\n    * @addtogroup tr1_random_generators Random Number Generators\n@@ -522,7 +508,7 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n \n     public:\n       // types\n-      typedef _UIntType result_type ;\n+      typedef _UIntType result_type;\n \n       // parameter values\n       static const int       word_size   = __w;"}]}