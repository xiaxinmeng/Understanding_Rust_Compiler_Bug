{"sha": "9d3172516df99d45ccd381ee644d1b0618a2ea15", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWQzMTcyNTE2ZGY5OWQ0NWNjZDM4MWVlNjQ0ZDFiMDYxOGEyZWExNQ==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2004-04-05T03:14:13Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2004-04-05T03:14:13Z"}, "message": "simplify-rtx.c (simplify_binary_operation): Constant fold DIV, MOD, UDIV and UMOD using div_and_round_double.\n\n\n\t* simplify-rtx.c (simplify_binary_operation): Constant fold\n\tDIV, MOD, UDIV and UMOD using div_and_round_double.\n\nFrom-SVN: r80420", "tree": {"sha": "e39b0fe41342b831b29e892e79e7c00796c0a51a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e39b0fe41342b831b29e892e79e7c00796c0a51a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9d3172516df99d45ccd381ee644d1b0618a2ea15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d3172516df99d45ccd381ee644d1b0618a2ea15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d3172516df99d45ccd381ee644d1b0618a2ea15", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d3172516df99d45ccd381ee644d1b0618a2ea15/comments", "author": null, "committer": null, "parents": [{"sha": "e1c6f28deb5a8f567170f65f751c0a4e046d84e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1c6f28deb5a8f567170f65f751c0a4e046d84e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1c6f28deb5a8f567170f65f751c0a4e046d84e8"}], "stats": {"total": 36, "additions": 30, "deletions": 6}, "files": [{"sha": "74005c47623f6d989b183d7c56202a988cdf7a92", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d3172516df99d45ccd381ee644d1b0618a2ea15/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d3172516df99d45ccd381ee644d1b0618a2ea15/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9d3172516df99d45ccd381ee644d1b0618a2ea15", "patch": "@@ -1,3 +1,8 @@\n+2004-04-04  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* simplify-rtx.c (simplify_binary_operation): Constant fold\n+\tDIV, MOD, UDIV and UMOD using div_and_round_double.\n+\n 2004-04-04  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/14804"}, {"sha": "0d283cd250569b644b36060de73139801c765975", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 25, "deletions": 6, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d3172516df99d45ccd381ee644d1b0618a2ea15/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d3172516df99d45ccd381ee644d1b0618a2ea15/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=9d3172516df99d45ccd381ee644d1b0618a2ea15", "patch": "@@ -1285,8 +1285,8 @@ simplify_binary_operation (enum rtx_code code, enum machine_mode mode,\n       && (GET_CODE (trueop1) == CONST_DOUBLE\n \t  || GET_CODE (trueop1) == CONST_INT))\n     {\n-      unsigned HOST_WIDE_INT l1, l2, lv;\n-      HOST_WIDE_INT h1, h2, hv;\n+      unsigned HOST_WIDE_INT l1, l2, lv, lt;\n+      HOST_WIDE_INT h1, h2, hv, ht;\n \n       if (GET_CODE (trueop0) == CONST_DOUBLE)\n \tl1 = CONST_DOUBLE_LOW (trueop0), h1 = CONST_DOUBLE_HIGH (trueop0);\n@@ -1315,10 +1315,29 @@ simplify_binary_operation (enum rtx_code code, enum machine_mode mode,\n \t  mul_double (l1, h1, l2, h2, &lv, &hv);\n \t  break;\n \n-\tcase DIV:  case MOD:   case UDIV:  case UMOD:\n-\t  /* We'd need to include tree.h to do this and it doesn't seem worth\n-\t     it.  */\n-\t  return 0;\n+\tcase DIV:\n+\t  if (div_and_round_double (TRUNC_DIV_EXPR, 0, l1, h1, l2, h2,\n+\t\t\t\t    &lv, &hv, &lt, &ht))\n+\t    return 0;\n+\t  break;\n+\n+\tcase MOD:\n+\t  if (div_and_round_double (TRUNC_DIV_EXPR, 0, l1, h1, l2, h2,\n+\t\t\t\t    &lt, &ht, &lv, &hv))\n+\t    return 0;\n+\t  break;\n+\n+\tcase UDIV:\n+\t  if (div_and_round_double (TRUNC_DIV_EXPR, 1, l1, h1, l2, h2,\n+\t\t\t\t    &lv, &hv, &lt, &ht))\n+\t    return 0;\n+\t  break;\n+\n+\tcase UMOD:\n+\t  if (div_and_round_double (TRUNC_DIV_EXPR, 1, l1, h1, l2, h2,\n+\t\t\t\t    &lt, &ht, &lv, &hv))\n+\t    return 0;\n+\t  break;\n \n \tcase AND:\n \t  lv = l1 & l2, hv = h1 & h2;"}]}