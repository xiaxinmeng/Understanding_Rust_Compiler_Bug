{"sha": "26edace69b6b909eebddcf18c8844bb4c94d9a35", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjZlZGFjZTY5YjZiOTA5ZWViZGRjZjE4Yzg4NDRiYjRjOTRkOWEzNQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2017-11-21T00:50:39Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2017-11-21T00:50:39Z"}, "message": "C/C++: more stdlib header hints (PR c/81404)\n\nThis patch extends the C frontend's \"knowledge\" of the C stdlib within\nget_c_name_hint to cover some more macros and functions, covering\na case reported in PR c/81404 (\"INT_MAX\"), so that rather than printing:\n\n  t.c:5:12: error: 'INT_MAX' undeclared here (not in a function); did you mean '__INT_MAX__'?\n   int test = INT_MAX;\n              ^~~~~~~\n              __INT_MAX__\n\nwe instead print:\n\n  t.c:5:12: error: 'INT_MAX' undeclared here (not in a function)\n   int test = INT_MAX;\n              ^~~~~~~\n  t.c:5:12: note: 'INT_MAX' is defined in header '<limits.h>'; did you forget to '#include <limits.h>'?\n  t.c:1:1:\n  +#include <limits.h>\n\n  t.c:5:12:\n    int test = INT_MAX;\n               ^~~~~~~\n\nIt also adds generalizes some of the code for this (and for the \"std::\"\nnamespace hints in the C++ frontend), moving it to a new\nc-family/known-headers.cc and .h, and introducing a class known_headers.\nThis currently just works by scanning a hardcoded array of known\nname/header associations, but perhaps in the future could be turned\ninto some kind of symbol database so that the compiler could record API\nuses and use that to offer suggestions e.g.\n\nfoo.cc: error: 'myapi::foo' was not declared in this scope\nfoo.cc: note: 'myapi::foo\" was declared in header 'myapi/private.h'\n(included via 'myapi/public.h') when compiling 'bar.cc'; did you forget to\n'#include \"myapi/public.h\"'?\n\nor somesuch.\n\nIn any case, moving this to a class gives an easier way to locate the\nhardcoded knowledge about the stdlib.\n\nThe patch also adds similar code to the C++ frontend covering\nunqualified names in the standard library, so that rather than just\ne.g.:\n\n  t.cc:19:13: error: 'NULL' was not declared in this scope\n   void *ptr = NULL;\n               ^~~~\n\nwe can emit:\n\n  t.cc:19:13: error: 'NULL' was not declared in this scope\n   void *ptr = NULL;\n               ^~~~\n  t.cc:19:13: note: 'NULL' is defined in header '<cstddef>'; did you forget\n  to '#include <cstddef>'?\n  t.cc:1:1:\n  +#include <cstddef>\n\n  t.cc:19:13:\n   void *ptr = NULL;\n               ^~~~\n\n(Also XFAIL for PR c++/80567 added for the C++ testcase; this is a\nseparate pre-existing bug exposed by the testcase for PR 81404).\n\ngcc/ChangeLog:\n\tPR c/81404\n\t* Makefile.in (C_COMMON_OBJS): Add c-family/known-headers.o.\n\ngcc/c-family/ChangeLog:\n\tPR c/81404\n\t* known-headers.cc: New file, based on material from c/c-decl.c.\n\t(suggest_missing_header): Copied as-is.\n\t(get_stdlib_header_for_name): New, based on get_c_name_hint but\n\theavily edited to add C++ support.  Add some knowledge about\n\t<limits.h>, <stdint.h>, and <wchar.h>.\n\t* known-headers.h: Likewise.\n\ngcc/c/ChangeLog:\n\tPR c/81404\n\t* c-decl.c: Include \"c-family/known-headers.h\".\n\t(get_c_name_hint): Rename to get_stdlib_header_for_name and move\n\tto known-headers.cc.\n\t(class suggest_missing_header): Move to known-header.h.\n\t(lookup_name_fuzzy): Call get_c_stdlib_header_for_name rather\n\tthan get_c_name_hint.\n\ngcc/cp/ChangeLog:\n\tPR c/81404\n\t* name-lookup.c: Include \"c-family/known-headers.h\"\n\t(lookup_name_fuzzy): Call get_cp_stdlib_header_for_name and\n\tpotentially return a new suggest_missing_header hint.\n\ngcc/testsuite/ChangeLog:\n\tPR c/81404\n\t* g++.dg/spellcheck-stdlib.C: New.\n\t* gcc.dg/spellcheck-stdlib.c (test_INT_MAX): New.\n\nFrom-SVN: r254980", "tree": {"sha": "c414ee9be1fe6e6f9cd8b371e22e609482196e19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c414ee9be1fe6e6f9cd8b371e22e609482196e19"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/26edace69b6b909eebddcf18c8844bb4c94d9a35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26edace69b6b909eebddcf18c8844bb4c94d9a35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26edace69b6b909eebddcf18c8844bb4c94d9a35", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26edace69b6b909eebddcf18c8844bb4c94d9a35/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b1212255558f0a4a398c7314f92effe4dbdcfec2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1212255558f0a4a398c7314f92effe4dbdcfec2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1212255558f0a4a398c7314f92effe4dbdcfec2"}], "stats": {"total": 436, "additions": 357, "deletions": 79}, "files": [{"sha": "1f8417911915e792edcbdf04afe50ab9f487c6e5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26edace69b6b909eebddcf18c8844bb4c94d9a35/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26edace69b6b909eebddcf18c8844bb4c94d9a35/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=26edace69b6b909eebddcf18c8844bb4c94d9a35", "patch": "@@ -1,3 +1,8 @@\n+2017-11-20  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c/81404\n+\t* Makefile.in (C_COMMON_OBJS): Add c-family/known-headers.o.\n+\n 2017-11-20  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR c++/72786"}, {"sha": "f2a897c5962396f51bbfe6b23e3c3861644e3f4c", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26edace69b6b909eebddcf18c8844bb4c94d9a35/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26edace69b6b909eebddcf18c8844bb4c94d9a35/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=26edace69b6b909eebddcf18c8844bb4c94d9a35", "patch": "@@ -1191,7 +1191,7 @@ C_COMMON_OBJS = c-family/c-common.o c-family/c-cppbuiltin.o c-family/c-dump.o \\\n   c-family/c-semantics.o c-family/c-ada-spec.o \\\n   c-family/c-cilkplus.o \\\n   c-family/array-notation-common.o c-family/cilk.o c-family/c-ubsan.o \\\n-  c-family/c-attribs.o c-family/c-warn.o\n+  c-family/c-attribs.o c-family/c-warn.o c-family/known-headers.o\n \n # Language-independent object files.\n # We put the *-match.o and insn-*.o files first so that a parallel make"}, {"sha": "1e5c3d3e18722383bd52404a063eac283ecaf8b2", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26edace69b6b909eebddcf18c8844bb4c94d9a35/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26edace69b6b909eebddcf18c8844bb4c94d9a35/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=26edace69b6b909eebddcf18c8844bb4c94d9a35", "patch": "@@ -1,3 +1,13 @@\n+2017-11-20  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c/81404\n+\t* known-headers.cc: New file, based on material from c/c-decl.c.\n+\t(suggest_missing_header): Copied as-is.\n+\t(get_stdlib_header_for_name): New, based on get_c_name_hint but\n+\theavily edited to add C++ support.  Add some knowledge about\n+\t<limits.h>, <stdint.h>, and <wchar.h>.\n+\t* known-headers.h: Likewise.\n+\n 2017-11-20  David Malcolm  <dmalcolm@redhat.com>\n \n \t* c-common.h (enum lookup_name_fuzzy_kind): Move to name-hint.h."}, {"sha": "d4cd39b1063179ed1889d81ee67620927103d0b7", "filename": "gcc/c-family/known-headers.cc", "status": "added", "additions": 169, "deletions": 0, "changes": 169, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26edace69b6b909eebddcf18c8844bb4c94d9a35/gcc%2Fc-family%2Fknown-headers.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26edace69b6b909eebddcf18c8844bb4c94d9a35/gcc%2Fc-family%2Fknown-headers.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fknown-headers.cc?ref=26edace69b6b909eebddcf18c8844bb4c94d9a35", "patch": "@@ -0,0 +1,169 @@\n+/* Support for suggestions about missing #include directives.\n+   Copyright (C) 2017 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#define INCLUDE_UNIQUE_PTR\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"c-family/c-common.h\"\n+#include \"c-family/name-hint.h\"\n+#include \"c-family/known-headers.h\"\n+#include \"gcc-rich-location.h\"\n+\n+/* An enum for distinguishing between the C and C++ stdlibs.  */\n+\n+enum stdlib\n+{\n+  STDLIB_C,\n+  STDLIB_CPLUSPLUS,\n+\n+  NUM_STDLIBS\n+};\n+\n+/* A struct for associating names in a standard library with the header\n+   that should be included to locate them, for each of the C and C++ stdlibs\n+   (or NULL, for names that aren't in a header for a particular stdlib).  */\n+\n+struct stdlib_hint\n+{\n+  const char *name;\n+  const char *header[NUM_STDLIBS];\n+};\n+\n+/* Given non-NULL NAME, return the header name defining it within either\n+   the standard library (with '<' and '>'), or NULL.\n+   Only handles a subset of the most common names within the stdlibs.  */\n+\n+static const char *\n+get_stdlib_header_for_name (const char *name, enum stdlib lib)\n+{\n+  gcc_assert (name);\n+  gcc_assert (lib < NUM_STDLIBS);\n+\n+  static const stdlib_hint hints[] = {\n+    /* <errno.h> and <cerrno>.  */\n+    {\"errno\", {\"<errno.h>\", \"<cerrno>\"} },\n+\n+    /* <limits.h> and <climits>.  */\n+    {\"CHAR_BIT\", {\"<limits.h>\", \"<climits>\"} },\n+    {\"CHAR_MAX\", {\"<limits.h>\", \"<climits>\"} },\n+    {\"CHAR_MIN\", {\"<limits.h>\", \"<climits>\"} },\n+    {\"INT_MAX\", {\"<limits.h>\", \"<climits>\"} },\n+    {\"INT_MIN\", {\"<limits.h>\", \"<climits>\"} },\n+    {\"LLONG_MAX\", {\"<limits.h>\", \"<climits>\"} },\n+    {\"LLONG_MIN\", {\"<limits.h>\", \"<climits>\"} },\n+    {\"LONG_MAX\", {\"<limits.h>\", \"<climits>\"} },\n+    {\"LONG_MIN\", {\"<limits.h>\", \"<climits>\"} },\n+    {\"MB_LEN_MAX\", {\"<limits.h>\", \"<climits>\"} },\n+    {\"SCHAR_MAX\", {\"<limits.h>\", \"<climits>\"} },\n+    {\"SCHAR_MIN\", {\"<limits.h>\", \"<climits>\"} },\n+    {\"SHRT_MAX\", {\"<limits.h>\", \"<climits>\"} },\n+    {\"SHRT_MIN\", {\"<limits.h>\", \"<climits>\"} },\n+    {\"UCHAR_MAX\", {\"<limits.h>\", \"<climits>\"} },\n+    {\"UINT_MAX\", {\"<limits.h>\", \"<climits>\"} },\n+    {\"ULLONG_MAX\", {\"<limits.h>\", \"<climits>\"} },\n+    {\"ULONG_MAX\", {\"<limits.h>\", \"<climits>\"} },\n+    {\"USHRT_MAX\", {\"<limits.h>\", \"<climits>\"} },\n+\n+    /* <stdarg.h> and <cstdarg>.  */\n+    {\"va_list\", {\"<stdarg.h>\", \"<cstdarg>\"} },\n+\n+    /* <stddef.h> and <cstddef>.  */\n+    {\"NULL\", {\"<stddef.h>\", \"<cstddef>\"} },\n+    {\"nullptr_t\", {NULL, \"<cstddef>\"} },\n+    {\"offsetof\", {\"<stddef.h>\", \"<cstddef>\"} },\n+    {\"ptrdiff_t\", {\"<stddef.h>\", \"<cstddef>\"} },\n+    {\"size_t\", {\"<stddef.h>\", \"<cstddef>\"} },\n+    {\"wchar_t\", {\"<stddef.h>\", NULL /* a keyword in C++ */} },\n+\n+    /* <stdio.h>.  */\n+    {\"BUFSIZ\", {\"<stdio.h>\", \"<cstdio>\"} },\n+    {\"EOF\", {\"<stdio.h>\", \"<cstdio>\"} },\n+    {\"FILE\", {\"<stdio.h>\", \"<cstdio>\"} },\n+    {\"FILENAME_MAX\", {\"<stdio.h>\", \"<cstdio>\"} },\n+    {\"fpos_t\", {\"<stdio.h>\", \"<cstdio>\"} },\n+    {\"stderr\", {\"<stdio.h>\", \"<cstdio>\"} },\n+    {\"stdin\", {\"<stdio.h>\", \"<cstdio>\"} },\n+    {\"stdout\", {\"<stdio.h>\", \"<cstdio>\"} },\n+\n+    /* <stdint.h>.  */\n+    {\"PTRDIFF_MAX\", {\"<stdint.h>\", \"<cstdint>\"} },\n+    {\"PTRDIFF_MIN\", {\"<stdint.h>\", \"<cstdint>\"} },\n+    {\"SIG_ATOMIC_MAX\", {\"<stdint.h>\", \"<cstdint>\"} },\n+    {\"SIG_ATOMIC_MIN\", {\"<stdint.h>\", \"<cstdint>\"} },\n+    {\"SIZE_MAX\", {\"<stdint.h>\", \"<cstdint>\"} },\n+    {\"WINT_MAX\", {\"<stdint.h>\", \"<cstdint>\"} },\n+    {\"WINT_MIN\", {\"<stdint.h>\", \"<cstdint>\"} },\n+\n+    /* <wchar.h>.  */\n+    {\"WCHAR_MAX\", {\"<wchar.h>\", \"<cwchar>\"} },\n+    {\"WCHAR_MIN\", {\"<wchar.h>\", \"<cwchar>\"} }\n+  };\n+  const size_t num_hints = sizeof (hints) / sizeof (hints[0]);\n+  for (size_t i = 0; i < num_hints; i++)\n+    if (0 == strcmp (name, hints[i].name))\n+      return hints[i].header[lib];\n+  return NULL;\n+}\n+\n+/* Given non-NULL NAME, return the header name defining it within the C\n+   standard library (with '<' and '>'), or NULL.  */\n+\n+const char *\n+get_c_stdlib_header_for_name (const char *name)\n+{\n+  return get_stdlib_header_for_name (name, STDLIB_C);\n+}\n+\n+/* Given non-NULL NAME, return the header name defining it within the C++\n+   standard library (with '<' and '>'), or NULL.  */\n+\n+const char *\n+get_cp_stdlib_header_for_name (const char *name)\n+{\n+  return get_stdlib_header_for_name (name, STDLIB_CPLUSPLUS);\n+}\n+\n+/* Implementation of class suggest_missing_header.  */\n+\n+/* suggest_missing_header's ctor.  */\n+\n+suggest_missing_header::suggest_missing_header (location_t loc,\n+\t\t\t\t\t\tconst char *name,\n+\t\t\t\t\t\tconst char *header_hint)\n+: deferred_diagnostic (loc), m_name_str (name), m_header_hint (header_hint)\n+{\n+  gcc_assert (name);\n+  gcc_assert (header_hint);\n+}\n+\n+/* suggest_missing_header's dtor.  */\n+\n+suggest_missing_header::~suggest_missing_header ()\n+{\n+  if (is_suppressed_p ())\n+    return;\n+\n+  gcc_rich_location richloc (get_location ());\n+  maybe_add_include_fixit (&richloc, m_header_hint);\n+  inform (&richloc,\n+\t  \"%qs is defined in header %qs;\"\n+\t  \" did you forget to %<#include %s%>?\",\n+\t  m_name_str, m_header_hint, m_header_hint);\n+}"}, {"sha": "328100f40409285d3dcdd97a9f1d83ab8a7cb7a8", "filename": "gcc/c-family/known-headers.h", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26edace69b6b909eebddcf18c8844bb4c94d9a35/gcc%2Fc-family%2Fknown-headers.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26edace69b6b909eebddcf18c8844bb4c94d9a35/gcc%2Fc-family%2Fknown-headers.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fknown-headers.h?ref=26edace69b6b909eebddcf18c8844bb4c94d9a35", "patch": "@@ -0,0 +1,41 @@\n+/* Support for suggestions about missing #include directives.\n+   Copyright (C) 2017 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#ifndef GCC_KNOWN_HEADERS_H\n+#define GCC_KNOWN_HEADERS_H\n+\n+extern const char *get_c_stdlib_header_for_name (const char *name);\n+extern const char *get_cp_stdlib_header_for_name (const char *name);\n+\n+/* Subclass of deferred_diagnostic for suggesting to the user\n+   that they have missed a #include.  */\n+\n+class suggest_missing_header : public deferred_diagnostic\n+{\n+ public:\n+  suggest_missing_header (location_t loc, const char *name,\n+\t\t\t  const char *header_hint);\n+  ~suggest_missing_header ();\n+\n+ private:\n+  const char *m_name_str;\n+  const char *m_header_hint;\n+};\n+\n+#endif /* GCC_KNOWN_HEADERS_H */"}, {"sha": "95b7718791aacdc7242587a758bfece48ae492d0", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26edace69b6b909eebddcf18c8844bb4c94d9a35/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26edace69b6b909eebddcf18c8844bb4c94d9a35/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=26edace69b6b909eebddcf18c8844bb4c94d9a35", "patch": "@@ -1,3 +1,13 @@\n+2017-11-20  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c/81404\n+\t* c-decl.c: Include \"c-family/known-headers.h\".\n+\t(get_c_name_hint): Rename to get_stdlib_header_for_name and move\n+\tto known-headers.cc.\n+\t(class suggest_missing_header): Move to known-header.h.\n+\t(lookup_name_fuzzy): Call get_c_stdlib_header_for_name rather\n+\tthan get_c_name_hint.\n+\n 2017-11-20  David Malcolm  <dmalcolm@redhat.com>\n \n \t* c-decl.c (get_c_name_hint): New function."}, {"sha": "e0a4dd1661af815061cd3d68a19eada1945f8367", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 4, "deletions": 78, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26edace69b6b909eebddcf18c8844bb4c94d9a35/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26edace69b6b909eebddcf18c8844bb4c94d9a35/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=26edace69b6b909eebddcf18c8844bb4c94d9a35", "patch": "@@ -56,6 +56,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gcc-rich-location.h\"\n #include \"asan.h\"\n #include \"c-family/name-hint.h\"\n+#include \"c-family/known-headers.h\"\n \n /* In grokdeclarator, distinguish syntactic contexts of declarators.  */\n enum decl_context\n@@ -3992,83 +3993,6 @@ lookup_name_in_scope (tree name, struct c_scope *scope)\n   return NULL_TREE;\n }\n \n-/* Subroutine of lookup_name_fuzzy for handling unrecognized names\n-   for some of the most common names within the C standard library.\n-   Given non-NULL NAME, return the header name defining it within the C\n-   standard library (with '<' and '>'), or NULL.  */\n-\n-static const char *\n-get_c_name_hint (const char *name)\n-{\n-  struct std_name_hint\n-  {\n-    const char *name;\n-    const char *header;\n-  };\n-  static const std_name_hint hints[] = {\n-    /* <errno.h>.  */\n-    {\"errno\", \"<errno.h>\"},\n-\n-    /* <stdarg.h>.  */\n-    {\"va_list\", \"<stdarg.h>\"},\n-\n-    /* <stddef.h>.  */\n-    {\"NULL\", \"<stddef.h>\"},\n-    {\"ptrdiff_t\", \"<stddef.h>\"},\n-    {\"wchar_t\", \"<stddef.h>\"},\n-    {\"size_t\", \"<stddef.h>\"},\n-\n-    /* <stdio.h>.  */\n-    {\"BUFSIZ\", \"<stdio.h>\"},\n-    {\"EOF\", \"<stdio.h>\"},\n-    {\"FILE\", \"<stdio.h>\"},\n-    {\"FILENAME_MAX\", \"<stdio.h>\"},\n-    {\"fpos_t\", \"<stdio.h>\"},\n-    {\"stderr\", \"<stdio.h>\"},\n-    {\"stdin\", \"<stdio.h>\"},\n-    {\"stdout\", \"<stdio.h>\"}\n-  };\n-  const size_t num_hints = sizeof (hints) / sizeof (hints[0]);\n-  for (size_t i = 0; i < num_hints; i++)\n-    {\n-      if (0 == strcmp (name, hints[i].name))\n-\treturn hints[i].header;\n-    }\n-  return NULL;\n-}\n-\n-/* Subclass of deferred_diagnostic for suggesting to the user\n-   that they have missed a #include.  */\n-\n-class suggest_missing_header : public deferred_diagnostic\n-{\n- public:\n-  suggest_missing_header (location_t loc, const char *name,\n-\t\t\t  const char *header_hint)\n-  : deferred_diagnostic (loc), m_name_str (name), m_header_hint (header_hint)\n-  {\n-    gcc_assert (name);\n-    gcc_assert (header_hint);\n-  }\n-\n-  ~suggest_missing_header ()\n-  {\n-    if (is_suppressed_p ())\n-      return;\n-\n-    gcc_rich_location richloc (get_location ());\n-    maybe_add_include_fixit (&richloc, m_header_hint);\n-    inform (&richloc,\n-\t    \"%qs is defined in header %qs;\"\n-\t    \" did you forget to %<#include %s%>?\",\n-\t    m_name_str, m_header_hint, m_header_hint);\n-  }\n-\n- private:\n-  const char *m_name_str;\n-  const char *m_header_hint;\n-};\n-\n /* Look for the closest match for NAME within the currently valid\n    scopes.\n \n@@ -4094,7 +4018,9 @@ lookup_name_fuzzy (tree name, enum lookup_name_fuzzy_kind kind, location_t loc)\n \n   /* First, try some well-known names in the C standard library, in case\n      the user forgot a #include.  */\n-  const char *header_hint = get_c_name_hint (IDENTIFIER_POINTER (name));\n+  const char *header_hint\n+    = get_c_stdlib_header_for_name (IDENTIFIER_POINTER (name));\n+\n   if (header_hint)\n     return name_hint (NULL,\n \t\t      new suggest_missing_header (loc,"}, {"sha": "56d466dfb4c58570a8357d0fc16bf5c4e03e2801", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26edace69b6b909eebddcf18c8844bb4c94d9a35/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26edace69b6b909eebddcf18c8844bb4c94d9a35/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=26edace69b6b909eebddcf18c8844bb4c94d9a35", "patch": "@@ -1,3 +1,10 @@\n+2017-11-20  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c/81404\n+\t* name-lookup.c: Include \"c-family/known-headers.h\"\n+\t(lookup_name_fuzzy): Call get_cp_stdlib_header_for_name and\n+\tpotentially return a new suggest_missing_header hint.\n+\n 2017-11-20  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR c++/72786"}, {"sha": "7c363b0f935e35a730159abad6b1720bd147aa09", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26edace69b6b909eebddcf18c8844bb4c94d9a35/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26edace69b6b909eebddcf18c8844bb4c94d9a35/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=26edace69b6b909eebddcf18c8844bb4c94d9a35", "patch": "@@ -34,6 +34,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"spellcheck-tree.h\"\n #include \"parser.h\"\n #include \"c-family/name-hint.h\"\n+#include \"c-family/known-headers.h\"\n \n static cxx_binding *cxx_binding_make (tree value, tree type);\n static cp_binding_level *innermost_nonclass_level (void);\n@@ -5682,6 +5683,16 @@ lookup_name_fuzzy (tree name, enum lookup_name_fuzzy_kind kind, location_t loc)\n {\n   gcc_assert (TREE_CODE (name) == IDENTIFIER_NODE);\n \n+  /* First, try some well-known names in the C++ standard library, in case\n+     the user forgot a #include.  */\n+  const char *header_hint\n+    = get_cp_stdlib_header_for_name (IDENTIFIER_POINTER (name));\n+  if (header_hint)\n+    return name_hint (NULL,\n+\t\t      new suggest_missing_header (loc,\n+\t\t\t\t\t\t  IDENTIFIER_POINTER (name),\n+\t\t\t\t\t\t  header_hint));\n+\n   best_match <tree, const char *> bm (name);\n \n   cp_binding_level *lvl;"}, {"sha": "8bd2101486a8561d28e260b80fb4e621e519f1c3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26edace69b6b909eebddcf18c8844bb4c94d9a35/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26edace69b6b909eebddcf18c8844bb4c94d9a35/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=26edace69b6b909eebddcf18c8844bb4c94d9a35", "patch": "@@ -1,3 +1,9 @@\n+2017-11-20  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c/81404\n+\t* g++.dg/spellcheck-stdlib.C: New.\n+\t* gcc.dg/spellcheck-stdlib.c (test_INT_MAX): New.\n+\n 2017-11-20  David Malcolm  <dmalcolm@redhat.com>\n \n \t* gcc.dg/spellcheck-stdlib.c: New test case."}, {"sha": "6e6ab1dfb0ce6a308c1b138964398f6402d80086", "filename": "gcc/testsuite/g++.dg/spellcheck-stdlib.C", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26edace69b6b909eebddcf18c8844bb4c94d9a35/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspellcheck-stdlib.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26edace69b6b909eebddcf18c8844bb4c94d9a35/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspellcheck-stdlib.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspellcheck-stdlib.C?ref=26edace69b6b909eebddcf18c8844bb4c94d9a35", "patch": "@@ -0,0 +1,84 @@\n+/* Missing <cstddef>.  */\n+\n+void *ptr = NULL; // { dg-error \"'NULL' was not declared\" }\n+// { dg-message \"'NULL' is defined in header '<cstddef>'; did you forget to '#include <cstddef>'?\" \"\" { target *-*-* } .-1 }\n+\n+ptrdiff_t pd; // { dg-error \"'ptrdiff_t' does not name a type\" }\n+// { dg-message \"'ptrdiff_t' is defined in header '<cstddef>'; did you forget to '#include <cstddef>'?\" \"\" { target *-*-* } .-1 }\n+\n+size_t sz; // { dg-error \"'size_t' does not name a type\" }\n+// { dg-message \"'size_t' is defined in header '<cstddef>'; did you forget to '#include <cstddef>'?\" \"\" { target *-*-* } .-1 }\n+\n+/* Missing <cstdio>.  */\n+\n+void test_cstdio (void)\n+{\n+  FILE *f; // { dg-error \"'FILE' was not declared in this scope\" }\n+  // { dg-message \"'FILE' is defined in header '<cstdio>'; did you forget to '#include <cstdio>'?\" \"\" { target *-*-* } .-1 }\n+  // { dg-error \"'f' was not declared in this scope\" \"\" { target *-*-* } .-2 }\n+  // { dg-bogus \"suggested alternative: 'if'\" \"PR c++/80567\" { xfail *-*-* } .-3 }\n+\n+  char buf[BUFSIZ]; // { dg-error \"'BUFSIZ' was not declared\" }\n+  // { dg-message \"'BUFSIZ' is defined in header '<cstdio>'; did you forget to '#include <cstdio>'?\" \"\" { target *-*-* } .-1 }\n+\n+  char buf2[FILENAME_MAX]; // { dg-error \"'FILENAME_MAX' was not declared\" }\n+  // { dg-message \"'FILENAME_MAX' is defined in header '<cstdio>'; did you forget to '#include <cstdio>'?\" \"\" { target *-*-* } .-1 }\n+\n+  stderr; // { dg-error \"'stderr' was not declared\" }\n+  // { dg-message \"'stderr' is defined in header '<cstdio>'; did you forget to '#include <cstdio>'?\" \"\" { target *-*-* } .-1 }\n+\n+  stdin; // { dg-error \"'stdin' was not declared\" }\n+  // { dg-message \"'stdin' is defined in header '<cstdio>'; did you forget to '#include <cstdio>'?\" \"\" { target *-*-* } .-1 }\n+\n+  stdout; // { dg-error \"'stdout' was not declared\" }\n+  // { dg-message \"'stdout' is defined in header '<cstdio>'; did you forget to '#include <cstdio>'?\" \"\" { target *-*-* } .-1 }\n+\n+  EOF; // { dg-error \"'EOF' was not declared\" }\n+  // { dg-message \"'EOF' is defined in header '<cstdio>'; did you forget to '#include <cstdio>'?\" \"\" { target *-*-* } .-1 }\n+}\n+\n+/* Missing <cerrno>.  */\n+\n+int test_cerrno (void)\n+{\n+  return errno; // { dg-error \"'errno' was not declared\" }\n+  // { dg-message \"'errno' is defined in header '<cerrno>'; did you forget to '#include <cerrno>'?\" \"\" { target *-*-* } .-1 }\n+}\n+\n+/* Missing <cstdarg>.  */\n+\n+void test_cstdarg (void)\n+{\n+  va_list ap; // { dg-error \"'va_list'\" }\n+  // { dg-message \"'va_list' is defined in header '<cstdarg>'; did you forget to '#include <cstdarg>'?\" \"\" { target *-*-* } .-1 }\n+}\n+\n+/* Missing <climits>.  */\n+int test_INT_MAX (void)\n+{\n+  return INT_MAX; // { dg-line INT_MAX_line }\n+  // { dg-error \"'INT_MAX' was not declared\" \"\" { target *-*-* } INT_MAX_line }\n+  // { dg-bogus \"__INT_MAX__\" \"\" { target *-*-* } INT_MAX_line }\n+  // { dg-message \"'INT_MAX' is defined in header '<climits>'; did you forget to '#include <climits>'?\" \"\" { target *-*-* } INT_MAX_line }\n+}\n+\n+/* Verify that we don't offer suggestions to stdlib globals names when\n+   there's an explicit namespace.  */\n+\n+namespace some_ns {}\n+\n+int not_within_namespace (void)\n+{\n+  return some_ns::stdout; // { dg-error \"'stdout' is not a member of 'some_ns'\" }\n+  // { dg-bogus \"is defined in header\" \"\" { target *-*-* } .-1 }\n+}\n+\n+/* Similarly for when there's an explicit class scope.  */\n+\n+class some_class {};\n+\n+int not_within_class (void)\n+{\n+  return some_class::stdout; // { dg-error \"'stdout' is not a member of 'some_class'\" }\n+  // { dg-bogus \"is defined in header\" \"\" { target *-*-* } .-1 }\n+}"}, {"sha": "7474c9a5b03adc0e1ff851653a10c7d62d0d5062", "filename": "gcc/testsuite/gcc.dg/spellcheck-stdlib.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26edace69b6b909eebddcf18c8844bb4c94d9a35/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-stdlib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26edace69b6b909eebddcf18c8844bb4c94d9a35/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-stdlib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-stdlib.c?ref=26edace69b6b909eebddcf18c8844bb4c94d9a35", "patch": "@@ -53,3 +53,12 @@ void test_stdarg_h (void)\n   va_list ap; /* { dg-error \"unknown type name 'va_list'\" } */\n   /* { dg-message \"'va_list' is defined in header '<stdarg.h>'; did you forget to '#include <stdarg.h>'?\" \"\" { target *-*-* } .-1 } */\n }\n+\n+/* Missing <limits.h>.  */\n+int test_INT_MAX (void)\n+{\n+  return INT_MAX; /* { dg-line INT_MAX_line } */\n+  /* { dg-error \"'INT_MAX' undeclared\" \"\" { target *-*-* } INT_MAX_line } */\n+  /* { dg-bogus \"__INT_MAX__\" \"\" { target *-*-* } INT_MAX_line } */\n+  /* { dg-message \"'INT_MAX' is defined in header '<limits.h>'; did you forget to '#include <limits.h>'?\" \"\" { target *-*-* } INT_MAX_line } */\n+}"}]}