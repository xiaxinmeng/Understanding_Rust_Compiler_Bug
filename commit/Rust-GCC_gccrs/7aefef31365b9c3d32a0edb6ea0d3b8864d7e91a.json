{"sha": "7aefef31365b9c3d32a0edb6ea0d3b8864d7e91a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2FlZmVmMzEzNjViOWMzZDMyYTBlZGI2ZWEwZDNiODg2NGQ3ZTkxYQ==", "commit": {"author": {"name": "Andrew Stubbs", "email": "ams@codesourcery.com", "date": "2020-09-25T15:22:47Z"}, "committer": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2021-06-10T11:37:13Z"}, "message": "OpenACC: Separate enter/exit data ABIs\n\nMove the OpenACC enter and exit data directives from using a single builtin to\nhaving one each.  For most purposes it was easy to tell which was which, from\nthe clauses given, but it's overhead we can easily avoid, and there may be\nfuture uses where that isn't possible.\n\n\tgcc/\n\t* omp-builtins.def (BUILT_IN_GOACC_ENTER_EXIT_DATA): Split into...\n\t(BUILT_IN_GOACC_ENTER_DATA, BUILT_IN_GOACC_EXIT_DATA): ... these.\n\t* gimple.h (enum gf_mask): Split\n\t'GF_OMP_TARGET_KIND_OACC_ENTER_EXIT_DATA' into\n\t'GF_OMP_TARGET_KIND_OACC_ENTER_DATA' and\n\t'GF_OMP_TARGET_KIND_OACC_EXIT_DATA'.\n\t(is_gimple_omp_oacc): Update.\n\t* gimple-pretty-print.c (dump_gimple_omp_target): Likewise.\n\t* gimplify.c (gimplify_omp_target_update): Likewise.\n\t* omp-expand.c (expand_omp_target, build_omp_regions_1)\n\t(omp_make_gimple_edges): Likewise.\n\t* omp-low.c (check_omp_nesting_restrictions, lower_omp_target):\n\tLikewise.\n\tgcc/testsuite/\n\t* c-c++-common/goacc-gomp/nesting-fail-1.c: Adjust patterns.\n\t* c-c++-common/goacc/finalize-1.c: Likewise.\n\t* c-c++-common/goacc/mdc-1.c: Likewise.\n\t* c-c++-common/goacc/nesting-fail-1.c: Likewise.\n\t* c-c++-common/goacc/struct-enter-exit-data-1.c: Likewise.\n\t* gfortran.dg/goacc/attach-descriptor.f90: Likewise.\n\t* gfortran.dg/goacc/finalize-1.f: Likewise.\n\t* gfortran.dg/goacc/mapping-tests-3.f90: Likewise.\n\tlibgomp/\n\t* libgomp.map (GOACC_2.0.2): New symbol version.\n\t* libgomp_g.h (GOACC_enter_data, GOACC_exit_data) New prototypes.\n\t* oacc-mem.c (GOACC_enter_data, GOACC_exit_data) New functions.\n\nCo-Authored-By: Thomas Schwinge <thomas@codesourcery.com>", "tree": {"sha": "ae2fbfb33c70285282cfb070d9e78e492cc30557", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ae2fbfb33c70285282cfb070d9e78e492cc30557"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7aefef31365b9c3d32a0edb6ea0d3b8864d7e91a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7aefef31365b9c3d32a0edb6ea0d3b8864d7e91a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7aefef31365b9c3d32a0edb6ea0d3b8864d7e91a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7aefef31365b9c3d32a0edb6ea0d3b8864d7e91a/comments", "author": {"login": "ams-cs", "id": 2235130, "node_id": "MDQ6VXNlcjIyMzUxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2235130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ams-cs", "html_url": "https://github.com/ams-cs", "followers_url": "https://api.github.com/users/ams-cs/followers", "following_url": "https://api.github.com/users/ams-cs/following{/other_user}", "gists_url": "https://api.github.com/users/ams-cs/gists{/gist_id}", "starred_url": "https://api.github.com/users/ams-cs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ams-cs/subscriptions", "organizations_url": "https://api.github.com/users/ams-cs/orgs", "repos_url": "https://api.github.com/users/ams-cs/repos", "events_url": "https://api.github.com/users/ams-cs/events{/privacy}", "received_events_url": "https://api.github.com/users/ams-cs/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7999363961dc6feeb0976cc6d85ea91a120d0e1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7999363961dc6feeb0976cc6d85ea91a120d0e1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7999363961dc6feeb0976cc6d85ea91a120d0e1d"}], "stats": {"total": 165, "additions": 111, "deletions": 54}, "files": [{"sha": "8be40416dd2b3c74e2eaae8c678bfc17ff79f872", "filename": "gcc/gimple-pretty-print.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7aefef31365b9c3d32a0edb6ea0d3b8864d7e91a/gcc%2Fgimple-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7aefef31365b9c3d32a0edb6ea0d3b8864d7e91a/gcc%2Fgimple-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-pretty-print.c?ref=7aefef31365b9c3d32a0edb6ea0d3b8864d7e91a", "patch": "@@ -1697,8 +1697,11 @@ dump_gimple_omp_target (pretty_printer *buffer, const gomp_target *gs,\n     case GF_OMP_TARGET_KIND_OACC_UPDATE:\n       kind = \" oacc_update\";\n       break;\n-    case GF_OMP_TARGET_KIND_OACC_ENTER_EXIT_DATA:\n-      kind = \" oacc_enter_exit_data\";\n+    case GF_OMP_TARGET_KIND_OACC_ENTER_DATA:\n+      kind = \" oacc_enter_data\";\n+      break;\n+    case GF_OMP_TARGET_KIND_OACC_EXIT_DATA:\n+      kind = \" oacc_exit_data\";\n       break;\n     case GF_OMP_TARGET_KIND_OACC_DECLARE:\n       kind = \" oacc_declare\";"}, {"sha": "e7dc2a45a13e62fd9b2917772848892774eed91b", "filename": "gcc/gimple.h", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7aefef31365b9c3d32a0edb6ea0d3b8864d7e91a/gcc%2Fgimple.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7aefef31365b9c3d32a0edb6ea0d3b8864d7e91a/gcc%2Fgimple.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.h?ref=7aefef31365b9c3d32a0edb6ea0d3b8864d7e91a", "patch": "@@ -161,7 +161,7 @@ enum gf_mask {\n     GF_OMP_FOR_KIND_SIMD\t= 5,\n     GF_OMP_FOR_COMBINED\t\t= 1 << 3,\n     GF_OMP_FOR_COMBINED_INTO\t= 1 << 4,\n-    GF_OMP_TARGET_KIND_MASK\t= (1 << 4) - 1,\n+    GF_OMP_TARGET_KIND_MASK\t= (1 << 5) - 1,\n     GF_OMP_TARGET_KIND_REGION\t= 0,\n     GF_OMP_TARGET_KIND_DATA\t= 1,\n     GF_OMP_TARGET_KIND_UPDATE\t= 2,\n@@ -172,18 +172,19 @@ enum gf_mask {\n     GF_OMP_TARGET_KIND_OACC_SERIAL = 7,\n     GF_OMP_TARGET_KIND_OACC_DATA = 8,\n     GF_OMP_TARGET_KIND_OACC_UPDATE = 9,\n-    GF_OMP_TARGET_KIND_OACC_ENTER_EXIT_DATA = 10,\n-    GF_OMP_TARGET_KIND_OACC_DECLARE = 11,\n-    GF_OMP_TARGET_KIND_OACC_HOST_DATA = 12,\n+    GF_OMP_TARGET_KIND_OACC_ENTER_DATA = 10,\n+    GF_OMP_TARGET_KIND_OACC_EXIT_DATA = 11,\n+    GF_OMP_TARGET_KIND_OACC_DECLARE = 12,\n+    GF_OMP_TARGET_KIND_OACC_HOST_DATA = 13,\n     /* A 'GF_OMP_TARGET_KIND_OACC_PARALLEL' representing an OpenACC 'kernels'\n        decomposed part, parallelized.  */\n-    GF_OMP_TARGET_KIND_OACC_PARALLEL_KERNELS_PARALLELIZED = 13,\n+    GF_OMP_TARGET_KIND_OACC_PARALLEL_KERNELS_PARALLELIZED = 14,\n     /* A 'GF_OMP_TARGET_KIND_OACC_PARALLEL' representing an OpenACC 'kernels'\n        decomposed part, \"gang-single\".  */\n-    GF_OMP_TARGET_KIND_OACC_PARALLEL_KERNELS_GANG_SINGLE = 14,\n+    GF_OMP_TARGET_KIND_OACC_PARALLEL_KERNELS_GANG_SINGLE = 15,\n     /* A 'GF_OMP_TARGET_KIND_OACC_DATA' representing an OpenACC 'kernels'\n        decomposed parts' 'data' construct.  */\n-    GF_OMP_TARGET_KIND_OACC_DATA_KERNELS = 15,\n+    GF_OMP_TARGET_KIND_OACC_DATA_KERNELS = 16,\n     GF_OMP_TEAMS_HOST\t\t= 1 << 0,\n \n     /* True on an GIMPLE_OMP_RETURN statement if the return does not require\n@@ -6525,7 +6526,8 @@ is_gimple_omp_oacc (const gimple *stmt)\n \tcase GF_OMP_TARGET_KIND_OACC_SERIAL:\n \tcase GF_OMP_TARGET_KIND_OACC_DATA:\n \tcase GF_OMP_TARGET_KIND_OACC_UPDATE:\n-\tcase GF_OMP_TARGET_KIND_OACC_ENTER_EXIT_DATA:\n+\tcase GF_OMP_TARGET_KIND_OACC_ENTER_DATA:\n+\tcase GF_OMP_TARGET_KIND_OACC_EXIT_DATA:\n \tcase GF_OMP_TARGET_KIND_OACC_DECLARE:\n \tcase GF_OMP_TARGET_KIND_OACC_HOST_DATA:\n \tcase GF_OMP_TARGET_KIND_OACC_PARALLEL_KERNELS_PARALLELIZED:"}, {"sha": "c96d611b11583dec5b20224e9e572e3628924958", "filename": "gcc/gimplify.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7aefef31365b9c3d32a0edb6ea0d3b8864d7e91a/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7aefef31365b9c3d32a0edb6ea0d3b8864d7e91a/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=7aefef31365b9c3d32a0edb6ea0d3b8864d7e91a", "patch": "@@ -13383,8 +13383,11 @@ gimplify_omp_target_update (tree *expr_p, gimple_seq *pre_p)\n   switch (TREE_CODE (expr))\n     {\n     case OACC_ENTER_DATA:\n+      kind = GF_OMP_TARGET_KIND_OACC_ENTER_DATA;\n+      ort = ORT_ACC;\n+      break;\n     case OACC_EXIT_DATA:\n-      kind = GF_OMP_TARGET_KIND_OACC_ENTER_EXIT_DATA;\n+      kind = GF_OMP_TARGET_KIND_OACC_EXIT_DATA;\n       ort = ORT_ACC;\n       break;\n     case OACC_UPDATE:"}, {"sha": "97964f866ec05581e3b4220c19cc5f532469e9be", "filename": "gcc/omp-builtins.def", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7aefef31365b9c3d32a0edb6ea0d3b8864d7e91a/gcc%2Fomp-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7aefef31365b9c3d32a0edb6ea0d3b8864d7e91a/gcc%2Fomp-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-builtins.def?ref=7aefef31365b9c3d32a0edb6ea0d3b8864d7e91a", "patch": "@@ -35,7 +35,10 @@ DEF_GOACC_BUILTIN (BUILT_IN_GOACC_DATA_START, \"GOACC_data_start\",\n \t\t   BT_FN_VOID_INT_SIZE_PTR_PTR_PTR, ATTR_NOTHROW_LIST)\n DEF_GOACC_BUILTIN (BUILT_IN_GOACC_DATA_END, \"GOACC_data_end\",\n \t\t   BT_FN_VOID, ATTR_NOTHROW_LIST)\n-DEF_GOACC_BUILTIN (BUILT_IN_GOACC_ENTER_EXIT_DATA, \"GOACC_enter_exit_data\",\n+DEF_GOACC_BUILTIN (BUILT_IN_GOACC_ENTER_DATA, \"GOACC_enter_data\",\n+\t\t   BT_FN_VOID_INT_SIZE_PTR_PTR_PTR_INT_INT_VAR,\n+\t\t   ATTR_NOTHROW_LIST)\n+DEF_GOACC_BUILTIN (BUILT_IN_GOACC_EXIT_DATA, \"GOACC_exit_data\",\n \t\t   BT_FN_VOID_INT_SIZE_PTR_PTR_PTR_INT_INT_VAR,\n \t\t   ATTR_NOTHROW_LIST)\n DEF_GOACC_BUILTIN (BUILT_IN_GOACC_PARALLEL, \"GOACC_parallel_keyed\","}, {"sha": "f8b1558b1d1ba9a79eebfb8ebd6cd620ddd07807", "filename": "gcc/omp-expand.c", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7aefef31365b9c3d32a0edb6ea0d3b8864d7e91a/gcc%2Fomp-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7aefef31365b9c3d32a0edb6ea0d3b8864d7e91a/gcc%2Fomp-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-expand.c?ref=7aefef31365b9c3d32a0edb6ea0d3b8864d7e91a", "patch": "@@ -9290,7 +9290,8 @@ expand_omp_target (struct omp_region *region)\n     case GF_OMP_TARGET_KIND_OACC_KERNELS:\n     case GF_OMP_TARGET_KIND_OACC_SERIAL:\n     case GF_OMP_TARGET_KIND_OACC_UPDATE:\n-    case GF_OMP_TARGET_KIND_OACC_ENTER_EXIT_DATA:\n+    case GF_OMP_TARGET_KIND_OACC_ENTER_DATA:\n+    case GF_OMP_TARGET_KIND_OACC_EXIT_DATA:\n     case GF_OMP_TARGET_KIND_OACC_DECLARE:\n     case GF_OMP_TARGET_KIND_OACC_PARALLEL_KERNELS_PARALLELIZED:\n     case GF_OMP_TARGET_KIND_OACC_PARALLEL_KERNELS_GANG_SINGLE:\n@@ -9574,8 +9575,11 @@ expand_omp_target (struct omp_region *region)\n     case GF_OMP_TARGET_KIND_OACC_UPDATE:\n       start_ix = BUILT_IN_GOACC_UPDATE;\n       break;\n-    case GF_OMP_TARGET_KIND_OACC_ENTER_EXIT_DATA:\n-      start_ix = BUILT_IN_GOACC_ENTER_EXIT_DATA;\n+    case GF_OMP_TARGET_KIND_OACC_ENTER_DATA:\n+      start_ix = BUILT_IN_GOACC_ENTER_DATA;\n+      break;\n+    case GF_OMP_TARGET_KIND_OACC_EXIT_DATA:\n+      start_ix = BUILT_IN_GOACC_EXIT_DATA;\n       break;\n     case GF_OMP_TARGET_KIND_OACC_DECLARE:\n       start_ix = BUILT_IN_GOACC_DECLARE;\n@@ -9773,7 +9777,8 @@ expand_omp_target (struct omp_region *region)\n \toacc_set_fn_attrib (child_fn, clauses, &args);\n       tagging = true;\n       /* FALLTHRU */\n-    case BUILT_IN_GOACC_ENTER_EXIT_DATA:\n+    case BUILT_IN_GOACC_ENTER_DATA:\n+    case BUILT_IN_GOACC_EXIT_DATA:\n     case BUILT_IN_GOACC_UPDATE:\n       {\n \ttree t_async = NULL_TREE;\n@@ -10042,7 +10047,8 @@ build_omp_regions_1 (basic_block bb, struct omp_region *parent,\n \t\tcase GF_OMP_TARGET_KIND_OACC_HOST_DATA:\n \t\tcase GF_OMP_TARGET_KIND_OACC_DATA_KERNELS:\n \t\tcase GF_OMP_TARGET_KIND_OACC_UPDATE:\n-\t\tcase GF_OMP_TARGET_KIND_OACC_ENTER_EXIT_DATA:\n+\t\tcase GF_OMP_TARGET_KIND_OACC_ENTER_DATA:\n+\t\tcase GF_OMP_TARGET_KIND_OACC_EXIT_DATA:\n \t\tcase GF_OMP_TARGET_KIND_OACC_DECLARE:\n \t\t  /* ..., other than for those stand-alone directives...  */\n \t\t  region = NULL;\n@@ -10299,7 +10305,8 @@ omp_make_gimple_edges (basic_block bb, struct omp_region **region,\n \tcase GF_OMP_TARGET_KIND_OACC_HOST_DATA:\n \tcase GF_OMP_TARGET_KIND_OACC_DATA_KERNELS:\n \tcase GF_OMP_TARGET_KIND_OACC_UPDATE:\n-\tcase GF_OMP_TARGET_KIND_OACC_ENTER_EXIT_DATA:\n+\tcase GF_OMP_TARGET_KIND_OACC_ENTER_DATA:\n+\tcase GF_OMP_TARGET_KIND_OACC_EXIT_DATA:\n \tcase GF_OMP_TARGET_KIND_OACC_DECLARE:\n \t  cur_region = cur_region->outer;\n \t  break;"}, {"sha": "2cc2a1860806e6d5efb996b20817320f2cbfc92d", "filename": "gcc/omp-low.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7aefef31365b9c3d32a0edb6ea0d3b8864d7e91a/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7aefef31365b9c3d32a0edb6ea0d3b8864d7e91a/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=7aefef31365b9c3d32a0edb6ea0d3b8864d7e91a", "patch": "@@ -3646,8 +3646,10 @@ check_omp_nesting_restrictions (gimple *stmt, omp_context *ctx)\n \t    case GF_OMP_TARGET_KIND_OACC_SERIAL: stmt_name = \"serial\"; break;\n \t    case GF_OMP_TARGET_KIND_OACC_DATA: stmt_name = \"data\"; break;\n \t    case GF_OMP_TARGET_KIND_OACC_UPDATE: stmt_name = \"update\"; break;\n-\t    case GF_OMP_TARGET_KIND_OACC_ENTER_EXIT_DATA:\n-\t      stmt_name = \"enter/exit data\"; break;\n+\t    case GF_OMP_TARGET_KIND_OACC_ENTER_DATA:\n+\t      stmt_name = \"enter data\"; break;\n+\t    case GF_OMP_TARGET_KIND_OACC_EXIT_DATA:\n+\t      stmt_name = \"exit data\"; break;\n \t    case GF_OMP_TARGET_KIND_OACC_DECLARE: stmt_name = \"declare\"; break;\n \t    case GF_OMP_TARGET_KIND_OACC_HOST_DATA: stmt_name = \"host_data\";\n \t      break;\n@@ -12194,7 +12196,8 @@ lower_omp_target (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n     case GF_OMP_TARGET_KIND_OACC_KERNELS:\n     case GF_OMP_TARGET_KIND_OACC_SERIAL:\n     case GF_OMP_TARGET_KIND_OACC_UPDATE:\n-    case GF_OMP_TARGET_KIND_OACC_ENTER_EXIT_DATA:\n+    case GF_OMP_TARGET_KIND_OACC_ENTER_DATA:\n+    case GF_OMP_TARGET_KIND_OACC_EXIT_DATA:\n     case GF_OMP_TARGET_KIND_OACC_DECLARE:\n     case GF_OMP_TARGET_KIND_OACC_PARALLEL_KERNELS_PARALLELIZED:\n     case GF_OMP_TARGET_KIND_OACC_PARALLEL_KERNELS_GANG_SINGLE:"}, {"sha": "ddbd247342f026cf23831934ed51d28635397c34", "filename": "gcc/testsuite/c-c++-common/goacc-gomp/nesting-fail-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7aefef31365b9c3d32a0edb6ea0d3b8864d7e91a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc-gomp%2Fnesting-fail-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7aefef31365b9c3d32a0edb6ea0d3b8864d7e91a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc-gomp%2Fnesting-fail-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc-gomp%2Fnesting-fail-1.c?ref=7aefef31365b9c3d32a0edb6ea0d3b8864d7e91a", "patch": "@@ -162,8 +162,8 @@ f_omp (void)\n #pragma acc data /* { dg-error \"OpenACC .data. construct inside of OpenMP .target. region\" } */\n     ;\n #pragma acc update host(i) /* { dg-error \"OpenACC .update. construct inside of OpenMP .target. region\" } */\n-#pragma acc enter data copyin(i) /* { dg-error \"OpenACC .enter/exit data. construct inside of OpenMP .target. region\" } */\n-#pragma acc exit data delete(i) /* { dg-error \"OpenACC .enter/exit data. construct inside of OpenMP .target. region\" } */\n+#pragma acc enter data copyin(i) /* { dg-error \"OpenACC .enter data. construct inside of OpenMP .target. region\" } */\n+#pragma acc exit data delete(i) /* { dg-error \"OpenACC .exit data. construct inside of OpenMP .target. region\" } */\n #pragma acc loop /* { dg-error \"loop directive must be associated with an OpenACC compute region\" } */\n     for (i = 0; i < 2; ++i)\n       ;"}, {"sha": "54bf1b76a1b8cb956240684cfc8b67b9a7426ae8", "filename": "gcc/testsuite/c-c++-common/goacc/finalize-1.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7aefef31365b9c3d32a0edb6ea0d3b8864d7e91a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Ffinalize-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7aefef31365b9c3d32a0edb6ea0d3b8864d7e91a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Ffinalize-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Ffinalize-1.c?ref=7aefef31365b9c3d32a0edb6ea0d3b8864d7e91a", "patch": "@@ -13,25 +13,25 @@ void f ()\n {\n #pragma acc exit data delete (del_r)\n /* { dg-final { scan-tree-dump-times \"(?n)#pragma acc exit data map\\\\(release:del_r\\\\);$\" 1 \"original\" } }\n-   { dg-final { scan-tree-dump-times \"(?n)#pragma omp target oacc_enter_exit_data map\\\\(release:del_r \\\\\\[len: \\[0-9\\]+\\\\\\]\\\\)$\" 1 \"gimple\" } } */\n+   { dg-final { scan-tree-dump-times \"(?n)#pragma omp target oacc_exit_data map\\\\(release:del_r \\\\\\[len: \\[0-9\\]+\\\\\\]\\\\)$\" 1 \"gimple\" } } */\n \n #pragma acc exit data finalize delete (del_f)\n /* { dg-final { scan-tree-dump-times \"(?n)#pragma acc exit data map\\\\(release:del_f\\\\) finalize;$\" 1 \"original\" } }\n-   { dg-final { scan-tree-dump-times \"(?n)#pragma omp target oacc_enter_exit_data map\\\\(delete:del_f \\\\\\[len: \\[0-9\\]+\\\\\\]\\\\) finalize$\" 1 \"gimple\" } } */\n+   { dg-final { scan-tree-dump-times \"(?n)#pragma omp target oacc_exit_data map\\\\(delete:del_f \\\\\\[len: \\[0-9\\]+\\\\\\]\\\\) finalize$\" 1 \"gimple\" } } */\n \n #pragma acc exit data finalize delete (del_f_p[2:5])\n /* { dg-final { scan-tree-dump-times \"(?n)#pragma acc exit data map\\\\(release:\\\\*\\\\(del_f_p \\\\+ 2\\\\) \\\\\\[len: 5\\\\\\]\\\\) map\\\\(firstprivate:del_f_p \\\\\\[pointer assign, bias: 2\\\\\\]\\\\) finalize;$\" 1 \"original\" } }\n-   { dg-final { scan-tree-dump-times \"(?n)#pragma omp target oacc_enter_exit_data map\\\\(delete:\\[^ \\]+ \\\\\\[len: 5\\\\\\]\\\\) finalize$\" 1 \"gimple\" } } */\n+   { dg-final { scan-tree-dump-times \"(?n)#pragma omp target oacc_exit_data map\\\\(delete:\\[^ \\]+ \\\\\\[len: 5\\\\\\]\\\\) finalize$\" 1 \"gimple\" } } */\n \n #pragma acc exit data copyout (cpo_r)\n /* { dg-final { scan-tree-dump-times \"(?n)#pragma acc exit data map\\\\(from:cpo_r\\\\);$\" 1 \"original\" } }\n-   { dg-final { scan-tree-dump-times \"(?n)#pragma omp target oacc_enter_exit_data map\\\\(from:cpo_r \\\\\\[len: \\[0-9\\]+\\\\\\]\\\\)$\" 1 \"gimple\" } } */\n+   { dg-final { scan-tree-dump-times \"(?n)#pragma omp target oacc_exit_data map\\\\(from:cpo_r \\\\\\[len: \\[0-9\\]+\\\\\\]\\\\)$\" 1 \"gimple\" } } */\n \n #pragma acc exit data copyout (cpo_f) finalize\n /* { dg-final { scan-tree-dump-times \"(?n)#pragma acc exit data finalize map\\\\(from:cpo_f\\\\);$\" 1 \"original\" } }\n-   { dg-final { scan-tree-dump-times \"(?n)#pragma omp target oacc_enter_exit_data finalize map\\\\(force_from:cpo_f \\\\\\[len: \\[0-9\\]+\\\\\\]\\\\)$\" 1 \"gimple\" } } */\n+   { dg-final { scan-tree-dump-times \"(?n)#pragma omp target oacc_exit_data finalize map\\\\(force_from:cpo_f \\\\\\[len: \\[0-9\\]+\\\\\\]\\\\)$\" 1 \"gimple\" } } */\n \n #pragma acc exit data copyout (cpo_f_p[4:10]) finalize\n /* { dg-final { scan-tree-dump-times \"(?n)#pragma acc exit data finalize map\\\\(from:\\\\*\\\\(cpo_f_p \\\\+ 4\\\\) \\\\\\[len: 10\\\\\\]\\\\) map\\\\(firstprivate:cpo_f_p \\\\\\[pointer assign, bias: 4\\\\\\]\\\\);$\" 1 \"original\" } }\n-   { dg-final { scan-tree-dump-times \"(?n)#pragma omp target oacc_enter_exit_data finalize map\\\\(force_from:\\[^ \\]+ \\\\\\[len: 10\\\\\\]\\\\)$\" 1 \"gimple\" } } */\n+   { dg-final { scan-tree-dump-times \"(?n)#pragma omp target oacc_exit_data finalize map\\\\(force_from:\\[^ \\]+ \\\\\\[len: 10\\\\\\]\\\\)$\" 1 \"gimple\" } } */\n }"}, {"sha": "c2b8dc6c88088e703c95f8ad0d8aa024280c3c65", "filename": "gcc/testsuite/c-c++-common/goacc/mdc-1.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7aefef31365b9c3d32a0edb6ea0d3b8864d7e91a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fmdc-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7aefef31365b9c3d32a0edb6ea0d3b8864d7e91a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fmdc-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fmdc-1.c?ref=7aefef31365b9c3d32a0edb6ea0d3b8864d7e91a", "patch": "@@ -43,15 +43,15 @@ t1 ()\n   }\n }\n \n-/* { dg-final { scan-tree-dump-times \"pragma omp target oacc_enter_exit_data map.to:s .len: 32..\" 1 \"omplower\" } } */\n+/* { dg-final { scan-tree-dump-times \"pragma omp target oacc_enter_data map.to:s .len: 32..\" 1 \"omplower\" } } */\n /* { dg-final { scan-tree-dump-times \"pragma omp target oacc_data map.tofrom:.z .len: 40.. map.struct:s .len: 1.. map.alloc:s.a .len: 8.. map.tofrom:._1 .len: 40.. map.attach:s.a .bias: 0..\" 1 \"omplower\" } } */\n /* { dg-final { scan-tree-dump-times \"pragma omp target oacc_parallel map.attach:s.e .bias: 0.. map.tofrom:s .len: 32\" 1 \"omplower\" } } */\n-/* { dg-final { scan-tree-dump-times \"pragma omp target oacc_enter_exit_data map.attach:a .bias: 0..\" 1 \"omplower\" } } */\n-/* { dg-final { scan-tree-dump-times \"pragma omp target oacc_enter_exit_data map.detach:a .bias: 0..\" 1 \"omplower\" } } */\n-/* { dg-final { scan-tree-dump-times \"pragma omp target oacc_enter_exit_data map.to:a .len: 8..\" 1 \"omplower\" } } */\n-/* { dg-final { scan-tree-dump-times \"pragma omp target oacc_enter_exit_data map.attach:s.e .bias: 0..\" 1 \"omplower\" } } */\n-/* { dg-final { scan-tree-dump-times \"pragma omp target oacc_enter_exit_data map.detach:s.e .bias: 0..\" 1 \"omplower\" } } */\n+/* { dg-final { scan-tree-dump-times \"pragma omp target oacc_enter_data map.attach:a .bias: 0..\" 1 \"omplower\" } } */\n+/* { dg-final { scan-tree-dump-times \"pragma omp target oacc_exit_data map.detach:a .bias: 0..\" 1 \"omplower\" } } */\n+/* { dg-final { scan-tree-dump-times \"pragma omp target oacc_enter_data map.to:a .len: 8..\" 1 \"omplower\" } } */\n+/* { dg-final { scan-tree-dump-times \"pragma omp target oacc_enter_data map.attach:s.e .bias: 0..\" 1 \"omplower\" } } */\n+/* { dg-final { scan-tree-dump-times \"pragma omp target oacc_exit_data map.detach:s.e .bias: 0..\" 1 \"omplower\" } } */\n /* { dg-final { scan-tree-dump-times \"pragma omp target oacc_data map.attach:s.e .bias: 0..\" 1 \"omplower\" } } */\n-/* { dg-final { scan-tree-dump-times \"pragma omp target oacc_enter_exit_data map.release:a .len: 8..\" 1 \"omplower\" } } */\n-/* { dg-final { scan-tree-dump-times \"pragma omp target oacc_enter_exit_data finalize map.force_detach:a .bias: 0..\" 1 \"omplower\" } } */\n-/* { dg-final { scan-tree-dump-times \"pragma omp target oacc_enter_exit_data finalize map.force_detach:s.a .bias: 0..\" 1 \"omplower\" } } */\n+/* { dg-final { scan-tree-dump-times \"pragma omp target oacc_exit_data map.release:a .len: 8..\" 1 \"omplower\" } } */\n+/* { dg-final { scan-tree-dump-times \"pragma omp target oacc_exit_data finalize map.force_detach:a .bias: 0..\" 1 \"omplower\" } } */\n+/* { dg-final { scan-tree-dump-times \"pragma omp target oacc_exit_data finalize map.force_detach:s.a .bias: 0..\" 1 \"omplower\" } } */"}, {"sha": "5cfb327f4b60951e785dd35f39409137cbcd0b09", "filename": "gcc/testsuite/c-c++-common/goacc/nesting-fail-1.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7aefef31365b9c3d32a0edb6ea0d3b8864d7e91a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fnesting-fail-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7aefef31365b9c3d32a0edb6ea0d3b8864d7e91a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fnesting-fail-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fnesting-fail-1.c?ref=7aefef31365b9c3d32a0edb6ea0d3b8864d7e91a", "patch": "@@ -14,8 +14,8 @@ f_acc_parallel (void)\n #pragma acc data /* { dg-error \".data. construct inside of .parallel. region\" } */\n     ;\n #pragma acc update host(i) /* { dg-error \".update. construct inside of .parallel. region\" } */\n-#pragma acc enter data copyin(i) /* { dg-error \".enter/exit data. construct inside of .parallel. region\" } */\n-#pragma acc exit data delete(i) /* { dg-error \".enter/exit data. construct inside of .parallel. region\" } */\n+#pragma acc enter data copyin(i) /* { dg-error \".enter data. construct inside of .parallel. region\" } */\n+#pragma acc exit data delete(i) /* { dg-error \".exit data. construct inside of .parallel. region\" } */\n   }\n }\n \n@@ -33,8 +33,8 @@ f_acc_kernels (void)\n #pragma acc data /* { dg-error \".data. construct inside of .kernels. region\" } */\n     ;\n #pragma acc update host(i) /* { dg-error \".update. construct inside of .kernels. region\" } */\n-#pragma acc enter data copyin(i) /* { dg-error \".enter/exit data. construct inside of .kernels. region\" } */\n-#pragma acc exit data delete(i) /* { dg-error \".enter/exit data. construct inside of .kernels. region\" } */\n+#pragma acc enter data copyin(i) /* { dg-error \".enter data. construct inside of .kernels. region\" } */\n+#pragma acc exit data delete(i) /* { dg-error \".exit data. construct inside of .kernels. region\" } */\n   }\n }\n "}, {"sha": "9e5d3f2c9d207a7e0123be6c251cc64ee88e685a", "filename": "gcc/testsuite/c-c++-common/goacc/struct-enter-exit-data-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7aefef31365b9c3d32a0edb6ea0d3b8864d7e91a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fstruct-enter-exit-data-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7aefef31365b9c3d32a0edb6ea0d3b8864d7e91a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fstruct-enter-exit-data-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fstruct-enter-exit-data-1.c?ref=7aefef31365b9c3d32a0edb6ea0d3b8864d7e91a", "patch": "@@ -20,8 +20,8 @@ test (int *b, int *c, int *e)\n   struct str s = { .a = 0, .b = b, .c = c, .d = 0, .e = e, .f = 0 };\n \n #pragma acc enter data copyin(s.a, s.b[0:N], s.c[0:N] /* , s.d */ /* , s.e[0:N] */, s.f)\n-  /* { dg-final { scan-tree-dump {(?n)#pragma omp target oacc_enter_exit_data map\\(struct:s \\[len: 4\\]\\) map\\(to:s.a \\[len: [0-9]+\\]\\) map\\(alloc:s.b \\[len: [0-9]+\\]\\) map\\(alloc:s.c \\[len: [0-9]+\\]\\) map\\(to:s.f \\[len: [0-9]+\\]\\) map\\(to:\\*[_0-9]+ \\[len: [0-9]+\\]\\) map\\(attach:s.b \\[bias: 0\\]\\) map\\(to:\\*[_0-9]+ \\[len: [0-9]+\\]\\) map\\(attach:s.c \\[bias: 0\\]\\)$} gimple } } */\n+  /* { dg-final { scan-tree-dump {(?n)#pragma omp target oacc_enter_data map\\(struct:s \\[len: 4\\]\\) map\\(to:s.a \\[len: [0-9]+\\]\\) map\\(alloc:s.b \\[len: [0-9]+\\]\\) map\\(alloc:s.c \\[len: [0-9]+\\]\\) map\\(to:s.f \\[len: [0-9]+\\]\\) map\\(to:\\*[_0-9]+ \\[len: [0-9]+\\]\\) map\\(attach:s.b \\[bias: 0\\]\\) map\\(to:\\*[_0-9]+ \\[len: [0-9]+\\]\\) map\\(attach:s.c \\[bias: 0\\]\\)$} gimple } } */\n \n #pragma acc exit data copyout(s.a, s.b[0:N], s.c[0:N] /* , s.d */ /* , s.e[0:N] */, s.f)\n-  /* { dg-final { scan-tree-dump {(?n)#pragma omp target oacc_enter_exit_data map\\(from:s.a \\[len: [0-9]+\\]\\) map\\(release:s.b \\[len: [0-9]+\\]\\) map\\(release:s.c \\[len: [0-9]+\\]\\) map\\(from:s.f \\[len: [0-9]+\\]\\) map\\(from:\\*[_0-9]+ \\[len: [0-9]+\\]\\) map\\(detach:s.b \\[bias: 0\\]\\) map\\(from:\\*[_0-9]+ \\[len: [0-9]+\\]\\) map\\(detach:s.c \\[bias: 0\\]\\)$} gimple } } */\n+  /* { dg-final { scan-tree-dump {(?n)#pragma omp target oacc_exit_data map\\(from:s.a \\[len: [0-9]+\\]\\) map\\(release:s.b \\[len: [0-9]+\\]\\) map\\(release:s.c \\[len: [0-9]+\\]\\) map\\(from:s.f \\[len: [0-9]+\\]\\) map\\(from:\\*[_0-9]+ \\[len: [0-9]+\\]\\) map\\(detach:s.b \\[bias: 0\\]\\) map\\(from:\\*[_0-9]+ \\[len: [0-9]+\\]\\) map\\(detach:s.c \\[bias: 0\\]\\)$} gimple } } */\n }"}, {"sha": "8c2ee4a5cca449c8577ff8f4713dee46265637d2", "filename": "gcc/testsuite/gfortran.dg/goacc/attach-descriptor.f90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7aefef31365b9c3d32a0edb6ea0d3b8864d7e91a/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fattach-descriptor.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7aefef31365b9c3d32a0edb6ea0d3b8864d7e91a/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fattach-descriptor.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fattach-descriptor.f90?ref=7aefef31365b9c3d32a0edb6ea0d3b8864d7e91a", "patch": "@@ -12,18 +12,18 @@ program att\n \n   !$acc enter data attach(myvar%arr2, myptr)\n ! { dg-final { scan-tree-dump-times \"(?n)#pragma acc enter data map\\\\(attach:myvar\\\\.arr2 \\\\\\[bias: 0\\\\\\]\\\\) map\\\\(to:myptr \\\\\\[pointer set, len: \\[0-9\\]+\\\\\\]\\\\) map\\\\(attach:\\\\(integer\\\\(kind=4\\\\)\\\\\\[0:\\\\\\] \\\\*\\\\) myptr\\\\.data \\\\\\[bias: 0\\\\\\]\\\\);$\" 1 \"original\" } }\n-! { dg-final { scan-tree-dump-times \"(?n)#pragma omp target oacc_enter_exit_data map\\\\(attach:myvar\\\\.arr2 \\\\\\[bias: 0\\\\\\]\\\\) map\\\\(to:myptr \\\\\\[pointer set, len: \\[0-9\\]+\\\\\\]\\\\) map\\\\(attach:myptr\\\\.data \\\\\\[bias: 0\\\\\\]\\\\)$\" 1 \"gimple\" } }\n+! { dg-final { scan-tree-dump-times \"(?n)#pragma omp target oacc_enter_data map\\\\(attach:myvar\\\\.arr2 \\\\\\[bias: 0\\\\\\]\\\\) map\\\\(to:myptr \\\\\\[pointer set, len: \\[0-9\\]+\\\\\\]\\\\) map\\\\(attach:myptr\\\\.data \\\\\\[bias: 0\\\\\\]\\\\)$\" 1 \"gimple\" } }\n \n   !$acc exit data detach(myvar%arr2, myptr)\n ! { dg-final { scan-tree-dump-times \"(?n)#pragma acc exit data map\\\\(detach:myvar\\\\.arr2 \\\\\\[bias: 0\\\\\\]\\\\) map\\\\(to:myptr \\\\\\[pointer set, len: \\[0-9\\]+\\\\\\]\\\\) map\\\\(detach:\\\\(integer\\\\(kind=4\\\\)\\\\\\[0:\\\\\\] \\\\*\\\\) myptr\\\\.data \\\\\\[bias: 0\\\\\\]\\\\);$\" 1 \"original\" } }\n-! { dg-final { scan-tree-dump-times \"(?n)#pragma omp target oacc_enter_exit_data map\\\\(detach:myvar\\\\.arr2 \\\\\\[bias: 0\\\\\\]\\\\) map\\\\(to:myptr \\\\\\[pointer set, len: \\[0-9\\]+\\\\\\]\\\\) map\\\\(detach:myptr\\\\.data \\\\\\[bias: 0\\\\\\]\\\\)$\" 1 \"gimple\" } }\n+! { dg-final { scan-tree-dump-times \"(?n)#pragma omp target oacc_exit_data map\\\\(detach:myvar\\\\.arr2 \\\\\\[bias: 0\\\\\\]\\\\) map\\\\(to:myptr \\\\\\[pointer set, len: \\[0-9\\]+\\\\\\]\\\\) map\\\\(detach:myptr\\\\.data \\\\\\[bias: 0\\\\\\]\\\\)$\" 1 \"gimple\" } }\n \n   ! Test valid usage and processing of the finalize clause.\n   !$acc exit data detach(myvar%arr2, myptr) finalize\n ! { dg-final { scan-tree-dump-times \"(?n)#pragma acc exit data map\\\\(detach:myvar\\\\.arr2 \\\\\\[bias: 0\\\\\\]\\\\) map\\\\(to:myptr \\\\\\[pointer set, len: \\[0-9\\]+\\\\\\]\\\\) map\\\\(detach:\\\\(integer\\\\(kind=4\\\\)\\\\\\[0:\\\\\\] \\\\*\\\\) myptr\\\\.data \\\\\\[bias: 0\\\\\\]\\\\) finalize;$\" 1 \"original\" } }\n   ! For array-descriptor detaches, we no longer generate a \"release\" mapping\n   ! for the pointed-to data for gimplify.c to turn into \"delete\".  Make sure\n   ! the mapping still isn't there.\n-! { dg-final { scan-tree-dump-times \"(?n)#pragma omp target oacc_enter_exit_data map\\\\(force_detach:myvar\\\\.arr2 \\\\\\[bias: 0\\\\\\]\\\\) map\\\\(to:myptr \\\\\\[pointer set, len: \\[0-9\\]+\\\\\\]\\\\) map\\\\(force_detach:myptr\\\\.data \\\\\\[bias: 0\\\\\\]\\\\) finalize$\" 1 \"gimple\" } }\n+! { dg-final { scan-tree-dump-times \"(?n)#pragma omp target oacc_exit_data map\\\\(force_detach:myvar\\\\.arr2 \\\\\\[bias: 0\\\\\\]\\\\) map\\\\(to:myptr \\\\\\[pointer set, len: \\[0-9\\]+\\\\\\]\\\\) map\\\\(force_detach:myptr\\\\.data \\\\\\[bias: 0\\\\\\]\\\\) finalize$\" 1 \"gimple\" } }\n \n end program att"}, {"sha": "b706b385aebcdc87c0db053990b7863ca5036485", "filename": "gcc/testsuite/gfortran.dg/goacc/finalize-1.f", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7aefef31365b9c3d32a0edb6ea0d3b8864d7e91a/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Ffinalize-1.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7aefef31365b9c3d32a0edb6ea0d3b8864d7e91a/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Ffinalize-1.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Ffinalize-1.f?ref=7aefef31365b9c3d32a0edb6ea0d3b8864d7e91a", "patch": "@@ -13,25 +13,25 @@ SUBROUTINE f\n \n !$ACC EXIT DATA DELETE (del_r)\n ! { dg-final { scan-tree-dump-times \"(?n)#pragma acc exit data map\\\\(release:del_r\\\\);$\" 1 \"original\" } }\n-! { dg-final { scan-tree-dump-times \"(?n)#pragma omp target oacc_enter_exit_data map\\\\(release:del_r \\\\\\[len: \\[0-9\\]+\\\\\\]\\\\)$\" 1 \"gimple\" } }\n+! { dg-final { scan-tree-dump-times \"(?n)#pragma omp target oacc_exit_data map\\\\(release:del_r \\\\\\[len: \\[0-9\\]+\\\\\\]\\\\)$\" 1 \"gimple\" } }\n \n !$ACC EXIT DATA FINALIZE DELETE (del_f)\n ! { dg-final { scan-tree-dump-times \"(?n)#pragma acc exit data map\\\\(release:del_f\\\\) finalize;$\" 1 \"original\" } }\n-! { dg-final { scan-tree-dump-times \"(?n)#pragma omp target oacc_enter_exit_data map\\\\(delete:del_f \\\\\\[len: \\[0-9\\]+\\\\\\]\\\\) finalize$\" 1 \"gimple\" } }\n+! { dg-final { scan-tree-dump-times \"(?n)#pragma omp target oacc_exit_data map\\\\(delete:del_f \\\\\\[len: \\[0-9\\]+\\\\\\]\\\\) finalize$\" 1 \"gimple\" } }\n \n !$ACC EXIT DATA FINALIZE DELETE (del_f_p(2:5))\n ! { dg-final { scan-tree-dump-times \"(?n)#pragma acc exit data map\\\\(release:\\\\*\\\\(c_char \\\\*\\\\) parm\\\\.0\\\\.data \\\\\\[len: \\[^\\\\\\]\\]+\\\\\\]\\\\) map\\\\(to:del_f_p \\\\\\[pointer set, len: \\[0-9\\]+\\\\\\]\\\\) map\\\\(alloc:\\\\(integer\\\\(kind=1\\\\)\\\\\\[0:\\\\\\] \\\\* restrict\\\\) del_f_p\\\\.data \\\\\\[pointer assign, bias: \\\\(.*int.*\\\\) parm\\\\.0\\\\.data - \\\\(.*int.*\\\\) del_f_p\\\\.data\\\\\\]\\\\) finalize;$\" 1 \"original\" } }\n-! { dg-final { scan-tree-dump-times \"(?n)#pragma omp target oacc_enter_exit_data map\\\\(delete:MEM\\\\\\[\\\\(c_char \\\\*\\\\)\\[^\\\\\\]\\]+\\\\\\] \\\\\\[len: \\[^\\\\\\]\\]+\\\\\\]\\\\) map\\\\(to:del_f_p \\\\\\[pointer set, len: \\[0-9\\]+\\\\\\]\\\\) map\\\\(alloc:del_f_p\\\\.data \\\\\\[pointer assign, bias: \\[^\\\\\\]\\]+\\\\\\]\\\\) finalize$\" 1 \"gimple\" } }\n+! { dg-final { scan-tree-dump-times \"(?n)#pragma omp target oacc_exit_data map\\\\(delete:MEM\\\\\\[\\\\(c_char \\\\*\\\\)\\[^\\\\\\]\\]+\\\\\\] \\\\\\[len: \\[^\\\\\\]\\]+\\\\\\]\\\\) map\\\\(to:del_f_p \\\\\\[pointer set, len: \\[0-9\\]+\\\\\\]\\\\) map\\\\(alloc:del_f_p\\\\.data \\\\\\[pointer assign, bias: \\[^\\\\\\]\\]+\\\\\\]\\\\) finalize$\" 1 \"gimple\" } }\n \n !$ACC EXIT DATA COPYOUT (cpo_r)\n ! { dg-final { scan-tree-dump-times \"(?n)#pragma acc exit data map\\\\(from:cpo_r\\\\);$\" 1 \"original\" } }\n-! { dg-final { scan-tree-dump-times \"(?n)#pragma omp target oacc_enter_exit_data map\\\\(from:cpo_r \\\\\\[len: \\[0-9\\]+\\\\\\]\\\\)$\" 1 \"gimple\" } }\n+! { dg-final { scan-tree-dump-times \"(?n)#pragma omp target oacc_exit_data map\\\\(from:cpo_r \\\\\\[len: \\[0-9\\]+\\\\\\]\\\\)$\" 1 \"gimple\" } }\n \n !$ACC EXIT DATA COPYOUT (cpo_f) FINALIZE\n ! { dg-final { scan-tree-dump-times \"(?n)#pragma acc exit data map\\\\(from:cpo_f\\\\) finalize;$\" 1 \"original\" } }\n-! { dg-final { scan-tree-dump-times \"(?n)#pragma omp target oacc_enter_exit_data map\\\\(force_from:cpo_f \\\\\\[len: \\[0-9\\]+\\\\\\]\\\\) finalize$\" 1 \"gimple\" } }\n+! { dg-final { scan-tree-dump-times \"(?n)#pragma omp target oacc_exit_data map\\\\(force_from:cpo_f \\\\\\[len: \\[0-9\\]+\\\\\\]\\\\) finalize$\" 1 \"gimple\" } }\n \n !$ACC EXIT DATA COPYOUT (cpo_f_p(4:10)) FINALIZE\n ! { dg-final { scan-tree-dump-times \"(?n)#pragma acc exit data map\\\\(from:\\\\*\\\\(c_char \\\\*\\\\) parm\\\\.1\\\\.data \\\\\\[len: \\[^\\\\\\]\\]+\\\\\\]\\\\) map\\\\(to:cpo_f_p \\\\\\[pointer set, len: \\[0-9\\]+\\\\\\]\\\\) map\\\\(alloc:\\\\(integer\\\\(kind=1\\\\)\\\\\\[0:\\\\\\] \\\\* restrict\\\\) cpo_f_p\\\\.data \\\\\\[pointer assign, bias: \\\\(.*int.*\\\\) parm\\\\.1\\\\.data - \\\\(.*int.*\\\\) cpo_f_p\\\\.data\\\\\\]\\\\) finalize;$\" 1 \"original\" } }\n-! { dg-final { scan-tree-dump-times \"(?n)#pragma omp target oacc_enter_exit_data map\\\\(force_from:MEM\\\\\\[\\\\(c_char \\\\*\\\\)\\[^\\\\\\]\\]+\\\\\\] \\\\\\[len: \\[^\\\\\\]\\]+\\\\\\]\\\\) map\\\\(to:cpo_f_p \\\\\\[pointer set, len: \\[0-9\\]+\\\\\\]\\\\) map\\\\(alloc:cpo_f_p\\\\.data \\\\\\[pointer assign, bias: \\[^\\\\\\]\\]+\\\\\\]\\\\) finalize$\" 1 \"gimple\" } }\n+! { dg-final { scan-tree-dump-times \"(?n)#pragma omp target oacc_exit_data map\\\\(force_from:MEM\\\\\\[\\\\(c_char \\\\*\\\\)\\[^\\\\\\]\\]+\\\\\\] \\\\\\[len: \\[^\\\\\\]\\]+\\\\\\]\\\\) map\\\\(to:cpo_f_p \\\\\\[pointer set, len: \\[0-9\\]+\\\\\\]\\\\) map\\\\(alloc:cpo_f_p\\\\.data \\\\\\[pointer assign, bias: \\[^\\\\\\]\\]+\\\\\\]\\\\) finalize$\" 1 \"gimple\" } }\n       END SUBROUTINE f"}, {"sha": "662104f8aaaba0b762ee702d95d191d975c32e5d", "filename": "gcc/testsuite/gfortran.dg/goacc/mapping-tests-3.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7aefef31365b9c3d32a0edb6ea0d3b8864d7e91a/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fmapping-tests-3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7aefef31365b9c3d32a0edb6ea0d3b8864d7e91a/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fmapping-tests-3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fmapping-tests-3.f90?ref=7aefef31365b9c3d32a0edb6ea0d3b8864d7e91a", "patch": "@@ -11,5 +11,5 @@ subroutine foo\n   type(two) x\n \n   !$acc enter data copyin(x%A)\n-! { dg-final { scan-tree-dump-times \"omp target oacc_enter_exit_data map\\\\(struct:x \\\\\\[len: 1\\\\\\]\\\\) map\\\\(to:x.a \\\\\\[len: \\[0-9\\]+\\\\\\]\\\\)\" 1 \"gimple\" } }\n+! { dg-final { scan-tree-dump-times \"omp target oacc_enter_data map\\\\(struct:x \\\\\\[len: 1\\\\\\]\\\\) map\\\\(to:x.a \\\\\\[len: \\[0-9\\]+\\\\\\]\\\\)\" 1 \"gimple\" } }\n end"}, {"sha": "8ea27b5565ff61500f24b3cf67b1f8f3e6380456", "filename": "libgomp/libgomp.map", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7aefef31365b9c3d32a0edb6ea0d3b8864d7e91a/libgomp%2Flibgomp.map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7aefef31365b9c3d32a0edb6ea0d3b8864d7e91a/libgomp%2Flibgomp.map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Flibgomp.map?ref=7aefef31365b9c3d32a0edb6ea0d3b8864d7e91a", "patch": "@@ -541,6 +541,12 @@ GOACC_2.0.1 {\n \tGOACC_parallel_keyed;\n } GOACC_2.0;\n \n+GOACC_2.0.2 {\n+  global:\n+\tGOACC_enter_data;\n+\tGOACC_exit_data;\n+} GOACC_2.0.1;\n+\n GOMP_PLUGIN_1.0 {\n   global:\n \tGOMP_PLUGIN_malloc;"}, {"sha": "f890a204fb8ce82cc0120be09b740f66123201fb", "filename": "libgomp/libgomp_g.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7aefef31365b9c3d32a0edb6ea0d3b8864d7e91a/libgomp%2Flibgomp_g.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7aefef31365b9c3d32a0edb6ea0d3b8864d7e91a/libgomp%2Flibgomp_g.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Flibgomp_g.h?ref=7aefef31365b9c3d32a0edb6ea0d3b8864d7e91a", "patch": "@@ -370,6 +370,10 @@ extern void GOACC_wait (int, int, ...);\n \n extern void GOACC_enter_exit_data (int, size_t, void **, size_t *,\n \t\t\t\t   unsigned short *, int, int, ...);\n+extern void GOACC_enter_data (int, size_t, void **, size_t *,\n+\t\t\t      unsigned short *, int, int, ...);\n+extern void GOACC_exit_data (int, size_t, void **, size_t *,\n+\t\t\t     unsigned short *, int, int, ...);\n extern void GOACC_declare (int, size_t, void **, size_t *, unsigned short *);\n \n /* oacc-parallel.c */"}, {"sha": "123fe1540896d488b7b060f75afe526a2bccbe22", "filename": "libgomp/oacc-mem.c", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7aefef31365b9c3d32a0edb6ea0d3b8864d7e91a/libgomp%2Foacc-mem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7aefef31365b9c3d32a0edb6ea0d3b8864d7e91a/libgomp%2Foacc-mem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Foacc-mem.c?ref=7aefef31365b9c3d32a0edb6ea0d3b8864d7e91a", "patch": "@@ -1422,6 +1422,8 @@ goacc_enter_exit_data_internal (int flags_m, size_t mapnum, void **hostaddrs,\n     }\n }\n \n+/* Legacy entry point (GCC 11 and earlier).  */\n+\n void\n GOACC_enter_exit_data (int flags_m, size_t mapnum, void **hostaddrs,\n \t\t       size_t *sizes, unsigned short *kinds, int async,\n@@ -1468,6 +1470,30 @@ GOACC_enter_exit_data (int flags_m, size_t mapnum, void **hostaddrs,\n   va_end (ap);\n }\n \n+void\n+GOACC_enter_data (int flags_m, size_t mapnum, void **hostaddrs,\n+\t\t  size_t *sizes, unsigned short *kinds, int async,\n+\t\t  int num_waits, ...)\n+{\n+  va_list ap;\n+  va_start (ap, num_waits);\n+  goacc_enter_exit_data_internal (flags_m, mapnum, hostaddrs, sizes, kinds,\n+\t\t\t\t  true, async, num_waits, &ap);\n+  va_end (ap);\n+}\n+\n+void\n+GOACC_exit_data (int flags_m, size_t mapnum, void **hostaddrs,\n+\t\t size_t *sizes, unsigned short *kinds, int async,\n+\t\t int num_waits, ...)\n+{\n+  va_list ap;\n+  va_start (ap, num_waits);\n+  goacc_enter_exit_data_internal (flags_m, mapnum, hostaddrs, sizes, kinds,\n+\t\t\t\t  false, async, num_waits, &ap);\n+  va_end (ap);\n+}\n+\n void\n GOACC_declare (int flags_m, size_t mapnum,\n \t       void **hostaddrs, size_t *sizes, unsigned short *kinds)"}]}