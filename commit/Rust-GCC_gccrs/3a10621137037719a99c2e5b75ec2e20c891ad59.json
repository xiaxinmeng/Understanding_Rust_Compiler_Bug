{"sha": "3a10621137037719a99c2e5b75ec2e20c891ad59", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2ExMDYyMTEzNzAzNzcxOWE5OWMyZTViNzVlYzJlMjBjODkxYWQ1OQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2018-07-17T08:06:25Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2018-07-17T08:06:25Z"}, "message": "re PR middle-end/86539 (OpenMP wrong-code with taskloop and references)\n\n\tPR middle-end/86539\n\t* gimplify.c (gimplify_omp_for): Ensure taskloop firstprivatized init\n\tand cond temporaries don't have reference type if iterator has\n\tpointer type.  For init use &for_pre_body instead of pre_p if\n\tfor_pre_body is non-empty.\n\n\t* testsuite/libgomp.c++/pr86539.C: New test.\n\nFrom-SVN: r262776", "tree": {"sha": "2f092e709ef9b302a3dcc0c2bdceac26a03a0476", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2f092e709ef9b302a3dcc0c2bdceac26a03a0476"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3a10621137037719a99c2e5b75ec2e20c891ad59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a10621137037719a99c2e5b75ec2e20c891ad59", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a10621137037719a99c2e5b75ec2e20c891ad59", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a10621137037719a99c2e5b75ec2e20c891ad59/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "980f94b75b8ccd47afa55c6109a5899f325a61ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/980f94b75b8ccd47afa55c6109a5899f325a61ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/980f94b75b8ccd47afa55c6109a5899f325a61ee"}], "stats": {"total": 75, "additions": 74, "deletions": 1}, "files": [{"sha": "64aab92a08f3c6fbc228b71876e82c355b1e4d4e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a10621137037719a99c2e5b75ec2e20c891ad59/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a10621137037719a99c2e5b75ec2e20c891ad59/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3a10621137037719a99c2e5b75ec2e20c891ad59", "patch": "@@ -1,3 +1,11 @@\n+2018-07-17  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/86539\n+\t* gimplify.c (gimplify_omp_for): Ensure taskloop firstprivatized init\n+\tand cond temporaries don't have reference type if iterator has\n+\tpointer type.  For init use &for_pre_body instead of pre_p if\n+\tfor_pre_body is non-empty.\n+\n 2018-07-16  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* config/rs6000/rs6000.md (trunc<mode>sf2): Expand truncates of"}, {"sha": "4a109aee27a681c3d1a4887f90a7c427517105e9", "filename": "gcc/gimplify.c", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a10621137037719a99c2e5b75ec2e20c891ad59/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a10621137037719a99c2e5b75ec2e20c891ad59/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=3a10621137037719a99c2e5b75ec2e20c891ad59", "patch": "@@ -9811,9 +9811,26 @@ gimplify_omp_for (tree *expr_p, gimple_seq *pre_p)\n \t  t = TREE_VEC_ELT (OMP_FOR_INIT (for_stmt), i);\n \t  if (!is_gimple_constant (TREE_OPERAND (t, 1)))\n \t    {\n+\t      tree type = TREE_TYPE (TREE_OPERAND (t, 0));\n \t      TREE_OPERAND (t, 1)\n \t\t= get_initialized_tmp_var (TREE_OPERAND (t, 1),\n-\t\t\t\t\t   pre_p, NULL, false);\n+\t\t\t\t\t   gimple_seq_empty_p (for_pre_body)\n+\t\t\t\t\t   ? pre_p : &for_pre_body, NULL,\n+\t\t\t\t\t   false);\n+\t      /* Reference to pointer conversion is considered useless,\n+\t\t but is significant for firstprivate clause.  Force it\n+\t\t here.  */\n+\t      if (TREE_CODE (type) == POINTER_TYPE\n+\t\t  && (TREE_CODE (TREE_TYPE (TREE_OPERAND (t, 1)))\n+\t\t      == REFERENCE_TYPE))\n+\t\t{\n+\t\t  tree v = create_tmp_var (TYPE_MAIN_VARIANT (type));\n+\t\t  tree m = build2 (INIT_EXPR, TREE_TYPE (v), v,\n+\t\t\t\t   TREE_OPERAND (t, 1));\n+\t\t  gimplify_and_add (m, gimple_seq_empty_p (for_pre_body)\n+\t\t\t\t       ? pre_p : &for_pre_body);\n+\t\t  TREE_OPERAND (t, 1) = v;\n+\t\t}\n \t      tree c = build_omp_clause (input_location,\n \t\t\t\t\t OMP_CLAUSE_FIRSTPRIVATE);\n \t      OMP_CLAUSE_DECL (c) = TREE_OPERAND (t, 1);\n@@ -9825,11 +9842,26 @@ gimplify_omp_for (tree *expr_p, gimple_seq *pre_p)\n \t  t = TREE_VEC_ELT (OMP_FOR_COND (for_stmt), i);\n \t  if (!is_gimple_constant (TREE_OPERAND (t, 1)))\n \t    {\n+\t      tree type = TREE_TYPE (TREE_OPERAND (t, 0));\n \t      TREE_OPERAND (t, 1)\n \t\t= get_initialized_tmp_var (TREE_OPERAND (t, 1),\n \t\t\t\t\t   gimple_seq_empty_p (for_pre_body)\n \t\t\t\t\t   ? pre_p : &for_pre_body, NULL,\n \t\t\t\t\t   false);\n+\t      /* Reference to pointer conversion is considered useless,\n+\t\t but is significant for firstprivate clause.  Force it\n+\t\t here.  */\n+\t      if (TREE_CODE (type) == POINTER_TYPE\n+\t\t  && (TREE_CODE (TREE_TYPE (TREE_OPERAND (t, 1)))\n+\t\t      == REFERENCE_TYPE))\n+\t\t{\n+\t\t  tree v = create_tmp_var (TYPE_MAIN_VARIANT (type));\n+\t\t  tree m = build2 (INIT_EXPR, TREE_TYPE (v), v,\n+\t\t\t\t   TREE_OPERAND (t, 1));\n+\t\t  gimplify_and_add (m, gimple_seq_empty_p (for_pre_body)\n+\t\t\t\t       ? pre_p : &for_pre_body);\n+\t\t  TREE_OPERAND (t, 1) = v;\n+\t\t}\n \t      tree c = build_omp_clause (input_location,\n \t\t\t\t\t OMP_CLAUSE_FIRSTPRIVATE);\n \t      OMP_CLAUSE_DECL (c) = TREE_OPERAND (t, 1);"}, {"sha": "bfcf9d7dcd3498f48fe243c93715c016f64cbdc6", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a10621137037719a99c2e5b75ec2e20c891ad59/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a10621137037719a99c2e5b75ec2e20c891ad59/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=3a10621137037719a99c2e5b75ec2e20c891ad59", "patch": "@@ -1,3 +1,8 @@\n+2018-07-17  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/86539\n+\t* testsuite/libgomp.c++/pr86539.C: New test.\n+\n 2018-07-11  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/86443"}, {"sha": "fe2b65353e51945c0ef4cc64a544721d90657db3", "filename": "libgomp/testsuite/libgomp.c++/pr86539.C", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a10621137037719a99c2e5b75ec2e20c891ad59/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Fpr86539.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a10621137037719a99c2e5b75ec2e20c891ad59/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Fpr86539.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Fpr86539.C?ref=3a10621137037719a99c2e5b75ec2e20c891ad59", "patch": "@@ -0,0 +1,28 @@\n+// PR middle-end/86539\n+\n+int a[384];\n+\n+__attribute__((noipa)) void\n+foo (int &b, int &c)\n+{\n+  #pragma omp taskloop shared (a) collapse(3)\n+  for (int i = 0; i < 1; i++)\n+    for (int *p = &b; p < &c; p++)\n+      for (int j = 0; j < 1; j++)\n+\tif (p < &a[128] || p >= &a[256])\n+\t  __builtin_abort ();\n+\telse\n+\t  p[0]++;\n+}\n+\n+int\n+main ()\n+{\n+  #pragma omp parallel\n+  #pragma omp single\n+    foo (a[128], a[256]);\n+  for (int i = 0; i < 384; i++)\n+    if (a[i] != (i >= 128 && i < 256))\n+      __builtin_abort ();\n+  return 0;\n+}"}]}