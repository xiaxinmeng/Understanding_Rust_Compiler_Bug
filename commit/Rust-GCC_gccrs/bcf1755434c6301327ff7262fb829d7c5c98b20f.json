{"sha": "bcf1755434c6301327ff7262fb829d7c5c98b20f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmNmMTc1NTQzNGM2MzAxMzI3ZmY3MjYyZmI4MjlkN2M1Yzk4YjIwZg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2004-01-06T10:49:58Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2004-01-06T10:49:58Z"}, "message": "i386-sse-5.c: New test\n\n\n\t* gcc.dg/i386-sse-5.c: New test\n\t* g++.dg/eh/simd-1.c: Add -w argument for i386.\n\n\t* i386.c (init_cumulative_args):  Add handling of MMX_REGPARM.\n\t(function_arg_advance):  Do not pass aggregates in SSE; deal handling\n\tof MMX_REGPARM.\n\t(function_arg): Add new warnings about ABI changes;  fix SSE_REGPARM;\n\tadd MMX_REGPARM.\n\t* i386.h (ix86_args): Add mmx_words/mmx_regs/mmx_regno fields.\n\t(SSE_REGPARM_MAX): Default to 3 on i386 -msse ABI.\n\t(MMX_REGPARM_MAX): Similarly for -mmmx.\n\nFrom-SVN: r75467", "tree": {"sha": "44c40b0ca5f7a6b93d77529cf33792064e5ab5e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/44c40b0ca5f7a6b93d77529cf33792064e5ab5e7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bcf1755434c6301327ff7262fb829d7c5c98b20f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcf1755434c6301327ff7262fb829d7c5c98b20f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bcf1755434c6301327ff7262fb829d7c5c98b20f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcf1755434c6301327ff7262fb829d7c5c98b20f/comments", "author": null, "committer": null, "parents": [{"sha": "a67e295f56b5ff1e981af1b2581dec3a55c827b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a67e295f56b5ff1e981af1b2581dec3a55c827b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a67e295f56b5ff1e981af1b2581dec3a55c827b9"}], "stats": {"total": 88, "additions": 82, "deletions": 6}, "files": [{"sha": "109b0d68fb006619f7af36219f9646ceee1ebd90", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcf1755434c6301327ff7262fb829d7c5c98b20f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcf1755434c6301327ff7262fb829d7c5c98b20f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bcf1755434c6301327ff7262fb829d7c5c98b20f", "patch": "@@ -1,3 +1,14 @@\n+2004-01-06  Jan Hubicka  <jh@suse.cz>\n+\n+\t* i386.c (init_cumulative_args):  Add handling of MMX_REGPARM.\n+\t(function_arg_advance):  Do not pass aggregates in SSE; deal handling\n+\tof MMX_REGPARM.\n+\t(function_arg): Add new warnings about ABI changes;  fix SSE_REGPARM;\n+\tadd MMX_REGPARM.\n+\t* i386.h (ix86_args): Add mmx_words/mmx_regs/mmx_regno fields.\n+\t(SSE_REGPARM_MAX): Default to 3 on i386 -msse ABI.\n+\t(MMX_REGPARM_MAX): Similarly for -mmmx.\n+\n 2004-01-05  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* config/sh/linux.h: Fix comment formatting."}, {"sha": "be4e542b9de02bfae928e46488a142586be7a23c", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 51, "deletions": 5, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcf1755434c6301327ff7262fb829d7c5c98b20f/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcf1755434c6301327ff7262fb829d7c5c98b20f/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=bcf1755434c6301327ff7262fb829d7c5c98b20f", "patch": "@@ -1832,6 +1832,7 @@ init_cumulative_args (CUMULATIVE_ARGS *cum,  /* Argument info to initialize */\n   else\n     cum->nregs = ix86_regparm;\n   cum->sse_nregs = SSE_REGPARM_MAX;\n+  cum->mmx_nregs = MMX_REGPARM_MAX;\n   cum->maybe_vaarg = false;\n \n   /* Use ecx and edx registers if function has fastcall attribute */\n@@ -2430,8 +2431,8 @@ function_arg_advance (CUMULATIVE_ARGS *cum,\t/* current arg information */\n \n   if (TARGET_DEBUG_ARG)\n     fprintf (stderr,\n-\t     \"function_adv (sz=%d, wds=%2d, nregs=%d, mode=%s, named=%d)\\n\\n\",\n-\t     words, cum->words, cum->nregs, GET_MODE_NAME (mode), named);\n+\t     \"function_adv (sz=%d, wds=%2d, nregs=%d, ssenregs=%d, mode=%s, named=%d)\\n\\n\",\n+\t     words, cum->words, cum->nregs, cum->sse_nregs, GET_MODE_NAME (mode), named);\n   if (TARGET_64BIT)\n     {\n       int int_nregs, sse_nregs;\n@@ -2449,7 +2450,8 @@ function_arg_advance (CUMULATIVE_ARGS *cum,\t/* current arg information */\n     }\n   else\n     {\n-      if (TARGET_SSE && mode == TImode)\n+      if (TARGET_SSE && SSE_REG_MODE_P (mode)\n+\t  && (!type || !AGGREGATE_TYPE_P (type)))\n \t{\n \t  cum->sse_words += words;\n \t  cum->sse_nregs -= 1;\n@@ -2460,6 +2462,18 @@ function_arg_advance (CUMULATIVE_ARGS *cum,\t/* current arg information */\n \t      cum->sse_regno = 0;\n \t    }\n \t}\n+      else if (TARGET_MMX && MMX_REG_MODE_P (mode)\n+\t       && (!type || !AGGREGATE_TYPE_P (type)))\n+\t{\n+\t  cum->mmx_words += words;\n+\t  cum->mmx_nregs -= 1;\n+\t  cum->mmx_regno += 1;\n+\t  if (cum->mmx_nregs <= 0)\n+\t    {\n+\t      cum->mmx_nregs = 0;\n+\t      cum->mmx_regno = 0;\n+\t    }\n+\t}\n       else\n \t{\n \t  cum->words += words;\n@@ -2499,6 +2513,7 @@ function_arg (CUMULATIVE_ARGS *cum,\t/* current arg information */\n   int bytes =\n     (mode == BLKmode) ? int_size_in_bytes (type) : (int) GET_MODE_SIZE (mode);\n   int words = (bytes + UNITS_PER_WORD - 1) / UNITS_PER_WORD;\n+  static bool warnedsse, warnedmmx;\n \n   /* Handle a hidden AL argument containing number of registers for varargs\n      x86-64 functions.  For i386 ABI just return constm1_rtx to avoid\n@@ -2552,8 +2567,39 @@ function_arg (CUMULATIVE_ARGS *cum,\t/* current arg information */\n \t  }\n \tbreak;\n       case TImode:\n-\tif (cum->sse_nregs)\n-\t  ret = gen_rtx_REG (mode, cum->sse_regno);\n+      case V16QImode:\n+      case V8HImode:\n+      case V4SImode:\n+      case V2DImode:\n+      case V4SFmode:\n+      case V2DFmode:\n+\tif (!type || !AGGREGATE_TYPE_P (type))\n+\t  {\n+\t    if (!TARGET_SSE && !warnedmmx)\n+\t      {\n+\t\twarnedsse = true;\n+\t\twarning (\"SSE vector argument without SSE enabled \"\n+\t\t\t \"changes the ABI\");\n+\t      }\n+\t    if (cum->sse_nregs)\n+\t      ret = gen_rtx_REG (mode, cum->sse_regno + FIRST_SSE_REG);\n+\t  }\n+\tbreak;\n+      case V8QImode:\n+      case V4HImode:\n+      case V2SImode:\n+      case V2SFmode:\n+\tif (!type || !AGGREGATE_TYPE_P (type))\n+\t  {\n+\t    if (!TARGET_MMX && !warnedmmx)\n+\t      {\n+\t\twarnedmmx = true;\n+\t\twarning (\"MMX vector argument without MMX enabled \"\n+\t\t\t \"changes the ABI\");\n+\t      }\n+\t    if (cum->mmx_nregs)\n+\t      ret = gen_rtx_REG (mode, cum->mmx_regno + FIRST_MMX_REG);\n+\t  }\n \tbreak;\n       }\n "}, {"sha": "791c5ce56fd5306826e66b46c428ed1cde090c4d", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcf1755434c6301327ff7262fb829d7c5c98b20f/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcf1755434c6301327ff7262fb829d7c5c98b20f/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=bcf1755434c6301327ff7262fb829d7c5c98b20f", "patch": "@@ -1744,6 +1744,9 @@ typedef struct ix86_args {\n   int sse_words;\t\t/* # sse words passed so far */\n   int sse_nregs;\t\t/* # sse registers available for passing */\n   int sse_regno;\t\t/* next available sse register number */\n+  int mmx_words;\t\t/* # mmx words passed so far */\n+  int mmx_nregs;\t\t/* # mmx registers available for passing */\n+  int mmx_regno;\t\t/* next available mmx register number */\n   int maybe_vaarg;\t\t/* true for calls to possibly vardic fncts.  */\n } CUMULATIVE_ARGS;\n \n@@ -2531,7 +2534,9 @@ enum ix86_builtins\n \n #define REGPARM_MAX (TARGET_64BIT ? 6 : 3)\n \n-#define SSE_REGPARM_MAX (TARGET_64BIT ? 8 : 0)\n+#define SSE_REGPARM_MAX (TARGET_64BIT ? 8 : (TARGET_SSE ? 3 : 0))\n+\n+#define MMX_REGPARM_MAX (TARGET_64BIT ? 0 : (TARGET_MMX ? 3 : 0))\n \n \f\n /* Specify the machine mode that this machine uses"}, {"sha": "ca55ce96ce0de1aafde715e8252e311b6124bcec", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcf1755434c6301327ff7262fb829d7c5c98b20f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcf1755434c6301327ff7262fb829d7c5c98b20f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bcf1755434c6301327ff7262fb829d7c5c98b20f", "patch": "@@ -1,3 +1,8 @@\n+2004-01-06  Jan Hubicka  <jh@suse.cz>\n+\n+\t* gcc.dg/i386-sse-5.c: New test\n+\t* g++.dg/eh/simd-1.c: Add -w argument for i386.\n+\n 2004-01-05  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/12815"}, {"sha": "2be5e63cba4946049b4fe3d6beca0fe952d1f23a", "filename": "gcc/testsuite/g++.dg/eh/simd-1.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcf1755434c6301327ff7262fb829d7c5c98b20f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fsimd-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcf1755434c6301327ff7262fb829d7c5c98b20f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fsimd-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fsimd-1.C?ref=bcf1755434c6301327ff7262fb829d7c5c98b20f", "patch": "@@ -1,6 +1,7 @@\n // Test EH when V2SI SIMD registers are involved.\n // Contributed by Aldy Hernandez (aldy@quesejoda.com).\n // { dg-options \"-O\" }\n+// { dg-options \"-O -w\" { target i?86-*-* } }\n // { dg-do run }\n // { dg-error \"\" \"PR target/12916\" { target sparc*-*-* } 10 }\n "}, {"sha": "edb4fb4519e676096c4d1ea36bd633f9e94dbb93", "filename": "gcc/testsuite/gcc.dg/i386-sse-5.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcf1755434c6301327ff7262fb829d7c5c98b20f/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-sse-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcf1755434c6301327ff7262fb829d7c5c98b20f/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-sse-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-sse-5.c?ref=bcf1755434c6301327ff7262fb829d7c5c98b20f", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile { target i?86-*-* } } */\n+/* { dg-options \"-Winline -O2 -march=i386\" } */\n+typedef int v2df __attribute__ ((mode(V2DF)));\n+v2df p;\n+q(v2df t)\n+{\t\t\t /* { dg-warning \"SSE\" \"\" } */\n+\tp=t;\n+}"}]}