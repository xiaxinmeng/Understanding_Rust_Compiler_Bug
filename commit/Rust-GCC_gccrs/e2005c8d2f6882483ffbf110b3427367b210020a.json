{"sha": "e2005c8d2f6882483ffbf110b3427367b210020a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTIwMDVjOGQyZjY4ODI0ODNmZmJmMTEwYjM0MjczNjdiMjEwMDIwYQ==", "commit": {"author": {"name": "Kriang Lerdsuwanakij", "email": "lerdsuwa@users.sourceforge.net", "date": "2002-05-16T13:43:50Z"}, "committer": {"name": "Kriang Lerdsuwanakij", "email": "lerdsuwa@gcc.gnu.org", "date": "2002-05-16T13:43:50Z"}, "message": "re PR c++/6620 (partial template specialization on int)\n\n\tPR c++/6620\n\t* pt.c (verify_class_unification): Don't check if PARM is template\n\tparameter dependent.  Simplify.\n\t(unify) [TEMPLATE_PARM_INDEX]: Handle when ARG is a template\n\tparameter dependent expression.\n\nFrom-SVN: r53517", "tree": {"sha": "0d515ec700acc964bbf182734d4b8ff0ec745571", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0d515ec700acc964bbf182734d4b8ff0ec745571"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e2005c8d2f6882483ffbf110b3427367b210020a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2005c8d2f6882483ffbf110b3427367b210020a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2005c8d2f6882483ffbf110b3427367b210020a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2005c8d2f6882483ffbf110b3427367b210020a/comments", "author": null, "committer": null, "parents": [{"sha": "2605d809d9fb8d0246c5261f95cd13f6e8b956ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2605d809d9fb8d0246c5261f95cd13f6e8b956ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2605d809d9fb8d0246c5261f95cd13f6e8b956ce"}], "stats": {"total": 77, "additions": 54, "deletions": 23}, "files": [{"sha": "3adedeb13f3169d01ac23e7c4f334d1256137567", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2005c8d2f6882483ffbf110b3427367b210020a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2005c8d2f6882483ffbf110b3427367b210020a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e2005c8d2f6882483ffbf110b3427367b210020a", "patch": "@@ -1,3 +1,11 @@\n+2002-05-15  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n+\n+\tPR c++/6620\n+\t* pt.c (verify_class_unification): Don't check if PARM is template\n+\tparameter dependent.  Simplify.\n+\t(unify) [TEMPLATE_PARM_INDEX]: Handle when ARG is a template\n+\tparameter dependent expression.\n+\n 2002-05-14  Jason Merrill  <jason@redhat.com>\n \n \t* rtti.c (get_tinfo_decl): Don't call comdat_linkage."}, {"sha": "58fe3c57369fa453f85b7fcb8e3ed1f7f82bd9fd", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 10, "deletions": 23, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2005c8d2f6882483ffbf110b3427367b210020a/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2005c8d2f6882483ffbf110b3427367b210020a/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=e2005c8d2f6882483ffbf110b3427367b210020a", "patch": "@@ -8307,29 +8307,12 @@ static int\n verify_class_unification (targs, parms, args)\n      tree targs, parms, args;\n {\n-  int i;\n-  int nparms = TREE_VEC_LENGTH (parms);\n-  tree new_parms = tsubst (parms, add_outermost_template_args (args, targs),\n-  \t\t\t   tf_none, NULL_TREE);\n-  if (new_parms == error_mark_node)\n+  parms = tsubst (parms, add_outermost_template_args (args, targs),\n+  \t\t  tf_none, NULL_TREE);\n+  if (parms == error_mark_node)\n     return 1;\n \n-  args = INNERMOST_TEMPLATE_ARGS (args);\n-\n-  for (i = 0; i < nparms; i++)\n-    {\n-      tree parm = TREE_VEC_ELT (new_parms, i);\n-      tree arg = TREE_VEC_ELT (args, i);\n-\n-      /* In case we are deducing from a function argument of a function\n-\t templates, some parameters may not be deduced yet.  So we\n-\t make sure that only fully substituted elements of PARM are\n-\t compared below.  */\n-\n-      if (!uses_template_parms (parm) && !template_args_equal (parm, arg))\n-\treturn 1;\n-    }\n-  return 0;\n+  return !comp_template_args (parms, INNERMOST_TEMPLATE_ARGS (args));\n }\n \n /* PARM is a template class (perhaps with unbound template\n@@ -8812,8 +8795,12 @@ unify (tparms, targs, parm, arg, strict)\n \t deduced from an array bound may be of any integral type. \n \t The non-type parameter might use already deduced type parameters.  */\n       tparm = tsubst (TREE_TYPE (parm), targs, 0, NULL_TREE);\n-      if (same_type_p (TREE_TYPE (arg), tparm))\n-\t  /* OK */;\n+      if (!TREE_TYPE (arg))\n+\t/* Template-parameter dependent expression.  Just accept it for now.\n+\t   It will later be processed in convert_template_argument.  */\n+\t;\n+      else if (same_type_p (TREE_TYPE (arg), tparm))\n+\t/* OK */;\n       else if ((strict & UNIFY_ALLOW_INTEGER)\n \t       && (TREE_CODE (tparm) == INTEGER_TYPE\n \t\t   || TREE_CODE (tparm) == BOOLEAN_TYPE))"}, {"sha": "41ea530396962987bbaa5c735a85f94cdb98100a", "filename": "gcc/testsuite/g++.dg/template/partial1.C", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2005c8d2f6882483ffbf110b3427367b210020a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpartial1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2005c8d2f6882483ffbf110b3427367b210020a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpartial1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpartial1.C?ref=e2005c8d2f6882483ffbf110b3427367b210020a", "patch": "@@ -0,0 +1,36 @@\n+// { dg-do run }\n+// Origin: Jo Totland <jototland@hotmail.com>\n+\n+// PR c++/6620\n+// Partial specialization involving expression of non-type template\n+// parameter causes ICE.\n+\n+extern \"C\" void abort();\n+\n+template <int N> struct HoldInt\n+{\n+};\n+\n+template <class A, class B> struct Add\n+{\n+};\n+\n+template <int N> struct Add<HoldInt<N>, HoldInt<-N> >\n+{\n+  typedef int type;\n+  int f() { return 0; }\n+};\n+\n+template <int N, int M> \n+struct Add<HoldInt<N>, HoldInt<M> >\n+{\n+  typedef HoldInt<N+M> type;\n+  int f() { return 1; }\n+};\n+\n+int main() {\n+  Add<HoldInt<1>, HoldInt<-1> > a;\n+  Add<HoldInt<1>, HoldInt<-2> > b;\n+  if (a.f() != 0 || b.f() != 1)\n+    abort();\n+}"}]}