{"sha": "c21cd8b1a1636b56ead01ffc14e355cbcbdb3dc8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzIxY2Q4YjFhMTYzNmI1NmVhZDAxZmZjMTRlMzU1Y2JjYmRiM2RjOA==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@cam.ac.uk", "date": "2001-12-09T20:21:57Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2001-12-09T20:21:57Z"}, "message": "cpp.texi, [...]: Use American spelling.\n\n\t* doc/cpp.texi, doc/cppinternals.texi, doc/invoke.texi,\n\tdoc/md.texi, doc/rtl.texi, doc/tm.texi: Use American spelling.\n\nFrom-SVN: r47816", "tree": {"sha": "955993bc07a34f85cb202a5821883529aad29707", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/955993bc07a34f85cb202a5821883529aad29707"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c21cd8b1a1636b56ead01ffc14e355cbcbdb3dc8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c21cd8b1a1636b56ead01ffc14e355cbcbdb3dc8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c21cd8b1a1636b56ead01ffc14e355cbcbdb3dc8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c21cd8b1a1636b56ead01ffc14e355cbcbdb3dc8/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6a7951f20a6c4967e849335117e89d247226626", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6a7951f20a6c4967e849335117e89d247226626", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6a7951f20a6c4967e849335117e89d247226626"}], "stats": {"total": 75, "additions": 39, "deletions": 36}, "files": [{"sha": "ff0be645ddc0fac46aef0675f314e28963f59c0c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c21cd8b1a1636b56ead01ffc14e355cbcbdb3dc8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c21cd8b1a1636b56ead01ffc14e355cbcbdb3dc8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c21cd8b1a1636b56ead01ffc14e355cbcbdb3dc8", "patch": "@@ -1,5 +1,8 @@\n 2001-12-09  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n+\t* doc/cpp.texi, doc/cppinternals.texi, doc/invoke.texi,\n+\tdoc/md.texi, doc/rtl.texi, doc/tm.texi: Use American spelling.\n+\n \t* ChangeLog.2, ChangeLog.3, ChangeLog.5, ChangeLog, alias.c,\n \tcfgbuild.c, expmed.c, expr.c, final.c, flow.c, fold-const.c,\n \tfunction.c, config/alpha/alpha.md, config/alpha/vms-ld.c,"}, {"sha": "64e2cb7e22181200d9096f8d2991b332c5a012e0", "filename": "gcc/doc/cpp.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c21cd8b1a1636b56ead01ffc14e355cbcbdb3dc8/gcc%2Fdoc%2Fcpp.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c21cd8b1a1636b56ead01ffc14e355cbcbdb3dc8/gcc%2Fdoc%2Fcpp.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp.texi?ref=c21cd8b1a1636b56ead01ffc14e355cbcbdb3dc8", "patch": "@@ -3359,7 +3359,7 @@ if the @samp{#} appeared in column 1 on the line.  Therefore\n understands but would ignore because the @samp{#} does not appear as the\n first character on the line.  It also suggests you hide directives like\n @samp{#pragma} not understood by traditional C by indenting them.  Some\n-traditional implementations would not recognise @samp{#elif}, so it\n+traditional implementations would not recognize @samp{#elif}, so it\n suggests avoiding it altogether.\n \n @item\n@@ -3389,7 +3389,7 @@ care, though, because this gives the wrong result in exotic cases.\n \n Here we document details of how the preprocessor's implementation\n affects its user-visible behavior.  You should try to avoid undue\n-reliance on behaviour described here, as it is possible that it will\n+reliance on behavior described here, as it is possible that it will\n change subtly in future implementations.\n \n Also documented here are obsolete features and changes from previous"}, {"sha": "0f653f488fe6a19f38f4371ba0209ceb82697aae", "filename": "gcc/doc/cppinternals.texi", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c21cd8b1a1636b56ead01ffc14e355cbcbdb3dc8/gcc%2Fdoc%2Fcppinternals.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c21cd8b1a1636b56ead01ffc14e355cbcbdb3dc8/gcc%2Fdoc%2Fcppinternals.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcppinternals.texi?ref=c21cd8b1a1636b56ead01ffc14e355cbcbdb3dc8", "patch": "@@ -121,7 +121,7 @@ bare minimum necessary, and then to keep it there.  This makes clear\n exactly what external clients are entitled to assume, and allows us to\n change internals in the future without worrying whether library clients\n are perhaps relying on some kind of undocumented implementation-specific\n-behaviour.\n+behavior.\n \n @node Lexer\n @unnumbered The Lexer\n@@ -158,7 +158,7 @@ will be removed, so I'll not discuss it further here.\n \n The job of @code{_cpp_lex_direct} is simply to lex a token.  It is not\n responsible for issues like directive handling, returning lookahead\n-tokens directly, multiple-include optimisation, or conditional block\n+tokens directly, multiple-include optimization, or conditional block\n skipping.  It necessarily has a minor r@^ole to play in memory\n management of lexed lines.  I discuss these issues in a separate section\n (@pxref{Lexing a line}).\n@@ -295,7 +295,7 @@ whether a diagnostic is appropriate.  Since we change state on a\n per-token basis, and don't lex whole lines at a time, this is not a\n problem.\n \n-Another place where state flags are used to change behaviour is whilst\n+Another place where state flags are used to change behavior is whilst\n lexing header names.  Normally, a @samp{<} would be lexed as a single\n token.  After a @code{#include} directive, though, it should be lexed as\n a single token as far as the nearest @samp{>} character.  Note that we\n@@ -331,7 +331,7 @@ Occasionally the preprocessor wants to be able to peek ahead in the\n token stream.  For example, after the name of a function-like macro, it\n wants to check the next token to see if it is an opening parenthesis.\n Another example is that, after reading the first few tokens of a\n-@code{#pragma} directive and not recognising it as a registered pragma,\n+@code{#pragma} directive and not recognizing it as a registered pragma,\n it wants to backtrack and allow the user-defined handler for unknown\n pragmas to access the full @code{#pragma} token stream.  The stand-alone\n preprocessor wants to be able to test the current token with the\n@@ -426,7 +426,7 @@ time, each identifier falls into exactly one of three categories:\n \n These have been declared to be macros, either on the command line or\n with @code{#define}.  A few, such as @code{__TIME__} are built-ins\n-entered in the hash table during initialisation.  The hash node for a\n+entered in the hash table during initialization.  The hash node for a\n normal macro points to a structure with more information about the\n macro, such as whether it is function-like, how many arguments it takes,\n and its expansion.  Built-in macros are flagged as special, and instead\n@@ -882,7 +882,7 @@ the basename @samp{foo.h} as the current directory.\n \n Enough information is stored in the splay tree that CPP can immediately\n tell whether it can skip the header file because of the multiple include\n-optimisation, whether the file didn't exist or couldn't be opened for\n+optimization, whether the file didn't exist or couldn't be opened for\n some reason, or whether the header was flagged not to be re-used, as it\n is with the obsolete @code{#import} directive.\n "}, {"sha": "65008e6fa6906737465175d0ce0a66a657069013", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c21cd8b1a1636b56ead01ffc14e355cbcbdb3dc8/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c21cd8b1a1636b56ead01ffc14e355cbcbdb3dc8/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=c21cd8b1a1636b56ead01ffc14e355cbcbdb3dc8", "patch": "@@ -1710,7 +1710,7 @@ reporter to emit @emph{once} source location information; that is, in\n case the message is too long to fit on a single physical line and has to\n be wrapped, the source location won't be emitted (as prefix) again,\n over and over, in subsequent continuation lines.  This is the default\n-behaviour.\n+behavior.\n \n @item -fdiagnostics-show-location=every-line\n Only meaningful in line-wrapping mode.  Instructs the diagnostic\n@@ -2319,7 +2319,7 @@ if the @samp{#} appeared in column 1 on the line.  Therefore\n understands but would ignore because the @samp{#} does not appear as the\n first character on the line.  It also suggests you hide directives like\n @samp{#pragma} not understood by traditional C by indenting them.  Some\n-traditional implementations would not recognise @samp{#elif}, so it\n+traditional implementations would not recognize @samp{#elif}, so it\n suggests avoiding it altogether.\n \n @item\n@@ -2558,7 +2558,7 @@ This option is not made part of @option{-Wall} because in a debugging\n version of a program there is often substantial code which checks\n correct functioning of the program and is, hopefully, unreachable\n because the program does work.  Another common use of unreachable\n-code is to provide behaviour which is selectable at compile-time.\n+code is to provide behavior which is selectable at compile-time.\n \n @item -Winline\n @opindex Winline\n@@ -3316,7 +3316,7 @@ Attempt to merge identical constants (string constants and floating point\n constants) accross compilation units.\n \n This option is default for optimized compilation if assembler and linker\n-support it.  Use @option{-fno-merge-constants} to inhibit this behaviour.\n+support it.  Use @option{-fno-merge-constants} to inhibit this behavior.\n \n @item -fmerge-all-constants\n Attempt to merge identical constants and identical variables.\n@@ -3326,7 +3326,7 @@ This option implies @option{-fmerge-constants}.  In addition to\n arrays or initialized constant variables with integral or floating point\n types.  Languages like C or C++ require each non-automatic variable to\n have distinct location, so using this option will result in non-conforming\n-behaviour.\n+behavior.\n \n @item -fno-function-cse\n @opindex fno-function-cse\n@@ -4479,10 +4479,10 @@ are processed in order, from left to right.\n sequence of other programs to do the work of compiling, assembling and\n linking.  GCC interprets its command-line parameters and uses these to\n deduce which programs it should invoke, and which command-line options\n-it ought to place on their command lines.  This behaviour is controlled\n+it ought to place on their command lines.  This behavior is controlled\n by @dfn{spec strings}.  In most cases there is one spec string for each\n program that GCC can invoke, but a few programs have multiple spec\n-strings to control their behaviour.  The spec strings built into GCC can\n+strings to control their behavior.  The spec strings built into GCC can\n be overridden by using the @option{-specs=} command-line switch to specify\n a spec file.\n \n@@ -5462,7 +5462,7 @@ They have been replaced with @option{-mcpu=xxx}.\n @itemx -msupersparc\n @opindex mcypress\n @opindex msupersparc\n-These two options select the processor for which the code is optimised.\n+These two options select the processor for which the code is optimized.\n \n With @option{-mcypress} (the default), the compiler optimizes code for the\n Cypress CY7C602 chip, as used in the SparcStation/SparcServer 3xx series.\n@@ -6048,7 +6048,7 @@ the scope of a @samp{#pragma long_calls} directive, will always be\n turned into long calls.\n \n This feature is not enabled by default.  Specifying\n-@option{-mno-long-calls} will restore the default behaviour, as will\n+@option{-mno-long-calls} will restore the default behavior, as will\n placing the function calls within the scope of a @samp{#pragma\n long_calls_off} directive.  Note these switches have no effect on how\n the compiler generates code to handle function calls via function\n@@ -6062,7 +6062,7 @@ Disable support for the @code{dllimport} attribute.\n @opindex msingle-pic-base\n Treat the register used for PIC addressing as read-only, rather than\n loading it in the prologue for each function.  The run-time system is\n-responsible for initialising this register with an appropriate value\n+responsible for initializing this register with an appropriate value\n before execution begins.\n \n @item -mpic-register=@var{reg}"}, {"sha": "df0fb62bd65ff225c0052b43144588b72d7a470a", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c21cd8b1a1636b56ead01ffc14e355cbcbdb3dc8/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c21cd8b1a1636b56ead01ffc14e355cbcbdb3dc8/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=c21cd8b1a1636b56ead01ffc14e355cbcbdb3dc8", "patch": "@@ -2748,8 +2748,8 @@ too large for this instruction, make it fail.\n @cindex @code{doloop_begin} instruction pattern\n @item @samp{doloop_begin}\n Companion instruction to @code{doloop_end} required for machines that\n-need to perform some initialisation, such as loading special registers\n-used by a low-overhead looping instruction.  If initialisation insns do\n+need to perform some initialization, such as loading special registers\n+used by a low-overhead looping instruction.  If initialization insns do\n not always need to be emitted, use a @code{define_expand}\n (@pxref{Expander Definitions}) and make it fail.\n \n@@ -3331,13 +3331,13 @@ pattern will not be matched by the combiner.\n @end smallexample\n \n The other two special looping patterns, @samp{doloop_begin} and\n-@samp{doloop_end}, are emitted by the loop optimiser for certain\n+@samp{doloop_end}, are emitted by the loop optimizer for certain\n well-behaved loops with a finite number of loop iterations using\n information collected during strength reduction.\n \n The @samp{doloop_end} pattern describes the actual looping instruction\n (or the implicit looping operation) and the @samp{doloop_begin} pattern\n-is an optional companion pattern that can be used for initialisation\n+is an optional companion pattern that can be used for initialization\n needed for some low-overhead looping instructions.\n \n Note that some machines require the actual looping instruction to be\n@@ -3866,7 +3866,7 @@ the central flowgraph and branch prediction information needs to be updated,\n several restriction apply. \n \n Splitting of jump instruction into sequence that over by another jump\n-instruction is always valid, as compiler expect identical behaviour of new\n+instruction is always valid, as compiler expect identical behavior of new\n jump.  When new sequence contains multiple jump instructions or new labels,\n more assistance is needed.  Splitter is required to create only unconditional\n jumps, or simple conditional jump instructions.  Additionally it must attach a"}, {"sha": "a137b3dd64affae13a1f3d747b07db7dbfda86e0", "filename": "gcc/doc/rtl.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c21cd8b1a1636b56ead01ffc14e355cbcbdb3dc8/gcc%2Fdoc%2Frtl.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c21cd8b1a1636b56ead01ffc14e355cbcbdb3dc8/gcc%2Fdoc%2Frtl.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Frtl.texi?ref=c21cd8b1a1636b56ead01ffc14e355cbcbdb3dc8", "patch": "@@ -2181,7 +2181,7 @@ store a value in @var{x}.  @var{x} must be a @code{reg} expression.\n \n In some situations, it may be tempting to add a @code{use} of a\n register in a @code{parallel} to describe a situation where the value\n-of a special register will modify the behaviour of the instruction.\n+of a special register will modify the behavior of the instruction.\n An hypothetical example might be a pattern for an addition that can\n either wrap around or use saturating addition depending on the value\n of a special control register:"}, {"sha": "8c7493954295f45dcd3a5417304270bc10997e03", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c21cd8b1a1636b56ead01ffc14e355cbcbdb3dc8/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c21cd8b1a1636b56ead01ffc14e355cbcbdb3dc8/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=c21cd8b1a1636b56ead01ffc14e355cbcbdb3dc8", "patch": "@@ -816,7 +816,7 @@ to their own specific data.\n \n If a target needs per-function specific data it should define the type\n @code{struct machine_function} and also the macro\n-@code{INIT_EXPANDERS}.  This macro should be used to initialise some or\n+@code{INIT_EXPANDERS}.  This macro should be used to initialize some or\n all of the function pointers @code{init_machine_status},\n @code{free_machine_status} and @code{mark_machine_status}.  These\n pointers are explained below.\n@@ -841,18 +841,18 @@ The macro and function pointers are described below.\n @table @code\n @findex INIT_EXPANDERS\n @item   INIT_EXPANDERS\n-Macro called to initialise any target specific information.  This macro\n+Macro called to initialize any target specific information.  This macro\n is called once per function, before generation of any RTL has begun.\n-The intention of this macro is to allow the initialisation of the\n+The intention of this macro is to allow the initialization of the\n function pointers below.\n \n @findex init_machine_status\n @item   init_machine_status\n This is a @code{void (*)(struct function *)} function pointer.  If this\n pointer is non-@code{NULL} it will be called once per function, before function\n compilation starts, in order to allow the target to perform any target\n-specific initialisation of the @code{struct function} structure.  It is\n-intended that this would be used to initialise the @code{machine} of\n+specific initialization of the @code{struct function} structure.  It is\n+intended that this would be used to initialize the @code{machine} of\n that structure.\n \n @findex free_machine_status\n@@ -5591,8 +5591,8 @@ A C statement to build up a unique section name, expressed as a\n @var{reloc} indicates whether the initial value of @var{exp} requires\n link-time relocations.  If you do not define this macro, GCC will use\n the symbol name prefixed by @samp{.} as the section name.  Note - this\n-macro can now be called for uninitialised data items as well as\n-initialised data and functions.\n+macro can now be called for uninitialized data items as well as\n+initialized data and functions.\n @end table\n \n @node PIC\n@@ -7137,7 +7137,7 @@ define the macro.\n \n Unless it's necessary to inspect the @var{label} parameter, it is better\n to set the variable @var{align_jumps} in the target's\n-@code{OVERRIDE_OPTIONS}.  Otherwise, you should try to honour the user's\n+@code{OVERRIDE_OPTIONS}.  Otherwise, you should try to honor the user's\n selection in @var{align_jumps} in a @code{JUMP_ALIGN} implementation.\n \n @findex LABEL_ALIGN_AFTER_BARRIER\n@@ -7166,7 +7166,7 @@ define the macro.\n \n Unless it's necessary to inspect the @var{label} parameter, it is better\n to set the variable @code{align_loops} in the target's\n-@code{OVERRIDE_OPTIONS}.  Otherwise, you should try to honour the user's\n+@code{OVERRIDE_OPTIONS}.  Otherwise, you should try to honor the user's\n selection in @code{align_loops} in a @code{LOOP_ALIGN} implementation.\n \n @findex LOOP_ALIGN_MAX_SKIP\n@@ -7182,7 +7182,7 @@ the maximum of the specified values is used.\n \n Unless it's necessary to inspect the @var{label} parameter, it is better\n to set the variable @code{align_labels} in the target's\n-@code{OVERRIDE_OPTIONS}.  Otherwise, you should try to honour the user's\n+@code{OVERRIDE_OPTIONS}.  Otherwise, you should try to honor the user's\n selection in @code{align_labels} in a @code{LABEL_ALIGN} implementation.\n \n @findex LABEL_ALIGN_MAX_SKIP\n@@ -8453,7 +8453,7 @@ pragmas @samp{#pragma pack(<n>)} and @samp{#pragma weak <name>\n The pack pragma specifies the maximum alignment (in bytes) of fields\n within a structure, in much the same way as the @samp{__aligned__} and\n @samp{__packed__} @code{__attribute__}s do.  A pack value of zero resets\n-the behaviour to the default.\n+the behavior to the default.\n \n The weak pragma only works if @code{SUPPORTS_WEAK} and\n @code{ASM_WEAKEN_LABEL} are defined.  If enabled it allows the creation\n@@ -8468,7 +8468,7 @@ style pragmas @samp{#pragma pack(push,@var{n})} and @samp{#pragma\n pack(pop)}.  The @samp{pack(push,@var{n})} pragma specifies the maximum alignment\n (in bytes) of fields within a structure, in much the same way as the\n @samp{__aligned__} and @samp{__packed__} @code{__attribute__}s do.  A\n-pack value of zero resets the behaviour to the default.  Successive\n+pack value of zero resets the behavior to the default.  Successive\n invocations of this pragma cause the previous values to be stacked, so\n that invocations of @samp{#pragma pack(pop)} will return to the previous\n value."}]}