{"sha": "21c0137a8af4ea11e48c8509799ebcbb1eb374bf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjFjMDEzN2E4YWY0ZWExMWU0OGM4NTA5Nzk5ZWJjYmIxZWIzNzRiZg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2015-02-09T17:01:36Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2015-02-09T17:01:36Z"}, "message": "re PR target/64979 (stdarg optimization not able to find escape sites in phi nodes)\n\n\tPR target/64979\n\t* tree-stdarg.c (pass_stdarg::execute): Scan phi node args for\n\tva_list escapes.\n\n\t* gcc.dg/tree-ssa/stdarg-7.c: New test.\n\t* gcc.c-torture/execute/pr64979.c: New test.\n\nFrom-SVN: r220543", "tree": {"sha": "ceda52eaeb57baf1c0dbf7e40eb9bd2804179661", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ceda52eaeb57baf1c0dbf7e40eb9bd2804179661"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/21c0137a8af4ea11e48c8509799ebcbb1eb374bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21c0137a8af4ea11e48c8509799ebcbb1eb374bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21c0137a8af4ea11e48c8509799ebcbb1eb374bf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21c0137a8af4ea11e48c8509799ebcbb1eb374bf/comments", "author": null, "committer": null, "parents": [{"sha": "468963de96f93d1df2fbdb945c7bf23678d9f40d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/468963de96f93d1df2fbdb945c7bf23678d9f40d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/468963de96f93d1df2fbdb945c7bf23678d9f40d"}], "stats": {"total": 119, "additions": 103, "deletions": 16}, "files": [{"sha": "78c1af1e2e4a792b487b04c1c7973cc3290f2de9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21c0137a8af4ea11e48c8509799ebcbb1eb374bf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21c0137a8af4ea11e48c8509799ebcbb1eb374bf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=21c0137a8af4ea11e48c8509799ebcbb1eb374bf", "patch": "@@ -1,3 +1,9 @@\n+2015-02-09  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/64979\n+\t* tree-stdarg.c (pass_stdarg::execute): Scan phi node args for\n+\tva_list escapes.\n+\n 2015-02-09  Richard Biener  <rguenther@suse.de>\n \n \t* genmatch.c (replace_id): Copy expr_type."}, {"sha": "4fd039790e5d398902a4f41a3a86a00081255463", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21c0137a8af4ea11e48c8509799ebcbb1eb374bf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21c0137a8af4ea11e48c8509799ebcbb1eb374bf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=21c0137a8af4ea11e48c8509799ebcbb1eb374bf", "patch": "@@ -1,4 +1,10 @@\n-2015-02-29  Alan Lawrence  <alan.lawrence@arm.com>\n+2015-02-09  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/64979\n+\t* gcc.dg/tree-ssa/stdarg-7.c: New test.\n+\t* gcc.c-torture/execute/pr64979.c: New test.\n+\n+2015-02-09  Alan Lawrence  <alan.lawrence@arm.com>\n \n \t* gcc.target/arm/macro_defs0.c: Remove extraneous \"target\"\n "}, {"sha": "ccb46087e029a1cf99efb4057a78324884b40116", "filename": "gcc/testsuite/gcc.c-torture/execute/pr64979.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21c0137a8af4ea11e48c8509799ebcbb1eb374bf/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr64979.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21c0137a8af4ea11e48c8509799ebcbb1eb374bf/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr64979.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr64979.c?ref=21c0137a8af4ea11e48c8509799ebcbb1eb374bf", "patch": "@@ -0,0 +1,36 @@\n+/* PR target/64979 */\n+\n+#include <stdarg.h>\n+\n+void __attribute__((noinline, noclone))\n+bar (int x, va_list *ap)\n+{\n+  if (ap)\n+    {\n+      int i;\n+      for (i = 0; i < 10; i++)\n+\tif (i != va_arg (*ap, int))\n+\t  __builtin_abort ();\n+      if (va_arg (*ap, double) != 0.5)\n+\t__builtin_abort ();\n+    }\n+}\n+\n+void __attribute__((noinline, noclone))\n+foo (int x, ...)\n+{\n+  va_list ap;\n+  int n;\n+\n+  va_start (ap, x);\n+  n = va_arg (ap, int);\n+  bar (x, (va_list *) ((n == 0) ? ((void *) 0) : &ap));\n+  va_end (ap);\n+}\n+\n+int\n+main ()\n+{\n+  foo (100, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0.5);\n+  return 0;\n+}"}, {"sha": "9b497c072700e491fbf2eaf412317eec18ec9922", "filename": "gcc/testsuite/gcc.dg/tree-ssa/stdarg-7.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21c0137a8af4ea11e48c8509799ebcbb1eb374bf/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fstdarg-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21c0137a8af4ea11e48c8509799ebcbb1eb374bf/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fstdarg-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fstdarg-7.c?ref=21c0137a8af4ea11e48c8509799ebcbb1eb374bf", "patch": "@@ -0,0 +1,22 @@\n+/* PR target/64979 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-stdarg\" } */\n+\n+#include <stdarg.h>\n+\n+void bar (int x, va_list *ap);\n+\n+void\n+foo (int x, ...)\n+{\n+  va_list ap;\n+  int n;\n+\n+  va_start (ap, x);\n+  n = va_arg (ap, int);\n+  bar (x, (va_list *) ((n == 0) ? ((void *) 0) : &ap));\n+  va_end (ap);\n+}\n+\n+/* { dg-final { scan-tree-dump \"foo: va_list escapes 1, needs to save all GPR units and all FPR units\" \"stdarg\" } } */\n+/* { dg-final { cleanup-tree-dump \"stdarg\" } } */"}, {"sha": "2cf0ca3ec8f4387e9014d9043c1432ad03f0001e", "filename": "gcc/tree-stdarg.c", "status": "modified", "additions": 32, "deletions": 15, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21c0137a8af4ea11e48c8509799ebcbb1eb374bf/gcc%2Ftree-stdarg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21c0137a8af4ea11e48c8509799ebcbb1eb374bf/gcc%2Ftree-stdarg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-stdarg.c?ref=21c0137a8af4ea11e48c8509799ebcbb1eb374bf", "patch": "@@ -856,22 +856,23 @@ pass_stdarg::execute (function *fun)\n       /* For va_list_simple_ptr, we have to check PHI nodes too.  We treat\n \t them as assignments for the purpose of escape analysis.  This is\n \t not needed for non-simple va_list because virtual phis don't perform\n-\t any real data movement.  */\n-      if (va_list_simple_ptr)\n-\t{\n-\t  tree lhs, rhs;\n-\t  use_operand_p uop;\n-\t  ssa_op_iter soi;\n+\t any real data movement.  Also, check PHI nodes for taking address of\n+\t the va_list vars.  */\n+      tree lhs, rhs;\n+      use_operand_p uop;\n+      ssa_op_iter soi;\n \n-\t  for (gphi_iterator i = gsi_start_phis (bb); !gsi_end_p (i);\n-\t       gsi_next (&i))\n-\t    {\n-\t      gphi *phi = i.phi ();\n-\t      lhs = PHI_RESULT (phi);\n+      for (gphi_iterator i = gsi_start_phis (bb); !gsi_end_p (i);\n+\t   gsi_next (&i))\n+\t{\n+\t  gphi *phi = i.phi ();\n+\t  lhs = PHI_RESULT (phi);\n \n-\t      if (virtual_operand_p (lhs))\n-\t\tcontinue;\n+\t  if (virtual_operand_p (lhs))\n+\t    continue;\n \n+\t  if (va_list_simple_ptr)\n+\t    {\n \t      FOR_EACH_PHI_ARG (uop, phi, soi, SSA_OP_USE)\n \t\t{\n \t\t  rhs = USE_FROM_PTR (uop);\n@@ -894,6 +895,22 @@ pass_stdarg::execute (function *fun)\n \t\t    }\n \t\t}\n \t    }\n+\n+\t  for (unsigned j = 0; !va_list_escapes\n+\t\t\t       && j < gimple_phi_num_args (phi); ++j)\n+\t    if ((!va_list_simple_ptr\n+\t\t || TREE_CODE (gimple_phi_arg_def (phi, j)) != SSA_NAME)\n+\t\t&& walk_tree (gimple_phi_arg_def_ptr (phi, j),\n+\t\t\t      find_va_list_reference, &wi, NULL))\n+\t      {\n+\t\tif (dump_file && (dump_flags & TDF_DETAILS))\n+\t\t  {\n+\t\t    fputs (\"va_list escapes in \", dump_file);\n+\t\t    print_gimple_stmt (dump_file, phi, 0, dump_flags);\n+\t\t    fputc ('\\n', dump_file);\n+\t\t  }\n+\t\tva_list_escapes = true;\n+\t      }\n \t}\n \n       for (gimple_stmt_iterator i = gsi_start_bb (bb);\n@@ -916,8 +933,8 @@ pass_stdarg::execute (function *fun)\n \n \t  if (is_gimple_assign (stmt))\n \t    {\n-\t      tree lhs = gimple_assign_lhs (stmt);\n-\t      tree rhs = gimple_assign_rhs1 (stmt);\n+\t      lhs = gimple_assign_lhs (stmt);\n+\t      rhs = gimple_assign_rhs1 (stmt);\n \n \t      if (va_list_simple_ptr)\n \t\t{"}]}