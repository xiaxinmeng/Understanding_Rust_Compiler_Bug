{"sha": "6c6094f12fae0fe23eb390a115645d78f82a42c1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmM2MDk0ZjEyZmFlMGZlMjNlYjM5MGExMTU2NDVkNzhmODJhNDJjMQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2009-03-05T07:34:16Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2009-03-05T07:34:16Z"}, "message": "i386.md (R8_REG, R9_REG): New constants.\n\n\t* config/i386/i386.md (R8_REG, R9_REG): New constants.\n\t* config/i386/i386.h (CONDITIONAL_REGISTER_USAGE): Use named\n\tconstants instead of magic numbers.\n\t(HARD_REGNO_CALLER_SAVE_MODE): Ditto.\n\t(QI_REG_P): Ditto.\n\t* config/i386/i386.c (x86_64_int_parameter_registers): Ditto.\n\t(x86_64_ms_abi_int_parameter_registers): Ditto.\n\t(x86_64_int_return_registers): Ditto.\n\t(ix86_expand_call): Ditto for clobbered_registers array.\n\t(ix86_hard_regno_mode_ok): Ditto.\n\t(x86_extended_QIreg_mentioned_p): Ditto.\n\nFrom-SVN: r144638", "tree": {"sha": "b68449fdd33093d4d346ef846fa9dbcf88b3da3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b68449fdd33093d4d346ef846fa9dbcf88b3da3a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6c6094f12fae0fe23eb390a115645d78f82a42c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c6094f12fae0fe23eb390a115645d78f82a42c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c6094f12fae0fe23eb390a115645d78f82a42c1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c6094f12fae0fe23eb390a115645d78f82a42c1/comments", "author": null, "committer": null, "parents": [{"sha": "d095e03c25490c14ec610ce9ce4749f3e908a752", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d095e03c25490c14ec610ce9ce4749f3e908a752", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d095e03c25490c14ec610ce9ce4749f3e908a752"}], "stats": {"total": 95, "additions": 58, "deletions": 37}, "files": [{"sha": "d2629d61ddfd7027f0837deccf4a4f621e7f76ae", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 7, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c6094f12fae0fe23eb390a115645d78f82a42c1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c6094f12fae0fe23eb390a115645d78f82a42c1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6c6094f12fae0fe23eb390a115645d78f82a42c1", "patch": "@@ -1,14 +1,28 @@\n+2009-03-05  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (R8_REG, R9_REG): New constants.\n+\t* config/i386/i386.h (CONDITIONAL_REGISTER_USAGE): Use named\n+\tconstants instead of magic numbers.\n+\t(HARD_REGNO_CALLER_SAVE_MODE): Ditto.\n+\t(QI_REG_P): Ditto.\n+\t* config/i386/i386.c (x86_64_int_parameter_registers): Ditto.\n+\t(x86_64_ms_abi_int_parameter_registers): Ditto.\n+\t(x86_64_int_return_registers): Ditto.\n+\t(ix86_expand_call): Ditto for clobbered_registers array.\n+\t(ix86_hard_regno_mode_ok): Ditto.\n+\t(x86_extended_QIreg_mentioned_p): Ditto.\n+\n 2009-03-05  J\"orn Rennecke  <joern.rennecke@arc.com>\n \n-\tPR tree-optimization/39349:\n+\tPR tree-optimization/39349\n \t* cse.c (cse_insn): Fix loop to stop at VOIDmode.\n \n \t* combine.c (gen_lowpart_for_combine): Use omode when generating\n \tclobber.\n \n 2009-03-04  J\"orn Rennecke  <joern.rennecke@arc.com>\n \n-\tPR rtl-optimization/39235:\n+\tPR rtl-optimization/39235\n \t* loop-iv.c (get_simple_loop_desc): Use XCNEW.\n \n 2009-03-04  Zdenek Dvorak  <ook@ucw.cz>\n@@ -110,10 +124,10 @@\n \n \t* config/i386/i386.md (ST?_REG, MM?_REG): New constants.\n \t(*call_1_rex64_ms_sysv): Use named constants instead of magic\n-\tnumbers to describe clobbbered registers.\n+\tnumbers to describe clobbered registers.\n \t(*call_value_0_rex64_ms_sysv): Ditto.\n-\t* config/i386/mmx.md (emms): Ditto.\n-\t(femms): Ditto.\n+\t* config/i386/mmx.md (mmx_emms): Ditto.\n+\t(mmx_femms): Ditto.\n \n 2009-03-02  Richard Sandiford  <rdsandiford@googlemail.com>\n \n@@ -321,7 +335,7 @@\n \n \tPR tree-optimization/39259\n \t* tree-inline.c (initialize_cfun): Remove asserts for calls_setjmp and\n-\talls_alloca function flags.\n+\tcalls_alloca function flags.\n \t(copy_bb): Set calls_setjmp and alls_alloca function flags if such\n \tcalls are detected.\n \n@@ -714,7 +728,7 @@\n \n \tPR target/39149\n \t* config/i386/i386.c (override_options): Correct warning\n-\tmessages for -malign-loops,  -malign-jumps and -malign-functions.\n+\tmessages for -malign-loops, -malign-jumps and -malign-functions.\n \n 2009-02-13  H.J. Lu  <hongjiu.lu@intel.com>\n "}, {"sha": "4f7f943819de4b7ff5d146ef6461845c0695e8e2", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 26, "deletions": 21, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c6094f12fae0fe23eb390a115645d78f82a42c1/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c6094f12fae0fe23eb390a115645d78f82a42c1/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=6c6094f12fae0fe23eb390a115645d78f82a42c1", "patch": "@@ -1533,24 +1533,8 @@ int const dbx_register_map[FIRST_PSEUDO_REGISTER] =\n   -1, -1, -1, -1, -1, -1, -1, -1,\t/* extended SSE registers */\n };\n \n-static int const x86_64_int_parameter_registers[6] =\n-{\n-  5 /*RDI*/, 4 /*RSI*/, 1 /*RDX*/, 2 /*RCX*/,\n-  FIRST_REX_INT_REG /*R8 */, FIRST_REX_INT_REG + 1 /*R9 */\n-};\n-\n-static int const x86_64_ms_abi_int_parameter_registers[4] =\n-{\n-  2 /*RCX*/, 1 /*RDX*/,\n-  FIRST_REX_INT_REG /*R8 */, FIRST_REX_INT_REG + 1 /*R9 */\n-};\n-\n-static int const x86_64_int_return_registers[4] =\n-{\n-  0 /*RAX*/, 1 /*RDX*/, 5 /*RDI*/, 4 /*RSI*/\n-};\n-\n /* The \"default\" register map used in 64bit mode.  */\n+\n int const dbx64_register_map[FIRST_PSEUDO_REGISTER] =\n {\n   0, 1, 2, 3, 4, 5, 6, 7,\t\t/* general regs */\n@@ -1634,6 +1618,23 @@ rtx ix86_compare_op0 = NULL_RTX;\n rtx ix86_compare_op1 = NULL_RTX;\n rtx ix86_compare_emitted = NULL_RTX;\n \n+/* Define parameter passing and return registers.  */\n+\n+static int const x86_64_int_parameter_registers[6] =\n+{\n+  DI_REG, SI_REG, DX_REG, CX_REG, R8_REG, R9_REG\n+};\n+\n+static int const x86_64_ms_abi_int_parameter_registers[4] =\n+{\n+  CX_REG, DX_REG, R8_REG, R9_REG\n+};\n+\n+static int const x86_64_int_return_registers[4] =\n+{\n+  AX_REG, DX_REG, DI_REG, SI_REG\n+};\n+\n /* Define the structure for the machine field in struct function.  */\n \n struct stack_local_entry GTY(())\n@@ -18684,8 +18685,12 @@ ix86_expand_call (rtx retval, rtx fnaddr, rtx callarg1,\n      by SYSV calls.  */\n   if (ix86_cfun_abi () == MS_ABI && function_call_abi == SYSV_ABI)\n     {\n-      static int clobbered_registers[] = {27, 28, 45, 46, 47, 48, 49, 50, 51,\n-      \t\t\t\t\t  52, SI_REG, DI_REG};\n+      static int clobbered_registers[] = {\n+\tXMM6_REG, XMM7_REG, XMM8_REG,\n+\tXMM9_REG, XMM10_REG, XMM11_REG,\n+\tXMM12_REG, XMM13_REG, XMM14_REG,\n+\tXMM15_REG, SI_REG, DI_REG\n+      };\n       unsigned int i;\n       rtx vec[ARRAY_SIZE (clobbered_registers) + 2];\n       rtx unspec = gen_rtx_UNSPEC (VOIDmode, gen_rtvec (1, const0_rtx),\n@@ -25757,7 +25762,7 @@ ix86_hard_regno_mode_ok (int regno, enum machine_mode mode)\n     {\n       /* Take care for QImode values - they can be in non-QI regs,\n \t but then they do cause partial register stalls.  */\n-      if (regno < 4 || TARGET_64BIT)\n+      if (regno <= BX_REG || TARGET_64BIT)\n \treturn 1;\n       if (!TARGET_PARTIAL_REG_STALL)\n \treturn 1;\n@@ -26869,7 +26874,7 @@ x86_extended_QIreg_mentioned_p (rtx insn)\n   extract_insn_cached (insn);\n   for (i = 0; i < recog_data.n_operands; i++)\n     if (REG_P (recog_data.operand[i])\n-\t&& REGNO (recog_data.operand[i]) >= 4)\n+\t&& REGNO (recog_data.operand[i]) > BX_REG)\n        return true;\n   return false;\n }"}, {"sha": "f2f4448d15e716fe97dc74462b4c517fd5ce9bd1", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c6094f12fae0fe23eb390a115645d78f82a42c1/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c6094f12fae0fe23eb390a115645d78f82a42c1/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=6c6094f12fae0fe23eb390a115645d78f82a42c1", "patch": "@@ -938,10 +938,10 @@ do {\t\t\t\t\t\t\t\t\t\\\n \t&& ((cfun && cfun->machine->call_abi == MS_ABI)\t\t\t\\\n \t    || (!cfun && DEFAULT_ABI == MS_ABI)))\t\t\t\\\n       {\t\t\t\t\t\t\t\t\t\\\n-\tcall_used_regs[4 /*RSI*/] = 0;\t\t\t\t\t\\\n-\tcall_used_regs[5 /*RDI*/] = 0;\t\t\t\t\t\\\n-\tcall_used_regs[27 /*XMM6*/] = 0;\t\t\t\t\\\n-\tcall_used_regs[28 /*XMM7*/] = 0;\t\t\t\t\\\n+\tcall_used_regs[SI_REG] = 0;\t\t\t\t\t\\\n+\tcall_used_regs[DI_REG] = 0;\t\t\t\t\t\\\n+\tcall_used_regs[XMM6_REG] = 0;\t\t\t\t\t\\\n+\tcall_used_regs[XMM7_REG] = 0;\t\t\t\t\t\\\n \tfor (i = FIRST_REX_SSE_REG; i <= LAST_REX_SSE_REG; i++)\t\t\\\n \t  call_used_regs[i] = 0;\t\t\t\t\t\\\n       }\t\t\t\t\t\t\t\t\t\\\n@@ -1073,7 +1073,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n    : (MODE) == VOIDmode && (NREGS) != 1 ? VOIDmode\t\t\t\\\n    : (MODE) == VOIDmode ? choose_hard_reg_mode ((REGNO), (NREGS), false) \\\n    : (MODE) == HImode && !TARGET_PARTIAL_REG_STALL ? SImode\t\t\\\n-   : (MODE) == QImode && (REGNO) >= 4 && !TARGET_64BIT ? SImode \t\\\n+   : (MODE) == QImode && (REGNO) > BX_REG && !TARGET_64BIT ? SImode \t\\\n    : (MODE))\n \n /* Specify the registers used for certain standard purposes.\n@@ -1310,7 +1310,7 @@ enum reg_class\n \n #define SMALL_REGISTER_CLASSES 1\n \n-#define QI_REG_P(X) (REG_P (X) && REGNO (X) < 4)\n+#define QI_REG_P(X) (REG_P (X) && REGNO (X) <= BX_REG)\n \n #define GENERAL_REGNO_P(N) \\\n   ((N) <= STACK_POINTER_REGNUM || REX_INT_REGNO_P (N))\n@@ -1508,7 +1508,8 @@ enum reg_class\n    prologue and apilogue.  This is not possible without\n    ACCUMULATE_OUTGOING_ARGS.  */\n \n-#define ACCUMULATE_OUTGOING_ARGS (TARGET_ACCUMULATE_OUTGOING_ARGS || ix86_cfun_abi () == MS_ABI)\n+#define ACCUMULATE_OUTGOING_ARGS \\\n+  (TARGET_ACCUMULATE_OUTGOING_ARGS || ix86_cfun_abi () == MS_ABI)\n \n /* If defined, a C expression whose value is nonzero when we want to use PUSH\n    instructions to pass outgoing arguments.  */"}, {"sha": "761a5e70c680095c722d19221038a3554358c086", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c6094f12fae0fe23eb390a115645d78f82a42c1/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c6094f12fae0fe23eb390a115645d78f82a42c1/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=6c6094f12fae0fe23eb390a115645d78f82a42c1", "patch": "@@ -291,6 +291,8 @@\n    (MM5_REG\t\t\t34)\n    (MM6_REG\t\t\t35)\n    (MM7_REG\t\t\t36)\n+   (R8_REG\t\t\t37)\n+   (R9_REG\t\t\t38)\n    (R10_REG\t\t\t39)\n    (R11_REG\t\t\t40)\n    (R13_REG\t\t\t42)"}, {"sha": "fc15129ffc63a0f6ccd0e3c7d3b42008bdcb1fcd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c6094f12fae0fe23eb390a115645d78f82a42c1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c6094f12fae0fe23eb390a115645d78f82a42c1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6c6094f12fae0fe23eb390a115645d78f82a42c1", "patch": "@@ -53,8 +53,7 @@\n 2009-03-03  Ira Rosen  <irar@il.ibm.com>\n \n \tPR tree-optimization/39248\n-\t* gcc.dg/vect/vect-complex-1.c: Add attribute aligned\n-\tto the arrays.\n+\t* gcc.dg/vect/vect-complex-1.c: Add attribute aligned to the arrays.\n \t* gcc.dg/vect/vect-iv-6.c: Don't expect to fail to vectorize\n \ton targets without vector misalignment support.\n \t* lib/target-supports.exp "}]}