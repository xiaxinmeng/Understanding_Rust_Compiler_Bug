{"sha": "152334cfb7a17bb3f1356f31a2e808d3ee459605", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTUyMzM0Y2ZiN2ExN2JiM2YxMzU2ZjMxYTJlODA4ZDNlZTQ1OTYwNQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-04-15T09:52:16Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-04-26T09:04:00Z"}, "message": "Remove gimplify_buildN API use from complex lowering\n\nThis removes the legacy gimplify_buildN API use from complex lowering.\n\n2021-04-15  Richard Biener  <rguenther@suse.de>\n\n\t* tree-complex.c: Include gimple-fold.h.\n\t(expand_complex_addition): Use gimple_build.\n\t(expand_complex_multiplication_components): Likewise.\n\t(expand_complex_multiplication): Likewise.\n\t(expand_complex_div_straight): Likewise.\n\t(expand_complex_div_wide): Likewise.\n\t(expand_complex_division): Likewise.\n\t(expand_complex_conjugate): Likewise.\n\t(expand_complex_comparison): Likewise.", "tree": {"sha": "7e431f0c8f9bb27b90a0a5a6b8662edb0283634f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e431f0c8f9bb27b90a0a5a6b8662edb0283634f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/152334cfb7a17bb3f1356f31a2e808d3ee459605", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/152334cfb7a17bb3f1356f31a2e808d3ee459605", "html_url": "https://github.com/Rust-GCC/gccrs/commit/152334cfb7a17bb3f1356f31a2e808d3ee459605", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/152334cfb7a17bb3f1356f31a2e808d3ee459605/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76da5b8e65aacdfcca73e0e6e0477c8a4ca7d773", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76da5b8e65aacdfcca73e0e6e0477c8a4ca7d773", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76da5b8e65aacdfcca73e0e6e0477c8a4ca7d773"}], "stats": {"total": 232, "additions": 132, "deletions": 100}, "files": [{"sha": "d7d991714de4ecad4771ed30b7b4fd51fd0939ba", "filename": "gcc/tree-complex.c", "status": "modified", "additions": 132, "deletions": 100, "changes": 232, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/152334cfb7a17bb3f1356f31a2e808d3ee459605/gcc%2Ftree-complex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/152334cfb7a17bb3f1356f31a2e808d3ee459605/gcc%2Ftree-complex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-complex.c?ref=152334cfb7a17bb3f1356f31a2e808d3ee459605", "patch": "@@ -40,6 +40,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-hasher.h\"\n #include \"cfgloop.h\"\n #include \"cfganal.h\"\n+#include \"gimple-fold.h\"\n \n \n /* For each complex ssa name, a lattice value.  We're interested in finding\n@@ -916,69 +917,72 @@ expand_complex_addition (gimple_stmt_iterator *gsi, tree inner_type,\n \t\t\t complex_lattice_t al, complex_lattice_t bl)\n {\n   tree rr, ri;\n+  gimple_seq stmts = NULL;\n+  location_t loc = gimple_location (gsi_stmt (*gsi));\n \n   switch (PAIR (al, bl))\n     {\n     case PAIR (ONLY_REAL, ONLY_REAL):\n-      rr = gimplify_build2 (gsi, code, inner_type, ar, br);\n+      rr = gimple_build (&stmts, loc, code, inner_type, ar, br);\n       ri = ai;\n       break;\n \n     case PAIR (ONLY_REAL, ONLY_IMAG):\n       rr = ar;\n       if (code == MINUS_EXPR)\n-\tri = gimplify_build2 (gsi, MINUS_EXPR, inner_type, ai, bi);\n+\tri = gimple_build (&stmts, loc, MINUS_EXPR, inner_type, ai, bi);\n       else\n \tri = bi;\n       break;\n \n     case PAIR (ONLY_IMAG, ONLY_REAL):\n       if (code == MINUS_EXPR)\n-\trr = gimplify_build2 (gsi, MINUS_EXPR, inner_type, ar, br);\n+\trr = gimple_build (&stmts, loc, MINUS_EXPR, inner_type, ar, br);\n       else\n \trr = br;\n       ri = ai;\n       break;\n \n     case PAIR (ONLY_IMAG, ONLY_IMAG):\n       rr = ar;\n-      ri = gimplify_build2 (gsi, code, inner_type, ai, bi);\n+      ri = gimple_build (&stmts, loc, code, inner_type, ai, bi);\n       break;\n \n     case PAIR (VARYING, ONLY_REAL):\n-      rr = gimplify_build2 (gsi, code, inner_type, ar, br);\n+      rr = gimple_build (&stmts, loc, code, inner_type, ar, br);\n       ri = ai;\n       break;\n \n     case PAIR (VARYING, ONLY_IMAG):\n       rr = ar;\n-      ri = gimplify_build2 (gsi, code, inner_type, ai, bi);\n+      ri = gimple_build (&stmts, loc, code, inner_type, ai, bi);\n       break;\n \n     case PAIR (ONLY_REAL, VARYING):\n       if (code == MINUS_EXPR)\n \tgoto general;\n-      rr = gimplify_build2 (gsi, code, inner_type, ar, br);\n+      rr = gimple_build (&stmts, loc, code, inner_type, ar, br);\n       ri = bi;\n       break;\n \n     case PAIR (ONLY_IMAG, VARYING):\n       if (code == MINUS_EXPR)\n \tgoto general;\n       rr = br;\n-      ri = gimplify_build2 (gsi, code, inner_type, ai, bi);\n+      ri = gimple_build (&stmts, loc, code, inner_type, ai, bi);\n       break;\n \n     case PAIR (VARYING, VARYING):\n     general:\n-      rr = gimplify_build2 (gsi, code, inner_type, ar, br);\n-      ri = gimplify_build2 (gsi, code, inner_type, ai, bi);\n+      rr = gimple_build (&stmts, loc, code, inner_type, ar, br);\n+      ri = gimple_build (&stmts, loc, code, inner_type, ai, bi);\n       break;\n \n     default:\n       gcc_unreachable ();\n     }\n \n+  gsi_insert_seq_before (gsi, stmts, GSI_SAME_STMT);\n   update_complex_assignment (gsi, rr, ri);\n }\n \n@@ -1059,26 +1063,26 @@ expand_complex_libcall (gimple_stmt_iterator *gsi, tree type, tree ar, tree ai,\n    components of the result into RR and RI.  */\n \n static void\n-expand_complex_multiplication_components (gimple_stmt_iterator *gsi,\n-\t\t\t\t\t     tree type, tree ar, tree ai,\n-\t\t\t\t\t     tree br, tree bi,\n-\t\t\t\t\t     tree *rr, tree *ri)\n+expand_complex_multiplication_components (gimple_seq *stmts, location_t loc,\n+\t\t\t\t\t  tree type, tree ar, tree ai,\n+\t\t\t\t\t  tree br, tree bi,\n+\t\t\t\t\t  tree *rr, tree *ri)\n {\n   tree t1, t2, t3, t4;\n \n-  t1 = gimplify_build2 (gsi, MULT_EXPR, type, ar, br);\n-  t2 = gimplify_build2 (gsi, MULT_EXPR, type, ai, bi);\n-  t3 = gimplify_build2 (gsi, MULT_EXPR, type, ar, bi);\n+  t1 = gimple_build (stmts, loc, MULT_EXPR, type, ar, br);\n+  t2 = gimple_build (stmts, loc, MULT_EXPR, type, ai, bi);\n+  t3 = gimple_build (stmts, loc, MULT_EXPR, type, ar, bi);\n \n   /* Avoid expanding redundant multiplication for the common\n      case of squaring a complex number.  */\n   if (ar == br && ai == bi)\n     t4 = t3;\n   else\n-    t4 = gimplify_build2 (gsi, MULT_EXPR, type, ai, br);\n+    t4 = gimple_build (stmts, loc, MULT_EXPR, type, ai, br);\n \n-  *rr = gimplify_build2 (gsi, MINUS_EXPR, type, t1, t2);\n-  *ri = gimplify_build2 (gsi, PLUS_EXPR, type, t3, t4);\n+  *rr = gimple_build (stmts, loc, MINUS_EXPR, type, t1, t2);\n+  *ri = gimple_build (stmts, loc, PLUS_EXPR, type, t3, t4);\n }\n \n /* Expand complex multiplication to scalars:\n@@ -1092,6 +1096,8 @@ expand_complex_multiplication (gimple_stmt_iterator *gsi, tree type,\n {\n   tree rr, ri;\n   tree inner_type = TREE_TYPE (type);\n+  location_t loc = gimple_location (gsi_stmt (*gsi));\n+  gimple_seq stmts = NULL;\n \n   if (al < bl)\n     {\n@@ -1104,7 +1110,7 @@ expand_complex_multiplication (gimple_stmt_iterator *gsi, tree type,\n   switch (PAIR (al, bl))\n     {\n     case PAIR (ONLY_REAL, ONLY_REAL):\n-      rr = gimplify_build2 (gsi, MULT_EXPR, inner_type, ar, br);\n+      rr = gimple_build (&stmts, loc, MULT_EXPR, inner_type, ar, br);\n       ri = ai;\n       break;\n \n@@ -1114,24 +1120,24 @@ expand_complex_multiplication (gimple_stmt_iterator *gsi, tree type,\n \t  && real_identical (&TREE_REAL_CST (ai), &dconst1))\n \tri = br;\n       else\n-\tri = gimplify_build2 (gsi, MULT_EXPR, inner_type, ai, br);\n+\tri = gimple_build (&stmts, loc, MULT_EXPR, inner_type, ai, br);\n       break;\n \n     case PAIR (ONLY_IMAG, ONLY_IMAG):\n-      rr = gimplify_build2 (gsi, MULT_EXPR, inner_type, ai, bi);\n-      rr = gimplify_build1 (gsi, NEGATE_EXPR, inner_type, rr);\n+      rr = gimple_build (&stmts, loc, MULT_EXPR, inner_type, ai, bi);\n+      rr = gimple_build (&stmts, loc, NEGATE_EXPR, inner_type, rr);\n       ri = ar;\n       break;\n \n     case PAIR (VARYING, ONLY_REAL):\n-      rr = gimplify_build2 (gsi, MULT_EXPR, inner_type, ar, br);\n-      ri = gimplify_build2 (gsi, MULT_EXPR, inner_type, ai, br);\n+      rr = gimple_build (&stmts, loc, MULT_EXPR, inner_type, ar, br);\n+      ri = gimple_build (&stmts, loc, MULT_EXPR, inner_type, ai, br);\n       break;\n \n     case PAIR (VARYING, ONLY_IMAG):\n-      rr = gimplify_build2 (gsi, MULT_EXPR, inner_type, ai, bi);\n-      rr = gimplify_build1 (gsi, NEGATE_EXPR, inner_type, rr);\n-      ri = gimplify_build2 (gsi, MULT_EXPR, inner_type, ar, bi);\n+      rr = gimple_build (&stmts, loc, MULT_EXPR, inner_type, ai, bi);\n+      rr = gimple_build (&stmts, loc, NEGATE_EXPR, inner_type, rr);\n+      ri = gimple_build (&stmts, loc, MULT_EXPR, inner_type, ar, bi);\n       break;\n \n     case PAIR (VARYING, VARYING):\n@@ -1152,7 +1158,7 @@ expand_complex_multiplication (gimple_stmt_iterator *gsi, tree type,\n \t    {\n \t      /* If we are not worrying about NaNs expand to\n \t\t (ar*br - ai*bi) + i(ar*bi + br*ai) directly.  */\n-\t      expand_complex_multiplication_components (gsi, inner_type,\n+\t      expand_complex_multiplication_components (&stmts, loc, inner_type,\n \t\t\t\t\t\t\tar, ai, br, bi,\n \t\t\t\t\t\t\t&rr, &ri);\n \t      break;\n@@ -1164,8 +1170,11 @@ expand_complex_multiplication (gimple_stmt_iterator *gsi, tree type,\n \t\tx = __muldc3 (a, b);  */\n \n \t  tree tmpr, tmpi;\n-\t  expand_complex_multiplication_components (gsi, inner_type, ar, ai,\n+\t  expand_complex_multiplication_components (&stmts, loc,\n+\t\t\t\t\t\t    inner_type, ar, ai,\n \t\t\t\t\t\t    br, bi, &tmpr, &tmpi);\n+\t  gsi_insert_seq_before (gsi, stmts, GSI_SAME_STMT);\n+\t  stmts = NULL;\n \n \t  gimple *check\n \t    = gimple_build_cond (UNORDERED_EXPR, tmpr, tmpi,\n@@ -1187,10 +1196,12 @@ expand_complex_multiplication (gimple_stmt_iterator *gsi, tree type,\n \t  tree libcall_res\n \t    = expand_complex_libcall (&cond_bb_gsi, type, ar, ai, br,\n \t\t\t\t      bi, MULT_EXPR, false);\n-\t  tree cond_real = gimplify_build1 (&cond_bb_gsi, REALPART_EXPR,\n-\t\t\t\t\t    inner_type, libcall_res);\n-\t  tree cond_imag = gimplify_build1 (&cond_bb_gsi, IMAGPART_EXPR,\n-\t\t\t\t\t    inner_type, libcall_res);\n+\t  gimple_seq stmts2 = NULL;\n+\t  tree cond_real = gimple_build (&stmts2, loc, REALPART_EXPR,\n+\t\t\t\t\t inner_type, libcall_res);\n+\t  tree cond_imag = gimple_build (&stmts2, loc, IMAGPART_EXPR,\n+\t\t\t\t\t inner_type, libcall_res);\n+\t  gsi_insert_seq_before (&cond_bb_gsi, stmts2, GSI_SAME_STMT);\n \n \t  basic_block join_bb = single_succ_edge (cond_bb)->dest;\n \t  *gsi = gsi_start_nondebug_after_labels_bb (join_bb);\n@@ -1213,14 +1224,16 @@ expand_complex_multiplication (gimple_stmt_iterator *gsi, tree type,\n       else\n \t/* If we are not worrying about NaNs expand to\n \t  (ar*br - ai*bi) + i(ar*bi + br*ai) directly.  */\n-\texpand_complex_multiplication_components (gsi, inner_type, ar, ai,\n+\texpand_complex_multiplication_components (&stmts, loc,\n+\t\t\t\t\t\t  inner_type, ar, ai,\n \t\t\t\t\t\t  br, bi, &rr, &ri);\n       break;\n \n     default:\n       gcc_unreachable ();\n     }\n \n+  gsi_insert_seq_before (gsi, stmts, GSI_SAME_STMT);\n   update_complex_assignment (gsi, rr, ri);\n }\n \n@@ -1236,22 +1249,25 @@ expand_complex_div_straight (gimple_stmt_iterator *gsi, tree inner_type,\n \t\t\t     tree ar, tree ai, tree br, tree bi,\n \t\t\t     enum tree_code code)\n {\n+  gimple_seq stmts = NULL;\n+  location_t loc = gimple_location (gsi_stmt (*gsi));\n   tree rr, ri, div, t1, t2, t3;\n \n-  t1 = gimplify_build2 (gsi, MULT_EXPR, inner_type, br, br);\n-  t2 = gimplify_build2 (gsi, MULT_EXPR, inner_type, bi, bi);\n-  div = gimplify_build2 (gsi, PLUS_EXPR, inner_type, t1, t2);\n+  t1 = gimple_build (&stmts, loc, MULT_EXPR, inner_type, br, br);\n+  t2 = gimple_build (&stmts, loc, MULT_EXPR, inner_type, bi, bi);\n+  div = gimple_build (&stmts, loc, PLUS_EXPR, inner_type, t1, t2);\n \n-  t1 = gimplify_build2 (gsi, MULT_EXPR, inner_type, ar, br);\n-  t2 = gimplify_build2 (gsi, MULT_EXPR, inner_type, ai, bi);\n-  t3 = gimplify_build2 (gsi, PLUS_EXPR, inner_type, t1, t2);\n-  rr = gimplify_build2 (gsi, code, inner_type, t3, div);\n+  t1 = gimple_build (&stmts, loc, MULT_EXPR, inner_type, ar, br);\n+  t2 = gimple_build (&stmts, loc, MULT_EXPR, inner_type, ai, bi);\n+  t3 = gimple_build (&stmts, loc, PLUS_EXPR, inner_type, t1, t2);\n+  rr = gimple_build (&stmts, loc, code, inner_type, t3, div);\n \n-  t1 = gimplify_build2 (gsi, MULT_EXPR, inner_type, ai, br);\n-  t2 = gimplify_build2 (gsi, MULT_EXPR, inner_type, ar, bi);\n-  t3 = gimplify_build2 (gsi, MINUS_EXPR, inner_type, t1, t2);\n-  ri = gimplify_build2 (gsi, code, inner_type, t3, div);\n+  t1 = gimple_build (&stmts, loc, MULT_EXPR, inner_type, ai, br);\n+  t2 = gimple_build (&stmts, loc, MULT_EXPR, inner_type, ar, bi);\n+  t3 = gimple_build (&stmts, loc, MINUS_EXPR, inner_type, t1, t2);\n+  ri = gimple_build (&stmts, loc, code, inner_type, t3, div);\n \n+  gsi_insert_seq_before (gsi, stmts, GSI_SAME_STMT);\n   update_complex_assignment (gsi, rr, ri);\n }\n \n@@ -1268,29 +1284,26 @@ expand_complex_div_wide (gimple_stmt_iterator *gsi, tree inner_type,\n   tree rr, ri, ratio, div, t1, t2, tr, ti, compare;\n   basic_block bb_cond, bb_true, bb_false, bb_join;\n   gimple *stmt;\n+  gimple_seq stmts = NULL;\n+  location_t loc = gimple_location (gsi_stmt (*gsi));\n \n   /* Examine |br| < |bi|, and branch.  */\n-  t1 = gimplify_build1 (gsi, ABS_EXPR, inner_type, br);\n-  t2 = gimplify_build1 (gsi, ABS_EXPR, inner_type, bi);\n-  compare = fold_build2_loc (gimple_location (gsi_stmt (*gsi)),\n-\t\t\t     LT_EXPR, boolean_type_node, t1, t2);\n-  STRIP_NOPS (compare);\n+  t1 = gimple_build (&stmts, loc, ABS_EXPR, inner_type, br);\n+  t2 = gimple_build (&stmts, loc, ABS_EXPR, inner_type, bi);\n+  compare = gimple_build (&stmts, loc,\n+\t\t\t  LT_EXPR, boolean_type_node, t1, t2);\n \n   bb_cond = bb_true = bb_false = bb_join = NULL;\n   rr = ri = tr = ti = NULL;\n   if (TREE_CODE (compare) != INTEGER_CST)\n     {\n       edge e;\n       gimple *stmt;\n-      tree cond, tmp;\n \n-      tmp = make_ssa_name (boolean_type_node);\n-      stmt = gimple_build_assign (tmp, compare);\n-      gsi_insert_before (gsi, stmt, GSI_SAME_STMT);\n-\n-      cond = fold_build2_loc (gimple_location (stmt),\n-\t\t\t  EQ_EXPR, boolean_type_node, tmp, boolean_true_node);\n-      stmt = gimple_build_cond_from_tree (cond, NULL_TREE, NULL_TREE);\n+      gsi_insert_seq_before (gsi, stmts, GSI_SAME_STMT);\n+      stmts = NULL;\n+      stmt = gimple_build_cond (NE_EXPR, compare, boolean_false_node,\n+\t\t\t\tNULL_TREE, NULL_TREE);\n       gsi_insert_before (gsi, stmt, GSI_SAME_STMT);\n \n       /* Split the original block, and create the TRUE and FALSE blocks.  */\n@@ -1326,6 +1339,11 @@ expand_complex_div_wide (gimple_stmt_iterator *gsi, tree inner_type,\n       rr = create_tmp_reg (inner_type);\n       ri = create_tmp_reg (inner_type);\n     }\n+  else\n+    {\n+      gimple_seq_discard (stmts);\n+      stmts = NULL;\n+    }\n \n   /* In the TRUE branch, we compute\n       ratio = br/bi;\n@@ -1342,19 +1360,21 @@ expand_complex_div_wide (gimple_stmt_iterator *gsi, tree inner_type,\n \t  gsi_insert_after (gsi, gimple_build_nop (), GSI_NEW_STMT);\n \t}\n \n-      ratio = gimplify_build2 (gsi, code, inner_type, br, bi);\n+      ratio = gimple_build (&stmts, loc, code, inner_type, br, bi);\n \n-      t1 = gimplify_build2 (gsi, MULT_EXPR, inner_type, br, ratio);\n-      div = gimplify_build2 (gsi, PLUS_EXPR, inner_type, t1, bi);\n+      t1 = gimple_build (&stmts, loc, MULT_EXPR, inner_type, br, ratio);\n+      div = gimple_build (&stmts, loc, PLUS_EXPR, inner_type, t1, bi);\n \n-      t1 = gimplify_build2 (gsi, MULT_EXPR, inner_type, ar, ratio);\n-      tr = gimplify_build2 (gsi, PLUS_EXPR, inner_type, t1, ai);\n+      t1 = gimple_build (&stmts, loc, MULT_EXPR, inner_type, ar, ratio);\n+      tr = gimple_build (&stmts, loc, PLUS_EXPR, inner_type, t1, ai);\n \n-      t1 = gimplify_build2 (gsi, MULT_EXPR, inner_type, ai, ratio);\n-      ti = gimplify_build2 (gsi, MINUS_EXPR, inner_type, t1, ar);\n+      t1 = gimple_build (&stmts, loc, MULT_EXPR, inner_type, ai, ratio);\n+      ti = gimple_build (&stmts, loc, MINUS_EXPR, inner_type, t1, ar);\n \n-      tr = gimplify_build2 (gsi, code, inner_type, tr, div);\n-      ti = gimplify_build2 (gsi, code, inner_type, ti, div);\n+      tr = gimple_build (&stmts, loc, code, inner_type, tr, div);\n+      ti = gimple_build (&stmts, loc, code, inner_type, ti, div);\n+      gsi_insert_seq_before (gsi, stmts, GSI_SAME_STMT);\n+      stmts = NULL;\n \n      if (bb_true)\n        {\n@@ -1381,19 +1401,21 @@ expand_complex_div_wide (gimple_stmt_iterator *gsi, tree inner_type,\n \t  gsi_insert_after (gsi, gimple_build_nop (), GSI_NEW_STMT);\n \t}\n \n-      ratio = gimplify_build2 (gsi, code, inner_type, bi, br);\n+      ratio = gimple_build (&stmts, loc, code, inner_type, bi, br);\n \n-      t1 = gimplify_build2 (gsi, MULT_EXPR, inner_type, bi, ratio);\n-      div = gimplify_build2 (gsi, PLUS_EXPR, inner_type, t1, br);\n+      t1 = gimple_build (&stmts, loc, MULT_EXPR, inner_type, bi, ratio);\n+      div = gimple_build (&stmts, loc, PLUS_EXPR, inner_type, t1, br);\n \n-      t1 = gimplify_build2 (gsi, MULT_EXPR, inner_type, ai, ratio);\n-      tr = gimplify_build2 (gsi, PLUS_EXPR, inner_type, t1, ar);\n+      t1 = gimple_build (&stmts, loc, MULT_EXPR, inner_type, ai, ratio);\n+      tr = gimple_build (&stmts, loc, PLUS_EXPR, inner_type, t1, ar);\n \n-      t1 = gimplify_build2 (gsi, MULT_EXPR, inner_type, ar, ratio);\n-      ti = gimplify_build2 (gsi, MINUS_EXPR, inner_type, ai, t1);\n+      t1 = gimple_build (&stmts, loc, MULT_EXPR, inner_type, ar, ratio);\n+      ti = gimple_build (&stmts, loc, MINUS_EXPR, inner_type, ai, t1);\n \n-      tr = gimplify_build2 (gsi, code, inner_type, tr, div);\n-      ti = gimplify_build2 (gsi, code, inner_type, ti, div);\n+      tr = gimple_build (&stmts, loc, code, inner_type, tr, div);\n+      ti = gimple_build (&stmts, loc, code, inner_type, ti, div);\n+      gsi_insert_seq_before (gsi, stmts, GSI_SAME_STMT);\n+      stmts = NULL;\n \n      if (bb_false)\n        {\n@@ -1422,40 +1444,42 @@ expand_complex_division (gimple_stmt_iterator *gsi, tree type,\n \t\t\t complex_lattice_t al, complex_lattice_t bl)\n {\n   tree rr, ri;\n+  gimple_seq stmts = NULL;\n+  location_t loc = gimple_location (gsi_stmt (*gsi));\n \n   tree inner_type = TREE_TYPE (type);\n   switch (PAIR (al, bl))\n     {\n     case PAIR (ONLY_REAL, ONLY_REAL):\n-      rr = gimplify_build2 (gsi, code, inner_type, ar, br);\n+      rr = gimple_build (&stmts, loc, code, inner_type, ar, br);\n       ri = ai;\n       break;\n \n     case PAIR (ONLY_REAL, ONLY_IMAG):\n       rr = ai;\n-      ri = gimplify_build2 (gsi, code, inner_type, ar, bi);\n-      ri = gimplify_build1 (gsi, NEGATE_EXPR, inner_type, ri);\n+      ri = gimple_build (&stmts, loc, code, inner_type, ar, bi);\n+      ri = gimple_build (&stmts, loc, NEGATE_EXPR, inner_type, ri);\n       break;\n \n     case PAIR (ONLY_IMAG, ONLY_REAL):\n       rr = ar;\n-      ri = gimplify_build2 (gsi, code, inner_type, ai, br);\n+      ri = gimple_build (&stmts, loc, code, inner_type, ai, br);\n       break;\n \n     case PAIR (ONLY_IMAG, ONLY_IMAG):\n-      rr = gimplify_build2 (gsi, code, inner_type, ai, bi);\n+      rr = gimple_build (&stmts, loc, code, inner_type, ai, bi);\n       ri = ar;\n       break;\n \n     case PAIR (VARYING, ONLY_REAL):\n-      rr = gimplify_build2 (gsi, code, inner_type, ar, br);\n-      ri = gimplify_build2 (gsi, code, inner_type, ai, br);\n+      rr = gimple_build (&stmts, loc, code, inner_type, ar, br);\n+      ri = gimple_build (&stmts, loc, code, inner_type, ai, br);\n       break;\n \n     case PAIR (VARYING, ONLY_IMAG):\n-      rr = gimplify_build2 (gsi, code, inner_type, ai, bi);\n-      ri = gimplify_build2 (gsi, code, inner_type, ar, bi);\n-      ri = gimplify_build1 (gsi, NEGATE_EXPR, inner_type, ri);\n+      rr = gimple_build (&stmts, loc, code, inner_type, ai, bi);\n+      ri = gimple_build (&stmts, loc, code, inner_type, ar, bi);\n+      ri = gimple_build (&stmts, loc, NEGATE_EXPR, inner_type, ri);\n       break;\n \n     case PAIR (ONLY_REAL, VARYING):\n@@ -1490,6 +1514,7 @@ expand_complex_division (gimple_stmt_iterator *gsi, tree type,\n       gcc_unreachable ();\n     }\n \n+  gsi_insert_seq_before (gsi, stmts, GSI_SAME_STMT);\n   update_complex_assignment (gsi, rr, ri);\n }\n \n@@ -1502,10 +1527,13 @@ expand_complex_negation (gimple_stmt_iterator *gsi, tree inner_type,\n \t\t\t tree ar, tree ai)\n {\n   tree rr, ri;\n+  gimple_seq stmts = NULL;\n+  location_t loc = gimple_location (gsi_stmt (*gsi));\n \n-  rr = gimplify_build1 (gsi, NEGATE_EXPR, inner_type, ar);\n-  ri = gimplify_build1 (gsi, NEGATE_EXPR, inner_type, ai);\n+  rr = gimple_build (&stmts, loc, NEGATE_EXPR, inner_type, ar);\n+  ri = gimple_build (&stmts, loc, NEGATE_EXPR, inner_type, ai);\n \n+  gsi_insert_seq_before (gsi, stmts, GSI_SAME_STMT);\n   update_complex_assignment (gsi, rr, ri);\n }\n \n@@ -1518,9 +1546,12 @@ expand_complex_conjugate (gimple_stmt_iterator *gsi, tree inner_type,\n \t\t\t  tree ar, tree ai)\n {\n   tree ri;\n+  gimple_seq stmts = NULL;\n+  location_t loc = gimple_location (gsi_stmt (*gsi));\n \n-  ri = gimplify_build1 (gsi, NEGATE_EXPR, inner_type, ai);\n+  ri = gimple_build (&stmts, loc, NEGATE_EXPR, inner_type, ai);\n \n+  gsi_insert_seq_before (gsi, stmts, GSI_SAME_STMT);\n   update_complex_assignment (gsi, ar, ri);\n }\n \n@@ -1531,15 +1562,16 @@ expand_complex_comparison (gimple_stmt_iterator *gsi, tree ar, tree ai,\n \t\t\t   tree br, tree bi, enum tree_code code)\n {\n   tree cr, ci, cc, type;\n-  gimple *stmt;\n-\n-  cr = gimplify_build2 (gsi, code, boolean_type_node, ar, br);\n-  ci = gimplify_build2 (gsi, code, boolean_type_node, ai, bi);\n-  cc = gimplify_build2 (gsi,\n-\t\t\t(code == EQ_EXPR ? TRUTH_AND_EXPR : TRUTH_OR_EXPR),\n-\t\t\tboolean_type_node, cr, ci);\n-\n-  stmt = gsi_stmt (*gsi);\n+  gimple *stmt = gsi_stmt (*gsi);\n+  gimple_seq stmts = NULL;\n+  location_t loc = gimple_location (stmt);\n+\n+  cr = gimple_build (&stmts, loc, code, boolean_type_node, ar, br);\n+  ci = gimple_build (&stmts, loc, code, boolean_type_node, ai, bi);\n+  cc = gimple_build (&stmts, loc,\n+\t\t     (code == EQ_EXPR ? BIT_AND_EXPR : BIT_IOR_EXPR),\n+\t\t     boolean_type_node, cr, ci);\n+  gsi_insert_seq_before (gsi, stmts, GSI_SAME_STMT);\n \n   switch (gimple_code (stmt))\n     {"}]}