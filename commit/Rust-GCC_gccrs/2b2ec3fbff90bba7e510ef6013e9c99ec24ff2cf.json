{"sha": "2b2ec3fbff90bba7e510ef6013e9c99ec24ff2cf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmIyZWMzZmJmZjkwYmJhN2U1MTBlZjYwMTNlOWM5OWVjMjRmZjJjZg==", "commit": {"author": {"name": "Loren J. Rittle", "email": "ljrittle@acm.org", "date": "2001-11-26T17:40:34Z"}, "committer": {"name": "Loren J. Rittle", "email": "ljrittle@gcc.gnu.org", "date": "2001-11-26T17:40:34Z"}, "message": "linux_threads.c (WRAP_FUNC(pthread_join)): Remove special case for GC_FREEBSD_THREADS.\n\n\t* linux_threads.c (WRAP_FUNC(pthread_join)): Remove special\n\tcase for GC_FREEBSD_THREADS.\n\t* configure.in (*-*-freebsd*): Clarify warning.\n\t* configure: Rebuilt.\n\nFrom-SVN: r47347", "tree": {"sha": "1cfc8f6bed312181086a11d15a92ce156da4e363", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1cfc8f6bed312181086a11d15a92ce156da4e363"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2b2ec3fbff90bba7e510ef6013e9c99ec24ff2cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b2ec3fbff90bba7e510ef6013e9c99ec24ff2cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b2ec3fbff90bba7e510ef6013e9c99ec24ff2cf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b2ec3fbff90bba7e510ef6013e9c99ec24ff2cf/comments", "author": null, "committer": null, "parents": [{"sha": "5b0c589655c47d528012f3feb6ca62005568aaae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b0c589655c47d528012f3feb6ca62005568aaae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b0c589655c47d528012f3feb6ca62005568aaae"}], "stats": {"total": 34, "additions": 16, "deletions": 18}, "files": [{"sha": "234d9df973e18e214105486cfb61910985b14665", "filename": "boehm-gc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b2ec3fbff90bba7e510ef6013e9c99ec24ff2cf/boehm-gc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b2ec3fbff90bba7e510ef6013e9c99ec24ff2cf/boehm-gc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2FChangeLog?ref=2b2ec3fbff90bba7e510ef6013e9c99ec24ff2cf", "patch": "@@ -1,3 +1,10 @@\n+2001-11-26  Loren J. Rittle  <ljrittle@acm.org>\n+\n+\t* linux_threads.c (WRAP_FUNC(pthread_join)): Remove special\n+\tcase for GC_FREEBSD_THREADS.\n+\t* configure.in (*-*-freebsd*): Clarify warning.\n+\t* configure: Rebuilt.\n+\n 2001-10-23  Loren J. Rittle  <ljrittle@acm.org>\n \t    Andreas Tobler <toa@pop.agri.ch>\n "}, {"sha": "a9257f3050d264271b4a3e8a269b431880579b83", "filename": "boehm-gc/configure", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b2ec3fbff90bba7e510ef6013e9c99ec24ff2cf/boehm-gc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b2ec3fbff90bba7e510ef6013e9c99ec24ff2cf/boehm-gc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Fconfigure?ref=2b2ec3fbff90bba7e510ef6013e9c99ec24ff2cf", "patch": "@@ -1540,7 +1540,7 @@ else\n   if { (eval echo configure:1541: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; }; then\n     for file in conftest.*; do\n       case $file in\n-      *.c | *.o | *.obj) ;;\n+      *.c | *.C | *.o | *.obj) ;;\n       *) ac_cv_exeext=`echo $file | sed -e s/conftest//` ;;\n       esac\n     done\n@@ -2591,7 +2591,7 @@ else\n   if { (eval echo configure:2592: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; }; then\n     for file in conftest.*; do\n       case $file in\n-      *.c | *.o | *.obj) ;;\n+      *.c | *.C | *.o | *.obj) ;;\n       *) ac_cv_exeext=`echo $file | sed -e s/conftest//` ;;\n       esac\n     done\n@@ -2693,7 +2693,8 @@ EOF\n \tTHREADLIBS=\"-lpthread -lrt\"\n \t;;\n      *-*-freebsd*)\n-\techo \"configure: warning: \"FreeBSD does not yet fully support threads with Boehm GC.\"\" 1>&2\n+\techo \"configure: warning: \"Threaded GC is prone to deadlock before FreeBSD 4.5.\"\" 1>&2\n+\techo \"configure: warning: \"Related symptom is pthread_join returns spurious EINTR.\"\" 1>&2\n \tcat >> confdefs.h <<\\EOF\n #define GC_FREEBSD_THREADS 1\n EOF\n@@ -2732,15 +2733,15 @@ esac\n \n \n echo $ac_n \"checking for dlopen in -ldl\"\"... $ac_c\" 1>&6\n-echo \"configure:2736: checking for dlopen in -ldl\" >&5\n+echo \"configure:2737: checking for dlopen in -ldl\" >&5\n ac_lib_var=`echo dl'_'dlopen | sed 'y%./+-%__p_%'`\n if eval \"test \\\"`echo '$''{'ac_cv_lib_$ac_lib_var'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   ac_save_LIBS=\"$LIBS\"\n LIBS=\"-ldl  $LIBS\"\n cat > conftest.$ac_ext <<EOF\n-#line 2744 \"configure\"\n+#line 2745 \"configure\"\n #include \"confdefs.h\"\n /* Override any gcc2 internal prototype to avoid an error.  */\n /* We use char because int might match the return type of a gcc2\n@@ -2751,7 +2752,7 @@ int main() {\n dlopen()\n ; return 0; }\n EOF\n-if { (eval echo configure:2755: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n+if { (eval echo configure:2756: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n   rm -rf conftest*\n   eval \"ac_cv_lib_$ac_lib_var=yes\"\n else"}, {"sha": "219af7f6311eb1546545e4660553ee4351de3441", "filename": "boehm-gc/configure.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b2ec3fbff90bba7e510ef6013e9c99ec24ff2cf/boehm-gc%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b2ec3fbff90bba7e510ef6013e9c99ec24ff2cf/boehm-gc%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Fconfigure.in?ref=2b2ec3fbff90bba7e510ef6013e9c99ec24ff2cf", "patch": "@@ -90,7 +90,8 @@ case \"$THREADS\" in\n \tTHREADLIBS=\"-lpthread -lrt\"\n \t;;\n      *-*-freebsd*)\n-\tAC_MSG_WARN(\"FreeBSD does not yet fully support threads with Boehm GC.\")\n+\tAC_MSG_WARN(\"Threaded GC is prone to deadlock before FreeBSD 4.5.\")\n+\tAC_MSG_WARN(\"Related symptom is pthread_join returns spurious EINTR.\")\n \tAC_DEFINE(GC_FREEBSD_THREADS)\n \tINCLUDES=\"$INCLUDES -pthread\"\n \tTHREADLIBS=-pthread"}, {"sha": "c4a2b89a18d9750fa4760970303b11dcd5f8ed38", "filename": "boehm-gc/linux_threads.c", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b2ec3fbff90bba7e510ef6013e9c99ec24ff2cf/boehm-gc%2Flinux_threads.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b2ec3fbff90bba7e510ef6013e9c99ec24ff2cf/boehm-gc%2Flinux_threads.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Flinux_threads.c?ref=2b2ec3fbff90bba7e510ef6013e9c99ec24ff2cf", "patch": "@@ -1268,17 +1268,6 @@ int WRAP_FUNC(pthread_join)(pthread_t thread, void **retval)\n     /* cant have been recycled by pthreads.\t\t\t\t*/\n     UNLOCK();\n     result = REAL_FUNC(pthread_join)(thread, retval);\n-# if defined (GC_FREEBSD_THREADS)\n-    /* On FreeBSD, the wrapped pthread_join() sometimes returns (what\n-       appears to be) a spurious EINTR which caused the test and real code\n-       to gratuitously fail.  Having looked at system pthread library source\n-       code, I see how this return code may be generated.  In one path of\n-       code, pthread_join() just returns the errno setting of the thread\n-       being joined.  This does not match the POSIX specification or the\n-       local man pages thus I have taken the liberty to catch this one\n-       spurious return value properly conditionalized on GC_FREEBSD_THREADS. */\n-    if (result == EINTR) result = 0;\n-# endif\n     if (result == 0) {\n         LOCK();\n         /* Here the pthread thread id may have been recycled. */"}]}