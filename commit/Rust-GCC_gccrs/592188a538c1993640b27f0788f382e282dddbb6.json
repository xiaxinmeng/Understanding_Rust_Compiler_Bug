{"sha": "592188a538c1993640b27f0788f382e282dddbb6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTkyMTg4YTUzOGMxOTkzNjQwYjI3ZjA3ODhmMzgyZTI4MmRkZGJiNg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-10-11T06:56:22Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-10-11T06:56:22Z"}, "message": "i386.c (test splitter): Narrow tests vs paradoxical subregs.\n\n        * i386.c (test splitter): Narrow tests vs paradoxical subregs.\n        (jcc splitters): Add two splitters to simplify compound compares\n        that simplify_comparison can't handle.\n\nFrom-SVN: r46178", "tree": {"sha": "82db26982a0b0147ca5d7befcd42024b07ea9cd3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/82db26982a0b0147ca5d7befcd42024b07ea9cd3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/592188a538c1993640b27f0788f382e282dddbb6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/592188a538c1993640b27f0788f382e282dddbb6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/592188a538c1993640b27f0788f382e282dddbb6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/592188a538c1993640b27f0788f382e282dddbb6/comments", "author": null, "committer": null, "parents": [{"sha": "7f16eed442ca3fe62781be3711e4fcd514f91769", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f16eed442ca3fe62781be3711e4fcd514f91769", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f16eed442ca3fe62781be3711e4fcd514f91769"}], "stats": {"total": 92, "additions": 77, "deletions": 15}, "files": [{"sha": "5e491e99f68e6506991b8a78cc63cd7407162be2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 14, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/592188a538c1993640b27f0788f382e282dddbb6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/592188a538c1993640b27f0788f382e282dddbb6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=592188a538c1993640b27f0788f382e282dddbb6", "patch": "@@ -1,6 +1,10 @@\n 2001-10-10  Richard Henderson  <rth@redhat.com>\n \n-        * combine.c (try_combine): Handle a SEQUENCE of one insn.\n+\t* combine.c (try_combine): Handle a SEQUENCE of one insn.\n+\n+\t* i386.c (test splitter): Narrow tests vs paradoxical subregs.\n+\t(jcc splitters): Add two splitters to simplify compound compares\n+\tthat simplify_comparison can't handle.\n \n 2001-10-10  Richard Henderson  <rth@redhat.com>\n \n@@ -301,8 +305,8 @@ Wed Oct 10 00:41:29 EDT 2001  John Wehle  (john@feith.com)\n \n 2001-10-08  Richard Henderson  <rth@redhat.com>\n \n-        * i386.md (movsi_xor): Export.\n-        (setcc peep2): Use it when available; add an alternative to\n+\t* i386.md (movsi_xor): Export.\n+\t(setcc peep2): Use it when available; add an alternative to\n \tmatch zero_extendhisi2_and.\n \n 2001-10-08  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n@@ -533,23 +537,23 @@ Sat Oct  6 07:42:39 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n 2001-10-06  Ulrich Weigand  <uweigand@de.ibm.com>\n  \n-        * config/s390/s390.c (s390_va_arg): Use set_mem_alias_set.\n+\t* config/s390/s390.c (s390_va_arg): Use set_mem_alias_set.\n \n 2001-10-05  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* gccbug.in (CATEGORIES): Add ada.\n \n 2001-10-05  Catherine Moore  <clm@redhat.com>\n \n-        * config/stormy16/stormy-abi:  Document abi changes.\n-        * config/stormy16/stormy16.h (REG_ALLOC_ORDER): Redefine.\n-        (ICALL_REGS): New register class.\n-        (NUM_ARGUMENT_REGISTERS): Now 6.\n-        (DEFAULT_PCC_STRUCT_RETURN): Don't try to return structs\n-        in registers.\n-        (REG_CLASS_FROM_LETTER): Map 'z' to ICALL_REGS.\n-        * config/stormy16.md (call_internal, call_value_internal,\n-        indirect_jump): Use new 'z' constraint.\n+\t* config/stormy16/stormy-abi:  Document abi changes.\n+\t* config/stormy16/stormy16.h (REG_ALLOC_ORDER): Redefine.\n+\t(ICALL_REGS): New register class.\n+\t(NUM_ARGUMENT_REGISTERS): Now 6.\n+\t(DEFAULT_PCC_STRUCT_RETURN): Don't try to return structs\n+\tin registers.\n+\t(REG_CLASS_FROM_LETTER): Map 'z' to ICALL_REGS.\n+\t* config/stormy16.md (call_internal, call_value_internal,\n+\tindirect_jump): Use new 'z' constraint.\n \n 2001-10-05  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n@@ -1055,7 +1059,7 @@ Mon Oct  1 06:43:41 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \tstorehps builtins.\n \t* doc/extend.texi (Vector Extensions): New node.\n \t* doc/invoke.texi (Machine Dependent Options): Add documentation for\n-        i386 -mmmx, -msse, -m3dnow.\n+\ti386 -mmmx, -msse, -m3dnow.\n \n Sat Sep 29 15:08:16 CEST 2001  Jan Hubicka  <jh@suse.cz>\n "}, {"sha": "10c1b355bf8aec38b1047c2c87261dd4b0c589a3", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 59, "deletions": 1, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/592188a538c1993640b27f0788f382e282dddbb6/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/592188a538c1993640b27f0788f382e282dddbb6/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=592188a538c1993640b27f0788f382e282dddbb6", "patch": "@@ -8125,7 +8125,7 @@\n   HOST_WIDE_INT len = INTVAL (operands[1]);\n   HOST_WIDE_INT pos = INTVAL (operands[2]);\n   HOST_WIDE_INT mask;\n-  enum machine_mode mode;\n+  enum machine_mode mode, submode;\n \n   mode = GET_MODE (operands[0]);\n   if (GET_CODE (operands[0]) == MEM)\n@@ -8138,6 +8138,15 @@\n \t  operands[0] = adjust_address (operands[0], mode, 0);\n \t}\n     }\n+  else if (GET_CODE (operands[0]) == SUBREG\n+\t   && (submode = GET_MODE (SUBREG_REG (operands[0])),\n+\t       GET_MODE_BITSIZE (mode) > GET_MODE_BITSIZE (submode))\n+\t   && pos + len <= GET_MODE_BITSIZE (submode))\n+    {\n+      /* Narrow a paradoxical subreg to prevent partial register stalls.  */\n+      mode = submode;\n+      operands[0] = SUBREG_REG (operands[0]);\n+    }\n   else if (mode == HImode && pos + len <= 8)\n     {\n       /* Small HImode tests can be converted to QImode.  */\n@@ -12745,6 +12754,55 @@\n \t     (const_int 0)\n \t     (const_int 1)))])\n \n+;; In general it is not safe to assume too much about CCmode registers,\n+;; so simplify-rtx stops when it sees a second one.  Under certain \n+;; conditions this is safe on x86, so help combine not create\n+;;\n+;;\tseta\t%al\n+;;\ttestb\t%al, %al\n+;;\tje\tLfoo\n+\n+(define_split \n+  [(set (pc)\n+\t(if_then_else (ne (match_operator 0 \"ix86_comparison_operator\"\n+\t\t\t\t      [(reg 17) (const_int 0)])\n+\t\t\t  (const_int 0))\n+\t\t      (label_ref (match_operand 1 \"\" \"\"))\n+\t\t      (pc)))]\n+  \"\"\n+  [(set (pc)\n+\t(if_then_else (match_dup 0)\n+\t\t      (label_ref (match_dup 1))\n+\t\t      (pc)))]\n+{\n+  PUT_MODE (operands[0], VOIDmode);\n+})\n+  \n+(define_split \n+  [(set (pc)\n+\t(if_then_else (eq (match_operator 0 \"ix86_comparison_operator\"\n+\t\t\t\t      [(reg 17) (const_int 0)])\n+\t\t\t  (const_int 0))\n+\t\t      (label_ref (match_operand 1 \"\" \"\"))\n+\t\t      (pc)))]\n+  \"\"\n+  [(set (pc)\n+\t(if_then_else (match_dup 0)\n+\t\t      (label_ref (match_dup 1))\n+\t\t      (pc)))]\n+{\n+  rtx new_op0 = copy_rtx (operands[0]);\n+  operands[0] = new_op0;\n+  PUT_MODE (new_op0, VOIDmode);\n+  PUT_CODE (new_op0, REVERSE_CONDITION (GET_CODE (new_op0),\n+\t\t\t\t\tGET_MODE (XEXP (new_op0, 0))));\n+\n+  /* Make sure that (a) the CCmode we have for the flags is strong\n+     enough for the reversed compare or (b) we have a valid FP compare.  */\n+  if (! ix86_comparison_operator (new_op0, VOIDmode))\n+    FAIL;\n+})\n+\n ;; Define combination compare-and-branch fp compare instructions to use\n ;; during early optimization.  Splitting the operation apart early makes\n ;; for bad code when we want to reverse the operation."}]}