{"sha": "db08fddf62180a2a983a9be705250b3bfa7669ea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGIwOGZkZGY2MjE4MGEyYTk4M2E5YmU3MDUyNTBiM2JmYTc2NjllYQ==", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@bitrange.com", "date": "2002-03-31T18:38:57Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@gcc.gnu.org", "date": "2002-03-31T18:38:57Z"}, "message": "mmix.md (define_constants): Remove misleading FIXME.\n\n\t* config/mmix/mmix.md (define_constants): Remove misleading\n\tFIXME.  Add MMIX_fp_rO_OFFSET.\n\t(\"nonlocal_goto_receiver\"): Don't have stack-frame address of\n\tsaved rO as part of the pattern.  Remove FIXME.\n\t(\"*nonlocal_goto_receiver_expanded\"): Similar.  Generate address\n\there, at output-time.\n\nFrom-SVN: r51664", "tree": {"sha": "ed21a591f011232217d48a3459afb1112b940707", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ed21a591f011232217d48a3459afb1112b940707"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/db08fddf62180a2a983a9be705250b3bfa7669ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db08fddf62180a2a983a9be705250b3bfa7669ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db08fddf62180a2a983a9be705250b3bfa7669ea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db08fddf62180a2a983a9be705250b3bfa7669ea/comments", "author": null, "committer": null, "parents": [{"sha": "4f31cce8e475287d0b69622a51aa1f764ff3701d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f31cce8e475287d0b69622a51aa1f764ff3701d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f31cce8e475287d0b69622a51aa1f764ff3701d"}], "stats": {"total": 80, "additions": 61, "deletions": 19}, "files": [{"sha": "a982a4cd3ac188de29873914f30fb6c690fdac1e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db08fddf62180a2a983a9be705250b3bfa7669ea/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db08fddf62180a2a983a9be705250b3bfa7669ea/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=db08fddf62180a2a983a9be705250b3bfa7669ea", "patch": "@@ -1,3 +1,12 @@\n+2002-03-31  Hans-Peter Nilsson  <hp@bitrange.com>\n+\n+\t* config/mmix/mmix.md (define_constants): Remove misleading\n+\tFIXME.  Add MMIX_fp_rO_OFFSET.\n+\t(\"nonlocal_goto_receiver\"): Don't have stack-frame address of\n+\tsaved rO as part of the pattern.  Remove FIXME.\n+\t(\"*nonlocal_goto_receiver_expanded\"): Similar.  Generate address\n+\there, at output-time.\n+\n 2002-03-31  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/6100"}, {"sha": "cf2ae140614ffca8ebb6df653882a07cfdbc7591", "filename": "gcc/config/mmix/mmix.md", "status": "modified", "additions": 52, "deletions": 19, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db08fddf62180a2a983a9be705250b3bfa7669ea/gcc%2Fconfig%2Fmmix%2Fmmix.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db08fddf62180a2a983a9be705250b3bfa7669ea/gcc%2Fconfig%2Fmmix%2Fmmix.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.md?ref=db08fddf62180a2a983a9be705250b3bfa7669ea", "patch": "@@ -34,11 +34,9 @@\n ;; The order of insns is as in Node: Standard Names, with smaller modes\n ;; before bigger modes.\n \n-;; FIXME:s\n-;; - Use new formats; e.g. '{' not '\"*{'.\n-\n (define_constants\n-  [(MMIX_rJ_REGNUM 259)]\n+  [(MMIX_rJ_REGNUM 259)\n+   (MMIX_fp_rO_OFFSET -24)]\n )\n \n ;; FIXME: Can we remove the reg-to-reg for smaller modes?  Shouldn't they\n@@ -1101,35 +1099,70 @@ DIVU %1,%1,%2\\;GET %0,:rR\\;NEGU %2,0,%0\\;CSNN %0,$255,%2\")\n ;; of \"pop 0,0\" until rO equals the saved value.  (If it goes lower, we\n ;; should call abort.)\n (define_expand \"nonlocal_goto_receiver\"\n-  [(parallel [(unspec_volatile [(match_dup 0)] 1)\n+  [(parallel [(unspec_volatile [(const_int 0)] 1)\n \t      (clobber (scratch:DI))\n \t      (clobber (reg:DI MMIX_rJ_REGNUM))])\n-   (set (reg:DI MMIX_rJ_REGNUM) (match_dup 1))]\n+   (set (reg:DI MMIX_rJ_REGNUM) (match_dup 0))]\n   \"\"\n   \"\n {\n-  rtx tem\n-    = validize_mem (gen_rtx_MEM (Pmode,\n-\t\t\t\t plus_constant (frame_pointer_rtx, -24)));\n-  operands[0] = XEXP (tem, 0);\n-  operands[1]\n+  operands[0]\n     = get_hard_reg_initial_val (Pmode, MMIX_INCOMING_RETURN_ADDRESS_REGNUM);\n \n   /* Mark this function as containing a landing-pad.  */\n   cfun->machine->has_landing_pad = 1;\n }\")\n \n-;; FIXME: Do we need to keep this in memory?  Can GCC counter our\n-;; expectations and use saved registers to keep the slot address in,\n-;; \"across\" the exception or goto?  Anyway, we need to make sure the value\n-;; ends up in a non-local register, so best is to load it ourselves.\n+;; GCC can insist on using saved registers to keep the slot address in\n+;; \"across\" the exception, or (perhaps) to use saved registers in the\n+;; address and re-use them after the register stack unwind, so it's best\n+;; to form the address ourselves.\n (define_insn \"*nonlocal_goto_receiver_expanded\"\n-  [(unspec_volatile [(match_operand:DI 0 \"address_operand\" \"p\")] 1)\n-   (clobber (match_scratch:DI 1 \"=&r\"))\n+  [(unspec_volatile [(const_int 0)] 1)\n+   (clobber (match_scratch:DI 0 \"=&r\"))\n    (clobber (reg:DI MMIX_rJ_REGNUM))]\n   \"\"\n-  \"GETA $255,0f\\;PUT rJ,$255\\;LDOU $255,%a0\\n\\\n-0:\\;GET %1,rO\\;CMPU %1,%1,$255\\;BNP %1,1f\\;POP 0,0\\n1:\")\n+{\n+  rtx temp_reg = operands[0];\n+  rtx my_operands[2];\n+  HOST_WIDEST_INT offs;\n+  const char *my_template\n+    = \"GETA $255,0f\\;PUT rJ,$255\\;LDOU $255,%a0\\n\\\n+0:\\;GET %1,rO\\;CMPU %1,%1,$255\\;BNP %1,1f\\;POP 0,0\\n1:\";\n+\n+  my_operands[1] = temp_reg;\n+\n+  /* If we have a frame-pointer (hence unknown stack-pointer offset),\n+     just use the frame-pointer and the known offset.  */\n+  if (frame_pointer_needed)\n+    {\n+      my_operands[0] = GEN_INT (-MMIX_fp_rO_OFFSET);\n+\n+      output_asm_insn (\"NEGU %1,0,%0\", my_operands);\n+      my_operands[0] = gen_rtx_PLUS (Pmode, frame_pointer_rtx, temp_reg);\n+    }\n+  else\n+    {\n+      /* We know the fp-based offset, so \"eliminate\" it to be sp-based.  */\n+      offs\n+\t= (mmix_initial_elimination_offset (MMIX_FRAME_POINTER_REGNUM,\n+\t\t\t\t\t    MMIX_STACK_POINTER_REGNUM)\n+\t   + MMIX_fp_rO_OFFSET);\n+\n+      if (offs >= 0 && offs <= 255)\n+\tmy_operands[0]\n+\t  = gen_rtx_PLUS (Pmode, stack_pointer_rtx, GEN_INT (offs));\n+      else\n+\t{\n+\t  mmix_output_register_setting (asm_out_file, REGNO (temp_reg),\n+\t\t\t\t\toffs, 1);\n+\t  my_operands[0] = gen_rtx_PLUS (Pmode, stack_pointer_rtx, temp_reg);\n+\t}\n+    }\n+\n+  output_asm_insn (my_template, my_operands);\n+  return \"\";\n+})\n \f\n (define_insn \"*Naddu\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")"}]}