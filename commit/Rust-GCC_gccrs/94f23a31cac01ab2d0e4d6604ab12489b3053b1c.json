{"sha": "94f23a31cac01ab2d0e4d6604ab12489b3053b1c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTRmMjNhMzFjYWMwMWFiMmQwZTRkNjYwNGFiMTI0ODliMzA1M2IxYw==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-03-16T09:55:41Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-03-16T09:55:41Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r502", "tree": {"sha": "1b8fdfd0137e3fbe6dc9b69e24b0460ca0eb1528", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1b8fdfd0137e3fbe6dc9b69e24b0460ca0eb1528"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/94f23a31cac01ab2d0e4d6604ab12489b3053b1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94f23a31cac01ab2d0e4d6604ab12489b3053b1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94f23a31cac01ab2d0e4d6604ab12489b3053b1c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94f23a31cac01ab2d0e4d6604ab12489b3053b1c/comments", "author": null, "committer": null, "parents": [{"sha": "de857550a2ba10f53edae5a406d8fa821b73e08e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de857550a2ba10f53edae5a406d8fa821b73e08e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de857550a2ba10f53edae5a406d8fa821b73e08e"}], "stats": {"total": 27, "additions": 15, "deletions": 12}, "files": [{"sha": "c1789fe9b9ce3fb058344ca584ef8a63b34eea32", "filename": "gcc/config/m68k/mot3300.h", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94f23a31cac01ab2d0e4d6604ab12489b3053b1c/gcc%2Fconfig%2Fm68k%2Fmot3300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94f23a31cac01ab2d0e4d6604ab12489b3053b1c/gcc%2Fconfig%2Fm68k%2Fmot3300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fmot3300.h?ref=94f23a31cac01ab2d0e4d6604ab12489b3053b1c", "patch": "@@ -192,14 +192,12 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #undef ASM_APP_OFF\n #define ASM_APP_OFF \"\"\n \n-/* We like aligned sources, and maybe our as will like them.  */\n-\n #undef TEXT_SECTION_ASM_OP\n-#define TEXT_SECTION_ASM_OP \"\\ttext\"\n+#define TEXT_SECTION_ASM_OP \"text\"\n #undef DATA_SECTION_ASM_OP\n-#define DATA_SECTION_ASM_OP \"\\tdata\"\n+#define DATA_SECTION_ASM_OP \"data\"\n #undef ASCII_DATA_ASM_OP\n-#define\tASCII_DATA_ASM_OP \"\\tbyte\"\n+#define\tASCII_DATA_ASM_OP \"byte\"\n \n /* The file command should always begin the output.  */\n \n@@ -391,7 +389,7 @@ do { union { float f; long l;} tem;\t\t\t\\\n     if (++sp < (LEN))\t\t\t\t\t\t\\\n       {\tif (lp > 60)\t\t\t\t\t\t\\\n \t  { lp = 0;\t\t\t\t\t\t\\\n-\t    fprintf ((FILE), \"\\n%s \", ASCII_DATA_ASM_OP); }\t\\\n+\t    fprintf ((FILE), \"\\n\\t%s \", ASCII_DATA_ASM_OP); }\t\\\n \telse\t\t\t\t\t\t\t\\\n \t  putc (',', (FILE));\t\t\t\t\t\\\n \tgoto loop; }\t\t\t\t\t\t\\\n@@ -647,6 +645,11 @@ do { union { float f; long l;} tem;\t\t\t\\\n       while (*(PTR) != ' ')\t\t\t\t\\\n \t{ putc (*(PTR), (FILE)); ++(PTR); }\t\t\\\n       fprintf ((FILE), \".w\"); }\t\t\t\t\\\n+  else if ((PTR)[0] == 's')\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\\\n+      if (!strncmp ((PTR), \"swap\", 4))\t\t\t\\\n+\t{ fprintf ((FILE), \"swap.w\"); (PTR) += 4; }\t\\\n+    }\t\t\t\t\t\t\t\\\n   else if ((PTR)[0] == 'f')\t\t\t\t\\\n     {\t\t\t\t\t\t\t\\\n       if (!strncmp ((PTR), \"fmove\", 5))\t\t\t\\\n@@ -672,20 +675,20 @@ do { union { float f; long l;} tem;\t\t\t\\\n   else if ((PTR)[0] == 'm' && (PTR)[1] == 'o'\t\t\\\n \t   && (PTR)[2] == 'v' && (PTR)[3] == 'e')\t\\\n     { fprintf ((FILE), \"mov\"); (PTR) += 4;\t\t\\\n-       if ((PTR)[0] == 'q' || (PTR)[0] == 'a' ||\t\\\n-\t   (PTR)[0] == 'c') (PTR)++; }\t\t\t\\\n+       if ((PTR)[0] == 'q' || (PTR)[0] == 'a'\t\t\\\n+\t   || (PTR)[0] == 'c') (PTR)++; }\t\t\\\n /* SUB, SUBQ, SUBA, SUBI ==> SUB */\t\t\t\\\n   else if ((PTR)[0] == 's' && (PTR)[1] == 'u' \t\t\\\n \t   && (PTR)[2] == 'b')\t\t\t\t\\\n     { fprintf ((FILE), \"sub\"); (PTR) += 3;\t\t\\\n-       if ((PTR)[0] == 'q' || (PTR)[0] == 'i' || \t\\\n-\t   (PTR)[0] == 'a') (PTR)++; }\t\t\t\\\n+       if ((PTR)[0] == 'q' || (PTR)[0] == 'i'\t \t\\\n+\t   || (PTR)[0] == 'a') (PTR)++; }\t\t\\\n /* CMP, CMPA, CMPI, CMPM ==> CMP\t*/\t\t\\\n   else if ((PTR)[0] == 'c' && (PTR)[1] == 'm'\t\t\\\n \t   && (PTR)[2] == 'p')\t\t\t\t\\\n     { fprintf ((FILE), \"cmp\"); (PTR) += 3;\t\t\\\n-       if ((PTR)[0] == 'a' || (PTR)[0] == 'i' || \t\\\n-\t   (PTR)[0] == 'm') (PTR)++; }\t\t\t\\\n+       if ((PTR)[0] == 'a' || (PTR)[0] == 'i'\t \t\\\n+\t   || (PTR)[0] == 'm') (PTR)++; }\t\t\\\n /* JMP to switch label */\t\t\t\t\\\n   else if (!strncmp((PTR), (SWITCH_JUMP_MATCH), sizeof(SWITCH_JUMP_MATCH) - 1)) \\\n     { while (*(PTR)++ != '(');\t\t\t\t\\"}]}