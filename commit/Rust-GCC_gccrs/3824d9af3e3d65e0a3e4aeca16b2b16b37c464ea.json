{"sha": "3824d9af3e3d65e0a3e4aeca16b2b16b37c464ea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzgyNGQ5YWYzZTNkNjVlMGEzZTRhZWNhMTZiMmIxNmIzN2M0NjRlYQ==", "commit": {"author": {"name": "Pascal Obry", "email": "obry@adacore.com", "date": "2008-04-08T06:44:11Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2008-04-08T06:44:11Z"}, "message": "a-exetim-mingw.adb, [...]: Use new s-win32.ads unit instead of declaration from s-osinte-mingw.ads.\n\n2008-04-08  Pascal Obry  <obry@adacore.com>\n\n\t* a-exetim-mingw.adb, s-gloloc-mingw.adb, s-taprop-mingw.adb,\n\ts-tasinf-mingw.ad{s,b}, s-taspri-mingw.ads:\n\tUse new s-win32.ads unit instead of declaration\n\tfrom s-osinte-mingw.ads.\n\t\n\t* s-osinte-mingw.ads:\n\tMove all non tasking based interface to s-win32.ads.\n\t\n\t* s-osprim-mingw.adb:\n\tRemove duplicated declarations and use s-win32.ads\n\tunit instead.\n\nFrom-SVN: r134006", "tree": {"sha": "c6327ee4eb81f986ef057b7b8f78578b45515e50", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c6327ee4eb81f986ef057b7b8f78578b45515e50"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3824d9af3e3d65e0a3e4aeca16b2b16b37c464ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3824d9af3e3d65e0a3e4aeca16b2b16b37c464ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3824d9af3e3d65e0a3e4aeca16b2b16b37c464ea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3824d9af3e3d65e0a3e4aeca16b2b16b37c464ea/comments", "author": {"login": "TurboGit", "id": 467069, "node_id": "MDQ6VXNlcjQ2NzA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/467069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TurboGit", "html_url": "https://github.com/TurboGit", "followers_url": "https://api.github.com/users/TurboGit/followers", "following_url": "https://api.github.com/users/TurboGit/following{/other_user}", "gists_url": "https://api.github.com/users/TurboGit/gists{/gist_id}", "starred_url": "https://api.github.com/users/TurboGit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TurboGit/subscriptions", "organizations_url": "https://api.github.com/users/TurboGit/orgs", "repos_url": "https://api.github.com/users/TurboGit/repos", "events_url": "https://api.github.com/users/TurboGit/events{/privacy}", "received_events_url": "https://api.github.com/users/TurboGit/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c4394c1546db30313bdd30d0ad3d5e304d44ba24", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4394c1546db30313bdd30d0ad3d5e304d44ba24", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4394c1546db30313bdd30d0ad3d5e304d44ba24"}], "stats": {"total": 122, "additions": 52, "deletions": 70}, "files": [{"sha": "8ee288acb64dbcd97a94e050a2ff4da0dd22487d", "filename": "gcc/ada/a-exetim-mingw.adb", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3824d9af3e3d65e0a3e4aeca16b2b16b37c464ea/gcc%2Fada%2Fa-exetim-mingw.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3824d9af3e3d65e0a3e4aeca16b2b16b37c464ea/gcc%2Fada%2Fa-exetim-mingw.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-exetim-mingw.adb?ref=3824d9af3e3d65e0a3e4aeca16b2b16b37c464ea", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---            Copyright (C) 2007, Free Software Foundation, Inc.            --\n+--         Copyright (C) 2007-2008, Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -39,6 +39,7 @@ with Ada.Unchecked_Conversion;\n with System.OS_Interface;               use System.OS_Interface;\n with System.Task_Primitives.Operations; use System.Task_Primitives.Operations;\n with System.Tasking;                    use System.Tasking;\n+with System.Win32;                      use System.Win32;\n \n package body Ada.Execution_Time is\n \n@@ -118,7 +119,7 @@ package body Ada.Execution_Time is\n           (HANDLE (Get_Thread_Id (To_Task_Id (T))),\n            C_Time'Access, E_Time'Access, K_Time'Access, U_Time'Access);\n \n-      if Res = False then\n+      if Res = System.Win32.FALSE then\n          raise Program_Error;\n       end if;\n "}, {"sha": "39c8abf097d516580335ff2556adff0fe614f958", "filename": "gcc/ada/s-gloloc-mingw.adb", "status": "modified", "additions": 15, "deletions": 19, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3824d9af3e3d65e0a3e4aeca16b2b16b37c464ea/gcc%2Fada%2Fs-gloloc-mingw.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3824d9af3e3d65e0a3e4aeca16b2b16b37c464ea/gcc%2Fada%2Fs-gloloc-mingw.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-gloloc-mingw.adb?ref=3824d9af3e3d65e0a3e4aeca16b2b16b37c464ea", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                     Copyright (C) 1999-2007, AdaCore                     --\n+--                     Copyright (C) 1999-2008, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -33,18 +33,19 @@\n \n --  This implementation is specific to NT\n \n+with System.OS_Interface;\n with System.Task_Lock;\n+with System.Win32;\n \n with Interfaces.C.Strings;\n-with System.OS_Interface;\n \n package body System.Global_Locks is\n \n    package TSL renames System.Task_Lock;\n    package OSI renames System.OS_Interface;\n    package ICS renames Interfaces.C.Strings;\n \n-   subtype Lock_File_Entry is OSI.HANDLE;\n+   subtype Lock_File_Entry is Win32.HANDLE;\n \n    Last_Lock  : Lock_Type := Null_Lock;\n    Lock_Table : array (Lock_Type range 1 .. 15) of Lock_File_Entry;\n@@ -53,10 +54,7 @@ package body System.Global_Locks is\n    -- Create_Lock --\n    -----------------\n \n-   procedure Create_Lock\n-     (Lock : out Lock_Type;\n-      Name : String)\n-   is\n+   procedure Create_Lock (Lock : out Lock_Type; Name : String) is\n       L : Lock_Type;\n \n    begin\n@@ -70,20 +68,19 @@ package body System.Global_Locks is\n       end if;\n \n       Lock_Table (L) :=\n-        OSI.CreateMutex (null, OSI.BOOL (False), ICS.New_String (Name));\n+        OSI.CreateMutex (null, Win32.FALSE, ICS.New_String (Name));\n       Lock := L;\n    end Create_Lock;\n \n    ------------------\n    -- Acquire_Lock --\n    ------------------\n \n-   procedure Acquire_Lock\n-     (Lock : in out Lock_Type)\n-   is\n-      use type OSI.DWORD;\n+   procedure Acquire_Lock (Lock : in out Lock_Type) is\n+      use type Win32.DWORD;\n+\n+      Res : Win32.DWORD;\n \n-      Res : OSI.DWORD;\n    begin\n       Res := OSI.WaitForSingleObject (Lock_Table (Lock), OSI.Wait_Infinite);\n \n@@ -96,16 +93,15 @@ package body System.Global_Locks is\n    -- Release_Lock --\n    ------------------\n \n-   procedure Release_Lock\n-     (Lock : in out Lock_Type)\n-   is\n-      use type OSI.BOOL;\n+   procedure Release_Lock (Lock : in out Lock_Type) is\n+      use type Win32.BOOL;\n+\n+      Res : Win32.BOOL;\n \n-      Res : OSI.BOOL;\n    begin\n       Res := OSI.ReleaseMutex (Lock_Table (Lock));\n \n-      if Res = OSI.False then\n+      if Res = Win32.FALSE then\n          raise Lock_Error;\n       end if;\n    end Release_Lock;"}, {"sha": "e172388a24798b0db2315f846c1001283c9ee712", "filename": "gcc/ada/s-osprim-mingw.adb", "status": "modified", "additions": 10, "deletions": 38, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3824d9af3e3d65e0a3e4aeca16b2b16b37c464ea/gcc%2Fada%2Fs-osprim-mingw.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3824d9af3e3d65e0a3e4aeca16b2b16b37c464ea/gcc%2Fada%2Fs-osprim-mingw.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osprim-mingw.adb?ref=3824d9af3e3d65e0a3e4aeca16b2b16b37c464ea", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1998-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1998-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -33,40 +33,12 @@\n \n --  This is the NT version of this package\n \n-with Interfaces.C;\n+with System.Win32.Ext;\n \n package body System.OS_Primitives is\n \n-   ---------------------------\n-   -- Win32 API Definitions --\n-   ---------------------------\n-\n-   --  These definitions are copied from System.OS_Interface because we do not\n-   --  want to depend on gnarl here.\n-\n-   type DWORD is new Interfaces.C.unsigned_long;\n-\n-   type LARGE_INTEGER is delta 1.0 range -2.0**63 .. 2.0**63 - 1.0;\n-\n-   type BOOL is new Boolean;\n-   for BOOL'Size use Interfaces.C.unsigned_long'Size;\n-\n-   procedure GetSystemTimeAsFileTime\n-     (lpFileTime : not null access Long_Long_Integer);\n-   pragma Import (Stdcall, GetSystemTimeAsFileTime, \"GetSystemTimeAsFileTime\");\n-\n-   function QueryPerformanceCounter\n-     (lpPerformanceCount : not null access LARGE_INTEGER) return BOOL;\n-   pragma Import\n-     (Stdcall, QueryPerformanceCounter, \"QueryPerformanceCounter\");\n-\n-   function QueryPerformanceFrequency\n-     (lpFrequency : not null access LARGE_INTEGER) return BOOL;\n-   pragma Import\n-     (Stdcall, QueryPerformanceFrequency, \"QueryPerformanceFrequency\");\n-\n-   procedure Sleep (dwMilliseconds : DWORD);\n-   pragma Import (Stdcall, Sleep, External_Name => \"Sleep\");\n+   use System.Win32;\n+   use System.Win32.Ext;\n \n    ----------------------------------------\n    -- Data for the high resolution clock --\n@@ -144,7 +116,7 @@ package body System.OS_Primitives is\n       Now                  : aliased Long_Long_Integer;\n \n    begin\n-      if not QueryPerformanceCounter (Current_Ticks'Access) then\n+      if QueryPerformanceCounter (Current_Ticks'Access) = Win32.FALSE then\n          return 0.0;\n       end if;\n \n@@ -202,7 +174,7 @@ package body System.OS_Primitives is\n       loop\n          GetSystemTimeAsFileTime (Base_Time'Access);\n \n-         if not QueryPerformanceCounter (Base_Ticks'Access) then\n+         if QueryPerformanceCounter (Base_Ticks'Access) = Win32.FALSE then\n             pragma Assert\n               (Standard.False,\n                \"Could not query high performance counter in Clock\");\n@@ -228,7 +200,7 @@ package body System.OS_Primitives is\n       Elap_Secs_Tick : Duration;\n \n    begin\n-      if not QueryPerformanceCounter (Current_Ticks'Access) then\n+      if QueryPerformanceCounter (Current_Ticks'Access) = Win32.FALSE then\n          return 0.0;\n       end if;\n \n@@ -313,9 +285,9 @@ package body System.OS_Primitives is\n \n       --  Get starting time as base\n \n-      if not QueryPerformanceFrequency (Tick_Frequency'Access) then\n-         raise Program_Error\n-           with \"cannot get high performance counter frequency\";\n+      if QueryPerformanceFrequency (Tick_Frequency'Access) = Win32.FALSE then\n+         raise Program_Error with\n+           \"cannot get high performance counter frequency\";\n       end if;\n \n       Get_Base_Time;"}, {"sha": "33b9c739853e46820a3286fc50c01c9e4cbf7788", "filename": "gcc/ada/s-tasinf-mingw.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3824d9af3e3d65e0a3e4aeca16b2b16b37c464ea/gcc%2Fada%2Fs-tasinf-mingw.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3824d9af3e3d65e0a3e4aeca16b2b16b37c464ea/gcc%2Fada%2Fs-tasinf-mingw.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tasinf-mingw.adb?ref=3824d9af3e3d65e0a3e4aeca16b2b16b37c464ea", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---            Copyright (C) 2007, Free Software Foundation, Inc.            --\n+--         Copyright (C) 2007-2008, Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -48,9 +48,9 @@ package body System.Task_Info is\n    begin\n       if N_CPU = 0 then\n          declare\n-            SI : aliased System.OS_Interface.SYSTEM_INFO;\n+            SI : aliased Win32.SYSTEM_INFO;\n          begin\n-            System.OS_Interface.GetSystemInfo (SI'Access);\n+            Win32.GetSystemInfo (SI'Access);\n             N_CPU := Positive (SI.dwNumberOfProcessors);\n          end;\n       end if;"}, {"sha": "d67c3c18bee6508429b9ddb98eb51a5f66b7286b", "filename": "gcc/ada/s-tasinf-mingw.ads", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3824d9af3e3d65e0a3e4aeca16b2b16b37c464ea/gcc%2Fada%2Fs-tasinf-mingw.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3824d9af3e3d65e0a3e4aeca16b2b16b37c464ea/gcc%2Fada%2Fs-tasinf-mingw.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tasinf-mingw.ads?ref=3824d9af3e3d65e0a3e4aeca16b2b16b37c464ea", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---            Copyright (C) 2007, Free Software Foundation, Inc.            --\n+--         Copyright (C) 2007-2008, Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -43,14 +43,14 @@\n \n --  This is the Windows (native) version of this module\n \n-with System.OS_Interface;\n+with System.Win32;\n \n package System.Task_Info is\n    pragma Preelaborate;\n    pragma Elaborate_Body;\n    --  To ensure that a body is allowed\n \n-   use type System.OS_Interface.ProcessorId;\n+   use type System.Win32.ProcessorId;\n \n    --  Windows provides a way to define the ideal processor to use for a given\n    --  thread. The ideal processor is not necessarily the one that will be used\n@@ -80,7 +80,7 @@ package System.Task_Info is\n    -- Thread Attributes --\n    -----------------------\n \n-   subtype CPU_Number is System.OS_Interface.ProcessorId;\n+   subtype CPU_Number is System.Win32.ProcessorId;\n \n    Any_CPU : constant CPU_Number := -1;\n "}, {"sha": "f9e13e9d49966029fc7e88d25ff2db29a23380af", "filename": "gcc/ada/s-taspri-mingw.ads", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3824d9af3e3d65e0a3e4aeca16b2b16b37c464ea/gcc%2Fada%2Fs-taspri-mingw.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3824d9af3e3d65e0a3e4aeca16b2b16b37c464ea/gcc%2Fada%2Fs-taspri-mingw.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taspri-mingw.ads?ref=3824d9af3e3d65e0a3e4aeca16b2b16b37c464ea", "patch": "@@ -38,6 +38,7 @@ pragma Polling (Off);\n --  operations. It causes infinite loops and other problems.\n \n with System.OS_Interface;\n+with System.Win32;\n \n package System.Task_Primitives is\n    pragma Preelaborate;\n@@ -62,6 +63,18 @@ package System.Task_Primitives is\n    --  A component of this type is guaranteed to be included in the\n    --  Ada_Task_Control_Block.\n \n+   subtype Task_Address is System.Address;\n+   --  In some versions of Task_Primitives, notably for VMS, Task_Address is\n+   --  the short version of address defined in System.Aux_DEC. To avoid\n+   --  dragging Aux_DEC into tasking packages a tasking specific subtype is\n+   --  defined here.\n+\n+   Task_Address_Size : constant := Standard'Address_Size;\n+   --  The size of Task_Address\n+\n+   Alternate_Stack_Size : constant := 0;\n+   --  No alternate signal stack is used on this platform\n+\n private\n \n    type Lock is record\n@@ -70,7 +83,7 @@ private\n       Owner_Priority : Integer;\n    end record;\n \n-   type Condition_Variable is new System.OS_Interface.HANDLE;\n+   type Condition_Variable is new System.Win32.HANDLE;\n \n    type RTS_Lock is new System.OS_Interface.CRITICAL_SECTION;\n \n@@ -87,20 +100,20 @@ private\n       L : aliased System.OS_Interface.CRITICAL_SECTION;\n       --  Protection for ensuring mutual exclusion on the Suspension_Object\n \n-      CV : aliased System.OS_Interface.HANDLE;\n+      CV : aliased Win32.HANDLE;\n       --  Condition variable used to queue threads until condition is signaled\n    end record;\n \n    type Private_Data is record\n-      Thread : aliased System.OS_Interface.HANDLE;\n+      Thread : aliased Win32.HANDLE;\n       pragma Atomic (Thread);\n       --  Thread field may be updated by two different threads of control.\n       --  (See, Enter_Task and Create_Task in s-taprop.adb).\n       --  They put the same value (thr_self value). We do not want to\n       --  use lock on those operations and the only thing we have to\n       --  make sure is that they are updated in atomic fashion.\n \n-      Thread_Id : aliased System.OS_Interface.DWORD;\n+      Thread_Id : aliased Win32.DWORD;\n       --  Used to provide a better tasking support in gdb\n \n       CV : aliased Condition_Variable;"}]}