{"sha": "e27cf2e372651997c3b46a5662dd4d47c53dd13b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTI3Y2YyZTM3MjY1MTk5N2MzYjQ2YTU2NjJkZDRkNDdjNTNkZDEzYg==", "commit": {"author": {"name": "Mihail Ionescu", "email": "mihail.ionescu@arm.com", "date": "2020-01-14T18:00:35Z"}, "committer": {"name": "Mihail Ionescu", "email": "mihail.ionescu@arm.com", "date": "2020-01-16T15:10:46Z"}, "message": "[PATCH, GCC/ARM, 2/10] Add command line support for Armv8.1-M Mainline\n\nBesides the expected enabling of the new value for the -march\ncommand-line option (-march=armv8.1-m.main) and its extensions (see\nbelow), this patch disables support of the Security Extensions for this\nnewly added architecture. This is done both by not including the cmse\nbit in the architecture description and by throwing an error message\nwhen user request Armv8.1-M Mainline Security Extensions. Note that\nArmv8-M Baseline and Mainline Security Extensions are still enabled.\n\nOnly extensions for already supported instructions are implemented in\nthis patch. Other extensions (MVE integer and float) will be added in\nseparate patches. The following configurations are allowed for Armv8.1-M\nMainline with regards to FPU and implemented in this patch:\n+ no FPU (+nofp)\n+ single precision VFPv5 with FP16 (+fp)\n+ double precision VFPv5 with FP16 (+fp.dp)\n\nChangeLog entry are as follow:\n\n*** gcc/ChangeLog ***\n\n2020-01-16  Mihail-Calin Ionescu <mihail.ionescu@arm.com>\n2020-01-16  Thomas Preud'homme <thomas.preudhomme@arm.com>\n\n\t* config/arm/arm-cpus.in (armv8_1m_main): New feature.\n\t(ARMv4, ARMv4t, ARMv5t, ARMv5te, ARMv5tej, ARMv6, ARMv6j, ARMv6k,\n\tARMv6z, ARMv6kz, ARMv6zk, ARMv6t2, ARMv6m, ARMv7, ARMv7a, ARMv7ve,\n\tARMv7r, ARMv7m, ARMv7em, ARMv8a, ARMv8_1a, ARMv8_2a, ARMv8_3a,\n\tARMv8_4a, ARMv8_5a, ARMv8m_base, ARMv8m_main, ARMv8r): Reindent.\n\t(ARMv8_1m_main): New feature group.\n\t(armv8.1-m.main): New architecture.\n\t* config/arm/arm-tables.opt: Regenerate.\n\t* config/arm/arm.c (arm_arch8_1m_main): Define and default initialize.\n\t(arm_option_reconfigure_globals): Initialize arm_arch8_1m_main.\n\t(arm_options_perform_arch_sanity_checks): Error out when targeting\n\tArmv8.1-M Mainline Security Extensions.\n\t* config/arm/arm.h (arm_arch8_1m_main): Declare.\n\n*** gcc/testsuite/ChangeLog ***\n\n2020-01-16  Mihail-Calin Ionescu <mihail.ionescu@arm.com>\n2020-01-16  Thomas Preud'homme <thomas.preudhomme@arm.com>\n\n\t* lib/target-supports.exp\n\t(check_effective_target_arm_arch_v8_1m_main_ok): Define.\n\t(add_options_for_arm_arch_v8_1m_main): Likewise.\n\t(check_effective_target_arm_arch_v8_1m_main_multilib): Likewise.", "tree": {"sha": "b19e15fa41a2fdd7ac94216116ed6d078b8f4fc1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b19e15fa41a2fdd7ac94216116ed6d078b8f4fc1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e27cf2e372651997c3b46a5662dd4d47c53dd13b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e27cf2e372651997c3b46a5662dd4d47c53dd13b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e27cf2e372651997c3b46a5662dd4d47c53dd13b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e27cf2e372651997c3b46a5662dd4d47c53dd13b/comments", "author": null, "committer": null, "parents": [{"sha": "e953433f089b8276c0445ab538bbf655ef6c8c97", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e953433f089b8276c0445ab538bbf655ef6c8c97", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e953433f089b8276c0445ab538bbf655ef6c8c97"}], "stats": {"total": 99, "additions": 84, "deletions": 15}, "files": [{"sha": "d2d29cc9e06ba70a8f86fabd31748d9f7312a659", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e27cf2e372651997c3b46a5662dd4d47c53dd13b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e27cf2e372651997c3b46a5662dd4d47c53dd13b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e27cf2e372651997c3b46a5662dd4d47c53dd13b", "patch": "@@ -1,3 +1,20 @@\n+2020-01-16  Mihail-Calin Ionescu <mihail.ionescu@arm.com>\n+2020-01-16  Thomas Preud'homme <thomas.preudhomme@arm.com>\n+\n+\t* config/arm/arm-cpus.in (armv8_1m_main): New feature.\n+\t(ARMv4, ARMv4t, ARMv5t, ARMv5te, ARMv5tej, ARMv6, ARMv6j, ARMv6k,\n+\tARMv6z, ARMv6kz, ARMv6zk, ARMv6t2, ARMv6m, ARMv7, ARMv7a, ARMv7ve,\n+\tARMv7r, ARMv7m, ARMv7em, ARMv8a, ARMv8_1a, ARMv8_2a, ARMv8_3a,\n+\tARMv8_4a, ARMv8_5a, ARMv8m_base, ARMv8m_main, ARMv8r): Reindent.\n+\t(ARMv8_1m_main): New feature group.\n+\t(armv8.1-m.main): New architecture.\n+\t* config/arm/arm-tables.opt: Regenerate.\n+\t* config/arm/arm.c (arm_arch8_1m_main): Define and default initialize.\n+\t(arm_option_reconfigure_globals): Initialize arm_arch8_1m_main.\n+\t(arm_options_perform_arch_sanity_checks): Error out when targeting\n+\tArmv8.1-M Mainline Security Extensions.\n+\t* config/arm/arm.h (arm_arch8_1m_main): Declare.\n+\n 2020-01-16  Stam Markianos-Wright  <stam.markianos-wright@arm.com>\n \n \t* config/aarch64/aarch64-simd-builtins.def (aarch64_bfdot,"}, {"sha": "fdf336a59302460d3a6ec7b5273b926f7affbae6", "filename": "gcc/config/arm/arm-cpus.in", "status": "modified", "additions": 31, "deletions": 13, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e27cf2e372651997c3b46a5662dd4d47c53dd13b/gcc%2Fconfig%2Farm%2Farm-cpus.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e27cf2e372651997c3b46a5662dd4d47c53dd13b/gcc%2Fconfig%2Farm%2Farm-cpus.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-cpus.in?ref=e27cf2e372651997c3b46a5662dd4d47c53dd13b", "patch": "@@ -129,6 +129,9 @@ define feature armv8_6\n # M-Profile security extensions.\n define feature cmse\n \n+# Architecture rel 8.1-M.\n+define feature armv8_1m_main\n+\n # Floating point and Neon extensions.\n # VFPv1 is not supported in GCC.\n \n@@ -235,21 +238,21 @@ define fgroup ALL_FPU_EXTERNAL fp16 bf16\n # Everything related to the FPU extensions (FP or SIMD).\n define fgroup ALL_FP\tALL_FPU_EXTERNAL ALL_FPU_INTERNAL ALL_SIMD\n \n-define fgroup ARMv4       armv4 notm\n-define fgroup ARMv4t      ARMv4 thumb\n-define fgroup ARMv5t      ARMv4t armv5t\n-define fgroup ARMv5te     ARMv5t armv5te\n-define fgroup ARMv5tej    ARMv5te\n-define fgroup ARMv6       ARMv5te armv6 be8\n-define fgroup ARMv6j      ARMv6\n-define fgroup ARMv6k      ARMv6 armv6k\n-define fgroup ARMv6z      ARMv6\n-define fgroup ARMv6kz     ARMv6k quirk_armv6kz\n-define fgroup ARMv6zk     ARMv6k\n-define fgroup ARMv6t2     ARMv6 thumb2\n+define fgroup ARMv4         armv4 notm\n+define fgroup ARMv4t        ARMv4 thumb\n+define fgroup ARMv5t        ARMv4t armv5t\n+define fgroup ARMv5te       ARMv5t armv5te\n+define fgroup ARMv5tej      ARMv5te\n+define fgroup ARMv6         ARMv5te armv6 be8\n+define fgroup ARMv6j        ARMv6\n+define fgroup ARMv6k        ARMv6 armv6k\n+define fgroup ARMv6z        ARMv6\n+define fgroup ARMv6kz       ARMv6k quirk_armv6kz\n+define fgroup ARMv6zk       ARMv6k\n+define fgroup ARMv6t2       ARMv6 thumb2\n # This is suspect.  ARMv6-m doesn't really pull in any useful features\n # from ARMv5* or ARMv6.\n-define fgroup ARMv6m      armv4 thumb armv5t armv5te armv6 be8\n+define fgroup ARMv6m        armv4 thumb armv5t armv5te armv6 be8\n # This is suspect, the 'common' ARMv7 subset excludes the thumb2 'DSP' and\n # integer SIMD instructions that are in ARMv6T2.  */\n define fgroup ARMv7       ARMv6m thumb2 armv7\n@@ -269,6 +272,10 @@ define fgroup ARMv8_6a    ARMv8_5a armv8_6\n define fgroup ARMv8m_base ARMv6m armv8 cmse tdiv\n define fgroup ARMv8m_main ARMv7m armv8 cmse\n define fgroup ARMv8r      ARMv8a\n+# Feature cmse is omitted to disable Security Extensions support while secure\n+# code compiled by GCC does not preserve FP context as allowed by Armv8.1-M\n+# Mainline.\n+define fgroup ARMv8_1m_main ARMv7m armv8 armv8_1m_main\n \n # Useful combinations.\n define fgroup VFPv2\tvfpv2\n@@ -680,6 +687,17 @@ begin arch armv8-r\n  option nofp remove ALL_FP\n end arch armv8-r\n \n+begin arch armv8.1-m.main\n+ tune for cortex-m7\n+ tune flags CO_PROC\n+ base 8M_MAIN\n+ isa ARMv8_1m_main\n+# fp => FPv5-sp-d16; fp.dp => FPv5-d16\n+ option fp add FPv5 fp16\n+ option fp.dp add FPv5 FP_DBL fp16\n+ option nofp remove ALL_FP\n+end arch armv8.1-m.main\n+\n begin arch iwmmxt\n  tune for iwmmxt\n  tune flags LDSCHED STRONG XSCALE"}, {"sha": "f295a4cffa2bbb3f8163fb9cef784b5af59aee12", "filename": "gcc/config/arm/arm-tables.opt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e27cf2e372651997c3b46a5662dd4d47c53dd13b/gcc%2Fconfig%2Farm%2Farm-tables.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e27cf2e372651997c3b46a5662dd4d47c53dd13b/gcc%2Fconfig%2Farm%2Farm-tables.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-tables.opt?ref=e27cf2e372651997c3b46a5662dd4d47c53dd13b", "patch": "@@ -353,7 +353,7 @@ EnumValue\n Enum(arm_arch) String(armv8-m.main) Value(28)\n \n EnumValue\n-Enum(arm_arch) String(armv8-r) Value(29)\n+Enum(arm_arch) String(armv8.1-m.main) Value(29)\n \n EnumValue\n Enum(arm_arch) String(iwmmxt) Value(30)"}, {"sha": "a7242b2cdefcafd72a47e6cbe6e6086da8f0b1dc", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e27cf2e372651997c3b46a5662dd4d47c53dd13b/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e27cf2e372651997c3b46a5662dd4d47c53dd13b/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=e27cf2e372651997c3b46a5662dd4d47c53dd13b", "patch": "@@ -914,6 +914,9 @@ int arm_arch8_3 = 0;\n \n /* Nonzero if this chip supports the ARM Architecture 8.4 extensions.  */\n int arm_arch8_4 = 0;\n+/* Nonzero if this chip supports the ARM Architecture 8.1-M Mainline\n+   extensions.  */\n+int arm_arch8_1m_main = 0;\n \n /* Nonzero if this chip supports the FP16 instructions extension of ARM\n    Architecture 8.2.  */\n@@ -3674,6 +3677,8 @@ arm_option_reconfigure_globals (void)\n   arm_arch8_2 = bitmap_bit_p (arm_active_target.isa, isa_bit_armv8_2);\n   arm_arch8_3 = bitmap_bit_p (arm_active_target.isa, isa_bit_armv8_3);\n   arm_arch8_4 = bitmap_bit_p (arm_active_target.isa, isa_bit_armv8_4);\n+  arm_arch8_1m_main = bitmap_bit_p (arm_active_target.isa,\n+\t\t\t\t    isa_bit_armv8_1m_main);\n   arm_arch_thumb1 = bitmap_bit_p (arm_active_target.isa, isa_bit_thumb);\n   arm_arch_thumb2 = bitmap_bit_p (arm_active_target.isa, isa_bit_thumb2);\n   arm_arch_xscale = bitmap_bit_p (arm_active_target.isa, isa_bit_xscale);\n@@ -3762,6 +3767,9 @@ arm_options_perform_arch_sanity_checks (void)\n   if (!arm_arch4 && arm_fp16_format != ARM_FP16_FORMAT_NONE)\n     sorry (\"__fp16 and no ldrh\");\n \n+  if (use_cmse && arm_arch8_1m_main)\n+    error (\"Armv8.1-M Mainline Security Extensions are unsupported\");\n+\n   if (use_cmse && !arm_arch_cmse)\n     error (\"target CPU does not support ARMv8-M Security Extensions\");\n "}, {"sha": "e1cce23f7ef2b26c028efc0abf521a0a7ea02819", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e27cf2e372651997c3b46a5662dd4d47c53dd13b/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e27cf2e372651997c3b46a5662dd4d47c53dd13b/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=e27cf2e372651997c3b46a5662dd4d47c53dd13b", "patch": "@@ -465,6 +465,10 @@ extern int arm_arch8_3;\n /* Nonzero if this chip supports the ARM Architecture 8.4 extensions.  */\n extern int arm_arch8_4;\n \n+/* Nonzero if this chip supports the ARM Architecture 8.1-M Mainline\n+   extensions.  */\n+extern int arm_arch8_1m_main;\n+\n /* Nonzero if this chip supports the FP16 instructions extension of ARM\n    Architecture 8.2.  */\n extern int arm_fp16_inst;"}, {"sha": "b0c153afb868230e57e5a828aff8d3dabb45716a", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e27cf2e372651997c3b46a5662dd4d47c53dd13b/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e27cf2e372651997c3b46a5662dd4d47c53dd13b/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=e27cf2e372651997c3b46a5662dd4d47c53dd13b", "patch": "@@ -18095,6 +18095,7 @@ Permissible names are:\n @samp{armv6-m}, @samp{armv6s-m},\n @samp{armv7-m}, @samp{armv7e-m},\n @samp{armv8-m.base}, @samp{armv8-m.main},\n+@samp{armv8.1-m.main},\n @samp{iwmmxt} and @samp{iwmmxt2}.\n \n Additionally, the following architectures, which lack support for the\n@@ -18485,6 +18486,18 @@ The single- and double-precision FPv5 floating-point instructions.\n Disable the floating-point extensions.\n @end table\n \n+@item  armv8.1-m.main\n+@table @samp\n+@item +fp\n+The single-precision floating-point instructions.\n+\n+@item +fp.dp\n+The single- and double-precision floating-point instructions.\n+\n+@item +nofp\n+Disable the floating-point extension.\n+@end table\n+\n @item  armv8-m.main\n @table @samp\n @item +dsp"}, {"sha": "e6d2cd5995f2db30eee753b0cbc89988274a264c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e27cf2e372651997c3b46a5662dd4d47c53dd13b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e27cf2e372651997c3b46a5662dd4d47c53dd13b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e27cf2e372651997c3b46a5662dd4d47c53dd13b", "patch": "@@ -1,3 +1,11 @@\n+2020-01-16  Mihail-Calin Ionescu <mihail.ionescu@arm.com>\n+2020-01-16  Thomas Preud'homme <thomas.preudhomme@arm.com>\n+\n+\t* lib/target-supports.exp\n+\t(check_effective_target_arm_arch_v8_1m_main_ok): Define.\n+\t(add_options_for_arm_arch_v8_1m_main): Likewise.\n+\t(check_effective_target_arm_arch_v8_1m_main_multilib): Likewise.\n+\n 2020-01-16  Stam Markianos-Wright  <stam.markianos-wright@arm.com>\n \n \t* gcc.target/aarch64/advsimd-intrinsics/bfdot-1.c: New."}, {"sha": "b247d943e0c802ecd0260db21575655c2b18283b", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e27cf2e372651997c3b46a5662dd4d47c53dd13b/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e27cf2e372651997c3b46a5662dd4d47c53dd13b/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=e27cf2e372651997c3b46a5662dd4d47c53dd13b", "patch": "@@ -4352,10 +4352,11 @@ foreach { armfunc armflag armdefs } {\n \tv8a \"-march=armv8-a\" __ARM_ARCH_8A__\n \tv8_1a \"-march=armv8.1-a\" __ARM_ARCH_8A__\n \tv8_2a \"-march=armv8.2-a\" __ARM_ARCH_8A__\n+\tv8r \"-march=armv8-r\" __ARM_ARCH_8R__\n \tv8m_base \"-march=armv8-m.base -mthumb -mfloat-abi=soft\"\n \t\t__ARM_ARCH_8M_BASE__\n \tv8m_main \"-march=armv8-m.main -mthumb\" __ARM_ARCH_8M_MAIN__\n-\tv8r \"-march=armv8-r\" __ARM_ARCH_8R__ } {\n+\tv8_1m_main \"-march=armv8.1-m.main -mthumb\" __ARM_ARCH_8M_MAIN__ } {\n     eval [string map [list FUNC $armfunc FLAG $armflag DEFS $armdefs ] {\n \tproc check_effective_target_arm_arch_FUNC_ok { } {\n \t    return [check_no_compiler_messages arm_arch_FUNC_ok assembly {"}]}