{"sha": "c0d578e68f92d8add050826588146be0a6fd1ee0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzBkNTc4ZTY4ZjkyZDhhZGQwNTA4MjY1ODgxNDZiZTBhNmZkMWVlMA==", "commit": {"author": {"name": "Geoffrey Keating", "email": "geoffk@apple.com", "date": "2004-06-22T06:51:56Z"}, "committer": {"name": "Geoffrey Keating", "email": "geoffk@gcc.gnu.org", "date": "2004-06-22T06:51:56Z"}, "message": "c-opts.c (c_common_handle_option): Handle -fpch-preprocess.\n\n2004-06-21  Geoffrey Keating  <geoffk@apple.com>\n\n\t* c-opts.c (c_common_handle_option): Handle -fpch-preprocess.\n\t* c-common.h (flag_pch_preprocess): Declare.\n\t(c_common_pch_pragma): Likewise.\n\t* c-common.c (flag_pch_preprocess): New.\n\t* c-pch.c (c_common_read_pch): Support -fpreprocess-only.\n\t(c_common_pch_pragma): New.\n\t* c-ppoutput.c (cb_read_pch): New.\n\t(init_pp_output): Support -fpch-preprocess.\n\t* c-pragma.c (init_pragma): Support #pragma GNUC pch_preprocess.\n\t* c.opt (fpch-preprocess): New.\n\t* gcc.c (cpp_options): When save-temps, pass -fpch-preprocess.\n\t* doc/cppopts.texi: Document -fpch-preprocess.\n\t* doc/invoke.texi (Precompiled Headers): Mention that\n\t-fpreprocessed is safe for PCH.  Mention that if an option is\n\tlisted as safe that doesn't mean it does what you expect.\n\nIndex: gcc/testsuite/ChangeLog\n2004-06-21  Geoffrey Keating  <geoffk@apple.com>\n\n\t* gcc.dg/pch/save-temps-1.c: New file.\n\t* gcc.dg/pch/save-temps-1.hs: New file.\n\nIndex: libcpp/ChangeLog\n2004-06-21  Geoffrey Keating  <geoffk@apple.com>\n\n\t* files.c (should_stack_file): Correct swapped parameters to call\n\tto cb.read_pch.\n\t* pch.c (cpp_valid_state): Handle -fpreprocessed.\n\nFrom-SVN: r83478", "tree": {"sha": "33b0e3a2356eea4890c97f802528ed3f9e8ceebd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/33b0e3a2356eea4890c97f802528ed3f9e8ceebd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c0d578e68f92d8add050826588146be0a6fd1ee0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0d578e68f92d8add050826588146be0a6fd1ee0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0d578e68f92d8add050826588146be0a6fd1ee0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0d578e68f92d8add050826588146be0a6fd1ee0/comments", "author": {"login": "geoffk01", "id": 31905243, "node_id": "MDQ6VXNlcjMxOTA1MjQz", "avatar_url": "https://avatars.githubusercontent.com/u/31905243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/geoffk01", "html_url": "https://github.com/geoffk01", "followers_url": "https://api.github.com/users/geoffk01/followers", "following_url": "https://api.github.com/users/geoffk01/following{/other_user}", "gists_url": "https://api.github.com/users/geoffk01/gists{/gist_id}", "starred_url": "https://api.github.com/users/geoffk01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/geoffk01/subscriptions", "organizations_url": "https://api.github.com/users/geoffk01/orgs", "repos_url": "https://api.github.com/users/geoffk01/repos", "events_url": "https://api.github.com/users/geoffk01/events{/privacy}", "received_events_url": "https://api.github.com/users/geoffk01/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f6144c34c82da903797566d44901dad231a7e4a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6144c34c82da903797566d44901dad231a7e4a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6144c34c82da903797566d44901dad231a7e4a9"}], "stats": {"total": 204, "additions": 188, "deletions": 16}, "files": [{"sha": "88a9d9575cb88e5f4fb5a719edf5e07dfab4f904", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0d578e68f92d8add050826588146be0a6fd1ee0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0d578e68f92d8add050826588146be0a6fd1ee0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c0d578e68f92d8add050826588146be0a6fd1ee0", "patch": "@@ -1,3 +1,21 @@\n+2004-06-21  Geoffrey Keating  <geoffk@apple.com>\n+\n+\t* c-opts.c (c_common_handle_option): Handle -fpch-preprocess.\n+\t* c-common.h (flag_pch_preprocess): Declare.\n+\t(c_common_pch_pragma): Likewise.\n+\t* c-common.c (flag_pch_preprocess): New.\n+\t* c-pch.c (c_common_read_pch): Support -fpreprocess-only.\n+\t(c_common_pch_pragma): New.\n+\t* c-ppoutput.c (cb_read_pch): New.\n+\t(init_pp_output): Support -fpch-preprocess.\n+\t* c-pragma.c (init_pragma): Support #pragma GNUC pch_preprocess.\n+\t* c.opt (fpch-preprocess): New.\n+\t* gcc.c (cpp_options): When save-temps, pass -fpch-preprocess.\n+\t* doc/cppopts.texi: Document -fpch-preprocess.\n+\t* doc/invoke.texi (Precompiled Headers): Mention that\n+\t-fpreprocessed is safe for PCH.  Mention that if an option is\n+\tlisted as safe that doesn't mean it does what you expect.\n+\n 2004-06-22  Ben Elliston  <bje@au.ibm.com>\n \n \t* tree-ssa.c (ssa_redirect_edge): Correct leading comment."}, {"sha": "ab5b2ae3b499d9e2d903102872216dcd78610b9d", "filename": "gcc/c-common.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0d578e68f92d8add050826588146be0a6fd1ee0/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0d578e68f92d8add050826588146be0a6fd1ee0/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=c0d578e68f92d8add050826588146be0a6fd1ee0", "patch": "@@ -217,6 +217,10 @@ char flag_dump_macros;\n \n char flag_dump_includes;\n \n+/* Nonzero means process PCH files while preprocessing.  */\n+\n+bool flag_pch_preprocess;\n+\n /* The file name to which we should write a precompiled header, or\n    NULL if no header will be written in this compile.  */\n "}, {"sha": "03c6c75e1ea170639548766833089a59b736017a", "filename": "gcc/c-common.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0d578e68f92d8add050826588146be0a6fd1ee0/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0d578e68f92d8add050826588146be0a6fd1ee0/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=c0d578e68f92d8add050826588146be0a6fd1ee0", "patch": "@@ -350,6 +350,10 @@ extern char flag_dump_macros;\n \n extern char flag_dump_includes;\n \n+/* Nonzero means process PCH files while preprocessing.  */\n+\n+extern bool flag_pch_preprocess;\n+\n /* The file name to which we should write a precompiled header, or\n    NULL if no header will be written in this compile.  */\n \n@@ -1096,12 +1100,15 @@ extern void c_genericize (tree);\n extern int c_gimplify_expr (tree *, tree *, tree *);\n extern tree c_build_bind_expr (tree, tree);\n \n+/* In c-pch.c  */\n extern void pch_init (void);\n extern int c_common_valid_pch (cpp_reader *pfile, const char *name, int fd);\n extern void c_common_read_pch (cpp_reader *pfile, const char *name, int fd,\n \t\t\t       const char *orig);\n extern void c_common_write_pch (void);\n extern void c_common_no_more_pch (void);\n+extern void c_common_pch_pragma (cpp_reader *pfile);\n+\n extern void builtin_define_with_value (const char *, const char *, int);\n extern void c_stddef_cpp_builtins (void);\n extern void fe_file_change (const struct line_map *);"}, {"sha": "2ae9c13364527620a2282320b1844ea3c470976f", "filename": "gcc/c-opts.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0d578e68f92d8add050826588146be0a6fd1ee0/gcc%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0d578e68f92d8add050826588146be0a6fd1ee0/gcc%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-opts.c?ref=c0d578e68f92d8add050826588146be0a6fd1ee0", "patch": "@@ -879,6 +879,10 @@ c_common_handle_option (size_t scode, const char *arg, int value)\n       cpp_opts->restore_pch_deps = value;\n       break;\n \n+    case OPT_fpch_preprocess:\n+      flag_pch_preprocess = value;\n+      break;\n+\n     case OPT_fpermissive:\n       flag_permissive = value;\n       break;"}, {"sha": "eb043bd089eaca213c14afcf70fcb4d9f7779902", "filename": "gcc/c-pch.c", "status": "modified", "additions": 66, "deletions": 12, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0d578e68f92d8add050826588146be0a6fd1ee0/gcc%2Fc-pch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0d578e68f92d8add050826588146be0a6fd1ee0/gcc%2Fc-pch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pch.c?ref=c0d578e68f92d8add050826588146be0a6fd1ee0", "patch": "@@ -393,8 +393,6 @@ c_common_read_pch (cpp_reader *pfile, const char *name,\n {\n   FILE *f;\n   struct c_pch_header h;\n-  char *buf;\n-  unsigned long written;\n   struct save_macro_data *smd;\n   \n   f = fdopen (fd, \"rb\");\n@@ -412,18 +410,30 @@ c_common_read_pch (cpp_reader *pfile, const char *name,\n       return;\n     }\n \n-  buf = xmalloc (16384);\n-  for (written = 0; written < h.asm_size; )\n+  if (!flag_preprocess_only)\n     {\n-      long size = h.asm_size - written;\n-      if (size > 16384)\n-\tsize = 16384;\n-      if (fread (buf, size, 1, f) != 1\n-\t  || fwrite (buf, size, 1, asm_out_file) != 1)\n-\tcpp_errno (pfile, CPP_DL_ERROR, \"reading\");\n-      written += size;\n+      unsigned long written;\n+      char * buf = xmalloc (16384);\n+\n+      for (written = 0; written < h.asm_size; )\n+\t{\n+\t  long size = h.asm_size - written;\n+\t  if (size > 16384)\n+\t    size = 16384;\n+\t  if (fread (buf, size, 1, f) != 1\n+\t      || fwrite (buf, size, 1, asm_out_file) != 1)\n+\t    cpp_errno (pfile, CPP_DL_ERROR, \"reading\");\n+\t  written += size;\n+\t}\n+      free (buf);\n+    }\n+  else\n+    {\n+      /* If we're preprocessing, don't write to a NULL\n+\t asm_out_file.  */\n+      if (fseek (f, h.asm_size, SEEK_CUR) != 0)\n+\tcpp_errno (pfile, CPP_DL_ERROR, \"seeking\");\n     }\n-  free (buf);\n \n   cpp_prepare_state (pfile, &smd);\n \n@@ -446,3 +456,47 @@ c_common_no_more_pch (void)\n       host_hooks.gt_pch_use_address (NULL, 0, -1, 0);\n     }\n }\n+\n+/* Handle #pragma GCC pch_preprocess, to load in the PCH file.  */\n+\n+#ifndef O_BINARY\n+# define O_BINARY 0\n+#endif\n+\n+void\n+c_common_pch_pragma (cpp_reader *pfile)\n+{\n+  tree name_t;\n+  const char *name;\n+  int fd;\n+\n+  if (c_lex (&name_t) != CPP_STRING)\n+    {\n+      error (\"malformed #pragma GCC pch_preprocess, ignored\");\n+      return;\n+    }\n+\n+  if (! cpp_get_options (pfile)->preprocessed)\n+    {\n+      error (\"pch_preprocess pragma should only be used with -fpreprocessed\");\n+      inform (\"use #include instead\");\n+      return;\n+    }\n+\n+  name = TREE_STRING_POINTER (name_t);\n+  \n+  fd = open (name, O_RDONLY | O_BINARY, 0666);\n+  if (fd == -1)\n+    fatal_error (\"%s: couldn't open PCH file: %m\\n\", name);\n+  \n+  if (c_common_valid_pch (pfile, name, fd) != 1)\n+    {\n+      if (!cpp_get_options (pfile)->warn_invalid_pch)\n+\tinform (\"use -Winvalid-pch for more information\");\n+      fatal_error (\"%s: PCH file was invalid\", name);\n+    }\n+  \n+  c_common_read_pch (pfile, name, fd, name);\n+  \n+  close (fd);\n+}"}, {"sha": "06816e9b885e2face6234b6f7a5b1c210eb3a179", "filename": "gcc/c-ppoutput.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0d578e68f92d8add050826588146be0a6fd1ee0/gcc%2Fc-ppoutput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0d578e68f92d8add050826588146be0a6fd1ee0/gcc%2Fc-ppoutput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-ppoutput.c?ref=c0d578e68f92d8add050826588146be0a6fd1ee0", "patch": "@@ -57,6 +57,8 @@ static void cb_include (cpp_reader *, fileline, const unsigned char *,\n \t\t\tconst char *, int);\n static void cb_ident (cpp_reader *, fileline, const cpp_string *);\n static void cb_def_pragma (cpp_reader *, fileline);\n+static void cb_read_pch (cpp_reader *pfile, const char *name,\n+\t\t\t int fd, const char *orig_name);\n \n /* Preprocess and output.  */\n void\n@@ -106,6 +108,12 @@ init_pp_output (FILE *out_stream)\n   if (flag_dump_includes)\n     cb->include  = cb_include;\n \n+  if (flag_pch_preprocess)\n+    {\n+      cb->valid_pch = c_common_valid_pch;\n+      cb->read_pch = cb_read_pch;\n+    }\n+\n   if (flag_dump_macros == 'N' || flag_dump_macros == 'D')\n     {\n       cb->define = cb_define;\n@@ -416,3 +424,17 @@ dump_macro (cpp_reader *pfile, cpp_hashnode *node, void *v ATTRIBUTE_UNUSED)\n \n   return 1;\n }\n+\n+/* Load in the PCH file NAME, open on FD.  It was originally searched for\n+   by ORIG_NAME.  Also, print out a #include command so that the PCH\n+   file can be loaded when the preprocessed output is compiled.  */\n+\n+static void\n+cb_read_pch (cpp_reader *pfile, const char *name,\n+\t     int fd, const char *orig_name ATTRIBUTE_UNUSED)\n+{\n+  c_common_read_pch (pfile, name, fd, orig_name);\n+  \n+  fprintf (print.outf, \"#pragma GCC pch_preprocess \\\"%s\\\"\\n\", name);\n+  print.src_line++;\n+}"}, {"sha": "ba59fb3a589a1ae67ed7f65381590f66932c5aec", "filename": "gcc/c-pragma.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0d578e68f92d8add050826588146be0a6fd1ee0/gcc%2Fc-pragma.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0d578e68f92d8add050826588146be0a6fd1ee0/gcc%2Fc-pragma.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pragma.c?ref=c0d578e68f92d8add050826588146be0a6fd1ee0", "patch": "@@ -589,6 +589,8 @@ init_pragma (void)\n   c_register_pragma (0, \"redefine_extname\", handle_pragma_redefine_extname);\n   c_register_pragma (0, \"extern_prefix\", handle_pragma_extern_prefix);\n \n+  c_register_pragma (\"GCC\", \"pch_preprocess\", c_common_pch_pragma);\n+\n #ifdef REGISTER_TARGET_PRAGMAS\n   REGISTER_TARGET_PRAGMAS ();\n #endif"}, {"sha": "8898efdfd3e096d3cec4a91f0292b20e1b3174f0", "filename": "gcc/c.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0d578e68f92d8add050826588146be0a6fd1ee0/gcc%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0d578e68f92d8add050826588146be0a6fd1ee0/gcc%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc.opt?ref=c0d578e68f92d8add050826588146be0a6fd1ee0", "patch": "@@ -599,6 +599,10 @@ Enable optional diagnostics\n fpch-deps\n C ObjC C++ ObjC++\n \n+fpch-preprocess\n+C ObjC C++ ObjC++\n+Look for and use PCH files even when preprocessing\n+\n fpermissive\n C++ ObjC++\n Downgrade conformance errors to warnings"}, {"sha": "1b6307b2215d526db24390b60e3ab930f9ad2a04", "filename": "gcc/doc/cppopts.texi", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0d578e68f92d8add050826588146be0a6fd1ee0/gcc%2Fdoc%2Fcppopts.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0d578e68f92d8add050826588146be0a6fd1ee0/gcc%2Fdoc%2Fcppopts.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcppopts.texi?ref=c0d578e68f92d8add050826588146be0a6fd1ee0", "patch": "@@ -323,6 +323,24 @@ precompiled header would be listed and not the files that were used to\n create it because those files are not consulted when a precompiled\n header is used.\n \n+@item -fpch-preprocess\n+@opindex fpch-preprocess\n+This option allows use of a precompiled header (@pxref{Precompiled\n+Headers}) together with @option{-E}.  It inserts a special @code{#pragma},\n+@code{#pragma GCC pch_preprocess \"<filename>\"} in the output to mark\n+the place where the precompiled header was found, and its filename.  When\n+@code{-fpreprocessed} is in use, GCC recognizes this @code{#pragma} and\n+loads the PCH.\n+\n+This option is off by default, because the resulting preprocessed output\n+is only really suitable as input to GCC.  It is switched on by\n+@option{-save-temps}.\n+\n+You should not write this @code{#pragma} in your own code, but it is\n+safe to edit the filename if the PCH file is available in a different\n+location.  The filename may be absolute or it may be relative to GCC's\n+current directory.\n+\n @end ifclear\n @item -x c\n @itemx -x c++"}, {"sha": "fcfb521812f31a50d5ea795d591f3ae2911e7647", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0d578e68f92d8add050826588146be0a6fd1ee0/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0d578e68f92d8add050826588146be0a6fd1ee0/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=c0d578e68f92d8add050826588146be0a6fd1ee0", "patch": "@@ -11809,7 +11809,7 @@ which options are safe to change and which are not; the safest choice\n is to use exactly the same options when generating and using the\n precompiled header.  The following are known to be safe:\n \n-@gccoptlist{-pedantic-errors}\n+@gccoptlist{-fpreprocessed -pedantic-errors}\n \n @end itemize\n \n@@ -11819,6 +11819,12 @@ find an option combination that doesn't work and doesn't cause the\n precompiled header to be ignored, please consider filing a bug report,\n see @ref{Bugs}.\n \n+If you do use differing options when generating and using the\n+precompiled header, the actual behaviour will be a mixture of the\n+behaviour for the options.  For instance, if you use @option{-g} to\n+generate the precompiled header but not when using it, you may or may\n+not get debugging information for routines in the precompiled header.\n+\n @node Running Protoize\n @section Running Protoize\n "}, {"sha": "677d9e74c37138969c5127fe4e414dafbeb8d7d9", "filename": "gcc/gcc.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0d578e68f92d8add050826588146be0a6fd1ee0/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0d578e68f92d8add050826588146be0a6fd1ee0/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=c0d578e68f92d8add050826588146be0a6fd1ee0", "patch": "@@ -783,7 +783,8 @@ static const char *cpp_unique_options =\n    in turn cause preprocessor symbols to be defined specially.  */\n static const char *cpp_options =\n \"%(cpp_unique_options) %1 %{m*} %{std*} %{ansi} %{W*&pedantic*} %{w} %{f*}\\\n- %{g*:%{!g0:%{!fno-working-directory:-fworking-directory}}} %{O*} %{undef}\";\n+ %{g*:%{!g0:%{!fno-working-directory:-fworking-directory}}} %{O*} %{undef}\\\n+ %{save-temps:-fpch-preprocess}\";\n \n /* This contains cpp options which are not passed when the preprocessor\n    output will be used by another program.  */"}, {"sha": "cbc1a4b8448150a5b9648ff6f3ffeb9de53ab9fc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0d578e68f92d8add050826588146be0a6fd1ee0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0d578e68f92d8add050826588146be0a6fd1ee0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c0d578e68f92d8add050826588146be0a6fd1ee0", "patch": "@@ -1,3 +1,8 @@\n+2004-06-21  Geoffrey Keating  <geoffk@apple.com>\n+\n+\t* gcc.dg/pch/save-temps-1.c: New file.\n+\t* gcc.dg/pch/save-temps-1.hs: New file.\n+\n 2004-06-22  Janne Blomqvist  <jblomqvi@cc.hut.fi>\n \n \t* gfortran.fortran-torture/execute/iolength_1.f90: New test."}, {"sha": "87cedb33d80c695df99b2d20e1445d4e0f63fae2", "filename": "gcc/testsuite/gcc.dg/pch/save-temps-1.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0d578e68f92d8add050826588146be0a6fd1ee0/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fsave-temps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0d578e68f92d8add050826588146be0a6fd1ee0/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fsave-temps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fsave-temps-1.c?ref=c0d578e68f92d8add050826588146be0a6fd1ee0", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-options \"-I. -save-temps\" } */\n+#include \"save-temps-1.h\"\n+#ifndef T\n+#error T not defined\n+#endif\n+#include <stddef.h>\n+int x;"}, {"sha": "2fe5a3ee726d390128cf157efe844e2bbf14a7c4", "filename": "gcc/testsuite/gcc.dg/pch/save-temps-1.hs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0d578e68f92d8add050826588146be0a6fd1ee0/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fsave-temps-1.hs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0d578e68f92d8add050826588146be0a6fd1ee0/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fsave-temps-1.hs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fsave-temps-1.hs?ref=c0d578e68f92d8add050826588146be0a6fd1ee0", "patch": "@@ -0,0 +1,5 @@\n+#define T 123\n+int foo (void) \n+{\n+  return 3;\n+}"}, {"sha": "897d4ac0b268f05672ce0d68c513c45ec5bf80a9", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0d578e68f92d8add050826588146be0a6fd1ee0/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0d578e68f92d8add050826588146be0a6fd1ee0/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=c0d578e68f92d8add050826588146be0a6fd1ee0", "patch": "@@ -1,3 +1,9 @@\n+2004-06-21  Geoffrey Keating  <geoffk@apple.com>\n+\n+\t* files.c (should_stack_file): Correct swapped parameters to call\n+\tto cb.read_pch.\n+\t* pch.c (cpp_valid_state): Handle -fpreprocessed.\n+\n 2004-06-15  Paolo Bonzini  <bonzini@gnu.org>\n \n \t* Makefile.in: Regenerate with automake 1.8.5."}, {"sha": "068065279baa15b1c0ef34f40968da818b0655bb", "filename": "libcpp/files.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0d578e68f92d8add050826588146be0a6fd1ee0/libcpp%2Ffiles.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0d578e68f92d8add050826588146be0a6fd1ee0/libcpp%2Ffiles.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Ffiles.c?ref=c0d578e68f92d8add050826588146be0a6fd1ee0", "patch": "@@ -625,7 +625,7 @@ should_stack_file (cpp_reader *pfile, _cpp_file *file, bool import)\n   /* Handle PCH files immediately; don't stack them.  */\n   if (file->pch)\n     {\n-      pfile->cb.read_pch (pfile, file->path, file->fd, file->pchname);\n+      pfile->cb.read_pch (pfile, file->pchname, file->fd, file->path);\n       close (file->fd);\n       file->fd = -1;\n       return false;"}, {"sha": "a343cd857f01ddff22ed1512bfe8182a0493a051", "filename": "libcpp/pch.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0d578e68f92d8add050826588146be0a6fd1ee0/libcpp%2Fpch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0d578e68f92d8add050826588146be0a6fd1ee0/libcpp%2Fpch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fpch.c?ref=c0d578e68f92d8add050826588146be0a6fd1ee0", "patch": "@@ -438,13 +438,22 @@ cpp_valid_state (cpp_reader *r, const char *name, int fd)\n       if (m.name_length == 0)\n \tbreak;\n \n+      /* If this file is already preprocessed, there won't be any\n+\t macros defined, and that's OK.  */\n+      if (CPP_OPTION (r, preprocessed))\n+\t{\n+\t  if (lseek (fd, m.definition_length, SEEK_CUR) == -1)\n+\t    goto error;\n+\t  continue;\n+\t}\n+\n       if (m.definition_length > namebufsz)\n \t{\n \t  free (namebuf);\n \t  namebufsz = m.definition_length + 256;\n \t  namebuf = xmalloc (namebufsz);\n \t}\n-      \n+\n       if ((size_t)read (fd, namebuf, m.definition_length) \n \t  != m.definition_length)\n \tgoto error;"}]}