{"sha": "0767b03f5e572d1b80604ce01090d9fc0ad406d3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDc2N2IwM2Y1ZTU3MmQxYjgwNjA0Y2UwMTA5MGQ5ZmMwYWQ0MDZkMw==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2008-12-02T22:30:57Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2008-12-02T22:30:57Z"}, "message": "mips.c (mips_expand_builtin): Fix the mode of the error return value.\n\ngcc/\n\t* config/mips/mips.c (mips_expand_builtin): Fix the mode of the\n\terror return value.\n\t* config/mips/mips.md (IMOVE32): New mode iterator.\n\t(movsi): Generalize with IMOVE32.\n\t(*movsi_internal): Likewise.\n\t(*mov<mode>_mips16): Likewise, and its define_splits.\n\t(*lwxs): Likewise.\n\nFrom-SVN: r142375", "tree": {"sha": "e51bf5a52c02090b228c985914765115b76f7aa8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e51bf5a52c02090b228c985914765115b76f7aa8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0767b03f5e572d1b80604ce01090d9fc0ad406d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0767b03f5e572d1b80604ce01090d9fc0ad406d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0767b03f5e572d1b80604ce01090d9fc0ad406d3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0767b03f5e572d1b80604ce01090d9fc0ad406d3/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c1af059c2c372c462d2e66d428207be3b59233f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1af059c2c372c462d2e66d428207be3b59233f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1af059c2c372c462d2e66d428207be3b59233f3"}], "stats": {"total": 75, "additions": 49, "deletions": 26}, "files": [{"sha": "ee967c604f561d970eb9c432dda00f8b3eaabf99", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0767b03f5e572d1b80604ce01090d9fc0ad406d3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0767b03f5e572d1b80604ce01090d9fc0ad406d3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0767b03f5e572d1b80604ce01090d9fc0ad406d3", "patch": "@@ -1,3 +1,13 @@\n+2008-12-02  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* config/mips/mips.c (mips_expand_builtin): Fix the mode of the\n+\terror return value.\n+\t* config/mips/mips.md (IMOVE32): New mode iterator.\n+\t(movsi): Generalize with IMOVE32.\n+\t(*movsi_internal): Likewise.\n+\t(*mov<mode>_mips16): Likewise, and its define_splits.\n+\t(*lwxs): Likewise.\n+\n 2008-12-02  Nathan Sidwell  <nathan@codesourcery.com>\n \t    Maxim Kuvyrkov  <maxim@codesourcery.com>\n "}, {"sha": "b73b022cb7bff8d51e916cdb0ef3d5951af70c8f", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0767b03f5e572d1b80604ce01090d9fc0ad406d3/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0767b03f5e572d1b80604ce01090d9fc0ad406d3/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=0767b03f5e572d1b80604ce01090d9fc0ad406d3", "patch": "@@ -11923,8 +11923,7 @@ mips_expand_builtin_bposge (enum mips_builtin_type builtin_type, rtx target)\n \n static rtx\n mips_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n-\t\t     enum machine_mode mode ATTRIBUTE_UNUSED,\n-\t\t     int ignore ATTRIBUTE_UNUSED)\n+\t\t     enum machine_mode mode, int ignore)\n {\n   tree fndecl;\n   unsigned int fcode, avail;\n@@ -11940,7 +11939,7 @@ mips_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n     {\n       error (\"built-in function %qs not supported for MIPS16\",\n \t     IDENTIFIER_POINTER (DECL_NAME (fndecl)));\n-      return const0_rtx;\n+      return ignore ? const0_rtx : CONST0_RTX (mode);\n     }\n   switch (d->builtin_type)\n     {"}, {"sha": "698d57ca84d93d3c188fd4c5d988582efa39c9db", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 37, "deletions": 23, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0767b03f5e572d1b80604ce01090d9fc0ad406d3/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0767b03f5e572d1b80604ce01090d9fc0ad406d3/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=0767b03f5e572d1b80604ce01090d9fc0ad406d3", "patch": "@@ -644,6 +644,18 @@\n (define_mode_iterator MOVECC [SI (DI \"TARGET_64BIT\")\n                               (CC \"TARGET_HARD_FLOAT && !TARGET_LOONGSON_2EF\")])\n \n+;; 32-bit integer moves for which we provide move patterns.\n+(define_mode_iterator IMOVE32\n+  [SI\n+   (V2HI \"TARGET_DSP\")\n+   (V4QI \"TARGET_DSP\")\n+   (V2HQ \"TARGET_DSP\")\n+   (V2UHQ \"TARGET_DSP\")\n+   (V2HA \"TARGET_DSP\")\n+   (V2UHA \"TARGET_DSP\")\n+   (V4QQ \"TARGET_DSP\")\n+   (V4UQQ \"TARGET_DSP\")])\n+\n ;; 64-bit modes for which we provide move patterns.\n (define_mode_iterator MOVE64\n   [DI DF\n@@ -3936,34 +3948,34 @@\n ;; different predicates, because register spilling and other parts of\n ;; the compiler, have memoized the insn number already.\n \n-(define_expand \"movsi\"\n-  [(set (match_operand:SI 0 \"\")\n-\t(match_operand:SI 1 \"\"))]\n+(define_expand \"mov<mode>\"\n+  [(set (match_operand:IMOVE32 0 \"\")\n+\t(match_operand:IMOVE32 1 \"\"))]\n   \"\"\n {\n-  if (mips_legitimize_move (SImode, operands[0], operands[1]))\n+  if (mips_legitimize_move (<MODE>mode, operands[0], operands[1]))\n     DONE;\n })\n \n ;; The difference between these two is whether or not ints are allowed\n ;; in FP registers (off by default, use -mdebugh to enable).\n \n-(define_insn \"*movsi_internal\"\n-  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=d,d,e,d,m,*f,*f,*d,*m,*d,*z,*a,*d,*B*C*D,*B*C*D,*d,*m\")\n-\t(match_operand:SI 1 \"move_operand\" \"d,U,T,m,dJ,*d*J,*m,*f,*f,*z,*d,*J*d,*a,*d,*m,*B*C*D,*B*C*D\"))]\n+(define_insn \"*mov<mode>_internal\"\n+  [(set (match_operand:IMOVE32 0 \"nonimmediate_operand\" \"=d,d,e,d,m,*f,*f,*d,*m,*d,*z,*a,*d,*B*C*D,*B*C*D,*d,*m\")\n+\t(match_operand:IMOVE32 1 \"move_operand\" \"d,U,T,m,dJ,*d*J,*m,*f,*f,*z,*d,*J*d,*a,*d,*m,*B*C*D,*B*C*D\"))]\n   \"!TARGET_MIPS16\n-   && (register_operand (operands[0], SImode)\n-       || reg_or_0_operand (operands[1], SImode))\"\n+   && (register_operand (operands[0], <MODE>mode)\n+       || reg_or_0_operand (operands[1], <MODE>mode))\"\n   { return mips_output_move (operands[0], operands[1]); }\n   [(set_attr \"move_type\" \"move,const,const,load,store,mtc,fpload,mfc,fpstore,mfc,mtc,mthilo,mfhilo,mtc,fpload,mfc,fpstore\")\n    (set_attr \"mode\" \"SI\")])\n \n-(define_insn \"*movsi_mips16\"\n-  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=d,y,d,d,d,d,d,d,m,*d\")\n-\t(match_operand:SI 1 \"move_operand\" \"d,d,y,K,N,U,kf,m,d,*a\"))]\n+(define_insn \"*mov<mode>_mips16\"\n+  [(set (match_operand:IMOVE32 0 \"nonimmediate_operand\" \"=d,y,d,d,d,d,d,d,m,*d\")\n+\t(match_operand:IMOVE32 1 \"move_operand\" \"d,d,y,K,N,U,kf,m,d,*a\"))]\n   \"TARGET_MIPS16\n-   && (register_operand (operands[0], SImode)\n-       || register_operand (operands[1], SImode))\"\n+   && (register_operand (operands[0], <MODE>mode)\n+       || register_operand (operands[1], <MODE>mode))\"\n   { return mips_output_move (operands[0], operands[1]); }\n   [(set_attr \"move_type\" \"move,move,move,const,constN,const,loadpool,load,store,mfhilo\")\n    (set_attr \"mode\" \"SI\")])\n@@ -3973,9 +3985,9 @@\n ;; load are 2 2 byte instructions.\n \n (define_split\n-  [(set (match_operand:SI 0 \"d_operand\")\n-\t(mem:SI (plus:SI (match_dup 0)\n-\t\t\t (match_operand:SI 1 \"const_int_operand\"))))]\n+  [(set (match_operand:IMOVE32 0 \"d_operand\")\n+\t(mem:IMOVE32 (plus:SI (match_dup 0)\n+\t\t\t      (match_operand:SI 1 \"const_int_operand\"))))]\n   \"TARGET_MIPS16 && reload_completed && !TARGET_DEBUG_D_MODE\n    && ((INTVAL (operands[1]) < 0\n \t&& INTVAL (operands[1]) >= -0x80)\n@@ -3984,8 +3996,8 @@\n        || (INTVAL (operands[1]) >= 0\n \t   && INTVAL (operands[1]) < 32 * 4\n \t   && (INTVAL (operands[1]) & 3) != 0))\"\n-  [(set (match_dup 0) (plus:SI (match_dup 0) (match_dup 1)))\n-   (set (match_dup 0) (mem:SI (plus:SI (match_dup 0) (match_dup 2))))]\n+  [(set (match_dup 3) (plus:SI (match_dup 0) (match_dup 1)))\n+   (set (match_dup 0) (mem:IMOVE32 (plus:SI (match_dup 3) (match_dup 2))))]\n {\n   HOST_WIDE_INT val = INTVAL (operands[1]);\n \n@@ -4005,6 +4017,7 @@\n       operands[1] = GEN_INT (off);\n       operands[2] = GEN_INT (val - off);\n     }\n+  operands[3] = gen_rtx_REG (SImode, REGNO (operands[0]));\n })\n \n ;; On the mips16, we can split a load of certain constants into a load\n@@ -4109,10 +4122,11 @@\n ;; address expression, not shift.\n \n (define_insn \"*lwxs\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n-\t(mem:SI (plus:SI (mult:SI (match_operand:SI 1 \"register_operand\" \"d\")\n-\t\t\t\t  (const_int 4))\n-\t\t\t (match_operand:SI 2 \"register_operand\" \"d\"))))]\n+  [(set (match_operand:IMOVE32 0 \"register_operand\" \"=d\")\n+\t(mem:IMOVE32\n+\t  (plus:SI (mult:SI (match_operand:SI 1 \"register_operand\" \"d\")\n+\t\t\t    (const_int 4))\n+\t\t   (match_operand:SI 2 \"register_operand\" \"d\"))))]\n   \"ISA_HAS_LWXS\"\n   \"lwxs\\t%0,%1(%2)\"\n   [(set_attr \"type\"\t\"load\")"}]}