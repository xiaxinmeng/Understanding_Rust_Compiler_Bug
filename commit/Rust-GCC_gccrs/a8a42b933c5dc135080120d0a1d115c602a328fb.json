{"sha": "a8a42b933c5dc135080120d0a1d115c602a328fb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YThhNDJiOTMzYzVkYzEzNTA4MDEyMGQwYTFkMTE1YzYwMmEzMjhmYg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-06-16T09:52:17Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-06-16T09:52:17Z"}, "message": "[multiple changes]\n\n2016-06-16  Javier Miranda  <miranda@adacore.com>\n\n\t* sem_res.adb (Resolve): Under relaxed RM semantics silently\n\treplace occurrences of null by System.Null_Address.\n\t* sem_ch4.adb (Analyze_One_Call, Operator_Check): Under\n\trelaxed RM semantics silently replace occurrences of null by\n\tSystem.Null_Address.\n\t* sem_util.ad[sb] (Null_To_Null_Address_Convert_OK): New subprogram.\n\t(Replace_Null_By_Null_Address): New subprogram.\n\n2016-06-16  Bob Duff  <duff@adacore.com>\n\n\t* exp_util.adb (Is_Controlled_Function_Call):\n\tThis was missing the case where the call is in prefix format,\n\twith named notation, as in Obj.Func (Formal => Actual).\n\nFrom-SVN: r237508", "tree": {"sha": "4e3a1428b51984b87462326c45d6de2571028f17", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4e3a1428b51984b87462326c45d6de2571028f17"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a8a42b933c5dc135080120d0a1d115c602a328fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8a42b933c5dc135080120d0a1d115c602a328fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8a42b933c5dc135080120d0a1d115c602a328fb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8a42b933c5dc135080120d0a1d115c602a328fb/comments", "author": null, "committer": null, "parents": [{"sha": "fb757f7da43d13603d3d8b821f62076336e412a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb757f7da43d13603d3d8b821f62076336e412a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb757f7da43d13603d3d8b821f62076336e412a9"}], "stats": {"total": 196, "additions": 180, "deletions": 16}, "files": [{"sha": "3f33eeefc81b4e9c7365d548bfcbedf503d17e18", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8a42b933c5dc135080120d0a1d115c602a328fb/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8a42b933c5dc135080120d0a1d115c602a328fb/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=a8a42b933c5dc135080120d0a1d115c602a328fb", "patch": "@@ -1,3 +1,19 @@\n+2016-06-16  Javier Miranda  <miranda@adacore.com>\n+\n+\t* sem_res.adb (Resolve): Under relaxed RM semantics silently\n+\treplace occurrences of null by System.Null_Address.\n+\t* sem_ch4.adb (Analyze_One_Call, Operator_Check): Under\n+\trelaxed RM semantics silently replace occurrences of null by\n+\tSystem.Null_Address.\n+\t* sem_util.ad[sb] (Null_To_Null_Address_Convert_OK): New subprogram.\n+\t(Replace_Null_By_Null_Address): New subprogram.\n+\n+2016-06-16  Bob Duff  <duff@adacore.com>\n+\n+\t* exp_util.adb (Is_Controlled_Function_Call):\n+\tThis was missing the case where the call is in prefix format,\n+\twith named notation, as in Obj.Func (Formal => Actual).\n+\n 2016-06-16  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* exp_attr.adb, inline.adb, sem_attr.adb, sem_elab.adb: Minor"}, {"sha": "6598c0b74bd0a65bd3c4558741a756911d7374cc", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 29, "deletions": 13, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8a42b933c5dc135080120d0a1d115c602a328fb/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8a42b933c5dc135080120d0a1d115c602a328fb/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=a8a42b933c5dc135080120d0a1d115c602a328fb", "patch": "@@ -4720,25 +4720,41 @@ package body Exp_Util is\n          Expr : Node_Id := Original_Node (N);\n \n       begin\n-         if Nkind (Expr) = N_Function_Call then\n-            Expr := Name (Expr);\n-\n          --  When a function call appears in Object.Operation format, the\n-         --  original representation has two possible forms depending on the\n-         --  availability of actual parameters:\n+         --  original representation has three possible forms depending on the\n+         --  availability and form of actual parameters:\n \n-         --    Obj.Func_Call           N_Selected_Component\n-         --    Obj.Func_Call (Param)   N_Indexed_Component\n+         --    Obj.Func                    N_Selected_Component\n+         --    Obj.Func (Actual)           N_Indexed_Component\n+         --    Obj.Func (Formal => Actual) N_Function_Call, whose Name is an\n+         --                                N_Selected_Component\n \n-         else\n-            if Nkind (Expr) = N_Indexed_Component then\n+         case Nkind (Expr) is\n+            when N_Function_Call =>\n+               Expr := Name (Expr);\n+\n+               --  Check for \"Obj.Func (Formal => Actual)\" case\n+\n+               if Nkind (Expr) = N_Selected_Component then\n+                  Expr := Selector_Name (Expr);\n+               end if;\n+\n+            --  \"Obj.Func (Actual)\" case\n+\n+            when N_Indexed_Component =>\n                Expr := Prefix (Expr);\n-            end if;\n \n-            if Nkind (Expr) = N_Selected_Component then\n+               if Nkind (Expr) = N_Selected_Component then\n+                  Expr := Selector_Name (Expr);\n+               end if;\n+\n+            --  \"Obj.Func\" case\n+\n+            when N_Selected_Component =>\n                Expr := Selector_Name (Expr);\n-            end if;\n-         end if;\n+\n+            when others => null;\n+         end case;\n \n          return\n            Nkind_In (Expr, N_Expanded_Name, N_Identifier)"}, {"sha": "66a2acf6ca02b1ede7c3bff262b56766a84e3fe5", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8a42b933c5dc135080120d0a1d115c602a328fb/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8a42b933c5dc135080120d0a1d115c602a328fb/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=a8a42b933c5dc135080120d0a1d115c602a328fb", "patch": "@@ -3397,6 +3397,18 @@ package body Sem_Ch4 is\n                   Next_Actual (Actual);\n                   Next_Formal (Formal);\n \n+               --  Under relaxed RM semantics silently replace occurrences of\n+               --  null by System.Address_Null. We only do this if we know that\n+               --  an error will otherwise be issued.\n+\n+               elsif Null_To_Null_Address_Convert_OK (Actual, Etype (Formal))\n+                 and then (Report and not Is_Indexed and not Is_Indirect)\n+               then\n+                  Replace_Null_By_Null_Address (Actual);\n+                  Analyze_And_Resolve (Actual, Etype (Formal));\n+                  Next_Actual (Actual);\n+                  Next_Formal (Formal);\n+\n                --  For an Ada 2012 predicate or invariant, a call may mention\n                --  an incomplete type, while resolution of the corresponding\n                --  predicate function may see the full view, as a consequence\n@@ -6806,6 +6818,20 @@ package body Sem_Ch4 is\n \n                      return;\n                   end;\n+\n+               --  Under relaxed RM semantics silently replace occurrences of\n+               --  null by System.Address_Null.\n+\n+               elsif Null_To_Null_Address_Convert_OK (N) then\n+                  Replace_Null_By_Null_Address (N);\n+\n+                  if Nkind_In (N, N_Op_Ge, N_Op_Gt, N_Op_Le, N_Op_Lt) then\n+                     Analyze_Comparison_Op (N);\n+                  else\n+                     Analyze_Arithmetic_Op (N);\n+                  end if;\n+\n+                  return;\n                end if;\n \n             --  Comparisons on A'Access are common enough to deserve a\n@@ -6875,6 +6901,14 @@ package body Sem_Ch4 is\n                     Unchecked_Convert_To (Etype (L), Relocate_Node (R)));\n                   Analyze_Equality_Op (N);\n                   return;\n+\n+               --  Under relaxed RM semantics silently replace occurrences of\n+               --  null by System.Address_Null.\n+\n+               elsif Null_To_Null_Address_Convert_OK (N) then\n+                  Replace_Null_By_Null_Address (N);\n+                  Analyze_Equality_Op (N);\n+                  return;\n                end if;\n             end if;\n "}, {"sha": "595d8f954e583f560689d9cfbd6c71f71352598e", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8a42b933c5dc135080120d0a1d115c602a328fb/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8a42b933c5dc135080120d0a1d115c602a328fb/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=a8a42b933c5dc135080120d0a1d115c602a328fb", "patch": "@@ -2684,6 +2684,14 @@ package body Sem_Res is\n                Analyze_And_Resolve (N, Typ);\n                Ghost_Mode := Save_Ghost_Mode;\n                return;\n+\n+            --  Under relaxed RM semantics silently replace occurrences of null\n+            --  by System.Address_Null\n+\n+            elsif Null_To_Null_Address_Convert_OK (N, Typ) then\n+               Replace_Null_By_Null_Address (N);\n+               Analyze_And_Resolve (N, Typ);\n+               return;\n             end if;\n \n             --  That special Allow_Integer_Address check did not appply, so we"}, {"sha": "edcd0c528a1649f810a85e79d5d7915090acfb82", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 80, "deletions": 3, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8a42b933c5dc135080120d0a1d115c602a328fb/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8a42b933c5dc135080120d0a1d115c602a328fb/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=a8a42b933c5dc135080120d0a1d115c602a328fb", "patch": "@@ -10386,6 +10386,48 @@ package body Sem_Util is\n       return Name_Find;\n    end Remove_Suffix;\n \n+   ----------------------------------\n+   -- Replace_Null_By_Null_Address --\n+   ----------------------------------\n+\n+   procedure Replace_Null_By_Null_Address (N : Node_Id) is\n+   begin\n+      pragma Assert (Relaxed_RM_Semantics);\n+      pragma Assert\n+        (Nkind (N) = N_Null\n+          or else Nkind_In (N, N_Op_Eq, N_Op_Ne)\n+          or else Nkind_In (N, N_Op_Lt, N_Op_Le, N_Op_Gt, N_Op_Ge));\n+\n+      if Nkind (N) = N_Null then\n+         Rewrite (N,\n+           New_Occurrence_Of (RTE (RE_Null_Address), Sloc (N)));\n+\n+      else\n+         declare\n+            L : constant Node_Id := Left_Opnd (N);\n+            R : constant Node_Id := Right_Opnd (N);\n+\n+         begin\n+            --  We check the Etype of the complementary operand since the\n+            --  N_Null node is not decorated at this stage.\n+\n+            if Nkind (L) = N_Null\n+              and then Is_Descendant_Of_Address (Etype (R))\n+            then\n+               Rewrite (L,\n+                 New_Occurrence_Of (RTE (RE_Null_Address), Sloc (L)));\n+            end if;\n+\n+            if Nkind (R) = N_Null\n+              and then Is_Descendant_Of_Address (Etype (L))\n+            then\n+               Rewrite (R,\n+                 New_Occurrence_Of (RTE (RE_Null_Address), Sloc (R)));\n+            end if;\n+         end;\n+      end if;\n+   end Replace_Null_By_Null_Address;\n+\n    --------------------------\n    -- Has_Tagged_Component --\n    --------------------------\n@@ -12471,9 +12513,6 @@ package body Sem_Util is\n       if Is_Entity_Name (N) then\n          return Is_Effectively_Volatile (Entity (N));\n \n-      elsif Nkind (N) = N_Expanded_Name then\n-         return Is_Effectively_Volatile (Entity (N));\n-\n       elsif Nkind (N) = N_Indexed_Component then\n          return Is_Effectively_Volatile_Object (Prefix (N));\n \n@@ -17490,6 +17529,44 @@ package body Sem_Util is\n       end loop;\n    end Note_Possible_Modification;\n \n+   --------------------------------------\n+   --  Null_To_Null_Address_Convert_OK --\n+   --------------------------------------\n+\n+   function Null_To_Null_Address_Convert_OK\n+     (N   : Node_Id;\n+      Typ : Entity_Id := Empty) return Boolean is\n+   begin\n+      if not Relaxed_RM_Semantics then\n+         return False;\n+      end if;\n+\n+      if Nkind (N) = N_Null then\n+         return Present (Typ) and then Is_Descendant_Of_Address (Typ);\n+\n+      elsif Nkind_In (N, N_Op_Eq, N_Op_Ne)\n+         or else Nkind_In (N, N_Op_Lt, N_Op_Le, N_Op_Gt, N_Op_Ge)\n+      then\n+         declare\n+            L : constant Node_Id := Left_Opnd (N);\n+            R : constant Node_Id := Right_Opnd (N);\n+\n+         begin\n+            --  We check the Etype of the complementary operand since the\n+            --  N_Null node is not decorated at this stage.\n+\n+            return\n+              ((Nkind (L) = N_Null\n+                 and then Is_Descendant_Of_Address (Etype (R)))\n+              or else\n+               (Nkind (R) = N_Null\n+                 and then Is_Descendant_Of_Address (Etype (L))));\n+         end;\n+      end if;\n+\n+      return False;\n+   end Null_To_Null_Address_Convert_OK;\n+\n    -------------------------\n    -- Object_Access_Level --\n    -------------------------"}, {"sha": "b62fe77d43ce9bf6a4eaae35ca6d24602ad17956", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8a42b933c5dc135080120d0a1d115c602a328fb/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8a42b933c5dc135080120d0a1d115c602a328fb/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=a8a42b933c5dc135080120d0a1d115c602a328fb", "patch": "@@ -1933,6 +1933,14 @@ package Sem_Util is\n    --  (e.g. target of assignment, or out parameter), and to False if the\n    --  modification is only potential (e.g. address of entity taken).\n \n+   function Null_To_Null_Address_Convert_OK\n+     (N   : Node_Id;\n+      Typ : Entity_Id := Empty) return Boolean;\n+   --  Return True if we are compiling in relaxed RM semantics mode and:\n+   --   1) N is a N_Null node and Typ is a decendant of System.Address, or\n+   --   2) N is a comparison operator, one of the operands is null and the\n+   --      type of the other operand is a descendant of System.Address.\n+\n    function Object_Access_Level (Obj : Node_Id) return Uint;\n    --  Return the accessibility level of the view of the object Obj. For\n    --  convenience, qualified expressions applied to object names are also\n@@ -2044,6 +2052,11 @@ package Sem_Util is\n    function Remove_Suffix (E : Entity_Id; Suffix : Character) return Name_Id;\n    --  Returns the name of E without Suffix\n \n+   procedure Replace_Null_By_Null_Address (N : Node_Id);\n+   --  N is N_Null or a binary comparison operator, we are compiling in relaxed\n+   --  RM semantics mode and one of the operands is null. Replace null by\n+   --  System.Null_Address.\n+\n    function Rep_To_Pos_Flag (E : Entity_Id; Loc : Source_Ptr) return Node_Id;\n    --  This is used to construct the second argument in a call to Rep_To_Pos\n    --  which is Standard_True if range checks are enabled (E is an entity to"}]}