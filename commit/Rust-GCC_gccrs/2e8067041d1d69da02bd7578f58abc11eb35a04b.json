{"sha": "2e8067041d1d69da02bd7578f58abc11eb35a04b", "node_id": "C_kwDOANBUbNoAKDJlODA2NzA0MWQxZDY5ZGEwMmJkNzU3OGY1OGFiYzExZWIzNWEwNGI", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-12-10T16:21:50Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-12-11T04:58:13Z"}, "message": "libstdc++: check length in string append [PR103534]\n\nIn the testcase for 103534 we get a warning about append leading to memcpy\nof a very large number of bytes overflowing the buffer.  This turns out to\nbe because we weren't calling _M_check_length for string append.  Rather\nthan do that directly, let's go through the public pointer append that calls\nit.\n\n\tPR c++/103534\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/basic_string.h (append (basic_string)): Call pointer\n\tappend instead of _M_append directly.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/warn/Wstringop-overflow-8.C: New test.", "tree": {"sha": "5b3b28b4f30f602d6f8e96592a560f9803b3e08d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5b3b28b4f30f602d6f8e96592a560f9803b3e08d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2e8067041d1d69da02bd7578f58abc11eb35a04b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e8067041d1d69da02bd7578f58abc11eb35a04b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e8067041d1d69da02bd7578f58abc11eb35a04b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e8067041d1d69da02bd7578f58abc11eb35a04b/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0bceef1671adee52e9cc409d82e5f5590fed8d45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bceef1671adee52e9cc409d82e5f5590fed8d45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0bceef1671adee52e9cc409d82e5f5590fed8d45"}], "stats": {"total": 18, "additions": 14, "deletions": 4}, "files": [{"sha": "d0ef5e73f9374485708e414acb3f8048e6698d6e", "filename": "gcc/testsuite/g++.dg/warn/Wstringop-overflow-8.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e8067041d1d69da02bd7578f58abc11eb35a04b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWstringop-overflow-8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e8067041d1d69da02bd7578f58abc11eb35a04b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWstringop-overflow-8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWstringop-overflow-8.C?ref=2e8067041d1d69da02bd7578f58abc11eb35a04b", "patch": "@@ -0,0 +1,10 @@\n+// PR c++/103534\n+// { dg-additional-options \"-O -Wall\" }\n+\n+#include <string>\n+\n+std::string foo(std::string x)\n+{\n+  // This used to get a bogus -Wstringop-overflow warning.\n+  return std::string(\"1234567890123456\") + x;\n+}"}, {"sha": "3da2f8088acb7b9778e7d7ad0b43349f16598117", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e8067041d1d69da02bd7578f58abc11eb35a04b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e8067041d1d69da02bd7578f58abc11eb35a04b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=2e8067041d1d69da02bd7578f58abc11eb35a04b", "patch": "@@ -1382,7 +1382,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       _GLIBCXX20_CONSTEXPR\n       basic_string&\n       append(const basic_string& __str)\n-      { return _M_append(__str._M_data(), __str.size()); }\n+      { return this->append(__str._M_data(), __str.size()); }\n \n       /**\n        *  @brief  Append a substring.\n@@ -1400,9 +1400,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       _GLIBCXX20_CONSTEXPR\n       basic_string&\n       append(const basic_string& __str, size_type __pos, size_type __n = npos)\n-      { return _M_append(__str._M_data()\n-\t\t\t + __str._M_check(__pos, \"basic_string::append\"),\n-\t\t\t __str._M_limit(__pos, __n)); }\n+      { return this->append(__str._M_data()\n+\t\t\t    + __str._M_check(__pos, \"basic_string::append\"),\n+\t\t\t    __str._M_limit(__pos, __n)); }\n \n       /**\n        *  @brief  Append a C substring."}]}