{"sha": "ee429bdfe0a07195e96d5343bf534fc2e1753613", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWU0MjliZGZlMGEwNzE5NWU5NmQ1MzQzYmY1MzRmYzJlMTc1MzYxMw==", "commit": {"author": {"name": "Marc Glisse", "email": "marc.glisse@inria.fr", "date": "2013-06-28T10:31:39Z"}, "committer": {"name": "Marc Glisse", "email": "glisse@gcc.gnu.org", "date": "2013-06-28T10:31:39Z"}, "message": "re PR c++/57509 (Segmentation fault when using __builtin_shuffle in templated class.)\n\n2013-06-28  Marc Glisse  <marc.glisse@inria.fr>\n\n\tPR c++/57509\n\t* g++.dg/ext/pr57509.C: Pass vectors by reference to avoid warnings.\n\nFrom-SVN: r200511", "tree": {"sha": "b394ca494a062cadce255d15ff7e926e3ea8822b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b394ca494a062cadce255d15ff7e926e3ea8822b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ee429bdfe0a07195e96d5343bf534fc2e1753613", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee429bdfe0a07195e96d5343bf534fc2e1753613", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee429bdfe0a07195e96d5343bf534fc2e1753613", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee429bdfe0a07195e96d5343bf534fc2e1753613/comments", "author": {"login": "mglisse", "id": 10097863, "node_id": "MDQ6VXNlcjEwMDk3ODYz", "avatar_url": "https://avatars.githubusercontent.com/u/10097863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mglisse", "html_url": "https://github.com/mglisse", "followers_url": "https://api.github.com/users/mglisse/followers", "following_url": "https://api.github.com/users/mglisse/following{/other_user}", "gists_url": "https://api.github.com/users/mglisse/gists{/gist_id}", "starred_url": "https://api.github.com/users/mglisse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mglisse/subscriptions", "organizations_url": "https://api.github.com/users/mglisse/orgs", "repos_url": "https://api.github.com/users/mglisse/repos", "events_url": "https://api.github.com/users/mglisse/events{/privacy}", "received_events_url": "https://api.github.com/users/mglisse/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1572e697b780531951456b3c8b39e86f8146146e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1572e697b780531951456b3c8b39e86f8146146e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1572e697b780531951456b3c8b39e86f8146146e"}], "stats": {"total": 9, "additions": 7, "deletions": 2}, "files": [{"sha": "9e7d8577a937d442b2968c6af5e22c0f8ff73756", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee429bdfe0a07195e96d5343bf534fc2e1753613/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee429bdfe0a07195e96d5343bf534fc2e1753613/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ee429bdfe0a07195e96d5343bf534fc2e1753613", "patch": "@@ -1,3 +1,8 @@\n+2013-06-28  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\tPR c++/57509\n+\t* g++.dg/ext/pr57509.C: Pass vectors by reference to avoid warnings.\n+\n 2013-06-28  Kirill Yukhin  <kirill.yukhin@intel.com>\n \n         * gcc.target/i386/bmi-1.c: Extend with new instrinsic."}, {"sha": "92aaadf3387d9d67956474ce906a2921a339f64a", "filename": "gcc/testsuite/g++.dg/ext/pr57509.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee429bdfe0a07195e96d5343bf534fc2e1753613/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fpr57509.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee429bdfe0a07195e96d5343bf534fc2e1753613/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fpr57509.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fpr57509.C?ref=ee429bdfe0a07195e96d5343bf534fc2e1753613", "patch": "@@ -4,8 +4,8 @@\n template <bool> struct enable_if {};\n template <> struct enable_if<true> {typedef void type;};\n template <class T> void f (T& v) { v = __builtin_shuffle (v, v); }\n-template <class T> void g (T) {}\n-template <class T> auto g (T x) -> typename enable_if<sizeof(__builtin_shuffle(x,x))!=2>::type {}\n+template <class T> void g (T const&) {}\n+template <class T> auto g (T const& x) -> typename enable_if<sizeof(__builtin_shuffle(x,x))!=2>::type {}\n typedef int v4i __attribute__((vector_size(4*sizeof(int))));\n typedef float v4f __attribute__((vector_size(4*sizeof(float))));\n int main(){"}]}