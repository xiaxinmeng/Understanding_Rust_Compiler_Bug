{"sha": "378b9abe569d030bbe33f74a55b55519da9bf4bb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzc4YjlhYmU1NjlkMDMwYmJlMzNmNzRhNTViNTU1MTlkYTliZjRiYg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-01-11T23:16:38Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-01-11T23:16:38Z"}, "message": "compiler: pad structs ending with zero-sized field\n    \n    For a struct with zero-sized last field, the address of the\n    field falls out of the object boundary, which confuses the\n    garbage collector. Pad an extra byte in this case.\n    \n    Reviewed-on: https://go-review.googlesource.com/c/157557\n\nFrom-SVN: r267861", "tree": {"sha": "26a52b4f0cb3e0afea37c0d4d34dc606b77009ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/26a52b4f0cb3e0afea37c0d4d34dc606b77009ec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/378b9abe569d030bbe33f74a55b55519da9bf4bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/378b9abe569d030bbe33f74a55b55519da9bf4bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/378b9abe569d030bbe33f74a55b55519da9bf4bb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/378b9abe569d030bbe33f74a55b55519da9bf4bb/comments", "author": null, "committer": null, "parents": [{"sha": "3ddf08b3b8ed5b0b0fe6c930eefb97228ae80caa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ddf08b3b8ed5b0b0fe6c930eefb97228ae80caa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ddf08b3b8ed5b0b0fe6c930eefb97228ae80caa"}], "stats": {"total": 57, "additions": 46, "deletions": 11}, "files": [{"sha": "ab0a2bd4623d558569ccbcbe0e1d9def998c9700", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/378b9abe569d030bbe33f74a55b55519da9bf4bb/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/378b9abe569d030bbe33f74a55b55519da9bf4bb/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=378b9abe569d030bbe33f74a55b55519da9bf4bb", "patch": "@@ -1,4 +1,4 @@\n-960637781ca9546ea2db913e48afd7eccbdadfa9\n+0d64279c01a37b2579c0c62ca4f2c3e3f81de07c\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "ed3863c31a9b4a0670176375eed57fe2d9539c52", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/378b9abe569d030bbe33f74a55b55519da9bf4bb/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/378b9abe569d030bbe33f74a55b55519da9bf4bb/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=378b9abe569d030bbe33f74a55b55519da9bf4bb", "patch": "@@ -13082,6 +13082,12 @@ Struct_construction_expression::do_get_backend(Translate_context* context)\n \t  ++pv;\n \t}\n     }\n+  if (this->type_->struct_type()->has_padding())\n+    {\n+      // Feed an extra value if there is a padding field.\n+      Btype *fbtype = Type::lookup_integer_type(\"uint8\")->get_backend(gogo);\n+      init.push_back(gogo->backend()->zero_expression(fbtype));\n+    }\n   return gogo->backend()->constructor_expression(btype, init, this->location());\n }\n "}, {"sha": "509be44e0288393004497c6a62c0e5a4870f8288", "filename": "gcc/go/gofrontend/types.cc", "status": "modified", "additions": 24, "deletions": 9, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/378b9abe569d030bbe33f74a55b55519da9bf4bb/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/378b9abe569d030bbe33f74a55b55519da9bf4bb/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.cc?ref=378b9abe569d030bbe33f74a55b55519da9bf4bb", "patch": "@@ -24,8 +24,7 @@\n // backend.h.\n \n static void\n-get_backend_struct_fields(Gogo* gogo, const Struct_field_list* fields,\n-\t\t\t  bool use_placeholder,\n+get_backend_struct_fields(Gogo* gogo, Struct_type* type, bool use_placeholder,\n \t\t\t  std::vector<Backend::Btyped_identifier>* bfields);\n \n static void\n@@ -1162,8 +1161,7 @@ Type::get_backend_placeholder(Gogo* gogo)\n       // struct field.\n       {\n \tstd::vector<Backend::Btyped_identifier> bfields;\n-\tget_backend_struct_fields(gogo, this->struct_type()->fields(),\n-\t\t\t\t  true, &bfields);\n+\tget_backend_struct_fields(gogo, this->struct_type(), true, &bfields);\n \tbt = gogo->backend()->struct_type(bfields);\n       }\n       break;\n@@ -6140,12 +6138,14 @@ Struct_type::interface_method_table(Interface_type* interface,\n // backend.h.\n \n static void\n-get_backend_struct_fields(Gogo* gogo, const Struct_field_list* fields,\n-\t\t\t  bool use_placeholder,\n+get_backend_struct_fields(Gogo* gogo, Struct_type* type, bool use_placeholder,\n \t\t\t  std::vector<Backend::Btyped_identifier>* bfields)\n {\n+  const Struct_field_list* fields = type->fields();\n   bfields->resize(fields->size());\n   size_t i = 0;\n+  int64_t lastsize = 0;\n+  bool saw_nonzero = false;\n   for (Struct_field_list::const_iterator p = fields->begin();\n        p != fields->end();\n        ++p, ++i)\n@@ -6155,8 +6155,24 @@ get_backend_struct_fields(Gogo* gogo, const Struct_field_list* fields,\n \t\t\t     ? p->type()->get_backend_placeholder(gogo)\n \t\t\t     : p->type()->get_backend(gogo));\n       (*bfields)[i].location = p->location();\n+      lastsize = gogo->backend()->type_size((*bfields)[i].btype);\n+      if (lastsize != 0)\n+        saw_nonzero = true;\n     }\n   go_assert(i == fields->size());\n+  if (saw_nonzero && lastsize == 0)\n+    {\n+      // For nonzero-sized structs which end in a zero-sized thing, we add\n+      // an extra byte of padding to the type. This padding ensures that\n+      // taking the address of the zero-sized thing can't manufacture a\n+      // pointer to the next object in the heap. See issue 9401.\n+      size_t n = fields->size();\n+      bfields->resize(n + 1);\n+      (*bfields)[n].name = \"_\";\n+      (*bfields)[n].btype = Type::lookup_integer_type(\"uint8\")->get_backend(gogo);\n+      (*bfields)[n].location = (*bfields)[n-1].location;\n+      type->set_has_padding();\n+    }\n }\n \n // Get the backend representation for a struct type.\n@@ -6165,7 +6181,7 @@ Btype*\n Struct_type::do_get_backend(Gogo* gogo)\n {\n   std::vector<Backend::Btyped_identifier> bfields;\n-  get_backend_struct_fields(gogo, this->fields_, false, &bfields);\n+  get_backend_struct_fields(gogo, this, false, &bfields);\n   return gogo->backend()->struct_type(bfields);\n }\n \n@@ -10504,8 +10520,7 @@ Named_type::convert(Gogo* gogo)\n     case TYPE_STRUCT:\n       {\n \tstd::vector<Backend::Btyped_identifier> bfields;\n-\tget_backend_struct_fields(gogo, base->struct_type()->fields(),\n-\t\t\t\t  true, &bfields);\n+\tget_backend_struct_fields(gogo, base->struct_type(), true, &bfields);\n \tif (!gogo->backend()->set_placeholder_struct_type(bt, bfields))\n \t  bt = gogo->backend()->error_type();\n       }"}, {"sha": "9d7994106d843b73f6ed50e3fada98b67386ca55", "filename": "gcc/go/gofrontend/types.h", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/378b9abe569d030bbe33f74a55b55519da9bf4bb/gcc%2Fgo%2Fgofrontend%2Ftypes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/378b9abe569d030bbe33f74a55b55519da9bf4bb/gcc%2Fgo%2Fgofrontend%2Ftypes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.h?ref=378b9abe569d030bbe33f74a55b55519da9bf4bb", "patch": "@@ -2432,7 +2432,7 @@ class Struct_type : public Type\n   Struct_type(Struct_field_list* fields, Location location)\n     : Type(TYPE_STRUCT),\n       fields_(fields), location_(location), all_methods_(NULL),\n-      is_struct_incomparable_(false)\n+      is_struct_incomparable_(false), has_padding_(false)\n   { }\n \n   // Return the field NAME.  This only looks at local fields, not at\n@@ -2552,6 +2552,17 @@ class Struct_type : public Type\n   set_is_struct_incomparable()\n   { this->is_struct_incomparable_ = true; }\n \n+  // Return whether this struct's backend type has padding, due to\n+  // trailing zero-sized field.\n+  bool\n+  has_padding() const\n+  { return this->has_padding_; }\n+\n+  // Record that this struct's backend type has padding.\n+  void\n+  set_has_padding()\n+  { this->has_padding_ = true; }\n+\n   // Write the hash function for this type.\n   void\n   write_hash_function(Gogo*, Named_type*, Function_type*, Function_type*);\n@@ -2656,6 +2667,9 @@ class Struct_type : public Type\n   // True if this is a generated struct that is not considered to be\n   // comparable.\n   bool is_struct_incomparable_;\n+  // True if this struct's backend type has padding, due to trailing\n+  // zero-sized field.\n+  bool has_padding_;\n };\n \n // The type of an array."}]}