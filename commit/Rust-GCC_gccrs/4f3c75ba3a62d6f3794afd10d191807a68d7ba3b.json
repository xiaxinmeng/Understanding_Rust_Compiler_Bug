{"sha": "4f3c75ba3a62d6f3794afd10d191807a68d7ba3b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGYzYzc1YmEzYTYyZDZmMzc5NGFmZDEwZDE5MTgwN2E2OGQ3YmEzYg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2018-07-24T13:03:25Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2018-07-24T13:03:25Z"}, "message": "Reorder conditions in uses-allocator construction helper\n\nThe erased_type condition is only true for code using the Library\nFundamentals TS, so assume it's less common and only check it after\nchecking for convertibility.\n\nThis does mean for types using erased_type the more expensive\nconvertibility check is done first, but such types are rare.\n\n\t* include/bits/uses_allocator.h (__is_erased_or_convertible): Reorder\n\tconditions. Add comments.\n\t* testsuite/20_util/uses_allocator/69293_neg.cc: Adjust dg-error line.\n\t* testsuite/20_util/uses_allocator/cons_neg.cc: Likewise.\n\t* testsuite/20_util/scoped_allocator/69293_neg.cc: Likewise.\n\nFrom-SVN: r262945", "tree": {"sha": "8cab9715292c43bb5134cb78f788dd258ee8db13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8cab9715292c43bb5134cb78f788dd258ee8db13"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4f3c75ba3a62d6f3794afd10d191807a68d7ba3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f3c75ba3a62d6f3794afd10d191807a68d7ba3b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f3c75ba3a62d6f3794afd10d191807a68d7ba3b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f3c75ba3a62d6f3794afd10d191807a68d7ba3b/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a4be380498046d9b0f88d32ff5a3189c913cc75", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a4be380498046d9b0f88d32ff5a3189c913cc75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a4be380498046d9b0f88d32ff5a3189c913cc75"}], "stats": {"total": 22, "additions": 18, "deletions": 4}, "files": [{"sha": "dc8dfdac7fddf1d30bf5208948700d2f7c395fd3", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f3c75ba3a62d6f3794afd10d191807a68d7ba3b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f3c75ba3a62d6f3794afd10d191807a68d7ba3b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=4f3c75ba3a62d6f3794afd10d191807a68d7ba3b", "patch": "@@ -1,5 +1,15 @@\n 2018-07-24  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* include/bits/uses_allocator.h (__is_erased_or_convertible): Reorder\n+\tconditions. Add comments.\n+\t* testsuite/20_util/uses_allocator/69293_neg.cc: Adjust dg-error line.\n+\t* testsuite/20_util/uses_allocator/cons_neg.cc: Likewise.\n+\t* testsuite/20_util/scoped_allocator/69293_neg.cc: Likewise.\n+\n+\t* include/bits/uses_allocator.h (__is_erased_or_convertible): Remove.\n+\t(__uses_allocator_helper): Check conditions directly instead of\n+\tusing __is_erased_or_convertible.\n+\n \t* include/experimental/memory_resource: Adjust comments and\n \twhitespace.\n \t(__resource_adaptor_imp): Add second template parameter for type of"}, {"sha": "3ef2830bebc1b336476665aebc3d89459555b629", "filename": "libstdc++-v3/include/bits/uses_allocator.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f3c75ba3a62d6f3794afd10d191807a68d7ba3b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fuses_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f3c75ba3a62d6f3794afd10d191807a68d7ba3b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fuses_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fuses_allocator.h?ref=4f3c75ba3a62d6f3794afd10d191807a68d7ba3b", "patch": "@@ -36,11 +36,15 @@ namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n+  // This is used for std::experimental::erased_type from Library Fundamentals.\n   struct __erased_type { };\n \n+  // This also supports the \"type-erased allocator\" protocol from the\n+  // Library Fundamentals TS, where allocator_type is erased_type.\n+  // The second condition will always be false for types not using the TS.\n   template<typename _Alloc, typename _Tp>\n     using __is_erased_or_convertible\n-      = __or_<is_same<_Tp, __erased_type>, is_convertible<_Alloc, _Tp>>;\n+      = __or_<is_convertible<_Alloc, _Tp>, is_same<_Tp, __erased_type>>;\n \n   /// [allocator.tag]\n   struct allocator_arg_t { explicit allocator_arg_t() = default; };"}, {"sha": "168079fd5f936fea0a1957d5716cc6e3bab7cda1", "filename": "libstdc++-v3/testsuite/20_util/scoped_allocator/69293_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f3c75ba3a62d6f3794afd10d191807a68d7ba3b/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fscoped_allocator%2F69293_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f3c75ba3a62d6f3794afd10d191807a68d7ba3b/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fscoped_allocator%2F69293_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fscoped_allocator%2F69293_neg.cc?ref=4f3c75ba3a62d6f3794afd10d191807a68d7ba3b", "patch": "@@ -46,5 +46,5 @@ test01()\n   scoped_alloc sa;\n   auto p = sa.allocate(1);\n   sa.construct(p);  // this is required to be ill-formed\n-  // { dg-error \"static assertion failed\" \"\" { target *-*-* } 90 }\n+  // { dg-error \"static assertion failed\" \"\" { target *-*-* } 94 }\n }"}, {"sha": "eaf432491c673cd3ab36529fb9df383b319285a7", "filename": "libstdc++-v3/testsuite/20_util/uses_allocator/69293_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f3c75ba3a62d6f3794afd10d191807a68d7ba3b/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fuses_allocator%2F69293_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f3c75ba3a62d6f3794afd10d191807a68d7ba3b/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fuses_allocator%2F69293_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fuses_allocator%2F69293_neg.cc?ref=4f3c75ba3a62d6f3794afd10d191807a68d7ba3b", "patch": "@@ -44,5 +44,5 @@ test01()\n {\n   alloc_type a;\n   std::tuple<X> t(std::allocator_arg, a); // this is required to be ill-formed\n-  // { dg-error \"static assertion failed\" \"\" { target *-*-* } 90 }\n+  // { dg-error \"static assertion failed\" \"\" { target *-*-* } 94 }\n }"}, {"sha": "bb8c38d1e49ae88a122ee8a7e3b608170aa6a8d2", "filename": "libstdc++-v3/testsuite/20_util/uses_allocator/cons_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f3c75ba3a62d6f3794afd10d191807a68d7ba3b/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fuses_allocator%2Fcons_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f3c75ba3a62d6f3794afd10d191807a68d7ba3b/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fuses_allocator%2Fcons_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fuses_allocator%2Fcons_neg.cc?ref=4f3c75ba3a62d6f3794afd10d191807a68d7ba3b", "patch": "@@ -43,4 +43,4 @@ void test01()\n \n   tuple<Type> t(allocator_arg, a, 1);\n }\n-// { dg-error \"static assertion failed\" \"\" { target *-*-* } 90 }\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 94 }"}]}