{"sha": "47c72733ab0cc1ca5b7bb196298ce9ecd91c1896", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDdjNzI3MzNhYjBjYzFjYTViN2JiMTk2Mjk4Y2U5ZWNkOTFjMTg5Ng==", "commit": {"author": {"name": "Daniel Cederman", "email": "cederman@gaisler.com", "date": "2017-11-29T15:23:40Z"}, "committer": {"name": "Daniel Hellstrom", "email": "danielh@gcc.gnu.org", "date": "2017-11-29T15:23:40Z"}, "message": "[SPARC] Errata workaround for GRLIB-TN-0010\n\nThis patch provides a workaround for the errata described in GRLIB-TN-0010.\n\nIf the workaround is enabled it will:\n\n * Insert a NOP between load instruction and atomic\n   instruction (swap, ldstub, casa).\n\n * Insert a NOP at branch target if load in delay slot\n   and atomic instruction at branch target.\n\nIt is applicable to UT700.\n\n2017-11-29  Daniel Cederman  <cederman@gaisler.com>\n\ngcc/\n\t* config/sparc/sparc.c (atomic_insn_p): New function.\n\t(sparc_do_work_around_errata): Insert NOP instructions to\n\tprevent sequences that could trigger the TN-0010 errata for\n\tUT700.\n\t* config/sparc/sync.md (atomic_compare_and_swap_leon3_1): Make\n\tinstruction referable in atomic_insns_p.\n\nFrom-SVN: r255236", "tree": {"sha": "6d04b95f61c870986f2a7454cab083392e50b7d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6d04b95f61c870986f2a7454cab083392e50b7d0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/47c72733ab0cc1ca5b7bb196298ce9ecd91c1896", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47c72733ab0cc1ca5b7bb196298ce9ecd91c1896", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47c72733ab0cc1ca5b7bb196298ce9ecd91c1896", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47c72733ab0cc1ca5b7bb196298ce9ecd91c1896/comments", "author": {"login": "doac", "id": 2056695, "node_id": "MDQ6VXNlcjIwNTY2OTU=", "avatar_url": "https://avatars.githubusercontent.com/u/2056695?v=4", "gravatar_id": "", "url": "https://api.github.com/users/doac", "html_url": "https://github.com/doac", "followers_url": "https://api.github.com/users/doac/followers", "following_url": "https://api.github.com/users/doac/following{/other_user}", "gists_url": "https://api.github.com/users/doac/gists{/gist_id}", "starred_url": "https://api.github.com/users/doac/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/doac/subscriptions", "organizations_url": "https://api.github.com/users/doac/orgs", "repos_url": "https://api.github.com/users/doac/repos", "events_url": "https://api.github.com/users/doac/events{/privacy}", "received_events_url": "https://api.github.com/users/doac/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "aed173734df52b9c48425840c0977c34c23a882a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aed173734df52b9c48425840c0977c34c23a882a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aed173734df52b9c48425840c0977c34c23a882a"}], "stats": {"total": 54, "additions": 52, "deletions": 2}, "files": [{"sha": "53f4b45e82fc436b46b9908daa0c4d9abf8e77da", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47c72733ab0cc1ca5b7bb196298ce9ecd91c1896/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47c72733ab0cc1ca5b7bb196298ce9ecd91c1896/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=47c72733ab0cc1ca5b7bb196298ce9ecd91c1896", "patch": "@@ -1,3 +1,12 @@\n+2017-11-29  Daniel Cederman  <cederman@gaisler.com>\n+\n+\t* config/sparc/sparc.c (atomic_insn_p): New function.\n+\t(sparc_do_work_around_errata): Insert NOP instructions to\n+\tprevent sequences that could trigger the TN-0010 errata for\n+\tUT700.\n+\t* config/sparc/sync.md (atomic_compare_and_swap_leon3_1): Make\n+\tinstruction referable in atomic_insns_p.\n+\n 2017-11-29  Daniel Cederman  <cederman@gaisler.com>\n \n \t* config/sparc/sync.md (swapsi): 16-byte align if sparc_fix_gr712rc."}, {"sha": "7ba3fbf0c1f73262017977af7e7e0dc8dc55b77e", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 42, "deletions": 1, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47c72733ab0cc1ca5b7bb196298ce9ecd91c1896/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47c72733ab0cc1ca5b7bb196298ce9ecd91c1896/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=47c72733ab0cc1ca5b7bb196298ce9ecd91c1896", "patch": "@@ -970,6 +970,22 @@ fpop_insn_p (rtx_insn *insn)\n     }\n }\n \n+/* True if INSN is an atomic instruction.  */\n+\n+static bool\n+atomic_insn_for_leon3_p (rtx_insn *insn)\n+{\n+  switch (INSN_CODE (insn))\n+    {\n+    case CODE_FOR_swapsi:\n+    case CODE_FOR_ldstub:\n+    case CODE_FOR_atomic_compare_and_swap_leon3_1:\n+      return true;\n+    default:\n+      return false;\n+    }\n+}\n+\n /* We use a machine specific pass to enable workarounds for errata.\n \n    We need to have the (essentially) final form of the insn stream in order\n@@ -1024,6 +1040,31 @@ sparc_do_work_around_errata (void)\n \t    emit_insn_before (gen_nop (), target);\n \t}\n \n+      /* Insert a NOP between load instruction and atomic\n+\t instruction.  Insert a NOP at branch target if load\n+\t in delay slot and atomic instruction at branch target.  */\n+      if (sparc_fix_ut700\n+\t  && NONJUMP_INSN_P (insn)\n+\t  && (set = single_set (insn)) != NULL_RTX\n+\t  && MEM_P (SET_SRC (set))\n+\t  && REG_P (SET_DEST (set)))\n+\t{\n+\t  if (jump)\n+\t    {\n+\t      rtx_insn *target = next_active_insn (JUMP_LABEL_AS_INSN (jump));\n+\t      if (target\n+\t\t  && atomic_insn_for_leon3_p (target))\n+\t\temit_insn_before (gen_nop (), target);\n+\t    }\n+\n+\t  next = next_active_insn (insn);\n+\t  if (!next)\n+\t    break;\n+\n+\t  if (atomic_insn_for_leon3_p (next))\n+\t    insert_nop = true;\n+\t}\n+\n       /* Look for either of these two sequences:\n \n \t Sequence A:\n@@ -1352,7 +1393,7 @@ class pass_work_around_errata : public rtl_opt_pass\n   virtual bool gate (function *)\n     {\n       return sparc_fix_at697f || sparc_fix_ut699 || sparc_fix_b2bst\n-\t  || sparc_fix_gr712rc;\n+\t  || sparc_fix_gr712rc || sparc_fix_ut700;\n     }\n \n   virtual unsigned int execute (function *)"}, {"sha": "43c66e96ba34f13af406947fbaa51f486c747e94", "filename": "gcc/config/sparc/sync.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47c72733ab0cc1ca5b7bb196298ce9ecd91c1896/gcc%2Fconfig%2Fsparc%2Fsync.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47c72733ab0cc1ca5b7bb196298ce9ecd91c1896/gcc%2Fconfig%2Fsparc%2Fsync.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsync.md?ref=47c72733ab0cc1ca5b7bb196298ce9ecd91c1896", "patch": "@@ -212,7 +212,7 @@\n   \"cas<modesuffix>\\t%1, %2, %0\"\n   [(set_attr \"type\" \"multi\")])\n \n-(define_insn \"*atomic_compare_and_swap_leon3_1\"\n+(define_insn \"atomic_compare_and_swap_leon3_1\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(match_operand:SI 1 \"mem_noofs_operand\" \"+w\"))\n    (set (match_dup 1)"}]}