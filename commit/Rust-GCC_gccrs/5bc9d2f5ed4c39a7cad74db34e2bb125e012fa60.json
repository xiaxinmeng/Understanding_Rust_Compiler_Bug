{"sha": "5bc9d2f5ed4c39a7cad74db34e2bb125e012fa60", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWJjOWQyZjVlZDRjMzlhN2NhZDc0ZGIzNGUyYmIxMjVlMDEyZmE2MA==", "commit": {"author": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2020-02-04T09:36:30Z"}, "committer": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2020-02-04T09:37:18Z"}, "message": "coroutines: Prevent repeated error messages for missing promise.\n\nIf the user's coroutine return type omits the mandatory promise\ntype then we will currently restate that error each time we see\na coroutine keyword, which doesn't provide any new information.\nThis suppresses all but the first instance in each coroutine.\n\ngcc/cp/ChangeLog:\n\n2020-02-04  Iain Sandoe  <iain@sandoe.co.uk>\n\n\t* coroutines.cc (find_promise_type): Delete unused forward\n\tdeclaration.\n\t(struct coroutine_info): Add a bool for no promise type error.\n\t(coro_promise_type_found_p): Only emit the error for a missing\n\tpromise once in each affected coroutine.\n\ngcc/testsuite/ChangeLog:\n\n2020-02-04  Iain Sandoe  <iain@sandoe.co.uk>\n\n\t* g++.dg/coroutines/coro-missing-promise.C: New test.", "tree": {"sha": "037d790615997f3e62038b01203bec37b3b772a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/037d790615997f3e62038b01203bec37b3b772a6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5bc9d2f5ed4c39a7cad74db34e2bb125e012fa60", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bc9d2f5ed4c39a7cad74db34e2bb125e012fa60", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5bc9d2f5ed4c39a7cad74db34e2bb125e012fa60", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bc9d2f5ed4c39a7cad74db34e2bb125e012fa60/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f0653a8b75a5ad5a5405a27dd92d3a5759eed4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f0653a8b75a5ad5a5405a27dd92d3a5759eed4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f0653a8b75a5ad5a5405a27dd92d3a5759eed4c"}], "stats": {"total": 39, "additions": 37, "deletions": 2}, "files": [{"sha": "ab63ec7a0fed6ba2def0aa8aa037d7057efe8e7c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bc9d2f5ed4c39a7cad74db34e2bb125e012fa60/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bc9d2f5ed4c39a7cad74db34e2bb125e012fa60/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5bc9d2f5ed4c39a7cad74db34e2bb125e012fa60", "patch": "@@ -1,3 +1,11 @@\n+2020-02-04  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* coroutines.cc (find_promise_type): Delete unused forward\n+\tdeclaration.\n+\t(struct coroutine_info): Add a bool for no promise type error.\n+\t(coro_promise_type_found_p): Only emit the error for a missing\n+\tpromise once in each affected coroutine.\n+\n 2020-02-03  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/66477"}, {"sha": "d5ff6750d2ee38cfcb1f384b7ba089178b8537c0", "filename": "gcc/cp/coroutines.cc", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bc9d2f5ed4c39a7cad74db34e2bb125e012fa60/gcc%2Fcp%2Fcoroutines.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bc9d2f5ed4c39a7cad74db34e2bb125e012fa60/gcc%2Fcp%2Fcoroutines.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcoroutines.cc?ref=5bc9d2f5ed4c39a7cad74db34e2bb125e012fa60", "patch": "@@ -33,7 +33,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gcc-rich-location.h\"\n #include \"hash-map.h\"\n \n-static tree find_promise_type (tree);\n static bool coro_promise_type_found_p (tree, location_t);\n \n /* GCC C++ coroutines implementation.\n@@ -93,6 +92,7 @@ struct GTY((for_user)) coroutine_info\n \t\t\t\t    function into a coroutine.  */\n   /* Flags to avoid repeated errors for per-function issues.  */\n   bool coro_ret_type_error_emitted;\n+  bool coro_promise_error_emitted;\n };\n \n struct coroutine_info_hasher : ggc_ptr_hash<coroutine_info>\n@@ -460,7 +460,10 @@ coro_promise_type_found_p (tree fndecl, location_t loc)\n       /* If we don't find it, punt on the rest.  */\n       if (coro_info->promise_type == NULL_TREE)\n \t{\n-\t  error_at (loc, \"unable to find the promise type for this coroutine\");\n+\t  if (!coro_info->coro_promise_error_emitted)\n+\t    error_at (loc, \"unable to find the promise type for\"\n+\t\t      \" this coroutine\");\n+\t  coro_info->coro_promise_error_emitted = true;\n \t  return false;\n \t}\n "}, {"sha": "8e245303974c43c634ac19b28edb141f19bc74ff", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bc9d2f5ed4c39a7cad74db34e2bb125e012fa60/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bc9d2f5ed4c39a7cad74db34e2bb125e012fa60/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5bc9d2f5ed4c39a7cad74db34e2bb125e012fa60", "patch": "@@ -1,3 +1,7 @@\n+2020-02-04  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* g++.dg/coroutines/coro-missing-promise.C: New test.\n+\n 2020-02-04  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/91123"}, {"sha": "3fc21a4e2caf9d09a8c8707d92392533bec5357a", "filename": "gcc/testsuite/g++.dg/coroutines/coro-missing-promise.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bc9d2f5ed4c39a7cad74db34e2bb125e012fa60/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fcoro-missing-promise.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bc9d2f5ed4c39a7cad74db34e2bb125e012fa60/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fcoro-missing-promise.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fcoro-missing-promise.C?ref=5bc9d2f5ed4c39a7cad74db34e2bb125e012fa60", "patch": "@@ -0,0 +1,20 @@\n+//  { dg-additional-options \"-fsyntax-only -w\" }\n+\n+#include \"coro.h\"\n+\n+// Diagnose completely missing promise.\n+\n+// { dg-error {no type named 'promise_type' in 'struct NoPromiseHere'} \"\" { target *-*-* } 0 }\n+\n+struct NoPromiseHere {\n+  coro::coroutine_handle<> handle;\n+  NoPromiseHere () : handle (nullptr) {}\n+  NoPromiseHere (coro::coroutine_handle<> handle) : handle (handle) {}\n+};\n+\n+NoPromiseHere\n+bar ()\n+{\n+  co_yield 22; // { dg-error {unable to find the promise type for this coroutine} }\n+  co_return 0;\n+}"}]}