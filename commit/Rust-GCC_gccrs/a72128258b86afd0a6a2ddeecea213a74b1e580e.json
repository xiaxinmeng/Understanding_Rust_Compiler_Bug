{"sha": "a72128258b86afd0a6a2ddeecea213a74b1e580e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTcyMTI4MjU4Yjg2YWZkMGE2YTJkZGVlY2VhMjEzYTc0YjFlNTgwZQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-02-15T14:51:10Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-02-15T14:51:10Z"}, "message": "re PR go/89123 (Too many go test failures on s390x-linux)\n\n\tPR go/89123\n    internal/cpu, runtime: add S/390 CPU capability support\n    \n    Patch by Robin Dapp.\n    \n    Updates https://gcc.gnu.org/PR89123\n    \n    Reviewed-on: https://go-review.googlesource.com/c/162887\n\nFrom-SVN: r268941", "tree": {"sha": "967be49c9a9e3899c6ea25a39e6e72391fe6dd7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/967be49c9a9e3899c6ea25a39e6e72391fe6dd7b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a72128258b86afd0a6a2ddeecea213a74b1e580e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a72128258b86afd0a6a2ddeecea213a74b1e580e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a72128258b86afd0a6a2ddeecea213a74b1e580e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a72128258b86afd0a6a2ddeecea213a74b1e580e/comments", "author": null, "committer": null, "parents": [{"sha": "7b54753033a794dfe52c7fb1bc4d7f39b77b872d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b54753033a794dfe52c7fb1bc4d7f39b77b872d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b54753033a794dfe52c7fb1bc4d7f39b77b872d"}], "stats": {"total": 155, "additions": 138, "deletions": 17}, "files": [{"sha": "98325a9e876482f8d7c6ba6596128d3f05484031", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a72128258b86afd0a6a2ddeecea213a74b1e580e/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a72128258b86afd0a6a2ddeecea213a74b1e580e/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=a72128258b86afd0a6a2ddeecea213a74b1e580e", "patch": "@@ -1,4 +1,4 @@\n-6877c95a5f44c3ab4f492d2000ce07771341d7b7\n+0563f2d018cdb2cd685c254bac5ceb38396d0a27\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "6908d348d79f130fb09c69908e836a0615d0b4ad", "filename": "libgo/go/internal/cpu/cpu_gccgo.c", "status": "modified", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a72128258b86afd0a6a2ddeecea213a74b1e580e/libgo%2Fgo%2Finternal%2Fcpu%2Fcpu_gccgo.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a72128258b86afd0a6a2ddeecea213a74b1e580e/libgo%2Fgo%2Finternal%2Fcpu%2Fcpu_gccgo.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Finternal%2Fcpu%2Fcpu_gccgo.c?ref=a72128258b86afd0a6a2ddeecea213a74b1e580e", "patch": "@@ -70,3 +70,118 @@ struct xgetbv_ret xgetbv(void) {\n #pragma GCC pop_options\n \n #endif /* defined(__i386__) || defined(__x86_64__)  */\n+\n+#ifdef __s390__\n+\n+struct facilityList {\n+\tuint64_t bits[4];\n+};\n+\n+struct queryResult {\n+\tuint64_t bits[2];\n+};\n+\n+struct facilityList stfle(void)\n+  __asm__(GOSYM_PREFIX \"internal..z2fcpu.stfle\")\n+  __attribute__((no_split_stack));\n+\n+struct facilityList stfle(void) {\n+    struct facilityList ret;\n+    __asm__ (\"la    %%r1, %[ret]\\t\\n\"\n+\t     \"lghi  %%r0, 3\\t\\n\" // last doubleword index to store\n+\t     \"xc    0(32,%%r1), 0(%%r1)\\t\\n\" // clear 4 doublewords (32 bytes)\n+\t     \".long 0xb2b01000\\t\\n\"  // store facility list extended (STFLE)\n+\t     :[ret] \"=Q\" (ret) : : \"r0\", \"r1\", \"cc\");\n+    return ret;\n+}\n+\n+struct queryResult kmQuery(void)\n+  __asm__(GOSYM_PREFIX \"internal..z2fcpu.kmQuery\")\n+  __attribute__((no_split_stack));\n+\n+struct queryResult kmQuery() {\n+    struct queryResult ret;\n+\n+    __asm__ (\"lghi   %%r0, 0\\t\\n\" // set function code to 0 (KM-Query)\n+\t     \"la     %%r1, %[ret]\\t\\n\"\n+\t     \".long  0xb92e0024\\t\\n\" // cipher message (KM)\n+\t     :[ret] \"=Q\" (ret) : : \"r0\", \"r1\", \"cc\");\n+    return ret;\n+}\n+\n+struct queryResult kmcQuery(void)\n+  __asm__(GOSYM_PREFIX \"internal..z2fcpu.kmcQuery\")\n+  __attribute__((no_split_stack));\n+\n+struct queryResult kmcQuery() {\n+    struct queryResult ret;\n+\n+    __asm__ (\"lghi   %%r0, 0\\t\\n\" // set function code to 0 (KMC-Query)\n+\t     \"la     %%r1, %[ret]\\t\\n\"\n+\t     \".long  0xb92f0024\\t\\n\"  // cipher message with chaining (KMC)\n+\t     :[ret] \"=Q\" (ret) : : \"r0\", \"r1\", \"cc\");\n+\n+    return ret;\n+}\n+\n+struct queryResult kmctrQuery(void)\n+  __asm__(GOSYM_PREFIX \"internal..z2fcpu.kmctrQuery\")\n+  __attribute__((no_split_stack));\n+\n+struct queryResult kmctrQuery() {\n+    struct queryResult ret;\n+\n+    __asm__ (\"lghi   %%r0, 0\\t\\n\" // set function code to 0 (KMCTR-Query)\n+\t     \"la     %%r1, %[ret]\\t\\n\"\n+\t     \".long  0xb92d4024\\t\\n\" // cipher message with counter (KMCTR)\n+\t     :[ret] \"=Q\" (ret) : : \"r0\", \"r1\", \"cc\");\n+\n+    return ret;\n+}\n+\n+struct queryResult kmaQuery(void)\n+  __asm__(GOSYM_PREFIX \"internal..z2fcpu.kmaQuery\")\n+  __attribute__((no_split_stack));\n+\n+struct queryResult kmaQuery() {\n+    struct queryResult ret;\n+\n+    __asm__ (\"lghi   %%r0, 0\\t\\n\" // set function code to 0 (KMA-Query)\n+\t     \"la     %%r1, %[ret]\\t\\n\"\n+\t     \".long  0xb9296024\\t\\n\" // cipher message with authentication (KMA)\n+\t     :[ret] \"=Q\" (ret) : : \"r0\", \"r1\", \"cc\");\n+\n+    return ret;\n+}\n+\n+struct queryResult kimdQuery(void)\n+  __asm__(GOSYM_PREFIX \"internal..z2fcpu.kimdQuery\")\n+  __attribute__((no_split_stack));\n+\n+struct queryResult kimdQuery() {\n+    struct queryResult ret;\n+\n+    __asm__ (\"lghi   %%r0, 0\\t\\n\"  // set function code to 0 (KIMD-Query)\n+\t     \"la     %%r1, %[ret]\\t\\n\"\n+\t     \".long  0xb93e0024\\t\\n\"  // compute intermediate message digest (KIMD)\n+\t     :[ret] \"=Q\" (ret) : : \"r0\", \"r1\", \"cc\");\n+\n+    return ret;\n+}\n+\n+struct queryResult klmdQuery(void)\n+  __asm__(GOSYM_PREFIX \"internal..z2fcpu.klmdQuery\")\n+  __attribute__((no_split_stack));\n+\n+struct queryResult klmdQuery() {\n+    struct queryResult ret;\n+\n+    __asm__ (\"lghi   %%r0, 0\\t\\n\"  // set function code to 0 (KLMD-Query)\n+\t     \"la     %%r1, %[ret]\\t\\n\"\n+\t     \".long  0xb93f0024\\t\\n\"  // compute last message digest (KLMD)\n+\t     :[ret] \"=Q\" (ret) : : \"r0\", \"r1\", \"cc\");\n+\n+    return ret;\n+}\n+\n+#endif /* defined(__s390__)  */"}, {"sha": "22d9aef178a8db7c789cb17f8e128670b1ff2ad0", "filename": "libgo/go/internal/cpu/cpu_s390x.go", "status": "modified", "additions": 7, "deletions": 15, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a72128258b86afd0a6a2ddeecea213a74b1e580e/libgo%2Fgo%2Finternal%2Fcpu%2Fcpu_s390x.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a72128258b86afd0a6a2ddeecea213a74b1e580e/libgo%2Fgo%2Finternal%2Fcpu%2Fcpu_s390x.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Finternal%2Fcpu%2Fcpu_s390x.go?ref=a72128258b86afd0a6a2ddeecea213a74b1e580e", "patch": "@@ -98,13 +98,13 @@ func (s *facilityList) Has(fs ...facility) bool {\n \n // The following feature detection functions are defined in cpu_s390x.s.\n // They are likely to be expensive to call so the results should be cached.\n-func stfle() facilityList     { panic(\"not implemented for gccgo\") }\n-func kmQuery() queryResult    { panic(\"not implemented for gccgo\") }\n-func kmcQuery() queryResult   { panic(\"not implemented for gccgo\") }\n-func kmctrQuery() queryResult { panic(\"not implemented for gccgo\") }\n-func kmaQuery() queryResult   { panic(\"not implemented for gccgo\") }\n-func kimdQuery() queryResult  { panic(\"not implemented for gccgo\") }\n-func klmdQuery() queryResult  { panic(\"not implemented for gccgo\") }\n+func stfle() facilityList\n+func kmQuery() queryResult\n+func kmcQuery() queryResult\n+func kmctrQuery() queryResult\n+func kmaQuery() queryResult\n+func kimdQuery() queryResult\n+func klmdQuery() queryResult\n \n func doinit() {\n \toptions = []option{\n@@ -122,14 +122,6 @@ func doinit() {\n \taes := []function{aes128, aes192, aes256}\n \tfacilities := stfle()\n \n-\tS390X.HasZArch = facilities.Has(zarch)\n-\tS390X.HasSTFLE = facilities.Has(stflef)\n-\tS390X.HasLDisp = facilities.Has(ldisp)\n-\tS390X.HasEImm = facilities.Has(eimm)\n-\tS390X.HasDFP = facilities.Has(dfp)\n-\tS390X.HasETF3Enhanced = facilities.Has(etf3eh)\n-\tS390X.HasMSA = facilities.Has(msa)\n-\n \tif S390X.HasMSA {\n \t\t// cipher message\n \t\tkm, kmc := kmQuery(), kmcQuery()"}, {"sha": "7640273e202d4d3a9e7200dbfd1c08fdd4aa3578", "filename": "libgo/go/runtime/os_linux_s390x.go", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a72128258b86afd0a6a2ddeecea213a74b1e580e/libgo%2Fgo%2Fruntime%2Fos_linux_s390x.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a72128258b86afd0a6a2ddeecea213a74b1e580e/libgo%2Fgo%2Fruntime%2Fos_linux_s390x.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fos_linux_s390x.go?ref=a72128258b86afd0a6a2ddeecea213a74b1e580e", "patch": "@@ -8,12 +8,26 @@ import \"internal/cpu\"\n \n const (\n \t// bit masks taken from bits/hwcap.h\n-\t_HWCAP_S390_VX = 2048 // vector facility\n+\t_HWCAP_S390_ZARCH  = 2\n+\t_HWCAP_S390_STFLE  = 4\n+\t_HWCAP_S390_MSA    = 8\n+\t_HWCAP_S390_LDISP  = 16\n+\t_HWCAP_S390_EIMM   = 32\n+\t_HWCAP_S390_DFP    = 64\n+\t_HWCAP_S390_ETF3EH = 256\n+\t_HWCAP_S390_VX     = 2048 // vector facility\n )\n \n func archauxv(tag, val uintptr) {\n \tswitch tag {\n \tcase _AT_HWCAP: // CPU capability bit flags\n+\t\tcpu.S390X.HasZArch = val&_HWCAP_S390_ZARCH != 0\n+\t\tcpu.S390X.HasSTFLE = val&_HWCAP_S390_STFLE != 0\n+\t\tcpu.S390X.HasMSA = val&_HWCAP_S390_MSA != 0\n+\t\tcpu.S390X.HasLDisp = val&_HWCAP_S390_LDISP != 0\n+\t\tcpu.S390X.HasEImm = val&_HWCAP_S390_EIMM != 0\n+\t\tcpu.S390X.HasDFP = val&_HWCAP_S390_DFP != 0\n+\t\tcpu.S390X.HasETF3Enhanced = val&_HWCAP_S390_ETF3EH != 0\n \t\tcpu.S390X.HasVX = val&_HWCAP_S390_VX != 0\n \t}\n }"}]}