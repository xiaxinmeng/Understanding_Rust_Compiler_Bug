{"sha": "d63992a20ae196be73acc0098a957b6e11dbca53", "node_id": "C_kwDOANBUbNoAKGQ2Mzk5MmEyMGFlMTk2YmU3M2FjYzAwOThhOTU3YjZlMTFkYmNhNTM", "commit": {"author": {"name": "Andrea Corallo", "email": "andrea.corallo@arm.com", "date": "2022-11-16T13:26:06Z"}, "committer": {"name": "Andrea Corallo", "email": "andrea.corallo@arm.com", "date": "2022-11-28T09:09:21Z"}, "message": "arm: improve tests for vhsubq_m*\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/arm/mve/intrinsics/vhsubq_m_n_s16.c: Improve test.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_m_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_m_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_m_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_m_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_m_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_m_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_m_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_x_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_x_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_x_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_x_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_x_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_x_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_x_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_x_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_x_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_x_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_x_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vhsubq_x_u8.c: Likewise.", "tree": {"sha": "93faaf5e7fee7acd66084bf3cb92c87199ff522d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/93faaf5e7fee7acd66084bf3cb92c87199ff522d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d63992a20ae196be73acc0098a957b6e11dbca53", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d63992a20ae196be73acc0098a957b6e11dbca53", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d63992a20ae196be73acc0098a957b6e11dbca53", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d63992a20ae196be73acc0098a957b6e11dbca53/comments", "author": {"login": "AndreaCorallo", "id": 6765576, "node_id": "MDQ6VXNlcjY3NjU1NzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6765576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndreaCorallo", "html_url": "https://github.com/AndreaCorallo", "followers_url": "https://api.github.com/users/AndreaCorallo/followers", "following_url": "https://api.github.com/users/AndreaCorallo/following{/other_user}", "gists_url": "https://api.github.com/users/AndreaCorallo/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndreaCorallo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndreaCorallo/subscriptions", "organizations_url": "https://api.github.com/users/AndreaCorallo/orgs", "repos_url": "https://api.github.com/users/AndreaCorallo/repos", "events_url": "https://api.github.com/users/AndreaCorallo/events{/privacy}", "received_events_url": "https://api.github.com/users/AndreaCorallo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "AndreaCorallo", "id": 6765576, "node_id": "MDQ6VXNlcjY3NjU1NzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6765576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndreaCorallo", "html_url": "https://github.com/AndreaCorallo", "followers_url": "https://api.github.com/users/AndreaCorallo/followers", "following_url": "https://api.github.com/users/AndreaCorallo/following{/other_user}", "gists_url": "https://api.github.com/users/AndreaCorallo/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndreaCorallo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndreaCorallo/subscriptions", "organizations_url": "https://api.github.com/users/AndreaCorallo/orgs", "repos_url": "https://api.github.com/users/AndreaCorallo/repos", "events_url": "https://api.github.com/users/AndreaCorallo/events{/privacy}", "received_events_url": "https://api.github.com/users/AndreaCorallo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b440ef5bc199a2a994aeb748b3a65d0c35cc4ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b440ef5bc199a2a994aeb748b3a65d0c35cc4ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b440ef5bc199a2a994aeb748b3a65d0c35cc4ed"}], "stats": {"total": 942, "additions": 828, "deletions": 114}, "files": [{"sha": "6390589808f5c301e728f9e3dd4e582c99e814bf", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhsubq_m_n_s16.c", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d63992a20ae196be73acc0098a957b6e11dbca53/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_m_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d63992a20ae196be73acc0098a957b6e11dbca53/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_m_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_m_n_s16.c?ref=d63992a20ae196be73acc0098a957b6e11dbca53", "patch": "@@ -1,23 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvhsubt.s16\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n int16x8_t\n foo (int16x8_t inactive, int16x8_t a, int16_t b, mve_pred16_t p)\n {\n   return vhsubq_m_n_s16 (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vhsubt.s16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvhsubt.s16\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n int16x8_t\n foo1 (int16x8_t inactive, int16x8_t a, int16_t b, mve_pred16_t p)\n {\n   return vhsubq_m (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vhsubt.s16\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "db09d0f2c21c3b2f55f76b8d026c3844780fedbd", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhsubq_m_n_s32.c", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d63992a20ae196be73acc0098a957b6e11dbca53/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_m_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d63992a20ae196be73acc0098a957b6e11dbca53/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_m_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_m_n_s32.c?ref=d63992a20ae196be73acc0098a957b6e11dbca53", "patch": "@@ -1,23 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvhsubt.s32\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n int32x4_t\n foo (int32x4_t inactive, int32x4_t a, int32_t b, mve_pred16_t p)\n {\n   return vhsubq_m_n_s32 (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vhsubt.s32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvhsubt.s32\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n int32x4_t\n foo1 (int32x4_t inactive, int32x4_t a, int32_t b, mve_pred16_t p)\n {\n   return vhsubq_m (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vhsubt.s32\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "89ea3f2aaf8f4c13571e652881aef340a9e2f9d2", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhsubq_m_n_s8.c", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d63992a20ae196be73acc0098a957b6e11dbca53/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_m_n_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d63992a20ae196be73acc0098a957b6e11dbca53/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_m_n_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_m_n_s8.c?ref=d63992a20ae196be73acc0098a957b6e11dbca53", "patch": "@@ -1,23 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvhsubt.s8\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n int8x16_t\n foo (int8x16_t inactive, int8x16_t a, int8_t b, mve_pred16_t p)\n {\n   return vhsubq_m_n_s8 (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vhsubt.s8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvhsubt.s8\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n int8x16_t\n foo1 (int8x16_t inactive, int8x16_t a, int8_t b, mve_pred16_t p)\n {\n   return vhsubq_m (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vhsubt.s8\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "e6fb8be673bb087126ae522471f37a3377ef8727", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhsubq_m_n_u16.c", "status": "modified", "additions": 38, "deletions": 4, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d63992a20ae196be73acc0098a957b6e11dbca53/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_m_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d63992a20ae196be73acc0098a957b6e11dbca53/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_m_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_m_n_u16.c?ref=d63992a20ae196be73acc0098a957b6e11dbca53", "patch": "@@ -1,23 +1,57 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvhsubt.u16\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n foo (uint16x8_t inactive, uint16x8_t a, uint16_t b, mve_pred16_t p)\n {\n   return vhsubq_m_n_u16 (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vhsubt.u16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvhsubt.u16\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n foo1 (uint16x8_t inactive, uint16x8_t a, uint16_t b, mve_pred16_t p)\n {\n   return vhsubq_m (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vhsubt.u16\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvhsubt.u16\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n+uint16x8_t\n+foo2 (uint16x8_t inactive, uint16x8_t a, mve_pred16_t p)\n+{\n+  return vhsubq_m (inactive, a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "7ab815d56236a6da1b26586e96545446da3a56a7", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhsubq_m_n_u32.c", "status": "modified", "additions": 38, "deletions": 4, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d63992a20ae196be73acc0098a957b6e11dbca53/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_m_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d63992a20ae196be73acc0098a957b6e11dbca53/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_m_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_m_n_u32.c?ref=d63992a20ae196be73acc0098a957b6e11dbca53", "patch": "@@ -1,23 +1,57 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvhsubt.u32\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n foo (uint32x4_t inactive, uint32x4_t a, uint32_t b, mve_pred16_t p)\n {\n   return vhsubq_m_n_u32 (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vhsubt.u32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvhsubt.u32\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n foo1 (uint32x4_t inactive, uint32x4_t a, uint32_t b, mve_pred16_t p)\n {\n   return vhsubq_m (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vhsubt.u32\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvhsubt.u32\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n+uint32x4_t\n+foo2 (uint32x4_t inactive, uint32x4_t a, mve_pred16_t p)\n+{\n+  return vhsubq_m (inactive, a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "0bf695aded44a8606d1c7103adfbc85aba490706", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhsubq_m_n_u8.c", "status": "modified", "additions": 38, "deletions": 4, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d63992a20ae196be73acc0098a957b6e11dbca53/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_m_n_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d63992a20ae196be73acc0098a957b6e11dbca53/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_m_n_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_m_n_u8.c?ref=d63992a20ae196be73acc0098a957b6e11dbca53", "patch": "@@ -1,23 +1,57 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvhsubt.u8\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n foo (uint8x16_t inactive, uint8x16_t a, uint8_t b, mve_pred16_t p)\n {\n   return vhsubq_m_n_u8 (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vhsubt.u8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvhsubt.u8\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n foo1 (uint8x16_t inactive, uint8x16_t a, uint8_t b, mve_pred16_t p)\n {\n   return vhsubq_m (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vhsubt.u8\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvhsubt.u8\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n+uint8x16_t\n+foo2 (uint8x16_t inactive, uint8x16_t a, mve_pred16_t p)\n+{\n+  return vhsubq_m (inactive, a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "3bad177ad28ba22141d3a1625cbfd471e7b2662c", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhsubq_m_s16.c", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d63992a20ae196be73acc0098a957b6e11dbca53/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_m_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d63992a20ae196be73acc0098a957b6e11dbca53/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_m_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_m_s16.c?ref=d63992a20ae196be73acc0098a957b6e11dbca53", "patch": "@@ -1,23 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvhsubt.s16\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int16x8_t\n foo (int16x8_t inactive, int16x8_t a, int16x8_t b, mve_pred16_t p)\n {\n   return vhsubq_m_s16 (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vhsubt.s16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvhsubt.s16\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int16x8_t\n foo1 (int16x8_t inactive, int16x8_t a, int16x8_t b, mve_pred16_t p)\n {\n   return vhsubq_m (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vhsubt.s16\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "cc5cdb0705956fe685bf0d20186162dcf9f1cab6", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhsubq_m_s32.c", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d63992a20ae196be73acc0098a957b6e11dbca53/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_m_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d63992a20ae196be73acc0098a957b6e11dbca53/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_m_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_m_s32.c?ref=d63992a20ae196be73acc0098a957b6e11dbca53", "patch": "@@ -1,23 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvhsubt.s32\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int32x4_t\n foo (int32x4_t inactive, int32x4_t a, int32x4_t b, mve_pred16_t p)\n {\n   return vhsubq_m_s32 (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vhsubt.s32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvhsubt.s32\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int32x4_t\n foo1 (int32x4_t inactive, int32x4_t a, int32x4_t b, mve_pred16_t p)\n {\n   return vhsubq_m (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vhsubt.s32\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "4c651091e59151d41e34b408483871c633095e20", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhsubq_m_s8.c", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d63992a20ae196be73acc0098a957b6e11dbca53/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_m_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d63992a20ae196be73acc0098a957b6e11dbca53/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_m_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_m_s8.c?ref=d63992a20ae196be73acc0098a957b6e11dbca53", "patch": "@@ -1,23 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvhsubt.s8\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int8x16_t\n foo (int8x16_t inactive, int8x16_t a, int8x16_t b, mve_pred16_t p)\n {\n   return vhsubq_m_s8 (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vhsubt.s8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvhsubt.s8\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int8x16_t\n foo1 (int8x16_t inactive, int8x16_t a, int8x16_t b, mve_pred16_t p)\n {\n   return vhsubq_m (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vhsubt.s8\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "daed202c055c6ce0e7973ef99c93ea748b30b4a1", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhsubq_m_u16.c", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d63992a20ae196be73acc0098a957b6e11dbca53/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_m_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d63992a20ae196be73acc0098a957b6e11dbca53/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_m_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_m_u16.c?ref=d63992a20ae196be73acc0098a957b6e11dbca53", "patch": "@@ -1,23 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvhsubt.u16\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n foo (uint16x8_t inactive, uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n {\n   return vhsubq_m_u16 (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vhsubt.u16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvhsubt.u16\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n foo1 (uint16x8_t inactive, uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n {\n   return vhsubq_m (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vhsubt.u16\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "cf71e6dab13e2c0ed011aeb6a0364186e33f9126", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhsubq_m_u32.c", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d63992a20ae196be73acc0098a957b6e11dbca53/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_m_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d63992a20ae196be73acc0098a957b6e11dbca53/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_m_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_m_u32.c?ref=d63992a20ae196be73acc0098a957b6e11dbca53", "patch": "@@ -1,23 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvhsubt.u32\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n foo (uint32x4_t inactive, uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n {\n   return vhsubq_m_u32 (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vhsubt.u32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvhsubt.u32\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n foo1 (uint32x4_t inactive, uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n {\n   return vhsubq_m (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vhsubt.u32\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "a8183dd48ed1df95dbcb18cb3379d018e292af3c", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhsubq_m_u8.c", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d63992a20ae196be73acc0098a957b6e11dbca53/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_m_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d63992a20ae196be73acc0098a957b6e11dbca53/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_m_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_m_u8.c?ref=d63992a20ae196be73acc0098a957b6e11dbca53", "patch": "@@ -1,23 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvhsubt.u8\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n foo (uint8x16_t inactive, uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n {\n   return vhsubq_m_u8 (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vhsubt.u8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvhsubt.u8\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n foo1 (uint8x16_t inactive, uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n {\n   return vhsubq_m (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vhsubt.u8\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "af4f534d7ffb57ba859a9faaf27df228ffe55554", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhsubq_n_s16.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d63992a20ae196be73acc0098a957b6e11dbca53/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d63992a20ae196be73acc0098a957b6e11dbca53/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_n_s16.c?ref=d63992a20ae196be73acc0098a957b6e11dbca53", "patch": "@@ -1,21 +1,33 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvhsub.s16\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n int16x8_t\n foo (int16x8_t a, int16_t b)\n {\n   return vhsubq_n_s16 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vhsub.s16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvhsub.s16\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n int16x8_t\n foo1 (int16x8_t a, int16_t b)\n {\n   return vhsubq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vhsub.s16\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "941d38074a40db8358b3c0705a7df6bf47cec034", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhsubq_n_s32.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d63992a20ae196be73acc0098a957b6e11dbca53/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d63992a20ae196be73acc0098a957b6e11dbca53/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_n_s32.c?ref=d63992a20ae196be73acc0098a957b6e11dbca53", "patch": "@@ -1,21 +1,33 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvhsub.s32\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n int32x4_t\n foo (int32x4_t a, int32_t b)\n {\n   return vhsubq_n_s32 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vhsub.s32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvhsub.s32\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n int32x4_t\n foo1 (int32x4_t a, int32_t b)\n {\n   return vhsubq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vhsub.s32\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "9ceb4ef3c6f41916c7cac3841565cd64da550dbd", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhsubq_n_s8.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d63992a20ae196be73acc0098a957b6e11dbca53/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_n_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d63992a20ae196be73acc0098a957b6e11dbca53/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_n_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_n_s8.c?ref=d63992a20ae196be73acc0098a957b6e11dbca53", "patch": "@@ -1,21 +1,33 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvhsub.s8\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n int8x16_t\n foo (int8x16_t a, int8_t b)\n {\n   return vhsubq_n_s8 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vhsub.s8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvhsub.s8\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n int8x16_t\n foo1 (int8x16_t a, int8_t b)\n {\n   return vhsubq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vhsub.s8\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "037ed2c637d5059e034cea9a8e383363c08e3b2e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhsubq_n_u16.c", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d63992a20ae196be73acc0098a957b6e11dbca53/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d63992a20ae196be73acc0098a957b6e11dbca53/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_n_u16.c?ref=d63992a20ae196be73acc0098a957b6e11dbca53", "patch": "@@ -1,21 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvhsub.u16\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n foo (uint16x8_t a, uint16_t b)\n {\n   return vhsubq_n_u16 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vhsub.u16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvhsub.u16\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n foo1 (uint16x8_t a, uint16_t b)\n {\n   return vhsubq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vhsub.u16\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvhsub.u16\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n+uint16x8_t\n+foo2 (uint16x8_t a)\n+{\n+  return vhsubq (a, 1);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "f51eb10ecbfcf54f2db44e0174f281117bc28189", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhsubq_n_u32.c", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d63992a20ae196be73acc0098a957b6e11dbca53/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d63992a20ae196be73acc0098a957b6e11dbca53/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_n_u32.c?ref=d63992a20ae196be73acc0098a957b6e11dbca53", "patch": "@@ -1,21 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvhsub.u32\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n foo (uint32x4_t a, uint32_t b)\n {\n   return vhsubq_n_u32 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vhsub.u32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvhsub.u32\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n foo1 (uint32x4_t a, uint32_t b)\n {\n   return vhsubq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vhsub.u32\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvhsub.u32\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n+uint32x4_t\n+foo2 (uint32x4_t a)\n+{\n+  return vhsubq (a, 1);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "24dd45db15205eaa072efcdc943fc42b526b624b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhsubq_n_u8.c", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d63992a20ae196be73acc0098a957b6e11dbca53/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_n_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d63992a20ae196be73acc0098a957b6e11dbca53/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_n_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_n_u8.c?ref=d63992a20ae196be73acc0098a957b6e11dbca53", "patch": "@@ -1,21 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvhsub.u8\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n foo (uint8x16_t a, uint8_t b)\n {\n   return vhsubq_n_u8 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vhsub.u8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvhsub.u8\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n foo1 (uint8x16_t a, uint8_t b)\n {\n   return vhsubq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vhsub.u8\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvhsub.u8\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n+uint8x16_t\n+foo2 (uint8x16_t a)\n+{\n+  return vhsubq (a, 1);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "0f275d487530a124d5e7630c4316ed7a4ff31491", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhsubq_s16.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d63992a20ae196be73acc0098a957b6e11dbca53/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d63992a20ae196be73acc0098a957b6e11dbca53/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_s16.c?ref=d63992a20ae196be73acc0098a957b6e11dbca53", "patch": "@@ -1,21 +1,33 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvhsub.s16\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int16x8_t\n foo (int16x8_t a, int16x8_t b)\n {\n   return vhsubq_s16 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vhsub.s16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvhsub.s16\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int16x8_t\n foo1 (int16x8_t a, int16x8_t b)\n {\n   return vhsubq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vhsub.s16\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "21aeb9d2a59671a7c92a35ad1a4061da6d936be4", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhsubq_s32.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d63992a20ae196be73acc0098a957b6e11dbca53/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d63992a20ae196be73acc0098a957b6e11dbca53/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_s32.c?ref=d63992a20ae196be73acc0098a957b6e11dbca53", "patch": "@@ -1,21 +1,33 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvhsub.s32\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int32x4_t\n foo (int32x4_t a, int32x4_t b)\n {\n   return vhsubq_s32 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vhsub.s32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvhsub.s32\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int32x4_t\n foo1 (int32x4_t a, int32x4_t b)\n {\n   return vhsubq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vhsub.s32\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "b3ee94341b503fd924178bcc4a1d0b092e7ea9bd", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhsubq_s8.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d63992a20ae196be73acc0098a957b6e11dbca53/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d63992a20ae196be73acc0098a957b6e11dbca53/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_s8.c?ref=d63992a20ae196be73acc0098a957b6e11dbca53", "patch": "@@ -1,21 +1,33 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvhsub.s8\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int8x16_t\n foo (int8x16_t a, int8x16_t b)\n {\n   return vhsubq_s8 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vhsub.s8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvhsub.s8\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int8x16_t\n foo1 (int8x16_t a, int8x16_t b)\n {\n   return vhsubq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vhsub.s8\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "690ef2de5ba9941d5a1b2513a799d4cab7809faf", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhsubq_u16.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d63992a20ae196be73acc0098a957b6e11dbca53/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d63992a20ae196be73acc0098a957b6e11dbca53/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_u16.c?ref=d63992a20ae196be73acc0098a957b6e11dbca53", "patch": "@@ -1,21 +1,33 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvhsub.u16\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n foo (uint16x8_t a, uint16x8_t b)\n {\n   return vhsubq_u16 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vhsub.u16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvhsub.u16\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n foo1 (uint16x8_t a, uint16x8_t b)\n {\n   return vhsubq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vhsub.u16\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "cfe12573fa08c148ba2f9f59b0fc6b2ef2ceb01d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhsubq_u32.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d63992a20ae196be73acc0098a957b6e11dbca53/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d63992a20ae196be73acc0098a957b6e11dbca53/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_u32.c?ref=d63992a20ae196be73acc0098a957b6e11dbca53", "patch": "@@ -1,21 +1,33 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvhsub.u32\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n foo (uint32x4_t a, uint32x4_t b)\n {\n   return vhsubq_u32 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vhsub.u32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvhsub.u32\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n foo1 (uint32x4_t a, uint32x4_t b)\n {\n   return vhsubq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vhsub.u32\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "1926bc34219e97c55e0633f4d7866bc78196f26c", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhsubq_u8.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d63992a20ae196be73acc0098a957b6e11dbca53/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d63992a20ae196be73acc0098a957b6e11dbca53/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_u8.c?ref=d63992a20ae196be73acc0098a957b6e11dbca53", "patch": "@@ -1,21 +1,33 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvhsub.u8\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n foo (uint8x16_t a, uint8x16_t b)\n {\n   return vhsubq_u8 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vhsub.u8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvhsub.u8\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n foo1 (uint8x16_t a, uint8x16_t b)\n {\n   return vhsubq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vhsub.u8\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "fcda4c541a605439ba4a277e837d86e4f45e8dfd", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhsubq_x_n_s16.c", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d63992a20ae196be73acc0098a957b6e11dbca53/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_x_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d63992a20ae196be73acc0098a957b6e11dbca53/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_x_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_x_n_s16.c?ref=d63992a20ae196be73acc0098a957b6e11dbca53", "patch": "@@ -1,23 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvhsubt.s16\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n int16x8_t\n foo (int16x8_t a, int16_t b, mve_pred16_t p)\n {\n   return vhsubq_x_n_s16 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vhsubt.s16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvhsubt.s16\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n int16x8_t\n foo1 (int16x8_t a, int16_t b, mve_pred16_t p)\n {\n   return vhsubq_x (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vhsubt.s16\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "55637221f21223c113f4cf7cd27da0a3e4c7d66a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhsubq_x_n_s32.c", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d63992a20ae196be73acc0098a957b6e11dbca53/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_x_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d63992a20ae196be73acc0098a957b6e11dbca53/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_x_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_x_n_s32.c?ref=d63992a20ae196be73acc0098a957b6e11dbca53", "patch": "@@ -1,23 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvhsubt.s32\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n int32x4_t\n foo (int32x4_t a, int32_t b, mve_pred16_t p)\n {\n   return vhsubq_x_n_s32 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vhsubt.s32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvhsubt.s32\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n int32x4_t\n foo1 (int32x4_t a, int32_t b, mve_pred16_t p)\n {\n   return vhsubq_x (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vhsubt.s32\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "ecfe188f3fa3b5f657462cbd49864aae4d258591", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhsubq_x_n_s8.c", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d63992a20ae196be73acc0098a957b6e11dbca53/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_x_n_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d63992a20ae196be73acc0098a957b6e11dbca53/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_x_n_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_x_n_s8.c?ref=d63992a20ae196be73acc0098a957b6e11dbca53", "patch": "@@ -1,23 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvhsubt.s8\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n int8x16_t\n foo (int8x16_t a, int8_t b, mve_pred16_t p)\n {\n   return vhsubq_x_n_s8 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vhsubt.s8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvhsubt.s8\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n int8x16_t\n foo1 (int8x16_t a, int8_t b, mve_pred16_t p)\n {\n   return vhsubq_x (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vhsubt.s8\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "bf3d6c38b858476e1858be5152411bf48e687b0c", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhsubq_x_n_u16.c", "status": "modified", "additions": 38, "deletions": 4, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d63992a20ae196be73acc0098a957b6e11dbca53/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_x_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d63992a20ae196be73acc0098a957b6e11dbca53/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_x_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_x_n_u16.c?ref=d63992a20ae196be73acc0098a957b6e11dbca53", "patch": "@@ -1,23 +1,57 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvhsubt.u16\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n foo (uint16x8_t a, uint16_t b, mve_pred16_t p)\n {\n   return vhsubq_x_n_u16 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vhsubt.u16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvhsubt.u16\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n foo1 (uint16x8_t a, uint16_t b, mve_pred16_t p)\n {\n   return vhsubq_x (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vhsubt.u16\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvhsubt.u16\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n+uint16x8_t\n+foo2 (uint16x8_t a, mve_pred16_t p)\n+{\n+  return vhsubq_x (a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "4ae75b09950bb3c0d163df05c1c639846f7d4e60", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhsubq_x_n_u32.c", "status": "modified", "additions": 38, "deletions": 4, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d63992a20ae196be73acc0098a957b6e11dbca53/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_x_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d63992a20ae196be73acc0098a957b6e11dbca53/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_x_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_x_n_u32.c?ref=d63992a20ae196be73acc0098a957b6e11dbca53", "patch": "@@ -1,23 +1,57 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvhsubt.u32\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n foo (uint32x4_t a, uint32_t b, mve_pred16_t p)\n {\n   return vhsubq_x_n_u32 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vhsubt.u32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvhsubt.u32\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n foo1 (uint32x4_t a, uint32_t b, mve_pred16_t p)\n {\n   return vhsubq_x (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vhsubt.u32\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvhsubt.u32\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n+uint32x4_t\n+foo2 (uint32x4_t a, mve_pred16_t p)\n+{\n+  return vhsubq_x (a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "edfa4216a314681ece5bb4faa680914c17f4238c", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhsubq_x_n_u8.c", "status": "modified", "additions": 38, "deletions": 4, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d63992a20ae196be73acc0098a957b6e11dbca53/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_x_n_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d63992a20ae196be73acc0098a957b6e11dbca53/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_x_n_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_x_n_u8.c?ref=d63992a20ae196be73acc0098a957b6e11dbca53", "patch": "@@ -1,23 +1,57 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvhsubt.u8\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n foo (uint8x16_t a, uint8_t b, mve_pred16_t p)\n {\n   return vhsubq_x_n_u8 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vhsubt.u8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvhsubt.u8\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n foo1 (uint8x16_t a, uint8_t b, mve_pred16_t p)\n {\n   return vhsubq_x (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vhsubt.u8\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvhsubt.u8\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n+uint8x16_t\n+foo2 (uint8x16_t a, mve_pred16_t p)\n+{\n+  return vhsubq_x (a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "bd2771b09789f0ede256b81a95a2f1c16d7c5a7d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhsubq_x_s16.c", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d63992a20ae196be73acc0098a957b6e11dbca53/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_x_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d63992a20ae196be73acc0098a957b6e11dbca53/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_x_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_x_s16.c?ref=d63992a20ae196be73acc0098a957b6e11dbca53", "patch": "@@ -1,22 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvhsubt.s16\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int16x8_t\n foo (int16x8_t a, int16x8_t b, mve_pred16_t p)\n {\n   return vhsubq_x_s16 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vhsubt.s16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvhsubt.s16\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int16x8_t\n foo1 (int16x8_t a, int16x8_t b, mve_pred16_t p)\n {\n   return vhsubq_x (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "0ea40df3d9e9ce22119a416d1268f761555ca957", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhsubq_x_s32.c", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d63992a20ae196be73acc0098a957b6e11dbca53/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_x_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d63992a20ae196be73acc0098a957b6e11dbca53/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_x_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_x_s32.c?ref=d63992a20ae196be73acc0098a957b6e11dbca53", "patch": "@@ -1,22 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvhsubt.s32\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int32x4_t\n foo (int32x4_t a, int32x4_t b, mve_pred16_t p)\n {\n   return vhsubq_x_s32 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vhsubt.s32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvhsubt.s32\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int32x4_t\n foo1 (int32x4_t a, int32x4_t b, mve_pred16_t p)\n {\n   return vhsubq_x (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "90ee94defb0b6c9ac45a19a6e45afbd37b62ab6a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhsubq_x_s8.c", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d63992a20ae196be73acc0098a957b6e11dbca53/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_x_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d63992a20ae196be73acc0098a957b6e11dbca53/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_x_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_x_s8.c?ref=d63992a20ae196be73acc0098a957b6e11dbca53", "patch": "@@ -1,22 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvhsubt.s8\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int8x16_t\n foo (int8x16_t a, int8x16_t b, mve_pred16_t p)\n {\n   return vhsubq_x_s8 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vhsubt.s8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvhsubt.s8\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int8x16_t\n foo1 (int8x16_t a, int8x16_t b, mve_pred16_t p)\n {\n   return vhsubq_x (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "d700741169a38a4b452079479e133046bed1114f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhsubq_x_u16.c", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d63992a20ae196be73acc0098a957b6e11dbca53/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_x_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d63992a20ae196be73acc0098a957b6e11dbca53/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_x_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_x_u16.c?ref=d63992a20ae196be73acc0098a957b6e11dbca53", "patch": "@@ -1,22 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvhsubt.u16\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n foo (uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n {\n   return vhsubq_x_u16 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vhsubt.u16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvhsubt.u16\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n foo1 (uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n {\n   return vhsubq_x (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "f43c96268295cb452b6ac618b4e737ea2ee3f050", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhsubq_x_u32.c", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d63992a20ae196be73acc0098a957b6e11dbca53/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_x_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d63992a20ae196be73acc0098a957b6e11dbca53/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_x_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_x_u32.c?ref=d63992a20ae196be73acc0098a957b6e11dbca53", "patch": "@@ -1,22 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvhsubt.u32\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n foo (uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n {\n   return vhsubq_x_u32 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vhsubt.u32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvhsubt.u32\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n foo1 (uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n {\n   return vhsubq_x (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "a0908ba786b59fe14aee99827a8877df2ac08178", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vhsubq_x_u8.c", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d63992a20ae196be73acc0098a957b6e11dbca53/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_x_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d63992a20ae196be73acc0098a957b6e11dbca53/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_x_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvhsubq_x_u8.c?ref=d63992a20ae196be73acc0098a957b6e11dbca53", "patch": "@@ -1,22 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvhsubt.u8\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n foo (uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n {\n   return vhsubq_x_u8 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vhsubt.u8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvhsubt.u8\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n foo1 (uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n {\n   return vhsubq_x (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}]}