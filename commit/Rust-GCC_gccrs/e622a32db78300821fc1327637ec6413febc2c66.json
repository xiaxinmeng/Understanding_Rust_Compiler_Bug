{"sha": "e622a32db78300821fc1327637ec6413febc2c66", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTYyMmEzMmRiNzgzMDA4MjFmYzEzMjc2MzdlYzY0MTNmZWJjMmM2Ng==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2019-10-15T07:28:26Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2019-10-15T07:28:26Z"}, "message": "re PR middle-end/92046 (Command line options (that are per-functions) are affecting --params which are global.)\n\n2019-10-15  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/92046\n\t* common.opt (fallow-store-data-races): New.\n\t* params.def (PARAM_ALLOW_STORE_DATA_RACES): Remove.\n\t* params.h (ALLOW_STORE_DATA_RACES): Likewise.\n\t* doc/invoke.texi (fallow-store-data-races): Document.\n\t(--param allow-store-data-races): Remove docs.\n\t* opts.c (default_options_table): Enable -fallow-store-data-races\n\tat -Ofast.\n\t(default_options_optimization): Do not enable --param\n\tallow-store-data-races at -Ofast.\n\t* tree-if-conv.c (ifcvt_memrefs_wont_trap): Use flag_store_data_races\n\tinstead of PARAM_ALLOW_STORE_DATA_RACES.\n\t* tree-ssa-loop-im.c (execute_sm): Likewise.\n\n\t* c-c++-common/cxxbitfields-3.c: Adjust.\n\t* c-c++-common/cxxbitfields-6.c: Likewise.\n\t* c-c++-common/simulate-thread/bitfields-1.c: Likewise.\n\t* c-c++-common/simulate-thread/bitfields-2.c: Likewise.\n\t* c-c++-common/simulate-thread/bitfields-3.c: Likewise.\n\t* c-c++-common/simulate-thread/bitfields-4.c: Likewise.\n\t* g++.dg/simulate-thread/bitfields-2.C: Likewise.\n\t* g++.dg/simulate-thread/bitfields.C: Likewise.\n\t* gcc.dg/lto/pr52097_0.c: Likewise.\n\t* gcc.dg/simulate-thread/speculative-store-2.c: Likewise.\n\t* gcc.dg/simulate-thread/speculative-store-3.c: Likewise.\n\t* gcc.dg/simulate-thread/speculative-store-4.c: Likewise.\n\t* gcc.dg/simulate-thread/speculative-store.c: Likewise.\n\t* gcc.dg/tree-ssa/20050314-1.c: Likewise.\n\nFrom-SVN: r276985", "tree": {"sha": "fd98ddc8ba44f1a15b3252553cd393c44d7ab2d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fd98ddc8ba44f1a15b3252553cd393c44d7ab2d4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e622a32db78300821fc1327637ec6413febc2c66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e622a32db78300821fc1327637ec6413febc2c66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e622a32db78300821fc1327637ec6413febc2c66", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e622a32db78300821fc1327637ec6413febc2c66/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3c8e341b996546607fa1f39a0fd9a9d7c2c38214", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c8e341b996546607fa1f39a0fd9a9d7c2c38214", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c8e341b996546607fa1f39a0fd9a9d7c2c38214"}], "stats": {"total": 107, "additions": 67, "deletions": 40}, "files": [{"sha": "299bcb1c8a5d24210e7904d7cf0bd85c2c3e89b8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e622a32db78300821fc1327637ec6413febc2c66/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e622a32db78300821fc1327637ec6413febc2c66/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e622a32db78300821fc1327637ec6413febc2c66", "patch": "@@ -1,3 +1,19 @@\n+2019-10-15  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/92046\n+\t* common.opt (fallow-store-data-races): New.\n+\t* params.def (PARAM_ALLOW_STORE_DATA_RACES): Remove.\n+\t* params.h (ALLOW_STORE_DATA_RACES): Likewise.\n+\t* doc/invoke.texi (fallow-store-data-races): Document.\n+\t(--param allow-store-data-races): Remove docs.\n+\t* opts.c (default_options_table): Enable -fallow-store-data-races\n+\tat -Ofast.\n+\t(default_options_optimization): Do not enable --param\n+\tallow-store-data-races at -Ofast.\n+\t* tree-if-conv.c (ifcvt_memrefs_wont_trap): Use flag_store_data_races\n+\tinstead of PARAM_ALLOW_STORE_DATA_RACES.\n+\t* tree-ssa-loop-im.c (execute_sm): Likewise.\n+\n 2019-10-15  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n \n \tPR tree-optimization/92085"}, {"sha": "859c0f9141dd7bbd1651cb95bf70f7de716e6e09", "filename": "gcc/common.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e622a32db78300821fc1327637ec6413febc2c66/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e622a32db78300821fc1327637ec6413febc2c66/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=e622a32db78300821fc1327637ec6413febc2c66", "patch": "@@ -993,6 +993,10 @@ Align the start of loops.\n falign-loops=\n Common RejectNegative Joined Var(str_align_loops) Optimization\n \n+fallow-store-data-races\n+Common Report Var(flag_store_data_races) Optimization\n+Allow the compiler to introduce new data races on stores.\n+\n fargument-alias\n Common Ignore\n Does nothing. Preserved for backward compatibility."}, {"sha": "47769262b8e7bece23fd9253f428afebc9fcdc39", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e622a32db78300821fc1327637ec6413febc2c66/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e622a32db78300821fc1327637ec6413febc2c66/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=e622a32db78300821fc1327637ec6413febc2c66", "patch": "@@ -406,6 +406,7 @@ Objective-C and Objective-C++ Dialects}.\n -falign-jumps[=@var{n}[:@var{m}:[@var{n2}[:@var{m2}]]]] @gol\n -falign-labels[=@var{n}[:@var{m}:[@var{n2}[:@var{m2}]]]] @gol\n -falign-loops[=@var{n}[:@var{m}:[@var{n2}[:@var{m2}]]]] @gol\n+-fallow-store-data-races @gol\n -fassociative-math  -fauto-profile  -fauto-profile[=@var{path}] @gol\n -fauto-inc-dec  -fbranch-probabilities @gol\n -fcaller-saves @gol\n@@ -8463,9 +8464,9 @@ designed to reduce code size.\n Disregard strict standards compliance.  @option{-Ofast} enables all\n @option{-O3} optimizations.  It also enables optimizations that are not\n valid for all standard-compliant programs.\n-It turns on @option{-ffast-math} and the Fortran-specific\n-@option{-fstack-arrays}, unless @option{-fmax-stack-var-size} is\n-specified, and @option{-fno-protect-parens}.\n+It turns on @option{-ffast-math}, @option{-fallow-store-data-races}\n+and the Fortran-specific @option{-fstack-arrays}, unless\n+@option{-fmax-stack-var-size} is specified, and @option{-fno-protect-parens}.\n \n @item -Og\n @opindex Og\n@@ -10227,6 +10228,12 @@ The maximum allowed @var{n} option value is 65536.\n \n Enabled at levels @option{-O2}, @option{-O3}.\n \n+@item -fallow-store-data-races\n+@opindex fallow-store-data-races\n+Allow the compiler to introduce new data races on stores.\n+\n+Enabled at level @option{-Ofast}.\n+\n @item -funit-at-a-time\n @opindex funit-at-a-time\n This option is left for compatibility reasons. @option{-funit-at-a-time}\n@@ -12060,10 +12067,6 @@ The maximum number of conditional store pairs that can be sunk.  Set to 0\n if either vectorization (@option{-ftree-vectorize}) or if-conversion\n (@option{-ftree-loop-if-convert}) is disabled.\n \n-@item allow-store-data-races\n-Allow optimizers to introduce new data races on stores.\n-Set to 1 to allow, otherwise to 0.\n-\n @item case-values-threshold\n The smallest number of different values for which it is best to use a\n jump-table instead of a tree of conditional branches.  If the value is"}, {"sha": "10b9f108f8d0618501c1567bb4f8a7f9de2bdb98", "filename": "gcc/opts.c", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e622a32db78300821fc1327637ec6413febc2c66/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e622a32db78300821fc1327637ec6413febc2c66/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=e622a32db78300821fc1327637ec6413febc2c66", "patch": "@@ -564,6 +564,7 @@ static const struct default_options default_options_table[] =\n \n     /* -Ofast adds optimizations to -O3.  */\n     { OPT_LEVELS_FAST, OPT_ffast_math, NULL, 1 },\n+    { OPT_LEVELS_FAST, OPT_fallow_store_data_races, NULL, 1 },\n \n     { OPT_LEVELS_NONE, 0, NULL, 0 }\n   };\n@@ -671,13 +672,6 @@ default_options_optimization (struct gcc_options *opts,\n      opt2 ? 100 : default_param_value (PARAM_MAX_FIELDS_FOR_FIELD_SENSITIVE),\n      opts->x_param_values, opts_set->x_param_values);\n \n-  /* At -Ofast, allow store motion to introduce potential race conditions.  */\n-  maybe_set_param_value\n-    (PARAM_ALLOW_STORE_DATA_RACES,\n-     opts->x_optimize_fast ? 1\n-     : default_param_value (PARAM_ALLOW_STORE_DATA_RACES),\n-     opts->x_param_values, opts_set->x_param_values);\n-\n   if (opts->x_optimize_size)\n     /* We want to crossjump as much as possible.  */\n     maybe_set_param_value (PARAM_MIN_CROSSJUMP_INSNS, 1,"}, {"sha": "e4b70bac22a43a9b6098fde1d819f12d3cf9f08b", "filename": "gcc/params.def", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e622a32db78300821fc1327637ec6413febc2c66/gcc%2Fparams.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e622a32db78300821fc1327637ec6413febc2c66/gcc%2Fparams.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.def?ref=e622a32db78300821fc1327637ec6413febc2c66", "patch": "@@ -1225,12 +1225,6 @@ DEFPARAM (PARAM_JUMP_TABLE_MAX_GROWTH_RATIO_FOR_SPEED,\n \t  \"optimizing for speed.\",\n \t  800, 0, 0)\n \n-/* Data race flags for C++0x memory model compliance.  */\n-DEFPARAM (PARAM_ALLOW_STORE_DATA_RACES,\n-\t  \"allow-store-data-races\",\n-\t  \"Allow new data races on stores to be introduced.\",\n-\t  0, 0, 1)\n-\n /* Reassociation width to be used by tree reassoc optimization.  */\n DEFPARAM (PARAM_TREE_REASSOC_WIDTH,\n \t  \"tree-reassoc-width\","}, {"sha": "1aaef6d6a00da79533eb0bba540dd8c731b1eaa8", "filename": "gcc/params.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e622a32db78300821fc1327637ec6413febc2c66/gcc%2Fparams.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e622a32db78300821fc1327637ec6413febc2c66/gcc%2Fparams.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.h?ref=e622a32db78300821fc1327637ec6413febc2c66", "patch": "@@ -228,8 +228,6 @@ extern void init_param_values (int *params);\n   PARAM_VALUE (PARAM_MAX_STORES_TO_SINK)\n #define ALLOW_LOAD_DATA_RACES \\\n   PARAM_VALUE (PARAM_ALLOW_LOAD_DATA_RACES)\n-#define ALLOW_STORE_DATA_RACES \\\n-  PARAM_VALUE (PARAM_ALLOW_STORE_DATA_RACES)\n #define ALLOW_PACKED_LOAD_DATA_RACES \\\n   PARAM_VALUE (PARAM_ALLOW_PACKED_LOAD_DATA_RACES)\n #define ALLOW_PACKED_STORE_DATA_RACES \\"}, {"sha": "8ff78713652fdc78e4f87e06e353ea45a566d0cf", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e622a32db78300821fc1327637ec6413febc2c66/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e622a32db78300821fc1327637ec6413febc2c66/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e622a32db78300821fc1327637ec6413febc2c66", "patch": "@@ -1,3 +1,21 @@\n+2019-10-15  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/92046\n+\t* c-c++-common/cxxbitfields-3.c: Adjust.\n+\t* c-c++-common/cxxbitfields-6.c: Likewise.\n+\t* c-c++-common/simulate-thread/bitfields-1.c: Likewise.\n+\t* c-c++-common/simulate-thread/bitfields-2.c: Likewise.\n+\t* c-c++-common/simulate-thread/bitfields-3.c: Likewise.\n+\t* c-c++-common/simulate-thread/bitfields-4.c: Likewise.\n+\t* g++.dg/simulate-thread/bitfields-2.C: Likewise.\n+\t* g++.dg/simulate-thread/bitfields.C: Likewise.\n+\t* gcc.dg/lto/pr52097_0.c: Likewise.\n+\t* gcc.dg/simulate-thread/speculative-store-2.c: Likewise.\n+\t* gcc.dg/simulate-thread/speculative-store-3.c: Likewise.\n+\t* gcc.dg/simulate-thread/speculative-store-4.c: Likewise.\n+\t* gcc.dg/simulate-thread/speculative-store.c: Likewise.\n+\t* gcc.dg/tree-ssa/20050314-1.c: Likewise.\n+\n 2019-10-15  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n \n \tPR tree-optimization/92085"}, {"sha": "706bf8659ea96449badc61cd674eabd1e2a1a5b2", "filename": "gcc/testsuite/c-c++-common/cxxbitfields-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e622a32db78300821fc1327637ec6413febc2c66/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcxxbitfields-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e622a32db78300821fc1327637ec6413febc2c66/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcxxbitfields-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcxxbitfields-3.c?ref=e622a32db78300821fc1327637ec6413febc2c66", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n-/* { dg-options \"-O2 --param allow-store-data-races=0\" } */\n+/* { dg-options \"-O2 -fno-allow-store-data-races\" } */\n \n /* Make sure we don't narrow down to a QI or HI to store into VAR.J,\n    but instead use an SI.  */"}, {"sha": "273117c0589dc65e243c07499ad114b5e884349f", "filename": "gcc/testsuite/c-c++-common/cxxbitfields-6.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e622a32db78300821fc1327637ec6413febc2c66/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcxxbitfields-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e622a32db78300821fc1327637ec6413febc2c66/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcxxbitfields-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcxxbitfields-6.c?ref=e622a32db78300821fc1327637ec6413febc2c66", "patch": "@@ -1,6 +1,6 @@\n /* PR middle-end/50141 */\n /* { dg-do compile } */\n-/* { dg-options \"-O2 --param allow-store-data-races=0\" } */\n+/* { dg-options \"-O2 -fno-allow-store-data-races\" } */\n \n struct S\n {"}, {"sha": "89d4d082ed868f35556bdfa869db1368466dd6e5", "filename": "gcc/testsuite/c-c++-common/simulate-thread/bitfields-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e622a32db78300821fc1327637ec6413febc2c66/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fsimulate-thread%2Fbitfields-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e622a32db78300821fc1327637ec6413febc2c66/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fsimulate-thread%2Fbitfields-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fsimulate-thread%2Fbitfields-1.c?ref=e622a32db78300821fc1327637ec6413febc2c66", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do link } */\n-/* { dg-options \"--param allow-store-data-races=0\" } */\n+/* { dg-options \"-fno-allow-store-data-races\" } */\n /* { dg-final { simulate-thread } } */\n \n #include <stdio.h>"}, {"sha": "54f76b6da37c146e10d30eddcb26a99e1d5abc3b", "filename": "gcc/testsuite/c-c++-common/simulate-thread/bitfields-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e622a32db78300821fc1327637ec6413febc2c66/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fsimulate-thread%2Fbitfields-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e622a32db78300821fc1327637ec6413febc2c66/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fsimulate-thread%2Fbitfields-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fsimulate-thread%2Fbitfields-2.c?ref=e622a32db78300821fc1327637ec6413febc2c66", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do link { target { ! int16 } } } */\n-/* { dg-options \"--param allow-store-data-races=0\" } */\n+/* { dg-options \"-fno-allow-store-data-races\" } */\n /* { dg-final { simulate-thread } } */\n \n #include <stdio.h>"}, {"sha": "5d2feed9f034a20c9db08572ff100865c24138ac", "filename": "gcc/testsuite/c-c++-common/simulate-thread/bitfields-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e622a32db78300821fc1327637ec6413febc2c66/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fsimulate-thread%2Fbitfields-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e622a32db78300821fc1327637ec6413febc2c66/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fsimulate-thread%2Fbitfields-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fsimulate-thread%2Fbitfields-3.c?ref=e622a32db78300821fc1327637ec6413febc2c66", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do link } */\n-/* { dg-options \"--param allow-store-data-races=0\" } */\n+/* { dg-options \"-fno-allow-store-data-races\" } */\n /* { dg-final { simulate-thread } } */\n \n #include <stdio.h>"}, {"sha": "84aad5e9e216f2672bd8685df729d3029e023cab", "filename": "gcc/testsuite/c-c++-common/simulate-thread/bitfields-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e622a32db78300821fc1327637ec6413febc2c66/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fsimulate-thread%2Fbitfields-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e622a32db78300821fc1327637ec6413febc2c66/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fsimulate-thread%2Fbitfields-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fsimulate-thread%2Fbitfields-4.c?ref=e622a32db78300821fc1327637ec6413febc2c66", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do link } */\n-/* { dg-options \"--param allow-store-data-races=0\" } */\n+/* { dg-options \"-fno-allow-store-data-races\" } */\n /* { dg-final { simulate-thread } } */\n \n #include <stdio.h>"}, {"sha": "e5a5ad5f1c3f45c8171d22bef652fb2ec408c742", "filename": "gcc/testsuite/g++.dg/simulate-thread/bitfields-2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e622a32db78300821fc1327637ec6413febc2c66/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fsimulate-thread%2Fbitfields-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e622a32db78300821fc1327637ec6413febc2c66/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fsimulate-thread%2Fbitfields-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fsimulate-thread%2Fbitfields-2.C?ref=e622a32db78300821fc1327637ec6413febc2c66", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do link } */\n-/* { dg-options \"--param allow-store-data-races=0\" } */\n+/* { dg-options \"-fno-allow-store-data-races\" } */\n /* { dg-final { simulate-thread } } */\n \n /* Test that setting <var.a> does not touch either <var.b> or <var.c>."}, {"sha": "9d1d0622c1d0693cccdb96c5330223e52e37801a", "filename": "gcc/testsuite/g++.dg/simulate-thread/bitfields.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e622a32db78300821fc1327637ec6413febc2c66/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fsimulate-thread%2Fbitfields.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e622a32db78300821fc1327637ec6413febc2c66/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fsimulate-thread%2Fbitfields.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fsimulate-thread%2Fbitfields.C?ref=e622a32db78300821fc1327637ec6413febc2c66", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do link } */\n-/* { dg-options \"--param allow-store-data-races=0\" } */\n+/* { dg-options \"-fno-allow-store-data-races\" } */\n /* { dg-final { simulate-thread } } */\n \n /* Test that setting <var.a> does not touch either <var.b> or <var.c>."}, {"sha": "701a951c0b43b036b80c74b766e5dc2f0cb9a537", "filename": "gcc/testsuite/gcc.dg/lto/pr52097_0.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e622a32db78300821fc1327637ec6413febc2c66/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fpr52097_0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e622a32db78300821fc1327637ec6413febc2c66/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fpr52097_0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fpr52097_0.c?ref=e622a32db78300821fc1327637ec6413febc2c66", "patch": "@@ -1,5 +1,5 @@\n /* { dg-lto-do link } */\n-/* { dg-lto-options { { -O -flto -fexceptions -fnon-call-exceptions --param allow-store-data-races=0 } } } */\n+/* { dg-lto-options { { -O -flto -fexceptions -fnon-call-exceptions -fno-allow-store-data-races } } } */\n /* { dg-require-effective-target exceptions } */\n \n typedef struct { unsigned int e0 : 16; } s1;"}, {"sha": "e3e911808bf053b633cd32a0023a241d2b79071a", "filename": "gcc/testsuite/gcc.dg/simulate-thread/speculative-store-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e622a32db78300821fc1327637ec6413febc2c66/gcc%2Ftestsuite%2Fgcc.dg%2Fsimulate-thread%2Fspeculative-store-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e622a32db78300821fc1327637ec6413febc2c66/gcc%2Ftestsuite%2Fgcc.dg%2Fsimulate-thread%2Fspeculative-store-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fsimulate-thread%2Fspeculative-store-2.c?ref=e622a32db78300821fc1327637ec6413febc2c66", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do link } */\n-/* { dg-options \"--param allow-store-data-races=0 -O2\" } */\n+/* { dg-options \"-fno-allow-store-data-races -O2\" } */\n /* { dg-final { simulate-thread } } */\n \n #include <stdio.h>"}, {"sha": "69f6683901ac9c9631108e1250c60b9258493ae5", "filename": "gcc/testsuite/gcc.dg/simulate-thread/speculative-store-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e622a32db78300821fc1327637ec6413febc2c66/gcc%2Ftestsuite%2Fgcc.dg%2Fsimulate-thread%2Fspeculative-store-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e622a32db78300821fc1327637ec6413febc2c66/gcc%2Ftestsuite%2Fgcc.dg%2Fsimulate-thread%2Fspeculative-store-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fsimulate-thread%2Fspeculative-store-3.c?ref=e622a32db78300821fc1327637ec6413febc2c66", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do link } */\n-/* { dg-options \"--param allow-store-data-races=0 -O2\" } */\n+/* { dg-options \"-fno-allow-store-data-races -O2\" } */\n /* { dg-final { simulate-thread } } */\n \n #include <stdio.h>"}, {"sha": "b3784467dcec0800b741f17b8c86270e30acb9d8", "filename": "gcc/testsuite/gcc.dg/simulate-thread/speculative-store-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e622a32db78300821fc1327637ec6413febc2c66/gcc%2Ftestsuite%2Fgcc.dg%2Fsimulate-thread%2Fspeculative-store-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e622a32db78300821fc1327637ec6413febc2c66/gcc%2Ftestsuite%2Fgcc.dg%2Fsimulate-thread%2Fspeculative-store-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fsimulate-thread%2Fspeculative-store-4.c?ref=e622a32db78300821fc1327637ec6413febc2c66", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do link } */\n-/* { dg-options \"--param allow-store-data-races=0\" } */\n+/* { dg-options \"-fno-allow-store-data-races\" } */\n /* { dg-final { simulate-thread } } */\n \n #include <stdio.h>"}, {"sha": "7afaabb150e22f68ec78f437dabf6032dc77cab5", "filename": "gcc/testsuite/gcc.dg/simulate-thread/speculative-store.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e622a32db78300821fc1327637ec6413febc2c66/gcc%2Ftestsuite%2Fgcc.dg%2Fsimulate-thread%2Fspeculative-store.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e622a32db78300821fc1327637ec6413febc2c66/gcc%2Ftestsuite%2Fgcc.dg%2Fsimulate-thread%2Fspeculative-store.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fsimulate-thread%2Fspeculative-store.c?ref=e622a32db78300821fc1327637ec6413febc2c66", "patch": "@@ -1,12 +1,12 @@\n /* { dg-do link } */\n-/* { dg-options \"--param allow-store-data-races=0\" } */\n+/* { dg-options \"-fno-allow-store-data-races\" } */\n /* { dg-final { simulate-thread } } */\n \n #include <stdio.h>\n #include \"simulate-thread.h\"\n \n /* This file tests that speculative store movement out of a loop doesn't \n-   happen.  This is disallowed when --param allow-store-data-races is 0.  */\n+   happen.  This is disallowed when -fno-allow-store-data-races.  */\n \n int global = 100;\n "}, {"sha": "ffeffb4a01e3f06515401f1097ca380ef6508030", "filename": "gcc/testsuite/gcc.dg/tree-ssa/20050314-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e622a32db78300821fc1327637ec6413febc2c66/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20050314-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e622a32db78300821fc1327637ec6413febc2c66/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20050314-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20050314-1.c?ref=e622a32db78300821fc1327637ec6413febc2c66", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O1 -fdump-tree-lim2-details --param allow-store-data-races=1\" } */\n+/* { dg-options \"-O1 -fdump-tree-lim2-details -fallow-store-data-races\" } */\n \n float a[100];\n "}, {"sha": "df9046a301478f6769431a03f4d5567689308585", "filename": "gcc/tree-if-conv.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e622a32db78300821fc1327637ec6413febc2c66/gcc%2Ftree-if-conv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e622a32db78300821fc1327637ec6413febc2c66/gcc%2Ftree-if-conv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-if-conv.c?ref=e622a32db78300821fc1327637ec6413febc2c66", "patch": "@@ -914,10 +914,10 @@ ifcvt_memrefs_wont_trap (gimple *stmt, vec<data_reference_p> drs)\n          to unconditionally.  */\n       if (base_master_dr\n \t  && DR_BASE_W_UNCONDITIONALLY (*base_master_dr))\n-\treturn PARAM_VALUE (PARAM_ALLOW_STORE_DATA_RACES);\n+\treturn flag_store_data_races;\n       /* or the base is known to be not readonly.  */\n       else if (base_object_writable (DR_REF (a)))\n-\treturn PARAM_VALUE (PARAM_ALLOW_STORE_DATA_RACES);\n+\treturn flag_store_data_races;\n     }\n \n   return false;"}, {"sha": "78664188c4594ece492e6826f8ec5df08da499f3", "filename": "gcc/tree-ssa-loop-im.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e622a32db78300821fc1327637ec6413febc2c66/gcc%2Ftree-ssa-loop-im.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e622a32db78300821fc1327637ec6413febc2c66/gcc%2Ftree-ssa-loop-im.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-im.c?ref=e622a32db78300821fc1327637ec6413febc2c66", "patch": "@@ -2100,7 +2100,7 @@ execute_sm (class loop *loop, vec<edge> exits, im_mem_ref *ref)\n   for_each_index (&ref->mem.ref, force_move_till, &fmt_data);\n \n   if (bb_in_transaction (loop_preheader_edge (loop)->src)\n-      || (! PARAM_VALUE (PARAM_ALLOW_STORE_DATA_RACES)\n+      || (! flag_store_data_races\n \t  && ! ref_always_accessed_p (loop, ref, true)))\n     multi_threaded_model_p = true;\n "}]}