{"sha": "93c9d1bae65fbd6727217cd6532d54e5a5f5049f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTNjOWQxYmFlNjVmYmQ2NzI3MjE3Y2Q2NTMyZDU0ZTVhNWY1MDQ5Zg==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@bigpond.net.au", "date": "2004-01-07T01:21:28Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2004-01-07T01:21:28Z"}, "message": "rs6000.c (rs6000_dbx_register_number): New function.\n\n\t* config/rs6000/rs6000.c (rs6000_dbx_register_number): New function.\n\t* config/rs6000/rs6000-protos.h (rs6000_dbx_register_number): Declare.\n\t* config/rs6000/rs6000.h (DWARF_FRAME_REGNUM): Define.\n\t(DWARF_REG_TO_UNWIND_COLUMN): Correct column adjustment and comment.\n\t* config/rs6000/sysv4.h (DBX_REGISTER_NUMBER): Define.\n\nFrom-SVN: r75497", "tree": {"sha": "0a779d7f74887116be994fc67249d990faf6e805", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0a779d7f74887116be994fc67249d990faf6e805"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/93c9d1bae65fbd6727217cd6532d54e5a5f5049f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93c9d1bae65fbd6727217cd6532d54e5a5f5049f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93c9d1bae65fbd6727217cd6532d54e5a5f5049f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93c9d1bae65fbd6727217cd6532d54e5a5f5049f/comments", "author": null, "committer": null, "parents": [{"sha": "deae8de66442e0a9017623080d5bcea5cf86dddf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/deae8de66442e0a9017623080d5bcea5cf86dddf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/deae8de66442e0a9017623080d5bcea5cf86dddf"}], "stats": {"total": 87, "additions": 71, "deletions": 16}, "files": [{"sha": "237207a5ef49066597d63c9eaded4119b09c420b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93c9d1bae65fbd6727217cd6532d54e5a5f5049f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93c9d1bae65fbd6727217cd6532d54e5a5f5049f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=93c9d1bae65fbd6727217cd6532d54e5a5f5049f", "patch": "@@ -1,3 +1,11 @@\n+2004-01-07  Alan Modra  <amodra@bigpond.net.au>\n+\n+\t* config/rs6000/rs6000.c (rs6000_dbx_register_number): New function.\n+\t* config/rs6000/rs6000-protos.h (rs6000_dbx_register_number): Declare.\n+\t* config/rs6000/rs6000.h (DWARF_FRAME_REGNUM): Define.\n+\t(DWARF_REG_TO_UNWIND_COLUMN): Correct column adjustment and comment.\n+\t* config/rs6000/sysv4.h (DBX_REGISTER_NUMBER): Define.\n+\n 2004-01-06  Eric Christopher  <echristo@redhat.com>\n \n \t* config/mips/mips.h (MDEBUG_ASM_SPEC): Change for dwarf2 default."}, {"sha": "b0341935d974fff5e18e57896768314f3e6b2624", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93c9d1bae65fbd6727217cd6532d54e5a5f5049f/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93c9d1bae65fbd6727217cd6532d54e5a5f5049f/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=93c9d1bae65fbd6727217cd6532d54e5a5f5049f", "patch": "@@ -1,5 +1,6 @@\n /* Definitions of target machine for GNU compiler, for IBM RS/6000.\n-   Copyright (C) 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n+   Copyright (C) 2000, 2001, 2002, 2003, 2004\n+   Free Software Foundation, Inc.\n    Contributed by Richard Kenner (kenner@vlsi1.ultra.nyu.edu)\n \n    This file is part of GCC.\n@@ -186,6 +187,7 @@ extern int uses_TOC (void);\n extern void rs6000_emit_prologue (void);\n extern void rs6000_emit_load_toc_table (int);\n extern void rs6000_aix_emit_builtin_unwind_init (void);\n+extern unsigned int rs6000_dbx_register_number (unsigned int);\n extern void rs6000_emit_epilogue (int);\n extern void rs6000_emit_eh_reg_restore (rtx, rtx);\n extern const char * output_isel (rtx *);"}, {"sha": "bda0777d385e91652929813277b0a5c15b08c14f", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 36, "deletions": 1, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93c9d1bae65fbd6727217cd6532d54e5a5f5049f/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93c9d1bae65fbd6727217cd6532d54e5a5f5049f/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=93c9d1bae65fbd6727217cd6532d54e5a5f5049f", "patch": "@@ -1,6 +1,6 @@\n /* Subroutines used for code generation on IBM RS/6000.\n    Copyright (C) 1991, 1993, 1994, 1995, 1996, 1997, 1998, 1999, \n-   2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n+   2000, 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n    Contributed by Richard Kenner (kenner@vlsi1.ultra.nyu.edu)\n \n    This file is part of GCC.\n@@ -15763,4 +15763,39 @@ rs6000_dwarf_register_span (rtx reg)\n \t\t\t\t   gen_rtx_REG (SImode, regno + 1200)));\n }\n \n+/* Map internal gcc register numbers to DWARF2 register numbers.  */\n+\n+unsigned int\n+rs6000_dbx_register_number (unsigned int regno)\n+{\n+  if (regno <= 63 || write_symbols != DWARF2_DEBUG)\n+    return regno;\n+  if (regno == MQ_REGNO)\n+    return 100;\n+  if (regno == LINK_REGISTER_REGNUM)\n+    return 108;\n+  if (regno == COUNT_REGISTER_REGNUM)\n+    return 109;\n+  if (CR_REGNO_P (regno))\n+    return regno - CR0_REGNO + 86;\n+  if (regno == XER_REGNO)\n+    return 101;\n+  if (ALTIVEC_REGNO_P (regno))\n+    return regno - FIRST_ALTIVEC_REGNO + 1124;\n+  if (regno == VRSAVE_REGNO)\n+    return 356;\n+  if (regno == VSCR_REGNO)\n+    return 67;\n+  if (regno == SPE_ACC_REGNO)\n+    return 99;\n+  if (regno == SPEFSCR_REGNO)\n+    return 612;\n+  /* SPE high reg number.  We get these values of regno from\n+     rs6000_dwarf_register_span.  */\n+  if (regno >= 1200 && regno < 1232)\n+    return regno;\n+\n+  abort ();\n+}\n+\n #include \"gt-rs6000.h\""}, {"sha": "722fc844ed47304f7a46b79fcc2912a688c305fa", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93c9d1bae65fbd6727217cd6532d54e5a5f5049f/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93c9d1bae65fbd6727217cd6532d54e5a5f5049f/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=93c9d1bae65fbd6727217cd6532d54e5a5f5049f", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler, for IBM RS/6000.\n    Copyright (C) 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999,\n-   2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n+   2000, 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n    Contributed by Richard Kenner (kenner@vlsi1.ultra.nyu.edu)\n \n    This file is part of GCC.\n@@ -811,19 +811,27 @@ extern enum rs6000_nop_insertion rs6000_sched_insert_nops;\n /* This must be included for pre gcc 3.0 glibc compatibility.  */\n #define PRE_GCC3_DWARF_FRAME_REGISTERS 77\n \n-/* Add 32 dwarf columns for synthetic SPE registers.  The SPE\n-   synthetic registers are 113 through 145.  */\n+/* Add 32 dwarf columns for synthetic SPE registers.  */\n #define DWARF_FRAME_REGISTERS (FIRST_PSEUDO_REGISTER + 32)\n \n-/* The SPE has an additional 32 synthetic registers starting at 1200.\n-   We must map them here to sane values in the unwinder to avoid a\n-   huge hole in the unwind tables.\n-\n-   FIXME: the AltiVec ABI has AltiVec registers being 1124-1155, and\n-   the VRSAVE SPR (SPR256) assigned to register 356.  When AltiVec EH\n-   is verified to be working, this macro should be changed\n-   accordingly.  */\n-#define DWARF_REG_TO_UNWIND_COLUMN(r) ((r) > 1200 ? ((r) - 1200 + 113) : (r))\n+/* The SPE has an additional 32 synthetic registers, with DWARF debug\n+   info numbering for these registers starting at 1200.  While eh_frame\n+   register numbering need not be the same as the debug info numbering,\n+   we choose to number these regs for eh_frame at 1200 too.  This allows\n+   future versions of the rs6000 backend to add hard registers and\n+   continue to use the gcc hard register numbering for eh_frame.  If the\n+   extra SPE registers in eh_frame were numbered starting from the\n+   current value of FIRST_PSEUDO_REGISTER, then if FIRST_PSEUDO_REGISTER\n+   changed we'd need to introduce a mapping in DWARF_FRAME_REGNUM to\n+   avoid invalidating older SPE eh_frame info.\n+\n+   We must map them here to avoid huge unwinder tables mostly consisting\n+   of unused space.  */ \n+#define DWARF_REG_TO_UNWIND_COLUMN(r) \\\n+  ((r) > 1200 ? ((r) - 1200 + FIRST_PSEUDO_REGISTER) : (r))\n+\n+/* Use gcc hard register numbering for eh_frame.  */\n+#define DWARF_FRAME_REGNUM(REGNO) (REGNO)\n \n /* 1 for registers that have pervasive standard uses\n    and are not available for the register allocator."}, {"sha": "20e7c9a24a4801515f50a611080b48f160c7c2be", "filename": "gcc/config/rs6000/sysv4.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93c9d1bae65fbd6727217cd6532d54e5a5f5049f/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93c9d1bae65fbd6727217cd6532d54e5a5f5049f/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsysv4.h?ref=93c9d1bae65fbd6727217cd6532d54e5a5f5049f", "patch": "@@ -1,6 +1,6 @@\n /* Target definitions for GNU compiler for PowerPC running System V.4\n-   Copyright (C) 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003\n-   Free Software Foundation, Inc.\n+   Copyright (C) 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003,\n+   2004 Free Software Foundation, Inc.\n    Contributed by Cygnus Support.\n \n    This file is part of GCC.\n@@ -742,6 +742,8 @@ extern int fixuplabelno;\n /* Historically we have also supported stabs debugging.  */\n #define DBX_DEBUGGING_INFO 1\n \n+#define DBX_REGISTER_NUMBER(REGNO) rs6000_dbx_register_number (REGNO)\n+\n #define TARGET_ENCODE_SECTION_INFO  rs6000_elf_encode_section_info\n #define TARGET_IN_SMALL_DATA_P  rs6000_elf_in_small_data_p\n #define TARGET_SECTION_TYPE_FLAGS  rs6000_elf_section_type_flags"}]}