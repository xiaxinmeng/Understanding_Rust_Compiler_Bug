{"sha": "ee3b466d6584e531f0739a5d51ee7c8fc8af6bb5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWUzYjQ2NmQ2NTg0ZTUzMWYwNzM5YTVkNTFlZTdjOGZjOGFmNmJiNQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2011-10-28T10:28:40Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2011-10-28T10:28:40Z"}, "message": "sse.md (VI4SD_AVX2): Removed.\n\n\t* config/i386/sse.md (VI4SD_AVX2): Removed.\n\t(VI48_AVX2, VI128_128, VI48_128, VI48_256): New mode iterators.\n\t(vashl<mode>3): Use VI12_128 iterator instead of VI124_128.\n\tAdd another expander using VI48_128 iterator for\n\tTARGET_AVX2 || TARGET_XOP and another using VI48_256 iterator\n\tfor TARGET_AVX2.\n\t(vlshr<mode>3): Likewise.  Change register_operand predicate to\n\tnonimmediate_operand on last operand in the VI12_128 expander.\n\t(vashr<mode>3): Use VI128_128 iterator instead of VI124_128.\n\t(vashrv4si3, vashrv8si3): New expanders.\n\t(avx2_ashrvv8si, avx2_ashrvv4si, avx2_<lshift>vv8si,\n\tavx2_<lshift>vv2di): Removed.\n\t(avx2_ashrv<mode>): New insn with VI4_AVX2 iterator.\n\t(avx2_<lshift>v<mode>): Macroize using VI48_AVX2\n\titerator.  Simplify pattern.\n\n\t* gcc.dg/vshift-1.c: New test.\n\t* gcc.dg/vshift-2.c: New test.\n\t* gcc.target/i386/xop-vshift-1.c: New test.\n\t* gcc.target/i386/xop-vshift-2.c: New test.\n\t* gcc.target/i386/avx2-vshift-1.c: New test.\n\nFrom-SVN: r180609", "tree": {"sha": "19e42a84a5ec5ece294d2fbe5d30e7f1d07038e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/19e42a84a5ec5ece294d2fbe5d30e7f1d07038e9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ee3b466d6584e531f0739a5d51ee7c8fc8af6bb5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee3b466d6584e531f0739a5d51ee7c8fc8af6bb5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee3b466d6584e531f0739a5d51ee7c8fc8af6bb5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee3b466d6584e531f0739a5d51ee7c8fc8af6bb5/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ef6f874e5c574ba301d2498150e5432ec89668b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef6f874e5c574ba301d2498150e5432ec89668b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef6f874e5c574ba301d2498150e5432ec89668b6"}], "stats": {"total": 660, "additions": 417, "deletions": 243}, "files": [{"sha": "59e88f27a79d8582fd176db1fb880af4f1871d87", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee3b466d6584e531f0739a5d51ee7c8fc8af6bb5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee3b466d6584e531f0739a5d51ee7c8fc8af6bb5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ee3b466d6584e531f0739a5d51ee7c8fc8af6bb5", "patch": "@@ -1,3 +1,21 @@\n+2011-10-28  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* config/i386/sse.md (VI4SD_AVX2): Removed.\n+\t(VI48_AVX2, VI128_128, VI48_128, VI48_256): New mode iterators.\n+\t(vashl<mode>3): Use VI12_128 iterator instead of VI124_128.\n+\tAdd another expander using VI48_128 iterator for\n+\tTARGET_AVX2 || TARGET_XOP and another using VI48_256 iterator\n+\tfor TARGET_AVX2.\n+\t(vlshr<mode>3): Likewise.  Change register_operand predicate to\n+\tnonimmediate_operand on last operand in the VI12_128 expander.\n+\t(vashr<mode>3): Use VI128_128 iterator instead of VI124_128.\n+\t(vashrv4si3, vashrv8si3): New expanders.\n+\t(avx2_ashrvv8si, avx2_ashrvv4si, avx2_<lshift>vv8si,\n+\tavx2_<lshift>vv2di): Removed.\n+\t(avx2_ashrv<mode>): New insn with VI4_AVX2 iterator.\n+\t(avx2_<lshift>v<mode>): Macroize using VI48_AVX2\n+\titerator.  Simplify pattern.\n+\n 2010-10-28  Richard Guenther  <rguenther@suse.de>\n \n \tPR driver/50876"}, {"sha": "390f8a4ca6d7fa774c42872e85e7dc5dd5757944", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 91, "deletions": 243, "changes": 334, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee3b466d6584e531f0739a5d51ee7c8fc8af6bb5/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee3b466d6584e531f0739a5d51ee7c8fc8af6bb5/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=ee3b466d6584e531f0739a5d51ee7c8fc8af6bb5", "patch": "@@ -125,8 +125,9 @@\n    (V8SI \"TARGET_AVX2\") V4SI\n    (V4DI \"TARGET_AVX2\") V2DI])\n \n-(define_mode_iterator VI4SD_AVX2\n-  [V4SI V4DI])\n+(define_mode_iterator VI48_AVX2\n+  [(V8SI \"TARGET_AVX2\") V4SI\n+   (V4DI \"TARGET_AVX2\") V2DI])\n \n (define_mode_iterator V48_AVX2\n   [V4SF V2DF\n@@ -191,11 +192,14 @@\n (define_mode_iterator VI12_128 [V16QI V8HI])\n (define_mode_iterator VI14_128 [V16QI V4SI])\n (define_mode_iterator VI124_128 [V16QI V8HI V4SI])\n+(define_mode_iterator VI128_128 [V16QI V8HI V2DI])\n (define_mode_iterator VI24_128 [V8HI V4SI])\n (define_mode_iterator VI248_128 [V8HI V4SI V2DI])\n+(define_mode_iterator VI48_128 [V4SI V2DI])\n \n ;; Random 256bit vector integer mode combinations\n (define_mode_iterator VI124_256 [V32QI V16HI V8SI])\n+(define_mode_iterator VI48_256 [V8SI V4DI])\n \n ;; Int-float size matches\n (define_mode_iterator VI4F_128 [V4SI V4SF])\n@@ -11265,11 +11269,10 @@\n    (set_attr \"mode\" \"TI\")])\n \n ;; XOP packed shift instructions.\n-;; FIXME: add V2DI back in\n (define_expand \"vlshr<mode>3\"\n-  [(match_operand:VI124_128 0 \"register_operand\" \"\")\n-   (match_operand:VI124_128 1 \"register_operand\" \"\")\n-   (match_operand:VI124_128 2 \"register_operand\" \"\")]\n+  [(match_operand:VI12_128 0 \"register_operand\" \"\")\n+   (match_operand:VI12_128 1 \"register_operand\" \"\")\n+   (match_operand:VI12_128 2 \"nonimmediate_operand\" \"\")]\n   \"TARGET_XOP\"\n {\n   rtx neg = gen_reg_rtx (<MODE>mode);\n@@ -11278,10 +11281,33 @@\n   DONE;\n })\n \n+(define_expand \"vlshr<mode>3\"\n+  [(set (match_operand:VI48_128 0 \"register_operand\" \"\")\n+\t(lshiftrt:VI48_128\n+\t  (match_operand:VI48_128 1 \"register_operand\" \"\")\n+\t  (match_operand:VI48_128 2 \"nonimmediate_operand\" \"\")))]\n+  \"TARGET_AVX2 || TARGET_XOP\"\n+{\n+  if (!TARGET_AVX2)\n+    {\n+      rtx neg = gen_reg_rtx (<MODE>mode);\n+      emit_insn (gen_neg<mode>2 (neg, operands[2]));\n+      emit_insn (gen_xop_lshl<mode>3 (operands[0], operands[1], neg));\n+      DONE;\n+    }\n+})\n+\n+(define_expand \"vlshr<mode>3\"\n+  [(set (match_operand:VI48_256 0 \"register_operand\" \"\")\n+\t(lshiftrt:VI48_256\n+\t  (match_operand:VI48_256 1 \"register_operand\" \"\")\n+\t  (match_operand:VI48_256 2 \"nonimmediate_operand\" \"\")))]\n+  \"TARGET_AVX2\")\n+\n (define_expand \"vashr<mode>3\"\n-  [(match_operand:VI124_128 0 \"register_operand\" \"\")\n-   (match_operand:VI124_128 1 \"register_operand\" \"\")\n-   (match_operand:VI124_128 2 \"register_operand\" \"\")]\n+  [(match_operand:VI128_128 0 \"register_operand\" \"\")\n+   (match_operand:VI128_128 1 \"register_operand\" \"\")\n+   (match_operand:VI128_128 2 \"nonimmediate_operand\" \"\")]\n   \"TARGET_XOP\"\n {\n   rtx neg = gen_reg_rtx (<MODE>mode);\n@@ -11290,16 +11316,59 @@\n   DONE;\n })\n \n+(define_expand \"vashrv4si3\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"\")\n+\t(ashiftrt:V4SI (match_operand:V4SI 1 \"register_operand\" \"\")\n+\t\t       (match_operand:V4SI 2 \"nonimmediate_operand\" \"\")))]\n+  \"TARGET_AVX2 || TARGET_XOP\"\n+{\n+  if (!TARGET_AVX2)\n+    {\n+      rtx neg = gen_reg_rtx (V4SImode);\n+      emit_insn (gen_negv4si2 (neg, operands[2]));\n+      emit_insn (gen_xop_ashlv4si3 (operands[0], operands[1], neg));\n+      DONE;\n+    }\n+})\n+\n+(define_expand \"vashrv8si3\"\n+  [(set (match_operand:V8SI 0 \"register_operand\" \"\")\n+\t(ashiftrt:V8SI (match_operand:V8SI 1 \"register_operand\" \"\")\n+\t\t       (match_operand:V8SI 2 \"nonimmediate_operand\" \"\")))]\n+  \"TARGET_AVX2\")\n+\n (define_expand \"vashl<mode>3\"\n-  [(match_operand:VI124_128 0 \"register_operand\" \"\")\n-   (match_operand:VI124_128 1 \"register_operand\" \"\")\n-   (match_operand:VI124_128 2 \"register_operand\" \"\")]\n+  [(match_operand:VI12_128 0 \"register_operand\" \"\")\n+   (match_operand:VI12_128 1 \"register_operand\" \"\")\n+   (match_operand:VI12_128 2 \"register_operand\" \"\")]\n   \"TARGET_XOP\"\n {\n   emit_insn (gen_xop_ashl<mode>3 (operands[0], operands[1], operands[2]));\n   DONE;\n })\n \n+(define_expand \"vashl<mode>3\"\n+  [(set (match_operand:VI48_128 0 \"register_operand\" \"\")\n+\t(ashift:VI48_128\n+\t  (match_operand:VI48_128 1 \"register_operand\" \"\")\n+\t  (match_operand:VI48_128 2 \"nonimmediate_operand\" \"\")))]\n+  \"TARGET_AVX2 || TARGET_XOP\"\n+{\n+  if (!TARGET_AVX2)\n+    {\n+      operands[2] = force_reg (<MODE>mode, operands[2]);\n+      emit_insn (gen_xop_ashl<mode>3 (operands[0], operands[1], operands[2]));\n+      DONE;\n+    }\n+})\n+\n+(define_expand \"vashl<mode>3\"\n+  [(set (match_operand:VI48_256 0 \"register_operand\" \"\")\n+\t(ashift:VI48_256\n+\t  (match_operand:VI48_256 1 \"register_operand\" \"\")\n+\t  (match_operand:VI48_256 2 \"nonimmediate_operand\" \"\")))]\n+  \"TARGET_AVX2\")\n+\n (define_insn \"xop_ashl<mode>3\"\n   [(set (match_operand:VI_128 0 \"register_operand\" \"=x,x\")\n \t(if_then_else:VI_128\n@@ -12401,249 +12470,28 @@\n   DONE;\n })\n \n-(define_insn \"avx2_ashrvv8si\"\n-  [(set (match_operand:V8SI 0 \"register_operand\" \"=x\")\n-\t(vec_concat:V8SI\n-\t  (vec_concat:V4SI\n-\t    (vec_concat:V2SI\n-\t      (ashiftrt:SI\n-\t\t(vec_select:SI\n-\t\t  (match_operand:V8SI 1 \"register_operand\" \"x\")\n-\t\t  (parallel [(const_int 0)]))\n-\t\t(vec_select:SI\n-\t\t  (match_operand:V8SI 2 \"nonimmediate_operand\" \"xm\")\n-\t\t  (parallel [(const_int 0)])))\n-\t      (ashiftrt:SI\n-\t\t(vec_select:SI\n-\t\t  (match_dup 1)\n-\t\t  (parallel [(const_int 1)]))\n-\t\t(vec_select:SI\n-\t\t  (match_dup 2)\n-\t\t  (parallel [(const_int 1)]))))\n-\t    (vec_concat:V2SI\n-\t      (ashiftrt:SI\n-\t\t(vec_select:SI\n-\t\t  (match_dup 1)\n-\t\t  (parallel [(const_int 2)]))\n-\t\t(vec_select:SI\n-\t\t  (match_dup 2)\n-\t\t  (parallel [(const_int 2)])))\n-\t      (ashiftrt:SI\n-\t\t(vec_select:SI\n-\t\t  (match_dup 1)\n-\t\t  (parallel [(const_int 3)]))\n-\t\t(vec_select:SI\n-\t\t  (match_dup 2)\n-\t\t  (parallel [(const_int 3)])))))\n-\t  (vec_concat:V4SI\n-\t    (vec_concat:V2SI\n-\t      (ashiftrt:SI\n-\t\t(vec_select:SI\n-\t\t  (match_dup 1)\n-\t\t  (parallel [(const_int 0)]))\n-\t\t(vec_select:SI\n-\t\t  (match_dup 2)\n-\t\t  (parallel [(const_int 0)])))\n-\t      (ashiftrt:SI\n-\t\t(vec_select:SI\n-\t\t  (match_dup 1)\n-\t\t  (parallel [(const_int 1)]))\n-\t\t(vec_select:SI\n-\t\t  (match_dup 2)\n-\t\t  (parallel [(const_int 1)]))))\n-\t    (vec_concat:V2SI\n-\t      (ashiftrt:SI\n-\t\t(vec_select:SI\n-\t\t  (match_dup 1)\n-\t\t  (parallel [(const_int 2)]))\n-\t\t(vec_select:SI\n-\t\t  (match_dup 2)\n-\t\t  (parallel [(const_int 2)])))\n-\t      (ashiftrt:SI\n-\t\t(vec_select:SI\n-\t\t  (match_dup 1)\n-\t\t  (parallel [(const_int 3)]))\n-\t\t(vec_select:SI\n-\t\t  (match_dup 2)\n-\t\t  (parallel [(const_int 3)])))))))]\n-  \"TARGET_AVX2\"\n-  \"vpsravd\\t{%2, %1, %0|%0, %1, %2}\"\n-  [(set_attr \"type\" \"sseishft\")\n-   (set_attr \"prefix\" \"vex\")\n-   (set_attr \"mode\" \"OI\")])\n-\n-(define_insn \"avx2_ashrvv4si\"\n-  [(set (match_operand:V4SI 0 \"register_operand\" \"=x\")\n-\t(vec_concat:V4SI\n-\t  (vec_concat:V2SI\n-\t    (ashiftrt:SI\n-\t      (vec_select:SI\n-\t\t(match_operand:V4SI 1 \"register_operand\" \"x\")\n-\t\t(parallel [(const_int 0)]))\n-\t      (vec_select:SI\n-\t\t(match_operand:V4SI 2 \"nonimmediate_operand\" \"xm\")\n-\t\t(parallel [(const_int 0)])))\n-\t    (ashiftrt:SI\n-\t      (vec_select:SI\n-\t\t(match_dup 1)\n-\t\t(parallel [(const_int 1)]))\n-\t      (vec_select:SI\n-\t\t(match_dup 2)\n-\t\t(parallel [(const_int 1)]))))\n-\t  (vec_concat:V2SI\n-\t    (ashiftrt:SI\n-\t      (vec_select:SI\n-\t\t(match_dup 1)\n-\t\t(parallel [(const_int 2)]))\n-\t      (vec_select:SI\n-\t\t(match_dup 2)\n-\t\t(parallel [(const_int 2)])))\n-\t    (ashiftrt:SI\n-\t      (vec_select:SI\n-\t\t(match_dup 1)\n-\t\t(parallel [(const_int 3)]))\n-\t      (vec_select:SI\n-\t\t(match_dup 2)\n-\t\t(parallel [(const_int 3)]))))))]\n+(define_insn \"avx2_ashrv<mode>\"\n+  [(set (match_operand:VI4_AVX2 0 \"register_operand\" \"=x\")\n+\t(ashiftrt:VI4_AVX2 (match_operand:VI4_AVX2 1 \"register_operand\" \"x\")\n+\t\t\t   (match_operand:VI4_AVX2 2 \"nonimmediate_operand\"\n+\t\t\t\t\t\t     \"xm\")))]\n   \"TARGET_AVX2\"\n   \"vpsravd\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"type\" \"sseishft\")\n    (set_attr \"prefix\" \"vex\")\n-   (set_attr \"mode\" \"TI\")])\n-\n-(define_insn \"avx2_<lshift>vv8si\"\n-  [(set (match_operand:V8SI 0 \"register_operand\" \"=x\")\n-\t(vec_concat:V8SI\n-\t  (vec_concat:V4SI\n-\t    (vec_concat:V2SI\n-\t      (lshift:SI\n-\t\t(vec_select:SI\n-\t\t  (match_operand:V8SI 1 \"register_operand\" \"x\")\n-\t\t  (parallel [(const_int 0)]))\n-\t\t(vec_select:SI\n-\t\t  (match_operand:V8SI 2 \"nonimmediate_operand\" \"xm\")\n-\t\t  (parallel [(const_int 0)])))\n-\t      (lshift:SI\n-\t\t(vec_select:SI\n-\t\t  (match_dup 1)\n-\t\t  (parallel [(const_int 1)]))\n-\t\t(vec_select:SI\n-\t\t  (match_dup 2)\n-\t\t  (parallel [(const_int 1)]))))\n-\t    (vec_concat:V2SI\n-\t      (lshift:SI\n-\t\t(vec_select:SI\n-\t\t  (match_dup 1)\n-\t\t  (parallel [(const_int 2)]))\n-\t\t(vec_select:SI\n-\t\t  (match_dup 2)\n-\t\t  (parallel [(const_int 2)])))\n-\t      (lshift:SI\n-\t\t(vec_select:SI\n-\t\t  (match_dup 1)\n-\t\t  (parallel [(const_int 3)]))\n-\t\t(vec_select:SI\n-\t\t  (match_dup 2)\n-\t\t  (parallel [(const_int 3)])))))\n-\t  (vec_concat:V4SI\n-\t    (vec_concat:V2SI\n-\t      (lshift:SI\n-\t\t(vec_select:SI\n-\t\t  (match_dup 1)\n-\t\t  (parallel [(const_int 0)]))\n-\t\t(vec_select:SI\n-\t\t  (match_dup 2)\n-\t\t  (parallel [(const_int 0)])))\n-\t      (lshift:SI\n-\t\t(vec_select:SI\n-\t\t  (match_dup 1)\n-\t\t  (parallel [(const_int 1)]))\n-\t\t(vec_select:SI\n-\t\t  (match_dup 2)\n-\t\t  (parallel [(const_int 1)]))))\n-\t    (vec_concat:V2SI\n-\t      (lshift:SI\n-\t\t(vec_select:SI\n-\t\t  (match_dup 1)\n-\t\t  (parallel [(const_int 2)]))\n-\t\t(vec_select:SI\n-\t\t  (match_dup 2)\n-\t\t  (parallel [(const_int 2)])))\n-\t      (lshift:SI\n-\t\t(vec_select:SI\n-\t\t  (match_dup 1)\n-\t\t  (parallel [(const_int 3)]))\n-\t\t(vec_select:SI\n-\t\t  (match_dup 2)\n-\t\t  (parallel [(const_int 3)])))))))]\n-  \"TARGET_AVX2\"\n-  \"vp<lshift_insn>vd\\t{%2, %1, %0|%0, %1, %2}\"\n-  [(set_attr \"type\" \"sseishft\")\n-   (set_attr \"prefix\" \"vex\")\n-   (set_attr \"mode\" \"OI\")])\n+   (set_attr \"mode\" \"<sseinsnmode>\")])\n \n (define_insn \"avx2_<lshift>v<mode>\"\n-  [(set (match_operand:VI4SD_AVX2 0 \"register_operand\" \"=x\")\n-\t(vec_concat:VI4SD_AVX2\n-\t  (vec_concat:<ssehalfvecmode>\n-\t    (lshift:<ssescalarmode>\n-\t      (vec_select:<ssescalarmode>\n-\t\t(match_operand:VI4SD_AVX2 1 \"register_operand\" \"x\")\n-\t\t(parallel [(const_int 0)]))\n-\t      (vec_select:<ssescalarmode>\n-\t\t(match_operand:VI4SD_AVX2 2 \"nonimmediate_operand\" \"xm\")\n-\t\t(parallel [(const_int 0)])))\n-\t    (lshift:<ssescalarmode>\n-\t      (vec_select:<ssescalarmode>\n-\t\t(match_dup 1)\n-\t\t(parallel [(const_int 1)]))\n-\t      (vec_select:<ssescalarmode>\n-\t\t(match_dup 2)\n-\t\t(parallel [(const_int 1)]))))\n-\t  (vec_concat:<ssehalfvecmode>\n-\t    (lshift:<ssescalarmode>\n-\t      (vec_select:<ssescalarmode>\n-\t\t(match_dup 1)\n-\t\t(parallel [(const_int 2)]))\n-\t      (vec_select:<ssescalarmode>\n-\t\t(match_dup 2)\n-\t\t(parallel [(const_int 2)])))\n-\t    (lshift:<ssescalarmode>\n-\t      (vec_select:<ssescalarmode>\n-\t\t(match_dup 1)\n-\t\t(parallel [(const_int 3)]))\n-\t      (vec_select:<ssescalarmode>\n-\t\t(match_dup 2)\n-\t\t(parallel [(const_int 3)]))))))]\n+  [(set (match_operand:VI48_AVX2 0 \"register_operand\" \"=x\")\n+\t(lshift:VI48_AVX2 (match_operand:VI48_AVX2 1 \"register_operand\" \"x\")\n+\t\t\t  (match_operand:VI48_AVX2 2 \"nonimmediate_operand\"\n+\t\t\t\t\t\t     \"xm\")))]\n   \"TARGET_AVX2\"\n   \"vp<lshift_insn>v<ssemodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"type\" \"sseishft\")\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n-(define_insn \"avx2_<lshift>vv2di\"\n-  [(set (match_operand:V2DI 0 \"register_operand\" \"=x\")\n-\t(vec_concat:V2DI\n-\t  (lshift:DI\n-\t    (vec_select:DI\n-\t      (match_operand:V2DI 1 \"register_operand\" \"x\")\n-\t      (parallel [(const_int 0)]))\n-\t    (vec_select:DI\n-\t      (match_operand:V2DI 2 \"nonimmediate_operand\" \"xm\")\n-\t      (parallel [(const_int 0)])))\n-\t  (lshift:DI\n-\t    (vec_select:DI\n-\t      (match_dup 1)\n-\t      (parallel [(const_int 1)]))\n-\t    (vec_select:DI\n-\t      (match_dup 2)\n-\t      (parallel [(const_int 1)])))))]\n-  \"TARGET_AVX2\"\n-  \"vp<lshift_insn>vq\\t{%2, %1, %0|%0, %1, %2}\"\n-  [(set_attr \"type\" \"sseishft\")\n-   (set_attr \"prefix\" \"vex\")\n-   (set_attr \"mode\" \"TI\")])\n-\n (define_insn \"avx_vec_concat<mode>\"\n   [(set (match_operand:V_256 0 \"register_operand\" \"=x,x\")\n \t(vec_concat:V_256"}, {"sha": "500c7fe99e8df0c5a8ceec888ab6baf1564c3ba8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee3b466d6584e531f0739a5d51ee7c8fc8af6bb5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee3b466d6584e531f0739a5d51ee7c8fc8af6bb5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ee3b466d6584e531f0739a5d51ee7c8fc8af6bb5", "patch": "@@ -1,3 +1,11 @@\n+2011-10-28  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc.dg/vshift-1.c: New test.\n+\t* gcc.dg/vshift-2.c: New test.\n+\t* gcc.target/i386/xop-vshift-1.c: New test.\n+\t* gcc.target/i386/xop-vshift-2.c: New test.\n+\t* gcc.target/i386/avx2-vshift-1.c: New test.\n+\n 2011-10-28  Chung-Lin Tang  <cltang@codesourcery.com>\n \n \tPR rtl-optimization/49720"}, {"sha": "2a237aa2bbe182966e9d12dfb09dbe333cbe4574", "filename": "gcc/testsuite/gcc.dg/vshift-1.c", "status": "added", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee3b466d6584e531f0739a5d51ee7c8fc8af6bb5/gcc%2Ftestsuite%2Fgcc.dg%2Fvshift-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee3b466d6584e531f0739a5d51ee7c8fc8af6bb5/gcc%2Ftestsuite%2Fgcc.dg%2Fvshift-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvshift-1.c?ref=ee3b466d6584e531f0739a5d51ee7c8fc8af6bb5", "patch": "@@ -0,0 +1,132 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3\" } */\n+\n+#include <stdlib.h>\n+\n+#define N 64\n+\n+#ifndef TYPE1\n+#define TYPE1 int\n+#define TYPE2 long long\n+#endif\n+\n+signed TYPE1 a[N], b[N], g[N];\n+unsigned TYPE1 c[N], h[N];\n+signed TYPE2 d[N], e[N], j[N];\n+unsigned TYPE2 f[N], k[N];\n+\n+__attribute__((noinline)) void\n+f1 (void)\n+{\n+  int i;\n+  for (i = 0; i < N; i++)\n+    g[i] = a[i] << b[i];\n+}\n+\n+__attribute__((noinline)) void\n+f2 (void)\n+{\n+  int i;\n+  for (i = 0; i < N; i++)\n+    g[i] = a[i] >> b[i];\n+}\n+\n+__attribute__((noinline)) void\n+f3 (void)\n+{\n+  int i;\n+  for (i = 0; i < N; i++)\n+    h[i] = c[i] >> b[i];\n+}\n+\n+__attribute__((noinline)) void\n+f4 (void)\n+{\n+  int i;\n+  for (i = 0; i < N; i++)\n+    j[i] = d[i] << e[i];\n+}\n+\n+__attribute__((noinline)) void\n+f5 (void)\n+{\n+  int i;\n+  for (i = 0; i < N; i++)\n+    j[i] = d[i] >> e[i];\n+}\n+\n+__attribute__((noinline)) void\n+f6 (void)\n+{\n+  int i;\n+  for (i = 0; i < N; i++)\n+    k[i] = f[i] >> e[i];\n+}\n+\n+__attribute__((noinline)) void\n+f7 (void)\n+{\n+  int i;\n+  for (i = 0; i < N; i++)\n+    j[i] = d[i] << b[i];\n+}\n+\n+__attribute__((noinline)) void\n+f8 (void)\n+{\n+  int i;\n+  for (i = 0; i < N; i++)\n+    j[i] = d[i] >> b[i];\n+}\n+\n+__attribute__((noinline)) void\n+f9 (void)\n+{\n+  int i;\n+  for (i = 0; i < N; i++)\n+    k[i] = f[i] >> b[i];\n+}\n+\n+int\n+main ()\n+{\n+  int i;\n+  for (i = 0; i < N; i++)\n+    {\n+      asm (\"\");\n+      c[i] = (random () << 1) | (random () & 1);\n+      b[i] = (i * 85) & (sizeof (TYPE1) * __CHAR_BIT__ - 1);\n+      a[i] = c[i];\n+      d[i] = (random () << 1) | (random () & 1);\n+      d[i] |= (unsigned long long) c[i] << 32;\n+      e[i] = (i * 85) & (sizeof (TYPE2) * __CHAR_BIT__ - 1);\n+      f[i] = d[i];\n+    }\n+  f1 ();\n+  f3 ();\n+  f4 ();\n+  f6 ();\n+  for (i = 0; i < N; i++)\n+    if (g[i] != (signed TYPE1) (a[i] << b[i])\n+\t|| h[i] != (unsigned TYPE1) (c[i] >> b[i])\n+\t|| j[i] != (signed TYPE2) (d[i] << e[i])\n+\t|| k[i] != (unsigned TYPE2) (f[i] >> e[i]))\n+      abort ();\n+  f2 ();\n+  f5 ();\n+  f9 ();\n+  for (i = 0; i < N; i++)\n+    if (g[i] != (signed TYPE1) (a[i] >> b[i])\n+\t|| j[i] != (signed TYPE2) (d[i] >> e[i])\n+\t|| k[i] != (unsigned TYPE2) (f[i] >> b[i]))\n+      abort ();\n+  f7 ();\n+  for (i = 0; i < N; i++)\n+    if (j[i] != (signed TYPE2) (d[i] << b[i]))\n+      abort ();\n+  f8 ();\n+  for (i = 0; i < N; i++)\n+    if (j[i] != (signed TYPE2) (d[i] >> b[i]))\n+      abort ();\n+  return 0;\n+}"}, {"sha": "8f490d209db1a226733dc17d9683841f5ff87364", "filename": "gcc/testsuite/gcc.dg/vshift-2.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee3b466d6584e531f0739a5d51ee7c8fc8af6bb5/gcc%2Ftestsuite%2Fgcc.dg%2Fvshift-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee3b466d6584e531f0739a5d51ee7c8fc8af6bb5/gcc%2Ftestsuite%2Fgcc.dg%2Fvshift-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvshift-2.c?ref=ee3b466d6584e531f0739a5d51ee7c8fc8af6bb5", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3\" } */\n+\n+#define TYPE1 char\n+#define TYPE2 short\n+\n+#include \"vshift-1.c\""}, {"sha": "15f20c8365837fd0dba75e13b584076a67be0198", "filename": "gcc/testsuite/gcc.target/i386/avx2-vshift-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee3b466d6584e531f0739a5d51ee7c8fc8af6bb5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vshift-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee3b466d6584e531f0739a5d51ee7c8fc8af6bb5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vshift-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vshift-1.c?ref=ee3b466d6584e531f0739a5d51ee7c8fc8af6bb5", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mavx2\" } */\n+/* { dg-require-effective-target avx2 } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"avx2-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST avx2_test\n+#endif\n+\n+#include \"xop-vshift-1.c\""}, {"sha": "01198e88a4210099bf0f2326044db9cb8a6689c6", "filename": "gcc/testsuite/gcc.target/i386/xop-vshift-1.c", "status": "added", "additions": 140, "deletions": 0, "changes": 140, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee3b466d6584e531f0739a5d51ee7c8fc8af6bb5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fxop-vshift-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee3b466d6584e531f0739a5d51ee7c8fc8af6bb5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fxop-vshift-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fxop-vshift-1.c?ref=ee3b466d6584e531f0739a5d51ee7c8fc8af6bb5", "patch": "@@ -0,0 +1,140 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mxop\" } */\n+/* { dg-require-effective-target xop } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"xop-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST xop_test\n+#endif\n+\n+#include CHECK_H\n+\n+#define N 64\n+\n+#ifndef TYPE1\n+#define TYPE1 int\n+#define TYPE2 long long\n+#endif\n+\n+signed TYPE1 a[N], b[N], g[N];\n+unsigned TYPE1 c[N], h[N];\n+signed TYPE2 d[N], e[N], j[N];\n+unsigned TYPE2 f[N], k[N];\n+\n+__attribute__((noinline)) void\n+f1 (void)\n+{\n+  int i;\n+  for (i = 0; i < N; i++)\n+    g[i] = a[i] << b[i];\n+}\n+\n+__attribute__((noinline)) void\n+f2 (void)\n+{\n+  int i;\n+  for (i = 0; i < N; i++)\n+    g[i] = a[i] >> b[i];\n+}\n+\n+__attribute__((noinline)) void\n+f3 (void)\n+{\n+  int i;\n+  for (i = 0; i < N; i++)\n+    h[i] = c[i] >> b[i];\n+}\n+\n+__attribute__((noinline)) void\n+f4 (void)\n+{\n+  int i;\n+  for (i = 0; i < N; i++)\n+    j[i] = d[i] << e[i];\n+}\n+\n+__attribute__((noinline)) void\n+f5 (void)\n+{\n+  int i;\n+  for (i = 0; i < N; i++)\n+    j[i] = d[i] >> e[i];\n+}\n+\n+__attribute__((noinline)) void\n+f6 (void)\n+{\n+  int i;\n+  for (i = 0; i < N; i++)\n+    k[i] = f[i] >> e[i];\n+}\n+\n+__attribute__((noinline)) void\n+f7 (void)\n+{\n+  int i;\n+  for (i = 0; i < N; i++)\n+    j[i] = d[i] << b[i];\n+}\n+\n+__attribute__((noinline)) void\n+f8 (void)\n+{\n+  int i;\n+  for (i = 0; i < N; i++)\n+    j[i] = d[i] >> b[i];\n+}\n+\n+__attribute__((noinline)) void\n+f9 (void)\n+{\n+  int i;\n+  for (i = 0; i < N; i++)\n+    k[i] = f[i] >> b[i];\n+}\n+\n+static void\n+TEST ()\n+{\n+  int i;\n+  for (i = 0; i < N; i++)\n+    {\n+      asm (\"\");\n+      c[i] = (random () << 1) | (random () & 1);\n+      b[i] = (i * 85) & (sizeof (TYPE1) * __CHAR_BIT__ - 1);\n+      a[i] = c[i];\n+      d[i] = (random () << 1) | (random () & 1);\n+      d[i] |= (unsigned long long) c[i] << 32;\n+      e[i] = (i * 85) & (sizeof (TYPE2) * __CHAR_BIT__ - 1);\n+      f[i] = d[i];\n+    }\n+  f1 ();\n+  f3 ();\n+  f4 ();\n+  f6 ();\n+  for (i = 0; i < N; i++)\n+    if (g[i] != (signed TYPE1) (a[i] << b[i])\n+\t|| h[i] != (unsigned TYPE1) (c[i] >> b[i])\n+\t|| j[i] != (signed TYPE2) (d[i] << e[i])\n+\t|| k[i] != (unsigned TYPE2) (f[i] >> e[i]))\n+      abort ();\n+  f2 ();\n+  f5 ();\n+  f9 ();\n+  for (i = 0; i < N; i++)\n+    if (g[i] != (signed TYPE1) (a[i] >> b[i])\n+\t|| j[i] != (signed TYPE2) (d[i] >> e[i])\n+\t|| k[i] != (unsigned TYPE2) (f[i] >> b[i]))\n+      abort ();\n+  f7 ();\n+  for (i = 0; i < N; i++)\n+    if (j[i] != (signed TYPE2) (d[i] << b[i]))\n+      abort ();\n+  f8 ();\n+  for (i = 0; i < N; i++)\n+    if (j[i] != (signed TYPE2) (d[i] >> b[i]))\n+      abort ();\n+}"}, {"sha": "81e86d098e6d375dbe66cb15cd1e7deb48599887", "filename": "gcc/testsuite/gcc.target/i386/xop-vshift-2.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee3b466d6584e531f0739a5d51ee7c8fc8af6bb5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fxop-vshift-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee3b466d6584e531f0739a5d51ee7c8fc8af6bb5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fxop-vshift-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fxop-vshift-2.c?ref=ee3b466d6584e531f0739a5d51ee7c8fc8af6bb5", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mxop\" } */\n+/* { dg-require-effective-target xop } */\n+\n+#define TYPE1 char\n+#define TYPE2 short\n+\n+#include \"xop-vshift-1.c\""}]}