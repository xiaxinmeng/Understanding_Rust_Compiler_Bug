{"sha": "75ab2f0ebd3c6ab678fea03906186068b89f9fbc", "node_id": "C_kwDOANBUbNoAKDc1YWIyZjBlYmQzYzZhYjY3OGZlYTAzOTA2MTg2MDY4Yjg5ZjlmYmM", "commit": {"author": {"name": "Takayuki 'January June' Suwa", "email": "jjsuwa_sys3175@yahoo.co.jp", "date": "2022-06-19T19:12:48Z"}, "committer": {"name": "Max Filippov", "email": "jcmvbkbc@gmail.com", "date": "2022-06-19T21:07:05Z"}, "message": "xtensa: Apply a few minor fixes\n\nNo functional changes.\n\ngcc/ChangeLog:\n\n\t* config/xtensa/xtensa.cc (xtensa_emit_move_sequence):\n\tUse can_create_pseudo_p(), instead of using individual\n\treload_in_progress and reload_completed.\n\t(xtensa_expand_block_set_small_loop): Use xtensa_simm8x256(),\n\tthe existing predicate function.\n\t(xtensa_is_insn_L32R_p, gen_int_relational, xtensa_emit_sibcall):\n\tUse the standard RTX code predicate macros such as MEM_P,\n\tSYMBOL_REF_P and/or CONST_INT_P.\n\t* config/xtensa/xtensa.md: Avoid using numeric literals\tto determine\n\tif callee-saved register, at the split patterns for indirect sibcall\n\tfixups.", "tree": {"sha": "db4696b430d626f94ec7a09b9e2b5847b347f86c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/db4696b430d626f94ec7a09b9e2b5847b347f86c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/75ab2f0ebd3c6ab678fea03906186068b89f9fbc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75ab2f0ebd3c6ab678fea03906186068b89f9fbc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75ab2f0ebd3c6ab678fea03906186068b89f9fbc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75ab2f0ebd3c6ab678fea03906186068b89f9fbc/comments", "author": {"login": "jjsuwa-sys3175", "id": 73290592, "node_id": "MDQ6VXNlcjczMjkwNTky", "avatar_url": "https://avatars.githubusercontent.com/u/73290592?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jjsuwa-sys3175", "html_url": "https://github.com/jjsuwa-sys3175", "followers_url": "https://api.github.com/users/jjsuwa-sys3175/followers", "following_url": "https://api.github.com/users/jjsuwa-sys3175/following{/other_user}", "gists_url": "https://api.github.com/users/jjsuwa-sys3175/gists{/gist_id}", "starred_url": "https://api.github.com/users/jjsuwa-sys3175/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jjsuwa-sys3175/subscriptions", "organizations_url": "https://api.github.com/users/jjsuwa-sys3175/orgs", "repos_url": "https://api.github.com/users/jjsuwa-sys3175/repos", "events_url": "https://api.github.com/users/jjsuwa-sys3175/events{/privacy}", "received_events_url": "https://api.github.com/users/jjsuwa-sys3175/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jcmvbkbc", "id": 166731, "node_id": "MDQ6VXNlcjE2NjczMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/166731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jcmvbkbc", "html_url": "https://github.com/jcmvbkbc", "followers_url": "https://api.github.com/users/jcmvbkbc/followers", "following_url": "https://api.github.com/users/jcmvbkbc/following{/other_user}", "gists_url": "https://api.github.com/users/jcmvbkbc/gists{/gist_id}", "starred_url": "https://api.github.com/users/jcmvbkbc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jcmvbkbc/subscriptions", "organizations_url": "https://api.github.com/users/jcmvbkbc/orgs", "repos_url": "https://api.github.com/users/jcmvbkbc/repos", "events_url": "https://api.github.com/users/jcmvbkbc/events{/privacy}", "received_events_url": "https://api.github.com/users/jcmvbkbc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4390e7bfbc641a52c6192b448768dafdf4565527", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4390e7bfbc641a52c6192b448768dafdf4565527", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4390e7bfbc641a52c6192b448768dafdf4565527"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "2c534ff9c60a6576b034e1fc80efda456cbcb606", "filename": "gcc/config/xtensa/xtensa.cc", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75ab2f0ebd3c6ab678fea03906186068b89f9fbc/gcc%2Fconfig%2Fxtensa%2Fxtensa.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75ab2f0ebd3c6ab678fea03906186068b89f9fbc/gcc%2Fconfig%2Fxtensa%2Fxtensa.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.cc?ref=75ab2f0ebd3c6ab678fea03906186068b89f9fbc", "patch": "@@ -752,7 +752,7 @@ gen_int_relational (enum rtx_code test_code, /* relational test (EQ, etc) */\n     }\n \n   /* See if we need to invert the result.  */\n-  invert = ((GET_CODE (cmp1) == CONST_INT)\n+  invert = (CONST_INT_P (cmp1)\n \t    ? p_info->invert_const\n \t    : p_info->invert_reg);\n \n@@ -1209,7 +1209,7 @@ xtensa_emit_move_sequence (rtx *operands, machine_mode mode)\n \t}\n     }\n \n-  if (!(reload_in_progress | reload_completed)\n+  if (can_create_pseudo_p ()\n       && !xtensa_valid_move (mode, operands))\n     operands[1] = force_reg (mode, operands[1]);\n \n@@ -1612,7 +1612,7 @@ xtensa_expand_block_set_small_loop (rtx *operands)\n \t thus limited to only offset to the end address for ADDI/ADDMI\n \t instruction.  */\n       if (align == 4\n-\t  && ! (bytes <= 127 || (bytes <= 32512 && bytes % 256 == 0)))\n+\t  && ! (bytes <= 127 || xtensa_simm8x256 (bytes)))\n \treturn 0;\n \n       /* If no 4-byte aligned, loop count should be treated as the\n@@ -2169,7 +2169,7 @@ xtensa_emit_sibcall (int callop, rtx *operands)\n   static char result[64];\n   rtx tgt = operands[callop];\n \n-  if (GET_CODE (tgt) == CONST_INT)\n+  if (CONST_INT_P (tgt))\n     sprintf (result, \"j.l\\t\" HOST_WIDE_INT_PRINT_HEX \", a9\",\n \t     INTVAL (tgt));\n   else if (register_operand (tgt, VOIDmode))\n@@ -4282,17 +4282,17 @@ xtensa_rtx_costs (rtx x, machine_mode mode, int outer_code,\n }\n \n static bool\n-xtensa_is_insn_L32R_p(const rtx_insn *insn)\n+xtensa_is_insn_L32R_p (const rtx_insn *insn)\n {\n   rtx x = PATTERN (insn);\n \n   if (GET_CODE (x) == SET)\n     {\n-      x = XEXP (x, 1);\n-      if (GET_CODE (x) == MEM)\n+      x = SET_SRC (x);\n+      if (MEM_P (x))\n \t{\n \t  x = XEXP (x, 0);\n-\t  return (GET_CODE (x) == SYMBOL_REF || CONST_INT_P (x))\n+\t  return (SYMBOL_REF_P (x) || CONST_INT_P (x))\n \t\t && CONSTANT_POOL_ADDRESS_P (x);\n \t}\n     }"}, {"sha": "84b975cf00e61b4f1733ca86c310a3bbc3a1c63f", "filename": "gcc/config/xtensa/xtensa.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75ab2f0ebd3c6ab678fea03906186068b89f9fbc/gcc%2Fconfig%2Fxtensa%2Fxtensa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75ab2f0ebd3c6ab678fea03906186068b89f9fbc/gcc%2Fconfig%2Fxtensa%2Fxtensa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.md?ref=75ab2f0ebd3c6ab678fea03906186068b89f9fbc", "patch": "@@ -1246,14 +1246,14 @@\n   int i = 0;\n   rtx x = XEXP (operands[1], 0);\n   long l[2];\n-  if (GET_CODE (x) == SYMBOL_REF\n+  if (SYMBOL_REF_P (x)\n       && CONSTANT_POOL_ADDRESS_P (x))\n     x = get_pool_constant (x);\n   else if (GET_CODE (x) == CONST)\n     {\n       x = XEXP (x, 0);\n       gcc_assert (GET_CODE (x) == PLUS\n-\t\t  && GET_CODE (XEXP (x, 0)) == SYMBOL_REF\n+\t\t  && SYMBOL_REF_P (XEXP (x, 0))\n \t\t  && CONSTANT_POOL_ADDRESS_P (XEXP (x, 0))\n \t\t  && CONST_INT_P (XEXP (x, 1)));\n       i = INTVAL (XEXP (x, 1));\n@@ -2212,7 +2212,7 @@\n \t (match_operand 1 \"\"))]\n   \"reload_completed\n    && !TARGET_WINDOWED_ABI && SIBLING_CALL_P (insn)\n-   && IN_RANGE (REGNO (operands[0]), 12, 15)\"\n+   && ! call_used_or_fixed_reg_p (REGNO (operands[0]))\"\n   [(set (reg:SI A10_REG)\n \t(match_dup 0))\n    (call (mem:SI (reg:SI A10_REG))\n@@ -2245,7 +2245,7 @@\n \t      (match_operand 2 \"\")))]\n   \"reload_completed\n    && !TARGET_WINDOWED_ABI && SIBLING_CALL_P (insn)\n-   && IN_RANGE (REGNO (operands[1]), 12, 15)\"\n+   && ! call_used_or_fixed_reg_p (REGNO (operands[1]))\"\n   [(set (reg:SI A10_REG)\n \t(match_dup 1))\n    (set (match_dup 0)"}]}