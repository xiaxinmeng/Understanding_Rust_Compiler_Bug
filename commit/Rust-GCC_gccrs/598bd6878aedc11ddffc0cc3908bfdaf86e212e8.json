{"sha": "598bd6878aedc11ddffc0cc3908bfdaf86e212e8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTk4YmQ2ODc4YWVkYzExZGRmZmMwY2MzOTA4YmZkYWY4NmUyMTJlOA==", "commit": {"author": {"name": "Kelvin Nilsen", "email": "kelvin@gcc.gnu.org", "date": "2017-01-04T20:03:00Z"}, "committer": {"name": "Kelvin Nilsen", "email": "kelvin@gcc.gnu.org", "date": "2017-01-04T20:03:00Z"}, "message": "re PR target/78056 (build failure on Power7)\n\ngcc/testsuite/ChangeLog:\n\n2017-01-04  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n\n\tPR target/78056\n\t* gcc.target/powerpc/pr78056-1.c: New test.\n\t* gcc.target/powerpc/pr78056-2.c: New test.\n\t* gcc.target/powerpc/pr78056-3.c: New test.\n\t* gcc.target/powerpc/pr78056-4.c: New test.\n\t* gcc.target/powerpc/pr78056-5.c: New test.\n\t* gcc.target/powerpc/pr78056-6.c: New test.\n\t* gcc.target/powerpc/pr78056-7.c: New test.\n\t* gcc.target/powerpc/pr78056-8.c: New test.\n\t* lib/target-supports.exp\n\t(check_effective_target_powerpc_popcntb_ok): New procedure to test\n\twhether the effective target supports the popcntb instruction.\n\ngcc/ChangeLog:\n\n2017-01-04  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n\n\tPR target/78056\n\t* doc/sourcebuild.texi (PowerPC-specific attributes): Add\n\tdocumentation of the powerpc_popcntb_ok attribute.\n\t* config/rs6000/rs6000.c (rs6000_option_override_internal): Add\n\tcode to issue warning messages if a requested CPU configuration is\n\tnot supported by the binary (assembler and loader) toolchain.\n\t(spe_init_builtins): Add two assertions to prevent ICE if attempt is\n\tmade to define a built-in function that has been disabled.\n\t(paired_init_builtins): Add assertion to prevent ICE if attempt is\n\tmade to define a built-in function that has been disabled.\n\t(altivec_init_builtins): Add comment explaining why definition\n\tof the DST built-in functions is not preceded by an assertion\n\tcheck.  Add assertions to prevent ICE if attempts are made to\n\tdefine an altivec predicate or an abs* built-in function that has\n\tbeen disabled.\n\t(htm_init_builtins): Add comment explaining why definition of the\n\thtm built-in functions is not preceded by an assertion check.\n\nFrom-SVN: r244068", "tree": {"sha": "c720789c615b4690b1f9a8185304f43c9aba2d6a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c720789c615b4690b1f9a8185304f43c9aba2d6a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/598bd6878aedc11ddffc0cc3908bfdaf86e212e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/598bd6878aedc11ddffc0cc3908bfdaf86e212e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/598bd6878aedc11ddffc0cc3908bfdaf86e212e8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/598bd6878aedc11ddffc0cc3908bfdaf86e212e8/comments", "author": null, "committer": null, "parents": [{"sha": "8194635af7f9974ab436603f5c253db110432e8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8194635af7f9974ab436603f5c253db110432e8c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8194635af7f9974ab436603f5c253db110432e8c"}], "stats": {"total": 299, "additions": 298, "deletions": 1}, "files": [{"sha": "5568ec6c1a46546fba7f8e963a5deaaafdc98fed", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/598bd6878aedc11ddffc0cc3908bfdaf86e212e8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/598bd6878aedc11ddffc0cc3908bfdaf86e212e8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=598bd6878aedc11ddffc0cc3908bfdaf86e212e8", "patch": "@@ -1,3 +1,23 @@\n+2017-01-04  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n+\n+\tPR target/78056\n+\t* doc/sourcebuild.texi (PowerPC-specific attributes): Add\n+\tdocumentation of the powerpc_popcntb_ok attribute.\n+\t* config/rs6000/rs6000.c (rs6000_option_override_internal): Add\n+\tcode to issue warning messages if a requested CPU configuration is\n+\tnot supported by the binary (assembler and loader) toolchain.\n+\t(spe_init_builtins): Add two assertions to prevent ICE if attempt is\n+\tmade to define a built-in function that has been disabled.\n+\t(paired_init_builtins): Add assertion to prevent ICE if attempt is\n+\tmade to define a built-in function that has been disabled.\n+\t(altivec_init_builtins): Add comment explaining why definition\n+\tof the DST built-in functions is not preceded by an assertion\n+\tcheck.  Add assertions to prevent ICE if attempts are made to\n+\tdefine an altivec predicate or an abs* built-in function that has\n+\tbeen disabled.\n+\t(htm_init_builtins): Add comment explaining why definition of the\n+\thtm built-in functions is not preceded by an assertion check.\n+\n 2017-01-04  Jeff Law  <law@redhat.com>\n \n \tPR tree-optimizatin/67955"}, {"sha": "875015ce10e1b4956d7ace57433d3fafb7b5c7b9", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 80, "deletions": 1, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/598bd6878aedc11ddffc0cc3908bfdaf86e212e8/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/598bd6878aedc11ddffc0cc3908bfdaf86e212e8/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=598bd6878aedc11ddffc0cc3908bfdaf86e212e8", "patch": "@@ -3934,6 +3934,67 @@ rs6000_option_override_internal (bool global_init_p)\n \n   gcc_assert (cpu_index >= 0);\n \n+  if (have_cpu)\n+    {\n+#ifndef HAVE_AS_POWER9\n+      if (processor_target_table[rs6000_cpu_index].processor \n+\t  == PROCESSOR_POWER9)\n+\t{\n+\t  have_cpu = false;\n+\t  warning (0, \"will not generate power9 instructions because \"\n+\t\t   \"assembler lacks power9 support\");\n+\t}\n+#endif\n+#ifndef HAVE_AS_POWER8\n+      if (processor_target_table[rs6000_cpu_index].processor\n+\t  == PROCESSOR_POWER8)\n+\t{\n+\t  have_cpu = false;\n+\t  warning (0, \"will not generate power8 instructions because \"\n+\t\t   \"assembler lacks power8 support\");\n+\t}\n+#endif\n+#ifndef HAVE_AS_POPCNTD\n+      if (processor_target_table[rs6000_cpu_index].processor\n+\t  == PROCESSOR_POWER7)\n+\t{\n+\t  have_cpu = false;\n+\t  warning (0, \"will not generate power7 instructions because \"\n+\t\t   \"assembler lacks power7 support\");\n+\t}\n+#endif\n+#ifndef HAVE_AS_DFP\n+      if (processor_target_table[rs6000_cpu_index].processor\n+\t  == PROCESSOR_POWER6)\n+\t{\n+\t  have_cpu = false;\n+\t  warning (0, \"will not generate power6 instructions because \"\n+\t\t   \"assembler lacks power6 support\");\n+\t}\n+#endif\n+#ifndef HAVE_AS_POPCNTB\n+      if (processor_target_table[rs6000_cpu_index].processor\n+\t  == PROCESSOR_POWER5)\n+\t{\n+\t  have_cpu = false;\n+\t  warning (0, \"will not generate power5 instructions because \"\n+\t\t   \"assembler lacks power5 support\");\n+\t}\n+#endif\n+\n+      if (!have_cpu)\n+\t{\n+\t  /* PowerPC 64-bit LE requires at least ISA 2.07.  */\n+\t  const char *default_cpu = (!TARGET_POWERPC64\n+\t\t\t\t     ? \"powerpc\"\n+\t\t\t\t     : (BYTES_BIG_ENDIAN\n+\t\t\t\t\t? \"powerpc64\"\n+\t\t\t\t\t: \"powerpc64le\"));\n+\n+\t  rs6000_cpu_index = cpu_index = rs6000_cpu_name_lookup (default_cpu);\n+\t}\n+    }\n+\n   /* If we have a cpu, either through an explicit -mcpu=<xxx> or if the\n      compiler was configured with --with-cpu=<xxx>, replace all of the ISA bits\n      with those from the cpu, except for options that were explicitly set.  If\n@@ -17371,6 +17432,8 @@ spe_init_builtins (void)\n \t  continue;\n \t}\n \n+      /* Cannot define builtin if the instruction is disabled.  */\n+      gcc_assert (d->icode != CODE_FOR_nothing);\n       switch (insn_data[d->icode].operand[1].mode)\n \t{\n \tcase V2SImode:\n@@ -17401,6 +17464,8 @@ spe_init_builtins (void)\n \t  continue;\n \t}\n \n+      /* Cannot define builtin if the instruction is disabled.  */\n+      gcc_assert (d->icode != CODE_FOR_nothing);\n       switch (insn_data[d->icode].operand[1].mode)\n \t{\n \tcase V2SImode:\n@@ -17468,6 +17533,9 @@ paired_init_builtins (void)\n \t  continue;\n \t}\n \n+      /* Cannot define builtin if the instruction is disabled.  */\n+      gcc_assert (d->icode != CODE_FOR_nothing);\n+\n       if (TARGET_DEBUG_BUILTIN)\n \tfprintf (stderr, \"paired pred #%d, insn = %s [%d], mode = %s\\n\",\n \t\t (int)i, get_insn_name (d->icode), (int)d->icode,\n@@ -17837,6 +17905,8 @@ altivec_init_builtins (void)\n     {\n       HOST_WIDE_INT mask = d->mask;\n \n+      /* It is expected that these dst built-in functions may have\n+\t d->icode equal to CODE_FOR_nothing.  */\n       if ((mask & builtin_mask) != mask)\n \t{\n \t  if (TARGET_DEBUG_BUILTIN)\n@@ -17866,7 +17936,11 @@ altivec_init_builtins (void)\n       if (rs6000_overloaded_builtin_p (d->code))\n \tmode1 = VOIDmode;\n       else\n-\tmode1 = insn_data[d->icode].operand[1].mode;\n+\t{\n+\t  /* Cannot define builtin if the instruction is disabled.  */\n+\t  gcc_assert (d->icode != CODE_FOR_nothing);\n+\t  mode1 = insn_data[d->icode].operand[1].mode;\n+\t}\n \n       switch (mode1)\n \t{\n@@ -17914,6 +17988,8 @@ altivec_init_builtins (void)\n \t  continue;\n \t}\n \n+      /* Cannot define builtin if the instruction is disabled.  */\n+      gcc_assert (d->icode != CODE_FOR_nothing);\n       mode0 = insn_data[d->icode].operand[0].mode;\n \n       switch (mode0)\n@@ -18101,6 +18177,9 @@ htm_init_builtins (void)\n       tree rettype;\n       tree argtype;\n \n+      /* It is expected that these htm built-in functions may have\n+\t d->icode equal to CODE_FOR_nothing.  */\n+\n       if (TARGET_32BIT && TARGET_POWERPC64)\n \tgpr_type_node = long_long_unsigned_type_node;\n       else"}, {"sha": "204518d38daa3e0545f150bb3c4a8a1caee9330a", "filename": "gcc/doc/sourcebuild.texi", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/598bd6878aedc11ddffc0cc3908bfdaf86e212e8/gcc%2Fdoc%2Fsourcebuild.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/598bd6878aedc11ddffc0cc3908bfdaf86e212e8/gcc%2Fdoc%2Fsourcebuild.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fsourcebuild.texi?ref=598bd6878aedc11ddffc0cc3908bfdaf86e212e8", "patch": "@@ -1766,6 +1766,10 @@ PowerPC target supports @code{-mhtm}\n @item powerpc_p8vector_ok\n PowerPC target supports @code{-mpower8-vector}\n \n+@item powerpc_popcntb_ok\n+PowerPC target supports the @code{popcntb} instruction, indicating\n+that this target supports @code{-mcpu=power5}.\n+\n @item powerpc_ppu_ok\n PowerPC target supports @code{-mcpu=cell}.\n "}, {"sha": "5a3da3ba85da82f6215e37a5115b00adbd8501b1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/598bd6878aedc11ddffc0cc3908bfdaf86e212e8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/598bd6878aedc11ddffc0cc3908bfdaf86e212e8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=598bd6878aedc11ddffc0cc3908bfdaf86e212e8", "patch": "@@ -1,3 +1,18 @@\n+2017-01-04  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n+\n+\tPR target/78056\n+\t* gcc.target/powerpc/pr78056-1.c: New test.\n+\t* gcc.target/powerpc/pr78056-2.c: New test.\n+\t* gcc.target/powerpc/pr78056-3.c: New test.\n+\t* gcc.target/powerpc/pr78056-4.c: New test.\n+\t* gcc.target/powerpc/pr78056-5.c: New test.\n+\t* gcc.target/powerpc/pr78056-6.c: New test.\n+\t* gcc.target/powerpc/pr78056-7.c: New test.\n+\t* gcc.target/powerpc/pr78056-8.c: New test.\n+\t* lib/target-supports.exp\n+\t(check_effective_target_powerpc_popcntb_ok): New procedure to test\n+\twhether the effective target supports the popcntb instruction.\n+\n 2017-01-03  Jeff Law  <law@redhat.com>\n \n \tPR tree-optimization/67955"}, {"sha": "0d37d2b08b84e5b78f539831ae1455119f7f2439", "filename": "gcc/testsuite/gcc.target/powerpc/pr78056-1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/598bd6878aedc11ddffc0cc3908bfdaf86e212e8/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr78056-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/598bd6878aedc11ddffc0cc3908bfdaf86e212e8/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr78056-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr78056-1.c?ref=598bd6878aedc11ddffc0cc3908bfdaf86e212e8", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power8\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-skip-if \"\" { powerpc*-*-aix* } } */\n+/* { dg-options \"-mcpu=power8\" } */\n+\n+/* This test should succeed on both 32- and 64-bit configurations.  */\n+#include <altivec.h>\n+\n+/* Though the command line specifies power8 target, this function is\n+   to support power9.  */\n+__attribute__((target(\"cpu=power9\")))\n+int get_random ()\n+{\n+  return __builtin_darn_32 ();\n+}\n+\n+/* { dg-final { scan-assembler\t   \"darn\" } } */"}, {"sha": "0eec2965ac07fa5cfb87437a410e88463b2df72c", "filename": "gcc/testsuite/gcc.target/powerpc/pr78056-2.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/598bd6878aedc11ddffc0cc3908bfdaf86e212e8/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr78056-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/598bd6878aedc11ddffc0cc3908bfdaf86e212e8/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr78056-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr78056-2.c?ref=598bd6878aedc11ddffc0cc3908bfdaf86e212e8", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power8\" } } */\n+/* { dg-require-effective-target powerpc_p8vector_ok } */\n+/* { dg-skip-if \"\" { powerpc_p9vector_ok } } */\n+/* { dg-skip-if \"\" { powerpc*-*-aix* } } */\n+/* { dg-options \"-mcpu=power8\" } */\n+\n+/* This test should succeed on both 32- and 64-bit configurations.  */\n+#include <altivec.h>\n+\n+/* Though the command line specifies power8 target, this function is\n+   to support power9. Expect an error message here because this target\n+   does not support power9.  */\n+__attribute__((target(\"cpu=power9\")))\n+int get_random ()\n+{ /* { dg-warning \"lacks power9 support\" } */\n+  return __builtin_darn_32 (); /* { dg-warning \"implicit declaration\" } */\n+}\n+"}, {"sha": "f11ef7f3b08aa514596665d5a2d0f30e024db3f2", "filename": "gcc/testsuite/gcc.target/powerpc/pr78056-3.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/598bd6878aedc11ddffc0cc3908bfdaf86e212e8/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr78056-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/598bd6878aedc11ddffc0cc3908bfdaf86e212e8/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr78056-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr78056-3.c?ref=598bd6878aedc11ddffc0cc3908bfdaf86e212e8", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power7\" } } */\n+/* { dg-require-effective-target powerpc_p8vector_ok } */\n+/* { dg-skip-if \"\" { powerpc*-*-aix* } } */\n+/* { dg-options \"-mcpu=power7\" } */\n+\n+/* This test should succeed on both 32- and 64-bit configurations.  */\n+#include <altivec.h>\n+\n+/* Test for the byte atomic operations on power8 using lbarx/stbcx.  */\n+__attribute__((target(\"cpu=power8\")))\n+char\n+char_fetch_add_relaxed (char *ptr, int value)\n+{\n+  return __atomic_fetch_add (ptr, value, __ATOMIC_RELAXED);\n+}\n+\n+/* { dg-final { scan-assembler-times \"lbarx\" 1 } } */"}, {"sha": "aaae13dc217a7a1f830c383d4cdaae8652e085ea", "filename": "gcc/testsuite/gcc.target/powerpc/pr78056-4.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/598bd6878aedc11ddffc0cc3908bfdaf86e212e8/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr78056-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/598bd6878aedc11ddffc0cc3908bfdaf86e212e8/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr78056-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr78056-4.c?ref=598bd6878aedc11ddffc0cc3908bfdaf86e212e8", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power7\" } } */\n+/* powerpc_vsx_ok represents power7 */\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+/* { dg-skip-if \"\" { powerpc_p8vector_ok } } */\n+/* { dg-skip-if \"\" { powerpc*-*-aix* } } */\n+/* { dg-options \"-mcpu=power7\" } */\n+\n+/* This test should succeed on both 32- and 64-bit configurations.  */\n+#include <altivec.h>\n+\n+/* Though the command line specifies power7 target, this function is\n+   to support power8, which will fail because this platform does not\n+   support power8.  */\n+__attribute__((target(\"cpu=power8\")))\n+char\n+char_fetch_add_relaxed (char *ptr, int value)\n+{ /* { dg-warning \"lacks power8 support\" } */\n+  return __atomic_fetch_add (ptr, value, __ATOMIC_RELAXED);\n+}"}, {"sha": "0454aca053c955a09c305f9a6ab4fb7f3e4b6a63", "filename": "gcc/testsuite/gcc.target/powerpc/pr78056-5.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/598bd6878aedc11ddffc0cc3908bfdaf86e212e8/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr78056-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/598bd6878aedc11ddffc0cc3908bfdaf86e212e8/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr78056-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr78056-5.c?ref=598bd6878aedc11ddffc0cc3908bfdaf86e212e8", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power5\" } } */\n+/* powerpc_vsx_ok represents power7 */\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+/* { dg-skip-if \"\" { powerpc*-*-aix* } } */\n+/* { dg-options \"-mcpu=power5\" } */\n+\n+/* Though the command line specifies power5 target, this function is\n+   to support power7.  */\n+__attribute__((target(\"cpu=power7\")))\n+int\n+div_we (int a, int b)\n+{\n+  return __builtin_divwe (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"divwe \"   1 } } */"}, {"sha": "667aa2e2a41fcc7930481bb2b70c748fa1786449", "filename": "gcc/testsuite/gcc.target/powerpc/pr78056-6.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/598bd6878aedc11ddffc0cc3908bfdaf86e212e8/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr78056-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/598bd6878aedc11ddffc0cc3908bfdaf86e212e8/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr78056-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr78056-6.c?ref=598bd6878aedc11ddffc0cc3908bfdaf86e212e8", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power6\" } } */\n+/* dfp_hw represents power 6 */\n+/* { dg-require-effective-target dfp_hw } */\n+/* powerpc_vsx_ok represents power7 */\n+/* { dg-skip-if \"\" { powerpc_vsx_ok } } */\n+/* { dg-skip-if \"\" { powerpc*-*-aix* } } */\n+/* { dg-options \"-mcpu=power6\" } */\n+\n+/* This test should succeed on both 32- and 64-bit configurations.  */\n+#include <altivec.h>\n+\n+/* This test follows the pattern of pr78056-2.c, which has been\n+ * exercised with binutils 2.25.  This test, however, has not\n+ * been exercised because the author of the test does not have access\n+ * to a development environment that succesfully bootstraps gcc\n+ * while at the same lacking assembler support for power 7.  */\n+\n+/* Though the command line specifies power6 target, this function is\n+   to support power7.  */\n+__attribute__((target(\"cpu=power7\")))\n+int\n+div_we (int a, int b)\n+{ /* { dg-warning \"lacks power7 support\" } */\n+  return __builtin_divwe (a, b); /* { dg-warning \"implicit declaration\" } */\n+}"}, {"sha": "24d91197002b491f7fcdd0777167580cf064b6b6", "filename": "gcc/testsuite/gcc.target/powerpc/pr78056-7.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/598bd6878aedc11ddffc0cc3908bfdaf86e212e8/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr78056-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/598bd6878aedc11ddffc0cc3908bfdaf86e212e8/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr78056-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr78056-7.c?ref=598bd6878aedc11ddffc0cc3908bfdaf86e212e8", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power5\" } } */\n+/* dfp_hw represents power 6 */\n+/* { dg-require-effective-target dfp_hw } */\n+/* { dg-skip-if \"\" { powerpc*-*-aix* } } */\n+/* { dg-options \"-mcpu=power5\" } */\n+\n+/* Though the command line specifies power5 target, this function is\n+   to support power6.  */\n+__attribute__((target(\"cpu=power6\")))\n+double power6 (double a, double b)\n+{\n+  return __builtin_copysign (a, b);\n+}\n+/* { dg-final { scan-assembler-times \"fcpsgn\" 1 } } */"}, {"sha": "6322e415badfe8551e151d6a5a5ea532fad7d9a4", "filename": "gcc/testsuite/gcc.target/powerpc/pr78056-8.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/598bd6878aedc11ddffc0cc3908bfdaf86e212e8/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr78056-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/598bd6878aedc11ddffc0cc3908bfdaf86e212e8/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr78056-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr78056-8.c?ref=598bd6878aedc11ddffc0cc3908bfdaf86e212e8", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power5\" } } */\n+\n+/* powerpc_popcntb_ok represents support for power 5.  */\n+/* { dg-require-effective-target powerpc_popcntb_ok } */\n+/* dfp_hw represents support for power 6.  */\n+/* { dg-skip-if \"\" { dfp_hw } } */\n+/* { dg-skip-if \"\" { powerpc*-*-aix* } } */\n+/* { dg-options \"-mcpu=power5\" } */\n+\n+/* This test follows the pattern of pr78056-2.c, which has been\n+ * exercised with binutils 2.25.  This test, however, has not\n+ * been exercised because the author of the test does not have access\n+ * to a development environment that succesfully bootstraps gcc\n+ * while at the same lacking assembler support for power 6.  */\n+\n+/* This test should succeed on both 32- and 64-bit configurations.  */\n+/* Though the command line specifies power5 target, this function is\n+   to support power6. Expect an error message here because this target\n+   does not support power6.  */\n+__attribute__((target(\"cpu=power6\")))\n+/* fabs/fnabs/fsel */\n+double normal1 (double a, double b)\n+{ /* { dg-warning \"lacks power6 support\" } */\n+  return __builtin_copysign (a, b); /* { dg-warning \"implicit declaration\" } */\n+}"}, {"sha": "e4e015e721620e649b879aa398a59c550b5cbac8", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/598bd6878aedc11ddffc0cc3908bfdaf86e212e8/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/598bd6878aedc11ddffc0cc3908bfdaf86e212e8/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=598bd6878aedc11ddffc0cc3908bfdaf86e212e8", "patch": "@@ -2746,6 +2746,26 @@ proc check_effective_target_dfprt { } {\n     }]\n }\n \n+proc check_effective_target_powerpc_popcntb_ok { } {\n+    return [check_cached_effective_target powerpc_popcntb_ok {\n+\n+\t# Disable on Darwin.\n+\tif { [istarget powerpc-*-eabi] || [istarget powerpc*-*-eabispe] || [istarget *-*-darwin*]} {\n+\t    expr 0\n+\t} else {\n+\t    check_runtime_nocache powerpc_popcntb_ok {\n+\t\tvolatile int r;\n+\t\tvolatile int a = 0x12345678;\n+\t\tint main()\n+\t\t{\n+\t\t    asm volatile (\"popcntb %0,%1\" : \"=r\" (r) : \"r\" (a));\n+\t\t    return 0;\n+\t\t}\n+\t    } \"-mcpu=power5\"\n+\t}\n+    }]\n+}\n+\n # Return 1 if the target supports executing DFP hardware instructions,\n # 0 otherwise.  Cache the result.\n "}]}