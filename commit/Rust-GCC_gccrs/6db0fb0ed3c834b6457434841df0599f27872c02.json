{"sha": "6db0fb0ed3c834b6457434841df0599f27872c02", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmRiMGZiMGVkM2M4MzRiNjQ1NzQzNDg0MWRmMDU5OWYyNzg3MmMwMg==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-11-09T17:34:03Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-11-09T17:34:03Z"}, "message": "optabs.c (prepare_operand): Make it static.\n\n\t* optabs.c (prepare_operand): Make it static.\n\t* optabs.h: Remove the corresponding prototype.\n\nFrom-SVN: r90351", "tree": {"sha": "326178f1a34143463c75232a4218117c8a8baf50", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/326178f1a34143463c75232a4218117c8a8baf50"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6db0fb0ed3c834b6457434841df0599f27872c02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6db0fb0ed3c834b6457434841df0599f27872c02", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6db0fb0ed3c834b6457434841df0599f27872c02", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6db0fb0ed3c834b6457434841df0599f27872c02/comments", "author": null, "committer": null, "parents": [{"sha": "bf9a0db3c8ce0aeea0a5371219eebc9323066284", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf9a0db3c8ce0aeea0a5371219eebc9323066284", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf9a0db3c8ce0aeea0a5371219eebc9323066284"}], "stats": {"total": 10, "additions": 6, "deletions": 4}, "files": [{"sha": "157862d3fbb9b96c6fa674105f2e73cdd64b6374", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6db0fb0ed3c834b6457434841df0599f27872c02/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6db0fb0ed3c834b6457434841df0599f27872c02/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6db0fb0ed3c834b6457434841df0599f27872c02", "patch": "@@ -1,3 +1,8 @@\n+2004-11-09  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* optabs.c (prepare_operand): Make it static.\n+\t* optabs.h: Remove the corresponding prototype.\n+\n 2004-11-09  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* reload1.c (reloads_conflict, gen_reload): Make them static."}, {"sha": "cfed9040180c40f6e7b6971200b82429ec92585b", "filename": "gcc/optabs.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6db0fb0ed3c834b6457434841df0599f27872c02/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6db0fb0ed3c834b6457434841df0599f27872c02/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=6db0fb0ed3c834b6457434841df0599f27872c02", "patch": "@@ -3197,7 +3197,7 @@ prepare_cmp_insn (rtx *px, rtx *py, enum rtx_code *pcomparison, rtx size,\n    WIDER_MODE (UNSIGNEDP determines whether it is an unsigned conversion), and\n    that it is accepted by the operand predicate.  Return the new value.  */\n \n-rtx\n+static rtx\n prepare_operand (int icode, rtx x, int opnum, enum machine_mode mode,\n \t\t enum machine_mode wider_mode, int unsignedp)\n {"}, {"sha": "09afccb5fca796c081f29b0718153f3d9a83ee02", "filename": "gcc/optabs.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6db0fb0ed3c834b6457434841df0599f27872c02/gcc%2Foptabs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6db0fb0ed3c834b6457434841df0599f27872c02/gcc%2Foptabs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.h?ref=6db0fb0ed3c834b6457434841df0599f27872c02", "patch": "@@ -477,9 +477,6 @@ extern optab optab_for_tree_code (enum tree_code, tree);\n extern int can_compare_p (enum rtx_code, enum machine_mode,\n \t\t\t  enum can_compare_purpose);\n \n-extern rtx prepare_operand (int, rtx, int, enum machine_mode,\n-\t\t\t    enum machine_mode, int);\n-\n /* Return the INSN_CODE to use for an extend operation.  */\n extern enum insn_code can_extend_p (enum machine_mode, enum machine_mode, int);\n "}]}