{"sha": "b48972129f88f590aea38bf2617649c61a8424c7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjQ4OTcyMTI5Zjg4ZjU5MGFlYTM4YmYyNjE3NjQ5YzYxYTg0MjRjNw==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2014-06-21T02:39:49Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2014-06-21T02:39:49Z"}, "message": "localalias.c: New testcase.\n\n\n\t* gcc.dg/localalias.c: New testcase.\n\t* gcc.dg/localalias-2.c: New testcase.\n\t* gcc.dg/globalalias.c: New testcase.\n\t* gcc.dg/globalalias-2.c: New testcase.\n\t* ipa-visibility.c (function_and_variable_visibility): Disable\n\ttemporarily local aliases for some targets.\n\nFrom-SVN: r211864", "tree": {"sha": "8ba8fcd6632c9c6760ff6d8527c1b70179fb50b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ba8fcd6632c9c6760ff6d8527c1b70179fb50b7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b48972129f88f590aea38bf2617649c61a8424c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b48972129f88f590aea38bf2617649c61a8424c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b48972129f88f590aea38bf2617649c61a8424c7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b48972129f88f590aea38bf2617649c61a8424c7/comments", "author": null, "committer": null, "parents": [{"sha": "d9ff14ea9b455d7a85ff414724ce6a8fa89b8fc3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9ff14ea9b455d7a85ff414724ce6a8fa89b8fc3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9ff14ea9b455d7a85ff414724ce6a8fa89b8fc3"}], "stats": {"total": 141, "additions": 140, "deletions": 1}, "files": [{"sha": "3a52961fecb75de60088622149c8e1f712b6768d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b48972129f88f590aea38bf2617649c61a8424c7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b48972129f88f590aea38bf2617649c61a8424c7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b48972129f88f590aea38bf2617649c61a8424c7", "patch": "@@ -1,3 +1,8 @@\n+2014-06-20  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* ipa-visibility.c (function_and_variable_visibility): Disable\n+\ttemporarily local aliases for some targets.\n+\n 2014-06-20  Marek Polacek  <polacek@redhat.com>\n \n \t* asan.c (pass_sanopt::execute): Handle IFN_UBSAN_BOUNDS."}, {"sha": "9e4d8c38f4b62edbeae7ee6cb040dccaeae17760", "filename": "gcc/ipa-visibility.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b48972129f88f590aea38bf2617649c61a8424c7/gcc%2Fipa-visibility.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b48972129f88f590aea38bf2617649c61a8424c7/gcc%2Fipa-visibility.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-visibility.c?ref=b48972129f88f590aea38bf2617649c61a8424c7", "patch": "@@ -566,7 +566,11 @@ function_and_variable_visibility (bool whole_program)\n \t cheaper and enable more optimization.\n \n \t TODO: We can also update virtual tables.  */\n-      if (node->callers && can_replace_by_local_alias (node))\n+      if (node->callers \n+          /* FIXME: currently this optimization breaks on AIX.  Disable it for targets\n+             without comdat support for now.  */\n+\t  && SUPPORTS_ONE_ONLY\n+\t  && can_replace_by_local_alias (node))\n \t{\n \t  struct cgraph_node *alias = cgraph (symtab_nonoverwritable_alias (node));\n "}, {"sha": "d1a798a231091d87b45529403b887ff5eaabc626", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b48972129f88f590aea38bf2617649c61a8424c7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b48972129f88f590aea38bf2617649c61a8424c7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b48972129f88f590aea38bf2617649c61a8424c7", "patch": "@@ -1,3 +1,10 @@\n+2014-06-20  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* gcc.dg/localalias.c: New testcase.\n+\t* gcc.dg/localalias-2.c: New testcase.\n+\t* gcc.dg/globalalias.c: New testcase.\n+\t* gcc.dg/globalalias-2.c: New testcase.\n+\n 2014-06-20  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gcc.target/arm/lto/lto.exp: Exit immediately if not arm*-*-* target."}, {"sha": "213fea6e4f73cde2c84c95ec465e88402f9ddfbc", "filename": "gcc/testsuite/gcc.dg/globalalias-2.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b48972129f88f590aea38bf2617649c61a8424c7/gcc%2Ftestsuite%2Fgcc.dg%2Fglobalalias-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b48972129f88f590aea38bf2617649c61a8424c7/gcc%2Ftestsuite%2Fgcc.dg%2Fglobalalias-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fglobalalias-2.c?ref=b48972129f88f590aea38bf2617649c61a8424c7", "patch": "@@ -0,0 +1,20 @@\n+int test2count;\n+extern void abort (void);\n+static\n+void test(void)\n+{\n+  test2count++;\n+}\n+__attribute__ ((weak,noinline))\n+__attribute ((alias(\"test\")))\n+void test2(void);\n+\n+void tt() \n+{\n+  int prev = test2count;\n+  /* This call must bind locally.  */\n+  test();\n+  if (test2count == prev)\n+    abort();\n+  test2();\n+ }"}, {"sha": "eaca71311ab9283fcd80f7d9c7ac995dbdcbde97", "filename": "gcc/testsuite/gcc.dg/globalalias.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b48972129f88f590aea38bf2617649c61a8424c7/gcc%2Ftestsuite%2Fgcc.dg%2Fglobalalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b48972129f88f590aea38bf2617649c61a8424c7/gcc%2Ftestsuite%2Fgcc.dg%2Fglobalalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fglobalalias.c?ref=b48972129f88f590aea38bf2617649c61a8424c7", "patch": "@@ -0,0 +1,42 @@\n+/* This test checks that local aliases behave sanely.  This is necessary for code correctness\n+   of aliases introduced by ipa-visibility pass.\n+\n+   This test expose weird behaviour of AIX's .set pseudo-op where the global symbol is created,\n+   but all uses of the alias are syntactically replaced by uses of the target.  This means that\n+   both counters are increased to 2.  */\n+\n+/* { dg-do run }\n+   { dg-options \"-O2\" } \n+   { dg-require-alias \"\" }\n+   { dg-xfail-if \"\" { powerpc-ibm-aix* } { \"*\" } { \"\" } } \n+   { dg-additional-sources \"globalalias-2.c\" } */\n+extern int test2count;\n+extern void abort (void);\n+int testcount;\n+static\n+void test(void)\n+{\n+  testcount++;\n+}\n+__attribute__ ((weak,noinline))\n+__attribute ((alias(\"test\")))\n+void test2(void);\n+\n+void main()\n+{\n+  test();\n+  /* This call must bind locally.  */\n+  if (!testcount)\n+    abort ();\n+  test2();\n+  /* Depending on linker choice, this one may bind locally\n+     or to the other unit.  */\n+  if (!testcount && !test2count)\n+    abort();\n+  tt();\n+\n+  if ((testcount != 1 || test2count != 3)\n+      && (testcount != 3 || test2count != 1))\n+    abort ();\n+  return 0;\n+}"}, {"sha": "43d59e4d4ed2b0eea2de56197c6a82f8cd105579", "filename": "gcc/testsuite/gcc.dg/localalias-2.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b48972129f88f590aea38bf2617649c61a8424c7/gcc%2Ftestsuite%2Fgcc.dg%2Flocalalias-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b48972129f88f590aea38bf2617649c61a8424c7/gcc%2Ftestsuite%2Fgcc.dg%2Flocalalias-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flocalalias-2.c?ref=b48972129f88f590aea38bf2617649c61a8424c7", "patch": "@@ -0,0 +1,19 @@\n+extern void abort (void);\n+int test2count;\n+__attribute__ ((weak,noinline))\n+void test(void)\n+{\n+  test2count++;\n+}\n+__attribute ((alias(\"test\")))\n+static void test2(void);\n+\n+void tt() \n+{\n+  int prev = test2count;\n+  /* This call must bind locally.  */\n+  test2();\n+  if (test2count == prev)\n+    abort();\n+  test();\n+ }"}, {"sha": "3391c3ac5640eb9699838d902b8a52bc45fee711", "filename": "gcc/testsuite/gcc.dg/localalias.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b48972129f88f590aea38bf2617649c61a8424c7/gcc%2Ftestsuite%2Fgcc.dg%2Flocalalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b48972129f88f590aea38bf2617649c61a8424c7/gcc%2Ftestsuite%2Fgcc.dg%2Flocalalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flocalalias.c?ref=b48972129f88f590aea38bf2617649c61a8424c7", "patch": "@@ -0,0 +1,42 @@\n+/* This test checks that local aliases behave sanely.  This is necessary for code correctness\n+   of aliases introduced by ipa-visibility pass.\n+\n+   If this test fails either aliases needs to be disabled on given target on aliases with\n+   proper semantic needs to be implemented.  This is problem with e.g. AIX .set pseudo-op\n+   that implementes alias syntactically (by substituting in assembler) rather as alternative\n+   symbol defined on a target's location.  */\n+\n+/* { dg-do run }\n+   { dg-options \"-Wstrict-aliasing=2 -fstrict-aliasing\" } \n+   { dg-require-alias \"\" }\n+   { dg-xfail-if \"\" { powerpc-ibm-aix* } { \"*\" } { \"\" } } \n+   { dg-additional-sources \"localalias-2.c\" } */\n+extern void abort (void);\n+extern int test2count;\n+int testcount;\n+__attribute__ ((weak,noinline))\n+void test(void)\n+{\n+  testcount++;\n+}\n+__attribute ((alias(\"test\")))\n+static void test2(void);\n+\n+void main()\n+{\n+  test2();\n+  /* This call must bind locally.  */\n+  if (!testcount)\n+    abort ();\n+  test();\n+  /* Depending on linker choice, this one may bind locally\n+     or to the other unit.  */\n+  if (!testcount && !test2count)\n+    abort();\n+  tt();\n+\n+  if ((testcount != 1 || test2count != 3)\n+      && (testcount != 3 || test2count != 1))\n+    abort ();\n+  reutrn 0;\n+}"}]}