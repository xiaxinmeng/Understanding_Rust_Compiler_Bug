{"sha": "d9ef7b974555fe62f3e93835720edde6ff889ac5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDllZjdiOTc0NTU1ZmU2MmYzZTkzODM1NzIwZWRkZTZmZjg4OWFjNQ==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2019-08-19T08:35:40Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-08-19T08:35:40Z"}, "message": "[Ada] Representation clause for derived enumeration type is mishandled\n\nThis patch fixes an old-standing problem with premature freezing. When a\nderived type declaration includes a constraint, we generate a subtype\ndeclaration of an anonymous base type, with the constraint given in the\noriginal type declaration, Conceptually, the bounds are converted to the\nnew base type, and this conversion freezes (prematurely) that base type,\nwhen the bounds are simply literals.  As a result, a representation\nclause for the derived type is then rejected or ignared. This procedure\nrecognizes the simple case of literal bounds in derived enumeration type\ndeclarations, which allows us to indicate that the conversions are not\nfreeze points, and the subsequent representation clause can be accepted.\n\n2019-08-19  Ed Schonberg  <schonberg@adacore.com>\n\ngcc/ada/\n\n\t* sem_ch3.adb (Derived_Enumeration_Type): Do no freeze anonymous\n\tbase type if the bounds in the derived type declaration are\n\tliterals of the type.\n\ngcc/testsuite/\n\n\t* gnat.dg/rep_clause9.adb: New testcase.\n\nFrom-SVN: r274641", "tree": {"sha": "3eb2f1ffd416c81140e3d463688c9d510657cfbd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3eb2f1ffd416c81140e3d463688c9d510657cfbd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d9ef7b974555fe62f3e93835720edde6ff889ac5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9ef7b974555fe62f3e93835720edde6ff889ac5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9ef7b974555fe62f3e93835720edde6ff889ac5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9ef7b974555fe62f3e93835720edde6ff889ac5/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c811dd91e184db204073d04c28ed107888b39518", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c811dd91e184db204073d04c28ed107888b39518", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c811dd91e184db204073d04c28ed107888b39518"}], "stats": {"total": 58, "additions": 57, "deletions": 1}, "files": [{"sha": "78e17437b9a3784d4cffbc385716ef1fc917edcf", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9ef7b974555fe62f3e93835720edde6ff889ac5/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9ef7b974555fe62f3e93835720edde6ff889ac5/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=d9ef7b974555fe62f3e93835720edde6ff889ac5", "patch": "@@ -1,3 +1,9 @@\n+2019-08-19  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch3.adb (Derived_Enumeration_Type): Do no freeze anonymous\n+\tbase type if the bounds in the derived type declaration are\n+\tliterals of the type.\n+\n 2019-08-19  Yannick Moy  <moy@adacore.com>\n \n \t* sem_res.adb (Resolve_Call): Check non-aliasing rules before"}, {"sha": "1b4c42d33a321228f1f6b63ce74883f421ad13a6", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9ef7b974555fe62f3e93835720edde6ff889ac5/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9ef7b974555fe62f3e93835720edde6ff889ac5/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=d9ef7b974555fe62f3e93835720edde6ff889ac5", "patch": "@@ -7135,6 +7135,27 @@ package body Sem_Ch3 is\n       Parent_Type  : Entity_Id;\n       Derived_Type : Entity_Id)\n    is\n+      function Bound_Belongs_To_Type (B : Node_Id) return Boolean;\n+      --  When the type declaration includes a constraint, we generate\n+      --  a subtype declaration of an anonymous base type, with the constraint\n+      --  given in the original type declaration. Conceptually, the bounds\n+      --  are converted to the new base type, and this conversion freezes\n+      --  (prematurely) that base type, when the bounds are simply literals.\n+      --  As a result, a representation clause for the derived type is then\n+      --  rejected or ignored. This procedure recognizes the simple case of\n+      --  literal bounds, which allows us to indicate that the conversions\n+      --  are not freeze points, and the subsequent representation clause\n+      --  can be accepted.\n+      --  A similar approach might be used to resolve the long-standing\n+      --  problem of premature freezing of derived numeric types ???\n+\n+      function Bound_Belongs_To_Type (B : Node_Id) return Boolean is\n+      begin\n+         return Nkind (B) = N_Type_Conversion\n+           and then Is_Entity_Name (Expression (B))\n+           and then Ekind (Entity (Expression (B))) = E_Enumeration_Literal;\n+      end Bound_Belongs_To_Type;\n+\n       Loc           : constant Source_Ptr := Sloc (N);\n       Def           : constant Node_Id    := Type_Definition (N);\n       Indic         : constant Node_Id    := Subtype_Indication (Def);\n@@ -7350,7 +7371,9 @@ package body Sem_Ch3 is\n          --  However, if the type inherits predicates the expressions will\n          --  be elaborated earlier and must freeze.\n \n-         if Nkind (Indic) /= N_Subtype_Indication\n+         if (Nkind (Indic) /= N_Subtype_Indication\n+           or else\n+             (Bound_Belongs_To_Type (Lo) and then Bound_Belongs_To_Type (Hi)))\n            and then not Has_Predicates (Derived_Type)\n          then\n             Set_Must_Not_Freeze (Lo);"}, {"sha": "e3b30d27525074647b3e24c5abbfad33c5c947aa", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9ef7b974555fe62f3e93835720edde6ff889ac5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9ef7b974555fe62f3e93835720edde6ff889ac5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d9ef7b974555fe62f3e93835720edde6ff889ac5", "patch": "@@ -1,3 +1,7 @@\n+2019-08-19  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* gnat.dg/rep_clause9.adb: New testcase.\n+\n 2019-08-19  Olivier Hainque  <hainque@adacore.com>\n \n \t* gnat.dg/openacc1.adb: New testcase."}, {"sha": "e7a350e76e4b976d460a04138fcde83d3bd37e53", "filename": "gcc/testsuite/gnat.dg/rep_clause9.adb", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9ef7b974555fe62f3e93835720edde6ff889ac5/gcc%2Ftestsuite%2Fgnat.dg%2Frep_clause9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9ef7b974555fe62f3e93835720edde6ff889ac5/gcc%2Ftestsuite%2Fgnat.dg%2Frep_clause9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Frep_clause9.adb?ref=d9ef7b974555fe62f3e93835720edde6ff889ac5", "patch": "@@ -0,0 +1,23 @@\n+--  { dg-do run }\n+\n+procedure Rep_Clause9 is\n+\n+   type Day_Of_Week\n+      is (Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday);\n+\n+   type New_Day_Of_Week is new Day_Of_Week  range Monday .. Friday;\n+   for New_Day_Of_Week use\n+      (Sunday => -4, Monday => -2, Tuesday => 1, Wednesday => 100,\n+       Thursday => 1000, Friday => 10000, Saturday => 10001);\n+\n+   V1 : New_Day_Of_Week;\n+\n+begin\n+   if Integer'Image(New_Day_Of_Week'Pos(Monday)) /= \" 1\" then\n+      raise Program_Error;\n+   end if;\n+   V1 := Monday;\n+   if Integer'Image(New_Day_Of_Week'Pos(V1)) /= \" 1\" then\n+      raise Program_Error;\n+   end if;\n+end;"}]}