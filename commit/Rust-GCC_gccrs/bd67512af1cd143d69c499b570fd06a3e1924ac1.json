{"sha": "bd67512af1cd143d69c499b570fd06a3e1924ac1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmQ2NzUxMmFmMWNkMTQzZDY5YzQ5OWI1NzBmZDA2YTNlMTkyNGFjMQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2009-05-03T16:13:59Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2009-05-03T16:13:59Z"}, "message": "acinclude.m4 ([GLIBCXX_ENABLE_ATOMIC_BUILTINS]): Do link tests when possible.\n\n2009-05-03  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* acinclude.m4 ([GLIBCXX_ENABLE_ATOMIC_BUILTINS]): Do link tests when\n\tpossible.\n\t* configure: Regenerate.\n\nFrom-SVN: r147076", "tree": {"sha": "d4efc2f18c07f0069a7d9c025bc591078d4a1911", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d4efc2f18c07f0069a7d9c025bc591078d4a1911"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bd67512af1cd143d69c499b570fd06a3e1924ac1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd67512af1cd143d69c499b570fd06a3e1924ac1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd67512af1cd143d69c499b570fd06a3e1924ac1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd67512af1cd143d69c499b570fd06a3e1924ac1/comments", "author": null, "committer": null, "parents": [{"sha": "fa5da7dee34affe9a2bbf01350845b803e493e0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa5da7dee34affe9a2bbf01350845b803e493e0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa5da7dee34affe9a2bbf01350845b803e493e0c"}], "stats": {"total": 509, "additions": 468, "deletions": 41}, "files": [{"sha": "f067dc17f5c2882c29250291dbf0e8221cfd59fc", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd67512af1cd143d69c499b570fd06a3e1924ac1/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd67512af1cd143d69c499b570fd06a3e1924ac1/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=bd67512af1cd143d69c499b570fd06a3e1924ac1", "patch": "@@ -1,3 +1,9 @@\n+2009-05-03  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* acinclude.m4 ([GLIBCXX_ENABLE_ATOMIC_BUILTINS]): Do link tests when\n+\tpossible.\n+\t* configure: Regenerate.\n+\n 2009-05-02  Jan Hubicka  <jh@suse.cz>\n \n \t* include/tr1_impl/functional_hash.h (explicit specializations of ()"}, {"sha": "2d046e94f04b7a311f19253a67be28e105b040bd", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 116, "deletions": 18, "changes": 134, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd67512af1cd143d69c499b570fd06a3e1924ac1/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd67512af1cd143d69c499b570fd06a3e1924ac1/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=bd67512af1cd143d69c499b570fd06a3e1924ac1", "patch": "@@ -2429,8 +2429,7 @@ dnl is intended to be an all-or-nothing switch, so all the atomic operations\n dnl that are used should be checked.\n dnl\n dnl Note:\n-dnl libgomp and libgfortran do this with a link test, instead of an asm test.\n-dnl see: CHECK_SYNC_FETCH_AND_ADD\n+dnl libgomp and libgfortran use a link test, see CHECK_SYNC_FETCH_AND_ADD.\n dnl\n dnl Defines:\n dnl  _GLIBCXX_ATOMIC_BUILTINS_1 \n@@ -2442,12 +2441,110 @@ AC_DEFUN([GLIBCXX_ENABLE_ATOMIC_BUILTINS], [\n   AC_LANG_SAVE\n   AC_LANG_CPLUSPLUS\n   old_CXXFLAGS=\"$CXXFLAGS\"\n-  \n+\n+  # Do link tests if possible, instead asm tests.\n+  if test x$gcc_no_link != xyes; then  \n+\n+  # Can do link tests.\n+\n+  CXXFLAGS=\"$CXXFLAGS -fno-exceptions\"\n+\n+  AC_MSG_CHECKING([for atomic builtins for bool])\n+  AC_CACHE_VAL(glibcxx_cv_atomic_bool, [\n+    AC_TRY_LINK(\n+      [ ],\n+      [typedef bool atomic_type;\n+       atomic_type c1;\n+       atomic_type c2;\n+       const atomic_type c3(0);\n+       __sync_fetch_and_add(&c1, c2);\n+       __sync_val_compare_and_swap(&c1, c3, c2);\n+       __sync_lock_test_and_set(&c1, c3);\n+       __sync_lock_release(&c1);\n+       __sync_synchronize();],\n+      [glibcxx_cv_atomic_bool=yes],\n+      [glibcxx_cv_atomic_bool=no])\n+  ])    \n+  if test $glibcxx_cv_atomic_bool = yes; then\n+    AC_DEFINE(_GLIBCXX_ATOMIC_BUILTINS_1, 1,\n+      [Define if builtin atomic operations for bool are supported on this host.])\n+  fi\n+  AC_MSG_RESULT($glibcxx_cv_atomic_bool)\n+\n+  AC_MSG_CHECKING([for atomic builtins for short])\n+  AC_CACHE_VAL(glibcxx_cv_atomic_short, [\n+    AC_TRY_LINK(\n+      [ ],\n+      [typedef short atomic_type;\n+       atomic_type c1;\n+       atomic_type c2;\n+       const atomic_type c3(0);\n+       __sync_fetch_and_add(&c1, c2);\n+       __sync_val_compare_and_swap(&c1, c3, c2);\n+       __sync_lock_test_and_set(&c1, c3);\n+       __sync_lock_release(&c1);\n+       __sync_synchronize();],\n+      [glibcxx_cv_atomic_short=yes],\n+      [glibcxx_cv_atomic_short=no])\n+  ])    \n+  if test $glibcxx_cv_atomic_short = yes; then\n+    AC_DEFINE(_GLIBCXX_ATOMIC_BUILTINS_2, 1,\n+      [Define if builtin atomic operations for short are supported on this host.])\n+  fi\n+  AC_MSG_RESULT($glibcxx_cv_atomic_short)\n+\n+  AC_MSG_CHECKING([for atomic builtins for int])\n+  AC_CACHE_VAL(glibcxx_cv_atomic_int, [\n+    AC_TRY_LINK(\n+      [ ],\n+      [typedef int atomic_type;\n+       atomic_type c1;\n+       atomic_type c2;\n+       const atomic_type c3(0);\n+       __sync_fetch_and_add(&c1, c2);\n+       __sync_val_compare_and_swap(&c1, c3, c2);\n+       __sync_lock_test_and_set(&c1, c3);\n+       __sync_lock_release(&c1);\n+       __sync_synchronize();],\n+      [glibcxx_cv_atomic_int=yes],\n+      [glibcxx_cv_atomic_int=no])\n+  ])    \n+  if test $glibcxx_cv_atomic_int = yes; then\n+    AC_DEFINE(_GLIBCXX_ATOMIC_BUILTINS_4, 1,\n+      [Define if builtin atomic operations for int are supported on this host.])\n+  fi\n+  AC_MSG_RESULT($glibcxx_cv_atomic_int)\n+\n+  AC_MSG_CHECKING([for atomic builtins for long long])\n+  AC_CACHE_VAL(glibcxx_cv_atomic_long_long, [\n+    AC_TRY_LINK(\n+      [ ],\n+      [typedef long long atomic_type;\n+       atomic_type c1;\n+       atomic_type c2;\n+       const atomic_type c3(0);\n+       __sync_fetch_and_add(&c1, c2);\n+       __sync_val_compare_and_swap(&c1, c3, c2);\n+       __sync_lock_test_and_set(&c1, c3);\n+       __sync_lock_release(&c1);\n+       __sync_synchronize();],\n+      [glibcxx_cv_atomic_long_long=yes],\n+      [glibcxx_cv_atomic_long_long=no])\n+  ])    \n+  if test $glibcxx_cv_atomic_long_long = yes; then\n+    AC_DEFINE(_GLIBCXX_ATOMIC_BUILTINS_8, 1,\n+      [Define if builtin atomic operations for long long are supported on this host.])\n+  fi\n+  AC_MSG_RESULT($glibcxx_cv_atomic_long_long)\n+\n+  else\n+\n+  # Do asm tests.\n+\n   # Compile unoptimized.\n   CXXFLAGS='-O0 -S'\n \n-  # Fake what AC_TRY_COMPILE does, without linking as this is\n-  # unnecessary for a builtins test.\n+  # Fake what AC_TRY_COMPILE does.\n \n     cat > conftest.$ac_ext << EOF\n [#]line __oline__ \"configure\"\n@@ -2469,14 +2566,14 @@ EOF\n     AC_MSG_CHECKING([for atomic builtins for bool])\n     if AC_TRY_EVAL(ac_compile); then\n       if grep __sync_ conftest.s >/dev/null 2>&1 ; then\n-        enable_atomic_builtinsb=no\n+        glibcxx_cv_atomic_bool=no\n       else\n       AC_DEFINE(_GLIBCXX_ATOMIC_BUILTINS_1, 1,\n       [Define if builtin atomic operations for bool are supported on this host.])\n-        enable_atomic_builtinsb=yes\n+        glibcxx_cv_atomic_bool=yes\n       fi\n     fi\n-    AC_MSG_RESULT($enable_atomic_builtinsb)\n+    AC_MSG_RESULT($glibcxx_cv_atomic_bool)\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n@@ -2499,14 +2596,14 @@ EOF\n     AC_MSG_CHECKING([for atomic builtins for short])\n     if AC_TRY_EVAL(ac_compile); then\n       if grep __sync_ conftest.s >/dev/null 2>&1 ; then\n-        enable_atomic_builtinss=no\n+        glibcxx_cv_atomic_short=no\n       else\n       AC_DEFINE(_GLIBCXX_ATOMIC_BUILTINS_2, 1,\n       [Define if builtin atomic operations for short are supported on this host.])\n-        enable_atomic_builtinss=yes\n+        glibcxx_cv_atomic_short=yes\n       fi\n     fi\n-    AC_MSG_RESULT($enable_atomic_builtinss)\n+    AC_MSG_RESULT($glibcxx_cv_atomic_short)\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n@@ -2530,14 +2627,14 @@ EOF\n     AC_MSG_CHECKING([for atomic builtins for int])\n     if AC_TRY_EVAL(ac_compile); then\n       if grep __sync_ conftest.s >/dev/null 2>&1 ; then\n-        enable_atomic_builtinsi=no\n+        glibcxx_cv_atomic_int=no\n       else\n       AC_DEFINE(_GLIBCXX_ATOMIC_BUILTINS_4, 1,\n         [Define if builtin atomic operations for int are supported on this host.])\n-        enable_atomic_builtinsi=yes\n+        glibcxx_cv_atomic_int=yes\n       fi\n     fi\n-    AC_MSG_RESULT($enable_atomic_builtinsi)\n+    AC_MSG_RESULT($glibcxx_cv_atomic_int)\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n@@ -2560,22 +2657,23 @@ EOF\n     AC_MSG_CHECKING([for atomic builtins for long long])\n     if AC_TRY_EVAL(ac_compile); then\n       if grep __sync_ conftest.s >/dev/null 2>&1 ; then\n-        enable_atomic_builtinsll=no\n+        glibcxx_cv_atomic_long_long=no\n       else\n       AC_DEFINE(_GLIBCXX_ATOMIC_BUILTINS_8, 1,\n       [Define if builtin atomic operations for long long are supported on this host.])\n-        enable_atomic_builtinsll=yes\n+        glibcxx_cv_atomic_long_long=yes\n       fi\n     fi\n-    AC_MSG_RESULT($enable_atomic_builtinsll)\n+    AC_MSG_RESULT($glibcxx_cv_atomic_long_long)\n     rm -f conftest*\n \n+  fi\n \n   CXXFLAGS=\"$old_CXXFLAGS\"\n   AC_LANG_RESTORE\n \n   # Set atomicity_dir to builtins if either of above tests pass.\n-  if test $enable_atomic_builtinsi = yes || test $enable_atomic_builtinsb = yes ; then\n+  if test $glibcxx_cv_atomic_int = yes || test $glibcxx_cv_atomic_bool = yes ; then\n     atomicity_dir=cpu/generic/atomicity_builtins\n   fi\n "}, {"sha": "98429fb719b0f8a7391ced2f6015b11efcae53a6", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 346, "deletions": 23, "changes": 369, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd67512af1cd143d69c499b570fd06a3e1924ac1/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd67512af1cd143d69c499b570fd06a3e1924ac1/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=bd67512af1cd143d69c499b570fd06a3e1924ac1", "patch": "@@ -14757,14 +14757,336 @@ ac_compiler_gnu=$ac_cv_cxx_compiler_gnu\n \n   old_CXXFLAGS=\"$CXXFLAGS\"\n \n+  # Do link tests if possible, instead asm tests.\n+  if test x$gcc_no_link != xyes; then\n+\n+  # Can do link tests.\n+\n+  CXXFLAGS=\"$CXXFLAGS -fno-exceptions\"\n+\n+  echo \"$as_me:$LINENO: checking for atomic builtins for bool\" >&5\n+echo $ECHO_N \"checking for atomic builtins for bool... $ECHO_C\" >&6\n+  if test \"${glibcxx_cv_atomic_bool+set}\" = set; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+\n+    if test x$gcc_no_link = xyes; then\n+  { { echo \"$as_me:$LINENO: error: Link tests are not allowed after GCC_NO_EXECUTABLES.\" >&5\n+echo \"$as_me: error: Link tests are not allowed after GCC_NO_EXECUTABLES.\" >&2;}\n+   { (exit 1); exit 1; }; }\n+fi\n+cat >conftest.$ac_ext <<_ACEOF\n+/* confdefs.h.  */\n+_ACEOF\n+cat confdefs.h >>conftest.$ac_ext\n+cat >>conftest.$ac_ext <<_ACEOF\n+/* end confdefs.h.  */\n+\n+int\n+main ()\n+{\n+typedef bool atomic_type;\n+       atomic_type c1;\n+       atomic_type c2;\n+       const atomic_type c3(0);\n+       __sync_fetch_and_add(&c1, c2);\n+       __sync_val_compare_and_swap(&c1, c3, c2);\n+       __sync_lock_test_and_set(&c1, c3);\n+       __sync_lock_release(&c1);\n+       __sync_synchronize();\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+rm -f conftest.$ac_objext conftest$ac_exeext\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_link\\\"\") >&5\n+  (eval $ac_link) 2>conftest.er1\n+  ac_status=$?\n+  grep -v '^ *+' conftest.er1 >conftest.err\n+  rm -f conftest.er1\n+  cat conftest.err >&5\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } &&\n+\t { ac_try='test -z \"$ac_cxx_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; } &&\n+\t { ac_try='test -s conftest$ac_exeext'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }; then\n+  glibcxx_cv_atomic_bool=yes\n+else\n+  echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+glibcxx_cv_atomic_bool=no\n+fi\n+rm -f conftest.err conftest.$ac_objext \\\n+      conftest$ac_exeext conftest.$ac_ext\n+\n+fi\n+\n+  if test $glibcxx_cv_atomic_bool = yes; then\n+\n+cat >>confdefs.h <<\\_ACEOF\n+#define _GLIBCXX_ATOMIC_BUILTINS_1 1\n+_ACEOF\n+\n+  fi\n+  echo \"$as_me:$LINENO: result: $glibcxx_cv_atomic_bool\" >&5\n+echo \"${ECHO_T}$glibcxx_cv_atomic_bool\" >&6\n+\n+  echo \"$as_me:$LINENO: checking for atomic builtins for short\" >&5\n+echo $ECHO_N \"checking for atomic builtins for short... $ECHO_C\" >&6\n+  if test \"${glibcxx_cv_atomic_short+set}\" = set; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+\n+    if test x$gcc_no_link = xyes; then\n+  { { echo \"$as_me:$LINENO: error: Link tests are not allowed after GCC_NO_EXECUTABLES.\" >&5\n+echo \"$as_me: error: Link tests are not allowed after GCC_NO_EXECUTABLES.\" >&2;}\n+   { (exit 1); exit 1; }; }\n+fi\n+cat >conftest.$ac_ext <<_ACEOF\n+/* confdefs.h.  */\n+_ACEOF\n+cat confdefs.h >>conftest.$ac_ext\n+cat >>conftest.$ac_ext <<_ACEOF\n+/* end confdefs.h.  */\n+\n+int\n+main ()\n+{\n+typedef short atomic_type;\n+       atomic_type c1;\n+       atomic_type c2;\n+       const atomic_type c3(0);\n+       __sync_fetch_and_add(&c1, c2);\n+       __sync_val_compare_and_swap(&c1, c3, c2);\n+       __sync_lock_test_and_set(&c1, c3);\n+       __sync_lock_release(&c1);\n+       __sync_synchronize();\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+rm -f conftest.$ac_objext conftest$ac_exeext\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_link\\\"\") >&5\n+  (eval $ac_link) 2>conftest.er1\n+  ac_status=$?\n+  grep -v '^ *+' conftest.er1 >conftest.err\n+  rm -f conftest.er1\n+  cat conftest.err >&5\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } &&\n+\t { ac_try='test -z \"$ac_cxx_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; } &&\n+\t { ac_try='test -s conftest$ac_exeext'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }; then\n+  glibcxx_cv_atomic_short=yes\n+else\n+  echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+glibcxx_cv_atomic_short=no\n+fi\n+rm -f conftest.err conftest.$ac_objext \\\n+      conftest$ac_exeext conftest.$ac_ext\n+\n+fi\n+\n+  if test $glibcxx_cv_atomic_short = yes; then\n+\n+cat >>confdefs.h <<\\_ACEOF\n+#define _GLIBCXX_ATOMIC_BUILTINS_2 1\n+_ACEOF\n+\n+  fi\n+  echo \"$as_me:$LINENO: result: $glibcxx_cv_atomic_short\" >&5\n+echo \"${ECHO_T}$glibcxx_cv_atomic_short\" >&6\n+\n+  echo \"$as_me:$LINENO: checking for atomic builtins for int\" >&5\n+echo $ECHO_N \"checking for atomic builtins for int... $ECHO_C\" >&6\n+  if test \"${glibcxx_cv_atomic_int+set}\" = set; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+\n+    if test x$gcc_no_link = xyes; then\n+  { { echo \"$as_me:$LINENO: error: Link tests are not allowed after GCC_NO_EXECUTABLES.\" >&5\n+echo \"$as_me: error: Link tests are not allowed after GCC_NO_EXECUTABLES.\" >&2;}\n+   { (exit 1); exit 1; }; }\n+fi\n+cat >conftest.$ac_ext <<_ACEOF\n+/* confdefs.h.  */\n+_ACEOF\n+cat confdefs.h >>conftest.$ac_ext\n+cat >>conftest.$ac_ext <<_ACEOF\n+/* end confdefs.h.  */\n+\n+int\n+main ()\n+{\n+typedef int atomic_type;\n+       atomic_type c1;\n+       atomic_type c2;\n+       const atomic_type c3(0);\n+       __sync_fetch_and_add(&c1, c2);\n+       __sync_val_compare_and_swap(&c1, c3, c2);\n+       __sync_lock_test_and_set(&c1, c3);\n+       __sync_lock_release(&c1);\n+       __sync_synchronize();\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+rm -f conftest.$ac_objext conftest$ac_exeext\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_link\\\"\") >&5\n+  (eval $ac_link) 2>conftest.er1\n+  ac_status=$?\n+  grep -v '^ *+' conftest.er1 >conftest.err\n+  rm -f conftest.er1\n+  cat conftest.err >&5\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } &&\n+\t { ac_try='test -z \"$ac_cxx_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; } &&\n+\t { ac_try='test -s conftest$ac_exeext'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }; then\n+  glibcxx_cv_atomic_int=yes\n+else\n+  echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+glibcxx_cv_atomic_int=no\n+fi\n+rm -f conftest.err conftest.$ac_objext \\\n+      conftest$ac_exeext conftest.$ac_ext\n+\n+fi\n+\n+  if test $glibcxx_cv_atomic_int = yes; then\n+\n+cat >>confdefs.h <<\\_ACEOF\n+#define _GLIBCXX_ATOMIC_BUILTINS_4 1\n+_ACEOF\n+\n+  fi\n+  echo \"$as_me:$LINENO: result: $glibcxx_cv_atomic_int\" >&5\n+echo \"${ECHO_T}$glibcxx_cv_atomic_int\" >&6\n+\n+  echo \"$as_me:$LINENO: checking for atomic builtins for long long\" >&5\n+echo $ECHO_N \"checking for atomic builtins for long long... $ECHO_C\" >&6\n+  if test \"${glibcxx_cv_atomic_long_long+set}\" = set; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+\n+    if test x$gcc_no_link = xyes; then\n+  { { echo \"$as_me:$LINENO: error: Link tests are not allowed after GCC_NO_EXECUTABLES.\" >&5\n+echo \"$as_me: error: Link tests are not allowed after GCC_NO_EXECUTABLES.\" >&2;}\n+   { (exit 1); exit 1; }; }\n+fi\n+cat >conftest.$ac_ext <<_ACEOF\n+/* confdefs.h.  */\n+_ACEOF\n+cat confdefs.h >>conftest.$ac_ext\n+cat >>conftest.$ac_ext <<_ACEOF\n+/* end confdefs.h.  */\n+\n+int\n+main ()\n+{\n+typedef long long atomic_type;\n+       atomic_type c1;\n+       atomic_type c2;\n+       const atomic_type c3(0);\n+       __sync_fetch_and_add(&c1, c2);\n+       __sync_val_compare_and_swap(&c1, c3, c2);\n+       __sync_lock_test_and_set(&c1, c3);\n+       __sync_lock_release(&c1);\n+       __sync_synchronize();\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+rm -f conftest.$ac_objext conftest$ac_exeext\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_link\\\"\") >&5\n+  (eval $ac_link) 2>conftest.er1\n+  ac_status=$?\n+  grep -v '^ *+' conftest.er1 >conftest.err\n+  rm -f conftest.er1\n+  cat conftest.err >&5\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } &&\n+\t { ac_try='test -z \"$ac_cxx_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; } &&\n+\t { ac_try='test -s conftest$ac_exeext'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }; then\n+  glibcxx_cv_atomic_long_long=yes\n+else\n+  echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+glibcxx_cv_atomic_long_long=no\n+fi\n+rm -f conftest.err conftest.$ac_objext \\\n+      conftest$ac_exeext conftest.$ac_ext\n+\n+fi\n+\n+  if test $glibcxx_cv_atomic_long_long = yes; then\n+\n+cat >>confdefs.h <<\\_ACEOF\n+#define _GLIBCXX_ATOMIC_BUILTINS_8 1\n+_ACEOF\n+\n+  fi\n+  echo \"$as_me:$LINENO: result: $glibcxx_cv_atomic_long_long\" >&5\n+echo \"${ECHO_T}$glibcxx_cv_atomic_long_long\" >&6\n+\n+  else\n+\n+  # Do asm tests.\n+\n   # Compile unoptimized.\n   CXXFLAGS='-O0 -S'\n \n-  # Fake what AC_TRY_COMPILE does, without linking as this is\n-  # unnecessary for a builtins test.\n+  # Fake what AC_TRY_COMPILE does.\n \n     cat > conftest.$ac_ext << EOF\n-#line 14767 \"configure\"\n+#line 15089 \"configure\"\n int main()\n {\n   typedef bool atomic_type;\n@@ -14788,22 +15110,22 @@ echo $ECHO_N \"checking for atomic builtins for bool... $ECHO_C\" >&6\n   echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n   (exit $ac_status); }; then\n       if grep __sync_ conftest.s >/dev/null 2>&1 ; then\n-        enable_atomic_builtinsb=no\n+        glibcxx_cv_atomic_bool=no\n       else\n \n cat >>confdefs.h <<\\_ACEOF\n #define _GLIBCXX_ATOMIC_BUILTINS_1 1\n _ACEOF\n \n-        enable_atomic_builtinsb=yes\n+        glibcxx_cv_atomic_bool=yes\n       fi\n     fi\n-    echo \"$as_me:$LINENO: result: $enable_atomic_builtinsb\" >&5\n-echo \"${ECHO_T}$enable_atomic_builtinsb\" >&6\n+    echo \"$as_me:$LINENO: result: $glibcxx_cv_atomic_bool\" >&5\n+echo \"${ECHO_T}$glibcxx_cv_atomic_bool\" >&6\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 14806 \"configure\"\n+#line 15128 \"configure\"\n int main()\n {\n   typedef short atomic_type;\n@@ -14827,22 +15149,22 @@ echo $ECHO_N \"checking for atomic builtins for short... $ECHO_C\" >&6\n   echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n   (exit $ac_status); }; then\n       if grep __sync_ conftest.s >/dev/null 2>&1 ; then\n-        enable_atomic_builtinss=no\n+        glibcxx_cv_atomic_short=no\n       else\n \n cat >>confdefs.h <<\\_ACEOF\n #define _GLIBCXX_ATOMIC_BUILTINS_2 1\n _ACEOF\n \n-        enable_atomic_builtinss=yes\n+        glibcxx_cv_atomic_short=yes\n       fi\n     fi\n-    echo \"$as_me:$LINENO: result: $enable_atomic_builtinss\" >&5\n-echo \"${ECHO_T}$enable_atomic_builtinss\" >&6\n+    echo \"$as_me:$LINENO: result: $glibcxx_cv_atomic_short\" >&5\n+echo \"${ECHO_T}$glibcxx_cv_atomic_short\" >&6\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 14845 \"configure\"\n+#line 15167 \"configure\"\n int main()\n {\n   // NB: _Atomic_word not necessarily int.\n@@ -14867,22 +15189,22 @@ echo $ECHO_N \"checking for atomic builtins for int... $ECHO_C\" >&6\n   echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n   (exit $ac_status); }; then\n       if grep __sync_ conftest.s >/dev/null 2>&1 ; then\n-        enable_atomic_builtinsi=no\n+        glibcxx_cv_atomic_int=no\n       else\n \n cat >>confdefs.h <<\\_ACEOF\n #define _GLIBCXX_ATOMIC_BUILTINS_4 1\n _ACEOF\n \n-        enable_atomic_builtinsi=yes\n+        glibcxx_cv_atomic_int=yes\n       fi\n     fi\n-    echo \"$as_me:$LINENO: result: $enable_atomic_builtinsi\" >&5\n-echo \"${ECHO_T}$enable_atomic_builtinsi\" >&6\n+    echo \"$as_me:$LINENO: result: $glibcxx_cv_atomic_int\" >&5\n+echo \"${ECHO_T}$glibcxx_cv_atomic_int\" >&6\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 14885 \"configure\"\n+#line 15207 \"configure\"\n int main()\n {\n   typedef long long atomic_type;\n@@ -14906,20 +15228,21 @@ echo $ECHO_N \"checking for atomic builtins for long long... $ECHO_C\" >&6\n   echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n   (exit $ac_status); }; then\n       if grep __sync_ conftest.s >/dev/null 2>&1 ; then\n-        enable_atomic_builtinsll=no\n+        glibcxx_cv_atomic_long_long=no\n       else\n \n cat >>confdefs.h <<\\_ACEOF\n #define _GLIBCXX_ATOMIC_BUILTINS_8 1\n _ACEOF\n \n-        enable_atomic_builtinsll=yes\n+        glibcxx_cv_atomic_long_long=yes\n       fi\n     fi\n-    echo \"$as_me:$LINENO: result: $enable_atomic_builtinsll\" >&5\n-echo \"${ECHO_T}$enable_atomic_builtinsll\" >&6\n+    echo \"$as_me:$LINENO: result: $glibcxx_cv_atomic_long_long\" >&5\n+echo \"${ECHO_T}$glibcxx_cv_atomic_long_long\" >&6\n     rm -f conftest*\n \n+  fi\n \n   CXXFLAGS=\"$old_CXXFLAGS\"\n   ac_ext=c\n@@ -14930,7 +15253,7 @@ ac_compiler_gnu=$ac_cv_c_compiler_gnu\n \n \n   # Set atomicity_dir to builtins if either of above tests pass.\n-  if test $enable_atomic_builtinsi = yes || test $enable_atomic_builtinsb = yes ; then\n+  if test $glibcxx_cv_atomic_int = yes || test $glibcxx_cv_atomic_bool = yes ; then\n     atomicity_dir=cpu/generic/atomicity_builtins\n   fi\n "}]}