{"sha": "951a07660948ce4c3b048dc7637f5738a9d9d288", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTUxYTA3NjYwOTQ4Y2U0YzNiMDQ4ZGM3NjM3ZjU3MzhhOWQ5ZDI4OA==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.co.uk", "date": "2002-06-27T06:01:58Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2002-06-27T06:01:58Z"}, "message": "cpphash.h (_cpp_set_trad_context): Remove.\n\n\t* cpphash.h (_cpp_set_trad_context): Remove.\n\t* cpplib.c (prepare_directive_trad): Do nothing for #define.\n\t(cpp_push_buffer, _cpp_pop_buffer): Don't call _cpp_set_trad_context.\n\t* cpptrad.c: Update comments.\n\t(_cpp_read_logical_line_trad): Let scan_logical_line handle\n\tupdating the current context.\n\t(scan_logical_line): Update the current context.\n\t(_cpp_create_trad_definition): Similarly.\n\t(_cpp_set_trad_context): Remove.\n\nFrom-SVN: r55022", "tree": {"sha": "b68bbff6125d07a1cae24355b3075fc5c636bea1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b68bbff6125d07a1cae24355b3075fc5c636bea1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/951a07660948ce4c3b048dc7637f5738a9d9d288", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/951a07660948ce4c3b048dc7637f5738a9d9d288", "html_url": "https://github.com/Rust-GCC/gccrs/commit/951a07660948ce4c3b048dc7637f5738a9d9d288", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/951a07660948ce4c3b048dc7637f5738a9d9d288/comments", "author": {"login": "neilb-xx", "id": 160762, "node_id": "MDQ6VXNlcjE2MDc2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/160762?v=4", "gravatar_id": "", "url": "https://api.github.com/users/neilb-xx", "html_url": "https://github.com/neilb-xx", "followers_url": "https://api.github.com/users/neilb-xx/followers", "following_url": "https://api.github.com/users/neilb-xx/following{/other_user}", "gists_url": "https://api.github.com/users/neilb-xx/gists{/gist_id}", "starred_url": "https://api.github.com/users/neilb-xx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/neilb-xx/subscriptions", "organizations_url": "https://api.github.com/users/neilb-xx/orgs", "repos_url": "https://api.github.com/users/neilb-xx/repos", "events_url": "https://api.github.com/users/neilb-xx/events{/privacy}", "received_events_url": "https://api.github.com/users/neilb-xx/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0647023885b52c9eda290f593432d245f1e30ce3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0647023885b52c9eda290f593432d245f1e30ce3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0647023885b52c9eda290f593432d245f1e30ce3"}], "stats": {"total": 101, "additions": 45, "deletions": 56}, "files": [{"sha": "8b4df3f1cc6e5068aa46d9098ca3d45335a27d69", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/951a07660948ce4c3b048dc7637f5738a9d9d288/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/951a07660948ce4c3b048dc7637f5738a9d9d288/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=951a07660948ce4c3b048dc7637f5738a9d9d288", "patch": "@@ -1,3 +1,15 @@\n+2002-06-27  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* cpphash.h (_cpp_set_trad_context): Remove.\n+\t* cpplib.c (prepare_directive_trad): Do nothing for #define.\n+\t(cpp_push_buffer, _cpp_pop_buffer): Don't call _cpp_set_trad_context.\n+\t* cpptrad.c: Update comments.\n+\t(_cpp_read_logical_line_trad): Let scan_logical_line handle\n+\tupdating the current context.\n+\t(scan_logical_line): Update the current context.\n+\t(_cpp_create_trad_definition): Similarly.\n+\t(_cpp_set_trad_context): Remove.\n+\n 2002-06-27  Neil Booth  <neil@daikokuya.co.uk>\n \n \tPR preprocessor/7070"}, {"sha": "133c9b930152163d61f0c0e9b808611eb36b6266", "filename": "gcc/cpphash.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/951a07660948ce4c3b048dc7637f5738a9d9d288/gcc%2Fcpphash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/951a07660948ce4c3b048dc7637f5738a9d9d288/gcc%2Fcpphash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpphash.h?ref=951a07660948ce4c3b048dc7637f5738a9d9d288", "patch": "@@ -529,7 +529,6 @@ extern bool _cpp_read_logical_line_trad PARAMS ((cpp_reader *));\n extern void _cpp_overlay_buffer PARAMS ((cpp_reader *pfile, const uchar *,\n \t\t\t\t\t size_t));\n extern void _cpp_remove_overlay PARAMS ((cpp_reader *));\n-extern void _cpp_set_trad_context PARAMS ((cpp_reader *));\n extern bool _cpp_create_trad_definition PARAMS ((cpp_reader *, cpp_macro *));\n extern bool _cpp_expansions_different_trad PARAMS ((const cpp_macro *,\n \t\t\t\t\t\t    const cpp_macro *));"}, {"sha": "6bb9f4d1bb2f76a92fb73d0fef21a3ff4abefdd2", "filename": "gcc/cpplib.c", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/951a07660948ce4c3b048dc7637f5738a9d9d288/gcc%2Fcpplib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/951a07660948ce4c3b048dc7637f5738a9d9d288/gcc%2Fcpplib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.c?ref=951a07660948ce4c3b048dc7637f5738a9d9d288", "patch": "@@ -284,9 +284,7 @@ static void\n prepare_directive_trad (pfile)\n      cpp_reader *pfile;\n {\n-  if (pfile->directive == &dtable[T_DEFINE])\n-    CUR (pfile->context) = pfile->buffer->cur;\n-  else\n+  if (pfile->directive != &dtable[T_DEFINE])\n     {\n       bool no_expand = (pfile->directive\n \t\t\t&& ! (pfile->directive->flags & EXPAND));\n@@ -1937,9 +1935,6 @@ cpp_push_buffer (pfile, buffer, len, from_stage3, return_at_eof)\n \n   pfile->buffer = new;\n \n-  if (CPP_OPTION (pfile, traditional))\n-    _cpp_set_trad_context (pfile);\n-\n   return new;\n }\n \n@@ -1984,9 +1979,6 @@ _cpp_pop_buffer (pfile)\n \t    _cpp_maybe_push_include_file (pfile);\n \t}\n     }\n-\n-  if (pfile->buffer && CPP_OPTION (pfile, traditional))\n-    _cpp_set_trad_context (pfile);\n }\n \n /* Enter all recognised directives in the hash table.  */"}, {"sha": "4d07d528de8f6f7d2832bf3358c2224e6df7906b", "filename": "gcc/cpptrad.c", "status": "modified", "additions": 32, "deletions": 46, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/951a07660948ce4c3b048dc7637f5738a9d9d288/gcc%2Fcpptrad.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/951a07660948ce4c3b048dc7637f5738a9d9d288/gcc%2Fcpptrad.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpptrad.c?ref=951a07660948ce4c3b048dc7637f5738a9d9d288", "patch": "@@ -23,12 +23,12 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */\n \n /* The replacement text of a function-like macro is stored as a\n    contiguous sequence of aligned blocks, each representing the text\n-   between subsequent parameters in that text.\n+   between subsequent parameters.\n \n-   Each block comprises the length of text contained therein, the\n-   one-based index of the argument that immediately follows that text,\n-   and the text itself.  The final block in the macro expansion is\n-   easily recognizable as it has an argument index of zero.  */\n+   Each block comprises the text between its surrounding parameters,\n+   the length of that text, and the one-based index of the following\n+   parameter.  The final block in the replacement text is easily\n+   recognizable as it has an argument index of zero.  */\n \n struct block\n {\n@@ -139,9 +139,9 @@ handle_newline (pfile, cur)\n   return cur + 1;\n }\n \n-/* CUR points to any character in the buffer, not necessarily a\n-   backslash.  Advances CUR until all escaped newlines are skipped,\n-   and returns the new position.\n+/* CUR points to any character in the current context, not necessarily\n+   a backslash.  Advances CUR until all escaped newlines are skipped,\n+   and returns the new position without updating the context.\n \n    Warns if a file buffer ends in an escaped newline.  */\n static const uchar *\n@@ -160,9 +160,9 @@ skip_escaped_newlines (pfile, cur)\n   return cur;\n }\n \n-/* CUR points to the asterisk introducing a comment in the input\n-   buffer.  IN_DEFINE is true if we are in the replacement text\n-   of a macro.\n+/* CUR points to the asterisk introducing a comment in the current\n+   context.  IN_DEFINE is true if we are in the replacement text of a\n+   macro.\n \n    The asterisk and following comment is copied to the buffer pointed\n    to by pfile->out.cur, which must be of sufficient size.\n@@ -364,31 +364,24 @@ bool\n _cpp_read_logical_line_trad (pfile)\n      cpp_reader *pfile;\n {\n-  cpp_buffer *buffer = pfile->buffer;\n-\n   do\n     {\n-      if (buffer->cur == buffer->rlimit)\n+      if (pfile->buffer->cur == pfile->buffer->rlimit)\n \t{\n \t  bool stop = true;\n \n \t  /* Don't pop the last buffer.  */\n-\t  if (buffer->prev)\n+\t  if (pfile->buffer->prev)\n \t    {\n-\t      stop = buffer->return_at_eof;\n+\t      stop = pfile->buffer->return_at_eof;\n \t      _cpp_pop_buffer (pfile);\n-\t      buffer = pfile->buffer;\n \t    }\n \n \t  if (stop)\n \t    return false;\n \t}\n \n-      CUR (pfile->context) = buffer->cur;\n-      RLIMIT (pfile->context) = buffer->rlimit;\n       scan_out_logical_line (pfile, NULL);\n-      buffer = pfile->buffer;\n-      buffer->cur = CUR (pfile->context);\n     }\n   while (pfile->state.skipping);\n \n@@ -426,9 +419,9 @@ save_argument (macro, offset)\n     macro->args[macro->argc] = offset;\n }\n \n-/* Copies the next logical line in the current buffer to the output\n-   buffer.  The output is guaranteed to terminate with a NUL\n-   character.\n+/* Copies the next logical line in the current buffer (starting at\n+   buffer->cur) to the output buffer.  The output is guaranteed to\n+   terminate with a NUL character.  buffer->cur is updated.\n \n    If MACRO is non-NULL, then we are scanning the replacement list of\n    MACRO, and we call save_replacement_text() every time we meet an\n@@ -448,6 +441,8 @@ scan_out_logical_line (pfile, macro)\n   fmacro.buff = NULL;\n \n  start_logical_line:\n+  CUR (pfile->context) = pfile->buffer->cur;\n+  RLIMIT (pfile->context) = pfile->buffer->rlimit;\n   pfile->out.cur = pfile->out.base;\n   pfile->out.first_line = pfile->line;\n  new_context:\n@@ -721,6 +716,8 @@ scan_out_logical_line (pfile, macro)\n \t\t\t preprocessor lex the next token.  */\n \t\t      pfile->buffer->cur = cur;\n \t\t      _cpp_handle_directive (pfile, false /* indented */);\n+\t\t      /* #include changes pfile->buffer so we need to\n+\t\t\t update the limits of the current context.  */\n \t\t      goto start_logical_line;\n \t\t    }\n \t\t}\n@@ -759,7 +756,7 @@ scan_out_logical_line (pfile, macro)\n \n  done:\n   out[-1] = '\\0';\n-  CUR (context) = cur;\n+  pfile->buffer->cur = cur;\n   pfile->out.cur = out - 1;\n   if (fmacro.buff)\n     _cpp_release_buff (pfile, fmacro.buff);\n@@ -1072,11 +1069,17 @@ _cpp_create_trad_definition (pfile, macro)\n {\n   const uchar *cur;\n   uchar *limit;\n+  cpp_context *context = pfile->context;\n \n-  CUR (pfile->context) = pfile->buffer->cur;\n+  /* The context has not been set up for command line defines, and CUR\n+     has not been updated for the macro name for in-file defines.  */\n+  pfile->out.cur = pfile->out.base;\n+  CUR (context) = pfile->buffer->cur;\n+  RLIMIT (context) = pfile->buffer->rlimit;\n+  check_output_buffer (pfile, RLIMIT (context) - CUR (context));\n \n   /* Is this a function-like macro?  */\n-  if (* CUR (pfile->context) == '(')\n+  if (* CUR (context) == '(')\n     {\n       /* Setting macro to NULL indicates an error occurred, and\n \t prevents unnecessary work in scan_out_logical_line.  */\n@@ -1092,8 +1095,8 @@ _cpp_create_trad_definition (pfile, macro)\n     }\n \n   /* Skip leading whitespace in the replacement text.  */\n-  CUR (pfile->context)\n-    = skip_whitespace (pfile, CUR (pfile->context),\n+  pfile->buffer->cur\n+    = skip_whitespace (pfile, CUR (context),\n \t\t       CPP_OPTION (pfile, discard_comments_in_macro_exp));\n \n   pfile->state.prevent_expansion++;\n@@ -1202,20 +1205,3 @@ _cpp_expansions_different_trad (macro1, macro2)\n   free (p1);\n   return mismatch;\n }\n-\n-/* Prepare to be able to scan the current buffer.  */\n-void\n-_cpp_set_trad_context (pfile)\n-     cpp_reader *pfile;\n-{\n-  cpp_buffer *buffer = pfile->buffer;\n-  cpp_context *context = pfile->context;\n-\n-  if (pfile->context->prev)\n-    abort ();\n-\n-  pfile->out.cur = pfile->out.base;\n-  CUR (context) = buffer->cur;\n-  RLIMIT (context) = buffer->rlimit;\n-  check_output_buffer (pfile, RLIMIT (context) - CUR (context));\n-}"}]}