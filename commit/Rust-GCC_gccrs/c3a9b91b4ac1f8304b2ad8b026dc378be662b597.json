{"sha": "c3a9b91b4ac1f8304b2ad8b026dc378be662b597", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzNhOWI5MWI0YWMxZjgzMDRiMmFkOGIwMjZkYzM3OGJlNjYyYjU5Nw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2013-06-20T10:22:33Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2013-06-20T10:22:33Z"}, "message": "re PR tree-optimization/57584 (ice: SSA corruption: Unable to coalesce ssa_names)\n\n2013-06-20  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/57584\n\t* tree-ssa-loop-niter.c (expand_simple_operations): Avoid including\n\tSSA names into the expanded expression that take part in\n\tabnormal coalescing.\n\n\t* gcc.dg/torture/pr57584.c: New testcase.\n\nFrom-SVN: r200237", "tree": {"sha": "a318aa77a02219a41545ed33d2b1c50c54ba881a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a318aa77a02219a41545ed33d2b1c50c54ba881a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c3a9b91b4ac1f8304b2ad8b026dc378be662b597", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3a9b91b4ac1f8304b2ad8b026dc378be662b597", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3a9b91b4ac1f8304b2ad8b026dc378be662b597", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3a9b91b4ac1f8304b2ad8b026dc378be662b597/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "dd28cdaabf8c87874c9d6722402bd74b641ed38a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd28cdaabf8c87874c9d6722402bd74b641ed38a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd28cdaabf8c87874c9d6722402bd74b641ed38a"}], "stats": {"total": 92, "additions": 92, "deletions": 0}, "files": [{"sha": "249ee283504535b87bc4f7052f5bb139acbbeabd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3a9b91b4ac1f8304b2ad8b026dc378be662b597/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3a9b91b4ac1f8304b2ad8b026dc378be662b597/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c3a9b91b4ac1f8304b2ad8b026dc378be662b597", "patch": "@@ -1,3 +1,10 @@\n+2013-06-20  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/57584\n+\t* tree-ssa-loop-niter.c (expand_simple_operations): Avoid including\n+\tSSA names into the expanded expression that take part in\n+\tabnormal coalescing.\n+\n 2013-06-19    <singhai@google.com>\n \n \t* gcov.c (print_usage): Handle new option."}, {"sha": "d5da496e14bf2250ec8107da1178e3dbb66685eb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3a9b91b4ac1f8304b2ad8b026dc378be662b597/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3a9b91b4ac1f8304b2ad8b026dc378be662b597/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c3a9b91b4ac1f8304b2ad8b026dc378be662b597", "patch": "@@ -1,3 +1,8 @@\n+2013-06-20  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/57584\n+\t* gcc.dg/torture/pr57584.c: New testcase.\n+\n 2013-06-19    <singhai@google.com>\n \n \t* g++.dg/gcov/gcov-8.C: New testcase."}, {"sha": "7cf630b8b753697cd701324a8d46a459e0656956", "filename": "gcc/testsuite/gcc.dg/torture/pr57584.c", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3a9b91b4ac1f8304b2ad8b026dc378be662b597/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr57584.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3a9b91b4ac1f8304b2ad8b026dc378be662b597/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr57584.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr57584.c?ref=c3a9b91b4ac1f8304b2ad8b026dc378be662b597", "patch": "@@ -0,0 +1,73 @@\n+/* { dg-do compile } */\n+\n+typedef int int32_t __attribute__ ((__mode__ (__SI__)));\n+typedef unsigned char uint8_t;\n+typedef unsigned long int uintptr_t;\n+typedef uint8_t scm_t_uint8;\n+typedef int32_t scm_t_int32;\n+typedef uintptr_t scm_t_uintptr;\n+typedef scm_t_uintptr scm_t_bits;\n+typedef struct scm_unused_struct {\n+} *SCM;\n+enum scm_tc8_tags {\n+    scm_tc8_flag = 4 + 0x00,   scm_tc8_char = 4 + 0x08,   scm_tc8_unused_0 = 4 + 0x10,   scm_tc8_unused_1 = 4 + 0x18 };\n+struct __jmp_buf_tag   {\n+};\n+typedef struct __jmp_buf_tag jmp_buf[1];\n+typedef struct scm_t_cell {\n+} scm_t_cell;\n+struct scm_prompt_registers {\n+    jmp_buf regs;\n+};\n+enum {\n+    SCM_VM_APPLY_HOOK,   SCM_VM_PUSH_CONTINUATION_HOOK,   SCM_VM_POP_CONTINUATION_HOOK,   SCM_VM_NEXT_HOOK,   SCM_VM_ABORT_CONTINUATION_HOOK,   SCM_VM_RESTORE_CONTINUATION_HOOK,   SCM_VM_NUM_HOOKS, };\n+typedef SCM (*scm_t_vm_engine) (SCM vm, SCM program, SCM *argv, int nargs);\n+struct scm_vm {\n+    scm_t_uint8 *ip;\n+    SCM *sp;\n+    SCM *fp;\n+    int engine;\n+    int trace_level;\n+};\n+static SCM vm_regular_engine (SCM vm, SCM program, SCM *argv, int nargs) {\n+}\n+static SCM vm_debug_engine (SCM vm, SCM program, SCM *argv, int nargs) {\n+    register scm_t_uint8 *ip ;\n+    register SCM *sp ;\n+    register SCM *fp ;\n+    struct scm_vm *vp = ((struct scm_vm *) ((((scm_t_bits) (0? (*(SCM*)0=((((SCM *)((scm_t_cell *) (((scm_t_bits) (0? (*(SCM*)0=((((vm))))): (((vm)))))))) [((1))]))): (((SCM *)((scm_t_cell *) (((scm_t_bits) (0? (*(SCM*)0=((((vm))))): (((vm)))))))) [((1))]))))));\n+    static const void **jump_table_pointer = ((void *)0);\n+    register const void **jump_table asm (\"r12\");\n+    if (__builtin_expect ((!jump_table_pointer), 0))     {\n+\tjump_table_pointer[0] = &&l_nop;\n+    }\n+l_nop:\n+      {\n+\tSCM *old_sp;\n+\tscm_t_int32 n;\n+\told_sp = sp;\n+\tsp = (fp - 1) + n;\n+\tif (old_sp < sp)     {\n+\t    while (old_sp < sp)         *++old_sp = ((SCM) ((((((9)) << 8) + scm_tc8_flag))));\n+\t}\n+\t  {\n+\t      { if (__builtin_expect ((vp->trace_level > 0), 0)) { { vp->ip = ip; vp->sp = sp; vp->fp = fp; }; vm_dispatch_hook (vm, SCM_VM_NEXT_HOOK); } };\n+\t  };\n+      }\n+      {\n+\tSCM k, prompt;\n+\tif ((_setjmp (((struct scm_prompt_registers*)((((scm_t_bits) (0? (*(SCM*)0=((((SCM *)((scm_t_cell *) (((scm_t_bits) (0? (*(SCM*)0=((((prompt))))): (((prompt)))))))) [((2))]))): (((SCM *)((scm_t_cell *) (((scm_t_bits) (0? (*(SCM*)0=((((prompt))))): (((prompt)))))))) [((2))]))))))->regs)))     {\n+\t      { ip = vp->ip; sp = vp->sp; fp = vp->fp; };\n+\t      { { if (__builtin_expect ((vp->trace_level > 0), 0)) { { vp->ip = ip; vp->sp = sp; vp->fp = fp; }; vm_dispatch_hook (vm, SCM_VM_NEXT_HOOK); } }; ; goto *jump_table[(*ip++) & ((1<<8)-1)]; };\n+\t}\n+\n+\tif (__builtin_expect ((vp->trace_level > 0), 0)) { { vp->ip = ip; vp->sp = sp; vp->fp = fp; }; vm_dispatch_hook (vm, SCM_VM_NEXT_HOOK); } ;\n+\n+      }\n+}\n+static const scm_t_vm_engine vm_engines[] =   {\n+    vm_regular_engine, vm_debug_engine };\n+SCM scm_c_vm_run (SCM vm, SCM program, SCM *argv, int nargs) {\n+    struct scm_vm *vp = ((struct scm_vm *) ((((scm_t_bits) (0? (*(SCM*)0=((((SCM *)((scm_t_cell *) (((scm_t_bits) (0? (*(SCM*)0=((((vm))))): (((vm)))))))) [((1))]))): (((SCM *)((scm_t_cell *) (((scm_t_bits) (0? (*(SCM*)0=((((vm))))): (((vm)))))))) [((1))]))))));\n+    return vm_engines[vp->engine](vm, program, argv, nargs);\n+}"}, {"sha": "9d6f9efb089ed2531dcf3fa87dfeed25f8b98cfe", "filename": "gcc/tree-ssa-loop-niter.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3a9b91b4ac1f8304b2ad8b026dc378be662b597/gcc%2Ftree-ssa-loop-niter.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3a9b91b4ac1f8304b2ad8b026dc378be662b597/gcc%2Ftree-ssa-loop-niter.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-niter.c?ref=c3a9b91b4ac1f8304b2ad8b026dc378be662b597", "patch": "@@ -1514,6 +1514,13 @@ expand_simple_operations (tree expr)\n   if (gimple_code (stmt) != GIMPLE_ASSIGN)\n     return expr;\n \n+  /* Avoid expanding to expressions that contain SSA names that need\n+     to take part in abnormal coalescing.  */\n+  ssa_op_iter iter;\n+  FOR_EACH_SSA_TREE_OPERAND (e, stmt, iter, SSA_OP_USE)\n+    if (SSA_NAME_OCCURS_IN_ABNORMAL_PHI (e))\n+      return expr;\n+\n   e = gimple_assign_rhs1 (stmt);\n   code = gimple_assign_rhs_code (stmt);\n   if (get_gimple_rhs_class (code) == GIMPLE_SINGLE_RHS)"}]}