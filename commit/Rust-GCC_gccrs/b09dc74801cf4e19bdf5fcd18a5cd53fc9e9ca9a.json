{"sha": "b09dc74801cf4e19bdf5fcd18a5cd53fc9e9ca9a", "node_id": "C_kwDOANBUbNoAKGIwOWRjNzQ4MDFjZjRlMTliZGY1ZmNkMThhNWNkNTNmYzllOWNhOWE", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2023-03-02T10:30:21Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2023-03-02T10:30:21Z"}, "message": "Avoid creating (const (reg ...)) [PR108603]\n\nconvert_memory_address_addr_space_1 has two modes: one in which it\ntries to create a self-contained RTL expression (which might fail)\nand one in which it can emit new instructions where necessary.\n\nWhen handling a CONST, the function recurses into the CONST's\noperand and then constifies the result.  But that's only valid if\nthe result is still a self-contained expression.  If new instructions\nhave been emitted, the expression will refer to the (non-constant)\nresults of those instructions.\n\nIn the PR, this caused us to emit a nonsensical (const (reg ...))\nREG_EQUAL note.\n\ngcc/\n\tPR tree-optimization/108603\n\t* explow.cc (convert_memory_address_addr_space_1): Only wrap\n\tthe result of a recursive call in a CONST if no instructions\n\twere emitted.\n\ngcc/testsuite/\n\tPR tree-optimization/108603\n\t* gcc.target/aarch64/sve/pr108603.c: New test.", "tree": {"sha": "d54c037431eb57c378a7e84a16a197956da69762", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d54c037431eb57c378a7e84a16a197956da69762"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b09dc74801cf4e19bdf5fcd18a5cd53fc9e9ca9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b09dc74801cf4e19bdf5fcd18a5cd53fc9e9ca9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b09dc74801cf4e19bdf5fcd18a5cd53fc9e9ca9a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b09dc74801cf4e19bdf5fcd18a5cd53fc9e9ca9a/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a8ce4b52f5892a10a02b94d7be689e59a444ff6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a8ce4b52f5892a10a02b94d7be689e59a444ff6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a8ce4b52f5892a10a02b94d7be689e59a444ff6"}], "stats": {"total": 19, "additions": 16, "deletions": 3}, "files": [{"sha": "32e9498ee07a4d4b2ca47f85244d4a4a786f04cd", "filename": "gcc/explow.cc", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b09dc74801cf4e19bdf5fcd18a5cd53fc9e9ca9a/gcc%2Fexplow.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b09dc74801cf4e19bdf5fcd18a5cd53fc9e9ca9a/gcc%2Fexplow.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexplow.cc?ref=b09dc74801cf4e19bdf5fcd18a5cd53fc9e9ca9a", "patch": "@@ -349,9 +349,14 @@ convert_memory_address_addr_space_1 (scalar_int_mode to_mode ATTRIBUTE_UNUSED,\n       return temp;\n \n     case CONST:\n-      temp = convert_memory_address_addr_space_1 (to_mode, XEXP (x, 0), as,\n-\t\t\t\t\t\t  true, no_emit);\n-      return temp ? gen_rtx_CONST (to_mode, temp) : temp;\n+      {\n+\tauto *last = no_emit ? nullptr : get_last_insn ();\n+\ttemp = convert_memory_address_addr_space_1 (to_mode, XEXP (x, 0), as,\n+\t\t\t\t\t\t    true, no_emit);\n+\tif (temp && (no_emit || last == get_last_insn ()))\n+\t  return gen_rtx_CONST (to_mode, temp);\n+\treturn temp;\n+      }\n \n     case PLUS:\n     case MULT:"}, {"sha": "a2aea9f0b12bfa9a491e32577140e28f89c3392d", "filename": "gcc/testsuite/gcc.target/aarch64/sve/pr108603.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b09dc74801cf4e19bdf5fcd18a5cd53fc9e9ca9a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpr108603.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b09dc74801cf4e19bdf5fcd18a5cd53fc9e9ca9a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpr108603.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpr108603.c?ref=b09dc74801cf4e19bdf5fcd18a5cd53fc9e9ca9a", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-options \"-O2 -mabi=ilp32 -fdata-sections\" } */\n+\n+int a[128];\n+long long *p;\n+void f() {\n+  for (long i = 0; i < sizeof(long); i++)\n+    p[i] = a[i];\n+}"}]}