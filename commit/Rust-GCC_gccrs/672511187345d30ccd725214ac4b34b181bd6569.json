{"sha": "672511187345d30ccd725214ac4b34b181bd6569", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjcyNTExMTg3MzQ1ZDMwY2NkNzI1MjE0YWM0YjM0YjE4MWJkNjU2OQ==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2019-12-30T10:34:11Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2019-12-30T10:34:11Z"}, "message": "Catch division by zero errors in array sizes.\n\n2019-12-30  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/92961\n\t* gfortran.h (gfc_seen_div0): Add declaration.\n\t* arith.h (gfc_seen_div0): Add definition.\n\t(eval_intrinsic): For integer division by zero, set gfc_seen_div0.\n\t* decl.c (variable_decl):  If resolution resp. simplification\n\tfails for array spec and a division of zero error has been\n\tseen, return MATCH_ERROR.\n\n2019-12-30  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/92961\n\t* gfortran.dg/arith_divide_2.f90: New test.\n\nFrom-SVN: r279762", "tree": {"sha": "4dd5ef16a039f4e241f8d2222b19e3661cd794a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4dd5ef16a039f4e241f8d2222b19e3661cd794a5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/672511187345d30ccd725214ac4b34b181bd6569", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/672511187345d30ccd725214ac4b34b181bd6569", "html_url": "https://github.com/Rust-GCC/gccrs/commit/672511187345d30ccd725214ac4b34b181bd6569", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/672511187345d30ccd725214ac4b34b181bd6569/comments", "author": null, "committer": null, "parents": [{"sha": "c3182576ea48f175283e291094298831dd7046e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3182576ea48f175283e291094298831dd7046e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3182576ea48f175283e291094298831dd7046e5"}], "stats": {"total": 63, "additions": 59, "deletions": 4}, "files": [{"sha": "5b92597641b86803eea664b5f77a1860d81db619", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/672511187345d30ccd725214ac4b34b181bd6569/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/672511187345d30ccd725214ac4b34b181bd6569/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=672511187345d30ccd725214ac4b34b181bd6569", "patch": "@@ -1,3 +1,13 @@\n+2019-12-30  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/92961\n+\t* gfortran.h (gfc_seen_div0): Add declaration.\n+\t* arith.h (gfc_seen_div0): Add definition.\n+\t(eval_intrinsic): For integer division by zero, set gfc_seen_div0.\n+\t* decl.c (variable_decl):  If resolution resp. simplification\n+\tfails for array spec and a division of zero error has been\n+\tseen, return MATCH_ERROR.\n+\n 2019-12-21  Harald Anlauf  <anlauf@gmx.de>\n \n \tPR fortran/92990"}, {"sha": "b7699e44f93fbc4d1749927d6b570a433f0597d0", "filename": "gcc/fortran/arith.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/672511187345d30ccd725214ac4b34b181bd6569/gcc%2Ffortran%2Farith.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/672511187345d30ccd725214ac4b34b181bd6569/gcc%2Ffortran%2Farith.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Farith.c?ref=672511187345d30ccd725214ac4b34b181bd6569", "patch": "@@ -32,6 +32,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"target-memory.h\"\n #include \"constructor.h\"\n \n+bool gfc_seen_div0;\n+\n /* MPFR does not have a direct replacement for mpz_set_f() from GMP.\n    It's easily implemented with a few calls though.  */\n \n@@ -1620,6 +1622,10 @@ eval_intrinsic (gfc_intrinsic_op op,\n       gfc_error (gfc_arith_error (rc), &op1->where);\n       if (rc == ARITH_OVERFLOW)\n \tgoto done;\n+\n+      if (rc == ARITH_DIV0 && op2->ts.type == BT_INTEGER)\n+\tgfc_seen_div0 = true;\n+\n       return NULL;\n     }\n "}, {"sha": "b43dc2c0831e64f9d223badc8d447c90c528d0e9", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 27, "deletions": 4, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/672511187345d30ccd725214ac4b34b181bd6569/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/672511187345d30ccd725214ac4b34b181bd6569/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=672511187345d30ccd725214ac4b34b181bd6569", "patch": "@@ -2535,6 +2535,8 @@ variable_decl (int elem)\n \t  goto cleanup;\n \t}\n \n+      gfc_seen_div0 = false;\n+      \n       /* F2018:C830 (R816) An explicit-shape-spec whose bounds are not\n \t constant expressions shall appear only in a subprogram, derived\n \t type definition, BLOCK construct, or interface body.  */\n@@ -2551,7 +2553,12 @@ variable_decl (int elem)\n \t  for (int i = 0; i < as->rank; i++)\n \t    {\n \t      e = gfc_copy_expr (as->lower[i]);\n-\t      gfc_resolve_expr (e);\n+\t      if (!gfc_resolve_expr (e) && gfc_seen_div0)\n+\t\t{\n+\t\t  m = MATCH_ERROR;\n+\t\t  goto cleanup;\n+\t\t}\n+\n \t      gfc_simplify_expr (e, 0);\n \t      if (e && (e->expr_type != EXPR_CONSTANT))\n \t\t{\n@@ -2561,7 +2568,12 @@ variable_decl (int elem)\n \t      gfc_free_expr (e);\n \n \t      e = gfc_copy_expr (as->upper[i]);\n-\t      gfc_resolve_expr (e);\n+\t      if (!gfc_resolve_expr (e)  && gfc_seen_div0)\n+\t\t{\n+\t\t  m = MATCH_ERROR;\n+\t\t  goto cleanup;\n+\t\t}\n+\n \t      gfc_simplify_expr (e, 0);\n \t      if (e && (e->expr_type != EXPR_CONSTANT))\n \t\t{\n@@ -2587,7 +2599,12 @@ variable_decl (int elem)\n \t      if (e->expr_type != EXPR_CONSTANT)\n \t\t{\n \t\t  n = gfc_copy_expr (e);\n-\t\t  gfc_simplify_expr (n, 1);\n+\t\t  if (!gfc_simplify_expr (n, 1)  && gfc_seen_div0) \n+\t\t    {\n+\t\t      m = MATCH_ERROR;\n+\t\t      goto cleanup;\n+\t\t    }\n+\n \t\t  if (n->expr_type == EXPR_CONSTANT)\n \t\t    gfc_replace_expr (e, n);\n \t\t  else\n@@ -2597,7 +2614,12 @@ variable_decl (int elem)\n \t      if (e->expr_type != EXPR_CONSTANT)\n \t\t{\n \t\t  n = gfc_copy_expr (e);\n-\t\t  gfc_simplify_expr (n, 1);\n+\t\t  if (!gfc_simplify_expr (n, 1)  && gfc_seen_div0) \n+\t\t    {\n+\t\t      m = MATCH_ERROR;\n+\t\t      goto cleanup;\n+\t\t    }\n+\t\t  \n \t\t  if (n->expr_type == EXPR_CONSTANT)\n \t\t    gfc_replace_expr (e, n);\n \t\t  else\n@@ -2934,6 +2956,7 @@ variable_decl (int elem)\n \n cleanup:\n   /* Free stuff up and return.  */\n+  gfc_seen_div0 = false;\n   gfc_free_expr (initializer);\n   gfc_free_array_spec (as);\n "}, {"sha": "8e414c48eb10affec8eb905040940586d541d89e", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/672511187345d30ccd725214ac4b34b181bd6569/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/672511187345d30ccd725214ac4b34b181bd6569/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=672511187345d30ccd725214ac4b34b181bd6569", "patch": "@@ -2995,6 +2995,8 @@ void gfc_arith_done_1 (void);\n arith gfc_check_integer_range (mpz_t p, int kind);\n bool gfc_check_character_range (gfc_char_t, int);\n \n+extern bool gfc_seen_div0;\n+\n /* trans-types.c */\n bool gfc_check_any_c_kind (gfc_typespec *);\n int gfc_validate_kind (bt, int, bool);"}, {"sha": "d7044518a0257a78e4eba20e2e575f3c11c7610c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/672511187345d30ccd725214ac4b34b181bd6569/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/672511187345d30ccd725214ac4b34b181bd6569/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=672511187345d30ccd725214ac4b34b181bd6569", "patch": "@@ -1,3 +1,8 @@\n+2019-12-30  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/92961\n+\t* gfortran.dg/arith_divide_2.f90: New test.\n+\n 2019-12-30  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/92745"}, {"sha": "ffafa269a1beec2508e1457e7e14061ca0090c2e", "filename": "gcc/testsuite/gfortran.dg/arith_divide_2.f90", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/672511187345d30ccd725214ac4b34b181bd6569/gcc%2Ftestsuite%2Fgfortran.dg%2Farith_divide_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/672511187345d30ccd725214ac4b34b181bd6569/gcc%2Ftestsuite%2Fgfortran.dg%2Farith_divide_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farith_divide_2.f90?ref=672511187345d30ccd725214ac4b34b181bd6569", "patch": "@@ -0,0 +1,9 @@\n+! { dg-do compile }\n+! PR 92961 - this used to ICE. Original test case by Gerhard Steinmetz.\n+program p\n+   integer :: a((0)/0)    ! { dg-error \"Division by zero\" }\n+   integer :: b(0/(0))    ! { dg-error \"Division by zero\" }\n+   integer :: c((0)/(0))  ! { dg-error \"Division by zero\" }\n+   integer :: d(0/0)      ! { dg-error \"Division by zero\" }\n+   integer :: x = ubound(a,1) ! { dg-error \"must be an array\" }\n+end"}]}