{"sha": "c80a540338e5809cdf058b13e23e30585219a0fa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzgwYTU0MDMzOGU1ODA5Y2RmMDU4YjEzZTIzZTMwNTg1MjE5YTBmYQ==", "commit": {"author": {"name": "Sebastian Pop", "email": "sebastian.pop@amd.com", "date": "2010-03-31T18:37:13Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2010-03-31T18:37:13Z"}, "message": "canonicalize_loop_ivs should add the IV bump in loop->header.\n\n2010-03-16  Sebastian Pop  <sebastian.pop@amd.com>\n\n\t* graphite-sese-to-poly.c (graphite_loop_normal_form): Add the IV bump\n\tin loop->header.\n\t* tree-flow.h (canonicalize_loop_ivs): Updated declaration.\n\t* tree-parloops.c (gen_parallel_loop): Add the IV bump in loop->latch.\n\t* tree-ssa-loop-manip.c (canonicalize_loop_ivs): Add a new parameter\n\tto switch between adding the IV bump in loop->latch or in loop->header.\n\nFrom-SVN: r157885", "tree": {"sha": "031cf7376f126a24b28052c5fb0f4f308cc6b474", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/031cf7376f126a24b28052c5fb0f4f308cc6b474"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c80a540338e5809cdf058b13e23e30585219a0fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c80a540338e5809cdf058b13e23e30585219a0fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c80a540338e5809cdf058b13e23e30585219a0fa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c80a540338e5809cdf058b13e23e30585219a0fa/comments", "author": null, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "caaf41d0e86fc020b5a8f0a1a8b6a89d23a07522", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/caaf41d0e86fc020b5a8f0a1a8b6a89d23a07522", "html_url": "https://github.com/Rust-GCC/gccrs/commit/caaf41d0e86fc020b5a8f0a1a8b6a89d23a07522"}], "stats": {"total": 29, "additions": 20, "deletions": 9}, "files": [{"sha": "785ded35e048314a0445afdc312dcc33839c71d5", "filename": "gcc/ChangeLog.graphite", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c80a540338e5809cdf058b13e23e30585219a0fa/gcc%2FChangeLog.graphite", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c80a540338e5809cdf058b13e23e30585219a0fa/gcc%2FChangeLog.graphite", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.graphite?ref=c80a540338e5809cdf058b13e23e30585219a0fa", "patch": "@@ -1,3 +1,12 @@\n+2010-03-16  Sebastian Pop  <sebastian.pop@amd.com>\n+\n+\t* graphite-sese-to-poly.c (graphite_loop_normal_form): Add the IV bump\n+\tin loop->header.\n+\t* tree-flow.h (canonicalize_loop_ivs): Updated declaration.\n+\t* tree-parloops.c (gen_parallel_loop): Add the IV bump in loop->latch.\n+\t* tree-ssa-loop-manip.c (canonicalize_loop_ivs): Add a new parameter\n+\tto switch between adding the IV bump in loop->latch or in loop->header.\n+\n 2010-03-16  Sebastian Pop  <sebastian.pop@amd.com>\n \n \t* passes.c (init_optimization_passes): Add pass_copy_prop"}, {"sha": "d358137ef727cc9de19b318860db688577fee8ba", "filename": "gcc/graphite-sese-to-poly.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c80a540338e5809cdf058b13e23e30585219a0fa/gcc%2Fgraphite-sese-to-poly.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c80a540338e5809cdf058b13e23e30585219a0fa/gcc%2Fgraphite-sese-to-poly.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-sese-to-poly.c?ref=c80a540338e5809cdf058b13e23e30585219a0fa", "patch": "@@ -2887,15 +2887,15 @@ graphite_loop_normal_form (loop_p loop)\n \n   bool known_niter = number_of_iterations_exit (loop, exit, &niter, false);\n \n-  /* At this point we should know the number of iterations,  */\n+  /* At this point we should know the number of iterations.  */\n   gcc_assert (known_niter);\n \n   nit = force_gimple_operand (unshare_expr (niter.niter), &stmts, true,\n \t\t\t      NULL_TREE);\n   if (stmts)\n     gsi_insert_seq_on_edge_immediate (loop_preheader_edge (loop), stmts);\n \n-  loop->single_iv = canonicalize_loop_ivs (loop, &nit);\n+  loop->single_iv = canonicalize_loop_ivs (loop, &nit, false);\n }\n \n /* Rewrite all the loops of SCOP in normal form: one induction"}, {"sha": "032ecaa04ddd88b576844c3e3245c5d412f9c7bb", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c80a540338e5809cdf058b13e23e30585219a0fa/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c80a540338e5809cdf058b13e23e30585219a0fa/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=c80a540338e5809cdf058b13e23e30585219a0fa", "patch": "@@ -694,7 +694,7 @@ unsigned int tree_unroll_loops_completely (bool, bool);\n unsigned int tree_ssa_prefetch_arrays (void);\n void tree_ssa_iv_optimize (void);\n unsigned tree_predictive_commoning (void);\n-tree canonicalize_loop_ivs (struct loop *, tree *);\n+tree canonicalize_loop_ivs (struct loop *, tree *, bool);\n bool parallelize_loops (void);\n \n bool loop_only_exit_p (const struct loop *, const_edge);"}, {"sha": "35638315c9c7d642d9d64cdbf68fad46ddd79f4c", "filename": "gcc/tree-parloops.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c80a540338e5809cdf058b13e23e30585219a0fa/gcc%2Ftree-parloops.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c80a540338e5809cdf058b13e23e30585219a0fa/gcc%2Ftree-parloops.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-parloops.c?ref=c80a540338e5809cdf058b13e23e30585219a0fa", "patch": "@@ -1626,7 +1626,7 @@ gen_parallel_loop (struct loop *loop, htab_t reduction_list,\n   free_original_copy_tables ();\n \n   /* Base all the induction variables in LOOP on a single control one.  */\n-  canonicalize_loop_ivs (loop, &nit);\n+  canonicalize_loop_ivs (loop, &nit, true);\n \n   /* Ensure that the exit condition is the first statement in the loop.  */\n   transform_to_exit_first_loop (loop, reduction_list, nit);"}, {"sha": "7818f5b4f1acb1f57525ea8bd34f83f4254f54bb", "filename": "gcc/tree-ssa-loop-manip.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c80a540338e5809cdf058b13e23e30585219a0fa/gcc%2Ftree-ssa-loop-manip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c80a540338e5809cdf058b13e23e30585219a0fa/gcc%2Ftree-ssa-loop-manip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-manip.c?ref=c80a540338e5809cdf058b13e23e30585219a0fa", "patch": "@@ -1181,11 +1181,13 @@ rewrite_all_phi_nodes_with_iv (loop_p loop, tree main_iv)\n    compared with *NIT.  When the IV type precision has to be larger\n    than *NIT type precision, *NIT is converted to the larger type, the\n    conversion code is inserted before the loop, and *NIT is updated to\n-   the new definition.  The induction variable is incremented in the\n-   loop latch.  Return the induction variable that was created.  */\n+   the new definition.  When BUMP_IN_LATCH is true, the induction\n+   variable is incremented in the loop latch, otherwise it is\n+   incremented in the loop header.  Return the induction variable that\n+   was created.  */\n \n tree\n-canonicalize_loop_ivs (struct loop *loop, tree *nit)\n+canonicalize_loop_ivs (struct loop *loop, tree *nit, bool bump_in_latch)\n {\n   unsigned precision = TYPE_PRECISION (TREE_TYPE (*nit));\n   unsigned original_precision = precision;\n@@ -1215,9 +1217,9 @@ canonicalize_loop_ivs (struct loop *loop, tree *nit)\n \tgsi_insert_seq_on_edge_immediate (loop_preheader_edge (loop), stmts);\n     }\n \n-  gsi = gsi_last_bb (loop->latch);\n+  gsi = gsi_last_bb (bump_in_latch ? loop->latch : loop->header);\n   create_iv (build_int_cst_type (type, 0), build_int_cst (type, 1), NULL_TREE,\n-\t     loop, &gsi, true, &var_before, NULL);\n+\t     loop, &gsi, bump_in_latch, &var_before, NULL);\n \n   rewrite_all_phi_nodes_with_iv (loop, var_before);\n "}]}