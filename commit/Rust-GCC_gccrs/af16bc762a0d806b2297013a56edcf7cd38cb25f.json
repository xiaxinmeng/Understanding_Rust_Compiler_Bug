{"sha": "af16bc762a0d806b2297013a56edcf7cd38cb25f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWYxNmJjNzYyYTBkODA2YjIyOTcwMTNhNTZlZGNmN2NkMzhjYjI1Zg==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2012-09-20T16:35:40Z"}, "committer": {"name": "Martin Jambor", "email": "jamborm@gcc.gnu.org", "date": "2012-09-20T16:35:40Z"}, "message": "function.c (push_cfun): Check old current_function_decl matches old cfun...\n\n2012-09-20  Martin Jambor  <mjambor@suse.cz>\n\n\t* function.c (push_cfun): Check old current_function_decl matches\n\told cfun, set new current_function_decl to the decl of the new\n\tcfun.\n\t(push_struct_function): Likewise.\n\t(pop_cfun): Likewise.\n\t(allocate_struct_function): Move call to\n\tinvoke_set_current_function_hook to the end of the function.\n\t* cfgexpand.c (estimated_stack_frame_size): Do not set and restore\n\tcurrent_function_decl.\n\t* cgraph.c (cgraph_release_function_body): Likewise.\n\t* cgraphunit.c (cgraph_process_new_functions): Likewise.\n\t(cgraph_add_new_function): Likewise.\n\t(cgraph_analyze_function): Likewise.\n\t(assemble_thunk): Set cfun to NULL at the end.\n\t(expand_function): Move call to set_cfun downwards.\n\t* gimple-low.c (record_vars_into): Only check current_function_decl\n\tbefore possibly doing push_cfun.\n\t* gimplify.c (gimplify_function_tree): Do not set and restore\n\tcurrent_function_decl.\n\t* ipa-inline-analysis.c (compute_inline_parameters): Likewise.\n\t(inline_analyze_function): Likewise.\n\t* ipa-prop.c (ipa_analyze_node): Likewise.\n\t* ipa-pure-const.c (analyze_function): Likewise.\n\t* lto-streamer-in.c (lto_input_function_body): Do not set\n\tcurrent_function_decl.\n\t* lto-streamer-out.c (output_function): Do not set and restore\n\tcurrent_function_decl.\n\t* omp-low.c (finalize_task_copyfn): Likewise.\n\t(expand_omp_taskreg): Likewise.\n\t(create_task_copyfn): Likewise, move push_cfun up quite a bit.\n\t* passes.c (dump_passes): Do not set and restore current_function_decl.\n\t(do_per_function): Likewise.\n\t(do_per_function_toporder): Likewise.\n\t* trans-mem.c (ipa_tm_scan_irr_function): Likewise.\n\t(ipa_tm_transform_transaction): Likewise.\n\t(ipa_tm_transform_clone): Likewise.\n\t(ipa_tm_execute): Likewise.\n\t* tree-emutls.c (lower_emutls_function_body): Likewise.\n\t* tree-inline.c (initialize_cfun): Do not call pop_cfun.\n\t(tree_function_versioning): Do not call push_cfun, do not set and\n\trestore current_function_decl.  Remove assert checking consistency of\n\tcfun and current_function_decl.\n\t* tree-profile.c (tree_profiling): Do not set and restore\n\tcurrent_function_decl.\n\t* tree-sra.c (convert_callers_for_node): Do not set\n\tcurrent_function_decl.\n\t(convert_callers): Do not restore current_function_decl.\n\t(modify_function): Do not set current_function_decl.\n\t* tree-ssa-structalias.c (ipa_pta_execute): Do not set and restore\n\tcurrent_function_decl.\n\nfortran/\n\t* trans-decl.c (gfc_get_extern_function_decl): Push NULL cfun.  Do not\n\tset and restore current_function_decl.\n\t(gfc_init_coarray_decl): Do not set and restore current_function_decl.\n\nlto/\n\t* lto.c (lto_materialize_function): Call push_struct_function and\n\tpop_cfun.\n\nFrom-SVN: r191577", "tree": {"sha": "bd0847507cf2cc8fc2505732d6abf2f60dd73989", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bd0847507cf2cc8fc2505732d6abf2f60dd73989"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/af16bc762a0d806b2297013a56edcf7cd38cb25f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af16bc762a0d806b2297013a56edcf7cd38cb25f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af16bc762a0d806b2297013a56edcf7cd38cb25f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af16bc762a0d806b2297013a56edcf7cd38cb25f/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ee6440f8d8ad3e2a015a50a598cb80669569da27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee6440f8d8ad3e2a015a50a598cb80669569da27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee6440f8d8ad3e2a015a50a598cb80669569da27"}], "stats": {"total": 206, "additions": 101, "deletions": 105}, "files": [{"sha": "cc31d346ebf13b0fdda0a2375c1530b82a5e5611", "filename": "gcc/ChangeLog", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af16bc762a0d806b2297013a56edcf7cd38cb25f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af16bc762a0d806b2297013a56edcf7cd38cb25f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=af16bc762a0d806b2297013a56edcf7cd38cb25f", "patch": "@@ -1,3 +1,56 @@\n+2012-09-20  Martin Jambor  <mjambor@suse.cz>\n+\n+\t* function.c (push_cfun): Check old current_function_decl matches\n+\told cfun, set new current_function_decl to the decl of the new\n+\tcfun.\n+\t(push_struct_function): Likewise.\n+\t(pop_cfun): Likewise.\n+\t(allocate_struct_function): Move call to\n+\tinvoke_set_current_function_hook to the end of the function.\n+\t* cfgexpand.c (estimated_stack_frame_size): Do not set and restore\n+\tcurrent_function_decl.\n+\t* cgraph.c (cgraph_release_function_body): Likewise.\n+\t* cgraphunit.c (cgraph_process_new_functions): Likewise.\n+\t(cgraph_add_new_function): Likewise.\n+\t(cgraph_analyze_function): Likewise.\n+\t(assemble_thunk): Set cfun to NULL at the end.\n+\t(expand_function): Move call to set_cfun downwards.\n+\t* gimple-low.c (record_vars_into): Only check current_function_decl\n+\tbefore possibly doing push_cfun.\n+\t* gimplify.c (gimplify_function_tree): Do not set and restore\n+\tcurrent_function_decl.\n+\t* ipa-inline-analysis.c (compute_inline_parameters): Likewise.\n+\t(inline_analyze_function): Likewise.\n+\t* ipa-prop.c (ipa_analyze_node): Likewise.\n+\t* ipa-pure-const.c (analyze_function): Likewise.\n+\t* lto-streamer-in.c (lto_input_function_body): Do not set\n+\tcurrent_function_decl.\n+\t* lto-streamer-out.c (output_function): Do not set and restore\n+\tcurrent_function_decl.\n+\t* omp-low.c (finalize_task_copyfn): Likewise.\n+\t(expand_omp_taskreg): Likewise.\n+\t(create_task_copyfn): Likewise, move push_cfun up quite a bit.\n+\t* passes.c (dump_passes): Do not set and restore current_function_decl.\n+\t(do_per_function): Likewise.\n+\t(do_per_function_toporder): Likewise.\n+\t* trans-mem.c (ipa_tm_scan_irr_function): Likewise.\n+\t(ipa_tm_transform_transaction): Likewise.\n+\t(ipa_tm_transform_clone): Likewise.\n+\t(ipa_tm_execute): Likewise.\n+\t* tree-emutls.c (lower_emutls_function_body): Likewise.\n+\t* tree-inline.c (initialize_cfun): Do not call pop_cfun.\n+\t(tree_function_versioning): Do not call push_cfun, do not set and\n+\trestore current_function_decl.  Remove assert checking consistency of\n+\tcfun and current_function_decl.\n+\t* tree-profile.c (tree_profiling): Do not set and restore\n+\tcurrent_function_decl.\n+\t* tree-sra.c (convert_callers_for_node): Do not set\n+\tcurrent_function_decl.\n+\t(convert_callers): Do not restore current_function_decl.\n+\t(modify_function): Do not set current_function_decl.\n+\t* tree-ssa-structalias.c (ipa_pta_execute): Do not set and restore\n+\tcurrent_function_decl.\n+\n 2012-09-20  Diego Novillo  <dnovillo@google.com>\n \n \tPR target/54631"}, {"sha": "3f1638b7ff92044b81b2199bfc3a84d7c2a38024", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af16bc762a0d806b2297013a56edcf7cd38cb25f/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af16bc762a0d806b2297013a56edcf7cd38cb25f/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=af16bc762a0d806b2297013a56edcf7cd38cb25f", "patch": "@@ -1420,10 +1420,8 @@ estimated_stack_frame_size (struct cgraph_node *node)\n   HOST_WIDE_INT size = 0;\n   size_t i;\n   tree var;\n-  tree old_cur_fun_decl = current_function_decl;\n   struct function *fn = DECL_STRUCT_FUNCTION (node->symbol.decl);\n \n-  current_function_decl = node->symbol.decl;\n   push_cfun (fn);\n \n   init_vars_expansion ();\n@@ -1443,7 +1441,6 @@ estimated_stack_frame_size (struct cgraph_node *node)\n \n   fini_vars_expansion ();\n   pop_cfun ();\n-  current_function_decl = old_cur_fun_decl;\n   return size;\n }\n "}, {"sha": "0e9accecf20978b5a94ee050d9069a9723a6d854", "filename": "gcc/cgraph.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af16bc762a0d806b2297013a56edcf7cd38cb25f/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af16bc762a0d806b2297013a56edcf7cd38cb25f/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=af16bc762a0d806b2297013a56edcf7cd38cb25f", "patch": "@@ -1127,7 +1127,6 @@ cgraph_release_function_body (struct cgraph_node *node)\n {\n   if (DECL_STRUCT_FUNCTION (node->symbol.decl))\n     {\n-      tree old_decl = current_function_decl;\n       push_cfun (DECL_STRUCT_FUNCTION (node->symbol.decl));\n       if (cfun->cfg\n \t  && current_loops)\n@@ -1137,11 +1136,9 @@ cgraph_release_function_body (struct cgraph_node *node)\n \t}\n       if (cfun->gimple_df)\n \t{\n-\t  current_function_decl = node->symbol.decl;\n \t  delete_tree_ssa ();\n \t  delete_tree_cfg_annotations ();\n \t  cfun->eh = NULL;\n-\t  current_function_decl = old_decl;\n \t}\n       if (cfun->cfg)\n \t{"}, {"sha": "64460ac63b7e7a754268de467b62c6b6c0137cfb", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af16bc762a0d806b2297013a56edcf7cd38cb25f/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af16bc762a0d806b2297013a56edcf7cd38cb25f/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=af16bc762a0d806b2297013a56edcf7cd38cb25f", "patch": "@@ -313,7 +313,6 @@ cgraph_process_new_functions (void)\n \t  if (!node->analyzed)\n \t    cgraph_analyze_function (node);\n \t  push_cfun (DECL_STRUCT_FUNCTION (fndecl));\n-\t  current_function_decl = fndecl;\n \t  if ((cgraph_state == CGRAPH_STATE_IPA_SSA\n \t      && !gimple_in_ssa_p (DECL_STRUCT_FUNCTION (fndecl)))\n \t      /* When not optimizing, be sure we run early local passes anyway\n@@ -325,7 +324,6 @@ cgraph_process_new_functions (void)\n \t  free_dominance_info (CDI_POST_DOMINATORS);\n \t  free_dominance_info (CDI_DOMINATORS);\n \t  pop_cfun ();\n-\t  current_function_decl = NULL;\n           cgraph_call_function_insertion_hooks (node);\n \t  break;\n \n@@ -495,14 +493,12 @@ cgraph_add_new_function (tree fndecl, bool lowered)\n \tif (!lowered && cgraph_state == CGRAPH_STATE_EXPANSION)\n \t  {\n \t    push_cfun (DECL_STRUCT_FUNCTION (fndecl));\n-\t    current_function_decl = fndecl;\n \t    gimple_register_cfg_hooks ();\n \t    bitmap_obstack_initialize (NULL);\n \t    execute_pass_list (all_lowering_passes);\n \t    execute_pass_list (pass_early_local_passes.pass.sub);\n \t    bitmap_obstack_release (NULL);\n \t    pop_cfun ();\n-\t    current_function_decl = NULL;\n \n \t    lowered = true;\n \t  }\n@@ -521,15 +517,13 @@ cgraph_add_new_function (tree fndecl, bool lowered)\n \t  node->lowered = true;\n \tcgraph_analyze_function (node);\n \tpush_cfun (DECL_STRUCT_FUNCTION (fndecl));\n-\tcurrent_function_decl = fndecl;\n \tgimple_register_cfg_hooks ();\n \tbitmap_obstack_initialize (NULL);\n \tif (!gimple_in_ssa_p (DECL_STRUCT_FUNCTION (fndecl)))\n \t  execute_pass_list (pass_early_local_passes.pass.sub);\n \tbitmap_obstack_release (NULL);\n \tpop_cfun ();\n \texpand_function (node);\n-\tcurrent_function_decl = NULL;\n \tbreak;\n \n       default:\n@@ -597,7 +591,6 @@ fixup_same_cpp_alias_visibility (symtab_node node, symtab_node target, tree alia\n static void\n cgraph_analyze_function (struct cgraph_node *node)\n {\n-  tree save = current_function_decl;\n   tree decl = node->symbol.decl;\n   location_t saved_loc = input_location;\n   input_location = DECL_SOURCE_LOCATION (decl);\n@@ -638,7 +631,6 @@ cgraph_analyze_function (struct cgraph_node *node)\n     }\n   else\n     {\n-      current_function_decl = decl;\n       push_cfun (DECL_STRUCT_FUNCTION (decl));\n \n       assign_assembler_name_if_neeeded (node->symbol.decl);\n@@ -672,7 +664,6 @@ cgraph_analyze_function (struct cgraph_node *node)\n     }\n   node->analyzed = true;\n \n-  current_function_decl = save;\n   input_location = saved_loc;\n }\n \n@@ -1524,6 +1515,7 @@ assemble_thunk (struct cgraph_node *node)\n       bitmap_obstack_release (NULL);\n     }\n   current_function_decl = NULL;\n+  set_cfun (NULL);\n }\n \n \n@@ -1616,8 +1608,6 @@ expand_function (struct cgraph_node *node)\n   /* Release the default bitmap obstack.  */\n   bitmap_obstack_release (NULL);\n \n-  set_cfun (NULL);\n-\n   /* If requested, warn about function definitions where the function will\n      return a value (usually of some struct or union type) which itself will\n      take up a lot of stack space.  */\n@@ -1662,6 +1652,7 @@ expand_function (struct cgraph_node *node)\n \n   /* Make sure that BE didn't give up on compiling.  */\n   gcc_assert (TREE_ASM_WRITTEN (decl));\n+  set_cfun (NULL);\n   current_function_decl = NULL;\n \n   /* It would make a lot more sense to output thunks before function body to get more"}, {"sha": "2f405b86bf0d5b61b6f8fdfc7dc4155f56133d0d", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af16bc762a0d806b2297013a56edcf7cd38cb25f/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af16bc762a0d806b2297013a56edcf7cd38cb25f/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=af16bc762a0d806b2297013a56edcf7cd38cb25f", "patch": "@@ -1,3 +1,9 @@\n+2012-09-20  Martin Jambor  <mjambor@suse.cz>\n+\n+\t* trans-decl.c (gfc_get_extern_function_decl): Push NULL cfun.  Do not\n+\tset and restore current_function_decl.\n+\t(gfc_init_coarray_decl): Do not set and restore current_function_decl.\n+\n 2012-09-17  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/54608"}, {"sha": "910b1500fdc98673a6df59029a362fe03e1aab95", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af16bc762a0d806b2297013a56edcf7cd38cb25f/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af16bc762a0d806b2297013a56edcf7cd38cb25f/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=af16bc762a0d806b2297013a56edcf7cd38cb25f", "patch": "@@ -1630,17 +1630,14 @@ gfc_get_extern_function_decl (gfc_symbol * sym)\n \t  /* By construction, the external function cannot be\n \t     a contained procedure.  */\n \t  locus old_loc;\n-\t  tree save_fn_decl = current_function_decl;\n \n-\t  current_function_decl = NULL_TREE;\n \t  gfc_save_backend_locus (&old_loc);\n-\t  push_cfun (cfun);\n+\t  push_cfun (NULL);\n \n \t  gfc_create_function_decl (gsym->ns, true);\n \n \t  pop_cfun ();\n \t  gfc_restore_backend_locus (&old_loc);\n-\t  current_function_decl = save_fn_decl;\n \t}\n \n       /* If the namespace has entries, the proc_name is the\n@@ -4861,16 +4858,12 @@ add_argument_checking (stmtblock_t *block, gfc_symbol *sym)\n void\n gfc_init_coarray_decl (bool main_tu)\n {\n-  tree save_fn_decl;\n-\n   if (gfc_option.coarray != GFC_FCOARRAY_LIB)\n     return;\n \n   if (gfort_gvar_caf_this_image || gfort_gvar_caf_num_images)\n     return;\n \n-  save_fn_decl = current_function_decl;\n-  current_function_decl = NULL_TREE;\n   push_cfun (cfun);\n \n   gfort_gvar_caf_this_image\n@@ -4906,7 +4899,6 @@ gfc_init_coarray_decl (bool main_tu)\n   pushdecl_top_level (gfort_gvar_caf_num_images);\n \n   pop_cfun ();\n-  current_function_decl = save_fn_decl;\n }\n \n "}, {"sha": "d6e19543753c510bfb57640ce6a97ef9dd72835b", "filename": "gcc/function.c", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af16bc762a0d806b2297013a56edcf7cd38cb25f/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af16bc762a0d806b2297013a56edcf7cd38cb25f/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=af16bc762a0d806b2297013a56edcf7cd38cb25f", "patch": "@@ -4412,22 +4412,34 @@ set_cfun (struct function *new_cfun)\n \n static VEC(function_p,heap) *cfun_stack;\n \n-/* Push the current cfun onto the stack, and set cfun to new_cfun.  */\n+/* Push the current cfun onto the stack, and set cfun to new_cfun.  Also set\n+   current_function_decl accordingly.  */\n \n void\n push_cfun (struct function *new_cfun)\n {\n+  gcc_assert ((!cfun && !current_function_decl)\n+\t      || (cfun && current_function_decl == cfun->decl));\n   VEC_safe_push (function_p, heap, cfun_stack, cfun);\n+  current_function_decl = new_cfun ? new_cfun->decl : NULL_TREE;\n   set_cfun (new_cfun);\n }\n \n-/* Pop cfun from the stack.  */\n+/* Pop cfun from the stack.  Also set current_function_decl accordingly.  */\n \n void\n pop_cfun (void)\n {\n   struct function *new_cfun = VEC_pop (function_p, cfun_stack);\n+  /* When in_dummy_function, we do have a cfun but current_function_decl is\n+     NULL.  We also allow pushing NULL cfun and subsequently changing\n+     current_function_decl to something else and have both restored by\n+     pop_cfun.  */\n+  gcc_checking_assert (in_dummy_function\n+\t\t       || !cfun\n+\t\t       || current_function_decl == cfun->decl);\n   set_cfun (new_cfun);\n+  current_function_decl = new_cfun ? new_cfun->decl : NULL_TREE;\n }\n \n /* Return value of funcdef and increase it.  */\n@@ -4474,8 +4486,6 @@ allocate_struct_function (tree fndecl, bool abstract_p)\n   OVERRIDE_ABI_FORMAT (fndecl);\n #endif\n \n-  invoke_set_current_function_hook (fndecl);\n-\n   if (fndecl != NULL_TREE)\n     {\n       DECL_STRUCT_FUNCTION (fndecl) = cfun;\n@@ -4501,6 +4511,8 @@ allocate_struct_function (tree fndecl, bool abstract_p)\n          but is this worth the hassle?  */\n       cfun->can_throw_non_call_exceptions = flag_non_call_exceptions;\n     }\n+\n+  invoke_set_current_function_hook (fndecl);\n }\n \n /* This is like allocate_struct_function, but pushes a new cfun for FNDECL\n@@ -4509,7 +4521,13 @@ allocate_struct_function (tree fndecl, bool abstract_p)\n void\n push_struct_function (tree fndecl)\n {\n+  /* When in_dummy_function we might be in the middle of a pop_cfun and\n+     current_function_decl and cfun may not match.  */\n+  gcc_assert (in_dummy_function\n+\t      || (!cfun && !current_function_decl)\n+\t      || (cfun && current_function_decl == cfun->decl));\n   VEC_safe_push (function_p, heap, cfun_stack, cfun);\n+  current_function_decl = fndecl;\n   allocate_struct_function (fndecl, false);\n }\n "}, {"sha": "424ad550d78a76825f4726b667fcf1e8763c3b35", "filename": "gcc/gimple-low.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af16bc762a0d806b2297013a56edcf7cd38cb25f/gcc%2Fgimple-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af16bc762a0d806b2297013a56edcf7cd38cb25f/gcc%2Fgimple-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-low.c?ref=af16bc762a0d806b2297013a56edcf7cd38cb25f", "patch": "@@ -991,7 +991,9 @@ lower_builtin_setjmp (gimple_stmt_iterator *gsi)\n void\n record_vars_into (tree vars, tree fn)\n {\n-  if (fn != current_function_decl)\n+  bool change_cfun = fn != current_function_decl;\n+\n+  if (change_cfun)\n     push_cfun (DECL_STRUCT_FUNCTION (fn));\n \n   for (; vars; vars = DECL_CHAIN (vars))\n@@ -1011,7 +1013,7 @@ record_vars_into (tree vars, tree fn)\n       add_local_decl (cfun, var);\n     }\n \n-  if (fn != current_function_decl)\n+  if (change_cfun)\n     pop_cfun ();\n }\n "}, {"sha": "a871e7d4c0c3673c23d8a78fa2de4dcc492225a2", "filename": "gcc/gimplify.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af16bc762a0d806b2297013a56edcf7cd38cb25f/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af16bc762a0d806b2297013a56edcf7cd38cb25f/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=af16bc762a0d806b2297013a56edcf7cd38cb25f", "patch": "@@ -8287,14 +8287,12 @@ flag_instrument_functions_exclude_p (tree fndecl)\n void\n gimplify_function_tree (tree fndecl)\n {\n-  tree oldfn, parm, ret;\n+  tree parm, ret;\n   gimple_seq seq;\n   gimple bind;\n \n   gcc_assert (!gimple_body (fndecl));\n \n-  oldfn = current_function_decl;\n-  current_function_decl = fndecl;\n   if (DECL_STRUCT_FUNCTION (fndecl))\n     push_cfun (DECL_STRUCT_FUNCTION (fndecl));\n   else\n@@ -8379,7 +8377,6 @@ gimplify_function_tree (tree fndecl)\n   DECL_SAVED_TREE (fndecl) = NULL_TREE;\n   cfun->curr_properties = PROP_gimple_any;\n \n-  current_function_decl = oldfn;\n   pop_cfun ();\n }\n "}, {"sha": "31ecec9af9903ba6ac3f45c784cd72f260895e08", "filename": "gcc/ipa-inline-analysis.c", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af16bc762a0d806b2297013a56edcf7cd38cb25f/gcc%2Fipa-inline-analysis.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af16bc762a0d806b2297013a56edcf7cd38cb25f/gcc%2Fipa-inline-analysis.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline-analysis.c?ref=af16bc762a0d806b2297013a56edcf7cd38cb25f", "patch": "@@ -2554,7 +2554,6 @@ compute_inline_parameters (struct cgraph_node *node, bool early)\n   HOST_WIDE_INT self_stack_size;\n   struct cgraph_edge *e;\n   struct inline_summary *info;\n-  tree old_decl = current_function_decl;\n \n   gcc_assert (!node->global.inlined_to);\n \n@@ -2581,7 +2580,6 @@ compute_inline_parameters (struct cgraph_node *node, bool early)\n     }\n \n   /* Even is_gimple_min_invariant rely on current_function_decl.  */\n-  current_function_decl = node->symbol.decl;\n   push_cfun (DECL_STRUCT_FUNCTION (node->symbol.decl));\n \n   /* Estimate the stack size for the function if we're optimizing.  */\n@@ -2623,7 +2621,6 @@ compute_inline_parameters (struct cgraph_node *node, bool early)\n   info->size = info->self_size;\n   info->stack_frame_offset = 0;\n   info->estimated_stack_size = info->estimated_self_stack_size;\n-  current_function_decl = old_decl;\n   pop_cfun ();\n }\n \n@@ -3554,7 +3551,6 @@ static void\n inline_analyze_function (struct cgraph_node *node)\n {\n   push_cfun (DECL_STRUCT_FUNCTION (node->symbol.decl));\n-  current_function_decl = node->symbol.decl;\n \n   if (dump_file)\n     fprintf (dump_file, \"\\nAnalyzing function: %s/%u\\n\",\n@@ -3563,7 +3559,6 @@ inline_analyze_function (struct cgraph_node *node)\n     inline_indirect_intraprocedural_analysis (node);\n   compute_inline_parameters (node, false);\n \n-  current_function_decl = NULL;\n   pop_cfun ();\n }\n "}, {"sha": "7e1354d1d511996c175f73206d95dfe4a48e9424", "filename": "gcc/ipa-prop.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af16bc762a0d806b2297013a56edcf7cd38cb25f/gcc%2Fipa-prop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af16bc762a0d806b2297013a56edcf7cd38cb25f/gcc%2Fipa-prop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.c?ref=af16bc762a0d806b2297013a56edcf7cd38cb25f", "patch": "@@ -1929,7 +1929,6 @@ ipa_analyze_node (struct cgraph_node *node)\n   ipa_check_create_edge_args ();\n   info = IPA_NODE_REF (node);\n   push_cfun (DECL_STRUCT_FUNCTION (node->symbol.decl));\n-  current_function_decl = node->symbol.decl;\n   ipa_initialize_node_params (node);\n \n   param_count = ipa_get_param_count (info);\n@@ -1947,7 +1946,6 @@ ipa_analyze_node (struct cgraph_node *node)\n \tBITMAP_FREE (parms_ainfo[i].pt_visited_statements);\n     }\n \n-  current_function_decl = NULL;\n   pop_cfun ();\n }\n "}, {"sha": "c4f23d9e1c394eb2955adcf00d9df89f9ee49c41", "filename": "gcc/ipa-pure-const.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af16bc762a0d806b2297013a56edcf7cd38cb25f/gcc%2Fipa-pure-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af16bc762a0d806b2297013a56edcf7cd38cb25f/gcc%2Fipa-pure-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-pure-const.c?ref=af16bc762a0d806b2297013a56edcf7cd38cb25f", "patch": "@@ -725,7 +725,6 @@ static funct_state\n analyze_function (struct cgraph_node *fn, bool ipa)\n {\n   tree decl = fn->symbol.decl;\n-  tree old_decl = current_function_decl;\n   funct_state l;\n   basic_block this_block;\n \n@@ -753,7 +752,6 @@ analyze_function (struct cgraph_node *fn, bool ipa)\n     }\n \n   push_cfun (DECL_STRUCT_FUNCTION (decl));\n-  current_function_decl = decl;\n \n   FOR_EACH_BB (this_block)\n     {\n@@ -821,7 +819,6 @@ analyze_function (struct cgraph_node *fn, bool ipa)\n     l->can_throw = false;\n \n   pop_cfun ();\n-  current_function_decl = old_decl;\n   if (dump_file)\n     {\n       if (l->looping)"}, {"sha": "a4b94b10ad0b0797af8ee2bd3f27ed9e86272da2", "filename": "gcc/lto-streamer-in.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af16bc762a0d806b2297013a56edcf7cd38cb25f/gcc%2Flto-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af16bc762a0d806b2297013a56edcf7cd38cb25f/gcc%2Flto-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-in.c?ref=af16bc762a0d806b2297013a56edcf7cd38cb25f", "patch": "@@ -1036,7 +1036,6 @@ void\n lto_input_function_body (struct lto_file_decl_data *file_data,\n \t\t\t tree fn_decl, const char *data)\n {\n-  current_function_decl = fn_decl;\n   lto_read_body (file_data, fn_decl, data, LTO_section_function_body);\n }\n "}, {"sha": "709eb60ce388c38d637d2c5b4531bd4b684e38f3", "filename": "gcc/lto-streamer-out.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af16bc762a0d806b2297013a56edcf7cd38cb25f/gcc%2Flto-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af16bc762a0d806b2297013a56edcf7cd38cb25f/gcc%2Flto-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-out.c?ref=af16bc762a0d806b2297013a56edcf7cd38cb25f", "patch": "@@ -797,7 +797,6 @@ output_function (struct cgraph_node *node)\n   gcc_assert (current_function_decl == NULL_TREE && cfun == NULL);\n \n   /* Set current_function_decl and cfun.  */\n-  current_function_decl = function;\n   push_cfun (fn);\n \n   /* Make string 0 be a NULL string.  */\n@@ -851,7 +850,6 @@ output_function (struct cgraph_node *node)\n \n   destroy_output_block (ob);\n \n-  current_function_decl = NULL;\n   pop_cfun ();\n }\n "}, {"sha": "7c437d6c9e55ac66e057959668852a7ab9ffe27d", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af16bc762a0d806b2297013a56edcf7cd38cb25f/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af16bc762a0d806b2297013a56edcf7cd38cb25f/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=af16bc762a0d806b2297013a56edcf7cd38cb25f", "patch": "@@ -1,3 +1,8 @@\n+2012-09-20  Martin Jambor  <mjambor@suse.cz>\n+\n+\t* lto.c (lto_materialize_function): Call push_struct_function and\n+\tpop_cfun.\n+\n 2012-09-19  Dehao Chen  <dehao@google.com>\n \n \t* lto/lto.c (lto_fixup_prevailing_decls): Remove tree.exp.block field."}, {"sha": "44718537b3c2b41c71974a3d2bb5019240a43f8f", "filename": "gcc/lto/lto.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af16bc762a0d806b2297013a56edcf7cd38cb25f/gcc%2Flto%2Flto.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af16bc762a0d806b2297013a56edcf7cd38cb25f/gcc%2Flto%2Flto.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto.c?ref=af16bc762a0d806b2297013a56edcf7cd38cb25f", "patch": "@@ -221,14 +221,15 @@ lto_materialize_function (struct cgraph_node *node)\n \n \t  gcc_assert (DECL_STRUCT_FUNCTION (decl) == NULL);\n \n-\t  allocate_struct_function (decl, false);\n+\t  push_struct_function (decl);\n \t  announce_function (decl);\n \t  lto_input_function_body (file_data, decl, data);\n \t  if (DECL_FUNCTION_PERSONALITY (decl) && !first_personality_decl)\n \t    first_personality_decl = DECL_FUNCTION_PERSONALITY (decl);\n \t  lto_stats.num_function_bodies++;\n \t  lto_free_section_data (file_data, LTO_section_function_body, name,\n \t\t\t\t data, len);\n+\t  pop_cfun ();\n \t  ggc_collect ();\n \t}\n     }"}, {"sha": "4d32fb6d35d73f2a4b73e43f1245f1d76154cb48", "filename": "gcc/omp-low.c", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af16bc762a0d806b2297013a56edcf7cd38cb25f/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af16bc762a0d806b2297013a56edcf7cd38cb25f/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=af16bc762a0d806b2297013a56edcf7cd38cb25f", "patch": "@@ -1243,7 +1243,7 @@ static void\n finalize_task_copyfn (gimple task_stmt)\n {\n   struct function *child_cfun;\n-  tree child_fn, old_fn;\n+  tree child_fn;\n   gimple_seq seq = NULL, new_seq;\n   gimple bind;\n \n@@ -1257,9 +1257,7 @@ finalize_task_copyfn (gimple task_stmt)\n   DECL_STRUCT_FUNCTION (child_fn)->curr_properties\n     = cfun->curr_properties & ~PROP_loops;\n \n-  old_fn = current_function_decl;\n   push_cfun (child_cfun);\n-  current_function_decl = child_fn;\n   bind = gimplify_body (child_fn, false);\n   gimple_seq_add_stmt (&seq, bind);\n   new_seq = maybe_catch_exception (seq);\n@@ -1271,7 +1269,6 @@ finalize_task_copyfn (gimple task_stmt)\n     }\n   gimple_set_body (child_fn, seq);\n   pop_cfun ();\n-  current_function_decl = old_fn;\n \n   cgraph_add_new_function (child_fn, false);\n }\n@@ -3388,7 +3385,6 @@ expand_omp_taskreg (struct omp_region *region)\n   basic_block entry_bb, exit_bb, new_bb;\n   struct function *child_cfun;\n   tree child_fn, block, t;\n-  tree save_current;\n   gimple_stmt_iterator gsi;\n   gimple entry_stmt, stmt;\n   edge e;\n@@ -3588,8 +3584,6 @@ expand_omp_taskreg (struct omp_region *region)\n       /* Fix the callgraph edges for child_cfun.  Those for cfun will be\n \t fixed in a following pass.  */\n       push_cfun (child_cfun);\n-      save_current = current_function_decl;\n-      current_function_decl = child_fn;\n       if (optimize)\n \toptimize_omp_library_calls (entry_stmt);\n       rebuild_cgraph_edges ();\n@@ -3610,7 +3604,6 @@ expand_omp_taskreg (struct omp_region *region)\n \t}\n       if (gimple_in_ssa_p (cfun))\n \tupdate_ssa (TODO_update_ssa);\n-      current_function_decl = save_current;\n       pop_cfun ();\n     }\n \n@@ -6456,7 +6449,7 @@ create_task_copyfn (gimple task_stmt, omp_context *ctx)\n \n   /* Populate the function.  */\n   push_gimplify_context (&gctx);\n-  current_function_decl = child_fn;\n+  push_cfun (child_cfun);\n \n   bind = build3 (BIND_EXPR, void_type_node, NULL, NULL, NULL);\n   TREE_SIDE_EFFECTS (bind) = 1;\n@@ -6503,8 +6496,6 @@ create_task_copyfn (gimple task_stmt, omp_context *ctx)\n   else\n     tcctx.cb.decl_map = NULL;\n \n-  push_cfun (child_cfun);\n-\n   arg = DECL_ARGUMENTS (child_fn);\n   TREE_TYPE (arg) = build_pointer_type (record_type);\n   sarg = DECL_CHAIN (arg);\n@@ -6662,7 +6653,6 @@ create_task_copyfn (gimple task_stmt, omp_context *ctx)\n   pop_gimplify_context (NULL);\n   BIND_EXPR_BODY (bind) = list;\n   pop_cfun ();\n-  current_function_decl = ctx->cb.src_fn;\n }\n \n /* Lower the OpenMP parallel or task directive in the current statement"}, {"sha": "ba4e98e068276b430a4e0ebb1a81da889de8deff", "filename": "gcc/passes.c", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af16bc762a0d806b2297013a56edcf7cd38cb25f/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af16bc762a0d806b2297013a56edcf7cd38cb25f/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=af16bc762a0d806b2297013a56edcf7cd38cb25f", "patch": "@@ -703,7 +703,6 @@ void\n dump_passes (void)\n {\n   struct cgraph_node *n, *node = NULL;\n-  tree save_fndecl = current_function_decl;\n \n   create_pass_tab();\n \n@@ -718,7 +717,6 @@ dump_passes (void)\n     return;\n \n   push_cfun (DECL_STRUCT_FUNCTION (node->symbol.decl));\n-  current_function_decl = node->symbol.decl;\n \n   dump_pass_list (all_lowering_passes, 1);\n   dump_pass_list (all_small_ipa_passes, 1);\n@@ -728,7 +726,6 @@ dump_passes (void)\n   dump_pass_list (all_passes, 1);\n \n   pop_cfun ();\n-  current_function_decl = save_fndecl;\n }\n \n \n@@ -1701,14 +1698,12 @@ do_per_function (void (*callback) (void *data), void *data)\n \t    && (!node->clone_of || node->symbol.decl != node->clone_of->symbol.decl))\n \t  {\n \t    push_cfun (DECL_STRUCT_FUNCTION (node->symbol.decl));\n-\t    current_function_decl = node->symbol.decl;\n \t    callback (data);\n \t    if (!flag_wpa)\n \t      {\n \t        free_dominance_info (CDI_DOMINATORS);\n \t        free_dominance_info (CDI_POST_DOMINATORS);\n \t      }\n-\t    current_function_decl = NULL;\n \t    pop_cfun ();\n \t    ggc_collect ();\n \t  }\n@@ -1749,11 +1744,9 @@ do_per_function_toporder (void (*callback) (void *data), void *data)\n \t  if (cgraph_function_with_gimple_body_p (node))\n \t    {\n \t      push_cfun (DECL_STRUCT_FUNCTION (node->symbol.decl));\n-\t      current_function_decl = node->symbol.decl;\n \t      callback (data);\n \t      free_dominance_info (CDI_DOMINATORS);\n \t      free_dominance_info (CDI_POST_DOMINATORS);\n-\t      current_function_decl = NULL;\n \t      pop_cfun ();\n \t      ggc_collect ();\n \t    }"}, {"sha": "242b470a54e6ec24f7a7f20aefa5776eea15b0b9", "filename": "gcc/trans-mem.c", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af16bc762a0d806b2297013a56edcf7cd38cb25f/gcc%2Ftrans-mem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af16bc762a0d806b2297013a56edcf7cd38cb25f/gcc%2Ftrans-mem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftrans-mem.c?ref=af16bc762a0d806b2297013a56edcf7cd38cb25f", "patch": "@@ -3987,7 +3987,6 @@ ipa_tm_scan_irr_function (struct cgraph_node *node, bool for_clone)\n       || DECL_STRUCT_FUNCTION (node->symbol.decl)->cfg == NULL)\n     return false;\n \n-  current_function_decl = node->symbol.decl;\n   push_cfun (DECL_STRUCT_FUNCTION (node->symbol.decl));\n   calculate_dominance_info (CDI_DOMINATORS);\n \n@@ -4059,7 +4058,6 @@ ipa_tm_scan_irr_function (struct cgraph_node *node, bool for_clone)\n \n   VEC_free (basic_block, heap, queue);\n   pop_cfun ();\n-  current_function_decl = NULL;\n \n   return ret;\n }\n@@ -4697,7 +4695,6 @@ ipa_tm_transform_transaction (struct cgraph_node *node)\n \n   d = get_cg_data (&node, true);\n \n-  current_function_decl = node->symbol.decl;\n   push_cfun (DECL_STRUCT_FUNCTION (node->symbol.decl));\n   calculate_dominance_info (CDI_DOMINATORS);\n \n@@ -4722,7 +4719,6 @@ ipa_tm_transform_transaction (struct cgraph_node *node)\n     update_ssa (TODO_update_ssa_only_virtuals);\n \n   pop_cfun ();\n-  current_function_decl = NULL;\n }\n \n /* Transform the calls within the transactional clone of NODE.  */\n@@ -4741,8 +4737,7 @@ ipa_tm_transform_clone (struct cgraph_node *node)\n   if (!node->callees && !node->indirect_calls && !d->irrevocable_blocks_clone)\n     return;\n \n-  current_function_decl = d->clone->symbol.decl;\n-  push_cfun (DECL_STRUCT_FUNCTION (current_function_decl));\n+  push_cfun (DECL_STRUCT_FUNCTION (d->clone->symbol.decl));\n   calculate_dominance_info (CDI_DOMINATORS);\n \n   need_ssa_rename =\n@@ -4753,7 +4748,6 @@ ipa_tm_transform_clone (struct cgraph_node *node)\n     update_ssa (TODO_update_ssa_only_virtuals);\n \n   pop_cfun ();\n-  current_function_decl = NULL;\n }\n \n /* Main entry point for the transactional memory IPA pass.  */\n@@ -4800,7 +4794,6 @@ ipa_tm_execute (void)\n \t    continue;\n \t  }\n \n-\tcurrent_function_decl = node->symbol.decl;\n \tpush_cfun (DECL_STRUCT_FUNCTION (node->symbol.decl));\n \tcalculate_dominance_info (CDI_DOMINATORS);\n \n@@ -4820,7 +4813,6 @@ ipa_tm_execute (void)\n \t  }\n \n \tpop_cfun ();\n-\tcurrent_function_decl = NULL;\n       }\n \n   /* For every local function on the callee list, scan as if we will be"}, {"sha": "de71b23f3c2faf207b1b4c1913c8d49ee41d287c", "filename": "gcc/tree-emutls.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af16bc762a0d806b2297013a56edcf7cd38cb25f/gcc%2Ftree-emutls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af16bc762a0d806b2297013a56edcf7cd38cb25f/gcc%2Ftree-emutls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-emutls.c?ref=af16bc762a0d806b2297013a56edcf7cd38cb25f", "patch": "@@ -618,7 +618,6 @@ lower_emutls_function_body (struct cgraph_node *node)\n   struct lower_emutls_data d;\n   bool any_edge_inserts = false;\n \n-  current_function_decl = node->symbol.decl;\n   push_cfun (DECL_STRUCT_FUNCTION (node->symbol.decl));\n \n   d.cfun_node = node;\n@@ -689,7 +688,6 @@ lower_emutls_function_body (struct cgraph_node *node)\n     gsi_commit_edge_inserts ();\n \n   pop_cfun ();\n-  current_function_decl = NULL;\n }\n \n /* Create emutls variable for VAR, DATA is pointer to static"}, {"sha": "a585c0b88dc7501f6db52149e25d3d0d651a72a3", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af16bc762a0d806b2297013a56edcf7cd38cb25f/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af16bc762a0d806b2297013a56edcf7cd38cb25f/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=af16bc762a0d806b2297013a56edcf7cd38cb25f", "patch": "@@ -2048,7 +2048,8 @@ remap_decl_1 (tree decl, void *data)\n }\n \n /* Build struct function and associated datastructures for the new clone\n-   NEW_FNDECL to be build.  CALLEE_FNDECL is the original */\n+   NEW_FNDECL to be build.  CALLEE_FNDECL is the original.  Function changes\n+   the cfun to the function of new_fndecl (and current_function_decl too).  */\n \n static void\n initialize_cfun (tree new_fndecl, tree callee_fndecl, gcov_type count)\n@@ -2113,7 +2114,6 @@ initialize_cfun (tree new_fndecl, tree callee_fndecl, gcov_type count)\n       cfun->gimple_df->in_ssa_p = true;\n       init_ssa_operands (cfun);\n     }\n-  pop_cfun ();\n }\n \n /* Helper function for copy_cfg_body.  Move debug stmts from the end\n@@ -5047,8 +5047,6 @@ tree_function_versioning (tree old_decl, tree new_decl,\n   struct ipa_replace_map *replace_info;\n   basic_block old_entry_block, bb;\n   VEC (gimple, heap) *init_stmts = VEC_alloc (gimple, heap, 10);\n-\n-  tree old_current_function_decl = current_function_decl;\n   tree vars = NULL_TREE;\n \n   gcc_assert (TREE_CODE (old_decl) == FUNCTION_DECL\n@@ -5119,14 +5117,12 @@ tree_function_versioning (tree old_decl, tree new_decl,\n   id.transform_return_to_modify = false;\n   id.transform_lang_insert_block = NULL;\n \n-  current_function_decl = new_decl;\n   old_entry_block = ENTRY_BLOCK_PTR_FOR_FUNCTION\n     (DECL_STRUCT_FUNCTION (old_decl));\n   initialize_cfun (new_decl, old_decl,\n \t\t   old_entry_block->count);\n   DECL_STRUCT_FUNCTION (new_decl)->gimple_df->ipa_pta\n     = id.src_cfun->gimple_df->ipa_pta;\n-  push_cfun (DECL_STRUCT_FUNCTION (new_decl));\n \n   /* Copy the function's static chain.  */\n   p = DECL_STRUCT_FUNCTION (old_decl)->static_chain_decl;\n@@ -5280,9 +5276,6 @@ tree_function_versioning (tree old_decl, tree new_decl,\n   gcc_assert (!id.debug_stmts);\n   VEC_free (gimple, heap, init_stmts);\n   pop_cfun ();\n-  current_function_decl = old_current_function_decl;\n-  gcc_assert (!current_function_decl\n-\t      || DECL_STRUCT_FUNCTION (current_function_decl) == cfun);\n   return;\n }\n "}, {"sha": "fa8173ecbaa5a2bb45a0ddafa8fe7be998b1b4ef", "filename": "gcc/tree-profile.c", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af16bc762a0d806b2297013a56edcf7cd38cb25f/gcc%2Ftree-profile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af16bc762a0d806b2297013a56edcf7cd38cb25f/gcc%2Ftree-profile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-profile.c?ref=af16bc762a0d806b2297013a56edcf7cd38cb25f", "patch": "@@ -475,7 +475,6 @@ tree_profiling (void)\n \tcontinue;\n \n       push_cfun (DECL_STRUCT_FUNCTION (node->symbol.decl));\n-      current_function_decl = node->symbol.decl;\n \n       /* Local pure-const may imply need to fixup the cfg.  */\n       if (execute_fixup_cfg () & TODO_cleanup_cfg)\n@@ -497,8 +496,6 @@ tree_profiling (void)\n \t easy to adjust it, if and when there is some.  */\n       free_dominance_info (CDI_DOMINATORS);\n       free_dominance_info (CDI_POST_DOMINATORS);\n-\n-      current_function_decl = NULL;\n       pop_cfun ();\n     }\n \n@@ -533,7 +530,6 @@ tree_profiling (void)\n \tcontinue;\n \n       push_cfun (DECL_STRUCT_FUNCTION (node->symbol.decl));\n-      current_function_decl = node->symbol.decl;\n \n       FOR_EACH_BB (bb)\n \t{\n@@ -550,7 +546,6 @@ tree_profiling (void)\n \n       rebuild_cgraph_edges ();\n \n-      current_function_decl = NULL;\n       pop_cfun ();\n     }\n "}, {"sha": "5acb61250795b0da92bb88c667071585b37758c9", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af16bc762a0d806b2297013a56edcf7cd38cb25f/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af16bc762a0d806b2297013a56edcf7cd38cb25f/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=af16bc762a0d806b2297013a56edcf7cd38cb25f", "patch": "@@ -4616,7 +4616,6 @@ convert_callers_for_node (struct cgraph_node *node,\n \n   for (cs = node->callers; cs; cs = cs->next_caller)\n     {\n-      current_function_decl = cs->caller->symbol.decl;\n       push_cfun (DECL_STRUCT_FUNCTION (cs->caller->symbol.decl));\n \n       if (dump_file)\n@@ -4645,14 +4644,11 @@ static void\n convert_callers (struct cgraph_node *node, tree old_decl,\n \t\t ipa_parm_adjustment_vec adjustments)\n {\n-  tree old_cur_fndecl = current_function_decl;\n   basic_block this_block;\n \n   cgraph_for_node_and_aliases (node, convert_callers_for_node,\n \t\t\t       adjustments, false);\n \n-  current_function_decl = old_cur_fndecl;\n-\n   if (!encountered_recursive_call)\n     return;\n \n@@ -4693,15 +4689,12 @@ modify_function (struct cgraph_node *node, ipa_parm_adjustment_vec adjustments)\n   rebuild_cgraph_edges ();\n   free_dominance_info (CDI_DOMINATORS);\n   pop_cfun ();\n-  current_function_decl = NULL_TREE;\n \n   new_node = cgraph_function_versioning (node, redirect_callers, NULL, NULL,\n \t\t\t\t\t false, NULL, NULL, \"isra\");\n   VEC_free (cgraph_edge_p, heap, redirect_callers);\n \n-  current_function_decl = new_node->symbol.decl;\n   push_cfun (DECL_STRUCT_FUNCTION (new_node->symbol.decl));\n-\n   ipa_modify_formal_parameters (current_function_decl, adjustments, \"ISRA\");\n   cfg_changed = ipa_sra_modify_function_body (adjustments);\n   sra_ipa_reset_debug_stmts (adjustments);"}, {"sha": "711fbef2a64ae4af4126ab75c469f30c05d06074", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af16bc762a0d806b2297013a56edcf7cd38cb25f/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af16bc762a0d806b2297013a56edcf7cd38cb25f/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=af16bc762a0d806b2297013a56edcf7cd38cb25f", "patch": "@@ -6925,7 +6925,6 @@ ipa_pta_execute (void)\n     {\n       struct function *func;\n       basic_block bb;\n-      tree old_func_decl;\n \n       /* Nodes without a body are not interesting.  */\n       if (!cgraph_function_with_gimple_body_p (node))\n@@ -6943,9 +6942,7 @@ ipa_pta_execute (void)\n \t}\n \n       func = DECL_STRUCT_FUNCTION (node->symbol.decl);\n-      old_func_decl = current_function_decl;\n       push_cfun (func);\n-      current_function_decl = node->symbol.decl;\n \n       /* For externally visible or attribute used annotated functions use\n \t local constraints for their arguments.\n@@ -7002,7 +6999,6 @@ ipa_pta_execute (void)\n \t    }\n \t}\n \n-      current_function_decl = old_func_decl;\n       pop_cfun ();\n \n       if (dump_file)"}]}