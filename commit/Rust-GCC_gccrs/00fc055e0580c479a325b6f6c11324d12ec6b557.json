{"sha": "00fc055e0580c479a325b6f6c11324d12ec6b557", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDBmYzA1NWUwNTgwYzQ3OWEzMjViNmY2YzExMzI0ZDEyZWM2YjU1Nw==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2004-12-12T01:41:27Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2004-12-12T01:41:27Z"}, "message": "reg-stack.c (change_stack): Avoid placing the new top-of-stack in its correct location during popping if...\n\n\n\t* reg-stack.c (change_stack): Avoid placing the new top-of-stack in\n\tits correct location during popping if we need to permute the stack\n\tafterwards.  Attempt to preserve the original stack ordering.\n\nFrom-SVN: r92043", "tree": {"sha": "9d9050608237d21b30cfcb7ae968428a59629dca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9d9050608237d21b30cfcb7ae968428a59629dca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/00fc055e0580c479a325b6f6c11324d12ec6b557", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00fc055e0580c479a325b6f6c11324d12ec6b557", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00fc055e0580c479a325b6f6c11324d12ec6b557", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00fc055e0580c479a325b6f6c11324d12ec6b557/comments", "author": null, "committer": null, "parents": [{"sha": "def6dcd75ceb11971c88266578629356b5386929", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/def6dcd75ceb11971c88266578629356b5386929", "html_url": "https://github.com/Rust-GCC/gccrs/commit/def6dcd75ceb11971c88266578629356b5386929"}], "stats": {"total": 67, "additions": 52, "deletions": 15}, "files": [{"sha": "c2e586500a21fdc509b4705ba6466d0a7a818d49", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00fc055e0580c479a325b6f6c11324d12ec6b557/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00fc055e0580c479a325b6f6c11324d12ec6b557/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=00fc055e0580c479a325b6f6c11324d12ec6b557", "patch": "@@ -1,3 +1,9 @@\n+2004-12-11  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* reg-stack.c (change_stack): Avoid placing the new top-of-stack in\n+\tits correct location during popping if we need to permute the stack\n+\tafterwards.  Attempt to preserve the original stack ordering.\n+\n 2004-12-12  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* lcm.c (optimize_mode_switching): Free insert and delete in"}, {"sha": "2ba963efcc5a4103392d78a65ee3c6efe73270d9", "filename": "gcc/reg-stack.c", "status": "modified", "additions": 46, "deletions": 15, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00fc055e0580c479a325b6f6c11324d12ec6b557/gcc%2Freg-stack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00fc055e0580c479a325b6f6c11324d12ec6b557/gcc%2Freg-stack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freg-stack.c?ref=00fc055e0580c479a325b6f6c11324d12ec6b557", "patch": "@@ -2374,20 +2374,25 @@ change_stack (rtx insn, stack old, stack new, enum emit_where where)\n     {\n       bool slots[REG_STACK_SIZE];\n       int pops[REG_STACK_SIZE];\n-      int next, dest;\n+      int next, dest, topsrc;\n \n       /* First pass to determine the free slots.  */\n       for (reg = 0; reg <= new->top; reg++)\n \tslots[reg] = TEST_HARD_REG_BIT (new->reg_set, old->reg[reg]);\n \n       /* Second pass to allocate preferred slots.  */\n+      topsrc = -1;\n       for (reg = old->top; reg > new->top; reg--)\n \tif (TEST_HARD_REG_BIT (new->reg_set, old->reg[reg]))\n \t  {\n \t    dest = -1;\n \t    for (next = 0; next <= new->top; next++)\n \t      if (!slots[next] && new->reg[next] == old->reg[reg])\n \t\t{\n+\t\t  /* If this is a preference for the new top of stack, record\n+\t\t     the fact by remembering it's old->reg in topsrc.  */\n+                  if (next == new->top)\n+\t\t    topsrc = reg;\n \t\t  slots[next] = true;\n \t\t  dest = next;\n \t\t  break;\n@@ -2397,36 +2402,62 @@ change_stack (rtx insn, stack old, stack new, enum emit_where where)\n \telse\n \t  pops[reg] = reg;\n \n+      /* Intentionally, avoid placing the top of stack in it's correct\n+\t location, if we still need to permute the stack below and we\n+\t can usefully place it somewhere else.  This is the case if any\n+\t slot is still unallocated, in which case we should place the\n+\t top of stack there.  */\n+      if (topsrc != -1)\n+\tfor (reg = 0; reg < new->top; reg++)\n+\t  if (!slots[reg])\n+\t    {\n+\t      pops[topsrc] = reg;\n+\t      slots[new->top] = false;\n+\t      slots[reg] = true;\n+\t      break;\n+\t    }\n+\n       /* Third pass allocates remaining slots and emits pop insns.  */\n-      next = 0;\n+      next = new->top;\n       for (reg = old->top; reg > new->top; reg--)\n \t{\n \t  dest = pops[reg];\n \t  if (dest == -1)\n \t    {\n \t      /* Find next free slot.  */\n \t      while (slots[next])\n-\t\tnext++;\n-\t      dest = next++;\n+\t\tnext--;\n+\t      dest = next--;\n \t    }\n \t  emit_pop_insn (insn, old, FP_MODE_REG (old->reg[dest], DFmode),\n \t\t\t EMIT_BEFORE);\n \t}\n     }\n   else\n-    /* The following loop attempts to maximize the number of times we\n-       pop the top of the stack, as this permits the use of the faster\n-       ffreep instruction on platforms that support it.  */\n-    for (reg = 0; reg <= old->top; reg++)\n-      if (! TEST_HARD_REG_BIT (new->reg_set, old->reg[reg]))\n-\t{\n-\t  while (old->top > reg\n-\t\t && ! TEST_HARD_REG_BIT (new->reg_set, old->reg[old->top]))\n-\t    emit_pop_insn (insn, old, FP_MODE_REG (old->reg[old->top], DFmode),\n+    {\n+      /* The following loop attempts to maximize the number of times we\n+\t pop the top of the stack, as this permits the use of the faster\n+\t ffreep instruction on platforms that support it.  */\n+      int live, next;\n+\n+      live = 0;\n+      for (reg = 0; reg <= old->top; reg++)\n+        if (TEST_HARD_REG_BIT (new->reg_set, old->reg[reg]))\n+          live++;\n+\n+      next = live;\n+      while (old->top >= live)\n+        if (TEST_HARD_REG_BIT (new->reg_set, old->reg[old->top]))\n+\t  {\n+\t    while (TEST_HARD_REG_BIT (new->reg_set, old->reg[next]))\n+\t      next--;\n+\t    emit_pop_insn (insn, old, FP_MODE_REG (old->reg[next], DFmode),\n \t\t\t   EMIT_BEFORE);\n-\t  emit_pop_insn (insn, old, FP_MODE_REG (old->reg[reg], DFmode),\n+\t  }\n+\telse\n+\t  emit_pop_insn (insn, old, FP_MODE_REG (old->reg[old->top], DFmode),\n \t\t\t EMIT_BEFORE);\n-\t}\n+    }\n \n   if (new->top == -2)\n     {"}]}