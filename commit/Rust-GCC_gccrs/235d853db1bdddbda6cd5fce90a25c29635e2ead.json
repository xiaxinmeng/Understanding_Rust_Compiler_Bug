{"sha": "235d853db1bdddbda6cd5fce90a25c29635e2ead", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjM1ZDg1M2RiMWJkZGRiZGE2Y2Q1ZmNlOTBhMjVjMjk2MzVlMmVhZA==", "commit": {"author": {"name": "Dave Love", "email": "fx@gcc.gnu.org", "date": "1998-07-06T09:03:28Z"}, "committer": {"name": "Dave Love", "email": "fx@gcc.gnu.org", "date": "1998-07-06T09:03:28Z"}, "message": "f2cext.c (system_clock_): Remove (just f90 intrinsic).\n\n1998-07-05  Dave Love  <d.love@dl.ac.uk>\n\t* f2cext.c (system_clock_): Remove (just f90 intrinsic).\n\t* Makefile.in (F2CEXT): Add datetime, remove sclock.\n\t(UOBJ): Add libU77/datetime_.o.\n\t* libU77/config.h.in: Add HAVE_GETTIMEOFDAY.\n\t* libU77/configure.in: Check for gettimeofday.\n\t* libU77/datetime_.c: New file.\n\t* libU77/sys_clock_.c: Allow optional args.\n\t* libU77/Makefile.in (G77DIR): Fix for current directory\n\tstructure.\n\t(SRCS, OBJS): Add datetime.\n\nFrom-SVN: r20942", "tree": {"sha": "8541c71dd9f45270bd38c6c3c8b71160a9de2d8f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8541c71dd9f45270bd38c6c3c8b71160a9de2d8f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/235d853db1bdddbda6cd5fce90a25c29635e2ead", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/235d853db1bdddbda6cd5fce90a25c29635e2ead", "html_url": "https://github.com/Rust-GCC/gccrs/commit/235d853db1bdddbda6cd5fce90a25c29635e2ead", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/235d853db1bdddbda6cd5fce90a25c29635e2ead/comments", "author": null, "committer": null, "parents": [{"sha": "a60cb98615df7322ca32c4889f3d57d7fa577fce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a60cb98615df7322ca32c4889f3d57d7fa577fce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a60cb98615df7322ca32c4889f3d57d7fa577fce"}], "stats": {"total": 78, "additions": 78, "deletions": 0}, "files": [{"sha": "4b5d28ae36cbc6161d13345b1ba7a1518f264041", "filename": "libf2c/libU77/datetime_.c", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/235d853db1bdddbda6cd5fce90a25c29635e2ead/libf2c%2FlibU77%2Fdatetime_.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/235d853db1bdddbda6cd5fce90a25c29635e2ead/libf2c%2FlibU77%2Fdatetime_.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibU77%2Fdatetime_.c?ref=235d853db1bdddbda6cd5fce90a25c29635e2ead", "patch": "@@ -0,0 +1,78 @@\n+/* Copyright (C) 1997, 1998 Free Software Foundation, Inc.\n+This file is part of GNU Fortran libU77 library.\n+\n+This library is free software; you can redistribute it and/or modify it\n+under the terms of the GNU Library General Public License as published\n+by the Free Software Foundation; either version 2 of the License, or\n+(at your option) any later version.\n+\n+GNU Fortran is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+Library General Public License for more details.\n+\n+You should have received a copy of the GNU Library General Public\n+License along with GNU Fortran; see the file COPYING.LIB.  If\n+not, write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+#ifdef HAVE_CONFIG_H\n+#include \"config.h\"\n+#endif\n+#include <stdio.h>\n+#if TIME_WITH_SYS_TIME\n+# include <sys/time.h>\n+# include <time.h>\n+#else\n+# if HAVE_SYS_TIME_H\n+#  include <sys/time.h>\n+# else\n+#  include <time.h>\n+# endif\n+#endif\n+#include \"f2c.h\"\n+\n+int G77_date_and_time_0 (char *date, char *fftime, char *zone,\n+\t\t\t integer *values, ftnlen date_len,\n+\t\t\t ftnlen fftime_len, ftnlen zone_len)\n+{\n+  time_t lt=time(&lt);\n+  struct tm ltime = *localtime(&lt), gtime = *gmtime(&lt);\n+  char dat[9], zon[6], ftim[11];\n+  int i, vals[8];\n+\n+  vals[0] = 1900 + ltime.tm_year;\n+  vals[1] = 1 + ltime.tm_mon;\n+  vals[2] = ltime.tm_mday;\n+  /* fixme: year boundaries */\n+  vals[3] = (ltime.tm_min - gtime.tm_min +\n+\t     60*(ltime.tm_hour - gtime.tm_hour +\n+\t\t 24*(ltime.tm_yday -gtime.tm_yday)));\n+  vals[4] = ltime.tm_hour;\n+  vals[5] = ltime.tm_min;\n+  vals[6] = ltime.tm_sec;\n+  vals[7] = 0;                  /* no STDC way to get this */\n+  /* GNUish way; maybe use `ftime' on other systems. */\n+#if HAVE_GETTIMEOFDAY\n+  {\n+    struct timeval tp;\n+    struct timezone tzp;\n+    if (! gettimeofday (&tp, &tzp))\n+      vals[7] = tp.tv_usec;\n+  }\n+#endif\n+  if (values)\t\t\t/* null pointer for missing optional */\n+    for (i=0; i<=7; i++)\n+      values[i] = vals[i];\n+  sprintf (dat, \"%04d%02d%02d\", vals[0], vals[1], vals[2]);\n+  s_copy(date, dat, date_len, 8);\n+  if (zone) {\n+    sprintf(zon, \"%+03d%02d\", vals[3] / 60, abs(vals[3] % 60));\n+    s_copy(zone, zon, zone_len, 5);\n+  }\n+  if (fftime) {\n+    sprintf (ftim, \"%02d%02d%02d.%03d\", vals[4], vals[5], vals[6], vals[7]);\n+    s_copy(fftime, ftim, fftime_len, 10);\n+  }\n+  return 0;\n+}"}]}