{"sha": "9aa5922d8987dfbc36ca23b2700b884f3a5c1f17", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWFhNTkyMmQ4OTg3ZGZiYzM2Y2EyM2IyNzAwYjg4NGYzYTVjMWYxNw==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2010-07-06T14:05:19Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2010-07-06T14:05:19Z"}, "message": "i386.md (immediate_operand): New mode attribute.\n\n2010-07-06  Uros Bizjak  <ubizjak@gmail.com>\n\n\t* config/i386/i386.md (immediate_operand): New mode attribute.\n\t\n\t(pro_epilogue_adjust_stack_<mode>_1): Macroize insn from\n\tpro_epilogue_adjust_stack  and pro_epilogue_adjust_stack_rex64\n\tusing P mode iterator.\n\t(pro_epilogue_adjust_stack_di_2): Rename from\n\tpro_epilogue_adjust_stack_rex64_2.\n\n\t* config/i386/i386.c (pro_epilogue_adjust_stack): Update for rename.\n\n2010-07-06  Uros Bizjak  <ubizjak@gmail.com>\n\n\t* config/i386/i386.md (insv): Call gen_movdi_insv1 or gen_movsi_insv1\n\tthrough gen_mov_insv_1 function pointer.\n\t(fmod<mode>3): Call gen_truncxf<mode>2_i387_noop_unspec or\n\tgen_truncxf<mode>2 through gen_truncxf function pointer.\n\t(remainder<mode>3): Ditto.\n\t(cmpstrnsi): Rename cmp_insn function pointer to gen_cmp.\n\t(allocate_stack): Call gen_allocate_stack_worker_64 or\n\tgen_allocate_stack_worker_32 through gen_allocate_stack_worker\n\tfunction pointer.\n\t(probe_stack): Call gen_iordi3 or gen_iorsi3 through gen_ior3\n\tfunction pointer.\n\n2010-07-06  Uros Bizjak  <ubizjak@gmail.com>\n\n\t* config/i386/i386.md (*add<mode>3_cconly_overflow): Use <g>\n\toperand constraint instead of <r><i>m.\n\nFrom-SVN: r161870", "tree": {"sha": "436500a50daffcff23a22cf2df879865db3512b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/436500a50daffcff23a22cf2df879865db3512b1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9aa5922d8987dfbc36ca23b2700b884f3a5c1f17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9aa5922d8987dfbc36ca23b2700b884f3a5c1f17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9aa5922d8987dfbc36ca23b2700b884f3a5c1f17", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9aa5922d8987dfbc36ca23b2700b884f3a5c1f17/comments", "author": null, "committer": null, "parents": [{"sha": "dfb8812683d03f266144dc9a20497ef5cb557c93", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfb8812683d03f266144dc9a20497ef5cb557c93", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dfb8812683d03f266144dc9a20497ef5cb557c93"}], "stats": {"total": 202, "additions": 104, "deletions": 98}, "files": [{"sha": "b27f23b9966430b51fc7d5ba02e290ff0ccecc66", "filename": "gcc/ChangeLog", "status": "modified", "additions": 34, "deletions": 6, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aa5922d8987dfbc36ca23b2700b884f3a5c1f17/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aa5922d8987dfbc36ca23b2700b884f3a5c1f17/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9aa5922d8987dfbc36ca23b2700b884f3a5c1f17", "patch": "@@ -1,3 +1,34 @@\n+2010-07-06  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (immediate_operand): New mode attribute.\n+\t\n+\t(pro_epilogue_adjust_stack_<mode>_1): Macroize insn from\n+\tpro_epilogue_adjust_stack  and pro_epilogue_adjust_stack_rex64\n+\tusing P mode iterator.\n+\t(pro_epilogue_adjust_stack_di_2): Rename from\n+\tpro_epilogue_adjust_stack_rex64_2.\n+\n+\t* config/i386/i386.c (pro_epilogue_adjust_stack): Update for rename.\n+\n+2010-07-06  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (insv): Call gen_movdi_insv1 or gen_movsi_insv1\n+\tthrough gen_mov_insv_1 function pointer.\n+\t(fmod<mode>3): Call gen_truncxf<mode>2_i387_noop_unspec or\n+\tgen_truncxf<mode>2 through gen_truncxf function pointer.\n+\t(remainder<mode>3): Ditto.\n+\t(cmpstrnsi): Rename cmp_insn function pointer to gen_cmp.\n+\t(allocate_stack): Call gen_allocate_stack_worker_64 or\n+\tgen_allocate_stack_worker_32 through gen_allocate_stack_worker\n+\tfunction pointer.\n+\t(probe_stack): Call gen_iordi3 or gen_iorsi3 through gen_ior3\n+\tfunction pointer.\n+\n+2010-07-06  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (*add<mode>3_cconly_overflow): Use <g>\n+\toperand constraint instead of <r><i>m.\n+\n 2010-07-06  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/44828\n@@ -79,13 +110,11 @@\n \t(OPTION_MASK_ISA_RDRND_UNSET): Likewise.\n \t(OPTION_MASK_ISA_F16C_UNSET): Likewise.\n \t(OPTION_MASK_ISA_AVX_UNSET): Add OPTION_MASK_ISA_F16C_UNSET.\n-\t(ix86_handle_option): Handle OPT_mfsgsbase, OPT_mrdrnd and\n-\tOPT_mf16c.\n+\t(ix86_handle_option): Handle OPT_mfsgsbase, OPT_mrdrnd and OPT_mf16c.\n \t(ix86_target_string): Support -mfsgsbase, -mrdrnd and -mf16c.\n \t(pta_flags): Add PTA_FSGSBASE, PTA_RDRND and PTA_F16C.\n \t(override_options): Handle them.\n-\t(ix86_valid_target_attribute_inner_p): Handle fsgsbase, rdrnd\n-\tand f16c.\n+\t(ix86_valid_target_attribute_inner_p): Handle fsgsbase, rdrnd and f16c.\n \t(ix86_builtins): Add IX86_BUILTIN_RDFSBASE32,\n \tIX86_BUILTIN_RDFSBASE64, IX86_BUILTIN_RDGSBASE32,\n \tIX86_BUILTIN_RDGSBASE64, IX86_BUILTIN_WRFSBASE32,\n@@ -213,8 +242,7 @@\n \n 2010-07-05  Richard Guenther  <rguenther@suse.de>\n \n-\t* tree-ssa-loop-ivopts.c (rewrite_use_nonlinear_expr): Copy\n-\talias info.\n+\t* tree-ssa-loop-ivopts.c (rewrite_use_nonlinear_expr): Copy alias info.\n \n 2010-07-05  Richard Guenther  <rguenther@suse.de>\n "}, {"sha": "7dfd7bbdcbe65ab80094e8a897f043ec1d17cbe6", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aa5922d8987dfbc36ca23b2700b884f3a5c1f17/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aa5922d8987dfbc36ca23b2700b884f3a5c1f17/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=9aa5922d8987dfbc36ca23b2700b884f3a5c1f17", "patch": "@@ -8509,9 +8509,9 @@ pro_epilogue_adjust_stack (rtx dest, rtx src, rtx offset,\n   rtx insn;\n \n   if (! TARGET_64BIT)\n-    insn = emit_insn (gen_pro_epilogue_adjust_stack_1 (dest, src, offset));\n+    insn = emit_insn (gen_pro_epilogue_adjust_stack_si_1 (dest, src, offset));\n   else if (x86_64_immediate_operand (offset, DImode))\n-    insn = emit_insn (gen_pro_epilogue_adjust_stack_rex64 (dest, src, offset));\n+    insn = emit_insn (gen_pro_epilogue_adjust_stack_di_1 (dest, src, offset));\n   else\n     {\n       rtx tmp;\n@@ -8528,8 +8528,8 @@ pro_epilogue_adjust_stack (rtx dest, rtx src, rtx offset,\n       insn = emit_insn (gen_rtx_SET (DImode, tmp, offset));\n       if (style < 0)\n \tRTX_FRAME_RELATED_P (insn) = 1;\n-      insn = emit_insn (gen_pro_epilogue_adjust_stack_rex64_2 (dest, src, tmp,\n-\t\t\t\t\t\t\t       offset));\n+      insn = emit_insn (gen_pro_epilogue_adjust_stack_di_2 (dest, src, tmp,\n+\t\t\t\t\t\t\t    offset));\n     }\n \n   if (style >= 0)"}, {"sha": "4170711b9185a9243e41402217081fbf8505a4e7", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 66, "deletions": 88, "changes": 154, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aa5922d8987dfbc36ca23b2700b884f3a5c1f17/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aa5922d8987dfbc36ca23b2700b884f3a5c1f17/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=9aa5922d8987dfbc36ca23b2700b884f3a5c1f17", "patch": "@@ -860,6 +860,13 @@\n \t (SI \"general_operand\")\n \t (DI \"x86_64_szext_general_operand\")])\n \n+;; Immediate operand predicate for integer modes.\n+(define_mode_attr immediate_operand\n+\t[(QI \"immediate_operand\")\n+\t (HI \"immediate_operand\")\n+\t (SI \"immediate_operand\")\n+\t (DI \"x86_64_immediate_operand\")])\n+\n ;; Operand predicate for shifts.\n (define_mode_attr shift_operand\n \t[(QI \"nonimmediate_operand\")\n@@ -6904,7 +6911,7 @@\n \t(compare:CCC\n \t  (plus:SWI\n \t    (match_operand:SWI 1 \"nonimmediate_operand\" \"%0\")\n-\t    (match_operand:SWI 2 \"<general_operand>\" \"<r><i>m\"))\n+\t    (match_operand:SWI 2 \"<general_operand>\" \"<g>\"))\n \t  (match_dup 1)))\n    (clobber (match_scratch:SWI 0 \"=<r>\"))]\n   \"ix86_binary_operator_ok (PLUS, <MODE>mode, operands)\"\n@@ -10339,6 +10346,8 @@\n         (match_operand 3 \"register_operand\" \"\"))]\n   \"\"\n {\n+  rtx (*gen_mov_insv_1) (rtx, rtx);\n+\n   /* Handle insertions to %ah et al.  */\n   if (INTVAL (operands[1]) != 8 || INTVAL (operands[2]) != 8)\n     FAIL;\n@@ -10348,11 +10357,10 @@\n   if (! ext_register_operand (operands[0], VOIDmode))\n     FAIL;\n \n-  if (TARGET_64BIT)\n-    emit_insn (gen_movdi_insv_1 (operands[0], operands[3]));\n-  else\n-    emit_insn (gen_movsi_insv_1 (operands[0], operands[3]));\n+  gen_mov_insv_1 = (TARGET_64BIT\n+\t\t    ? gen_movdi_insv_1 : gen_movsi_insv_1);\n \n+  emit_insn (gen_mov_insv_1 (operands[0], operands[3]));\n   DONE;\n })\n \n@@ -13039,6 +13047,8 @@\n    (use (match_operand:MODEF 2 \"general_operand\" \"\"))]\n   \"TARGET_USE_FANCY_MATH_387\"\n {\n+  rtx (*gen_truncxf) (rtx, rtx);\n+\n   rtx label = gen_label_rtx ();\n \n   rtx op1 = gen_reg_rtx (XFmode);\n@@ -13055,10 +13065,11 @@\n   /* Truncate the result properly for strict SSE math.  */\n   if (SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH\n       && !TARGET_MIX_SSE_I387)\n-    emit_insn (gen_truncxf<mode>2 (operands[0], op1));\n+    gen_truncxf = gen_truncxf<mode>2;\n   else\n-    emit_insn (gen_truncxf<mode>2_i387_noop_unspec (operands[0], op1));\n+    gen_truncxf = gen_truncxf<mode>2_i387_noop_unspec;\n \n+  emit_insn (gen_truncxf (operands[0], op1));\n   DONE;\n })\n \n@@ -13107,6 +13118,8 @@\n    (use (match_operand:MODEF 2 \"general_operand\" \"\"))]\n   \"TARGET_USE_FANCY_MATH_387\"\n {\n+  rtx (*gen_truncxf) (rtx, rtx);\n+\n   rtx label = gen_label_rtx ();\n \n   rtx op1 = gen_reg_rtx (XFmode);\n@@ -13124,10 +13137,11 @@\n   /* Truncate the result properly for strict SSE math.  */\n   if (SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH\n       && !TARGET_MIX_SSE_I387)\n-    emit_insn (gen_truncxf<mode>2 (operands[0], op1));\n+    gen_truncxf = gen_truncxf<mode>2;\n   else\n-    emit_insn (gen_truncxf<mode>2_i387_noop_unspec (operands[0], op1));\n+    gen_truncxf = gen_truncxf<mode>2_i387_noop_unspec;\n \n+  emit_insn (gen_truncxf (operands[0], op1));\n   DONE;\n })\n \n@@ -15733,13 +15747,12 @@\n     }\n   else\n     {\n-      rtx (*cmp_insn)(rtx, rtx);\n+      rtx (*gen_cmp) (rtx, rtx);\n \n-      if (TARGET_64BIT)\n-\tcmp_insn = gen_cmpdi_1;\n-      else\n-\tcmp_insn = gen_cmpsi_1;\n-      emit_insn (cmp_insn (countreg, countreg));\n+      gen_cmp = (TARGET_64BIT\n+\t\t ? gen_cmpdi_1 : gen_cmpsi_1);\n+\n+      emit_insn (gen_cmp (countreg, countreg));\n       emit_insn (gen_cmpstrnqi_1 (addr1, addr2, countreg, align,\n \t\t\t\t  operands[1], operands[2]));\n     }\n@@ -16353,79 +16366,37 @@\n ;; [(set (mem (plus (reg ebp) (const_int -160000))) (const_int 0))]\n ;;\n ;; in proper program order.\n-(define_insn \"pro_epilogue_adjust_stack_1\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n-\t(plus:SI (match_operand:SI 1 \"register_operand\" \"0,r\")\n-\t         (match_operand:SI 2 \"immediate_operand\" \"i,i\")))\n-   (clobber (reg:CC FLAGS_REG))\n-   (clobber (mem:BLK (scratch)))]\n-  \"!TARGET_64BIT\"\n-{\n-  switch (get_attr_type (insn))\n-    {\n-    case TYPE_IMOV:\n-      return \"mov{l}\\t{%1, %0|%0, %1}\";\n-\n-    case TYPE_ALU:\n-      gcc_assert (rtx_equal_p (operands[0], operands[1]));\n-      if (x86_maybe_negate_const_int (&operands[2], SImode))\n-\treturn \"sub{l}\\t{%2, %0|%0, %2}\";\n-\n-      return \"add{l}\\t{%2, %0|%0, %2}\";\n-\n-    default:\n-      operands[2] = SET_SRC (XVECEXP (PATTERN (insn), 0, 0));\n-      return \"lea{l}\\t{%a2, %0|%0, %a2}\";\n-    }\n-}\n-  [(set (attr \"type\")\n-\t(cond [(and (eq_attr \"alternative\" \"0\") \n-\t            (eq (symbol_ref \"TARGET_OPT_AGU\") (const_int 0)))\n-\t\t (const_string \"alu\")\n-\t       (match_operand:SI 2 \"const0_operand\" \"\")\n-\t\t (const_string \"imov\")\n-\t      ]\n-\t      (const_string \"lea\")))\n-   (set (attr \"length_immediate\")\n-\t(cond [(eq_attr \"type\" \"imov\")\n-\t\t (const_string \"0\")\n-\t       (and (eq_attr \"type\" \"alu\")\n-\t\t    (match_operand 2 \"const128_operand\" \"\"))\n-\t\t (const_string \"1\")\n-\t      ]\n-\t      (const_string \"*\")))\n-   (set_attr \"mode\" \"SI\")])\n \n-(define_insn \"pro_epilogue_adjust_stack_rex64\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n-\t(plus:DI (match_operand:DI 1 \"register_operand\" \"0,r\")\n-\t\t (match_operand:DI 2 \"x86_64_immediate_operand\" \"e,e\")))\n+(define_insn \"pro_epilogue_adjust_stack_<mode>_1\"\n+  [(set (match_operand:P 0 \"register_operand\" \"=r,r\")\n+\t(plus:P (match_operand:P 1 \"register_operand\" \"0,r\")\n+\t        (match_operand:P 2 \"<immediate_operand>\" \"<i>,<i>\")))\n    (clobber (reg:CC FLAGS_REG))\n    (clobber (mem:BLK (scratch)))]\n-  \"TARGET_64BIT\"\n+  \"\"\n {\n   switch (get_attr_type (insn))\n     {\n     case TYPE_IMOV:\n-      return \"mov{q}\\t{%1, %0|%0, %1}\";\n+      return \"mov{<imodesuffix>}\\t{%1, %0|%0, %1}\";\n \n     case TYPE_ALU:\n       gcc_assert (rtx_equal_p (operands[0], operands[1]));\n-      if (x86_maybe_negate_const_int (&operands[2], DImode))\n-\treturn \"sub{q}\\t{%2, %0|%0, %2}\";\n+      if (x86_maybe_negate_const_int (&operands[2], <MODE>mode))\n+\treturn \"sub{<imodesuffix>}\\t{%2, %0|%0, %2}\";\n \n-      return \"add{q}\\t{%2, %0|%0, %2}\";\n+      return \"add{<imodesuffix>}\\t{%2, %0|%0, %2}\";\n \n     default:\n       operands[2] = SET_SRC (XVECEXP (PATTERN (insn), 0, 0));\n-      return \"lea{q}\\t{%a2, %0|%0, %a2}\";\n+      return \"lea{<imodesuffix>}\\t{%a2, %0|%0, %a2}\";\n     }\n }\n   [(set (attr \"type\")\n \t(cond [(and (eq_attr \"alternative\" \"0\")\n-\t            (eq (symbol_ref \"TARGET_OPT_AGU\") (const_int 0)))\n+\t\t    (eq (symbol_ref \"TARGET_OPT_AGU\") (const_int 0)))\n \t\t (const_string \"alu\")\n-\t       (match_operand:DI 2 \"const0_operand\" \"\")\n+\t       (match_operand:<MODE> 2 \"const0_operand\" \"\")\n \t\t (const_string \"imov\")\n \t      ]\n \t      (const_string \"lea\")))\n@@ -16437,9 +16408,9 @@\n \t\t (const_string \"1\")\n \t      ]\n \t      (const_string \"*\")))\n-   (set_attr \"mode\" \"DI\")])\n+   (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"pro_epilogue_adjust_stack_rex64_2\"\n+(define_insn \"pro_epilogue_adjust_stack_di_2\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n \t(plus:DI (match_operand:DI 1 \"register_operand\" \"0,r\")\n \t\t (match_operand:DI 3 \"immediate_operand\" \"i,i\")))\n@@ -16509,12 +16480,15 @@\n     }\n   else\n     {\n-      x = copy_to_mode_reg (Pmode, operands[1]);\n+      rtx (*gen_allocate_stack_worker) (rtx, rtx);\n+\n       if (TARGET_64BIT)\n-\tx = gen_allocate_stack_worker_64 (x, x);\n+\tgen_allocate_stack_worker = gen_allocate_stack_worker_64;\n       else\n-\tx = gen_allocate_stack_worker_32 (x, x);\n-      emit_insn (x);\n+\tgen_allocate_stack_worker = gen_allocate_stack_worker_32;\n+\n+      x = copy_to_mode_reg (Pmode, operands[1]);\n+      emit_insn (gen_allocate_stack_worker (x, x));\n     }\n \n   emit_move_insn (operands[0], virtual_stack_dynamic_rtx);\n@@ -16526,10 +16500,12 @@\n   [(match_operand 0 \"memory_operand\" \"\")]\n   \"\"\n {\n-  if (GET_MODE (operands[0]) == DImode)\n-    emit_insn (gen_iordi3 (operands[0], operands[0], const0_rtx));\n-  else\n-    emit_insn (gen_iorsi3 (operands[0], operands[0], const0_rtx));\n+  rtx (*gen_ior3) (rtx, rtx, rtx);\n+\n+  gen_ior3 = (GET_MODE (operands[0]) == DImode\n+\t      ? gen_iordi3 : gen_iorsi3);\n+\n+  emit_insn (gen_ior3 (operands[0], operands[0], const0_rtx));\n   DONE;\n })\n \n@@ -17441,7 +17417,7 @@\n   [(set (match_dup 0)\n         (plus:SI (mult:SI (match_dup 1) (match_dup 2))\n                  (match_dup 1)))]\n-  { operands[2] = GEN_INT (INTVAL (operands[2]) - 1); })\n+  \"operands[2] = GEN_INT (INTVAL (operands[2]) - 1);\")\n \n (define_peephole2\n   [(parallel\n@@ -17457,7 +17433,7 @@\n    (set (match_dup 0)\n         (plus:SI (mult:SI (match_dup 0) (match_dup 2))\n                  (match_dup 0)))]\n-  { operands[2] = GEN_INT (INTVAL (operands[2]) - 1); })\n+  \"operands[2] = GEN_INT (INTVAL (operands[2]) - 1);\")\n \n (define_peephole2\n   [(parallel\n@@ -17472,7 +17448,7 @@\n   [(set (match_dup 0)\n         (plus:DI (mult:DI (match_dup 1) (match_dup 2))\n                  (match_dup 1)))]\n-  { operands[2] = GEN_INT (INTVAL (operands[2]) - 1); })\n+  \"operands[2] = GEN_INT (INTVAL (operands[2]) - 1);\")\n \n (define_peephole2\n   [(parallel\n@@ -17489,7 +17465,7 @@\n    (set (match_dup 0)\n         (plus:DI (mult:DI (match_dup 0) (match_dup 2))\n                  (match_dup 0)))]\n-  { operands[2] = GEN_INT (INTVAL (operands[2]) - 1); })\n+  \"operands[2] = GEN_INT (INTVAL (operands[2]) - 1);\")\n \n ;; Imul $32bit_imm, mem, reg is vector decoded, while\n ;; imul $32bit_imm, reg, reg is direct decoded.\n@@ -17504,7 +17480,7 @@\n   [(set (match_dup 3) (match_dup 1))\n    (parallel [(set (match_dup 0) (mult:DI (match_dup 3) (match_dup 2)))\n \t      (clobber (reg:CC FLAGS_REG))])]\n-\"\")\n+  \"\")\n \n (define_peephole2\n   [(match_scratch:SI 3 \"r\")\n@@ -17517,7 +17493,7 @@\n   [(set (match_dup 3) (match_dup 1))\n    (parallel [(set (match_dup 0) (mult:SI (match_dup 3) (match_dup 2)))\n \t      (clobber (reg:CC FLAGS_REG))])]\n-\"\")\n+  \"\")\n \n (define_peephole2\n   [(match_scratch:SI 3 \"r\")\n@@ -17529,9 +17505,10 @@\n   \"TARGET_SLOW_IMUL_IMM32_MEM && optimize_insn_for_speed_p ()\n    && !satisfies_constraint_K (operands[2])\"\n   [(set (match_dup 3) (match_dup 1))\n-   (parallel [(set (match_dup 0) (zero_extend:DI (mult:SI (match_dup 3) (match_dup 2))))\n+   (parallel [(set (match_dup 0)\n+\t\t   (zero_extend:DI (mult:SI (match_dup 3) (match_dup 2))))\n \t      (clobber (reg:CC FLAGS_REG))])]\n-\"\")\n+  \"\")\n \n ;; imul $8/16bit_imm, regmem, reg is vector decoded.\n ;; Convert it into imul reg, reg\n@@ -17903,7 +17880,8 @@\n \t\t\t\t(reg:DI XMM4_REG)\n \t\t\t\t(reg:DI XMM5_REG)\n \t\t\t\t(reg:DI XMM6_REG)\n-\t\t\t\t(reg:DI XMM7_REG)] UNSPEC_SSE_PROLOGUE_SAVE_LOW))\n+\t\t\t\t(reg:DI XMM7_REG)]\n+\t\t\t       UNSPEC_SSE_PROLOGUE_SAVE_LOW))\n \t      (use (match_dup 1))\n \t      (use (match_dup 2))\n \t      (use (match_dup 3))"}]}