{"sha": "4042d44040b437576f9cc4afb61307c0541ffb69", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDA0MmQ0NDA0MGI0Mzc1NzZmOWNjNGFmYjYxMzA3YzA1NDFmZmI2OQ==", "commit": {"author": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "1994-02-16T03:52:30Z"}, "committer": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "1994-02-16T03:52:30Z"}, "message": "Use new flag TYPE_STRING_FLAG instead of STRING_TYPE.\n\nFrom-SVN: r6570", "tree": {"sha": "a28f85c02ddc0bd7d98a00e61999b4c8bb21c66a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a28f85c02ddc0bd7d98a00e61999b4c8bb21c66a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4042d44040b437576f9cc4afb61307c0541ffb69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4042d44040b437576f9cc4afb61307c0541ffb69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4042d44040b437576f9cc4afb61307c0541ffb69", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4042d44040b437576f9cc4afb61307c0541ffb69/comments", "author": null, "committer": null, "parents": [{"sha": "70b78a2622feb275490802a1a69956d01096dcf1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70b78a2622feb275490802a1a69956d01096dcf1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70b78a2622feb275490802a1a69956d01096dcf1"}], "stats": {"total": 56, "additions": 38, "deletions": 18}, "files": [{"sha": "c3e611d17a5ab6813000264653b64b4184bc5552", "filename": "gcc/dbxout.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4042d44040b437576f9cc4afb61307c0541ffb69/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4042d44040b437576f9cc4afb61307c0541ffb69/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=4042d44040b437576f9cc4afb61307c0541ffb69", "patch": "@@ -1100,6 +1100,16 @@ dbxout_type (type, full, show_arg_types)\n       break;\n \n     case SET_TYPE:\n+      if (use_gnu_debug_info_extensions)\n+\t{\n+\t  have_used_extensions = 1;\n+\t  fprintf (asmfile, \"@s%d;\",\n+\t\t   BITS_PER_UNIT * int_size_in_bytes (type));\n+\t  /* Check if a bitstring type, which in Chill is\n+\t     different from a [power]set. */\n+\t  if (TYPE_STRING_FLAG (type))\n+\t    fprintf (asmfile, \"@S;\");\n+\t}\n       putc ('S', asmfile);\n       CHARS (1);\n       dbxout_type (TYPE_DOMAIN (type), 0, 0);\n@@ -1110,6 +1120,13 @@ dbxout_type (type, full, show_arg_types)\n \t for the index type of the array\n \t followed by a reference to the target-type.\n \t ar1;0;N;M for a C array of type M and size N+1.  */\n+      /* Check if a character string type, which in Chill is\n+\t different from an array of characters. */\n+      if (TYPE_STRING_FLAG (type) && use_gnu_debug_info_extensions)\n+\t{\n+\t  have_used_extensions = 1;\n+\t  fprintf (asmfile, \"@S;\");\n+\t}\n       tem = TYPE_DOMAIN (type);\n       if (tem == NULL)\n \tfprintf (asmfile, \"ar%d;0;-1;\","}, {"sha": "b3d3172567440a1447232e08001b49a484393a20", "filename": "gcc/dwarfout.c", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4042d44040b437576f9cc4afb61307c0541ffb69/gcc%2Fdwarfout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4042d44040b437576f9cc4afb61307c0541ffb69/gcc%2Fdwarfout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarfout.c?ref=4042d44040b437576f9cc4afb61307c0541ffb69", "patch": "@@ -1409,7 +1409,6 @@ type_is_fundamental (type)\n       case METHOD_TYPE:\n       case POINTER_TYPE:\n       case REFERENCE_TYPE:\n-      case STRING_TYPE:\n       case FILE_TYPE:\n       case OFFSET_TYPE:\n       case LANG_TYPE:\n@@ -4003,11 +4002,6 @@ output_type (type, containing_scope)\n \tabort ();\t/* No way to represent these in Dwarf yet!  */\n \tbreak;\n \n-      case STRING_TYPE:\n-\toutput_type (TREE_TYPE (type), containing_scope);\n-\toutput_die (output_string_type_die, type);\n-\tbreak;\n-\n       case FUNCTION_TYPE:\n \t/* Force out return type (in case it wasn't forced out already).  */\n \toutput_type (TREE_TYPE (type), containing_scope);\n@@ -4024,17 +4018,23 @@ output_type (type, containing_scope)\n \tend_sibling_chain ();\n \tbreak;\n \n-      case ARRAY_TYPE:\n-\t{\n-\t  register tree element_type;\n+      case ARRAY_TYPE:\t\n+\tif (TYPE_STRING_FLAG (type) && TREE_CODE(TREE_TYPE(type)) == CHAR_TYPE)\n+\t  {\n+\t    output_type (TREE_TYPE (type), containing_scope);\n+\t    output_die (output_string_type_die, type);\n+\t  }\n+\telse\n+\t  {\n+\t    register tree element_type;\n \n-\t  element_type = TREE_TYPE (type);\n-\t  while (TREE_CODE (element_type) == ARRAY_TYPE)\n-\t    element_type = TREE_TYPE (element_type);\n+\t    element_type = TREE_TYPE (type);\n+\t    while (TREE_CODE (element_type) == ARRAY_TYPE)\n+\t      element_type = TREE_TYPE (element_type);\n \n-\t  output_type (element_type, containing_scope);\n-\t  output_die (output_array_type_die, type);\n-\t}\n+\t    output_type (element_type, containing_scope);\n+\t    output_die (output_array_type_die, type);\n+\t  }\n \tbreak;\n \n       case ENUMERAL_TYPE:"}, {"sha": "2348a857d951456229ca6ffd75cca3022d4fbefa", "filename": "gcc/expr.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4042d44040b437576f9cc4afb61307c0541ffb69/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4042d44040b437576f9cc4afb61307c0541ffb69/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=4042d44040b437576f9cc4afb61307c0541ffb69", "patch": "@@ -7004,9 +7004,12 @@ expand_builtin (exp, target, subtarget, mode, ignore)\n \t  if (code == UNION_TYPE || code == QUAL_UNION_TYPE)\n \t    return GEN_INT (union_type_class);\n \t  if (code == ARRAY_TYPE)\n-\t    return GEN_INT (array_type_class);\n-\t  if (code == STRING_TYPE)\n-\t    return GEN_INT (string_type_class);\n+\t    {\n+\t      if (TYPE_STRING_FLAG (type))\n+\t\treturn GEN_INT (string_type_class);\n+\t      else\n+\t\treturn GEN_INT (array_type_class);\n+\t    }\n \t  if (code == SET_TYPE)\n \t    return GEN_INT (set_type_class);\n \t  if (code == FILE_TYPE)"}]}