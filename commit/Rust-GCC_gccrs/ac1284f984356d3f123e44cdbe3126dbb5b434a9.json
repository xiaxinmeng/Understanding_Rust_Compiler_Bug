{"sha": "ac1284f984356d3f123e44cdbe3126dbb5b434a9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWMxMjg0Zjk4NDM1NmQzZjEyM2U0NGNkYmUzMTI2ZGJiNWI0MzRhOQ==", "commit": {"author": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "1993-07-26T08:49:02Z"}, "committer": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "1993-07-26T08:49:02Z"}, "message": "Add fixproto support.\n\nFrom-SVN: r4987", "tree": {"sha": "8bc2b41dde52d9b92bf6c2e7adfe7e2c50b80ca2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8bc2b41dde52d9b92bf6c2e7adfe7e2c50b80ca2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ac1284f984356d3f123e44cdbe3126dbb5b434a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac1284f984356d3f123e44cdbe3126dbb5b434a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac1284f984356d3f123e44cdbe3126dbb5b434a9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac1284f984356d3f123e44cdbe3126dbb5b434a9/comments", "author": null, "committer": null, "parents": [{"sha": "7936052fe60476efacd555f883a684a7b8d4736d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7936052fe60476efacd555f883a684a7b8d4736d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7936052fe60476efacd555f883a684a7b8d4736d"}], "stats": {"total": 44, "additions": 40, "deletions": 4}, "files": [{"sha": "050d7d755cc5c5eff2b05e62c616e11c13194e9b", "filename": "gcc/Makefile.in", "status": "modified", "additions": 40, "deletions": 4, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac1284f984356d3f123e44cdbe3126dbb5b434a9/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac1284f984356d3f123e44cdbe3126dbb5b434a9/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=ac1284f984356d3f123e44cdbe3126dbb5b434a9", "patch": "@@ -121,6 +121,9 @@ RANLIB_TEST_FOR_TARGET = [ -f $(TARGET_TOOLPREFIX)ranlib ]\n # Dir to search for system headers.  Overridden by cross-make.\n SYSTEM_HEADER_DIR = /usr/include\n \n+# Uncomment following line for fixproto support.  (May become the default!)\n+# STMP_FIXPROTO = stmp-fixproto\n+\n # There may be a premade insn-attrtab.c for this machine.\n # (You could rebuild it with genattrtab as usual, but it takes a long time.)\n # PREMADE_ATTRTAB is the file name of the file to use.\n@@ -466,15 +469,15 @@ all.internal: start.encap rest.encap\n # This is what to compile if making a cross-compiler.\n # Note that we can compile enquire using the cross-compiler just build,\n # although we can't run it on this machine.\n-all.cross: native gcc-cross specs $(LIBGCC) stmp-headers cross-test enquire $(EXTRA_PARTS)\n+all.cross: native gcc-cross specs $(LIBGCC) stmp-headers $(STMP_FIXPROTO) cross-test enquire $(EXTRA_PARTS)\n # This is what to compile if making gcc with a cross-compiler.\n all.build: native xgcc $(EXTRA_PARTS)\n # This is what must be made before installing GCC and converting libraries.\n start.encap: native xgcc specs $(LIBGCC1) xlimits.h\n # Use this to make a GCC that will be used only to recompile GCC.\n for-bootstrap: start.encap $(LIBGCC)\n # These can't be made, with COFF encapsulation, until after GCC can run.\n-rest.encap: $(LIBGCC) stmp-headers $(EXTRA_PARTS)\n+rest.encap: $(LIBGCC) stmp-headers $(STMP_FIXPROTO) $(EXTRA_PARTS)\n # This is what is made with the host's compiler\n # whether making a cross compiler or not.\n native: config.status cpp $(LANGUAGES) $(EXTRA_PASSES) $(EXTRA_PROGRAMS) $(USE_COLLECT2)\n@@ -1292,6 +1295,7 @@ SYSCALLS.c.X: $(srcdir)/sys-types.h $(srcdir)/sys-protos.h $(GCC_PASSES)\n \t  -aux-info $@ -S -o tmp-SYSCALLS.s SYSCALLS.c\n \t-rm -f SYSCALLS.c tmp-SYSCALLS.s\n \n+\n test-protoize-simple: ./protoize ./unprotoize $(GCC_PASSES)\n \t-rm -f tmp-proto.[cso]\n \tcp $(srcdir)/protoize.c tmp-proto.c\n@@ -1396,6 +1400,35 @@ objc-headers:\n \tGCC_FOR_TARGET=\"$${thisdir1}/xgcc -B$${thisdir1}/\" \\\n \tGCC_CFLAGS=\"$(GCC_CFLAGS)\" incinstalldir=$${thisdir1}/include\n \ttouch objc-headers\n+\n+# Files related to the fixproto script.\n+\n+deduced.h: $(srcdir)/scan-types.sh\n+\tCC=\"$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(ALL_CPPFLAGS) -nostdinc -Iinclude -I${SYSTEM_HEADER_DIR}\"; \\\n+\t  export CC; \\\n+\t  $(srcdir)/scan-types.sh >tmp-deduced.h\n+\tmv tmp-deduced.h deduced.h\n+\n+gen-protos: gen-protos.o scan.o\n+\t${HOST_CC} -o gen-protos gen-protos.o scan.o\n+\n+xsys-protos.h: $(srcdir)/sys-protos.h deduced.h gen-protos Makefile\n+\tcat deduced.h $(srcdir)/sys-protos.h |\\\n+\t  sed -e 's/\t/ /g' -e 's/ *(/ (/g' -e 's/ [ ]*/ /g' >tmp.c\n+\t$(GCC_FOR_TARGET) tmp.c -E | ./gen-protos >xsys-protos.h\n+\n+scan-decls: scan-decls.o scan.o\n+\t$(HOST_CC) -o scan-decls scan-decls.o scan.o\n+\n+patch-header: patch-header.o scan.o xsys-protos.h obstack.o\n+\t$(HOST_CC) -o patch-header patch-header.o scan.o obstack.o\n+\n+patch-header.o: xsys-protos.h\n+\n+stmp-fixproto: patch-header scan-decls xsys-protos.h\n+\tCPP=\"$(GCC_FOR_TARGET) -E\"; export CPP; \\\n+\t  ${srcdir}/fixproto include include $(SYSTEM_HEADER_DIR)\n+\ttouch stmp-fixproto\n \f\n # Remake the info files.\n \n@@ -1463,6 +1496,9 @@ mostlyclean:\n # Delete some files made during installation.\n \t-rm -f specs gfloat.h float.h-* enquire SYSCALLS.c.X SYSCALLS.c\n \t-rm -f collect collect2 ld mips-tfile mips-tdump alloca.s\n+# Delete files generated for fixproto\n+\trm -rf patch-header scan-decls xsys-protos.h deduced.h tmp-deduced.h \\\n+\t  tmp.i tmp.c\n # Delete unwanted output files from TeX.\n \t-rm -f *.toc *.log *.vr *.fn *.cp *.tp *.ky *.pg\n # Delete sorted indices we don't actually use.\n@@ -1691,15 +1727,15 @@ install-include-dir: install-dir\n \t-chmod a+rx $(libsubdir)/include\n \n # Install the include directory using tar.\n-install-headers-tar: stmp-headers install-include-dir\n+install-headers-tar: stmp-headers $(STMP_FIXPROTO) install-include-dir\n \tcd include; \\\n \t (tar cf - .; exit 0) | (cd $(libsubdir)/include; tar $(TAROUTOPTS) - )\n # /bin/sh on some systems returns the status of the first tar,\n # and that can lose with GNU tar which always writes a full block.\n # So use `exit 0' to ignore its exit status.\n \n # Install the include directory using cpio.\n-install-headers-cpio: stmp-headers install-include-dir\n+install-headers-cpio: stmp-headers $(STMP_FIXPROTO) install-include-dir\n \tcd include; find . -print | cpio -pdum $(libsubdir)/include\n \n # Put assert.h where it won't override GNU libc's assert.h."}]}