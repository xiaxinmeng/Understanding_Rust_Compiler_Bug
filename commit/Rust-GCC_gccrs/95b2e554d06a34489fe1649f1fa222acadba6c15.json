{"sha": "95b2e554d06a34489fe1649f1fa222acadba6c15", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTViMmU1NTRkMDZhMzQ0ODlmZTE2NDlmMWZhMjIyYWNhZGJhNmMxNQ==", "commit": {"author": {"name": "Laurynas Biveinis", "email": "laurynas.biveinis@gmail.com", "date": "2007-09-04T23:22:34Z"}, "committer": {"name": "Laurynas Biveinis", "email": "lauras@gcc.gnu.org", "date": "2007-09-04T23:22:34Z"}, "message": "c-format.c: Include alloc-pool.h.\n\n2007-09-04  Laurynas Biveinis  <laurynas.biveinis@gmail.com>\n\n\t* c-format.c: Include alloc-pool.h.\n\t(check_format_info_main): New argument fwt_alloc.  Use allocation\n\tpool instead of GC.  Remove GC deallocation code.\n\t(check_format_arg): Create allocation pool, pass it to\n\tcheck_format_info_main and free it afterwards.\n\t* Makefile.in (c-format.o): Add alloc-pool.h dependency.\n\nFrom-SVN: r128105", "tree": {"sha": "f14bb40e1427d4221e9bb14bfbcfa2861a7d1379", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f14bb40e1427d4221e9bb14bfbcfa2861a7d1379"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/95b2e554d06a34489fe1649f1fa222acadba6c15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95b2e554d06a34489fe1649f1fa222acadba6c15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95b2e554d06a34489fe1649f1fa222acadba6c15", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95b2e554d06a34489fe1649f1fa222acadba6c15/comments", "author": {"login": "laurynas-biveinis", "id": 58894, "node_id": "MDQ6VXNlcjU4ODk0", "avatar_url": "https://avatars.githubusercontent.com/u/58894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/laurynas-biveinis", "html_url": "https://github.com/laurynas-biveinis", "followers_url": "https://api.github.com/users/laurynas-biveinis/followers", "following_url": "https://api.github.com/users/laurynas-biveinis/following{/other_user}", "gists_url": "https://api.github.com/users/laurynas-biveinis/gists{/gist_id}", "starred_url": "https://api.github.com/users/laurynas-biveinis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/laurynas-biveinis/subscriptions", "organizations_url": "https://api.github.com/users/laurynas-biveinis/orgs", "repos_url": "https://api.github.com/users/laurynas-biveinis/repos", "events_url": "https://api.github.com/users/laurynas-biveinis/events{/privacy}", "received_events_url": "https://api.github.com/users/laurynas-biveinis/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "acd29efb0f17f0ec7e2452b7440dd3fd666b6ce2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acd29efb0f17f0ec7e2452b7440dd3fd666b6ce2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/acd29efb0f17f0ec7e2452b7440dd3fd666b6ce2"}], "stats": {"total": 37, "additions": 21, "deletions": 16}, "files": [{"sha": "8a2dd2263caa961a71c1eed801d688488dd4dce2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95b2e554d06a34489fe1649f1fa222acadba6c15/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95b2e554d06a34489fe1649f1fa222acadba6c15/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=95b2e554d06a34489fe1649f1fa222acadba6c15", "patch": "@@ -1,3 +1,12 @@\n+2007-09-04  Laurynas Biveinis  <laurynas.biveinis@gmail.com>\n+\n+\t* c-format.c: Include alloc-pool.h.\n+\t(check_format_info_main): New argument fwt_alloc.  Use allocation\n+\tpool instead of GC.  Remove GC deallocation code.\n+\t(check_format_arg): Create allocation pool, pass it to\n+\tcheck_format_info_main and free it afterwards.\n+\t* Makefile.in (c-format.o): Add alloc-pool.h dependency.\n+\n 2007-09-05  Ben Elliston  <bje@au.ibm.com>\n \n \t* config/rs6000/ppu_intrinsics.h (__protected_stream_count):"}, {"sha": "1846b8e6baf3313153a9c157cc3b46daa78cfafa", "filename": "gcc/Makefile.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95b2e554d06a34489fe1649f1fa222acadba6c15/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95b2e554d06a34489fe1649f1fa222acadba6c15/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=95b2e554d06a34489fe1649f1fa222acadba6c15", "patch": "@@ -1810,7 +1810,8 @@ attribs.o : attribs.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n \t$(TARGET_H) langhooks.h $(CPPLIB_H)\n \n c-format.o : c-format.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) langhooks.h \\\n-\t$(C_COMMON_H) $(FLAGS_H) toplev.h intl.h $(DIAGNOSTIC_H) c-format.h\n+\t$(C_COMMON_H) $(FLAGS_H) toplev.h intl.h $(DIAGNOSTIC_H) alloc-pool.h \\\n+\tc-format.h\n \n c-semantics.o : c-semantics.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n \t$(TREE_H) $(FLAGS_H) toplev.h output.h $(RTL_H) $(GGC_H) \\"}, {"sha": "25cf859a161fa4aad5cc86988497f36d5fd09f05", "filename": "gcc/c-format.c", "status": "modified", "additions": 10, "deletions": 15, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95b2e554d06a34489fe1649f1fa222acadba6c15/gcc%2Fc-format.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95b2e554d06a34489fe1649f1fa222acadba6c15/gcc%2Fc-format.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-format.c?ref=95b2e554d06a34489fe1649f1fa222acadba6c15", "patch": "@@ -30,6 +30,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"diagnostic.h\"\n #include \"langhooks.h\"\n #include \"c-format.h\"\n+#include \"alloc-pool.h\"\n \f\n /* Set format warning options according to a -Wformat=n option.  */\n \n@@ -821,7 +822,7 @@ static void check_format_arg (void *, tree, unsigned HOST_WIDE_INT);\n static void check_format_info_main (format_check_results *,\n \t\t\t\t    function_format_info *,\n \t\t\t\t    const char *, int, tree,\n-\t\t\t\t    unsigned HOST_WIDE_INT);\n+                                    unsigned HOST_WIDE_INT, alloc_pool);\n \n static void init_dollar_format_checking (int, tree);\n static int maybe_read_dollar_number (const char **, int,\n@@ -1300,6 +1301,7 @@ check_format_arg (void *ctx, tree format_tree,\n   const char *format_chars;\n   tree array_size = 0;\n   tree array_init;\n+  alloc_pool fwt_pool;\n \n   if (integer_zerop (format_tree))\n     {\n@@ -1424,8 +1426,11 @@ check_format_arg (void *ctx, tree format_tree,\n      will decrement it if it finds there are extra arguments, but this way\n      need not adjust it for every return.  */\n   res->number_other++;\n+  fwt_pool = create_alloc_pool (\"format_wanted_type pool\",\n+                                sizeof (format_wanted_type), 10);\n   check_format_info_main (res, info, format_chars, format_length,\n-\t\t\t  params, arg_num);\n+                          params, arg_num, fwt_pool);\n+  free_alloc_pool (fwt_pool);\n }\n \n \n@@ -1440,7 +1445,7 @@ static void\n check_format_info_main (format_check_results *res,\n \t\t\tfunction_format_info *info, const char *format_chars,\n \t\t\tint format_length, tree params,\n-\t\t\tunsigned HOST_WIDE_INT arg_num)\n+                        unsigned HOST_WIDE_INT arg_num, alloc_pool fwt_pool)\n {\n   const char *orig_format_chars = format_chars;\n   tree first_fillin_param = params;\n@@ -2087,7 +2092,8 @@ check_format_info_main (format_check_results *res,\n \t      fci = fci->chain;\n \t      if (fci)\n \t\t{\n-\t\t  wanted_type_ptr = GGC_NEW (format_wanted_type);\n+                  wanted_type_ptr = (format_wanted_type *)\n+                      pool_alloc (fwt_pool);\n \t\t  arg_num++;\n \t\t  wanted_type = *fci->types[length_chars_val].type;\n \t\t  wanted_type_name = fci->types[length_chars_val].name;\n@@ -2098,17 +2104,6 @@ check_format_info_main (format_check_results *res,\n       if (first_wanted_type != 0)\n \tcheck_format_types (first_wanted_type, format_start,\n \t\t\t    format_chars - format_start);\n-\n-      if (main_wanted_type.next != NULL)\n-\t{\n-\t  format_wanted_type *wanted_type_ptr = main_wanted_type.next;\n-\t  while (wanted_type_ptr)\n-\t    {\n-\t      format_wanted_type *next = wanted_type_ptr->next;\n-\t      ggc_free (wanted_type_ptr);\n-\t      wanted_type_ptr = next;\n-\t    }\n-\t}\n     }\n }\n "}]}