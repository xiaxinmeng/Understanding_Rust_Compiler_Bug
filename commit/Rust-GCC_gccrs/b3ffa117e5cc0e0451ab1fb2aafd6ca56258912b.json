{"sha": "b3ffa117e5cc0e0451ab1fb2aafd6ca56258912b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjNmZmExMTdlNWNjMGUwNDUxYWIxZmIyYWFmZDZjYTU2MjU4OTEyYg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-10-31T13:17:48Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-10-31T13:17:48Z"}, "message": "Remove PR 92268 workaround and fix new test failures\n\nWith the compiler bug fixed we can simplify the __sizable concept to use\na return-type-requirement again. I also realised it was redundantly\nre-checking a subset of the sized_sentinel_for requirements.\n\nThe compiler fix also revealed bugs in two tests which started to fail\nand are fixed by this patch.\n\n\t* include/bits/range_access.h (__sizable): Rename to __sentinel_size.\n\tRemove workaround for PR c++/92268 and remove redundant requirements\n\tthat are already checked by sized_sentinel_for.\n\t* testsuite/std/ranges/access/cend.cc: Fix failures.\n\t* testsuite/std/ranges/access/end.cc: Likewise.\n\nFrom-SVN: r277667", "tree": {"sha": "290c2c9e5ea352b33b0f217bb8a5022ea4230a62", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/290c2c9e5ea352b33b0f217bb8a5022ea4230a62"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b3ffa117e5cc0e0451ab1fb2aafd6ca56258912b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3ffa117e5cc0e0451ab1fb2aafd6ca56258912b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3ffa117e5cc0e0451ab1fb2aafd6ca56258912b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3ffa117e5cc0e0451ab1fb2aafd6ca56258912b/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "beaecb2d6b2f3c48740b7b8749ee2d2468c8dc14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/beaecb2d6b2f3c48740b7b8749ee2d2468c8dc14", "html_url": "https://github.com/Rust-GCC/gccrs/commit/beaecb2d6b2f3c48740b7b8749ee2d2468c8dc14"}], "stats": {"total": 59, "additions": 34, "deletions": 25}, "files": [{"sha": "d51a7d4714b3a26416960a2a99a1e2ded0b1805b", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3ffa117e5cc0e0451ab1fb2aafd6ca56258912b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3ffa117e5cc0e0451ab1fb2aafd6ca56258912b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=b3ffa117e5cc0e0451ab1fb2aafd6ca56258912b", "patch": "@@ -1,5 +1,11 @@\n 2019-10-31  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* include/bits/range_access.h (__sizable): Rename to __sentinel_size.\n+\tRemove workaround for PR c++/92268 and remove redundant requirements\n+\tthat are already checked by sized_sentinel_for.\n+\t* testsuite/std/ranges/access/cend.cc: Fix failures.\n+\t* testsuite/std/ranges/access/end.cc: Likewise.\n+\n \t* include/bits/range_access.h (ranges::begin): Combine array and\n \tnon-array overloads into one function template. Only use ADL for\n \tclasses and enums."}, {"sha": "de074460c16189f29fd2d0b31c81e2231843d2a8", "filename": "libstdc++-v3/include/bits/range_access.h", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3ffa117e5cc0e0451ab1fb2aafd6ca56258912b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frange_access.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3ffa117e5cc0e0451ab1fb2aafd6ca56258912b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frange_access.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frange_access.h?ref=b3ffa117e5cc0e0451ab1fb2aafd6ca56258912b", "patch": "@@ -689,19 +689,13 @@ namespace ranges\n \t    -> __detail::__is_integer_like;\n \t};\n \n-    // FIXME: needed due to PR c++/92268\n-    template<forward_iterator _It, sized_sentinel_for<_It> _End>\n-      requires requires (_It __it, _End __end)\n-      { { __end - __it } -> __detail::__is_integer_like; }\n-      void\n-      __subtractable_fwd_iter(_It, _End)\n-      { }\n-\n     template<typename _Tp>\n-      concept __sizable = requires(_Tp&& __t)\n+      concept __sentinel_size = requires(_Tp&& __t)\n \t{\n-\t  __subtractable_fwd_iter(_Begin{}(std::forward<_Tp>(__t)),\n-\t\t\t\t  _End{}(std::forward<_Tp>(__t)));\n+\t  { _Begin{}(std::forward<_Tp>(__t)) } -> forward_iterator;\n+\n+\t  { _End{}(std::forward<_Tp>(__t)) }\n+\t    -> sized_sentinel_for<decltype(_Begin{}(std::forward<_Tp>(__t)))>;\n \t};\n \n     struct _Size\n@@ -717,15 +711,15 @@ namespace ranges\n \t    return noexcept(__decay_copy(std::declval<_Tp>().size()));\n \t  else if constexpr (__adl_size<_Tp>)\n \t    return noexcept(__decay_copy(size(std::declval<_Tp>())));\n-\t  else if constexpr (__sizable<_Tp>)\n+\t  else if constexpr (__sentinel_size<_Tp>)\n \t    return noexcept(_End{}(std::declval<_Tp>())\n \t\t\t    - _Begin{}(std::declval<_Tp>()));\n \t}\n \n     public:\n       template<typename _Tp>\n \trequires is_array_v<remove_reference_t<_Tp>>\n-\t  || __member_size<_Tp> || __adl_size<_Tp> || __sizable<_Tp>\n+\t  || __member_size<_Tp> || __adl_size<_Tp> || __sentinel_size<_Tp>\n \tconstexpr auto\n \toperator()(_Tp&& __e) const noexcept(_S_noexcept<_Tp>())\n \t{\n@@ -738,7 +732,7 @@ namespace ranges\n \t    return std::forward<_Tp>(__e).size();\n \t  else if constexpr (__adl_size<_Tp>)\n \t    return size(std::forward<_Tp>(__e));\n-\t  else if constexpr (__sizable<_Tp>)\n+\t  else if constexpr (__sentinel_size<_Tp>)\n \t    return __detail::__to_unsigned_like(\n \t\t_End{}(std::forward<_Tp>(__e))\n \t\t- _Begin{}(std::forward<_Tp>(__e)));"}, {"sha": "94349c35d5141117778dd6f0ac49fe68c13d1987", "filename": "libstdc++-v3/testsuite/std/ranges/access/cend.cc", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3ffa117e5cc0e0451ab1fb2aafd6ca56258912b/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fcend.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3ffa117e5cc0e0451ab1fb2aafd6ca56258912b/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fcend.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fcend.cc?ref=b3ffa117e5cc0e0451ab1fb2aafd6ca56258912b", "patch": "@@ -66,15 +66,18 @@ struct RR\n   long l = 0;\n   int a[4] = { 0, 1, 2, 3 };\n \n-  const void* begin() const { return nullptr; }\n-  friend const void* begin(const RR&&) noexcept { return nullptr; }\n+  const void* begin() const; // return type not an iterator\n \n+  friend int* end(RR&) { throw 1; }\n   short* end() noexcept { return &s; }\n+\n+  friend const long* begin(const RR&) noexcept;\n   const long* end() const { return &l; }\n \n-  friend int* end(RR&) { throw 1; }\n+  friend int* begin(RR&&) noexcept;\n   friend int* end(RR&& r) { return r.a + 1; }\n-  friend const int* end(const RR&) { throw 1; }\n+\n+  friend const int* begin(const RR&&) noexcept;\n   friend const int* end(const RR&& r) noexcept { return r.a + 3; }\n };\n "}, {"sha": "6638bb35721d5aa33e37a425251c0fb02ad44710", "filename": "libstdc++-v3/testsuite/std/ranges/access/end.cc", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3ffa117e5cc0e0451ab1fb2aafd6ca56258912b/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fend.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3ffa117e5cc0e0451ab1fb2aafd6ca56258912b/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fend.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fend.cc?ref=b3ffa117e5cc0e0451ab1fb2aafd6ca56258912b", "patch": "@@ -61,11 +61,12 @@ struct R\n {\n   int a[4] = { 0, 1, 2, 3 };\n \n-  const int* begin() const { return nullptr; }\n-  friend const int* begin(const R&& r) noexcept { return nullptr; }\n+  const int* begin() const;\n+  friend int* begin(R&&) noexcept;\n+  friend const int* begin(const R&&) noexcept;\n \n   // Should be ignored because it doesn't return a sentinel for int*\n-  const long* end() const { return nullptr; }\n+  const long* end() const;\n \n   friend int* end(R& r) { return r.a + 0; }\n   friend int* end(R&& r) { return r.a + 1; }\n@@ -105,15 +106,20 @@ struct RR\n   long l = 0;\n   int a[4] = { 0, 1, 2, 3 };\n \n-  const void* begin() const { return nullptr; }\n-  friend const void* begin(const RR&&) noexcept { return nullptr; }\n+  const void* begin() const; // return type not an iterator\n \n+  friend const short* begin(RR&) noexcept;\n   short* end() noexcept { return &s; }\n+\n+  friend const long* begin(const RR&) noexcept;\n   const long* end() const { return &l; }\n \n-  friend int* end(RR&) { throw 1; }\n+  friend const int* begin(RR&&) noexcept;\n+  friend int* end(RR&) { throw 1; } // not valid for rvalues\n   friend int* end(RR&& r) { return r.a + 1; }\n-  friend const int* end(const RR&) { throw 1; }\n+\n+  friend const int* begin(const RR&&) noexcept;\n+  friend const int* end(const RR&) { throw 1; } // not valid for rvalues\n   friend const int* end(const RR&& r) noexcept { return r.a + 3; }\n };\n "}]}