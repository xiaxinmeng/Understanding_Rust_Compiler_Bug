{"sha": "19a7047927e52f8513266e1326e7f78497e0a907", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTlhNzA0NzkyN2U1MmY4NTEzMjY2ZTEzMjZlN2Y3ODQ5N2UwYTkwNw==", "commit": {"author": {"name": "Stan Cox", "email": "coxs@gnu.org", "date": "1996-05-17T17:49:21Z"}, "committer": {"name": "Stan Cox", "email": "coxs@gnu.org", "date": "1996-05-17T17:49:21Z"}, "message": "unix.h (ASM_OUTPUT_MI_THUNK): Define.\n\n{att.h,bsd.h,sun386.h} (ASM_OUTPUT_MI_THUNK): Delete.\n\nFrom-SVN: r12010", "tree": {"sha": "7ca4198e489d596bf7b254b7cc229aa91837267a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7ca4198e489d596bf7b254b7cc229aa91837267a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/19a7047927e52f8513266e1326e7f78497e0a907", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19a7047927e52f8513266e1326e7f78497e0a907", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19a7047927e52f8513266e1326e7f78497e0a907", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19a7047927e52f8513266e1326e7f78497e0a907/comments", "author": null, "committer": null, "parents": [{"sha": "e291fca1a3574797210af52d3ff2d8fbb1419356", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e291fca1a3574797210af52d3ff2d8fbb1419356", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e291fca1a3574797210af52d3ff2d8fbb1419356"}], "stats": {"total": 75, "additions": 41, "deletions": 34}, "files": [{"sha": "ef095b7a67fbbe010afa6280f64fdb307c3713d3", "filename": "gcc/config/i386/att.h", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19a7047927e52f8513266e1326e7f78497e0a907/gcc%2Fconfig%2Fi386%2Fatt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19a7047927e52f8513266e1326e7f78497e0a907/gcc%2Fconfig%2Fi386%2Fatt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fatt.h?ref=19a7047927e52f8513266e1326e7f78497e0a907", "patch": "@@ -93,14 +93,3 @@ do\t\t\t\t\t\t\t\t\\\n #define ASM_OUTPUT_LABELREF(FILE,NAME)\t\\\n   fprintf (FILE, \"%s\", NAME)\n \n-/* Output code to add DELTA to the first argument, and then jump to FUNCTION.\n-   Used for C++ multiple inheritance.  */\n-\n-#define ASM_OUTPUT_MI_THUNK(FILE, THUNK_FNDECL, DELTA, FUNCTION)\t   \\\n-do {\t\t\t\t\t\t\t\t\t   \\\n-  fprintf (FILE, \"\\taddl $%d,%s\\n\\tjmp \", DELTA,\t\t\t   \\\n-\t i386_regparm > 0 ? \"%eax\" : \"4(%esp)\");\t\t\t   \\\n-  assemble_name (FILE, IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (FUNCTION))); \\\n-  fprintf (FILE, \"\\n\");\t\t\t\t\t\t\t   \\\n-} while (0)\n-"}, {"sha": "6bf7399dc31203049b9d92268ea20f7db1aec160", "filename": "gcc/config/i386/bsd.h", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19a7047927e52f8513266e1326e7f78497e0a907/gcc%2Fconfig%2Fi386%2Fbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19a7047927e52f8513266e1326e7f78497e0a907/gcc%2Fconfig%2Fi386%2Fbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fbsd.h?ref=19a7047927e52f8513266e1326e7f78497e0a907", "patch": "@@ -123,18 +123,6 @@ Boston, MA 02111-1307, USA.  */\n #define ASM_OUTPUT_LABELREF(FILE,NAME) fprintf (FILE, \"_%s\", NAME)\n #endif /* not NO_UNDERSCORES */\n \n-/* Output code to add DELTA to the first argument, and then jump to FUNCTION.\n-   Used for C++ multiple inheritance.  */\n-\n-#define ASM_OUTPUT_MI_THUNK(FILE, THUNK_FNDECL, DELTA, FUNCTION)\t   \\\n-do {\t\t\t\t\t\t\t\t\t   \\\n-  fprintf (FILE, \"\\taddl $%d,%s\\n\\tjmp \", DELTA,\t\t\t   \\\n-\t i386_regparm > 0 ? \"%eax\" : \"4(%esp)\");\t\t\t   \\\n-  assemble_name (FILE, IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (FUNCTION))); \\\n-  fprintf (FILE, \"\\n\");\t\t\t\t\t\t\t   \\\n-} while (0)\n-\n-\n /* Sequent has some changes in the format of DBX symbols.  */\n #define DBX_NO_XREFS 1\n "}, {"sha": "6e2680789bdbc94768c2594469754d3e0de6ac5f", "filename": "gcc/config/i386/sun386.h", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19a7047927e52f8513266e1326e7f78497e0a907/gcc%2Fconfig%2Fi386%2Fsun386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19a7047927e52f8513266e1326e7f78497e0a907/gcc%2Fconfig%2Fi386%2Fsun386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsun386.h?ref=19a7047927e52f8513266e1326e7f78497e0a907", "patch": "@@ -141,14 +141,3 @@ do\t\t\t\t\t\t\t\t\\\n \n #define ASM_OUTPUT_INTERNAL_LABEL(FILE,PREFIX,NUM)\t\\\n   fprintf (FILE, \".%s%d:\\n\", PREFIX, NUM)\n-\n-/* Output code to add DELTA to the first argument, and then jump to FUNCTION.\n-   Used for C++ multiple inheritance.  */\n-\n-#define ASM_OUTPUT_MI_THUNK(FILE, THUNK_FNDECL, DELTA, FUNCTION)\t   \\\n-do {\t\t\t\t\t\t\t\t\t   \\\n-  fprintf (FILE, \"\\taddl $%d,%s\\n\\tjmp \", DELTA,\t\t\t   \\\n-\t i386_regparm > 0 ? \"%eax\" : \"4(%esp)\");\t\t\t   \\\n-  assemble_name (FILE, IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (FUNCTION))); \\\n-  fprintf (FILE, \"\\n\");\t\t\t\t\t\t\t   \\\n-} while (0)"}, {"sha": "237ff9a64236d0863470b1121ab88db112369d88", "filename": "gcc/config/i386/unix.h", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19a7047927e52f8513266e1326e7f78497e0a907/gcc%2Fconfig%2Fi386%2Funix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19a7047927e52f8513266e1326e7f78497e0a907/gcc%2Fconfig%2Fi386%2Funix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Funix.h?ref=19a7047927e52f8513266e1326e7f78497e0a907", "patch": "@@ -146,3 +146,44 @@ Boston, MA 02111-1307, USA.  */\n #define FUNCTION_VALUE_REGNO_P(N) \\\n   ((N) == 0 || ((N)== FIRST_FLOAT_REG && TARGET_FLOAT_RETURNS_IN_80387))\n \n+/* Output code to add DELTA to the first argument, and then jump to FUNCTION.\n+   Used for C++ multiple inheritance.  */\n+#define ASM_OUTPUT_MI_THUNK(FILE, THUNK_FNDECL, DELTA, FUNCTION)\t  \\\n+do {\t\t\t\t\t\t\t\t\t  \\\n+  tree parm;\t\t\t\t\t\t\t\t  \\\n+\t\t\t\t\t\t\t\t\t  \\\n+  if (i386_regparm > 0)\t\t\t\t\t\t\t  \\\n+    parm = TYPE_ARG_TYPES (TREE_TYPE (function));\t\t\t  \\\n+  else\t\t\t\t\t\t\t\t\t  \\\n+    parm = NULL_TREE;\t\t\t\t\t\t\t  \\\n+  for (; parm; parm = TREE_CHAIN (parm))\t\t\t\t  \\\n+    if (TREE_VALUE (parm) == void_type_node)\t\t\t\t  \\\n+      break;\t\t\t\t\t\t\t\t  \\\n+  fprintf (FILE, \"\\taddl $%d,%s\\n\", DELTA, parm ? \"%eax\" : \"4(%esp)\");\t  \\\n+\t\t\t\t\t\t\t\t\t  \\\n+  if (flag_pic)\t\t\t\t\t\t\t\t  \\\n+    {\t\t\t\t\t\t\t\t\t  \\\n+      rtx xops[2];\t\t\t\t\t\t\t  \\\n+      xops[0] = pic_offset_table_rtx;\t\t\t\t\t  \\\n+      xops[1] = (rtx) gen_label_rtx ();\t\t\t\t\t  \\\n+\t\t\t\t\t\t\t\t\t  \\\n+      if (i386_regparm > 2)\t\t\t\t\t\t  \\\n+\tabort ();\t\t\t\t\t\t\t  \\\n+      output_asm_insn (\"push%L0 %0\", xops);\t\t\t\t  \\\n+      output_asm_insn (AS1 (call,%P1), xops);\t\t\t\t  \\\n+      ASM_OUTPUT_INTERNAL_LABEL (FILE, \"L\", CODE_LABEL_NUMBER (xops[1])); \\\n+      output_asm_insn (AS1 (pop%L0,%0), xops);\t\t\t\t  \\\n+      output_asm_insn (\"addl $_GLOBAL_OFFSET_TABLE_+[.-%P1],%0\", xops);\t  \\\n+      fprintf (FILE, \"\\tmovl \");\t\t\t\t\t  \\\n+      assemble_name\t\t\t\t\t\t\t  \\\n+\t(FILE, IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (FUNCTION)));\t  \\\n+      fprintf (FILE, \"@GOT(%%ebx),%%ecx\\n\\tpopl %%ebx\\n\\tjmp *%%ecx\\n\");  \\\n+    }\t\t\t\t\t\t\t\t\t  \\\n+  else\t\t\t\t\t\t\t\t\t  \\\n+    {\t\t\t\t\t\t\t\t\t  \\\n+      fprintf (FILE, \"\\tjmp \");\t\t\t\t\t\t  \\\n+      assemble_name\t\t\t\t\t\t\t  \\\n+\t(FILE, IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (FUNCTION)));\t  \\\n+      fprintf (FILE, \"\\n\");\t\t\t\t\t\t  \\\n+    }\t\t\t\t\t\t\t\t\t  \\\n+} while (0)"}]}