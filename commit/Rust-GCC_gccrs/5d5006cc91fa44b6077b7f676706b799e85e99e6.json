{"sha": "5d5006cc91fa44b6077b7f676706b799e85e99e6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWQ1MDA2Y2M5MWZhNDRiNjA3N2I3ZjY3NjcwNmI3OTllODVlOTllNg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2013-05-05T00:27:46Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2013-05-05T00:27:46Z"}, "message": "re PR c++/53745 ([C++11] Poor diagnostic for ill-formed narrowing conversion in enumerator initializer)\n\n/cp\n2013-05-04  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/53745\n\t* decl.c (build_enumerator): Improve error message.\n\n/testsuite\n2013-05-04  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/53745\n\t* g++.dg/cpp0x/enum27.C: New.\n\t* g++.dg/cpp0x/enum_base.C: Adjust.\n\nFrom-SVN: r198607", "tree": {"sha": "587ec79aac0690c15dac6c781d1b57f2cb559c01", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/587ec79aac0690c15dac6c781d1b57f2cb559c01"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5d5006cc91fa44b6077b7f676706b799e85e99e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d5006cc91fa44b6077b7f676706b799e85e99e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d5006cc91fa44b6077b7f676706b799e85e99e6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d5006cc91fa44b6077b7f676706b799e85e99e6/comments", "author": null, "committer": null, "parents": [{"sha": "defa0f99ade0504dfe8eac19c00b37d5c29a7914", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/defa0f99ade0504dfe8eac19c00b37d5c29a7914", "html_url": "https://github.com/Rust-GCC/gccrs/commit/defa0f99ade0504dfe8eac19c00b37d5c29a7914"}], "stats": {"total": 23, "additions": 19, "deletions": 4}, "files": [{"sha": "9d3e6521d6531f88071184f9e096f1712664f9fe", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d5006cc91fa44b6077b7f676706b799e85e99e6/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d5006cc91fa44b6077b7f676706b799e85e99e6/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5d5006cc91fa44b6077b7f676706b799e85e99e6", "patch": "@@ -1,3 +1,8 @@\n+2013-05-04  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/53745\n+\t* decl.c (build_enumerator): Improve error message.\n+\n 2013-05-03  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/14283"}, {"sha": "d92d334e1f5007ead34e8ad4c03a35a11402b9ef", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d5006cc91fa44b6077b7f676706b799e85e99e6/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d5006cc91fa44b6077b7f676706b799e85e99e6/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=5d5006cc91fa44b6077b7f676706b799e85e99e6", "patch": "@@ -12847,8 +12847,8 @@ incremented enumerator value is too large for %<long%>\");\n           && TREE_CODE (value) == INTEGER_CST)\n         {\n \t  if (!int_fits_type_p (value, ENUM_UNDERLYING_TYPE (enumtype)))\n-\t    error (\"enumerator value %E is too large for underlying type %<%T%>\",\n-\t\t   value, ENUM_UNDERLYING_TYPE (enumtype));\n+\t    error (\"enumerator value %E is outside the range of underlying \"\n+\t\t   \"type %<%T%>\", value, ENUM_UNDERLYING_TYPE (enumtype));\n \n           /* Convert the value to the appropriate type.  */\n           value = convert (ENUM_UNDERLYING_TYPE (enumtype), value);"}, {"sha": "8a3efcdf73509ae314b65dff3fb27127051b3f1e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d5006cc91fa44b6077b7f676706b799e85e99e6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d5006cc91fa44b6077b7f676706b799e85e99e6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5d5006cc91fa44b6077b7f676706b799e85e99e6", "patch": "@@ -1,3 +1,9 @@\n+2013-05-04  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/53745\n+\t* g++.dg/cpp0x/enum27.C: New.\n+\t* g++.dg/cpp0x/enum_base.C: Adjust.\n+\n 2013-05-04  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/56205"}, {"sha": "80ac98fc3d832dfe1a6d8ae717c769fd25320702", "filename": "gcc/testsuite/g++.dg/cpp0x/enum27.C", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d5006cc91fa44b6077b7f676706b799e85e99e6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fenum27.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d5006cc91fa44b6077b7f676706b799e85e99e6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fenum27.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fenum27.C?ref=5d5006cc91fa44b6077b7f676706b799e85e99e6", "patch": "@@ -0,0 +1,4 @@\n+// PR c++/53745\n+// { dg-do compile { target c++11 } }\n+\n+enum E : unsigned { e = -1 };  // { dg-error \"outside the range\" }"}, {"sha": "7da232cc2aa3832f8dcdd8f78426da3054946d0d", "filename": "gcc/testsuite/g++.dg/cpp0x/enum_base.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d5006cc91fa44b6077b7f676706b799e85e99e6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fenum_base.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d5006cc91fa44b6077b7f676706b799e85e99e6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fenum_base.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fenum_base.C?ref=5d5006cc91fa44b6077b7f676706b799e85e99e6", "patch": "@@ -6,11 +6,11 @@ enum E1 : char { };\n enum E2 : signed const short { };\n enum E3 : uvlonglong { };\n enum E4 : char { \n-  val = 500 // { dg-error \"too large\" }\n+  val = 500 // { dg-error \"outside the range\" }\n };\n \n enum class E5 {\n-  val = (unsigned long long)-1 // { dg-error \"too large\" }\n+  val = (unsigned long long)-1 // { dg-error \"outside the range\" }\n };\n \n typedef float Float;"}]}