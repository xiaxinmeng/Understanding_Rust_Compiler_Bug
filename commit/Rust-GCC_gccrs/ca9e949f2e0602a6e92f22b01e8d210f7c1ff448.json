{"sha": "ca9e949f2e0602a6e92f22b01e8d210f7c1ff448", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2E5ZTk0OWYyZTA2MDJhNmU5MmYyMmIwMWU4ZDIxMGY3YzFmZjQ0OA==", "commit": {"author": {"name": "Ville Voutilainen", "email": "ville.voutilainen@gmail.com", "date": "2016-11-14T15:30:37Z"}, "committer": {"name": "Ville Voutilainen", "email": "ville@gcc.gnu.org", "date": "2016-11-14T15:30:37Z"}, "message": "Use constexpr addressof in optional, SFINAE housekeeping for any, optional and tuple.\n\nUse constexpr addressof in optional, SFINAE housekeeping\nfor any, optional and tuple.\n* include/std/any (__do_emplace(_Args&&...)): New.\n(__do_emplace(initializer_list<_Up>, _Args&&...)): Likewise.\n(__any_constructible): Likewise.\n(__any_constructible_t): Use __any_constructible.\n(operator=(_ValueType&&)): SFINAE in the return type.\n(emplace(_Args&&...)): Likewise.\n(emplace(initializer_list<_Up>, _Args&&...)): Likewise.\n* include/std/optional (_Has_addressof_mem): Remove.\n(_Has_addressof_free): Likewise.\n(_Has_addressof): Likewise.\n(__constexpr_addressof(_Tp&)): Likewise.\n(operator->): Use std::__addressof.\n* include/std/tuple (operator=(const tuple<_UElements...>&)):\nSFINAE in return type.\n(operator=(tuple<_UElements...>&&)): Likewise.\n* testsuite/20_util/any/misc/any_cast_neg.cc: Adjust.\n\nFrom-SVN: r242390", "tree": {"sha": "b6dd36de2d9a0d5e2dc72de0b865b77103b97e55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b6dd36de2d9a0d5e2dc72de0b865b77103b97e55"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca9e949f2e0602a6e92f22b01e8d210f7c1ff448", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca9e949f2e0602a6e92f22b01e8d210f7c1ff448", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca9e949f2e0602a6e92f22b01e8d210f7c1ff448", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca9e949f2e0602a6e92f22b01e8d210f7c1ff448/comments", "author": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ebd9509a2db178fbdb20a8fdce7327a1bbdcee05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebd9509a2db178fbdb20a8fdce7327a1bbdcee05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ebd9509a2db178fbdb20a8fdce7327a1bbdcee05"}], "stats": {"total": 151, "additions": 73, "deletions": 78}, "files": [{"sha": "e984dfbadfb487fffe95d8e1881820fc1f4221e2", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca9e949f2e0602a6e92f22b01e8d210f7c1ff448/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca9e949f2e0602a6e92f22b01e8d210f7c1ff448/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=ca9e949f2e0602a6e92f22b01e8d210f7c1ff448", "patch": "@@ -1,3 +1,24 @@\n+2016-11-14  Ville Voutilainen  <ville.voutilainen@gmail.com>\n+\n+\tUse constexpr addressof in optional, SFINAE housekeeping\n+\tfor any, optional and tuple.\n+\t* include/std/any (__do_emplace(_Args&&...)): New.\n+\t(__do_emplace(initializer_list<_Up>, _Args&&...)): Likewise.\n+\t(__any_constructible): Likewise.\n+\t(__any_constructible_t): Use __any_constructible.\n+\t(operator=(_ValueType&&)): SFINAE in the return type.\n+\t(emplace(_Args&&...)): Likewise.\n+\t(emplace(initializer_list<_Up>, _Args&&...)): Likewise.\n+\t* include/std/optional (_Has_addressof_mem): Remove.\n+\t(_Has_addressof_free): Likewise.\n+\t(_Has_addressof): Likewise.\n+\t(__constexpr_addressof(_Tp&)): Likewise.\n+\t(operator->): Use std::__addressof.\n+\t* include/std/tuple (operator=(const tuple<_UElements...>&)):\n+\tSFINAE in return type.\n+\t(operator=(tuple<_UElements...>&&)): Likewise.\n+\t* testsuite/20_util/any/misc/any_cast_neg.cc: Adjust.\n+\n 2016-11-14  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/bits/move.h (addressof(const _Tp&&)): Add deleted overload,"}, {"sha": "719e683f5ed278496751f0436bc6260323b3421c", "filename": "libstdc++-v3/include/std/any", "status": "modified", "additions": 44, "deletions": 23, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca9e949f2e0602a6e92f22b01e8d210f7c1ff448/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fany", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca9e949f2e0602a6e92f22b01e8d210f7c1ff448/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fany", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fany?ref=ca9e949f2e0602a6e92f22b01e8d210f7c1ff448", "patch": "@@ -108,6 +108,27 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     template<typename _Tp, typename _Decayed = decay_t<_Tp>>\n       using _Decay = enable_if_t<!is_same<_Decayed, any>::value, _Decayed>;\n \n+    /// Emplace with an object created from @p __args as the contained object.\n+    template <typename _Tp, typename... _Args,\n+\t      typename _Mgr = _Manager<_Tp>>\n+      void __do_emplace(_Args&&... __args)\n+      {\n+\treset();\n+\t_M_manager = &_Mgr::_S_manage;\n+        _Mgr::_S_create(_M_storage, std::forward<_Args>(__args)...);\n+      }\n+\n+    /// Emplace with an object created from @p __il and @p __args as\n+    /// the contained object.\n+    template <typename _Tp, typename _Up, typename... _Args,\n+\t      typename _Mgr = _Manager<_Tp>>\n+      void __do_emplace(initializer_list<_Up> __il, _Args&&... __args)\n+      {\n+\treset();\n+\t_M_manager = &_Mgr::_S_manage;\n+        _Mgr::_S_create(_M_storage, __il, std::forward<_Args>(__args)...);\n+      }\n+\n   public:\n     // construct/destruct\n \n@@ -144,11 +165,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n     }\n \n+    template <typename _Res, typename _Tp, typename... _Args>\n+    using __any_constructible =\n+      enable_if<__and_<is_copy_constructible<_Tp>,\n+\t\t\t is_constructible<_Tp, _Args...>>::value,\n+\t\t  _Res>;\n+\n     template <typename _Tp, typename... _Args>\n     using __any_constructible_t =\n-      enable_if_t<__and_<is_copy_constructible<_Tp>,\n-\t\t\t is_constructible<_Tp, _Args...>>::value,\n-\t\t  bool>;\n+      typename __any_constructible<bool, _Tp, _Args...>::type;\n \n     /// Construct with a copy of @p __value as the contained object.\n     template <typename _ValueType, typename _Tp = _Decay<_ValueType>,\n@@ -233,39 +258,35 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n     /// Store a copy of @p __rhs as the contained object.\n-    template<typename _ValueType,\n-\t     typename _Tp = _Decay<_ValueType>>\n-      enable_if_t<is_copy_constructible<_Tp>::value, any&>\n+    template<typename _ValueType>\n+      enable_if_t<is_copy_constructible<_Decay<_ValueType>>::value, any&>\n       operator=(_ValueType&& __rhs)\n       {\n \t*this = any(std::forward<_ValueType>(__rhs));\n \treturn *this;\n       }\n \n     /// Emplace with an object created from @p __args as the contained object.\n-    template <typename _ValueType, typename... _Args,\n-\t      typename _Tp = _Decay<_ValueType>,\n-\t      typename _Mgr = _Manager<_Tp>,\n-              __any_constructible_t<_Tp, _Args&&...> = false>\n-      void emplace(_Args&&... __args)\n+    template <typename _ValueType, typename... _Args>\n+      typename __any_constructible<void,\n+\t\t\t\t   _Decay<_ValueType>, _Args&&...>::type\n+      emplace(_Args&&... __args)\n       {\n-\treset();\n-\t_M_manager = &_Mgr::_S_manage;\n-        _Mgr::_S_create(_M_storage, std::forward<_Args>(__args)...);\n+\t__do_emplace<_Decay<_ValueType>>\n+\t  (std::forward<_Args>(__args)...);\n       }\n \n     /// Emplace with an object created from @p __il and @p __args as\n     /// the contained object.\n-    template <typename _ValueType, typename _Up, typename... _Args,\n-\t      typename _Tp = _Decay<_ValueType>,\n-\t      typename _Mgr = _Manager<_Tp>,\n-              __any_constructible_t<_Tp, initializer_list<_Up>,\n-\t\t\t\t    _Args&&...> = false>\n-      void emplace(initializer_list<_Up> __il, _Args&&... __args)\n+    template <typename _ValueType, typename _Up, typename... _Args>\n+      typename __any_constructible<void,\n+\t\t\t\t   _Decay<_ValueType>,\n+\t\t\t\t   initializer_list<_Up>,\n+\t\t\t\t   _Args&&...>::type\n+      emplace(initializer_list<_Up> __il, _Args&&... __args)\n       {\n-\treset();\n-\t_M_manager = &_Mgr::_S_manage;\n-        _Mgr::_S_create(_M_storage, __il, std::forward<_Args>(__args)...);\n+\t__do_emplace<_Decay<_ValueType>, _Up>\n+\t  (__il, std::forward<_Args>(__args)...);\n       }\n \n     // modifiers"}, {"sha": "35b6932fc984451f94a82bd7426a5843701ab2ef", "filename": "libstdc++-v3/include/std/optional", "status": "modified", "additions": 1, "deletions": 48, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca9e949f2e0602a6e92f22b01e8d210f7c1ff448/libstdc%2B%2B-v3%2Finclude%2Fstd%2Foptional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca9e949f2e0602a6e92f22b01e8d210f7c1ff448/libstdc%2B%2B-v3%2Finclude%2Fstd%2Foptional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Foptional?ref=ca9e949f2e0602a6e92f22b01e8d210f7c1ff448", "patch": "@@ -96,53 +96,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   __throw_bad_optional_access(const char* __s)\n   { _GLIBCXX_THROW_OR_ABORT(bad_optional_access(__s)); }\n \n-  template<typename _Tp, typename = void>\n-    struct _Has_addressof_mem : std::false_type { };\n-\n-  template<typename _Tp>\n-    struct _Has_addressof_mem<_Tp,\n-         __void_t<decltype( std::declval<const _Tp&>().operator&() )>\n-      >\n-    : std::true_type { };\n-\n-  template<typename _Tp, typename = void>\n-    struct _Has_addressof_free : std::false_type { };\n-\n-  template<typename _Tp>\n-    struct _Has_addressof_free<_Tp,\n-         __void_t<decltype( operator&(std::declval<const _Tp&>()) )>\n-      >\n-    : std::true_type { };\n-\n-  /**\n-    * @brief Trait that detects the presence of an overloaded unary operator&.\n-    *\n-    * Practically speaking this detects the presence of such an operator when\n-    * called on a const-qualified lvalue (e.g.\n-    * declval<const _Tp&>().operator&()).\n-    */\n-  template<typename _Tp>\n-    struct _Has_addressof\n-    : std::__or_<_Has_addressof_mem<_Tp>, _Has_addressof_free<_Tp>>::type\n-    { };\n-\n-  /**\n-    * @brief An overload that attempts to take the address of an lvalue as a\n-    * constant expression. Falls back to __addressof in the presence of an\n-    * overloaded addressof operator (unary operator&), in which case the call\n-    * will not be a constant expression.\n-    */\n-  template<typename _Tp, enable_if_t<!_Has_addressof<_Tp>::value, int>...>\n-    constexpr _Tp* __constexpr_addressof(_Tp& __t)\n-    { return &__t; }\n-\n-  /**\n-    * @brief Fallback overload that defers to __addressof.\n-    */\n-  template<typename _Tp, enable_if_t<_Has_addressof<_Tp>::value, int>...>\n-    inline _Tp* __constexpr_addressof(_Tp& __t)\n-    { return std::__addressof(__t); }\n-\n   /**\n     * @brief Class template that holds the necessary state for @ref optional\n     * and that has the responsibility for construction and the special members.\n@@ -681,7 +634,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       // Observers.\n       constexpr const _Tp*\n       operator->() const\n-      { return __constexpr_addressof(this->_M_get()); }\n+      { return std::__addressof(this->_M_get()); }\n \n       _Tp*\n       operator->()"}, {"sha": "63cacd4935c987ace8d93f517bfa124dea2ceff7", "filename": "libstdc++-v3/include/std/tuple", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca9e949f2e0602a6e92f22b01e8d210f7c1ff448/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca9e949f2e0602a6e92f22b01e8d210f7c1ff448/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple?ref=ca9e949f2e0602a6e92f22b01e8d210f7c1ff448", "patch": "@@ -846,20 +846,20 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn *this;\n       }\n \n-      template<typename... _UElements, typename = typename\n+      template<typename... _UElements>\n+\ttypename\n \t       enable_if<sizeof...(_UElements)\n-\t\t\t == sizeof...(_Elements)>::type>\n-        tuple&\n+\t\t\t == sizeof...(_Elements), tuple&>::type\n         operator=(const tuple<_UElements...>& __in)\n         {\n \t  static_cast<_Inherited&>(*this) = __in;\n \t  return *this;\n \t}\n \n-      template<typename... _UElements, typename = typename\n+      template<typename... _UElements>\n+\ttypename\n \t       enable_if<sizeof...(_UElements)\n-\t\t\t == sizeof...(_Elements)>::type>\n-        tuple&\n+\t\t\t == sizeof...(_Elements), tuple&>::type\n         operator=(tuple<_UElements...>&& __in)\n         {\n \t  static_cast<_Inherited&>(*this) = std::move(__in);"}, {"sha": "4de400d717ef62735dd7cc0a9a5b016206b43143", "filename": "libstdc++-v3/testsuite/20_util/any/misc/any_cast_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca9e949f2e0602a6e92f22b01e8d210f7c1ff448/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fmisc%2Fany_cast_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca9e949f2e0602a6e92f22b01e8d210f7c1ff448/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fmisc%2Fany_cast_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fmisc%2Fany_cast_neg.cc?ref=ca9e949f2e0602a6e92f22b01e8d210f7c1ff448", "patch": "@@ -26,5 +26,5 @@ void test01()\n   using std::any_cast;\n \n   const any y(1);\n-  any_cast<int&>(y); // { dg-error \"qualifiers\" \"\" { target { *-*-* } } 432 }\n+  any_cast<int&>(y); // { dg-error \"qualifiers\" \"\" { target { *-*-* } } 453 }\n }"}]}