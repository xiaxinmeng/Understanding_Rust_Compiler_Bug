{"sha": "83aac698835edcdb3e6d96b856bef1c5f92e5e24", "node_id": "C_kwDOANBUbNoAKDgzYWFjNjk4ODM1ZWRjZGIzZTZkOTZiODU2YmVmMWM1ZjkyZTVlMjQ", "commit": {"author": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2021-09-22T18:58:35Z"}, "committer": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2021-09-22T18:58:35Z"}, "message": "Fortran: Improve -Wmissing-include-dirs warnings [PR55534]\n\nIt turned out that enabling the -Wmissing-include-dirs for libcpp did output\ntoo many warnings \u2013 at least as run with -B and similar options during the\nGCC build and warning for internal include dirs like finclude, unlikely of\nrelevance to for a real-world user.\nThis patch now only warns for -I and -J by default but permits to get the\nfull warnings including libcpp ones with -Wmissing-include-dirs. It\nadditionally documents this in the manual.\n\nWith that change, the -Wno-missing-include-dirs could be removed\nfrom libgfortran's configure and libgomp's testsuite always cflags.\nThis reverts those bits of the previous\ncommit r12-3722-g417ea5c02cef7f000e66d1af22b066c2c1cda047\n\nAdditionally, it turned out that all call to load_file called exit\nexplicitly - except for the main file via gfc_init -> gfc_new_file. The\nlatter also output a file not existing fatal error, such that two errors\nwhere printed. Now exit is called in line with the other users of\nload_file.\n\nFinally, when compileing with \"nonexisting/file.f90\", first a warning that\n\"nonexisting\" does not exist as include path was printed before the file\nnot found error was printed. Now the directory in which the physical file\nis located is added silently, relying on the file-not-found diagnostic for\nthose.\n\n\tPR fortran/55534\ngcc/ChangeLog:\n\n\t* doc/invoke.texi (-Wno-missing-include-dirs.): Document Fortran\n\tbehavior.\n\ngcc/fortran/ChangeLog:\n\n\t* cpp.c (gfc_cpp_register_include_paths, gfc_cpp_post_options):\n\tAdd new bool verbose_missing_dir_warn argument.\n\t* cpp.h (gfc_cpp_post_options): Update prototype.\n\t* f95-lang.c (gfc_init): Remove duplicated file-not found diag.\n\t* gfortran.h (gfc_check_include_dirs): Takes bool\n\tverbose_missing_dir_warn arg.\n\t(gfc_new_file): Returns now void.\n\t* options.c (gfc_post_options): Update to warn for -I and -J,\n\tonly, by default but for all when user requested.\n\t* scanner.c (gfc_do_check_include_dir):\n\t(gfc_do_check_include_dirs, gfc_check_include_dirs): Take bool\n\tverbose warn arg and update to avoid printing the same message\n\ttwice or never.\n\t(load_file): Fix indent.\n\t(gfc_new_file): Return void and exit when load_file failed\n\tas all other load_file users do.\n\nlibgfortran/ChangeLog:\n\n\t* configure.ac (AM_FCFLAGS): Revert r12-3722 by removing\n\t-Wno-missing-include-dirs.\n\t* configure: Regenerate.\n\nlibgomp/ChangeLog:\n\n\t* testsuite/libgomp.fortran/fortran.exp (ALWAYS_CFLAGS): Revert\n\tr12-3722 by removing -Wno-missing-include-dirs.\n\t* testsuite/libgomp.oacc-fortran/fortran.exp (ALWAYS_CFLAGS): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\t* gfortran.dg/include_14.f90: Add -J testcase and update dg-output.\n\t* gfortran.dg/include_15.f90: Likewise.\n\t* gfortran.dg/include_16.f90: Likewise.\n\t* gfortran.dg/include_17.f90: Likewise.\n\t* gfortran.dg/include_18.f90: Likewise.\n\t* gfortran.dg/include_19.f90: Likewise.", "tree": {"sha": "0bb8c1f54a51c10b9d945bea4d7ca160711dcc5e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0bb8c1f54a51c10b9d945bea4d7ca160711dcc5e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/83aac698835edcdb3e6d96b856bef1c5f92e5e24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83aac698835edcdb3e6d96b856bef1c5f92e5e24", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83aac698835edcdb3e6d96b856bef1c5f92e5e24", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83aac698835edcdb3e6d96b856bef1c5f92e5e24/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f571e64713cc72561f84241863496e473eae4c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f571e64713cc72561f84241863496e473eae4c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f571e64713cc72561f84241863496e473eae4c6"}], "stats": {"total": 107, "additions": 63, "deletions": 44}, "files": [{"sha": "ba98eab68a5814099388f8c2bfdc01d50069c2be", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83aac698835edcdb3e6d96b856bef1c5f92e5e24/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83aac698835edcdb3e6d96b856bef1c5f92e5e24/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=83aac698835edcdb3e6d96b856bef1c5f92e5e24", "patch": "@@ -6459,10 +6459,12 @@ int b[2][2] = @{ @{ 0, 1 @}, @{ 2, 3 @} @};\n \n This warning is enabled by @option{-Wall}.\n \n-@item -Wmissing-include-dirs @r{(C, C++, Objective-C and Objective-C++ only)}\n+@item -Wmissing-include-dirs @r{(C, C++, Objective-C, Objective-C++ and Fortran only)}\n @opindex Wmissing-include-dirs\n @opindex Wno-missing-include-dirs\n-Warn if a user-supplied include directory does not exist.\n+Warn if a user-supplied include directory does not exist. This opions is disabled\n+by default for C, C++, Objective-C and Objective-C++. For Fortran, it is partially\n+enabled by default by warning for -I and -J, only.\n \n @item -Wno-missing-profile\n @opindex Wmissing-profile"}, {"sha": "e86386c8b17de18f926799a187825966a24b1f7e", "filename": "gcc/fortran/cpp.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83aac698835edcdb3e6d96b856bef1c5f92e5e24/gcc%2Ffortran%2Fcpp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83aac698835edcdb3e6d96b856bef1c5f92e5e24/gcc%2Ffortran%2Fcpp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcpp.c?ref=83aac698835edcdb3e6d96b856bef1c5f92e5e24", "patch": "@@ -245,11 +245,12 @@ gfc_cpp_temporary_file (void)\n }\n \n static void\n-gfc_cpp_register_include_paths (void)\n+gfc_cpp_register_include_paths (bool verbose_missing_dir_warn)\n {\n   int cxx_stdinc = 0;\n   cpp_get_options (cpp_in)->warn_missing_include_dirs\n-    = global_options.x_cpp_warn_missing_include_dirs;\n+    = (global_options.x_cpp_warn_missing_include_dirs\n+       && verbose_missing_dir_warn);\n   register_include_chains (cpp_in, gfc_cpp_option.sysroot,\n \t\t\t   gfc_cpp_option.prefix, gfc_cpp_option.multilib,\n \t\t\t   gfc_cpp_option.standard_include_paths, cxx_stdinc,\n@@ -484,7 +485,7 @@ gfc_cpp_init_cb (void)\n }\n \n void\n-gfc_cpp_post_options (void)\n+gfc_cpp_post_options (bool verbose_missing_dir_warn)\n {\n   /* Any preprocessing-related option without '-cpp' is considered\n      an error.  */\n@@ -547,7 +548,7 @@ gfc_cpp_post_options (void)\n   diagnostic_initialize_input_context (global_dc, nullptr, true);\n   gfc_cpp_init_cb ();\n \n-  gfc_cpp_register_include_paths ();\n+  gfc_cpp_register_include_paths (verbose_missing_dir_warn);\n }\n \n "}, {"sha": "44644a2a333d945549c175cdafc049efdcbf6c3a", "filename": "gcc/fortran/cpp.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83aac698835edcdb3e6d96b856bef1c5f92e5e24/gcc%2Ffortran%2Fcpp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83aac698835edcdb3e6d96b856bef1c5f92e5e24/gcc%2Ffortran%2Fcpp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcpp.h?ref=83aac698835edcdb3e6d96b856bef1c5f92e5e24", "patch": "@@ -41,7 +41,7 @@ void gfc_cpp_init_options (unsigned int decoded_options_count,\n \n int gfc_cpp_handle_option(size_t scode, const char *arg, int value);\n \n-void gfc_cpp_post_options (void);\n+void gfc_cpp_post_options (bool);\n \n bool gfc_cpp_preprocess (const char *source_file);\n "}, {"sha": "58dcaf01d757de3cabe31148a29feddd1503df2e", "filename": "gcc/fortran/f95-lang.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83aac698835edcdb3e6d96b856bef1c5f92e5e24/gcc%2Ffortran%2Ff95-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83aac698835edcdb3e6d96b856bef1c5f92e5e24/gcc%2Ffortran%2Ff95-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ff95-lang.c?ref=83aac698835edcdb3e6d96b856bef1c5f92e5e24", "patch": "@@ -259,8 +259,8 @@ gfc_init (void)\n \n   gfc_init_1 ();\n \n-  if (!gfc_new_file ())\n-    fatal_error (input_location, \"cannot open input file: %s\", gfc_source_file);\n+  /* Calls exit in case of a fail. */\n+  gfc_new_file ();\n \n   if (flag_preprocess_only)\n     return false;"}, {"sha": "7ef835b211a1e81564f7996a90df0c85badb4302", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83aac698835edcdb3e6d96b856bef1c5f92e5e24/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83aac698835edcdb3e6d96b856bef1c5f92e5e24/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=83aac698835edcdb3e6d96b856bef1c5f92e5e24", "patch": "@@ -3032,7 +3032,7 @@ void gfc_scanner_init_1 (void);\n void gfc_add_include_path (const char *, bool, bool, bool, bool);\n void gfc_add_intrinsic_modules_path (const char *);\n void gfc_release_include_path (void);\n-void gfc_check_include_dirs (void);\n+void gfc_check_include_dirs (bool);\n FILE *gfc_open_included_file (const char *, bool, bool);\n \n int gfc_at_end (void);\n@@ -3064,7 +3064,7 @@ gfc_char_t gfc_peek_char (void);\n char gfc_peek_ascii_char (void);\n void gfc_error_recovery (void);\n void gfc_gobble_whitespace (void);\n-bool gfc_new_file (void);\n+void gfc_new_file (void);\n const char * gfc_read_orig_filename (const char *, const char **);\n \n extern gfc_source_form gfc_current_form;"}, {"sha": "016b70443aec23ea67f45129150cbe4f2128dfce", "filename": "gcc/fortran/options.c", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83aac698835edcdb3e6d96b856bef1c5f92e5e24/gcc%2Ffortran%2Foptions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83aac698835edcdb3e6d96b856bef1c5f92e5e24/gcc%2Ffortran%2Foptions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Foptions.c?ref=83aac698835edcdb3e6d96b856bef1c5f92e5e24", "patch": "@@ -251,14 +251,20 @@ gfc_post_options (const char **pfilename)\n {\n   const char *filename = *pfilename, *canon_source_file = NULL;\n   char *source_path;\n+  bool verbose_missing_dir_warn;\n   int i;\n \n   /* This needs to be after the commandline has been processed.\n      In Fortran, the options is by default enabled, in C/C++\n-     by default disabled.  */\n+     by default disabled.\n+     If not enabled explicitly by the user, only warn for -I\n+     and -J, otherwise warn for all include paths.  */\n+  verbose_missing_dir_warn\n+    = (global_options_set.x_cpp_warn_missing_include_dirs\n+       && global_options.x_cpp_warn_missing_include_dirs);\n   SET_OPTION_IF_UNSET (&global_options, &global_options_set,\n \t\t       cpp_warn_missing_include_dirs, 1);\n-  gfc_check_include_dirs ();\n+  gfc_check_include_dirs (verbose_missing_dir_warn);\n \n   /* Finalize DEC flags.  */\n   post_dec_flags (flag_dec);\n@@ -339,10 +345,13 @@ gfc_post_options (const char **pfilename)\n       source_path = (char *) alloca (i + 1);\n       memcpy (source_path, canon_source_file, i);\n       source_path[i] = 0;\n-      gfc_add_include_path (source_path, true, true, true, false);\n+      /* Only warn if the directory is different from the input file as\n+\t if that one is not found, already an error is shown.  */\n+      bool warn = gfc_option.flag_preprocessed && gfc_source_file != filename;\n+      gfc_add_include_path (source_path, true, true, warn, false);\n     }\n   else\n-    gfc_add_include_path (\".\", true, true, true, false);\n+    gfc_add_include_path (\".\", true, true, false, false);\n \n   if (canon_source_file != gfc_source_file)\n     free (CONST_CAST (char *, canon_source_file));\n@@ -490,7 +499,7 @@ gfc_post_options (const char **pfilename)\n     gfc_fatal_error (\"Maximum subrecord length cannot exceed %d\",\n \t\t     MAX_SUBRECORD_LENGTH);\n \n-  gfc_cpp_post_options ();\n+  gfc_cpp_post_options (verbose_missing_dir_warn);\n \n   if (gfc_option.allow_std & GFC_STD_F2008)\n     lang_hooks.name = \"GNU Fortran2008\";"}, {"sha": "52124bd5d361f843a1a80a60cb2eb12518b902c4", "filename": "gcc/fortran/scanner.c", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83aac698835edcdb3e6d96b856bef1c5f92e5e24/gcc%2Ffortran%2Fscanner.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83aac698835edcdb3e6d96b856bef1c5f92e5e24/gcc%2Ffortran%2Fscanner.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fscanner.c?ref=83aac698835edcdb3e6d96b856bef1c5f92e5e24", "patch": "@@ -307,9 +307,9 @@ gfc_do_check_include_dir (const char *path, bool warn)\n       if (errno != ENOENT)\n \tgfc_warning_now (0, \"Include directory %qs: %s\",\n \t\t\t path, xstrerror(errno));\n-      else if (warn && !gfc_cpp_enabled ())\n+      else if (warn)\n \t  gfc_warning_now (OPT_Wmissing_include_dirs,\n-\t\t\t     \"Nonexistent include directory %qs\", path);\n+\t\t\t   \"Nonexistent include directory %qs\", path);\n       return false;\n     }\n   else if (!S_ISDIR (st.st_mode))\n@@ -323,15 +323,15 @@ gfc_do_check_include_dir (const char *path, bool warn)\n /* In order that -W(no-)missing-include-dirs works, the diagnostic can only be\n    run after processing the commandline.  */\n static void\n-gfc_do_check_include_dirs (gfc_directorylist **list)\n+gfc_do_check_include_dirs (gfc_directorylist **list, bool do_warn)\n {\n   gfc_directorylist *prev, *q, *n;\n   prev = NULL;\n   n = *list;\n   while (n)\n     {\n       q = n; n = n->next;\n-      if (gfc_do_check_include_dir (q->path, q->warn))\n+      if (gfc_do_check_include_dir (q->path, q->warn && do_warn))\n \t{\n \t  prev = q;\n \t  continue;\n@@ -346,10 +346,16 @@ gfc_do_check_include_dirs (gfc_directorylist **list)\n }\n \n void\n-gfc_check_include_dirs ()\n+gfc_check_include_dirs (bool verbose_missing_dir_warn)\n {\n-  gfc_do_check_include_dirs (&include_dirs);\n-  gfc_do_check_include_dirs (&intrinsic_modules_dirs);\n+  /* This is a bit convoluted: If gfc_cpp_enabled () and\n+     verbose_missing_dir_warn, the warning is shown by libcpp. Otherwise,\n+     it is shown here, still conditional on OPT_Wmissing_include_dirs.  */\n+  bool warn = !gfc_cpp_enabled () || !verbose_missing_dir_warn;\n+  gfc_do_check_include_dirs (&include_dirs, warn);\n+  gfc_do_check_include_dirs (&intrinsic_modules_dirs, verbose_missing_dir_warn);\n+  if (gfc_option.module_dir && gfc_cpp_enabled ())\n+    gfc_do_check_include_dirs (&include_dirs, true);\n }\n \n /* Adds path to the list pointed to by list.  */\n@@ -2771,7 +2777,7 @@ load_file (const char *realfilename, const char *displayedname, bool initial)\n    it tries to determine the source form from the filename, defaulting\n    to free form.  */\n \n-bool\n+void\n gfc_new_file (void)\n {\n   bool result;\n@@ -2789,6 +2795,9 @@ gfc_new_file (void)\n   else\n     result = load_file (gfc_source_file, NULL, true);\n \n+  if (!result)\n+    exit (FATAL_EXIT_CODE);\n+\n   gfc_current_locus.lb = line_head;\n   gfc_current_locus.nextc = (line_head == NULL) ? NULL : line_head->line;\n \n@@ -2799,8 +2808,6 @@ gfc_new_file (void)\n \n   exit (SUCCESS_EXIT_CODE);\n #endif\n-\n-  return result;\n }\n \n static char *"}, {"sha": "8110e49bf4305066cbc256c1e55be70583c0294b", "filename": "gcc/testsuite/gfortran.dg/include_14.f90", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83aac698835edcdb3e6d96b856bef1c5f92e5e24/gcc%2Ftestsuite%2Fgfortran.dg%2Finclude_14.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83aac698835edcdb3e6d96b856bef1c5f92e5e24/gcc%2Ftestsuite%2Fgfortran.dg%2Finclude_14.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finclude_14.f90?ref=83aac698835edcdb3e6d96b856bef1c5f92e5e24", "patch": "@@ -1,5 +1,6 @@\n-! { dg-additional-options \"-cpp -idirafter /fdaf/ -I bar\" }\n+! { dg-additional-options \"-cpp -idirafter /fdaf/ -I bar -J foo/bar\" }\n end\n+! default: warn for -I and -J but ignore other options.\n+! { dg-warning \"Nonexistent include directory 'bar/'\" \"\" { target *-*-* } 0 }\n+! { dg-warning \"Nonexistent include directory 'foo/bar/'\" \"\" { target *-*-* } 0 }\n \n-! { dg-warning \"/fdaf/: No such file or directory\" \"\" { target *-*-* } 0 }\n-! { dg-warning \"bar: No such file or directory\" \"\" { target *-*-* } 0 }"}, {"sha": "068dcef5826fe3de7928b076d05b9c4c7a2ac042", "filename": "gcc/testsuite/gfortran.dg/include_15.f90", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83aac698835edcdb3e6d96b856bef1c5f92e5e24/gcc%2Ftestsuite%2Fgfortran.dg%2Finclude_15.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83aac698835edcdb3e6d96b856bef1c5f92e5e24/gcc%2Ftestsuite%2Fgfortran.dg%2Finclude_15.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finclude_15.f90?ref=83aac698835edcdb3e6d96b856bef1c5f92e5e24", "patch": "@@ -1,5 +1,6 @@\n-! { dg-additional-options \"-cpp -idirafter /fdaf/ -I bar -Wmissing-include-dirs\" }\n+! { dg-additional-options \"-cpp -idirafter /fdaf/ -I bar -J foo/bar -Wmissing-include-dirs\" }\n end\n \n-! { dg-warning \"/fdaf/: No such file or directory\" \"\" { target *-*-* } 0 }\n-! { dg-warning \"bar: No such file or directory\" \"\" { target *-*-* } 0 }\n+! { dg-warning \" /fdaf/: No such file or directory\" \"\" { target *-*-* } 0 }\n+! { dg-warning \" bar: No such file or directory\" \"\" { target *-*-* } 0 }\n+! { dg-warning \" foo/bar: No such file or directory\" \"\" { target *-*-* } 0 }"}, {"sha": "65e4c7efdaddf433b3a6422745c0275306f4c639", "filename": "gcc/testsuite/gfortran.dg/include_16.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83aac698835edcdb3e6d96b856bef1c5f92e5e24/gcc%2Ftestsuite%2Fgfortran.dg%2Finclude_16.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83aac698835edcdb3e6d96b856bef1c5f92e5e24/gcc%2Ftestsuite%2Fgfortran.dg%2Finclude_16.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finclude_16.f90?ref=83aac698835edcdb3e6d96b856bef1c5f92e5e24", "patch": "@@ -1,2 +1,2 @@\n-! { dg-additional-options \"-cpp -idirafter /fdaf/ -I bar -Wno-missing-include-dirs\" }\n+! { dg-additional-options \"-cpp -idirafter /fdaf/ -I bar -J foo/bar -Wno-missing-include-dirs\" }\n end"}, {"sha": "06677590be3432f83c134a4738c7673639fe43b5", "filename": "gcc/testsuite/gfortran.dg/include_17.f90", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83aac698835edcdb3e6d96b856bef1c5f92e5e24/gcc%2Ftestsuite%2Fgfortran.dg%2Finclude_17.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83aac698835edcdb3e6d96b856bef1c5f92e5e24/gcc%2Ftestsuite%2Fgfortran.dg%2Finclude_17.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finclude_17.f90?ref=83aac698835edcdb3e6d96b856bef1c5f92e5e24", "patch": "@@ -1,4 +1,6 @@\n ! { dg-do compile }\n-! { dg-options \"-I foo-bar -Wno-missing-include-dirs\" }\n+! { dg-options \"-I foo-bar -J foo/bar\" }\n end \n+! { dg-warning \"Nonexistent include directory 'foo-bar/'\" \"\" { target *-*-* } 0 }\n+! { dg-warning \"Nonexistent include directory 'foo/bar/'\" \"\" { target *-*-* } 0 }\n "}, {"sha": "b74a585bf1be8746f69c69a427aac2c9f00c220f", "filename": "gcc/testsuite/gfortran.dg/include_18.f90", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83aac698835edcdb3e6d96b856bef1c5f92e5e24/gcc%2Ftestsuite%2Fgfortran.dg%2Finclude_18.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83aac698835edcdb3e6d96b856bef1c5f92e5e24/gcc%2Ftestsuite%2Fgfortran.dg%2Finclude_18.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finclude_18.f90?ref=83aac698835edcdb3e6d96b856bef1c5f92e5e24", "patch": "@@ -1,3 +1,5 @@\n ! { dg-do compile }\n-! { dg-options \"-I nothere -Wno-missing-include-dirs\" }\n+! { dg-options \"-I nothere -J neither/here -Wmissing-include-dirs\" }\n end \n+! { dg-warning \"Nonexistent include directory 'nothere/'\" \"\" { target *-*-* } 0 }\n+! { dg-warning \"Nonexistent include directory 'neither/here/'\" \"\" { target *-*-* } 0 }"}, {"sha": "740492952810d8f19aec721c18c0ae4695c1ce68", "filename": "gcc/testsuite/gfortran.dg/include_19.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83aac698835edcdb3e6d96b856bef1c5f92e5e24/gcc%2Ftestsuite%2Fgfortran.dg%2Finclude_19.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83aac698835edcdb3e6d96b856bef1c5f92e5e24/gcc%2Ftestsuite%2Fgfortran.dg%2Finclude_19.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finclude_19.f90?ref=83aac698835edcdb3e6d96b856bef1c5f92e5e24", "patch": "@@ -1,4 +1,4 @@\n ! { dg-do compile }\n-! { dg-options \"-J foobar/foo -Wno-missing-include-dirs\" }\n+! { dg-options \"-I nothere -J foobar/foo -Wno-missing-include-dirs\" }\n program main\n end program main"}, {"sha": "4810b9b032e3bb96076ea34c3ffb6779b5b41704", "filename": "libgfortran/configure", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83aac698835edcdb3e6d96b856bef1c5f92e5e24/libgfortran%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83aac698835edcdb3e6d96b856bef1c5f92e5e24/libgfortran%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfigure?ref=83aac698835edcdb3e6d96b856bef1c5f92e5e24", "patch": "@@ -5985,7 +5985,7 @@ fi\n \n # Add -Wall -fno-repack-arrays -fno-underscoring if we are using GCC.\n if test \"x$GCC\" = \"xyes\"; then\n-  AM_FCFLAGS=\"-I . -Wall -Werror -fimplicit-none -fno-repack-arrays -fno-underscoring -Wno-missing-include-dirs\"\n+  AM_FCFLAGS=\"-I . -Wall -Werror -fimplicit-none -fno-repack-arrays -fno-underscoring\"\n   ## We like to use C11 and C99 routines when available.  This makes\n   ## sure that\n   ## __STDC_VERSION__ is set such that libc includes make them available."}, {"sha": "a77509801e68b88ba9b01b4fd6c7fbc76fbebedd", "filename": "libgfortran/configure.ac", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83aac698835edcdb3e6d96b856bef1c5f92e5e24/libgfortran%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83aac698835edcdb3e6d96b856bef1c5f92e5e24/libgfortran%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfigure.ac?ref=83aac698835edcdb3e6d96b856bef1c5f92e5e24", "patch": "@@ -146,7 +146,7 @@ AM_PROG_CC_C_O\n \n # Add -Wall -fno-repack-arrays -fno-underscoring if we are using GCC.\n if test \"x$GCC\" = \"xyes\"; then\n-  AM_FCFLAGS=\"-I . -Wall -Werror -fimplicit-none -fno-repack-arrays -fno-underscoring -Wno-missing-include-dirs\"\n+  AM_FCFLAGS=\"-I . -Wall -Werror -fimplicit-none -fno-repack-arrays -fno-underscoring\"\n   ## We like to use C11 and C99 routines when available.  This makes\n   ## sure that\n   ## __STDC_VERSION__ is set such that libc includes make them available."}, {"sha": "eb701311b6a05b1ce943d4087adeee5918a7ffe6", "filename": "libgomp/testsuite/libgomp.fortran/fortran.exp", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83aac698835edcdb3e6d96b856bef1c5f92e5e24/libgomp%2Ftestsuite%2Flibgomp.fortran%2Ffortran.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83aac698835edcdb3e6d96b856bef1c5f92e5e24/libgomp%2Ftestsuite%2Flibgomp.fortran%2Ffortran.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.fortran%2Ffortran.exp?ref=83aac698835edcdb3e6d96b856bef1c5f92e5e24", "patch": "@@ -20,9 +20,6 @@ dg-init\n \n # Turn on OpenMP.\n lappend ALWAYS_CFLAGS \"additional_flags=-fopenmp\"\n-# Silence warnings due to explicitly passed but nonexisting\n-# -isystem <instdir>/target>/{sys-,}include (gfortran warns by default)\n-lappend ALWAYS_CFLAGS \"additional_flags=-Wno-missing-include-dirs\"\n \n if { $blddir != \"\" } {\n     set lang_source_re {^.*\\.[fF](|90|95|03|08)$}"}, {"sha": "7365b320668aad63130004771fd6b5d3f4f440d2", "filename": "libgomp/testsuite/libgomp.oacc-fortran/fortran.exp", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83aac698835edcdb3e6d96b856bef1c5f92e5e24/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Ffortran.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83aac698835edcdb3e6d96b856bef1c5f92e5e24/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Ffortran.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Ffortran.exp?ref=83aac698835edcdb3e6d96b856bef1c5f92e5e24", "patch": "@@ -22,9 +22,6 @@ dg-init\n \n # Turn on OpenACC.\n lappend ALWAYS_CFLAGS \"additional_flags=-fopenacc\"\n-# Silence warnings due to explicitly passed but nonexisting\n-# -isystem <instdir>/target>/{sys-,}include (gfortran warns by default)\n-lappend ALWAYS_CFLAGS \"additional_flags=-Wno-missing-include-dirs\"\n \n if { $blddir != \"\" } {\n     set lang_source_re {^.*\\.[fF](|90|95|03|08)$}"}]}