{"sha": "48e73d63cc8680534a2013471993f3dd3b6539c6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDhlNzNkNjNjYzg2ODA1MzRhMjAxMzQ3MTk5M2YzZGQzYjY1MzljNg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-04-14T12:53:43Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-04-14T12:53:43Z"}, "message": "(ereal_from_{int,uint}): New arg, MODE.\n\nFrom-SVN: r11763", "tree": {"sha": "2be7c84d1b2d454e09d66c00d9e936b43ddc0089", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2be7c84d1b2d454e09d66c00d9e936b43ddc0089"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/48e73d63cc8680534a2013471993f3dd3b6539c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48e73d63cc8680534a2013471993f3dd3b6539c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48e73d63cc8680534a2013471993f3dd3b6539c6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48e73d63cc8680534a2013471993f3dd3b6539c6/comments", "author": null, "committer": null, "parents": [{"sha": "2dab894ad86c18637c6ecfc4dec5c6af4795c043", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2dab894ad86c18637c6ecfc4dec5c6af4795c043", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2dab894ad86c18637c6ecfc4dec5c6af4795c043"}], "stats": {"total": 70, "additions": 68, "deletions": 2}, "files": [{"sha": "b5e2985965885b95448cf89767dcff0d970fba98", "filename": "gcc/real.c", "status": "modified", "additions": 68, "deletions": 2, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48e73d63cc8680534a2013471993f3dd3b6539c6/gcc%2Freal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48e73d63cc8680534a2013471993f3dd3b6539c6/gcc%2Freal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.c?ref=48e73d63cc8680534a2013471993f3dd3b6539c6", "patch": "@@ -758,14 +758,17 @@ efixui (x)\n /* REAL_VALUE_FROM_INT macro.  */\n \n void \n-ereal_from_int (d, i, j)\n+ereal_from_int (d, i, j, mode)\n      REAL_VALUE_TYPE *d;\n      HOST_WIDE_INT i, j;\n+     enum machine_mode mode;\n {\n   unsigned EMUSHORT df[NE], dg[NE];\n   HOST_WIDE_INT low, high;\n   int sign;\n \n+  if (GET_MODE_CLASS (mode) != MODE_FLOAT)\n+    abort ();\n   sign = 0;\n   low = i;\n   if ((high = j) < 0)\n@@ -785,27 +788,90 @@ ereal_from_int (d, i, j)\n   eadd (df, dg, dg);\n   if (sign)\n     eneg (dg);\n+\n+  /* A REAL_VALUE_TYPE may not be wide enough to hold the two HOST_WIDE_INTS.\n+     Avoid double-rounding errors later by rounding off now from the\n+     extra-wide internal format to the requested precision.  */\n+  switch (GET_MODE_BITSIZE (mode))\n+    {\n+    case 32:\n+      etoe24 (dg, df);\n+      e24toe (df, dg);\n+      break;\n+\n+    case 64:\n+      etoe53 (dg, df);\n+      e53toe (df, dg);\n+      break;\n+\n+    case 96:\n+      etoe64 (dg, df);\n+      e64toe (df, dg);\n+      break;\n+\n+    case 128:\n+      etoe113 (dg, df);\n+      e113toe (df, dg);\n+      break;\n+\n+    default:\n+      abort ();\n+  }\n+\n   PUT_REAL (dg, d);\n }\n \n \n /* REAL_VALUE_FROM_UNSIGNED_INT macro.   */\n \n void \n-ereal_from_uint (d, i, j)\n+ereal_from_uint (d, i, j, mode)\n      REAL_VALUE_TYPE *d;\n      unsigned HOST_WIDE_INT i, j;\n+     enum machine_mode mode;\n {\n   unsigned EMUSHORT df[NE], dg[NE];\n   unsigned HOST_WIDE_INT low, high;\n \n+  if (GET_MODE_CLASS (mode) != MODE_FLOAT)\n+    abort ();\n   low = i;\n   high = j;\n   eldexp (eone, HOST_BITS_PER_WIDE_INT, df);\n   ultoe (&high, dg);\n   emul (dg, df, dg);\n   ultoe (&low, df);\n   eadd (df, dg, dg);\n+\n+  /* A REAL_VALUE_TYPE may not be wide enough to hold the two HOST_WIDE_INTS.\n+     Avoid double-rounding errors later by rounding off now from the\n+     extra-wide internal format to the requested precision.  */\n+  switch (GET_MODE_BITSIZE (mode))\n+    {\n+    case 32:\n+      etoe24 (dg, df);\n+      e24toe (df, dg);\n+      break;\n+\n+    case 64:\n+      etoe53 (dg, df);\n+      e53toe (df, dg);\n+      break;\n+\n+    case 96:\n+      etoe64 (dg, df);\n+      e64toe (df, dg);\n+      break;\n+\n+    case 128:\n+      etoe113 (dg, df);\n+      e113toe (df, dg);\n+      break;\n+\n+    default:\n+      abort ();\n+  }\n+\n   PUT_REAL (dg, d);\n }\n "}]}