{"sha": "9143de5c0185332e852f3d3167a7d6c8ae0b2514", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTE0M2RlNWMwMTg1MzMyZTg1MmYzZDMxNjdhN2Q2YzhhZTBiMjUxNA==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2005-01-05T15:27:26Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2005-01-05T15:27:26Z"}, "message": "c-parse.in (asm_string): New.\n\n\t* c-parse.in (asm_string): New.  Don't allow wide strings in\n\t'asm'.\n\t(simple_asm_expr, asm_argument, asm_operand, asm_clobbers): Use\n\tasm_string instead of STRING.\n\ntestsuite:\n\t* gcc.dg/asm-wide-1.c: New test.\n\nFrom-SVN: r92952", "tree": {"sha": "cc53cc25dfd07a836584c3d114824712818a0cfe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cc53cc25dfd07a836584c3d114824712818a0cfe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9143de5c0185332e852f3d3167a7d6c8ae0b2514", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9143de5c0185332e852f3d3167a7d6c8ae0b2514", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9143de5c0185332e852f3d3167a7d6c8ae0b2514", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9143de5c0185332e852f3d3167a7d6c8ae0b2514/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0953878d4847146508dc49a4681bf56bde831d12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0953878d4847146508dc49a4681bf56bde831d12", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0953878d4847146508dc49a4681bf56bde831d12"}], "stats": {"total": 83, "additions": 71, "deletions": 12}, "files": [{"sha": "18635094444d626fd7a77593851dbad1da630d61", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9143de5c0185332e852f3d3167a7d6c8ae0b2514/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9143de5c0185332e852f3d3167a7d6c8ae0b2514/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9143de5c0185332e852f3d3167a7d6c8ae0b2514", "patch": "@@ -1,3 +1,10 @@\n+2005-01-05  Joseph S. Myers  <joseph@codesourcery.com>\n+\n+\t* c-parse.in (asm_string): New.  Don't allow wide strings in\n+\t'asm'.\n+\t(simple_asm_expr, asm_argument, asm_operand, asm_clobbers): Use\n+\tasm_string instead of STRING.\n+\n 2005-01-05  Joseph S. Myers  <joseph@codesourcery.com>\n \n \t* c-typeck.c (constructor_no_implicit): Remove."}, {"sha": "413593e5f9709d0f027fa9f4b5045b5669e66cb4", "filename": "gcc/c-parse.in", "status": "modified", "additions": 25, "deletions": 12, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9143de5c0185332e852f3d3167a7d6c8ae0b2514/gcc%2Fc-parse.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9143de5c0185332e852f3d3167a7d6c8ae0b2514/gcc%2Fc-parse.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.in?ref=9143de5c0185332e852f3d3167a7d6c8ae0b2514", "patch": "@@ -1,6 +1,6 @@\n /* YACC parser for C syntax and for Objective C.  -*-c-*-\n-   Copyright (C) 1987, 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997,\n-   1998, 1999, 2000, 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n+   Copyright (C) 1987, 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n+   1999, 2000, 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -209,7 +209,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n %type <ttype> scspec SCSPEC STATIC TYPESPEC TYPE_QUAL maybe_volatile\n %type <ttype> initdecls notype_initdecls initdcl notype_initdcl\n %type <exprtype> init\n-%type <ttype> simple_asm_expr maybeasm asm_stmt asm_argument\n+%type <ttype> simple_asm_expr maybeasm asm_stmt asm_argument asm_string\n %type <ttype> asm_operands nonnull_asm_operands asm_operand asm_clobbers\n %type <ttype> maybe_attribute attributes attribute attribute_list attrib\n %type <ttype> any_word\n@@ -2330,7 +2330,7 @@ label:\t  CASE expr_no_commas ':'\n    expression with inputs and outputs does not make sense.  */\n simple_asm_expr:\n \tASM_KEYWORD stop_string_translation\n-\t      '(' STRING ')' start_string_translation\n+\t      '(' asm_string ')' start_string_translation\n \t\t{ $$ = $4; }\n \t;\n \n@@ -2359,16 +2359,16 @@ asm_stmt:\n \n asm_argument:\n \t/* no operands */\n-\tSTRING\n+\tasm_string\n \t\t{ $$ = build_asm_expr ($1, 0, 0, 0, true); }\n \t/* output operands */\n-\t| STRING ':' asm_operands\n+\t| asm_string ':' asm_operands\n \t\t{ $$ = build_asm_expr ($1, $3, 0, 0, false); }\n \t/* output and input operands */\n-\t| STRING ':' asm_operands ':' asm_operands\n+\t| asm_string ':' asm_operands ':' asm_operands\n \t\t{ $$ = build_asm_expr ($1, $3, $5, 0, false); }\n \t/* output and input operands and clobbers */\n-\t| STRING ':' asm_operands ':' asm_operands ':' asm_clobbers\n+\t| asm_string ':' asm_operands ':' asm_operands ':' asm_clobbers\n \t\t{ $$ = build_asm_expr ($1, $3, $5, $7, false); }\n \t;\n \n@@ -2402,23 +2402,36 @@ nonnull_asm_operands:\n \t;\n \n asm_operand:\n-\t  STRING start_string_translation '(' expr ')' stop_string_translation\n+\t  asm_string start_string_translation '(' expr ')'\n+\t    stop_string_translation\n \t\t{ $$ = build_tree_list (build_tree_list (NULL_TREE, $1),\n \t\t\t\t\t$4.value); }\n-\t| '[' identifier ']' STRING start_string_translation\n+\t| '[' identifier ']' asm_string start_string_translation\n \t  '(' expr ')' stop_string_translation\n \t\t{ $2 = build_string (IDENTIFIER_LENGTH ($2),\n \t\t\t\t     IDENTIFIER_POINTER ($2));\n \t\t  $$ = build_tree_list (build_tree_list ($2, $4), $7.value); }\n \t;\n \n asm_clobbers:\n-\t  STRING\n+\t  asm_string\n \t\t{ $$ = tree_cons (NULL_TREE, $1, NULL_TREE); }\n-\t| asm_clobbers ',' STRING\n+\t| asm_clobbers ',' asm_string\n \t\t{ $$ = tree_cons (NULL_TREE, $3, $1); }\n \t;\n \n+/* Strings in 'asm' must be narrow strings.  */\n+asm_string:\n+\t  STRING\n+\t\t{ if (TYPE_MAIN_VARIANT (TREE_TYPE (TREE_TYPE ($1)))\n+\t\t      != char_type_node)\n+\t\t    {\n+\t\t      error (\"wide string literal in %<asm%>\");\n+\t\t      $$ = build_string (1, \"\");\n+\t\t    }\n+\t\t  else\n+\t\t    $$ = $1; }\n+\n stop_string_translation:\n         { c_lex_string_translate = 0; }\n         ;"}, {"sha": "dfc3aa58c2d98bed5822da091694d0b65d25d016", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9143de5c0185332e852f3d3167a7d6c8ae0b2514/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9143de5c0185332e852f3d3167a7d6c8ae0b2514/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9143de5c0185332e852f3d3167a7d6c8ae0b2514", "patch": "@@ -1,3 +1,7 @@\n+2005-01-05  Joseph S. Myers  <joseph@codesourcery.com>\n+\n+\t* gcc.dg/asm-wide-1.c: New test.\n+\n 2005-01-05  Nathan Sidwell  <nathan@codesourcery.com>\n \n \tPR c++/19030"}, {"sha": "82cf368f4f8d28715e7da922dc898e0813d8b502", "filename": "gcc/testsuite/gcc.dg/asm-wide-1.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9143de5c0185332e852f3d3167a7d6c8ae0b2514/gcc%2Ftestsuite%2Fgcc.dg%2Fasm-wide-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9143de5c0185332e852f3d3167a7d6c8ae0b2514/gcc%2Ftestsuite%2Fgcc.dg%2Fasm-wide-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fasm-wide-1.c?ref=9143de5c0185332e852f3d3167a7d6c8ae0b2514", "patch": "@@ -0,0 +1,35 @@\n+/* Wide string literals should not be allowed in asm.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+\n+int foo asm (L\"bar\"); /* { dg-error \"error: wide string literal in 'asm'\" } */\n+\n+asm (L\"foo\"); /* { dg-error \"error: wide string literal in 'asm'\" } */\n+\n+void\n+f (void)\n+{\n+  int x = 1;\n+  asm (L\"foo\"); /* { dg-error \"error: wide string literal in 'asm'\" } */\n+  asm (\"foo\" :\n+       L\"=g\" (x)); /* { dg-error \"error: wide string literal in 'asm'\" } */\n+  asm (\"foo\" : [x]\n+       L\"=g\" (x)); /* { dg-error \"error: wide string literal in 'asm'\" } */\n+  asm (\"foo\" : [x] \"=g\" (x),\n+       L\"=g\" (x)); /* { dg-error \"error: wide string literal in 'asm'\" } */\n+  asm (\"foo\" : :\n+       L\"g\" (x)); /* { dg-error \"error: wide string literal in 'asm'\" } */\n+  asm (\"foo\" : : :\n+       L\"memory\"); /* { dg-error \"error: wide string literal in 'asm'\" } */\n+  asm (\"foo\" : : : \"memory\",\n+       L\"memory\"); /* { dg-error \"error: wide string literal in 'asm'\" } */\n+}\n+\n+/* Extra errors from the substitution of \"\" for wide strings: */\n+/* { dg-error \"output\" \"output\" { target *-*-* } 16 } */\n+/* { dg-error \"output\" \"output\" { target *-*-* } 18 } */\n+/* { dg-error \"output\" \"output\" { target *-*-* } 20 } */\n+/* { dg-warning \"match\" \"match\" { target *-*-* } 21 } */\n+/* { dg-error \"register\" \"register\" { target *-*-* } 23 } */\n+/* { dg-error \"register\" \"register\" { target *-*-* } 25 } */"}]}