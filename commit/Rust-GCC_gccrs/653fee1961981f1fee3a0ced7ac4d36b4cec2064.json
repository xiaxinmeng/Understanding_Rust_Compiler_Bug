{"sha": "653fee1961981f1fee3a0ced7ac4d36b4cec2064", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjUzZmVlMTk2MTk4MWYxZmVlM2EwY2VkN2FjNGQzNmI0Y2VjMjA2NA==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2018-08-02T20:07:28Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2018-08-02T20:07:28Z"}, "message": "Fix memory leak of pretty_printer prefixes\n\nWe were rather sloppy about handling the ownership of prefixes for\npretty_printer, and this lead to a memory leak for any time a\ndiagnostic_show_locus call emits multiple line spans.\n\nThis showed up in \"make selftest-valgrind\" as:\n\n3,976 bytes in 28 blocks are definitely lost in loss record 632 of 669\n   at 0x4A0645D: malloc (in /usr/lib64/valgrind/vgpreload_memcheck-amd64-linux.so)\n   by 0x1F08227: xmalloc (xmalloc.c:147)\n   by 0x1F083E6: xvasprintf (xvasprintf.c:58)\n   by 0x1E7EC7D: build_message_string(char const*, ...) (diagnostic.c:78)\n   by 0x1E7F438: diagnostic_get_location_text(diagnostic_context*, expanded_location) (diagnostic.c:328)\n   by 0x1E7FD54: default_diagnostic_start_span_fn(diagnostic_context*, expanded_location) (diagnostic.c:626)\n   by 0x1EB3508: selftest::test_diagnostic_context::start_span_cb(diagnostic_context*, expanded_location) (selftest-diagnostic.c:57)\n   by 0x1E89215: diagnostic_show_locus(diagnostic_context*, rich_location*, diagnostic_t) (diagnostic-show-locus.c:1992)\n   by 0x1E8ECAD: selftest::test_fixit_insert_containing_newline_2(selftest::line_table_case const&) (diagnostic-show-locus.c:3044)\n   by 0x1EB0606: selftest::for_each_line_table_case(void (*)(selftest::line_table_case const&)) (input.c:3525)\n   by 0x1E8F3F5: selftest::diagnostic_show_locus_c_tests() (diagnostic-show-locus.c:3164)\n   by 0x1E010BF: selftest::run_tests() (selftest-run-tests.c:88)\n\n4,004 bytes in 28 blocks are definitely lost in loss record 633 of 669\n   at 0x4A0645D: malloc (in /usr/lib64/valgrind/vgpreload_memcheck-amd64-linux.so)\n   by 0x1F08227: xmalloc (xmalloc.c:147)\n   by 0x1F083E6: xvasprintf (xvasprintf.c:58)\n   by 0x1E7EC7D: build_message_string(char const*, ...) (diagnostic.c:78)\n   by 0x1E7F438: diagnostic_get_location_text(diagnostic_context*, expanded_location) (diagnostic.c:328)\n   by 0x1E7FD54: default_diagnostic_start_span_fn(diagnostic_context*, expanded_location) (diagnostic.c:626)\n   by 0x1EB3508: selftest::test_diagnostic_context::start_span_cb(diagnostic_context*, expanded_location) (selftest-diagnostic.c:57)\n   by 0x1E89215: diagnostic_show_locus(diagnostic_context*, rich_location*, diagnostic_t) (diagnostic-show-locus.c:1992)\n   by 0x1E8B373: selftest::test_diagnostic_show_locus_fixit_lines(selftest::line_table_case const&) (diagnostic-show-locus.c:2500)\n   by 0x1EB0606: selftest::for_each_line_table_case(void (*)(selftest::line_table_case const&)) (input.c:3525)\n   by 0x1E8F3B9: selftest::diagnostic_show_locus_c_tests() (diagnostic-show-locus.c:3159)\n   by 0x1E010BF: selftest::run_tests() (selftest-run-tests.c:88)\n\nThis patch fixes the leaks by ensuring that the pretty_printer \"owns\"\nthe prefix if it's non-NULL, freeing it in the dtor and in pp_set_prefix.\n\ngcc/cp/ChangeLog:\n\t* error.c (cxx_print_error_function): Duplicate \"file\" before\n\tpassing it to pp_set_prefix.\n\t(cp_print_error_function): Use pp_take_prefix when saving the\n\texisting prefix.\n\ngcc/ChangeLog:\n\t* diagnostic-show-locus.c (diagnostic_show_locus): Use\n\tpp_take_prefix when saving the existing prefix.\n\t* diagnostic.c (diagnostic_append_note): Likewise.\n\t* langhooks.c (lhd_print_error_function): Likewise.\n\t* pretty-print.c (pp_set_prefix): Drop the \"const\" from \"prefix\"\n\tparam's type.  Free the existing prefix.\n\t(pp_take_prefix): New function.\n\t(pretty_printer::pretty_printer): Drop the prefix parameter.\n\tRename the length parameter to match the comment.\n\t(pretty_printer::~pretty_printer): Free the prefix.\n\t* pretty-print.h (pretty_printer::pretty_printer): Drop the prefix\n\tparameter.\n\t(struct pretty_printer): Drop the \"const\" from \"prefix\" field's\n\ttype and clarify memory management.\n\t(pp_set_prefix): Drop the \"const\" from the 2nd param.\n\t(pp_take_prefix): New decl.\n\nFrom-SVN: r263275", "tree": {"sha": "d0ee6f17465a7f19034bba6642c775e21173d97b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d0ee6f17465a7f19034bba6642c775e21173d97b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/653fee1961981f1fee3a0ced7ac4d36b4cec2064", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/653fee1961981f1fee3a0ced7ac4d36b4cec2064", "html_url": "https://github.com/Rust-GCC/gccrs/commit/653fee1961981f1fee3a0ced7ac4d36b4cec2064", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/653fee1961981f1fee3a0ced7ac4d36b4cec2064/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "74f9986eafd45489ff6563d6bb824ec1ad39cd14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74f9986eafd45489ff6563d6bb824ec1ad39cd14", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74f9986eafd45489ff6563d6bb824ec1ad39cd14"}], "stats": {"total": 87, "additions": 67, "deletions": 20}, "files": [{"sha": "cfd971faca4b5fa360ea4caa960b2500b13e7a45", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/653fee1961981f1fee3a0ced7ac4d36b4cec2064/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/653fee1961981f1fee3a0ced7ac4d36b4cec2064/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=653fee1961981f1fee3a0ced7ac4d36b4cec2064", "patch": "@@ -1,3 +1,22 @@\n+2018-08-02  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* diagnostic-show-locus.c (diagnostic_show_locus): Use\n+\tpp_take_prefix when saving the existing prefix.\n+\t* diagnostic.c (diagnostic_append_note): Likewise.\n+\t* langhooks.c (lhd_print_error_function): Likewise.\n+\t* pretty-print.c (pp_set_prefix): Drop the \"const\" from \"prefix\"\n+\tparam's type.  Free the existing prefix.\n+\t(pp_take_prefix): New function.\n+\t(pretty_printer::pretty_printer): Drop the prefix parameter.\n+\tRename the length parameter to match the comment.\n+\t(pretty_printer::~pretty_printer): Free the prefix.\n+\t* pretty-print.h (pretty_printer::pretty_printer): Drop the prefix\n+\tparameter.\n+\t(struct pretty_printer): Drop the \"const\" from \"prefix\" field's\n+\ttype and clarify memory management.\n+\t(pp_set_prefix): Drop the \"const\" from the 2nd param.\n+\t(pp_take_prefix): New decl.\n+\n 2018-08-02  Aaron Sawdey  <acsawdey@linux.ibm.com>\n \n \t* config/rs6000/rs6000-string.c (select_block_compare_mode): Move test"}, {"sha": "3f709ba562d53a1fe8c441dba63b64a054d6be55", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/653fee1961981f1fee3a0ced7ac4d36b4cec2064/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/653fee1961981f1fee3a0ced7ac4d36b4cec2064/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=653fee1961981f1fee3a0ced7ac4d36b4cec2064", "patch": "@@ -1,3 +1,10 @@\n+2018-08-02  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* error.c (cxx_print_error_function): Duplicate \"file\" before\n+\tpassing it to pp_set_prefix.\n+\t(cp_print_error_function): Use pp_take_prefix when saving the\n+\texisting prefix.\n+\n 2018-08-01  Martin Sebor  <msebor@redhat.com>\n \n \tPR tree-optimization/86650"}, {"sha": "c49f4d7c378cfff99bd97b1caf5054efc1844202", "filename": "gcc/cp/error.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/653fee1961981f1fee3a0ced7ac4d36b4cec2064/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/653fee1961981f1fee3a0ced7ac4d36b4cec2064/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=653fee1961981f1fee3a0ced7ac4d36b4cec2064", "patch": "@@ -3287,8 +3287,13 @@ void\n cxx_print_error_function (diagnostic_context *context, const char *file,\n \t\t\t  diagnostic_info *diagnostic)\n {\n+  char *prefix;\n+  if (file)\n+    prefix = xstrdup (file);\n+  else\n+    prefix = NULL;\n   lhd_print_error_function (context, file, diagnostic);\n-  pp_set_prefix (context->printer, file);\n+  pp_set_prefix (context->printer, prefix);\n   maybe_print_instantiation_context (context);\n }\n \n@@ -3316,7 +3321,7 @@ cp_print_error_function (diagnostic_context *context,\n     return;\n   if (diagnostic_last_function_changed (context, diagnostic))\n     {\n-      const char *old_prefix = context->printer->prefix;\n+      char *old_prefix = pp_take_prefix (context->printer);\n       const char *file = LOCATION_FILE (diagnostic_location (diagnostic));\n       tree abstract_origin = diagnostic_abstract_origin (diagnostic);\n       char *new_prefix = (file && abstract_origin == NULL)"}, {"sha": "cf9e5c202feb33d898a5e82c12dfdf3295d3b036", "filename": "gcc/diagnostic-show-locus.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/653fee1961981f1fee3a0ced7ac4d36b4cec2064/gcc%2Fdiagnostic-show-locus.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/653fee1961981f1fee3a0ced7ac4d36b4cec2064/gcc%2Fdiagnostic-show-locus.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic-show-locus.c?ref=653fee1961981f1fee3a0ced7ac4d36b4cec2064", "patch": "@@ -1978,7 +1978,7 @@ diagnostic_show_locus (diagnostic_context * context,\n \n   context->last_location = loc;\n \n-  const char *saved_prefix = pp_get_prefix (context->printer);\n+  char *saved_prefix = pp_take_prefix (context->printer);\n   pp_set_prefix (context->printer, NULL);\n \n   layout layout (context, richloc, diagnostic_kind);"}, {"sha": "c61e0c4572ada0dcdb8da224ba2fdfeb349ce62e", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/653fee1961981f1fee3a0ced7ac4d36b4cec2064/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/653fee1961981f1fee3a0ced7ac4d36b4cec2064/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=653fee1961981f1fee3a0ced7ac4d36b4cec2064", "patch": "@@ -1063,7 +1063,6 @@ diagnostic_append_note (diagnostic_context *context,\n {\n   diagnostic_info diagnostic;\n   va_list ap;\n-  const char *saved_prefix;\n   rich_location richloc (line_table, location);\n \n   va_start (ap, gmsgid);\n@@ -1073,7 +1072,7 @@ diagnostic_append_note (diagnostic_context *context,\n       va_end (ap);\n       return;\n     }\n-  saved_prefix = pp_get_prefix (context->printer);\n+  char *saved_prefix = pp_take_prefix (context->printer);\n   pp_set_prefix (context->printer,\n                  diagnostic_build_prefix (context, &diagnostic));\n   pp_format (context->printer, &diagnostic.message);"}, {"sha": "4e6179f248a5f8863168714c0bd16b1bbf0e4afd", "filename": "gcc/langhooks.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/653fee1961981f1fee3a0ced7ac4d36b4cec2064/gcc%2Flanghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/653fee1961981f1fee3a0ced7ac4d36b4cec2064/gcc%2Flanghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.c?ref=653fee1961981f1fee3a0ced7ac4d36b4cec2064", "patch": "@@ -369,7 +369,7 @@ lhd_print_error_function (diagnostic_context *context, const char *file,\n {\n   if (diagnostic_last_function_changed (context, diagnostic))\n     {\n-      const char *old_prefix = context->printer->prefix;\n+      char *old_prefix = pp_take_prefix (context->printer);\n       tree abstract_origin = diagnostic_abstract_origin (diagnostic);\n       char *new_prefix = (file && abstract_origin == NULL)\n \t\t\t ? file_name_as_prefix (context, file) : NULL;"}, {"sha": "736af8f77359dd1f83f15102ba81a2aacc34a557", "filename": "gcc/pretty-print.c", "status": "modified", "additions": 23, "deletions": 8, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/653fee1961981f1fee3a0ced7ac4d36b4cec2064/gcc%2Fpretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/653fee1961981f1fee3a0ced7ac4d36b4cec2064/gcc%2Fpretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpretty-print.c?ref=653fee1961981f1fee3a0ced7ac4d36b4cec2064", "patch": "@@ -1482,23 +1482,38 @@ pp_clear_output_area (pretty_printer *pp)\n   pp_buffer (pp)->line_length = 0;\n }\n \n-/* Set PREFIX for PRETTY-PRINTER.  */\n+/* Set PREFIX for PRETTY-PRINTER, taking ownership of PREFIX, which\n+   will eventually be free-ed.  */\n+\n void\n-pp_set_prefix (pretty_printer *pp, const char *prefix)\n+pp_set_prefix (pretty_printer *pp, char *prefix)\n {\n+  free (pp->prefix);\n   pp->prefix = prefix;\n   pp_set_real_maximum_length (pp);\n   pp->emitted_prefix = false;\n   pp_indentation (pp) = 0;\n }\n \n+/* Take ownership of PP's prefix, setting it to NULL.\n+   This allows clients to save, overide, and then restore an existing\n+   prefix, without it being free-ed.  */\n+\n+char *\n+pp_take_prefix (pretty_printer *pp)\n+{\n+  char *result = pp->prefix;\n+  pp->prefix = NULL;\n+  return result;\n+}\n+\n /* Free PRETTY-PRINTER's prefix, a previously malloc()'d string.  */\n void\n pp_destroy_prefix (pretty_printer *pp)\n {\n   if (pp->prefix != NULL)\n     {\n-      free (CONST_CAST (char *, pp->prefix));\n+      free (pp->prefix);\n       pp->prefix = NULL;\n     }\n }\n@@ -1535,10 +1550,9 @@ pp_emit_prefix (pretty_printer *pp)\n     }\n }\n \n-/* Construct a PRETTY-PRINTER with PREFIX and of MAXIMUM_LENGTH\n-   characters per line.  */\n+/* Construct a PRETTY-PRINTER of MAXIMUM_LENGTH characters per line.  */\n \n-pretty_printer::pretty_printer (const char *p, int l)\n+pretty_printer::pretty_printer (int maximum_length)\n   : buffer (new (XCNEW (output_buffer)) output_buffer ()),\n     prefix (),\n     padding (pp_none),\n@@ -1552,10 +1566,10 @@ pretty_printer::pretty_printer (const char *p, int l)\n     translate_identifiers (true),\n     show_color ()\n {\n-  pp_line_cutoff (this) = l;\n+  pp_line_cutoff (this) = maximum_length;\n   /* By default, we emit prefixes once per message.  */\n   pp_prefixing_rule (this) = DIAGNOSTICS_SHOW_PREFIX_ONCE;\n-  pp_set_prefix (this, p);\n+  pp_set_prefix (this, NULL);\n }\n \n pretty_printer::~pretty_printer ()\n@@ -1564,6 +1578,7 @@ pretty_printer::~pretty_printer ()\n     delete m_format_postprocessor;\n   buffer->~output_buffer ();\n   XDELETE (buffer);\n+  free (prefix);\n }\n \n /* Append a string delimited by START and END to the output area of"}, {"sha": "0d67e3080500ad8db054a65d02e34623f0962e26", "filename": "gcc/pretty-print.h", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/653fee1961981f1fee3a0ced7ac4d36b4cec2064/gcc%2Fpretty-print.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/653fee1961981f1fee3a0ced7ac4d36b4cec2064/gcc%2Fpretty-print.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpretty-print.h?ref=653fee1961981f1fee3a0ced7ac4d36b4cec2064", "patch": "@@ -215,17 +215,18 @@ class format_postprocessor\n    and add additional fields they need.  */\n struct pretty_printer\n {\n-  // Default construct a pretty printer with specified prefix\n-  // and a maximum line length cut off limit.\n-  explicit pretty_printer (const char* = NULL, int = 0);\n+  /* Default construct a pretty printer with specified\n+     maximum line length cut off limit.  */\n+  explicit pretty_printer (int = 0);\n \n   virtual ~pretty_printer ();\n \n   /* Where we print external representation of ENTITY.  */\n   output_buffer *buffer;\n \n-  /* The prefix for each new line.  */\n-  const char *prefix;\n+  /* The prefix for each new line.  If non-NULL, this is \"owned\" by the\n+     pretty_printer, and will eventually be free-ed.  */\n+  char *prefix;\n \n   /* Where to put whitespace around the entity being formatted.  */\n   pp_padding padding;\n@@ -338,7 +339,8 @@ pp_get_prefix (const pretty_printer *pp) { return pp->prefix; }\n #define pp_buffer(PP) (PP)->buffer\n \n extern void pp_set_line_maximum_length (pretty_printer *, int);\n-extern void pp_set_prefix (pretty_printer *, const char *);\n+extern void pp_set_prefix (pretty_printer *, char *);\n+extern char *pp_take_prefix (pretty_printer *);\n extern void pp_destroy_prefix (pretty_printer *);\n extern int pp_remaining_character_count_for_line (pretty_printer *);\n extern void pp_clear_output_area (pretty_printer *);"}]}