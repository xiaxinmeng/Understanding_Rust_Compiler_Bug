{"sha": "53917868b8f482e3c378d7b67f469c768d720206", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTM5MTc4NjhiOGY0ODJlM2MzNzhkN2I2N2Y0NjljNzY4ZDcyMDIwNg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2005-12-05T16:24:47Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2005-12-05T16:24:47Z"}, "message": "utils.c (convert): Use fold_convert where appropriate.\n\n2005-12-05  Richard Guenther  <rguenther@suse.de>\n\n\t* utils.c (convert): Use fold_convert where appropriate.\n\nFrom-SVN: r108061", "tree": {"sha": "93a3b56ff049d43a4d3bd219deaac5249b0ab4ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/93a3b56ff049d43a4d3bd219deaac5249b0ab4ed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/53917868b8f482e3c378d7b67f469c768d720206", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53917868b8f482e3c378d7b67f469c768d720206", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53917868b8f482e3c378d7b67f469c768d720206", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53917868b8f482e3c378d7b67f469c768d720206/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2abefe3d992a31a4f060f25857b067b397b7bac9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2abefe3d992a31a4f060f25857b067b397b7bac9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2abefe3d992a31a4f060f25857b067b397b7bac9"}], "stats": {"total": 21, "additions": 12, "deletions": 9}, "files": [{"sha": "3d978b53599a7f99c7ec6dd9438f7b30e588931f", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53917868b8f482e3c378d7b67f469c768d720206/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53917868b8f482e3c378d7b67f469c768d720206/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=53917868b8f482e3c378d7b67f469c768d720206", "patch": "@@ -1,3 +1,7 @@\n+2005-12-05  Richard Guenther  <rguenther@suse.de>\n+\n+\t* utils.c (convert): Use fold_convert where appropriate.\n+\n 2005-12-05  Paolo Bonzini  <bonzini@gnu.org>\n \n         * Makefile.in (gnatlib): Fix regex, using \\. instead of . when"}, {"sha": "f029dbfb05991b31eacf8beb11e894ff452ce074", "filename": "gcc/ada/utils.c", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53917868b8f482e3c378d7b67f469c768d720206/gcc%2Fada%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53917868b8f482e3c378d7b67f469c768d720206/gcc%2Fada%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Futils.c?ref=53917868b8f482e3c378d7b67f469c768d720206", "patch": "@@ -2789,9 +2789,8 @@ convert (tree type, tree expr)\n   /* If the input is a biased type, adjust first.  */\n   if (ecode == INTEGER_TYPE && TYPE_BIASED_REPRESENTATION_P (etype))\n     return convert (type, fold (build2 (PLUS_EXPR, TREE_TYPE (etype),\n-\t\t\t\t\tfold (build1 (NOP_EXPR,\n-\t\t\t\t\t\t      TREE_TYPE (etype),\n-\t\t\t\t\t\t      expr)),\n+\t\t\t\t\tfold_convert (TREE_TYPE (etype),\n+\t\t\t\t\t\t      expr),\n \t\t\t\t\tTYPE_MIN_VALUE (etype))));\n \n   /* If the input is a justified modular type, we need to extract the actual\n@@ -2940,26 +2939,26 @@ convert (tree type, tree expr)\n   else if (TYPE_MAIN_VARIANT (type) == TYPE_MAIN_VARIANT (etype)\n \t   || (code == INTEGER_CST && ecode == INTEGER_CST\n \t       && (type == TREE_TYPE (etype) || etype == TREE_TYPE (type))))\n-    return fold (build1 (NOP_EXPR, type, expr));\n+    return fold_convert (type, expr);\n \n   switch (code)\n     {\n     case VOID_TYPE:\n       return build1 (CONVERT_EXPR, type, expr);\n \n     case BOOLEAN_TYPE:\n-      return fold (build1 (NOP_EXPR, type, gnat_truthvalue_conversion (expr)));\n+      return fold_convert (type, gnat_truthvalue_conversion (expr));\n \n     case INTEGER_TYPE:\n       if (TYPE_HAS_ACTUAL_BOUNDS_P (type)\n \t  && (ecode == ARRAY_TYPE || ecode == UNCONSTRAINED_ARRAY_TYPE\n \t      || (ecode == RECORD_TYPE && TYPE_CONTAINS_TEMPLATE_P (etype))))\n \treturn unchecked_convert (type, expr, false);\n       else if (TYPE_BIASED_REPRESENTATION_P (type))\n-\treturn fold (build1 (CONVERT_EXPR, type,\n-\t\t\t     fold (build2 (MINUS_EXPR, TREE_TYPE (type),\n-\t\t\t\t\t   convert (TREE_TYPE (type), expr),\n-\t\t\t\t\t   TYPE_MIN_VALUE (type)))));\n+\treturn fold_convert (type,\n+\t\t\t     fold_build2 (MINUS_EXPR, TREE_TYPE (type),\n+\t\t\t\t\t  convert (TREE_TYPE (type), expr),\n+\t\t\t\t\t  TYPE_MIN_VALUE (type)));\n \n       /* ... fall through ... */\n "}]}