{"sha": "77eccbf39ed55297802bb66dff5f62507a7239e3", "node_id": "C_kwDOANBUbNoAKDc3ZWNjYmYzOWVkNTUyOTc4MDJiYjY2ZGZmNWY2MjUwN2E3MjM5ZTM", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2022-03-01T17:04:29Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2022-03-04T23:51:59Z"}, "message": "rs6000: Improve .machine\n\nThis adds more correct .machine for most older CPUs.  It should be\nconservative in the sense that everything we handled before we handle at\nleast as well now.  This does not yet revamp the server CPU handling, it\nis too risky at this point in time.\n\nTested on powerpc64-linux {-m32,-m64}.  Also manually tested with all\n-mcpu=, and the output of that passed through the GNU assembler.\n\n2022-03-04  Segher Boessenkool  <segher@kernel.crashing.org>\n\n\t* config/rs6000/rs6000.cc (rs6000_machine_from_flags): Restructure a\n\tbit.  Handle most older CPUs.", "tree": {"sha": "e04cda6b6364ea252ee9630083abaf10b94445ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e04cda6b6364ea252ee9630083abaf10b94445ac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/77eccbf39ed55297802bb66dff5f62507a7239e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77eccbf39ed55297802bb66dff5f62507a7239e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77eccbf39ed55297802bb66dff5f62507a7239e3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77eccbf39ed55297802bb66dff5f62507a7239e3/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e5d9ae8e41e7690c0c728ff877a2f1bc2ab6973", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e5d9ae8e41e7690c0c728ff877a2f1bc2ab6973", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e5d9ae8e41e7690c0c728ff877a2f1bc2ab6973"}], "stats": {"total": 81, "additions": 54, "deletions": 27}, "files": [{"sha": "7afbc295e038553653382c4d5d8d651486d1f98f", "filename": "gcc/config/rs6000/rs6000.cc", "status": "modified", "additions": 54, "deletions": 27, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77eccbf39ed55297802bb66dff5f62507a7239e3/gcc%2Fconfig%2Frs6000%2Frs6000.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77eccbf39ed55297802bb66dff5f62507a7239e3/gcc%2Fconfig%2Frs6000%2Frs6000.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.cc?ref=77eccbf39ed55297802bb66dff5f62507a7239e3", "patch": "@@ -5764,33 +5764,60 @@ const char *rs6000_machine;\n const char *\n rs6000_machine_from_flags (void)\n {\n-  /* For some CPUs, the machine cannot be determined by ISA flags.  We have to\n-     check them first.  */\n-  switch (rs6000_cpu)\n-    {\n-    case PROCESSOR_PPC8540:\n-    case PROCESSOR_PPC8548:\n-      return \"e500\";\n-\n-    case PROCESSOR_PPCE300C2:\n-    case PROCESSOR_PPCE300C3:\n-      return \"e300\";\n-\n-    case PROCESSOR_PPCE500MC:\n-      return \"e500mc\";\n-\n-    case PROCESSOR_PPCE500MC64:\n-      return \"e500mc64\";\n-\n-    case PROCESSOR_PPCE5500:\n-      return \"e5500\";\n-\n-    case PROCESSOR_PPCE6500:\n-      return \"e6500\";\n-\n-    default:\n-      break;\n-    }\n+  /* e300 and e500 */\n+  if (rs6000_cpu == PROCESSOR_PPCE300C2 || rs6000_cpu == PROCESSOR_PPCE300C3)\n+    return \"e300\";\n+  if (rs6000_cpu == PROCESSOR_PPC8540 || rs6000_cpu == PROCESSOR_PPC8548)\n+    return \"e500\";\n+  if (rs6000_cpu == PROCESSOR_PPCE500MC)\n+    return \"e500mc\";\n+  if (rs6000_cpu == PROCESSOR_PPCE500MC64)\n+    return \"e500mc64\";\n+  if (rs6000_cpu == PROCESSOR_PPCE5500)\n+    return \"e5500\";\n+  if (rs6000_cpu == PROCESSOR_PPCE6500)\n+    return \"e6500\";\n+\n+  /* 400 series */\n+  if (rs6000_cpu == PROCESSOR_PPC403)\n+    return \"\\\"403\\\"\";\n+  if (rs6000_cpu == PROCESSOR_PPC405)\n+    return \"\\\"405\\\"\";\n+  if (rs6000_cpu == PROCESSOR_PPC440)\n+    return \"\\\"440\\\"\";\n+  if (rs6000_cpu == PROCESSOR_PPC476)\n+    return \"\\\"476\\\"\";\n+\n+  /* A2 */\n+  if (rs6000_cpu == PROCESSOR_PPCA2)\n+    return \"a2\";\n+\n+  /* Cell BE */\n+  if (rs6000_cpu == PROCESSOR_CELL)\n+    return \"cell\";\n+\n+  /* Titan */\n+  if (rs6000_cpu == PROCESSOR_TITAN)\n+    return \"titan\";\n+\n+  /* 500 series and 800 series */\n+  if (rs6000_cpu == PROCESSOR_MPCCORE)\n+    return \"\\\"821\\\"\";\n+\n+  /* 600 series and 700 series, \"classic\" */\n+  if (rs6000_cpu == PROCESSOR_PPC601 || rs6000_cpu == PROCESSOR_PPC603\n+      || rs6000_cpu == PROCESSOR_PPC604 || rs6000_cpu == PROCESSOR_PPC604e\n+      || rs6000_cpu == PROCESSOR_PPC750 || rs6000_cpu == PROCESSOR_POWERPC)\n+    return \"ppc\";\n+\n+  /* Classic with AltiVec, \"G4\" */\n+  if (rs6000_cpu == PROCESSOR_PPC7400 || rs6000_cpu == PROCESSOR_PPC7450)\n+    return \"\\\"7450\\\"\";\n+\n+  /* The older 64-bit CPUs */\n+  if (rs6000_cpu == PROCESSOR_PPC620 || rs6000_cpu == PROCESSOR_PPC630\n+      || rs6000_cpu == PROCESSOR_RS64A || rs6000_cpu == PROCESSOR_POWERPC64)\n+    return \"ppc64\";\n \n   HOST_WIDE_INT flags = rs6000_isa_flags;\n "}]}