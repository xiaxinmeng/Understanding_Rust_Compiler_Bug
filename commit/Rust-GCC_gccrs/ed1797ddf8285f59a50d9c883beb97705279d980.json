{"sha": "ed1797ddf8285f59a50d9c883beb97705279d980", "node_id": "C_kwDOANBUbNoAKGVkMTc5N2RkZjgyODVmNTlhNTBkOWM4ODNiZWI5NzcwNTI3OWQ5ODA", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2022-11-01T15:49:03Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2022-11-15T22:44:13Z"}, "message": "c++: Disable -Wignored-qualifiers for template args [PR107492]\n\nIt seems wrong to issue a -Wignored-qualifiers warning for code like:\n\n  static_assert(!is_same_v<void(*)(), const void(*)()>);\n\nbecause there the qualifier matters.  Likewise in template\nspecialization:\n\n  template<typename T> struct S { };\n  template<> struct S<void(*)()> { };\n  template<> struct S<const void(*)()> { }; // OK, not a redefinition\n\nAnd likewise in other type-id contexts such as trailing-return-type:\n\n  auto g() -> const void (*)();\n\nThis patch limits the warning to the function declaration context only.\n\n\tPR c++/107492\n\ngcc/cp/ChangeLog:\n\n\t* decl.cc (grokdeclarator): Only emit a -Wignored-qualifiers warning\n\twhen funcdecl_p.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/warn/Wignored-qualifiers3.C: New test.", "tree": {"sha": "45f3b83dded8a3da2c41821a18ce8cdd6604dd05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/45f3b83dded8a3da2c41821a18ce8cdd6604dd05"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ed1797ddf8285f59a50d9c883beb97705279d980", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed1797ddf8285f59a50d9c883beb97705279d980", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed1797ddf8285f59a50d9c883beb97705279d980", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed1797ddf8285f59a50d9c883beb97705279d980/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c717a92dd89321eeb74aaa3daeb32354ac588d20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c717a92dd89321eeb74aaa3daeb32354ac588d20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c717a92dd89321eeb74aaa3daeb32354ac588d20"}], "stats": {"total": 30, "additions": 29, "deletions": 1}, "files": [{"sha": "0234919ea572477297649d2303ec6b486f7af905", "filename": "gcc/cp/decl.cc", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed1797ddf8285f59a50d9c883beb97705279d980/gcc%2Fcp%2Fdecl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed1797ddf8285f59a50d9c883beb97705279d980/gcc%2Fcp%2Fdecl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.cc?ref=ed1797ddf8285f59a50d9c883beb97705279d980", "patch": "@@ -13038,7 +13038,11 @@ grokdeclarator (const cp_declarator *declarator,\n \n \t    if (type_quals != TYPE_UNQUALIFIED)\n \t      {\n-\t\tif (SCALAR_TYPE_P (type) || VOID_TYPE_P (type))\n+\t\t/* It's wrong, for instance, to issue a -Wignored-qualifiers\n+\t\t   warning for\n+\t\t    static_assert(!is_same_v<void(*)(), const void(*)()>);\n+\t\t    because there the qualifier matters.  */\n+\t\tif (funcdecl_p && (SCALAR_TYPE_P (type) || VOID_TYPE_P (type)))\n \t\t  warning_at (typespec_loc, OPT_Wignored_qualifiers, \"type \"\n \t\t\t      \"qualifiers ignored on function return type\");\n \t\t/* [dcl.fct] \"A volatile-qualified return type is"}, {"sha": "dedb38fc9952c3703552957443d1ccf5671c2476", "filename": "gcc/testsuite/g++.dg/warn/Wignored-qualifiers3.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed1797ddf8285f59a50d9c883beb97705279d980/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWignored-qualifiers3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed1797ddf8285f59a50d9c883beb97705279d980/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWignored-qualifiers3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWignored-qualifiers3.C?ref=ed1797ddf8285f59a50d9c883beb97705279d980", "patch": "@@ -0,0 +1,24 @@\n+// PR c++/107492\n+// { dg-do compile { target c++14 } }\n+// { dg-additional-options \"-Wignored-qualifiers\" }\n+\n+// Here the 'const' matters, so don't warn.\n+template<typename T> struct S { };\n+template<> struct S<void(*)()> { };\n+template<> struct S<const void(*)()> { }; // { dg-bogus \"ignored\" }\n+\n+template<typename T, typename U> constexpr bool is_same_v = false;\n+template<typename T> constexpr bool is_same_v<T, T> = true;\n+\n+static_assert( ! is_same_v< void(*)(), const void(*)() >, \"\"); // { dg-bogus \"ignored\" }\n+\n+// Here the 'const' matters as well -> don't warn.\n+auto g() -> const void (*)(); // { dg-bogus \"ignored\" }\n+auto g() -> const void (*)() { return nullptr; } // { dg-bogus \"ignored\" }\n+\n+// Here as well.\n+const void (*h)() = static_cast<const void (*)()>(h); // { dg-bogus \"ignored\" }\n+\n+// But let's keep the warning here.\n+const void f(); // { dg-warning \"ignored\" }\n+const void f() { } // { dg-warning \"ignored\" }"}]}