{"sha": "3f325179b32c4defea58c703190f4d5fa55028bd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2YzMjUxNzliMzJjNGRlZmVhNThjNzAzMTkwZjRkNWZhNTUwMjhiZA==", "commit": {"author": {"name": "Qian Jianhua", "email": "qianjh@cn.fujitsu.com", "date": "2021-01-13T07:22:09Z"}, "committer": {"name": "Qian Jianhua", "email": "qianjh@cn.fujitsu.com", "date": "2021-01-13T07:22:09Z"}, "message": "[PATCH v2] aarch64: Add cpu cost tables for A64FX\n\nThis patch add cost tables for A64FX.\n\n2021-01-13 Qian jianhua <qianjh@cn.fujitsu.com>\n\ngcc/\n\t* config/aarch64/aarch64-cost-tables.h (a64fx_extra_costs): New.\n\t* config/aarch64/aarch64.c (a64fx_addrcost_table): New.\n\t(a64fx_regmove_cost, a64fx_vector_cost): New.\n\t(a64fx_tunings): Use the new added cost tables.", "tree": {"sha": "5841051f9f485aafdb513ed4fdfb802614a331fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5841051f9f485aafdb513ed4fdfb802614a331fb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3f325179b32c4defea58c703190f4d5fa55028bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f325179b32c4defea58c703190f4d5fa55028bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f325179b32c4defea58c703190f4d5fa55028bd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f325179b32c4defea58c703190f4d5fa55028bd/comments", "author": null, "committer": null, "parents": [{"sha": "b668a06e37f72fd96bacd6769990ec97dac4ac6d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b668a06e37f72fd96bacd6769990ec97dac4ac6d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b668a06e37f72fd96bacd6769990ec97dac4ac6d"}], "stats": {"total": 175, "additions": 171, "deletions": 4}, "files": [{"sha": "c309f88cbd56f0d2347996d860c982a3a6744492", "filename": "gcc/config/aarch64/aarch64-cost-tables.h", "status": "modified", "additions": 103, "deletions": 0, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f325179b32c4defea58c703190f4d5fa55028bd/gcc%2Fconfig%2Faarch64%2Faarch64-cost-tables.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f325179b32c4defea58c703190f4d5fa55028bd/gcc%2Fconfig%2Faarch64%2Faarch64-cost-tables.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-cost-tables.h?ref=3f325179b32c4defea58c703190f4d5fa55028bd", "patch": "@@ -541,4 +541,107 @@ const struct cpu_cost_table tsv110_extra_costs =\n   }\n };\n \n+const struct cpu_cost_table a64fx_extra_costs =\n+{\n+  /* ALU */\n+  {\n+    0,                 /* arith.  */\n+    0,                 /* logical.  */\n+    0,                 /* shift.  */\n+    0,                 /* shift_reg.  */\n+    COSTS_N_INSNS (1), /* arith_shift.  */\n+    COSTS_N_INSNS (1), /* arith_shift_reg.  */\n+    COSTS_N_INSNS (1), /* log_shift.  */\n+    COSTS_N_INSNS (1), /* log_shift_reg.  */\n+    0,                 /* extend.  */\n+    COSTS_N_INSNS (1), /* extend_arith.  */\n+    0,                 /* bfi.  */\n+    0,                 /* bfx.  */\n+    0,                 /* clz.  */\n+    0,                 /* rev.  */\n+    0,                 /* non_exec.  */\n+    true               /* non_exec_costs_exec.  */\n+  },\n+  {\n+    /* MULT SImode */\n+    {\n+      COSTS_N_INSNS (4),       /* simple.  */\n+      COSTS_N_INSNS (4),       /* flag_setting.  */\n+      COSTS_N_INSNS (4),       /* extend.  */\n+      COSTS_N_INSNS (5),       /* add.  */\n+      COSTS_N_INSNS (5),       /* extend_add.  */\n+      COSTS_N_INSNS (18)       /* idiv.  */\n+    },\n+    /* MULT DImode */\n+    {\n+      COSTS_N_INSNS (4),       /* simple.  */\n+      0,                       /* flag_setting (N/A).  */\n+      COSTS_N_INSNS (4),       /* extend.  */\n+      COSTS_N_INSNS (5),       /* add.  */\n+      COSTS_N_INSNS (5),       /* extend_add.  */\n+      COSTS_N_INSNS (26)       /* idiv.  */\n+    }\n+  },\n+  /* LD/ST */\n+  {\n+    COSTS_N_INSNS (4),         /* load.  */\n+    COSTS_N_INSNS (4),         /* load_sign_extend.  */\n+    COSTS_N_INSNS (5),         /* ldrd.  */\n+    COSTS_N_INSNS (4),         /* ldm_1st.  */\n+    1,                         /* ldm_regs_per_insn_1st.  */\n+    2,                         /* ldm_regs_per_insn_subsequent.  */\n+    COSTS_N_INSNS (4),         /* loadf.  */\n+    COSTS_N_INSNS (4),         /* loadd.  */\n+    COSTS_N_INSNS (5),         /* load_unaligned.  */\n+    0,                         /* store.  */\n+    0,                         /* strd.  */\n+    0,                         /* stm_1st.  */\n+    1,                         /* stm_regs_per_insn_1st.  */\n+    2,                         /* stm_regs_per_insn_subsequent.  */\n+    0,                         /* storef.  */\n+    0,                         /* stored.  */\n+    0,                         /* store_unaligned.  */\n+    COSTS_N_INSNS (1),         /* loadv.  */\n+    COSTS_N_INSNS (1)          /* storev.  */\n+  },\n+  {\n+    /* FP SFmode */\n+    {\n+      COSTS_N_INSNS (6),      /* div.  */\n+      COSTS_N_INSNS (1),       /* mult.  */\n+      COSTS_N_INSNS (1),       /* mult_addsub.  */\n+      COSTS_N_INSNS (2),       /* fma.  */\n+      COSTS_N_INSNS (1),       /* addsub.  */\n+      COSTS_N_INSNS (1),       /* fpconst.  */\n+      COSTS_N_INSNS (1),       /* neg.  */\n+      COSTS_N_INSNS (1),       /* compare.  */\n+      COSTS_N_INSNS (2),       /* widen.  */\n+      COSTS_N_INSNS (2),       /* narrow.  */\n+      COSTS_N_INSNS (2),       /* toint.  */\n+      COSTS_N_INSNS (2),       /* fromint.  */\n+      COSTS_N_INSNS (2)        /* roundint.  */\n+    },\n+    /* FP DFmode */\n+    {\n+      COSTS_N_INSNS (11),      /* div.  */\n+      COSTS_N_INSNS (1),       /* mult.  */\n+      COSTS_N_INSNS (1),       /* mult_addsub.  */\n+      COSTS_N_INSNS (2),       /* fma.  */\n+      COSTS_N_INSNS (1),       /* addsub.  */\n+      COSTS_N_INSNS (1),       /* fpconst.  */\n+      COSTS_N_INSNS (1),       /* neg.  */\n+      COSTS_N_INSNS (1),       /* compare.  */\n+      COSTS_N_INSNS (2),       /* widen.  */\n+      COSTS_N_INSNS (2),       /* narrow.  */\n+      COSTS_N_INSNS (2),       /* toint.  */\n+      COSTS_N_INSNS (2),       /* fromint.  */\n+      COSTS_N_INSNS (2)        /* roundint.  */\n+    }\n+  },\n+  /* Vector */\n+  {\n+    COSTS_N_INSNS (1)  /* alu.  */\n+  }\n+};\n+\n #endif"}, {"sha": "7536b75003bcfdd2acd6cd86c01ef651960395ed", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 68, "deletions": 4, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f325179b32c4defea58c703190f4d5fa55028bd/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f325179b32c4defea58c703190f4d5fa55028bd/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=3f325179b32c4defea58c703190f4d5fa55028bd", "patch": "@@ -464,6 +464,22 @@ static const struct cpu_addrcost_table qdf24xx_addrcost_table =\n   2, /* imm_offset  */\n };\n \n+static const struct cpu_addrcost_table a64fx_addrcost_table =\n+{\n+    {\n+      1, /* hi  */\n+      1, /* si  */\n+      1, /* di  */\n+      2, /* ti  */\n+    },\n+  0, /* pre_modify  */\n+  0, /* post_modify  */\n+  2, /* register_offset  */\n+  3, /* register_sextend  */\n+  3, /* register_zextend  */\n+  0, /* imm_offset  */\n+};\n+\n static const struct cpu_regmove_cost generic_regmove_cost =\n {\n   1, /* GP2GP  */\n@@ -559,6 +575,16 @@ static const struct cpu_regmove_cost tsv110_regmove_cost =\n   2  /* FP2FP  */\n };\n \n+static const struct cpu_regmove_cost a64fx_regmove_cost =\n+{\n+  1, /* GP2GP  */\n+  /* Avoid the use of slow int<->fp moves for spilling by setting\n+     their cost higher than memmov_cost.  */\n+  5, /* GP2FP  */\n+  7, /* FP2GP  */\n+  2 /* FP2FP  */\n+};\n+\n /* Generic costs for Advanced SIMD vector operations.   */\n static const advsimd_vec_cost generic_advsimd_vector_cost =\n {\n@@ -600,6 +626,44 @@ static const struct cpu_vector_cost generic_vector_cost =\n   &generic_sve_vector_cost /* sve */\n };\n \n+static const advsimd_vec_cost a64fx_advsimd_vector_cost =\n+{\n+  2, /* int_stmt_cost  */\n+  5, /* fp_stmt_cost  */\n+  3, /* permute_cost  */\n+  13, /* vec_to_scalar_cost  */\n+  4, /* scalar_to_vec_cost  */\n+  6, /* align_load_cost  */\n+  6, /* unalign_load_cost  */\n+  1, /* unalign_store_cost  */\n+  1  /* store_cost  */\n+};\n+\n+static const sve_vec_cost a64fx_sve_vector_cost =\n+{\n+  2, /* int_stmt_cost  */\n+  5, /* fp_stmt_cost  */\n+  3, /* permute_cost  */\n+  13, /* vec_to_scalar_cost  */\n+  4, /* scalar_to_vec_cost  */\n+  6, /* align_load_cost  */\n+  6, /* unalign_load_cost  */\n+  1, /* unalign_store_cost  */\n+  1  /* store_cost  */\n+};\n+\n+static const struct cpu_vector_cost a64fx_vector_cost =\n+{\n+  1, /* scalar_int_stmt_cost  */\n+  5, /* scalar_fp_stmt_cost  */\n+  4, /* scalar_load_cost  */\n+  1, /* scalar_store_cost  */\n+  3, /* cond_taken_branch_cost  */\n+  1, /* cond_not_taken_branch_cost  */\n+  &a64fx_advsimd_vector_cost, /* advsimd  */\n+  &a64fx_sve_vector_cost /* sve  */\n+};\n+\n static const advsimd_vec_cost qdf24xx_advsimd_vector_cost =\n {\n   1, /* int_stmt_cost  */\n@@ -1460,10 +1524,10 @@ static const struct tune_params neoversen2_tunings =\n \n static const struct tune_params a64fx_tunings =\n {\n-  &generic_extra_costs,\n-  &generic_addrcost_table,\n-  &generic_regmove_cost,\n-  &generic_vector_cost,\n+  &a64fx_extra_costs,\n+  &a64fx_addrcost_table,\n+  &a64fx_regmove_cost,\n+  &a64fx_vector_cost,\n   &generic_branch_cost,\n   &generic_approx_modes,\n   SVE_512, /* sve_width  */"}]}