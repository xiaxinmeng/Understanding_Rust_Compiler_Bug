{"sha": "f7a296659959fcfde5db65fa71da64123431d636", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjdhMjk2NjU5OTU5ZmNmZGU1ZGI2NWZhNzFkYTY0MTIzNDMxZDYzNg==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-01-17T21:47:59Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-01-17T21:47:59Z"}, "message": "Initial revision\n\nFrom-SVN: r199", "tree": {"sha": "2f7704d477fe776af9377d4d45ac21bdfa29cb8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2f7704d477fe776af9377d4d45ac21bdfa29cb8e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f7a296659959fcfde5db65fa71da64123431d636", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7a296659959fcfde5db65fa71da64123431d636", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7a296659959fcfde5db65fa71da64123431d636", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7a296659959fcfde5db65fa71da64123431d636/comments", "author": null, "committer": null, "parents": [{"sha": "b9c1bf3c60b4f36795fead18df6f38dabc68c7a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9c1bf3c60b4f36795fead18df6f38dabc68c7a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9c1bf3c60b4f36795fead18df6f38dabc68c7a7"}], "stats": {"total": 312, "additions": 312, "deletions": 0}, "files": [{"sha": "c1a04f0209e325c06c9aeb08c7807d6b38f7cb2f", "filename": "gcc/flags.h", "status": "added", "additions": 312, "deletions": 0, "changes": 312, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7a296659959fcfde5db65fa71da64123431d636/gcc%2Fflags.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7a296659959fcfde5db65fa71da64123431d636/gcc%2Fflags.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflags.h?ref=f7a296659959fcfde5db65fa71da64123431d636", "patch": "@@ -0,0 +1,312 @@\n+/* Compilation switch flag definitions for GNU CC.\n+   Copyright (C) 1987, 1988 Free Software Foundation, Inc.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n+\n+/* Name of the input .c file being compiled.  */\n+extern char *main_input_filename;\n+\n+enum debug_info_type\n+{\n+  NO_DEBUG,\t    /* Write no debug info.  */\n+  DBX_DEBUG,\t    /* Write BSD .stabs for DBX (using dbxout.c).  */\n+  SDB_DEBUG,\t    /* Write COFF for (old) SDB (using sdbout.c).  */\n+  DWARF_DEBUG\t    /* Write Dwarf debug info (using dwarfout.c).  */\n+};\n+\n+/* Specify which kind of debugging info to generate.  */\n+extern enum debug_info_type write_symbols;\n+\n+enum debug_info_level\n+{\n+  DINFO_LEVEL_NONE,\t/* Write no debugging info.  */\n+  DINFO_LEVEL_TERSE,\t/* Write minimal info to support tracebacks only.  */\n+  DINFO_LEVEL_NORMAL,\t/* Write info for all declarations (and line table). */\n+  DINFO_LEVEL_VERBOSE\t/* Write normal info plus #define/#undef info.  */\n+};\n+\n+/* Specify how much debugging info to generate.  */\n+extern enum debug_info_level debug_info_level;\n+\n+#ifdef DBX_DEBUGGING_INFO\n+/* Nonzero means use GDB-only extensions of DBX format.  */\n+extern int use_gdb_dbx_extensions;\n+#endif\n+\n+/* Nonzero means do optimizations.  -opt.  */\n+\n+extern int optimize;\n+\n+/* Nonzero means do stupid register allocation.  -noreg.\n+   Currently, this is 1 if `optimize' is 0.  */\n+\n+extern int obey_regdecls;\n+\n+/* Don't print functions as they are compiled and don't print\n+   times taken by the various passes.  -quiet.  */\n+\n+extern int quiet_flag;\n+\n+/* Don't print warning messages.  -w.  */\n+\n+extern int inhibit_warnings;\n+\n+/* Do print extra warnings (such as for uninitialized variables).  -W.  */\n+\n+extern int extra_warnings;\n+\n+/* Nonzero to warn about unused local variables.  */\n+\n+extern int warn_unused;\n+\n+/* Nonzero to warn about variables used before they are initialized.  */\n+\n+extern int warn_uninitialized;\n+\n+/* Nonzero means warn about all declarations which shadow others.   */\n+\n+extern int warn_shadow;\n+\n+/* Warn if a switch on an enum fails to have a case for every enum value.  */\n+\n+extern int warn_switch;\n+\n+/* Nonzero means warn about function definitions that default the return type\n+   or that use a null return and have a return-type other than void.  */\n+\n+extern int warn_return_type;\n+\n+/* Nonzero means warn about pointer casts that increase the required\n+   alignment of the target type (and might therefore lead to a crash\n+   due to a misaligned access).  */\n+\n+extern int warn_cast_align;\n+\n+/* Nonzero means warn about any identifiers that match in the first N\n+   characters.  The value N is in `id_clash_len'.  */\n+\n+extern int warn_id_clash;\n+extern int id_clash_len;\n+\n+/* Warn if a function returns an aggregate,\n+   since there are often incompatible calling conventions for doing this.  */\n+\n+extern int warn_aggregate_return;\n+\n+/* Nonzero if generating code to do profiling.  */\n+\n+extern int profile_flag;\n+\n+/* Nonzero if generating code to do profiling on the basis of basic blocks.  */\n+\n+extern int profile_block_flag;\n+\n+/* Nonzero for -pedantic switch: warn about anything\n+   that standard C forbids.  */\n+\n+extern int pedantic;\n+\n+/* Temporarily suppress certain warnings.\n+   This is set while reading code from a system header file.  */\n+\n+extern int in_system_header;\n+\n+/* Nonzero for -dp: annotate the assembly with a comment describing the\n+   pattern and alternative used.  */\n+\n+extern int flag_print_asm_name;\n+\f\n+/* Now the symbols that are set with `-f' switches.  */\n+\n+/* Nonzero means `char' should be signed.  */\n+\n+extern int flag_signed_char;\n+\n+/* Nonzero means give an enum type only as many bytes as it needs.  */\n+\n+extern int flag_short_enums;\n+\n+/* Nonzero for -fcaller-saves: allocate values in regs that need to\n+   be saved across function calls, if that produces overall better code.\n+   Optional now, so people can test it.  */\n+\n+extern int flag_caller_saves;\n+\n+/* Nonzero for -fpcc-struct-return: return values the same way PCC does.  */\n+\n+extern int flag_pcc_struct_return;\n+\n+/* Nonzero for -fforce-mem: load memory value into a register\n+   before arithmetic on it.  This makes better cse but slower compilation.  */\n+\n+extern int flag_force_mem;\n+\n+/* Nonzero for -fforce-addr: load memory address into a register before\n+   reference to memory.  This makes better cse but slower compilation.  */\n+\n+extern int flag_force_addr;\n+\n+/* Nonzero for -fdefer-pop: don't pop args after each function call;\n+   instead save them up to pop many calls' args with one insns.  */\n+\n+extern int flag_defer_pop;\n+\n+/* Nonzero for -ffloat-store: don't allocate floats and doubles\n+   in extended-precision registers.  */\n+\n+extern int flag_float_store;\n+\n+/* Nonzero enables strength-reduction in loop.c.  */\n+\n+extern int flag_strength_reduce;\n+\n+/* Nonzero enables loop unrolling in unroll.c.  Only loops for which the\n+   number of iterations can be calculated at compile-time (UNROLL_COMPLETELY,\n+   UNROLL_MODULO) or at run-time (preconditioned to be UNROLL_MODULO) are\n+   unrolled.  */\n+\n+extern int flag_unroll_loops;\n+\n+/* Nonzero enables loop unrolling in unroll.c.  All loops are unrolled.\n+   This is generally not a win.  */\n+\n+extern int flag_unroll_all_loops;\n+\n+/* Nonzero for -fcse-follow-jumps:\n+   have cse follow jumps to do a more extensive job.  */\n+\n+extern int flag_cse_follow_jumps;\n+\n+/* Nonzero for -fexpensive-optimizations:\n+   perform miscellaneous relatively-expensive optimizations.  */\n+extern int flag_expensive_optimizations;\n+\n+/* Nonzero for -fwritable-strings:\n+   store string constants in data segment and don't uniquize them.  */\n+\n+extern int flag_writable_strings;\n+\n+/* Nonzero means don't put addresses of constant functions in registers.\n+   Used for compiling the Unix kernel, where strange substitutions are\n+   done on the assembly output.  */\n+\n+extern int flag_no_function_cse;\n+\n+/* Nonzero for -fomit-frame-pointer:\n+   don't make a frame pointer in simple functions that don't require one.  */\n+\n+extern int flag_omit_frame_pointer;\n+\n+/* Nonzero to inhibit use of define_optimization peephole opts.  */\n+\n+extern int flag_no_peephole;\n+\n+/* Nonzero means all references through pointers are volatile.  */\n+\n+extern int flag_volatile;\n+\n+/* Nonzero means make functions that look like good inline candidates\n+   go inline.  */\n+\n+extern int flag_inline_functions;\n+\n+/* Nonzero for -fkeep-inline-functions: even if we make a function\n+   go inline everywhere, keep its defintion around for debugging\n+   purposes.  */\n+\n+extern int flag_keep_inline_functions;\n+\n+/* Nonzero means that functions declared `inline' will be treated\n+   as `static'.  Prevents generation of zillions of copies of unused\n+   static inline functions; instead, `inlines' are written out\n+   only when actually used.  Used in conjunction with -g.  Also\n+   does the right thing with #pragma interface.  */\n+\n+extern int flag_no_inline;\n+\n+/* Nonzero if we are only using compiler to check syntax errors.  */\n+\n+extern int flag_syntax_only;\n+\n+/* Nonzero means we should save auxilliary info into a .X file.  */\n+\n+extern int flag_gen_aux_info;\n+\n+/* Nonzero means make the text shared if supported.  */\n+\n+extern int flag_shared_data;\n+\n+/* flag_schedule_insns means schedule insns within basic blocks (before\n+   local_alloc).\n+   flag_schedule_insns_after_reload means schedule insns after\n+   global_alloc.  */\n+\n+extern int flag_schedule_insns;\n+extern int flag_schedule_insns_after_reload;\n+\n+/* Nonzero means put things in delayed-branch slots if supported. */\n+\n+extern int flag_delayed_branch;\n+\n+/* Nonzero means pretend it is OK to examine bits of target floats,\n+   even if that isn't true.  The resulting code will have incorrect constants,\n+   but the same series of instructions that the native compiler would make.  */\n+\n+extern int flag_pretend_float;\n+\n+/* Nonzero means change certain warnings into errors.\n+   Usually these are warnings about failure to conform to some standard.  */\n+\n+extern int flag_pedantic_errors;\n+\n+/* Nonzero means generate position-independent code.\n+   This is not fully implemented yet.  */\n+\n+extern int flag_pic;\n+\n+/* Nonzero means place uninitialized global data in the bss section.  */\n+\n+extern int flag_no_common;\n+\n+/* -finhibit-size-directive inhibits output of .size for ELF.\n+   This is used only for compiling crtstuff.c,\n+   and it may be extended to other effects\n+   needed for crtstuff.c on other systems.  */\n+extern int flag_inhibit_size_directive;\n+\n+/* -fgnu-linker specifies use of the GNU linker for initializations.\n+   -fno-gnu-linker says that collect will be used.  */\n+extern int flag_gnu_linker;\n+\f\n+/* Other basic status info about current function.  */\n+\n+/* Nonzero means current function must be given a frame pointer.\n+   Set in stmt.c if anything is allocated on the stack there.\n+   Set in reload1.c if anything is allocated on the stack there.  */\n+\n+extern int frame_pointer_needed;\n+\n+/* Set nonzero if jump_optimize finds that control falls through\n+   at the end of the function.  */\n+\n+extern int can_reach_end;\n+\n+/* Nonzero if function being compiled receives nonlocal gotos\n+   from nested functions.  */\n+\n+extern int current_function_has_nonlocal_label;\n+"}]}