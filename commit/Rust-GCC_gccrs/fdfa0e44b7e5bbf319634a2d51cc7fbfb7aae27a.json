{"sha": "fdfa0e44b7e5bbf319634a2d51cc7fbfb7aae27a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmRmYTBlNDRiN2U1YmJmMzE5NjM0YTJkNTFjYzdmYmZiN2FhZTI3YQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2019-09-23T07:45:58Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2019-09-23T07:45:58Z"}, "message": "decl.c (components_to_record): Do not reorder fields in packed record types if...\n\n\t* gcc-interface/decl.c (components_to_record): Do not reorder fields\n\tin packed record types if they contain fixed-size fields that cannot\n\tbe laid out in a packed manner.\n\nFrom-SVN: r276036", "tree": {"sha": "09718d8d17bacef6c534f67341a5791dbaf4862d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/09718d8d17bacef6c534f67341a5791dbaf4862d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fdfa0e44b7e5bbf319634a2d51cc7fbfb7aae27a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdfa0e44b7e5bbf319634a2d51cc7fbfb7aae27a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fdfa0e44b7e5bbf319634a2d51cc7fbfb7aae27a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdfa0e44b7e5bbf319634a2d51cc7fbfb7aae27a/comments", "author": null, "committer": null, "parents": [{"sha": "2d814ac2f7b4200c2f47c562bb3b0cfc7b4f2325", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d814ac2f7b4200c2f47c562bb3b0cfc7b4f2325", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d814ac2f7b4200c2f47c562bb3b0cfc7b4f2325"}], "stats": {"total": 21, "additions": 17, "deletions": 4}, "files": [{"sha": "79e63267cc1bf0a115f74603f1e64753861b25c0", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdfa0e44b7e5bbf319634a2d51cc7fbfb7aae27a/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdfa0e44b7e5bbf319634a2d51cc7fbfb7aae27a/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=fdfa0e44b7e5bbf319634a2d51cc7fbfb7aae27a", "patch": "@@ -1,3 +1,9 @@\n+2019-09-23  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/decl.c (components_to_record): Do not reorder fields\n+\tin packed record types if they contain fixed-size fields that cannot\n+\tbe laid out in a packed manner.\n+\n 2019-09-19  Tom Tromey  <tromey@adacore.com>\n \n \t* gcc-interface/misc.c (gnat_get_type_bias): Return the bias"}, {"sha": "67b938ee7eef0a5433c2e48a353421b074630b18", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdfa0e44b7e5bbf319634a2d51cc7fbfb7aae27a/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdfa0e44b7e5bbf319634a2d51cc7fbfb7aae27a/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=fdfa0e44b7e5bbf319634a2d51cc7fbfb7aae27a", "patch": "@@ -7521,6 +7521,7 @@ components_to_record (Node_Id gnat_component_list, Entity_Id gnat_record_type,\n   bool all_rep_and_size = all_rep && TYPE_SIZE (gnu_record_type);\n   bool variants_have_rep = all_rep;\n   bool layout_with_rep = false;\n+  bool has_non_packed_fixed_size_field = false;\n   bool has_self_field = false;\n   bool has_aliased_after_self_field = false;\n   Entity_Id gnat_component_decl, gnat_variant_part;\n@@ -7577,6 +7578,10 @@ components_to_record (Node_Id gnat_component_list, Entity_Id gnat_record_type,\n \t\t  has_self_field = true;\n \t\telse if (has_self_field && DECL_ALIASED_P (gnu_field))\n \t\t  has_aliased_after_self_field = true;\n+\t\telse if (!DECL_FIELD_OFFSET (gnu_field)\n+\t\t\t && !DECL_PACKED (gnu_field)\n+\t\t\t && !field_has_variable_size (gnu_field))\n+\t\t  has_non_packed_fixed_size_field = true;\n \t      }\n \t  }\n \n@@ -7868,8 +7873,9 @@ components_to_record (Node_Id gnat_component_list, Entity_Id gnat_record_type,\n      self-referential/variable offset or misaligned.  Note, in the latter\n      case, that this can only happen in packed record types so the alignment\n      is effectively capped to the byte for the whole record.  But we don't\n-     do it for non-packed record types if pragma Optimize_Alignment (Space)\n-     is specified because this can prevent alignment gaps from being filled.\n+     do it for packed record types if not all fixed-size fiels can be packed\n+     and for non-packed record types if pragma Optimize_Alignment (Space) is\n+     specified, because this can prevent alignment gaps from being filled.\n \n      Optionally, if the layout warning is enabled, keep track of the above 4\n      different kinds of fields and issue a warning if some of them would be\n@@ -7880,8 +7886,9 @@ components_to_record (Node_Id gnat_component_list, Entity_Id gnat_record_type,\n   const bool do_reorder\n     = (Convention (gnat_record_type) == Convention_Ada\n        && !No_Reordering (gnat_record_type)\n-       && (!Optimize_Alignment_Space (gnat_record_type)\n-\t   || Is_Packed (gnat_record_type))\n+       && !(Is_Packed (gnat_record_type)\n+\t    ? has_non_packed_fixed_size_field\n+\t    : Optimize_Alignment_Space (gnat_record_type))\n        && !debug__debug_flag_dot_r);\n   const bool w_reorder\n     = (Convention (gnat_record_type) == Convention_Ada"}]}