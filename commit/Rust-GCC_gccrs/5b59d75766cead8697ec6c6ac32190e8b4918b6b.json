{"sha": "5b59d75766cead8697ec6c6ac32190e8b4918b6b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWI1OWQ3NTc2NmNlYWQ4Njk3ZWM2YzZhYzMyMTkwZThiNDkxOGI2Yg==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-05-20T13:01:37Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-05-20T13:01:37Z"}, "message": "(F_check): Check NO_LONG_DOUBLE_IO.\n\nFrom-SVN: r4518", "tree": {"sha": "02f93f69ed19cbccb2102f746c24a93291178970", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/02f93f69ed19cbccb2102f746c24a93291178970"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5b59d75766cead8697ec6c6ac32190e8b4918b6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b59d75766cead8697ec6c6ac32190e8b4918b6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b59d75766cead8697ec6c6ac32190e8b4918b6b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b59d75766cead8697ec6c6ac32190e8b4918b6b/comments", "author": null, "committer": null, "parents": [{"sha": "99977c6183dddfda94f56de3d32316105bc1e152", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99977c6183dddfda94f56de3d32316105bc1e152", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99977c6183dddfda94f56de3d32316105bc1e152"}], "stats": {"total": 11, "additions": 10, "deletions": 1}, "files": [{"sha": "ff9f5b63ea924deece90ec4c30f456b2f796413a", "filename": "gcc/enquire.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b59d75766cead8697ec6c6ac32190e8b4918b6b/gcc%2Fenquire.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b59d75766cead8697ec6c6ac32190e8b4918b6b/gcc%2Fenquire.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fenquire.c?ref=5b59d75766cead8697ec6c6ac32190e8b4918b6b", "patch": "@@ -26,6 +26,8 @@\n    (fake_f_rep): Clear all of u, initially.  Make the ints in u unsigned.\n    (f_define): Use ordinary constants for long double\n    if it's same width as double.  Make __convert_long_double_i unsigned.\n+   Richard Stallman, May 93:\n+   In F_check, check NO_LONG_DOUBLE_IO.\n \n    COMPILING\n    With luck and a following wind, just the following will work:\n@@ -2146,13 +2148,19 @@ Procedure F_check(precision, val1) int precision; Long_double val1; {\n \t   that sscanf read the number back identically. Harsh yes, but\n \t   sometimes you've got to be cruel to be kind.\n \t*/\n-\tLong_double new1;\n \tNumber val, new, diff;\n \tdouble rem;\n \tint e;\n \tchar *rep;\n \tchar *f2;\n \n+#ifdef NO_LONG_DOUBLE_IO\n+\tdouble new1;\n+\t/* On the Sun 3, sscanf clobbers 4 words,\n+\t   which leads to a crash when this function tries to return.  */\n+\tf2= \"%le\";   /* Input */\n+#else\n+\tLong_double new1;\n \tif (sizeof(double) == sizeof(Long_double)) {\n \t\t/* Assume they're the same, and use non-stdc format */\n \t\t/* This is for stdc compilers using non-stdc libraries */\n@@ -2161,6 +2169,7 @@ Procedure F_check(precision, val1) int precision; Long_double val1; {\n \t\t/* It had better support Le then */\n \t\tf2= \"%Le\";\n \t}\n+#endif\n \tval= val1;\n \trep= f_rep(precision, (Long_double) val);\n \tif (setjmp(lab)==0) {"}]}