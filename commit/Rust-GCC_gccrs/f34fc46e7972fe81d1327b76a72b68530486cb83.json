{"sha": "f34fc46e7972fe81d1327b76a72b68530486cb83", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjM0ZmM0NmU3OTcyZmU4MWQxMzI3Yjc2YTcyYjY4NTMwNDg2Y2I4Mw==", "commit": {"author": {"name": "David Edelsohn", "email": "edelsohn@gnu.org", "date": "2002-08-27T14:55:42Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2002-08-27T14:55:42Z"}, "message": "longlong.h: Import current PowerPC defintion from GMP-4.1.\n\n        * longlong.h: Import current PowerPC defintion from GMP-4.1.\n\n        * config/rs6000/rs6000.h (MIN_UNITS_PER_WORD): Add IN_LIBGCC2 case.\n\n        * config/rs6000/linux64.h (ADJUST_FIELD_ALIGN): Undef before define.\n\nFrom-SVN: r56600", "tree": {"sha": "c8b19cc73f0323048195f8ae5f465666358da86b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c8b19cc73f0323048195f8ae5f465666358da86b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f34fc46e7972fe81d1327b76a72b68530486cb83", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f34fc46e7972fe81d1327b76a72b68530486cb83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f34fc46e7972fe81d1327b76a72b68530486cb83", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f34fc46e7972fe81d1327b76a72b68530486cb83/comments", "author": null, "committer": null, "parents": [{"sha": "dcb44500e4e6b0369fba8218b3fabc19c0041b3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcb44500e4e6b0369fba8218b3fabc19c0041b3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dcb44500e4e6b0369fba8218b3fabc19c0041b3c"}], "stats": {"total": 181, "additions": 101, "deletions": 80}, "files": [{"sha": "721a6ec0b97daffd3ff6418d35ceafbbcb1a8ab2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f34fc46e7972fe81d1327b76a72b68530486cb83/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f34fc46e7972fe81d1327b76a72b68530486cb83/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f34fc46e7972fe81d1327b76a72b68530486cb83", "patch": "@@ -1,3 +1,11 @@\n+2002-08-27  David Edelsohn  <edelsohn@gnu.org>\n+\n+\t* longlong.h: Import current PowerPC defintion from GMP-4.1.\n+\n+\t* config/rs6000/rs6000.h (MIN_UNITS_PER_WORD): Add IN_LIBGCC2 case.\n+\n+\t* config/rs6000/linux64.h (ADJUST_FIELD_ALIGN): Undef before define.\n+\n Tue Aug 27 13:53:57 2002  J\"orn Rennecke <joern.rennecke@superh.com>\n \n \t* sh.h (MAX_FIXED_MODE_SIZE): Define."}, {"sha": "ee469319c7a26fa8b4c239a7431d838f00551476", "filename": "gcc/config/rs6000/linux64.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f34fc46e7972fe81d1327b76a72b68530486cb83/gcc%2Fconfig%2Frs6000%2Flinux64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f34fc46e7972fe81d1327b76a72b68530486cb83/gcc%2Fconfig%2Frs6000%2Flinux64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Flinux64.h?ref=f34fc46e7972fe81d1327b76a72b68530486cb83", "patch": "@@ -73,6 +73,7 @@ Boston, MA 02111-1307, USA.  */\n #define USER_LABEL_PREFIX  \"\"\n \n /* AIX word-aligns FP doubles but doubleword-aligns 64-bit ints.  */\n+#undef  ADJUST_FIELD_ALIGN\n #define ADJUST_FIELD_ALIGN(FIELD, COMPUTED) \\\n   (TYPE_MODE (TREE_CODE (TREE_TYPE (FIELD)) == ARRAY_TYPE \\\n \t      ? get_inner_array_type (FIELD) \\"}, {"sha": "f91afcde66a80972061f6910052f9ee21859c415", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f34fc46e7972fe81d1327b76a72b68530486cb83/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f34fc46e7972fe81d1327b76a72b68530486cb83/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=f34fc46e7972fe81d1327b76a72b68530486cb83", "patch": "@@ -522,7 +522,11 @@ extern int rs6000_default_long_calls;\n \n /* Width of a word, in units (bytes).  */\n #define UNITS_PER_WORD (! TARGET_POWERPC64 ? 4 : 8)\n+#ifdef IN_LIBGCC2\n+#define MIN_UNITS_PER_WORD UNITS_PER_WORD\n+#else\n #define MIN_UNITS_PER_WORD 4\n+#endif\n #define UNITS_PER_FP_WORD 8\n #define UNITS_PER_ALTIVEC_WORD 16\n #define UNITS_PER_SPE_WORD 8"}, {"sha": "a593150ec318a277a6a84f263d2c81f864fe2b80", "filename": "gcc/longlong.h", "status": "modified", "additions": 88, "deletions": 80, "changes": 168, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f34fc46e7972fe81d1327b76a72b68530486cb83/gcc%2Flonglong.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f34fc46e7972fe81d1327b76a72b68530486cb83/gcc%2Flonglong.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flonglong.h?ref=f34fc46e7972fe81d1327b76a72b68530486cb83", "patch": "@@ -621,127 +621,135 @@ UDItype __umulsidi3 (USItype, USItype);\n   } while (0)\n #endif /* __ns32000__ */\n \n-#if (defined (_ARCH_PPC) || defined (_IBMR2))\n-#if W_TYPE_SIZE == 32\n+/* FIXME: We should test _IBMR2 here when we add assembly support for the\n+   system vendor compilers.\n+   FIXME: What's needed for gcc PowerPC VxWorks?  __vxworks__ is not good\n+   enough, since that hits ARM and m68k too.  */\n+#if (defined (_ARCH_PPC)\t/* AIX */\t\t\t\t\\\n+     || defined (_ARCH_PWR)\t/* AIX */\t\t\t\t\\\n+     || defined (_ARCH_COM)\t/* AIX */\t\t\t\t\\\n+     || defined (__powerpc__)\t/* gcc */\t\t\t\t\\\n+     || defined (__POWERPC__)\t/* BEOS */\t\t\t\t\\\n+     || defined (__ppc__)\t/* Darwin */\t\t\t\t\\\n+     || defined (PPC)\t\t/* GNU/Linux, SysV */\t\t\t\\\n+     ) && W_TYPE_SIZE == 32\n #define add_ssaaaa(sh, sl, ah, al, bh, bl) \\\n   do {\t\t\t\t\t\t\t\t\t\\\n     if (__builtin_constant_p (bh) && (bh) == 0)\t\t\t\t\\\n       __asm__ (\"{a%I4|add%I4c} %1,%3,%4\\n\\t{aze|addze} %0,%2\"\t\t\\\n-\t     : \"=r\" ((USItype) (sh)),\t\t\t\t\t\\\n-\t       \"=&r\" ((USItype) (sl))\t\t\t\t\t\\\n-\t     : \"%r\" ((USItype) (ah)),\t\t\t\t\t\\\n-\t       \"%r\" ((USItype) (al)),\t\t\t\t\t\\\n-\t       \"rI\" ((USItype) (bl)));\t\t\t\t\t\\\n-    else if (__builtin_constant_p (bh) && (bh) ==~(USItype) 0)\t\t\\\n+\t     : \"=r\" (sh), \"=&r\" (sl) : \"r\" (ah), \"%r\" (al), \"rI\" (bl));\\\n+    else if (__builtin_constant_p (bh) && (bh) == ~(USItype) 0)\t\t\\\n       __asm__ (\"{a%I4|add%I4c} %1,%3,%4\\n\\t{ame|addme} %0,%2\"\t\t\\\n-\t     : \"=r\" ((USItype) (sh)),\t\t\t\t\t\\\n-\t       \"=&r\" ((USItype) (sl))\t\t\t\t\t\\\n-\t     : \"%r\" ((USItype) (ah)),\t\t\t\t\t\\\n-\t       \"%r\" ((USItype) (al)),\t\t\t\t\t\\\n-\t       \"rI\" ((USItype) (bl)));\t\t\t\t\t\\\n+\t     : \"=r\" (sh), \"=&r\" (sl) : \"r\" (ah), \"%r\" (al), \"rI\" (bl));\\\n     else\t\t\t\t\t\t\t\t\\\n       __asm__ (\"{a%I5|add%I5c} %1,%4,%5\\n\\t{ae|adde} %0,%2,%3\"\t\t\\\n-\t     : \"=r\" ((USItype) (sh)),\t\t\t\t\t\\\n-\t       \"=&r\" ((USItype) (sl))\t\t\t\t\t\\\n-\t     : \"%r\" ((USItype) (ah)),\t\t\t\t\t\\\n-\t       \"r\" ((USItype) (bh)),\t\t\t\t\t\\\n-\t       \"%r\" ((USItype) (al)),\t\t\t\t\t\\\n-\t       \"rI\" ((USItype) (bl)));\t\t\t\t\t\\\n+\t     : \"=r\" (sh), \"=&r\" (sl)\t\t\t\t\t\\\n+\t     : \"%r\" (ah), \"r\" (bh), \"%r\" (al), \"rI\" (bl));\t\t\\\n   } while (0)\n #define sub_ddmmss(sh, sl, ah, al, bh, bl) \\\n   do {\t\t\t\t\t\t\t\t\t\\\n     if (__builtin_constant_p (ah) && (ah) == 0)\t\t\t\t\\\n       __asm__ (\"{sf%I3|subf%I3c} %1,%4,%3\\n\\t{sfze|subfze} %0,%2\"\t\\\n-\t       : \"=r\" ((USItype) (sh)),\t\t\t\t\t\\\n-\t\t \"=&r\" ((USItype) (sl))\t\t\t\t\t\\\n-\t       : \"r\" ((USItype) (bh)),\t\t\t\t\t\\\n-\t\t \"rI\" ((USItype) (al)),\t\t\t\t\t\\\n-\t\t \"r\" ((USItype) (bl)));\t\t\t\t\t\\\n-    else if (__builtin_constant_p (ah) && (ah) ==~(USItype) 0)\t\t\\\n+\t       : \"=r\" (sh), \"=&r\" (sl) : \"r\" (bh), \"rI\" (al), \"r\" (bl));\\\n+    else if (__builtin_constant_p (ah) && (ah) == ~(USItype) 0)\t\t\\\n       __asm__ (\"{sf%I3|subf%I3c} %1,%4,%3\\n\\t{sfme|subfme} %0,%2\"\t\\\n-\t       : \"=r\" ((USItype) (sh)),\t\t\t\t\t\\\n-\t\t \"=&r\" ((USItype) (sl))\t\t\t\t\t\\\n-\t       : \"r\" ((USItype) (bh)),\t\t\t\t\t\\\n-\t\t \"rI\" ((USItype) (al)),\t\t\t\t\t\\\n-\t\t \"r\" ((USItype) (bl)));\t\t\t\t\t\\\n+\t       : \"=r\" (sh), \"=&r\" (sl) : \"r\" (bh), \"rI\" (al), \"r\" (bl));\\\n     else if (__builtin_constant_p (bh) && (bh) == 0)\t\t\t\\\n       __asm__ (\"{sf%I3|subf%I3c} %1,%4,%3\\n\\t{ame|addme} %0,%2\"\t\t\\\n-\t       : \"=r\" ((USItype) (sh)),\t\t\t\t\t\\\n-\t\t \"=&r\" ((USItype) (sl))\t\t\t\t\t\\\n-\t       : \"r\" ((USItype) (ah)),\t\t\t\t\t\\\n-\t\t \"rI\" ((USItype) (al)),\t\t\t\t\t\\\n-\t\t \"r\" ((USItype) (bl)));\t\t\t\t\t\\\n-    else if (__builtin_constant_p (bh) && (bh) ==~(USItype) 0)\t\t\\\n+\t       : \"=r\" (sh), \"=&r\" (sl) : \"r\" (ah), \"rI\" (al), \"r\" (bl));\\\n+    else if (__builtin_constant_p (bh) && (bh) == ~(USItype) 0)\t\t\\\n       __asm__ (\"{sf%I3|subf%I3c} %1,%4,%3\\n\\t{aze|addze} %0,%2\"\t\t\\\n-\t       : \"=r\" ((USItype) (sh)),\t\t\t\t\t\\\n-\t\t \"=&r\" ((USItype) (sl))\t\t\t\t\t\\\n-\t       : \"r\" ((USItype) (ah)),\t\t\t\t\t\\\n-\t\t \"rI\" ((USItype) (al)),\t\t\t\t\t\\\n-\t\t \"r\" ((USItype) (bl)));\t\t\t\t\t\\\n+\t       : \"=r\" (sh), \"=&r\" (sl) : \"r\" (ah), \"rI\" (al), \"r\" (bl));\\\n     else\t\t\t\t\t\t\t\t\\\n       __asm__ (\"{sf%I4|subf%I4c} %1,%5,%4\\n\\t{sfe|subfe} %0,%3,%2\"\t\\\n-\t       : \"=r\" ((USItype) (sh)),\t\t\t\t\t\\\n-\t\t \"=&r\" ((USItype) (sl))\t\t\t\t\t\\\n-\t       : \"r\" ((USItype) (ah)),\t\t\t\t\t\\\n-\t\t \"r\" ((USItype) (bh)),\t\t\t\t\t\\\n-\t\t \"rI\" ((USItype) (al)),\t\t\t\t\t\\\n-\t\t \"r\" ((USItype) (bl)));\t\t\t\t\t\\\n+\t       : \"=r\" (sh), \"=&r\" (sl)\t\t\t\t\t\\\n+\t       : \"r\" (ah), \"r\" (bh), \"rI\" (al), \"r\" (bl));\t\t\\\n   } while (0)\n-#endif /* W_TYPE_SIZE */\n #define count_leading_zeros(count, x) \\\n-  __asm__ (\"{cntlz|cntlzw} %0,%1\"\t\t\t\t\t\\\n-\t   : \"=r\" ((USItype) (count))\t\t\t\t\t\\\n-\t   : \"r\" ((USItype) (x)))\n+  __asm__ (\"{cntlz|cntlzw} %0,%1\" : \"=r\" (count) : \"r\" (x))\n #define COUNT_LEADING_ZEROS_0 32\n-#if defined (_ARCH_PPC)\n+#if defined (_ARCH_PPC) || defined (__powerpc__) || defined (__POWERPC__) \\\n+  || defined (__ppc__) || defined (PPC) || defined (__vxworks__)\n #define umul_ppmm(ph, pl, m0, m1) \\\n   do {\t\t\t\t\t\t\t\t\t\\\n     USItype __m0 = (m0), __m1 = (m1);\t\t\t\t\t\\\n-    __asm__ (\"mulhwu %0,%1,%2\"\t\t\t\t\t\t\\\n-\t     : \"=r\" ((USItype) ph)\t\t\t\t\t\\\n-\t     : \"%r\" (__m0),\t\t\t\t\t\t\\\n-\t       \"r\" (__m1));\t\t\t\t\t\t\\\n+    __asm__ (\"mulhwu %0,%1,%2\" : \"=r\" (ph) : \"%r\" (m0), \"r\" (m1));\t\\\n     (pl) = __m0 * __m1;\t\t\t\t\t\t\t\\\n   } while (0)\n #define UMUL_TIME 15\n #define smul_ppmm(ph, pl, m0, m1) \\\n   do {\t\t\t\t\t\t\t\t\t\\\n     SItype __m0 = (m0), __m1 = (m1);\t\t\t\t\t\\\n-    __asm__ (\"mulhw %0,%1,%2\"\t\t\t\t\t\t\\\n-\t     : \"=r\" ((SItype) ph)\t\t\t\t\t\\\n-\t     : \"%r\" (__m0),\t\t\t\t\t\t\\\n-\t       \"r\" (__m1));\t\t\t\t\t\t\\\n+    __asm__ (\"mulhw %0,%1,%2\" : \"=r\" (ph) : \"%r\" (m0), \"r\" (m1));\t\\\n     (pl) = __m0 * __m1;\t\t\t\t\t\t\t\\\n   } while (0)\n #define SMUL_TIME 14\n #define UDIV_TIME 120\n #elif defined (_ARCH_PWR)\n-#define umul_ppmm(xh, xl, m0, m1) \\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-    USItype __m0 = (m0), __m1 = (m1);\t\t\t\t\t\\\n-    __asm__ (\"mul %0,%2,%3\"\t\t\t\t\t\t\\\n-\t     : \"=r\" ((USItype) (xh)),\t\t\t\t\t\\\n-\t       \"=q\" ((USItype) (xl))\t\t\t\t\t\\\n-\t     : \"r\" (__m0),\t\t\t\t\t\t\\\n-\t       \"r\" (__m1));\t\t\t\t\t\t\\\n-    (xh) += ((((SItype) __m0 >> 31) & __m1)\t\t\t\t\\\n-\t     + (((SItype) __m1 >> 31) & __m0));\t\t\t\t\\\n-  } while (0)\n #define UMUL_TIME 8\n #define smul_ppmm(xh, xl, m0, m1) \\\n-  __asm__ (\"mul %0,%2,%3\"\t\t\t\t\t\t\\\n-\t   : \"=r\" ((SItype) (xh)),\t\t\t\t\t\\\n-\t     \"=q\" ((SItype) (xl))\t\t\t\t\t\\\n-\t   : \"r\" (m0),\t\t\t\t\t\t\t\\\n-\t     \"r\" (m1))\n+  __asm__ (\"mul %0,%2,%3\" : \"=r\" (xh), \"=q\" (xl) : \"r\" (m0), \"r\" (m1))\n #define SMUL_TIME 4\n #define sdiv_qrnnd(q, r, nh, nl, d) \\\n-  __asm__ (\"div %0,%2,%4\"\t\t\t\t\t\t\\\n-\t   : \"=r\" ((SItype) (q)), \"=q\" ((SItype) (r))\t\t\t\\\n-\t   : \"r\" ((SItype) (nh)), \"1\" ((SItype) (nl)), \"r\" ((SItype) (d)))\n+  __asm__ (\"div %0,%2,%4\" : \"=r\" (q), \"=q\" (r) : \"r\" (nh), \"1\" (nl), \"r\" (d))\n #define UDIV_TIME 100\n #endif\n-#endif /* Power architecture variants.  */\n+#endif /* 32-bit POWER architecture variants.  */\n+\n+/* We should test _IBMR2 here when we add assembly support for the system\n+   vendor compilers.  */\n+#if (defined (_ARCH_PPC64) || defined (__powerpc64__)) && W_TYPE_SIZE == 64\n+#define add_ssaaaa(sh, sl, ah, al, bh, bl) \\\n+  do {\t\t\t\t\t\t\t\t\t\\\n+    if (__builtin_constant_p (bh) && (bh) == 0)\t\t\t\t\\\n+      __asm__ (\"{a%I4|add%I4c} %1,%3,%4\\n\\t{aze|addze} %0,%2\"\t\t\\\n+\t     : \"=r\" (sh), \"=&r\" (sl) : \"r\" (ah), \"%r\" (al), \"rI\" (bl));\\\n+    else if (__builtin_constant_p (bh) && (bh) == ~(UDItype) 0)\t\t\\\n+      __asm__ (\"{a%I4|add%I4c} %1,%3,%4\\n\\t{ame|addme} %0,%2\"\t\t\\\n+\t     : \"=r\" (sh), \"=&r\" (sl) : \"r\" (ah), \"%r\" (al), \"rI\" (bl));\\\n+    else\t\t\t\t\t\t\t\t\\\n+      __asm__ (\"{a%I5|add%I5c} %1,%4,%5\\n\\t{ae|adde} %0,%2,%3\"\t\t\\\n+\t     : \"=r\" (sh), \"=&r\" (sl)\t\t\t\t\t\\\n+\t     : \"%r\" (ah), \"r\" (bh), \"%r\" (al), \"rI\" (bl));\t\t\\\n+  } while (0)\n+#define sub_ddmmss(sh, sl, ah, al, bh, bl) \\\n+  do {\t\t\t\t\t\t\t\t\t\\\n+    if (__builtin_constant_p (ah) && (ah) == 0)\t\t\t\t\\\n+      __asm__ (\"{sf%I3|subf%I3c} %1,%4,%3\\n\\t{sfze|subfze} %0,%2\"\t\\\n+\t       : \"=r\" (sh), \"=&r\" (sl) : \"r\" (bh), \"rI\" (al), \"r\" (bl));\\\n+    else if (__builtin_constant_p (ah) && (ah) == ~(UDItype) 0)\t\t\\\n+      __asm__ (\"{sf%I3|subf%I3c} %1,%4,%3\\n\\t{sfme|subfme} %0,%2\"\t\\\n+\t       : \"=r\" (sh), \"=&r\" (sl) : \"r\" (bh), \"rI\" (al), \"r\" (bl));\\\n+    else if (__builtin_constant_p (bh) && (bh) == 0)\t\t\t\\\n+      __asm__ (\"{sf%I3|subf%I3c} %1,%4,%3\\n\\t{ame|addme} %0,%2\"\t\t\\\n+\t       : \"=r\" (sh), \"=&r\" (sl) : \"r\" (ah), \"rI\" (al), \"r\" (bl));\\\n+    else if (__builtin_constant_p (bh) && (bh) == ~(UDItype) 0)\t\t\\\n+      __asm__ (\"{sf%I3|subf%I3c} %1,%4,%3\\n\\t{aze|addze} %0,%2\"\t\t\\\n+\t       : \"=r\" (sh), \"=&r\" (sl) : \"r\" (ah), \"rI\" (al), \"r\" (bl));\\\n+    else\t\t\t\t\t\t\t\t\\\n+      __asm__ (\"{sf%I4|subf%I4c} %1,%5,%4\\n\\t{sfe|subfe} %0,%3,%2\"\t\\\n+\t       : \"=r\" (sh), \"=&r\" (sl)\t\t\t\t\t\\\n+\t       : \"r\" (ah), \"r\" (bh), \"rI\" (al), \"r\" (bl));\t\t\\\n+  } while (0)\n+#define count_leading_zeros(count, x) \\\n+  __asm__ (\"cntlzd %0,%1\" : \"=r\" (count) : \"r\" (x))\n+#define COUNT_LEADING_ZEROS_0 64\n+#define umul_ppmm(ph, pl, m0, m1) \\\n+  do {\t\t\t\t\t\t\t\t\t\\\n+    UDItype __m0 = (m0), __m1 = (m1);\t\t\t\t\t\\\n+    __asm__ (\"mulhdu %0,%1,%2\" : \"=r\" (ph) : \"%r\" (m0), \"r\" (m1));\t\\\n+    (pl) = __m0 * __m1;\t\t\t\t\t\t\t\\\n+  } while (0)\n+#define UMUL_TIME 15\n+#define smul_ppmm(ph, pl, m0, m1) \\\n+  do {\t\t\t\t\t\t\t\t\t\\\n+    DItype __m0 = (m0), __m1 = (m1);\t\t\t\t\t\\\n+    __asm__ (\"mulhd %0,%1,%2\" : \"=r\" (ph) : \"%r\" (m0), \"r\" (m1));\t\\\n+    (pl) = __m0 * __m1;\t\t\t\t\t\t\t\\\n+  } while (0)\n+#define SMUL_TIME 14  /* ??? */\n+#define UDIV_TIME 120 /* ??? */\n+#endif /* 64-bit PowerPC.  */\n \n #if defined (__ibm032__) /* RT/ROMP */ && W_TYPE_SIZE == 32\n #define add_ssaaaa(sh, sl, ah, al, bh, bl) \\"}]}