{"sha": "ff5d142c9e5debaec4ebb8d1c61734bae42fd25e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmY1ZDE0MmM5ZTVkZWJhZWM0ZWJiOGQxYzYxNzM0YmFlNDJmZDI1ZQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2011-04-06T08:56:28Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-04-06T08:56:28Z"}, "message": "tree-inline.c (estimate_num_insns): For calls simply account for all passed arguments and a used return value.\n\n2011-04-06  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-inline.c (estimate_num_insns): For calls simply account\n\tfor all passed arguments and a used return value.\n\nFrom-SVN: r172024", "tree": {"sha": "78fc627717f18d03bd2f359321819749ba6cbc55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/78fc627717f18d03bd2f359321819749ba6cbc55"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ff5d142c9e5debaec4ebb8d1c61734bae42fd25e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff5d142c9e5debaec4ebb8d1c61734bae42fd25e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff5d142c9e5debaec4ebb8d1c61734bae42fd25e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff5d142c9e5debaec4ebb8d1c61734bae42fd25e/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d7d1d041aedeeb19cc16c718ec517aaeac81c10e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7d1d041aedeeb19cc16c718ec517aaeac81c10e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7d1d041aedeeb19cc16c718ec517aaeac81c10e"}], "stats": {"total": 57, "additions": 10, "deletions": 47}, "files": [{"sha": "24207ac591045ffb2ca334ad111c033e52a348b2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff5d142c9e5debaec4ebb8d1c61734bae42fd25e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff5d142c9e5debaec4ebb8d1c61734bae42fd25e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ff5d142c9e5debaec4ebb8d1c61734bae42fd25e", "patch": "@@ -1,3 +1,8 @@\n+2011-04-06  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-inline.c (estimate_num_insns): For calls simply account\n+\tfor all passed arguments and a used return value.\n+\n 2011-04-06  Richard Guenther  <rguenther@suse.de>\n  \n \tPR tree-optimization/47663"}, {"sha": "b4f9dcd07e4889e137b141fced282e83104d029c", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 5, "deletions": 47, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff5d142c9e5debaec4ebb8d1c61734bae42fd25e/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff5d142c9e5debaec4ebb8d1c61734bae42fd25e/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=ff5d142c9e5debaec4ebb8d1c61734bae42fd25e", "patch": "@@ -3470,12 +3470,6 @@ estimate_num_insns (gimple stmt, eni_weights *weights)\n     case GIMPLE_CALL:\n       {\n \ttree decl = gimple_call_fndecl (stmt);\n-\ttree addr = gimple_call_fn (stmt);\n-\ttree funtype = TREE_TYPE (addr);\n-\tbool stdarg = false;\n-\n-\tif (POINTER_TYPE_P (funtype))\n-\t  funtype = TREE_TYPE (funtype);\n \n \t/* Do not special case builtins where we see the body.\n \t   This just confuse inliner.  */\n@@ -3511,49 +3505,13 @@ estimate_num_insns (gimple stmt, eni_weights *weights)\n \t  }\n \n \tcost = weights->call_cost;\n-\tif (decl)\n-\t  funtype = TREE_TYPE (decl);\n-\n-\tif (!VOID_TYPE_P (TREE_TYPE (funtype))\n-\t    && gimple_call_lhs (stmt))\n-\t  cost += estimate_move_cost (TREE_TYPE (funtype));\n-\n-\tif (funtype)\n-\t  stdarg = stdarg_p (funtype);\n-\n-\t/* Our cost must be kept in sync with\n-\t   cgraph_estimate_size_after_inlining that does use function\n-\t   declaration to figure out the arguments.\n-\n-\t   For functions taking variable list of arguments we must\n-\t   look into call statement intself.  This is safe because\n-\t   we will get only higher costs and in most cases we will\n-\t   not inline these anyway.  */\n-\tif (decl && DECL_ARGUMENTS (decl) && !stdarg)\n-\t  {\n-\t    tree arg;\n-\t    for (arg = DECL_ARGUMENTS (decl); arg; arg = DECL_CHAIN (arg))\n-\t      if (!VOID_TYPE_P (TREE_TYPE (arg)))\n-\t        cost += estimate_move_cost (TREE_TYPE (arg));\n-\t  }\n-\telse if (funtype && prototype_p (funtype) && !stdarg)\n-\t  {\n-\t    tree t;\n-\t    for (t = TYPE_ARG_TYPES (funtype); t && t != void_list_node;\n-\t    \t t = TREE_CHAIN (t))\n-\t      if (!VOID_TYPE_P (TREE_VALUE (t)))\n-\t        cost += estimate_move_cost (TREE_VALUE (t));\n-\t  }\n-\telse\n+\tif (gimple_call_lhs (stmt))\n+\t  cost += estimate_move_cost (TREE_TYPE (gimple_call_lhs (stmt)));\n+\tfor (i = 0; i < gimple_call_num_args (stmt); i++)\n \t  {\n-\t    for (i = 0; i < gimple_call_num_args (stmt); i++)\n-\t      {\n-\t\ttree arg = gimple_call_arg (stmt, i);\n-\t        if (!VOID_TYPE_P (TREE_TYPE (arg)))\n-\t\t  cost += estimate_move_cost (TREE_TYPE (arg));\n-\t      }\n+\t    tree arg = gimple_call_arg (stmt, i);\n+\t    cost += estimate_move_cost (TREE_TYPE (arg));\n \t  }\n-\n \tbreak;\n       }\n "}]}