{"sha": "3376467ce090aa0966d59ca3aea35db4f17a4b47", "node_id": "C_kwDOANBUbNoAKDMzNzY0NjdjZTA5MGFhMDk2NmQ1OWNhM2FlYTM1ZGI0ZjE3YTRiNDc", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2023-01-26T10:55:28Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2023-01-26T13:38:22Z"}, "message": "libstdc++: Add returns_nonnull to non-inline std::map detail [PR108554]\n\nstd::map uses a non-inline function to rebalance its tree and the\ncompiler can't see that it always returns a valid pointer (assuming\nvalid inputs, which is a precondition anyway). This can result in\n-Wnull-derefernce warnings for valid code, because the compiler thinks\nthere is a path where the function returns null.\n\nAdding the returns_nonnull attribute tells the compiler that is can't\nhappen. While we're doing that, we might as well also add a nonnull\nattribute to the rebalancing functions too.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/108554\n\t* include/bits/stl_tree.h (_Rb_tree_insert_and_rebalance): Add\n\tnonnull attribute.\n\t(_Rb_tree_rebalance_for_erase): Add nonnull and returns_nonnull\n\tattributes.\n\t* testsuite/23_containers/map/modifiers/108554.cc: New test.", "tree": {"sha": "e1ef41d1f1965baf9e07254bf777027c6b357efd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e1ef41d1f1965baf9e07254bf777027c6b357efd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3376467ce090aa0966d59ca3aea35db4f17a4b47", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3376467ce090aa0966d59ca3aea35db4f17a4b47", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3376467ce090aa0966d59ca3aea35db4f17a4b47", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3376467ce090aa0966d59ca3aea35db4f17a4b47/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "93e2bf51dedd0870b78b770b72e34b15a7a0d14a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93e2bf51dedd0870b78b770b72e34b15a7a0d14a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93e2bf51dedd0870b78b770b72e34b15a7a0d14a"}], "stats": {"total": 21, "additions": 21, "deletions": 0}, "files": [{"sha": "3c331fbc952ad2ede04135a4b30cdecee5d278fb", "filename": "libstdc++-v3/include/bits/stl_tree.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3376467ce090aa0966d59ca3aea35db4f17a4b47/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3376467ce090aa0966d59ca3aea35db4f17a4b47/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h?ref=3376467ce090aa0966d59ca3aea35db4f17a4b47", "patch": "@@ -405,12 +405,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _Base_ptr _M_node;\n     };\n \n+  __attribute__((__nonnull__))\n   void\n   _Rb_tree_insert_and_rebalance(const bool __insert_left,\n \t\t\t\t_Rb_tree_node_base* __x,\n \t\t\t\t_Rb_tree_node_base* __p,\n \t\t\t\t_Rb_tree_node_base& __header) throw ();\n \n+  __attribute__((__nonnull__,__returns_nonnull__))\n   _Rb_tree_node_base*\n   _Rb_tree_rebalance_for_erase(_Rb_tree_node_base* const __z,\n \t\t\t       _Rb_tree_node_base& __header) throw ();"}, {"sha": "7076682f4c9a1bbbad23e6645a6c4656e991ff12", "filename": "libstdc++-v3/testsuite/23_containers/map/modifiers/108554.cc", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3376467ce090aa0966d59ca3aea35db4f17a4b47/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fmodifiers%2F108554.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3376467ce090aa0966d59ca3aea35db4f17a4b47/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fmodifiers%2F108554.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fmodifiers%2F108554.cc?ref=3376467ce090aa0966d59ca3aea35db4f17a4b47", "patch": "@@ -0,0 +1,19 @@\n+// { dg-do compile { target c++17 } }\n+// { dg-options \"-Wnull-dereference -O2\" }\n+\n+// PR libstdc++/108554\n+// Warning from -Wnull-dereference when extracting a unique_ptr from a map.\n+\n+#include <map>\n+#include <memory>\n+#include <string>\n+\n+int pop(std::map<std::string, std::unique_ptr<int>>& m)\n+{\n+  if (auto it = m.find(\"key\"); it != m.end())\n+  {\n+    auto item = std::move(m.extract(it).mapped());\n+    return *item;\n+  }\n+  return 0;\n+}"}]}