{"sha": "b4ead7d413a147a715af15c42cc0398a8963962c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjRlYWQ3ZDQxM2ExNDdhNzE1YWYxNWM0MmNjMDM5OGE4OTYzOTYyYw==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@redhat.co.uk", "date": "2000-12-03T19:00:00Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2000-12-03T19:00:00Z"}, "message": "Move the region scheduling code out of haifa-sched.c.\n\nFrom-SVN: r37977", "tree": {"sha": "2f5fb2d85150f98496e9e49fe961537d6164f134", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2f5fb2d85150f98496e9e49fe961537d6164f134"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b4ead7d413a147a715af15c42cc0398a8963962c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4ead7d413a147a715af15c42cc0398a8963962c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4ead7d413a147a715af15c42cc0398a8963962c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4ead7d413a147a715af15c42cc0398a8963962c/comments", "author": null, "committer": null, "parents": [{"sha": "f415f5a4ca6a427c5bb53cc1a25d1a29201133e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f415f5a4ca6a427c5bb53cc1a25d1a29201133e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f415f5a4ca6a427c5bb53cc1a25d1a29201133e7"}], "stats": {"total": 6965, "additions": 3524, "deletions": 3441}, "files": [{"sha": "0b8c03df442bafb5e8a95794abc740fd62503d04", "filename": "gcc/ChangeLog", "status": "modified", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4ead7d413a147a715af15c42cc0398a8963962c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4ead7d413a147a715af15c42cc0398a8963962c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b4ead7d413a147a715af15c42cc0398a8963962c", "patch": "@@ -1,3 +1,64 @@\n+2000-12-03  Bernd Schmidt  <bernds@redhat.co.uk>\n+\n+\t* Makefile.in (OBJS): Add sched-rgn.o.\n+\t(sched-rgn.o): New rule.  * haifa-sched.c (sched_verbose): No\n+\tlonger static.\n+\t(INSN_PRIORITY, INSN_COST, INSN_UNIT, INSN_REG_WEIGHT,\n+\tINSN_BLOCKAGE, UNIT_BITS, BLOCKAGE_MASK, ENCODE_BLOCKAGE,\n+\tUNIT_BLOCKED, BLOCKAGE_RANGE, MIN_BLOCKAGE_COST,\n+\tMAX_BLOCKAGE_COST): Move to sched-int.h.\n+\t(MAX_RGN_BLOCKS, MAX_RGN_INSNS, INSN_REF_COUNT, FED_BY_SPEC_LOAD,\n+\tIS_LOAD_INSN, struct haifa_edge, edge_table, NEXT_IN, NEXT_OUT,\n+\tFROM_BLOCK, TO_BLOCK, nr_edges, in_edges, out_edges, IN_EDGES,\n+\tOUT_EDGES, edgelst, struct region, nr_regions, rgn_table,\n+\trgn_bb_table, block_to_bb, containing_rgn, RGN_NR_BLOCKS,\n+\tRGN_BLOCKS, BLOCK_TO_BB, BB_TO_BLOCK, CONTAINING_RGN,\n+\tdebug_regions, find_single_block_region, find_rgns, too_large,\n+\tinit_regions, current_nr_blocks, current_blocks, bitset, bitlst,\n+\tbitlst_table_last, bitlst_table_size, bitlst_table, bitset_member,\n+\textract_bitlst, bblst, struct candidate, candidate_table,\n+\tbblst_table, bblst_size, bblst_last, IS_VALID, IS_SPECULATIVE,\n+\tSRC_PROB, target_bb, split_edges, compute_trg_info,\n+\tdebug_candidate, debug_candidates, bbset, bbset_size, dom,\n+\tIS_RGN_ENTRY, IS_DOMINATED, prob, GET_SRC_PROB, edgeset,\n+\trgn_nr_edges, rgn_edges, edgeset_size, edgeset_bitsize,\n+\tEDGE_TO_BIT, edge_to_bit, pot_split, ancestor_edges,\n+\tcompute_dom_prob_ps, ABS_VALUE, INSN_PROBABILITY,\n+\tIS_SPECULATIVE_INSN, INSN_BB, MIN_DIFF_PRIORITY, MIN_PROBABILITY,\n+\tMIN_PROB_DIFF, check_live_1, update_live_1, check_live,\n+\tupdate_live, set_spec_fed, is_pfree, find_conditional_protection,\n+\tis_conditionally_protected, may_trap_exp, haifa_classify_insn,\n+\tis_prisky, is_exception_free, add_branch_dependences,\n+\tpropagate_deps, compute_block_backward_dependences,\n+\tdebug_dependencies, is_cfg_nonregular, build_control_flow,\n+\tnew_edge, bb_deps, BITSET_UNION, BITSET_INTER, BITSET_DIFFER,\n+\tBITSET_INVERT, BITSET_ADD, BITSET_REMOVE, debug_regions,\n+\tUPDATE_LOOP_RELATIONS, INSN_TRAP_CLASS, WORST_CLASS, IS_REACHABLE,\n+\tCONST_BASED_ADDRESS_P, free_pending_lists, sched_target_n_insns,\n+\ttarget_n_insns, sched_n_insns, init_ready_list, deaths_in_region,\n+\tcan_schedule_ready_p, new_ready, schedule_more_p, rgn_print_insn,\n+\trgn_rank, region_sched_info): Move to sched-rgn.c.\n+\t(debug_reg_vector): Delete useless function.\n+\t(get_bb_head_tail): Likewise.\n+\t(insn_issue_delay, insn_cost, ready_add, get_block_head_tail,\n+\tno_real_insns_p, rm_line_notes, save_line_notes,\n+\trestore_line_notes, rm_redundant_line_notes, sched_init): No\n+\tlonger static.\n+\t(rm_line_notes, save_line_notes, restore_line_notes,\n+\tschedule_block, set_priorities): Change argument to be a real\n+\tbasic block, not one of haifa's \"bb\"s.  All callers changed\n+\t(rm_other_notes): Initialize note_list here, not in\n+\tschedule_region.\n+\t(sched_finish): New function, called from schedule_insn.  * *\n+\tsched-int.h (INSN_PRIORITY, INSN_COST, INSN_UNIT, INSN_REG_WEIGHT,\n+\tINSN_BLOCKAGE, UNIT_BITS, BLOCKAGE_MASK, ENCODE_BLOCKAGE,\n+\tUNIT_BLOCKED, BLOCKAGE_RANGE, MIN_BLOCKAGE_COST,\n+\tMAX_BLOCKAGE_COST): Moved here from haifa-sched.c.\n+\t(get_block_head_tail, no_real_insns_p, rm_line_notes,\n+\tsave_line_notes, restore_line_notes, rm_redundant_line_notes,\n+\trm_other_notes, insn_issue_delay, set_priorities, schedule_block,\n+\tsched_init, sched_finish, ready_add, insn_cost): Declare.\n+\n 2000-12-03  Laurynas Biveinis  <lauras@softhome.net>\n \t    Bruce Korb  <bkorb@gnu.org>\n "}, {"sha": "e421eac4b86225a3c75997d25920390cc93c9bbe", "filename": "gcc/Makefile.in", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4ead7d413a147a715af15c42cc0398a8963962c/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4ead7d413a147a715af15c42cc0398a8963962c/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=b4ead7d413a147a715af15c42cc0398a8963962c", "patch": "@@ -737,7 +737,7 @@ OBJS = diagnostic.o version.o tree.o print-tree.o stor-layout.o fold-const.o  \\\n  mbchar.o splay-tree.o graph.o sbitmap.o resource.o hash.o predict.o\t      \\\n  lists.o ggc-common.o $(GGC) stringpool.o simplify-rtx.o ssa.o bb-reorder.o   \\\n  sibcall.o conflict.o timevar.o ifcvt.o dominance.o dependence.o dce.o \\\n- sched-vis.o sched-deps.o hashtab.o\n+ sched-vis.o sched-deps.o sched-rgn.o hashtab.o\n \n BACKEND = toplev.o libbackend.a\n \n@@ -1458,6 +1458,9 @@ haifa-sched.o : haifa-sched.c $(CONFIG_H) system.h $(RTL_H) sched-int.h \\\n sched-deps.o : haifa-sched.c $(CONFIG_H) system.h $(RTL_H) sched-int.h \\\n    $(BASIC_BLOCK_H) $(REGS_H) hard-reg-set.h flags.h insn-config.h function.h \\\n    $(INSN_ATTR_H) toplev.h $(RECOG_H) except.h\n+sched-rgn.o : haifa-sched.c $(CONFIG_H) system.h $(RTL_H) sched-int.h \\\n+   $(BASIC_BLOCK_H) $(REGS_H) hard-reg-set.h flags.h insn-config.h function.h \\\n+   $(INSN_ATTR_H) toplev.h $(RECOG_H) except.h\n sched-vis.o : sched-vis.c $(CONFIG_H) system.h $(RTL_H) sched-int.h \\\n    $(INSN_ATTR_H) $(REGS_H)\n final.o : final.c $(CONFIG_H) system.h $(RTL_H) $(TREE_H) flags.h intl.h \\"}, {"sha": "2d8376ee27207e1086c41b7dd703175dec511951", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 299, "deletions": 3439, "changes": 3738, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4ead7d413a147a715af15c42cc0398a8963962c/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4ead7d413a147a715af15c42cc0398a8963962c/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=b4ead7d413a147a715af15c42cc0398a8963962c"}, {"sha": "4a15f1280688779e5aa3d5ab23dcc5c584cfa2af", "filename": "gcc/sched-int.h", "status": "modified", "additions": 44, "deletions": 1, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4ead7d413a147a715af15c42cc0398a8963962c/gcc%2Fsched-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4ead7d413a147a715af15c42cc0398a8963962c/gcc%2Fsched-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-int.h?ref=b4ead7d413a147a715af15c42cc0398a8963962c", "patch": "@@ -184,13 +184,35 @@ struct haifa_insn_data\n \n extern struct haifa_insn_data *h_i_d;\n \n-/* Accessor macros for h_i_d.  There are more in haifa-sched.c.  */\n+/* Accessor macros for h_i_d.  There are more in haifa-sched.c and\n+   sched-rgn.c.  */\n #define INSN_DEPEND(INSN)\t(h_i_d[INSN_UID (INSN)].depend)\n #define INSN_LUID(INSN)\t\t(h_i_d[INSN_UID (INSN)].luid)\n #define CANT_MOVE(insn)\t\t(h_i_d[INSN_UID (insn)].cant_move)\n #define INSN_DEP_COUNT(INSN)\t(h_i_d[INSN_UID (INSN)].dep_count)\n+#define INSN_PRIORITY(INSN)\t(h_i_d[INSN_UID (INSN)].priority)\n+#define INSN_COST(INSN)\t\t(h_i_d[INSN_UID (INSN)].cost)\n+#define INSN_UNIT(INSN)\t\t(h_i_d[INSN_UID (INSN)].units)\n+#define INSN_REG_WEIGHT(INSN)\t(h_i_d[INSN_UID (INSN)].reg_weight)\n+\n+#define INSN_BLOCKAGE(INSN)\t(h_i_d[INSN_UID (INSN)].blockage)\n+#define UNIT_BITS\t\t5\n+#define BLOCKAGE_MASK\t\t((1 << BLOCKAGE_BITS) - 1)\n+#define ENCODE_BLOCKAGE(U, R)\t\t\t\\\n+  (((U) << BLOCKAGE_BITS\t\t\t\\\n+    | MIN_BLOCKAGE_COST (R)) << BLOCKAGE_BITS\t\\\n+   | MAX_BLOCKAGE_COST (R))\n+#define UNIT_BLOCKED(B)\t\t((B) >> (2 * BLOCKAGE_BITS))\n+#define BLOCKAGE_RANGE(B)                                                \\\n+  (((((B) >> BLOCKAGE_BITS) & BLOCKAGE_MASK) << (HOST_BITS_PER_INT / 2)) \\\n+   | ((B) & BLOCKAGE_MASK))\n+\n+/* Encodings of the `<name>_unit_blockage_range' function.  */\n+#define MIN_BLOCKAGE_COST(R) ((R) >> (HOST_BITS_PER_INT / 2))\n+#define MAX_BLOCKAGE_COST(R) ((R) & ((1 << (HOST_BITS_PER_INT / 2)) - 1))\n \n extern FILE *sched_dump;\n+extern int sched_verbose;\n \n #ifndef __GNUC__\n #define __inline\n@@ -227,7 +249,28 @@ extern void init_dependency_caches PARAMS ((int));\n extern void free_dependency_caches PARAMS ((void));\n \n /* Functions in haifa-sched.c.  */\n+extern void get_block_head_tail PARAMS ((int, rtx *, rtx *));\n+extern int no_real_insns_p PARAMS ((rtx, rtx));\n+\n+extern void rm_line_notes PARAMS ((int));\n+extern void save_line_notes PARAMS ((int));\n+extern void restore_line_notes PARAMS ((int));\n+extern void rm_redundant_line_notes PARAMS ((void));\n+extern void rm_other_notes PARAMS ((rtx, rtx));\n+\n+extern int insn_issue_delay PARAMS ((rtx));\n+extern int set_priorities PARAMS ((int));\n+\n+extern void schedule_block PARAMS ((int, int));\n+extern void sched_init PARAMS ((FILE *));\n+extern void sched_finish PARAMS ((void));\n+\n+extern void ready_add PARAMS ((struct ready_list *, rtx));\n+\n+/* The following are exported for the benefit of debugging functions.  It\n+   would be nicer to keep them private to haifa-sched.c.  */\n extern int insn_unit PARAMS ((rtx));\n+extern int insn_cost PARAMS ((rtx, rtx, rtx));\n extern rtx get_unit_last_insn PARAMS ((int));\n extern int actual_hazard_this_instance PARAMS ((int, int, rtx, int, int));\n "}, {"sha": "76fb1989de55118bca2bab2c55f0cf51de6be180", "filename": "gcc/sched-rgn.c", "status": "added", "additions": 3116, "deletions": 0, "changes": 3116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4ead7d413a147a715af15c42cc0398a8963962c/gcc%2Fsched-rgn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4ead7d413a147a715af15c42cc0398a8963962c/gcc%2Fsched-rgn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-rgn.c?ref=b4ead7d413a147a715af15c42cc0398a8963962c"}]}