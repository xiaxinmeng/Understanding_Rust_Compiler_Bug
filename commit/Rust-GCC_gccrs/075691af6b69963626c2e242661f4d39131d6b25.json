{"sha": "075691af6b69963626c2e242661f4d39131d6b25", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDc1NjkxYWY2YjY5OTYzNjI2YzJlMjQyNjYxZjRkMzkxMzFkNmIyNQ==", "commit": {"author": {"name": "Alexander Ivchenko", "email": "alexander.ivchenko@intel.com", "date": "2013-12-31T12:13:49Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2013-12-31T12:13:49Z"}, "message": "avx512fintrin.h (_mm_add_round_sd): New.\n\ngcc/\n\t* config/i386/avx512fintrin.h (_mm_add_round_sd): New.\n\t(_mm_add_round_sd): Ditto.\n\t(_mm_add_round_ss): Ditto.\n\t(_mm_sub_round_sd): Ditto.\n\t(_mm_sub_round_ss): Ditto.\n\t(_mm_rcp14_sd): Ditto.\n\t(_mm_rcp14_ss): Ditto.\n\t(_mm_sqrt_round_sd): Ditto.\n\t(_mm_sqrt_round_ss): Ditto.\n\t(_mm_mul_round_sd): Ditto.\n\t(_mm_mul_round_ss): Ditto.\n\t(_mm_div_round_sd): Ditto.\n\t(_mm_div_round_ss): Ditto.\n\t(_mm_scalef_round_sd): Ditto.\n\t(_mm_scalef_round_ss): Ditto.\n\t(_mm_scalef_round_sd): Ditto.\n\t(_mm_scalef_round_ss): Ditto.\n\t(_mm_cvt_roundsd_ss): Ditto.\n\t(_mm_cvt_roundsd_sd): Ditto.\n\t(_mm_getexp_round_ss): Ditto.\n\t(_mm_getexp_round_sd): Ditto.\n\t(_mm_getmant_round_sd): Ditto.\n\t(_mm_getmant_round_ss): Ditto.\n\t(_mm_roundscale_round_ss): Ditto.\n\t(_mm_roundscale_round_sd): Ditto.\n\t(_mm_max_round_sd): Ditto.\n\t(_mm_max_round_ss): Ditto.\n\t(_mm_min_round_sd): Ditto.\n\t(_mm_min_round_ss): Ditto.\n\t(_mm_fmadd_round_sd): Ditto.\n\t(_mm_fmadd_round_ss): Ditto.\n\t(_mm_fmsub_round_sd): Ditto.\n\t(_mm_fmsub_round_ss): Ditto.\n\t(_mm_fnmadd_round_sd): Ditto.\n\t(_mm_fnmadd_round_ss): Ditto.\n\t(_mm_fnmsub_round_sd): Ditto.\n\t(_mm_fnmsub_round_ss): Ditto.\n\t(_mm_scalef_sd): Ditto.\n\t(_mm_scalef_ss): Ditto.\n\t(_mm_getexp_ss): Ditto.\n\t(_mm_getexp_sd): Ditto.\n\t(_mm_getmant_sd): Ditto.\n\t(_mm_getmant_ss): Ditto.\n\t(_mm_roundscale_ss): Ditto.\n\t(_mm_roundscale_sd): Ditto.\n\t* config/i386/i386-builtin-types.def: New types to support\n\tnew built-ins: <V2DF, V2DF, V2DF, INT, INT>, <V4SF, V4SF, V4SF, INT, INT>,\n\t<(V4SF, V4SF, V2DF, INT>, <V2DF, V2DF, V4SF, INT>,\n\t<V4SF, V4SF, V4SF, V4SF, IN>.\n\t* config/i386/i386.c (enum ix86_builtins): Add IX86_BUILTIN_ADDSD_ROUND,\n\tIX86_BUILTIN_ADDSS_ROUND, IX86_BUILTIN_CVTSD2SS_ROUND,\n\tIX86_BUILTIN_CVTSS2SD_ROUND, IX86_BUILTIN_DIVSD_ROUND,\n\tIX86_BUILTIN_GETEXPSD128, IX86_BUILTIN_DIVSS_ROUND,\n\tIX86_BUILTIN_GETEXPSS128, IX86_BUILTIN_GETMANTSD128,\n\tIX86_BUILTIN_GETMANTSS128, IX86_BUILTIN_MAXSD_ROUND,\n\tIX86_BUILTIN_MAXSS_ROUND, IX86_BUILTIN_MINSD_ROUND,\n\tIX86_BUILTIN_MINSS_ROUND, IX86_BUILTIN_MULSD_ROUND,\n\tIX86_BUILTIN_MULSS_ROUND, IX86_BUILTIN_RCP14SD,\n\tIX86_BUILTIN_RCP14SS, IX86_BUILTIN_RNDSCALESD,\n\tIX86_BUILTIN_RNDSCALESS, IX86_BUILTIN_RSQRT14SD,\n\tIX86_BUILTIN_RSQRT14SS, IX86_BUILTIN_SCALEFSD,\n\tIX86_BUILTIN_SCALEFSS, IX86_BUILTIN_SQRTSD_ROUND,\n\tIX86_BUILTIN_SQRTSS_ROUND, IX86_BUILTIN_SUBSD_ROUND,\n\tIX86_BUILTIN_SUBSS_ROUND, IX86_BUILTIN_VFMADDSD3_ROUND,\n\tIX86_BUILTIN_VFMADDSS3_ROUND, IX86_BUILTIN_VFMSUBSD3_MASK3,\n\tIX86_BUILTIN_VFMSUBSS3_MASK3.\n\t(builtin_description bdesc_args[]): Add\n\t__builtin_ia32_rcp14sd, __builtin_ia32_rcp14ss,\n\t__builtin_ia32_rsqrt14pd512_mask, __builtin_ia32_rsqrt14ps512_mask,\n\t__builtin_ia32_rsqrt14sd, __builtin_ia32_rsqrt14ss,\n\t__builtin_ia32_addsd_round, __builtin_ia32_addss_round,\n\t__builtin_ia32_cvtsd2ss_round, __builtin_ia32_cvtss2sd_round,\n\t__builtin_ia32_divsd_round, __builtin_ia32_divss_round,\n\t__builtin_ia32_getexpsd128_round, __builtin_ia32_getexpss128_round,\n\t__builtin_ia32_getmantsd_round, __builtin_ia32_getmantss_round,\n\t__builtin_ia32_maxsd_round, __builtin_ia32_maxss_round,\n\t__builtin_ia32_minsd_round, __builtin_ia32_minss_round,\n\t__builtin_ia32_mulsd_round, __builtin_ia32_mulss_round,\n\t__builtin_ia32_rndscalesd_round, __builtin_ia32_rndscaless_round,\n\t__builtin_ia32_scalefsd_round, __builtin_ia32_scalefss_round,\n\t__builtin_ia32_sqrtsd_round, __builtin_ia32_sqrtss_round,\n\t__builtin_ia32_subsd_round, __builtin_ia32_subss_round,\n\t__builtin_ia32_vfmaddsd3_round, __builtin_ia32_vfmaddss3_round.\n\t(ix86_expand_round_builtin): Expand new FTYPEs.\n\t* config/i386/sse.md (<sse>_vm<plusminus_insn><mode>3): Support\n\tEVEX's embedded rouding.\n\t(<sse>_vm<multdiv_mnemonic><mode>3): Ditto.\n\t(<sse>_vmsqrt<mode>2): Ditto.\n\t(<sse>_vm<code><mode>3): Ditto.\n\t(sse2_cvtsd2ss): Ditto.\n\t(sse2_cvtss2sd): Ditto.\n\t(*avx512f_vmscalef<mode>): Ditto.\n\t(avx512f_sgetexp<mode>): Ditto.\n\t(*avx512f_rndscale<mode>): Ditto.\n\t(avx512f_getmant<mode>): Ditto.\n\t(*srcp14<mode>): Make visible.\n\t(*rsqrt14<mode>): Ditto.\n\t* config/i386/subst.md (mask_mode512bit_condition): Fix\n\tmode calculation.\n\t(sd_mask_mode512bit_condition): Ditto.\n\t(round_mode512bit_condition): Ditto.\n\t(round_modev4sf_condition): Ditto.\n\t(round_mask_scalar_operand3): Remove.\n\t(round_prefix): New.\n\t(round_saeonly_op3): Ditto.\n\t(round_saeonly_prefix): Ditto.\n\ntestsuite/\n\t* gcc.target/i386/avx-1.c: Update for AVX-512 scalar insns.\n\t* gcc.target/i386/avx512f-vaddsd-1.c: New.\n\t* gcc.target/i386/avx512f-vaddss-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vcvtsd2ss-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vcvtss2sd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vdivsd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vdivss-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vextractf32x4-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vextracti32x4-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vfmaddXXXsd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vfmaddXXXss-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vfmsubXXXsd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vfmsubXXXss-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vfnmaddXXXsd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vfnmaddXXXss-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vfnmsubXXXsd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vfnmsubXXXss-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vgetexpsd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vgetexpsd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vgetexpss-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vgetexpss-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vgetmantsd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vgetmantsd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vgetmantss-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vgetmantss-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vmaxsd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vmaxss-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vminsd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vminss-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vmulsd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vmulss-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vrcp14sd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vrcp14sd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vrcp14ss-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vrcp14ss-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vrndscalesd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vrndscalesd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vrndscaless-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vrndscaless-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vrsqrt14sd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vrsqrt14sd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vrsqrt14ss-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vrsqrt14ss-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vscalefsd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vscalefsd-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vscalefss-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vscalefss-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vsqrtsd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vsqrtss-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vsubsd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vsubss-1.c: Ditto.\n\t* gcc.target/i386/sse-14.c: Update for AVX-512 scalar insns.\n\t* gcc.target/i386/sse-23.c: Ditto.\n\t* gcc.target/i386/testimm-10.c: Ditto.\n\n\nCo-Authored-By: Andrey Turetskiy <andrey.turetskiy@intel.com>\nCo-Authored-By: Anna Tikhonova <anna.tikhonova@intel.com>\nCo-Authored-By: Ilya Tocar <ilya.tocar@intel.com>\nCo-Authored-By: Ilya Verbin <ilya.verbin@intel.com>\nCo-Authored-By: Kirill Yukhin <kirill.yukhin@intel.com>\nCo-Authored-By: Maxim Kuznetsov <maxim.kuznetsov@intel.com>\nCo-Authored-By: Michael Zolotukhin <michael.v.zolotukhin@intel.com>\nCo-Authored-By: Sergey Lega <sergey.s.lega@intel.com>\n\nFrom-SVN: r206265", "tree": {"sha": "8140e3b1d8a8c8dae84e044a60dbb110e8e89f70", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8140e3b1d8a8c8dae84e044a60dbb110e8e89f70"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/075691af6b69963626c2e242661f4d39131d6b25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/075691af6b69963626c2e242661f4d39131d6b25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/075691af6b69963626c2e242661f4d39131d6b25", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/075691af6b69963626c2e242661f4d39131d6b25/comments", "author": null, "committer": null, "parents": [{"sha": "cf3e5a89aecd15ead7177517b7f3b6e3c4c66645", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf3e5a89aecd15ead7177517b7f3b6e3c4c66645", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf3e5a89aecd15ead7177517b7f3b6e3c4c66645"}], "stats": {"total": 2263, "additions": 2198, "deletions": 65}, "files": [{"sha": "2ffd9593b54e953a5a95f55f302a6edd3ebe39c6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 117, "deletions": 0, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/075691af6b69963626c2e242661f4d39131d6b25/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/075691af6b69963626c2e242661f4d39131d6b25/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=075691af6b69963626c2e242661f4d39131d6b25", "patch": "@@ -6,6 +6,123 @@\n \tinstead only for !inplace add a __builtin_unreachable () call\n \tbefore the call.\n \n+2013-12-31  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n+\t    Maxim Kuznetsov  <maxim.kuznetsov@intel.com>\n+\t    Sergey Lega  <sergey.s.lega@intel.com>\n+\t    Anna Tikhonova  <anna.tikhonova@intel.com>\n+\t    Ilya Tocar  <ilya.tocar@intel.com>\n+\t    Andrey Turetskiy  <andrey.turetskiy@intel.com>\n+\t    Ilya Verbin  <ilya.verbin@intel.com>\n+\t    Kirill Yukhin  <kirill.yukhin@intel.com>\n+\t    Michael Zolotukhin  <michael.v.zolotukhin@intel.com>\n+\n+\t* config/i386/avx512fintrin.h (_mm_add_round_sd): New.\n+\t(_mm_add_round_sd): Ditto.\n+\t(_mm_add_round_ss): Ditto.\n+\t(_mm_sub_round_sd): Ditto.\n+\t(_mm_sub_round_ss): Ditto.\n+\t(_mm_rcp14_sd): Ditto.\n+\t(_mm_rcp14_ss): Ditto.\n+\t(_mm_sqrt_round_sd): Ditto.\n+\t(_mm_sqrt_round_ss): Ditto.\n+\t(_mm_mul_round_sd): Ditto.\n+\t(_mm_mul_round_ss): Ditto.\n+\t(_mm_div_round_sd): Ditto.\n+\t(_mm_div_round_ss): Ditto.\n+\t(_mm_scalef_round_sd): Ditto.\n+\t(_mm_scalef_round_ss): Ditto.\n+\t(_mm_scalef_round_sd): Ditto.\n+\t(_mm_scalef_round_ss): Ditto.\n+\t(_mm_cvt_roundsd_ss): Ditto.\n+\t(_mm_cvt_roundsd_sd): Ditto.\n+\t(_mm_getexp_round_ss): Ditto.\n+\t(_mm_getexp_round_sd): Ditto.\n+\t(_mm_getmant_round_sd): Ditto.\n+\t(_mm_getmant_round_ss): Ditto.\n+\t(_mm_roundscale_round_ss): Ditto.\n+\t(_mm_roundscale_round_sd): Ditto.\n+\t(_mm_max_round_sd): Ditto.\n+\t(_mm_max_round_ss): Ditto.\n+\t(_mm_min_round_sd): Ditto.\n+\t(_mm_min_round_ss): Ditto.\n+\t(_mm_fmadd_round_sd): Ditto.\n+\t(_mm_fmadd_round_ss): Ditto.\n+\t(_mm_fmsub_round_sd): Ditto.\n+\t(_mm_fmsub_round_ss): Ditto.\n+\t(_mm_fnmadd_round_sd): Ditto.\n+\t(_mm_fnmadd_round_ss): Ditto.\n+\t(_mm_fnmsub_round_sd): Ditto.\n+\t(_mm_fnmsub_round_ss): Ditto.\n+\t(_mm_scalef_sd): Ditto.\n+\t(_mm_scalef_ss): Ditto.\n+\t(_mm_getexp_ss): Ditto.\n+\t(_mm_getexp_sd): Ditto.\n+\t(_mm_getmant_sd): Ditto.\n+\t(_mm_getmant_ss): Ditto.\n+\t(_mm_roundscale_ss): Ditto.\n+\t(_mm_roundscale_sd): Ditto.\n+\t* config/i386/i386-builtin-types.def: New types to support\n+\tnew built-ins: <V2DF, V2DF, V2DF, INT, INT>, <V4SF, V4SF, V4SF, INT, INT>,\n+\t<(V4SF, V4SF, V2DF, INT>, <V2DF, V2DF, V4SF, INT>,\n+\t<V4SF, V4SF, V4SF, V4SF, IN>.\n+\t* config/i386/i386.c (enum ix86_builtins): Add IX86_BUILTIN_ADDSD_ROUND,\n+\tIX86_BUILTIN_ADDSS_ROUND, IX86_BUILTIN_CVTSD2SS_ROUND,\n+\tIX86_BUILTIN_CVTSS2SD_ROUND, IX86_BUILTIN_DIVSD_ROUND,\n+\tIX86_BUILTIN_GETEXPSD128, IX86_BUILTIN_DIVSS_ROUND,\n+\tIX86_BUILTIN_GETEXPSS128, IX86_BUILTIN_GETMANTSD128,\n+\tIX86_BUILTIN_GETMANTSS128, IX86_BUILTIN_MAXSD_ROUND,\n+\tIX86_BUILTIN_MAXSS_ROUND, IX86_BUILTIN_MINSD_ROUND,\n+\tIX86_BUILTIN_MINSS_ROUND, IX86_BUILTIN_MULSD_ROUND,\n+\tIX86_BUILTIN_MULSS_ROUND, IX86_BUILTIN_RCP14SD,\n+\tIX86_BUILTIN_RCP14SS, IX86_BUILTIN_RNDSCALESD,\n+\tIX86_BUILTIN_RNDSCALESS, IX86_BUILTIN_RSQRT14SD,\n+\tIX86_BUILTIN_RSQRT14SS, IX86_BUILTIN_SCALEFSD,\n+\tIX86_BUILTIN_SCALEFSS, IX86_BUILTIN_SQRTSD_ROUND,\n+\tIX86_BUILTIN_SQRTSS_ROUND, IX86_BUILTIN_SUBSD_ROUND,\n+\tIX86_BUILTIN_SUBSS_ROUND, IX86_BUILTIN_VFMADDSD3_ROUND,\n+\tIX86_BUILTIN_VFMADDSS3_ROUND, IX86_BUILTIN_VFMSUBSD3_MASK3,\n+\tIX86_BUILTIN_VFMSUBSS3_MASK3.\n+\t(builtin_description bdesc_args[]): Add\n+\t__builtin_ia32_rcp14sd, __builtin_ia32_rcp14ss,\n+\t__builtin_ia32_rsqrt14pd512_mask, __builtin_ia32_rsqrt14ps512_mask,\n+\t__builtin_ia32_rsqrt14sd, __builtin_ia32_rsqrt14ss,\n+\t__builtin_ia32_addsd_round, __builtin_ia32_addss_round,\n+\t__builtin_ia32_cvtsd2ss_round, __builtin_ia32_cvtss2sd_round,\n+\t__builtin_ia32_divsd_round, __builtin_ia32_divss_round,\n+\t__builtin_ia32_getexpsd128_round, __builtin_ia32_getexpss128_round,\n+\t__builtin_ia32_getmantsd_round, __builtin_ia32_getmantss_round,\n+\t__builtin_ia32_maxsd_round, __builtin_ia32_maxss_round,\n+\t__builtin_ia32_minsd_round, __builtin_ia32_minss_round,\n+\t__builtin_ia32_mulsd_round, __builtin_ia32_mulss_round,\n+\t__builtin_ia32_rndscalesd_round, __builtin_ia32_rndscaless_round,\n+\t__builtin_ia32_scalefsd_round, __builtin_ia32_scalefss_round,\n+\t__builtin_ia32_sqrtsd_round, __builtin_ia32_sqrtss_round,\n+\t__builtin_ia32_subsd_round, __builtin_ia32_subss_round,\n+\t__builtin_ia32_vfmaddsd3_round, __builtin_ia32_vfmaddss3_round.\n+\t(ix86_expand_round_builtin): Expand new FTYPEs.\n+\t* config/i386/sse.md (<sse>_vm<plusminus_insn><mode>3): Support\n+\tEVEX's embedded rouding.\n+\t(<sse>_vm<multdiv_mnemonic><mode>3): Ditto.\n+\t(<sse>_vmsqrt<mode>2): Ditto.\n+\t(<sse>_vm<code><mode>3): Ditto.\n+\t(sse2_cvtsd2ss): Ditto.\n+\t(sse2_cvtss2sd): Ditto.\n+\t(*avx512f_vmscalef<mode>): Ditto.\n+\t(avx512f_sgetexp<mode>): Ditto.\n+\t(*avx512f_rndscale<mode>): Ditto.\n+\t(avx512f_getmant<mode>): Ditto.\n+\t(*srcp14<mode>): Make visible.\n+\t(*rsqrt14<mode>): Ditto.\n+\t* config/i386/subst.md (mask_mode512bit_condition): Fix\n+\tmode calculation.\n+\t(sd_mask_mode512bit_condition): Ditto.\n+\t(round_mode512bit_condition): Ditto.\n+\t(round_modev4sf_condition): Ditto.\n+\t(round_mask_scalar_operand3): Remove.\n+\t(round_prefix): New.\n+\t(round_saeonly_op3): Ditto.\n+\t(round_saeonly_prefix): Ditto.\n+\n 2013-12-31  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n \t    Maxim Kuznetsov  <maxim.kuznetsov@intel.com>\n \t    Sergey Lega  <sergey.s.lega@intel.com>"}, {"sha": "40e82134273dfc64c7e3f473196776ef961bf233", "filename": "gcc/config/i386/avx512fintrin.h", "status": "modified", "additions": 543, "deletions": 0, "changes": 543, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Fconfig%2Fi386%2Favx512fintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Fconfig%2Fi386%2Favx512fintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512fintrin.h?ref=075691af6b69963626c2e242661f4d39131d6b25", "patch": "@@ -1278,6 +1278,57 @@ _mm512_maskz_sra_epi32 (__mmask16 __U, __m512i __A, __m128i __B)\n \t\t\t\t\t\t (__mmask16) __U);\n }\n \n+#ifdef __OPTIMIZE__\n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_add_round_sd (__m128d __A, __m128d __B, const int __R)\n+{\n+  return (__m128d) __builtin_ia32_addsd_round ((__v2df) __A,\n+\t\t\t\t\t       (__v2df) __B,\n+\t\t\t\t\t       __R);\n+}\n+\n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_add_round_ss (__m128 __A, __m128 __B, const int __R)\n+{\n+  return (__m128) __builtin_ia32_addss_round ((__v4sf) __A,\n+\t\t\t\t\t      (__v4sf) __B,\n+\t\t\t\t\t      __R);\n+}\n+\n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_sub_round_sd (__m128d __A, __m128d __B, const int __R)\n+{\n+  return (__m128d) __builtin_ia32_subsd_round ((__v2df) __A,\n+\t\t\t\t\t       (__v2df) __B,\n+\t\t\t\t\t       __R);\n+}\n+\n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_sub_round_ss (__m128 __A, __m128 __B, const int __R)\n+{\n+  return (__m128) __builtin_ia32_subss_round ((__v4sf) __A,\n+\t\t\t\t\t      (__v4sf) __B,\n+\t\t\t\t\t      __R);\n+}\n+\n+#else\n+#define _mm_add_round_sd(A, B, C)            \\\n+    (__m128d)__builtin_ia32_addsd_round(A, B, C)\n+\n+#define _mm_add_round_ss(A, B, C)            \\\n+    (__m128)__builtin_ia32_addss_round(A, B, C)\n+\n+#define _mm_sub_round_sd(A, B, C)            \\\n+    (__m128d)__builtin_ia32_subsd_round(A, B, C)\n+\n+#define _mm_sub_round_ss(A, B, C)            \\\n+    (__m128)__builtin_ia32_subss_round(A, B, C)\n+#endif\n+\n #ifdef __OPTIMIZE__\n extern __inline __m512i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n@@ -1424,6 +1475,22 @@ _mm512_maskz_rcp14_ps (__mmask16 __U, __m512 __A)\n \t\t\t\t\t\t  (__mmask16) __U);\n }\n \n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_rcp14_sd (__m128d __A, __m128d __B)\n+{\n+  return (__m128d) __builtin_ia32_rcp14sd ((__v2df) __A,\n+\t\t\t\t\t   (__v2df) __B);\n+}\n+\n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_rcp14_ss (__m128 __A, __m128 __B)\n+{\n+  return (__m128) __builtin_ia32_rcp14ss ((__v4sf) __A,\n+\t\t\t\t\t  (__v4sf) __B);\n+}\n+\n extern __inline __m512d\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_rsqrt14_pd (__m512d __A)\n@@ -1482,6 +1549,22 @@ _mm512_maskz_rsqrt14_ps (__mmask16 __U, __m512 __A)\n \t\t\t\t\t\t    (__mmask16) __U);\n }\n \n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_rsqrt14_sd (__m128d __A, __m128d __B)\n+{\n+  return (__m128d) __builtin_ia32_rsqrt14sd ((__v2df) __A,\n+\t\t\t\t\t     (__v2df) __B);\n+}\n+\n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_rsqrt14_ss (__m128 __A, __m128 __B)\n+{\n+  return (__m128) __builtin_ia32_rsqrt14ss ((__v4sf) __A,\n+\t\t\t\t\t    (__v4sf) __B);\n+}\n+\n #ifdef __OPTIMIZE__\n extern __inline __m512d\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n@@ -1542,6 +1625,23 @@ _mm512_maskz_sqrt_round_ps (__mmask16 __U, __m512 __A, const int __R)\n \t\t\t\t\t\t (__mmask16) __U, __R);\n }\n \n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_sqrt_round_sd (__m128d __A, __m128d __B, const int __R)\n+{\n+  return (__m128d) __builtin_ia32_sqrtsd_round ((__v2df) __B,\n+\t\t\t\t\t\t(__v2df) __A,\n+\t\t\t\t\t\t__R);\n+}\n+\n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_sqrt_round_ss (__m128 __A, __m128 __B, const int __R)\n+{\n+  return (__m128) __builtin_ia32_sqrtss_round ((__v4sf) __B,\n+\t\t\t\t\t       (__v4sf) __A,\n+\t\t\t\t\t       __R);\n+}\n #else\n #define _mm512_sqrt_round_pd(A, C)            \\\n     (__m512d)__builtin_ia32_sqrtpd512_mask(A, (__v8df)_mm512_setzero_pd(), -1, C)\n@@ -1560,6 +1660,12 @@ _mm512_maskz_sqrt_round_ps (__mmask16 __U, __m512 __A, const int __R)\n \n #define _mm512_maskz_sqrt_round_ps(U, A, C)   \\\n     (__m512)__builtin_ia32_sqrtps512_mask(A, (__v16sf)_mm512_setzero_ps(), U, C)\n+\n+#define _mm_sqrt_round_sd(A, B, C)            \\\n+    (__m128d)__builtin_ia32_sqrtsd_round(A, B, C)\n+\n+#define _mm_sqrt_round_ss(A, B, C)            \\\n+    (__m128)__builtin_ia32_sqrtss_round(A, B, C)\n #endif\n \n extern __inline __m512i\n@@ -2159,6 +2265,42 @@ _mm512_maskz_div_round_ps (__mmask16 __U, __m512 __A, __m512 __B, const int __R)\n \t\t\t\t\t\t(__mmask16) __U, __R);\n }\n \n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mul_round_sd (__m128d __A, __m128d __B, const int __R)\n+{\n+  return (__m128d) __builtin_ia32_mulsd_round ((__v2df) __A,\n+\t\t\t\t\t       (__v2df) __B,\n+\t\t\t\t\t       __R);\n+}\n+\n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mul_round_ss (__m128 __A, __m128 __B, const int __R)\n+{\n+  return (__m128) __builtin_ia32_mulss_round ((__v4sf) __A,\n+\t\t\t\t\t      (__v4sf) __B,\n+\t\t\t\t\t      __R);\n+}\n+\n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_div_round_sd (__m128d __A, __m128d __B, const int __R)\n+{\n+  return (__m128d) __builtin_ia32_divsd_round ((__v2df) __A,\n+\t\t\t\t\t       (__v2df) __B,\n+\t\t\t\t\t       __R);\n+}\n+\n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_div_round_ss (__m128 __A, __m128 __B, const int __R)\n+{\n+  return (__m128) __builtin_ia32_divss_round ((__v4sf) __A,\n+\t\t\t\t\t      (__v4sf) __B,\n+\t\t\t\t\t      __R);\n+}\n+\n #else\n #define _mm512_mul_round_pd(A, B, C)            \\\n     (__m512d)__builtin_ia32_mulpd512_mask(A, B, (__v8df)_mm512_setzero_pd(), -1, C)\n@@ -2195,6 +2337,18 @@ _mm512_maskz_div_round_ps (__mmask16 __U, __m512 __A, __m512 __B, const int __R)\n \n #define _mm512_maskz_div_round_ps(U, A, B, C)   \\\n     (__m512)__builtin_ia32_divps512_mask(A, B, (__v16sf)_mm512_setzero_ps(), U, C)\n+\n+#define _mm_mul_round_sd(A, B, C)            \\\n+    (__m128d)__builtin_ia32_mulsd_round(A, B, C)\n+\n+#define _mm_mul_round_ss(A, B, C)            \\\n+    (__m128)__builtin_ia32_mulss_round(A, B, C)\n+\n+#define _mm_div_round_sd(A, B, C)            \\\n+    (__m128d)__builtin_ia32_divsd_round(A, B, C)\n+\n+#define _mm_div_round_ss(A, B, C)            \\\n+    (__m128)__builtin_ia32_divss_round(A, B, C)\n #endif\n \n #ifdef __OPTIMIZE__\n@@ -2438,6 +2592,23 @@ _mm512_maskz_scalef_round_ps (__mmask16 __U, __m512 __A, __m512 __B,\n \t\t\t\t\t\t   (__mmask16) __U, __R);\n }\n \n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_scalef_round_sd (__m128d __A, __m128d __B, const int __R)\n+{\n+  return (__m128d) __builtin_ia32_scalefsd_round ((__v2df) __A,\n+\t\t\t\t\t\t  (__v2df) __B,\n+\t\t\t\t\t\t  __R);\n+}\n+\n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_scalef_round_ss (__m128 __A, __m128 __B, const int __R)\n+{\n+  return (__m128) __builtin_ia32_scalefss_round ((__v4sf) __A,\n+\t\t\t\t\t\t (__v4sf) __B,\n+\t\t\t\t\t\t __R);\n+}\n #else\n #define _mm512_scalef_round_pd(A, B, C)            \\\n     (__m512d)__builtin_ia32_scalefpd512_mask(A, B, (__v8df)_mm512_setzero_pd(), -1, C)\n@@ -2456,6 +2627,12 @@ _mm512_maskz_scalef_round_ps (__mmask16 __U, __m512 __A, __m512 __B,\n \n #define _mm512_maskz_scalef_round_ps(U, A, B, C)   \\\n     (__m512)__builtin_ia32_scalefps512_mask(A, B, (__v16sf)_mm512_setzero_ps(), U, C)\n+\n+#define _mm_scalef_round_sd(A, B, C)            \\\n+    (__m128d)__builtin_ia32_scalefsd_round(A, B, C)\n+\n+#define _mm_scalef_round_ss(A, B, C)            \\\n+    (__m128)__builtin_ia32_scalefss_round(A, B, C)\n #endif\n \n #ifdef __OPTIMIZE__\n@@ -7578,6 +7755,23 @@ _mm512_maskz_cvt_roundpd_ps (__mmask8 __U, __m512d __A, const int __R)\n \t\t\t\t\t\t   (__mmask8) __U, __R);\n }\n \n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_cvt_roundsd_ss (__m128 __A, __m128d __B, const int __R)\n+{\n+  return (__m128) __builtin_ia32_cvtsd2ss_round ((__v4sf) __A,\n+\t\t\t\t\t\t (__v2df) __B,\n+\t\t\t\t\t\t __R);\n+}\n+\n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_cvt_roundss_sd (__m128d __A, __m128 __B, const int __R)\n+{\n+  return (__m128d) __builtin_ia32_cvtss2sd_round ((__v2df) __A,\n+\t\t\t\t\t\t  (__v4sf) __B,\n+\t\t\t\t\t\t  __R);\n+}\n #else\n #define _mm512_cvt_roundpd_ps(A, B)\t\t \\\n     (__m256)__builtin_ia32_cvtpd2ps512_mask(A, (__v8sf)_mm256_setzero_ps(), -1, B)\n@@ -7587,6 +7781,12 @@ _mm512_maskz_cvt_roundpd_ps (__mmask8 __U, __m512d __A, const int __R)\n \n #define _mm512_maskz_cvt_roundpd_ps(U, A, B)     \\\n     (__m256)__builtin_ia32_cvtpd2ps512_mask(A, (__v8sf)_mm256_setzero_ps(), U, B)\n+\n+#define _mm_cvt_roundsd_ss(A, B, C)\t\t \\\n+    (__m128)__builtin_ia32_cvtsd2ss_round(A, B, C)\n+\n+#define _mm_cvt_roundss_sd(A, B, C)\t\t \\\n+    (__m128d)__builtin_ia32_cvtss2sd_round(A, B, C)\n #endif\n \n extern __inline void\n@@ -7611,6 +7811,24 @@ _mm512_stream_pd (double *__P, __m512d __A)\n }\n \n #ifdef __OPTIMIZE__\n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_getexp_round_ss (__m128 __A, __m128 __B, const int __R)\n+{\n+  return (__m128) __builtin_ia32_getexpss128_round ((__v4sf) __A,\n+\t\t\t\t\t\t    (__v4sf) __B,\n+\t\t\t\t\t\t    __R);\n+}\n+\n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_getexp_round_sd (__m128d __A, __m128d __B, const int __R)\n+{\n+  return (__m128d) __builtin_ia32_getexpsd128_round ((__v2df) __A,\n+\t\t\t\t\t\t     (__v2df) __B,\n+\t\t\t\t\t\t     __R);\n+}\n+\n extern __inline __m512\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_getexp_round_ps (__m512 __A, const int __R)\n@@ -7759,6 +7977,30 @@ _mm512_maskz_getmant_round_ps (__mmask16 __U, __m512 __A,\n \t\t\t\t\t\t    __U, __R);\n }\n \n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_getmant_round_sd (__m128d __A, __m128d __B,\n+\t\t      _MM_MANTISSA_NORM_ENUM __C,\n+\t\t      _MM_MANTISSA_SIGN_ENUM __D, const int __R)\n+{\n+  return (__m128d) __builtin_ia32_getmantsd_round ((__v2df) __A,\n+\t\t\t\t\t\t  (__v2df) __B,\n+\t\t\t\t\t\t  (__D << 2) | __C,\n+\t\t\t\t\t\t   __R);\n+}\n+\n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_getmant_round_ss (__m128 __A, __m128 __B,\n+\t\t      _MM_MANTISSA_NORM_ENUM __C,\n+\t\t      _MM_MANTISSA_SIGN_ENUM __D, const int __R)\n+{\n+  return (__m128) __builtin_ia32_getmantss_round ((__v4sf) __A,\n+\t\t\t\t\t\t  (__v4sf) __B,\n+\t\t\t\t\t\t  (__D << 2) | __C,\n+\t\t\t\t\t\t  __R);\n+}\n+\n #else\n #define _mm512_getmant_round_pd(X, B, C, R)                                                  \\\n   ((__m512d)__builtin_ia32_getmantpd512_mask ((__v8df)(__m512d)(X),                 \\\n@@ -7800,6 +8042,24 @@ _mm512_maskz_getmant_round_ps (__mmask16 __U, __m512 __A,\n                                              (__v16sf)(__m512)_mm512_setzero_ps(),  \\\n                                              (__mmask16)(U),\\\n \t\t\t\t\t     (R)))\n+#define _mm_getmant_round_sd(X, Y, C, D, R)                                                  \\\n+  ((__m128d)__builtin_ia32_getmantsd_round ((__v2df)(__m128d)(X),                    \\\n+\t\t\t\t\t    (__v2df)(__m128d)(Y),\t\\\n+\t\t\t\t\t    (int)(((D)<<2) | (C)),\t\\\n+\t\t\t\t\t    (R)))\n+\n+#define _mm_getmant_round_ss(X, Y, C, D, R)                                                  \\\n+  ((__m128)__builtin_ia32_getmantss_round ((__v4sf)(__m128)(X),                      \\\n+\t\t\t\t\t   (__v4sf)(__m128)(Y),\t\t\\\n+\t\t\t\t\t   (int)(((D)<<2) | (C)),\t\\\n+\t\t\t\t\t   (R)))\n+\n+#define _mm_getexp_round_ss(A, B, R)\t\t\t\t\t\t      \\\n+  ((__m128)__builtin_ia32_getexpss128_round((__v4sf)(__m128)(A), (__v4sf)(__m128)(B), R))\n+\n+#define _mm_getexp_round_sd(A, B, R)\t\t\t\t\t\t       \\\n+  ((__m128d)__builtin_ia32_getexpsd128_round((__v2df)(__m128d)(A), (__v2df)(__m128d)(B), R))\n+\n #define _mm512_getexp_round_ps(A, R)\t\t\t\t\t\t\\\n   ((__m512)__builtin_ia32_getexpps512_mask((__v16sf)(__m512)(A),\t\t\\\n   (__v16sf)_mm512_setzero_ps(), (__mmask16)-1, R))\n@@ -7885,6 +8145,24 @@ _mm512_maskz_roundscale_round_pd (__mmask8 __A, __m512d __B,\n \t\t\t\t\t\t   _mm512_setzero_pd (),\n \t\t\t\t\t\t   (__mmask8) __A, __R);\n }\n+\n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_roundscale_round_ss (__m128 __A, __m128 __B, const int __imm, const int __R)\n+{\n+  return (__m128) __builtin_ia32_rndscaless_round ((__v4sf) __A,\n+\t\t\t\t\t\t   (__v4sf) __B, __imm, __R);\n+}\n+\n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_roundscale_round_sd (__m128d __A, __m128d __B, const int __imm,\n+\t\t\t const int __R)\n+{\n+  return (__m128d) __builtin_ia32_rndscalesd_round ((__v2df) __A,\n+\t\t\t\t\t\t    (__v2df) __B, __imm, __R);\n+}\n+\n #else\n #define _mm512_roundscale_round_ps(A, B, R) \\\n   ((__m512) __builtin_ia32_rndscaleps_mask ((__v16sf)(__m512)(A), (int)(B),\\\n@@ -7912,6 +8190,12 @@ _mm512_maskz_roundscale_round_pd (__mmask8 __A, __m512d __B,\n \t\t\t\t\t     (int)(C),\t\t\t\\\n \t\t\t\t\t     (__v8df)_mm512_setzero_pd(),\\\n \t\t\t\t\t     (__mmask8)(A), R))\n+#define _mm_roundscale_round_ss(A, B, C, R)\t\t\t\t\t\\\n+  ((__m128) __builtin_ia32_rndscaless_round ((__v4sf)(__m128)(A),\t\\\n+    (__v4sf)(__m128)(B), (int)(C), R))\n+#define _mm_roundscale_round_sd(A, B, C, R)\t\t\t\t\t\\\n+  ((__m128d) __builtin_ia32_rndscalesd_round ((__v2df)(__m128d)(A),\t\\\n+    (__v2df)(__m128d)(B), (int)(C), R))\n #endif\n \n extern __inline __m512\n@@ -9825,6 +10109,57 @@ _mm512_maskz_unpacklo_ps (__mmask16 __U, __m512 __A, __m512 __B)\n \t\t\t\t\t\t   (__mmask16) __U);\n }\n \n+#ifdef __OPTIMIZE__\n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_max_round_sd (__m128d __A, __m128d __B, const int __R)\n+{\n+  return (__m128d) __builtin_ia32_maxsd_round ((__v2df) __A,\n+\t\t\t\t\t       (__v2df) __B,\n+\t\t\t\t\t       __R);\n+}\n+\n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_max_round_ss (__m128 __A, __m128 __B, const int __R)\n+{\n+  return (__m128) __builtin_ia32_maxss_round ((__v4sf) __A,\n+\t\t\t\t\t      (__v4sf) __B,\n+\t\t\t\t\t      __R);\n+}\n+\n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_min_round_sd (__m128d __A, __m128d __B, const int __R)\n+{\n+  return (__m128d) __builtin_ia32_minsd_round ((__v2df) __A,\n+\t\t\t\t\t       (__v2df) __B,\n+\t\t\t\t\t       __R);\n+}\n+\n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_min_round_ss (__m128 __A, __m128 __B, const int __R)\n+{\n+  return (__m128) __builtin_ia32_minss_round ((__v4sf) __A,\n+\t\t\t\t\t      (__v4sf) __B,\n+\t\t\t\t\t      __R);\n+}\n+\n+#else\n+#define _mm_max_round_sd(A, B, C)            \\\n+    (__m128d)__builtin_ia32_addsd_round(A, B, C)\n+\n+#define _mm_max_round_ss(A, B, C)            \\\n+    (__m128)__builtin_ia32_addss_round(A, B, C)\n+\n+#define _mm_min_round_sd(A, B, C)            \\\n+    (__m128d)__builtin_ia32_subsd_round(A, B, C)\n+\n+#define _mm_min_round_ss(A, B, C)            \\\n+    (__m128)__builtin_ia32_subss_round(A, B, C)\n+#endif\n+\n extern __inline __m512d\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_mask_blend_pd (__mmask8 __U, __m512d __A, __m512d __W)\n@@ -9861,6 +10196,112 @@ _mm512_mask_blend_epi32 (__mmask16 __U, __m512i __A, __m512i __W)\n \t\t\t\t\t\t    (__mmask16) __U);\n }\n \n+#ifdef __OPTIMIZE__\n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_fmadd_round_sd (__m128d __W, __m128d __A, __m128d __B, const int __R)\n+{\n+  return (__m128d) __builtin_ia32_vfmaddsd3_round ((__v2df) __W,\n+\t\t\t\t\t\t   (__v2df) __A,\n+\t\t\t\t\t\t   (__v2df) __B,\n+\t\t\t\t\t\t   __R);\n+}\n+\n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_fmadd_round_ss (__m128 __W, __m128 __A, __m128 __B, const int __R)\n+{\n+  return (__m128) __builtin_ia32_vfmaddss3_round ((__v4sf) __W,\n+\t\t\t\t\t\t  (__v4sf) __A,\n+\t\t\t\t\t\t  (__v4sf) __B,\n+\t\t\t\t\t\t  __R);\n+}\n+\n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_fmsub_round_sd (__m128d __W, __m128d __A, __m128d __B, const int __R)\n+{\n+  return (__m128d) __builtin_ia32_vfmaddsd3_round ((__v2df) __W,\n+\t\t\t\t\t\t   (__v2df) __A,\n+\t\t\t\t\t\t   -(__v2df) __B,\n+\t\t\t\t\t\t   __R);\n+}\n+\n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_fmsub_round_ss (__m128 __W, __m128 __A, __m128 __B, const int __R)\n+{\n+  return (__m128) __builtin_ia32_vfmaddss3_round ((__v4sf) __W,\n+\t\t\t\t\t\t  (__v4sf) __A,\n+\t\t\t\t\t\t  -(__v4sf) __B,\n+\t\t\t\t\t\t  __R);\n+}\n+\n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_fnmadd_round_sd (__m128d __W, __m128d __A, __m128d __B, const int __R)\n+{\n+  return (__m128d) __builtin_ia32_vfmaddsd3_round ((__v2df) __W,\n+\t\t\t\t\t\t   -(__v2df) __A,\n+\t\t\t\t\t\t   (__v2df) __B,\n+\t\t\t\t\t\t   __R);\n+}\n+\n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_fnmadd_round_ss (__m128 __W, __m128 __A, __m128 __B, const int __R)\n+{\n+  return (__m128) __builtin_ia32_vfmaddss3_round ((__v4sf) __W,\n+\t\t\t\t\t\t  -(__v4sf) __A,\n+\t\t\t\t\t\t  (__v4sf) __B,\n+\t\t\t\t\t\t  __R);\n+}\n+\n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_fnmsub_round_sd (__m128d __W, __m128d __A, __m128d __B, const int __R)\n+{\n+  return (__m128d) __builtin_ia32_vfmaddsd3_round ((__v2df) __W,\n+\t\t\t\t\t\t   -(__v2df) __A,\n+\t\t\t\t\t\t   -(__v2df) __B,\n+\t\t\t\t\t\t   __R);\n+}\n+\n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_fnmsub_round_ss (__m128 __W, __m128 __A, __m128 __B, const int __R)\n+{\n+  return (__m128) __builtin_ia32_vfmaddss3_round ((__v4sf) __W,\n+\t\t\t\t\t\t  -(__v4sf) __A,\n+\t\t\t\t\t\t  -(__v4sf) __B,\n+\t\t\t\t\t\t  __R);\n+}\n+#else\n+#define _mm_fmadd_round_sd(A, B, C, R)            \\\n+    (__m128d)__builtin_ia32_vfmaddsd3_round(A, B, C, R)\n+\n+#define _mm_fmadd_round_ss(A, B, C, R)            \\\n+    (__m128)__builtin_ia32_vfmaddss3_round(A, B, C, R)\n+\n+#define _mm_fmsub_round_sd(A, B, C, R)            \\\n+    (__m128d)__builtin_ia32_vfmaddsd3_round(A, B, -(C), R)\n+\n+#define _mm_fmsub_round_ss(A, B, C, R)            \\\n+    (__m128)__builtin_ia32_vfmaddss3_round(A, B, -(C), R)\n+\n+#define _mm_fnmadd_round_sd(A, B, C, R)            \\\n+    (__m128d)__builtin_ia32_vfmaddsd3_round(A, -(B), C, R)\n+\n+#define _mm_fnmadd_round_ss(A, B, C, R)            \\\n+   (__m128)__builtin_ia32_vfmaddss3_round(A, -(B), C, R)\n+\n+#define _mm_fnmsub_round_sd(A, B, C, R)            \\\n+    (__m128d)__builtin_ia32_vfmaddsd3_round(A, -(B), -(C), R)\n+\n+#define _mm_fnmsub_round_ss(A, B, C, R)            \\\n+    (__m128)__builtin_ia32_vfmaddss3_round(A, -(B), -(C), R)\n+#endif\n+\n #ifdef __OPTIMIZE__\n extern __inline int\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n@@ -10436,6 +10877,24 @@ _mm512_maskz_scalef_ps (__mmask16 __U, __m512 __A, __m512 __B)\n \t\t\t\t\t\t   _MM_FROUND_CUR_DIRECTION);\n }\n \n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_scalef_sd (__m128d __A, __m128d __B)\n+{\n+  return (__m128d) __builtin_ia32_scalefsd_round ((__v2df) __A,\n+\t\t\t\t\t\t  (__v2df) __B,\n+\t\t\t\t\t\t  _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_scalef_ss (__m128 __A, __m128 __B)\n+{\n+  return (__m128) __builtin_ia32_scalefss_round ((__v4sf) __A,\n+\t\t\t\t\t\t (__v4sf) __B,\n+\t\t\t\t\t\t _MM_FROUND_CUR_DIRECTION);\n+}\n+\n extern __inline __m512d\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_fmadd_pd (__m512d __A, __m512d __B, __m512d __C)\n@@ -11784,6 +12243,24 @@ _mm512_maskz_getexp_pd (__mmask8 __U, __m512d __A)\n \t\t\t\t\t\t    _MM_FROUND_CUR_DIRECTION);\n }\n \n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_getexp_ss (__m128 __A, __m128 __B)\n+{\n+  return (__m128) __builtin_ia32_getexpss128_round ((__v4sf) __A,\n+\t\t\t\t\t\t    (__v4sf) __B,\n+\t\t\t\t\t\t    _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_getexp_sd (__m128d __A, __m128d __B)\n+{\n+  return (__m128d) __builtin_ia32_getexpsd128_round ((__v2df) __A,\n+\t\t\t\t\t\t     (__v2df) __B,\n+\t\t\t\t\t\t     _MM_FROUND_CUR_DIRECTION);\n+}\n+\n extern __inline __m512d\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_getmant_pd (__m512d __A, _MM_MANTISSA_NORM_ENUM __B,\n@@ -11856,6 +12333,28 @@ _mm512_maskz_getmant_ps (__mmask16 __U, __m512 __A,\n \t\t\t\t\t\t    _MM_FROUND_CUR_DIRECTION);\n }\n \n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_getmant_sd (__m128d __A, __m128d __B, _MM_MANTISSA_NORM_ENUM __C,\n+\t\t_MM_MANTISSA_SIGN_ENUM __D)\n+{\n+  return (__m128d) __builtin_ia32_getmantsd_round ((__v2df) __A,\n+\t\t\t\t\t\t   (__v2df) __B,\n+\t\t\t\t\t\t   (__D << 2) | __C,\n+\t\t\t\t\t\t   _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_getmant_ss (__m128 __A, __m128 __B, _MM_MANTISSA_NORM_ENUM __C,\n+\t\t_MM_MANTISSA_SIGN_ENUM __D)\n+{\n+  return (__m128) __builtin_ia32_getmantss_round ((__v4sf) __A,\n+\t\t\t\t\t\t  (__v4sf) __B,\n+\t\t\t\t\t\t  (__D << 2) | __C,\n+\t\t\t\t\t\t  _MM_FROUND_CUR_DIRECTION);\n+}\n+\n #else\n #define _mm512_getmant_pd(X, B, C)                                                  \\\n   ((__m512d)__builtin_ia32_getmantpd512_mask ((__v8df)(__m512d)(X),                 \\\n@@ -11897,6 +12396,26 @@ _mm512_maskz_getmant_ps (__mmask16 __U, __m512 __A,\n                                              (__v16sf)(__m512)_mm512_setzero_ps(),  \\\n                                              (__mmask16)(U),\\\n \t\t\t\t\t     _MM_FROUND_CUR_DIRECTION))\n+#define _mm_getmant_sd(X, Y, C, D)                                                  \\\n+  ((__m128d)__builtin_ia32_getmantsd_round ((__v2df)(__m128d)(X),                    \\\n+                                           (__v2df)(__m128d)(Y),                    \\\n+                                           (int)(((D)<<2) | (C)),                   \\\n+\t\t\t\t\t   _MM_FROUND_CUR_DIRECTION))\n+\n+#define _mm_getmant_ss(X, Y, C, D)                                                  \\\n+  ((__m128)__builtin_ia32_getmantss_round ((__v4sf)(__m128)(X),                      \\\n+                                          (__v4sf)(__m128)(Y),                      \\\n+                                          (int)(((D)<<2) | (C)),                    \\\n+\t\t\t\t\t  _MM_FROUND_CUR_DIRECTION))\n+\n+#define _mm_getexp_ss(A, B)\t\t\t\t\t\t      \\\n+  ((__m128)__builtin_ia32_getexpss128_mask((__v4sf)(__m128)(A), (__v4sf)(__m128)(B),  \\\n+\t\t\t\t\t   _MM_FROUND_CUR_DIRECTION))\n+\n+#define _mm_getexp_sd(A, B)\t\t\t\t\t\t       \\\n+  ((__m128d)__builtin_ia32_getexpsd128_mask((__v2df)(__m128d)(A), (__v2df)(__m128d)(B),\\\n+\t\t\t\t\t    _MM_FROUND_CUR_DIRECTION))\n+\n #define _mm512_getexp_ps(A)\t\t\t\t\t\t\\\n   ((__m512)__builtin_ia32_getexpps512_mask((__v16sf)(__m512)(A),\t\t\\\n   (__v16sf)_mm512_setzero_ps(), (__mmask16)-1, _MM_FROUND_CUR_DIRECTION))\n@@ -11987,6 +12506,24 @@ _mm512_maskz_roundscale_pd (__mmask8 __A, __m512d __B, const int __imm)\n \t\t\t\t\t\t   _MM_FROUND_CUR_DIRECTION);\n }\n \n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_roundscale_ss (__m128 __A, __m128 __B, const int __imm)\n+{\n+  return (__m128) __builtin_ia32_rndscaless_round ((__v4sf) __A,\n+\t\t\t\t\t\t   (__v4sf) __B, __imm,\n+\t\t\t\t\t\t   _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_roundscale_sd (__m128d __A, __m128d __B, const int __imm)\n+{\n+  return (__m128d) __builtin_ia32_rndscalesd_round ((__v2df) __A,\n+\t\t\t\t\t\t    (__v2df) __B, __imm,\n+\t\t\t\t\t\t   _MM_FROUND_CUR_DIRECTION);\n+}\n+\n #else\n #define _mm512_roundscale_ps(A, B) \\\n   ((__m512) __builtin_ia32_rndscaleps_mask ((__v16sf)(__m512)(A), (int)(B),\\\n@@ -12014,6 +12551,12 @@ _mm512_maskz_roundscale_pd (__mmask8 __A, __m512d __B, const int __imm)\n \t\t\t\t\t     (int)(C),\t\t\t\\\n \t\t\t\t\t     (__v8df)_mm512_setzero_pd(),\\\n \t\t\t\t\t     (__mmask8)(A), _MM_FROUND_CUR_DIRECTION))\n+#define _mm_roundscale_ss(A, B, C)\t\t\t\t\t\\\n+  ((__m128) __builtin_ia32_rndscaless_round ((__v4sf)(__m128)(A),\t\\\n+  (__v4sf)(__m128)(B), (int)(C), _MM_FROUND_CUR_DIRECTION))\n+#define _mm_roundscale_sd(A, B, C)\t\t\t\t\t\\\n+  ((__m128d) __builtin_ia32_rndscalesd_round ((__v2df)(__m128d)(A),\t\\\n+    (__v2df)(__m128d)(B), (int)(C), _MM_FROUND_CUR_DIRECTION))\n #endif\n \n #ifdef __OPTIMIZE__"}, {"sha": "d19ca84ae2f832e5b477628b30eda6e91df5b7e7", "filename": "gcc/config/i386/i386-builtin-types.def", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def?ref=075691af6b69963626c2e242661f4d39131d6b25", "patch": "@@ -516,6 +516,7 @@ DEF_FUNCTION_TYPE (V16QI, V16QI, V16QI, INT)\n DEF_FUNCTION_TYPE (V16QI, V16QI, V16QI, V16QI)\n DEF_FUNCTION_TYPE (V1DI, V1DI, V1DI, INT)\n DEF_FUNCTION_TYPE (V2DF, V2DF, V2DF, INT)\n+DEF_FUNCTION_TYPE (V2DF, V2DF, V2DF, INT, INT)\n DEF_FUNCTION_TYPE (V2DF, V2DF, V2DF, V2DF)\n DEF_FUNCTION_TYPE (V2DF, V2DF, V2DF, V2DI, INT)\n DEF_FUNCTION_TYPE (V2DI, V2DI, DI, INT)\n@@ -531,6 +532,9 @@ DEF_FUNCTION_TYPE (V4DI, V4DI, V4DI, V4DI)\n DEF_FUNCTION_TYPE (V4HI, V4HI, HI, INT)\n DEF_FUNCTION_TYPE (V4SF, V4SF, FLOAT, INT)\n DEF_FUNCTION_TYPE (V4SF, V4SF, V4SF, INT)\n+DEF_FUNCTION_TYPE (V4SF, V4SF, V4SF, INT, INT)\n+DEF_FUNCTION_TYPE (V4SF, V4SF, V2DF, INT)\n+DEF_FUNCTION_TYPE (V2DF, V2DF, V4SF, INT)\n DEF_FUNCTION_TYPE (V4SF, V4SF, V4SF, V4SF)\n DEF_FUNCTION_TYPE (V4SF, V4SF, V4SF, V4SI, INT)\n DEF_FUNCTION_TYPE (V4SI, V4SI, SI, INT)\n@@ -678,6 +682,7 @@ DEF_FUNCTION_TYPE (V4SF, V4SF, V2DF, V4SF, QI, INT)\n DEF_FUNCTION_TYPE (V2DF, V2DF, V2DF, V2DF, QI, INT)\n DEF_FUNCTION_TYPE (V2DF, V2DF, V4SF, V2DF, QI, INT)\n DEF_FUNCTION_TYPE (V2DF, V2DF, V2DF, V2DF, INT)\n+DEF_FUNCTION_TYPE (V4SF, V4SF, V4SF, V4SF, INT)\n \n DEF_FUNCTION_TYPE (V16SF, V16SF, INT, V16SF, HI, INT)\n DEF_FUNCTION_TYPE (V8DF, V8DF, INT, V8DF, QI, INT)"}, {"sha": "be0364d4affbc69cefbfb059957cfa969c620cb7", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=075691af6b69963626c2e242661f4d39131d6b25", "patch": "@@ -27931,6 +27931,8 @@ enum ix86_builtins\n   /* AVX512F */\n   IX86_BUILTIN_ADDPD512,\n   IX86_BUILTIN_ADDPS512,\n+  IX86_BUILTIN_ADDSD_ROUND,\n+  IX86_BUILTIN_ADDSS_ROUND,\n   IX86_BUILTIN_ALIGND512,\n   IX86_BUILTIN_ALIGNQ512,\n   IX86_BUILTIN_BLENDMD512,\n@@ -27965,9 +27967,11 @@ enum ix86_builtins\n   IX86_BUILTIN_CVTPS2PD512,\n   IX86_BUILTIN_CVTPS2PH512,\n   IX86_BUILTIN_CVTPS2UDQ512,\n+  IX86_BUILTIN_CVTSD2SS_ROUND,\n   IX86_BUILTIN_CVTSI2SD64,\n   IX86_BUILTIN_CVTSI2SS32,\n   IX86_BUILTIN_CVTSI2SS64,\n+  IX86_BUILTIN_CVTSS2SD_ROUND,\n   IX86_BUILTIN_CVTTPD2DQ512,\n   IX86_BUILTIN_CVTTPD2UDQ512,\n   IX86_BUILTIN_CVTTPS2DQ512,\n@@ -27980,6 +27984,8 @@ enum ix86_builtins\n   IX86_BUILTIN_CVTUSI2SS64,\n   IX86_BUILTIN_DIVPD512,\n   IX86_BUILTIN_DIVPS512,\n+  IX86_BUILTIN_DIVSD_ROUND,\n+  IX86_BUILTIN_DIVSS_ROUND,\n   IX86_BUILTIN_EXPANDPD512,\n   IX86_BUILTIN_EXPANDPD512Z,\n   IX86_BUILTIN_EXPANDPDLOAD512,\n@@ -28002,8 +28008,12 @@ enum ix86_builtins\n   IX86_BUILTIN_FIXUPIMMSS128_MASKZ,\n   IX86_BUILTIN_GETEXPPD512,\n   IX86_BUILTIN_GETEXPPS512,\n+  IX86_BUILTIN_GETEXPSD128,\n+  IX86_BUILTIN_GETEXPSS128,\n   IX86_BUILTIN_GETMANTPD512,\n   IX86_BUILTIN_GETMANTPS512,\n+  IX86_BUILTIN_GETMANTSD128,\n+  IX86_BUILTIN_GETMANTSS128,\n   IX86_BUILTIN_INSERTF32X4,\n   IX86_BUILTIN_INSERTF64X4,\n   IX86_BUILTIN_INSERTI32X4,\n@@ -28016,8 +28026,12 @@ enum ix86_builtins\n   IX86_BUILTIN_LOADUPS512,\n   IX86_BUILTIN_MAXPD512,\n   IX86_BUILTIN_MAXPS512,\n+  IX86_BUILTIN_MAXSD_ROUND,\n+  IX86_BUILTIN_MAXSS_ROUND,\n   IX86_BUILTIN_MINPD512,\n   IX86_BUILTIN_MINPS512,\n+  IX86_BUILTIN_MINSD_ROUND,\n+  IX86_BUILTIN_MINSS_ROUND,\n   IX86_BUILTIN_MOVAPD512,\n   IX86_BUILTIN_MOVAPS512,\n   IX86_BUILTIN_MOVDDUP512,\n@@ -28034,6 +28048,8 @@ enum ix86_builtins\n   IX86_BUILTIN_MOVSLDUP512,\n   IX86_BUILTIN_MULPD512,\n   IX86_BUILTIN_MULPS512,\n+  IX86_BUILTIN_MULSD_ROUND,\n+  IX86_BUILTIN_MULSS_ROUND,\n   IX86_BUILTIN_PABSD512,\n   IX86_BUILTIN_PABSQ512,\n   IX86_BUILTIN_PADDD512,\n@@ -28144,12 +28160,20 @@ enum ix86_builtins\n   IX86_BUILTIN_PXORQ512,\n   IX86_BUILTIN_RCP14PD512,\n   IX86_BUILTIN_RCP14PS512,\n+  IX86_BUILTIN_RCP14SD,\n+  IX86_BUILTIN_RCP14SS,\n   IX86_BUILTIN_RNDSCALEPD,\n   IX86_BUILTIN_RNDSCALEPS,\n+  IX86_BUILTIN_RNDSCALESD,\n+  IX86_BUILTIN_RNDSCALESS,\n   IX86_BUILTIN_RSQRT14PD512,\n   IX86_BUILTIN_RSQRT14PS512,\n+  IX86_BUILTIN_RSQRT14SD,\n+  IX86_BUILTIN_RSQRT14SS,\n   IX86_BUILTIN_SCALEFPD512,\n   IX86_BUILTIN_SCALEFPS512,\n+  IX86_BUILTIN_SCALEFSD,\n+  IX86_BUILTIN_SCALEFSS,\n   IX86_BUILTIN_SHUFPD512,\n   IX86_BUILTIN_SHUFPS512,\n   IX86_BUILTIN_SHUF_F32x4,\n@@ -28160,6 +28184,8 @@ enum ix86_builtins\n   IX86_BUILTIN_SQRTPD512_MASK,\n   IX86_BUILTIN_SQRTPS512_MASK,\n   IX86_BUILTIN_SQRTPS_NR512,\n+  IX86_BUILTIN_SQRTSD_ROUND,\n+  IX86_BUILTIN_SQRTSS_ROUND,\n   IX86_BUILTIN_STOREAPD512,\n   IX86_BUILTIN_STOREAPS512,\n   IX86_BUILTIN_STOREDQUDI512,\n@@ -28168,6 +28194,8 @@ enum ix86_builtins\n   IX86_BUILTIN_STOREUPS512,\n   IX86_BUILTIN_SUBPD512,\n   IX86_BUILTIN_SUBPS512,\n+  IX86_BUILTIN_SUBSD_ROUND,\n+  IX86_BUILTIN_SUBSS_ROUND,\n   IX86_BUILTIN_UCMPD512,\n   IX86_BUILTIN_UCMPQ512,\n   IX86_BUILTIN_UNPCKHPD512,\n@@ -28196,6 +28224,8 @@ enum ix86_builtins\n   IX86_BUILTIN_VFMADDPS512_MASK,\n   IX86_BUILTIN_VFMADDPS512_MASK3,\n   IX86_BUILTIN_VFMADDPS512_MASKZ,\n+  IX86_BUILTIN_VFMADDSD3_ROUND,\n+  IX86_BUILTIN_VFMADDSS3_ROUND,\n   IX86_BUILTIN_VFMADDSUBPD512_MASK,\n   IX86_BUILTIN_VFMADDSUBPD512_MASK3,\n   IX86_BUILTIN_VFMADDSUBPD512_MASKZ,\n@@ -28206,6 +28236,8 @@ enum ix86_builtins\n   IX86_BUILTIN_VFMSUBADDPS512_MASK3,\n   IX86_BUILTIN_VFMSUBPD512_MASK3,\n   IX86_BUILTIN_VFMSUBPS512_MASK3,\n+  IX86_BUILTIN_VFMSUBSD3_MASK3,\n+  IX86_BUILTIN_VFMSUBSS3_MASK3,\n   IX86_BUILTIN_VFNMADDPD512_MASK,\n   IX86_BUILTIN_VFNMADDPS512_MASK,\n   IX86_BUILTIN_VFNMSUBPD512_MASK,\n@@ -29885,8 +29917,12 @@ static const struct builtin_description bdesc_args[] =\n   { OPTION_MASK_ISA_AVX512F, CODE_FOR_xorv8di3_mask, \"__builtin_ia32_pxorq512_mask\", IX86_BUILTIN_PXORQ512, UNKNOWN, (int) V8DI_FTYPE_V8DI_V8DI_V8DI_QI },\n   { OPTION_MASK_ISA_AVX512F, CODE_FOR_rcp14v8df_mask, \"__builtin_ia32_rcp14pd512_mask\", IX86_BUILTIN_RCP14PD512, UNKNOWN, (int) V8DF_FTYPE_V8DF_V8DF_QI },\n   { OPTION_MASK_ISA_AVX512F, CODE_FOR_rcp14v16sf_mask, \"__builtin_ia32_rcp14ps512_mask\", IX86_BUILTIN_RCP14PS512, UNKNOWN, (int) V16SF_FTYPE_V16SF_V16SF_HI },\n+  { OPTION_MASK_ISA_AVX512F, CODE_FOR_srcp14v2df, \"__builtin_ia32_rcp14sd\", IX86_BUILTIN_RCP14SD, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF },\n+  { OPTION_MASK_ISA_AVX512F, CODE_FOR_srcp14v4sf, \"__builtin_ia32_rcp14ss\", IX86_BUILTIN_RCP14SS, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF },\n   { OPTION_MASK_ISA_AVX512F, CODE_FOR_rsqrt14v8df_mask, \"__builtin_ia32_rsqrt14pd512_mask\", IX86_BUILTIN_RSQRT14PD512, UNKNOWN, (int) V8DF_FTYPE_V8DF_V8DF_QI },\n   { OPTION_MASK_ISA_AVX512F, CODE_FOR_rsqrt14v16sf_mask, \"__builtin_ia32_rsqrt14ps512_mask\", IX86_BUILTIN_RSQRT14PS512, UNKNOWN, (int) V16SF_FTYPE_V16SF_V16SF_HI },\n+  { OPTION_MASK_ISA_AVX512F, CODE_FOR_rsqrt14v2df, \"__builtin_ia32_rsqrt14sd\", IX86_BUILTIN_RSQRT14SD, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF },\n+  { OPTION_MASK_ISA_AVX512F, CODE_FOR_rsqrt14v4sf, \"__builtin_ia32_rsqrt14ss\", IX86_BUILTIN_RSQRT14SS, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF },\n   { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_shufpd512_mask, \"__builtin_ia32_shufpd512_mask\", IX86_BUILTIN_SHUFPD512, UNKNOWN, (int) V8DF_FTYPE_V8DF_V8DF_INT_V8DF_QI },\n   { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_shufps512_mask, \"__builtin_ia32_shufps512_mask\", IX86_BUILTIN_SHUFPS512, UNKNOWN, (int) V16SF_FTYPE_V16SF_V16SF_INT_V16SF_HI },\n   { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_shuf_f32x4_mask, \"__builtin_ia32_shuf_f32x4_mask\", IX86_BUILTIN_SHUF_F32x4, UNKNOWN, (int) V16SF_FTYPE_V16SF_V16SF_INT_V16SF_HI },\n@@ -29966,6 +30002,8 @@ static const struct builtin_description bdesc_round_args[] =\n   /* AVX512F */\n   { OPTION_MASK_ISA_AVX512F, CODE_FOR_addv8df3_mask_round, \"__builtin_ia32_addpd512_mask\", IX86_BUILTIN_ADDPD512, UNKNOWN, (int) V8DF_FTYPE_V8DF_V8DF_V8DF_QI_INT },\n   { OPTION_MASK_ISA_AVX512F, CODE_FOR_addv16sf3_mask_round, \"__builtin_ia32_addps512_mask\", IX86_BUILTIN_ADDPS512, UNKNOWN, (int) V16SF_FTYPE_V16SF_V16SF_V16SF_HI_INT },\n+  { OPTION_MASK_ISA_AVX512F, CODE_FOR_sse2_vmaddv2df3_round, \"__builtin_ia32_addsd_round\", IX86_BUILTIN_ADDSD_ROUND, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF_INT },\n+  { OPTION_MASK_ISA_AVX512F, CODE_FOR_sse_vmaddv4sf3_round, \"__builtin_ia32_addss_round\", IX86_BUILTIN_ADDSS_ROUND, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF_INT },\n   { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_cmpv8df3_mask_round, \"__builtin_ia32_cmppd512_mask\", IX86_BUILTIN_CMPPD512, UNKNOWN, (int) QI_FTYPE_V8DF_V8DF_INT_QI_INT },\n   { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_cmpv16sf3_mask_round, \"__builtin_ia32_cmpps512_mask\", IX86_BUILTIN_CMPPS512, UNKNOWN, (int) HI_FTYPE_V16SF_V16SF_INT_HI_INT },\n   { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_vmcmpv2df3_mask_round, \"__builtin_ia32_cmpsd_mask\", IX86_BUILTIN_CMPSD_MASK, UNKNOWN, (int) QI_FTYPE_V2DF_V2DF_INT_QI_INT },\n@@ -29980,9 +30018,11 @@ static const struct builtin_description bdesc_round_args[] =\n   { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_fix_notruncv16sfv16si_mask_round, \"__builtin_ia32_cvtps2dq512_mask\", IX86_BUILTIN_CVTPS2DQ512, UNKNOWN, (int) V16SI_FTYPE_V16SF_V16SI_HI_INT },\n   { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_cvtps2pd512_mask_round, \"__builtin_ia32_cvtps2pd512_mask\", IX86_BUILTIN_CVTPS2PD512, UNKNOWN, (int) V8DF_FTYPE_V8SF_V8DF_QI_INT },\n   { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_ufix_notruncv16sfv16si_mask_round, \"__builtin_ia32_cvtps2udq512_mask\", IX86_BUILTIN_CVTPS2UDQ512, UNKNOWN, (int) V16SI_FTYPE_V16SF_V16SI_HI_INT },\n+  { OPTION_MASK_ISA_AVX512F, CODE_FOR_sse2_cvtsd2ss_round, \"__builtin_ia32_cvtsd2ss_round\", IX86_BUILTIN_CVTSD2SS_ROUND, UNKNOWN, (int) V4SF_FTYPE_V4SF_V2DF_INT },\n   { OPTION_MASK_ISA_AVX512F | OPTION_MASK_ISA_64BIT, CODE_FOR_sse2_cvtsi2sdq_round, \"__builtin_ia32_cvtsi2sd64\", IX86_BUILTIN_CVTSI2SD64, UNKNOWN, (int) V2DF_FTYPE_V2DF_INT64_INT },\n   { OPTION_MASK_ISA_AVX512F, CODE_FOR_sse_cvtsi2ss_round, \"__builtin_ia32_cvtsi2ss32\", IX86_BUILTIN_CVTSI2SS32, UNKNOWN, (int) V4SF_FTYPE_V4SF_INT_INT },\n   { OPTION_MASK_ISA_AVX512F | OPTION_MASK_ISA_64BIT, CODE_FOR_sse_cvtsi2ssq_round, \"__builtin_ia32_cvtsi2ss64\", IX86_BUILTIN_CVTSI2SS64, UNKNOWN, (int) V4SF_FTYPE_V4SF_INT64_INT },\n+  { OPTION_MASK_ISA_AVX512F, CODE_FOR_sse2_cvtss2sd_round, \"__builtin_ia32_cvtss2sd_round\", IX86_BUILTIN_CVTSS2SD_ROUND, UNKNOWN, (int) V2DF_FTYPE_V2DF_V4SF_INT },\n   { OPTION_MASK_ISA_AVX512F, CODE_FOR_fix_truncv8dfv8si2_mask_round, \"__builtin_ia32_cvttpd2dq512_mask\", IX86_BUILTIN_CVTTPD2DQ512, UNKNOWN, (int) V8SI_FTYPE_V8DF_V8SI_QI_INT },\n   { OPTION_MASK_ISA_AVX512F, CODE_FOR_ufix_truncv8dfv8si2_mask_round, \"__builtin_ia32_cvttpd2udq512_mask\", IX86_BUILTIN_CVTTPD2UDQ512, UNKNOWN, (int) V8SI_FTYPE_V8DF_V8SI_QI_INT },\n   { OPTION_MASK_ISA_AVX512F, CODE_FOR_fix_truncv16sfv16si2_mask_round, \"__builtin_ia32_cvttps2dq512_mask\", IX86_BUILTIN_CVTTPS2DQ512, UNKNOWN, (int) V16SI_FTYPE_V16SF_V16SI_HI_INT },\n@@ -29993,6 +30033,8 @@ static const struct builtin_description bdesc_round_args[] =\n   { OPTION_MASK_ISA_AVX512F | OPTION_MASK_ISA_64BIT, CODE_FOR_cvtusi2ss64_round, \"__builtin_ia32_cvtusi2ss64\", IX86_BUILTIN_CVTUSI2SS64, UNKNOWN, (int) V4SF_FTYPE_V4SF_UINT64_INT },\n   { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_divv8df3_mask_round, \"__builtin_ia32_divpd512_mask\", IX86_BUILTIN_DIVPD512, UNKNOWN, (int) V8DF_FTYPE_V8DF_V8DF_V8DF_QI_INT },\n   { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_divv16sf3_mask_round, \"__builtin_ia32_divps512_mask\", IX86_BUILTIN_DIVPS512, UNKNOWN, (int) V16SF_FTYPE_V16SF_V16SF_V16SF_HI_INT },\n+  { OPTION_MASK_ISA_AVX512F, CODE_FOR_sse2_vmdivv2df3_round, \"__builtin_ia32_divsd_round\", IX86_BUILTIN_DIVSD_ROUND, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF_INT },\n+  { OPTION_MASK_ISA_AVX512F, CODE_FOR_sse_vmdivv4sf3_round, \"__builtin_ia32_divss_round\", IX86_BUILTIN_DIVSS_ROUND, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF_INT },\n   { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_fixupimmv8df_mask_round, \"__builtin_ia32_fixupimmpd512_mask\", IX86_BUILTIN_FIXUPIMMPD512_MASK, UNKNOWN, (int) V8DF_FTYPE_V8DF_V8DF_V8DI_INT_QI_INT },\n   { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_fixupimmv8df_maskz_round, \"__builtin_ia32_fixupimmpd512_maskz\", IX86_BUILTIN_FIXUPIMMPD512_MASKZ, UNKNOWN, (int) V8DF_FTYPE_V8DF_V8DF_V8DI_INT_QI_INT },\n   { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_fixupimmv16sf_mask_round, \"__builtin_ia32_fixupimmps512_mask\", IX86_BUILTIN_FIXUPIMMPS512_MASK, UNKNOWN, (int) V16SF_FTYPE_V16SF_V16SF_V16SI_INT_HI_INT },\n@@ -30003,22 +30045,40 @@ static const struct builtin_description bdesc_round_args[] =\n   { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_sfixupimmv4sf_maskz_round, \"__builtin_ia32_fixupimmss_maskz\", IX86_BUILTIN_FIXUPIMMSS128_MASKZ, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF_V4SI_INT_QI_INT },\n   { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_getexpv8df_mask_round, \"__builtin_ia32_getexppd512_mask\", IX86_BUILTIN_GETEXPPD512, UNKNOWN, (int) V8DF_FTYPE_V8DF_V8DF_QI_INT },\n   { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_getexpv16sf_mask_round, \"__builtin_ia32_getexpps512_mask\", IX86_BUILTIN_GETEXPPS512, UNKNOWN, (int) V16SF_FTYPE_V16SF_V16SF_HI_INT },\n+  { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_sgetexpv2df_round, \"__builtin_ia32_getexpsd128_round\", IX86_BUILTIN_GETEXPSD128, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF_INT },\n+  { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_sgetexpv4sf_round, \"__builtin_ia32_getexpss128_round\", IX86_BUILTIN_GETEXPSS128, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF_INT },\n   { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_getmantv8df_mask_round, \"__builtin_ia32_getmantpd512_mask\", IX86_BUILTIN_GETMANTPD512, UNKNOWN, (int) V8DF_FTYPE_V8DF_INT_V8DF_QI_INT },\n   { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_getmantv16sf_mask_round, \"__builtin_ia32_getmantps512_mask\", IX86_BUILTIN_GETMANTPS512, UNKNOWN, (int) V16SF_FTYPE_V16SF_INT_V16SF_HI_INT },\n+  { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_getmantv2df_round, \"__builtin_ia32_getmantsd_round\", IX86_BUILTIN_GETMANTSD128, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF_INT_INT },\n+  { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_getmantv4sf_round, \"__builtin_ia32_getmantss_round\", IX86_BUILTIN_GETMANTSS128, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF_INT_INT },\n   { OPTION_MASK_ISA_AVX512F, CODE_FOR_smaxv8df3_mask_round, \"__builtin_ia32_maxpd512_mask\", IX86_BUILTIN_MAXPD512, UNKNOWN, (int) V8DF_FTYPE_V8DF_V8DF_V8DF_QI_INT },\n   { OPTION_MASK_ISA_AVX512F, CODE_FOR_smaxv16sf3_mask_round, \"__builtin_ia32_maxps512_mask\", IX86_BUILTIN_MAXPS512, UNKNOWN, (int) V16SF_FTYPE_V16SF_V16SF_V16SF_HI_INT },\n+  { OPTION_MASK_ISA_AVX512F, CODE_FOR_sse2_vmsmaxv2df3_round, \"__builtin_ia32_maxsd_round\", IX86_BUILTIN_MAXSD_ROUND, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF_INT },\n+  { OPTION_MASK_ISA_AVX512F, CODE_FOR_sse_vmsmaxv4sf3_round, \"__builtin_ia32_maxss_round\", IX86_BUILTIN_MAXSS_ROUND, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF_INT },\n   { OPTION_MASK_ISA_AVX512F, CODE_FOR_sminv8df3_mask_round, \"__builtin_ia32_minpd512_mask\", IX86_BUILTIN_MINPD512, UNKNOWN, (int) V8DF_FTYPE_V8DF_V8DF_V8DF_QI_INT },\n   { OPTION_MASK_ISA_AVX512F, CODE_FOR_sminv16sf3_mask_round, \"__builtin_ia32_minps512_mask\", IX86_BUILTIN_MINPS512, UNKNOWN, (int) V16SF_FTYPE_V16SF_V16SF_V16SF_HI_INT },\n+  { OPTION_MASK_ISA_AVX512F, CODE_FOR_sse2_vmsminv2df3_round, \"__builtin_ia32_minsd_round\", IX86_BUILTIN_MINSD_ROUND, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF_INT },\n+  { OPTION_MASK_ISA_AVX512F, CODE_FOR_sse_vmsminv4sf3_round, \"__builtin_ia32_minss_round\", IX86_BUILTIN_MINSS_ROUND, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF_INT },\n   { OPTION_MASK_ISA_AVX512F, CODE_FOR_mulv8df3_mask_round, \"__builtin_ia32_mulpd512_mask\", IX86_BUILTIN_MULPD512, UNKNOWN, (int) V8DF_FTYPE_V8DF_V8DF_V8DF_QI_INT },\n   { OPTION_MASK_ISA_AVX512F, CODE_FOR_mulv16sf3_mask_round, \"__builtin_ia32_mulps512_mask\", IX86_BUILTIN_MULPS512, UNKNOWN, (int) V16SF_FTYPE_V16SF_V16SF_V16SF_HI_INT },\n+  { OPTION_MASK_ISA_AVX512F, CODE_FOR_sse2_vmmulv2df3_round, \"__builtin_ia32_mulsd_round\", IX86_BUILTIN_MULSD_ROUND, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF_INT },\n+  { OPTION_MASK_ISA_AVX512F, CODE_FOR_sse_vmmulv4sf3_round, \"__builtin_ia32_mulss_round\", IX86_BUILTIN_MULSS_ROUND, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF_INT },\n   { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_rndscalev8df_mask_round, \"__builtin_ia32_rndscalepd_mask\", IX86_BUILTIN_RNDSCALEPD, UNKNOWN, (int) V8DF_FTYPE_V8DF_INT_V8DF_QI_INT },\n   { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_rndscalev16sf_mask_round, \"__builtin_ia32_rndscaleps_mask\", IX86_BUILTIN_RNDSCALEPS, UNKNOWN, (int) V16SF_FTYPE_V16SF_INT_V16SF_HI_INT },\n+  { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_rndscalev2df_round, \"__builtin_ia32_rndscalesd_round\", IX86_BUILTIN_RNDSCALESD, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF_INT_INT },\n+  { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_rndscalev4sf_round, \"__builtin_ia32_rndscaless_round\", IX86_BUILTIN_RNDSCALESS, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF_INT_INT },\n   { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_scalefv8df_mask_round, \"__builtin_ia32_scalefpd512_mask\", IX86_BUILTIN_SCALEFPD512, UNKNOWN, (int) V8DF_FTYPE_V8DF_V8DF_V8DF_QI_INT },\n   { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_scalefv16sf_mask_round, \"__builtin_ia32_scalefps512_mask\", IX86_BUILTIN_SCALEFPS512, UNKNOWN, (int) V16SF_FTYPE_V16SF_V16SF_V16SF_HI_INT },\n+  { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_vmscalefv2df_round, \"__builtin_ia32_scalefsd_round\", IX86_BUILTIN_SCALEFSD, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF_INT },\n+  { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_vmscalefv4sf_round, \"__builtin_ia32_scalefss_round\", IX86_BUILTIN_SCALEFSS, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF_INT },\n   { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_sqrtv8df2_mask_round, \"__builtin_ia32_sqrtpd512_mask\", IX86_BUILTIN_SQRTPD512_MASK, UNKNOWN, (int) V8DF_FTYPE_V8DF_V8DF_QI_INT },\n   { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_sqrtv16sf2_mask_round, \"__builtin_ia32_sqrtps512_mask\", IX86_BUILTIN_SQRTPS512_MASK, UNKNOWN, (int) V16SF_FTYPE_V16SF_V16SF_HI_INT },\n+  { OPTION_MASK_ISA_AVX512F, CODE_FOR_sse2_vmsqrtv2df2_round, \"__builtin_ia32_sqrtsd_round\", IX86_BUILTIN_SQRTSD_ROUND, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF_INT },\n+  { OPTION_MASK_ISA_AVX512F, CODE_FOR_sse_vmsqrtv4sf2_round, \"__builtin_ia32_sqrtss_round\", IX86_BUILTIN_SQRTSS_ROUND, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF_INT },\n   { OPTION_MASK_ISA_AVX512F, CODE_FOR_subv8df3_mask_round, \"__builtin_ia32_subpd512_mask\", IX86_BUILTIN_SUBPD512, UNKNOWN, (int) V8DF_FTYPE_V8DF_V8DF_V8DF_QI_INT },\n   { OPTION_MASK_ISA_AVX512F, CODE_FOR_subv16sf3_mask_round, \"__builtin_ia32_subps512_mask\", IX86_BUILTIN_SUBPS512, UNKNOWN, (int) V16SF_FTYPE_V16SF_V16SF_V16SF_HI_INT },\n+  { OPTION_MASK_ISA_AVX512F, CODE_FOR_sse2_vmsubv2df3_round, \"__builtin_ia32_subsd_round\", IX86_BUILTIN_SUBSD_ROUND, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF_INT },\n+  { OPTION_MASK_ISA_AVX512F, CODE_FOR_sse_vmsubv4sf3_round, \"__builtin_ia32_subss_round\", IX86_BUILTIN_SUBSS_ROUND, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF_INT },\n   { OPTION_MASK_ISA_AVX512F, CODE_FOR_sse2_cvtsd2si_round, \"__builtin_ia32_vcvtsd2si32\", IX86_BUILTIN_VCVTSD2SI32, UNKNOWN, (int) INT_FTYPE_V2DF_INT },\n   { OPTION_MASK_ISA_AVX512F | OPTION_MASK_ISA_64BIT, CODE_FOR_sse2_cvtsd2siq_round, \"__builtin_ia32_vcvtsd2si64\", IX86_BUILTIN_VCVTSD2SI64, UNKNOWN, (int) INT64_FTYPE_V2DF_INT },\n   { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_vcvtsd2usi_round, \"__builtin_ia32_vcvtsd2usi32\", IX86_BUILTIN_VCVTSD2USI32, UNKNOWN, (int) UINT_FTYPE_V2DF_INT },\n@@ -30041,6 +30101,8 @@ static const struct builtin_description bdesc_round_args[] =\n   { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_fmadd_v16sf_mask_round, \"__builtin_ia32_vfmaddps512_mask\", IX86_BUILTIN_VFMADDPS512_MASK, UNKNOWN, (int) V16SF_FTYPE_V16SF_V16SF_V16SF_HI_INT },\n   { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_fmadd_v16sf_mask3_round, \"__builtin_ia32_vfmaddps512_mask3\", IX86_BUILTIN_VFMADDPS512_MASK3, UNKNOWN, (int) V16SF_FTYPE_V16SF_V16SF_V16SF_HI_INT },\n   { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_fmadd_v16sf_maskz_round, \"__builtin_ia32_vfmaddps512_maskz\", IX86_BUILTIN_VFMADDPS512_MASKZ, UNKNOWN, (int) V16SF_FTYPE_V16SF_V16SF_V16SF_HI_INT },\n+  { OPTION_MASK_ISA_AVX512F, CODE_FOR_fmai_vmfmadd_v2df_round, \"__builtin_ia32_vfmaddsd3_round\", IX86_BUILTIN_VFMADDSD3_ROUND, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF_V2DF_INT },\n+  { OPTION_MASK_ISA_AVX512F, CODE_FOR_fmai_vmfmadd_v4sf_round, \"__builtin_ia32_vfmaddss3_round\", IX86_BUILTIN_VFMADDSS3_ROUND, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF_V4SF_INT },\n   { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_fmaddsub_v8df_mask_round, \"__builtin_ia32_vfmaddsubpd512_mask\", IX86_BUILTIN_VFMADDSUBPD512_MASK, UNKNOWN, (int) V8DF_FTYPE_V8DF_V8DF_V8DF_QI_INT },\n   { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_fmaddsub_v8df_mask3_round, \"__builtin_ia32_vfmaddsubpd512_mask3\", IX86_BUILTIN_VFMADDSUBPD512_MASK3, UNKNOWN, (int) V8DF_FTYPE_V8DF_V8DF_V8DF_QI_INT },\n   { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_fmaddsub_v8df_maskz_round, \"__builtin_ia32_vfmaddsubpd512_maskz\", IX86_BUILTIN_VFMADDSUBPD512_MASKZ, UNKNOWN, (int) V8DF_FTYPE_V8DF_V8DF_V8DF_QI_INT },\n@@ -34070,6 +34132,10 @@ ix86_expand_round_builtin (const struct builtin_description *d,\n     case V4SF_FTYPE_V4SF_INT_INT:\n     case V4SF_FTYPE_V4SF_INT64_INT:\n     case V2DF_FTYPE_V2DF_INT64_INT:\n+    case V4SF_FTYPE_V4SF_V4SF_INT:\n+    case V2DF_FTYPE_V2DF_V2DF_INT:\n+    case V4SF_FTYPE_V4SF_V2DF_INT:\n+    case V2DF_FTYPE_V2DF_V4SF_INT:\n       nargs = 3;\n       break;\n     case V8SF_FTYPE_V8DF_V8SF_QI_INT:\n@@ -34080,6 +34146,13 @@ ix86_expand_round_builtin (const struct builtin_description *d,\n     case V16SI_FTYPE_V16SF_V16SI_HI_INT:\n     case V8DF_FTYPE_V8SF_V8DF_QI_INT:\n     case V16SF_FTYPE_V16HI_V16SF_HI_INT:\n+    case V2DF_FTYPE_V2DF_V2DF_V2DF_INT:\n+    case V4SF_FTYPE_V4SF_V4SF_V4SF_INT:\n+      nargs = 4;\n+      break;\n+    case V4SF_FTYPE_V4SF_V4SF_INT_INT:\n+    case V2DF_FTYPE_V2DF_V2DF_INT_INT:\n+      nargs_constant = 2;\n       nargs = 4;\n       break;\n     case INT_FTYPE_V4SF_V4SF_INT_INT:\n@@ -34143,6 +34216,8 @@ ix86_expand_round_builtin (const struct builtin_description *d,\n \t\t{\n \t\tcase CODE_FOR_avx512f_getmantv8df_mask_round:\n \t\tcase CODE_FOR_avx512f_getmantv16sf_mask_round:\n+\t\tcase CODE_FOR_avx512f_getmantv2df_round:\n+\t\tcase CODE_FOR_avx512f_getmantv4sf_round:\n \t\t  error (\"the immediate argument must be a 4-bit immediate\");\n \t\t  return const0_rtx;\n \t\tcase CODE_FOR_avx512f_cmpv8df3_mask_round:"}, {"sha": "d75edb70870bd79156575743b17de94586792843", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 39, "deletions": 39, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=075691af6b69963626c2e242661f4d39131d6b25", "patch": "@@ -1307,21 +1307,21 @@\n    (set_attr \"prefix\" \"<mask_prefix3>\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"<sse>_vm<plusminus_insn><mode>3\"\n+(define_insn \"<sse>_vm<plusminus_insn><mode>3<round_name>\"\n   [(set (match_operand:VF_128 0 \"register_operand\" \"=x,v\")\n \t(vec_merge:VF_128\n \t  (plusminus:VF_128\n \t    (match_operand:VF_128 1 \"register_operand\" \"0,v\")\n-\t    (match_operand:VF_128 2 \"nonimmediate_operand\" \"xm,vm\"))\n+\t    (match_operand:VF_128 2 \"nonimmediate_operand\" \"xm,<round_constraint>\"))\n \t  (match_dup 1)\n \t  (const_int 1)))]\n   \"TARGET_SSE\"\n   \"@\n    <plusminus_mnemonic><ssescalarmodesuffix>\\t{%2, %0|%0, %<iptr>2}\n-   v<plusminus_mnemonic><ssescalarmodesuffix>\\t{%2, %1, %0|%0, %1, %<iptr>2}\"\n+   v<plusminus_mnemonic><ssescalarmodesuffix>\\t{<round_op3>%2, %1, %0|%0, %1, %<iptr>2<round_op3>}\"\n   [(set_attr \"isa\" \"noavx,avx\")\n    (set_attr \"type\" \"sseadd\")\n-   (set_attr \"prefix\" \"orig,vex\")\n+   (set_attr \"prefix\" \"<round_prefix>\")\n    (set_attr \"mode\" \"<ssescalarmode>\")])\n \n (define_expand \"mul<mode>3<mask_name><round_name>\"\n@@ -1347,21 +1347,21 @@\n    (set_attr \"btver2_decode\" \"direct,double\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"<sse>_vm<multdiv_mnemonic><mode>3\"\n+(define_insn \"<sse>_vm<multdiv_mnemonic><mode>3<round_name>\"\n   [(set (match_operand:VF_128 0 \"register_operand\" \"=x,v\")\n \t(vec_merge:VF_128\n \t  (multdiv:VF_128\n \t    (match_operand:VF_128 1 \"register_operand\" \"0,v\")\n-\t    (match_operand:VF_128 2 \"nonimmediate_operand\" \"xm,vm\"))\n+\t    (match_operand:VF_128 2 \"nonimmediate_operand\" \"xm,<round_constraint>\"))\n \t  (match_dup 1)\n \t  (const_int 1)))]\n   \"TARGET_SSE\"\n   \"@\n    <multdiv_mnemonic><ssescalarmodesuffix>\\t{%2, %0|%0, %<iptr>2}\n-   v<multdiv_mnemonic><ssescalarmodesuffix>\\t{%2, %1, %0|%0, %1, %<iptr>2}\"\n+   v<multdiv_mnemonic><ssescalarmodesuffix>\\t{<round_op3>%2, %1, %0|%0, %1, %<iptr>2<round_op3>}\"\n   [(set_attr \"isa\" \"noavx,avx\")\n    (set_attr \"type\" \"sse<multdiv_mnemonic>\")\n-   (set_attr \"prefix\" \"orig,vex\")\n+   (set_attr \"prefix\" \"<round_prefix>\")\n    (set_attr \"btver2_decode\" \"direct,double\")\n    (set_attr \"mode\" \"<ssescalarmode>\")])\n \n@@ -1447,7 +1447,7 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"*srcp14<mode>\"\n+(define_insn \"srcp14<mode>\"\n   [(set (match_operand:VF_128 0 \"register_operand\" \"=v\")\n \t(vec_merge:VF_128\n \t  (unspec:VF_128\n@@ -1457,7 +1457,7 @@\n \t  (match_dup 1)\n \t  (const_int 1)))]\n   \"TARGET_AVX512F\"\n-  \"vrcp14<ssescalarmodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n+  \"vrcp14<ssescalarmodesuffix>\\t{%2, %1, %0|, %1, %2}\"\n   [(set_attr \"type\" \"sse\")\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<MODE>\")])\n@@ -1494,21 +1494,21 @@\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"<sse>_vmsqrt<mode>2\"\n+(define_insn \"<sse>_vmsqrt<mode>2<round_name>\"\n   [(set (match_operand:VF_128 0 \"register_operand\" \"=x,v\")\n \t(vec_merge:VF_128\n \t  (sqrt:VF_128\n-\t    (match_operand:VF_128 1 \"nonimmediate_operand\" \"xm,vm\"))\n+\t    (match_operand:VF_128 1 \"nonimmediate_operand\" \"xm,<round_constraint>\"))\n \t  (match_operand:VF_128 2 \"register_operand\" \"0,v\")\n \t  (const_int 1)))]\n   \"TARGET_SSE\"\n   \"@\n    sqrt<ssescalarmodesuffix>\\t{%1, %0|%0, %<iptr>1}\n-   vsqrt<ssescalarmodesuffix>\\t{%1, %2, %0|%0, %2, %<iptr>1}\"\n+   vsqrt<ssescalarmodesuffix>\\t{<round_op3>%1, %2, %0|%0, %2, %<iptr>1<round_op3>}\"\n   [(set_attr \"isa\" \"noavx,avx\")\n    (set_attr \"type\" \"sse\")\n    (set_attr \"atom_sse_attr\" \"sqrt\")\n-   (set_attr \"prefix\" \"orig,vex\")\n+   (set_attr \"prefix\" \"<round_prefix>\")\n    (set_attr \"btver2_sse_attr\" \"sqrt\")\n    (set_attr \"mode\" \"<ssescalarmode>\")])\n \n@@ -1543,7 +1543,7 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"*rsqrt14<mode>\"\n+(define_insn \"rsqrt14<mode>\"\n   [(set (match_operand:VF_128 0 \"register_operand\" \"=v\")\n \t(vec_merge:VF_128\n \t  (unspec:VF_128\n@@ -1624,22 +1624,22 @@\n    (set_attr \"prefix\" \"<mask_prefix3>\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"<sse>_vm<code><mode>3\"\n+(define_insn \"<sse>_vm<code><mode>3<round_saeonly_name>\"\n   [(set (match_operand:VF_128 0 \"register_operand\" \"=x,v\")\n \t(vec_merge:VF_128\n \t  (smaxmin:VF_128\n \t    (match_operand:VF_128 1 \"register_operand\" \"0,v\")\n-\t    (match_operand:VF_128 2 \"nonimmediate_operand\" \"xm,vm\"))\n+\t    (match_operand:VF_128 2 \"nonimmediate_operand\" \"xm,<round_saeonly_constraint>\"))\n \t (match_dup 1)\n \t (const_int 1)))]\n   \"TARGET_SSE\"\n   \"@\n    <maxmin_float><ssescalarmodesuffix>\\t{%2, %0|%0, %<iptr>2}\n-   v<maxmin_float><ssescalarmodesuffix>\\t{%2, %1, %0|%0, %1, %<iptr>2}\"\n+   v<maxmin_float><ssescalarmodesuffix>\\t{<round_saeonly_op3>%2, %1, %0|%0, %1, %<iptr>2<round_saeonly_op3>}\"\n   [(set_attr \"isa\" \"noavx,avx\")\n    (set_attr \"type\" \"sse\")\n    (set_attr \"btver2_sse_attr\" \"maxmin\")\n-   (set_attr \"prefix\" \"orig,vex\")\n+   (set_attr \"prefix\" \"<round_saeonly_prefix>\")\n    (set_attr \"mode\" \"<ssescalarmode>\")])\n \n ;; These versions of the min/max patterns implement exactly the operations\n@@ -4108,49 +4108,49 @@\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"TI\")])\n \n-(define_insn \"sse2_cvtsd2ss\"\n+(define_insn \"sse2_cvtsd2ss<round_name>\"\n   [(set (match_operand:V4SF 0 \"register_operand\" \"=x,x,v\")\n \t(vec_merge:V4SF\n \t  (vec_duplicate:V4SF\n \t    (float_truncate:V2SF\n-\t      (match_operand:V2DF 2 \"nonimmediate_operand\" \"x,m,vm\")))\n+\t      (match_operand:V2DF 2 \"nonimmediate_operand\" \"x,m,<round_constraint>\")))\n \t  (match_operand:V4SF 1 \"register_operand\" \"0,0,v\")\n \t  (const_int 1)))]\n   \"TARGET_SSE2\"\n   \"@\n    cvtsd2ss\\t{%2, %0|%0, %2}\n    cvtsd2ss\\t{%2, %0|%0, %q2}\n-   vcvtsd2ss\\t{%2, %1, %0|%0, %1, %q2}\"\n+   vcvtsd2ss\\t{<round_op3>%2, %1, %0|%0, %1, %q2<round_op3>}\"\n   [(set_attr \"isa\" \"noavx,noavx,avx\")\n    (set_attr \"type\" \"ssecvt\")\n    (set_attr \"athlon_decode\" \"vector,double,*\")\n    (set_attr \"amdfam10_decode\" \"vector,double,*\")\n    (set_attr \"bdver1_decode\" \"direct,direct,*\")\n    (set_attr \"btver2_decode\" \"double,double,double\")\n-   (set_attr \"prefix\" \"orig,orig,vex\")\n+   (set_attr \"prefix\" \"orig,orig,<round_prefix>\")\n    (set_attr \"mode\" \"SF\")])\n \n-(define_insn \"sse2_cvtss2sd\"\n+(define_insn \"sse2_cvtss2sd<round_saeonly_name>\"\n   [(set (match_operand:V2DF 0 \"register_operand\" \"=x,x,v\")\n \t(vec_merge:V2DF\n \t  (float_extend:V2DF\n \t    (vec_select:V2SF\n-\t      (match_operand:V4SF 2 \"nonimmediate_operand\" \"x,m,vm\")\n+\t      (match_operand:V4SF 2 \"nonimmediate_operand\" \"x,m,<round_saeonly_constraint>\")\n \t      (parallel [(const_int 0) (const_int 1)])))\n \t  (match_operand:V2DF 1 \"register_operand\" \"0,0,v\")\n \t  (const_int 1)))]\n   \"TARGET_SSE2\"\n   \"@\n    cvtss2sd\\t{%2, %0|%0, %2}\n    cvtss2sd\\t{%2, %0|%0, %k2}\n-   vcvtss2sd\\t{%2, %1, %0|%0, %1, %k2}\"\n+   vcvtss2sd\\t{<round_saeonly_op3>%2, %1, %0|%0, %1, %k2<round_saeonly_op3>}\"\n   [(set_attr \"isa\" \"noavx,noavx,avx\")\n    (set_attr \"type\" \"ssecvt\")\n    (set_attr \"amdfam10_decode\" \"vector,double,*\")\n    (set_attr \"athlon_decode\" \"direct,direct,*\")\n    (set_attr \"bdver1_decode\" \"direct,direct,*\")\n    (set_attr \"btver2_decode\" \"double,double,double\")\n-   (set_attr \"prefix\" \"orig,orig,vex\")\n+   (set_attr \"prefix\" \"orig,orig,<round_saeonly_prefix>\")\n    (set_attr \"mode\" \"DF\")])\n \n (define_insn \"<mask_codefor>avx512f_cvtpd2ps512<mask_name><round_name>\"\n@@ -6553,17 +6553,17 @@\n   operands[1] = adjust_address (operands[1], DFmode, INTVAL (operands[2]) * 8);\n })\n \n-(define_insn \"*avx512f_vmscalef<mode>\"\n+(define_insn \"avx512f_vmscalef<mode><round_name>\"\n   [(set (match_operand:VF_128 0 \"register_operand\" \"=v\")\n \t(vec_merge:VF_128\n \t  (unspec:VF_128\n \t    [(match_operand:VF_128 1 \"register_operand\" \"v\")\n-\t     (match_operand:VF_128 2 \"nonimmediate_operand\" \"vm\")]\n+\t     (match_operand:VF_128 2 \"nonimmediate_operand\" \"<round_constraint>\")]\n \t    UNSPEC_SCALEF)\n \t  (match_dup 1)\n \t  (const_int 1)))]\n   \"TARGET_AVX512F\"\n-  \"%vscalef<ssescalarmodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n+  \"%vscalef<ssescalarmodesuffix>\\t{<round_op3>%2, %1, %0|%0, %1, %2<round_op3>}\"\n   [(set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\"  \"<ssescalarmode>\")])\n \n@@ -6633,17 +6633,17 @@\n     [(set_attr \"prefix\" \"evex\")\n      (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"avx512f_sgetexp<mode>\"\n+(define_insn \"avx512f_sgetexp<mode><round_saeonly_name>\"\n   [(set (match_operand:VF_128 0 \"register_operand\" \"=v\")\n \t(vec_merge:VF_128\n \t  (unspec:VF_128\n \t    [(match_operand:VF_128 1 \"register_operand\" \"v\")\n-\t     (match_operand:VF_128 2 \"nonimmediate_operand\" \"vm\")]\n+\t     (match_operand:VF_128 2 \"nonimmediate_operand\" \"<round_saeonly_constraint>\")]\n \t    UNSPEC_GETEXP)\n \t  (match_dup 1)\n \t  (const_int 1)))]\n    \"TARGET_AVX512F\"\n-   \"vgetexp<ssescalarmodesuffix>\\t{%2, %1, %0|%0, %1, %2}\";\n+   \"vgetexp<ssescalarmodesuffix>\\t{<round_saeonly_op3>%2, %1, %0|%0, %1, %2<round_saeonly_op3>}\";\n     [(set_attr \"prefix\" \"evex\")\n      (set_attr \"mode\" \"<ssescalarmode>\")])\n \n@@ -6798,18 +6798,18 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"*avx512f_rndscale<mode>\"\n+(define_insn \"avx512f_rndscale<mode><round_saeonly_name>\"\n   [(set (match_operand:VF_128 0 \"register_operand\" \"=v\")\n \t(vec_merge:VF_128\n \t  (unspec:VF_128\n \t    [(match_operand:VF_128 1 \"register_operand\" \"v\")\n-\t     (match_operand:VF_128 2 \"nonimmediate_operand\" \"vm\")\n+\t     (match_operand:VF_128 2 \"nonimmediate_operand\" \"<round_saeonly_constraint>\")\n \t     (match_operand:SI 3 \"const_0_to_255_operand\")]\n \t    UNSPEC_ROUND)\n \t  (match_dup 1)\n \t  (const_int 1)))]\n   \"TARGET_AVX512F\"\n-  \"vrndscale<ssescalarmodesuffix>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n+  \"vrndscale<ssescalarmodesuffix>\\t{%3, <round_saeonly_op4>%2, %1, %0|%0, %1, %2<round_saeonly_op4>, %3}\"\n   [(set_attr \"length_immediate\" \"1\")\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<MODE>\")])\n@@ -15184,18 +15184,18 @@\n   [(set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"avx512f_getmant<mode>\"\n+(define_insn \"avx512f_getmant<mode><round_saeonly_name>\"\n   [(set (match_operand:VF_128 0 \"register_operand\" \"=v\")\n \t(vec_merge:VF_128\n \t  (unspec:VF_128\n \t    [(match_operand:VF_128 1 \"register_operand\" \"v\")\n-\t     (match_operand:VF_128 2 \"nonimmediate_operand\" \"vm\")\n+\t     (match_operand:VF_128 2 \"nonimmediate_operand\" \"<round_saeonly_constraint>\")\n \t     (match_operand:SI 3 \"const_0_to_15_operand\")]\n \t    UNSPEC_GETMANT)\n \t  (match_dup 1)\n \t  (const_int 1)))]\n    \"TARGET_AVX512F\"\n-   \"vgetmant<ssescalarmodesuffix>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\";\n+   \"vgetmant<ssescalarmodesuffix>\\t{%3, <round_saeonly_op4>%2, %1, %0|%0, %1, %2<round_saeonly_op4>, %3}\";\n    [(set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<ssescalarmode>\")])\n "}, {"sha": "487b749255b5364b5e321aae6ee07853d9d185b9", "filename": "gcc/config/i386/subst.md", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Fconfig%2Fi386%2Fsubst.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Fconfig%2Fi386%2Fsubst.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsubst.md?ref=075691af6b69963626c2e242661f4d39131d6b25", "patch": "@@ -51,7 +51,7 @@\n (define_subst_attr \"mask_operand18\" \"mask\" \"\" \"%{%19%}%N18\")\n (define_subst_attr \"mask_operand19\" \"mask\" \"\" \"%{%20%}%N19\")\n (define_subst_attr \"mask_codefor\" \"mask\" \"*\" \"\")\n-(define_subst_attr \"mask_mode512bit_condition\" \"mask\" \"1\" \"(GET_MODE_SIZE (GET_MODE (operands[0])) == 64)\")\n+(define_subst_attr \"mask_mode512bit_condition\" \"mask\" \"1\" \"(GET_MODE_SIZE (<MODE>mode) == 64)\")\n (define_subst_attr \"store_mask_constraint\" \"mask\" \"vm\" \"v\")\n (define_subst_attr \"store_mask_predicate\" \"mask\" \"nonimmediate_operand\" \"register_operand\")\n (define_subst_attr \"mask_prefix\" \"mask\" \"vex\" \"evex\")\n@@ -85,7 +85,7 @@\n (define_subst_attr \"sd_mask_op4\" \"sd\" \"\" \"%{%5%}%N4\")\n (define_subst_attr \"sd_mask_op5\" \"sd\" \"\" \"%{%6%}%N5\")\n (define_subst_attr \"sd_mask_codefor\" \"sd\" \"*\" \"\")\n-(define_subst_attr \"sd_mask_mode512bit_condition\" \"sd\" \"1\" \"(GET_MODE_SIZE (GET_MODE (operands[0])) == 64)\")\n+(define_subst_attr \"sd_mask_mode512bit_condition\" \"sd\" \"1\" \"(GET_MODE_SIZE (<MODE>mode) == 64)\")\n \n (define_subst \"sd\"\n  [(set (match_operand:SUBST_V 0)\n@@ -101,7 +101,6 @@\n (define_subst_attr \"round_name\" \"round\" \"\" \"_round\")\n (define_subst_attr \"round_mask_operand2\" \"mask\" \"%R2\" \"%R4\")\n (define_subst_attr \"round_mask_operand3\" \"mask\" \"%R3\" \"%R5\")\n-(define_subst_attr \"round_mask_scalar_operand3\" \"mask_scalar\" \"%R3\" \"%R5\")\n (define_subst_attr \"round_sd_mask_operand4\" \"sd\" \"%R4\" \"%R6\")\n (define_subst_attr \"round_op2\" \"round\" \"\" \"%R2\")\n (define_subst_attr \"round_op3\" \"round\" \"\" \"%R3\")\n@@ -116,8 +115,9 @@\n (define_subst_attr \"round_constraint2\" \"round\" \"m\" \"v\")\n (define_subst_attr \"round_constraint3\" \"round\" \"rm\" \"r\")\n (define_subst_attr \"round_nimm_predicate\" \"round\" \"nonimmediate_operand\" \"register_operand\")\n-(define_subst_attr \"round_mode512bit_condition\" \"round\" \"1\" \"(GET_MODE (operands[0]) == V16SFmode || GET_MODE (operands[0]) == V8DFmode)\")\n-(define_subst_attr \"round_modev4sf_condition\" \"round\" \"1\" \"(GET_MODE (operands[0]) == V4SFmode)\")\n+(define_subst_attr \"round_prefix\" \"round\" \"vex\" \"evex\")\n+(define_subst_attr \"round_mode512bit_condition\" \"round\" \"1\" \"(<MODE>mode == V16SFmode || <MODE>mode == V8DFmode)\")\n+(define_subst_attr \"round_modev4sf_condition\" \"round\" \"1\" \"(<MODE>mode == V4SFmode)\")\n (define_subst_attr \"round_codefor\" \"round\" \"*\" \"\")\n (define_subst_attr \"round_opnum\" \"round\" \"5\" \"6\")\n \n@@ -138,9 +138,11 @@\n (define_subst_attr \"round_saeonly_mask_scalar_merge_operand4\" \"mask_scalar_merge\" \"%R4\" \"%R5\")\n (define_subst_attr \"round_saeonly_sd_mask_operand5\" \"sd\" \"%R5\" \"%R7\")\n (define_subst_attr \"round_saeonly_op2\" \"round_saeonly\" \"\" \"%R2\")\n+(define_subst_attr \"round_saeonly_op3\" \"round_saeonly\" \"\" \"%R3\")\n (define_subst_attr \"round_saeonly_op4\" \"round_saeonly\" \"\" \"%R4\")\n (define_subst_attr \"round_saeonly_op5\" \"round_saeonly\" \"\" \"%R5\")\n (define_subst_attr \"round_saeonly_op6\" \"round_saeonly\" \"\" \"%R6\")\n+(define_subst_attr \"round_saeonly_prefix\" \"round_saeonly\" \"vex\" \"evex\")\n (define_subst_attr \"round_saeonly_mask_op2\" \"round_saeonly\" \"\" \"<round_saeonly_mask_operand2>\")\n (define_subst_attr \"round_saeonly_mask_op3\" \"round_saeonly\" \"\" \"<round_saeonly_mask_operand3>\")\n (define_subst_attr \"round_saeonly_mask_scalar_op3\" \"round_saeonly\" \"\" \"<round_saeonly_mask_scalar_operand3>\")"}, {"sha": "74c8179807558f5a50c573190cabbf24ed40fa10", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=075691af6b69963626c2e242661f4d39131d6b25", "patch": "@@ -3,6 +3,71 @@\n \tPR tree-optimization/59622\n \t* g++.dg/opt/pr59622.C: New test.\n \n+2013-12-31  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n+\t    Maxim Kuznetsov  <maxim.kuznetsov@intel.com>\n+\t    Sergey Lega  <sergey.s.lega@intel.com>\n+\t    Anna Tikhonova  <anna.tikhonova@intel.com>\n+\t    Ilya Tocar  <ilya.tocar@intel.com>\n+\t    Andrey Turetskiy  <andrey.turetskiy@intel.com>\n+\t    Ilya Verbin  <ilya.verbin@intel.com>\n+\t    Kirill Yukhin  <kirill.yukhin@intel.com>\n+\t    Michael Zolotukhin  <michael.v.zolotukhin@intel.com>\n+\n+\t* gcc.target/i386/avx-1.c: Update for AVX-512 scalar insns.\n+\t* gcc.target/i386/avx512f-vaddsd-1.c: New.\n+\t* gcc.target/i386/avx512f-vaddss-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vcvtsd2ss-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vcvtss2sd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vdivsd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vdivss-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vextractf32x4-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vextracti32x4-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vfmaddXXXsd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vfmaddXXXss-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vfmsubXXXsd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vfmsubXXXss-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vfnmaddXXXsd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vfnmaddXXXss-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vfnmsubXXXsd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vfnmsubXXXss-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vgetexpsd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vgetexpsd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vgetexpss-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vgetexpss-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vgetmantsd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vgetmantsd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vgetmantss-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vgetmantss-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vmaxsd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vmaxss-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vminsd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vminss-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vmulsd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vmulss-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vrcp14sd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vrcp14sd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vrcp14ss-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vrcp14ss-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vrndscalesd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vrndscalesd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vrndscaless-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vrndscaless-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vrsqrt14sd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vrsqrt14sd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vrsqrt14ss-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vrsqrt14ss-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vscalefsd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vscalefsd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vscalefss-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vscalefss-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vsqrtsd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vsqrtss-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vsubsd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vsubss-1.c: Ditto.\n+\t* gcc.target/i386/sse-14.c: Update for AVX-512 scalar insns.\n+\t* gcc.target/i386/sse-23.c: Ditto.\n+\t* gcc.target/i386/testimm-10.c: Ditto.\n+\n 2013-12-31  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n \t    Maxim Kuznetsov  <maxim.kuznetsov@intel.com>\n \t    Sergey Lega  <sergey.s.lega@intel.com>"}, {"sha": "72015925b285fd7fdb36730fbe75c7c87c298c33", "filename": "gcc/testsuite/gcc.target/i386/avx-1.c", "status": "modified", "additions": 26, "deletions": 12, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c?ref=075691af6b69963626c2e242661f4d39131d6b25", "patch": "@@ -169,6 +169,8 @@\n /* avx512fintrin.h */\n #define __builtin_ia32_addpd512_mask(A, B, C, D, E) __builtin_ia32_addpd512_mask(A, B, C, D, 1)\n #define __builtin_ia32_addps512_mask(A, B, C, D, E) __builtin_ia32_addps512_mask(A, B, C, D, 1)\n+#define __builtin_ia32_addsd_round(A, B, C) __builtin_ia32_addsd_round(A, B, 1)\n+#define __builtin_ia32_addss_round(A, B, C) __builtin_ia32_addss_round(A, B, 1)\n #define __builtin_ia32_alignd512_mask(A, B, F, D, E) __builtin_ia32_alignd512_mask(A, B, 1, D, E)\n #define __builtin_ia32_alignq512_mask(A, B, F, D, E) __builtin_ia32_alignq512_mask(A, B, 1, D, E)\n #define __builtin_ia32_cmpd512_mask(A, B, E, D) __builtin_ia32_cmpd512_mask(A, B, 1, D)\n@@ -184,11 +186,11 @@\n #define __builtin_ia32_cvtps2dq512_mask(A, B, C, D) __builtin_ia32_cvtps2dq512_mask(A, B, C, 1)\n #define __builtin_ia32_cvtps2pd512_mask(A, B, C, D) __builtin_ia32_cvtps2pd512_mask(A, B, C, 5)\n #define __builtin_ia32_cvtps2udq512_mask(A, B, C, D) __builtin_ia32_cvtps2udq512_mask(A, B, C, 1)\n-#define __builtin_ia32_cvtsd2ss_mask(A, B, C, D, E) __builtin_ia32_cvtsd2ss_mask(A, B, C, D, 1)\n+#define __builtin_ia32_cvtsd2ss_round(A, B, C) __builtin_ia32_cvtsd2ss_round(A, B, 1)\n+#define __builtin_ia32_cvtss2sd_round(A, B, C) __builtin_ia32_cvtss2sd_round(A, B, 4)\n #define __builtin_ia32_cvtsi2sd64(A, B, C) __builtin_ia32_cvtsi2sd64(A, B, 1)\n #define __builtin_ia32_cvtsi2ss32(A, B, C) __builtin_ia32_cvtsi2ss32(A, B, 1)\n #define __builtin_ia32_cvtsi2ss64(A, B, C) __builtin_ia32_cvtsi2ss64(A, B, 1)\n-#define __builtin_ia32_cvtss2sd_mask(A, B, C, D, E) __builtin_ia32_cvtss2sd_mask(A, B, C, D, 5)\n #define __builtin_ia32_cvttpd2dq512_mask(A, B, C, D) __builtin_ia32_cvttpd2dq512_mask(A, B, C, 5)\n #define __builtin_ia32_cvttpd2udq512_mask(A, B, C, D) __builtin_ia32_cvttpd2udq512_mask(A, B, C, 5)\n #define __builtin_ia32_cvttps2dq512_mask(A, B, C, D) __builtin_ia32_cvttps2dq512_mask(A, B, C, 5)\n@@ -199,6 +201,8 @@\n #define __builtin_ia32_cvtusi2ss64(A, B, C) __builtin_ia32_cvtusi2ss64(A, B, 1)\n #define __builtin_ia32_divpd512_mask(A, B, C, D, E) __builtin_ia32_divpd512_mask(A, B, C, D, 1)\n #define __builtin_ia32_divps512_mask(A, B, C, D, E) __builtin_ia32_divps512_mask(A, B, C, D, 1)\n+#define __builtin_ia32_divsd_round(A, B, C) __builtin_ia32_divsd_round(A, B, 1)\n+#define __builtin_ia32_divss_round(A, B, C) __builtin_ia32_divss_round(A, B, 1)\n #define __builtin_ia32_extractf32x4_mask(A, E, C, D) __builtin_ia32_extractf32x4_mask(A, 1, C, D)\n #define __builtin_ia32_extractf64x4_mask(A, E, C, D) __builtin_ia32_extractf64x4_mask(A, 1, C, D)\n #define __builtin_ia32_extracti32x4_mask(A, E, C, D) __builtin_ia32_extracti32x4_mask(A, 1, C, D)\n@@ -221,18 +225,28 @@\n #define __builtin_ia32_gathersiv8di(A, B, C, D, F) __builtin_ia32_gathersiv8di(A, B, C, D, 1)\n #define __builtin_ia32_getexppd512_mask(A, B, C, D) __builtin_ia32_getexppd512_mask(A, B, C, 5)\n #define __builtin_ia32_getexpps512_mask(A, B, C, D) __builtin_ia32_getexpps512_mask(A, B, C, 5)\n+#define __builtin_ia32_getexpsd128_round(A, B, C) __builtin_ia32_getexpsd128_round(A, B, 4)\n+#define __builtin_ia32_getexpss128_round(A, B, C) __builtin_ia32_getexpss128_round(A, B, 4)\n #define __builtin_ia32_getmantpd512_mask(A, F, C, D, E) __builtin_ia32_getmantpd512_mask(A, 1, C, D, 5)\n #define __builtin_ia32_getmantps512_mask(A, F, C, D, E) __builtin_ia32_getmantps512_mask(A, 1, C, D, 5)\n+#define __builtin_ia32_getmantsd_round(A, B, C, D) __builtin_ia32_getmantsd_round(A, B, 1, 4)\n+#define __builtin_ia32_getmantss_round(A, B, C, D) __builtin_ia32_getmantss_round(A, B, 1, 4)\n #define __builtin_ia32_insertf32x4_mask(A, B, F, D, E) __builtin_ia32_insertf32x4_mask(A, B, 1, D, E)\n #define __builtin_ia32_insertf64x4_mask(A, B, F, D, E) __builtin_ia32_insertf64x4_mask(A, B, 1, D, E)\n #define __builtin_ia32_inserti32x4_mask(A, B, F, D, E) __builtin_ia32_inserti32x4_mask(A, B, 1, D, E)\n #define __builtin_ia32_inserti64x4_mask(A, B, F, D, E) __builtin_ia32_inserti64x4_mask(A, B, 1, D, E)\n #define __builtin_ia32_maxpd512_mask(A, B, C, D, E) __builtin_ia32_maxpd512_mask(A, B, C, D, 5)\n #define __builtin_ia32_maxps512_mask(A, B, C, D, E) __builtin_ia32_maxps512_mask(A, B, C, D, 5)\n+#define __builtin_ia32_maxsd_round(A, B, C) __builtin_ia32_maxsd_round(A, B, 4)\n+#define __builtin_ia32_maxss_round(A, B, C) __builtin_ia32_maxss_round(A, B, 4)\n #define __builtin_ia32_minpd512_mask(A, B, C, D, E) __builtin_ia32_minpd512_mask(A, B, C, D, 5)\n #define __builtin_ia32_minps512_mask(A, B, C, D, E) __builtin_ia32_minps512_mask(A, B, C, D, 5)\n+#define __builtin_ia32_minsd_round(A, B, C) __builtin_ia32_minsd_round(A, B, 4)\n+#define __builtin_ia32_minss_round(A, B, C) __builtin_ia32_minss_round(A, B, 4)\n #define __builtin_ia32_mulpd512_mask(A, B, C, D, E) __builtin_ia32_mulpd512_mask(A, B, C, D, 1)\n #define __builtin_ia32_mulps512_mask(A, B, C, D, E) __builtin_ia32_mulps512_mask(A, B, C, D, 1)\n+#define __builtin_ia32_mulsd_round(A, B, C) __builtin_ia32_mulsd_round(A, B, 1)\n+#define __builtin_ia32_mulss_round(A, B, C) __builtin_ia32_mulss_round(A, B, 1)\n #define __builtin_ia32_permdf512_mask(A, E, C, D) __builtin_ia32_permdf512_mask(A, 1, C, D)\n #define __builtin_ia32_permdi512_mask(A, E, C, D) __builtin_ia32_permdi512_mask(A, 1, C, D)\n #define __builtin_ia32_prold512_mask(A, E, C, D) __builtin_ia32_prold512_mask(A, 1, C, D)\n@@ -252,10 +266,12 @@\n #define __builtin_ia32_pternlogq512_maskz(A, B, C, F, E) __builtin_ia32_pternlogq512_maskz(A, B, C, 1, E)\n #define __builtin_ia32_rndscalepd_mask(A, F, C, D, E) __builtin_ia32_rndscalepd_mask(A, 1, C, D, 5)\n #define __builtin_ia32_rndscaleps_mask(A, F, C, D, E) __builtin_ia32_rndscaleps_mask(A, 1, C, D, 5)\n-#define __builtin_ia32_rndscalesd_mask(A, B, I, D, E, F) __builtin_ia32_rndscalesd_mask(A, B, 1, D, E, 5)\n-#define __builtin_ia32_rndscaless_mask(A, B, I, D, E, F) __builtin_ia32_rndscaless_mask(A, B, 1, D, E, 5)\n+#define __builtin_ia32_rndscalesd_round(A, B, C, D) __builtin_ia32_rndscalesd_round(A, B, 1, 4)\n+#define __builtin_ia32_rndscaless_round(A, B, C, D) __builtin_ia32_rndscaless_round(A, B, 1, 4)\n #define __builtin_ia32_scalefpd512_mask(A, B, C, D, E) __builtin_ia32_scalefpd512_mask(A, B, C, D, 1)\n #define __builtin_ia32_scalefps512_mask(A, B, C, D, E) __builtin_ia32_scalefps512_mask(A, B, C, D, 1)\n+#define __builtin_ia32_scalefsd_round(A, B, C) __builtin_ia32_scalefsd_round(A, B, 1)\n+#define __builtin_ia32_scalefss_round(A, B, C) __builtin_ia32_scalefss_round(A, B, 1)\n #define __builtin_ia32_scatterdiv8df(A, B, C, D, F) __builtin_ia32_scatterdiv8df(A, B, C, D, 1)\n #define __builtin_ia32_scatterdiv8di(A, B, C, D, F) __builtin_ia32_scatterdiv8di(A, B, C, D, 1)\n #define __builtin_ia32_scatterdiv16sf(A, B, C, D, F) __builtin_ia32_scatterdiv16sf(A, B, C, D, 1)\n@@ -272,10 +288,12 @@\n #define __builtin_ia32_shufps512_mask(A, B, F, D, E) __builtin_ia32_shufps512_mask(A, B, 1, D, E)\n #define __builtin_ia32_sqrtpd512_mask(A, B, C, D) __builtin_ia32_sqrtpd512_mask(A, B, C, 1)\n #define __builtin_ia32_sqrtps512_mask(A, B, C, D) __builtin_ia32_sqrtps512_mask(A, B, C, 1)\n-#define __builtin_ia32_sqrtsd_mask(A, B, C, D, E) __builtin_ia32_sqrtsd_mask(A, B, C, D, 1)\n-#define __builtin_ia32_sqrtss_mask(A, B, C, D, E) __builtin_ia32_sqrtss_mask(A, B, C, D, 1)\n+#define __builtin_ia32_sqrtss_round(A, B, C) __builtin_ia32_sqrtss_round(A, B, 1)\n+#define __builtin_ia32_sqrtsd_round(A, B, C) __builtin_ia32_sqrtsd_round(A, B, 1)\n #define __builtin_ia32_subpd512_mask(A, B, C, D, E) __builtin_ia32_subpd512_mask(A, B, C, D, 1)\n #define __builtin_ia32_subps512_mask(A, B, C, D, E) __builtin_ia32_subps512_mask(A, B, C, D, 1)\n+#define __builtin_ia32_subsd_round(A, B, C) __builtin_ia32_subsd_round(A, B, 1)\n+#define __builtin_ia32_subss_round(A, B, C) __builtin_ia32_subss_round(A, B, 1)\n #define __builtin_ia32_ucmpd512_mask(A, B, E, D) __builtin_ia32_ucmpd512_mask(A, B, 1, D)\n #define __builtin_ia32_ucmpq512_mask(A, B, E, D) __builtin_ia32_ucmpq512_mask(A, B, 1, D)\n #define __builtin_ia32_vcomisd(A, B, C, D) __builtin_ia32_vcomisd(A, B, 1, 5)\n@@ -304,12 +322,8 @@\n #define __builtin_ia32_vfmaddps512_mask(A, B, C, D, E) __builtin_ia32_vfmaddps512_mask(A, B, C, D, 1)\n #define __builtin_ia32_vfmaddps512_mask3(A, B, C, D, E) __builtin_ia32_vfmaddps512_mask3(A, B, C, D, 1)\n #define __builtin_ia32_vfmaddps512_maskz(A, B, C, D, E) __builtin_ia32_vfmaddps512_maskz(A, B, C, D, 1)\n-#define __builtin_ia32_vfmaddsd3_mask(A, B, C, D, E) __builtin_ia32_vfmaddsd3_mask(A, B, C, D, 1)\n-#define __builtin_ia32_vfmaddsd3_mask3(A, B, C, D, E) __builtin_ia32_vfmaddsd3_mask3(A, B, C, D, 1)\n-#define __builtin_ia32_vfmaddsd3_maskz(A, B, C, D, E) __builtin_ia32_vfmaddsd3_maskz(A, B, C, D, 1)\n-#define __builtin_ia32_vfmaddss3_mask(A, B, C, D, E) __builtin_ia32_vfmaddss3_mask(A, B, C, D, 1)\n-#define __builtin_ia32_vfmaddss3_mask3(A, B, C, D, E) __builtin_ia32_vfmaddss3_mask3(A, B, C, D, 1)\n-#define __builtin_ia32_vfmaddss3_maskz(A, B, C, D, E) __builtin_ia32_vfmaddss3_maskz(A, B, C, D, 1)\n+#define __builtin_ia32_vfmaddsd3_round(A, B, C, D) __builtin_ia32_vfmaddsd3_round(A, B, C, 1)\n+#define __builtin_ia32_vfmaddss3_round(A, B, C, D) __builtin_ia32_vfmaddss3_round(A, B, C, 1)\n #define __builtin_ia32_vfmaddsubpd512_mask(A, B, C, D, E) __builtin_ia32_vfmaddsubpd512_mask(A, B, C, D, 1)\n #define __builtin_ia32_vfmaddsubpd512_mask3(A, B, C, D, E) __builtin_ia32_vfmaddsubpd512_mask3(A, B, C, D, 1)\n #define __builtin_ia32_vfmaddsubpd512_maskz(A, B, C, D, E) __builtin_ia32_vfmaddsubpd512_maskz(A, B, C, D, 1)"}, {"sha": "f0bc5cecc5d5fe41b6d9774bfff25872031e1b6b", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vaddsd-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vaddsd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vaddsd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vaddsd-1.c?ref=075691af6b69963626c2e242661f4d39131d6b25", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vaddsd\\[ \\\\t\\]+\\[^\\n\\]*\\{rn-sae\\}\\[^\\n\\]*%xmm\\[0-9\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128d x1, x2;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x1 = _mm_add_round_sd (x1, x2, _MM_FROUND_TO_NEAREST_INT);\n+}"}, {"sha": "5a8491cfd203ad677d7a668f92f290d321cb8279", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vaddss-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vaddss-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vaddss-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vaddss-1.c?ref=075691af6b69963626c2e242661f4d39131d6b25", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vaddss\\[ \\\\t\\]+\\[^\\n\\]*\\{rn-sae\\}\\[^\\n\\]*%xmm\\[0-9\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128 x1, x2;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x1 = _mm_add_round_ss (x1, x2, _MM_FROUND_TO_NEAREST_INT);\n+}"}, {"sha": "8cb51c42a990e9b39218ef146da7229edc49b4cf", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcvtsd2ss-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtsd2ss-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtsd2ss-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtsd2ss-1.c?ref=075691af6b69963626c2e242661f4d39131d6b25", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vcvtsd2ss\\[ \\\\t\\]+\\[^\\n\\]*\\{rn-sae\\}\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\{\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128 s1, r;\n+volatile __m128d s2;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  r = _mm_cvt_roundsd_ss (s1, s2, _MM_FROUND_TO_NEAREST_INT);\n+}"}, {"sha": "5b6a43f5471b93112dbfd6a48e02f0cf633c94bf", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcvtss2sd-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtss2sd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtss2sd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcvtss2sd-1.c?ref=075691af6b69963626c2e242661f4d39131d6b25", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vcvtss2sd\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\{\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128d s1, r;\n+volatile __m128 s2;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  r = _mm_cvt_roundss_sd (s1, s2, _MM_FROUND_NO_EXC);\n+}"}, {"sha": "95df56cc2f3f20edc43da4f56351242601b64f8a", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vdivsd-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vdivsd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vdivsd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vdivsd-1.c?ref=075691af6b69963626c2e242661f4d39131d6b25", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vdivsd\\[ \\\\t\\]+\\[^\\n\\]*\\{rn-sae\\}\\[^\\n\\]*%xmm\\[0-9\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128d x1, x2;\n+volatile __mmask8 m;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x1 = _mm_div_round_sd (x1, x2, _MM_FROUND_TO_NEAREST_INT);\n+}"}, {"sha": "5c6eb947ad0b18e6cca8e6a1a61636348fa6cf55", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vdivss-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vdivss-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vdivss-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vdivss-1.c?ref=075691af6b69963626c2e242661f4d39131d6b25", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vdivss\\[ \\\\t\\]+\\[^\\n\\]*\\{rn-sae\\}\\[^\\n\\]*%xmm\\[0-9\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128 x1, x2;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x1 = _mm_div_round_ss (x1, x2, _MM_FROUND_TO_NEAREST_INT);\n+}"}, {"sha": "35377b4302a22166e28bd8d6a8f6f6c80a7f908b", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vextractf32x4-2.c", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vextractf32x4-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vextractf32x4-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vextractf32x4-2.c?ref=075691af6b69963626c2e242661f4d39131d6b25", "patch": "@@ -0,0 +1,56 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#define AVX512F\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 32)\n+#include \"avx512f-mask-type.h\"\n+#include \"string.h\"\n+\n+void\n+CALC (UNION_TYPE (AVX512F_LEN,) s1, float *res_ref, int mask)\n+{\n+  memset (res_ref, 0, 16);\n+  memcpy (res_ref, s1.a + mask * 4, 16);\n+}\n+\n+void static\n+TEST (void)\n+{\n+  UNION_TYPE (AVX512F_LEN,) s1;\n+  union128 res1, res2, res3;\n+  float res_ref[4];\n+  MASK_TYPE mask = MASK_VALUE;\n+  int j;\n+\n+  for (j = 0; j < SIZE; j++)\n+    {\n+      s1.a[j] = j * j / 4.56;\n+    }\n+\n+  for (j = 0; j < 4; j++)\n+    {\n+      res1.a[j] = DEFAULT_VALUE;\n+      res2.a[j] = DEFAULT_VALUE;\n+      res3.a[j] = DEFAULT_VALUE;\n+    }\n+\n+  res1.x = INTRINSIC (_extractf32x4_ps) (s1.x, 1);\n+  res2.x = INTRINSIC (_mask_extractf32x4_ps) (res2.x, mask, s1.x, 1);\n+  res3.x = INTRINSIC (_maskz_extractf32x4_ps) (mask, s1.x, 1);\n+  CALC (s1, res_ref, 1);\n+\n+  if (check_union128 (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE ()(res_ref, mask, 4);\n+  if (check_union128 (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO ()(res_ref, mask, 4);\n+  if (check_union128 (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "1ea77b034227ec0cad2e95ed3c9b1f27b5058920", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vextracti32x4-2.c", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vextracti32x4-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vextracti32x4-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vextracti32x4-2.c?ref=075691af6b69963626c2e242661f4d39131d6b25", "patch": "@@ -0,0 +1,57 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#define AVX512F\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 32)\n+#include \"avx512f-mask-type.h\"\n+#include \"string.h\"\n+\n+void\n+CALC (UNION_TYPE (AVX512F_LEN, i_d) s1, int *res_ref, int mask)\n+{\n+  memset (res_ref, 0, 16);\n+  memcpy (res_ref, s1.a + mask * 4, 16);\n+}\n+\n+void static\n+TEST (void)\n+{\n+  UNION_TYPE (AVX512F_LEN, i_d) s1;\n+  union128i_d res1, res2, res3;\n+  int res_ref[4];\n+  MASK_TYPE mask = MASK_VALUE;\n+  int j;\n+\n+  for (j = 0; j < SIZE; j++)\n+    {\n+      s1.a[j] = j * j / 4.56;\n+    }\n+\n+  for (j = 0; j < 4; j++)\n+    {\n+      res1.a[j] = DEFAULT_VALUE;\n+      res2.a[j] = DEFAULT_VALUE;\n+      res3.a[j] = DEFAULT_VALUE;\n+    }\n+\n+  res1.x = INTRINSIC (_extracti32x4_epi32) (s1.x, 1);\n+  res2.x =\n+    INTRINSIC (_mask_extracti32x4_epi32) (res2.x, mask, s1.x, 1);\n+  res3.x = INTRINSIC (_maskz_extracti32x4_epi32) (mask, s1.x, 1);\n+  CALC (s1, res_ref, 1);\n+\n+  if (check_union128i_d (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (i_d) (res_ref, mask, 4);\n+  if (check_union128i_d (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_d) (res_ref, mask, 4);\n+  if (check_union128i_d (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "ea8b17c58b0c3264703598f57b8f0a6374624061", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vfmaddXXXsd-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmaddXXXsd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmaddXXXsd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmaddXXXsd-1.c?ref=075691af6b69963626c2e242661f4d39131d6b25", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vfmadd...sd\\[ \\\\t\\]+\\[^\\n\\]*\\{rn-sae\\}\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\{\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128d a, b, c;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  a = _mm_fmadd_round_sd (a, b, c, _MM_FROUND_TO_NEAREST_INT);\n+}"}, {"sha": "cd44fb47d5f5f7c262adf88e8398043e62f90ef6", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vfmaddXXXss-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmaddXXXss-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmaddXXXss-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmaddXXXss-1.c?ref=075691af6b69963626c2e242661f4d39131d6b25", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vfmadd...ss\\[ \\\\t\\]+\\[^\\n\\]*\\{rn-sae\\}\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\{\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128 a, b, c;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  a = _mm_fmadd_round_ss (a, b, c, _MM_FROUND_TO_NEAREST_INT);\n+}"}, {"sha": "2d78df6f8e6968ff7686f447a3c247a9c1aaf6e7", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vfmsubXXXsd-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmsubXXXsd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmsubXXXsd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmsubXXXsd-1.c?ref=075691af6b69963626c2e242661f4d39131d6b25", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vfmsub...sd\\[ \\\\t\\]+\\[^\\n\\]*\\{rn-sae\\}\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\{\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128d a, b, c;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  a = _mm_fmsub_round_sd (a, b, c, _MM_FROUND_TO_NEAREST_INT);\n+}"}, {"sha": "b7609f58ec41a47fe09165582a8b0bb372c960d2", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vfmsubXXXss-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmsubXXXss-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmsubXXXss-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfmsubXXXss-1.c?ref=075691af6b69963626c2e242661f4d39131d6b25", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vfmsub...ss\\[ \\\\t\\]+\\[^\\n\\]*\\{rn-sae\\}\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\{\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128 a, b, c;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  a = _mm_fmsub_round_ss (a, b, c, _MM_FROUND_TO_NEAREST_INT);\n+}"}, {"sha": "e938236d402583368f83e2503ea0f63f2188803d", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vfnmaddXXXsd-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfnmaddXXXsd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfnmaddXXXsd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfnmaddXXXsd-1.c?ref=075691af6b69963626c2e242661f4d39131d6b25", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vfnmadd...sd\\[ \\\\t\\]+\\[^\\n\\]*\\{rn-sae\\}\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\{\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128d a, b, c;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  a = _mm_fnmadd_round_sd (a, b, c, _MM_FROUND_TO_NEAREST_INT);\n+}"}, {"sha": "f5752e4b77db89a39f41888bbcfffe3d0d25c480", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vfnmaddXXXss-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfnmaddXXXss-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfnmaddXXXss-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfnmaddXXXss-1.c?ref=075691af6b69963626c2e242661f4d39131d6b25", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vfnmadd...ss\\[ \\\\t\\]+\\[^\\n\\]*\\{rn-sae\\}\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\{\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128 a, b, c;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  a = _mm_fnmadd_round_ss (a, b, c, _MM_FROUND_TO_NEAREST_INT);\n+}"}, {"sha": "931b5d4abc40724163e9a19ef6f2eaf26f0c0e1a", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vfnmsubXXXsd-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfnmsubXXXsd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfnmsubXXXsd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfnmsubXXXsd-1.c?ref=075691af6b69963626c2e242661f4d39131d6b25", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vfnmsub...sd\\[ \\\\t\\]+\\[^\\n\\]*\\{rn-sae\\}\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\{\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128d a, b, c;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  a = _mm_fnmsub_round_sd (a, b, c, _MM_FROUND_TO_NEAREST_INT);\n+}"}, {"sha": "f097f1a99770bcf9fe7b161870219b59e8198962", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vfnmsubXXXss-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfnmsubXXXss-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfnmsubXXXss-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vfnmsubXXXss-1.c?ref=075691af6b69963626c2e242661f4d39131d6b25", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vfnmsub...ss\\[ \\\\t\\]+\\[^\\n\\]*\\{rn-sae\\}\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\{\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128 a, b, c;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  a = _mm_fnmsub_round_ss (a, b, c, _MM_FROUND_TO_NEAREST_INT);\n+}"}, {"sha": "952ed5460951f7b2938a5738d746144a112ce7c6", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vgetexpsd-1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vgetexpsd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vgetexpsd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vgetexpsd-1.c?ref=075691af6b69963626c2e242661f4d39131d6b25", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vgetexpsd\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\, %xmm\\[0-9\\]\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vgetexpsd\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%xmm\\[0-9\\]\\, %xmm\\[0-9\\]\\[^\\{\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128d x;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x = _mm_getexp_sd (x, x);\n+  x = _mm_getexp_round_sd (x, x, _MM_FROUND_NO_EXC);\n+}"}, {"sha": "c1e5e5f22021cf44e9d2c1aca6d9f7d0a930bf37", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vgetexpsd-2.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vgetexpsd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vgetexpsd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vgetexpsd-2.c?ref=075691af6b69963626c2e242661f4d39131d6b25", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#define SIZE (128 / 64)\n+\n+#include <math.h>\n+#include \"avx512f-check.h\"\n+#include \"avx512f-helper.h\"\n+\n+static void\n+compute_vgetexpsd (double *s, double *r)\n+{\n+  r[0] = floor (log (s[0]) / log (2));\n+}\n+\n+void static\n+avx512f_test (void)\n+{\n+  int i;\n+  union128d res1, s1;\n+  double res_ref[SIZE];\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      s1.a[i] = 5.0 - i;\n+      res_ref[i] = s1.a[i];\n+    }\n+\n+  res1.x = _mm_getexp_sd (s1.x, s1.x);\n+\n+  compute_vgetexpsd (s1.a, res_ref);\n+\n+  if (check_fp_union128d (res1, res_ref))\n+    abort ();\n+}"}, {"sha": "d946a4788dcb49ccc1e59e397f92feddc9f6cc73", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vgetexpss-1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vgetexpss-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vgetexpss-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vgetexpss-1.c?ref=075691af6b69963626c2e242661f4d39131d6b25", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vgetexpss\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\, %xmm\\[0-9\\]\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vgetexpss\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%xmm\\[0-9\\]\\, %xmm\\[0-9\\]\\[^\\{\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128 x;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x = _mm_getexp_ss (x, x);\n+  x = _mm_getexp_round_ss (x, x, _MM_FROUND_NO_EXC);\n+}"}, {"sha": "39d77c7a0262b178cf61d0c356904c3bedb8d636", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vgetexpss-2.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vgetexpss-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vgetexpss-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vgetexpss-2.c?ref=075691af6b69963626c2e242661f4d39131d6b25", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#define SIZE (128 / 32)\n+\n+#include <math.h>\n+#include \"avx512f-check.h\"\n+#include \"avx512f-helper.h\"\n+\n+static void\n+compute_vgetexpss (float *s, float *r)\n+{\n+  r[0] = floor (log (s[0]) / log (2));\n+}\n+\n+void static\n+avx512f_test (void)\n+{\n+  int i;\n+  union128 res1, s1;\n+  float res_ref[SIZE];\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      s1.a[i] = 5.0 - i;\n+      res_ref[i] = s1.a[i];\n+    }\n+\n+  res1.x = _mm_getexp_ss (s1.x, s1.x);\n+\n+  compute_vgetexpss (s1.a, res_ref);\n+\n+  if (check_fp_union128 (res1, res_ref))\n+    abort ();\n+}"}, {"sha": "4b252a41619327585adaacae5889d858f4ec5228", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vgetmantsd-1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vgetmantsd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vgetmantsd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vgetmantsd-1.c?ref=075691af6b69963626c2e242661f4d39131d6b25", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-final { scan-assembler-times \"vgetmantsd\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[\\\\n\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vgetmantsd\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%xmm\\[0-9\\]\\[\\\\n\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128d x, y, z;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x = _mm_getmant_sd (y, z, _MM_MANT_NORM_p75_1p5, _MM_MANT_SIGN_src);\n+  x = _mm_getmant_round_sd (y, z, _MM_MANT_NORM_p75_1p5, _MM_MANT_SIGN_src,\n+\t\t\t    _MM_FROUND_NO_EXC);\n+}"}, {"sha": "50d98a45df4cda75f0ded4351b8178256bbef66f", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vgetmantsd-2.c", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vgetmantsd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vgetmantsd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vgetmantsd-2.c?ref=075691af6b69963626c2e242661f4d39131d6b25", "patch": "@@ -0,0 +1,94 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include \"avx512f-check.h\"\n+#include \"avx512f-helper.h\"\n+#include <math.h>\n+\n+union fp_int_t\n+{\n+  long long int int_val;\n+  double fp_val;\n+};\n+\n+double\n+get_norm_mant (double source, int signctrl, int interv)\n+{\n+  long long src, sign, exp, fraction;\n+\n+  union fp_int_t bin_conv;\n+\n+  bin_conv.fp_val = source;\n+  src = bin_conv.int_val;\n+  sign = (signctrl & 0x1) ? 0 : (src >> 63);\n+  exp = (src & 0x7ff0000000000000) >> 52;\n+  fraction = (src & 0xfffffffffffff);\n+\n+  if (isnan (source))\n+    return signbit (source) ? -NAN : NAN;\n+  if (source == 0.0 || source == -0.0 || isinf (source))\n+    return sign ? -1.0 : 1.0;\n+  if (signbit (source) && (signctrl & 0x2))\n+    return -NAN;\n+  if (!isnormal (source))\n+    {\n+      src = (src & 0xfff7ffffffffffff);\n+      exp = 0x3ff;\n+      while (!(src & 0x8000000000000))\n+\t{\n+\t  src += fraction & 0x8000000000000;\n+\t  fraction = fraction << 1;\n+\t  exp--;\n+\t}\n+    }\n+\n+  switch (interv)\n+    {\n+    case 0:\n+      exp = 0x3ff;\n+      break;\n+    case 1:\n+      exp = ((exp - 0x3ff) & 0x1) ? 0x3fe : 0x3ff;\n+      break;\n+    case 2:\n+      exp = 0x3fe;\n+      break;\n+    case 3:\n+      exp = (fraction & 0x8000000000000) ? 0x3fe : 0x3ff;\n+      break;\n+    default:\n+      abort ();\n+    }\n+\n+  bin_conv.int_val = (sign << 63) | (exp << 52) | fraction;\n+  return bin_conv.fp_val;\n+}\n+\n+static void\n+compute_vgetmantsd (double *r, double *s1, double *s2, int interv,\n+\t\t    int signctrl)\n+{\n+  r[0] = get_norm_mant (s2[0], signctrl, interv);\n+  r[1] = s1[1];\n+}\n+\n+static void\n+avx512f_test (void)\n+{\n+  int i, sign;\n+  union128d res1, src1, src2;\n+  double res_ref[2];\n+  int interv = _MM_MANT_NORM_p5_1;\n+  int signctrl = _MM_MANT_SIGN_src;\n+\n+  src1.x = _mm_set_pd (-3.0, 111.111);\n+  src2.x = _mm_set_pd (222.222, -2.0);\n+\n+  res1.x = _mm_getmant_sd (src1.x, src2.x, interv, signctrl);\n+\n+  compute_vgetmantsd (res_ref, src1.a, src2.a, interv, signctrl);\n+\n+  if (check_union128d (res1, res_ref))\n+    abort ();\n+}"}, {"sha": "30c837b6fabac0dcfaf445837709f8e4e452c688", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vgetmantss-1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vgetmantss-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vgetmantss-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vgetmantss-1.c?ref=075691af6b69963626c2e242661f4d39131d6b25", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-final { scan-assembler-times \"vgetmantss\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[\\\\n\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vgetmantss\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%xmm\\[0-9\\]\\[\\\\n\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128 x, y, z;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x = _mm_getmant_ss (y, z, _MM_MANT_NORM_p75_1p5, _MM_MANT_SIGN_src);\n+  x = _mm_getmant_round_ss (y, z, _MM_MANT_NORM_p75_1p5, _MM_MANT_SIGN_src,\n+\t\t      _MM_FROUND_NO_EXC);\n+}"}, {"sha": "291c0df77e79298e1d29d83c410b86b2b2e75a1c", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vgetmantss-2.c", "status": "added", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vgetmantss-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vgetmantss-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vgetmantss-2.c?ref=075691af6b69963626c2e242661f4d39131d6b25", "patch": "@@ -0,0 +1,99 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include \"avx512f-check.h\"\n+#include \"avx512f-helper.h\"\n+#include <math.h>\n+\n+union fp_int_t\n+{\n+  int int_val;\n+  float fp_val;\n+};\n+\n+float\n+get_norm_mant (float source, int signctrl, int interv)\n+{\n+  int src, sign, exp, fraction;\n+  union fp_int_t bin_conv;\n+\n+  bin_conv.fp_val = source;\n+  src = bin_conv.int_val;\n+  sign = (signctrl & 0x1) ? 0 : (src >> 31);\n+  exp = (src & 0x7f800000) >> 23;\n+  fraction = (src & 0x7fffff);\n+\n+  if (isnan (source))\n+    return signbit (source) ? -NAN : NAN;\n+  if (source == 0.0 || source == -0.0 || isinf (source))\n+    return sign ? -1.0 : 1.0;\n+  if (signbit (source) && (signctrl & 0x2))\n+    return -NAN;\n+  if (!isnormal (source))\n+    {\n+      src = (src & 0xffbfffff);\n+      exp = 0x7f;\n+      while (!(src & 0x400000))\n+\t{\n+\t  src += fraction & 0x400000;\n+\t  fraction = fraction << 1;\n+\t  exp--;\n+\t}\n+    }\n+\n+  switch (interv)\n+    {\n+    case 0:\n+      exp = 0x7f;\n+      break;\n+    case 1:\n+      exp = ((exp - 0x7f) & 0x1) ? 0x7e : 0x7f;\n+      break;\n+    case 2:\n+      exp = 0x7e;\n+      break;\n+    case 3:\n+      exp = (fraction & 0x400000) ? 0x7e : 0x7f;\n+      break;\n+    default:\n+      abort ();\n+    }\n+\n+  bin_conv.int_val = (sign << 31) | (exp << 23) | fraction;\n+\n+  return bin_conv.fp_val;\n+\n+}\n+\n+static void\n+compute_vgetmantss (float *r, float *s1, float *s2, int interv,\n+\t\t    int signctrl)\n+{\n+  int i;\n+  r[0] = get_norm_mant (s2[0], signctrl, interv);\n+  for (i = 1; i < 4; i++)\n+    {\n+      r[i] = s1[i];\n+    }\n+}\n+\n+static void\n+avx512f_test (void)\n+{\n+  int i, sign;\n+  union128 res1, src1, src2;\n+  float res_ref[4];\n+  int interv = _MM_MANT_NORM_p5_1;\n+  int signctrl = _MM_MANT_SIGN_src;\n+\n+  src1.x = _mm_set_ps (-24.043, 68.346, -43.35, 546.46);\n+  src2.x = _mm_set_ps (222.222, 333.333, 444.444, -2.0);\n+\n+  res1.x = _mm_getmant_ss (src1.x, src2.x, interv, signctrl);\n+\n+  compute_vgetmantss (res_ref, src1.a, src2.a, interv, signctrl);\n+\n+  if (check_union128 (res1, res_ref))\n+    abort ();\n+}"}, {"sha": "8c2470442347eb78387ec80d12aa8aca07d90b3f", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vmaxsd-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmaxsd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmaxsd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmaxsd-1.c?ref=075691af6b69963626c2e242661f4d39131d6b25", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vmaxsd\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\{\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128d x1, x2;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x1 = _mm_max_round_sd (x1, x2, _MM_FROUND_NO_EXC);\n+}"}, {"sha": "027445db32d0d591617f1d3eec63dff5cd266843", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vmaxss-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmaxss-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmaxss-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmaxss-1.c?ref=075691af6b69963626c2e242661f4d39131d6b25", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vmaxss\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%xmm\\[0-9\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128 x1, x2;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x1 = _mm_max_round_ss (x1, x2, _MM_FROUND_NO_EXC);\n+}"}, {"sha": "8f8488f8b11ab108edc3b2c21d31081c2cdfdc9c", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vminsd-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vminsd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vminsd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vminsd-1.c?ref=075691af6b69963626c2e242661f4d39131d6b25", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vminsd\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\{\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128d x1, x2;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x1 = _mm_min_round_sd (x1, x2, _MM_FROUND_NO_EXC);\n+}"}, {"sha": "0774b75771dabcf7e92bbfec76fe013da84a621b", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vminss-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vminss-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vminss-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vminss-1.c?ref=075691af6b69963626c2e242661f4d39131d6b25", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vminss\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\{\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128 x1, x2;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x1 = _mm_min_round_ss (x1, x2, _MM_FROUND_NO_EXC);\n+}"}, {"sha": "c85832aaa41e9373f5016f7fce43eb668ac93f27", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vmulsd-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmulsd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmulsd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmulsd-1.c?ref=075691af6b69963626c2e242661f4d39131d6b25", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vmulsd\\[ \\\\t\\]+\\[^\\n\\]*\\{rn-sae\\}\\[^\\n\\]*%xmm\\[0-9\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128d x1, x2;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x1 = _mm_mul_round_sd (x1, x2, _MM_FROUND_TO_NEAREST_INT);\n+}"}, {"sha": "cb4bf0a2d2e90a2036ad0397e57f7f69a551ecfe", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vmulss-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmulss-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmulss-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmulss-1.c?ref=075691af6b69963626c2e242661f4d39131d6b25", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vmulss\\[ \\\\t\\]+\\[^\\n\\]*\\{rn-sae\\}\\[^\\n\\]*%xmm\\[0-9\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128 x1, x2;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x1 = _mm_mul_round_ss (x1, x2, _MM_FROUND_TO_NEAREST_INT);\n+}"}, {"sha": "c0c8d038cc3ab0c237ab06772f943e780a1f2eb2", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vrcp14sd-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vrcp14sd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vrcp14sd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vrcp14sd-1.c?ref=075691af6b69963626c2e242661f4d39131d6b25", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vrcp14sd\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\{\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128d x1, x2;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x1 = _mm_rcp14_sd (x1, x2);\n+}"}, {"sha": "9ff3541d85ca1c2467f8ab64b0dd920faf35c222", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vrcp14sd-2.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vrcp14sd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vrcp14sd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vrcp14sd-2.c?ref=075691af6b69963626c2e242661f4d39131d6b25", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include \"avx512f-check.h\"\n+#include \"avx512f-helper.h\"\n+\n+static void\n+compute_vrcp14sd (double *s1, double *s2, double *r)\n+{\n+  r[0] = 1.0 / s2[0];\n+  r[1] = s1[1];\n+}\n+\n+static void\n+avx512f_test (void)\n+{\n+  union128d s1, s2, res1, res2, res3;\n+  double res_ref[2];\n+\n+  s1.x = _mm_set_pd (-3.0, 111.111);\n+  s2.x = _mm_set_pd (222.222, -2.0);\n+  res2.a[0] = DEFAULT_VALUE;\n+\n+  res1.x = _mm_rcp14_sd (s1.x, s2.x);\n+\n+  compute_vrcp14sd (s1.a, s2.a, res_ref);\n+\n+  if (check_union128d (res1, res_ref))\n+    abort ();\n+}"}, {"sha": "580dfd6a52d0c47f4b71d1684ec92ff588ff1a0b", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vrcp14ss-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vrcp14ss-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vrcp14ss-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vrcp14ss-1.c?ref=075691af6b69963626c2e242661f4d39131d6b25", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vrcp14ss\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\{\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128 x1, x2;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x1 = _mm_rcp14_ss (x1, x2);\n+}"}, {"sha": "fe8989aeb501b2793d782b11fc66b201ef1d020a", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vrcp14ss-2.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vrcp14ss-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vrcp14ss-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vrcp14ss-2.c?ref=075691af6b69963626c2e242661f4d39131d6b25", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include \"avx512f-check.h\"\n+#include \"avx512f-helper.h\"\n+\n+static void\n+compute_vrcp14ss (float *s1, float *s2, float *r)\n+{\n+  r[0] = 1.0 / s2[0];\n+  r[1] = s1[1];\n+  r[2] = s1[2];\n+  r[3] = s1[3];\n+}\n+\n+static void\n+avx512f_test (void)\n+{\n+  union128 s1, s2, res1, res2, res3;\n+  float res_ref[4];\n+\n+  s1.x = _mm_set_ps (-24.043, 68.346, -43.35, 546.46);\n+  s2.x = _mm_set_ps (222.222, 333.333, 444.444, -2.0);\n+  res2.a[0] = DEFAULT_VALUE;\n+\n+  res1.x = _mm_rcp14_ss (s1.x, s2.x);\n+\n+  compute_vrcp14ss (s1.a, s2.a, res_ref);\n+\n+  if (check_union128 (res1, res_ref))\n+    abort ();\n+}"}, {"sha": "2f370a92722f302a89c6437a89301c7302864815", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vrndscalesd-1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vrndscalesd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vrndscalesd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vrndscalesd-1.c?ref=075691af6b69963626c2e242661f4d39131d6b25", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vrndscalesd\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vrndscalesd\\[ \\\\t\\]+\\\\S*,\\[ \\\\t\\]+\\{sae\\}\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\{\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128d x1, x2;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x1 = _mm_roundscale_sd (x1, x2, 0x42);\n+  x1 = _mm_roundscale_round_sd (x1, x2, 0x42, _MM_FROUND_NO_EXC);\n+}"}, {"sha": "5b4e8423cadd482f23724ca6e54af1027aa84622", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vrndscalesd-2.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vrndscalesd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vrndscalesd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vrndscalesd-2.c?ref=075691af6b69963626c2e242661f4d39131d6b25", "patch": "@@ -0,0 +1,50 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#define SIZE (128 / 64)\n+\n+#include <math.h>\n+#include \"avx512f-check.h\"\n+#include \"avx512f-helper.h\"\n+\n+static void\n+compute_rndscalesd (double *s1, double *s2, double *r, int imm)\n+{\n+  int rc, m;\n+  rc = imm & 0xf;\n+  m = imm >> 4;\n+\n+  switch (rc)\n+    {\n+    case _MM_FROUND_FLOOR:\n+      r[0] = floor (s2[0] * pow (2, m)) / pow (2, m);\n+      break;\n+    case _MM_FROUND_CEIL:\n+      r[0] = ceil (s2[0] * pow (2, m)) / pow (2, m);\n+      break;\n+    default:\n+      abort ();\n+      break;\n+    }\n+\n+  r[1] = s1[1];\n+}\n+\n+static void\n+avx512f_test (void)\n+{\n+  int imm = _MM_FROUND_FLOOR | (7 << 4);\n+  union128d s1, s2, res1;\n+  double res_ref[SIZE];\n+\n+  s1.x = _mm_set_pd (4.05084, -1.23162);\n+  s2.x = _mm_set_pd (-3.53222, 7.33527);\n+\n+  res1.x = _mm_roundscale_sd (s1.x, s2.x, imm);\n+\n+  compute_rndscalesd (s1.a, s2.a, res_ref, imm);\n+\n+  if (check_union128d (res1, res_ref))\n+    abort ();\n+}"}, {"sha": "c9f5a753d2853ddd6bf59453dd7a3e165768bbda", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vrndscaless-1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vrndscaless-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vrndscaless-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vrndscaless-1.c?ref=075691af6b69963626c2e242661f4d39131d6b25", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vrndscaless\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vrndscaless\\[ \\\\t\\]+\\\\S*,\\[ \\\\t\\]+\\{sae\\}\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\{\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128 x1, x2;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x1 = _mm_roundscale_ss (x1, x2, 0x42);\n+  x1 = _mm_roundscale_round_ss (x1, x2, 0x42, _MM_FROUND_NO_EXC);\n+}"}, {"sha": "7acfe4c2a46944b5d512d36dffe70987f07a1210", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vrndscaless-2.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vrndscaless-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vrndscaless-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vrndscaless-2.c?ref=075691af6b69963626c2e242661f4d39131d6b25", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#define SIZE (128 / 32)\n+\n+#include <math.h>\n+#include \"avx512f-check.h\"\n+#include \"avx512f-helper.h\"\n+\n+static void\n+compute_rndscaless (float *s1, float *s2, float *r, int imm)\n+{\n+  int rc, m;\n+  rc = imm & 0xf;\n+  m = imm >> 4;\n+\n+  switch (rc)\n+    {\n+    case _MM_FROUND_FLOOR:\n+      r[0] = floorf (s2[0] * pow (2, m)) / pow (2, m);\n+      break;\n+    case _MM_FROUND_CEIL:\n+      r[0] = ceilf (s2[0] * pow (2, m)) / pow (2, m);\n+      break;\n+    default:\n+      abort ();\n+      break;\n+    }\n+\n+  r[1] = s1[1];\n+  r[2] = s1[2];\n+  r[3] = s1[3];\n+}\n+\n+static void\n+avx512f_test (void)\n+{\n+  int imm = _MM_FROUND_FLOOR | (7 << 4);\n+  union128 s1, s2, res1;\n+  float res_ref[SIZE];\n+\n+  s1.x = _mm_set_ps (4.05084, -1.23162, 2.00231, -6.22103);\n+  s2.x = _mm_set_ps (-4.19319, -3.53222, 7.33527, 5.57655);\n+\n+  res1.x = _mm_roundscale_ss (s1.x, s2.x, imm);\n+\n+  compute_rndscaless (s1.a, s2.a, res_ref, imm);\n+\n+  if (check_union128 (res1, res_ref))\n+    abort ();\n+}"}, {"sha": "bd8b7a84f983d709b801cc836e5c390742894aa1", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vrsqrt14sd-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vrsqrt14sd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vrsqrt14sd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vrsqrt14sd-1.c?ref=075691af6b69963626c2e242661f4d39131d6b25", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vrsqrt14sd\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\{\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128d x1, x2;\n+volatile __mmask8 m;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x1 = _mm_rsqrt14_sd (x1, x2);\n+}"}, {"sha": "ef4e407f7d189e5d2083d1722c58fc9212f5c32b", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vrsqrt14sd-2.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vrsqrt14sd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vrsqrt14sd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vrsqrt14sd-2.c?ref=075691af6b69963626c2e242661f4d39131d6b25", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include <math.h>\n+#include \"avx512f-check.h\"\n+#include \"avx512f-helper.h\"\n+\n+static void\n+compute_vrsqrt14sd (double *s1, double *s2, double *r)\n+{\n+  r[0] = 1.0 / sqrt (s2[0]);\n+  r[1] = s1[1];\n+}\n+\n+static void\n+avx512f_test (void)\n+{\n+  union128d s1, s2, res1, res2, res3;\n+  double res_ref[2];\n+\n+  s1.x = _mm_set_pd (-3.0, 111.111);\n+  s2.x = _mm_set_pd (222.222, 4.0);\n+  res2.a[0] = DEFAULT_VALUE;\n+\n+  res1.x = _mm_rsqrt14_sd (s1.x, s2.x);\n+\n+  compute_vrsqrt14sd (s1.a, s2.a, res_ref);\n+\n+  if (check_fp_union128d (res1, res_ref))\n+    abort ();\n+}"}, {"sha": "d4d4eeadc138a5fc2621ef045ebb2e7fba287cb0", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vrsqrt14ss-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vrsqrt14ss-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vrsqrt14ss-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vrsqrt14ss-1.c?ref=075691af6b69963626c2e242661f4d39131d6b25", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vrsqrt14ss\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\{\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128 x1, x2;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x1 = _mm_rsqrt14_ss (x1, x2);\n+}"}, {"sha": "b01420f7af068a747a5d033a6dedc5efedcc0503", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vrsqrt14ss-2.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vrsqrt14ss-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vrsqrt14ss-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vrsqrt14ss-2.c?ref=075691af6b69963626c2e242661f4d39131d6b25", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include <math.h>\n+#include \"avx512f-check.h\"\n+#include \"avx512f-helper.h\"\n+\n+static void\n+compute_vrsqrt14ss (float *s1, float *s2, float *r)\n+{\n+  r[0] = 1.0 / sqrt (s2[0]);\n+  r[1] = s1[1];\n+  r[2] = s1[2];\n+  r[3] = s1[3];\n+}\n+\n+static void\n+avx512f_test (void)\n+{\n+  union128 s1, s2, res1, res2, res3;\n+  float res_ref[4];\n+\n+  s1.x = _mm_set_ps (-24.43, 68.346, -43.35, 546.46);\n+  s2.x = _mm_set_ps (222.222, 333.333, 444.444, 4.0);\n+  res2.a[0] = DEFAULT_VALUE;\n+\n+  res1.x = _mm_rsqrt14_ss (s1.x, s2.x);\n+\n+  compute_vrsqrt14ss (s1.a, s2.a, res_ref);\n+\n+  if (check_fp_union128 (res1, res_ref))\n+    abort ();\n+}"}, {"sha": "bbf238e7e521c1c97ca8de48e9cf584e4810f562", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vscalefsd-1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vscalefsd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vscalefsd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vscalefsd-1.c?ref=075691af6b69963626c2e242661f4d39131d6b25", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vscalefsd\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vscalefsd\\[ \\\\t\\]+\\[^\\n\\]*\\{rn-sae\\}\\[^\\n\\]*%xmm\\[0-9\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128d x;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x = _mm_scalef_sd (x, x);\n+  x = _mm_scalef_round_sd (x, x, _MM_FROUND_TO_NEAREST_INT);\n+}"}, {"sha": "131fc67c032a7ed4ee210b96b9a0091625d242cc", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vscalefsd-2.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vscalefsd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vscalefsd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vscalefsd-2.c?ref=075691af6b69963626c2e242661f4d39131d6b25", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include <math.h>\n+#include \"avx512f-check.h\"\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (128 / 64)\n+\n+static void\n+compute_scalefsd (double *s1, double *s2, double *r)\n+{\n+  r[0] = s1[0] * pow (2, floor (s2[0]));\n+  r[1] = s1[1];\n+}\n+\n+void static\n+avx512f_test (void)\n+{\n+  union128d res1, s1, s2;\n+  double res_ref[SIZE];\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      s1.a[i] = 11.5 * (i + 1);\n+      s2.a[i] = 10.5 * (i + 1);\n+    }\n+\n+  res1.x = _mm_scalef_sd (s1.x, s2.x);\n+\n+  compute_scalefsd (s1.a, s2.a, res_ref);\n+\n+  if (check_union128d (res1, res_ref))\n+    abort ();\n+}"}, {"sha": "d36b2ffe3880185865218c6c5244b6a7de46e9db", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vscalefss-1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vscalefss-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vscalefss-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vscalefss-1.c?ref=075691af6b69963626c2e242661f4d39131d6b25", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vscalefss\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\{\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vscalefss\\[ \\\\t\\]+\\[^\\n\\]*\\{rn-sae\\}\\[^\\n\\]*%xmm\\[0-9\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128 x;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x = _mm_scalef_ss (x, x);\n+  x = _mm_scalef_round_ss (x, x, _MM_FROUND_TO_NEAREST_INT);\n+}"}, {"sha": "3e8f6d193455296b30c3b78bad082d8c37dcb0ae", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vscalefss-2.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vscalefss-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vscalefss-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vscalefss-2.c?ref=075691af6b69963626c2e242661f4d39131d6b25", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include <math.h>\n+#include \"avx512f-check.h\"\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (128 / 32)\n+\n+static void\n+compute_scalefss (float *s1, float *s2, float *r)\n+{\n+  r[0] = s1[0] * (float) pow (2, floor (s2[0]));\n+  r[1] = s1[1];\n+  r[2] = s1[2];\n+  r[3] = s1[3];\n+}\n+\n+static void\n+avx512f_test (void)\n+{\n+  union128 res1, s1, s2;\n+  float res_ref[SIZE];\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      s1.a[i] = 11.5 * (i + 1);\n+      s2.a[i] = 10.5 * (i + 1);\n+    }\n+\n+  res1.x = _mm_scalef_ss (s1.x, s2.x);\n+\n+  compute_scalefss (s1.a, s2.a, res_ref);\n+\n+  if (check_union128 (res1, res_ref))\n+    abort ();\n+}"}, {"sha": "5814e3ce7f066ec07d6410faeead7715d7e97890", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vsqrtsd-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vsqrtsd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vsqrtsd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vsqrtsd-1.c?ref=075691af6b69963626c2e242661f4d39131d6b25", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vsqrtsd\\[ \\\\t\\]+\\[^\\n\\]*\\{rn-sae\\}\\[^\\n\\]*%xmm\\[0-9\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128d x1, x2;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x1 = _mm_sqrt_round_sd (x1, x2, _MM_FROUND_TO_NEAREST_INT);\n+}"}, {"sha": "81e8a0ecde71ff5461c2f07ce39bc1812c8c3652", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vsqrtss-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vsqrtss-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vsqrtss-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vsqrtss-1.c?ref=075691af6b69963626c2e242661f4d39131d6b25", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vsqrtss\\[ \\\\t\\]+\\[^\\n\\]*\\{rn-sae\\}\\[^\\n\\]*%xmm\\[0-9\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128 x1, x2;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x1 = _mm_sqrt_round_ss (x1, x2, _MM_FROUND_TO_NEAREST_INT);\n+}"}, {"sha": "511ceb40f0e2d69ae32f0e5e40297e10d77d7f21", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vsubsd-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vsubsd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vsubsd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vsubsd-1.c?ref=075691af6b69963626c2e242661f4d39131d6b25", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vsubsd\\[ \\\\t\\]+\\[^\\n\\]*\\{rn-sae\\}\\[^\\n\\]*%xmm\\[0-9\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128d x1, x2;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x1 = _mm_sub_round_sd (x1, x2, _MM_FROUND_TO_NEAREST_INT);\n+}"}, {"sha": "618662fcc938e051a2d88accf7975ce7d9db4de2", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vsubss-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vsubss-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vsubss-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vsubss-1.c?ref=075691af6b69963626c2e242661f4d39131d6b25", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vsubss\\[ \\\\t\\]+\\[^\\n\\]*\\{rn-sae\\}\\[^\\n\\]*%xmm\\[0-9\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128 x1, x2;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x1 = _mm_sub_round_ss (x1, x2, _MM_FROUND_TO_NEAREST_INT);\n+}"}, {"sha": "c5d8876b471a45e5a3287510cb526779ceff82f5", "filename": "gcc/testsuite/gcc.target/i386/sse-14.c", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c?ref=075691af6b69963626c2e242661f4d39131d6b25", "patch": "@@ -199,6 +199,7 @@ test_1x (_mm512_getmant_pd, __m512d, __m512d, 1, 1)\n test_1x (_mm512_getmant_ps, __m512, __m512, 1, 1)\n test_1x (_mm512_roundscale_round_pd, __m512d, __m512d, 1, 5)\n test_1x (_mm512_roundscale_round_ps, __m512, __m512, 1, 5)\n+test_1x (_mm_cvt_roundi32_ss, __m128, __m128, 1, 1)\n test_2 (_mm512_add_round_pd, __m512d, __m512d, __m512d, 1)\n test_2 (_mm512_add_round_ps, __m512, __m512, __m512, 1)\n test_2 (_mm512_alignr_epi32, __m512i, __m512i, __m512i, 1)\n@@ -278,16 +279,45 @@ test_2 (_mm512_shuffle_pd, __m512d, __m512d, __m512d, 1)\n test_2 (_mm512_shuffle_ps, __m512, __m512, __m512, 1)\n test_2 (_mm512_sub_round_pd, __m512d, __m512d, __m512d, 1)\n test_2 (_mm512_sub_round_ps, __m512, __m512, __m512, 1)\n+test_2 (_mm_add_round_sd, __m128d, __m128d, __m128d, 1)\n+test_2 (_mm_add_round_ss, __m128, __m128, __m128, 1)\n test_2 (_mm_cmp_sd_mask, __mmask8, __m128d, __m128d, 1)\n test_2 (_mm_cmp_ss_mask, __mmask8, __m128, __m128, 1)\n #ifdef __x86_64__\n+test_2 (_mm_cvt_roundi64_sd, __m128d, __m128d, long long, 1)\n+test_2 (_mm_cvt_roundi64_ss, __m128, __m128, long long, 1)\n #endif\n+test_2 (_mm_cvt_roundsd_ss, __m128, __m128, __m128d, 1)\n+test_2 (_mm_cvt_roundss_sd, __m128d, __m128d, __m128, 5)\n+test_2 (_mm_cvt_roundu32_ss, __m128, __m128, unsigned, 1)\n #ifdef __x86_64__\n+test_2 (_mm_cvt_roundu64_sd, __m128d, __m128d, unsigned long long, 1)\n+test_2 (_mm_cvt_roundu64_ss, __m128, __m128, unsigned long long, 1)\n #endif\n+test_2 (_mm_div_round_sd, __m128d, __m128d, __m128d, 1)\n+test_2 (_mm_div_round_ss, __m128, __m128, __m128, 1)\n+test_2 (_mm_getexp_round_sd, __m128d, __m128d, __m128d, 5)\n+test_2 (_mm_getexp_round_ss, __m128, __m128, __m128, 5)\n+test_2y (_mm_getmant_round_sd, __m128d, __m128d, __m128d, 1, 1, 5)\n+test_2y (_mm_getmant_round_ss, __m128, __m128, __m128, 1, 1, 5)\n+test_2 (_mm_mul_round_sd, __m128d, __m128d, __m128d, 1)\n+test_2 (_mm_mul_round_ss, __m128, __m128, __m128, 1)\n+test_2 (_mm_scalef_round_sd, __m128d, __m128d, __m128d, 1)\n+test_2 (_mm_scalef_round_ss, __m128, __m128, __m128, 1)\n+test_2 (_mm_sqrt_round_sd, __m128d, __m128d, __m128d, 1)\n+test_2 (_mm_sqrt_round_ss, __m128, __m128, __m128, 1)\n+test_2 (_mm_sub_round_sd, __m128d, __m128d, __m128d, 1)\n+test_2 (_mm_sub_round_ss, __m128, __m128, __m128, 1)\n test_2x (_mm512_cmp_round_pd_mask, __mmask8, __m512d, __m512d, 1, 5)\n test_2x (_mm512_cmp_round_ps_mask, __mmask16, __m512, __m512, 1, 5)\n test_2x (_mm512_maskz_roundscale_round_pd, __m512d, __mmask8, __m512d, 1, 5)\n test_2x (_mm512_maskz_roundscale_round_ps, __m512, __mmask16, __m512, 1, 5)\n+test_2x (_mm_cmp_round_sd_mask, __mmask8, __m128d, __m128d, 1, 5)\n+test_2x (_mm_cmp_round_ss_mask, __mmask8, __m128, __m128, 1, 5)\n+test_2x (_mm_comi_round_sd, int, __m128d, __m128d, 1, 5)\n+test_2x (_mm_comi_round_ss, int, __m128, __m128, 1, 5)\n+test_2x (_mm_roundscale_round_sd, __m128d, __m128d, __m128d, 1, 5)\n+test_2x (_mm_roundscale_round_ss, __m128, __m128, __m128, 1, 5)\n test_3 (_mm512_fmadd_round_pd, __m512d, __m512d, __m512d, __m512d, 1)\n test_3 (_mm512_fmadd_round_ps, __m512, __m512, __m512, __m512, 1)\n test_3 (_mm512_fmaddsub_round_pd, __m512d, __m512d, __m512d, __m512d, 1)\n@@ -373,6 +403,14 @@ test_3 (_mm512_maskz_sub_round_pd, __m512d, __mmask8, __m512d, __m512d, 1)\n test_3 (_mm512_maskz_sub_round_ps, __m512, __mmask16, __m512, __m512, 1)\n test_3 (_mm512_ternarylogic_epi32, __m512i, __m512i, __m512i, __m512i, 1)\n test_3 (_mm512_ternarylogic_epi64, __m512i, __m512i, __m512i, __m512i, 1)\n+test_3 (_mm_fmadd_round_sd, __m128d, __m128d, __m128d, __m128d, 1)\n+test_3 (_mm_fmadd_round_ss, __m128, __m128, __m128, __m128, 1)\n+test_3 (_mm_fmsub_round_sd, __m128d, __m128d, __m128d, __m128d, 1)\n+test_3 (_mm_fmsub_round_ss, __m128, __m128, __m128, __m128, 1)\n+test_3 (_mm_fnmadd_round_sd, __m128d, __m128d, __m128d, __m128d, 1)\n+test_3 (_mm_fnmadd_round_ss, __m128, __m128, __m128, __m128, 1)\n+test_3 (_mm_fnmsub_round_sd, __m128d, __m128d, __m128d, __m128d, 1)\n+test_3 (_mm_fnmsub_round_ss, __m128, __m128, __m128, __m128, 1)\n test_3 (_mm_mask_cmp_sd_mask, __mmask8, __mmask8, __m128d, __m128d, 1)\n test_3 (_mm_mask_cmp_ss_mask, __mmask8, __mmask8, __m128, __m128, 1)\n test_3v (_mm512_i32scatter_epi32, void *, __m512i, __m512i, 1)\n@@ -385,6 +423,10 @@ test_3v (_mm512_i64scatter_pd, void *, __m512i, __m512d, 1)\n test_3v (_mm512_i64scatter_ps, void *, __m512i, __m256, 1)\n test_3x (_mm512_mask_roundscale_round_pd, __m512d, __m512d, __mmask8, __m512d, 1, 5)\n test_3x (_mm512_mask_roundscale_round_ps, __m512, __m512, __mmask16, __m512, 1, 5)\n+test_3x (_mm_fixupimm_round_sd, __m128d, __m128d, __m128d, __m128i, 1, 5)\n+test_3x (_mm_fixupimm_round_ss, __m128, __m128, __m128, __m128i, 1, 5)\n+test_3x (_mm_mask_cmp_round_sd_mask, __mmask8, __mmask8, __m128d, __m128d, 1, 5)\n+test_3x (_mm_mask_cmp_round_ss_mask, __mmask8, __mmask8, __m128, __m128, 1, 5)\n test_4 (_mm512_mask3_fmadd_round_pd, __m512d, __m512d, __m512d, __m512d, __mmask8, 1)\n test_4 (_mm512_mask3_fmadd_round_ps, __m512, __m512, __m512, __m512, __mmask16, 1)\n test_4 (_mm512_mask3_fmaddsub_round_pd, __m512d, __m512d, __m512d, __m512d, __mmask8, 1)\n@@ -471,6 +513,10 @@ test_4x (_mm512_mask_fixupimm_round_pd, __m512d, __m512d, __mmask8, __m512d, __m\n test_4x (_mm512_mask_fixupimm_round_ps, __m512, __m512, __mmask16, __m512, __m512i, 1, 5)\n test_4x (_mm512_maskz_fixupimm_round_pd, __m512d, __mmask8, __m512d, __m512d, __m512i, 1, 5)\n test_4x (_mm512_maskz_fixupimm_round_ps, __m512, __mmask16, __m512, __m512, __m512i, 1, 5)\n+test_4x (_mm_mask_fixupimm_round_sd, __m128d, __m128d, __mmask8, __m128d, __m128i, 1, 5)\n+test_4x (_mm_mask_fixupimm_round_ss, __m128, __m128, __mmask8, __m128, __m128i, 1, 5)\n+test_4x (_mm_maskz_fixupimm_round_sd, __m128d, __mmask8, __m128d, __m128d, __m128i, 1, 5)\n+test_4x (_mm_maskz_fixupimm_round_ss, __m128, __mmask8, __m128, __m128, __m128i, 1, 5)\n \n /* avx512pfintrin.h */\n test_3vx (_mm512_mask_prefetch_i32gather_ps, __m512i, __mmask16, void const *, 1, 1)"}, {"sha": "a6a7b3923195a4b1caf9a1d58ec6c62d255a3bf3", "filename": "gcc/testsuite/gcc.target/i386/sse-23.c", "status": "modified", "additions": 26, "deletions": 8, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c?ref=075691af6b69963626c2e242661f4d39131d6b25", "patch": "@@ -186,6 +186,8 @@\n /* avx512fintrin.h */\n #define __builtin_ia32_addpd512_mask(A, B, C, D, E) __builtin_ia32_addpd512_mask(A, B, C, D, 1)\n #define __builtin_ia32_addps512_mask(A, B, C, D, E) __builtin_ia32_addps512_mask(A, B, C, D, 1)\n+#define __builtin_ia32_addsd_round(A, B, C) __builtin_ia32_addsd_round(A, B, 1)\n+#define __builtin_ia32_addss_round(A, B, C) __builtin_ia32_addss_round(A, B, 1)\n #define __builtin_ia32_alignd512_mask(A, B, F, D, E) __builtin_ia32_alignd512_mask(A, B, 1, D, E)\n #define __builtin_ia32_alignq512_mask(A, B, F, D, E) __builtin_ia32_alignq512_mask(A, B, 1, D, E)\n #define __builtin_ia32_cmpd512_mask(A, B, E, D) __builtin_ia32_cmpd512_mask(A, B, 1, D)\n@@ -201,6 +203,8 @@\n #define __builtin_ia32_cvtps2dq512_mask(A, B, C, D) __builtin_ia32_cvtps2dq512_mask(A, B, C, 1)\n #define __builtin_ia32_cvtps2pd512_mask(A, B, C, D) __builtin_ia32_cvtps2pd512_mask(A, B, C, 5)\n #define __builtin_ia32_cvtps2udq512_mask(A, B, C, D) __builtin_ia32_cvtps2udq512_mask(A, B, C, 1)\n+#define __builtin_ia32_cvtsd2ss_round(A, B, C) __builtin_ia32_cvtsd2ss_round(A, B, 1)\n+#define __builtin_ia32_cvtss2sd_round(A, B, C) __builtin_ia32_cvtss2sd_round(A, B, 4)\n #define __builtin_ia32_cvtsi2sd64(A, B, C) __builtin_ia32_cvtsi2sd64(A, B, 1)\n #define __builtin_ia32_cvtsi2ss32(A, B, C) __builtin_ia32_cvtsi2ss32(A, B, 1)\n #define __builtin_ia32_cvtsi2ss64(A, B, C) __builtin_ia32_cvtsi2ss64(A, B, 1)\n@@ -214,6 +218,8 @@\n #define __builtin_ia32_cvtusi2ss64(A, B, C) __builtin_ia32_cvtusi2ss64(A, B, 1)\n #define __builtin_ia32_divpd512_mask(A, B, C, D, E) __builtin_ia32_divpd512_mask(A, B, C, D, 1)\n #define __builtin_ia32_divps512_mask(A, B, C, D, E) __builtin_ia32_divps512_mask(A, B, C, D, 1)\n+#define __builtin_ia32_divsd_round(A, B, C) __builtin_ia32_divsd_round(A, B, 1)\n+#define __builtin_ia32_divss_round(A, B, C) __builtin_ia32_divss_round(A, B, 1)\n #define __builtin_ia32_extractf32x4_mask(A, E, C, D) __builtin_ia32_extractf32x4_mask(A, 1, C, D)\n #define __builtin_ia32_extractf64x4_mask(A, E, C, D) __builtin_ia32_extractf64x4_mask(A, 1, C, D)\n #define __builtin_ia32_extracti32x4_mask(A, E, C, D) __builtin_ia32_extracti32x4_mask(A, 1, C, D)\n@@ -236,18 +242,28 @@\n #define __builtin_ia32_gathersiv8di(A, B, C, D, F) __builtin_ia32_gathersiv8di(A, B, C, D, 1)\n #define __builtin_ia32_getexppd512_mask(A, B, C, D) __builtin_ia32_getexppd512_mask(A, B, C, 5)\n #define __builtin_ia32_getexpps512_mask(A, B, C, D) __builtin_ia32_getexpps512_mask(A, B, C, 5)\n+#define __builtin_ia32_getexpsd128_round(A, B, C) __builtin_ia32_getexpsd128_round(A, B, 4)\n+#define __builtin_ia32_getexpss128_round(A, B, C) __builtin_ia32_getexpss128_round(A, B, 4)\n #define __builtin_ia32_getmantpd512_mask(A, F, C, D, E) __builtin_ia32_getmantpd512_mask(A, 1, C, D, 5)\n #define __builtin_ia32_getmantps512_mask(A, F, C, D, E) __builtin_ia32_getmantps512_mask(A, 1, C, D, 5)\n+#define __builtin_ia32_getmantsd_round(A, B, C, D) __builtin_ia32_getmantsd_round(A, B, 1, 4)\n+#define __builtin_ia32_getmantss_round(A, B, C, D) __builtin_ia32_getmantss_round(A, B, 1, 4)\n #define __builtin_ia32_insertf32x4_mask(A, B, F, D, E) __builtin_ia32_insertf32x4_mask(A, B, 1, D, E)\n #define __builtin_ia32_insertf64x4_mask(A, B, F, D, E) __builtin_ia32_insertf64x4_mask(A, B, 1, D, E)\n #define __builtin_ia32_inserti32x4_mask(A, B, F, D, E) __builtin_ia32_inserti32x4_mask(A, B, 1, D, E)\n #define __builtin_ia32_inserti64x4_mask(A, B, F, D, E) __builtin_ia32_inserti64x4_mask(A, B, 1, D, E)\n #define __builtin_ia32_maxpd512_mask(A, B, C, D, E) __builtin_ia32_maxpd512_mask(A, B, C, D, 5)\n #define __builtin_ia32_maxps512_mask(A, B, C, D, E) __builtin_ia32_maxps512_mask(A, B, C, D, 5)\n+#define __builtin_ia32_maxsd_round(A, B, C) __builtin_ia32_maxsd_round(A, B, 4)\n+#define __builtin_ia32_maxss_round(A, B, C) __builtin_ia32_maxss_round(A, B, 4)\n #define __builtin_ia32_minpd512_mask(A, B, C, D, E) __builtin_ia32_minpd512_mask(A, B, C, D, 5)\n #define __builtin_ia32_minps512_mask(A, B, C, D, E) __builtin_ia32_minps512_mask(A, B, C, D, 5)\n+#define __builtin_ia32_minsd_round(A, B, C) __builtin_ia32_minsd_round(A, B, 4)\n+#define __builtin_ia32_minss_round(A, B, C) __builtin_ia32_minss_round(A, B, 4)\n #define __builtin_ia32_mulpd512_mask(A, B, C, D, E) __builtin_ia32_mulpd512_mask(A, B, C, D, 1)\n #define __builtin_ia32_mulps512_mask(A, B, C, D, E) __builtin_ia32_mulps512_mask(A, B, C, D, 1)\n+#define __builtin_ia32_mulsd_round(A, B, C) __builtin_ia32_mulsd_round(A, B, 1)\n+#define __builtin_ia32_mulss_round(A, B, C) __builtin_ia32_mulss_round(A, B, 1)\n #define __builtin_ia32_permdf512_mask(A, E, C, D) __builtin_ia32_permdf512_mask(A, 1, C, D)\n #define __builtin_ia32_permdi512_mask(A, E, C, D) __builtin_ia32_permdi512_mask(A, 1, C, D)\n #define __builtin_ia32_prold512_mask(A, E, C, D) __builtin_ia32_prold512_mask(A, 1, C, D)\n@@ -267,8 +283,12 @@\n #define __builtin_ia32_pternlogq512_maskz(A, B, C, F, E) __builtin_ia32_pternlogq512_maskz(A, B, C, 1, E)\n #define __builtin_ia32_rndscalepd_mask(A, F, C, D, E) __builtin_ia32_rndscalepd_mask(A, 1, C, D, 5)\n #define __builtin_ia32_rndscaleps_mask(A, F, C, D, E) __builtin_ia32_rndscaleps_mask(A, 1, C, D, 5)\n+#define __builtin_ia32_rndscalesd_round(A, B, C, D) __builtin_ia32_rndscalesd_round(A, B, 1, 4)\n+#define __builtin_ia32_rndscaless_round(A, B, C, D) __builtin_ia32_rndscaless_round(A, B, 1, 4)\n #define __builtin_ia32_scalefpd512_mask(A, B, C, D, E) __builtin_ia32_scalefpd512_mask(A, B, C, D, 1)\n #define __builtin_ia32_scalefps512_mask(A, B, C, D, E) __builtin_ia32_scalefps512_mask(A, B, C, D, 1)\n+#define __builtin_ia32_scalefsd_round(A, B, C) __builtin_ia32_scalefsd_round(A, B, 1)\n+#define __builtin_ia32_scalefss_round(A, B, C) __builtin_ia32_scalefss_round(A, B, 1)\n #define __builtin_ia32_scatterdiv8df(A, B, C, D, F) __builtin_ia32_scatterdiv8df(A, B, C, D, 1)\n #define __builtin_ia32_scatterdiv8di(A, B, C, D, F) __builtin_ia32_scatterdiv8di(A, B, C, D, 1)\n #define __builtin_ia32_scatterdiv16sf(A, B, C, D, F) __builtin_ia32_scatterdiv16sf(A, B, C, D, 1)\n@@ -285,8 +305,12 @@\n #define __builtin_ia32_shufps512_mask(A, B, F, D, E) __builtin_ia32_shufps512_mask(A, B, 1, D, E)\n #define __builtin_ia32_sqrtpd512_mask(A, B, C, D) __builtin_ia32_sqrtpd512_mask(A, B, C, 1)\n #define __builtin_ia32_sqrtps512_mask(A, B, C, D) __builtin_ia32_sqrtps512_mask(A, B, C, 1)\n+#define __builtin_ia32_sqrtss_round(A, B, C) __builtin_ia32_sqrtss_round(A, B, 1)\n+#define __builtin_ia32_sqrtsd_round(A, B, C) __builtin_ia32_sqrtsd_round(A, B, 1)\n #define __builtin_ia32_subpd512_mask(A, B, C, D, E) __builtin_ia32_subpd512_mask(A, B, C, D, 1)\n #define __builtin_ia32_subps512_mask(A, B, C, D, E) __builtin_ia32_subps512_mask(A, B, C, D, 1)\n+#define __builtin_ia32_subsd_round(A, B, C) __builtin_ia32_subsd_round(A, B, 1)\n+#define __builtin_ia32_subss_round(A, B, C) __builtin_ia32_subss_round(A, B, 1)\n #define __builtin_ia32_ucmpd512_mask(A, B, E, D) __builtin_ia32_ucmpd512_mask(A, B, 1, D)\n #define __builtin_ia32_ucmpq512_mask(A, B, E, D) __builtin_ia32_ucmpq512_mask(A, B, 1, D)\n #define __builtin_ia32_vcomisd(A, B, C, D) __builtin_ia32_vcomisd(A, B, 1, 5)\n@@ -315,12 +339,8 @@\n #define __builtin_ia32_vfmaddps512_mask(A, B, C, D, E) __builtin_ia32_vfmaddps512_mask(A, B, C, D, 1)\n #define __builtin_ia32_vfmaddps512_mask3(A, B, C, D, E) __builtin_ia32_vfmaddps512_mask3(A, B, C, D, 1)\n #define __builtin_ia32_vfmaddps512_maskz(A, B, C, D, E) __builtin_ia32_vfmaddps512_maskz(A, B, C, D, 1)\n-#define __builtin_ia32_vfmaddsd3_mask(A, B, C, D, E) __builtin_ia32_vfmaddsd3_mask(A, B, C, D, 1)\n-#define __builtin_ia32_vfmaddsd3_mask3(A, B, C, D, E) __builtin_ia32_vfmaddsd3_mask3(A, B, C, D, 1)\n-#define __builtin_ia32_vfmaddsd3_maskz(A, B, C, D, E) __builtin_ia32_vfmaddsd3_maskz(A, B, C, D, 1)\n-#define __builtin_ia32_vfmaddss3_mask(A, B, C, D, E) __builtin_ia32_vfmaddss3_mask(A, B, C, D, 1)\n-#define __builtin_ia32_vfmaddss3_mask3(A, B, C, D, E) __builtin_ia32_vfmaddss3_mask3(A, B, C, D, 1)\n-#define __builtin_ia32_vfmaddss3_maskz(A, B, C, D, E) __builtin_ia32_vfmaddss3_maskz(A, B, C, D, 1)\n+#define __builtin_ia32_vfmaddsd3_round(A, B, C, D) __builtin_ia32_vfmaddsd3_round(A, B, C, 1)\n+#define __builtin_ia32_vfmaddss3_round(A, B, C, D) __builtin_ia32_vfmaddss3_round(A, B, C, 1)\n #define __builtin_ia32_vfmaddsubpd512_mask(A, B, C, D, E) __builtin_ia32_vfmaddsubpd512_mask(A, B, C, D, 1)\n #define __builtin_ia32_vfmaddsubpd512_mask3(A, B, C, D, E) __builtin_ia32_vfmaddsubpd512_mask3(A, B, C, D, 1)\n #define __builtin_ia32_vfmaddsubpd512_maskz(A, B, C, D, E) __builtin_ia32_vfmaddsubpd512_maskz(A, B, C, D, 1)\n@@ -331,8 +351,6 @@\n #define __builtin_ia32_vfmsubaddps512_mask3(A, B, C, D, E) __builtin_ia32_vfmsubaddps512_mask3(A, B, C, D, 1)\n #define __builtin_ia32_vfmsubpd512_mask3(A, B, C, D, E) __builtin_ia32_vfmsubpd512_mask3(A, B, C, D, 1)\n #define __builtin_ia32_vfmsubps512_mask3(A, B, C, D, E) __builtin_ia32_vfmsubps512_mask3(A, B, C, D, 1)\n-#define __builtin_ia32_vfmsubsd3_mask3(A, B, C, D, E) __builtin_ia32_vfmsubsd3_mask3(A, B, C, D, 1)\n-#define __builtin_ia32_vfmsubss3_mask3(A, B, C, D, E) __builtin_ia32_vfmsubss3_mask3(A, B, C, D, 1)\n #define __builtin_ia32_vfnmaddpd512_mask(A, B, C, D, E) __builtin_ia32_vfnmaddpd512_mask(A, B, C, D, 1)\n #define __builtin_ia32_vfnmaddps512_mask(A, B, C, D, E) __builtin_ia32_vfnmaddps512_mask(A, B, C, D, 1)\n #define __builtin_ia32_vfnmsubpd512_mask(A, B, C, D, E) __builtin_ia32_vfnmsubpd512_mask(A, B, C, D, 1)"}, {"sha": "d744e1c08ae38f79f9f03f20659db4fbf813971d", "filename": "gcc/testsuite/gcc.target/i386/testimm-10.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ftestimm-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ftestimm-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ftestimm-10.c?ref=075691af6b69963626c2e242661f4d39131d6b25", "patch": "@@ -77,7 +77,13 @@ test8bit (void)\n   m512  = _mm512_mask_fixupimm_ps (m512, mmask16, m512, m512i, 256); /* { dg-error \"the immediate argument must be an 8-bit immediate\" } */\n   m512  = _mm512_maskz_fixupimm_ps (mmask16, m512, m512, m512i, 256); /* { dg-error \"the immediate argument must be an 8-bit immediate\" } */\n \n+  m128d = _mm_fixupimm_sd (m128d, m128d, m128i, 256); /* { dg-error \"the immediate argument must be an 8-bit immediate\" } */\n+  m128d = _mm_mask_fixupimm_sd (m128d, mmask8, m128d, m128i, 256); /* { dg-error \"the immediate argument must be an 8-bit immediate\" } */\n+  m128d = _mm_maskz_fixupimm_sd (mmask8, m128d, m128d, m128i, 256); /* { dg-error \"the immediate argument must be an 8-bit immediate\" } */\n \n+  m128  = _mm_fixupimm_ss (m128, m128, m128i, 256); /* { dg-error \"the immediate argument must be an 8-bit immediate\" } */\n+  m128  = _mm_mask_fixupimm_ss (m128, mmask8, m128, m128i, 256); /* { dg-error \"the immediate argument must be an 8-bit immediate\" } */\n+  m128  = _mm_maskz_fixupimm_ss (mmask8, m128, m128, m128i, 256); /* { dg-error \"the immediate argument must be an 8-bit immediate\" } */\n \n   m512i = _mm512_rol_epi32 (m512i, 256); /* { dg-error \"the last argument must be an 8-bit immediate\" } */\n   m512i = _mm512_mask_rol_epi32 (m512i, mmask16, m512i, 256); /* { dg-error \"the last argument must be an 8-bit immediate\" } */\n@@ -107,6 +113,8 @@ test8bit (void)\n   m512  = _mm512_mask_roundscale_ps (m512, mmask16, m512, 256); /* { dg-error \"the immediate argument must be an 8-bit immediate\" } */\n   m512  = _mm512_maskz_roundscale_ps (mmask16, m512, 256); /* { dg-error \"the immediate argument must be an 8-bit immediate\" } */\n \n+  m128d = _mm_roundscale_sd (m128d, m128d, 256); /* { dg-error \"the immediate argument must be an 8-bit immediate\" } */\n+  m128  = _mm_roundscale_ss (m128, m128, 256); /* { dg-error \"the immediate argument must be an 8-bit immediate\" } */\n \n   m512i = _mm512_alignr_epi32 (m512i, m512i, 256); /* { dg-error \"the last argument must be an 8-bit immediate\" } */\n   m512i = _mm512_mask_alignr_epi32 (m512i, mmask16, m512i, m512i, 256); /* { dg-error \"the last argument must be an 8-bit immediate\" } */\n@@ -179,5 +187,6 @@ test4bit (void) {\n   m512  = _mm512_mask_getmant_ps (m512, mmask16, m512, 1, 64); /* { dg-error \"the immediate argument must be a 4-bit immediate\" } */\n   m512  = _mm512_maskz_getmant_ps (mmask16, m512, 1, 64); /* { dg-error \"the immediate argument must be a 4-bit immediate\" } */\n \n-\n+  m128d = _mm_getmant_sd (m128d, m128d, 1, 64); /* { dg-error \"the immediate argument must be a 4-bit immediate\" } */\n+  m128  = _mm_getmant_ss (m128, m128, 1, 64); /* { dg-error \"the immediate argument must be a 4-bit immediate\" } */\n }"}, {"sha": "20c039ab0ba80b5eccc5a80279c799153ac8cc63", "filename": "gcc/testsuite/gcc.target/i386/testround-1.c", "status": "modified", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ftestround-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/075691af6b69963626c2e242661f4d39131d6b25/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ftestround-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ftestround-1.c?ref=075691af6b69963626c2e242661f4d39131d6b25", "patch": "@@ -19,12 +19,19 @@ __mmask16 mmask16;\n void\n test_round (void)\n {\n+  m128d = _mm_add_round_sd (m128d, m128d, 7); /* { dg-error \"incorrect rounding operand\" } */\n+  m128 = _mm_add_round_ss (m128, m128, 7); /* { dg-error \"incorrect rounding operand\" } */\n+  m128d = _mm_sub_round_sd (m128d, m128d, 7); /* { dg-error \"incorrect rounding operand\" } */\n+  m128 = _mm_sub_round_ss (m128, m128, 7); /* { dg-error \"incorrect rounding operand\" } */\n+\n   m512d = _mm512_sqrt_round_pd (m512d, 7); /* { dg-error \"incorrect rounding operand\" } */\n   m512d = _mm512_mask_sqrt_round_pd (m512d, mmask8, m512d, 7); /* { dg-error \"incorrect rounding operand\" } */\n   m512d = _mm512_maskz_sqrt_round_pd (mmask8, m512d, 7); /* { dg-error \"incorrect rounding operand\" } */\n   m512 = _mm512_sqrt_round_ps (m512, 7); /* { dg-error \"incorrect rounding operand\" } */\n   m512 = _mm512_mask_sqrt_round_ps (m512, mmask16, m512, 7); /* { dg-error \"incorrect rounding operand\" } */\n   m512 = _mm512_maskz_sqrt_round_ps (mmask16, m512, 7); /* { dg-error \"incorrect rounding operand\" } */\n+  m128d = _mm_sqrt_round_sd (m128d, m128d, 7); /* { dg-error \"incorrect rounding operand\" } */\n+  m128 = _mm_sqrt_round_ss (m128, m128, 7); /* { dg-error \"incorrect rounding operand\" } */\n \n   m512d = _mm512_add_round_pd (m512d, m512d, 7); /* { dg-error \"incorrect rounding operand\" } */\n   m512d = _mm512_mask_add_round_pd (m512d, mmask8, m512d, m512d, 7); /* { dg-error \"incorrect rounding operand\" } */\n@@ -51,13 +58,19 @@ test_round (void)\n   m512 = _mm512_div_round_ps (m512, m512, 7); /* { dg-error \"incorrect rounding operand\" } */\n   m512 = _mm512_mask_div_round_ps (m512, mmask16, m512, m512, 7); /* { dg-error \"incorrect rounding operand\" } */\n   m512 = _mm512_maskz_div_round_ps (mmask16, m512, m512, 7); /* { dg-error \"incorrect rounding operand\" } */\n+  m128d = _mm_mul_round_sd (m128d, m128d, 7); /* { dg-error \"incorrect rounding operand\" } */\n+  m128 = _mm_mul_round_ss (m128, m128, 7); /* { dg-error \"incorrect rounding operand\" } */\n+  m128d = _mm_div_round_sd (m128d, m128d, 7); /* { dg-error \"incorrect rounding operand\" } */\n+  m128 = _mm_div_round_ss (m128, m128, 7); /* { dg-error \"incorrect rounding operand\" } */\n \n   m512d = _mm512_scalef_round_pd(m512d, m512d, 7); /* { dg-error \"incorrect rounding operand\" } */\n   m512d = _mm512_mask_scalef_round_pd(m512d, mmask8, m512d, m512d, 7); /* { dg-error \"incorrect rounding operand\" } */\n   m512d = _mm512_maskz_scalef_round_pd(mmask8, m512d, m512d, 7); /* { dg-error \"incorrect rounding operand\" } */\n   m512 = _mm512_scalef_round_ps(m512, m512, 7); /* { dg-error \"incorrect rounding operand\" } */\n   m512 = _mm512_mask_scalef_round_ps(m512, mmask16, m512, m512, 7); /* { dg-error \"incorrect rounding operand\" } */\n   m512 = _mm512_maskz_scalef_round_ps(mmask16, m512, m512, 7); /* { dg-error \"incorrect rounding operand\" } */\n+  m128d = _mm_scalef_round_sd (m128d, m128d, 7); /* { dg-error \"incorrect rounding operand\" } */\n+  m128 = _mm_scalef_round_ss (m128, m128, 7); /* { dg-error \"incorrect rounding operand\" } */\n \n   m512d = _mm512_fmadd_round_pd (m512d, m512d, m512d, 7); /* { dg-error \"incorrect rounding operand\" } */\n   m512d = _mm512_mask_fmadd_round_pd (m512d, mmask8, m512d, m512d, 7); /* { dg-error \"incorrect rounding operand\" } */\n@@ -141,6 +154,16 @@ test_round (void)\n   m256 = _mm512_cvt_roundpd_ps (m512d, 7); /* { dg-error \"incorrect rounding operand\" } */\n   m256 = _mm512_mask_cvt_roundpd_ps (m256, mmask8, m512d, 7); /* { dg-error \"incorrect rounding operand\" } */\n   m256 = _mm512_maskz_cvt_roundpd_ps (mmask8, m512d, 7); /* { dg-error \"incorrect rounding operand\" } */\n+  m128 = _mm_cvt_roundsd_ss (m128, m128d, 7); /* { dg-error \"incorrect rounding operand\" } */\n+\n+  m128d = _mm_fmadd_round_sd (m128d, m128d, m128d, 7); /* { dg-error \"incorrect rounding operand\" } */\n+  m128 = _mm_fmadd_round_ss (m128, m128, m128, 7); /* { dg-error \"incorrect rounding operand\" } */\n+  m128d = _mm_fmsub_round_sd (m128d, m128d, m128d, 7); /* { dg-error \"incorrect rounding operand\" } */\n+  m128 = _mm_fmsub_round_ss (m128, m128, m128, 7); /* { dg-error \"incorrect rounding operand\" } */\n+  m128d = _mm_fnmadd_round_sd (m128d, m128d, m128d, 7); /* { dg-error \"incorrect rounding operand\" } */\n+  m128 = _mm_fnmadd_round_ss (m128, m128, m128, 7); /* { dg-error \"incorrect rounding operand\" } */\n+  m128d = _mm_fnmsub_round_sd (m128d, m128d, m128d, 7); /* { dg-error \"incorrect rounding operand\" } */\n+  m128 = _mm_fnmsub_round_ss (m128, m128, m128, 7); /* { dg-error \"incorrect rounding operand\" } */\n \n   m512d = _mm512_max_round_pd (m512d, m512d, 7); /* { dg-error \"incorrect rounding operand\" } */\n   m512d = _mm512_mask_max_round_pd (m512d, mmask8, m512d, m512d, 7); /* { dg-error \"incorrect rounding operand\" } */\n@@ -195,6 +218,10 @@ test_round (void)\n   m512 = _mm512_mask_cvt_roundph_ps (m512, mmask16, m256i, 7); /* { dg-error \"incorrect rounding operand\" } */\n   m512 = _mm512_maskz_cvt_roundph_ps (mmask16, m256i, 7); /* { dg-error \"incorrect rounding operand\" } */\n \n+  m128d = _mm_cvt_roundss_sd (m128d, m128, 7); /* { dg-error \"incorrect rounding operand\" } */\n+\n+  m128 = _mm_getexp_round_ss (m128, m128, 7); /* { dg-error \"incorrect rounding operand\" } */\n+  m128d = _mm_getexp_round_sd (m128d, m128d, 7); /* { dg-error \"incorrect rounding operand\" } */\n   m512 = _mm512_getexp_round_ps (m512, 7); /* { dg-error \"incorrect rounding operand\" } */\n   m512 = _mm512_mask_getexp_round_ps (m512, mmask16, m512, 7); /* { dg-error \"incorrect rounding operand\" } */\n   m512 = _mm512_maskz_getexp_round_ps (mmask16, m512, 7); /* { dg-error \"incorrect rounding operand\" } */\n@@ -207,13 +234,17 @@ test_round (void)\n   m512 = _mm512_getmant_round_ps (m512, 0, 0, 7); /* { dg-error \"incorrect rounding operand\" } */\n   m512 = _mm512_mask_getmant_round_ps (m512, mmask16, m512, 0, 0, 7); /* { dg-error \"incorrect rounding operand\" } */\n   m512 = _mm512_maskz_getmant_round_ps (mmask16, m512, 0, 0, 7); /* { dg-error \"incorrect rounding operand\" } */\n+  m128d = _mm_getmant_round_sd (m128d, m128d, 0, 0, 7); /* { dg-error \"incorrect rounding operand\" } */\n+  m128 = _mm_getmant_round_ss (m128, m128, 0, 0, 7); /* { dg-error \"incorrect rounding operand\" } */\n \n   m512 = _mm512_roundscale_round_ps (m512, 4, 7); /* { dg-error \"incorrect rounding operand\" } */\n   m512 = _mm512_mask_roundscale_round_ps (m512, mmask16, m512, 4, 7); /* { dg-error \"incorrect rounding operand\" } */\n   m512 = _mm512_maskz_roundscale_round_ps (mmask16, m512, 4, 7); /* { dg-error \"incorrect rounding operand\" } */\n   m512d = _mm512_roundscale_round_pd (m512d, 4, 7); /* { dg-error \"incorrect rounding operand\" } */\n   m512d = _mm512_mask_roundscale_round_pd (m512d, mmask8, m512d, 4, 7); /* { dg-error \"incorrect rounding operand\" } */\n   m512d = _mm512_maskz_roundscale_round_pd (mmask8, m512d, 4, 7); /* { dg-error \"incorrect rounding operand\" } */\n+  m128 = _mm_roundscale_round_ss (m128, m128, 4, 7); /* { dg-error \"incorrect rounding operand\" } */\n+  m128d = _mm_roundscale_round_sd (m128d, m128d, 4, 7); /* { dg-error \"incorrect rounding operand\" } */\n \n   mmask8 = _mm512_cmp_round_pd_mask (m512d, m512d, 4, 7); /* { dg-error \"incorrect rounding operand\" } */\n   mmask16 = _mm512_cmp_round_ps_mask (m512, m512, 4, 7); /* { dg-error \"incorrect rounding operand\" } */\n@@ -231,12 +262,19 @@ test_round (void)\n void\n test_round_sae (void)\n {\n+  m128d = _mm_add_round_sd (m128d, m128d, 5); /* { dg-error \"incorrect rounding operand\" } */\n+  m128 = _mm_add_round_ss (m128, m128, 5); /* { dg-error \"incorrect rounding operand\" } */\n+  m128d = _mm_sub_round_sd (m128d, m128d, 5); /* { dg-error \"incorrect rounding operand\" } */\n+  m128 = _mm_sub_round_ss (m128, m128, 5); /* { dg-error \"incorrect rounding operand\" } */\n+\n   m512d = _mm512_sqrt_round_pd (m512d, 5); /* { dg-error \"incorrect rounding operand\" } */\n   m512d = _mm512_mask_sqrt_round_pd (m512d, mmask8, m512d, 5); /* { dg-error \"incorrect rounding operand\" } */\n   m512d = _mm512_maskz_sqrt_round_pd (mmask8, m512d, 5); /* { dg-error \"incorrect rounding operand\" } */\n   m512 = _mm512_sqrt_round_ps (m512, 5); /* { dg-error \"incorrect rounding operand\" } */\n   m512 = _mm512_mask_sqrt_round_ps (m512, mmask16, m512, 5); /* { dg-error \"incorrect rounding operand\" } */\n   m512 = _mm512_maskz_sqrt_round_ps (mmask16, m512, 5); /* { dg-error \"incorrect rounding operand\" } */\n+  m128d = _mm_sqrt_round_sd (m128d, m128d, 5); /* { dg-error \"incorrect rounding operand\" } */\n+  m128 = _mm_sqrt_round_ss (m128, m128, 5); /* { dg-error \"incorrect rounding operand\" } */\n \n   m512d = _mm512_add_round_pd (m512d, m512d, 5); /* { dg-error \"incorrect rounding operand\" } */\n   m512d = _mm512_mask_add_round_pd (m512d, mmask8, m512d, m512d, 5); /* { dg-error \"incorrect rounding operand\" } */\n@@ -263,13 +301,19 @@ test_round_sae (void)\n   m512 = _mm512_div_round_ps (m512, m512, 5); /* { dg-error \"incorrect rounding operand\" } */\n   m512 = _mm512_mask_div_round_ps (m512, mmask16, m512, m512, 5); /* { dg-error \"incorrect rounding operand\" } */\n   m512 = _mm512_maskz_div_round_ps (mmask16, m512, m512, 5); /* { dg-error \"incorrect rounding operand\" } */\n+  m128d = _mm_mul_round_sd (m128d, m128d, 5); /* { dg-error \"incorrect rounding operand\" } */\n+  m128 = _mm_mul_round_ss (m128, m128, 5); /* { dg-error \"incorrect rounding operand\" } */\n+  m128d = _mm_div_round_sd (m128d, m128d, 5); /* { dg-error \"incorrect rounding operand\" } */\n+  m128 = _mm_div_round_ss (m128, m128, 5); /* { dg-error \"incorrect rounding operand\" } */\n \n   m512d = _mm512_scalef_round_pd(m512d, m512d, 5); /* { dg-error \"incorrect rounding operand\" } */\n   m512d = _mm512_mask_scalef_round_pd(m512d, mmask8, m512d, m512d, 5); /* { dg-error \"incorrect rounding operand\" } */\n   m512d = _mm512_maskz_scalef_round_pd(mmask8, m512d, m512d, 5); /* { dg-error \"incorrect rounding operand\" } */\n   m512 = _mm512_scalef_round_ps(m512, m512, 5); /* { dg-error \"incorrect rounding operand\" } */\n   m512 = _mm512_mask_scalef_round_ps(m512, mmask16, m512, m512, 5); /* { dg-error \"incorrect rounding operand\" } */\n   m512 = _mm512_maskz_scalef_round_ps(mmask16, m512, m512, 5); /* { dg-error \"incorrect rounding operand\" } */\n+  m128d = _mm_scalef_round_sd (m128d, m128d, 5); /* { dg-error \"incorrect rounding operand\" } */\n+  m128 = _mm_scalef_round_ss (m128, m128, 5); /* { dg-error \"incorrect rounding operand\" } */\n \n   m512d = _mm512_fmadd_round_pd (m512d, m512d, m512d, 5); /* { dg-error \"incorrect rounding operand\" } */\n   m512d = _mm512_mask_fmadd_round_pd (m512d, mmask8, m512d, m512d, 5); /* { dg-error \"incorrect rounding operand\" } */\n@@ -353,6 +397,16 @@ test_round_sae (void)\n   m256 = _mm512_cvt_roundpd_ps (m512d, 5); /* { dg-error \"incorrect rounding operand\" } */\n   m256 = _mm512_mask_cvt_roundpd_ps (m256, mmask8, m512d, 5); /* { dg-error \"incorrect rounding operand\" } */\n   m256 = _mm512_maskz_cvt_roundpd_ps (mmask8, m512d, 5); /* { dg-error \"incorrect rounding operand\" } */\n+  m128 = _mm_cvt_roundsd_ss (m128, m128d, 5); /* { dg-error \"incorrect rounding operand\" } */\n+\n+  m128d = _mm_fmadd_round_sd (m128d, m128d, m128d, 5); /* { dg-error \"incorrect rounding operand\" } */\n+  m128 = _mm_fmadd_round_ss (m128, m128, m128, 5); /* { dg-error \"incorrect rounding operand\" } */\n+  m128d = _mm_fmsub_round_sd (m128d, m128d, m128d, 5); /* { dg-error \"incorrect rounding operand\" } */\n+  m128 = _mm_fmsub_round_ss (m128, m128, m128, 5); /* { dg-error \"incorrect rounding operand\" } */\n+  m128d = _mm_fnmadd_round_sd (m128d, m128d, m128d, 5); /* { dg-error \"incorrect rounding operand\" } */\n+  m128 = _mm_fnmadd_round_ss (m128, m128, m128, 5); /* { dg-error \"incorrect rounding operand\" } */\n+  m128d = _mm_fnmsub_round_sd (m128d, m128d, m128d, 5); /* { dg-error \"incorrect rounding operand\" } */\n+  m128 = _mm_fnmsub_round_ss (m128, m128, m128, 5); /* { dg-error \"incorrect rounding operand\" } */\n }\n \n void\n@@ -411,6 +465,10 @@ test_sae_only (void)\n   m512 = _mm512_mask_cvt_roundph_ps (m512, mmask16, m256i, 3); /* { dg-error \"incorrect rounding operand\" } */\n   m512 = _mm512_maskz_cvt_roundph_ps (mmask16, m256i, 3); /* { dg-error \"incorrect rounding operand\" } */\n \n+  m128d = _mm_cvt_roundss_sd (m128d, m128, 3); /* { dg-error \"incorrect rounding operand\" } */\n+\n+  m128 = _mm_getexp_round_ss (m128, m128, 3); /* { dg-error \"incorrect rounding operand\" } */\n+  m128d = _mm_getexp_round_sd (m128d, m128d, 3); /* { dg-error \"incorrect rounding operand\" } */\n   m512 = _mm512_getexp_round_ps (m512, 3); /* { dg-error \"incorrect rounding operand\" } */\n   m512 = _mm512_mask_getexp_round_ps (m512, mmask16, m512, 3); /* { dg-error \"incorrect rounding operand\" } */\n   m512 = _mm512_maskz_getexp_round_ps (mmask16, m512, 3); /* { dg-error \"incorrect rounding operand\" } */\n@@ -423,12 +481,17 @@ test_sae_only (void)\n   m512 = _mm512_getmant_round_ps (m512, 0, 0, 3); /* { dg-error \"incorrect rounding operand\" } */\n   m512 = _mm512_mask_getmant_round_ps (m512, mmask16, m512, 0, 0, 3); /* { dg-error \"incorrect rounding operand\" } */\n   m512 = _mm512_maskz_getmant_round_ps (mmask16, m512, 0, 0, 3); /* { dg-error \"incorrect rounding operand\" } */\n+  m128d = _mm_getmant_round_sd (m128d, m128d, 0, 0, 3); /* { dg-error \"incorrect rounding operand\" } */\n+  m128 = _mm_getmant_round_ss (m128, m128, 0, 0, 3); /* { dg-error \"incorrect rounding operand\" } */\n+\n   m512 = _mm512_roundscale_round_ps (m512, 4, 3); /* { dg-error \"incorrect rounding operand\" } */\n   m512 = _mm512_mask_roundscale_round_ps (m512, mmask16, m512, 4, 3); /* { dg-error \"incorrect rounding operand\" } */\n   m512 = _mm512_maskz_roundscale_round_ps (mmask16, m512, 4, 3); /* { dg-error \"incorrect rounding operand\" } */\n   m512d = _mm512_roundscale_round_pd (m512d, 4, 3); /* { dg-error \"incorrect rounding operand\" } */\n   m512d = _mm512_mask_roundscale_round_pd (m512d, mmask8, m512d, 4, 3); /* { dg-error \"incorrect rounding operand\" } */\n   m512d = _mm512_maskz_roundscale_round_pd (mmask8, m512d, 4, 3); /* { dg-error \"incorrect rounding operand\" } */\n+  m128 = _mm_roundscale_round_ss (m128, m128, 4, 3); /* { dg-error \"incorrect rounding operand\" } */\n+  m128d = _mm_roundscale_round_sd (m128d, m128d, 4, 3); /* { dg-error \"incorrect rounding operand\" } */\n \n   mmask8 = _mm512_cmp_round_pd_mask (m512d, m512d, 4, 3); /* { dg-error \"incorrect rounding operand\" } */\n   mmask16 = _mm512_cmp_round_ps_mask (m512, m512, 4, 3); /* { dg-error \"incorrect rounding operand\" } */"}]}