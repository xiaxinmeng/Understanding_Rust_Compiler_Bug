{"sha": "bb7d32a918b86254669e38aeb10b16cdb2d43f81", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmI3ZDMyYTkxOGI4NjI1NDY2OWUzOGFlYjEwYjE2Y2RiMmQ0M2Y4MQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2005-08-24T15:00:19Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2005-08-24T15:00:19Z"}, "message": "re PR libstdc++/23465 (Assignment fails on TR1 unordered containers)\n\n2005-08-24  Paolo Carlini  <pcarlini@suse.de>\n\t    Chris Jefferson  <chris@bubblescope.net>\n\n\tPR libstdc++/23465\n\t* include/tr1/hashtable (hash_code_base::m_swap): Use\n\tstd::swap.\n\t(hashtable<>::hashtable(const hashtable&)): Use copy_code;\n\tfix m_allocate_node call.\n\t* testsuite/tr1/6_containers/unordered/hashtable/23465.cc: New.\n\nCo-Authored-By: Chris Jefferson <chris@bubblescope.net>\n\nFrom-SVN: r103441", "tree": {"sha": "5da5d3f68bf6de9f6b8e0671d2d1aba60f10df21", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5da5d3f68bf6de9f6b8e0671d2d1aba60f10df21"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bb7d32a918b86254669e38aeb10b16cdb2d43f81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb7d32a918b86254669e38aeb10b16cdb2d43f81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb7d32a918b86254669e38aeb10b16cdb2d43f81", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb7d32a918b86254669e38aeb10b16cdb2d43f81/comments", "author": null, "committer": null, "parents": [{"sha": "863a331486b914ecc90a157198b0384b927e3f21", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/863a331486b914ecc90a157198b0384b927e3f21", "html_url": "https://github.com/Rust-GCC/gccrs/commit/863a331486b914ecc90a157198b0384b927e3f21"}], "stats": {"total": 100, "additions": 87, "deletions": 13}, "files": [{"sha": "8ce2abb5f7b336e6c0a6be2cd8913bfaebb83e50", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb7d32a918b86254669e38aeb10b16cdb2d43f81/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb7d32a918b86254669e38aeb10b16cdb2d43f81/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=bb7d32a918b86254669e38aeb10b16cdb2d43f81", "patch": "@@ -1,3 +1,13 @@\n+2005-08-24  Paolo Carlini  <pcarlini@suse.de>\n+\t    Chris Jefferson  <chris@bubblescope.net>\n+\n+\tPR libstdc++/23465\n+\t* include/tr1/hashtable (hash_code_base::m_swap): Use\n+\tstd::swap.\n+\t(hashtable<>::hashtable(const hashtable&)): Use copy_code;\n+\tfix m_allocate_node call.\n+\t* testsuite/tr1/6_containers/unordered/hashtable/23465.cc: New.\n+\n 2005-08-23  Kelley Cook  <kcook@gcc.gnu.org>\n \n \tPR libstdc++/23462"}, {"sha": "4245e975d54b132a7b491681c44eb134186b36ac", "filename": "libstdc++-v3/include/tr1/hashtable", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb7d32a918b86254669e38aeb10b16cdb2d43f81/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fhashtable", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb7d32a918b86254669e38aeb10b16cdb2d43f81/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fhashtable", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fhashtable?ref=bb7d32a918b86254669e38aeb10b16cdb2d43f81", "patch": "@@ -631,9 +631,9 @@ namespace Internal\n       void\n       m_swap(hash_code_base& x)\n       {\n-\tm_extract.m_swap(x);\n-\tm_eq.m_swap(x);\n-\tm_ranged_hash.m_swap(x);\n+\tstd::swap(m_extract, x.m_extract);\n+\tstd::swap(m_eq, x.m_eq);\n+\tstd::swap(m_ranged_hash, x.m_ranged_hash);\n       }\n \n     protected:\n@@ -703,10 +703,10 @@ namespace Internal\n       void\n       m_swap(hash_code_base& x)\n       {\n-\tm_extract.m_swap(x);\n-\tm_eq.m_swap(x);\n-\tm_h1.m_swap(x);\n-\tm_h2.m_swap(x);\n+\tstd::swap(m_extract, x.m_extract);\n+\tstd::swap(m_eq, x.m_eq);\n+\tstd::swap(m_h1, x.m_h1);\n+\tstd::swap(m_h2, x.m_h2);\n       }\n \n     protected:\n@@ -762,10 +762,10 @@ namespace Internal\n       void\n       m_swap(hash_code_base& x)\n       {\n-\tm_extract.m_swap(x);\n-\tm_eq.m_swap(x);\n-\tm_h1.m_swap(x);\n-\tm_h2.m_swap(x);\n+\tstd::swap(m_extract, x.m_extract);\n+\tstd::swap(m_eq, x.m_eq);\n+\tstd::swap(m_h1, x.m_h1);\n+\tstd::swap(m_h2, x.m_h2);\n       }\n       \n     protected:\n@@ -1271,8 +1271,8 @@ namespace tr1\n \t      node** tail = m_buckets + i;\n \t      while (n)\n \t\t{\n-\t\t  *tail = m_allocate_node(n);\n-\t\t  (*tail).copy_code_from(n);\n+\t\t  *tail = m_allocate_node(n->m_v);\n+\t\t  this->copy_code(*tail, n);\n \t\t  tail = &((*tail)->m_next);\n \t\t  n = n->m_next;\n \t\t}"}, {"sha": "56c3ab5bb02390ae32c4753a401f65420c2673df", "filename": "libstdc++-v3/testsuite/tr1/6_containers/unordered/hashtable/23465.cc", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb7d32a918b86254669e38aeb10b16cdb2d43f81/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered%2Fhashtable%2F23465.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb7d32a918b86254669e38aeb10b16cdb2d43f81/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered%2Fhashtable%2F23465.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered%2Fhashtable%2F23465.cc?ref=bb7d32a918b86254669e38aeb10b16cdb2d43f81", "patch": "@@ -0,0 +1,64 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 6.3 Unordered associative containers\n+\n+#include <tr1/unordered_set>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/23465\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  for (float lf = 0.1; lf < 1001.0; lf *= 10.0)\n+    for (int size = 1; size <= 19683; size *= 3)\n+      {\n+\tstd::tr1::unordered_set<int> us1, us2;\n+\ttypedef std::tr1::unordered_set<int>::local_iterator local_iterator;\n+\ttypedef std::tr1::unordered_set<int>::size_type      size_type;\n+\t\n+\tus1.max_load_factor(lf);\n+\n+\tfor (int i = 0; i < size; ++i)\n+\t  us1.insert(i);\n+\t\n+\tus2 = us1;\n+\t\n+\tVERIFY( us2.size() == us1.size() );\n+\tVERIFY( us2.bucket_count() == us1.bucket_count() );\n+\t\n+\tfor (size_type b = 0; b < us1.bucket_count(); ++b)\n+\t  {\n+\t    size_type cnt = 0;\n+\t    for (local_iterator it1 = us1.begin(b), it2 = us2.begin(b);\n+\t\t it1 != us1.end(b) && it2 != us2.end(b); ++it1, ++it2)\n+\t      {\n+\t\tVERIFY( *it1 == *it2 );\n+\t\t++cnt;\n+\t      }\n+\t    VERIFY( cnt == us1.bucket_size(b) );\n+\t  }\n+      }\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}