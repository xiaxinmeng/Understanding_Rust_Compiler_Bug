{"sha": "9ba11d5ad27ef61a6468ef5a0dbd9a8782ce8078", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWJhMTFkNWFkMjdlZjYxYTY0NjhlZjVhMGRiZDlhODc4MmNlODA3OA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-05-19T19:53:17Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-05-19T19:53:17Z"}, "message": "jump.c (redirect_jump): Add delete_unused argument.\n\n        * jump.c (redirect_jump): Add delete_unused argument.  Don't\n        remove labels and code following when LABEL_NUSES goes to zero.\n        (invert_jump): Likewise.\n        (jump_optimize_1): Fix redirect/invert arguments.\n        (do_cross_jump, thread_jumps): Likewise.\n        * flow.c (split_edge): Likewise.\n        * reorg.c (optimize_skip): Likewise.\n        (reorg_redirect_jump, relax_delay_slots, dbr_schedule): Likewise.\n        * profile.c (instrument_arcs): Likewise.\n        * loop.c (find_and_verify_loops): Likewise.  Fix indentation.\n        * rtl.h: Update prototypes.\n\nFrom-SVN: r34033", "tree": {"sha": "333e24b7a9ae466ce4ae322302b06179b4f1e78c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/333e24b7a9ae466ce4ae322302b06179b4f1e78c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9ba11d5ad27ef61a6468ef5a0dbd9a8782ce8078", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ba11d5ad27ef61a6468ef5a0dbd9a8782ce8078", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ba11d5ad27ef61a6468ef5a0dbd9a8782ce8078", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ba11d5ad27ef61a6468ef5a0dbd9a8782ce8078/comments", "author": null, "committer": null, "parents": [{"sha": "63864c8290f068039cc1db1078dbf60ce4a33ca9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63864c8290f068039cc1db1078dbf60ce4a33ca9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63864c8290f068039cc1db1078dbf60ce4a33ca9"}], "stats": {"total": 228, "additions": 118, "deletions": 110}, "files": [{"sha": "0ba93a4ef572493898615178a19ec31b134ffa47", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ba11d5ad27ef61a6468ef5a0dbd9a8782ce8078/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ba11d5ad27ef61a6468ef5a0dbd9a8782ce8078/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9ba11d5ad27ef61a6468ef5a0dbd9a8782ce8078", "patch": "@@ -1,3 +1,17 @@\n+2000-05-19  Richard Henderson  <rth@cygnus.com>\n+\n+\t* jump.c (redirect_jump): Add delete_unused argument.  Don't\n+\tremove labels and code following when LABEL_NUSES goes to zero.\n+\t(invert_jump): Likewise.\n+\t(jump_optimize_1): Fix redirect/invert arguments.\n+\t(do_cross_jump, thread_jumps): Likewise.\n+\t* flow.c (split_edge): Likewise.\n+\t* reorg.c (optimize_skip): Likewise.\n+\t(reorg_redirect_jump, relax_delay_slots, dbr_schedule): Likewise.\n+\t* profile.c (instrument_arcs): Likewise.\n+\t* loop.c (find_and_verify_loops): Likewise.  Fix indentation.\n+\t* rtl.h: Update prototypes.\n+\n Fri May 19 12:05:13 2000  Clinton Popetz  <cpopetz@cygnus.com>\n \n \t* ssa.c (convert_from_ssa): Tell life_analysis we need death \n@@ -52,7 +66,7 @@ Fri May 19 06:49:35 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n 2000-05-18 Mark Elbrecht <snowball3@bigfoot.com>\n \n-        * configure.in (*-pc-msdosdjgpp): Set float_format to none.\n+\t* configure.in (*-pc-msdosdjgpp): Set float_format to none.\n \t* configure: Rebuilt.\n \n 2000-05-18  Zack Weinberg  <zack@wolery.cumb.org>"}, {"sha": "e6d4bbbcbfa5f7f48a79f0d695d271059887c6c2", "filename": "gcc/flow.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ba11d5ad27ef61a6468ef5a0dbd9a8782ce8078/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ba11d5ad27ef61a6468ef5a0dbd9a8782ce8078/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=9ba11d5ad27ef61a6468ef5a0dbd9a8782ce8078", "patch": "@@ -1556,7 +1556,7 @@ split_edge (edge_in)\n \t  if (JUMP_LABEL (insn) != old_label)\n \t    abort ();\n \n-\t  redirect_jump (insn, new_label);\n+\t  redirect_jump (insn, new_label, 0);\n \t}\n \n       emit_label_before (new_label, bb_note);"}, {"sha": "8711ba95efd3168f32f1c92a42d46be737a97cd5", "filename": "gcc/jump.c", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ba11d5ad27ef61a6468ef5a0dbd9a8782ce8078/gcc%2Fjump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ba11d5ad27ef61a6468ef5a0dbd9a8782ce8078/gcc%2Fjump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjump.c?ref=9ba11d5ad27ef61a6468ef5a0dbd9a8782ce8078", "patch": "@@ -342,7 +342,7 @@ jump_optimize_1 (f, cross_jump, noop_moves, after_regscan,\n \t  /* See if this jump goes to another jump and redirect if so.  */\n \t  nlabel = follow_jumps (JUMP_LABEL (insn));\n \t  if (nlabel != JUMP_LABEL (insn))\n-\t    changed |= redirect_jump (insn, nlabel);\n+\t    changed |= redirect_jump (insn, nlabel, 1);\n \n \t  if (! optimize || minimal)\n \t    continue;\n@@ -444,7 +444,7 @@ jump_optimize_1 (f, cross_jump, noop_moves, after_regscan,\n \t      if (prev_label)\n \t\t++LABEL_NUSES (prev_label);\n \n-\t      if (invert_jump (insn, JUMP_LABEL (reallabelprev)))\n+\t      if (invert_jump (insn, JUMP_LABEL (reallabelprev), 1))\n \t\t{\n \t\t  /* It is very likely that if there are USE insns before\n \t\t     this jump, they hold REG_DEAD notes.  These REG_DEAD\n@@ -507,7 +507,7 @@ jump_optimize_1 (f, cross_jump, noop_moves, after_regscan,\n \t\t}\n \n \t      delete_insn (temp);\n-\t      redirect_jump (insn, get_label_before (temp1));\n+\t      redirect_jump (insn, get_label_before (temp1), 1);\n \t      reallabelprev = prev_real_insn (temp1);\n \t      changed = 1;\n \t      next = NEXT_INSN (insn);\n@@ -579,7 +579,7 @@ jump_optimize_1 (f, cross_jump, noop_moves, after_regscan,\n \t\t       && swap_condition (GET_CODE (temp2)) == GET_CODE (tc)\n \t\t       && rtx_equal_p (XEXP (tc, 0), XEXP (temp2, 0))\n \t\t       && rtx_equal_p (XEXP (tc, 1), XEXP (temp2, 1))\n-\t\t       && redirect_jump (insn, get_label_after (temp)))\n+\t\t       && redirect_jump (insn, get_label_after (temp), 1))\n \t\t{\n \t\t  changed = 1;\n \t\t  continue;\n@@ -1629,7 +1629,7 @@ do_cross_jump (insn, newjpos, newlpos)\n \t}\n     }\n   else\n-    redirect_jump (insn, label);\n+    redirect_jump (insn, label, 1);\n \n   /* Delete the matching insns before the jump.  Also, remove any REG_EQUAL\n      or REG_EQUIV note in the NEWLPOS stream that isn't also present in\n@@ -3182,8 +3182,9 @@ redirect_jump_1 (jump, nlabel)\n    (this can only occur for NLABEL == 0).  */\n \n int\n-redirect_jump (jump, nlabel)\n+redirect_jump (jump, nlabel, delete_unused)\n      rtx jump, nlabel;\n+     int delete_unused;\n {\n   register rtx olabel = JUMP_LABEL (jump);\n \n@@ -3221,7 +3222,7 @@ redirect_jump (jump, nlabel)\n       && NOTE_LINE_NUMBER (NEXT_INSN (olabel)) == NOTE_INSN_FUNCTION_END)\n     emit_note_after (NOTE_INSN_FUNCTION_END, nlabel);\n \n-  if (olabel && --LABEL_NUSES (olabel) == 0)\n+  if (olabel && --LABEL_NUSES (olabel) == 0 && delete_unused)\n     delete_insn (olabel);\n \n   return 1;\n@@ -3321,8 +3322,9 @@ invert_jump_1 (jump, nlabel)\n    NLABEL instead of where it jumps now.  Return true if successful.  */\n \n int\n-invert_jump (jump, nlabel)\n+invert_jump (jump, nlabel, delete_unused)\n      rtx jump, nlabel;\n+     int delete_unused;\n {\n   /* We have to either invert the condition and change the label or\n      do neither.  Either operation could fail.  We first try to invert\n@@ -3332,7 +3334,7 @@ invert_jump (jump, nlabel)\n   if (! invert_exp (PATTERN (jump), jump))\n     return 0;\n \n-  if (redirect_jump (jump, nlabel))\n+  if (redirect_jump (jump, nlabel, delete_unused))\n     {\n       /* An inverted jump means that a probability taken becomes a\n \t probability not taken.  Subtract the branch probability from the\n@@ -3911,7 +3913,7 @@ thread_jumps (f, max_reg, flag_before_loop)\n \t\t\t      new_label = gen_label_rtx ();\n \t\t\t      emit_label_after (new_label, PREV_INSN (prev));\n \t\t\t    }\n-\t\t\t  changed |= redirect_jump (b1, new_label);\n+\t\t\t  changed |= redirect_jump (b1, new_label, 1);\n \t\t\t}\n \t\t      break;\n \t\t    }"}, {"sha": "a8e71b715452770f652b4b7e0d850b3e4422a168", "filename": "gcc/loop.c", "status": "modified", "additions": 80, "deletions": 80, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ba11d5ad27ef61a6468ef5a0dbd9a8782ce8078/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ba11d5ad27ef61a6468ef5a0dbd9a8782ce8078/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=9ba11d5ad27ef61a6468ef5a0dbd9a8782ce8078", "patch": "@@ -2865,86 +2865,86 @@ find_and_verify_loops (f, loops)\n \n \t\t    /* Verify that uid_loop is large enough and that\n \t\t       we can invert P.  */\n-\t\t   if (invert_jump (p, new_label))\n-\t\t     {\n-\t\t       rtx q, r;\n-\n-\t\t       /* If no suitable BARRIER was found, create a suitable\n-\t\t\t  one before TARGET.  Since TARGET is a fall through\n-\t\t\t  path, we'll need to insert an jump around our block\n-\t\t\t  and a add a BARRIER before TARGET.\n-\n-\t\t\t  This creates an extra unconditional jump outside\n-\t\t\t  the loop.  However, the benefits of removing rarely\n-\t\t\t  executed instructions from inside the loop usually\n-\t\t\t  outweighs the cost of the extra unconditional jump\n-\t\t\t  outside the loop.  */\n-\t\t       if (loc == 0)\n-\t\t\t {\n-\t\t\t   rtx temp;\n-\n-\t\t           temp = gen_jump (JUMP_LABEL (insn));\n-\t\t\t   temp = emit_jump_insn_before (temp, target);\n-\t\t\t   JUMP_LABEL (temp) = JUMP_LABEL (insn);\n-\t\t\t   LABEL_NUSES (JUMP_LABEL (insn))++;\n-\t\t\t   loc = emit_barrier_before (target);\n-\t\t\t }\n-\n-\t\t       /* Include the BARRIER after INSN and copy the\n-\t\t\t  block after LOC.  */\n-\t\t       new_label = squeeze_notes (new_label, \n-\t\t\t\t\t\t  last_insn_to_move);\n-\t\t       reorder_insns (new_label, last_insn_to_move, loc);\n-\n-\t\t       /* All those insns are now in TARGET_LOOP.  */\n-\t\t       for (q = new_label; \n-\t\t\t    q != NEXT_INSN (last_insn_to_move);\n-\t\t\t    q = NEXT_INSN (q))\n-\t\t\t uid_loop[INSN_UID (q)] = target_loop;\n-\n-\t\t       /* The label jumped to by INSN is no longer a loop exit.\n-\t\t\t  Unless INSN does not have a label (e.g., it is a\n-\t\t\t  RETURN insn), search loop->exit_labels to find\n-\t\t\t  its label_ref, and remove it.  Also turn off\n-\t\t\t  LABEL_OUTSIDE_LOOP_P bit.  */\n-\t\t       if (JUMP_LABEL (insn))\n-\t\t\t {\n-\t\t\t   for (q = 0,\n-\t\t\t\tr = this_loop->exit_labels;\n-\t\t\t\tr; q = r, r = LABEL_NEXTREF (r))\n-\t\t\t     if (XEXP (r, 0) == JUMP_LABEL (insn))\n-\t\t\t       {\n-\t\t\t\t LABEL_OUTSIDE_LOOP_P (r) = 0;\n-\t\t\t\t if (q)\n-\t\t\t\t   LABEL_NEXTREF (q) = LABEL_NEXTREF (r);\n-\t\t\t\t else\n-\t\t\t\t   this_loop->exit_labels = LABEL_NEXTREF (r);\n-\t\t\t\t break;\n-\t\t\t       }\n-\n-\t\t\t   for (loop = this_loop; loop && loop != target_loop;\n-\t\t\t\tloop = loop->outer)\n-\t\t\t     loop->exit_count--;\n-\n-\t\t\t   /* If we didn't find it, then something is\n-                              wrong.  */\n-\t\t\t   if (! r)\n-\t\t\t     abort ();\n-\t\t\t }\n-\n-\t\t       /* P is now a jump outside the loop, so it must be put\n-\t\t\t  in loop->exit_labels, and marked as such.\n-\t\t\t  The easiest way to do this is to just call\n-\t\t\t  mark_loop_jump again for P.  */\n-\t\t       mark_loop_jump (PATTERN (p), this_loop);\n-\n-\t\t       /* If INSN now jumps to the insn after it,\n-\t\t\t  delete INSN.  */\n-\t\t       if (JUMP_LABEL (insn) != 0\n-\t\t\t   && (next_real_insn (JUMP_LABEL (insn))\n-\t\t\t       == next_real_insn (insn)))\n-\t\t\t delete_insn (insn);\n-\t\t     }\n+\t\t    if (invert_jump (p, new_label, 1))\n+\t\t      {\n+\t\t\trtx q, r;\n+\n+\t\t\t/* If no suitable BARRIER was found, create a suitable\n+\t\t\t   one before TARGET.  Since TARGET is a fall through\n+\t\t\t   path, we'll need to insert an jump around our block\n+\t\t\t   and a add a BARRIER before TARGET.\n+\n+\t\t\t   This creates an extra unconditional jump outside\n+\t\t\t   the loop.  However, the benefits of removing rarely\n+\t\t\t   executed instructions from inside the loop usually\n+\t\t\t   outweighs the cost of the extra unconditional jump\n+\t\t\t   outside the loop.  */\n+\t\t\tif (loc == 0)\n+\t\t\t  {\n+\t\t\t    rtx temp;\n+\n+\t\t\t    temp = gen_jump (JUMP_LABEL (insn));\n+\t\t\t    temp = emit_jump_insn_before (temp, target);\n+\t\t\t    JUMP_LABEL (temp) = JUMP_LABEL (insn);\n+\t\t\t    LABEL_NUSES (JUMP_LABEL (insn))++;\n+\t\t\t    loc = emit_barrier_before (target);\n+\t\t\t  }\n+\n+\t\t\t/* Include the BARRIER after INSN and copy the\n+\t\t\t   block after LOC.  */\n+\t\t\tnew_label = squeeze_notes (new_label, \n+\t\t\t\t\t\t   last_insn_to_move);\n+\t\t\treorder_insns (new_label, last_insn_to_move, loc);\n+\n+\t\t\t/* All those insns are now in TARGET_LOOP.  */\n+\t\t\tfor (q = new_label; \n+\t\t\t     q != NEXT_INSN (last_insn_to_move);\n+\t\t\t     q = NEXT_INSN (q))\n+\t\t\t  uid_loop[INSN_UID (q)] = target_loop;\n+\n+\t\t\t/* The label jumped to by INSN is no longer a loop\n+\t\t\t   exit.  Unless INSN does not have a label (e.g.,\n+\t\t\t   it is a RETURN insn), search loop->exit_labels\n+\t\t\t   to find its label_ref, and remove it.  Also turn\n+\t\t\t   off LABEL_OUTSIDE_LOOP_P bit.  */\n+\t\t\tif (JUMP_LABEL (insn))\n+\t\t\t  {\n+\t\t\t    for (q = 0,\n+\t\t\t\t   r = this_loop->exit_labels;\n+\t\t\t\t r; q = r, r = LABEL_NEXTREF (r))\n+\t\t\t      if (XEXP (r, 0) == JUMP_LABEL (insn))\n+\t\t\t\t{\n+\t\t\t\t  LABEL_OUTSIDE_LOOP_P (r) = 0;\n+\t\t\t\t  if (q)\n+\t\t\t\t    LABEL_NEXTREF (q) = LABEL_NEXTREF (r);\n+\t\t\t\t  else\n+\t\t\t\t    this_loop->exit_labels = LABEL_NEXTREF (r);\n+\t\t\t\t  break;\n+\t\t\t\t}\n+\n+\t\t\t    for (loop = this_loop; loop && loop != target_loop;\n+\t\t\t\t loop = loop->outer)\n+\t\t\t      loop->exit_count--;\n+\n+\t\t\t    /* If we didn't find it, then something is\n+\t\t\t       wrong.  */\n+\t\t\t    if (! r)\n+\t\t\t      abort ();\n+\t\t\t  }\n+\n+\t\t\t/* P is now a jump outside the loop, so it must be put\n+\t\t\t   in loop->exit_labels, and marked as such.\n+\t\t\t   The easiest way to do this is to just call\n+\t\t\t   mark_loop_jump again for P.  */\n+\t\t\tmark_loop_jump (PATTERN (p), this_loop);\n+\n+\t\t\t/* If INSN now jumps to the insn after it,\n+\t\t\t   delete INSN.  */\n+\t\t\tif (JUMP_LABEL (insn) != 0\n+\t\t\t    && (next_real_insn (JUMP_LABEL (insn))\n+\t\t\t\t== next_real_insn (insn)))\n+\t\t\t  delete_insn (insn);\n+\t\t      }\n \n \t\t    /* Continue the loop after where the conditional\n \t\t       branch used to jump, since the only branch insn"}, {"sha": "69ac575168d9b5cbfab965c026d0bd16f07eec4c", "filename": "gcc/profile.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ba11d5ad27ef61a6468ef5a0dbd9a8782ce8078/gcc%2Fprofile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ba11d5ad27ef61a6468ef5a0dbd9a8782ce8078/gcc%2Fprofile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprofile.c?ref=9ba11d5ad27ef61a6468ef5a0dbd9a8782ce8078", "patch": "@@ -293,14 +293,14 @@ instrument_arcs (f, num_blocks, dump_file)\n \t\t  if (this_is_simplejump)\n \t\t    {\n \t\t      after = NEXT_INSN (arcptr->branch_insn);\n-\t\t      if (! redirect_jump (arcptr->branch_insn, new_label))\n+\t\t      if (! redirect_jump (arcptr->branch_insn, new_label, 1))\n \t\t\t/* Don't know what to do if this branch won't\n \t\t\t   redirect.  */\n \t\t\tabort ();\n \t\t    }\n \t\t  else\n \t\t    {\n-\t\t      if (! invert_jump (arcptr->branch_insn, new_label))\n+\t\t      if (! invert_jump (arcptr->branch_insn, new_label, 1))\n \t\t\t/* Don't know what to do if this branch won't invert.  */\n \t\t\tabort ();\n "}, {"sha": "e5c58873aa25bc463263164e8c859f3068929d22", "filename": "gcc/reorg.c", "status": "modified", "additions": 6, "deletions": 14, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ba11d5ad27ef61a6468ef5a0dbd9a8782ce8078/gcc%2Freorg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ba11d5ad27ef61a6468ef5a0dbd9a8782ce8078/gcc%2Freorg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freorg.c?ref=9ba11d5ad27ef61a6468ef5a0dbd9a8782ce8078", "patch": "@@ -733,7 +733,7 @@ optimize_skip (insn)\n     {\n       if (eligible_for_annul_false (insn, 0, trial, flags))\n \t{\n-\t  if (invert_jump (insn, JUMP_LABEL (insn)))\n+\t  if (invert_jump (insn, JUMP_LABEL (insn), 1))\n \t    INSN_FROM_TARGET_P (trial) = 1;\n \t  else if (! eligible_for_annul_true (insn, 0, trial, flags))\n \t    return 0;\n@@ -1888,7 +1888,7 @@ reorg_redirect_jump (jump, nlabel)\n      rtx nlabel;\n {\n   incr_ticks_for_insn (jump);\n-  return redirect_jump (jump, nlabel);\n+  return redirect_jump (jump, nlabel, 1);\n }\n \n /* Called when INSN is being moved forward into a delay slot of DELAYED_INSN.\n@@ -3087,7 +3087,7 @@ relax_delay_slots (first)\n \t      if (label)\n \t\t++LABEL_NUSES (label);\n \n-\t      if (invert_jump (insn, label))\n+\t      if (invert_jump (insn, label, 1))\n \t\t{\n \t\t  delete_insn (next);\n \t\t  next = insn;\n@@ -3123,16 +3123,8 @@ relax_delay_slots (first)\n \t  rtx other_target = JUMP_LABEL (other);\n \t  target_label = JUMP_LABEL (insn);\n \n-\t  /* Increment the count of OTHER_TARGET, so it doesn't get deleted\n-\t     as we move the label.  */\n-\t  if (other_target)\n-\t    ++LABEL_NUSES (other_target);\n-\n-\t  if (invert_jump (other, target_label))\n+\t  if (invert_jump (other, target_label, 0))\n \t    reorg_redirect_jump (insn, other_target);\n-\n-\t  if (other_target)\n-\t    --LABEL_NUSES (other_target);\n \t}\n \n       /* Now look only at cases where we have filled a delay slot.  */\n@@ -3338,7 +3330,7 @@ relax_delay_slots (first)\n \t      if (old_label)\n \t\t++LABEL_NUSES (old_label);\n \n-\t      if (invert_jump (delay_insn, label))\n+\t      if (invert_jump (delay_insn, label, 1))\n \t\t{\n \t\t  int i;\n \n@@ -3570,7 +3562,7 @@ dbr_schedule (first, file)\n \t  && JUMP_LABEL (insn) != 0\n \t  && ((target = prev_label (next_active_insn (JUMP_LABEL (insn))))\n \t      != JUMP_LABEL (insn)))\n-\tredirect_jump (insn, target);\n+\tredirect_jump (insn, target, 1);\n     }\n \n   init_resource_info (epilogue_insn);"}, {"sha": "de088179e521f7b4b28f859c2df251baa7638bbc", "filename": "gcc/rtl.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ba11d5ad27ef61a6468ef5a0dbd9a8782ce8078/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ba11d5ad27ef61a6468ef5a0dbd9a8782ce8078/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=9ba11d5ad27ef61a6468ef5a0dbd9a8782ce8078", "patch": "@@ -1522,11 +1522,11 @@ extern int returnjump_p\t\t\tPARAMS ((rtx));\n extern int onlyjump_p\t\t\tPARAMS ((rtx));\n extern int sets_cc0_p\t\t\tPARAMS ((rtx));\n extern int invert_jump_1\t\tPARAMS ((rtx, rtx));\n-extern int invert_jump\t\t\tPARAMS ((rtx, rtx));\n+extern int invert_jump\t\t\tPARAMS ((rtx, rtx, int));\n extern int rtx_renumbered_equal_p\tPARAMS ((rtx, rtx));\n extern int true_regnum\t\t\tPARAMS ((rtx));\n extern int redirect_jump_1\t\tPARAMS ((rtx, rtx));\n-extern int redirect_jump\t\tPARAMS ((rtx, rtx));\n+extern int redirect_jump\t\tPARAMS ((rtx, rtx, int));\n extern void jump_optimize\t\tPARAMS ((rtx, int, int, int));\n extern void jump_optimize_minimal\tPARAMS ((rtx));\n extern void rebuild_jump_labels\t\tPARAMS ((rtx));"}]}