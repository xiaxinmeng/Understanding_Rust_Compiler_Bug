{"sha": "6c46750c837935a8d0abc8eeabe77c3418b3dfe8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmM0Njc1MGM4Mzc5MzVhOGQwYWJjOGVlYWJlNzdjMzQxOGIzZGZlOA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2012-11-04T22:28:42Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2012-11-04T22:28:42Z"}, "message": "combine.c: Adjust toplevel comment.\n\n\t* combine.c: Adjust toplevel comment.\n\t(make_extraction): Adjust head comment and move up canonicalization.\n\nFrom-SVN: r193141", "tree": {"sha": "48a1a5149647347dc91c04d22e688821843f2894", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/48a1a5149647347dc91c04d22e688821843f2894"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6c46750c837935a8d0abc8eeabe77c3418b3dfe8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c46750c837935a8d0abc8eeabe77c3418b3dfe8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c46750c837935a8d0abc8eeabe77c3418b3dfe8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c46750c837935a8d0abc8eeabe77c3418b3dfe8/comments", "author": null, "committer": null, "parents": [{"sha": "e1066560cca862e036c82e80cadb30cbcd139456", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1066560cca862e036c82e80cadb30cbcd139456", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1066560cca862e036c82e80cadb30cbcd139456"}], "stats": {"total": 31, "additions": 19, "deletions": 12}, "files": [{"sha": "5ee5ef7f8d44c4a9e8e5a670c1359b8f3b83691a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c46750c837935a8d0abc8eeabe77c3418b3dfe8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c46750c837935a8d0abc8eeabe77c3418b3dfe8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6c46750c837935a8d0abc8eeabe77c3418b3dfe8", "patch": "@@ -1,4 +1,10 @@\n-2012-11-04  Alexandre Oliva <aoliva@redhat.com>, Jakub Jelinek <jakub@redhat.com>\n+2012-11-04  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* combine.c: Adjust toplevel comment.\n+\t(make_extraction): Adjust head comment and move up canonicalization.\n+\n+2012-11-04  Alexandre Oliva <aoliva@redhat.com>\n+            Jakub Jelinek <jakub@redhat.com>\n \n \tPR debug/54693\n \t* tree-ssa-loop-ivopts.c (remove_unused_ivs): Emit debug temps"}, {"sha": "00719a76f776c860a4c3e8e270e4581457d79d07", "filename": "gcc/combine.c", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c46750c837935a8d0abc8eeabe77c3418b3dfe8/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c46750c837935a8d0abc8eeabe77c3418b3dfe8/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=6c46750c837935a8d0abc8eeabe77c3418b3dfe8", "patch": "@@ -30,8 +30,10 @@ along with GCC; see the file COPYING3.  If not see\n    They were set up by the preceding pass (lifetime analysis).\n \n    We try to combine each pair of insns joined by a logical link.\n-   We also try to combine triples of insns A, B and C when\n-   C has a link back to B and B has a link back to A.\n+   We also try to combine triplets of insns A, B and C when C has\n+   a link back to B and B has a link back to A.  Likewise for a\n+   small number of quadruplets of insns A, B, C and D for which\n+   there's high likelihood of of success.\n \n    LOG_LINKS does not have links for use of the CC0.  They don't\n    need to, because the insn that sets the CC0 is always immediately\n@@ -6958,14 +6960,13 @@ expand_field_assignment (const_rtx x)\n }\n \f\n /* Return an RTX for a reference to LEN bits of INNER.  If POS_RTX is nonzero,\n-   it is an RTX that represents a variable starting position; otherwise,\n-   POS is the (constant) starting bit position (counted from the LSB).\n+   it is an RTX that represents the (variable) starting position; otherwise,\n+   POS is the (constant) starting bit position.  Both are counted from the LSB.\n \n-   UNSIGNEDP is nonzero for an unsigned reference and zero for a\n-   signed reference.\n+   UNSIGNEDP is nonzero for an unsigned reference and zero for a signed one.\n \n-   IN_DEST is nonzero if this is a reference in the destination of a\n-   SET.  This is used when a ZERO_ or SIGN_EXTRACT isn't needed.  If nonzero,\n+   IN_DEST is nonzero if this is a reference in the destination of a SET.\n+   This is used when a ZERO_ or SIGN_EXTRACT isn't needed.  If nonzero,\n    a STRICT_LOW_PART will be used, if zero, ZERO_EXTEND or SIGN_EXTEND will\n    be used.\n \n@@ -6996,6 +6997,9 @@ make_extraction (enum machine_mode mode, rtx inner, HOST_WIDE_INT pos,\n   rtx orig_pos_rtx = pos_rtx;\n   HOST_WIDE_INT orig_pos;\n \n+  if (pos_rtx && CONST_INT_P (pos_rtx))\n+    pos = INTVAL (pos_rtx), pos_rtx = 0;\n+\n   if (GET_CODE (inner) == SUBREG && subreg_lowpart_p (inner))\n     {\n       /* If going from (subreg:SI (mem:QI ...)) to (mem:QI ...),\n@@ -7025,9 +7029,6 @@ make_extraction (enum machine_mode mode, rtx inner, HOST_WIDE_INT pos,\n \n   inner_mode = GET_MODE (inner);\n \n-  if (pos_rtx && CONST_INT_P (pos_rtx))\n-    pos = INTVAL (pos_rtx), pos_rtx = 0;\n-\n   /* See if this can be done without an extraction.  We never can if the\n      width of the field is not the same as that of some integer mode. For\n      registers, we can only avoid the extraction if the position is at the"}]}