{"sha": "73d1e5721d54089c77c8975830638aeea449d49e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzNkMWU1NzIxZDU0MDg5Yzc3Yzg5NzU4MzA2MzhhZWVhNDQ5ZDQ5ZQ==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2018-04-19T15:15:04Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2018-04-19T15:15:04Z"}, "message": "x86: Enable -fcf-protection with multi-byte NOPs\n\n-fcf-protection -mcet can't be used with IFUNC features, like symbol\nmultiversioning or target clone, since IBT/SHSTK are applied to the whole\nprogram and they may be disabled in some functions.  But -fcf-protection\nis implemented with multi-byte NOPs on all 64-bit processors as well as\n32-bit processors starting with Pentium Pro.  If -fcf-protection requires\n-mcet, IFUNC features can't be used on Linux when -fcf-protection is\nenabled by default.\n\nThis patch changes -fcf-protection to implement indirect branch and\nreturn address tracking with multi-byte NOPs.  -mibt and -mshstk are\nchanged to only enable CET built-in functions.  CET tests are updated\nto allow -fcf-protection without -mibt, -mshstk and -mcet on x86.\n-fcf-protection=none are also added to tests which fail with\n-fcf-protection so that -fcf-protection can be added to RUNTESTFLAGS\nto verify -fcf-protection implementation.\n\ngcc/\n\n\tPR target/85417\n\t* config/i386/cet.c (file_end_indicate_exec_stack_and_cet):\n\tCheck flag_cf_protection instead of TARGET_IBT and TARGET_SHSTK.\n\t* config/i386/i386-c.c (ix86_target_macros_internal): Also\n\tdefine __IBT__ and __SHSTK__ for -fcf-protection.\n\t* config/i386/i386.c (pass_insert_endbranch::gate): Don't check\n\tTARGET_IBT.\n\t(ix86_trampoline_init): Likewise.\n\t(x86_output_mi_thunk): Likewise.\n\t(ix86_notrack_prefixed_insn_p): Likewise.\n\t(ix86_option_override_internal): Don't disallow -fcf-protection.\n\t* config/i386/i386.md (rdssp<mode>): Also enable for\n\t-fcf-protection.\n\t(incssp<mode>): Likewise.\n\t(nop_endbr): Likewise.\n\t* config/i386/i386.opt (mcet): Change help message to built-in\n\tfunctions only.\n\t(mibt): Likewise.\n\t(mshstk): Likewise.\n\t* doc/invoke.texi: Remove -mcet, -mibt and -mshstk condition\n\ton -fcf-protection.  Change -mcet, -mibt and -mshstk to only\n\tenable CET built-in functions.\n\ngcc/testsuite/\n\n\tPR target/85417\n\t* c-c++-common/attr-nocf-check-1.c: Compile with\n\t-fcf-protection=none.\n\t* c-c++-common/attr-nocf-check-3.c: Likewise.\n\t* gcc.dg/march-generic.c: Likewise.\n\t* gcc.target/i386/align-limit.c: Likewise.\n\t* gcc.target/i386/cet-notrack-icf-1.c: Likewise.\n\t* gcc.target/i386/cet-notrack-icf-3.c: Likewise.\n\t* gcc.target/i386/cet-property-2.c: Likewise.\n\t* gcc.target/i386/ret-thunk-26.c: Likewise.\n\t* c-c++-common/fcf-protection-1.c: Remove dg-error for x86\n\ttargets.\n\t* c-c++-common/fcf-protection-2.c: Likewise.\n\t* c-c++-common/fcf-protection-3.c: Likewise.\n\t* c-c++-common/fcf-protection-5.c: Likewise.\n\t* c-c++-common/fcf-protection-6.c: Likewise.\n\t* c-c++-common/fcf-protection-7.c: Likewise.\n\t* gcc.target/i386/cet-label-3.c: New test.\n\t* gcc.target/i386/cet-property-3.c: Likewise.\n\t* gcc.target/i386/cet-sjlj-7.c: Likewise.\n\t* gcc.target/i386/pr85417-1.c: Likewise.\n\t* gcc.target/i386/indirect-thunk-attr-7.c: Also expect\n\t__x86_indirect_thunk_nt_(r|e)ax\n\t* gcc.target/i386/indirect-thunk-extern-7.c: Likewise.\n\t* gcc.target/i386/pr85403.c: Remove dg-error,\n\nFrom-SVN: r259496", "tree": {"sha": "4e9f14295a0dcd564133ba0e61954f0ff8aae1f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4e9f14295a0dcd564133ba0e61954f0ff8aae1f5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/73d1e5721d54089c77c8975830638aeea449d49e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73d1e5721d54089c77c8975830638aeea449d49e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73d1e5721d54089c77c8975830638aeea449d49e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73d1e5721d54089c77c8975830638aeea449d49e/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "37d51c754a8c0c2b3216b5574cfcf3e12d786658", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37d51c754a8c0c2b3216b5574cfcf3e12d786658", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37d51c754a8c0c2b3216b5574cfcf3e12d786658"}], "stats": {"total": 280, "additions": 186, "deletions": 94}, "files": [{"sha": "89c6c9173a4beadf9a91454a7647253889bd56e8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73d1e5721d54089c77c8975830638aeea449d49e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73d1e5721d54089c77c8975830638aeea449d49e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=73d1e5721d54089c77c8975830638aeea449d49e", "patch": "@@ -1,3 +1,28 @@\n+2018-04-19  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/85417\n+\t* config/i386/cet.c (file_end_indicate_exec_stack_and_cet):\n+\tCheck flag_cf_protection instead of TARGET_IBT and TARGET_SHSTK.\n+\t* config/i386/i386-c.c (ix86_target_macros_internal): Also\n+\tdefine __IBT__ and __SHSTK__ for -fcf-protection.\n+\t* config/i386/i386.c (pass_insert_endbranch::gate): Don't check\n+\tTARGET_IBT.\n+\t(ix86_trampoline_init): Likewise.\n+\t(x86_output_mi_thunk): Likewise.\n+\t(ix86_notrack_prefixed_insn_p): Likewise.\n+\t(ix86_option_override_internal): Don't disallow -fcf-protection.\n+\t* config/i386/i386.md (rdssp<mode>): Also enable for\n+\t-fcf-protection.\n+\t(incssp<mode>): Likewise.\n+\t(nop_endbr): Likewise.\n+\t* config/i386/i386.opt (mcet): Change help message to built-in\n+\tfunctions only.\n+\t(mibt): Likewise.\n+\t(mshstk): Likewise.\n+\t* doc/invoke.texi: Remove -mcet, -mibt and -mshstk condition\n+\ton -fcf-protection.  Change -mcet, -mibt and -mshstk to only\n+\tenable CET built-in functions.\n+\n 2018-04-19  Sebastian Peryt  <sebastian.peryt@intel.com>\n \n \t* common/config/i386/i386-common.c "}, {"sha": "eb3be1714715d0f5291ff9510c595f63c32849d4", "filename": "gcc/config/i386/cet.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73d1e5721d54089c77c8975830638aeea449d49e/gcc%2Fconfig%2Fi386%2Fcet.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73d1e5721d54089c77c8975830638aeea449d49e/gcc%2Fconfig%2Fi386%2Fcet.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcet.c?ref=73d1e5721d54089c77c8975830638aeea449d49e", "patch": "@@ -34,11 +34,11 @@ file_end_indicate_exec_stack_and_cet (void)\n \n   unsigned int feature_1 = 0;\n \n-  if (TARGET_IBT)\n+  if (flag_cf_protection & CF_BRANCH)\n     /* GNU_PROPERTY_X86_FEATURE_1_IBT.  */\n     feature_1 |= 0x1;\n \n-  if (TARGET_SHSTK)\n+  if (flag_cf_protection & CF_RETURN)\n     /* GNU_PROPERTY_X86_FEATURE_1_SHSTK.  */\n     feature_1 |= 0x2;\n "}, {"sha": "fa8b3682b0c27c652bd8a866328106102cb7ea58", "filename": "gcc/config/i386/i386-c.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73d1e5721d54089c77c8975830638aeea449d49e/gcc%2Fconfig%2Fi386%2Fi386-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73d1e5721d54089c77c8975830638aeea449d49e/gcc%2Fconfig%2Fi386%2Fi386-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-c.c?ref=73d1e5721d54089c77c8975830638aeea449d49e", "patch": "@@ -499,13 +499,15 @@ ix86_target_macros_internal (HOST_WIDE_INT isa_flag,\n     def_or_undef (parse_in, \"__RDPID__\");\n   if (isa_flag & OPTION_MASK_ISA_GFNI)\n     def_or_undef (parse_in, \"__GFNI__\");\n-  if (isa_flag2 & OPTION_MASK_ISA_IBT)\n+  if ((isa_flag2 & OPTION_MASK_ISA_IBT)\n+      || (flag_cf_protection & CF_BRANCH))\n     {\n       def_or_undef (parse_in, \"__IBT__\");\n       if (flag_cf_protection != CF_NONE)\n \tdef_or_undef (parse_in, \"__CET__\");\n     }\n-  if (isa_flag & OPTION_MASK_ISA_SHSTK)\n+  if ((isa_flag & OPTION_MASK_ISA_SHSTK)\n+      || (flag_cf_protection & CF_RETURN))\n     {\n       def_or_undef (parse_in, \"__SHSTK__\");\n       if (flag_cf_protection != CF_NONE)"}, {"sha": "a0435377872a44a74be138eed38b5e3466657116", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 7, "deletions": 47, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73d1e5721d54089c77c8975830638aeea449d49e/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73d1e5721d54089c77c8975830638aeea449d49e/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=73d1e5721d54089c77c8975830638aeea449d49e", "patch": "@@ -2701,7 +2701,7 @@ class pass_insert_endbranch : public rtl_opt_pass\n   /* opt_pass methods: */\n   virtual bool gate (function *)\n     {\n-      return ((flag_cf_protection & CF_BRANCH) && TARGET_IBT);\n+      return ((flag_cf_protection & CF_BRANCH));\n     }\n \n   virtual unsigned int execute (function *)\n@@ -4933,49 +4933,9 @@ ix86_option_override_internal (bool main_args_p,\n     target_option_default_node = target_option_current_node\n       = build_target_option_node (opts);\n \n-  /* Do not support control flow instrumentation if CET is not enabled.  */\n-  cf_protection_level cf_protection\n-    = (cf_protection_level) (opts->x_flag_cf_protection & ~CF_SET);\n-  if (cf_protection != CF_NONE)\n-    {\n-      switch (cf_protection)\n-\t{\n-\tcase CF_BRANCH:\n-\t  if (! TARGET_IBT_P (opts->x_ix86_isa_flags2))\n-\t    {\n-\t      error (\"%<-fcf-protection=branch%> requires Intel CET \"\n-\t\t     \"support. Use -mcet or -mibt option to enable CET\");\n-\t      flag_cf_protection = CF_NONE;\n-\t      return false;\n-\t    }\n-\t  break;\n-\tcase CF_RETURN:\n-\t  if (! TARGET_SHSTK_P (opts->x_ix86_isa_flags))\n-\t    {\n-\t      error (\"%<-fcf-protection=return%> requires Intel CET \"\n-\t\t     \"support. Use -mcet or -mshstk option to enable CET\");\n-\t      flag_cf_protection = CF_NONE;\n-\t      return false;\n-\t    }\n-\t  break;\n-\tcase CF_FULL:\n-\t  if (   ! TARGET_IBT_P (opts->x_ix86_isa_flags2)\n-\t\t || ! TARGET_SHSTK_P (opts->x_ix86_isa_flags))\n-\t    {\n-\t      error (\"%<-fcf-protection=full%> requires Intel CET \"\n-\t\t     \"support. Use -mcet or both of -mibt and \"\n-\t\t     \"-mshstk options to enable CET\");\n-\t      flag_cf_protection = CF_NONE;\n-\t      return false;\n-\t    }\n-\t  break;\n-\tdefault:\n-\t  gcc_unreachable ();\n-\t}\n-\n-      opts->x_flag_cf_protection =\n-\t(cf_protection_level) (cf_protection | CF_SET);\n-    }\n+  if (opts->x_flag_cf_protection != CF_NONE)\n+    opts->x_flag_cf_protection =\n+      (cf_protection_level) (opts->x_flag_cf_protection | CF_SET);\n \n   if (ix86_tune_features [X86_TUNE_AVOID_128FMA_CHAINS])\n     maybe_set_param_value (PARAM_AVOID_FMA_MAX_BITS, 128,\n@@ -30412,7 +30372,7 @@ ix86_trampoline_init (rtx m_tramp, tree fndecl, rtx chain_value)\n   rtx mem, fnaddr;\n   int opcode;\n   int offset = 0;\n-  bool need_endbr = (flag_cf_protection & CF_BRANCH) && TARGET_IBT;\n+  bool need_endbr = (flag_cf_protection & CF_BRANCH);\n \n   fnaddr = XEXP (DECL_RTL (fndecl), 0);\n \n@@ -41795,7 +41755,7 @@ x86_output_mi_thunk (FILE *file, tree, HOST_WIDE_INT delta,\n   emit_note (NOTE_INSN_PROLOGUE_END);\n \n   /* CET is enabled, insert EB instruction.  */\n-  if ((flag_cf_protection & CF_BRANCH) && TARGET_IBT)\n+  if ((flag_cf_protection & CF_BRANCH))\n     emit_insn (gen_nop_endbr ());\n \n   /* If VCALL_OFFSET, we'll need THIS in a register.  Might as well\n@@ -49795,7 +49755,7 @@ ix86_bnd_prefixed_insn_p (rtx insn)\n static bool\n ix86_notrack_prefixed_insn_p (rtx insn)\n {\n-  if (!insn || !((flag_cf_protection & CF_BRANCH) && TARGET_IBT))\n+  if (!insn || !((flag_cf_protection & CF_BRANCH)))\n     return false;\n \n   if (CALL_P (insn))"}, {"sha": "ae1fea1ed7763160507db4088504b9dc0aa25dcf", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73d1e5721d54089c77c8975830638aeea449d49e/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73d1e5721d54089c77c8975830638aeea449d49e/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=73d1e5721d54089c77c8975830638aeea449d49e", "patch": "@@ -20280,15 +20280,15 @@\n (define_insn \"rdssp<mode>\"\n   [(set (match_operand:SWI48x 0 \"register_operand\" \"=r\")\n \t(unspec_volatile:SWI48x [(const_int 0)] UNSPECV_NOP_RDSSP))]\n-  \"TARGET_SHSTK\"\n+  \"TARGET_SHSTK || (flag_cf_protection & CF_RETURN)\"\n   \"xor{l}\\t%k0, %k0\\n\\trdssp<mskmodesuffix>\\t%0\"\n   [(set_attr \"length\" \"6\")\n    (set_attr \"type\" \"other\")])\n \n (define_insn \"incssp<mode>\"\n   [(unspec_volatile [(match_operand:SWI48x 0 \"register_operand\" \"r\")]\n \t\t   UNSPECV_INCSSP)]\n-  \"TARGET_SHSTK\"\n+  \"TARGET_SHSTK || (flag_cf_protection & CF_RETURN)\"\n   \"incssp<mskmodesuffix>\\t%0\"\n   [(set_attr \"length\" \"4\")\n    (set_attr \"type\" \"other\")])\n@@ -20343,7 +20343,7 @@\n \n (define_insn \"nop_endbr\"\n   [(unspec_volatile [(const_int 0)] UNSPECV_NOP_ENDBR)]\n-  \"TARGET_IBT\"\n+  \"TARGET_IBT || (flag_cf_protection & CF_BRANCH)\"\n   \"*\n { return (TARGET_64BIT)? \\\"endbr64\\\" : \\\"endbr32\\\"; }\"\n   [(set_attr \"length\" \"4\")"}, {"sha": "646cfcbbd3b4ce71adbff085530c7bb0534a01c5", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73d1e5721d54089c77c8975830638aeea449d49e/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73d1e5721d54089c77c8975830638aeea449d49e/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=73d1e5721d54089c77c8975830638aeea449d49e", "patch": "@@ -1008,17 +1008,16 @@ Generate code which uses only the general registers.\n \n mcet\n Target Report Var(flag_cet) Init(0)\n-Support Control-flow Enforcement Technology (CET) built-in functions\n-and code generation.\n+Support Control-flow Enforcement Technology (CET) built-in functions.\n \n mibt\n Target Report Mask(ISA_IBT) Var(ix86_isa_flags2) Save\n-Specifically enables an indirect branch tracking feature from Control-flow\n-Enforcement Technology (CET).\n+Specifically enable indirect branch tracking built-in functions from\n+Control-flow Enforcement Technology (CET).\n \n mshstk\n Target Report Mask(ISA_SHSTK) Var(ix86_isa_flags) Save\n-Specifically enables an shadow stack support feature from Control-flow\n+Specifically enable shadow stack built-in functions from Control-flow\n Enforcement Technology (CET).\n \n mcet-switch"}, {"sha": "09a2472be0992d3efa48f950b21150892844ef2f", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 10, "deletions": 18, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73d1e5721d54089c77c8975830638aeea449d49e/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73d1e5721d54089c77c8975830638aeea449d49e/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=73d1e5721d54089c77c8975830638aeea449d49e", "patch": "@@ -11833,9 +11833,7 @@ which functions and calls should be skipped from instrumentation\n (@pxref{Function Attributes}).\n \n Currently the x86 GNU/Linux target provides an implementation based\n-on Intel Control-flow Enforcement Technology (CET).  Instrumentation\n-for x86 is controlled by target-specific options @option{-mcet},\n-@option{-mibt} and @option{-mshstk} (@pxref{x86 Options}).\n+on Intel Control-flow Enforcement Technology (CET).\n \n @item -fstack-protector\n @opindex fstack-protector\n@@ -27351,11 +27349,9 @@ the file containing the CPU detection code should be compiled without\n these options.\n \n The @option{-mcet} option turns on the @option{-mibt} and @option{-mshstk}\n-options.  The @option{-mibt} option enables indirect branch tracking support\n-and the @option{-mshstk} option enables shadow stack support from\n-Intel Control-flow Enforcement Technology (CET).  The compiler also provides\n-a number of built-in functions for fine-grained control in a CET-based\n-application.  See @xref{x86 Built-in Functions}, for more information.\n+options.  The compiler provides a number of built-in functions for\n+fine-grained control in a CET-based application.  See\n+@xref{x86 Built-in Functions}, for more information.\n \n @item -mdump-tune-features\n @opindex mdump-tune-features\n@@ -27451,19 +27447,15 @@ This option enables use of the @code{movbe} instruction to implement\n \n @item -mibt\n @opindex mibt\n-This option tells the compiler to use indirect branch tracking support\n-(for indirect calls and jumps) from x86 Control-flow Enforcement\n-Technology (CET).  The option has effect only if the\n-@option{-fcf-protection=full} or @option{-fcf-protection=branch} option\n-is specified. The option @option{-mibt} is on by default when the\n-@code{-mcet} option is specified.\n+This option enables indirect branch tracking built-in functions from\n+x86 Control-flow Enforcement Technology (CET).  The option\n+@option{-mibt} is on by default when the @code{-mcet} option is\n+specified.\n \n @item -mshstk\n @opindex mshstk\n-This option tells the compiler to use shadow stack support (return\n-address tracking) from x86 Control-flow Enforcement Technology (CET).\n-The option has effect only if the @option{-fcf-protection=full} or\n-@option{-fcf-protection=return} option is specified.  The option\n+This option enables shadow stack built-in functions from x86\n+Control-flow Enforcement Technology (CET).  The option\n @option{-mshstk} is on by default when the @option{-mcet} option is\n specified.\n "}, {"sha": "884e77237b3793e724bd450847d1c1b4d8b9aea2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73d1e5721d54089c77c8975830638aeea449d49e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73d1e5721d54089c77c8975830638aeea449d49e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=73d1e5721d54089c77c8975830638aeea449d49e", "patch": "@@ -1,3 +1,31 @@\n+2018-04-19  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/85417\n+\t* c-c++-common/attr-nocf-check-1.c: Compile with\n+\t-fcf-protection=none.\n+\t* c-c++-common/attr-nocf-check-3.c: Likewise.\n+\t* gcc.dg/march-generic.c: Likewise.\n+\t* gcc.target/i386/align-limit.c: Likewise.\n+\t* gcc.target/i386/cet-notrack-icf-1.c: Likewise.\n+\t* gcc.target/i386/cet-notrack-icf-3.c: Likewise.\n+\t* gcc.target/i386/cet-property-2.c: Likewise.\n+\t* gcc.target/i386/ret-thunk-26.c: Likewise.\n+\t* c-c++-common/fcf-protection-1.c: Remove dg-error for x86\n+\ttargets.\n+\t* c-c++-common/fcf-protection-2.c: Likewise.\n+\t* c-c++-common/fcf-protection-3.c: Likewise.\n+\t* c-c++-common/fcf-protection-5.c: Likewise.\n+\t* c-c++-common/fcf-protection-6.c: Likewise.\n+\t* c-c++-common/fcf-protection-7.c: Likewise.\n+\t* gcc.target/i386/cet-label-3.c: New test.\n+\t* gcc.target/i386/cet-property-3.c: Likewise.\n+\t* gcc.target/i386/cet-sjlj-7.c: Likewise.\n+\t* gcc.target/i386/pr85417-1.c: Likewise.\n+\t* gcc.target/i386/indirect-thunk-attr-7.c: Also expect\n+\t__x86_indirect_thunk_nt_(r|e)ax\n+\t* gcc.target/i386/indirect-thunk-extern-7.c: Likewise.\n+\t* gcc.target/i386/pr85403.c: Remove dg-error,\n+\n 2018-04-19  Sebastian Peryt  <sebastian.peryt@intel.com>\n \n \t* gcc.target/i386/movdir-1.c: New test."}, {"sha": "c5ac7cb9f8692e5e614068b4194e67720a4f3ded", "filename": "gcc/testsuite/c-c++-common/attr-nocf-check-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73d1e5721d54089c77c8975830638aeea449d49e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-nocf-check-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73d1e5721d54089c77c8975830638aeea449d49e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-nocf-check-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-nocf-check-1.c?ref=73d1e5721d54089c77c8975830638aeea449d49e", "patch": "@@ -1,4 +1,5 @@\n /* { dg-do compile } */\n+/* { dg-additional-options \"-fcf-protection=none\" } */\n \n int func (int) __attribute__ ((nocf_check)); /* { dg-warning \"'nocf_check' attribute ignored\" } */\n int (*fptr) (int) __attribute__ ((nocf_check)); /* { dg-warning \"'nocf_check' attribute ignored\" } */"}, {"sha": "02b56cb155e0d2e9ebea893f1e4cd634aae98e36", "filename": "gcc/testsuite/c-c++-common/attr-nocf-check-3.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73d1e5721d54089c77c8975830638aeea449d49e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-nocf-check-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73d1e5721d54089c77c8975830638aeea449d49e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-nocf-check-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-nocf-check-3.c?ref=73d1e5721d54089c77c8975830638aeea449d49e", "patch": "@@ -1,4 +1,5 @@\n /* { dg-do compile } */\n+/* { dg-additional-options \"-fcf-protection=none\" } */\n \n int  foo (void) __attribute__ ((nocf_check)); /* { dg-warning \"'nocf_check' attribute ignored\" } */\n void (*foo1) (void) __attribute__((nocf_check)); /* { dg-warning \"'nocf_check' attribute ignored\" } */"}, {"sha": "f59a8fbdfdc9b7063da1b2ddca9f0e709e6c1eba", "filename": "gcc/testsuite/c-c++-common/fcf-protection-1.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73d1e5721d54089c77c8975830638aeea449d49e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ffcf-protection-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73d1e5721d54089c77c8975830638aeea449d49e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ffcf-protection-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ffcf-protection-1.c?ref=73d1e5721d54089c77c8975830638aeea449d49e", "patch": "@@ -1,4 +1,3 @@\n /* { dg-do compile } */\n /* { dg-options \"-fcf-protection=full\" } */\n-/* { dg-error \"'-fcf-protection=full' requires Intel CET.*-mcet.*-mibt and -mshstk option\" \"\" { target { \"i?86-*-* x86_64-*-*\" } } 0 } */\n /* { dg-error \"'-fcf-protection=full' is not supported for this target\" \"\" { target { ! \"i?86-*-* x86_64-*-*\" } } 0 } */"}, {"sha": "61059725af66eedff19ccf994731baa6a952c930", "filename": "gcc/testsuite/c-c++-common/fcf-protection-2.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73d1e5721d54089c77c8975830638aeea449d49e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ffcf-protection-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73d1e5721d54089c77c8975830638aeea449d49e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ffcf-protection-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ffcf-protection-2.c?ref=73d1e5721d54089c77c8975830638aeea449d49e", "patch": "@@ -1,4 +1,3 @@\n /* { dg-do compile } */\n /* { dg-options \"-fcf-protection=branch\" } */\n-/* { dg-error \"'-fcf-protection=branch' requires Intel CET.*-mcet or -mibt option\" \"\" { target { \"i?86-*-* x86_64-*-*\" } } 0 } */\n /* { dg-error \"'-fcf-protection=branch' is not supported for this target\" \"\" { target { ! \"i?86-*-* x86_64-*-*\" } } 0 } */"}, {"sha": "257e944c4a6b15f808df5c11f430609abf15cb3a", "filename": "gcc/testsuite/c-c++-common/fcf-protection-3.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73d1e5721d54089c77c8975830638aeea449d49e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ffcf-protection-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73d1e5721d54089c77c8975830638aeea449d49e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ffcf-protection-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ffcf-protection-3.c?ref=73d1e5721d54089c77c8975830638aeea449d49e", "patch": "@@ -1,4 +1,3 @@\n /* { dg-do compile } */\n /* { dg-options \"-fcf-protection=return\" } */\n-/* { dg-error \"'-fcf-protection=return' requires Intel CET.*-mcet or -mshstk option\" \"\" { target { \"i?86-*-* x86_64-*-*\" } } 0 } */\n /* { dg-error \"'-fcf-protection=return' is not supported for this target\" \"\" { target { ! \"i?86-*-* x86_64-*-*\" } } 0 } */"}, {"sha": "dc317f84b0713c0d27f37c45c47388187185b7f3", "filename": "gcc/testsuite/c-c++-common/fcf-protection-5.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73d1e5721d54089c77c8975830638aeea449d49e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ffcf-protection-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73d1e5721d54089c77c8975830638aeea449d49e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ffcf-protection-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ffcf-protection-5.c?ref=73d1e5721d54089c77c8975830638aeea449d49e", "patch": "@@ -1,4 +1,3 @@\n /* { dg-do compile } */\n /* { dg-options \"-fcf-protection\" } */\n-/* { dg-error \"'-fcf-protection=full' requires Intel CET.*-mcet.*-mibt and -mshstk option\" \"\" { target { \"i?86-*-* x86_64-*-*\" } } 0 } */\n /* { dg-error \"'-fcf-protection=full' is not supported for this target\" \"\" { target { ! \"i?86-*-* x86_64-*-*\" } } 0 } */"}, {"sha": "61059725af66eedff19ccf994731baa6a952c930", "filename": "gcc/testsuite/c-c++-common/fcf-protection-6.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73d1e5721d54089c77c8975830638aeea449d49e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ffcf-protection-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73d1e5721d54089c77c8975830638aeea449d49e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ffcf-protection-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ffcf-protection-6.c?ref=73d1e5721d54089c77c8975830638aeea449d49e", "patch": "@@ -1,5 +1,3 @@\n /* { dg-do compile } */\n /* { dg-options \"-fcf-protection=branch\" } */\n-/* { dg-additional-options \"-mshstk\" { target { i?86-*-* x86_64-*-* } } } */\n-/* { dg-error \"'-fcf-protection=branch' requires Intel CET.*-mcet or -mibt option\" \"\" { target { \"i?86-*-* x86_64-*-*\" } } 0 } */\n /* { dg-error \"'-fcf-protection=branch' is not supported for this target\" \"\" { target { ! \"i?86-*-* x86_64-*-*\" } } 0 } */"}, {"sha": "257e944c4a6b15f808df5c11f430609abf15cb3a", "filename": "gcc/testsuite/c-c++-common/fcf-protection-7.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73d1e5721d54089c77c8975830638aeea449d49e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ffcf-protection-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73d1e5721d54089c77c8975830638aeea449d49e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ffcf-protection-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ffcf-protection-7.c?ref=73d1e5721d54089c77c8975830638aeea449d49e", "patch": "@@ -1,5 +1,3 @@\n /* { dg-do compile } */\n /* { dg-options \"-fcf-protection=return\" } */\n-/* { dg-additional-options \"-mibt\" { target { i?86-*-* x86_64-*-* } } } */\n-/* { dg-error \"'-fcf-protection=return' requires Intel CET.*-mcet or -mshstk option\" \"\" { target { \"i?86-*-* x86_64-*-*\" } } 0 } */\n /* { dg-error \"'-fcf-protection=return' is not supported for this target\" \"\" { target { ! \"i?86-*-* x86_64-*-*\" } } 0 } */"}, {"sha": "f9c00e4a1c1b76eb31aa9441afb4fd22c48241a9", "filename": "gcc/testsuite/gcc.dg/march-generic.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73d1e5721d54089c77c8975830638aeea449d49e/gcc%2Ftestsuite%2Fgcc.dg%2Fmarch-generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73d1e5721d54089c77c8975830638aeea449d49e/gcc%2Ftestsuite%2Fgcc.dg%2Fmarch-generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fmarch-generic.c?ref=73d1e5721d54089c77c8975830638aeea449d49e", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n /* { dg-skip-if \"\" { *-*-* } { \"-march=*\" } { \"\" } } */\n-/* { dg-options \"-march=generic\" } */\n+/* { dg-options \"-march=generic -fcf-protection=none\" } */\n /* { dg-error \"'generic' CPU can be used only for '-mtune=' switch\" \"\" { target *-*-* } 0 } */\n /* { dg-bogus \"march\" \"\" { target *-*-* } 0 } */\n int i;"}, {"sha": "849d741189cbb29b0306349b25386bb7804d5f4a", "filename": "gcc/testsuite/gcc.target/i386/align-limit.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73d1e5721d54089c77c8975830638aeea449d49e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Falign-limit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73d1e5721d54089c77c8975830638aeea449d49e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Falign-limit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Falign-limit.c?ref=73d1e5721d54089c77c8975830638aeea449d49e", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -falign-functions=64 -flimit-function-alignment -march=amdfam10\" } */\n+/* { dg-options \"-O2 -falign-functions=64 -flimit-function-alignment -march=amdfam10 -fcf-protection=none\" } */\n /* { dg-final { scan-assembler \".p2align 6,,1\" } } */\n /* { dg-final { scan-assembler-not \".p2align 6,,63\" } } */\n "}, {"sha": "5e0892e5b4d959d7e5c2aa2c97b23a34ee6602da", "filename": "gcc/testsuite/gcc.target/i386/cet-label-3.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73d1e5721d54089c77c8975830638aeea449d49e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-label-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73d1e5721d54089c77c8975830638aeea449d49e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-label-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-label-3.c?ref=73d1e5721d54089c77c8975830638aeea449d49e", "patch": "@@ -0,0 +1,16 @@\n+/* Verify that -fcf-protection works without -mcet.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fcf-protection\" } */\n+/* { dg-final { scan-assembler-times \"endbr32\" 3 { target ia32 } } } */\n+/* { dg-final { scan-assembler-times \"endbr64\" 3 { target { ! ia32 } } } } */\n+\n+int func (int arg)\n+{\n+  static void *array[] = { &&foo, &&bar };\n+\n+  goto *array[arg];\n+foo:\n+  return arg*111;\n+bar:\n+  return arg*777;\n+}"}, {"sha": "0bddf54862a9e16e37ec6766cb7d2da8f87a4bf8", "filename": "gcc/testsuite/gcc.target/i386/cet-notrack-icf-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73d1e5721d54089c77c8975830638aeea449d49e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-notrack-icf-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73d1e5721d54089c77c8975830638aeea449d49e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-notrack-icf-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-notrack-icf-1.c?ref=73d1e5721d54089c77c8975830638aeea449d49e", "patch": "@@ -1,6 +1,6 @@\n /* Verify nocf_check functions are not ICF optimized.  */\n /* { dg-do compile } */\n-/* { dg-options \"-O2\" } */\n+/* { dg-options \"-O2 -fcf-protection=none\" } */\n /* { dg-final { scan-assembler-not \"endbr\" } } */\n /* { dg-final { scan-assembler-not \"fn3:\" } } */\n /* { dg-final { scan-assembler \"set\\[ \\t]+fn2,fn1\" } } */"}, {"sha": "ed2d53ac5ef3554984c0fc3e76e68f50d69b58bf", "filename": "gcc/testsuite/gcc.target/i386/cet-notrack-icf-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73d1e5721d54089c77c8975830638aeea449d49e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-notrack-icf-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73d1e5721d54089c77c8975830638aeea449d49e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-notrack-icf-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-notrack-icf-3.c?ref=73d1e5721d54089c77c8975830638aeea449d49e", "patch": "@@ -1,6 +1,6 @@\n /* Verify nocf_check function calls are not ICF optimized.  */\n /* { dg-do compile } */\n-/* { dg-options \"-O2\" } */\n+/* { dg-options \"-O2 -fcf-protection=none\" } */\n /* { dg-final { scan-assembler-not \"endbr\" } } */\n /* { dg-final { scan-assembler-not \"fn2:\" } } */\n /* { dg-final { scan-assembler \"set\\[ \\t]+fn2,fn1\" } } */"}, {"sha": "bca6f6cdeb742e1eb40a28231af97c17c826e5ee", "filename": "gcc/testsuite/gcc.target/i386/cet-property-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73d1e5721d54089c77c8975830638aeea449d49e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-property-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73d1e5721d54089c77c8975830638aeea449d49e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-property-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-property-2.c?ref=73d1e5721d54089c77c8975830638aeea449d49e", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-mcet\" } */\n+/* { dg-options \"-mcet -fcf-protection=none\" } */\n /* { dg-final { scan-assembler-not \".note.gnu.property\" } } */\n \n extern void foo (void);"}, {"sha": "3e211c970aad3ba76e4046f9440fb0e133a33638", "filename": "gcc/testsuite/gcc.target/i386/cet-property-3.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73d1e5721d54089c77c8975830638aeea449d49e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-property-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73d1e5721d54089c77c8975830638aeea449d49e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-property-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-property-3.c?ref=73d1e5721d54089c77c8975830638aeea449d49e", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile { target *-*-linux* } } */\n+/* { dg-options \"-fcf-protection\" } */\n+/* { dg-final { scan-assembler \".note.gnu.property\" } } */\n+\n+extern void foo (void);\n+\n+void\n+bar (void)\n+{\n+  foo ();\n+}"}, {"sha": "1b624327d0f4684de59c76935cad193e58ae6821", "filename": "gcc/testsuite/gcc.target/i386/cet-sjlj-7.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73d1e5721d54089c77c8975830638aeea449d49e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-sjlj-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73d1e5721d54089c77c8975830638aeea449d49e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-sjlj-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-sjlj-7.c?ref=73d1e5721d54089c77c8975830638aeea449d49e", "patch": "@@ -0,0 +1,48 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fcf-protection\" } */\n+/* { dg-final { scan-assembler-times \"endbr32\" 2 { target ia32 } } } */\n+/* { dg-final { scan-assembler-times \"endbr64\" 2 { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler-times \"call\t_?setjmp\" 1 } } */\n+/* { dg-final { scan-assembler-times \"call\tlongjmp\" 1 } } */\n+\n+#include <stdio.h>\n+#include <setjmp.h>\n+\n+jmp_buf buf;\n+static int bar (int);\n+\n+__attribute__ ((noinline, noclone))\n+static int\n+foo (int i)\n+{\n+  int j = i * 11;\n+\n+  if (!setjmp (buf))\n+    {\n+      j += 33;\n+      printf (\"After setjmp: j = %d\\n\", j);\n+      bar (j);\n+    }\n+\n+  return j + i;\n+}\n+\n+__attribute__ ((noinline, noclone))\n+static int\n+bar (int i)\n+{\n+ int j = i;\n+\n+  j -= 111;\n+  printf (\"In longjmp: j = %d\\n\", j);\n+  longjmp (buf, 1);\n+\n+  return j;\n+}\n+\n+int\n+main ()\n+{\n+  foo (10);\n+  return 0;\n+}"}, {"sha": "ffe7350fce4e2f624fd93d5f29d6dcd6d8347006", "filename": "gcc/testsuite/gcc.target/i386/indirect-thunk-attr-7.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73d1e5721d54089c77c8975830638aeea449d49e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-attr-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73d1e5721d54089c77c8975830638aeea449d49e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-attr-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-attr-7.c?ref=73d1e5721d54089c77c8975830638aeea449d49e", "patch": "@@ -37,7 +37,7 @@ bar (int i)\n }\n \n /* { dg-final { scan-assembler \"mov(?:l|q)\\[ \\t\\]*\\.L\\[0-9\\]+\\\\(,%\" { target *-*-linux* } } } */\n-/* { dg-final { scan-assembler \"jmp\\[ \\t\\]*__x86_indirect_thunk_(r|e)ax\" } } */\n+/* { dg-final { scan-assembler \"jmp\\[ \\t\\]*__x86_indirect_thunk(_nt|)_(r|e)ax\" } } */\n /* { dg-final { scan-assembler-not {\\t(lfence|pause)} } } */\n /* { dg-final { scan-assembler-not \"jmp\\[ \\t\\]*\\.LIND\" } } */\n /* { dg-final { scan-assembler-not \"call\\[ \\t\\]*\\.LIND\" } } */"}, {"sha": "b73397451166e11fe515941063fefaeb092d41a1", "filename": "gcc/testsuite/gcc.target/i386/indirect-thunk-extern-7.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73d1e5721d54089c77c8975830638aeea449d49e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-extern-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73d1e5721d54089c77c8975830638aeea449d49e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-extern-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-extern-7.c?ref=73d1e5721d54089c77c8975830638aeea449d49e", "patch": "@@ -36,7 +36,7 @@ bar (int i)\n }\n \n /* { dg-final { scan-assembler \"mov(?:l|q)\\[ \\t\\]*\\.L\\[0-9\\]+\\\\(,%\" { target *-*-linux* } } } */\n-/* { dg-final { scan-assembler \"jmp\\[ \\t\\]*__x86_indirect_thunk_(r|e)ax\" } } */\n+/* { dg-final { scan-assembler \"jmp\\[ \\t\\]*__x86_indirect_thunk(_nt|)_(r|e)ax\" } } */\n /* { dg-final { scan-assembler-not {\\t(lfence|pause)} } } */\n /* { dg-final { scan-assembler-not \"jmp\\[ \\t\\]*\\.LIND\" } } */\n /* { dg-final { scan-assembler-not \"call\\[ \\t\\]*\\.LIND\" } } */"}, {"sha": "0bbd7ca561056563426293c09d859b788231a03f", "filename": "gcc/testsuite/gcc.target/i386/pr85403.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73d1e5721d54089c77c8975830638aeea449d49e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr85403.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73d1e5721d54089c77c8975830638aeea449d49e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr85403.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr85403.c?ref=73d1e5721d54089c77c8975830638aeea449d49e", "patch": "@@ -7,4 +7,4 @@ int\n foo ()\n {\n   return -2;\n-} /* { dg-error \"requires Intel CET support\" } */\n+}"}, {"sha": "17d52403744f3d75f2838b65f6ef385f30c9e0cd", "filename": "gcc/testsuite/gcc.target/i386/pr85417-1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73d1e5721d54089c77c8975830638aeea449d49e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr85417-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73d1e5721d54089c77c8975830638aeea449d49e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr85417-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr85417-1.c?ref=73d1e5721d54089c77c8975830638aeea449d49e", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-require-ifunc \"\" } */\n+/* { dg-options \"-O3 -fcf-protection\" } */\n+/* { dg-final { scan-assembler \"vpshufb\" } } */\n+/* { dg-final { scan-assembler \"punpcklbw\" } } */\n+\n+__attribute__((target_clones(\"arch=core-avx2\",\"arch=slm\",\"default\")))\n+void\n+foo(char *in, char *out, int size)\n+{\n+  int i;\n+  for(i = 0; i < size; i++)\n+    {\n+\tout[2 * i] = in[i];\n+\tout[2 * i + 1] = in[i];\n+    }\n+}"}, {"sha": "dc722c2f5f9927b1c6473bce78046942b256ca2d", "filename": "gcc/testsuite/gcc.target/i386/ret-thunk-26.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73d1e5721d54089c77c8975830638aeea449d49e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fret-thunk-26.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73d1e5721d54089c77c8975830638aeea449d49e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fret-thunk-26.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fret-thunk-26.c?ref=73d1e5721d54089c77c8975830638aeea449d49e", "patch": "@@ -1,6 +1,6 @@\n /* PR target/r84530 */\n /* { dg-do run } */\n-/* { dg-options \"-Os -mfunction-return=thunk\" } */\n+/* { dg-options \"-Os -mfunction-return=thunk -fcf-protection=none\" } */\n \n struct S { int i; };\n __attribute__((const, noinline, noclone))"}]}