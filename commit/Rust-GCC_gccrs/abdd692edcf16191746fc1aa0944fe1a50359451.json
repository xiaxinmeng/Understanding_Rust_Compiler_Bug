{"sha": "abdd692edcf16191746fc1aa0944fe1a50359451", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWJkZDY5MmVkY2YxNjE5MTc0NmZjMWFhMDk0NGZlMWE1MDM1OTQ1MQ==", "commit": {"author": {"name": "Pat Haugen", "email": "pthaugen@us.ibm.com", "date": "2011-05-31T20:47:37Z"}, "committer": {"name": "Pat Haugen", "email": "pthaugen@gcc.gnu.org", "date": "2011-05-31T20:47:37Z"}, "message": "rs6000.c (rs6000_register_move_cost): Preserve from parameter value for dump.\n\n        * config/rs6000/rs6000.c (rs6000_register_move_cost): Preserve from\n        parameter value for dump. Dump cost on outermost call only.\n        (rs6000_memory_move_cost): Dump cost on outermost call only.\n\nFrom-SVN: r174511", "tree": {"sha": "53ab5fd3d7572f11cf2c1fd90ed38c12931dbf64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/53ab5fd3d7572f11cf2c1fd90ed38c12931dbf64"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/abdd692edcf16191746fc1aa0944fe1a50359451", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abdd692edcf16191746fc1aa0944fe1a50359451", "html_url": "https://github.com/Rust-GCC/gccrs/commit/abdd692edcf16191746fc1aa0944fe1a50359451", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abdd692edcf16191746fc1aa0944fe1a50359451/comments", "author": null, "committer": null, "parents": [{"sha": "da661a58be64d71f95def0309a692fc4a8cd2684", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da661a58be64d71f95def0309a692fc4a8cd2684", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da661a58be64d71f95def0309a692fc4a8cd2684"}], "stats": {"total": 48, "additions": 36, "deletions": 12}, "files": [{"sha": "bcd489b76006d7750d18e65a0a4b820204cbe1d1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abdd692edcf16191746fc1aa0944fe1a50359451/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abdd692edcf16191746fc1aa0944fe1a50359451/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=abdd692edcf16191746fc1aa0944fe1a50359451", "patch": "@@ -1,3 +1,9 @@\n+2011-05-31  Pat Haugen <pthaugen@us.ibm.com>\n+\n+\t* config/rs6000/rs6000.c (rs6000_register_move_cost): Preserve from\n+\tparameter value for dump. Dump cost on outermost call only.\n+\t(rs6000_memory_move_cost): Dump cost on outermost call only.\n+\n 2011-05-31  Jakub Jelinek  <jakub@redhat.com>\n \n \t* dwarf2out.c (resolve_addr_in_expr): Optimize away redundant"}, {"sha": "a21d85db7bbf31263b2b03f2699ef721c1071b18", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 30, "deletions": 12, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abdd692edcf16191746fc1aa0944fe1a50359451/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abdd692edcf16191746fc1aa0944fe1a50359451/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=abdd692edcf16191746fc1aa0944fe1a50359451", "patch": "@@ -189,6 +189,8 @@ enum reg_class rs6000_regno_regclass[FIRST_PSEUDO_REGISTER];\n /* Reload functions based on the type and the vector unit.  */\n static enum insn_code rs6000_vector_reload[NUM_MACHINE_MODES][2];\n \n+static int dbg_cost_ctrl;\n+\n /* Built in types.  */\n tree rs6000_builtin_types[RS6000_BTI_MAX];\n tree rs6000_builtin_decls[RS6000_BUILTIN_COUNT];\n@@ -26428,27 +26430,32 @@ rs6000_register_move_cost (enum machine_mode mode,\n {\n   int ret;\n \n+  if (TARGET_DEBUG_COST)\n+    dbg_cost_ctrl++;\n+\n   /*  Moves from/to GENERAL_REGS.  */\n   if (reg_classes_intersect_p (to, GENERAL_REGS)\n       || reg_classes_intersect_p (from, GENERAL_REGS))\n     {\n+      reg_class_t rclass = from;\n+\n       if (! reg_classes_intersect_p (to, GENERAL_REGS))\n-\tfrom = to;\n+\trclass = to;\n \n-      if (from == FLOAT_REGS || from == ALTIVEC_REGS || from == VSX_REGS)\n-\tret = (rs6000_memory_move_cost (mode, from, false)\n+      if (rclass == FLOAT_REGS || rclass == ALTIVEC_REGS || rclass == VSX_REGS)\n+\tret = (rs6000_memory_move_cost (mode, rclass, false)\n \t       + rs6000_memory_move_cost (mode, GENERAL_REGS, false));\n \n       /* It's more expensive to move CR_REGS than CR0_REGS because of the\n \t shift.  */\n-      else if (from == CR_REGS)\n+      else if (rclass == CR_REGS)\n \tret = 4;\n \n       /* For those processors that have slow LR/CTR moves, make them more\n          expensive than memory in order to bias spills to memory .*/\n       else if ((rs6000_cpu == PROCESSOR_POWER6\n \t\t|| rs6000_cpu == PROCESSOR_POWER7)\n-\t       && reg_classes_intersect_p (from, LINK_OR_CTR_REGS))\n+\t       && reg_classes_intersect_p (rclass, LINK_OR_CTR_REGS))\n         ret = 6 * hard_regno_nregs[0][mode];\n \n       else\n@@ -26472,10 +26479,14 @@ rs6000_register_move_cost (enum machine_mode mode,\n \t   + rs6000_register_move_cost (mode, from, GENERAL_REGS));\n \n   if (TARGET_DEBUG_COST)\n-    fprintf (stderr,\n-\t     \"rs6000_register_move_cost:, ret=%d, mode=%s, from=%s, to=%s\\n\",\n-\t     ret, GET_MODE_NAME (mode), reg_class_names[from],\n-\t     reg_class_names[to]);\n+    {\n+      if (dbg_cost_ctrl == 1)\n+\tfprintf (stderr,\n+\t\t \"rs6000_register_move_cost:, ret=%d, mode=%s, from=%s, to=%s\\n\",\n+\t\t ret, GET_MODE_NAME (mode), reg_class_names[from],\n+\t\t reg_class_names[to]);\n+      dbg_cost_ctrl--;\n+    }\n \n   return ret;\n }\n@@ -26489,6 +26500,9 @@ rs6000_memory_move_cost (enum machine_mode mode, reg_class_t rclass,\n {\n   int ret;\n \n+  if (TARGET_DEBUG_COST)\n+    dbg_cost_ctrl++;\n+\n   if (reg_classes_intersect_p (rclass, GENERAL_REGS))\n     ret = 4 * hard_regno_nregs[0][mode];\n   else if (reg_classes_intersect_p (rclass, FLOAT_REGS))\n@@ -26499,9 +26513,13 @@ rs6000_memory_move_cost (enum machine_mode mode, reg_class_t rclass,\n     ret = 4 + rs6000_register_move_cost (mode, rclass, GENERAL_REGS);\n \n   if (TARGET_DEBUG_COST)\n-    fprintf (stderr,\n-\t     \"rs6000_memory_move_cost: ret=%d, mode=%s, rclass=%s, in=%d\\n\",\n-\t     ret, GET_MODE_NAME (mode), reg_class_names[rclass], in);\n+    {\n+      if (dbg_cost_ctrl == 1)\n+\tfprintf (stderr,\n+\t\t \"rs6000_memory_move_cost: ret=%d, mode=%s, rclass=%s, in=%d\\n\",\n+\t\t ret, GET_MODE_NAME (mode), reg_class_names[rclass], in);\n+      dbg_cost_ctrl--;\n+    }\n \n   return ret;\n }"}]}