{"sha": "e1faf324d3c4d2e3fc7bea27984d448e9e107cc4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTFmYWYzMjRkM2M0ZDJlM2ZjN2JlYTI3OTg0ZDQ0OGU5ZTEwN2NjNA==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2014-08-25T19:27:55Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2014-08-25T19:27:55Z"}, "message": "config/sparc: Use rtx_insn\n\ngcc/\n\t* config/sparc/sparc-protos.h (output_ubranch): Strengthen param 2\n\tfrom rtx to rtx_insn *.\n\t(output_cbranch): Likewise for param 6.\n\t(output_return): Likewise for param 1.\n\t(output_sibcall): Likewise.\n\t(output_v8plus_shift): Likewise.\n\t(output_v8plus_mult): Likewise.\n\t(output_v9branch): Likewise for param 7.\n\t(output_cbcond):  Likewise for param 3.\n\n\t* config/sparc/sparc.c (sparc_legitimize_tls_address): Likewise\n\tfor local \"insn\".\n\t(sparc_legitimize_pic_address): Likewise.\n\t(sparc_emit_call_insn): Likewise.\n\t(emit_save_or_restore_regs): Likewise.\n\t(emit_window_save): Likewise for return type and local \"insn\".\n\t(sparc_expand_prologue): Likewise for local \"insn\".\n\t(sparc_flat_expand_prologue): Likewise.\n\t(output_return): Likewise for param \"insn\".\n\t(output_sibcall): Likewise for param \"insn\" and local \"delay\".\n\t(output_ubranch): Likewise for param \"insn\".\n\t(output_cbranch): Likewise.\n\t(output_cbcond): Likewise.\n\t(output_v9branch): Likewise.\n\t(output_v8plus_shift): Likewise.\n\t(sparc_output_mi_thunk): Likewise for local \"insn\".\n\t(get_some_local_dynamic_name): Likewise.\n\t(output_v8plus_mult): Likewise for param \"insn\".\n\nFrom-SVN: r214462", "tree": {"sha": "1fb09525285fd7aa2a4d8fa6fb8864998a69be7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1fb09525285fd7aa2a4d8fa6fb8864998a69be7b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e1faf324d3c4d2e3fc7bea27984d448e9e107cc4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1faf324d3c4d2e3fc7bea27984d448e9e107cc4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1faf324d3c4d2e3fc7bea27984d448e9e107cc4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1faf324d3c4d2e3fc7bea27984d448e9e107cc4/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6cb7eb4173c70f3c09b13a3280b2bc22bd84de79", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cb7eb4173c70f3c09b13a3280b2bc22bd84de79", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6cb7eb4173c70f3c09b13a3280b2bc22bd84de79"}], "stats": {"total": 88, "additions": 61, "deletions": 27}, "files": [{"sha": "cff88efdb7ee29b163524281f1e1179300319803", "filename": "gcc/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1faf324d3c4d2e3fc7bea27984d448e9e107cc4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1faf324d3c4d2e3fc7bea27984d448e9e107cc4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e1faf324d3c4d2e3fc7bea27984d448e9e107cc4", "patch": "@@ -1,3 +1,34 @@\n+2014-08-25  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* config/sparc/sparc-protos.h (output_ubranch): Strengthen param 2\n+\tfrom rtx to rtx_insn *.\n+\t(output_cbranch): Likewise for param 6.\n+\t(output_return): Likewise for param 1.\n+\t(output_sibcall): Likewise.\n+\t(output_v8plus_shift): Likewise.\n+\t(output_v8plus_mult): Likewise.\n+\t(output_v9branch): Likewise for param 7.\n+\t(output_cbcond):  Likewise for param 3.\n+\n+\t* config/sparc/sparc.c (sparc_legitimize_tls_address): Likewise\n+\tfor local \"insn\".\n+\t(sparc_legitimize_pic_address): Likewise.\n+\t(sparc_emit_call_insn): Likewise.\n+\t(emit_save_or_restore_regs): Likewise.\n+\t(emit_window_save): Likewise for return type and local \"insn\".\n+\t(sparc_expand_prologue): Likewise for local \"insn\".\n+\t(sparc_flat_expand_prologue): Likewise.\n+\t(output_return): Likewise for param \"insn\".\n+\t(output_sibcall): Likewise for param \"insn\" and local \"delay\".\n+\t(output_ubranch): Likewise for param \"insn\".\n+\t(output_cbranch): Likewise.\n+\t(output_cbcond): Likewise.\n+\t(output_v9branch): Likewise.\n+\t(output_v8plus_shift): Likewise.\n+\t(sparc_output_mi_thunk): Likewise for local \"insn\".\n+\t(get_some_local_dynamic_name): Likewise.\n+\t(output_v8plus_mult): Likewise for param \"insn\".\n+\n 2014-08-25  David Malcolm  <dmalcolm@redhat.com>\n \n \t* config/sh/sh-protos.h (output_ieee_ccmpeq): Strengthen param 1"}, {"sha": "c6b9802fbeed2a06bff65c7f28db11b358947a76", "filename": "gcc/config/sparc/sparc-protos.h", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1faf324d3c4d2e3fc7bea27984d448e9e107cc4/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1faf324d3c4d2e3fc7bea27984d448e9e107cc4/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h?ref=e1faf324d3c4d2e3fc7bea27984d448e9e107cc4", "patch": "@@ -69,15 +69,15 @@ extern bool sparc_expand_move (enum machine_mode, rtx *);\n extern void sparc_emit_set_symbolic_const64 (rtx, rtx, rtx);\n extern int sparc_splitdi_legitimate (rtx, rtx);\n extern int sparc_split_regreg_legitimate (rtx, rtx);\n-extern const char *output_ubranch (rtx, rtx);\n-extern const char *output_cbranch (rtx, rtx, int, int, int, rtx);\n-extern const char *output_return (rtx);\n-extern const char *output_sibcall (rtx, rtx);\n-extern const char *output_v8plus_shift (rtx, rtx *, const char *);\n-extern const char *output_v8plus_mult (rtx, rtx *, const char *);\n-extern const char *output_v9branch (rtx, rtx, int, int, int, int, rtx);\n+extern const char *output_ubranch (rtx, rtx_insn *);\n+extern const char *output_cbranch (rtx, rtx, int, int, int, rtx_insn *);\n+extern const char *output_return (rtx_insn *);\n+extern const char *output_sibcall (rtx_insn *, rtx);\n+extern const char *output_v8plus_shift (rtx_insn *, rtx *, const char *);\n+extern const char *output_v8plus_mult (rtx_insn *, rtx *, const char *);\n+extern const char *output_v9branch (rtx, rtx, int, int, int, int, rtx_insn *);\n extern const char *output_probe_stack_range (rtx, rtx);\n-extern const char *output_cbcond (rtx, rtx, rtx);\n+extern const char *output_cbcond (rtx, rtx, rtx_insn *);\n extern bool emit_scc_insn (rtx []);\n extern void emit_conditional_branch_insn (rtx []);\n extern int registers_ok_for_ldd_peep (rtx, rtx);"}, {"sha": "7cf2619eed8be1f3b97bcf8c7ae722ad5b17ff12", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 22, "deletions": 19, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1faf324d3c4d2e3fc7bea27984d448e9e107cc4/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1faf324d3c4d2e3fc7bea27984d448e9e107cc4/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=e1faf324d3c4d2e3fc7bea27984d448e9e107cc4", "patch": "@@ -4103,7 +4103,8 @@ sparc_tls_referenced_p (rtx x)\n static rtx\n sparc_legitimize_tls_address (rtx addr)\n {\n-  rtx temp1, temp2, temp3, ret, o0, got, insn;\n+  rtx temp1, temp2, temp3, ret, o0, got;\n+  rtx_insn *insn;\n \n   gcc_assert (can_create_pseudo_p ());\n \n@@ -4256,7 +4257,7 @@ sparc_legitimize_pic_address (rtx orig, rtx reg)\n       || (GET_CODE (orig) == LABEL_REF && !can_use_mov_pic_label_ref (orig)))\n     {\n       rtx pic_ref, address;\n-      rtx insn;\n+      rtx_insn *insn;\n \n       if (reg == 0)\n \t{\n@@ -4600,7 +4601,7 @@ load_got_register (void)\n void\n sparc_emit_call_insn (rtx pat, rtx addr)\n {\n-  rtx insn;\n+  rtx_insn *insn;\n \n   insn = emit_call_insn (pat);\n \n@@ -5247,7 +5248,8 @@ emit_save_or_restore_regs (unsigned int low, unsigned int high, rtx base,\n \t\t\t   sorr_act_t action_true, sorr_act_t action_false)\n {\n   unsigned int i;\n-  rtx mem, insn;\n+  rtx mem;\n+  rtx_insn *insn;\n \n   if (TARGET_ARCH64 && high <= 32)\n     {\n@@ -5406,10 +5408,10 @@ emit_save_or_restore_local_in_regs (rtx base, int offset, sorr_act_t action)\n \n /* Emit a window_save insn.  */\n \n-static rtx\n+static rtx_insn *\n emit_window_save (rtx increment)\n {\n-  rtx insn = emit_insn (gen_window_save (increment));\n+  rtx_insn *insn = emit_insn (gen_window_save (increment));\n   RTX_FRAME_RELATED_P (insn) = 1;\n \n   /* The incoming return address (%o7) is saved in %i7.  */\n@@ -5450,7 +5452,7 @@ void\n sparc_expand_prologue (void)\n {\n   HOST_WIDE_INT size;\n-  rtx insn;\n+  rtx_insn *insn;\n \n   /* Compute a snapshot of crtl->uses_only_leaf_regs.  Relying\n      on the final value of the flag means deferring the prologue/epilogue\n@@ -5584,7 +5586,7 @@ void\n sparc_flat_expand_prologue (void)\n {\n   HOST_WIDE_INT size;\n-  rtx insn;\n+  rtx_insn *insn;\n \n   sparc_leaf_function_p = optimize > 0 && crtl->is_leaf;\n \n@@ -5892,7 +5894,7 @@ output_restore (rtx pat)\n /* Output a return.  */\n \n const char *\n-output_return (rtx insn)\n+output_return (rtx_insn *insn)\n {\n   if (crtl->calls_eh_return)\n     {\n@@ -5979,7 +5981,7 @@ output_return (rtx insn)\n /* Output a sibling call.  */\n \n const char *\n-output_sibcall (rtx insn, rtx call_operand)\n+output_sibcall (rtx_insn *insn, rtx call_operand)\n {\n   rtx operands[1];\n \n@@ -6014,7 +6016,7 @@ output_sibcall (rtx insn, rtx call_operand)\n \n       if (final_sequence)\n \t{\n-\t  rtx delay = NEXT_INSN (insn);\n+\t  rtx_insn *delay = NEXT_INSN (insn);\n \t  gcc_assert (delay);\n \n \t  output_restore (PATTERN (delay));\n@@ -7586,7 +7588,7 @@ sparc_preferred_simd_mode (enum machine_mode mode)\n    DEST is the destination insn (i.e. the label), INSN is the source.  */\n \n const char *\n-output_ubranch (rtx dest, rtx insn)\n+output_ubranch (rtx dest, rtx_insn *insn)\n {\n   static char string[64];\n   bool v9_form = false;\n@@ -7660,7 +7662,7 @@ output_ubranch (rtx dest, rtx insn)\n \n const char *\n output_cbranch (rtx op, rtx dest, int label, int reversed, int annul,\n-\t\trtx insn)\n+\t\trtx_insn *insn)\n {\n   static char string[64];\n   enum rtx_code code = GET_CODE (op);\n@@ -8123,7 +8125,7 @@ sparc_emit_fixunsdi (rtx *operands, enum machine_mode mode)\n    and OP is the conditional expression.  */\n \n const char *\n-output_cbcond (rtx op, rtx dest, rtx insn)\n+output_cbcond (rtx op, rtx dest, rtx_insn *insn)\n {\n   enum machine_mode mode = GET_MODE (XEXP (op, 0));\n   enum rtx_code code = GET_CODE (op);\n@@ -8250,7 +8252,7 @@ output_cbcond (rtx op, rtx dest, rtx insn)\n \n const char *\n output_v9branch (rtx op, rtx dest, int reg, int label, int reversed,\n-\t\t int annul, rtx insn)\n+\t\t int annul, rtx_insn *insn)\n {\n   static char string[64];\n   enum rtx_code code = GET_CODE (op);\n@@ -9837,7 +9839,7 @@ sparc_check_64 (rtx x, rtx insn)\n    OPERANDS are its operands and OPCODE is the mnemonic to be used.  */\n \n const char *\n-output_v8plus_shift (rtx insn, rtx *operands, const char *opcode)\n+output_v8plus_shift (rtx_insn *insn, rtx *operands, const char *opcode)\n {\n   static char asm_code[60];\n \n@@ -11264,7 +11266,8 @@ sparc_output_mi_thunk (FILE *file, tree thunk_fndecl ATTRIBUTE_UNUSED,\n \t\t       HOST_WIDE_INT delta, HOST_WIDE_INT vcall_offset,\n \t\t       tree function)\n {\n-  rtx this_rtx, insn, funexp;\n+  rtx this_rtx, funexp;\n+  rtx_insn *insn;\n   unsigned int int_arg_first;\n \n   reload_completed = 1;\n@@ -11486,7 +11489,7 @@ sparc_init_machine_status (void)\n static const char *\n get_some_local_dynamic_name (void)\n {\n-  rtx insn;\n+  rtx_insn *insn;\n \n   if (cfun->machine->some_ld_name)\n     return cfun->machine->some_ld_name;\n@@ -12120,7 +12123,7 @@ sparc_preferred_reload_class (rtx x, reg_class_t rclass)\n    OPERANDS are its operands and OPCODE is the mnemonic to be used.  */\n \n const char *\n-output_v8plus_mult (rtx insn, rtx *operands, const char *opcode)\n+output_v8plus_mult (rtx_insn *insn, rtx *operands, const char *opcode)\n {\n   char mulstr[32];\n "}]}