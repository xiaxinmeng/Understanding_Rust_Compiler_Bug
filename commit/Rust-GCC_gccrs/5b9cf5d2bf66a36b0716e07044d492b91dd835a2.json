{"sha": "5b9cf5d2bf66a36b0716e07044d492b91dd835a2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWI5Y2Y1ZDJiZjY2YTM2YjA3MTZlMDcwNDRkNDkyYjkxZGQ4MzVhMg==", "commit": {"author": {"name": "Torvald Riegel", "email": "triegel@redhat.com", "date": "2012-02-14T13:14:12Z"}, "committer": {"name": "Torvald Riegel", "email": "torvald@gcc.gnu.org", "date": "2012-02-14T13:14:12Z"}, "message": "libitm: Improve method reinit and choice.\n\n\tlibitm/\n\t* dispatch.h (GTM::abi_dispatch::supports): New.\n\t(GTM::method_group::reinit): New.\n\t* retry.cc (GTM::gtm_thread::decide_retry_strategy): Use reinit().\n\t(GTM::gtm_thread::number_of_threads_changed): Check that the method\n\tsupports the current situation.\n\nFrom-SVN: r184211", "tree": {"sha": "0c010bcc192851eb16058d7cb732414acc193075", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0c010bcc192851eb16058d7cb732414acc193075"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5b9cf5d2bf66a36b0716e07044d492b91dd835a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b9cf5d2bf66a36b0716e07044d492b91dd835a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b9cf5d2bf66a36b0716e07044d492b91dd835a2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b9cf5d2bf66a36b0716e07044d492b91dd835a2/comments", "author": {"login": "triegelrh", "id": 62400967, "node_id": "MDQ6VXNlcjYyNDAwOTY3", "avatar_url": "https://avatars.githubusercontent.com/u/62400967?v=4", "gravatar_id": "", "url": "https://api.github.com/users/triegelrh", "html_url": "https://github.com/triegelrh", "followers_url": "https://api.github.com/users/triegelrh/followers", "following_url": "https://api.github.com/users/triegelrh/following{/other_user}", "gists_url": "https://api.github.com/users/triegelrh/gists{/gist_id}", "starred_url": "https://api.github.com/users/triegelrh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/triegelrh/subscriptions", "organizations_url": "https://api.github.com/users/triegelrh/orgs", "repos_url": "https://api.github.com/users/triegelrh/repos", "events_url": "https://api.github.com/users/triegelrh/events{/privacy}", "received_events_url": "https://api.github.com/users/triegelrh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7d33bcb73866d5310b4eb190172240bcb71f51f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d33bcb73866d5310b4eb190172240bcb71f51f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d33bcb73866d5310b4eb190172240bcb71f51f6"}], "stats": {"total": 45, "additions": 32, "deletions": 13}, "files": [{"sha": "e44057d38d34efc327391d34ae2c900e244d5f26", "filename": "libitm/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9cf5d2bf66a36b0716e07044d492b91dd835a2/libitm%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9cf5d2bf66a36b0716e07044d492b91dd835a2/libitm%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2FChangeLog?ref=5b9cf5d2bf66a36b0716e07044d492b91dd835a2", "patch": "@@ -1,3 +1,11 @@\n+2012-02-14  Torvald Riegel  <triegel@redhat.com>\n+\n+\t* dispatch.h (GTM::abi_dispatch::supports): New.\n+\t(GTM::method_group::reinit): New.\n+\t* retry.cc (GTM::gtm_thread::decide_retry_strategy): Use reinit().\n+\t(GTM::gtm_thread::number_of_threads_changed): Check that the method\n+\tsupports the current situation.\n+\n 2012-02-14  Torvald Riegel  <triegel@redhat.com>\n \n \t* util.cc (GTM::xcalloc): New."}, {"sha": "d059c493507df885461981581ce62e11aef83e81", "filename": "libitm/dispatch.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9cf5d2bf66a36b0716e07044d492b91dd835a2/libitm%2Fdispatch.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9cf5d2bf66a36b0716e07044d492b91dd835a2/libitm%2Fdispatch.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2Fdispatch.h?ref=5b9cf5d2bf66a36b0716e07044d492b91dd835a2", "patch": "@@ -245,6 +245,12 @@ struct method_group\n   // Stop using any method from this group for now. This can be used to\n   // destruct meta data as soon as this method group is not used anymore.\n   virtual void fini() = 0;\n+  // This can be overriden to implement more light-weight re-initialization.\n+  virtual void reinit()\n+  {\n+    fini();\n+    init();\n+  }\n };\n \n \n@@ -290,6 +296,10 @@ struct abi_dispatch\n   // method on begin of a nested transaction without committing or restarting\n   // the parent method.\n   virtual abi_dispatch* closed_nesting_alternative() { return 0; }\n+  // Returns true iff this method group supports the current situation.\n+  // NUMBER_OF_THREADS is the current number of threads that might execute\n+  // transactions.\n+  virtual bool supports(unsigned number_of_threads) { return true; }\n \n   bool read_only () const { return m_read_only; }\n   bool write_through() const { return m_write_through; }"}, {"sha": "761a066e834aa5f555c03e5eb1b76dd75010d8bc", "filename": "libitm/retry.cc", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9cf5d2bf66a36b0716e07044d492b91dd835a2/libitm%2Fretry.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9cf5d2bf66a36b0716e07044d492b91dd835a2/libitm%2Fretry.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2Fretry.cc?ref=5b9cf5d2bf66a36b0716e07044d492b91dd835a2", "patch": "@@ -58,11 +58,8 @@ GTM::gtm_thread::decide_retry_strategy (gtm_restart_reason r)\n \t  serial_lock.read_unlock(this);\n \t  serial_lock.write_lock();\n \t  if (disp->get_method_group() == default_dispatch->get_method_group())\n-\t    {\n-\t      // Still the same method group.\n-\t      disp->get_method_group()->fini();\n-\t      disp->get_method_group()->init();\n-\t    }\n+\t    // Still the same method group.\n+\t    disp->get_method_group()->reinit();\n \t  serial_lock.write_unlock();\n \t  serial_lock.read_lock(this);\n \t  if (disp->get_method_group() != default_dispatch->get_method_group())\n@@ -72,11 +69,8 @@ GTM::gtm_thread::decide_retry_strategy (gtm_restart_reason r)\n \t    }\n \t}\n       else\n-\t{\n-\t  // We are a serial transaction already, which makes things simple.\n-\t  disp->get_method_group()->fini();\n-\t  disp->get_method_group()->init();\n-\t}\n+\t// We are a serial transaction already, which makes things simple.\n+\tdisp->get_method_group()->reinit();\n     }\n \n   bool retry_irr = (r == RESTART_SERIAL_IRR);\n@@ -249,17 +243,24 @@ GTM::gtm_thread::number_of_threads_changed(unsigned previous, unsigned now)\n       // Only one thread, so use a serializing method.\n       // ??? If we don't have a fast serial mode implementation, it might be\n       // better to use the global lock method set here.\n-      if (default_dispatch_user)\n+      if (default_dispatch_user && default_dispatch_user->supports(now))\n \tset_default_dispatch(default_dispatch_user);\n       else\n \tset_default_dispatch(dispatch_serialirr());\n     }\n   else if (now > 1 && previous <= 1)\n     {\n       // More than one thread, use the default method.\n-      if (default_dispatch_user)\n+      if (default_dispatch_user && default_dispatch_user->supports(now))\n \tset_default_dispatch(default_dispatch_user);\n       else\n-\tset_default_dispatch(dispatch_serialirr_onwrite());\n+\t{\n+\t  abi_dispatch* a = dispatch_serialirr_onwrite();\n+\t  if (a->supports(now))\n+\t    set_default_dispatch(a);\n+\t  else\n+\t    // Serial-irrevocable mode always works.\n+\t    set_default_dispatch(dispatch_serialirr());\n+\t}\n     }\n }"}]}