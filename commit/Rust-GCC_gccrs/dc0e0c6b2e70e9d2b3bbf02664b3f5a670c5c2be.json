{"sha": "dc0e0c6b2e70e9d2b3bbf02664b3f5a670c5c2be", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGMwZTBjNmIyZTcwZTlkMmIzYmJmMDI2NjRiM2Y1YTY3MGM1YzJiZQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2018-04-12T14:18:17Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2018-04-12T14:18:17Z"}, "message": "re PR target/85238 (lto-wrapper: fatal error:  simple_object_copy_lto_debug_sections not implemented: Invalid argument  on Cygwin)\n\n\tPR target/85238\n\t* lto-wrapper.c (debug_objcopy): Open the files in binary mode.\n\t* dwarf2out.c (dwarf2out_early_finish): Do not generate assembly in LTO\n\tmode for PE-COFF targets.\n\t* config/i386/i386-protos.h (i386_pe_asm_lto_start): Declare.\n\t(i386_pe_asm_lto_end): Likewise.\n\t* config/i386/cygming.h (TARGET_ASM_LTO_START): Define.\n\t(TARGET_ASM_LTO_END): Likewise.\n\t* config/i386/winnt.c (saved_debug_info_level): New static variable.\n\t(i386_pe_asm_lto_start): New function.\n\t(i386_pe_asm_lto_end): Likewise.\n\nFrom-SVN: r259347", "tree": {"sha": "f9ab5a36b95554430d5d26309c62747b49010914", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f9ab5a36b95554430d5d26309c62747b49010914"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dc0e0c6b2e70e9d2b3bbf02664b3f5a670c5c2be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc0e0c6b2e70e9d2b3bbf02664b3f5a670c5c2be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc0e0c6b2e70e9d2b3bbf02664b3f5a670c5c2be", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc0e0c6b2e70e9d2b3bbf02664b3f5a670c5c2be/comments", "author": null, "committer": null, "parents": [{"sha": "2e5efa6760314aac101b63d1a7742cff5f5e650f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e5efa6760314aac101b63d1a7742cff5f5e650f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e5efa6760314aac101b63d1a7742cff5f5e650f"}], "stats": {"total": 47, "additions": 45, "deletions": 2}, "files": [{"sha": "25bcfa906caa7a6343cba566d945f87b289a9f8d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc0e0c6b2e70e9d2b3bbf02664b3f5a670c5c2be/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc0e0c6b2e70e9d2b3bbf02664b3f5a670c5c2be/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dc0e0c6b2e70e9d2b3bbf02664b3f5a670c5c2be", "patch": "@@ -1,3 +1,17 @@\n+2018-04-12  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR target/85238\n+\t* lto-wrapper.c (debug_objcopy): Open the files in binary mode.\n+\t* dwarf2out.c (dwarf2out_early_finish): Do not generate assembly in LTO\n+\tmode for PE-COFF targets.\n+\t* config/i386/i386-protos.h (i386_pe_asm_lto_start): Declare.\n+\t(i386_pe_asm_lto_end): Likewise.\n+\t* config/i386/cygming.h (TARGET_ASM_LTO_START): Define.\n+\t(TARGET_ASM_LTO_END): Likewise.\n+\t* config/i386/winnt.c (saved_debug_info_level): New static variable.\n+\t(i386_pe_asm_lto_start): New function.\n+\t(i386_pe_asm_lto_end): Likewise.\n+\n 2018-04-12  Cesar Philippidis  <cesar@codesourcery.com>\n \t    Richard Biener  <rguenther@suse.de>\n "}, {"sha": "1d358858106137949df8a6c60e5190e8adc847d1", "filename": "gcc/config/i386/cygming.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc0e0c6b2e70e9d2b3bbf02664b3f5a670c5c2be/gcc%2Fconfig%2Fi386%2Fcygming.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc0e0c6b2e70e9d2b3bbf02664b3f5a670c5c2be/gcc%2Fconfig%2Fi386%2Fcygming.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcygming.h?ref=dc0e0c6b2e70e9d2b3bbf02664b3f5a670c5c2be", "patch": "@@ -356,6 +356,12 @@ do {\t\t\t\t\t\t\\\n #undef TARGET_ASM_FILE_END\n #define TARGET_ASM_FILE_END i386_pe_file_end\n \n+/* Kludge because of missing PE-COFF support for early LTO debug.  */\n+#undef  TARGET_ASM_LTO_START\n+#define TARGET_ASM_LTO_START i386_pe_asm_lto_start\n+#undef  TARGET_ASM_LTO_END\n+#define TARGET_ASM_LTO_END i386_pe_asm_lto_end\n+\n #undef ASM_COMMENT_START\n #define ASM_COMMENT_START \" #\"\n "}, {"sha": "40756f5973aefcfbcc03cfab18ea89a1cd078c99", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc0e0c6b2e70e9d2b3bbf02664b3f5a670c5c2be/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc0e0c6b2e70e9d2b3bbf02664b3f5a670c5c2be/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=dc0e0c6b2e70e9d2b3bbf02664b3f5a670c5c2be", "patch": "@@ -254,6 +254,8 @@ extern void i386_pe_asm_output_aligned_decl_common (FILE *, tree,\n \t\t\t\t\t\t    HOST_WIDE_INT,\n \t\t\t\t\t\t    HOST_WIDE_INT);\n extern void i386_pe_file_end (void);\n+extern void i386_pe_asm_lto_start (void);\n+extern void i386_pe_asm_lto_end (void);\n extern void i386_pe_start_function (FILE *, const char *, tree);\n extern void i386_pe_end_function (FILE *, const char *, tree);\n extern void i386_pe_end_cold_function (FILE *, const char *, tree);"}, {"sha": "3a857f9102ac8d13d0de3f7ccdb5262bdc0a2b27", "filename": "gcc/config/i386/winnt.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc0e0c6b2e70e9d2b3bbf02664b3f5a670c5c2be/gcc%2Fconfig%2Fi386%2Fwinnt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc0e0c6b2e70e9d2b3bbf02664b3f5a670c5c2be/gcc%2Fconfig%2Fi386%2Fwinnt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fwinnt.c?ref=dc0e0c6b2e70e9d2b3bbf02664b3f5a670c5c2be", "patch": "@@ -808,6 +808,23 @@ i386_pe_file_end (void)\n     }\n }\n \n+/* Kludge because of missing PE-COFF support for early LTO debug.  */\n+\n+static enum debug_info_levels saved_debug_info_level;\n+\n+void\n+i386_pe_asm_lto_start (void)\n+{\n+  saved_debug_info_level = debug_info_level;\n+  debug_info_level = DINFO_LEVEL_NONE;\n+}\n+\n+void\n+i386_pe_asm_lto_end (void)\n+{\n+  debug_info_level = saved_debug_info_level;\n+}\n+\n \f\n /* x64 Structured Exception Handling unwind info.  */\n "}, {"sha": "620e66986be6c39b9c6b2184d0d94444ddf7fa57", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc0e0c6b2e70e9d2b3bbf02664b3f5a670c5c2be/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc0e0c6b2e70e9d2b3bbf02664b3f5a670c5c2be/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=dc0e0c6b2e70e9d2b3bbf02664b3f5a670c5c2be", "patch": "@@ -31820,7 +31820,11 @@ dwarf2out_early_finish (const char *filename)\n   early_dwarf_finished = true;\n \n   /* Do not generate DWARF assembler now when not producing LTO bytecode.  */\n-  if (!flag_generate_lto && !flag_generate_offload)\n+  if ((!flag_generate_lto && !flag_generate_offload)\n+      /* FIXME: Disable debug info generation for PE-COFF targets since the\n+\t copy_lto_debug_sections operation of the simple object support in\n+\t libiberty is not implemented for them yet.  */\n+      || TARGET_PECOFF)\n     return;\n \n   /* Now as we are going to output for LTO initialize sections and labels"}, {"sha": "f1f059cbfc0f58b4175bd1baa62dbc163488eb97", "filename": "gcc/lto-wrapper.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc0e0c6b2e70e9d2b3bbf02664b3f5a670c5c2be/gcc%2Flto-wrapper.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc0e0c6b2e70e9d2b3bbf02664b3f5a670c5c2be/gcc%2Flto-wrapper.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-wrapper.c?ref=dc0e0c6b2e70e9d2b3bbf02664b3f5a670c5c2be", "patch": "@@ -983,7 +983,7 @@ debug_objcopy (const char *infile)\n       infile = fname;\n       inoff = (off_t) loffset;\n     }\n-  int infd = open (infile, O_RDONLY);\n+  int infd = open (infile, O_RDONLY | O_BINARY);\n   if (infd == -1)\n     return NULL;\n   simple_object_read *inobj = simple_object_start_read (infd, inoff,"}]}