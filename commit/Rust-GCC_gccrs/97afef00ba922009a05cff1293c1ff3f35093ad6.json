{"sha": "97afef00ba922009a05cff1293c1ff3f35093ad6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTdhZmVmMDBiYTkyMjAwOWEwNWNmZjEyOTNjMWZmM2YzNTA5M2FkNg==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2015-04-24T13:05:50Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2015-04-24T13:05:50Z"}, "message": "i386-protos.h (ix86_operands_ok_for_move_multiple): New.\n\n\t* config/i386/i386-protos.h (ix86_operands_ok_for_move_multiple): New.\n\t* config/i386/i386.c (extract_base_offset_in_addr): New function.\n\t(ix86_operands_ok_for_move_multiple): Ditto.\n\t* config/i386/sse.md (movsd/movhpd to movupd peephole2): New pattern.\n\t(movlpd/movhpd to movupd peephole2): Ditto.\n\ntestsuite/ChangeLog:\n\n\t* gcc.target/i386/sse2-load-multi.c: New test.\n\t* gcc.target/i386/sse2-store-multi.c: Ditto.\n\n\nCo-Authored-By: Wei Mi <wmi@google.com>\n\nFrom-SVN: r222410", "tree": {"sha": "991f4046ffcb8968766f59793bb2be72088fc97f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/991f4046ffcb8968766f59793bb2be72088fc97f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/97afef00ba922009a05cff1293c1ff3f35093ad6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97afef00ba922009a05cff1293c1ff3f35093ad6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97afef00ba922009a05cff1293c1ff3f35093ad6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97afef00ba922009a05cff1293c1ff3f35093ad6/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8c2b7f79721cb9ef50d996ef2073210e7402c69a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c2b7f79721cb9ef50d996ef2073210e7402c69a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c2b7f79721cb9ef50d996ef2073210e7402c69a"}], "stats": {"total": 176, "additions": 176, "deletions": 0}, "files": [{"sha": "952a1dd1a172a30ec1637b5f5674046cc7383f18", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97afef00ba922009a05cff1293c1ff3f35093ad6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97afef00ba922009a05cff1293c1ff3f35093ad6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=97afef00ba922009a05cff1293c1ff3f35093ad6", "patch": "@@ -1,3 +1,12 @@\n+2015-04-24  Uros Bizjak  <ubizjak@gmail.com>\n+\t    Wei Mi  <wmi@google.com>\n+\n+\t* config/i386/i386-protos.h (ix86_operands_ok_for_move_multiple): New.\n+\t* config/i386/i386.c (extract_base_offset_in_addr): New function.\n+\t(ix86_operands_ok_for_move_multiple): Ditto.\n+\t* config/i386/sse.md (movsd/movhpd to movupd peephole2): New pattern.\n+\t(movlpd/movhpd to movupd peephole2): Ditto.\n+\n 2015-04-24  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/61534"}, {"sha": "0224c362e97592647c628992a033c3276bb6887a", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97afef00ba922009a05cff1293c1ff3f35093ad6/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97afef00ba922009a05cff1293c1ff3f35093ad6/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=97afef00ba922009a05cff1293c1ff3f35093ad6", "patch": "@@ -304,6 +304,8 @@ extern enum attr_cpu ix86_schedule;\n #endif\n \n extern const char * ix86_output_call_insn (rtx_insn *insn, rtx call_op);\n+extern bool ix86_operands_ok_for_move_multiple (rtx *operands, bool load,\n+\t\t\t\t\t\tenum machine_mode mode);\n \n #ifdef RTX_CODE\n /* Target data for multipass lookahead scheduling."}, {"sha": "77a6109b711cbf12b8db409b993dba9abb4552b6", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97afef00ba922009a05cff1293c1ff3f35093ad6/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97afef00ba922009a05cff1293c1ff3f35093ad6/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=97afef00ba922009a05cff1293c1ff3f35093ad6", "patch": "@@ -51726,6 +51726,92 @@ ix86_binds_local_p (const_tree exp)\n }\n #endif\n \n+/* If MEM is in the form of [base+offset], extract the two parts\n+   of address and set to BASE and OFFSET, otherwise return false.  */\n+\n+static bool\n+extract_base_offset_in_addr (rtx mem, rtx *base, rtx *offset)\n+{\n+  rtx addr;\n+\n+  gcc_assert (MEM_P (mem));\n+\n+  addr = XEXP (mem, 0);\n+  \n+  if (GET_CODE (addr) == CONST)\n+    addr = XEXP (addr, 0);\n+\n+  if (REG_P (addr) || GET_CODE (addr) == SYMBOL_REF)\n+    {\n+      *base = addr;\n+      *offset = const0_rtx;\n+      return true;\n+    }\n+\n+  if (GET_CODE (addr) == PLUS\n+      && (REG_P (XEXP (addr, 0))\n+\t  || GET_CODE (XEXP (addr, 0)) == SYMBOL_REF)\n+      && CONST_INT_P (XEXP (addr, 1)))\n+    {\n+      *base = XEXP (addr, 0);\n+      *offset = XEXP (addr, 1);\n+      return true;\n+    }\n+\n+  return false;\n+}\n+\n+/* Given OPERANDS of consecutive load/store, check if we can merge\n+   them into move multiple.  LOAD is true if they are load instructions.\n+   MODE is the mode of memory operands.  */\n+\n+bool\n+ix86_operands_ok_for_move_multiple (rtx *operands, bool load,\n+\t\t\t\t    enum machine_mode mode)\n+{\n+  HOST_WIDE_INT offval_1, offval_2, msize;\n+  rtx mem_1, mem_2, reg_1, reg_2, base_1, base_2, offset_1, offset_2;\n+\n+  if (load)\n+    {\n+      mem_1 = operands[1];\n+      mem_2 = operands[3];\n+      reg_1 = operands[0];\n+      reg_2 = operands[2];\n+    }\n+  else\n+    {\n+      mem_1 = operands[0];\n+      mem_2 = operands[2];\n+      reg_1 = operands[1];\n+      reg_2 = operands[3];\n+    }\n+\n+  gcc_assert (REG_P (reg_1) && REG_P (reg_2));\n+\n+  if (REGNO (reg_1) != REGNO (reg_2))\n+    return false;\n+\n+  /* Check if the addresses are in the form of [base+offset].  */\n+  if (!extract_base_offset_in_addr (mem_1, &base_1, &offset_1))\n+    return false;\n+  if (!extract_base_offset_in_addr (mem_2, &base_2, &offset_2))\n+    return false;\n+\n+  /* Check if the bases are the same.  */\n+  if (!rtx_equal_p (base_1, base_2))\n+    return false;\n+\n+  offval_1 = INTVAL (offset_1);\n+  offval_2 = INTVAL (offset_2);\n+  msize = GET_MODE_SIZE (mode);\n+  /* Check if mem_1 is adjacent to mem_2 and mem_1 has lower address.  */\n+  if (offval_1 + msize != offval_2)\n+    return false;\n+\n+  return true;\n+}\n+\n /* Initialize the GCC target structure.  */\n #undef TARGET_RETURN_IN_MEMORY\n #define TARGET_RETURN_IN_MEMORY ix86_return_in_memory"}, {"sha": "9b7009ace6b317209b4fc2d70c4db42778e88727", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97afef00ba922009a05cff1293c1ff3f35093ad6/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97afef00ba922009a05cff1293c1ff3f35093ad6/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=97afef00ba922009a05cff1293c1ff3f35093ad6", "patch": "@@ -1183,6 +1183,21 @@\n \t      ]\n \t      (const_string \"<MODE>\")))])\n \n+;; Merge movsd/movhpd to movupd for TARGET_SSE_UNALIGNED_LOAD_OPTIMAL targets.\n+(define_peephole2\n+  [(set (match_operand:V2DF 0 \"register_operand\")\n+\t(vec_concat:V2DF (match_operand:DF 1 \"memory_operand\")\n+\t\t\t (match_operand:DF 4 \"const0_operand\")))\n+   (set (match_operand:V2DF 2 \"register_operand\")\n+\t(vec_concat:V2DF (vec_select:DF (match_dup 2)\n+\t\t\t\t\t(parallel [(const_int 0)]))\n+\t\t\t (match_operand:DF 3 \"memory_operand\")))]\n+  \"TARGET_SSE2 && TARGET_SSE_UNALIGNED_LOAD_OPTIMAL\n+   && ix86_operands_ok_for_move_multiple (operands, true, DFmode)\"\n+  [(set (match_dup 2)\n+\t(unspec:V2DF [(match_dup 4)] UNSPEC_LOADU))]\n+  \"operands[4] = adjust_address (operands[1], V2DFmode, 0);\")\n+\n (define_insn \"<sse>_storeu<ssemodesuffix><avxsizesuffix>\"\n   [(set (match_operand:VF 0 \"memory_operand\" \"=m\")\n \t(unspec:VF\n@@ -1242,6 +1257,20 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n+;; Merge movlpd/movhpd to movupd for TARGET_SSE_UNALIGNED_STORE_OPTIMAL targets.\n+(define_peephole2\n+  [(set (match_operand:DF 0 \"memory_operand\")\n+\t(vec_select:DF (match_operand:V2DF 1 \"register_operand\")\n+\t\t       (parallel [(const_int 0)])))\n+   (set (match_operand:DF 2 \"memory_operand\")\n+\t(vec_select:DF (match_operand:V2DF 3 \"register_operand\")\n+\t\t       (parallel [(const_int 1)])))]\n+  \"TARGET_SSE2 && TARGET_SSE_UNALIGNED_STORE_OPTIMAL\n+   && ix86_operands_ok_for_move_multiple (operands, false, DFmode)\"\n+  [(set (match_dup 4)\n+\t(unspec:V2DF [(match_dup 1)] UNSPEC_STOREU))]\n+  \"operands[4] = adjust_address (operands[0], V2DFmode, 0);\")\n+\n /* For AVX, normal *mov<mode>_internal pattern will handle unaligned loads\n    just fine if misaligned_operand is true, and without the UNSPEC it can\n    be combined with arithmetic instructions.  If misaligned_operand is"}, {"sha": "4b2f62bc32dcd7aa8db15dafda4936f99360b852", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97afef00ba922009a05cff1293c1ff3f35093ad6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97afef00ba922009a05cff1293c1ff3f35093ad6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=97afef00ba922009a05cff1293c1ff3f35093ad6", "patch": "@@ -1,3 +1,9 @@\n+2015-04-24  Uros Bizjak  <ubizjak@gmail.com>\n+\t    Wei Mi  <wmi@google.com>\n+\n+\t* gcc.target/i386/sse2-load-multi.c: New test.\n+\t* gcc.target/i386/sse2-store-multi.c: Ditto.\n+\n 2015-04-24  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/65830"}, {"sha": "927605460d8eec2c36f8a7d9047972e671f74d4c", "filename": "gcc/testsuite/gcc.target/i386/sse2-load-multi.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97afef00ba922009a05cff1293c1ff3f35093ad6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-load-multi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97afef00ba922009a05cff1293c1ff3f35093ad6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-load-multi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-load-multi.c?ref=97afef00ba922009a05cff1293c1ff3f35093ad6", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=corei7 -O2\" } */\n+\n+#include <emmintrin.h>\n+\n+double a[8];\n+\n+__m128d load_1 ()\n+{\n+  __m128d res;\n+  res = _mm_load_sd (&a[1]);\n+  res = _mm_loadh_pd (res, &a[2]);\n+  return res;\n+}\n+\n+__m128d load_2 (double *a)\n+{\n+  __m128d res;\n+  res = _mm_load_sd (&a[1]);\n+  res = _mm_loadh_pd (res, &a[2]);\n+  return res;\n+}\n+\n+/* { dg-final { scan-assembler-times \"movup\" 2 } } */"}, {"sha": "203a00f69becc0aec7e5bb95a8ff94b1bea01703", "filename": "gcc/testsuite/gcc.target/i386/sse2-store-multi.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97afef00ba922009a05cff1293c1ff3f35093ad6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-store-multi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97afef00ba922009a05cff1293c1ff3f35093ad6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-store-multi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-store-multi.c?ref=97afef00ba922009a05cff1293c1ff3f35093ad6", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=corei7 -O2\" } */\n+\n+#include <emmintrin.h>\n+\n+double a[8];\n+\n+void store_1 (__m128d val)\n+{\n+  _mm_store_sd (&a[1], val);\n+  _mm_storeh_pd (&a[2], val);\n+}\n+\n+void store_2 (__m128d val, double *a)\n+{\n+  _mm_store_sd (&a[1], val);\n+  _mm_storeh_pd (&a[2], val);\n+}\n+\n+/* { dg-final { scan-assembler-times \"movup\" 2 } } */"}]}