{"sha": "a0cb1aa7733905ea6a32d8a775d3a4b697cd1273", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTBjYjFhYTc3MzM5MDVlYTZhMzJkOGE3NzVkM2E0YjY5N2NkMTI3Mw==", "commit": {"author": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2001-06-26T20:52:23Z"}, "committer": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2001-06-26T20:52:23Z"}, "message": "acinclude.m4: Clean extraneous tabs, rewrap 'test' lines.\n\n2001-06-26  Phil Edwards  <pme@sources.redhat.com>\n\n\t* acinclude.m4:  Clean extraneous tabs, rewrap 'test' lines.\n\t* aclocal.m4:  Regenerate.\n\t* configure:  Regenerate.\n\nFrom-SVN: r43591", "tree": {"sha": "ded918a132c1089a111117bcb25fe2aac2bb2c43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ded918a132c1089a111117bcb25fe2aac2bb2c43"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a0cb1aa7733905ea6a32d8a775d3a4b697cd1273", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0cb1aa7733905ea6a32d8a775d3a4b697cd1273", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0cb1aa7733905ea6a32d8a775d3a4b697cd1273", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0cb1aa7733905ea6a32d8a775d3a4b697cd1273/comments", "author": null, "committer": null, "parents": [{"sha": "639bc36cede2c6e922f869d730a072909014112e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/639bc36cede2c6e922f869d730a072909014112e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/639bc36cede2c6e922f869d730a072909014112e"}], "stats": {"total": 1962, "additions": 1002, "deletions": 960}, "files": [{"sha": "bcff5d03f56eda346550e267a48edce2543f9ced", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0cb1aa7733905ea6a32d8a775d3a4b697cd1273/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0cb1aa7733905ea6a32d8a775d3a4b697cd1273/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a0cb1aa7733905ea6a32d8a775d3a4b697cd1273", "patch": "@@ -1,3 +1,9 @@\n+2001-06-26  Phil Edwards  <pme@sources.redhat.com>\n+\n+\t* acinclude.m4:  Clean extraneous tabs, rewrap 'test' lines.\n+\t* aclocal.m4:  Regenerate.\n+\t* configure:  Regenerate.\n+\n 2001-06-26  Felix Natter  <f.natter@ndh.net>\n \n \t* docs/html/17_intro/porting-howto.html:  Fixed some errors."}, {"sha": "778731d349d0935225634519bbf6019e706af517", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 28, "deletions": 21, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0cb1aa7733905ea6a32d8a775d3a4b697cd1273/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0cb1aa7733905ea6a32d8a775d3a4b697cd1273/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=a0cb1aa7733905ea6a32d8a775d3a4b697cd1273", "patch": "@@ -209,7 +209,8 @@ AC_DEFUN(GLIBCPP_CHECK_COMPILER_FEATURES, [\n     # this is the suspicious part\n     CXXFLAGS=''\n   fi\n-  if test x\"$ac_fdsections\" = x\"yes\" && test x\"$enable_debug\" = x\"no\"; then\n+  if test x\"$ac_fdsections\" = x\"yes\" &&\n+     test x\"$enable_debug\" = x\"no\"; then\n     SECTION_FLAGS='-ffunction-sections -fdata-sections'\n   fi\n   AC_MSG_RESULT($ac_fdsections)\n@@ -276,7 +277,8 @@ AC_DEFUN(GLIBCPP_CHECK_LINKER_FEATURES, [\n   fi\n \n   # Set linker optimization flags.\n-  if test x\"$ac_cv_prog_gnu_ld\" = x\"yes\" && test x\"$enable_debug\" = x\"no\"; then\n+  if test x\"$ac_cv_prog_gnu_ld\" = x\"yes\" &&\n+     test x\"$enable_debug\" = x\"no\"; then\n     OPT_LDFLAGS='-Wl,-O1'\n   fi\n \n@@ -331,7 +333,7 @@ AC_DEFUN(GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1, [\n     GLIBCPP_CHECK_MATH_DECL_1(_$1)\n     if test x$glibcpp_cv_func__$1_use = x\"yes\"; then\n       AC_CHECK_FUNCS(_$1)    \n-    fi\t\n+    fi\n   fi\n ])\n \n@@ -398,7 +400,7 @@ AC_DEFUN(GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2, [\n     GLIBCPP_CHECK_MATH_DECL_2(_$1)\n     if test x$glibcpp_cv_func__$1_use = x\"yes\"; then\n       AC_CHECK_FUNCS(_$1)    \n-    fi\t\n+    fi\n   fi\n ])\n \n@@ -444,7 +446,7 @@ AC_DEFUN(GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_3, [\n     GLIBCPP_CHECK_MATH_DECL_3(_$1)\n     if test x$glibcpp_cv_func__$1_use = x\"yes\"; then\n       AC_CHECK_FUNCS(_$1)    \n-    fi\t\n+    fi\n   fi\n ])\n \n@@ -739,8 +741,8 @@ AC_DEFUN(GLIBCPP_CHECK_COMPLEX_MATH_SUPPORT, [\n   dnl Currently this includes copysignl and atan2l, which should be\n   dnl cached from the GLIBCPP_CHECK_MATH_SUPPORT macro, above.\n   USE_COMPLEX_LONG_DOUBLE=no\n-  if test x$ac_cv_func_atan2l = x\"yes\" \\\n-     && test x$ac_cv_func_copysignl = x\"yes\"; then\n+  if test x$ac_cv_func_atan2l = x\"yes\" &&\n+     test x$ac_cv_func_copysignl = x\"yes\"; then\n     USE_COMPLEX_LONG_DOUBLE=yes\n     AC_REPLACE_MATHFUNCS(hypotl signbitl)\n   fi\n@@ -789,8 +791,9 @@ AC_DEFUN(GLIBCPP_CHECK_WCHAR_T_SUPPORT, [\n   AC_CHECK_HEADER(wctype.h, ac_has_wctype_h=yes, ac_has_wctype_h=no)\n   \n   dnl Only continue checking if the ISO C99 headers exist and support is on.\n-  if test x\"$ac_has_wchar_h\" = xyes && test x\"$ac_has_wctype_h\" = xyes \\\n-     && test x\"$enable_c_mbchar\" != xno; then\n+  if test x\"$ac_has_wchar_h\" = xyes &&\n+     test x\"$ac_has_wctype_h\" = xyes &&\n+     test x\"$enable_c_mbchar\" != xno; then\n       \n     dnl Test wchar.h for WCHAR_MIN, WCHAR_MAX, which is needed before\n     dnl numeric_limits can instantiate type_traits<wchar_t>\n@@ -825,8 +828,9 @@ AC_DEFUN(GLIBCPP_CHECK_WCHAR_T_SUPPORT, [\n     ac_wfuncs=no)\n \n     AC_MSG_CHECKING([for ISO C99 wchar_t support])\n-    if test x\"$has_weof\" = xyes && test x\"$has_wchar_minmax\" = xyes \\\n-       && test x\"$ac_wfuncs\" = xyes; then\n+    if test x\"$has_weof\" = xyes &&\n+       test x\"$has_wchar_minmax\" = xyes &&\n+       test x\"$ac_wfuncs\" = xyes; then\n       ac_isoC99_wchar_t=yes\n     else\n       ac_isoC99_wchar_t=no\n@@ -849,8 +853,9 @@ AC_DEFUN(GLIBCPP_CHECK_WCHAR_T_SUPPORT, [\n     LIBS=\"$ac_save_LIBS\"\n \n     AC_MSG_CHECKING([for XPG2 wchar_t support])\n-    if test x\"$ac_has_iconv_h\" = xyes && test x\"$ac_has_langinfo_h\" = xyes \\\n-       && test x\"$ac_XPG2funcs\" = xyes; then\n+    if test x\"$ac_has_iconv_h\" = xyes &&\n+       test x\"$ac_has_langinfo_h\" = xyes &&\n+       test x\"$ac_XPG2funcs\" = xyes; then\n       ac_XPG2_wchar_t=yes\n     else\n       ac_XPG2_wchar_t=no\n@@ -860,8 +865,8 @@ AC_DEFUN(GLIBCPP_CHECK_WCHAR_T_SUPPORT, [\n     dnl At the moment, only enable wchar_t specializations if all the\n     dnl above support is present.\n     AC_MSG_CHECKING([for enabled wchar_t specializations])\n-    if test x\"$ac_isoC99_wchar_t\" = xyes \\\n-    && test x\"$ac_XPG2_wchar_t\" = xyes; then\n+    if test x\"$ac_isoC99_wchar_t\" = xyes &&\n+       test x\"$ac_XPG2_wchar_t\" = xyes; then\n       AC_DEFINE(_GLIBCPP_USE_WCHAR_T)\n       AC_MSG_RESULT(\"yes\")\n     else\n@@ -1212,7 +1217,7 @@ EOF\n    rm -f conftest*])\n    if test x$enable_sjlj_exceptions = xyes; then\n      AC_DEFINE(_GLIBCPP_SJLJ_EXCEPTIONS, 1,\n-\t[Define if the compiler is configured for setjmp/longjmp exceptions.])\n+        [Define if the compiler is configured for setjmp/longjmp exceptions.])\n      ac_exception_model_name=sjlj\n    elif test x$enable_sjlj_exceptions = xno; then\n      ac_exception_model_name=\"call frame\"\n@@ -1283,7 +1288,7 @@ AC_DEFUN(GLIBCPP_ENABLE_C99, [dnl\n \t\t  void foo(char* fmt, ...)\n \t\t  {va_list args; va_start(args, fmt);\n \t          vfscanf(stderr, \"%i\", args);}],\n-\t          [],, [ac_c99_stdio=no])\t\n+\t          [],, [ac_c99_stdio=no])\n   AC_TRY_COMPILE([#include <stdio.h>\n \t\t  #include <stdarg.h>\n \t\t  void foo(char* fmt, ...)\n@@ -1345,9 +1350,10 @@ AC_DEFUN(GLIBCPP_ENABLE_C99, [dnl\n   AC_MSG_RESULT($ac_c99_wchar)\n \n   AC_MSG_CHECKING([for enabled ISO C99 support])\n-  if test x\"$ac_c99_math\" = x\"no\" || test x\"$ac_c99_stdio\" = x\"no\" \\\n-      || test x\"$ac_c99_stdlib\" = x\"no\" \\\n-      || test x\"$ac_c99_wchar\" = x\"no\"; then\n+  if test x\"$ac_c99_math\" = x\"no\" ||\n+     test x\"$ac_c99_stdio\" = x\"no\" ||\n+     test x\"$ac_c99_stdlib\" = x\"no\" ||\n+     test x\"$ac_c99_wchar\" = x\"no\"; then\n     enable_c99=no; \n   fi; \n   AC_MSG_RESULT($enable_c99)\n@@ -1631,7 +1637,8 @@ fi\n # Calculate glibcpp_toolexecdir, glibcpp_toolexeclibdir\n # Install a library built with a cross compiler in tooldir, not libdir.\n if test x\"$glibcpp_toolexecdir\" = x\"no\"; then \n-  if test -n \"$with_cross_host\" && test x\"$with_cross_host\" != x\"no\"; then\n+  if test -n \"$with_cross_host\" &&\n+     test x\"$with_cross_host\" != x\"no\"; then\n     glibcpp_toolexecdir='$(exec_prefix)/$(target_alias)'\n     glibcpp_toolexeclibdir='$(toolexecdir)/lib$(MULTISUBDIR)'\n   else"}, {"sha": "61dc129b4020917c27484fdfc39b3f4d855eaa61", "filename": "libstdc++-v3/aclocal.m4", "status": "modified", "additions": 28, "deletions": 21, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0cb1aa7733905ea6a32d8a775d3a4b697cd1273/libstdc%2B%2B-v3%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0cb1aa7733905ea6a32d8a775d3a4b697cd1273/libstdc%2B%2B-v3%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Faclocal.m4?ref=a0cb1aa7733905ea6a32d8a775d3a4b697cd1273", "patch": "@@ -221,7 +221,8 @@ AC_DEFUN(GLIBCPP_CHECK_COMPILER_FEATURES, [\n     # this is the suspicious part\n     CXXFLAGS=''\n   fi\n-  if test x\"$ac_fdsections\" = x\"yes\" && test x\"$enable_debug\" = x\"no\"; then\n+  if test x\"$ac_fdsections\" = x\"yes\" &&\n+     test x\"$enable_debug\" = x\"no\"; then\n     SECTION_FLAGS='-ffunction-sections -fdata-sections'\n   fi\n   AC_MSG_RESULT($ac_fdsections)\n@@ -288,7 +289,8 @@ AC_DEFUN(GLIBCPP_CHECK_LINKER_FEATURES, [\n   fi\n \n   # Set linker optimization flags.\n-  if test x\"$ac_cv_prog_gnu_ld\" = x\"yes\" && test x\"$enable_debug\" = x\"no\"; then\n+  if test x\"$ac_cv_prog_gnu_ld\" = x\"yes\" &&\n+     test x\"$enable_debug\" = x\"no\"; then\n     OPT_LDFLAGS='-Wl,-O1'\n   fi\n \n@@ -343,7 +345,7 @@ AC_DEFUN(GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_1, [\n     GLIBCPP_CHECK_MATH_DECL_1(_$1)\n     if test x$glibcpp_cv_func__$1_use = x\"yes\"; then\n       AC_CHECK_FUNCS(_$1)    \n-    fi\t\n+    fi\n   fi\n ])\n \n@@ -410,7 +412,7 @@ AC_DEFUN(GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_2, [\n     GLIBCPP_CHECK_MATH_DECL_2(_$1)\n     if test x$glibcpp_cv_func__$1_use = x\"yes\"; then\n       AC_CHECK_FUNCS(_$1)    \n-    fi\t\n+    fi\n   fi\n ])\n \n@@ -456,7 +458,7 @@ AC_DEFUN(GLIBCPP_CHECK_MATH_DECL_AND_LINKAGE_3, [\n     GLIBCPP_CHECK_MATH_DECL_3(_$1)\n     if test x$glibcpp_cv_func__$1_use = x\"yes\"; then\n       AC_CHECK_FUNCS(_$1)    \n-    fi\t\n+    fi\n   fi\n ])\n \n@@ -751,8 +753,8 @@ AC_DEFUN(GLIBCPP_CHECK_COMPLEX_MATH_SUPPORT, [\n   dnl Currently this includes copysignl and atan2l, which should be\n   dnl cached from the GLIBCPP_CHECK_MATH_SUPPORT macro, above.\n   USE_COMPLEX_LONG_DOUBLE=no\n-  if test x$ac_cv_func_atan2l = x\"yes\" \\\n-     && test x$ac_cv_func_copysignl = x\"yes\"; then\n+  if test x$ac_cv_func_atan2l = x\"yes\" &&\n+     test x$ac_cv_func_copysignl = x\"yes\"; then\n     USE_COMPLEX_LONG_DOUBLE=yes\n     AC_REPLACE_MATHFUNCS(hypotl signbitl)\n   fi\n@@ -801,8 +803,9 @@ AC_DEFUN(GLIBCPP_CHECK_WCHAR_T_SUPPORT, [\n   AC_CHECK_HEADER(wctype.h, ac_has_wctype_h=yes, ac_has_wctype_h=no)\n   \n   dnl Only continue checking if the ISO C99 headers exist and support is on.\n-  if test x\"$ac_has_wchar_h\" = xyes && test x\"$ac_has_wctype_h\" = xyes \\\n-     && test x\"$enable_c_mbchar\" != xno; then\n+  if test x\"$ac_has_wchar_h\" = xyes &&\n+     test x\"$ac_has_wctype_h\" = xyes &&\n+     test x\"$enable_c_mbchar\" != xno; then\n       \n     dnl Test wchar.h for WCHAR_MIN, WCHAR_MAX, which is needed before\n     dnl numeric_limits can instantiate type_traits<wchar_t>\n@@ -837,8 +840,9 @@ AC_DEFUN(GLIBCPP_CHECK_WCHAR_T_SUPPORT, [\n     ac_wfuncs=no)\n \n     AC_MSG_CHECKING([for ISO C99 wchar_t support])\n-    if test x\"$has_weof\" = xyes && test x\"$has_wchar_minmax\" = xyes \\\n-       && test x\"$ac_wfuncs\" = xyes; then\n+    if test x\"$has_weof\" = xyes &&\n+       test x\"$has_wchar_minmax\" = xyes &&\n+       test x\"$ac_wfuncs\" = xyes; then\n       ac_isoC99_wchar_t=yes\n     else\n       ac_isoC99_wchar_t=no\n@@ -861,8 +865,9 @@ AC_DEFUN(GLIBCPP_CHECK_WCHAR_T_SUPPORT, [\n     LIBS=\"$ac_save_LIBS\"\n \n     AC_MSG_CHECKING([for XPG2 wchar_t support])\n-    if test x\"$ac_has_iconv_h\" = xyes && test x\"$ac_has_langinfo_h\" = xyes \\\n-       && test x\"$ac_XPG2funcs\" = xyes; then\n+    if test x\"$ac_has_iconv_h\" = xyes &&\n+       test x\"$ac_has_langinfo_h\" = xyes &&\n+       test x\"$ac_XPG2funcs\" = xyes; then\n       ac_XPG2_wchar_t=yes\n     else\n       ac_XPG2_wchar_t=no\n@@ -872,8 +877,8 @@ AC_DEFUN(GLIBCPP_CHECK_WCHAR_T_SUPPORT, [\n     dnl At the moment, only enable wchar_t specializations if all the\n     dnl above support is present.\n     AC_MSG_CHECKING([for enabled wchar_t specializations])\n-    if test x\"$ac_isoC99_wchar_t\" = xyes \\\n-    && test x\"$ac_XPG2_wchar_t\" = xyes; then\n+    if test x\"$ac_isoC99_wchar_t\" = xyes &&\n+       test x\"$ac_XPG2_wchar_t\" = xyes; then\n       AC_DEFINE(_GLIBCPP_USE_WCHAR_T)\n       AC_MSG_RESULT(\"yes\")\n     else\n@@ -1224,7 +1229,7 @@ EOF\n    rm -f conftest*])\n    if test x$enable_sjlj_exceptions = xyes; then\n      AC_DEFINE(_GLIBCPP_SJLJ_EXCEPTIONS, 1,\n-\t[Define if the compiler is configured for setjmp/longjmp exceptions.])\n+        [Define if the compiler is configured for setjmp/longjmp exceptions.])\n      ac_exception_model_name=sjlj\n    elif test x$enable_sjlj_exceptions = xno; then\n      ac_exception_model_name=\"call frame\"\n@@ -1295,7 +1300,7 @@ AC_DEFUN(GLIBCPP_ENABLE_C99, [dnl\n \t\t  void foo(char* fmt, ...)\n \t\t  {va_list args; va_start(args, fmt);\n \t          vfscanf(stderr, \"%i\", args);}],\n-\t          [],, [ac_c99_stdio=no])\t\n+\t          [],, [ac_c99_stdio=no])\n   AC_TRY_COMPILE([#include <stdio.h>\n \t\t  #include <stdarg.h>\n \t\t  void foo(char* fmt, ...)\n@@ -1357,9 +1362,10 @@ AC_DEFUN(GLIBCPP_ENABLE_C99, [dnl\n   AC_MSG_RESULT($ac_c99_wchar)\n \n   AC_MSG_CHECKING([for enabled ISO C99 support])\n-  if test x\"$ac_c99_math\" = x\"no\" || test x\"$ac_c99_stdio\" = x\"no\" \\\n-      || test x\"$ac_c99_stdlib\" = x\"no\" \\\n-      || test x\"$ac_c99_wchar\" = x\"no\"; then\n+  if test x\"$ac_c99_math\" = x\"no\" ||\n+     test x\"$ac_c99_stdio\" = x\"no\" ||\n+     test x\"$ac_c99_stdlib\" = x\"no\" ||\n+     test x\"$ac_c99_wchar\" = x\"no\"; then\n     enable_c99=no; \n   fi; \n   AC_MSG_RESULT($enable_c99)\n@@ -1643,7 +1649,8 @@ fi\n # Calculate glibcpp_toolexecdir, glibcpp_toolexeclibdir\n # Install a library built with a cross compiler in tooldir, not libdir.\n if test x\"$glibcpp_toolexecdir\" = x\"no\"; then \n-  if test -n \"$with_cross_host\" && test x\"$with_cross_host\" != x\"no\"; then\n+  if test -n \"$with_cross_host\" &&\n+     test x\"$with_cross_host\" != x\"no\"; then\n     glibcpp_toolexecdir='$(exec_prefix)/$(target_alias)'\n     glibcpp_toolexeclibdir='$(toolexecdir)/lib$(MULTISUBDIR)'\n   else"}, {"sha": "73a28884f2fad8d8b2d295a43cfb5afdbf8dab98", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 940, "deletions": 918, "changes": 1858, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0cb1aa7733905ea6a32d8a775d3a4b697cd1273/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0cb1aa7733905ea6a32d8a775d3a4b697cd1273/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=a0cb1aa7733905ea6a32d8a775d3a4b697cd1273"}]}