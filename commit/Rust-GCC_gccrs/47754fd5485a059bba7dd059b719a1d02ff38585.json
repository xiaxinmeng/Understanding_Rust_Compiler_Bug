{"sha": "47754fd5485a059bba7dd059b719a1d02ff38585", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDc3NTRmZDU0ODVhMDU5YmJhN2RkMDU5YjcxOWExZDAyZmYzODU4NQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2002-05-19T09:50:27Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-05-19T09:50:27Z"}, "message": "target-def.h (TARGET_BINDS_LOCAL_P): New.\n\n\t* target-def.h (TARGET_BINDS_LOCAL_P): New.\n\t* target.h (struct gcc_target): Move boolean fields to the end.\n\tAdd binds_local_p.\n\t* varasm.c (default_binds_local_p): New.\n\t* output.h: Declare it.\n\n\t* config/alpha/alpha.c (alpha_encode_section_info): Use the new hook.\n\t* config/cris/cris.c (cris_encode_section_info): Likewise.\n\t* config/i386/i386.c (i386_encode_section_info): Likewise.\n\t* config/ia64/ia64.c (ia64_encode_section_info): Likewise.\n\t* config/sh/sh.c (sh_encode_section_info): Likewise.\n\n\t* doc/tm.texi (TARGET_IN_SMALL_DATA_P): New.\n\t(TARGET_BINDS_LOCAL_P): New.\n\nFrom-SVN: r53620", "tree": {"sha": "09e048642c8026646ba3670cb08ad9d367efeca8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/09e048642c8026646ba3670cb08ad9d367efeca8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/47754fd5485a059bba7dd059b719a1d02ff38585", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47754fd5485a059bba7dd059b719a1d02ff38585", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47754fd5485a059bba7dd059b719a1d02ff38585", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47754fd5485a059bba7dd059b719a1d02ff38585/comments", "author": null, "committer": null, "parents": [{"sha": "c2f22a1230cef5fb0aa370b243c67d3ce61ab931", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2f22a1230cef5fb0aa370b243c67d3ce61ab931", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2f22a1230cef5fb0aa370b243c67d3ce61ab931"}], "stats": {"total": 231, "additions": 119, "deletions": 112}, "files": [{"sha": "fb7f5911774275684cc463d9349c575570854f4a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47754fd5485a059bba7dd059b719a1d02ff38585/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47754fd5485a059bba7dd059b719a1d02ff38585/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=47754fd5485a059bba7dd059b719a1d02ff38585", "patch": "@@ -1,3 +1,20 @@\n+2002-05-19  Richard Henderson  <rth@redhat.com>\n+\n+\t* target-def.h (TARGET_BINDS_LOCAL_P): New.\n+\t* target.h (struct gcc_target): Move boolean fields to the end.\n+\tAdd binds_local_p.\n+\t* varasm.c (default_binds_local_p): New.\n+\t* output.h: Declare it.\n+\n+\t* config/alpha/alpha.c (alpha_encode_section_info): Use the new hook.\n+\t* config/cris/cris.c (cris_encode_section_info): Likewise.\n+\t* config/i386/i386.c (i386_encode_section_info): Likewise.\n+\t* config/ia64/ia64.c (ia64_encode_section_info): Likewise.\n+\t* config/sh/sh.c (sh_encode_section_info): Likewise.\n+\n+\t* doc/tm.texi (TARGET_IN_SMALL_DATA_P): New.\n+\t(TARGET_BINDS_LOCAL_P): New.\n+\n 2002-05-19  Richard Henderson  <rth@redhat.com>\n \n \t* system.h (BLOCK_PROFILER, BLOCK_PROFILER_CODE,"}, {"sha": "dad17844d5f4f6debfc2a8b904c046dd44ee55f2", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 14, "deletions": 38, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47754fd5485a059bba7dd059b719a1d02ff38585/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47754fd5485a059bba7dd059b719a1d02ff38585/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=47754fd5485a059bba7dd059b719a1d02ff38585", "patch": "@@ -1619,7 +1619,17 @@ alpha_encode_section_info (decl, first)\n {\n   const char *symbol_str;\n   bool is_local, is_small;\n+  rtx rtl, symbol;\n \n+  rtl = DECL_P (decl) ? DECL_RTL (decl) : TREE_CST_RTL (decl);\n+\n+  /* Careful not to prod global register variables.  */\n+  if (GET_CODE (rtl) != MEM)\n+    return;\n+  symbol = XEXP (rtl, 0);\n+  if (GET_CODE (symbol) != SYMBOL_REF)\n+    return;\n+    \n   if (TREE_CODE (decl) == FUNCTION_DECL)\n     {\n       /* We mark public functions once they are emitted; otherwise we\n@@ -1632,58 +1642,25 @@ alpha_encode_section_info (decl, first)\n       if (! decl_in_text_section (decl))\n \treturn;\n \n-      SYMBOL_REF_FLAG (XEXP (DECL_RTL (decl), 0)) = 1;\n+      SYMBOL_REF_FLAG (symbol) = 1;\n       return;\n     }\n \n   /* Early out if we're not going to do anything with this data.  */\n   if (! TARGET_EXPLICIT_RELOCS)\n     return;\n \n-  /* Careful not to prod global register variables.  */\n-  if (TREE_CODE (decl) != VAR_DECL\n-      || GET_CODE (DECL_RTL (decl)) != MEM\n-      || GET_CODE (XEXP (DECL_RTL (decl), 0)) != SYMBOL_REF)\n-    return;\n-    \n-  symbol_str = XSTR (XEXP (DECL_RTL (decl), 0), 0);\n+  symbol_str = XSTR (symbol, 0);\n \n   /* A variable is considered \"local\" if it is defined in this module.  */\n-\n-  /* Local binding occurs for any non-default visibility.  */\n-  if (MODULE_LOCAL_P (decl))\n-    is_local = true;\n-  /* Otherwise, variables defined outside this object may not be local.  */\n-  else if (DECL_EXTERNAL (decl))\n-    is_local = false;\n-  /* Linkonce and weak data is never local.  */\n-  else if (DECL_ONE_ONLY (decl) || DECL_WEAK (decl))\n-    is_local = false;\n-  /* Static variables are always local.  */\n-  else if (! TREE_PUBLIC (decl))\n-    is_local = true;\n-  /* If PIC, then assume that any global name can be overridden by\n-     symbols resolved from other modules.  */\n-  else if (flag_pic)\n-    is_local = false;\n-  /* Uninitialized COMMON variable may be unified with symbols\n-     resolved from other modules.  */\n-  else if (DECL_COMMON (decl)\n-\t   && (DECL_INITIAL (decl) == NULL\n-\t       || DECL_INITIAL (decl) == error_mark_node))\n-    is_local = false;\n-  /* Otherwise we're left with initialized (or non-common) global data\n-     which is of necessity defined locally.  */\n-  else\n-    is_local = true;\n+  is_local = (*targetm.binds_local_p) (decl);\n \n   /* Determine if DECL will wind up in .sdata/.sbss.  */\n   is_small = alpha_in_small_data_p (decl);\n \n   /* Finally, encode this into the symbol string.  */\n   if (is_local)\n     {\n-      const char *string;\n       char *newstr;\n       size_t len;\n \n@@ -1701,8 +1678,7 @@ alpha_encode_section_info (decl, first)\n       newstr[1] = (is_small ? 's' : 'v');\n       memcpy (newstr + 2, symbol_str, len);\n \t  \n-      string = ggc_alloc_string (newstr, len + 2 - 1);\n-      XSTR (XEXP (DECL_RTL (decl), 0), 0) = string;\n+      XSTR (symbol, 0) = ggc_alloc_string (newstr, len + 2 - 1);\n     }\n   else if (symbol_str[0] == '@')\n     {"}, {"sha": "62912f2e4244624ddef4ebf1a152989b6177652b", "filename": "gcc/config/cris/cris.c", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47754fd5485a059bba7dd059b719a1d02ff38585/gcc%2Fconfig%2Fcris%2Fcris.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47754fd5485a059bba7dd059b719a1d02ff38585/gcc%2Fconfig%2Fcris%2Fcris.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.c?ref=47754fd5485a059bba7dd059b719a1d02ff38585", "patch": "@@ -3048,20 +3048,10 @@ cris_encode_section_info (exp, first)\n {\n   if (flag_pic)\n     {\n-      if (DECL_P (exp))\n-\t{\n-\t  if (TREE_CODE (exp) == FUNCTION_DECL\n-\t      && (TREE_PUBLIC (exp) || DECL_WEAK (exp))\n-\t      && ! MODULE_LOCAL_P (exp))\n-\t    SYMBOL_REF_FLAG (XEXP (DECL_RTL (exp), 0)) = 0;\n-\t  else\n-\t    SYMBOL_REF_FLAG (XEXP (DECL_RTL (exp), 0))\n-\t      = ((! TREE_PUBLIC (exp) && ! DECL_WEAK (exp))\n-\t\t || MODULE_LOCAL_P (exp));\n-\t}\n-      else\n-\t/* Others are local entities.  */\n-\tSYMBOL_REF_FLAG (XEXP (TREE_CST_RTL (exp), 0)) = 1;\n+      rtx rtl = DECL_P (exp) ? DECL_RTL (exp) : TREE_CST_RTL (exp);\n+\n+      if (GET_CODE (rtl) == MEM && GET_CODE (XEXP (rtl, 0)) == SYMBOL_REF)\n+\tSYMBOL_REF_FLAG (XEXP (rtl, 0)) = (*targetm.binds_local_p) (exp);\n     }\n }\n "}, {"sha": "b76d524fbb6edce1092ec00ebf6826c9dee8c7ca", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 3, "deletions": 17, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47754fd5485a059bba7dd059b719a1d02ff38585/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47754fd5485a059bba7dd059b719a1d02ff38585/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=47754fd5485a059bba7dd059b719a1d02ff38585", "patch": "@@ -5097,24 +5097,10 @@ i386_encode_section_info (decl, first)\n {\n   if (flag_pic)\n     {\n-      rtx rtl = (TREE_CODE_CLASS (TREE_CODE (decl)) != 'd'\n-\t\t ? TREE_CST_RTL (decl) : DECL_RTL (decl));\n+      rtx rtl = DECL_P (decl) ? DECL_RTL (decl) : TREE_CST_RTL (decl);\n \n-      if (GET_CODE (rtl) == MEM)\n-\t{\n-\t  if (TARGET_DEBUG_ADDR\n-\t      && TREE_CODE_CLASS (TREE_CODE (decl)) == 'd')\n-\t    {\n-\t      fprintf (stderr, \"Encode %s, public = %d\\n\",\n-\t\t       IDENTIFIER_POINTER (DECL_NAME (decl)),\n-\t\t       TREE_PUBLIC (decl));\n-\t    }\n-\n-\t  SYMBOL_REF_FLAG (XEXP (rtl, 0))\n-\t    = (TREE_CODE_CLASS (TREE_CODE (decl)) != 'd'\n-\t       || ! TREE_PUBLIC (decl)\n-\t       || MODULE_LOCAL_P (decl));\n-\t}\n+      if (GET_CODE (rtl) == MEM && GET_CODE (XEXP (rtl, 0)) == SYMBOL_REF)\n+\tSYMBOL_REF_FLAG (XEXP (rtl, 0)) = (*targetm.binds_local_p) (decl);\n     }\n }\n \f"}, {"sha": "3f3090cf60df3e05367606ed7f9d067adc39642d", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 1, "deletions": 27, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47754fd5485a059bba7dd059b719a1d02ff38585/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47754fd5485a059bba7dd059b719a1d02ff38585/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=47754fd5485a059bba7dd059b719a1d02ff38585", "patch": "@@ -6929,33 +6929,7 @@ ia64_encode_section_info (decl, first)\n   symbol = XEXP (DECL_RTL (decl), 0);\n   symbol_str = XSTR (symbol, 0);\n \n-  /* A variable is considered \"local\" if it is defined by this module.  */\n-\n-  if (MODULE_LOCAL_P (decl))\n-    is_local = true;\n-  /* Otherwise, variables defined outside this object may not be local.  */\n-  else if (DECL_EXTERNAL (decl))\n-    is_local = false;\n-  /* Linkonce and weak data are never local.  */\n-  else if (DECL_ONE_ONLY (decl) || DECL_WEAK (decl))\n-    is_local = false;\n-  /* Static variables are always local.  */\n-  else if (! TREE_PUBLIC (decl))\n-    is_local = true;\n-  /* If PIC, then assume that any global name can be overridden by\n-     symbols resolved from other modules.  */\n-  else if (flag_pic)\n-    is_local = false;\n-  /* Uninitialized COMMON variable may be unified with symbols\n-     resolved from other modules.  */\n-  else if (DECL_COMMON (decl)\n-\t   && (DECL_INITIAL (decl) == NULL\n-\t       || DECL_INITIAL (decl) == error_mark_node))\n-    is_local = false;\n-  /* Otherwise we're left with initialized (or non-common) global data\n-     which is of necessity defined locally.  */\n-  else\n-    is_local = true;\n+  is_local = (*targetm.binds_local_p) (decl);\n \n   /* Determine if DECL will wind up in .sdata/.sbss.  */\n   is_small = ia64_in_small_data_p (decl);"}, {"sha": "b83fd617a19f9e6a90ba840b9ea3c25745d984c5", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47754fd5485a059bba7dd059b719a1d02ff38585/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47754fd5485a059bba7dd059b719a1d02ff38585/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=47754fd5485a059bba7dd059b719a1d02ff38585", "patch": "@@ -6816,12 +6816,7 @@ sh_encode_section_info (decl, first)\n     return;\n \n   if (flag_pic)\n-    {\n-      SYMBOL_REF_FLAG (symbol) =\n-\t(TREE_CODE_CLASS (TREE_CODE (decl)) != 'd'\n-\t || MODULE_LOCAL_P (decl)\n-\t || ! TREE_PUBLIC (decl));\n-    }\n+    SYMBOL_REF_FLAG (symbol) = (*targetm.binds_local_p) (decl);\n \n   if (TARGET_SH5 && first && TREE_CODE (decl) != FUNCTION_DECL)\n     XEXP (rtl, 0) = gen_datalabel_ref (symbol);"}, {"sha": "6f027b10788a05b58eb0565a409b9907d68893f7", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47754fd5485a059bba7dd059b719a1d02ff38585/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47754fd5485a059bba7dd059b719a1d02ff38585/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=47754fd5485a059bba7dd059b719a1d02ff38585", "patch": "@@ -5838,6 +5838,21 @@ the characters that @code{TARGET_ENCODE_SECTION_INFO}\n may have added.\n @end deftypefn\n \n+@deftypefn {Target Hook} bool TARGET_IN_SMALL_DATA_P (tree @var{exp})\n+Returns true if @var{exp} should be placed into a ``small data'' section.\n+The default version of this hook always returns false.\n+@end deftypefn\n+\n+@deftypefn {Target Hook} bool TARGET_BINDS_LOCAL_P (tree @var{exp})\n+Returns true if @var{exp} names an object for which name resolution\n+rules must resolve to the current ``module'' (dynamic shared library\n+or executable image).\n+\n+The default version of this hook implements the name resolution rules\n+for ELF, which has a looser model of global name binding than other\n+currently supported object file formats.\n+@end deftypefn\n+\n @node PIC\n @section Position Independent Code\n @cindex position independent code"}, {"sha": "7a87b822f83aa03fe5ced0a945481fde3b141952", "filename": "gcc/output.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47754fd5485a059bba7dd059b719a1d02ff38585/gcc%2Foutput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47754fd5485a059bba7dd059b719a1d02ff38585/gcc%2Foutput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foutput.h?ref=47754fd5485a059bba7dd059b719a1d02ff38585", "patch": "@@ -545,6 +545,7 @@ extern void default_select_rtx_section PARAMS ((enum machine_mode, rtx,\n extern void default_elf_select_rtx_section PARAMS ((enum machine_mode, rtx,\n \t\t\t\t\t\t    unsigned HOST_WIDE_INT));\n extern const char *default_strip_name_encoding PARAMS ((const char *));\n+extern bool default_binds_local_p PARAMS ((tree));\n \n /* Emit data for vtable gc for GNU binutils.  */\n extern void assemble_vtable_entry PARAMS ((struct rtx_def *, HOST_WIDE_INT));"}, {"sha": "c3438b544e7b823b7814a802b6cb398095ce1c8a", "filename": "gcc/target-def.h", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47754fd5485a059bba7dd059b719a1d02ff38585/gcc%2Ftarget-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47754fd5485a059bba7dd059b719a1d02ff38585/gcc%2Ftarget-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-def.h?ref=47754fd5485a059bba7dd059b719a1d02ff38585", "patch": "@@ -209,6 +209,10 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n #define TARGET_STRIP_NAME_ENCODING default_strip_name_encoding\n #endif\n \n+#ifndef TARGET_BINDS_LOCAL_P\n+#define TARGET_BINDS_LOCAL_P default_binds_local_p\n+#endif\n+\n /* In hook.c.  */\n #define TARGET_CANNOT_MODIFY_JUMPS_P hook_void_bool_false\n #define TARGET_IN_SMALL_DATA_P hook_tree_bool_false\n@@ -233,12 +237,13 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n   TARGET_INIT_BUILTINS,\t\t\t\t\\\n   TARGET_EXPAND_BUILTIN,\t\t\t\\\n   TARGET_SECTION_TYPE_FLAGS,\t\t\t\\\n-  TARGET_HAVE_NAMED_SECTIONS,\t\t\t\\\n-  TARGET_HAVE_CTORS_DTORS,\t\t\t\\\n   TARGET_CANNOT_MODIFY_JUMPS_P,\t\t\t\\\n   TARGET_IN_SMALL_DATA_P,\t\t\t\\\n+  TARGET_BINDS_LOCAL_P,\t\t\t\t\\\n   TARGET_ENCODE_SECTION_INFO,\t\t\t\\\n-  TARGET_STRIP_NAME_ENCODING\t\t\t\\\n+  TARGET_STRIP_NAME_ENCODING,\t\t\t\\\n+  TARGET_HAVE_NAMED_SECTIONS,\t\t\t\\\n+  TARGET_HAVE_CTORS_DTORS,\t\t\t\\\n }\n \n #include \"hooks.h\""}, {"sha": "f8648d53b4a9ea76feae888c59bfb2275eef7dfe", "filename": "gcc/target.h", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47754fd5485a059bba7dd059b719a1d02ff38585/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47754fd5485a059bba7dd059b719a1d02ff38585/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=47754fd5485a059bba7dd059b719a1d02ff38585", "patch": "@@ -230,26 +230,32 @@ struct gcc_target\n   /* ??? Should be merged with SELECT_SECTION and UNIQUE_SECTION.  */\n   unsigned int (* section_type_flags) PARAMS ((tree, const char *, int));\n \n-  /* True if arbitrary sections are supported.  */\n-  bool have_named_sections;\n-\n-  /* True if \"native\" constructors and destructors are supported,\n-     false if we're using collect2 for the job.  */\n-  bool have_ctors_dtors;\n-\n   /* True if new jumps cannot be created, to replace existing ones or\n      not, at the current point in the compilation.  */\n   bool (* cannot_modify_jumps_p) PARAMS ((void));\n \n   /* True if EXP should be placed in a \"small data\" section.  */\n   bool (* in_small_data_p) PARAMS ((tree));\n \n+  /* True if EXP names an object for which name resolution must resolve\n+     to the current module.  */\n+  bool (* binds_local_p) PARAMS ((tree));\n+\n   /* Do something target-specific to record properties of the DECL into\n      the associated SYMBOL_REF.  */\n   void (* encode_section_info) PARAMS ((tree, int));\n \n   /* Undo the effects of encode_section_info on the symbol string.  */\n   const char * (* strip_name_encoding) PARAMS ((const char *));\n+\n+  /* Leave the boolean fields at the end.  */\n+\n+  /* True if arbitrary sections are supported.  */\n+  bool have_named_sections;\n+\n+  /* True if \"native\" constructors and destructors are supported,\n+     false if we're using collect2 for the job.  */\n+  bool have_ctors_dtors;\n };\n \n extern struct gcc_target targetm;"}, {"sha": "6d7732dc2f856027358cef669287568c8c708efc", "filename": "gcc/varasm.c", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47754fd5485a059bba7dd059b719a1d02ff38585/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47754fd5485a059bba7dd059b719a1d02ff38585/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=47754fd5485a059bba7dd059b719a1d02ff38585", "patch": "@@ -5545,3 +5545,45 @@ default_strip_name_encoding (str)\n {\n   return str + (*str == '*');\n }\n+\n+/* Assume ELF-ish defaults, since that's pretty much the most liberal\n+   wrt cross-module name binding.  */\n+\n+bool\n+default_binds_local_p (exp)\n+     tree exp;\n+{\n+  bool local_p;\n+\n+  /* A non-decl is an entry in the constant pool.  */\n+  if (!DECL_P (exp))\n+    local_p = true;\n+  /* A variable is considered \"local\" if it is defined by this module.  */\n+  if (MODULE_LOCAL_P (exp))\n+    local_p = true;\n+  /* Otherwise, variables defined outside this object may not be local.  */\n+  else if (DECL_EXTERNAL (exp))\n+    local_p = false;\n+  /* Linkonce and weak data are never local.  */\n+  else if (DECL_ONE_ONLY (exp) || DECL_WEAK (exp))\n+    local_p = false;\n+  /* Static variables are always local.  */\n+  else if (! TREE_PUBLIC (exp))\n+    local_p = true;\n+  /* If PIC, then assume that any global name can be overridden by\n+     symbols resolved from other modules.  */\n+  else if (flag_pic)\n+    local_p = false;\n+  /* Uninitialized COMMON variable may be unified with symbols\n+     resolved from other modules.  */\n+  else if (DECL_COMMON (exp)\n+\t   && (DECL_INITIAL (exp) == NULL\n+\t       || DECL_INITIAL (exp) == error_mark_node))\n+    local_p = false;\n+  /* Otherwise we're left with initialized (or non-common) global data\n+     which is of necessity defined locally.  */\n+  else\n+    local_p = true;\n+\n+  return local_p;\n+}"}]}