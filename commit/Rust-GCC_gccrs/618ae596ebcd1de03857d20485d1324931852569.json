{"sha": "618ae596ebcd1de03857d20485d1324931852569", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjE4YWU1OTZlYmNkMWRlMDM4NTdkMjA0ODVkMTMyNDkzMTg1MjU2OQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-04-27T13:46:16Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-04-27T13:46:16Z"}, "message": "aarch64: Fix UB in the compiler [PR100200]\n\nThe following patch fixes UBs in the compiler when negativing\na CONST_INT containing HOST_WIDE_INT_MIN.  I've changed the spots where\nthere wasn't an obvious earlier condition check or predicate that\nwould fail for such CONST_INTs.\n\n2021-04-27  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/100200\n\t* config/aarch64/predicates.md (aarch64_sub_immediate,\n\taarch64_plus_immediate): Use -UINTVAL instead of -INTVAL.\n\t* config/aarch64/aarch64.md (casesi, rotl<mode>3): Likewise.\n\t* config/aarch64/aarch64.c (aarch64_print_operand,\n\taarch64_split_atomic_op, aarch64_expand_subvti): Likewise.", "tree": {"sha": "6a5e1b4c22b78af72394a525e6a8ca5b17b2413e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6a5e1b4c22b78af72394a525e6a8ca5b17b2413e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/618ae596ebcd1de03857d20485d1324931852569", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/618ae596ebcd1de03857d20485d1324931852569", "html_url": "https://github.com/Rust-GCC/gccrs/commit/618ae596ebcd1de03857d20485d1324931852569", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/618ae596ebcd1de03857d20485d1324931852569/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83d26d0e1b3625ab6c2d83610a13976b52f63e0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83d26d0e1b3625ab6c2d83610a13976b52f63e0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83d26d0e1b3625ab6c2d83610a13976b52f63e0a"}], "stats": {"total": 15, "additions": 8, "deletions": 7}, "files": [{"sha": "aa148ac9de98e233813ce1032b0e925b8d0e481d", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/618ae596ebcd1de03857d20485d1324931852569/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/618ae596ebcd1de03857d20485d1324931852569/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=618ae596ebcd1de03857d20485d1324931852569", "patch": "@@ -10778,7 +10778,7 @@ aarch64_print_operand (FILE *f, rtx x, int code)\n \t}\n \n       if (GET_MODE_CLASS (GET_MODE (x)) == MODE_VECTOR_INT)\n-\tasm_fprintf (f, \"%wd\", -INTVAL (elt));\n+\tasm_fprintf (f, \"%wd\", -UINTVAL (elt));\n       else if (GET_MODE_CLASS (GET_MODE (x)) == MODE_VECTOR_FLOAT\n \t       && aarch64_print_vector_float_operand (f, x, true))\n \t;\n@@ -21598,7 +21598,7 @@ aarch64_split_atomic_op (enum rtx_code code, rtx old_out, rtx new_out, rtx mem,\n     case MINUS:\n       if (CONST_INT_P (value))\n \t{\n-\t  value = GEN_INT (-INTVAL (value));\n+\t  value = GEN_INT (-UINTVAL (value));\n \t  code = PLUS;\n \t}\n       /* Fall through.  */\n@@ -23514,7 +23514,7 @@ aarch64_expand_subvti (rtx op0, rtx low_dest, rtx low_in1,\n     {\n       if (aarch64_plus_immediate (low_in2, DImode))\n \temit_insn (gen_subdi3_compare1_imm (low_dest, low_in1, low_in2,\n-\t\t\t\t\t    GEN_INT (-INTVAL (low_in2))));\n+\t\t\t\t\t    GEN_INT (-UINTVAL (low_in2))));\n       else\n \t{\n \t  low_in2 = force_reg (DImode, low_in2);"}, {"sha": "aef6da9732d45b3586bad5ba57dafa438374ac3c", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/618ae596ebcd1de03857d20485d1324931852569/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/618ae596ebcd1de03857d20485d1324931852569/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=618ae596ebcd1de03857d20485d1324931852569", "patch": "@@ -747,7 +747,8 @@\n \t   constant can be represented in SImode, this is important\n \t   for the corner case where operand[1] is INT_MIN.  */\n \n-\toperands[1] = GEN_INT (trunc_int_for_mode (-INTVAL (operands[1]), SImode));\n+\toperands[1]\n+\t  = GEN_INT (trunc_int_for_mode (-UINTVAL (operands[1]), SImode));\n \n \tif (!(*insn_data[CODE_FOR_addsi3].operand[2].predicate)\n \t      (operands[1], SImode))\n@@ -5008,7 +5009,7 @@\n     /* (SZ - cnt) % SZ == -cnt % SZ */\n     if (CONST_INT_P (operands[2]))\n       {\n-        operands[2] = GEN_INT ((-INTVAL (operands[2]))\n+        operands[2] = GEN_INT ((-UINTVAL (operands[2]))\n \t\t\t       & (GET_MODE_BITSIZE (<MODE>mode) - 1));\n         if (operands[2] == const0_rtx)\n           {"}, {"sha": "49f02ae0381359174fed80c2a2264295c75bc189", "filename": "gcc/config/aarch64/predicates.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/618ae596ebcd1de03857d20485d1324931852569/gcc%2Fconfig%2Faarch64%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/618ae596ebcd1de03857d20485d1324931852569/gcc%2Fconfig%2Faarch64%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fpredicates.md?ref=618ae596ebcd1de03857d20485d1324931852569", "patch": "@@ -121,12 +121,12 @@\n \n (define_predicate \"aarch64_sub_immediate\"\n   (and (match_code \"const_int\")\n-       (match_test \"aarch64_uimm12_shift (-INTVAL (op))\")))\n+       (match_test \"aarch64_uimm12_shift (-UINTVAL (op))\")))\n \n (define_predicate \"aarch64_plus_immediate\"\n   (and (match_code \"const_int\")\n        (ior (match_test \"aarch64_uimm12_shift (INTVAL (op))\")\n-\t    (match_test \"aarch64_uimm12_shift (-INTVAL (op))\"))))\n+\t    (match_test \"aarch64_uimm12_shift (-UINTVAL (op))\"))))\n \n (define_predicate \"aarch64_plus_operand\"\n   (ior (match_operand 0 \"register_operand\")"}]}