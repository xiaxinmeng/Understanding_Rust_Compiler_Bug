{"sha": "410d5719b78519d8c53855a4c789cc0d656b480a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDEwZDU3MTliNzg1MTlkOGM1Mzg1NWE0Yzc4OWNjMGQ2NTZiNDgwYQ==", "commit": {"author": {"name": "Tom Tromey", "email": "tom@tromey.com", "date": "2021-05-04T21:26:58Z"}, "committer": {"name": "Tom Tromey", "email": "tom@tromey.com", "date": "2021-05-05T06:06:16Z"}, "message": "libcc1: use variadic templates for \"rpc\"\n\nThis changes libcc1 to use variadic templates for the \"rpc\" functions.\nThis simplifies the code and removes some possibility for mistakes.\n\nlibcc1\n\n\t* libcp1.cc (rpc): Use variadic template.  Remove overloads.\n\t* libcc1.cc (rpc): Use variadic template.  Remove overloads.", "tree": {"sha": "fa4ebe59ac50b010f8800dc784a295e05cc637a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fa4ebe59ac50b010f8800dc784a295e05cc637a6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/410d5719b78519d8c53855a4c789cc0d656b480a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/410d5719b78519d8c53855a4c789cc0d656b480a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/410d5719b78519d8c53855a4c789cc0d656b480a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/410d5719b78519d8c53855a4c789cc0d656b480a/comments", "author": {"login": "tromey", "id": 1557670, "node_id": "MDQ6VXNlcjE1NTc2NzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tromey", "html_url": "https://github.com/tromey", "followers_url": "https://api.github.com/users/tromey/followers", "following_url": "https://api.github.com/users/tromey/following{/other_user}", "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}", "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tromey/subscriptions", "organizations_url": "https://api.github.com/users/tromey/orgs", "repos_url": "https://api.github.com/users/tromey/repos", "events_url": "https://api.github.com/users/tromey/events{/privacy}", "received_events_url": "https://api.github.com/users/tromey/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tromey", "id": 1557670, "node_id": "MDQ6VXNlcjE1NTc2NzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tromey", "html_url": "https://github.com/tromey", "followers_url": "https://api.github.com/users/tromey/followers", "following_url": "https://api.github.com/users/tromey/following{/other_user}", "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}", "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tromey/subscriptions", "organizations_url": "https://api.github.com/users/tromey/orgs", "repos_url": "https://api.github.com/users/tromey/repos", "events_url": "https://api.github.com/users/tromey/events{/privacy}", "received_events_url": "https://api.github.com/users/tromey/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc6be7c02258f6c79ed97b6886c81278ef7f264d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc6be7c02258f6c79ed97b6886c81278ef7f264d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc6be7c02258f6c79ed97b6886c81278ef7f264d"}], "stats": {"total": 162, "additions": 8, "deletions": 154}, "files": [{"sha": "3432f4e8b2120da4ccf1f9f8325d1df079adfa1a", "filename": "libcc1/libcc1.cc", "status": "modified", "additions": 4, "deletions": 77, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/410d5719b78519d8c53855a4c789cc0d656b480a/libcc1%2Flibcc1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/410d5719b78519d8c53855a4c789cc0d656b480a/libcc1%2Flibcc1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcc1%2Flibcc1.cc?ref=410d5719b78519d8c53855a4c789cc0d656b480a", "patch": "@@ -210,90 +210,17 @@ set_callbacks (struct gcc_c_context *s,\n   self->oracle_datum = datum;\n }\n \n-// Instances of these rpc<> template functions are installed into the\n+// Instances of this rpc<> template function are installed into the\n // \"c_vtable\".  These functions are parameterized by type and method\n // name and forward the call via the connection.\n \n-template<typename R, const char *&NAME>\n-R rpc (struct gcc_c_context *s)\n+template<typename R, const char *&NAME, typename... Arg>\n+R rpc (struct gcc_c_context *s, Arg... rest)\n {\n   libcc1 *self = (libcc1 *) s;\n   R result;\n \n-  if (!cc1_plugin::call (self->connection, NAME, &result))\n-    return 0;\n-  return result;\n-}\n-\n-template<typename R, const char *&NAME, typename A>\n-R rpc (struct gcc_c_context *s, A arg)\n-{\n-  libcc1 *self = (libcc1 *) s;\n-  R result;\n-\n-  if (!cc1_plugin::call (self->connection, NAME, &result, arg))\n-    return 0;\n-  return result;\n-}\n-\n-template<typename R, const char *&NAME, typename A1, typename A2>\n-R rpc (struct gcc_c_context *s, A1 arg1, A2 arg2)\n-{\n-  libcc1 *self = (libcc1 *) s;\n-  R result;\n-\n-  if (!cc1_plugin::call (self->connection, NAME, &result, arg1, arg2))\n-    return 0;\n-  return result;\n-}\n-\n-template<typename R, const char *&NAME, typename A1, typename A2, typename A3>\n-R rpc (struct gcc_c_context *s, A1 arg1, A2 arg2, A3 arg3)\n-{\n-  libcc1 *self = (libcc1 *) s;\n-  R result;\n-\n-  if (!cc1_plugin::call (self->connection, NAME, &result, arg1, arg2, arg3))\n-    return 0;\n-  return result;\n-}\n-\n-template<typename R, const char *&NAME, typename A1, typename A2, typename A3,\n-\t typename A4>\n-R rpc (struct gcc_c_context *s, A1 arg1, A2 arg2, A3 arg3, A4 arg4)\n-{\n-  libcc1 *self = (libcc1 *) s;\n-  R result;\n-\n-  if (!cc1_plugin::call (self->connection, NAME, &result, arg1, arg2, arg3,\n-\t\t\t arg4))\n-    return 0;\n-  return result;\n-}\n-\n-template<typename R, const char *&NAME, typename A1, typename A2, typename A3,\n-\t typename A4, typename A5>\n-R rpc (struct gcc_c_context *s, A1 arg1, A2 arg2, A3 arg3, A4 arg4, A5 arg5)\n-{\n-  libcc1 *self = (libcc1 *) s;\n-  R result;\n-\n-  if (!cc1_plugin::call (self->connection, NAME, &result, arg1, arg2, arg3,\n-\t\t\t arg4, arg5))\n-    return 0;\n-  return result;\n-}\n-\n-template<typename R, const char *&NAME, typename A1, typename A2, typename A3,\n-\t typename A4, typename A5, typename A6, typename A7>\n-R rpc (struct gcc_c_context *s, A1 arg1, A2 arg2, A3 arg3, A4 arg4, A5 arg5,\n-       A6 arg6, A7 arg7)\n-{\n-  libcc1 *self = (libcc1 *) s;\n-  R result;\n-\n-  if (!cc1_plugin::call (self->connection, NAME, &result, arg1, arg2, arg3,\n-\t\t\t arg4, arg5, arg6, arg7))\n+  if (!cc1_plugin::call (self->connection, NAME, &result, rest...))\n     return 0;\n   return result;\n }"}, {"sha": "4273f8d83826e670c7cb9410686f0359913fd4ca", "filename": "libcc1/libcp1.cc", "status": "modified", "additions": 4, "deletions": 77, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/410d5719b78519d8c53855a4c789cc0d656b480a/libcc1%2Flibcp1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/410d5719b78519d8c53855a4c789cc0d656b480a/libcc1%2Flibcp1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcc1%2Flibcp1.cc?ref=410d5719b78519d8c53855a4c789cc0d656b480a", "patch": "@@ -233,90 +233,17 @@ set_callbacks (struct gcc_cp_context *s,\n   self->oracle_datum = datum;\n }\n \n-// Instances of these rpc<> template functions are installed into the\n+// Instances of this rpc<> template function are installed into the\n // \"cp_vtable\".  These functions are parameterized by type and method\n // name and forward the call via the connection.\n \n-template<typename R, const char *&NAME>\n-R rpc (struct gcc_cp_context *s)\n+template<typename R, const char *&NAME, typename... Arg>\n+R rpc (struct gcc_cp_context *s, Arg... rest)\n {\n   libcp1 *self = (libcp1 *) s;\n   R result;\n \n-  if (!cc1_plugin::call (self->connection, NAME, &result))\n-    return 0;\n-  return result;\n-}\n-\n-template<typename R, const char *&NAME, typename A>\n-R rpc (struct gcc_cp_context *s, A arg)\n-{\n-  libcp1 *self = (libcp1 *) s;\n-  R result;\n-\n-  if (!cc1_plugin::call (self->connection, NAME, &result, arg))\n-    return 0;\n-  return result;\n-}\n-\n-template<typename R, const char *&NAME, typename A1, typename A2>\n-R rpc (struct gcc_cp_context *s, A1 arg1, A2 arg2)\n-{\n-  libcp1 *self = (libcp1 *) s;\n-  R result;\n-\n-  if (!cc1_plugin::call (self->connection, NAME, &result, arg1, arg2))\n-    return 0;\n-  return result;\n-}\n-\n-template<typename R, const char *&NAME, typename A1, typename A2, typename A3>\n-R rpc (struct gcc_cp_context *s, A1 arg1, A2 arg2, A3 arg3)\n-{\n-  libcp1 *self = (libcp1 *) s;\n-  R result;\n-\n-  if (!cc1_plugin::call (self->connection, NAME, &result, arg1, arg2, arg3))\n-    return 0;\n-  return result;\n-}\n-\n-template<typename R, const char *&NAME, typename A1, typename A2, typename A3,\n-\t typename A4>\n-R rpc (struct gcc_cp_context *s, A1 arg1, A2 arg2, A3 arg3, A4 arg4)\n-{\n-  libcp1 *self = (libcp1 *) s;\n-  R result;\n-\n-  if (!cc1_plugin::call (self->connection, NAME, &result, arg1, arg2, arg3,\n-\t\t\t arg4))\n-    return 0;\n-  return result;\n-}\n-\n-template<typename R, const char *&NAME, typename A1, typename A2, typename A3,\n-\t typename A4, typename A5>\n-R rpc (struct gcc_cp_context *s, A1 arg1, A2 arg2, A3 arg3, A4 arg4, A5 arg5)\n-{\n-  libcp1 *self = (libcp1 *) s;\n-  R result;\n-\n-  if (!cc1_plugin::call (self->connection, NAME, &result, arg1, arg2, arg3,\n-\t\t\t arg4, arg5))\n-    return 0;\n-  return result;\n-}\n-\n-template<typename R, const char *&NAME, typename A1, typename A2, typename A3,\n-\t typename A4, typename A5, typename A6, typename A7>\n-R rpc (struct gcc_cp_context *s, A1 arg1, A2 arg2, A3 arg3, A4 arg4, A5 arg5,\n-       A6 arg6, A7 arg7)\n-{\n-  libcp1 *self = (libcp1 *) s;\n-  R result;\n-\n-  if (!cc1_plugin::call (self->connection, NAME, &result, arg1, arg2, arg3,\n-\t\t\t arg4, arg5, arg6, arg7))\n+  if (!cc1_plugin::call (self->connection, NAME, &result, rest...))\n     return 0;\n   return result;\n }"}]}