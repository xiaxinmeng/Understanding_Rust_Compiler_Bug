{"sha": "1bac38110a0cca955b7d3e8ab9697ab33027b9e0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWJhYzM4MTEwYTBjY2E5NTViN2QzZThhYjk2OTdhYjMzMDI3YjllMA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2004-07-01T20:53:55Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-07-01T20:53:55Z"}, "message": "dwarf2out.c (reg_save): Use INVALID_REGNUM.\n\n        * dwarf2out.c (reg_save): Use INVALID_REGNUM.\n        (dwarf2out_reg_save, dwarf2out_return_save): Likewise.\n        (initial_return_save): Likewise.\n        (flush_queued_reg_saves): Remap register numbers.\n        (dwarf2out_return_reg): Likewise.\n\nFrom-SVN: r83999", "tree": {"sha": "9a7701c73e83f568cb733908baf24fb6b453e232", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9a7701c73e83f568cb733908baf24fb6b453e232"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1bac38110a0cca955b7d3e8ab9697ab33027b9e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bac38110a0cca955b7d3e8ab9697ab33027b9e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1bac38110a0cca955b7d3e8ab9697ab33027b9e0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bac38110a0cca955b7d3e8ab9697ab33027b9e0/comments", "author": null, "committer": null, "parents": [{"sha": "1e748a2b15347a0e5c9fd525218233abd773b46e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e748a2b15347a0e5c9fd525218233abd773b46e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e748a2b15347a0e5c9fd525218233abd773b46e"}], "stats": {"total": 30, "additions": 21, "deletions": 9}, "files": [{"sha": "90ec4a76367219ba5f7dfff0ed9f7984f6ee723c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bac38110a0cca955b7d3e8ab9697ab33027b9e0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bac38110a0cca955b7d3e8ab9697ab33027b9e0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1bac38110a0cca955b7d3e8ab9697ab33027b9e0", "patch": "@@ -1,3 +1,11 @@\n+2004-07-01  Richard Henderson  <rth@redhat.com>\n+\n+\t* dwarf2out.c (reg_save): Use INVALID_REGNUM.\n+\t(dwarf2out_reg_save, dwarf2out_return_save): Likewise.\n+\t(initial_return_save): Likewise.\n+\t(flush_queued_reg_saves): Remap register numbers.\n+\t(dwarf2out_return_reg): Likewise.\n+\n 2004-07-01  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* gimplify.c (gimplify_one_sizepos): Don't do anything if any VAR_DECL."}, {"sha": "2e3d55e5223eac54f099c30bea81d31910bac060", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bac38110a0cca955b7d3e8ab9697ab33027b9e0/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bac38110a0cca955b7d3e8ab9697ab33027b9e0/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=1bac38110a0cca955b7d3e8ab9697ab33027b9e0", "patch": "@@ -812,9 +812,7 @@ reg_save (const char *label, unsigned int reg, unsigned int sreg, HOST_WIDE_INT\n \n   cfi->dw_cfi_oprnd1.dw_cfi_reg_num = reg;\n \n-  /* The following comparison is correct. -1 is used to indicate that\n-     the value isn't a register number.  */\n-  if (sreg == (unsigned int) -1)\n+  if (sreg == INVALID_REGNUM)\n     {\n       if (reg & ~0x3f)\n \t/* The register number won't fit in 6 bits, so we have to use\n@@ -893,7 +891,7 @@ dwarf2out_args_size (const char *label, HOST_WIDE_INT size)\n void\n dwarf2out_reg_save (const char *label, unsigned int reg, HOST_WIDE_INT offset)\n {\n-  reg_save (label, DWARF_FRAME_REGNUM (reg), -1, offset);\n+  reg_save (label, DWARF_FRAME_REGNUM (reg), INVALID_REGNUM, offset);\n }\n \n /* Entry point for saving the return address in the stack.\n@@ -902,7 +900,7 @@ dwarf2out_reg_save (const char *label, unsigned int reg, HOST_WIDE_INT offset)\n void\n dwarf2out_return_save (const char *label, HOST_WIDE_INT offset)\n {\n-  reg_save (label, DWARF_FRAME_RETURN_COLUMN, -1, offset);\n+  reg_save (label, DWARF_FRAME_RETURN_COLUMN, INVALID_REGNUM, offset);\n }\n \n /* Entry point for saving the return address in a register.\n@@ -911,7 +909,7 @@ dwarf2out_return_save (const char *label, HOST_WIDE_INT offset)\n void\n dwarf2out_return_reg (const char *label, unsigned int sreg)\n {\n-  reg_save (label, DWARF_FRAME_RETURN_COLUMN, sreg, 0);\n+  reg_save (label, DWARF_FRAME_RETURN_COLUMN, DWARF_FRAME_REGNUM (sreg), 0);\n }\n \n /* Record the initial position of the return address.  RTL is\n@@ -920,7 +918,7 @@ dwarf2out_return_reg (const char *label, unsigned int sreg)\n static void\n initial_return_save (rtx rtl)\n {\n-  unsigned int reg = (unsigned int) -1;\n+  unsigned int reg = INVALID_REGNUM;\n   HOST_WIDE_INT offset = 0;\n \n   switch (GET_CODE (rtl))\n@@ -1203,6 +1201,8 @@ flush_queued_reg_saves (void)\n   for (q = queued_reg_saves; q; q = q->next)\n     {\n       size_t i;\n+      unsigned int reg, sreg;\n+\n       for (i = 0; i < num_regs_saved_in_regs; i++)\n \tif (REGNO (regs_saved_in_regs[i].orig_reg) == REGNO (q->reg))\n \t  break;\n@@ -1218,8 +1218,12 @@ flush_queued_reg_saves (void)\n \t  regs_saved_in_regs[i].saved_in_reg = q->saved_reg;\n \t}\n \n-      reg_save (last_reg_save_label, REGNO (q->reg), \n-\t\tq->saved_reg ? REGNO (q->saved_reg) : -1U, q->cfa_offset);\n+      reg = DWARF_FRAME_REGNUM (REGNO (q->reg));\n+      if (q->saved_reg)\n+\tsreg = DWARF_FRAME_REGNUM (REGNO (q->saved_reg));\n+      else\n+\tsreg = INVALID_REGNUM;\n+      reg_save (last_reg_save_label, reg, sreg, q->cfa_offset);\n     }\n \n   queued_reg_saves = NULL;"}]}