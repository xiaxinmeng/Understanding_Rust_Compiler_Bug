{"sha": "0628fde6079759bf33e27118e027caaa6f034698", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDYyOGZkZTYwNzk3NTliZjMzZTI3MTE4ZTAyN2NhYWE2ZjAzNDY5OA==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@cygnus.com", "date": "1998-04-27T18:39:07Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1998-04-27T18:39:07Z"}, "message": "Fix hppa miscompilation bug reported by Manfred Hollstein.\n\n\t* loop.c (check_dbra_loop): New locals jump, first_compare, and\n\tcompare_and_branch.  Call get_condition to set first_compare.\n\tSet compare_and_branch to number of compare/branch instructions.\n\tReplace PREV_INSN (PREV_INSN (loop_end)) with first_compare.\n\tReplace '2' with compare_and_branch.\n\nFrom-SVN: r19435", "tree": {"sha": "c02632e4e26b9afecd0e5bf71185881cc3f4d644", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c02632e4e26b9afecd0e5bf71185881cc3f4d644"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0628fde6079759bf33e27118e027caaa6f034698", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0628fde6079759bf33e27118e027caaa6f034698", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0628fde6079759bf33e27118e027caaa6f034698", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0628fde6079759bf33e27118e027caaa6f034698/comments", "author": null, "committer": null, "parents": [{"sha": "eae97bd90c2f25af25fe2deb8aa01621783866c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eae97bd90c2f25af25fe2deb8aa01621783866c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eae97bd90c2f25af25fe2deb8aa01621783866c9"}], "stats": {"total": 34, "additions": 28, "deletions": 6}, "files": [{"sha": "1c1c09f39a6053a08e682fa8e2794d94d5e7b016", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0628fde6079759bf33e27118e027caaa6f034698/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0628fde6079759bf33e27118e027caaa6f034698/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0628fde6079759bf33e27118e027caaa6f034698", "patch": "@@ -1,3 +1,11 @@\n+Mon Apr 27 18:36:28 1998  Jim Wilson  <wilson@cygnus.com>\n+\n+\t* loop.c (check_dbra_loop): New locals jump, first_compare, and\n+\tcompare_and_branch.  Call get_condition to set first_compare.\n+\tSet compare_and_branch to number of compare/branch instructions.\n+\tReplace PREV_INSN (PREV_INSN (loop_end)) with first_compare.\n+\tReplace '2' with compare_and_branch.\n+\n Mon Apr 27 15:53:30 EDT 1998 Andrew MacLeod <amacleod@cygnus.com>\n \n \t* cplus-dem.c (demangle_qualified): Replace missing else."}, {"sha": "70ecfa8bf329775a5b4ddf393c4a8da35d35baf7", "filename": "gcc/loop.c", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0628fde6079759bf33e27118e027caaa6f034698/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0628fde6079759bf33e27118e027caaa6f034698/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=0628fde6079759bf33e27118e027caaa6f034698", "patch": "@@ -6094,14 +6094,28 @@ check_dbra_loop (loop_end, insn_count, loop_start)\n   rtx comparison;\n   rtx before_comparison;\n   rtx p;\n+  rtx jump;\n+  rtx first_compare;\n+  int compare_and_branch;\n \n   /* If last insn is a conditional branch, and the insn before tests a\n      register value, try to optimize it.  Otherwise, we can't do anything.  */\n \n-  comparison = get_condition_for_loop (PREV_INSN (loop_end));\n+  jump = PREV_INSN (loop_end);\n+  comparison = get_condition_for_loop (jump);\n   if (comparison == 0)\n     return 0;\n \n+  /* Try to compute whether the compare/branch at the loop end is one or\n+     two instructions.  */\n+  get_condition (jump, &first_compare);\n+  if (first_compare == jump)\n+    compare_and_branch = 1;\n+  else if (first_compare == prev_nonnote_insn (jump))\n+    compare_and_branch = 2;\n+  else\n+    return 0;\n+\n   /* Check all of the bivs to see if the compare uses one of them.\n      Skip biv's set more than once because we can't guarantee that\n      it will be zero on the last iteration.  Also skip if the biv is\n@@ -6112,7 +6126,7 @@ check_dbra_loop (loop_end, insn_count, loop_start)\n       if (bl->biv_count == 1\n \t  && bl->biv->dest_reg == XEXP (comparison, 0)\n \t  && ! reg_used_between_p (regno_reg_rtx[bl->regno], bl->biv->insn,\n-\t\t\t\t   PREV_INSN (PREV_INSN (loop_end))))\n+\t\t\t\t   first_compare))\n \tbreak;\n     }\n \n@@ -6253,7 +6267,7 @@ check_dbra_loop (loop_end, insn_count, loop_start)\n \t  && reversible_mem_store\n \t  && (no_use_except_counting\n \t      || ((bl->giv_count + bl->biv_count + num_mem_sets\n-\t\t   + num_movables + 2 == insn_count)\n+\t\t   + num_movables + compare_and_branch == insn_count)\n \t\t  && (bl == loop_iv_list && bl->next == 0))))\n \t{\n \t  rtx tem;\n@@ -6345,16 +6359,16 @@ check_dbra_loop (loop_end, insn_count, loop_start)\n \n \t      /* Emit an insn after the end of the loop to set the biv's\n \t\t proper exit value if it is used anywhere outside the loop.  */\n-\t      if ((REGNO_LAST_UID (bl->regno)\n-\t\t   != INSN_UID (PREV_INSN (PREV_INSN (loop_end))))\n+\t      if ((REGNO_LAST_UID (bl->regno) != INSN_UID (first_compare))\n \t\t  || ! bl->init_insn\n \t\t  || REGNO_FIRST_UID (bl->regno) != INSN_UID (bl->init_insn))\n \t\temit_insn_after (gen_move_insn (reg, final_value),\n \t\t\t\t loop_end);\n \n \t      /* Delete compare/branch at end of loop.  */\n \t      delete_insn (PREV_INSN (loop_end));\n-\t      delete_insn (PREV_INSN (loop_end));\n+\t      if (compare_and_branch == 2)\n+\t\tdelete_insn (first_compare);\n \n \t      /* Add new compare/branch insn at end of loop.  */\n \t      start_sequence ();"}]}