{"sha": "09d5094b2d48192f5e4cc7be9b123289c41a8f65", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDlkNTA5NGIyZDQ4MTkyZjVlNGNjN2JlOWIxMjMyODljNDFhOGY2NQ==", "commit": {"author": {"name": "DJ Delorie", "email": "dj@redhat.com", "date": "2013-09-17T22:06:53Z"}, "committer": {"name": "DJ Delorie", "email": "dj@gcc.gnu.org", "date": "2013-09-17T22:06:53Z"}, "message": "constraints.md (Wcv): Allow up to $r31.\n\n* config/rl78/constraints.md (Wcv): Allow up to $r31.\n* config/rl78/rl78.c (rl78_asm_file_start: Likewise.\n(rl78_option_override): Likewise, if -mallregs.\n(is_virtual_register): Likewise.\n* config/rl78/rl78.h (reg_class): Extend VREGS to $r31.\n(REGNO_OK_FOR_BASE_P): Likewise.\n* config/rl78/rl78.opt (-mallregs): New.\n\nFrom-SVN: r202669", "tree": {"sha": "e5e26ad46d05059dc7f9d09b7380677ca2dc9b91", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e5e26ad46d05059dc7f9d09b7380677ca2dc9b91"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/09d5094b2d48192f5e4cc7be9b123289c41a8f65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09d5094b2d48192f5e4cc7be9b123289c41a8f65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09d5094b2d48192f5e4cc7be9b123289c41a8f65", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09d5094b2d48192f5e4cc7be9b123289c41a8f65/comments", "author": null, "committer": null, "parents": [{"sha": "2ba1dca17789ba97811561010f793f913c334c2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ba1dca17789ba97811561010f793f913c334c2e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ba1dca17789ba97811561010f793f913c334c2e"}], "stats": {"total": 32, "additions": 27, "deletions": 5}, "files": [{"sha": "0a50e23c768a77af2b376eb2da3b21c400b53d0e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09d5094b2d48192f5e4cc7be9b123289c41a8f65/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09d5094b2d48192f5e4cc7be9b123289c41a8f65/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=09d5094b2d48192f5e4cc7be9b123289c41a8f65", "patch": "@@ -1,3 +1,13 @@\n+2013-09-17  DJ Delorie  <dj@redhat.com>\n+\n+\t* config/rl78/constraints.md (Wcv): Allow up to $r31.\n+\t* config/rl78/rl78.c (rl78_asm_file_start: Likewise.\n+\t(rl78_option_override): Likewise, if -mallregs.\n+\t(is_virtual_register): Likewise.\n+\t* config/rl78/rl78.h (reg_class): Extend VREGS to $r31.\n+\t(REGNO_OK_FOR_BASE_P): Likewise.\n+\t* config/rl78/rl78.opt (-mallregs): New.\n+\n 2013-09-17  Nick Clifton  <nickc@redhat.com>\n \n \t* config/rl78/rl78.c (need_to_save): Change return type to bool."}, {"sha": "bb0e40c6a320ffb4670fa10479e19574bb7296b8", "filename": "gcc/config/rl78/constraints.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09d5094b2d48192f5e4cc7be9b123289c41a8f65/gcc%2Fconfig%2Frl78%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09d5094b2d48192f5e4cc7be9b123289c41a8f65/gcc%2Fconfig%2Frl78%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frl78%2Fconstraints.md?ref=09d5094b2d48192f5e4cc7be9b123289c41a8f65", "patch": "@@ -263,10 +263,10 @@\n   )\n \n (define_memory_constraint \"Ccv\"\n-  \"[AX..HL,r8-r23] for calls\"\n+  \"[AX..HL,r8-r31] for calls\"\n   (and (match_code \"mem\")\n        (and (match_code \"reg\" \"0\")\n-\t    (match_test \"REGNO (XEXP (op, 0)) < 24\")))\n+\t    (match_test \"REGNO (XEXP (op, 0)) < 31\")))\n   )\n (define_memory_constraint \"Wcv\"\n   \"es:[AX..HL,r8-r23] for calls\""}, {"sha": "41fec465adb41abdf11eb0c7068a9767dae0b69b", "filename": "gcc/config/rl78/rl78.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09d5094b2d48192f5e4cc7be9b123289c41a8f65/gcc%2Fconfig%2Frl78%2Frl78.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09d5094b2d48192f5e4cc7be9b123289c41a8f65/gcc%2Fconfig%2Frl78%2Frl78.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frl78%2Frl78.c?ref=09d5094b2d48192f5e4cc7be9b123289c41a8f65", "patch": "@@ -272,6 +272,7 @@ rl78_asm_file_start (void)\n \t{\n \t  fprintf (asm_out_file, \"r%d\\t=\\t0x%x\\n\", 8 + i, 0xffef0 + i);\n \t  fprintf (asm_out_file, \"r%d\\t=\\t0x%x\\n\", 16 + i, 0xffee8 + i);\n+\t  fprintf (asm_out_file, \"r%d\\t=\\t0x%x\\n\", 24 + i, 0xffee0 + i);\n \t}\n     }\n \n@@ -309,6 +310,13 @@ rl78_option_override (void)\n   flag_split_wide_types = 0;\n \n   init_machine_status = rl78_init_machine_status;\n+\n+  if (TARGET_ALLREGS)\n+    {\n+      int i;\n+      for (i=24; i<32; i++)\n+\tfixed_regs[i] = 0;\n+    }\n }\n \n /* Most registers are 8 bits.  Some are 16 bits because, for example,\n@@ -2215,7 +2223,7 @@ is_virtual_register (rtx r)\n {\n   return (GET_CODE (r) == REG\n \t  && REGNO (r) >= 8\n-\t  && REGNO (r) < 24);\n+\t  && REGNO (r) < 32);\n }\n \n /* In all these alloc routines, we expect the following: the insn"}, {"sha": "2dfa1da7d46bd1ba5b2531e88dda923ff157bfce", "filename": "gcc/config/rl78/rl78.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09d5094b2d48192f5e4cc7be9b123289c41a8f65/gcc%2Fconfig%2Frl78%2Frl78.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09d5094b2d48192f5e4cc7be9b123289c41a8f65/gcc%2Fconfig%2Frl78%2Frl78.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frl78%2Frl78.h?ref=09d5094b2d48192f5e4cc7be9b123289c41a8f65", "patch": "@@ -265,7 +265,7 @@ enum reg_class\n   { 0x00000300, 0x00000000 }, \t/* R8 - HImode */\t\t\\\n   { 0x00000c00, 0x00000000 }, \t/* R10 - HImode */\t\t\\\n   { 0xff000000, 0x00000000 }, \t/* INT - HImode */\t\t\\\n-  { 0x007fff00, 0x00000000 },\t/* Virtual registers.  */\t\\\n+  { 0xff7fff00, 0x00000000 },\t/* Virtual registers.  */\t\\\n   { 0xff7fffff, 0x00000002 },\t/* General registers.  */\t\\\n   { 0x04000000, 0x00000004 },\t/* PSW.  */\t\\\n   { 0xff7fffff, 0x0000001f }\t/* All registers.  */\t\t\\\n@@ -352,7 +352,7 @@ enum reg_class\n        && reg_renumber[(REGNO)] <= (MAX)))\n \n #ifdef REG_OK_STRICT\n-#define REGNO_OK_FOR_BASE_P(regno)      REGNO_IN_RANGE (regno, 16, 23)\n+#define REGNO_OK_FOR_BASE_P(regno)      REGNO_IN_RANGE (regno, 16, 31)\n #else\n #define REGNO_OK_FOR_BASE_P(regno)\t1\n #endif"}, {"sha": "5fc8816f8c32bdc44c4da7a9fa53c2199b10a8f8", "filename": "gcc/config/rl78/rl78.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09d5094b2d48192f5e4cc7be9b123289c41a8f65/gcc%2Fconfig%2Frl78%2Frl78.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09d5094b2d48192f5e4cc7be9b123289c41a8f65/gcc%2Fconfig%2Frl78%2Frl78.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frl78%2Frl78.opt?ref=09d5094b2d48192f5e4cc7be9b123289c41a8f65", "patch": "@@ -42,6 +42,10 @@ Enum(rl78_mul_types) String(rl78) Value(MUL_RL78)\n EnumValue\n Enum(rl78_mul_types) String(g13) Value(MUL_G13)\n \n+mallregs\n+Target Mask(ALLREGS)\n+Use all registers, reserving none for interrupt handlers.\n+\n mrelax\n Target\n Enable assembler and linker relaxation."}]}