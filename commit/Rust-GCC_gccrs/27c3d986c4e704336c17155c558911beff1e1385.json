{"sha": "27c3d986c4e704336c17155c558911beff1e1385", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjdjM2Q5ODZjNGU3MDQzMzZjMTcxNTVjNTU4OTExYmVmZjFlMTM4NQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2020-05-12T20:34:50Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2020-05-12T20:35:55Z"}, "message": "Be prepared for more aggregates in gigi\n\nThis makes sure that gigi is prepared to handle more aggregates in the\nspecial memset code path.\n\n\t* sem_aggr.ads (Is_Single_Aggregate): New function.\n\t* sem_aggr.adb (Is_Others_Aggregate): Use local variable.\n\t(Is_Single_Aggregate): New function to recognize an aggregate with\n\ta single association containing a single choice.\n\t* fe.h (Is_Others_Aggregate): Delete.\n\t(Is_Single_Aggregate): New declaration.\n\t* gcc-interface/trans.c (gnat_to_gnu) <N_Assignment_Statement>: Call\n\tIs_Single_Aggregate instead of Is_Others_Aggregate.", "tree": {"sha": "a379266065b29cc139d58be43dfaf7ab977e7c34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a379266065b29cc139d58be43dfaf7ab977e7c34"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/27c3d986c4e704336c17155c558911beff1e1385", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27c3d986c4e704336c17155c558911beff1e1385", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27c3d986c4e704336c17155c558911beff1e1385", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27c3d986c4e704336c17155c558911beff1e1385/comments", "author": null, "committer": null, "parents": [{"sha": "90b160f8ec515f54ddc36519a6aaa60abdabdec1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90b160f8ec515f54ddc36519a6aaa60abdabdec1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90b160f8ec515f54ddc36519a6aaa60abdabdec1"}], "stats": {"total": 41, "additions": 34, "deletions": 7}, "files": [{"sha": "0068265649ba6224fb0e66b604349bf44c6e12bf", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27c3d986c4e704336c17155c558911beff1e1385/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27c3d986c4e704336c17155c558911beff1e1385/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=27c3d986c4e704336c17155c558911beff1e1385", "patch": "@@ -1,3 +1,14 @@\n+2020-05-12  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_aggr.ads (Is_Single_Aggregate): New function.\n+\t* sem_aggr.adb (Is_Others_Aggregate): Use local variable.\n+\t(Is_Single_Aggregate): New function to recognize an aggregate with\n+\ta single association containing a single choice.\n+\t* fe.h (Is_Others_Aggregate): Delete.\n+\t(Is_Single_Aggregate): New declaration.\n+\t* gcc-interface/trans.c (gnat_to_gnu) <N_Assignment_Statement>: Call\n+\tIs_Single_Aggregate instead of Is_Others_Aggregate.\n+\n 2020-05-12  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR ada/95035"}, {"sha": "99613282213856b8754805830f3cdc51d6801a4a", "filename": "gcc/ada/fe.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27c3d986c4e704336c17155c558911beff1e1385/gcc%2Fada%2Ffe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27c3d986c4e704336c17155c558911beff1e1385/gcc%2Fada%2Ffe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffe.h?ref=27c3d986c4e704336c17155c558911beff1e1385", "patch": "@@ -253,9 +253,9 @@ extern Boolean No_Exception_Handlers_Set\t(void);\n \n /* sem_aggr:  */\n \n-#define Is_Others_Aggregate\tsem_aggr__is_others_aggregate\n+#define Is_Single_Aggregate\tsem_aggr__is_single_aggregate\n \n-extern Boolean Is_Others_Aggregate\t(Node_Id);\n+extern Boolean Is_Single_Aggregate\t(Node_Id);\n \n /* sem_aux:  */\n "}, {"sha": "b7a4cadb7e62191629477386712282247139c020", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27c3d986c4e704336c17155c558911beff1e1385/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27c3d986c4e704336c17155c558911beff1e1385/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=27c3d986c4e704336c17155c558911beff1e1385", "patch": "@@ -7887,7 +7887,7 @@ gnat_to_gnu (Node_Id gnat_node)\n \t  const bool use_memset_p\n \t    = regular_array_type_p\n \t      && Nkind (gnat_inner) == N_Aggregate\n-\t      && Is_Others_Aggregate (gnat_inner);\n+\t      && Is_Single_Aggregate (gnat_inner);\n \n \t  /* If we use memset, we need to find the innermost expression.  */\n \t  if (use_memset_p)\n@@ -7897,7 +7897,7 @@ gnat_to_gnu (Node_Id gnat_node)\n \t\tgnat_temp\n \t\t  = Expression (First (Component_Associations (gnat_temp)));\n \t      } while (Nkind (gnat_temp) == N_Aggregate\n-\t\t       && Is_Others_Aggregate (gnat_temp));\n+\t\t       && Is_Single_Aggregate (gnat_temp));\n \t      gnu_rhs = gnat_to_gnu (gnat_temp);\n \t    }\n \t  else"}, {"sha": "5a26cf9c7fd294b52de97403e9c9e4f0edd7853b", "filename": "gcc/ada/sem_aggr.adb", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27c3d986c4e704336c17155c558911beff1e1385/gcc%2Fada%2Fsem_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27c3d986c4e704336c17155c558911beff1e1385/gcc%2Fada%2Fsem_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aggr.adb?ref=27c3d986c4e704336c17155c558911beff1e1385", "patch": "@@ -832,13 +832,26 @@ package body Sem_Aggr is\n    -------------------------\n \n    function Is_Others_Aggregate (Aggr : Node_Id) return Boolean is\n+      Assoc : constant List_Id := Component_Associations (Aggr);\n+\n    begin\n       return No (Expressions (Aggr))\n-        and then\n-          Nkind (First (Choice_List (First (Component_Associations (Aggr))))) =\n-            N_Others_Choice;\n+        and then Nkind (First (Choice_List (First (Assoc)))) = N_Others_Choice;\n    end Is_Others_Aggregate;\n \n+   -------------------------\n+   -- Is_Single_Aggregate --\n+   -------------------------\n+\n+   function Is_Single_Aggregate (Aggr : Node_Id) return Boolean is\n+      Assoc : constant List_Id := Component_Associations (Aggr);\n+\n+   begin\n+      return No (Expressions (Aggr))\n+        and then No (Next (First (Assoc)))\n+        and then No (Next (First (Choice_List (First (Assoc)))));\n+   end Is_Single_Aggregate;\n+\n    ----------------------------\n    -- Is_Top_Level_Aggregate --\n    ----------------------------"}, {"sha": "13519a25742619c641bf36d9d1bfb80a9f18db58", "filename": "gcc/ada/sem_aggr.ads", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27c3d986c4e704336c17155c558911beff1e1385/gcc%2Fada%2Fsem_aggr.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27c3d986c4e704336c17155c558911beff1e1385/gcc%2Fada%2Fsem_aggr.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aggr.ads?ref=27c3d986c4e704336c17155c558911beff1e1385", "patch": "@@ -37,6 +37,9 @@ package Sem_Aggr is\n    function Is_Others_Aggregate (Aggr : Node_Id) return Boolean;\n    --  Returns True is aggregate Aggr consists of a single OTHERS choice\n \n+   function Is_Single_Aggregate (Aggr : Node_Id) return Boolean;\n+   --  Returns True is aggregate Aggr consists of a single choice\n+\n    --  WARNING: There is a matching C declaration of this subprogram in fe.h\n \n end Sem_Aggr;"}]}