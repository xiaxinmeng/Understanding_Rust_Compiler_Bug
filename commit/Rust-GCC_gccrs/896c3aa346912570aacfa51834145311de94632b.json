{"sha": "896c3aa346912570aacfa51834145311de94632b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODk2YzNhYTM0NjkxMjU3MGFhY2ZhNTE4MzQxNDUzMTFkZTk0NjMyYg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2004-02-24T18:23:25Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2004-02-24T18:23:25Z"}, "message": "tree.c (check_qualified_type): New fn.\n\n        * tree.c (check_qualified_type): New fn.\n        (get_qualified_type): Use it.  If type already has the desired\n        quals, just return it.\n        * tree.h: Declare it.\n        * cp/tree.c (build_exception_variant): Use it.\n\nFrom-SVN: r78376", "tree": {"sha": "10d698360ffb12ad09cb08c4d3925aebb79ecd40", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/10d698360ffb12ad09cb08c4d3925aebb79ecd40"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/896c3aa346912570aacfa51834145311de94632b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/896c3aa346912570aacfa51834145311de94632b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/896c3aa346912570aacfa51834145311de94632b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/896c3aa346912570aacfa51834145311de94632b/comments", "author": null, "committer": null, "parents": [{"sha": "58565a33ed8ca46cd1d3745f96786f3b4b0ebda3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58565a33ed8ca46cd1d3745f96786f3b4b0ebda3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58565a33ed8ca46cd1d3745f96786f3b4b0ebda3"}], "stats": {"total": 40, "additions": 33, "deletions": 7}, "files": [{"sha": "102d04c7fb9cdac4b51cd88b182ef8db01192b5a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/896c3aa346912570aacfa51834145311de94632b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/896c3aa346912570aacfa51834145311de94632b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=896c3aa346912570aacfa51834145311de94632b", "patch": "@@ -1,3 +1,11 @@\n+2004-02-24  Jason Merrill  <jason@redhat.com>\n+\n+\t* tree.c (check_qualified_type): New fn.\n+\t(get_qualified_type): Use it.  If type already has the desired\n+\tquals, just return it.\n+\t* tree.h: Declare it.\n+\t* cp/tree.c (build_exception_variant): Use it.\n+\n 2003-02-24  Sanjiv Kumar Gupta  <sanjivg@noida.hcltech.com>\n \n \t* target-def.h (TARGET_SCHED_INIT_GLOBAL,\n@@ -1864,7 +1872,7 @@\n 2004-02-10  Danny Smith  <dannysmith@users.sourceforge.net>\n \n \tPR c/14088\n-\treal.c (real_from_string): Look for 'X' as well as 'x' in\n+\t* real.c (real_from_string): Look for 'X' as well as 'x' in\n \thexfloat strings.\n \n 2004-02-10  Kazu Hirata  <kazu@cs.umass.edu>"}, {"sha": "f8b33da5a4102b77256d1f9074414ea4f07b6c22", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/896c3aa346912570aacfa51834145311de94632b/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/896c3aa346912570aacfa51834145311de94632b/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=896c3aa346912570aacfa51834145311de94632b", "patch": "@@ -990,9 +990,8 @@ build_exception_variant (tree type, tree raises)\n   int type_quals = TYPE_QUALS (type);\n \n   for (; v; v = TYPE_NEXT_VARIANT (v))\n-    if (TYPE_QUALS (v) == type_quals\n-        && comp_except_specs (raises, TYPE_RAISES_EXCEPTIONS (v), 1)\n-\t&& (*targetm.comp_type_attributes) (type, v))\n+    if (check_qualified_type (v, type, type_quals)\n+        && comp_except_specs (raises, TYPE_RAISES_EXCEPTIONS (v), 1))\n       return v;\n \n   /* Need to build a new variant.  */"}, {"sha": "3913b55f33e3dd66bb9408b40c9267645578bdcc", "filename": "gcc/tree.c", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/896c3aa346912570aacfa51834145311de94632b/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/896c3aa346912570aacfa51834145311de94632b/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=896c3aa346912570aacfa51834145311de94632b", "patch": "@@ -2967,6 +2967,19 @@ set_type_quals (tree type, int type_quals)\n   TYPE_RESTRICT (type) = (type_quals & TYPE_QUAL_RESTRICT) != 0;\n }\n \n+/* Returns true iff cand is equivalent to base with type_quals.  */\n+\n+bool\n+check_qualified_type (tree cand, tree base, int type_quals)\n+{\n+  return (TYPE_QUALS (cand) == type_quals\n+\t  && TYPE_NAME (cand) == TYPE_NAME (base)\n+\t  /* Apparently this is needed for Objective-C.  */\n+\t  && TYPE_CONTEXT (cand) == TYPE_CONTEXT (base)\n+\t  && attribute_list_equal (TYPE_ATTRIBUTES (cand),\n+\t\t\t\t   TYPE_ATTRIBUTES (base)));\n+}\n+\n /* Return a version of the TYPE, qualified as indicated by the\n    TYPE_QUALS, if one exists.  If no qualified version exists yet,\n    return NULL_TREE.  */\n@@ -2976,13 +2989,14 @@ get_qualified_type (tree type, int type_quals)\n {\n   tree t;\n \n+  if (TYPE_QUALS (type) == type_quals)\n+    return type;\n+\n   /* Search the chain of variants to see if there is already one there just\n      like the one we need to have.  If so, use that existing one.  We must\n      preserve the TYPE_NAME, since there is code that depends on this.  */\n   for (t = TYPE_MAIN_VARIANT (type); t; t = TYPE_NEXT_VARIANT (t))\n-    if (TYPE_QUALS (t) == type_quals && TYPE_NAME (t) == TYPE_NAME (type)\n-        && TYPE_CONTEXT (t) == TYPE_CONTEXT (type)\n-\t&& attribute_list_equal (TYPE_ATTRIBUTES (t), TYPE_ATTRIBUTES (type)))\n+    if (check_qualified_type (t, type, type_quals))\n       return t;\n \n   return NULL_TREE;"}, {"sha": "7846b545c21517ac78490726253a99e98706c46e", "filename": "gcc/tree.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/896c3aa346912570aacfa51834145311de94632b/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/896c3aa346912570aacfa51834145311de94632b/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=896c3aa346912570aacfa51834145311de94632b", "patch": "@@ -2304,6 +2304,11 @@ extern tree merge_attributes (tree, tree);\n extern tree merge_dllimport_decl_attributes (tree, tree);\n #endif\n \n+/* Check whether CAND is suitable to be returned from get_qualified_type\n+   (BASE, TYPE_QUALS).  */\n+\n+extern bool check_qualified_type (tree, tree, int);\n+\n /* Return a version of the TYPE, qualified as indicated by the\n    TYPE_QUALS, if one exists.  If no qualified version exists yet,\n    return NULL_TREE.  */"}]}