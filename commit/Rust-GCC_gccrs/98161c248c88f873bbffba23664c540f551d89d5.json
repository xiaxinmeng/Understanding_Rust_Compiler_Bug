{"sha": "98161c248c88f873bbffba23664c540f551d89d5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTgxNjFjMjQ4Yzg4Zjg3M2JiZmZiYTIzNjY0YzU0MGY1NTFkODlkNQ==", "commit": {"author": {"name": "Dennis Zhang", "email": "dennis.zh@live.com", "date": "2020-10-23T07:53:53Z"}, "committer": {"name": "Dennis Zhang", "email": "dennis.zh@live.com", "date": "2020-10-23T07:53:53Z"}, "message": "arm: Auto-vectorization for MVE: vsub\n\nThis patch enables MVE vsub instructions for auto-vectorization.\nThe sub<mode>3 in vec-common.md is modified to use new mode macros\nto include MVE extension for vectorization. MVE vsub insns in mve.md are\nmodified to use 'minus' instead of unspec expression to support\nsub<mode>3. Use VDQ instead fo VALL to cover all supported modes. The\nredundant sub<mode>3 insns in neon.md are then removed.\n\ngcc/ChangeLog:\n\n2020-10-23  Dennis Zhang  <dennis.zhang@arm.com>\n\n\t* config/arm/mve.md (mve_vsubq<mode>): New entry for vsub instruction\n\tusing expression 'minus'.\n\t(mve_vsubq_f<mode>): Use minus instead of VSUBQ_F unspec.\n\t* config/arm/neon.md (sub<mode>3, sub<mode>3_fp16): Removed.\n\t(neon_vsub<mode>): Use gen_sub<mode>3 instead of gen_sub<mode>3_fp16.\n\t* config/arm/vec-common.md (sub<mode>3): Use the new mode macros\n\tARM_HAVE_<MODE>_ARITH. Use iterator VDQ instead of VALL.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/arm/simd/mve-vsub_1.c: New test.", "tree": {"sha": "85788a59de2faac58f11a54183b20d7717a31bb0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/85788a59de2faac58f11a54183b20d7717a31bb0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/98161c248c88f873bbffba23664c540f551d89d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98161c248c88f873bbffba23664c540f551d89d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98161c248c88f873bbffba23664c540f551d89d5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98161c248c88f873bbffba23664c540f551d89d5/comments", "author": {"login": "solarock", "id": 109078, "node_id": "MDQ6VXNlcjEwOTA3OA==", "avatar_url": "https://avatars.githubusercontent.com/u/109078?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solarock", "html_url": "https://github.com/solarock", "followers_url": "https://api.github.com/users/solarock/followers", "following_url": "https://api.github.com/users/solarock/following{/other_user}", "gists_url": "https://api.github.com/users/solarock/gists{/gist_id}", "starred_url": "https://api.github.com/users/solarock/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solarock/subscriptions", "organizations_url": "https://api.github.com/users/solarock/orgs", "repos_url": "https://api.github.com/users/solarock/repos", "events_url": "https://api.github.com/users/solarock/events{/privacy}", "received_events_url": "https://api.github.com/users/solarock/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solarock", "id": 109078, "node_id": "MDQ6VXNlcjEwOTA3OA==", "avatar_url": "https://avatars.githubusercontent.com/u/109078?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solarock", "html_url": "https://github.com/solarock", "followers_url": "https://api.github.com/users/solarock/followers", "following_url": "https://api.github.com/users/solarock/following{/other_user}", "gists_url": "https://api.github.com/users/solarock/gists{/gist_id}", "starred_url": "https://api.github.com/users/solarock/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solarock/subscriptions", "organizations_url": "https://api.github.com/users/solarock/orgs", "repos_url": "https://api.github.com/users/solarock/repos", "events_url": "https://api.github.com/users/solarock/events{/privacy}", "received_events_url": "https://api.github.com/users/solarock/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6fade5a6044b7102758f4ca66c8715ebc12a6306", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6fade5a6044b7102758f4ca66c8715ebc12a6306", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6fade5a6044b7102758f4ca66c8715ebc12a6306"}], "stats": {"total": 135, "additions": 98, "deletions": 37}, "files": [{"sha": "8bc8f3e3761bbe7772f72aa8b34decb8e24bb9b9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98161c248c88f873bbffba23664c540f551d89d5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98161c248c88f873bbffba23664c540f551d89d5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=98161c248c88f873bbffba23664c540f551d89d5", "patch": "@@ -1,3 +1,13 @@\n+2020-10-23  Dennis Zhang  <dennis.zhang@arm.com>\n+\n+\t* config/arm/mve.md (mve_vsubq<mode>): New entry for vsub instruction\n+\tusing expression 'minus'.\n+\t(mve_vsubq_f<mode>): Use minus instead of VSUBQ_F unspec.\n+\t* config/arm/neon.md (sub<mode>3, sub<mode>3_fp16): Removed.\n+\t(neon_vsub<mode>): Use gen_sub<mode>3 instead of gen_sub<mode>3_fp16.\n+\t* config/arm/vec-common.md (sub<mode>3): Use the new mode macros\n+\tARM_HAVE_<MODE>_ARITH. Use iterator VDQ instead of VALL.\n+\n 2020-10-22  Alan Modra  <amodra@gmail.com>\n \n \t* config/rs6000/rs6000.c (rs6000_emit_xxspltidp_v2df): Delete"}, {"sha": "ecbaaa9150132fa6568b5d2217e7233e2ec6ebb6", "filename": "gcc/config/arm/mve.md", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98161c248c88f873bbffba23664c540f551d89d5/gcc%2Fconfig%2Farm%2Fmve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98161c248c88f873bbffba23664c540f551d89d5/gcc%2Fconfig%2Farm%2Fmve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fmve.md?ref=98161c248c88f873bbffba23664c540f551d89d5", "patch": "@@ -1957,6 +1957,17 @@\n   [(set_attr \"type\" \"mve_move\")\n ])\n \n+(define_insn \"mve_vsubq<mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(minus:MVE_2 (match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n+\t\t     (match_operand:MVE_2 2 \"s_register_operand\" \"w\")))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vsub.i%#<V_sz_elem>\\t%q0, %q1, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n ;;\n ;; [vabdq_f])\n ;;\n@@ -2860,9 +2871,8 @@\n (define_insn \"mve_vsubq_f<mode>\"\n   [\n    (set (match_operand:MVE_0 0 \"s_register_operand\" \"=w\")\n-\t(unspec:MVE_0 [(match_operand:MVE_0 1 \"s_register_operand\" \"w\")\n-\t\t       (match_operand:MVE_0 2 \"s_register_operand\" \"w\")]\n-\t VSUBQ_F))\n+\t(minus:MVE_0 (match_operand:MVE_0 1 \"s_register_operand\" \"w\")\n+\t\t     (match_operand:MVE_0 2 \"s_register_operand\" \"w\")))\n   ]\n   \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n   \"vsub.f%#<V_sz_elem>\\t%q0, %q1, %q2\""}, {"sha": "2d76769837884be7bde7a4c4234607a559ea5499", "filename": "gcc/config/arm/neon.md", "status": "modified", "additions": 1, "deletions": 23, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98161c248c88f873bbffba23664c540f551d89d5/gcc%2Fconfig%2Farm%2Fneon.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98161c248c88f873bbffba23664c540f551d89d5/gcc%2Fconfig%2Farm%2Fneon.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fneon.md?ref=98161c248c88f873bbffba23664c540f551d89d5", "patch": "@@ -521,28 +521,6 @@\n                     (const_string \"neon_sub<q>\")))]\n )\n \n-(define_insn \"sub<mode>3\"\n- [(set\n-   (match_operand:VH 0 \"s_register_operand\" \"=w\")\n-   (minus:VH\n-    (match_operand:VH 1 \"s_register_operand\" \"w\")\n-    (match_operand:VH 2 \"s_register_operand\" \"w\")))]\n- \"ARM_HAVE_NEON_<MODE>_ARITH\"\n- \"vsub.<V_if_elem>\\t%<V_reg>0, %<V_reg>1, %<V_reg>2\"\n- [(set_attr \"type\" \"neon_sub<q>\")]\n-)\n-\n-(define_insn \"sub<mode>3_fp16\"\n- [(set\n-   (match_operand:VH 0 \"s_register_operand\" \"=w\")\n-   (minus:VH\n-    (match_operand:VH 1 \"s_register_operand\" \"w\")\n-    (match_operand:VH 2 \"s_register_operand\" \"w\")))]\n- \"TARGET_NEON_FP16INST\"\n- \"vsub.<V_if_elem>\\t%<V_reg>0, %<V_reg>1, %<V_reg>2\"\n- [(set_attr \"type\" \"neon_sub<q>\")]\n-)\n-\n (define_insn \"*mul<mode>3_neon\"\n   [(set (match_operand:VDQW 0 \"s_register_operand\" \"=w\")\n         (mult:VDQW (match_operand:VDQW 1 \"s_register_operand\" \"w\")\n@@ -1637,7 +1615,7 @@\n    (match_operand:VH 2 \"s_register_operand\")]\n   \"TARGET_NEON_FP16INST\"\n {\n-  emit_insn (gen_sub<mode>3_fp16 (operands[0], operands[1], operands[2]));\n+  emit_insn (gen_sub<mode>3 (operands[0], operands[1], operands[2]));\n   DONE;\n })\n "}, {"sha": "250e503876ac9491234b225d6fdac16acc48c41f", "filename": "gcc/config/arm/vec-common.md", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98161c248c88f873bbffba23664c540f551d89d5/gcc%2Fconfig%2Farm%2Fvec-common.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98161c248c88f873bbffba23664c540f551d89d5/gcc%2Fconfig%2Farm%2Fvec-common.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fvec-common.md?ref=98161c248c88f873bbffba23664c540f551d89d5", "patch": "@@ -87,18 +87,12 @@\n   \"ARM_HAVE_<MODE>_ARITH\"\n )\n \n-;; Vector arithmetic. Expanders are blank, then unnamed insns implement\n-;; patterns separately for IWMMXT and Neon.\n-\n (define_expand \"sub<mode>3\"\n-  [(set (match_operand:VALL 0 \"s_register_operand\")\n-        (minus:VALL (match_operand:VALL 1 \"s_register_operand\")\n-                    (match_operand:VALL 2 \"s_register_operand\")))]\n-  \"(TARGET_NEON && ((<MODE>mode != V2SFmode && <MODE>mode != V4SFmode)\n-\t\t    || flag_unsafe_math_optimizations))\n-   || (TARGET_REALLY_IWMMXT && VALID_IWMMXT_REG_MODE (<MODE>mode))\"\n-{\n-})\n+  [(set (match_operand:VDQ 0 \"s_register_operand\")\n+\t(minus:VDQ (match_operand:VDQ 1 \"s_register_operand\")\n+\t\t   (match_operand:VDQ 2 \"s_register_operand\")))]\n+  \"ARM_HAVE_<MODE>_ARITH\"\n+)\n \n (define_expand \"mul<mode>3\"\n   [(set (match_operand:VDQWH 0 \"s_register_operand\")"}, {"sha": "d7c7c5f2630e1a89b57bda7f2a2b6534f2e6f36d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98161c248c88f873bbffba23664c540f551d89d5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98161c248c88f873bbffba23664c540f551d89d5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=98161c248c88f873bbffba23664c540f551d89d5", "patch": "@@ -1,3 +1,7 @@\n+2020-10-23  Dennis Zhang  <dennis.zhang@arm.com>\n+\n+\t* gcc.target/arm/simd/mve-vsub_1.c: New test.\n+\n 2020-10-22  Alan Modra  <amodra@gmail.com>\n \n \t* gcc.target/powerpc/vec-splati-runnable.c: Don't abort on"}, {"sha": "cb3ef3a14e0e62faafde2e79dae9d7c27c772327", "filename": "gcc/testsuite/gcc.target/arm/simd/mve-vsub_1.c", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98161c248c88f873bbffba23664c540f551d89d5/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fmve-vsub_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98161c248c88f873bbffba23664c540f551d89d5/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fmve-vsub_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fmve-vsub_1.c?ref=98161c248c88f873bbffba23664c540f551d89d5", "patch": "@@ -0,0 +1,65 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg -additional-options \"-O3 -funsafe-math-optimizations\" } */\n+/* { dg-additional-options \"-O3\" } */\n+\n+#include <stdint.h>\n+\n+void test_vsub_i32 (int32_t * dest, int32_t * a, int32_t * b) {\n+  int i;\n+  for (i=0; i<4; i++) {\n+    dest[i] = a[i] - b[i];\n+  }\n+}\n+\n+void test_vsub_i32_u (uint32_t * dest, uint32_t * a, uint32_t * b) {\n+  int i;\n+  for (i=0; i<4; i++) {\n+    dest[i] = a[i] - b[i];\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsub\\.i32\\tq[0-9]+, q[0-9]+, q[0-9]+} 2 } } */\n+\n+void test_vsub_i16 (int16_t * dest, int16_t * a, int16_t * b) {\n+  int i;\n+  for (i=0; i<8; i++) {\n+    dest[i] = a[i] - b[i];\n+  }\n+}\n+\n+void test_vsub_i16_u (uint16_t * dest, uint16_t * a, uint16_t * b) {\n+  int i;\n+  for (i=0; i<8; i++) {\n+    dest[i] = a[i] - b[i];\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsub\\.i16\\tq[0-9]+, q[0-9]+, q[0-9]+} 2 } } */\n+\n+void test_vsub_i8 (int8_t * dest, int8_t * a, int8_t * b) {\n+  int i;\n+  for (i=0; i<16; i++) {\n+    dest[i] = a[i] - b[i];\n+  }\n+}\n+\n+void test_vsub_i8_u (uint8_t * dest, uint8_t * a, uint8_t * b) {\n+  int i;\n+  for (i=0; i<16; i++) {\n+    dest[i] = a[i] - b[i];\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsub\\.i8\\tq[0-9]+, q[0-9]+, q[0-9]+} 2 } } */\n+\n+void test_vsub_f32 (float * dest, float * a, float * b) {\n+  int i;\n+  for (i=0; i<4; i++) {\n+    dest[i] = a[i] - b[i];\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsub\\.f32\\tq[0-9]+, q[0-9]+, q[0-9]+} 1 } } */\n+"}]}