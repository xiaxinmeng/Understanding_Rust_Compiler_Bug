{"sha": "092a1f5ab3fa380240b5452d20ab83d150ee70c4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDkyYTFmNWFiM2ZhMzgwMjQwYjU0NTJkMjBhYjgzZDE1MGVlNzBjNA==", "commit": {"author": {"name": "Jeff Sturm", "email": "jsturm@one-point.com", "date": "2001-07-23T03:51:17Z"}, "committer": {"name": "Jeff Sturm", "email": "jsturm@gcc.gnu.org", "date": "2001-07-23T03:51:17Z"}, "message": "configure.host: Enable hash synchronization for alpha*-*.\n\n* configure.host: Enable hash synchronization for alpha*-*.\n* include/posix-threads.h (_Jv_ThreadSelf): Added inline function for alpha.\n* java/lang/natObject.cc (compare_and_swap, release_set,\ncompare_and_swap_release): Added inline functions for alpha.\n\nFrom-SVN: r44251", "tree": {"sha": "1a10855b6573d1527d123a6882488123ba1b42b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1a10855b6573d1527d123a6882488123ba1b42b5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/092a1f5ab3fa380240b5452d20ab83d150ee70c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/092a1f5ab3fa380240b5452d20ab83d150ee70c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/092a1f5ab3fa380240b5452d20ab83d150ee70c4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/092a1f5ab3fa380240b5452d20ab83d150ee70c4/comments", "author": null, "committer": null, "parents": [{"sha": "0b6301aebeb907d1ebaee5b075c05595db9fa08f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b6301aebeb907d1ebaee5b075c05595db9fa08f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b6301aebeb907d1ebaee5b075c05595db9fa08f"}], "stats": {"total": 65, "additions": 65, "deletions": 0}, "files": [{"sha": "173a68933d74f69b037a81898c5cdb30e40e7a7f", "filename": "libjava/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/092a1f5ab3fa380240b5452d20ab83d150ee70c4/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/092a1f5ab3fa380240b5452d20ab83d150ee70c4/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=092a1f5ab3fa380240b5452d20ab83d150ee70c4", "patch": "@@ -1,3 +1,11 @@\n+2001-07-22  Jeff Sturm  <jsturm@one-point.com>\n+\n+\t* configure.host: Enable hash synchronization for alpha*-*.\n+\t* include/posix-threads.h (_Jv_ThreadSelf): Added inline\n+\tfunction for alpha.\n+\t* java/lang/natObject.cc (compare_and_swap, release_set,\n+\tcompare_and_swap_release): Added inline functions for alpha.\n+\n 2001-07-18  Rainer Orth  <ro@TechFak.Uni-Bielefeld.DE>\n \n \t* java/net/natPlainDatagramSocketImpl.cc (mcastGrp): Use new RFC"}, {"sha": "7ad3c3b87230e1e8a4c2292e9a1863709d75f1af", "filename": "libjava/configure.host", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/092a1f5ab3fa380240b5452d20ab83d150ee70c4/libjava%2Fconfigure.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/092a1f5ab3fa380240b5452d20ab83d150ee70c4/libjava%2Fconfigure.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fconfigure.host?ref=092a1f5ab3fa380240b5452d20ab83d150ee70c4", "patch": "@@ -70,6 +70,7 @@ case \"${host}\" in\n   alpha*-*)\n \tlibgcj_flags=\"${libgcj_flags} -mieee\"\n \tlibgcj_interpreter=yes\n+\tenable_hash_synchronization_default=yes\n \t;;\n   powerpc*-*)\n \tlibgcj_interpreter=yes"}, {"sha": "a268f1dfa0c823f321f0bd4e343917c5ad818196", "filename": "libjava/include/posix-threads.h", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/092a1f5ab3fa380240b5452d20ab83d150ee70c4/libjava%2Finclude%2Fposix-threads.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/092a1f5ab3fa380240b5452d20ab83d150ee70c4/libjava%2Finclude%2Fposix-threads.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fposix-threads.h?ref=092a1f5ab3fa380240b5452d20ab83d150ee70c4", "patch": "@@ -250,6 +250,24 @@ _Jv_ThreadSelf (void)\n \n #endif /* __ia64__ */\n \n+#ifdef __alpha__\n+\n+#include <asm/pal.h>\n+\n+typedef unsigned long _Jv_ThreadId_t;\n+\n+inline _Jv_ThreadId_t\n+_Jv_ThreadSelf (void)\n+{\n+  unsigned long id;\n+  __asm__ (\"call_pal %1\\n\\tmov $0, %0\" : \"=r\"(id) : \"i\"(PAL_rduniq) : \"$0\");\n+  return id;\n+}\n+\n+#define JV_SELF_DEFINED\n+\n+#endif /* __alpha__ */\n+\n #if defined(SLOW_PTHREAD_SELF)\n \n typedef pthread_t _Jv_ThreadId_t;"}, {"sha": "adb487a0dc24a5fa31a5f3d5d030e3f5664cd7ae", "filename": "libjava/java/lang/natObject.cc", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/092a1f5ab3fa380240b5452d20ab83d150ee70c4/libjava%2Fjava%2Flang%2FnatObject.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/092a1f5ab3fa380240b5452d20ab83d150ee70c4/libjava%2Fjava%2Flang%2FnatObject.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatObject.cc?ref=092a1f5ab3fa380240b5452d20ab83d150ee70c4", "patch": "@@ -391,6 +391,44 @@ typedef size_t obj_addr_t;\t/* Integer type big enough for object\t*/\n   }\n #endif\n \n+#if defined(__GNUC__) && defined(__alpha__)\n+  inline static bool\n+  compare_and_swap(volatile obj_addr_t *addr,\n+\t\t  \t\t\t\tobj_addr_t old,\n+\t\t\t\t\t\tobj_addr_t new_val) \n+  {\n+    unsigned long oldval;\n+    char result;\n+    __asm__ __volatile__(\n+\t\"1:ldq_l %0, %1\\n\\t\" \\\n+\t\"cmpeq %0, %5, %2\\n\\t\" \\\n+\t\"beq %2, 2f\\n\\t\" \\\n+\t\"mov %3, %0\\n\\t\" \\\n+\t\"stq_c %0, %1\\n\\t\" \\\n+\t\"bne %0, 2f\\n\\t\" \\\n+\t\"br 1b\\n\\t\" \\\n+\t\"2:mb\"\n+\t    \t: \"=&r\"(oldval), \"=m\"(*addr), \"=&r\"(result)\n+\t\t: \"r\" (new_val), \"m\"(*addr), \"r\"(old) : \"memory\");\n+    return (bool) result;\n+  }\n+\n+  inline static void\n+  release_set(volatile obj_addr_t *addr, obj_addr_t new_val)\n+  {\n+    __asm__ __volatile__(\"mb\" : : : \"memory\");\n+    *(addr) = new_val;\n+  }\n+\n+  inline static bool\n+  compare_and_swap_release(volatile obj_addr_t *addr,\n+\t\t  \t\t\t\t       obj_addr_t old,\n+\t\t\t\t\t\t       obj_addr_t new_val)\n+  {\n+    return compare_and_swap(addr, old, new_val);\n+  }\n+#endif\n+\n // Try to determine whether we are on a multiprocessor, i.e. whether\n // spinning may be profitable.\n // This should really use a suitable autoconf macro."}]}