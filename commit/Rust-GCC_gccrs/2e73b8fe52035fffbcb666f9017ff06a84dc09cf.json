{"sha": "2e73b8fe52035fffbcb666f9017ff06a84dc09cf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmU3M2I4ZmU1MjAzNWZmZmJjYjY2NmY5MDE3ZmYwNmE4NGRjMDljZg==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2015-09-28T08:25:36Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2015-09-28T08:25:36Z"}, "message": "[RTL-ifcvt] PR rtl-optimization/67481: Look more deeply for CCmode sets during if-covnersion\n\n\tPR rtl-optimization/67481\n\t* ifcvt.c (contains_ccmode_rtx_p): New function.\n\t(insn_valid_noce_process_p): Use it.\n\nFrom-SVN: r228195", "tree": {"sha": "08374d69589fda69eed1782b4f0d5fa047e43707", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/08374d69589fda69eed1782b4f0d5fa047e43707"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2e73b8fe52035fffbcb666f9017ff06a84dc09cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e73b8fe52035fffbcb666f9017ff06a84dc09cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e73b8fe52035fffbcb666f9017ff06a84dc09cf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e73b8fe52035fffbcb666f9017ff06a84dc09cf/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "470512c31b5e078519370ce66fb39a3b6d604392", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/470512c31b5e078519370ce66fb39a3b6d604392", "html_url": "https://github.com/Rust-GCC/gccrs/commit/470512c31b5e078519370ce66fb39a3b6d604392"}], "stats": {"total": 20, "additions": 20, "deletions": 0}, "files": [{"sha": "32875dfca7206d76d415b9bf5006cb1d1738477f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e73b8fe52035fffbcb666f9017ff06a84dc09cf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e73b8fe52035fffbcb666f9017ff06a84dc09cf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2e73b8fe52035fffbcb666f9017ff06a84dc09cf", "patch": "@@ -1,3 +1,9 @@\n+2015-09-28  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\tPR rtl-optimization/67481\n+\t* ifcvt.c (contains_ccmode_rtx_p): New function.\n+\t(insn_valid_noce_process_p): Use it.\n+\n 2015-09-28  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \tPR rtl-optimization/67456"}, {"sha": "7ab738ec0e2024735015839ad8e952f07a36ec7c", "filename": "gcc/ifcvt.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e73b8fe52035fffbcb666f9017ff06a84dc09cf/gcc%2Fifcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e73b8fe52035fffbcb666f9017ff06a84dc09cf/gcc%2Fifcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fifcvt.c?ref=2e73b8fe52035fffbcb666f9017ff06a84dc09cf", "patch": "@@ -1761,6 +1761,19 @@ noce_try_cmove (struct noce_if_info *if_info)\n   return FALSE;\n }\n \n+/* Return true if X contains a conditional code mode rtx.  */\n+\n+static bool\n+contains_ccmode_rtx_p (rtx x)\n+{\n+  subrtx_iterator::array_type array;\n+  FOR_EACH_SUBRTX (iter, array, x, ALL)\n+    if (GET_MODE_CLASS (GET_MODE (*iter)) == MODE_CC)\n+      return true;\n+\n+  return false;\n+}\n+\n /* Helper for bb_valid_for_noce_process_p.  Validate that\n    the rtx insn INSN is a single set that does not set\n    the conditional register CC and is in general valid for\n@@ -1779,6 +1792,7 @@ insn_valid_noce_process_p (rtx_insn *insn, rtx cc)\n   /* Currently support only simple single sets in test_bb.  */\n   if (!sset\n       || !noce_operand_ok (SET_DEST (sset))\n+      || contains_ccmode_rtx_p (SET_DEST (sset))\n       || !noce_operand_ok (SET_SRC (sset)))\n     return false;\n "}]}