{"sha": "e65f1db78c2bba088536e57bae37e18deb3ccfad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTY1ZjFkYjc4YzJiYmEwODg1MzZlNTdiYWUzN2UxOGRlYjNjY2ZhZA==", "commit": {"author": {"name": "Laurynas Biveinis", "email": "laurynas.biveinis@gmail.com", "date": "2010-11-10T04:54:52Z"}, "committer": {"name": "Laurynas Biveinis", "email": "lauras@gcc.gnu.org", "date": "2010-11-10T04:54:52Z"}, "message": "gty.texi (GTY Options): Clarify that variable_size produces allocators taking size in bytes...\n\n2010-11-09  Laurynas Biveinis  <laurynas.biveinis@gmail.com>\n\n\tPR/46268\n\t* doc/gty.texi (GTY Options): Clarify that variable_size produces\n\tallocators taking size in bytes, compare with length option.  Add\n\tsize calculation example.\n\t(Invoking the garbage collector): Ensure that sentences are\n\tfollowed by two spaces.  Describe that pointer fields must be\n\tinitialized at ggc_collect call.\n\t(Troubleshooting): New section.\n\nFrom-SVN: r166519", "tree": {"sha": "8372c50214c47e934cc2a513baf5938cb4ec4198", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8372c50214c47e934cc2a513baf5938cb4ec4198"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e65f1db78c2bba088536e57bae37e18deb3ccfad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e65f1db78c2bba088536e57bae37e18deb3ccfad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e65f1db78c2bba088536e57bae37e18deb3ccfad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e65f1db78c2bba088536e57bae37e18deb3ccfad/comments", "author": {"login": "laurynas-biveinis", "id": 58894, "node_id": "MDQ6VXNlcjU4ODk0", "avatar_url": "https://avatars.githubusercontent.com/u/58894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/laurynas-biveinis", "html_url": "https://github.com/laurynas-biveinis", "followers_url": "https://api.github.com/users/laurynas-biveinis/followers", "following_url": "https://api.github.com/users/laurynas-biveinis/following{/other_user}", "gists_url": "https://api.github.com/users/laurynas-biveinis/gists{/gist_id}", "starred_url": "https://api.github.com/users/laurynas-biveinis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/laurynas-biveinis/subscriptions", "organizations_url": "https://api.github.com/users/laurynas-biveinis/orgs", "repos_url": "https://api.github.com/users/laurynas-biveinis/repos", "events_url": "https://api.github.com/users/laurynas-biveinis/events{/privacy}", "received_events_url": "https://api.github.com/users/laurynas-biveinis/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0f292566eb5211a5b2c603b7a5867279d60a40e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f292566eb5211a5b2c603b7a5867279d60a40e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f292566eb5211a5b2c603b7a5867279d60a40e1"}], "stats": {"total": 65, "additions": 58, "deletions": 7}, "files": [{"sha": "df5195ce178b9b4d5d1e2dabe844fc7be690fd5a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e65f1db78c2bba088536e57bae37e18deb3ccfad/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e65f1db78c2bba088536e57bae37e18deb3ccfad/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e65f1db78c2bba088536e57bae37e18deb3ccfad", "patch": "@@ -1,3 +1,14 @@\n+2010-11-10  Laurynas Biveinis  <laurynas.biveinis@gmail.com>\n+\n+\tPR/46268\n+\t* doc/gty.texi (GTY Options): Clarify that variable_size produces\n+\tallocators taking size in bytes, compare with length option.  Add\n+\tsize calculation example.\n+\t(Invoking the garbage collector): Ensure that sentences are\n+\tfollowed by two spaces.  Describe that pointer fields must be\n+\tinitialized at ggc_collect call.\n+\t(Troubleshooting): New section.\n+\n 2010-11-09   Jan Hubicka  <jh@suse.cz>\n \n \tPR tree-optimization/40436"}, {"sha": "bc52f912d26217351cabeb699fb46ca1bafcaff6", "filename": "gcc/doc/gty.texi", "status": "modified", "additions": 47, "deletions": 7, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e65f1db78c2bba088536e57bae37e18deb3ccfad/gcc%2Fdoc%2Fgty.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e65f1db78c2bba088536e57bae37e18deb3ccfad/gcc%2Fdoc%2Fgty.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgty.texi?ref=e65f1db78c2bba088536e57bae37e18deb3ccfad", "patch": "@@ -70,6 +70,7 @@ These don't need to be marked.\n * GGC Roots::           Making global variables GGC roots.\n * Files::               How the generated files work.\n * Invoking the garbage collector::   How to invoke the garbage collector.\n+* Troubleshooting::     When something does not work as expected.\n @end menu\n \n @node GTY Options\n@@ -355,10 +356,12 @@ number or the hash of a string instead.\n \n The type machinery expects the types to be of constant size.  When this\n is not true, for example, with structs that have array fields or unions,\n-the type machinery cannot tell how many bytes need to be allocated at \n+the type machinery cannot tell how many bytes need to be allocated at\n each allocation.  The @code{variable_size} is used to mark such types.\n-The type machinery then provides allocators that take a parameter \n-indicating an exact size of object being allocated.  \n+The type machinery then provides allocators that take a parameter\n+indicating an exact size of object being allocated.  Note that the size\n+must be provided in bytes whereas the @code{length} option works with\n+array lengths in number of elements.\n \n For example,\n @smallexample\n@@ -374,6 +377,12 @@ memory as follows:\n   field_vec = ggc_alloc_sorted_fields_type (size);\n @end smallexample\n \n+If @var{field_vec->elts} stores @var{n} elements, then @var{size}\n+could be calculated as follows:\n+@smallexample\n+  size_t size = sizeof (struct sorted_fields_type) + n * sizeof (tree);\n+@end smallexample\n+\n @findex special\n @item special (\"@var{name}\")\n \n@@ -487,12 +496,43 @@ The GCC garbage collector GGC is only invoked explicitly. In contrast\n with many other garbage collectors, it is not implicitly invoked by\n allocation routines when a lot of memory has been consumed. So the\n only way to have GGC reclaim storage it to call the @code{ggc_collect}\n-function explicitly. This call is an expensive operation, as it may\n-have to scan the entire heap. Beware that local variables (on the GCC\n+function explicitly.  This call is an expensive operation, as it may\n+have to scan the entire heap.  Beware that local variables (on the GCC\n call stack) are not followed by such an invocation (as many other\n garbage collectors do): you should reference all your data from static\n or external @code{GTY}-ed variables, and it is advised to call\n-@code{ggc_collect} with a shallow call stack. The GGC is an exact mark\n+@code{ggc_collect} with a shallow call stack.  The GGC is an exact mark\n and sweep garbage collector (so it does not scan the call stack for\n-pointers). In practice GCC passes don't often call @code{ggc_collect}\n+pointers).  In practice GCC passes don't often call @code{ggc_collect}\n themselves, because it is called by the pass manager between passes.\n+\n+At the time of the @code{ggc_collect} call all pointers in the GC-marked\n+structures must be valid or @code{NULL}.  In practice this means that\n+there should not be uninitialized pointer fields in the structures even\n+if your code never reads or writes those fields at a particular\n+instance.  One way to ensure this is to use cleared versions of\n+allocators unless all the fields are initialized manually immediately\n+after allocation.\n+\n+@node Troubleshooting\n+@section Troubleshooting the garbage collector\n+@cindex garbage collector, troubleshooting\n+\n+With the current garbage collector implementation, most issues should\n+show up as GCC compilation errors.  Some of the most commonly\n+encountered issues are described below.\n+\n+@itemize @bullet\n+@item Gengtype does not produce allocators for a @code{GTY}-marked type.\n+Gengtype checks if there is at least one possible path from GC roots to\n+at least one instance of each type before outputting allocators.  If\n+there is no such path, the @code{GTY} markers will be ignored and no\n+allocators will be output.  Solve this by making sure that there exists\n+at least one such path.  If creating it is unfeasible or raises a ``code\n+smell'', consider if you really must use GC for allocating such type.\n+\n+@item Link-time errors about undefined @code{gt_ggc_r_foo_bar} and\n+similarly-named symbols.  Check if your @file{foo_bar} source file has\n+@code{#include \"gt-foo_bar.h\"} as its very last line.\n+\n+@end itemize"}]}