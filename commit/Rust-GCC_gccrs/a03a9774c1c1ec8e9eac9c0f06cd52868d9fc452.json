{"sha": "a03a9774c1c1ec8e9eac9c0f06cd52868d9fc452", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTAzYTk3NzRjMWMxZWM4ZTllYWM5YzBmMDZjZDUyODY4ZDlmYzQ1Mg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2010-07-08T09:16:42Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2010-07-08T09:16:42Z"}, "message": "tree-ssa-sccvn.c (vn_reference_maybe_forwprop_address): New function.\n\n2010-07-08  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-ssa-sccvn.c (vn_reference_maybe_forwprop_address):\n\tNew function.\n\t(valueize_refs): Call it.\n\nFrom-SVN: r161946", "tree": {"sha": "ca29e7894bfe9b0d01f3c55fd0ce12b0793e4ce2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ca29e7894bfe9b0d01f3c55fd0ce12b0793e4ce2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a03a9774c1c1ec8e9eac9c0f06cd52868d9fc452", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a03a9774c1c1ec8e9eac9c0f06cd52868d9fc452", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a03a9774c1c1ec8e9eac9c0f06cd52868d9fc452", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a03a9774c1c1ec8e9eac9c0f06cd52868d9fc452/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e73cfe5d34490fef3beaf807140e5e56b3952c92", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e73cfe5d34490fef3beaf807140e5e56b3952c92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e73cfe5d34490fef3beaf807140e5e56b3952c92"}], "stats": {"total": 87, "additions": 87, "deletions": 0}, "files": [{"sha": "54f0f1d29c50917afef5e583008f2002c5803a40", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a03a9774c1c1ec8e9eac9c0f06cd52868d9fc452/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a03a9774c1c1ec8e9eac9c0f06cd52868d9fc452/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a03a9774c1c1ec8e9eac9c0f06cd52868d9fc452", "patch": "@@ -1,3 +1,9 @@\n+2010-07-08  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-ssa-sccvn.c (vn_reference_maybe_forwprop_address):\n+\tNew function.\n+\t(valueize_refs): Call it.\n+\n 2010-07-08  Richard Guenther  <rguenther@suse.de>\n \n \tPR rtl-optimization/44838"}, {"sha": "e0ba0301c640bd5dad5c846d0b52e4296e00c18d", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a03a9774c1c1ec8e9eac9c0f06cd52868d9fc452/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a03a9774c1c1ec8e9eac9c0f06cd52868d9fc452/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=a03a9774c1c1ec8e9eac9c0f06cd52868d9fc452", "patch": "@@ -972,6 +972,82 @@ vn_reference_fold_indirect (VEC (vn_reference_op_s, heap) **ops,\n     }\n }\n \n+/* Fold *& at position *I_P in a vn_reference_op_s vector *OPS.  Updates\n+   *I_P to point to the last element of the replacement.  */\n+static void\n+vn_reference_maybe_forwprop_address (VEC (vn_reference_op_s, heap) **ops,\n+\t\t\t\t     unsigned int *i_p)\n+{\n+  unsigned int i = *i_p;\n+  vn_reference_op_t op = VEC_index (vn_reference_op_s, *ops, i);\n+  vn_reference_op_t mem_op = VEC_index (vn_reference_op_s, *ops, i - 1);\n+  gimple def_stmt;\n+  enum tree_code code;\n+  double_int off;\n+\n+  def_stmt = SSA_NAME_DEF_STMT (op->op0);\n+  if (!gimple_assign_single_p (def_stmt))\n+    return;\n+\n+  code = gimple_assign_rhs_code (def_stmt);\n+  if (code != ADDR_EXPR\n+      && code != POINTER_PLUS_EXPR)\n+    return;\n+\n+  off = tree_to_double_int (mem_op->op0);\n+  off = double_int_sext (off, TYPE_PRECISION (TREE_TYPE (mem_op->op0)));\n+\n+  /* The only thing we have to do is from &OBJ.foo.bar add the offset\n+     from .foo.bar to the preceeding MEM_REF offset and replace the\n+     address with &OBJ.  */\n+  if (code == ADDR_EXPR)\n+    {\n+      tree addr, addr_base;\n+      HOST_WIDE_INT addr_offset;\n+\n+      addr = gimple_assign_rhs1 (def_stmt);\n+      addr_base = get_addr_base_and_unit_offset (TREE_OPERAND (addr, 0),\n+\t\t\t\t\t\t &addr_offset);\n+      if (!addr_base\n+\t  || TREE_CODE (addr_base) != MEM_REF)\n+\treturn;\n+\n+      off = double_int_add (off, shwi_to_double_int (addr_offset));\n+      off = double_int_add (off, mem_ref_offset (addr_base));\n+      op->op0 = TREE_OPERAND (addr_base, 0);\n+    }\n+  else\n+    {\n+      tree ptr, ptroff;\n+      ptr = gimple_assign_rhs1 (def_stmt);\n+      ptroff = gimple_assign_rhs2 (def_stmt);\n+      if (TREE_CODE (ptr) != SSA_NAME\n+\t  || TREE_CODE (ptroff) != INTEGER_CST)\n+\treturn;\n+\n+      off = double_int_add (off, tree_to_double_int (ptroff));\n+      op->op0 = TREE_OPERAND (ptr, 0);\n+    }\n+\n+  mem_op->op0 = double_int_to_tree (TREE_TYPE (mem_op->op0), off);\n+  if (host_integerp (mem_op->op0, 0))\n+    mem_op->off = TREE_INT_CST_LOW (mem_op->op0);\n+  else\n+    mem_op->off = -1;\n+  if (TREE_CODE (op->op0) == SSA_NAME)\n+    {\n+      op->op0 = SSA_VAL (op->op0);\n+      if (TREE_CODE (op->op0) != SSA_NAME)\n+\top->opcode = TREE_CODE (op->op0);\n+    }\n+\n+  /* And recurse.  */\n+  if (TREE_CODE (op->op0) == SSA_NAME)\n+    vn_reference_maybe_forwprop_address (ops, i_p);\n+  else if (TREE_CODE (op->op0) == ADDR_EXPR)\n+    vn_reference_fold_indirect (ops, i_p);\n+}\n+\n /* Optimize the reference REF to a constant if possible or return\n    NULL_TREE if not.  */\n \n@@ -1075,6 +1151,11 @@ valueize_refs (VEC (vn_reference_op_s, heap) *orig)\n \t  && VEC_index (vn_reference_op_s,\n \t\t\torig, i - 1)->opcode == MEM_REF)\n \tvn_reference_fold_indirect (&orig, &i);\n+      else if (i > 0\n+\t       && vro->opcode == SSA_NAME\n+\t       && VEC_index (vn_reference_op_s,\n+\t\t\t     orig, i - 1)->opcode == MEM_REF)\n+\tvn_reference_maybe_forwprop_address (&orig, &i);\n       /* If it transforms a non-constant ARRAY_REF into a constant\n \t one, adjust the constant offset.  */\n       else if (vro->opcode == ARRAY_REF"}]}