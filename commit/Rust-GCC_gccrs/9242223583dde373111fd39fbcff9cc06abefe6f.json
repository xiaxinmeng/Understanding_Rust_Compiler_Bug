{"sha": "9242223583dde373111fd39fbcff9cc06abefe6f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTI0MjIyMzU4M2RkZTM3MzExMWZkMzlmYmNmZjljYzA2YWJlZmU2Zg==", "commit": {"author": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2016-01-26T15:17:00Z"}, "committer": {"name": "Christophe Lyon", "email": "clyon@gcc.gnu.org", "date": "2016-01-26T15:17:00Z"}, "message": "re PR target/68620 (ICE on gcc.target/arm/attr-neon-fp16.c)\n\n2016-01-26  Christophe Lyon  <christophe.lyon@linaro.org>\n\n\tgcc/\n\tPR target/68620\n\t* config/arm/arm.c (neon_valid_immediate): Handle FP16 vectors.\n\t* config/arm/arm_neon.h (__ARM_NUM_LANES, __arm_lane, arm_lanq):\n\tNew helper macros.\n\t(vget_lane_f16): Handle big-endian.\n\t(vgetq_lane_f16): Likewise.\n\t(vset_lane_f16): Likewise.\n\t(vsetq_lane_f16): Likewise.\n\t* config/arm/iterators.md (VQXMOV): Add V8HF.\n\t(VDQ): Add V4HF and V8HF.\n\t(V_reg): Handle V4HF and V8HF.\n\t(Is_float_mode): Likewise.\n\t* config/arm/neon.md (movv4hf, movv8hf, neon_vdup_nv4hf,\n\tneon_vdup_nv8hf): New patterns.\n\t(vec_set<mode>_internal, vec_extract<mode>, neon_vld1_dup<mode>):\n\tUse VD_LANE iterator.\n\t(neon_vld1_dup<mode>): Use VQ2 iterator.\n\n\ttestsuite/\n\tPR target/68620\n\t* gcc.target/arm/pr68620.c: New test.\n\nFrom-SVN: r232832", "tree": {"sha": "61dd7efa0aae0cd608fe8a59bc94c042efb4bf12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/61dd7efa0aae0cd608fe8a59bc94c042efb4bf12"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9242223583dde373111fd39fbcff9cc06abefe6f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9242223583dde373111fd39fbcff9cc06abefe6f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9242223583dde373111fd39fbcff9cc06abefe6f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9242223583dde373111fd39fbcff9cc06abefe6f/comments", "author": null, "committer": null, "parents": [{"sha": "0bccf11b4db8feb26c176a8754e03c896c929f70", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bccf11b4db8feb26c176a8754e03c896c929f70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0bccf11b4db8feb26c176a8754e03c896c929f70"}], "stats": {"total": 183, "additions": 142, "deletions": 41}, "files": [{"sha": "a8f68e7e0b210675e68056ff1039be3834eacd29", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9242223583dde373111fd39fbcff9cc06abefe6f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9242223583dde373111fd39fbcff9cc06abefe6f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9242223583dde373111fd39fbcff9cc06abefe6f", "patch": "@@ -1,3 +1,23 @@\n+2016-01-26  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\tPR target/68620\n+\t* config/arm/arm.c (neon_valid_immediate): Handle FP16 vectors.\n+\t* config/arm/arm_neon.h (__ARM_NUM_LANES, __arm_lane, arm_lanq):\n+\tNew helper macros.\n+\t(vget_lane_f16): Handle big-endian.\n+\t(vgetq_lane_f16): Likewise.\n+\t(vset_lane_f16): Likewise.\n+\t(vsetq_lane_f16): Likewise.\n+\t* config/arm/iterators.md (VQXMOV): Add V8HF.\n+\t(VDQ): Add V4HF and V8HF.\n+\t(V_reg): Handle V4HF and V8HF.\n+\t(Is_float_mode): Likewise.\n+\t* config/arm/neon.md (movv4hf, movv8hf, neon_vdup_nv4hf,\n+\tneon_vdup_nv8hf): New patterns.\n+\t(vec_set<mode>_internal, vec_extract<mode>, neon_vld1_dup<mode>):\n+\tUse VD_LANE iterator.\n+\t(neon_vld1_dup<mode>): Use VQ2 iterator.\n+\n 2016-01-26  Nathan Sidwell  <nathan@acm.org>\n \n \t* omp-low.h (oacc_fn_attrib_kernels_p): Declare."}, {"sha": "9b03b05beeea58733551208b663e6803e45c8697", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9242223583dde373111fd39fbcff9cc06abefe6f/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9242223583dde373111fd39fbcff9cc06abefe6f/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=9242223583dde373111fd39fbcff9cc06abefe6f", "patch": "@@ -12381,6 +12381,10 @@ neon_valid_immediate (rtx op, machine_mode mode, int inverse,\n       if (!vfp3_const_double_rtx (el0) && el0 != CONST0_RTX (GET_MODE (el0)))\n         return -1;\n \n+      /* FP16 vectors cannot be represented.  */\n+      if (GET_MODE_INNER (mode) == HFmode)\n+\treturn -1;\n+\n       r0 = CONST_DOUBLE_REAL_VALUE (el0);\n \n       for (i = 1; i < n_elts; i++)"}, {"sha": "47816d52187b979b92d7592991d29e4cbe8f9357", "filename": "gcc/config/arm/arm_neon.h", "status": "modified", "additions": 42, "deletions": 30, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9242223583dde373111fd39fbcff9cc06abefe6f/gcc%2Fconfig%2Farm%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9242223583dde373111fd39fbcff9cc06abefe6f/gcc%2Fconfig%2Farm%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_neon.h?ref=9242223583dde373111fd39fbcff9cc06abefe6f", "patch": "@@ -5302,14 +5302,26 @@ vget_lane_s32 (int32x2_t __a, const int __b)\n    were marked always-inline so there were no call sites, the declaration\n    would nonetheless raise an error.  Hence, we must use a macro instead.  */\n \n-#define vget_lane_f16(__v, __idx)\t\t\\\n-  __extension__\t\t\t\t\t\\\n-    ({\t\t\t\t\t\t\\\n-      float16x4_t __vec = (__v);\t\t\\\n-      __builtin_arm_lane_check (4, __idx);\t\\\n-      float16_t __res = __vec[__idx];\t\t\\\n-      __res;\t\t\t\t\t\\\n-    })\n+  /* For big-endian, GCC's vector indices are reversed within each 64\n+     bits compared to the architectural lane indices used by Neon\n+     intrinsics.  */\n+#ifdef __ARM_BIG_ENDIAN\n+#define __ARM_NUM_LANES(__v) (sizeof (__v) / sizeof (__v[0]))\n+#define __arm_lane(__vec, __idx) (__idx ^ (__ARM_NUM_LANES(__vec) - 1))\n+#define __arm_laneq(__vec, __idx) (__idx ^ (__ARM_NUM_LANES(__vec)/2 - 1))\n+#else\n+#define __arm_lane(__vec, __idx) __idx\n+#define __arm_laneq(__vec, __idx) __idx\n+#endif\n+\n+#define vget_lane_f16(__v, __idx)\t\t\t\\\n+  __extension__\t\t\t\t\t\t\\\n+  ({\t\t\t\t\t\t\t\\\n+    float16x4_t __vec = (__v);\t\t\t\t\\\n+    __builtin_arm_lane_check (4, __idx);\t\t\\\n+    float16_t __res = __vec[__arm_lane(__vec, __idx)];\t\\\n+    __res;\t\t\t\t\t\t\\\n+  })\n #endif\n \n __extension__ static __inline float32_t __attribute__ ((__always_inline__))\n@@ -5379,14 +5391,14 @@ vgetq_lane_s32 (int32x4_t __a, const int __b)\n }\n \n #if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n-#define vgetq_lane_f16(__v, __idx)\t\t\\\n-  __extension__\t\t\t\t\t\\\n-    ({\t\t\t\t\t\t\\\n-      float16x8_t __vec = (__v);\t\t\\\n-      __builtin_arm_lane_check (8, __idx);\t\\\n-      float16_t __res = __vec[__idx];\t\t\\\n-      __res;\t\t\t\t\t\\\n-    })\n+#define vgetq_lane_f16(__v, __idx)\t\t\t\\\n+  __extension__\t\t\t\t\t\t\\\n+  ({\t\t\t\t\t\t\t\\\n+    float16x8_t __vec = (__v);\t\t\t\t\\\n+    __builtin_arm_lane_check (8, __idx);\t\t\\\n+    float16_t __res = __vec[__arm_laneq(__vec, __idx)];\t\\\n+    __res;\t\t\t\t\t\t\\\n+  })\n #endif\n \n __extension__ static __inline float32_t __attribute__ ((__always_inline__))\n@@ -5458,13 +5470,13 @@ vset_lane_s32 (int32_t __a, int32x2_t __b, const int __c)\n #if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n #define vset_lane_f16(__e, __v, __idx)\t\t\\\n   __extension__\t\t\t\t\t\\\n-    ({\t\t\t\t\t\t\\\n-      float16_t __elem = (__e);\t\t\t\\\n-      float16x4_t __vec = (__v);\t\t\\\n-      __builtin_arm_lane_check (4, __idx);\t\\\n-      __vec[__idx] = __elem;\t\t\t\\\n-      __vec;\t\t\t\t\t\\\n-    })\n+  ({\t\t\t\t\t\t\\\n+    float16_t __elem = (__e);\t\t\t\\\n+    float16x4_t __vec = (__v);\t\t\t\\\n+    __builtin_arm_lane_check (4, __idx);\t\\\n+    __vec[__arm_lane (__vec, __idx)] = __elem;\t\\\n+    __vec;\t\t\t\t\t\\\n+  })\n #endif\n \n __extension__ static __inline float32x2_t __attribute__ ((__always_inline__))\n@@ -5536,13 +5548,13 @@ vsetq_lane_s32 (int32_t __a, int32x4_t __b, const int __c)\n #if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n #define vsetq_lane_f16(__e, __v, __idx)\t\t\\\n   __extension__\t\t\t\t\t\\\n-    ({\t\t\t\t\t\t\\\n-      float16_t __elem = (__e);\t\t\t\\\n-      float16x8_t __vec = (__v);\t\t\\\n-      __builtin_arm_lane_check (8, __idx);\t\\\n-      __vec[__idx] = __elem;\t\t\t\\\n-      __vec;\t\t\t\t\t\\\n-    })\n+  ({\t\t\t\t\t\t\\\n+    float16_t __elem = (__e);\t\t\t\\\n+    float16x8_t __vec = (__v);\t\t\t\\\n+    __builtin_arm_lane_check (8, __idx);\t\\\n+    __vec[__arm_laneq (__vec, __idx)] = __elem;\t\\\n+    __vec;\t\t\t\t\t\\\n+  })\n #endif\n \n __extension__ static __inline float32x4_t __attribute__ ((__always_inline__))"}, {"sha": "aba1023cdd0d9feb5396222a27c1897ca844937e", "filename": "gcc/config/arm/iterators.md", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9242223583dde373111fd39fbcff9cc06abefe6f/gcc%2Fconfig%2Farm%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9242223583dde373111fd39fbcff9cc06abefe6f/gcc%2Fconfig%2Farm%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fiterators.md?ref=9242223583dde373111fd39fbcff9cc06abefe6f", "patch": "@@ -99,7 +99,7 @@\n (define_mode_iterator VQI [V16QI V8HI V4SI])\n \n ;; Quad-width vector modes, with TImode added, for moves.\n-(define_mode_iterator VQXMOV [V16QI V8HI V4SI V4SF V2DI TI])\n+(define_mode_iterator VQXMOV [V16QI V8HI V8HF V4SI V4SF V2DI TI])\n \n ;; Opaque structure types wider than TImode.\n (define_mode_iterator VSTRUCT [EI OI CI XI])\n@@ -114,7 +114,7 @@\n (define_mode_iterator VN [V8HI V4SI V2DI])\n \n ;; All supported vector modes (except singleton DImode).\n-(define_mode_iterator VDQ [V8QI V16QI V4HI V8HI V2SI V4SI V2SF V4SF V2DI])\n+(define_mode_iterator VDQ [V8QI V16QI V4HI V8HI V2SI V4SI V4HF V8HF V2SF V4SF V2DI])\n \n ;; All supported vector modes (except those with 64-bit integer elements).\n (define_mode_iterator VDQW [V8QI V16QI V4HI V8HI V2SI V4SI V2SF V4SF])\n@@ -428,6 +428,7 @@\n ;; Register width from element mode\n (define_mode_attr V_reg [(V8QI \"P\") (V16QI \"q\")\n                          (V4HI \"P\") (V8HI  \"q\")\n+                         (V4HF \"P\") (V8HF  \"q\")\n                          (V2SI \"P\") (V4SI  \"q\")\n                          (V2SF \"P\") (V4SF  \"q\")\n                          (DI   \"P\") (V2DI  \"q\")\n@@ -576,6 +577,7 @@\n (define_mode_attr Is_float_mode [(V8QI \"false\") (V16QI \"false\")\n                  (V4HI \"false\") (V8HI \"false\")\n                  (V2SI \"false\") (V4SI \"false\")\n+                 (V4HF \"true\") (V8HF \"true\")\n                  (V2SF \"true\") (V4SF \"true\")\n                  (DI \"false\") (V2DI \"false\")])\n "}, {"sha": "55b61eb362c8f0ed4621574a2ccb1b80abfb860d", "filename": "gcc/config/arm/neon.md", "status": "modified", "additions": 55, "deletions": 9, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9242223583dde373111fd39fbcff9cc06abefe6f/gcc%2Fconfig%2Farm%2Fneon.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9242223583dde373111fd39fbcff9cc06abefe6f/gcc%2Fconfig%2Farm%2Fneon.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fneon.md?ref=9242223583dde373111fd39fbcff9cc06abefe6f", "patch": "@@ -137,6 +137,36 @@\n     }\n })\n \n+(define_expand \"movv4hf\"\n+  [(set (match_operand:V4HF 0 \"s_register_operand\")\n+\t(match_operand:V4HF 1 \"s_register_operand\"))]\n+  \"TARGET_NEON && TARGET_FP16\"\n+{\n+  /* We need to use force_reg to avoid CANNOT_CHANGE_MODE_CLASS\n+     causing an ICE on big-endian because it cannot extract subregs in\n+     this case.  */\n+  if (can_create_pseudo_p ())\n+    {\n+      if (!REG_P (operands[0]))\n+\toperands[1] = force_reg (V4HFmode, operands[1]);\n+    }\n+})\n+\n+(define_expand \"movv8hf\"\n+  [(set (match_operand:V8HF 0 \"\")\n+\t(match_operand:V8HF 1 \"\"))]\n+  \"TARGET_NEON && TARGET_FP16\"\n+{ \n+  /* We need to use force_reg to avoid CANNOT_CHANGE_MODE_CLASS\n+     causing an ICE on big-endian because it cannot extract subregs in\n+     this case.  */\n+  if (can_create_pseudo_p ())\n+    {\n+      if (!REG_P (operands[0]))\n+\toperands[1] = force_reg (V8HFmode, operands[1]);\n+    }\n+})\n+\n (define_insn \"*neon_mov<mode>\"\n   [(set (match_operand:VSTRUCT 0 \"nonimmediate_operand\"\t\"=w,Ut,w\")\n \t(match_operand:VSTRUCT 1 \"general_operand\"\t\" w,w, Ut\"))]\n@@ -299,11 +329,11 @@\n   [(set_attr \"type\" \"neon_load1_1reg<q>\")])\n \n (define_insn \"vec_set<mode>_internal\"\n-  [(set (match_operand:VD 0 \"s_register_operand\" \"=w,w\")\n-        (vec_merge:VD\n-          (vec_duplicate:VD\n+  [(set (match_operand:VD_LANE 0 \"s_register_operand\" \"=w,w\")\n+        (vec_merge:VD_LANE\n+          (vec_duplicate:VD_LANE\n             (match_operand:<V_elem> 1 \"nonimmediate_operand\" \"Um,r\"))\n-          (match_operand:VD 3 \"s_register_operand\" \"0,0\")\n+          (match_operand:VD_LANE 3 \"s_register_operand\" \"0,0\")\n           (match_operand:SI 2 \"immediate_operand\" \"i,i\")))]\n   \"TARGET_NEON\"\n {\n@@ -385,7 +415,7 @@\n (define_insn \"vec_extract<mode>\"\n   [(set (match_operand:<V_elem> 0 \"nonimmediate_operand\" \"=Um,r\")\n         (vec_select:<V_elem>\n-          (match_operand:VD 1 \"s_register_operand\" \"w,w\")\n+          (match_operand:VD_LANE 1 \"s_register_operand\" \"w,w\")\n           (parallel [(match_operand:SI 2 \"immediate_operand\" \"i,i\")])))]\n   \"TARGET_NEON\"\n {\n@@ -2829,6 +2859,22 @@ if (BYTES_BIG_ENDIAN)\n   [(set_attr \"type\" \"neon_from_gp<q>\")]\n )\n \n+(define_insn \"neon_vdup_nv4hf\"\n+  [(set (match_operand:V4HF 0 \"s_register_operand\" \"=w\")\n+        (vec_duplicate:V4HF (match_operand:HF 1 \"s_register_operand\" \"r\")))]\n+  \"TARGET_NEON\"\n+  \"vdup.16\\t%P0, %1\"\n+  [(set_attr \"type\" \"neon_from_gp\")]\n+)\n+\n+(define_insn \"neon_vdup_nv8hf\"\n+  [(set (match_operand:V8HF 0 \"s_register_operand\" \"=w\")\n+        (vec_duplicate:V8HF (match_operand:HF 1 \"s_register_operand\" \"r\")))]\n+  \"TARGET_NEON\"\n+  \"vdup.16\\t%q0, %1\"\n+  [(set_attr \"type\" \"neon_from_gp_q\")]\n+)\n+\n (define_insn \"neon_vdup_n<mode>\"\n   [(set (match_operand:V32 0 \"s_register_operand\" \"=w,w\")\n         (vec_duplicate:V32 (match_operand:<V_elem> 1 \"s_register_operand\" \"r,t\")))]\n@@ -4361,8 +4407,8 @@ if (BYTES_BIG_ENDIAN)\n )\n \n (define_insn \"neon_vld1_dup<mode>\"\n-  [(set (match_operand:VD 0 \"s_register_operand\" \"=w\")\n-        (vec_duplicate:VD (match_operand:<V_elem> 1 \"neon_struct_operand\" \"Um\")))]\n+  [(set (match_operand:VD_LANE 0 \"s_register_operand\" \"=w\")\n+        (vec_duplicate:VD_LANE (match_operand:<V_elem> 1 \"neon_struct_operand\" \"Um\")))]\n   \"TARGET_NEON\"\n   \"vld1.<V_sz_elem>\\t{%P0[]}, %A1\"\n   [(set_attr \"type\" \"neon_load1_all_lanes<q>\")]\n@@ -4378,8 +4424,8 @@ if (BYTES_BIG_ENDIAN)\n )\n \n (define_insn \"neon_vld1_dup<mode>\"\n-  [(set (match_operand:VQ 0 \"s_register_operand\" \"=w\")\n-        (vec_duplicate:VQ (match_operand:<V_elem> 1 \"neon_struct_operand\" \"Um\")))]\n+  [(set (match_operand:VQ2 0 \"s_register_operand\" \"=w\")\n+        (vec_duplicate:VQ2 (match_operand:<V_elem> 1 \"neon_struct_operand\" \"Um\")))]\n   \"TARGET_NEON\"\n {\n   return \"vld1.<V_sz_elem>\\t{%e0[], %f0[]}, %A1\";"}, {"sha": "033faa372b609b39c50021fee90440bef6a5d1dc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9242223583dde373111fd39fbcff9cc06abefe6f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9242223583dde373111fd39fbcff9cc06abefe6f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9242223583dde373111fd39fbcff9cc06abefe6f", "patch": "@@ -1,3 +1,8 @@\n+2016-01-26  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\tPR target/68620\n+\t* gcc.target/arm/pr68620.c: New test.\n+\n 2016-01-26  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* gcc.target/i386/pr68986-2.c: Remove -m32."}, {"sha": "984992f2ab06969969f5e7699d7af7fed356705a", "filename": "gcc/testsuite/gcc.target/arm/pr68620.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9242223583dde373111fd39fbcff9cc06abefe6f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr68620.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9242223583dde373111fd39fbcff9cc06abefe6f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr68620.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr68620.c?ref=9242223583dde373111fd39fbcff9cc06abefe6f", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm_fp_ok } */\n+/* { dg-options \"-mfp16-format=ieee\" } */\n+/* { dg-add-options arm_fp } */\n+\n+#include \"arm_neon.h\"\n+\n+float16x4_t __attribute__((target(\"fpu=neon-fp16\")))\n+foo (float32x4_t arg)\n+{\n+    return vcvt_f16_f32 (arg);\n+}"}]}