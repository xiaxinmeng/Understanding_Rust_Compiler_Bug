{"sha": "95fbe13e99744b36691495fd81934ccee963c0a3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTVmYmUxM2U5OTc0NGIzNjY5MTQ5NWZkODE5MzRjY2VlOTYzYzBhMw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2015-06-25T17:06:24Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2015-06-25T17:06:24Z"}, "message": "hash-traits.h (free_ptr_hash): New class.\n\ngcc/\n\t* hash-traits.h (free_ptr_hash): New class.\n\t* dwarf2out.c (decl_table_entry_hasher): Inherit from free_ptr_hash\n\trather than typed_free_remove.  Remove redudant typedefs.\n\t(external_ref_hasher): Likewise.\n\t* except.c (action_record_hasher, ttypes_filter_hasher): Likewise.\n\t(ehspec_hasher): Likewise.\n\t* ggc-common.c (saving_hasher): Likewise.\n\t* gimplify.c (gimplify_hasher): Likewise.\n\t* haifa-sched.c (delay_i2_hasher): Likewise.\n\t* loop-invariant.c (invariant_expr_hasher): Likewise.\n\t* loop-iv.c (biv_entry_hasher): Likewise.\n\t* loop-unroll.c (iv_split_hasher, var_expand_hasher): Likewise.\n\t* trans-mem.c (tm_mem_map_hasher, tm_memop_hasher): Likewise.\n\t* tree-cfg.c (locus_discrim_hasher): Likewise.\n\t* tree-eh.c (finally_tree_hasher): Likewise.\n\t* tree-into-ssa.c (var_info_hasher): Likewise.\n\t* tree-parloops.c (reduction_hasher, name_to_copy_hasher): Likewise.\n\t* tree-ssa-loop-ivopts.c (iv_inv_expr_hasher): Likewise.\n\t* tree-ssa-phiopt.c (ssa_names_hasher): Likewise.\n\t* tree-ssa-pre.c (expr_pred_trans_d): Likewise.\n\t* tree-ssa-sccvn.c (vn_constant_hasher): Likewise.\n\t* tree-ssa-structalias.c (equiv_class_hasher): Likewise.\n\t(shared_bitmap_hasher): Likewise.\n\t* tree-ssa-threadupdate.c (redirection_data): Likewise.\n\t* tree-vectorizer.h (peel_info_hasher): Likewise.\n\t* tree-vectorizer.c (simduid_to_vf, simd_array_to_simduid): Likewise.\n\t* config/mips/mips.c (mips_lo_sum_offset_hasher): Likewise.\n\nlibcc1/\n\t* plugin.cc (decl_addr_hasher): Inherit from free_ptr_hash\n\trather than typed_free_remove.  Remove redudant typedefs.\n\nFrom-SVN: r224958", "tree": {"sha": "58d174cfbabc3960fc80489c30c5371b65ae2a61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/58d174cfbabc3960fc80489c30c5371b65ae2a61"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/95fbe13e99744b36691495fd81934ccee963c0a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95fbe13e99744b36691495fd81934ccee963c0a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95fbe13e99744b36691495fd81934ccee963c0a3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95fbe13e99744b36691495fd81934ccee963c0a3/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8d67ee553dc97016a8248b95bfced8f7f5d06663", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d67ee553dc97016a8248b95bfced8f7f5d06663", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d67ee553dc97016a8248b95bfced8f7f5d06663"}], "stats": {"total": 160, "additions": 72, "deletions": 88}, "files": [{"sha": "b3d064e24e16411a50ca85f85eac131a4ad4d54e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95fbe13e99744b36691495fd81934ccee963c0a3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95fbe13e99744b36691495fd81934ccee963c0a3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=95fbe13e99744b36691495fd81934ccee963c0a3", "patch": "@@ -1,3 +1,33 @@\n+2015-06-25  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* hash-traits.h (free_ptr_hash): New class.\n+\t* dwarf2out.c (decl_table_entry_hasher): Inherit from free_ptr_hash\n+\trather than typed_free_remove.  Remove redudant typedefs.\n+\t(external_ref_hasher): Likewise.\n+\t* except.c (action_record_hasher, ttypes_filter_hasher): Likewise.\n+\t(ehspec_hasher): Likewise.\n+\t* ggc-common.c (saving_hasher): Likewise.\n+\t* gimplify.c (gimplify_hasher): Likewise.\n+\t* haifa-sched.c (delay_i2_hasher): Likewise.\n+\t* loop-invariant.c (invariant_expr_hasher): Likewise.\n+\t* loop-iv.c (biv_entry_hasher): Likewise.\n+\t* loop-unroll.c (iv_split_hasher, var_expand_hasher): Likewise.\n+\t* trans-mem.c (tm_mem_map_hasher, tm_memop_hasher): Likewise.\n+\t* tree-cfg.c (locus_discrim_hasher): Likewise.\n+\t* tree-eh.c (finally_tree_hasher): Likewise.\n+\t* tree-into-ssa.c (var_info_hasher): Likewise.\n+\t* tree-parloops.c (reduction_hasher, name_to_copy_hasher): Likewise.\n+\t* tree-ssa-loop-ivopts.c (iv_inv_expr_hasher): Likewise.\n+\t* tree-ssa-phiopt.c (ssa_names_hasher): Likewise.\n+\t* tree-ssa-pre.c (expr_pred_trans_d): Likewise.\n+\t* tree-ssa-sccvn.c (vn_constant_hasher): Likewise.\n+\t* tree-ssa-structalias.c (equiv_class_hasher): Likewise.\n+\t(shared_bitmap_hasher): Likewise.\n+\t* tree-ssa-threadupdate.c (redirection_data): Likewise.\n+\t* tree-vectorizer.h (peel_info_hasher): Likewise.\n+\t* tree-vectorizer.c (simduid_to_vf, simd_array_to_simduid): Likewise.\n+\t* config/mips/mips.c (mips_lo_sum_offset_hasher): Likewise.\n+\n 2015-06-25  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* hash-table.h: Update comments."}, {"sha": "3e0adf00c5088838f665f170221c849979691e5a", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95fbe13e99744b36691495fd81934ccee963c0a3/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95fbe13e99744b36691495fd81934ccee963c0a3/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=95fbe13e99744b36691495fd81934ccee963c0a3", "patch": "@@ -16346,9 +16346,8 @@ mips_hash_base (rtx base)\n \n /* Hashtable helpers.  */\n \n-struct mips_lo_sum_offset_hasher : typed_free_remove <mips_lo_sum_offset>\n+struct mips_lo_sum_offset_hasher : free_ptr_hash <mips_lo_sum_offset>\n {\n-  typedef mips_lo_sum_offset *value_type;\n   typedef rtx_def *compare_type;\n   static inline hashval_t hash (const mips_lo_sum_offset *);\n   static inline bool equal (const mips_lo_sum_offset *, const rtx_def *);"}, {"sha": "4b89d3e667d93de4148f307070c8957f2065a1fb", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95fbe13e99744b36691495fd81934ccee963c0a3/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95fbe13e99744b36691495fd81934ccee963c0a3/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=95fbe13e99744b36691495fd81934ccee963c0a3", "patch": "@@ -7294,9 +7294,8 @@ struct decl_table_entry\n \n /* Hashtable helpers.  */\n \n-struct decl_table_entry_hasher : typed_free_remove <decl_table_entry>\n+struct decl_table_entry_hasher : free_ptr_hash <decl_table_entry>\n {\n-  typedef decl_table_entry *value_type;\n   typedef die_struct *compare_type;\n   static inline hashval_t hash (const decl_table_entry *);\n   static inline bool equal (const decl_table_entry *, const die_struct *);\n@@ -7836,10 +7835,8 @@ struct external_ref\n \n /* Hashtable helpers.  */\n \n-struct external_ref_hasher : typed_free_remove <external_ref>\n+struct external_ref_hasher : free_ptr_hash <external_ref>\n {\n-  typedef external_ref *value_type;\n-  typedef external_ref *compare_type;\n   static inline hashval_t hash (const external_ref *);\n   static inline bool equal (const external_ref *, const external_ref *);\n };"}, {"sha": "ce1e31f0645b08a18b9779c85d745ac6cfed671c", "filename": "gcc/except.c", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95fbe13e99744b36691495fd81934ccee963c0a3/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95fbe13e99744b36691495fd81934ccee963c0a3/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=95fbe13e99744b36691495fd81934ccee963c0a3", "patch": "@@ -205,10 +205,8 @@ struct action_record\n \n /* Hashtable helpers.  */\n \n-struct action_record_hasher : typed_free_remove <action_record>\n+struct action_record_hasher : free_ptr_hash <action_record>\n {\n-  typedef action_record *value_type;\n-  typedef action_record *compare_type;\n   static inline hashval_t hash (const action_record *);\n   static inline bool equal (const action_record *, const action_record *);\n };\n@@ -721,9 +719,8 @@ struct ttypes_filter {\n \n /* Helper for ttypes_filter hashing.  */\n \n-struct ttypes_filter_hasher : typed_free_remove <ttypes_filter>\n+struct ttypes_filter_hasher : free_ptr_hash <ttypes_filter>\n {\n-  typedef ttypes_filter *value_type;\n   typedef tree_node *compare_type;\n   static inline hashval_t hash (const ttypes_filter *);\n   static inline bool equal (const ttypes_filter *, const tree_node *);\n@@ -749,10 +746,8 @@ typedef hash_table<ttypes_filter_hasher> ttypes_hash_type;\n \n /* Helper for ehspec hashing.  */\n \n-struct ehspec_hasher : typed_free_remove <ttypes_filter>\n+struct ehspec_hasher : free_ptr_hash <ttypes_filter>\n {\n-  typedef ttypes_filter *value_type;\n-  typedef ttypes_filter *compare_type;\n   static inline hashval_t hash (const ttypes_filter *);\n   static inline bool equal (const ttypes_filter *, const ttypes_filter *);\n };"}, {"sha": "5096837df272defb2a10b721e9186853eb6e87a4", "filename": "gcc/ggc-common.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95fbe13e99744b36691495fd81934ccee963c0a3/gcc%2Fggc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95fbe13e99744b36691495fd81934ccee963c0a3/gcc%2Fggc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-common.c?ref=95fbe13e99744b36691495fd81934ccee963c0a3", "patch": "@@ -237,9 +237,8 @@ struct ptr_data\n \n /* Helper for hashing saving_htab.  */\n \n-struct saving_hasher : typed_free_remove <ptr_data>\n+struct saving_hasher : free_ptr_hash <ptr_data>\n {\n-  typedef ptr_data *value_type;\n   typedef void *compare_type;\n   static inline hashval_t hash (const ptr_data *);\n   static inline bool equal (const ptr_data *, const void *);"}, {"sha": "5f4936c32501147c8f9ce48f7517e5819c324cc6", "filename": "gcc/gimplify.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95fbe13e99744b36691495fd81934ccee963c0a3/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95fbe13e99744b36691495fd81934ccee963c0a3/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=95fbe13e99744b36691495fd81934ccee963c0a3", "patch": "@@ -126,10 +126,8 @@ enum omp_region_type\n \n /* Gimplify hashtable helper.  */\n \n-struct gimplify_hasher : typed_free_remove <elt_t>\n+struct gimplify_hasher : free_ptr_hash <elt_t>\n {\n-  typedef elt_t *value_type;\n-  typedef elt_t *compare_type;\n   static inline hashval_t hash (const elt_t *);\n   static inline bool equal (const elt_t *, const elt_t *);\n };"}, {"sha": "fd6e3e929e65a6c0a5bafa369f1362abe3758950", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95fbe13e99744b36691495fd81934ccee963c0a3/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95fbe13e99744b36691495fd81934ccee963c0a3/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=95fbe13e99744b36691495fd81934ccee963c0a3", "patch": "@@ -636,9 +636,8 @@ delay_i1_hasher::equal (const delay_pair *x, const void *y)\n   return x->i1 == y;\n }\n \n-struct delay_i2_hasher : typed_free_remove <delay_pair>\n+struct delay_i2_hasher : free_ptr_hash <delay_pair>\n {\n-  typedef delay_pair *value_type;\n   typedef void *compare_type;\n   static inline hashval_t hash (const delay_pair *);\n   static inline bool equal (const delay_pair *, const void *);"}, {"sha": "e4c182eabf2c0f79c645385c0a1e60c86e9300b1", "filename": "gcc/hash-traits.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95fbe13e99744b36691495fd81934ccee963c0a3/gcc%2Fhash-traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95fbe13e99744b36691495fd81934ccee963c0a3/gcc%2Fhash-traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhash-traits.h?ref=95fbe13e99744b36691495fd81934ccee963c0a3", "patch": "@@ -173,4 +173,10 @@ struct ggc_cache_hasher : ggc_hasher<T>\n template <typename T>\n struct nofree_ptr_hash : pointer_hash <T>, typed_noop_remove <T> {};\n \n+/* Traits for pointer elements that should be freed via free() when an\n+   element is deleted.  */\n+\n+template <typename T>\n+struct free_ptr_hash : pointer_hash <T>, typed_free_remove <T> {};\n+\n #endif"}, {"sha": "d3a74399f1b32a02aee702a55daf6818b553fcef", "filename": "gcc/loop-invariant.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95fbe13e99744b36691495fd81934ccee963c0a3/gcc%2Floop-invariant.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95fbe13e99744b36691495fd81934ccee963c0a3/gcc%2Floop-invariant.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-invariant.c?ref=95fbe13e99744b36691495fd81934ccee963c0a3", "patch": "@@ -441,10 +441,8 @@ invariant_expr_equal_p (rtx_insn *insn1, rtx e1, rtx_insn *insn2, rtx e2)\n   return true;\n }\n \n-struct invariant_expr_hasher : typed_free_remove <invariant_expr_entry>\n+struct invariant_expr_hasher : free_ptr_hash <invariant_expr_entry>\n {\n-  typedef invariant_expr_entry *value_type;\n-  typedef invariant_expr_entry *compare_type;\n   static inline hashval_t hash (const invariant_expr_entry *);\n   static inline bool equal (const invariant_expr_entry *,\n \t\t\t    const invariant_expr_entry *);"}, {"sha": "d02d5429715a2ae20ec0dffec7c8203126e85e61", "filename": "gcc/loop-iv.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95fbe13e99744b36691495fd81934ccee963c0a3/gcc%2Floop-iv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95fbe13e99744b36691495fd81934ccee963c0a3/gcc%2Floop-iv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-iv.c?ref=95fbe13e99744b36691495fd81934ccee963c0a3", "patch": "@@ -124,9 +124,8 @@ static struct loop *current_loop;\n \n /* Hashtable helper.  */\n \n-struct biv_entry_hasher : typed_free_remove <biv_entry>\n+struct biv_entry_hasher : free_ptr_hash <biv_entry>\n {\n-  typedef biv_entry *value_type;\n   typedef rtx_def *compare_type;\n   static inline hashval_t hash (const biv_entry *);\n   static inline bool equal (const biv_entry *, const rtx_def *);"}, {"sha": "3fa7fc0ceebd0a60e7bfb095da364ec30c49eedb", "filename": "gcc/loop-unroll.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95fbe13e99744b36691495fd81934ccee963c0a3/gcc%2Floop-unroll.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95fbe13e99744b36691495fd81934ccee963c0a3/gcc%2Floop-unroll.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-unroll.c?ref=95fbe13e99744b36691495fd81934ccee963c0a3", "patch": "@@ -112,10 +112,8 @@ struct var_to_expand\n \n /* Hashtable helper for iv_to_split.  */\n \n-struct iv_split_hasher : typed_free_remove <iv_to_split>\n+struct iv_split_hasher : free_ptr_hash <iv_to_split>\n {\n-  typedef iv_to_split *value_type;\n-  typedef iv_to_split *compare_type;\n   static inline hashval_t hash (const iv_to_split *);\n   static inline bool equal (const iv_to_split *, const iv_to_split *);\n };\n@@ -139,10 +137,8 @@ iv_split_hasher::equal (const iv_to_split *i1, const iv_to_split *i2)\n \n /* Hashtable helper for iv_to_split.  */\n \n-struct var_expand_hasher : typed_free_remove <var_to_expand>\n+struct var_expand_hasher : free_ptr_hash <var_to_expand>\n {\n-  typedef var_to_expand *value_type;\n-  typedef var_to_expand *compare_type;\n   static inline hashval_t hash (const var_to_expand *);\n   static inline bool equal (const var_to_expand *, const var_to_expand *);\n };"}, {"sha": "b3dbcbd795ca4beb0da7e882fafbad7a8e22e608", "filename": "gcc/trans-mem.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95fbe13e99744b36691495fd81934ccee963c0a3/gcc%2Ftrans-mem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95fbe13e99744b36691495fd81934ccee963c0a3/gcc%2Ftrans-mem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftrans-mem.c?ref=95fbe13e99744b36691495fd81934ccee963c0a3", "patch": "@@ -1030,10 +1030,8 @@ typedef struct tm_new_mem_map\n \n /* Hashtable helpers.  */\n \n-struct tm_mem_map_hasher : typed_free_remove <tm_new_mem_map_t>\n+struct tm_mem_map_hasher : free_ptr_hash <tm_new_mem_map_t>\n {\n-  typedef tm_new_mem_map_t *value_type;\n-  typedef tm_new_mem_map_t *compare_type;\n   static inline hashval_t hash (const tm_new_mem_map_t *);\n   static inline bool equal (const tm_new_mem_map_t *, const tm_new_mem_map_t *);\n };\n@@ -3331,10 +3329,8 @@ typedef struct tm_memop\n \n /* TM memory operation hashtable helpers.  */\n \n-struct tm_memop_hasher : typed_free_remove <tm_memop>\n+struct tm_memop_hasher : free_ptr_hash <tm_memop>\n {\n-  typedef tm_memop *value_type;\n-  typedef tm_memop *compare_type;\n   static inline hashval_t hash (const tm_memop *);\n   static inline bool equal (const tm_memop *, const tm_memop *);\n };"}, {"sha": "c16e7baddbdad68ee9994d3f154f8bf6542e413a", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95fbe13e99744b36691495fd81934ccee963c0a3/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95fbe13e99744b36691495fd81934ccee963c0a3/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=95fbe13e99744b36691495fd81934ccee963c0a3", "patch": "@@ -132,10 +132,8 @@ struct locus_discrim_map\n \n /* Hashtable helpers.  */\n \n-struct locus_discrim_hasher : typed_free_remove <locus_discrim_map>\n+struct locus_discrim_hasher : free_ptr_hash <locus_discrim_map>\n {\n-  typedef locus_discrim_map *value_type;\n-  typedef locus_discrim_map *compare_type;\n   static inline hashval_t hash (const locus_discrim_map *);\n   static inline bool equal (const locus_discrim_map *,\n \t\t\t    const locus_discrim_map *);"}, {"sha": "edd43e6a7fdc4426c2f81acc917a3b20f2fe5c19", "filename": "gcc/tree-eh.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95fbe13e99744b36691495fd81934ccee963c0a3/gcc%2Ftree-eh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95fbe13e99744b36691495fd81934ccee963c0a3/gcc%2Ftree-eh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-eh.c?ref=95fbe13e99744b36691495fd81934ccee963c0a3", "patch": "@@ -198,10 +198,8 @@ struct finally_tree_node\n \n /* Hashtable helpers.  */\n \n-struct finally_tree_hasher : typed_free_remove <finally_tree_node>\n+struct finally_tree_hasher : free_ptr_hash <finally_tree_node>\n {\n-  typedef finally_tree_node *value_type;\n-  typedef finally_tree_node *compare_type;\n   static inline hashval_t hash (const finally_tree_node *);\n   static inline bool equal (const finally_tree_node *,\n \t\t\t    const finally_tree_node *);"}, {"sha": "24cca2cf9b1fdaefd5539fa989267c1ae7c1dd37", "filename": "gcc/tree-into-ssa.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95fbe13e99744b36691495fd81934ccee963c0a3/gcc%2Ftree-into-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95fbe13e99744b36691495fd81934ccee963c0a3/gcc%2Ftree-into-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-into-ssa.c?ref=95fbe13e99744b36691495fd81934ccee963c0a3", "patch": "@@ -215,10 +215,8 @@ typedef struct var_info_d *var_info_p;\n \n /* VAR_INFOS hashtable helpers.  */\n \n-struct var_info_hasher : typed_free_remove <var_info_d>\n+struct var_info_hasher : free_ptr_hash <var_info_d>\n {\n-  typedef var_info_d *value_type;\n-  typedef var_info_d *compare_type;\n   static inline hashval_t hash (const value_type &);\n   static inline bool equal (const value_type &, const compare_type &);\n };"}, {"sha": "ac469b39d7a94d2712899c24647080f864ce3e70", "filename": "gcc/tree-parloops.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95fbe13e99744b36691495fd81934ccee963c0a3/gcc%2Ftree-parloops.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95fbe13e99744b36691495fd81934ccee963c0a3/gcc%2Ftree-parloops.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-parloops.c?ref=95fbe13e99744b36691495fd81934ccee963c0a3", "patch": "@@ -218,10 +218,8 @@ struct reduction_info\n \n /* Reduction info hashtable helpers.  */\n \n-struct reduction_hasher : typed_free_remove <reduction_info>\n+struct reduction_hasher : free_ptr_hash <reduction_info>\n {\n-  typedef reduction_info *value_type;\n-  typedef reduction_info *compare_type;\n   static inline hashval_t hash (const reduction_info *);\n   static inline bool equal (const reduction_info *, const reduction_info *);\n };\n@@ -270,10 +268,8 @@ struct name_to_copy_elt\n \n /* Name copies hashtable helpers.  */\n \n-struct name_to_copy_hasher : typed_free_remove <name_to_copy_elt>\n+struct name_to_copy_hasher : free_ptr_hash <name_to_copy_elt>\n {\n-  typedef name_to_copy_elt *value_type;\n-  typedef name_to_copy_elt *compare_type;\n   static inline hashval_t hash (const name_to_copy_elt *);\n   static inline bool equal (const name_to_copy_elt *, const name_to_copy_elt *);\n };"}, {"sha": "8dd92a6ec8caf0eb7ec9b1a8bca00520a27add85", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95fbe13e99744b36691495fd81934ccee963c0a3/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95fbe13e99744b36691495fd81934ccee963c0a3/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=95fbe13e99744b36691495fd81934ccee963c0a3", "patch": "@@ -283,10 +283,8 @@ typedef struct iv_cand *iv_cand_p;\n \n /* Hashtable helpers.  */\n \n-struct iv_inv_expr_hasher : typed_free_remove <iv_inv_expr_ent>\n+struct iv_inv_expr_hasher : free_ptr_hash <iv_inv_expr_ent>\n {\n-  typedef iv_inv_expr_ent *value_type;\n-  typedef iv_inv_expr_ent *compare_type;\n   static inline hashval_t hash (const iv_inv_expr_ent *);\n   static inline bool equal (const iv_inv_expr_ent *, const iv_inv_expr_ent *);\n };"}, {"sha": "92b4ab00fb4d424ac18401d313df1ee53ba9e5ca", "filename": "gcc/tree-ssa-phiopt.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95fbe13e99744b36691495fd81934ccee963c0a3/gcc%2Ftree-ssa-phiopt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95fbe13e99744b36691495fd81934ccee963c0a3/gcc%2Ftree-ssa-phiopt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-phiopt.c?ref=95fbe13e99744b36691495fd81934ccee963c0a3", "patch": "@@ -1309,10 +1309,8 @@ struct name_to_bb\n \n /* Hashtable helpers.  */\n \n-struct ssa_names_hasher : typed_free_remove <name_to_bb>\n+struct ssa_names_hasher : free_ptr_hash <name_to_bb>\n {\n-  typedef name_to_bb *value_type;\n-  typedef name_to_bb *compare_type;\n   static inline hashval_t hash (const name_to_bb *);\n   static inline bool equal (const name_to_bb *, const name_to_bb *);\n };"}, {"sha": "9872a3fa8f3d383cdb26c56536d15ab380d6f846", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95fbe13e99744b36691495fd81934ccee963c0a3/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95fbe13e99744b36691495fd81934ccee963c0a3/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=95fbe13e99744b36691495fd81934ccee963c0a3", "patch": "@@ -515,7 +515,7 @@ static bitmap need_ab_cleanup;\n /* A three tuple {e, pred, v} used to cache phi translations in the\n    phi_translate_table.  */\n \n-typedef struct expr_pred_trans_d : typed_free_remove<expr_pred_trans_d>\n+typedef struct expr_pred_trans_d : free_ptr_hash<expr_pred_trans_d>\n {\n   /* The expression.  */\n   pre_expr e;\n@@ -531,8 +531,6 @@ typedef struct expr_pred_trans_d : typed_free_remove<expr_pred_trans_d>\n   hashval_t hashcode;\n \n   /* hash_table support.  */\n-  typedef expr_pred_trans_d *value_type;\n-  typedef expr_pred_trans_d *compare_type;\n   static inline hashval_t hash (const expr_pred_trans_d *);\n   static inline int equal (const expr_pred_trans_d *, const expr_pred_trans_d *);\n } *expr_pred_trans_t;"}, {"sha": "5f8abd14c380e5621d6e56ac97e51986943a9725", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95fbe13e99744b36691495fd81934ccee963c0a3/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95fbe13e99744b36691495fd81934ccee963c0a3/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=95fbe13e99744b36691495fd81934ccee963c0a3", "patch": "@@ -286,10 +286,8 @@ typedef struct vn_tables_s\n \n /* vn_constant hashtable helpers.  */\n \n-struct vn_constant_hasher : typed_free_remove <vn_constant_s>\n+struct vn_constant_hasher : free_ptr_hash <vn_constant_s>\n { \n-  typedef vn_constant_s *value_type;\n-  typedef vn_constant_s *compare_type;\n   static inline hashval_t hash (const vn_constant_s *);\n   static inline bool equal (const vn_constant_s *, const vn_constant_s *);\n };"}, {"sha": "820dae48a9ded3cd402a2bfab991df3e013674d8", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95fbe13e99744b36691495fd81934ccee963c0a3/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95fbe13e99744b36691495fd81934ccee963c0a3/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=95fbe13e99744b36691495fd81934ccee963c0a3", "patch": "@@ -1925,10 +1925,8 @@ typedef const struct equiv_class_label *const_equiv_class_label_t;\n \n /* Equiv_class_label hashtable helpers.  */\n \n-struct equiv_class_hasher : typed_free_remove <equiv_class_label>\n+struct equiv_class_hasher : free_ptr_hash <equiv_class_label>\n {\n-  typedef equiv_class_label *value_type;\n-  typedef equiv_class_label *compare_type;\n   static inline hashval_t hash (const equiv_class_label *);\n   static inline bool equal (const equiv_class_label *,\n \t\t\t    const equiv_class_label *);\n@@ -5950,10 +5948,8 @@ typedef const struct shared_bitmap_info *const_shared_bitmap_info_t;\n \n /* Shared_bitmap hashtable helpers.  */\n \n-struct shared_bitmap_hasher : typed_free_remove <shared_bitmap_info>\n+struct shared_bitmap_hasher : free_ptr_hash <shared_bitmap_info>\n {\n-  typedef shared_bitmap_info *value_type;\n-  typedef shared_bitmap_info *compare_type;\n   static inline hashval_t hash (const shared_bitmap_info *);\n   static inline bool equal (const shared_bitmap_info *,\n \t\t\t    const shared_bitmap_info *);"}, {"sha": "4b1902210973c580ac75d7a5bbb8e6b2b4a48fd0", "filename": "gcc/tree-ssa-threadupdate.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95fbe13e99744b36691495fd81934ccee963c0a3/gcc%2Ftree-ssa-threadupdate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95fbe13e99744b36691495fd81934ccee963c0a3/gcc%2Ftree-ssa-threadupdate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadupdate.c?ref=95fbe13e99744b36691495fd81934ccee963c0a3", "patch": "@@ -125,7 +125,7 @@ struct el\n    may have many incoming edges threaded to the same outgoing edge.  This\n    can be naturally implemented with a hash table.  */\n \n-struct redirection_data : typed_free_remove<redirection_data>\n+struct redirection_data : free_ptr_hash<redirection_data>\n {\n   /* We support wiring up two block duplicates in a jump threading path.\n \n@@ -150,8 +150,6 @@ struct redirection_data : typed_free_remove<redirection_data>\n   struct el *incoming_edges;\n \n   /* hash_table support.  */\n-  typedef redirection_data *value_type;\n-  typedef redirection_data *compare_type;\n   static inline hashval_t hash (const redirection_data *);\n   static inline int equal (const redirection_data *, const redirection_data *);\n };"}, {"sha": "e69cbfb70e36859a5b0722c3be030c89f7fcbf00", "filename": "gcc/tree-vectorizer.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95fbe13e99744b36691495fd81934ccee963c0a3/gcc%2Ftree-vectorizer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95fbe13e99744b36691495fd81934ccee963c0a3/gcc%2Ftree-vectorizer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.c?ref=95fbe13e99744b36691495fd81934ccee963c0a3", "patch": "@@ -102,14 +102,12 @@ vec<vec_void_p> stmt_vec_info_vec;\n \f\n /* For mapping simduid to vectorization factor.  */\n \n-struct simduid_to_vf : typed_free_remove<simduid_to_vf>\n+struct simduid_to_vf : free_ptr_hash<simduid_to_vf>\n {\n   unsigned int simduid;\n   int vf;\n \n   /* hash_table support.  */\n-  typedef simduid_to_vf *value_type;\n-  typedef simduid_to_vf *compare_type;\n   static inline hashval_t hash (const simduid_to_vf *);\n   static inline int equal (const simduid_to_vf *, const simduid_to_vf *);\n };\n@@ -138,14 +136,12 @@ simduid_to_vf::equal (const simduid_to_vf *p1, const simduid_to_vf *p2)\n    This hash maps from the OMP simd array (D.1737[]) to DECL_UID of\n    simduid.0.  */\n \n-struct simd_array_to_simduid : typed_free_remove<simd_array_to_simduid>\n+struct simd_array_to_simduid : free_ptr_hash<simd_array_to_simduid>\n {\n   tree decl;\n   unsigned int simduid;\n \n   /* hash_table support.  */\n-  typedef simd_array_to_simduid *value_type;\n-  typedef simd_array_to_simduid *compare_type;\n   static inline hashval_t hash (const simd_array_to_simduid *);\n   static inline int equal (const simd_array_to_simduid *,\n \t\t\t   const simd_array_to_simduid *);"}, {"sha": "48c1f8d64b7eac20496b80f1720023ab2ad475d1", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95fbe13e99744b36691495fd81934ccee963c0a3/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95fbe13e99744b36691495fd81934ccee963c0a3/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=95fbe13e99744b36691495fd81934ccee963c0a3", "patch": "@@ -212,10 +212,8 @@ typedef struct _vect_peel_extended_info\n \n /* Peeling hashtable helpers.  */\n \n-struct peel_info_hasher : typed_free_remove <_vect_peel_info>\n+struct peel_info_hasher : free_ptr_hash <_vect_peel_info>\n {\n-  typedef _vect_peel_info *value_type;\n-  typedef _vect_peel_info *compare_type;\n   static inline hashval_t hash (const _vect_peel_info *);\n   static inline bool equal (const _vect_peel_info *, const _vect_peel_info *);\n };"}, {"sha": "2aaceda2dd00f3ed45333f0d15029349c28213b1", "filename": "libcc1/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95fbe13e99744b36691495fd81934ccee963c0a3/libcc1%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95fbe13e99744b36691495fd81934ccee963c0a3/libcc1%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcc1%2FChangeLog?ref=95fbe13e99744b36691495fd81934ccee963c0a3", "patch": "@@ -1,3 +1,8 @@\n+2015-06-25  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* plugin.cc (decl_addr_hasher): Inherit from free_ptr_hash\n+\trather than typed_free_remove.  Remove redudant typedefs.\n+\n 2015-06-25  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* plugin.cc (string_hasher): Inherit from nofree_ptr_hash rather"}, {"sha": "57fca7c9a7ba8d9541ab5e30fe920b0a1d1ca2de", "filename": "libcc1/plugin.cc", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95fbe13e99744b36691495fd81934ccee963c0a3/libcc1%2Fplugin.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95fbe13e99744b36691495fd81934ccee963c0a3/libcc1%2Fplugin.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcc1%2Fplugin.cc?ref=95fbe13e99744b36691495fd81934ccee963c0a3", "patch": "@@ -111,11 +111,8 @@ struct decl_addr_value\n   tree address;\n };\n \n-struct decl_addr_hasher : typed_free_remove<decl_addr_value>\n+struct decl_addr_hasher : free_ptr_hash<decl_addr_value>\n {\n-  typedef decl_addr_value *value_type;\n-  typedef decl_addr_value *compare_type;\n-\n   static inline hashval_t hash (const decl_addr_value *);\n   static inline bool equal (const decl_addr_value *, const decl_addr_value *);\n };"}]}