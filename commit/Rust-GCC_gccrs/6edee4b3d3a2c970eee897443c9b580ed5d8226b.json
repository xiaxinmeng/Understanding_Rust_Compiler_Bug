{"sha": "6edee4b3d3a2c970eee897443c9b580ed5d8226b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmVkZWU0YjNkM2EyYzk3MGVlZTg5NzQ0M2M5YjU4MGVkNWQ4MjI2Yg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2019-01-25T19:50:55Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2019-01-25T19:50:55Z"}, "message": "re PR c++/88969 (ICE in build_op_delete_call, at cp/call.c:6509)\n\n/cp\n2019-01-25  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/88969\n\t* call.c (build_op_delete_call): Implement 7.6.2.5/(10.1).\n\t* decl2.c (coerce_delete_type): Use build_pointer_type instead\n\tof TYPE_POINTER_TO.\n\n/testsuite\n2019-01-25  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/88969\n\t* g++.dg/cpp2a/destroying-delete2.C: New.\n\t* g++.dg/cpp2a/destroying-delete3.C: Likewise.\n\nFrom-SVN: r268278", "tree": {"sha": "a6397b40fbfb22f832d4ff59be79e34c8c609098", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a6397b40fbfb22f832d4ff59be79e34c8c609098"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6edee4b3d3a2c970eee897443c9b580ed5d8226b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6edee4b3d3a2c970eee897443c9b580ed5d8226b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6edee4b3d3a2c970eee897443c9b580ed5d8226b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6edee4b3d3a2c970eee897443c9b580ed5d8226b/comments", "author": null, "committer": null, "parents": [{"sha": "f28c46cdb85172eb0e267b97e7a9d3befac30a2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f28c46cdb85172eb0e267b97e7a9d3befac30a2e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f28c46cdb85172eb0e267b97e7a9d3befac30a2e"}], "stats": {"total": 60, "additions": 57, "deletions": 3}, "files": [{"sha": "2d7ab90885ef1ced15305fed654c43de8632a091", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6edee4b3d3a2c970eee897443c9b580ed5d8226b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6edee4b3d3a2c970eee897443c9b580ed5d8226b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=6edee4b3d3a2c970eee897443c9b580ed5d8226b", "patch": "@@ -1,3 +1,10 @@\n+2019-01-25  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/88969\n+\t* call.c (build_op_delete_call): Implement 7.6.2.5/(10.1).\n+\t* decl2.c (coerce_delete_type): Use build_pointer_type instead\n+\tof TYPE_POINTER_TO.\n+\n 2019-01-24  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/89001 - mangling of reference temporaries"}, {"sha": "515a94200324277c842fe1d79afbec5a1493ce01", "filename": "gcc/cp/call.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6edee4b3d3a2c970eee897443c9b580ed5d8226b/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6edee4b3d3a2c970eee897443c9b580ed5d8226b/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=6edee4b3d3a2c970eee897443c9b580ed5d8226b", "patch": "@@ -6461,6 +6461,19 @@ build_op_delete_call (enum tree_code code, tree addr, tree size,\n \t\tcontinue;\n \t      }\n \n+\t    /* -- If any of the deallocation functions is a destroying\n+\t       operator delete, all deallocation functions that are not\n+\t       destroying operator deletes are eliminated from further\n+\t       consideration.  */\n+\t    bool fn_destroying = destroying_delete_p (fn);\n+\t    bool elt_destroying = destroying_delete_p (elt);\n+\t    if (elt_destroying != fn_destroying)\n+\t      {\n+\t\tif (elt_destroying)\n+\t\t  fn = elt;\n+\t\tcontinue;\n+\t      }\n+\n \t    /* -- If the type has new-extended alignment, a function with a\n \t       parameter of type std::align_val_t is preferred; otherwise a\n \t       function without such a parameter is preferred. If exactly one"}, {"sha": "72c52e39e00d1e4cbeb1ec07095747fa2793b93a", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6edee4b3d3a2c970eee897443c9b580ed5d8226b/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6edee4b3d3a2c970eee897443c9b580ed5d8226b/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=6edee4b3d3a2c970eee897443c9b580ed5d8226b", "patch": "@@ -1757,9 +1757,9 @@ coerce_delete_type (tree decl, location_t loc)\n   if (destroying_delete_p (decl))\n     {\n       if (DECL_CLASS_SCOPE_P (decl))\n-\t/* If the function is a destroying operator delete declared in class type\n-\t   C, the type of its first parameter shall be C*.  */\n-\tptrtype = TYPE_POINTER_TO (DECL_CONTEXT (decl));\n+\t/* If the function is a destroying operator delete declared in class\n+\t   type C, the type of its first parameter shall be C*.  */\n+\tptrtype = build_pointer_type (DECL_CONTEXT (decl));\n       else\n \t/* A destroying operator delete shall be a class member function named\n \t   operator delete.  */"}, {"sha": "84e195cd88d4d50501e6d348ad64b2262e442eb4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6edee4b3d3a2c970eee897443c9b580ed5d8226b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6edee4b3d3a2c970eee897443c9b580ed5d8226b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6edee4b3d3a2c970eee897443c9b580ed5d8226b", "patch": "@@ -1,3 +1,9 @@\n+2019-01-25  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/88969\n+\t* g++.dg/cpp2a/destroying-delete2.C: New.\n+\t* g++.dg/cpp2a/destroying-delete3.C: Likewise.\n+\n 2019-01-25  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/85780"}, {"sha": "2592c0757a3314d065aa4665c91d85e4fb2ec2bc", "filename": "gcc/testsuite/g++.dg/cpp2a/destroying-delete2.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6edee4b3d3a2c970eee897443c9b580ed5d8226b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fdestroying-delete2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6edee4b3d3a2c970eee897443c9b580ed5d8226b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fdestroying-delete2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fdestroying-delete2.C?ref=6edee4b3d3a2c970eee897443c9b580ed5d8226b", "patch": "@@ -0,0 +1,20 @@\n+// PR c++/88969\n+// { dg-do compile { target c++2a } }\n+\n+#include <new>\n+\n+namespace delete_selection_d {\n+  struct B {\n+    void operator delete(void*) = delete;\n+    void operator delete(B *, std::destroying_delete_t) = delete;  // { dg-message \"declared here\" }\n+  };\n+  void delete_B(B *b) { delete b; }  // { dg-error \"use of deleted function\" }\n+}\n+\n+namespace delete_selection_r {\n+  struct B {\n+    void operator delete(B *, std::destroying_delete_t) = delete;  // { dg-message \"declared here\" }\n+    void operator delete(void*) = delete;\n+  };\n+  void delete_B(B *b) { delete b; }  // { dg-error \"use of deleted function\" }\n+}"}, {"sha": "112fb0ad67e2a5dfc913c93547e6d0f201ff5225", "filename": "gcc/testsuite/g++.dg/cpp2a/destroying-delete3.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6edee4b3d3a2c970eee897443c9b580ed5d8226b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fdestroying-delete3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6edee4b3d3a2c970eee897443c9b580ed5d8226b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fdestroying-delete3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fdestroying-delete3.C?ref=6edee4b3d3a2c970eee897443c9b580ed5d8226b", "patch": "@@ -0,0 +1,8 @@\n+// PR c++/88969\n+// { dg-do compile { target c++2a } }\n+\n+#include <new>\n+\n+struct B {\n+  void operator delete(void*, std::destroying_delete_t);  // { dg-error \".operator delete. takes type .B*.\" }\n+};"}]}