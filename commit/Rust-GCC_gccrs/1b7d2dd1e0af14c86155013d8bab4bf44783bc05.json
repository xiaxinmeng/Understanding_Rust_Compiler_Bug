{"sha": "1b7d2dd1e0af14c86155013d8bab4bf44783bc05", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWI3ZDJkZDFlMGFmMTRjODYxNTUwMTNkOGJhYjRiZjQ0NzgzYmMwNQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2010-10-13T15:42:46Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2010-10-13T15:42:46Z"}, "message": "re PR tree-optimization/45788 (-fwhole-program causes ICE error: BB 3 can not throw but has an EH edge)\n\n2010-10-13  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/45788\n\t* cgraphunit.c (cgraph_redirect_edge_call_stmt_to_callee): Delay\n\tEH update until fixup-cfg.\n\n\t* g++.dg/pr45788.C: New testcase.\n\nFrom-SVN: r165425", "tree": {"sha": "6ce95dedb669feed9d7cb577d50520074ea7d424", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6ce95dedb669feed9d7cb577d50520074ea7d424"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1b7d2dd1e0af14c86155013d8bab4bf44783bc05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b7d2dd1e0af14c86155013d8bab4bf44783bc05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b7d2dd1e0af14c86155013d8bab4bf44783bc05", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b7d2dd1e0af14c86155013d8bab4bf44783bc05/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "565d018dae66fe00c01577926eb3de8e0b37cc5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/565d018dae66fe00c01577926eb3de8e0b37cc5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/565d018dae66fe00c01577926eb3de8e0b37cc5a"}], "stats": {"total": 134, "additions": 130, "deletions": 4}, "files": [{"sha": "807b7f93079666350e6c55a12e633723b6a51cf5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b7d2dd1e0af14c86155013d8bab4bf44783bc05/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b7d2dd1e0af14c86155013d8bab4bf44783bc05/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1b7d2dd1e0af14c86155013d8bab4bf44783bc05", "patch": "@@ -1,3 +1,9 @@\n+2010-10-13  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/45788\n+\t* cgraphunit.c (cgraph_redirect_edge_call_stmt_to_callee): Delay\n+\tEH update until fixup-cfg.\n+\n 2010-10-13  Julian Brown  <julian@codesourcery.com>\n \n \t* config/arm/arm.h (REG_CLASS_CONTENTS): Remove soft frame pointer"}, {"sha": "95b3007403755c1998a258c73fa1dc92fb7ee9f1", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b7d2dd1e0af14c86155013d8bab4bf44783bc05/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b7d2dd1e0af14c86155013d8bab4bf44783bc05/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=1b7d2dd1e0af14c86155013d8bab4bf44783bc05", "patch": "@@ -2156,6 +2156,7 @@ cgraph_redirect_edge_call_stmt_to_callee (struct cgraph_edge *e)\n   if (e->callee->clone.combined_args_to_skip)\n     {\n       gimple_stmt_iterator gsi;\n+      int lp_nr;\n \n       new_stmt\n \t= gimple_call_copy_skip_args (e->call_stmt,\n@@ -2168,16 +2169,22 @@ cgraph_redirect_edge_call_stmt_to_callee (struct cgraph_edge *e)\n \n       gsi = gsi_for_stmt (e->call_stmt);\n       gsi_replace (&gsi, new_stmt, false);\n-      if (maybe_clean_or_replace_eh_stmt (e->call_stmt, new_stmt))\n-\tgimple_purge_dead_eh_edges (gimple_bb (new_stmt));\n+      /* We need to defer cleaning EH info on the new statement to\n+         fixup-cfg.  We may not have dominator information at this point\n+\t and thus would end up with unreachable blocks and have no way\n+\t to communicate that we need to run CFG cleanup then.  */\n+      lp_nr = lookup_stmt_eh_lp (e->call_stmt);\n+      if (lp_nr != 0)\n+\t{\n+\t  remove_stmt_from_eh_lp (e->call_stmt);\n+\t  add_stmt_to_eh_lp (new_stmt, lp_nr);\n+\t}\n     }\n   else\n     {\n       new_stmt = e->call_stmt;\n       gimple_call_set_fndecl (new_stmt, e->callee->decl);\n       update_stmt (new_stmt);\n-      if (maybe_clean_eh_stmt (new_stmt))\n-\tgimple_purge_dead_eh_edges (gimple_bb (new_stmt));\n     }\n \n   cgraph_set_call_stmt_including_clones (e->caller, e->call_stmt, new_stmt);"}, {"sha": "537a5071a2200ef6b70dc1a7b66ef1372998b72d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b7d2dd1e0af14c86155013d8bab4bf44783bc05/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b7d2dd1e0af14c86155013d8bab4bf44783bc05/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1b7d2dd1e0af14c86155013d8bab4bf44783bc05", "patch": "@@ -1,3 +1,8 @@\n+2010-10-13  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/45788\n+\t* g++.dg/pr45788.C: New testcase.\n+\n 2010-10-13  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/45970"}, {"sha": "de3340df3318c6b472b6c258cf7ff7b66cce6ed0", "filename": "gcc/testsuite/g++.dg/pr45788.C", "status": "added", "additions": 108, "deletions": 0, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b7d2dd1e0af14c86155013d8bab4bf44783bc05/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr45788.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b7d2dd1e0af14c86155013d8bab4bf44783bc05/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr45788.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr45788.C?ref=1b7d2dd1e0af14c86155013d8bab4bf44783bc05", "patch": "@@ -0,0 +1,108 @@\n+// { dg-do compile { target x86_64-*-* } }\n+// { dg-options \"-O3 -fwhole-program -msse2\" }\n+\n+typedef long unsigned int __darwin_size_t;\n+typedef __darwin_size_t size_t;\n+\n+typedef float __m128 __attribute__ ((__vector_size__ (16), __may_alias__));\n+typedef float __v4sf __attribute__ ((__vector_size__ (16)));\n+extern inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__)) _mm_mul_ps (__m128 __A, __m128 __B) {\n+    return (__m128) __builtin_ia32_mulps ((__v4sf)__A, (__v4sf)__B);\n+}\n+extern inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__)) _mm_set1_ps (float __F) {\n+    return __extension__ (__m128)(__v4sf){\n+\t__F, __F, __F, __F };\n+}\n+extern inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__)) _mm_setr_ps (float __Z, float __Y, float __X, float __W) {\n+}\n+typedef float real;\n+template <typename T, int N> struct vectorX {\n+};\n+template<> struct vectorX<float, 3> {\n+    union {\n+\t__m128 s;\n+\tstruct {\n+\t};\n+    };\n+    vectorX(__m128 s) : s(s) {\n+    }\n+\n+}\n+__attribute__((aligned));\n+template<> struct vectorX<float, 4> {\n+    typedef float T;\n+    typedef vectorX<float, 4> V;\n+    union {\n+\t__m128 s;\n+\tstruct {\n+\t    T r, g, b, a;\n+\t};\n+    };\n+    vectorX(T a_, T b, T c, T d = 1) : s(_mm_setr_ps(a_,b,c,d)) {\n+    }\n+    vectorX(__m128 s) : s(s) {\n+    }\n+    vectorX(const V &t) : s(t.s) {\n+    }\n+    V &operator *=(const T t) {\n+\ts = _mm_mul_ps(s, _mm_set1_ps(t));\n+\treturn *this;\n+    }\n+    inline V operator *(const T t) const __attribute__((always_inline)) {\n+\treturn V(*this) *= t;\n+    };\n+}\n+__attribute__((aligned));\n+typedef vectorX<real, 3> color3;\n+typedef vectorX<real, 4> color4;\n+typedef color3 color;\n+static inline color4 c3to4(color c) {\n+    color4 res(c.s);\n+    res.a=1;\n+    return res;\n+}\n+static inline color c4to3(color4 c) {\n+    return color(c.s);\n+}\n+static inline color4 to_premultiplied(color c, real a) {\n+    color4 res = c3to4(c);\n+    return res * a;\n+}\n+static inline color4 to_premultiplied(color4 cs) {\n+    return to_premultiplied(c4to3(cs), cs.a);\n+}\n+struct texture {\n+};\n+struct flat_texture : public texture {\n+    color4 c;\n+    flat_texture(const color4 &c) : c(to_premultiplied(c)) {\n+    }\n+};\n+struct checkerboard_texture : public texture {\n+    color4 even, odd;\n+    checkerboard_texture(const color4 &even, const color4 &odd) : even(to_premultiplied(even)), odd(to_premultiplied(odd)) {\n+    }\n+};\n+struct texture_placement {\n+    texture *tex;\n+};\n+struct surface {\n+    texture_placement textures[16];\n+    size_t texcount;\n+};\n+struct primitive {\n+    surface mat;\n+};\n+static void set_color(primitive *p, color4 c) {\n+    p->mat.textures[0].tex = new flat_texture(c);\n+}\n+static primitive **checkerboard_scene(int *pi) {\n+    primitive **prims = new primitive*[6];\n+    set_color(prims[0], color4(.7,.7,.7));\n+    prims[1]->mat.textures[prims[1]->mat.texcount++].tex = new checkerboard_texture(color4(1,.1,.1),color4(.1,.15,1));\n+    set_color(prims[2], color4(.7,.9,.7));\n+}\n+int main (int argc, char * const argv[]) {\n+    int primi;\n+    primitive **prims = checkerboard_scene(&primi);\n+}"}]}