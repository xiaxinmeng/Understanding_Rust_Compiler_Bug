{"sha": "e577c183dd7e2cb4d14a79abba53353534f5f74d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTU3N2MxODNkZDdlMmNiNGQxNGE3OWFiYmE1MzM1MzUzNGY1Zjc0ZA==", "commit": {"author": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "1996-10-24T00:40:58Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "1996-10-24T00:40:58Z"}, "message": "sh.c (dump_table): handle SFmode and DFmode.\n\n        * sh.c (dump_table): handle SFmode and DFmode.\n        (broken_move): handle simple PARALLEL.\n        (machine_dependent_reorg, pc-relative move generation): Likewise.\n\nFrom-SVN: r13021", "tree": {"sha": "2be0820323679c3b089219e46db90a86b5628fd4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2be0820323679c3b089219e46db90a86b5628fd4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e577c183dd7e2cb4d14a79abba53353534f5f74d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e577c183dd7e2cb4d14a79abba53353534f5f74d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e577c183dd7e2cb4d14a79abba53353534f5f74d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e577c183dd7e2cb4d14a79abba53353534f5f74d/comments", "author": null, "committer": null, "parents": [{"sha": "b1bbe7328c3d29e8d3f322837c966da663471d8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1bbe7328c3d29e8d3f322837c966da663471d8c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1bbe7328c3d29e8d3f322837c966da663471d8c"}], "stats": {"total": 68, "additions": 33, "deletions": 35}, "files": [{"sha": "81cbdd74bad26752a020ee381773ca06363881db", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 33, "deletions": 35, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e577c183dd7e2cb4d14a79abba53353534f5f74d/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e577c183dd7e2cb4d14a79abba53353534f5f74d/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=e577c183dd7e2cb4d14a79abba53353534f5f74d", "patch": "@@ -1694,6 +1694,7 @@ dump_table (scan)\n \tcase HImode:\n \t  break;\n \tcase SImode:\n+\tcase SFmode:\n \t  if (need_align)\n \t    {\n \t      need_align = 0;\n@@ -1703,6 +1704,7 @@ dump_table (scan)\n \t  scan = emit_label_after (p->label, scan);\n \t  scan = emit_insn_after (gen_consttable_4 (p->value), scan);\n \t  break;\n+\tcase DFmode:\n \tcase DImode:\n \t  if (need_align)\n \t    {\n@@ -1746,21 +1748,26 @@ static int\n broken_move (insn)\n      rtx insn;\n {\n-  if (GET_CODE (insn) == INSN\n-      && GET_CODE (PATTERN (insn)) == SET\n-      /* We can load any 8 bit value if we don't care what the high\n-\t order bits end up as.  */\n-      && GET_MODE (SET_DEST (PATTERN (insn))) != QImode\n-      && CONSTANT_P (SET_SRC (PATTERN (insn)))\n-      && ! (GET_CODE (SET_SRC (PATTERN (insn))) == CONST_DOUBLE\n-\t    && (fp_zero_operand (SET_SRC (PATTERN (insn)))\n-\t\t|| fp_one_operand (SET_SRC (PATTERN (insn))))\n-\t    && GET_CODE (SET_DEST (PATTERN (insn))) == REG\n-\t    && REGNO (SET_DEST (PATTERN (insn))) >= FIRST_FP_REG\n-\t    && REGNO (SET_DEST (PATTERN (insn))) <= LAST_FP_REG)\n-      && (GET_CODE (SET_SRC (PATTERN (insn))) != CONST_INT\n-\t  || ! CONST_OK_FOR_I (INTVAL (SET_SRC (PATTERN (insn))))))\n-    return 1;\n+  if (GET_CODE (insn) == INSN)\n+    {\n+      rtx pat = PATTERN (insn);\n+      if (GET_CODE (pat) == PARALLEL)\n+\tpat = XVECEXP (pat, 0, 0);\n+      if (GET_CODE (pat) == SET\n+\t  /* We can load any 8 bit value if we don't care what the high\n+\t     order bits end up as.  */\n+\t  && GET_MODE (SET_DEST (pat)) != QImode\n+\t  && CONSTANT_P (SET_SRC (pat))\n+\t  && ! (GET_CODE (SET_SRC (pat)) == CONST_DOUBLE\n+\t\t&& (fp_zero_operand (SET_SRC (pat))\n+\t\t    || fp_one_operand (SET_SRC (pat)))\n+\t\t&& GET_CODE (SET_DEST (pat)) == REG\n+\t\t&& REGNO (SET_DEST (pat)) >= FIRST_FP_REG\n+\t\t&& REGNO (SET_DEST (pat)) <= LAST_FP_REG)\n+\t  && (GET_CODE (SET_SRC (pat)) != CONST_INT\n+\t      || ! CONST_OK_FOR_I (INTVAL (SET_SRC (pat)))))\n+\treturn 1;\n+    }\n \n   return 0;\n }\n@@ -2306,13 +2313,18 @@ machine_dependent_reorg (first)\n \t    {\n \t      if (broken_move (scan))\n \t\t{\n-\t\t  rtx pat = PATTERN (scan);\n-\t\t  rtx src = SET_SRC (pat);\n-\t\t  rtx dst = SET_DEST (pat);\n-\t\t  enum machine_mode mode = GET_MODE (dst);\n+\t\t  rtx *patp = &PATTERN (scan), pat = *patp;\n+\t\t  rtx src, dst;\n \t\t  rtx lab;\n \t\t  rtx newinsn;\n \t\t  rtx newsrc;\n+\t\t  enum machine_mode mode;\n+\n+\t\t  if (GET_CODE (pat) == PARALLEL)\n+\t\t    patp = &XVECEXP (pat, 0, 0), pat = *patp;\n+\t\t  src = SET_SRC (pat);\n+\t\t  dst = SET_DEST (pat);\n+\t\t  mode = GET_MODE (dst);\n \n \t\t  if (mode == SImode && hi_const (src))\n \t\t    {\n@@ -2331,22 +2343,8 @@ machine_dependent_reorg (first)\n \t\t  newsrc = gen_rtx (MEM, mode,\n \t\t\t\t    gen_rtx (LABEL_REF, VOIDmode, lab));\n \t\t  RTX_UNCHANGING_P (newsrc) = 1;\n-\t\t  newinsn = emit_insn_after (gen_rtx (SET, VOIDmode,\n-\t\t\t\t\t\t      dst, newsrc), scan);\n-\t\t  REG_NOTES (newinsn) = REG_NOTES (scan);\n-\t\t  REG_NOTES (scan) = NULL_RTX;\n-\t\t  /* If not optimizing, then delete_insn doesn't remove the\n-\t\t     insn from the chain, and hence is not useful.  We\n-\t\t     convert the instruction to a NOTE in that case.  */\n-\t\t  if (optimize)\n-\t\t    delete_insn (scan);\n-\t\t  else\n-\t\t    {\n-\t\t      PUT_CODE (scan, NOTE);\n-\t\t      NOTE_LINE_NUMBER (scan) = NOTE_INSN_DELETED;\n-\t\t      NOTE_SOURCE_FILE (insn) = 0;\n-\t\t    }\n-\t\t  scan = newinsn;\n+\t\t  *patp = gen_rtx (SET, VOIDmode, dst, newsrc);\n+\t\t  INSN_CODE (scan) = -1;\n \t\t}\n \t    }\n \t  dump_table (barrier);"}]}