{"sha": "9cfdd48417dce7d29a410510d2fb0e9b74b66878", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWNmZGQ0ODQxN2RjZTdkMjlhNDEwNTEwZDJmYjBlOWI3NGI2Njg3OA==", "commit": {"author": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2017-11-04T00:34:40Z"}, "committer": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2017-11-04T00:34:40Z"}, "message": "re PR fortran/82796 (Private+equivalence in used module breaks compilation of pure function)\n\n2017-11-01  Steven G. Kargl  <kargl@gcc.gnu.org>\n\n\tPR fortran/82796\n\t* resolve.c (resolve_equivalence): An entity in a common block within\n \ta module cannot appear in an equivalence statement if the entity is\n\twith a pure procedure.\n\n2017-11-01  Steven G. Kargl  <kargl@gcc.gnu.org>\n\n\tPR fortran/82796\n\t* gfortran.dg/equiv_pure.f90: New test.\n\nFrom-SVN: r254403", "tree": {"sha": "7d73f7805a210e37799ecbeba06b8b41e8506e2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7d73f7805a210e37799ecbeba06b8b41e8506e2e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9cfdd48417dce7d29a410510d2fb0e9b74b66878", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9cfdd48417dce7d29a410510d2fb0e9b74b66878", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9cfdd48417dce7d29a410510d2fb0e9b74b66878", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9cfdd48417dce7d29a410510d2fb0e9b74b66878/comments", "author": null, "committer": null, "parents": [{"sha": "da768c5b5cb0a187ae01d2c12e7f7323ee77734c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da768c5b5cb0a187ae01d2c12e7f7323ee77734c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da768c5b5cb0a187ae01d2c12e7f7323ee77734c"}], "stats": {"total": 83, "additions": 80, "deletions": 3}, "files": [{"sha": "f653267b8e6760dd8e747ee1b68261e85de71403", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cfdd48417dce7d29a410510d2fb0e9b74b66878/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cfdd48417dce7d29a410510d2fb0e9b74b66878/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=9cfdd48417dce7d29a410510d2fb0e9b74b66878", "patch": "@@ -1,3 +1,10 @@\n+2017-11-03  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\tPR fortran/82796\n+\t* resolve.c (resolve_equivalence): An entity in a common block within\n+ \ta module cannot appear in an equivalence statement if the entity is\n+\twith a pure procedure.\n+\n 2017-10-31  Jim Wilson  <wilson@tuliptree.org>\n \n \t* parse.c (unexpected_eof): Call gcc_unreachable before return."}, {"sha": "40c1cd3c96fb2828cb5d751c0837a758180d637f", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cfdd48417dce7d29a410510d2fb0e9b74b66878/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cfdd48417dce7d29a410510d2fb0e9b74b66878/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=9cfdd48417dce7d29a410510d2fb0e9b74b66878", "patch": "@@ -15936,9 +15936,22 @@ resolve_equivalence (gfc_equiv *eq)\n \t  && sym->ns->proc_name->attr.pure\n \t  && sym->attr.in_common)\n \t{\n-\t  gfc_error (\"Common block member %qs at %L cannot be an EQUIVALENCE \"\n-\t\t     \"object in the pure procedure %qs\",\n-\t\t     sym->name, &e->where, sym->ns->proc_name->name);\n+\t  /* Need to check for symbols that may have entered the pure\n+\t     procedure via a USE statement.  */\n+\t  bool saw_sym = false;\n+\t  if (sym->ns->use_stmts)\n+\t    {\n+\t      gfc_use_rename *r;\n+\t      for (r = sym->ns->use_stmts->rename; r; r = r->next)\n+\t\tif (strcmp(r->use_name, sym->name) == 0) saw_sym = true; \n+\t    }\n+\t  else\n+\t    saw_sym = true;\n+\n+\t  if (saw_sym)\n+\t    gfc_error (\"COMMON block member %qs at %L cannot be an \"\n+\t\t       \"EQUIVALENCE object in the pure procedure %qs\",\n+\t\t       sym->name, &e->where, sym->ns->proc_name->name);\n \t  break;\n \t}\n "}, {"sha": "87500b7ecee7702c20532208e00ab6d8c05993fe", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cfdd48417dce7d29a410510d2fb0e9b74b66878/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cfdd48417dce7d29a410510d2fb0e9b74b66878/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9cfdd48417dce7d29a410510d2fb0e9b74b66878", "patch": "@@ -1,3 +1,8 @@\n+2017-11-03  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\tPR fortran/82796\n+\t* gfortran.dg/equiv_pure.f90: New test.\n+\n 2017-11-03  Jeff Law  <law@redhat.com>\n \n \tPR target/82823"}, {"sha": "5b0ce419d2ac99c98e0383fd2922dd7fe045c6dd", "filename": "gcc/testsuite/gfortran.dg/equiv_pure.f90", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cfdd48417dce7d29a410510d2fb0e9b74b66878/gcc%2Ftestsuite%2Fgfortran.dg%2Fequiv_pure.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cfdd48417dce7d29a410510d2fb0e9b74b66878/gcc%2Ftestsuite%2Fgfortran.dg%2Fequiv_pure.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fequiv_pure.f90?ref=9cfdd48417dce7d29a410510d2fb0e9b74b66878", "patch": "@@ -0,0 +1,52 @@\n+! { dg-do compile }\n+! PR fortran/82796\n+! Code contributed by ripero84 at gmail dot com \n+module eq\n+   implicit none\n+   integer :: n1, n2\n+   integer, dimension(2) :: a\n+   equivalence (a(1), n1)\n+   equivalence (a(2), n2)\n+   common /a/ a\n+end module eq\n+\n+module m\n+   use eq\n+   implicit none\n+   type, public :: t\n+     integer :: i\n+   end type t\n+end module m\n+\n+module p\n+   implicit none\n+   contains\n+   pure integer function d(h)\n+     use m\n+     implicit none\n+     integer, intent(in) :: h\n+     d = h\n+   end function\n+end module p\n+\n+module q\n+   implicit none\n+   contains\n+   pure integer function d(h)\n+     use m, only : t\n+     implicit none\n+     integer, intent(in) :: h\n+     d = h\n+   end function\n+end module q\n+\n+module r\n+   implicit none\n+   contains\n+   pure integer function d(h)\n+     use m, only : a          ! { dg-error \"cannot be an EQUIVALENCE object\" }\n+     implicit none\n+     integer, intent(in) :: h\n+     d = h\n+   end function\n+end module r"}]}