{"sha": "d19d90289d1343e4fb0550eb1151db6da8a0d1ce", "node_id": "C_kwDOANBUbNoAKGQxOWQ5MDI4OWQxMzQzZTRmYjA1NTBlYjExNTFkYjZkYThhMGQxY2U", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-10-18T12:59:54Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-10-19T08:12:45Z"}, "message": "Add misalignment output parameter to get_load_store_type\n\nThis makes us compute the misalignment alongside the alignment support\nscheme in get_load_store_type, removing some out-of-place calls to\nthe DR alignment API.\n\n2021-10-18  Richard Biener  <rguenther@suse.de>\n\n\t* tree-vect-stmts.c (get_group_load_store_type): Add\n\tmisalignment output parameter and initialize it.\n\t(get_group_load_store_type): Likewise.\n\t(vectorizable_store): Remove now redundant queries.\n\t(vectorizable_load): Likewise.", "tree": {"sha": "23e8e1e65293a07e06db371ef410f0de82fcaebb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/23e8e1e65293a07e06db371ef410f0de82fcaebb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d19d90289d1343e4fb0550eb1151db6da8a0d1ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d19d90289d1343e4fb0550eb1151db6da8a0d1ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d19d90289d1343e4fb0550eb1151db6da8a0d1ce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d19d90289d1343e4fb0550eb1151db6da8a0d1ce/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f45610a45236e97616726ca042898d6ac46a082e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f45610a45236e97616726ca042898d6ac46a082e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f45610a45236e97616726ca042898d6ac46a082e"}], "stats": {"total": 39, "additions": 27, "deletions": 12}, "files": [{"sha": "c3690769d8f494a774fc3a26f421369620da1869", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 27, "deletions": 12, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d19d90289d1343e4fb0550eb1151db6da8a0d1ce/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d19d90289d1343e4fb0550eb1151db6da8a0d1ce/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=d19d90289d1343e4fb0550eb1151db6da8a0d1ce", "patch": "@@ -2109,6 +2109,7 @@ get_group_load_store_type (vec_info *vinfo, stmt_vec_info stmt_info,\n \t\t\t   bool masked_p, vec_load_store_type vls_type,\n \t\t\t   vect_memory_access_type *memory_access_type,\n \t\t\t   dr_alignment_support *alignment_support_scheme,\n+\t\t\t   int *misalignment,\n \t\t\t   gather_scatter_info *gs_info)\n {\n   loop_vec_info loop_vinfo = dyn_cast <loop_vec_info> (vinfo);\n@@ -2294,10 +2295,16 @@ get_group_load_store_type (vec_info *vinfo, stmt_vec_info stmt_info,\n \n   if (*memory_access_type == VMAT_GATHER_SCATTER\n       || *memory_access_type == VMAT_ELEMENTWISE)\n-    *alignment_support_scheme = dr_unaligned_supported;\n+    {\n+      *alignment_support_scheme = dr_unaligned_supported;\n+      *misalignment = DR_MISALIGNMENT_UNKNOWN;\n+    }\n   else\n-    *alignment_support_scheme\n-      = vect_supportable_dr_alignment (vinfo, first_dr_info, vectype);\n+    {\n+      *alignment_support_scheme\n+\t= vect_supportable_dr_alignment (vinfo, first_dr_info, vectype);\n+      *misalignment = dr_misalignment (first_dr_info, vectype);\n+    }\n \n   if (vls_type != VLS_LOAD && first_stmt_info == stmt_info)\n     {\n@@ -2337,7 +2344,9 @@ get_group_load_store_type (vec_info *vinfo, stmt_vec_info stmt_info,\n    storing it in *MEMORY_ACCESS_TYPE if so.  If we decide to use gathers\n    or scatters, fill in GS_INFO accordingly.  In addition\n    *ALIGNMENT_SUPPORT_SCHEME is filled out and false is returned if\n-   the target does not support the alignment scheme.\n+   the target does not support the alignment scheme.  *MISALIGNMENT\n+   is set according to the alignment of the access (including\n+   DR_MISALIGNMENT_UNKNOWN when it is unknown).\n \n    SLP says whether we're performing SLP rather than loop vectorization.\n    MASKED_P is true if the statement is conditional on a vectorized mask.\n@@ -2351,10 +2360,12 @@ get_load_store_type (vec_info  *vinfo, stmt_vec_info stmt_info,\n \t\t     unsigned int ncopies,\n \t\t     vect_memory_access_type *memory_access_type,\n \t\t     dr_alignment_support *alignment_support_scheme,\n+\t\t     int *misalignment,\n \t\t     gather_scatter_info *gs_info)\n {\n   loop_vec_info loop_vinfo = dyn_cast <loop_vec_info> (vinfo);\n   poly_uint64 nunits = TYPE_VECTOR_SUBPARTS (vectype);\n+  *misalignment = DR_MISALIGNMENT_UNKNOWN;\n   if (STMT_VINFO_GATHER_SCATTER_P (stmt_info))\n     {\n       *memory_access_type = VMAT_GATHER_SCATTER;\n@@ -2402,7 +2413,8 @@ get_load_store_type (vec_info  *vinfo, stmt_vec_info stmt_info,\n       if (!get_group_load_store_type (vinfo, stmt_info, vectype, slp_node,\n \t\t\t\t      masked_p,\n \t\t\t\t      vls_type, memory_access_type,\n-\t\t\t\t      alignment_support_scheme, gs_info))\n+\t\t\t\t      alignment_support_scheme,\n+\t\t\t\t      misalignment, gs_info))\n \treturn false;\n     }\n   else if (STMT_VINFO_STRIDED_P (stmt_info))\n@@ -2439,6 +2451,8 @@ get_load_store_type (vec_info  *vinfo, stmt_vec_info stmt_info,\n \t    = vect_supportable_dr_alignment (vinfo,\n \t\t\t\t\t     STMT_VINFO_DR_INFO (stmt_info),\n \t\t\t\t\t     vectype);\n+\t  *misalignment = dr_misalignment (STMT_VINFO_DR_INFO (stmt_info),\n+\t\t\t\t\t   vectype);\n \t}\n     }\n \n@@ -7337,9 +7351,10 @@ vectorizable_store (vec_info *vinfo,\n \n   vect_memory_access_type memory_access_type;\n   enum dr_alignment_support alignment_support_scheme;\n+  int misalignment;\n   if (!get_load_store_type (vinfo, stmt_info, vectype, slp_node, mask, vls_type,\n \t\t\t    ncopies, &memory_access_type,\n-\t\t\t    &alignment_support_scheme, &gs_info))\n+\t\t\t    &alignment_support_scheme, &misalignment, &gs_info))\n     return false;\n \n   if (mask)\n@@ -8218,14 +8233,13 @@ vectorizable_store (vec_info *vinfo,\n \t\t  gcc_assert (aligned_access_p (first_dr_info, vectype));\n \t\t  misalign = 0;\n \t\t}\n-\t      else if (dr_misalignment (first_dr_info, vectype)\n-\t\t       == DR_MISALIGNMENT_UNKNOWN)\n+\t      else if (misalignment == DR_MISALIGNMENT_UNKNOWN)\n \t\t{\n \t\t  align = dr_alignment (vect_dr_behavior (vinfo, first_dr_info));\n \t\t  misalign = 0;\n \t\t}\n \t      else\n-\t\tmisalign = dr_misalignment (first_dr_info, vectype);\n+\t\tmisalign = misalignment;\n \t      if (dataref_offset == NULL_TREE\n \t\t  && TREE_CODE (dataref_ptr) == SSA_NAME)\n \t\tset_ptr_info_alignment (get_ptr_info (dataref_ptr), align,\n@@ -8693,9 +8707,10 @@ vectorizable_load (vec_info *vinfo,\n \n   vect_memory_access_type memory_access_type;\n   enum dr_alignment_support alignment_support_scheme;\n+  int misalignment;\n   if (!get_load_store_type (vinfo, stmt_info, vectype, slp_node, mask, VLS_LOAD,\n \t\t\t    ncopies, &memory_access_type,\n-\t\t\t    &alignment_support_scheme, &gs_info))\n+\t\t\t    &alignment_support_scheme, &misalignment, &gs_info))\n     return false;\n \n   if (mask)\n@@ -9553,14 +9568,14 @@ vectorizable_load (vec_info *vinfo,\n \t\t\tgcc_assert (aligned_access_p (first_dr_info, vectype));\n \t\t\tmisalign = 0;\n \t\t      }\n-\t\t    else if (dr_misalignment (first_dr_info, vectype) == -1)\n+\t\t    else if (misalignment == DR_MISALIGNMENT_UNKNOWN)\n \t\t      {\n \t\t\talign = dr_alignment\n \t\t\t  (vect_dr_behavior (vinfo, first_dr_info));\n \t\t\tmisalign = 0;\n \t\t      }\n \t\t    else\n-\t\t      misalign = dr_misalignment (first_dr_info, vectype);\n+\t\t      misalign = misalignment;\n \t\t    if (dataref_offset == NULL_TREE\n \t\t\t&& TREE_CODE (dataref_ptr) == SSA_NAME)\n \t\t      set_ptr_info_alignment (get_ptr_info (dataref_ptr),"}]}