{"sha": "c12e23c46785088da90ffc6dcfaca0aada4f2fb6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzEyZTIzYzQ2Nzg1MDg4ZGE5MGZmYzZkY2ZhY2EwYWFkYTRmMmZiNg==", "commit": {"author": {"name": "Ghjuvan Lacambre", "email": "lacambre@adacore.com", "date": "2020-08-27T09:27:00Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-10-23T08:24:51Z"}, "message": "[Ada] CUDA: Use internal types instead of public ones\n\ngcc/ada/\n\n\t* exp_prag.adb (Get_Launch_Kernel_Arg_Type): Renamed to\n\tGet_Nth_Arg_Type and made more generic.\n\t(Build_Dim3_Declaration): Now builds a CUDA.Internal.Dim3\n\tinstead of a CUDA.Vector_Types.Dim3.\n\t(Build_Shared_Memory_Declaration): Now infers needed type from\n\tLaunch_Kernel instead of using a hard-coded type.\n\t(Expand_Pragma_CUDA_Execute): Build additional temporaries to\n\tstore Grids and Blocks.\n\t* rtsfind.ads: Move Launch_Kernel from public to internal\n\tpackage.", "tree": {"sha": "51bc00972e232783f469708eee8958ee67ff7e87", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/51bc00972e232783f469708eee8958ee67ff7e87"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c12e23c46785088da90ffc6dcfaca0aada4f2fb6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c12e23c46785088da90ffc6dcfaca0aada4f2fb6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c12e23c46785088da90ffc6dcfaca0aada4f2fb6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c12e23c46785088da90ffc6dcfaca0aada4f2fb6/comments", "author": {"login": "glacambre", "id": 11534587, "node_id": "MDQ6VXNlcjExNTM0NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/11534587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/glacambre", "html_url": "https://github.com/glacambre", "followers_url": "https://api.github.com/users/glacambre/followers", "following_url": "https://api.github.com/users/glacambre/following{/other_user}", "gists_url": "https://api.github.com/users/glacambre/gists{/gist_id}", "starred_url": "https://api.github.com/users/glacambre/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/glacambre/subscriptions", "organizations_url": "https://api.github.com/users/glacambre/orgs", "repos_url": "https://api.github.com/users/glacambre/repos", "events_url": "https://api.github.com/users/glacambre/events{/privacy}", "received_events_url": "https://api.github.com/users/glacambre/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e3ccc6a04100b9998920e82381bf566fc654b8d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e3ccc6a04100b9998920e82381bf566fc654b8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e3ccc6a04100b9998920e82381bf566fc654b8d"}], "stats": {"total": 182, "additions": 121, "deletions": 61}, "files": [{"sha": "4edbd6419139de88e7be1b3a92ea04318035ac1a", "filename": "gcc/ada/exp_prag.adb", "status": "modified", "additions": 117, "deletions": 55, "changes": 172, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c12e23c46785088da90ffc6dcfaca0aada4f2fb6/gcc%2Fada%2Fexp_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c12e23c46785088da90ffc6dcfaca0aada4f2fb6/gcc%2Fada%2Fexp_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_prag.adb?ref=c12e23c46785088da90ffc6dcfaca0aada4f2fb6", "patch": "@@ -682,12 +682,16 @@ package body Exp_Prag is\n          Init_Val : Node_Id) return Node_Id;\n       --  Build an object declaration of the form\n       --\n-      --    Decl_Id : CUDA.Vectory_Types.Dim3 := Val;\n+      --    Decl_Id : CUDA.Internal.Dim3 := Val;\n       --\n       --  Val depends on the nature of Init_Val, as follows:\n       --\n-      --    * If Init_Val is already of type CUDA.Vector_Types.Dim3, then\n-      --      Init_Val is used.\n+      --    * If Init_Val is of type CUDA.Vector_Types.Dim3, then Val has the\n+      --      following form:\n+      --\n+      --        (Interfaces.C.Unsigned (Val.X),\n+      --         Interfaces.C.Unsigned (Val.Y),\n+      --         Interfaces.C.Unsigned (Val.Z))\n       --\n       --    * If Init_Val is a single Integer, Val has the following form:\n       --\n@@ -729,8 +733,8 @@ package body Exp_Prag is\n         (Decl_Id  : Entity_Id;\n          Init_Val : Node_Id) return Node_Id;\n       --  Builds a declaration the Defining_Identifier of which is Decl_Id, the\n-      --  type of which is CUDA.Driver_Types.Stream_T and the value of which is\n-      --  Init_Val if present or null if not.\n+      --  type of which is inferred from CUDA.Internal.Launch_Kernel and the\n+      --  value of which is Init_Val if present or null if not.\n \n       function Build_Simple_Declaration_With_Default\n          (Decl_Id     : Entity_Id;\n@@ -748,9 +752,10 @@ package body Exp_Prag is\n       --  type of which is Integer, the value of which is Init_Val if present\n       --  and 0 otherwise.\n \n-      function Get_Launch_Kernel_Arg_Type (N : Positive) return Entity_Id;\n-      --  Returns the type of the Nth argument of the Launch_Kernel CUDA\n-      --  runtime function.\n+      function Get_Nth_Arg_Type\n+         (Subprogram : Entity_Id;\n+          N          : Positive) return Entity_Id;\n+      --  Returns the type of the Nth argument of Subprogram.\n \n       function To_Addresses (Elmts : Elist_Id) return List_Id;\n       --  Returns a new list containing each element of Elmts wrapped in an\n@@ -792,57 +797,81 @@ package body Exp_Prag is\n         (Decl_Id  : Entity_Id;\n          Init_Val : Node_Id) return Node_Id\n       is\n-         Grid_Dim_X : Node_Id;\n-         Grid_Dim_Y : Node_Id;\n-         Grid_Dim_Z : Node_Id;\n-         Init_Value : Node_Id;\n+         --  Expressions for each component of the returned Dim3\n+         Dim_X    : Node_Id;\n+         Dim_Y    : Node_Id;\n+         Dim_Z    : Node_Id;\n+\n+         --  Type of CUDA.Internal.Dim3 - inferred from\n+         --  RE_Push_Call_Configuration to avoid needing changes in GNAT when\n+         --  the CUDA bindings change (this happens frequently).\n+         Internal_Dim3 : constant Entity_Id :=\n+           Get_Nth_Arg_Type (RTE (RE_Push_Call_Configuration), 1);\n+\n+         --  Entities for each component of external and internal Dim3\n+         First_Component  : Entity_Id := First_Entity (RTE (RE_Dim3));\n+         Second_Component : Entity_Id := Next_Entity (First_Component);\n+         Third_Component  : Entity_Id := Next_Entity (Second_Component);\n       begin\n+\n+         --  Sem_prag.adb ensured that Init_Val is either a Dim3, an\n+         --  aggregate of three Any_Integers or Any_Integer.\n+\n+         --  If Init_Val is a Dim3, use each of its components.\n+\n          if Etype (Init_Val) = RTE (RE_Dim3) then\n-            Init_Value := Init_Val;\n+            Dim_X := Make_Selected_Component (Loc,\n+              Prefix        => New_Occurrence_Of (Entity (Init_Val), Loc),\n+              Selector_Name => New_Occurrence_Of (First_Component, Loc));\n+\n+            Dim_Y := Make_Selected_Component (Loc,\n+              Prefix        => New_Occurrence_Of (Entity (Init_Val), Loc),\n+              Selector_Name => New_Occurrence_Of (Second_Component, Loc));\n+\n+            Dim_Z := Make_Selected_Component (Loc,\n+              Prefix        => New_Occurrence_Of (Entity (Init_Val), Loc),\n+              Selector_Name => New_Occurrence_Of (Third_Component, Loc));\n          else\n             --  If Init_Val is an aggregate, use each of its arguments\n \n             if Nkind (Init_Val) = N_Aggregate then\n-               Grid_Dim_X := First (Expressions (Init_Val));\n-               Grid_Dim_Y := Next (Grid_Dim_X);\n-               Grid_Dim_Z := Next (Grid_Dim_Y);\n+               Dim_X := First (Expressions (Init_Val));\n+               Dim_Y := Next (Dim_X);\n+               Dim_Z := Next (Dim_Y);\n \n             --  Otherwise, we know it is an integer and the rest defaults to 1.\n \n             else\n-               Grid_Dim_X := Init_Val;\n-               Grid_Dim_Y := Make_Integer_Literal (Loc, 1);\n-               Grid_Dim_Z := Make_Integer_Literal (Loc, 1);\n+               Dim_X := Init_Val;\n+               Dim_Y := Make_Integer_Literal (Loc, 1);\n+               Dim_Z := Make_Integer_Literal (Loc, 1);\n             end if;\n-\n-            --  Then cast every value to Interfaces.C.Unsigned and build an\n-            --  aggregate we can use to initialize the Dim3.\n-\n-            Init_Value :=\n-              Make_Aggregate (Loc,\n-                Expressions => New_List (\n-                  Make_Type_Conversion (Loc,\n-                    Subtype_Mark =>\n-                      New_Occurrence_Of (RTE (RO_IC_Unsigned), Loc),\n-                    Expression   => New_Copy_Tree (Grid_Dim_X)),\n-\n-                  Make_Type_Conversion (Loc,\n-                    Subtype_Mark =>\n-                      New_Occurrence_Of (RTE (RO_IC_Unsigned), Loc),\n-                    Expression   => New_Copy_Tree (Grid_Dim_Y)),\n-\n-                  Make_Type_Conversion (Loc,\n-                    Subtype_Mark =>\n-                      New_Occurrence_Of (RTE (RO_IC_Unsigned), Loc),\n-                    Expression   => New_Copy_Tree (Grid_Dim_Z))));\n          end if;\n \n-         --  Finally return the declaration\n+         First_Component  := First_Entity (Internal_Dim3);\n+         Second_Component := Next_Entity (First_Component);\n+         Third_Component  := Next_Entity (Second_Component);\n+\n+         --  Finally return the CUDA.Internal.Dim3 declaration with an\n+         --  aggregate initialization expression.\n \n          return Make_Object_Declaration (Loc,\n             Defining_Identifier => Decl_Id,\n-            Object_Definition   => New_Occurrence_Of (RTE (RE_Dim3), Loc),\n-            Expression          => Init_Value);\n+            Object_Definition   => New_Occurrence_Of (Internal_Dim3, Loc),\n+            Expression          => Make_Aggregate (Loc,\n+              Expressions => New_List (\n+                 Make_Type_Conversion (Loc,\n+                   Subtype_Mark =>\n+                     New_Occurrence_Of (Etype (First_Component), Loc),\n+                   Expression   => New_Copy_Tree (Dim_X)),\n+                 Make_Type_Conversion (Loc,\n+                   Subtype_Mark =>\n+                     New_Occurrence_Of (Etype (Second_Component), Loc),\n+                   Expression   => New_Copy_Tree (Dim_Y)),\n+                 Make_Type_Conversion (Loc,\n+                   Subtype_Mark =>\n+                     New_Occurrence_Of (Etype (Third_Component), Loc),\n+                   Expression   => New_Copy_Tree (Dim_Z)))));\n       end Build_Dim3_Declaration;\n \n       -----------------------------------\n@@ -914,7 +943,8 @@ package body Exp_Prag is\n            (Decl_Id     => Decl_Id,\n             Init_Val    => Init_Val,\n             Typ         =>\n-              New_Occurrence_Of (Get_Launch_Kernel_Arg_Type (5), Loc),\n+              New_Occurrence_Of\n+                (Get_Nth_Arg_Type (RTE (RE_Launch_Kernel), 5), Loc),\n             Default_Val => Make_Integer_Literal (Loc, 0));\n       end Build_Shared_Memory_Declaration;\n \n@@ -953,23 +983,27 @@ package body Exp_Prag is\n            (Decl_Id     => Decl_Id,\n             Init_Val    => Init_Val,\n             Typ         =>\n-              New_Occurrence_Of (Get_Launch_Kernel_Arg_Type (6), Loc),\n+              New_Occurrence_Of\n+                (Get_Nth_Arg_Type (RTE (RE_Launch_Kernel), 6), Loc),\n             Default_Val => Make_Null (Loc));\n       end Build_Stream_Declaration;\n \n-      --------------------------------\n-      -- Get_Launch_Kernel_Arg_Type --\n-      --------------------------------\n+      ----------------------\n+      -- Get_Nth_Arg_Type --\n+      ----------------------\n \n-      function Get_Launch_Kernel_Arg_Type (N : Positive) return Entity_Id is\n-         Argument : Entity_Id := First_Entity (RTE (RE_Launch_Kernel));\n+      function Get_Nth_Arg_Type\n+         (Subprogram : Entity_Id;\n+          N          : Positive) return Entity_Id\n+      is\n+         Argument : Entity_Id := First_Entity (Subprogram);\n       begin\n          for J in 2 .. N loop\n             Argument := Next_Entity (Argument);\n          end loop;\n \n          return Etype (Argument);\n-      end Get_Launch_Kernel_Arg_Type;\n+      end Get_Nth_Arg_Type;\n \n       ------------------\n       -- To_Addresses --\n@@ -1005,13 +1039,30 @@ package body Exp_Prag is\n       Shared_Memory    : constant Node_Id := Get_Pragma_Arg (Arg_N (N, 4));\n       CUDA_Stream      : constant Node_Id := Get_Pragma_Arg (Arg_N (N, 5));\n \n-      --  Entities of objects that capture the value of pragma arguments\n-\n+      --  Entities of objects that will be overwritten by calls to cuda runtime\n       Grids_Id  : constant Entity_Id := Make_Temporary (Loc, 'C');\n       Blocks_Id : constant Entity_Id := Make_Temporary (Loc, 'C');\n       Memory_Id : constant Entity_Id := Make_Temporary (Loc, 'C');\n       Stream_Id : constant Entity_Id := Make_Temporary (Loc, 'C');\n \n+      --  Entities of objects that capture the value of pragma arguments\n+      Temp_Grid  : constant Entity_Id := Make_Temporary (Loc, 'C');\n+      Temp_Block : constant Entity_Id := Make_Temporary (Loc, 'C');\n+\n+      --  Declarations for temporary block and grids. These needs to be stored\n+      --  in temporary declarations as the expressions will need to be\n+      --  referenced multiple times but could have side effects.\n+      Temp_Grid_Decl : constant Node_Id := Make_Object_Declaration (Loc,\n+        Defining_Identifier => Temp_Grid,\n+        Object_Definition   =>\n+          New_Occurrence_Of (Etype (Grid_Dimensions), Loc),\n+        Expression          => Grid_Dimensions);\n+      Temp_Block_Decl : constant Node_Id := Make_Object_Declaration (Loc,\n+        Defining_Identifier => Temp_Block,\n+        Object_Definition   =>\n+          New_Occurrence_Of (Etype (Block_Dimensions), Loc),\n+        Expression          => Block_Dimensions);\n+\n       --  List holding the entities of the copies of Procedure_Call's\n       --  arguments.\n \n@@ -1035,14 +1086,25 @@ package body Exp_Prag is\n    --  Start of processing for CUDA_Execute\n \n    begin\n+      --  Append temporary declarations\n+\n+      Append_To (Blk_Decls, Temp_Grid_Decl);\n+      Analyze (Temp_Grid_Decl);\n+\n+      Append_To (Blk_Decls, Temp_Block_Decl);\n+      Analyze (Temp_Block_Decl);\n+\n       --  Build parameter declarations for CUDA API calls\n \n       Append_To\n-        (Blk_Decls, Build_Dim3_Declaration (Grids_Id, Grid_Dimensions));\n+        (Blk_Decls,\n+         Build_Dim3_Declaration\n+           (Grids_Id, New_Occurrence_Of (Temp_Grid, Loc)));\n \n       Append_To\n         (Blk_Decls,\n-         Build_Dim3_Declaration (Blocks_Id, Block_Dimensions));\n+         Build_Dim3_Declaration\n+           (Blocks_Id, New_Occurrence_Of (Temp_Block, Loc)));\n \n       Append_To\n         (Blk_Decls,"}, {"sha": "42578dbef3202771acdac89a874ed7e44c41f2de", "filename": "gcc/ada/rtsfind.ads", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c12e23c46785088da90ffc6dcfaca0aada4f2fb6/gcc%2Fada%2Frtsfind.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c12e23c46785088da90ffc6dcfaca0aada4f2fb6/gcc%2Fada%2Frtsfind.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frtsfind.ads?ref=c12e23c46785088da90ffc6dcfaca0aada4f2fb6", "patch": "@@ -709,14 +709,13 @@ package Rtsfind is\n      RE_Stream_T,                        -- CUDA.Driver_Types\n \n      RE_Fatbin_Wrapper,                  -- CUDA.Internal\n-     RE_Push_Call_Configuration,         -- CUDA.Internal\n+     RE_Launch_Kernel,                   -- CUDA.Internal\n      RE_Pop_Call_Configuration,          -- CUDA.Internal\n+     RE_Push_Call_Configuration,         -- CUDA.Internal\n      RE_Register_Fat_Binary,             -- CUDA.Internal\n      RE_Register_Fat_Binary_End,         -- CUDA.Internal\n      RE_Register_Function,               -- CUDA.Internal\n \n-     RE_Launch_Kernel,                   -- CUDA.Runtime_Api\n-\n      RE_Dim3,                            -- CUDA.Vector_Types\n \n      RE_Integer_8,                       -- Interfaces\n@@ -2357,14 +2356,13 @@ package Rtsfind is\n      RE_Stream_T                         => CUDA_Driver_Types,\n \n      RE_Fatbin_Wrapper                   => CUDA_Internal,\n-     RE_Push_Call_Configuration          => CUDA_Internal,\n+     RE_Launch_Kernel                    => CUDA_Internal,\n      RE_Pop_Call_Configuration           => CUDA_Internal,\n+     RE_Push_Call_Configuration          => CUDA_Internal,\n      RE_Register_Fat_Binary              => CUDA_Internal,\n      RE_Register_Fat_Binary_End          => CUDA_Internal,\n      RE_Register_Function                => CUDA_Internal,\n \n-     RE_Launch_Kernel                    => CUDA_Runtime_Api,\n-\n      RE_Dim3                             => CUDA_Vector_Types,\n \n      RE_Integer_8                        => Interfaces,"}]}