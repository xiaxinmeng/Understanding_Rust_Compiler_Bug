{"sha": "8f17e00c2f57c10af41495a8de03f944e4ec0648", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGYxN2UwMGMyZjU3YzEwYWY0MTQ5NWE4ZGUwM2Y5NDRlNGVjMDY0OA==", "commit": {"author": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2011-02-24T21:51:39Z"}, "committer": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2011-02-24T21:51:39Z"}, "message": "PR 47802 Use strftime for CTIME and FDATE intrinsics\n\nFrom-SVN: r170478", "tree": {"sha": "2a641f6a7dbe42592aa100fae7f9736fcb97a7bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2a641f6a7dbe42592aa100fae7f9736fcb97a7bd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8f17e00c2f57c10af41495a8de03f944e4ec0648", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f17e00c2f57c10af41495a8de03f944e4ec0648", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f17e00c2f57c10af41495a8de03f944e4ec0648", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f17e00c2f57c10af41495a8de03f944e4ec0648/comments", "author": null, "committer": null, "parents": [{"sha": "ef795fc25033c60df465b8100644ddde84181cc6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef795fc25033c60df465b8100644ddde84181cc6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef795fc25033c60df465b8100644ddde84181cc6"}], "stats": {"total": 218, "additions": 91, "deletions": 127}, "files": [{"sha": "fc7a2c4ca6dcdcf8f230c908f44c7ade95bdafd5", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f17e00c2f57c10af41495a8de03f944e4ec0648/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f17e00c2f57c10af41495a8de03f944e4ec0648/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=8f17e00c2f57c10af41495a8de03f944e4ec0648", "patch": "@@ -1,3 +1,21 @@\n+2011-02-24  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+\tPR libfortran/47802\n+\t* config.h.in: Regenerated.\n+\t* configure: Regenerated.\n+\t* configure.ac: Remove checks for ctime and ctime_r, add check for\n+\tstrftime.\n+\t* intrinsics/date_and_time.c (localtime_r): Move fallback\n+\timplementation to time_1.h.\n+\t* intrinsics/time_1.h (localtime_r): Fallback implementation.\n+\t* intrinsics/ctime.c: Include time_1.h.\n+\t(ctime_r): Remove fallback implementation.\n+\t(strctime): New function.\n+\t(fdate): Use strctime instead of ctime_r.\n+\t(fdate_sub): Likewise.\n+\t(ctime): Likewise.\n+\t(ctime_sub): Likewise.\n+\n 2011-02-24  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR fortran/47878"}, {"sha": "a255bdccf30daf442ccf89fcd3a9c430f0bc3581", "filename": "libgfortran/config.h.in", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f17e00c2f57c10af41495a8de03f944e4ec0648/libgfortran%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f17e00c2f57c10af41495a8de03f944e4ec0648/libgfortran%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfig.h.in?ref=8f17e00c2f57c10af41495a8de03f944e4ec0648", "patch": "@@ -318,12 +318,6 @@\n /* libm includes ctanl */\n #undef HAVE_CTANL\n \n-/* Define to 1 if you have the `ctime' function. */\n-#undef HAVE_CTIME\n-\n-/* Define to 1 if you have the `ctime_r' function. */\n-#undef HAVE_CTIME_R\n-\n /* Define to 1 if you have the <dlfcn.h> header file. */\n #undef HAVE_DLFCN_H\n \n@@ -723,6 +717,9 @@\n /* Define to 1 if you have the `strerror_r' function. */\n #undef HAVE_STRERROR_R\n \n+/* Define to 1 if you have the `strftime' function. */\n+#undef HAVE_STRFTIME\n+\n /* Define to 1 if you have the <strings.h> header file. */\n #undef HAVE_STRINGS_H\n "}, {"sha": "749cd00065100fbaa0dfd2cbfa5610ae4dfdd34a", "filename": "libgfortran/configure", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f17e00c2f57c10af41495a8de03f944e4ec0648/libgfortran%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f17e00c2f57c10af41495a8de03f944e4ec0648/libgfortran%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfigure?ref=8f17e00c2f57c10af41495a8de03f944e4ec0648", "patch": "@@ -16312,7 +16312,7 @@ _ACEOF\n fi\n done\n \n-for ac_func in sleep time ttyname signal alarm ctime clock access fork execl\n+for ac_func in sleep time ttyname signal alarm clock access fork execl\n do :\n   as_ac_var=`$as_echo \"ac_cv_func_$ac_func\" | $as_tr_sh`\n ac_fn_c_check_func \"$LINENO\" \"$ac_func\" \"$as_ac_var\"\n@@ -16351,7 +16351,7 @@ _ACEOF\n fi\n done\n \n-for ac_func in localtime_r gmtime_r strerror_r getpwuid_r ttyname_r ctime_r\n+for ac_func in localtime_r gmtime_r strerror_r getpwuid_r ttyname_r\n do :\n   as_ac_var=`$as_echo \"ac_cv_func_$ac_func\" | $as_tr_sh`\n ac_fn_c_check_func \"$LINENO\" \"$ac_func\" \"$as_ac_var\"\n@@ -16364,12 +16364,14 @@ _ACEOF\n fi\n done\n \n-for ac_func in clock_gettime\n+for ac_func in clock_gettime strftime\n do :\n-  ac_fn_c_check_func \"$LINENO\" \"clock_gettime\" \"ac_cv_func_clock_gettime\"\n-if test \"x$ac_cv_func_clock_gettime\" = x\"\"yes; then :\n+  as_ac_var=`$as_echo \"ac_cv_func_$ac_func\" | $as_tr_sh`\n+ac_fn_c_check_func \"$LINENO\" \"$ac_func\" \"$as_ac_var\"\n+eval as_val=\\$$as_ac_var\n+   if test \"x$as_val\" = x\"\"yes; then :\n   cat >>confdefs.h <<_ACEOF\n-#define HAVE_CLOCK_GETTIME 1\n+#define `$as_echo \"HAVE_$ac_func\" | $as_tr_cpp` 1\n _ACEOF\n \n fi"}, {"sha": "66468dbc035bdd564906e309a9327b045e49a5be", "filename": "libgfortran/configure.ac", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f17e00c2f57c10af41495a8de03f944e4ec0648/libgfortran%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f17e00c2f57c10af41495a8de03f944e4ec0648/libgfortran%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfigure.ac?ref=8f17e00c2f57c10af41495a8de03f944e4ec0648", "patch": "@@ -248,11 +248,11 @@ AC_CHECK_MEMBERS([struct stat.st_rdev])\n # Check for library functions.\n AC_CHECK_FUNCS(getrusage times mkstemp strtof strtold snprintf ftruncate chsize)\n AC_CHECK_FUNCS(chdir strerror getlogin gethostname kill link symlink perror)\n-AC_CHECK_FUNCS(sleep time ttyname signal alarm ctime clock access fork execl)\n+AC_CHECK_FUNCS(sleep time ttyname signal alarm clock access fork execl)\n AC_CHECK_FUNCS(wait setmode execvp pipe dup2 close fdopen strcasestr getrlimit)\n AC_CHECK_FUNCS(gettimeofday stat fstat lstat getpwuid vsnprintf dup getcwd)\n-AC_CHECK_FUNCS(localtime_r gmtime_r strerror_r getpwuid_r ttyname_r ctime_r)\n-AC_CHECK_FUNCS(clock_gettime)\n+AC_CHECK_FUNCS(localtime_r gmtime_r strerror_r getpwuid_r ttyname_r)\n+AC_CHECK_FUNCS(clock_gettime strftime)\n \n # Check for glibc backtrace functions\n AC_CHECK_FUNCS(backtrace backtrace_symbols)"}, {"sha": "7eb10f5fa2cf0edd4ff7c542c57cf2c3d46bb0c8", "filename": "libgfortran/intrinsics/ctime.c", "status": "modified", "additions": 35, "deletions": 94, "changes": 129, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f17e00c2f57c10af41495a8de03f944e4ec0648/libgfortran%2Fintrinsics%2Fctime.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f17e00c2f57c10af41495a8de03f944e4ec0648/libgfortran%2Fintrinsics%2Fctime.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fctime.c?ref=8f17e00c2f57c10af41495a8de03f944e4ec0648", "patch": "@@ -25,72 +25,47 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n \n #include \"libgfortran.h\"\n \n-#ifdef TIME_WITH_SYS_TIME\n-#  include <sys/time.h>\n-#  include <time.h>\n-#else\n-#  if HAVE_SYS_TIME_H\n-#    include <sys/time.h>\n-#  else\n-#    ifdef HAVE_TIME_H\n-#      include <time.h>\n-#    endif\n-#  endif\n-#endif\n+#include \"time_1.h\"\n \n #include <string.h>\n \n \n-#ifndef HAVE_CTIME_R\n-/* Make sure we don't see here a macro.  */\n-#undef ctime_r\n+/* strftime-like function that fills a C string with %c format which\n+   is identical to ctime in the default locale. As ctime and ctime_r\n+   are poorly specified and their usage not recommended, the\n+   implementation instead uses strftime.  */\n \n-static char *\n-ctime_r (const time_t * timep, char * buf __attribute__((unused)))\n+static size_t\n+strctime (char *s, size_t max, const time_t *timep)\n {\n-#ifdef HAVE_CTIME\n-  char *tmp = ctime (timep);\n-  if (tmp)\n-    tmp = strcpy (buf, tmp);\n-  return tmp;\n+#ifdef HAVE_STRFTIME\n+  struct tm res;\n+  struct tm *ltm = localtime_r (timep, &res);\n+  return strftime (s, max, \"%c\", ltm);\n #else\n-  return NULL;\n+  return 0;\n #endif\n }\n-#endif\n \n-/* ctime_r() buffer size needs to be at least 26 bytes.  */\n-#define CSZ 26\n+/* In the default locale, the date and time representation fits in 26\n+   bytes. However, other locales might need more space.  */\n+#define CSZ 100\n \n extern void fdate (char **, gfc_charlen_type *);\n export_proto(fdate);\n \n void\n fdate (char ** date, gfc_charlen_type * date_len)\n {\n-#if defined(HAVE_TIME) && defined(HAVE_CTIME)\n-  char cbuf[CSZ];\n-  int i;\n+#if defined(HAVE_TIME)\n   time_t now = time(NULL);\n-  *date = ctime_r (&now, cbuf);\n-  if (*date != NULL)\n-    {\n-      *date = strdup (*date);\n-      *date_len = strlen (*date);\n-\n-      i = 0;\n-      while ((*date)[i])\n-       {\n-         if ((*date)[i] == '\\n')\n-           (*date)[i] = ' ';\n-         i++;\n-       }\n-      return;\n-    }\n-#endif\n+  *date = get_mem (CSZ);\n+  *date_len = strctime (*date, CSZ, &now);\n+#else\n \n   *date = NULL;\n   *date_len = 0;\n+#endif\n }\n \n \n@@ -100,22 +75,14 @@ export_proto(fdate_sub);\n void\n fdate_sub (char * date, gfc_charlen_type date_len)\n {\n-#if defined(HAVE_TIME) && defined(HAVE_CTIME)\n-  char cbuf[CSZ];\n-  int i;\n-  char *d;\n+#if defined(HAVE_TIME)\n   time_t now = time(NULL);\n-#endif\n-  \n+  char *s = get_mem (date_len + 1);\n+  size_t n = strctime (s, date_len + 1, &now);\n+  fstrcpy (date, date_len, s, n);\n+  free (s);\n+#else\n   memset (date, ' ', date_len);\n-#if defined(HAVE_TIME) && defined(HAVE_CTIME)\n-  d = ctime_r (&now, cbuf);\n-  if (d != NULL)\n-    {\n-      i = 0;\n-      while (*d && *d != '\\n' && i < date_len)\n-       date[i++] = *(d++);\n-    }\n #endif\n }\n \n@@ -127,29 +94,15 @@ export_proto_np(PREFIX(ctime));\n void\n PREFIX(ctime) (char ** date, gfc_charlen_type * date_len, GFC_INTEGER_8 t)\n {\n-#if defined(HAVE_CTIME)\n-  char cbuf[CSZ];\n+#if defined(HAVE_TIME)\n   time_t now = t;\n-  int i;\n-  *date = ctime_r (&now, cbuf);\n-  if (*date != NULL)\n-    {\n-      *date = strdup (*date);\n-      *date_len = strlen (*date);\n-\n-      i = 0;\n-      while ((*date)[i])\n-       {\n-         if ((*date)[i] == '\\n')\n-           (*date)[i] = ' ';\n-         i++;\n-       }\n-      return;\n-    }\n-#endif\n+  *date = get_mem (CSZ);\n+  *date_len = strctime (*date, CSZ, &now);\n+#else\n \n   *date = NULL;\n   *date_len = 0;\n+#endif\n }\n \n \n@@ -159,21 +112,9 @@ export_proto(ctime_sub);\n void\n ctime_sub (GFC_INTEGER_8 * t, char * date, gfc_charlen_type date_len)\n {\n-#if defined(HAVE_CTIME)\n-  char cbuf[CSZ];\n-  int i;\n-  char *d;\n   time_t now = *t;\n-#endif\n-  \n-  memset (date, ' ', date_len);\n-#if defined(HAVE_CTIME)\n-  d = ctime_r (&now, cbuf);\n-  if (d != NULL)\n-    {\n-      i = 0;\n-      while (*d && *d != '\\n' && i < date_len)\n-       date[i++] = *(d++);\n-    }\n-#endif\n+  char *s = get_mem (date_len + 1);\n+  size_t n = strctime (s, date_len + 1, &now);\n+  fstrcpy (date, date_len, s, n);\n+  free (s);\n }"}, {"sha": "793df687fb9a9d718ace38a749f8c76cc9059170", "filename": "libgfortran/intrinsics/date_and_time.c", "status": "modified", "additions": 4, "deletions": 18, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f17e00c2f57c10af41495a8de03f944e4ec0648/libgfortran%2Fintrinsics%2Fdate_and_time.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f17e00c2f57c10af41495a8de03f944e4ec0648/libgfortran%2Fintrinsics%2Fdate_and_time.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fdate_and_time.c?ref=8f17e00c2f57c10af41495a8de03f944e4ec0648", "patch": "@@ -36,24 +36,10 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #endif\n \n \n-/* If the re-entrant versions of localtime and gmtime are not\n-   available, provide fallback implementations.  On some targets where\n-   the _r versions are not available, localtime and gmtime use\n-   thread-local storage so they are threadsafe.  */\n-\n-#ifndef HAVE_LOCALTIME_R\n-/* If _POSIX is defined localtime_r gets defined by mingw-w64 headers.  */\n-#ifdef localtime_r\n-#undef localtime_r\n-#endif\n-\n-static struct tm *\n-localtime_r (const time_t * timep, struct tm * result)\n-{\n-  *result = *localtime (timep);\n-  return result;\n-}\n-#endif\n+/* If the re-entrant version of gmtime is not available, provide a\n+   fallback implementation.  On some targets where the _r version is\n+   not available, gmtime uses thread-local storage so it's\n+   threadsafe.  */\n \n #ifndef HAVE_GMTIME_R\n /* If _POSIX is defined gmtime_r gets defined by mingw-w64 headers.  */"}, {"sha": "12d79ebc12fecf52baa0895c7ab8accc41dab500", "filename": "libgfortran/intrinsics/time_1.h", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f17e00c2f57c10af41495a8de03f944e4ec0648/libgfortran%2Fintrinsics%2Ftime_1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f17e00c2f57c10af41495a8de03f944e4ec0648/libgfortran%2Fintrinsics%2Ftime_1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Ftime_1.h?ref=8f17e00c2f57c10af41495a8de03f944e4ec0648", "patch": "@@ -84,6 +84,26 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #endif  /* !HAVE_GETRUSAGE || !HAVE_SYS_RESOURCE_H  */\n \n \n+/* If the re-entrant version of localtime is not available, provide a\n+   fallback implementation.  On some targets where the _r version is\n+   not available, localtime uses thread-local storage so it's\n+   threadsafe.  */\n+\n+#ifndef HAVE_LOCALTIME_R\n+/* If _POSIX is defined localtime_r gets defined by mingw-w64 headers.  */\n+#ifdef localtime_r\n+#undef localtime_r\n+#endif\n+\n+static inline struct tm *\n+localtime_r (const time_t * timep, struct tm * result)\n+{\n+  *result = *localtime (timep);\n+  return result;\n+}\n+#endif\n+\n+\n #if defined (__GNUC__) && (__GNUC__ >= 3)\n #  define ATTRIBUTE_ALWAYS_INLINE __attribute__ ((__always_inline__))\n #else"}]}