{"sha": "74745ec578126af6bb3f9d68bcfaab0ba9e6039d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzQ3NDVlYzU3ODEyNmFmNmJiM2Y5ZDY4YmNmYWFiMGJhOWU2MDM5ZA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2008-08-17T10:19:34Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2008-08-17T10:19:34Z"}, "message": "acinclude.m4 ([GLIBCXX_CHECK_LFS], [...]): Use GCC_TRY_COMPILE_OR_LINK instead of AC_TRY_LINK...\n\n2008-08-17  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* acinclude.m4 ([GLIBCXX_CHECK_LFS], [GLIBCXX_CHECK_POLL],\n\t[GLIBCXX_CHECK_S_ISREG_OR_S_IFREG], [GLIBCXX_CHECK_WRITEV]):\n\tUse GCC_TRY_COMPILE_OR_LINK instead of AC_TRY_LINK, in C++,\n\twith -fno-exceptions as flags.\n\t* configure.ac: Run unconditionally GLIBCXX_CHECK_LFS,\n\tGLIBCXX_CHECK_POLL, GLIBCXX_CHECK_S_ISREG_OR_S_IFREG,\n\tGLIBCXX_CHECK_WRITEV and commonized AC_CHECK_HEADERS. \n\t* crossconfig.m4: Adjust; remove AC_CHECK_HEADERS commonized\n\tin configure.ac.\n\t* configure: Regenerate.\n\nFrom-SVN: r139168", "tree": {"sha": "2b755621212e4b743c6980e6a4b886daa98e2964", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2b755621212e4b743c6980e6a4b886daa98e2964"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/74745ec578126af6bb3f9d68bcfaab0ba9e6039d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74745ec578126af6bb3f9d68bcfaab0ba9e6039d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74745ec578126af6bb3f9d68bcfaab0ba9e6039d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74745ec578126af6bb3f9d68bcfaab0ba9e6039d/comments", "author": null, "committer": null, "parents": [{"sha": "c8bbc9ef2a33fcf34118362e6361760f179d0908", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8bbc9ef2a33fcf34118362e6361760f179d0908", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8bbc9ef2a33fcf34118362e6361760f179d0908"}], "stats": {"total": 39366, "additions": 17962, "deletions": 21404}, "files": [{"sha": "ce3eb341b6356c4b78ad3686873f5a3398dd7f01", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74745ec578126af6bb3f9d68bcfaab0ba9e6039d/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74745ec578126af6bb3f9d68bcfaab0ba9e6039d/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=74745ec578126af6bb3f9d68bcfaab0ba9e6039d", "patch": "@@ -1,3 +1,16 @@\n+2008-08-17  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* acinclude.m4 ([GLIBCXX_CHECK_LFS], [GLIBCXX_CHECK_POLL],\n+\t[GLIBCXX_CHECK_S_ISREG_OR_S_IFREG], [GLIBCXX_CHECK_WRITEV]):\n+\tUse GCC_TRY_COMPILE_OR_LINK instead of AC_TRY_LINK, in C++,\n+\twith -fno-exceptions as flags.\n+\t* configure.ac: Run unconditionally GLIBCXX_CHECK_LFS,\n+\tGLIBCXX_CHECK_POLL, GLIBCXX_CHECK_S_ISREG_OR_S_IFREG,\n+\tGLIBCXX_CHECK_WRITEV and commonized AC_CHECK_HEADERS. \n+\t* crossconfig.m4: Adjust; remove AC_CHECK_HEADERS commonized\n+\tin configure.ac.\n+\t* configure: Regenerate.\n+\n 2008-08-13  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tRe-instate last patch, amended to use __exchange_and_add_dispatch"}, {"sha": "3c3bcfb7198c5405451cee74b56250f4a13b647d", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 32, "deletions": 5, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74745ec578126af6bb3f9d68bcfaab0ba9e6039d/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74745ec578126af6bb3f9d68bcfaab0ba9e6039d/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=74745ec578126af6bb3f9d68bcfaab0ba9e6039d", "patch": "@@ -390,9 +390,15 @@ dnl Check whether S_ISREG (Posix) or S_IFREG is available in <sys/stat.h>.\n dnl Define HAVE_S_ISREG / HAVE_S_IFREG appropriately.\n dnl\n AC_DEFUN([GLIBCXX_CHECK_S_ISREG_OR_S_IFREG], [\n+\n+  AC_LANG_SAVE\n+  AC_LANG_CPLUSPLUS\n+  ac_save_CXXFLAGS=\"$CXXFLAGS\"\n+  CXXFLAGS=\"$CXXFLAGS -fno-exceptions\"\n+\n   AC_MSG_CHECKING([for S_ISREG or S_IFREG])\n   AC_CACHE_VAL(glibcxx_cv_S_ISREG, [\n-    AC_TRY_LINK(\n+    GCC_TRY_COMPILE_OR_LINK(\n       [#include <sys/stat.h>],\n       [struct stat buffer;\n        fstat(0, &buffer);\n@@ -401,7 +407,7 @@ AC_DEFUN([GLIBCXX_CHECK_S_ISREG_OR_S_IFREG], [\n       [glibcxx_cv_S_ISREG=no])\n   ])\n   AC_CACHE_VAL(glibcxx_cv_S_IFREG, [\n-    AC_TRY_LINK(\n+    GCC_TRY_COMPILE_OR_LINK(\n       [#include <sys/stat.h>],\n       [struct stat buffer;\n        fstat(0, &buffer);\n@@ -420,16 +426,25 @@ AC_DEFUN([GLIBCXX_CHECK_S_ISREG_OR_S_IFREG], [\n     res=S_IFREG\n   fi\n   AC_MSG_RESULT($res)\n+\n+  CXXFLAGS=\"$ac_save_CXXFLAGS\"\n+  AC_LANG_RESTORE\n ])\n \n \n dnl\n dnl Check whether poll is available in <poll.h>, and define HAVE_POLL.\n dnl\n AC_DEFUN([GLIBCXX_CHECK_POLL], [\n+\n+  AC_LANG_SAVE\n+  AC_LANG_CPLUSPLUS\n+  ac_save_CXXFLAGS=\"$CXXFLAGS\"\n+  CXXFLAGS=\"$CXXFLAGS -fno-exceptions\"\n+\n   AC_MSG_CHECKING([for poll])\n   AC_CACHE_VAL(glibcxx_cv_POLL, [\n-    AC_TRY_LINK(\n+    GCC_TRY_COMPILE_OR_LINK(\n       [#include <poll.h>],\n       [struct pollfd pfd[1];\n        pfd[0].events = POLLIN;\n@@ -441,16 +456,25 @@ AC_DEFUN([GLIBCXX_CHECK_POLL], [\n     AC_DEFINE(HAVE_POLL, 1, [Define if poll is available in <poll.h>.])\n   fi\n   AC_MSG_RESULT($glibcxx_cv_POLL)\n+\n+  CXXFLAGS=\"$ac_save_CXXFLAGS\"\n+  AC_LANG_RESTORE\n ])\n \n \n dnl\n dnl Check whether writev is available in <sys/uio.h>, and define HAVE_WRITEV.\n dnl\n AC_DEFUN([GLIBCXX_CHECK_WRITEV], [\n+\n+  AC_LANG_SAVE\n+  AC_LANG_CPLUSPLUS\n+  ac_save_CXXFLAGS=\"$CXXFLAGS\"\n+  CXXFLAGS=\"$CXXFLAGS -fno-exceptions\"\n+\n   AC_MSG_CHECKING([for writev])\n   AC_CACHE_VAL(glibcxx_cv_WRITEV, [\n-    AC_TRY_LINK(\n+    GCC_TRY_COMPILE_OR_LINK(\n       [#include <sys/uio.h>],\n       [struct iovec iov[2];\n        writev(0, iov, 0);],\n@@ -461,6 +485,9 @@ AC_DEFUN([GLIBCXX_CHECK_WRITEV], [\n     AC_DEFINE(HAVE_WRITEV, 1, [Define if writev is available in <sys/uio.h>.])\n   fi\n   AC_MSG_RESULT($glibcxx_cv_WRITEV)\n+\n+  CXXFLAGS=\"$ac_save_CXXFLAGS\"\n+  AC_LANG_RESTORE\n ])\n \n \n@@ -531,7 +558,7 @@ AC_DEFUN([GLIBCXX_CHECK_LFS], [\n   CXXFLAGS=\"$CXXFLAGS -fno-exceptions\"\t\n   AC_MSG_CHECKING([for LFS support])\n   AC_CACHE_VAL(glibcxx_cv_LFS, [\n-    AC_TRY_LINK(\n+    GCC_TRY_COMPILE_OR_LINK(\n       [#include <unistd.h>\n        #include <stdio.h>\n        #include <sys/stat.h>"}, {"sha": "c81c7ed5554320f4748d1a25395f3da24079c15f", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 17897, "deletions": 21299, "changes": 39196, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74745ec578126af6bb3f9d68bcfaab0ba9e6039d/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74745ec578126af6bb3f9d68bcfaab0ba9e6039d/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=74745ec578126af6bb3f9d68bcfaab0ba9e6039d"}, {"sha": "66b6b8d6a203c1842f130f1668c9e71a74101f00", "filename": "libstdc++-v3/configure.ac", "status": "modified", "additions": 19, "deletions": 17, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74745ec578126af6bb3f9d68bcfaab0ba9e6039d/libstdc%2B%2B-v3%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74745ec578126af6bb3f9d68bcfaab0ba9e6039d/libstdc%2B%2B-v3%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.ac?ref=74745ec578126af6bb3f9d68bcfaab0ba9e6039d", "patch": "@@ -125,41 +125,43 @@ GLIBCXX_CHECK_SYSTEM_ERROR\n # For the streamoff typedef.\n GLIBCXX_CHECK_INT64_T\n \n+# For LFS support.\n+GLIBCXX_CHECK_LFS\n+\n+# For showmanyc_helper().\n+AC_CHECK_HEADERS(sys/ioctl.h sys/filio.h)\n+GLIBCXX_CHECK_POLL\n+GLIBCXX_CHECK_S_ISREG_OR_S_IFREG\n+\n+# For xsputn_2().\n+AC_CHECK_HEADERS(sys/uio.h)\n+GLIBCXX_CHECK_WRITEV\n+\n # For C99 support to TR1.\n GLIBCXX_CHECK_C99_TR1\n \n # For common values of EOF, SEEK_CUR, SEEK_END.\n GLIBCXX_CHECK_STDIO_MACROS\n \n+# Check for available headers.\n+AC_CHECK_HEADERS([endian.h float.h fp.h ieeefp.h inttypes.h locale.h \\\n+machine/endian.h machine/param.h nan.h stdint.h stdlib.h string.h \\\n+strings.h sys/ipc.h sys/isa_defs.h sys/machine.h sys/param.h \\\n+sys/resource.h sys/sem.h sys/stat.h sys/time.h sys/types.h unistd.h \\\n+wchar.h wctype.h])\n+\n # Only do link tests if native. Else, hardcode.\n if $GLIBCXX_IS_NATIVE; then\n \n   # We can do more elaborate tests that assume a working linker.\n   CANADIAN=no\n \n-  # Check for available headers.\n-  AC_CHECK_HEADERS([nan.h ieeefp.h endian.h sys/isa_defs.h machine/endian.h \\\n-  machine/param.h sys/machine.h fp.h locale.h float.h inttypes.h \\\n-  sys/types.h sys/ipc.h sys/sem.h])\n-\n   GLIBCXX_CHECK_LINKER_FEATURES\n   GLIBCXX_CHECK_MATH_SUPPORT\n   GLIBCXX_CHECK_BUILTIN_MATH_SUPPORT\n   GLIBCXX_CHECK_COMPLEX_MATH_SUPPORT\n   GLIBCXX_CHECK_STDLIB_SUPPORT\n \n-  # For showmanyc_helper().\n-  AC_CHECK_HEADERS(sys/ioctl.h sys/filio.h)\n-  GLIBCXX_CHECK_POLL\n-  GLIBCXX_CHECK_S_ISREG_OR_S_IFREG\n-\n-  # For xsputn_2().\n-  AC_CHECK_HEADERS(sys/uio.h)\n-  GLIBCXX_CHECK_WRITEV\n-\n-  # For LFS support.\n-  GLIBCXX_CHECK_LFS\n-\n   # For dev/random and dev/urandom for TR1.\n   GLIBCXX_CHECK_RANDOM_TR1\n "}, {"sha": "0ca1ef94eb5e763631b5e99e2238404115d5f911", "filename": "libstdc++-v3/crossconfig.m4", "status": "modified", "additions": 1, "deletions": 83, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74745ec578126af6bb3f9d68bcfaab0ba9e6039d/libstdc%2B%2B-v3%2Fcrossconfig.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74745ec578126af6bb3f9d68bcfaab0ba9e6039d/libstdc%2B%2B-v3%2Fcrossconfig.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fcrossconfig.m4?ref=74745ec578126af6bb3f9d68bcfaab0ba9e6039d", "patch": "@@ -11,10 +11,6 @@ case \"${host}\" in\n \n   mips*-sde-elf*)\n     # These definitions are for the SDE C library rather than newlib.\n-    AC_CHECK_HEADERS([float.h inttypes.h locale.h \\\n-      stdint.h stdlib.h string.h unistd.h wchar.h \\\n-      machine/endian.h sys/ioctl.h sys/resource.h \\\n-      sys/stat.h sys/time.h sys/types.h sys/uio.h])\n     SECTION_FLAGS='-ffunction-sections -fdata-sections'\n     AC_SUBST(SECTION_FLAGS)\n     GLIBCXX_CHECK_COMPILER_FEATURES\n@@ -23,8 +19,6 @@ case \"${host}\" in\n     GLIBCXX_CHECK_BUILTIN_MATH_SUPPORT\n     GLIBCXX_CHECK_COMPLEX_MATH_SUPPORT\n     GLIBCXX_CHECK_STDLIB_SUPPORT\n-    GLIBCXX_CHECK_S_ISREG_OR_S_IFREG\n-    AC_DEFINE(HAVE_WRITEV)\n \n     AC_DEFINE(HAVE_LIBM)\n     AC_DEFINE(HAVE_COPYSIGN)\n@@ -42,33 +36,17 @@ case \"${host}\" in\n     # Darwin versions vary, but the linker should work in a cross environment,\n     # so we just check for all the features here.\n     # Check for available headers.\n-    AC_CHECK_HEADERS([nan.h ieeefp.h endian.h sys/isa_defs.h machine/endian.h \\\n-    machine/param.h sys/machine.h fp.h locale.h float.h inttypes.h \\\n-    sys/types.h])\n \n     # Don't call GLIBCXX_CHECK_LINKER_FEATURES, Darwin doesn't have a GNU ld\n     GLIBCXX_CHECK_MATH_SUPPORT\n     GLIBCXX_CHECK_BUILTIN_MATH_SUPPORT\n     GLIBCXX_CHECK_COMPLEX_MATH_SUPPORT\n     GLIBCXX_CHECK_STDLIB_SUPPORT\n \n-    # For showmanyc_helper().\n-    AC_CHECK_HEADERS(sys/ioctl.h sys/filio.h)\n-    GLIBCXX_CHECK_POLL\n-    GLIBCXX_CHECK_S_ISREG_OR_S_IFREG\n-\n-    # For xsputn_2().\n-    AC_CHECK_HEADERS(sys/uio.h)\n-    GLIBCXX_CHECK_WRITEV\n-\n     AC_DEFINE(HAVE_LC_MESSAGES)\n     ;;\n \n   *djgpp)\n-    AC_CHECK_HEADERS([float.h ieeefp.h inttypes.h locale.h \\\n-      memory.h stdint.h stdlib.h strings.h string.h unistd.h \\\n-      wchar.h wctype.h machine/endian.h sys/ioctl.h sys/param.h \\\n-      sys/resource.h sys/stat.h sys/time.h sys/types.h sys/uio.h])\n     # GLIBCXX_CHECK_MATH_SUPPORT\n     AC_DEFINE(HAVE_LIBM)\n     AC_DEFINE(HAVE_ISINF)\n@@ -96,17 +74,9 @@ case \"${host}\" in\n     # GLIBCXX_CHECK_STDLIB_SUPPORT\n     AC_DEFINE(HAVE_COPYSIGN)\n     AC_DEFINE(HAVE_COPYSIGNF)\n-    # GLIBCXX_CHECK_S_ISREG_OR_S_IFREG\n-    AC_DEFINE(HAVE_S_ISREG)\n-    AC_DEFINE(HAVE_S_IFREG)\n-    AC_DEFINE(HAVE_WRITEV)\n     ;;\n \n   *-freebsd*)\n-    AC_CHECK_HEADERS([nan.h ieeefp.h endian.h sys/isa_defs.h \\\n-      machine/endian.h machine/param.h sys/machine.h sys/types.h \\\n-      fp.h locale.h float.h inttypes.h sys/resource.h sys/stat.h \\\n-      sys/time.h unistd.h])\n     SECTION_FLAGS='-ffunction-sections -fdata-sections'\n     AC_SUBST(SECTION_FLAGS) \n     GLIBCXX_CHECK_LINKER_FEATURES\n@@ -155,9 +125,6 @@ case \"${host}\" in\n     fi\n     ;;\n   *-hpux*)\n-    AC_CHECK_HEADERS([nan.h ieeefp.h endian.h sys/isa_defs.h \\\n-      machine/endian.h machine/param.h sys/machine.h sys/types.h \\\n-      fp.h locale.h float.h inttypes.h])\n     SECTION_FLAGS='-ffunction-sections -fdata-sections'\n     AC_SUBST(SECTION_FLAGS)\n     GLIBCXX_CHECK_LINKER_FEATURES\n@@ -178,10 +145,6 @@ case \"${host}\" in\n     esac\n     ;;\n   *-linux* | *-uclinux* | *-gnu* | *-kfreebsd*-gnu | *-knetbsd*-gnu)\n-    AC_CHECK_HEADERS([nan.h ieeefp.h endian.h sys/isa_defs.h \\\n-      machine/endian.h machine/param.h sys/machine.h sys/types.h \\\n-      fp.h float.h endian.h inttypes.h locale.h float.h stdint.h \\\n-      sys/ipc.h sys/sem.h])\n     SECTION_FLAGS='-ffunction-sections -fdata-sections'\n     AC_SUBST(SECTION_FLAGS)\n     GLIBCXX_CHECK_COMPILER_FEATURES\n@@ -191,18 +154,6 @@ case \"${host}\" in\n     GLIBCXX_CHECK_COMPLEX_MATH_SUPPORT\n     GLIBCXX_CHECK_STDLIB_SUPPORT\n \n-    # For LFS.\n-    GLIBCXX_CHECK_LFS\n-\n-    # For showmanyc_helper().\n-    AC_CHECK_HEADERS(sys/ioctl.h sys/filio.h)\n-    GLIBCXX_CHECK_POLL\n-    GLIBCXX_CHECK_S_ISREG_OR_S_IFREG\n-\n-    # For xsputn_2().\n-    AC_CHECK_HEADERS(sys/uio.h)\n-    GLIBCXX_CHECK_WRITEV\n-\n     AC_DEFINE(_GLIBCXX_USE_RANDOM_TR1)\n \n     AC_LC_MESSAGES\n@@ -211,16 +162,12 @@ case \"${host}\" in\n     AM_ICONV\n     ;;\n   *-mingw32*)\n-    AC_CHECK_HEADERS([sys/types.h locale.h float.h])\n     AC_DEFINE(HAVE_STRTOF)\n     AC_DEFINE(HAVE_STRTOLD)\n     GLIBCXX_CHECK_LINKER_FEATURES\n     GLIBCXX_CHECK_COMPLEX_MATH_SUPPORT\n     ;;\n   *-netbsd*)\n-    AC_CHECK_HEADERS([nan.h ieeefp.h endian.h sys/isa_defs.h \\\n-      machine/endian.h machine/param.h sys/machine.h sys/types.h \\\n-      fp.h locale.h float.h inttypes.h])\n     SECTION_FLAGS='-ffunction-sections -fdata-sections'\n     AC_SUBST(SECTION_FLAGS) \n     GLIBCXX_CHECK_LINKER_FEATURES\n@@ -242,24 +189,13 @@ case \"${host}\" in\n     fi\n     ;;\n   *-netware)\n-    AC_CHECK_HEADERS([nan.h ieeefp.h sys/isa_defs.h sys/machine.h \\\n-      sys/types.h locale.h float.h inttypes.h])\n     SECTION_FLAGS='-ffunction-sections -fdata-sections'\n     AC_SUBST(SECTION_FLAGS)\n     GLIBCXX_CHECK_LINKER_FEATURES\n     GLIBCXX_CHECK_COMPLEX_MATH_SUPPORT\n     AC_DEFINE(HAVE_HYPOT)\n     AC_DEFINE(HAVE_ISINF)\n     AC_DEFINE(HAVE_ISNAN)\n-\n-    # For showmanyc_helper().\n-    AC_CHECK_HEADERS(sys/ioctl.h sys/filio.h)\n-    GLIBCXX_CHECK_POLL\n-    GLIBCXX_CHECK_S_ISREG_OR_S_IFREG\n-\n-    # For xsputn_2().\n-    AC_CHECK_HEADERS(sys/uio.h)\n-    GLIBCXX_CHECK_WRITEV\n     ;;\n   *-qnx6.1* | *-qnx6.2*)\n     SECTION_FLAGS='-ffunction-sections -fdata-sections'\n@@ -284,29 +220,13 @@ case \"${host}\" in\n       *-solaris2.7 | *-solaris2.8 | *-solaris2.9 | *-solaris2.10)\n          GLIBCXX_CHECK_LINKER_FEATURES\n          AC_DEFINE(HAVE_MBSTATE_T)\n-         AC_DEFINE(HAVE_POLL)\n-         AC_DEFINE(HAVE_S_ISREG)\n          AC_DEFINE(HAVE_LC_MESSAGES)\n          AC_DEFINE(HAVE_FINITE)\n          AC_DEFINE(HAVE_FPCLASS)\n          # All of the dependencies for wide character support are here, so\n          # turn it on. \n          AC_DEFINE(_GLIBCXX_USE_WCHAR_T) \n-         # Are these tested for even when cross?\n-         AC_DEFINE(HAVE_FLOAT_H)\n-         AC_DEFINE(HAVE_IEEEFP_H)\n-         AC_DEFINE(HAVE_INTTYPES_H)\n-         AC_DEFINE(HAVE_LOCALE_H)\n-         AC_DEFINE(HAVE_NAN_H)\n-         AC_DEFINE(HAVE_SYS_FILIO_H)\n-         AC_DEFINE(HAVE_SYS_IOCTL_H)\n-         AC_DEFINE(HAVE_SYS_ISA_DEFS_H)\n-         AC_DEFINE(HAVE_SYS_RESOURCE_H)\n-         AC_DEFINE(HAVE_SYS_TIME_H)\n-         AC_DEFINE(HAVE_SYS_TYPES_H)\n-         AC_DEFINE(HAVE_UNISTD_H)\n-         AC_DEFINE(HAVE_WCHAR_H)\n-         AC_DEFINE(HAVE_WCTYPE_H)\n+\n          AC_DEFINE(HAVE_LIBM)\n         ;;\n     esac\n@@ -338,8 +258,6 @@ case \"${host}\" in\n     AC_DEFINE(HAVE_HYPOT)\n     ;;\n   *-tpf)\n-    AC_CHECK_HEADERS([nan.h endian.h machine/endian.h  \\\n-      sys/param.h sys/types.h locale.h float.h inttypes.h])\n     SECTION_FLAGS='-ffunction-sections -fdata-sections'\n     AC_SUBST(SECTION_FLAGS)\n     GLIBCXX_CHECK_LINKER_FEATURES"}]}