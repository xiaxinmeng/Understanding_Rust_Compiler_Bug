{"sha": "1651e9b17c6e41564bb12a073d423961bff33ffe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTY1MWU5YjE3YzZlNDE1NjRiYjEyYTA3M2Q0MjM5NjFiZmYzM2ZmZQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-07-10T11:59:00Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-07-10T11:59:00Z"}, "message": "genmatch.c (dt_node::gen_kids_1): Fix indenting of case labels.\n\n2015-07-10  Richard Biener  <rguenther@suse.de>\n\n\t* genmatch.c (dt_node::gen_kids_1): Fix indenting of\n\tcase labels.\n\t(decision_tree::gen_gimple): Likewise.\n\t(decision_tree::gen_generic): Likewise.\n\nFrom-SVN: r225663", "tree": {"sha": "d9a3d28e64ebd8cf8931ef76b3bf00e647fcd12b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d9a3d28e64ebd8cf8931ef76b3bf00e647fcd12b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1651e9b17c6e41564bb12a073d423961bff33ffe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1651e9b17c6e41564bb12a073d423961bff33ffe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1651e9b17c6e41564bb12a073d423961bff33ffe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1651e9b17c6e41564bb12a073d423961bff33ffe/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d7cb4840b72b7ce93b2419fd4780b069ef1a8440", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7cb4840b72b7ce93b2419fd4780b069ef1a8440", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7cb4840b72b7ce93b2419fd4780b069ef1a8440"}], "stats": {"total": 57, "additions": 32, "deletions": 25}, "files": [{"sha": "dd9b1b692f2270b51a8b4d2043cc5f623f9b33a6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1651e9b17c6e41564bb12a073d423961bff33ffe/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1651e9b17c6e41564bb12a073d423961bff33ffe/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1651e9b17c6e41564bb12a073d423961bff33ffe", "patch": "@@ -1,3 +1,10 @@\n+2015-07-10  Richard Biener  <rguenther@suse.de>\n+\n+\t* genmatch.c (dt_node::gen_kids_1): Fix indenting of\n+\tcase labels.\n+\t(decision_tree::gen_gimple): Likewise.\n+\t(decision_tree::gen_generic): Likewise.\n+\n 2015-07-10  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/66813"}, {"sha": "295925c1061ad51a626bf9034feadf5700218876", "filename": "gcc/genmatch.c", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1651e9b17c6e41564bb12a073d423961bff33ffe/gcc%2Fgenmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1651e9b17c6e41564bb12a073d423961bff33ffe/gcc%2Fgenmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenmatch.c?ref=1651e9b17c6e41564bb12a073d423961bff33ffe", "patch": "@@ -2275,7 +2275,7 @@ dt_node::gen_kids_1 (FILE *f, int indent, bool gimple,\n \n       fprintf_indent (f, indent, \"switch (TREE_CODE (%s))\\n\", kid_opname);\n       fprintf_indent (f, indent, \"  {\\n\");\n-      indent += 4;\n+      indent += 2;\n     }\n \n   if (exprs_len || fns_len)\n@@ -2305,15 +2305,15 @@ dt_node::gen_kids_1 (FILE *f, int indent, bool gimple,\n \t      expr *e = as_a <expr *> (gimple_exprs[i]->op);\n \t      id_base *op = e->operation;\n \t      if (*op == CONVERT_EXPR || *op == NOP_EXPR)\n-\t\tfprintf_indent (f, indent, \"  CASE_CONVERT:\\n\");\n+\t\tfprintf_indent (f, indent, \"CASE_CONVERT:\\n\");\n \t      else\n-\t\tfprintf_indent (f, indent, \"  case %s:\\n\", op->id);\n-\t      fprintf_indent (f, indent, \"    {\\n\");\n-\t      gimple_exprs[i]->gen (f, indent + 6, true);\n-\t      fprintf_indent (f, indent, \"      break;\\n\");\n-\t      fprintf_indent (f, indent, \"    }\\n\");\n+\t\tfprintf_indent (f, indent, \"case %s:\\n\", op->id);\n+\t      fprintf_indent (f, indent, \"  {\\n\");\n+\t      gimple_exprs[i]->gen (f, indent + 4, true);\n+\t      fprintf_indent (f, indent, \"    break;\\n\");\n+\t      fprintf_indent (f, indent, \"  }\\n\");\n \t    }\n-\t  fprintf_indent (f, indent, \"  default:;\\n\");\n+\t  fprintf_indent (f, indent, \"default:;\\n\");\n \t  indent -= 4;\n \t  fprintf_indent (f, indent, \"}\\n\");\n \t}\n@@ -2386,7 +2386,7 @@ dt_node::gen_kids_1 (FILE *f, int indent, bool gimple,\n \t\t      \"      switch (DECL_FUNCTION_CODE (fndecl))\\n\");\n       fprintf_indent (f, indent,\n \t\t      \"        {\\n\");\n-      indent += 10;\n+      indent += 8;\n \n       for (unsigned j = 0; j < generic_fns.length (); ++j)\n \t{\n@@ -2400,7 +2400,7 @@ dt_node::gen_kids_1 (FILE *f, int indent, bool gimple,\n \t  fprintf_indent (f, indent, \"  }\\n\");\n \t}\n \n-      indent -= 10;\n+      indent -= 8;\n       fprintf_indent (f, indent, \"          default:;\\n\");\n       fprintf_indent (f, indent, \"        }\\n\");\n       fprintf_indent (f, indent, \"    break;\\n\");\n@@ -2849,18 +2849,18 @@ decision_tree::gen_gimple (FILE *f)\n \n \t  if (*e->operation == CONVERT_EXPR\n \t      || *e->operation == NOP_EXPR)\n-\t    fprintf (f, \"      CASE_CONVERT:\\n\");\n+\t    fprintf (f, \"    CASE_CONVERT:\\n\");\n \t  else\n-\t    fprintf (f, \"      case %s%s:\\n\",\n+\t    fprintf (f, \"    case %s%s:\\n\",\n \t\t     is_a <fn_id *> (e->operation) ? \"-\" : \"\",\n \t\t     e->operation->id);\n-\t  fprintf (f,   \"        {\\n\");\n-\t  dop->gen_kids (f, 10, true);\n-\t  fprintf (f,   \"          break;\\n\");\n-\t  fprintf (f,   \"        }\\n\");\n+\t  fprintf (f,   \"      {\\n\");\n+\t  dop->gen_kids (f, 8, true);\n+\t  fprintf (f,   \"        break;\\n\");\n+\t  fprintf (f,   \"      }\\n\");\n \t}\n-      fprintf (f,       \"      default:;\\n\"\n-\t                \"    }\\n\");\n+      fprintf (f,       \"    default:;\\n\"\n+\t                \"  }\\n\");\n \n       fprintf (f, \"  return false;\\n\");\n       fprintf (f, \"}\\n\");\n@@ -2899,15 +2899,15 @@ decision_tree::gen_generic (FILE *f)\n \n \t  operator_id *op_id = static_cast <operator_id *> (e->operation);\n \t  if (op_id->code == NOP_EXPR || op_id->code == CONVERT_EXPR)\n-\t    fprintf (f, \"      CASE_CONVERT:\\n\");\n+\t    fprintf (f, \"    CASE_CONVERT:\\n\");\n \t  else\n-\t    fprintf (f, \"      case %s:\\n\", e->operation->id);\n-\t  fprintf (f,   \"        {\\n\");\n-\t  dop->gen_kids (f, 10, false);\n-\t  fprintf (f,   \"          break;\\n\"\n-\t\t        \"        }\\n\");\n+\t    fprintf (f, \"    case %s:\\n\", e->operation->id);\n+\t  fprintf (f,   \"      {\\n\");\n+\t  dop->gen_kids (f, 8, false);\n+\t  fprintf (f,   \"        break;\\n\"\n+\t\t        \"      }\\n\");\n \t}\n-      fprintf (f, \"      default:;\\n\"\n+      fprintf (f, \"    default:;\\n\"\n \t          \"    }\\n\");\n \n       fprintf (f, \"  return NULL_TREE;\\n\");"}]}