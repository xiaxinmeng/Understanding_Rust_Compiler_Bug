{"sha": "6614f9f559f734f3be5d10eb7a06791ec7a908a4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjYxNGY5ZjU1OWY3MzRmM2JlNWQxMGViN2EwNjc5MWVjN2E5MDhhNA==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernd.schmidt@analog.com", "date": "2006-05-29T14:11:07Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2006-05-29T14:11:07Z"}, "message": "bfin.opt (mfdpic): New option.\n\n\t* config/bfin/bfin.opt (mfdpic): New option.\n\t* config/bfin/t-bfin-elf (EXTRA_PARTS): Add crtbeginS.o and crtendS.o.\n\t(EXTRA_MULTILIB_PARTS): Likewise.\n\t(CRTSTUFF_T_CFLAGS, TARGET_LIBGCC2_CFLAGS): Use -fpic.\n\t(MULTILIB_OPTIONS, MULTILIB_EXCEPTIONS): Build one extra -mfdpic\n\tmultilib.\n\t* config/bfin/elf.h (STARTFILE_SPEC): Don't link in crt0.o if -shared.\n\t(CRT_CALL_STATIC_FUNCTION): New.\n\t* config/bfin/uclinux.h (STARTFILE_SPEC): Don't link in crt0.o if\n\t-shared.\n\t(CRT_CALL_STATIC_FUNCTION): New.\n\t* config/bfin/bfin.c (legitimize_pic_address): Now static.  Handle\n\tFD-PIC moves.\n\t(n_pregs_to_save): PIC register doesn't need to be saved with FD-PIC.\n\t(print_operand): Handle UNSPEC_MOVE_FDPIC and UNSPEC_FUNCDESC_GOT17M4.\n\t(initialize_trampoline): Changed to handle FD-PIC code generation.\n\t(expand_move): If TARGET_FDPIC, use emit_pic_move as needed.\n\t(bfin_expand_call): Generate FD-PIC calls if TARGET_FDPIC.\n\t(override_options): Disallow -mid-shared-library -mfdpic combination.\n\tCan't do unaligned ops if FD-PIC.\n\tTurn off flag_pic if trying to generate non-id-shared-library\n\tnon-fdpic code, since it's not supported.\n\t(bfin_assemble_integer): New function.\n\t(TARGET_ASM_INTEGER): Define.\n\t* config/bfin/crti.s (__init, __fini): Save P3 on the stack if\n\t__BFIN_FDPIC__.\n\t* config/bfin/crtn.s: Restore them.\n\t* config/bfin/bfin.h (TARGET_CPU_CPP_BUILTINS): Define __BFIN_FDPIC__\n\tif TARGET_FDPIC.\n\t(DRIVER_SELF_SPECS, SUBTARGET_DRIVER_SELF_SPECS,\n\tLINK_GCC_C_SEQUENCE_SPEC, ASM_SPEC, LINK_SPEC): New macros.\n\t(FDPIC_FPTR_REGNO, FDPIC_REGNO, OUR_FDPIC_REG): New macros.\n\t(TRAMPOLINE_SIZE, TRAMPOLINE_TEMPLATE): Adjust for FD-PIC.\n\t(CONDITIONAL_REGISTER_USAGE): If TARGET_FDPIC, FDPIC_REGNO is\n\tcall-used.\n\t(enum reg_class, REG_CLASS_CONTENTS, REG_CLASS_NAMES): Add\n\tFDPIC_REGS and FDPIC_FPTR_REGS.\n\t(REG_CLASS_FROM_LETTER): Use 'Z' and 'Y' for them.\n\t* config/bfin/bfin.md (UNSPEC_MOVE_FDPIC, UNSPEC_FUNCDESC_GOT17M4,\n\tUNSPEC_VOLATILE_LOAD_FUNCDESC): New constants.\n\t(load_funcdescsi): New pattern.\n\t(call_symbol_fdpic, sibcall_symbol_fdpic, call_value_symbol_fdpic,\n\tsibcall_value_symbol_fdpic, call_insn_fdpic, sibcall_insn_fdpic,\n\tcall_value_insn_fdpic, sibcall_value_insn_fdpic): New patterns.\n\nFrom-SVN: r114199", "tree": {"sha": "732dd171b1791bdb175f887cfa846cd7546dc5a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/732dd171b1791bdb175f887cfa846cd7546dc5a7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6614f9f559f734f3be5d10eb7a06791ec7a908a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6614f9f559f734f3be5d10eb7a06791ec7a908a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6614f9f559f734f3be5d10eb7a06791ec7a908a4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6614f9f559f734f3be5d10eb7a06791ec7a908a4/comments", "author": null, "committer": null, "parents": [{"sha": "152279c4d235542c4948259e469b1b4faebdc596", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/152279c4d235542c4948259e469b1b4faebdc596", "html_url": "https://github.com/Rust-GCC/gccrs/commit/152279c4d235542c4948259e469b1b4faebdc596"}], "stats": {"total": 456, "additions": 405, "deletions": 51}, "files": [{"sha": "67964a96aa7a985d50cc5d02f63d84cdf74a88c2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6614f9f559f734f3be5d10eb7a06791ec7a908a4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6614f9f559f734f3be5d10eb7a06791ec7a908a4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6614f9f559f734f3be5d10eb7a06791ec7a908a4", "patch": "@@ -1,3 +1,50 @@\n+2005-05-29  Bernd Schmidt  <bernd.schmidt@analog.com>\n+\n+\t* config/bfin/bfin.opt (mfdpic): New option.\n+\t* config/bfin/t-bfin-elf (EXTRA_PARTS): Add crtbeginS.o and crtendS.o.\n+\t(EXTRA_MULTILIB_PARTS): Likewise.\n+\t(CRTSTUFF_T_CFLAGS, TARGET_LIBGCC2_CFLAGS): Use -fpic.\n+\t(MULTILIB_OPTIONS, MULTILIB_EXCEPTIONS): Build one extra -mfdpic\n+\tmultilib.\n+\t* config/bfin/elf.h (STARTFILE_SPEC): Don't link in crt0.o if -shared.\n+\t(CRT_CALL_STATIC_FUNCTION): New.\n+\t* config/bfin/uclinux.h (STARTFILE_SPEC): Don't link in crt0.o if\n+\t-shared.\n+\t(CRT_CALL_STATIC_FUNCTION): New.\n+\t* config/bfin/bfin.c (legitimize_pic_address): Now static.  Handle\n+\tFD-PIC moves.\n+\t(n_pregs_to_save): PIC register doesn't need to be saved with FD-PIC.\n+\t(print_operand): Handle UNSPEC_MOVE_FDPIC and UNSPEC_FUNCDESC_GOT17M4.\n+\t(initialize_trampoline): Changed to handle FD-PIC code generation.\n+\t(expand_move): If TARGET_FDPIC, use emit_pic_move as needed.\n+\t(bfin_expand_call): Generate FD-PIC calls if TARGET_FDPIC.\n+\t(override_options): Disallow -mid-shared-library -mfdpic combination.\n+\tCan't do unaligned ops if FD-PIC.\n+\tTurn off flag_pic if trying to generate non-id-shared-library\n+\tnon-fdpic code, since it's not supported.\n+\t(bfin_assemble_integer): New function.\n+\t(TARGET_ASM_INTEGER): Define.\n+\t* config/bfin/crti.s (__init, __fini): Save P3 on the stack if\n+\t__BFIN_FDPIC__.\n+\t* config/bfin/crtn.s: Restore them.\n+\t* config/bfin/bfin.h (TARGET_CPU_CPP_BUILTINS): Define __BFIN_FDPIC__\n+\tif TARGET_FDPIC.\n+\t(DRIVER_SELF_SPECS, SUBTARGET_DRIVER_SELF_SPECS,\n+\tLINK_GCC_C_SEQUENCE_SPEC, ASM_SPEC, LINK_SPEC): New macros.\n+\t(FDPIC_FPTR_REGNO, FDPIC_REGNO, OUR_FDPIC_REG): New macros.\n+\t(TRAMPOLINE_SIZE, TRAMPOLINE_TEMPLATE): Adjust for FD-PIC.\n+\t(CONDITIONAL_REGISTER_USAGE): If TARGET_FDPIC, FDPIC_REGNO is\n+\tcall-used.\n+\t(enum reg_class, REG_CLASS_CONTENTS, REG_CLASS_NAMES): Add\n+\tFDPIC_REGS and FDPIC_FPTR_REGS.\n+\t(REG_CLASS_FROM_LETTER): Use 'Z' and 'Y' for them.\n+\t* config/bfin/bfin.md (UNSPEC_MOVE_FDPIC, UNSPEC_FUNCDESC_GOT17M4,\n+\tUNSPEC_VOLATILE_LOAD_FUNCDESC): New constants.\n+\t(load_funcdescsi): New pattern.\n+\t(call_symbol_fdpic, sibcall_symbol_fdpic, call_value_symbol_fdpic,\n+\tsibcall_value_symbol_fdpic, call_insn_fdpic, sibcall_insn_fdpic,\n+\tcall_value_insn_fdpic, sibcall_value_insn_fdpic): New patterns.\n+\n 2006-05-29  Kazu Hirata  <kazu@codesourcery.com>\n \n \t* gcse.c, rtlanal.c: Remove obsolete comments associated with"}, {"sha": "5234bfde50f582fb7e3208629713ea7fc0e52d5f", "filename": "gcc/config/bfin/bfin.c", "status": "modified", "additions": 133, "deletions": 35, "changes": 168, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6614f9f559f734f3be5d10eb7a06791ec7a908a4/gcc%2Fconfig%2Fbfin%2Fbfin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6614f9f559f734f3be5d10eb7a06791ec7a908a4/gcc%2Fconfig%2Fbfin%2Fbfin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.c?ref=6614f9f559f734f3be5d10eb7a06791ec7a908a4", "patch": "@@ -129,7 +129,7 @@ static e_funkind funkind (tree funtype)\n    necessary.  PICREG is the register holding the pointer to the PIC offset\n    table.  */\n \n-rtx\n+static rtx\n legitimize_pic_address (rtx orig, rtx reg, rtx picreg)\n {\n   rtx addr = orig;\n@@ -141,26 +141,30 @@ legitimize_pic_address (rtx orig, rtx reg, rtx picreg)\n \treg = new = orig;\n       else\n \t{\n-\t  if (reg == 0)\n-\t    {\n-\t      gcc_assert (!no_new_pseudos);\n-\t      reg = gen_reg_rtx (Pmode);\n-\t    }\n+\t  int unspec;\n+\t  rtx tmp;\n \n-\t  if (flag_pic == 2)\n+\t  if (TARGET_ID_SHARED_LIBRARY)\n+\t    unspec = UNSPEC_MOVE_PIC;\n+\t  else if (GET_CODE (addr) == SYMBOL_REF\n+\t\t   && SYMBOL_REF_FUNCTION_P (addr))\n \t    {\n-\t      emit_insn (gen_movsi_high_pic (reg, addr));\n-\t      emit_insn (gen_movsi_low_pic (reg, reg, addr));\n-\t      emit_insn (gen_addsi3 (reg, reg, picreg));\n-\t      new = gen_const_mem (Pmode, reg);\n+\t      unspec = UNSPEC_FUNCDESC_GOT17M4;\n \t    }\n \t  else\n \t    {\n-\t      rtx tmp = gen_rtx_UNSPEC (Pmode, gen_rtvec (1, addr),\n-\t\t\t\t\tUNSPEC_MOVE_PIC);\n-\t      new = gen_const_mem (Pmode,\n-\t\t\t\t   gen_rtx_PLUS (Pmode, picreg, tmp));\n+\t      unspec = UNSPEC_MOVE_FDPIC;\n \t    }\n+\n+\t  if (reg == 0)\n+\t    {\n+\t      gcc_assert (!no_new_pseudos);\n+\t      reg = gen_reg_rtx (Pmode);\n+\t    }\n+\n+\t  tmp = gen_rtx_UNSPEC (Pmode, gen_rtvec (1, addr), unspec);\n+\t  new = gen_const_mem (Pmode, gen_rtx_PLUS (Pmode, picreg, tmp));\n+\n \t  emit_move_insn (reg, new);\n \t}\n       if (picreg == pic_offset_table_rtx)\n@@ -254,7 +258,8 @@ n_pregs_to_save (bool is_inthandler)\n \n   for (i = REG_P0; i <= REG_P5; i++)\n     if ((regs_ever_live[i] && (is_inthandler || ! call_used_regs[i]))\n-\t|| (i == PIC_OFFSET_TABLE_REGNUM\n+\t|| (!TARGET_FDPIC\n+\t    && i == PIC_OFFSET_TABLE_REGNUM\n \t    && (current_function_uses_pic_offset_table\n \t\t|| (TARGET_ID_SHARED_LIBRARY && ! current_function_is_leaf))))\n       return REG_P5 - i + 1;\n@@ -1343,6 +1348,16 @@ print_operand (FILE *file, rtx x, char code)\n \t      fprintf (file, \"@GOT\");\n \t      break;\n \n+\t    case UNSPEC_MOVE_FDPIC:\n+\t      output_addr_const (file, XVECEXP (x, 0, 0));\n+\t      fprintf (file, \"@GOT17M4\");\n+\t      break;\n+\n+\t    case UNSPEC_FUNCDESC_GOT17M4:\n+\t      output_addr_const (file, XVECEXP (x, 0, 0));\n+\t      fprintf (file, \"@FUNCDESC_GOT17M4\");\n+\t      break;\n+\n \t    case UNSPEC_LIBRARY_OFFSET:\n \t      fprintf (file, \"_current_shared_library_p5_offset_\");\n \t      break;\n@@ -1576,17 +1591,26 @@ initialize_trampoline (tramp, fnaddr, cxt)\n   rtx t1 = copy_to_reg (fnaddr);\n   rtx t2 = copy_to_reg (cxt);\n   rtx addr;\n+  int i = 0;\n+\n+  if (TARGET_FDPIC)\n+    {\n+      rtx a = memory_address (Pmode, plus_constant (tramp, 8));\n+      addr = memory_address (Pmode, tramp);\n+      emit_move_insn (gen_rtx_MEM (SImode, addr), a);\n+      i = 8;\n+    }\n \n-  addr = memory_address (Pmode, plus_constant (tramp, 2));\n+  addr = memory_address (Pmode, plus_constant (tramp, i + 2));\n   emit_move_insn (gen_rtx_MEM (HImode, addr), gen_lowpart (HImode, t1));\n   emit_insn (gen_ashrsi3 (t1, t1, GEN_INT (16)));\n-  addr = memory_address (Pmode, plus_constant (tramp, 6));\n+  addr = memory_address (Pmode, plus_constant (tramp, i + 6));\n   emit_move_insn (gen_rtx_MEM (HImode, addr), gen_lowpart (HImode, t1));\n \n-  addr = memory_address (Pmode, plus_constant (tramp, 10));\n+  addr = memory_address (Pmode, plus_constant (tramp, i + 10));\n   emit_move_insn (gen_rtx_MEM (HImode, addr), gen_lowpart (HImode, t2));\n   emit_insn (gen_ashrsi3 (t2, t2, GEN_INT (16)));\n-  addr = memory_address (Pmode, plus_constant (tramp, 14));\n+  addr = memory_address (Pmode, plus_constant (tramp, i + 14));\n   emit_move_insn (gen_rtx_MEM (HImode, addr), gen_lowpart (HImode, t2));\n }\n \n@@ -1597,21 +1621,24 @@ emit_pic_move (rtx *operands, enum machine_mode mode ATTRIBUTE_UNUSED)\n {\n   rtx temp = reload_in_progress ? operands[0] : gen_reg_rtx (Pmode);\n \n+  gcc_assert (!TARGET_FDPIC || !(reload_in_progress || reload_completed));\n   if (GET_CODE (operands[0]) == MEM && SYMBOLIC_CONST (operands[1]))\n     operands[1] = force_reg (SImode, operands[1]);\n   else\n     operands[1] = legitimize_pic_address (operands[1], temp,\n-\t\t\t\t\t  pic_offset_table_rtx);\n+\t\t\t\t\t  TARGET_FDPIC ? OUR_FDPIC_REG\n+\t\t\t\t\t  : pic_offset_table_rtx);\n }\n \n /* Expand a move operation in mode MODE.  The operands are in OPERANDS.  */\n \n void\n expand_move (rtx *operands, enum machine_mode mode)\n {\n-  if (flag_pic && SYMBOLIC_CONST (operands[1]))\n+  rtx op = operands[1];\n+  if ((TARGET_ID_SHARED_LIBRARY || TARGET_FDPIC)\n+      && SYMBOLIC_CONST (op))\n     emit_pic_move (operands, mode);\n-\n   /* Don't generate memory->memory or constant->memory moves, go through a\n      register */\n   else if ((reload_in_progress | reload_completed) == 0\n@@ -1674,23 +1701,46 @@ bfin_expand_call (rtx retval, rtx fnaddr, rtx callarg1, rtx cookie, int sibcall)\n {\n   rtx use = NULL, call;\n   rtx callee = XEXP (fnaddr, 0);\n-  rtx pat = gen_rtx_PARALLEL (VOIDmode, rtvec_alloc (sibcall ? 3 : 2));\n+  int nelts = 2 + !!sibcall;\n+  rtx pat;\n+  rtx picreg = get_hard_reg_initial_val (SImode, FDPIC_REGNO);\n+  int n;\n \n   /* In an untyped call, we can get NULL for operand 2.  */\n   if (cookie == NULL_RTX)\n     cookie = const0_rtx;\n \n   /* Static functions and indirect calls don't need the pic register.  */\n-  if (flag_pic\n+  if (!TARGET_FDPIC && flag_pic\n       && GET_CODE (callee) == SYMBOL_REF\n       && !SYMBOL_REF_LOCAL_P (callee))\n     use_reg (&use, pic_offset_table_rtx);\n \n-  if ((!register_no_elim_operand (callee, Pmode)\n-       && GET_CODE (callee) != SYMBOL_REF)\n-      || (GET_CODE (callee) == SYMBOL_REF\n-\t  && (flag_pic\n-\t      || bfin_longcall_p (callee, INTVAL (cookie)))))\n+  if (TARGET_FDPIC)\n+    {\n+      if (GET_CODE (callee) != SYMBOL_REF\n+\t  || bfin_longcall_p (callee, INTVAL (cookie)))\n+\t{\n+\t  rtx addr = callee;\n+\t  if (! address_operand (addr, Pmode))\n+\t    addr = force_reg (Pmode, addr);\n+\n+\t  fnaddr = gen_reg_rtx (SImode);\n+\t  emit_insn (gen_load_funcdescsi (fnaddr, addr));\n+\t  fnaddr = gen_rtx_MEM (Pmode, fnaddr);\n+\n+\t  picreg = gen_reg_rtx (SImode);\n+\t  emit_insn (gen_load_funcdescsi (picreg,\n+\t\t\t\t\t  plus_constant (addr, 4)));\n+\t}\n+\n+      nelts++;\n+    }\n+  else if ((!register_no_elim_operand (callee, Pmode)\n+\t    && GET_CODE (callee) != SYMBOL_REF)\n+\t   || (GET_CODE (callee) == SYMBOL_REF\n+\t       && (flag_pic\n+\t\t   || bfin_longcall_p (callee, INTVAL (cookie)))))\n     {\n       callee = copy_to_mode_reg (Pmode, callee);\n       fnaddr = gen_rtx_MEM (Pmode, callee);\n@@ -1700,10 +1750,14 @@ bfin_expand_call (rtx retval, rtx fnaddr, rtx callarg1, rtx cookie, int sibcall)\n   if (retval)\n     call = gen_rtx_SET (VOIDmode, retval, call);\n \n-  XVECEXP (pat, 0, 0) = call;\n-  XVECEXP (pat, 0, 1) = gen_rtx_USE (VOIDmode, cookie);\n+  pat = gen_rtx_PARALLEL (VOIDmode, rtvec_alloc (nelts));\n+  n = 0;\n+  XVECEXP (pat, 0, n++) = call;\n+  if (TARGET_FDPIC)\n+    XVECEXP (pat, 0, n++) = gen_rtx_USE (VOIDmode, picreg);\n+  XVECEXP (pat, 0, n++) = gen_rtx_USE (VOIDmode, cookie);\n   if (sibcall)\n-    XVECEXP (pat, 0, 2) = gen_rtx_RETURN (VOIDmode);\n+    XVECEXP (pat, 0, n++) = gen_rtx_RETURN (VOIDmode);\n   call = emit_call_insn (pat);\n   if (use)\n     CALL_INSN_FUNCTION_USAGE (call) = use;\n@@ -1896,10 +1950,23 @@ override_options (void)\n   if (bfin_lib_id_given && ! TARGET_ID_SHARED_LIBRARY)\n     error (\"-mshared-library-id= specified without -mid-shared-library\");\n \n-  if (TARGET_ID_SHARED_LIBRARY)\n-    /* ??? Provide a way to use a bigger GOT.  */\n+  if (TARGET_ID_SHARED_LIBRARY && flag_pic == 0)\n     flag_pic = 1;\n \n+  if (TARGET_ID_SHARED_LIBRARY && TARGET_FDPIC)\n+      error (\"ID shared libraries and FD-PIC mode can't be used together.\");\n+\n+  /* There is no single unaligned SI op for PIC code.  Sometimes we\n+     need to use \".4byte\" and sometimes we need to use \".picptr\".\n+     See bfin_assemble_integer for details.  */\n+  if (TARGET_FDPIC)\n+    targetm.asm_out.unaligned_op.si = 0;\n+\n+  /* Silently turn off flag_pic if not doing FDPIC or ID shared libraries,\n+     since we don't support it and it'll just break.  */\n+  if (flag_pic && !TARGET_FDPIC && !TARGET_ID_SHARED_LIBRARY)\n+    flag_pic = 0;\n+\n   flag_schedule_insns = 0;\n }\n \n@@ -2895,6 +2962,34 @@ const struct attribute_spec bfin_attribute_table[] =\n   { NULL, 0, 0, false, false, false, NULL }\n };\n \f\n+/* Implementation of TARGET_ASM_INTEGER.  When using FD-PIC, we need to\n+   tell the assembler to generate pointers to function descriptors in\n+   some cases.  */\n+\n+static bool\n+bfin_assemble_integer (rtx value, unsigned int size, int aligned_p)\n+{\n+  if (TARGET_FDPIC && size == UNITS_PER_WORD)\n+    {\n+      if (GET_CODE (value) == SYMBOL_REF\n+\t  && SYMBOL_REF_FUNCTION_P (value))\n+\t{\n+\t  fputs (\"\\t.picptr\\tfuncdesc(\", asm_out_file);\n+\t  output_addr_const (asm_out_file, value);\n+\t  fputs (\")\\n\", asm_out_file);\n+\t  return true;\n+\t}\n+      if (!aligned_p)\n+\t{\n+\t  /* We've set the unaligned SI op to NULL, so we always have to\n+\t     handle the unaligned case here.  */\n+\t  assemble_integer_with_op (\"\\t.4byte\\t\", value);\n+\t  return true;\n+\t}\n+    }\n+  return default_assemble_integer (value, size, aligned_p);\n+}\n+\f\n /* Output the assembler code for a thunk function.  THUNK_DECL is the\n    declaration for the thunk function itself, FUNCTION is the decl for\n    the target function.  DELTA is an immediate constant offset to be\n@@ -3500,6 +3595,9 @@ bfin_expand_builtin (tree exp, rtx target ATTRIBUTE_UNUSED,\n #undef TARGET_ASM_INTERNAL_LABEL\n #define TARGET_ASM_INTERNAL_LABEL bfin_internal_label\n \n+#undef  TARGET_ASM_INTEGER\n+#define TARGET_ASM_INTEGER bfin_assemble_integer\n+\n #undef TARGET_MACHINE_DEPENDENT_REORG\n #define TARGET_MACHINE_DEPENDENT_REORG bfin_reorg\n "}, {"sha": "0fb9299d49449162ff7e00e4b01a0af06108e57e", "filename": "gcc/config/bfin/bfin.h", "status": "modified", "additions": 76, "deletions": 8, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6614f9f559f734f3be5d10eb7a06791ec7a908a4/gcc%2Fconfig%2Fbfin%2Fbfin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6614f9f559f734f3be5d10eb7a06791ec7a908a4/gcc%2Fconfig%2Fbfin%2Fbfin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.h?ref=6614f9f559f734f3be5d10eb7a06791ec7a908a4", "patch": "@@ -1,5 +1,5 @@\n /* Definitions for the Blackfin port.\n-   Copyright (C) 2005, 2006  Free Software Foundation, Inc.\n+   Copyright (C) 2005  Free Software Foundation, Inc.\n    Contributed by Analog Devices.\n \n    This file is part of GCC.\n@@ -42,12 +42,51 @@ extern int target_flags;\n       builtin_define (\"bfin\");                  \\\n       builtin_define (\"BFIN\");                  \\\n       builtin_define (\"__ADSPBLACKFIN__\");\t\\\n+      if (TARGET_FDPIC)\t\t\t\t\\\n+\tbuiltin_define (\"__BFIN_FDPIC__\");\t\\\n       if (TARGET_ID_SHARED_LIBRARY)\t\t\\\n \tbuiltin_define (\"__ID_SHARED_LIB__\");\t\\\n     }                                           \\\n   while (0)\n #endif\n \n+#define DRIVER_SELF_SPECS SUBTARGET_DRIVER_SELF_SPECS\t\"\\\n+ %{mfdpic:%{!fpic:%{!fpie:%{!fPIC:%{!fPIE:\\\n+   \t    %{!fno-pic:%{!fno-pie:%{!fno-PIC:%{!fno-PIE:-fpie}}}}}}}}} \\\n+\"\n+#ifndef SUBTARGET_DRIVER_SELF_SPECS\n+# define SUBTARGET_DRIVER_SELF_SPECS\n+#endif\n+\n+#define LINK_GCC_C_SEQUENCE_SPEC \\\n+  \"%{mfdpic:%{!static: %L} %{static: %G %L %G}} \\\n+  %{!mfdpic:%G %L %G}\"\n+\n+/* A C string constant that tells the GCC driver program options to pass to\n+   the assembler.  It can also specify how to translate options you give to GNU\n+   CC into options for GCC to pass to the assembler.  See the file `sun3.h'\n+   for an example of this.\n+\n+   Do not define this macro if it does not need to do anything.\n+\n+   Defined in svr4.h.  */\n+#undef  ASM_SPEC\n+#define ASM_SPEC \"\\\n+%{G*} %{v} %{n} %{T} %{Ym,*} %{Yd,*} %{Wa,*:%*} \\\n+    %{mno-fdpic:-mnopic} %{mfdpic}\"\n+\n+#define LINK_SPEC \"\\\n+%{h*} %{v:-V} \\\n+%{b} \\\n+%{mfdpic:-melf32bfinfd -z text} \\\n+%{static:-dn -Bstatic} \\\n+%{shared:-G -Bdynamic} \\\n+%{symbolic:-Bsymbolic} \\\n+%{G*} \\\n+%{YP,*} \\\n+%{Qy:} %{!Qn:-Qy} \\\n+-init __init -fini __fini \"\n+\n /* Generate DSP instructions, like DSP halfword loads */\n #define TARGET_DSP\t\t\t(1)\n \n@@ -117,6 +156,10 @@ extern const char *bfin_library_id_string;\n      to allocate such a register (if necessary). */\n #define PIC_OFFSET_TABLE_REGNUM (REG_P5)\n \n+#define FDPIC_FPTR_REGNO REG_P1\n+#define FDPIC_REGNO REG_P3\n+#define OUR_FDPIC_REG\tget_hard_reg_initial_val (SImode, FDPIC_REGNO)\n+\n /* A static chain register for nested functions.  We need to use a\n    call-clobbered register for this.  */\n #define STATIC_CHAIN_REGNUM REG_P2\n@@ -157,13 +200,28 @@ extern const char *bfin_library_id_string;\n   (TREE_CODE (EXP) == STRING_CST        \\\n    && (ALIGN) < BITS_PER_WORD ? BITS_PER_WORD : (ALIGN))    \n \n-#define TRAMPOLINE_SIZE 18\n+#define TRAMPOLINE_SIZE (TARGET_FDPIC ? 30 : 18)\n #define TRAMPOLINE_TEMPLATE(FILE)                                       \\\n-  fprintf(FILE, \"\\t.dd\\t0x0000e109\\n\"); /* p1.l = fn low */\t\t\\\n-  fprintf(FILE, \"\\t.dd\\t0x0000e149\\n\"); /* p1.h = fn high */;\t\t\\\n-  fprintf(FILE, \"\\t.dd\\t0x0000e10a\\n\"); /* p2.l = sc low */;\t\t\\\n-  fprintf(FILE, \"\\t.dd\\t0x0000e14a\\n\"); /* p2.h = sc high */;\t\t\\\n-  fprintf(FILE, \"\\t.dw\\t0x0051\\n\"); /* jump (p1)*/\n+  if (TARGET_FDPIC)\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      fprintf(FILE, \"\\t.dd\\t0x00000000\\n\"); /* 0 */\t\t\t\\\n+      fprintf(FILE, \"\\t.dd\\t0x00000000\\n\"); /* 0 */\t\t\t\\\n+      fprintf(FILE, \"\\t.dd\\t0x0000e109\\n\"); /* p1.l = fn low */\t\t\\\n+      fprintf(FILE, \"\\t.dd\\t0x0000e149\\n\"); /* p1.h = fn high */\t\\\n+      fprintf(FILE, \"\\t.dd\\t0x0000e10a\\n\"); /* p2.l = sc low */\t\t\\\n+      fprintf(FILE, \"\\t.dd\\t0x0000e14a\\n\"); /* p2.h = sc high */\t\\\n+      fprintf(FILE, \"\\t.dw\\t0xac4b\\n\"); /* p3 = [p1 + 4] */\t\t\\\n+      fprintf(FILE, \"\\t.dw\\t0x9149\\n\"); /* p1 = [p1] */\t\t\t\\\n+      fprintf(FILE, \"\\t.dw\\t0x0051\\n\"); /* jump (p1)*/\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  else\t\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      fprintf(FILE, \"\\t.dd\\t0x0000e109\\n\"); /* p1.l = fn low */\t\t\\\n+      fprintf(FILE, \"\\t.dd\\t0x0000e149\\n\"); /* p1.h = fn high */\t\\\n+      fprintf(FILE, \"\\t.dd\\t0x0000e10a\\n\"); /* p2.l = sc low */\t\t\\\n+      fprintf(FILE, \"\\t.dd\\t0x0000e14a\\n\"); /* p2.h = sc high */\t\\\n+      fprintf(FILE, \"\\t.dw\\t0x0051\\n\"); /* jump (p1)*/\t\t\t\\\n+    }\n \n #define INITIALIZE_TRAMPOLINE(TRAMP, FNADDR, CXT) \\\n   initialize_trampoline (TRAMP, FNADDR, CXT)\n@@ -299,7 +357,9 @@ extern const char *bfin_library_id_string;\n #define CONDITIONAL_REGISTER_USAGE\t\t\t\\\n   {\t\t\t\t\t\t\t\\\n     conditional_register_usage();                       \\\n-    if (flag_pic)\t\t\t\t\t\\\n+    if (TARGET_FDPIC)\t\t\t\t\t\\\n+      call_used_regs[FDPIC_REGNO] = 1;\t\t\t\\\n+    if (!TARGET_FDPIC && flag_pic)\t\t\t\\\n       {\t\t\t\t\t\t\t\\\n \tfixed_regs[PIC_OFFSET_TABLE_REGNUM] = 1;\t\\\n \tcall_used_regs[PIC_OFFSET_TABLE_REGNUM] = 1;\t\\\n@@ -343,6 +403,8 @@ enum reg_class\n   EVEN_DREGS,\n   ODD_DREGS,\n   DREGS,\n+  FDPIC_REGS,\n+  FDPIC_FPTR_REGS,\n   PREGS_CLOBBERED,\n   PREGS,\n   IPREGS,\n@@ -374,6 +436,8 @@ enum reg_class\n    \"EVEN_DREGS\",\t\\\n    \"ODD_DREGS\",\t\t\\\n    \"DREGS\",\t\t\\\n+   \"FDPIC_REGS\",\t\\\n+   \"FDPIC_FPTR_REGS\",\t\\\n    \"PREGS_CLOBBERED\",\t\\\n    \"PREGS\",\t\t\\\n    \"IPREGS\",\t\t\\\n@@ -413,6 +477,8 @@ enum reg_class\n     { 0x00000055,    0 },\t\t/* EVEN_DREGS */   \\\n     { 0x000000aa,    0 },\t\t/* ODD_DREGS */   \\\n     { 0x000000ff,    0 },\t\t/* DREGS */   \\\n+    { 0x00000800,    0x000 },\t\t/* FDPIC_REGS */   \\\n+    { 0x00000200,    0x000 },\t\t/* FDPIC_FPTR_REGS */   \\\n     { 0x00004700,    0x800 },\t\t/* PREGS_CLOBBERED */   \\\n     { 0x0000ff00,    0x800 },\t\t/* PREGS */   \\\n     { 0x000fff00,    0x800 },\t\t/* IPREGS */\t\\\n@@ -455,6 +521,8 @@ enum reg_class\n \n #define REG_CLASS_FROM_LETTER(LETTER)\t\\\n   ((LETTER) == 'a' ? PREGS :            \\\n+   (LETTER) == 'Z' ? FDPIC_REGS :\t\\\n+   (LETTER) == 'Y' ? FDPIC_FPTR_REGS :\t\\\n    (LETTER) == 'd' ? DREGS : \t\t\\\n    (LETTER) == 'z' ? PREGS_CLOBBERED :\t\\\n    (LETTER) == 'D' ? EVEN_DREGS : \t\\"}, {"sha": "b2b7cffa587155e512b2c9ede2750f32ae4e812e", "filename": "gcc/config/bfin/bfin.md", "status": "modified", "additions": 114, "deletions": 2, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6614f9f559f734f3be5d10eb7a06791ec7a908a4/gcc%2Fconfig%2Fbfin%2Fbfin.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6614f9f559f734f3be5d10eb7a06791ec7a908a4/gcc%2Fconfig%2Fbfin%2Fbfin.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.md?ref=6614f9f559f734f3be5d10eb7a06791ec7a908a4", "patch": "@@ -122,12 +122,15 @@\n    (UNSPEC_PUSH_MULTIPLE 5)\n    ;; Multiply or MAC with extra CONST_INT operand specifying the macflag\n    (UNSPEC_MUL_WITH_FLAG 6)\n-   (UNSPEC_MAC_WITH_FLAG 7)])\n+   (UNSPEC_MAC_WITH_FLAG 7)\n+   (UNSPEC_MOVE_FDPIC 8)\n+   (UNSPEC_FUNCDESC_GOT17M4 9)])\n \n (define_constants\n   [(UNSPEC_VOLATILE_EH_RETURN 0)\n    (UNSPEC_VOLATILE_CSYNC 1)\n-   (UNSPEC_VOLATILE_SSYNC 2)])\n+   (UNSPEC_VOLATILE_SSYNC 2)\n+   (UNSPEC_VOLATILE_LOAD_FUNCDESC 3)])\n \n (define_constants\n   [(MACFLAG_NONE 0)\n@@ -1495,6 +1498,19 @@\n \n ;;  Call instructions..\n \n+;; The explicit MEM inside the UNSPEC prevents the compiler from moving\n+;; the load before a branch after a NULL test, or before a store that\n+;; initializes a function descriptor.\n+\n+(define_insn_and_split \"load_funcdescsi\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=a\")\n+\t(unspec_volatile:SI [(mem:SI (match_operand:SI 1 \"address_operand\" \"p\"))]\n+\t\t\t    UNSPEC_VOLATILE_LOAD_FUNCDESC))]\n+  \"\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(set (match_dup 0) (mem:SI (match_dup 1)))])\n+\n (define_expand \"call\"\n   [(parallel [(call (match_operand:SI 0 \"\" \"\")\n \t\t    (match_operand 1 \"\" \"\"))\n@@ -1539,6 +1555,102 @@\n   DONE;\n })\n \n+(define_insn \"*call_symbol_fdpic\"\n+  [(call (mem:SI (match_operand:SI 0 \"symbol_ref_operand\" \"Q\"))\n+\t (match_operand 1 \"general_operand\" \"g\"))\n+   (use (match_operand:SI 2 \"register_operand\" \"Z\"))\n+   (use (match_operand 3 \"\" \"\"))]\n+  \"! SIBLING_CALL_P (insn)\n+   && GET_CODE (operands[0]) == SYMBOL_REF\n+   && !bfin_longcall_p (operands[0], INTVAL (operands[3]))\"\n+  \"call %0;\"\n+  [(set_attr \"type\" \"call\")\n+   (set_attr \"length\" \"4\")])\n+\n+(define_insn \"*sibcall_symbol_fdpic\"\n+  [(call (mem:SI (match_operand:SI 0 \"symbol_ref_operand\" \"Q\"))\n+\t (match_operand 1 \"general_operand\" \"g\"))\n+   (use (match_operand:SI 2 \"register_operand\" \"Z\"))\n+   (use (match_operand 3 \"\" \"\"))\n+   (return)]\n+  \"SIBLING_CALL_P (insn)\n+   && GET_CODE (operands[0]) == SYMBOL_REF\n+   && !bfin_longcall_p (operands[0], INTVAL (operands[3]))\"\n+  \"jump.l %0;\"\n+  [(set_attr \"type\" \"br\")\n+   (set_attr \"length\" \"4\")])\n+\n+(define_insn \"*call_value_symbol_fdpic\"\n+  [(set (match_operand 0 \"register_operand\" \"=d\")\n+        (call (mem:SI (match_operand:SI 1 \"symbol_ref_operand\" \"Q\"))\n+\t      (match_operand 2 \"general_operand\" \"g\")))\n+   (use (match_operand:SI 3 \"register_operand\" \"Z\"))\n+   (use (match_operand 4 \"\" \"\"))]\n+  \"! SIBLING_CALL_P (insn)\n+   && GET_CODE (operands[1]) == SYMBOL_REF\n+   && !bfin_longcall_p (operands[1], INTVAL (operands[4]))\"\n+  \"call %1;\"\n+  [(set_attr \"type\" \"call\")\n+   (set_attr \"length\" \"4\")])\n+\n+(define_insn \"*sibcall_value_symbol_fdpic\"\n+  [(set (match_operand 0 \"register_operand\" \"=d\")\n+         (call (mem:SI (match_operand:SI 1 \"symbol_ref_operand\" \"Q\"))\n+\t       (match_operand 2 \"general_operand\" \"g\")))\n+   (use (match_operand:SI 3 \"register_operand\" \"Z\"))\n+   (use (match_operand 4 \"\" \"\"))\n+   (return)]\n+  \"SIBLING_CALL_P (insn)\n+   && GET_CODE (operands[1]) == SYMBOL_REF\n+   && !bfin_longcall_p (operands[1], INTVAL (operands[4]))\"\n+  \"jump.l %1;\"\n+  [(set_attr \"type\" \"br\")\n+   (set_attr \"length\" \"4\")])\n+\n+(define_insn \"*call_insn_fdpic\"\n+  [(call (mem:SI (match_operand:SI 0 \"register_no_elim_operand\" \"Y\"))\n+\t (match_operand 1 \"general_operand\" \"g\"))\n+   (use (match_operand:SI 2 \"register_operand\" \"Z\"))\n+   (use (match_operand 3 \"\" \"\"))]\n+  \"! SIBLING_CALL_P (insn)\"\n+  \"call (%0);\"\n+  [(set_attr \"type\" \"call\")\n+   (set_attr \"length\" \"2\")])\n+\n+(define_insn \"*sibcall_insn_fdpic\"\n+  [(call (mem:SI (match_operand:SI 0 \"register_no_elim_operand\" \"Y\"))\n+\t (match_operand 1 \"general_operand\" \"g\"))\n+   (use (match_operand:SI 2 \"register_operand\" \"Z\"))\n+   (use (match_operand 3 \"\" \"\"))\n+   (return)]\n+  \"SIBLING_CALL_P (insn)\"\n+  \"jump (%0);\"\n+  [(set_attr \"type\" \"br\")\n+   (set_attr \"length\" \"2\")])\n+\n+(define_insn \"*call_value_insn_fdpic\"\n+  [(set (match_operand 0 \"register_operand\" \"=d\")\n+        (call (mem:SI (match_operand:SI 1 \"register_no_elim_operand\" \"Y\"))\n+\t      (match_operand 2 \"general_operand\" \"g\")))\n+   (use (match_operand:SI 3 \"register_operand\" \"Z\"))\n+   (use (match_operand 4 \"\" \"\"))]\n+  \"! SIBLING_CALL_P (insn)\"\n+  \"call (%1);\"\n+  [(set_attr \"type\" \"call\")\n+   (set_attr \"length\" \"2\")])\n+\n+(define_insn \"*sibcall_value_insn_fdpic\"\n+  [(set (match_operand 0 \"register_operand\" \"=d\")\n+         (call (mem:SI (match_operand:SI 1 \"register_no_elim_operand\" \"Y\"))\n+\t       (match_operand 2 \"general_operand\" \"g\")))\n+   (use (match_operand:SI 3 \"register_operand\" \"Z\"))\n+   (use (match_operand 4 \"\" \"\"))\n+   (return)]\n+  \"SIBLING_CALL_P (insn)\"\n+  \"jump (%1);\"\n+  [(set_attr \"type\" \"br\")\n+   (set_attr \"length\" \"2\")])\n+\n (define_insn \"*call_symbol\"\n   [(call (mem:SI (match_operand:SI 0 \"symbol_ref_operand\" \"Q\"))\n \t (match_operand 1 \"general_operand\" \"g\"))"}, {"sha": "5fe54c9cfb736838f1772d78b67492b3960d85ba", "filename": "gcc/config/bfin/bfin.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6614f9f559f734f3be5d10eb7a06791ec7a908a4/gcc%2Fconfig%2Fbfin%2Fbfin.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6614f9f559f734f3be5d10eb7a06791ec7a908a4/gcc%2Fconfig%2Fbfin%2Fbfin.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.opt?ref=6614f9f559f734f3be5d10eb7a06791ec7a908a4", "patch": "@@ -47,3 +47,7 @@ ID of shared library to build\n mlong-calls\n Target Report Mask(LONG_CALLS)\n Avoid generating pc-relative calls; use indirection\n+\n+mfdpic\n+Target Report Mask(FDPIC)\n+Enable Function Descriptor PIC mode"}, {"sha": "c97535999860f2c71ed99ad39ac27e693cd49857", "filename": "gcc/config/bfin/crti.s", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6614f9f559f734f3be5d10eb7a06791ec7a908a4/gcc%2Fconfig%2Fbfin%2Fcrti.s", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6614f9f559f734f3be5d10eb7a06791ec7a908a4/gcc%2Fconfig%2Fbfin%2Fcrti.s", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fcrti.s?ref=6614f9f559f734f3be5d10eb7a06791ec7a908a4", "patch": "@@ -40,6 +40,8 @@ Boston, MA 02110-1301, USA.  */\n __init:\n #if defined __ID_SHARED_LIB__\n \t[--SP] = P5;\n+#elif defined __BFIN_FDPIC__\n+\t[--SP] = P3; \n #endif\n \tLINK 12;\n #if defined __ID_SHARED_LIB__\n@@ -51,6 +53,8 @@ __init:\n __fini:\n #if defined __ID_SHARED_LIB__\n \t[--SP] = P5; \n+#elif defined __BFIN_FDPIC__\n+\t[--SP] = P3; \n #endif\n \tLINK 12; \n #if defined __ID_SHARED_LIB__"}, {"sha": "06af2bea9e7c79eb5739914167c8c4f61359d1fd", "filename": "gcc/config/bfin/crtn.s", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6614f9f559f734f3be5d10eb7a06791ec7a908a4/gcc%2Fconfig%2Fbfin%2Fcrtn.s", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6614f9f559f734f3be5d10eb7a06791ec7a908a4/gcc%2Fconfig%2Fbfin%2Fcrtn.s", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fcrtn.s?ref=6614f9f559f734f3be5d10eb7a06791ec7a908a4", "patch": "@@ -38,12 +38,16 @@ Boston, MA 02110-1301, USA.  */\n \tunlink; \n #if defined __ID_SHARED_LIB__\n \tP5 = [SP++];\n+#elif defined __BFIN_FDPIC__\n+\tP3 = [SP++];\n #endif\n \trts;\n \n \t.section .fini\n \tunlink;\n #if defined __ID_SHARED_LIB__\n \tP5 = [SP++];\n+#elif defined __BFIN_FDPIC__\n+\tP3 = [SP++];\n #endif\n \trts;"}, {"sha": "39d06881dfbba35088bcbced4c2257f601e2c0af", "filename": "gcc/config/bfin/elf.h", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6614f9f559f734f3be5d10eb7a06791ec7a908a4/gcc%2Fconfig%2Fbfin%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6614f9f559f734f3be5d10eb7a06791ec7a908a4/gcc%2Fconfig%2Fbfin%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Felf.h?ref=6614f9f559f734f3be5d10eb7a06791ec7a908a4", "patch": "@@ -7,12 +7,19 @@\n      sprintf (LABEL, \"*%s%s$%d\", LOCAL_LABEL_PREFIX, PREFIX, (int) NUM)\n \n #undef  STARTFILE_SPEC\n-#define STARTFILE_SPEC\t\"crt0%O%s crti%O%s crtbegin%O%s crtlibid%O%s\"\n+#define STARTFILE_SPEC\t\"%{!shared: crt0%O%s} crti%O%s crtbegin%O%s crtlibid%O%s\"\n \n #undef  ENDFILE_SPEC\n #define ENDFILE_SPEC\t\"crtend%O%s crtn%O%s\"\n \n #undef USER_LABEL_PREFIX\n #define USER_LABEL_PREFIX \"_\"\n \n+#ifdef __BFIN_FDPIC__\n+#define CRT_CALL_STATIC_FUNCTION(SECTION_OP, FUNC)\t\\\n+asm (SECTION_OP); \\\n+asm (\"P3 = [SP + 20];\\n\\tcall \" USER_LABEL_PREFIX #FUNC \";\"); \\\n+asm (TEXT_SECTION_ASM_OP);\n+#endif\n+\n #define NO_IMPLICIT_EXTERN_C"}, {"sha": "8b30cf624975ecb053ad5aadecd46ec34ecb7e01", "filename": "gcc/config/bfin/t-bfin-elf", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6614f9f559f734f3be5d10eb7a06791ec7a908a4/gcc%2Fconfig%2Fbfin%2Ft-bfin-elf", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6614f9f559f734f3be5d10eb7a06791ec7a908a4/gcc%2Fconfig%2Fbfin%2Ft-bfin-elf", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Ft-bfin-elf?ref=6614f9f559f734f3be5d10eb7a06791ec7a908a4", "patch": "@@ -3,7 +3,7 @@\n LIB1ASMSRC = bfin/lib1funcs.asm\n LIB1ASMFUNCS = _divsi3 _udivsi3 _umodsi3 _modsi3\n \n-EXTRA_PARTS = crtbegin.o crtend.o crti.o crtn.o crtlibid.o\n+EXTRA_PARTS = crtbegin.o crtend.o crtbeginS.o crtendS.o crti.o crtn.o crtlibid.o\n \n FPBIT = fp-bit.c\n DPBIT = dp-bit.c\n@@ -19,10 +19,13 @@ fp-bit.c: $(srcdir)/config/fp-bit.c\n # it is fixed in binutils (if it is necessary).\n GCC_CFLAGS += -N\n \n-MULTILIB_OPTIONS=mid-shared-library\n+CRTSTUFF_T_CFLAGS = -fpic\n+TARGET_LIBGCC2_CFLAGS = -fpic\n+\n+MULTILIB_OPTIONS=mid-shared-library mfdpic\n MULTILIB_DEFAULTS=\n MULTILIB_DIRNAMES=\n-MULTILIB_EXCEPTIONS=\n+MULTILIB_EXCEPTIONS=mid-shared-library/mfdpic\n \n # Assemble startup files.\n $(T)crti.o: $(srcdir)/config/bfin/crti.s $(GCC_PASSES)\n@@ -38,4 +41,4 @@ $(T)crtlibid.o: $(srcdir)/config/bfin/crtlibid.s $(GCC_PASSES)\n \t-c -o $(T)crtlibid.o -x assembler-with-cpp \\\n \t$(srcdir)/config/bfin/crtlibid.s\n \n-EXTRA_MULTILIB_PARTS= crtbegin.o crtend.o crti.o crtn.o crtlibid.o\n+EXTRA_MULTILIB_PARTS = crtbegin.o crtend.o crtbeginS.o crtendS.o crti.o crtn.o crtlibid.o"}, {"sha": "57e062dd68e608e1dae06880ba3130f5ae4acf76", "filename": "gcc/config/bfin/uclinux.h", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6614f9f559f734f3be5d10eb7a06791ec7a908a4/gcc%2Fconfig%2Fbfin%2Fuclinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6614f9f559f734f3be5d10eb7a06791ec7a908a4/gcc%2Fconfig%2Fbfin%2Fuclinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fuclinux.h?ref=6614f9f559f734f3be5d10eb7a06791ec7a908a4", "patch": "@@ -4,7 +4,7 @@\n \n #undef  STARTFILE_SPEC\n #define STARTFILE_SPEC \\\n-  \"crt1%O%s crti%O%s crtbegin%O%s crtlibid%O%s\"\n+  \"%{!shared: crt1%O%s} crti%O%s crtbegin%O%s crtlibid%O%s\"\n \n #undef  ENDFILE_SPEC\n #define ENDFILE_SPEC \\\n@@ -13,4 +13,11 @@\n #undef  LIB_SPEC\n #define LIB_SPEC \"%{pthread:-lpthread} -lc\"\n \n+#ifdef __BFIN_FDPIC__\n+#define CRT_CALL_STATIC_FUNCTION(SECTION_OP, FUNC)\t\\\n+asm (SECTION_OP); \\\n+asm (\"P3 = [SP + 20];\\n\\tcall \" USER_LABEL_PREFIX #FUNC \";\"); \\\n+asm (TEXT_SECTION_ASM_OP);\n+#endif\n+\n #define NO_IMPLICIT_EXTERN_C"}]}