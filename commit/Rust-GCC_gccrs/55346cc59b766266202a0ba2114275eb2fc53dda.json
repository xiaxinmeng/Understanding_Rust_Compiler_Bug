{"sha": "55346cc59b766266202a0ba2114275eb2fc53dda", "node_id": "C_kwDOANBUbNoAKDU1MzQ2Y2M1OWI3NjYyNjYyMDJhMGJhMjExNDI3NWViMmZjNTNkZGE", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-05-06T11:46:13Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-05-09T10:30:48Z"}, "message": "Destructure our generics, placeholers or projections during coercion\n\nWhen we coerce types we need to destructure from the generics in order to\napply these coercion rules correctly or we end up returning a bad\nerror_mark_node.", "tree": {"sha": "652828c92c611dee3a451ee3ffd48ba2ac778800", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/652828c92c611dee3a451ee3ffd48ba2ac778800"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/55346cc59b766266202a0ba2114275eb2fc53dda", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55346cc59b766266202a0ba2114275eb2fc53dda", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55346cc59b766266202a0ba2114275eb2fc53dda", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55346cc59b766266202a0ba2114275eb2fc53dda/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74e836599ce80a11b1fe28065ed7aae6ffa3b7e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74e836599ce80a11b1fe28065ed7aae6ffa3b7e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74e836599ce80a11b1fe28065ed7aae6ffa3b7e2"}], "stats": {"total": 66, "additions": 55, "deletions": 11}, "files": [{"sha": "52e0568c88e4c31140c75e78beaac010e5a10168", "filename": "gcc/rust/backend/rust-compile-base.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55346cc59b766266202a0ba2114275eb2fc53dda/gcc%2Frust%2Fbackend%2Frust-compile-base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55346cc59b766266202a0ba2114275eb2fc53dda/gcc%2Frust%2Fbackend%2Frust-compile-base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-base.h?ref=55346cc59b766266202a0ba2114275eb2fc53dda", "patch": "@@ -40,8 +40,8 @@ class HIRCompileBase\n protected:\n   Context *get_context () { return ctx; }\n \n-  tree coercion_site (tree rvalue, TyTy::BaseType *actual,\n-\t\t      TyTy::BaseType *expected, Location lvalue_locus,\n+  tree coercion_site (tree rvalue, const TyTy::BaseType *actual,\n+\t\t      const TyTy::BaseType *expected, Location lvalue_locus,\n \t\t      Location rvalue_locus);\n \n   tree coerce_to_dyn_object (tree compiled_ref, const TyTy::BaseType *actual,"}, {"sha": "d9349d5a07bdf94895cdfbcc3f42b3bd197f394f", "filename": "gcc/rust/backend/rust-compile.cc", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55346cc59b766266202a0ba2114275eb2fc53dda/gcc%2Frust%2Fbackend%2Frust-compile.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55346cc59b766266202a0ba2114275eb2fc53dda/gcc%2Frust%2Fbackend%2Frust-compile.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile.cc?ref=55346cc59b766266202a0ba2114275eb2fc53dda", "patch": "@@ -198,21 +198,26 @@ CompileStructExprField::visit (HIR::StructExprFieldIdentifier &field)\n // Shared methods in compilation\n \n tree\n-HIRCompileBase::coercion_site (tree rvalue, TyTy::BaseType *actual,\n-\t\t\t       TyTy::BaseType *expected, Location lvalue_locus,\n-\t\t\t       Location rvalue_locus)\n+HIRCompileBase::coercion_site (tree rvalue, const TyTy::BaseType *rval,\n+\t\t\t       const TyTy::BaseType *lval,\n+\t\t\t       Location lvalue_locus, Location rvalue_locus)\n {\n   if (rvalue == error_mark_node)\n     return error_mark_node;\n \n+  const TyTy::BaseType *actual = rval->destructure ();\n+  const TyTy::BaseType *expected = lval->destructure ();\n+\n   if (expected->get_kind () == TyTy::TypeKind::REF)\n     {\n       // bad coercion... of something to a reference\n       if (actual->get_kind () != TyTy::TypeKind::REF)\n \treturn error_mark_node;\n \n-      TyTy::ReferenceType *exp = static_cast<TyTy::ReferenceType *> (expected);\n-      TyTy::ReferenceType *act = static_cast<TyTy::ReferenceType *> (actual);\n+      const TyTy::ReferenceType *exp\n+\t= static_cast<const TyTy::ReferenceType *> (expected);\n+      const TyTy::ReferenceType *act\n+\t= static_cast<const TyTy::ReferenceType *> (actual);\n \n       tree expected_type = TyTyResolveCompile::compile (ctx, act->get_base ());\n       tree deref_rvalue\n@@ -235,20 +240,22 @@ HIRCompileBase::coercion_site (tree rvalue, TyTy::BaseType *actual,\n       if (!valid_coercion)\n \treturn error_mark_node;\n \n-      TyTy::ReferenceType *exp = static_cast<TyTy::ReferenceType *> (expected);\n+      const TyTy::ReferenceType *exp\n+\t= static_cast<const TyTy::ReferenceType *> (expected);\n \n       TyTy::BaseType *actual_base = nullptr;\n       tree expected_type = error_mark_node;\n       if (actual->get_kind () == TyTy::TypeKind::REF)\n \t{\n-\t  TyTy::ReferenceType *act\n-\t    = static_cast<TyTy::ReferenceType *> (actual);\n+\t  const TyTy::ReferenceType *act\n+\t    = static_cast<const TyTy::ReferenceType *> (actual);\n \t  actual_base = act->get_base ();\n \t  expected_type = TyTyResolveCompile::compile (ctx, act->get_base ());\n \t}\n       else if (actual->get_kind () == TyTy::TypeKind::POINTER)\n \t{\n-\t  TyTy::PointerType *act = static_cast<TyTy::PointerType *> (actual);\n+\t  const TyTy::PointerType *act\n+\t    = static_cast<const TyTy::PointerType *> (actual);\n \t  actual_base = act->get_base ();\n \t  expected_type = TyTyResolveCompile::compile (ctx, act->get_base ());\n \t}"}, {"sha": "09f5e4c5a36a7eb46ece202010076a5795957ad1", "filename": "gcc/rust/typecheck/rust-tyty.cc", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55346cc59b766266202a0ba2114275eb2fc53dda/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55346cc59b766266202a0ba2114275eb2fc53dda/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc?ref=55346cc59b766266202a0ba2114275eb2fc53dda", "patch": "@@ -229,6 +229,38 @@ BaseType::get_root () const\n   return root;\n }\n \n+const BaseType *\n+BaseType::destructure () const\n+{\n+  switch (get_kind ())\n+    {\n+      case TyTy::TypeKind::PARAM: {\n+\tconst TyTy::ParamType *p = static_cast<const TyTy::ParamType *> (this);\n+\treturn p->resolve ();\n+      }\n+      break;\n+\n+      case TyTy::TypeKind::PLACEHOLDER: {\n+\tconst TyTy::PlaceholderType *p\n+\t  = static_cast<const TyTy::PlaceholderType *> (this);\n+\trust_assert (p->can_resolve ());\n+\treturn p->resolve ();\n+      }\n+      break;\n+\n+      case TyTy::TypeKind::PROJECTION: {\n+\tconst TyTy::ProjectionType *p\n+\t  = static_cast<const TyTy::ProjectionType *> (this);\n+\treturn p->get ();\n+      }\n+\n+    default:\n+      return this;\n+    }\n+\n+  return this;\n+}\n+\n TyVar::TyVar (HirId ref) : ref (ref)\n {\n   // ensure this reference is defined within the context"}, {"sha": "8517b725ea2640b6c16f019b4d855de0300d8b1d", "filename": "gcc/rust/typecheck/rust-tyty.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55346cc59b766266202a0ba2114275eb2fc53dda/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55346cc59b766266202a0ba2114275eb2fc53dda/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.h?ref=55346cc59b766266202a0ba2114275eb2fc53dda", "patch": "@@ -253,8 +253,13 @@ class BaseType : public TypeBoundsMappings\n \t\tdebug_str ().c_str ());\n   }\n \n+  // FIXME this will eventually go away\n   const BaseType *get_root () const;\n \n+  // This will get the monomorphized type from Params, Placeholders or\n+  // Projections if available or error\n+  const BaseType *destructure () const;\n+\n   const RustIdent &get_ident () const { return ident; }\n \n   Location get_locus () const { return ident.locus; }"}]}