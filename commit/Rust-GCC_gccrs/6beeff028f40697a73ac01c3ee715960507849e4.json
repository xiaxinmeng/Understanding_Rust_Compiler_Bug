{"sha": "6beeff028f40697a73ac01c3ee715960507849e4", "node_id": "C_kwDOANBUbNoAKDZiZWVmZjAyOGY0MDY5N2E3M2FjMDFjM2VlNzE1OTYwNTA3ODQ5ZTQ", "commit": {"author": {"name": "Piotr Trojanek", "email": "trojanek@adacore.com", "date": "2022-07-07T22:05:36Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-07-13T10:01:17Z"}, "message": "[Ada] Fix for visibility of aspect expressions inside generic units\n\nWhen a generic unit contains references to global entities (i.e.\nentities declared outside of this generic unit), those references are\nsaved: from the analyzed copy of a generic unit (which is then\ndiscarded) into a generic template (which is then instantiated, possibly\nmany times). To save those references we maintain an association from\nnodes in the generic template to nodes in the analyzed copy. However,\nthis association breaks when analysis of the generic copy calls\nRelocate_Node, which conceptually only moves the node, while in fact it\ncreates a copy with a new Node_Id.\n\nIn particular, this association was broken by calls to Relocate_Node\nthat happen when transforming various aspects into corresponding pragmas\nor attribute definition clases. For the most common Pre and Post aspects\nthis was fixed years ago by not using Relocate_Node and simply sharing\nthe tree.  This patch extends this fix to other aspects, in particular\nthose that allow non-static expressions.\n\ngcc/ada/\n\n\t* sem_ch13.adb (Relocate_Expression): New routine with code that\n\tpreviously was only applied to Pre and Post aspects.\n\t(Analyze_Aspect_Specifications): Apply the above routine to\n\tother aspects, in particular to aspects Address, Attach_Handler,\n\tPredicate and Interrupt_Priority.", "tree": {"sha": "d53d5305545f63d0053b08be9243c6b0122d8875", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d53d5305545f63d0053b08be9243c6b0122d8875"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6beeff028f40697a73ac01c3ee715960507849e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6beeff028f40697a73ac01c3ee715960507849e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6beeff028f40697a73ac01c3ee715960507849e4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6beeff028f40697a73ac01c3ee715960507849e4/comments", "author": {"login": "ptroja", "id": 161602, "node_id": "MDQ6VXNlcjE2MTYwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/161602?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptroja", "html_url": "https://github.com/ptroja", "followers_url": "https://api.github.com/users/ptroja/followers", "following_url": "https://api.github.com/users/ptroja/following{/other_user}", "gists_url": "https://api.github.com/users/ptroja/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptroja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptroja/subscriptions", "organizations_url": "https://api.github.com/users/ptroja/orgs", "repos_url": "https://api.github.com/users/ptroja/repos", "events_url": "https://api.github.com/users/ptroja/events{/privacy}", "received_events_url": "https://api.github.com/users/ptroja/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a714ca803cbf2f9e26ca214d7ddd7ed65bac2c26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a714ca803cbf2f9e26ca214d7ddd7ed65bac2c26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a714ca803cbf2f9e26ca214d7ddd7ed65bac2c26"}], "stats": {"total": 65, "additions": 35, "deletions": 30}, "files": [{"sha": "7ea04a651e7b9cfeecdd4b718234ae609d76bca1", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 35, "deletions": 30, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6beeff028f40697a73ac01c3ee715960507849e4/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6beeff028f40697a73ac01c3ee715960507849e4/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=6beeff028f40697a73ac01c3ee715960507849e4", "patch": "@@ -1650,6 +1650,18 @@ package body Sem_Ch13 is\n       --  pragma of the same kind. Flag Is_Generic should be set when the\n       --  context denotes a generic instance.\n \n+      function Relocate_Expression (Source : Node_Id) return Node_Id;\n+      --  Outside of a generic this function is equivalent to Relocate_Node.\n+      --  Inside a generic it is an identity function, because Relocate_Node\n+      --  would create a new node that is not associated with the generic\n+      --  template. This association is needed to save references to entities\n+      --  that are global to the generic (and might be not visible from where\n+      --  the generic is instantiated).\n+      --\n+      --  Inside a generic the original tree is shared between aspect and\n+      --  a corresponding pragma (or an attribute definition clause). This\n+      --  parallels what is done in sem_prag.adb (see Get_Argument).\n+\n       --------------\n       -- Decorate --\n       --------------\n@@ -1835,6 +1847,19 @@ package body Sem_Ch13 is\n          end if;\n       end Insert_Pragma;\n \n+      -------------------------\n+      -- Relocate_Expression --\n+      -------------------------\n+\n+      function Relocate_Expression (Source : Node_Id) return Node_Id is\n+      begin\n+         if Inside_A_Generic then\n+            return Source;\n+         else\n+            return Atree.Relocate_Node (Source);\n+         end if;\n+      end Relocate_Expression;\n+\n       --  Local variables\n \n       Aspect : Node_Id;\n@@ -3229,7 +3254,7 @@ package body Sem_Ch13 is\n                     Make_Attribute_Definition_Clause (Loc,\n                       Name       => Ent,\n                       Chars      => Nam,\n-                      Expression => Relocate_Node (Expr));\n+                      Expression => Relocate_Expression (Expr));\n \n                   --  If the address is specified, then we treat the entity as\n                   --  referenced, to avoid spurious warnings. This is analogous\n@@ -3293,7 +3318,7 @@ package body Sem_Ch13 is\n                        Make_Pragma_Argument_Association (Sloc (Ent),\n                          Expression => Ent),\n                        Make_Pragma_Argument_Association (Sloc (Expr),\n-                         Expression => Relocate_Node (Expr))),\n+                         Expression => Relocate_Expression (Expr))),\n                      Pragma_Name                  => Name_Attach_Handler);\n \n                   --  We need to insert this pragma into the tree to get proper\n@@ -3335,7 +3360,7 @@ package body Sem_Ch13 is\n                        Make_Pragma_Argument_Association (Sloc (Ent),\n                          Expression => Ent),\n                        Make_Pragma_Argument_Association (Sloc (Expr),\n-                         Expression => Relocate_Node (Expr))),\n+                         Expression => Relocate_Expression (Expr))),\n                      Pragma_Name => Name_Predicate);\n \n                   --  Mark type has predicates, and remember what kind of\n@@ -3580,7 +3605,7 @@ package body Sem_Ch13 is\n                        Make_Attribute_Definition_Clause (Loc,\n                          Name       => Ent,\n                          Chars      => Nam,\n-                         Expression => Relocate_Node (Expr));\n+                         Expression => Relocate_Expression (Expr));\n                   end if;\n \n                --  Suppress/Unsuppress\n@@ -4599,32 +4624,12 @@ package body Sem_Ch13 is\n \n                   --  Build the precondition/postcondition pragma\n \n-                  --  We use Relocate_Node here rather than New_Copy_Tree\n-                  --  because subsequent visibility analysis of the aspect\n-                  --  depends on this sharing. This should be cleaned up???\n-\n-                  --  If the context is generic, we want to preserve the\n-                  --  original tree, and simply share it between aspect and\n-                  --  generated attribute. This parallels what is done in\n-                  --  sem_prag.adb (see Get_Argument).\n-\n-                  declare\n-                     New_Expr : Node_Id;\n-\n-                  begin\n-                     if Inside_A_Generic then\n-                        New_Expr := Expr;\n-                     else\n-                        New_Expr := Relocate_Node (Expr);\n-                     end if;\n-\n-                     Aitem := Make_Aitem_Pragma\n-                       (Pragma_Argument_Associations => New_List (\n-                          Make_Pragma_Argument_Association (Eloc,\n-                            Chars      => Name_Check,\n-                            Expression => New_Expr)),\n-                          Pragma_Name                => Pname);\n-                  end;\n+                  Aitem := Make_Aitem_Pragma\n+                    (Pragma_Argument_Associations => New_List (\n+                       Make_Pragma_Argument_Association (Eloc,\n+                         Chars      => Name_Check,\n+                         Expression => Relocate_Expression (Expr))),\n+                       Pragma_Name                => Pname);\n \n                   --  Add message unless exception messages are suppressed\n "}]}