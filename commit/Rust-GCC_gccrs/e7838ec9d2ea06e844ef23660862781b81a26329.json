{"sha": "e7838ec9d2ea06e844ef23660862781b81a26329", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTc4MzhlYzlkMmVhMDZlODQ0ZWYyMzY2MDg2Mjc4MWI4MWEyNjMyOQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2015-10-24T02:58:10Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2015-10-24T02:58:10Z"}, "message": "DR 1518 DR 1630 PR c++/54835 PR c++/60417\n\n\tDR 1518\n\tDR 1630\n\tPR c++/54835\n\tPR c++/60417\n\t* call.c (convert_like_real): Value-initialization can't use\n\texplicit constructors in C++11 and up.\n\nFrom-SVN: r229283", "tree": {"sha": "4b5d627a01175537ecef6cdfba0e55d3f5b75529", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4b5d627a01175537ecef6cdfba0e55d3f5b75529"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e7838ec9d2ea06e844ef23660862781b81a26329", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7838ec9d2ea06e844ef23660862781b81a26329", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7838ec9d2ea06e844ef23660862781b81a26329", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7838ec9d2ea06e844ef23660862781b81a26329/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a8c6dabc47704047078af3c12807702b9f3a6c5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8c6dabc47704047078af3c12807702b9f3a6c5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8c6dabc47704047078af3c12807702b9f3a6c5a"}], "stats": {"total": 96, "additions": 78, "deletions": 18}, "files": [{"sha": "5434dd27795b99770c79e59c3fefc7daaa81167f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7838ec9d2ea06e844ef23660862781b81a26329/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7838ec9d2ea06e844ef23660862781b81a26329/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e7838ec9d2ea06e844ef23660862781b81a26329", "patch": "@@ -1,5 +1,12 @@\n 2015-10-23  Jason Merrill  <jason@redhat.com>\n \n+\tDR 1518\n+\tDR 1630\n+\tPR c++/54835\n+\tPR c++/60417\n+\t* call.c (convert_like_real): Value-initialization can't use\n+\texplicit constructors in C++11 and up.\n+\n \tPR c++/67813\n \t* constexpr.c (cxx_eval_store_expression): Always use *valp if\n \tset."}, {"sha": "1223dcd3b1448640859c51f807abcab9bcbe274b", "filename": "gcc/cp/call.c", "status": "modified", "additions": 26, "deletions": 15, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7838ec9d2ea06e844ef23660862781b81a26329/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7838ec9d2ea06e844ef23660862781b81a26329/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=e7838ec9d2ea06e844ef23660862781b81a26329", "patch": "@@ -6341,9 +6341,32 @@ convert_like_real (conversion *convs, tree expr, tree fn, int argnum,\n \ttree convfn = cand->fn;\n \tunsigned i;\n \n-\t/* If we're initializing from {}, it's value-initialization.  Note\n-\t   that under the resolution of core 1630, value-initialization can\n-\t   use explicit constructors.  */\n+\t/* When converting from an init list we consider explicit\n+\t   constructors, but actually trying to call one is an error.  */\n+\tif (DECL_NONCONVERTING_P (convfn) && DECL_CONSTRUCTOR_P (convfn)\n+\t    /* Unless this is for direct-list-initialization.  */\n+\t    && !DIRECT_LIST_INIT_P (expr)\n+\t    /* And in C++98 a default constructor can't be explicit.  */\n+\t    && cxx_dialect >= cxx11)\n+\t  {\n+\t    if (!(complain & tf_error))\n+\t      return error_mark_node;\n+\t    location_t loc = location_of (expr);\n+\t    if (CONSTRUCTOR_NELTS (expr) == 0\n+\t\t&& FUNCTION_FIRST_USER_PARMTYPE (convfn) != void_list_node)\n+\t      {\n+\t\tif (pedwarn (loc, 0, \"converting to %qT from initializer list \"\n+\t\t\t     \"would use explicit constructor %qD\",\n+\t\t\t     totype, convfn))\n+\t\t  inform (loc, \"in C++11 and above a default constructor \"\n+\t\t\t  \"can be explicit\");\n+\t      }\n+\t    else\n+\t      error (\"converting to %qT from initializer list would use \"\n+\t\t     \"explicit constructor %qD\", totype, convfn);\n+\t  }\n+\n+\t/* If we're initializing from {}, it's value-initialization.  */\n \tif (BRACE_ENCLOSED_INITIALIZER_P (expr)\n \t    && CONSTRUCTOR_NELTS (expr) == 0\n \t    && TYPE_HAS_DEFAULT_CONSTRUCTOR (totype))\n@@ -6359,18 +6382,6 @@ convert_like_real (conversion *convs, tree expr, tree fn, int argnum,\n \t    return expr;\n \t  }\n \n-\t/* When converting from an init list we consider explicit\n-\t   constructors, but actually trying to call one is an error.  */\n-\tif (DECL_NONCONVERTING_P (convfn) && DECL_CONSTRUCTOR_P (convfn)\n-\t    /* Unless this is for direct-list-initialization.  */\n-\t    && !DIRECT_LIST_INIT_P (expr))\n-\t  {\n-\t    if (!(complain & tf_error))\n-\t      return error_mark_node;\n-\t    error (\"converting to %qT from initializer list would use \"\n-\t\t   \"explicit constructor %qD\", totype, convfn);\n-\t  }\n-\n \texpr = mark_rvalue_use (expr);\n \n \t/* Set user_conv_p on the argument conversions, so rvalue/base"}, {"sha": "f31f85640bb8eb8d0c72c3dc9934c8946dd89d77", "filename": "gcc/testsuite/g++.dg/cpp0x/explicit10.C", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7838ec9d2ea06e844ef23660862781b81a26329/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fexplicit10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7838ec9d2ea06e844ef23660862781b81a26329/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fexplicit10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fexplicit10.C?ref=e7838ec9d2ea06e844ef23660862781b81a26329", "patch": "@@ -0,0 +1,40 @@\n+// DR 1518\n+// { dg-do compile { target c++11 } }\n+\n+struct A {\n+  explicit A() = default;\n+};\n+\n+struct B : A {\n+  explicit B() = default;\n+};\n+\n+struct C {\n+  explicit C();\n+};\n+\n+struct D : A {\n+  C c;\n+  explicit D() = default;\n+};\n+\n+template<typename T> void f() {\n+  T t = {};\t\t\t// { dg-error \"explicit\" }\n+}\n+template<typename T> void g() {\n+  void x(T t);\n+  x({});\t\t\t// { dg-error \"explicit\" }\n+}\n+\n+int main()\n+{\n+  f<A>();\t\t\t// { dg-bogus \"required from here\" }\n+  f<B>();\t\t\t// { dg-message \"required from here\" }\n+  f<C>();\t\t\t// { dg-message \"required from here\" }\n+  f<D>();\t\t\t// { dg-message \"required from here\" }\n+\n+  g<A>();\t\t\t// { dg-bogus \"required from here\" }\n+  g<B>();\t\t\t// { dg-message \"required from here\" }\n+  g<C>();\t\t\t// { dg-message \"required from here\" }\n+  g<D>();\t\t\t// { dg-message \"required from here\" }\n+}"}, {"sha": "6e6a11a64541b1f5393365790e16a74719c5d028", "filename": "gcc/testsuite/g++.dg/cpp0x/initlist40.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7838ec9d2ea06e844ef23660862781b81a26329/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist40.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7838ec9d2ea06e844ef23660862781b81a26329/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist40.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist40.C?ref=e7838ec9d2ea06e844ef23660862781b81a26329", "patch": "@@ -8,6 +8,6 @@ struct A\n \n int main()\n {\n-  A a1 = { };\n+  A a1 = { };\t\t\t// { dg-error \"explicit\" }\n   A a2 = { 24 };\t\t// { dg-error \"explicit\" }\n }"}, {"sha": "328e867319800049e45dae4657393dc15d2bbb58", "filename": "gcc/testsuite/g++.dg/init/explicit1.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7838ec9d2ea06e844ef23660862781b81a26329/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fexplicit1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7838ec9d2ea06e844ef23660862781b81a26329/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fexplicit1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fexplicit1.C?ref=e7838ec9d2ea06e844ef23660862781b81a26329", "patch": "@@ -1,9 +1,10 @@\n // PR c++/60417\n+// { dg-options -pedantic }\n \n struct A { explicit A(int = 0); };\n struct B { A a; };\n \n int main()\n {\n-  B b = {};\n+  B b = {};\t\t\t// { dg-warning \"explicit\" \"\" { target c++11 } }\n }"}, {"sha": "604426ae6d214a9275124aea81e8e7ec32076365", "filename": "gcc/testsuite/g++.dg/init/explicit2.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7838ec9d2ea06e844ef23660862781b81a26329/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fexplicit2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7838ec9d2ea06e844ef23660862781b81a26329/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fexplicit2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fexplicit2.C?ref=e7838ec9d2ea06e844ef23660862781b81a26329", "patch": "@@ -1,8 +1,9 @@\n // PR c++/60417\n+// { dg-options -pedantic }\n \n struct A { explicit A(int = 0); };\n \n int main()\n {\n-  A a[1] = { };\n+  A a[1] = { };\t\t\t// { dg-warning \"explicit\" \"\" { target c++11 } }\n }"}]}