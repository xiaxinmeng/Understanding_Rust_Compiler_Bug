{"sha": "15c097383f085dbb6e024f33dcd216657aa0e1bd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTVjMDk3MzgzZjA4NWRiYjZlMDI0ZjMzZGNkMjE2NjU3YWEwZTFiZA==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2000-10-25T03:13:19Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2000-10-25T03:13:19Z"}, "message": "secondary_reload_class: treat pseudos like memory\n\nFrom-SVN: r37042", "tree": {"sha": "bb3c05b765ff205922cf3336382e6b4adac1d51f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bb3c05b765ff205922cf3336382e6b4adac1d51f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/15c097383f085dbb6e024f33dcd216657aa0e1bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15c097383f085dbb6e024f33dcd216657aa0e1bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15c097383f085dbb6e024f33dcd216657aa0e1bd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15c097383f085dbb6e024f33dcd216657aa0e1bd/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a8ca77564609454aa4bad648471204640a55b300", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8ca77564609454aa4bad648471204640a55b300", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8ca77564609454aa4bad648471204640a55b300"}], "stats": {"total": 16, "additions": 13, "deletions": 3}, "files": [{"sha": "f557e825df879ea81d9c0e3ce2ffba6abb15db4f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15c097383f085dbb6e024f33dcd216657aa0e1bd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15c097383f085dbb6e024f33dcd216657aa0e1bd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=15c097383f085dbb6e024f33dcd216657aa0e1bd", "patch": "@@ -1,3 +1,8 @@\n+2000-10-24  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* config/mn10300/mn10300.c (secondary_reload_class): Treat pseudos\n+\tlike memory.\n+\t\n 2000-10-24  Jim Wilson  <wilson@cygnus.com>\n \n \t* expmed.c (store_bit_field): Move integer pun code down after\n@@ -30,7 +35,6 @@\n \t* expr.c (do_store_flag): Don't crash if either side of a\n \tcomparison is error_mark_node.\n \n->>>>>>> 1.8059\n 2000-10-24  Jakub Jelinek  <jakub@redhat.com>\n \n \t* sibcall.c (purge_mem_unchanging_flag): New function."}, {"sha": "5c7edfa2818597cf1aef986401085eb26e17ec0a", "filename": "gcc/config/mn10300/mn10300.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15c097383f085dbb6e024f33dcd216657aa0e1bd/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15c097383f085dbb6e024f33dcd216657aa0e1bd/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.c?ref=15c097383f085dbb6e024f33dcd216657aa0e1bd", "patch": "@@ -555,9 +555,15 @@ secondary_reload_class (class, mode, in)\n   /* Memory loads less than a full word wide can't have an\n      address or stack pointer destination.  They must use\n      a data register as an intermediate register.  */\n-  if (GET_CODE (in) == MEM\n+  if ((GET_CODE (in) == MEM\n+       || (GET_CODE (in) == REG\n+\t   && REGNO (in) >= FIRST_PSEUDO_REGISTER)\n+       || (GET_CODE (in) == SUBREG\n+\t   && GET_CODE (SUBREG_REG (in)) == REG\n+\t   && REGNO (SUBREG_REG (in)) >= FIRST_PSEUDO_REGISTER))\n       && (mode == QImode || mode == HImode)\n-      && (class == ADDRESS_REGS || class == SP_REGS))\n+      && (class == ADDRESS_REGS || class == SP_REGS\n+\t  || class == DATA_OR_ADDRESS_REGS))\n     {\n       if (TARGET_AM33)\n \treturn DATA_OR_EXTENDED_REGS;"}]}