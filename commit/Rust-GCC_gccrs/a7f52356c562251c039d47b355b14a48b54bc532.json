{"sha": "a7f52356c562251c039d47b355b14a48b54bc532", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTdmNTIzNTZjNTYyMjUxYzAzOWQ0N2IzNTViMTRhNDhiNTRiYzUzMg==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "joern.rennecke@superh.com", "date": "2002-02-21T21:29:28Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2002-02-21T21:29:28Z"}, "message": "sh.md (insv): Provide byte offsets for gen_rtx_SUBREG.\n\n\t* sh.md (insv): Provide byte offsets for gen_rtx_SUBREG.\n\tIf input is constant, do shifts at compile time.\n\nFrom-SVN: r49942", "tree": {"sha": "0f5820c544b68c206cb3d3be69c278b944e6c4df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0f5820c544b68c206cb3d3be69c278b944e6c4df"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a7f52356c562251c039d47b355b14a48b54bc532", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7f52356c562251c039d47b355b14a48b54bc532", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7f52356c562251c039d47b355b14a48b54bc532", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7f52356c562251c039d47b355b14a48b54bc532/comments", "author": null, "committer": null, "parents": [{"sha": "924fcc4ea50e25cb28bb97b0213c4e4bcb361291", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/924fcc4ea50e25cb28bb97b0213c4e4bcb361291", "html_url": "https://github.com/Rust-GCC/gccrs/commit/924fcc4ea50e25cb28bb97b0213c4e4bcb361291"}], "stats": {"total": 43, "additions": 32, "deletions": 11}, "files": [{"sha": "ebdb60acab3d641df4d3686e66ca157f9aa3d324", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7f52356c562251c039d47b355b14a48b54bc532/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7f52356c562251c039d47b355b14a48b54bc532/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a7f52356c562251c039d47b355b14a48b54bc532", "patch": "@@ -1,3 +1,8 @@\n+Thu Feb 21 21:17:21 2002  J\"orn Rennecke <joern.rennecke@superh.com>\n+\n+\t* sh.md (insv): Provide byte offsets for gen_rtx_SUBREG.\n+\tIf input is constant, do shifts at compile time.\n+\n 2002-02-21  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* doc/extend.texi: Fix some more overfull hboxes."}, {"sha": "072a33e66573ad45d9e967e3571bf21b1aa4e624", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 27, "deletions": 11, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7f52356c562251c039d47b355b14a48b54bc532/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7f52356c562251c039d47b355b14a48b54bc532/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=a7f52356c562251c039d47b355b14a48b54bc532", "patch": "@@ -8336,37 +8336,53 @@\n   \"TARGET_SH1 && ! TARGET_LITTLE_ENDIAN\"\n   \"\n {\n-  rtx addr_target, orig_address, shift_reg;\n-  HOST_WIDE_INT size;\n+  rtx addr_target, orig_address, shift_reg, qi_val;\n+  HOST_WIDE_INT bitsize, size, v;\n+  rtx x = operands[3];\n \n   /* ??? expmed doesn't care for non-register predicates.  */\n   if (! memory_operand (operands[0], VOIDmode)\n       || ! immediate_operand (operands[1], VOIDmode)\n       || ! immediate_operand (operands[2], VOIDmode)\n-      || ! general_operand (operands[3], VOIDmode))\n+      || ! general_operand (x, VOIDmode))\n     FAIL;\n   /* If this isn't a 16 / 24 / 32 bit field, or if\n      it doesn't start on a byte boundary, then fail.  */\n-  size = INTVAL (operands[1]);\n-  if (size < 16 || size > 32 || size % 8 != 0\n+  bitsize = INTVAL (operands[1]);\n+  if (bitsize < 16 || bitsize > 32 || bitsize % 8 != 0\n       || (INTVAL (operands[2]) % 8) != 0)\n     FAIL;\n \n-  size /= 8;\n+  size = bitsize / 8;\n   orig_address = XEXP (operands[0], 0);\n   shift_reg = gen_reg_rtx (SImode);\n-  emit_insn (gen_movsi (shift_reg, operands[3]));\n+  if (GET_CODE (x) == CONST_INT)\n+    {\n+      v = INTVAL (x);\n+      qi_val = force_reg (QImode, GEN_INT (trunc_int_for_mode (v, QImode)));\n+    }\n+  else\n+    {\n+      emit_insn (gen_movsi (shift_reg, operands[3]));\n+      qi_val = gen_rtx_SUBREG (QImode, shift_reg, 3);\n+    }\n   addr_target = copy_addr_to_reg (plus_constant (orig_address, size - 1));\n \n   operands[0] = replace_equiv_address (operands[0], addr_target);\n-  emit_insn (gen_movqi (operands[0], gen_rtx_SUBREG (QImode, shift_reg, 0)));\n+  emit_insn (gen_movqi (operands[0], qi_val));\n \n   while (size -= 1)\n     {\n-      emit_insn (gen_lshrsi3_k (shift_reg, shift_reg, GEN_INT (8)));\n+      if (GET_CODE (x) == CONST_INT)\n+\tqi_val\n+\t  = force_reg (QImode, GEN_INT (trunc_int_for_mode (v >>= 8, QImode)));\n+      else\n+\t{\n+\t  emit_insn (gen_lshrsi3_k (shift_reg, shift_reg, GEN_INT (8)));\n+\t  qi_val = gen_rtx_SUBREG (QImode, shift_reg, 3);\n+\t}\n       emit_insn (gen_addsi3 (addr_target, addr_target, GEN_INT (-1)));\n-      emit_insn (gen_movqi (operands[0],\n-\t\t\t    gen_rtx_SUBREG (QImode, shift_reg, 0)));\n+      emit_insn (gen_movqi (operands[0], qi_val));\n     }\n \n   DONE;"}]}