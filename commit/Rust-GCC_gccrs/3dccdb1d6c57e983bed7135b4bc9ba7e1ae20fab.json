{"sha": "3dccdb1d6c57e983bed7135b4bc9ba7e1ae20fab", "node_id": "C_kwDOANBUbNoAKDNkY2NkYjFkNmM1N2U5ODNiZWQ3MTM1YjRiYzliYTdlMWFlMjBmYWI", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-11-02T17:10:24Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-11-03T13:59:44Z"}, "message": "Desugar AST::TraitObjectTypeOneBound\n\nWe have two ways to represent TraitObjectType's:\n\n- AST::TraitObjectType\n- AST::TraitObjectTypeOneBound\n\nThis desugars this within HIR into a single HIR::TraitObjectType which\ncontains a list of bounds.\n\nAddresses #786", "tree": {"sha": "15f2996d46e49fb0982918629b98843f2f5af0a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/15f2996d46e49fb0982918629b98843f2f5af0a3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3dccdb1d6c57e983bed7135b4bc9ba7e1ae20fab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3dccdb1d6c57e983bed7135b4bc9ba7e1ae20fab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3dccdb1d6c57e983bed7135b4bc9ba7e1ae20fab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3dccdb1d6c57e983bed7135b4bc9ba7e1ae20fab/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f0df4812c37fc428b5508e019e9fb7f8a7b77b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f0df4812c37fc428b5508e019e9fb7f8a7b77b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f0df4812c37fc428b5508e019e9fb7f8a7b77b1"}], "stats": {"total": 195, "additions": 86, "deletions": 109}, "files": [{"sha": "2414b600c80aeede167056e462dbf9d9ea697cb7", "filename": "gcc/rust/ast/rust-type.h", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dccdb1d6c57e983bed7135b4bc9ba7e1ae20fab/gcc%2Frust%2Fast%2Frust-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dccdb1d6c57e983bed7135b4bc9ba7e1ae20fab/gcc%2Frust%2Fast%2Frust-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-type.h?ref=3dccdb1d6c57e983bed7135b4bc9ba7e1ae20fab", "patch": "@@ -162,10 +162,7 @@ class ImplTraitType : public Type\n class TraitObjectType : public Type\n {\n   bool has_dyn;\n-  // TypeParamBounds type_param_bounds;\n-  std::vector<std::unique_ptr<TypeParamBound> >\n-    type_param_bounds; // inlined form\n-\n+  std::vector<std::unique_ptr<TypeParamBound> > type_param_bounds;\n   Location locus;\n \n protected:\n@@ -179,7 +176,7 @@ class TraitObjectType : public Type\n public:\n   TraitObjectType (\n     std::vector<std::unique_ptr<TypeParamBound> > type_param_bounds,\n-    Location locus, bool is_dyn_dispatch = false)\n+    Location locus, bool is_dyn_dispatch)\n     : has_dyn (is_dyn_dispatch),\n       type_param_bounds (std::move (type_param_bounds)), locus (locus)\n   {}\n@@ -215,6 +212,8 @@ class TraitObjectType : public Type\n \n   void accept_vis (ASTVisitor &vis) override;\n \n+  bool is_dyn () const { return has_dyn; }\n+\n   // TODO: mutable getter seems kinda dodgy\n   std::vector<std::unique_ptr<TypeParamBound> > &get_type_param_bounds ()\n   {"}, {"sha": "87ac6ccb72d482e505817e662e8b46112a467a02", "filename": "gcc/rust/backend/rust-compile-base.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dccdb1d6c57e983bed7135b4bc9ba7e1ae20fab/gcc%2Frust%2Fbackend%2Frust-compile-base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dccdb1d6c57e983bed7135b4bc9ba7e1ae20fab/gcc%2Frust%2Fbackend%2Frust-compile-base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-base.h?ref=3dccdb1d6c57e983bed7135b4bc9ba7e1ae20fab", "patch": "@@ -177,7 +177,6 @@ class HIRCompileBase : public HIR::HIRVisitor\n   virtual void visit (HIR::TraitObjectType &type) {}\n   virtual void visit (HIR::ParenthesisedType &type) {}\n   virtual void visit (HIR::ImplTraitTypeOneBound &type) {}\n-  virtual void visit (HIR::TraitObjectTypeOneBound &type) {}\n   virtual void visit (HIR::TupleType &type) {}\n   virtual void visit (HIR::NeverType &type) {}\n   virtual void visit (HIR::RawPointerType &type) {}"}, {"sha": "858984c3710b5d7c9d6ef5695caa19e7e175342d", "filename": "gcc/rust/hir/rust-ast-lower-type.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dccdb1d6c57e983bed7135b4bc9ba7e1ae20fab/gcc%2Frust%2Fhir%2Frust-ast-lower-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dccdb1d6c57e983bed7135b4bc9ba7e1ae20fab/gcc%2Frust%2Fhir%2Frust-ast-lower-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-type.h?ref=3dccdb1d6c57e983bed7135b4bc9ba7e1ae20fab", "patch": "@@ -293,6 +293,8 @@ class ASTLoweringType : public ASTLoweringBase\n \n   void visit (AST::TraitObjectTypeOneBound &type) override;\n \n+  void visit (AST::TraitObjectType &type) override;\n+\n private:\n   ASTLoweringType () : ASTLoweringBase (), translated (nullptr) {}\n "}, {"sha": "d8d53eb0cc68c00825ad19f21b9ab57dcb7c7a9e", "filename": "gcc/rust/hir/rust-ast-lower.cc", "status": "modified", "additions": 30, "deletions": 8, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dccdb1d6c57e983bed7135b4bc9ba7e1ae20fab/gcc%2Frust%2Fhir%2Frust-ast-lower.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dccdb1d6c57e983bed7135b4bc9ba7e1ae20fab/gcc%2Frust%2Fhir%2Frust-ast-lower.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower.cc?ref=3dccdb1d6c57e983bed7135b4bc9ba7e1ae20fab", "patch": "@@ -517,21 +517,43 @@ ASTLowerQualifiedPathInType::visit (AST::QualifiedPathInType &path)\n void\n ASTLoweringType::visit (AST::TraitObjectTypeOneBound &type)\n {\n-  HIR::TypeParamBound *b\n+  std::vector<std::unique_ptr<HIR::TypeParamBound> > bounds;\n+  HIR::TypeParamBound *translated_bound\n     = ASTLoweringTypeBounds::translate (&type.get_trait_bound ());\n-  rust_assert (b->get_bound_type () == HIR::TypeParamBound::TRAITBOUND);\n-  HIR::TraitBound *bb = static_cast<HIR::TraitBound *> (b);\n-  HIR::TraitBound bound (*bb);\n-  delete bb;\n+  bounds.push_back (std::unique_ptr<HIR::TypeParamBound> (translated_bound));\n \n   auto crate_num = mappings->get_current_crate ();\n   Analysis::NodeMapping mapping (crate_num, type.get_node_id (),\n \t\t\t\t mappings->get_next_hir_id (crate_num),\n \t\t\t\t mappings->get_next_localdef_id (crate_num));\n \n-  translated\n-    = new HIR::TraitObjectTypeOneBound (mapping, std::move (bound),\n-\t\t\t\t\ttype.get_locus (), type.is_dyn ());\n+  translated = new HIR::TraitObjectType (mapping, std::move (bounds),\n+\t\t\t\t\t type.get_locus (), type.is_dyn ());\n+\n+  mappings->insert_hir_type (mapping.get_crate_num (), mapping.get_hirid (),\n+\t\t\t     translated);\n+}\n+\n+void\n+ASTLoweringType::visit (AST::TraitObjectType &type)\n+{\n+  std::vector<std::unique_ptr<HIR::TypeParamBound> > bounds;\n+\n+  for (auto &bound : type.get_type_param_bounds ())\n+    {\n+      HIR::TypeParamBound *translated_bound\n+\t= ASTLoweringTypeBounds::translate (bound.get ());\n+      bounds.push_back (\n+\tstd::unique_ptr<HIR::TypeParamBound> (translated_bound));\n+    }\n+\n+  auto crate_num = mappings->get_current_crate ();\n+  Analysis::NodeMapping mapping (crate_num, type.get_node_id (),\n+\t\t\t\t mappings->get_next_hir_id (crate_num),\n+\t\t\t\t mappings->get_next_localdef_id (crate_num));\n+\n+  translated = new HIR::TraitObjectType (mapping, std::move (bounds),\n+\t\t\t\t\t type.get_locus (), type.is_dyn ());\n \n   mappings->insert_hir_type (mapping.get_crate_num (), mapping.get_hirid (),\n \t\t\t     translated);"}, {"sha": "3e9d8b24beffaacdbe0a7bf7ff087a3f71e0574a", "filename": "gcc/rust/hir/tree/rust-hir-full-decls.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dccdb1d6c57e983bed7135b4bc9ba7e1ae20fab/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-decls.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dccdb1d6c57e983bed7135b4bc9ba7e1ae20fab/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-decls.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-decls.h?ref=3dccdb1d6c57e983bed7135b4bc9ba7e1ae20fab", "patch": "@@ -218,7 +218,6 @@ class ImplTraitType;\n class TraitObjectType;\n class ParenthesisedType;\n class ImplTraitTypeOneBound;\n-class TraitObjectTypeOneBound;\n class TupleType;\n class NeverType;\n class RawPointerType;"}, {"sha": "bacef82ab3e192abeb834c668d38f35d96d55000", "filename": "gcc/rust/hir/tree/rust-hir-full-test.cc", "status": "modified", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dccdb1d6c57e983bed7135b4bc9ba7e1ae20fab/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dccdb1d6c57e983bed7135b4bc9ba7e1ae20fab/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc?ref=3dccdb1d6c57e983bed7135b4bc9ba7e1ae20fab", "patch": "@@ -2892,25 +2892,6 @@ TypePathSegmentGeneric::as_string () const\n   return TypePathSegment::as_string () + \"<\" + generic_args.as_string () + \">\";\n }\n \n-std::string\n-TraitObjectTypeOneBound::as_string () const\n-{\n-  std::string str (\"TraitObjectTypeOneBound: \\n Has dyn dispatch: \");\n-\n-  if (has_dyn)\n-    {\n-      str += \"true\";\n-    }\n-  else\n-    {\n-      str += \"false\";\n-    }\n-\n-  str += \"\\n TraitBound: \" + trait_bound.as_string ();\n-\n-  return str;\n-}\n-\n std::string\n TypePathFunction::as_string () const\n {\n@@ -4461,12 +4442,6 @@ ImplTraitTypeOneBound::accept_vis (HIRVisitor &vis)\n   vis.visit (*this);\n }\n \n-void\n-TraitObjectTypeOneBound::accept_vis (HIRVisitor &vis)\n-{\n-  vis.visit (*this);\n-}\n-\n void\n TupleType::accept_vis (HIRVisitor &vis)\n {"}, {"sha": "070b76182bba3a51c4b20f8ef0d5085987f860b0", "filename": "gcc/rust/hir/tree/rust-hir-type.h", "status": "modified", "additions": 13, "deletions": 45, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dccdb1d6c57e983bed7135b4bc9ba7e1ae20fab/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dccdb1d6c57e983bed7135b4bc9ba7e1ae20fab/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-type.h?ref=3dccdb1d6c57e983bed7135b4bc9ba7e1ae20fab", "patch": "@@ -145,10 +145,7 @@ class ImplTraitType : public Type\n class TraitObjectType : public Type\n {\n   bool has_dyn;\n-  // TypeParamBounds type_param_bounds;\n-  std::vector<std::unique_ptr<TypeParamBound> >\n-    type_param_bounds; // inlined form\n-\n+  std::vector<std::unique_ptr<TypeParamBound> > type_param_bounds;\n   Location locus;\n \n protected:\n@@ -163,7 +160,7 @@ class TraitObjectType : public Type\n   TraitObjectType (\n     Analysis::NodeMapping mappings,\n     std::vector<std::unique_ptr<TypeParamBound> > type_param_bounds,\n-    Location locus, bool is_dyn_dispatch = false)\n+    Location locus, bool is_dyn_dispatch)\n     : Type (mappings), has_dyn (is_dyn_dispatch),\n       type_param_bounds (std::move (type_param_bounds)), locus (locus)\n   {}\n@@ -199,6 +196,17 @@ class TraitObjectType : public Type\n   Location get_locus () const { return locus; }\n \n   void accept_vis (HIRVisitor &vis) override;\n+\n+  std::vector<std::unique_ptr<TypeParamBound> > &get_type_param_bounds ()\n+  {\n+    return type_param_bounds;\n+  }\n+\n+  const std::vector<std::unique_ptr<TypeParamBound> > &\n+  get_type_param_bounds () const\n+  {\n+    return type_param_bounds;\n+  }\n };\n \n // A type with parentheses around it, used to avoid ambiguity.\n@@ -305,46 +313,6 @@ class ImplTraitTypeOneBound : public TypeNoBounds\n   void accept_vis (HIRVisitor &vis) override;\n };\n \n-/* A trait object with a single trait bound. The \"trait bound\" is really just\n- * the trait. Basically like using an interface as a type in an OOP language. */\n-class TraitObjectTypeOneBound : public TypeNoBounds\n-{\n-  bool has_dyn;\n-  TraitBound trait_bound;\n-  Location locus;\n-\n-protected:\n-  /* Use covariance to implement clone function as returning this object rather\n-   * than base */\n-  TraitObjectTypeOneBound *clone_type_impl () const override\n-  {\n-    return new TraitObjectTypeOneBound (mappings, trait_bound, locus, has_dyn);\n-  }\n-\n-  /* Use covariance to implement clone function as returning this object rather\n-   * than base */\n-  TraitObjectTypeOneBound *clone_type_no_bounds_impl () const override\n-  {\n-    return new TraitObjectTypeOneBound (mappings, trait_bound, locus, has_dyn);\n-  }\n-\n-public:\n-  TraitObjectTypeOneBound (Analysis::NodeMapping mappings,\n-\t\t\t   TraitBound trait_bound, Location locus,\n-\t\t\t   bool is_dyn_dispatch)\n-    : TypeNoBounds (mappings), has_dyn (is_dyn_dispatch),\n-      trait_bound (std::move (trait_bound)), locus (locus)\n-  {}\n-\n-  std::string as_string () const override;\n-\n-  Location get_locus () const { return locus; }\n-\n-  void accept_vis (HIRVisitor &vis) override;\n-\n-  TraitBound &get_trait_bound () { return trait_bound; }\n-};\n-\n class TypePath; // definition moved to \"rust-path.h\"\n \n /* A type consisting of the \"product\" of others (the tuple's elements) in a"}, {"sha": "04874468cf1dd608e5aacbd06fe3436bf3964aa1", "filename": "gcc/rust/hir/tree/rust-hir-visitor.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dccdb1d6c57e983bed7135b4bc9ba7e1ae20fab/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-visitor.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dccdb1d6c57e983bed7135b4bc9ba7e1ae20fab/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-visitor.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-visitor.h?ref=3dccdb1d6c57e983bed7135b4bc9ba7e1ae20fab", "patch": "@@ -149,7 +149,6 @@ class HIRVisitor\n   virtual void visit (TraitObjectType &type) = 0;\n   virtual void visit (ParenthesisedType &type) = 0;\n   virtual void visit (ImplTraitTypeOneBound &type) = 0;\n-  virtual void visit (TraitObjectTypeOneBound &type) = 0;\n   virtual void visit (TupleType &type) = 0;\n   virtual void visit (NeverType &type) = 0;\n   virtual void visit (RawPointerType &type) = 0;"}, {"sha": "b67705bebab119f75c4f9f862f06c4565c766f7d", "filename": "gcc/rust/lint/rust-lint-marklive-base.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dccdb1d6c57e983bed7135b4bc9ba7e1ae20fab/gcc%2Frust%2Flint%2Frust-lint-marklive-base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dccdb1d6c57e983bed7135b4bc9ba7e1ae20fab/gcc%2Frust%2Flint%2Frust-lint-marklive-base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Flint%2Frust-lint-marklive-base.h?ref=3dccdb1d6c57e983bed7135b4bc9ba7e1ae20fab", "patch": "@@ -172,7 +172,6 @@ class MarkLiveBase : public HIR::HIRVisitor\n   virtual void visit (HIR::TraitObjectType &) override {}\n   virtual void visit (HIR::ParenthesisedType &) override {}\n   virtual void visit (HIR::ImplTraitTypeOneBound &) override {}\n-  virtual void visit (HIR::TraitObjectTypeOneBound &) override {}\n   virtual void visit (HIR::TupleType &) override {}\n   virtual void visit (HIR::NeverType &) override {}\n   virtual void visit (HIR::RawPointerType &) override {}"}, {"sha": "316933e93451d5da847891b76f30d45b145ea9a9", "filename": "gcc/rust/parse/rust-parse-impl.h", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dccdb1d6c57e983bed7135b4bc9ba7e1ae20fab/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dccdb1d6c57e983bed7135b4bc9ba7e1ae20fab/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fparse%2Frust-parse-impl.h?ref=3dccdb1d6c57e983bed7135b4bc9ba7e1ae20fab", "patch": "@@ -9061,7 +9061,8 @@ Parser<ManagedTokenSource>::parse_type ()\n \t  = parse_type_param_bounds ();\n \n \treturn std::unique_ptr<AST::TraitObjectType> (\n-\t  new AST::TraitObjectType (std::move (bounds), t->get_locus ()));\n+\t  new AST::TraitObjectType (std::move (bounds), t->get_locus (),\n+\t\t\t\t    false));\n       }\n     case IDENTIFIER:\n     case SUPER:\n@@ -9148,7 +9149,7 @@ Parser<ManagedTokenSource>::parse_type ()\n \t\t}\n \n \t      return std::unique_ptr<AST::TraitObjectType> (\n-\t\tnew AST::TraitObjectType (std::move (bounds), locus));\n+\t\tnew AST::TraitObjectType (std::move (bounds), locus, false));\n \t    }\n \t  default:\n \t    // assume that this is a type path and not an error\n@@ -9418,7 +9419,8 @@ Parser<ManagedTokenSource>::parse_paren_prefixed_type ()\n \t    }\n \n \t  return std::unique_ptr<AST::TraitObjectType> (\n-\t    new AST::TraitObjectType (std::move (bounds), left_delim_locus));\n+\t    new AST::TraitObjectType (std::move (bounds), left_delim_locus,\n+\t\t\t\t      false));\n \t}\n       else\n \t{\n@@ -9528,7 +9530,7 @@ Parser<ManagedTokenSource>::parse_for_prefixed_type ()\n \t  }\n \n \treturn std::unique_ptr<AST::TraitObjectType> (\n-\t  new AST::TraitObjectType (std::move (bounds), for_locus));\n+\t  new AST::TraitObjectType (std::move (bounds), for_locus, false));\n       }\n     default:\n       // error"}, {"sha": "838d17331ea642e0eb13aad194757dbf5edbec9b", "filename": "gcc/rust/resolve/rust-ast-resolve-type.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dccdb1d6c57e983bed7135b4bc9ba7e1ae20fab/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dccdb1d6c57e983bed7135b4bc9ba7e1ae20fab/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h?ref=3dccdb1d6c57e983bed7135b4bc9ba7e1ae20fab", "patch": "@@ -371,6 +371,8 @@ class ResolveType : public ResolverBase\n \n   void visit (AST::TraitObjectTypeOneBound &type) override;\n \n+  void visit (AST::TraitObjectType &type) override;\n+\n private:\n   ResolveType (NodeId parent, bool canonicalize_type_with_generics)\n     : ResolverBase (parent),"}, {"sha": "af04aeb215164622295ae13c50a13d372783ac7d", "filename": "gcc/rust/resolve/rust-ast-resolve.cc", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dccdb1d6c57e983bed7135b4bc9ba7e1ae20fab/gcc%2Frust%2Fresolve%2Frust-ast-resolve.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dccdb1d6c57e983bed7135b4bc9ba7e1ae20fab/gcc%2Frust%2Fresolve%2Frust-ast-resolve.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve.cc?ref=3dccdb1d6c57e983bed7135b4bc9ba7e1ae20fab", "patch": "@@ -726,6 +726,17 @@ ResolveType::visit (AST::TraitObjectTypeOneBound &type)\n   ok = bound_resolved_id != UNKNOWN_NODEID;\n }\n \n+void\n+ResolveType::visit (AST::TraitObjectType &type)\n+{\n+  ok = true;\n+  for (auto &bound : type.get_type_param_bounds ())\n+    {\n+      /* NodeId bound_resolved_id = */\n+      ResolveTypeBound::go (bound.get (), type.get_node_id ());\n+    }\n+}\n+\n // rust-ast-resolve-item.h\n \n void"}, {"sha": "9cbf1ab2df769cb380274b81b339ae6ad07b81e2", "filename": "gcc/rust/typecheck/rust-hir-const-fold-base.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dccdb1d6c57e983bed7135b4bc9ba7e1ae20fab/gcc%2Frust%2Ftypecheck%2Frust-hir-const-fold-base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dccdb1d6c57e983bed7135b4bc9ba7e1ae20fab/gcc%2Frust%2Ftypecheck%2Frust-hir-const-fold-base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-const-fold-base.h?ref=3dccdb1d6c57e983bed7135b4bc9ba7e1ae20fab", "patch": "@@ -175,7 +175,6 @@ class ConstFoldBase : public HIR::HIRVisitor\n   virtual void visit (HIR::TraitObjectType &) override {}\n   virtual void visit (HIR::ParenthesisedType &) override {}\n   virtual void visit (HIR::ImplTraitTypeOneBound &) override {}\n-  virtual void visit (HIR::TraitObjectTypeOneBound &) override {}\n   virtual void visit (HIR::TupleType &) override {}\n   virtual void visit (HIR::NeverType &) override {}\n   virtual void visit (HIR::RawPointerType &) override {}"}, {"sha": "eb96fd18e023119ecbc052eb154036e6e68f193c", "filename": "gcc/rust/typecheck/rust-hir-type-check-base.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dccdb1d6c57e983bed7135b4bc9ba7e1ae20fab/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dccdb1d6c57e983bed7135b4bc9ba7e1ae20fab/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-base.h?ref=3dccdb1d6c57e983bed7135b4bc9ba7e1ae20fab", "patch": "@@ -177,7 +177,6 @@ class TypeCheckBase : public HIR::HIRVisitor\n   virtual void visit (HIR::TraitObjectType &) override {}\n   virtual void visit (HIR::ParenthesisedType &) override {}\n   virtual void visit (HIR::ImplTraitTypeOneBound &) override {}\n-  virtual void visit (HIR::TraitObjectTypeOneBound &) override {}\n   virtual void visit (HIR::TupleType &) override {}\n   virtual void visit (HIR::NeverType &) override {}\n   virtual void visit (HIR::RawPointerType &) override {}"}, {"sha": "ee2ffe1cfc504f5d91e13e269fb28535f6b39612", "filename": "gcc/rust/typecheck/rust-hir-type-check-type.cc", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dccdb1d6c57e983bed7135b4bc9ba7e1ae20fab/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dccdb1d6c57e983bed7135b4bc9ba7e1ae20fab/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.cc?ref=3dccdb1d6c57e983bed7135b4bc9ba7e1ae20fab", "patch": "@@ -525,22 +525,27 @@ TypeCheckType::resolve_segments (\n }\n \n void\n-TypeCheckType::visit (HIR::TraitObjectTypeOneBound &type)\n+TypeCheckType::visit (HIR::TraitObjectType &type)\n {\n   std::vector<TyTy::TypeBoundPredicate> specified_bounds;\n-\n-  HIR::TraitBound &trait_bound = type.get_trait_bound ();\n-  TraitReference *trait = resolve_trait_path (trait_bound.get_path ());\n-  TyTy::TypeBoundPredicate predicate (trait->get_mappings ().get_defid (),\n-\t\t\t\t      trait_bound.get_locus ());\n-\n-  if (predicate.is_object_safe (true, type.get_locus ()))\n+  for (auto &bound : type.get_type_param_bounds ())\n     {\n-      specified_bounds.push_back (std::move (predicate));\n-      translated\n-\t= new TyTy::DynamicObjectType (type.get_mappings ().get_hirid (),\n-\t\t\t\t       std::move (specified_bounds));\n+      if (bound->get_bound_type ()\n+\t  != HIR::TypeParamBound::BoundType::TRAITBOUND)\n+\tcontinue;\n+\n+      HIR::TypeParamBound &b = *bound.get ();\n+      HIR::TraitBound &trait_bound = static_cast<HIR::TraitBound &> (b);\n+      TraitReference *trait = resolve_trait_path (trait_bound.get_path ());\n+      TyTy::TypeBoundPredicate predicate (trait->get_mappings ().get_defid (),\n+\t\t\t\t\t  trait_bound.get_locus ());\n+\n+      if (predicate.is_object_safe (true, type.get_locus ()))\n+\tspecified_bounds.push_back (std::move (predicate));\n     }\n+\n+  translated = new TyTy::DynamicObjectType (type.get_mappings ().get_hirid (),\n+\t\t\t\t\t    std::move (specified_bounds));\n }\n \n } // namespace Resolver"}, {"sha": "1f7f71d853816e3060d8a2c3e3ea36af4517124e", "filename": "gcc/rust/typecheck/rust-hir-type-check-type.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dccdb1d6c57e983bed7135b4bc9ba7e1ae20fab/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dccdb1d6c57e983bed7135b4bc9ba7e1ae20fab/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.h?ref=3dccdb1d6c57e983bed7135b4bc9ba7e1ae20fab", "patch": "@@ -147,7 +147,7 @@ class TypeCheckType : public TypeCheckBase\n \t\t\t\t      TyTy::InferType::InferTypeKind::GENERAL);\n   }\n \n-  void visit (HIR::TraitObjectTypeOneBound &type) override;\n+  void visit (HIR::TraitObjectType &type) override;\n \n private:\n   TypeCheckType (std::vector<TyTy::SubstitutionParamMapping> *subst_mappings)"}, {"sha": "4595ca334b941ae25555cfe2b0840c02651f7022", "filename": "gcc/rust/typecheck/rust-hir-type-check-util.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dccdb1d6c57e983bed7135b4bc9ba7e1ae20fab/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-util.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dccdb1d6c57e983bed7135b4bc9ba7e1ae20fab/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-util.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-util.h?ref=3dccdb1d6c57e983bed7135b4bc9ba7e1ae20fab", "patch": "@@ -170,7 +170,6 @@ class SimpleHirVisitor : public HIR::HIRVisitor\n   virtual void visit (HIR::TraitObjectType &) override {}\n   virtual void visit (HIR::ParenthesisedType &) override {}\n   virtual void visit (HIR::ImplTraitTypeOneBound &) override {}\n-  virtual void visit (HIR::TraitObjectTypeOneBound &) override {}\n   virtual void visit (HIR::TupleType &) override {}\n   virtual void visit (HIR::NeverType &) override {}\n   virtual void visit (HIR::RawPointerType &) override {}"}, {"sha": "f8f551ba86d7dd79e1771da2ed67150db124aa20", "filename": "gcc/testsuite/rust/compile/traits10.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dccdb1d6c57e983bed7135b4bc9ba7e1ae20fab/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftraits10.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dccdb1d6c57e983bed7135b4bc9ba7e1ae20fab/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftraits10.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftraits10.rs?ref=3dccdb1d6c57e983bed7135b4bc9ba7e1ae20fab", "patch": "@@ -12,5 +12,4 @@ pub fn main() {\n \n     let b: &dyn Bar = &a;\n     // { dg-error \"trait bound is not object safe\" \"\" { target *-*-* } .-1 }\n-    // { dg-error \"expected\" \"\" { target *-*-* } .-2 }\n }"}, {"sha": "d06e47d7e16f03815ff66ac35aa913581d71c54e", "filename": "gcc/testsuite/rust/compile/traits11.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dccdb1d6c57e983bed7135b4bc9ba7e1ae20fab/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftraits11.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dccdb1d6c57e983bed7135b4bc9ba7e1ae20fab/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftraits11.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftraits11.rs?ref=3dccdb1d6c57e983bed7135b4bc9ba7e1ae20fab", "patch": "@@ -16,5 +16,4 @@ pub fn main() {\n \n     let b: &dyn B = &a;\n     // { dg-error \"trait bound is not object safe\" \"\" { target *-*-* } .-1 }\n-    // { dg-error \"expected\" \"\" { target *-*-* } .-2 }\n }"}]}