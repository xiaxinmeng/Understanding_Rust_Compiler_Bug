{"sha": "7a97e2fcf7ca91b77686373ebfb2263a28885570", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2E5N2UyZmNmN2NhOTFiNzc2ODYzNzNlYmZiMjI2M2EyODg4NTU3MA==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-11-22T00:16:24Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-11-22T00:16:24Z"}, "message": "Daily bump.", "tree": {"sha": "41a261d8d4a75f3a3b88b02dc2089f855b674dbb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/41a261d8d4a75f3a3b88b02dc2089f855b674dbb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7a97e2fcf7ca91b77686373ebfb2263a28885570", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a97e2fcf7ca91b77686373ebfb2263a28885570", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a97e2fcf7ca91b77686373ebfb2263a28885570", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a97e2fcf7ca91b77686373ebfb2263a28885570/comments", "author": null, "committer": null, "parents": [{"sha": "c51e31a06f2c740c55852a683aa7ffdc20417362", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c51e31a06f2c740c55852a683aa7ffdc20417362", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c51e31a06f2c740c55852a683aa7ffdc20417362"}], "stats": {"total": 224, "additions": 223, "deletions": 1}, "files": [{"sha": "c41ee4b8abae3605771cbb2699a8e3df420f21a2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a97e2fcf7ca91b77686373ebfb2263a28885570/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a97e2fcf7ca91b77686373ebfb2263a28885570/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7a97e2fcf7ca91b77686373ebfb2263a28885570", "patch": "@@ -1,3 +1,105 @@\n+2020-11-21  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/94695\n+\t* doc/invoke.texi: Update the -Wrange-loop-construct description.\n+\n+2020-11-21  Jan Hubicka  <jh@suse.cz>\n+\n+\t* tree-ssa-alias.c (ao_compare::compare_ao_refs,\n+\tao_compare::hash_ao_ref): Use OEP_MATCH_SIDE_EFFECTS.\n+\n+2020-11-21  Jan Hubicka  <jh@suse.cz>\n+\n+\t* ipa-icf.c (sem_function::equals_wpa): Do not compare ODR type with\n+\t-fno-devirtualize.\n+\t(sem_item_optimizer::update_hash_by_addr_refs): Hash anonymous ODR\n+\ttypes by TYPE_UID of their main variant.\n+\n+2020-11-21  Aaron Sawdey  <acsawdey@linux.ibm.com>\n+\n+\t* config/rs6000/rs6000.c (rs6000_option_override_internal):\n+\tEnable vector pair memcpy/memmove expansion.\n+\n+2020-11-21  Aaron Sawdey  <acsawdey@linux.ibm.com>\n+\n+\t* config/rs6000/mma.md (unspec): Add assemble/extract UNSPECs.\n+\t(movoi): Change to movoo.\n+\t(*movpoi): Change to *movoo.\n+\t(movxi): Change to movxo.\n+\t(*movpxi): Change to *movxo.\n+\t(mma_assemble_pair): Change to OO mode.\n+\t(*mma_assemble_pair): New define_insn_and_split.\n+\t(mma_disassemble_pair): New define_expand.\n+\t(*mma_disassemble_pair): New define_insn_and_split.\n+\t(mma_assemble_acc): Change to XO mode.\n+\t(*mma_assemble_acc): Change to XO mode.\n+\t(mma_disassemble_acc): New define_expand.\n+\t(*mma_disassemble_acc): New define_insn_and_split.\n+\t(mma_<acc>): Change to XO mode.\n+\t(mma_<vv>): Change to XO mode.\n+\t(mma_<avv>): Change to XO mode.\n+\t(mma_<pv>): Change to OO mode.\n+\t(mma_<apv>): Change to XO/OO mode.\n+\t(mma_<vvi4i4i8>): Change to XO mode.\n+\t(mma_<avvi4i4i8>): Change to XO mode.\n+\t(mma_<vvi4i4i2>): Change to XO mode.\n+\t(mma_<avvi4i4i2>): Change to XO mode.\n+\t(mma_<vvi4i4>): Change to XO mode.\n+\t(mma_<avvi4i4>): Change to XO mode.\n+\t(mma_<pvi4i2>): Change to XO/OO mode.\n+\t(mma_<apvi4i2>): Change to XO/OO mode.\n+\t(mma_<vvi4i4i4>): Change to XO mode.\n+\t(mma_<avvi4i4i4>): Change to XO mode.\n+\t* config/rs6000/predicates.md (input_operand): Allow opaque.\n+\t(mma_disassemble_output_operand): New predicate.\n+\t* config/rs6000/rs6000-builtin.def:\n+\tChanges to disassemble builtins.\n+\t* config/rs6000/rs6000-call.c (rs6000_return_in_memory):\n+\tDisallow __vector_pair/__vector_quad as return types.\n+\t(rs6000_promote_function_mode): Remove function return type\n+\tcheck because we can't test it here any more.\n+\t(rs6000_function_arg): Do not allow __vector_pair/__vector_quad\n+\tas as function arguments.\n+\t(rs6000_gimple_fold_mma_builtin):\n+\tHandle mma_disassemble_* builtins.\n+\t(rs6000_init_builtins): Create types for XO/OO modes.\n+\t* config/rs6000/rs6000-modes.def: DElete OI, XI,\n+\tPOI, and PXI modes, and create XO and OO modes.\n+\t* config/rs6000/rs6000-string.c (expand_block_move):\n+\tUpdate to OO mode.\n+\t* config/rs6000/rs6000.c (rs6000_hard_regno_mode_ok_uncached):\n+\tUpdate for XO/OO modes.\n+\t(rs6000_rtx_costs): Make UNSPEC_MMA_XXSETACCZ cost 0.\n+\t(rs6000_modes_tieable_p): Update for XO/OO modes.\n+\t(rs6000_debug_reg_global): Update for XO/OO modes.\n+\t(rs6000_setup_reg_addr_masks): Update for XO/OO modes.\n+\t(rs6000_init_hard_regno_mode_ok): Update for XO/OO modes.\n+\t(reg_offset_addressing_ok_p): Update for XO/OO modes.\n+\t(rs6000_emit_move): Update for XO/OO modes.\n+\t(rs6000_preferred_reload_class): Update for XO/OO modes.\n+\t(rs6000_split_multireg_move): Update for XO/OO modes.\n+\t(rs6000_mangle_type): Update for opaque types.\n+\t(rs6000_invalid_conversion): Update for XO/OO modes.\n+\t* config/rs6000/rs6000.h (VECTOR_ALIGNMENT_P):\n+\tUpdate for XO/OO modes.\n+\t* config/rs6000/rs6000.md (RELOAD): Update for XO/OO modes.\n+\n+2020-11-21  Aaron Sawdey  <acsawdey@linux.ibm.com>\n+\n+\t* typeclass.h: Add opaque_type_class.\n+\t* builtins.c (type_to_class): Identify opaque type class.\n+\t* dwarf2out.c (is_base_type): Handle opaque types.\n+\t(gen_type_die_with_usage): Handle opaque types.\n+\t* expr.c (count_type_elements): Opaque types should\n+\tnever have initializers.\n+\t* ipa-devirt.c (odr_types_equivalent_p): No type-specific handling\n+\tfor opaque types is needed as it eventually checks the underlying\n+\tmode which is what is important.\n+\t* tree-streamer.c (record_common_node): Handle opaque types.\n+\t* tree.c (type_contains_placeholder_1): Handle opaque types.\n+\t(type_cache_hasher::equal): No additional comparison needed for\n+\topaque types.\n+\n 2020-11-20  Michael Meissner  <meissner@linux.ibm.com>\n \n \t* config/rs6000/rs6000-call.c (rs6000_expand_builtin): Add missing"}, {"sha": "091f0200bdd193badbaced407d66d43617f6b038", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a97e2fcf7ca91b77686373ebfb2263a28885570/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a97e2fcf7ca91b77686373ebfb2263a28885570/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=7a97e2fcf7ca91b77686373ebfb2263a28885570", "patch": "@@ -1 +1 @@\n-20201121\n+20201122"}, {"sha": "78b0f5de539aceb6d66240048772aada6420bb79", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a97e2fcf7ca91b77686373ebfb2263a28885570/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a97e2fcf7ca91b77686373ebfb2263a28885570/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=7a97e2fcf7ca91b77686373ebfb2263a28885570", "patch": "@@ -1,3 +1,10 @@\n+2020-11-21  Aaron Sawdey  <acsawdey@linux.ibm.com>\n+\n+\t* c-pretty-print.c (c_pretty_printer::simple_type_specifier):\n+\tTreat opaque types like other types.\n+\t(c_pretty_printer::direct_abstract_declarator): Opaque types are\n+\tsupported types.\n+\n 2020-11-20  Martin Sebor  <msebor@redhat.com>\n \n \t* c-warn.c (warn_parm_array_mismatch): Bail on invalid redeclarations"}, {"sha": "7a3c05f6838095df08284fbd7de2c8c618bffa03", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a97e2fcf7ca91b77686373ebfb2263a28885570/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a97e2fcf7ca91b77686373ebfb2263a28885570/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=7a97e2fcf7ca91b77686373ebfb2263a28885570", "patch": "@@ -1,3 +1,7 @@\n+2020-11-21  Aaron Sawdey  <acsawdey@linux.ibm.com>\n+\n+\t* c-aux-info.c (gen_type): Support opaque types.\n+\n 2020-11-20  Martin Sebor  <msebor@redhat.com>\n \n \tPR middle-end/97879"}, {"sha": "3a93b671cab047849564bb68a7c7e6b4b90a1354", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a97e2fcf7ca91b77686373ebfb2263a28885570/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a97e2fcf7ca91b77686373ebfb2263a28885570/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=7a97e2fcf7ca91b77686373ebfb2263a28885570", "patch": "@@ -1,3 +1,45 @@\n+2020-11-21  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/94695\n+\t* parser.c (warn_for_range_copy): Warn when the loop variable is\n+\tinitialized with a value of a different type resulting in a copy.\n+\n+2020-11-21  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/97846\n+\t* constexpr.c (potential_constant_expression_1): Reject\n+\tLABEL_EXPRs that use non-artifical LABEL_DECLs.\n+\n+2020-11-21  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/97881\n+\t* parser.c (warn_about_ambiguous_parse): Only assume \"int\" if we\n+\tactually saw any type-specifiers.\n+\n+2020-11-21  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/97839\n+\t* parser.c (cp_parser_lambda_declarator_opt): Don't require ().\n+\n+2020-11-21  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/97427\n+\t* constexpr.c (cxx_set_object_constness): New function.\n+\t(cxx_eval_call_expression): Set new_obj for destructors too.\n+\tCall cxx_set_object_constness to set/unset TREE_READONLY of\n+\tthe object under construction/destruction.\n+\n+2020-11-21  Aaron Sawdey  <acsawdey@linux.ibm.com>\n+\n+\t* error.c (dump_type): Handle opaque types.\n+\t(dump_type_prefix): Handle opaque types.\n+\t(dump_type_suffix): Handle opaque types.\n+\t(dump_expr): Handle opaque types.\n+\t* pt.c (tsubst): Allow opaque types in templates.\n+\t(unify): Allow opaque types in templates.\n+\t* typeck.c (structural_comptypes): Handle comparison\n+\tof opaque types.\n+\n 2020-11-20  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR other/97911"}, {"sha": "b4d804df73d17c9371a31ea39c6fe41b1291c792", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a97e2fcf7ca91b77686373ebfb2263a28885570/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a97e2fcf7ca91b77686373ebfb2263a28885570/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7a97e2fcf7ca91b77686373ebfb2263a28885570", "patch": "@@ -1,3 +1,45 @@\n+2020-11-21  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/94695\n+\t* g++.dg/warn/Wrange-loop-construct2.C: New test.\n+\n+2020-11-21  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/97846\n+\t* g++.dg/cpp1y/constexpr-label.C: New test.\n+\n+2020-11-21  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/97881\n+\t* g++.dg/warn/Wvexing-parse9.C: New test.\n+\n+2020-11-21  David Edelsohn  <dje.gcc@gmail.com>\n+\n+\t* g++.dg/debug/localclass2.C: Require LTO.\n+\n+2020-11-21  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/97839\n+\t* g++.dg/cpp2a/lambda-generic8.C: New test.\n+\n+2020-11-21  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/97427\n+\t* g++.dg/cpp2a/constexpr-dtor10.C: New test.\n+\n+2020-11-21  Jan Hubicka  <jh@suse.cz>\n+\n+\t* gcc.dg/vect/vect-35-big-array.c: Excpect 2 loops to be vectorized.\n+\t* gcc.dg/vect/vect-35.c: Excpect 2 loops to be vectorized.\n+\n+2020-11-21  Aaron Sawdey  <acsawdey@linux.ibm.com>\n+\n+\t* gcc.target/powerpc/mma-double-test.c (main): Call abort for failure.\n+\t* gcc.target/powerpc/mma-single-test.c (main): Call abort for failure.\n+\t* gcc.target/powerpc/pr96506.c: Rename to pr96506-1.c.\n+\t* gcc.target/powerpc/pr96506-2.c: New test.\n+\t* gcc.target/powerpc/pr96506-1.c: New file.\n+\n 2020-11-20  Michael Meissner  <meissner@linux.ibm.com>\n \n \t* gcc.dg/nextafter-2.c: Include math.h."}, {"sha": "0e5841cdcf29d7767691b3c839164cc5233d6267", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a97e2fcf7ca91b77686373ebfb2263a28885570/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a97e2fcf7ca91b77686373ebfb2263a28885570/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=7a97e2fcf7ca91b77686373ebfb2263a28885570", "patch": "@@ -1,3 +1,8 @@\n+2020-11-21  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* intrinsics/execute_command_line.c (environ): Use\n+\t_NSGetEnviron to get the environment pointer on Darwin.\n+\n 2020-10-30  Harald Anlauf  <anlauf@gmx.de>\n \n \t* intrinsics/random.c (SZ_IN_INT_4): Define size of state in int32_t."}, {"sha": "19e7661d8f08b4ed32cac069cc99d8b9f7b9cf1c", "filename": "libsanitizer/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a97e2fcf7ca91b77686373ebfb2263a28885570/libsanitizer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a97e2fcf7ca91b77686373ebfb2263a28885570/libsanitizer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2FChangeLog?ref=7a97e2fcf7ca91b77686373ebfb2263a28885570", "patch": "@@ -1,3 +1,7 @@\n+2020-11-21  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* configure.tgt: Allow x86_64 Darwin2x.\n+\n 2020-11-13  Martin Liska  <mliska@suse.cz>\n \n \t* LOCAL_PATCHES: Update to the latest commit."}, {"sha": "dde10027b0f00d9d04c0ff2d1c3629e94383b305", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a97e2fcf7ca91b77686373ebfb2263a28885570/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a97e2fcf7ca91b77686373ebfb2263a28885570/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=7a97e2fcf7ca91b77686373ebfb2263a28885570", "patch": "@@ -1,3 +1,19 @@\n+2020-11-21  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/atomic_base.h (atomic_flag::wait): Use correct\n+\ttype for __atomic_wait call.\n+\t* include/bits/atomic_timed_wait.h (__atomic_wait_until): Check\n+\t_GLIBCXX_HAVE_LINUX_FUTEX.\n+\t* include/bits/atomic_wait.h (__atomic_notify): Likewise.\n+\t* include/bits/semaphore_base.h (_GLIBCXX_HAVE_POSIX_SEMAPHORE):\n+\tOnly define if SEM_VALUE_MAX or _POSIX_SEM_VALUE_MAX is defined.\n+\t* testsuite/29_atomics/atomic/wait_notify/bool.cc: Disable on\n+\tnon-linux targes.\n+\t* testsuite/29_atomics/atomic/wait_notify/generic.cc: Likewise.\n+\t* testsuite/29_atomics/atomic/wait_notify/pointers.cc: Likewise.\n+\t* testsuite/29_atomics/atomic_flag/wait_notify/1.cc: Likewise.\n+\t* testsuite/29_atomics/atomic_float/wait_notify.cc: Likewise.\n+\n 2020-11-20  Thomas Rodgers  <trodgers@redhat.com>\n \n \t* include/Makefile.am (bits_headers): Add new header."}]}