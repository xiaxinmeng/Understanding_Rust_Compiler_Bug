{"sha": "e4d355154880463416ba21be979aa77654d727a0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTRkMzU1MTU0ODgwNDYzNDE2YmEyMWJlOTc5YWE3NzY1NGQ3MjdhMA==", "commit": {"author": {"name": "Simon Baldwin", "email": "simonb@google.com", "date": "2008-05-02T20:01:31Z"}, "committer": {"name": "Simon Baldwin", "email": "simonb@gcc.gnu.org", "date": "2008-05-02T20:01:31Z"}, "message": "Rolled back the following changes made in revision 134865:\n\n        * c-common.h (warn_array_subscript_range): New function.\n        * c-common.c (warn_array_subscript_range): Ditto.\n        * tree-vrp.c (check_array_ref): Corrected code to agree with\n        comment, ignoring only arrays of size 0 or size 1.\n        * c-typeck.c (build_array_ref): Call warn_array_subscript_range.\n\n        * testsuite/gcc.dg/Warray-bounds.c: Updated for frontend warnings,\n        additional tests for arrays of size 0 and size 1.\n        * testsuite/g++.dg/warn/Warray-bounds.c: Ditto.\n        * testsuite/gcc.dg/Warray-bounds-noopt.c: New testcase.\n        * testsuite/g++.dg/warn/Warray-bounds-noopt.c: Ditto.\n\n        * typeck.c (build_array_ref): Call warn_array_subscript_range.\n\nFrom-SVN: r134889", "tree": {"sha": "7a9abc71059af57af9a976cfa19589fee9e462be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7a9abc71059af57af9a976cfa19589fee9e462be"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e4d355154880463416ba21be979aa77654d727a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4d355154880463416ba21be979aa77654d727a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4d355154880463416ba21be979aa77654d727a0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4d355154880463416ba21be979aa77654d727a0/comments", "author": null, "committer": null, "parents": [{"sha": "bb1418c1b43a95548515bffb8d4a54a173f2a49d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb1418c1b43a95548515bffb8d4a54a173f2a49d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb1418c1b43a95548515bffb8d4a54a173f2a49d"}], "stats": {"total": 447, "additions": 42, "deletions": 405}, "files": [{"sha": "f33e88cfdb501ff192c934a1e36781c5ed25914d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4d355154880463416ba21be979aa77654d727a0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4d355154880463416ba21be979aa77654d727a0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e4d355154880463416ba21be979aa77654d727a0", "patch": "@@ -1,3 +1,11 @@\n+2008-05-02  Simon Baldwin <simonb@google.com>\n+\n+\tPR bootstrap/36108\n+\t* c-common.h (warn_array_subscript_range): Removed.\n+\t* c-common.c (warn_array_subscript_range): Ditto.\n+\t* tree-vrp.c (check_array_ref): Revert to ignoring arrays with size 2.\n+\t* c-typeck.c (build_array_ref): Remove warn_array_subscript_range.\n+\n 2008-05-02  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* config/i386/i386.c (ix86_special_builtin_type): New."}, {"sha": "5858523968082ed4d1ec00ddf224ba96009b08b0", "filename": "gcc/c-common.c", "status": "modified", "additions": 0, "deletions": 54, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4d355154880463416ba21be979aa77654d727a0/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4d355154880463416ba21be979aa77654d727a0/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=e4d355154880463416ba21be979aa77654d727a0", "patch": "@@ -7452,60 +7452,6 @@ warn_array_subscript_with_type_char (tree index)\n     warning (OPT_Wchar_subscripts, \"array subscript has type %<char%>\");\n }\n \n-/* Warn about obvious array bounds errors for fixed size arrays that\n-   are indexed by a constant.  This is a subset of similar checks in\n-   tree-vrp.c; by doing this here we can get some level of checking\n-   from non-optimized, non-vrp compilation.  Returns true if a warning\n-   is issued.  */\n-\n-bool\n-warn_array_subscript_range (const_tree array, const_tree index)\n-{\n-  if (skip_evaluation == 0\n-      && TREE_CODE (TREE_TYPE (array)) == ARRAY_TYPE\n-      && TYPE_DOMAIN (TREE_TYPE (array)) && TREE_CODE (index) == INTEGER_CST)\n-    {\n-      const_tree max_index;\n-\n-      max_index = TYPE_MAX_VALUE (TYPE_DOMAIN (TREE_TYPE (array)));\n-      if (max_index && TREE_CODE (max_index) == INTEGER_CST\n-          && tree_int_cst_lt (max_index, index)\n-          && !tree_int_cst_equal (index, max_index)\n-          /* Always allow off-by-one.  */\n-          && !tree_int_cst_equal (int_const_binop (PLUS_EXPR,\n-                                                   max_index,\n-                                                   integer_one_node,\n-                                                   0),\n-                                  index)\n-          /* Accesses after the end of arrays of size 0 (gcc\n-             extension) and 1 are likely intentional (\"struct\n-             hack\").  Note that max_index is array dimension - 1.  */\n-          && compare_tree_int (max_index, 1) >= 0)\n-        {\n-          warning (OPT_Warray_bounds,\n-                   \"array subscript is above array bounds\");\n-          return true;\n-        }\n-      else\n-        {\n-          const_tree min_index;\n-\n-          min_index = TYPE_MIN_VALUE (TYPE_DOMAIN (TREE_TYPE (array)));\n-          if (min_index && TREE_CODE (min_index) == INTEGER_CST\n-              && tree_int_cst_lt (index, min_index))\n-            {\n-              warning (OPT_Warray_bounds,\n-                       compare_tree_int (min_index, 0) == 0\n-                           ? \"array subscript is negative\"\n-                           : \"array subscript is below array bounds\");\n-              return true;\n-            }\n-        }\n-    }\n-\n-  return false;\n-}\n-\n /* Implement -Wparentheses for the unexpected C precedence rules, to\n    cover cases like x + y << z which readers are likely to\n    misinterpret.  We have seen an expression in which CODE is a binary"}, {"sha": "c403bee634392547d6058a799d3ea96abaea1cb1", "filename": "gcc/c-common.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4d355154880463416ba21be979aa77654d727a0/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4d355154880463416ba21be979aa77654d727a0/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=e4d355154880463416ba21be979aa77654d727a0", "patch": "@@ -893,7 +893,6 @@ extern int complete_array_type (tree *, tree, bool);\n extern tree builtin_type_for_size (int, bool);\n \n extern void warn_array_subscript_with_type_char (tree);\n-extern bool warn_array_subscript_range (const_tree, const_tree);\n extern void warn_about_parentheses (enum tree_code, enum tree_code,\n \t\t\t\t    enum tree_code);\n extern void warn_for_unused_label (tree label);"}, {"sha": "2f8428210d708a7c81baee24bbd9e16d2cd446bb", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4d355154880463416ba21be979aa77654d727a0/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4d355154880463416ba21be979aa77654d727a0/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=e4d355154880463416ba21be979aa77654d727a0", "patch": "@@ -2086,12 +2086,7 @@ build_array_ref (tree array, tree index)\n \n   if (TREE_CODE (TREE_TYPE (array)) == ARRAY_TYPE)\n     {\n-      tree rval, type, ref;\n-      bool has_warned_on_bounds_check = false;\n-\n-      /* Warn about any obvious array bounds errors for fixed size arrays that\n-         are indexed by a constant.  */\n-      has_warned_on_bounds_check = warn_array_subscript_range (array, index);\n+      tree rval, type;\n \n       /* An array that is indexed by a non-constant\n \t cannot be stored in a register; we must be able to do\n@@ -2144,12 +2139,7 @@ build_array_ref (tree array, tree index)\n \t       in an inline function.\n \t       Hope it doesn't break something else.  */\n \t    | TREE_THIS_VOLATILE (array));\n-      ref = require_complete_type (fold (rval));\n-\n-      /* Suppress bounds warning in tree-vrp.c if already warned here.  */\n-      if (has_warned_on_bounds_check)\n-        TREE_NO_WARNING (ref) = 1;\n-      return ref;\n+      return require_complete_type (fold (rval));\n     }\n   else\n     {"}, {"sha": "5bbeda665d990b4057255471e33223d777cc25d0", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4d355154880463416ba21be979aa77654d727a0/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4d355154880463416ba21be979aa77654d727a0/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e4d355154880463416ba21be979aa77654d727a0", "patch": "@@ -1,3 +1,8 @@\n+2008-05-02  Simon Baldwin <simonb@google.com>\n+\n+\tPR bootstrap/36108\n+\t* typeck.c (build_array_ref): Remove warn_array_subscript_range.\n+\n 2008-05-01  Simon Baldwin <simonb@google.com>\n \n \t* typeck.c (build_array_ref): Call warn_array_subscript_range."}, {"sha": "bf264ad2cc731f448fd8e784d3dab022e9619677", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4d355154880463416ba21be979aa77654d727a0/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4d355154880463416ba21be979aa77654d727a0/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=e4d355154880463416ba21be979aa77654d727a0", "patch": "@@ -2556,8 +2556,7 @@ build_array_ref (tree array, tree idx)\n \n   if (TREE_CODE (TREE_TYPE (array)) == ARRAY_TYPE)\n     {\n-      bool has_warned_on_bounds_check = false;\n-      tree rval, type, ref;\n+      tree rval, type;\n \n       warn_array_subscript_with_type_char (idx);\n \n@@ -2574,10 +2573,6 @@ build_array_ref (tree array, tree idx)\n \t pointer arithmetic.)  */\n       idx = perform_integral_promotions (idx);\n \n-      /* Warn about any obvious array bounds errors for fixed size arrays that\n-         are indexed by a constant.  */\n-      has_warned_on_bounds_check = warn_array_subscript_range (array, idx);\n-\n       /* An array that is indexed by a non-constant\n \t cannot be stored in a register; we must be able to do\n \t address arithmetic on its address.\n@@ -2628,12 +2623,7 @@ build_array_ref (tree array, tree idx)\n \t|= (CP_TYPE_VOLATILE_P (type) | TREE_SIDE_EFFECTS (array));\n       TREE_THIS_VOLATILE (rval)\n \t|= (CP_TYPE_VOLATILE_P (type) | TREE_THIS_VOLATILE (array));\n-      ref = require_complete_type (fold_if_not_in_template (rval));\n-\n-      /* Suppress bounds warning in tree-vrp.c if already warned here.  */\n-      if (has_warned_on_bounds_check)\n-        TREE_NO_WARNING (ref) = 1;\n-      return ref;\n+      return require_complete_type (fold_if_not_in_template (rval));\n     }\n \n   {"}, {"sha": "dfd22afab6cb494ffcf9096092a88d474fcdf07e", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4d355154880463416ba21be979aa77654d727a0/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4d355154880463416ba21be979aa77654d727a0/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=e4d355154880463416ba21be979aa77654d727a0", "patch": "@@ -2679,7 +2679,7 @@ Options} and @ref{Objective-C and Objective-C++ Dialect Options}.\n @option{-Wall} turns on the following warning flags:\n \n @gccoptlist{-Waddress   @gol\n--Warray-bounds @r{(some checks, but more complete with} @option{-O2}@r{)}  @gol\n+-Warray-bounds @r{(only with} @option{-O2}@r{)}  @gol\n -Wc++0x-compat  @gol\n -Wchar-subscripts  @gol\n -Wimplicit-int  @gol\n@@ -3382,10 +3382,9 @@ false positives.\n @item -Warray-bounds\n @opindex Wno-array-bounds\n @opindex Warray-bounds\n-This option detects some cases of out-of-bounds accesses in unoptimized\n-compilations.  More cases are detected when @option{-ftree-vrp} is enabled.\n-(The @option{-ftree-vrp} option is enabled automatically when compiling with\n-@option{-O2} or higher optimization options.)\n+This option is only active when @option{-ftree-vrp} is active\n+(default for -O2 and above). It warns about subscripts to arrays\n+that are always out of bounds. This warning is enabled by @option{-Wall}.\n \n @item -Wno-div-by-zero\n @opindex Wno-div-by-zero"}, {"sha": "949a3deff4acfeb9b0abb770655a892c1ca60d75", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4d355154880463416ba21be979aa77654d727a0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4d355154880463416ba21be979aa77654d727a0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e4d355154880463416ba21be979aa77654d727a0", "patch": "@@ -1,3 +1,11 @@\n+2008-05-01  Simon Baldwin <simonb@google.com>\n+\n+\tPR bootstrap/36108\n+\t* testsuite/gcc.dg/Warray-bounds.c: Removed frontend warnings update.\n+\t* testsuite/g++.dg/warn/Warray-bounds.c: Ditto.\n+\t* testsuite/gcc.dg/Warray-bounds-noopt.c: Removed testcase.\n+\t* testsuite/g++.dg/warn/Warray-bounds-noopt.c: Ditto.\n+\n 2008-05-01  Bud Davis  <bdavis9659@sbcglobal.net>\n \n \tPR fortran/PR35940\t"}, {"sha": "650f2690e5ce4e926c123d9b2f2bdf6a037de2cf", "filename": "gcc/testsuite/g++.dg/warn/Warray-bounds-noopt.C", "status": "removed", "additions": 0, "deletions": 123, "changes": 123, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb1418c1b43a95548515bffb8d4a54a173f2a49d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWarray-bounds-noopt.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb1418c1b43a95548515bffb8d4a54a173f2a49d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWarray-bounds-noopt.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWarray-bounds-noopt.C?ref=bb1418c1b43a95548515bffb8d4a54a173f2a49d", "patch": "@@ -1,123 +0,0 @@\n-/* { dg-do compile } */\n-/* { dg-options \"-O0 -Warray-bounds\" } */\n-\n-int a[10];\n-\n-static inline int n(void) {\n-    __SIZE_TYPE__ strlen(const char *s);\n-    return strlen(\"12345\");\n-}\n-\n-void g(int *p);\n-void h(int p);\n-\n-int* f(void) {\n-    int b[10];\n-    int i;\n-    struct {\n-       int c[10];\n-    } c;\n-    int p[0], q[1], r[2], s[3], t[4];\n-\n-    a[-1] = 0;             /* { dg-warning \"array subscript\" } */\n-    a[ 0] = 0;\n-    a[ 1] = 0;\n-\n-\n-    a[ 9] = 0;\n-    a[10] = 0;\n-    a[11] = 0;             /* { dg-warning \"array subscript\" } */\n-    a[2 * n() - 11] = 0;\n-    a[2 * n() - 10] = 0;\n-    a[2 * n() -  1] = 0;\n-    a[2 * n() -  0] = 0;\n-\n-    b[-1] = 0;             /* { dg-warning \"array subscript\" } */\n-    b[ 0] = 0;\n-    b[ 1] = 0;\n-    b[ 9] = 0;\n-    b[10] = 0;\n-    b[11] = 0;             /* { dg-warning \"array subscript\" } */\n-    b[2 * n() - 11] = 0;\n-    b[2 * n() - 10] = 0;\n-    b[2 * n() -  1] = 0;\n-    b[2 * n() -  0] = 0;\n-\n-    c.c[-1] = 0;           /* { dg-warning \"array subscript\" } */\n-    c.c[ 0] = 0;\n-    c.c[ 1] = 0;\n-    c.c[ 9] = 0;\n-    c.c[10] = 0;\n-    c.c[11] = 0;           /* { dg-warning \"array subscript\" } */\n-    c.c[2 * n() - 11] = 0;\n-    c.c[2 * n() - 10] = 0;\n-    c.c[2 * n() -  1] = 0;\n-    c.c[2 * n() -  0] = 0;\n-\n-    g(&a[8]);\n-    g(&a[9]);\n-    g(&a[10]);\n-    g(&a[11]);             /* { dg-warning \"array subscript\" } */\n-    g(&a[-30]+10);         /* { dg-warning \"array subscript\" } */\n-    g(&a[-30]+30);         /* { dg-warning \"array subscript\" } */\n-\n-    g(&b[10]);\n-    g(&c.c[10]);\n-    g(&b[11]);             /* { dg-warning \"array subscript\" } */\n-    g(&c.c[11]);           /* { dg-warning \"array subscript\" } */\n-\n-    g(&a[0]);\n-    g(&b[0]);\n-    g(&c.c[0]);\n-\n-    g(&a[-1]);             /* { dg-warning \"array subscript\" } */\n-    g(&b[-1]);             /* { dg-warning \"array subscript\" } */ \n-    h(sizeof a[-1]);\n-    h(sizeof a[10]);\n-    h(sizeof b[-1]);\n-    h(sizeof b[10]);\n-    h(sizeof c.c[-1]);\n-    h(sizeof c.c[10]);\n-\n-    p[-1] = 0;             /* { dg-warning \"array subscript\" } */\n-    p[0] = 0;\n-    p[1] = 0;\n-\n-    q[-1] = 0;             /* { dg-warning \"array subscript\" } */\n-    q[0] = 0;\n-    q[1] = 0;\n-    q[2] = 0;\n-\n-    r[-1] = 0;             /* { dg-warning \"array subscript\" } */\n-    r[0] = 0;\n-    r[1] = 0;\n-    r[2] = 0;\n-    r[3] = 0;              /* { dg-warning \"array subscript\" } */\n-\n-    s[-1] = 0;             /* { dg-warning \"array subscript\" } */\n-    s[0] = 0;\n-    s[1] = 0;\n-    s[2] = 0;\n-    s[3] = 0;\n-    s[4] = 0;              /* { dg-warning \"array subscript\" } */\n-\n-    t[-1] = 0;             /* { dg-warning \"array subscript\" } */\n-    t[0] = 0;\n-    t[1] = 0;\n-    t[2] = 0;\n-    t[3] = 0;\n-    t[4] = 0;\n-    t[5] = 0;              /* { dg-warning \"array subscript\" } */\n-\n-    if (10 < 10)\n-       a[10] = 0;\n-    if (10 < 10)\n-       b[10] = 0;\n-    if (-1 >= 0)\n-       c.c[-1] = 0;        /* { dg-warning \"array subscript\" } */\n-\n-    for (i = 20; i < 30; ++i)\n-             a[i] = 1;\n-\n-    return a;\n-}"}, {"sha": "0385516abd4e215467d9358c8dfce053c0c1fe6e", "filename": "gcc/testsuite/g++.dg/warn/Warray-bounds.C", "status": "modified", "additions": 5, "deletions": 37, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4d355154880463416ba21be979aa77654d727a0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWarray-bounds.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4d355154880463416ba21be979aa77654d727a0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWarray-bounds.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWarray-bounds.C?ref=e4d355154880463416ba21be979aa77654d727a0", "patch": "@@ -17,7 +17,6 @@ int* f(void) {\n     struct {\n        int c[10];\n     } c;\n-    int p[0], q[1], r[2], s[3], t[4];\n \n     a[-1] = 0;             /* { dg-warning \"array subscript\" } */\n     a[ 0] = 0;\n@@ -58,11 +57,12 @@ int* f(void) {\n     g(&a[9]);\n     g(&a[10]);\n     g(&a[11]);             /* { dg-warning \"array subscript\" } */\n-    g(&a[-30]+10);         /* { dg-warning \"array subscript\" } */\n-    g(&a[-30]+30);         /* { dg-warning \"array subscript\" } */\n+    g(&a[-30]+10);             /* { dg-warning \"array subscript\" } */\n+    g(&a[-30]+30);\n \n     g(&b[10]);\n     g(&c.c[10]);\n+    g(&a[11]);             /* { dg-warning \"array subscript\" } */\n     g(&b[11]);             /* { dg-warning \"array subscript\" } */\n     g(&c.c[11]);           /* { dg-warning \"array subscript\" } */\n \n@@ -79,45 +79,13 @@ int* f(void) {\n     h(sizeof c.c[-1]);\n     h(sizeof c.c[10]);\n \n-    p[-1] = 0;             /* { dg-warning \"array subscript\" } */\n-    p[0] = 0;\n-    p[1] = 0;\n-\n-    q[-1] = 0;             /* { dg-warning \"array subscript\" } */\n-    q[0] = 0;\n-    q[1] = 0;\n-    q[2] = 0;\n-\n-    r[-1] = 0;             /* { dg-warning \"array subscript\" } */\n-    r[0] = 0;\n-    r[1] = 0;\n-    r[2] = 0;\n-    r[3] = 0;              /* { dg-warning \"array subscript\" } */\n-\n-    s[-1] = 0;             /* { dg-warning \"array subscript\" } */\n-    s[0] = 0;\n-    s[1] = 0;\n-    s[2] = 0;\n-    s[3] = 0;\n-    s[4] = 0;              /* { dg-warning \"array subscript\" } */\n-\n-    t[-1] = 0;             /* { dg-warning \"array subscript\" } */\n-    t[0] = 0;\n-    t[1] = 0;\n-    t[2] = 0;\n-    t[3] = 0;\n-    t[4] = 0;\n-    t[5] = 0;              /* { dg-warning \"array subscript\" } */\n-\n     if (10 < 10)\n        a[10] = 0;\n     if (10 < 10)\n        b[10] = 0;\n     if (-1 >= 0)\n-       c.c[-1] = 0;        /* { dg-warning \"array subscript\" } */\n-\n-    for (i = 20; i < 30; ++i)\n-             a[i] = 1;       /* { dg-warning \"array subscript\" } */\n+       c.c[-1] = 0;\n \n     return a;\n }\n+"}, {"sha": "650f2690e5ce4e926c123d9b2f2bdf6a037de2cf", "filename": "gcc/testsuite/gcc.dg/Warray-bounds-noopt.c", "status": "removed", "additions": 0, "deletions": 123, "changes": 123, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb1418c1b43a95548515bffb8d4a54a173f2a49d/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-noopt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb1418c1b43a95548515bffb8d4a54a173f2a49d/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-noopt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-noopt.c?ref=bb1418c1b43a95548515bffb8d4a54a173f2a49d", "patch": "@@ -1,123 +0,0 @@\n-/* { dg-do compile } */\n-/* { dg-options \"-O0 -Warray-bounds\" } */\n-\n-int a[10];\n-\n-static inline int n(void) {\n-    __SIZE_TYPE__ strlen(const char *s);\n-    return strlen(\"12345\");\n-}\n-\n-void g(int *p);\n-void h(int p);\n-\n-int* f(void) {\n-    int b[10];\n-    int i;\n-    struct {\n-       int c[10];\n-    } c;\n-    int p[0], q[1], r[2], s[3], t[4];\n-\n-    a[-1] = 0;             /* { dg-warning \"array subscript\" } */\n-    a[ 0] = 0;\n-    a[ 1] = 0;\n-\n-\n-    a[ 9] = 0;\n-    a[10] = 0;\n-    a[11] = 0;             /* { dg-warning \"array subscript\" } */\n-    a[2 * n() - 11] = 0;\n-    a[2 * n() - 10] = 0;\n-    a[2 * n() -  1] = 0;\n-    a[2 * n() -  0] = 0;\n-\n-    b[-1] = 0;             /* { dg-warning \"array subscript\" } */\n-    b[ 0] = 0;\n-    b[ 1] = 0;\n-    b[ 9] = 0;\n-    b[10] = 0;\n-    b[11] = 0;             /* { dg-warning \"array subscript\" } */\n-    b[2 * n() - 11] = 0;\n-    b[2 * n() - 10] = 0;\n-    b[2 * n() -  1] = 0;\n-    b[2 * n() -  0] = 0;\n-\n-    c.c[-1] = 0;           /* { dg-warning \"array subscript\" } */\n-    c.c[ 0] = 0;\n-    c.c[ 1] = 0;\n-    c.c[ 9] = 0;\n-    c.c[10] = 0;\n-    c.c[11] = 0;           /* { dg-warning \"array subscript\" } */\n-    c.c[2 * n() - 11] = 0;\n-    c.c[2 * n() - 10] = 0;\n-    c.c[2 * n() -  1] = 0;\n-    c.c[2 * n() -  0] = 0;\n-\n-    g(&a[8]);\n-    g(&a[9]);\n-    g(&a[10]);\n-    g(&a[11]);             /* { dg-warning \"array subscript\" } */\n-    g(&a[-30]+10);         /* { dg-warning \"array subscript\" } */\n-    g(&a[-30]+30);         /* { dg-warning \"array subscript\" } */\n-\n-    g(&b[10]);\n-    g(&c.c[10]);\n-    g(&b[11]);             /* { dg-warning \"array subscript\" } */\n-    g(&c.c[11]);           /* { dg-warning \"array subscript\" } */\n-\n-    g(&a[0]);\n-    g(&b[0]);\n-    g(&c.c[0]);\n-\n-    g(&a[-1]);             /* { dg-warning \"array subscript\" } */\n-    g(&b[-1]);             /* { dg-warning \"array subscript\" } */ \n-    h(sizeof a[-1]);\n-    h(sizeof a[10]);\n-    h(sizeof b[-1]);\n-    h(sizeof b[10]);\n-    h(sizeof c.c[-1]);\n-    h(sizeof c.c[10]);\n-\n-    p[-1] = 0;             /* { dg-warning \"array subscript\" } */\n-    p[0] = 0;\n-    p[1] = 0;\n-\n-    q[-1] = 0;             /* { dg-warning \"array subscript\" } */\n-    q[0] = 0;\n-    q[1] = 0;\n-    q[2] = 0;\n-\n-    r[-1] = 0;             /* { dg-warning \"array subscript\" } */\n-    r[0] = 0;\n-    r[1] = 0;\n-    r[2] = 0;\n-    r[3] = 0;              /* { dg-warning \"array subscript\" } */\n-\n-    s[-1] = 0;             /* { dg-warning \"array subscript\" } */\n-    s[0] = 0;\n-    s[1] = 0;\n-    s[2] = 0;\n-    s[3] = 0;\n-    s[4] = 0;              /* { dg-warning \"array subscript\" } */\n-\n-    t[-1] = 0;             /* { dg-warning \"array subscript\" } */\n-    t[0] = 0;\n-    t[1] = 0;\n-    t[2] = 0;\n-    t[3] = 0;\n-    t[4] = 0;\n-    t[5] = 0;              /* { dg-warning \"array subscript\" } */\n-\n-    if (10 < 10)\n-       a[10] = 0;\n-    if (10 < 10)\n-       b[10] = 0;\n-    if (-1 >= 0)\n-       c.c[-1] = 0;        /* { dg-warning \"array subscript\" } */\n-\n-    for (i = 20; i < 30; ++i)\n-             a[i] = 1;\n-\n-    return a;\n-}"}, {"sha": "bbb5bea65e1769999cb2178594ad91ba0abf6e9c", "filename": "gcc/testsuite/gcc.dg/Warray-bounds.c", "status": "modified", "additions": 6, "deletions": 36, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4d355154880463416ba21be979aa77654d727a0/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4d355154880463416ba21be979aa77654d727a0/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds.c?ref=e4d355154880463416ba21be979aa77654d727a0", "patch": "@@ -17,7 +17,6 @@ int* f(void) {\n     struct {\n        int c[10];\n     } c;\n-    int p[0], q[1], r[2], s[3], t[4];\n \n     a[-1] = 0;             /* { dg-warning \"array subscript\" } */\n     a[ 0] = 0;\n@@ -57,13 +56,13 @@ int* f(void) {\n     g(&a[8]);\n     g(&a[9]);\n     g(&a[10]);\n-    g(&a[11]);             /* { dg-warning \"array subscript\" } */\n-    g(&a[-30]+10);         /* { dg-warning \"array subscript\" } */\n-    g(&a[-30]+30);         /* { dg-warning \"array subscript\" } */\n+    g(&a[11]);             /* { dg-warning \"array subscript\" \"\" { xfail *-*-* } } */\n+    g(&a[-30]+10);             /* { dg-warning \"array subscript\" } */\n+    g(&a[-30]+30);\n \n     g(&b[10]);\n     g(&c.c[10]);\n-    g(&b[11]);             /* { dg-warning \"array subscript\" } */\n+    g(&b[11]);             /* { dg-warning \"array subscript\" \"\" { xfail *-*-* } } */\n     g(&c.c[11]);           /* { dg-warning \"array subscript\" } */\n \n     g(&a[0]);\n@@ -79,45 +78,16 @@ int* f(void) {\n     h(sizeof c.c[-1]);\n     h(sizeof c.c[10]);\n \n-    p[-1] = 0;             /* { dg-warning \"array subscript\" } */\n-    p[0] = 0;\n-    p[1] = 0;\n-\n-    q[-1] = 0;             /* { dg-warning \"array subscript\" } */\n-    q[0] = 0;\n-    q[1] = 0;\n-    q[2] = 0;\n-\n-    r[-1] = 0;             /* { dg-warning \"array subscript\" } */\n-    r[0] = 0;\n-    r[1] = 0;\n-    r[2] = 0;\n-    r[3] = 0;              /* { dg-warning \"array subscript\" } */\n-\n-    s[-1] = 0;             /* { dg-warning \"array subscript\" } */\n-    s[0] = 0;\n-    s[1] = 0;\n-    s[2] = 0;\n-    s[3] = 0;\n-    s[4] = 0;              /* { dg-warning \"array subscript\" } */\n-\n-    t[-1] = 0;             /* { dg-warning \"array subscript\" } */\n-    t[0] = 0;\n-    t[1] = 0;\n-    t[2] = 0;\n-    t[3] = 0;\n-    t[4] = 0;\n-    t[5] = 0;              /* { dg-warning \"array subscript\" } */\n-\n     if (10 < 10)\n        a[10] = 0;\n     if (10 < 10)\n        b[10] = 0;\n     if (-1 >= 0)\n-       c.c[-1] = 0;        /* { dg-warning \"array subscript\" } */\n+       c.c[-1] = 0;\n \n     for (i = 20; i < 30; ++i)\n              a[i] = 1;       /* { dg-warning \"array subscript\" } */\n \n     return a;\n }\n+"}, {"sha": "4b409e46aafef33d721f29c1c3c3c7ba3ee1431c", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4d355154880463416ba21be979aa77654d727a0/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4d355154880463416ba21be979aa77654d727a0/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=e4d355154880463416ba21be979aa77654d727a0", "patch": "@@ -4645,8 +4645,8 @@ check_array_ref (tree ref, location_t* locus, bool ignore_off_by_one)\n           && TYPE_MAX_VALUE (TYPE_DOMAIN (TREE_TYPE (ref))) == NULL_TREE)\n       /* Accesses after the end of arrays of size 0 (gcc\n          extension) and 1 are likely intentional (\"struct\n-         hack\").  Note that up_bound is array dimension - 1.  */\n-      || compare_tree_int (up_bound, 1) < 0)\n+         hack\").  */\n+      || compare_tree_int (up_bound, 1) <= 0)\n     return;\n \n   low_bound = array_ref_low_bound (ref);"}]}