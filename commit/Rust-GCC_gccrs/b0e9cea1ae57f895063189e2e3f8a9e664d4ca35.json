{"sha": "b0e9cea1ae57f895063189e2e3f8a9e664d4ca35", "node_id": "C_kwDOANBUbNoAKGIwZTljZWExYWU1N2Y4OTUwNjMxODllMmUzZjhhOWU2NjRkNGNhMzU", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-10-25T14:40:07Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-10-26T14:05:59Z"}, "message": "Add missing NodeId to where clause items", "tree": {"sha": "b014b59e031da146c594df0b4827fd96ed792c11", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b014b59e031da146c594df0b4827fd96ed792c11"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b0e9cea1ae57f895063189e2e3f8a9e664d4ca35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0e9cea1ae57f895063189e2e3f8a9e664d4ca35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0e9cea1ae57f895063189e2e3f8a9e664d4ca35", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0e9cea1ae57f895063189e2e3f8a9e664d4ca35/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "161a690d21044f5211ad2b55ae6b06f91bbd9106", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/161a690d21044f5211ad2b55ae6b06f91bbd9106", "html_url": "https://github.com/Rust-GCC/gccrs/commit/161a690d21044f5211ad2b55ae6b06f91bbd9106"}], "stats": {"total": 50, "additions": 29, "deletions": 21}, "files": [{"sha": "a5d9a0ac8698f0d73d854104ed19428cd6b634a3", "filename": "gcc/rust/ast/rust-item.h", "status": "modified", "additions": 29, "deletions": 21, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0e9cea1ae57f895063189e2e3f8a9e664d4ca35/gcc%2Frust%2Fast%2Frust-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0e9cea1ae57f895063189e2e3f8a9e664d4ca35/gcc%2Frust%2Fast%2Frust-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-item.h?ref=b0e9cea1ae57f895063189e2e3f8a9e664d4ca35", "patch": "@@ -177,6 +177,8 @@ class WhereClauseItem\n \n   virtual void accept_vis (ASTVisitor &vis) = 0;\n \n+  virtual NodeId get_node_id () const = 0;\n+\n protected:\n   // Clone function implementation as pure virtual method\n   virtual WhereClauseItem *clone_where_clause_item_impl () const = 0;\n@@ -187,23 +189,29 @@ class LifetimeWhereClauseItem : public WhereClauseItem\n {\n   Lifetime lifetime;\n \n-  // LifetimeBounds lifetime_bounds;\n-  std::vector<Lifetime> lifetime_bounds; // inlined lifetime bounds\n-\n+  std::vector<Lifetime> lifetime_bounds;\n   Location locus;\n+  NodeId node_id;\n \n public:\n   LifetimeWhereClauseItem (Lifetime lifetime,\n \t\t\t   std::vector<Lifetime> lifetime_bounds,\n \t\t\t   Location locus)\n     : lifetime (std::move (lifetime)),\n-      lifetime_bounds (std::move (lifetime_bounds)), locus (locus)\n+      lifetime_bounds (std::move (lifetime_bounds)), locus (locus),\n+      node_id (Analysis::Mappings::get ()->get_next_node_id ())\n   {}\n \n   std::string as_string () const override;\n \n   void accept_vis (ASTVisitor &vis) override;\n \n+  NodeId get_node_id () const override final { return node_id; }\n+\n+  Lifetime &get_lifetime () { return lifetime; }\n+\n+  std::vector<Lifetime> &get_lifetime_bounds () { return lifetime_bounds; }\n+\n protected:\n   // Clone function implementation as (not pure) virtual method\n   LifetimeWhereClauseItem *clone_where_clause_item_impl () const override\n@@ -215,18 +223,10 @@ class LifetimeWhereClauseItem : public WhereClauseItem\n // A type bound where clause item\n class TypeBoundWhereClauseItem : public WhereClauseItem\n {\n-  // bool has_for_lifetimes;\n-  // LifetimeParams for_lifetimes;\n-  std::vector<LifetimeParam> for_lifetimes; // inlined\n-\n+  std::vector<LifetimeParam> for_lifetimes;\n   std::unique_ptr<Type> bound_type;\n-\n-  // bool has_type_param_bounds;\n-  // TypeParamBounds type_param_bounds;\n-  std::vector<std::unique_ptr<TypeParamBound>>\n-    type_param_bounds; // inlined form\n-\n-  // should this store location info?\n+  std::vector<std::unique_ptr<TypeParamBound>> type_param_bounds;\n+  NodeId node_id;\n \n public:\n   // Returns whether the item has ForLifetimes\n@@ -240,14 +240,16 @@ class TypeBoundWhereClauseItem : public WhereClauseItem\n     std::vector<std::unique_ptr<TypeParamBound>> type_param_bounds)\n     : for_lifetimes (std::move (for_lifetimes)),\n       bound_type (std::move (bound_type)),\n-      type_param_bounds (std::move (type_param_bounds))\n+      type_param_bounds (std::move (type_param_bounds)),\n+      node_id (Analysis::Mappings::get ()->get_next_node_id ())\n   {}\n \n   // Copy constructor requires clone\n   TypeBoundWhereClauseItem (TypeBoundWhereClauseItem const &other)\n     : for_lifetimes (other.for_lifetimes),\n       bound_type (other.bound_type->clone_type ())\n   {\n+    node_id = other.node_id;\n     type_param_bounds.reserve (other.type_param_bounds.size ());\n     for (const auto &e : other.type_param_bounds)\n       type_param_bounds.push_back (e->clone_type_param_bound ());\n@@ -256,9 +258,9 @@ class TypeBoundWhereClauseItem : public WhereClauseItem\n   // Overload assignment operator to clone\n   TypeBoundWhereClauseItem &operator= (TypeBoundWhereClauseItem const &other)\n   {\n+    node_id = other.node_id;\n     for_lifetimes = other.for_lifetimes;\n     bound_type = other.bound_type->clone_type ();\n-\n     type_param_bounds.reserve (other.type_param_bounds.size ());\n     for (const auto &e : other.type_param_bounds)\n       type_param_bounds.push_back (e->clone_type_param_bound ());\n@@ -275,7 +277,6 @@ class TypeBoundWhereClauseItem : public WhereClauseItem\n \n   void accept_vis (ASTVisitor &vis) override;\n \n-  // TODO: is this better? Or is a \"vis_block\" better?\n   std::unique_ptr<Type> &get_type ()\n   {\n     rust_assert (bound_type != nullptr);\n@@ -287,12 +288,15 @@ class TypeBoundWhereClauseItem : public WhereClauseItem\n   {\n     return type_param_bounds;\n   }\n+\n   const std::vector<std::unique_ptr<TypeParamBound>> &\n   get_type_param_bounds () const\n   {\n     return type_param_bounds;\n   }\n \n+  NodeId get_node_id () const override final { return node_id; }\n+\n protected:\n   // Clone function implementation as (not pure) virtual method\n   TypeBoundWhereClauseItem *clone_where_clause_item_impl () const override\n@@ -306,17 +310,18 @@ struct WhereClause\n {\n private:\n   std::vector<std::unique_ptr<WhereClauseItem>> where_clause_items;\n-\n-  // should this store location info?\n+  NodeId node_id;\n \n public:\n   WhereClause (std::vector<std::unique_ptr<WhereClauseItem>> where_clause_items)\n-    : where_clause_items (std::move (where_clause_items))\n+    : where_clause_items (std::move (where_clause_items)),\n+      node_id (Analysis::Mappings::get ()->get_next_node_id ())\n   {}\n \n   // copy constructor with vector clone\n   WhereClause (WhereClause const &other)\n   {\n+    node_id = other.node_id;\n     where_clause_items.reserve (other.where_clause_items.size ());\n     for (const auto &e : other.where_clause_items)\n       where_clause_items.push_back (e->clone_where_clause_item ());\n@@ -325,6 +330,7 @@ struct WhereClause\n   // overloaded assignment operator with vector clone\n   WhereClause &operator= (WhereClause const &other)\n   {\n+    node_id = other.node_id;\n     where_clause_items.reserve (other.where_clause_items.size ());\n     for (const auto &e : other.where_clause_items)\n       where_clause_items.push_back (e->clone_where_clause_item ());\n@@ -347,6 +353,8 @@ struct WhereClause\n \n   std::string as_string () const;\n \n+  NodeId get_node_id () const { return node_id; }\n+\n   // TODO: this mutable getter seems kinda dodgy\n   std::vector<std::unique_ptr<WhereClauseItem>> &get_items ()\n   {"}]}