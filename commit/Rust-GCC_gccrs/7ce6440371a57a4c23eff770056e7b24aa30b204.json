{"sha": "7ce6440371a57a4c23eff770056e7b24aa30b204", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2NlNjQ0MDM3MWE1N2E0YzIzZWZmNzcwMDU2ZTdiMjRhYTMwYjIwNA==", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2017-05-24T13:25:01Z"}, "committer": {"name": "Thomas Schwinge", "email": "tschwinge@gcc.gnu.org", "date": "2017-05-24T13:25:01Z"}, "message": "OpenACC 1.0 compatibility: acc_async_wait, acc_async_wait_all\n\n\tlibgomp/\n\t* openacc.h (acc_async_wait, acc_async_wait_all): New prototypes.\n\t* libgomp.map (OACC_2.0.1): Add these.\n\t* oacc-async.c (acc_async_wait, acc_async_wait_all): New aliases\n\tfor \"acc_wait\", and \"acc_wait_all\", respectively.\n\t* openacc.f90 (acc_async_wait, acc_async_wait_all): New interfaces\n\tfor \"acc_wait\", and \"acc_wait_all\", respectively.\n\t* openacc_lib.h (acc_async_wait, acc_async_wait_all): Likewise.\n\t* libgomp.texi (acc_wait, acc_wait_all): Update.\n\t* testsuite/libgomp.oacc-c-c++-common/par-reduction-2.c: Update.\n\t* testsuite/libgomp.oacc-fortran/par-reduction-2-1.f: New file.\n\t* testsuite/libgomp.oacc-fortran/par-reduction-2-2.f: Likewise.\n\nFrom-SVN: r248413", "tree": {"sha": "b60bb3f657f6dcfe63f5785355e867d7417b70b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b60bb3f657f6dcfe63f5785355e867d7417b70b6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7ce6440371a57a4c23eff770056e7b24aa30b204", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ce6440371a57a4c23eff770056e7b24aa30b204", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ce6440371a57a4c23eff770056e7b24aa30b204", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ce6440371a57a4c23eff770056e7b24aa30b204/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "318686c21a49aa7dbf6d04e510e6e513195256e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/318686c21a49aa7dbf6d04e510e6e513195256e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/318686c21a49aa7dbf6d04e510e6e513195256e3"}], "stats": {"total": 195, "additions": 188, "deletions": 7}, "files": [{"sha": "8adc10b3614fc3623cfb35c470f4aca866ffd778", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ce6440371a57a4c23eff770056e7b24aa30b204/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ce6440371a57a4c23eff770056e7b24aa30b204/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=7ce6440371a57a4c23eff770056e7b24aa30b204", "patch": "@@ -1,5 +1,17 @@\n 2017-05-24  Thomas Schwinge  <thomas@codesourcery.com>\n \n+\t* openacc.h (acc_async_wait, acc_async_wait_all): New prototypes.\n+\t* libgomp.map (OACC_2.0.1): Add these.\n+\t* oacc-async.c (acc_async_wait, acc_async_wait_all): New aliases\n+\tfor \"acc_wait\", and \"acc_wait_all\", respectively.\n+\t* openacc.f90 (acc_async_wait, acc_async_wait_all): New interfaces\n+\tfor \"acc_wait\", and \"acc_wait_all\", respectively.\n+\t* openacc_lib.h (acc_async_wait, acc_async_wait_all): Likewise.\n+\t* libgomp.texi (acc_wait, acc_wait_all): Update.\n+\t* testsuite/libgomp.oacc-c-c++-common/par-reduction-2.c: Update.\n+\t* testsuite/libgomp.oacc-fortran/par-reduction-2-1.f: New file.\n+\t* testsuite/libgomp.oacc-fortran/par-reduction-2-2.f: Likewise.\n+\n \t* openacc_lib.h (acc_pcopyin, acc_pcreate): Route to\n \tacc_present_or_copyin and acc_present_or_create procedures,\n \trespectively."}, {"sha": "f9044ae273b0f1cf4010253759a1491fc4dba2fe", "filename": "libgomp/libgomp.map", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ce6440371a57a4c23eff770056e7b24aa30b204/libgomp%2Flibgomp.map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ce6440371a57a4c23eff770056e7b24aa30b204/libgomp%2Flibgomp.map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Flibgomp.map?ref=7ce6440371a57a4c23eff770056e7b24aa30b204", "patch": "@@ -380,6 +380,8 @@ OACC_2.0 {\n \n OACC_2.0.1 {\n   global:\n+\tacc_async_wait;\n+\tacc_async_wait_all;\n \tacc_pcopyin;\n \tacc_pcreate;\n } OACC_2.0;"}, {"sha": "230720f94b435a3144d141118988bef4844443f7", "filename": "libgomp/libgomp.texi", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ce6440371a57a4c23eff770056e7b24aa30b204/libgomp%2Flibgomp.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ce6440371a57a4c23eff770056e7b24aa30b204/libgomp%2Flibgomp.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Flibgomp.texi?ref=7ce6440371a57a4c23eff770056e7b24aa30b204", "patch": "@@ -2095,12 +2095,15 @@ specified in @var{arg}.\n @item @emph{C/C++}:\n @multitable @columnfractions .20 .80\n @item @emph{Prototype}: @tab @code{acc_wait(arg);}\n+@item @emph{Prototype (OpenACC 1.0 compatibility)}: @tab @code{acc_async_wait(arg);}\n @end multitable\n \n @item @emph{Fortran}:\n @multitable @columnfractions .20 .80\n @item @emph{Interface}: @tab @code{subroutine acc_wait(arg)}\n @item                   @tab @code{integer(acc_handle_kind) arg}\n+@item @emph{Interface (OpenACC 1.0 compatibility)}: @tab @code{subroutine acc_async_wait(arg)}\n+@item                                               @tab @code{integer(acc_handle_kind) arg}\n @end multitable\n \n @item @emph{Reference}:\n@@ -2119,11 +2122,13 @@ This function waits for the completion of all asynchronous operations.\n @item @emph{C/C++}:\n @multitable @columnfractions .20 .80\n @item @emph{Prototype}: @tab @code{acc_wait_all(void);}\n+@item @emph{Prototype (OpenACC 1.0 compatibility)}: @tab @code{acc_async_wait_all(void);}\n @end multitable\n \n @item @emph{Fortran}:\n @multitable @columnfractions .20 .80\n-@item @emph{Interface}: @tab @code{subroutine acc_wait_async()}\n+@item @emph{Interface}: @tab @code{subroutine acc_wait_all()}\n+@item @emph{Interface (OpenACC 1.0 compatibility)}: @tab @code{subroutine acc_async_wait_all()}\n @end multitable\n \n @item @emph{Reference}:"}, {"sha": "1334f99b4108edcc72b1cb88b001e550b641690f", "filename": "libgomp/oacc-async.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ce6440371a57a4c23eff770056e7b24aa30b204/libgomp%2Foacc-async.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ce6440371a57a4c23eff770056e7b24aa30b204/libgomp%2Foacc-async.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Foacc-async.c?ref=7ce6440371a57a4c23eff770056e7b24aa30b204", "patch": "@@ -70,6 +70,17 @@ acc_wait (int async)\n   thr->dev->openacc.async_wait_func (async);\n }\n \n+/* acc_async_wait is an OpenACC 1.0 compatibility name for acc_wait.  */\n+#ifdef HAVE_ATTRIBUTE_ALIAS\n+strong_alias (acc_wait, acc_async_wait)\n+#else\n+void\n+acc_async_wait (int async)\n+{\n+  acc_wait (async);\n+}\n+#endif\n+\n void\n acc_wait_async (int async1, int async2)\n {\n@@ -92,6 +103,17 @@ acc_wait_all (void)\n   thr->dev->openacc.async_wait_all_func ();\n }\n \n+/* acc_async_wait_all is an OpenACC 1.0 compatibility name for acc_wait_all.  */\n+#ifdef HAVE_ATTRIBUTE_ALIAS\n+strong_alias (acc_wait_all, acc_async_wait_all)\n+#else\n+void\n+acc_async_wait_all (void)\n+{\n+  acc_wait_all ();\n+}\n+#endif\n+\n void\n acc_wait_all_async (int async)\n {"}, {"sha": "0eb34fff734d714ef353cbe6430e723bbf64e884", "filename": "libgomp/openacc.f90", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ce6440371a57a4c23eff770056e7b24aa30b204/libgomp%2Fopenacc.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ce6440371a57a4c23eff770056e7b24aa30b204/libgomp%2Fopenacc.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fopenacc.f90?ref=7ce6440371a57a4c23eff770056e7b24aa30b204", "patch": "@@ -470,8 +470,10 @@ module openacc\n \n   public :: acc_get_num_devices, acc_set_device_type, acc_get_device_type\n   public :: acc_set_device_num, acc_get_device_num, acc_async_test\n-  public :: acc_async_test_all, acc_wait, acc_wait_async, acc_wait_all\n-  public :: acc_wait_all_async, acc_init, acc_shutdown, acc_on_device\n+  public :: acc_async_test_all\n+  public :: acc_wait, acc_async_wait, acc_wait_async\n+  public :: acc_wait_all, acc_async_wait_all, acc_wait_all_async\n+  public :: acc_init, acc_shutdown, acc_on_device\n   public :: acc_copyin, acc_present_or_copyin, acc_pcopyin, acc_create\n   public :: acc_present_or_create, acc_pcreate, acc_copyout, acc_delete\n   public :: acc_update_device, acc_update_self, acc_is_present\n@@ -510,6 +512,11 @@ module openacc\n     procedure :: acc_wait_h\n   end interface\n \n+  ! acc_async_wait is an OpenACC 1.0 compatibility name for acc_wait.\n+  interface acc_async_wait\n+    procedure :: acc_wait_h\n+  end interface\n+\n   interface acc_wait_async\n     procedure :: acc_wait_async_h\n   end interface\n@@ -518,6 +525,11 @@ module openacc\n     procedure :: acc_wait_all_h\n   end interface\n \n+  ! acc_async_wait_all is an OpenACC 1.0 compatibility name for acc_wait_all.\n+  interface acc_async_wait_all\n+    procedure :: acc_wait_all_h\n+  end interface\n+\n   interface acc_wait_all_async\n     procedure :: acc_wait_all_async_h\n   end interface"}, {"sha": "137e2c1f7bef2bc8c6a18de1d20e5b785c0399f1", "filename": "libgomp/openacc.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ce6440371a57a4c23eff770056e7b24aa30b204/libgomp%2Fopenacc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ce6440371a57a4c23eff770056e7b24aa30b204/libgomp%2Fopenacc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fopenacc.h?ref=7ce6440371a57a4c23eff770056e7b24aa30b204", "patch": "@@ -75,8 +75,10 @@ int acc_get_device_num (acc_device_t) __GOACC_NOTHROW;\n int acc_async_test (int) __GOACC_NOTHROW;\n int acc_async_test_all (void) __GOACC_NOTHROW;\n void acc_wait (int) __GOACC_NOTHROW;\n+void acc_async_wait (int) __GOACC_NOTHROW;\n void acc_wait_async (int, int) __GOACC_NOTHROW;\n void acc_wait_all (void) __GOACC_NOTHROW;\n+void acc_async_wait_all (void) __GOACC_NOTHROW;\n void acc_wait_all_async (int) __GOACC_NOTHROW;\n void acc_init (acc_device_t) __GOACC_NOTHROW;\n void acc_shutdown (acc_device_t) __GOACC_NOTHROW;"}, {"sha": "289b5512bcc60978ff7c447de855d2b0703e52a1", "filename": "libgomp/openacc_lib.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ce6440371a57a4c23eff770056e7b24aa30b204/libgomp%2Fopenacc_lib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ce6440371a57a4c23eff770056e7b24aa30b204/libgomp%2Fopenacc_lib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fopenacc_lib.h?ref=7ce6440371a57a4c23eff770056e7b24aa30b204", "patch": "@@ -108,6 +108,11 @@\n         end subroutine\n       end interface\n \n+!     acc_async_wait is an OpenACC 1.0 compatibility name for acc_wait.\n+      interface acc_async_wait\n+        procedure :: acc_wait_h\n+      end interface\n+\n       interface acc_wait_async\n         subroutine acc_wait_async_h (a1, a2)\n           integer a1, a2\n@@ -119,6 +124,12 @@\n         end subroutine\n       end interface\n \n+!     acc_async_wait_all is an OpenACC 1.0 compatibility name for\n+!     acc_wait_all.\n+      interface acc_async_wait_all\n+        procedure :: acc_wait_all_h\n+      end interface\n+\n       interface acc_wait_all_async\n         subroutine acc_wait_all_async_h (a)\n           integer a"}, {"sha": "5ab52e97009386d03a568fb8d3c8408ec5b3b8fd", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/par-reduction-2.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ce6440371a57a4c23eff770056e7b24aa30b204/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpar-reduction-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ce6440371a57a4c23eff770056e7b24aa30b204/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpar-reduction-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpar-reduction-2.c?ref=7ce6440371a57a4c23eff770056e7b24aa30b204", "patch": "@@ -1,10 +1,11 @@\n+/* Test of reduction on parallel directive (with async).  */\n+/* See also Fortran variants in \"../libgomp.oacc-fortran/par-reduction-2*\".  */\n+\n /* { dg-additional-options \"-w\" } */\n \n #include <assert.h>\n #include <openacc.h>\n \n-/* Test of reduction on parallel directive (with async).  */\n-\n int\n main (int argc, char *argv[])\n {\n@@ -25,7 +26,7 @@ main (int argc, char *argv[])\n   }\n   res = GANGS * 5;\n \n-  acc_wait (1);\n+  acc_async_wait (1);\n \n   assert (res == res1);\n   assert (res == res2);\n@@ -49,7 +50,7 @@ main (int argc, char *argv[])\n   for (int i = 0; i < GANGS; ++i)\n     res *= 5;\n \n-  acc_wait (1);\n+  acc_async_wait_all ();\n \n   assert (res == res1);\n   assert (res == res2);"}, {"sha": "dcd6592868567dde603a73eb88aef45cd79dfeb8", "filename": "libgomp/testsuite/libgomp.oacc-fortran/par-reduction-2-1.f", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ce6440371a57a4c23eff770056e7b24aa30b204/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fpar-reduction-2-1.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ce6440371a57a4c23eff770056e7b24aa30b204/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fpar-reduction-2-1.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fpar-reduction-2-1.f?ref=7ce6440371a57a4c23eff770056e7b24aa30b204", "patch": "@@ -0,0 +1,57 @@\n+!     Test of reduction on parallel directive (with async).\n+!     Variant of \"../libgomp.oacc-c-c++-common/par-reduction-2.c\".\n+!     Variant using \"openacc_lib.h\".\n+\n+!     { dg-do run }\n+\n+      PROGRAM MAIN\n+      IMPLICIT NONE\n+      INCLUDE \"openacc_lib.h\"\n+\n+      INTEGER RES, RES1, RES2\n+\n+      RES1 = 0\n+      RES2 = 0\n+\n+!$ACC PARALLEL NUM_GANGS(256) NUM_WORKERS(32) VECTOR_LENGTH(32)\n+!$ACC& REDUCTION(+:RES1) COPY(RES1, RES2) ASYNC(1)\n+      res1 = res1 + 5\n+\n+!$ACC ATOMIC\n+      res2 = res2 + 5\n+!$ACC END PARALLEL\n+\n+      IF (ACC_GET_DEVICE_TYPE () .EQ. ACC_DEVICE_HOST) THEN\n+         RES = 1 * 5\n+      ELSE\n+         RES = 256 * 5\n+      END IF\n+\n+      CALL ACC_ASYNC_WAIT (1)\n+\n+      IF (RES .NE. RES1) CALL ABORT\n+      IF (RES .NE. RES2) CALL ABORT\n+\n+      RES1 = 1\n+      RES2 = 1\n+\n+!$ACC PARALLEL NUM_GANGS(8) NUM_WORKERS(32) VECTOR_LENGTH(32)\n+!$ACC& REDUCTION(*:RES1) COPY(RES1, RES2) ASYNC(1)\n+      res1 = res1 * 5\n+\n+!$ACC ATOMIC\n+      res2 = res2 * 5\n+!$ACC END PARALLEL\n+\n+      IF (ACC_GET_DEVICE_TYPE () .EQ. ACC_DEVICE_HOST) THEN\n+         RES = 5 ** 1\n+      ELSE\n+         RES = 5 ** 8\n+      END IF\n+\n+      CALL ACC_ASYNC_WAIT_ALL\n+\n+      IF (RES .NE. RES1) CALL ABORT\n+      IF (RES .NE. RES2) CALL ABORT\n+\n+      END PROGRAM"}, {"sha": "bf72002dd205d69741a6d1a224c29a92b2ed7e2f", "filename": "libgomp/testsuite/libgomp.oacc-fortran/par-reduction-2-2.f", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ce6440371a57a4c23eff770056e7b24aa30b204/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fpar-reduction-2-2.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ce6440371a57a4c23eff770056e7b24aa30b204/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fpar-reduction-2-2.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fpar-reduction-2-2.f?ref=7ce6440371a57a4c23eff770056e7b24aa30b204", "patch": "@@ -0,0 +1,57 @@\n+!     Test of reduction on parallel directive (with async).\n+!     Variant of \"../libgomp.oacc-c-c++-common/par-reduction-2.c\".\n+!     Variant using the \"openacc\" module.\n+\n+!     { dg-do run }\n+\n+      PROGRAM MAIN\n+      USE OPENACC\n+      IMPLICIT NONE\n+\n+      INTEGER RES, RES1, RES2\n+\n+      RES1 = 0\n+      RES2 = 0\n+\n+!$ACC PARALLEL NUM_GANGS(256) NUM_WORKERS(32) VECTOR_LENGTH(32)\n+!$ACC& REDUCTION(+:RES1) COPY(RES1, RES2) ASYNC(1)\n+      res1 = res1 + 5\n+\n+!$ACC ATOMIC\n+      res2 = res2 + 5\n+!$ACC END PARALLEL\n+\n+      IF (ACC_GET_DEVICE_TYPE () .EQ. ACC_DEVICE_HOST) THEN\n+         RES = 1 * 5\n+      ELSE\n+         RES = 256 * 5\n+      END IF\n+\n+      CALL ACC_ASYNC_WAIT (1)\n+\n+      IF (RES .NE. RES1) CALL ABORT\n+      IF (RES .NE. RES2) CALL ABORT\n+\n+      RES1 = 1\n+      RES2 = 1\n+\n+!$ACC PARALLEL NUM_GANGS(8) NUM_WORKERS(32) VECTOR_LENGTH(32)\n+!$ACC& REDUCTION(*:RES1) COPY(RES1, RES2) ASYNC(1)\n+      res1 = res1 * 5\n+\n+!$ACC ATOMIC\n+      res2 = res2 * 5\n+!$ACC END PARALLEL\n+\n+      IF (ACC_GET_DEVICE_TYPE () .EQ. ACC_DEVICE_HOST) THEN\n+         RES = 5 ** 1\n+      ELSE\n+         RES = 5 ** 8\n+      END IF\n+\n+      CALL ACC_ASYNC_WAIT_ALL\n+\n+      IF (RES .NE. RES1) CALL ABORT\n+      IF (RES .NE. RES2) CALL ABORT\n+\n+      END PROGRAM"}]}