{"sha": "f2433f89b4dc7b7fb0661d3d5ce50eb6c1d9777c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjI0MzNmODliNGRjN2I3ZmIwNjYxZDNkNWNlNTBlYjZjMWQ5Nzc3Yw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-06-10T15:58:20Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-06-10T15:58:20Z"}, "message": "(objc_set_thread_callback): New function.\n\n(objc_thread_callback): Typedef for the hook function.\n\nFrom-SVN: r12260", "tree": {"sha": "95a5c00e9d74a1fc520a893642990af65c712d13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/95a5c00e9d74a1fc520a893642990af65c712d13"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f2433f89b4dc7b7fb0661d3d5ce50eb6c1d9777c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2433f89b4dc7b7fb0661d3d5ce50eb6c1d9777c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2433f89b4dc7b7fb0661d3d5ce50eb6c1d9777c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2433f89b4dc7b7fb0661d3d5ce50eb6c1d9777c/comments", "author": null, "committer": null, "parents": [{"sha": "8c3f352664c7ad286ae2dcf54e82737827a6d7ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c3f352664c7ad286ae2dcf54e82737827a6d7ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c3f352664c7ad286ae2dcf54e82737827a6d7ba"}], "stats": {"total": 15, "additions": 15, "deletions": 0}, "files": [{"sha": "faf797b6d22e9942444c3dd51af9b343649b6eee", "filename": "gcc/objc/thr.h", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2433f89b4dc7b7fb0661d3d5ce50eb6c1d9777c/gcc%2Fobjc%2Fthr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2433f89b4dc7b7fb0661d3d5ce50eb6c1d9777c/gcc%2Fobjc%2Fthr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fthr.h?ref=f2433f89b4dc7b7fb0661d3d5ce50eb6c1d9777c", "patch": "@@ -75,6 +75,21 @@ _objc_thread_t objc_thread_detach(SEL selector, id object, id argument);\n int     objc_mutex_lock_x(_objc_mutex_t mutex, const char *f, int l);\n int     objc_mutex_unlock_x(_objc_mutex_t mutex, const char *f, int l);\n \n+/*\n+  Use this to set the hook function that will be called when the \n+  runtime initially becomes multi threaded.\n+  The hook function is only called once, meaning only when the \n+  2nd thread is spawned, not for each and every thread.\n+\n+  It returns the previous hook function or NULL if there is none.\n+\n+  A program outside of the runtime could set this to some function so\n+  it can be informed; for example, the GNUstep Base Library sets it \n+  so it can implement the NSBecomingMultiThreaded notification.\n+  */\n+typedef void (*objc_thread_callback)();\n+objc_thread_callback objc_set_thread_callback(objc_thread_callback func);\n+\n /* For debugging of locks, uncomment these two macros: */\n /* #define objc_mutex_lock(x)      objc_mutex_lock_x(x, __FILE__, __LINE__) */\n /* #define objc_mutex_unlock(x)    objc_mutex_unlock_x(x, __FILE__, __LINE__)*/"}]}