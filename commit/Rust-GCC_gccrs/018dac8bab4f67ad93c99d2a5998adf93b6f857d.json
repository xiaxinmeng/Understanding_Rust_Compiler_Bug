{"sha": "018dac8bab4f67ad93c99d2a5998adf93b6f857d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDE4ZGFjOGJhYjRmNjdhZDkzYzk5ZDJhNTk5OGFkZjkzYjZmODU3ZA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-06-29T20:13:22Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-06-29T20:13:22Z"}, "message": "Add new pattern for double-add when have reg + frame pointer.\n\nSlight changes to all such patterns and add define_splits for them.\n\nFrom-SVN: r7608", "tree": {"sha": "176f8207e79872d28048b0ae3d315b5beeff8fc1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/176f8207e79872d28048b0ae3d315b5beeff8fc1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/018dac8bab4f67ad93c99d2a5998adf93b6f857d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/018dac8bab4f67ad93c99d2a5998adf93b6f857d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/018dac8bab4f67ad93c99d2a5998adf93b6f857d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/018dac8bab4f67ad93c99d2a5998adf93b6f857d/comments", "author": null, "committer": null, "parents": [{"sha": "52a692009904344969be2980221773eb1bb98154", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52a692009904344969be2980221773eb1bb98154", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52a692009904344969be2980221773eb1bb98154"}], "stats": {"total": 69, "additions": 64, "deletions": 5}, "files": [{"sha": "b05b93a586eae20911d135bcc5baab8433127d67", "filename": "gcc/config/alpha/alpha.md", "status": "modified", "additions": 64, "deletions": 5, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/018dac8bab4f67ad93c99d2a5998adf93b6f857d/gcc%2Fconfig%2Falpha%2Falpha.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/018dac8bab4f67ad93c99d2a5998adf93b6f857d/gcc%2Fconfig%2Falpha%2Falpha.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.md?ref=018dac8bab4f67ad93c99d2a5998adf93b6f857d", "patch": "@@ -274,38 +274,97 @@\n ;; is the frame pointer.  This is a kludge, but there doesn't\n ;; seem to be a way around it.  Only recognize them while reloading.\n \n+(define_insn \"\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=&r\")\n+\t(plus:DI (plus:DI (match_operand:DI 1 \"register_operand\" \"r\")\n+\t\t\t  (match_operand:DI 2 \"register_operand\" \"r\"))\n+\t\t (match_operand:DI 3 \"add_operand\" \"rIOKL\")))]\n+  \"reload_in_progress\"\n+  \"#\"\n+  [(set_attr \"type\" \"iaddlog\")])\n+\n+(define_split\n+  [(set (match_operand:DI 0 \"register_operand\" \"\")\n+\t(plus:DI (plus:DI (match_operand:DI 1 \"register_operand\" \"\")\n+\t\t\t  (match_operand:DI 2 \"register_operand\" \"\"))\n+\t\t (match_operand:DI 3 \"add_operand\" \"\")))]\n+  \"reload_completed\"\n+  [(set (match_dup 0) (plus:DI (match_dup 1) (match_dup 2)))\n+   (set (match_dup 0) (plus:DI (match_dup 0) (match_dup 3)))]\n+  \"\")\n+\t\t\t\t\t   \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=&r\")\n \t(plus:SI (plus:SI (mult:SI (match_operand:SI 1 \"reg_or_0_operand\" \"rJ\")\n \t\t\t\t   (match_operand:SI 2 \"const48_operand\" \"I\"))\n \t\t\t  (match_operand:SI 3 \"register_operand\" \"r\"))\n-\t\t (match_operand:SI 4 \"const_int_operand\" \"rI\")))]\n+\t\t (match_operand:SI 4 \"add_operand\" \"rIOKL\")))]\n   \"reload_in_progress\"\n-  \"s%2addl %r1,%3,%0\\;addl %0,%4,%0\"\n+  \"#\"\n   [(set_attr \"type\" \"iaddlog\")])\n \n+(define_split\n+  [(set (match_operand:SI 0 \"register_operand\" \"r\")\n+\t(plus:SI (plus:SI (mult:SI (match_operand:SI 1 \"reg_or_0_operand\" \"\")\n+\t\t\t\t   (match_operand:SI 2 \"const48_operand\" \"\"))\n+\t\t\t  (match_operand:SI 3 \"register_operand\" \"\"))\n+\t\t (match_operand:SI 4 \"add_operand\" \"rIOKL\")))]\n+  \"reload_completed\"\n+  [(set (match_dup 0)\n+\t(plus:SI (mult:SI (match_dup 1) (match_dup 2)) (match_dup 3)))\n+   (set (match_dup 0) (plus:SI (match_dup 0) (match_dup 4)))]\n+  \"\")\n+\n (define_insn \"\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=&r\")\n \t(sign_extend:DI\n \t (plus:SI (plus:SI\n \t\t   (mult:SI (match_operand:SI 1 \"reg_or_0_operand\" \"rJ\")\n \t\t\t    (match_operand:SI 2 \"const48_operand\" \"I\"))\n \t\t   (match_operand:SI 3 \"register_operand\" \"r\"))\n-\t\t  (match_operand:SI 4 \"const_int_operand\" \"rI\"))))]\n+\t\t  (match_operand:SI 4 \"add_operand\" \"rIOKL\"))))]\n   \"reload_in_progress\"\n-  \"s%2addl %r1,%3,%0\\;addl %0,%4,%0\"\n+  \"#\"\n   [(set_attr \"type\" \"iaddlog\")])\n \n+(define_split\n+  [(set (match_operand:DI 0 \"register_operand\" \"\")\n+\t(sign_extend:DI\n+\t (plus:SI (plus:SI\n+\t\t   (mult:SI (match_operand:SI 1 \"reg_or_0_operand\" \"\")\n+\t\t\t    (match_operand:SI 2 \"const48_operand\" \"\"))\n+\t\t   (match_operand:SI 3 \"register_operand\" \"\"))\n+\t\t  (match_operand:SI 4 \"add_operand\" \"\"))))]\n+  \"reload_completed\"\n+  [(set (match_dup 5)\n+\t(plus:SI (mult:SI (match_dup 1) (match_dup 2)) (match_dup 3)))\n+   (set (match_dup 0) (sign_extend:DI (plus:SI (match_dup 5) (match_dup 4))))]\n+  \"\n+{ operands[5] = gen_lowpart (SImode, operands[0]);\n+}\")\n+\n (define_insn \"\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=&r\")\n \t(plus:DI (plus:DI (mult:DI (match_operand:DI 1 \"reg_or_0_operand\" \"rJ\")\n \t\t\t\t   (match_operand:DI 2 \"const48_operand\" \"I\"))\n \t\t\t  (match_operand:DI 3 \"register_operand\" \"r\"))\n-\t\t (match_operand:DI 4 \"const_int_operand\" \"rI\")))]\n+\t\t (match_operand:DI 4 \"add_operand\" \"rIOKL\")))]\n   \"reload_in_progress\"\n   \"s%2addq %r1,%3,%0\\;addq %0,%4,%0\"\n   [(set_attr \"type\" \"iaddlog\")])\n \n+(define_split\n+  [(set (match_operand:DI 0 \"register_operand\" \"=\")\n+\t(plus:DI (plus:DI (mult:DI (match_operand:DI 1 \"reg_or_0_operand\" \"\")\n+\t\t\t\t   (match_operand:DI 2 \"const48_operand\" \"\"))\n+\t\t\t  (match_operand:DI 3 \"register_operand\" \"\"))\n+\t\t (match_operand:DI 4 \"add_operand\" \"\")))]\n+  \"reload_completed\"\n+  [(set (match_dup 0)\n+\t(plus:DI (mult:DI (match_dup 1) (match_dup 2)) (match_dup 3)))\n+   (set (match_dup 0) (plus:DI (match_dup 0) (match_dup 4)))]\n+  \"\")\n+\n (define_insn \"negsi2\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(neg:SI (match_operand:SI 1 \"reg_or_8bit_operand\" \"rI\")))]"}]}