{"sha": "43c058162f9ee10a3149b502aa4c76f668b64e34", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDNjMDU4MTYyZjllZTEwYTMxNDliNTAyYWE0Yzc2ZjY2OGI2NGUzNA==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "avr@gjlay.de", "date": "2016-11-28T08:40:11Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2016-11-28T08:40:11Z"}, "message": "re PR target/41076 ([avr] pessimal code for logical OR of 8-bit fields)\n\n\tPR 41076\n\t* config/avr/avr.md (SPLIT34): New mode iterator.\n\t(bitop): New code iterator.\n\t(*iorhi3.ashift8-*). New insn-and-split patterns.\n\t(*movhi): Post-reload split reg = 0.\n\t[!MOVW]: Post-reload split reg = reg.\n\t(*mov<mode>) [SI,SF,PSI,SQ,USQ,SA,USA]: Post-reload split reg = reg.\n\t(andhi3, andpsi3, andsi3): Post-reload split reg-reg operations.\n\t(iorhi3, iorpsi3, iorsi3): Same.\n\t(xorhi3, xorpsi3, xorsi3): Same.\n\t* config/avr/avr.c (avr_rtx_costs_1) [IOR && HImode]: Adjust rtx\n\tcosts to *iorhi3.ashift8-* patterns.\n\nFrom-SVN: r242907", "tree": {"sha": "513e93a07159bf6308469a8636ca791b6589140c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/513e93a07159bf6308469a8636ca791b6589140c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/43c058162f9ee10a3149b502aa4c76f668b64e34", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43c058162f9ee10a3149b502aa4c76f668b64e34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43c058162f9ee10a3149b502aa4c76f668b64e34", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43c058162f9ee10a3149b502aa4c76f668b64e34/comments", "author": null, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9438bbb2e36eea2a61d09ee268704aff4f15d81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9438bbb2e36eea2a61d09ee268704aff4f15d81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9438bbb2e36eea2a61d09ee268704aff4f15d81"}], "stats": {"total": 172, "additions": 171, "deletions": 1}, "files": [{"sha": "44ba41e74cc23a7b544278366dd24f100bfa03db", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43c058162f9ee10a3149b502aa4c76f668b64e34/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43c058162f9ee10a3149b502aa4c76f668b64e34/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=43c058162f9ee10a3149b502aa4c76f668b64e34", "patch": "@@ -1,3 +1,18 @@\n+2016-11-28  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\tPR 41076\n+\t* config/avr/avr.md (SPLIT34): New mode iterator.\n+\t(bitop): New code iterator.\n+\t(*iorhi3.ashift8-*). New insn-and-split patterns.\n+\t(*movhi): Post-reload split reg = 0.\n+\t[!MOVW]: Post-reload split reg = reg.\n+\t(*mov<mode>) [SI,SF,PSI,SQ,USQ,SA,USA]: Post-reload split reg = reg.\n+\t(andhi3, andpsi3, andsi3): Post-reload split reg-reg operations.\n+\t(iorhi3, iorpsi3, iorsi3): Same.\n+\t(xorhi3, xorpsi3, xorsi3): Same.\n+\t* config/avr/avr.c (avr_rtx_costs_1) [IOR && HImode]: Adjust rtx\n+\tcosts to *iorhi3.ashift8-* patterns.\n+\n 2016-11-27  Iain Sandoe  <iain@codesourcery.com>\n \t    Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n "}, {"sha": "ba00147c5fd1a9a104e668e374a74378407175b6", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43c058162f9ee10a3149b502aa4c76f668b64e34/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43c058162f9ee10a3149b502aa4c76f668b64e34/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=43c058162f9ee10a3149b502aa4c76f668b64e34", "patch": "@@ -10645,6 +10645,19 @@ avr_rtx_costs_1 (rtx x, machine_mode mode, int outer_code ATTRIBUTE_UNUSED,\n       /* FALLTHRU */\n     case AND:\n     case IOR:\n+      if (IOR == code\n+          && HImode == mode\n+          && ASHIFT == GET_CODE (XEXP (x, 0)))\n+        {\n+          *total = COSTS_N_INSNS (2);\n+          // Just a rough estimate.  If we see no sign- or zero-extend,\n+          // then increase the cost a little bit.\n+          if (REG_P (XEXP (XEXP (x, 0), 0)))\n+            *total += COSTS_N_INSNS (1);\n+          if (REG_P (XEXP (x, 1)))\n+            *total += COSTS_N_INSNS (1);\n+          return true;\n+        }\n       *total = COSTS_N_INSNS (GET_MODE_SIZE (mode));\n       *total += avr_operand_rtx_cost (XEXP (x, 0), mode, code, 0, speed);\n       if (!CONST_INT_P (XEXP (x, 1)))"}, {"sha": "df111efdc633ac0b81493882450e33a25eec2f00", "filename": "gcc/config/avr/avr.md", "status": "modified", "additions": 143, "deletions": 1, "changes": 144, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43c058162f9ee10a3149b502aa4c76f668b64e34/gcc%2Fconfig%2Favr%2Favr.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43c058162f9ee10a3149b502aa4c76f668b64e34/gcc%2Fconfig%2Favr%2Favr.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.md?ref=43c058162f9ee10a3149b502aa4c76f668b64e34", "patch": "@@ -260,13 +260,18 @@\n                                   HQ UHQ HA UHA\n                                   SQ USQ SA USA])\n \n+;; Post-reload split of 3, 4 bytes wide moves.\n+(define_mode_iterator SPLIT34 [SI SF PSI\n+                               SQ USQ SA USA])\n+\n ;; Define code iterators\n ;; Define two incarnations so that we can build the cross product.\n (define_code_iterator any_extend  [sign_extend zero_extend])\n (define_code_iterator any_extend2 [sign_extend zero_extend])\n (define_code_iterator any_extract [sign_extract zero_extract])\n (define_code_iterator any_shiftrt [lshiftrt ashiftrt])\n \n+(define_code_iterator bitop [xor ior and])\n (define_code_iterator xior [xor ior])\n (define_code_iterator eqne [eq ne])\n \n@@ -3328,6 +3333,66 @@\n    (set_attr \"adjust_len\" \"*,out_bitop,out_bitop\")\n    (set_attr \"cc\" \"set_n,clobber,clobber\")])\n \n+\n+(define_split\n+  [(set (match_operand:SPLIT34 0 \"register_operand\")\n+        (match_operand:SPLIT34 1 \"register_operand\"))]\n+  \"optimize\n+   && reload_completed\"\n+  [(set (match_dup 2) (match_dup 3))\n+   (set (match_dup 4) (match_dup 5))]\n+  {\n+    machine_mode mode_hi = 4 == GET_MODE_SIZE (<MODE>mode) ? HImode : QImode;\n+    bool lo_first = REGNO (operands[0]) < REGNO (operands[1]);\n+    rtx dst_lo = simplify_gen_subreg (HImode, operands[0], <MODE>mode, 0);\n+    rtx src_lo = simplify_gen_subreg (HImode, operands[1], <MODE>mode, 0);\n+    rtx dst_hi = simplify_gen_subreg (mode_hi, operands[0], <MODE>mode, 2);\n+    rtx src_hi = simplify_gen_subreg (mode_hi, operands[1], <MODE>mode, 2);\n+\n+    operands[2] = lo_first ? dst_lo : dst_hi;\n+    operands[3] = lo_first ? src_lo : src_hi;\n+    operands[4] = lo_first ? dst_hi : dst_lo;\n+    operands[5] = lo_first ? src_hi : src_lo;\n+  })\n+  \n+(define_split\n+  [(set (match_operand:HI 0 \"register_operand\")\n+        (match_operand:HI 1 \"reg_or_0_operand\"))]\n+  \"optimize\n+   && reload_completed\n+   && (!AVR_HAVE_MOVW\n+       || const0_rtx == operands[1])\"\n+  [(set (match_dup 2) (match_dup 3))\n+   (set (match_dup 4) (match_dup 5))]\n+  {\n+    operands[2] = simplify_gen_subreg (QImode, operands[0], HImode, 1);\n+    operands[3] = simplify_gen_subreg (QImode, operands[1], HImode, 1);\n+    operands[4] = simplify_gen_subreg (QImode, operands[0], HImode, 0);\n+    operands[5] = simplify_gen_subreg (QImode, operands[1], HImode, 0);\n+  })\n+\n+;; Split andhi3, andpsi3, andsi3.\n+;; Split iorhi3, iorpsi3, iorsi3.\n+;; Split xorhi3, xorpsi3, xorsi3.\n+(define_split\n+  [(parallel [(set (match_operand:HISI 0 \"register_operand\")\n+                   (bitop:HISI (match_dup 0)\n+                               (match_operand:HISI 1 \"register_operand\")))\n+              (clobber (scratch:QI))])]\n+  \"optimize\n+   && reload_completed\"\n+  [(const_int 1)]\n+  {\n+    for (int i = 0; i < GET_MODE_SIZE (<MODE>mode); i++)\n+      {\n+        rtx dst = simplify_gen_subreg (QImode, operands[0], <MODE>mode, i);\n+        rtx src = simplify_gen_subreg (QImode, operands[1], <MODE>mode, i);\n+        emit_insn (gen_<code>qi3 (dst, dst, src));\n+      }\n+    DONE;\n+  })\n+\n+\n ;; swap swap swap swap swap swap swap swap swap swap swap swap swap swap swap\n ;; swap\n \n@@ -6696,6 +6761,84 @@\n     operands[4] = simplify_gen_subreg (QImode, operands[0], <MODE>mode, byteno);\n   })\n \n+\n+(define_insn_and_split \"*iorhi3.ashift8-ext.zerox\"\n+  [(set (match_operand:HI 0 \"register_operand\"                        \"=r\")\n+        (ior:HI (ashift:HI (any_extend:HI\n+                            (match_operand:QI 1 \"register_operand\"     \"r\"))\n+                           (const_int 8))\n+                (zero_extend:HI (match_operand:QI 2 \"register_operand\" \"r\"))))]\n+  \"optimize\"\n+  { gcc_unreachable(); }\n+  \"&& reload_completed\"\n+  [(set (match_dup 1) (xor:QI (match_dup 1) (match_dup 2)))\n+   (set (match_dup 2) (xor:QI (match_dup 2) (match_dup 1)))\n+   (set (match_dup 1) (xor:QI (match_dup 1) (match_dup 2)))]\n+  {\n+    rtx hi = simplify_gen_subreg (QImode, operands[0], HImode, 1);\n+    rtx lo = simplify_gen_subreg (QImode, operands[0], HImode, 0);\n+\n+    if (!reg_overlap_mentioned_p (hi, operands[2]))\n+      {\n+        emit_move_insn (hi, operands[1]);\n+        emit_move_insn (lo, operands[2]);\n+        DONE;\n+      }\n+    else if (!reg_overlap_mentioned_p (lo, operands[1]))\n+      {\n+        emit_move_insn (lo, operands[2]);\n+        emit_move_insn (hi, operands[1]);\n+        DONE;\n+      }\n+\n+    gcc_assert (REGNO (operands[1]) == REGNO (operands[0]));\n+    gcc_assert (REGNO (operands[2]) == 1 + REGNO (operands[0]));\n+  })\n+\n+(define_insn_and_split \"*iorhi3.ashift8-ext.reg\"\n+  [(set (match_operand:HI 0 \"register_operand\"                    \"=r\")\n+        (ior:HI (ashift:HI (any_extend:HI\n+                            (match_operand:QI 1 \"register_operand\" \"r\"))\n+                           (const_int 8))\n+                (match_operand:HI 2 \"register_operand\"             \"0\")))]\n+  \"optimize\"\n+  { gcc_unreachable(); }\n+  \"&& reload_completed\"\n+  [(set (match_dup 3)\n+        (ior:QI (match_dup 4)\n+                (match_dup 1)))]\n+  {\n+    operands[3] = simplify_gen_subreg (QImode, operands[0], HImode, 1);\n+    operands[4] = simplify_gen_subreg (QImode, operands[2], HImode, 1);\n+  })\n+\n+(define_insn_and_split \"*iorhi3.ashift8-reg.zerox\"\n+  [(set (match_operand:HI 0 \"register_operand\"                        \"=r\")\n+        (ior:HI (ashift:HI (match_operand:HI 1 \"register_operand\"      \"r\")\n+                           (const_int 8))\n+                (zero_extend:HI (match_operand:QI 2 \"register_operand\" \"0\"))))]\n+  \"optimize\"\n+  { gcc_unreachable(); }\n+  \"&& reload_completed\"\n+  [(set (match_dup 3)\n+        (match_dup 4))]\n+  {\n+    operands[3] = simplify_gen_subreg (QImode, operands[0], HImode, 1);\n+    operands[4] = simplify_gen_subreg (QImode, operands[1], HImode, 0);\n+  })\n+\n+\n+(define_peephole2\n+  [(set (match_operand:QI 0 \"register_operand\")\n+        (const_int 0))\n+   (set (match_dup 0)\n+        (ior:QI (match_dup 0)\n+                (match_operand:QI 1 \"register_operand\")))]\n+  \"\"\n+  [(set (match_dup 0)\n+        (match_dup 1))])\n+\n+\n (define_expand \"extzv\"\n   [(set (match_operand:QI 0 \"register_operand\" \"\")\n         (zero_extract:QI (match_operand:QI 1 \"register_operand\"  \"\")\n@@ -6778,7 +6921,6 @@\n     operands[4] = GEN_INT (bitno % 8);\n   })\n \n-                                        \n \f\n ;; Fixed-point instructions\n (include \"avr-fixed.md\")"}]}