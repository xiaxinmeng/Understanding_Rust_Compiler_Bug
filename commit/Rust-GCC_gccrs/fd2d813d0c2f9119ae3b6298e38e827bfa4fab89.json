{"sha": "fd2d813d0c2f9119ae3b6298e38e827bfa4fab89", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmQyZDgxM2QwYzJmOTExOWFlM2I2Mjk4ZTM4ZTgyN2JmYTRmYWI4OQ==", "commit": {"author": {"name": "Tobias Grosser", "email": "grosser@fim.uni-passau.de", "date": "2009-11-30T22:07:38Z"}, "committer": {"name": "Tobias Grosser", "email": "grosser@gcc.gnu.org", "date": "2009-11-30T22:07:38Z"}, "message": "Remove context_loop and level from translate_clast_* methods.\n\n2009-11-23  Tobias Grosser  <grosser@fim.uni-passau.de>\n\n\t* graphite-clast-to-gimple.c (try_mark_loop_parallel): New.\n\t(translate_clast_for, translate_clast_guard, translate_clast, gloog):\n\tRemove context_loop and level.\n\nFrom-SVN: r154848", "tree": {"sha": "d0329c492faf962488d85f9b69d30014efa3f716", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d0329c492faf962488d85f9b69d30014efa3f716"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fd2d813d0c2f9119ae3b6298e38e827bfa4fab89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd2d813d0c2f9119ae3b6298e38e827bfa4fab89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd2d813d0c2f9119ae3b6298e38e827bfa4fab89", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd2d813d0c2f9119ae3b6298e38e827bfa4fab89/comments", "author": {"login": "tobiasgrosser", "id": 521960, "node_id": "MDQ6VXNlcjUyMTk2MA==", "avatar_url": "https://avatars.githubusercontent.com/u/521960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tobiasgrosser", "html_url": "https://github.com/tobiasgrosser", "followers_url": "https://api.github.com/users/tobiasgrosser/followers", "following_url": "https://api.github.com/users/tobiasgrosser/following{/other_user}", "gists_url": "https://api.github.com/users/tobiasgrosser/gists{/gist_id}", "starred_url": "https://api.github.com/users/tobiasgrosser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tobiasgrosser/subscriptions", "organizations_url": "https://api.github.com/users/tobiasgrosser/orgs", "repos_url": "https://api.github.com/users/tobiasgrosser/repos", "events_url": "https://api.github.com/users/tobiasgrosser/events{/privacy}", "received_events_url": "https://api.github.com/users/tobiasgrosser/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9016166fb6f03fad09e388a05ca0746f3ffaa952", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9016166fb6f03fad09e388a05ca0746f3ffaa952", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9016166fb6f03fad09e388a05ca0746f3ffaa952"}], "stats": {"total": 113, "additions": 56, "deletions": 57}, "files": [{"sha": "c705cbd690a8960138b6fd6898d88133d3645afc", "filename": "gcc/ChangeLog.graphite", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd2d813d0c2f9119ae3b6298e38e827bfa4fab89/gcc%2FChangeLog.graphite", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd2d813d0c2f9119ae3b6298e38e827bfa4fab89/gcc%2FChangeLog.graphite", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.graphite?ref=fd2d813d0c2f9119ae3b6298e38e827bfa4fab89", "patch": "@@ -1,3 +1,9 @@\n+2009-11-23  Tobias Grosser  <grosser@fim.uni-passau.de>\n+\n+\t* graphite-clast-to-gimple.c (try_mark_loop_parallel): New.\n+\t(translate_clast_for, translate_clast_guard, translate_clast, gloog):\n+\tRemove context_loop and level.\n+\n 2009-11-23  Tobias Grosser  <grosser@fim.uni-passau.de>\n \n \t* graphite-clast-to-gimple.c (translate_clast_user,"}, {"sha": "4f45708e94bd4cac3017ec3c170ee002cab3cd47", "filename": "gcc/graphite-clast-to-gimple.c", "status": "modified", "additions": 50, "deletions": 57, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd2d813d0c2f9119ae3b6298e38e827bfa4fab89/gcc%2Fgraphite-clast-to-gimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd2d813d0c2f9119ae3b6298e38e827bfa4fab89/gcc%2Fgraphite-clast-to-gimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-clast-to-gimple.c?ref=fd2d813d0c2f9119ae3b6298e38e827bfa4fab89", "patch": "@@ -719,14 +719,13 @@ dependency_in_loop_p (loop_p loop, htab_t bb_pbb_mapping, int level)\n }\n \n static edge\n-translate_clast (sese, loop_p, struct clast_stmt *, edge, htab_t,\n-\t\t VEC (tree, heap) **, htab_t, htab_t, int, htab_t);\n+translate_clast (sese, struct clast_stmt *, edge, htab_t, VEC (tree, heap) **,\n+\t\t htab_t, htab_t, htab_t);\n \n /* Translates a clast user statement STMT to gimple.\n \n    - REGION is the sese region we used to generate the scop.\n    - NEXT_E is the edge where new generated code should be attached.\n-   - CONTEXT_LOOP is the loop in which the generated code will be placed\n    - RENAME_MAP contains a set of tuples of new names associated to\n      the original variables names.\n    - BB_PBB_MAPPING is is a basic_block and it's related poly_bb_p mapping.\n@@ -738,10 +737,8 @@ translate_clast_user (sese region, struct clast_user_stmt *stmt, edge next_e,\n \t\t      htab_t newivs_index, htab_t bb_pbb_mapping,\n \t\t      htab_t params_index)\n {\n-  gimple_bb_p gbb;\n-  basic_block new_bb;\n   poly_bb_p pbb = (poly_bb_p) cloog_statement_usr (stmt->statement);\n-  gbb = PBB_BLACK_BOX (pbb);\n+  gimple_bb_p gbb = PBB_BLACK_BOX (pbb);\n \n   if (GBB_BB (gbb) == ENTRY_BLOCK_PTR)\n     return next_e;\n@@ -750,53 +747,57 @@ translate_clast_user (sese region, struct clast_user_stmt *stmt, edge next_e,\n \t\t    params_index);\n   next_e = copy_bb_and_scalar_dependences (GBB_BB (gbb), region,\n \t\t\t\t\t   next_e, rename_map);\n-  new_bb = next_e->src;\n-  mark_bb_with_pbb (pbb, new_bb, bb_pbb_mapping);\n+  mark_bb_with_pbb (pbb, next_e->src, bb_pbb_mapping);\n   update_ssa (TODO_update_ssa);\n+\n   return next_e;\n }\n \n+/* Mark a loop parallel, if the graphite dependency check cannot find any\n+ * dependencies.  This triggers parallel code generation in the autopar pass.\n+ * */\n+static void\n+try_mark_loop_parallel (sese region, loop_p loop, htab_t bb_pbb_mapping)\n+{\n+  loop_p outermost_loop =  SESE_ENTRY (region)->src->loop_father;\n+  int level = loop_depth (loop) - loop_depth (outermost_loop);\n+\n+  if (flag_loop_parallelize_all\n+      && !dependency_in_loop_p (loop, bb_pbb_mapping,\n+\tget_scattering_level (level)))\n+    loop->can_be_parallel = true;\n+}\n+\n+\n /* Translates a clast for statement STMT to gimple.\n \n    - REGION is the sese region we used to generate the scop.\n    - NEXT_E is the edge where new generated code should be attached.\n-   - CONTEXT_LOOP is the loop in which the generated code will be placed\n    - RENAME_MAP contains a set of tuples of new names associated to\n      the original variables names.\n    - BB_PBB_MAPPING is is a basic_block and it's related poly_bb_p mapping.\n    - PARAMS_INDEX connects the cloog parameters with the gimple parameters in\n      the sese region.  */\n static edge\n-translate_clast_for (sese region, loop_p context_loop, struct clast_for *stmt,\n-\t\t     edge next_e, htab_t rename_map, VEC (tree, heap) **newivs,\n-\t\t     htab_t newivs_index, htab_t bb_pbb_mapping, int level,\n+translate_clast_for (sese region, struct clast_for *stmt, edge next_e,\n+\t\t     htab_t rename_map, VEC (tree, heap) **newivs,\n+\t\t     htab_t newivs_index, htab_t bb_pbb_mapping,\n \t\t     htab_t params_index)\n {\n-  struct loop *loop = graphite_create_new_loop (region, next_e, stmt,\n-\t\t\t\t\t\tcontext_loop, newivs,\n-\t\t\t\t\t\tnewivs_index, params_index);\n+  loop_p context_loop = next_e->dest->loop_father;\n+  loop_p loop = graphite_create_new_loop (region, next_e, stmt, context_loop,\n+\t\t\t\t\t  newivs, newivs_index, params_index);\n   edge last_e = single_exit (loop);\n-  edge to_body = single_succ_edge (loop->header);\n-  basic_block after = to_body->dest;\n+  edge body = single_succ_edge (loop->header);\n+\n+  next_e = translate_clast (region, stmt->body, body, rename_map, newivs,\n+\t\t\t    newivs_index, bb_pbb_mapping, params_index);\n \n   /* Create a basic block for loop close phi nodes.  */\n   last_e = single_succ_edge (split_edge (last_e));\n-\n-  /* Translate the body of the loop.  */\n-  next_e = translate_clast (region, loop, stmt->body, to_body, rename_map,\n-\t\t\t    newivs, newivs_index, bb_pbb_mapping, level + 1,\n-\t\t\t    params_index);\n-  redirect_edge_succ_nodup (next_e, after);\n-  set_immediate_dominator (CDI_DOMINATORS, next_e->dest, next_e->src);\n-\n-  /* Remove from rename_map all the tuples containing variables\n-     defined in loop's body.  */\n   insert_loop_close_phis (rename_map, loop);\n \n-  if (flag_loop_parallelize_all\n-      && !dependency_in_loop_p (loop, bb_pbb_mapping,\n-\t\t\t\tget_scattering_level (level)))\n-    loop->can_be_parallel = true;\n+  try_mark_loop_parallel (region, loop, bb_pbb_mapping);\n \n   return last_e;\n }\n@@ -805,17 +806,15 @@ translate_clast_for (sese region, loop_p context_loop, struct clast_for *stmt,\n \n    - REGION is the sese region we used to generate the scop.\n    - NEXT_E is the edge where new generated code should be attached.\n-   - CONTEXT_LOOP is the loop in which the generated code will be placed\n    - RENAME_MAP contains a set of tuples of new names associated to\n      the original variables names.\n    - BB_PBB_MAPPING is is a basic_block and it's related poly_bb_p mapping.\n    - PARAMS_INDEX connects the cloog parameters with the gimple parameters in\n      the sese region.  */\n static edge\n-translate_clast_guard (sese region, loop_p context_loop,\n-\t\t       struct clast_guard *stmt, edge next_e,\n+translate_clast_guard (sese region, struct clast_guard *stmt, edge next_e,\n \t\t       htab_t rename_map, VEC (tree, heap) **newivs,\n-\t\t       htab_t newivs_index, htab_t bb_pbb_mapping, int level,\n+\t\t       htab_t newivs_index, htab_t bb_pbb_mapping,\n \t\t       htab_t params_index)\n {\n   edge last_e = graphite_create_new_guard (region, next_e, stmt, *newivs,\n@@ -830,9 +829,9 @@ translate_clast_guard (sese region, loop_p context_loop,\n \t\t\t\t     eq_rename_map_elts, free);\n   htab_traverse (rename_map, copy_renames, before_guard);\n \n-  next_e = translate_clast (region, context_loop, stmt->then, true_e,\n+  next_e = translate_clast (region, stmt->then, true_e,\n \t\t\t    rename_map, newivs, newivs_index, bb_pbb_mapping,\n-\t\t\t    level, params_index);\n+\t\t\t    params_index);\n \n   insert_guard_phis (last_e->src, exit_true_e, exit_false_e,\n \t\t     before_guard, rename_map);\n@@ -846,14 +845,13 @@ translate_clast_guard (sese region, loop_p context_loop,\n    context of a SESE.\n \n    - NEXT_E is the edge where new generated code should be attached.\n-   - CONTEXT_LOOP is the loop in which the generated code will be placed\n    - RENAME_MAP contains a set of tuples of new names associated to\n      the original variables names.\n    - BB_PBB_MAPPING is is a basic_block and it's related poly_bb_p mapping.  */\n static edge\n-translate_clast (sese region, loop_p context_loop, struct clast_stmt *stmt,\n+translate_clast (sese region, struct clast_stmt *stmt,\n \t\t edge next_e, htab_t rename_map, VEC (tree, heap) **newivs,\n-\t\t htab_t newivs_index, htab_t bb_pbb_mapping, int level,\n+\t\t htab_t newivs_index, htab_t bb_pbb_mapping, \n \t\t htab_t params_index)\n {\n   if (!stmt)\n@@ -868,31 +866,28 @@ translate_clast (sese region, loop_p context_loop, struct clast_stmt *stmt,\n \t\t\t\t   bb_pbb_mapping, params_index);\n \n   else if (CLAST_STMT_IS_A (stmt, stmt_for))\n-    next_e = translate_clast_for (region, context_loop,\n-\t\t\t\t  (struct clast_for *) stmt, next_e,\n-\t\t\t\t  rename_map, newivs, newivs_index,\n-\t\t\t\t  bb_pbb_mapping, level, params_index);\n+    next_e = translate_clast_for (region,\n+\t\t\t\t  (struct clast_for *) stmt, next_e, rename_map,\n+\t\t\t\t  newivs, newivs_index, bb_pbb_mapping,\n+\t\t\t\t  params_index);\n \n   else if (CLAST_STMT_IS_A (stmt, stmt_guard))\n-    next_e = translate_clast_guard (region, context_loop,\n-\t\t\t\t    (struct clast_guard *) stmt, next_e,\n+    next_e = translate_clast_guard (region, (struct clast_guard *) stmt, next_e,\n \t\t\t\t    rename_map, newivs, newivs_index,\n-\t\t\t\t    bb_pbb_mapping, level, params_index);\n+\t\t\t\t    bb_pbb_mapping, params_index);\n \n   else if (CLAST_STMT_IS_A (stmt, stmt_block))\n-    next_e = translate_clast (region, context_loop,\n-\t\t\t      ((struct clast_block *) stmt)->body,\n+    next_e = translate_clast (region, ((struct clast_block *) stmt)->body,\n \t\t\t      next_e, rename_map, newivs, newivs_index,\n-\t\t\t      bb_pbb_mapping, level, params_index);\n+\t\t\t      bb_pbb_mapping, params_index);\n   else\n     gcc_unreachable();\n \n   recompute_all_dominators ();\n   graphite_verify ();\n \n-  return translate_clast (region, context_loop, stmt->next, next_e,\n-\t\t\t  rename_map, newivs, newivs_index,\n-\t\t\t  bb_pbb_mapping, level, params_index);\n+  return translate_clast (region, stmt->next, next_e, rename_map, newivs,\n+\t\t\t  newivs_index, bb_pbb_mapping, params_index);\n }\n \n /* Returns the first cloog name used in EXPR.  */\n@@ -1336,7 +1331,6 @@ gloog (scop_p scop, htab_t bb_pbb_mapping)\n {\n   edge new_scop_exit_edge = NULL;\n   VEC (tree, heap) *newivs = VEC_alloc (tree, heap, 10);\n-  loop_p context_loop;\n   sese region = SCOP_REGION (scop);\n   ifsese if_region = NULL;\n   htab_t rename_map, newivs_index, params_index;\n@@ -1364,7 +1358,6 @@ gloog (scop_p scop, htab_t bb_pbb_mapping)\n   recompute_all_dominators ();\n   graphite_verify ();\n \n-  context_loop = SESE_ENTRY (region)->src->loop_father;\n   compute_cloog_iv_types (pc.stmt);\n   rename_map = htab_create (10, rename_map_elt_info, eq_rename_map_elts, free);\n   newivs_index = htab_create (10, clast_name_index_elt_info,\n@@ -1374,10 +1367,10 @@ gloog (scop_p scop, htab_t bb_pbb_mapping)\n \n   create_params_index (params_index, pc.prog);\n \n-  new_scop_exit_edge = translate_clast (region, context_loop, pc.stmt,\n+  new_scop_exit_edge = translate_clast (region, pc.stmt,\n \t\t\t\t\tif_region->true_region->entry,\n \t\t\t\t\trename_map, &newivs, newivs_index,\n-\t\t\t\t\tbb_pbb_mapping, 1, params_index);\n+\t\t\t\t\tbb_pbb_mapping, params_index);\n   graphite_verify ();\n   sese_adjust_liveout_phis (region, rename_map,\n \t\t\t    if_region->region->exit->src,"}]}