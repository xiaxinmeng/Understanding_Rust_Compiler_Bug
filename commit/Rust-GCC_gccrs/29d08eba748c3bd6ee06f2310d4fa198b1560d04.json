{"sha": "29d08eba748c3bd6ee06f2310d4fa198b1560d04", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjlkMDhlYmE3NDhjM2JkNmVlMDZmMjMxMGQ0ZmExOThiMTU2MGQwNA==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2009-05-10T10:29:35Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2009-05-10T10:29:35Z"}, "message": "arc.c (arc_handle_interrupt_attribute): Use %qE for identifiers in diagnostics.\n\n\t* config/arc/arc.c (arc_handle_interrupt_attribute): Use %qE for\n\tidentifiers in diagnostics.\n\t* config/arm/arm.c (arm_handle_fndecl_attribute,\n\tarm_handle_isr_attribute): Likewise.\n\t* config/avr/avr.c (avr_handle_progmem_attribute,\n\tavr_handle_fndecl_attribute, avr_handle_fntype_attribute):\n\tLikewise.\n\t* config/bfin/bfin.c (handle_int_attribute,\n\tbfin_handle_longcall_attribute, bfin_handle_l1_text_attribute,\n\tbfin_handle_l1_data_attribute, bfin_handle_longcall_attribute,\n\tbfin_handle_l1_text_attribute, bfin_handle_l1_data_attribute):\n\tLikewise.\n\t* config/darwin.c (darwin_handle_kext_attribute,\n\tdarwin_handle_weak_import_attribute): Likewise.\n\t* config/h8300/h8300.c (h8300_handle_fndecl_attribute,\n\th8300_handle_eightbit_data_attribute,\n\th8300_handle_tiny_data_attribute): Likewise.\n\t* config/i386/i386.c (ix86_handle_cconv_attribute,\n\tix86_handle_abi_attribute, ix86_handle_struct_attribute):\n\tLikewise.\n\t* config/i386/winnt.c (ix86_handle_shared_attribute,\n\tix86_handle_selectany_attribute): Likewise.\n\t* config/ia64/ia64.c (ia64_handle_model_attribute): Likewise.\n\t* config/m32c/m32c.c (function_vector_handler): Likewise.\n\t* config/m68hc11/m68hc11.c (m68hc11_handle_page0_attribute,\n\tm68hc11_handle_fntype_attribute): Likewise.\n\t* config/m68k/m68k.c (m68k_handle_fndecl_attribute): Likewise.\n\t* config/mcore/mcore.c (mcore_handle_naked_attribute): Likewise.\n\t* config/mips/mips.c (mips_insert_attributes,\n\tmips_merge_decl_attributes, mips_expand_builtin): Likewise.\n\t* config/rs6000/rs6000.c (rs6000_handle_longcall_attribute,\n\trs6000_handle_struct_attribute): Likewise.\n\t* config/sh/sh.c (sh_insert_attributes,\n\tsh_handle_resbank_handler_attribute,\n\tsh_handle_interrupt_handler_attribute,\n\tsh2a_handle_function_vector_handler_attribute,\n\tsh_handle_sp_switch_attribute, sh_handle_trap_exit_attribute):\n\tLikewise.\n\t* config/sh/symbian.c (sh_symbian_mark_dllimport): Likewise.\n\t* config/spu/spu.c (spu_handle_fndecl_attribute,\n\tspu_handle_vector_attribute): Likewise.\n\t* config/stormy16/stormy16.c\n\t(xstormy16_handle_interrupt_attribute): Likewise.\n\t* config/v850/v850-c.c (ghs_pragma_section): Likewise.\n\t* config/v850/v850.c (v850_handle_interrupt_attribute): Likewise.\n\nFrom-SVN: r147334", "tree": {"sha": "a9f4b3d8587f427959635e485e41739d8c6d6c2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a9f4b3d8587f427959635e485e41739d8c6d6c2e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/29d08eba748c3bd6ee06f2310d4fa198b1560d04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29d08eba748c3bd6ee06f2310d4fa198b1560d04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29d08eba748c3bd6ee06f2310d4fa198b1560d04", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29d08eba748c3bd6ee06f2310d4fa198b1560d04/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f41c4af3d6936f7153b65c23ba80c81f7f8c518e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f41c4af3d6936f7153b65c23ba80c81f7f8c518e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f41c4af3d6936f7153b65c23ba80c81f7f8c518e"}], "stats": {"total": 336, "additions": 194, "deletions": 142}, "files": [{"sha": "687757cbb844fd82a1aee20d0f33082ccf733dc8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29d08eba748c3bd6ee06f2310d4fa198b1560d04/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29d08eba748c3bd6ee06f2310d4fa198b1560d04/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=29d08eba748c3bd6ee06f2310d4fa198b1560d04", "patch": "@@ -1,3 +1,51 @@\n+2009-05-10  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* config/arc/arc.c (arc_handle_interrupt_attribute): Use %qE for\n+\tidentifiers in diagnostics.\n+\t* config/arm/arm.c (arm_handle_fndecl_attribute,\n+\tarm_handle_isr_attribute): Likewise.\n+\t* config/avr/avr.c (avr_handle_progmem_attribute,\n+\tavr_handle_fndecl_attribute, avr_handle_fntype_attribute):\n+\tLikewise.\n+\t* config/bfin/bfin.c (handle_int_attribute,\n+\tbfin_handle_longcall_attribute, bfin_handle_l1_text_attribute,\n+\tbfin_handle_l1_data_attribute, bfin_handle_longcall_attribute,\n+\tbfin_handle_l1_text_attribute, bfin_handle_l1_data_attribute):\n+\tLikewise.\n+\t* config/darwin.c (darwin_handle_kext_attribute,\n+\tdarwin_handle_weak_import_attribute): Likewise.\n+\t* config/h8300/h8300.c (h8300_handle_fndecl_attribute,\n+\th8300_handle_eightbit_data_attribute,\n+\th8300_handle_tiny_data_attribute): Likewise.\n+\t* config/i386/i386.c (ix86_handle_cconv_attribute,\n+\tix86_handle_abi_attribute, ix86_handle_struct_attribute):\n+\tLikewise.\n+\t* config/i386/winnt.c (ix86_handle_shared_attribute,\n+\tix86_handle_selectany_attribute): Likewise.\n+\t* config/ia64/ia64.c (ia64_handle_model_attribute): Likewise.\n+\t* config/m32c/m32c.c (function_vector_handler): Likewise.\n+\t* config/m68hc11/m68hc11.c (m68hc11_handle_page0_attribute,\n+\tm68hc11_handle_fntype_attribute): Likewise.\n+\t* config/m68k/m68k.c (m68k_handle_fndecl_attribute): Likewise.\n+\t* config/mcore/mcore.c (mcore_handle_naked_attribute): Likewise.\n+\t* config/mips/mips.c (mips_insert_attributes,\n+\tmips_merge_decl_attributes, mips_expand_builtin): Likewise.\n+\t* config/rs6000/rs6000.c (rs6000_handle_longcall_attribute,\n+\trs6000_handle_struct_attribute): Likewise.\n+\t* config/sh/sh.c (sh_insert_attributes,\n+\tsh_handle_resbank_handler_attribute,\n+\tsh_handle_interrupt_handler_attribute,\n+\tsh2a_handle_function_vector_handler_attribute,\n+\tsh_handle_sp_switch_attribute, sh_handle_trap_exit_attribute):\n+\tLikewise.\n+\t* config/sh/symbian.c (sh_symbian_mark_dllimport): Likewise.\n+\t* config/spu/spu.c (spu_handle_fndecl_attribute,\n+\tspu_handle_vector_attribute): Likewise.\n+\t* config/stormy16/stormy16.c\n+\t(xstormy16_handle_interrupt_attribute): Likewise.\n+\t* config/v850/v850-c.c (ghs_pragma_section): Likewise.\n+\t* config/v850/v850.c (v850_handle_interrupt_attribute): Likewise.\n+\n 2009-05-10  Joseph Myers  <joseph@codesourcery.com>\n \n \t* pretty-print.h (struct pretty_print_info): Add"}, {"sha": "3f81f611f80617108292f01b5cf3ba33fdc3547d", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29d08eba748c3bd6ee06f2310d4fa198b1560d04/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29d08eba748c3bd6ee06f2310d4fa198b1560d04/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=29d08eba748c3bd6ee06f2310d4fa198b1560d04", "patch": "@@ -1,6 +1,6 @@\n /* Subroutines used for code generation on the Argonaut ARC cpu.\n    Copyright (C) 1994, 1995, 1997, 1998, 1999, 2000, 2001, 2002, 2003,\n-   2004, 2005, 2006, 2007, 2008 Free Software Foundation, Inc.\n+   2004, 2005, 2006, 2007, 2008, 2009 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -389,16 +389,16 @@ arc_handle_interrupt_attribute (tree *node ATTRIBUTE_UNUSED,\n   if (TREE_CODE (value) != STRING_CST)\n     {\n       warning (OPT_Wattributes,\n-\t       \"argument of %qs attribute is not a string constant\",\n-\t       IDENTIFIER_POINTER (name));\n+\t       \"argument of %qE attribute is not a string constant\",\n+\t       name);\n       *no_add_attrs = true;\n     }\n   else if (strcmp (TREE_STRING_POINTER (value), \"ilink1\")\n \t   && strcmp (TREE_STRING_POINTER (value), \"ilink2\"))\n     {\n       warning (OPT_Wattributes,\n-\t       \"argument of %qs attribute is not \\\"ilink1\\\" or \\\"ilink2\\\"\",\n-\t       IDENTIFIER_POINTER (name));\n+\t       \"argument of %qE attribute is not \\\"ilink1\\\" or \\\"ilink2\\\"\",\n+\t       name);\n       *no_add_attrs = true;\n     }\n "}, {"sha": "9264760908129f610a9c9202d96e65f5b133b069", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29d08eba748c3bd6ee06f2310d4fa198b1560d04/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29d08eba748c3bd6ee06f2310d4fa198b1560d04/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=29d08eba748c3bd6ee06f2310d4fa198b1560d04", "patch": "@@ -3264,8 +3264,8 @@ arm_handle_fndecl_attribute (tree *node, tree name, tree args ATTRIBUTE_UNUSED,\n {\n   if (TREE_CODE (*node) != FUNCTION_DECL)\n     {\n-      warning (OPT_Wattributes, \"%qs attribute only applies to functions\",\n-\t       IDENTIFIER_POINTER (name));\n+      warning (OPT_Wattributes, \"%qE attribute only applies to functions\",\n+\t       name);\n       *no_add_attrs = true;\n     }\n \n@@ -3282,8 +3282,8 @@ arm_handle_isr_attribute (tree *node, tree name, tree args, int flags,\n     {\n       if (TREE_CODE (*node) != FUNCTION_DECL)\n \t{\n-\t  warning (OPT_Wattributes, \"%qs attribute only applies to functions\",\n-\t\t   IDENTIFIER_POINTER (name));\n+\t  warning (OPT_Wattributes, \"%qE attribute only applies to functions\",\n+\t\t   name);\n \t  *no_add_attrs = true;\n \t}\n       /* FIXME: the argument if any is checked for type attributes;\n@@ -3296,8 +3296,8 @@ arm_handle_isr_attribute (tree *node, tree name, tree args, int flags,\n \t{\n \t  if (arm_isr_value (args) == ARM_FT_UNKNOWN)\n \t    {\n-\t      warning (OPT_Wattributes, \"%qs attribute ignored\",\n-\t\t       IDENTIFIER_POINTER (name));\n+\t      warning (OPT_Wattributes, \"%qE attribute ignored\",\n+\t\t       name);\n \t      *no_add_attrs = true;\n \t    }\n \t}\n@@ -3324,8 +3324,8 @@ arm_handle_isr_attribute (tree *node, tree name, tree args, int flags,\n \t    }\n \t  else\n \t    {\n-\t      warning (OPT_Wattributes, \"%qs attribute ignored\",\n-\t\t       IDENTIFIER_POINTER (name));\n+\t      warning (OPT_Wattributes, \"%qE attribute ignored\",\n+\t\t       name);\n \t    }\n \t}\n     }"}, {"sha": "6bcc8e80372c6b6a21e436e62205599e58264759", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29d08eba748c3bd6ee06f2310d4fa198b1560d04/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29d08eba748c3bd6ee06f2310d4fa198b1560d04/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=29d08eba748c3bd6ee06f2310d4fa198b1560d04", "patch": "@@ -4804,8 +4804,8 @@ avr_handle_progmem_attribute (tree *node, tree name,\n \t}\n       else\n \t{\n-\t  warning (OPT_Wattributes, \"%qs attribute ignored\",\n-\t\t   IDENTIFIER_POINTER (name));\n+\t  warning (OPT_Wattributes, \"%qE attribute ignored\",\n+\t\t   name);\n \t  *no_add_attrs = true;\n \t}\n     }\n@@ -4824,8 +4824,8 @@ avr_handle_fndecl_attribute (tree *node, tree name,\n {\n   if (TREE_CODE (*node) != FUNCTION_DECL)\n     {\n-      warning (OPT_Wattributes, \"%qs attribute only applies to functions\",\n-\t       IDENTIFIER_POINTER (name));\n+      warning (OPT_Wattributes, \"%qE attribute only applies to functions\",\n+\t       name);\n       *no_add_attrs = true;\n     }\n \n@@ -4840,8 +4840,8 @@ avr_handle_fntype_attribute (tree *node, tree name,\n {\n   if (TREE_CODE (*node) != FUNCTION_TYPE)\n     {\n-      warning (OPT_Wattributes, \"%qs attribute only applies to functions\",\n-\t       IDENTIFIER_POINTER (name));\n+      warning (OPT_Wattributes, \"%qE attribute only applies to functions\",\n+\t       name);\n       *no_add_attrs = true;\n     }\n "}, {"sha": "077d5c544a758cd94adf78b69de12e39fe1f01df", "filename": "gcc/config/bfin/bfin.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29d08eba748c3bd6ee06f2310d4fa198b1560d04/gcc%2Fconfig%2Fbfin%2Fbfin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29d08eba748c3bd6ee06f2310d4fa198b1560d04/gcc%2Fconfig%2Fbfin%2Fbfin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.c?ref=29d08eba748c3bd6ee06f2310d4fa198b1560d04", "patch": "@@ -5267,8 +5267,8 @@ handle_int_attribute (tree *node, tree name,\n \n   if (TREE_CODE (x) != FUNCTION_TYPE)\n     {\n-      warning (OPT_Wattributes, \"%qs attribute only applies to functions\",\n-\t       IDENTIFIER_POINTER (name));\n+      warning (OPT_Wattributes, \"%qE attribute only applies to functions\",\n+\t       name);\n       *no_add_attrs = true;\n     }\n   else if (funkind (x) != SUBROUTINE)\n@@ -5328,8 +5328,8 @@ bfin_handle_longcall_attribute (tree *node, tree name,\n       && TREE_CODE (*node) != FIELD_DECL\n       && TREE_CODE (*node) != TYPE_DECL)\n     {\n-      warning (OPT_Wattributes, \"`%s' attribute only applies to functions\",\n-\t       IDENTIFIER_POINTER (name));\n+      warning (OPT_Wattributes, \"%qE attribute only applies to functions\",\n+\t       name);\n       *no_add_attrs = true;\n     }\n \n@@ -5357,8 +5357,8 @@ bfin_handle_l1_text_attribute (tree *node, tree name, tree ARG_UNUSED (args),\n \n   if (TREE_CODE (decl) != FUNCTION_DECL)\n     {\n-      error (\"`%s' attribute only applies to functions\",\n-\t     IDENTIFIER_POINTER (name));\n+      error (\"%qE attribute only applies to functions\",\n+\t     name);\n       *no_add_attrs = true;\n     }\n \n@@ -5389,15 +5389,15 @@ bfin_handle_l1_data_attribute (tree *node, tree name, tree ARG_UNUSED (args),\n \n   if (TREE_CODE (decl) != VAR_DECL)\n     {\n-      error (\"`%s' attribute only applies to variables\",\n-\t     IDENTIFIER_POINTER (name));\n+      error (\"%qE attribute only applies to variables\",\n+\t     name);\n       *no_add_attrs = true;\n     }\n   else if (current_function_decl != NULL_TREE\n \t   && !TREE_STATIC (decl))\n     {\n-      error (\"`%s' attribute cannot be specified for local variables\",\n-\t     IDENTIFIER_POINTER (name));\n+      error (\"%qE attribute cannot be specified for local variables\",\n+\t     name);\n       *no_add_attrs = true;\n     }\n   else"}, {"sha": "c8bb508e8aa92facc551cfe501efe7606c826f1d", "filename": "gcc/config/darwin.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29d08eba748c3bd6ee06f2310d4fa198b1560d04/gcc%2Fconfig%2Fdarwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29d08eba748c3bd6ee06f2310d4fa198b1560d04/gcc%2Fconfig%2Fdarwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.c?ref=29d08eba748c3bd6ee06f2310d4fa198b1560d04", "patch": "@@ -1,6 +1,6 @@\n /* Functions for generic Darwin as target machine for GNU C compiler.\n    Copyright (C) 1989, 1990, 1991, 1992, 1993, 2000, 2001, 2002, 2003, 2004,\n-   2005, 2006, 2007, 2008\n+   2005, 2006, 2007, 2008, 2009\n    Free Software Foundation, Inc.\n    Contributed by Apple Computer Inc.\n \n@@ -1407,15 +1407,15 @@ darwin_handle_kext_attribute (tree *node, tree name,\n   /* APPLE KEXT stuff -- only applies with pure static C++ code.  */\n   if (! TARGET_KEXTABI)\n     {\n-      warning (0, \"%<%s%> 2.95 vtable-compatibility attribute applies \"\n-\t       \"only when compiling a kext\", IDENTIFIER_POINTER (name));\n+      warning (0, \"%qE 2.95 vtable-compatibility attribute applies \"\n+\t       \"only when compiling a kext\", name);\n \n       *no_add_attrs = true;\n     }\n   else if (TREE_CODE (*node) != RECORD_TYPE)\n     {\n-      warning (0, \"%<%s%> 2.95 vtable-compatibility attribute applies \"\n-\t       \"only to C++ classes\", IDENTIFIER_POINTER (name));\n+      warning (0, \"%qE 2.95 vtable-compatibility attribute applies \"\n+\t       \"only to C++ classes\", name);\n \n       *no_add_attrs = true;\n     }\n@@ -1434,8 +1434,8 @@ darwin_handle_weak_import_attribute (tree *node, tree name,\n {\n   if (TREE_CODE (*node) != FUNCTION_DECL && TREE_CODE (*node) != VAR_DECL)\n     {\n-      warning (OPT_Wattributes, \"%qs attribute ignored\",\n-\t       IDENTIFIER_POINTER (name));\n+      warning (OPT_Wattributes, \"%qE attribute ignored\",\n+\t       name);\n       *no_add_attrs = true;\n     }\n   else"}, {"sha": "34d1f82687c87f0c351a39b07ce2c7f1ece3127f", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29d08eba748c3bd6ee06f2310d4fa198b1560d04/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29d08eba748c3bd6ee06f2310d4fa198b1560d04/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=29d08eba748c3bd6ee06f2310d4fa198b1560d04", "patch": "@@ -1,6 +1,6 @@\n /* Subroutines for insn-output.c for Renesas H8/300.\n    Copyright (C) 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000,\n-   2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008\n+   2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n    Free Software Foundation, Inc.\n    Contributed by Steve Chamberlain (sac@cygnus.com),\n    Jim Wilson (wilson@cygnus.com), and Doug Evans (dje@cygnus.com).\n@@ -5256,8 +5256,8 @@ h8300_handle_fndecl_attribute (tree *node, tree name,\n {\n   if (TREE_CODE (*node) != FUNCTION_DECL)\n     {\n-      warning (OPT_Wattributes, \"%qs attribute only applies to functions\",\n-\t       IDENTIFIER_POINTER (name));\n+      warning (OPT_Wattributes, \"%qE attribute only applies to functions\",\n+\t       name);\n       *no_add_attrs = true;\n     }\n \n@@ -5280,8 +5280,8 @@ h8300_handle_eightbit_data_attribute (tree *node, tree name,\n     }\n   else\n     {\n-      warning (OPT_Wattributes, \"%qs attribute ignored\",\n-\t       IDENTIFIER_POINTER (name));\n+      warning (OPT_Wattributes, \"%qE attribute ignored\",\n+\t       name);\n       *no_add_attrs = true;\n     }\n \n@@ -5304,8 +5304,8 @@ h8300_handle_tiny_data_attribute (tree *node, tree name,\n     }\n   else\n     {\n-      warning (OPT_Wattributes, \"%qs attribute ignored\",\n-\t       IDENTIFIER_POINTER (name));\n+      warning (OPT_Wattributes, \"%qE attribute ignored\",\n+\t       name);\n       *no_add_attrs = true;\n     }\n "}, {"sha": "aefb891ff5babbed34bd3e709b604aa656418675", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29d08eba748c3bd6ee06f2310d4fa198b1560d04/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29d08eba748c3bd6ee06f2310d4fa198b1560d04/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=29d08eba748c3bd6ee06f2310d4fa198b1560d04", "patch": "@@ -4245,8 +4245,8 @@ ix86_handle_cconv_attribute (tree *node, tree name,\n       && TREE_CODE (*node) != FIELD_DECL\n       && TREE_CODE (*node) != TYPE_DECL)\n     {\n-      warning (OPT_Wattributes, \"%qs attribute only applies to functions\",\n-\t       IDENTIFIER_POINTER (name));\n+      warning (OPT_Wattributes, \"%qE attribute only applies to functions\",\n+\t       name);\n       *no_add_attrs = true;\n       return NULL_TREE;\n     }\n@@ -4265,14 +4265,14 @@ ix86_handle_cconv_attribute (tree *node, tree name,\n       if (TREE_CODE (cst) != INTEGER_CST)\n \t{\n \t  warning (OPT_Wattributes,\n-\t\t   \"%qs attribute requires an integer constant argument\",\n-\t\t   IDENTIFIER_POINTER (name));\n+\t\t   \"%qE attribute requires an integer constant argument\",\n+\t\t   name);\n \t  *no_add_attrs = true;\n \t}\n       else if (compare_tree_int (cst, REGPARM_MAX) > 0)\n \t{\n-\t  warning (OPT_Wattributes, \"argument to %qs attribute larger than %d\",\n-\t\t   IDENTIFIER_POINTER (name), REGPARM_MAX);\n+\t  warning (OPT_Wattributes, \"argument to %qE attribute larger than %d\",\n+\t\t   name, REGPARM_MAX);\n \t  *no_add_attrs = true;\n \t}\n \n@@ -4283,8 +4283,8 @@ ix86_handle_cconv_attribute (tree *node, tree name,\n     {\n       /* Do not warn when emulating the MS ABI.  */\n       if (TREE_CODE (*node) != FUNCTION_TYPE || ix86_function_type_abi (*node)!=MS_ABI)\n-\twarning (OPT_Wattributes, \"%qs attribute ignored\",\n-\t         IDENTIFIER_POINTER (name));\n+\twarning (OPT_Wattributes, \"%qE attribute ignored\",\n+\t         name);\n       *no_add_attrs = true;\n       return NULL_TREE;\n     }\n@@ -26836,15 +26836,15 @@ ix86_handle_abi_attribute (tree *node, tree name,\n       && TREE_CODE (*node) != FIELD_DECL\n       && TREE_CODE (*node) != TYPE_DECL)\n     {\n-      warning (OPT_Wattributes, \"%qs attribute only applies to functions\",\n-\t       IDENTIFIER_POINTER (name));\n+      warning (OPT_Wattributes, \"%qE attribute only applies to functions\",\n+\t       name);\n       *no_add_attrs = true;\n       return NULL_TREE;\n     }\n   if (!TARGET_64BIT)\n     {\n-      warning (OPT_Wattributes, \"%qs attribute only available for 64-bit\",\n-\t       IDENTIFIER_POINTER (name));\n+      warning (OPT_Wattributes, \"%qE attribute only available for 64-bit\",\n+\t       name);\n       *no_add_attrs = true;\n       return NULL_TREE;\n     }\n@@ -26891,8 +26891,8 @@ ix86_handle_struct_attribute (tree *node, tree name,\n   if (!(type && (TREE_CODE (*type) == RECORD_TYPE\n \t\t || TREE_CODE (*type) == UNION_TYPE)))\n     {\n-      warning (OPT_Wattributes, \"%qs attribute ignored\",\n-\t       IDENTIFIER_POINTER (name));\n+      warning (OPT_Wattributes, \"%qE attribute ignored\",\n+\t       name);\n       *no_add_attrs = true;\n     }\n \n@@ -26901,8 +26901,8 @@ ix86_handle_struct_attribute (tree *node, tree name,\n \t   || ((is_attribute_p (\"gcc_struct\", name)\n \t\t&& lookup_attribute (\"ms_struct\", TYPE_ATTRIBUTES (*type)))))\n     {\n-      warning (OPT_Wattributes, \"%qs incompatible attribute ignored\",\n-               IDENTIFIER_POINTER (name));\n+      warning (OPT_Wattributes, \"%qE incompatible attribute ignored\",\n+               name);\n       *no_add_attrs = true;\n     }\n "}, {"sha": "3d88517c234ff82b4c667c840f176370149b49c4", "filename": "gcc/config/i386/winnt.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29d08eba748c3bd6ee06f2310d4fa198b1560d04/gcc%2Fconfig%2Fi386%2Fwinnt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29d08eba748c3bd6ee06f2310d4fa198b1560d04/gcc%2Fconfig%2Fi386%2Fwinnt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fwinnt.c?ref=29d08eba748c3bd6ee06f2310d4fa198b1560d04", "patch": "@@ -1,7 +1,7 @@\n /* Subroutines for insn-output.c for Windows NT.\n    Contributed by Douglas Rupp (drupp@cs.washington.edu)\n    Copyright (C) 1995, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004,\n-   2005, 2006, 2007, 2008 Free Software Foundation, Inc.\n+   2005, 2006, 2007, 2008, 2009 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -56,8 +56,8 @@ ix86_handle_shared_attribute (tree *node, tree name,\n {\n   if (TREE_CODE (*node) != VAR_DECL)\n     {\n-      warning (OPT_Wattributes, \"%qs attribute only applies to variables\",\n-\t       IDENTIFIER_POINTER (name));\n+      warning (OPT_Wattributes, \"%qE attribute only applies to variables\",\n+\t       name);\n       *no_add_attrs = true;\n     }\n \n@@ -78,8 +78,8 @@ ix86_handle_selectany_attribute (tree *node, tree name,\n      initialization later in encode_section_info.  */\n   if (TREE_CODE (*node) != VAR_DECL || !TREE_PUBLIC (*node))\n     {\t\n-      error (\"%qs attribute applies only to initialized variables\"\n-       \t     \" with external linkage\",  IDENTIFIER_POINTER (name));\n+      error (\"%qE attribute applies only to initialized variables\"\n+       \t     \" with external linkage\", name);\n       *no_add_attrs = true;\n     }\n "}, {"sha": "acf73c5296949905f775830760045dd3e1042b79", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29d08eba748c3bd6ee06f2310d4fa198b1560d04/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29d08eba748c3bd6ee06f2310d4fa198b1560d04/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=29d08eba748c3bd6ee06f2310d4fa198b1560d04", "patch": "@@ -586,8 +586,8 @@ ia64_handle_model_attribute (tree *node, tree name, tree args,\n     }\n   else\n     {\n-      warning (OPT_Wattributes, \"invalid argument of %qs attribute\",\n-\t       IDENTIFIER_POINTER (name));\n+      warning (OPT_Wattributes, \"invalid argument of %qE attribute\",\n+\t       name);\n       *no_add_attrs = true;\n     }\n \n@@ -618,8 +618,8 @@ ia64_handle_model_attribute (tree *node, tree name, tree args,\n       break;\n \n     default:\n-      warning (OPT_Wattributes, \"%qs attribute ignored\",\n-\t       IDENTIFIER_POINTER (name));\n+      warning (OPT_Wattributes, \"%qE attribute ignored\",\n+\t       name);\n       *no_add_attrs = true;\n       break;\n     }"}, {"sha": "d0980dd63a6214a4bf22e0fc22938b017434cbb7", "filename": "gcc/config/m32c/m32c.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29d08eba748c3bd6ee06f2310d4fa198b1560d04/gcc%2Fconfig%2Fm32c%2Fm32c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29d08eba748c3bd6ee06f2310d4fa198b1560d04/gcc%2Fconfig%2Fm32c%2Fm32c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fm32c.c?ref=29d08eba748c3bd6ee06f2310d4fa198b1560d04", "patch": "@@ -1,5 +1,5 @@\n /* Target Code for R8C/M16C/M32C\n-   Copyright (C) 2005, 2006, 2007, 2008\n+   Copyright (C) 2005, 2006, 2007, 2008, 2009\n    Free Software Foundation, Inc.\n    Contributed by Red Hat.\n \n@@ -2781,33 +2781,33 @@ function_vector_handler (tree * node ATTRIBUTE_UNUSED,\n     {\n       /* The attribute is not supported for R8C target.  */\n       warning (OPT_Wattributes,\n-                \"`%s' attribute is not supported for R8C target\",\n-                IDENTIFIER_POINTER (name));\n+                \"%qE attribute is not supported for R8C target\",\n+                name);\n       *no_add_attrs = true;\n     }\n   else if (TREE_CODE (*node) != FUNCTION_DECL)\n     {\n       /* The attribute must be applied to functions only.  */\n       warning (OPT_Wattributes,\n-                \"`%s' attribute applies only to functions\",\n-                IDENTIFIER_POINTER (name));\n+                \"%qE attribute applies only to functions\",\n+                name);\n       *no_add_attrs = true;\n     }\n   else if (TREE_CODE (TREE_VALUE (args)) != INTEGER_CST)\n     {\n       /* The argument must be a constant integer.  */\n       warning (OPT_Wattributes,\n-                \"`%s' attribute argument not an integer constant\",\n-                IDENTIFIER_POINTER (name));\n+                \"%qE attribute argument not an integer constant\",\n+                name);\n       *no_add_attrs = true;\n     }\n   else if (TREE_INT_CST_LOW (TREE_VALUE (args)) < 18\n            || TREE_INT_CST_LOW (TREE_VALUE (args)) > 255)\n     {\n       /* The argument value must be between 18 to 255.  */\n       warning (OPT_Wattributes,\n-                \"`%s' attribute argument should be between 18 to 255\",\n-                IDENTIFIER_POINTER (name));\n+                \"%qE attribute argument should be between 18 to 255\",\n+                name);\n       *no_add_attrs = true;\n     }\n   return NULL_TREE;"}, {"sha": "10bc7a0e66e95347cc3f8b4fc4a7f4cc5b4feb47", "filename": "gcc/config/m68hc11/m68hc11.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29d08eba748c3bd6ee06f2310d4fa198b1560d04/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29d08eba748c3bd6ee06f2310d4fa198b1560d04/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c?ref=29d08eba748c3bd6ee06f2310d4fa198b1560d04", "patch": "@@ -1,6 +1,6 @@\n /* Subroutines for code generation on Motorola 68HC11 and 68HC12.\n-   Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008\n-   Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008,\n+   2009 Free Software Foundation, Inc.\n    Contributed by Stephane Carrez (stcarrez@nerim.fr)\n \n This file is part of GCC.\n@@ -1107,8 +1107,8 @@ m68hc11_handle_page0_attribute (tree *node, tree name,\n     }\n   else\n     {\n-      warning (OPT_Wattributes, \"%qs attribute ignored\",\n-\t       IDENTIFIER_POINTER (name));\n+      warning (OPT_Wattributes, \"%qE attribute ignored\",\n+\t       name);\n       *no_add_attrs = true;\n     }\n \n@@ -1144,8 +1144,8 @@ m68hc11_handle_fntype_attribute (tree *node, tree name,\n       && TREE_CODE (*node) != FIELD_DECL\n       && TREE_CODE (*node) != TYPE_DECL)\n     {\n-      warning (OPT_Wattributes, \"%qs attribute only applies to functions\",\n-\t       IDENTIFIER_POINTER (name));\n+      warning (OPT_Wattributes, \"%qE attribute only applies to functions\",\n+\t       name);\n       *no_add_attrs = true;\n     }\n "}, {"sha": "d3734efd9cf41be54d2fad5b14e795f466994084", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29d08eba748c3bd6ee06f2310d4fa198b1560d04/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29d08eba748c3bd6ee06f2310d4fa198b1560d04/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=29d08eba748c3bd6ee06f2310d4fa198b1560d04", "patch": "@@ -781,8 +781,8 @@ m68k_handle_fndecl_attribute (tree *node, tree name,\n {\n   if (TREE_CODE (*node) != FUNCTION_DECL)\n     {\n-      warning (OPT_Wattributes, \"%qs attribute only applies to functions\",\n-\t       IDENTIFIER_POINTER (name));\n+      warning (OPT_Wattributes, \"%qE attribute only applies to functions\",\n+\t       name);\n       *no_add_attrs = true;\n     }\n "}, {"sha": "24cc9406ed7bc35d10289658b885115b370a7b49", "filename": "gcc/config/mcore/mcore.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29d08eba748c3bd6ee06f2310d4fa198b1560d04/gcc%2Fconfig%2Fmcore%2Fmcore.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29d08eba748c3bd6ee06f2310d4fa198b1560d04/gcc%2Fconfig%2Fmcore%2Fmcore.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.c?ref=29d08eba748c3bd6ee06f2310d4fa198b1560d04", "patch": "@@ -1,6 +1,6 @@\n /* Output routines for Motorola MCore processor\n-   Copyright (C) 1993, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007, 2008\n-   Free Software Foundation, Inc.\n+   Copyright (C) 1993, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007, 2008,\n+   2009 Free Software Foundation, Inc.\n \n    This file is part of GCC.\n \n@@ -3031,8 +3031,8 @@ mcore_handle_naked_attribute (tree * node, tree name, tree args ATTRIBUTE_UNUSED\n     }\n   else\n     {\n-      warning (OPT_Wattributes, \"%qs attribute only applies to functions\",\n-\t       IDENTIFIER_POINTER (name));\n+      warning (OPT_Wattributes, \"%qE attribute only applies to functions\",\n+\t       name);\n       *no_add_attrs = true;\n     }\n "}, {"sha": "32c898bcf83b3d7f6d2e0c606c6de19865800091", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29d08eba748c3bd6ee06f2310d4fa198b1560d04/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29d08eba748c3bd6ee06f2310d4fa198b1560d04/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=29d08eba748c3bd6ee06f2310d4fa198b1560d04", "patch": "@@ -1292,9 +1292,9 @@ mips_insert_attributes (tree decl, tree *attributes)\n \t{\n \t  /* DECL cannot be simultaneously \"mips16\" and \"nomips16\".  */\n \t  if (mips16_p && nomips16_p)\n-\t    error (\"%qs cannot have both %<mips16%> and \"\n+\t    error (\"%qE cannot have both %<mips16%> and \"\n \t\t   \"%<nomips16%> attributes\",\n-\t\t   IDENTIFIER_POINTER (DECL_NAME (decl)));\n+\t\t   DECL_NAME (decl));\n \t}\n       else if (TARGET_FLIP_MIPS16 && !DECL_ARTIFICIAL (decl))\n \t{\n@@ -1314,11 +1314,11 @@ mips_merge_decl_attributes (tree olddecl, tree newdecl)\n {\n   /* The decls' \"mips16\" and \"nomips16\" attributes must match exactly.  */\n   if (mips_mips16_decl_p (olddecl) != mips_mips16_decl_p (newdecl))\n-    error (\"%qs redeclared with conflicting %qs attributes\",\n-\t   IDENTIFIER_POINTER (DECL_NAME (newdecl)), \"mips16\");\n+    error (\"%qE redeclared with conflicting %qs attributes\",\n+\t   DECL_NAME (newdecl), \"mips16\");\n   if (mips_nomips16_decl_p (olddecl) != mips_nomips16_decl_p (newdecl))\n-    error (\"%qs redeclared with conflicting %qs attributes\",\n-\t   IDENTIFIER_POINTER (DECL_NAME (newdecl)), \"nomips16\");\n+    error (\"%qE redeclared with conflicting %qs attributes\",\n+\t   DECL_NAME (newdecl), \"nomips16\");\n \n   return merge_attributes (DECL_ATTRIBUTES (olddecl),\n \t\t\t   DECL_ATTRIBUTES (newdecl));\n@@ -12372,8 +12372,8 @@ mips_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n   gcc_assert (avail != 0);\n   if (TARGET_MIPS16)\n     {\n-      error (\"built-in function %qs not supported for MIPS16\",\n-\t     IDENTIFIER_POINTER (DECL_NAME (fndecl)));\n+      error (\"built-in function %qE not supported for MIPS16\",\n+\t     DECL_NAME (fndecl));\n       return ignore ? const0_rtx : CONST0_RTX (mode);\n     }\n   switch (d->builtin_type)"}, {"sha": "8e24769816d3593b0dc88e35701e719314dbb2d8", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29d08eba748c3bd6ee06f2310d4fa198b1560d04/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29d08eba748c3bd6ee06f2310d4fa198b1560d04/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=29d08eba748c3bd6ee06f2310d4fa198b1560d04", "patch": "@@ -20667,8 +20667,8 @@ rs6000_handle_longcall_attribute (tree *node, tree name,\n       && TREE_CODE (*node) != FIELD_DECL\n       && TREE_CODE (*node) != TYPE_DECL)\n     {\n-      warning (OPT_Wattributes, \"%qs attribute only applies to functions\",\n-\t       IDENTIFIER_POINTER (name));\n+      warning (OPT_Wattributes, \"%qE attribute only applies to functions\",\n+\t       name);\n       *no_add_attrs = true;\n     }\n \n@@ -20741,7 +20741,7 @@ rs6000_handle_struct_attribute (tree *node, tree name,\n   if (!(type && (TREE_CODE (*type) == RECORD_TYPE\n                  || TREE_CODE (*type) == UNION_TYPE)))\n     {\n-      warning (OPT_Wattributes, \"%qs attribute ignored\", IDENTIFIER_POINTER (name));\n+      warning (OPT_Wattributes, \"%qE attribute ignored\", name);\n       *no_add_attrs = true;\n     }\n \n@@ -20750,8 +20750,8 @@ rs6000_handle_struct_attribute (tree *node, tree name,\n            || ((is_attribute_p (\"gcc_struct\", name)\n                 && lookup_attribute (\"ms_struct\", TYPE_ATTRIBUTES (*type)))))\n     {\n-      warning (OPT_Wattributes, \"%qs incompatible attribute ignored\",\n-               IDENTIFIER_POINTER (name));\n+      warning (OPT_Wattributes, \"%qE incompatible attribute ignored\",\n+               name);\n       *no_add_attrs = true;\n     }\n "}, {"sha": "d23a45a22892266481c7ce287d2845c3d275f6fc", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29d08eba748c3bd6ee06f2310d4fa198b1560d04/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29d08eba748c3bd6ee06f2310d4fa198b1560d04/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=29d08eba748c3bd6ee06f2310d4fa198b1560d04", "patch": "@@ -8040,8 +8040,8 @@ sh_insert_attributes (tree node, tree *attributes)\n \t\t  || is_attribute_p (\"nosave_low_regs\", TREE_PURPOSE (attrs))\n \t\t  || is_attribute_p (\"resbank\", TREE_PURPOSE (attrs)))\n \t\twarning (OPT_Wattributes,\n-\t\t\t \"%qs attribute only applies to interrupt functions\",\n-\t\t\t IDENTIFIER_POINTER (TREE_PURPOSE (attrs)));\n+\t\t\t \"%qE attribute only applies to interrupt functions\",\n+\t\t\t TREE_PURPOSE (attrs));\n \t      else\n \t\t{\n \t\t  *tail = tree_cons (TREE_PURPOSE (attrs), NULL_TREE,\n@@ -8123,14 +8123,14 @@ sh_handle_resbank_handler_attribute (tree * node, tree name,\n {\n   if (!TARGET_SH2A)\n     {\n-      warning (OPT_Wattributes, \"%qs attribute is supported only for SH2A\",\n-               IDENTIFIER_POINTER (name));\n+      warning (OPT_Wattributes, \"%qE attribute is supported only for SH2A\",\n+               name);\n       *no_add_attrs = true;\n     }\n   if (TREE_CODE (*node) != FUNCTION_DECL)\n     {\n-      warning (OPT_Wattributes, \"%qs attribute only applies to functions\",\n-               IDENTIFIER_POINTER (name));\n+      warning (OPT_Wattributes, \"%qE attribute only applies to functions\",\n+               name);\n       *no_add_attrs = true;\n     }\n \n@@ -8147,8 +8147,8 @@ sh_handle_interrupt_handler_attribute (tree *node, tree name,\n {\n   if (TREE_CODE (*node) != FUNCTION_DECL)\n     {\n-      warning (OPT_Wattributes, \"%qs attribute only applies to functions\",\n-               IDENTIFIER_POINTER (name));\n+      warning (OPT_Wattributes, \"%qE attribute only applies to functions\",\n+               name);\n       *no_add_attrs = true;\n     }\n   else if (TARGET_SHCOMPACT)\n@@ -8170,30 +8170,30 @@ sh2a_handle_function_vector_handler_attribute (tree * node, tree name,\n {\n   if (!TARGET_SH2A)\n     {\n-      warning (OPT_Wattributes, \"%qs attribute only applies to SH2A\",\n-               IDENTIFIER_POINTER (name));\n+      warning (OPT_Wattributes, \"%qE attribute only applies to SH2A\",\n+               name);\n       *no_add_attrs = true;\n     }\n   else if (TREE_CODE (*node) != FUNCTION_DECL)\n     {\n-      warning (OPT_Wattributes, \"%qs attribute only applies to functions\",\n-               IDENTIFIER_POINTER (name));\n+      warning (OPT_Wattributes, \"%qE attribute only applies to functions\",\n+               name);\n       *no_add_attrs = true;\n     }\n   else if (TREE_CODE (TREE_VALUE (args)) != INTEGER_CST)\n     {\n       /* The argument must be a constant integer.  */\n       warning (OPT_Wattributes,\n-               \"`%s' attribute argument not an integer constant\",\n-               IDENTIFIER_POINTER (name));\n+               \"%qE attribute argument not an integer constant\",\n+               name);\n       *no_add_attrs = true;\n     }\n   else if (TREE_INT_CST_LOW (TREE_VALUE (args)) > 255)\n     {\n       /* The argument value must be between 0 to 255.  */\n       warning (OPT_Wattributes,\n-               \"`%s' attribute argument should be between 0 to 255\",\n-               IDENTIFIER_POINTER (name));\n+               \"%qE attribute argument should be between 0 to 255\",\n+               name);\n       *no_add_attrs = true;\n     }\n   return NULL_TREE;\n@@ -8258,15 +8258,15 @@ sh_handle_sp_switch_attribute (tree *node, tree name, tree args,\n {\n   if (TREE_CODE (*node) != FUNCTION_DECL)\n     {\n-      warning (OPT_Wattributes, \"%qs attribute only applies to functions\",\n-\t       IDENTIFIER_POINTER (name));\n+      warning (OPT_Wattributes, \"%qE attribute only applies to functions\",\n+\t       name);\n       *no_add_attrs = true;\n     }\n   else if (TREE_CODE (TREE_VALUE (args)) != STRING_CST)\n     {\n       /* The argument must be a constant string.  */\n-      warning (OPT_Wattributes, \"%qs attribute argument not a string constant\",\n-\t       IDENTIFIER_POINTER (name));\n+      warning (OPT_Wattributes, \"%qE attribute argument not a string constant\",\n+\t       name);\n       *no_add_attrs = true;\n     }\n \n@@ -8281,17 +8281,17 @@ sh_handle_trap_exit_attribute (tree *node, tree name, tree args,\n {\n   if (TREE_CODE (*node) != FUNCTION_DECL)\n     {\n-      warning (OPT_Wattributes, \"%qs attribute only applies to functions\",\n-\t       IDENTIFIER_POINTER (name));\n+      warning (OPT_Wattributes, \"%qE attribute only applies to functions\",\n+\t       name);\n       *no_add_attrs = true;\n     }\n   /* The argument specifies a trap number to be used in a trapa instruction\n      at function exit (instead of an rte instruction).  */\n   else if (TREE_CODE (TREE_VALUE (args)) != INTEGER_CST)\n     {\n       /* The argument must be a constant integer.  */\n-      warning (OPT_Wattributes, \"%qs attribute argument not an \"\n-\t       \"integer constant\", IDENTIFIER_POINTER (name));\n+      warning (OPT_Wattributes, \"%qE attribute argument not an \"\n+\t       \"integer constant\", name);\n       *no_add_attrs = true;\n     }\n "}, {"sha": "f32adf9717f1ece2016afb9537b6416cadced007", "filename": "gcc/config/sh/symbian.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29d08eba748c3bd6ee06f2310d4fa198b1560d04/gcc%2Fconfig%2Fsh%2Fsymbian.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29d08eba748c3bd6ee06f2310d4fa198b1560d04/gcc%2Fconfig%2Fsh%2Fsymbian.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsymbian.c?ref=29d08eba748c3bd6ee06f2310d4fa198b1560d04", "patch": "@@ -269,8 +269,8 @@ sh_symbian_mark_dllimport (tree decl)\n \n   if (sh_symbian_dllexport_name_p (oldname))\n     {\n-      error (\"%qs declared as both exported to and imported from a DLL\",\n-             IDENTIFIER_POINTER (DECL_NAME (decl)));\n+      error (\"%qE declared as both exported to and imported from a DLL\",\n+             DECL_NAME (decl));\n     }\n   else if (sh_symbian_dllimport_name_p (oldname))\n     {\n@@ -502,8 +502,8 @@ sh_symbian_handle_dll_attribute (tree *pnode, tree name, tree args,\n       && (   TREE_CODE (node) == VAR_DECL\n \t  || TREE_CODE (node) == FUNCTION_DECL))\n     {\n-      error (\"external linkage required for symbol %q+D because of %qs attribute\",\n-\t     node, IDENTIFIER_POINTER (name));\n+      error (\"external linkage required for symbol %q+D because of %qE attribute\",\n+\t     node, name);\n       *no_add_attrs = true;\n     }\n "}, {"sha": "bb73622f9d560ad8efe40ccd5d98b6921ea1788c", "filename": "gcc/config/spu/spu.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29d08eba748c3bd6ee06f2310d4fa198b1560d04/gcc%2Fconfig%2Fspu%2Fspu.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29d08eba748c3bd6ee06f2310d4fa198b1560d04/gcc%2Fconfig%2Fspu%2Fspu.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.c?ref=29d08eba748c3bd6ee06f2310d4fa198b1560d04", "patch": "@@ -3723,8 +3723,8 @@ spu_handle_fndecl_attribute (tree * node,\n {\n   if (TREE_CODE (*node) != FUNCTION_DECL)\n     {\n-      warning (0, \"`%s' attribute only applies to functions\",\n-\t       IDENTIFIER_POINTER (name));\n+      warning (0, \"%qE attribute only applies to functions\",\n+\t       name);\n       *no_add_attrs = true;\n     }\n \n@@ -3781,7 +3781,7 @@ spu_handle_vector_attribute (tree * node, tree name,\n   *no_add_attrs = true;\t\t/* No need to hang on to the attribute.  */\n \n   if (!result)\n-    warning (0, \"`%s' attribute ignored\", IDENTIFIER_POINTER (name));\n+    warning (0, \"%qE attribute ignored\", name);\n   else\n     *node = lang_hooks.types.reconstruct_complex_type (*node, result);\n "}, {"sha": "eefc58f084722bc6dcb2e3b4e7e24d04840a37de", "filename": "gcc/config/stormy16/stormy16.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29d08eba748c3bd6ee06f2310d4fa198b1560d04/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29d08eba748c3bd6ee06f2310d4fa198b1560d04/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.c?ref=29d08eba748c3bd6ee06f2310d4fa198b1560d04", "patch": "@@ -1,6 +1,6 @@\n /* Xstormy16 target functions.\n    Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-   2006, 2007, 2008 Free Software Foundation, Inc.\n+   2006, 2007, 2008, 2009 Free Software Foundation, Inc.\n    Contributed by Red Hat, Inc.\n \n    This file is part of GCC.\n@@ -2218,8 +2218,8 @@ xstormy16_handle_interrupt_attribute (tree *node, tree name,\n {\n   if (TREE_CODE (*node) != FUNCTION_TYPE)\n     {\n-      warning (OPT_Wattributes, \"%qs attribute only applies to functions\",\n-\t       IDENTIFIER_POINTER (name));\n+      warning (OPT_Wattributes, \"%qE attribute only applies to functions\",\n+\t       name);\n       *no_add_attrs = true;\n     }\n "}, {"sha": "718eb82441e7d66155e20967e145cccf013e4ff6", "filename": "gcc/config/v850/v850-c.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29d08eba748c3bd6ee06f2310d4fa198b1560d04/gcc%2Fconfig%2Fv850%2Fv850-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29d08eba748c3bd6ee06f2310d4fa198b1560d04/gcc%2Fconfig%2Fv850%2Fv850-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850-c.c?ref=29d08eba748c3bd6ee06f2310d4fa198b1560d04", "patch": "@@ -1,5 +1,5 @@\n /* v850 specific, C compiler specific functions.\n-   Copyright (C) 2000, 2007 Free Software Foundation, Inc.\n+   Copyright (C) 2000, 2007, 2009 Free Software Foundation, Inc.\n    Contributed by Jeff Law (law@cygnus.com).\n \n This file is part of GCC.\n@@ -121,6 +121,7 @@ ghs_pragma_section (cpp_reader * pfile ATTRIBUTE_UNUSED)\n     {\n       tree x;\n       enum cpp_ttype type;\n+      tree sect_ident;\n       const char *sect, *alias;\n       enum GHS_section_kind kind;\n       \n@@ -129,7 +130,10 @@ ghs_pragma_section (cpp_reader * pfile ATTRIBUTE_UNUSED)\n       if (type == CPP_EOF && !repeat)\n \tgoto reset;\n       else if (type == CPP_NAME)\n-\tsect = IDENTIFIER_POINTER (x);\n+\t{\n+\t  sect_ident = x;\n+\t  sect = IDENTIFIER_POINTER (sect_ident);\n+\t}\n       else\n \tgoto bad;\n       repeat = 0;\n@@ -162,7 +166,7 @@ ghs_pragma_section (cpp_reader * pfile ATTRIBUTE_UNUSED)\n       else if (streq (sect, \"zbss\"))    kind = GHS_SECTION_KIND_ZDATA;\n       else\n \t{\n-\t  warning (0, \"unrecognized section name \\\"%s\\\"\", sect);\n+\t  warning (0, \"unrecognized section name %qE\", sect_ident);\n \t  return;\n \t}\n       "}, {"sha": "a562202538bf4aec2fdc9ce2b0ea56ad266fb31b", "filename": "gcc/config/v850/v850.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29d08eba748c3bd6ee06f2310d4fa198b1560d04/gcc%2Fconfig%2Fv850%2Fv850.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29d08eba748c3bd6ee06f2310d4fa198b1560d04/gcc%2Fconfig%2Fv850%2Fv850.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.c?ref=29d08eba748c3bd6ee06f2310d4fa198b1560d04", "patch": "@@ -1,6 +1,6 @@\n /* Subroutines for insn-output.c for NEC V850 series\n    Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-   2006, 2007, 2008 Free Software Foundation, Inc.\n+   2006, 2007, 2008, 2009 Free Software Foundation, Inc.\n    Contributed by Jeff Law (law@cygnus.com).\n \n    This file is part of GCC.\n@@ -2045,8 +2045,8 @@ v850_handle_interrupt_attribute (tree * node,\n {\n   if (TREE_CODE (*node) != FUNCTION_DECL)\n     {\n-      warning (OPT_Wattributes, \"%qs attribute only applies to functions\",\n-\t       IDENTIFIER_POINTER (name));\n+      warning (OPT_Wattributes, \"%qE attribute only applies to functions\",\n+\t       name);\n       *no_add_attrs = true;\n     }\n "}]}