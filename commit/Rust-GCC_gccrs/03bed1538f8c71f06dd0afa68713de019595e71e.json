{"sha": "03bed1538f8c71f06dd0afa68713de019595e71e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDNiZWQxNTM4ZjhjNzFmMDZkZDBhZmE2ODcxM2RlMDE5NTk1ZTcxZQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2019-03-27T18:39:20Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2019-03-27T18:39:20Z"}, "message": "PR c++/89241 - ICE with lambda in template parameter list.\n\nWe were getting confused by a lambda in template definition context that\nisn't actually in the scope of any templated entity.  Fixed by telling\ntype_dependent_expression_p that such a lambda is type-dependent even if we\ncan't tell that from its closure type.  I've also restored the error for\ndefining a non-lambda class in a default template argument, and for a lambda\nbefor C++20.\n\n\t* parser.c (cp_parser_lambda_expression): Also reject a lambda in a\n\ttemplate parameter list before C++20.\n\t* pt.c (type_dependent_expression_p): True for LAMBDA_EXPR.\n\t* semantics.c (begin_class_definition): Restore error about defining\n\tnon-lambda class in template parm list.\n\nFrom-SVN: r269972", "tree": {"sha": "d96fdda8e7b4e3ad5ac5f60f34e802ca241c70c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d96fdda8e7b4e3ad5ac5f60f34e802ca241c70c1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/03bed1538f8c71f06dd0afa68713de019595e71e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03bed1538f8c71f06dd0afa68713de019595e71e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03bed1538f8c71f06dd0afa68713de019595e71e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03bed1538f8c71f06dd0afa68713de019595e71e/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bbf1efe1b46737304cde7b35a95b30d21157e54d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbf1efe1b46737304cde7b35a95b30d21157e54d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bbf1efe1b46737304cde7b35a95b30d21157e54d"}], "stats": {"total": 40, "additions": 39, "deletions": 1}, "files": [{"sha": "48071948f4e1319a70ac324e01403615f1171ffe", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03bed1538f8c71f06dd0afa68713de019595e71e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03bed1538f8c71f06dd0afa68713de019595e71e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=03bed1538f8c71f06dd0afa68713de019595e71e", "patch": "@@ -1,3 +1,12 @@\n+2019-03-27  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/89241 - ICE with lambda in template parameter list.\n+\t* parser.c (cp_parser_lambda_expression): Also reject a lambda in a\n+\ttemplate parameter list before C++20.\n+\t* pt.c (type_dependent_expression_p): True for LAMBDA_EXPR.\n+\t* semantics.c (begin_class_definition): Restore error about defining\n+\tnon-lambda class in template parm list.\n+\n 2019-03-26  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/86932 - missed SFINAE with empty pack."}, {"sha": "348e4acf2d10356f31c0e9940c063778d0acaad0", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03bed1538f8c71f06dd0afa68713de019595e71e/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03bed1538f8c71f06dd0afa68713de019595e71e/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=03bed1538f8c71f06dd0afa68713de019595e71e", "patch": "@@ -10397,7 +10397,7 @@ cp_parser_lambda_expression (cp_parser* parser)\n \t}\n       ok = false;\n     }\n-  else if (parser->in_template_argument_list_p)\n+  else if (parser->in_template_argument_list_p || processing_template_parmlist)\n     {\n       if (!token->error_reported)\n \t{"}, {"sha": "229b34a197e4ca9be4290ddfba89c1ec488ea746", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03bed1538f8c71f06dd0afa68713de019595e71e/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03bed1538f8c71f06dd0afa68713de019595e71e/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=03bed1538f8c71f06dd0afa68713de019595e71e", "patch": "@@ -25692,6 +25692,12 @@ type_dependent_expression_p (tree expression)\n       || TREE_CODE (expression) == WILDCARD_DECL)\n     return true;\n \n+  /* A lambda-expression in template context is dependent.  dependent_type_p is\n+     true for a lambda in the scope of a class or function template, but that\n+     doesn't cover all template contexts, like a default template argument.  */\n+  if (TREE_CODE (expression) == LAMBDA_EXPR)\n+    return true;\n+\n   /* A fold expression is type-dependent. */\n   if (TREE_CODE (expression) == UNARY_LEFT_FOLD_EXPR\n       || TREE_CODE (expression) == UNARY_RIGHT_FOLD_EXPR"}, {"sha": "fea269657f9a20f3dc4d5f1921f365bdc3d4ace6", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03bed1538f8c71f06dd0afa68713de019595e71e/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03bed1538f8c71f06dd0afa68713de019595e71e/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=03bed1538f8c71f06dd0afa68713de019595e71e", "patch": "@@ -3043,6 +3043,12 @@ begin_class_definition (tree t)\n   if (error_operand_p (t) || error_operand_p (TYPE_MAIN_DECL (t)))\n     return error_mark_node;\n \n+  if (processing_template_parmlist && !LAMBDA_TYPE_P (t))\n+    {\n+      error (\"definition of %q#T inside template parameter list\", t);\n+      return error_mark_node;\n+    }\n+\n   /* According to the C++ ABI, decimal classes defined in ISO/IEC TR 24733\n      are passed the same as decimal scalar types.  */\n   if (TREE_CODE (t) == RECORD_TYPE"}, {"sha": "86065ebca64f314200ad2446082141bd650fbc1b", "filename": "gcc/testsuite/g++.dg/cpp2a/lambda-uneval10.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03bed1538f8c71f06dd0afa68713de019595e71e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Flambda-uneval10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03bed1538f8c71f06dd0afa68713de019595e71e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Flambda-uneval10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Flambda-uneval10.C?ref=03bed1538f8c71f06dd0afa68713de019595e71e", "patch": "@@ -0,0 +1,12 @@\n+// PR c++/89421\n+\n+template <int I = []{return 1;}()> // { dg-message \"lambda\" \"\" { target c++17_down } }\n+struct B\n+{\n+  static const int i = I;\n+};\n+\n+#if __cplusplus > 201703L\n+B<> b;\n+static_assert (b.i == 1);\n+#endif"}, {"sha": "5625cedd94ec81063b75f042a31346f7977539d3", "filename": "gcc/testsuite/g++.dg/ext/complit16.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03bed1538f8c71f06dd0afa68713de019595e71e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fcomplit16.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03bed1538f8c71f06dd0afa68713de019595e71e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fcomplit16.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fcomplit16.C?ref=03bed1538f8c71f06dd0afa68713de019595e71e", "patch": "@@ -0,0 +1,5 @@\n+// { dg-options \"\" }\n+\n+template <int = (struct A{int i;}){42}.i> struct B{}; // { dg-error \"\" }\n+\n+B<0> b;"}]}