{"sha": "0b7dccc63e31d11c2f129e569d06cef8c33d2921", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGI3ZGNjYzYzZTMxZDExYzJmMTI5ZTU2OWQwNmNlZjhjMzNkMjkyMQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2015-03-27T16:36:32Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2015-03-27T16:36:32Z"}, "message": "re PR c++/65509 ([C++11] GCC rejects operator== with two distinct pointers as not constexpr)\n\n\tPR c++/65509\n\t* decl.c (make_rtl_for_nonlocal_decl): Don't defer static\n\tconstants.\n\nFrom-SVN: r221737", "tree": {"sha": "385edb202ce1e94c15a26c56e3122ef1bd64aef3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/385edb202ce1e94c15a26c56e3122ef1bd64aef3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0b7dccc63e31d11c2f129e569d06cef8c33d2921", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b7dccc63e31d11c2f129e569d06cef8c33d2921", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b7dccc63e31d11c2f129e569d06cef8c33d2921", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b7dccc63e31d11c2f129e569d06cef8c33d2921/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6e85fbaadd3fdbc8127ec13b64fa70e59aef7665", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e85fbaadd3fdbc8127ec13b64fa70e59aef7665", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e85fbaadd3fdbc8127ec13b64fa70e59aef7665"}], "stats": {"total": 44, "additions": 17, "deletions": 27}, "files": [{"sha": "baed6e14732f620b87f2e8b0c4cc819574e056ec", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b7dccc63e31d11c2f129e569d06cef8c33d2921/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b7dccc63e31d11c2f129e569d06cef8c33d2921/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0b7dccc63e31d11c2f129e569d06cef8c33d2921", "patch": "@@ -1,3 +1,9 @@\n+2015-03-27  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/65509\n+\t* decl.c (make_rtl_for_nonlocal_decl): Don't defer static\n+\tconstants.\n+\n 2015-03-26  Mikhail Maltsev  <maltsevm@gmail.com>\n \n \tPR c++/65154"}, {"sha": "f05aefaddfbac364b0b24a0483419845c8327048", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 3, "deletions": 27, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b7dccc63e31d11c2f129e569d06cef8c33d2921/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b7dccc63e31d11c2f129e569d06cef8c33d2921/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=0b7dccc63e31d11c2f129e569d06cef8c33d2921", "patch": "@@ -6061,7 +6061,6 @@ make_rtl_for_nonlocal_decl (tree decl, tree init, const char* asmspec)\n {\n   int toplev = toplevel_bindings_p ();\n   int defer_p;\n-  const char *filename;\n \n   /* Set the DECL_ASSEMBLER_NAME for the object.  */\n   if (asmspec)\n@@ -6109,32 +6108,9 @@ make_rtl_for_nonlocal_decl (tree decl, tree init, const char* asmspec)\n      DECL_EXPR is expanded.  */\n   defer_p = DECL_FUNCTION_SCOPE_P (decl) || DECL_VIRTUAL_P (decl);\n \n-  /* We try to defer namespace-scope static constants so that they are\n-     not emitted into the object file unnecessarily.  */\n-  filename = LOCATION_FILE (input_location);\n-  if (!DECL_VIRTUAL_P (decl)\n-      && TREE_READONLY (decl)\n-      && DECL_INITIAL (decl) != NULL_TREE\n-      && DECL_INITIAL (decl) != error_mark_node\n-      && filename != NULL\n-      && ! EMPTY_CONSTRUCTOR_P (DECL_INITIAL (decl))\n-      && toplev\n-      && !TREE_PUBLIC (decl))\n-    {\n-      /* Fool with the linkage of static consts according to #pragma\n-\t interface.  */\n-      struct c_fileinfo *finfo = get_fileinfo (filename);\n-      if (!finfo->interface_unknown && !TREE_PUBLIC (decl))\n-\t{\n-\t  TREE_PUBLIC (decl) = 1;\n-\t  DECL_EXTERNAL (decl) = finfo->interface_only;\n-\t}\n-\n-      defer_p = 1;\n-    }\n-  /* Likewise for template instantiations.  */\n-  else if (DECL_LANG_SPECIFIC (decl)\n-\t   && DECL_IMPLICIT_INSTANTIATION (decl))\n+  /* Defer template instantiations.  */\n+  if (DECL_LANG_SPECIFIC (decl)\n+      && DECL_IMPLICIT_INSTANTIATION (decl))\n     defer_p = 1;\n \n   /* If we're not deferring, go ahead and assemble the variable.  */"}, {"sha": "2eee1b022e302093773fee5412786fdb2cd1ffdd", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-ptrcomp1.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b7dccc63e31d11c2f129e569d06cef8c33d2921/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ptrcomp1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b7dccc63e31d11c2f129e569d06cef8c33d2921/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ptrcomp1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ptrcomp1.C?ref=0b7dccc63e31d11c2f129e569d06cef8c33d2921", "patch": "@@ -0,0 +1,8 @@\n+// PR c++/65509\n+// { dg-do compile { target c++11 } }\n+\n+const int i1 = 1;\n+const int i2 = 2;\n+\n+#define SA(X) static_assert (X,#X)\n+SA(&i1 != &i2);"}]}