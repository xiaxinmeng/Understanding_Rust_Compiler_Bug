{"sha": "eac8c4b0410083e16d48633b84aa1d61d44712c7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWFjOGM0YjA0MTAwODNlMTZkNDg2MzNiODRhYTFkNjFkNDQ3MTJjNw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2001-05-22T16:42:41Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-05-22T16:42:41Z"}, "message": "rtl.c (read_string): Break out from ...\n\n        * rtl.c (read_string): Break out from ...\n        (read_rtx): ... here.\n\nFrom-SVN: r42452", "tree": {"sha": "e008cc35babbdd3f8c066ddeabf433af10eb8c4d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e008cc35babbdd3f8c066ddeabf433af10eb8c4d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eac8c4b0410083e16d48633b84aa1d61d44712c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eac8c4b0410083e16d48633b84aa1d61d44712c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eac8c4b0410083e16d48633b84aa1d61d44712c7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eac8c4b0410083e16d48633b84aa1d61d44712c7/comments", "author": null, "committer": null, "parents": [{"sha": "9a3db5436d1d46e91ac9e0ac76646fe8385e3f3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a3db5436d1d46e91ac9e0ac76646fe8385e3f3a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a3db5436d1d46e91ac9e0ac76646fe8385e3f3a"}], "stats": {"total": 115, "additions": 68, "deletions": 47}, "files": [{"sha": "86dedd1ea9a36afd1d93c87f9401109be3a84928", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eac8c4b0410083e16d48633b84aa1d61d44712c7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eac8c4b0410083e16d48633b84aa1d61d44712c7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=eac8c4b0410083e16d48633b84aa1d61d44712c7", "patch": "@@ -1,3 +1,8 @@\n+2001-05-22  Richard Henderson  <rth@redhat.com>\n+\n+\t* rtl.c (read_string): Break out from ...\n+\t(read_rtx): ... here.\n+\n 2001-05-22  Gerald Pfeifer  <pfeifer@dbai.tuwien.ac.at>\n \n \t* doc/install.texi (Specific): Remove a bogus and duplicate part"}, {"sha": "0fad136978271a3630225cb3d9fb0afe75829ab6", "filename": "gcc/rtl.c", "status": "modified", "additions": 63, "deletions": 47, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eac8c4b0410083e16d48633b84aa1d61d44712c7/gcc%2Frtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eac8c4b0410083e16d48633b84aa1d61d44712c7/gcc%2Frtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.c?ref=eac8c4b0410083e16d48633b84aa1d61d44712c7", "patch": "@@ -298,6 +298,7 @@ static void fatal_with_file_and_line PARAMS ((FILE *, const char *, ...))\n   ATTRIBUTE_PRINTF_2 ATTRIBUTE_NORETURN;\n static void fatal_expected_char PARAMS ((FILE *, int, int)) ATTRIBUTE_NORETURN;\n static void read_name\t\tPARAMS ((char *, FILE *));\n+static char *read_string\tPARAMS ((struct obstack *, FILE *));\n static unsigned def_hash PARAMS ((const void *));\n static int def_name_eq_p PARAMS ((const void *, const void *));\n static void read_constants PARAMS ((FILE *infile, char *tmp_char));\n@@ -858,6 +859,63 @@ read_name (str, infile)\n \tstrcpy (str, p);\n     }\n }\n+\n+/* Read a double-quoted string onto the obstack.  */\n+\n+static char *\n+read_string (ob, infile)\n+     struct obstack *ob;\n+     FILE *infile;\n+{\n+  char *stringbuf;\n+  int saw_paren = 0;\n+  int c;\n+\n+  c = read_skip_spaces (infile);\n+  if (c == '(')\n+    {\n+      saw_paren = 1;\n+      c = read_skip_spaces (infile);\n+    }\n+  if (c != '\"')\n+    fatal_expected_char (infile, '\"', c);\n+\n+  while (1)\n+    {\n+      c = getc (infile); /* Read the string  */\n+      if (c == '\\n')\n+\tread_rtx_lineno++;\n+      else if (c == '\\\\')\n+\t{\n+\t  c = getc (infile);\t/* Read the string  */\n+\t  /* \\; makes stuff for a C string constant containing\n+\t     newline and tab.  */\n+\t  if (c == ';')\n+\t    {\n+\t      obstack_grow (ob, \"\\\\n\\\\t\", 4);\n+\t      continue;\n+\t    }\n+\t  if (c == '\\n')\n+\t    read_rtx_lineno++;\n+\t}\n+      else if (c == '\"')\n+\tbreak;\n+\n+      obstack_1grow (ob, c);\n+    }\n+\n+  obstack_1grow (ob, 0);\n+  stringbuf = (char *) obstack_finish (ob);\n+\n+  if (saw_paren)\n+    {\n+      c = read_skip_spaces (infile);\n+      if (c != ')')\n+\tfatal_expected_char (infile, ')', c);\n+    }\n+\n+  return stringbuf;\n+}\n \f\n /* Provide a version of a function to read a long long if the system does\n    not provide one.  */\n@@ -1153,49 +1211,15 @@ read_rtx (infile)\n \n       case 's':\n \t{\n-\t  int saw_paren = 0;\n-\t  register char *stringbuf;\n-\t  int saw_anything = 0;\n+\t  char *stringbuf;\n \n-\t  c = read_skip_spaces (infile);\n-\t  if (c == '(')\n-\t    {\n-\t      saw_paren = 1;\n-\t      c = read_skip_spaces (infile);\n-\t    }\n-\t  if (c != '\"')\n-\t    fatal_expected_char (infile, '\"', c);\n-\n-\t  while (1)\n-\t    {\n-\t      c = getc (infile); /* Read the string  */\n-\t      if (c == '\\n')\n-\t\tread_rtx_lineno++;\n-\t      if (c == '\\\\')\n-\t\t{\n-\t\t  c = getc (infile);\t/* Read the string  */\n-\t\t  /* \\; makes stuff for a C string constant containing\n-\t\t     newline and tab.  */\n-\t\t  if (c == ';')\n-\t\t    {\n-\t\t      obstack_grow (&rtl_obstack, \"\\\\n\\\\t\", 4);\n-\t\t      continue;\n-\t\t    }\n-\t\t  if (c == '\\n')\n-\t\t    read_rtx_lineno++;\n-\t\t}\n-\t      else if (c == '\"')\n-\t\tbreak;\n-\n-\t      obstack_1grow (&rtl_obstack, c);\n-\t      saw_anything = 1;\n-\t    }\n+\t  stringbuf = read_string (&rtl_obstack, infile);\n \n \t  /* For insn patterns, we want to provide a default name\n \t     based on the file and line, like \"*foo.md:12\", if the\n \t     given name is blank.  These are only for define_insn and\n \t     define_insn_and_split, to aid debugging.  */\n-\t  if (!saw_anything\n+\t  if (*stringbuf == '\\0'\n \t      && i == 0\n \t      && (GET_CODE (return_rtx) == DEFINE_INSN\n \t\t  || GET_CODE (return_rtx) == DEFINE_INSN_AND_SPLIT))\n@@ -1209,18 +1233,10 @@ read_rtx (infile)\n \t      obstack_1grow (&rtl_obstack, '*');\n \t      obstack_grow (&rtl_obstack, fn, strlen (fn));\n \t      sprintf (line_name, \":%d\", read_rtx_lineno);\n-\t      obstack_grow (&rtl_obstack, line_name, strlen (line_name));\n+\t      obstack_grow (&rtl_obstack, line_name, strlen (line_name)+1);\n+\t      stringbuf = (char *) obstack_finish (&rtl_obstack);\n \t    }\n \n-\t  obstack_1grow (&rtl_obstack, 0);\n-\t  stringbuf = (char *) obstack_finish (&rtl_obstack);\n-\n-\t  if (saw_paren)\n-\t    {\n-\t      c = read_skip_spaces (infile);\n-\t      if (c != ')')\n-\t\tfatal_expected_char (infile, ')', c);\n-\t    }\n \t  XSTR (return_rtx, i) = stringbuf;\n \t}\n \tbreak;"}]}