{"sha": "467d8d51f1304b955136060db0a34e1f80f098bb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDY3ZDhkNTFmMTMwNGI5NTUxMzYwNjBkYjBhMzRlMWY4MGYwOThiYg==", "commit": {"author": {"name": "Sandra Loosemore", "email": "sandra@codesourcery.com", "date": "2015-05-04T19:55:06Z"}, "committer": {"name": "Sandra Loosemore", "email": "sandra@gcc.gnu.org", "date": "2015-05-04T19:55:06Z"}, "message": "common.opt (fdelete-null-pointer-checks): Init to -1.\n\n2015-05-04  Sandra Loosemore  <sandra@codesourcery.com>\n\n\tgcc/\n\t* common.opt (fdelete-null-pointer-checks): Init to -1.\n\t* config/nios2/elf.h (SUBTARGET_OVERRIDE_OPTIONS): Define to\n\toverride flag_delete_null_pointer_checks default.\n\t* doc/invoke.texi (-fdelete-null-pointer-checks): Clarify\n\tbehavior re address zero.  Better document target-specific behavior.\n\t(-fisolate-errneous-paths-dereference): Mention relationship to\n\t-fdelete-null-pointer-checks.\n\n\tgcc/testsuite/\n\t* lib/target-supports.exp\n\t(check_effective_target_keeps_null_pointer_checks): Clarify that\n\tthis is for targets that disable -fdelete-null-pointer-checks,\n\tnot default it to off.\n\t* gcc.dg/ipa/ipa-pta-14.c: Make dependence on\n\t-fdelete-null-pointer-checks explicit.\n\t* gcc.dg/tree-ssa/20030730-1.c: Likewise.\n\t* gcc.dg/tree-ssa/20030730-2.c: Likewise.\n\t* gcc.dg/tree-ssa/isolate-1.c: Likewise.\n\t* gcc.dg/tree-ssa/isolate-2.c: Likewise.\n\t* gcc.dg/tree-ssa/isolate-3.c: Likewise.\n\t* gcc.dg/tree-ssa/isolate-4.c: Likewise.\n\t* gcc.dg/tree-ssa/isolate-5.c: Likewise.\n\t* gcc.dg/tree-ssa/nonzero-1.c: Likewise.\n\t* gcc.dg/tree-ssa/pr20318.c: Likewise.\n\t* gcc.dg/tree-ssa/pr20701.c: Likewise.\n\t* gcc.dg/tree-ssa/pr20702.c: Likewise.\n\t* gcc.dg/tree-ssa/pr21086.c: Likewise.\n\t* gcc.dg/tree-ssa/pr21090.c: Likewise.\n\t* gcc.dg/tree-ssa/pr58480.c: Likewise.\n\t* gcc.dg/tree-ssa/pta-escape-1.c: Likewise.\n\t* gcc.dg/tree-ssa/pta-escape-2.c: Likewise.\n\t* gcc.dg/tree-ssa/pta-escape-3.c: Likewise.\n\t* gcc.dg/tree-ssa/ssa-vrp-thread-1.c: Likewise.\n\t* gcc.dg/tree-ssa/unreachable.c: Likewise.\n\t* gcc.dg/tree-ssa/vrp02.c: Likewise.\n\t* gcc.dg/tree-ssa/vrp07.c: Likewise.\n\t* gcc.dg/tree-ssa/vrp08.c: Likewise.\n\t* gcc.dg/tree-ssa/vrp55.c: Likewise.\n\t* g++.dg/cpp0x/static_assert9.C: Likewise.\n\t* g++.dg/tree-ssa/nonzero-1.C: Likewise.\n\t* g++.dg/tree-ssa/pr19476-1.C: Likewise.\n\t* g++.dg/tree-ssa/pr19476-2.C: Likewise.\n\t* g++.dg/tree-ssa/pr19476-5.C: Likewise.\n\t* g++.dg/tree-ssa/pr26406.C: Likewise.\n\nFrom-SVN: r222777", "tree": {"sha": "9669d1ea198b31f17f6a7dc062d04c07446517f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9669d1ea198b31f17f6a7dc062d04c07446517f7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/467d8d51f1304b955136060db0a34e1f80f098bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/467d8d51f1304b955136060db0a34e1f80f098bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/467d8d51f1304b955136060db0a34e1f80f098bb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/467d8d51f1304b955136060db0a34e1f80f098bb/comments", "author": {"login": "SandraLoosemore", "id": 104087111, "node_id": "U_kgDOBjQ-Rw", "avatar_url": "https://avatars.githubusercontent.com/u/104087111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SandraLoosemore", "html_url": "https://github.com/SandraLoosemore", "followers_url": "https://api.github.com/users/SandraLoosemore/followers", "following_url": "https://api.github.com/users/SandraLoosemore/following{/other_user}", "gists_url": "https://api.github.com/users/SandraLoosemore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SandraLoosemore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SandraLoosemore/subscriptions", "organizations_url": "https://api.github.com/users/SandraLoosemore/orgs", "repos_url": "https://api.github.com/users/SandraLoosemore/repos", "events_url": "https://api.github.com/users/SandraLoosemore/events{/privacy}", "received_events_url": "https://api.github.com/users/SandraLoosemore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "100c8e9e9d896bbfd6d92b8ac7ab506d0090829b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/100c8e9e9d896bbfd6d92b8ac7ab506d0090829b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/100c8e9e9d896bbfd6d92b8ac7ab506d0090829b"}], "stats": {"total": 166, "additions": 120, "deletions": 46}, "files": [{"sha": "116a6d6435952dc00a5ada859a0e4a52d7492b34", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/467d8d51f1304b955136060db0a34e1f80f098bb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/467d8d51f1304b955136060db0a34e1f80f098bb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=467d8d51f1304b955136060db0a34e1f80f098bb", "patch": "@@ -1,3 +1,13 @@\n+2015-05-04  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\t* common.opt (fdelete-null-pointer-checks): Init to -1.\n+\t* config/nios2/elf.h (SUBTARGET_OVERRIDE_OPTIONS): Define to\n+\toverride flag_delete_null_pointer_checks default.\n+\t* doc/invoke.texi (-fdelete-null-pointer-checks): Clarify\n+\tbehavior re address zero.  Better document target-specific behavior.\n+\t(-fisolate-errneous-paths-dereference): Mention relationship to\n+\t-fdelete-null-pointer-checks.\n+\n 2015-05-04  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/65984"}, {"sha": "51833c17e49cd1378bae1759c877b7ca69edd451", "filename": "gcc/common.opt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/467d8d51f1304b955136060db0a34e1f80f098bb/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/467d8d51f1304b955136060db0a34e1f80f098bb/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=467d8d51f1304b955136060db0a34e1f80f098bb", "patch": "@@ -1070,7 +1070,7 @@ Common Report Var(flag_delete_dead_exceptions) Init(0) Optimization\n Delete dead instructions that may throw exceptions\n \n fdelete-null-pointer-checks\n-Common Report Var(flag_delete_null_pointer_checks) Init(1) Optimization\n+Common Report Var(flag_delete_null_pointer_checks) Init(-1) Optimization\n Delete useless null pointer checks\n \n fdevirtualize-at-ltrans"}, {"sha": "84b44d42258cc596fecd2c1f766be250db454c6e", "filename": "gcc/config/nios2/elf.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/467d8d51f1304b955136060db0a34e1f80f098bb/gcc%2Fconfig%2Fnios2%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/467d8d51f1304b955136060db0a34e1f80f098bb/gcc%2Fconfig%2Fnios2%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnios2%2Felf.h?ref=467d8d51f1304b955136060db0a34e1f80f098bb", "patch": "@@ -50,3 +50,12 @@\n /* The ELF target doesn't support the Nios II Linux ABI.  */\n #define TARGET_LINUX_ABI 0\n \n+/* Default -fdelete-null-pointer-checks to off, to prevent the compiler\n+   from treating accesses to address zero as traps.  On bare-metal Nios II\n+   targets address zero may legitimately be mapped to memory (e.g., the\n+   hardware description may specify this as the address of the interrupt\n+   vector).  Users can override this on the command line to get the\n+   additional optimizations it enables.  */\n+#define SUBTARGET_OVERRIDE_OPTIONS \t\t\\\n+  if (flag_delete_null_pointer_checks < 0)\t\\\n+    flag_delete_null_pointer_checks = 0"}, {"sha": "972d3550ca306605d33d36b6d253681b2c4a63a5", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/467d8d51f1304b955136060db0a34e1f80f098bb/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/467d8d51f1304b955136060db0a34e1f80f098bb/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=467d8d51f1304b955136060db0a34e1f80f098bb", "patch": "@@ -8014,20 +8014,23 @@ Enabled by @option{-Os}.\n @item -fdelete-null-pointer-checks\n @opindex fdelete-null-pointer-checks\n Assume that programs cannot safely dereference null pointers, and that\n-no code or data element resides there.  This enables simple constant\n+no code or data element resides at address zero.\n+This option enables simple constant\n folding optimizations at all optimization levels.  In addition, other\n optimization passes in GCC use this flag to control global dataflow\n analyses that eliminate useless checks for null pointers; these assume\n+that a memory access to address zero always results in a trap, so\n that if a pointer is checked after it has already been dereferenced,\n it cannot be null.\n \n Note however that in some environments this assumption is not true.\n Use @option{-fno-delete-null-pointer-checks} to disable this optimization\n for programs that depend on that behavior.\n \n-Some targets, especially embedded ones, disable this option at all levels.\n-Otherwise it is enabled at all levels: @option{-O0}, @option{-O1},\n-@option{-O2}, @option{-O3}, @option{-Os}.  Passes that use the information\n+This option is enabled by default on most targets.  On Nios II ELF, it\n+defaults to off.  On AVR and CR16, this option is completely disabled.  \n+\n+Passes that use the dataflow information\n are enabled independently at different optimization levels.\n \n @item -fdevirtualize\n@@ -8510,7 +8513,8 @@ This flag is enabled by default at @option{-O2} and @option{-Os}.\n Detect paths that trigger erroneous or undefined behavior due to\n dereferencing a null pointer.  Isolate those paths from the main control\n flow and turn the statement with erroneous or undefined behavior into a trap.\n-This flag is enabled by default at @option{-O2} and higher.\n+This flag is enabled by default at @option{-O2} and higher and depends on\n+@option{-fdelete-null-pointer-checks} also being enabled.\n \n @item -fisolate-erroneous-paths-attribute\n @opindex fisolate-erroneous-paths-attribute"}, {"sha": "3673938aab0858af01fe1ca70ce1ce791a5272c2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/467d8d51f1304b955136060db0a34e1f80f098bb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/467d8d51f1304b955136060db0a34e1f80f098bb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=467d8d51f1304b955136060db0a34e1f80f098bb", "patch": "@@ -1,3 +1,41 @@\n+2015-05-04  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\t* lib/target-supports.exp\n+\t(check_effective_target_keeps_null_pointer_checks): Clarify that\n+\tthis is for targets that disable -fdelete-null-pointer-checks,\n+\tnot default it to off.\n+\t* gcc.dg/ipa/ipa-pta-14.c: Make dependence on\n+\t-fdelete-null-pointer-checks explicit.\n+\t* gcc.dg/tree-ssa/20030730-1.c: Likewise.\n+\t* gcc.dg/tree-ssa/20030730-2.c: Likewise.\n+\t* gcc.dg/tree-ssa/isolate-1.c: Likewise.\n+\t* gcc.dg/tree-ssa/isolate-2.c: Likewise.\n+\t* gcc.dg/tree-ssa/isolate-3.c: Likewise.\n+\t* gcc.dg/tree-ssa/isolate-4.c: Likewise.\n+\t* gcc.dg/tree-ssa/isolate-5.c: Likewise.\n+\t* gcc.dg/tree-ssa/nonzero-1.c: Likewise.\n+\t* gcc.dg/tree-ssa/pr20318.c: Likewise.\n+\t* gcc.dg/tree-ssa/pr20701.c: Likewise.\n+\t* gcc.dg/tree-ssa/pr20702.c: Likewise.\n+\t* gcc.dg/tree-ssa/pr21086.c: Likewise.\n+\t* gcc.dg/tree-ssa/pr21090.c: Likewise.\n+\t* gcc.dg/tree-ssa/pr58480.c: Likewise.\n+\t* gcc.dg/tree-ssa/pta-escape-1.c: Likewise.\n+\t* gcc.dg/tree-ssa/pta-escape-2.c: Likewise.\n+\t* gcc.dg/tree-ssa/pta-escape-3.c: Likewise.\n+\t* gcc.dg/tree-ssa/ssa-vrp-thread-1.c: Likewise.\n+\t* gcc.dg/tree-ssa/unreachable.c: Likewise.\n+\t* gcc.dg/tree-ssa/vrp02.c: Likewise.\n+\t* gcc.dg/tree-ssa/vrp07.c: Likewise.\n+\t* gcc.dg/tree-ssa/vrp08.c: Likewise.\n+\t* gcc.dg/tree-ssa/vrp55.c: Likewise.\n+\t* g++.dg/cpp0x/static_assert9.C: Likewise.\n+\t* g++.dg/tree-ssa/nonzero-1.C: Likewise.\n+\t* g++.dg/tree-ssa/pr19476-1.C: Likewise.\n+\t* g++.dg/tree-ssa/pr19476-2.C: Likewise.\n+\t* g++.dg/tree-ssa/pr19476-5.C: Likewise.\n+\t* g++.dg/tree-ssa/pr26406.C: Likewise.\n+\n 2015-05-04  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/65984"}, {"sha": "46d7f25231a15a49083963777b9ac00c63d83b34", "filename": "gcc/testsuite/g++.dg/cpp0x/static_assert9.C", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/467d8d51f1304b955136060db0a34e1f80f098bb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fstatic_assert9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/467d8d51f1304b955136060db0a34e1f80f098bb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fstatic_assert9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fstatic_assert9.C?ref=467d8d51f1304b955136060db0a34e1f80f098bb", "patch": "@@ -1,5 +1,7 @@\n // PR c++/58837\n // { dg-require-effective-target c++11 }\n+// { dg-skip-if \"\" keeps_null_pointer_checks }\n+// { dg-options \"-fdelete-null-pointer-checks\" }\n \n void f();\n static_assert(f, \"\");"}, {"sha": "7b422db702b62a2200f25af7b664d7ccd9b6abd5", "filename": "gcc/testsuite/g++.dg/tree-ssa/nonzero-1.C", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/467d8d51f1304b955136060db0a34e1f80f098bb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fnonzero-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/467d8d51f1304b955136060db0a34e1f80f098bb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fnonzero-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fnonzero-1.C?ref=467d8d51f1304b955136060db0a34e1f80f098bb", "patch": "@@ -1,5 +1,7 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-ccp1\" } */\n+/* { dg-options \"-O2 -fdump-tree-ccp1 -fdelete-null-pointer-checks\" } */\n+/* { dg-skip-if \"\" keeps_null_pointer_checks } */\n+\n inline void t()\n {\n }"}, {"sha": "837975155f71455ad46650e49ad7df0ecf52f783", "filename": "gcc/testsuite/g++.dg/tree-ssa/pr19476-1.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/467d8d51f1304b955136060db0a34e1f80f098bb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr19476-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/467d8d51f1304b955136060db0a34e1f80f098bb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr19476-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr19476-1.C?ref=467d8d51f1304b955136060db0a34e1f80f098bb", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O -fdump-tree-ccp1\" } */\n+/* { dg-options \"-O -fdump-tree-ccp1 -fdelete-null-pointer-checks\" } */\n+/* { dg-skip-if \"\" keeps_null_pointer_checks } */\n \n // See pr19476-5.C for a version without including <new>.\n #include <new>"}, {"sha": "e72a8fbfb5a2a44723d5f84b406c4a79ef528afe", "filename": "gcc/testsuite/g++.dg/tree-ssa/pr19476-2.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/467d8d51f1304b955136060db0a34e1f80f098bb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr19476-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/467d8d51f1304b955136060db0a34e1f80f098bb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr19476-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr19476-2.C?ref=467d8d51f1304b955136060db0a34e1f80f098bb", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+/* { dg-options \"-O2 -fdump-tree-optimized -fdelete-null-pointer-checks\" } */\n+/* { dg-skip-if \"\" keeps_null_pointer_checks } */\n \n #include <new>\n "}, {"sha": "921d7302fd84f136aa5ec6365e72fc3d7e926843", "filename": "gcc/testsuite/g++.dg/tree-ssa/pr19476-5.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/467d8d51f1304b955136060db0a34e1f80f098bb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr19476-5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/467d8d51f1304b955136060db0a34e1f80f098bb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr19476-5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr19476-5.C?ref=467d8d51f1304b955136060db0a34e1f80f098bb", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O -fdump-tree-ccp1\" } */\n+/* { dg-options \"-O -fdump-tree-ccp1 -fdelete-null-pointer-checks\" } */\n+/* { dg-skip-if \"\" keeps_null_pointer_checks } */\n \n // See pr19476-1.C for a version that includes <new>.\n "}, {"sha": "d70e8049f847e3b9e33dbb69f42b61aea2020b3b", "filename": "gcc/testsuite/g++.dg/tree-ssa/pr26406.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/467d8d51f1304b955136060db0a34e1f80f098bb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr26406.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/467d8d51f1304b955136060db0a34e1f80f098bb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr26406.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr26406.C?ref=467d8d51f1304b955136060db0a34e1f80f098bb", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+/* { dg-options \"-O2 -fdump-tree-optimized -fdelete-null-pointer-checks\" } */\n+/* { dg-skip-if \"\" keeps_null_pointer_checks } */\n \n int *f(int *b)\n {"}, {"sha": "091a375ebd0bf9228b693cc88135db10278259d7", "filename": "gcc/testsuite/gcc.dg/ipa/ipa-pta-14.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/467d8d51f1304b955136060db0a34e1f80f098bb/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-pta-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/467d8d51f1304b955136060db0a34e1f80f098bb/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-pta-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-pta-14.c?ref=467d8d51f1304b955136060db0a34e1f80f098bb", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do run } */\n-/* { dg-options \"-O2 -fipa-pta -fno-tree-fre -fno-tree-sra -fdump-ipa-pta-details\" } */\n+/* { dg-options \"-O2 -fipa-pta -fno-tree-fre -fno-tree-sra -fdump-ipa-pta-details -fdelete-null-pointer-checks\" } */\n \n struct X {\n     int i;"}, {"sha": "9f8f2746734d4e475a5ad13c8ace9793800757cd", "filename": "gcc/testsuite/gcc.dg/tree-ssa/20030730-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/467d8d51f1304b955136060db0a34e1f80f098bb/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030730-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/467d8d51f1304b955136060db0a34e1f80f098bb/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030730-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030730-1.c?ref=467d8d51f1304b955136060db0a34e1f80f098bb", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-dom2\" } */\n+/* { dg-options \"-O2 -fdump-tree-dom2 -fdelete-null-pointer-checks\" } */\n      \n extern void exit (int);\n extern void *ggc_alloc (__SIZE_TYPE__);\n@@ -18,7 +18,7 @@ foo (int attr_kind, unsigned long offset)\n     exit (0);\n }\n \n-/* There should be no IF conditionals, unless target has fno-delete-null-pointer-checks  */\n+/* There should be no IF conditionals, unless target disables -fdelete-null-pointer-checks  */\n /* { dg-final { scan-tree-dump-times \"if \" 0 \"dom2\" { target { ! keeps_null_pointer_checks } } } } */\n /* { dg-final { scan-tree-dump \"if \" \"dom2\" { target { keeps_null_pointer_checks } } } } */\n      "}, {"sha": "0be596e8e6406de5397cc2c180c5d6c67ecccf5f", "filename": "gcc/testsuite/gcc.dg/tree-ssa/20030730-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/467d8d51f1304b955136060db0a34e1f80f098bb/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030730-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/467d8d51f1304b955136060db0a34e1f80f098bb/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030730-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030730-2.c?ref=467d8d51f1304b955136060db0a34e1f80f098bb", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-dom2\" } */\n+/* { dg-options \"-O2 -fdump-tree-dom2 -fdelete-null-pointer-checks\" } */\n      \n extern void exit (int);\n extern void *ggc_alloc (__SIZE_TYPE__);\n@@ -18,7 +18,7 @@ foo (int attr_kind, unsigned long offset)\n     exit (0);\n }\n \n-/* There should be no IF conditionals, unless target has fno-delete-null-pointer-checks  */\n+/* There should be no IF conditionals, unless target disables -fdelete-null-pointer-checks  */\n /* { dg-final { scan-tree-dump-times \"if \" 0 \"dom2\" { target { ! keeps_null_pointer_checks } } } } */\n /* { dg-final { scan-tree-dump \"if \" \"dom2\" { target { keeps_null_pointer_checks } } } } */\n "}, {"sha": "be67e4ed127de4a4af7f3ee4542d5016697e9a9a", "filename": "gcc/testsuite/gcc.dg/tree-ssa/isolate-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/467d8d51f1304b955136060db0a34e1f80f098bb/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fisolate-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/467d8d51f1304b955136060db0a34e1f80f098bb/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fisolate-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fisolate-1.c?ref=467d8d51f1304b955136060db0a34e1f80f098bb", "patch": "@@ -1,6 +1,6 @@\n \n /* { dg-do compile } */ \n-/* { dg-options \"-O2 -fdump-tree-isolate-paths\" } */\n+/* { dg-options \"-O2 -fdump-tree-isolate-paths -fdelete-null-pointer-checks\" } */\n /* { dg-skip-if \"\" keeps_null_pointer_checks } */\n \n "}, {"sha": "a7e7514c5fc96bc8f241caa68ee9ab984ff059d6", "filename": "gcc/testsuite/gcc.dg/tree-ssa/isolate-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/467d8d51f1304b955136060db0a34e1f80f098bb/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fisolate-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/467d8d51f1304b955136060db0a34e1f80f098bb/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fisolate-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fisolate-2.c?ref=467d8d51f1304b955136060db0a34e1f80f098bb", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */ \n-/* { dg-options \"-O2 -fisolate-erroneous-paths-attribute -fdump-tree-isolate-paths -fdump-tree-phicprop1\" } */\n+/* { dg-options \"-O2 -fdelete-null-pointer-checks -fisolate-erroneous-paths-attribute -fdump-tree-isolate-paths -fdump-tree-phicprop1\" } */\n /* { dg-skip-if \"\" keeps_null_pointer_checks } */\n \n "}, {"sha": "0fe7e62111d3615567d545089f1a53b4702ca60c", "filename": "gcc/testsuite/gcc.dg/tree-ssa/isolate-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/467d8d51f1304b955136060db0a34e1f80f098bb/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fisolate-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/467d8d51f1304b955136060db0a34e1f80f098bb/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fisolate-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fisolate-3.c?ref=467d8d51f1304b955136060db0a34e1f80f098bb", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */ \n-/* { dg-options \"-O2 -fdump-tree-isolate-paths\" } */\n+/* { dg-options \"-O2 -fdump-tree-isolate-paths -fdelete-null-pointer-checks\" } */\n /* { dg-skip-if \"\" keeps_null_pointer_checks } */\n \n "}, {"sha": "0da4134fd06750f27856c5e58dac6d1113a76b3d", "filename": "gcc/testsuite/gcc.dg/tree-ssa/isolate-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/467d8d51f1304b955136060db0a34e1f80f098bb/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fisolate-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/467d8d51f1304b955136060db0a34e1f80f098bb/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fisolate-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fisolate-4.c?ref=467d8d51f1304b955136060db0a34e1f80f098bb", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */ \n-/* { dg-options \"-O2 -fisolate-erroneous-paths-attribute -fdump-tree-isolate-paths -fdump-tree-phicprop1\" } */\n+/* { dg-options \"-O2 -fdelete-null-pointer-checks -fisolate-erroneous-paths-attribute -fdump-tree-isolate-paths -fdump-tree-phicprop1\" } */\n /* { dg-skip-if \"\" keeps_null_pointer_checks } */\n \n "}, {"sha": "2978413cc37cf598100e2256c278e747b63ee788", "filename": "gcc/testsuite/gcc.dg/tree-ssa/isolate-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/467d8d51f1304b955136060db0a34e1f80f098bb/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fisolate-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/467d8d51f1304b955136060db0a34e1f80f098bb/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fisolate-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fisolate-5.c?ref=467d8d51f1304b955136060db0a34e1f80f098bb", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */ \n-/* { dg-options \"-O2 -fdump-tree-isolate-paths -fdump-tree-optimized\" } */\n+/* { dg-options \"-O2 -fdelete-null-pointer-checks -fdump-tree-isolate-paths -fdump-tree-optimized\" } */\n /* { dg-skip-if \"\" keeps_null_pointer_checks } */\n \n struct demangle_component"}, {"sha": "18ccc604838dae8d8fafe312af7e7267d7eb28fe", "filename": "gcc/testsuite/gcc.dg/tree-ssa/nonzero-1.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/467d8d51f1304b955136060db0a34e1f80f098bb/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fnonzero-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/467d8d51f1304b955136060db0a34e1f80f098bb/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fnonzero-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fnonzero-1.c?ref=467d8d51f1304b955136060db0a34e1f80f098bb", "patch": "@@ -1,5 +1,7 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2\" } */\n+/* { dg-options \"-O2 -fdelete-null-pointer-checks\" } */\n+\n+/* { dg-skip-if \"\" keeps_null_pointer_checks } */\n extern int a; /* { dg-error \"declared weak after being used\" } */\n int\n t()"}, {"sha": "f36184b92085a92c75ec2553f6118ed0af5dd17b", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr20318.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/467d8d51f1304b955136060db0a34e1f80f098bb/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr20318.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/467d8d51f1304b955136060db0a34e1f80f098bb/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr20318.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr20318.c?ref=467d8d51f1304b955136060db0a34e1f80f098bb", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target { ! keeps_null_pointer_checks } } } */\n-/* { dg-options \"-O2 -fdump-tree-original -fdump-tree-vrp1\" } */\n+/* { dg-options \"-O2 -fdump-tree-original -fdump-tree-vrp1 -fdelete-null-pointer-checks\" } */\n \n extern int* f(int) __attribute__((returns_nonnull));\n extern void eliminate ();"}, {"sha": "c49ff7a7ba3300f6cdf8078be1e7f718bef71c36", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr20701.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/467d8d51f1304b955136060db0a34e1f80f098bb/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr20701.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/467d8d51f1304b955136060db0a34e1f80f098bb/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr20701.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr20701.c?ref=467d8d51f1304b955136060db0a34e1f80f098bb", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-vrp1 -fno-early-inlining\" } */\n+/* { dg-options \"-O2 -fdump-tree-vrp1 -fno-early-inlining -fdelete-null-pointer-checks\" } */\n \n typedef struct {\n   int code;\n@@ -35,7 +35,7 @@ can_combine_p (rtx insn, rtx elt)\n   return 0;\n }\n \n-/* Target with fno-delete-null-pointer-checks should not fold checks */\n+/* Target disabling -fdelete-null-pointer-checks should not fold checks */\n /* { dg-final { scan-tree-dump-times \"Folding predicate.*to 0\" 1 \"vrp1\" { target { ! keeps_null_pointer_checks } } } } */\n /* { dg-final { scan-tree-dump-times \"Folding predicate.*to 0\" 0 \"vrp1\" { target {   keeps_null_pointer_checks } } } } */\n /* { dg-final { cleanup-tree-dump \"vrp1\" } } */"}, {"sha": "8313f1aea788481ffc20b3fc830d0bb16578e95c", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr20702.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/467d8d51f1304b955136060db0a34e1f80f098bb/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr20702.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/467d8d51f1304b955136060db0a34e1f80f098bb/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr20702.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr20702.c?ref=467d8d51f1304b955136060db0a34e1f80f098bb", "patch": "@@ -4,7 +4,7 @@\n    immediate successors of the basic block.  */\n \n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fno-tree-dominator-opts -fdump-tree-vrp1-details\" } */\n+/* { dg-options \"-O2 -fno-tree-dominator-opts -fdump-tree-vrp1-details -fdelete-null-pointer-checks\" } */\n \n extern void bar (int);\n \n@@ -25,7 +25,7 @@ foo (int *p, int b)\n   return a;\n }\n \n-/* Target with fno-delete-null-pointer-checks should not fold checks */\n+/* Target disabling -fdelete-null-pointer-checks should not fold checks */\n /* { dg-final { scan-tree-dump-times \"Folding predicate\" 1 \"vrp1\" { target { ! keeps_null_pointer_checks } } } } */\n /* { dg-final { scan-tree-dump-times \"Folding predicate\" 0 \"vrp1\" { target {   keeps_null_pointer_checks } } } } */\n /* { dg-final { cleanup-tree-dump \"vrp1\" } } */"}, {"sha": "6f96f40cbf47aac7c35f432ed860823ddda0482b", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr21086.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/467d8d51f1304b955136060db0a34e1f80f098bb/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21086.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/467d8d51f1304b955136060db0a34e1f80f098bb/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21086.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21086.c?ref=467d8d51f1304b955136060db0a34e1f80f098bb", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-vrp1 -fdump-tree-dce1\" } */\n+/* { dg-options \"-O2 -fdump-tree-vrp1 -fdump-tree-dce1 -fdelete-null-pointer-checks\" } */\n \n int\n foo (int *p)\n@@ -15,7 +15,7 @@ foo (int *p)\n     return 0;\n }\n \n-/* Target with fno-delete-null-pointer-checks should not fold checks */\n+/* Target disabling -fdelete-null-pointer-checks should not fold checks */\n /* { dg-final { scan-tree-dump \"Folding predicate \" \"vrp1\" { target { ! keeps_null_pointer_checks } } } } */\n /* { dg-final { scan-tree-dump-times \"Folding predicate \" 0 \"vrp1\" { target {   keeps_null_pointer_checks } } } } */\n /* { dg-final { scan-tree-dump-not \"b_. =\" \"dce1\" { target { ! avr-*-* } } } } */"}, {"sha": "30abc2034a53de896036526da0ff79299c50a439", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr21090.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/467d8d51f1304b955136060db0a34e1f80f098bb/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21090.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/467d8d51f1304b955136060db0a34e1f80f098bb/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21090.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21090.c?ref=467d8d51f1304b955136060db0a34e1f80f098bb", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-vrp1\" } */\n+/* { dg-options \"-O2 -fdump-tree-vrp1 -fdelete-null-pointer-checks\" } */\n \n int g, h;\n "}, {"sha": "90e4cc0aeb320eac25898b18fb614fb20dfcc51a", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr58480.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/467d8d51f1304b955136060db0a34e1f80f098bb/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr58480.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/467d8d51f1304b955136060db0a34e1f80f098bb/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr58480.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr58480.c?ref=467d8d51f1304b955136060db0a34e1f80f098bb", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target { ! keeps_null_pointer_checks } } } */\n-/* { dg-options \"-O2 -fdump-tree-vrp1\" } */\n+/* { dg-options \"-O2 -fdump-tree-vrp1 -fdelete-null-pointer-checks\" } */\n \n extern void eliminate (void);\n extern void* f1 (void *a, void *b) __attribute__((nonnull));"}, {"sha": "f02d32a479bae20cb2dab36272a2f174cef103d5", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pta-escape-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/467d8d51f1304b955136060db0a34e1f80f098bb/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpta-escape-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/467d8d51f1304b955136060db0a34e1f80f098bb/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpta-escape-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpta-escape-1.c?ref=467d8d51f1304b955136060db0a34e1f80f098bb", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do run } */\n-/* { dg-options \"-O -fdump-tree-alias-details\" } */\n+/* { dg-options \"-O -fdump-tree-alias-details -fdelete-null-pointer-checks\" } */\n \n int *i;\n void __attribute__((noinline))"}, {"sha": "b97e515ba3df2d4308365e6adb7a9562dadebd81", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pta-escape-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/467d8d51f1304b955136060db0a34e1f80f098bb/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpta-escape-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/467d8d51f1304b955136060db0a34e1f80f098bb/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpta-escape-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpta-escape-2.c?ref=467d8d51f1304b955136060db0a34e1f80f098bb", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do run } */\n-/* { dg-options \"-O -fdump-tree-alias-details\" } */\n+/* { dg-options \"-O -fdump-tree-alias-details -fdelete-null-pointer-checks\" } */\n \n int *i;\n void __attribute__((noinline))"}, {"sha": "280b4b221e2ccd8a30c4e630be02977ac1aaeb93", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pta-escape-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/467d8d51f1304b955136060db0a34e1f80f098bb/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpta-escape-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/467d8d51f1304b955136060db0a34e1f80f098bb/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpta-escape-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpta-escape-3.c?ref=467d8d51f1304b955136060db0a34e1f80f098bb", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do run } */\n-/* { dg-options \"-O -fdump-tree-alias-details\" } */\n+/* { dg-options \"-O -fdump-tree-alias-details -fdelete-null-pointer-checks\" } */\n \n int *i;\n void __attribute__((noinline))"}, {"sha": "4f4d9679481d41e233f668e12c39b69ebe920cfc", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-vrp-thread-1.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/467d8d51f1304b955136060db0a34e1f80f098bb/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-vrp-thread-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/467d8d51f1304b955136060db0a34e1f80f098bb/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-vrp-thread-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-vrp-thread-1.c?ref=467d8d51f1304b955136060db0a34e1f80f098bb", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-vrp1-details\" } */\n+/* { dg-options \"-O2 -fdump-tree-vrp1-details -fdelete-null-pointer-checks\" } */\n+/* { dg-skip-if \"\" keeps_null_pointer_checks } */\n \n void oof (void);\n struct basic_block_def;"}, {"sha": "11ff47bcb0772c03636fe15bd4f73fc50d3c645d", "filename": "gcc/testsuite/gcc.dg/tree-ssa/unreachable.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/467d8d51f1304b955136060db0a34e1f80f098bb/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Funreachable.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/467d8d51f1304b955136060db0a34e1f80f098bb/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Funreachable.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Funreachable.c?ref=467d8d51f1304b955136060db0a34e1f80f098bb", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O1 -fdump-tree-optimized\" } */\n+/* { dg-options \"-O1 -fdump-tree-optimized -fdelete-null-pointer-checks\" } */\n static void bad_boy()\n {\n }"}, {"sha": "994c1dbb9cddd15184fdb965302f07559b6fa4ee", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp02.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/467d8d51f1304b955136060db0a34e1f80f098bb/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp02.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/467d8d51f1304b955136060db0a34e1f80f098bb/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp02.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp02.c?ref=467d8d51f1304b955136060db0a34e1f80f098bb", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-vrp1\" } */\n+/* { dg-options \"-O2 -fdump-tree-vrp1 -fdelete-null-pointer-checks\" } */\n \n struct A\n {\n@@ -20,7 +20,7 @@ foo (struct A *p, struct A *q)\n   if (p)\n     return x + p->b;\n }\n-/* Target with fno-delete-null-pointer-checks should not fold check */\n+/* Target disabling -fdelete-null-pointer-checks should not fold check */\n /* { dg-final { scan-tree-dump-times \"Folding predicate p_.*to 1\" 1 \"vrp1\" { target { ! keeps_null_pointer_checks } } } } */\n /* { dg-final { scan-tree-dump-times \"Folding predicate p_.*to 1\" 0 \"vrp1\" { target {   keeps_null_pointer_checks } } } } */\n /* { dg-final { cleanup-tree-dump \"vrp1\" } } */"}, {"sha": "a59a3e83bbc45ec317f819bb7704229243538fc5", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp07.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/467d8d51f1304b955136060db0a34e1f80f098bb/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp07.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/467d8d51f1304b955136060db0a34e1f80f098bb/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp07.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp07.c?ref=467d8d51f1304b955136060db0a34e1f80f098bb", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-vrp1-details\" } */\n+/* { dg-options \"-O2 -fdump-tree-vrp1-details -fdelete-null-pointer-checks\" } */\n \n int\n foo (int i, int *p)\n@@ -30,7 +30,7 @@ foo (int i, int *p)\n \n   return i;\n }\n-/* Target with fno-delete-null-pointer-checks should not fold checks */\n+/* Target disabling -fdelete-null-pointer-checks should not fold checks */\n /* { dg-final { scan-tree-dump-times \"Folding predicate p_.*to 1\" 1 \"vrp1\" } } */\n /* { dg-final { scan-tree-dump-times \"Folding predicate p_.*to 0\" 1 \"vrp1\" { target { ! keeps_null_pointer_checks } } } } */\n /* { dg-final { scan-tree-dump-times \"Folding predicate p_.*to 0\" 0 \"vrp1\" { target {   keeps_null_pointer_checks } } } } */"}, {"sha": "9aff505357df9cf52806e973c249cca413842410", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp08.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/467d8d51f1304b955136060db0a34e1f80f098bb/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp08.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/467d8d51f1304b955136060db0a34e1f80f098bb/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp08.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp08.c?ref=467d8d51f1304b955136060db0a34e1f80f098bb", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fno-tree-fre -fdump-tree-vrp1-details\" } */\n+/* { dg-options \"-O2 -fno-tree-fre -fdump-tree-vrp1-details -fdelete-null-pointer-checks\" } */\n \n /* Compile with -fno-tree-fre -O2 to prevent CSEing *p.  */\n int\n@@ -18,7 +18,7 @@ foo (int a, int *p)\n \n   return a;\n }\n-/* Target with fno-delete-null-pointer-checks should not fold checks */\n+/* Target disabling -fdelete-null-pointer-checks should not fold checks */\n /* { dg-final { scan-tree-dump-times \"Folding predicate p_.*to 1\" 1 \"vrp1\" { target { ! keeps_null_pointer_checks } } } } */\n /* { dg-final { scan-tree-dump-times \"PREDICATE: p_.* ne_expr 0\" 1 \"vrp1\" { target { ! keeps_null_pointer_checks } } } } */\n /* { dg-final { scan-tree-dump-times \"Folding predicate p_.*to 1\" 0 \"vrp1\" { target {   keeps_null_pointer_checks } } } } */"}, {"sha": "d4014abf22b65c8089c579e650bdff7e4da4be1c", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp55.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/467d8d51f1304b955136060db0a34e1f80f098bb/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp55.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/467d8d51f1304b955136060db0a34e1f80f098bb/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp55.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp55.c?ref=467d8d51f1304b955136060db0a34e1f80f098bb", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-vrp1-blocks-vops-details\" } */\n+/* { dg-options \"-O2 -fdump-tree-vrp1-blocks-vops-details -fdelete-null-pointer-checks\" } */\n \n void arf (void);\n "}, {"sha": "d68b48bad21924c9355c92489a4323b11baaa0f8", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/467d8d51f1304b955136060db0a34e1f80f098bb/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/467d8d51f1304b955136060db0a34e1f80f098bb/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=467d8d51f1304b955136060db0a34e1f80f098bb", "patch": "@@ -458,9 +458,11 @@ proc check_effective_target_trampolines { } {\n }\n \n # Return 1 if according to target_info struct and explicit target list\n-# target is supposed to keep null pointer checks. This could be due to \n-# use of option fno-delete-null-pointer-checks or hardwired in target.\n- \n+# target disables -fdelete-null-pointer-checks.  Targets should return 0\n+# if they simply default to -fno-delete-null-pointer-checks but obey\n+# -fdelete-null-pointer-checks when passed explicitly (and tests that \n+# depend on this option should do that).\n+\n proc check_effective_target_keeps_null_pointer_checks { } {\n     if [target_info exists keeps_null_pointer_checks] {\n       return 1"}]}