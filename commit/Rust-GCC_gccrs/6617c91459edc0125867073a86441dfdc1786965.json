{"sha": "6617c91459edc0125867073a86441dfdc1786965", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjYxN2M5MTQ1OWVkYzAxMjU4NjcwNzNhODY0NDFkZmRjMTc4Njk2NQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2005-06-01T12:07:50Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2005-06-01T12:07:50Z"}, "message": "except.c (struct eh_region): Kill unused fields.\n\n\t* except.c (struct eh_region): Kill unused fields.\n\t* basic-block.h (struct basic_block_def): Likewise.\n\nFrom-SVN: r100449", "tree": {"sha": "26cc8b7b5011718c9b8abc60c2fb927b0c276414", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/26cc8b7b5011718c9b8abc60c2fb927b0c276414"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6617c91459edc0125867073a86441dfdc1786965", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6617c91459edc0125867073a86441dfdc1786965", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6617c91459edc0125867073a86441dfdc1786965", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6617c91459edc0125867073a86441dfdc1786965/comments", "author": null, "committer": null, "parents": [{"sha": "5fffc382a653d195d175a0e03f0262fb07962a3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fffc382a653d195d175a0e03f0262fb07962a3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5fffc382a653d195d175a0e03f0262fb07962a3e"}], "stats": {"total": 23, "additions": 7, "deletions": 16}, "files": [{"sha": "45feeac34e5416e0f351ee993cc9d3e6fa984015", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6617c91459edc0125867073a86441dfdc1786965/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6617c91459edc0125867073a86441dfdc1786965/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6617c91459edc0125867073a86441dfdc1786965", "patch": "@@ -1,3 +1,8 @@\n+2005-06-01  Jan Hubicka  <jh@suse.cz>\n+\n+\t* except.c (struct eh_region): Kill unused fields.\n+\t* basic-block.h (struct basic_block_def): Likewise.\n+\n 2005-06-01  J\"orn Rennecke <joern.rennecke@st.com>\n \n \tPR rtl-optimization/21767"}, {"sha": "ad89fa5b69e43aa50e3c3d9ad31286022db958e9", "filename": "gcc/basic-block.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6617c91459edc0125867073a86441dfdc1786965/gcc%2Fbasic-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6617c91459edc0125867073a86441dfdc1786965/gcc%2Fbasic-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbasic-block.h?ref=6617c91459edc0125867073a86441dfdc1786965", "patch": "@@ -265,9 +265,6 @@ struct basic_block_def GTY((chain_next (\"%h.next_bb\"), chain_prev (\"%h.prev_bb\")\n \n   /* Various flags.  See BB_* below.  */\n   int flags;\n-\n-  /* Which section block belongs in, when partitioning basic blocks.  */\n-  int partition;\n };\n \n typedef struct basic_block_def *basic_block;"}, {"sha": "c10fc883df7601be3f2dbc031c47b822d02c8ceb", "filename": "gcc/except.c", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6617c91459edc0125867073a86441dfdc1786965/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6617c91459edc0125867073a86441dfdc1786965/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=6617c91459edc0125867073a86441dfdc1786965", "patch": "@@ -139,8 +139,7 @@ struct eh_region GTY(())\n     ERT_CATCH,\n     ERT_ALLOWED_EXCEPTIONS,\n     ERT_MUST_NOT_THROW,\n-    ERT_THROW,\n-    ERT_FIXUP\n+    ERT_THROW\n   } type;\n \n   /* Holds the action to perform based on the preceding type.  */\n@@ -150,8 +149,6 @@ struct eh_region GTY(())\n     struct eh_region_u_try {\n       struct eh_region *catch;\n       struct eh_region *last_catch;\n-      struct eh_region *prev_try;\n-      rtx continue_label;\n     } GTY ((tag (\"ERT_TRY\"))) try;\n \n     /* The list through the catch handlers, the list of type objects\n@@ -180,13 +177,6 @@ struct eh_region GTY(())\n     struct eh_region_u_cleanup {\n       struct eh_region *prev_try;\n     } GTY ((tag (\"ERT_CLEANUP\"))) cleanup;\n-\n-    /* The real region (by expression and by pointer) that fixup code\n-       should live in.  */\n-    struct eh_region_u_fixup {\n-      struct eh_region *real_region;\n-      bool resolved;\n-    } GTY ((tag (\"ERT_FIXUP\"))) fixup;\n   } GTY ((desc (\"%0.type\"))) u;\n \n   /* Entry point for this region's handler before landing pads are built.  */\n@@ -2430,7 +2420,6 @@ reachable_next_level (struct eh_region *region, tree type_thrown,\n \treturn RNL_BLOCKED;\n \n     case ERT_THROW:\n-    case ERT_FIXUP:\n     case ERT_UNKNOWN:\n       /* Shouldn't see these here.  */\n       gcc_unreachable ();\n@@ -3614,7 +3603,7 @@ dump_eh_tree (FILE *out, struct function *fun)\n   int depth = 0;\n   static const char * const type_name[] = {\"unknown\", \"cleanup\", \"try\", \"catch\",\n \t\t\t\t\t   \"allowed_exceptions\", \"must_not_throw\",\n-\t\t\t\t\t   \"throw\", \"fixup\"};\n+\t\t\t\t\t   \"throw\"};\n \n   i = fun->eh->region_tree;\n   if (! i)"}]}