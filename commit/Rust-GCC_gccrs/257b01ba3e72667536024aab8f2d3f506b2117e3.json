{"sha": "257b01ba3e72667536024aab8f2d3f506b2117e3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjU3YjAxYmEzZTcyNjY3NTM2MDI0YWFiOGYyZDNmNTA2YjIxMTdlMw==", "commit": {"author": {"name": "Marc Glisse", "email": "marc.glisse@inria.fr", "date": "2015-05-22T21:05:26Z"}, "committer": {"name": "Marc Glisse", "email": "glisse@gcc.gnu.org", "date": "2015-05-22T21:05:26Z"}, "message": "re PR other/63387 (Optimize pairs of isnan() calls into a single isunordered())\n\n2015-05-22  Marc Glisse  <marc.glisse@inria.fr>\n\n\tPR tree-optimization/63387\ngcc/\n\t* match.pd ((X /[ex] A) * A -> X): Remove unnecessary condition.\n\t((x ord x) & (y ord y) -> (x ord y),\n\t(x ord x) & (x ord y) -> (x ord y)): New simplifications.\n\t* fold-const.c (tree_unary_nonnegative_warnv_p) <ABS_EXPR>: Handle\n\tvectors like scalars.\ngcc/testsuite/\n\t* gcc.dg/pr63387-2.c: New testcase.\n\nFrom-SVN: r223591", "tree": {"sha": "0661107ebb924daf8be432841222366fbbb22e80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0661107ebb924daf8be432841222366fbbb22e80"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/257b01ba3e72667536024aab8f2d3f506b2117e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/257b01ba3e72667536024aab8f2d3f506b2117e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/257b01ba3e72667536024aab8f2d3f506b2117e3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/257b01ba3e72667536024aab8f2d3f506b2117e3/comments", "author": {"login": "mglisse", "id": 10097863, "node_id": "MDQ6VXNlcjEwMDk3ODYz", "avatar_url": "https://avatars.githubusercontent.com/u/10097863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mglisse", "html_url": "https://github.com/mglisse", "followers_url": "https://api.github.com/users/mglisse/followers", "following_url": "https://api.github.com/users/mglisse/following{/other_user}", "gists_url": "https://api.github.com/users/mglisse/gists{/gist_id}", "starred_url": "https://api.github.com/users/mglisse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mglisse/subscriptions", "organizations_url": "https://api.github.com/users/mglisse/orgs", "repos_url": "https://api.github.com/users/mglisse/repos", "events_url": "https://api.github.com/users/mglisse/events{/privacy}", "received_events_url": "https://api.github.com/users/mglisse/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b8f75b8cde8c632738e447f5493aea7b30be8e32", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8f75b8cde8c632738e447f5493aea7b30be8e32", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8f75b8cde8c632738e447f5493aea7b30be8e32"}], "stats": {"total": 52, "additions": 49, "deletions": 3}, "files": [{"sha": "3d38d45d484e4c5ec8e9b1a969151cb1ac8caeb7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/257b01ba3e72667536024aab8f2d3f506b2117e3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/257b01ba3e72667536024aab8f2d3f506b2117e3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=257b01ba3e72667536024aab8f2d3f506b2117e3", "patch": "@@ -1,3 +1,12 @@\n+2015-05-22  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\tPR tree-optimization/63387\n+\t* match.pd ((X /[ex] A) * A -> X): Remove unnecessary condition.\n+\t((x ord x) & (y ord y) -> (x ord y),\n+\t(x ord x) & (x ord y) -> (x ord y)): New simplifications.\n+\t* fold-const.c (tree_unary_nonnegative_warnv_p) <ABS_EXPR>: Handle\n+\tvectors like scalars.\n+\n 2015-05-22  Marc Glisse  <marc.glisse@inria.fr>\n \n \t* convert.c (convert_to_integer, convert_to_vector): Include the"}, {"sha": "c38a63336d346f08e21a3934953fa50ea3e9701c", "filename": "gcc/fold-const.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/257b01ba3e72667536024aab8f2d3f506b2117e3/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/257b01ba3e72667536024aab8f2d3f506b2117e3/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=257b01ba3e72667536024aab8f2d3f506b2117e3", "patch": "@@ -14688,7 +14688,7 @@ tree_unary_nonnegative_warnv_p (enum tree_code code, tree type, tree op0,\n     case ABS_EXPR:\n       /* We can't return 1 if flag_wrapv is set because\n \t ABS_EXPR<INT_MIN> = INT_MIN.  */\n-      if (!INTEGRAL_TYPE_P (type))\n+      if (!ANY_INTEGRAL_TYPE_P (type))\n \treturn true;\n       if (TYPE_OVERFLOW_UNDEFINED (type))\n \t{"}, {"sha": "3ac364552782ea6346d96511d9094759340cdbab", "filename": "gcc/match.pd", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/257b01ba3e72667536024aab8f2d3f506b2117e3/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/257b01ba3e72667536024aab8f2d3f506b2117e3/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=257b01ba3e72667536024aab8f2d3f506b2117e3", "patch": "@@ -818,8 +818,7 @@ along with GCC; see the file COPYING3.  If not see\n (simplify\n   (mult (convert? (exact_div @0 @1)) @1)\n   /* Look through a sign-changing conversion.  */\n-  (if (TYPE_PRECISION (TREE_TYPE (@0)) == TYPE_PRECISION (type))\n-   (convert @0)))\n+  (convert @0))\n \n /* Canonicalization of binary operations.  */\n \n@@ -970,9 +969,16 @@ along with GCC; see the file COPYING3.  If not see\n  (bit_ior (unordered @0 @0) (unordered @1 @1))\n  (if (types_match (@0, @1))\n   (unordered @0 @1)))\n+(simplify\n+ (bit_and (ordered @0 @0) (ordered @1 @1))\n+ (if (types_match (@0, @1))\n+  (ordered @0 @1)))\n (simplify\n  (bit_ior:c (unordered @0 @0) (unordered:c@2 @0 @1))\n  @2)\n+(simplify\n+ (bit_and:c (ordered @0 @0) (ordered:c@2 @0 @1))\n+ @2)\n \n /* Simplification of math builtins.  */\n "}, {"sha": "fe5d962c36c16a3e42c0cd7bdbeef4d6b3737cf3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/257b01ba3e72667536024aab8f2d3f506b2117e3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/257b01ba3e72667536024aab8f2d3f506b2117e3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=257b01ba3e72667536024aab8f2d3f506b2117e3", "patch": "@@ -1,3 +1,8 @@\n+2015-05-22  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\tPR tree-optimization/63387\n+\t* gcc.dg/pr63387-2.c: New testcase.\n+\n 2015-05-22  Marc Glisse  <marc.glisse@inria.fr>\n \n \t* gcc.dg/simd-1.c: Update to the new message."}, {"sha": "872195a1787954f579fcf4363ef25b054f9c2aa3", "filename": "gcc/testsuite/gcc.dg/pr63387-2.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/257b01ba3e72667536024aab8f2d3f506b2117e3/gcc%2Ftestsuite%2Fgcc.dg%2Fpr63387-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/257b01ba3e72667536024aab8f2d3f506b2117e3/gcc%2Ftestsuite%2Fgcc.dg%2Fpr63387-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr63387-2.c?ref=257b01ba3e72667536024aab8f2d3f506b2117e3", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fdump-tree-optimized\" } */\n+\n+int f(double aaa, double bbb){\n+  int xa = !__builtin_isunordered(aaa, aaa);\n+  int xb = !__builtin_isunordered(bbb, bbb);\n+  return xa & xb;\n+}\n+\n+int g(double aaa, double bbb){\n+  int xa = !__builtin_isunordered(aaa, bbb);\n+  int xb = !__builtin_isunordered(bbb, bbb);\n+  return xa & xb;\n+}\n+\n+int h(double ccc, float ddd){\n+  int xc = !__builtin_isunordered(ccc, ccc);\n+  int xd = !__builtin_isunordered(ddd, ddd);\n+  return xc & xd;\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"aaa\\[^\\n\\r\\]* ord aaa\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-not \"bbb\\[^\\n\\r\\]* ord bbb\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"aaa\\[^\\n\\r\\]* ord bbb\" 2 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-not \"ccc\\[^\\n\\r\\]* ord ddd\" \"optimized\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}]}