{"sha": "0bd729015ccfab7dd1d535fa7a7c17afbda28017", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGJkNzI5MDE1Y2NmYWI3ZGQxZDUzNWZhN2E3YzE3YWZiZGEyODAxNw==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2013-08-01T19:48:46Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2013-08-01T19:48:46Z"}, "message": "i386.h (MAYBE_NON_Q_CLASS_P): New.\n\n\t* config/i386/i386.h (MAYBE_NON_Q_CLASS_P): New.\n\t* config/i386/i386.c (ix86_secondary_reload): Use INTEGER_CLASS_P and\n\tMAYBE_NON_Q_CLASS_P where appropriate.\n\nFrom-SVN: r201415", "tree": {"sha": "963f817c280e41702711ebb78cae3ea64d7acfa7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/963f817c280e41702711ebb78cae3ea64d7acfa7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0bd729015ccfab7dd1d535fa7a7c17afbda28017", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bd729015ccfab7dd1d535fa7a7c17afbda28017", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0bd729015ccfab7dd1d535fa7a7c17afbda28017", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bd729015ccfab7dd1d535fa7a7c17afbda28017/comments", "author": null, "committer": null, "parents": [{"sha": "fb23b69e140ca2448ae7360fe4a71e81e6101aac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb23b69e140ca2448ae7360fe4a71e81e6101aac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb23b69e140ca2448ae7360fe4a71e81e6101aac"}], "stats": {"total": 66, "additions": 37, "deletions": 29}, "files": [{"sha": "5dfbc6f9c3dbf3fdd625dc0dbf8c1cc70d6a6120", "filename": "gcc/ChangeLog", "status": "modified", "additions": 29, "deletions": 20, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bd729015ccfab7dd1d535fa7a7c17afbda28017/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bd729015ccfab7dd1d535fa7a7c17afbda28017/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0bd729015ccfab7dd1d535fa7a7c17afbda28017", "patch": "@@ -1,3 +1,9 @@\n+2013-08-01  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.h (MAYBE_NON_Q_CLASS_P): New.\n+\t* config/i386/i386.c (ix86_secondary_reload): Use INTEGER_CLASS_P and\n+\tMAYBE_NON_Q_CLASS_P where appropriate.\n+\n 2013-08-01  Jan Hubicka  <jh@suse.cz>\n \n \t* cgraph.h (release_function_body): Declare.\n@@ -26,13 +32,16 @@\n \t* tree-inline-transfrom.c (can_remove_node_now_p_1): Do not remove\n \tsymbols used as abstract origins.\n \t* cgraphunit.c (analyze_functions): Update.\n-\t* ipa.c (symtab_remove_unreachable_nodes): Recompute used_as_abstract_origin.\n+\t* ipa.c (symtab_remove_unreachable_nodes): Recompute\n+\tused_as_abstract_origin.\n \t* tree-inline.c (tree_function_versioning): Update\n-\tused_as_abstract_origin; be ready for DECL_RESULT and DECL_ARGUMENTS to be\n-\tNULL.\n+\tused_as_abstract_origin; be ready for DECL_RESULT and\n+\tDECL_ARGUMENTS to be NULL.\n \n-\t* lto-symtab.c (lto_symtab_merge_symbols): Merge duplicated nodes for abstract functions.\n-\t* cgraph.h (symtab_real_symbol_p): Abstract declarations are not real symbols.\n+\t* lto-symtab.c (lto_symtab_merge_symbols): Merge duplicated nodes\n+\tfor abstract functions.\n+\t* cgraph.h (symtab_real_symbol_p): Abstract declarations are not\n+\treal symbols.\n \n 2013-08-01  Jan Hubicka  <jh@suse.cz>\n \n@@ -74,8 +83,7 @@\n \t(emit_fusion_gpr_load): Emit the instructions for power8 load\n \tfusion to GPRs.\n \n-\t* config/rs6000/vsx.md (VSX_M2): New iterator for fusion\n-\tpeepholes.\n+\t* config/rs6000/vsx.md (VSX_M2): New iterator for fusion peepholes.\n \t(VSX load fusion peepholes): New peepholes to fuse together an\n \taddi instruction with a VSX load instruction.\n \n@@ -92,21 +100,22 @@\n \t(arm*-*-*): Add arm/aarch-common-protos.h to tm_p_file.\n \t* config/arm/arm.c (arm_early_load_addr_dep): Move from here to ...\n \t(arm_early_store_addr_dep): Likewise.\n-\t(arm_no_early_alu_shift_dep: Likewise.\n-\t(arm_no_early_alu_shift_value_dep: Likewise.\n-\t(arm_no_early_mul_dep: Likewise.\n-\t(arm_no_early_store_addr_dep: Likewise.\n-\t(arm_mac_accumulator_is_mul_result: Likewise.\n-\t(arm_mac_accumulator_is_result: Likewise.\n+\t(arm_no_early_alu_shift_dep): Likewise.\n+\t(arm_no_early_alu_shift_value_dep): Likewise.\n+\t(arm_no_early_mul_dep): Likewise.\n+\t(arm_no_early_store_addr_dep): Likewise.\n+\t(arm_mac_accumulator_is_mul_result): Likewise.\n+\t(arm_mac_accumulator_is_result): Likewise.\n \t* config/arm/aarch-common.c: ... here.  New file.\n-\t* config/arm/arm-protos.h (arm_early_load_addr_dep): Move from here to ...\n+\t* config/arm/arm-protos.h (arm_early_load_addr_dep): Move from\n+\there to ...\n \t(arm_early_store_addr_dep): Likewise.\n-\t(arm_no_early_alu_shift_dep: Likewise.\n-\t(arm_no_early_alu_shift_value_dep: Likewise.\n-\t(arm_no_early_mul_dep: Likewise.\n-\t(arm_no_early_store_addr_dep: Likewise.\n-\t(arm_mac_accumulator_is_mul_result: Likewise.\n-\t(arm_mac_accumulator_is_result: Likewise.\n+\t(arm_no_early_alu_shift_dep): Likewise.\n+\t(arm_no_early_alu_shift_value_dep): Likewise.\n+\t(arm_no_early_mul_dep): Likewise.\n+\t(arm_no_early_store_addr_dep): Likewise.\n+\t(arm_mac_accumulator_is_mul_result): Likewise.\n+\t(arm_mac_accumulator_is_result): Likewise.\n \t* config/arm/aarch-common-protos.h: ... here.  New file.\n \t* config/arm/t-arm (aarch-common.o): Define.\n "}, {"sha": "df79eac71e4edca7483a4bbf571024a4ec01ba9f", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bd729015ccfab7dd1d535fa7a7c17afbda28017/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bd729015ccfab7dd1d535fa7a7c17afbda28017/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=0bd729015ccfab7dd1d535fa7a7c17afbda28017", "patch": "@@ -33822,7 +33822,7 @@ ix86_secondary_reload (bool in_p, rtx x, reg_class_t rclass,\n   if (TARGET_64BIT\n       && MEM_P (x)\n       && GET_MODE_SIZE (mode) > UNITS_PER_WORD\n-      && rclass == GENERAL_REGS\n+      && INTEGER_CLASS_P (rclass)\n       && !offsettable_memref_p (x))\n     {\n       sri->icode = (in_p\n@@ -33838,12 +33838,8 @@ ix86_secondary_reload (bool in_p, rtx x, reg_class_t rclass,\n      intermediate register on 32bit targets.  */\n   if (!TARGET_64BIT\n       && !in_p && mode == QImode\n-      && (rclass == GENERAL_REGS\n-\t  || rclass == LEGACY_REGS\n-\t  || rclass == NON_Q_REGS\n-\t  || rclass == SIREG\n-\t  || rclass == DIREG\n-\t  || rclass == INDEX_REGS))\n+      && INTEGER_CLASS_P (rclass)\n+      && MAYBE_NON_Q_CLASS_P (rclass))\n     {\n       int regno;\n "}, {"sha": "b618a9136e3c17c851ba242b18600f8253be9a4e", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bd729015ccfab7dd1d535fa7a7c17afbda28017/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bd729015ccfab7dd1d535fa7a7c17afbda28017/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=0bd729015ccfab7dd1d535fa7a7c17afbda28017", "patch": "@@ -1288,13 +1288,16 @@ enum reg_class\n #define MAYBE_FLOAT_CLASS_P(CLASS) \\\n   reg_classes_intersect_p ((CLASS), FLOAT_REGS)\n #define MAYBE_SSE_CLASS_P(CLASS) \\\n-  reg_classes_intersect_p (SSE_REGS, (CLASS))\n+  reg_classes_intersect_p ((CLASS), SSE_REGS)\n #define MAYBE_MMX_CLASS_P(CLASS) \\\n-  reg_classes_intersect_p (MMX_REGS, (CLASS))\n+  reg_classes_intersect_p ((CLASS), MMX_REGS)\n \n #define Q_CLASS_P(CLASS) \\\n   reg_class_subset_p ((CLASS), Q_REGS)\n \n+#define MAYBE_NON_Q_CLASS_P(CLASS) \\\n+  reg_classes_intersect_p ((CLASS), NON_Q_REGS)\n+\n /* Give names of register classes as strings for dump file.  */\n \n #define REG_CLASS_NAMES \\"}]}