{"sha": "c6232ba229a4fcd453b50f11351fcbd35296809c", "node_id": "C_kwDOANBUbNoAKGM2MjMyYmEyMjlhNGZjZDQ1M2I1MGYxMTM1MWZjYmQzNTI5NjgwOWM", "commit": {"author": {"name": "Andrew Pinski", "email": "apinski@marvell.com", "date": "2023-03-01T19:13:21Z"}, "committer": {"name": "Andrew Pinski", "email": "apinski@marvell.com", "date": "2023-03-09T18:28:09Z"}, "message": "Fix PR 108980: note without warning due to array bounds check\n\nThe problem here is after r13-4748-g2a27ae32fabf85, in some\ncases we were calling inform without a corresponding warning.\nThis changes the logic such that we only cause that to happen\nif there was a warning happened before hand.\n\nChanges since\n* v1: Fix formating and dump message as suggested by Jakub.\n\nOK? Bootstrapped and tested on x86_64-linux-gnu with no regressions.\n\ngcc/ChangeLog:\n\n\tPR tree-optimization/108980\n\t* gimple-array-bounds.cc (array_bounds_checker::check_array_ref):\n\tReorgnize the call to warning for not strict flexible arrays\n\tto be before the check of warned.", "tree": {"sha": "90c72caae0dbac71dfaeb51073a545c3668594ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/90c72caae0dbac71dfaeb51073a545c3668594ac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c6232ba229a4fcd453b50f11351fcbd35296809c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6232ba229a4fcd453b50f11351fcbd35296809c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6232ba229a4fcd453b50f11351fcbd35296809c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6232ba229a4fcd453b50f11351fcbd35296809c/comments", "author": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "committer": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3df9760d56662bdf38dd45f7398f003bbd64fdfe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3df9760d56662bdf38dd45f7398f003bbd64fdfe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3df9760d56662bdf38dd45f7398f003bbd64fdfe"}], "stats": {"total": 41, "additions": 26, "deletions": 15}, "files": [{"sha": "34e039adca7436f2fc67608810ed4e76895c9988", "filename": "gcc/gimple-array-bounds.cc", "status": "modified", "additions": 26, "deletions": 15, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6232ba229a4fcd453b50f11351fcbd35296809c/gcc%2Fgimple-array-bounds.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6232ba229a4fcd453b50f11351fcbd35296809c/gcc%2Fgimple-array-bounds.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-array-bounds.cc?ref=c6232ba229a4fcd453b50f11351fcbd35296809c", "patch": "@@ -397,27 +397,38 @@ array_bounds_checker::check_array_ref (location_t location, tree ref,\n \t\t\t       \"of an interior zero-length array %qT\")),\n \t\t\t low_sub, artype);\n \n-  if (warned || out_of_bound)\n+  if (warned && dump_file && (dump_flags & TDF_DETAILS))\n     {\n-      if (warned && dump_file && (dump_flags & TDF_DETAILS))\n+      fprintf (dump_file, \"Array bound warning for \");\n+      dump_generic_expr (MSG_NOTE, TDF_SLIM, ref);\n+      fprintf (dump_file, \"\\n\");\n+    }\n+\n+   /* Issue warnings for -Wstrict-flex-arrays according to the level of\n+      flag_strict_flex_arrays.  */\n+  if (out_of_bound && warn_strict_flex_arrays\n+      && (sam == special_array_member::trail_0\n+\t  || sam == special_array_member::trail_1\n+\t  || sam == special_array_member::trail_n)\n+      && DECL_NOT_FLEXARRAY (afield_decl))\n+    {\n+      bool warned1\n+\t= warning_at (location, OPT_Wstrict_flex_arrays,\n+\t\t      \"trailing array %qT should not be used as \"\n+\t\t      \"a flexible array member\",\n+\t\t      artype);\n+\n+      if (warned1 && dump_file && (dump_flags & TDF_DETAILS))\n \t{\n-\t  fprintf (dump_file, \"Array bound warning for \");\n+\t  fprintf (dump_file, \"Trailing non flexible-like array bound warning for \");\n \t  dump_generic_expr (MSG_NOTE, TDF_SLIM, ref);\n \t  fprintf (dump_file, \"\\n\");\n \t}\n+      warned |= warned1;\n+    }\n \n-      /* issue warnings for -Wstrict-flex-arrays according to the level of\n-\t flag_strict_flex_arrays.  */\n-      if ((out_of_bound && warn_strict_flex_arrays)\n-\t  && (((sam == special_array_member::trail_0)\n-\t\t|| (sam == special_array_member::trail_1)\n-\t\t|| (sam == special_array_member::trail_n))\n-\t      && DECL_NOT_FLEXARRAY (afield_decl)))\n-\t      warned = warning_at (location, OPT_Wstrict_flex_arrays,\n-\t\t\t\t   \"trailing array %qT should not be used as \"\n-\t\t\t\t   \"a flexible array member\",\n-\t\t\t\t   artype);\n-\n+  if (warned)\n+    {\n       /* Avoid more warnings when checking more significant subscripts\n \t of the same expression.  */\n       ref = TREE_OPERAND (ref, 0);"}]}