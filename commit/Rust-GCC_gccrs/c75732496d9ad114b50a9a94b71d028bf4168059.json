{"sha": "c75732496d9ad114b50a9a94b71d028bf4168059", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzc1NzMyNDk2ZDlhZDExNGI1MGE5YTk0YjcxZDAyOGJmNDE2ODA1OQ==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2011-09-23T13:22:43Z"}, "committer": {"name": "Martin Jambor", "email": "jamborm@gcc.gnu.org", "date": "2011-09-23T13:22:43Z"}, "message": "ipa-prop.h (jump_func_type): Updated comments.\n\n2011-09-23  Martin Jambor  <mjambor@suse.cz>\n\n\t* ipa-prop.h (jump_func_type): Updated comments.\n\t(ipa_known_type_data): New type.\n\t(ipa_jump_func): Use it to describe known type jump functions.\n\t* ipa-prop.c (ipa_print_node_jump_functions_for_edge): Updated to\n\treflect the new known type jump function contents.\n\t(compute_known_type_jump_func): Likewise.\n\t(combine_known_type_and_ancestor_jfs): Likewise.\n\t(try_make_edge_direct_virtual_call): Likewise.\n\t(ipa_write_jump_function): Likewise.\n\t(ipa_read_jump_function): Likewise.\n\t* ipa-cp.c (ipa_value_from_known_type_jfunc): New function.\n\t(ipa_value_from_jfunc): Use ipa_value_from_known_type_jfunc.\n\t(propagate_accross_jump_function): Likewise.\n\nFrom-SVN: r179117", "tree": {"sha": "6135c26161cc96ff691578b1f52f3932115d3f86", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6135c26161cc96ff691578b1f52f3932115d3f86"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c75732496d9ad114b50a9a94b71d028bf4168059", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c75732496d9ad114b50a9a94b71d028bf4168059", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c75732496d9ad114b50a9a94b71d028bf4168059", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c75732496d9ad114b50a9a94b71d028bf4168059/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5d94b9886327df3f4b977d4bc0d1d09c1b6d3220", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d94b9886327df3f4b977d4bc0d1d09c1b6d3220", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d94b9886327df3f4b977d4bc0d1d09c1b6d3220"}], "stats": {"total": 131, "additions": 87, "deletions": 44}, "files": [{"sha": "65f8bce51eaa516178b9d7400f0be6cff7af9ed7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c75732496d9ad114b50a9a94b71d028bf4168059/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c75732496d9ad114b50a9a94b71d028bf4168059/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c75732496d9ad114b50a9a94b71d028bf4168059", "patch": "@@ -1,3 +1,19 @@\n+2011-09-23  Martin Jambor  <mjambor@suse.cz>\n+\n+\t* ipa-prop.h (jump_func_type): Updated comments.\n+\t(ipa_known_type_data): New type.\n+\t(ipa_jump_func): Use it to describe known type jump functions.\n+\t* ipa-prop.c (ipa_print_node_jump_functions_for_edge): Updated to\n+\treflect the new known type jump function contents.\n+\t(compute_known_type_jump_func): Likewise.\n+\t(combine_known_type_and_ancestor_jfs): Likewise.\n+\t(try_make_edge_direct_virtual_call): Likewise.\n+\t(ipa_write_jump_function): Likewise.\n+\t(ipa_read_jump_function): Likewise.\n+\t* ipa-cp.c (ipa_value_from_known_type_jfunc): New function.\n+\t(ipa_value_from_jfunc): Use ipa_value_from_known_type_jfunc.\n+\t(propagate_accross_jump_function): Likewise.\n+\n 2011-09-23  Georg-Johann Lay  <avr@gjlay.de>\n \n \tPR target/50446"}, {"sha": "45cb00b21694514a0d041bf632415e99a71915ec", "filename": "gcc/ipa-cp.c", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c75732496d9ad114b50a9a94b71d028bf4168059/gcc%2Fipa-cp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c75732496d9ad114b50a9a94b71d028bf4168059/gcc%2Fipa-cp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-cp.c?ref=c75732496d9ad114b50a9a94b71d028bf4168059", "patch": "@@ -674,6 +674,20 @@ ipa_get_jf_ancestor_result (struct ipa_jump_func *jfunc, tree input)\n     return NULL_TREE;\n }\n \n+/* Extract the acual BINFO being described by JFUNC which must be a known type\n+   jump function.  */\n+\n+static tree\n+ipa_value_from_known_type_jfunc (struct ipa_jump_func *jfunc)\n+{\n+  tree base_binfo = TYPE_BINFO (jfunc->value.known_type.base_type);\n+  if (!base_binfo)\n+    return NULL_TREE;\n+  return get_binfo_at_offset (base_binfo,\n+\t\t\t      jfunc->value.known_type.offset,\n+\t\t\t      jfunc->value.known_type.component_type);\n+}\n+\n /* Determine whether JFUNC evaluates to a known value (that is either a\n    constant or a binfo) and if so, return it.  Otherwise return NULL. INFO\n    describes the caller node so that pass-through jump functions can be\n@@ -685,7 +699,7 @@ ipa_value_from_jfunc (struct ipa_node_params *info, struct ipa_jump_func *jfunc)\n   if (jfunc->type == IPA_JF_CONST)\n     return jfunc->value.constant;\n   else if (jfunc->type == IPA_JF_KNOWN_TYPE)\n-    return jfunc->value.base_binfo;\n+    return ipa_value_from_known_type_jfunc (jfunc);\n   else if (jfunc->type == IPA_JF_PASS_THROUGH\n \t   || jfunc->type == IPA_JF_ANCESTOR)\n     {\n@@ -991,7 +1005,11 @@ propagate_accross_jump_function (struct cgraph_edge *cs,\n       tree val;\n \n       if (jfunc->type == IPA_JF_KNOWN_TYPE)\n-\tval = jfunc->value.base_binfo;\n+\t{\n+\t  val = ipa_value_from_known_type_jfunc (jfunc);\n+\t  if (!val)\n+\t    return set_lattice_contains_variable (dest_lat);\n+\t}\n       else\n \tval = jfunc->value.constant;\n       return add_value_to_lattice (dest_lat, val, cs, NULL, 0);"}, {"sha": "54ba4178020ec7c3f583dccc89b2645fab1ca482", "filename": "gcc/ipa-prop.c", "status": "modified", "additions": 38, "deletions": 40, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c75732496d9ad114b50a9a94b71d028bf4168059/gcc%2Fipa-prop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c75732496d9ad114b50a9a94b71d028bf4168059/gcc%2Fipa-prop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.c?ref=c75732496d9ad114b50a9a94b71d028bf4168059", "patch": "@@ -160,10 +160,12 @@ ipa_print_node_jump_functions_for_edge (FILE *f, struct cgraph_edge *cs)\n \tfprintf (f, \"UNKNOWN\\n\");\n       else if (type == IPA_JF_KNOWN_TYPE)\n \t{\n-\t  tree binfo_type = TREE_TYPE (jump_func->value.base_binfo);\n-\t  fprintf (f, \"KNOWN TYPE, type in binfo is: \");\n-\t  print_generic_expr (f, binfo_type, 0);\n-\t  fprintf (f, \" (%u)\\n\", TYPE_UID (binfo_type));\n+\t  fprintf (f, \"KNOWN TYPE: base  \");\n+\t  print_generic_expr (f, jump_func->value.known_type.base_type, 0);\n+\t  fprintf (f, \", offset \"HOST_WIDE_INT_PRINT_DEC\", component \",\n+\t\t   jump_func->value.known_type.offset);\n+\t  print_generic_expr (f, jump_func->value.known_type.component_type, 0);\n+\t  fprintf (f, \"\\n\");\n \t}\n       else if (type == IPA_JF_CONST)\n \t{\n@@ -634,7 +636,7 @@ compute_known_type_jump_func (tree op, struct ipa_jump_func *jfunc,\n \t\t\t      gimple call)\n {\n   HOST_WIDE_INT offset, size, max_size;\n-  tree base, binfo;\n+  tree base;\n \n   if (!flag_devirtualize\n       || TREE_CODE (op) != ADDR_EXPR\n@@ -650,18 +652,14 @@ compute_known_type_jump_func (tree op, struct ipa_jump_func *jfunc,\n       || is_global_var (base))\n     return;\n \n-  if (detect_type_change (op, base, call, jfunc, offset))\n+  if (detect_type_change (op, base, call, jfunc, offset)\n+      || !TYPE_BINFO (TREE_TYPE (base)))\n     return;\n \n-  binfo = TYPE_BINFO (TREE_TYPE (base));\n-  if (!binfo)\n-    return;\n-  binfo = get_binfo_at_offset (binfo, offset, TREE_TYPE (op));\n-  if (binfo)\n-    {\n-      jfunc->type = IPA_JF_KNOWN_TYPE;\n-      jfunc->value.base_binfo = binfo;\n-    }\n+  jfunc->type = IPA_JF_KNOWN_TYPE;\n+  jfunc->value.known_type.base_type = TREE_TYPE (base);\n+  jfunc->value.known_type.offset = offset;\n+  jfunc->value.known_type.component_type = TREE_TYPE (op);\n }\n \n \n@@ -1500,18 +1498,16 @@ static void\n combine_known_type_and_ancestor_jfs (struct ipa_jump_func *src,\n \t\t\t\t     struct ipa_jump_func *dst)\n {\n-  tree new_binfo;\n+  HOST_WIDE_INT combined_offset;\n+  tree combined_type;\n \n-  new_binfo = get_binfo_at_offset (src->value.base_binfo,\n-\t\t\t\t   dst->value.ancestor.offset,\n-\t\t\t\t   dst->value.ancestor.type);\n-  if (new_binfo)\n-    {\n-      dst->type = IPA_JF_KNOWN_TYPE;\n-      dst->value.base_binfo = new_binfo;\n-    }\n-  else\n-    dst->type = IPA_JF_UNKNOWN;\n+  combined_offset = src->value.known_type.offset + dst->value.ancestor.offset;\n+  combined_type = dst->value.ancestor.type;\n+\n+  dst->type = IPA_JF_KNOWN_TYPE;\n+  dst->value.known_type.base_type = src->value.known_type.base_type;\n+  dst->value.known_type.offset = combined_offset;\n+  dst->value.known_type.component_type = combined_type;\n }\n \n /* Update the jump functions associated with call graph edge E when the call\n@@ -1646,22 +1642,19 @@ static struct cgraph_edge *\n try_make_edge_direct_virtual_call (struct cgraph_edge *ie,\n \t\t\t\t   struct ipa_jump_func *jfunc)\n {\n-  tree binfo, type, target;\n-  HOST_WIDE_INT token;\n-\n-  if (jfunc->type == IPA_JF_KNOWN_TYPE)\n-    binfo = jfunc->value.base_binfo;\n-  else\n-    return NULL;\n+  tree binfo, target;\n \n-  if (!binfo)\n+  if (jfunc->type != IPA_JF_KNOWN_TYPE)\n     return NULL;\n \n-  token = ie->indirect_info->otr_token;\n-  type = ie->indirect_info->otr_type;\n-  binfo = get_binfo_at_offset (binfo, ie->indirect_info->anc_offset, type);\n+  binfo = TYPE_BINFO (jfunc->value.known_type.base_type);\n+  gcc_checking_assert (binfo);\n+  binfo = get_binfo_at_offset (binfo, jfunc->value.known_type.offset\n+\t\t\t       + ie->indirect_info->anc_offset,\n+\t\t\t       ie->indirect_info->otr_type);\n   if (binfo)\n-    target = gimple_get_virt_method_for_binfo (token, binfo);\n+    target = gimple_get_virt_method_for_binfo (ie->indirect_info->otr_token,\n+\t\t\t\t\t       binfo);\n   else\n     return NULL;\n \n@@ -2578,7 +2571,9 @@ ipa_write_jump_function (struct output_block *ob,\n     case IPA_JF_UNKNOWN:\n       break;\n     case IPA_JF_KNOWN_TYPE:\n-      stream_write_tree (ob, jump_func->value.base_binfo, true);\n+      streamer_write_uhwi (ob, jump_func->value.known_type.offset);\n+      stream_write_tree (ob, jump_func->value.known_type.base_type, true);\n+      stream_write_tree (ob, jump_func->value.known_type.component_type, true);\n       break;\n     case IPA_JF_CONST:\n       stream_write_tree (ob, jump_func->value.constant, true);\n@@ -2614,7 +2609,10 @@ ipa_read_jump_function (struct lto_input_block *ib,\n     case IPA_JF_UNKNOWN:\n       break;\n     case IPA_JF_KNOWN_TYPE:\n-      jump_func->value.base_binfo = stream_read_tree (ib, data_in);\n+      jump_func->value.known_type.offset = streamer_read_uhwi (ib);\n+      jump_func->value.known_type.base_type = stream_read_tree (ib, data_in);\n+      jump_func->value.known_type.component_type = stream_read_tree (ib,\n+\t\t\t\t\t\t\t\t     data_in);\n       break;\n     case IPA_JF_CONST:\n       jump_func->value.constant = stream_read_tree (ib, data_in);"}, {"sha": "58caa92c305a284892f9f8be79a4d4de056fc4be", "filename": "gcc/ipa-prop.h", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c75732496d9ad114b50a9a94b71d028bf4168059/gcc%2Fipa-prop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c75732496d9ad114b50a9a94b71d028bf4168059/gcc%2Fipa-prop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.h?ref=c75732496d9ad114b50a9a94b71d028bf4168059", "patch": "@@ -72,13 +72,24 @@ along with GCC; see the file COPYING3.  If not see\n enum jump_func_type\n {\n   IPA_JF_UNKNOWN = 0,  /* newly allocated and zeroed jump functions default */\n-  IPA_JF_KNOWN_TYPE,        /* represented by field base_binfo */\n+  IPA_JF_KNOWN_TYPE,        /* represented by field known_type */\n   IPA_JF_CONST,             /* represented by field costant */\n   IPA_JF_CONST_MEMBER_PTR,  /* represented by field member_cst */\n   IPA_JF_PASS_THROUGH,\t    /* represented by field pass_through */\n   IPA_JF_ANCESTOR\t    /* represented by field ancestor */\n };\n \n+/* Structure holding data required to describe a known type jump function.  */\n+struct GTY(()) ipa_known_type_data\n+{\n+  /* Offset of the component of the base_type being described.  */\n+  HOST_WIDE_INT offset;\n+  /* Type of the whole object.  */\n+  tree base_type;\n+  /* Type of the component of the object that is being described.  */\n+  tree component_type;\n+};\n+\n /* Structure holding data required to describe a pass-through jump function.  */\n \n struct GTY(()) ipa_pass_through_data\n@@ -127,7 +138,7 @@ typedef struct GTY (()) ipa_jump_func\n      functions and member_cst holds constant c++ member functions.  */\n   union jump_func_value\n   {\n-    tree GTY ((tag (\"IPA_JF_KNOWN_TYPE\"))) base_binfo;\n+    struct ipa_known_type_data GTY ((tag (\"IPA_JF_KNOWN_TYPE\"))) known_type;\n     tree GTY ((tag (\"IPA_JF_CONST\"))) constant;\n     struct ipa_member_ptr_cst GTY ((tag (\"IPA_JF_CONST_MEMBER_PTR\"))) member_cst;\n     struct ipa_pass_through_data GTY ((tag (\"IPA_JF_PASS_THROUGH\"))) pass_through;"}]}