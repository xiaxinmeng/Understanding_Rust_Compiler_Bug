{"sha": "b1a207c6df0a9c5555017f65f8731acf8d4c14c2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjFhMjA3YzZkZjBhOWM1NTU1MDE3ZjY1Zjg3MzFhY2Y4ZDRjMTRjMg==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2021-02-03T18:01:32Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2021-02-03T21:06:42Z"}, "message": "libphobos: Merge upstream druntime 9d0c8364, phobos 9d575282e.\n\nDruntime changes:\n\n - Add platform-specific bindings for stdlib.h and sys/syctl.h.\n\n - Add darwin bindings for mach/dyld.h.\n\n - Fix solaris bindings for locale.h (PR98910).\n\n - Remove deprecated bindings from the module headers.\n\nPhobos changes:\n\n - Backport platform-specific fixes for std.conv, std.datetime,\n   std.exception, std.experimental.allocator, std.file, std.math,\n   std.parallelism, std.socket, std.stdio, and std.system.\n\nReviewed-on: https://github.com/dlang/druntime/pull/3363\n\t     https://github.com/dlang/phobos/pull/7784\n\nlibphobos/ChangeLog:\n\n\tPR d/98910\n\t* libdruntime/MERGE: Merge upstream druntime 9d0c8364.\n\t* libdruntime/Makefile.am (DRUNTIME_DSOURCES): Add\n\t  core/internal/attributes.d\n\t(DRUNTIME_DSOURCES_BIONIC): Add core/sys/bionic/stdlib.d.\n\t(DRUNTIME_DSOURCES_DARWIN): Add core/sys/darwin/stdlib.d, and\n\tcore/sys/darwin/sys/sysctl.d.\n\t(DRUNTIME_DSOURCES_DRAGONFLYBSD): Add\n\tcore/sys/dragonflybsd/stdlib.d, and\n\tcore/sys/dragonflybsd/sys/sysctl.d.\n\t(DRUNTIME_DSOURCES_FREEBSD): Add core/sys/freebsd/stdlib.d, and\n\tcore/sys/freebsd/sys/sysctl.d.\n\t(DRUNTIME_DSOURCES_NETBSD): Add core/sys/netbsd/stdlib.d, and\n\tcore/sys/netbsd/sys/sysctl.d.\n\t(DRUNTIME_DSOURCES_OPENBSD): Add core/sys/openbsd/stdlib.d, and\n\tcore/sys/openbsd/sys/sysctl.d.\n\t(DRUNTIME_DSOURCES_SOLARIS): Add core/sys/solaris/stdlib.d.\n\t* libdruntime/Makefile.in: Regenerate.\n\t* src/MERGE: Merge upstream phobos 9d575282e.", "tree": {"sha": "fca99fd7efdcdf6fc71b042be6df26de755c9468", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fca99fd7efdcdf6fc71b042be6df26de755c9468"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b1a207c6df0a9c5555017f65f8731acf8d4c14c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1a207c6df0a9c5555017f65f8731acf8d4c14c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1a207c6df0a9c5555017f65f8731acf8d4c14c2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1a207c6df0a9c5555017f65f8731acf8d4c14c2/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b52a1dfe12a6303c7649f3ff5b8dac6c1001d49a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b52a1dfe12a6303c7649f3ff5b8dac6c1001d49a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b52a1dfe12a6303c7649f3ff5b8dac6c1001d49a"}], "stats": {"total": 2584, "additions": 2172, "deletions": 412}, "files": [{"sha": "3485bde12002883d9abb24a74dd72f199a9024e2", "filename": "libphobos/libdruntime/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1a207c6df0a9c5555017f65f8731acf8d4c14c2/libphobos%2Flibdruntime%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1a207c6df0a9c5555017f65f8731acf8d4c14c2/libphobos%2Flibdruntime%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2FMERGE?ref=b1a207c6df0a9c5555017f65f8731acf8d4c14c2", "patch": "@@ -1,4 +1,4 @@\n-e4aae28e36c118f13e346a61af6c413aadd8e838\n+9d0c8364450064d0b6e68da4384f8acd19eb454f\n \n The first line of this file holds the git revision number of the last\n merge done from the dlang/druntime repository."}, {"sha": "df2c06c3dab9574833247eea4fff599687d4aafb", "filename": "libphobos/libdruntime/Makefile.am", "status": "modified", "additions": 38, "deletions": 31, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1a207c6df0a9c5555017f65f8731acf8d4c14c2/libphobos%2Flibdruntime%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1a207c6df0a9c5555017f65f8731acf8d4c14c2/libphobos%2Flibdruntime%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2FMakefile.am?ref=b1a207c6df0a9c5555017f65f8731acf8d4c14c2", "patch": "@@ -166,7 +166,8 @@ DRUNTIME_CSOURCES = core/stdc/errno_.c\n \n DRUNTIME_DSOURCES = core/atomic.d core/attribute.d core/bitop.d \\\n \tcore/checkedint.d core/cpuid.d core/demangle.d core/exception.d \\\n-\tcore/internal/abort.d core/internal/arrayop.d core/internal/convert.d \\\n+\tcore/internal/abort.d core/internal/arrayop.d \\\n+\tcore/internal/attributes.d core/internal/convert.d \\\n \tcore/internal/hash.d core/internal/spinlock.d core/internal/string.d \\\n \tcore/internal/traits.d core/math.d core/memory.d core/runtime.d \\\n \tcore/simd.d core/stdc/assert_.d core/stdc/complex.d core/stdc/config.d \\\n@@ -201,8 +202,8 @@ DRUNTIME_DSOURCES_STDCXX = core/stdcpp/exception.d \\\n \tcore/stdcpp/typeinfo.d\n \n DRUNTIME_DSOURCES_BIONIC = core/sys/bionic/err.d \\\n-\tcore/sys/bionic/fcntl.d core/sys/bionic/string.d \\\n-\tcore/sys/bionic/unistd.d\n+\tcore/sys/bionic/fcntl.d core/sys/bionic/stdlib.d \\\n+\tcore/sys/bionic/string.d core/sys/bionic/unistd.d\n \n DRUNTIME_DSOURCES_DARWIN = core/sys/darwin/crt_externs.d \\\n \tcore/sys/darwin/dlfcn.d core/sys/darwin/err.d \\\n@@ -212,32 +213,35 @@ DRUNTIME_DSOURCES_DARWIN = core/sys/darwin/crt_externs.d \\\n \tcore/sys/darwin/mach/nlist.d core/sys/darwin/mach/port.d \\\n \tcore/sys/darwin/mach/semaphore.d core/sys/darwin/mach/stab.d \\\n \tcore/sys/darwin/mach/thread_act.d core/sys/darwin/netinet/in_.d \\\n-\tcore/sys/darwin/pthread.d core/sys/darwin/string.d \\\n-\tcore/sys/darwin/sys/attr.d core/sys/darwin/sys/cdefs.d \\\n-\tcore/sys/darwin/sys/event.d core/sys/darwin/sys/mman.d\n+\tcore/sys/darwin/pthread.d core/sys/darwin/stdlib.d \\\n+\tcore/sys/darwin/string.d core/sys/darwin/sys/attr.d \\\n+\tcore/sys/darwin/sys/cdefs.d core/sys/darwin/sys/event.d \\\n+\tcore/sys/darwin/sys/mman.d core/sys/darwin/sys/sysctl.d\n \n DRUNTIME_DSOURCES_DRAGONFLYBSD = core/sys/dragonflybsd/dlfcn.d \\\n \tcore/sys/dragonflybsd/err.d core/sys/dragonflybsd/execinfo.d \\\n \tcore/sys/dragonflybsd/netinet/in_.d core/sys/dragonflybsd/pthread_np.d \\\n-\tcore/sys/dragonflybsd/string.d core/sys/dragonflybsd/sys/_bitset.d \\\n+\tcore/sys/dragonflybsd/stdlib.d core/sys/dragonflybsd/string.d \\\n+\tcore/sys/dragonflybsd/sys/_bitset.d \\\n \tcore/sys/dragonflybsd/sys/_cpuset.d core/sys/dragonflybsd/sys/cdefs.d \\\n \tcore/sys/dragonflybsd/sys/elf.d core/sys/dragonflybsd/sys/elf32.d \\\n \tcore/sys/dragonflybsd/sys/elf64.d \\\n \tcore/sys/dragonflybsd/sys/elf_common.d \\\n \tcore/sys/dragonflybsd/sys/event.d core/sys/dragonflybsd/sys/link_elf.d \\\n \tcore/sys/dragonflybsd/sys/mman.d core/sys/dragonflybsd/sys/socket.d \\\n-\tcore/sys/dragonflybsd/time.d\n+\tcore/sys/dragonflybsd/sys/sysctl.d core/sys/dragonflybsd/time.d\n \n DRUNTIME_DSOURCES_FREEBSD = core/sys/freebsd/config.d \\\n \tcore/sys/freebsd/dlfcn.d core/sys/freebsd/err.d \\\n \tcore/sys/freebsd/execinfo.d core/sys/freebsd/netinet/in_.d \\\n-\tcore/sys/freebsd/pthread_np.d core/sys/freebsd/string.d \\\n-\tcore/sys/freebsd/sys/_bitset.d core/sys/freebsd/sys/_cpuset.d \\\n-\tcore/sys/freebsd/sys/cdefs.d core/sys/freebsd/sys/elf.d \\\n-\tcore/sys/freebsd/sys/elf32.d core/sys/freebsd/sys/elf64.d \\\n-\tcore/sys/freebsd/sys/elf_common.d core/sys/freebsd/sys/event.d \\\n-\tcore/sys/freebsd/sys/link_elf.d core/sys/freebsd/sys/mman.d \\\n-\tcore/sys/freebsd/sys/mount.d core/sys/freebsd/time.d \\\n+\tcore/sys/freebsd/pthread_np.d core/sys/freebsd/stdlib.d \\\n+\tcore/sys/freebsd/string.d core/sys/freebsd/sys/_bitset.d \\\n+\tcore/sys/freebsd/sys/_cpuset.d core/sys/freebsd/sys/cdefs.d \\\n+\tcore/sys/freebsd/sys/elf.d core/sys/freebsd/sys/elf32.d \\\n+\tcore/sys/freebsd/sys/elf64.d core/sys/freebsd/sys/elf_common.d \\\n+\tcore/sys/freebsd/sys/event.d core/sys/freebsd/sys/link_elf.d \\\n+\tcore/sys/freebsd/sys/mman.d core/sys/freebsd/sys/mount.d \\\n+\tcore/sys/freebsd/sys/sysctl.d core/sys/freebsd/time.d \\\n \tcore/sys/freebsd/unistd.d\n \n DRUNTIME_DSOURCES_LINUX = core/sys/linux/config.d \\\n@@ -257,18 +261,20 @@ DRUNTIME_DSOURCES_LINUX = core/sys/linux/config.d \\\n \n DRUNTIME_DSOURCES_NETBSD = core/sys/netbsd/dlfcn.d \\\n \tcore/sys/netbsd/err.d core/sys/netbsd/execinfo.d \\\n-\tcore/sys/netbsd/string.d core/sys/netbsd/sys/elf.d \\\n-\tcore/sys/netbsd/sys/elf32.d core/sys/netbsd/sys/elf64.d \\\n-\tcore/sys/netbsd/sys/elf_common.d core/sys/netbsd/sys/event.d \\\n-\tcore/sys/netbsd/sys/featuretest.d core/sys/netbsd/sys/link_elf.d \\\n-\tcore/sys/netbsd/sys/mman.d core/sys/netbsd/time.d\n+\tcore/sys/netbsd/stdlib.d core/sys/netbsd/string.d \\\n+\tcore/sys/netbsd/sys/elf.d core/sys/netbsd/sys/elf32.d \\\n+\tcore/sys/netbsd/sys/elf64.d core/sys/netbsd/sys/elf_common.d \\\n+\tcore/sys/netbsd/sys/event.d core/sys/netbsd/sys/featuretest.d \\\n+\tcore/sys/netbsd/sys/link_elf.d core/sys/netbsd/sys/mman.d \\\n+\tcore/sys/netbsd/sys/sysctl.d core/sys/netbsd/time.d\n \n DRUNTIME_DSOURCES_OPENBSD = core/sys/openbsd/dlfcn.d \\\n-\tcore/sys/openbsd/err.d core/sys/openbsd/string.d \\\n-\tcore/sys/openbsd/sys/cdefs.d core/sys/openbsd/sys/elf.d \\\n-\tcore/sys/openbsd/sys/elf32.d core/sys/openbsd/sys/elf64.d \\\n-\tcore/sys/openbsd/sys/elf_common.d core/sys/openbsd/sys/link_elf.d \\\n-\tcore/sys/openbsd/sys/mman.d core/sys/openbsd/time.d\n+\tcore/sys/openbsd/err.d core/sys/openbsd/stdlib.d \\\n+\tcore/sys/openbsd/string.d core/sys/openbsd/sys/cdefs.d \\\n+\tcore/sys/openbsd/sys/elf.d core/sys/openbsd/sys/elf32.d \\\n+\tcore/sys/openbsd/sys/elf64.d core/sys/openbsd/sys/elf_common.d \\\n+\tcore/sys/openbsd/sys/link_elf.d core/sys/openbsd/sys/mman.d \\\n+\tcore/sys/openbsd/sys/sysctl.d core/sys/openbsd/time.d\n \n DRUNTIME_DSOURCES_POSIX = core/sys/posix/aio.d \\\n \tcore/sys/posix/arpa/inet.d core/sys/posix/config.d \\\n@@ -300,12 +306,13 @@ DRUNTIME_DSOURCES_POSIX = core/sys/posix/aio.d \\\n DRUNTIME_DSOURCES_SOLARIS = core/sys/solaris/dlfcn.d \\\n \tcore/sys/solaris/elf.d core/sys/solaris/err.d \\\n \tcore/sys/solaris/execinfo.d core/sys/solaris/libelf.d \\\n-\tcore/sys/solaris/link.d core/sys/solaris/sys/elf.d \\\n-\tcore/sys/solaris/sys/elf_386.d core/sys/solaris/sys/elf_SPARC.d \\\n-\tcore/sys/solaris/sys/elf_amd64.d core/sys/solaris/sys/elf_notes.d \\\n-\tcore/sys/solaris/sys/elftypes.d core/sys/solaris/sys/link.d \\\n-\tcore/sys/solaris/sys/priocntl.d core/sys/solaris/sys/procset.d \\\n-\tcore/sys/solaris/sys/types.d core/sys/solaris/time.d\n+\tcore/sys/solaris/link.d core/sys/solaris/stdlib.d \\\n+\tcore/sys/solaris/sys/elf.d core/sys/solaris/sys/elf_386.d \\\n+\tcore/sys/solaris/sys/elf_SPARC.d core/sys/solaris/sys/elf_amd64.d \\\n+\tcore/sys/solaris/sys/elf_notes.d core/sys/solaris/sys/elftypes.d \\\n+\tcore/sys/solaris/sys/link.d core/sys/solaris/sys/priocntl.d \\\n+\tcore/sys/solaris/sys/procset.d core/sys/solaris/sys/types.d \\\n+\tcore/sys/solaris/time.d\n \n DRUNTIME_DSOURCES_WINDOWS = core/sys/windows/accctrl.d \\\n \tcore/sys/windows/aclapi.d core/sys/windows/aclui.d \\"}, {"sha": "aadc6f3ede02bb8c7d87c4e98fa644080ed32e2f", "filename": "libphobos/libdruntime/Makefile.in", "status": "modified", "additions": 102, "deletions": 72, "changes": 174, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1a207c6df0a9c5555017f65f8731acf8d4c14c2/libphobos%2Flibdruntime%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1a207c6df0a9c5555017f65f8731acf8d4c14c2/libphobos%2Flibdruntime%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2FMakefile.in?ref=b1a207c6df0a9c5555017f65f8731acf8d4c14c2", "patch": "@@ -188,31 +188,32 @@ am__dirstamp = $(am__leading_dot)dirstamp\n am__objects_1 = core/atomic.lo core/attribute.lo core/bitop.lo \\\n \tcore/checkedint.lo core/cpuid.lo core/demangle.lo \\\n \tcore/exception.lo core/internal/abort.lo \\\n-\tcore/internal/arrayop.lo core/internal/convert.lo \\\n-\tcore/internal/hash.lo core/internal/spinlock.lo \\\n-\tcore/internal/string.lo core/internal/traits.lo core/math.lo \\\n-\tcore/memory.lo core/runtime.lo core/simd.lo \\\n-\tcore/stdc/assert_.lo core/stdc/complex.lo core/stdc/config.lo \\\n-\tcore/stdc/ctype.lo core/stdc/errno.lo core/stdc/fenv.lo \\\n-\tcore/stdc/float_.lo core/stdc/inttypes.lo core/stdc/limits.lo \\\n-\tcore/stdc/locale.lo core/stdc/math.lo core/stdc/signal.lo \\\n-\tcore/stdc/stdarg.lo core/stdc/stddef.lo core/stdc/stdint.lo \\\n-\tcore/stdc/stdio.lo core/stdc/stdlib.lo core/stdc/string.lo \\\n-\tcore/stdc/tgmath.lo core/stdc/time.lo core/stdc/wchar_.lo \\\n-\tcore/stdc/wctype.lo core/sync/barrier.lo \\\n-\tcore/sync/condition.lo core/sync/config.lo \\\n-\tcore/sync/exception.lo core/sync/mutex.lo core/sync/rwmutex.lo \\\n-\tcore/sync/semaphore.lo core/thread/context.lo \\\n-\tcore/thread/fiber.lo core/thread/osthread.lo \\\n-\tcore/thread/package.lo core/thread/threadbase.lo \\\n-\tcore/thread/threadgroup.lo core/thread/types.lo core/time.lo \\\n-\tcore/vararg.lo gc/bits.lo gc/config.lo gc/gcinterface.lo \\\n-\tgc/impl/conservative/gc.lo gc/impl/manual/gc.lo gc/os.lo \\\n-\tgc/pooltable.lo gc/proxy.lo gcc/attribute.lo gcc/backtrace.lo \\\n-\tgcc/builtins.lo gcc/deh.lo gcc/emutls.lo gcc/gthread.lo \\\n-\tgcc/sections/android.lo gcc/sections/elf_shared.lo \\\n-\tgcc/sections/osx.lo gcc/sections/package.lo \\\n-\tgcc/sections/win32.lo gcc/sections/win64.lo gcc/unwind/arm.lo \\\n+\tcore/internal/arrayop.lo core/internal/attributes.lo \\\n+\tcore/internal/convert.lo core/internal/hash.lo \\\n+\tcore/internal/spinlock.lo core/internal/string.lo \\\n+\tcore/internal/traits.lo core/math.lo core/memory.lo \\\n+\tcore/runtime.lo core/simd.lo core/stdc/assert_.lo \\\n+\tcore/stdc/complex.lo core/stdc/config.lo core/stdc/ctype.lo \\\n+\tcore/stdc/errno.lo core/stdc/fenv.lo core/stdc/float_.lo \\\n+\tcore/stdc/inttypes.lo core/stdc/limits.lo core/stdc/locale.lo \\\n+\tcore/stdc/math.lo core/stdc/signal.lo core/stdc/stdarg.lo \\\n+\tcore/stdc/stddef.lo core/stdc/stdint.lo core/stdc/stdio.lo \\\n+\tcore/stdc/stdlib.lo core/stdc/string.lo core/stdc/tgmath.lo \\\n+\tcore/stdc/time.lo core/stdc/wchar_.lo core/stdc/wctype.lo \\\n+\tcore/sync/barrier.lo core/sync/condition.lo \\\n+\tcore/sync/config.lo core/sync/exception.lo core/sync/mutex.lo \\\n+\tcore/sync/rwmutex.lo core/sync/semaphore.lo \\\n+\tcore/thread/context.lo core/thread/fiber.lo \\\n+\tcore/thread/osthread.lo core/thread/package.lo \\\n+\tcore/thread/threadbase.lo core/thread/threadgroup.lo \\\n+\tcore/thread/types.lo core/time.lo core/vararg.lo gc/bits.lo \\\n+\tgc/config.lo gc/gcinterface.lo gc/impl/conservative/gc.lo \\\n+\tgc/impl/manual/gc.lo gc/os.lo gc/pooltable.lo gc/proxy.lo \\\n+\tgcc/attribute.lo gcc/backtrace.lo gcc/builtins.lo gcc/deh.lo \\\n+\tgcc/emutls.lo gcc/gthread.lo gcc/sections/android.lo \\\n+\tgcc/sections/elf_shared.lo gcc/sections/osx.lo \\\n+\tgcc/sections/package.lo gcc/sections/win32.lo \\\n+\tgcc/sections/win64.lo gcc/unwind/arm.lo \\\n \tgcc/unwind/arm_common.lo gcc/unwind/c6x.lo \\\n \tgcc/unwind/generic.lo gcc/unwind/package.lo gcc/unwind/pe.lo \\\n \tobject.lo rt/aApply.lo rt/aApplyR.lo rt/aaA.lo rt/adi.lo \\\n@@ -263,14 +264,16 @@ am__objects_5 = core/sys/darwin/crt_externs.lo \\\n \tcore/sys/darwin/mach/stab.lo \\\n \tcore/sys/darwin/mach/thread_act.lo \\\n \tcore/sys/darwin/netinet/in_.lo core/sys/darwin/pthread.lo \\\n-\tcore/sys/darwin/string.lo core/sys/darwin/sys/attr.lo \\\n-\tcore/sys/darwin/sys/cdefs.lo core/sys/darwin/sys/event.lo \\\n-\tcore/sys/darwin/sys/mman.lo\n+\tcore/sys/darwin/stdlib.lo core/sys/darwin/string.lo \\\n+\tcore/sys/darwin/sys/attr.lo core/sys/darwin/sys/cdefs.lo \\\n+\tcore/sys/darwin/sys/event.lo core/sys/darwin/sys/mman.lo \\\n+\tcore/sys/darwin/sys/sysctl.lo\n @DRUNTIME_OS_DARWIN_TRUE@am__objects_6 = $(am__objects_5)\n am__objects_7 = core/sys/dragonflybsd/dlfcn.lo \\\n \tcore/sys/dragonflybsd/err.lo core/sys/dragonflybsd/execinfo.lo \\\n \tcore/sys/dragonflybsd/netinet/in_.lo \\\n \tcore/sys/dragonflybsd/pthread_np.lo \\\n+\tcore/sys/dragonflybsd/stdlib.lo \\\n \tcore/sys/dragonflybsd/string.lo \\\n \tcore/sys/dragonflybsd/sys/_bitset.lo \\\n \tcore/sys/dragonflybsd/sys/_cpuset.lo \\\n@@ -283,39 +286,43 @@ am__objects_7 = core/sys/dragonflybsd/dlfcn.lo \\\n \tcore/sys/dragonflybsd/sys/link_elf.lo \\\n \tcore/sys/dragonflybsd/sys/mman.lo \\\n \tcore/sys/dragonflybsd/sys/socket.lo \\\n+\tcore/sys/dragonflybsd/sys/sysctl.lo \\\n \tcore/sys/dragonflybsd/time.lo\n @DRUNTIME_OS_DRAGONFLYBSD_TRUE@am__objects_8 = $(am__objects_7)\n am__objects_9 = core/sys/bionic/err.lo core/sys/bionic/fcntl.lo \\\n-\tcore/sys/bionic/string.lo core/sys/bionic/unistd.lo\n+\tcore/sys/bionic/stdlib.lo core/sys/bionic/string.lo \\\n+\tcore/sys/bionic/unistd.lo\n @DRUNTIME_OS_ANDROID_TRUE@am__objects_10 = $(am__objects_9)\n am__objects_11 = core/sys/freebsd/config.lo core/sys/freebsd/dlfcn.lo \\\n \tcore/sys/freebsd/err.lo core/sys/freebsd/execinfo.lo \\\n \tcore/sys/freebsd/netinet/in_.lo core/sys/freebsd/pthread_np.lo \\\n-\tcore/sys/freebsd/string.lo core/sys/freebsd/sys/_bitset.lo \\\n+\tcore/sys/freebsd/stdlib.lo core/sys/freebsd/string.lo \\\n+\tcore/sys/freebsd/sys/_bitset.lo \\\n \tcore/sys/freebsd/sys/_cpuset.lo core/sys/freebsd/sys/cdefs.lo \\\n \tcore/sys/freebsd/sys/elf.lo core/sys/freebsd/sys/elf32.lo \\\n \tcore/sys/freebsd/sys/elf64.lo \\\n \tcore/sys/freebsd/sys/elf_common.lo \\\n \tcore/sys/freebsd/sys/event.lo core/sys/freebsd/sys/link_elf.lo \\\n \tcore/sys/freebsd/sys/mman.lo core/sys/freebsd/sys/mount.lo \\\n-\tcore/sys/freebsd/time.lo core/sys/freebsd/unistd.lo\n+\tcore/sys/freebsd/sys/sysctl.lo core/sys/freebsd/time.lo \\\n+\tcore/sys/freebsd/unistd.lo\n @DRUNTIME_OS_FREEBSD_TRUE@am__objects_12 = $(am__objects_11)\n am__objects_13 = core/sys/netbsd/dlfcn.lo core/sys/netbsd/err.lo \\\n-\tcore/sys/netbsd/execinfo.lo core/sys/netbsd/string.lo \\\n-\tcore/sys/netbsd/sys/elf.lo core/sys/netbsd/sys/elf32.lo \\\n-\tcore/sys/netbsd/sys/elf64.lo core/sys/netbsd/sys/elf_common.lo \\\n-\tcore/sys/netbsd/sys/event.lo \\\n+\tcore/sys/netbsd/execinfo.lo core/sys/netbsd/stdlib.lo \\\n+\tcore/sys/netbsd/string.lo core/sys/netbsd/sys/elf.lo \\\n+\tcore/sys/netbsd/sys/elf32.lo core/sys/netbsd/sys/elf64.lo \\\n+\tcore/sys/netbsd/sys/elf_common.lo core/sys/netbsd/sys/event.lo \\\n \tcore/sys/netbsd/sys/featuretest.lo \\\n \tcore/sys/netbsd/sys/link_elf.lo core/sys/netbsd/sys/mman.lo \\\n-\tcore/sys/netbsd/time.lo\n+\tcore/sys/netbsd/sys/sysctl.lo core/sys/netbsd/time.lo\n @DRUNTIME_OS_NETBSD_TRUE@am__objects_14 = $(am__objects_13)\n am__objects_15 = core/sys/openbsd/dlfcn.lo core/sys/openbsd/err.lo \\\n-\tcore/sys/openbsd/string.lo core/sys/openbsd/sys/cdefs.lo \\\n-\tcore/sys/openbsd/sys/elf.lo core/sys/openbsd/sys/elf32.lo \\\n-\tcore/sys/openbsd/sys/elf64.lo \\\n+\tcore/sys/openbsd/stdlib.lo core/sys/openbsd/string.lo \\\n+\tcore/sys/openbsd/sys/cdefs.lo core/sys/openbsd/sys/elf.lo \\\n+\tcore/sys/openbsd/sys/elf32.lo core/sys/openbsd/sys/elf64.lo \\\n \tcore/sys/openbsd/sys/elf_common.lo \\\n \tcore/sys/openbsd/sys/link_elf.lo core/sys/openbsd/sys/mman.lo \\\n-\tcore/sys/openbsd/time.lo\n+\tcore/sys/openbsd/sys/sysctl.lo core/sys/openbsd/time.lo\n @DRUNTIME_OS_OPENBSD_TRUE@am__objects_16 = $(am__objects_15)\n am__objects_17 = core/sys/linux/config.lo core/sys/linux/dlfcn.lo \\\n \tcore/sys/linux/elf.lo core/sys/linux/epoll.lo \\\n@@ -422,7 +429,8 @@ am__objects_19 = core/sys/windows/accctrl.lo \\\n am__objects_21 = core/sys/solaris/dlfcn.lo core/sys/solaris/elf.lo \\\n \tcore/sys/solaris/err.lo core/sys/solaris/execinfo.lo \\\n \tcore/sys/solaris/libelf.lo core/sys/solaris/link.lo \\\n-\tcore/sys/solaris/sys/elf.lo core/sys/solaris/sys/elf_386.lo \\\n+\tcore/sys/solaris/stdlib.lo core/sys/solaris/sys/elf.lo \\\n+\tcore/sys/solaris/sys/elf_386.lo \\\n \tcore/sys/solaris/sys/elf_SPARC.lo \\\n \tcore/sys/solaris/sys/elf_amd64.lo \\\n \tcore/sys/solaris/sys/elf_notes.lo \\\n@@ -784,7 +792,8 @@ libgdruntime_convenience_la_LINK = $(libgdruntime_la_LINK)\n DRUNTIME_CSOURCES = core/stdc/errno_.c\n DRUNTIME_DSOURCES = core/atomic.d core/attribute.d core/bitop.d \\\n \tcore/checkedint.d core/cpuid.d core/demangle.d core/exception.d \\\n-\tcore/internal/abort.d core/internal/arrayop.d core/internal/convert.d \\\n+\tcore/internal/abort.d core/internal/arrayop.d \\\n+\tcore/internal/attributes.d core/internal/convert.d \\\n \tcore/internal/hash.d core/internal/spinlock.d core/internal/string.d \\\n \tcore/internal/traits.d core/math.d core/memory.d core/runtime.d \\\n \tcore/simd.d core/stdc/assert_.d core/stdc/complex.d core/stdc/config.d \\\n@@ -819,8 +828,8 @@ DRUNTIME_DSOURCES_STDCXX = core/stdcpp/exception.d \\\n \tcore/stdcpp/typeinfo.d\n \n DRUNTIME_DSOURCES_BIONIC = core/sys/bionic/err.d \\\n-\tcore/sys/bionic/fcntl.d core/sys/bionic/string.d \\\n-\tcore/sys/bionic/unistd.d\n+\tcore/sys/bionic/fcntl.d core/sys/bionic/stdlib.d \\\n+\tcore/sys/bionic/string.d core/sys/bionic/unistd.d\n \n DRUNTIME_DSOURCES_DARWIN = core/sys/darwin/crt_externs.d \\\n \tcore/sys/darwin/dlfcn.d core/sys/darwin/err.d \\\n@@ -830,32 +839,35 @@ DRUNTIME_DSOURCES_DARWIN = core/sys/darwin/crt_externs.d \\\n \tcore/sys/darwin/mach/nlist.d core/sys/darwin/mach/port.d \\\n \tcore/sys/darwin/mach/semaphore.d core/sys/darwin/mach/stab.d \\\n \tcore/sys/darwin/mach/thread_act.d core/sys/darwin/netinet/in_.d \\\n-\tcore/sys/darwin/pthread.d core/sys/darwin/string.d \\\n-\tcore/sys/darwin/sys/attr.d core/sys/darwin/sys/cdefs.d \\\n-\tcore/sys/darwin/sys/event.d core/sys/darwin/sys/mman.d\n+\tcore/sys/darwin/pthread.d core/sys/darwin/stdlib.d \\\n+\tcore/sys/darwin/string.d core/sys/darwin/sys/attr.d \\\n+\tcore/sys/darwin/sys/cdefs.d core/sys/darwin/sys/event.d \\\n+\tcore/sys/darwin/sys/mman.d core/sys/darwin/sys/sysctl.d\n \n DRUNTIME_DSOURCES_DRAGONFLYBSD = core/sys/dragonflybsd/dlfcn.d \\\n \tcore/sys/dragonflybsd/err.d core/sys/dragonflybsd/execinfo.d \\\n \tcore/sys/dragonflybsd/netinet/in_.d core/sys/dragonflybsd/pthread_np.d \\\n-\tcore/sys/dragonflybsd/string.d core/sys/dragonflybsd/sys/_bitset.d \\\n+\tcore/sys/dragonflybsd/stdlib.d core/sys/dragonflybsd/string.d \\\n+\tcore/sys/dragonflybsd/sys/_bitset.d \\\n \tcore/sys/dragonflybsd/sys/_cpuset.d core/sys/dragonflybsd/sys/cdefs.d \\\n \tcore/sys/dragonflybsd/sys/elf.d core/sys/dragonflybsd/sys/elf32.d \\\n \tcore/sys/dragonflybsd/sys/elf64.d \\\n \tcore/sys/dragonflybsd/sys/elf_common.d \\\n \tcore/sys/dragonflybsd/sys/event.d core/sys/dragonflybsd/sys/link_elf.d \\\n \tcore/sys/dragonflybsd/sys/mman.d core/sys/dragonflybsd/sys/socket.d \\\n-\tcore/sys/dragonflybsd/time.d\n+\tcore/sys/dragonflybsd/sys/sysctl.d core/sys/dragonflybsd/time.d\n \n DRUNTIME_DSOURCES_FREEBSD = core/sys/freebsd/config.d \\\n \tcore/sys/freebsd/dlfcn.d core/sys/freebsd/err.d \\\n \tcore/sys/freebsd/execinfo.d core/sys/freebsd/netinet/in_.d \\\n-\tcore/sys/freebsd/pthread_np.d core/sys/freebsd/string.d \\\n-\tcore/sys/freebsd/sys/_bitset.d core/sys/freebsd/sys/_cpuset.d \\\n-\tcore/sys/freebsd/sys/cdefs.d core/sys/freebsd/sys/elf.d \\\n-\tcore/sys/freebsd/sys/elf32.d core/sys/freebsd/sys/elf64.d \\\n-\tcore/sys/freebsd/sys/elf_common.d core/sys/freebsd/sys/event.d \\\n-\tcore/sys/freebsd/sys/link_elf.d core/sys/freebsd/sys/mman.d \\\n-\tcore/sys/freebsd/sys/mount.d core/sys/freebsd/time.d \\\n+\tcore/sys/freebsd/pthread_np.d core/sys/freebsd/stdlib.d \\\n+\tcore/sys/freebsd/string.d core/sys/freebsd/sys/_bitset.d \\\n+\tcore/sys/freebsd/sys/_cpuset.d core/sys/freebsd/sys/cdefs.d \\\n+\tcore/sys/freebsd/sys/elf.d core/sys/freebsd/sys/elf32.d \\\n+\tcore/sys/freebsd/sys/elf64.d core/sys/freebsd/sys/elf_common.d \\\n+\tcore/sys/freebsd/sys/event.d core/sys/freebsd/sys/link_elf.d \\\n+\tcore/sys/freebsd/sys/mman.d core/sys/freebsd/sys/mount.d \\\n+\tcore/sys/freebsd/sys/sysctl.d core/sys/freebsd/time.d \\\n \tcore/sys/freebsd/unistd.d\n \n DRUNTIME_DSOURCES_LINUX = core/sys/linux/config.d \\\n@@ -875,18 +887,20 @@ DRUNTIME_DSOURCES_LINUX = core/sys/linux/config.d \\\n \n DRUNTIME_DSOURCES_NETBSD = core/sys/netbsd/dlfcn.d \\\n \tcore/sys/netbsd/err.d core/sys/netbsd/execinfo.d \\\n-\tcore/sys/netbsd/string.d core/sys/netbsd/sys/elf.d \\\n-\tcore/sys/netbsd/sys/elf32.d core/sys/netbsd/sys/elf64.d \\\n-\tcore/sys/netbsd/sys/elf_common.d core/sys/netbsd/sys/event.d \\\n-\tcore/sys/netbsd/sys/featuretest.d core/sys/netbsd/sys/link_elf.d \\\n-\tcore/sys/netbsd/sys/mman.d core/sys/netbsd/time.d\n+\tcore/sys/netbsd/stdlib.d core/sys/netbsd/string.d \\\n+\tcore/sys/netbsd/sys/elf.d core/sys/netbsd/sys/elf32.d \\\n+\tcore/sys/netbsd/sys/elf64.d core/sys/netbsd/sys/elf_common.d \\\n+\tcore/sys/netbsd/sys/event.d core/sys/netbsd/sys/featuretest.d \\\n+\tcore/sys/netbsd/sys/link_elf.d core/sys/netbsd/sys/mman.d \\\n+\tcore/sys/netbsd/sys/sysctl.d core/sys/netbsd/time.d\n \n DRUNTIME_DSOURCES_OPENBSD = core/sys/openbsd/dlfcn.d \\\n-\tcore/sys/openbsd/err.d core/sys/openbsd/string.d \\\n-\tcore/sys/openbsd/sys/cdefs.d core/sys/openbsd/sys/elf.d \\\n-\tcore/sys/openbsd/sys/elf32.d core/sys/openbsd/sys/elf64.d \\\n-\tcore/sys/openbsd/sys/elf_common.d core/sys/openbsd/sys/link_elf.d \\\n-\tcore/sys/openbsd/sys/mman.d core/sys/openbsd/time.d\n+\tcore/sys/openbsd/err.d core/sys/openbsd/stdlib.d \\\n+\tcore/sys/openbsd/string.d core/sys/openbsd/sys/cdefs.d \\\n+\tcore/sys/openbsd/sys/elf.d core/sys/openbsd/sys/elf32.d \\\n+\tcore/sys/openbsd/sys/elf64.d core/sys/openbsd/sys/elf_common.d \\\n+\tcore/sys/openbsd/sys/link_elf.d core/sys/openbsd/sys/mman.d \\\n+\tcore/sys/openbsd/sys/sysctl.d core/sys/openbsd/time.d\n \n DRUNTIME_DSOURCES_POSIX = core/sys/posix/aio.d \\\n \tcore/sys/posix/arpa/inet.d core/sys/posix/config.d \\\n@@ -918,12 +932,13 @@ DRUNTIME_DSOURCES_POSIX = core/sys/posix/aio.d \\\n DRUNTIME_DSOURCES_SOLARIS = core/sys/solaris/dlfcn.d \\\n \tcore/sys/solaris/elf.d core/sys/solaris/err.d \\\n \tcore/sys/solaris/execinfo.d core/sys/solaris/libelf.d \\\n-\tcore/sys/solaris/link.d core/sys/solaris/sys/elf.d \\\n-\tcore/sys/solaris/sys/elf_386.d core/sys/solaris/sys/elf_SPARC.d \\\n-\tcore/sys/solaris/sys/elf_amd64.d core/sys/solaris/sys/elf_notes.d \\\n-\tcore/sys/solaris/sys/elftypes.d core/sys/solaris/sys/link.d \\\n-\tcore/sys/solaris/sys/priocntl.d core/sys/solaris/sys/procset.d \\\n-\tcore/sys/solaris/sys/types.d core/sys/solaris/time.d\n+\tcore/sys/solaris/link.d core/sys/solaris/stdlib.d \\\n+\tcore/sys/solaris/sys/elf.d core/sys/solaris/sys/elf_386.d \\\n+\tcore/sys/solaris/sys/elf_SPARC.d core/sys/solaris/sys/elf_amd64.d \\\n+\tcore/sys/solaris/sys/elf_notes.d core/sys/solaris/sys/elftypes.d \\\n+\tcore/sys/solaris/sys/link.d core/sys/solaris/sys/priocntl.d \\\n+\tcore/sys/solaris/sys/procset.d core/sys/solaris/sys/types.d \\\n+\tcore/sys/solaris/time.d\n \n DRUNTIME_DSOURCES_WINDOWS = core/sys/windows/accctrl.d \\\n \tcore/sys/windows/aclapi.d core/sys/windows/aclui.d \\\n@@ -1106,6 +1121,7 @@ core/internal/$(am__dirstamp):\n \t@: > core/internal/$(am__dirstamp)\n core/internal/abort.lo: core/internal/$(am__dirstamp)\n core/internal/arrayop.lo: core/internal/$(am__dirstamp)\n+core/internal/attributes.lo: core/internal/$(am__dirstamp)\n core/internal/convert.lo: core/internal/$(am__dirstamp)\n core/internal/hash.lo: core/internal/$(am__dirstamp)\n core/internal/spinlock.lo: core/internal/$(am__dirstamp)\n@@ -1347,6 +1363,7 @@ core/sys/darwin/netinet/$(am__dirstamp):\n core/sys/darwin/netinet/in_.lo:  \\\n \tcore/sys/darwin/netinet/$(am__dirstamp)\n core/sys/darwin/pthread.lo: core/sys/darwin/$(am__dirstamp)\n+core/sys/darwin/stdlib.lo: core/sys/darwin/$(am__dirstamp)\n core/sys/darwin/string.lo: core/sys/darwin/$(am__dirstamp)\n core/sys/darwin/sys/$(am__dirstamp):\n \t@$(MKDIR_P) core/sys/darwin/sys\n@@ -1355,6 +1372,7 @@ core/sys/darwin/sys/attr.lo: core/sys/darwin/sys/$(am__dirstamp)\n core/sys/darwin/sys/cdefs.lo: core/sys/darwin/sys/$(am__dirstamp)\n core/sys/darwin/sys/event.lo: core/sys/darwin/sys/$(am__dirstamp)\n core/sys/darwin/sys/mman.lo: core/sys/darwin/sys/$(am__dirstamp)\n+core/sys/darwin/sys/sysctl.lo: core/sys/darwin/sys/$(am__dirstamp)\n core/sys/dragonflybsd/$(am__dirstamp):\n \t@$(MKDIR_P) core/sys/dragonflybsd\n \t@: > core/sys/dragonflybsd/$(am__dirstamp)\n@@ -1369,6 +1387,8 @@ core/sys/dragonflybsd/netinet/in_.lo:  \\\n \tcore/sys/dragonflybsd/netinet/$(am__dirstamp)\n core/sys/dragonflybsd/pthread_np.lo:  \\\n \tcore/sys/dragonflybsd/$(am__dirstamp)\n+core/sys/dragonflybsd/stdlib.lo:  \\\n+\tcore/sys/dragonflybsd/$(am__dirstamp)\n core/sys/dragonflybsd/string.lo:  \\\n \tcore/sys/dragonflybsd/$(am__dirstamp)\n core/sys/dragonflybsd/sys/$(am__dirstamp):\n@@ -1396,12 +1416,15 @@ core/sys/dragonflybsd/sys/mman.lo:  \\\n \tcore/sys/dragonflybsd/sys/$(am__dirstamp)\n core/sys/dragonflybsd/sys/socket.lo:  \\\n \tcore/sys/dragonflybsd/sys/$(am__dirstamp)\n+core/sys/dragonflybsd/sys/sysctl.lo:  \\\n+\tcore/sys/dragonflybsd/sys/$(am__dirstamp)\n core/sys/dragonflybsd/time.lo: core/sys/dragonflybsd/$(am__dirstamp)\n core/sys/bionic/$(am__dirstamp):\n \t@$(MKDIR_P) core/sys/bionic\n \t@: > core/sys/bionic/$(am__dirstamp)\n core/sys/bionic/err.lo: core/sys/bionic/$(am__dirstamp)\n core/sys/bionic/fcntl.lo: core/sys/bionic/$(am__dirstamp)\n+core/sys/bionic/stdlib.lo: core/sys/bionic/$(am__dirstamp)\n core/sys/bionic/string.lo: core/sys/bionic/$(am__dirstamp)\n core/sys/bionic/unistd.lo: core/sys/bionic/$(am__dirstamp)\n core/sys/freebsd/$(am__dirstamp):\n@@ -1417,6 +1440,7 @@ core/sys/freebsd/netinet/$(am__dirstamp):\n core/sys/freebsd/netinet/in_.lo:  \\\n \tcore/sys/freebsd/netinet/$(am__dirstamp)\n core/sys/freebsd/pthread_np.lo: core/sys/freebsd/$(am__dirstamp)\n+core/sys/freebsd/stdlib.lo: core/sys/freebsd/$(am__dirstamp)\n core/sys/freebsd/string.lo: core/sys/freebsd/$(am__dirstamp)\n core/sys/freebsd/sys/$(am__dirstamp):\n \t@$(MKDIR_P) core/sys/freebsd/sys\n@@ -1434,6 +1458,7 @@ core/sys/freebsd/sys/link_elf.lo:  \\\n \tcore/sys/freebsd/sys/$(am__dirstamp)\n core/sys/freebsd/sys/mman.lo: core/sys/freebsd/sys/$(am__dirstamp)\n core/sys/freebsd/sys/mount.lo: core/sys/freebsd/sys/$(am__dirstamp)\n+core/sys/freebsd/sys/sysctl.lo: core/sys/freebsd/sys/$(am__dirstamp)\n core/sys/freebsd/time.lo: core/sys/freebsd/$(am__dirstamp)\n core/sys/freebsd/unistd.lo: core/sys/freebsd/$(am__dirstamp)\n core/sys/netbsd/$(am__dirstamp):\n@@ -1442,6 +1467,7 @@ core/sys/netbsd/$(am__dirstamp):\n core/sys/netbsd/dlfcn.lo: core/sys/netbsd/$(am__dirstamp)\n core/sys/netbsd/err.lo: core/sys/netbsd/$(am__dirstamp)\n core/sys/netbsd/execinfo.lo: core/sys/netbsd/$(am__dirstamp)\n+core/sys/netbsd/stdlib.lo: core/sys/netbsd/$(am__dirstamp)\n core/sys/netbsd/string.lo: core/sys/netbsd/$(am__dirstamp)\n core/sys/netbsd/sys/$(am__dirstamp):\n \t@$(MKDIR_P) core/sys/netbsd/sys\n@@ -1456,12 +1482,14 @@ core/sys/netbsd/sys/featuretest.lo:  \\\n \tcore/sys/netbsd/sys/$(am__dirstamp)\n core/sys/netbsd/sys/link_elf.lo: core/sys/netbsd/sys/$(am__dirstamp)\n core/sys/netbsd/sys/mman.lo: core/sys/netbsd/sys/$(am__dirstamp)\n+core/sys/netbsd/sys/sysctl.lo: core/sys/netbsd/sys/$(am__dirstamp)\n core/sys/netbsd/time.lo: core/sys/netbsd/$(am__dirstamp)\n core/sys/openbsd/$(am__dirstamp):\n \t@$(MKDIR_P) core/sys/openbsd\n \t@: > core/sys/openbsd/$(am__dirstamp)\n core/sys/openbsd/dlfcn.lo: core/sys/openbsd/$(am__dirstamp)\n core/sys/openbsd/err.lo: core/sys/openbsd/$(am__dirstamp)\n+core/sys/openbsd/stdlib.lo: core/sys/openbsd/$(am__dirstamp)\n core/sys/openbsd/string.lo: core/sys/openbsd/$(am__dirstamp)\n core/sys/openbsd/sys/$(am__dirstamp):\n \t@$(MKDIR_P) core/sys/openbsd/sys\n@@ -1475,6 +1503,7 @@ core/sys/openbsd/sys/elf_common.lo:  \\\n core/sys/openbsd/sys/link_elf.lo:  \\\n \tcore/sys/openbsd/sys/$(am__dirstamp)\n core/sys/openbsd/sys/mman.lo: core/sys/openbsd/sys/$(am__dirstamp)\n+core/sys/openbsd/sys/sysctl.lo: core/sys/openbsd/sys/$(am__dirstamp)\n core/sys/openbsd/time.lo: core/sys/openbsd/$(am__dirstamp)\n core/sys/linux/$(am__dirstamp):\n \t@$(MKDIR_P) core/sys/linux\n@@ -1698,6 +1727,7 @@ core/sys/solaris/err.lo: core/sys/solaris/$(am__dirstamp)\n core/sys/solaris/execinfo.lo: core/sys/solaris/$(am__dirstamp)\n core/sys/solaris/libelf.lo: core/sys/solaris/$(am__dirstamp)\n core/sys/solaris/link.lo: core/sys/solaris/$(am__dirstamp)\n+core/sys/solaris/stdlib.lo: core/sys/solaris/$(am__dirstamp)\n core/sys/solaris/sys/$(am__dirstamp):\n \t@$(MKDIR_P) core/sys/solaris/sys\n \t@: > core/sys/solaris/sys/$(am__dirstamp)"}, {"sha": "b7253c23e9bb434a942286ff8145e11a9a938749", "filename": "libphobos/libdruntime/core/internal/attributes.d", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1a207c6df0a9c5555017f65f8731acf8d4c14c2/libphobos%2Flibdruntime%2Fcore%2Finternal%2Fattributes.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1a207c6df0a9c5555017f65f8731acf8d4c14c2/libphobos%2Flibdruntime%2Fcore%2Finternal%2Fattributes.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Finternal%2Fattributes.d?ref=b1a207c6df0a9c5555017f65f8731acf8d4c14c2", "patch": "@@ -0,0 +1,11 @@\n+module core.internal.attributes;\n+\n+/**\n+Used to annotate `unittest`s which need to be tested in a `-betterC` environment.\n+\n+Such `unittest`s will be compiled and executed without linking druntime in, with\n+a `__traits(getUnitTests, mixin(__MODULE__))` style test runner.\n+Note that just like any other `unittest` in druntime, they will also be compiled\n+and executed without `-betterC`.\n+*/\n+package(core) enum betterC = 1;"}, {"sha": "46fabe5a0e6e3f7a429399ae21fa10179f01204e", "filename": "libphobos/libdruntime/core/sys/bionic/stdlib.d", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1a207c6df0a9c5555017f65f8731acf8d4c14c2/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fbionic%2Fstdlib.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1a207c6df0a9c5555017f65f8731acf8d4c14c2/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fbionic%2Fstdlib.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fbionic%2Fstdlib.d?ref=b1a207c6df0a9c5555017f65f8731acf8d4c14c2", "patch": "@@ -0,0 +1,17 @@\n+/**\n+  * D header file for Bionic stdlib.h.\n+  *\n+  * Copyright: Copyright \u00a9 2021, The D Language Foundation\n+  * License: <a href=\"http://www.boost.org/LICENSE_1_0.txt\">Boost License 1.0</a>.\n+  * Authors: Iain Buclaw\n+  */\n+module core.sys.bionic.stdlib;\n+public import core.sys.posix.stdlib;\n+\n+version (CRuntime_Bionic):\n+extern (C):\n+nothrow:\n+@nogc:\n+\n+const(char)* getprogname();\n+void setprogname(scope const char* name);"}, {"sha": "6e28bfa655b677ec4034751aa60f32410fa5b053", "filename": "libphobos/libdruntime/core/sys/darwin/mach/dyld.d", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1a207c6df0a9c5555017f65f8731acf8d4c14c2/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fdarwin%2Fmach%2Fdyld.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1a207c6df0a9c5555017f65f8731acf8d4c14c2/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fdarwin%2Fmach%2Fdyld.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fdarwin%2Fmach%2Fdyld.d?ref=b1a207c6df0a9c5555017f65f8731acf8d4c14c2", "patch": "@@ -33,7 +33,10 @@ uint         _dyld_image_count();\n const(char)* _dyld_get_image_name(uint image_index);\n mach_header* _dyld_get_image_header(uint image_index);\n intptr_t     _dyld_get_image_vmaddr_slide(uint image_index);\n+\n void         _dyld_register_func_for_add_image(void function(const scope mach_header* mh, intptr_t vmaddr_slide));\n void         _dyld_register_func_for_remove_image(void function(const scope mach_header* mh, intptr_t vmaddr_slide));\n \n-\n+int NSVersionOfRunTimeLibrary(const char* libraryPath);\n+int NSVersionOfLinkTimeLibrary(const char* libraryPath);\n+int _NSGetExecutablePath(char* buf, uint* bufsize);"}, {"sha": "287eaa038e42dc4c86af9f0f8a7614c556513d55", "filename": "libphobos/libdruntime/core/sys/darwin/stdlib.d", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1a207c6df0a9c5555017f65f8731acf8d4c14c2/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fdarwin%2Fstdlib.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1a207c6df0a9c5555017f65f8731acf8d4c14c2/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fdarwin%2Fstdlib.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fdarwin%2Fstdlib.d?ref=b1a207c6df0a9c5555017f65f8731acf8d4c14c2", "patch": "@@ -0,0 +1,26 @@\n+/**\n+  * D header file for Darwin stdlib.h.\n+  *\n+  * Copyright: Copyright \u00a9 2021, The D Language Foundation\n+  * License: <a href=\"http://www.boost.org/LICENSE_1_0.txt\">Boost License 1.0</a>.\n+  * Authors: Iain Buclaw\n+  */\n+module core.sys.darwin.stdlib;\n+public import core.sys.posix.stdlib;\n+\n+version (OSX)\n+    version = Darwin;\n+else version (iOS)\n+    version = Darwin;\n+else version (TVOS)\n+    version = Darwin;\n+else version (WatchOS)\n+    version = Darwin;\n+\n+version (Darwin):\n+extern (C):\n+nothrow:\n+@nogc:\n+\n+const(char)* getprogname();\n+void setprogname(scope const char* name);"}, {"sha": "6af16cc8f508878282bd429b6bcd0989e70aaa2a", "filename": "libphobos/libdruntime/core/sys/darwin/sys/sysctl.d", "status": "added", "additions": 253, "deletions": 0, "changes": 253, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1a207c6df0a9c5555017f65f8731acf8d4c14c2/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fdarwin%2Fsys%2Fsysctl.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1a207c6df0a9c5555017f65f8731acf8d4c14c2/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fdarwin%2Fsys%2Fsysctl.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fdarwin%2Fsys%2Fsysctl.d?ref=b1a207c6df0a9c5555017f65f8731acf8d4c14c2", "patch": "@@ -0,0 +1,253 @@\n+/**\n+  * D header file for Darwin sys/sysctl.h\n+  *\n+  * Copyright: Copyright \u00a9 2021, The D Language Foundation\n+  * License: <a href=\"http://www.boost.org/LICENSE_1_0.txt\">Boost License 1.0</a>.\n+  * Authors: Iain Buclaw\n+  */\n+module core.sys.darwin.sys.sysctl;\n+\n+version (OSX)\n+    version = Darwin;\n+else version (iOS)\n+    version = Darwin;\n+else version (TVOS)\n+    version = Darwin;\n+else version (WatchOS)\n+    version = Darwin;\n+\n+version (Darwin):\n+extern (C):\n+nothrow:\n+@nogc:\n+\n+// Top-level identifiers\n+enum\n+{\n+    CTL_UNSPEC   = 0,\n+    CTL_KERN     = 1,\n+    CTL_VM       = 2,\n+    CTL_VFS      = 3,\n+    CTL_NET      = 4,\n+    CTL_DEBUG    = 5,\n+    CTL_HW       = 6,\n+    CTL_MACHDEP  = 7,\n+    CTL_USER     = 8,\n+    CTL_MAXID    = 9,\n+}\n+\n+// CTL_KERN identifiers\n+enum\n+{\n+    KERN_OSTYPE             = 1,\n+    KERN_OSRELEASE          = 2,\n+    KERN_OSREV              = 3,\n+    KERN_VERSION            = 4,\n+    KERN_MAXVNODES          = 5,\n+    KERN_MAXPROC            = 6,\n+    KERN_MAXFILES           = 7,\n+    KERN_ARGMAX             = 8,\n+    KERN_SECURELVL          = 9,\n+    KERN_HOSTNAME           = 10,\n+    KERN_HOSTID             = 11,\n+    KERN_CLOCKRATE          = 12,\n+    KERN_VNODE              = 13,\n+    KERN_PROC               = 14,\n+    KERN_FILE               = 15,\n+    KERN_PROF               = 16,\n+    KERN_POSIX1             = 17,\n+    KERN_NGROUPS            = 18,\n+    KERN_JOB_CONTROL        = 19,\n+    KERN_SAVED_IDS          = 20,\n+    KERN_BOOTTIME           = 21,\n+    KERN_NISDOMAINNAME      = 22,\n+    KERN_DOMAINNAME         = KERN_NISDOMAINNAME,\n+    KERN_MAXPARTITIONS      = 23,\n+    KERN_KDEBUG             = 24,\n+    KERN_UPDATEINTERVAL     = 25,\n+    KERN_OSRELDATE          = 26,\n+    KERN_NTP_PLL            = 27,\n+    KERN_BOOTFILE           = 28,\n+    KERN_MAXFILESPERPROC    = 29,\n+    KERN_MAXPROCPERUID      = 30,\n+    KERN_DUMPDEV            = 31,\n+    KERN_IPC                = 32,\n+    KERN_DUMMY              = 33,\n+    KERN_PS_STRINGS         = 34,\n+    KERN_USRSTACK32         = 35,\n+    KERN_LOGSIGEXIT         = 36,\n+    KERN_SYMFILE            = 37,\n+    KERN_PROCARGS           = 38,\n+    KERN_NETBOOT            = 40,\n+    KERN_SYSV               = 42,\n+    KERN_AFFINITY           = 43,\n+    KERN_TRANSLATE          = 44,\n+    KERN_CLASSIC            = KERN_TRANSLATE,\n+    KERN_EXEC               = 45,\n+    KERN_CLASSICHANDLER     = KERN_EXEC,\n+    KERN_AIOMAX             = 46,\n+    KERN_AIOPROCMAX         = 47,\n+    KERN_AIOTHREADS         = 48,\n+    KERN_PROCARGS2          = 49,\n+    KERN_COREFILE           = 50,\n+    KERN_COREDUMP           = 51,\n+    KERN_SUGID_COREDUMP     = 52,\n+    KERN_PROCDELAYTERM      = 53,\n+    KERN_SHREG_PRIVATIZABLE = 54,\n+    KERN_LOW_PRI_WINDOW     = 56,\n+    KERN_LOW_PRI_DELAY      = 57,\n+    KERN_POSIX              = 58,\n+    KERN_USRSTACK64         = 59,\n+    KERN_NX_PROTECTION      = 60,\n+    KERN_TFP                = 61,\n+    KERN_PROCNAME           = 62,\n+    KERN_THALTSTACK         = 63,\n+    KERN_SPECULATIVE_READS  = 64,\n+    KERN_OSVERSION          = 65,\n+    KERN_SAFEBOOT           = 66,\n+    KERN_RAGEVNODE          = 68,\n+    KERN_TTY                = 69,\n+    KERN_CHECKOPENEVT       = 70,\n+    KERN_THREADNAME         = 71,\n+    KERN_MAXID              = 72,\n+}\n+\n+// KERN_RAGEVNODE types\n+enum\n+{\n+    KERN_RAGE_PROC     = 1,\n+    KERN_RAGE_THREAD   = 2,\n+    KERN_UNRAGE_PROC   = 3,\n+    KERN_UNRAGE_THREAD = 4,\n+}\n+\n+// KERN_OPENEVT types\n+enum\n+{\n+    KERN_OPENEVT_PROC   = 1,\n+    KERN_UNOPENEVT_PROC = 2,\n+}\n+\n+// KERN_TFP types\n+enum\n+{\n+    KERN_TFP_POLICY = 1,\n+}\n+\n+// KERN_TFP_POLICY values\n+enum\n+{\n+    KERN_TFP_POLICY_DENY    = 0,\n+    KERN_TFP_POLICY_DEFAULT = 2,\n+}\n+\n+// KERN_PROC subtypes\n+enum\n+{\n+    KERN_PROC_ALL     = 0,\n+    KERN_PROC_PID     = 1,\n+    KERN_PROC_PGRP    = 2,\n+    KERN_PROC_SESSION = 3,\n+    KERN_PROC_TTY     = 4,\n+    KERN_PROC_UID     = 5,\n+    KERN_PROC_RUID    = 6,\n+    KERN_PROC_LCID    = 7,\n+}\n+\n+// KERN_VFSNSPACE subtypes\n+enum\n+{\n+    KERN_VFSNSPACE_HANDLE_PROC   = 1,\n+    KERN_VFSNSPACE_UNHANDLE_PROC = 2,\n+}\n+\n+// KERN_IPC identifiers\n+enum\n+{\n+    KIPC_MAXSOCKBUF     = 1,\n+    KIPC_SOCKBUF_WASTE  = 2,\n+    KIPC_SOMAXCONN      = 3,\n+    KIPC_MAX_LINKHDR    = 4,\n+    KIPC_MAX_PROTOHDR   = 5,\n+    KIPC_MAX_HDR        = 6,\n+    KIPC_MAX_DATALEN    = 7,\n+    KIPC_MBSTAT         = 8,\n+    KIPC_NMBCLUSTERS    = 9,\n+    KIPC_SOQLIMITCOMPAT = 10,\n+}\n+\n+// CTL_VM identifiers\n+enum\n+{\n+    VM_METER      = 1,\n+    VM_LOADAVG    = 2,\n+    VM_MACHFACTOR = 4,\n+    VM_SWAPUSAGE  = 5,\n+    VM_MAXID      = 6,\n+}\n+\n+// CTL_HW identifiers\n+enum\n+{\n+    HW_MACHINE      = 1,\n+    HW_MODEL        = 2,\n+    HW_NCPU         = 3,\n+    HW_BYTEORDER    = 4,\n+    HW_PHYSMEM      = 5,\n+    HW_USERMEM      = 6,\n+    HW_PAGESIZE     = 7,\n+    HW_DISKNAMES    = 8,\n+    HW_DISKSTATS    = 9,\n+    HW_EPOCH        = 10,\n+    HW_FLOATINGPT   = 11,\n+    HW_MACHINE_ARCH = 12,\n+    HW_VECTORUNIT   = 13,\n+    HW_BUS_FREQ     = 14,\n+    HW_CPU_FREQ     = 15,\n+    HW_CACHELINE    = 16,\n+    HW_L1ICACHESIZE = 17,\n+    HW_L1DCACHESIZE = 18,\n+    HW_L2SETTINGS   = 19,\n+    HW_L2CACHESIZE  = 20,\n+    HW_L3SETTINGS   = 21,\n+    HW_L3CACHESIZE  = 22,\n+    HW_TB_FREQ      = 23,\n+    HW_MEMSIZE      = 24,\n+    HW_AVAILCPU     = 25,\n+    HW_MAXID        = 26,\n+}\n+\n+// CTL_USER identifiers\n+enum\n+{\n+    USER_CS_PATH           = 1,\n+    USER_BC_BASE_MAX       = 2,\n+    USER_BC_DIM_MAX        = 3,\n+    USER_BC_SCALE_MAX      = 4,\n+    USER_BC_STRING_MAX     = 5,\n+    USER_COLL_WEIGHTS_MAX  = 6,\n+    USER_EXPR_NEST_MAX     = 7,\n+    USER_LINE_MAX          = 8,\n+    USER_RE_DUP_MAX        = 9,\n+    USER_POSIX2_VERSION    = 10,\n+    USER_POSIX2_C_BIND     = 11,\n+    USER_POSIX2_C_DEV      = 12,\n+    USER_POSIX2_CHAR_TERM  = 13,\n+    USER_POSIX2_FORT_DEV   = 14,\n+    USER_POSIX2_FORT_RUN   = 15,\n+    USER_POSIX2_LOCALEDEF  = 16,\n+    USER_POSIX2_SW_DEV     = 17,\n+    USER_POSIX2_UPE        = 18,\n+    USER_STREAM_MAX        = 19,\n+    USER_TZNAME_MAX        = 20,\n+    USER_MAXID             = 21,\n+}\n+\n+///\n+int sysctl(const int* name, uint namelen, void* oldp, size_t* oldlenp,\n+           const void* newp, size_t newlen);\n+///\n+int sysctlbyname(const char* name, void* oldp, size_t* oldlenp,\n+                 const void* newp, size_t newlen);\n+///\n+int sysctlnametomib(const char* sname, int* name, size_t* namelenp);"}, {"sha": "8936701078ac83f7807826e7cedc1c08fa2416f1", "filename": "libphobos/libdruntime/core/sys/dragonflybsd/stdlib.d", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1a207c6df0a9c5555017f65f8731acf8d4c14c2/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fdragonflybsd%2Fstdlib.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1a207c6df0a9c5555017f65f8731acf8d4c14c2/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fdragonflybsd%2Fstdlib.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fdragonflybsd%2Fstdlib.d?ref=b1a207c6df0a9c5555017f65f8731acf8d4c14c2", "patch": "@@ -0,0 +1,17 @@\n+/**\n+  * D header file for DragonFlyBSD stdlib.h.\n+  *\n+  * Copyright: Copyright \u00a9 2021, The D Language Foundation\n+  * License: <a href=\"http://www.boost.org/LICENSE_1_0.txt\">Boost License 1.0</a>.\n+  * Authors: Iain Buclaw\n+  */\n+module core.sys.dragonflybsd.stdlib;\n+public import core.sys.posix.stdlib;\n+\n+version (DragonFlyBSD):\n+extern (C):\n+nothrow:\n+@nogc:\n+\n+const(char)* getprogname();\n+void setprogname(scope const char* name);"}, {"sha": "932082f2698042816e219367022d1a5d37e700eb", "filename": "libphobos/libdruntime/core/sys/dragonflybsd/sys/sysctl.d", "status": "added", "additions": 199, "deletions": 0, "changes": 199, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1a207c6df0a9c5555017f65f8731acf8d4c14c2/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fdragonflybsd%2Fsys%2Fsysctl.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1a207c6df0a9c5555017f65f8731acf8d4c14c2/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fdragonflybsd%2Fsys%2Fsysctl.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fdragonflybsd%2Fsys%2Fsysctl.d?ref=b1a207c6df0a9c5555017f65f8731acf8d4c14c2", "patch": "@@ -0,0 +1,199 @@\n+/**\n+  * D header file for DragonFlyBSD sys/sysctl.h\n+  *\n+  * Copyright: Copyright \u00a9 2021, The D Language Foundation\n+  * License: <a href=\"http://www.boost.org/LICENSE_1_0.txt\">Boost License 1.0</a>.\n+  * Authors: Iain Buclaw\n+  */\n+module core.sys.dragonflybsd.sys.sysctl;\n+\n+version (DragonFlyBSD):\n+extern (C):\n+nothrow:\n+@nogc:\n+\n+// Top-level identifiers\n+enum\n+{\n+    CTL_SYSCTL   = 0,\n+    CTL_KERN     = 1,\n+    CTL_VM       = 2,\n+    CTL_VFS      = 3,\n+    CTL_NET      = 4,\n+    CTL_DEBUG    = 5,\n+    CTL_HW       = 6,\n+    CTL_MACHDEP  = 7,\n+    CTL_USER     = 8,\n+    CTL_P1003_1B = 9,\n+    CTL_LWKT     = 10,\n+    CTL_MAXID    = 11,\n+}\n+\n+// CTL_SYSCTL identifiers\n+enum\n+{\n+    CTL_SYSCTL_DEBUG    = 0,\n+    CTL_SYSCTL_NAME     = 1,\n+    CTL_SYSCTL_NEXT     = 2,\n+    CTL_SYSCTL_NAME2OID = 3,\n+    CTL_SYSCTL_OIDFMT   = 4,\n+    CTL_SYSCTL_OIDDESCR = 5,\n+}\n+\n+// CTL_KERN identifiers\n+enum\n+{\n+    KERN_OSTYPE            = 1,\n+    KERN_OSRELEASE         = 2,\n+    KERN_OSREV             = 3,\n+    KERN_VERSION           = 4,\n+    KERN_MAXVNODES         = 5,\n+    KERN_MAXPROC           = 6,\n+    KERN_MAXFILES          = 7,\n+    KERN_ARGMAX            = 8,\n+    KERN_SECURELVL         = 9,\n+    KERN_HOSTNAME          = 10,\n+    KERN_HOSTID            = 11,\n+    KERN_CLOCKRATE         = 12,\n+    KERN_VNODE             = 13,\n+    KERN_PROC              = 14,\n+    KERN_FILE              = 15,\n+    KERN_POSIX1            = 17,\n+    KERN_NGROUPS           = 18,\n+    KERN_JOB_CONTROL       = 19,\n+    KERN_SAVED_IDS         = 20,\n+    KERN_BOOTTIME          = 21,\n+    KERN_NISDOMAINNAME     = 22,\n+    KERN_UPDATEINTERVAL    = 23,\n+    KERN_OSRELDATE         = 24,\n+    KERN_NTP_PLL           = 25,\n+    KERN_BOOTFILE          = 26,\n+    KERN_MAXFILESPERPROC   = 27,\n+    KERN_MAXPROCPERUID     = 28,\n+    KERN_DUMPDEV           = 29,\n+    KERN_IPC               = 30,\n+    KERN_DUMMY             = 31,\n+    KERN_PS_STRINGS        = 32,\n+    KERN_USRSTACK          = 33,\n+    KERN_LOGSIGEXIT        = 34,\n+    KERN_IOV_MAX           = 35,\n+    KERN_MAXPOSIXLOCKSPERUID = 36,\n+    KERN_MAXID             = 37,\n+}\n+\n+// KERN_PROC subtypes\n+enum\n+{\n+    KERN_PROC_ALL      = 0,\n+    KERN_PROC_PID      = 1,\n+    KERN_PROC_PGRP     = 2,\n+    KERN_PROC_SESSION  = 3,\n+    KERN_PROC_TTY      = 4,\n+    KERN_PROC_UID      = 5,\n+    KERN_PROC_RUID     = 6,\n+    KERN_PROC_ARGS     = 7,\n+    KERN_PROC_CWD      = 8,\n+    KERN_PROC_PATHNAME = 9,\n+    KERN_PROC_SIGTRAMP = 10,\n+    KERN_PROC_FLAGMASK = 0x10,\n+    KERN_PROC_FLAG_LWP = 0x10,\n+}\n+\n+// KERN_IPC identifiers\n+enum\n+{\n+    KIPC_MAXSOCKBUF    = 1,\n+    KIPC_SOCKBUF_WASTE = 2,\n+    KIPC_SOMAXCONN     = 3,\n+    KIPC_MAX_LINKHDR   = 4,\n+    KIPC_MAX_PROTOHDR  = 5,\n+    KIPC_MAX_HDR       = 6,\n+    KIPC_MAX_DATALEN   = 7,\n+    KIPC_MBSTAT        = 8,\n+    KIPC_NMBCLUSTERS   = 9,\n+}\n+\n+// CTL_HW identifiers\n+enum\n+{\n+    HW_MACHINE      = 1,\n+    HW_MODEL        = 2,\n+    HW_NCPU         = 3,\n+    HW_BYTEORDER    = 4,\n+    HW_PHYSMEM      = 5,\n+    HW_USERMEM      = 6,\n+    HW_PAGESIZE     = 7,\n+    HW_DISKNAMES    = 8,\n+    HW_DISKSTATS    = 9,\n+    HW_FLOATINGPT   = 10,\n+    HW_MACHINE_ARCH = 11,\n+    HW_MACHINE_PLATFORM = 12,\n+    HW_SENSORS      = 13,\n+    HW_MAXID        = 14,\n+}\n+\n+// CTL_USER definitions\n+enum\n+{\n+    USER_CS_PATH          = 1,\n+    USER_BC_BASE_MAX      = 2,\n+    USER_BC_DIM_MAX       = 3,\n+    USER_BC_SCALE_MAX     = 4,\n+    USER_BC_STRING_MAX    = 5,\n+    USER_COLL_WEIGHTS_MAX = 6,\n+    USER_EXPR_NEST_MAX    = 7,\n+    USER_LINE_MAX         = 8,\n+    USER_RE_DUP_MAX       = 9,\n+    USER_POSIX2_VERSION   = 10,\n+    USER_POSIX2_C_BIND    = 11,\n+    USER_POSIX2_C_DEV     = 12,\n+    USER_POSIX2_CHAR_TERM = 13,\n+    USER_POSIX2_FORT_DEV  = 14,\n+    USER_POSIX2_FORT_RUN  = 15,\n+    USER_POSIX2_LOCALEDEF = 16,\n+    USER_POSIX2_SW_DEV    = 17,\n+    USER_POSIX2_UPE       = 18,\n+    USER_STREAM_MAX       = 19,\n+    USER_TZNAME_MAX       = 20,\n+    USER_MAXID            = 21,\n+}\n+\n+// POSIX 1003.1B definitions\n+enum\n+{\n+    CTL_P1003_1B_ASYNCHRONOUS_IO       = 1,\n+    CTL_P1003_1B_MAPPED_FILES          = 2,\n+    CTL_P1003_1B_MEMLOCK               = 3,\n+    CTL_P1003_1B_MEMLOCK_RANGE         = 4,\n+    CTL_P1003_1B_MEMORY_PROTECTION     = 5,\n+    CTL_P1003_1B_MESSAGE_PASSING       = 6,\n+    CTL_P1003_1B_PRIORITIZED_IO        = 7,\n+    CTL_P1003_1B_PRIORITY_SCHEDULING   = 8,\n+    CTL_P1003_1B_REALTIME_SIGNALS      = 9,\n+    CTL_P1003_1B_SEMAPHORES            = 10,\n+    CTL_P1003_1B_FSYNC                 = 11,\n+    CTL_P1003_1B_SHARED_MEMORY_OBJECTS = 12,\n+    CTL_P1003_1B_SYNCHRONIZED_IO       = 13,\n+    CTL_P1003_1B_TIMERS                = 14,\n+    CTL_P1003_1B_AIO_LISTIO_MAX        = 15,\n+    CTL_P1003_1B_AIO_MAX               = 16,\n+    CTL_P1003_1B_AIO_PRIO_DELTA_MAX    = 17,\n+    CTL_P1003_1B_DELAYTIMER_MAX        = 18,\n+    CTL_P1003_1B_UNUSED19              = 19,\n+    CTL_P1003_1B_PAGESIZE              = 20,\n+    CTL_P1003_1B_RTSIG_MAX             = 21,\n+    CTL_P1003_1B_SEM_NSEMS_MAX         = 22,\n+    CTL_P1003_1B_UNUSED23              = 23,\n+    CTL_P1003_1B_SIGQUEUE_MAX          = 24,\n+    CTL_P1003_1B_TIMER_MAX             = 25,\n+    CTL_P1003_1B_MAXID                 = 26,\n+}\n+\n+///\n+int sysctl(const int* name, uint namelen, void* oldp, size_t* oldlenp,\n+           const void* newp, size_t newlen);\n+///\n+int sysctlbyname(const char* name, void* oldp, size_t* oldlenp,\n+                 const void* newp, size_t newlen);\n+///\n+int sysctlnametomib(const char* name, int* mibp, size_t* sizep);"}, {"sha": "bf93c3a451dbb689f09b2d0085f93d6261a8f79d", "filename": "libphobos/libdruntime/core/sys/freebsd/stdlib.d", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1a207c6df0a9c5555017f65f8731acf8d4c14c2/libphobos%2Flibdruntime%2Fcore%2Fsys%2Ffreebsd%2Fstdlib.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1a207c6df0a9c5555017f65f8731acf8d4c14c2/libphobos%2Flibdruntime%2Fcore%2Fsys%2Ffreebsd%2Fstdlib.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Ffreebsd%2Fstdlib.d?ref=b1a207c6df0a9c5555017f65f8731acf8d4c14c2", "patch": "@@ -0,0 +1,17 @@\n+/**\n+  * D header file for FreeBSD stdlib.h.\n+  *\n+  * Copyright: Copyright \u00a9 2021, The D Language Foundation\n+  * License: <a href=\"http://www.boost.org/LICENSE_1_0.txt\">Boost License 1.0</a>.\n+  * Authors: Iain Buclaw\n+  */\n+module core.sys.freebsd.stdlib;\n+public import core.sys.posix.stdlib;\n+\n+version (FreeBSD):\n+extern (C):\n+nothrow:\n+@nogc:\n+\n+const(char)* getprogname();\n+void setprogname(scope const char* name);"}, {"sha": "b9b3e93b05f07577c75a1f1cc6d9a75bf6af9a8a", "filename": "libphobos/libdruntime/core/sys/freebsd/sys/sysctl.d", "status": "added", "additions": 211, "deletions": 0, "changes": 211, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1a207c6df0a9c5555017f65f8731acf8d4c14c2/libphobos%2Flibdruntime%2Fcore%2Fsys%2Ffreebsd%2Fsys%2Fsysctl.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1a207c6df0a9c5555017f65f8731acf8d4c14c2/libphobos%2Flibdruntime%2Fcore%2Fsys%2Ffreebsd%2Fsys%2Fsysctl.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Ffreebsd%2Fsys%2Fsysctl.d?ref=b1a207c6df0a9c5555017f65f8731acf8d4c14c2", "patch": "@@ -0,0 +1,211 @@\n+/**\n+  * D header file for FreeBSD sys/sysctl.h\n+  *\n+  * Copyright: Copyright \u00a9 2021, The D Language Foundation\n+  * License: <a href=\"http://www.boost.org/LICENSE_1_0.txt\">Boost License 1.0</a>.\n+  * Authors: Iain Buclaw\n+  */\n+module core.sys.freebsd.sys.sysctl;\n+\n+version (FreeBSD):\n+extern (C):\n+nothrow:\n+@nogc:\n+\n+// Top-level identifiers\n+enum\n+{\n+    CTL_SYSCTL   = 0,\n+    CTL_KERN     = 1,\n+    CTL_VM       = 2,\n+    CTL_VFS      = 3,\n+    CTL_NET      = 4,\n+    CTL_DEBUG    = 5,\n+    CTL_HW       = 6,\n+    CTL_MACHDEP  = 7,\n+    CTL_USER     = 8,\n+    CTL_P1003_1B = 9,\n+}\n+\n+// CTL_SYSCTL identifiers\n+enum\n+{\n+    CTL_SYSCTL_DEBUG    = 0,\n+    CTL_SYSCTL_NAME     = 1,\n+    CTL_SYSCTL_NEXT     = 2,\n+    CTL_SYSCTL_NAME2OID = 3,\n+    CTL_SYSCTL_OIDFMT   = 4,\n+    CTL_SYSCTL_OIDDESCR = 5,\n+    CTL_SYSCTL_OIDLABEL = 6,\n+}\n+\n+// CTL_KERN identifiers\n+enum\n+{\n+    KERN_OSTYPE          = 1,\n+    KERN_OSRELEASE       = 2,\n+    KERN_OSREV           = 3,\n+    KERN_VERSION         = 4,\n+    KERN_MAXVNODES       = 5,\n+    KERN_MAXPROC         = 6,\n+    KERN_MAXFILES        = 7,\n+    KERN_ARGMAX          = 8,\n+    KERN_SECURELVL       = 9,\n+    KERN_HOSTNAME        = 10,\n+    KERN_HOSTID          = 11,\n+    KERN_CLOCKRATE       = 12,\n+    KERN_VNODE           = 13,\n+    KERN_PROC            = 14,\n+    KERN_FILE            = 15,\n+    KERN_PROF            = 16,\n+    KERN_POSIX1          = 17,\n+    KERN_NGROUPS         = 18,\n+    KERN_JOB_CONTROL     = 19,\n+    KERN_SAVED_IDS       = 20,\n+    KERN_BOOTTIME        = 21,\n+    KERN_NISDOMAINNAME   = 22,\n+    KERN_UPDATEINTERVAL  = 23,\n+    KERN_OSRELDATE       = 24,\n+    KERN_NTP_PLL         = 25,\n+    KERN_BOOTFILE        = 26,\n+    KERN_MAXFILESPERPROC = 27,\n+    KERN_MAXPROCPERUID   = 28,\n+    KERN_DUMPDEV         = 29,\n+    KERN_IPC             = 30,\n+    KERN_DUMMY           = 31,\n+    KERN_PS_STRINGS      = 32,\n+    KERN_USRSTACK        = 33,\n+    KERN_LOGSIGEXIT      = 34,\n+    KERN_IOV_MAX         = 35,\n+    KERN_HOSTUUID        = 36,\n+    KERN_ARND            = 37,\n+    KERN_MAXPHYS         = 38,\n+}\n+\n+// KERN_PROC subtypes\n+enum\n+{\n+    KERN_PROC_ALL        = 0,\n+    KERN_PROC_PID        = 1,\n+    KERN_PROC_PGRP       = 2,\n+    KERN_PROC_SESSION    = 3,\n+    KERN_PROC_TTY        = 4,\n+    KERN_PROC_UID        = 5,\n+    KERN_PROC_RUID       = 6,\n+    KERN_PROC_ARGS       = 7,\n+    KERN_PROC_PROC       = 8,\n+    KERN_PROC_SV_NAME    = 9,\n+    KERN_PROC_RGID       = 10,\n+    KERN_PROC_GID        = 11,\n+    KERN_PROC_PATHNAME   = 12,\n+    KERN_PROC_OVMMAP     = 13,\n+    KERN_PROC_OFILEDESC  = 14,\n+    KERN_PROC_KSTACK     = 15,\n+    KERN_PROC_INC_THREAD = 0x10,\n+    KERN_PROC_VMMAP      = 32,\n+    KERN_PROC_FILEDESC   = 33,\n+    KERN_PROC_GROUPS     = 34,\n+    KERN_PROC_ENV        = 35,\n+    KERN_PROC_AUXV       = 36,\n+    KERN_PROC_RLIMIT     = 37,\n+    KERN_PROC_PS_STRINGS = 38,\n+    KERN_PROC_UMASK      = 39,\n+    KERN_PROC_OSREL      = 40,\n+    KERN_PROC_SIGTRAMP   = 41,\n+    KERN_PROC_CWD        = 42,\n+    KERN_PROC_NFDS       = 43,\n+}\n+\n+// KERN_IPC identifiers\n+enum\n+{\n+    KIPC_MAXSOCKBUF        = 1,\n+    KIPC_SOCKBUF_WASTE     = 2,\n+    KIPC_SOMAXCONN         = 3,\n+    KIPC_MAX_LINKHDR       = 4,\n+    KIPC_MAX_PROTOHDR      = 5,\n+    KIPC_MAX_HDR           = 6,\n+    KIPC_MAX_DATALEN       = 7,\n+}\n+\n+// CTL_HW identifiers\n+enum\n+{\n+    HW_MACHINE      = 1,\n+    HW_MODEL        = 2,\n+    HW_NCPU         = 3,\n+    HW_BYTEORDER    = 4,\n+    HW_PHYSMEM      = 5,\n+    HW_USERMEM      = 6,\n+    HW_PAGESIZE     = 7,\n+    HW_DISKNAMES    = 8,\n+    HW_DISKSTATS    = 9,\n+    HW_FLOATINGPT   = 10,\n+    HW_MACHINE_ARCH = 11,\n+    HW_REALMEM      = 12,\n+}\n+\n+// CTL_USER identifiers\n+enum\n+{\n+    USER_CS_PATH           = 1,\n+    USER_BC_BASE_MAX       = 2,\n+    USER_BC_DIM_MAX        = 3,\n+    USER_BC_SCALE_MAX      = 4,\n+    USER_BC_STRING_MAX     = 5,\n+    USER_COLL_WEIGHTS_MAX  = 6,\n+    USER_EXPR_NEST_MAX     = 7,\n+    USER_LINE_MAX          = 8,\n+    USER_RE_DUP_MAX        = 9,\n+    USER_POSIX2_VERSION    = 10,\n+    USER_POSIX2_C_BIND     = 11,\n+    USER_POSIX2_C_DEV      = 12,\n+    USER_POSIX2_CHAR_TERM  = 13,\n+    USER_POSIX2_FORT_DEV   = 14,\n+    USER_POSIX2_FORT_RUN   = 15,\n+    USER_POSIX2_LOCALEDEF  = 16,\n+    USER_POSIX2_SW_DEV     = 17,\n+    USER_POSIX2_UPE        = 18,\n+    USER_STREAM_MAX        = 19,\n+    USER_TZNAME_MAX        = 20,\n+}\n+\n+// POSIX 1003.1B definitions\n+enum\n+{\n+    CTL_P1003_1B_ASYNCHRONOUS_IO       = 1,\n+    CTL_P1003_1B_MAPPED_FILES          = 2,\n+    CTL_P1003_1B_MEMLOCK               = 3,\n+    CTL_P1003_1B_MEMLOCK_RANGE         = 4,\n+    CTL_P1003_1B_MEMORY_PROTECTION     = 5,\n+    CTL_P1003_1B_MESSAGE_PASSING       = 6,\n+    CTL_P1003_1B_PRIORITIZED_IO        = 7,\n+    CTL_P1003_1B_PRIORITY_SCHEDULING   = 8,\n+    CTL_P1003_1B_REALTIME_SIGNALS      = 9,\n+    CTL_P1003_1B_SEMAPHORES            = 10,\n+    CTL_P1003_1B_FSYNC                 = 11,\n+    CTL_P1003_1B_SHARED_MEMORY_OBJECTS = 12,\n+    CTL_P1003_1B_SYNCHRONIZED_IO       = 13,\n+    CTL_P1003_1B_TIMERS                = 14,\n+    CTL_P1003_1B_AIO_LISTIO_MAX        = 15,\n+    CTL_P1003_1B_AIO_MAX               = 16,\n+    CTL_P1003_1B_AIO_PRIO_DELTA_MAX    = 17,\n+    CTL_P1003_1B_DELAYTIMER_MAX        = 18,\n+    CTL_P1003_1B_UNUSED19              = 19,\n+    CTL_P1003_1B_PAGESIZE              = 20,\n+    CTL_P1003_1B_RTSIG_MAX             = 21,\n+    CTL_P1003_1B_SEM_NSEMS_MAX         = 22,\n+    CTL_P1003_1B_UNUSED23              = 23,\n+    CTL_P1003_1B_SIGQUEUE_MAX          = 24,\n+    CTL_P1003_1B_TIMER_MAX             = 25,\n+    CTL_P1003_1B_MAXID                 = 26,\n+}\n+\n+///\n+int sysctl(const int* name, uint namelen, void* oldp, size_t* oldlenp,\n+           const void* newp, size_t newlen);\n+///\n+int sysctlbyname(const char* name, void* oldp, size_t* oldlenp,\n+                 const void* newp, size_t newlen);\n+///\n+int sysctlnametomib(const char* name, int* mibp, size_t* sizep);"}, {"sha": "84c68a74e0d1ce9a05bbbaa438ab007f4322c67f", "filename": "libphobos/libdruntime/core/sys/netbsd/stdlib.d", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1a207c6df0a9c5555017f65f8731acf8d4c14c2/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fnetbsd%2Fstdlib.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1a207c6df0a9c5555017f65f8731acf8d4c14c2/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fnetbsd%2Fstdlib.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fnetbsd%2Fstdlib.d?ref=b1a207c6df0a9c5555017f65f8731acf8d4c14c2", "patch": "@@ -0,0 +1,17 @@\n+/**\n+  * D header file for NetBSD stdlib.h.\n+  *\n+  * Copyright: Copyright \u00a9 2021, The D Language Foundation\n+  * License: <a href=\"http://www.boost.org/LICENSE_1_0.txt\">Boost License 1.0</a>.\n+  * Authors: Iain Buclaw\n+  */\n+module core.sys.netbsd.stdlib;\n+public import core.sys.posix.stdlib;\n+\n+version (NetBSD):\n+extern (C):\n+nothrow:\n+@nogc:\n+\n+const(char)* getprogname();\n+void setprogname(scope const char* name);"}, {"sha": "9b2a0b7a9b6aba52bf327e50f817da1fcab6dbad", "filename": "libphobos/libdruntime/core/sys/netbsd/sys/sysctl.d", "status": "added", "additions": 254, "deletions": 0, "changes": 254, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1a207c6df0a9c5555017f65f8731acf8d4c14c2/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fnetbsd%2Fsys%2Fsysctl.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1a207c6df0a9c5555017f65f8731acf8d4c14c2/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fnetbsd%2Fsys%2Fsysctl.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fnetbsd%2Fsys%2Fsysctl.d?ref=b1a207c6df0a9c5555017f65f8731acf8d4c14c2", "patch": "@@ -0,0 +1,254 @@\n+/**\n+  * D header file for NetBSD sys/sysctl.h\n+  *\n+  * Copyright: Copyright \u00a9 2021, The D Language Foundation\n+  * License: <a href=\"http://www.boost.org/LICENSE_1_0.txt\">Boost License 1.0</a>.\n+  * Authors: Iain Buclaw\n+  */\n+module core.sys.netbsd.sys.sysctl;\n+\n+version (NetBSD):\n+extern (C):\n+nothrow:\n+@nogc:\n+\n+// Top-level identifiers\n+enum\n+{\n+    CTL_UNSPEC   = 0,\n+    CTL_KERN     = 1,\n+    CTL_VM       = 2,\n+    CTL_VFS      = 3,\n+    CTL_NET      = 4,\n+    CTL_DEBUG    = 5,\n+    CTL_HW       = 6,\n+    CTL_MACHDEP  = 7,\n+    CTL_DDB      = 9,\n+    CTL_PROC     = 10,\n+    CTL_VENDOR   = 11,\n+    CTL_EMUL     = 12,\n+    CTL_SECURITY = 13,\n+}\n+\n+// CTL_KERN identifiers\n+enum\n+{\n+    KERN_OSTYPE            = 1,\n+    KERN_OSRELEASE         = 2,\n+    KERN_OSREV             = 3,\n+    KERN_VERSION           = 4,\n+    KERN_MAXVNODES         = 5,\n+    KERN_MAXPROC           = 6,\n+    KERN_MAXFILES          = 7,\n+    KERN_ARGMAX            = 8,\n+    KERN_SECURELVL         = 9,\n+    KERN_HOSTNAME          = 10,\n+    KERN_HOSTID            = 11,\n+    KERN_CLOCKRATE         = 12,\n+    KERN_VNODE             = 13,\n+    KERN_PROC              = 14,\n+    KERN_FILE              = 15,\n+    KERN_PROF              = 16,\n+    KERN_POSIX1            = 17,\n+    KERN_NGROUPS           = 18,\n+    KERN_JOB_CONTROL       = 19,\n+    KERN_SAVED_IDS         = 20,\n+    KERN_OBOOTTIME         = 21,\n+    KERN_DOMAINNAME        = 22,\n+    KERN_MAXPARTITIONS     = 23,\n+    KERN_RAWPARTITION      = 24,\n+    KERN_NTPTIME           = 25,\n+    KERN_TIMEX             = 26,\n+    KERN_AUTONICETIME      = 27,\n+    KERN_AUTONICEVAL       = 28,\n+    KERN_RTC_OFFSET        = 29,\n+    KERN_ROOT_DEVICE       = 30,\n+    KERN_MSGBUFSIZE        = 31,\n+    KERN_FSYNC             = 32,\n+    KERN_OLDSYSVMSG        = 33,\n+    KERN_OLDSYSVSEM        = 34,\n+    KERN_OLDSYSVSHM        = 35,\n+    KERN_OLDSHORTCORENAME  = 36,\n+    KERN_SYNCHRONIZED_IO   = 37,\n+    KERN_IOV_MAX           = 38,\n+    KERN_MBUF              = 39,\n+    KERN_MAPPED_FILES      = 40,\n+    KERN_MEMLOCK           = 41,\n+    KERN_MEMLOCK_RANGE     = 42,\n+    KERN_MEMORY_PROTECTION = 43,\n+    KERN_LOGIN_NAME_MAX    = 44,\n+    KERN_DEFCORENAME       = 45,\n+    KERN_LOGSIGEXIT        = 46,\n+    KERN_PROC2             = 47,\n+    KERN_PROC_ARGS         = 48,\n+    KERN_FSCALE            = 49,\n+    KERN_CCPU              = 50,\n+    KERN_CP_TIME           = 51,\n+    KERN_OLDSYSVIPC_INFO   = 52,\n+    KERN_MSGBUF            = 53,\n+    KERN_CONSDEV           = 54,\n+    KERN_MAXPTYS           = 55,\n+    KERN_PIPE              = 56,\n+    KERN_MAXPHYS           = 57,\n+    KERN_SBMAX             = 58,\n+    KERN_TKSTAT            = 59,\n+    KERN_MONOTONIC_CLOCK   = 60,\n+    KERN_URND              = 61,\n+    KERN_LABELSECTOR       = 62,\n+    KERN_LABELOFFSET       = 63,\n+    KERN_LWP               = 64,\n+    KERN_FORKFSLEEP        = 65,\n+    KERN_POSIX_THREADS     = 66,\n+    KERN_POSIX_SEMAPHORES  = 67,\n+    KERN_POSIX_BARRIERS    = 68,\n+    KERN_POSIX_TIMERS      = 69,\n+    KERN_POSIX_SPIN_LOCKS  = 70,\n+    KERN_POSIX_READER_WRITER_LOCKS = 71,\n+    KERN_DUMP_ON_PANIC     = 72,\n+    KERN_SOMAXKVA          = 73,\n+    KERN_ROOT_PARTITION    = 74,\n+    KERN_DRIVERS           = 75,\n+    KERN_BUF               = 76,\n+    KERN_FILE2             = 77,\n+    KERN_VERIEXEC          = 78,\n+    KERN_CP_ID             = 79,\n+    KERN_HARDCLOCK_TICKS   = 80,\n+    KERN_ARND              = 81,\n+    KERN_SYSVIPC           = 82,\n+    KERN_BOOTTIME          = 83,\n+    KERN_EVCNT             = 84,\n+    KERN_SOFIXEDBUF        = 85,\n+}\n+\n+// KERN_PROC subtypes\n+enum\n+{\n+    KERN_PROC_ALL     = 0,\n+    KERN_PROC_PID     = 1,\n+    KERN_PROC_PGRP    = 2,\n+    KERN_PROC_SESSION = 3,\n+    KERN_PROC_TTY     = 4,\n+    KERN_PROC_UID     = 5,\n+    KERN_PROC_RUID    = 6,\n+    KERN_PROC_KTHREAD = 7,\n+    KERN_PROC_RGID    = 8,\n+}\n+\n+// KERN_PROC_ARGS subtypes\n+enum\n+{\n+    KERN_PROC_ARGV     = 1,\n+    KERN_PROC_NARGV    = 2,\n+    KERN_PROC_ENV      = 3,\n+    KERN_PROC_NENV     = 4,\n+    KERN_PROC_PATHNAME = 5,\n+    KERN_PROC_CWD      = 6,\n+}\n+\n+// KERN_SYSVIPC subtypes\n+enum\n+{\n+    KERN_SYSVIPC_INFO       = 1,\n+    KERN_SYSVIPC_MSG        = 2,\n+    KERN_SYSVIPC_SEM        = 3,\n+    KERN_SYSVIPC_SHM        = 4,\n+    KERN_SYSVIPC_SHMMAX     = 5,\n+    KERN_SYSVIPC_SHMMNI     = 6,\n+    KERN_SYSVIPC_SHMSEG     = 7,\n+    KERN_SYSVIPC_SHMMAXPGS  = 8,\n+    KERN_SYSVIPC_SHMUSEPHYS = 9,\n+}\n+\n+// KERN_SYSVIPC_INFO subtypes\n+enum\n+{\n+    KERN_SYSVIPC_MSG_INFO = 4,\n+    KERN_SYSVIPC_SEM_INFO = 5,\n+    KERN_SYSVIPC_SHM_INFO = 6,\n+}\n+\n+// KERN_TKSTAT subtypes\n+enum\n+{\n+    KERN_TKSTAT_NIN   = 1,\n+    KERN_TKSTAT_NOUT  = 2,\n+    KERN_TKSTAT_CANCC = 3,\n+    KERN_TKSTAT_RAWCC = 4,\n+}\n+\n+// KERN_BUF subtypes\n+enum\n+{\n+    KERN_BUF_ALL = 0,\n+}\n+\n+// KERN_FILE\n+enum\n+{\n+    KERN_FILE_BYFILE = 1,\n+    KERN_FILE_BYPID  = 2,\n+    KERN_FILESLOP    = 10,\n+}\n+\n+// KERN_EVCNT\n+enum\n+{\n+    KERN_EVCNT_COUNT_ANY = 0,\n+    KERN_EVCNT_COUNT_NONZERO = 1,\n+}\n+\n+// CTL_HW identifiers\n+enum\n+{\n+    HW_MACHINE      = 1,\n+    HW_MODEL        = 2,\n+    HW_NCPU         = 3,\n+    HW_BYTEORDER    = 4,\n+    HW_PHYSMEM      = 5,\n+    HW_USERMEM      = 6,\n+    HW_PAGESIZE     = 7,\n+    HW_DISKNAMES    = 8,\n+    HW_IOSTATS      = 9,\n+    HW_MACHINE_ARCH = 10,\n+    HW_ALIGNBYTES   = 11,\n+    HW_CNMAGIC      = 12,\n+    HW_PHYSMEM64    = 13,\n+    HW_USERMEM64    = 14,\n+    HW_IOSTATNAMES  = 15,\n+    HW_NCPUONLINE   = 16,\n+}\n+\n+//  CTL_USER definitions\n+enum\n+{\n+    USER_CS_PATH          = 1,\n+    USER_BC_BASE_MAX      = 2,\n+    USER_BC_DIM_MAX       = 3,\n+    USER_BC_SCALE_MAX     = 4,\n+    USER_BC_STRING_MAX    = 5,\n+    USER_COLL_WEIGHTS_MAX = 6,\n+    USER_EXPR_NEST_MAX    = 7,\n+    USER_LINE_MAX         = 8,\n+    USER_RE_DUP_MAX       = 9,\n+    USER_POSIX2_VERSION   = 10,\n+    USER_POSIX2_C_BIND    = 11,\n+    USER_POSIX2_C_DEV     = 12,\n+    USER_POSIX2_CHAR_TERM = 13,\n+    USER_POSIX2_FORT_DEV  = 14,\n+    USER_POSIX2_FORT_RUN  = 15,\n+    USER_POSIX2_LOCALEDEF = 16,\n+    USER_POSIX2_SW_DEV    = 17,\n+    USER_POSIX2_UPE       = 18,\n+    USER_STREAM_MAX       = 19,\n+    USER_TZNAME_MAX       = 20,\n+    USER_ATEXIT_MAX       = 21,\n+}\n+\n+///\n+int sysctl(const int* name, uint namelen, void* oldp, size_t* oldlenp,\n+           const void* newp, size_t newlen);\n+///\n+int sysctlbyname(const char* name, void* oldp, size_t* oldlenp,\n+                 const void* newp, size_t newlen);\n+///\n+int sysctlnametomib(const char* sname, int* name, size_t* namelenp);"}, {"sha": "2d4d7a9a4f2017d9bef4316a5c50005e56caed1a", "filename": "libphobos/libdruntime/core/sys/openbsd/stdlib.d", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1a207c6df0a9c5555017f65f8731acf8d4c14c2/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fopenbsd%2Fstdlib.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1a207c6df0a9c5555017f65f8731acf8d4c14c2/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fopenbsd%2Fstdlib.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fopenbsd%2Fstdlib.d?ref=b1a207c6df0a9c5555017f65f8731acf8d4c14c2", "patch": "@@ -0,0 +1,17 @@\n+/**\n+  * D header file for OpenBSD stdlib.h.\n+  *\n+  * Copyright: Copyright \u00a9 2021, The D Language Foundation\n+  * License: <a href=\"http://www.boost.org/LICENSE_1_0.txt\">Boost License 1.0</a>.\n+  * Authors: Iain Buclaw\n+  */\n+module core.sys.openbsd.stdlib;\n+public import core.sys.posix.stdlib;\n+\n+version (OpenBSD):\n+extern (C):\n+nothrow:\n+@nogc:\n+\n+const(char)* getprogname();\n+void setprogname(scope const char* name);"}, {"sha": "c6f98455feff47ca31041dfd3ad052f8c6db2dae", "filename": "libphobos/libdruntime/core/sys/openbsd/sys/sysctl.d", "status": "added", "additions": 254, "deletions": 0, "changes": 254, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1a207c6df0a9c5555017f65f8731acf8d4c14c2/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fopenbsd%2Fsys%2Fsysctl.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1a207c6df0a9c5555017f65f8731acf8d4c14c2/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fopenbsd%2Fsys%2Fsysctl.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fopenbsd%2Fsys%2Fsysctl.d?ref=b1a207c6df0a9c5555017f65f8731acf8d4c14c2", "patch": "@@ -0,0 +1,254 @@\n+/**\n+  * D header file for OpenBSD sys/sysctl.h\n+  *\n+  * Copyright: Copyright \u00a9 2021, The D Language Foundation\n+  * License: <a href=\"http://www.boost.org/LICENSE_1_0.txt\">Boost License 1.0</a>.\n+  * Authors: Iain Buclaw\n+  */\n+module core.sys.openbsd.sys.sysctl;\n+\n+version (OpenBSD):\n+extern (C):\n+nothrow:\n+@nogc:\n+\n+// Top-level identifiers\n+enum\n+{\n+    CTL_UNSPEC  = 0,\n+    CTL_KERN    = 1,\n+    CTL_VM      = 2,\n+    CTL_FS      = 3,\n+    CTL_NET     = 4,\n+    CTL_DEBUG   = 5,\n+    CTL_HW      = 6,\n+    CTL_MACHDEP = 7,\n+    CTL_DDB     = 9,\n+    CTL_VFS     = 10,\n+    CTL_MAXID   = 11,\n+}\n+\n+// CTL_KERN identifiers\n+enum\n+{\n+    KERN_OSTYPE         = 1,\n+    KERN_OSRELEASE      = 2,\n+    KERN_OSREV          = 3,\n+    KERN_VERSION        = 4,\n+    KERN_MAXVNODES      = 5,\n+    KERN_MAXPROC        = 6,\n+    KERN_MAXFILES       = 7,\n+    KERN_ARGMAX         = 8,\n+    KERN_SECURELVL      = 9,\n+    KERN_HOSTNAME       = 10,\n+    KERN_HOSTID         = 11,\n+    KERN_CLOCKRATE      = 12,\n+    KERN_PROF           = 16,\n+    KERN_POSIX1         = 17,\n+    KERN_NGROUPS        = 18,\n+    KERN_JOB_CONTROL    = 19,\n+    KERN_SAVED_IDS      = 20,\n+    KERN_BOOTTIME       = 21,\n+    KERN_DOMAINNAME     = 22,\n+    KERN_MAXPARTITIONS  = 23,\n+    KERN_RAWPARTITION   = 24,\n+    KERN_MAXTHREAD      = 25,\n+    KERN_NTHREADS       = 26,\n+    KERN_OSVERSION      = 27,\n+    KERN_SOMAXCONN      = 28,\n+    KERN_SOMINCONN      = 29,\n+    KERN_NOSUIDCOREDUMP = 32,\n+    KERN_FSYNC          = 33,\n+    KERN_SYSVMSG        = 34,\n+    KERN_SYSVSEM        = 35,\n+    KERN_SYSVSHM        = 36,\n+    KERN_MSGBUFSIZE     = 38,\n+    KERN_MALLOCSTATS    = 39,\n+    KERN_CPTIME         = 40,\n+    KERN_NCHSTATS       = 41,\n+    KERN_FORKSTAT       = 42,\n+    KERN_NSELCOLL       = 43,\n+    KERN_TTY            = 44,\n+    KERN_CCPU           = 45,\n+    KERN_FSCALE         = 46,\n+    KERN_NPROCS         = 47,\n+    KERN_MSGBUF         = 48,\n+    KERN_POOL           = 49,\n+    KERN_STACKGAPRANDOM = 50,\n+    KERN_SYSVIPC_INFO   = 51,\n+    KERN_ALLOWKMEM      = 52,\n+    KERN_WITNESSWATCH   = 53,\n+    KERN_SPLASSERT      = 54,\n+    KERN_PROC_ARGS      = 55,\n+    KERN_NFILES         = 56,\n+    KERN_TTYCOUNT       = 57,\n+    KERN_NUMVNODES      = 58,\n+    KERN_MBSTAT         = 59,\n+    KERN_WITNESS        = 60,\n+    KERN_SEMINFO        = 61,\n+    KERN_SHMINFO        = 62,\n+    KERN_INTRCNT        = 63,\n+    KERN_WATCHDOG       = 64,\n+    KERN_ALLOWDT        = 65,\n+    KERN_PROC           = 66,\n+    KERN_MAXCLUSTERS    = 67,\n+    KERN_EVCOUNT        = 68,\n+    KERN_TIMECOUNTER    = 69,\n+    KERN_MAXLOCKSPERUID = 70,\n+    KERN_CPTIME2        = 71,\n+    KERN_CACHEPCT       = 72,\n+    KERN_FILE           = 73,\n+    KERN_WXABORT        = 74,\n+    KERN_CONSDEV        = 75,\n+    KERN_NETLIVELOCKS   = 76,\n+    KERN_POOL_DEBUG     = 77,\n+    KERN_PROC_CWD       = 78,\n+    KERN_PROC_NOBROADCASTKILL = 79,\n+    KERN_PROC_VMMAP     = 80,\n+    KERN_GLOBAL_PTRACE  = 81,\n+    KERN_CONSBUFSIZE    = 82,\n+    KERN_CONSBUF        = 83,\n+    KERN_AUDIO          = 84,\n+    KERN_CPUSTATS       = 85,\n+    KERN_PFSTATUS       = 86,\n+    KERN_TIMEOUT_STATS  = 87,\n+    KERN_UTC_OFFSET     = 88,\n+    KERN_MAXID          = 89,\n+}\n+\n+// KERN_PROC subtypes\n+enum\n+{\n+    KERN_PROC_ALL          = 0,\n+    KERN_PROC_PID          = 1,\n+    KERN_PROC_PGRP         = 2,\n+    KERN_PROC_SESSION      = 3,\n+    KERN_PROC_TTY          = 4,\n+    KERN_PROC_UID          = 5,\n+    KERN_PROC_RUID         = 6,\n+    KERN_PROC_KTHREAD      = 7,\n+    KERN_PROC_SHOW_THREADS = 0x40000000,\n+}\n+\n+// KERN_SYSVIPC_INFO subtypes\n+enum\n+{\n+    KERN_SYSVIPC_MSG_INFO = 1,\n+    KERN_SYSVIPC_SEM_INFO = 2,\n+    KERN_SYSVIPC_SHM_INFO = 3,\n+}\n+\n+// KERN_PROC_ARGS subtypes\n+enum\n+{\n+    KERN_PROC_ARGV  = 1,\n+    KERN_PROC_NARGV = 2,\n+    KERN_PROC_ENV   = 3,\n+    KERN_PROC_NENV  = 4,\n+}\n+\n+// KERN_AUDIO subtypes\n+enum\n+{\n+    KERN_AUDIO_RECORD = 1,\n+    KERN_AUDIO_MAXID  = 2,\n+}\n+\n+// KERN_WITNESS\n+enum\n+{\n+    KERN_WITNESS_WATCH     = 1,\n+    KERN_WITNESS_LOCKTRACE = 2,\n+    KERN_WITNESS_MAXID     = 3,\n+}\n+\n+// KERN_FILE\n+enum\n+{\n+    KERN_FILE_BYFILE = 1,\n+    KERN_FILE_BYPID  = 2,\n+    KERN_FILE_BYUID  = 3,\n+    KERN_FILESLOP    = 10,\n+\n+    KERN_FILE_TEXT   = -1,\n+    KERN_FILE_CDIR   = -2,\n+    KERN_FILE_RDIR   = -3,\n+    KERN_FILE_TRACE  = -4,\n+}\n+\n+// KERN_INTRCNT\n+enum\n+{\n+    KERN_INTRCNT_NUM    = 1,\n+    KERN_INTRCNT_CNT    = 2,\n+    KERN_INTRCNT_NAME   = 3,\n+    KERN_INTRCNT_VECTOR = 4,\n+    KERN_INTRCNT_MAXID  = 5,\n+}\n+\n+// KERN_WATCHDOG\n+enum\n+{\n+    KERN_WATCHDOG_PERIOD = 1,\n+    KERN_WATCHDOG_AUTO   = 2,\n+    KERN_WATCHDOG_MAXID  = 3,\n+}\n+\n+// KERN_TIMECOUNTER\n+enum\n+{\n+    KERN_TIMECOUNTER_TICK             = 1,\n+    KERN_TIMECOUNTER_TIMESTEPWARNINGS = 2,\n+    KERN_TIMECOUNTER_HARDWARE         = 3,\n+    KERN_TIMECOUNTER_CHOICE           = 4,\n+    KERN_TIMECOUNTER_MAXID            = 5,\n+}\n+\n+// CTL_FS identifiers\n+enum\n+{\n+    FS_POSIX        = 1,\n+    FS_MAXID        = 2,\n+}\n+\n+// CTL_FS_POSIX identifiers\n+enum\n+{\n+    FS_POSIX_SETUID = 1,\n+    FS_POSIX_MAXID  = 2,\n+}\n+\n+// CTL_HW identifiers\n+enum\n+{\n+    HW_MACHINE        = 1,\n+    HW_MODEL          = 2,\n+    HW_NCPU           = 3,\n+    HW_BYTEORDER      = 4,\n+    HW_PHYSMEM        = 5,\n+    HW_USERMEM        = 6,\n+    HW_PAGESIZE       = 7,\n+    HW_DISKNAMES      = 8,\n+    HW_DISKSTATS      = 9,\n+    HW_DISKCOUNT      = 10,\n+    HW_SENSORS        = 11,\n+    HW_CPUSPEED       = 12,\n+    HW_SETPERF        = 13,\n+    HW_VENDOR         = 14,\n+    HW_PRODUCT        = 15,\n+    HW_VERSION        = 16,\n+    HW_SERIALNO       = 17,\n+    HW_UUID           = 18,\n+    HW_PHYSMEM64      = 19,\n+    HW_USERMEM64      = 20,\n+    HW_NCPUFOUND      = 21,\n+    HW_ALLOWPOWERDOWN = 22,\n+    HW_PERFPOLICY     = 23,\n+    HW_SMT            = 24,\n+    HW_NCPUONLINE     = 25,\n+    HW_MAXID          = 26,\n+}\n+\n+///\n+int sysctl(const int* name, uint namelen, void* oldp, size_t* oldlenp,\n+           const void* newp, size_t newlen);"}, {"sha": "19c7e209ac7907ed824ca6c60f6fb568ed0f036d", "filename": "libphobos/libdruntime/core/sys/posix/locale.d", "status": "modified", "additions": 292, "deletions": 43, "changes": 335, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1a207c6df0a9c5555017f65f8731acf8d4c14c2/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Flocale.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1a207c6df0a9c5555017f65f8731acf8d4c14c2/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Flocale.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Flocale.d?ref=b1a207c6df0a9c5555017f65f8731acf8d4c14c2", "patch": "@@ -34,50 +34,44 @@ version (NetBSD)\n version (DragonflyBSD)\n     version = DarwinBSDLocale;\n \n-///\n-struct lconv\n-{\n-    char*    currency_symbol;\n-    char*    decimal_point;\n-    char     frac_digits;\n-    char*    grouping;\n-    char*    int_curr_symbol;\n-    char     int_frac_digits;\n-    char     int_n_cs_precedes;\n-    char     int_n_sep_by_space;\n-    char     int_n_sign_posn;\n-    char     int_p_cs_precedes;\n-    char     int_p_sep_by_space;\n-    char     int_p_sign_posn;\n-    char*    mon_decimal_point;\n-    char*    mon_grouping;\n-    char*    mon_thousands_sep;\n-    char*    negative_sign;\n-    char     n_cs_precedes;\n-    char     n_sep_by_space;\n-    char     n_sign_posn;\n-    char*    positive_sign;\n-    char     p_cs_precedes;\n-    char     p_sep_by_space;\n-    char     p_sign_posn;\n-    char*    thousands_sep;\n-}\n-\n-/// Duplicate existing locale\n-locale_t duplocale(locale_t locale);\n-/// Free an allocated locale\n-void     freelocale(locale_t locale);\n-/// Natural language formatting for C\n-lconv*   localeconv();\n-/// Create a new locale\n-locale_t newlocale(int mask, const char* locale, locale_t base);\n-/// Set the C library's notion of natural language formatting style\n-char*    setlocale(int category, const char* locale);\n-/// Set the per-thread locale\n-locale_t uselocale (locale_t locale);\n+version (CRuntime_Glibc)\n+    version = GNULinuxLocale;\n+version (CRuntime_Bionic)\n+    version = GNULinuxLocale;\n+version (CRuntime_UClibc)\n+    version = GNULinuxLocale;\n \n version (DarwinBSDLocale)\n {\n+    ///\n+    struct lconv\n+    {\n+        char*   decimal_point;\n+        char*   thousands_sep;\n+        char*   grouping;\n+        char*   int_curr_symbol;\n+        char*   currency_symbol;\n+        char*   mon_decimal_point;\n+        char*   mon_thousands_sep;\n+        char*   mon_grouping;\n+        char*   positive_sign;\n+        char*   negative_sign;\n+        char    int_frac_digits;\n+        char    frac_digits;\n+        char    p_cs_precedes;\n+        char    p_sep_by_space;\n+        char    n_cs_precedes;\n+        char    n_sep_by_space;\n+        char    p_sign_posn;\n+        char    n_sign_posn;\n+        char    int_p_cs_precedes;\n+        char    int_n_cs_precedes;\n+        char    int_p_sep_by_space;\n+        char    int_n_sep_by_space;\n+        char    int_p_sign_posn;\n+        char    int_n_sign_posn;\n+    }\n+\n     ///\n     enum\n     {\n@@ -116,10 +110,51 @@ version (DarwinBSDLocale)\n \n     ///\n     enum LC_GLOBAL_LOCALE = (cast(locale_t)-1);\n-}\n \n-version (linux)\n+    /// Duplicate existing locale\n+    locale_t duplocale(locale_t locale);\n+    /// Free an allocated locale\n+    void     freelocale(locale_t locale);\n+    /// Natural language formatting for C\n+    lconv*   localeconv();\n+    /// Create a new locale\n+    locale_t newlocale(int mask, const char* locale, locale_t base);\n+    /// Set the C library's notion of natural language formatting style\n+    char*    setlocale(int category, const char* locale);\n+    /// Set the per-thread locale\n+    locale_t uselocale (locale_t locale);\n+}\n+else version (GNULinuxLocale)\n {\n+    ///\n+    struct lconv\n+    {\n+        char*   decimal_point;\n+        char*   thousands_sep;\n+        char*   grouping;\n+        char*   int_curr_symbol;\n+        char*   currency_symbol;\n+        char*   mon_decimal_point;\n+        char*   mon_thousands_sep;\n+        char*   mon_grouping;\n+        char*   positive_sign;\n+        char*   negative_sign;\n+        char    int_frac_digits;\n+        char    frac_digits;\n+        char    p_cs_precedes;\n+        char    p_sep_by_space;\n+        char    n_cs_precedes;\n+        char    n_sep_by_space;\n+        char    p_sign_posn;\n+        char    n_sign_posn;\n+        char    int_p_cs_precedes;\n+        char    int_p_sep_by_space;\n+        char    int_n_cs_precedes;\n+        char    int_n_sep_by_space;\n+        char    int_p_sign_posn;\n+        char    int_n_sign_posn;\n+    }\n+\n     ///\n     enum\n     {\n@@ -172,4 +207,218 @@ version (linux)\n \n     ///\n     enum LC_GLOBAL_LOCALE = (cast(locale_t)-1);\n+\n+    /// Duplicate existing locale\n+    locale_t duplocale(locale_t locale);\n+    /// Free an allocated locale\n+    void     freelocale(locale_t locale);\n+    /// Natural language formatting for C\n+    lconv*   localeconv();\n+    /// Create a new locale\n+    locale_t newlocale(int mask, const char* locale, locale_t base);\n+    /// Set the C library's notion of natural language formatting style\n+    char*    setlocale(int category, const char* locale);\n+    /// Set the per-thread locale\n+    locale_t uselocale (locale_t locale);\n+}\n+else version (CRuntime_Musl)\n+{\n+    ///\n+    struct lconv\n+    {\n+        char*   decimal_point;\n+        char*   thousands_sep;\n+        char*   grouping;\n+        char*   int_curr_symbol;\n+        char*   currency_symbol;\n+        char*   mon_decimal_point;\n+        char*   mon_thousands_sep;\n+        char*   mon_grouping;\n+        char*   positive_sign;\n+        char*   negative_sign;\n+        char    int_frac_digits;\n+        char    frac_digits;\n+        char    p_cs_precedes;\n+        char    p_sep_by_space;\n+        char    n_cs_precedes;\n+        char    n_sep_by_space;\n+        char    p_sign_posn;\n+        char    n_sign_posn;\n+        char    int_p_cs_precedes;\n+        char    int_p_sep_by_space;\n+        char    int_n_cs_precedes;\n+        char    int_n_sep_by_space;\n+        char    int_p_sign_posn;\n+        char    int_n_sign_posn;\n+    }\n+\n+    ///\n+    enum\n+    {\n+        LC_CTYPE    = 0,\n+        LC_NUMERIC  = 1,\n+        LC_TIME     = 2,\n+        LC_COLLATE  = 3,\n+        LC_MONETARY = 4,\n+        LC_MESSAGES = 5,\n+        LC_ALL      = 6,\n+    }\n+\n+    ///\n+    enum\n+    {\n+        LC_CTYPE_MASK    = (1 << LC_CTYPE),\n+        LC_NUMERIC_MASK  = (1 << LC_NUMERIC),\n+        LC_TIME_MASK     = (1 << LC_TIME),\n+        LC_COLLATE_MASK  = (1 << LC_COLLATE),\n+        LC_MONETARY_MASK = (1 << LC_MONETARY),\n+        LC_MESSAGES_MASK = (1 << LC_MESSAGES),\n+        LC_ALL_MASK      = 0x7fffffff,\n+    }\n+\n+    private struct __locale_struct;\n+\n+    ///\n+    alias locale_t = __locale_struct*;\n+\n+    ///\n+    enum LC_GLOBAL_LOCALE = (cast(locale_t)-1);\n+\n+    /// Duplicate existing locale\n+    locale_t duplocale(locale_t locale);\n+    /// Free an allocated locale\n+    void     freelocale(locale_t locale);\n+    /// Natural language formatting for C\n+    lconv*   localeconv();\n+    /// Create a new locale\n+    locale_t newlocale(int mask, const char* locale, locale_t base);\n+    /// Set the C library's notion of natural language formatting style\n+    char*    setlocale(int category, const char* locale);\n+    /// Set the per-thread locale\n+    locale_t uselocale (locale_t locale);\n+}\n+else version (OpenBSD)\n+{\n+    ///\n+    struct lconv\n+    {\n+        char*   decimal_point;\n+        char*   thousands_sep;\n+        char*   grouping;\n+        char*   int_curr_symbol;\n+        char*   currency_symbol;\n+        char*   mon_decimal_point;\n+        char*   mon_thousands_sep;\n+        char*   mon_grouping;\n+        char*   positive_sign;\n+        char*   negative_sign;\n+        char    int_frac_digits;\n+        char    frac_digits;\n+        char    p_cs_precedes;\n+        char    p_sep_by_space;\n+        char    n_cs_precedes;\n+        char    n_sep_by_space;\n+        char    p_sign_posn;\n+        char    n_sign_posn;\n+        char    int_p_cs_precedes;\n+        char    int_n_cs_precedes;\n+        char    int_p_sep_by_space;\n+        char    int_n_sep_by_space;\n+        char    int_p_sign_posn;\n+        char    int_n_sign_posn;\n+    }\n+\n+    ///\n+    enum\n+    {\n+        LC_ALL      = 0,\n+        LC_COLLATE  = 1,\n+        LC_CTYPE    = 2,\n+        LC_MONETARY = 3,\n+        LC_NUMERIC  = 4,\n+        LC_TIME     = 5,\n+        LC_MESSAGES = 6,\n+    }\n+    private enum _LC_LAST = 7;\n+\n+    ///\n+    enum\n+    {\n+        LC_COLLATE_MASK  = (1 << LC_COLLATE),\n+        LC_CTYPE_MASK    = (1 << LC_CTYPE),\n+        LC_MONETARY_MASK = (1 << LC_MONETARY),\n+        LC_NUMERIC_MASK  = (1 << LC_NUMERIC),\n+        LC_TIME_MASK     = (1 << LC_TIME),\n+        LC_MESSAGES_MASK = (1 << LC_MESSAGES),\n+        LC_ALL_MASK      = ((1 << _LC_LAST) - 2),\n+    }\n+\n+    ///\n+    alias locale_t = void*;\n+\n+    ///\n+    enum LC_GLOBAL_LOCALE = (cast(locale_t)-1);\n+\n+    /// Duplicate existing locale\n+    locale_t duplocale(locale_t locale);\n+    /// Free an allocated locale\n+    void     freelocale(locale_t locale);\n+    /// Natural language formatting for C\n+    lconv*   localeconv();\n+    /// Create a new locale\n+    locale_t newlocale(int mask, const char* locale, locale_t base);\n+    /// Set the C library's notion of natural language formatting style\n+    char*    setlocale(int category, const char* locale);\n+    /// Set the per-thread locale\n+    locale_t uselocale (locale_t locale);\n+}\n+else version (Solaris)\n+{\n+    ///\n+    struct lconv\n+    {\n+        char*   decimal_point;\n+        char*   thousands_sep;\n+        char*   grouping;\n+        char*   int_curr_symbol;\n+        char*   currency_symbol;\n+        char*   mon_decimal_point;\n+        char*   mon_thousands_sep;\n+        char*   mon_grouping;\n+        char*   positive_sign;\n+        char*   negative_sign;\n+        char    int_frac_digits;\n+        char    frac_digits;\n+        char    p_cs_precedes;\n+        char    p_sep_by_space;\n+        char    n_cs_precedes;\n+        char    n_sep_by_space;\n+        char    p_sign_posn;\n+        char    n_sign_posn;\n+        char    int_p_cs_precedes;\n+        char    int_n_cs_precedes;\n+        char    int_p_sep_by_space;\n+        char    int_n_sep_by_space;\n+        char    int_p_sign_posn;\n+        char    int_n_sign_posn;\n+    }\n+\n+    ///\n+    enum\n+    {\n+        LC_CTYPE    = 0,\n+        LC_NUMERIC  = 1,\n+        LC_TIME     = 2,\n+        LC_COLLATE  = 3,\n+        LC_MONETARY = 4,\n+        LC_MESSAGES = 5,\n+        LC_ALL      = 6,\n+    }\n+\n+    /// Natural language formatting for C\n+    lconv*   localeconv();\n+    /// Set the C library's notion of natural language formatting style\n+    char*    setlocale(int category, const char* locale);\n }\n+else\n+    static assert(false, \"unimplemented platform\");"}, {"sha": "2f1a8c69ad692d37b2b12de1f77dc51628f3e040", "filename": "libphobos/libdruntime/core/sys/posix/mqueue.d", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1a207c6df0a9c5555017f65f8731acf8d4c14c2/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fmqueue.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1a207c6df0a9c5555017f65f8731acf8d4c14c2/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fmqueue.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fmqueue.d?ref=b1a207c6df0a9c5555017f65f8731acf8d4c14c2", "patch": "@@ -19,6 +19,7 @@\n  * Authors:   Andreas Bok Andersen, Mathias Lang\n  * Standards: POSIX.1-2001.\n  * See_Also:  $(HTTP pubs.opengroup.org/onlinepubs/9699919799/basedefs/mqueue.h.html, Standard)\n+ * Source: $(DRUNTIMESRC core/sys/posix/mqueue.d)\n  */\n module core.sys.posix.mqueue;\n \n@@ -58,16 +59,17 @@ struct mq_attr\n  * Note:\n  * Linux prototypes are:\n  * mqd_t mq_open (const(char)* name, int oflag);\n- * mqd_t mq_open(const(char)* name, int oflag, mode_t mode, mq_attr* attr);\n+ * mqd_t mq_open (const(char)* name, int oflag, mode_t mode, mq_attr* attr);\n  *\n  * Params:\n  *   name   = Name of the message queue to open.\n- *   oflags = determines the type of access used.\n+ *   oflag  = determines the type of access used.\n  *            If `O_CREAT` is on `oflag`, the third argument is taken as a\n  *            `mode_t`, the mode of the created message queue.\n  *            If `O_CREAT` is on `oflag`, the fourth argument is taken as\n  *            a pointer to a `mq_attr' (message queue attributes).\n  *            If the fourth argument is `null`, default attributes are used.\n+ *   ...    = varargs matching the function prototypes\n  *\n  * Returns:\n  *  Message queue descriptor or (mqd_t) -1 on error."}, {"sha": "395ed0f7e91193ed7b5de15540940ff729347e27", "filename": "libphobos/libdruntime/core/sys/posix/pthread.d", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1a207c6df0a9c5555017f65f8731acf8d4c14c2/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fpthread.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1a207c6df0a9c5555017f65f8731acf8d4c14c2/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fpthread.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fpthread.d?ref=b1a207c6df0a9c5555017f65f8731acf8d4c14c2", "patch": "@@ -291,7 +291,7 @@ else version (OpenBSD)\n     }\n \n     enum PTHREAD_MUTEX_INITIALIZER              = null;\n-    //enum PTHREAD_ONCE_INIT                      = { PTHREAD_NEEDS_INIT, PTHREAD_MUTEX_INITIALIZER };\n+    enum PTHREAD_ONCE_INIT                      = pthread_once_t.init;\n     enum PTHREAD_COND_INITIALIZER               = null;\n     enum PTHREAD_RWLOCK_INITIALIZER             = null;\n }\n@@ -330,7 +330,6 @@ else version (DragonFlyBSD)\n     enum PTHREAD_DONE_INIT  = 1;\n \n     enum PTHREAD_MUTEX_INITIALIZER              = null;\n-    //enum PTHREAD_ONCE_INIT                      = { PTHREAD_NEEDS_INIT, NULL };\n     enum PTHREAD_ONCE_INIT                      = pthread_once_t.init;\n     enum PTHREAD_COND_INITIALIZER               = null;\n     enum PTHREAD_RWLOCK_INITIALIZER             = null;"}, {"sha": "49c84508b9a9f3e9dacea489a7470f6531e9c537", "filename": "libphobos/libdruntime/core/sys/posix/sys/statvfs.d", "status": "modified", "additions": 0, "deletions": 101, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1a207c6df0a9c5555017f65f8731acf8d4c14c2/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fstatvfs.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1a207c6df0a9c5555017f65f8731acf8d4c14c2/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fstatvfs.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fstatvfs.d?ref=b1a207c6df0a9c5555017f65f8731acf8d4c14c2", "patch": "@@ -159,107 +159,6 @@ else version (OpenBSD)\n }\n else version (FreeBSD)\n {\n-    import core.sys.freebsd.sys.mount;\n-\n-    // @@@DEPRECATED_2.091@@@\n-    deprecated(\"Moved to core.sys.freebsd.sys.mount to correspond to C header file sys/mount.h\")\n-    alias MFSNAMELEN = core.sys.freebsd.sys.mount.MFSNAMELEN;\n-\n-    // @@@DEPRECATED_2.091@@@\n-    deprecated(\"Moved to core.sys.freebsd.sys.mount to correspond to C header file sys/mount.h\")\n-    alias MNAMELEN = core.sys.freebsd.sys.mount.MNAMELEN;\n-\n-    // @@@DEPRECATED_2.091@@@\n-    deprecated(\"Moved to core.sys.freebsd.sys.mount to correspond to C header file sys/mount.h\")\n-    alias fsid_t = core.sys.freebsd.sys.mount.fsid_t;\n-\n-    // @@@DEPRECATED_2.091@@@\n-    deprecated(\"Moved to core.sys.freebsd.sys.mount to correspond to C header file sys/mount.h\")\n-    alias statfs_t = core.sys.freebsd.sys.mount.statfs_t;\n-\n-    // @@@DEPRECATED_2.091@@@\n-    deprecated(\"Values moved to core.sys.freebsd.sys.mount to correspond to C header file sys/mount.h\")\n-    enum FFlag\n-    {\n-        // @@@DEPRECATED_2.091@@@\n-        deprecated(\"Moved to core.sys.freebsd.sys.mount to correspond to C header file sys/mount.h\")\n-        MNT_RDONLY = 1,          /* read only filesystem */\n-\n-        // @@@DEPRECATED_2.091@@@\n-        deprecated(\"Moved to core.sys.freebsd.sys.mount to correspond to C header file sys/mount.h\")\n-        MNT_SYNCHRONOUS = 2,     /* fs written synchronously */\n-\n-        // @@@DEPRECATED_2.091@@@\n-        deprecated(\"Moved to core.sys.freebsd.sys.mount to correspond to C header file sys/mount.h\")\n-        MNT_NOEXEC = 4,          /* can't exec from filesystem */\n-\n-        // @@@DEPRECATED_2.091@@@\n-        deprecated(\"Moved to core.sys.freebsd.sys.mount to correspond to C header file sys/mount.h\")\n-        MNT_NOSUID  = 8,         /* don't honor setuid fs bits */\n-\n-        // @@@DEPRECATED_2.091@@@\n-        deprecated(\"Moved to core.sys.freebsd.sys.mount to correspond to C header file sys/mount.h\")\n-        MNT_NFS4ACLS = 16,       /* enable NFS version 4 ACLs */\n-\n-        // @@@DEPRECATED_2.091@@@\n-        deprecated(\"Moved to core.sys.freebsd.sys.mount to correspond to C header file sys/mount.h\")\n-        MNT_UNION = 32,          /* union with underlying fs */\n-\n-        // @@@DEPRECATED_2.091@@@\n-        deprecated(\"Moved to core.sys.freebsd.sys.mount to correspond to C header file sys/mount.h\")\n-        MNT_ASYNC = 64,          /* fs written asynchronously */\n-\n-        // @@@DEPRECATED_2.091@@@\n-        deprecated(\"Moved to core.sys.freebsd.sys.mount to correspond to C header file sys/mount.h\")\n-        MNT_SUIDDIR = 128,       /* special SUID dir handling */\n-\n-        // @@@DEPRECATED_2.091@@@\n-        deprecated(\"Moved to core.sys.freebsd.sys.mount to correspond to C header file sys/mount.h\")\n-        MNT_SOFTDEP = 256,       /* using soft updates */\n-\n-        // @@@DEPRECATED_2.091@@@\n-        deprecated(\"Moved to core.sys.freebsd.sys.mount to correspond to C header file sys/mount.h\")\n-        MNT_NOSYMFOLLOW = 512,   /* do not follow symlinks */\n-\n-        // @@@DEPRECATED_2.091@@@\n-        deprecated(\"Moved to core.sys.freebsd.sys.mount to correspond to C header file sys/mount.h\")\n-        MNT_GJOURNAL = 1024,     /* GEOM journal support enabled */\n-\n-        // @@@DEPRECATED_2.091@@@\n-        deprecated(\"Moved to core.sys.freebsd.sys.mount to correspond to C header file sys/mount.h\")\n-        MNT_MULTILABEL = 2048,   /* MAC support for objects */\n-\n-        // @@@DEPRECATED_2.091@@@\n-        deprecated(\"Moved to core.sys.freebsd.sys.mount to correspond to C header file sys/mount.h\")\n-        MNT_ACLS = 4096,         /* ACL support enabled */\n-\n-        // @@@DEPRECATED_2.091@@@\n-        deprecated(\"Moved to core.sys.freebsd.sys.mount to correspond to C header file sys/mount.h\")\n-        MNT_NOATIME = 8192,      /* dont update file access time */\n-\n-        // @@@DEPRECATED_2.091@@@\n-        deprecated(\"Moved to core.sys.freebsd.sys.mount to correspond to C header file sys/mount.h\")\n-        MNT_NOCLUSTERR = 16384,  /* disable cluster read */\n-\n-        // @@@DEPRECATED_2.091@@@\n-        deprecated(\"Moved to core.sys.freebsd.sys.mount to correspond to C header file sys/mount.h\")\n-        MNT_NOCLUSTERW = 32768,  /* disable cluster write */\n-\n-        // @@@DEPRECATED_2.091@@@\n-        deprecated(\"Moved to core.sys.freebsd.sys.mount to correspond to C header file sys/mount.h\")\n-        MNT_SUJ = 65536,         /* using journaled soft updates */\n-\n-        // @@@DEPRECATED_2.091@@@\n-        deprecated(\"Moved to core.sys.freebsd.sys.mount to correspond to C header file sys/mount.h\")\n-        MNT_AUTOMOUNTED = 131072 /* mounted by automountd(8) */\n-    }\n-\n-    deprecated(\"Moved to core.sys.freebsd.sys.mount to correspond to C header file sys/mount.h\")\n-    alias statfs = core.sys.freebsd.sys.mount.statfs;\n-\n-    deprecated(\"Moved to core.sys.freebsd.sys.mount to correspond to C header file sys/mount.h\")\n-    alias fstatfs = core.sys.freebsd.sys.mount.fstatfs;\n-\n     struct statvfs_t\n     {\n         fsblkcnt_t f_bavail;"}, {"sha": "abcea99019f1e7aba1a5aa8eb6ad8f48093303d1", "filename": "libphobos/libdruntime/core/sys/posix/sys/types.d", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1a207c6df0a9c5555017f65f8731acf8d4c14c2/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Ftypes.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1a207c6df0a9c5555017f65f8731acf8d4c14c2/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Ftypes.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Ftypes.d?ref=b1a207c6df0a9c5555017f65f8731acf8d4c14c2", "patch": "@@ -1103,7 +1103,14 @@ else version (DragonFlyBSD)\n     alias void* pthread_key_t;\n     alias void* pthread_mutex_t;\n     alias void* pthread_mutexattr_t;\n-    alias void* pthread_once_t;\n+\n+    private struct pthread_once\n+    {\n+        int state;\n+        pthread_mutex_t mutex;\n+    }\n+    alias pthread_once pthread_once_t;\n+\n     alias void* pthread_rwlock_t;\n     alias void* pthread_rwlockattr_t;\n     alias void* pthread_t;"}, {"sha": "0b6fffe864613af9fd878718dc8191ce253a7a88", "filename": "libphobos/libdruntime/core/sys/solaris/stdlib.d", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1a207c6df0a9c5555017f65f8731acf8d4c14c2/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fsolaris%2Fstdlib.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1a207c6df0a9c5555017f65f8731acf8d4c14c2/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fsolaris%2Fstdlib.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fsolaris%2Fstdlib.d?ref=b1a207c6df0a9c5555017f65f8731acf8d4c14c2", "patch": "@@ -0,0 +1,17 @@\n+/**\n+  * D header file for Solaris stdlib.h.\n+  *\n+  * Copyright: Copyright \u00a9 2021, The D Language Foundation\n+  * License: <a href=\"http://www.boost.org/LICENSE_1_0.txt\">Boost License 1.0</a>.\n+  * Authors: Iain Buclaw\n+  */\n+module core.sys.solaris.stdlib;\n+public import core.sys.posix.stdlib;\n+\n+version (Solaris):\n+extern (C):\n+nothrow:\n+@nogc:\n+\n+const(char)* getprogname();\n+void setprogname(scope const char* name);"}, {"sha": "6de04b453ff2921e562f45cf243f6507dcedf775", "filename": "libphobos/src/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1a207c6df0a9c5555017f65f8731acf8d4c14c2/libphobos%2Fsrc%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1a207c6df0a9c5555017f65f8731acf8d4c14c2/libphobos%2Fsrc%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fsrc%2FMERGE?ref=b1a207c6df0a9c5555017f65f8731acf8d4c14c2", "patch": "@@ -1,4 +1,4 @@\n-3dd5df6864b3849450d3657e219b90909663a513\n+9d575282edeccecbc061e615bf2486fd07e8c084\n \n The first line of this file holds the git revision number of the last\n merge done from the dlang/phobos repository."}, {"sha": "31cc6517173bda0068041af8c28c0627d208085e", "filename": "libphobos/src/std/conv.d", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1a207c6df0a9c5555017f65f8731acf8d4c14c2/libphobos%2Fsrc%2Fstd%2Fconv.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1a207c6df0a9c5555017f65f8731acf8d4c14c2/libphobos%2Fsrc%2Fstd%2Fconv.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fsrc%2Fstd%2Fconv.d?ref=b1a207c6df0a9c5555017f65f8731acf8d4c14c2", "patch": "@@ -3148,8 +3148,6 @@ if (isInputRange!Source && isSomeChar!(ElementType!Source) && !is(Source == enum\n     {\n         version (CRuntime_Microsoft)\n             ld1 = 0x1.FFFFFFFFFFFFFFFEp-16382L; // strtold currently mapped to strtod\n-        else version (CRuntime_Bionic)\n-            ld1 = 0x1.FFFFFFFFFFFFFFFEp-16382L; // strtold currently mapped to strtod\n         else\n             ld1 = strtold(s.ptr, null);\n     }"}, {"sha": "b229191061667b33a282b2f4320240e9b092aa31", "filename": "libphobos/src/std/datetime/systime.d", "status": "modified", "additions": 87, "deletions": 23, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1a207c6df0a9c5555017f65f8731acf8d4c14c2/libphobos%2Fsrc%2Fstd%2Fdatetime%2Fsystime.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1a207c6df0a9c5555017f65f8731acf8d4c14c2/libphobos%2Fsrc%2Fstd%2Fdatetime%2Fsystime.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fsrc%2Fstd%2Fdatetime%2Fsystime.d?ref=b1a207c6df0a9c5555017f65f8731acf8d4c14c2", "patch": "@@ -7,6 +7,15 @@\n +/\n module std.datetime.systime;\n \n+version (OSX)\n+    version = Darwin;\n+else version (iOS)\n+    version = Darwin;\n+else version (TVOS)\n+    version = Darwin;\n+else version (WatchOS)\n+    version = Darwin;\n+\n import core.time;\n import std.datetime.date;\n import std.datetime.timezone;\n@@ -161,18 +170,19 @@ public:\n             static import core.stdc.time;\n             enum hnsecsToUnixEpoch = unixTimeToStdTime(0);\n \n-            version (OSX)\n+            version (Darwin)\n             {\n                 static if (clockType == ClockType.second)\n                     return unixTimeToStdTime(core.stdc.time.time(null));\n                 else\n                 {\n                     import core.sys.posix.sys.time : gettimeofday, timeval;\n-                    timeval tv;\n-                    if (gettimeofday(&tv, null) != 0)\n-                        throw new TimeException(\"Call to gettimeofday() failed\");\n+                    timeval tv = void;\n+                    // Posix gettimeofday called with a valid timeval address\n+                    // and a null second parameter doesn't fail.\n+                    gettimeofday(&tv, null);\n                     return convert!(\"seconds\", \"hnsecs\")(tv.tv_sec) +\n-                           convert!(\"usecs\", \"hnsecs\")(tv.tv_usec) +\n+                           tv.tv_usec * 10 +\n                            hnsecsToUnixEpoch;\n                 }\n             }\n@@ -188,9 +198,16 @@ public:\n                     else static if (clockType == ClockType.normal)  alias clockArg = CLOCK_REALTIME;\n                     else static if (clockType == ClockType.precise) alias clockArg = CLOCK_REALTIME;\n                     else static assert(0, \"Previous static if is wrong.\");\n-                    timespec ts;\n-                    if (clock_gettime(clockArg, &ts) != 0)\n-                        throw new TimeException(\"Call to clock_gettime() failed\");\n+                    timespec ts = void;\n+                    immutable error = clock_gettime(clockArg, &ts);\n+                    // Posix clock_gettime called with a valid address and valid clock_id is only\n+                    // permitted to fail if the number of seconds does not fit in time_t. If tv_sec\n+                    // is long or larger overflow won't happen before 292 billion years A.D.\n+                    static if (ts.tv_sec.max < long.max)\n+                    {\n+                        if (error)\n+                            throw new TimeException(\"Call to clock_gettime() failed\");\n+                    }\n                     return convert!(\"seconds\", \"hnsecs\")(ts.tv_sec) +\n                            ts.tv_nsec / 100 +\n                            hnsecsToUnixEpoch;\n@@ -205,9 +222,16 @@ public:\n                 else static if (clockType == ClockType.precise) alias clockArg = CLOCK_REALTIME_PRECISE;\n                 else static if (clockType == ClockType.second)  alias clockArg = CLOCK_SECOND;\n                 else static assert(0, \"Previous static if is wrong.\");\n-                timespec ts;\n-                if (clock_gettime(clockArg, &ts) != 0)\n-                    throw new TimeException(\"Call to clock_gettime() failed\");\n+                timespec ts = void;\n+                immutable error = clock_gettime(clockArg, &ts);\n+                // Posix clock_gettime called with a valid address and valid clock_id is only\n+                // permitted to fail if the number of seconds does not fit in time_t. If tv_sec\n+                // is long or larger overflow won't happen before 292 billion years A.D.\n+                static if (ts.tv_sec.max < long.max)\n+                {\n+                    if (error)\n+                        throw new TimeException(\"Call to clock_gettime() failed\");\n+                }\n                 return convert!(\"seconds\", \"hnsecs\")(ts.tv_sec) +\n                        ts.tv_nsec / 100 +\n                        hnsecsToUnixEpoch;\n@@ -218,12 +242,38 @@ public:\n                     return unixTimeToStdTime(core.stdc.time.time(null));\n                 else\n                 {\n-                    import core.sys.posix.sys.time : gettimeofday, timeval;\n-                    timeval tv;\n-                    if (gettimeofday(&tv, null) != 0)\n-                        throw new TimeException(\"Call to gettimeofday() failed\");\n-                    return convert!(\"seconds\", \"hnsecs\")(tv.tv_sec) +\n-                           convert!(\"usecs\", \"hnsecs\")(tv.tv_usec) +\n+                    import core.sys.netbsd.time : clock_gettime, CLOCK_REALTIME;\n+                    timespec ts = void;\n+                    immutable error = clock_gettime(CLOCK_REALTIME, &ts);\n+                    // Posix clock_gettime called with a valid address and valid clock_id is only\n+                    // permitted to fail if the number of seconds does not fit in time_t. If tv_sec\n+                    // is long or larger overflow won't happen before 292 billion years A.D.\n+                    static if (ts.tv_sec.max < long.max)\n+                    {\n+                        if (error)\n+                            throw new TimeException(\"Call to clock_gettime() failed\");\n+                    }\n+                    return convert!(\"seconds\", \"hnsecs\")(ts.tv_sec) +\n+                           ts.tv_nsec / 100 +\n+                           hnsecsToUnixEpoch;\n+                }\n+            }\n+            else version (OpenBSD)\n+            {\n+                static if (clockType == ClockType.second)\n+                    return unixTimeToStdTime(core.stdc.time.time(null));\n+                else\n+                {\n+                    import core.sys.openbsd.time : clock_gettime, CLOCK_REALTIME;\n+                    static if (clockType == ClockType.coarse)       alias clockArg = CLOCK_REALTIME;\n+                    else static if (clockType == ClockType.normal)  alias clockArg = CLOCK_REALTIME;\n+                    else static if (clockType == ClockType.precise) alias clockArg = CLOCK_REALTIME;\n+                    else static assert(0, \"Previous static if is wrong.\");\n+                    timespec ts;\n+                    if (clock_gettime(clockArg, &ts) != 0)\n+                        throw new TimeException(\"Call to clock_gettime() failed\");\n+                    return convert!(\"seconds\", \"hnsecs\")(ts.tv_sec) +\n+                           ts.tv_nsec / 100 +\n                            hnsecsToUnixEpoch;\n                 }\n             }\n@@ -236,9 +286,16 @@ public:\n                 else static if (clockType == ClockType.precise) alias clockArg = CLOCK_REALTIME_PRECISE;\n                 else static if (clockType == ClockType.second)  alias clockArg = CLOCK_SECOND;\n                 else static assert(0, \"Previous static if is wrong.\");\n-                timespec ts;\n-                if (clock_gettime(clockArg, &ts) != 0)\n-                    throw new TimeException(\"Call to clock_gettime() failed\");\n+                timespec ts = void;\n+                immutable error = clock_gettime(clockArg, &ts);\n+                // Posix clock_gettime called with a valid address and valid clock_id is only\n+                // permitted to fail if the number of seconds does not fit in time_t. If tv_sec\n+                // is long or larger overflow won't happen before 292 billion years A.D.\n+                static if (ts.tv_sec.max < long.max)\n+                {\n+                    if (error)\n+                        throw new TimeException(\"Call to clock_gettime() failed\");\n+                }\n                 return convert!(\"seconds\", \"hnsecs\")(ts.tv_sec) +\n                        ts.tv_nsec / 100 +\n                        hnsecsToUnixEpoch;\n@@ -254,9 +311,16 @@ public:\n                     else static if (clockType == ClockType.normal)  alias clockArg = CLOCK_REALTIME;\n                     else static if (clockType == ClockType.precise) alias clockArg = CLOCK_REALTIME;\n                     else static assert(0, \"Previous static if is wrong.\");\n-                    timespec ts;\n-                    if (clock_gettime(clockArg, &ts) != 0)\n-                        throw new TimeException(\"Call to clock_gettime() failed\");\n+                    timespec ts = void;\n+                    immutable error = clock_gettime(clockArg, &ts);\n+                    // Posix clock_gettime called with a valid address and valid clock_id is only\n+                    // permitted to fail if the number of seconds does not fit in time_t. If tv_sec\n+                    // is long or larger overflow won't happen before 292 billion years A.D.\n+                    static if (ts.tv_sec.max < long.max)\n+                    {\n+                        if (error)\n+                            throw new TimeException(\"Call to clock_gettime() failed\");\n+                    }\n                     return convert!(\"seconds\", \"hnsecs\")(ts.tv_sec) +\n                            ts.tv_nsec / 100 +\n                            hnsecsToUnixEpoch;"}, {"sha": "9b744ff7ab002fef3e61c36229e51c4e2c4e965c", "filename": "libphobos/src/std/datetime/timezone.d", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1a207c6df0a9c5555017f65f8731acf8d4c14c2/libphobos%2Fsrc%2Fstd%2Fdatetime%2Ftimezone.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1a207c6df0a9c5555017f65f8731acf8d4c14c2/libphobos%2Fsrc%2Fstd%2Fdatetime%2Ftimezone.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fsrc%2Fstd%2Fdatetime%2Ftimezone.d?ref=b1a207c6df0a9c5555017f65f8731acf8d4c14c2", "patch": "@@ -14,6 +14,15 @@ import std.exception : enforce;\n import std.range.primitives;\n import std.traits : isIntegral, isSomeString, Unqual;\n \n+version (OSX)\n+    version = Darwin;\n+else version (iOS)\n+    version = Darwin;\n+else version (TVOS)\n+    version = Darwin;\n+else version (WatchOS)\n+    version = Darwin;\n+\n version (Windows)\n {\n     import core.stdc.time : time_t;\n@@ -296,7 +305,7 @@ public:\n             else version (NetBSD)        enum utcZone = \"UTC\";\n             else version (DragonFlyBSD)  enum utcZone = \"UTC\";\n             else version (linux)         enum utcZone = \"UTC\";\n-            else version (OSX)           enum utcZone = \"UTC\";\n+            else version (Darwin)        enum utcZone = \"UTC\";\n             else version (Solaris)       enum utcZone = \"UTC\";\n             else static assert(0, \"The location of the UTC timezone file on this Posix platform must be set.\");\n \n@@ -671,7 +680,11 @@ public:\n \n     @safe unittest\n     {\n-        assert(LocalTime().dstName !is null);\n+        // tzname, called from dstName, isn't set by default for Musl.\n+        version (CRuntime_Musl)\n+            assert(LocalTime().dstName is null);\n+        else\n+            assert(LocalTime().dstName !is null);\n \n         version (Posix)\n         {"}, {"sha": "56133c9ad893d11f0ddcd88cf83a845906fd10f0", "filename": "libphobos/src/std/exception.d", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1a207c6df0a9c5555017f65f8731acf8d4c14c2/libphobos%2Fsrc%2Fstd%2Fexception.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1a207c6df0a9c5555017f65f8731acf8d4c14c2/libphobos%2Fsrc%2Fstd%2Fexception.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fsrc%2Fstd%2Fexception.d?ref=b1a207c6df0a9c5555017f65f8731acf8d4c14c2", "patch": "@@ -1478,10 +1478,13 @@ private bool isUnionAliasedImpl(T)(size_t offset)\n         static assert( isUnionAliased!(S.A5, 1)); //a5.b1;\n }\n \n+version (CRuntime_Glibc) version = GNU_STRERROR;\n+version (CRuntime_UClibc) version = GNU_STRERROR;\n+\n package string errnoString(int errno) nothrow @trusted\n {\n     import core.stdc.string : strlen;\n-    version (CRuntime_Glibc)\n+    version (GNU_STRERROR)\n     {\n         import core.stdc.string : strerror_r;\n         char[1024] buf = void;"}, {"sha": "53f5ef988d4812b046e014d3b952622f03082bcf", "filename": "libphobos/src/std/experimental/allocator/building_blocks/region.d", "status": "modified", "additions": 36, "deletions": 8, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1a207c6df0a9c5555017f65f8731acf8d4c14c2/libphobos%2Fsrc%2Fstd%2Fexperimental%2Fallocator%2Fbuilding_blocks%2Fregion.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1a207c6df0a9c5555017f65f8731acf8d4c14c2/libphobos%2Fsrc%2Fstd%2Fexperimental%2Fallocator%2Fbuilding_blocks%2Fregion.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fsrc%2Fstd%2Fexperimental%2Fallocator%2Fbuilding_blocks%2Fregion.d?ref=b1a207c6df0a9c5555017f65f8731acf8d4c14c2", "patch": "@@ -5,6 +5,15 @@ import std.experimental.allocator.building_blocks.null_allocator;\n import std.experimental.allocator.common;\n import std.typecons : Flag, Yes, No;\n \n+version (OSX)\n+    version = Darwin;\n+else version (iOS)\n+    version = Darwin;\n+else version (TVOS)\n+    version = Darwin;\n+else version (WatchOS)\n+    version = Darwin;\n+\n /**\n A $(D Region) allocator allocates memory straight from one contiguous chunk.\n There is no deallocation, and once the region is full, allocation requests\n@@ -580,14 +589,26 @@ struct InSituRegion(size_t size, size_t minAlign = platformAlignment)\n     assert(a.length == 2001);\n }\n \n-version(CRuntime_Musl)\n+version (CRuntime_Musl)\n {\n     // sbrk and brk are disabled in Musl:\n     // https://git.musl-libc.org/cgit/musl/commit/?id=7a995fe706e519a4f55399776ef0df9596101f93\n     // https://git.musl-libc.org/cgit/musl/commit/?id=863d628d93ea341b6a32661a1654320ce69f6a07\n-} else:\n-private extern(C) void* sbrk(long);\n-private extern(C) int brk(shared void*);\n+}\n+version (DragonFlyBSD)\n+{\n+    // sbrk is deprecated in favor of mmap   (we could implement a mmap + MAP_NORESERVE + PROT_NONE version)\n+    // brk has been removed\n+    // https://www.dragonflydigest.com/2019/02/22/22586.html\n+    // http://gitweb.dragonflybsd.org/dragonfly.git/commitdiff/dc676eaefa61b0f47bbea1c53eab86fd5ccd78c6\n+    // http://gitweb.dragonflybsd.org/dragonfly.git/commitdiff/4b5665564ef37dc939a3a9ffbafaab9894c18885\n+    // http://gitweb.dragonflybsd.org/dragonfly.git/commitdiff/8618d94a0e2ff8303ad93c123a3fa598c26a116e\n+}\n+else\n+{\n+    private extern(C) void* sbrk(long) nothrow @nogc;\n+    private extern(C) int brk(shared void*) nothrow @nogc;\n+}\n \n /**\n \n@@ -599,11 +620,14 @@ that uncontrolled calls to $(D brk) and $(D sbrk) may affect the workings of $(D\n SbrkRegion) adversely.\n \n */\n+version (CRuntime_Musl) {} else\n+version (DragonFlyBSD) {} else\n version (Posix) struct SbrkRegion(uint minAlign = platformAlignment)\n {\n     import core.sys.posix.pthread : pthread_mutex_init, pthread_mutex_destroy,\n         pthread_mutex_t, pthread_mutex_lock, pthread_mutex_unlock,\n-        PTHREAD_MUTEX_INITIALIZER;\n+\n+    PTHREAD_MUTEX_INITIALIZER;\n     private static shared pthread_mutex_t sbrkMutex = PTHREAD_MUTEX_INITIALIZER;\n     import std.typecons : Ternary;\n \n@@ -763,7 +787,9 @@ version (Posix) struct SbrkRegion(uint minAlign = platformAlignment)\n     }\n }\n \n-version (Posix) @system unittest\n+version (CRuntime_Musl) {} else\n+version (DragonFlyBSD) {} else\n+version (Posix) @system nothrow @nogc unittest\n {\n     // Let's test the assumption that sbrk(n) returns the old address\n     const p1 = sbrk(0);\n@@ -775,7 +801,9 @@ version (Posix) @system unittest\n     sbrk(-4096);\n }\n \n-version (Posix) @system unittest\n+version (CRuntime_Musl) {} else\n+version (DragonFlyBSD) {} else\n+version (Posix) @system nothrow @nogc unittest\n {\n     import std.typecons : Ternary;\n     alias alloc = SbrkRegion!(8).instance;\n@@ -786,7 +814,7 @@ version (Posix) @system unittest\n     assert(alloc.owns(a) == Ternary.yes);\n     assert(alloc.owns(b) == Ternary.yes);\n     // reducing the brk does not work on OSX\n-    version (OSX) {} else\n+    version (Darwin) {} else\n     {\n         assert(alloc.deallocate(b));\n         assert(alloc.deallocateAll);"}, {"sha": "e07d444c32c6a3288b70c32b2d4743dcf3292254", "filename": "libphobos/src/std/experimental/allocator/mmap_allocator.d", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1a207c6df0a9c5555017f65f8731acf8d4c14c2/libphobos%2Fsrc%2Fstd%2Fexperimental%2Fallocator%2Fmmap_allocator.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1a207c6df0a9c5555017f65f8731acf8d4c14c2/libphobos%2Fsrc%2Fstd%2Fexperimental%2Fallocator%2Fmmap_allocator.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fsrc%2Fstd%2Fexperimental%2Fallocator%2Fmmap_allocator.d?ref=b1a207c6df0a9c5555017f65f8731acf8d4c14c2", "patch": "@@ -46,6 +46,21 @@ struct MmapAllocator\n             if (b.ptr) munmap(b.ptr, b.length) == 0 || assert(0);\n             return true;\n         }\n+\n+        // Anonymous mmap might be zero-filled on all Posix systems but\n+        // not all commit to this in the documentation.\n+        version (linux)\n+            // http://man7.org/linux/man-pages/man2/mmap.2.html\n+            package alias allocateZeroed = allocate;\n+        else version (NetBSD)\n+            // http://netbsd.gw.com/cgi-bin/man-cgi?mmap+2+NetBSD-current\n+            package alias allocateZeroed = allocate;\n+        else version (Solaris)\n+            // https://docs.oracle.com/cd/E88353_01/html/E37841/mmap-2.html\n+            package alias allocateZeroed = allocate;\n+        else version (AIX)\n+            // https://www.ibm.com/support/knowledgecenter/en/ssw_aix_71/com.ibm.aix.basetrf1/mmap.htm\n+            package alias allocateZeroed = allocate;\n     }\n     else version (Windows)\n     {\n@@ -67,6 +82,8 @@ struct MmapAllocator\n         {\n             return b.ptr is null || VirtualFree(b.ptr, 0, MEM_RELEASE) != 0;\n         }\n+\n+        package alias allocateZeroed = allocate;\n     }\n }\n "}, {"sha": "13a3db0ff662a574f96957b7dad5821e3dad78b8", "filename": "libphobos/src/std/file.d", "status": "modified", "additions": 78, "deletions": 10, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1a207c6df0a9c5555017f65f8731acf8d4c14c2/libphobos%2Fsrc%2Fstd%2Ffile.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1a207c6df0a9c5555017f65f8731acf8d4c14c2/libphobos%2Fsrc%2Fstd%2Ffile.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fsrc%2Fstd%2Ffile.d?ref=b1a207c6df0a9c5555017f65f8731acf8d4c14c2", "patch": "@@ -1490,6 +1490,15 @@ if (isInputRange!R && !isInfinite!R && isSomeChar!(ElementEncodingType!R))\n //   vfs.timestamp_precision sysctl to a value greater than zero.\n // - OS X, where the native filesystem (HFS+) stores filesystem\n //   timestamps with 1-second precision.\n+//\n+// Note: on linux systems, although in theory a change to a file date\n+// can be tracked with precision of 4 msecs, this test waits 20 msecs\n+// to prevent possible problems relative to the CI services the dlang uses,\n+// as they may have the HZ setting that controls the software clock set to 100\n+// (instead of the more common 250).\n+// see https://man7.org/linux/man-pages/man7/time.7.html\n+//     https://stackoverflow.com/a/14393315,\n+//     https://issues.dlang.org/show_bug.cgi?id=21148\n version (FreeBSD) {} else\n version (DragonFlyBSD) {} else\n version (OSX) {} else\n@@ -1508,7 +1517,7 @@ version (OSX) {} else\n         remove(deleteme);\n         assert(time != lastTime);\n         lastTime = time;\n-        Thread.sleep(10.msecs);\n+        Thread.sleep(20.msecs);\n     }\n }\n \n@@ -2757,15 +2766,27 @@ else version (NetBSD)\n             buffer.length *= 2;\n         }\n     }\n+    else version (DragonFlyBSD)\n+    {\n+        import core.sys.dragonflybsd.sys.sysctl : sysctl, CTL_KERN, KERN_PROC, KERN_PROC_PATHNAME;\n+        import std.exception : errnoEnforce, assumeUnique;\n+\n+        int[4] mib = [CTL_KERN, KERN_PROC, KERN_PROC_PATHNAME, -1];\n+        size_t len;\n+\n+        auto result = sysctl(mib.ptr, mib.length, null, &len, null, 0); // get the length of the path\n+        errnoEnforce(result == 0);\n+\n+        auto buffer = new char[len - 1];\n+        result = sysctl(mib.ptr, mib.length, buffer.ptr, &len, null, 0);\n+        errnoEnforce(result == 0);\n+\n+        return buffer.assumeUnique;\n+    }\n     else version (FreeBSD)\n     {\n+        import core.sys.freebsd.sys.sysctl : sysctl, CTL_KERN, KERN_PROC, KERN_PROC_PATHNAME;\n         import std.exception : errnoEnforce, assumeUnique;\n-        enum\n-        {\n-            CTL_KERN = 1,\n-            KERN_PROC = 14,\n-            KERN_PROC_PATHNAME = 12\n-        }\n \n         int[4] mib = [CTL_KERN, KERN_PROC, KERN_PROC_PATHNAME, -1];\n         size_t len;\n@@ -2781,11 +2802,58 @@ else version (NetBSD)\n     }\n     else version (NetBSD)\n     {\n-        return readLink(\"/proc/self/exe\");\n+        import core.sys.netbsd.sys.sysctl : sysctl, CTL_KERN, KERN_PROC_ARGS, KERN_PROC_PATHNAME;\n+        import std.exception : errnoEnforce, assumeUnique;\n+\n+        int[4] mib = [CTL_KERN, KERN_PROC_ARGS, -1, KERN_PROC_PATHNAME];\n+        size_t len;\n+\n+        auto result = sysctl(mib.ptr, mib.length, null, &len, null, 0); // get the length of the path\n+        errnoEnforce(result == 0);\n+\n+        auto buffer = new char[len - 1];\n+        result = sysctl(mib.ptr, mib.length, buffer.ptr, &len, null, 0);\n+        errnoEnforce(result == 0);\n+\n+        return buffer.assumeUnique;\n     }\n-    else version (DragonFlyBSD)\n+    else version (OpenBSD)\n     {\n-        return readLink(\"/proc/curproc/file\");\n+        import core.sys.openbsd.sys.sysctl : sysctl, CTL_KERN, KERN_PROC_ARGS, KERN_PROC_ARGV;\n+        import core.sys.posix.unistd : getpid;\n+        import std.conv : to;\n+        import std.exception : enforce, errnoEnforce;\n+        import std.process : searchPathFor;\n+\n+        int[4] mib = [CTL_KERN, KERN_PROC_ARGS, getpid(), KERN_PROC_ARGV];\n+        size_t len;\n+\n+        auto result = sysctl(mib.ptr, mib.length, null, &len, null, 0);\n+        errnoEnforce(result == 0);\n+\n+        auto argv = new char*[len - 1];\n+        result = sysctl(mib.ptr, mib.length, argv.ptr, &len, null, 0);\n+        errnoEnforce(result == 0);\n+\n+        auto argv0 = argv[0];\n+        if (*argv0 == '/' || *argv0 == '.')\n+        {\n+            import core.sys.posix.stdlib : realpath;\n+            auto absolutePath = realpath(argv0, null);\n+            scope (exit)\n+            {\n+                if (absolutePath)\n+                    free(absolutePath);\n+            }\n+            errnoEnforce(absolutePath);\n+            return to!(string)(absolutePath);\n+        }\n+        else\n+        {\n+            auto absolutePath = searchPathFor(to!string(argv0));\n+            errnoEnforce(absolutePath);\n+            return absolutePath;\n+        }\n     }\n     else version (Solaris)\n     {"}, {"sha": "ff368b79f9d410d97c090c66362a597fdf0b49b1", "filename": "libphobos/src/std/math.d", "status": "modified", "additions": 15, "deletions": 18, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1a207c6df0a9c5555017f65f8731acf8d4c14c2/libphobos%2Fsrc%2Fstd%2Fmath.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1a207c6df0a9c5555017f65f8731acf8d4c14c2/libphobos%2Fsrc%2Fstd%2Fmath.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fsrc%2Fstd%2Fmath.d?ref=b1a207c6df0a9c5555017f65f8731acf8d4c14c2", "patch": "@@ -167,19 +167,14 @@ version (SystemZ)   version = IBMZ_Any;\n version (RISCV32)   version = RISCV_Any;\n version (RISCV64)   version = RISCV_Any;\n \n-version (D_InlineAsm_X86)\n-{\n-    version = InlineAsm_X86_Any;\n-}\n-else version (D_InlineAsm_X86_64)\n-{\n-    version = InlineAsm_X86_Any;\n-}\n+version (D_InlineAsm_X86)    version = InlineAsm_X86_Any;\n+version (D_InlineAsm_X86_64) version = InlineAsm_X86_Any;\n \n-version (CRuntime_Microsoft)\n+version (InlineAsm_X86_Any) version = InlineAsm_X87;\n+version (InlineAsm_X87)\n {\n-    version (InlineAsm_X86_Any)\n-        version = MSVC_InlineAsm;\n+    static assert(real.mant_dig == 64);\n+    version (CRuntime_Microsoft) version = InlineAsm_X87_MSVC;\n }\n \n version (X86_64) version = StaticallyHaveSSE;\n@@ -3610,7 +3605,7 @@ real log1p(real x) @safe pure nothrow @nogc\n real log2(real x) @safe pure nothrow @nogc\n {\n     version (INLINE_YL2X)\n-        return core.math.yl2x(x, 1);\n+        return core.math.yl2x(x, 1.0L);\n     else\n     {\n         // Special cases are the same as for log.\n@@ -4586,19 +4581,21 @@ real round(real x) @trusted nothrow @nogc\n  * If the fractional part of x is exactly 0.5, the return value is rounded\n  * away from zero.\n  *\n- * $(BLUE This function is Posix-Only.)\n+ * $(BLUE This function is not implemented for Digital Mars C runtime.)\n  */\n long lround(real x) @trusted nothrow @nogc\n {\n-    version (Posix)\n-        return core.stdc.math.llroundl(x);\n-    else\n+    version (CRuntime_DigitalMars)\n         assert(0, \"lround not implemented\");\n+    else\n+        return core.stdc.math.llroundl(x);\n }\n \n-version (Posix)\n+///\n+@safe nothrow @nogc unittest\n {\n-    @safe nothrow @nogc unittest\n+    version (CRuntime_DigitalMars) {}\n+    else\n     {\n         assert(lround(0.49) == 0);\n         assert(lround(0.5) == 1);"}, {"sha": "43a1ba59527b30ea68efae2582fc055de370202d", "filename": "libphobos/src/std/parallelism.d", "status": "modified", "additions": 144, "deletions": 89, "changes": 233, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1a207c6df0a9c5555017f65f8731acf8d4c14c2/libphobos%2Fsrc%2Fstd%2Fparallelism.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1a207c6df0a9c5555017f65f8731acf8d4c14c2/libphobos%2Fsrc%2Fstd%2Fparallelism.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fsrc%2Fstd%2Fparallelism.d?ref=b1a207c6df0a9c5555017f65f8731acf8d4c14c2", "patch": "@@ -40,6 +40,15 @@ License:    $(HTTP boost.org/LICENSE_1_0.txt, Boost License 1.0)\n */\n module std.parallelism;\n \n+version (OSX)\n+    version = Darwin;\n+else version (iOS)\n+    version = Darwin;\n+else version (TVOS)\n+    version = Darwin;\n+else version (WatchOS)\n+    version = Darwin;\n+\n ///\n @system unittest\n {\n@@ -86,107 +95,82 @@ import std.meta;\n import std.range.primitives;\n import std.traits;\n \n-version (OSX)\n-{\n-    version = useSysctlbyname;\n-}\n-else version (FreeBSD)\n-{\n-    version = useSysctlbyname;\n-}\n-else version (DragonFlyBSD)\n-{\n-    version = useSysctlbyname;\n-}\n-else version (NetBSD)\n-{\n-    version = useSysctlbyname;\n-}\n+/*\n+(For now public undocumented with reserved name.)\n \n+A lazily initialized global constant. The underlying value is a shared global\n+statically initialized to `outOfBandValue` which must not be a legit value of\n+the constant. Upon the first call the situation is detected and the global is\n+initialized by calling `initializer`. The initializer is assumed to be pure\n+(even if not marked as such), i.e. return the same value upon repeated calls.\n+For that reason, no special precautions are taken so `initializer` may be called\n+more than one time leading to benign races on the cached value.\n \n-version (Windows)\n-{\n-    // BUGS:  Only works on Windows 2000 and above.\n-    shared static this()\n-    {\n-        import core.sys.windows.windows : SYSTEM_INFO, GetSystemInfo;\n-        import std.algorithm.comparison : max;\n+In the quiescent state the cost of the function is an atomic load from a global.\n \n-        SYSTEM_INFO si;\n-        GetSystemInfo(&si);\n-        totalCPUs = max(1, cast(uint) si.dwNumberOfProcessors);\n-    }\n+Params:\n+    T = The type of the pseudo-constant (may be qualified)\n+    outOfBandValue = A value that cannot be valid, it is used for initialization\n+    initializer = The function performing initialization; must be `nothrow`\n \n-}\n-else version (linux)\n-{\n-    shared static this()\n-    {\n-        import core.sys.posix.unistd : _SC_NPROCESSORS_ONLN, sysconf;\n-        totalCPUs = cast(uint) sysconf(_SC_NPROCESSORS_ONLN);\n-    }\n-}\n-else version (Solaris)\n-{\n-    shared static this()\n-    {\n-        import core.sys.posix.unistd : _SC_NPROCESSORS_ONLN, sysconf;\n-        totalCPUs = cast(uint) sysconf(_SC_NPROCESSORS_ONLN);\n-    }\n-}\n-else version (useSysctlbyname)\n+Returns:\n+    The lazily initialized value\n+*/\n+@property pure\n+T __lazilyInitializedConstant(T, alias outOfBandValue, alias initializer)()\n+if (is(Unqual!T : T)\n+    && is(typeof(initializer()) : T)\n+    && is(typeof(outOfBandValue) : T))\n {\n-    extern(C) int sysctlbyname(\n-        const char *, void *, size_t *, void *, size_t\n-    );\n-\n-    shared static this()\n-    {\n-        version (OSX)\n-        {\n-            auto nameStr = \"machdep.cpu.core_count\\0\".ptr;\n-        }\n-        else version (FreeBSD)\n+    static T impl() nothrow\n+    {\n+        // Thread-local cache\n+        static Unqual!T tls = outOfBandValue;\n+        auto local = tls;\n+        // Shortest path, no atomic operations\n+        if (local != outOfBandValue) return local;\n+        // Process-level cache\n+        static shared Unqual!T result = outOfBandValue;\n+        // Initialize both process-level cache and tls\n+        local = atomicLoad(result);\n+        if (local == outOfBandValue)\n         {\n-            auto nameStr = \"hw.ncpu\\0\".ptr;\n+            local = initializer();\n+            atomicStore(result, local);\n         }\n-        else version (DragonFlyBSD)\n-        {\n-            auto nameStr = \"hw.ncpu\\0\".ptr;\n-        }\n-        else version (NetBSD)\n-        {\n-            auto nameStr = \"hw.ncpu\\0\".ptr;\n-        }\n-\n-        uint ans;\n-        size_t len = uint.sizeof;\n-        sysctlbyname(nameStr, &ans, &len, null, 0);\n-        totalCPUs = ans;\n+        tls = local;\n+        return local;\n     }\n \n+    import std.traits : SetFunctionAttributes;\n+    alias Fun = SetFunctionAttributes!(typeof(&impl), \"D\",\n+        functionAttributes!(typeof(&impl)) | FunctionAttribute.pure_);\n+    auto purified = (() @trusted => cast(Fun) &impl)();\n+    return purified();\n }\n-else\n-{\n-    static assert(0, \"Don't know how to get N CPUs on this OS.\");\n-}\n \n-immutable size_t cacheLineSize;\n-shared static this()\n+// Returns the size of a cache line.\n+alias cacheLineSize =\n+    __lazilyInitializedConstant!(immutable(size_t), size_t.max, cacheLineSizeImpl);\n+\n+private size_t cacheLineSizeImpl() @nogc nothrow @trusted\n {\n+    size_t result = 0;\n     import core.cpuid : datacache;\n-    size_t lineSize = 0;\n-    foreach (cachelevel; datacache)\n+    foreach (ref const cachelevel; datacache)\n     {\n-        if (cachelevel.lineSize > lineSize && cachelevel.lineSize < uint.max)\n+        if (cachelevel.lineSize > result && cachelevel.lineSize < uint.max)\n         {\n-            lineSize = cachelevel.lineSize;\n+            result = cachelevel.lineSize;\n         }\n     }\n-\n-    cacheLineSize = lineSize;\n+    return result;\n }\n \n+@nogc @safe nothrow unittest\n+{\n+    assert(cacheLineSize == cacheLineSizeImpl);\n+}\n \n /* Atomics code.  These forward to core.atomic, but are written like this\n    for two reasons:\n@@ -957,7 +941,81 @@ if (is(typeof(fun(args))) && isSafeTask!F)\n The total number of CPU cores available on the current machine, as reported by\n the operating system.\n */\n-immutable uint totalCPUs;\n+alias totalCPUs =\n+    __lazilyInitializedConstant!(immutable(uint), uint.max, totalCPUsImpl);\n+\n+uint totalCPUsImpl() @nogc nothrow @trusted\n+{\n+    version (Windows)\n+    {\n+        // BUGS:  Only works on Windows 2000 and above.\n+        import core.sys.windows.winbase : SYSTEM_INFO, GetSystemInfo;\n+        import std.algorithm.comparison : max;\n+        SYSTEM_INFO si;\n+        GetSystemInfo(&si);\n+        return max(1, cast(uint) si.dwNumberOfProcessors);\n+    }\n+    else version (linux)\n+    {\n+        import core.sys.linux.sched : CPU_COUNT, cpu_set_t, sched_getaffinity;\n+        import core.sys.posix.unistd : _SC_NPROCESSORS_ONLN, sysconf;\n+\n+        cpu_set_t set = void;\n+        if (sched_getaffinity(0, cpu_set_t.sizeof, &set) == 0)\n+        {\n+            int count = CPU_COUNT(&set);\n+            if (count > 0)\n+                return cast(uint) count;\n+        }\n+        return cast(uint) sysconf(_SC_NPROCESSORS_ONLN);\n+    }\n+    else version (Darwin)\n+    {\n+        import core.sys.darwin.sys.sysctl : sysctlbyname;\n+        uint result;\n+        size_t len = result.sizeof;\n+        sysctlbyname(\"hw.physicalcpu\", &result, &len, null, 0);\n+        return result;\n+    }\n+    else version (DragonFlyBSD)\n+    {\n+        import core.sys.dragonflybsd.sys.sysctl : sysctlbyname;\n+        uint result;\n+        size_t len = result.sizeof;\n+        sysctlbyname(\"hw.ncpu\", &result, &len, null, 0);\n+        return result;\n+    }\n+    else version (FreeBSD)\n+    {\n+        import core.sys.freebsd.sys.sysctl : sysctlbyname;\n+        uint result;\n+        size_t len = result.sizeof;\n+        sysctlbyname(\"hw.ncpu\", &result, &len, null, 0);\n+        return result;\n+    }\n+    else version (NetBSD)\n+    {\n+        import core.sys.netbsd.sys.sysctl : sysctlbyname;\n+        uint result;\n+        size_t len = result.sizeof;\n+        sysctlbyname(\"hw.ncpu\", &result, &len, null, 0);\n+        return result;\n+    }\n+    else version (Solaris)\n+    {\n+        import core.sys.posix.unistd : _SC_NPROCESSORS_ONLN, sysconf;\n+        return cast(uint) sysconf(_SC_NPROCESSORS_ONLN);\n+    }\n+    else version (OpenBSD)\n+    {\n+        import core.sys.posix.unistd : _SC_NPROCESSORS_ONLN, sysconf;\n+        return cast(uint) sysconf(_SC_NPROCESSORS_ONLN);\n+    }\n+    else\n+    {\n+        static assert(0, \"Don't know how to get N CPUs on this OS.\");\n+    }\n+}\n \n /*\n This class serves two purposes:\n@@ -3302,11 +3360,7 @@ terminating the main thread.\n     }());\n }\n \n-private shared uint _defaultPoolThreads;\n-shared static this()\n-{\n-    atomicStore(_defaultPoolThreads, totalCPUs - 1);\n-}\n+private shared uint _defaultPoolThreads = uint.max;\n \n /**\n These properties get and set the number of worker threads in the $(D TaskPool)\n@@ -3316,7 +3370,8 @@ number of worker threads in the instance returned by $(D taskPool).\n */\n @property uint defaultPoolThreads() @trusted\n {\n-    return atomicLoad(_defaultPoolThreads);\n+    const local = atomicLoad(_defaultPoolThreads);\n+    return local < uint.max ? local : totalCPUs - 1;\n }\n \n /// Ditto"}, {"sha": "ecb2c8b916ec2c30e5c082f2ba7bc87b18960cb3", "filename": "libphobos/src/std/socket.d", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1a207c6df0a9c5555017f65f8731acf8d4c14c2/libphobos%2Fsrc%2Fstd%2Fsocket.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1a207c6df0a9c5555017f65f8731acf8d4c14c2/libphobos%2Fsrc%2Fstd%2Fsocket.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fsrc%2Fstd%2Fsocket.d?ref=b1a207c6df0a9c5555017f65f8731acf8d4c14c2", "patch": "@@ -146,6 +146,8 @@ class SocketException: Exception\n     mixin basicExceptionCtors;\n }\n \n+version (CRuntime_Glibc) version = GNU_STRERROR;\n+version (CRuntime_UClibc) version = GNU_STRERROR;\n \n /*\n  * Needs to be public so that SocketOSException can be thrown outside of\n@@ -159,7 +161,7 @@ string formatSocketError(int err) @trusted\n     {\n         char[80] buf;\n         const(char)* cs;\n-        version (CRuntime_Glibc)\n+        version (GNU_STRERROR)\n         {\n             cs = strerror_r(err, buf.ptr, buf.length);\n         }"}, {"sha": "bbf785773d48618c88d30ca13fc851aecb991297", "filename": "libphobos/src/std/stdio.d", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1a207c6df0a9c5555017f65f8731acf8d4c14c2/libphobos%2Fsrc%2Fstd%2Fstdio.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1a207c6df0a9c5555017f65f8731acf8d4c14c2/libphobos%2Fsrc%2Fstd%2Fstdio.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fsrc%2Fstd%2Fstdio.d?ref=b1a207c6df0a9c5555017f65f8731acf8d4c14c2", "patch": "@@ -79,6 +79,10 @@ else version (NetBSD)\n {\n     version = GENERIC_IO;\n }\n+else version (OpenBSD)\n+{\n+    version = GENERIC_IO;\n+}\n else version (DragonFlyBSD)\n {\n     version = GENERIC_IO;\n@@ -93,12 +97,11 @@ version (Windows)\n {\n     private alias FSChar = wchar;\n }\n-else version (Posix)\n+else\n {\n     private alias FSChar = char;\n }\n-else\n-    static assert(0);\n+\n \n version (Windows)\n {"}, {"sha": "353d692848a7e4a61771d8c4612547a3b3f9d8e0", "filename": "libphobos/src/std/system.d", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1a207c6df0a9c5555017f65f8731acf8d4c14c2/libphobos%2Fsrc%2Fstd%2Fsystem.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1a207c6df0a9c5555017f65f8731acf8d4c14c2/libphobos%2Fsrc%2Fstd%2Fsystem.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fsrc%2Fstd%2Fsystem.d?ref=b1a207c6df0a9c5555017f65f8731acf8d4c14c2", "patch": "@@ -30,6 +30,9 @@ immutable\n         win64,     /// Microsoft 64 bit Windows systems\n         linux,     /// All Linux Systems, except for Android\n         osx,       /// Mac OS X\n+        iOS,       /// iOS\n+        tvOS,      /// tvOS\n+        watchOS,   /// watchOS\n         freeBSD,   /// FreeBSD\n         netBSD,    /// NetBSD\n         dragonFlyBSD, /// DragonFlyBSD\n@@ -44,6 +47,9 @@ immutable\n     else version (Android) OS os = OS.android;\n     else version (linux)   OS os = OS.linux;\n     else version (OSX)     OS os = OS.osx;\n+    else version (iOS)     OS os = OS.iOS;\n+    else version (tvOS)    OS os = OS.tvOS;\n+    else version (watchOS) OS os = OS.watchOS;\n     else version (FreeBSD) OS os = OS.freeBSD;\n     else version (NetBSD)  OS os = OS.netBSD;\n     else version (DragonFlyBSD) OS os = OS.dragonFlyBSD;"}]}