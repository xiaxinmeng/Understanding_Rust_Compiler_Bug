{"sha": "ffb7d4b2b76746e4189979f9d27d80be2195308a", "node_id": "C_kwDOANBUbNoAKGZmYjdkNGIyYjc2NzQ2ZTQxODk5NzlmOWQyN2Q4MGJlMjE5NTMwOGE", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2022-01-14T15:05:17Z"}, "committer": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2022-01-14T15:06:00Z"}, "message": "i386: Mark some of strict_low_part insn constraints earlyclobbered\n\nWhile there is practically impossible that input registers are matched\nwith in-out register, better mark the output operand of the split alternative\nas earlyclobbered - we do output early to the output operand when\nthe insn is split.\n\n2022-01-14  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n\ngcc/ChangeLog:\n\n\t* config/i386/i386.md (*add<mode>_1_slp\"):\n\tMark alternative 1 output operand earlyclobbered.\n\t(*sub<mode>_1_slp): Ditto.\n\t(*and<mode>_1_slp): Ditto.\n\t(*<code><mode>_1_slp): Ditto.\n\t(*neg<mode>_1_slp): Ditto.\n\t(*one_cmpl<mode>_1_slp): Ditto.\n\t(*ashl<mode>3_1_slp): Ditto.\n\t(*<insn><mode>3_1_slp): Ditto.\n\t(*<insn><mode>3_1_slp): Ditto.", "tree": {"sha": "ae834a6004344ddf3af22e40d7a208f9615f5503", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ae834a6004344ddf3af22e40d7a208f9615f5503"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ffb7d4b2b76746e4189979f9d27d80be2195308a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffb7d4b2b76746e4189979f9d27d80be2195308a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ffb7d4b2b76746e4189979f9d27d80be2195308a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffb7d4b2b76746e4189979f9d27d80be2195308a/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74abb0beb420830e52dfc6b3ee74e77dae8e31a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74abb0beb420830e52dfc6b3ee74e77dae8e31a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74abb0beb420830e52dfc6b3ee74e77dae8e31a3"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "7b1694314ea8ac92eda5f8a4ecd7821aaa0a5a6a", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffb7d4b2b76746e4189979f9d27d80be2195308a/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffb7d4b2b76746e4189979f9d27d80be2195308a/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=ffb7d4b2b76746e4189979f9d27d80be2195308a", "patch": "@@ -5902,7 +5902,7 @@\n \n ;; Alternative 1 is needed to work around LRA limitation, see PR82524.\n (define_insn_and_split \"*add<mode>_1_slp\"\n-  [(set (strict_low_part (match_operand:SWI12 0 \"register_operand\" \"+<r>,<r>\"))\n+  [(set (strict_low_part (match_operand:SWI12 0 \"register_operand\" \"+<r>,&<r>\"))\n \t(plus:SWI12 (match_operand:SWI12 1 \"nonimmediate_operand\" \"%0,!<r>\")\n \t\t    (match_operand:SWI12 2 \"general_operand\" \"<r>mn,<r>mn\")))\n    (clobber (reg:CC FLAGS_REG))]\n@@ -6856,7 +6856,7 @@\n \n ;; Alternative 1 is needed to work around LRA limitation, see PR82524.\n (define_insn_and_split \"*sub<mode>_1_slp\"\n-  [(set (strict_low_part (match_operand:SWI12 0 \"register_operand\" \"+<r>,<r>\"))\n+  [(set (strict_low_part (match_operand:SWI12 0 \"register_operand\" \"+<r>,&<r>\"))\n \t(minus:SWI12 (match_operand:SWI12 1 \"register_operand\" \"0,!<r>\")\n \t\t     (match_operand:SWI12 2 \"general_operand\" \"<r>mn,<r>mn\")))\n    (clobber (reg:CC FLAGS_REG))]\n@@ -9905,7 +9905,7 @@\n \n ;; Alternative 1 is needed to work around LRA limitation, see PR82524.\n (define_insn_and_split \"*and<mode>_1_slp\"\n-  [(set (strict_low_part (match_operand:SWI12 0 \"register_operand\" \"+<r>,<r>\"))\n+  [(set (strict_low_part (match_operand:SWI12 0 \"register_operand\" \"+<r>,&<r>\"))\n \t(and:SWI12 (match_operand:SWI12 1 \"nonimmediate_operand\" \"%0,!<r>\")\n \t\t   (match_operand:SWI12 2 \"general_operand\" \"<r>mn,<r>mn\")))\n    (clobber (reg:CC FLAGS_REG))]\n@@ -10542,7 +10542,7 @@\n \n ;; Alternative 1 is needed to work around LRA limitation, see PR82524.\n (define_insn_and_split \"*<code><mode>_1_slp\"\n-  [(set (strict_low_part (match_operand:SWI12 0 \"register_operand\" \"+<r>,<r>\"))\n+  [(set (strict_low_part (match_operand:SWI12 0 \"register_operand\" \"+<r>,&<r>\"))\n \t(any_or:SWI12 (match_operand:SWI12 1 \"nonimmediate_operand\" \"%0,!<r>\")\n \t\t      (match_operand:SWI12 2 \"general_operand\" \"<r>mn,<r>mn\")))\n    (clobber (reg:CC FLAGS_REG))]\n@@ -10896,7 +10896,7 @@\n \n ;; Alternative 1 is needed to work around LRA limitation, see PR82524.\n (define_insn_and_split \"*neg<mode>_1_slp\"\n-  [(set (strict_low_part (match_operand:SWI12 0 \"register_operand\" \"+<r>,<r>\"))\n+  [(set (strict_low_part (match_operand:SWI12 0 \"register_operand\" \"+<r>,&<r>\"))\n \t(neg:SWI12 (match_operand:SWI12 1 \"register_operand\" \"0,!<r>\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"!TARGET_PARTIAL_REG_STALL || optimize_function_for_size_p (cfun)\"\n@@ -11489,7 +11489,7 @@\n \n ;; Alternative 1 is needed to work around LRA limitation, see PR82524.\n (define_insn_and_split \"*one_cmpl<mode>_1_slp\"\n-  [(set (strict_low_part (match_operand:SWI12 0 \"register_operand\" \"+<r>,<r>\"))\n+  [(set (strict_low_part (match_operand:SWI12 0 \"register_operand\" \"+<r>,&<r>\"))\n \t(not:SWI12 (match_operand:SWI12 1 \"register_operand\" \"0,!<r>\")))]\n   \"!TARGET_PARTIAL_REG_STALL || optimize_function_for_size_p (cfun)\"\n   \"@\n@@ -12185,7 +12185,7 @@\n \n ;; Alternative 1 is needed to work around LRA limitation, see PR82524.\n (define_insn_and_split \"*ashl<mode>3_1_slp\"\n-  [(set (strict_low_part (match_operand:SWI12 0 \"register_operand\" \"+<r>,<r>\"))\n+  [(set (strict_low_part (match_operand:SWI12 0 \"register_operand\" \"+<r>,&<r>\"))\n \t(ashift:SWI12 (match_operand:SWI12 1 \"register_operand\" \"0,!<r>\")\n \t\t      (match_operand:QI 2 \"nonmemory_operand\" \"cI,cI\")))\n    (clobber (reg:CC FLAGS_REG))]\n@@ -13062,7 +13062,7 @@\n \n ;; Alternative 1 is needed to work around LRA limitation, see PR82524.\n (define_insn_and_split \"*<insn><mode>3_1_slp\"\n-  [(set (strict_low_part (match_operand:SWI12 0 \"register_operand\" \"+<r>,<r>\"))\n+  [(set (strict_low_part (match_operand:SWI12 0 \"register_operand\" \"+<r>,&<r>\"))\n \t(any_shiftrt:SWI12 (match_operand:SWI12 1 \"register_operand\" \"0,!<r>\")\n \t\t\t   (match_operand:QI 2 \"nonmemory_operand\" \"cI,cI\")))\n    (clobber (reg:CC FLAGS_REG))]\n@@ -13606,7 +13606,7 @@\n \n ;; Alternative 1 is needed to work around LRA limitation, see PR82524.\n (define_insn_and_split \"*<insn><mode>3_1_slp\"\n-  [(set (strict_low_part (match_operand:SWI12 0 \"register_operand\" \"+<r>,<r>\"))\n+  [(set (strict_low_part (match_operand:SWI12 0 \"register_operand\" \"+<r>,&<r>\"))\n \t(any_rotate:SWI12 (match_operand:SWI12 1 \"register_operand\" \"0,!<r>\")\n \t\t\t  (match_operand:QI 2 \"nonmemory_operand\" \"cI,cI\")))\n    (clobber (reg:CC FLAGS_REG))]"}]}