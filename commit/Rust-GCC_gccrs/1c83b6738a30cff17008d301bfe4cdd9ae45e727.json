{"sha": "1c83b6738a30cff17008d301bfe4cdd9ae45e727", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWM4M2I2NzM4YTMwY2ZmMTcwMDhkMzAxYmZlNGNkZDlhZTQ1ZTcyNw==", "commit": {"author": {"name": "James Greenhalgh", "email": "james.greenhalgh@arm.com", "date": "2013-09-06T11:02:52Z"}, "committer": {"name": "James Greenhalgh", "email": "jgreenhalgh@gcc.gnu.org", "date": "2013-09-06T11:02:52Z"}, "message": "[Patch AArch64] Fix register constraints for lane intrinsics.\n\ngcc/\n\t* config/aarch64/aarch64-simd.md\n\t(aarch64_sqdml<SBINQOPS:as>l_n<mode>_internal): Use\n\t<vwx> iterator to ensure correct register choice.\n\t(aarch64_sqdml<SBINQOPS:as>l2_n<mode>_internal): Likewise.\n\t(aarch64_sqdmull_n<mode>): Likewise.\n\t(aarch64_sqdmull2_n<mode>_internal): Likewise.\n\t* config/aarch64/arm_neon.h\n\t(vml<as><q>_lane<q>_<su>16): Use 'x' constraint for element vector.\n\t(vml<as><q>_n_<su>16): Likewise.\n\t(vml<as>l_high_lane<q>_<su>16): Likewise.\n\t(vml<as>l_high_n_<su>16): Likewise.\n\t(vml<as>l_lane<q>_<su>16): Likewise.\n\t(vml<as>l_n_<su>16): Likewise.\n\t(vmul<q>_lane<q>_<su>16): Likewise.\n\t(vmul<q>_n_<su>16): Likewise.\n\t(vmull_lane<q>_<su>16): Likewise.\n\t(vmull_n_<su>16): Likewise.\n\t(vmull_high_lane<q>_<su>16): Likewise.\n\t(vmull_high_n_<su>16): Likewise.\n\t(vqrdmulh<q>_n_s16): Likewise.\n\nFrom-SVN: r202322", "tree": {"sha": "e4d27587879ef34d237340636fafbe6e7933a3c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e4d27587879ef34d237340636fafbe6e7933a3c6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1c83b6738a30cff17008d301bfe4cdd9ae45e727", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c83b6738a30cff17008d301bfe4cdd9ae45e727", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c83b6738a30cff17008d301bfe4cdd9ae45e727", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c83b6738a30cff17008d301bfe4cdd9ae45e727/comments", "author": {"login": "jgreenhalgh-arm", "id": 6104025, "node_id": "MDQ6VXNlcjYxMDQwMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6104025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgreenhalgh-arm", "html_url": "https://github.com/jgreenhalgh-arm", "followers_url": "https://api.github.com/users/jgreenhalgh-arm/followers", "following_url": "https://api.github.com/users/jgreenhalgh-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jgreenhalgh-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgreenhalgh-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgreenhalgh-arm/subscriptions", "organizations_url": "https://api.github.com/users/jgreenhalgh-arm/orgs", "repos_url": "https://api.github.com/users/jgreenhalgh-arm/repos", "events_url": "https://api.github.com/users/jgreenhalgh-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jgreenhalgh-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bb1ae543739b50a8559f52ce3760af6bb2e090e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb1ae543739b50a8559f52ce3760af6bb2e090e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb1ae543739b50a8559f52ce3760af6bb2e090e2"}], "stats": {"total": 169, "additions": 96, "deletions": 73}, "files": [{"sha": "667e1189171642e7d94e621b1b99149af4bd9c58", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c83b6738a30cff17008d301bfe4cdd9ae45e727/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c83b6738a30cff17008d301bfe4cdd9ae45e727/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1c83b6738a30cff17008d301bfe4cdd9ae45e727", "patch": "@@ -1,3 +1,26 @@\n+2013-09-06  James Greenhalgh  <james.greenhalgh@arm.com>\n+\n+\t* config/aarch64/aarch64-simd.md\n+\t(aarch64_sqdml<SBINQOPS:as>l_n<mode>_internal): Use\n+\t<vwx> iterator to ensure correct register choice.\n+\t(aarch64_sqdml<SBINQOPS:as>l2_n<mode>_internal): Likewise.\n+\t(aarch64_sqdmull_n<mode>): Likewise.\n+\t(aarch64_sqdmull2_n<mode>_internal): Likewise.\n+\t* config/aarch64/arm_neon.h\n+\t(vml<as><q>_lane<q>_<su>16): Use 'x' constraint for element vector.\n+\t(vml<as><q>_n_<su>16): Likewise.\n+\t(vml<as>l_high_lane<q>_<su>16): Likewise.\n+\t(vml<as>l_high_n_<su>16): Likewise.\n+\t(vml<as>l_lane<q>_<su>16): Likewise.\n+\t(vml<as>l_n_<su>16): Likewise.\n+\t(vmul<q>_lane<q>_<su>16): Likewise.\n+\t(vmul<q>_n_<su>16): Likewise.\n+\t(vmull_lane<q>_<su>16): Likewise.\n+\t(vmull_n_<su>16): Likewise.\n+\t(vmull_high_lane<q>_<su>16): Likewise.\n+\t(vmull_high_n_<su>16): Likewise.\n+\t(vqrdmulh<q>_n_s16): Likewise.\n+\n 2013-09-06  Tejas Belagod  <tejas.belagod@arm.com>\n \n \t* config/aarch64/arm_neon.h: Fix all vdup<bhsd_lane<q> intrinsics to"}, {"sha": "5161e48dfcea91910b9dc2ee68219c3ede55f4aa", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c83b6738a30cff17008d301bfe4cdd9ae45e727/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c83b6738a30cff17008d301bfe4cdd9ae45e727/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=1c83b6738a30cff17008d301bfe4cdd9ae45e727", "patch": "@@ -2797,7 +2797,7 @@\n \t\t      (match_operand:VD_HSI 2 \"register_operand\" \"w\"))\n \t\t(sign_extend:<VWIDE>\n \t\t  (vec_duplicate:VD_HSI\n-\t\t    (match_operand:<VEL> 3 \"register_operand\" \"w\"))))\n+\t\t    (match_operand:<VEL> 3 \"register_operand\" \"<vwx>\"))))\n \t      (const_int 1))))]\n   \"TARGET_SIMD\"\n   \"sqdml<SBINQOPS:as>l\\\\t%<vw2>0<Vmwtype>, %<v>2<Vmtype>, %3.<Vetype>[0]\"\n@@ -2955,7 +2955,7 @@\n                   (match_operand:VQ_HSI 4 \"vect_par_cnst_hi_half\" \"\")))\n \t      (sign_extend:<VWIDE>\n                 (vec_duplicate:<VHALF>\n-\t\t  (match_operand:<VEL> 3 \"register_operand\" \"w\"))))\n+\t\t  (match_operand:<VEL> 3 \"register_operand\" \"<vwx>\"))))\n \t    (const_int 1))))]\n   \"TARGET_SIMD\"\n   \"sqdml<SBINQOPS:as>l2\\\\t%<vw2>0<Vmwtype>, %<v>2<Vmtype>, %3.<Vetype>[0]\"\n@@ -3083,7 +3083,7 @@\n \t\t (match_operand:VD_HSI 1 \"register_operand\" \"w\"))\n \t       (sign_extend:<VWIDE>\n                  (vec_duplicate:VD_HSI\n-                   (match_operand:<VEL> 2 \"register_operand\" \"w\")))\n+                   (match_operand:<VEL> 2 \"register_operand\" \"<vwx>\")))\n \t       )\n \t     (const_int 1)))]\n   \"TARGET_SIMD\"\n@@ -3193,7 +3193,7 @@\n                    (match_operand:VQ_HSI 3 \"vect_par_cnst_hi_half\" \"\")))\n \t       (sign_extend:<VWIDE>\n                  (vec_duplicate:<VHALF>\n-                   (match_operand:<VEL> 2 \"register_operand\" \"w\")))\n+                   (match_operand:<VEL> 2 \"register_operand\" \"<vwx>\")))\n \t       )\n \t     (const_int 1)))]\n   \"TARGET_SIMD\""}, {"sha": "741402e60e3ec18ba64eeb01414c0f21e561bdb2", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 69, "deletions": 69, "changes": 138, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c83b6738a30cff17008d301bfe4cdd9ae45e727/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c83b6738a30cff17008d301bfe4cdd9ae45e727/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=1c83b6738a30cff17008d301bfe4cdd9ae45e727", "patch": "@@ -7146,7 +7146,7 @@ vld1q_dup_u64 (const uint64_t * a)\n        int16x4_t result;                                                \\\n        __asm__ (\"mla %0.4h, %2.4h, %3.h[%4]\"                            \\\n                 : \"=w\"(result)                                          \\\n-                : \"0\"(a_), \"w\"(b_), \"w\"(c_), \"i\"(d)                     \\\n+                : \"0\"(a_), \"w\"(b_), \"x\"(c_), \"i\"(d)                     \\\n                 : /* No clobbers */);                                   \\\n        result;                                                          \\\n      })\n@@ -7174,7 +7174,7 @@ vld1q_dup_u64 (const uint64_t * a)\n        uint16x4_t result;                                               \\\n        __asm__ (\"mla %0.4h, %2.4h, %3.h[%4]\"                            \\\n                 : \"=w\"(result)                                          \\\n-                : \"0\"(a_), \"w\"(b_), \"w\"(c_), \"i\"(d)                     \\\n+                : \"0\"(a_), \"w\"(b_), \"x\"(c_), \"i\"(d)                     \\\n                 : /* No clobbers */);                                   \\\n        result;                                                          \\\n      })\n@@ -7202,7 +7202,7 @@ vld1q_dup_u64 (const uint64_t * a)\n        int16x4_t result;                                                \\\n        __asm__ (\"mla %0.4h, %2.4h, %3.h[%4]\"                            \\\n                 : \"=w\"(result)                                          \\\n-                : \"0\"(a_), \"w\"(b_), \"w\"(c_), \"i\"(d)                     \\\n+                : \"0\"(a_), \"w\"(b_), \"x\"(c_), \"i\"(d)                     \\\n                 : /* No clobbers */);                                   \\\n        result;                                                          \\\n      })\n@@ -7230,7 +7230,7 @@ vld1q_dup_u64 (const uint64_t * a)\n        uint16x4_t result;                                               \\\n        __asm__ (\"mla %0.4h, %2.4h, %3.h[%4]\"                            \\\n                 : \"=w\"(result)                                          \\\n-                : \"0\"(a_), \"w\"(b_), \"w\"(c_), \"i\"(d)                     \\\n+                : \"0\"(a_), \"w\"(b_), \"x\"(c_), \"i\"(d)                     \\\n                 : /* No clobbers */);                                   \\\n        result;                                                          \\\n      })\n@@ -7267,7 +7267,7 @@ vmla_n_s16 (int16x4_t a, int16x4_t b, int16_t c)\n   int16x4_t result;\n   __asm__ (\"mla %0.4h,%2.4h,%3.h[0]\"\n            : \"=w\"(result)\n-           : \"0\"(a), \"w\"(b), \"w\"(c)\n+           : \"0\"(a), \"w\"(b), \"x\"(c)\n            : /* No clobbers */);\n   return result;\n }\n@@ -7289,7 +7289,7 @@ vmla_n_u16 (uint16x4_t a, uint16x4_t b, uint16_t c)\n   uint16x4_t result;\n   __asm__ (\"mla %0.4h,%2.4h,%3.h[0]\"\n            : \"=w\"(result)\n-           : \"0\"(a), \"w\"(b), \"w\"(c)\n+           : \"0\"(a), \"w\"(b), \"x\"(c)\n            : /* No clobbers */);\n   return result;\n }\n@@ -7380,7 +7380,7 @@ vmla_u32 (uint32x2_t a, uint32x2_t b, uint32x2_t c)\n        int32x4_t result;                                                \\\n        __asm__ (\"smlal2 %0.4s, %2.8h, %3.h[%4]\"                         \\\n                 : \"=w\"(result)                                          \\\n-                : \"0\"(a_), \"w\"(b_), \"w\"(c_), \"i\"(d)                     \\\n+                : \"0\"(a_), \"w\"(b_), \"x\"(c_), \"i\"(d)                     \\\n                 : /* No clobbers */);                                   \\\n        result;                                                          \\\n      })\n@@ -7408,7 +7408,7 @@ vmla_u32 (uint32x2_t a, uint32x2_t b, uint32x2_t c)\n        uint32x4_t result;                                               \\\n        __asm__ (\"umlal2 %0.4s, %2.8h, %3.h[%4]\"                         \\\n                 : \"=w\"(result)                                          \\\n-                : \"0\"(a_), \"w\"(b_), \"w\"(c_), \"i\"(d)                     \\\n+                : \"0\"(a_), \"w\"(b_), \"x\"(c_), \"i\"(d)                     \\\n                 : /* No clobbers */);                                   \\\n        result;                                                          \\\n      })\n@@ -7436,7 +7436,7 @@ vmla_u32 (uint32x2_t a, uint32x2_t b, uint32x2_t c)\n        int32x4_t result;                                                \\\n        __asm__ (\"smlal2 %0.4s, %2.8h, %3.h[%4]\"                         \\\n                 : \"=w\"(result)                                          \\\n-                : \"0\"(a_), \"w\"(b_), \"w\"(c_), \"i\"(d)                     \\\n+                : \"0\"(a_), \"w\"(b_), \"x\"(c_), \"i\"(d)                     \\\n                 : /* No clobbers */);                                   \\\n        result;                                                          \\\n      })\n@@ -7464,7 +7464,7 @@ vmla_u32 (uint32x2_t a, uint32x2_t b, uint32x2_t c)\n        uint32x4_t result;                                               \\\n        __asm__ (\"umlal2 %0.4s, %2.8h, %3.h[%4]\"                         \\\n                 : \"=w\"(result)                                          \\\n-                : \"0\"(a_), \"w\"(b_), \"w\"(c_), \"i\"(d)                     \\\n+                : \"0\"(a_), \"w\"(b_), \"x\"(c_), \"i\"(d)                     \\\n                 : /* No clobbers */);                                   \\\n        result;                                                          \\\n      })\n@@ -7489,7 +7489,7 @@ vmlal_high_n_s16 (int32x4_t a, int16x8_t b, int16_t c)\n   int32x4_t result;\n   __asm__ (\"smlal2 %0.4s,%2.8h,%3.h[0]\"\n            : \"=w\"(result)\n-           : \"0\"(a), \"w\"(b), \"w\"(c)\n+           : \"0\"(a), \"w\"(b), \"x\"(c)\n            : /* No clobbers */);\n   return result;\n }\n@@ -7511,7 +7511,7 @@ vmlal_high_n_u16 (uint32x4_t a, uint16x8_t b, uint16_t c)\n   uint32x4_t result;\n   __asm__ (\"umlal2 %0.4s,%2.8h,%3.h[0]\"\n            : \"=w\"(result)\n-           : \"0\"(a), \"w\"(b), \"w\"(c)\n+           : \"0\"(a), \"w\"(b), \"x\"(c)\n            : /* No clobbers */);\n   return result;\n }\n@@ -7602,7 +7602,7 @@ vmlal_high_u32 (uint64x2_t a, uint32x4_t b, uint32x4_t c)\n        int32x4_t result;                                                \\\n        __asm__ (\"smlal %0.4s,%2.4h,%3.h[%4]\"                            \\\n                 : \"=w\"(result)                                          \\\n-                : \"0\"(a_), \"w\"(b_), \"w\"(c_), \"i\"(d)                     \\\n+                : \"0\"(a_), \"w\"(b_), \"x\"(c_), \"i\"(d)                     \\\n                 : /* No clobbers */);                                   \\\n        result;                                                          \\\n      })\n@@ -7630,7 +7630,7 @@ vmlal_high_u32 (uint64x2_t a, uint32x4_t b, uint32x4_t c)\n        uint32x4_t result;                                               \\\n        __asm__ (\"umlal %0.4s,%2.4h,%3.h[%4]\"                            \\\n                 : \"=w\"(result)                                          \\\n-                : \"0\"(a_), \"w\"(b_), \"w\"(c_), \"i\"(d)                     \\\n+                : \"0\"(a_), \"w\"(b_), \"x\"(c_), \"i\"(d)                     \\\n                 : /* No clobbers */);                                   \\\n        result;                                                          \\\n      })\n@@ -7658,7 +7658,7 @@ vmlal_high_u32 (uint64x2_t a, uint32x4_t b, uint32x4_t c)\n        int32x4_t result;                                                \\\n        __asm__ (\"smlal %0.4s, %2.4h, %3.h[%4]\"                          \\\n                 : \"=w\"(result)                                          \\\n-                : \"0\"(a_), \"w\"(b_), \"w\"(c_), \"i\"(d)                     \\\n+                : \"0\"(a_), \"w\"(b_), \"x\"(c_), \"i\"(d)                     \\\n                 : /* No clobbers */);                                   \\\n        result;                                                          \\\n      })\n@@ -7686,7 +7686,7 @@ vmlal_high_u32 (uint64x2_t a, uint32x4_t b, uint32x4_t c)\n        uint32x4_t result;                                               \\\n        __asm__ (\"umlal %0.4s, %2.4h, %3.h[%4]\"                          \\\n                 : \"=w\"(result)                                          \\\n-                : \"0\"(a_), \"w\"(b_), \"w\"(c_), \"i\"(d)                     \\\n+                : \"0\"(a_), \"w\"(b_), \"x\"(c_), \"i\"(d)                     \\\n                 : /* No clobbers */);                                   \\\n        result;                                                          \\\n      })\n@@ -7711,7 +7711,7 @@ vmlal_n_s16 (int32x4_t a, int16x4_t b, int16_t c)\n   int32x4_t result;\n   __asm__ (\"smlal %0.4s,%2.4h,%3.h[0]\"\n            : \"=w\"(result)\n-           : \"0\"(a), \"w\"(b), \"w\"(c)\n+           : \"0\"(a), \"w\"(b), \"x\"(c)\n            : /* No clobbers */);\n   return result;\n }\n@@ -7733,7 +7733,7 @@ vmlal_n_u16 (uint32x4_t a, uint16x4_t b, uint16_t c)\n   uint32x4_t result;\n   __asm__ (\"umlal %0.4s,%2.4h,%3.h[0]\"\n            : \"=w\"(result)\n-           : \"0\"(a), \"w\"(b), \"w\"(c)\n+           : \"0\"(a), \"w\"(b), \"x\"(c)\n            : /* No clobbers */);\n   return result;\n }\n@@ -7839,7 +7839,7 @@ vmlal_u32 (uint64x2_t a, uint32x2_t b, uint32x2_t c)\n        int16x8_t result;                                                \\\n        __asm__ (\"mla %0.8h, %2.8h, %3.h[%4]\"                            \\\n                 : \"=w\"(result)                                          \\\n-                : \"0\"(a_), \"w\"(b_), \"w\"(c_), \"i\"(d)                     \\\n+                : \"0\"(a_), \"w\"(b_), \"x\"(c_), \"i\"(d)                     \\\n                 : /* No clobbers */);                                   \\\n        result;                                                          \\\n      })\n@@ -7867,7 +7867,7 @@ vmlal_u32 (uint64x2_t a, uint32x2_t b, uint32x2_t c)\n        uint16x8_t result;                                               \\\n        __asm__ (\"mla %0.8h, %2.8h, %3.h[%4]\"                            \\\n                 : \"=w\"(result)                                          \\\n-                : \"0\"(a_), \"w\"(b_), \"w\"(c_), \"i\"(d)                     \\\n+                : \"0\"(a_), \"w\"(b_), \"x\"(c_), \"i\"(d)                     \\\n                 : /* No clobbers */);                                   \\\n        result;                                                          \\\n      })\n@@ -7895,7 +7895,7 @@ vmlal_u32 (uint64x2_t a, uint32x2_t b, uint32x2_t c)\n        int16x8_t result;                                                \\\n        __asm__ (\"mla %0.8h, %2.8h, %3.h[%4]\"                            \\\n                 : \"=w\"(result)                                          \\\n-                : \"0\"(a_), \"w\"(b_), \"w\"(c_), \"i\"(d)                     \\\n+                : \"0\"(a_), \"w\"(b_), \"x\"(c_), \"i\"(d)                     \\\n                 : /* No clobbers */);                                   \\\n        result;                                                          \\\n      })\n@@ -7923,7 +7923,7 @@ vmlal_u32 (uint64x2_t a, uint32x2_t b, uint32x2_t c)\n        uint16x8_t result;                                               \\\n        __asm__ (\"mla %0.8h, %2.8h, %3.h[%4]\"                            \\\n                 : \"=w\"(result)                                          \\\n-                : \"0\"(a_), \"w\"(b_), \"w\"(c_), \"i\"(d)                     \\\n+                : \"0\"(a_), \"w\"(b_), \"x\"(c_), \"i\"(d)                     \\\n                 : /* No clobbers */);                                   \\\n        result;                                                          \\\n      })\n@@ -7972,7 +7972,7 @@ vmlaq_n_s16 (int16x8_t a, int16x8_t b, int16_t c)\n   int16x8_t result;\n   __asm__ (\"mla %0.8h,%2.8h,%3.h[0]\"\n            : \"=w\"(result)\n-           : \"0\"(a), \"w\"(b), \"w\"(c)\n+           : \"0\"(a), \"w\"(b), \"x\"(c)\n            : /* No clobbers */);\n   return result;\n }\n@@ -7994,7 +7994,7 @@ vmlaq_n_u16 (uint16x8_t a, uint16x8_t b, uint16_t c)\n   uint16x8_t result;\n   __asm__ (\"mla %0.8h,%2.8h,%3.h[0]\"\n            : \"=w\"(result)\n-           : \"0\"(a), \"w\"(b), \"w\"(c)\n+           : \"0\"(a), \"w\"(b), \"x\"(c)\n            : /* No clobbers */);\n   return result;\n }\n@@ -8100,7 +8100,7 @@ vmlaq_u32 (uint32x4_t a, uint32x4_t b, uint32x4_t c)\n        int16x4_t result;                                                \\\n        __asm__ (\"mls %0.4h,%2.4h,%3.h[%4]\"                              \\\n                 : \"=w\"(result)                                          \\\n-                : \"0\"(a_), \"w\"(b_), \"w\"(c_), \"i\"(d)                     \\\n+                : \"0\"(a_), \"w\"(b_), \"x\"(c_), \"i\"(d)                     \\\n                 : /* No clobbers */);                                   \\\n        result;                                                          \\\n      })\n@@ -8128,7 +8128,7 @@ vmlaq_u32 (uint32x4_t a, uint32x4_t b, uint32x4_t c)\n        uint16x4_t result;                                               \\\n        __asm__ (\"mls %0.4h,%2.4h,%3.h[%4]\"                              \\\n                 : \"=w\"(result)                                          \\\n-                : \"0\"(a_), \"w\"(b_), \"w\"(c_), \"i\"(d)                     \\\n+                : \"0\"(a_), \"w\"(b_), \"x\"(c_), \"i\"(d)                     \\\n                 : /* No clobbers */);                                   \\\n        result;                                                          \\\n      })\n@@ -8165,7 +8165,7 @@ vmls_n_s16 (int16x4_t a, int16x4_t b, int16_t c)\n   int16x4_t result;\n   __asm__ (\"mls %0.4h, %2.4h, %3.h[0]\"\n            : \"=w\"(result)\n-           : \"0\"(a), \"w\"(b), \"w\"(c)\n+           : \"0\"(a), \"w\"(b), \"x\"(c)\n            : /* No clobbers */);\n   return result;\n }\n@@ -8187,7 +8187,7 @@ vmls_n_u16 (uint16x4_t a, uint16x4_t b, uint16_t c)\n   uint16x4_t result;\n   __asm__ (\"mls %0.4h, %2.4h, %3.h[0]\"\n            : \"=w\"(result)\n-           : \"0\"(a), \"w\"(b), \"w\"(c)\n+           : \"0\"(a), \"w\"(b), \"x\"(c)\n            : /* No clobbers */);\n   return result;\n }\n@@ -8278,7 +8278,7 @@ vmls_u32 (uint32x2_t a, uint32x2_t b, uint32x2_t c)\n        int32x4_t result;                                                \\\n        __asm__ (\"smlsl2 %0.4s, %2.8h, %3.h[%4]\"                         \\\n                 : \"=w\"(result)                                          \\\n-                : \"0\"(a_), \"w\"(b_), \"w\"(c_), \"i\"(d)                     \\\n+                : \"0\"(a_), \"w\"(b_), \"x\"(c_), \"i\"(d)                     \\\n                 : /* No clobbers */);                                   \\\n        result;                                                          \\\n      })\n@@ -8306,7 +8306,7 @@ vmls_u32 (uint32x2_t a, uint32x2_t b, uint32x2_t c)\n        uint32x4_t result;                                               \\\n        __asm__ (\"umlsl2 %0.4s, %2.8h, %3.h[%4]\"                         \\\n                 : \"=w\"(result)                                          \\\n-                : \"0\"(a_), \"w\"(b_), \"w\"(c_), \"i\"(d)                     \\\n+                : \"0\"(a_), \"w\"(b_), \"x\"(c_), \"i\"(d)                     \\\n                 : /* No clobbers */);                                   \\\n        result;                                                          \\\n      })\n@@ -8334,7 +8334,7 @@ vmls_u32 (uint32x2_t a, uint32x2_t b, uint32x2_t c)\n        int32x4_t result;                                                \\\n        __asm__ (\"smlsl2 %0.4s, %2.8h, %3.h[%4]\"                         \\\n                 : \"=w\"(result)                                          \\\n-                : \"0\"(a_), \"w\"(b_), \"w\"(c_), \"i\"(d)                     \\\n+                : \"0\"(a_), \"w\"(b_), \"x\"(c_), \"i\"(d)                     \\\n                 : /* No clobbers */);                                   \\\n        result;                                                          \\\n      })\n@@ -8362,7 +8362,7 @@ vmls_u32 (uint32x2_t a, uint32x2_t b, uint32x2_t c)\n        uint32x4_t result;                                               \\\n        __asm__ (\"umlsl2 %0.4s, %2.8h, %3.h[%4]\"                         \\\n                 : \"=w\"(result)                                          \\\n-                : \"0\"(a_), \"w\"(b_), \"w\"(c_), \"i\"(d)                     \\\n+                : \"0\"(a_), \"w\"(b_), \"x\"(c_), \"i\"(d)                     \\\n                 : /* No clobbers */);                                   \\\n        result;                                                          \\\n      })\n@@ -8387,7 +8387,7 @@ vmlsl_high_n_s16 (int32x4_t a, int16x8_t b, int16_t c)\n   int32x4_t result;\n   __asm__ (\"smlsl2 %0.4s, %2.8h, %3.h[0]\"\n            : \"=w\"(result)\n-           : \"0\"(a), \"w\"(b), \"w\"(c)\n+           : \"0\"(a), \"w\"(b), \"x\"(c)\n            : /* No clobbers */);\n   return result;\n }\n@@ -8409,7 +8409,7 @@ vmlsl_high_n_u16 (uint32x4_t a, uint16x8_t b, uint16_t c)\n   uint32x4_t result;\n   __asm__ (\"umlsl2 %0.4s, %2.8h, %3.h[0]\"\n            : \"=w\"(result)\n-           : \"0\"(a), \"w\"(b), \"w\"(c)\n+           : \"0\"(a), \"w\"(b), \"x\"(c)\n            : /* No clobbers */);\n   return result;\n }\n@@ -8500,7 +8500,7 @@ vmlsl_high_u32 (uint64x2_t a, uint32x4_t b, uint32x4_t c)\n        int32x4_t result;                                                \\\n        __asm__ (\"smlsl %0.4s, %2.4h, %3.h[%4]\"                          \\\n                 : \"=w\"(result)                                          \\\n-                : \"0\"(a_), \"w\"(b_), \"w\"(c_), \"i\"(d)                     \\\n+                : \"0\"(a_), \"w\"(b_), \"x\"(c_), \"i\"(d)                     \\\n                 : /* No clobbers */);                                   \\\n        result;                                                          \\\n      })\n@@ -8528,7 +8528,7 @@ vmlsl_high_u32 (uint64x2_t a, uint32x4_t b, uint32x4_t c)\n        uint32x4_t result;                                               \\\n        __asm__ (\"umlsl %0.4s, %2.4h, %3.h[%4]\"                          \\\n                 : \"=w\"(result)                                          \\\n-                : \"0\"(a_), \"w\"(b_), \"w\"(c_), \"i\"(d)                     \\\n+                : \"0\"(a_), \"w\"(b_), \"x\"(c_), \"i\"(d)                     \\\n                 : /* No clobbers */);                                   \\\n        result;                                                          \\\n      })\n@@ -8556,7 +8556,7 @@ vmlsl_high_u32 (uint64x2_t a, uint32x4_t b, uint32x4_t c)\n        int32x4_t result;                                                \\\n        __asm__ (\"smlsl %0.4s, %2.4h, %3.h[%4]\"                          \\\n                 : \"=w\"(result)                                          \\\n-                : \"0\"(a_), \"w\"(b_), \"w\"(c_), \"i\"(d)                     \\\n+                : \"0\"(a_), \"w\"(b_), \"x\"(c_), \"i\"(d)                     \\\n                 : /* No clobbers */);                                   \\\n        result;                                                          \\\n      })\n@@ -8584,7 +8584,7 @@ vmlsl_high_u32 (uint64x2_t a, uint32x4_t b, uint32x4_t c)\n        uint32x4_t result;                                               \\\n        __asm__ (\"umlsl %0.4s, %2.4h, %3.h[%4]\"                          \\\n                 : \"=w\"(result)                                          \\\n-                : \"0\"(a_), \"w\"(b_), \"w\"(c_), \"i\"(d)                     \\\n+                : \"0\"(a_), \"w\"(b_), \"x\"(c_), \"i\"(d)                     \\\n                 : /* No clobbers */);                                   \\\n        result;                                                          \\\n      })\n@@ -8609,7 +8609,7 @@ vmlsl_n_s16 (int32x4_t a, int16x4_t b, int16_t c)\n   int32x4_t result;\n   __asm__ (\"smlsl %0.4s, %2.4h, %3.h[0]\"\n            : \"=w\"(result)\n-           : \"0\"(a), \"w\"(b), \"w\"(c)\n+           : \"0\"(a), \"w\"(b), \"x\"(c)\n            : /* No clobbers */);\n   return result;\n }\n@@ -8631,7 +8631,7 @@ vmlsl_n_u16 (uint32x4_t a, uint16x4_t b, uint16_t c)\n   uint32x4_t result;\n   __asm__ (\"umlsl %0.4s, %2.4h, %3.h[0]\"\n            : \"=w\"(result)\n-           : \"0\"(a), \"w\"(b), \"w\"(c)\n+           : \"0\"(a), \"w\"(b), \"x\"(c)\n            : /* No clobbers */);\n   return result;\n }\n@@ -8737,7 +8737,7 @@ vmlsl_u32 (uint64x2_t a, uint32x2_t b, uint32x2_t c)\n        int16x8_t result;                                                \\\n        __asm__ (\"mls %0.8h,%2.8h,%3.h[%4]\"                              \\\n                 : \"=w\"(result)                                          \\\n-                : \"0\"(a_), \"w\"(b_), \"w\"(c_), \"i\"(d)                     \\\n+                : \"0\"(a_), \"w\"(b_), \"x\"(c_), \"i\"(d)                     \\\n                 : /* No clobbers */);                                   \\\n        result;                                                          \\\n      })\n@@ -8765,7 +8765,7 @@ vmlsl_u32 (uint64x2_t a, uint32x2_t b, uint32x2_t c)\n        uint16x8_t result;                                               \\\n        __asm__ (\"mls %0.8h,%2.8h,%3.h[%4]\"                              \\\n                 : \"=w\"(result)                                          \\\n-                : \"0\"(a_), \"w\"(b_), \"w\"(c_), \"i\"(d)                     \\\n+                : \"0\"(a_), \"w\"(b_), \"x\"(c_), \"i\"(d)                     \\\n                 : /* No clobbers */);                                   \\\n        result;                                                          \\\n      })\n@@ -8808,7 +8808,7 @@ vmlsl_u32 (uint64x2_t a, uint32x2_t b, uint32x2_t c)\n        int16x8_t __result;\t\t\t\t\t\t\\\n        __asm__ (\"mls %0.8h, %2.8h, %3.h[%4]\"\t\t\t\t\\\n                 : \"=w\"(__result)\t\t\t\t\t\\\n-                : \"0\"(__a_), \"w\"(__b_), \"w\"(__c_), \"i\"(__d)\t\t\\\n+                : \"0\"(__a_), \"w\"(__b_), \"x\"(__c_), \"i\"(__d)\t\t\\\n                 : /* No clobbers */);\t\t\t\t\t\\\n        __result;\t\t\t\t\t\t\t\\\n      })\n@@ -8836,7 +8836,7 @@ vmlsl_u32 (uint64x2_t a, uint32x2_t b, uint32x2_t c)\n        uint16x8_t __result;\t\t\t\t\t\t\\\n        __asm__ (\"mls %0.8h, %2.8h, %3.h[%4]\"\t\t\t\t\\\n                 : \"=w\"(__result)\t\t\t\t\t\\\n-                : \"0\"(__a_), \"w\"(__b_), \"w\"(__c_), \"i\"(__d)\t\t\\\n+                : \"0\"(__a_), \"w\"(__b_), \"x\"(__c_), \"i\"(__d)\t\t\\\n                 : /* No clobbers */);\t\t\t\t\t\\\n        __result;\t\t\t\t\t\t\t\\\n      })\n@@ -8874,7 +8874,7 @@ vmlsq_n_f64 (float64x2_t a, float64x2_t b, float64_t c)\n   float64x2_t t1;\n   __asm__ (\"fmul %1.2d, %3.2d, %4.d[0]; fsub %0.2d, %0.2d, %1.2d\"\n            : \"=w\"(result), \"=w\"(t1)\n-           : \"0\"(a), \"w\"(b), \"w\"(c)\n+           : \"0\"(a), \"w\"(b), \"x\"(c)\n            : /* No clobbers */);\n   return result;\n }\n@@ -8885,7 +8885,7 @@ vmlsq_n_s16 (int16x8_t a, int16x8_t b, int16_t c)\n   int16x8_t result;\n   __asm__ (\"mls %0.8h, %2.8h, %3.h[0]\"\n            : \"=w\"(result)\n-           : \"0\"(a), \"w\"(b), \"w\"(c)\n+           : \"0\"(a), \"w\"(b), \"x\"(c)\n            : /* No clobbers */);\n   return result;\n }\n@@ -8907,7 +8907,7 @@ vmlsq_n_u16 (uint16x8_t a, uint16x8_t b, uint16_t c)\n   uint16x8_t result;\n   __asm__ (\"mls %0.8h, %2.8h, %3.h[0]\"\n            : \"=w\"(result)\n-           : \"0\"(a), \"w\"(b), \"w\"(c)\n+           : \"0\"(a), \"w\"(b), \"x\"(c)\n            : /* No clobbers */);\n   return result;\n }\n@@ -9648,7 +9648,7 @@ vmul_n_s16 (int16x4_t a, int16_t b)\n   int16x4_t result;\n   __asm__ (\"mul %0.4h,%1.4h,%2.h[0]\"\n            : \"=w\"(result)\n-           : \"w\"(a), \"w\"(b)\n+           : \"w\"(a), \"x\"(b)\n            : /* No clobbers */);\n   return result;\n }\n@@ -9670,7 +9670,7 @@ vmul_n_u16 (uint16x4_t a, uint16_t b)\n   uint16x4_t result;\n   __asm__ (\"mul %0.4h,%1.4h,%2.h[0]\"\n            : \"=w\"(result)\n-           : \"w\"(a), \"w\"(b)\n+           : \"w\"(a), \"x\"(b)\n            : /* No clobbers */);\n   return result;\n }\n@@ -9707,7 +9707,7 @@ vmul_n_u32 (uint32x2_t a, uint32_t b)\n        int32x4_t result;                                                \\\n        __asm__ (\"smull2 %0.4s, %1.8h, %2.h[%3]\"                         \\\n                 : \"=w\"(result)                                          \\\n-                : \"w\"(a_), \"w\"(b_), \"i\"(c)                              \\\n+                : \"w\"(a_), \"x\"(b_), \"i\"(c)                              \\\n                 : /* No clobbers */);                                   \\\n        result;                                                          \\\n      })\n@@ -9733,7 +9733,7 @@ vmul_n_u32 (uint32x2_t a, uint32_t b)\n        uint32x4_t result;                                               \\\n        __asm__ (\"umull2 %0.4s, %1.8h, %2.h[%3]\"                         \\\n                 : \"=w\"(result)                                          \\\n-                : \"w\"(a_), \"w\"(b_), \"i\"(c)                              \\\n+                : \"w\"(a_), \"x\"(b_), \"i\"(c)                              \\\n                 : /* No clobbers */);                                   \\\n        result;                                                          \\\n      })\n@@ -9759,7 +9759,7 @@ vmul_n_u32 (uint32x2_t a, uint32_t b)\n        int32x4_t result;                                                \\\n        __asm__ (\"smull2 %0.4s, %1.8h, %2.h[%3]\"                         \\\n                 : \"=w\"(result)                                          \\\n-                : \"w\"(a_), \"w\"(b_), \"i\"(c)                              \\\n+                : \"w\"(a_), \"x\"(b_), \"i\"(c)                              \\\n                 : /* No clobbers */);                                   \\\n        result;                                                          \\\n      })\n@@ -9785,7 +9785,7 @@ vmul_n_u32 (uint32x2_t a, uint32_t b)\n        uint32x4_t result;                                               \\\n        __asm__ (\"umull2 %0.4s, %1.8h, %2.h[%3]\"                         \\\n                 : \"=w\"(result)                                          \\\n-                : \"w\"(a_), \"w\"(b_), \"i\"(c)                              \\\n+                : \"w\"(a_), \"x\"(b_), \"i\"(c)                              \\\n                 : /* No clobbers */);                                   \\\n        result;                                                          \\\n      })\n@@ -9809,7 +9809,7 @@ vmull_high_n_s16 (int16x8_t a, int16_t b)\n   int32x4_t result;\n   __asm__ (\"smull2 %0.4s,%1.8h,%2.h[0]\"\n            : \"=w\"(result)\n-           : \"w\"(a), \"w\"(b)\n+           : \"w\"(a), \"x\"(b)\n            : /* No clobbers */);\n   return result;\n }\n@@ -9831,7 +9831,7 @@ vmull_high_n_u16 (uint16x8_t a, uint16_t b)\n   uint32x4_t result;\n   __asm__ (\"umull2 %0.4s,%1.8h,%2.h[0]\"\n            : \"=w\"(result)\n-           : \"w\"(a), \"w\"(b)\n+           : \"w\"(a), \"x\"(b)\n            : /* No clobbers */);\n   return result;\n }\n@@ -9932,7 +9932,7 @@ vmull_high_u32 (uint32x4_t a, uint32x4_t b)\n        int32x4_t result;                                                \\\n        __asm__ (\"smull %0.4s,%1.4h,%2.h[%3]\"                            \\\n                 : \"=w\"(result)                                          \\\n-                : \"w\"(a_), \"w\"(b_), \"i\"(c)                              \\\n+                : \"w\"(a_), \"x\"(b_), \"i\"(c)                              \\\n                 : /* No clobbers */);                                   \\\n        result;                                                          \\\n      })\n@@ -9958,7 +9958,7 @@ vmull_high_u32 (uint32x4_t a, uint32x4_t b)\n        uint32x4_t result;                                               \\\n        __asm__ (\"umull %0.4s,%1.4h,%2.h[%3]\"                            \\\n                 : \"=w\"(result)                                          \\\n-                : \"w\"(a_), \"w\"(b_), \"i\"(c)                              \\\n+                : \"w\"(a_), \"x\"(b_), \"i\"(c)                              \\\n                 : /* No clobbers */);                                   \\\n        result;                                                          \\\n      })\n@@ -9984,7 +9984,7 @@ vmull_high_u32 (uint32x4_t a, uint32x4_t b)\n        int32x4_t result;                                                \\\n        __asm__ (\"smull %0.4s, %1.4h, %2.h[%3]\"                          \\\n                 : \"=w\"(result)                                          \\\n-                : \"w\"(a_), \"w\"(b_), \"i\"(c)                              \\\n+                : \"w\"(a_), \"x\"(b_), \"i\"(c)                              \\\n                 : /* No clobbers */);                                   \\\n        result;                                                          \\\n      })\n@@ -10010,7 +10010,7 @@ vmull_high_u32 (uint32x4_t a, uint32x4_t b)\n        uint32x4_t result;                                               \\\n        __asm__ (\"umull %0.4s, %1.4h, %2.h[%3]\"                          \\\n                 : \"=w\"(result)                                          \\\n-                : \"w\"(a_), \"w\"(b_), \"i\"(c)                              \\\n+                : \"w\"(a_), \"x\"(b_), \"i\"(c)                              \\\n                 : /* No clobbers */);                                   \\\n        result;                                                          \\\n      })\n@@ -10034,7 +10034,7 @@ vmull_n_s16 (int16x4_t a, int16_t b)\n   int32x4_t result;\n   __asm__ (\"smull %0.4s,%1.4h,%2.h[0]\"\n            : \"=w\"(result)\n-           : \"w\"(a), \"w\"(b)\n+           : \"w\"(a), \"x\"(b)\n            : /* No clobbers */);\n   return result;\n }\n@@ -10056,7 +10056,7 @@ vmull_n_u16 (uint16x4_t a, uint16_t b)\n   uint32x4_t result;\n   __asm__ (\"umull %0.4s,%1.4h,%2.h[0]\"\n            : \"=w\"(result)\n-           : \"w\"(a), \"w\"(b)\n+           : \"w\"(a), \"x\"(b)\n            : /* No clobbers */);\n   return result;\n }\n@@ -10183,7 +10183,7 @@ vmull_u32 (uint32x2_t a, uint32x2_t b)\n        int16x8_t result;                                                \\\n        __asm__ (\"mul %0.8h,%1.8h,%2.h[%3]\"                              \\\n                 : \"=w\"(result)                                          \\\n-                : \"w\"(a_), \"w\"(b_), \"i\"(c)                              \\\n+                : \"w\"(a_), \"x\"(b_), \"i\"(c)                              \\\n                 : /* No clobbers */);                                   \\\n        result;                                                          \\\n      })\n@@ -10209,7 +10209,7 @@ vmull_u32 (uint32x2_t a, uint32x2_t b)\n        uint16x8_t result;                                               \\\n        __asm__ (\"mul %0.8h,%1.8h,%2.h[%3]\"                              \\\n                 : \"=w\"(result)                                          \\\n-                : \"w\"(a_), \"w\"(b_), \"i\"(c)                              \\\n+                : \"w\"(a_), \"x\"(b_), \"i\"(c)                              \\\n                 : /* No clobbers */);                                   \\\n        result;                                                          \\\n      })\n@@ -10261,7 +10261,7 @@ vmull_u32 (uint32x2_t a, uint32x2_t b)\n        int16x8_t result;                                                \\\n        __asm__ (\"mul %0.8h, %1.8h, %2.h[%3]\"                            \\\n                 : \"=w\"(result)                                          \\\n-                : \"w\"(a_), \"w\"(b_), \"i\"(c)                              \\\n+                : \"w\"(a_), \"x\"(b_), \"i\"(c)                              \\\n                 : /* No clobbers */);                                   \\\n        result;                                                          \\\n      })\n@@ -10287,7 +10287,7 @@ vmull_u32 (uint32x2_t a, uint32x2_t b)\n        uint16x8_t result;                                               \\\n        __asm__ (\"mul %0.8h, %1.8h, %2.h[%3]\"                            \\\n                 : \"=w\"(result)                                          \\\n-                : \"w\"(a_), \"w\"(b_), \"i\"(c)                              \\\n+                : \"w\"(a_), \"x\"(b_), \"i\"(c)                              \\\n                 : /* No clobbers */);                                   \\\n        result;                                                          \\\n      })\n@@ -10333,7 +10333,7 @@ vmulq_n_s16 (int16x8_t a, int16_t b)\n   int16x8_t result;\n   __asm__ (\"mul %0.8h,%1.8h,%2.h[0]\"\n            : \"=w\"(result)\n-           : \"w\"(a), \"w\"(b)\n+           : \"w\"(a), \"x\"(b)\n            : /* No clobbers */);\n   return result;\n }\n@@ -10355,7 +10355,7 @@ vmulq_n_u16 (uint16x8_t a, uint16_t b)\n   uint16x8_t result;\n   __asm__ (\"mul %0.8h,%1.8h,%2.h[0]\"\n            : \"=w\"(result)\n-           : \"w\"(a), \"w\"(b)\n+           : \"w\"(a), \"x\"(b)\n            : /* No clobbers */);\n   return result;\n }\n@@ -11821,7 +11821,7 @@ vqrdmulh_n_s16 (int16x4_t a, int16_t b)\n   int16x4_t result;\n   __asm__ (\"sqrdmulh %0.4h,%1.4h,%2.h[0]\"\n            : \"=w\"(result)\n-           : \"w\"(a), \"w\"(b)\n+           : \"w\"(a), \"x\"(b)\n            : /* No clobbers */);\n   return result;\n }\n@@ -11843,7 +11843,7 @@ vqrdmulhq_n_s16 (int16x8_t a, int16_t b)\n   int16x8_t result;\n   __asm__ (\"sqrdmulh %0.8h,%1.8h,%2.h[0]\"\n            : \"=w\"(result)\n-           : \"w\"(a), \"w\"(b)\n+           : \"w\"(a), \"x\"(b)\n            : /* No clobbers */);\n   return result;\n }"}]}