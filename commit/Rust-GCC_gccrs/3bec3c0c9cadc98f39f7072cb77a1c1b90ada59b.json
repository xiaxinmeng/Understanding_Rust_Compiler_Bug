{"sha": "3bec3c0c9cadc98f39f7072cb77a1c1b90ada59b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2JlYzNjMGM5Y2FkYzk4ZjM5ZjcwNzJjYjc3YTFjMWI5MGFkYTU5Yg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2003-05-13T17:41:17Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2003-05-13T17:41:17Z"}, "message": "class.c (layout_class_method): Set DECL_EXTERNAL.\n\n        * class.c (layout_class_method): Set DECL_EXTERNAL.\n        * decl.c (java_mark_decl_local, java_mark_class_local): New.\n        * java-tree.h (java_mark_class_local): Declare.\n        * jcf-parse.c (parse_class_file): Use it.\n        * parse.y (java_expand_classes): Likewise.\n\nFrom-SVN: r66768", "tree": {"sha": "f41491186a8687f01af5f4a1ce70623ea8fd50cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f41491186a8687f01af5f4a1ce70623ea8fd50cb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3bec3c0c9cadc98f39f7072cb77a1c1b90ada59b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bec3c0c9cadc98f39f7072cb77a1c1b90ada59b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3bec3c0c9cadc98f39f7072cb77a1c1b90ada59b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bec3c0c9cadc98f39f7072cb77a1c1b90ada59b/comments", "author": null, "committer": null, "parents": [{"sha": "a65cddcf3959175275b11b9caedbe71a5d25ebe5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a65cddcf3959175275b11b9caedbe71a5d25ebe5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a65cddcf3959175275b11b9caedbe71a5d25ebe5"}], "stats": {"total": 61, "additions": 47, "deletions": 14}, "files": [{"sha": "b4e13f3579000196c6e968c3fe022c3682fea49e", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bec3c0c9cadc98f39f7072cb77a1c1b90ada59b/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bec3c0c9cadc98f39f7072cb77a1c1b90ada59b/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=3bec3c0c9cadc98f39f7072cb77a1c1b90ada59b", "patch": "@@ -1,3 +1,11 @@\n+2003-05-13  Richard Henderson  <rth@redhat.com>\n+\n+\t* class.c (layout_class_method): Set DECL_EXTERNAL.\n+\t* decl.c (java_mark_decl_local, java_mark_class_local): New.\n+\t* java-tree.h (java_mark_class_local): Declare.\n+\t* jcf-parse.c (parse_class_file): Use it.\n+\t* parse.y (java_expand_classes): Likewise.\n+\n 2003-05-04  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* Make-lang.in (java/parse.o, java/parse-scan.o): Depend on input.h."}, {"sha": "a7fa45442ef54146e97f718310c4ae77e7016ca6", "filename": "gcc/java/class.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bec3c0c9cadc98f39f7072cb77a1c1b90ada59b/gcc%2Fjava%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bec3c0c9cadc98f39f7072cb77a1c1b90ada59b/gcc%2Fjava%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fclass.c?ref=3bec3c0c9cadc98f39f7072cb77a1c1b90ada59b", "patch": "@@ -1892,6 +1892,9 @@ layout_class_method (tree this_class, tree super_class,\n   tree method_name = DECL_NAME (method_decl);\n \n   TREE_PUBLIC (method_decl) = 1;\n+  /* Considered external until we know what classes are being\n+     compiled into this object file.  */\n+  DECL_EXTERNAL (method_decl) = 1;\n \n   /* This is a good occasion to mangle the method's name */\n   SET_DECL_ASSEMBLER_NAME (method_decl,"}, {"sha": "b06cf88249bf564f5115ad0084428938ff8a51bd", "filename": "gcc/java/decl.c", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bec3c0c9cadc98f39f7072cb77a1c1b90ada59b/gcc%2Fjava%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bec3c0c9cadc98f39f7072cb77a1c1b90ada59b/gcc%2Fjava%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fdecl.c?ref=3bec3c0c9cadc98f39f7072cb77a1c1b90ada59b", "patch": "@@ -1845,4 +1845,33 @@ void java_optimize_inline (tree fndecl)\n     }\n }\n \n+/* We pessimistically marked all methods and fields external until we\n+   knew what set of classes we were planning to compile.  Now mark those\n+   associated with CLASS to be generated locally as not external.  */\n+\n+static void\n+java_mark_decl_local (tree decl)\n+{\n+  DECL_EXTERNAL (decl) = 0;\n+\n+  /* If we've already constructed DECL_RTL, give encode_section_info\n+     a second chance, now that we've changed the flags.  */\n+  if (DECL_RTL_SET_P (decl))\n+    make_decl_rtl (decl, NULL);\n+}\n+\n+void\n+java_mark_class_local (tree class)\n+{\n+  tree t;\n+\n+  for (t = TYPE_FIELDS (class); t ; t = TREE_CHAIN (t))\n+    if (FIELD_STATIC (t))\n+      java_mark_decl_local (t);\n+\n+  for (t = TYPE_METHODS (class); t ; t = TREE_CHAIN (t))\n+    if (!METHOD_ABSTRACT (t) && (!METHOD_NATIVE (t) || flag_jni))\n+      java_mark_decl_local (t);\n+}\n+\n #include \"gt-java-decl.h\""}, {"sha": "78bc92406182ed78f641c507969eda76e83c93ef", "filename": "gcc/java/java-tree.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bec3c0c9cadc98f39f7072cb77a1c1b90ada59b/gcc%2Fjava%2Fjava-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bec3c0c9cadc98f39f7072cb77a1c1b90ada59b/gcc%2Fjava%2Fjava-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-tree.h?ref=3bec3c0c9cadc98f39f7072cb77a1c1b90ada59b", "patch": "@@ -1296,6 +1296,8 @@ extern int predefined_filename_p (tree);\n extern void java_optimize_inline (tree);\n extern tree decl_constant_value (tree);\n \n+extern void java_mark_class_local (tree);\n+\n #if defined(RTX_CODE) && defined (HAVE_MACHINE_MODES)\n struct rtx_def * java_expand_expr (tree, rtx, enum machine_mode, int); \n #endif"}, {"sha": "e3e60cb20c6a3fe6301c7af54bfab9cf58fb50fe", "filename": "gcc/java/jcf-parse.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bec3c0c9cadc98f39f7072cb77a1c1b90ada59b/gcc%2Fjava%2Fjcf-parse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bec3c0c9cadc98f39f7072cb77a1c1b90ada59b/gcc%2Fjava%2Fjcf-parse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-parse.c?ref=3bec3c0c9cadc98f39f7072cb77a1c1b90ada59b", "patch": "@@ -701,7 +701,7 @@ init_outgoing_cpool (void)\n static void\n parse_class_file (void)\n {\n-  tree method, field;\n+  tree method;\n   const char *save_input_filename = input_filename;\n   int save_lineno = input_line;\n \n@@ -716,10 +716,7 @@ parse_class_file (void)\n      compiling from class files.  */\n   always_initialize_class_p = 1;\n \n-  for (field = TYPE_FIELDS (current_class);\n-       field != NULL_TREE; field = TREE_CHAIN (field))\n-    if (FIELD_STATIC (field))\n-      DECL_EXTERNAL (field) = 0;\n+  java_mark_class_local (current_class);\n \n   for (method = TYPE_METHODS (current_class);\n        method != NULL_TREE; method = TREE_CHAIN (method))"}, {"sha": "6dd9174dc9157a9e29f93674e2bfa6bc3de9b0ff", "filename": "gcc/java/parse.y", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bec3c0c9cadc98f39f7072cb77a1c1b90ada59b/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bec3c0c9cadc98f39f7072cb77a1c1b90ada59b/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=3bec3c0c9cadc98f39f7072cb77a1c1b90ada59b", "patch": "@@ -8977,21 +8977,15 @@ java_expand_classes (void)\n \n   /* Now things are stable, go for generation of the class data. */\n \n-  /* We pessimistically marked all fields external until we knew\n-     what set of classes we were planning to compile.  Now mark\n+  /* We pessimistically marked all methods and fields external until\n+     we knew what set of classes we were planning to compile.  Now mark\n      those that will be generated locally as not external.  */\n   for (cur_ctxp = ctxp_for_generation; cur_ctxp; cur_ctxp = cur_ctxp->next)\n     {\n       tree current;\n       ctxp = cur_ctxp;\n       for (current = ctxp->class_list; current; current = TREE_CHAIN (current))\n-\t{\n-\t  tree class = TREE_TYPE (current);\n-\t  tree field;\n-\t  for (field = TYPE_FIELDS (class); field ; field = TREE_CHAIN (field))\n-\t    if (FIELD_STATIC (field))\n-\t      DECL_EXTERNAL (field) = 0;\n-\t}\n+\tjava_mark_class_local (TREE_TYPE (current));\n     }\n \n   /* Compile the classes.  */"}]}