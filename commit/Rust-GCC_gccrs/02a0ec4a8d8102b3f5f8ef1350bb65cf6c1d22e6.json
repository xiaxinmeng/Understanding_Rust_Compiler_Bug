{"sha": "02a0ec4a8d8102b3f5f8ef1350bb65cf6c1d22e6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDJhMGVjNGE4ZDgxMDJiM2Y1ZjhlZjEzNTBiYjY1Y2Y2YzFkMjJlNg==", "commit": {"author": {"name": "Alan Lawrence", "email": "alan.lawrence@arm.com", "date": "2014-09-05T11:48:04Z"}, "committer": {"name": "Alan Lawrence", "email": "alalaw01@gcc.gnu.org", "date": "2014-09-05T11:48:04Z"}, "message": "[PATCH AArch64] Rename [u]int32x1_t to [u]int32_t (resp 16x1, 8x1) in arm_neon.h\n\ngcc/:\n \n\t* config/aarch64/arm_neon.h (int32x1_t, int16x1_t, int8x1_t,\n\tuint32x1_t, uint16x1_t, uint8x1_t): Remove typedefs.\n\n\t(vqabsb_s8, vqabsh_s16, vqabss_s32, vqaddb_s8, vqaddh_s16, vqadds_s32,\n\tvqaddb_u8, vqaddh_u16, vqadds_u32, vqdmlalh_s16, vqdmlalh_lane_s16,\n\tvqdmlals_s32, vqdmlslh_s16, vqdmlslh_lane_s16, vqdmlsls_s32,\n\tvqdmulhh_s16, vqdmulhh_lane_s16, vqdmulhs_s32, vqdmulhs_lane_s32,\n\tvqdmullh_s16, vqdmullh_lane_s16, vqdmulls_s32, vqdmulls_lane_s32,\n\tvqmovnh_s16, vqmovns_s32, vqmovnd_s64, vqmovnh_u16, vqmovns_u32,\n\tvqmovnd_u64, vqmovunh_s16, vqmovuns_s32, vqmovund_s64, vqnegb_s8,\n\tvqnegh_s16, vqnegs_s32, vqrdmulhh_s16, vqrdmulhh_lane_s16,\n\tvqrdmulhs_s32, vqrdmulhs_lane_s32, vqrshlb_s8, vqrshlh_s16,\n\tvqrshls_s32, vqrshlb_u8, vqrshlh_u16, vqrshls_u32, vqrshrnh_n_s16,\n\tvqrshrns_n_s32, vqrshrnd_n_s64, vqrshrnh_n_u16, vqrshrns_n_u32,\n\tvqrshrnd_n_u64, vqrshrunh_n_s16, vqrshruns_n_s32, vqrshrund_n_s64,\n\tvqshlb_s8, vqshlh_s16, vqshls_s32, vqshlb_u8, vqshlh_u16, vqshls_u32,\n\tvqshlb_n_s8, vqshlh_n_s16, vqshls_n_s32, vqshlb_n_u8, vqshlh_n_u16,\n\tvqshls_n_u32, vqshlub_n_s8, vqshluh_n_s16, vqshlus_n_s32,\n\tvqshrnh_n_s16, vqshrns_n_s32, vqshrnd_n_s64, vqshrnh_n_u16,\n\tvqshrns_n_u32, vqshrnd_n_u64, vqshrunh_n_s16, vqshruns_n_s32,\n\tvqshrund_n_s64, vqsubb_s8, vqsubh_s16, vqsubs_s32, vqsubb_u8,\n\tvqsubh_u16, vqsubs_u32, vsqaddb_u8, vsqaddh_u16, vsqadds_u32,\n\tvuqaddb_s8, vuqaddh_s16, vuqadds_s32): Replace all int{32,16,8}x1_t\n\twith int{32,16,8}_t.\n\ngcc/testsuite/:\n \n\t* gcc.target/aarch64/scalar_intrinsics.c (*): Replace all\n\tint{32,16,8}x1_t with int{32,16,8}_t.\n\t* gcc.target/aarch64/simd/vqdmlalh_lane_s16.c: Likewise.\n\t* gcc.target/aarch64/simd/vqdmlslh_lane_s16.c: Likewise.\n\t* gcc.target/aarch64/simd/vqdmullh_lane_s16.c: Likewise.\n\t* gcc.target/aarch64/simd/vqdmulls_lane_s32.c: Likewise.\n\nFrom-SVN: r214953", "tree": {"sha": "7d3147c787ed47cb82713732382e6d2eedcb8afa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7d3147c787ed47cb82713732382e6d2eedcb8afa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/02a0ec4a8d8102b3f5f8ef1350bb65cf6c1d22e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02a0ec4a8d8102b3f5f8ef1350bb65cf6c1d22e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02a0ec4a8d8102b3f5f8ef1350bb65cf6c1d22e6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02a0ec4a8d8102b3f5f8ef1350bb65cf6c1d22e6/comments", "author": null, "committer": null, "parents": [{"sha": "8684fa50fa4a51661b91ae8a323a24a5a21d08eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8684fa50fa4a51661b91ae8a323a24a5a21d08eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8684fa50fa4a51661b91ae8a323a24a5a21d08eb"}], "stats": {"total": 848, "additions": 439, "deletions": 409}, "files": [{"sha": "bb2db3de7372a195c2e88c34d2e6b2b75d442ac2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02a0ec4a8d8102b3f5f8ef1350bb65cf6c1d22e6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02a0ec4a8d8102b3f5f8ef1350bb65cf6c1d22e6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=02a0ec4a8d8102b3f5f8ef1350bb65cf6c1d22e6", "patch": "@@ -1,3 +1,30 @@\n+2014-09-05  Alan Lawrence  <alan.lawrence@arm.com>\n+\n+\t* config/aarch64/arm_neon.h (int32x1_t, int16x1_t, int8x1_t,\n+\tuint32x1_t, uint16x1_t, uint8x1_t): Remove typedefs.\n+\n+\t(vqabsb_s8, vqabsh_s16, vqabss_s32, vqaddb_s8, vqaddh_s16, vqadds_s32,\n+\tvqaddb_u8, vqaddh_u16, vqadds_u32, vqdmlalh_s16, vqdmlalh_lane_s16,\n+\tvqdmlals_s32, vqdmlslh_s16, vqdmlslh_lane_s16, vqdmlsls_s32,\n+\tvqdmulhh_s16, vqdmulhh_lane_s16, vqdmulhs_s32, vqdmulhs_lane_s32,\n+\tvqdmullh_s16, vqdmullh_lane_s16, vqdmulls_s32, vqdmulls_lane_s32,\n+\tvqmovnh_s16, vqmovns_s32, vqmovnd_s64, vqmovnh_u16, vqmovns_u32,\n+\tvqmovnd_u64, vqmovunh_s16, vqmovuns_s32, vqmovund_s64, vqnegb_s8,\n+\tvqnegh_s16, vqnegs_s32, vqrdmulhh_s16, vqrdmulhh_lane_s16,\n+\tvqrdmulhs_s32, vqrdmulhs_lane_s32, vqrshlb_s8, vqrshlh_s16,\n+\tvqrshls_s32, vqrshlb_u8, vqrshlh_u16, vqrshls_u32, vqrshrnh_n_s16,\n+\tvqrshrns_n_s32, vqrshrnd_n_s64, vqrshrnh_n_u16, vqrshrns_n_u32,\n+\tvqrshrnd_n_u64, vqrshrunh_n_s16, vqrshruns_n_s32, vqrshrund_n_s64,\n+\tvqshlb_s8, vqshlh_s16, vqshls_s32, vqshlb_u8, vqshlh_u16, vqshls_u32,\n+\tvqshlb_n_s8, vqshlh_n_s16, vqshls_n_s32, vqshlb_n_u8, vqshlh_n_u16,\n+\tvqshls_n_u32, vqshlub_n_s8, vqshluh_n_s16, vqshlus_n_s32,\n+\tvqshrnh_n_s16, vqshrns_n_s32, vqshrnd_n_s64, vqshrnh_n_u16,\n+\tvqshrns_n_u32, vqshrnd_n_u64, vqshrunh_n_s16, vqshruns_n_s32,\n+\tvqshrund_n_s64, vqsubb_s8, vqsubh_s16, vqsubs_s32, vqsubb_u8,\n+\tvqsubh_u16, vqsubs_u32, vsqaddb_u8, vsqaddh_u16, vsqadds_u32,\n+\tvuqaddb_s8, vuqaddh_s16, vuqadds_s32): Replace all int{32,16,8}x1_t\n+\twith int{32,16,8}_t.\n+\n 2014-09-05  Alan Lawrence  <alan.lawrence@arm.com>\n \n \t* config/aarch64/arm_neon.h (__GET_HIGH): New macro."}, {"sha": "6c348ff0b498cc1f85bbae1398bdde768adc7b8d", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 217, "deletions": 223, "changes": 440, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02a0ec4a8d8102b3f5f8ef1350bb65cf6c1d22e6/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02a0ec4a8d8102b3f5f8ef1350bb65cf6c1d22e6/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=02a0ec4a8d8102b3f5f8ef1350bb65cf6c1d22e6", "patch": "@@ -40,9 +40,6 @@ typedef __builtin_aarch64_simd_si int32x2_t\n   __attribute__ ((__vector_size__ (8)));\n typedef __builtin_aarch64_simd_di int64x1_t\n   __attribute__ ((__vector_size__ (8)));\n-typedef int32_t int32x1_t;\n-typedef int16_t int16x1_t;\n-typedef int8_t int8x1_t;\n typedef __builtin_aarch64_simd_df float64x1_t\n   __attribute__ ((__vector_size__ (8)));\n typedef __builtin_aarch64_simd_sf float32x2_t\n@@ -59,9 +56,6 @@ typedef __builtin_aarch64_simd_usi uint32x2_t\n   __attribute__ ((__vector_size__ (8)));\n typedef __builtin_aarch64_simd_udi uint64x1_t\n   __attribute__ ((__vector_size__ (8)));\n-typedef uint32_t uint32x1_t;\n-typedef uint16_t uint16x1_t;\n-typedef uint8_t uint8x1_t;\n typedef __builtin_aarch64_simd_qi int8x16_t\n   __attribute__ ((__vector_size__ (16)));\n typedef __builtin_aarch64_simd_hi int16x8_t\n@@ -19048,22 +19042,22 @@ vqabsq_s64 (int64x2_t __a)\n   return (int64x2_t) __builtin_aarch64_sqabsv2di (__a);\n }\n \n-__extension__ static __inline int8x1_t __attribute__ ((__always_inline__))\n-vqabsb_s8 (int8x1_t __a)\n+__extension__ static __inline int8_t __attribute__ ((__always_inline__))\n+vqabsb_s8 (int8_t __a)\n {\n-  return (int8x1_t) __builtin_aarch64_sqabsqi (__a);\n+  return (int8_t) __builtin_aarch64_sqabsqi (__a);\n }\n \n-__extension__ static __inline int16x1_t __attribute__ ((__always_inline__))\n-vqabsh_s16 (int16x1_t __a)\n+__extension__ static __inline int16_t __attribute__ ((__always_inline__))\n+vqabsh_s16 (int16_t __a)\n {\n-  return (int16x1_t) __builtin_aarch64_sqabshi (__a);\n+  return (int16_t) __builtin_aarch64_sqabshi (__a);\n }\n \n-__extension__ static __inline int32x1_t __attribute__ ((__always_inline__))\n-vqabss_s32 (int32x1_t __a)\n+__extension__ static __inline int32_t __attribute__ ((__always_inline__))\n+vqabss_s32 (int32_t __a)\n {\n-  return (int32x1_t) __builtin_aarch64_sqabssi (__a);\n+  return (int32_t) __builtin_aarch64_sqabssi (__a);\n }\n \n __extension__ static __inline int64_t __attribute__ ((__always_inline__))\n@@ -19074,22 +19068,22 @@ vqabsd_s64 (int64_t __a)\n \n /* vqadd */\n \n-__extension__ static __inline int8x1_t __attribute__ ((__always_inline__))\n-vqaddb_s8 (int8x1_t __a, int8x1_t __b)\n+__extension__ static __inline int8_t __attribute__ ((__always_inline__))\n+vqaddb_s8 (int8_t __a, int8_t __b)\n {\n-  return (int8x1_t) __builtin_aarch64_sqaddqi (__a, __b);\n+  return (int8_t) __builtin_aarch64_sqaddqi (__a, __b);\n }\n \n-__extension__ static __inline int16x1_t __attribute__ ((__always_inline__))\n-vqaddh_s16 (int16x1_t __a, int16x1_t __b)\n+__extension__ static __inline int16_t __attribute__ ((__always_inline__))\n+vqaddh_s16 (int16_t __a, int16_t __b)\n {\n-  return (int16x1_t) __builtin_aarch64_sqaddhi (__a, __b);\n+  return (int16_t) __builtin_aarch64_sqaddhi (__a, __b);\n }\n \n-__extension__ static __inline int32x1_t __attribute__ ((__always_inline__))\n-vqadds_s32 (int32x1_t __a, int32x1_t __b)\n+__extension__ static __inline int32_t __attribute__ ((__always_inline__))\n+vqadds_s32 (int32_t __a, int32_t __b)\n {\n-  return (int32x1_t) __builtin_aarch64_sqaddsi (__a, __b);\n+  return (int32_t) __builtin_aarch64_sqaddsi (__a, __b);\n }\n \n __extension__ static __inline int64_t __attribute__ ((__always_inline__))\n@@ -19098,22 +19092,22 @@ vqaddd_s64 (int64_t __a, int64_t __b)\n   return __builtin_aarch64_sqadddi (__a, __b);\n }\n \n-__extension__ static __inline uint8x1_t __attribute__ ((__always_inline__))\n-vqaddb_u8 (uint8x1_t __a, uint8x1_t __b)\n+__extension__ static __inline uint8_t __attribute__ ((__always_inline__))\n+vqaddb_u8 (uint8_t __a, uint8_t __b)\n {\n-  return (uint8x1_t) __builtin_aarch64_uqaddqi_uuu (__a, __b);\n+  return (uint8_t) __builtin_aarch64_uqaddqi_uuu (__a, __b);\n }\n \n-__extension__ static __inline uint16x1_t __attribute__ ((__always_inline__))\n-vqaddh_u16 (uint16x1_t __a, uint16x1_t __b)\n+__extension__ static __inline uint16_t __attribute__ ((__always_inline__))\n+vqaddh_u16 (uint16_t __a, uint16_t __b)\n {\n-  return (uint16x1_t) __builtin_aarch64_uqaddhi_uuu (__a, __b);\n+  return (uint16_t) __builtin_aarch64_uqaddhi_uuu (__a, __b);\n }\n \n-__extension__ static __inline uint32x1_t __attribute__ ((__always_inline__))\n-vqadds_u32 (uint32x1_t __a, uint32x1_t __b)\n+__extension__ static __inline uint32_t __attribute__ ((__always_inline__))\n+vqadds_u32 (uint32_t __a, uint32_t __b)\n {\n-  return (uint32x1_t) __builtin_aarch64_uqaddsi_uuu (__a, __b);\n+  return (uint32_t) __builtin_aarch64_uqaddsi_uuu (__a, __b);\n }\n \n __extension__ static __inline uint64_t __attribute__ ((__always_inline__))\n@@ -19224,14 +19218,14 @@ vqdmlal_n_s32 (int64x2_t __a, int32x2_t __b, int32_t __c)\n   return __builtin_aarch64_sqdmlal_nv2si (__a, __b, __c);\n }\n \n-__extension__ static __inline int32x1_t __attribute__ ((__always_inline__))\n-vqdmlalh_s16 (int32x1_t __a, int16x1_t __b, int16x1_t __c)\n+__extension__ static __inline int32_t __attribute__ ((__always_inline__))\n+vqdmlalh_s16 (int32_t __a, int16_t __b, int16_t __c)\n {\n   return __builtin_aarch64_sqdmlalhi (__a, __b, __c);\n }\n \n-__extension__ static __inline int32x1_t __attribute__ ((__always_inline__))\n-vqdmlalh_lane_s16 (int32x1_t __a, int16x1_t __b, int16x4_t __c, const int __d)\n+__extension__ static __inline int32_t __attribute__ ((__always_inline__))\n+vqdmlalh_lane_s16 (int32_t __a, int16_t __b, int16x4_t __c, const int __d)\n {\n   return __builtin_aarch64_sqdmlal_lanehi (__a, __b, __c, __d);\n }\n@@ -19243,7 +19237,7 @@ vqdmlalh_laneq_s16 (int32_t __a, int16_t __b, int16x8_t __c, const int __d)\n }\n \n __extension__ static __inline int64_t __attribute__ ((__always_inline__))\n-vqdmlals_s32 (int64_t __a, int32x1_t __b, int32x1_t __c)\n+vqdmlals_s32 (int64_t __a, int32_t __b, int32_t __c)\n {\n   return __builtin_aarch64_sqdmlalsi (__a, __b, __c);\n }\n@@ -19362,14 +19356,14 @@ vqdmlsl_n_s32 (int64x2_t __a, int32x2_t __b, int32_t __c)\n   return __builtin_aarch64_sqdmlsl_nv2si (__a, __b, __c);\n }\n \n-__extension__ static __inline int32x1_t __attribute__ ((__always_inline__))\n-vqdmlslh_s16 (int32x1_t __a, int16x1_t __b, int16x1_t __c)\n+__extension__ static __inline int32_t __attribute__ ((__always_inline__))\n+vqdmlslh_s16 (int32_t __a, int16_t __b, int16_t __c)\n {\n   return __builtin_aarch64_sqdmlslhi (__a, __b, __c);\n }\n \n-__extension__ static __inline int32x1_t __attribute__ ((__always_inline__))\n-vqdmlslh_lane_s16 (int32x1_t __a, int16x1_t __b, int16x4_t __c, const int __d)\n+__extension__ static __inline int32_t __attribute__ ((__always_inline__))\n+vqdmlslh_lane_s16 (int32_t __a, int16_t __b, int16x4_t __c, const int __d)\n {\n   return __builtin_aarch64_sqdmlsl_lanehi (__a, __b, __c, __d);\n }\n@@ -19381,7 +19375,7 @@ vqdmlslh_laneq_s16 (int32_t __a, int16_t __b, int16x8_t __c, const int __d)\n }\n \n __extension__ static __inline int64_t __attribute__ ((__always_inline__))\n-vqdmlsls_s32 (int64_t __a, int32x1_t __b, int32x1_t __c)\n+vqdmlsls_s32 (int64_t __a, int32_t __b, int32_t __c)\n {\n   return __builtin_aarch64_sqdmlslsi (__a, __b, __c);\n }\n@@ -19424,14 +19418,14 @@ vqdmulhq_lane_s32 (int32x4_t __a, int32x2_t __b, const int __c)\n   return __builtin_aarch64_sqdmulh_lanev4si (__a, __b, __c);\n }\n \n-__extension__ static __inline int16x1_t __attribute__ ((__always_inline__))\n-vqdmulhh_s16 (int16x1_t __a, int16x1_t __b)\n+__extension__ static __inline int16_t __attribute__ ((__always_inline__))\n+vqdmulhh_s16 (int16_t __a, int16_t __b)\n {\n-  return (int16x1_t) __builtin_aarch64_sqdmulhhi (__a, __b);\n+  return (int16_t) __builtin_aarch64_sqdmulhhi (__a, __b);\n }\n \n-__extension__ static __inline int16x1_t __attribute__ ((__always_inline__))\n-vqdmulhh_lane_s16 (int16x1_t __a, int16x4_t __b, const int __c)\n+__extension__ static __inline int16_t __attribute__ ((__always_inline__))\n+vqdmulhh_lane_s16 (int16_t __a, int16x4_t __b, const int __c)\n {\n   return __builtin_aarch64_sqdmulh_lanehi (__a, __b, __c);\n }\n@@ -19442,14 +19436,14 @@ vqdmulhh_laneq_s16 (int16_t __a, int16x8_t __b, const int __c)\n   return __builtin_aarch64_sqdmulh_laneqhi (__a, __b, __c);\n }\n \n-__extension__ static __inline int32x1_t __attribute__ ((__always_inline__))\n-vqdmulhs_s32 (int32x1_t __a, int32x1_t __b)\n+__extension__ static __inline int32_t __attribute__ ((__always_inline__))\n+vqdmulhs_s32 (int32_t __a, int32_t __b)\n {\n-  return (int32x1_t) __builtin_aarch64_sqdmulhsi (__a, __b);\n+  return (int32_t) __builtin_aarch64_sqdmulhsi (__a, __b);\n }\n \n-__extension__ static __inline int32x1_t __attribute__ ((__always_inline__))\n-vqdmulhs_lane_s32 (int32x1_t __a, int32x2_t __b, const int __c)\n+__extension__ static __inline int32_t __attribute__ ((__always_inline__))\n+vqdmulhs_lane_s32 (int32_t __a, int32x2_t __b, const int __c)\n {\n   return __builtin_aarch64_sqdmulh_lanesi (__a, __b, __c);\n }\n@@ -19558,26 +19552,26 @@ vqdmull_n_s32 (int32x2_t __a, int32_t __b)\n   return __builtin_aarch64_sqdmull_nv2si (__a, __b);\n }\n \n-__extension__ static __inline int32x1_t __attribute__ ((__always_inline__))\n-vqdmullh_s16 (int16x1_t __a, int16x1_t __b)\n+__extension__ static __inline int32_t __attribute__ ((__always_inline__))\n+vqdmullh_s16 (int16_t __a, int16_t __b)\n {\n-  return (int32x1_t) __builtin_aarch64_sqdmullhi (__a, __b);\n+  return (int32_t) __builtin_aarch64_sqdmullhi (__a, __b);\n }\n \n-__extension__ static __inline int32x1_t __attribute__ ((__always_inline__))\n-vqdmullh_lane_s16 (int16x1_t __a, int16x4_t __b, const int __c)\n+__extension__ static __inline int32_t __attribute__ ((__always_inline__))\n+vqdmullh_lane_s16 (int16_t __a, int16x4_t __b, const int __c)\n {\n   return __builtin_aarch64_sqdmull_lanehi (__a, __b, __c);\n }\n \n __extension__ static __inline int64_t __attribute__ ((__always_inline__))\n-vqdmulls_s32 (int32x1_t __a, int32x1_t __b)\n+vqdmulls_s32 (int32_t __a, int32_t __b)\n {\n   return __builtin_aarch64_sqdmullsi (__a, __b);\n }\n \n __extension__ static __inline int64x1_t __attribute__ ((__always_inline__))\n-vqdmulls_lane_s32 (int32x1_t __a, int32x2_t __b, const int __c)\n+vqdmulls_lane_s32 (int32_t __a, int32x2_t __b, const int __c)\n {\n   return (int64x1_t) {__builtin_aarch64_sqdmull_lanesi (__a, __b, __c)};\n }\n@@ -19620,40 +19614,40 @@ vqmovn_u64 (uint64x2_t __a)\n   return (uint32x2_t) __builtin_aarch64_uqmovnv2di ((int64x2_t) __a);\n }\n \n-__extension__ static __inline int8x1_t __attribute__ ((__always_inline__))\n-vqmovnh_s16 (int16x1_t __a)\n+__extension__ static __inline int8_t __attribute__ ((__always_inline__))\n+vqmovnh_s16 (int16_t __a)\n {\n-  return (int8x1_t) __builtin_aarch64_sqmovnhi (__a);\n+  return (int8_t) __builtin_aarch64_sqmovnhi (__a);\n }\n \n-__extension__ static __inline int16x1_t __attribute__ ((__always_inline__))\n-vqmovns_s32 (int32x1_t __a)\n+__extension__ static __inline int16_t __attribute__ ((__always_inline__))\n+vqmovns_s32 (int32_t __a)\n {\n-  return (int16x1_t) __builtin_aarch64_sqmovnsi (__a);\n+  return (int16_t) __builtin_aarch64_sqmovnsi (__a);\n }\n \n-__extension__ static __inline int32x1_t __attribute__ ((__always_inline__))\n+__extension__ static __inline int32_t __attribute__ ((__always_inline__))\n vqmovnd_s64 (int64_t __a)\n {\n-  return (int32x1_t) __builtin_aarch64_sqmovndi (__a);\n+  return (int32_t) __builtin_aarch64_sqmovndi (__a);\n }\n \n-__extension__ static __inline uint8x1_t __attribute__ ((__always_inline__))\n-vqmovnh_u16 (uint16x1_t __a)\n+__extension__ static __inline uint8_t __attribute__ ((__always_inline__))\n+vqmovnh_u16 (uint16_t __a)\n {\n-  return (uint8x1_t) __builtin_aarch64_uqmovnhi (__a);\n+  return (uint8_t) __builtin_aarch64_uqmovnhi (__a);\n }\n \n-__extension__ static __inline uint16x1_t __attribute__ ((__always_inline__))\n-vqmovns_u32 (uint32x1_t __a)\n+__extension__ static __inline uint16_t __attribute__ ((__always_inline__))\n+vqmovns_u32 (uint32_t __a)\n {\n-  return (uint16x1_t) __builtin_aarch64_uqmovnsi (__a);\n+  return (uint16_t) __builtin_aarch64_uqmovnsi (__a);\n }\n \n-__extension__ static __inline uint32x1_t __attribute__ ((__always_inline__))\n+__extension__ static __inline uint32_t __attribute__ ((__always_inline__))\n vqmovnd_u64 (uint64_t __a)\n {\n-  return (uint32x1_t) __builtin_aarch64_uqmovndi (__a);\n+  return (uint32_t) __builtin_aarch64_uqmovndi (__a);\n }\n \n /* vqmovun */\n@@ -19676,22 +19670,22 @@ vqmovun_s64 (int64x2_t __a)\n   return (uint32x2_t) __builtin_aarch64_sqmovunv2di (__a);\n }\n \n-__extension__ static __inline int8x1_t __attribute__ ((__always_inline__))\n-vqmovunh_s16 (int16x1_t __a)\n+__extension__ static __inline int8_t __attribute__ ((__always_inline__))\n+vqmovunh_s16 (int16_t __a)\n {\n-  return (int8x1_t) __builtin_aarch64_sqmovunhi (__a);\n+  return (int8_t) __builtin_aarch64_sqmovunhi (__a);\n }\n \n-__extension__ static __inline int16x1_t __attribute__ ((__always_inline__))\n-vqmovuns_s32 (int32x1_t __a)\n+__extension__ static __inline int16_t __attribute__ ((__always_inline__))\n+vqmovuns_s32 (int32_t __a)\n {\n-  return (int16x1_t) __builtin_aarch64_sqmovunsi (__a);\n+  return (int16_t) __builtin_aarch64_sqmovunsi (__a);\n }\n \n-__extension__ static __inline int32x1_t __attribute__ ((__always_inline__))\n+__extension__ static __inline int32_t __attribute__ ((__always_inline__))\n vqmovund_s64 (int64_t __a)\n {\n-  return (int32x1_t) __builtin_aarch64_sqmovundi (__a);\n+  return (int32_t) __builtin_aarch64_sqmovundi (__a);\n }\n \n /* vqneg */\n@@ -19702,22 +19696,22 @@ vqnegq_s64 (int64x2_t __a)\n   return (int64x2_t) __builtin_aarch64_sqnegv2di (__a);\n }\n \n-__extension__ static __inline int8x1_t __attribute__ ((__always_inline__))\n-vqnegb_s8 (int8x1_t __a)\n+__extension__ static __inline int8_t __attribute__ ((__always_inline__))\n+vqnegb_s8 (int8_t __a)\n {\n-  return (int8x1_t) __builtin_aarch64_sqnegqi (__a);\n+  return (int8_t) __builtin_aarch64_sqnegqi (__a);\n }\n \n-__extension__ static __inline int16x1_t __attribute__ ((__always_inline__))\n-vqnegh_s16 (int16x1_t __a)\n+__extension__ static __inline int16_t __attribute__ ((__always_inline__))\n+vqnegh_s16 (int16_t __a)\n {\n-  return (int16x1_t) __builtin_aarch64_sqneghi (__a);\n+  return (int16_t) __builtin_aarch64_sqneghi (__a);\n }\n \n-__extension__ static __inline int32x1_t __attribute__ ((__always_inline__))\n-vqnegs_s32 (int32x1_t __a)\n+__extension__ static __inline int32_t __attribute__ ((__always_inline__))\n+vqnegs_s32 (int32_t __a)\n {\n-  return (int32x1_t) __builtin_aarch64_sqnegsi (__a);\n+  return (int32_t) __builtin_aarch64_sqnegsi (__a);\n }\n \n __extension__ static __inline int64_t __attribute__ ((__always_inline__))\n@@ -19752,14 +19746,14 @@ vqrdmulhq_lane_s32 (int32x4_t __a, int32x2_t __b, const int __c)\n   return __builtin_aarch64_sqrdmulh_lanev4si (__a, __b, __c);\n }\n \n-__extension__ static __inline int16x1_t __attribute__ ((__always_inline__))\n-vqrdmulhh_s16 (int16x1_t __a, int16x1_t __b)\n+__extension__ static __inline int16_t __attribute__ ((__always_inline__))\n+vqrdmulhh_s16 (int16_t __a, int16_t __b)\n {\n-  return (int16x1_t) __builtin_aarch64_sqrdmulhhi (__a, __b);\n+  return (int16_t) __builtin_aarch64_sqrdmulhhi (__a, __b);\n }\n \n-__extension__ static __inline int16x1_t __attribute__ ((__always_inline__))\n-vqrdmulhh_lane_s16 (int16x1_t __a, int16x4_t __b, const int __c)\n+__extension__ static __inline int16_t __attribute__ ((__always_inline__))\n+vqrdmulhh_lane_s16 (int16_t __a, int16x4_t __b, const int __c)\n {\n   return __builtin_aarch64_sqrdmulh_lanehi (__a, __b, __c);\n }\n@@ -19770,14 +19764,14 @@ vqrdmulhh_laneq_s16 (int16_t __a, int16x8_t __b, const int __c)\n   return __builtin_aarch64_sqrdmulh_laneqhi (__a, __b, __c);\n }\n \n-__extension__ static __inline int32x1_t __attribute__ ((__always_inline__))\n-vqrdmulhs_s32 (int32x1_t __a, int32x1_t __b)\n+__extension__ static __inline int32_t __attribute__ ((__always_inline__))\n+vqrdmulhs_s32 (int32_t __a, int32_t __b)\n {\n-  return (int32x1_t) __builtin_aarch64_sqrdmulhsi (__a, __b);\n+  return (int32_t) __builtin_aarch64_sqrdmulhsi (__a, __b);\n }\n \n-__extension__ static __inline int32x1_t __attribute__ ((__always_inline__))\n-vqrdmulhs_lane_s32 (int32x1_t __a, int32x2_t __b, const int __c)\n+__extension__ static __inline int32_t __attribute__ ((__always_inline__))\n+vqrdmulhs_lane_s32 (int32_t __a, int32x2_t __b, const int __c)\n {\n   return __builtin_aarch64_sqrdmulh_lanesi (__a, __b, __c);\n }\n@@ -19886,20 +19880,20 @@ vqrshlq_u64 (uint64x2_t __a, int64x2_t __b)\n   return __builtin_aarch64_uqrshlv2di_uus ( __a, __b);\n }\n \n-__extension__ static __inline int8x1_t __attribute__ ((__always_inline__))\n-vqrshlb_s8 (int8x1_t __a, int8x1_t __b)\n+__extension__ static __inline int8_t __attribute__ ((__always_inline__))\n+vqrshlb_s8 (int8_t __a, int8_t __b)\n {\n   return __builtin_aarch64_sqrshlqi (__a, __b);\n }\n \n-__extension__ static __inline int16x1_t __attribute__ ((__always_inline__))\n-vqrshlh_s16 (int16x1_t __a, int16x1_t __b)\n+__extension__ static __inline int16_t __attribute__ ((__always_inline__))\n+vqrshlh_s16 (int16_t __a, int16_t __b)\n {\n   return __builtin_aarch64_sqrshlhi (__a, __b);\n }\n \n-__extension__ static __inline int32x1_t __attribute__ ((__always_inline__))\n-vqrshls_s32 (int32x1_t __a, int32x1_t __b)\n+__extension__ static __inline int32_t __attribute__ ((__always_inline__))\n+vqrshls_s32 (int32_t __a, int32_t __b)\n {\n   return __builtin_aarch64_sqrshlsi (__a, __b);\n }\n@@ -19910,20 +19904,20 @@ vqrshld_s64 (int64_t __a, int64_t __b)\n   return __builtin_aarch64_sqrshldi (__a, __b);\n }\n \n-__extension__ static __inline uint8x1_t __attribute__ ((__always_inline__))\n-vqrshlb_u8 (uint8x1_t __a, uint8x1_t __b)\n+__extension__ static __inline uint8_t __attribute__ ((__always_inline__))\n+vqrshlb_u8 (uint8_t __a, uint8_t __b)\n {\n   return __builtin_aarch64_uqrshlqi_uus (__a, __b);\n }\n \n-__extension__ static __inline uint16x1_t __attribute__ ((__always_inline__))\n-vqrshlh_u16 (uint16x1_t __a, uint16x1_t __b)\n+__extension__ static __inline uint16_t __attribute__ ((__always_inline__))\n+vqrshlh_u16 (uint16_t __a, uint16_t __b)\n {\n   return __builtin_aarch64_uqrshlhi_uus (__a, __b);\n }\n \n-__extension__ static __inline uint32x1_t __attribute__ ((__always_inline__))\n-vqrshls_u32 (uint32x1_t __a, uint32x1_t __b)\n+__extension__ static __inline uint32_t __attribute__ ((__always_inline__))\n+vqrshls_u32 (uint32_t __a, uint32_t __b)\n {\n   return __builtin_aarch64_uqrshlsi_uus (__a, __b);\n }\n@@ -19972,37 +19966,37 @@ vqrshrn_n_u64 (uint64x2_t __a, const int __b)\n   return __builtin_aarch64_uqrshrn_nv2di_uus ( __a, __b);\n }\n \n-__extension__ static __inline int8x1_t __attribute__ ((__always_inline__))\n-vqrshrnh_n_s16 (int16x1_t __a, const int __b)\n+__extension__ static __inline int8_t __attribute__ ((__always_inline__))\n+vqrshrnh_n_s16 (int16_t __a, const int __b)\n {\n-  return (int8x1_t) __builtin_aarch64_sqrshrn_nhi (__a, __b);\n+  return (int8_t) __builtin_aarch64_sqrshrn_nhi (__a, __b);\n }\n \n-__extension__ static __inline int16x1_t __attribute__ ((__always_inline__))\n-vqrshrns_n_s32 (int32x1_t __a, const int __b)\n+__extension__ static __inline int16_t __attribute__ ((__always_inline__))\n+vqrshrns_n_s32 (int32_t __a, const int __b)\n {\n-  return (int16x1_t) __builtin_aarch64_sqrshrn_nsi (__a, __b);\n+  return (int16_t) __builtin_aarch64_sqrshrn_nsi (__a, __b);\n }\n \n-__extension__ static __inline int32x1_t __attribute__ ((__always_inline__))\n+__extension__ static __inline int32_t __attribute__ ((__always_inline__))\n vqrshrnd_n_s64 (int64_t __a, const int __b)\n {\n-  return (int32x1_t) __builtin_aarch64_sqrshrn_ndi (__a, __b);\n+  return (int32_t) __builtin_aarch64_sqrshrn_ndi (__a, __b);\n }\n \n-__extension__ static __inline uint8x1_t __attribute__ ((__always_inline__))\n-vqrshrnh_n_u16 (uint16x1_t __a, const int __b)\n+__extension__ static __inline uint8_t __attribute__ ((__always_inline__))\n+vqrshrnh_n_u16 (uint16_t __a, const int __b)\n {\n   return __builtin_aarch64_uqrshrn_nhi_uus (__a, __b);\n }\n \n-__extension__ static __inline uint16x1_t __attribute__ ((__always_inline__))\n-vqrshrns_n_u32 (uint32x1_t __a, const int __b)\n+__extension__ static __inline uint16_t __attribute__ ((__always_inline__))\n+vqrshrns_n_u32 (uint32_t __a, const int __b)\n {\n   return __builtin_aarch64_uqrshrn_nsi_uus (__a, __b);\n }\n \n-__extension__ static __inline uint32x1_t __attribute__ ((__always_inline__))\n+__extension__ static __inline uint32_t __attribute__ ((__always_inline__))\n vqrshrnd_n_u64 (uint64_t __a, const int __b)\n {\n   return __builtin_aarch64_uqrshrn_ndi_uus (__a, __b);\n@@ -20028,22 +20022,22 @@ vqrshrun_n_s64 (int64x2_t __a, const int __b)\n   return (uint32x2_t) __builtin_aarch64_sqrshrun_nv2di (__a, __b);\n }\n \n-__extension__ static __inline int8x1_t __attribute__ ((__always_inline__))\n-vqrshrunh_n_s16 (int16x1_t __a, const int __b)\n+__extension__ static __inline int8_t __attribute__ ((__always_inline__))\n+vqrshrunh_n_s16 (int16_t __a, const int __b)\n {\n-  return (int8x1_t) __builtin_aarch64_sqrshrun_nhi (__a, __b);\n+  return (int8_t) __builtin_aarch64_sqrshrun_nhi (__a, __b);\n }\n \n-__extension__ static __inline int16x1_t __attribute__ ((__always_inline__))\n-vqrshruns_n_s32 (int32x1_t __a, const int __b)\n+__extension__ static __inline int16_t __attribute__ ((__always_inline__))\n+vqrshruns_n_s32 (int32_t __a, const int __b)\n {\n-  return (int16x1_t) __builtin_aarch64_sqrshrun_nsi (__a, __b);\n+  return (int16_t) __builtin_aarch64_sqrshrun_nsi (__a, __b);\n }\n \n-__extension__ static __inline int32x1_t __attribute__ ((__always_inline__))\n+__extension__ static __inline int32_t __attribute__ ((__always_inline__))\n vqrshrund_n_s64 (int64_t __a, const int __b)\n {\n-  return (int32x1_t) __builtin_aarch64_sqrshrun_ndi (__a, __b);\n+  return (int32_t) __builtin_aarch64_sqrshrun_ndi (__a, __b);\n }\n \n /* vqshl */\n@@ -20144,20 +20138,20 @@ vqshlq_u64 (uint64x2_t __a, int64x2_t __b)\n   return __builtin_aarch64_uqshlv2di_uus ( __a, __b);\n }\n \n-__extension__ static __inline int8x1_t __attribute__ ((__always_inline__))\n-vqshlb_s8 (int8x1_t __a, int8x1_t __b)\n+__extension__ static __inline int8_t __attribute__ ((__always_inline__))\n+vqshlb_s8 (int8_t __a, int8_t __b)\n {\n   return __builtin_aarch64_sqshlqi (__a, __b);\n }\n \n-__extension__ static __inline int16x1_t __attribute__ ((__always_inline__))\n-vqshlh_s16 (int16x1_t __a, int16x1_t __b)\n+__extension__ static __inline int16_t __attribute__ ((__always_inline__))\n+vqshlh_s16 (int16_t __a, int16_t __b)\n {\n   return __builtin_aarch64_sqshlhi (__a, __b);\n }\n \n-__extension__ static __inline int32x1_t __attribute__ ((__always_inline__))\n-vqshls_s32 (int32x1_t __a, int32x1_t __b)\n+__extension__ static __inline int32_t __attribute__ ((__always_inline__))\n+vqshls_s32 (int32_t __a, int32_t __b)\n {\n   return __builtin_aarch64_sqshlsi (__a, __b);\n }\n@@ -20168,20 +20162,20 @@ vqshld_s64 (int64_t __a, int64_t __b)\n   return __builtin_aarch64_sqshldi (__a, __b);\n }\n \n-__extension__ static __inline uint8x1_t __attribute__ ((__always_inline__))\n-vqshlb_u8 (uint8x1_t __a, uint8x1_t __b)\n+__extension__ static __inline uint8_t __attribute__ ((__always_inline__))\n+vqshlb_u8 (uint8_t __a, uint8_t __b)\n {\n   return __builtin_aarch64_uqshlqi_uus (__a, __b);\n }\n \n-__extension__ static __inline uint16x1_t __attribute__ ((__always_inline__))\n-vqshlh_u16 (uint16x1_t __a, uint16x1_t __b)\n+__extension__ static __inline uint16_t __attribute__ ((__always_inline__))\n+vqshlh_u16 (uint16_t __a, uint16_t __b)\n {\n   return __builtin_aarch64_uqshlhi_uus (__a, __b);\n }\n \n-__extension__ static __inline uint32x1_t __attribute__ ((__always_inline__))\n-vqshls_u32 (uint32x1_t __a, uint32x1_t __b)\n+__extension__ static __inline uint32_t __attribute__ ((__always_inline__))\n+vqshls_u32 (uint32_t __a, uint32_t __b)\n {\n   return __builtin_aarch64_uqshlsi_uus (__a, __b);\n }\n@@ -20288,22 +20282,22 @@ vqshlq_n_u64 (uint64x2_t __a, const int __b)\n   return __builtin_aarch64_uqshl_nv2di_uus (__a, __b);\n }\n \n-__extension__ static __inline int8x1_t __attribute__ ((__always_inline__))\n-vqshlb_n_s8 (int8x1_t __a, const int __b)\n+__extension__ static __inline int8_t __attribute__ ((__always_inline__))\n+vqshlb_n_s8 (int8_t __a, const int __b)\n {\n-  return (int8x1_t) __builtin_aarch64_sqshl_nqi (__a, __b);\n+  return (int8_t) __builtin_aarch64_sqshl_nqi (__a, __b);\n }\n \n-__extension__ static __inline int16x1_t __attribute__ ((__always_inline__))\n-vqshlh_n_s16 (int16x1_t __a, const int __b)\n+__extension__ static __inline int16_t __attribute__ ((__always_inline__))\n+vqshlh_n_s16 (int16_t __a, const int __b)\n {\n-  return (int16x1_t) __builtin_aarch64_sqshl_nhi (__a, __b);\n+  return (int16_t) __builtin_aarch64_sqshl_nhi (__a, __b);\n }\n \n-__extension__ static __inline int32x1_t __attribute__ ((__always_inline__))\n-vqshls_n_s32 (int32x1_t __a, const int __b)\n+__extension__ static __inline int32_t __attribute__ ((__always_inline__))\n+vqshls_n_s32 (int32_t __a, const int __b)\n {\n-  return (int32x1_t) __builtin_aarch64_sqshl_nsi (__a, __b);\n+  return (int32_t) __builtin_aarch64_sqshl_nsi (__a, __b);\n }\n \n __extension__ static __inline int64_t __attribute__ ((__always_inline__))\n@@ -20312,20 +20306,20 @@ vqshld_n_s64 (int64_t __a, const int __b)\n   return __builtin_aarch64_sqshl_ndi (__a, __b);\n }\n \n-__extension__ static __inline uint8x1_t __attribute__ ((__always_inline__))\n-vqshlb_n_u8 (uint8x1_t __a, const int __b)\n+__extension__ static __inline uint8_t __attribute__ ((__always_inline__))\n+vqshlb_n_u8 (uint8_t __a, const int __b)\n {\n   return __builtin_aarch64_uqshl_nqi_uus (__a, __b);\n }\n \n-__extension__ static __inline uint16x1_t __attribute__ ((__always_inline__))\n-vqshlh_n_u16 (uint16x1_t __a, const int __b)\n+__extension__ static __inline uint16_t __attribute__ ((__always_inline__))\n+vqshlh_n_u16 (uint16_t __a, const int __b)\n {\n   return __builtin_aarch64_uqshl_nhi_uus (__a, __b);\n }\n \n-__extension__ static __inline uint32x1_t __attribute__ ((__always_inline__))\n-vqshls_n_u32 (uint32x1_t __a, const int __b)\n+__extension__ static __inline uint32_t __attribute__ ((__always_inline__))\n+vqshls_n_u32 (uint32_t __a, const int __b)\n {\n   return __builtin_aarch64_uqshl_nsi_uus (__a, __b);\n }\n@@ -20386,22 +20380,22 @@ vqshluq_n_s64 (int64x2_t __a, const int __b)\n   return __builtin_aarch64_sqshlu_nv2di_uss (__a, __b);\n }\n \n-__extension__ static __inline int8x1_t __attribute__ ((__always_inline__))\n-vqshlub_n_s8 (int8x1_t __a, const int __b)\n+__extension__ static __inline int8_t __attribute__ ((__always_inline__))\n+vqshlub_n_s8 (int8_t __a, const int __b)\n {\n-  return (int8x1_t) __builtin_aarch64_sqshlu_nqi_uss (__a, __b);\n+  return (int8_t) __builtin_aarch64_sqshlu_nqi_uss (__a, __b);\n }\n \n-__extension__ static __inline int16x1_t __attribute__ ((__always_inline__))\n-vqshluh_n_s16 (int16x1_t __a, const int __b)\n+__extension__ static __inline int16_t __attribute__ ((__always_inline__))\n+vqshluh_n_s16 (int16_t __a, const int __b)\n {\n-  return (int16x1_t) __builtin_aarch64_sqshlu_nhi_uss (__a, __b);\n+  return (int16_t) __builtin_aarch64_sqshlu_nhi_uss (__a, __b);\n }\n \n-__extension__ static __inline int32x1_t __attribute__ ((__always_inline__))\n-vqshlus_n_s32 (int32x1_t __a, const int __b)\n+__extension__ static __inline int32_t __attribute__ ((__always_inline__))\n+vqshlus_n_s32 (int32_t __a, const int __b)\n {\n-  return (int32x1_t) __builtin_aarch64_sqshlu_nsi_uss (__a, __b);\n+  return (int32_t) __builtin_aarch64_sqshlu_nsi_uss (__a, __b);\n }\n \n __extension__ static __inline uint64_t __attribute__ ((__always_inline__))\n@@ -20448,37 +20442,37 @@ vqshrn_n_u64 (uint64x2_t __a, const int __b)\n   return __builtin_aarch64_uqshrn_nv2di_uus ( __a, __b);\n }\n \n-__extension__ static __inline int8x1_t __attribute__ ((__always_inline__))\n-vqshrnh_n_s16 (int16x1_t __a, const int __b)\n+__extension__ static __inline int8_t __attribute__ ((__always_inline__))\n+vqshrnh_n_s16 (int16_t __a, const int __b)\n {\n-  return (int8x1_t) __builtin_aarch64_sqshrn_nhi (__a, __b);\n+  return (int8_t) __builtin_aarch64_sqshrn_nhi (__a, __b);\n }\n \n-__extension__ static __inline int16x1_t __attribute__ ((__always_inline__))\n-vqshrns_n_s32 (int32x1_t __a, const int __b)\n+__extension__ static __inline int16_t __attribute__ ((__always_inline__))\n+vqshrns_n_s32 (int32_t __a, const int __b)\n {\n-  return (int16x1_t) __builtin_aarch64_sqshrn_nsi (__a, __b);\n+  return (int16_t) __builtin_aarch64_sqshrn_nsi (__a, __b);\n }\n \n-__extension__ static __inline int32x1_t __attribute__ ((__always_inline__))\n+__extension__ static __inline int32_t __attribute__ ((__always_inline__))\n vqshrnd_n_s64 (int64_t __a, const int __b)\n {\n-  return (int32x1_t) __builtin_aarch64_sqshrn_ndi (__a, __b);\n+  return (int32_t) __builtin_aarch64_sqshrn_ndi (__a, __b);\n }\n \n-__extension__ static __inline uint8x1_t __attribute__ ((__always_inline__))\n-vqshrnh_n_u16 (uint16x1_t __a, const int __b)\n+__extension__ static __inline uint8_t __attribute__ ((__always_inline__))\n+vqshrnh_n_u16 (uint16_t __a, const int __b)\n {\n   return __builtin_aarch64_uqshrn_nhi_uus (__a, __b);\n }\n \n-__extension__ static __inline uint16x1_t __attribute__ ((__always_inline__))\n-vqshrns_n_u32 (uint32x1_t __a, const int __b)\n+__extension__ static __inline uint16_t __attribute__ ((__always_inline__))\n+vqshrns_n_u32 (uint32_t __a, const int __b)\n {\n   return __builtin_aarch64_uqshrn_nsi_uus (__a, __b);\n }\n \n-__extension__ static __inline uint32x1_t __attribute__ ((__always_inline__))\n+__extension__ static __inline uint32_t __attribute__ ((__always_inline__))\n vqshrnd_n_u64 (uint64_t __a, const int __b)\n {\n   return __builtin_aarch64_uqshrn_ndi_uus (__a, __b);\n@@ -20504,42 +20498,42 @@ vqshrun_n_s64 (int64x2_t __a, const int __b)\n   return (uint32x2_t) __builtin_aarch64_sqshrun_nv2di (__a, __b);\n }\n \n-__extension__ static __inline int8x1_t __attribute__ ((__always_inline__))\n-vqshrunh_n_s16 (int16x1_t __a, const int __b)\n+__extension__ static __inline int8_t __attribute__ ((__always_inline__))\n+vqshrunh_n_s16 (int16_t __a, const int __b)\n {\n-  return (int8x1_t) __builtin_aarch64_sqshrun_nhi (__a, __b);\n+  return (int8_t) __builtin_aarch64_sqshrun_nhi (__a, __b);\n }\n \n-__extension__ static __inline int16x1_t __attribute__ ((__always_inline__))\n-vqshruns_n_s32 (int32x1_t __a, const int __b)\n+__extension__ static __inline int16_t __attribute__ ((__always_inline__))\n+vqshruns_n_s32 (int32_t __a, const int __b)\n {\n-  return (int16x1_t) __builtin_aarch64_sqshrun_nsi (__a, __b);\n+  return (int16_t) __builtin_aarch64_sqshrun_nsi (__a, __b);\n }\n \n-__extension__ static __inline int32x1_t __attribute__ ((__always_inline__))\n+__extension__ static __inline int32_t __attribute__ ((__always_inline__))\n vqshrund_n_s64 (int64_t __a, const int __b)\n {\n-  return (int32x1_t) __builtin_aarch64_sqshrun_ndi (__a, __b);\n+  return (int32_t) __builtin_aarch64_sqshrun_ndi (__a, __b);\n }\n \n /* vqsub */\n \n-__extension__ static __inline int8x1_t __attribute__ ((__always_inline__))\n-vqsubb_s8 (int8x1_t __a, int8x1_t __b)\n+__extension__ static __inline int8_t __attribute__ ((__always_inline__))\n+vqsubb_s8 (int8_t __a, int8_t __b)\n {\n-  return (int8x1_t) __builtin_aarch64_sqsubqi (__a, __b);\n+  return (int8_t) __builtin_aarch64_sqsubqi (__a, __b);\n }\n \n-__extension__ static __inline int16x1_t __attribute__ ((__always_inline__))\n-vqsubh_s16 (int16x1_t __a, int16x1_t __b)\n+__extension__ static __inline int16_t __attribute__ ((__always_inline__))\n+vqsubh_s16 (int16_t __a, int16_t __b)\n {\n-  return (int16x1_t) __builtin_aarch64_sqsubhi (__a, __b);\n+  return (int16_t) __builtin_aarch64_sqsubhi (__a, __b);\n }\n \n-__extension__ static __inline int32x1_t __attribute__ ((__always_inline__))\n-vqsubs_s32 (int32x1_t __a, int32x1_t __b)\n+__extension__ static __inline int32_t __attribute__ ((__always_inline__))\n+vqsubs_s32 (int32_t __a, int32_t __b)\n {\n-  return (int32x1_t) __builtin_aarch64_sqsubsi (__a, __b);\n+  return (int32_t) __builtin_aarch64_sqsubsi (__a, __b);\n }\n \n __extension__ static __inline int64_t __attribute__ ((__always_inline__))\n@@ -20548,22 +20542,22 @@ vqsubd_s64 (int64_t __a, int64_t __b)\n   return __builtin_aarch64_sqsubdi (__a, __b);\n }\n \n-__extension__ static __inline uint8x1_t __attribute__ ((__always_inline__))\n-vqsubb_u8 (uint8x1_t __a, uint8x1_t __b)\n+__extension__ static __inline uint8_t __attribute__ ((__always_inline__))\n+vqsubb_u8 (uint8_t __a, uint8_t __b)\n {\n-  return (uint8x1_t) __builtin_aarch64_uqsubqi_uuu (__a, __b);\n+  return (uint8_t) __builtin_aarch64_uqsubqi_uuu (__a, __b);\n }\n \n-__extension__ static __inline uint16x1_t __attribute__ ((__always_inline__))\n-vqsubh_u16 (uint16x1_t __a, uint16x1_t __b)\n+__extension__ static __inline uint16_t __attribute__ ((__always_inline__))\n+vqsubh_u16 (uint16_t __a, uint16_t __b)\n {\n-  return (uint16x1_t) __builtin_aarch64_uqsubhi_uuu (__a, __b);\n+  return (uint16_t) __builtin_aarch64_uqsubhi_uuu (__a, __b);\n }\n \n-__extension__ static __inline uint32x1_t __attribute__ ((__always_inline__))\n-vqsubs_u32 (uint32x1_t __a, uint32x1_t __b)\n+__extension__ static __inline uint32_t __attribute__ ((__always_inline__))\n+vqsubs_u32 (uint32_t __a, uint32_t __b)\n {\n-  return (uint32x1_t) __builtin_aarch64_uqsubsi_uuu (__a, __b);\n+  return (uint32_t) __builtin_aarch64_uqsubsi_uuu (__a, __b);\n }\n \n __extension__ static __inline uint64_t __attribute__ ((__always_inline__))\n@@ -22065,20 +22059,20 @@ vsqaddq_u64 (uint64x2_t __a, int64x2_t __b)\n   return __builtin_aarch64_usqaddv2di_uus (__a, __b);\n }\n \n-__extension__ static __inline uint8x1_t __attribute__ ((__always_inline__))\n-vsqaddb_u8 (uint8x1_t __a, int8x1_t __b)\n+__extension__ static __inline uint8_t __attribute__ ((__always_inline__))\n+vsqaddb_u8 (uint8_t __a, int8_t __b)\n {\n   return __builtin_aarch64_usqaddqi_uus (__a, __b);\n }\n \n-__extension__ static __inline uint16x1_t __attribute__ ((__always_inline__))\n-vsqaddh_u16 (uint16x1_t __a, int16x1_t __b)\n+__extension__ static __inline uint16_t __attribute__ ((__always_inline__))\n+vsqaddh_u16 (uint16_t __a, int16_t __b)\n {\n   return __builtin_aarch64_usqaddhi_uus (__a, __b);\n }\n \n-__extension__ static __inline uint32x1_t __attribute__ ((__always_inline__))\n-vsqadds_u32 (uint32x1_t __a, int32x1_t __b)\n+__extension__ static __inline uint32_t __attribute__ ((__always_inline__))\n+vsqadds_u32 (uint32_t __a, int32_t __b)\n {\n   return __builtin_aarch64_usqaddsi_uus (__a, __b);\n }\n@@ -24129,20 +24123,20 @@ vuqaddq_s64 (int64x2_t __a, uint64x2_t __b)\n   return __builtin_aarch64_suqaddv2di_ssu (__a,  __b);\n }\n \n-__extension__ static __inline int8x1_t __attribute__ ((__always_inline__))\n-vuqaddb_s8 (int8x1_t __a, uint8x1_t __b)\n+__extension__ static __inline int8_t __attribute__ ((__always_inline__))\n+vuqaddb_s8 (int8_t __a, uint8_t __b)\n {\n   return __builtin_aarch64_suqaddqi_ssu (__a,  __b);\n }\n \n-__extension__ static __inline int16x1_t __attribute__ ((__always_inline__))\n-vuqaddh_s16 (int16x1_t __a, uint16x1_t __b)\n+__extension__ static __inline int16_t __attribute__ ((__always_inline__))\n+vuqaddh_s16 (int16_t __a, uint16_t __b)\n {\n   return __builtin_aarch64_suqaddhi_ssu (__a,  __b);\n }\n \n-__extension__ static __inline int32x1_t __attribute__ ((__always_inline__))\n-vuqadds_s32 (int32x1_t __a, uint32x1_t __b)\n+__extension__ static __inline int32_t __attribute__ ((__always_inline__))\n+vuqadds_s32 (int32_t __a, uint32_t __b)\n {\n   return __builtin_aarch64_suqaddsi_ssu (__a,  __b);\n }"}, {"sha": "59b1863bc3cb8c3de0b74538c8dd64df755c2053", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02a0ec4a8d8102b3f5f8ef1350bb65cf6c1d22e6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02a0ec4a8d8102b3f5f8ef1350bb65cf6c1d22e6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=02a0ec4a8d8102b3f5f8ef1350bb65cf6c1d22e6", "patch": "@@ -1,3 +1,12 @@\n+2014-09-05  Alan Lawrence  <alan.lawrence@arm.com>\n+\n+\t* gcc.target/aarch64/scalar_intrinsics.c (*): Replace all\n+\tint{32,16,8}x1_t with int{32,16,8}_t.\n+\t* gcc.target/aarch64/simd/vqdmlalh_lane_s16.c: Likewise.\n+\t* gcc.target/aarch64/simd/vqdmlslh_lane_s16.c: Likewise.\n+\t* gcc.target/aarch64/simd/vqdmullh_lane_s16.c: Likewise.\n+\t* gcc.target/aarch64/simd/vqdmulls_lane_s32.c: Likewise.\n+\n 2014-09-05  Alan Lawrence  <alan.lawrence@arm.com>\n \n \t* gcc.target/aarch64/vget_high_1.c: New test."}, {"sha": "c07c94c368f3983c23bc476c1ee472cc700c23f6", "filename": "gcc/testsuite/gcc.target/aarch64/scalar_intrinsics.c", "status": "modified", "additions": 179, "deletions": 179, "changes": 358, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02a0ec4a8d8102b3f5f8ef1350bb65cf6c1d22e6/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fscalar_intrinsics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02a0ec4a8d8102b3f5f8ef1350bb65cf6c1d22e6/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fscalar_intrinsics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fscalar_intrinsics.c?ref=02a0ec4a8d8102b3f5f8ef1350bb65cf6c1d22e6", "patch": "@@ -187,20 +187,20 @@ test_vcltzd_s64 (int64_t a)\n \n /* { dg-final { scan-assembler-times \"aarch64_get_lanev16qi\" 2 } } */\n \n-int8x1_t\n+int8_t\n test_vdupb_lane_s8 (int8x16_t a)\n {\n-  int8x1_t res;\n+  int8_t res;\n   force_simd (a);\n   res = vdupb_laneq_s8 (a, 2);\n   force_simd (res);\n   return res;\n }\n \n-uint8x1_t\n+uint8_t\n test_vdupb_lane_u8 (uint8x16_t a)\n {\n-  uint8x1_t res;\n+  uint8_t res;\n   force_simd (a);\n   res = vdupb_laneq_u8 (a, 2);\n   force_simd (res);\n@@ -209,20 +209,20 @@ test_vdupb_lane_u8 (uint8x16_t a)\n \n /* { dg-final { scan-assembler-times \"aarch64_get_lanev8hi\" 2 } } */\n \n-int16x1_t\n+int16_t\n test_vduph_lane_s16 (int16x8_t a)\n {\n-  int16x1_t res;\n+  int16_t res;\n   force_simd (a);\n   res = vduph_laneq_s16 (a, 2);\n   force_simd (res);\n   return res;\n }\n \n-uint16x1_t\n+uint16_t\n test_vduph_lane_u16 (uint16x8_t a)\n {\n-  uint16x1_t res;\n+  uint16_t res;\n   force_simd (a);\n   res = vduph_laneq_u16 (a, 2);\n   force_simd (res);\n@@ -231,20 +231,20 @@ test_vduph_lane_u16 (uint16x8_t a)\n \n /* { dg-final { scan-assembler-times \"aarch64_get_lanev4si\" 2 } } */\n \n-int32x1_t\n+int32_t\n test_vdups_lane_s32 (int32x4_t a)\n {\n-  int32x1_t res;\n+  int32_t res;\n   force_simd (a);\n   res = vdups_laneq_s32 (a, 2);\n   force_simd (res);\n   return res;\n }\n \n-uint32x1_t\n+uint32_t\n test_vdups_lane_u32 (uint32x4_t a)\n {\n-  uint32x1_t res;\n+  uint32_t res;\n   force_simd (a);\n   res = vdups_laneq_u32 (a, 2);\n   force_simd (res);\n@@ -325,24 +325,24 @@ test_vqaddd_u64 (uint64_t a, uint64_t b)\n \n /* { dg-final { scan-assembler-times \"\\\\tuqadd\\\\ts\\[0-9\\]+\" 1 } } */\n \n-uint32x1_t\n-test_vqadds_u32 (uint32x1_t a, uint32x1_t b)\n+uint32_t\n+test_vqadds_u32 (uint32_t a, uint32_t b)\n {\n   return vqadds_u32 (a, b);\n }\n \n /* { dg-final { scan-assembler-times \"\\\\tuqadd\\\\th\\[0-9\\]+\" 1 } } */\n \n-uint16x1_t\n-test_vqaddh_u16 (uint16x1_t a, uint16x1_t b)\n+uint16_t\n+test_vqaddh_u16 (uint16_t a, uint16_t b)\n {\n   return vqaddh_u16 (a, b);\n }\n \n /* { dg-final { scan-assembler-times \"\\\\tuqadd\\\\tb\\[0-9\\]+\" 1 } } */\n \n-uint8x1_t\n-test_vqaddb_u8 (uint8x1_t a, uint8x1_t b)\n+uint8_t\n+test_vqaddb_u8 (uint8_t a, uint8_t b)\n {\n   return vqaddb_u8 (a, b);\n }\n@@ -357,48 +357,48 @@ test_vqaddd_s64 (int64_t a, int64_t b)\n \n /* { dg-final { scan-assembler-times \"\\\\tsqadd\\\\ts\\[0-9\\]+, s\\[0-9\\]+\" 1 } } */\n \n-int32x1_t\n-test_vqadds_s32 (int32x1_t a, int32x1_t b)\n+int32_t\n+test_vqadds_s32 (int32_t a, int32_t b)\n {\n   return vqadds_s32 (a, b);\n }\n \n /* { dg-final { scan-assembler-times \"\\\\tsqadd\\\\th\\[0-9\\]+, h\\[0-9\\]+\" 1 } } */\n \n-int16x1_t\n-test_vqaddh_s16 (int16x1_t a, int16x1_t b)\n+int16_t\n+test_vqaddh_s16 (int16_t a, int16_t b)\n {\n   return vqaddh_s16 (a, b);\n }\n \n /* { dg-final { scan-assembler-times \"\\\\tsqadd\\\\tb\\[0-9\\]+, b\\[0-9\\]+\" 1 } } */\n \n-int8x1_t\n-test_vqaddb_s8 (int8x1_t a, int8x1_t b)\n+int8_t\n+test_vqaddb_s8 (int8_t a, int8_t b)\n {\n   return vqaddb_s8 (a, b);\n }\n \n /* { dg-final { scan-assembler-times \"\\\\tsqdmlal\\\\ts\\[0-9\\]+, h\\[0-9\\]+, h\\[0-9\\]+\" 1 } } */\n \n-int32x1_t\n-test_vqdmlalh_s16 (int32x1_t a, int16x1_t b, int16x1_t c)\n+int32_t\n+test_vqdmlalh_s16 (int32_t a, int16_t b, int16_t c)\n {\n   return vqdmlalh_s16 (a, b, c);\n }\n \n /* { dg-final { scan-assembler-times \"\\\\tsqdmlal\\\\ts\\[0-9\\]+, h\\[0-9\\]+, v\" 1 } } */\n \n-int32x1_t\n-test_vqdmlalh_lane_s16 (int32x1_t a, int16x1_t b, int16x4_t c)\n+int32_t\n+test_vqdmlalh_lane_s16 (int32_t a, int16_t b, int16x4_t c)\n {\n   return vqdmlalh_lane_s16 (a, b, c, 3);\n }\n \n /* { dg-final { scan-assembler-times \"\\\\tsqdmlal\\\\td\\[0-9\\]+, s\\[0-9\\]+, s\\[0-9\\]+\" 1 } } */\n \n int64_t\n-test_vqdmlals_s32 (int64_t a, int32x1_t b, int32x1_t c)\n+test_vqdmlals_s32 (int64_t a, int32_t b, int32_t c)\n {\n   return vqdmlals_s32 (a, b, c);\n }\n@@ -413,24 +413,24 @@ test_vqdmlals_lane_s32 (int64_t a, int32_t b, int32x2_t c)\n \n /* { dg-final { scan-assembler-times \"\\\\tsqdmlsl\\\\ts\\[0-9\\]+, h\\[0-9\\]+, h\\[0-9\\]+\" 1 } } */\n \n-int32x1_t\n-test_vqdmlslh_s16 (int32x1_t a, int16x1_t b, int16x1_t c)\n+int32_t\n+test_vqdmlslh_s16 (int32_t a, int16_t b, int16_t c)\n {\n   return vqdmlslh_s16 (a, b, c);\n }\n \n /* { dg-final { scan-assembler-times \"\\\\tsqdmlsl\\\\ts\\[0-9\\]+, h\\[0-9\\]+, v\" 1 } } */\n \n-int32x1_t\n-test_vqdmlslh_lane_s16 (int32x1_t a, int16x1_t b, int16x4_t c)\n+int32_t\n+test_vqdmlslh_lane_s16 (int32_t a, int16_t b, int16x4_t c)\n {\n   return vqdmlslh_lane_s16 (a, b, c, 3);\n }\n \n /* { dg-final { scan-assembler-times \"\\\\tsqdmlsl\\\\td\\[0-9\\]+, s\\[0-9\\]+, s\\[0-9\\]+\" 1 } } */\n \n int64_t\n-test_vqdmlsls_s32 (int64_t a, int32x1_t b, int32x1_t c)\n+test_vqdmlsls_s32 (int64_t a, int32_t b, int32_t c)\n {\n   return vqdmlsls_s32 (a, b, c);\n }\n@@ -445,120 +445,120 @@ test_vqdmlsls_lane_s32 (int64_t a, int32_t b, int32x2_t c)\n \n /* { dg-final { scan-assembler-times \"\\\\tsqdmulh\\\\th\\[0-9\\]+, h\\[0-9\\]+, h\\[0-9\\]+\" 1 } } */\n \n-int16x1_t\n-test_vqdmulhh_s16 (int16x1_t a, int16x1_t b)\n+int16_t\n+test_vqdmulhh_s16 (int16_t a, int16_t b)\n {\n   return vqdmulhh_s16 (a, b);\n }\n \n /* { dg-final { scan-assembler-times \"\\\\tsqdmulh\\\\th\\[0-9\\]+, h\\[0-9\\]+, v\" 1 } } */\n \n-int16x1_t\n-test_vqdmulhh_lane_s16 (int16x1_t a, int16x4_t b)\n+int16_t\n+test_vqdmulhh_lane_s16 (int16_t a, int16x4_t b)\n {\n   return vqdmulhh_lane_s16 (a, b, 3);\n }\n \n /* { dg-final { scan-assembler-times \"\\\\tsqdmulh\\\\ts\\[0-9\\]+, s\\[0-9\\]+, s\\[0-9\\]+\" 1 } } */\n \n-int32x1_t\n-test_vqdmulhs_s32 (int32x1_t a, int32x1_t b)\n+int32_t\n+test_vqdmulhs_s32 (int32_t a, int32_t b)\n {\n   return vqdmulhs_s32 (a, b);\n }\n \n /* { dg-final { scan-assembler-times \"\\\\tsqdmulh\\\\ts\\[0-9\\]+, s\\[0-9\\]+, v\" 1 } } */\n \n-int32x1_t\n-test_vqdmulhs_lane_s32 (int32x1_t a, int32x2_t b)\n+int32_t\n+test_vqdmulhs_lane_s32 (int32_t a, int32x2_t b)\n {\n   return vqdmulhs_lane_s32 (a, b, 1);\n }\n \n /* { dg-final { scan-assembler-times \"\\\\tsqdmull\\\\ts\\[0-9\\]+, h\\[0-9\\]+, h\\[0-9\\]+\" 1 } } */\n \n-int32x1_t\n-test_vqdmullh_s16 (int16x1_t a, int16x1_t b)\n+int32_t\n+test_vqdmullh_s16 (int16_t a, int16_t b)\n {\n   return vqdmullh_s16 (a, b);\n }\n \n /* { dg-final { scan-assembler-times \"\\\\tsqdmull\\\\ts\\[0-9\\]+, h\\[0-9\\]+, v\" 1 } } */\n \n-int32x1_t\n-test_vqdmullh_lane_s16 (int16x1_t a, int16x4_t b)\n+int32_t\n+test_vqdmullh_lane_s16 (int16_t a, int16x4_t b)\n {\n   return vqdmullh_lane_s16 (a, b, 3);\n }\n \n /* { dg-final { scan-assembler-times \"\\\\tsqdmull\\\\td\\[0-9\\]+, s\\[0-9\\]+, s\\[0-9\\]+\" 1 } } */\n \n int64_t\n-test_vqdmulls_s32 (int32x1_t a, int32x1_t b)\n+test_vqdmulls_s32 (int32_t a, int32_t b)\n {\n   return vqdmulls_s32 (a, b);\n }\n \n /* { dg-final { scan-assembler-times \"\\\\tsqdmull\\\\td\\[0-9\\]+, s\\[0-9\\]+, v\" 1 } } */\n \n int64x1_t\n-test_vqdmulls_lane_s32 (int32x1_t a, int32x2_t b)\n+test_vqdmulls_lane_s32 (int32_t a, int32x2_t b)\n {\n   return vqdmulls_lane_s32 (a, b, 1);\n }\n \n /* { dg-final { scan-assembler-times \"\\\\tsqrdmulh\\\\th\\[0-9\\]+, h\\[0-9\\]+, h\\[0-9\\]+\" 1 } } */\n \n-int16x1_t\n-test_vqrdmulhh_s16 (int16x1_t a, int16x1_t b)\n+int16_t\n+test_vqrdmulhh_s16 (int16_t a, int16_t b)\n {\n   return vqrdmulhh_s16 (a, b);\n }\n \n /* { dg-final { scan-assembler-times \"\\\\tsqrdmulh\\\\th\\[0-9\\]+, h\\[0-9\\]+, v\" 1 } } */\n \n-int16x1_t\n-test_vqrdmulhh_lane_s16 (int16x1_t a, int16x4_t b)\n+int16_t\n+test_vqrdmulhh_lane_s16 (int16_t a, int16x4_t b)\n {\n   return vqrdmulhh_lane_s16 (a, b, 3);\n }\n \n /* { dg-final { scan-assembler-times \"\\\\tsqrdmulh\\\\ts\\[0-9\\]+, s\\[0-9\\]+, s\\[0-9\\]+\" 1 } } */\n \n-int32x1_t\n-test_vqrdmulhs_s32 (int32x1_t a, int32x1_t b)\n+int32_t\n+test_vqrdmulhs_s32 (int32_t a, int32_t b)\n {\n   return vqrdmulhs_s32 (a, b);\n }\n \n /* { dg-final { scan-assembler-times \"\\\\tsqrdmulh\\\\ts\\[0-9\\]+, s\\[0-9\\]+, v\" 1 } } */\n \n-int32x1_t\n-test_vqrdmulhs_lane_s32 (int32x1_t a, int32x2_t b)\n+int32_t\n+test_vqrdmulhs_lane_s32 (int32_t a, int32x2_t b)\n {\n   return vqrdmulhs_lane_s32 (a, b, 1);\n }\n \n /* { dg-final { scan-assembler-times \"\\\\tsuqadd\\\\tb\\[0-9\\]+\" 1 } } */\n \n-int8x1_t\n-test_vuqaddb_s8 (int8x1_t a, int8x1_t b)\n+int8_t\n+test_vuqaddb_s8 (int8_t a, int8_t b)\n {\n   return vuqaddb_s8 (a, b);\n }\n \n /* { dg-final { scan-assembler-times \"\\\\tsuqadd\\\\th\\[0-9\\]+\" 1 } } */\n \n-int16x1_t\n-test_vuqaddh_s16 (int16x1_t a, int8x1_t b)\n+int16_t\n+test_vuqaddh_s16 (int16_t a, int8_t b)\n {\n   return vuqaddh_s16 (a, b);\n }\n \n /* { dg-final { scan-assembler-times \"\\\\tsuqadd\\\\ts\\[0-9\\]+\" 1 } } */\n \n-int32x1_t\n-test_vuqadds_s32 (int32x1_t a, int8x1_t b)\n+int32_t\n+test_vuqadds_s32 (int32_t a, int8_t b)\n {\n   return vuqadds_s32 (a, b);\n }\n@@ -573,24 +573,24 @@ test_vuqaddd_s64 (int64_t a, uint64_t b)\n \n /* { dg-final { scan-assembler-times \"\\\\tusqadd\\\\tb\\[0-9\\]+\" 1 } } */\n \n-uint8x1_t\n-test_vsqaddb_u8 (uint8x1_t a, int8x1_t b)\n+uint8_t\n+test_vsqaddb_u8 (uint8_t a, int8_t b)\n {\n   return vsqaddb_u8 (a, b);\n }\n \n /* { dg-final { scan-assembler-times \"\\\\tusqadd\\\\th\\[0-9\\]+\" 1 } } */\n \n-uint16x1_t\n-test_vsqaddh_u16 (uint16x1_t a, int8x1_t b)\n+uint16_t\n+test_vsqaddh_u16 (uint16_t a, int8_t b)\n {\n   return vsqaddh_u16 (a, b);\n }\n \n /* { dg-final { scan-assembler-times \"\\\\tusqadd\\\\ts\\[0-9\\]+\" 1 } } */\n \n-uint32x1_t\n-test_vsqadds_u32 (uint32x1_t a, int8x1_t b)\n+uint32_t\n+test_vsqadds_u32 (uint32_t a, int8_t b)\n {\n   return vsqadds_u32 (a, b);\n }\n@@ -605,119 +605,119 @@ test_vsqaddd_u64 (uint64_t a, int64_t b)\n \n /* { dg-final { scan-assembler-times \"\\\\tsqabs\\\\tb\\[0-9\\]+\" 1 } } */\n \n-int8x1_t\n-test_vqabsb_s8 (int8x1_t a)\n+int8_t\n+test_vqabsb_s8 (int8_t a)\n {\n   return vqabsb_s8 (a);\n }\n \n /* { dg-final { scan-assembler-times \"\\\\tsqabs\\\\th\\[0-9\\]+\" 1 } } */\n \n-int16x1_t\n-test_vqabsh_s16 (int16x1_t a)\n+int16_t\n+test_vqabsh_s16 (int16_t a)\n {\n   return vqabsh_s16 (a);\n }\n \n /* { dg-final { scan-assembler-times \"\\\\tsqabs\\\\ts\\[0-9\\]+\" 1 } } */\n \n-int32x1_t\n-test_vqabss_s32 (int32x1_t a)\n+int32_t\n+test_vqabss_s32 (int32_t a)\n {\n   return vqabss_s32 (a);\n }\n \n /* { dg-final { scan-assembler-times \"\\\\tsqneg\\\\tb\\[0-9\\]+\" 1 } } */\n \n-int8x1_t\n-test_vqnegb_s8 (int8x1_t a)\n+int8_t\n+test_vqnegb_s8 (int8_t a)\n {\n   return vqnegb_s8 (a);\n }\n \n /* { dg-final { scan-assembler-times \"\\\\tsqneg\\\\th\\[0-9\\]+\" 1 } } */\n \n-int16x1_t\n-test_vqnegh_s16 (int16x1_t a)\n+int16_t\n+test_vqnegh_s16 (int16_t a)\n {\n   return vqnegh_s16 (a);\n }\n \n /* { dg-final { scan-assembler-times \"\\\\tsqneg\\\\ts\\[0-9\\]+\" 1 } } */\n \n-int32x1_t\n-test_vqnegs_s32 (int32x1_t a)\n+int32_t\n+test_vqnegs_s32 (int32_t a)\n {\n   return vqnegs_s32 (a);\n }\n \n /* { dg-final { scan-assembler-times \"\\\\tsqxtun\\\\tb\\[0-9\\]+\" 1 } } */\n \n-int8x1_t\n-test_vqmovunh_s16 (int16x1_t a)\n+int8_t\n+test_vqmovunh_s16 (int16_t a)\n {\n   return vqmovunh_s16 (a);\n }\n \n /* { dg-final { scan-assembler-times \"\\\\tsqxtun\\\\th\\[0-9\\]+\" 1 } } */\n \n-int16x1_t\n-test_vqmovuns_s32 (int32x1_t a)\n+int16_t\n+test_vqmovuns_s32 (int32_t a)\n {\n   return vqmovuns_s32 (a);\n }\n \n /* { dg-final { scan-assembler-times \"\\\\tsqxtun\\\\ts\\[0-9\\]+\" 1 } } */\n \n-int32x1_t\n+int32_t\n test_vqmovund_s64 (int64_t a)\n {\n   return vqmovund_s64 (a);\n }\n \n /* { dg-final { scan-assembler-times \"\\\\tsqxtn\\\\tb\\[0-9\\]+\" 1 } } */\n \n-int8x1_t\n-test_vqmovnh_s16 (int16x1_t a)\n+int8_t\n+test_vqmovnh_s16 (int16_t a)\n {\n   return vqmovnh_s16 (a);\n }\n \n /* { dg-final { scan-assembler-times \"\\\\tsqxtn\\\\th\\[0-9\\]+\" 1 } } */\n \n-int16x1_t\n-test_vqmovns_s32 (int32x1_t a)\n+int16_t\n+test_vqmovns_s32 (int32_t a)\n {\n   return vqmovns_s32 (a);\n }\n \n /* { dg-final { scan-assembler-times \"\\\\tsqxtn\\\\ts\\[0-9\\]+\" 1 } } */\n \n-int32x1_t\n+int32_t\n test_vqmovnd_s64 (int64_t a)\n {\n   return vqmovnd_s64 (a);\n }\n \n /* { dg-final { scan-assembler-times \"\\\\tuqxtn\\\\tb\\[0-9\\]+\" 1 } } */\n \n-uint8x1_t\n-test_vqmovnh_u16 (uint16x1_t a)\n+uint8_t\n+test_vqmovnh_u16 (uint16_t a)\n {\n   return vqmovnh_u16 (a);\n }\n \n /* { dg-final { scan-assembler-times \"\\\\tuqxtn\\\\th\\[0-9\\]+\" 1 } } */\n \n-uint16x1_t\n-test_vqmovns_u32 (uint32x1_t a)\n+uint16_t\n+test_vqmovns_u32 (uint32_t a)\n {\n   return vqmovns_u32 (a);\n }\n \n /* { dg-final { scan-assembler-times \"\\\\tuqxtn\\\\ts\\[0-9\\]+\" 1 } } */\n \n-uint32x1_t\n+uint32_t\n test_vqmovnd_u64 (uint64_t a)\n {\n   return vqmovnd_u64 (a);\n@@ -760,24 +760,24 @@ test_vqsubd_u64 (uint64_t a, uint64_t b)\n \n /* { dg-final { scan-assembler-times \"\\\\tuqsub\\\\ts\\[0-9\\]+\" 1 } } */\n \n-uint32x1_t\n-test_vqsubs_u32 (uint32x1_t a, uint32x1_t b)\n+uint32_t\n+test_vqsubs_u32 (uint32_t a, uint32_t b)\n {\n   return vqsubs_u32 (a, b);\n }\n \n /* { dg-final { scan-assembler-times \"\\\\tuqsub\\\\th\\[0-9\\]+\" 1 } } */\n \n-uint16x1_t\n-test_vqsubh_u16 (uint16x1_t a, uint16x1_t b)\n+uint16_t\n+test_vqsubh_u16 (uint16_t a, uint16_t b)\n {\n   return vqsubh_u16 (a, b);\n }\n \n /* { dg-final { scan-assembler-times \"\\\\tuqsub\\\\tb\\[0-9\\]+\" 1 } } */\n \n-uint8x1_t\n-test_vqsubb_u8 (uint8x1_t a, uint8x1_t b)\n+uint8_t\n+test_vqsubb_u8 (uint8_t a, uint8_t b)\n {\n   return vqsubb_u8 (a, b);\n }\n@@ -792,24 +792,24 @@ test_vqsubd_s64 (int64_t a, int64_t b)\n \n /* { dg-final { scan-assembler-times \"\\\\tsqsub\\\\ts\\[0-9\\]+\" 1 } } */\n \n-int32x1_t\n-test_vqsubs_s32 (int32x1_t a, int32x1_t b)\n+int32_t\n+test_vqsubs_s32 (int32_t a, int32_t b)\n {\n   return vqsubs_s32 (a, b);\n }\n \n /* { dg-final { scan-assembler-times \"\\\\tsqsub\\\\th\\[0-9\\]+\" 1 } } */\n \n-int16x1_t\n-test_vqsubh_s16 (int16x1_t a, int16x1_t b)\n+int16_t\n+test_vqsubh_s16 (int16_t a, int16_t b)\n {\n   return vqsubh_s16 (a, b);\n }\n \n /* { dg-final { scan-assembler-times \"\\\\tsqsub\\\\tb\\[0-9\\]+\" 1 } } */\n \n-int8x1_t\n-test_vqsubb_s8 (int8x1_t a, int8x1_t b)\n+int8_t\n+test_vqsubb_s8 (int8_t a, int8_t b)\n {\n   return vqsubb_s8 (a, b);\n }\n@@ -915,24 +915,24 @@ test_vrsrad_n_u64 (uint64_t a, uint64_t b)\n \n /* { dg-final { scan-assembler-times \"\\\\tsqrshl\\\\tb\\[0-9\\]+\" 1 } } */\n \n-int8x1_t\n-test_vqrshlb_s8 (int8x1_t a, int8x1_t b)\n+int8_t\n+test_vqrshlb_s8 (int8_t a, int8_t b)\n {\n   return vqrshlb_s8 (a, b);\n }\n \n /* { dg-final { scan-assembler-times \"\\\\tsqrshl\\\\th\\[0-9\\]+\" 1 } } */\n \n-int16x1_t\n-test_vqrshlh_s16 (int16x1_t a, int16x1_t b)\n+int16_t\n+test_vqrshlh_s16 (int16_t a, int16_t b)\n {\n   return vqrshlh_s16 (a, b);\n }\n \n /* { dg-final { scan-assembler-times \"\\\\tsqrshl\\\\ts\\[0-9\\]+\" 1 } } */\n \n-int32x1_t\n-test_vqrshls_s32 (int32x1_t a, int32x1_t b)\n+int32_t\n+test_vqrshls_s32 (int32_t a, int32_t b)\n {\n   return vqrshls_s32 (a, b);\n }\n@@ -947,24 +947,24 @@ test_vqrshld_s64 (int64_t a, int64_t b)\n \n /* { dg-final { scan-assembler-times \"\\\\tuqrshl\\\\tb\\[0-9\\]+\" 1 } } */\n \n-uint8x1_t\n-test_vqrshlb_u8 (uint8x1_t a, uint8x1_t b)\n+uint8_t\n+test_vqrshlb_u8 (uint8_t a, uint8_t b)\n {\n   return vqrshlb_u8 (a, b);\n }\n \n /* { dg-final { scan-assembler-times \"\\\\tuqrshl\\\\th\\[0-9\\]+\" 1 } } */\n \n-uint16x1_t\n-test_vqrshlh_u16 (uint16x1_t a, uint16x1_t b)\n+uint16_t\n+test_vqrshlh_u16 (uint16_t a, uint16_t b)\n {\n   return vqrshlh_u16 (a, b);\n }\n \n /* { dg-final { scan-assembler-times \"\\\\tuqrshl\\\\ts\\[0-9\\]+\" 1 } } */\n \n-uint32x1_t\n-test_vqrshls_u32 (uint32x1_t a, uint32x1_t b)\n+uint32_t\n+test_vqrshls_u32 (uint32_t a, uint32_t b)\n {\n   return vqrshls_u32 (a, b);\n }\n@@ -979,24 +979,24 @@ test_vqrshld_u64 (uint64_t a, uint64_t b)\n \n /* { dg-final { scan-assembler-times \"\\\\tsqshlu\\\\tb\\[0-9\\]+\" 1 } } */\n \n-int8x1_t\n-test_vqshlub_n_s8 (int8x1_t a)\n+int8_t\n+test_vqshlub_n_s8 (int8_t a)\n {\n   return vqshlub_n_s8 (a, 3);\n }\n \n /* { dg-final { scan-assembler-times \"\\\\tsqshlu\\\\th\\[0-9\\]+\" 1 } } */\n \n-int16x1_t\n-test_vqshluh_n_s16 (int16x1_t a)\n+int16_t\n+test_vqshluh_n_s16 (int16_t a)\n {\n   return vqshluh_n_s16 (a, 4);\n }\n \n /* { dg-final { scan-assembler-times \"\\\\tsqshlu\\\\ts\\[0-9\\]+\" 1 } } */\n \n-int32x1_t\n-test_vqshlus_n_s32 (int32x1_t a)\n+int32_t\n+test_vqshlus_n_s32 (int32_t a)\n {\n   return vqshlus_n_s32 (a, 5);\n }\n@@ -1011,42 +1011,42 @@ test_vqshlud_n_s64 (int64_t a)\n \n /* { dg-final { scan-assembler-times \"\\\\tsqshl\\\\tb\\[0-9\\]+\" 2 } } */\n \n-int8x1_t\n-test_vqshlb_s8 (int8x1_t a, int8x1_t b)\n+int8_t\n+test_vqshlb_s8 (int8_t a, int8_t b)\n {\n   return vqshlb_s8 (a, b);\n }\n \n-int8x1_t\n-test_vqshlb_n_s8 (int8x1_t a)\n+int8_t\n+test_vqshlb_n_s8 (int8_t a)\n {\n   return vqshlb_n_s8 (a, 2);\n }\n \n /* { dg-final { scan-assembler-times \"\\\\tsqshl\\\\th\\[0-9\\]+\" 2 } } */\n \n-int16x1_t\n-test_vqshlh_s16 (int16x1_t a, int16x1_t b)\n+int16_t\n+test_vqshlh_s16 (int16_t a, int16_t b)\n {\n   return vqshlh_s16 (a, b);\n }\n \n-int16x1_t\n-test_vqshlh_n_s16 (int16x1_t a)\n+int16_t\n+test_vqshlh_n_s16 (int16_t a)\n {\n   return vqshlh_n_s16 (a, 3);\n }\n \n /* { dg-final { scan-assembler-times \"\\\\tsqshl\\\\ts\\[0-9\\]+\" 2 } } */\n \n-int32x1_t\n-test_vqshls_s32 (int32x1_t a, int32x1_t b)\n+int32_t\n+test_vqshls_s32 (int32_t a, int32_t b)\n {\n   return vqshls_s32 (a, b);\n }\n \n-int32x1_t\n-test_vqshls_n_s32 (int32x1_t a)\n+int32_t\n+test_vqshls_n_s32 (int32_t a)\n {\n   return vqshls_n_s32 (a, 4);\n }\n@@ -1067,42 +1067,42 @@ test_vqshld_n_s64 (int64_t a)\n \n /* { dg-final { scan-assembler-times \"\\\\tuqshl\\\\tb\\[0-9\\]+\" 2 } } */\n \n-uint8x1_t\n-test_vqshlb_u8 (uint8x1_t a, uint8x1_t b)\n+uint8_t\n+test_vqshlb_u8 (uint8_t a, uint8_t b)\n {\n   return vqshlb_u8 (a, b);\n }\n \n-uint8x1_t\n-test_vqshlb_n_u8 (uint8x1_t a)\n+uint8_t\n+test_vqshlb_n_u8 (uint8_t a)\n {\n   return vqshlb_n_u8 (a, 2);\n }\n \n /* { dg-final { scan-assembler-times \"\\\\tuqshl\\\\th\\[0-9\\]+\" 2 } } */\n \n-uint16x1_t\n-test_vqshlh_u16 (uint16x1_t a, uint16x1_t b)\n+uint16_t\n+test_vqshlh_u16 (uint16_t a, uint16_t b)\n {\n   return vqshlh_u16 (a, b);\n }\n \n-uint16x1_t\n-test_vqshlh_n_u16 (uint16x1_t a)\n+uint16_t\n+test_vqshlh_n_u16 (uint16_t a)\n {\n   return vqshlh_n_u16 (a, 3);\n }\n \n /* { dg-final { scan-assembler-times \"\\\\tuqshl\\\\ts\\[0-9\\]+\" 2 } } */\n \n-uint32x1_t\n-test_vqshls_u32 (uint32x1_t a, uint32x1_t b)\n+uint32_t\n+test_vqshls_u32 (uint32_t a, uint32_t b)\n {\n   return vqshls_u32 (a, b);\n }\n \n-uint32x1_t\n-test_vqshls_n_u32 (uint32x1_t a)\n+uint32_t\n+test_vqshls_n_u32 (uint32_t a)\n {\n   return vqshls_n_u32 (a, 4);\n }\n@@ -1123,143 +1123,143 @@ test_vqshld_n_u64 (uint64_t a)\n \n /* { dg-final { scan-assembler-times \"\\\\tsqshrun\\\\tb\\[0-9\\]+\" 1 } } */\n \n-int8x1_t\n-test_vqshrunh_n_s16 (int16x1_t a)\n+int8_t\n+test_vqshrunh_n_s16 (int16_t a)\n {\n   return vqshrunh_n_s16 (a, 2);\n }\n \n /* { dg-final { scan-assembler-times \"\\\\tsqshrun\\\\th\\[0-9\\]+\" 1 } } */\n \n-int16x1_t\n-test_vqshruns_n_s32 (int32x1_t a)\n+int16_t\n+test_vqshruns_n_s32 (int32_t a)\n {\n   return vqshruns_n_s32 (a, 3);\n }\n \n /* { dg-final { scan-assembler-times \"\\\\tsqshrun\\\\ts\\[0-9\\]+\" 1 } } */\n \n-int32x1_t\n+int32_t\n test_vqshrund_n_s64 (int64_t a)\n {\n   return vqshrund_n_s64 (a, 4);\n }\n \n /* { dg-final { scan-assembler-times \"\\\\tsqrshrun\\\\tb\\[0-9\\]+\" 1 } } */\n \n-int8x1_t\n-test_vqrshrunh_n_s16 (int16x1_t a)\n+int8_t\n+test_vqrshrunh_n_s16 (int16_t a)\n {\n   return vqrshrunh_n_s16 (a, 2);\n }\n \n /* { dg-final { scan-assembler-times \"\\\\tsqrshrun\\\\th\\[0-9\\]+\" 1 } } */\n \n-int16x1_t\n-test_vqrshruns_n_s32 (int32x1_t a)\n+int16_t\n+test_vqrshruns_n_s32 (int32_t a)\n {\n   return vqrshruns_n_s32 (a, 3);\n }\n \n /* { dg-final { scan-assembler-times \"\\\\tsqrshrun\\\\ts\\[0-9\\]+\" 1 } } */\n \n-int32x1_t\n+int32_t\n test_vqrshrund_n_s64 (int64_t a)\n {\n   return vqrshrund_n_s64 (a, 4);\n }\n \n /* { dg-final { scan-assembler-times \"\\\\tsqshrn\\\\tb\\[0-9\\]+\" 1 } } */\n \n-int8x1_t\n-test_vqshrnh_n_s16 (int16x1_t a)\n+int8_t\n+test_vqshrnh_n_s16 (int16_t a)\n {\n   return vqshrnh_n_s16 (a, 2);\n }\n \n /* { dg-final { scan-assembler-times \"\\\\tsqshrn\\\\th\\[0-9\\]+\" 1 } } */\n \n-int16x1_t\n-test_vqshrns_n_s32 (int32x1_t a)\n+int16_t\n+test_vqshrns_n_s32 (int32_t a)\n {\n   return vqshrns_n_s32 (a, 3);\n }\n \n /* { dg-final { scan-assembler-times \"\\\\tsqshrn\\\\ts\\[0-9\\]+\" 1 } } */\n \n-int32x1_t\n+int32_t\n test_vqshrnd_n_s64 (int64_t a)\n {\n   return vqshrnd_n_s64 (a, 4);\n }\n \n /* { dg-final { scan-assembler-times \"\\\\tuqshrn\\\\tb\\[0-9\\]+\" 1 } } */\n \n-uint8x1_t\n-test_vqshrnh_n_u16 (uint16x1_t a)\n+uint8_t\n+test_vqshrnh_n_u16 (uint16_t a)\n {\n   return vqshrnh_n_u16 (a, 2);\n }\n \n /* { dg-final { scan-assembler-times \"\\\\tuqshrn\\\\th\\[0-9\\]+\" 1 } } */\n \n-uint16x1_t\n-test_vqshrns_n_u32 (uint32x1_t a)\n+uint16_t\n+test_vqshrns_n_u32 (uint32_t a)\n {\n   return vqshrns_n_u32 (a, 3);\n }\n \n /* { dg-final { scan-assembler-times \"\\\\tuqshrn\\\\ts\\[0-9\\]+\" 1 } } */\n \n-uint32x1_t\n+uint32_t\n test_vqshrnd_n_u64 (uint64_t a)\n {\n   return vqshrnd_n_u64 (a, 4);\n }\n \n /* { dg-final { scan-assembler-times \"\\\\tsqrshrn\\\\tb\\[0-9\\]+\" 1 } } */\n \n-int8x1_t\n-test_vqrshrnh_n_s16 (int16x1_t a)\n+int8_t\n+test_vqrshrnh_n_s16 (int16_t a)\n {\n   return vqrshrnh_n_s16 (a, 2);\n }\n \n /* { dg-final { scan-assembler-times \"\\\\tsqrshrn\\\\th\\[0-9\\]+\" 1 } } */\n \n-int16x1_t\n-test_vqrshrns_n_s32 (int32x1_t a)\n+int16_t\n+test_vqrshrns_n_s32 (int32_t a)\n {\n   return vqrshrns_n_s32 (a, 3);\n }\n \n /* { dg-final { scan-assembler-times \"\\\\tsqrshrn\\\\ts\\[0-9\\]+\" 1 } } */\n \n-int32x1_t\n+int32_t\n test_vqrshrnd_n_s64 (int64_t a)\n {\n   return vqrshrnd_n_s64 (a, 4);\n }\n \n /* { dg-final { scan-assembler-times \"\\\\tuqrshrn\\\\tb\\[0-9\\]+\" 1 } } */\n \n-uint8x1_t\n-test_vqrshrnh_n_u16 (uint16x1_t a)\n+uint8_t\n+test_vqrshrnh_n_u16 (uint16_t a)\n {\n   return vqrshrnh_n_u16 (a, 2);\n }\n \n /* { dg-final { scan-assembler-times \"\\\\tuqrshrn\\\\th\\[0-9\\]+\" 1 } } */\n \n-uint16x1_t\n-test_vqrshrns_n_u32 (uint32x1_t a)\n+uint16_t\n+test_vqrshrns_n_u32 (uint32_t a)\n {\n   return vqrshrns_n_u32 (a, 3);\n }\n \n /* { dg-final { scan-assembler-times \"\\\\tuqrshrn\\\\ts\\[0-9\\]+\" 1 } } */\n \n-uint32x1_t\n+uint32_t\n test_vqrshrnd_n_u64 (uint64_t a)\n {\n   return vqrshrnd_n_u64 (a, 4);"}, {"sha": "9ca041cb813e26f5430aa696761e38d06ce2cc03", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqdmlalh_lane_s16.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02a0ec4a8d8102b3f5f8ef1350bb65cf6c1d22e6/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlalh_lane_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02a0ec4a8d8102b3f5f8ef1350bb65cf6c1d22e6/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlalh_lane_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlalh_lane_s16.c?ref=02a0ec4a8d8102b3f5f8ef1350bb65cf6c1d22e6", "patch": "@@ -5,8 +5,8 @@\n \n #include \"arm_neon.h\"\n \n-int32x1_t\n-t_vqdmlalh_lane_s16 (int32x1_t a, int16x1_t b, int16x4_t c)\n+int32_t\n+t_vqdmlalh_lane_s16 (int32_t a, int16_t b, int16x4_t c)\n {\n   return vqdmlalh_lane_s16 (a, b, c, 0);\n }"}, {"sha": "b3bbc951ceff7458984ee575bd7ddd897cdda69b", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqdmlslh_lane_s16.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02a0ec4a8d8102b3f5f8ef1350bb65cf6c1d22e6/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlslh_lane_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02a0ec4a8d8102b3f5f8ef1350bb65cf6c1d22e6/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlslh_lane_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlslh_lane_s16.c?ref=02a0ec4a8d8102b3f5f8ef1350bb65cf6c1d22e6", "patch": "@@ -5,8 +5,8 @@\n \n #include \"arm_neon.h\"\n \n-int32x1_t\n-t_vqdmlslh_lane_s16 (int32x1_t a, int16x1_t b, int16x4_t c)\n+int32_t\n+t_vqdmlslh_lane_s16 (int32_t a, int16_t b, int16x4_t c)\n {\n   return vqdmlslh_lane_s16 (a, b, c, 0);\n }"}, {"sha": "c3761dfd09001ab88ba1c3f4b59bb460ecef99a0", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqdmullh_lane_s16.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02a0ec4a8d8102b3f5f8ef1350bb65cf6c1d22e6/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmullh_lane_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02a0ec4a8d8102b3f5f8ef1350bb65cf6c1d22e6/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmullh_lane_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmullh_lane_s16.c?ref=02a0ec4a8d8102b3f5f8ef1350bb65cf6c1d22e6", "patch": "@@ -5,8 +5,8 @@\n \n #include \"arm_neon.h\"\n \n-int32x1_t\n-t_vqdmullh_lane_s16 (int16x1_t a, int16x4_t b)\n+int32_t\n+t_vqdmullh_lane_s16 (int16_t a, int16x4_t b)\n {\n   return vqdmullh_lane_s16 (a, b, 0);\n }"}, {"sha": "6ed8e3a0b8a1f4c8a189eb45ab31956e1248d370", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqdmulls_lane_s32.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02a0ec4a8d8102b3f5f8ef1350bb65cf6c1d22e6/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmulls_lane_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02a0ec4a8d8102b3f5f8ef1350bb65cf6c1d22e6/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmulls_lane_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmulls_lane_s32.c?ref=02a0ec4a8d8102b3f5f8ef1350bb65cf6c1d22e6", "patch": "@@ -6,7 +6,7 @@\n #include \"arm_neon.h\"\n \n int64x1_t\n-t_vqdmulls_lane_s32 (int32x1_t a, int32x2_t b)\n+t_vqdmulls_lane_s32 (int32_t a, int32x2_t b)\n {\n   return vqdmulls_lane_s32 (a, b, 0);\n }"}]}