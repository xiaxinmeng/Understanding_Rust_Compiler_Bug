{"sha": "40fb9c89e1599b2f13d1403820a9e0fb2c1129c1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDBmYjljODllMTU5OWIyZjEzZDE0MDM4MjBhOWUwZmIyYzExMjljMQ==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2017-01-31T01:03:15Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2017-01-31T01:03:15Z"}, "message": "[PR63238] output alignment debug information\n\nOutput DWARFv5+ DW_AT_alignment for non-default alignment of\nvariables, fields and types.\n\nfor gcc/ChangeLog\n\n\tPR debug/63238\n\t* dwarf2out.c (clone_as_declaration): Drop DW_AT_alignment.\n\t(add_alignment_attribute): New.\n\t(base_type_die): Add alignment attribute.\n\t(subrange_type_die): Likewise.\n\t(modified_type_die): Likewise.\n\t(gen_array_type_die): Likewise.\n\t(gen_descr_array_type_die: Likewise.\n\t(gen_enumeration_type_die): Likewise.\n\t(gen_subprogram_die): Likewise.\n\t(gen_variable_die): Likewise.\n\t(gen_field_die): Likewise.\n\t(gen_ptr_to_mbr_type_die): Likewise.\n\t(gen_struct_or_union_type_die): Likewise.\n\t(gen_subroutine_type_die): Likewise.\n\t(gen_typedef_die): Likewise.\n\t(base_type_cmp): Compare alignment attribute.\n\nfor gcc/testsuite/ChangeLog\n\n\tPR debug/63238\n\t* gcc.dg/debug/dwarf2/align-1.c: New.\n\t* gcc.dg/debug/dwarf2/align-2.c: New.\n\t* gcc.dg/debug/dwarf2/align-3.c: New.\n\t* gcc.dg/debug/dwarf2/align-4.c: New.\n\t* gcc.dg/debug/dwarf2/align-5.c: New.\n\t* gcc.dg/debug/dwarf2/align-6.c: New.\n\t* gcc.dg/debug/dwarf2/align-as-1.c: New.\n\t* g++.dg/debug/dwarf2/align-1.C: New.\n\t* g++.dg/debug/dwarf2/align-2.C: New.\n\t* g++.dg/debug/dwarf2/align-3.C: New.\n\t* g++.dg/debug/dwarf2/align-4.C: New.\n\t* g++.dg/debug/dwarf2/align-5.C: New.\n\t* g++.dg/debug/dwarf2/align-6.C: New.\n\nFrom-SVN: r245052", "tree": {"sha": "bd7e18a3bfffb6f7f868945825933f23ce1b6d9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bd7e18a3bfffb6f7f868945825933f23ce1b6d9a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/40fb9c89e1599b2f13d1403820a9e0fb2c1129c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40fb9c89e1599b2f13d1403820a9e0fb2c1129c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40fb9c89e1599b2f13d1403820a9e0fb2c1129c1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40fb9c89e1599b2f13d1403820a9e0fb2c1129c1/comments", "author": null, "committer": null, "parents": [{"sha": "8db29d88f3e8d5fc43b25d9e0049c25f6bfb74d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8db29d88f3e8d5fc43b25d9e0049c25f6bfb74d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8db29d88f3e8d5fc43b25d9e0049c25f6bfb74d1"}], "stats": {"total": 200, "additions": 194, "deletions": 6}, "files": [{"sha": "eed607a8d1fcd748243032232e619b16b713b725", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40fb9c89e1599b2f13d1403820a9e0fb2c1129c1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40fb9c89e1599b2f13d1403820a9e0fb2c1129c1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=40fb9c89e1599b2f13d1403820a9e0fb2c1129c1", "patch": "@@ -1,3 +1,23 @@\n+2017-01-30  Alexandre Oliva <aoliva@redhat.com>\n+\n+\tPR debug/63238\n+\t* dwarf2out.c (clone_as_declaration): Drop DW_AT_alignment.\n+\t(add_alignment_attribute): New.\n+\t(base_type_die): Add alignment attribute.\n+\t(subrange_type_die): Likewise.\n+\t(modified_type_die): Likewise.\n+\t(gen_array_type_die): Likewise.\n+\t(gen_descr_array_type_die: Likewise.\n+\t(gen_enumeration_type_die): Likewise.\n+\t(gen_subprogram_die): Likewise.\n+\t(gen_variable_die): Likewise.\n+\t(gen_field_die): Likewise.\n+\t(gen_ptr_to_mbr_type_die): Likewise.\n+\t(gen_struct_or_union_type_die): Likewise.\n+\t(gen_subroutine_type_die): Likewise.\n+\t(gen_typedef_die): Likewise.\n+\t(base_type_cmp): Compare alignment attribute.\n+\n 2017-01-30  Aaron Sawdey  <acsawdey@linux.vnet.ibm.com>\n \n \tPR target/79170"}, {"sha": "cfb00b8db6bb1ca118e7b68c5490588a69a477d3", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 70, "deletions": 6, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40fb9c89e1599b2f13d1403820a9e0fb2c1129c1/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40fb9c89e1599b2f13d1403820a9e0fb2c1129c1/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=40fb9c89e1599b2f13d1403820a9e0fb2c1129c1", "patch": "@@ -3510,6 +3510,7 @@ static void add_bound_info (dw_die_ref, enum dwarf_attribute, tree,\n \t\t\t    struct loc_descr_context *);\n static void add_subscript_info (dw_die_ref, tree, bool);\n static void add_byte_size_attribute (dw_die_ref, tree);\n+static void add_alignment_attribute (dw_die_ref, tree);\n static inline void add_bit_offset_attribute (dw_die_ref, tree,\n \t\t\t\t\t     struct vlr_context *);\n static void add_bit_size_attribute (dw_die_ref, tree);\n@@ -7706,6 +7707,7 @@ clone_as_declaration (dw_die_ref die)\n           add_dwarf_attr (clone, a);\n           break;\n         case DW_AT_byte_size:\n+\tcase DW_AT_alignment:\n         default:\n           break;\n         }\n@@ -12106,6 +12108,8 @@ base_type_die (tree type, bool reverse)\n     add_AT_unsigned (base_type_result, DW_AT_endianity,\n \t\t     BYTES_BIG_ENDIAN ? DW_END_little : DW_END_big);\n \n+  add_alignment_attribute (base_type_result, type);\n+\n   if (fpt_used)\n     {\n       switch (fpt_info.scale_factor_kind)\n@@ -12269,6 +12273,8 @@ subrange_type_die (tree type, tree low, tree high, tree bias,\n       add_AT_unsigned (subrange_die, DW_AT_byte_size, size_in_bytes);\n     }\n \n+  add_alignment_attribute (subrange_die, type);\n+\n   if (low)\n     add_bound_info (subrange_die, DW_AT_lower_bound, low, NULL);\n   if (high)\n@@ -12586,6 +12592,7 @@ modified_type_die (tree type, int cv_quals, bool reverse,\n \n       add_AT_unsigned (mod_type_die, DW_AT_byte_size,\n \t\t       simple_type_size_in_bits (type) / BITS_PER_UNIT);\n+      add_alignment_attribute (mod_type_die, type);\n       item_type = TREE_TYPE (type);\n \n       addr_space_t as = TYPE_ADDR_SPACE (item_type);\n@@ -19946,6 +19953,37 @@ add_byte_size_attribute (dw_die_ref die, tree tree_node)\n     add_AT_unsigned (die, DW_AT_byte_size, size);\n }\n \n+/* Add a DW_AT_alignment attribute to DIE with TREE_NODE's non-default\n+   alignment.  */\n+\n+static void\n+add_alignment_attribute (dw_die_ref die, tree tree_node)\n+{\n+  if (dwarf_version < 5 && dwarf_strict)\n+    return;\n+\n+  unsigned align;\n+\n+  if (DECL_P (tree_node))\n+    {\n+      if (!DECL_USER_ALIGN (tree_node))\n+\treturn;\n+\n+      align = DECL_ALIGN_UNIT (tree_node);\n+    }\n+  else if (TYPE_P (tree_node))\n+    {\n+      if (!TYPE_USER_ALIGN (tree_node))\n+\treturn;\n+\n+      align = TYPE_ALIGN_UNIT (tree_node);\n+    }\n+  else\n+    gcc_unreachable ();\n+\n+  add_AT_unsigned (die, DW_AT_alignment, align);\n+}\n+\n /* For a FIELD_DECL node which represents a bit-field, output an attribute\n    which specifies the distance in bits from the highest order bit of the\n    \"containing object\" for the bit-field to the highest order bit of the\n@@ -20765,6 +20803,8 @@ gen_array_type_die (tree type, dw_die_ref context_die)\n \n   if (get_AT (array_die, DW_AT_name))\n     add_pubtype (type, array_die);\n+\n+  add_alignment_attribute (array_die, type);\n }\n \n /* After all arguments are created, adjust any DW_TAG_string_type\n@@ -20904,6 +20944,8 @@ gen_descr_array_type_die (tree type, struct array_descr_info *info,\n \n   if (get_AT (array_die, DW_AT_name))\n     add_pubtype (type, array_die);\n+\n+  add_alignment_attribute (array_die, type);\n }\n \n #if 0\n@@ -21013,6 +21055,7 @@ gen_enumeration_type_die (tree type, dw_die_ref context_die)\n \n       TREE_ASM_WRITTEN (type) = 1;\n       add_byte_size_attribute (type_die, type);\n+      add_alignment_attribute (type_die, type);\n       if (dwarf_version >= 3 || !dwarf_strict)\n \t{\n \t  tree underlying = lang_hooks.types.enum_underlying_base_type (type);\n@@ -21071,6 +21114,8 @@ gen_enumeration_type_die (tree type, dw_die_ref context_die)\n   else\n     add_AT_flag (type_die, DW_AT_declaration, 1);\n \n+  add_alignment_attribute (type_die, type);\n+\n   add_pubtype (type, type_die);\n \n   return type_die;\n@@ -21971,6 +22016,8 @@ gen_subprogram_die (tree decl, dw_die_ref context_die)\n       if (TREE_THIS_VOLATILE (decl) && (dwarf_version >= 5 || !dwarf_strict))\n \tadd_AT_flag (subr_die, DW_AT_noreturn, 1);\n \n+      add_alignment_attribute (subr_die, decl);\n+\n       add_accessibility_attribute (subr_die, decl);\n     }\n \n@@ -22695,6 +22742,7 @@ gen_variable_die (tree decl, tree origin, dw_die_ref context_die)\n       add_type_attribute (var_die, TREE_TYPE (decl_or_origin),\n \t\t\t  decl_quals (decl_or_origin), false,\n \t\t\t  context_die);\n+      add_alignment_attribute (var_die, decl);\n       add_AT_flag (var_die, DW_AT_external, 1);\n       if (loc)\n \t{\n@@ -22822,6 +22870,8 @@ gen_variable_die (tree decl, tree origin, dw_die_ref context_die)\n       if (DECL_ARTIFICIAL (decl))\n \tadd_AT_flag (var_die, DW_AT_artificial, 1);\n \n+      add_alignment_attribute (var_die, decl);\n+\n       add_accessibility_attribute (var_die, decl);\n     }\n \n@@ -23186,6 +23236,8 @@ gen_field_die (tree decl, struct vlr_context *ctx, dw_die_ref context_die)\n       add_bit_offset_attribute (decl_die, decl, ctx);\n     }\n \n+  add_alignment_attribute (decl_die, decl);\n+\n   /* If we have a variant part offset, then we are supposed to process a member\n      of a QUAL_UNION_TYPE, which is how we represent variant parts in\n      trees.  */\n@@ -23261,6 +23313,7 @@ gen_ptr_to_mbr_type_die (tree type, dw_die_ref context_die)\n \t\t  lookup_type_die (TYPE_OFFSET_BASETYPE (type)));\n   add_type_attribute (ptr_die, TREE_TYPE (type), TYPE_UNQUALIFIED, false,\n \t\t      context_die);\n+  add_alignment_attribute (ptr_die, type);\n \n   if (TREE_CODE (TREE_TYPE (type)) != FUNCTION_TYPE\n       && TREE_CODE (TREE_TYPE (type)) != METHOD_TYPE)\n@@ -24139,6 +24192,7 @@ gen_struct_or_union_type_die (tree type, dw_die_ref context_die,\n \t this type is expressed in terms of this type itself.  */\n       TREE_ASM_WRITTEN (type) = 1;\n       add_byte_size_attribute (type_die, type);\n+      add_alignment_attribute (type_die, type);\n       if (TYPE_STUB_DECL (type) != NULL_TREE)\n \t{\n \t  add_src_coords_attributes (type_die, TYPE_STUB_DECL (type));\n@@ -24196,6 +24250,7 @@ gen_subroutine_type_die (tree type, dw_die_ref context_die)\n   add_prototyped_attribute (subr_die, type);\n   add_type_attribute (subr_die, return_type, TYPE_UNQUALIFIED, false,\n \t\t      context_die);\n+  add_alignment_attribute (subr_die, type);\n   gen_formal_types_die (type, subr_die);\n \n   if (get_AT (subr_die, DW_AT_name))\n@@ -24231,7 +24286,10 @@ gen_typedef_die (tree decl, dw_die_ref context_die)\n     add_abstract_origin_attribute (type_die, origin);\n   else\n     {\n-      tree type;\n+      tree type = TREE_TYPE (decl);\n+\n+      if (type == error_mark_node)\n+\treturn;\n \n       add_name_and_src_coords_attributes (type_die, decl);\n       if (DECL_ORIGINAL_TYPE (decl))\n@@ -24246,11 +24304,6 @@ gen_typedef_die (tree decl, dw_die_ref context_die)\n \t}\n       else\n \t{\n-\t  type = TREE_TYPE (decl);\n-\n-\t  if (type == error_mark_node)\n-\t    return;\n-\n \t  if (is_naming_typedef_decl (TYPE_NAME (type)))\n \t    {\n \t      /* Here, we are in the case of decl being a typedef naming\n@@ -24289,6 +24342,10 @@ gen_typedef_die (tree decl, dw_die_ref context_die)\n \t   created.  */\n \tequate_type_number_to_die (type, type_die);\n \n+      type = TREE_TYPE (decl);\n+\n+      add_alignment_attribute (type_die, type);\n+\n       add_accessibility_attribute (type_die, decl);\n     }\n \n@@ -27969,6 +28026,7 @@ base_type_cmp (const void *x, const void *y)\n   dw_die_ref dy = *(const dw_die_ref *) y;\n   unsigned int byte_size1, byte_size2;\n   unsigned int encoding1, encoding2;\n+  unsigned int align1, align2;\n   if (dx->die_mark > dy->die_mark)\n     return -1;\n   if (dx->die_mark < dy->die_mark)\n@@ -27985,6 +28043,12 @@ base_type_cmp (const void *x, const void *y)\n     return 1;\n   if (encoding1 > encoding2)\n     return -1;\n+  align1 = get_AT_unsigned (dx, DW_AT_alignment);\n+  align2 = get_AT_unsigned (dy, DW_AT_alignment);\n+  if (align1 < align2)\n+    return 1;\n+  if (align1 > align2)\n+    return -1;\n   return 0;\n }\n "}, {"sha": "8210eae17ba688bfbd4b88c7c878486eb6dafe47", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40fb9c89e1599b2f13d1403820a9e0fb2c1129c1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40fb9c89e1599b2f13d1403820a9e0fb2c1129c1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=40fb9c89e1599b2f13d1403820a9e0fb2c1129c1", "patch": "@@ -1,3 +1,20 @@\n+2017-01-30  Alexandre Oliva <aoliva@redhat.com>\n+\n+\tPR debug/63238\n+\t* gcc.dg/debug/dwarf2/align-1.c: New.\n+\t* gcc.dg/debug/dwarf2/align-2.c: New.\n+\t* gcc.dg/debug/dwarf2/align-3.c: New.\n+\t* gcc.dg/debug/dwarf2/align-4.c: New.\n+\t* gcc.dg/debug/dwarf2/align-5.c: New.\n+\t* gcc.dg/debug/dwarf2/align-6.c: New.\n+\t* gcc.dg/debug/dwarf2/align-as-1.c: New.\n+\t* g++.dg/debug/dwarf2/align-1.C: New.\n+\t* g++.dg/debug/dwarf2/align-2.C: New.\n+\t* g++.dg/debug/dwarf2/align-3.C: New.\n+\t* g++.dg/debug/dwarf2/align-4.C: New.\n+\t* g++.dg/debug/dwarf2/align-5.C: New.\n+\t* g++.dg/debug/dwarf2/align-6.C: New.\n+\n 2017-01-30  Aaron Sawdey  <acsawdey@linux.vnet.ibm.com>\n \n \tPR target/79170"}, {"sha": "58b773179cb5236949d3a84a1cfd11eee30693cd", "filename": "gcc/testsuite/g++.dg/debug/dwarf2/align-1.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40fb9c89e1599b2f13d1403820a9e0fb2c1129c1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Falign-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40fb9c89e1599b2f13d1403820a9e0fb2c1129c1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Falign-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Falign-1.C?ref=40fb9c89e1599b2f13d1403820a9e0fb2c1129c1", "patch": "@@ -0,0 +1,5 @@\n+// { dg-do compile }\n+// { dg-options \"-O -g -dA\" }\n+// { dg-final { scan-assembler-times \" DW_AT_alignment\" 1 { xfail { powerpc-ibm-aix* } } } }\n+\n+int __attribute__((__aligned__(64))) i;"}, {"sha": "31eed4a51416178e8c2976d0c57f37fe18be0cd8", "filename": "gcc/testsuite/g++.dg/debug/dwarf2/align-2.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40fb9c89e1599b2f13d1403820a9e0fb2c1129c1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Falign-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40fb9c89e1599b2f13d1403820a9e0fb2c1129c1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Falign-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Falign-2.C?ref=40fb9c89e1599b2f13d1403820a9e0fb2c1129c1", "patch": "@@ -0,0 +1,6 @@\n+// { dg-do compile }\n+// { dg-options \"-O -g -dA\" }\n+// { dg-final { scan-assembler-times \" DW_AT_alignment\" 1 { xfail { powerpc-ibm-aix* } } } }\n+\n+typedef int __attribute__((__aligned__(64))) i_t;\n+i_t i;"}, {"sha": "328ea0d1ae3038b8b4f822b61047c74e3902b2fe", "filename": "gcc/testsuite/g++.dg/debug/dwarf2/align-3.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40fb9c89e1599b2f13d1403820a9e0fb2c1129c1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Falign-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40fb9c89e1599b2f13d1403820a9e0fb2c1129c1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Falign-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Falign-3.C?ref=40fb9c89e1599b2f13d1403820a9e0fb2c1129c1", "patch": "@@ -0,0 +1,7 @@\n+// { dg-do compile }\n+// { dg-options \"-O -g -dA\" }\n+// { dg-final { scan-assembler-times \" DW_AT_alignment\" 1 { xfail { powerpc-ibm-aix* } } } }\n+\n+typedef int int_t;\n+typedef int_t __attribute__((__aligned__(64))) i_t;\n+i_t i;"}, {"sha": "31e9e81b62e338eebc8766db4b2cffc05a0b6f31", "filename": "gcc/testsuite/g++.dg/debug/dwarf2/align-4.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40fb9c89e1599b2f13d1403820a9e0fb2c1129c1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Falign-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40fb9c89e1599b2f13d1403820a9e0fb2c1129c1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Falign-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Falign-4.C?ref=40fb9c89e1599b2f13d1403820a9e0fb2c1129c1", "patch": "@@ -0,0 +1,7 @@\n+// { dg-do compile }\n+// { dg-options \"-O -g -dA\" }\n+// { dg-final { scan-assembler-times \" DW_AT_alignment\" 2 { xfail { powerpc-ibm-aix* } } } }\n+\n+struct tt {\n+  int __attribute__((__aligned__(64))) i;\n+} t;"}, {"sha": "2116646390292665540396bd7f17e19069f8eaae", "filename": "gcc/testsuite/g++.dg/debug/dwarf2/align-5.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40fb9c89e1599b2f13d1403820a9e0fb2c1129c1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Falign-5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40fb9c89e1599b2f13d1403820a9e0fb2c1129c1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Falign-5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Falign-5.C?ref=40fb9c89e1599b2f13d1403820a9e0fb2c1129c1", "patch": "@@ -0,0 +1,7 @@\n+// { dg-do compile }\n+// { dg-options \"-O -g -dA\" }\n+// { dg-final { scan-assembler-times \" DW_AT_alignment\" 1 { xfail { powerpc-ibm-aix* } } } }\n+\n+struct tt {\n+  int i;\n+} __attribute__((__aligned__(64))) t;"}, {"sha": "e8fc43f6e90088b24211531fd542c2a05abd364a", "filename": "gcc/testsuite/g++.dg/debug/dwarf2/align-6.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40fb9c89e1599b2f13d1403820a9e0fb2c1129c1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Falign-6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40fb9c89e1599b2f13d1403820a9e0fb2c1129c1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Falign-6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Falign-6.C?ref=40fb9c89e1599b2f13d1403820a9e0fb2c1129c1", "patch": "@@ -0,0 +1,9 @@\n+// { dg-do compile }\n+// { dg-options \"-O -g -dA\" }\n+// { dg-final { scan-assembler-times \" DW_AT_alignment\" 1 { xfail { powerpc-ibm-aix* } } } }\n+\n+struct tt {\n+  int i;\n+};\n+\n+struct tt __attribute__((__aligned__(64))) t;"}, {"sha": "58b773179cb5236949d3a84a1cfd11eee30693cd", "filename": "gcc/testsuite/gcc.dg/debug/dwarf2/align-1.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40fb9c89e1599b2f13d1403820a9e0fb2c1129c1/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Falign-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40fb9c89e1599b2f13d1403820a9e0fb2c1129c1/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Falign-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Falign-1.c?ref=40fb9c89e1599b2f13d1403820a9e0fb2c1129c1", "patch": "@@ -0,0 +1,5 @@\n+// { dg-do compile }\n+// { dg-options \"-O -g -dA\" }\n+// { dg-final { scan-assembler-times \" DW_AT_alignment\" 1 { xfail { powerpc-ibm-aix* } } } }\n+\n+int __attribute__((__aligned__(64))) i;"}, {"sha": "31eed4a51416178e8c2976d0c57f37fe18be0cd8", "filename": "gcc/testsuite/gcc.dg/debug/dwarf2/align-2.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40fb9c89e1599b2f13d1403820a9e0fb2c1129c1/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Falign-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40fb9c89e1599b2f13d1403820a9e0fb2c1129c1/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Falign-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Falign-2.c?ref=40fb9c89e1599b2f13d1403820a9e0fb2c1129c1", "patch": "@@ -0,0 +1,6 @@\n+// { dg-do compile }\n+// { dg-options \"-O -g -dA\" }\n+// { dg-final { scan-assembler-times \" DW_AT_alignment\" 1 { xfail { powerpc-ibm-aix* } } } }\n+\n+typedef int __attribute__((__aligned__(64))) i_t;\n+i_t i;"}, {"sha": "328ea0d1ae3038b8b4f822b61047c74e3902b2fe", "filename": "gcc/testsuite/gcc.dg/debug/dwarf2/align-3.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40fb9c89e1599b2f13d1403820a9e0fb2c1129c1/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Falign-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40fb9c89e1599b2f13d1403820a9e0fb2c1129c1/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Falign-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Falign-3.c?ref=40fb9c89e1599b2f13d1403820a9e0fb2c1129c1", "patch": "@@ -0,0 +1,7 @@\n+// { dg-do compile }\n+// { dg-options \"-O -g -dA\" }\n+// { dg-final { scan-assembler-times \" DW_AT_alignment\" 1 { xfail { powerpc-ibm-aix* } } } }\n+\n+typedef int int_t;\n+typedef int_t __attribute__((__aligned__(64))) i_t;\n+i_t i;"}, {"sha": "31e9e81b62e338eebc8766db4b2cffc05a0b6f31", "filename": "gcc/testsuite/gcc.dg/debug/dwarf2/align-4.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40fb9c89e1599b2f13d1403820a9e0fb2c1129c1/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Falign-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40fb9c89e1599b2f13d1403820a9e0fb2c1129c1/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Falign-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Falign-4.c?ref=40fb9c89e1599b2f13d1403820a9e0fb2c1129c1", "patch": "@@ -0,0 +1,7 @@\n+// { dg-do compile }\n+// { dg-options \"-O -g -dA\" }\n+// { dg-final { scan-assembler-times \" DW_AT_alignment\" 2 { xfail { powerpc-ibm-aix* } } } }\n+\n+struct tt {\n+  int __attribute__((__aligned__(64))) i;\n+} t;"}, {"sha": "2116646390292665540396bd7f17e19069f8eaae", "filename": "gcc/testsuite/gcc.dg/debug/dwarf2/align-5.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40fb9c89e1599b2f13d1403820a9e0fb2c1129c1/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Falign-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40fb9c89e1599b2f13d1403820a9e0fb2c1129c1/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Falign-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Falign-5.c?ref=40fb9c89e1599b2f13d1403820a9e0fb2c1129c1", "patch": "@@ -0,0 +1,7 @@\n+// { dg-do compile }\n+// { dg-options \"-O -g -dA\" }\n+// { dg-final { scan-assembler-times \" DW_AT_alignment\" 1 { xfail { powerpc-ibm-aix* } } } }\n+\n+struct tt {\n+  int i;\n+} __attribute__((__aligned__(64))) t;"}, {"sha": "e8fc43f6e90088b24211531fd542c2a05abd364a", "filename": "gcc/testsuite/gcc.dg/debug/dwarf2/align-6.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40fb9c89e1599b2f13d1403820a9e0fb2c1129c1/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Falign-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40fb9c89e1599b2f13d1403820a9e0fb2c1129c1/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Falign-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Falign-6.c?ref=40fb9c89e1599b2f13d1403820a9e0fb2c1129c1", "patch": "@@ -0,0 +1,9 @@\n+// { dg-do compile }\n+// { dg-options \"-O -g -dA\" }\n+// { dg-final { scan-assembler-times \" DW_AT_alignment\" 1 { xfail { powerpc-ibm-aix* } } } }\n+\n+struct tt {\n+  int i;\n+};\n+\n+struct tt __attribute__((__aligned__(64))) t;"}, {"sha": "6923257e111ad2b30b62ed901588f389ebc7a0ae", "filename": "gcc/testsuite/gcc.dg/debug/dwarf2/align-as-1.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40fb9c89e1599b2f13d1403820a9e0fb2c1129c1/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Falign-as-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40fb9c89e1599b2f13d1403820a9e0fb2c1129c1/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Falign-as-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Falign-as-1.c?ref=40fb9c89e1599b2f13d1403820a9e0fb2c1129c1", "patch": "@@ -0,0 +1,5 @@\n+// { dg-do compile }\n+// { dg-options \"-O -g -dA\" }\n+// { dg-final { scan-assembler-times \" DW_AT_alignment\" 1 { xfail { powerpc-ibm-aix* } } } }\n+\n+int _Alignas(64) i;"}]}