{"sha": "ccef29e83119a42c412fbc9608a1f11ee165db5f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2NlZjI5ZTgzMTE5YTQyYzQxMmZiYzk2MDhhMWYxMWVlMTY1ZGI1Zg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2010-09-07T22:30:33Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-09-07T22:30:33Z"}, "message": "re PR libstdc++/45549 (merge is_iterator into iterator_traits)\n\n2010-09-07  Paolo Carlini  <paolo.carlini@oracle.com>\n\t    Marc Glisse  <marc.glisse@normalesup.org>\n\n\tPR libstdc++/45549\n\t* include/bits/cpp_type_traits.h (__is_iterator_helper): Rename to\n\t__has_iterator_category.\n\t(__is_iterator): Adjust.\n\t* include/bits/stl_iterator_base_types.h (__iterator_traits): Add\n\tin C++0x mode, use the latter.\n\t(iterator_traits): In C++0x mode, derive from the latter.\n\t* include/bits/stl_iterator_base_funcs.h (next, prev): Remove\n\tenable_if on the return type.\n\nCo-Authored-By: Marc Glisse <marc.glisse@normalesup.org>\n\nFrom-SVN: r163977", "tree": {"sha": "bba0a7ff0dc409efd13af6fa76e32782b3690031", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bba0a7ff0dc409efd13af6fa76e32782b3690031"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ccef29e83119a42c412fbc9608a1f11ee165db5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ccef29e83119a42c412fbc9608a1f11ee165db5f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ccef29e83119a42c412fbc9608a1f11ee165db5f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ccef29e83119a42c412fbc9608a1f11ee165db5f/comments", "author": null, "committer": null, "parents": [{"sha": "16c0e295094c8f7721d838378f8b692331576887", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16c0e295094c8f7721d838378f8b692331576887", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16c0e295094c8f7721d838378f8b692331576887"}], "stats": {"total": 63, "additions": 45, "deletions": 18}, "files": [{"sha": "1b66b26b3262825b258f36d852ce3ac866f17420", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccef29e83119a42c412fbc9608a1f11ee165db5f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccef29e83119a42c412fbc9608a1f11ee165db5f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=ccef29e83119a42c412fbc9608a1f11ee165db5f", "patch": "@@ -1,3 +1,16 @@\n+2010-09-07  Paolo Carlini  <paolo.carlini@oracle.com>\n+\t    Marc Glisse  <marc.glisse@normalesup.org>\n+\n+\tPR libstdc++/45549\n+\t* include/bits/cpp_type_traits.h (__is_iterator_helper): Rename to\n+\t__has_iterator_category.\n+\t(__is_iterator): Adjust.\n+\t* include/bits/stl_iterator_base_types.h (__iterator_traits): Add\n+\tin C++0x mode, use the latter.\n+\t(iterator_traits): In C++0x mode, derive from the latter.\n+\t* include/bits/stl_iterator_base_funcs.h (next, prev): Remove\n+\tenable_if on the return type.\n+\n 2010-09-07  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR libstdc++/45398"}, {"sha": "030494665a08a8748cd9478c745dd5146295956f", "filename": "libstdc++-v3/include/bits/cpp_type_traits.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccef29e83119a42c412fbc9608a1f11ee165db5f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcpp_type_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccef29e83119a42c412fbc9608a1f11ee165db5f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcpp_type_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcpp_type_traits.h?ref=ccef29e83119a42c412fbc9608a1f11ee165db5f", "patch": "@@ -415,7 +415,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n #endif\n \n   template<typename _Tp>\n-    class __is_iterator_helper\n+    class __has_iterator_category\n     {\n       typedef char __one;\n       typedef struct { char __arr[2]; } __two;\n@@ -431,14 +431,14 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n         static __two __test(...);\n \n     public:\n-      static const bool __value = (sizeof(__test<_Tp>(0)) == 1\n-\t\t\t\t   || __is_pointer<_Tp>::__value);\n+      static const bool __value = sizeof(__test<_Tp>(0)) == 1;\n     };\n \n   template<typename _Tp>\n     struct __is_iterator\n     {\n-      enum { __value = __is_iterator_helper<_Tp>::__value };\n+      enum { __value = (__has_iterator_category<_Tp>::__value\n+\t\t\t|| __is_pointer<_Tp>::__value) };\n       typedef typename __truth_type<__value>::__type __type;\n     };\n "}, {"sha": "f885ae63f71103c03402bdf0a4823de38dae1727", "filename": "libstdc++-v3/include/bits/stl_iterator_base_funcs.h", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccef29e83119a42c412fbc9608a1f11ee165db5f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_funcs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccef29e83119a42c412fbc9608a1f11ee165db5f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_funcs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_funcs.h?ref=ccef29e83119a42c412fbc9608a1f11ee165db5f", "patch": "@@ -173,18 +173,10 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       std::__advance(__i, __d, std::__iterator_category(__i));\n     }\n \n-_GLIBCXX_END_NAMESPACE\n-\n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n \n-#include <ext/type_traits.h> // For __enable_if and __is_iterator\n-\n-_GLIBCXX_BEGIN_NAMESPACE(std)\n-\n   template<typename _ForwardIterator>\n-    inline typename\n-    __gnu_cxx::__enable_if<__is_iterator<_ForwardIterator>::__value,\n-\t\t\t   _ForwardIterator>::__type\n+    inline _ForwardIterator\n     next(_ForwardIterator __x, typename\n \t iterator_traits<_ForwardIterator>::difference_type __n = 1)\n     {\n@@ -193,18 +185,16 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     }\n \n   template<typename _BidirectionalIterator>\n-    inline typename\n-    __gnu_cxx::__enable_if<__is_iterator<_BidirectionalIterator>::__value,\n-\t\t\t   _BidirectionalIterator>::__type\n+    inline _BidirectionalIterator\n     prev(_BidirectionalIterator __x, typename\n \t iterator_traits<_BidirectionalIterator>::difference_type __n = 1) \n     {\n       std::advance(__x, -__n);\n       return __x;\n     }\n \n-_GLIBCXX_END_NAMESPACE\n-\n #endif // __GXX_EXPERIMENTAL_CXX0X__\n \n+_GLIBCXX_END_NAMESPACE\n+\n #endif /* _STL_ITERATOR_BASE_FUNCS_H */"}, {"sha": "20fee58a0a83ce0a2357dbe0ecc56f0ab4796a65", "filename": "libstdc++-v3/include/bits/stl_iterator_base_types.h", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccef29e83119a42c412fbc9608a1f11ee165db5f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_types.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccef29e83119a42c412fbc9608a1f11ee165db5f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_types.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_types.h?ref=ccef29e83119a42c412fbc9608a1f11ee165db5f", "patch": "@@ -64,6 +64,10 @@\n \n #include <bits/c++config.h>\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+# include <bits/cpp_type_traits.h> // For __has_iterator_category\n+#endif\n+\n _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   /**\n@@ -132,6 +136,25 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n    *  argument.  Specialized versions for pointers and pointers-to-const\n    *  provide tighter, more correct semantics.\n   */\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+  template<typename _Iterator,\n+\t   bool = __has_iterator_category<_Iterator>::__value>\n+    struct __iterator_traits { };\n+\n+  template<typename _Iterator>\n+    struct __iterator_traits<_Iterator, true>\n+    {\n+      typedef typename _Iterator::iterator_category iterator_category;\n+      typedef typename _Iterator::value_type        value_type;\n+      typedef typename _Iterator::difference_type   difference_type;\n+      typedef typename _Iterator::pointer           pointer;\n+      typedef typename _Iterator::reference         reference;\n+    };\n+\n+  template<typename _Iterator>\n+    struct iterator_traits\n+    : public __iterator_traits<_Iterator> { };\n+#else\n   template<typename _Iterator>\n     struct iterator_traits\n     {\n@@ -141,6 +164,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       typedef typename _Iterator::pointer           pointer;\n       typedef typename _Iterator::reference         reference;\n     };\n+#endif\n \n   /// Partial specialization for pointer types.\n   template<typename _Tp>"}]}