{"sha": "2e1c20b1442e4ad7f008739d4ba08f5410032d4f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmUxYzIwYjE0NDJlNGFkN2YwMDg3MzlkNGJhMDhmNTQxMDAzMmQ0Zg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-09-21T15:13:46Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-09-21T15:13:46Z"}, "message": "re PR c++/77651 (c++ -Wno-aligned-new ICEs)\n\n\tPR c++/77651\nc-family/\n\t* c.opt (Waligned-new=): Add RejectNegative.\n\t(faligned-new=): Likewise.  Spelling fix - change\n\taligned_new_threshhold to aligned_new_threshold.\n\t* c-cppbuiltin.c (c_cpp_builtins): Change aligned_new_threshhold\n\tto aligned_new_threshold.\ncp/\n\t* init.c (build_new_1): Don't suggest to use -faligned-new if\n\taligned_new_threshold is non-zero.\n\t(type_has_new_extended_alignment): Change aligned_new_threshhold\n\tto aligned_new_threshold.\n\t* call.c (second_parm_is_size_t, aligned_allocation_fn_p,\n\taligned_deallocation_fn_p, build_op_delete_call): Likewise.\n\t* decl.c (cxx_init_decl_processing): Likewise.\ntestsuite/\n\t* g++.dg/cpp1z/aligned-new6.C: New test.\n\nFrom-SVN: r240317", "tree": {"sha": "763f0b4284cc999dc5746933eedbbba048e098a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/763f0b4284cc999dc5746933eedbbba048e098a1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2e1c20b1442e4ad7f008739d4ba08f5410032d4f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e1c20b1442e4ad7f008739d4ba08f5410032d4f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e1c20b1442e4ad7f008739d4ba08f5410032d4f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e1c20b1442e4ad7f008739d4ba08f5410032d4f/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "aef6a97c0e1463da3fc914b6782c7064dd889a62", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aef6a97c0e1463da3fc914b6782c7064dd889a62", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aef6a97c0e1463da3fc914b6782c7064dd889a62"}], "stats": {"total": 82, "additions": 61, "deletions": 21}, "files": [{"sha": "e10245061aa348c267bbffa4dcd944d96fc1df2d", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e1c20b1442e4ad7f008739d4ba08f5410032d4f/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e1c20b1442e4ad7f008739d4ba08f5410032d4f/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=2e1c20b1442e4ad7f008739d4ba08f5410032d4f", "patch": "@@ -1,3 +1,12 @@\n+2016-09-21  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/77651\n+\t* c.opt (Waligned-new=): Add RejectNegative.\n+\t(faligned-new=): Likewise.  Spelling fix - change\n+\taligned_new_threshhold to aligned_new_threshold.\n+\t* c-cppbuiltin.c (c_cpp_builtins): Change aligned_new_threshhold\n+\tto aligned_new_threshold.\n+\n 2016-09-20  Martin Sebor  <msebor@redhat.com>\n \n \tPR middle-end/49905"}, {"sha": "6f438117966704caba60a28a7021e13558180afa", "filename": "gcc/c-family/c-cppbuiltin.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e1c20b1442e4ad7f008739d4ba08f5410032d4f/gcc%2Fc-family%2Fc-cppbuiltin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e1c20b1442e4ad7f008739d4ba08f5410032d4f/gcc%2Fc-family%2Fc-cppbuiltin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-cppbuiltin.c?ref=2e1c20b1442e4ad7f008739d4ba08f5410032d4f", "patch": "@@ -944,11 +944,11 @@ c_cpp_builtins (cpp_reader *pfile)\n \tcpp_define (pfile, \"__cpp_transactional_memory=210500\");\n       if (flag_sized_deallocation)\n \tcpp_define (pfile, \"__cpp_sized_deallocation=201309\");\n-      if (aligned_new_threshhold)\n+      if (aligned_new_threshold)\n \t{\n \t  cpp_define (pfile, \"__cpp_aligned_new=201606\");\n \t  cpp_define_formatted (pfile, \"__STDCPP_DEFAULT_NEW_ALIGNMENT__=%d\",\n-\t\t\t\taligned_new_threshhold);\n+\t\t\t\taligned_new_threshold);\n \t}\n     }\n   /* Note that we define this for C as well, so that we know if"}, {"sha": "3a02dbb48449406d92a3f6d6c13d0fc04522663b", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e1c20b1442e4ad7f008739d4ba08f5410032d4f/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e1c20b1442e4ad7f008739d4ba08f5410032d4f/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=2e1c20b1442e4ad7f008739d4ba08f5410032d4f", "patch": "@@ -288,7 +288,7 @@ C++ ObjC++ Alias(Waligned-new=,global,none)\n Warn about 'new' of type with extended alignment without -faligned-new.\n \n Waligned-new=\n-C++ ObjC++ Var(warn_aligned_new) Enum(warn_aligned_new_level) Joined Warning LangEnabledBy(C++ ObjC++,Wall,1,0)\n+C++ ObjC++ Var(warn_aligned_new) Enum(warn_aligned_new_level) Joined RejectNegative Warning LangEnabledBy(C++ ObjC++,Wall,1,0)\n -Waligned-new=all Warn even if 'new' uses a class member allocation function.\n \n Wall\n@@ -1071,7 +1071,7 @@ C++ ObjC++ Alias(faligned-new=,1,0)\n Support C++17 allocation of over-aligned types.\n \n faligned-new=\n-C++ ObjC++ Joined Var(aligned_new_threshhold) UInteger Init(-1)\n+C++ ObjC++ Joined RejectNegative Var(aligned_new_threshold) UInteger Init(-1)\n -faligned-new=<N> Use C++17 over-aligned type allocation for alignments greater than N.\n \n fall-virtual"}, {"sha": "6bafde59893a3194843c0e110163414409a97897", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e1c20b1442e4ad7f008739d4ba08f5410032d4f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e1c20b1442e4ad7f008739d4ba08f5410032d4f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2e1c20b1442e4ad7f008739d4ba08f5410032d4f", "patch": "@@ -1,3 +1,14 @@\n+2016-09-21  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/77651\n+\t* init.c (build_new_1): Don't suggest to use -faligned-new if\n+\taligned_new_threshold is non-zero.\n+\t(type_has_new_extended_alignment): Change aligned_new_threshhold\n+\tto aligned_new_threshold.\n+\t* call.c (second_parm_is_size_t, aligned_allocation_fn_p,\n+\taligned_deallocation_fn_p, build_op_delete_call): Likewise.\n+\t* decl.c (cxx_init_decl_processing): Likewise.\n+\n 2016-09-20  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/77626"}, {"sha": "b6f65d2fe0503362d472102bc6e0cb3902bac254", "filename": "gcc/cp/call.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e1c20b1442e4ad7f008739d4ba08f5410032d4f/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e1c20b1442e4ad7f008739d4ba08f5410032d4f/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=2e1c20b1442e4ad7f008739d4ba08f5410032d4f", "patch": "@@ -5965,7 +5965,7 @@ second_parm_is_size_t (tree fn)\n   t = TREE_CHAIN (t);\n   if (t == void_list_node)\n     return true;\n-  if (aligned_new_threshhold && t\n+  if (aligned_new_threshold && t\n       && same_type_p (TREE_VALUE (t), align_type_node)\n       && TREE_CHAIN (t) == void_list_node)\n     return true;\n@@ -5978,7 +5978,7 @@ second_parm_is_size_t (tree fn)\n bool\n aligned_allocation_fn_p (tree t)\n {\n-  if (!aligned_new_threshhold)\n+  if (!aligned_new_threshold)\n     return false;\n \n   tree a = FUNCTION_ARG_CHAIN (t);\n@@ -5992,7 +5992,7 @@ aligned_allocation_fn_p (tree t)\n static bool\n aligned_deallocation_fn_p (tree t)\n {\n-  if (!aligned_new_threshhold)\n+  if (!aligned_new_threshold)\n     return false;\n \n   /* A template instance is never a usual deallocation function,\n@@ -6202,7 +6202,7 @@ build_op_delete_call (enum tree_code code, tree addr, tree size,\n \t       selection process terminates. If more than one preferred\n \t       function is found, all non-preferred functions are eliminated\n \t       from further consideration.  */\n-\t    if (aligned_new_threshhold)\n+\t    if (aligned_new_threshold)\n \t      {\n \t\tbool want_align = type_has_new_extended_alignment (type);\n \t\tbool fn_align = aligned_deallocation_fn_p (fn);"}, {"sha": "921f8d5ffb5cfd3ddff2d425e3726e4379213981", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e1c20b1442e4ad7f008739d4ba08f5410032d4f/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e1c20b1442e4ad7f008739d4ba08f5410032d4f/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=2e1c20b1442e4ad7f008739d4ba08f5410032d4f", "patch": "@@ -4132,16 +4132,16 @@ cxx_init_decl_processing (void)\n   /* Now, C++.  */\n   current_lang_name = lang_name_cplusplus;\n \n-  if (aligned_new_threshhold > 1\n-      && !pow2p_hwi (aligned_new_threshhold))\n+  if (aligned_new_threshold > 1\n+      && !pow2p_hwi (aligned_new_threshold))\n     {\n-      error (\"-faligned-new=%d is not a power of two\", aligned_new_threshhold);\n-      aligned_new_threshhold = 1;\n+      error (\"-faligned-new=%d is not a power of two\", aligned_new_threshold);\n+      aligned_new_threshold = 1;\n     }\n-  if (aligned_new_threshhold == -1)\n-    aligned_new_threshhold = (cxx_dialect >= cxx1z) ? 1 : 0;\n-  if (aligned_new_threshhold == 1)\n-    aligned_new_threshhold = max_align_t_align () / BITS_PER_UNIT;\n+  if (aligned_new_threshold == -1)\n+    aligned_new_threshold = (cxx_dialect >= cxx1z) ? 1 : 0;\n+  if (aligned_new_threshold == 1)\n+    aligned_new_threshold = max_align_t_align () / BITS_PER_UNIT;\n \n   {\n     tree newattrs, extvisattr;\n@@ -4210,7 +4210,7 @@ cxx_init_decl_processing (void)\n \tpush_cp_library_fn (VEC_DELETE_EXPR, deltype, ECF_NOTHROW);\n       }\n \n-    if (aligned_new_threshhold)\n+    if (aligned_new_threshold)\n       {\n \tpush_namespace (std_identifier);\n \ttree align_id = get_identifier (\"align_val_t\");"}, {"sha": "c64ec3f29127ff73be8db65c975407df9f4cd5d0", "filename": "gcc/cp/init.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e1c20b1442e4ad7f008739d4ba08f5410032d4f/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e1c20b1442e4ad7f008739d4ba08f5410032d4f/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=2e1c20b1442e4ad7f008739d4ba08f5410032d4f", "patch": "@@ -2574,8 +2574,8 @@ warn_placement_new_too_small (tree type, tree nelts, tree size, tree oper)\n bool\n type_has_new_extended_alignment (tree t)\n {\n-  return (aligned_new_threshhold\n-\t  && TYPE_ALIGN_UNIT (t) > (unsigned)aligned_new_threshhold);\n+  return (aligned_new_threshold\n+\t  && TYPE_ALIGN_UNIT (t) > (unsigned)aligned_new_threshold);\n }\n \n /* Generate code for a new-expression, including calling the \"operator\n@@ -3026,8 +3026,9 @@ build_new_1 (vec<tree, va_gc> **placement, tree type, tree nelts,\n \t       \"alignment %d\", elt_type, TYPE_ALIGN_UNIT (elt_type));\n       inform (input_location, \"uses %qD, which does not have an alignment \"\n \t      \"parameter\", alloc_fn);\n-      inform (input_location, \"use %<-faligned-new%> to enable C++17 \"\n-\t      \"over-aligned new support\");\n+      if (!aligned_new_threshold)\n+\tinform (input_location, \"use %<-faligned-new%> to enable C++17 \"\n+\t\t\t\t\"over-aligned new support\");\n     }\n \n   /* If we found a simple case of PLACEMENT_EXPR above, then copy it"}, {"sha": "77c63e225fd055d5702a2ce940404692a9dcd0e7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e1c20b1442e4ad7f008739d4ba08f5410032d4f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e1c20b1442e4ad7f008739d4ba08f5410032d4f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2e1c20b1442e4ad7f008739d4ba08f5410032d4f", "patch": "@@ -1,3 +1,8 @@\n+2016-09-21  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/77651\n+\t* g++.dg/cpp1z/aligned-new6.C: New test.\n+\n 2016-09-21  Matthew Wahab  <matthew.wahab@arm.com>\n \n \t* gcc.target/arm/fp16-aapcs-3.c: New."}, {"sha": "0daa54f2fb21654e83736b79f2459e8eaabfd29c", "filename": "gcc/testsuite/g++.dg/cpp1z/aligned-new6.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e1c20b1442e4ad7f008739d4ba08f5410032d4f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Faligned-new6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e1c20b1442e4ad7f008739d4ba08f5410032d4f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Faligned-new6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Faligned-new6.C?ref=2e1c20b1442e4ad7f008739d4ba08f5410032d4f", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/77651\n+// { dg-do run { target { c++11 && c++14_down } } }\n+// { dg-options \"-faligned-new -W -Wall -Wno-aligned-new\" }\n+\n+struct alignas(64) A { int i; };\n+\n+int\n+main ()\n+{\n+  A *p = new A;\n+  if (((__UINTPTR_TYPE__) p) % 64 != 0)\n+    __builtin_abort ();\n+  delete p;\n+}"}]}