{"sha": "96ddac7425dd56d6852f0ad53bf2283d9976aae8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTZkZGFjNzQyNWRkNTZkNjg1MmYwYWQ1M2JmMjI4M2Q5OTc2YWFlOA==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2006-08-20T16:05:05Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2006-08-20T16:05:05Z"}, "message": "random (gamma_distribution<>::_M_initialize, [...]): Add.\n\n2006-08-20  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/tr1/random (gamma_distribution<>::_M_initialize,\n\tgamma_distribution<>::_M_l_d): Add.\n\t(gamma_distribution<>::gamma_distribution(const result_type&),\n\toperator>>(std::basic_istream<>&, gamma_distribution&)): Use it.\n\tinclude/tr1/random.tcc (gamma_distribution<>::_M_initialize):\n\tDefine.\n\t(gamma_distribution<>::operator()): Adjust.\n\n\t* include/tr1/random (geometric_distribution<>::_M_initialize): Add.\n\t(geometric_distribution<>::geometric_distribution(const _RealType&),\n\toperator>>(std::basic_istream<>&, geometric_distribution&)): Use it.\n\nFrom-SVN: r116273", "tree": {"sha": "d1f5682a1a31d6f3f44b62a4391418a3ffd2bf95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d1f5682a1a31d6f3f44b62a4391418a3ffd2bf95"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/96ddac7425dd56d6852f0ad53bf2283d9976aae8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96ddac7425dd56d6852f0ad53bf2283d9976aae8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96ddac7425dd56d6852f0ad53bf2283d9976aae8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96ddac7425dd56d6852f0ad53bf2283d9976aae8/comments", "author": null, "committer": null, "parents": [{"sha": "ffcba5714a04c13509e3751305b6a11124cc542c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffcba5714a04c13509e3751305b6a11124cc542c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ffcba5714a04c13509e3751305b6a11124cc542c"}], "stats": {"total": 87, "additions": 64, "deletions": 23}, "files": [{"sha": "6bf7bd7388458c0d4e4c189b742a11f66346900d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96ddac7425dd56d6852f0ad53bf2283d9976aae8/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96ddac7425dd56d6852f0ad53bf2283d9976aae8/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=96ddac7425dd56d6852f0ad53bf2283d9976aae8", "patch": "@@ -1,3 +1,17 @@\n+2006-08-20  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/tr1/random (gamma_distribution<>::_M_initialize,\n+\tgamma_distribution<>::_M_l_d): Add.\n+\t(gamma_distribution<>::gamma_distribution(const result_type&),\n+\toperator>>(std::basic_istream<>&, gamma_distribution&)): Use it.\n+\tinclude/tr1/random.tcc (gamma_distribution<>::_M_initialize):\n+\tDefine.\n+\t(gamma_distribution<>::operator()): Adjust.\n+\n+\t* include/tr1/random (geometric_distribution<>::_M_initialize): Add.\n+\t(geometric_distribution<>::geometric_distribution(const _RealType&),\n+\toperator>>(std::basic_istream<>&, geometric_distribution&)): Use it.\n+\n 2006-08-18  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/tr1/random (class binomial_distribution<>): Add."}, {"sha": "5254ea6e8b33582e33df8faf9681a3dfd194acc2", "filename": "libstdc++-v3/include/tr1/random", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96ddac7425dd56d6852f0ad53bf2283d9976aae8/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96ddac7425dd56d6852f0ad53bf2283d9976aae8/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom?ref=96ddac7425dd56d6852f0ad53bf2283d9976aae8", "patch": "@@ -1588,9 +1588,10 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n       // constructors and member function\n       explicit\n       geometric_distribution(const _RealType& __p = _RealType(0.5))\n-      : _M_p(__p), _M_log_p(std::log(__p))\n+      : _M_p(__p)\n       {\n \t_GLIBCXX_DEBUG_ASSERT((_M_p > 0.0) && (_M_p < 1.0));\n+\t_M_initialize();\n       }\n \n       /**\n@@ -1639,11 +1640,15 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n \t\t   geometric_distribution& __x)\n         {\n \t  __is >> __x._M_p;\n-\t  __x._M_log_p = std::log(__x._M_p);\n+\t  __x._M_initialize();\n \t  return __is;\n \t}\n \n     private:\n+      void\n+      _M_initialize()\n+      { _M_log_p = std::log(_M_p); }\n+\n       _RealType _M_p;\n       _RealType _M_log_p;\n     };\n@@ -1746,8 +1751,7 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n \n       _RealType _M_mean;\n \n-      // _M_lm_thr hosts either log(mean) or the threshold of the simple\n-      // method.\n+      // Hosts either log(mean) or the threshold of the simple method.\n       _RealType _M_lm_thr;\n #if _GLIBCXX_USE_C99_MATH_TR1\n       _RealType _M_lfm, _M_sm, _M_d, _M_scx, _M_1cx, _M_c2b, _M_cb;\n@@ -2204,6 +2208,7 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n       : _M_alpha(__alpha_val)\n       { \n \t_GLIBCXX_DEBUG_ASSERT(_M_alpha > 0);\n+\t_M_initialize();\n       }\n \n       /**\n@@ -2251,10 +2256,20 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n         friend std::basic_istream<_CharT, _Traits>&\n         operator>>(std::basic_istream<_CharT, _Traits>& __is,\n \t\t   gamma_distribution& __x)\n-        { return __is >> __x._M_alpha; }\n+        {\n+\t  __is >> __x._M_alpha;\n+\t  __x._M_initialize();\n+\t  return __is;\n+\t}\n \n     private:\n+      void\n+      _M_initialize();\n+\n       result_type _M_alpha;\n+\n+      // Hosts either lambda of GB or d of modified Vaduva's.\n+      result_type _M_l_d;\n     };\n \n   /* @} */ // group tr1_random_distributions_continuous"}, {"sha": "e809ba73ab6abec77fbcb5445261fa69ecbd4b9a", "filename": "libstdc++-v3/include/tr1/random.tcc", "status": "modified", "additions": 30, "deletions": 18, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96ddac7425dd56d6852f0ad53bf2283d9976aae8/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96ddac7425dd56d6852f0ad53bf2283d9976aae8/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom.tcc?ref=96ddac7425dd56d6852f0ad53bf2283d9976aae8", "patch": "@@ -1106,11 +1106,10 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n \n \n   /**\n-   * Classic Box-Muller method.\n+   * Polar method due to Marsaglia.\n    *\n-   * Reference:\n-   * Box, G. E. P. and Muller, M. E. \"A Note on the Generation of\n-   * Random Normal Deviates.\" Ann. Math. Stat. 29, 610-611, 1958.\n+   * Devroye, L. \"Non-Uniform Random Variates Generation.\" Springer-Verlag,\n+   * New York, 1986, Ch. V, Sect. 4.4.\n    */\n   template<typename _RealType>\n     template<class _UniformRandomNumberGenerator>\n@@ -1189,6 +1188,18 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n     }\n \n \n+  template<typename _RealType>\n+    void\n+    gamma_distribution<_RealType>::\n+    _M_initialize()\n+    {\n+      if (_M_alpha >= 1)\n+\t_M_l_d = std::sqrt(2 * _M_alpha - 1);\n+      else\n+\t_M_l_d = (std::pow(_M_alpha, _M_alpha / (1 - _M_alpha))\n+\t\t  * (1 - _M_alpha));\n+    }\n+\n   /**\n    * Cheng's rejection algorithm GB for alpha >= 1 and a modification\n    * of Vaduva's rejection from Weibull algorithm due to Devroye for\n@@ -1213,19 +1224,18 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n       {\n \tresult_type __x;\n \n+\tbool __reject;\n \tif (_M_alpha >= 1)\n \t  {\n \t    // alpha - log(4)\n \t    const result_type __b = _M_alpha\n \t      - result_type(1.3862943611198906188344642429163531L);\n-\t    const result_type __l = std::sqrt(2 * _M_alpha - 1);\n-\t    const result_type __c = _M_alpha + __l;\n-\t    const result_type __1l = 1 / __l;\n+\t    const result_type __c = _M_alpha + _M_l_d;\n+\t    const result_type __1l = 1 / _M_l_d;\n \n \t    // 1 + log(9 / 2)\n \t    const result_type __k = 2.5040773967762740733732583523868748L;\n \n-\t    result_type __z, __r;\n \t    do\n \t      {\n \t\tconst result_type __u = __urng();\n@@ -1234,27 +1244,29 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n \t\tconst result_type __y = __1l * std::log(__v / (1 - __v));\n \t\t__x = _M_alpha * std::exp(__y);\n \n-\t\t__z = __u * __v * __v;\n-\t\t__r = __b + __c * __y - __x;\n+\t\tconst result_type __z = __u * __v * __v;\n+\t\tconst result_type __r = __b + __c * __y - __x;\n+\n+\t\t__reject = __r < result_type(4.5) * __z - __k;\n+\t\tif (__reject)\n+\t\t  __reject = __r < std::log(__z);\n \t      }\n-\t    while (__r < result_type(4.5) * __z - __k\n-\t\t   && __r < std::log(__z));\n+\t    while (__reject);\n \t  }\n \telse\n \t  {\n \t    const result_type __c = 1 / _M_alpha;\n-\t    const result_type __d =\n-\t      std::pow(_M_alpha, _M_alpha / (1 - _M_alpha)) * (1 - _M_alpha);\n \n-\t    result_type __z, __e;\n \t    do\n \t      {\n-\t\t__z = -std::log(__urng());\n-\t\t__e = -std::log(__urng());\n+\t\tconst result_type __z = -std::log(__urng());\n+\t\tconst result_type __e = -std::log(__urng());\n \n \t\t__x = std::pow(__z, __c);\n+\n+\t\t__reject = __z + __e < _M_l_d + __x;\n \t      }\n-\t    while (__z + __e < __d + __x);\n+\t    while (__reject);\n \t  }\n \n \treturn __x;"}]}