{"sha": "2dc740101e1ac5a1505528e54806fb7d7dde17d9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmRjNzQwMTAxZTFhYzVhMTUwNTUyOGU1NDgwNmZiN2Q3ZGRlMTdkOQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2008-07-31T10:25:11Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2008-07-31T10:25:11Z"}, "message": "passes.c (init_optimization_passes): Always call pass_early_warn_uninitialized.\n\n2008-07-31  Richard Guenther  <rguenther@suse.de>\n\n\t* passes.c (init_optimization_passes): Always call\n\tpass_early_warn_uninitialized.\n\t* opts.c (decode_options): Do not warn about -Wuninitialized\n\tat -O0.\n\t* doc/invoke.texi (-Wuninitialized): Correct for enabling at -O0.\n\t* doc/passes.texi (Warn for uninitialized variables): Adjust.\n\n\t* gcc.dg/uninit-1-O0.c: New testcase.\n\t* gcc.dg/uninit-2-O0.c: Likewise.\n\t* gcc.dg/uninit-3-O0.c: Likewise.\n\t* gcc.dg/uninit-4-O0.c: Likewise.\n\t* gcc.dg/uninit-5-O0.c: Likewise.\n\t* gcc.dg/uninit-6-O0.c: Likewise.\n\t* gcc.dg/uninit-8-O0.c: Likewise.\n\t* gcc.dg/uninit-9-O0.c: Likewise.\n\t* gcc.dg/uninit-A-O0.c: Likewise.\n\t* gcc.dg/uninit-B-O0.c: Likewise.\n\t* gcc.dg/uninit-C-O0.c: Likewise.\n\t* gcc.dg/uninit-D-O0.c: Likewise.\n\t* gcc.dg/uninit-E-O0.c: Likewise.\n\t* gcc.dg/uninit-F-O0.c: Likewise.\n\t* gcc.dg/uninit-G-O0.c: Likewise.\n\t* gcc.dg/uninit-H-O0.c: Likewise.\n\t* gcc.dg/uninit-I-O0.c: Likewise.\n\t* gcc.dg/uninit-10-O0.c: Likewise.\n\t* gcc.dg/uninit-11-O0.c: Likewise.\n\t* gcc.dg/uninit-12-O0.c: Likewise.\n\t* gcc.dg/uninit-13-O0.c: Likewise.\n\t* gcc.dg/uninit-14-O0.c: Likewise.\n\t* gcc.dg/uninit-15-O0.c: Likewise.\n\t* gcc.dg/Wall.c: Avoid uninitialized warning.\n\t* gcc.dg/Wno-all.c: Likewise.\n\t* gcc.dg/pr3074-1.c: Likewise.\n\nFrom-SVN: r138376", "tree": {"sha": "afc954a72895d46b605daa3cc053cbe20525a974", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/afc954a72895d46b605daa3cc053cbe20525a974"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2dc740101e1ac5a1505528e54806fb7d7dde17d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2dc740101e1ac5a1505528e54806fb7d7dde17d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2dc740101e1ac5a1505528e54806fb7d7dde17d9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2dc740101e1ac5a1505528e54806fb7d7dde17d9/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4d7b9a27a8b97de235afde2267004f636aec8b72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d7b9a27a8b97de235afde2267004f636aec8b72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d7b9a27a8b97de235afde2267004f636aec8b72"}], "stats": {"total": 843, "additions": 816, "deletions": 27}, "files": [{"sha": "cb7a67b651391f7ad165bfb50b959baadad6bd5a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dc740101e1ac5a1505528e54806fb7d7dde17d9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dc740101e1ac5a1505528e54806fb7d7dde17d9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2dc740101e1ac5a1505528e54806fb7d7dde17d9", "patch": "@@ -1,3 +1,12 @@\n+2008-07-31  Richard Guenther  <rguenther@suse.de>\n+\n+\t* passes.c (init_optimization_passes): Always call\n+\tpass_early_warn_uninitialized.\n+\t* opts.c (decode_options): Do not warn about -Wuninitialized\n+\tat -O0.\n+\t* doc/invoke.texi (-Wuninitialized): Correct for enabling at -O0.\n+\t* doc/passes.texi (Warn for uninitialized variables): Adjust.\n+\n 2008-07-31  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/36970"}, {"sha": "33f0018abfe25d5ca5ac1a7faf9fad336d91f6d8", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dc740101e1ac5a1505528e54806fb7d7dde17d9/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dc740101e1ac5a1505528e54806fb7d7dde17d9/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=2dc740101e1ac5a1505528e54806fb7d7dde17d9", "patch": "@@ -2696,7 +2696,7 @@ Options} and @ref{Objective-C and Objective-C++ Dialect Options}.\n -Wstrict-overflow=1  @gol\n -Wswitch  @gol\n -Wtrigraphs  @gol\n--Wuninitialized @r{(only with} @option{-O1} @r{and above)}  @gol\n+-Wuninitialized  @gol\n -Wunknown-pragmas  @gol\n -Wunused-function  @gol\n -Wunused-label     @gol\n@@ -2730,7 +2730,7 @@ name is still supported, but the newer name is more descriptive.)\n -Woverride-init  @gol\n -Wsign-compare  @gol\n -Wtype-limits  @gol\n--Wuninitialized @r{(only with} @option{-O1} @r{and above)}  @gol\n+-Wuninitialized  @gol\n -Wunused-parameter @r{(only with} @option{-Wunused} @r{or} @option{-Wall}@r{)}  @gol\n }\n \n@@ -2892,8 +2892,7 @@ can be disabled with the @option{-Wno-nonnull} option.\n @opindex Winit-self\n @opindex Wno-init-self\n Warn about uninitialized variables which are initialized with themselves.\n-Note this option can only be used with the @option{-Wuninitialized} option,\n-which in turn only works with @option{-O1} and above.\n+Note this option can only be used with the @option{-Wuninitialized} option.\n \n For example, GCC will warn about @code{i} being uninitialized in the\n following snippet only when @option{-Winit-self} has been specified:\n@@ -3176,12 +3175,6 @@ either specify @samp{-Wextra -Wunused} (note that @samp{-Wall} implies\n Warn if an automatic variable is used without first being initialized or\n if a variable may be clobbered by a @code{setjmp} call.\n \n-These warnings are possible only in optimizing compilation,\n-because they require data flow information that is computed only\n-when optimizing.  If you do not specify @option{-O}, you will not get\n-these warnings. Instead, GCC will issue a warning about @option{-Wuninitialized}\n-requiring @option{-O}.\n-\n If you want to warn about code which uses the uninitialized value of the\n variable in its own initializer, use the @option{-Winit-self} option.\n \n@@ -3252,8 +3245,7 @@ Some spurious warnings can be avoided if you declare all the functions\n you use that never return as @code{noreturn}.  @xref{Function\n Attributes}.\n \n-This warning is enabled by @option{-Wall} or @option{-Wextra} in\n-optimizing compilations (@option{-O1} and above).\n+This warning is enabled by @option{-Wall} or @option{-Wextra}.\n \n @item -Wunknown-pragmas\n @opindex Wunknown-pragmas"}, {"sha": "a229538353d06cfb4e948e9d719579c7cda9090d", "filename": "gcc/doc/passes.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dc740101e1ac5a1505528e54806fb7d7dde17d9/gcc%2Fdoc%2Fpasses.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dc740101e1ac5a1505528e54806fb7d7dde17d9/gcc%2Fdoc%2Fpasses.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fpasses.texi?ref=2dc740101e1ac5a1505528e54806fb7d7dde17d9", "patch": "@@ -275,7 +275,7 @@ located in @file{tree-ssa.c} and is described by @code{pass_build_ssa}.\n This pass scans the function for uses of @code{SSA_NAME}s that\n are fed by default definition.  For non-parameter variables, such\n uses are uninitialized.  The pass is run twice, before and after\n-optimization.  In the first pass we only warn for uses that are\n+optimization (if turned on).  In the first pass we only warn for uses that are\n positively uninitialized; in the second pass we warn for uses that\n are possibly uninitialized.  The pass is located in @file{tree-ssa.c}\n and is defined by @code{pass_early_warn_uninitialized} and"}, {"sha": "54512513f425c2f211ee18eb88e39c2cd8187f5e", "filename": "gcc/opts.c", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dc740101e1ac5a1505528e54806fb7d7dde17d9/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dc740101e1ac5a1505528e54806fb7d7dde17d9/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=2dc740101e1ac5a1505528e54806fb7d7dde17d9", "patch": "@@ -1080,13 +1080,6 @@ decode_options (unsigned int argc, const char **argv)\n \t so force it not to be done.  */\n       warn_inline = 0;\n       flag_no_inline = 1;\n-\n-      /* The c_decode_option function and decode_option hook set\n-\t this to `2' if -Wall is used, so we can avoid giving out\n-\t lots of errors for people who don't realize what -Wall does.  */\n-      if (warn_uninitialized == 1)\n-\twarning (OPT_Wuninitialized,\n-\t\t \"-Wuninitialized is not supported without -O\");\n     }\n \n   /* The optimization to partition hot and cold basic blocks into separate"}, {"sha": "c6f6c8a07cd1f96180e601f10ba6ceee7cf6334a", "filename": "gcc/passes.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dc740101e1ac5a1505528e54806fb7d7dde17d9/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dc740101e1ac5a1505528e54806fb7d7dde17d9/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=2dc740101e1ac5a1505528e54806fb7d7dde17d9", "patch": "@@ -544,10 +544,10 @@ init_optimization_passes (void)\n       NEXT_PASS (pass_referenced_vars);\n       NEXT_PASS (pass_reset_cc_flags);\n       NEXT_PASS (pass_build_ssa);\n+      NEXT_PASS (pass_early_warn_uninitialized);\n       NEXT_PASS (pass_all_early_optimizations);\n \t{\n \t  struct opt_pass **p = &pass_all_early_optimizations.pass.sub;\n-\t  NEXT_PASS (pass_early_warn_uninitialized);\n \t  NEXT_PASS (pass_rebuild_cgraph_edges);\n \t  NEXT_PASS (pass_early_inline);\n \t  NEXT_PASS (pass_cleanup_cfg);"}, {"sha": "19000131f6e7aa08ef01e1dfa48e4241a44e80d6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dc740101e1ac5a1505528e54806fb7d7dde17d9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dc740101e1ac5a1505528e54806fb7d7dde17d9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2dc740101e1ac5a1505528e54806fb7d7dde17d9", "patch": "@@ -1,3 +1,32 @@\n+2008-07-31  Richard Guenther  <rguenther@suse.de>\n+\n+\t* gcc.dg/uninit-1-O0.c: New testcase.\n+\t* gcc.dg/uninit-2-O0.c: Likewise.\n+\t* gcc.dg/uninit-3-O0.c: Likewise.\n+\t* gcc.dg/uninit-4-O0.c: Likewise.\n+\t* gcc.dg/uninit-5-O0.c: Likewise.\n+\t* gcc.dg/uninit-6-O0.c: Likewise.\n+\t* gcc.dg/uninit-8-O0.c: Likewise.\n+\t* gcc.dg/uninit-9-O0.c: Likewise.\n+\t* gcc.dg/uninit-A-O0.c: Likewise.\n+\t* gcc.dg/uninit-B-O0.c: Likewise.\n+\t* gcc.dg/uninit-C-O0.c: Likewise.\n+\t* gcc.dg/uninit-D-O0.c: Likewise.\n+\t* gcc.dg/uninit-E-O0.c: Likewise.\n+\t* gcc.dg/uninit-F-O0.c: Likewise.\n+\t* gcc.dg/uninit-G-O0.c: Likewise.\n+\t* gcc.dg/uninit-H-O0.c: Likewise.\n+\t* gcc.dg/uninit-I-O0.c: Likewise.\n+\t* gcc.dg/uninit-10-O0.c: Likewise.\n+\t* gcc.dg/uninit-11-O0.c: Likewise.\n+\t* gcc.dg/uninit-12-O0.c: Likewise.\n+\t* gcc.dg/uninit-13-O0.c: Likewise.\n+\t* gcc.dg/uninit-14-O0.c: Likewise.\n+\t* gcc.dg/uninit-15-O0.c: Likewise.\n+\t* gcc.dg/Wall.c: Avoid uninitialized warning.\n+\t* gcc.dg/Wno-all.c: Likewise.\n+\t* gcc.dg/pr3074-1.c: Likewise.\n+\n 2008-07-31  Arnaud Charlet  <charlet@adacore.com>\n \n \t* gnat.dg/specs/genericppc.ads: New test."}, {"sha": "89848471780eecf95886ee83372891a73f1400d4", "filename": "gcc/testsuite/gcc.dg/Wall.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dc740101e1ac5a1505528e54806fb7d7dde17d9/gcc%2Ftestsuite%2Fgcc.dg%2FWall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dc740101e1ac5a1505528e54806fb7d7dde17d9/gcc%2Ftestsuite%2Fgcc.dg%2FWall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWall.c?ref=2dc740101e1ac5a1505528e54806fb7d7dde17d9", "patch": "@@ -3,8 +3,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-Wall\" } */\n \n-void foo()\n+void foo(int a)\n {\n-  int a;\n   5 * (a == 1) | (a == 2);  /* { dg-warning \"no effect\" \"no effect\" } */\n }"}, {"sha": "de55bbcdacb3d8a4e854f051a4a551cea5b66cef", "filename": "gcc/testsuite/gcc.dg/Wno-all.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dc740101e1ac5a1505528e54806fb7d7dde17d9/gcc%2Ftestsuite%2Fgcc.dg%2FWno-all.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dc740101e1ac5a1505528e54806fb7d7dde17d9/gcc%2Ftestsuite%2Fgcc.dg%2FWno-all.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWno-all.c?ref=2dc740101e1ac5a1505528e54806fb7d7dde17d9", "patch": "@@ -3,9 +3,8 @@\n /* { dg-do compile } */\n /* { dg-options \"-Wall -Wno-all\" } */\n \n-void foo()\n+void foo(int a)\n {\n-  int a;\n   5 * (a == 1) | (a == 2);  /* { dg-bogus \"no effect\" \"no effect\" } */\n }\n "}, {"sha": "4716b79da960a3e2d673197a634d1ad7a31d9108", "filename": "gcc/testsuite/gcc.dg/pr3074-1.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dc740101e1ac5a1505528e54806fb7d7dde17d9/gcc%2Ftestsuite%2Fgcc.dg%2Fpr3074-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dc740101e1ac5a1505528e54806fb7d7dde17d9/gcc%2Ftestsuite%2Fgcc.dg%2Fpr3074-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr3074-1.c?ref=2dc740101e1ac5a1505528e54806fb7d7dde17d9", "patch": "@@ -2,9 +2,8 @@\n /* { dg-do compile } */\n /* { dg-options \"-Wall\" } */\n \n-void foo()\n+void foo(int a)\n {\n-  int a;\n   5 * (a == 1) | (a == 2);  /* { dg-warning \"no effect\" \"no effect\" } */\n }\n "}, {"sha": "4fe5d6b111d5301270f5e8392f80e1ff8a83699a", "filename": "gcc/testsuite/gcc.dg/uninit-1-O0.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dc740101e1ac5a1505528e54806fb7d7dde17d9/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-1-O0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dc740101e1ac5a1505528e54806fb7d7dde17d9/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-1-O0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-1-O0.c?ref=2dc740101e1ac5a1505528e54806fb7d7dde17d9", "patch": "@@ -0,0 +1,30 @@\n+/* Spurious uninitialized variable warnings, case 1.\n+   Taken from cppfiles.c (merge_include_chains) */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wuninitialized\" } */\n+\n+struct list\n+{\n+  struct list *next;\n+  int id;\n+};\n+\n+extern void free (void *);\n+\n+void remove_dupes (struct list *el)\n+{\n+  struct list *p, *q, *r;  /* { dg-bogus \"r\" \"uninitialized variable warning\" } */\n+\n+  for (p = el; p; p = p->next)\n+  {\n+    for (q = el; q != p; q = q->next)\n+      if (q->id == p->id)\n+      {\n+\tr->next = p->next;\n+\tfree (p);\n+\tp = r;\n+\tbreak;\n+      }\n+    r = p;\n+  }\n+}"}, {"sha": "f761ac91c4154b7752bdf92405d8c900791d749a", "filename": "gcc/testsuite/gcc.dg/uninit-10-O0.c", "status": "added", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dc740101e1ac5a1505528e54806fb7d7dde17d9/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-10-O0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dc740101e1ac5a1505528e54806fb7d7dde17d9/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-10-O0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-10-O0.c?ref=2dc740101e1ac5a1505528e54806fb7d7dde17d9", "patch": "@@ -0,0 +1,109 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wall\" } */\n+/* On Alpha EV4, dead code elimination and cfg simplification conspired\n+   to leave the register containing 'C' marked live, though all references\n+   to the variable had been removed.  */\n+\n+struct operand_data\n+{\n+  struct operand_data *next;\n+  int index;\n+  const char *predicate;\n+  const char *constraint;\n+  int mode;\n+  unsigned char n_alternatives;\n+  char address_p;\n+  char strict_low;\n+  char eliminable;\n+  char seen;\n+};\n+\n+struct data\n+{\n+  struct data *next;\n+  const char *name;\n+  const char *template;\n+  int code_number;\n+  int index_number;\n+  int lineno;\n+  int n_operands;\n+  int n_dups;\n+  int n_alternatives;\n+  int operand_number;\n+  int output_format;\n+  struct operand_data operand[40];\n+};\n+\n+extern void message_with_line (int, const char *, ...)\n+     __attribute__ ((__format__ (__printf__, 2, 3)));\n+extern int have_error;\n+\n+extern char *strchr (__const char *__s, int __c) __attribute__ ((__pure__));\n+\n+void\n+validate_insn_alternatives (d)\n+     struct data *d;\n+{\n+  int n = 0, start;\n+\n+  for (start = 0; start < d->n_operands; start++)\n+    if (d->operand[start].n_alternatives > 0)\n+      {\n+        int len, i;\n+        const char *p;\n+        char c;\t /* { dg-bogus \"used uninitialized\" \"uninitialized variable warning\" } */\n+        int which_alternative = 0;\n+        int alternative_count_unsure = 0;\n+\n+        for (p = d->operand[start].constraint; (c = *p); p += len)\n+          {\n+            len = 1;\n+\n+            if (len < 1 || (len > 1 && strchr (\",#*+=&%!0123456789\", c)))\n+              {\n+                message_with_line (d->lineno,\n+                                   \"invalid length %d for char '%c' in alternative %d of operand %d\",\n+                                    len, c, which_alternative, start);\n+                len = 1;\n+                have_error = 1;\n+              }\n+\n+            if (c == ',')\n+              {\n+                which_alternative++;\n+                continue;\n+              }\n+\n+            for (i = 1; i < len; i++)\n+              if (p[i] == '\\0')\n+                {\n+                  message_with_line (d->lineno,\n+                                     \"NUL in alternative %d of operand %d\",\n+                                     which_alternative, start);\n+                  alternative_count_unsure = 1;\n+                  break;\n+                }\n+              else if (strchr (\",#*\", p[i]))\n+                {\n+                  message_with_line (d->lineno,\n+                                     \"'%c' in alternative %d of operand %d\",\n+                                     p[i], which_alternative, start);\n+                  alternative_count_unsure = 1;\n+                }\n+          }\n+        if (alternative_count_unsure)\n+          have_error = 1;\n+        else if (n == 0)\n+          n = d->operand[start].n_alternatives;\n+        else if (n != d->operand[start].n_alternatives)\n+          {\n+            message_with_line (d->lineno,\n+                               \"wrong number of alternatives in operand %d\",\n+                               start);\n+            have_error = 1;\n+          }\n+      }\n+\n+\n+  d->n_alternatives = n;\n+}"}, {"sha": "23af4f69aa06c61f140e3ab4d3924199e1bbd7e5", "filename": "gcc/testsuite/gcc.dg/uninit-11-O0.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dc740101e1ac5a1505528e54806fb7d7dde17d9/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-11-O0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dc740101e1ac5a1505528e54806fb7d7dde17d9/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-11-O0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-11-O0.c?ref=2dc740101e1ac5a1505528e54806fb7d7dde17d9", "patch": "@@ -0,0 +1,42 @@\n+/* Positive test for uninitialized variables.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wuninitialized\" } */\n+\n+int sink;\n+\n+void f1(int parm)\t/* { dg-bogus \"uninitialized\" \"parameter\" } */\n+{\n+  sink = parm;\t\t/* { dg-bogus \"uninitialized\" \"parameter\" } */\n+}\n+\n+void f2(void)\n+{\n+  int x;\n+  sink = x;\t\t/* { dg-warning \"is used\" \"unconditional\" } */\n+}\n+\n+void f3(int p)\n+{\n+  int x;\t\t/* { dg-warning \"may be used\" \"conditional\" { xfail *-*-* } } */\n+  if (p)\n+    x = p;\n+  sink = x;\n+}\n+\n+void f4(int p)\n+{\n+  int x;\t\t/* { dg-bogus \"uninitialized\" \"easy if\" } */\n+  if (p)\n+    x = 1;\n+  else\n+    x = 2;\n+  sink = x;\n+}\n+\n+void f5(void)\n+{\n+  int x, i;\t\t/* { dg-bogus \"uninitialized\" \"easy loop\" } */\n+  for (i = 0; i < 10; ++i)\n+    x = 1;\n+  sink = x;\n+}"}, {"sha": "7c0664e4dfc4f7ffaa47e17c3d773d52f0276f63", "filename": "gcc/testsuite/gcc.dg/uninit-12-O0.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dc740101e1ac5a1505528e54806fb7d7dde17d9/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-12-O0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dc740101e1ac5a1505528e54806fb7d7dde17d9/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-12-O0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-12-O0.c?ref=2dc740101e1ac5a1505528e54806fb7d7dde17d9", "patch": "@@ -0,0 +1,12 @@\n+/* PR 23497 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wuninitialized\" } */\n+\n+typedef _Complex float C;\n+C foo()\n+{\n+  C f;\n+  __real__ f = 0;\n+  __imag__ f = 0;\n+  return f;\n+}"}, {"sha": "af80fa88ca97afbb9a372f0a63db583564d1a634", "filename": "gcc/testsuite/gcc.dg/uninit-13-O0.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dc740101e1ac5a1505528e54806fb7d7dde17d9/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-13-O0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dc740101e1ac5a1505528e54806fb7d7dde17d9/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-13-O0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-13-O0.c?ref=2dc740101e1ac5a1505528e54806fb7d7dde17d9", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wuninitialized\" } */\n+\n+typedef _Complex float C;\n+C foo()\n+{\n+  C f;\n+  __imag__ f = 0;\t/* { dg-warning \"is used\" \"unconditional\" { xfail *-*-* } } */\n+  return f;\n+}"}, {"sha": "abde6ca86e6daa6066208a833c7b5c870541ae99", "filename": "gcc/testsuite/gcc.dg/uninit-14-O0.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dc740101e1ac5a1505528e54806fb7d7dde17d9/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-14-O0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dc740101e1ac5a1505528e54806fb7d7dde17d9/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-14-O0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-14-O0.c?ref=2dc740101e1ac5a1505528e54806fb7d7dde17d9", "patch": "@@ -0,0 +1,20 @@\n+/* PR 24931 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wuninitialized\" } */\n+\n+struct p {\n+        short x, y;\n+};\n+\n+struct s {\n+        int i;\n+        struct p p;\n+};\n+\n+struct s f()\n+{\n+        struct s s;\n+        s.p = (struct p){};\n+        s.i = (s.p.x || s.p.y);\n+        return s;\n+}"}, {"sha": "a3fd2b63ba71f416cfda3d877f1bc26c6c68a09b", "filename": "gcc/testsuite/gcc.dg/uninit-15-O0.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dc740101e1ac5a1505528e54806fb7d7dde17d9/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-15-O0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dc740101e1ac5a1505528e54806fb7d7dde17d9/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-15-O0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-15-O0.c?ref=2dc740101e1ac5a1505528e54806fb7d7dde17d9", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wuninitialized\" } */\n+\n+/* XFAIL for now, the uninitialized pass runs before inlining only at -O0.  */\n+\n+inline int __attribute__((always_inline))\n+foo (int i)\n+{\n+    if (i) return 1; /* { dg-warning \"is used uninitialized\" {} { xfail *-*-* } } */\n+    return 0;\n+}\n+\n+void baz();\n+\n+void bar()\n+{\n+    int j;           /* { dg-message \"was declared here\" {} { xfail *-*-* } } */\n+    for (; foo(j); ++j)\n+        baz();\n+}"}, {"sha": "62a23fa6b64c095ae619a373cf19d8a5a0bf42c0", "filename": "gcc/testsuite/gcc.dg/uninit-2-O0.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dc740101e1ac5a1505528e54806fb7d7dde17d9/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-2-O0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dc740101e1ac5a1505528e54806fb7d7dde17d9/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-2-O0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-2-O0.c?ref=2dc740101e1ac5a1505528e54806fb7d7dde17d9", "patch": "@@ -0,0 +1,52 @@\n+/* Spurious uninitialized variable warnings, case 2.\n+   Taken from cpphash.c (macroexpand) */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wuninitialized\" } */\n+\n+struct definition\n+{\n+  int nargs;\n+  int rest_args;\n+};\n+\n+struct cpp_reader;\n+\n+enum cpp_token\n+{\n+  CPP_EOF, CPP_POP, CPP_COMMA, CPP_RPAREN\n+};\n+\n+extern enum cpp_token macarg (struct cpp_reader *, int);\n+\n+void\n+macroexpand (struct cpp_reader *pfile, struct definition *defn)\n+{\n+  int nargs = defn->nargs;\n+\n+  if (nargs >= 0)\n+    {\n+      enum cpp_token token;  /* { dg-bogus \"token\" \"uninitialized variable warning\" } */\n+      int i, rest_args;\n+      i = 0;\n+      rest_args = 0;\n+      do\n+\t{\n+\t  if (rest_args)\n+\t    continue;\n+\t  if (i < nargs || (nargs == 0 && i == 0))\n+\t    {\n+\t      /* if we are working on last arg which absorbs rest of args... */\n+\t      if (i == nargs - 1 && defn->rest_args)\n+\t\trest_args = 1;\n+\t      token = macarg (pfile, rest_args);\n+\t    }\n+\t  else\n+\t    token = macarg (pfile, 0);\n+\t  if (token == CPP_EOF || token == CPP_POP)\n+\t    return;\n+\n+\t  i++;\n+\t}\n+      while (token == CPP_COMMA);\n+    }\n+}"}, {"sha": "d3dcf14edece29da15d9e07a9ae09eb852c58266", "filename": "gcc/testsuite/gcc.dg/uninit-3-O0.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dc740101e1ac5a1505528e54806fb7d7dde17d9/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-3-O0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dc740101e1ac5a1505528e54806fb7d7dde17d9/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-3-O0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-3-O0.c?ref=2dc740101e1ac5a1505528e54806fb7d7dde17d9", "patch": "@@ -0,0 +1,33 @@\n+/* Spurious uninit variable warnings, case 3.\n+   Inspired by cppexp.c (parse_charconst) */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wuninitialized\" } */\n+\n+extern void error (char *);\n+\n+int\n+parse_charconst (const char *start, const char *end)\n+{\n+  int c; /* { dg-bogus \"c\" \"uninitialized variable warning\" } */\n+  int nchars, retval;\n+\n+  nchars = 0;\n+  retval = 0;\n+  while (start < end)\n+    {\n+      c = *start++;\n+      if (c == '\\'')\n+\tbreak;\n+      nchars++;\n+      retval += c;\n+      retval <<= 8;\n+    }\n+\n+  if (nchars == 0)\n+    return 0;\n+\n+  if (c != '\\'')\n+    error (\"malformed character constant\");\n+\n+  return retval;\n+}"}, {"sha": "0b9aeea7ddbadc9cfe432b09fed3a1fd9d24e206", "filename": "gcc/testsuite/gcc.dg/uninit-4-O0.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dc740101e1ac5a1505528e54806fb7d7dde17d9/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-4-O0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dc740101e1ac5a1505528e54806fb7d7dde17d9/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-4-O0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-4-O0.c?ref=2dc740101e1ac5a1505528e54806fb7d7dde17d9", "patch": "@@ -0,0 +1,52 @@\n+/* Spurious uninit variable warnings, case 4.\n+   Simplified version of cppexp.c (cpp_parse_expr).\n+\n+   This one is really fragile, it gets it right if you take out case\n+   1, or if the structure is replaced by an int, or if the structure\n+   has fewer members (!) */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-Wuninitialized\" } */\n+\n+extern void abort (void);\n+\n+struct operation {\n+    short op;\n+    char rprio;\n+    char flags;\n+    char unsignedp;\n+    long value;\n+};\n+\n+extern struct operation cpp_lex (void);\n+\n+void\n+cpp_parse_expr (void)\n+{\n+  int rprio; /* { dg-bogus \"rprio\" \"uninitialized variable warning PR19833\" } */\n+  struct operation op;\n+\n+  for (;;)\n+    {\n+      op = cpp_lex ();\n+\n+      switch (op.op)\n+\t{\n+\tcase 0:\n+\t  break;\n+\tcase 1:\n+\t  return;\n+\tcase 2:\n+\t  rprio = 1;\n+\t  break;\n+\tdefault:\n+\t  return;\n+\t}\n+\n+      if (op.op == 0)\n+\treturn;\n+\n+      if (rprio != 1)\n+\tabort();\n+    }\n+}"}, {"sha": "d9784b3f76c3dba13f3f666850cff7bd300fd5bb", "filename": "gcc/testsuite/gcc.dg/uninit-5-O0.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dc740101e1ac5a1505528e54806fb7d7dde17d9/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-5-O0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dc740101e1ac5a1505528e54806fb7d7dde17d9/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-5-O0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-5-O0.c?ref=2dc740101e1ac5a1505528e54806fb7d7dde17d9", "patch": "@@ -0,0 +1,39 @@\n+/* Spurious uninitialized-variable warnings.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-Wuninitialized\" } */\n+\n+extern void use(int);\n+extern void foo(void);\n+\n+void\n+func1(int cond)\n+{\n+    int x;  /* { dg-bogus \"x\" \"uninitialized variable warning\" } */\n+\n+    if(cond)\n+\tx = 1;\n+\n+    foo();\n+\n+    if(cond)\n+\tuse(x);\n+}\n+\n+void\n+func2 (int cond)\n+{\n+    int x;  /* { dg-bogus \"x\" \"uninitialized variable warning\" } */\n+    int flag = 0;\n+\n+    if(cond)\n+    {\n+\tx = 1;\n+\tflag = 1;\n+    }\n+\n+    foo();\n+\n+    if(flag)\n+\tuse(x);\n+}"}, {"sha": "e3fefe5e1c5ac154fd3fe53a7a361dec2700e49d", "filename": "gcc/testsuite/gcc.dg/uninit-6-O0.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dc740101e1ac5a1505528e54806fb7d7dde17d9/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-6-O0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dc740101e1ac5a1505528e54806fb7d7dde17d9/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-6-O0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-6-O0.c?ref=2dc740101e1ac5a1505528e54806fb7d7dde17d9", "patch": "@@ -0,0 +1,47 @@\n+/* Spurious uninitialized variable warnings.\n+   This one inspired by java/class.c:build_utf8_ref.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-Wuninitialized\" } */\n+\n+#include <stddef.h>\n+\n+struct tree\n+{\n+    struct tree *car;\n+    struct tree *cdr;\n+    int type, data;\n+};\n+\n+extern void *malloc(size_t);\n+\n+#define INTEGER_T 1\n+#define PTR_T\t  2\n+\n+#define APPEND(TREE, LAST, TYPE, VALUE)\t\t\t\t\\\n+do {\t\t\t\t\t\t\t\t\\\n+     struct tree *tmp = malloc (sizeof (struct tree));\t\t\\\n+     tmp->car = 0; tmp->cdr = 0; tmp->type = TYPE;\t\t\\\n+     tmp->data = VALUE;\t\t\t\t\t\t\\\n+     if (TREE->car)\t\t\t\t\t\t\\\n+\t LAST->cdr = tmp;\t\t\t\t\t\\\n+     else\t\t\t\t\t\t\t\\\n+\t TREE->car = tmp;\t\t\t\t\t\\\n+     LAST = tmp;\t\t\t\t\t\t\\\n+} while(0)\n+ \n+struct tree *\n+make_something(int a, int b, int c)\n+{\n+    struct tree *rv;\n+    struct tree *field;\n+\n+    rv = malloc (sizeof (struct tree));\n+    rv->car = 0;\n+\n+    APPEND(rv, field, INTEGER_T, a);  /* { dg-bogus \"field\" \"uninitialized variable warning\" { xfail *-*-* } } */\n+    APPEND(rv, field, PTR_T, b);\n+    APPEND(rv, field, INTEGER_T, c);\n+\n+    return rv;\n+}"}, {"sha": "b386896c7eaad8969cff0e82cd9883aba3d387d0", "filename": "gcc/testsuite/gcc.dg/uninit-8-O0.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dc740101e1ac5a1505528e54806fb7d7dde17d9/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-8-O0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dc740101e1ac5a1505528e54806fb7d7dde17d9/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-8-O0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-8-O0.c?ref=2dc740101e1ac5a1505528e54806fb7d7dde17d9", "patch": "@@ -0,0 +1,32 @@\n+/* Uninitialized variable warning tests...\n+   Inspired by part of optabs.c:expand_binop.\n+   May be the same as uninit-1.c.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-Wuninitialized\" } */\n+\n+#include <limits.h>\n+\n+void\n+add_bignums (int *out, int *x, int *y)\n+{\n+    int p, sum;\n+    int carry; /* { dg-bogus \"carry\" \"uninitialized variable warning\" } */\n+\n+    p = 0;\n+    for (; *x; x++, y++, out++, p++)\n+    {\n+\tif (p)\n+\t    sum = *x + *y + carry;\n+\telse\n+\t    sum = *x + *y;\n+\n+\tif (sum < 0)\n+\t{\n+\t    carry = 1;\n+\t    sum -= INT_MAX;\n+\t}\n+\telse\n+\t    carry = 0;\n+    }\n+}"}, {"sha": "493dd68d908743c3586974e9e9626c074635cee8", "filename": "gcc/testsuite/gcc.dg/uninit-9-O0.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dc740101e1ac5a1505528e54806fb7d7dde17d9/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-9-O0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dc740101e1ac5a1505528e54806fb7d7dde17d9/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-9-O0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-9-O0.c?ref=2dc740101e1ac5a1505528e54806fb7d7dde17d9", "patch": "@@ -0,0 +1,41 @@\n+/* Spurious uninitialized variable warnings.  Slight variant on the\n+   documented case, inspired by reg-stack.c:record_asm_reg_life.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-Wuninitialized\" } */\n+\n+struct foo\n+{\n+    int type;\n+    struct foo *car;\n+    struct foo *cdr;\n+    char *data;\n+    int data2;\n+};\n+\n+extern void use(struct foo *);\n+\n+#define CLOBBER 6\n+#define PARALLEL 3\n+\n+void\n+func(struct foo *list, int count)\n+{\n+    int n_clobbers = 0;\n+    int i;\n+    struct foo **clob_list;   /* { dg-bogus \"clob_list\" \"uninitialized variable warning\" } */\n+\n+    if(list[0].type == PARALLEL)\n+    {\n+\tclob_list = __builtin_alloca(count * sizeof(struct foo *));\n+\t\n+\tfor(i = 1; i < count; i++)\n+\t{\n+\t    if(list[i].type == CLOBBER)\n+\t\tclob_list[n_clobbers++] = &list[i];\n+\t}\n+    }\n+\n+    for(i = 0; i < n_clobbers; i++)\n+\tuse(clob_list[i]);\n+}"}, {"sha": "6937691156353496fd7a978a2c4f777107d2245b", "filename": "gcc/testsuite/gcc.dg/uninit-A-O0.c", "status": "added", "additions": 117, "deletions": 0, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dc740101e1ac5a1505528e54806fb7d7dde17d9/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-A-O0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dc740101e1ac5a1505528e54806fb7d7dde17d9/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-A-O0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-A-O0.c?ref=2dc740101e1ac5a1505528e54806fb7d7dde17d9", "patch": "@@ -0,0 +1,117 @@\n+/* Inspired by part of java/parse.y.\n+   May be a real bug in CSE. */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-Wall\" } */\n+\n+struct tree\n+{\n+    struct tree *car, *cdr, *wfl;\n+    int code;\n+    struct { unsigned int renp:1;\n+      unsigned int rtnp:1;\n+      unsigned int rpnp:1; } flags;\n+};\n+typedef struct tree *tree;\n+#define NULL_TREE ((tree)0)\n+\n+/* Codes */\n+enum\n+{\n+    CALL_EXPR, NEW_ARRAY_EXPR, NEW_CLASS_EXPR, CONVERT_EXPR,\n+    ARRAY_REF, CONDITIONAL_EXPR, STRING_CST, EXPR_WITH_FILE_LOCATION\n+};\n+\n+/* Flags */\n+#define RESOLVE_EXPRESSION_NAME_P(t) ((t)->flags.renp)\n+#define RESOLVE_TYPE_NAME_P(t) ((t)->flags.rtnp)\n+#define RESOLVE_PACKAGE_NAME_P(t) ((t)->flags.rpnp)\n+\n+/* Macros */\n+#define EXPR_WFL_QUALIFICATION(t) ((t)->wfl)\n+#define QUAL_WFL(t) ((t)->wfl)\n+#define EXPR_WFL_NODE(t) ((t)->wfl)\n+#define TREE_CODE(t) ((t)->code)\n+#define TREE_OPERAND(t,x) ((t)->car)\n+#define CLASSTYPE_SUPER(t) ((t)->car)\n+#define IDENTIFIER_LOCAL_VALUE(t) ((t)->car)\n+#define TREE_CHAIN(t) ((t)->cdr)\n+#define QUAL_RESOLUTION(t) ((t)->cdr)\n+\n+extern tree current_class, this_identifier_node;\n+extern tree super_identifier_node, length_identifier_node;\n+\n+tree resolve_and_layout (tree, tree);\n+tree lookup_field_wrapper (tree, tree);\n+\n+void\n+qualify_ambiguous_name (id)\n+     tree id;\n+{\n+  tree qual, qual_wfl, decl;\n+  tree name;\t /* { dg-bogus \"name\" \"uninitialized variable warning\" } */\n+  tree ptr_type; /* { dg-bogus \"ptr_type\" \"uninitialized variable warning\" } */\n+  int again, new_array_found = 0;\n+  int super_found = 0, this_found = 0;\n+\n+  qual = EXPR_WFL_QUALIFICATION (id);\n+  do {\n+    qual_wfl = QUAL_WFL (qual);\n+    switch (TREE_CODE (qual_wfl))\n+      {\n+      case CALL_EXPR:\n+\tqual_wfl = TREE_OPERAND (qual_wfl, 0);\n+\tif (TREE_CODE (qual_wfl) != EXPR_WITH_FILE_LOCATION)\n+\t  {\n+\t    qual = EXPR_WFL_QUALIFICATION (qual_wfl);\n+\t    qual_wfl = QUAL_WFL (qual);\n+\t  }\n+\tbreak;\n+      case NEW_ARRAY_EXPR:\n+\tqual = TREE_CHAIN (qual);\n+\tnew_array_found = again = 1;\n+\tcontinue;\n+      case NEW_CLASS_EXPR:\n+      case CONVERT_EXPR:\n+\tqual_wfl = TREE_OPERAND (qual_wfl, 0);\n+\tbreak;\n+      case ARRAY_REF:\n+\twhile (TREE_CODE (qual_wfl) == ARRAY_REF)\n+\t  qual_wfl = TREE_OPERAND (qual_wfl, 0);\n+\tbreak;\n+      default:\n+\tbreak;\n+      }\n+\n+    name = EXPR_WFL_NODE (qual_wfl);\n+    ptr_type = current_class;\n+    again = 0;\n+\n+  } while (again);\n+\n+  /* If you put straightforward uses of name and ptr_type here\n+     instead of the if-else sequence below, the warnings go away.\n+     Therefore I suspect a real bug. */\n+  \n+  if (!this_found && !super_found && (decl = IDENTIFIER_LOCAL_VALUE (name)))\n+    {\n+      RESOLVE_EXPRESSION_NAME_P (qual_wfl) = 1;\n+      QUAL_RESOLUTION (qual) = decl;\n+    }\n+  else if ((decl = lookup_field_wrapper (ptr_type, name))\n+\t   || (new_array_found && name == length_identifier_node))\n+    {\n+      RESOLVE_EXPRESSION_NAME_P (qual_wfl) = 1;\n+      QUAL_RESOLUTION (qual) = (new_array_found ? NULL_TREE : decl);\n+    }\n+  else if ((decl = resolve_and_layout (name, NULL_TREE)))\n+    {\n+      RESOLVE_TYPE_NAME_P (qual_wfl) = 1;\n+      QUAL_RESOLUTION (qual) = decl;\n+    }\n+  else if (TREE_CODE (QUAL_WFL (qual)) == CALL_EXPR\n+\t   || TREE_CODE (QUAL_WFL (qual)) == ARRAY_REF)\n+    RESOLVE_EXPRESSION_NAME_P (qual_wfl) = 1;\n+  else \n+    RESOLVE_PACKAGE_NAME_P (qual_wfl) = 1;\n+}"}, {"sha": "e2883a38ea876652d58054bf739924d7b85f2230", "filename": "gcc/testsuite/gcc.dg/uninit-B-O0.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dc740101e1ac5a1505528e54806fb7d7dde17d9/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-B-O0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dc740101e1ac5a1505528e54806fb7d7dde17d9/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-B-O0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-B-O0.c?ref=2dc740101e1ac5a1505528e54806fb7d7dde17d9", "patch": "@@ -0,0 +1,15 @@\n+/* Origin: PR c/179 from Gray Watson <gray@256.com>, adapted as a testcase\n+   by Joseph Myers <jsm28@cam.ac.uk>.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wuninitialized\" } */\n+extern void foo (int *);\n+extern void bar (int);\n+\n+void\n+baz (void)\n+{\n+  int i;\n+  if (i) /* { dg-warning \"uninit\" \"uninit i warning\" { xfail *-*-* } } */\n+    bar (i);\n+  foo (&i);\n+}"}, {"sha": "305dd36707ea88acd59e6dd99738e2153b54147b", "filename": "gcc/testsuite/gcc.dg/uninit-C-O0.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dc740101e1ac5a1505528e54806fb7d7dde17d9/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-C-O0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dc740101e1ac5a1505528e54806fb7d7dde17d9/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-C-O0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-C-O0.c?ref=2dc740101e1ac5a1505528e54806fb7d7dde17d9", "patch": "@@ -0,0 +1,21 @@\n+/* Spurious uninitialized variable warning, inspired by libgcc2.c.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wuninitialized\" } */\n+\n+/* Not all platforms support TImode integers.  */\n+#if defined(__LP64__) && !defined(__hppa__)\n+typedef int TItype __attribute__ ((mode (TI)));\n+#else\n+typedef long TItype;\n+#endif\n+\n+\n+TItype\n+__subvdi3 (TItype a, TItype b)\n+{\n+  TItype w;\n+  \n+  w = a - b;\n+  \n+  return w;\n+}"}, {"sha": "e63cb80aee0f89a413ac74acfd19297715f54e09", "filename": "gcc/testsuite/gcc.dg/uninit-D-O0.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dc740101e1ac5a1505528e54806fb7d7dde17d9/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-D-O0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dc740101e1ac5a1505528e54806fb7d7dde17d9/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-D-O0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-D-O0.c?ref=2dc740101e1ac5a1505528e54806fb7d7dde17d9", "patch": "@@ -0,0 +1,9 @@\n+/* Test we do not warn about initializing variable with self. */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wuninitialized\" } */\n+\n+int f()\n+{\n+  int i = i;\n+  return i;\n+}"}, {"sha": "2cc2459663d0fe2aaa9856702adf42b4366c86be", "filename": "gcc/testsuite/gcc.dg/uninit-E-O0.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dc740101e1ac5a1505528e54806fb7d7dde17d9/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-E-O0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dc740101e1ac5a1505528e54806fb7d7dde17d9/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-E-O0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-E-O0.c?ref=2dc740101e1ac5a1505528e54806fb7d7dde17d9", "patch": "@@ -0,0 +1,9 @@\n+/* Test we do warn about initializing variable with self when -Winit-self is supplied. */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wuninitialized -Winit-self\" } */\n+\n+int f()\n+{\n+  int i = i; /* { dg-warning \"i\" \"uninitialized variable warning\" }  */\n+  return i;\n+}"}, {"sha": "737cc65007ec6caaf38fc6748c969c7f090a0de8", "filename": "gcc/testsuite/gcc.dg/uninit-F-O0.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dc740101e1ac5a1505528e54806fb7d7dde17d9/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-F-O0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dc740101e1ac5a1505528e54806fb7d7dde17d9/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-F-O0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-F-O0.c?ref=2dc740101e1ac5a1505528e54806fb7d7dde17d9", "patch": "@@ -0,0 +1,9 @@\n+/* Test we do warn about initializing variable with self in the initialization. */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wuninitialized\" } */\n+\n+int f()\n+{\n+  int i = i + 1; /* { dg-warning \"i\" \"uninitialized variable warning\" }  */\n+  return i;\n+}"}, {"sha": "d6edffede66d020146ea36f36186bb640a2e4386", "filename": "gcc/testsuite/gcc.dg/uninit-G-O0.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dc740101e1ac5a1505528e54806fb7d7dde17d9/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-G-O0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dc740101e1ac5a1505528e54806fb7d7dde17d9/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-G-O0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-G-O0.c?ref=2dc740101e1ac5a1505528e54806fb7d7dde17d9", "patch": "@@ -0,0 +1,9 @@\n+/* Test we do not warn about initializing variable with address of self in the initialization. */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wuninitialized\" } */\n+\n+void *f()\n+{\n+  void *i = &i;\n+  return i;\n+}"}, {"sha": "97221462c0238632fcdeb23ea18d7222d07be2e1", "filename": "gcc/testsuite/gcc.dg/uninit-H-O0.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dc740101e1ac5a1505528e54806fb7d7dde17d9/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-H-O0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dc740101e1ac5a1505528e54806fb7d7dde17d9/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-H-O0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-H-O0.c?ref=2dc740101e1ac5a1505528e54806fb7d7dde17d9", "patch": "@@ -0,0 +1,33 @@\n+/* PR 14204 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wall -Werror\" } */\n+\n+#if defined __alpha__\n+# define ASM __asm__(\"$30\")\n+#elif defined __i386__\n+# define ASM __asm__(\"esp\")\n+#elif defined (__powerpc__) || defined (__PPC__) || defined (__ppc__) || defined (_POWER)\n+# define ASM __asm__(\"r1\")\n+#elif defined __s390__\n+# define ASM __asm__(\"r15\")\n+#elif defined __mips\n+# define ASM __asm__(\"$sp\")\n+#elif defined __sparc__\n+# define ASM __asm__(\"sp\")\n+#elif defined __ia64__\n+# define ASM __asm__(\"r12\")\n+#elif defined __hppa__\n+# define ASM __asm__(\"%r30\")\n+#elif defined __xtensa__\n+# define ASM __asm__(\"sp\")\n+#else\n+/* The register name should be target-dependent so for other targets,\n+   we just silence the test.  */\n+# define ASM = 0\n+#endif\n+\n+void *load_PCB (void)\n+{\n+  register void *sp ASM;\n+  return sp;\t\t\t/* { dg-bogus \"uninitialized\" } */\n+}"}, {"sha": "655f5489279410f4e035d5fa065917f32a393a10", "filename": "gcc/testsuite/gcc.dg/uninit-I-O0.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dc740101e1ac5a1505528e54806fb7d7dde17d9/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-I-O0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dc740101e1ac5a1505528e54806fb7d7dde17d9/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-I-O0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-I-O0.c?ref=2dc740101e1ac5a1505528e54806fb7d7dde17d9", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wuninitialized\" } */\n+\n+int sys_msgctl (void)\n+{\n+  struct { int mode; } setbuf;  /* { dg-warning \"'setbuf\\.mode' is used\" {} { xfail *-*-* } } */\n+  return setbuf.mode;\n+}"}]}