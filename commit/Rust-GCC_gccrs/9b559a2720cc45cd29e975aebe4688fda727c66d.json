{"sha": "9b559a2720cc45cd29e975aebe4688fda727c66d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWI1NTlhMjcyMGNjNDVjZDI5ZTk3NWFlYmU0Njg4ZmRhNzI3YzY2ZA==", "commit": {"author": {"name": "Mumit Khan", "email": "khan@xraylith.wisc.edu", "date": "1998-08-19T13:05:52Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-08-19T13:05:52Z"}, "message": "cplus-dem.c (work_stuff): Add dllimported.\n\nx\n\t* cplus-dem.c (work_stuff): Add dllimported.\n\t(demangled_prefix): Mark symbols imported from PE DLL.\n\t(internal_cplus_demangled): Handle.\n\nFrom-SVN: r21852", "tree": {"sha": "f5fe7b0ede9446140ddb3f6734b49a72b5b43110", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f5fe7b0ede9446140ddb3f6734b49a72b5b43110"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9b559a2720cc45cd29e975aebe4688fda727c66d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b559a2720cc45cd29e975aebe4688fda727c66d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b559a2720cc45cd29e975aebe4688fda727c66d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b559a2720cc45cd29e975aebe4688fda727c66d/comments", "author": null, "committer": null, "parents": [{"sha": "28235a5ca85806ee8a9bd785f800ad293296c6c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28235a5ca85806ee8a9bd785f800ad293296c6c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28235a5ca85806ee8a9bd785f800ad293296c6c3"}], "stats": {"total": 19, "additions": 18, "deletions": 1}, "files": [{"sha": "6b58ae25779d89ec8aba62b16b7f79260cda5565", "filename": "libiberty/cplus-dem.c", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b559a2720cc45cd29e975aebe4688fda727c66d/libiberty%2Fcplus-dem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b559a2720cc45cd29e975aebe4688fda727c66d/libiberty%2Fcplus-dem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fcplus-dem.c?ref=9b559a2720cc45cd29e975aebe4688fda727c66d", "patch": "@@ -128,6 +128,7 @@ struct work_stuff\n   int static_type;\t/* A static member function */\n   int const_type;\t/* A const member function */\n   int volatile_type;    /* A volatile member function */\n+  int dllimported;\t/* Symbol imported from a PE DLL */\n   char **tmpl_argvec;   /* Template function arguments. */\n   int ntmpl_args;       /* The number of template function arguments. */\n   int forgetting_types; /* Nonzero if we are not remembering the types\n@@ -672,6 +673,7 @@ internal_cplus_demangle (work, mangled)\n   work->constructor = work->destructor = 0;\n   work->static_type = work->const_type = 0;\n   work->volatile_type = 0;\n+  work->dllimported = 0;\n \n   if ((mangled != NULL) && (*mangled != '\\0'))\n     {\n@@ -706,6 +708,11 @@ internal_cplus_demangle (work, mangled)\n           string_prepend (&decl, \"global destructors keyed to \");\n           work->destructor = 0;\n         }\n+      else if (work->dllimported == 1)\n+        {\n+          string_prepend (&decl, \"import stub for \");\n+          work->dllimported = 0;\n+        }\n       demangled = mop_up (work, &decl, success);\n     }\n   work->constructor = s1;\n@@ -1757,7 +1764,17 @@ demangle_prefix (work, mangled, declp)\n   const char *scan;\n   int i;\n \n-  if (strlen(*mangled) >= 11 && strncmp(*mangled, \"_GLOBAL_\", 8) == 0)\n+  if (strlen(*mangled) > 6\n+      && (strncmp(*mangled, \"_imp__\", 6) == 0 \n+          || strncmp(*mangled, \"__imp_\", 6) == 0))\n+    {\n+      /* it's a symbol imported from a PE dynamic library. Check for both\n+         new style prefix _imp__ and legacy __imp_ used by older versions\n+\t of dlltool. */\n+      (*mangled) += 6;\n+      work->dllimported = 1;\n+    }\n+  else if (strlen(*mangled) >= 11 && strncmp(*mangled, \"_GLOBAL_\", 8) == 0)\n     {\n       char *marker = strchr (cplus_markers, (*mangled)[8]);\n       if (marker != NULL && *marker == (*mangled)[10])"}]}