{"sha": "264a1269b44ccd4e5c37307d49461dd4ff52457c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjY0YTEyNjliNDRjY2Q0ZTVjMzczMDdkNDk0NjFkZDRmZjUyNDU3Yw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-01-13T13:00:13Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-01-13T13:00:13Z"}, "message": "aarch64: Add support for unpacked SVE MLS and MSB\n\nThis patch extends the MLS/MSB patterns to support unpacked\ninteger vectors.  The type suffix could be either the element\nsize or the container size, but using the element size should\nbe more efficient.\n\ngcc/\n\t* config/aarch64/aarch64-sve.md (fnma<mode>4): Extend from SVE_FULL_I\n\tto SVE_I.\n\t(@aarch64_pred_fnma<mode>, cond_fnma<mode>, *cond_fnma<mode>_2)\n\t(*cond_fnma<mode>_4, *cond_fnma<mode>_any): Likewise.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/sve/mls_2.c: New test.\n\t* g++.target/aarch64/sve/cond_mls_1.C: Likewise.\n\t* g++.target/aarch64/sve/cond_mls_2.C: Likewise.\n\t* g++.target/aarch64/sve/cond_mls_3.C: Likewise.\n\t* g++.target/aarch64/sve/cond_mls_4.C: Likewise.\n\t* g++.target/aarch64/sve/cond_mls_5.C: Likewise.", "tree": {"sha": "dbc8c12ea6d6474c7bc7b8caf62a11b5ff658145", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dbc8c12ea6d6474c7bc7b8caf62a11b5ff658145"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/264a1269b44ccd4e5c37307d49461dd4ff52457c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/264a1269b44ccd4e5c37307d49461dd4ff52457c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/264a1269b44ccd4e5c37307d49461dd4ff52457c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/264a1269b44ccd4e5c37307d49461dd4ff52457c/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf7a335306153a5b01f3e1d081456ea4c32baefc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf7a335306153a5b01f3e1d081456ea4c32baefc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf7a335306153a5b01f3e1d081456ea4c32baefc"}], "stats": {"total": 290, "additions": 246, "deletions": 44}, "files": [{"sha": "da15bd8788507feb12d52894c14e099370f34108", "filename": "gcc/config/aarch64/aarch64-sve.md", "status": "modified", "additions": 44, "deletions": 44, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264a1269b44ccd4e5c37307d49461dd4ff52457c/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264a1269b44ccd4e5c37307d49461dd4ff52457c/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md?ref=264a1269b44ccd4e5c37307d49461dd4ff52457c", "patch": "@@ -6695,14 +6695,14 @@\n \n ;; Unpredicated integer subtraction of product.\n (define_expand \"fnma<mode>4\"\n-  [(set (match_operand:SVE_FULL_I 0 \"register_operand\")\n-\t(minus:SVE_FULL_I\n-\t  (match_operand:SVE_FULL_I 3 \"register_operand\")\n-\t  (unspec:SVE_FULL_I\n+  [(set (match_operand:SVE_I 0 \"register_operand\")\n+\t(minus:SVE_I\n+\t  (match_operand:SVE_I 3 \"register_operand\")\n+\t  (unspec:SVE_I\n \t    [(match_dup 4)\n-\t     (mult:SVE_FULL_I\n-\t       (match_operand:SVE_FULL_I 1 \"register_operand\")\n-\t       (match_operand:SVE_FULL_I 2 \"general_operand\"))]\n+\t     (mult:SVE_I\n+\t       (match_operand:SVE_I 1 \"register_operand\")\n+\t       (match_operand:SVE_I 2 \"general_operand\"))]\n \t    UNSPEC_PRED_X)))]\n   \"TARGET_SVE\"\n   {\n@@ -6714,14 +6714,14 @@\n \n ;; Predicated integer subtraction of product.\n (define_insn \"@aarch64_pred_fnma<mode>\"\n-  [(set (match_operand:SVE_FULL_I 0 \"register_operand\" \"=w, w, ?&w\")\n-\t(minus:SVE_FULL_I\n-\t  (match_operand:SVE_FULL_I 4 \"register_operand\" \"w, 0, w\")\n-\t  (unspec:SVE_FULL_I\n+  [(set (match_operand:SVE_I 0 \"register_operand\" \"=w, w, ?&w\")\n+\t(minus:SVE_I\n+\t  (match_operand:SVE_I 4 \"register_operand\" \"w, 0, w\")\n+\t  (unspec:SVE_I\n \t    [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl, Upl\")\n-\t     (mult:SVE_FULL_I\n-\t       (match_operand:SVE_FULL_I 2 \"register_operand\" \"%0, w, w\")\n-\t       (match_operand:SVE_FULL_I 3 \"register_operand\" \"w, w, w\"))]\n+\t     (mult:SVE_I\n+\t       (match_operand:SVE_I 2 \"register_operand\" \"%0, w, w\")\n+\t       (match_operand:SVE_I 3 \"register_operand\" \"w, w, w\"))]\n \t    UNSPEC_PRED_X)))]\n   \"TARGET_SVE\"\n   \"@\n@@ -6733,15 +6733,15 @@\n \n ;; Predicated integer subtraction of product with merging.\n (define_expand \"cond_fnma<mode>\"\n-  [(set (match_operand:SVE_FULL_I 0 \"register_operand\")\n-   (unspec:SVE_FULL_I\n+  [(set (match_operand:SVE_I 0 \"register_operand\")\n+   (unspec:SVE_I\n \t[(match_operand:<VPRED> 1 \"register_operand\")\n-\t (minus:SVE_FULL_I\n-\t   (match_operand:SVE_FULL_I 4 \"register_operand\")\n-\t   (mult:SVE_FULL_I\n-\t     (match_operand:SVE_FULL_I 2 \"register_operand\")\n-\t     (match_operand:SVE_FULL_I 3 \"general_operand\")))\n-\t (match_operand:SVE_FULL_I 5 \"aarch64_simd_reg_or_zero\")]\n+\t (minus:SVE_I\n+\t   (match_operand:SVE_I 4 \"register_operand\")\n+\t   (mult:SVE_I\n+\t     (match_operand:SVE_I 2 \"register_operand\")\n+\t     (match_operand:SVE_I 3 \"general_operand\")))\n+\t (match_operand:SVE_I 5 \"aarch64_simd_reg_or_zero\")]\n \tUNSPEC_SEL))]\n   \"TARGET_SVE\"\n   {\n@@ -6756,14 +6756,14 @@\n \n ;; Predicated integer subtraction of product, merging with the first input.\n (define_insn \"*cond_fnma<mode>_2\"\n-  [(set (match_operand:SVE_FULL_I 0 \"register_operand\" \"=w, ?&w\")\n-\t(unspec:SVE_FULL_I\n+  [(set (match_operand:SVE_I 0 \"register_operand\" \"=w, ?&w\")\n+\t(unspec:SVE_I\n \t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl\")\n-\t   (minus:SVE_FULL_I\n-\t     (match_operand:SVE_FULL_I 4 \"register_operand\" \"w, w\")\n-\t     (mult:SVE_FULL_I\n-\t       (match_operand:SVE_FULL_I 2 \"register_operand\" \"0, w\")\n-\t       (match_operand:SVE_FULL_I 3 \"register_operand\" \"w, w\")))\n+\t   (minus:SVE_I\n+\t     (match_operand:SVE_I 4 \"register_operand\" \"w, w\")\n+\t     (mult:SVE_I\n+\t       (match_operand:SVE_I 2 \"register_operand\" \"0, w\")\n+\t       (match_operand:SVE_I 3 \"register_operand\" \"w, w\")))\n \t   (match_dup 2)]\n \t  UNSPEC_SEL))]\n   \"TARGET_SVE\"\n@@ -6775,14 +6775,14 @@\n \n ;; Predicated integer subtraction of product, merging with the third input.\n (define_insn \"*cond_fnma<mode>_4\"\n-  [(set (match_operand:SVE_FULL_I 0 \"register_operand\" \"=w, ?&w\")\n-\t(unspec:SVE_FULL_I\n+  [(set (match_operand:SVE_I 0 \"register_operand\" \"=w, ?&w\")\n+\t(unspec:SVE_I\n \t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl\")\n-\t   (minus:SVE_FULL_I\n-\t     (match_operand:SVE_FULL_I 4 \"register_operand\" \"0, w\")\n-\t     (mult:SVE_FULL_I\n-\t       (match_operand:SVE_FULL_I 2 \"register_operand\" \"w, w\")\n-\t       (match_operand:SVE_FULL_I 3 \"register_operand\" \"w, w\")))\n+\t   (minus:SVE_I\n+\t     (match_operand:SVE_I 4 \"register_operand\" \"0, w\")\n+\t     (mult:SVE_I\n+\t       (match_operand:SVE_I 2 \"register_operand\" \"w, w\")\n+\t       (match_operand:SVE_I 3 \"register_operand\" \"w, w\")))\n \t   (match_dup 4)]\n \t  UNSPEC_SEL))]\n   \"TARGET_SVE\"\n@@ -6795,15 +6795,15 @@\n ;; Predicated integer subtraction of product, merging with an\n ;; independent value.\n (define_insn_and_rewrite \"*cond_fnma<mode>_any\"\n-  [(set (match_operand:SVE_FULL_I 0 \"register_operand\" \"=&w, &w, &w, &w, &w, ?&w\")\n-\t(unspec:SVE_FULL_I\n+  [(set (match_operand:SVE_I 0 \"register_operand\" \"=&w, &w, &w, &w, &w, ?&w\")\n+\t(unspec:SVE_I\n \t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl, Upl, Upl, Upl, Upl\")\n-\t   (minus:SVE_FULL_I\n-\t     (match_operand:SVE_FULL_I 4 \"register_operand\" \"w, 0, w, w, w, w\")\n-\t     (mult:SVE_FULL_I\n-\t       (match_operand:SVE_FULL_I 2 \"register_operand\" \"w, w, 0, w, w, w\")\n-\t       (match_operand:SVE_FULL_I 3 \"register_operand\" \"w, w, w, 0, w, w\")))\n-\t   (match_operand:SVE_FULL_I 5 \"aarch64_simd_reg_or_zero\" \"Dz, Dz, Dz, Dz, 0, w\")]\n+\t   (minus:SVE_I\n+\t     (match_operand:SVE_I 4 \"register_operand\" \"w, 0, w, w, w, w\")\n+\t     (mult:SVE_I\n+\t       (match_operand:SVE_I 2 \"register_operand\" \"w, w, 0, w, w, w\")\n+\t       (match_operand:SVE_I 3 \"register_operand\" \"w, w, w, 0, w, w\")))\n+\t   (match_operand:SVE_I 5 \"aarch64_simd_reg_or_zero\" \"Dz, Dz, Dz, Dz, 0, w\")]\n \t  UNSPEC_SEL))]\n   \"TARGET_SVE\n    && !rtx_equal_p (operands[2], operands[5])"}, {"sha": "f472db4743a7da1024b57d48bd5bf5f06f8b7c00", "filename": "gcc/testsuite/g++.target/aarch64/sve/cond_mls_1.C", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264a1269b44ccd4e5c37307d49461dd4ff52457c/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fcond_mls_1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264a1269b44ccd4e5c37307d49461dd4ff52457c/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fcond_mls_1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fcond_mls_1.C?ref=264a1269b44ccd4e5c37307d49461dd4ff52457c", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O -msve-vector-bits=2048 -save-temps\" } */\n+\n+#include <stdint.h>\n+\n+#define TEST_OP(TYPE) \\\n+  TYPE \\\n+  test##_##TYPE##_reg (TYPE a, TYPE b, TYPE c, TYPE d) \\\n+  { \\\n+    return d == 0 ? a - b * c : a; \\\n+  }\n+\n+#define TEST_TYPE(TYPE, SIZE) \\\n+  typedef TYPE TYPE##SIZE __attribute__((vector_size(SIZE))); \\\n+  TEST_OP (TYPE##SIZE)\n+\n+TEST_TYPE (uint8_t, 32)\n+\n+TEST_TYPE (uint8_t, 64)\n+TEST_TYPE (uint16_t, 64)\n+\n+TEST_TYPE (uint8_t, 128)\n+TEST_TYPE (uint16_t, 128)\n+TEST_TYPE (uint32_t, 128)\n+\n+/* { dg-final { scan-assembler {\\tld1b\\t(z[0-9]+)\\.h, p[0-7]/z, \\[x0\\][^L]*\\tmls\\t\\1\\.b,} } } */\n+/* { dg-final { scan-assembler {\\tld1b\\t(z[0-9]+)\\.s, p[0-7]/z, \\[x0\\][^L]*\\tmls\\t\\1\\.b,} } } */\n+/* { dg-final { scan-assembler {\\tld1b\\t(z[0-9]+)\\.d, p[0-7]/z, \\[x0\\][^L]*\\tmls\\t\\1\\.b,} } } */\n+/* { dg-final { scan-assembler {\\tld1h\\t(z[0-9]+)\\.s, p[0-7]/z, \\[x0\\][^L]*\\tmls\\t\\1\\.h,} } } */\n+/* { dg-final { scan-assembler {\\tld1h\\t(z[0-9]+)\\.d, p[0-7]/z, \\[x0\\][^L]*\\tmls\\t\\1\\.h,} } } */\n+/* { dg-final { scan-assembler {\\tld1w\\t(z[0-9]+)\\.d, p[0-7]/z, \\[x0\\][^L]*\\tmls\\t\\1\\.s,} } } */\n+\n+/* { dg-final { scan-assembler-not {\\tsel\\t} } } */"}, {"sha": "f10b4615c6e6d90d48a9cc6b2dcfc62b34f2e91e", "filename": "gcc/testsuite/g++.target/aarch64/sve/cond_mls_2.C", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264a1269b44ccd4e5c37307d49461dd4ff52457c/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fcond_mls_2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264a1269b44ccd4e5c37307d49461dd4ff52457c/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fcond_mls_2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fcond_mls_2.C?ref=264a1269b44ccd4e5c37307d49461dd4ff52457c", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O -msve-vector-bits=2048 -save-temps\" } */\n+\n+#include <stdint.h>\n+\n+#define TEST_OP(TYPE) \\\n+  TYPE \\\n+  test##_##TYPE##_reg (TYPE a, TYPE b, TYPE c, TYPE d) \\\n+  { \\\n+    return d == 0 ? a - b * c : b; \\\n+  }\n+\n+#define TEST_TYPE(TYPE, SIZE) \\\n+  typedef TYPE TYPE##SIZE __attribute__((vector_size(SIZE))); \\\n+  TEST_OP (TYPE##SIZE)\n+\n+TEST_TYPE (uint8_t, 32)\n+\n+TEST_TYPE (uint8_t, 64)\n+TEST_TYPE (uint16_t, 64)\n+\n+TEST_TYPE (uint8_t, 128)\n+TEST_TYPE (uint16_t, 128)\n+TEST_TYPE (uint32_t, 128)\n+\n+/* { dg-final { scan-assembler {\\tld1b\\t(z[0-9]+)\\.h, p[0-7]/z, \\[x1\\][^L]*\\tmsb\\t\\1\\.b,} } } */\n+/* { dg-final { scan-assembler {\\tld1b\\t(z[0-9]+)\\.s, p[0-7]/z, \\[x1\\][^L]*\\tmsb\\t\\1\\.b,} } } */\n+/* { dg-final { scan-assembler {\\tld1b\\t(z[0-9]+)\\.d, p[0-7]/z, \\[x1\\][^L]*\\tmsb\\t\\1\\.b,} } } */\n+/* { dg-final { scan-assembler {\\tld1h\\t(z[0-9]+)\\.s, p[0-7]/z, \\[x1\\][^L]*\\tmsb\\t\\1\\.h,} } } */\n+/* { dg-final { scan-assembler {\\tld1h\\t(z[0-9]+)\\.d, p[0-7]/z, \\[x1\\][^L]*\\tmsb\\t\\1\\.h,} } } */\n+/* { dg-final { scan-assembler {\\tld1w\\t(z[0-9]+)\\.d, p[0-7]/z, \\[x1\\][^L]*\\tmsb\\t\\1\\.s,} } } */\n+\n+/* { dg-final { scan-assembler-not {\\tsel\\t} } } */"}, {"sha": "770d963dfee3cc9b0d9a4ba4f3d9779013fd76cc", "filename": "gcc/testsuite/g++.target/aarch64/sve/cond_mls_3.C", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264a1269b44ccd4e5c37307d49461dd4ff52457c/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fcond_mls_3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264a1269b44ccd4e5c37307d49461dd4ff52457c/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fcond_mls_3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fcond_mls_3.C?ref=264a1269b44ccd4e5c37307d49461dd4ff52457c", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O2 -msve-vector-bits=2048 -save-temps\" } */\n+\n+#include <stdint.h>\n+\n+#define TEST_OP(TYPE) \\\n+  TYPE \\\n+  test##_##TYPE##_reg (TYPE a, TYPE b, TYPE c, TYPE d) \\\n+  { \\\n+    return d == 0 ? a - b * c : c; \\\n+  }\n+\n+#define TEST_TYPE(TYPE, SIZE) \\\n+  typedef TYPE TYPE##SIZE __attribute__((vector_size(SIZE))); \\\n+  TEST_OP (TYPE##SIZE)\n+\n+TEST_TYPE (uint8_t, 32)\n+\n+TEST_TYPE (uint8_t, 64)\n+TEST_TYPE (uint16_t, 64)\n+\n+TEST_TYPE (uint8_t, 128)\n+TEST_TYPE (uint16_t, 128)\n+TEST_TYPE (uint32_t, 128)\n+\n+/* { dg-final { scan-assembler {\\tld1b\\t(z[0-9]+)\\.h, p[0-7]/z, \\[x2\\][^L]*\\tmsb\\t\\1\\.b,} } } */\n+/* { dg-final { scan-assembler {\\tld1b\\t(z[0-9]+)\\.s, p[0-7]/z, \\[x2\\][^L]*\\tmsb\\t\\1\\.b,} } } */\n+/* { dg-final { scan-assembler {\\tld1b\\t(z[0-9]+)\\.d, p[0-7]/z, \\[x2\\][^L]*\\tmsb\\t\\1\\.b,} } } */\n+/* { dg-final { scan-assembler {\\tld1h\\t(z[0-9]+)\\.s, p[0-7]/z, \\[x2\\][^L]*\\tmsb\\t\\1\\.h,} } } */\n+/* { dg-final { scan-assembler {\\tld1h\\t(z[0-9]+)\\.d, p[0-7]/z, \\[x2\\][^L]*\\tmsb\\t\\1\\.h,} } } */\n+/* { dg-final { scan-assembler {\\tld1w\\t(z[0-9]+)\\.d, p[0-7]/z, \\[x2\\][^L]*\\tmsb\\t\\1\\.s,} } } */\n+\n+/* { dg-final { scan-assembler-not {\\tsel\\t} } } */"}, {"sha": "fac8d95f95f3cee312f64e5e97b4fca117462141", "filename": "gcc/testsuite/g++.target/aarch64/sve/cond_mls_4.C", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264a1269b44ccd4e5c37307d49461dd4ff52457c/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fcond_mls_4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264a1269b44ccd4e5c37307d49461dd4ff52457c/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fcond_mls_4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fcond_mls_4.C?ref=264a1269b44ccd4e5c37307d49461dd4ff52457c", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O -msve-vector-bits=2048 -save-temps\" } */\n+\n+#include <stdint.h>\n+\n+#define TEST_OP(TYPE) \\\n+  TYPE \\\n+  test##_##TYPE##_reg (TYPE a, TYPE b, TYPE c, TYPE d) \\\n+  { \\\n+    return d == 0 ? a - b * c : d; \\\n+  }\n+\n+#define TEST_TYPE(TYPE, SIZE) \\\n+  typedef TYPE TYPE##SIZE __attribute__((vector_size(SIZE))); \\\n+  TEST_OP (TYPE##SIZE)\n+\n+TEST_TYPE (uint8_t, 32)\n+\n+TEST_TYPE (uint8_t, 64)\n+TEST_TYPE (uint16_t, 64)\n+\n+TEST_TYPE (uint8_t, 128)\n+TEST_TYPE (uint16_t, 128)\n+TEST_TYPE (uint32_t, 128)\n+\n+/* { dg-final { scan-assembler {\\tld1b\\t(z[0-9]+)\\.h, p[0-7]/z, \\[x3\\][^L]*\\tmls\\t\\1\\.b,} } } */\n+/* { dg-final { scan-assembler {\\tld1b\\t(z[0-9]+)\\.s, p[0-7]/z, \\[x3\\][^L]*\\tmls\\t\\1\\.b,} } } */\n+/* { dg-final { scan-assembler {\\tld1b\\t(z[0-9]+)\\.d, p[0-7]/z, \\[x3\\][^L]*\\tmls\\t\\1\\.b,} } } */\n+/* { dg-final { scan-assembler {\\tld1h\\t(z[0-9]+)\\.s, p[0-7]/z, \\[x3\\][^L]*\\tmls\\t\\1\\.h,} } } */\n+/* { dg-final { scan-assembler {\\tld1h\\t(z[0-9]+)\\.d, p[0-7]/z, \\[x3\\][^L]*\\tmls\\t\\1\\.h,} } } */\n+/* { dg-final { scan-assembler {\\tld1w\\t(z[0-9]+)\\.d, p[0-7]/z, \\[x3\\][^L]*\\tmls\\t\\1\\.s,} } } */\n+\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler-not {\\tsel\\t} } } */"}, {"sha": "82b89b4911b7ec681d838fa0bf37a5224586f33a", "filename": "gcc/testsuite/g++.target/aarch64/sve/cond_mls_5.C", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264a1269b44ccd4e5c37307d49461dd4ff52457c/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fcond_mls_5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264a1269b44ccd4e5c37307d49461dd4ff52457c/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fcond_mls_5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fcond_mls_5.C?ref=264a1269b44ccd4e5c37307d49461dd4ff52457c", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O -msve-vector-bits=2048 -save-temps\" } */\n+\n+#include <stdint.h>\n+\n+#define TEST_OP(TYPE) \\\n+  TYPE \\\n+  test##_##TYPE##_reg (TYPE a, TYPE b, TYPE c, TYPE d) \\\n+  { \\\n+    return d == 0 ? a - b * c : 0; \\\n+  }\n+\n+#define TEST_TYPE(TYPE, SIZE) \\\n+  typedef TYPE TYPE##SIZE __attribute__((vector_size(SIZE))); \\\n+  TEST_OP (TYPE##SIZE)\n+\n+TEST_TYPE (uint8_t, 32)\n+\n+TEST_TYPE (uint8_t, 64)\n+TEST_TYPE (uint16_t, 64)\n+\n+TEST_TYPE (uint8_t, 128)\n+TEST_TYPE (uint16_t, 128)\n+TEST_TYPE (uint32_t, 128)\n+\n+/* { dg-final { scan-assembler-times {\\t(?:mls|msb)\\tz[0-9]+\\.b,} 3 } } */\n+/* { dg-final { scan-assembler-times {\\t(?:mls|msb)\\tz[0-9]+\\.h,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\t(?:mls|msb)\\tz[0-9]+\\.s,} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.b, p[0-7]/z, z[0-9]+\\.b\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.h, p[0-7]/z, z[0-9]+\\.h\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.s, p[0-7]/z, z[0-9]+\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler-not {\\tsel\\t} } } */"}, {"sha": "b08812e06cac57392a3fdd2a35da22d2c9656425", "filename": "gcc/testsuite/gcc.target/aarch64/sve/mls_2.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264a1269b44ccd4e5c37307d49461dd4ff52457c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmls_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264a1269b44ccd4e5c37307d49461dd4ff52457c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmls_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmls_2.c?ref=264a1269b44ccd4e5c37307d49461dd4ff52457c", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O -msve-vector-bits=2048 -save-temps\" } */\n+\n+#include <stdint.h>\n+\n+#define TEST_OP(TYPE) \\\n+  TYPE \\\n+  test##_##TYPE##_##AMT (TYPE a, TYPE b, TYPE c) \\\n+  { \\\n+    return a - b * c; \\\n+  }\n+\n+#define TEST_TYPE(TYPE, SIZE) \\\n+  typedef TYPE TYPE##SIZE __attribute__((vector_size(SIZE))); \\\n+  TEST_OP (TYPE##SIZE)\n+\n+TEST_TYPE (int8_t, 32)\n+TEST_TYPE (uint8_t, 32)\n+\n+TEST_TYPE (int8_t, 64)\n+TEST_TYPE (uint8_t, 64)\n+TEST_TYPE (int16_t, 64)\n+TEST_TYPE (uint16_t, 64)\n+\n+TEST_TYPE (int8_t, 128)\n+TEST_TYPE (uint8_t, 128)\n+TEST_TYPE (int16_t, 128)\n+TEST_TYPE (uint16_t, 128)\n+TEST_TYPE (int32_t, 128)\n+TEST_TYPE (uint32_t, 128)\n+\n+/* { dg-final { scan-assembler-times {\\t(?:mls|msb)\\tz[0-9]+\\.b,} 6 } } */\n+/* { dg-final { scan-assembler-times {\\t(?:mls|msb)\\tz[0-9]+\\.h,} 4 } } */\n+/* { dg-final { scan-assembler-times {\\t(?:mls|msb)\\tz[0-9]+\\.s,} 2 } } */"}]}