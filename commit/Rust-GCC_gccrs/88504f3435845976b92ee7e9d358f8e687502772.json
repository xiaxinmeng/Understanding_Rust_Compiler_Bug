{"sha": "88504f3435845976b92ee7e9d358f8e687502772", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODg1MDRmMzQzNTg0NTk3NmI5MmVlN2U5ZDM1OGY4ZTY4NzUwMjc3Mg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2016-03-31T15:30:33Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2016-03-31T15:30:33Z"}, "message": "re PR c++/70393 (Miscompilation: missing constructor call for static object)\n\n\tPR c++/70393\n\t* varasm.c (output_constructor_regular_field): Flush bitfield\n\tearlier.  Assert we don't want to move backwards.\n\n\tcp/\n\t* constexpr.c (cxx_eval_store_expression): Keep CONSTRUCTOR\n\telements in field order.\n\n\ttestsuite/\n\t* g++.dg/cpp0x/constexpr-virtual6.C: New.\n\nFrom-SVN: r234636", "tree": {"sha": "6129d53eb107465f19b3b61d2bbcc066a80e270f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6129d53eb107465f19b3b61d2bbcc066a80e270f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/88504f3435845976b92ee7e9d358f8e687502772", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88504f3435845976b92ee7e9d358f8e687502772", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88504f3435845976b92ee7e9d358f8e687502772", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88504f3435845976b92ee7e9d358f8e687502772/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "95d34b9618011fea39c48544cc8937577720dcc1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95d34b9618011fea39c48544cc8937577720dcc1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95d34b9618011fea39c48544cc8937577720dcc1"}], "stats": {"total": 132, "additions": 113, "deletions": 19}, "files": [{"sha": "c58b659b190ba89059e9ab4234bbde59aed2da2f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88504f3435845976b92ee7e9d358f8e687502772/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88504f3435845976b92ee7e9d358f8e687502772/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=88504f3435845976b92ee7e9d358f8e687502772", "patch": "@@ -1,3 +1,9 @@\n+2016-03-31  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/70393\n+\t* varasm.c (output_constructor_regular_field): Flush bitfield\n+\tearlier.  Assert we don't want to move backwards.\n+\n 2016-03-31  Kirill Yukhin  <kirill.yukhin@intel.com>\n \n \tPR target/70453"}, {"sha": "4a6dc51253301649785c22fa2d37404c7de93241", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88504f3435845976b92ee7e9d358f8e687502772/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88504f3435845976b92ee7e9d358f8e687502772/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=88504f3435845976b92ee7e9d358f8e687502772", "patch": "@@ -1,3 +1,9 @@\n+2016-03-31  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/70393\n+\t* constexpr.c (cxx_eval_store_expression): Keep CONSTRUCTOR\n+\telements in field order.\n+\n 2016-03-31  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/70297"}, {"sha": "ea605dc641b43192bf731216cd37598b41a0869a", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 30, "deletions": 7, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88504f3435845976b92ee7e9d358f8e687502772/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88504f3435845976b92ee7e9d358f8e687502772/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=88504f3435845976b92ee7e9d358f8e687502772", "patch": "@@ -2959,16 +2959,39 @@ cxx_eval_store_expression (const constexpr_ctx *ctx, tree t,\n       else\n \t{\n \t  gcc_assert (TREE_CODE (index) == FIELD_DECL);\n-\t  for (unsigned HOST_WIDE_INT idx = 0;\n+\n+\t  /* We must keep the CONSTRUCTOR's ELTS in FIELD order.\n+\t     Usually we meet initializers in that order, but it is\n+\t     possible for base types to be placed not in program\n+\t     order.  */\n+\t  tree fields = TYPE_FIELDS (DECL_CONTEXT (index));\n+\t  unsigned HOST_WIDE_INT idx;\n+\n+\t  for (idx = 0;\n \t       vec_safe_iterate (CONSTRUCTOR_ELTS (*valp), idx, &cep);\n-\t       idx++)\n-\t    if (index == cep->index)\n-\t      break;\n-\t  if (!cep)\n+\t       idx++, fields = DECL_CHAIN (fields))\n \t    {\n-\t      constructor_elt ce = { index, NULL_TREE };\n-\t      cep = vec_safe_push (CONSTRUCTOR_ELTS (*valp), ce);\n+\t      if (index == cep->index)\n+\t\tgoto found;\n+\n+\t      /* The field we're initializing must be on the field\n+\t\t list.  Look to see if it is present before the\n+\t\t field the current ELT initializes.  */\n+\t      for (; fields != cep->index; fields = DECL_CHAIN (fields))\n+\t\tif (index == fields)\n+\t\t  goto insert;\n \t    }\n+\n+\t  /* We fell off the end of the CONSTRUCTOR, so insert a new\n+\t     entry at the end.  */\n+\tinsert:\n+\t  {\n+\t    constructor_elt ce = { index, NULL_TREE };\n+\n+\t    vec_safe_insert (CONSTRUCTOR_ELTS (*valp), idx, ce);\n+\t    cep = CONSTRUCTOR_ELT (*valp, idx);\n+\t  }\n+\tfound:;\n \t}\n       valp = &cep->value;\n     }"}, {"sha": "f977fc82992d6a855c5395a75cfd3b890f95963f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88504f3435845976b92ee7e9d358f8e687502772/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88504f3435845976b92ee7e9d358f8e687502772/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=88504f3435845976b92ee7e9d358f8e687502772", "patch": "@@ -1,3 +1,8 @@\n+2016-03-31  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/70393\n+\t* g++.dg/cpp0x/constexpr-virtual6.C: New.\n+\n 2016-03-31  Kirill Yukhin  <kirill.yukhin@intel.com>\n \n \tPR target/70453"}, {"sha": "f5abf2cf9b940b32aa8ad0c95579cf96a8dc56bb", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-virtual6.C", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88504f3435845976b92ee7e9d358f8e687502772/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-virtual6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88504f3435845976b92ee7e9d358f8e687502772/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-virtual6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-virtual6.C?ref=88504f3435845976b92ee7e9d358f8e687502772", "patch": "@@ -0,0 +1,49 @@\n+// PR c++/70393\n+// { dg-do run { target c++11 } }\n+\n+/* 'ab' has a static initializer, but we flubbed the initializer,\n+   because of B being the primary base.  */\n+\n+struct A\n+{\n+  int a = 1;\n+};\n+\n+struct B\n+{\n+  B *element = (B*)2;\n+\n+    virtual int vfunc() = 0;\n+\n+    int call_element()\n+    {\n+      return element->vfunc();\n+    }\n+\n+    void set_element()\n+    {\n+      element = this;\n+    }\n+};\n+\n+struct AB : public A, public B\n+{\n+    int vfunc()\n+    {\n+      return 0;\n+    }\n+};\n+\n+static AB ab;\n+\n+int main()\n+{\n+  if (ab.a != 1)\n+    return 1;\n+  if (ab.element != (void*)2)\n+    return 2;\n+  \n+  ab.set_element();\n+  return ab.call_element();\n+}\n+"}, {"sha": "b0f2af03de492b1499ab52a73a49d2ec33920045", "filename": "gcc/varasm.c", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88504f3435845976b92ee7e9d358f8e687502772/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88504f3435845976b92ee7e9d358f8e687502772/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=88504f3435845976b92ee7e9d358f8e687502772", "patch": "@@ -4929,6 +4929,14 @@ output_constructor_regular_field (oc_local_state *local)\n \n   unsigned int align2;\n \n+  /* Output any buffered-up bit-fields preceding this element.  */\n+  if (local->byte_buffer_in_use)\n+    {\n+      assemble_integer (GEN_INT (local->byte), 1, BITS_PER_UNIT, 1);\n+      local->total_bytes++;\n+      local->byte_buffer_in_use = false;\n+    }\n+\n   if (local->index != NULL_TREE)\n     {\n       /* Perform the index calculation in modulo arithmetic but\n@@ -4945,22 +4953,19 @@ output_constructor_regular_field (oc_local_state *local)\n   else\n     fieldpos = 0;\n \n-  /* Output any buffered-up bit-fields preceding this element.  */\n-  if (local->byte_buffer_in_use)\n-    {\n-      assemble_integer (GEN_INT (local->byte), 1, BITS_PER_UNIT, 1);\n-      local->total_bytes++;\n-      local->byte_buffer_in_use = false;\n-    }\n-\n   /* Advance to offset of this element.\n      Note no alignment needed in an array, since that is guaranteed\n      if each element has the proper size.  */\n-  if ((local->field != NULL_TREE || local->index != NULL_TREE)\n-      && fieldpos > local->total_bytes)\n+  if (local->field != NULL_TREE || local->index != NULL_TREE)\n     {\n-      assemble_zeros (fieldpos - local->total_bytes);\n-      local->total_bytes = fieldpos;\n+      if (fieldpos > local->total_bytes)\n+\t{\n+\t  assemble_zeros (fieldpos - local->total_bytes);\n+\t  local->total_bytes = fieldpos;\n+\t}\n+      else\n+\t/* Must not go backwards.  */\n+\tgcc_assert (fieldpos == local->total_bytes);\n     }\n \n   /* Find the alignment of this element.  */"}]}