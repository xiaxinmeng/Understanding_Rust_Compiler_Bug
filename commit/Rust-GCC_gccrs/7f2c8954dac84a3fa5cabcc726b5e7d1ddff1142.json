{"sha": "7f2c8954dac84a3fa5cabcc726b5e7d1ddff1142", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2YyYzg5NTRkYWM4NGEzZmE1Y2FiY2M3MjZiNWU3ZDFkZGZmMTE0Mg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-06-13T09:40:19Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-06-13T09:40:19Z"}, "message": "[multiple changes]\n\n2014-06-13  Yannick Moy  <moy@adacore.com>\n\n\t* sem_warn.adb (Check_Unset_References): Take\n\tcase of Refined_Post into account in Within_Postcondition check.\n\n2014-06-13  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* freeze.adb (Freeze_Record_Type): Volatile types are not allowed in\n\tSPARK.\n\n2014-06-13  Yannick Moy  <moy@adacore.com>\n\n\t* sem_ch13.adb (Analyze_Aspect_Specifications/Aspect_Import,\n\tAspect_Export): Consider that variables may be set outside the program.\n\nFrom-SVN: r211611", "tree": {"sha": "9392b6fe7a29491493d769638d43c961173996f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9392b6fe7a29491493d769638d43c961173996f0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7f2c8954dac84a3fa5cabcc726b5e7d1ddff1142", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f2c8954dac84a3fa5cabcc726b5e7d1ddff1142", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f2c8954dac84a3fa5cabcc726b5e7d1ddff1142", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f2c8954dac84a3fa5cabcc726b5e7d1ddff1142/comments", "author": null, "committer": null, "parents": [{"sha": "28bc33232d59072bc16ee35f5677820b455edfcd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28bc33232d59072bc16ee35f5677820b455edfcd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28bc33232d59072bc16ee35f5677820b455edfcd"}], "stats": {"total": 49, "additions": 36, "deletions": 13}, "files": [{"sha": "3a0b1e6567ed7dd4cc2d81a6b0157bd1adbd3119", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f2c8954dac84a3fa5cabcc726b5e7d1ddff1142/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f2c8954dac84a3fa5cabcc726b5e7d1ddff1142/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=7f2c8954dac84a3fa5cabcc726b5e7d1ddff1142", "patch": "@@ -1,3 +1,18 @@\n+2014-06-13  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_warn.adb (Check_Unset_References): Take\n+\tcase of Refined_Post into account in Within_Postcondition check.\n+\n+2014-06-13  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* freeze.adb (Freeze_Record_Type): Volatile types are not allowed in\n+\tSPARK.\n+\n+2014-06-13  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_ch13.adb (Analyze_Aspect_Specifications/Aspect_Import,\n+\tAspect_Export): Consider that variables may be set outside the program.\n+\n 2014-06-13  Robert Dewar  <dewar@adacore.com>\n \n \t* back_end.adb (Make_Id): New function."}, {"sha": "bfd15f3bd18c69179a9db2287efb14ae7c413e10", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f2c8954dac84a3fa5cabcc726b5e7d1ddff1142/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f2c8954dac84a3fa5cabcc726b5e7d1ddff1142/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=7f2c8954dac84a3fa5cabcc726b5e7d1ddff1142", "patch": "@@ -3359,18 +3359,11 @@ package body Freeze is\n          --  they are not standard Ada legality rules.\n \n          if SPARK_Mode = On then\n-            if Is_SPARK_Volatile (Rec) then\n-\n-               --  A discriminated type cannot be volatile (SPARK RM C.6(4))\n-\n-               if Has_Discriminants (Rec) then\n-                  Error_Msg_N (\"discriminated type & cannot be volatile\", Rec);\n \n-               --  A tagged type cannot be volatile (SPARK RM C.6(5))\n+            --  Volatile types are not allowed in SPARK (SPARK RM C.6(1))\n \n-               elsif Is_Tagged_Type (Rec) then\n-                  Error_Msg_N (\"tagged type & cannot be volatile\", Rec);\n-               end if;\n+            if Is_SPARK_Volatile (Rec) then\n+               Error_Msg_N (\"volatile type not allowed\", Rec);\n \n             --  A non-volatile record type cannot contain volatile components\n             --  (SPARK RM C.6(2)). The check is performed at freeze point"}, {"sha": "31256d22f8f6cf175c4acd18715d793d20a18bdf", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f2c8954dac84a3fa5cabcc726b5e7d1ddff1142/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f2c8954dac84a3fa5cabcc726b5e7d1ddff1142/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=7f2c8954dac84a3fa5cabcc726b5e7d1ddff1142", "patch": "@@ -1603,7 +1603,7 @@ package body Sem_Ch13 is\n                      goto Continue;\n                   end if;\n \n-                  --  For case of address aspect, we don't consider that we\n+                  --  For the case of aspect Address, we don't consider that we\n                   --  know the entity is never set in the source, since it is\n                   --  is likely aliasing is occurring.\n \n@@ -2691,6 +2691,19 @@ package body Sem_Ch13 is\n \n                   elsif A_Id = Aspect_Import or else A_Id = Aspect_Export then\n \n+                     --  For the case of aspects Import and Export, we don't\n+                     --  consider that we know the entity is never set in the\n+                     --  source, since it is is likely modified outside the\n+                     --  program.\n+\n+                     --  Note: one might think that the analysis of the\n+                     --  resulting pragma would take care of that, but\n+                     --  that's not the case since it won't be from source.\n+\n+                     if Ekind (E) = E_Variable then\n+                        Set_Never_Set_In_Source (E, False);\n+                     end if;\n+\n                      --  Verify that there is an aspect Convention that will\n                      --  incorporate the Import/Export aspect, and eventual\n                      --  Link/External names."}, {"sha": "4c2f78c2bc29339c4a25ce63e4e6d316b773b672", "filename": "gcc/ada/sem_warn.adb", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f2c8954dac84a3fa5cabcc726b5e7d1ddff1142/gcc%2Fada%2Fsem_warn.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f2c8954dac84a3fa5cabcc726b5e7d1ddff1142/gcc%2Fada%2Fsem_warn.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_warn.adb?ref=7f2c8954dac84a3fa5cabcc726b5e7d1ddff1142", "patch": "@@ -1810,8 +1810,9 @@ package body Sem_Warn is\n                      SE : constant Entity_Id := Scope (E);\n \n                      function Within_Postcondition return Boolean;\n-                     --  Returns True iff N is within a Postcondition, an\n-                     --  Ensures component in a Test_Case, or a Contract_Cases.\n+                     --  Returns True iff N is within a Postcondition, a\n+                     --  Refined_Post, an Ensures component in a Test_Case,\n+                     --  or a Contract_Cases.\n \n                      --------------------------\n                      -- Within_Postcondition --\n@@ -1826,6 +1827,7 @@ package body Sem_Warn is\n                            if Nkind (Nod) = N_Pragma\n                              and then Nam_In (Pragma_Name (Nod),\n                                               Name_Postcondition,\n+                                              Name_Refined_Post,\n                                               Name_Contract_Cases)\n                            then\n                               return True;"}]}