{"sha": "7c5bd57a753528f8a612d3e63d3cd0d53f99e71d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2M1YmQ1N2E3NTM1MjhmOGE2MTJkM2U2M2QzY2QwZDUzZjk5ZTcxZA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2017-08-30T11:10:03Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2017-08-30T11:10:03Z"}, "message": "[14/77] Make libgcc_floating_mode_supported_p take a scalar_float_mode\n\nAs per subject.\n\n2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n\t    Alan Hayward  <alan.hayward@arm.com>\n\t    David Sherwood  <david.sherwood@arm.com>\n\ngcc/\n\t* target.def (libgcc_floating_mode_supported_p): Take a\n\tscalar_float_mode.\n\t* doc/tm.texi: Regenerate.\n\t* targhooks.h (default_libgcc_floating_mode_supported_p): Take a\n\tscalar_float_mode.\n\t* targhooks.c (default_libgcc_floating_mode_supported_p): Likewise.\n\t* config/aarch64/aarch64.c (aarch64_libgcc_floating_mode_supported_p):\n\tLikewise.\n\nCo-Authored-By: Alan Hayward <alan.hayward@arm.com>\nCo-Authored-By: David Sherwood <david.sherwood@arm.com>\n\nFrom-SVN: r251466", "tree": {"sha": "49afc08515cabc57e69636deeb0d386cf6e408a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/49afc08515cabc57e69636deeb0d386cf6e408a1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7c5bd57a753528f8a612d3e63d3cd0d53f99e71d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c5bd57a753528f8a612d3e63d3cd0d53f99e71d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c5bd57a753528f8a612d3e63d3cd0d53f99e71d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c5bd57a753528f8a612d3e63d3cd0d53f99e71d/comments", "author": null, "committer": null, "parents": [{"sha": "1ce87609c91e51d7eee8284c5fe000c7d5b240db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ce87609c91e51d7eee8284c5fe000c7d5b240db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ce87609c91e51d7eee8284c5fe000c7d5b240db"}], "stats": {"total": 23, "additions": 18, "deletions": 5}, "files": [{"sha": "221693a8eed7c43910709204a00a6363783f0438", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c5bd57a753528f8a612d3e63d3cd0d53f99e71d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c5bd57a753528f8a612d3e63d3cd0d53f99e71d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7c5bd57a753528f8a612d3e63d3cd0d53f99e71d", "patch": "@@ -1,3 +1,16 @@\n+2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* target.def (libgcc_floating_mode_supported_p): Take a\n+\tscalar_float_mode.\n+\t* doc/tm.texi: Regenerate.\n+\t* targhooks.h (default_libgcc_floating_mode_supported_p): Take a\n+\tscalar_float_mode.\n+\t* targhooks.c (default_libgcc_floating_mode_supported_p): Likewise.\n+\t* config/aarch64/aarch64.c (aarch64_libgcc_floating_mode_supported_p):\n+\tLikewise.\n+\n 2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "3790830fec196188dfe891a7a65b36c2b327d50d", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c5bd57a753528f8a612d3e63d3cd0d53f99e71d/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c5bd57a753528f8a612d3e63d3cd0d53f99e71d/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=7c5bd57a753528f8a612d3e63d3cd0d53f99e71d", "patch": "@@ -15132,7 +15132,7 @@ aarch64_optab_supported_p (int op, machine_mode mode1, machine_mode,\n    if MODE is HFmode, and punt to the generic implementation otherwise.  */\n \n static bool\n-aarch64_libgcc_floating_mode_supported_p (machine_mode mode)\n+aarch64_libgcc_floating_mode_supported_p (scalar_float_mode mode)\n {\n   return (mode == HFmode\n \t  ? true"}, {"sha": "dd27db756580ef449a39a1c1e94babf35719a6bf", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c5bd57a753528f8a612d3e63d3cd0d53f99e71d/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c5bd57a753528f8a612d3e63d3cd0d53f99e71d/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=7c5bd57a753528f8a612d3e63d3cd0d53f99e71d", "patch": "@@ -4259,7 +4259,7 @@ If this hook allows @code{val} to have a scalar mode, then\n @code{int8x8x3_t}s in registers rather than forcing them onto the stack.\n @end deftypefn\n \n-@deftypefn {Target Hook} bool TARGET_LIBGCC_FLOATING_MODE_SUPPORTED_P (machine_mode @var{mode})\n+@deftypefn {Target Hook} bool TARGET_LIBGCC_FLOATING_MODE_SUPPORTED_P (scalar_float_mode @var{mode})\n Define this to return nonzero if libgcc provides support for the \n floating-point mode @var{mode}, which is known to pass \n @code{TARGET_SCALAR_MODE_SUPPORTED_P}.  The default version of this "}, {"sha": "1e7c8deb5268f2ff369b61fdac21bb3711ce854a", "filename": "gcc/target.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c5bd57a753528f8a612d3e63d3cd0d53f99e71d/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c5bd57a753528f8a612d3e63d3cd0d53f99e71d/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=7c5bd57a753528f8a612d3e63d3cd0d53f99e71d", "patch": "@@ -3378,7 +3378,7 @@ floating-point mode @var{mode}, which is known to pass \\n\\\n @code{TARGET_SCALAR_MODE_SUPPORTED_P}.  The default version of this \\n\\\n hook returns true for all of @code{SFmode}, @code{DFmode}, \\n\\\n @code{XFmode} and @code{TFmode}, if such modes exist.\",\n- bool, (machine_mode mode),\n+ bool, (scalar_float_mode mode),\n  default_libgcc_floating_mode_supported_p)\n \n DEFHOOK"}, {"sha": "2b7f27fdf0d253aed19a57e48105f60f5d806e79", "filename": "gcc/targhooks.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c5bd57a753528f8a612d3e63d3cd0d53f99e71d/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c5bd57a753528f8a612d3e63d3cd0d53f99e71d/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=7c5bd57a753528f8a612d3e63d3cd0d53f99e71d", "patch": "@@ -443,7 +443,7 @@ default_scalar_mode_supported_p (machine_mode mode)\n    be supported as a scalar mode).  */\n \n bool\n-default_libgcc_floating_mode_supported_p (machine_mode mode)\n+default_libgcc_floating_mode_supported_p (scalar_float_mode mode)\n {\n   switch (mode)\n     {"}, {"sha": "2ab7eec348f35e4713e38a457abca39377e63a2c", "filename": "gcc/targhooks.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c5bd57a753528f8a612d3e63d3cd0d53f99e71d/gcc%2Ftarghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c5bd57a753528f8a612d3e63d3cd0d53f99e71d/gcc%2Ftarghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.h?ref=7c5bd57a753528f8a612d3e63d3cd0d53f99e71d", "patch": "@@ -72,7 +72,7 @@ extern bool default_print_operand_punct_valid_p (unsigned char);\n extern tree default_mangle_assembler_name (const char *);\n \n extern bool default_scalar_mode_supported_p (machine_mode);\n-extern bool default_libgcc_floating_mode_supported_p (machine_mode);\n+extern bool default_libgcc_floating_mode_supported_p (scalar_float_mode);\n extern opt_scalar_float_mode default_floatn_mode (int, bool);\n extern bool targhook_words_big_endian (void);\n extern bool targhook_float_words_big_endian (void);"}]}