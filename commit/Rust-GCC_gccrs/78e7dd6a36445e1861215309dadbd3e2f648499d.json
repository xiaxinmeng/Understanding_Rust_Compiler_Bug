{"sha": "78e7dd6a36445e1861215309dadbd3e2f648499d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzhlN2RkNmEzNjQ0NWUxODYxMjE1MzA5ZGFkYmQzZTJmNjQ4NDk5ZA==", "commit": {"author": {"name": "Kai Tietz", "email": "kai.tietz@onevision.com", "date": "2010-10-17T19:43:34Z"}, "committer": {"name": "Kai Tietz", "email": "ktietz@gcc.gnu.org", "date": "2010-10-17T19:43:34Z"}, "message": "libgcov.c (create_file_directory): Enable it for win32 case.\n\n2010-10-17  Kai Tietz  <kai.tietz@onevision.com>\n\n        * libgcov.c (create_file_directory): Enable it for win32 case.\n        (gcov_exit): De-couple GCOV_PREFIX and GCOV_PREFIX_STRIP.\n        * doc/gcov.texi (GCOV_PREFIX): Adjusted.\n        (GCOV_PREFIX_SKIP): Likewise.\n\nFrom-SVN: r165596", "tree": {"sha": "252952abc06e8a29e55ed6c3e9c48a36641ca00d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/252952abc06e8a29e55ed6c3e9c48a36641ca00d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/78e7dd6a36445e1861215309dadbd3e2f648499d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78e7dd6a36445e1861215309dadbd3e2f648499d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78e7dd6a36445e1861215309dadbd3e2f648499d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78e7dd6a36445e1861215309dadbd3e2f648499d/comments", "author": null, "committer": null, "parents": [{"sha": "5b8b526e694bca2034af4cdeb8ad15e356446a98", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b8b526e694bca2034af4cdeb8ad15e356446a98", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b8b526e694bca2034af4cdeb8ad15e356446a98"}], "stats": {"total": 97, "additions": 67, "deletions": 30}, "files": [{"sha": "dd7a108e880db798d76b3bfd6403a27fe518979e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78e7dd6a36445e1861215309dadbd3e2f648499d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78e7dd6a36445e1861215309dadbd3e2f648499d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=78e7dd6a36445e1861215309dadbd3e2f648499d", "patch": "@@ -1,3 +1,10 @@\n+2010-10-17  Kai Tietz  <kai.tietz@onevision.com>\n+\n+\t* libgcov.c (create_file_directory): Enable it for win32 case.\n+\t(gcov_exit): De-couple GCOV_PREFIX and GCOV_PREFIX_STRIP.\n+\t* doc/gcov.texi (GCOV_PREFIX): Adjusted.\n+\t(GCOV_PREFIX_SKIP): Likewise.\n+\n 2010-10-17  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \t* doc/objc.texi (GNU Objective-C runtime API): New section."}, {"sha": "4c71e1950a161ffd8f89ad61eeb0d454dbd5b108", "filename": "gcc/doc/gcov.texi", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78e7dd6a36445e1861215309dadbd3e2f648499d/gcc%2Fdoc%2Fgcov.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78e7dd6a36445e1861215309dadbd3e2f648499d/gcc%2Fdoc%2Fgcov.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcov.texi?ref=78e7dd6a36445e1861215309dadbd3e2f648499d", "patch": "@@ -554,15 +554,15 @@ can relocate the data files based on two environment variables:\n @itemize @bullet\n @item\n GCOV_PREFIX contains the prefix to add to the absolute paths \n-in the object file. Prefix must be absolute as well, otherwise its \n-value is ignored. The default is no prefix.\n+in the object file. Prefix can be absolute, or relative.  The\n+default is no prefix.\n \n @item\n GCOV_PREFIX_STRIP indicates the how many initial directory names to strip off\n the hardwired absolute paths. Default value is 0.\n \n-@emph{Note:} GCOV_PREFIX_STRIP has no effect if GCOV_PREFIX is undefined, empty\n-or non-absolute.\n+@emph{Note:} If GCOV_PREFIX_STRIP is set without GCOV_PREFIX is undefined,\n+ then a relative path is made out of the hardwired absolute paths.\n @end itemize\n \n For example, if the object file @file{/user/build/foo.o} was built with"}, {"sha": "07f27db1363e9b35145d6a10972228916620803a", "filename": "gcc/libgcov.c", "status": "modified", "additions": 56, "deletions": 26, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78e7dd6a36445e1861215309dadbd3e2f648499d/gcc%2Flibgcov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78e7dd6a36445e1861215309dadbd3e2f648499d/gcc%2Flibgcov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibgcov.c?ref=78e7dd6a36445e1861215309dadbd3e2f648499d", "patch": "@@ -87,25 +87,38 @@ static gcov_unsigned_t gcov_crc32;\n /* Size of the longest file name. */\n static size_t gcov_max_filename = 0;\n \n-#ifdef TARGET_POSIX_IO\n /* Make sure path component of the given FILENAME exists, create\n    missing directories. FILENAME must be writable.\n    Returns zero on success, or -1 if an error occurred.  */\n \n static int\n create_file_directory (char *filename)\n {\n+#if !defined(TARGET_POSIX_IO) && !defined(_WIN32)\n+  (void) filename;\n+  return -1;\n+#else\n   char *s;\n \n-  for (s = filename + 1; *s != '\\0'; s++)\n+  s = filename;\n+\n+  if (HAS_DRIVE_SPEC(s))\n+    s += 2;\n+  if (IS_DIR_SEPARATOR(*s))\n+    ++s;\n+  for (; *s != '\\0'; s++)\n     if (IS_DIR_SEPARATOR(*s))\n       {\n         char sep = *s;\n \t*s  = '\\0';\n \n         /* Try to make directory if it doesn't already exist.  */\n         if (access (filename, F_OK) == -1\n+#ifdef TARGET_POSIX_IO\n             && mkdir (filename, 0755) == -1\n+#else\n+            && mkdir (filename) == -1\n+#endif\n             /* The directory might have been made by another process.  */\n \t    && errno != EEXIST)\n \t  {\n@@ -118,8 +131,8 @@ create_file_directory (char *filename)\n \t*s = sep;\n       };\n   return 0;\n-}\n #endif\n+}\n \n /* Check if VERSION of the info block PTR matches libgcov one.\n    Return 1 on success, or zero in case of versions mismatch.\n@@ -190,20 +203,21 @@ gcov_exit (void)\n \t}\n     }\n \n+  {\n+    /* Check if the level of dirs to strip off specified. */\n+    char *tmp = getenv(\"GCOV_PREFIX_STRIP\");\n+    if (tmp)\n+      {\n+\tgcov_prefix_strip = atoi (tmp);\n+\t/* Do not consider negative values. */\n+\tif (gcov_prefix_strip < 0)\n+\t  gcov_prefix_strip = 0;\n+      }\n+  }\n   /* Get file name relocation prefix.  Non-absolute values are ignored. */\n   gcov_prefix = getenv(\"GCOV_PREFIX\");\n-  if (gcov_prefix && IS_ABSOLUTE_PATH (gcov_prefix))\n+  if (gcov_prefix)\n     {\n-      /* Check if the level of dirs to strip off specified. */\n-      char *tmp = getenv(\"GCOV_PREFIX_STRIP\");\n-      if (tmp)\n-        {\n-          gcov_prefix_strip = atoi (tmp);\n-          /* Do not consider negative values. */\n-          if (gcov_prefix_strip < 0)\n-            gcov_prefix_strip = 0;\n-        }\n-\n       prefix_length = strlen(gcov_prefix);\n \n       /* Remove an unnecessary trailing '/' */\n@@ -213,8 +227,15 @@ gcov_exit (void)\n   else\n     prefix_length = 0;\n \n-  /* Allocate and initialize the filename scratch space.  */\n-  gi_filename = (char *) alloca (prefix_length + gcov_max_filename + 1);\n+  /* If no prefix was specified and a prefix stip, then we assume\n+     relative.  */\n+  if (gcov_prefix_strip != 0 && prefix_length == 0)\n+    {\n+      gcov_prefix = \".\";\n+      prefix_length = 1;\n+    }\n+  /* Allocate and initialize the filename scratch space plus one.  */\n+  gi_filename = (char *) alloca (prefix_length + gcov_max_filename + 2);\n   if (prefix_length)\n     memcpy (gi_filename, gcov_prefix, prefix_length);\n   gi_filename_up = gi_filename + prefix_length;\n@@ -233,31 +254,42 @@ gcov_exit (void)\n       gcov_unsigned_t tag, length;\n       gcov_position_t summary_pos = 0;\n       gcov_position_t eof_pos = 0;\n+      const char *fname, *s;\n+\n+      fname = gi_ptr->filename;\n \n       memset (&this_object, 0, sizeof (this_object));\n       memset (&object, 0, sizeof (object));\n \n+      /* Avoid to add multiple drive letters into combined path.  */\n+      if (prefix_length != 0 && HAS_DRIVE_SPEC(fname))\n+        fname += 2;\n+\n       /* Build relocated filename, stripping off leading\n          directories from the initial filename if requested. */\n       if (gcov_prefix_strip > 0)\n         {\n           int level = 0;\n-          const char *fname = gi_ptr->filename;\n-          const char *s;\n+          s = fname;\n+          if (IS_DIR_SEPARATOR(*s))\n+            ++s;\n \n           /* Skip selected directory levels. */\n-\t  for (s = fname + 1; (*s != '\\0') && (level < gcov_prefix_strip); s++)\n+\t  for (; (*s != '\\0') && (level < gcov_prefix_strip); s++)\n \t    if (IS_DIR_SEPARATOR(*s))\n \t      {\n \t\tfname = s;\n \t\tlevel++;\n-\t      };\n-\n-          /* Update complete filename with stripped original. */\n-          strcpy (gi_filename_up, fname);\n+\t      }\n         }\n+      /* Update complete filename with stripped original. */\n+      if (!IS_DIR_SEPARATOR (*fname))\n+\t{\n+\t  strcpy (gi_filename_up, \"/\");\n+\t  strcpy (gi_filename_up + 1, fname);\n+\t}\n       else\n-        strcpy (gi_filename_up, gi_ptr->filename);\n+        strcpy (gi_filename_up, fname);\n \n       /* Totals for this object file.  */\n       ci_ptr = gi_ptr->counts;\n@@ -297,15 +329,13 @@ gcov_exit (void)\n \n       if (!gcov_open (gi_filename))\n \t{\n-#ifdef TARGET_POSIX_IO\n \t  /* Open failed likely due to missed directory.\n \t     Create directory and retry to open file. */\n           if (create_file_directory (gi_filename))\n \t    {\n \t      fprintf (stderr, \"profiling:%s:Skip\\n\", gi_filename);\n \t      continue;\n \t    }\n-#endif\n \t  if (!gcov_open (gi_filename))\n \t    {\n               fprintf (stderr, \"profiling:%s:Cannot open\\n\", gi_filename);"}]}