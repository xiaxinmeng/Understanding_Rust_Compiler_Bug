{"sha": "236d76c4a9d180ad90cbba30d34236e19f37d609", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjM2ZDc2YzRhOWQxODBhZDkwY2JiYTMwZDM0MjM2ZTE5ZjM3ZDYwOQ==", "commit": {"author": {"name": "Tim Shen", "email": "timshen@google.com", "date": "2015-09-19T20:56:27Z"}, "committer": {"name": "Tim Shen", "email": "timshen@gcc.gnu.org", "date": "2015-09-19T20:56:27Z"}, "message": "re PR libstdc++/67361 (std::regex_error::what() should say something about the error_code)\n\n\tPR libstdc++/67361\n\t* include/bits/regex_error.h: Add __throw_regex_error that\n\tsupports string.\n\t* include/bits/regex_automaton.h: Add more specific exception\n\tmessages.\n\t* include/bits/regex_automaton.tcc: Likewise.\n\t* include/bits/regex_compiler.h: Likewise.\n\t* include/bits/regex_compiler.tcc: Likewise.\n\t* include/bits/regex_scanner.h: Likewise.\n\t* include/bits/regex_scanner.tcc: Likewise.\n\nFrom-SVN: r227936", "tree": {"sha": "a75c02faf1d6677e09033990847b555605e6436b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a75c02faf1d6677e09033990847b555605e6436b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/236d76c4a9d180ad90cbba30d34236e19f37d609", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/236d76c4a9d180ad90cbba30d34236e19f37d609", "html_url": "https://github.com/Rust-GCC/gccrs/commit/236d76c4a9d180ad90cbba30d34236e19f37d609", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/236d76c4a9d180ad90cbba30d34236e19f37d609/comments", "author": {"login": "timshen91", "id": 1157432, "node_id": "MDQ6VXNlcjExNTc0MzI=", "avatar_url": "https://avatars.githubusercontent.com/u/1157432?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timshen91", "html_url": "https://github.com/timshen91", "followers_url": "https://api.github.com/users/timshen91/followers", "following_url": "https://api.github.com/users/timshen91/following{/other_user}", "gists_url": "https://api.github.com/users/timshen91/gists{/gist_id}", "starred_url": "https://api.github.com/users/timshen91/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timshen91/subscriptions", "organizations_url": "https://api.github.com/users/timshen91/orgs", "repos_url": "https://api.github.com/users/timshen91/repos", "events_url": "https://api.github.com/users/timshen91/events{/privacy}", "received_events_url": "https://api.github.com/users/timshen91/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b8b71bc0d8ae11dcf3e9d6b69ac6f7940ddfeb8d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8b71bc0d8ae11dcf3e9d6b69ac6f7940ddfeb8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8b71bc0d8ae11dcf3e9d6b69ac6f7940ddfeb8d"}], "stats": {"total": 145, "additions": 110, "deletions": 35}, "files": [{"sha": "e689d948859c0db36264a9d1d84b7a49116360f5", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/236d76c4a9d180ad90cbba30d34236e19f37d609/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/236d76c4a9d180ad90cbba30d34236e19f37d609/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=236d76c4a9d180ad90cbba30d34236e19f37d609", "patch": "@@ -1,3 +1,16 @@\n+2015-09-19  Tim Shen  <timshen@google.com>\n+\n+\tPR libstdc++/67361\n+\t* include/bits/regex_error.h: Add __throw_regex_error that\n+\tsupports string.\n+\t* include/bits/regex_automaton.h: Add more specific exception\n+\tmessages.\n+\t* include/bits/regex_automaton.tcc: Likewise.\n+\t* include/bits/regex_compiler.h: Likewise.\n+\t* include/bits/regex_compiler.tcc: Likewise.\n+\t* include/bits/regex_scanner.h: Likewise.\n+\t* include/bits/regex_scanner.tcc: Likewise.\n+\n 2015-09-18  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/precompiled/extc++.h: Fix bootstrap error due to"}, {"sha": "1f672ee81051cd52b5cf09ea213fa3329f438df7", "filename": "libstdc++-v3/include/bits/regex_automaton.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/236d76c4a9d180ad90cbba30d34236e19f37d609/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_automaton.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/236d76c4a9d180ad90cbba30d34236e19f37d609/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_automaton.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_automaton.h?ref=236d76c4a9d180ad90cbba30d34236e19f37d609", "patch": "@@ -327,7 +327,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       {\n \tthis->push_back(std::move(__s));\n \tif (this->size() > _GLIBCXX_REGEX_STATE_LIMIT)\n-\t  __throw_regex_error(regex_constants::error_space);\n+\t  __throw_regex_error(\n+\t    regex_constants::error_space,\n+\t    \"Number of NFA states exceeds limit. Please use shorter regex \"\n+\t    \"string, or use smaller brace expression, or make \"\n+\t    \"_GLIBCXX_REGEX_STATE_LIMIT larger.\");\n \treturn this->size()-1;\n       }\n "}, {"sha": "9bb116450ec1620a680555e100bcb82dfb9fcecb", "filename": "libstdc++-v3/include/bits/regex_automaton.tcc", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/236d76c4a9d180ad90cbba30d34236e19f37d609/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_automaton.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/236d76c4a9d180ad90cbba30d34236e19f37d609/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_automaton.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_automaton.tcc?ref=236d76c4a9d180ad90cbba30d34236e19f37d609", "patch": "@@ -149,7 +149,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     _NFA<_TraitsT>::_M_insert_backref(size_t __index)\n     {\n       if (this->_M_flags & regex_constants::__polynomial)\n-\t__throw_regex_error(regex_constants::error_complexity);\n+\t__throw_regex_error(regex_constants::error_complexity,\n+\t\t\t    \"Unexpected back-reference in polynomial mode.\");\n       // To figure out whether a backref is valid, a stack is used to store\n       // unfinished sub-expressions. For example, when parsing\n       // \"(a(b)(c\\\\1(d)))\" at '\\\\1', _M_subexpr_count is 3, indicating that 3\n@@ -158,10 +159,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       // _M_paren_stack is {1, 3}, for incomplete \"(a..\" and \"(c..\". At this\n       // time, \"\\\\2\" is valid, but \"\\\\1\" and \"\\\\3\" are not.\n       if (__index >= _M_subexpr_count)\n-\t__throw_regex_error(regex_constants::error_backref);\n+\t__throw_regex_error(\n+\t  regex_constants::error_backref,\n+\t  \"Back-reference index exceeds current sub-expression count.\");\n       for (auto __it : this->_M_paren_stack)\n \tif (__index == __it)\n-\t  __throw_regex_error(regex_constants::error_backref);\n+\t  __throw_regex_error(\n+\t    regex_constants::error_backref,\n+\t    \"Back-reference referred to an opened sub-expression.\");\n       this->_M_has_backref = true;\n       _StateT __tmp(_S_opcode_backref);\n       __tmp._M_backref_index = __index;"}, {"sha": "1f6348aed2e58e2b13de8601374fb158ac36d671", "filename": "libstdc++-v3/include/bits/regex_compiler.h", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/236d76c4a9d180ad90cbba30d34236e19f37d609/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/236d76c4a9d180ad90cbba30d34236e19f37d609/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.h?ref=236d76c4a9d180ad90cbba30d34236e19f37d609", "patch": "@@ -392,7 +392,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tauto __st = _M_traits.lookup_collatename(__s.data(),\n \t\t\t\t\t\t __s.data() + __s.size());\n \tif (__st.empty())\n-\t  __throw_regex_error(regex_constants::error_collate);\n+\t  __throw_regex_error(regex_constants::error_collate,\n+\t\t\t      \"Invalid collate element.\");\n \t_M_char_set.push_back(_M_translator._M_translate(__st[0]));\n \t_GLIBCXX_DEBUG_ONLY(_M_is_ready = false);\n \treturn __st;\n@@ -404,7 +405,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tauto __st = _M_traits.lookup_collatename(__s.data(),\n \t\t\t\t\t\t __s.data() + __s.size());\n \tif (__st.empty())\n-\t  __throw_regex_error(regex_constants::error_collate);\n+\t  __throw_regex_error(regex_constants::error_collate,\n+\t\t\t      \"Invalid equivalence class.\");\n \t__st = _M_traits.transform_primary(__st.data(),\n \t\t\t\t\t   __st.data() + __st.size());\n \t_M_equiv_set.push_back(__st);\n@@ -419,7 +421,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t\t\t\t __s.data() + __s.size(),\n \t\t\t\t\t\t __icase);\n \tif (__mask == 0)\n-\t  __throw_regex_error(regex_constants::error_ctype);\n+\t  __throw_regex_error(regex_constants::error_collate,\n+\t\t\t      \"Invalid character class.\");\n \tif (!__neg)\n \t  _M_class_set |= __mask;\n \telse\n@@ -431,7 +434,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _M_make_range(_CharT __l, _CharT __r)\n       {\n \tif (__l > __r)\n-\t  __throw_regex_error(regex_constants::error_range);\n+\t  __throw_regex_error(regex_constants::error_range,\n+\t\t\t      \"Invalid range in bracket expression.\");\n \t_M_range_set.push_back(make_pair(_M_translator._M_transform(__l),\n \t\t\t\t\t _M_translator._M_transform(__r)));\n \t_GLIBCXX_DEBUG_ONLY(_M_is_ready = false);"}, {"sha": "f7d52fc0d57cdde7948d6efa66f83dbaa908472f", "filename": "libstdc++-v3/include/bits/regex_compiler.tcc", "status": "modified", "additions": 26, "deletions": 11, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/236d76c4a9d180ad90cbba30d34236e19f37d609/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/236d76c4a9d180ad90cbba30d34236e19f37d609/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.tcc?ref=236d76c4a9d180ad90cbba30d34236e19f37d609", "patch": "@@ -162,7 +162,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  auto __neg = _M_value[0] == 'n';\n \t  this->_M_disjunction();\n \t  if (!_M_match_token(_ScannerT::_S_token_subexpr_end))\n-\t    __throw_regex_error(regex_constants::error_paren);\n+\t    __throw_regex_error(regex_constants::error_paren,\n+\t\t\t\t\"Parenthesis is not closed.\");\n \t  auto __tmp = _M_pop();\n \t  __tmp._M_append(_M_nfa->_M_insert_accept());\n \t  _M_stack.push(\n@@ -184,7 +185,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       auto __init = [this, &__neg]()\n \t{\n \t  if (_M_stack.empty())\n-\t    __throw_regex_error(regex_constants::error_badrepeat);\n+\t    __throw_regex_error(regex_constants::error_badrepeat,\n+\t\t\t\t\"Nothing to repeat before a quantifier.\");\n \t  __neg = __neg && _M_match_token(_ScannerT::_S_token_opt);\n \t};\n       if (_M_match_token(_ScannerT::_S_token_closure0))\n@@ -220,9 +222,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       else if (_M_match_token(_ScannerT::_S_token_interval_begin))\n \t{\n \t  if (_M_stack.empty())\n-\t    __throw_regex_error(regex_constants::error_badrepeat);\n+\t    __throw_regex_error(regex_constants::error_badrepeat,\n+\t\t\t\t\"Nothing to repeat before a quantifier.\");\n \t  if (!_M_match_token(_ScannerT::_S_token_dup_count))\n-\t    __throw_regex_error(regex_constants::error_badbrace);\n+\t    __throw_regex_error(regex_constants::error_badbrace,\n+\t\t\t\t\"Unexpected token in brace expression.\");\n \t  _StateSeqT __r(_M_pop());\n \t  _StateSeqT __e(*_M_nfa, _M_nfa->_M_insert_dummy());\n \t  long __min_rep = _M_cur_int_value(10);\n@@ -238,7 +242,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  else\n \t    __n = 0;\n \t  if (!_M_match_token(_ScannerT::_S_token_interval_end))\n-\t    __throw_regex_error(regex_constants::error_brace);\n+\t    __throw_regex_error(regex_constants::error_brace,\n+\t\t\t\t\"Unexpected end of brace expression.\");\n \n \t  __neg = __neg && _M_match_token(_ScannerT::_S_token_opt);\n \n@@ -257,7 +262,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  else\n \t    {\n \t      if (__n < 0)\n-\t\t__throw_regex_error(regex_constants::error_badbrace);\n+\t\t__throw_regex_error(regex_constants::error_badbrace,\n+\t\t\t\t    \"Invalid range in brace expression.\");\n \t      auto __end = _M_nfa->_M_insert_dummy();\n \t      // _M_alt is the \"match more\" branch, and _M_next is the\n \t      // \"match less\" one. Switch _M_alt and _M_next of all created\n@@ -324,7 +330,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  _StateSeqT __r(*_M_nfa, _M_nfa->_M_insert_dummy());\n \t  this->_M_disjunction();\n \t  if (!_M_match_token(_ScannerT::_S_token_subexpr_end))\n-\t    __throw_regex_error(regex_constants::error_paren);\n+\t    __throw_regex_error(regex_constants::error_paren,\n+\t\t\t\t\"Parenthesis is not closed.\");\n \t  __r._M_append(_M_pop());\n \t  _M_stack.push(__r);\n \t}\n@@ -333,7 +340,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  _StateSeqT __r(*_M_nfa, _M_nfa->_M_insert_subexpr_begin());\n \t  this->_M_disjunction();\n \t  if (!_M_match_token(_ScannerT::_S_token_subexpr_end))\n-\t    __throw_regex_error(regex_constants::error_paren);\n+\t    __throw_regex_error(regex_constants::error_paren,\n+\t\t\t\t\"Parenthesis is not closed.\");\n \t  __r._M_append(_M_pop());\n \t  __r._M_append(_M_nfa->_M_insert_subexpr_end());\n \t  _M_stack.push(__r);\n@@ -474,7 +482,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t{\n \t\t  if (_M_match_token(_ScannerT::_S_token_bracket_end))\n \t\t    return false;\n-\t\t  __throw_regex_error(regex_constants::error_range);\n+\t\t  __throw_regex_error(\n+\t\t    regex_constants::error_range,\n+\t\t    \"Unexpected dash in bracket expression. For POSIX syntax, \"\n+\t\t    \"a dash is not treated literally only when it is at \"\n+\t\t    \"beginning or end.\");\n \t\t}\n \t      __last_char.first = true;\n \t      __last_char.second = _M_value[0];\n@@ -492,7 +504,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t    {\n \t\t      if (_M_scanner._M_get_token()\n \t\t\t  != _ScannerT::_S_token_bracket_end)\n-\t\t\t__throw_regex_error(regex_constants::error_range);\n+\t\t\t__throw_regex_error(\n+\t\t\t  regex_constants::error_range,\n+\t\t\t  \"Unexpected end of bracket expression.\");\n \t\t      __matcher._M_add_char(_M_value[0]);\n \t\t    }\n \t\t}\n@@ -508,7 +522,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t\t\t _M_ctype.is(_CtypeT::upper,\n \t\t\t\t\t\t     _M_value[0]));\n       else\n-\t__throw_regex_error(regex_constants::error_brack);\n+\t__throw_regex_error(regex_constants::error_brack,\n+\t\t\t    \"Unexpected character in bracket expression.\");\n \n       return true;\n     }"}, {"sha": "be19fc10a3ef7dc1f6d65a6836dcf0f2d7970618", "filename": "libstdc++-v3/include/bits/regex_error.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/236d76c4a9d180ad90cbba30d34236e19f37d609/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_error.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/236d76c4a9d180ad90cbba30d34236e19f37d609/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_error.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_error.h?ref=236d76c4a9d180ad90cbba30d34236e19f37d609", "patch": "@@ -155,12 +155,23 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     regex_constants::error_type\n     code() const\n     { return _M_code; }\n+\n+  private:\n+    regex_error(regex_constants::error_type __ecode, const char* __what)\n+    : std::runtime_error(__what), _M_code(__ecode)\n+    { }\n+\n+    friend void __throw_regex_error(regex_constants::error_type, const char*);\n   };\n \n   //@} // group regex\n \n   void\n   __throw_regex_error(regex_constants::error_type __ecode);\n \n+  inline void\n+  __throw_regex_error(regex_constants::error_type __ecode, const char* __what)\n+  { _GLIBCXX_THROW_OR_ABORT(regex_error(__ecode, __what)); }\n+\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std"}, {"sha": "7d24e0676b3045b83018495ae086a0f01fd7358f", "filename": "libstdc++-v3/include/bits/regex_scanner.tcc", "status": "modified", "additions": 39, "deletions": 16, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/236d76c4a9d180ad90cbba30d34236e19f37d609/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_scanner.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/236d76c4a9d180ad90cbba30d34236e19f37d609/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_scanner.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_scanner.tcc?ref=236d76c4a9d180ad90cbba30d34236e19f37d609", "patch": "@@ -108,7 +108,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       if (__c == '\\\\')\n \t{\n \t  if (_M_current == _M_end)\n-\t    __throw_regex_error(regex_constants::error_escape);\n+\t    __throw_regex_error(\n+\t      regex_constants::error_escape,\n+\t      \"Unexpected end of regex when escaping.\");\n \n \t  if (!_M_is_basic()\n \t      || (*_M_current != '('\n@@ -125,7 +127,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  if (_M_is_ecma() && *_M_current == '?')\n \t    {\n \t      if (++_M_current == _M_end)\n-\t\t__throw_regex_error(regex_constants::error_paren);\n+\t\t__throw_regex_error(\n+\t\t  regex_constants::error_paren,\n+\t\t  \"Unexpected end of regex when in an open parenthesis.\");\n \n \t      if (*_M_current == ':')\n \t\t{\n@@ -145,7 +149,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t  _M_value.assign(1, 'n');\n \t\t}\n \t      else\n-\t\t__throw_regex_error(regex_constants::error_paren);\n+\t\t__throw_regex_error(\n+\t\t  regex_constants::error_paren,\n+\t\t  \"Invalid special open parenthesis.\");\n \t    }\n \t  else if (_M_flags & regex_constants::nosubs)\n \t    _M_token = _S_token_subexpr_no_group_begin;\n@@ -204,14 +210,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     _M_scan_in_bracket()\n     {\n       if (_M_current == _M_end)\n-\t__throw_regex_error(regex_constants::error_brack);\n+\t__throw_regex_error(\n+\t  regex_constants::error_brack,\n+\t  \"Unexpected end of regex when in bracket expression.\");\n \n       auto __c = *_M_current++;\n \n       if (__c == '[')\n \t{\n \t  if (_M_current == _M_end)\n-\t    __throw_regex_error(regex_constants::error_brack);\n+\t    __throw_regex_error(regex_constants::error_brack,\n+\t\t\t\t\"Unexpected character class open bracket.\");\n \n \t  if (*_M_current == '.')\n \t    {\n@@ -261,7 +270,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     _M_scan_in_brace()\n     {\n       if (_M_current == _M_end)\n-\t__throw_regex_error(regex_constants::error_brace);\n+\t__throw_regex_error(\n+\t  regex_constants::error_brace,\n+\t  \"Unexpected end of regex when in brace expression.\");\n \n       auto __c = *_M_current++;\n \n@@ -285,15 +296,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t      ++_M_current;\n \t    }\n \t  else\n-\t    __throw_regex_error(regex_constants::error_badbrace);\n+\t    __throw_regex_error(regex_constants::error_badbrace,\n+\t\t\t\t\"Unexpected character in brace expression.\");\n \t}\n       else if (__c == '}')\n \t{\n \t  _M_state = _S_state_normal;\n \t  _M_token = _S_token_interval_end;\n \t}\n       else\n-\t__throw_regex_error(regex_constants::error_badbrace);\n+\t__throw_regex_error(regex_constants::error_badbrace,\n+\t\t\t    \"Unexpected character in brace expression.\");\n     }\n \n   template<typename _CharT>\n@@ -302,7 +315,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     _M_eat_escape_ecma()\n     {\n       if (_M_current == _M_end)\n-\t__throw_regex_error(regex_constants::error_escape);\n+\t__throw_regex_error(regex_constants::error_escape,\n+\t\t\t    \"Unexpected end of regex when escaping.\");\n \n       auto __c = *_M_current++;\n       auto __pos = _M_find_escape(_M_ctype.narrow(__c, '\\0'));\n@@ -336,7 +350,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       else if (__c == 'c')\n \t{\n \t  if (_M_current == _M_end)\n-\t    __throw_regex_error(regex_constants::error_escape);\n+\t    __throw_regex_error(\n+\t      regex_constants::error_escape,\n+\t      \"Unexpected end of regex when reading control code.\");\n \t  _M_token = _S_token_ord_char;\n \t  _M_value.assign(1, *_M_current++);\n \t}\n@@ -347,7 +363,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t    {\n \t      if (_M_current == _M_end\n \t\t  || !_M_ctype.is(_CtypeT::xdigit, *_M_current))\n-\t\t__throw_regex_error(regex_constants::error_escape);\n+\t\t__throw_regex_error(\n+\t\t  regex_constants::error_escape,\n+\t\t  \"Unexpected end of regex when ascii character.\");\n \t      _M_value += *_M_current++;\n \t    }\n \t  _M_token = _S_token_hex_num;\n@@ -376,7 +394,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     _M_eat_escape_posix()\n     {\n       if (_M_current == _M_end)\n-\t__throw_regex_error(regex_constants::error_escape);\n+\t__throw_regex_error(regex_constants::error_escape,\n+\t\t\t    \"Unexpected end of regex when escaping.\");\n \n       auto __c = *_M_current;\n       auto __pos = std::strchr(_M_spec_char, _M_ctype.narrow(__c, '\\0'));\n@@ -401,7 +420,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t{\n #ifdef __STRICT_ANSI__\n \t  // POSIX says it is undefined to escape ordinary characters\n-\t  __throw_regex_error(regex_constants::error_escape);\n+\t  __throw_regex_error(regex_constants::error_escape,\n+\t\t\t      \"Unexpected escape character.\");\n #else\n \t  _M_token = _S_token_ord_char;\n \t  _M_value.assign(1, __c);\n@@ -441,7 +461,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  return;\n \t}\n       else\n-\t__throw_regex_error(regex_constants::error_escape);\n+\t__throw_regex_error(regex_constants::error_escape,\n+\t\t\t    \"Unexpected escape character.\");\n     }\n \n   // Eats a character class or throws an exception.\n@@ -460,9 +481,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  || *_M_current++ != ']') // skip ']'\n \t{\n \t  if (__ch == ':')\n-\t    __throw_regex_error(regex_constants::error_ctype);\n+\t    __throw_regex_error(regex_constants::error_ctype,\n+\t\t\t\t\"Unexpected end of character class.\");\n \t  else\n-\t    __throw_regex_error(regex_constants::error_collate);\n+\t    __throw_regex_error(regex_constants::error_collate,\n+\t\t\t\t\"Unexpected end of character class.\");\n \t}\n     }\n "}]}