{"sha": "1f520d3412962e22b0338461d82f41abba8a4f12", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWY1MjBkMzQxMjk2MmUyMmIwMzM4NDYxZDgyZjQxYWJiYThhNGYxMg==", "commit": {"author": {"name": "Delia Burduv", "email": "delia.burduv@arm.com", "date": "2020-03-04T19:25:09Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-03-06T09:48:54Z"}, "message": "aarch64: ACLE intrinsics for BFCVTN, BFCVTN2 and BFCVT\n\nThis patch adds the Armv8.6-a ACLE intrinsics for bfcvtn, bfcvtn2 and\nbfcvt as part of the BFloat16 extension.\n(https://developer.arm.com/architectures/instruction-sets/simd-isas/neon/intrinsics)\nThe intrinsics are declared in arm_bf16.h and arm_neon.h and the RTL\npatterns are defined in aarch64-simd.md.\n\n2020-03-06  Delia Burduv  <delia.burduv@arm.com>\n\ngcc/\n\t* config/aarch64/aarch64-simd-builtins.def\n\t(bfcvtn): New built-in function.\n\t(bfcvtn_q): New built-in function.\n\t(bfcvtn2): New built-in function.\n\t(bfcvt): New built-in function.\n\t* config/aarch64/aarch64-simd.md\n\t(aarch64_bfcvtn<q><mode>): New pattern.\n\t(aarch64_bfcvtn2v8bf): New pattern.\n\t(aarch64_bfcvtbf): New pattern.\n\t* config/aarch64/arm_bf16.h (float32_t): New typedef.\n\t(vcvth_bf16_f32): New intrinsic.\n\t* config/aarch64/arm_bf16.h (vcvt_bf16_f32): New intrinsic.\n\t(vcvtq_low_bf16_f32): New intrinsic.\n\t(vcvtq_high_bf16_f32): New intrinsic.\n\t* config/aarch64/iterators.md (V4SF_TO_BF): New mode iterator.\n\t(UNSPEC_BFCVTN): New UNSPEC.\n\t(UNSPEC_BFCVTN2): New UNSPEC.\n\t(UNSPEC_BFCVT): New UNSPEC.\n\t* config/arm/types.md (bf_cvt): New type.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/advsimd-intrinsics/bfcvt-compile.c: New test.\n\t* gcc.target/aarch64/advsimd-intrinsics/bfcvt-nobf16.c: New test.\n\t* gcc.target/aarch64/advsimd-intrinsics/bfcvt-nosimd.c: New test.\n\t* gcc.target/aarch64/advsimd-intrinsics/bfcvtnq2-untied.c: New test.", "tree": {"sha": "622acb6d0381ce54ce1631662fe9af22a09f2536", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/622acb6d0381ce54ce1631662fe9af22a09f2536"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1f520d3412962e22b0338461d82f41abba8a4f12", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f520d3412962e22b0338461d82f41abba8a4f12", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f520d3412962e22b0338461d82f41abba8a4f12", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f520d3412962e22b0338461d82f41abba8a4f12/comments", "author": null, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "655e5c29ae4080666154b3e10ac81116a1b7a638", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/655e5c29ae4080666154b3e10ac81116a1b7a638", "html_url": "https://github.com/Rust-GCC/gccrs/commit/655e5c29ae4080666154b3e10ac81116a1b7a638"}], "stats": {"total": 208, "additions": 208, "deletions": 0}, "files": [{"sha": "a5b04abc5dd89825c308d0ecaefea16c163045d2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f520d3412962e22b0338461d82f41abba8a4f12/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f520d3412962e22b0338461d82f41abba8a4f12/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1f520d3412962e22b0338461d82f41abba8a4f12", "patch": "@@ -1,3 +1,25 @@\n+2020-03-06  Delia Burduv  <delia.burduv@arm.com>\n+\n+\t* config/aarch64/aarch64-simd-builtins.def\n+\t(bfcvtn): New built-in function.\n+\t(bfcvtn_q): New built-in function.\n+\t(bfcvtn2): New built-in function.\n+\t(bfcvt): New built-in function.\n+\t* config/aarch64/aarch64-simd.md\n+\t(aarch64_bfcvtn<q><mode>): New pattern.\n+\t(aarch64_bfcvtn2v8bf): New pattern.\n+\t(aarch64_bfcvtbf): New pattern.\n+\t* config/aarch64/arm_bf16.h (float32_t): New typedef.\n+\t(vcvth_bf16_f32): New intrinsic.\n+\t* config/aarch64/arm_bf16.h (vcvt_bf16_f32): New intrinsic.\n+\t(vcvtq_low_bf16_f32): New intrinsic.\n+\t(vcvtq_high_bf16_f32): New intrinsic.\n+\t* config/aarch64/iterators.md (V4SF_TO_BF): New mode iterator.\n+\t(UNSPEC_BFCVTN): New UNSPEC.\n+\t(UNSPEC_BFCVTN2): New UNSPEC.\n+\t(UNSPEC_BFCVT): New UNSPEC.\n+\t* config/arm/types.md (bf_cvt): New type.\n+\n 2020-03-05  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/89229"}, {"sha": "cc0bd0e6b592528e4b1559e9a3f5b0153511dffd", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f520d3412962e22b0338461d82f41abba8a4f12/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f520d3412962e22b0338461d82f41abba8a4f12/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=1f520d3412962e22b0338461d82f41abba8a4f12", "patch": "@@ -714,3 +714,9 @@\n   VAR1 (TERNOP, simd_smmla, 0, v16qi)\n   VAR1 (TERNOPU, simd_ummla, 0, v16qi)\n   VAR1 (TERNOP_SSUS, simd_usmmla, 0, v16qi)\n+\n+  /* Implemented by aarch64_bfcvtn{q}{2}<mode>  */\n+  VAR1 (UNOP, bfcvtn, 0, v4bf)\n+  VAR1 (UNOP, bfcvtn_q, 0, v8bf)\n+  VAR1 (BINOP, bfcvtn2, 0, v8bf)\n+  VAR1 (UNOP, bfcvt, 0, bf)"}, {"sha": "035f3163223d0b618fa28beb007f2f70c7d6c060", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f520d3412962e22b0338461d82f41abba8a4f12/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f520d3412962e22b0338461d82f41abba8a4f12/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=1f520d3412962e22b0338461d82f41abba8a4f12", "patch": "@@ -7207,3 +7207,32 @@\n   \"<sur>mmla\\\\t%0.4s, %2.16b, %3.16b\"\n   [(set_attr \"type\" \"neon_mla_s_q\")]\n )\n+\n+;; bfcvtn\n+(define_insn \"aarch64_bfcvtn<q><mode>\"\n+  [(set (match_operand:V4SF_TO_BF 0 \"register_operand\" \"=w\")\n+        (unspec:V4SF_TO_BF [(match_operand:V4SF 1 \"register_operand\" \"w\")]\n+                            UNSPEC_BFCVTN))]\n+  \"TARGET_BF16_SIMD\"\n+  \"bfcvtn\\\\t%0.4h, %1.4s\"\n+  [(set_attr \"type\" \"neon_fp_cvt_narrow_s_q\")]\n+)\n+\n+(define_insn \"aarch64_bfcvtn2v8bf\"\n+  [(set (match_operand:V8BF 0 \"register_operand\" \"=w\")\n+        (unspec:V8BF [(match_operand:V8BF 1 \"register_operand\" \"0\")\n+                      (match_operand:V4SF 2 \"register_operand\" \"w\")]\n+                      UNSPEC_BFCVTN2))]\n+  \"TARGET_BF16_SIMD\"\n+  \"bfcvtn2\\\\t%0.8h, %2.4s\"\n+  [(set_attr \"type\" \"neon_fp_cvt_narrow_s_q\")]\n+)\n+\n+(define_insn \"aarch64_bfcvtbf\"\n+  [(set (match_operand:BF 0 \"register_operand\" \"=w\")\n+        (unspec:BF [(match_operand:SF 1 \"register_operand\" \"w\")]\n+                    UNSPEC_BFCVT))]\n+  \"TARGET_BF16_FP\"\n+  \"bfcvt\\\\t%h0, %s1\"\n+  [(set_attr \"type\" \"f_cvt\")]\n+)"}, {"sha": "984875dcc014300c489209c11abf41b1c47b7fbe", "filename": "gcc/config/aarch64/arm_bf16.h", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f520d3412962e22b0338461d82f41abba8a4f12/gcc%2Fconfig%2Faarch64%2Farm_bf16.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f520d3412962e22b0338461d82f41abba8a4f12/gcc%2Fconfig%2Faarch64%2Farm_bf16.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_bf16.h?ref=1f520d3412962e22b0338461d82f41abba8a4f12", "patch": "@@ -28,5 +28,18 @@\n #define _AARCH64_BF16_H_\n \n typedef __bf16 bfloat16_t;\n+typedef float float32_t;\n+\n+#pragma GCC push_options\n+#pragma GCC target (\"+nothing+bf16+nosimd\")\n+\n+__extension__ extern __inline bfloat16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vcvth_bf16_f32 (float32_t __a)\n+{\n+  return __builtin_aarch64_bfcvtbf (__a);\n+}\n+\n+#pragma GCC pop_options\n \n #endif"}, {"sha": "cc4ce76d16e6cb2451f384b7ede7c26bdb22d614", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f520d3412962e22b0338461d82f41abba8a4f12/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f520d3412962e22b0338461d82f41abba8a4f12/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=1f520d3412962e22b0338461d82f41abba8a4f12", "patch": "@@ -35634,6 +35634,27 @@ vbfmlaltq_laneq_f32 (float32x4_t __r, bfloat16x8_t __a, bfloat16x8_t __b,\n   return __builtin_aarch64_bfmlalt_lane_qv4sf (__r, __a, __b, __index);\n }\n \n+__extension__ extern __inline bfloat16x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vcvt_bf16_f32 (float32x4_t __a)\n+{\n+  return __builtin_aarch64_bfcvtnv4bf (__a);\n+}\n+\n+__extension__ extern __inline bfloat16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vcvtq_low_bf16_f32 (float32x4_t __a)\n+{\n+  return __builtin_aarch64_bfcvtn_qv8bf (__a);\n+}\n+\n+__extension__ extern __inline bfloat16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vcvtq_high_bf16_f32 (bfloat16x8_t __inactive, float32x4_t __a)\n+{\n+  return __builtin_aarch64_bfcvtn2v8bf (__inactive, __a);\n+}\n+\n #pragma GCC pop_options\n \n /* AdvSIMD 8-bit Integer Matrix Multiply (I8MM) intrinsics.  */"}, {"sha": "b56a050ac09b6482933203008fc834ce2b6ec5c1", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f520d3412962e22b0338461d82f41abba8a4f12/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f520d3412962e22b0338461d82f41abba8a4f12/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=1f520d3412962e22b0338461d82f41abba8a4f12", "patch": "@@ -462,6 +462,9 @@\n ;; SVE predicate modes that control 16-bit, 32-bit or 64-bit elements.\n (define_mode_iterator PRED_HSD [VNx8BI VNx4BI VNx2BI])\n \n+;; Bfloat16 modes to which V4SF can be converted\n+(define_mode_iterator V4SF_TO_BF [V4BF V8BF])\n+\n ;; ------------------------------------------------------------------\n ;; Unspec enumerations for Advance SIMD. These could well go into\n ;; aarch64.md but for their use in int_iterators here.\n@@ -828,6 +831,9 @@\n     UNSPEC_BFMLALB\t; Used in aarch64-sve.md.\n     UNSPEC_BFMLALT\t; Used in aarch64-sve.md.\n     UNSPEC_BFMMLA\t; Used in aarch64-sve.md.\n+    UNSPEC_BFCVTN      ; Used in aarch64-simd.md.\n+    UNSPEC_BFCVTN2     ; Used in aarch64-simd.md.\n+    UNSPEC_BFCVT       ; Used in aarch64-simd.md.\n ])\n \n ;; ------------------------------------------------------------------"}, {"sha": "09d597307308ba160368b1d70e8a849f25a96783", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f520d3412962e22b0338461d82f41abba8a4f12/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f520d3412962e22b0338461d82f41abba8a4f12/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1f520d3412962e22b0338461d82f41abba8a4f12", "patch": "@@ -1,3 +1,10 @@\n+2020-03-06  Delia Burduv  <delia.burduv@arm.com>\n+\n+\t* gcc.target/aarch64/advsimd-intrinsics/bfcvt-compile.c: New test.\n+\t* gcc.target/aarch64/advsimd-intrinsics/bfcvt-nobf16.c: New test.\n+\t* gcc.target/aarch64/advsimd-intrinsics/bfcvt-nosimd.c: New test.\n+\t* gcc.target/aarch64/advsimd-intrinsics/bfcvtnq2-untied.c: New test.\n+\n 2020-03-06  Kito Cheng  <kito.cheng@sifive.com>\n \n \tPR tree-optimization/90883"}, {"sha": "bbea630b1820d578bdf1619834f29b919f5c3f32", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/bfcvt-compile.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f520d3412962e22b0338461d82f41abba8a4f12/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fbfcvt-compile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f520d3412962e22b0338461d82f41abba8a4f12/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fbfcvt-compile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fbfcvt-compile.c?ref=1f520d3412962e22b0338461d82f41abba8a4f12", "patch": "@@ -0,0 +1,48 @@\n+/* { dg-do assemble { target { aarch64*-*-* } } } */\n+/* { dg-require-effective-target arm_v8_2a_bf16_neon_ok } */\n+/* { dg-add-options arm_v8_2a_bf16_neon } */\n+/* { dg-additional-options \"-save-temps\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" {-O[^0]} } } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+\n+#include <arm_neon.h>\n+\n+/*\n+**test_bfcvtn:\n+**     bfcvtn\tv0.4h, v0.4s\n+**     ret\n+*/\n+bfloat16x4_t test_bfcvtn (float32x4_t a)\n+{\n+  return vcvt_bf16_f32 (a);\n+}\n+\n+/*\n+**test_bfcvtnq:\n+**     bfcvtn\tv0.4h, v0.4s\n+**     ret\n+*/\n+bfloat16x8_t test_bfcvtnq (float32x4_t a)\n+{\n+  return vcvtq_low_bf16_f32 (a);\n+}\n+\n+/*\n+**test_bfcvtnq2:\n+**     bfcvtn2\tv0.8h, v1.4s\n+**     ret\n+*/\n+bfloat16x8_t test_bfcvtnq2 (bfloat16x8_t inactive, float32x4_t a)\n+{\n+  return vcvtq_high_bf16_f32 (inactive, a);\n+}\n+\n+/*\n+**test_bfcvt:\n+**     bfcvt\th0, s0\n+**     ret\n+*/\n+bfloat16_t test_bfcvt (float32_t a)\n+{\n+  return vcvth_bf16_f32 (a);\n+}"}, {"sha": "9904d65f9148debc1a1e147d75e5c54fb0f9da71", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/bfcvt-nobf16.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f520d3412962e22b0338461d82f41abba8a4f12/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fbfcvt-nobf16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f520d3412962e22b0338461d82f41abba8a4f12/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fbfcvt-nobf16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fbfcvt-nobf16.c?ref=1f520d3412962e22b0338461d82f41abba8a4f12", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do assemble { target { aarch64*-*-* } } } */\n+/* { dg-additional-options \"-march=armv8.2-a+nobf16\" } */\n+\n+#include <arm_neon.h>\n+\n+bfloat16_t test_bfcvt (float32_t a)\n+{\n+  /* { dg-error \"inlining failed .* 'vcvth_bf16_f32\" \"\" { target *-*-* } 0 } */\n+  return vcvth_bf16_f32 (a);\n+}"}, {"sha": "c2631a541ead06f29ec7925720c08a63f82e3fbe", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/bfcvt-nosimd.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f520d3412962e22b0338461d82f41abba8a4f12/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fbfcvt-nosimd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f520d3412962e22b0338461d82f41abba8a4f12/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fbfcvt-nosimd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fbfcvt-nosimd.c?ref=1f520d3412962e22b0338461d82f41abba8a4f12", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do assemble { target { aarch64*-*-* } } } */\n+/* { dg-require-effective-target aarch64_asm_bf16_ok } */\n+/* { dg-additional-options \"-save-temps -march=armv8.2-a+bf16+nosimd\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-O[^0]\" } } */\n+\n+#include <arm_neon.h>\n+\n+/*\n+**test_bfcvt:\n+**     bfcvt h0, s0\n+**     ret\n+*/\n+bfloat16_t test_bfcvt (float32_t a)\n+{\n+  return vcvth_bf16_f32 (a);\n+}"}, {"sha": "b3b6db12358677b2f34169214241318e5d0d764f", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/bfcvtn-nobf16.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f520d3412962e22b0338461d82f41abba8a4f12/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fbfcvtn-nobf16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f520d3412962e22b0338461d82f41abba8a4f12/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fbfcvtn-nobf16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fbfcvtn-nobf16.c?ref=1f520d3412962e22b0338461d82f41abba8a4f12", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do assemble { target { aarch64*-*-* } } } */\n+/* { dg-additional-options \"-march=armv8.2-a+nobf16\" } */\n+\n+#include <arm_neon.h>\n+\n+bfloat16x4_t test_bfcvtn (float32x4_t a)\n+{\n+  /* { dg-error \"inlining failed .* 'vcvt_bf16_f32\" \"\" { target *-*-* } 0 } */\n+  return vcvt_bf16_f32 (a);\n+}"}, {"sha": "4b730e39d4ec2fb680235a61cc0a6d16a8ac4cad", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/bfcvtnq2-untied.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f520d3412962e22b0338461d82f41abba8a4f12/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fbfcvtnq2-untied.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f520d3412962e22b0338461d82f41abba8a4f12/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fbfcvtnq2-untied.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fbfcvtnq2-untied.c?ref=1f520d3412962e22b0338461d82f41abba8a4f12", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do assemble { target { aarch64*-*-* } } } */\n+/* { dg-require-effective-target arm_v8_2a_bf16_neon_ok } */\n+/* { dg-add-options arm_v8_2a_bf16_neon } */\n+/* { dg-additional-options \"-save-temps\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" {-O[^0]} } } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+\n+#include <arm_neon.h>\n+\n+/*\n+**test_bfcvtnq2_untied:\n+**     mov\tv0.16b, v1.16b\n+**     bfcvtn2\tv0.8h, v2.4s\n+**     ret\n+*/\n+bfloat16x8_t test_bfcvtnq2_untied (bfloat16x8_t unused, bfloat16x8_t inactive,\n+                                  float32x4_t a)\n+{\n+  return vcvtq_high_bf16_f32 (inactive, a);\n+}"}]}