{"sha": "e2f014fcefcd2ad56b31995329820bbd99072eae", "node_id": "C_kwDOANBUbNoAKGUyZjAxNGZjZWZjZDJhZDU2YjMxOTk1MzI5ODIwYmJkOTkwNzJlYWU", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-05-27T09:40:42Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-05-27T09:40:42Z"}, "message": "fold-const: Fix up -fsanitize=null in C++ [PR105729]\n\nThe following testcase triggers a false positive UBSan binding a reference\nto null diagnostics.\nIn the FE we instrument conversions from pointer to reference type\nto diagnose at runtime if the operand of such a conversion is 0.\nThe problem is that a GENERIC folding folds\n((const struct Bar *) ((const struct Foo *) this)->data) + (sizetype) range_check (x)\nconversion to const struct Bar & by converting to that the first\noperand of the POINTER_PLUS_EXPR.  But that changes when the -fsanitize=null\nbinding to reference runtime check occurs.  Without the optimization,\nit is invoked on the result of the POINTER_PLUS_EXPR, and as range_check\ncall throws, that means it never triggers in the testcase.\nWith the optimization, it checks whether this->data is NULL and it is.\n\nThe following patch avoids that optimization during GENERIC folding when\n-fsanitize=null is enabled and it is a cast from non-REFERENCE_TYPE to\nREFERENCE_TYPE.\n\n2022-05-27  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR sanitizer/105729\n\t* fold-const.cc (fold_unary_loc): Don't optimize (X &) ((Y *) z + w)\n\tto (X &) z + w if -fsanitize=null during GENERIC folding.\n\n\t* g++.dg/ubsan/pr105729.C: New test.", "tree": {"sha": "902887f32908d417854e82e9c4b5cf2cfdeac7a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/902887f32908d417854e82e9c4b5cf2cfdeac7a0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e2f014fcefcd2ad56b31995329820bbd99072eae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2f014fcefcd2ad56b31995329820bbd99072eae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2f014fcefcd2ad56b31995329820bbd99072eae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2f014fcefcd2ad56b31995329820bbd99072eae/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8255b49ed8ab37fd61d85bb48f97c618f05a8392", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8255b49ed8ab37fd61d85bb48f97c618f05a8392", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8255b49ed8ab37fd61d85bb48f97c618f05a8392"}], "stats": {"total": 39, "additions": 39, "deletions": 0}, "files": [{"sha": "fbdf3c824afe6e96f2151972a95c1559fe82f90c", "filename": "gcc/fold-const.cc", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2f014fcefcd2ad56b31995329820bbd99072eae/gcc%2Ffold-const.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2f014fcefcd2ad56b31995329820bbd99072eae/gcc%2Ffold-const.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.cc?ref=e2f014fcefcd2ad56b31995329820bbd99072eae", "patch": "@@ -9516,6 +9516,16 @@ fold_unary_loc (location_t loc, enum tree_code code, tree type, tree op0)\n \t\t  > min_align_of_type (TREE_TYPE (TREE_TYPE (arg00)))))\n \t    return NULL_TREE;\n \n+\t  /* Similarly, avoid this optimization in GENERIC for -fsanitize=null\n+\t     when type is a reference type and arg00's type is not,\n+\t     because arg00 could be validly nullptr and if arg01 doesn't return,\n+\t     we don't want false positive binding of reference to nullptr.  */\n+\t  if (TREE_CODE (type) == REFERENCE_TYPE\n+\t      && !in_gimple_form\n+\t      && sanitize_flags_p (SANITIZE_NULL)\n+\t      && TREE_CODE (TREE_TYPE (arg00)) != REFERENCE_TYPE)\n+\t    return NULL_TREE;\n+\n \t  arg00 = fold_convert_loc (loc, type, arg00);\n \t  return fold_build_pointer_plus_loc (loc, arg00, arg01);\n \t}"}, {"sha": "fb6766309948615a36f1fbf508876828512deedb", "filename": "gcc/testsuite/g++.dg/ubsan/pr105729.C", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2f014fcefcd2ad56b31995329820bbd99072eae/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fpr105729.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2f014fcefcd2ad56b31995329820bbd99072eae/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fpr105729.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fpr105729.C?ref=e2f014fcefcd2ad56b31995329820bbd99072eae", "patch": "@@ -0,0 +1,29 @@\n+// PR sanitizer/105729\n+// { dg-do run }\n+// { dg-options \"-fsanitize=null -fno-sanitize-recover=null\" }\n+\n+int\n+foo (int x)\n+{\n+  throw 0;\n+}\n+\n+struct S {};\n+struct T {\n+  S *data;\n+  T () : data (0) {}\n+  const S &bar (int x) const { return data[foo (x)]; }\n+};\n+\n+int\n+main ()\n+{\n+  T t;\n+  try\n+    {\n+      t.bar (-1);\n+    }\n+  catch (...)\n+    {\n+    }\n+}"}]}