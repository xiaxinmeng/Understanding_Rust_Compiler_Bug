{"sha": "4ec9d0962371c134d881d7dcfcef5effc8ed847f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGVjOWQwOTYyMzcxYzEzNGQ4ODFkN2RjZmNlZjVlZmZjOGVkODQ3Zg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-12-02T23:29:46Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-12-02T23:41:47Z"}, "message": "dwarf2out: Fix up add_scalar_info not to create invalid DWARF\n\nAs discussed in https://sourceware.org/bugzilla/show_bug.cgi?id=26987 ,\nfor very large bounds (which don't fit into HOST_WIDE_INT) GCC emits invalid\nDWARF.\nIn DWARF2, DW_AT_{lower,upper}_bound were constant reference class.\nIn DWARF3 they are block constant reference and the\nStatic and Dynamic Properties of Types\nchapter says:\n\"For a block, the value is interpreted as a DWARF expression; evaluation of the expression\nyields the value of the attribute.\"\nIn DWARF4/5 they are constant exprloc reference class.\nNow, for add_AT_wide we use DW_FORM_data16 (valid in constant class)\nwhen -gdwarf-5, but otherwise just use DW_FORM_block1, which is not constant\nclass, but block.\nFor DWARF3 this means emitting clearly invalid DWARF, because the\nDW_FORM_block1 should contain a DWARF expression, not random bytes\ncontaining the constant directly.\nFor DWARF2/DWARF4/5 it could be considered a GNU extension, but a very badly\ndesigned one when it means something different in DWARF3.\n\nThe following patch uses add_AT_wide only if we know we'll be using\nDW_FORM_data16, and otherwise wastes 2 extra bytes and emits in there\nDW_OP_implicit_value <size> before the constant.\n\n2020-12-03  Jakub Jelinek  <jakub@redhat.com>\n\n\t* dwarf2out.c (add_scalar_info): Only use add_AT_wide for 128-bit\n\tconstants and only in dwarf-5 or later, where DW_FORM_data16 is\n\tavailable.  Otherwise use DW_FORM_block*/DW_FORM_exprloc with\n\tDW_OP_implicit_value to describe the constant.", "tree": {"sha": "39088021f7d55ad0d028360c53813b35d3282c05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/39088021f7d55ad0d028360c53813b35d3282c05"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4ec9d0962371c134d881d7dcfcef5effc8ed847f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ec9d0962371c134d881d7dcfcef5effc8ed847f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ec9d0962371c134d881d7dcfcef5effc8ed847f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ec9d0962371c134d881d7dcfcef5effc8ed847f/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba3d8dffcc1c23b30370ab24fc20d09cff005d7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba3d8dffcc1c23b30370ab24fc20d09cff005d7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba3d8dffcc1c23b30370ab24fc20d09cff005d7b"}], "stats": {"total": 13, "additions": 12, "deletions": 1}, "files": [{"sha": "c23a3ca3f6dbbfffd7f9c1d438e191bd9d8f2d20", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ec9d0962371c134d881d7dcfcef5effc8ed847f/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ec9d0962371c134d881d7dcfcef5effc8ed847f/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=4ec9d0962371c134d881d7dcfcef5effc8ed847f", "patch": "@@ -20775,12 +20775,23 @@ add_scalar_info (dw_die_ref die, enum dwarf_attribute attr, tree value,\n \t  else\n \t    add_AT_int (die, attr, TREE_INT_CST_LOW (value));\n \t}\n-      else\n+      else if (dwarf_version >= 5\n+\t       && TREE_INT_CST_LOW (TYPE_SIZE (TREE_TYPE (value))) == 128)\n \t/* Otherwise represent the bound as an unsigned value with\n \t   the precision of its type.  The precision and signedness\n \t   of the type will be necessary to re-interpret it\n \t   unambiguously.  */\n \tadd_AT_wide (die, attr, wi::to_wide (value));\n+      else\n+\t{\n+\t  rtx v = immed_wide_int_const (wi::to_wide (value),\n+\t\t\t\t\tTYPE_MODE (TREE_TYPE (value)));\n+\t  dw_loc_descr_ref loc\n+\t    = loc_descriptor (v, TYPE_MODE (TREE_TYPE (value)),\n+\t\t\t      VAR_INIT_STATUS_INITIALIZED);\n+\t  if (loc)\n+\t    add_AT_loc (die, attr, loc);\n+\t}\n       return;\n     }\n "}]}