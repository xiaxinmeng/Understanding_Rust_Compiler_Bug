{"sha": "9d0baae10e10d02ba0f09215f7b70461bd21ebb0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWQwYmFhZTEwZTEwZDAyYmEwZjA5MjE1ZjdiNzA0NjFiZDIxZWJiMA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2010-05-15T15:06:47Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2010-05-15T15:06:47Z"}, "message": "re PR other/44038 (ICE: verify_stmts failed)\n\n2010-05-15  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/44038\n\t* tree-ssa-forwprop.c (forward_propagate_addr_expr_1): Avoid\n\ttaking the address of a V_C_E of a constant.\n\n\t* gcc.c-torture/compile/pr44038.c: New testcase.\n\nFrom-SVN: r159434", "tree": {"sha": "f1d10729aeb0fb72e554df99355cac2e070b9b16", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f1d10729aeb0fb72e554df99355cac2e070b9b16"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9d0baae10e10d02ba0f09215f7b70461bd21ebb0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d0baae10e10d02ba0f09215f7b70461bd21ebb0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d0baae10e10d02ba0f09215f7b70461bd21ebb0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d0baae10e10d02ba0f09215f7b70461bd21ebb0/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "75d2d58156dc31e09df91cbb901f2c27edc3fe05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75d2d58156dc31e09df91cbb901f2c27edc3fe05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75d2d58156dc31e09df91cbb901f2c27edc3fe05"}], "stats": {"total": 40, "additions": 36, "deletions": 4}, "files": [{"sha": "5829fad17943cd820657f6924b195e3a5eb704cc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d0baae10e10d02ba0f09215f7b70461bd21ebb0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d0baae10e10d02ba0f09215f7b70461bd21ebb0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9d0baae10e10d02ba0f09215f7b70461bd21ebb0", "patch": "@@ -1,3 +1,9 @@\n+2010-05-15  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/44038\n+\t* tree-ssa-forwprop.c (forward_propagate_addr_expr_1): Avoid\n+\ttaking the address of a V_C_E of a constant.\n+\n 2010-05-14  Jan Hubicka  <jh@suse.cz>\n \n \t* tree.h (memory_identifier_string): Remove."}, {"sha": "3223474115a26abe0454e1fd1ceb80f0668919ee", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d0baae10e10d02ba0f09215f7b70461bd21ebb0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d0baae10e10d02ba0f09215f7b70461bd21ebb0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9d0baae10e10d02ba0f09215f7b70461bd21ebb0", "patch": "@@ -1,3 +1,8 @@\n+2010-05-15  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/44038\n+\t* gcc.c-torture/compile/pr44038.c: New testcase.\n+\n 2010-05-15  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* gcc.target/i386/avx-cmpsd-1.c: Add -std=c99."}, {"sha": "574ff398b4270c22681a3e7dbae562c4d66af427", "filename": "gcc/testsuite/gcc.c-torture/compile/pr44038.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d0baae10e10d02ba0f09215f7b70461bd21ebb0/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr44038.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d0baae10e10d02ba0f09215f7b70461bd21ebb0/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr44038.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr44038.c?ref=9d0baae10e10d02ba0f09215f7b70461bd21ebb0", "patch": "@@ -0,0 +1,13 @@\n+struct Ustr {\n+    char data[1]; \n+};\n+int ustr_xi__embed_val_get(char *);\n+inline static int ustr_len(struct Ustr *s1)\n+{\n+  return ustr_xi__embed_val_get(s1->data);\n+}\n+static struct Ustr *s1 = ((struct Ustr *) \"\");\n+int tst(char *cstr)\n+{\n+  return ustr_len(s1);\n+}"}, {"sha": "836ca7c1aa8fbfe8cea55ed1a921e3d2489651f8", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d0baae10e10d02ba0f09215f7b70461bd21ebb0/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d0baae10e10d02ba0f09215f7b70461bd21ebb0/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=9d0baae10e10d02ba0f09215f7b70461bd21ebb0", "patch": "@@ -730,6 +730,7 @@ forward_propagate_addr_expr_1 (tree name, tree def_rhs,\n   gimple use_stmt = gsi_stmt (*use_stmt_gsi);\n   enum tree_code rhs_code;\n   bool res = true;\n+  bool addr_p = false;\n \n   gcc_assert (TREE_CODE (def_rhs) == ADDR_EXPR);\n \n@@ -802,8 +803,12 @@ forward_propagate_addr_expr_1 (tree name, tree def_rhs,\n   /* Strip away any outer COMPONENT_REF, ARRAY_REF or ADDR_EXPR\n      nodes from the RHS.  */\n   rhsp = gimple_assign_rhs1_ptr (use_stmt);\n-  while (handled_component_p (*rhsp)\n-\t || TREE_CODE (*rhsp) == ADDR_EXPR)\n+  if (TREE_CODE (*rhsp) == ADDR_EXPR)\n+    {\n+      rhsp = &TREE_OPERAND (*rhsp, 0);\n+      addr_p = true;\n+    }\n+  while (handled_component_p (*rhsp))\n     rhsp = &TREE_OPERAND (*rhsp, 0);\n   rhs = *rhsp;\n \n@@ -852,11 +857,14 @@ forward_propagate_addr_expr_1 (tree name, tree def_rhs,\n \t return res;\n        }\n      /* If the defining rhs comes from an indirect reference, then do not\n-        convert into a VIEW_CONVERT_EXPR.  */\n+        convert into a VIEW_CONVERT_EXPR.  Likewise if we'll end up taking\n+\tthe address of a V_C_E of a constant.  */\n      def_rhs_base = TREE_OPERAND (def_rhs, 0);\n      while (handled_component_p (def_rhs_base))\n        def_rhs_base = TREE_OPERAND (def_rhs_base, 0);\n-     if (!INDIRECT_REF_P (def_rhs_base))\n+     if (!INDIRECT_REF_P (def_rhs_base)\n+\t && (!addr_p\n+\t     || !is_gimple_min_invariant (def_rhs)))\n        {\n \t /* We may have arbitrary VIEW_CONVERT_EXPRs in a nested component\n \t    reference.  Place it there and fold the thing.  */"}]}