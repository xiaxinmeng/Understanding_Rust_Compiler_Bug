{"sha": "47c3ed988be2da61c38d896925b8cede2fd67808", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDdjM2VkOTg4YmUyZGE2MWMzOGQ4OTY5MjViOGNlZGUyZmQ2NzgwOA==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "1999-01-18T06:17:31Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "1999-01-18T06:17:31Z"}, "message": "Warning fixes:\n\n        * loop.c (insert_bct): Hide the definition of variables\n        `increment_direction', `compare_direction', `add_iteration' and\n        `loop_var_mode'.\n        * recog.c (mode_dependent_address_p): Mark parameter `addr' with\n        ATTRIBUTE_UNUSED.  Mark label `win' with ATTRIBUTE_UNUSED_LABEL.\n        (mode_independent_operand): Mark label `lose' with\n        ATTRIBUTE_UNUSED_LABEL.\n        * regclass.c (n_occurrences): Remove prototype and definition.\n        * reload.c (find_reloads_address_1): Mark variable `tem' with\n        ATTRIBUTE_UNUSED.\n        * reload1.c (reload): Cast the first two arguments of `bcopy' to PTR.\n        * sbitmap.c (sbitmap_copy): Likewise.\n        * scan-decls.c (scan_decls): Hide label `handle_comma'.\n        * toplev.c (output_lang_identify): Mark prototype with\n        ATTRIBUTE_UNUSED.\n        * tree.c (make_node): Cast the first argument of `bzero' to PTR.\n        (make_tree_vec): Likewise.\n        (build1): Likewise.\n        * varasm.c (assemble_static_space): Mark variable `tem' with\n        ATTRIBUTE_UNUSED.\n\nFrom-SVN: r24740", "tree": {"sha": "5ac3e0b31d44ea213e88f64748be5c3d3bea1567", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5ac3e0b31d44ea213e88f64748be5c3d3bea1567"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/47c3ed988be2da61c38d896925b8cede2fd67808", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47c3ed988be2da61c38d896925b8cede2fd67808", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47c3ed988be2da61c38d896925b8cede2fd67808", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47c3ed988be2da61c38d896925b8cede2fd67808/comments", "author": null, "committer": null, "parents": [{"sha": "044357a05619ca03dd262934221bf2163ff43b08", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/044357a05619ca03dd262934221bf2163ff43b08", "html_url": "https://github.com/Rust-GCC/gccrs/commit/044357a05619ca03dd262934221bf2163ff43b08"}], "stats": {"total": 88, "additions": 59, "deletions": 29}, "files": [{"sha": "8f1b424d8cb0d6e7d5a62bde1d9ce3110bb23352", "filename": "gcc/ChangeLog", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47c3ed988be2da61c38d896925b8cede2fd67808/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47c3ed988be2da61c38d896925b8cede2fd67808/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=47c3ed988be2da61c38d896925b8cede2fd67808", "patch": "@@ -1,3 +1,35 @@\n+Mon Jan 18 09:05:37 1999  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* loop.c (insert_bct): Hide the definition of variables\n+\t`increment_direction', `compare_direction', `add_iteration' and\n+\t`loop_var_mode'.\n+\n+\t* recog.c (mode_dependent_address_p): Mark parameter `addr' with\n+\tATTRIBUTE_UNUSED.  Mark label `win' with ATTRIBUTE_UNUSED_LABEL.\n+\t(mode_independent_operand): Mark label `lose' with\n+\tATTRIBUTE_UNUSED_LABEL.\n+\n+\t* regclass.c (n_occurrences): Remove prototype and definition.\n+\n+\t* reload.c (find_reloads_address_1): Mark variable `tem' with\n+\tATTRIBUTE_UNUSED.\n+\n+\t* reload1.c (reload): Cast the first two arguments of `bcopy' to PTR.\n+\n+\t* sbitmap.c (sbitmap_copy): Likewise.\n+\n+\t* scan-decls.c (scan_decls): Hide label `handle_comma'.\n+\n+\t* toplev.c (output_lang_identify): Mark prototype with\n+\tATTRIBUTE_UNUSED.\n+\n+\t* tree.c (make_node): Cast the first argument of `bzero' to PTR.\n+\t(make_tree_vec): Likewise.\n+\t(build1): Likewise.\n+\n+\t* varasm.c (assemble_static_space): Mark variable `tem' with\n+ \tATTRIBUTE_UNUSED.\n+\n Mon Jan 18 04:28:36 1999  Nathan Sidwell  <nathan@acm.org>\n \n \t* Makefile.in (GCOV_INSTALL_NAME): New macro."}, {"sha": "c379b6162d494697ab42e170a52ecbf8811df816", "filename": "gcc/loop.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47c3ed988be2da61c38d896925b8cede2fd67808/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47c3ed988be2da61c38d896925b8cede2fd67808/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=47c3ed988be2da61c38d896925b8cede2fd67808", "patch": "@@ -7944,13 +7944,15 @@ insert_bct (loop_start, loop_end, loop_info)\n   int i;\n   unsigned HOST_WIDE_INT n_iterations;\n \n+#if 0\n   int increment_direction, compare_direction;\n \n   /* If the loop condition is <= or >=, the number of iteration\n       is 1 more than the range of the bounds of the loop.  */\n   int add_iteration = 0;\n \n   enum machine_mode loop_var_mode = word_mode;\n+#endif\n \n   int loop_num = uid_loop_num [INSN_UID (loop_start)];\n "}, {"sha": "8804ae91ab23d08f54c3998945ff12a2202481b8", "filename": "gcc/recog.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47c3ed988be2da61c38d896925b8cede2fd67808/gcc%2Frecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47c3ed988be2da61c38d896925b8cede2fd67808/gcc%2Frecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.c?ref=47c3ed988be2da61c38d896925b8cede2fd67808", "patch": "@@ -1861,11 +1861,12 @@ offsettable_address_p (strictp, mode, y)\n \n int\n mode_dependent_address_p (addr)\n-     rtx addr;\n+  rtx addr ATTRIBUTE_UNUSED; /* Maybe used in GO_IF_MODE_DEPENDENT_ADDRESS. */\n {\n   GO_IF_MODE_DEPENDENT_ADDRESS (addr, win);\n   return 0;\n- win:\n+  /* Label `win' might (not) be used via GO_IF_MODE_DEPENDENT_ADDRESS. */\n+ win: ATTRIBUTE_UNUSED_LABEL\n   return 1;\n }\n \n@@ -1888,7 +1889,8 @@ mode_independent_operand (op, mode)\n   addr = XEXP (op, 0);\n   GO_IF_MODE_DEPENDENT_ADDRESS (addr, lose);\n   return 1;\n- lose:\n+  /* Label `lose' might (not) be used via GO_IF_MODE_DEPENDENT_ADDRESS. */\n+ lose: ATTRIBUTE_UNUSED_LABEL\n   return 0;\n }\n "}, {"sha": "5b65f235eea5fbae9ff0c0b1648a0da977037a32", "filename": "gcc/regclass.c", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47c3ed988be2da61c38d896925b8cede2fd67808/gcc%2Fregclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47c3ed988be2da61c38d896925b8cede2fd67808/gcc%2Fregclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregclass.c?ref=47c3ed988be2da61c38d896925b8cede2fd67808", "patch": "@@ -691,7 +691,6 @@ static int loop_depth;\n \n static int loop_cost;\n \n-static int n_occurrences\tPROTO((int, char *));\n static rtx scan_one_insn\tPROTO((rtx, int));\n static void record_reg_classes\tPROTO((int, int, rtx *, enum machine_mode *,\n \t\t\t\t       char **, rtx));\n@@ -742,18 +741,6 @@ regclass_init ()\n   prefclass = 0;\n }\n \f\n-/* Return the number of times character C occurs in string S.  */\n-static int\n-n_occurrences (c, s)\n-     int c;\n-     char *s;\n-{\n-  int n = 0;\n-  while (*s)\n-    n += (*s++ == c);\n-  return n;\n-}\n-\n /* Subroutine of regclass, processes one insn INSN.  Scan it and record each\n    time it would save code to put a certain register in a certain class.\n    PASS, when nonzero, inhibits some optimizations which need only be done"}, {"sha": "4bbf317d6842fb3e6efb3b8d3f978aa2b68af277", "filename": "gcc/reload.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47c3ed988be2da61c38d896925b8cede2fd67808/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47c3ed988be2da61c38d896925b8cede2fd67808/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=47c3ed988be2da61c38d896925b8cede2fd67808", "patch": "@@ -1,5 +1,5 @@\n /* Search an insn for pseudo regs that must be in hard regs and are not.\n-   Copyright (C) 1987, 88, 89, 92-97, 1998 Free Software Foundation, Inc.\n+   Copyright (C) 1987, 88, 89, 92-98, 1999 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -5318,7 +5318,8 @@ find_reloads_address_1 (mode, x, context, loc, opnum, type, ind_levels, insn)\n \t     of an equivalent address for a pseudo that was not allocated to a\n \t     hard register.  Verify that the specified address is valid and\n \t     reload it into a register.  */\n-\t  rtx tem = XEXP (x, 0);\n+\t  /* Variable `tem' might or might not be used in FIND_REG_INC_NOTE. */\n+\t  rtx tem ATTRIBUTE_UNUSED = XEXP (x, 0);\n \t  register rtx link;\n \t  int reloadnum;\n "}, {"sha": "6a6ceb63dfb7a6a30c3d03f6566264433bf4c357", "filename": "gcc/reload1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47c3ed988be2da61c38d896925b8cede2fd67808/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47c3ed988be2da61c38d896925b8cede2fd67808/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=47c3ed988be2da61c38d896925b8cede2fd67808", "patch": "@@ -662,7 +662,7 @@ reload (first, global, dumpfile)\n   reg_max_ref_width = (int *) xmalloc (max_regno * sizeof (int));\n   bzero ((char *) reg_max_ref_width, max_regno * sizeof (int));\n   reg_old_renumber = (short *) xmalloc (max_regno * sizeof (short));\n-  bcopy (reg_renumber, reg_old_renumber, max_regno * sizeof (short));\n+  bcopy ((PTR) reg_renumber, (PTR) reg_old_renumber, max_regno * sizeof (short));\n   pseudo_forbidden_regs\n     = (HARD_REG_SET *) xmalloc (max_regno * sizeof (HARD_REG_SET));\n   pseudo_previous_regs"}, {"sha": "6513d077ecda3cebd06bbc9446e61087503d9a36", "filename": "gcc/sbitmap.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47c3ed988be2da61c38d896925b8cede2fd67808/gcc%2Fsbitmap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47c3ed988be2da61c38d896925b8cede2fd67808/gcc%2Fsbitmap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsbitmap.c?ref=47c3ed988be2da61c38d896925b8cede2fd67808", "patch": "@@ -96,7 +96,8 @@ void\n sbitmap_copy (dst, src)\n      sbitmap dst, src;\n {\n-  bcopy (src->elms, dst->elms, sizeof (SBITMAP_ELT_TYPE) * dst->size);\n+  bcopy ((PTR) src->elms, (PTR) dst->elms,\n+\t sizeof (SBITMAP_ELT_TYPE) * dst->size);\n }\n \n /* Zero all elements in a bitmap.  */"}, {"sha": "5fea64309b493f0bb1147df09a6f1a92f31bd90e", "filename": "gcc/scan-decls.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47c3ed988be2da61c38d896925b8cede2fd67808/gcc%2Fscan-decls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47c3ed988be2da61c38d896925b8cede2fd67808/gcc%2Fscan-decls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fscan-decls.c?ref=47c3ed988be2da61c38d896925b8cede2fd67808", "patch": "@@ -1,5 +1,5 @@\n /* scan-decls.c - Extracts declarations from cpp output.\n-   Copyright (C) 1993, 1995, 1997, 1998 Free Software Foundation, Inc.\n+   Copyright (C) 1993, 1995, 97-98, 1999 Free Software Foundation, Inc.\n \n This program is free software; you can redistribute it and/or modify it\n under the terms of the GNU General Public License as published by the\n@@ -189,7 +189,9 @@ scan_decls (pfile, argc, argv)\n \tmaybe_handle_comma:\n \t  if (token != CPP_COMMA)\n \t    goto new_statement;\n+#if 0\n \thandle_comma:\n+#endif\n \t  /* Handle multiple declarators in a single declaration,\n \t     as in:  extern char *strcpy (), *strcat (), ... ; */\n \t  if (declarator_start == 0)"}, {"sha": "a58e16effdab12dc3c1e1b0ca8abcd4002b5e313", "filename": "gcc/toplev.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47c3ed988be2da61c38d896925b8cede2fd67808/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47c3ed988be2da61c38d896925b8cede2fd67808/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=47c3ed988be2da61c38d896925b8cede2fd67808", "patch": "@@ -197,7 +197,8 @@ static void v_really_sorry PROTO((char *, va_list)) ATTRIBUTE_NORETURN;\n static void float_signal PROTO((int)) ATTRIBUTE_NORETURN;\n static void pipe_closed PROTO((int)) ATTRIBUTE_NORETURN;\n #ifdef ASM_IDENTIFY_LANGUAGE\n-static void output_lang_identify PROTO((FILE *));\n+/* This might or might not be used in ASM_IDENTIFY_LANGUAGE. */\n+static void output_lang_identify PROTO((FILE *)) ATTRIBUTE_UNUSED;\n #endif\n static void open_dump_file PROTO((char *, char *));\n static void close_dump_file PROTO((void (*) (FILE *, rtx), rtx));"}, {"sha": "f7db3c4d90fb0e3d345e1b11dd6faf2dd71db0fb", "filename": "gcc/tree.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47c3ed988be2da61c38d896925b8cede2fd67808/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47c3ed988be2da61c38d896925b8cede2fd67808/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=47c3ed988be2da61c38d896925b8cede2fd67808", "patch": "@@ -1070,7 +1070,7 @@ make_node (code)\n     }\n \n   t = (tree) obstack_alloc (obstack, length);\n-  bzero (t, length);\n+  bzero ((PTR) t, length);\n \n #ifdef GATHER_STATISTICS\n   tree_node_counts[(int)kind]++;\n@@ -1551,7 +1551,7 @@ make_tree_vec (len)\n #endif\n \n   t = (tree) obstack_alloc (obstack, length);\n-  bzero (t, length);\n+  bzero ((PTR) t, length);\n \n   TREE_SET_CODE (t, TREE_VEC);\n   TREE_VEC_LENGTH (t) = len;\n@@ -3058,7 +3058,7 @@ build1 (code, type, node)\n   length = sizeof (struct tree_exp);\n \n   t = (tree) obstack_alloc (obstack, length);\n-  bzero (t, length);\n+  bzero ((PTR) t, length);\n \n #ifdef GATHER_STATISTICS\n   tree_node_counts[(int)kind]++;"}, {"sha": "265987a4f3c07eb0f745a53597fb12c21c03c665", "filename": "gcc/varasm.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47c3ed988be2da61c38d896925b8cede2fd67808/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47c3ed988be2da61c38d896925b8cede2fd67808/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=47c3ed988be2da61c38d896925b8cede2fd67808", "patch": "@@ -1,5 +1,5 @@\n /* Output variables, constants and external declarations, for GNU compiler.\n-   Copyright (C) 1987, 88, 89, 92-97, 1998 Free Software Foundation, Inc.\n+   Copyright (C) 1987, 88, 89, 92-98, 1999 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -1711,9 +1711,11 @@ assemble_static_space (size)\n   {\n     /* Round size up to multiple of BIGGEST_ALIGNMENT bits\n        so that each uninitialized object starts on such a boundary.  */\n-    int rounded = ((size + (BIGGEST_ALIGNMENT / BITS_PER_UNIT) - 1)\n-\t\t   / (BIGGEST_ALIGNMENT / BITS_PER_UNIT)\n-\t\t   * (BIGGEST_ALIGNMENT / BITS_PER_UNIT));\n+    /* Variable `rounded' might or might not be used in ASM_OUTPUT_LOCAL. */\n+    int rounded ATTRIBUTE_UNUSED\n+      = ((size + (BIGGEST_ALIGNMENT / BITS_PER_UNIT) - 1)\n+\t / (BIGGEST_ALIGNMENT / BITS_PER_UNIT)\n+\t * (BIGGEST_ALIGNMENT / BITS_PER_UNIT));\n     ASM_OUTPUT_LOCAL (asm_out_file, name, size, rounded);\n   }\n #endif"}]}