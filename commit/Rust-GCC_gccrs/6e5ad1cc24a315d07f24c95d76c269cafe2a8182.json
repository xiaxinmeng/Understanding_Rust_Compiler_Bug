{"sha": "6e5ad1cc24a315d07f24c95d76c269cafe2a8182", "node_id": "C_kwDOANBUbNoAKDZlNWFkMWNjMjRhMzE1ZDA3ZjI0Yzk1ZDc2YzI2OWNhZmUyYTgxODI", "commit": {"author": {"name": "Antoni Boucher", "email": "bouanto@zoho.com", "date": "2022-04-12T21:25:04Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-04-12T21:25:04Z"}, "message": "libgccjit: Add support for setting the alignment [PR104293]\n\ngcc/jit/\n\tPR jit/104293\n\t* docs/_build/texinfo/libgccjit.texi: Regenerate.\n\t* docs/topics/compatibility.rst (LIBGCCJIT_ABI_24): New ABI tag.\n\t* docs/topics/expressions.rst: Add documentation for the\n\tfunctions gcc_jit_lvalue_set_alignment and\n\tgcc_jit_lvalue_get_alignment.\n\t* jit-playback.h: New function (set_alignment).\n\t* jit-recording.cc: New function (set_alignment).\n\t* jit-recording.h: New functions (set_alignment, get_alignment)\n\tand new field (m_alignment).\n\t* libgccjit.cc: New functions (gcc_jit_lvalue_get_alignment,\n\tgcc_jit_lvalue_set_alignment)\n\t* libgccjit.h: New functions (gcc_jit_lvalue_get_alignment,\n\tgcc_jit_lvalue_set_alignment)\n\t* libgccjit.map (LIBGCCJIT_ABI_24): New ABI tag.\n\ngcc/testsuite/\n\tPR jit/104293\n\t* jit.dg/all-non-failing-tests.h: Mention\n\ttest-setting-alignment.\n\t* jit.dg/test-setting-alignment.c: New test.", "tree": {"sha": "a1e1b56152de7ae8d24cad9aee330276f2fe6be8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a1e1b56152de7ae8d24cad9aee330276f2fe6be8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6e5ad1cc24a315d07f24c95d76c269cafe2a8182", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e5ad1cc24a315d07f24c95d76c269cafe2a8182", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e5ad1cc24a315d07f24c95d76c269cafe2a8182", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e5ad1cc24a315d07f24c95d76c269cafe2a8182/comments", "author": {"login": "antoyo", "id": 584972, "node_id": "MDQ6VXNlcjU4NDk3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/584972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoyo", "html_url": "https://github.com/antoyo", "followers_url": "https://api.github.com/users/antoyo/followers", "following_url": "https://api.github.com/users/antoyo/following{/other_user}", "gists_url": "https://api.github.com/users/antoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoyo/subscriptions", "organizations_url": "https://api.github.com/users/antoyo/orgs", "repos_url": "https://api.github.com/users/antoyo/repos", "events_url": "https://api.github.com/users/antoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/antoyo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "79e1a6fb9babb34dfcb99964c37d3c4f8bb619ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79e1a6fb9babb34dfcb99964c37d3c4f8bb619ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79e1a6fb9babb34dfcb99964c37d3c4f8bb619ca"}], "stats": {"total": 1485, "additions": 871, "deletions": 614}, "files": [{"sha": "9c90de39f63a0115514472412918edd7b6781185", "filename": "gcc/jit/docs/_build/texinfo/libgccjit.texi", "status": "modified", "additions": 676, "deletions": 611, "changes": 1287, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e5ad1cc24a315d07f24c95d76c269cafe2a8182/gcc%2Fjit%2Fdocs%2F_build%2Ftexinfo%2Flibgccjit.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e5ad1cc24a315d07f24c95d76c269cafe2a8182/gcc%2Fjit%2Fdocs%2F_build%2Ftexinfo%2Flibgccjit.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdocs%2F_build%2Ftexinfo%2Flibgccjit.texi?ref=6e5ad1cc24a315d07f24c95d76c269cafe2a8182"}, {"sha": "27845ea9a84e3d9d8c8ed218af8ff9e18897fb8a", "filename": "gcc/jit/docs/topics/compatibility.rst", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e5ad1cc24a315d07f24c95d76c269cafe2a8182/gcc%2Fjit%2Fdocs%2Ftopics%2Fcompatibility.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e5ad1cc24a315d07f24c95d76c269cafe2a8182/gcc%2Fjit%2Fdocs%2Ftopics%2Fcompatibility.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdocs%2Ftopics%2Fcompatibility.rst?ref=6e5ad1cc24a315d07f24c95d76c269cafe2a8182", "patch": "@@ -361,3 +361,13 @@ register name of a variable:\n logs:\n \n   * :func:`gcc_jit_context_set_bool_print_errors_to_stderr`\n+\n+.. _LIBGCCJIT_ABI_24:\n+\n+``LIBGCCJIT_ABI_24``\n+--------------------\n+``LIBGCCJIT_ABI_24`` covers the addition of functions to get and set the\n+alignment of a variable:\n+\n+  * :func:`gcc_jit_lvalue_set_alignment`\n+  * :func:`gcc_jit_lvalue_get_alignment`"}, {"sha": "91ee8a9c74ab21ab14fd3fba1ffb08a773148ac2", "filename": "gcc/jit/docs/topics/expressions.rst", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e5ad1cc24a315d07f24c95d76c269cafe2a8182/gcc%2Fjit%2Fdocs%2Ftopics%2Fexpressions.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e5ad1cc24a315d07f24c95d76c269cafe2a8182/gcc%2Fjit%2Fdocs%2Ftopics%2Fexpressions.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdocs%2Ftopics%2Fexpressions.rst?ref=6e5ad1cc24a315d07f24c95d76c269cafe2a8182", "patch": "@@ -781,6 +781,45 @@ where the rvalue is computed by reading from the storage area.\n \n       #ifdef LIBGCCJIT_HAVE_gcc_jit_lvalue_set_register_name\n \n+.. function:: void\\\n+              gcc_jit_lvalue_set_alignment (gcc_jit_lvalue *lvalue,\\\n+                                            unsigned bytes)\n+\n+   Set the alignment of a variable, in bytes.\n+   Analogous to:\n+\n+   .. code-block:: c\n+\n+     int variable __attribute__((aligned (16)));\n+\n+   in C.\n+\n+   This entrypoint was added in :ref:`LIBGCCJIT_ABI_24`; you can test for\n+   its presence using\n+\n+   .. code-block:: c\n+\n+      #ifdef LIBGCCJIT_HAVE_ALIGNMENT\n+\n+.. function:: unsigned\\\n+              gcc_jit_lvalue_get_alignment (gcc_jit_lvalue *lvalue)\n+\n+   Return the alignment of a variable set by ``gcc_jit_lvalue_set_alignment``.\n+   Return 0 if the alignment was not set. Analogous to:\n+\n+   .. code-block:: c\n+\n+     _Alignof (variable)\n+\n+   in C.\n+\n+   This entrypoint was added in :ref:`LIBGCCJIT_ABI_24`; you can test for\n+   its presence using\n+\n+   .. code-block:: c\n+\n+      #ifdef LIBGCCJIT_HAVE_ALIGNMENT\n+\n Global variables\n ****************\n "}, {"sha": "b18aa4d38dadbe0138ddfff6d5371e622f38758f", "filename": "gcc/jit/jit-playback.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e5ad1cc24a315d07f24c95d76c269cafe2a8182/gcc%2Fjit%2Fjit-playback.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e5ad1cc24a315d07f24c95d76c269cafe2a8182/gcc%2Fjit%2Fjit-playback.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-playback.h?ref=6e5ad1cc24a315d07f24c95d76c269cafe2a8182", "patch": "@@ -715,6 +715,13 @@ class lvalue : public rvalue\n     DECL_HARD_REGISTER (as_tree ()) = 1;\n   }\n \n+  void\n+  set_alignment (int alignment)\n+  {\n+      SET_DECL_ALIGN (as_tree (), alignment * BITS_PER_UNIT);\n+      DECL_USER_ALIGN (as_tree ()) = 1;\n+  }\n+\n private:\n   bool mark_addressable (location *loc);\n };"}, {"sha": "a31720f043e9cf148cabe9478692d0317ad16428", "filename": "gcc/jit/jit-recording.cc", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e5ad1cc24a315d07f24c95d76c269cafe2a8182/gcc%2Fjit%2Fjit-recording.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e5ad1cc24a315d07f24c95d76c269cafe2a8182/gcc%2Fjit%2Fjit-recording.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-recording.cc?ref=6e5ad1cc24a315d07f24c95d76c269cafe2a8182", "patch": "@@ -3977,6 +3977,11 @@ void recording::lvalue::set_register_name (const char *reg_name)\n   m_reg_name = new_string (reg_name);\n }\n \n+void recording::lvalue::set_alignment (unsigned bytes)\n+{\n+  m_alignment = bytes;\n+}\n+\n /* The implementation of class gcc::jit::recording::param.  */\n \n /* Implementation of pure virtual hook recording::memento::replay_into\n@@ -4846,6 +4851,9 @@ recording::global::replay_into (replayer *r)\n   if (m_reg_name != NULL)\n     global->set_register_name (m_reg_name->c_str ());\n \n+  if (m_alignment != 0)\n+    global->set_alignment (m_alignment);\n+\n   set_playback_obj (global);\n }\n \n@@ -6574,6 +6582,9 @@ recording::local::replay_into (replayer *r)\n   if (m_reg_name != NULL)\n     obj->set_register_name (m_reg_name->c_str ());\n \n+  if (m_alignment != 0)\n+    obj->set_alignment (m_alignment);\n+\n   set_playback_obj (obj);\n }\n "}, {"sha": "78ee36488c7a0e8e6a3145196ab555e4a0d4bc1f", "filename": "gcc/jit/jit-recording.h", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e5ad1cc24a315d07f24c95d76c269cafe2a8182/gcc%2Fjit%2Fjit-recording.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e5ad1cc24a315d07f24c95d76c269cafe2a8182/gcc%2Fjit%2Fjit-recording.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-recording.h?ref=6e5ad1cc24a315d07f24c95d76c269cafe2a8182", "patch": "@@ -1169,11 +1169,12 @@ class lvalue : public rvalue\n   lvalue (context *ctxt,\n \t  location *loc,\n \t  type *type_)\n-    : rvalue (ctxt, loc, type_),\n+  : rvalue (ctxt, loc, type_),\n     m_link_section (NULL),\n     m_reg_name (NULL),\n-    m_tls_model (GCC_JIT_TLS_MODEL_NONE)\n-    {}\n+    m_tls_model (GCC_JIT_TLS_MODEL_NONE),\n+    m_alignment (0)\n+  {}\n \n   playback::lvalue *\n   playback_lvalue () const\n@@ -1197,11 +1198,14 @@ class lvalue : public rvalue\n   void set_tls_model (enum gcc_jit_tls_model model);\n   void set_link_section (const char *name);\n   void set_register_name (const char *reg_name);\n+  void set_alignment (unsigned bytes);\n+  unsigned get_alignment () const { return m_alignment; }\n \n protected:\n   string *m_link_section;\n   string *m_reg_name;\n   enum gcc_jit_tls_model m_tls_model;\n+  unsigned m_alignment;\n };\n \n class param : public lvalue"}, {"sha": "cc6486c9cadc2398af56aa2e40cf1e0ee559aae5", "filename": "gcc/jit/libgccjit.cc", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e5ad1cc24a315d07f24c95d76c269cafe2a8182/gcc%2Fjit%2Flibgccjit.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e5ad1cc24a315d07f24c95d76c269cafe2a8182/gcc%2Fjit%2Flibgccjit.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Flibgccjit.cc?ref=6e5ad1cc24a315d07f24c95d76c269cafe2a8182", "patch": "@@ -2699,6 +2699,33 @@ gcc_jit_lvalue_set_link_section (gcc_jit_lvalue *lvalue,\n   lvalue->set_link_section (section_name);\n }\n \n+/* Public entrypoint.  See description in libgccjit.h.\n+\n+   After error-checking, the real work is done by the\n+   gcc::jit::recording::lvalue::get_alignment method in jit-recording.cc.  */\n+\n+unsigned\n+gcc_jit_lvalue_get_alignment (gcc_jit_lvalue *lvalue)\n+{\n+  RETURN_VAL_IF_FAIL (lvalue, 0, NULL, NULL, \"NULL lvalue\");\n+  return lvalue->get_alignment ();\n+}\n+\n+/* Public entrypoint.  See description in libgccjit.h.\n+\n+   After error-checking, the real work is done by the\n+   gcc::jit::recording::lvalue::set_alignment method in jit-recording.cc.  */\n+\n+void\n+gcc_jit_lvalue_set_alignment (gcc_jit_lvalue *lvalue,\n+\t\t\t      unsigned bytes)\n+{\n+  RETURN_IF_FAIL (lvalue, NULL, NULL, \"NULL lvalue\");\n+  RETURN_IF_FAIL ((bytes & (bytes - 1)) == 0, NULL, NULL,\n+\t\t  \"alignment is not a power of 2\");\n+  lvalue->set_alignment (bytes);\n+}\n+\n /* Public entrypoint.  See description in libgccjit.h.\n \n    After error-checking, the real work is done by the"}, {"sha": "062f06d691a9eedc5449b95eee788ceffca963c8", "filename": "gcc/jit/libgccjit.h", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e5ad1cc24a315d07f24c95d76c269cafe2a8182/gcc%2Fjit%2Flibgccjit.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e5ad1cc24a315d07f24c95d76c269cafe2a8182/gcc%2Fjit%2Flibgccjit.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Flibgccjit.h?ref=6e5ad1cc24a315d07f24c95d76c269cafe2a8182", "patch": "@@ -1267,6 +1267,25 @@ gcc_jit_context_new_bitcast (gcc_jit_context *ctxt,\n \t\t\t     gcc_jit_rvalue *rvalue,\n \t\t\t     gcc_jit_type *type);\n \n+#define LIBGCCJIT_HAVE_ALIGNMENT\n+\n+/* Set the alignment of a variable.\n+\n+   This API entrypoint was added in LIBGCCJIT_ABI_24; you can test for its\n+   presence using\n+     #ifdef LIBGCCJIT_HAVE_ALIGNMENT  */\n+extern void\n+gcc_jit_lvalue_set_alignment (gcc_jit_lvalue *lvalue,\n+\t\t\t      unsigned bytes);\n+\n+/* Get the alignment of a variable.\n+\n+   This API entrypoint was added in LIBGCCJIT_ABI_24; you can test for its\n+   presence using\n+     #ifdef LIBGCCJIT_HAVE_ALIGNMENT  */\n+extern unsigned\n+gcc_jit_lvalue_get_alignment (gcc_jit_lvalue *lvalue);\n+\n extern gcc_jit_lvalue *\n gcc_jit_context_new_array_access (gcc_jit_context *ctxt,\n \t\t\t\t  gcc_jit_location *loc,"}, {"sha": "cc22b2b414e55d9da90c4010292bb70de3601e0b", "filename": "gcc/jit/libgccjit.map", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e5ad1cc24a315d07f24c95d76c269cafe2a8182/gcc%2Fjit%2Flibgccjit.map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e5ad1cc24a315d07f24c95d76c269cafe2a8182/gcc%2Fjit%2Flibgccjit.map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Flibgccjit.map?ref=6e5ad1cc24a315d07f24c95d76c269cafe2a8182", "patch": "@@ -265,3 +265,9 @@ LIBGCCJIT_ABI_23 {\n   global:\n     gcc_jit_context_set_bool_print_errors_to_stderr;\n } LIBGCCJIT_ABI_22;\n+\n+LIBGCCJIT_ABI_24 {\n+  global:\n+    gcc_jit_lvalue_set_alignment;\n+    gcc_jit_lvalue_get_alignment;\n+} LIBGCCJIT_ABI_23;"}, {"sha": "80606076e7870f9a3f5dd9acbb959ec8c4fa0540", "filename": "gcc/testsuite/jit.dg/all-non-failing-tests.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e5ad1cc24a315d07f24c95d76c269cafe2a8182/gcc%2Ftestsuite%2Fjit.dg%2Fall-non-failing-tests.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e5ad1cc24a315d07f24c95d76c269cafe2a8182/gcc%2Ftestsuite%2Fjit.dg%2Fall-non-failing-tests.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fjit.dg%2Fall-non-failing-tests.h?ref=6e5ad1cc24a315d07f24c95d76c269cafe2a8182", "patch": "@@ -316,6 +316,9 @@\n /* test-register-variable.c: This can't be in the testcases array as it\n    is target-specific.  */\n \n+/* test-setting-alignment.c: This can't be in the testcases array as it\n+   is target-specific.  */\n+\n /* test-string-literal.c */\n #define create_code create_code_string_literal\n #define verify_code verify_code_string_literal"}, {"sha": "8489df9c6b9366d1ab92d959c3b1b2a31a569611", "filename": "gcc/testsuite/jit.dg/test-setting-alignment.c", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e5ad1cc24a315d07f24c95d76c269cafe2a8182/gcc%2Ftestsuite%2Fjit.dg%2Ftest-setting-alignment.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e5ad1cc24a315d07f24c95d76c269cafe2a8182/gcc%2Ftestsuite%2Fjit.dg%2Ftest-setting-alignment.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fjit.dg%2Ftest-setting-alignment.c?ref=6e5ad1cc24a315d07f24c95d76c269cafe2a8182", "patch": "@@ -0,0 +1,66 @@\n+/* { dg-do compile { target x86_64-*-* } } */\n+\n+#include <stdlib.h>\n+#include <stdio.h>\n+\n+#include \"libgccjit.h\"\n+\n+/* We don't want set_options() in harness.h to set -O3 so our little local\n+   is optimized away. */\n+#define TEST_ESCHEWS_SET_OPTIONS\n+static void set_options (gcc_jit_context *ctxt, const char *argv0)\n+{\n+}\n+\n+#define TEST_COMPILING_TO_FILE\n+#define OUTPUT_KIND      GCC_JIT_OUTPUT_KIND_ASSEMBLER\n+#define OUTPUT_FILENAME  \"output-of-test-setting-alignment.c.s\"\n+#include \"harness.h\"\n+\n+void\n+create_code (gcc_jit_context *ctxt, void *user_data)\n+{\n+  /* Let's try to inject the equivalent of:\n+     int foo __attribute__((aligned (8)));\n+\n+     int main (void) {\n+        int bar __attribute__((aligned (16)));\n+     }\n+  */\n+  gcc_jit_type *int_type =\n+    gcc_jit_context_get_type (ctxt, GCC_JIT_TYPE_INT);\n+  gcc_jit_lvalue *foo =\n+    gcc_jit_context_new_global (\n+      ctxt, NULL, GCC_JIT_GLOBAL_EXPORTED, int_type, \"foo\");\n+  gcc_jit_lvalue_set_alignment(foo, 8);\n+\n+  gcc_jit_field *field = gcc_jit_context_new_field (ctxt,\n+    NULL,\n+    int_type,\n+    \"a\");\n+  gcc_jit_struct *struct_type =\n+    gcc_jit_context_new_struct_type(ctxt, NULL, \"Type\", 1, &field);\n+  gcc_jit_function *func_main =\n+    gcc_jit_context_new_function (ctxt, NULL,\n+\t\t\t\t  GCC_JIT_FUNCTION_EXPORTED,\n+\t\t\t\t  int_type,\n+\t\t\t\t  \"main\",\n+\t\t\t\t  0, NULL,\n+\t\t\t\t  0);\n+  gcc_jit_lvalue *bar =\n+    gcc_jit_function_new_local (\n+      func_main, NULL,\n+      gcc_jit_struct_as_type (struct_type),\n+      \"bar\");\n+  CHECK_VALUE (gcc_jit_lvalue_get_alignment (bar), 0);\n+  gcc_jit_lvalue_set_alignment (bar, 16);\n+  CHECK_VALUE (gcc_jit_lvalue_get_alignment (bar), 16);\n+  gcc_jit_block *block = gcc_jit_function_new_block (func_main, NULL);\n+  gcc_jit_rvalue *return_value =\n+      gcc_jit_lvalue_as_rvalue (gcc_jit_lvalue_access_field (bar, NULL, field));\n+  gcc_jit_block_end_with_return (block, NULL, return_value);\n+}\n+\n+/* { dg-final { jit-verify-output-file-was-created \"\" } } */\n+/* { dg-final { jit-verify-assembler-output \".comm\tfoo,4,8\" } } */\n+/* { dg-final { jit-verify-assembler-output \"movl\t-16\\\\\\(%rbp\\\\\\), %eax\" } } */"}]}