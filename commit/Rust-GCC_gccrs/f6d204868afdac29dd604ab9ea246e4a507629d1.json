{"sha": "f6d204868afdac29dd604ab9ea246e4a507629d1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjZkMjA0ODY4YWZkYWMyOWRkNjA0YWI5ZWEyNDZlNGE1MDc2MjlkMQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "1999-11-02T02:09:55Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1999-11-02T02:09:55Z"}, "message": "* reg-stack.c (convert_regs_1): Handle EH edges specially.\n\nFrom-SVN: r30336", "tree": {"sha": "c5a520cf73a007a0f548351a520fde31b59dddc0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c5a520cf73a007a0f548351a520fde31b59dddc0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f6d204868afdac29dd604ab9ea246e4a507629d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6d204868afdac29dd604ab9ea246e4a507629d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6d204868afdac29dd604ab9ea246e4a507629d1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6d204868afdac29dd604ab9ea246e4a507629d1/comments", "author": null, "committer": null, "parents": [{"sha": "e40217a763572e59dc870abfee044b762cdd6740", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e40217a763572e59dc870abfee044b762cdd6740", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e40217a763572e59dc870abfee044b762cdd6740"}], "stats": {"total": 36, "additions": 31, "deletions": 5}, "files": [{"sha": "4ce7c3c5a658b8a01a381bf7799e7189be1962bc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6d204868afdac29dd604ab9ea246e4a507629d1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6d204868afdac29dd604ab9ea246e4a507629d1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f6d204868afdac29dd604ab9ea246e4a507629d1", "patch": "@@ -1,3 +1,7 @@\n+Mon Nov  1 18:09:14 1999  Richard Henderson  <rth@cygnus.com>\n+\n+\t* reg-stack.c (convert_regs_1): Handle EH edges specially.\n+\n Mon Nov  1 15:41:01 1999  Mark P. Mitchell  <mark@codesourcery.com>\n \n \t* bitmap.h (BITMAP_XMALLOC): New macro."}, {"sha": "e20e92e859568bd7e487d71aefb055e4fd0d83f2", "filename": "gcc/reg-stack.c", "status": "modified", "additions": 27, "deletions": 5, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6d204868afdac29dd604ab9ea246e4a507629d1/gcc%2Freg-stack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6d204868afdac29dd604ab9ea246e4a507629d1/gcc%2Freg-stack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freg-stack.c?ref=f6d204868afdac29dd604ab9ea246e4a507629d1", "patch": "@@ -2514,12 +2514,34 @@ convert_regs_1 (file, block)\n \t    }\n \t}\n \n+      /* Care for EH edges specially.  The normal return path may return\n+\t a value in st(0), but the EH path will not, and there's no need\n+\t to add popping code to the edge.  */\n+      if (e->flags & EDGE_EH)\n+\t{\n+\t  /* Assert that the lifetimes are as we expect -- one value\n+\t     live at st(0) on the end of the source block, and no\n+\t     values live at the beginning of the destination block.  */\n+\t  HARD_REG_SET tmp;\n+\n+\t  CLEAR_HARD_REG_SET (tmp);\n+\t  GO_IF_HARD_REG_EQUAL (BLOCK_INFO (e->dest)->stack_in.reg_set,\n+\t\t\t\ttmp, eh1);\n+\t  abort();\n+\teh1:\n+\n+\t  SET_HARD_REG_BIT (tmp, FIRST_STACK_REG);\n+\t  GO_IF_HARD_REG_EQUAL (BLOCK_INFO (e->src)->out_reg_set, tmp, eh2);\n+\t  abort();\n+\teh2:;\n+\t}\n+\n       /* It is better to output directly to the end of the block\n \t instead of to the edge, because emit_swap can do minimal\n \t insn scheduling.  We can do this when there is only one\n \t edge out, and it is not abnormal.  */\n-      if (block->succ->succ_next == NULL\n-\t  && ! (e->flags & EDGE_ABNORMAL))\n+      else if (block->succ->succ_next == NULL\n+\t       && ! (e->flags & EDGE_ABNORMAL))\n \t{\n \t  /* change_stack kills values in regstack.  */\n \t  tmpstack = regstack;\n@@ -2532,9 +2554,9 @@ convert_regs_1 (file, block)\n \t{\n \t  rtx seq, after;\n \n-\t  /* We don't support abnormal edges.  Global takes\n-\t     care to avoid any live register across them, so\n-\t     we should never have to.  */\n+\t  /* We don't support abnormal edges.  Global takes care to\n+\t     avoid any live register across them, so we should never\n+\t     have to insert instructions on such edges.  */\n \t  if (e->flags & EDGE_ABNORMAL)\n \t    abort ();\n "}]}