{"sha": "f9da50645221cfa880519542a1c5e37c53837bef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjlkYTUwNjQ1MjIxY2ZhODgwNTE5NTQyYTFjNWUzN2M1MzgzN2JlZg==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2003-06-29T13:53:12Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2003-06-29T13:53:12Z"}, "message": "alloc-pool.c: Fix comment formatting.\n\n\t* alloc-pool.c: Fix comment formatting.\n\t* bitmap.c: Likewise.\n\t* bitmap.h: Likewise.\n\t* bt-load.c: Likewise.\n\t* builtins.c: Likewise.\n\t* caller-save.c: Likewise.\n\t* cfganal.c: Likewise.\n\t* cfgrtl.c: Likewise.\n\t* collect2.c: Likewise.\n\t* cse.c: Likewise.\n\t* df.c: Likewise.\n\t* diagnostic.c: Likewise.\n\t* dwarf2out.c: Likewise.\n\t* dwarfout.c: Likewise.\n\t* expmed.c: Likewise.\n\t* final.c: Likewise.\n\t* flags.h: Likewise.\n\t* fold-const.c: Likewise.\n\t* gcc.c: Likewise.\n\t* gcov-io.h: Likewise.\n\t* gcov.c: Likewise.\n\t* genattrtab.c: Likewise.\n\t* genautomata.c: Likewise.\n\t* libgcov.c: Likewise.\n\t* mips-tfile.c: Likewise.\n\t* optabs.c: Likewise.\n\t* prefix.c: Likewise.\n\t* rtlanal.c: Likewise.\n\t* stmt.c: Likewise.\n\t* stor-layout.c: Likewise.\n\t* toplev.c: Likewise.\n\t* varasm.c: Likewise.\n\t* vmsdbgout.c: Likewise.\n\nFrom-SVN: r68672", "tree": {"sha": "096f08da7ff43d0c89a0ae297b1089589ba63a46", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/096f08da7ff43d0c89a0ae297b1089589ba63a46"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f9da50645221cfa880519542a1c5e37c53837bef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9da50645221cfa880519542a1c5e37c53837bef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9da50645221cfa880519542a1c5e37c53837bef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9da50645221cfa880519542a1c5e37c53837bef/comments", "author": null, "committer": null, "parents": [{"sha": "329d586fe57ac58fb541855cf8e329b9f5cb5cff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/329d586fe57ac58fb541855cf8e329b9f5cb5cff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/329d586fe57ac58fb541855cf8e329b9f5cb5cff"}], "stats": {"total": 185, "additions": 111, "deletions": 74}, "files": [{"sha": "229be7826e3d20c8c62ce201ea0fdb79a732b9cd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9da50645221cfa880519542a1c5e37c53837bef/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9da50645221cfa880519542a1c5e37c53837bef/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f9da50645221cfa880519542a1c5e37c53837bef", "patch": "@@ -1,3 +1,39 @@\n+2003-06-29  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* alloc-pool.c: Fix comment formatting.\n+\t* bitmap.c: Likewise.\n+\t* bitmap.h: Likewise.\n+\t* bt-load.c: Likewise.\n+\t* builtins.c: Likewise.\n+\t* caller-save.c: Likewise.\n+\t* cfganal.c: Likewise.\n+\t* cfgrtl.c: Likewise.\n+\t* collect2.c: Likewise.\n+\t* cse.c: Likewise.\n+\t* df.c: Likewise.\n+\t* diagnostic.c: Likewise.\n+\t* dwarf2out.c: Likewise.\n+\t* dwarfout.c: Likewise.\n+\t* expmed.c: Likewise.\n+\t* final.c: Likewise.\n+\t* flags.h: Likewise.\n+\t* fold-const.c: Likewise.\n+\t* gcc.c: Likewise.\n+\t* gcov-io.h: Likewise.\n+\t* gcov.c: Likewise.\n+\t* genattrtab.c: Likewise.\n+\t* genautomata.c: Likewise.\n+\t* libgcov.c: Likewise.\n+\t* mips-tfile.c: Likewise.\n+\t* optabs.c: Likewise.\n+\t* prefix.c: Likewise.\n+\t* rtlanal.c: Likewise.\n+\t* stmt.c: Likewise.\n+\t* stor-layout.c: Likewise.\n+\t* toplev.c: Likewise.\n+\t* varasm.c: Likewise.\n+\t* vmsdbgout.c: Likewise.\n+\n 2003-06-29  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* expr.c (emit_single_push_insn): If padding is needed"}, {"sha": "9cb56cd48b6bc10c0365c0d41be128df795bb22f", "filename": "gcc/alloc-pool.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9da50645221cfa880519542a1c5e37c53837bef/gcc%2Falloc-pool.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9da50645221cfa880519542a1c5e37c53837bef/gcc%2Falloc-pool.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falloc-pool.c?ref=f9da50645221cfa880519542a1c5e37c53837bef", "patch": "@@ -175,12 +175,12 @@ pool_alloc (alloc_pool pool)\n       size_t i;\n       alloc_pool_list block_header;\n \n-      /* Make the block */\n+      /* Make the block.  */\n       block = (char *) xmalloc (pool->block_size);\n       block_header = (alloc_pool_list) block;\n       block += align_eight (sizeof (struct alloc_pool_list_def));\n \n-      /* Throw it on the block list */\n+      /* Throw it on the block list.  */\n       block_header->next = pool->block_list;\n       pool->block_list = block_header;\n "}, {"sha": "619c713a2c872fd045a17fa4a0e6f9624932da4f", "filename": "gcc/bitmap.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9da50645221cfa880519542a1c5e37c53837bef/gcc%2Fbitmap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9da50645221cfa880519542a1c5e37c53837bef/gcc%2Fbitmap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbitmap.c?ref=f9da50645221cfa880519542a1c5e37c53837bef", "patch": "@@ -265,7 +265,7 @@ bitmap_copy (bitmap to, bitmap from)\n \n   bitmap_clear (to);\n \n-  /* Copy elements in forward direction one at a time */\n+  /* Copy elements in forward direction one at a time.  */\n   for (from_ptr = from->first; from_ptr; from_ptr = from_ptr->next)\n     {\n       bitmap_element *to_elt = bitmap_element_allocate (to);"}, {"sha": "401506a2a7e87be267899298f2bdbb4d3927cc3e", "filename": "gcc/bitmap.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9da50645221cfa880519542a1c5e37c53837bef/gcc%2Fbitmap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9da50645221cfa880519542a1c5e37c53837bef/gcc%2Fbitmap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbitmap.h?ref=f9da50645221cfa880519542a1c5e37c53837bef", "patch": "@@ -107,7 +107,7 @@ extern int bitmap_bit_p (bitmap, int);\n extern void debug_bitmap (bitmap);\n extern void debug_bitmap_file (FILE *, bitmap);\n \n-/* Print a bitmap */\n+/* Print a bitmap.  */\n extern void bitmap_print (FILE *, bitmap, const char *, const char *);\n \n /* Initialize a bitmap header.  If HEAD is NULL, a new header will be"}, {"sha": "180a8baa2a920c2db7d7b9e76ba7fc060f50a8cf", "filename": "gcc/bt-load.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9da50645221cfa880519542a1c5e37c53837bef/gcc%2Fbt-load.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9da50645221cfa880519542a1c5e37c53837bef/gcc%2Fbt-load.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbt-load.c?ref=f9da50645221cfa880519542a1c5e37c53837bef", "patch": "@@ -89,7 +89,7 @@ typedef struct btr_def_s\n   btr_user uses;\n   /* If this def has a reaching use which is not a simple use\n      in a branch instruction, then has_ambiguous_use will be true,\n-     and we will not attempt to migrate this definition.       */\n+     and we will not attempt to migrate this definition.  */\n   char has_ambiguous_use;\n   /* live_range is an approximation to the true live range for this\n      def/use web, because it records the set of blocks that contain\n@@ -421,7 +421,7 @@ typedef struct {\n /* Called via note_stores or directly to register stores into /\n    clobbers of a branch target register DEST that are not recognized as\n    straightforward definitions.  DATA points to information about the\n-   current basic block that needs updating.   */\n+   current basic block that needs updating.  */\n static void\n note_btr_set (rtx dest, rtx set ATTRIBUTE_UNUSED, void *data)\n {\n@@ -593,7 +593,7 @@ compute_out (sbitmap *bb_out, sbitmap *bb_gen, sbitmap *bb_kill, int max_uid)\n       For each block,\n \tBB_IN  = union over predecessors of BB_OUT(pred)\n \tBB_OUT = (BB_IN - BB_KILL) + BB_GEN\n-     Iterate until the bb_out sets stop growing.   */\n+     Iterate until the bb_out sets stop growing.  */\n   int i;\n   int changed;\n   sbitmap bb_in = sbitmap_alloc (max_uid);\n@@ -652,7 +652,7 @@ link_btr_uses (btr_def *def_array, btr_user *use_array, sbitmap *bb_out,\n \n \t      if (user != NULL)\n \t\t{\n-\t\t  /* Find all the reaching defs for this use */\n+\t\t  /* Find all the reaching defs for this use.  */\n \t\t  sbitmap reaching_defs_of_reg = sbitmap_alloc(max_uid);\n \t\t  int uid;\n \n@@ -679,7 +679,7 @@ link_btr_uses (btr_def *def_array, btr_user *use_array, sbitmap *bb_out,\n \t\t    {\n \t\t      btr_def def = def_array[uid];\n \n-\t\t      /* We now know that def reaches user */\n+\t\t      /* We now know that def reaches user.  */\n \n \t\t      if (rtl_dump_file)\n \t\t\tfprintf (rtl_dump_file,\n@@ -1004,7 +1004,7 @@ combine_btr_defs (btr_def def, HARD_REG_SET *btrs_live_in_range)\n \t  btr = choose_btr (combined_btrs_live);\n \t  if (btr != -1)\n \t    {\n-\t      /* We can combine them */\n+\t      /* We can combine them.  */\n \t      if (rtl_dump_file)\n \t\tfprintf (rtl_dump_file,\n \t\t\t \"Combining def in insn %d with def in insn %d\\n\",\n@@ -1037,7 +1037,7 @@ combine_btr_defs (btr_def def, HARD_REG_SET *btrs_live_in_range)\n \t\tdef->other_btr_uses_after_use = 1;\n \t      COPY_HARD_REG_SET (*btrs_live_in_range, combined_btrs_live);\n \n-\t      /* Delete the old target register initialization */\n+\t      /* Delete the old target register initialization.  */\n \t      delete_insn (other_def->insn);\n \n \t    }\n@@ -1108,7 +1108,7 @@ move_btr_def (basic_block new_def_bb, int btr, btr_def def, bitmap live_range,\n     fprintf (rtl_dump_file, \"New pt is insn %d, inserted after insn %d\\n\",\n \t     INSN_UID (def->insn), INSN_UID (insp));\n \n-  /* Delete the old target register initialization */\n+  /* Delete the old target register initialization.  */\n   delete_insn (old_insn);\n \n   /* Replace each use of the old target register by a use of the new target\n@@ -1185,7 +1185,7 @@ migrate_btr_def (btr_def def, int min_cost)\n \t     INSN_UID (def->insn), def->cost, min_cost);\n \n   if (!def->group || def->has_ambiguous_use)\n-    /* These defs are not migratable */\n+    /* These defs are not migratable.  */\n     {\n       if (rtl_dump_file)\n \tfprintf (rtl_dump_file, \"it's not migratable\\n\");"}, {"sha": "26938105a551dce4d8cf32c52844eed118fbcfbc", "filename": "gcc/builtins.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9da50645221cfa880519542a1c5e37c53837bef/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9da50645221cfa880519542a1c5e37c53837bef/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=f9da50645221cfa880519542a1c5e37c53837bef", "patch": "@@ -1227,7 +1227,7 @@ expand_builtin_apply (rtx function, rtx arguments, rtx argsize)\n   do_pending_stack_adjust ();\n   NO_DEFER_POP;\n \n-  /* Save the stack with nonlocal if available */\n+  /* Save the stack with nonlocal if available.  */\n #ifdef HAVE_save_stack_nonlocal\n   if (HAVE_save_stack_nonlocal)\n     emit_stack_save (SAVE_NONLOCAL, &old_stack_level, NULL_RTX);"}, {"sha": "d40c8d99be1a324bb2e9f814caf27b7332665c0e", "filename": "gcc/caller-save.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9da50645221cfa880519542a1c5e37c53837bef/gcc%2Fcaller-save.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9da50645221cfa880519542a1c5e37c53837bef/gcc%2Fcaller-save.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcaller-save.c?ref=f9da50645221cfa880519542a1c5e37c53837bef", "patch": "@@ -670,7 +670,7 @@ insert_restore (struct insn_chain *chain, int before_p, int regno,\n \t    ok = 0;\n \t    break;\n \t  }\n-      /* Must do this one restore at a time */\n+      /* Must do this one restore at a time.  */\n       if (! ok)\n \tcontinue;\n \n@@ -742,7 +742,7 @@ insert_save (struct insn_chain *chain, int before_p, int regno,\n \t    ok = 0;\n \t    break;\n \t  }\n-      /* Must do this one save at a time */\n+      /* Must do this one save at a time.  */\n       if (! ok)\n \tcontinue;\n "}, {"sha": "4054996e7eaca7ea0fb7f448531f5d114f933771", "filename": "gcc/cfganal.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9da50645221cfa880519542a1c5e37c53837bef/gcc%2Fcfganal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9da50645221cfa880519542a1c5e37c53837bef/gcc%2Fcfganal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfganal.c?ref=f9da50645221cfa880519542a1c5e37c53837bef", "patch": "@@ -724,7 +724,7 @@ connect_infinite_loops_to_exit (void)\n   return;\n }\n \f\n-/* Compute reverse top sort order */\n+/* Compute reverse top sort order.  */\n \n void\n flow_reverse_top_sort_order_compute (int *rts_order)"}, {"sha": "d37666d9e5770f7d70788b3e09a64b68b0222cac", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9da50645221cfa880519542a1c5e37c53837bef/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9da50645221cfa880519542a1c5e37c53837bef/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=f9da50645221cfa880519542a1c5e37c53837bef", "patch": "@@ -840,7 +840,7 @@ rtl_redirect_edge_and_branch (edge e, basic_block target)\n \t    ++LABEL_NUSES (new_label);\n \t  }\n \n-      /* Handle casesi dispatch insns */\n+      /* Handle casesi dispatch insns.  */\n       if ((tmp = single_set (insn)) != NULL\n \t  && SET_DEST (tmp) == pc_rtx\n \t  && GET_CODE (SET_SRC (tmp)) == IF_THEN_ELSE"}, {"sha": "32eb5be958a04c6e2a465df073cebb3ae773e98a", "filename": "gcc/collect2.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9da50645221cfa880519542a1c5e37c53837bef/gcc%2Fcollect2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9da50645221cfa880519542a1c5e37c53837bef/gcc%2Fcollect2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcollect2.c?ref=f9da50645221cfa880519542a1c5e37c53837bef", "patch": "@@ -702,7 +702,7 @@ add_prefix (struct path_prefix *pprefix, const char *prefix)\n   else\n     prev = &pprefix->plist;\n \n-  /* Keep track of the longest prefix */\n+  /* Keep track of the longest prefix.  */\n \n   len = strlen (prefix);\n   if (len > pprefix->max_len)\n@@ -1350,7 +1350,7 @@ main (int argc, char **argv)\n       )\n     {\n #ifdef COLLECT_EXPORT_LIST\n-      /* Do tlink without additional code generation */\n+      /* Do tlink without additional code generation.  */\n       do_tlink (ld1_argv, object_lst);\n #endif\n       /* Strip now if it was requested on the command line.  */\n@@ -1816,7 +1816,7 @@ write_c_file_stat (FILE *stream, const char *name ATTRIBUTE_UNUSED)\n \n   free (prefix);\n \n-  /* Write the tables as C code  */\n+  /* Write the tables as C code.  */\n \n   fprintf (stream, \"static int count;\\n\");\n   fprintf (stream, \"typedef void entry_pt();\\n\");\n@@ -1899,7 +1899,7 @@ write_c_file_stat (FILE *stream, const char *name ATTRIBUTE_UNUSED)\n static void\n write_c_file_glob (FILE *stream, const char *name ATTRIBUTE_UNUSED)\n {\n-  /* Write the tables as C code  */\n+  /* Write the tables as C code.  */\n \n   int frames = (frame_tables.number > 0);\n \n@@ -2043,7 +2043,7 @@ scan_prog_file (const char *prog_name, enum pass which_pass)\n   fflush (stdout);\n   fflush (stderr);\n \n-  /* Spawn child nm on pipe */\n+  /* Spawn child nm on pipe.  */\n   pid = vfork ();\n   if (pid == -1)\n     fatal_perror (VFORK_STRING);\n@@ -2472,7 +2472,7 @@ scan_libraries (const char *prog_name)\n   fflush (stdout);\n   fflush (stderr);\n \n-  /* Spawn child ldd on pipe */\n+  /* Spawn child ldd on pipe.  */\n   pid = vfork ();\n   if (pid == -1)\n     fatal_perror (VFORK_STRING);\n@@ -3158,15 +3158,15 @@ scan_prog_file (const char *prog_name, enum pass which_pass)\n       if (debug)\n \tprint_header (&hdr);\n \n-      /* Write header */\n+      /* Write header.  */\n       status = encode_mach_o_hdr (&hdr, obj, MO_SIZEOF_RAW_HDR);\n       if (status != MO_HDR_CONV_SUCCESS)\n \tbad_header (status);\n \n       if (debug)\n \tnotice (\"writing load commands.\\n\\n\");\n \n-      /* Write load commands */\n+      /* Write load commands.  */\n       offset = hdr.moh_first_cmd_off;\n       for (i = 0; i < hdr.moh_n_load_cmds; i++)\n \t{"}, {"sha": "f67bbcccfa8d419332f3f62af2ea276dbf436a1d", "filename": "gcc/cse.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9da50645221cfa880519542a1c5e37c53837bef/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9da50645221cfa880519542a1c5e37c53837bef/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=f9da50645221cfa880519542a1c5e37c53837bef", "patch": "@@ -1608,7 +1608,7 @@ insert (x, classp, hash, mode)\n     {\n       classp = classp->first_same_value;\n       if (CHEAPER (elt, classp))\n-\t/* Insert at the head of the class */\n+\t/* Insert at the head of the class.  */\n \t{\n \t  struct table_elt *p;\n \t  elt->next_same_value = classp;"}, {"sha": "e7790d2a68cce1c4165ea93b6f83eb339eb7d9e0", "filename": "gcc/df.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9da50645221cfa880519542a1c5e37c53837bef/gcc%2Fdf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9da50645221cfa880519542a1c5e37c53837bef/gcc%2Fdf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf.c?ref=f9da50645221cfa880519542a1c5e37c53837bef", "patch": "@@ -1228,7 +1228,7 @@ df_insn_refs_record (df, bb, insn)\n     {\n       rtx note;\n \n-      /* Record register defs */\n+      /* Record register defs.  */\n       df_defs_record (df, PATTERN (insn), bb, insn);\n \n       if (df->flags & DF_EQUIV_NOTES)"}, {"sha": "fa52cd825080ae90a180082a48b415e6552abfc2", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9da50645221cfa880519542a1c5e37c53837bef/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9da50645221cfa880519542a1c5e37c53837bef/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=f9da50645221cfa880519542a1c5e37c53837bef", "patch": "@@ -486,7 +486,7 @@ output_format (output_buffer *buffer, text_info *text)\n         default:\n           break;\n         }\n-      /* We don't support precision behond that of \"long long\".   */\n+      /* We don't support precision behond that of \"long long\".  */\n       if (precision > 2)\n         abort();\n "}, {"sha": "7c8f04cbc8ad970b292c12ad3ff9e258fcc69f7e", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9da50645221cfa880519542a1c5e37c53837bef/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9da50645221cfa880519542a1c5e37c53837bef/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=f9da50645221cfa880519542a1c5e37c53837bef", "patch": "@@ -6694,7 +6694,7 @@ new_loc_list (expr, begin, end, section, gensym)\n   return retlist;\n }\n \n-/* Add a location description expression to a location list */\n+/* Add a location description expression to a location list.  */\n \n static inline void\n add_loc_descr_to_loc_list (list_head, descr, begin, end, section)\n@@ -6710,11 +6710,11 @@ add_loc_descr_to_loc_list (list_head, descr, begin, end, section)\n   for (d = list_head; (*d) != NULL; d = &(*d)->dw_loc_next)\n     ;\n \n-  /* Add a new location list node to the list */\n+  /* Add a new location list node to the list.  */\n   *d = new_loc_list (descr, begin, end, section, 0);\n }\n \n-/* Output the location list given to us */\n+/* Output the location list given to us.  */\n \n static void\n output_loc_list (list_head)\n@@ -7764,7 +7764,7 @@ output_line_info ()\n \t{\n \t  function = line_info->function;\n \n-\t  /* Set the address register to the first line in the function */\n+\t  /* Set the address register to the first line in the function.  */\n \t  dw2_asm_output_data (1, 0, \"DW_LNE_set_address\");\n \t  dw2_asm_output_data_uleb128 (1 + DWARF2_ADDR_SIZE, NULL);\n \t  dw2_asm_output_data (1, DW_LNE_set_address, NULL);\n@@ -11120,7 +11120,7 @@ gen_subprogram_die (decl, context_die)\n     gen_formal_types_die (decl, subr_die);\n   else\n     {\n-      /* Generate DIEs to represent all known formal parameters */\n+      /* Generate DIEs to represent all known formal parameters.  */\n       tree arg_decls = DECL_ARGUMENTS (decl);\n       tree parm;\n \n@@ -11752,7 +11752,7 @@ gen_subroutine_type_die (type, context_die)\n   gen_formal_types_die (type, subr_die);\n }\n \n-/* Generate a DIE for a type definition */\n+/* Generate a DIE for a type definition.  */\n \n static void\n gen_typedef_die (decl, context_die)"}, {"sha": "ddb6a4ab1648730262f2c149347247e823ad2095", "filename": "gcc/dwarfout.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9da50645221cfa880519542a1c5e37c53837bef/gcc%2Fdwarfout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9da50645221cfa880519542a1c5e37c53837bef/gcc%2Fdwarfout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarfout.c?ref=f9da50645221cfa880519542a1c5e37c53837bef", "patch": "@@ -5283,7 +5283,7 @@ output_decl (decl, containing_scope)\n \toutput_formal_types (TREE_TYPE (decl));\n       else\n \t{\n-\t  /* Generate DIEs to represent all known formal parameters */\n+\t  /* Generate DIEs to represent all known formal parameters.  */\n \n \t  tree arg_decls = DECL_ARGUMENTS (decl);\n \t  tree parm;"}, {"sha": "a64b61ae52bcbd9788b7720cf31faec548ff9b33", "filename": "gcc/expmed.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9da50645221cfa880519542a1c5e37c53837bef/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9da50645221cfa880519542a1c5e37c53837bef/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=f9da50645221cfa880519542a1c5e37c53837bef", "patch": "@@ -2661,7 +2661,7 @@ choose_multiplier (d, n, precision, multiplier_ptr, post_shift_ptr, lgup_ptr)\n   /* If precision == N, then mlow, mhigh exceed 2^N\n      (but they do not exceed 2^(N+1)).  */\n \n-  /* Reduce to lowest terms */\n+  /* Reduce to lowest terms.  */\n   for (post_shift = lgup; post_shift > 0; post_shift--)\n     {\n       unsigned HOST_WIDE_INT ml_lo = (mlow_hi << (HOST_BITS_PER_WIDE_INT - 1)) | (mlow_lo >> 1);"}, {"sha": "a86249f0440fb9f782bef59064664c5137ece38b", "filename": "gcc/final.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9da50645221cfa880519542a1c5e37c53837bef/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9da50645221cfa880519542a1c5e37c53837bef/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=f9da50645221cfa880519542a1c5e37c53837bef", "patch": "@@ -3922,7 +3922,7 @@ debug_queue_symbol (tree decl)\n   symbol_queue[symbol_queue_index++] = decl;\n }     \n \n-/* Free symbol queue */\n+/* Free symbol queue.  */\n void\n debug_free_queue ()\n {"}, {"sha": "d0ee4a10afbdc8b3036e3d292ef5a72d4aeb329f", "filename": "gcc/flags.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9da50645221cfa880519542a1c5e37c53837bef/gcc%2Fflags.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9da50645221cfa880519542a1c5e37c53837bef/gcc%2Fflags.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflags.h?ref=f9da50645221cfa880519542a1c5e37c53837bef", "patch": "@@ -478,11 +478,11 @@ extern int flag_shlib;\n \n extern int flag_exceptions;\n \n-/* Nonzero means generate frame unwind info table when supported */\n+/* Nonzero means generate frame unwind info table when supported.  */\n \n extern int flag_unwind_tables;\n \n-/* Nonzero means generate frame unwind info table exact at each insn boundary */\n+/* Nonzero means generate frame unwind info table exact at each insn boundary.  */\n \n extern int flag_asynchronous_unwind_tables;\n "}, {"sha": "ab6aff494d42a7a6a7b28ee551908725e5e397c0", "filename": "gcc/fold-const.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9da50645221cfa880519542a1c5e37c53837bef/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9da50645221cfa880519542a1c5e37c53837bef/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=f9da50645221cfa880519542a1c5e37c53837bef", "patch": "@@ -797,7 +797,7 @@ div_and_round_double (code, uns,\n \tunsigned HOST_WIDE_INT labs_den = lden, ltwice;\n \tHOST_WIDE_INT habs_den = hden, htwice;\n \n-\t/* Get absolute values */\n+\t/* Get absolute values.  */\n \tif (*hrem < 0)\n \t  neg_double (*lrem, *hrem, &labs_rem, &habs_rem);\n \tif (hden < 0)"}, {"sha": "110495fb031a1d74c9e28a4c93929270ff91dbf9", "filename": "gcc/gcc.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9da50645221cfa880519542a1c5e37c53837bef/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9da50645221cfa880519542a1c5e37c53837bef/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=f9da50645221cfa880519542a1c5e37c53837bef", "patch": "@@ -968,7 +968,7 @@ static const struct compiler default_compilers[] =\n    , 0},\n   \n #include \"specs.h\"\n-  /* Mark end of table */\n+  /* Mark end of table.  */\n   {0, 0, 0}\n };\n \n@@ -2593,7 +2593,7 @@ add_prefix (pprefix, prefix, component, priority, require_machine_suffix,\n        prev = &(*prev)->next)\n     ;\n \n-  /* Keep track of the longest prefix */\n+  /* Keep track of the longest prefix.  */\n \n   prefix = update_path (prefix, component);\n   len = strlen (prefix);\n@@ -2609,7 +2609,7 @@ add_prefix (pprefix, prefix, component, priority, require_machine_suffix,\n   if (warn)\n     *warn = 0;\n \n-  /* Insert after PREV */\n+  /* Insert after PREV.  */\n   pl->next = (*prev);\n   (*prev) = pl;\n }\n@@ -6636,15 +6636,15 @@ pfatal_pexecute (errmsg_fmt, errmsg_arg)\n   pfatal_with_name (errmsg_fmt);\n }\n \n-/* Output an error message and exit */\n+/* Output an error message and exit.  */\n \n void\n fancy_abort ()\n {\n   fatal (\"internal gcc abort\");\n }\n \f\n-/* Output an error message and exit */\n+/* Output an error message and exit.  */\n \n void\n fatal (const char *msgid, ...)"}, {"sha": "e7d2f8b4068673d19255514db2f9dc437483c765", "filename": "gcc/gcov-io.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9da50645221cfa880519542a1c5e37c53837bef/gcc%2Fgcov-io.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9da50645221cfa880519542a1c5e37c53837bef/gcc%2Fgcov-io.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov-io.h?ref=f9da50645221cfa880519542a1c5e37c53837bef", "patch": "@@ -321,7 +321,7 @@ typedef HOST_WIDEST_INT gcov_type;\n \n /* Structured records.  */\n \n-/* Cumulative counter data.   */\n+/* Cumulative counter data.  */\n struct gcov_ctr_summary\n {\n   gcov_unsigned_t num;\t\t/* number of counters.  */"}, {"sha": "9288ca570f97b8eca34cd4d52745d88744e9f6d6", "filename": "gcc/gcov.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9da50645221cfa880519542a1c5e37c53837bef/gcc%2Fgcov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9da50645221cfa880519542a1c5e37c53837bef/gcc%2Fgcov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov.c?ref=f9da50645221cfa880519542a1c5e37c53837bef", "patch": "@@ -652,7 +652,7 @@ create_file_names (file_name)\n   \n   if (base)\n     {\n-      /* Append source file name */\n+      /* Append source file name.  */\n       cptr = strrchr (file_name, '/');\n       strcat (name, cptr ? cptr + 1 : file_name);\n     }\n@@ -943,7 +943,7 @@ read_graph_file ()\n \tfn_n = fn->next;\n \tfn->next = fn_p;\n \n-\t/* Reverse the arcs */\n+\t/* Reverse the arcs.  */\n \tfor (ix = fn->num_blocks; ix--;)\n \t  {\n \t    arc_t *arc, *arc_p, *arc_n;\n@@ -1623,7 +1623,7 @@ accumulate_line_counts (src)\n \t  block_t *block, *block_p, *block_n;\n \t  gcov_type count = 0;\n \t  \n-\t  /* Reverse the block information */\n+\t  /* Reverse the block information.  */\n \t  for (block = line->u.blocks, block_p = NULL; block;\n \t       block_p = block, block = block_n)\n \t    {"}, {"sha": "8bc9763895b71e73d6f079b8c865feab60806fb9", "filename": "gcc/genattrtab.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9da50645221cfa880519542a1c5e37c53837bef/gcc%2Fgenattrtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9da50645221cfa880519542a1c5e37c53837bef/gcc%2Fgenattrtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattrtab.c?ref=f9da50645221cfa880519542a1c5e37c53837bef", "patch": "@@ -5989,7 +5989,7 @@ from the machine description file `md'.  */\\n\\n\");\n       write_automata ();\n     }\n \n-  /* Write out constant delay slot info */\n+  /* Write out constant delay slot info.  */\n   write_const_num_delay_slots ();\n \n   write_length_unit_log ();"}, {"sha": "4d9ad3384a1e09c07ddeeeaa14f862d3b43d857a", "filename": "gcc/genautomata.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9da50645221cfa880519542a1c5e37c53837bef/gcc%2Fgenautomata.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9da50645221cfa880519542a1c5e37c53837bef/gcc%2Fgenautomata.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenautomata.c?ref=f9da50645221cfa880519542a1c5e37c53837bef", "patch": "@@ -7911,7 +7911,7 @@ output_min_issue_delay_table (automaton_t automaton)\n   fprintf (output_file, \" \");\n   output_min_issue_delay_vect_name (output_file, automaton);\n   fprintf (output_file, \"[] ATTRIBUTE_UNUSED = {\\n\");\n-  /* Compress the vector */\n+  /* Compress the vector.  */\n   if (automaton->max_min_delay < 2)\n     automaton->min_issue_delay_table_compression_factor = 8;\n   else if (automaton->max_min_delay < 4)"}, {"sha": "74d830dc1b04eeeda698d80dedbbdce1c7f3778c", "filename": "gcc/libgcov.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9da50645221cfa880519542a1c5e37c53837bef/gcc%2Flibgcov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9da50645221cfa880519542a1c5e37c53837bef/gcc%2Flibgcov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibgcov.c?ref=f9da50645221cfa880519542a1c5e37c53837bef", "patch": "@@ -150,7 +150,7 @@ gcov_exit (void)\n \t  }\n     }\n \n-  /* Now merge each file  */\n+  /* Now merge each file.  */\n   for (gi_ptr = gcov_list; gi_ptr; gi_ptr = gi_ptr->next)\n     {\n       struct gcov_summary this_object;\n@@ -233,7 +233,7 @@ gcov_exit (void)\n \t      tag = gcov_read_unsigned ();\n \t      length = gcov_read_unsigned ();\n \n-\t      /* Check function */\n+\t      /* Check function.  */\n \t      if (tag != GCOV_TAG_FUNCTION\n \t\t  || length != GCOV_TAG_FUNCTION_LENGTH\n \t\t  || gcov_read_unsigned () != fi_ptr->ident"}, {"sha": "e67770929789615322330784635186acd2df75ad", "filename": "gcc/mips-tfile.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9da50645221cfa880519542a1c5e37c53837bef/gcc%2Fmips-tfile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9da50645221cfa880519542a1c5e37c53837bef/gcc%2Fmips-tfile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmips-tfile.c?ref=f9da50645221cfa880519542a1c5e37c53837bef", "patch": "@@ -2888,7 +2888,7 @@ parse_def (name_start)\n \t  && memcmp (dir_start, \".endef\", sizeof (\".endef\")-1) == 0)\n \tbreak;\n \n-      /* Pick up the subdirective now */\n+      /* Pick up the subdirective now.  */\n       for (dir_end_p1 = dir_start+1;\n \t   (ch = *dir_end_p1) != ' ' && ch != '\\t';\n \t   dir_end_p1++)\n@@ -3817,7 +3817,7 @@ parse_input ()\n \n   while ((p = read_line ()) != (char *) 0)\n     {\n-      /* Skip leading blanks */\n+      /* Skip leading blanks.  */\n       while (ISSPACE ((unsigned char)*p))\n \tp++;\n \n@@ -5536,7 +5536,7 @@ free_thead (ptr)\n #endif /* MIPS_DEBUGGING_INFO */\n \n \f\n-/* Output an error message and exit */\n+/* Output an error message and exit.  */\n \n void\n fatal (const char *format, ...)"}, {"sha": "cabada2ca46d052f205f82e99075f3cfe57ea68f", "filename": "gcc/optabs.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9da50645221cfa880519542a1c5e37c53837bef/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9da50645221cfa880519542a1c5e37c53837bef/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=f9da50645221cfa880519542a1c5e37c53837bef", "patch": "@@ -1552,7 +1552,7 @@ expand_binop (mode, binoptab, op0, op1, target, unsignedp, methods)\n       rtx equiv_value;\n       int ok = 0;\n \n-      /* Find the correct mode for the real and imaginary parts */\n+      /* Find the correct mode for the real and imaginary parts.  */\n       enum machine_mode submode = GET_MODE_INNER(mode);\n \n       if (submode == BLKmode)\n@@ -2600,7 +2600,7 @@ expand_unop (mode, unoptab, op0, target, unsignedp)\n       rtx x;\n       rtx seq;\n \n-      /* Find the correct mode for the real and imaginary parts */\n+      /* Find the correct mode for the real and imaginary parts.  */\n       enum machine_mode submode = GET_MODE_INNER (mode);\n \n       if (submode == BLKmode)"}, {"sha": "a7b97401269dcb0aa1570308a580d0c3426f4975", "filename": "gcc/prefix.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9da50645221cfa880519542a1c5e37c53837bef/gcc%2Fprefix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9da50645221cfa880519542a1c5e37c53837bef/gcc%2Fprefix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprefix.c?ref=f9da50645221cfa880519542a1c5e37c53837bef", "patch": "@@ -350,7 +350,7 @@ update_path (path, key)\n   return result;\n }\n \n-/* Reset the standard prefix */\n+/* Reset the standard prefix.  */\n void\n set_std_prefix (prefix, len)\n   const char *prefix;"}, {"sha": "c0b3a0b569276a9e719bc5be8ff5864edf597796", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9da50645221cfa880519542a1c5e37c53837bef/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9da50645221cfa880519542a1c5e37c53837bef/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=f9da50645221cfa880519542a1c5e37c53837bef", "patch": "@@ -3274,7 +3274,7 @@ insns_safe_to_move_p (from, to, new_to)\n   return 0;\n }\n \n-/* Return nonzero if IN contains a piece of rtl that has the address LOC */\n+/* Return nonzero if IN contains a piece of rtl that has the address LOC.  */\n int\n loc_mentioned_in_p (loc, in)\n      rtx *loc, in;"}, {"sha": "2aaa63f329a346c942d5e89b6c63d7129b8b0cec", "filename": "gcc/stmt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9da50645221cfa880519542a1c5e37c53837bef/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9da50645221cfa880519542a1c5e37c53837bef/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=f9da50645221cfa880519542a1c5e37c53837bef", "patch": "@@ -5684,7 +5684,7 @@ expand_end_case_type (orig_index, orig_type)\n \t    if (labelvec[i] == 0)\n \t      labelvec[i] = gen_rtx_LABEL_REF (Pmode, default_label);\n \n-\t  /* Output the table */\n+\t  /* Output the table.  */\n \t  emit_label (table_label);\n \n \t  if (CASE_VECTOR_PC_RELATIVE || flag_pic)"}, {"sha": "d01b756e9ce7881f88bf6853bfc85189a1e857fb", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9da50645221cfa880519542a1c5e37c53837bef/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9da50645221cfa880519542a1c5e37c53837bef/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=f9da50645221cfa880519542a1c5e37c53837bef", "patch": "@@ -1278,7 +1278,7 @@ finalize_record_size (rli)\n     unpadded_size_unit\n       = size_binop (PLUS_EXPR, unpadded_size_unit, size_one_node);\n \n-  /* Round the size up to be a multiple of the required alignment */\n+  /* Round the size up to be a multiple of the required alignment.  */\n   TYPE_SIZE (rli->t) = round_up (unpadded_size, TYPE_ALIGN (rli->t));\n   TYPE_SIZE_UNIT (rli->t) = round_up (unpadded_size_unit,\n \t\t\t\t      TYPE_ALIGN (rli->t) / BITS_PER_UNIT);"}, {"sha": "0769d08c6822b62f47470d06aafb23f7c2176396", "filename": "gcc/toplev.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9da50645221cfa880519542a1c5e37c53837bef/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9da50645221cfa880519542a1c5e37c53837bef/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=f9da50645221cfa880519542a1c5e37c53837bef", "patch": "@@ -782,7 +782,8 @@ int flag_exceptions;\n \n int flag_unwind_tables = 0;\n \n-/* Nonzero means generate frame unwind info table exact at each insn boundary */\n+/* Nonzero means generate frame unwind info table exact at each insn\n+   boundary.  */\n \n int flag_asynchronous_unwind_tables = 0;\n \n@@ -4815,7 +4816,7 @@ backend_init (void)\n   init_emit_once (debug_info_level == DINFO_LEVEL_NORMAL\n \t\t  || debug_info_level == DINFO_LEVEL_VERBOSE\n #ifdef VMS_DEBUGGING_INFO\n-\t\t    /* Enable line number info for traceback */\n+\t\t    /* Enable line number info for traceback.  */\n \t\t    || debug_info_level > DINFO_LEVEL_NONE\n #endif\n \t\t    || flag_test_coverage"}, {"sha": "61661eeae6a898e633ad745726bcd3b990201d79", "filename": "gcc/varasm.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9da50645221cfa880519542a1c5e37c53837bef/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9da50645221cfa880519542a1c5e37c53837bef/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=f9da50645221cfa880519542a1c5e37c53837bef", "patch": "@@ -2293,7 +2293,7 @@ const_hash_1 (exp)\n       return code;\n     }\n \n-  /* Compute hashing function */\n+  /* Compute hashing function.  */\n   hi = len;\n   for (i = 0; i < len; i++)\n     hi = ((hi * 613) + (unsigned) (p[i]));\n@@ -2992,7 +2992,7 @@ const_hash_rtx (mode, x)\n \n   decode_rtx_const (mode, x, &u.value);\n \n-  /* Compute hashing function */\n+  /* Compute hashing function.  */\n   hi = 0;\n   for (i = 0; i < ARRAY_SIZE (u.data); i++)\n     hi = hi * 613 + u.data[i];"}, {"sha": "83b7d17fe2161fef82811f9102daa0053875b5b3", "filename": "gcc/vmsdbgout.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9da50645221cfa880519542a1c5e37c53837bef/gcc%2Fvmsdbgout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9da50645221cfa880519542a1c5e37c53837bef/gcc%2Fvmsdbgout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvmsdbgout.c?ref=f9da50645221cfa880519542a1c5e37c53837bef", "patch": "@@ -837,7 +837,7 @@ write_rtnbeg (rtnnum, dosizeonly)\n       totsize += write_debug_string ((char *) go, \"main name\", dosizeonly);\n     }\n \n-  /* The header length never includes the length byte */\n+  /* The header length never includes the length byte.  */\n   rtnbeg.dst_a_rtnbeg_header.dst__header_length.dst_w_length\n    = DST_K_RTNBEG_SIZE + rtnnamelen - 1;\n   rtnbeg.dst_a_rtnbeg_header.dst__header_type.dst_w_type = DST_K_RTNBEG;\n@@ -959,7 +959,7 @@ write_pclines (dosizeonly)\n       linestart = linestart + ((max_line / 10000) + 1) * 10000;\n     }\n \n-  /* Set starting address to beginning of text section */\n+  /* Set starting address to beginning of text section.  */\n   line_num.dst_a_line_num_header.dst__header_length.dst_w_length = 8;\n   line_num.dst_a_line_num_header.dst__header_type.dst_w_type = DST_K_LINE_NUM;\n   pcline.dst_b_pcline_command = DST_K_SET_ABS_PC;\n@@ -1311,7 +1311,7 @@ vmsdbgout_end_prologue (line, file)\n \t\t\t\t   current_function_funcdef_no);\n       ASM_OUTPUT_LABEL (asm_out_file, label);\n \n-      /* VMS PCA expects every PC range to correlate to some line and file */\n+      /* VMS PCA expects every PC range to correlate to some line and file.  */\n       vmsdbgout_source_line (line, file);\n     }\n }\n@@ -1348,7 +1348,7 @@ vmsdbgout_end_epilogue (line, file)\n \t\t\t\t   current_function_funcdef_no);\n       ASM_OUTPUT_LABEL (asm_out_file, label);\n \n-      /* VMS PCA expects every PC range to correlate to some line and file */\n+      /* VMS PCA expects every PC range to correlate to some line and file.  */\n       vmsdbgout_source_line (line, file);\n     }\n }\n@@ -1477,17 +1477,17 @@ lookup_filename (file_name)\n #ifdef VMS\n       struct tm *ts;\n \n-      /* Adjust for GMT */\n+      /* Adjust for GMT.  */\n       ts = (struct tm *) localtime (&statbuf.st_ctime);\n       gmtoff = ts->tm_gmtoff;\n \n-      /* VMS has multiple file format types */\n+      /* VMS has multiple file format types.  */\n       rfo = statbuf.st_fab_rfm;\n #else\n       /* Is GMT adjustment an issue with a cross-compiler? */\n       gmtoff = 0;\n \n-      /* Assume stream LF type file */\n+      /* Assume stream LF type file.  */\n       rfo = 2;\n #endif\n       cdt = 10000000 * (statbuf.st_ctime + gmtoff + vms_epoch_offset);"}]}