{"sha": "776434d183b632291cac1d89b025ab7565c623c6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzc2NDM0ZDE4M2I2MzIyOTFjYWMxZDg5YjAyNWFiNzU2NWM2MjNjNg==", "commit": {"author": {"name": "Walter Lee", "email": "walt@tilera.com", "date": "2013-06-08T16:26:32Z"}, "committer": {"name": "Walter Lee", "email": "walt@gcc.gnu.org", "date": "2013-06-08T16:26:32Z"}, "message": "atomic.h: Don't include stdint.h or features.h.\n\n\t* config/tilepro/atomic.h: Don't include stdint.h or features.h.\n\tReplace int64_t with long long.  Add __extension__ where\n\tappropriate.\n\t* config/tilepro/atomic.c: Include config.h.\n\nFrom-SVN: r199855", "tree": {"sha": "6e10adf1735492306c092fe2ffe58179f60938bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6e10adf1735492306c092fe2ffe58179f60938bf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/776434d183b632291cac1d89b025ab7565c623c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/776434d183b632291cac1d89b025ab7565c623c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/776434d183b632291cac1d89b025ab7565c623c6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/776434d183b632291cac1d89b025ab7565c623c6/comments", "author": {"login": "walt-tilera", "id": 6602917, "node_id": "MDQ6VXNlcjY2MDI5MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/6602917?v=4", "gravatar_id": "", "url": "https://api.github.com/users/walt-tilera", "html_url": "https://github.com/walt-tilera", "followers_url": "https://api.github.com/users/walt-tilera/followers", "following_url": "https://api.github.com/users/walt-tilera/following{/other_user}", "gists_url": "https://api.github.com/users/walt-tilera/gists{/gist_id}", "starred_url": "https://api.github.com/users/walt-tilera/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/walt-tilera/subscriptions", "organizations_url": "https://api.github.com/users/walt-tilera/orgs", "repos_url": "https://api.github.com/users/walt-tilera/repos", "events_url": "https://api.github.com/users/walt-tilera/events{/privacy}", "received_events_url": "https://api.github.com/users/walt-tilera/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f7fbb0036add83f6a1bd4b80fd8defb8820312be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7fbb0036add83f6a1bd4b80fd8defb8820312be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7fbb0036add83f6a1bd4b80fd8defb8820312be"}], "stats": {"total": 40, "additions": 24, "deletions": 16}, "files": [{"sha": "085432be4b4757aafe19a9df176c152682ec4a2e", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/776434d183b632291cac1d89b025ab7565c623c6/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/776434d183b632291cac1d89b025ab7565c623c6/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=776434d183b632291cac1d89b025ab7565c623c6", "patch": "@@ -1,3 +1,10 @@\n+2013-06-08  Walter Lee  <walt@tilera.com>\n+\n+\t* config/tilepro/atomic.h: Don't include stdint.h or features.h.\n+\tReplace int64_t with long long.  Add __extension__ where\n+\tappropriate.\n+\t* config/tilepro/atomic.c: Include config.h.\n+\n 2013-06-06  Douglas B Rupp  <rupp@adacore.com>\n \n \t* config.host (arm-wrs-vxworks): Configure with other soft float."}, {"sha": "6417c1304cd377b82d6adfd76a49ca8cb6c961f4", "filename": "libgcc/config/tilepro/atomic.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/776434d183b632291cac1d89b025ab7565c623c6/libgcc%2Fconfig%2Ftilepro%2Fatomic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/776434d183b632291cac1d89b025ab7565c623c6/libgcc%2Fconfig%2Ftilepro%2Fatomic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Ftilepro%2Fatomic.c?ref=776434d183b632291cac1d89b025ab7565c623c6", "patch": "@@ -21,6 +21,7 @@\n    see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n    <http://www.gnu.org/licenses/>.  */\n \n+#include \"config.h\"\n #include \"system.h\"\n #include \"coretypes.h\"\n #include \"atomic.h\""}, {"sha": "8d38f0dee9ce9e680118dfe5af71a9642c861be4", "filename": "libgcc/config/tilepro/atomic.h", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/776434d183b632291cac1d89b025ab7565c623c6/libgcc%2Fconfig%2Ftilepro%2Fatomic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/776434d183b632291cac1d89b025ab7565c623c6/libgcc%2Fconfig%2Ftilepro%2Fatomic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Ftilepro%2Fatomic.h?ref=776434d183b632291cac1d89b025ab7565c623c6", "patch": "@@ -92,8 +92,6 @@\n    compare-and-exchange routine, so may be potentially less efficient.  */\n #endif\n \n-#include <stdint.h>\n-#include <features.h>\n #ifdef __tilegx__\n #include <arch/spr_def.h>\n #else\n@@ -122,9 +120,9 @@ static __inline __attribute__ ((always_inline))\n \n /* 64-bit integer compare-and-exchange.  */\n static __inline __attribute__ ((always_inline))\n-     int64_t arch_atomic_val_compare_and_exchange_8 (volatile int64_t * mem,\n-\t\t\t\t\t\t     int64_t oldval,\n-\t\t\t\t\t\t     int64_t newval)\n+     long long arch_atomic_val_compare_and_exchange_8 (volatile long long\n+\t\t\t\t\t\t       *mem, long long oldval,\n+\t\t\t\t\t\t       long long newval)\n {\n #ifdef __tilegx__\n   __insn_mtspr (SPR_CMPEXCH_VALUE, oldval);\n@@ -139,7 +137,7 @@ static __inline __attribute__ ((always_inline))\n \t\t\t\"R04\" (newval_lo), \"R05\" (newval_hi),\n \t\t\t\"m\" (*mem):\"r20\", \"r21\", \"r22\", \"r23\", \"r24\", \"r25\",\n \t\t\t\"r26\", \"r27\", \"r28\", \"r29\", \"memory\");\n-  return ((uint64_t) result_hi) << 32 | result_lo;\n+  return ((long long) result_hi) << 32 | result_lo;\n #endif\n }\n \n@@ -150,11 +148,11 @@ extern int __arch_atomic_error_bad_argument_size (void)\n \n \n #define arch_atomic_val_compare_and_exchange(mem, o, n)                 \\\n-  ({                                                                    \\\n+  __extension__ ({                                                      \\\n     (__typeof(*(mem)))(__typeof(*(mem)-*(mem)))                         \\\n       ((sizeof(*(mem)) == 8) ?                                          \\\n        arch_atomic_val_compare_and_exchange_8(                          \\\n-         (volatile int64_t*)(mem), (__typeof((o)-(o)))(o),              \\\n+         (volatile long long*)(mem), (__typeof((o)-(o)))(o),            \\\n          (__typeof((n)-(n)))(n)) :                                      \\\n        (sizeof(*(mem)) == 4) ?                                          \\\n        arch_atomic_val_compare_and_exchange_4(                          \\\n@@ -164,7 +162,7 @@ extern int __arch_atomic_error_bad_argument_size (void)\n   })\n \n #define arch_atomic_bool_compare_and_exchange(mem, o, n)                \\\n-  ({                                                                    \\\n+  __extension__ ({                                                      \\\n     __typeof(o) __o = (o);                                              \\\n     __builtin_expect(                                                   \\\n       __o == arch_atomic_val_compare_and_exchange((mem), __o, (n)), 1); \\\n@@ -174,7 +172,7 @@ extern int __arch_atomic_error_bad_argument_size (void)\n /* Loop with compare_and_exchange until we guess the correct value.\n    Normally \"expr\" will be an expression using __old and __value.  */\n #define __arch_atomic_update_cmpxchg(mem, value, expr)                  \\\n-  ({                                                                    \\\n+  __extension__ ({                                                      \\\n     __typeof(value) __value = (value);                                  \\\n     __typeof(*(mem)) *__mem = (mem), __old = *__mem, __guess;           \\\n     do {                                                                \\\n@@ -189,12 +187,14 @@ extern int __arch_atomic_error_bad_argument_size (void)\n /* Generic atomic op with 8- or 4-byte variant.\n    The _mask, _addend, and _expr arguments are ignored on tilegx.  */\n #define __arch_atomic_update(mem, value, op, _mask, _addend, _expr)     \\\n-  ({                                                                    \\\n+  __extension__ ({                                                      \\\n     ((__typeof(*(mem)))                                                 \\\n      ((sizeof(*(mem)) == 8) ? (__typeof(*(mem)-*(mem)))__insn_##op(     \\\n-        (void *)(mem), (int64_t)(__typeof((value)-(value)))(value)) :   \\\n+        (volatile void *)(mem),                                         \\\n+        (long long)(__typeof((value)-(value)))(value)) :                \\\n       (sizeof(*(mem)) == 4) ? (int)__insn_##op##4(                      \\\n-        (void *)(mem), (int32_t)(__typeof((value)-(value)))(value)) :   \\\n+        (volatile void *)(mem),                                         \\\n+        (int)(__typeof((value)-(value)))(value)) :                      \\\n       __arch_atomic_error_bad_argument_size()));                        \\\n   })\n \n@@ -224,7 +224,7 @@ static __inline __attribute__ ((always_inline))\n /* Generic atomic op with 8- or 4-byte variant.\n    The _op argument is ignored on tilepro.  */\n #define __arch_atomic_update(mem, value, _op, mask, addend, expr)       \\\n-  ({                                                                    \\\n+  __extension__ ({                                                      \\\n     (__typeof(*(mem)))(__typeof(*(mem)-*(mem)))                         \\\n       ((sizeof(*(mem)) == 8) ?                                          \\\n        __arch_atomic_update_cmpxchg((mem), (value), (expr)) :           \\\n@@ -263,13 +263,13 @@ static __inline __attribute__ ((always_inline))\n   __arch_atomic_update_cmpxchg(mem, mask, ~(__old & __value))\n \n #define arch_atomic_bit_set(mem, bit)                                   \\\n-  ({                                                                    \\\n+  __extension__ ({                                                      \\\n     __typeof(*(mem)) __mask = (__typeof(*(mem)))1 << (bit);             \\\n     __mask & arch_atomic_or((mem), __mask);                             \\\n   })\n \n #define arch_atomic_bit_clear(mem, bit)                                 \\\n-  ({                                                                    \\\n+  __extension__ ({                                                      \\\n     __typeof(*(mem)) __mask = (__typeof(*(mem)))1 << (bit);             \\\n     __mask & arch_atomic_and((mem), ~__mask);                           \\\n   })"}]}