{"sha": "3ceed675633b522b655ce4bea683f98e527aafaf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2NlZWQ2NzU2MzNiNTIyYjY1NWNlNGJlYTY4M2Y5OGU1MjdhYWZhZg==", "commit": {"author": {"name": "Cesar Philippidis", "email": "cesar@codesourcery.com", "date": "2015-11-04T22:09:53Z"}, "committer": {"name": "Cesar Philippidis", "email": "cesar@gcc.gnu.org", "date": "2015-11-04T22:09:53Z"}, "message": "(cp_parser_oacc_single_int_clause): New function.\n\n\tgcc/cp/\n\t* (cp_parser_oacc_single_int_clause): New function.\n\t(cp_parser_oacc_clause_vector_length): Delete.\n\t(cp_parser_omp_clause_num_gangs): Delete.\n\t(cp_parser_omp_clause_num_workers): Delete.\n\t(cp_parser_oacc_all_clauses): Use cp_parser_oacc_single_int_clause\n\tfor num_gangs, num_workers and vector_length.\n\nFrom-SVN: r229786", "tree": {"sha": "63e3d7b6b713a33a25a99f26347d554545702cbc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/63e3d7b6b713a33a25a99f26347d554545702cbc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3ceed675633b522b655ce4bea683f98e527aafaf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ceed675633b522b655ce4bea683f98e527aafaf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ceed675633b522b655ce4bea683f98e527aafaf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ceed675633b522b655ce4bea683f98e527aafaf/comments", "author": {"login": "cesarjp", "id": 4576177, "node_id": "MDQ6VXNlcjQ1NzYxNzc=", "avatar_url": "https://avatars.githubusercontent.com/u/4576177?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cesarjp", "html_url": "https://github.com/cesarjp", "followers_url": "https://api.github.com/users/cesarjp/followers", "following_url": "https://api.github.com/users/cesarjp/following{/other_user}", "gists_url": "https://api.github.com/users/cesarjp/gists{/gist_id}", "starred_url": "https://api.github.com/users/cesarjp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cesarjp/subscriptions", "organizations_url": "https://api.github.com/users/cesarjp/orgs", "repos_url": "https://api.github.com/users/cesarjp/repos", "events_url": "https://api.github.com/users/cesarjp/events{/privacy}", "received_events_url": "https://api.github.com/users/cesarjp/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "24bc75034b5828506cb753309adcb6df618df158", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24bc75034b5828506cb753309adcb6df618df158", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24bc75034b5828506cb753309adcb6df618df158"}], "stats": {"total": 167, "additions": 52, "deletions": 115}, "files": [{"sha": "99ba1aee83b90e6c7b6ee48071d103290fb2deb7", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ceed675633b522b655ce4bea683f98e527aafaf/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ceed675633b522b655ce4bea683f98e527aafaf/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3ceed675633b522b655ce4bea683f98e527aafaf", "patch": "@@ -1,3 +1,12 @@\n+2015-11-04  Cesar Philippidis  <cesar@codesourcery.com>\n+\n+\t* (cp_parser_oacc_single_int_clause): New function.\n+\t(cp_parser_oacc_clause_vector_length): Delete.\n+\t(cp_parser_omp_clause_num_gangs): Delete.\n+\t(cp_parser_omp_clause_num_workers): Delete.\n+\t(cp_parser_oacc_all_clauses): Use cp_parser_oacc_single_int_clause\n+\tfor num_gangs, num_workers and vector_length.\n+\n 2015-11-04  Mikhail Maltsev  <maltsevm@gmail.com>\n \n \t* call.c (validate_conversion_obstack): Define unconditionally."}, {"sha": "4f6cd2d9bebfb962215ce7a33fbe0c41b64ff203", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 43, "deletions": 115, "changes": 158, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ceed675633b522b655ce4bea683f98e527aafaf/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ceed675633b522b655ce4bea683f98e527aafaf/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=3ceed675633b522b655ce4bea683f98e527aafaf", "patch": "@@ -29590,6 +29590,39 @@ cp_parser_oacc_simple_clause (cp_parser * /* parser  */,\n   return c;\n }\n \n+ /* OpenACC:\n+   num_gangs ( expression )\n+   num_workers ( expression )\n+   vector_length ( expression )  */\n+\n+static tree\n+cp_parser_oacc_single_int_clause (cp_parser *parser, omp_clause_code code,\n+\t\t\t\t  const char *str, tree list)\n+{\n+  location_t loc = cp_lexer_peek_token (parser->lexer)->location;\n+\n+  if (!cp_parser_require (parser, CPP_OPEN_PAREN, RT_OPEN_PAREN))\n+    return list;\n+\n+  tree t = cp_parser_assignment_expression (parser, NULL, false, false);\n+\n+  if (t == error_mark_node\n+      || !cp_parser_require (parser, CPP_CLOSE_PAREN, RT_CLOSE_PAREN))\n+    {\n+      cp_parser_skip_to_closing_parenthesis (parser, /*recovering=*/true,\n+\t\t\t\t\t     /*or_comma=*/false,\n+\t\t\t\t\t     /*consume_paren=*/true);\n+      return list;\n+    }\n+\n+  check_no_duplicate_clause (list, code, str, loc);\n+\n+  tree c = build_omp_clause (loc, code);\n+  OMP_CLAUSE_OPERAND (c, 0) = t;\n+  OMP_CLAUSE_CHAIN (c) = list;\n+  return c;\n+}\n+\n /* OpenACC:\n \n     gang [( gang-arg-list )]\n@@ -29713,45 +29746,6 @@ cp_parser_oacc_shape_clause (cp_parser *parser, omp_clause_code kind,\n   return list;\n }\n \n-/* OpenACC:\n-   vector_length ( expression ) */\n-\n-static tree\n-cp_parser_oacc_clause_vector_length (cp_parser *parser, tree list)\n-{\n-  tree t, c;\n-  location_t location = cp_lexer_peek_token (parser->lexer)->location;\n-  bool error = false;\n-\n-  if (!cp_parser_require (parser, CPP_OPEN_PAREN, RT_OPEN_PAREN))\n-    return list;\n-\n-  t = cp_parser_condition (parser);\n-  if (t == error_mark_node || !INTEGRAL_TYPE_P (TREE_TYPE (t)))\n-    {\n-      error_at (location, \"expected positive integer expression\");\n-      error = true;\n-    }\n-\n-  if (error || !cp_parser_require (parser, CPP_CLOSE_PAREN, RT_CLOSE_PAREN))\n-    {\n-      cp_parser_skip_to_closing_parenthesis (parser, /*recovering=*/true,\n-\t\t\t\t\t   /*or_comma=*/false,\n-\t\t\t\t\t   /*consume_paren=*/true);\n-      return list;\n-    }\n-\n-  check_no_duplicate_clause (list, OMP_CLAUSE_VECTOR_LENGTH, \"vector_length\",\n-\t\t\t     location);\n-\n-  c = build_omp_clause (location, OMP_CLAUSE_VECTOR_LENGTH);\n-  OMP_CLAUSE_VECTOR_LENGTH_EXPR (c) = t;\n-  OMP_CLAUSE_CHAIN (c) = list;\n-  list = c;\n-\n-  return list;\n-}\n-\n /* OpenACC 2.0\n    Parse wait clause or directive parameters.  */\n \n@@ -30130,42 +30124,6 @@ cp_parser_omp_clause_nowait (cp_parser * /*parser*/,\n   return c;\n }\n \n-/* OpenACC:\n-   num_gangs ( expression ) */\n-\n-static tree\n-cp_parser_omp_clause_num_gangs (cp_parser *parser, tree list)\n-{\n-  tree t, c;\n-  location_t location = cp_lexer_peek_token (parser->lexer)->location;\n-\n-  if (!cp_parser_require (parser, CPP_OPEN_PAREN, RT_OPEN_PAREN))\n-    return list;\n-\n-  t = cp_parser_condition (parser);\n-\n-  if (t == error_mark_node\n-      || !cp_parser_require (parser, CPP_CLOSE_PAREN, RT_CLOSE_PAREN))\n-    cp_parser_skip_to_closing_parenthesis (parser, /*recovering=*/true,\n-\t\t\t\t\t   /*or_comma=*/false,\n-\t\t\t\t\t   /*consume_paren=*/true);\n-\n-  if (!INTEGRAL_TYPE_P (TREE_TYPE (t)))\n-    {\n-      error_at (location, \"expected positive integer expression\");\n-      return list;\n-    }\n-\n-  check_no_duplicate_clause (list, OMP_CLAUSE_NUM_GANGS, \"num_gangs\", location);\n-\n-  c = build_omp_clause (location, OMP_CLAUSE_NUM_GANGS);\n-  OMP_CLAUSE_NUM_GANGS_EXPR (c) = t;\n-  OMP_CLAUSE_CHAIN (c) = list;\n-  list = c;\n-\n-  return list;\n-}\n-\n /* OpenMP 2.5:\n    num_threads ( expression ) */\n \n@@ -30374,43 +30332,6 @@ cp_parser_omp_clause_defaultmap (cp_parser *parser, tree list,\n   return list;\n }\n \n-/* OpenACC:\n-   num_workers ( expression ) */\n-\n-static tree\n-cp_parser_omp_clause_num_workers (cp_parser *parser, tree list)\n-{\n-  tree t, c;\n-  location_t location = cp_lexer_peek_token (parser->lexer)->location;\n-\n-  if (!cp_parser_require (parser, CPP_OPEN_PAREN, RT_OPEN_PAREN))\n-    return list;\n-\n-  t = cp_parser_condition (parser);\n-\n-  if (t == error_mark_node\n-      || !cp_parser_require (parser, CPP_CLOSE_PAREN, RT_CLOSE_PAREN))\n-    cp_parser_skip_to_closing_parenthesis (parser, /*recovering=*/true,\n-\t\t\t\t\t   /*or_comma=*/false,\n-\t\t\t\t\t   /*consume_paren=*/true);\n-\n-  if (!INTEGRAL_TYPE_P (TREE_TYPE (t)))\n-    {\n-      error_at (location, \"expected positive integer expression\");\n-      return list;\n-    }\n-\n-  check_no_duplicate_clause (list, OMP_CLAUSE_NUM_WORKERS, \"num_gangs\",\n-\t\t\t\t\t\t\t\tlocation);\n-\n-  c = build_omp_clause (location, OMP_CLAUSE_NUM_WORKERS);\n-  OMP_CLAUSE_NUM_WORKERS_EXPR (c) = t;\n-  OMP_CLAUSE_CHAIN (c) = list;\n-  list = c;\n-\n-  return list;\n-}\n-\n /* OpenMP 2.5:\n    ordered\n \n@@ -31422,6 +31343,7 @@ cp_parser_oacc_all_clauses (cp_parser *parser, omp_clause_mask mask,\n     {\n       location_t here;\n       pragma_omp_clause c_kind;\n+      omp_clause_code code;\n       const char *c_name;\n       tree prev = clauses;\n \n@@ -31488,12 +31410,16 @@ cp_parser_oacc_all_clauses (cp_parser *parser, omp_clause_mask mask,\n \t  c_name = \"if\";\n \t  break;\n \tcase PRAGMA_OACC_CLAUSE_NUM_GANGS:\n-\t  clauses = cp_parser_omp_clause_num_gangs (parser, clauses);\n+\t  code = OMP_CLAUSE_NUM_GANGS;\n \t  c_name = \"num_gangs\";\n+\t  clauses = cp_parser_oacc_single_int_clause (parser, code, c_name,\n+\t\t\t\t\t\t      clauses);\n \t  break;\n \tcase PRAGMA_OACC_CLAUSE_NUM_WORKERS:\n-\t  clauses = cp_parser_omp_clause_num_workers (parser, clauses);\n \t  c_name = \"num_workers\";\n+\t  code = OMP_CLAUSE_NUM_WORKERS;\n+\t  clauses = cp_parser_oacc_single_int_clause (parser, code, c_name,\n+\t\t\t\t\t\t      clauses);\n \t  break;\n \tcase PRAGMA_OACC_CLAUSE_PRESENT:\n \t  clauses = cp_parser_oacc_data_clause (parser, c_kind, clauses);\n@@ -31534,8 +31460,10 @@ cp_parser_oacc_all_clauses (cp_parser *parser, omp_clause_mask mask,\n \t\t\t\t\t\t c_name, clauses);\n \t  break;\n \tcase PRAGMA_OACC_CLAUSE_VECTOR_LENGTH:\n-\t  clauses = cp_parser_oacc_clause_vector_length (parser, clauses);\n \t  c_name = \"vector_length\";\n+\t  code = OMP_CLAUSE_VECTOR_LENGTH;\n+\t  clauses = cp_parser_oacc_single_int_clause (parser, code, c_name,\n+\t\t\t\t\t\t      clauses);\n \t  break;\n \tcase PRAGMA_OACC_CLAUSE_WAIT:\n \t  clauses = cp_parser_oacc_clause_wait (parser, clauses);"}]}