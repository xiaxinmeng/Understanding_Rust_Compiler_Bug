{"sha": "0e7eef6556703cd53b336d0b5280c3696586d431", "node_id": "C_kwDOANBUbNoAKDBlN2VlZjY1NTY3MDNjZDUzYjMzNmQwYjUyODBjMzY5NjU4NmQ0MzE", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-03-30T13:56:34Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-04-11T10:44:59Z"}, "message": "Make the can equal interface more permissive with associated types", "tree": {"sha": "27ca9d19ce696edf0b19f302de3069ae290834e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/27ca9d19ce696edf0b19f302de3069ae290834e4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0e7eef6556703cd53b336d0b5280c3696586d431", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e7eef6556703cd53b336d0b5280c3696586d431", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e7eef6556703cd53b336d0b5280c3696586d431", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e7eef6556703cd53b336d0b5280c3696586d431/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7e6527975d2872c6e928dca6912604b021715cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7e6527975d2872c6e928dca6912604b021715cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7e6527975d2872c6e928dca6912604b021715cb"}], "stats": {"total": 11, "additions": 7, "deletions": 4}, "files": [{"sha": "9ea49cae820879bd99bdd88054d2755c790a8be1", "filename": "gcc/rust/typecheck/rust-tyty-cmp.h", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e7eef6556703cd53b336d0b5280c3696586d431/gcc%2Frust%2Ftypecheck%2Frust-tyty-cmp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e7eef6556703cd53b336d0b5280c3696586d431/gcc%2Frust%2Ftypecheck%2Frust-tyty-cmp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-cmp.h?ref=0e7eef6556703cd53b336d0b5280c3696586d431", "patch": "@@ -43,16 +43,19 @@ class BaseCmp : public TyConstVisitor\n \t    return ok;\n \t  }\n       }\n-    else if (other->get_kind () == TypeKind::PLACEHOLDER)\n+    if (other->get_kind () == TypeKind::PLACEHOLDER)\n       {\n \tconst PlaceholderType *p = static_cast<const PlaceholderType *> (other);\n \tif (p->can_resolve ())\n \t  {\n-\t    const BaseType *resolved = p->resolve ();\n-\t    resolved->accept_vis (*this);\n-\t    return ok;\n+\t    other = p->resolve ();\n \t  }\n       }\n+    if (other->get_kind () == TypeKind::PROJECTION)\n+      {\n+\tconst ProjectionType *p = static_cast<const ProjectionType *> (other);\n+\tother = p->get ();\n+      }\n \n     other->accept_vis (*this);\n     return ok;"}]}