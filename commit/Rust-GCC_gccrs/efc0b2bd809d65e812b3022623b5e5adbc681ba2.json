{"sha": "efc0b2bd809d65e812b3022623b5e5adbc681ba2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWZjMGIyYmQ4MDlkNjVlODEyYjMwMjI2MjNiNWU1YWRiYzY4MWJhMg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@google.com", "date": "2009-04-16T16:08:04Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2009-04-16T16:08:04Z"}, "message": "rtlanal.c (alloc_reg_note): New function, broken out of add_reg_note.\n\n\t* rtlanal.c (alloc_reg_note): New function, broken out of\n\tadd_reg_note.\n\t(add_reg_note): Call alloc_reg_note.\n\t* rtl.h (alloc_reg_note): Declare.\n\t* combine.c (try_combine): Use alloc_reg_note.\n\t(recog_for_combine, move_deaths): Likewise.\n\t(distribute_notes): Use alloc_reg_note and add_reg_note.\n\t* haifa-sched.c (sched_create_recovery_edges): Use add_reg_note.\n\t* combine-stack-adj.c (adjust_frame_related_expr): Likewise.\n\t* reload1.c (eliminate_regs_1): Use alloc_reg_note.\n\nFrom-SVN: r146201", "tree": {"sha": "3ebbcbf49394dbd129b5e797695277272a56d921", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3ebbcbf49394dbd129b5e797695277272a56d921"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/efc0b2bd809d65e812b3022623b5e5adbc681ba2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efc0b2bd809d65e812b3022623b5e5adbc681ba2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efc0b2bd809d65e812b3022623b5e5adbc681ba2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efc0b2bd809d65e812b3022623b5e5adbc681ba2/comments", "author": null, "committer": null, "parents": [{"sha": "6080348f0a75caa10df4208617d9247d56e85329", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6080348f0a75caa10df4208617d9247d56e85329", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6080348f0a75caa10df4208617d9247d56e85329"}], "stats": {"total": 86, "additions": 50, "deletions": 36}, "files": [{"sha": "28e5e3521bb571ba647c395cafafe341c1f9bfd9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efc0b2bd809d65e812b3022623b5e5adbc681ba2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efc0b2bd809d65e812b3022623b5e5adbc681ba2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=efc0b2bd809d65e812b3022623b5e5adbc681ba2", "patch": "@@ -1,3 +1,16 @@\n+2009-04-16  Ian Lance Taylor  <iant@google.com>\n+\n+\t* rtlanal.c (alloc_reg_note): New function, broken out of\n+\tadd_reg_note.\n+\t(add_reg_note): Call alloc_reg_note.\n+\t* rtl.h (alloc_reg_note): Declare.\n+\t* combine.c (try_combine): Use alloc_reg_note.\n+\t(recog_for_combine, move_deaths): Likewise.\n+\t(distribute_notes): Use alloc_reg_note and add_reg_note.\n+\t* haifa-sched.c (sched_create_recovery_edges): Use add_reg_note.\n+\t* combine-stack-adj.c (adjust_frame_related_expr): Likewise.\n+\t* reload1.c (eliminate_regs_1): Use alloc_reg_note.\n+\n 2009-04-16  Vladimir Makarov  <vmakarov@redhat.com>\n \n \tPR rtl-optimization/39762"}, {"sha": "d5dbbdbe80fa5a4e9caad6b603f33b8c626c57cf", "filename": "gcc/combine-stack-adj.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efc0b2bd809d65e812b3022623b5e5adbc681ba2/gcc%2Fcombine-stack-adj.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efc0b2bd809d65e812b3022623b5e5adbc681ba2/gcc%2Fcombine-stack-adj.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine-stack-adj.c?ref=efc0b2bd809d65e812b3022623b5e5adbc681ba2", "patch": "@@ -1,6 +1,6 @@\n /* Combine stack adjustments.\n    Copyright (C) 1987, 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997,\n-   1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008\n+   1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -333,9 +333,7 @@ adjust_frame_related_expr (rtx last_sp_set, rtx insn,\n   if (note)\n     XEXP (note, 0) = new_expr;\n   else\n-    REG_NOTES (last_sp_set)\n-      = gen_rtx_EXPR_LIST (REG_FRAME_RELATED_EXPR, new_expr,\n-\t\t\t   REG_NOTES (last_sp_set));\n+    add_reg_note (last_sp_set, REG_FRAME_RELATED_EXPR, new_expr);\n }\n \n /* Subroutine of combine_stack_adjustments, called for each basic block.  */\n@@ -561,4 +559,3 @@ struct rtl_opt_pass pass_stack_adjustments =\n   TODO_ggc_collect,                     /* todo_flags_finish */\n  }\n };\n-"}, {"sha": "b070ee1c2abc56bc8cfc80888abbd502fee7f5de", "filename": "gcc/combine.c", "status": "modified", "additions": 14, "deletions": 17, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efc0b2bd809d65e812b3022623b5e5adbc681ba2/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efc0b2bd809d65e812b3022623b5e5adbc681ba2/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=efc0b2bd809d65e812b3022623b5e5adbc681ba2", "patch": "@@ -3643,34 +3643,34 @@ try_combine (rtx i3, rtx i2, rtx i1, int *new_direct_jump_p)\n     if (i3dest_killed)\n       {\n \tif (newi2pat && reg_set_p (i3dest_killed, newi2pat))\n-\t  distribute_notes (gen_rtx_EXPR_LIST (REG_DEAD, i3dest_killed,\n-\t\t\t\t\t       NULL_RTX),\n+\t  distribute_notes (alloc_reg_note (REG_DEAD, i3dest_killed,\n+\t\t\t\t\t    NULL_RTX),\n \t\t\t    NULL_RTX, i2, NULL_RTX, elim_i2, elim_i1);\n \telse\n-\t  distribute_notes (gen_rtx_EXPR_LIST (REG_DEAD, i3dest_killed,\n-\t\t\t\t\t       NULL_RTX),\n+\t  distribute_notes (alloc_reg_note (REG_DEAD, i3dest_killed,\n+\t\t\t\t\t    NULL_RTX),\n \t\t\t    NULL_RTX, i3, newi2pat ? i2 : NULL_RTX,\n \t\t\t    elim_i2, elim_i1);\n       }\n \n     if (i2dest_in_i2src)\n       {\n \tif (newi2pat && reg_set_p (i2dest, newi2pat))\n-\t  distribute_notes (gen_rtx_EXPR_LIST (REG_DEAD, i2dest, NULL_RTX),\n+\t  distribute_notes (alloc_reg_note (REG_DEAD, i2dest, NULL_RTX),\n \t\t\t    NULL_RTX, i2, NULL_RTX, NULL_RTX, NULL_RTX);\n \telse\n-\t  distribute_notes (gen_rtx_EXPR_LIST (REG_DEAD, i2dest, NULL_RTX),\n+\t  distribute_notes (alloc_reg_note (REG_DEAD, i2dest, NULL_RTX),\n \t\t\t    NULL_RTX, i3, newi2pat ? i2 : NULL_RTX,\n \t\t\t    NULL_RTX, NULL_RTX);\n       }\n \n     if (i1dest_in_i1src)\n       {\n \tif (newi2pat && reg_set_p (i1dest, newi2pat))\n-\t  distribute_notes (gen_rtx_EXPR_LIST (REG_DEAD, i1dest, NULL_RTX),\n+\t  distribute_notes (alloc_reg_note (REG_DEAD, i1dest, NULL_RTX),\n \t\t\t    NULL_RTX, i2, NULL_RTX, NULL_RTX, NULL_RTX);\n \telse\n-\t  distribute_notes (gen_rtx_EXPR_LIST (REG_DEAD, i1dest, NULL_RTX),\n+\t  distribute_notes (alloc_reg_note (REG_DEAD, i1dest, NULL_RTX),\n \t\t\t    NULL_RTX, i3, newi2pat ? i2 : NULL_RTX,\n \t\t\t    NULL_RTX, NULL_RTX);\n       }\n@@ -9863,8 +9863,8 @@ recog_for_combine (rtx *pnewpat, rtx insn, rtx *pnotes)\n \t  if (GET_CODE (XEXP (XVECEXP (newpat, 0, i), 0)) != SCRATCH) \n \t    {\n \t      gcc_assert (REG_P (XEXP (XVECEXP (newpat, 0, i), 0)));\n-\t      notes = gen_rtx_EXPR_LIST (REG_UNUSED,\n-\t\t\t\t\t XEXP (XVECEXP (newpat, 0, i), 0), notes);\n+\t      notes = alloc_reg_note (REG_UNUSED,\n+\t\t\t\t      XEXP (XVECEXP (newpat, 0, i), 0), notes);\n \t    }\n \t}\n       pat = newpat;\n@@ -12231,7 +12231,7 @@ move_deaths (rtx x, rtx maybe_kill_insn, int from_luid, rtx to_insn,\n \t      *pnotes = note;\n \t    }\n \t  else\n-\t    *pnotes = gen_rtx_EXPR_LIST (REG_DEAD, x, *pnotes);\n+\t    *pnotes = alloc_reg_note (REG_DEAD, x, *pnotes);\n \t}\n \n       return;\n@@ -12800,8 +12800,8 @@ distribute_notes (rtx notes, rtx from_insn, rtx i3, rtx i2, rtx elim_i2,\n \t\t\t      && ! reg_bitfield_target_p (piece,\n \t\t\t\t\t\t\t  PATTERN (place)))\n \t\t\t    {\n-\t\t\t      rtx new_note\n-\t\t\t\t= gen_rtx_EXPR_LIST (REG_DEAD, piece, NULL_RTX);\n+\t\t\t      rtx new_note = alloc_reg_note (REG_DEAD, piece,\n+\t\t\t\t\t\t\t     NULL_RTX);\n \n \t\t\t      distribute_notes (new_note, place, place,\n \t\t\t\t\t\tNULL_RTX, NULL_RTX, NULL_RTX);\n@@ -12848,9 +12848,7 @@ distribute_notes (rtx notes, rtx from_insn, rtx i3, rtx i2, rtx elim_i2,\n \t}\n \n       if (place2)\n-\tREG_NOTES (place2) \n-\t  = gen_rtx_fmt_ee (GET_CODE (note), REG_NOTE_KIND (note),\n-\t\t\t    XEXP (note, 0), REG_NOTES (place2));\n+\tadd_reg_note (place2, REG_NOTE_KIND (note), XEXP (note, 0));\n     }\n }\n \f\n@@ -13046,4 +13044,3 @@ struct rtl_opt_pass pass_combine =\n   TODO_ggc_collect,                     /* todo_flags_finish */\n  }\n };\n-"}, {"sha": "60aeac3a55f7de0022dcaf3820edb1aa3216cbb9", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efc0b2bd809d65e812b3022623b5e5adbc681ba2/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efc0b2bd809d65e812b3022623b5e5adbc681ba2/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=efc0b2bd809d65e812b3022623b5e5adbc681ba2", "patch": "@@ -1,6 +1,6 @@\n /* Instruction scheduling pass.\n    Copyright (C) 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000,\n-   2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008\n+   2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n    Free Software Foundation, Inc.\n    Contributed by Michael Tiemann (tiemann@cygnus.com) Enhanced by,\n    and currently maintained by, Jim Wilson (wilson@cygnus.com)\n@@ -3906,12 +3906,10 @@ sched_create_recovery_edges (basic_block first_bb, basic_block rec,\n       /* Rewritten from cfgrtl.c.  */\n       if (flag_reorder_blocks_and_partition\n \t  && targetm.have_named_sections)\n-\t/* We don't need the same note for the check because\n-\t   any_condjump_p (check) == true.  */\n \t{\n-\t  REG_NOTES (jump) = gen_rtx_EXPR_LIST (REG_CROSSING_JUMP,\n-\t\t\t\t\t\tNULL_RTX,\n-\t\t\t\t\t\tREG_NOTES (jump));\n+\t  /* We don't need the same note for the check because\n+\t     any_condjump_p (check) == true.  */\n+\t  add_reg_note (jump, REG_CROSSING_JUMP, NULL_RTX);\n \t}\n       edge_flags = EDGE_CROSSING;\n     }"}, {"sha": "bb5a3a2bcd3e417e691bbfd0060d3e7945b822ef", "filename": "gcc/reload1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efc0b2bd809d65e812b3022623b5e5adbc681ba2/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efc0b2bd809d65e812b3022623b5e5adbc681ba2/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=efc0b2bd809d65e812b3022623b5e5adbc681ba2", "patch": "@@ -2686,7 +2686,7 @@ eliminate_regs_1 (rtx x, enum machine_mode mem_mode, rtx insn,\n \t\t\t? eliminate_regs_1 (XEXP (x, 1), mem_mode, insn, true)\n \t\t\t: NULL_RTX);\n \n-\t      x = gen_rtx_EXPR_LIST (REG_NOTE_KIND (x), new_rtx, XEXP (x, 1));\n+\t      x = alloc_reg_note (REG_NOTE_KIND (x), new_rtx, XEXP (x, 1));\n \t    }\n \t}\n "}, {"sha": "de9e7119dd5d55ff52437b469ff85ad59bcc8a11", "filename": "gcc/rtl.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efc0b2bd809d65e812b3022623b5e5adbc681ba2/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efc0b2bd809d65e812b3022623b5e5adbc681ba2/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=efc0b2bd809d65e812b3022623b5e5adbc681ba2", "patch": "@@ -1759,6 +1759,7 @@ extern rtx find_reg_equal_equiv_note (const_rtx);\n extern rtx find_constant_src (const_rtx);\n extern int find_reg_fusage (const_rtx, enum rtx_code, const_rtx);\n extern int find_regno_fusage (const_rtx, enum rtx_code, unsigned int);\n+extern rtx alloc_reg_note (enum reg_note, rtx, rtx);\n extern void add_reg_note (rtx, enum reg_note, rtx);\n extern void remove_note (rtx, const_rtx);\n extern void remove_reg_equal_equiv_notes (rtx);"}, {"sha": "d15dbe22822503f7d06d2beb92ea6e945103dd10", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efc0b2bd809d65e812b3022623b5e5adbc681ba2/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efc0b2bd809d65e812b3022623b5e5adbc681ba2/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=efc0b2bd809d65e812b3022623b5e5adbc681ba2", "patch": "@@ -1865,10 +1865,11 @@ find_regno_fusage (const_rtx insn, enum rtx_code code, unsigned int regno)\n }\n \n \f\n-/* Add register note with kind KIND and datum DATUM to INSN.  */\n+/* Allocate a register note with kind KIND and datum DATUM.  LIST is\n+   stored as the pointer to the next register note.  */\n \n-void\n-add_reg_note (rtx insn, enum reg_note kind, rtx datum)\n+rtx\n+alloc_reg_note (enum reg_note kind, rtx datum, rtx list)\n {\n   rtx note;\n \n@@ -1881,16 +1882,24 @@ add_reg_note (rtx insn, enum reg_note kind, rtx datum)\n       /* These types of register notes use an INSN_LIST rather than an\n \t EXPR_LIST, so that copying is done right and dumps look\n \t better.  */\n-      note = alloc_INSN_LIST (datum, REG_NOTES (insn));\n+      note = alloc_INSN_LIST (datum, list);\n       PUT_REG_NOTE_KIND (note, kind);\n       break;\n \n     default:\n-      note = alloc_EXPR_LIST (kind, datum, REG_NOTES (insn));\n+      note = alloc_EXPR_LIST (kind, datum, list);\n       break;\n     }\n \n-  REG_NOTES (insn) = note;\n+  return note;\n+}\n+\n+/* Add register note with kind KIND and datum DATUM to INSN.  */\n+\n+void\n+add_reg_note (rtx insn, enum reg_note kind, rtx datum)\n+{\n+  REG_NOTES (insn) = alloc_reg_note (kind, datum, REG_NOTES (insn));\n }\n \n /* Remove register note NOTE from the REG_NOTES of INSN.  */\n@@ -5025,4 +5034,3 @@ constant_pool_constant_p (rtx x)\n   x = avoid_constant_pool_reference (x);\n   return GET_CODE (x) == CONST_DOUBLE;\n }\n-"}]}