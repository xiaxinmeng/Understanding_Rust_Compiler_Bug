{"sha": "267dbd42f42c52a515f49c0875d296a9cf5988fe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjY3ZGJkNDJmNDJjNTJhNTE1ZjQ5YzA4NzVkMjk2YTljZjU5ODhmZQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2021-06-09T07:46:00Z"}, "committer": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2021-06-09T07:46:42Z"}, "message": "i386: Do not emit segment overrides for %p and %P [PR100936]\n\nUsing %p to move the address of a symbol using LEA:\n\n  asm (\"lea %p1, %0\" : \"=r\"(addr) : \"m\"(var));\n\nemits assembler warning when VAR is declared in a non-generic address space:\n\n  Warning: segment override on `lea' is ineffectual\n\nThe problem is with %p operand modifier, which should emit raw symbol name:\n\n  p -- print raw symbol name.\n\nSimilar problem exists with %P modifier, trying to CALL or JMP to an\noverridden symbol,e.g:\n\n        call %gs:zzz\n        jmp %gs:zzz\n\nemits assembler warning:\n\n  Warning: skipping prefixes on `call'\n  Warning: skipping prefixes on `jmp'\n\nEnsure that %p and %P never emit segment overrides.\n\n2021-06-08  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n\ngcc/\n\tPR target/100936\n\t* config/i386/i386.c (print_operand_address_as): Rename \"no_rip\"\n\targument to \"raw\".  Do not emit segment overrides when \"raw\" is true.\n\ngcc/testsuite/\n\n\tPR target/100936\n\t* gcc.target/i386/pr100936.c: New test.", "tree": {"sha": "c01901d59c851d28d87b018b74aa9c8412920bfa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c01901d59c851d28d87b018b74aa9c8412920bfa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/267dbd42f42c52a515f49c0875d296a9cf5988fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/267dbd42f42c52a515f49c0875d296a9cf5988fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/267dbd42f42c52a515f49c0875d296a9cf5988fe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/267dbd42f42c52a515f49c0875d296a9cf5988fe/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59d6713a138edf60827189b27c6b4ce98069c196", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59d6713a138edf60827189b27c6b4ce98069c196", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59d6713a138edf60827189b27c6b4ce98069c196"}], "stats": {"total": 40, "additions": 37, "deletions": 3}, "files": [{"sha": "05b8dc806cd45af991e5a8f3ca30f2a166cbbdd3", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/267dbd42f42c52a515f49c0875d296a9cf5988fe/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/267dbd42f42c52a515f49c0875d296a9cf5988fe/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=267dbd42f42c52a515f49c0875d296a9cf5988fe", "patch": "@@ -13531,7 +13531,7 @@ ix86_print_operand_punct_valid_p (unsigned char code)\n \n static void\n ix86_print_operand_address_as (FILE *file, rtx addr,\n-\t\t\t       addr_space_t as, bool no_rip)\n+\t\t\t       addr_space_t as, bool raw)\n {\n   struct ix86_address parts;\n   rtx base, index, disp;\n@@ -13570,7 +13570,7 @@ ix86_print_operand_address_as (FILE *file, rtx addr,\n   else\n     gcc_assert (ADDR_SPACE_GENERIC_P (parts.seg));\n \n-  if (!ADDR_SPACE_GENERIC_P (as))\n+  if (!ADDR_SPACE_GENERIC_P (as) && !raw)\n     {\n       if (ASSEMBLER_DIALECT == ASM_ATT)\n \tputc ('%', file);\n@@ -13589,7 +13589,7 @@ ix86_print_operand_address_as (FILE *file, rtx addr,\n     }\n \n   /* Use one byte shorter RIP relative addressing for 64bit mode.  */\n-  if (TARGET_64BIT && !base && !index && !no_rip)\n+  if (TARGET_64BIT && !base && !index && !raw)\n     {\n       rtx symbol = disp;\n "}, {"sha": "c076cbb2405e783c63cbdac60572e1255148fdc4", "filename": "gcc/testsuite/gcc.target/i386/pr100936.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/267dbd42f42c52a515f49c0875d296a9cf5988fe/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100936.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/267dbd42f42c52a515f49c0875d296a9cf5988fe/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100936.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100936.c?ref=267dbd42f42c52a515f49c0875d296a9cf5988fe", "patch": "@@ -0,0 +1,34 @@\n+/* PR target/100936 */\n+/* { dg-do assemble } */\n+/* { dg-options \"-O2\" } */\n+\n+__seg_gs int var;\n+\n+static int\n+*foo (void)\n+{\n+  int *addr;\n+\n+  asm (\"lea %p1, %0\" : \"=r\"(addr) : \"m\"(var));\n+\n+  return addr;\n+}\n+\n+static int\n+bar (int *addr)\n+{\n+  int val;\n+\n+  asm (\"mov %%gs:%1, %0\" : \"=r\"(val) : \"m\"(*addr));\n+\n+  return val;\n+}\n+\n+int\n+baz (void)\n+{\n+  int *addr = foo();\n+  int val = bar (addr);\n+  \n+  return val;\n+}"}]}