{"sha": "d67ff7b75deab58eaac2edccafbc55d32f60ed0d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDY3ZmY3Yjc1ZGVhYjU4ZWFhYzJlZGNjYWZiYzU1ZDMyZjYwZWQwZA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2014-05-28T16:38:23Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2014-05-28T16:38:23Z"}, "message": "re PR c++/47202 (Endless recursion during mangling)\n\n\tPR c++/47202\ngcc/cp/\n\t* decl.c (cxx_comdat_group): Return a decl.\n\t* optimize.c (cdtor_comdat_group): Get its DECL_ASSEMBLER_NAME.\ngcc/\n\t* cgraph.h (symtab_node::get_comdat_group_id): New.\n\t* cgraphunit.c (analyze_functions): Call it.\n\t* symtab.c (dump_symtab_node): Likewise.\n\t* tree.c (decl_comdat_group_id): New.\n\t* tree.h: Declare it.\n\t* lto-streamer-out.c (write_symbol): Use it.\n\t* trans-mem.c (ipa_tm_create_version_alias): Likewise.\n\nFrom-SVN: r211026", "tree": {"sha": "53efc05fb878998b2cf66e3d30efe41a6bfd5650", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/53efc05fb878998b2cf66e3d30efe41a6bfd5650"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d67ff7b75deab58eaac2edccafbc55d32f60ed0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d67ff7b75deab58eaac2edccafbc55d32f60ed0d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d67ff7b75deab58eaac2edccafbc55d32f60ed0d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d67ff7b75deab58eaac2edccafbc55d32f60ed0d/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a41acf5f3e06afa2790ff826b16ccccf1959842c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a41acf5f3e06afa2790ff826b16ccccf1959842c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a41acf5f3e06afa2790ff826b16ccccf1959842c"}], "stats": {"total": 65, "additions": 53, "deletions": 12}, "files": [{"sha": "4b1d567efd0f85ac1ca4b18372a6c431c8bd65a1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d67ff7b75deab58eaac2edccafbc55d32f60ed0d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d67ff7b75deab58eaac2edccafbc55d32f60ed0d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d67ff7b75deab58eaac2edccafbc55d32f60ed0d", "patch": "@@ -1,3 +1,14 @@\n+2014-05-28  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/47202\n+\t* cgraph.h (symtab_node::get_comdat_group_id): New.\n+\t* cgraphunit.c (analyze_functions): Call it.\n+\t* symtab.c (dump_symtab_node): Likewise.\n+\t* tree.c (decl_comdat_group_id): New.\n+\t* tree.h: Declare it.\n+\t* lto-streamer-out.c (write_symbol): Use it.\n+\t* trans-mem.c (ipa_tm_create_version_alias): Likewise.\n+\n 2014-05-28  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \tPR bootstrap/PR61146"}, {"sha": "e5aa833d96721bead62eb5ab3245d7552361b577", "filename": "gcc/cgraph.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d67ff7b75deab58eaac2edccafbc55d32f60ed0d/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d67ff7b75deab58eaac2edccafbc55d32f60ed0d/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=d67ff7b75deab58eaac2edccafbc55d32f60ed0d", "patch": "@@ -147,6 +147,13 @@ class GTY((desc (\"%h.type\"), tag (\"SYMTAB_SYMBOL\"),\n       return comdat_group_;\n     }\n \n+  tree get_comdat_group_id ()\n+    {\n+      if (comdat_group_ && TREE_CODE (comdat_group_) != IDENTIFIER_NODE)\n+\tcomdat_group_ = DECL_ASSEMBLER_NAME (comdat_group_);\n+      return comdat_group_;\n+    }\n+\n   /* Set comdat group.  */\n   void set_comdat_group (tree group)\n     {"}, {"sha": "e19b0a25c1d936a498ab0a1dc35c2c715cb1f0e6", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d67ff7b75deab58eaac2edccafbc55d32f60ed0d/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d67ff7b75deab58eaac2edccafbc55d32f60ed0d/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=d67ff7b75deab58eaac2edccafbc55d32f60ed0d", "patch": "@@ -974,6 +974,8 @@ analyze_functions (void)\n \t   node != first_analyzed\n \t   && node != first_analyzed_var; node = node->next)\n \t{\n+\t  /* Convert COMDAT group designators to IDENTIFIER_NODEs.  */\n+\t  node->get_comdat_group_id ();\n \t  if (decide_is_symbol_needed (node))\n \t    {\n \t      enqueue_node (node);"}, {"sha": "dbcd3c6ddf8da83382c24cdf8ee189e4e3d7ad97", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d67ff7b75deab58eaac2edccafbc55d32f60ed0d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d67ff7b75deab58eaac2edccafbc55d32f60ed0d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d67ff7b75deab58eaac2edccafbc55d32f60ed0d", "patch": "@@ -1,5 +1,9 @@\n 2014-05-28  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/47202\n+\t* decl.c (cxx_comdat_group): Return a decl.\n+\t* optimize.c (cdtor_comdat_group): Get its DECL_ASSEMBLER_NAME.\n+\n \t* pt.c (tsubst) [ARRAY_TYPE]: Check for array of array of unknown\n \tbound.\n "}, {"sha": "350244716ff70d6c2a17af00cf887bb83930e49a", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d67ff7b75deab58eaac2edccafbc55d32f60ed0d/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d67ff7b75deab58eaac2edccafbc55d32f60ed0d/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=d67ff7b75deab58eaac2edccafbc55d32f60ed0d", "patch": "@@ -14484,18 +14484,17 @@ cp_missing_noreturn_ok_p (tree decl)\n   return DECL_MAIN_P (decl);\n }\n \n-/* Return the COMDAT group into which DECL should be placed.  */\n+/* Return the decl used to identify the COMDAT group into which DECL should\n+   be placed.  */\n \n tree\n cxx_comdat_group (tree decl)\n {\n-  tree name;\n-\n   /* Virtual tables, construction virtual tables, and virtual table\n      tables all go in a single COMDAT group, named after the primary\n      virtual table.  */\n   if (VAR_P (decl) && DECL_VTABLE_OR_VTT_P (decl))\n-    name = DECL_ASSEMBLER_NAME (CLASSTYPE_VTABLES (DECL_CONTEXT (decl)));\n+    decl = CLASSTYPE_VTABLES (DECL_CONTEXT (decl));\n   /* For all other DECLs, the COMDAT group is the mangled name of the\n      declaration itself.  */\n   else\n@@ -14513,10 +14512,9 @@ cxx_comdat_group (tree decl)\n \t  else\n \t    break;\n \t}\n-      name = DECL_ASSEMBLER_NAME (decl);\n     }\n \n-  return name;\n+  return decl;\n }\n \n /* Returns the return type for FN as written by the user, which may include"}, {"sha": "1b2c2cd7944dd68d7d3dd2dd027cf45108989d62", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d67ff7b75deab58eaac2edccafbc55d32f60ed0d/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d67ff7b75deab58eaac2edccafbc55d32f60ed0d/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=d67ff7b75deab58eaac2edccafbc55d32f60ed0d", "patch": "@@ -3520,7 +3520,11 @@ mangle_decl (const tree decl)\n       if (vague_linkage_p (decl))\n \tDECL_WEAK (alias) = 1;\n       if (TREE_CODE (decl) == FUNCTION_DECL)\n-\tcgraph_same_body_alias (cgraph_get_create_node (decl), alias, decl);\n+\t{\n+\t  /* Don't create an alias to an unreferenced function.  */\n+\t  if (struct cgraph_node *n = cgraph_get_node (decl))\n+\t    cgraph_same_body_alias (n, alias, decl);\n+\t}\n       else\n \tvarpool_extra_name_alias (alias, decl);\n #endif"}, {"sha": "3f89b8197a2892e11baee617cf4980c115afeaa3", "filename": "gcc/cp/optimize.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d67ff7b75deab58eaac2edccafbc55d32f60ed0d/gcc%2Fcp%2Foptimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d67ff7b75deab58eaac2edccafbc55d32f60ed0d/gcc%2Fcp%2Foptimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Foptimize.c?ref=d67ff7b75deab58eaac2edccafbc55d32f60ed0d", "patch": "@@ -170,6 +170,8 @@ cdtor_comdat_group (tree complete, tree base)\n     complete_name = cxx_comdat_group (complete);\n   if (base_name == NULL)\n     base_name = cxx_comdat_group (base);\n+  complete_name = DECL_ASSEMBLER_NAME (complete_name);\n+  base_name = DECL_ASSEMBLER_NAME (base_name);\n   gcc_assert (IDENTIFIER_LENGTH (complete_name)\n \t      == IDENTIFIER_LENGTH (base_name));\n   grp_name = XALLOCAVEC (char, IDENTIFIER_LENGTH (complete_name) + 1);"}, {"sha": "034d9d93e8fa4b4fa63f5fec665b907bdb193aee", "filename": "gcc/lto-streamer-out.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d67ff7b75deab58eaac2edccafbc55d32f60ed0d/gcc%2Flto-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d67ff7b75deab58eaac2edccafbc55d32f60ed0d/gcc%2Flto-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-out.c?ref=d67ff7b75deab58eaac2edccafbc55d32f60ed0d", "patch": "@@ -2329,7 +2329,7 @@ write_symbol (struct streamer_tree_cache_d *cache,\n     size = 0;\n \n   if (DECL_ONE_ONLY (t))\n-    comdat = IDENTIFIER_POINTER (DECL_COMDAT_GROUP (t));\n+    comdat = IDENTIFIER_POINTER (decl_comdat_group_id (t));\n   else\n     comdat = \"\";\n "}, {"sha": "79fdbc28469e11c079821fa08edb83d35a381fbe", "filename": "gcc/symtab.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d67ff7b75deab58eaac2edccafbc55d32f60ed0d/gcc%2Fsymtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d67ff7b75deab58eaac2edccafbc55d32f60ed0d/gcc%2Fsymtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsymtab.c?ref=d67ff7b75deab58eaac2edccafbc55d32f60ed0d", "patch": "@@ -560,7 +560,7 @@ dump_symtab_base (FILE *f, symtab_node *node)\n     fprintf (f, \" comdat\");\n   if (node->get_comdat_group ())\n     fprintf (f, \" comdat_group:%s\",\n-\t     IDENTIFIER_POINTER (node->get_comdat_group ()));\n+\t     IDENTIFIER_POINTER (node->get_comdat_group_id ()));\n   if (DECL_ONE_ONLY (node->decl))\n     fprintf (f, \" one_only\");\n   if (DECL_SECTION_NAME (node->decl))\n@@ -1062,7 +1062,7 @@ symtab_resolve_alias (symtab_node *node, symtab_node *target)\n   node->analyzed = true;\n   ipa_record_reference (node, target, IPA_REF_ALIAS, NULL);\n \n-  /* Alias targets become reudndant after alias is resolved into an reference.\n+  /* Alias targets become redundant after alias is resolved into an reference.\n      We do not want to keep it around or we would have to mind updating them\n      when renaming symbols.  */\n   node->alias_target = NULL;"}, {"sha": "7c9f163e7dff73c5ac466c06c53974fd5631ebf3", "filename": "gcc/trans-mem.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d67ff7b75deab58eaac2edccafbc55d32f60ed0d/gcc%2Ftrans-mem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d67ff7b75deab58eaac2edccafbc55d32f60ed0d/gcc%2Ftrans-mem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftrans-mem.c?ref=d67ff7b75deab58eaac2edccafbc55d32f60ed0d", "patch": "@@ -4852,7 +4852,7 @@ ipa_tm_create_version_alias (struct cgraph_node *node, void *data)\n \n   /* Perform the same remapping to the comdat group.  */\n   if (DECL_ONE_ONLY (new_decl))\n-    varpool_get_node (new_decl)->set_comdat_group (tm_mangle (DECL_COMDAT_GROUP (old_decl)));\n+    varpool_get_node (new_decl)->set_comdat_group (tm_mangle (decl_comdat_group_id (old_decl)));\n \n   new_node = cgraph_same_body_alias (NULL, new_decl, info->new_decl);\n   new_node->tm_clone = true;"}, {"sha": "cf7e362eff34abe248057575acc3e1b9c6e6b872", "filename": "gcc/tree.c", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d67ff7b75deab58eaac2edccafbc55d32f60ed0d/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d67ff7b75deab58eaac2edccafbc55d32f60ed0d/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=d67ff7b75deab58eaac2edccafbc55d32f60ed0d", "patch": "@@ -603,7 +603,9 @@ decl_assembler_name (tree decl)\n   return DECL_WITH_VIS_CHECK (decl)->decl_with_vis.assembler_name;\n }\n \n-/* Return comdat group of DECL.  */\n+/* When the target supports COMDAT groups, this indicates which group the\n+   DECL is associated with.  This can be either an IDENTIFIER_NODE or a\n+   decl, in which case its DECL_ASSEMBLER_NAME identifies the group.  */\n tree\n decl_comdat_group (tree node)\n {\n@@ -613,6 +615,16 @@ decl_comdat_group (tree node)\n   return snode->get_comdat_group ();\n }\n \n+/* Likewise, but make sure it's been reduced to an IDENTIFIER_NODE.  */\n+tree\n+decl_comdat_group_id (tree node)\n+{\n+  struct symtab_node *snode = symtab_get_node (node);\n+  if (!snode)\n+    return NULL;\n+  return snode->get_comdat_group_id ();\n+}\n+\n /* Compute the number of bytes occupied by a tree with code CODE.\n    This function cannot be used for nodes that have variable sizes,\n    including TREE_VEC, INTEGER_CST, STRING_CST, and CALL_EXPR.  */"}, {"sha": "9fe73601aad84c33a580872e00ddf6bcd33ec3ee", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d67ff7b75deab58eaac2edccafbc55d32f60ed0d/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d67ff7b75deab58eaac2edccafbc55d32f60ed0d/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=d67ff7b75deab58eaac2edccafbc55d32f60ed0d", "patch": "@@ -3432,6 +3432,7 @@ tree_operand_check_code (const_tree __t, enum tree_code __code, int __i,\n \n extern tree decl_assembler_name (tree);\n extern tree decl_comdat_group (tree);\n+extern tree decl_comdat_group_id (tree);\n \n /* Compute the number of bytes occupied by 'node'.  This routine only\n    looks at TREE_CODE and, if the code is TREE_VEC, TREE_VEC_LENGTH.  */"}]}