{"sha": "0b29b7091bc5bb0ab923540b24a01d86da7b21c6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGIyOWI3MDkxYmM1YmIwYWI5MjM1NDBiMjRhMDFkODZkYTdiMjFjNg==", "commit": {"author": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2015-06-19T13:46:31Z"}, "committer": {"name": "Christophe Lyon", "email": "clyon@gcc.gnu.org", "date": "2015-06-19T13:46:31Z"}, "message": "vrev.c: New file.\n\n2015-06-19  Christophe Lyon  <christophe.lyon@linaro.org>\n\n\t* gcc.target/aarch64/advsimd-intrinsics/vrev.c: New file.\n\nFrom-SVN: r224653", "tree": {"sha": "6672a7fe9d6b9c1435ef1f989475cd2b98fafe9c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6672a7fe9d6b9c1435ef1f989475cd2b98fafe9c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0b29b7091bc5bb0ab923540b24a01d86da7b21c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b29b7091bc5bb0ab923540b24a01d86da7b21c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b29b7091bc5bb0ab923540b24a01d86da7b21c6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b29b7091bc5bb0ab923540b24a01d86da7b21c6/comments", "author": null, "committer": null, "parents": [{"sha": "dea1b119bb57e52a319003da8a35238e8bd5c7a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dea1b119bb57e52a319003da8a35238e8bd5c7a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dea1b119bb57e52a319003da8a35238e8bd5c7a4"}], "stats": {"total": 204, "additions": 204, "deletions": 0}, "files": [{"sha": "a0eb5fa3cb6d0ab1e5864378af5840d1cf78ed61", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b29b7091bc5bb0ab923540b24a01d86da7b21c6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b29b7091bc5bb0ab923540b24a01d86da7b21c6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0b29b7091bc5bb0ab923540b24a01d86da7b21c6", "patch": "@@ -1,3 +1,7 @@\n+2015-06-19  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* gcc.target/aarch64/advsimd-intrinsics/vrev.c: New file.\n+\n 2015-06-19  Christophe Lyon  <christophe.lyon@linaro.org>\n \n \t* gcc.target/aarch64/advsimd-intrinsics/vreinterpret.c: New file."}, {"sha": "3b574da403a26ed90eea2e9112c46335415175cd", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vrev.c", "status": "added", "additions": 200, "deletions": 0, "changes": 200, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b29b7091bc5bb0ab923540b24a01d86da7b21c6/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvrev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b29b7091bc5bb0ab923540b24a01d86da7b21c6/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvrev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvrev.c?ref=0b29b7091bc5bb0ab923540b24a01d86da7b21c6", "patch": "@@ -0,0 +1,200 @@\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+\n+/* Expected results for vrev16.  */\n+VECT_VAR_DECL(expected_vrev16,int,8,8) [] = { 0xf1, 0xf0, 0xf3, 0xf2,\n+\t\t\t\t\t      0xf5, 0xf4, 0xf7, 0xf6 };\n+VECT_VAR_DECL(expected_vrev16,uint,8,8) [] = { 0xf1, 0xf0, 0xf3, 0xf2,\n+\t\t\t\t\t       0xf5, 0xf4, 0xf7, 0xf6 };\n+VECT_VAR_DECL(expected_vrev16,poly,8,8) [] = { 0xf1, 0xf0, 0xf3, 0xf2,\n+\t\t\t\t\t       0xf5, 0xf4, 0xf7, 0xf6 };\n+VECT_VAR_DECL(expected_vrev16,int,8,16) [] = { 0xf1, 0xf0, 0xf3, 0xf2,\n+\t\t\t\t\t       0xf5, 0xf4, 0xf7, 0xf6,\n+\t\t\t\t\t       0xf9, 0xf8, 0xfb, 0xfa,\n+\t\t\t\t\t       0xfd, 0xfc, 0xff, 0xfe };\n+VECT_VAR_DECL(expected_vrev16,uint,8,16) [] = { 0xf1, 0xf0, 0xf3, 0xf2,\n+\t\t\t\t\t\t0xf5, 0xf4, 0xf7, 0xf6,\n+\t\t\t\t\t\t0xf9, 0xf8, 0xfb, 0xfa,\n+\t\t\t\t\t\t0xfd, 0xfc, 0xff, 0xfe };\n+VECT_VAR_DECL(expected_vrev16,poly,8,16) [] = { 0xf1, 0xf0, 0xf3, 0xf2,\n+\t\t\t\t\t\t0xf5, 0xf4, 0xf7, 0xf6,\n+\t\t\t\t\t\t0xf9, 0xf8, 0xfb, 0xfa,\n+\t\t\t\t\t\t0xfd, 0xfc, 0xff, 0xfe };\n+\n+/* Expected results for vrev32.  */\n+VECT_VAR_DECL(expected_vrev32,int,8,8) [] = { 0xf3, 0xf2, 0xf1, 0xf0,\n+\t\t\t\t\t      0xf7, 0xf6, 0xf5, 0xf4 };\n+VECT_VAR_DECL(expected_vrev32,int,16,4) [] = { 0xfff1, 0xfff0, 0xfff3, 0xfff2 };\n+VECT_VAR_DECL(expected_vrev32,uint,8,8) [] = { 0xf3, 0xf2, 0xf1, 0xf0,\n+\t\t\t\t\t       0xf7, 0xf6, 0xf5, 0xf4 };\n+VECT_VAR_DECL(expected_vrev32,uint,16,4) [] = { 0xfff1, 0xfff0, 0xfff3, 0xfff2 };\n+VECT_VAR_DECL(expected_vrev32,poly,8,8) [] = { 0xf3, 0xf2, 0xf1, 0xf0,\n+\t\t\t\t\t       0xf7, 0xf6, 0xf5, 0xf4 };\n+VECT_VAR_DECL(expected_vrev32,poly,16,4) [] = { 0xfff1, 0xfff0, 0xfff3, 0xfff2 };\n+VECT_VAR_DECL(expected_vrev32,int,8,16) [] = { 0xf3, 0xf2, 0xf1, 0xf0,\n+\t\t\t\t\t       0xf7, 0xf6, 0xf5, 0xf4,\n+\t\t\t\t\t       0xfb, 0xfa, 0xf9, 0xf8,\n+\t\t\t\t\t       0xff, 0xfe, 0xfd, 0xfc };\n+VECT_VAR_DECL(expected_vrev32,int,16,8) [] = { 0xfff1, 0xfff0, 0xfff3, 0xfff2,\n+\t\t\t\t\t       0xfff5, 0xfff4, 0xfff7, 0xfff6 };\n+VECT_VAR_DECL(expected_vrev32,uint,8,16) [] = { 0xf3, 0xf2, 0xf1, 0xf0,\n+\t\t\t\t\t\t0xf7, 0xf6, 0xf5, 0xf4,\n+\t\t\t\t\t\t0xfb, 0xfa, 0xf9, 0xf8,\n+\t\t\t\t\t\t0xff, 0xfe, 0xfd, 0xfc };\n+VECT_VAR_DECL(expected_vrev32,uint,16,8) [] = { 0xfff1, 0xfff0, 0xfff3, 0xfff2,\n+\t\t\t\t\t\t0xfff5, 0xfff4, 0xfff7, 0xfff6 };\n+VECT_VAR_DECL(expected_vrev32,poly,8,16) [] = { 0xf3, 0xf2, 0xf1, 0xf0,\n+\t\t\t\t\t\t0xf7, 0xf6, 0xf5, 0xf4,\n+\t\t\t\t\t\t0xfb, 0xfa, 0xf9, 0xf8,\n+\t\t\t\t\t\t0xff, 0xfe, 0xfd, 0xfc };\n+VECT_VAR_DECL(expected_vrev32,poly,16,8) [] = { 0xfff1, 0xfff0, 0xfff3, 0xfff2,\n+\t\t\t\t\t\t0xfff5, 0xfff4, 0xfff7, 0xfff6 };\n+\n+/* Expected results for vrev64.  */\n+VECT_VAR_DECL(expected_vrev64,int,8,8) [] = { 0xf7, 0xf6, 0xf5, 0xf4,\n+\t\t\t\t\t      0xf3, 0xf2, 0xf1, 0xf0 };\n+VECT_VAR_DECL(expected_vrev64,int,16,4) [] = { 0xfff3, 0xfff2, 0xfff1, 0xfff0 };\n+VECT_VAR_DECL(expected_vrev64,int,32,2) [] = { 0xfffffff1, 0xfffffff0 };\n+VECT_VAR_DECL(expected_vrev64,uint,8,8) [] = { 0xf7, 0xf6, 0xf5, 0xf4, 0xf3,\n+\t\t\t\t\t       0xf2, 0xf1, 0xf0 };\n+VECT_VAR_DECL(expected_vrev64,uint,16,4) [] = { 0xfff3, 0xfff2, 0xfff1, 0xfff0 };\n+VECT_VAR_DECL(expected_vrev64,uint,32,2) [] = { 0xfffffff1, 0xfffffff0 };\n+VECT_VAR_DECL(expected_vrev64,poly,8,8) [] = { 0xf7, 0xf6, 0xf5, 0xf4,\n+\t\t\t\t\t       0xf3, 0xf2, 0xf1, 0xf0 };\n+VECT_VAR_DECL(expected_vrev64,poly,16,4) [] = { 0xfff3, 0xfff2, 0xfff1, 0xfff0 };\n+VECT_VAR_DECL(expected_vrev64,hfloat,32,2) [] = { 0xc1700000, 0xc1800000 };\n+VECT_VAR_DECL(expected_vrev64,int,8,16) [] = { 0xf7, 0xf6, 0xf5, 0xf4,\n+\t\t\t\t\t       0xf3, 0xf2, 0xf1, 0xf0,\n+\t\t\t\t\t       0xff, 0xfe, 0xfd, 0xfc,\n+\t\t\t\t\t       0xfb, 0xfa, 0xf9, 0xf8 };\n+VECT_VAR_DECL(expected_vrev64,int,16,8) [] = { 0xfff3, 0xfff2, 0xfff1, 0xfff0,\n+\t\t\t\t\t       0xfff7, 0xfff6, 0xfff5, 0xfff4 };\n+VECT_VAR_DECL(expected_vrev64,int,32,4) [] = { 0xfffffff1, 0xfffffff0,\n+\t\t\t\t\t       0xfffffff3, 0xfffffff2 };\n+VECT_VAR_DECL(expected_vrev64,uint,8,16) [] = { 0xf7, 0xf6, 0xf5, 0xf4,\n+\t\t\t\t\t\t0xf3, 0xf2, 0xf1, 0xf0,\n+\t\t\t\t\t\t0xff, 0xfe, 0xfd, 0xfc,\n+\t\t\t\t\t\t0xfb, 0xfa, 0xf9, 0xf8 };\n+VECT_VAR_DECL(expected_vrev64,uint,16,8) [] = { 0xfff3, 0xfff2, 0xfff1, 0xfff0,\n+\t\t\t\t\t\t0xfff7, 0xfff6, 0xfff5, 0xfff4 };\n+VECT_VAR_DECL(expected_vrev64,uint,32,4) [] = { 0xfffffff1, 0xfffffff0,\n+\t\t\t\t\t\t0xfffffff3, 0xfffffff2 };\n+VECT_VAR_DECL(expected_vrev64,poly,8,16) [] = { 0xf7, 0xf6, 0xf5, 0xf4,\n+\t\t\t\t\t\t0xf3, 0xf2, 0xf1, 0xf0,\n+\t\t\t\t\t\t0xff, 0xfe, 0xfd, 0xfc,\n+\t\t\t\t\t\t0xfb, 0xfa, 0xf9, 0xf8 };\n+VECT_VAR_DECL(expected_vrev64,poly,16,8) [] = { 0xfff3, 0xfff2, 0xfff1, 0xfff0,\n+\t\t\t\t\t\t0xfff7, 0xfff6, 0xfff5, 0xfff4 };\n+VECT_VAR_DECL(expected_vrev64,hfloat,32,4) [] = { 0xc1700000, 0xc1800000,\n+\t\t\t\t\t\t  0xc1500000, 0xc1600000 };\n+\n+void exec_vrev (void)\n+{\n+  /* Basic test: y=vrev(x), then store the result.  */\n+#define TEST_VREV(Q, T1, T2, W, N, W2)\t\t\t\t\t\\\n+  VECT_VAR(vector_res, T1, W, N) =\t\t\t\t\t\\\n+    vrev##W2##Q##_##T2##W(VECT_VAR(vector, T1, W, N));\t\t\t\\\n+  vst1##Q##_##T2##W(VECT_VAR(result, T1, W, N), VECT_VAR(vector_res, T1, W, N))\n+\n+  DECL_VARIABLE_ALL_VARIANTS(vector);\n+  DECL_VARIABLE_ALL_VARIANTS(vector_res);\n+\n+  clean_results ();\n+\n+  /* Initialize input \"vector\" from \"buffer\".  */\n+  TEST_MACRO_ALL_VARIANTS_2_5(VLOAD, vector, buffer);\n+  VLOAD(vector, buffer, , float, f, 32, 2);\n+  VLOAD(vector, buffer, q, float, f, 32, 4);\n+\n+  /* Check vrev in each of the existing combinations.  */\n+#define TEST_MSG \"VREV16\"\n+  TEST_VREV(, int, s, 8, 8, 16);\n+  TEST_VREV(, uint, u, 8, 8, 16);\n+  TEST_VREV(, poly, p, 8, 8, 16);\n+  TEST_VREV(q, int, s, 8, 16, 16);\n+  TEST_VREV(q, uint, u, 8, 16, 16);\n+  TEST_VREV(q, poly, p, 8, 16, 16);\n+\n+  CHECK(TEST_MSG, int, 8, 8, PRIx8, expected_vrev16, \"\");\n+  CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected_vrev16, \"\");\n+  CHECK(TEST_MSG, poly, 8, 8, PRIx8, expected_vrev16, \"\");\n+  CHECK(TEST_MSG, int, 8, 16, PRIx8, expected_vrev16, \"\");\n+  CHECK(TEST_MSG, uint, 8, 16, PRIx8, expected_vrev16, \"\");\n+  CHECK(TEST_MSG, poly, 8, 16, PRIx8, expected_vrev16, \"\");\n+\n+#undef TEST_MSG\n+#define TEST_MSG \"VREV32\"\n+  TEST_VREV(, int, s, 8, 8, 32);\n+  TEST_VREV(, int, s, 16, 4, 32);\n+  TEST_VREV(, uint, u, 8, 8, 32);\n+  TEST_VREV(, uint, u, 16, 4, 32);\n+  TEST_VREV(, poly, p, 8, 8, 32);\n+  TEST_VREV(, poly, p, 16, 4, 32);\n+  TEST_VREV(q, int, s, 8, 16, 32);\n+  TEST_VREV(q, int, s, 16, 8, 32);\n+  TEST_VREV(q, uint, u, 8, 16, 32);\n+  TEST_VREV(q, uint, u, 16, 8, 32);\n+  TEST_VREV(q, poly, p, 8, 16, 32);\n+  TEST_VREV(q, poly, p, 16, 8, 32);\n+\n+  CHECK(TEST_MSG, int, 8, 8, PRIx8, expected_vrev32, \"\");\n+  CHECK(TEST_MSG, int, 16, 4, PRIx16, expected_vrev32, \"\");\n+  CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected_vrev32, \"\");\n+  CHECK(TEST_MSG, uint, 16, 4, PRIx16, expected_vrev32, \"\");\n+  CHECK(TEST_MSG, poly, 8, 8, PRIx8, expected_vrev32, \"\");\n+  CHECK(TEST_MSG, poly, 16, 4, PRIx16, expected_vrev32, \"\");\n+  CHECK(TEST_MSG, int, 8, 16, PRIx8, expected_vrev32, \"\");\n+  CHECK(TEST_MSG, int, 16, 8, PRIx16, expected_vrev32, \"\");\n+  CHECK(TEST_MSG, uint, 8, 16, PRIx8, expected_vrev32, \"\");\n+  CHECK(TEST_MSG, uint, 16, 8, PRIx16, expected_vrev32, \"\");\n+  CHECK(TEST_MSG, poly, 8, 16, PRIx8, expected_vrev32, \"\");\n+  CHECK(TEST_MSG, poly, 16, 8, PRIx16, expected_vrev32, \"\");\n+\n+#undef TEST_MSG\n+#define TEST_MSG \"VREV64\"\n+  TEST_VREV(, int, s, 8, 8, 64);\n+  TEST_VREV(, int, s, 16, 4, 64);\n+  TEST_VREV(, int, s, 32, 2, 64);\n+  TEST_VREV(, uint, u, 8, 8, 64);\n+  TEST_VREV(, uint, u, 16, 4, 64);\n+  TEST_VREV(, uint, u, 32, 2, 64);\n+  TEST_VREV(, poly, p, 8, 8, 64);\n+  TEST_VREV(, poly, p, 16, 4, 64);\n+  TEST_VREV(q, int, s, 8, 16, 64);\n+  TEST_VREV(q, int, s, 16, 8, 64);\n+  TEST_VREV(q, int, s, 32, 4, 64);\n+  TEST_VREV(q, uint, u, 8, 16, 64);\n+  TEST_VREV(q, uint, u, 16, 8, 64);\n+  TEST_VREV(q, uint, u, 32, 4, 64);\n+  TEST_VREV(q, poly, p, 8, 16, 64);\n+  TEST_VREV(q, poly, p, 16, 8, 64);\n+\n+  CHECK(TEST_MSG, int, 8, 8, PRIx8, expected_vrev64, \"\");\n+  CHECK(TEST_MSG, int, 16, 4, PRIx16, expected_vrev64, \"\");\n+  CHECK(TEST_MSG, int, 32, 2, PRIx32, expected_vrev64, \"\");\n+  CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected_vrev64, \"\");\n+  CHECK(TEST_MSG, uint, 16, 4, PRIx16, expected_vrev64, \"\");\n+  CHECK(TEST_MSG, uint, 32, 2, PRIx32, expected_vrev64, \"\");\n+  CHECK(TEST_MSG, poly, 8, 8, PRIx8, expected_vrev64, \"\");\n+  CHECK(TEST_MSG, poly, 16, 4, PRIx16, expected_vrev64, \"\");\n+  CHECK(TEST_MSG, int, 8, 16, PRIx8, expected_vrev64, \"\");\n+  CHECK(TEST_MSG, int, 16, 8, PRIx16, expected_vrev64, \"\");\n+  CHECK(TEST_MSG, int, 32, 4, PRIx32, expected_vrev64, \"\");\n+  CHECK(TEST_MSG, uint, 8, 16, PRIx8, expected_vrev64, \"\");\n+  CHECK(TEST_MSG, uint, 16, 8, PRIx16, expected_vrev64, \"\");\n+  CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected_vrev64, \"\");\n+  CHECK(TEST_MSG, poly, 8, 16, PRIx8, expected_vrev64, \"\");\n+  CHECK(TEST_MSG, poly, 16, 8, PRIx16, expected_vrev64, \"\");\n+\n+  TEST_VREV(, float, f, 32, 2, 64);\n+  TEST_VREV(q, float, f, 32, 4, 64);\n+  CHECK_FP(TEST_MSG, float, 32, 2, PRIx32, expected_vrev64, \"\");\n+  CHECK_FP(TEST_MSG, float, 32, 4, PRIx32, expected_vrev64, \"\");\n+}\n+\n+int main (void)\n+{\n+  exec_vrev ();\n+  return 0;\n+}"}]}