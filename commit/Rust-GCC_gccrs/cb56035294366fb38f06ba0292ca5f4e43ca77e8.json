{"sha": "cb56035294366fb38f06ba0292ca5f4e43ca77e8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2I1NjAzNTI5NDM2NmZiMzhmMDZiYTAyOTJjYTVmNGU0M2NhNzdlOA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1999-08-02T23:19:33Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1999-08-02T23:19:33Z"}, "message": "arc.h: Define PROMOTE_PROTOTYPES to 1.\n\n        * config/arc/arc.h: Define PROMOTE_PROTOTYPES to 1.\n        * config/convex/convex.h: Ditto.\n        * config/dsp16xx/dsp16xx.h: Ditto.\n        * config/fx80/fx80.h: Ditto.\n        * config/gmicro/gmicro.h: Ditto.\n        * config/i370/i370.h: Ditto.\n        * config/i386/i386.h: Ditto.\n        * config/m32r/m32r.h: Ditto.\n        * config/m68k/m68k.h: Ditto.\n        * config/m88k/m88k.h: Ditto.\n        * config/mips/mips.h: Ditto.\n        * config/pa/pa.h: Ditto.\n        * config/pyr/pyr.h: Ditto.\n        * config/tahoe/tahoe.h: Ditto.\n        * config/we32k/we32k.h: Ditto.\n\n        * config/sparc/sparc.h: Define PROMOTE_PROTOTYPES\n        based on arch size.\n\n        * config/i1750a/i1750a.h: Define PROMOTE_PROTOTYPES to 0.\n\nFrom-SVN: r28421", "tree": {"sha": "ed511889480a6f35af064a8cf26dbfbd198ba9bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ed511889480a6f35af064a8cf26dbfbd198ba9bd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cb56035294366fb38f06ba0292ca5f4e43ca77e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb56035294366fb38f06ba0292ca5f4e43ca77e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb56035294366fb38f06ba0292ca5f4e43ca77e8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb56035294366fb38f06ba0292ca5f4e43ca77e8/comments", "author": null, "committer": null, "parents": [{"sha": "7d473569a2ed06c37387b27bb8ca9dbd8d398646", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d473569a2ed06c37387b27bb8ca9dbd8d398646", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d473569a2ed06c37387b27bb8ca9dbd8d398646"}], "stats": {"total": 46, "additions": 20, "deletions": 26}, "files": [{"sha": "e341842c84443a60752db9635f503c701c920f95", "filename": "gcc/config/1750a/1750a.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb56035294366fb38f06ba0292ca5f4e43ca77e8/gcc%2Fconfig%2F1750a%2F1750a.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb56035294366fb38f06ba0292ca5f4e43ca77e8/gcc%2Fconfig%2F1750a%2F1750a.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2F1750a%2F1750a.h?ref=cb56035294366fb38f06ba0292ca5f4e43ca77e8", "patch": "@@ -879,8 +879,8 @@ enum reg_class { NO_REGS, R2, R0_1, INDEX_REGS, BASE_REGS, ALL_REGS, LIM_REG_CLA\n #define STORE_FLAG_VALUE 1\n \n /* When a prototype says `char' or `short', really pass an `int'. \n-   1750: for now, `char' is 16 bits wide anyway.\n-   #define PROMOTE_PROTOTYPES */\n+   1750: for now, `char' is 16 bits wide anyway.  */\n+#define PROMOTE_PROTOTYPES 0\n \n /* Specify the machine mode that pointers have.\n    After generation of rtl, the compiler makes no further distinction"}, {"sha": "9df6edc7af4a7f51c7a7a83346f44f0ac10abaa9", "filename": "gcc/config/arc/arc.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb56035294366fb38f06ba0292ca5f4e43ca77e8/gcc%2Fconfig%2Farc%2Farc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb56035294366fb38f06ba0292ca5f4e43ca77e8/gcc%2Fconfig%2Farc%2Farc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.h?ref=cb56035294366fb38f06ba0292ca5f4e43ca77e8", "patch": "@@ -634,7 +634,7 @@ extern enum reg_class arc_regno_reg_class[];\n /* Function argument passing.  */\n \n /* When a prototype says `char' or `short', really pass an `int'.  */\n-#define PROMOTE_PROTOTYPES\n+#define PROMOTE_PROTOTYPES 1\n \n /* If defined, the maximum amount of space required for outgoing\n    arguments will be computed and placed into the variable"}, {"sha": "4e4a1e3dd466383b8b065cd8f3374b10442926c7", "filename": "gcc/config/convex/convex.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb56035294366fb38f06ba0292ca5f4e43ca77e8/gcc%2Fconfig%2Fconvex%2Fconvex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb56035294366fb38f06ba0292ca5f4e43ca77e8/gcc%2Fconfig%2Fconvex%2Fconvex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fconvex%2Fconvex.h?ref=cb56035294366fb38f06ba0292ca5f4e43ca77e8", "patch": "@@ -1077,7 +1077,7 @@ enum reg_class {\n #define NO_FUNCTION_CSE\n \n /* When a prototype says `char' or `short', really pass an `int'.  */\n-#define PROMOTE_PROTOTYPES\n+#define PROMOTE_PROTOTYPES 1\n \n /* Specify the machine mode that pointers have.\n    After generation of rtl, the compiler makes no further distinction"}, {"sha": "320a2a120df66904f3d6ee85993538b4c3e1c967", "filename": "gcc/config/dsp16xx/dsp16xx.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb56035294366fb38f06ba0292ca5f4e43ca77e8/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb56035294366fb38f06ba0292ca5f4e43ca77e8/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.h?ref=cb56035294366fb38f06ba0292ca5f4e43ca77e8", "patch": "@@ -1940,7 +1940,7 @@ const_section ()                                                   \\\n #define TRULY_NOOP_TRUNCATION(OUTPREC, INPREC) 1\n \n /* When a prototype says `char' or `short', really pass an `int'.  */\n-#define PROMOTE_PROTOTYPES\n+#define PROMOTE_PROTOTYPES 1\n \n /* An alias for the machine mode used for pointers */\n #define Pmode  QImode"}, {"sha": "b69f0b06fb44e5aac2f257f1577d47f5d3e9ab7d", "filename": "gcc/config/fx80/fx80.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb56035294366fb38f06ba0292ca5f4e43ca77e8/gcc%2Fconfig%2Ffx80%2Ffx80.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb56035294366fb38f06ba0292ca5f4e43ca77e8/gcc%2Fconfig%2Ffx80%2Ffx80.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffx80%2Ffx80.h?ref=cb56035294366fb38f06ba0292ca5f4e43ca77e8", "patch": "@@ -858,7 +858,7 @@ extern enum reg_class regno_reg_class[];\n #define STORE_FLAG_VALUE -1\n \n /* When a prototype says `char' or `short', really pass an `int'.  */\n-#define PROMOTE_PROTOTYPES\n+#define PROMOTE_PROTOTYPES 1\n \n /* Specify the machine mode that pointers have.\n    After generation of rtl, the compiler makes no further distinction"}, {"sha": "b12d6c0231fc2be96a8f2f05484119beafbd2f3b", "filename": "gcc/config/gmicro/gmicro.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb56035294366fb38f06ba0292ca5f4e43ca77e8/gcc%2Fconfig%2Fgmicro%2Fgmicro.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb56035294366fb38f06ba0292ca5f4e43ca77e8/gcc%2Fconfig%2Fgmicro%2Fgmicro.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgmicro%2Fgmicro.h?ref=cb56035294366fb38f06ba0292ca5f4e43ca77e8", "patch": "@@ -1160,7 +1160,7 @@ extern enum reg_class regno_reg_class[];\n /* #define STORE_FLAG_VALUE -1 */\n \n /* When a prototype says `char' or `short', really pass an `int'.  */\n-#define PROMOTE_PROTOTYPES\n+#define PROMOTE_PROTOTYPES 1\n \n /* Specify the machine mode that pointers have.\n    After generation of rtl, the compiler makes no further distinction"}, {"sha": "dcfd46372f95a722bce5e0ae549bfde64a6c1252", "filename": "gcc/config/i370/i370.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb56035294366fb38f06ba0292ca5f4e43ca77e8/gcc%2Fconfig%2Fi370%2Fi370.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb56035294366fb38f06ba0292ca5f4e43ca77e8/gcc%2Fconfig%2Fi370%2Fi370.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi370%2Fi370.h?ref=cb56035294366fb38f06ba0292ca5f4e43ca77e8", "patch": "@@ -868,7 +868,7 @@ enum reg_class\n \n /* When a prototype says `char' or `short', really pass an `int'.  */\n \n-#define PROMOTE_PROTOTYPES\n+#define PROMOTE_PROTOTYPES 1\n \n /* Don't perform CSE on function addresses.  */\n "}, {"sha": "a5c387a29053ba255442af822c0a9a036e755d46", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb56035294366fb38f06ba0292ca5f4e43ca77e8/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb56035294366fb38f06ba0292ca5f4e43ca77e8/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=cb56035294366fb38f06ba0292ca5f4e43ca77e8", "patch": "@@ -1958,7 +1958,7 @@ while (0)\n /* When a prototype says `char' or `short', really pass an `int'.\n    (The 386 can't easily push less than an int.)  */\n \n-#define PROMOTE_PROTOTYPES\n+#define PROMOTE_PROTOTYPES 1\n \n /* Specify the machine mode that pointers have.\n    After generation of rtl, the compiler makes no further distinction"}, {"sha": "ba09af3941b63a5a4245dbe43390b86428f85386", "filename": "gcc/config/i860/paragon.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb56035294366fb38f06ba0292ca5f4e43ca77e8/gcc%2Fconfig%2Fi860%2Fparagon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb56035294366fb38f06ba0292ca5f4e43ca77e8/gcc%2Fconfig%2Fi860%2Fparagon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi860%2Fparagon.h?ref=cb56035294366fb38f06ba0292ca5f4e43ca77e8", "patch": "@@ -174,12 +174,6 @@ Boston, MA 02111-1307, USA.  */\n  */\n #define\tASM_STABS_OP\t\"//.stabs\"\n \n-/* Define this macro if an argument declared as `char' or `short' in a\n-   prototype should actually be passed as an `int'.  In addition to\n-   avoiding errors in certain cases of mismatch, it also makes for\n-   better code on certain machines. */\n-/*#define PROMOTE_PROTOTYPES*/\n-\n /* Define this macro if an instruction to load a value narrower\n    than a word from memory into a register also zero-extends the\n    value to the whole  register.  */"}, {"sha": "c0df79fd2d6b87ab0d65928a2cc056130ef2ff96", "filename": "gcc/config/m32r/m32r.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb56035294366fb38f06ba0292ca5f4e43ca77e8/gcc%2Fconfig%2Fm32r%2Fm32r.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb56035294366fb38f06ba0292ca5f4e43ca77e8/gcc%2Fconfig%2Fm32r%2Fm32r.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.h?ref=cb56035294366fb38f06ba0292ca5f4e43ca77e8", "patch": "@@ -813,7 +813,7 @@ M32R_STACK_ALIGN (current_function_outgoing_args_size)\n /* Function argument passing.  */\n \n /* When a prototype says `char' or `short', really pass an `int'.  */\n-#define PROMOTE_PROTOTYPES\n+#define PROMOTE_PROTOTYPES 1\n \n /* If defined, the maximum amount of space required for outgoing\n    arguments will be computed and placed into the variable"}, {"sha": "bbe997a8c739bc75e43c080bd757f8ffc5451ba4", "filename": "gcc/config/m68k/m68k.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb56035294366fb38f06ba0292ca5f4e43ca77e8/gcc%2Fconfig%2Fm68k%2Fm68k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb56035294366fb38f06ba0292ca5f4e43ca77e8/gcc%2Fconfig%2Fm68k%2Fm68k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.h?ref=cb56035294366fb38f06ba0292ca5f4e43ca77e8", "patch": "@@ -1655,7 +1655,7 @@ __transfer_from_trampoline ()\t\t\t\t\t\\\n #define STORE_FLAG_VALUE -1\n \n /* When a prototype says `char' or `short', really pass an `int'.  */\n-#define PROMOTE_PROTOTYPES\n+#define PROMOTE_PROTOTYPES 1\n \n /* Specify the machine mode that pointers have.\n    After generation of rtl, the compiler makes no further distinction"}, {"sha": "0ea0ef6df8073593520e6a86d1095520c65d4e04", "filename": "gcc/config/m88k/m88k.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb56035294366fb38f06ba0292ca5f4e43ca77e8/gcc%2Fconfig%2Fm88k%2Fm88k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb56035294366fb38f06ba0292ca5f4e43ca77e8/gcc%2Fconfig%2Fm88k%2Fm88k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fm88k.h?ref=cb56035294366fb38f06ba0292ca5f4e43ca77e8", "patch": "@@ -198,13 +198,13 @@ extern char * reg_names[];\n    Redefined in sysv4.h, and luna.h.  */\n #define VERSION_INFO1\t\"m88k, \"\n #ifndef VERSION_INFO2\n-#define VERSION_INFO2   \"$Revision: 1.13 $\"\n+#define VERSION_INFO2   \"$Revision: 1.14 $\"\n #endif\n \n #ifndef VERSION_STRING\n #define VERSION_STRING  version_string\n #ifdef __STDC__\n-#define TM_RCS_ID      \"@(#)\" __FILE__ \" $Revision: 1.13 $ \" __DATE__\n+#define TM_RCS_ID      \"@(#)\" __FILE__ \" $Revision: 1.14 $ \" __DATE__\n #else\n #define TM_RCS_ID      \"$What: <@(#) m88k.h,v\t1.1.1.2.2.2> $\"\n #endif  /* __STDC__ */\n@@ -1591,7 +1591,7 @@ extern struct rtx_def *m88k_va_arg ();\n    `short' in a prototype should actually be passed as an\n    `int'.  In addition to avoiding errors in certain cases of\n    mismatch, it also makes for better code on certain machines.  */\n-#define PROMOTE_PROTOTYPES\n+#define PROMOTE_PROTOTYPES 1\n \n /* Define this macro if a float function always returns float\n    (even in traditional mode).  Redefined in luna.h.  */"}, {"sha": "7886ff15782f415df0f2d720761f12ceb107246f", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb56035294366fb38f06ba0292ca5f4e43ca77e8/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb56035294366fb38f06ba0292ca5f4e43ca77e8/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=cb56035294366fb38f06ba0292ca5f4e43ca77e8", "patch": "@@ -1497,7 +1497,7 @@ do {\t\t\t\t\t\t\t\\\n    avoiding errors in certain cases of mismatch, it also makes for\n    better code on certain machines. */\n \n-#define PROMOTE_PROTOTYPES\n+#define PROMOTE_PROTOTYPES 1\n \n /* Define if operations between registers always perform the operation\n    on the full register even if a narrower mode is specified.  */"}, {"sha": "fe51937f70f4f5a54fc718c04bdc4aee1076e393", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb56035294366fb38f06ba0292ca5f4e43ca77e8/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb56035294366fb38f06ba0292ca5f4e43ca77e8/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=cb56035294366fb38f06ba0292ca5f4e43ca77e8", "patch": "@@ -1628,7 +1628,7 @@ extern struct rtx_def *hppa_legitimize_address ();\n #define STORE_FLAG_VALUE 1\n \n /* When a prototype says `char' or `short', really pass an `int'.  */\n-#define PROMOTE_PROTOTYPES\n+#define PROMOTE_PROTOTYPES 1\n \n /* Specify the machine mode that pointers have.\n    After generation of rtl, the compiler makes no further distinction"}, {"sha": "f40d03008323b71502a5c2874f98d1d2de8ee134", "filename": "gcc/config/pyr/pyr.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb56035294366fb38f06ba0292ca5f4e43ca77e8/gcc%2Fconfig%2Fpyr%2Fpyr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb56035294366fb38f06ba0292ca5f4e43ca77e8/gcc%2Fconfig%2Fpyr%2Fpyr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpyr%2Fpyr.h?ref=cb56035294366fb38f06ba0292ca5f4e43ca77e8", "patch": "@@ -1045,7 +1045,7 @@ extern int current_function_calls_alloca;\n /* #define NO_FUNCTION_CSE */\n \n /* When a prototype says `char' or `short', really pass an `int'.  */\n-#define PROMOTE_PROTOTYPES\n+#define PROMOTE_PROTOTYPES 1\n \n /* There are no flag store insns on a pyr. */\n /* #define STORE_FLAG_VALUE */"}, {"sha": "c322378c25fec4c233d1599a8c6c91cf569adb75", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb56035294366fb38f06ba0292ca5f4e43ca77e8/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb56035294366fb38f06ba0292ca5f4e43ca77e8/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=cb56035294366fb38f06ba0292ca5f4e43ca77e8", "patch": "@@ -2543,7 +2543,7 @@ do {                                                                    \\\n #define STORE_FLAG_VALUE 1\n \n /* When a prototype says `char' or `short', really pass an `int'.  */\n-#define PROMOTE_PROTOTYPES\n+#define PROMOTE_PROTOTYPES (TARGET_ARCH32)\n \n /* Define this to be nonzero if shift instructions ignore all but the low-order\n    few bits. */"}, {"sha": "83063318959c8f2563f3ec034c398e747abec753", "filename": "gcc/config/tahoe/tahoe.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb56035294366fb38f06ba0292ca5f4e43ca77e8/gcc%2Fconfig%2Ftahoe%2Ftahoe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb56035294366fb38f06ba0292ca5f4e43ca77e8/gcc%2Fconfig%2Ftahoe%2Ftahoe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ftahoe%2Ftahoe.h?ref=cb56035294366fb38f06ba0292ca5f4e43ca77e8", "patch": "@@ -627,7 +627,7 @@ enum reg_class {NO_REGS,GENERAL_REGS,FPP_REG,ALL_REGS,LIM_REG_CLASSES};\n \n /* pass chars as ints */\n \n-#define PROMOTE_PROTOTYPES\n+#define PROMOTE_PROTOTYPES 1\n \n /* pointers can be represented by an si mode expression */\n "}, {"sha": "af7c7ff774de0a8c9b2e0a53f574782ca42063d9", "filename": "gcc/config/we32k/we32k.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb56035294366fb38f06ba0292ca5f4e43ca77e8/gcc%2Fconfig%2Fwe32k%2Fwe32k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb56035294366fb38f06ba0292ca5f4e43ca77e8/gcc%2Fconfig%2Fwe32k%2Fwe32k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fwe32k%2Fwe32k.h?ref=cb56035294366fb38f06ba0292ca5f4e43ca77e8", "patch": "@@ -664,7 +664,7 @@ enum reg_class { NO_REGS, GENERAL_REGS,\n #define STORE_FLAG_VALUE -1\n \n /* When a prototype says `char' or `short', really pass an `int'.  */\n-#define PROMOTE_PROTOTYPES\n+#define PROMOTE_PROTOTYPES 1\n \n /* Specify the machine mode that pointers have.\n    After generation of rtl, the compiler makes no further distinction"}]}