{"sha": "cfb46c944e8a05653c7eedd79116dae9ce7ad91c", "node_id": "C_kwDOANBUbNoAKGNmYjQ2Yzk0NGU4YTA1NjUzYzdlZWRkNzkxMTZkYWU5Y2U3YWQ5MWM", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-03-07T09:56:43Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-03-07T10:37:55Z"}, "message": "translation: reuse string and use switch for codes\n\n\tPR target/104794\n\ngcc/ChangeLog:\n\n\t* config/arm/arm-builtins.cc (arm_expand_builtin): Reuse error\n\tmessage.  Fix ARM_BUILTIN_WRORHI and ARM_BUILTIN_WRORH that can\n\thave only range [0,32].", "tree": {"sha": "d52d3dc90c2b3383de79ef3a87b715c745875bd4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d52d3dc90c2b3383de79ef3a87b715c745875bd4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cfb46c944e8a05653c7eedd79116dae9ce7ad91c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cfb46c944e8a05653c7eedd79116dae9ce7ad91c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cfb46c944e8a05653c7eedd79116dae9ce7ad91c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cfb46c944e8a05653c7eedd79116dae9ce7ad91c/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2472dcaa8cb9e02e902f83d419c3ee7e0f3d9041", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2472dcaa8cb9e02e902f83d419c3ee7e0f3d9041", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2472dcaa8cb9e02e902f83d419c3ee7e0f3d9041"}], "stats": {"total": 127, "additions": 77, "deletions": 50}, "files": [{"sha": "6c0b1bda66ae33fa46e983e7b93e7ffd9a6c92b8", "filename": "gcc/config/arm/arm-builtins.cc", "status": "modified", "additions": 77, "deletions": 50, "changes": 127, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfb46c944e8a05653c7eedd79116dae9ce7ad91c/gcc%2Fconfig%2Farm%2Farm-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfb46c944e8a05653c7eedd79116dae9ce7ad91c/gcc%2Fconfig%2Farm%2Farm-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-builtins.cc?ref=cfb46c944e8a05653c7eedd79116dae9ce7ad91c", "patch": "@@ -3922,65 +3922,92 @@ arm_expand_builtin (tree exp,\n       if (GET_MODE (op1) == VOIDmode)\n \t{\n \t  imm = INTVAL (op1);\n-\t  if ((fcode == ARM_BUILTIN_WRORHI || fcode == ARM_BUILTIN_WRORWI\n-\t       || fcode == ARM_BUILTIN_WRORH || fcode == ARM_BUILTIN_WRORW)\n+\t  if ((fcode == ARM_BUILTIN_WRORWI || fcode == ARM_BUILTIN_WRORW)\n \t      && (imm < 0 || imm > 32))\n \t    {\n-\t      if (fcode == ARM_BUILTIN_WRORHI)\n-\t\terror (\"the range of count should be in 0 to 32; please check the intrinsic %<_mm_rori_pi16%> in code\");\n-\t      else if (fcode == ARM_BUILTIN_WRORWI)\n-\t\terror (\"the range of count should be in 0 to 32; please check the intrinsic %<_mm_rori_pi32%> in code\");\n-\t      else if (fcode == ARM_BUILTIN_WRORH)\n-\t\terror (\"the range of count should be in 0 to 32; please check the intrinsic %<_mm_ror_pi16%> in code\");\n-\t      else\n-\t\terror (\"the range of count should be in 0 to 32; please check the intrinsic %<_mm_ror_pi32%> in code\");\n+\t      const char *builtin = (fcode == ARM_BUILTIN_WRORWI\n+\t\t\t\t     ? \"_mm_rori_pi32\" : \"_mm_ror_pi32\");\n+\t      error (\"the range of count should be in 0 to 32; \"\n+\t\t     \"please check the intrinsic %qs in code\", builtin);\n+\t    }\n+\t  else if ((fcode == ARM_BUILTIN_WRORHI || fcode == ARM_BUILTIN_WRORH)\n+\t\t   && (imm < 0 || imm > 16))\n+\t    {\n+\t      const char *builtin = (fcode == ARM_BUILTIN_WRORHI\n+\t\t\t\t     ? \"_mm_rori_pi16\" : \"_mm_ror_pi16\");\n+\t      error (\"the range of count should be in 0 to 16; \"\n+\t\t     \"please check the intrinsic %qs in code\", builtin);\n \t    }\n \t  else if ((fcode == ARM_BUILTIN_WRORDI || fcode == ARM_BUILTIN_WRORD)\n \t\t   && (imm < 0 || imm > 64))\n \t    {\n-\t      if (fcode == ARM_BUILTIN_WRORDI)\n-\t\terror (\"the range of count should be in 0 to 64; please check the intrinsic %<_mm_rori_si64%> in code\");\n-\t      else\n-\t\terror (\"the range of count should be in 0 to 64; please check the intrinsic %<_mm_ror_si64%> in code\");\n+\t      const char *builtin = (fcode == ARM_BUILTIN_WRORDI\n+\t\t\t\t     ? \"_mm_rori_si64\" : \"_mm_ror_si64\");\n+\t      error (\"the range of count should be in 0 to 64; \"\n+\t\t     \"please check the intrinsic %qs in code\", builtin);\n \t    }\n \t  else if (imm < 0)\n \t    {\n-\t      if (fcode == ARM_BUILTIN_WSRLHI)\n-\t\terror (\"the count should be no less than 0; please check the intrinsic %<_mm_srli_pi16%> in code\");\n-\t      else if (fcode == ARM_BUILTIN_WSRLWI)\n-\t\terror (\"the count should be no less than 0; please check the intrinsic %<_mm_srli_pi32%> in code\");\n-\t      else if (fcode == ARM_BUILTIN_WSRLDI)\n-\t\terror (\"the count should be no less than 0; please check the intrinsic %<_mm_srli_si64%> in code\");\n-\t      else if (fcode == ARM_BUILTIN_WSLLHI)\n-\t\terror (\"the count should be no less than 0; please check the intrinsic %<_mm_slli_pi16%> in code\");\n-\t      else if (fcode == ARM_BUILTIN_WSLLWI)\n-\t\terror (\"the count should be no less than 0; please check the intrinsic %<_mm_slli_pi32%> in code\");\n-\t      else if (fcode == ARM_BUILTIN_WSLLDI)\n-\t\terror (\"the count should be no less than 0; please check the intrinsic %<_mm_slli_si64%> in code\");\n-\t      else if (fcode == ARM_BUILTIN_WSRAHI)\n-\t\terror (\"the count should be no less than 0; please check the intrinsic %<_mm_srai_pi16%> in code\");\n-\t      else if (fcode == ARM_BUILTIN_WSRAWI)\n-\t\terror (\"the count should be no less than 0; please check the intrinsic %<_mm_srai_pi32%> in code\");\n-\t      else if (fcode == ARM_BUILTIN_WSRADI)\n-\t\terror (\"the count should be no less than 0; please check the intrinsic %<_mm_srai_si64%> in code\");\n-\t      else if (fcode == ARM_BUILTIN_WSRLH)\n-\t\terror (\"the count should be no less than 0; please check the intrinsic %<_mm_srl_pi16%> in code\");\n-\t      else if (fcode == ARM_BUILTIN_WSRLW)\n-\t\terror (\"the count should be no less than 0; please check the intrinsic %<_mm_srl_pi32%> in code\");\n-\t      else if (fcode == ARM_BUILTIN_WSRLD)\n-\t\terror (\"the count should be no less than 0; please check the intrinsic %<_mm_srl_si64%> in code\");\n-\t      else if (fcode == ARM_BUILTIN_WSLLH)\n-\t\terror (\"the count should be no less than 0; please check the intrinsic %<_mm_sll_pi16%> in code\");\n-\t      else if (fcode == ARM_BUILTIN_WSLLW)\n-\t\terror (\"the count should be no less than 0; please check the intrinsic %<_mm_sll_pi32%> in code\");\n-\t      else if (fcode == ARM_BUILTIN_WSLLD)\n-\t\terror (\"the count should be no less than 0; please check the intrinsic %<_mm_sll_si64%> in code\");\n-\t      else if (fcode == ARM_BUILTIN_WSRAH)\n-\t\terror (\"the count should be no less than 0; please check the intrinsic %<_mm_sra_pi16%> in code\");\n-\t      else if (fcode == ARM_BUILTIN_WSRAW)\n-\t\terror (\"the count should be no less than 0; please check the intrinsic %<_mm_sra_pi32%> in code\");\n-\t      else\n-\t\terror (\"the count should be no less than 0; please check the intrinsic %<_mm_sra_si64%> in code\");\n+\t      const char *builtin;\n+\t      switch (fcode)\n+\t\t{\n+\t\t  case ARM_BUILTIN_WSRLHI:\n+\t\t    builtin = \"_mm_srli_pi16\";\n+\t\t    break;\n+\t\t  case ARM_BUILTIN_WSRLWI:\n+\t\t    builtin = \"_mm_srli_pi32\";\n+\t\t    break;\n+\t\t  case ARM_BUILTIN_WSRLDI:\n+\t\t    builtin = \"_mm_srli_si64\";\n+\t\t    break;\n+\t\t  case ARM_BUILTIN_WSLLHI:\n+\t\t    builtin = \"_mm_slli_pi16\";\n+\t\t    break;\n+\t\t  case ARM_BUILTIN_WSLLWI:\n+\t\t    builtin = \"_mm_slli_pi32\";\n+\t\t    break;\n+\t\t  case ARM_BUILTIN_WSLLDI:\n+\t\t    builtin = \"_mm_slli_si64\";\n+\t\t    break;\n+\t\t  case ARM_BUILTIN_WSRAHI:\n+\t\t    builtin = \"_mm_srai_pi16\";\n+\t\t    break;\n+\t\t  case ARM_BUILTIN_WSRAWI:\n+\t\t    builtin = \"_mm_srai_pi32\";\n+\t\t    break;\n+\t\t  case ARM_BUILTIN_WSRADI:\n+\t\t    builtin = \"_mm_srai_si64\";\n+\t\t    break;\n+\t\t  case ARM_BUILTIN_WSRLH:\n+\t\t    builtin = \"_mm_srl_pi16\";\n+\t\t    break;\n+\t\t  case ARM_BUILTIN_WSRLW:\n+\t\t    builtin = \"_mm_srl_pi32\";\n+\t\t    break;\n+\t\t  case ARM_BUILTIN_WSRLD:\n+\t\t    builtin = \"_mm_srl_si64\";\n+\t\t    break;\n+\t\t  case ARM_BUILTIN_WSLLH:\n+\t\t    builtin = \"_mm_sll_pi16\";\n+\t\t    break;\n+\t\t  case ARM_BUILTIN_WSLLW:\n+\t\t    builtin = \"_mm_sll_pi32\";\n+\t\t    break;\n+\t\t  case ARM_BUILTIN_WSLLD:\n+\t\t    builtin = \"_mm_sll_si64\";\n+\t\t    break;\n+\t\t  case ARM_BUILTIN_WSRAH:\n+\t\t    builtin = \"_mm_sra_pi16\";\n+\t\t    break;\n+\t\t  case ARM_BUILTIN_WSRAW:\n+\t\t    builtin = \"_mm_sra_si64\";\n+\t\t    break;\n+\t\t  default:\n+\t\t    builtin = \"_mm_sra_si64\";\n+\t\t    break;\n+\t\t}\n+\t      error (\"the count should be no less than 0; \"\n+\t\t     \"please check the intrinsic %qs in code\", builtin);\n \t    }\n \t}\n       return arm_expand_binop_builtin (icode, exp, target);"}]}