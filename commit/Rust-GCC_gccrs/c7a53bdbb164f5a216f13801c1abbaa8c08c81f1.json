{"sha": "c7a53bdbb164f5a216f13801c1abbaa8c08c81f1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzdhNTNiZGJiMTY0ZjVhMjE2ZjEzODAxYzFhYmJhYThjMDhjODFmMQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-03-28T14:47:47Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-03-28T14:47:47Z"}, "message": "re PR c++/89785 (Incorrect \"not a constant expression\" error with switch statement that returns)\n\n\tPR c++/89785\n\t* constexpr.c (struct check_for_return_continue_data): New type.\n\t(check_for_return_continue): New function.\n\t(potential_constant_expression_1) <case SWITCH_STMT>: Walk\n\tSWITCH_STMT_BODY to find RETURN_EXPRs or CONTINUE_STMTs not nested\n\tin loop bodies and set *jump_target to that if found.\n\n\t* g++.dg/cpp1y/constexpr-89785-1.C: New test.\n\t* g++.dg/cpp1y/constexpr-89785-2.C: New test.\n\nFrom-SVN: r269995", "tree": {"sha": "bbbb8cc67962bc2f9a803fcc432f20ac3ff2e284", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bbbb8cc67962bc2f9a803fcc432f20ac3ff2e284"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c7a53bdbb164f5a216f13801c1abbaa8c08c81f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7a53bdbb164f5a216f13801c1abbaa8c08c81f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7a53bdbb164f5a216f13801c1abbaa8c08c81f1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7a53bdbb164f5a216f13801c1abbaa8c08c81f1/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "12b9247b19b8b634ec467ba8a3f506a4e7b76711", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12b9247b19b8b634ec467ba8a3f506a4e7b76711", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12b9247b19b8b634ec467ba8a3f506a4e7b76711"}], "stats": {"total": 186, "additions": 185, "deletions": 1}, "files": [{"sha": "b7c6c35a16035cdae5faccc1e60a4cf73a4e5f70", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7a53bdbb164f5a216f13801c1abbaa8c08c81f1/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7a53bdbb164f5a216f13801c1abbaa8c08c81f1/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c7a53bdbb164f5a216f13801c1abbaa8c08c81f1", "patch": "@@ -1,3 +1,12 @@\n+2019-03-28  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/89785\n+\t* constexpr.c (struct check_for_return_continue_data): New type.\n+\t(check_for_return_continue): New function.\n+\t(potential_constant_expression_1) <case SWITCH_STMT>: Walk\n+\tSWITCH_STMT_BODY to find RETURN_EXPRs or CONTINUE_STMTs not nested\n+\tin loop bodies and set *jump_target to that if found.\n+\n 2019-03-27  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/89831 - error with qualified-id in const member function."}, {"sha": "daf34e1078418b239fa3b49bac991aba01a4e6e5", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 98, "deletions": 1, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7a53bdbb164f5a216f13801c1abbaa8c08c81f1/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7a53bdbb164f5a216f13801c1abbaa8c08c81f1/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=c7a53bdbb164f5a216f13801c1abbaa8c08c81f1", "patch": "@@ -5731,6 +5731,86 @@ check_automatic_or_tls (tree ref)\n }\n #endif\n \n+/* Data structure for passing data from potential_constant_expression_1\n+   to check_for_return_continue via cp_walk_tree.  */\n+struct check_for_return_continue_data {\n+  hash_set<tree> *pset;\n+  tree continue_stmt;\n+};\n+\n+/* Helper function for potential_constant_expression_1 SWITCH_STMT handling,\n+   called through cp_walk_tree.  Return the first RETURN_EXPR found, or note\n+   the first CONTINUE_STMT if RETURN_EXPR is not found.  */\n+static tree\n+check_for_return_continue (tree *tp, int *walk_subtrees, void *data)\n+{\n+  tree t = *tp, s;\n+  check_for_return_continue_data *d = (check_for_return_continue_data *) data;\n+  switch (TREE_CODE (t))\n+    {\n+    case RETURN_EXPR:\n+      return t;\n+\n+    case CONTINUE_STMT:\n+      if (d->continue_stmt == NULL_TREE)\n+\td->continue_stmt = t;\n+      break;\n+\n+#define RECUR(x) \\\n+      if (tree r = cp_walk_tree (&x, check_for_return_continue, data,\t\\\n+\t\t\t\t d->pset))\t\t\t\t\\\n+\treturn r\n+\n+      /* For loops, walk subtrees manually, so that continue stmts found\n+\t inside of the bodies of the loops are ignored.  */\n+    case DO_STMT:\n+      *walk_subtrees = 0;\n+      RECUR (DO_COND (t));\n+      s = d->continue_stmt;\n+      RECUR (DO_BODY (t));\n+      d->continue_stmt = s;\n+      break;\n+\n+    case WHILE_STMT:\n+      *walk_subtrees = 0;\n+      RECUR (WHILE_COND (t));\n+      s = d->continue_stmt;\n+      RECUR (WHILE_BODY (t));\n+      d->continue_stmt = s;\n+      break;\n+\n+    case FOR_STMT:\n+      *walk_subtrees = 0;\n+      RECUR (FOR_INIT_STMT (t));\n+      RECUR (FOR_COND (t));\n+      RECUR (FOR_EXPR (t));\n+      s = d->continue_stmt;\n+      RECUR (FOR_BODY (t));\n+      d->continue_stmt = s;\n+      break;\n+\n+    case RANGE_FOR_STMT:\n+      *walk_subtrees = 0;\n+      RECUR (RANGE_FOR_EXPR (t));\n+      s = d->continue_stmt;\n+      RECUR (RANGE_FOR_BODY (t));\n+      d->continue_stmt = s;\n+      break;\n+#undef RECUR\n+\n+    case STATEMENT_LIST:\n+    case CONSTRUCTOR:\n+      break;\n+\n+    default:\n+      if (!EXPR_P (t))\n+\t*walk_subtrees = 0;\n+      break;\n+    }\n+\n+  return NULL_TREE;\n+}\n+\n /* Return true if T denotes a potentially constant expression.  Issue\n    diagnostic as appropriate under control of FLAGS.  If WANT_RVAL is true,\n    an lvalue-rvalue conversion is implied.  If NOW is true, we want to\n@@ -6196,7 +6276,24 @@ potential_constant_expression_1 (tree t, bool want_rval, bool strict, bool now,\n       if (!RECUR (SWITCH_STMT_COND (t), rval))\n \treturn false;\n       /* FIXME we don't check SWITCH_STMT_BODY currently, because even\n-\t unreachable labels would be checked.  */\n+\t unreachable labels would be checked and it is enough if there is\n+\t a single switch cond value for which it is a valid constant\n+\t expression.  We need to check if there are any RETURN_EXPRs\n+\t or CONTINUE_STMTs inside of the body though, as in that case\n+\t we need to set *jump_target.  */\n+      else\n+\t{\n+\t  hash_set<tree> pset;\n+\t  check_for_return_continue_data data = { &pset, NULL_TREE };\n+\t  if (tree ret_expr\n+\t      = cp_walk_tree (&SWITCH_STMT_BODY (t), check_for_return_continue,\n+\t\t\t      &data, &pset))\n+\t    /* The switch might return.  */\n+\t    *jump_target = ret_expr;\n+\t  else if (data.continue_stmt)\n+\t    /* The switch can't return, but might continue.  */\n+\t    *jump_target = data.continue_stmt;\n+\t}\n       return true;\n \n     case STMT_EXPR:"}, {"sha": "64457695b20c69e7cd107930158819bf7ea702f9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7a53bdbb164f5a216f13801c1abbaa8c08c81f1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7a53bdbb164f5a216f13801c1abbaa8c08c81f1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c7a53bdbb164f5a216f13801c1abbaa8c08c81f1", "patch": "@@ -1,3 +1,9 @@\n+2019-03-28  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/89785\n+\t* g++.dg/cpp1y/constexpr-89785-1.C: New test.\n+\t* g++.dg/cpp1y/constexpr-89785-2.C: New test.\n+\n 2019-03-27  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/85537"}, {"sha": "10f16b9e30889bfbeded1542bd9bc6bb0cb2fc81", "filename": "gcc/testsuite/g++.dg/cpp1y/constexpr-89785-1.C", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7a53bdbb164f5a216f13801c1abbaa8c08c81f1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-89785-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7a53bdbb164f5a216f13801c1abbaa8c08c81f1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-89785-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-89785-1.C?ref=c7a53bdbb164f5a216f13801c1abbaa8c08c81f1", "patch": "@@ -0,0 +1,36 @@\n+// PR c++/89785\n+// { dg-do compile { target c++14 } }\n+\n+constexpr int\n+foo (int x)\n+{\n+  switch (x)\n+    {\n+    case 0:\n+      throw -42;\n+    case 2:\n+      return 42;\n+    }\n+  throw 42;\n+}\n+\n+constexpr int\n+bar (int x)\n+{\n+  do\n+    {\n+      switch (x)\n+\t{\n+\tcase 0:\n+\t  throw 42;\n+\tcase 1:\n+\t  continue;\n+\t}\n+      throw -42;\n+    }\n+  while (0);\n+  return x;\n+}\n+\n+static_assert (foo (2) == 42, \"\");\n+static_assert (bar (1) == 1, \"\");"}, {"sha": "5cd46c791afc5a2d5ef74fd5ca60d4dcef97e61c", "filename": "gcc/testsuite/g++.dg/cpp1y/constexpr-89785-2.C", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7a53bdbb164f5a216f13801c1abbaa8c08c81f1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-89785-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7a53bdbb164f5a216f13801c1abbaa8c08c81f1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-89785-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-89785-2.C?ref=c7a53bdbb164f5a216f13801c1abbaa8c08c81f1", "patch": "@@ -0,0 +1,36 @@\n+// PR c++/89785\n+// { dg-do compile { target c++14 } }\n+\n+constexpr int\n+foo (int x)\n+{\n+  switch (x)\n+    {\n+    case 0:\n+      break;\n+    case 2:\n+      break;\n+    }\n+  throw 42;\t// { dg-error \"is not a constant expression\" }\n+  return 0;\n+}\n+\n+constexpr int\n+bar (int x)\n+{\n+  do\n+    {\n+      switch (x)\n+\t{\n+\tcase 0:\n+\t  throw 42;\n+\tcase 1:\n+\t  for (int i = 0; i < 10; i++)\n+\t    continue;\n+\t  break;\n+\t}\n+      throw -42;\t// { dg-error \"is not a constant expression\" }\n+    }\n+  while (0);\n+  return x;\n+}"}]}