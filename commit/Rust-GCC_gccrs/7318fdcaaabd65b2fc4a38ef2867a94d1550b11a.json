{"sha": "7318fdcaaabd65b2fc4a38ef2867a94d1550b11a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzMxOGZkY2FhYWJkNjViMmZjNGEzOGVmMjg2N2E5NGQxNTUwYjExYQ==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2018-10-06T18:20:14Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2018-10-06T18:20:14Z"}, "message": "re PR fortran/86111 (ICE in gfc_arith_concat, at fortran/arith.c:985)\n\n2018-10-06  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/86111\n\t* gfortran.h (enum arith): Add ARITH_WRONGCONCAT.\n\t* arith.h (gfc_arith_error): Issue error for ARITH_WRONGCONCAT.\n\t(gfc_arith_concat):  If the types of op1 and op2 are not\n\tcharacter of if their kinds do not match, issue ARITH_WRONGCONCAT.\n\n2018-10-06  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/86111\n\t* gfortran.dg/array_constructor_type_23.f90: New test.\n\nFrom-SVN: r264900", "tree": {"sha": "e11eef0b1f2bfb6edd6ff15edc231b2047f70ea6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e11eef0b1f2bfb6edd6ff15edc231b2047f70ea6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7318fdcaaabd65b2fc4a38ef2867a94d1550b11a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7318fdcaaabd65b2fc4a38ef2867a94d1550b11a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7318fdcaaabd65b2fc4a38ef2867a94d1550b11a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7318fdcaaabd65b2fc4a38ef2867a94d1550b11a/comments", "author": null, "committer": null, "parents": [{"sha": "2b03b800d866d345b078eaec77ef47fb05daeec2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b03b800d866d345b078eaec77ef47fb05daeec2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b03b800d866d345b078eaec77ef47fb05daeec2"}], "stats": {"total": 37, "additions": 34, "deletions": 3}, "files": [{"sha": "da3200de746c36d620492257c23f9bad15d2d311", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7318fdcaaabd65b2fc4a38ef2867a94d1550b11a/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7318fdcaaabd65b2fc4a38ef2867a94d1550b11a/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=7318fdcaaabd65b2fc4a38ef2867a94d1550b11a", "patch": "@@ -1,6 +1,14 @@\n+2018-10-06  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/86111\n+\t* gfortran.h (enum arith): Add ARITH_WRONGCONCAT.\n+\t* arith.h (gfc_arith_error): Issue error for ARITH_WRONGCONCAT.\n+\t(gfc_arith_concat):  If the types of op1 and op2 are not\n+\tcharacter of if their kinds do not match, issue ARITH_WRONGCONCAT.\n+\n 2018-10-06  Paul Thomas  <pault@gcc.gnu.org>\n \n-\tBackport from trunk\n+\tPR fortran/83999\n \t* resolve.c (resolve_fl_procedure): Include class functions in\n \tthe test that elemental function results be scalar.\n "}, {"sha": "98af27efcfef98b84add8ab4266dc745424a622d", "filename": "gcc/fortran/arith.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7318fdcaaabd65b2fc4a38ef2867a94d1550b11a/gcc%2Ffortran%2Farith.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7318fdcaaabd65b2fc4a38ef2867a94d1550b11a/gcc%2Ffortran%2Farith.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Farith.c?ref=7318fdcaaabd65b2fc4a38ef2867a94d1550b11a", "patch": "@@ -113,6 +113,11 @@ gfc_arith_error (arith code)\n       p =\n \t_(\"Integer outside symmetric range implied by Standard Fortran at %L\");\n       break;\n+    case ARITH_WRONGCONCAT:\n+      p =\n+\t_(\"Illegal type in character concatenation at %L\");\n+      break;\n+\n     default:\n       gfc_internal_error (\"gfc_arith_error(): Bad error code\");\n     }\n@@ -982,7 +987,12 @@ gfc_arith_concat (gfc_expr *op1, gfc_expr *op2, gfc_expr **resultp)\n   gfc_expr *result;\n   size_t len;\n \n-  gcc_assert (op1->ts.kind == op2->ts.kind);\n+  /* By cleverly playing around with constructors, is is possible\n+     to get mismaching types here.  */\n+  if (op1->ts.type != BT_CHARACTER || op2->ts.type != BT_CHARACTER\n+      || op1->ts.kind != op2->ts.kind)\n+    return ARITH_WRONGCONCAT;\n+\n   result = gfc_get_constant_expr (BT_CHARACTER, op1->ts.kind,\n \t\t\t\t  &op1->where);\n "}, {"sha": "8e50e4d654a45da578b438f8c9f32fb31557ec40", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7318fdcaaabd65b2fc4a38ef2867a94d1550b11a/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7318fdcaaabd65b2fc4a38ef2867a94d1550b11a/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=7318fdcaaabd65b2fc4a38ef2867a94d1550b11a", "patch": "@@ -191,7 +191,8 @@ enum gfc_intrinsic_op\n /* Arithmetic results.  */\n enum arith\n { ARITH_OK = 1, ARITH_OVERFLOW, ARITH_UNDERFLOW, ARITH_NAN,\n-  ARITH_DIV0, ARITH_INCOMMENSURATE, ARITH_ASYMMETRIC, ARITH_PROHIBIT\n+  ARITH_DIV0, ARITH_INCOMMENSURATE, ARITH_ASYMMETRIC, ARITH_PROHIBIT,\n+  ARITH_WRONGCONCAT\n };\n \n /* Statements.  */"}, {"sha": "a0b6eade3e8ffe3b20e6f1da13ac682528abf96e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7318fdcaaabd65b2fc4a38ef2867a94d1550b11a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7318fdcaaabd65b2fc4a38ef2867a94d1550b11a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7318fdcaaabd65b2fc4a38ef2867a94d1550b11a", "patch": "@@ -1,3 +1,8 @@\n+2018-10-06  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/86111\n+\t* gfortran.dg/array_constructor_type_23.f90: New test.\n+\n 2018-10-06  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/83999"}, {"sha": "cb88ad2d00b2771884918f8380f8c08b17acc2fe", "filename": "gcc/testsuite/gfortran.dg/array_constructor_type_23.f90", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7318fdcaaabd65b2fc4a38ef2867a94d1550b11a/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_type_23.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7318fdcaaabd65b2fc4a38ef2867a94d1550b11a/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_type_23.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_type_23.f90?ref=7318fdcaaabd65b2fc4a38ef2867a94d1550b11a", "patch": "@@ -0,0 +1,7 @@\n+! { dg-do compile }\n+! PR 83999 - this used to ICE\n+! Origial test case by Gerhard Steinmetz\n+\n+program p\n+        character(2) :: c = 'a' // [character :: [1]] ! { dg-error \"Illegal type in character concatenation\" }\n+end"}]}