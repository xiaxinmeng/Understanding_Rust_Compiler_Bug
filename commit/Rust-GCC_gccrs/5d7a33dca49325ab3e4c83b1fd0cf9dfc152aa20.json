{"sha": "5d7a33dca49325ab3e4c83b1fd0cf9dfc152aa20", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWQ3YTMzZGNhNDkzMjVhYjNlNGM4M2IxZmQwY2Y5ZGZjMTUyYWEyMA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-03-30T13:58:33Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-03-30T13:58:33Z"}, "message": "Now have 27 shift/reduce conflicts.\n\n(attribute_list): Just make chain of all attributes.\n(attrib): Consistently put name as PURPOSE, args, if any, as VALUE.\n(structsp): Allow attributes on any struct or union.\n\nFrom-SVN: r9260", "tree": {"sha": "2f83115fc5e114aca45b60969bf559a26a661f0d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2f83115fc5e114aca45b60969bf559a26a661f0d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5d7a33dca49325ab3e4c83b1fd0cf9dfc152aa20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d7a33dca49325ab3e4c83b1fd0cf9dfc152aa20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d7a33dca49325ab3e4c83b1fd0cf9dfc152aa20", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d7a33dca49325ab3e4c83b1fd0cf9dfc152aa20/comments", "author": null, "committer": null, "parents": [{"sha": "d17e26f744a2d0157597e4de625a15746db63cc5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d17e26f744a2d0157597e4de625a15746db63cc5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d17e26f744a2d0157597e4de625a15746db63cc5"}], "stats": {"total": 31, "additions": 17, "deletions": 14}, "files": [{"sha": "a2a23da9b10f5d791c81ffc2726e1b2e638c5c23", "filename": "gcc/c-parse.in", "status": "modified", "additions": 17, "deletions": 14, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d7a33dca49325ab3e4c83b1fd0cf9dfc152aa20/gcc%2Fc-parse.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d7a33dca49325ab3e4c83b1fd0cf9dfc152aa20/gcc%2Fc-parse.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.in?ref=5d7a33dca49325ab3e4c83b1fd0cf9dfc152aa20", "patch": "@@ -30,7 +30,7 @@ ifobjc\n %expect 35\n end ifobjc\n ifc\n-%expect 23\n+%expect 27\n \n /* These are the 23 conflicts you should get in parse.output;\n    the state numbers may vary if minor changes in the grammar are made.\n@@ -1090,24 +1090,22 @@ attribute:\n \n attribute_list:\n       attrib\n-\t\t{ $$ = build_tree_list (NULL_TREE, $1); }\n+\t\t{ $$ = $1; }\n \t| attribute_list ',' attrib\n-\t\t{ $$ = chainon ($1, build_tree_list (NULL_TREE, $3)); }\n+\t\t{ $$ = chainon ($1, $3); }\n \t;\n  \n attrib:\n     /* empty */\n \t\t{ $$ = NULL_TREE; }\n \t| any_word\n-\t\t{ $$ = $1; }\n+\t\t{ $$ = build_tree_list ($1, NULL_TREE); }\n \t| any_word '(' IDENTIFIER ')'\n-\t\t{ $$ = tree_cons ($1, NULL_TREE,\n-\t\t\t\t  build_tree_list (NULL_TREE, $3)); }\n+\t\t{ $$ = build_tree_list ($1, build_tree_list (NULL_TREE, $3)); }\n \t| any_word '(' IDENTIFIER ',' nonnull_exprlist ')'\n-\t\t{ $$ = tree_cons ($1, NULL_TREE,\n-\t\t\t\t  tree_cons (NULL_TREE, $3, $5)); }\n+\t\t{ $$ = build_tree_list ($1, tree_cons (NULL_TREE, $3, $5)); }\n \t| any_word '(' nonnull_exprlist ')'\n-\t\t{ $$ = tree_cons ($1, NULL_TREE, $3); }\n+\t\t{ $$ = build_tree_list ($1, $3); }\n \t;\n \n /* This still leaves out most reserved keywords,\n@@ -1311,19 +1309,24 @@ structsp:\n \t\t{ $$ = start_struct (RECORD_TYPE, $2);\n \t\t  /* Start scope of tag before parsing components.  */\n \t\t}\n-\t  component_decl_list '}'\n+\t  component_decl_list '}' maybe_attribute \n \t\t{ $$ = finish_struct ($<ttype>4, $5);\n+\t\t  decl_attributes ($$, $7, NULL_TREE);\n \t\t  /* Really define the structure.  */\n \t\t}\n-\t| STRUCT '{' component_decl_list '}'\n+\t| STRUCT '{' component_decl_list '}' maybe_attribute\n \t\t{ $$ = finish_struct (start_struct (RECORD_TYPE, NULL_TREE),\n-\t\t\t\t      $3); }\n+\t\t\t\t      $3);\n+\t\t  decl_attributes ($$, $5, NULL_TREE);\n+\t\t}\n \t| STRUCT identifier\n \t\t{ $$ = xref_tag (RECORD_TYPE, $2); }\n \t| UNION identifier '{'\n \t\t{ $$ = start_struct (UNION_TYPE, $2); }\n-\t  component_decl_list '}'\n-\t\t{ $$ = finish_struct ($<ttype>4, $5); }\n+\t  component_decl_list '}' maybe_attribute\n+\t\t{ $$ = finish_struct ($<ttype>4, $5);\n+\t\t  decl_attributes ($$, $5, NULL_TREE);\n+\t\t}\n \t| UNION '{' component_decl_list '}'\n \t\t{ $$ = finish_struct (start_struct (UNION_TYPE, NULL_TREE),\n \t\t\t\t      $3); }"}]}