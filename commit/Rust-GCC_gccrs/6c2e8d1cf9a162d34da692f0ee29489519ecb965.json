{"sha": "6c2e8d1cf9a162d34da692f0ee29489519ecb965", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmMyZThkMWNmOWExNjJkMzRkYTY5MmYwZWUyOTQ4OTUxOWVjYjk2NQ==", "commit": {"author": {"name": "Bob Wilson", "email": "bob.wilson@acm.org", "date": "2003-05-20T23:39:09Z"}, "committer": {"name": "Bob Wilson", "email": "bwilson@gcc.gnu.org", "date": "2003-05-20T23:39:09Z"}, "message": "lib1funcs.asm: Avoid use of .Lfe* in .size directives.\n\n\t* config/xtensa/lib1funcs.asm: Avoid use of .Lfe* in .size directives.\n\t(do_abs, do_addx2, do_addx4, do_addx8): New assembler macros.\n\t(__mulsi3): Use do_addx* instead of ADDX* instructions.  Formatting.\n\t(nsau): Rename to do_nsau.  Provide alternate version for use when\n\tthe NSAU instruction is available.\n\t(__udivsi3, __divsi3, __umodsi3, __modsi3): Use do_nsau macro.\n\t(__divsi3, __modsi3): Use do_abs macro instead of ABS instruction.\n\t* config/xtensa/xtensa-config.h: Update comments to match binutils.\n\t(XCHAL_HAVE_ABS, XCHAL_HAVE_ADDX): Define.\n\t* config/xtensa/xtensa.h (MASK_ABS, MASK_ADDX): Define.\n\t(TARGET_ABS, TARGET_ADDX): Define.\n\t(TARGET_DEFAULT): Conditionally add MASK_ABS and MASK_ADDX.\n\t(TARGET_SWITCHES): Add \"abs\", \"no-abs\", \"addx\", and \"no-addx\".\n\t* config/xtensa/xtensa.md (*addx2, *addx4, *addx8, *subx2, *subx4,\n\t*subx8): Set predicate condition to TARGET_ADDX.\n\t(abssi2): Set predicate condition to TARGET_ABS.\n\t* doc/invoke.texi (Option Summary): Document new \"-mabs\", \"-mno-abs\",\n\t\"-maddx\", and \"-mno-addx\" options.\n\t(Xtensa Options): Likewise.  Also tag some opcode names with @code.\n\nFrom-SVN: r67044", "tree": {"sha": "41b9cfbfb022947aee605600998237f181167ce8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/41b9cfbfb022947aee605600998237f181167ce8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6c2e8d1cf9a162d34da692f0ee29489519ecb965", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c2e8d1cf9a162d34da692f0ee29489519ecb965", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c2e8d1cf9a162d34da692f0ee29489519ecb965", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c2e8d1cf9a162d34da692f0ee29489519ecb965/comments", "author": null, "committer": null, "parents": [{"sha": "69cf7a5532a0e6e9e3fd4e94bda72521706b10f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69cf7a5532a0e6e9e3fd4e94bda72521706b10f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69cf7a5532a0e6e9e3fd4e94bda72521706b10f3"}], "stats": {"total": 330, "additions": 198, "deletions": 132}, "files": [{"sha": "daaf49c39230c98c8c2bb56711326b981dee672c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c2e8d1cf9a162d34da692f0ee29489519ecb965/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c2e8d1cf9a162d34da692f0ee29489519ecb965/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6c2e8d1cf9a162d34da692f0ee29489519ecb965", "patch": "@@ -1,3 +1,25 @@\n+2003-05-20  Bob Wilson  <bob.wilson@acm.org>\n+\n+\t* config/xtensa/lib1funcs.asm: Avoid use of .Lfe* in .size directives.\n+\t(do_abs, do_addx2, do_addx4, do_addx8): New assembler macros.\n+\t(__mulsi3): Use do_addx* instead of ADDX* instructions.  Formatting.\n+\t(nsau): Rename to do_nsau.  Provide alternate version for use when\n+\tthe NSAU instruction is available.\n+\t(__udivsi3, __divsi3, __umodsi3, __modsi3): Use do_nsau macro.\n+\t(__divsi3, __modsi3): Use do_abs macro instead of ABS instruction.\n+\t* config/xtensa/xtensa-config.h: Update comments to match binutils.\n+\t(XCHAL_HAVE_ABS, XCHAL_HAVE_ADDX): Define.\n+\t* config/xtensa/xtensa.h (MASK_ABS, MASK_ADDX): Define.\n+\t(TARGET_ABS, TARGET_ADDX): Define.\n+\t(TARGET_DEFAULT): Conditionally add MASK_ABS and MASK_ADDX.\n+\t(TARGET_SWITCHES): Add \"abs\", \"no-abs\", \"addx\", and \"no-addx\".\n+\t* config/xtensa/xtensa.md (*addx2, *addx4, *addx8, *subx2, *subx4,\n+\t*subx8): Set predicate condition to TARGET_ADDX.\n+\t(abssi2): Set predicate condition to TARGET_ABS.\n+\t* doc/invoke.texi (Option Summary): Document new \"-mabs\", \"-mno-abs\",\n+\t\"-maddx\", and \"-mno-addx\" options.\n+\t(Xtensa Options): Likewise.  Also tag some opcode names with @code.\n+\n 2003-05-20  Kevin Ryde <user42@zip.com.au>\n \t    Wolfgang Bangerth <bangerth@dealii.org>\n "}, {"sha": "384b2079e48cbe67d6d3edaed5eff37968f2c6c9", "filename": "gcc/config/xtensa/lib1funcs.asm", "status": "modified", "additions": 113, "deletions": 101, "changes": 214, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c2e8d1cf9a162d34da692f0ee29489519ecb965/gcc%2Fconfig%2Fxtensa%2Flib1funcs.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c2e8d1cf9a162d34da692f0ee29489519ecb965/gcc%2Fconfig%2Fxtensa%2Flib1funcs.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Flib1funcs.asm?ref=6c2e8d1cf9a162d34da692f0ee29489519ecb965", "patch": "@@ -1,5 +1,5 @@\n /* Assembly functions for the Xtensa version of libgcc1.\n-   Copyright (C) 2001,2002 Free Software Foundation, Inc.\n+   Copyright (C) 2001,2002,2003 Free Software Foundation, Inc.\n    Contributed by Bob Wilson (bwilson@tensilica.com) at Tensilica.\n \n This file is part of GCC.\n@@ -30,6 +30,46 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n \n #include \"xtensa/xtensa-config.h\"\n \n+\t# Define macros for the ABS and ADDX* instructions to handle cases\n+\t# where they are not included in the Xtensa processor configuration.\n+\n+\t.macro\tdo_abs dst, src, tmp\n+#if XCHAL_HAVE_ABS\n+\tabs\t\\dst, \\src\n+#else\n+\tneg\t\\tmp, \\src\n+\tmovgez\t\\tmp, \\src, \\src\n+\tmov\t\\dst, \\tmp\n+#endif\n+\t.endm\n+\n+\t.macro\tdo_addx2 dst, as, at, tmp\n+#if XCHAL_HAVE_ADDX\n+\taddx2\t\\dst, \\as, \\at\n+#else\n+\tslli\t\\tmp, \\as, 1\n+\tadd\t\\dst, \\tmp, \\at\n+#endif\n+\t.endm\n+\n+\t.macro\tdo_addx4 dst, as, at, tmp\n+#if XCHAL_HAVE_ADDX\n+\taddx4\t\\dst, \\as, \\at\n+#else\n+\tslli\t\\tmp, \\as, 2\n+\tadd\t\\dst, \\tmp, \\at\n+#endif\n+\t.endm\n+\n+\t.macro\tdo_addx8 dst, as, at, tmp\n+#if XCHAL_HAVE_ADDX\n+\taddx8\t\\dst, \\as, \\at\n+#else\n+\tslli\t\\tmp, \\as, 3\n+\tadd\t\\dst, \\tmp, \\at\n+#endif\n+\t.endm\n+\n #ifdef L_mulsi3\n \t.align\t4\n \t.global\t__mulsi3\n@@ -64,88 +104,85 @@ __mulsi3:\n \n #else /* !XCHAL_HAVE_MUL16 && !XCHAL_HAVE_MAC16 */\n \n-        # Multiply one bit at a time, but unroll the loop 4x to better\n-        # exploit the addx instructions.\n-        \n-        # Peel the first iteration to save a cycle on init\n-\n-        # avoid negative numbers \n+\t# Multiply one bit at a time, but unroll the loop 4x to better\n+\t# exploit the addx instructions and avoid overhead.\n+\t# Peel the first iteration to save a cycle on init.\n \n+\t# Avoid negative numbers.\n \txor\ta5, a2, a3  # top bit is 1 iff one of the inputs is negative\n-\tabs     a3, a3\n-\tabs     a2, a2\n-\n-        # swap so that second argument is smaller\n-        sub     a7, a2, a3\n-        mov     a4, a3\n-        movgez  a4, a2, a7  # a4 = max(a2, a3) \n-        movltz  a3, a2, a7  # a3 = min(a2, a3)\n+\tdo_abs\ta3, a3, a6\n+\tdo_abs\ta2, a2, a6\n \n-        movi    a2, 0\n-        extui   a6, a3, 0, 1\n-        movnez  a2, a4, a6\n+\t# Swap so the second argument is smaller.\n+\tsub\ta7, a2, a3\n+\tmov\ta4, a3\n+\tmovgez\ta4, a2, a7  # a4 = max(a2, a3) \n+\tmovltz\ta3, a2, a7  # a3 = min(a2, a3)\n \n-        addx2   a7, a4, a2\n-        extui   a6, a3, 1, 1\n-        movnez  a2, a7, a6\n+\tmovi\ta2, 0\n+\textui\ta6, a3, 0, 1\n+\tmovnez\ta2, a4, a6\n \n-        addx4   a7, a4, a2\n-        extui   a6, a3, 2, 1\n-        movnez  a2, a7, a6\n+\tdo_addx2 a7, a4, a2, a7\n+\textui\ta6, a3, 1, 1\n+\tmovnez\ta2, a7, a6\n \n-        addx8   a7, a4, a2\n-        extui   a6, a3, 3, 1\n-        movnez  a2, a7, a6\n+\tdo_addx4 a7, a4, a2, a7\n+\textui\ta6, a3, 2, 1\n+\tmovnez\ta2, a7, a6\n \n-        bgeui   a3, 16, .Lmult_main_loop\n-        neg     a3, a2\n-        movltz  a2, a3, a5\n-        retw\n+\tdo_addx8 a7, a4, a2, a7\n+\textui\ta6, a3, 3, 1\n+\tmovnez\ta2, a7, a6\n \n+\tbgeui\ta3, 16, .Lmult_main_loop\n+\tneg\ta3, a2\n+\tmovltz\ta2, a3, a5\n+\tretw\n \n-        .align  4\n+\t.align\t4\n .Lmult_main_loop:\n-        srli    a3, a3, 4\n-        slli    a4, a4, 4\n+\tsrli\ta3, a3, 4\n+\tslli\ta4, a4, 4\n \n-        add     a7, a4, a2\n-        extui   a6, a3, 0, 1\n-        movnez  a2, a7, a6\n+\tadd\ta7, a4, a2\n+\textui\ta6, a3, 0, 1\n+\tmovnez\ta2, a7, a6\n \n-        addx2   a7, a4, a2\n-        extui   a6, a3, 1, 1\n-        movnez  a2, a7, a6\n+\tdo_addx2 a7, a4, a2, a7\n+\textui\ta6, a3, 1, 1\n+\tmovnez\ta2, a7, a6\n \n-        addx4   a7, a4, a2\n-        extui   a6, a3, 2, 1\n-        movnez  a2, a7, a6\n+\tdo_addx4 a7, a4, a2, a7\n+\textui\ta6, a3, 2, 1\n+\tmovnez\ta2, a7, a6\n \n-        addx8   a7, a4, a2\n-        extui   a6, a3, 3, 1\n-        movnez  a2, a7, a6\n+\tdo_addx8 a7, a4, a2, a7\n+\textui\ta6, a3, 3, 1\n+\tmovnez\ta2, a7, a6\n \n+\tbgeui\ta3, 16, .Lmult_main_loop\n \n-        bgeui   a3, 16, .Lmult_main_loop\n-\n-        neg     a3, a2\n-        movltz  a2, a3, a5\n+\tneg\ta3, a2\n+\tmovltz\ta2, a3, a5\n \n #endif /* !XCHAL_HAVE_MUL16 && !XCHAL_HAVE_MAC16 */\n \n \tretw\n-.Lfe0:\n-\t.size\t__mulsi3,.Lfe0-__mulsi3\n+\t.size\t__mulsi3,.-__mulsi3\n \n #endif /* L_mulsi3 */\n \n \n-\t# Some Xtensa configurations include the NSAU (unsigned\n-\t# normalize shift amount) instruction which computes the number\n-\t# of leading zero bits.  For other configurations, the \"nsau\"\n-\t# operation is implemented as a macro.\n+\t# Define a macro for the NSAU (unsigned normalize shift amount)\n+\t# instruction, which computes the number of leading zero bits,\n+\t# to handle cases where it is not included in the Xtensa processor\n+\t# configuration.\n \t\n-#if !XCHAL_HAVE_NSA\n-\t.macro\tnsau cnt, val, tmp, a\n+\t.macro\tdo_nsau cnt, val, tmp, a\n+#if XCHAL_HAVE_NSA\n+\tnsau\t\\cnt, \\val\n+#else\n \tmov\t\\a, \\val\n \tmovi\t\\cnt, 0\n \textui\t\\tmp, \\a, 16, 16\n@@ -163,8 +200,8 @@ __mulsi3:\n \tadd\t\\tmp, \\tmp, \\a\n \tl8ui\t\\tmp, \\tmp, 0\n \tadd\t\\cnt, \\cnt, \\tmp\n-\t.endm\n #endif /* !XCHAL_HAVE_NSA */\n+\t.endm\n \n #ifdef L_nsau\n \t.section .rodata\n@@ -190,8 +227,7 @@ __nsau_data:\n \t.byte\t0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n \t.byte\t0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n #endif /* !XCHAL_HAVE_NSA */\n-.Lfe1:\n-\t.size\t__nsau_data,.Lfe1-__nsau_data\n+\t.size\t__nsau_data,.-__nsau_data\n \t.hidden\t__nsau_data\n #endif /* L_nsau */\n \n@@ -205,13 +241,8 @@ __udivsi3:\n \tbltui\ta3, 2, .Lle_one\t# check if the divisor <= 1\n \n \tmov\ta6, a2\t\t# keep dividend in a6\n-#if XCHAL_HAVE_NSA\n-\tnsau\ta5, a6\t\t# dividend_shift = nsau(dividend)\n-\tnsau\ta4, a3\t\t# divisor_shift = nsau(divisor)\n-#else /* !XCHAL_HAVE_NSA */\n-\tnsau\ta5, a6, a2, a7\t# dividend_shift = nsau(dividend)\n-\tnsau\ta4, a3, a2, a7\t# divisor_shift = nsau(divisor)\n-#endif /* !XCHAL_HAVE_NSA */\n+\tdo_nsau\ta5, a6, a2, a7\t# dividend_shift = nsau(dividend)\n+\tdo_nsau\ta4, a3, a2, a7\t# divisor_shift = nsau(divisor)\n \tbgeu\ta5, a4, .Lspecial\n \n \tsub\ta4, a4, a5\t# count = divisor_shift - dividend_shift\n@@ -255,8 +286,7 @@ __udivsi3:\n .Lerror:\n \tmovi\ta2, 0\t\t# just return 0; could throw an exception\n \tretw\n-.Lfe2:\n-\t.size\t__udivsi3,.Lfe2-__udivsi3\n+\t.size\t__udivsi3,.-__udivsi3\n \n #endif /* L_udivsi3 */\n \n@@ -268,16 +298,11 @@ __udivsi3:\n __divsi3:\n \tentry\tsp, 16\n \txor\ta7, a2, a3\t# sign = dividend ^ divisor\n-\tabs\ta6, a2\t\t# udividend = abs(dividend)\n-\tabs\ta3, a3\t\t# udivisor = abs(divisor)\n+\tdo_abs\ta6, a2, a4\t# udividend = abs(dividend)\n+\tdo_abs\ta3, a3, a4\t# udivisor = abs(divisor)\n \tbltui\ta3, 2, .Lle_one\t# check if udivisor <= 1\n-#if XCHAL_HAVE_NSA\n-\tnsau\ta5, a6\t\t# udividend_shift = nsau(udividend)\n-\tnsau\ta4, a3\t\t# udivisor_shift = nsau(udivisor)\n-#else /* !XCHAL_HAVE_NSA */\n-\tnsau\ta5, a6, a2, a8\t# udividend_shift = nsau(udividend)\n-\tnsau\ta4, a3, a2, a8\t# udivisor_shift = nsau(udivisor)\n-#endif /* !XCHAL_HAVE_NSA */\n+\tdo_nsau\ta5, a6, a2, a8\t# udividend_shift = nsau(udividend)\n+\tdo_nsau\ta4, a3, a2, a8\t# udivisor_shift = nsau(udivisor)\n \tbgeu\ta5, a4, .Lspecial\n \n \tsub\ta4, a4, a5\t# count = udivisor_shift - udividend_shift\n@@ -326,8 +351,7 @@ __divsi3:\n .Lerror:\n \tmovi\ta2, 0\t\t# just return 0; could throw an exception\n \tretw\n-.Lfe3:\n-\t.size\t__divsi3,.Lfe3-__divsi3\n+\t.size\t__divsi3,.-__divsi3\n \n #endif /* L_divsi3 */\n \n@@ -340,13 +364,8 @@ __umodsi3:\n \tentry\tsp, 16\n \tbltui\ta3, 2, .Lle_one\t# check if the divisor is <= 1\n \n-#if XCHAL_HAVE_NSA\n-\tnsau\ta5, a2\t\t# dividend_shift = nsau(dividend)\n-\tnsau\ta4, a3\t\t# divisor_shift = nsau(divisor)\n-#else /* !XCHAL_HAVE_NSA */\n-\tnsau\ta5, a2, a6, a7\t# dividend_shift = nsau(dividend)\n-\tnsau\ta4, a3, a6, a7\t# divisor_shift = nsau(divisor)\n-#endif /* !XCHAL_HAVE_NSA */\n+\tdo_nsau\ta5, a2, a6, a7\t# dividend_shift = nsau(dividend)\n+\tdo_nsau\ta4, a3, a6, a7\t# divisor_shift = nsau(divisor)\n \tbgeu\ta5, a4, .Lspecial\n \n \tsub\ta4, a4, a5\t# count = divisor_shift - dividend_shift\n@@ -384,8 +403,7 @@ __umodsi3:\n \t# someday we may want to throw an exception if the divisor is 0.\n \tmovi\ta2, 0\n \tretw\n-.Lfe4:\n-\t.size\t__umodsi3,.Lfe4-__umodsi3\n+\t.size\t__umodsi3,.-__umodsi3\n \n #endif /* L_umodsi3 */\n \n@@ -397,16 +415,11 @@ __umodsi3:\n __modsi3:\n \tentry\tsp, 16\n \tmov\ta7, a2\t\t# save original (signed) dividend\n-\tabs\ta2, a2\t\t# udividend = abs(dividend)\n-\tabs\ta3, a3\t\t# udivisor = abs(divisor)\n+\tdo_abs\ta2, a2, a4\t# udividend = abs(dividend)\n+\tdo_abs\ta3, a3, a4\t# udivisor = abs(divisor)\n \tbltui\ta3, 2, .Lle_one\t# check if udivisor <= 1\n-#if XCHAL_HAVE_NSA\n-\tnsau\ta5, a2\t\t# udividend_shift = nsau(udividend)\n-\tnsau\ta4, a3\t\t# udivisor_shift = nsau(udivisor)\n-#else /* !XCHAL_HAVE_NSA */\n-\tnsau\ta5, a2, a6, a8\t# udividend_shift = nsau(udividend)\n-\tnsau\ta4, a3, a6, a8\t# udivisor_shift = nsau(udivisor)\n-#endif /* !XCHAL_HAVE_NSA */\n+\tdo_nsau\ta5, a2, a6, a8\t# udividend_shift = nsau(udividend)\n+\tdo_nsau\ta4, a3, a6, a8\t# udivisor_shift = nsau(udivisor)\n \tbgeu\ta5, a4, .Lspecial\n \n \tsub\ta4, a4, a5\t# count = udivisor_shift - udividend_shift\n@@ -450,7 +463,6 @@ __modsi3:\n \t# someday we may want to throw an exception if udivisor is 0.\n \tmovi\ta2, 0\n \tretw\n-.Lfe5:\n-\t.size\t__modsi3,.Lfe5-__modsi3\n+\t.size\t__modsi3,.-__modsi3\n \n #endif /* L_modsi3 */"}, {"sha": "6782568b1167ecebc0dc2a44480de5bca5088fcd", "filename": "gcc/config/xtensa/xtensa-config.h", "status": "modified", "additions": 20, "deletions": 19, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c2e8d1cf9a162d34da692f0ee29489519ecb965/gcc%2Fconfig%2Fxtensa%2Fxtensa-config.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c2e8d1cf9a162d34da692f0ee29489519ecb965/gcc%2Fconfig%2Fxtensa%2Fxtensa-config.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa-config.h?ref=6c2e8d1cf9a162d34da692f0ee29489519ecb965", "patch": "@@ -2,32 +2,33 @@\n    Copyright (C) 2001,2002,2003 Free Software Foundation, Inc.\n    Contributed by Bob Wilson (bwilson@tensilica.com) at Tensilica.\n \n-** NOTE: This file was automatically generated by the Xtensa Processor\n-** Generator.  Changes made here will be lost when this file is\n-** updated or replaced with the settings for a different Xtensa\n-** processor configuration.  DO NOT EDIT!\n-\n-This program is free software; you can redistribute it and/or modify\n-it under the terms of the GNU General Public License as published by\n-the Free Software Foundation; either version 2, or (at your option)\n-any later version.\n-\n-This program is distributed in the hope that it will be useful, but\n-WITHOUT ANY WARRANTY; without even the implied warranty of\n-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n-General Public License for more details.\n-\n-You should have received a copy of the GNU General Public License\n-along with this program; if not, write to the Free Software\n-Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n-*/\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 2, or (at your option)\n+   any later version.\n+\n+   This program is distributed in the hope that it will be useful, but\n+   WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program; if not, write to the Free Software\n+   Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */\n \n #ifndef XTENSA_CONFIG_H\n #define XTENSA_CONFIG_H\n \n+/* The macros defined here match those with the same names in the Xtensa\n+   compile-time HAL (Hardware Abstraction Layer).  Please refer to the\n+   Xtensa System Software Reference Manual for documentation of these\n+   macros.  */\n+\n #define XCHAL_HAVE_BE\t\t\t1\n #define XCHAL_HAVE_DENSITY\t\t1\n #define XCHAL_HAVE_CONST16\t\t0\n+#define XCHAL_HAVE_ABS\t\t\t1\n+#define XCHAL_HAVE_ADDX\t\t\t1\n #define XCHAL_HAVE_L32R\t\t\t1\n #define XCHAL_HAVE_MAC16\t\t0\n #define XCHAL_HAVE_MUL16\t\t0"}, {"sha": "89ae1fda79f06047f507d3c4e03d12e970c70999", "filename": "gcc/config/xtensa/xtensa.h", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c2e8d1cf9a162d34da692f0ee29489519ecb965/gcc%2Fconfig%2Fxtensa%2Fxtensa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c2e8d1cf9a162d34da692f0ee29489519ecb965/gcc%2Fconfig%2Fxtensa%2Fxtensa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.h?ref=6c2e8d1cf9a162d34da692f0ee29489519ecb965", "patch": "@@ -62,6 +62,8 @@ extern unsigned xtensa_current_frame_size;\n #define MASK_NO_FUSED_MADD\t0x00008000\t/* avoid f-p mul/add */\n #define MASK_SERIALIZE_VOLATILE 0x00010000\t/* serialize volatile refs */\n #define MASK_CONST16\t\t0x00020000\t/* use CONST16 instruction */\n+#define MASK_ABS\t\t0x00040000\t/* use ABS instruction */\n+#define MASK_ADDX\t\t0x00080000\t/* use ADDX* and SUBX* */\n \n /* Macros used in the machine description to test the flags.  */\n \n@@ -83,13 +85,17 @@ extern unsigned xtensa_current_frame_size;\n #define TARGET_NO_FUSED_MADD\t(target_flags & MASK_NO_FUSED_MADD)\n #define TARGET_SERIALIZE_VOLATILE (target_flags & MASK_SERIALIZE_VOLATILE)\n #define TARGET_CONST16\t\t(target_flags & MASK_CONST16)\n+#define TARGET_ABS\t\t(target_flags & MASK_ABS)\n+#define TARGET_ADDX\t\t(target_flags & MASK_ADDX)\n \n /* Default target_flags if no switches are specified  */\n \n #define TARGET_DEFAULT (\t\t\t\t\t\t\\\n   (XCHAL_HAVE_BE\t? MASK_BIG_ENDIAN : 0) |\t\t\t\\\n   (XCHAL_HAVE_DENSITY\t? MASK_DENSITY : 0) |\t\t\t\t\\\n   (XCHAL_HAVE_L32R\t? 0 : MASK_CONST16) |\t\t\t\t\\\n+  (XCHAL_HAVE_ABS\t? MASK_ABS : 0) |\t\t\t\t\\\n+  (XCHAL_HAVE_ADDX\t? MASK_ADDX : 0) |\t\t\t\t\\\n   (XCHAL_HAVE_MAC16\t? MASK_MAC16 : 0) |\t\t\t\t\\\n   (XCHAL_HAVE_MUL16\t? MASK_MUL16 : 0) |\t\t\t\t\\\n   (XCHAL_HAVE_MUL32\t? MASK_MUL32 : 0) |\t\t\t\t\\\n@@ -121,6 +127,14 @@ extern unsigned xtensa_current_frame_size;\n     N_(\"Use CONST16 instruction to load constants\")},\t\t\t\\\n   {\"no-const16\",\t\t-MASK_CONST16,\t\t\t\t\\\n     N_(\"Use PC-relative L32R instruction to load constants\")},\t\t\\\n+  {\"abs\",\t\t\tMASK_ABS,\t\t\t\t\\\n+    N_(\"Use the Xtensa ABS instruction\")},\t\t\t\t\\\n+  {\"no-abs\",\t\t\t-MASK_ABS,\t\t\t\t\\\n+    N_(\"Do not use the Xtensa ABS instruction\")},\t\t\t\\\n+  {\"addx\",\t\t\tMASK_ADDX,\t\t\t\t\\\n+    N_(\"Use the Xtensa ADDX and SUBX instructions\")},\t\t\t\\\n+  {\"no-addx\",\t\t\t-MASK_ADDX,\t\t\t\t\\\n+    N_(\"Do not use the Xtensa ADDX and SUBX instructions\")},\t\t\\\n   {\"mac16\",\t\t\tMASK_MAC16,\t\t\t\t\\\n     N_(\"Use the Xtensa MAC16 option\")},\t\t\t\t\t\\\n   {\"no-mac16\",\t\t\t-MASK_MAC16,\t\t\t\t\\"}, {"sha": "626e4c722dafa554aefef3e1551228371216a88b", "filename": "gcc/config/xtensa/xtensa.md", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c2e8d1cf9a162d34da692f0ee29489519ecb965/gcc%2Fconfig%2Fxtensa%2Fxtensa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c2e8d1cf9a162d34da692f0ee29489519ecb965/gcc%2Fconfig%2Fxtensa%2Fxtensa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.md?ref=6c2e8d1cf9a162d34da692f0ee29489519ecb965", "patch": "@@ -163,7 +163,7 @@\n \t(plus:SI (mult:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t\t  (const_int 2))\n \t\t (match_operand:SI 2 \"register_operand\" \"r\")))]\n-  \"\"\n+  \"TARGET_ADDX\"\n   \"addx2\\\\t%0, %1, %2\"\n   [(set_attr \"type\"\t\"arith\")\n    (set_attr \"mode\"\t\"SI\")\n@@ -174,7 +174,7 @@\n \t(plus:SI (mult:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t\t  (const_int 4))\n \t\t (match_operand:SI 2 \"register_operand\" \"r\")))]\n-  \"\"\n+  \"TARGET_ADDX\"\n   \"addx4\\\\t%0, %1, %2\"\n   [(set_attr \"type\"\t\"arith\")\n    (set_attr \"mode\"\t\"SI\")\n@@ -185,7 +185,7 @@\n \t(plus:SI (mult:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t\t  (const_int 8))\n \t\t (match_operand:SI 2 \"register_operand\" \"r\")))]\n-  \"\"\n+  \"TARGET_ADDX\"\n   \"addx8\\\\t%0, %1, %2\"\n   [(set_attr \"type\"\t\"arith\")\n    (set_attr \"mode\"\t\"SI\")\n@@ -257,7 +257,7 @@\n \t(minus:SI (mult:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t\t   (const_int 2))\n \t\t  (match_operand:SI 2 \"register_operand\" \"r\")))]\n-  \"\"\n+  \"TARGET_ADDX\"\n   \"subx2\\\\t%0, %1, %2\"\n   [(set_attr \"type\"\t\"arith\")\n    (set_attr \"mode\"\t\"SI\")\n@@ -268,7 +268,7 @@\n \t(minus:SI (mult:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t\t   (const_int 4))\n \t\t  (match_operand:SI 2 \"register_operand\" \"r\")))]\n-  \"\"\n+  \"TARGET_ADDX\"\n   \"subx4\\\\t%0, %1, %2\"\n   [(set_attr \"type\"\t\"arith\")\n    (set_attr \"mode\"\t\"SI\")\n@@ -279,7 +279,7 @@\n \t(minus:SI (mult:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t\t   (const_int 8))\n \t\t  (match_operand:SI 2 \"register_operand\" \"r\")))]\n-  \"\"\n+  \"TARGET_ADDX\"\n   \"subx8\\\\t%0, %1, %2\"\n   [(set_attr \"type\"\t\"arith\")\n    (set_attr \"mode\"\t\"SI\")\n@@ -518,7 +518,7 @@\n (define_insn \"abssi2\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=a\")\n \t(abs:SI (match_operand:SI 1 \"register_operand\" \"r\")))]\n-  \"\"\n+  \"TARGET_ABS\"\n   \"abs\\\\t%0, %1\"\n   [(set_attr \"type\"\t\"arith\")\n    (set_attr \"mode\"\t\"SI\")"}, {"sha": "fae76ab516370f3f2540c8e72d824a10fe1a461b", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c2e8d1cf9a162d34da692f0ee29489519ecb965/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c2e8d1cf9a162d34da692f0ee29489519ecb965/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=6c2e8d1cf9a162d34da692f0ee29489519ecb965", "patch": "@@ -634,6 +634,8 @@ in the following sections.\n @gccoptlist{-mbig-endian  -mlittle-endian @gol\n -mdensity  -mno-density @gol\n -mconst16 -mno-const16 @gol\n+-mabs -mno-abs @gol\n+-maddx -mno-addx @gol\n -mmac16  -mno-mac16 @gol\n -mmul16  -mno-mul16 @gol\n -mmul32  -mno-mul32 @gol\n@@ -10649,11 +10651,26 @@ Enable or disable use of the optional Xtensa code density instructions.\n @itemx -mno-const16\n @opindex mconst16\n @opindex mno-const16\n-Enable or disable use of CONST16 instructions for loading constant values.\n-The CONST16 instruction is currently not a standard option from Tensilica.\n-When enabled, CONST16 instructions are always used in place of the standard\n-L32R instructions.  The use of CONST16 is enabled by default only if the\n-L32R instruction is not available.\n+Enable or disable use of @code{CONST16} instructions for loading\n+constant values.  The @code{CONST16} instruction is currently not a\n+standard option from Tensilica.  When enabled, @code{CONST16}\n+instructions are always used in place of the standard @code{L32R}\n+instructions.  The use of @code{CONST16} is enabled by default only if\n+the @code{L32R} instruction is not available.\n+\n+@item -mabs\n+@itemx -mno-abs\n+@opindex mabs\n+@opindex mno-abs\n+Enable or disable use of the Xtensa @code{ABS} instruction for absolute\n+value operations.\n+\n+@item -maddx\n+@itemx -mno-addx\n+@opindex maddx\n+@opindex mno-addx\n+Enable or disable use of the Xtensa @code{ADDX} and @code{SUBX}\n+instructions.\n \n @item -mmac16\n @itemx -mno-mac16"}]}