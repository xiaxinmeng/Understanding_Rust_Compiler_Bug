{"sha": "728acca06e395451f2aa26ffbadb8b90af24c90b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzI4YWNjYTA2ZTM5NTQ1MWYyYWEyNmZmYmFkYjhiOTBhZjI0YzkwYg==", "commit": {"author": {"name": "Mikael Pettersson", "email": "mikpe@it.uu.se", "date": "2014-02-27T19:02:18Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2014-02-27T19:02:18Z"}, "message": "re PR rtl-optimization/49847 (NULL deref in fold_rtx (prev_insn_cc0 == NULL))\n\n\tPR rtl-optimization/49847\n\t* cse.c (fold_rtx) Handle case where cc0 setter and cc0 user\n\tare in different blocks.\n\t* doc/tm.texi (Condition Code Status): Update documention for\n\trelative locations of cc0-setter and cc0-user.\n\n\t PR rtl-optimization/49847\n\t * g++.dg/pr49847.C: New test.\n\nCo-Authored-By: Jeff Law <law@redhat.com>\n\nFrom-SVN: r208203", "tree": {"sha": "54fb29df472b4dafd12a4cf8703a088a272047d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/54fb29df472b4dafd12a4cf8703a088a272047d7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/728acca06e395451f2aa26ffbadb8b90af24c90b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/728acca06e395451f2aa26ffbadb8b90af24c90b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/728acca06e395451f2aa26ffbadb8b90af24c90b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/728acca06e395451f2aa26ffbadb8b90af24c90b/comments", "author": null, "committer": null, "parents": [{"sha": "b076556843574ba6beb9712502af8ed135944b83", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b076556843574ba6beb9712502af8ed135944b83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b076556843574ba6beb9712502af8ed135944b83"}], "stats": {"total": 55, "additions": 50, "deletions": 5}, "files": [{"sha": "a20cee3f317a7414b5533e974732892ebb3b1965", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/728acca06e395451f2aa26ffbadb8b90af24c90b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/728acca06e395451f2aa26ffbadb8b90af24c90b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=728acca06e395451f2aa26ffbadb8b90af24c90b", "patch": "@@ -1,3 +1,12 @@\n+2014-02-27  Mikael Pettersson  <mikpe@it.uu.se>\n+\t    Jeff Law  <law@redhat.com>\n+\n+\tPR rtl-optimization/49847\n+\t* cse.c (fold_rtx) Handle case where cc0 setter and cc0 user\n+\tare in different blocks.\n+\t* doc/tm.texi (Condition Code Status): Update documention for\n+\trelative locations of cc0-setter and cc0-user.\n+\n 2014-02-27  Vladimir Makarov  <vmakarov@redhat.com>\n \n \tPR target/59222"}, {"sha": "dba85f1891c9d701b62965d2b3c636e242583e7c", "filename": "gcc/cse.c", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/728acca06e395451f2aa26ffbadb8b90af24c90b/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/728acca06e395451f2aa26ffbadb8b90af24c90b/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=728acca06e395451f2aa26ffbadb8b90af24c90b", "patch": "@@ -3199,9 +3199,27 @@ fold_rtx (rtx x, rtx insn)\n \n #ifdef HAVE_cc0\n \t  case CC0:\n-\t    folded_arg = prev_insn_cc0;\n-\t    mode_arg = prev_insn_cc0_mode;\n-\t    const_arg = equiv_constant (folded_arg);\n+\t    /* The cc0-user and cc0-setter may be in different blocks if\n+\t       the cc0-setter potentially traps.  In that case PREV_INSN_CC0\n+\t       will have been cleared as we exited the block with the\n+\t       setter.\n+\n+\t       While we could potentially track cc0 in this case, it just\n+\t       doesn't seem to be worth it given that cc0 targets are not\n+\t       terribly common or important these days and trapping math\n+\t       is rarely used.  The combination of those two conditions\n+\t       necessary to trip this situation is exceedingly rare in the\n+\t       real world.  */\n+\t    if (!prev_insn_cc0)\n+\t      {\n+\t\tconst_arg = NULL_RTX;\n+\t      }\n+\t    else\n+\t      {\n+\t\tfolded_arg = prev_insn_cc0;\n+\t\tmode_arg = prev_insn_cc0_mode;\n+\t\tconst_arg = equiv_constant (folded_arg);\n+\t      }\n \t    break;\n #endif\n "}, {"sha": "f7024a74579cf2c09cc80f4f23bb0df62412b91f", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/728acca06e395451f2aa26ffbadb8b90af24c90b/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/728acca06e395451f2aa26ffbadb8b90af24c90b/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=728acca06e395451f2aa26ffbadb8b90af24c90b", "patch": "@@ -5900,8 +5900,13 @@ most instructions do not affect it.  The latter category includes\n most RISC machines.\n \n The implicit clobbering poses a strong restriction on the placement of\n-the definition and use of the condition code, which need to be in adjacent\n-insns for machines using @code{(cc0)}.  This can prevent important\n+the definition and use of the condition code.  In the past the definition\n+and use were always adjacent.  However, recent changes to support trapping\n+arithmatic may result in the definition and user being in different blocks.\n+Thus, there may be a @code{NOTE_INSN_BASIC_BLOCK} between them.  Additionally,\n+the definition may be the source of exception handling edges.\n+\n+These restrictions can prevent important\n optimizations on some machines.  For example, on the IBM RS/6000, there\n is a delay for taken branches unless the condition code register is set\n three instructions earlier than the conditional branch.  The instruction"}, {"sha": "be4cb12635b36d148b75a8c2b9040b6365b1eec7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/728acca06e395451f2aa26ffbadb8b90af24c90b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/728acca06e395451f2aa26ffbadb8b90af24c90b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=728acca06e395451f2aa26ffbadb8b90af24c90b", "patch": "@@ -1,3 +1,9 @@\n+2014-02-27  Mikael Pettersson  <mikpe@it.uu.se>\n+            Jeff Law  <law@redhat.com>\n+\n+\t PR rtl-optimization/49847\n+\t * g++.dg/pr49847.C: New test.\n+\n 2014-02-27  Marek Polacek  <polacek@redhat.com>\n \n \tPR middle-end/59223"}, {"sha": "b047713c309cbbb39fc5ac27ccb1889ccef4487b", "filename": "gcc/testsuite/g++.dg/pr49847.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/728acca06e395451f2aa26ffbadb8b90af24c90b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr49847.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/728acca06e395451f2aa26ffbadb8b90af24c90b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr49847.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr49847.C?ref=728acca06e395451f2aa26ffbadb8b90af24c90b", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fnon-call-exceptions\" } */\n+int f (float g)\n+{\n+  try { return g >= 0; }\n+  catch (...) {}\n+}"}]}