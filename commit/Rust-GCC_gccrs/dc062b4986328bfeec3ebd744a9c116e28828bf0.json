{"sha": "dc062b4986328bfeec3ebd744a9c116e28828bf0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGMwNjJiNDk4NjMyOGJmZWVjM2ViZDc0NGE5YzExNmUyODgyOGJmMA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2015-08-05T17:56:14Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2015-08-05T17:56:14Z"}, "message": "re PR c++/66260 ([C++14] Failure to compile variable template with recursively defined partial specialization)\n\n\tPR c++/66260\n\tPR c++/66596\n\tPR c++/66649\n\tPR c++/66923\n\t* pt.c (lookup_template_variable): Use NULL_TREE for type.\n\t(instantiate_template_1): Also set DECL_TI_ARGS based on\n\tthe immediate parent.\n\t(tsubst_copy_and_build) [TEMPLATE_ID_EXPR]: Handle variable templates.\n\t(finish_template_variable): Add complain parm.\n\t* cp-tree.h: Adjust.\n\nFrom-SVN: r226642", "tree": {"sha": "2ca6d972f81bab5e224ba92c9f66113f52c5d92f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2ca6d972f81bab5e224ba92c9f66113f52c5d92f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dc062b4986328bfeec3ebd744a9c116e28828bf0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc062b4986328bfeec3ebd744a9c116e28828bf0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc062b4986328bfeec3ebd744a9c116e28828bf0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc062b4986328bfeec3ebd744a9c116e28828bf0/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "85171e7877e60e2af5a76b0961e3ee8903bd084f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85171e7877e60e2af5a76b0961e3ee8903bd084f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85171e7877e60e2af5a76b0961e3ee8903bd084f"}], "stats": {"total": 74, "additions": 68, "deletions": 6}, "files": [{"sha": "e0075e0e9813dab5727709609dfcb3c530e9c55c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc062b4986328bfeec3ebd744a9c116e28828bf0/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc062b4986328bfeec3ebd744a9c116e28828bf0/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=dc062b4986328bfeec3ebd744a9c116e28828bf0", "patch": "@@ -1,5 +1,16 @@\n 2015-08-05  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/66260\n+\tPR c++/66596\n+\tPR c++/66649\n+\tPR c++/66923\n+\t* pt.c (lookup_template_variable): Use NULL_TREE for type.\n+\t(instantiate_template_1): Also set DECL_TI_ARGS based on\n+\tthe immediate parent.\n+\t(tsubst_copy_and_build) [TEMPLATE_ID_EXPR]: Handle variable templates.\n+\t(finish_template_variable): Add complain parm.\n+\t* cp-tree.h: Adjust.\n+\n \tPR c++/65195\n \tPR c++/66619\n \t* semantics.c (finish_id_expression): Call convert_from_reference"}, {"sha": "e70dcb45a378a69a28f659c1806b07544f7e5ee7", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc062b4986328bfeec3ebd744a9c116e28828bf0/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc062b4986328bfeec3ebd744a9c116e28828bf0/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=dc062b4986328bfeec3ebd744a9c116e28828bf0", "patch": "@@ -5954,7 +5954,7 @@ extern tree perform_koenig_lookup\t\t(tree, vec<tree, va_gc> *,\n \t\t\t\t\t\t tsubst_flags_t);\n extern tree finish_call_expr\t\t\t(tree, vec<tree, va_gc> **, bool,\n \t\t\t\t\t\t bool, tsubst_flags_t);\n-extern tree finish_template_variable\t(tree);\n+extern tree finish_template_variable\t\t(tree, tsubst_flags_t = tf_warning_or_error);\n extern tree finish_increment_expr\t\t(tree, enum tree_code);\n extern tree finish_this_expr\t\t\t(void);\n extern tree finish_pseudo_destructor_expr       (tree, tree, tree, location_t);"}, {"sha": "f8c123c1313e2240d085cf2c6a270cbd7cfc1785", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc062b4986328bfeec3ebd744a9c116e28828bf0/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc062b4986328bfeec3ebd744a9c116e28828bf0/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=dc062b4986328bfeec3ebd744a9c116e28828bf0", "patch": "@@ -8187,14 +8187,14 @@ lookup_template_class (tree d1, tree arglist, tree in_decl, tree context,\n tree\n lookup_template_variable (tree templ, tree arglist)\n {\n-  tree type = unknown_type_node;\n+  tree type = NULL_TREE;\n   return build2 (TEMPLATE_ID_EXPR, type, templ, arglist);\n }\n \n /* Instantiate a variable declaration from a TEMPLATE_ID_EXPR for use. */\n \n tree\n-finish_template_variable (tree var)\n+finish_template_variable (tree var, tsubst_flags_t complain)\n {\n   tree templ = TREE_OPERAND (var, 0);\n \n@@ -8203,7 +8203,6 @@ finish_template_variable (tree var)\n   arglist = add_outermost_template_args (tmpl_args, arglist);\n \n   tree parms = DECL_TEMPLATE_PARMS (templ);\n-  tsubst_flags_t complain = tf_warning_or_error;\n   arglist = coerce_innermost_template_parms (parms, arglist, templ, complain,\n \t\t\t\t\t     /*req_all*/true,\n \t\t\t\t\t     /*use_default*/true);\n@@ -14750,6 +14749,17 @@ tsubst_copy_and_build (tree t,\n \tif (targs)\n \t  targs = tsubst_template_args (targs, args, complain, in_decl);\n \n+\tif (variable_template_p (templ))\n+\t  {\n+\t    templ = lookup_template_variable (templ, targs);\n+\t    if (!any_dependent_template_arguments_p (targs))\n+\t      {\n+\t\ttempl = finish_template_variable (templ, complain);\n+\t\tmark_used (templ);\n+\t      }\n+\t    RETURN (convert_from_reference (templ));\n+\t  }\n+\n \tif (TREE_CODE (templ) == COMPONENT_REF)\n \t  {\n \t    object = TREE_OPERAND (templ, 0);\n@@ -16153,6 +16163,7 @@ instantiate_template_1 (tree tmpl, tree orig_args, tsubst_flags_t complain)\n   /* The DECL_TI_TEMPLATE should always be the immediate parent\n      template, not the most general template.  */\n   DECL_TI_TEMPLATE (fndecl) = tmpl;\n+  DECL_TI_ARGS (fndecl) = targ_ptr;\n \n   /* Now we know the specialization, compute access previously\n      deferred.  */"}, {"sha": "80077a16b56679f67d7b267c83d2839d493bd06b", "filename": "gcc/testsuite/g++.dg/cpp1y/var-templ32.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc062b4986328bfeec3ebd744a9c116e28828bf0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ32.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc062b4986328bfeec3ebd744a9c116e28828bf0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ32.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ32.C?ref=dc062b4986328bfeec3ebd744a9c116e28828bf0", "patch": "@@ -4,4 +4,4 @@ template<typename T>\n bool V1 = true;\n \n template<typename T>\n-bool V1<int> = false; // { dg-error \"primary template\" }\n+bool V1<int> = false; // { dg-error \"primary template|not deducible\" }"}, {"sha": "5ed0abca4bc4e199ba52b3418131e40894494991", "filename": "gcc/testsuite/g++.dg/cpp1y/var-templ35.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc062b4986328bfeec3ebd744a9c116e28828bf0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ35.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc062b4986328bfeec3ebd744a9c116e28828bf0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ35.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ35.C?ref=dc062b4986328bfeec3ebd744a9c116e28828bf0", "patch": "@@ -2,4 +2,4 @@\n // { dg-do compile { target c++14 } }\n \n template<typename T> int typeID{42};\n-template<typename T> double typeID<double>{10.10}; // { dg-error \"primary template|redeclaration\" }\n+template<typename T> double typeID<double>{10.10}; // { dg-error \"primary template|redeclaration|not deducible\" }"}, {"sha": "760e36fca44aaedc69d8be037f69b5403b9e49db", "filename": "gcc/testsuite/g++.dg/cpp1y/var-templ36.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc062b4986328bfeec3ebd744a9c116e28828bf0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ36.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc062b4986328bfeec3ebd744a9c116e28828bf0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ36.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ36.C?ref=dc062b4986328bfeec3ebd744a9c116e28828bf0", "patch": "@@ -0,0 +1,15 @@\n+// { dg-do compile { target c++14 } }\n+\n+template <class T>\n+constexpr T v = T();\n+\n+template <class T>\n+constexpr T v<T*> = T();\n+\n+template <class T>\n+struct A {\n+  static constexpr decltype (v<T>) v = ::v<T>;\n+};\n+\n+double d1 = v<double*>;\n+double d2 = A<double*>::v;"}, {"sha": "1fd76d38d4b6947a0820b3641ff8a53ecc5b5ea8", "filename": "gcc/testsuite/g++.dg/cpp1y/var-templ38.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc062b4986328bfeec3ebd744a9c116e28828bf0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ38.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc062b4986328bfeec3ebd744a9c116e28828bf0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ38.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ38.C?ref=dc062b4986328bfeec3ebd744a9c116e28828bf0", "patch": "@@ -0,0 +1,9 @@\n+// PR c++/66596\n+// { dg-do compile { target c++14 } }\n+\n+struct U { void f() {} };\n+struct V { void f() {} };\n+template<class T> U t;\n+template<> V t<int>;\n+template<class T> void g() { t<T>.f(); }\n+int main() { g<int>(); }"}, {"sha": "e06519d5482cfa1c8e5e5643023abe30ba6bfd77", "filename": "gcc/testsuite/g++.dg/cpp1y/var-templ39.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc062b4986328bfeec3ebd744a9c116e28828bf0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ39.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc062b4986328bfeec3ebd744a9c116e28828bf0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ39.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ39.C?ref=dc062b4986328bfeec3ebd744a9c116e28828bf0", "patch": "@@ -0,0 +1,16 @@\n+// PR c++/66260\n+// { dg-do compile { target c++14 } }\n+\n+template <class>\n+constexpr bool foo = false;\n+template <>\n+constexpr bool foo<int> = true;\n+template <class T, int N>\n+constexpr bool foo<T[N]> = foo<T>;\n+\n+static_assert(foo<int>, \"\");\n+static_assert(!foo<double>, \"\");\n+static_assert(foo<int[3]>, \"\");\n+static_assert(!foo<double[3]>, \"\");\n+static_assert(foo<int[2][5][3]>, \"\");\n+static_assert(!foo<double[2][5][3]>, \"\");"}]}