{"sha": "5a3c00681c5eb8b14a08438c5b0a18a04aab0c2b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWEzYzAwNjgxYzVlYjhiMTRhMDg0MzhjNWIwYTE4YTA0YWFiMGMyYg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2011-10-20T20:10:05Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2011-10-20T20:10:05Z"}, "message": "target.def (vec_perm_const_ok): Rename from builtin_vec_perm_ok.\n\n\t* target.def (vec_perm_const_ok): Rename from builtin_vec_perm_ok.\n\t* optabs.c (can_vec_perm_expr_p): Update to match.\n\t(expand_vec_perm_expr): Likewise.\n\t* config/i386/i386.c (TARGET_VECTORIZE_VEC_PERM_CONST_OK): Rename\n\tfrom TARGET_VECTORIZE_BUILTIN_VEC_PERM_OK.\n\t* doc/tm.texi.in: Likewise.\n\nFrom-SVN: r180270", "tree": {"sha": "b79e74688c8bfe85b64de19c5c1b67397a7f2af7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b79e74688c8bfe85b64de19c5c1b67397a7f2af7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5a3c00681c5eb8b14a08438c5b0a18a04aab0c2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a3c00681c5eb8b14a08438c5b0a18a04aab0c2b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a3c00681c5eb8b14a08438c5b0a18a04aab0c2b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a3c00681c5eb8b14a08438c5b0a18a04aab0c2b/comments", "author": null, "committer": null, "parents": [{"sha": "74acb076e9e2bb62d5aba3b1ad21307e385c0392", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74acb076e9e2bb62d5aba3b1ad21307e385c0392", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74acb076e9e2bb62d5aba3b1ad21307e385c0392"}], "stats": {"total": 27, "additions": 18, "deletions": 9}, "files": [{"sha": "f48e2ad19f9a5de61d234e15dfae55305ed3b6a5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a3c00681c5eb8b14a08438c5b0a18a04aab0c2b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a3c00681c5eb8b14a08438c5b0a18a04aab0c2b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5a3c00681c5eb8b14a08438c5b0a18a04aab0c2b", "patch": "@@ -1,3 +1,12 @@\n+2011-10-20  Richard Henderson  <rth@redhat.com>\n+\n+\t* target.def (vec_perm_const_ok): Rename from builtin_vec_perm_ok.\n+\t* optabs.c (can_vec_perm_expr_p): Update to match.\n+\t(expand_vec_perm_expr): Likewise.\n+\t* config/i386/i386.c (TARGET_VECTORIZE_VEC_PERM_CONST_OK): Rename\n+\tfrom TARGET_VECTORIZE_BUILTIN_VEC_PERM_OK.\n+\t* doc/tm.texi.in: Likewise.\n+\n 2011-10-20  Sergey Ostanevich  <sergos.gnu@gmail.com>\n \n \tPR target/50572"}, {"sha": "2d44c00552604d4bac2f7002d7a446db1d402d2b", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a3c00681c5eb8b14a08438c5b0a18a04aab0c2b/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a3c00681c5eb8b14a08438c5b0a18a04aab0c2b/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=5a3c00681c5eb8b14a08438c5b0a18a04aab0c2b", "patch": "@@ -36446,7 +36446,7 @@ ix86_expand_vec_perm_const (rtx operands[4])\n   return false;\n }\n \n-/* Implement targetm.vectorize.builtin_vec_perm_ok.  */\n+/* Implement targetm.vectorize.vec_perm_const_ok.  */\n \n static bool\n ix86_vectorize_vec_perm_const_ok (tree vec_type, tree mask)\n@@ -37879,8 +37879,8 @@ ix86_autovectorize_vector_sizes (void)\n #undef TARGET_VECTORIZE_BUILTIN_VECTORIZATION_COST\n #define TARGET_VECTORIZE_BUILTIN_VECTORIZATION_COST \\\n   ix86_builtin_vectorization_cost\n-#undef TARGET_VECTORIZE_BUILTIN_VEC_PERM_OK\n-#define TARGET_VECTORIZE_BUILTIN_VEC_PERM_OK \\\n+#undef TARGET_VECTORIZE_VEC_PERM_CONST_OK\n+#define TARGET_VECTORIZE_VEC_PERM_CONST_OK \\\n   ix86_vectorize_vec_perm_const_ok\n #undef TARGET_VECTORIZE_PREFERRED_SIMD_MODE\n #define TARGET_VECTORIZE_PREFERRED_SIMD_MODE \\"}, {"sha": "a43ce3d109925691dac60b510c3d90ee781846e1", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a3c00681c5eb8b14a08438c5b0a18a04aab0c2b/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a3c00681c5eb8b14a08438c5b0a18a04aab0c2b/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=5a3c00681c5eb8b14a08438c5b0a18a04aab0c2b", "patch": "@@ -5711,7 +5711,7 @@ misalignment value (@var{misalign}).\n Return true if vector alignment is reachable (by peeling N iterations) for the given type.\n @end deftypefn\n \n-@deftypefn {Target Hook} bool TARGET_VECTORIZE_BUILTIN_VEC_PERM_OK (tree @var{vec_type}, tree @var{mask})\n+@deftypefn {Target Hook} bool TARGET_VECTORIZE_VEC_PERM_CONST_OK (tree @var{vec_type}, tree @var{mask})\n Return true if a vector created for @code{vec_perm_const} is valid.\n @end deftypefn\n "}, {"sha": "cede91edb52c88f1697dd894a42bfbf6cd32b435", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a3c00681c5eb8b14a08438c5b0a18a04aab0c2b/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a3c00681c5eb8b14a08438c5b0a18a04aab0c2b/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=5a3c00681c5eb8b14a08438c5b0a18a04aab0c2b", "patch": "@@ -5649,7 +5649,7 @@ misalignment value (@var{misalign}).\n Return true if vector alignment is reachable (by peeling N iterations) for the given type.\n @end deftypefn\n \n-@hook TARGET_VECTORIZE_BUILTIN_VEC_PERM_OK\n+@hook TARGET_VECTORIZE_VEC_PERM_CONST_OK\n Return true if a vector created for @code{vec_perm_const} is valid.\n @end deftypefn\n "}, {"sha": "5036856524a8595331519b580b460f52b2edd9c5", "filename": "gcc/optabs.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a3c00681c5eb8b14a08438c5b0a18a04aab0c2b/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a3c00681c5eb8b14a08438c5b0a18a04aab0c2b/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=5a3c00681c5eb8b14a08438c5b0a18a04aab0c2b", "patch": "@@ -6714,7 +6714,7 @@ can_vec_perm_expr_p (tree type, tree sel)\n   if (sel == NULL || TREE_CODE (sel) == VECTOR_CST)\n     {\n       if (direct_optab_handler (vec_perm_const_optab, mode) != CODE_FOR_nothing\n-\t  && (sel == NULL || targetm.vectorize.builtin_vec_perm_ok (type, sel)))\n+\t  && (sel == NULL || targetm.vectorize.vec_perm_const_ok (type, sel)))\n \treturn true;\n     }\n \n@@ -6808,7 +6808,7 @@ expand_vec_perm_expr (tree type, tree v0, tree v1, tree sel, rtx target)\n     {\n       icode = direct_optab_handler (vec_perm_const_optab, mode);\n       if (icode != CODE_FOR_nothing\n-\t  && targetm.vectorize.builtin_vec_perm_ok (TREE_TYPE (v0), sel)\n+\t  && targetm.vectorize.vec_perm_const_ok (TREE_TYPE (v0), sel)\n \t  && (tmp = expand_vec_perm_expr_1 (icode, target, v0_rtx,\n \t\t\t\t\t    v1_rtx, sel_rtx)) != NULL)\n \treturn tmp;"}, {"sha": "60fad2a813a02cf64ecab77cba77ea513aa6c1e3", "filename": "gcc/target.def", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a3c00681c5eb8b14a08438c5b0a18a04aab0c2b/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a3c00681c5eb8b14a08438c5b0a18a04aab0c2b/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=5a3c00681c5eb8b14a08438c5b0a18a04aab0c2b", "patch": "@@ -985,9 +985,9 @@ DEFHOOK\n  bool, (const_tree type, bool is_packed),\n  default_builtin_vector_alignment_reachable)\n \n-/* Return true if a vector created for builtin_vec_perm is valid.  */\n+/* Return true if a vector created for vec_perm_const is valid.  */\n DEFHOOK\n-(builtin_vec_perm_ok,\n+(vec_perm_const_ok,\n  \"\",\n  bool, (tree vec_type, tree mask),\n  hook_bool_tree_tree_true)"}]}