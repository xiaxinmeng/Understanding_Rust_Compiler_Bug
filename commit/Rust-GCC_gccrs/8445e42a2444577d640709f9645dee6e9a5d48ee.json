{"sha": "8445e42a2444577d640709f9645dee6e9a5d48ee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODQ0NWU0MmEyNDQ0NTc3ZDY0MDcwOWY5NjQ1ZGVlNmU5YTVkNDhlZQ==", "commit": {"author": {"name": "Steven King", "email": "sxking@uswest.net", "date": "2000-05-09T01:15:14Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-05-09T01:15:14Z"}, "message": "2000-0508  Steven King  <sxking@uswest.net>\n\n        * bits/char_traits.h: use wchar_t utility functions for\n        char_traits<wchar_t> methods.\n        * testsuite/21_string/char_traits.cc: New (test02): test\n        char_traits<wchar_t>\n\n2000-05-08  Benjamin Kosnik  <bkoz@cygnus.com>\n\n\t* acinclude.m4 (GLIBCPP_CXXFLAGS): Add bits for solaris2.8.\n\nFrom-SVN: r33783", "tree": {"sha": "4af2cff776703a6e16dfbebc52045826b7c68e1f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4af2cff776703a6e16dfbebc52045826b7c68e1f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8445e42a2444577d640709f9645dee6e9a5d48ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8445e42a2444577d640709f9645dee6e9a5d48ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8445e42a2444577d640709f9645dee6e9a5d48ee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8445e42a2444577d640709f9645dee6e9a5d48ee/comments", "author": null, "committer": null, "parents": [{"sha": "408607542afd4718fb618f1ae0549a89f28e4f36", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/408607542afd4718fb618f1ae0549a89f28e4f36", "html_url": "https://github.com/Rust-GCC/gccrs/commit/408607542afd4718fb618f1ae0549a89f28e4f36"}], "stats": {"total": 175, "additions": 124, "deletions": 51}, "files": [{"sha": "adb296c5fe248f65b9a633f100330f9c59add4f6", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8445e42a2444577d640709f9645dee6e9a5d48ee/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8445e42a2444577d640709f9645dee6e9a5d48ee/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=8445e42a2444577d640709f9645dee6e9a5d48ee", "patch": "@@ -1,5 +1,14 @@\n+2000-0508  Steven King  <sxking@uswest.net>\n+\n+        * bits/char_traits.h: use wchar_t utility functions for\n+        char_traits<wchar_t> methods.\n+        * testsuite/21_string/char_traits.cc: New (test02): test\n+        char_traits<wchar_t>\n+\n 2000-05-08  Benjamin Kosnik  <bkoz@cygnus.com>\n \n+\t* acinclude.m4 (GLIBCPP_CXXFLAGS): Add bits for solaris2.8.\n+\n \t* bits/fstream.tcc (filebuf::_M_init_filebuf): Don't set\n \t_M_buf_size based on macro, instead use _M_buf_size_opt.\n \t* bits/std_streambuf.h (basic_streambuf): Add _M_buf_size_opt."}, {"sha": "96be15bb61d7536af2e3fb0ecc2ab92b24e483b5", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8445e42a2444577d640709f9645dee6e9a5d48ee/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8445e42a2444577d640709f9645dee6e9a5d48ee/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=8445e42a2444577d640709f9645dee6e9a5d48ee", "patch": "@@ -297,7 +297,7 @@ AC_DEFUN(GLIBCPP_CHECK_CTYPE, [\n     ctype_default=yes\n \n     dnl Test for <ctype> functionality -- gnu-linux\n-    AC_MSG_CHECKING([for gnu-linux <ctype>])\n+    AC_MSG_CHECKING([<ctype> for gnu-linux ])\n     AC_TRY_COMPILE([#include <ctype.h>],\n     [int\n     foo (int a)\n@@ -313,7 +313,7 @@ AC_DEFUN(GLIBCPP_CHECK_CTYPE, [\n \n     dnl Test for <ctype> functionality -- solaris 2.6 and 2.7\n     if test $ctype_default = \"yes\"; then\n-    AC_MSG_CHECKING([for solaris 2.6 or 2.7 <ctype>])\n+    AC_MSG_CHECKING([<ctype> for solaris 2.[6,7,8] ])\n     AC_TRY_COMPILE([#include <ctype.h>],\n     [int\n     foo (int a)\n@@ -336,15 +336,15 @@ AC_DEFUN(GLIBCPP_CHECK_CTYPE, [\n         ctype_default=no\n       else\n         ctype_include_dir=\"config/solaris/solaris2.7\"\n-        AC_MSG_RESULT(\"solaris2.7\")\n+        AC_MSG_RESULT(\"solaris2.[6,7]\")\n         ctype_default=no\n       fi\n     fi\n     fi  \n \n     dnl Test for <ctype> functionality -- solaris 2.5.1\n     if test $ctype_default = \"yes\"; then\n-    AC_MSG_CHECKING([for solaris 2.5.1 <ctype>])\n+    AC_MSG_CHECKING([<ctype> for solaris 2.5.1 ])\n     AC_TRY_COMPILE([#include <ctype.h>],\n     [int\n     foo (int a)\n@@ -360,7 +360,7 @@ AC_DEFUN(GLIBCPP_CHECK_CTYPE, [\n \n     dnl Test for <ctype> functionality -- aix\n     if test $ctype_default = \"yes\"; then\n-    AC_MSG_CHECKING([for aix <ctype>])\n+    AC_MSG_CHECKING([<ctype> for aix ])\n     AC_TRY_COMPILE([#include <ctype.h>],\n     [int\n     foo (int a)\n@@ -377,7 +377,7 @@ AC_DEFUN(GLIBCPP_CHECK_CTYPE, [\n \n     dnl Test for <ctype> functionality -- newlib\n     if test $ctype_default = \"yes\"; then\n-    AC_MSG_CHECKING([for newlib <ctype>])\n+    AC_MSG_CHECKING([<ctype> for newlib ])\n     AC_TRY_COMPILE([#include <ctype.h>],\n     [int\n     foo (int a)"}, {"sha": "c50d49cc110d2cd6d30303d8902ce3d4d6b8f360", "filename": "libstdc++-v3/aclocal.m4", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8445e42a2444577d640709f9645dee6e9a5d48ee/libstdc%2B%2B-v3%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8445e42a2444577d640709f9645dee6e9a5d48ee/libstdc%2B%2B-v3%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Faclocal.m4?ref=8445e42a2444577d640709f9645dee6e9a5d48ee", "patch": "@@ -309,7 +309,7 @@ AC_DEFUN(GLIBCPP_CHECK_CTYPE, [\n     ctype_default=yes\n \n     dnl Test for <ctype> functionality -- gnu-linux\n-    AC_MSG_CHECKING([for gnu-linux <ctype>])\n+    AC_MSG_CHECKING([<ctype> for gnu-linux ])\n     AC_TRY_COMPILE([#include <ctype.h>],\n     [int\n     foo (int a)\n@@ -325,7 +325,7 @@ AC_DEFUN(GLIBCPP_CHECK_CTYPE, [\n \n     dnl Test for <ctype> functionality -- solaris 2.6 and 2.7\n     if test $ctype_default = \"yes\"; then\n-    AC_MSG_CHECKING([for solaris 2.6 or 2.7 <ctype>])\n+    AC_MSG_CHECKING([<ctype> for solaris 2.[6,7,8] ])\n     AC_TRY_COMPILE([#include <ctype.h>],\n     [int\n     foo (int a)\n@@ -348,15 +348,15 @@ AC_DEFUN(GLIBCPP_CHECK_CTYPE, [\n         ctype_default=no\n       else\n         ctype_include_dir=\"config/solaris/solaris2.7\"\n-        AC_MSG_RESULT(\"solaris2.7\")\n+        AC_MSG_RESULT(\"solaris2.[6,7]\")\n         ctype_default=no\n       fi\n     fi\n     fi  \n \n     dnl Test for <ctype> functionality -- solaris 2.5.1\n     if test $ctype_default = \"yes\"; then\n-    AC_MSG_CHECKING([for solaris 2.5.1 <ctype>])\n+    AC_MSG_CHECKING([<ctype> for solaris 2.5.1 ])\n     AC_TRY_COMPILE([#include <ctype.h>],\n     [int\n     foo (int a)\n@@ -372,7 +372,7 @@ AC_DEFUN(GLIBCPP_CHECK_CTYPE, [\n \n     dnl Test for <ctype> functionality -- aix\n     if test $ctype_default = \"yes\"; then\n-    AC_MSG_CHECKING([for aix <ctype>])\n+    AC_MSG_CHECKING([<ctype> for aix ])\n     AC_TRY_COMPILE([#include <ctype.h>],\n     [int\n     foo (int a)\n@@ -389,7 +389,7 @@ AC_DEFUN(GLIBCPP_CHECK_CTYPE, [\n \n     dnl Test for <ctype> functionality -- newlib\n     if test $ctype_default = \"yes\"; then\n-    AC_MSG_CHECKING([for newlib <ctype>])\n+    AC_MSG_CHECKING([<ctype> for newlib ])\n     AC_TRY_COMPILE([#include <ctype.h>],\n     [int\n     foo (int a)"}, {"sha": "b75b4510c139b0494db4ca32d431c52f0a504966", "filename": "libstdc++-v3/bits/char_traits.h", "status": "modified", "additions": 6, "deletions": 27, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8445e42a2444577d640709f9645dee6e9a5d48ee/libstdc%2B%2B-v3%2Fbits%2Fchar_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8445e42a2444577d640709f9645dee6e9a5d48ee/libstdc%2B%2B-v3%2Fbits%2Fchar_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fbits%2Fchar_traits.h?ref=8445e42a2444577d640709f9645dee6e9a5d48ee", "patch": "@@ -243,48 +243,27 @@ namespace std {\n \n       static int \n       compare(const char_type* __s1, const char_type* __s2, size_t __n)\n-      { \n-\tfor (size_t __i = 0; __i < __n; ++__i)\n-\t  if (!eq(__s1[__i], __s2[__i]))\n-\t    return lt(__s1[__i], __s2[__i]) ? -1 : 1;\n-\treturn 0; \n-      }\n+      { return wmemcmp(__s1, __s2, __n); }\n \n       static size_t\n       length(const char_type* __s)\n-      { \n-\tconst char_type* __p = __s; \n-\twhile (*__p) \n-\t  ++__p; \n-\treturn (__p - __s); \n-      }\n+      { return wcslen (__s); }\n \n       static const char_type* \n       find(const char_type* __s, size_t __n, const char_type& __a)\n-      { \n-\tfor (const char_type* __p = __s; size_t(__p - __s) < __n; ++__p)\n-\t  if (*__p == __a) \n-\t    return __p;\n-\treturn 0;\n-      }\n+      { return wmemchr(__s, __a, __n); }\n \n       static char_type* \n       move(char_type* __s1, const char_type* __s2, int_type __n)\n-      { return static_cast<wchar_t*>(memmove(__s1, __s2, \n-\t\t\t\t\t     __n * sizeof(wchar_t))); }\n+      { return wmemmove(__s1, __s2, __n); }\n \n       static char_type* \n       copy(char_type* __s1, const char_type* __s2, size_t __n)\n-      { return static_cast<wchar_t*>(memcpy(__s1, __s2, \n-\t\t\t\t\t    __n * sizeof(wchar_t))); }\n+      { return wmemcpy(__s1, __s2, __n); }\n \n       static char_type* \n       assign(char_type* __s, size_t __n, char_type __a)\n-      { \n-\tfor (char_type* __p = __s; __p < __s + __n; ++__p) \n-\t  assign(*__p, __a);\n-        return __s; \n-      }\n+      { return wmemset(__s, __a, __n); }\n \n       static char_type \n       to_char_type(const int_type& __c) { return char_type(__c); }"}, {"sha": "5123ee4cc77162d3a8726b69247b5193faaeb86a", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8445e42a2444577d640709f9645dee6e9a5d48ee/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8445e42a2444577d640709f9645dee6e9a5d48ee/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=8445e42a2444577d640709f9645dee6e9a5d48ee", "patch": "@@ -3463,8 +3463,8 @@ if eval \"test \\\"`echo '$ac_cv_header_'$ac_safe`\\\" = yes\"; then\n     \n         ctype_default=yes\n \n-        echo $ac_n \"checking for gnu-linux <ctype>\"\"... $ac_c\" 1>&6\n-echo \"configure:3468: checking for gnu-linux <ctype>\" >&5\n+        echo $ac_n \"checking <ctype> for gnu-linux \"\"... $ac_c\" 1>&6\n+echo \"configure:3468: checking <ctype> for gnu-linux \" >&5\n     cat > conftest.$ac_ext <<EOF\n #line 3470 \"configure\"\n #include \"confdefs.h\"\n@@ -3495,8 +3495,8 @@ rm -f conftest*\n     fi\n \n         if test $ctype_default = \"yes\"; then\n-    echo $ac_n \"checking for solaris 2.6 or 2.7 <ctype>\"\"... $ac_c\" 1>&6\n-echo \"configure:3500: checking for solaris 2.6 or 2.7 <ctype>\" >&5\n+    echo $ac_n \"checking <ctype> for solaris 2.6,7,8 \"\"... $ac_c\" 1>&6\n+echo \"configure:3500: checking <ctype> for solaris 2.6,7,8 \" >&5\n     cat > conftest.$ac_ext <<EOF\n #line 3502 \"configure\"\n #include \"confdefs.h\"\n@@ -3564,15 +3564,15 @@ cross_compiling=$ac_cv_prog_cc_cross\n         ctype_default=no\n       else\n         ctype_include_dir=\"config/solaris/solaris2.7\"\n-        echo \"$ac_t\"\"\"solaris2.7\"\" 1>&6\n+        echo \"$ac_t\"\"\"solaris2.6,7\"\" 1>&6\n         ctype_default=no\n       fi\n     fi\n     fi  \n \n         if test $ctype_default = \"yes\"; then\n-    echo $ac_n \"checking for solaris 2.5.1 <ctype>\"\"... $ac_c\" 1>&6\n-echo \"configure:3576: checking for solaris 2.5.1 <ctype>\" >&5\n+    echo $ac_n \"checking <ctype> for solaris 2.5.1 \"\"... $ac_c\" 1>&6\n+echo \"configure:3576: checking <ctype> for solaris 2.5.1 \" >&5\n     cat > conftest.$ac_ext <<EOF\n #line 3578 \"configure\"\n #include \"confdefs.h\"\n@@ -3603,8 +3603,8 @@ rm -f conftest*\n     fi\n \n         if test $ctype_default = \"yes\"; then\n-    echo $ac_n \"checking for aix <ctype>\"\"... $ac_c\" 1>&6\n-echo \"configure:3608: checking for aix <ctype>\" >&5\n+    echo $ac_n \"checking <ctype> for aix \"\"... $ac_c\" 1>&6\n+echo \"configure:3608: checking <ctype> for aix \" >&5\n     cat > conftest.$ac_ext <<EOF\n #line 3610 \"configure\"\n #include \"confdefs.h\"\n@@ -3636,8 +3636,8 @@ rm -f conftest*\n     fi\n \n         if test $ctype_default = \"yes\"; then\n-    echo $ac_n \"checking for newlib <ctype>\"\"... $ac_c\" 1>&6\n-echo \"configure:3641: checking for newlib <ctype>\" >&5\n+    echo $ac_n \"checking <ctype> for newlib \"\"... $ac_c\" 1>&6\n+echo \"configure:3641: checking <ctype> for newlib \" >&5\n     cat > conftest.$ac_ext <<EOF\n #line 3643 \"configure\"\n #include \"confdefs.h\""}, {"sha": "493e4a70099b7a4de57f11b59ed3dcc4754bf22e", "filename": "libstdc++-v3/testsuite/21_strings/char_traits.cc", "status": "modified", "additions": 86, "deletions": 1, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8445e42a2444577d640709f9645dee6e9a5d48ee/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fchar_traits.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8445e42a2444577d640709f9645dee6e9a5d48ee/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fchar_traits.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fchar_traits.cc?ref=8445e42a2444577d640709f9645dee6e9a5d48ee", "patch": "@@ -1,6 +1,6 @@\n // 1999-06-03 bkoz\n \n-// Copyright (C) 1999 Free Software Foundation, Inc.\n+// Copyright (C) 1999, 2000 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -103,17 +103,102 @@ int test01(void)\n   c2 = array1[0];\n   test &= c1 != c2;\n \n+#ifdef DEBUG_ASSERT\n+  assert(test);\n+#endif\n+  return test;\n+}\n+\n+int test02(void)\n+{\n+  bool test = true;\n+  const std::wstring str_01(L\"zuma beach\");\n+  const std::wstring str_02(L\"montara and ocean beach\");\n+ \n+  // 21.1.1 character traits requirements\n+\n+  // Key for decoding what function signatures really mean:\n+  // X                == char_traits<_CharT>\n+  // [c,d]    == _CharT\n+  // [p,q]    == const _CharT*\n+  // s                == _CharT*\n+  // [n,i,j]  == size_t\n+  // f                == X::int_type\n+  // pos      == X::pos_type\n+  // state    == X::state_type\n+\n+  // void X::assign(wchar_t c, wchar_t d)\n+  // assigns c = d;\n+  wchar_t c1 = L'z';\n+  wchar_t c2 = L'u';\n+  test &= c1 != c2;\n+  std::char_traits<wchar_t>::assign(c1,c2);\n+  test &= c1 == L'u';\n \n+  // char* X::move(char* s, const char* p, size_t n)\n+  // for each i in [0,n) performs X::assign(s[i], p[i]). Copies\n+  // correctly even where p is in [s, s + n), and yields s.   \n+  wchar_t array1[] = {L'z', L'u', L'm', L'a', L' ', L'b', L'e', L'a', L'c', L'h',  0};\n+  const wchar_t str_lit1[] = L\"montara and ocean beach\";\n+  int len = sizeof(str_lit1) + sizeof(array1) - 1; // two terminating chars\n+  wchar_t array2[len];\n+\n+  test &= str_lit1[0] == 'm';\n+  c1 = array2[0];\n+  c2 = str_lit1[0];\n+  wchar_t c3 = array2[1];\n+  wchar_t c4 = str_lit1[1];\n+  std::char_traits<wchar_t>::move(array2, str_lit1, 0);\n+  test &= array2[0] == c1;\n+  test &= str_lit1[0] == c2;\n+  std::char_traits<wchar_t>::move(array2, str_lit1, 1);\n+  test &= array2[0] == c2;\n+  test &= str_lit1[0] == c2;\n+  test &= array2[1] == c3;\n+  test &= str_lit1[1] == c4;\n+  std::char_traits<wchar_t>::move(array2, str_lit1, 2);\n+  test &= array2[0] == c2;\n+  test &= str_lit1[0] == c2;\n+  test &= array2[1] == c4;\n+  test &= str_lit1[1] == c4;\n+ \n+  wchar_t* pc1 = array1 + 1;\n+  c1 = pc1[0];\n+  c2 = array1[0];\n+  test &= c1 != c2;\n+  wchar_t* pc2 = std::char_traits<wchar_t>::move(array1, pc1, 0);\n+  c3 = pc1[0];\n+  c4 = array1[0];\n+  test &= c1 == c3;\n+  test &= c2 == c4;\n+  test &= pc2 == array1;\n+\n+  c1 = pc1[0];\n+  c2 = array1[0];\n+  wchar_t* pc3 = pc1;\n+  pc2 = std::char_traits<wchar_t>::move(array1, pc1, 10);\n+  c3 = pc1[0];\n+  c4 = array1[0];\n+  test &= c1 != c3; // underlying wchar_t array changed.\n+  test &= c4 != c3;\n+  test &= pc2 == array1;\n+  test &= pc3 == pc1; // but pointers o-tay\n+  c1 = *(str_01.data());\n+  c2 = array1[0];\n+  test &= c1 != c2;\n+ \n #ifdef DEBUG_ASSERT\n   assert(test);\n #endif\n \n   return test;\n }\n+  \n \n int main()\n { \n   test01();\n+  test02();\n }\n \n "}]}