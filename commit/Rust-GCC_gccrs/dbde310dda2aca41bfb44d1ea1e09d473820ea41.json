{"sha": "dbde310dda2aca41bfb44d1ea1e09d473820ea41", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGJkZTMxMGRkYTJhY2E0MWJmYjQ0ZDFlYTFlMDlkNDczODIwZWE0MQ==", "commit": {"author": {"name": "Geoffrey Keating", "email": "geoffk@apple.com", "date": "2006-03-08T00:14:54Z"}, "committer": {"name": "Geoffrey Keating", "email": "geoffk@gcc.gnu.org", "date": "2006-03-08T00:14:54Z"}, "message": "i386.c (ix86_delegitimize_address): Handle Darwin addresses with offsets; reorganize.\n\n\t* config/i386/i386.c (ix86_delegitimize_address): Handle Darwin\n\taddresses with offsets; reorganize.\n\nFrom-SVN: r111826", "tree": {"sha": "1e721b898de7ea38638f01d7d167708e522fcbe0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1e721b898de7ea38638f01d7d167708e522fcbe0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dbde310dda2aca41bfb44d1ea1e09d473820ea41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbde310dda2aca41bfb44d1ea1e09d473820ea41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dbde310dda2aca41bfb44d1ea1e09d473820ea41", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbde310dda2aca41bfb44d1ea1e09d473820ea41/comments", "author": {"login": "geoffk01", "id": 31905243, "node_id": "MDQ6VXNlcjMxOTA1MjQz", "avatar_url": "https://avatars.githubusercontent.com/u/31905243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/geoffk01", "html_url": "https://github.com/geoffk01", "followers_url": "https://api.github.com/users/geoffk01/followers", "following_url": "https://api.github.com/users/geoffk01/following{/other_user}", "gists_url": "https://api.github.com/users/geoffk01/gists{/gist_id}", "starred_url": "https://api.github.com/users/geoffk01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/geoffk01/subscriptions", "organizations_url": "https://api.github.com/users/geoffk01/orgs", "repos_url": "https://api.github.com/users/geoffk01/repos", "events_url": "https://api.github.com/users/geoffk01/events{/privacy}", "received_events_url": "https://api.github.com/users/geoffk01/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fb638355db9972c6cf5b9a8cfa49b0e9238083cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb638355db9972c6cf5b9a8cfa49b0e9238083cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb638355db9972c6cf5b9a8cfa49b0e9238083cb"}], "stats": {"total": 84, "additions": 46, "deletions": 38}, "files": [{"sha": "d407068d87df0de8ce30496b562cd1c16627e52d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbde310dda2aca41bfb44d1ea1e09d473820ea41/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbde310dda2aca41bfb44d1ea1e09d473820ea41/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dbde310dda2aca41bfb44d1ea1e09d473820ea41", "patch": "@@ -1,5 +1,8 @@\n 2006-03-07  Geoffrey Keating  <geoffk@apple.com>\n \n+\t* config/i386/i386.c (ix86_delegitimize_address): Handle Darwin\n+\taddresses with offsets; reorganize.\n+\n \t* dwarf2out.c (DWARF2_FRAME_REG_OUT): Move up in file.\n \t(expand_builtin_dwarf_sp_column): Call DWARF2_FRAME_REG_OUT.\n \t(expand_builtin_init_dwarf_reg_sizes): Likewise."}, {"sha": "04b730aa690c0a4e47bf09691cc7368bfa3a36db", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 43, "deletions": 38, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbde310dda2aca41bfb44d1ea1e09d473820ea41/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbde310dda2aca41bfb44d1ea1e09d473820ea41/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=dbde310dda2aca41bfb44d1ea1e09d473820ea41", "patch": "@@ -7083,12 +7083,24 @@ i386_output_dwarf_dtprel (FILE *file, int size, rtx x)\n \n /* In the name of slightly smaller debug output, and to cater to\n    general assembler lossage, recognize PIC+GOTOFF and turn it back\n-   into a direct symbol reference.  */\n+   into a direct symbol reference.  \n+\n+   On Darwin, this is necessary to avoid a crash, because Darwin\n+   has a different PIC label for each routine but the DWARF debugging\n+   information is not associated with any particular routine, so it's\n+   necessary to remove references to the PIC label from RTL stored by\n+   the DWARF output code.  */\n \n static rtx\n ix86_delegitimize_address (rtx orig_x)\n {\n-  rtx x = orig_x, y;\n+  rtx x = orig_x;\n+  /* reg_addend is NULL or a multiple of some register.  */\n+  rtx reg_addend = NULL_RTX;\n+  /* const_addend is NULL or a const_int.  */\n+  rtx const_addend = NULL_RTX;\n+  /* This is the result, or NULL.  */\n+  rtx result = NULL_RTX;\n \n   if (GET_CODE (x) == MEM)\n     x = XEXP (x, 0);\n@@ -7110,59 +7122,52 @@ ix86_delegitimize_address (rtx orig_x)\n   if (GET_CODE (XEXP (x, 0)) == REG\n       && REGNO (XEXP (x, 0)) == PIC_OFFSET_TABLE_REGNUM)\n     /* %ebx + GOT/GOTOFF */\n-    y = NULL;\n+    ;\n   else if (GET_CODE (XEXP (x, 0)) == PLUS)\n     {\n       /* %ebx + %reg * scale + GOT/GOTOFF */\n-      y = XEXP (x, 0);\n-      if (GET_CODE (XEXP (y, 0)) == REG\n-\t  && REGNO (XEXP (y, 0)) == PIC_OFFSET_TABLE_REGNUM)\n-\ty = XEXP (y, 1);\n-      else if (GET_CODE (XEXP (y, 1)) == REG\n-\t       && REGNO (XEXP (y, 1)) == PIC_OFFSET_TABLE_REGNUM)\n-\ty = XEXP (y, 0);\n+      reg_addend = XEXP (x, 0);\n+      if (GET_CODE (XEXP (reg_addend, 0)) == REG\n+\t  && REGNO (XEXP (reg_addend, 0)) == PIC_OFFSET_TABLE_REGNUM)\n+\treg_addend = XEXP (reg_addend, 1);\n+      else if (GET_CODE (XEXP (reg_addend, 1)) == REG\n+\t       && REGNO (XEXP (reg_addend, 1)) == PIC_OFFSET_TABLE_REGNUM)\n+\treg_addend = XEXP (reg_addend, 0);\n       else\n \treturn orig_x;\n-      if (GET_CODE (y) != REG\n-\t  && GET_CODE (y) != MULT\n-\t  && GET_CODE (y) != ASHIFT)\n+      if (GET_CODE (reg_addend) != REG\n+\t  && GET_CODE (reg_addend) != MULT\n+\t  && GET_CODE (reg_addend) != ASHIFT)\n \treturn orig_x;\n     }\n   else\n     return orig_x;\n \n   x = XEXP (XEXP (x, 1), 0);\n-  if (GET_CODE (x) == UNSPEC\n-      && ((XINT (x, 1) == UNSPEC_GOT && GET_CODE (orig_x) == MEM)\n-\t  || (XINT (x, 1) == UNSPEC_GOTOFF && GET_CODE (orig_x) != MEM)))\n-    {\n-      if (y)\n-\treturn gen_rtx_PLUS (Pmode, y, XVECEXP (x, 0, 0));\n-      return XVECEXP (x, 0, 0);\n-    }\n-\n   if (GET_CODE (x) == PLUS\n-      && GET_CODE (XEXP (x, 0)) == UNSPEC\n-      && GET_CODE (XEXP (x, 1)) == CONST_INT\n-      && ((XINT (XEXP (x, 0), 1) == UNSPEC_GOT && GET_CODE (orig_x) == MEM)\n-\t  || (XINT (XEXP (x, 0), 1) == UNSPEC_GOTOFF\n-\t      && GET_CODE (orig_x) != MEM)))\n+      && GET_CODE (XEXP (x, 1)) == CONST_INT)\n     {\n-      x = gen_rtx_PLUS (VOIDmode, XVECEXP (XEXP (x, 0), 0, 0), XEXP (x, 1));\n-      if (y)\n-\treturn gen_rtx_PLUS (Pmode, y, x);\n-      return x;\n+      const_addend = XEXP (x, 1);\n+      x = XEXP (x, 0);\n     }\n \n+  if (GET_CODE (x) == UNSPEC\n+      && ((XINT (x, 1) == UNSPEC_GOT && GET_CODE (orig_x) == MEM)\n+\t  || (XINT (x, 1) == UNSPEC_GOTOFF && GET_CODE (orig_x) != MEM)))\n+    result = XVECEXP (x, 0, 0);\n+\n   if (TARGET_MACHO && darwin_local_data_pic (x)\n       && GET_CODE (orig_x) != MEM)\n-    {\n-      x = XEXP (x, 0);\n-      if (y)\n-\treturn gen_rtx_PLUS (Pmode, y, x);\n-      return x;\n-    }\n-  return orig_x;\n+    result = XEXP (x, 0);\n+\n+  if (! result)\n+    return orig_x;\n+  \n+  if (const_addend)\n+    result = gen_rtx_PLUS (Pmode, result, const_addend);\n+  if (reg_addend)\n+    result = gen_rtx_PLUS (Pmode, reg_addend, result);\n+  return result;\n }\n \f\n static void"}]}