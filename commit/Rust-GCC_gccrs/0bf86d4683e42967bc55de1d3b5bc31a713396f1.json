{"sha": "0bf86d4683e42967bc55de1d3b5bc31a713396f1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGJmODZkNDY4M2U0Mjk2N2JjNTVkZTFkM2I1YmMzMWE3MTMzOTZmMQ==", "commit": {"author": {"name": "Kelvin Nilsen", "email": "kelvin@gcc.gnu.org", "date": "2018-03-22T20:18:35Z"}, "committer": {"name": "Kelvin Nilsen", "email": "kelvin@gcc.gnu.org", "date": "2018-03-22T20:18:35Z"}, "message": "rs6000-builtin.def: Remove various BU_ALTIVEC_X macro expansions for definition of...\n\ngcc/ChangeLog:\n\n2018-03-22  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n\n\t* config/rs6000/rs6000-builtin.def: Remove various BU_ALTIVEC_X\n\tmacro expansions for definition of ST_INTERNAL_<mode> and\n\tLD_INTERNAL_<mode> builtins.\n\t* config/rs6000/rs6000-protos.h (rs6000_address_for_altivec):\n\tRemove prototype.\n\t* config/rs6000/rs6000.c (altivec_expand_ld_builtin): Delete this\n\tfunction.\n\t(altivec_expand_st_builtin): Likewise.\n\t(altivec_expand_builtin): Remove calls to deleted functions.\n\t(rs6000_address_for_altivec): Delete this function.\n\t* config/rs6000/vector.md: Remove expands for\n\tvector_altivec_load_<mode> and vector_altivec_store_<mode>.\n\nFrom-SVN: r258783", "tree": {"sha": "98f94dbacd5356d2c7a39a94bdb6a8356096ae97", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/98f94dbacd5356d2c7a39a94bdb6a8356096ae97"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0bf86d4683e42967bc55de1d3b5bc31a713396f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bf86d4683e42967bc55de1d3b5bc31a713396f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0bf86d4683e42967bc55de1d3b5bc31a713396f1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bf86d4683e42967bc55de1d3b5bc31a713396f1/comments", "author": null, "committer": null, "parents": [{"sha": "bb4ac03b8ffda26d3b1d55d433b777509dbc5e4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb4ac03b8ffda26d3b1d55d433b777509dbc5e4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb4ac03b8ffda26d3b1d55d433b777509dbc5e4c"}], "stats": {"total": 220, "additions": 15, "deletions": 205}, "files": [{"sha": "c6cdf21789b834fc73eaba75be8be07b6d53729c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bf86d4683e42967bc55de1d3b5bc31a713396f1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bf86d4683e42967bc55de1d3b5bc31a713396f1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0bf86d4683e42967bc55de1d3b5bc31a713396f1", "patch": "@@ -1,3 +1,18 @@\n+2018-03-22  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n+\n+\t* config/rs6000/rs6000-builtin.def: Remove various BU_ALTIVEC_X\n+\tmacro expansions for definition of ST_INTERNAL_<mode> and\n+\tLD_INTERNAL_<mode> builtins.\n+\t* config/rs6000/rs6000-protos.h (rs6000_address_for_altivec):\n+\tRemove prototype.\n+\t* config/rs6000/rs6000.c (altivec_expand_ld_builtin): Delete this\n+\tfunction.\n+\t(altivec_expand_st_builtin): Likewise.\n+\t(altivec_expand_builtin): Remove calls to deleted functions.\n+\t(rs6000_address_for_altivec): Delete this function.\n+\t* config/rs6000/vector.md: Remove expands for\n+\tvector_altivec_load_<mode> and vector_altivec_store_<mode>.\n+\n 2018-03-22  Sudakshina Das  <sudi.das@arm.com>\n \n \tPR target/84826"}, {"sha": "bc75be57184955ddc11b868d7edb9de18213f57c", "filename": "gcc/config/rs6000/rs6000-builtin.def", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bf86d4683e42967bc55de1d3b5bc31a713396f1/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bf86d4683e42967bc55de1d3b5bc31a713396f1/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def?ref=0bf86d4683e42967bc55de1d3b5bc31a713396f1", "patch": "@@ -1210,20 +1210,6 @@ BU_ALTIVEC_P (VCMPGTSB_P,     \"vcmpgtsb_p\",\tCONST,\tvector_gt_v16qi_p)\n BU_ALTIVEC_P (VCMPGTUB_P,     \"vcmpgtub_p\",\tCONST,\tvector_gtu_v16qi_p)\n \n /* AltiVec builtins that are handled as special cases.  */\n-BU_ALTIVEC_X (ST_INTERNAL_4si,  \"st_internal_4si\",  MEM)\n-BU_ALTIVEC_X (LD_INTERNAL_4si,  \"ld_internal_4si\",  MEM)\n-BU_ALTIVEC_X (ST_INTERNAL_8hi,\t\"st_internal_8hi\",  MEM)\n-BU_ALTIVEC_X (LD_INTERNAL_8hi,\t\"ld_internal_8hi\",  MEM)\n-BU_ALTIVEC_X (ST_INTERNAL_16qi,\t\"st_internal_16qi\", MEM)\n-BU_ALTIVEC_X (LD_INTERNAL_16qi,\t\"ld_internal_16qi\", MEM)\n-BU_ALTIVEC_X (ST_INTERNAL_4sf,\t\"st_internal_16qi\", MEM)\n-BU_ALTIVEC_X (LD_INTERNAL_4sf,\t\"ld_internal_4sf\",  MEM)\n-BU_ALTIVEC_X (ST_INTERNAL_2df,\t\"st_internal_4sf\",  MEM)\n-BU_ALTIVEC_X (LD_INTERNAL_2df,\t\"ld_internal_2df\",  MEM)\n-BU_ALTIVEC_X (ST_INTERNAL_2di,\t\"st_internal_2di\",  MEM)\n-BU_ALTIVEC_X (LD_INTERNAL_2di,\t\"ld_internal_2di\",  MEM)\n-BU_ALTIVEC_X (ST_INTERNAL_1ti,\t\"st_internal_1ti\",  MEM)\n-BU_ALTIVEC_X (LD_INTERNAL_1ti,\t\"ld_internal_1ti\",  MEM)\n BU_ALTIVEC_X (MTVSCR,\t\t\"mtvscr\",\t    MISC)\n BU_ALTIVEC_X (MFVSCR,\t\t\"mfvscr\",\t    MISC)\n BU_ALTIVEC_X (DSSALL,\t\t\"dssall\",\t    MISC)"}, {"sha": "b1e8cf66c540662aa3ee1958ae1a6411fe174c02", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bf86d4683e42967bc55de1d3b5bc31a713396f1/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bf86d4683e42967bc55de1d3b5bc31a713396f1/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=0bf86d4683e42967bc55de1d3b5bc31a713396f1", "patch": "@@ -162,7 +162,6 @@ extern void rs6000_emit_parity (rtx, rtx);\n extern rtx rs6000_machopic_legitimize_pic_address (rtx, machine_mode,\n \t\t\t\t\t\t   rtx);\n extern rtx rs6000_address_for_fpconvert (rtx);\n-extern rtx rs6000_address_for_altivec (rtx);\n extern rtx rs6000_allocate_stack_temp (machine_mode, bool, bool);\n extern int rs6000_loop_align (rtx);\n extern void rs6000_split_logical (rtx [], enum rtx_code, bool, bool, bool);"}, {"sha": "1fe8b9ac53f7dc30ece27b08c62d1f7339e43508", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 0, "deletions": 151, "changes": 151, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bf86d4683e42967bc55de1d3b5bc31a713396f1/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bf86d4683e42967bc55de1d3b5bc31a713396f1/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=0bf86d4683e42967bc55de1d3b5bc31a713396f1", "patch": "@@ -15184,126 +15184,6 @@ rs6000_expand_ternop_builtin (enum insn_code icode, tree exp, rtx target)\n   return target;\n }\n \n-/* Expand the lvx builtins.  */\n-static rtx\n-altivec_expand_ld_builtin (tree exp, rtx target, bool *expandedp)\n-{\n-  tree fndecl = TREE_OPERAND (CALL_EXPR_FN (exp), 0);\n-  unsigned int fcode = DECL_FUNCTION_CODE (fndecl);\n-  tree arg0;\n-  machine_mode tmode, mode0;\n-  rtx pat, op0;\n-  enum insn_code icode;\n-\n-  switch (fcode)\n-    {\n-    case ALTIVEC_BUILTIN_LD_INTERNAL_16qi:\n-      icode = CODE_FOR_vector_altivec_load_v16qi;\n-      break;\n-    case ALTIVEC_BUILTIN_LD_INTERNAL_8hi:\n-      icode = CODE_FOR_vector_altivec_load_v8hi;\n-      break;\n-    case ALTIVEC_BUILTIN_LD_INTERNAL_4si:\n-      icode = CODE_FOR_vector_altivec_load_v4si;\n-      break;\n-    case ALTIVEC_BUILTIN_LD_INTERNAL_4sf:\n-      icode = CODE_FOR_vector_altivec_load_v4sf;\n-      break;\n-    case ALTIVEC_BUILTIN_LD_INTERNAL_2df:\n-      icode = CODE_FOR_vector_altivec_load_v2df;\n-      break;\n-    case ALTIVEC_BUILTIN_LD_INTERNAL_2di:\n-      icode = CODE_FOR_vector_altivec_load_v2di;\n-      break;\n-    case ALTIVEC_BUILTIN_LD_INTERNAL_1ti:\n-      icode = CODE_FOR_vector_altivec_load_v1ti;\n-      break;\n-    default:\n-      *expandedp = false;\n-      return NULL_RTX;\n-    }\n-\n-  *expandedp = true;\n-\n-  arg0 = CALL_EXPR_ARG (exp, 0);\n-  op0 = expand_normal (arg0);\n-  tmode = insn_data[icode].operand[0].mode;\n-  mode0 = insn_data[icode].operand[1].mode;\n-\n-  if (target == 0\n-      || GET_MODE (target) != tmode\n-      || ! (*insn_data[icode].operand[0].predicate) (target, tmode))\n-    target = gen_reg_rtx (tmode);\n-\n-  if (! (*insn_data[icode].operand[1].predicate) (op0, mode0))\n-    op0 = gen_rtx_MEM (mode0, copy_to_mode_reg (Pmode, op0));\n-\n-  pat = GEN_FCN (icode) (target, op0);\n-  if (! pat)\n-    return 0;\n-  emit_insn (pat);\n-  return target;\n-}\n-\n-/* Expand the stvx builtins.  */\n-static rtx\n-altivec_expand_st_builtin (tree exp, rtx target ATTRIBUTE_UNUSED,\n-\t\t\t   bool *expandedp)\n-{\n-  tree fndecl = TREE_OPERAND (CALL_EXPR_FN (exp), 0);\n-  unsigned int fcode = DECL_FUNCTION_CODE (fndecl);\n-  tree arg0, arg1;\n-  machine_mode mode0, mode1;\n-  rtx pat, op0, op1;\n-  enum insn_code icode;\n-\n-  switch (fcode)\n-    {\n-    case ALTIVEC_BUILTIN_ST_INTERNAL_16qi:\n-      icode = CODE_FOR_vector_altivec_store_v16qi;\n-      break;\n-    case ALTIVEC_BUILTIN_ST_INTERNAL_8hi:\n-      icode = CODE_FOR_vector_altivec_store_v8hi;\n-      break;\n-    case ALTIVEC_BUILTIN_ST_INTERNAL_4si:\n-      icode = CODE_FOR_vector_altivec_store_v4si;\n-      break;\n-    case ALTIVEC_BUILTIN_ST_INTERNAL_4sf:\n-      icode = CODE_FOR_vector_altivec_store_v4sf;\n-      break;\n-    case ALTIVEC_BUILTIN_ST_INTERNAL_2df:\n-      icode = CODE_FOR_vector_altivec_store_v2df;\n-      break;\n-    case ALTIVEC_BUILTIN_ST_INTERNAL_2di:\n-      icode = CODE_FOR_vector_altivec_store_v2di;\n-      break;\n-    case ALTIVEC_BUILTIN_ST_INTERNAL_1ti:\n-      icode = CODE_FOR_vector_altivec_store_v1ti;\n-      break;\n-    default:\n-      *expandedp = false;\n-      return NULL_RTX;\n-    }\n-\n-  arg0 = CALL_EXPR_ARG (exp, 0);\n-  arg1 = CALL_EXPR_ARG (exp, 1);\n-  op0 = expand_normal (arg0);\n-  op1 = expand_normal (arg1);\n-  mode0 = insn_data[icode].operand[0].mode;\n-  mode1 = insn_data[icode].operand[1].mode;\n-\n-  if (! (*insn_data[icode].operand[0].predicate) (op0, mode0))\n-    op0 = gen_rtx_MEM (mode0, copy_to_mode_reg (Pmode, op0));\n-  if (! (*insn_data[icode].operand[1].predicate) (op1, mode1))\n-    op1 = copy_to_mode_reg (mode1, op1);\n-\n-  pat = GEN_FCN (icode) (op0, op1);\n-  if (pat)\n-    emit_insn (pat);\n-\n-  *expandedp = true;\n-  return NULL_RTX;\n-}\n \n /* Expand the dst builtins.  */\n static rtx\n@@ -15508,14 +15388,6 @@ altivec_expand_builtin (tree exp, rtx target, bool *expandedp)\n       return expand_call (exp, target, false);\n     }\n \n-  target = altivec_expand_ld_builtin (exp, target, expandedp);\n-  if (*expandedp)\n-    return target;\n-\n-  target = altivec_expand_st_builtin (exp, target, expandedp);\n-  if (*expandedp)\n-    return target;\n-\n   target = altivec_expand_dst_builtin (exp, target, expandedp);\n   if (*expandedp)\n     return target;\n@@ -38011,29 +37883,6 @@ rs6000_address_for_fpconvert (rtx x)\n   return x;\n }\n \n-/* Given a memory reference, if it is not in the form for altivec memory\n-   reference instructions (i.e. reg or reg+reg addressing with AND of -16),\n-   convert to the altivec format.  */\n-\n-rtx\n-rs6000_address_for_altivec (rtx x)\n-{\n-  gcc_assert (MEM_P (x));\n-  if (!altivec_indexed_or_indirect_operand (x, GET_MODE (x)))\n-    {\n-      rtx addr = XEXP (x, 0);\n-\n-      if (!legitimate_indexed_address_p (addr, reload_completed)\n-\t  && !legitimate_indirect_address_p (addr, reload_completed))\n-\taddr = copy_to_mode_reg (Pmode, addr);\n-\n-      addr = gen_rtx_AND (Pmode, addr, GEN_INT (-16));\n-      x = change_address (x, GET_MODE (x), addr);\n-    }\n-\n-  return x;\n-}\n-\n /* Implement TARGET_LEGITIMATE_CONSTANT_P.\n \n    On the RS/6000, all integer constants are acceptable, most won't be valid"}, {"sha": "21743c6be264931eb91d53f01d9a87f4b7a402f6", "filename": "gcc/config/rs6000/vector.md", "status": "modified", "additions": 0, "deletions": 39, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bf86d4683e42967bc55de1d3b5bc31a713396f1/gcc%2Fconfig%2Frs6000%2Fvector.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bf86d4683e42967bc55de1d3b5bc31a713396f1/gcc%2Fconfig%2Frs6000%2Fvector.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvector.md?ref=0bf86d4683e42967bc55de1d3b5bc31a713396f1", "patch": "@@ -180,45 +180,6 @@\n   DONE;\n })\n \n-;; Vector floating point load/store instructions that uses the Altivec\n-;; instructions even if we are compiling for VSX, since the Altivec\n-;; instructions silently ignore the bottom 3 bits of the address, and VSX does\n-;; not.\n-(define_expand \"vector_altivec_load_<mode>\"\n-  [(set (match_operand:VEC_M 0 \"vfloat_operand\")\n-\t(match_operand:VEC_M 1 \"memory_operand\"))]\n-  \"VECTOR_MEM_ALTIVEC_OR_VSX_P (<MODE>mode)\"\n-{\n-  gcc_assert (VECTOR_MEM_ALTIVEC_OR_VSX_P (<MODE>mode));\n-\n-  if (VECTOR_MEM_VSX_P (<MODE>mode))\n-    {\n-      operands[1] = rs6000_address_for_altivec (operands[1]);\n-      rtx and_op = XEXP (operands[1], 0);\n-      gcc_assert (GET_CODE (and_op) == AND);\n-      emit_insn (gen_altivec_lvx_<mode> (operands[0], operands[1]));\n-      DONE;\n-    }\n-})\n-\n-(define_expand \"vector_altivec_store_<mode>\"\n-  [(set (match_operand:VEC_M 0 \"memory_operand\")\n-\t(match_operand:VEC_M 1 \"vfloat_operand\"))]\n-  \"VECTOR_MEM_ALTIVEC_OR_VSX_P (<MODE>mode)\"\n-{\n-  gcc_assert (VECTOR_MEM_ALTIVEC_OR_VSX_P (<MODE>mode));\n-\n-  if (VECTOR_MEM_VSX_P (<MODE>mode))\n-    {\n-      operands[0] = rs6000_address_for_altivec (operands[0]);\n-      rtx and_op = XEXP (operands[0], 0);\n-      gcc_assert (GET_CODE (and_op) == AND);\n-      emit_insn (gen_altivec_stvx_<mode> (operands[1], operands[0]));\n-      DONE;\n-    }\n-})\n-\n-\n \f\n ;; Generic floating point vector arithmetic support\n (define_expand \"add<mode>3\""}]}