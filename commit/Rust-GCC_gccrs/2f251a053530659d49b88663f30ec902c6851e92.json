{"sha": "2f251a053530659d49b88663f30ec902c6851e92", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmYyNTFhMDUzNTMwNjU5ZDQ5Yjg4NjYzZjMwZWM5MDJjNjg1MWU5Mg==", "commit": {"author": {"name": "Alexander Ivchenko", "email": "alexander.ivchenko@intel.com", "date": "2013-03-27T09:55:19Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2013-03-27T09:55:19Z"}, "message": "target.def (TARGET_HAS_IFUNC_P): New target hook.\n\n        * gcc/target.def (TARGET_HAS_IFUNC_P): New target hook.\n        * gcc/doc/tm.texi.in (TARGET_HAS_IFUNC_P): New.\n        * gcc/doc/tm.texi: Regenerate.\n        * gcc/targhooks.h (default_has_ifunc_p): New.\n        * gcc/targhooks.c (default_has_ifunc_p): Ditto.\n        * gcc/config/linux-protos.h: New file.\n        * gcc/config/linux-android.h (TARGET_HAS_IFUNC_P): Using version of\n        this hook for linux which disables support of indirect functions in\n        android.\n        * gcc/config/linux-android.c: New file.\n        * gcc/config/t-linux-android.c: Ditto.\n        * gcc/config.gcc: Added new object file linux-android.o.\n        * gcc/config/i386/i386.c (ix86_get_function_versions_dispatcher):\n        Using TARGET_HAS_IFUNC hook instead of HAVE_GNU_INDIRECT_FUNCTION.\n        * gcc/varasm.c (do_assemble_alias): Likewise.\n        * configure.ac: Define HAVE_GNU_INDIRECT_FUNCTION as zero if the target\n        doesn't support indirect functions.\n        * configure: Regenerate.\n\nFrom-SVN: r197156", "tree": {"sha": "c3f8af07cbeec30831a713ebef2709f7bae7324c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c3f8af07cbeec30831a713ebef2709f7bae7324c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2f251a053530659d49b88663f30ec902c6851e92", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f251a053530659d49b88663f30ec902c6851e92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f251a053530659d49b88663f30ec902c6851e92", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f251a053530659d49b88663f30ec902c6851e92/comments", "author": null, "committer": null, "parents": [{"sha": "78b4e425a6dfae3b2c315201d673773482d219eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78b4e425a6dfae3b2c315201d673773482d219eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78b4e425a6dfae3b2c315201d673773482d219eb"}], "stats": {"total": 229, "additions": 185, "deletions": 44}, "files": [{"sha": "f00cb045ab2f72d1abc8f1b3a02acbb9f1b21db7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f251a053530659d49b88663f30ec902c6851e92/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f251a053530659d49b88663f30ec902c6851e92/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2f251a053530659d49b88663f30ec902c6851e92", "patch": "@@ -1,3 +1,24 @@\n+2013-03-27  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n+\n+\t* gcc/target.def (TARGET_HAS_IFUNC_P): New target hook.\n+\t* gcc/doc/tm.texi.in (TARGET_HAS_IFUNC_P): New.\n+\t* gcc/doc/tm.texi: Regenerate.\n+\t* gcc/targhooks.h (default_has_ifunc_p): New.\n+\t* gcc/targhooks.c (default_has_ifunc_p): Ditto.\n+\t* gcc/config/linux-protos.h: New file.\n+\t* gcc/config/linux-android.h (TARGET_HAS_IFUNC_P): Using version of\n+\tthis hook for linux which disables support of indirect functions in\n+\tandroid.\n+\t* gcc/config/linux-android.c: New file.\n+\t* gcc/config/t-linux-android.c: Ditto.\n+\t* gcc/config.gcc: Added new object file linux-android.o.\n+\t* gcc/config/i386/i386.c (ix86_get_function_versions_dispatcher):\n+\tUsing TARGET_HAS_IFUNC hook instead of HAVE_GNU_INDIRECT_FUNCTION.\n+\t* gcc/varasm.c (do_assemble_alias): Likewise.\n+\t* configure.ac: Define HAVE_GNU_INDIRECT_FUNCTION as zero if the target\n+\tdoesn't support indirect functions.\n+\t* configure: Regenerate.\n+\n 2013-03-27  Bin Cheng  <bin.cheng@arm.com>\n \n \tPR target/56102"}, {"sha": "11af65f9fab13d510f36c96d5e86ae4a1372bece", "filename": "gcc/config.gcc", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f251a053530659d49b88663f30ec902c6851e92/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f251a053530659d49b88663f30ec902c6851e92/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=2f251a053530659d49b88663f30ec902c6851e92", "patch": "@@ -664,8 +664,11 @@ case ${target} in\n   # Add Android userspace support to Linux targets.\n   case $target in\n     *linux*)\n+      tm_p_file=\"${tm_p_file} linux-protos.h\"\n+      tmake_file=\"${tmake_file} t-linux-android\"\n       tm_file=\"$tm_file linux-android.h\"\n       extra_options=\"$extra_options linux-android.opt\"\n+      extra_objs=\"$extra_objs linux-android.o\"\n       ;;\n   esac\n   # Enable compilation for Android by default for *android* targets.\n@@ -875,8 +878,9 @@ arm*-*-linux-*)\t\t\t# ARM GNU/Linux with ELF\n \t    tm_defines=\"${tm_defines} TARGET_BIG_ENDIAN_DEFAULT=1\"\n \t    ;;\n \tesac\n-\ttmake_file=\"${tmake_file} arm/t-arm arm/t-arm-elf arm/t-bpabi arm/t-linux-eabi\"\n-\ttm_file=\"$tm_file arm/bpabi.h arm/linux-eabi.h arm/aout.h vxworks-dummy.h arm/arm.h\"\n+\ttmake_file=\"${tmake_file} arm/t-arm arm/t-arm-elf arm/t-bpabi arm/t-linux-eabi t-linux-android\"\n+\ttm_file=\"$tm_file arm/bpabi.h arm/linux-eabi.h arm/aout.h arm/arm.h\"\n+\textra_objs=\"$extra_objs linux-android.o\"\n \t# Define multilib configuration for arm-linux-androideabi.\n \tcase ${target} in\n \t*-androideabi)"}, {"sha": "030183c9e0f11fa1b730f4277f572da939743a1f", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 32, "deletions": 28, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f251a053530659d49b88663f30ec902c6851e92/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f251a053530659d49b88663f30ec902c6851e92/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=2f251a053530659d49b88663f30ec902c6851e92", "patch": "@@ -29206,7 +29206,7 @@ make_name (tree decl, const char *suffix, bool make_unique)\n   return global_var_name;\n }\n \n-#if defined (ASM_OUTPUT_TYPE_DIRECTIVE) && HAVE_GNU_INDIRECT_FUNCTION\n+#if defined (ASM_OUTPUT_TYPE_DIRECTIVE)\n \n /* Make a dispatcher declaration for the multi-versioned function DECL.\n    Calls to DECL function will be replaced with calls to the dispatcher\n@@ -29277,12 +29277,6 @@ ix86_get_function_versions_dispatcher (void *decl)\n \n   tree dispatch_decl = NULL;\n \n-#if defined (ASM_OUTPUT_TYPE_DIRECTIVE) && HAVE_GNU_INDIRECT_FUNCTION\n-  struct cgraph_function_version_info *it_v = NULL;\n-  struct cgraph_node *dispatcher_node = NULL;\n-  struct cgraph_function_version_info *dispatcher_version_info = NULL;\n-#endif\n-\n   struct cgraph_function_version_info *default_version_info = NULL;\n  \n   gcc_assert (fn != NULL && DECL_FUNCTION_VERSIONED (fn));\n@@ -29327,30 +29321,40 @@ ix86_get_function_versions_dispatcher (void *decl)\n \n   default_node = default_version_info->this_node;\n \n-#if defined (ASM_OUTPUT_TYPE_DIRECTIVE) && HAVE_GNU_INDIRECT_FUNCTION\n-  /* Right now, the dispatching is done via ifunc.  */\n-  dispatch_decl = make_dispatcher_decl (default_node->symbol.decl); \n-\n-  dispatcher_node = cgraph_get_create_node (dispatch_decl);\n-  gcc_assert (dispatcher_node != NULL);\n-  dispatcher_node->dispatcher_function = 1;\n-  dispatcher_version_info\n-    = insert_new_cgraph_node_version (dispatcher_node);\n-  dispatcher_version_info->next = default_version_info;\n-  dispatcher_node->local.finalized = 1;\n- \n-  /* Set the dispatcher for all the versions.  */ \n-  it_v = default_version_info;\n-  while (it_v != NULL)\n+#if defined (ASM_OUTPUT_TYPE_DIRECTIVE)\n+  if (targetm.has_ifunc_p ())\n     {\n-      it_v->dispatcher_resolver = dispatch_decl;\n-      it_v = it_v->next;\n+      struct cgraph_function_version_info *it_v = NULL;\n+      struct cgraph_node *dispatcher_node = NULL;\n+      struct cgraph_function_version_info *dispatcher_version_info = NULL;\n+\n+      /* Right now, the dispatching is done via ifunc.  */\n+      dispatch_decl = make_dispatcher_decl (default_node->symbol.decl);\n+\n+      dispatcher_node = cgraph_get_create_node (dispatch_decl);\n+      gcc_assert (dispatcher_node != NULL);\n+      dispatcher_node->dispatcher_function = 1;\n+      dispatcher_version_info\n+\t= insert_new_cgraph_node_version (dispatcher_node);\n+      dispatcher_version_info->next = default_version_info;\n+      dispatcher_node->local.finalized = 1;\n+\n+      /* Set the dispatcher for all the versions.  */\n+      it_v = default_version_info;\n+      while (it_v != NULL)\n+\t{\n+\t  it_v->dispatcher_resolver = dispatch_decl;\n+\t  it_v = it_v->next;\n+\t}\n     }\n-#else\n-  error_at (DECL_SOURCE_LOCATION (default_node->symbol.decl),\n-\t    \"multiversioning needs ifunc which is not supported \"\n-\t    \"in this configuration\");\n+  else\n #endif\n+    {\n+      error_at (DECL_SOURCE_LOCATION (default_node->symbol.decl),\n+\t\t\"multiversioning needs ifunc which is not supported \"\n+\t\t\"on this target\");\n+    }\n+\n   return dispatch_decl;\n }\n "}, {"sha": "d6e47a70e7a82bb80224356fd38398099633c6bc", "filename": "gcc/config/linux-android.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f251a053530659d49b88663f30ec902c6851e92/gcc%2Fconfig%2Flinux-android.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f251a053530659d49b88663f30ec902c6851e92/gcc%2Fconfig%2Flinux-android.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Flinux-android.c?ref=2f251a053530659d49b88663f30ec902c6851e92", "patch": "@@ -0,0 +1,33 @@\n+/* Functions for Linux Android as target machine for GNU C compiler.\n+   Copyright (C) 2013.\n+   Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tm.h\"\n+#include \"linux-protos.h\"\n+\n+/* Android does not support GNU indirect functions.  */\n+\n+bool\n+linux_android_has_ifunc_p (void)\n+{\n+  return TARGET_ANDROID ? false : HAVE_GNU_INDIRECT_FUNCTION;\n+}"}, {"sha": "831a19c416e272d6b6b0e2a7323b89514ea5404e", "filename": "gcc/config/linux-android.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f251a053530659d49b88663f30ec902c6851e92/gcc%2Fconfig%2Flinux-android.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f251a053530659d49b88663f30ec902c6851e92/gcc%2Fconfig%2Flinux-android.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Flinux-android.h?ref=2f251a053530659d49b88663f30ec902c6851e92", "patch": "@@ -57,3 +57,6 @@\n \n #define ANDROID_ENDFILE_SPEC \\\n   \"%{shared: crtend_so%O%s;: crtend_android%O%s}\"\n+\n+#undef TARGET_HAS_IFUNC_P\n+#define TARGET_HAS_IFUNC_P linux_android_has_ifunc_p"}, {"sha": "3f926e5dffd33a74a4d7be1c50f3b012eb14208f", "filename": "gcc/config/linux-protos.h", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f251a053530659d49b88663f30ec902c6851e92/gcc%2Fconfig%2Flinux-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f251a053530659d49b88663f30ec902c6851e92/gcc%2Fconfig%2Flinux-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Flinux-protos.h?ref=2f251a053530659d49b88663f30ec902c6851e92", "patch": "@@ -0,0 +1,21 @@\n+/* Prototypes.\n+   Copyright (C) 2013.\n+   Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+extern bool linux_android_has_ifunc_p (void);"}, {"sha": "6f9b03330a740a9868875a73a87119c4d32b3112", "filename": "gcc/config/t-linux-android", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f251a053530659d49b88663f30ec902c6851e92/gcc%2Fconfig%2Ft-linux-android", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f251a053530659d49b88663f30ec902c6851e92/gcc%2Fconfig%2Ft-linux-android", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ft-linux-android?ref=2f251a053530659d49b88663f30ec902c6851e92", "patch": "@@ -0,0 +1,23 @@\n+# Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2013\n+# Free Software Foundation, Inc.\n+#\n+# This file is part of GCC.\n+#\n+# GCC is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3, or (at your option)\n+# any later version.\n+#\n+# GCC is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+linux-android.o: $(srcdir)/config/linux-android.c $(CONFIG_H) $(SYSTEM_H) \\\n+  coretypes.h $(TM_H) $(TM_P_H)\n+\t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n+\t\t$(srcdir)/config/linux-android.c"}, {"sha": "3db6a77c315365ba5d4305d52254bc17feb8a234", "filename": "gcc/configure", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f251a053530659d49b88663f30ec902c6851e92/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f251a053530659d49b88663f30ec902c6851e92/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=2f251a053530659d49b88663f30ec902c6851e92", "patch": "@@ -22055,11 +22055,14 @@ else\n   enable_gnu_indirect_function=\"$default_gnu_indirect_function\"\n fi\n \n-if test x$enable_gnu_indirect_function = xyes; then\n \n-$as_echo \"#define HAVE_GNU_INDIRECT_FUNCTION 1\" >>confdefs.h\n+gif=`if test x$enable_gnu_indirect_function = xyes; then echo 1; else echo 0; fi`\n+\n+cat >>confdefs.h <<_ACEOF\n+#define HAVE_GNU_INDIRECT_FUNCTION $gif\n+_ACEOF\n+\n \n-fi\n \n if test $in_tree_ld != yes ; then\n   ld_ver=`$gcc_cv_ld --version 2>/dev/null | sed 1q`"}, {"sha": "e9ad74c642dc6a07c3ca10df366b609a9b839ae4", "filename": "gcc/configure.ac", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f251a053530659d49b88663f30ec902c6851e92/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f251a053530659d49b88663f30ec902c6851e92/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=2f251a053530659d49b88663f30ec902c6851e92", "patch": "@@ -2299,10 +2299,11 @@ AC_ARG_ENABLE(gnu-indirect-function,\n Valid choices are 'yes' and 'no'.]) ;;\n   esac],\n  [enable_gnu_indirect_function=\"$default_gnu_indirect_function\"])\n-if test x$enable_gnu_indirect_function = xyes; then\n-  AC_DEFINE(HAVE_GNU_INDIRECT_FUNCTION, 1,\n-   [Define if your system supports gnu indirect functions.])\n-fi\n+\n+gif=`if test x$enable_gnu_indirect_function = xyes; then echo 1; else echo 0; fi`\n+AC_DEFINE_UNQUOTED(HAVE_GNU_INDIRECT_FUNCTION, $gif,\n+[Define if your system supports gnu indirect functions.])\n+\n \n changequote(,)dnl\n if test $in_tree_ld != yes ; then"}, {"sha": "9f78ae4a46aee60e98d73f3fa0a97e7d7d3037eb", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f251a053530659d49b88663f30ec902c6851e92/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f251a053530659d49b88663f30ec902c6851e92/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=2f251a053530659d49b88663f30ec902c6851e92", "patch": "@@ -11341,3 +11341,9 @@ memory model bits are allowed.\n @deftypevr {Target Hook} {unsigned char} TARGET_ATOMIC_TEST_AND_SET_TRUEVAL\n This value should be set if the result written by @code{atomic_test_and_set} is not exactly 1, i.e. the @code{bool} @code{true}.\n @end deftypevr\n+\n+@deftypefn {Target Hook} bool TARGET_HAS_IFUNC_P (void)\n+It returns true if the target supports GNU indirect functions.\n+The support includes the assembler, linker and dynamic linker.\n+The default value of this hook is based on target's libc.\n+@end deftypefn"}, {"sha": "b67df84041e78a1dc1ec94afadd47999b62452cc", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f251a053530659d49b88663f30ec902c6851e92/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f251a053530659d49b88663f30ec902c6851e92/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=2f251a053530659d49b88663f30ec902c6851e92", "patch": "@@ -11177,3 +11177,5 @@ memory model bits are allowed.\n @end deftypefn\n \n @hook TARGET_ATOMIC_TEST_AND_SET_TRUEVAL\n+\n+@hook TARGET_HAS_IFUNC_P"}, {"sha": "3ad587093f180e3a940faf2bfacedd8fc16431ff", "filename": "gcc/target.def", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f251a053530659d49b88663f30ec902c6851e92/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f251a053530659d49b88663f30ec902c6851e92/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=2f251a053530659d49b88663f30ec902c6851e92", "patch": "@@ -1518,6 +1518,15 @@ DEFHOOK\n  bool, (const_rtx x),\n  default_use_anchors_for_symbol_p)\n \n+/* True if target supports indirect functions.  */\n+DEFHOOK\n+(has_ifunc_p,\n+ \"It returns true if the target supports GNU indirect functions.\\n\\\n+The support includes the assembler, linker and dynamic linker.\\n\\\n+The default value of this hook is based on target's libc.\",\n+ bool, (void),\n+ default_has_ifunc_p)\n+\n /* True if it is OK to do sibling call optimization for the specified\n    call expression EXP.  DECL will be the called function, or NULL if\n    this is an indirect call.  */"}, {"sha": "61ca0057ba53079d9b95ecc5e296336facb9566c", "filename": "gcc/targhooks.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f251a053530659d49b88663f30ec902c6851e92/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f251a053530659d49b88663f30ec902c6851e92/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=2f251a053530659d49b88663f30ec902c6851e92", "patch": "@@ -450,6 +450,14 @@ default_fixed_point_supported_p (void)\n   return ENABLE_FIXED_POINT;\n }\n \n+/* True if the target supports GNU indirect functions.  */\n+\n+bool\n+default_has_ifunc_p (void)\n+{\n+  return HAVE_GNU_INDIRECT_FUNCTION;\n+}\n+\n /* NULL if INSN insn is valid within a low-overhead loop, otherwise returns\n    an error message.\n "}, {"sha": "0837c09c324a7f1794227f0a9f7618e6024d0091", "filename": "gcc/targhooks.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f251a053530659d49b88663f30ec902c6851e92/gcc%2Ftarghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f251a053530659d49b88663f30ec902c6851e92/gcc%2Ftarghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.h?ref=2f251a053530659d49b88663f30ec902c6851e92", "patch": "@@ -72,6 +72,8 @@ extern bool targhook_float_words_big_endian (void);\n extern bool default_decimal_float_supported_p (void);\n extern bool default_fixed_point_supported_p (void);\n \n+extern bool default_has_ifunc_p (void);\n+\n extern const char * default_invalid_within_doloop (const_rtx);\n \n extern tree default_builtin_vectorized_function (tree, tree, tree);"}, {"sha": "2532d804214c332fa43170078186ced103e4bc0f", "filename": "gcc/varasm.c", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f251a053530659d49b88663f30ec902c6851e92/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f251a053530659d49b88663f30ec902c6851e92/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=2f251a053530659d49b88663f30ec902c6851e92", "patch": "@@ -5489,14 +5489,15 @@ do_assemble_alias (tree decl, tree target)\n     }\n   if (lookup_attribute (\"ifunc\", DECL_ATTRIBUTES (decl)))\n     {\n-#if defined (ASM_OUTPUT_TYPE_DIRECTIVE) && HAVE_GNU_INDIRECT_FUNCTION\n-      ASM_OUTPUT_TYPE_DIRECTIVE\n-\t(asm_out_file, IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl)),\n-\t IFUNC_ASM_TYPE);\n-#else\n-      error_at (DECL_SOURCE_LOCATION (decl),\n-\t\t\"ifunc is not supported in this configuration\");\n+#if defined (ASM_OUTPUT_TYPE_DIRECTIVE)\n+      if (targetm.has_ifunc_p ())\n+\tASM_OUTPUT_TYPE_DIRECTIVE\n+\t  (asm_out_file, IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl)),\n+\t   IFUNC_ASM_TYPE);\n+      else\n #endif\n+\terror_at (DECL_SOURCE_LOCATION (decl),\n+\t\t  \"ifunc is not supported on this target\");\n     }\n \n # ifdef ASM_OUTPUT_DEF_FROM_DECLS"}]}