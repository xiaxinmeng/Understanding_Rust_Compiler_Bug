{"sha": "7bdd8599b99a80b5930945bb87d1abffba8ee157", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2JkZDg1OTliOTlhODBiNTkzMDk0NWJiODdkMWFiZmZiYThlZTE1Nw==", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-08-04T12:34:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-08-04T12:34:29Z"}, "message": "Merge #606\n\n606: Always check the result of expect_token while parsing r=dkm a=dkm\n\nFrom Mark Wielaard : https://gcc.gnu.org/pipermail/gcc-rust/2021-August/000111.html\r\n\r\n> When expect_token fails it produces an error and return a\r\n> nullptr. Make sure to always check the result of expect_token so we\r\n> don't use a nullptr token and crash.\r\n> \r\n> Resolves: https://github.com/Rust-GCC/gccrs/issues/603\n\nCo-authored-by: Mark Wielaard <mark@klomp.org>\nCo-authored-by: Thomas Schwinge <thomas@codesourcery.com>", "tree": {"sha": "35177429e31831ef2af9c154b0cb03c514850da8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/35177429e31831ef2af9c154b0cb03c514850da8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7bdd8599b99a80b5930945bb87d1abffba8ee157", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhColVCRBK7hj4Ov3rIwAAKAgIAC0Y6fAkSYpSSvzUJvd2g9EH\n30H0jDW5TKjMmJwQBVwZAeCotJo0GbS4Ar/XRICS/wTK2oYLWrBzBbxOxnOAJFqd\nFBhUAy+WCM7YwHe0+VVk7ij8lVm18bKb4uY2MdqjAsSmF1pJAQe5/2vIKEHE6fIi\nt3SWLpwSaIRse6hE2QfeyTMHZ53nyWre8xs4r9gpe2+jmodTkOfWFwIoEYQfqgT5\nUsVqKGMCK4kOGUyxzfzuvq+eRUQhAtnzVn/YI6IZqHyQ7aq9V3fcIdFTzdI7rH7h\n9l9Ulv4Ly98W8ShmQOzyH+R8HL+JPzW34By+LKQOMxc2anCTXw7OfWiQ1XtNmto=\n=efz1\n-----END PGP SIGNATURE-----\n", "payload": "tree 35177429e31831ef2af9c154b0cb03c514850da8\nparent 73271c4ce5d33fe51766ce9cc438cad764bf31c1\nparent 0209c8f6624a287a2e23bfbce70e8729947c43be\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1628080469 +0000\ncommitter GitHub <noreply@github.com> 1628080469 +0000\n\nMerge #606\n\n606: Always check the result of expect_token while parsing r=dkm a=dkm\n\nFrom Mark Wielaard : https://gcc.gnu.org/pipermail/gcc-rust/2021-August/000111.html\r\n\r\n> When expect_token fails it produces an error and return a\r\n> nullptr. Make sure to always check the result of expect_token so we\r\n> don't use a nullptr token and crash.\r\n> \r\n> Resolves: https://github.com/Rust-GCC/gccrs/issues/603\n\nCo-authored-by: Mark Wielaard <mark@klomp.org>\nCo-authored-by: Thomas Schwinge <thomas@codesourcery.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bdd8599b99a80b5930945bb87d1abffba8ee157", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7bdd8599b99a80b5930945bb87d1abffba8ee157", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bdd8599b99a80b5930945bb87d1abffba8ee157/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "73271c4ce5d33fe51766ce9cc438cad764bf31c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73271c4ce5d33fe51766ce9cc438cad764bf31c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73271c4ce5d33fe51766ce9cc438cad764bf31c1"}, {"sha": "0209c8f6624a287a2e23bfbce70e8729947c43be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0209c8f6624a287a2e23bfbce70e8729947c43be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0209c8f6624a287a2e23bfbce70e8729947c43be"}], "stats": {"total": 46, "additions": 46, "deletions": 0}, "files": [{"sha": "acc9d06acd7ec5a9bc53a4457a051707dbc73925", "filename": "gcc/rust/parse/rust-parse-impl.h", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bdd8599b99a80b5930945bb87d1abffba8ee157/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bdd8599b99a80b5930945bb87d1abffba8ee157/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fparse%2Frust-parse-impl.h?ref=7bdd8599b99a80b5930945bb87d1abffba8ee157", "patch": "@@ -1898,6 +1898,9 @@ Parser<ManagedTokenSource>::parse_macro_match_fragment ()\n \n   // get MacroFragSpec for macro\n   const_TokenPtr t = expect_token (IDENTIFIER);\n+  if (t == nullptr)\n+    return nullptr;\n+\n   AST::MacroFragSpec frag = AST::get_frag_spec_from_str (t->get_str ());\n   if (frag == AST::INVALID)\n     {\n@@ -4325,6 +4328,9 @@ Parser<ManagedTokenSource>::parse_enum (AST::Visibility vis,\n \n   // parse enum name\n   const_TokenPtr enum_name_tok = expect_token (IDENTIFIER);\n+  if (enum_name_tok == nullptr)\n+    return nullptr;\n+\n   Identifier enum_name = enum_name_tok->get_str ();\n \n   // parse generic params (of enum container, not enum variants) if they exist\n@@ -4650,6 +4656,9 @@ Parser<ManagedTokenSource>::parse_static_item (AST::Visibility vis,\n     }\n \n   const_TokenPtr ident_tok = expect_token (IDENTIFIER);\n+  if (ident_tok == nullptr)\n+    return nullptr;\n+\n   Identifier ident = ident_tok->get_str ();\n \n   if (!skip_token (COLON))\n@@ -4700,6 +4709,9 @@ Parser<ManagedTokenSource>::parse_trait (AST::Visibility vis,\n \n   // parse trait name\n   const_TokenPtr ident_tok = expect_token (IDENTIFIER);\n+  if (ident_tok == nullptr)\n+    return nullptr;\n+\n   Identifier ident = ident_tok->get_str ();\n \n   // parse generic parameters (if they exist)\n@@ -4805,6 +4817,9 @@ Parser<ManagedTokenSource>::parse_trait_item ()\n \n \t// parse function or method name\n \tconst_TokenPtr ident_tok = expect_token (IDENTIFIER);\n+\tif (ident_tok == nullptr)\n+\t  return nullptr;\n+\n \tIdentifier ident = ident_tok->get_str ();\n \n \t// parse generic params\n@@ -4937,6 +4952,9 @@ Parser<ManagedTokenSource>::parse_trait_type (AST::AttrVec outer_attrs)\n   skip_token (TYPE);\n \n   const_TokenPtr ident_tok = expect_token (IDENTIFIER);\n+  if (ident_tok == nullptr)\n+    return nullptr;\n+\n   Identifier ident = ident_tok->get_str ();\n \n   std::vector<std::unique_ptr<AST::TypeParamBound>> bounds;\n@@ -4973,6 +4991,9 @@ Parser<ManagedTokenSource>::parse_trait_const (AST::AttrVec outer_attrs)\n \n   // parse constant item name\n   const_TokenPtr ident_tok = expect_token (IDENTIFIER);\n+  if (ident_tok == nullptr)\n+    return nullptr;\n+\n   Identifier ident = ident_tok->get_str ();\n \n   if (!skip_token (COLON))\n@@ -5338,6 +5359,9 @@ Parser<ManagedTokenSource>::parse_inherent_impl_function_or_method (\n \n   // parse function or method name\n   const_TokenPtr ident_tok = expect_token (IDENTIFIER);\n+  if (ident_tok == nullptr)\n+    return nullptr;\n+\n   Identifier ident = ident_tok->get_str ();\n \n   // parse generic params\n@@ -14210,6 +14234,9 @@ Parser<ManagedTokenSource>::parse_field_access_expr (\n   /* get field name identifier (assume that this is a field access expr and not\n    * await, for instance) */\n   const_TokenPtr ident_tok = expect_token (IDENTIFIER);\n+  if (ident_tok == nullptr)\n+    return nullptr;\n+\n   Identifier ident = ident_tok->get_str ();\n \n   Location locus = struct_expr->get_locus_slow ();"}, {"sha": "2389fa52bfd1d83dedb1e6c9210b60b0911f7dc8", "filename": "gcc/testsuite/rust/compile/torture/identifier-missing-impl-1.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bdd8599b99a80b5930945bb87d1abffba8ee157/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fidentifier-missing-impl-1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bdd8599b99a80b5930945bb87d1abffba8ee157/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fidentifier-missing-impl-1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fidentifier-missing-impl-1.rs?ref=7bdd8599b99a80b5930945bb87d1abffba8ee157", "patch": "@@ -0,0 +1,19 @@\n+struct I();\n+\n+impl I {\n+    fn () {\n+        // { dg-error {expecting 'identifier' but '\\(' found} \"\" { target *-*-* } .-1 }\n+        // { dg-error {failed to parse inherent impl item in inherent impl} \"\" { target *-*-* } .-2 }\n+        // { dg-error {failed to parse item in crate} \"\" { target *-*-* } .-3 }\n+    }\n+}\n+\n+impl I {\n+    unsafe fn () {\n+        // { dg-error {expecting 'identifier' but '\\(' found} \"\" { xfail *-*-* } .-1 }\n+    }\n+}\n+\n+fn main() {\n+    let _i = I();\n+}"}]}