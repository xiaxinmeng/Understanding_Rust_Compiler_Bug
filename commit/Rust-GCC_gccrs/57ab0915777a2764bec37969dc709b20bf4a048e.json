{"sha": "57ab0915777a2764bec37969dc709b20bf4a048e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTdhYjA5MTU3NzdhMjc2NGJlYzM3OTY5ZGM3MDliMjBiZjRhMDQ4ZQ==", "commit": {"author": {"name": "Dominik Vogt", "email": "vogt@linux.vnet.ibm.com", "date": "2014-11-04T00:00:14Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2014-11-04T00:00:14Z"}, "message": "godump.c (go_format_type): Rewrite RECORD_TYPE nad UNION_TYPE support with -fdump-go-spec.\n\ngcc/:\n\t* godump.c (go_format_type): Rewrite RECORD_TYPE nad UNION_TYPE support\n\twith -fdump-go-spec.  Anonymous substructures are now flattened and\n\treplaced by their fields (record) or the first named, non-bitfield\n\tfield (union).\ngcc/testsuite/:\n\t* build-go/gcc/testsuite/gcc/godump-1.out: Update godump tests.\n\nFrom-SVN: r217058", "tree": {"sha": "9d03ae1e22beee0a3a9a62eeb1dcca050aab4b55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9d03ae1e22beee0a3a9a62eeb1dcca050aab4b55"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/57ab0915777a2764bec37969dc709b20bf4a048e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57ab0915777a2764bec37969dc709b20bf4a048e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57ab0915777a2764bec37969dc709b20bf4a048e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57ab0915777a2764bec37969dc709b20bf4a048e/comments", "author": {"login": "vogtd", "id": 9690100, "node_id": "MDQ6VXNlcjk2OTAxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/9690100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vogtd", "html_url": "https://github.com/vogtd", "followers_url": "https://api.github.com/users/vogtd/followers", "following_url": "https://api.github.com/users/vogtd/following{/other_user}", "gists_url": "https://api.github.com/users/vogtd/gists{/gist_id}", "starred_url": "https://api.github.com/users/vogtd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vogtd/subscriptions", "organizations_url": "https://api.github.com/users/vogtd/orgs", "repos_url": "https://api.github.com/users/vogtd/repos", "events_url": "https://api.github.com/users/vogtd/events{/privacy}", "received_events_url": "https://api.github.com/users/vogtd/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e1f0c17813565bdbecd57df766363e67c8a9b950", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1f0c17813565bdbecd57df766363e67c8a9b950", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1f0c17813565bdbecd57df766363e67c8a9b950"}], "stats": {"total": 1043, "additions": 708, "deletions": 335}, "files": [{"sha": "21ad41fb0256271f09667cf5c3bffe10691a5497", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57ab0915777a2764bec37969dc709b20bf4a048e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57ab0915777a2764bec37969dc709b20bf4a048e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=57ab0915777a2764bec37969dc709b20bf4a048e", "patch": "@@ -1,3 +1,10 @@\n+2014-11-03  Dominik Vogt  <vogt@linux.vnet.ibm.com>\n+\n+\t* godump.c (go_format_type): Rewrite RECORD_TYPE nad UNION_TYPE support\n+\twith -fdump-go-spec.  Anonymous substructures are now flattened and\n+\treplaced by their fields (record) or the first named, non-bitfield\n+\tfield (union).\n+\n 2014-11-04  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n \n \t* input.c (expand_location_to_spelling_point): Fix typo."}, {"sha": "7c386c49cc7352738c43e725041f4c14c9889123", "filename": "gcc/godump.c", "status": "modified", "additions": 93, "deletions": 90, "changes": 183, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57ab0915777a2764bec37969dc709b20bf4a048e/gcc%2Fgodump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57ab0915777a2764bec37969dc709b20bf4a048e/gcc%2Fgodump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgodump.c?ref=57ab0915777a2764bec37969dc709b20bf4a048e", "patch": "@@ -678,11 +678,13 @@ go_force_record_alignment (struct obstack *ob, const char *type_string,\n \n static bool\n go_format_type (struct godump_container *container, tree type,\n-\t\tbool use_type_name, bool is_func_ok, unsigned int *p_art_i)\n+\t\tbool use_type_name, bool is_func_ok, unsigned int *p_art_i,\n+\t\tbool is_anon_record_or_union)\n {\n   bool ret;\n   struct obstack *ob;\n   unsigned int art_i_dummy;\n+  bool is_union = false;\n \n   if (p_art_i == NULL)\n     {\n@@ -856,7 +858,7 @@ go_format_type (struct godump_container *container, tree type,\n       else\n \t{\n \t  if (!go_format_type (container, TREE_TYPE (type), use_type_name,\n-\t\t\t       true, NULL))\n+\t\t\t       true, NULL, false))\n \t    ret = false;\n \t}\n       break;\n@@ -882,67 +884,97 @@ go_format_type (struct godump_container *container, tree type,\n \tobstack_1grow (ob, '0');\n       obstack_1grow (ob, ']');\n       if (!go_format_type (container, TREE_TYPE (type), use_type_name, false,\n-\t\t\t   NULL))\n+\t\t\t   NULL, false))\n \tret = false;\n       break;\n \n+    case UNION_TYPE:\n+      is_union = true;\n+      /* Fall through to RECORD_TYPE case.  */\n     case RECORD_TYPE:\n       {\n \tunsigned int prev_field_end;\n-\tunsigned int most_strict_known_alignment;\n+\tunsigned int known_alignment;\n \ttree field;\n+\tbool emitted_a_field;\n \n \t/* FIXME: Why is this necessary?  Without it we can get a core\n \t   dump on the s390x headers, or from a file containing simply\n \t   \"typedef struct S T;\".  */\n \tlayout_type (type);\n \n \tprev_field_end = 0;\n-\tmost_strict_known_alignment = 1;\n-\tobstack_grow (ob, \"struct { \", 9);\n-\tfor (field = TYPE_FIELDS (type);\n+\tknown_alignment = 1;\n+\t/* Anonymous records and unions are flattened, i.e. they are not put\n+\t   into \"struct { ... }\".  */\n+\tif (!is_anon_record_or_union)\n+\t  obstack_grow (ob, \"struct { \", 9);\n+\tfor (field = TYPE_FIELDS (type), emitted_a_field = false;\n \t     field != NULL_TREE;\n \t     field = TREE_CHAIN (field))\n \t  {\n-\t    bool field_ok;\n-\n \t    if (TREE_CODE (field) != FIELD_DECL)\n \t      continue;\n-\t    field_ok = true;\n \t    if (DECL_BIT_FIELD (field))\n+\t      /* Bit fields are replaced by padding.  */\n \t      continue;\n-\t    else\n-              {\n+\t    /* Only the first non-bitfield field is emitted for unions.  */\n+\t    if (!is_union || !emitted_a_field)\n+\t      {\n+\t\t/* Emit the field.  */\n+\t\tbool field_ok;\n+\t\tbool is_anon_substructure;\n+\t\tunsigned int decl_align_unit;\n+\t\tunsigned int decl_offset;\n+\n+\t\tfield_ok = true;\n+\t\temitted_a_field = true;\n+\t\tis_anon_substructure =\n+\t\t  (DECL_NAME (field) == NULL\n+\t\t   && (TREE_CODE (TREE_TYPE (field)) == RECORD_TYPE\n+\t\t       || TREE_CODE (TREE_TYPE (field)) == UNION_TYPE));\n+\t\t/* Keep track of the alignment of named substructures, either\n+\t\t   of the whole record, or the alignment of the emitted field\n+\t\t   (for unions).  */\n+\t\tdecl_align_unit = DECL_ALIGN_UNIT (field);\n+\t\tif (!is_anon_substructure && decl_align_unit > known_alignment)\n+\t\t  known_alignment = decl_align_unit;\n+\t\t/* Pad to start of field.  */\n+\t\tdecl_offset =\n+\t\t  TREE_INT_CST_LOW (DECL_FIELD_OFFSET (field))\n+\t\t  + precision_to_units\n+\t\t  (TREE_INT_CST_LOW (DECL_FIELD_BIT_OFFSET (field)));\n \t\t{\n-\t\t  unsigned int decl_align_unit;\n-\t\t  unsigned int decl_offset;\n-\n-\t\t  decl_align_unit = DECL_ALIGN_UNIT (field);\n-\t\t  decl_offset =\n-\t\t    TREE_INT_CST_LOW (DECL_FIELD_OFFSET (field))\n-\t\t    + precision_to_units\n-\t\t    (TREE_INT_CST_LOW (DECL_FIELD_BIT_OFFSET (field)));\n-\t\t  if (decl_align_unit > most_strict_known_alignment)\n-\t\t    most_strict_known_alignment = decl_align_unit;\n+\t\t  unsigned int align_unit;\n+\n+\t\t  /* For anonymous records and unions there is no automatic\n+\t\t     structure alignment, so use 1 as the alignment.  */\n+\t\t  align_unit = (is_anon_substructure) ? 1 : decl_align_unit;\n \t\t  *p_art_i = go_append_padding\n-\t\t    (ob, prev_field_end, decl_offset, decl_align_unit, *p_art_i,\n+\t\t    (ob, prev_field_end, decl_offset, align_unit, *p_art_i,\n \t\t     &prev_field_end);\n-\t\t  if (DECL_SIZE_UNIT (field))\n-\t\t    prev_field_end += TREE_INT_CST_LOW (DECL_SIZE_UNIT (field));\n \t\t}\n-\t\tif (DECL_NAME (field) == NULL)\n-\t\t  *p_art_i = go_append_artificial_name (ob, *p_art_i);\n-\t\telse\n-\t\t  go_append_decl_name (ob, field, container->keyword_hash);\n-\t\tobstack_1grow (ob, ' ');\n-\n-\t\t/* Do not expand type if a record or union type or a\n-\t\t   function pointer.  */\n+\t\tif (DECL_SIZE_UNIT (field))\n+\t\t  prev_field_end +=\n+\t\t    TREE_INT_CST_LOW (DECL_SIZE_UNIT (field));\n+\t\t/* Emit the field name, but not for anonymous records and\n+\t\t   unions.  */\n+\t\tif (!is_anon_substructure)\n+\t\t  {\n+\t\t    if ((DECL_NAME (field) == NULL))\n+\t\t      *p_art_i = go_append_artificial_name (ob, *p_art_i);\n+\t\t    else\n+\t\t      go_append_decl_name\n+\t\t\t(ob, field, container->keyword_hash);\n+\t\t    obstack_1grow (ob, ' ');\n+\t\t  }\n+\t\t/* Do not expand type if a record or union type or a function\n+\t\t   pointer.  */\n \t\tif (TYPE_NAME (TREE_TYPE (field)) != NULL_TREE\n \t\t    && (RECORD_OR_UNION_TYPE_P (TREE_TYPE (field))\n \t\t\t|| (POINTER_TYPE_P (TREE_TYPE (field))\n \t\t\t    && (TREE_CODE (TREE_TYPE (TREE_TYPE (field)))\n-                                == FUNCTION_TYPE))))\n+\t\t\t\t== FUNCTION_TYPE))))\n \t\t  {\n \t\t    tree name;\n \t\t    void **slot;\n@@ -961,24 +993,27 @@ go_format_type (struct godump_container *container, tree type,\n \t\telse\n \t\t  {\n \t\t    if (!go_format_type (container, TREE_TYPE (field), true,\n-\t\t\t\t\t false, p_art_i))\n+\t\t\t\t\t false, p_art_i, is_anon_substructure))\n \t\t      field_ok = false;\n \t\t  }\n-\t\tobstack_grow (ob, \"; \", 2);\n-              }\n-\t    if (!field_ok)\n-\t      ret = false;\n+\t\tif (!is_anon_substructure)\n+\t\t  obstack_grow (ob, \"; \", 2);\n+\t\tif (!field_ok)\n+\t\t  ret = false;\n+\t      }\n \t  }\n-\t/* Alignment and padding as necessary.  */\n+\t/* Padding.  */\n \t{\n-\t  unsigned int type_align_unit;\n+\t  unsigned int align_unit;\n \n-\t  type_align_unit = TYPE_ALIGN_UNIT (type);\n-\t  /* Padding.  */\n+\t  align_unit = (is_anon_record_or_union) ? 1 : TYPE_ALIGN_UNIT (type);\n \t  *p_art_i = go_append_padding\n \t    (ob, prev_field_end, TREE_INT_CST_LOW (TYPE_SIZE_UNIT (type)),\n-\t     type_align_unit, *p_art_i, &prev_field_end);\n-\t  if (most_strict_known_alignment < type_align_unit)\n+\t     align_unit, *p_art_i, &prev_field_end);\n+\t}\n+\t/* Alignment.  */\n+\tif (!is_anon_record_or_union\n+\t    && known_alignment < TYPE_ALIGN_UNIT (type))\n \t  {\n \t    const char *s;\n \t    char buf[100];\n@@ -995,46 +1030,10 @@ go_format_type (struct godump_container *container, tree type,\n \t      }\n \t    *p_art_i = go_force_record_alignment (ob, s, *p_art_i, buf);\n \t  }\n-\t}\n-\tobstack_1grow (ob, '}');\n+\tif (!is_anon_record_or_union)\n+\t  obstack_1grow (ob, '}');\n       }\n-      break;\n-\n-    case UNION_TYPE:\n-      {\n-\tconst char *s;\n-\tunsigned int sz_units;\n-\n-\tlayout_type (type);\n-\tsz_units = TREE_INT_CST_LOW (TYPE_SIZE_UNIT (type));\n-\ts = go_get_uinttype_for_precision (TYPE_ALIGN (type), true);\n-\tobstack_grow (ob, \"struct { \", 9);\n-\tif (s == NULL)\n-\t  {\n-\t    ret = false;\n-\t    s = \"INVALID-union-alignment\";\n-\t    obstack_grow (ob, s, strlen (s));\n-\t  }\n-\telse\n-\t  {\n-\t    char buf[100];\n-\t    tree field;\n-\n-\t    field = TYPE_FIELDS (type);\n-\t    /* Use the same index as the byte field's artificial name for\n-\t       padding.  */\n-\t    if (field != NULL_TREE && DECL_NAME (field) != NULL)\n-\t      go_append_decl_name (ob, field, container->keyword_hash);\n-\t    else\n-\t      *p_art_i = go_append_artificial_name (ob, *p_art_i);\n-\t    snprintf (buf, sizeof buf, \" [%u]byte; \", sz_units);\n-\t    obstack_grow (ob, buf, strlen (buf));\n-\t    if (TYPE_ALIGN_UNIT (type) > 1)\n-\t      *p_art_i = go_force_record_alignment (ob, s, *p_art_i, NULL);\n-\t  }\n-\tobstack_1grow (ob, '}');\n-      }\n-      break;\n+    break;\n \n     case FUNCTION_TYPE:\n       {\n@@ -1061,7 +1060,7 @@ go_format_type (struct godump_container *container, tree type,\n \t      break;\n \t    if (seen_arg)\n \t      obstack_grow (ob, \", \", 2);\n-\t    if (!go_format_type (container, arg_type, true, false, NULL))\n+\t    if (!go_format_type (container, arg_type, true, false, NULL, false))\n \t      ret = false;\n \t    seen_arg = true;\n \t  }\n@@ -1077,7 +1076,8 @@ go_format_type (struct godump_container *container, tree type,\n \tif (!VOID_TYPE_P (result))\n \t  {\n \t    obstack_1grow (ob, ' ');\n-\t    if (!go_format_type (container, result, use_type_name, false, NULL))\n+\t    if (!go_format_type (container, result, use_type_name, false, NULL,\n+\t\t\t\t false))\n \t      ret = false;\n \t  }\n       }\n@@ -1111,7 +1111,7 @@ go_output_type (struct godump_container *container)\n static void\n go_output_fndecl (struct godump_container *container, tree decl)\n {\n-  if (!go_format_type (container, TREE_TYPE (decl), false, true, NULL))\n+  if (!go_format_type (container, TREE_TYPE (decl), false, true, NULL, false))\n     fprintf (go_dump_file, \"// \");\n   fprintf (go_dump_file, \"func _%s \",\n \t   IDENTIFIER_POINTER (DECL_NAME (decl)));\n@@ -1186,7 +1186,8 @@ go_output_typedef (struct godump_container *container, tree decl)\n \treturn;\n       *slot = CONST_CAST (void *, (const void *) type);\n \n-      if (!go_format_type (container, TREE_TYPE (decl), false, false, NULL))\n+      if (!go_format_type (container, TREE_TYPE (decl), false, false, NULL,\n+\t\t\t   false))\n \t{\n \t  fprintf (go_dump_file, \"// \");\n \t  slot = htab_find_slot (container->invalid_hash, type, INSERT);\n@@ -1222,7 +1223,8 @@ go_output_typedef (struct godump_container *container, tree decl)\n          return;\n        *slot = CONST_CAST (void *, (const void *) type);\n \n-       if (!go_format_type (container, TREE_TYPE (decl), false, false, NULL))\n+       if (!go_format_type (container, TREE_TYPE (decl), false, false, NULL,\n+\t\t\t    false))\n \t {\n \t   fprintf (go_dump_file, \"// \");\n \t   slot = htab_find_slot (container->invalid_hash, type, INSERT);\n@@ -1285,7 +1287,8 @@ go_output_var (struct godump_container *container, tree decl)\n \t\t\t\t NO_INSERT) != NULL;\n     }\n   else\n-    is_valid = go_format_type (container, TREE_TYPE (decl), true, false, NULL);\n+    is_valid = go_format_type (container, TREE_TYPE (decl), true, false, NULL,\n+\t\t\t       false);\n   if (is_valid\n       && htab_find_slot (container->type_hash,\n \t\t\t IDENTIFIER_POINTER (DECL_NAME (decl)),"}, {"sha": "5c16ebee6a8e91a50592ea65727ee51cabc7afcb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57ab0915777a2764bec37969dc709b20bf4a048e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57ab0915777a2764bec37969dc709b20bf4a048e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=57ab0915777a2764bec37969dc709b20bf4a048e", "patch": "@@ -1,3 +1,7 @@\n+2014-11-03  Dominik Vogt  <vogt@linux.vnet.ibm.com>\n+\n+\t* build-go/gcc/testsuite/gcc/godump-1.out: Update godump tests.\n+\n 2014-11-03  Tobias Burnus  <burnus@net-b.de>\n \n \t* gfortran.dg/coarray_collectives_14.f90: Fix testcase."}, {"sha": "e1f18b966739c60a2124a761c1e782e4adcdfec5", "filename": "gcc/testsuite/gcc.misc-tests/godump-1.c", "status": "modified", "additions": 604, "deletions": 245, "changes": 849, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57ab0915777a2764bec37969dc709b20bf4a048e/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fgodump-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57ab0915777a2764bec37969dc709b20bf4a048e/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fgodump-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fgodump-1.c?ref=57ab0915777a2764bec37969dc709b20bf4a048e", "patch": "@@ -7,236 +7,647 @@\n \n #include <stdint.h>\n \n-/* integer based types */\n+/* Necessary quoting in the regexp patters:\n+\n+     (?n) at beginning of pattern to make ^ and $ work.\n+     \"     ->  \\\"\n+     *, +  ->  \"*\", \"+\"\n+     [, ]  ->  \"\\[\", \"\\]\"\n+     (, )  ->  \"\\[(\\]\", \"\\[)\\]\"\n+     {, }  ->  \"\\{\", \"\\}\"\n+*/\n+\n+/*** integer based types ***/\n typedef char c_t;\n+/* { dg-final { scan-file godump-1.out \"(?n)^type _c_t u?int8$\" } } */\n+\n char c_v1;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _c_v1 u?int\\[0-9\\]*$\" } } */\n+\n c_t c_v2;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _c_v2 _c_t$\" } } */\n+\n typedef short s_t;\n+/* { dg-final { scan-file godump-1.out \"(?n)^type _s_t int\\[0-9\\]*$\" } } */\n+\n short s_v1;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _s_v1 int\\[0-9\\]*$\" } } */\n+\n s_t s_v2;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _s_v2 _s_t$\" } } */\n+\n typedef int i_t;\n+/* { dg-final { scan-file godump-1.out \"(?n)^type _i_t int\\[0-9\\]*$\" } } */\n+\n int i_v1;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _i_v1 int\\[0-9\\]*$\" } } */\n+\n i_t i_v2;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _i_v2 _i_t$\" } } */\n+\n typedef long l_t;\n+/* { dg-final { scan-file godump-1.out \"(?n)^type _l_t int\\[0-9\\]*$\" } } */\n+\n long l_v1;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _l_v1 int\\[0-9\\]*$\" } } */\n+\n l_t l_v2;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _l_v2 _l_t$\" } } */\n+\n typedef long long ll_t;\n+/* { dg-final { scan-file godump-1.out \"(?n)^type _ll_t int\\[0-9\\]*$\" } } */\n+\n long long ll_v1;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _ll_v1 int\\[0-9\\]*$\" } } */\n+\n ll_t ll_v2;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _ll_v2 _ll_t$\" } } */\n+\n typedef unsigned char uc_t;\n+/* { dg-final { scan-file godump-1.out \"(?n)^type _uc_t uint8$\" } } */\n+\n unsigned char uc_v1;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _uc_v1 uint\\[0-9\\]*$\" } } */\n+\n uc_t uc_v2;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _uc_v2 _uc_t$\" } } */\n+\n typedef unsigned short us_t;\n+/* { dg-final { scan-file godump-1.out \"(?n)^type _us_t uint\\[0-9\\]*$\" } } */\n+\n unsigned short us_v1;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _us_v1 uint\\[0-9\\]*$\" } } */\n+\n us_t us_v2;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _us_v2 _us_t$\" } } */\n+\n typedef unsigned int ui_t;\n+/* { dg-final { scan-file godump-1.out \"(?n)^type _ui_t uint\\[0-9\\]*$\" } } */\n+\n unsigned int ui_v1;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _ui_v1 uint\\[0-9\\]*$\" } } */\n+\n ui_t ui_v2;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _ui_v2 _ui_t$\" } } */\n+\n typedef unsigned long ul_t;\n+/* { dg-final { scan-file godump-1.out \"(?n)^type _ul_t uint\\[0-9\\]*$\" } } */\n+\n unsigned long ul_v1;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _ul_v1 uint\\[0-9\\]*$\" } } */\n+\n ul_t ul_v2;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _ul_v2 _ul_t$\" } } */\n+\n typedef unsigned long long ull_t;\n+/* { dg-final { scan-file godump-1.out \"(?n)^type _ull_t uint\\[0-9\\]*$\" } } */\n+\n unsigned long long ull_v1;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _ull_v1 uint\\[0-9\\]*$\" } } */\n+\n ull_t ull_v2;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _ull_v2 _ull_t$\" } } */\n+\n typedef signed char sc_t;\n+/* { dg-final { scan-file godump-1.out \"(?n)^type _sc_t int8$\" } } */\n+\n signed char sc_v1;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _sc_v1 int\\[0-9\\]*$\" } } */\n+\n sc_t sc_v2;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _sc_v2 _sc_t$\" } } */\n+\n typedef signed short ss_t;\n+/* { dg-final { scan-file godump-1.out \"(?n)^type _ss_t int\\[0-9\\]*$\" } } */\n+\n signed short ss_v1;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _ss_v1 int\\[0-9\\]*$\" } } */\n+\n ss_t ss_v2;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _ss_v2 _ss_t$\" } } */\n+\n typedef signed int si_t;\n+/* { dg-final { scan-file godump-1.out \"(?n)^type _si_t int\\[0-9\\]*$\" } } */\n+\n signed int si_v1;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _si_v1 int\\[0-9\\]*$\" } } */\n+\n si_t si_v2;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _si_v2 _si_t$\" } } */\n+\n typedef signed long sl_t;\n+/* { dg-final { scan-file godump-1.out \"(?n)^type _sl_t int\\[0-9\\]*$\" } } */\n+\n signed long sl_v1;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _sl_v1 int\\[0-9\\]*$\" } } */\n+\n sl_t sl_v2;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _sl_v2 _sl_t$\" } } */\n+\n typedef signed long long sll_t;\n+/* { dg-final { scan-file godump-1.out \"(?n)^type _sll_t int\\[0-9\\]*$\" } } */\n+\n signed long long sll_v1;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _sll_v1 int\\[0-9\\]*$\" } } */\n+\n sll_t sll_v2;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _sll_v2 _sll_t$\" } } */\n+\n typedef int8_t i8_t;\n+/* { dg-final { scan-file godump-1.out \"(?n)^type _i8_t int8$\" } } */\n+\n int8_t i8_v1;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _i8_v1 _int8_t$\" } } */\n+\n i8_t i8_v2;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _i8_v2 _i8_t$\" } } */\n+\n typedef int16_t i16_t;\n+/* { dg-final { scan-file godump-1.out \"(?n)^type _i16_t int16$\" } } */\n+\n int16_t i16_v1;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _i16_v1 _int16_t$\" } } */\n+\n i16_t i16_v2;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _i16_v2 _i16_t$\" } } */\n+\n typedef int32_t i32_t;\n+/* { dg-final { scan-file godump-1.out \"(?n)^type _i32_t int32$\" } } */\n+\n int32_t i32_v1;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _i32_v1 _int32_t$\" } } */\n+\n i32_t i32_v2;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _i32_v2 _i32_t$\" } } */\n+\n typedef int64_t i64_t;\n+/* { dg-final { scan-file godump-1.out \"(?n)^type _i64_t int64$\" } } */\n+\n int64_t i64_v1;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _i64_v1 _int64_t$\" } } */\n+\n i64_t i64_v2;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _i64_v2 _i64_t$\" } } */\n+\n typedef uint8_t ui8_t;\n+/* { dg-final { scan-file godump-1.out \"(?n)^type _ui8_t uint8$\" } } */\n+\n uint8_t ui8_v1;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _ui8_v1 _uint8_t$\" } } */\n+\n ui8_t ui8_v2;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _ui8_v2 _ui8_t$\" } } */\n+\n typedef uint16_t iu16_t;\n+/* { dg-final { scan-file godump-1.out \"(?n)^type _iu16_t uint16$\" } } */\n+\n uint16_t iu16_v1;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _iu16_v1 _uint16_t$\" } } */\n+\n iu16_t iu16_v2;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _iu16_v2 _iu16_t$\" } } */\n+\n typedef uint32_t iu32_t;\n+/* { dg-final { scan-file godump-1.out \"(?n)^type _iu32_t uint32$\" } } */\n+\n uint32_t iu32_v1;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _iu32_v1 _uint32_t$\" } } */\n+\n iu32_t iu32_v2;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _iu32_v2 _iu32_t$\" } } */\n+\n typedef uint64_t iu64_t;\n+/* { dg-final { scan-file godump-1.out \"(?n)^type _iu64_t uint64$\" } } */\n+\n uint64_t iu64_v1;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _iu64_v1 _uint64_t$\" } } */\n+\n iu64_t iu64_v2;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _iu64_v2 _iu64_t$\" } } */\n+\n typedef const char cc_t;\n+/* { dg-final { scan-file godump-1.out \"(?n)^type _cc_t u?int8$\" } } */\n+\n const char cc_v1;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _cc_v1 u?int8$\" } } */\n+\n cc_t cc_v2;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _cc_v2 _cc_t$\" } } */\n \n-/* pointer and array types */\n+\n+/*** pointer and array types ***/\n typedef void *vp_t;\n+/* { dg-final { scan-file godump-1.out \"(?n)^type _vp_t \\\\*byte$\" } } */\n+\n void *vp_v1;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _vp_v1 \\\\*byte$\" } } */\n+\n vp_t vp_v2;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _vp_v2 _vp_t$\" } } */\n+\n typedef int **ipp_t;\n+/* { dg-final { scan-file godump-1.out \"(?n)^type _ipp_t \\\\*\\\\*int\\[0-9\\]*$\" } } */\n+\n int **ipp_v1;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _ipp_v1 \\\\*\\\\*int\\[0-9\\]*$\" } } */\n+\n ipp_t ipp_v2;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _ipp_v2 _ipp_t$\" } } */\n+\n typedef char ca_t[];\n+/* { dg-final { scan-file godump-1.out \"(?n)^type _ca_t \\\\\\[0\\\\\\]u?int8$\" } } */\n+\n char ca_v1[]; /* { dg-warning \"array 'ca_v1' assumed to have one element\" } */\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _ca_v1 \\\\\\[0\\\\+1\\\\\\]u?int8$\" } } */\n+\n char ca_v1b[2];\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _ca_v1b \\\\\\[1\\\\+1\\\\\\]u?int8$\" } } */\n+\n ca_t ca_v2; /* { dg-warning \"array 'ca_v2' assumed to have one element\" } */\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _ca_v2 \\\\\\[0\\\\+1\\\\\\]u?int8$\" } } */\n+\n typedef short sa2_t[2];\n+/* { dg-final { scan-file godump-1.out \"(?n)^type _sa2_t \\\\\\[1\\\\+1\\\\\\]int\\[0-9\\]*$\" } } */\n+\n short sa2_v1[2];\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _sa2_v1 \\\\\\[1\\\\+1\\\\\\]int\\[0-9\\]*$\" } } */\n+\n sa2_t sa2_v2;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _sa2_v2 _sa2_t$\" } } */\n \n-/* floating point types */\n+\n+/*** floating point types ***/\n typedef float f_t;\n+/* { dg-final { scan-file godump-1.out \"(?n)^type _f_t float\\[0-9\\]*$\" } } */\n+\n float f_v1;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _f_v1 float\\[0-9\\]*$\" } } */\n+\n f_t f_v2;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _f_v2 _f_t$\" } } */\n+\n typedef double d_t;\n+/* { dg-final { scan-file godump-1.out \"(?n)^type _d_t float\\[0-9\\]*$\" } } */\n+\n double d_v1;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _d_v1 float\\[0-9\\]*$\" } } */\n+\n d_t d_v2;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _d_v2 _d_t$\" } } */\n+\n typedef long double ld_t;\n+/* { dg-final { scan-file godump-1.out \"(?n)^// type _ld_t INVALID-float-\\[0-9\\]*$\" } } */\n+\n long double ld_v1;\n+/* { dg-final { scan-file godump-1.out \"(?n)^// var _ld_v1 INVALID-float-\\[0-9\\]*$\" } } */\n+\n ld_t ld_v2;\n+/* { dg-final { scan-file godump-1.out \"(?n)^// var _ld_v2 INVALID-float-\\[0-9\\]*$\" } } */\n+\n+/*** complex types ***/\n typedef _Complex cx_t;\n+/* { dg-final { scan-file godump-1.out \"(?n)^type _cx_t complex\\[0-9\\]*$\" } } */\n+\n _Complex cx_v1;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _cx_v1 complex\\[0-9\\]*$\" } } */\n+\n cx_t cx_v2;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _cx_v2 _cx_t$\" } } */\n+\n typedef float _Complex fcx_t;\n+/* { dg-final { scan-file godump-1.out \"(?n)^type _fcx_t complex\\[0-9\\]*$\" } } */\n+\n float _Complex fcx_v1;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _fcx_v1 complex\\[0-9\\]*$\" } } */\n+\n fcx_t fcx_v2;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _fcx_v2 _fcx_t$\" } } */\n+\n typedef double _Complex dcx_t;\n+/* { dg-final { scan-file godump-1.out \"(?n)^type _dcx_t complex\\[0-9\\]*$\" } } */\n+\n double _Complex dcx_v1;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _dcx_v1 complex\\[0-9\\]*$\" } } */\n+\n dcx_t dcx_v2;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _dcx_v2 _dcx_t$\" } } */\n+\n typedef long double _Complex ldcx_t;\n+/* { dg-final { scan-file godump-1.out \"(?n)^// type _ldcx_t INVALID-complex-\\[0-9\\]*$\" } } */\n+\n long double _Complex ldcx_v1;\n+/* { dg-final { scan-file godump-1.out \"(?n)^// var _ldcx_v1 INVALID-complex-\\[0-9\\]*$\" } } */\n+\n ldcx_t ldcx_v2;\n+/* { dg-final { scan-file godump-1.out \"(?n)^// var _ldcx_v2 INVALID-complex-\\[0-9\\]*$\" } } */\n+\n typedef int _Complex icx_t;\n+/* { dg-final { scan-file godump-1.out \"(?n)^// type _icx_t INVALID-complex-non-real$\" } } */\n+\n int _Complex icx_v1;\n+/* { dg-final { scan-file godump-1.out \"(?n)^// var _icx_v1 INVALID-complex-non-real$\" } } */\n+\n icx_t icx_v2;\n+/* { dg-final { scan-file godump-1.out \"(?n)^// var _icx_v2 INVALID-complex-non-real$\" } } */\n+\n+\n+/*** nested typedefs ***/\n+typedef int32_t ni_t;\n+/* { dg-final { scan-file godump-1.out \"(?n)^type _ni_t int32$\" } } */\n \n-/* nested typedefs */\n-typedef int ni_t;\n typedef ni_t ni2_t;\n+/* { dg-final { scan-file godump-1.out \"(?n)^type _ni2_t int32$\" } } */\n+\n ni2_t ni2_v2;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _ni2_v2 _ni2_t$\" } } */\n+\n typedef ni2_t ni3_t;\n+/* { dg-final { scan-file godump-1.out \"(?n)^type _ni3_t int32$\" } } */\n+\n ni3_t ni3_v2;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _ni3_v2 _ni3_t$\" } } */\n+\n \n-/* enums */\n+/*** enums ***/\n enum { E11 };\n+/* { dg-final { scan-file godump-1.out \"(?n)^const _E11 = 0$\" } } */\n+\n enum { EV11 } e1_v1;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _e1_v1 int$\" } } */\n+/* { dg-final { scan-file godump-1.out \"(?n)^const _EV11 = 0$\" } } */\n+\n enum { E21, E22 };\n+/* { dg-final { scan-file godump-1.out \"(?n)^const _E21 = 0$\" } } */\n+/* { dg-final { scan-file godump-1.out \"(?n)^const _E22 = 1$\" } } */\n+\n enum { EV21, EV22 } e2_v1;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _e2_v1 int$\" } } */\n+/* { dg-final { scan-file godump-1.out \"(?n)^const _EV21 = 0$\" } } */\n+/* { dg-final { scan-file godump-1.out \"(?n)^const _EV22 = 1$\" } } */\n+\n enum { EN1 = 3, EN2 = 77, EN3 = -1, EN4 };\n+/* { dg-final { scan-file godump-1.out \"(?n)^const _EN1 = 3$\" } } */\n+/* { dg-final { scan-file godump-1.out \"(?n)^const _EN2 = 77$\" } } */\n+/* { dg-final { scan-file godump-1.out \"(?n)^const _EN3 = -1$\" } } */\n+/* { dg-final { scan-file godump-1.out \"(?n)^const _EN4 = 0$\" } } */\n+\n typedef enum { ET1, ET2 } et_t;\n+/* { dg-final { scan-file godump-1.out \"(?n)^type _et_t int$\" } } */\n+/* { dg-final { scan-file godump-1.out \"(?n)^const _ET1 = 0$\" } } */\n+/* { dg-final { scan-file godump-1.out \"(?n)^const _ET2 = 1$\" } } */\n+\n enum { ETV1, ETV2 } et_v1;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _et_v1 int$\" } } */\n+/* { dg-final { scan-file godump-1.out \"(?n)^const _ETV1 = 0$\" } } */\n+/* { dg-final { scan-file godump-1.out \"(?n)^const _ETV2 = 1$\" } } */\n+\n et_t et_v2;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _et_v2 _et_t$\" } } */\n \n-/* simple structs */\n+\n+/*** simple structs ***/\n typedef struct { } ts0e;\n+/* { dg-final { scan-file godump-1.out \"(?n)^type _ts0e struct \\{ \\}$\" } } */\n+\n struct { } s0e;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _s0e struct \\{ \\}$\" } } */\n+\n typedef struct { int8_t e1; } ts1e;\n+/* { dg-final { scan-file godump-1.out \"(?n)^type _ts1e struct \\{ e1 int8; \\}$\" } } */\n+\n struct { int8_t e1; } s1e;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _s1e struct \\{ e1 int8; \\}$\" } } */\n+\n typedef struct { int8_t e1; void *e2; } ts2el;\n+/* { dg-final { scan-file godump-1.out \"(?n)^type _ts2el struct \\{ e1 int8; e2 \\\\*byte; \\}$\" } } */\n+\n struct { int8_t e1; void *e2; } s2el;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _s2el struct \\{ e1 int8; e2 \\\\*byte; \\}$\" } } */\n+\n typedef struct { void *e1; int8_t e2; } ts2eg;\n+/* { dg-final { scan-file godump-1.out \"(?n)^type _ts2eg struct \\{ e1 \\\\*byte; e2 int8; \\}$\" } } */\n+\n struct { void *e1; int8_t e2; } s2eg;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _s2eg struct \\{ e1 \\\\*byte; e2 int8; \\}$\" } } */\n+\n typedef struct { int64_t l; int8_t c; int32_t i; int16_t s; } tsme;\n+/* { dg-final { scan-file godump-1.out \"(?n)^type _tsme struct \\{ l int64; c int8; i int32; s int16; \\}$\" } } */\n+\n struct { int64_t l; int8_t c; int32_t i; int16_t s; } sme;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _sme struct \\{ l int64; c int\\8; i int32; s int16; \\}$\" } } */\n+\n typedef struct { int16_t sa[3]; int8_t ca[3]; } tsae;\n+/* { dg-final { scan-file godump-1.out \"(?n)^type _tsae struct \\{ sa \\\\\\[2\\\\+1\\\\\\]int16; ca \\\\\\[2\\\\+1\\\\\\]int8; \\}$\" } } */\n+\n struct { int16_t sa[3]; int8_t ca[3]; } sae;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _sae struct \\{ sa \\\\\\[2\\\\+1\\\\\\]int16; ca \\\\\\[2\\\\+1\\\\\\]int8; \\}$\" } } */\n+\n typedef struct { float f; } tsf_equiv;\n+/* { dg-final { scan-file godump-1.out \"(?n)^type _tsf_equiv struct \\{ f float\\[0-9\\]*; \\}$\" } } */\n+\n struct { float f; } sf_equiv;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _sf_equiv struct \\{ f float\\[0-9\\]*; \\}$\" } } */\n+\n typedef struct { float f; uint8_t : 0; } tsf_not_equiv;\n+/* { dg-final { scan-file godump-1.out \"(?n)^type _tsf_not_equiv struct \\{ f float\\[0-9\\]*; \\}$\" } } */\n+\n struct { float f; uint8_t : 0; } sf_not_equiv;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _sf_not_equiv struct \\{ f float\\[0-9\\]*; \\}$\" } } */\n+\n typedef struct { double d; } tsd_equiv;\n+/* { dg-final { scan-file godump-1.out \"(?n)^type _tsd_equiv struct \\{ d float\\[0-9\\]*; \\}$\" } } */\n+\n struct { double d; } sd_equiv;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _sd_equiv struct \\{ d float\\[0-9\\]*; \\}$\" } } */\n+\n typedef struct { double d; uint8_t : 0; } tsd_not_equiv;\n+/* { dg-final { scan-file godump-1.out \"(?n)^type _tsd_not_equiv struct \\{ d float\\[0-9\\]*; \\}$\" } } */\n+\n struct { double d; uint8_t : 0; } sd_not_equiv;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _sd_not_equiv struct \\{ d float\\[0-9\\]*; \\}$\" } } */\n+\n typedef struct s_undef_t s_undef_t2;\n \n-/* nested structs */\n+\n+/*** nested structs ***/\n typedef struct { struct { uint8_t ca[3]; } s; uint32_t i; } tsn;\n+/* { dg-final { scan-file godump-1.out \"(?n)^type _tsn struct \\{ s struct \\{ ca \\\\\\[2\\\\+1\\\\\\]uint8; \\}; i uint32; \\}$\" } } */\n+\n struct { struct { uint8_t ca[3]; } s; uint32_t i; } sn;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _sn struct \\{ s struct \\{ ca \\\\\\[2\\\\+1\\\\\\]uint8; \\}; i uint32; \\}$\" } } */\n+\n typedef struct { struct { uint8_t a; uint16_t s; }; uint8_t b; } tsn_anon;\n+/* { dg-final { scan-file godump-1.out \"(?n)^type _tsn_anon struct \\{ a uint8; s uint16; b uint8; Godump_0_align \\\\\\[0\\\\\\]int16; \\}$\" } } */\n+\n struct { struct { uint8_t a; uint16_t s; }; uint8_t b; } sn_anon;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _sn_anon struct \\{ a uint8; s uint16; b uint8; Godump_0_align \\\\\\[0\\\\\\]int16; \\}$\" } } */\n \n-/* structs with bitfields */\n+\n+/*** structs with bitfields ***/\n typedef struct { uint8_t : 0; uint8_t c; } tsbf_anon_pad1;\n+/* { dg-final { scan-file godump-1.out \"(?n)^type _tsbf_anon_pad1 struct \\{ c uint8; \\}$\" } } */\n+\n struct { uint8_t : 0; uint8_t c; } sbf_anon_pad1;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _sbf_anon_pad1 struct \\{ c uint8; \\}$\" } } */\n+\n typedef struct { uint8_t : 1; uint8_t c; } tsbf_anon_pad2;\n+/* { dg-final { scan-file godump-1.out \"(?n)^type _tsbf_anon_pad2 struct \\{ Godump_0_pad \\\\\\[1\\\\\\]byte; c uint8; \\}$\" } } */\n+\n struct { uint8_t : 1; uint8_t c; } sbf_anon_pad2;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _sbf_anon_pad2 struct \\{ Godump_0_pad \\\\\\[1\\\\\\]byte; c uint8; \\}$\" } } */\n+\n typedef struct { uint8_t : 7; uint8_t c; } tsbf_anon_pad3;\n+/* { dg-final { scan-file godump-1.out \"(?n)^type _tsbf_anon_pad3 struct \\{ Godump_0_pad \\\\\\[1\\\\\\]byte; c uint8; \\}$\" } } */\n+\n struct { uint8_t : 7; uint8_t c; } sbf_anon_pad3;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _sbf_anon_pad3 struct \\{ Godump_0_pad \\\\\\[1\\\\\\]byte; c uint8; \\}$\" } } */\n+\n typedef struct { uint8_t : 8; uint8_t c; } tsbf_anon_pad4;\n+/* { dg-final { scan-file godump-1.out \"(?n)^type _tsbf_anon_pad4 struct \\{ Godump_0 uint8; c uint8; \\}$\" } } */\n+\n struct { uint8_t : 8; uint8_t c; } sbf_anon_pad4;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _sbf_anon_pad4 struct \\{ Godump_0 uint8; c uint8; \\}$\" } } */\n+\n typedef struct { uint64_t : 0; uint8_t c; } tsbf_anon_pad5;\n+/* { dg-final { scan-file godump-1.out \"(?n)^type _tsbf_anon_pad5 struct \\{ c uint8; \\}$\" } } */\n+\n struct { uint64_t : 0; uint8_t c; } sbf_anon_pad5;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _sbf_anon_pad5 struct \\{ c uint8; \\}$\" } } */\n+\n typedef struct { uint64_t : 1; uint8_t c; } tsbf_anon_pad6;\n+/* { dg-final { scan-file godump-1.out \"(?n)^type _tsbf_anon_pad6 struct \\{ Godump_0_pad \\\\\\[1\\\\\\]byte; c uint8; \\}$\" } } */\n+\n struct { uint64_t : 1; uint8_t c; } sbf_anon_pad6;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _sbf_anon_pad6 struct \\{ Godump_0_pad \\\\\\[1\\\\\\]byte; c uint8; \\}$\" } } */\n+\n typedef struct { uint64_t : 63; uint8_t c; } tsbf_anon_pad7;\n+/* { dg-final { scan-file godump-1.out \"(?n)^type _tsbf_anon_pad7 struct \\{ Godump_0_pad \\\\\\[8\\\\\\]byte; c uint8; \\}$\" } } */\n+\n struct { uint64_t : 63; uint8_t c; } sbf_anon_pad7;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _sbf_anon_pad7 struct \\{ Godump_0_pad \\\\\\[8\\\\\\]byte; c uint8; \\}$\" } } */\n+\n typedef struct { uint64_t : 64; uint8_t c; } tsbf_anon_pad8;\n+/* { dg-final { scan-file godump-1.out \"(?n)^type _tsbf_anon_pad8 struct \\{ Godump_0 uint64; c uint8; \\}$\" } } */\n+\n struct { uint64_t : 64; uint8_t c; } sbf_anon_pad8;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _sbf_anon_pad8 struct \\{ Godump_0 uint64; c uint8; \\}$\" } } */\n+\n typedef struct { uint8_t bf : 1; uint8_t c; } tsbf_pad8_1;\n+/* { dg-final { scan-file godump-1.out \"(?n)^type _tsbf_pad8_1 struct \\{ Godump_0_pad \\\\\\[1\\\\\\]byte; c uint8; \\}$\" } } */\n+\n struct { uint8_t bf : 1; uint8_t c; } sbf_pad8_1;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _sbf_pad8_1 struct \\{ Godump_0_pad \\\\\\[1\\\\\\]byte; c uint8; \\}$\" } } */\n+\n typedef struct { uint8_t bf : 7; uint8_t c; } tsbf_pad8_2;\n+/* { dg-final { scan-file godump-1.out \"(?n)^type _tsbf_pad8_2 struct \\{ Godump_0_pad \\\\\\[1\\\\\\]byte; c uint8; \\}$\" } } */\n+\n struct { uint8_t bf : 7; uint8_t c; } sbf_pad8_2;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _sbf_pad8_2 struct \\{ Godump_0_pad \\\\\\[1\\\\\\]byte; c uint8; \\}$\" } } */\n+\n typedef struct { uint8_t bf : 8; uint8_t c; } tsbf_pad8_3;\n+/* { dg-final { scan-file godump-1.out \"(?n)^type _tsbf_pad8_3 struct \\{ bf uint8; c uint8; \\}$\" } } */\n+\n struct { uint8_t bf : 8; uint8_t c; } sbf_pad8_3;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _sbf_pad8_3 struct \\{ bf uint8; c uint8; \\}$\" } } */\n+\n typedef struct { uint16_t bf : 1; uint8_t c; } tsbf_pad16_1;\n+/* { dg-final { scan-file godump-1.out \"(?n)^type _tsbf_pad16_1 struct \\{ Godump_0_pad \\\\\\[1\\\\\\]byte; c uint8; Godump_1_align \\\\\\[0\\\\\\]int16; \\}$\" } } */\n+\n struct { uint16_t bf : 1; uint8_t c; } sbf_pad16_1;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _sbf_pad16_1 struct \\{ Godump_0_pad \\\\\\[1\\\\\\]byte; c uint8; Godump_1_align \\\\\\[0\\\\\\]int16; \\}$\" } } */\n+\n typedef struct { uint16_t bf : 15; uint8_t c; } tsbf_pad16_2;\n+/* { dg-final { scan-file godump-1.out \"(?n)^type _tsbf_pad16_2 struct \\{ Godump_0_pad \\\\\\[2\\\\\\]byte; c uint8; Godump_1_align \\\\\\[0\\\\\\]int16; \\}$\" } } */\n+\n struct { uint16_t bf : 15; uint8_t c; } sbf_pad16_2;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _sbf_pad16_2 struct \\{ Godump_0_pad \\\\\\[2\\\\\\]byte; c uint8; Godump_1_align \\\\\\[0\\\\\\]int16; \\}$\" } } */\n+\n typedef struct { uint16_t bf : 16; uint8_t c; } tsbf_pad16_3;\n+/* { dg-final { scan-file godump-1.out \"(?n)^type _tsbf_pad16_3 struct \\{ bf uint16; c uint8; \\}$\" } } */\n+\n struct { uint16_t bf : 16; uint8_t c; } sbf_pad16_3;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _sbf_pad16_3 struct \\{ bf uint16; c uint8; \\}$\" } } */\n+\n typedef struct { uint32_t bf : 1; uint8_t c; } tsbf_pad32_1;\n+/* { dg-final { scan-file godump-1.out \"(?n)^type _tsbf_pad32_1 struct \\{ Godump_0_pad \\\\\\[1\\\\\\]byte; c uint8; Godump_1_align \\\\\\[0\\\\\\]int32; \\}$\" } } */\n+\n struct { uint32_t bf : 1; uint8_t c; } sbf_pad32_1;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _sbf_pad32_1 struct \\{ Godump_0_pad \\\\\\[1\\\\\\]byte; c uint8; Godump_1_align \\\\\\[0\\\\\\]int32; \\}$\" } } */\n+\n typedef struct { uint32_t bf : 31; uint8_t c; } tsbf_pad32_2;\n+/* { dg-final { scan-file godump-1.out \"(?n)^type _tsbf_pad32_2 struct \\{ Godump_0_pad \\\\\\[4\\\\\\]byte; c uint8; Godump_1_align \\\\\\[0\\\\\\]int32; \\}$\" } } */\n+\n struct { uint32_t bf : 31; uint8_t c; } sbf_pad32_2;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _sbf_pad32_2 struct \\{ Godump_0_pad \\\\\\[4\\\\\\]byte; c uint8; Godump_1_align \\\\\\[0\\\\\\]int32; \\}$\" } } */\n+\n typedef struct { uint32_t bf : 32; uint8_t c; } tsbf_pad32_3;\n+/* { dg-final { scan-file godump-1.out \"(?n)^type _tsbf_pad32_3 struct \\{ bf uint32; c uint8; \\}$\" } } */\n+\n struct { uint32_t bf : 32; uint8_t c; } sbf_pad32_3;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _sbf_pad32_3 struct \\{ bf uint32; c uint8; \\}$\" } } */\n+\n typedef struct { uint64_t bf : 1; uint8_t c; } tsbf_pad64_1;\n+/* { dg-final { scan-file godump-1.out \"(?n)^type _tsbf_pad64_1 struct \\{ Godump_0_pad \\\\\\[1\\\\\\]byte; c uint8; Godump_1_align \\\\\\[0\\\\\\]int64; \\}$\" } } */\n+\n struct { uint64_t bf : 1; uint8_t c; } sbf_pad64_1;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _sbf_pad64_1 struct \\{ Godump_0_pad \\\\\\[1\\\\\\]byte; c uint8; Godump_1_align \\\\\\[0\\\\\\]int64; \\}$\" } } */\n+\n typedef struct { uint64_t bf : 63; uint8_t c; } tsbf_pad64_2;\n+/* { dg-final { scan-file godump-1.out \"(?n)^type _tsbf_pad64_2 struct \\{ Godump_0_pad \\\\\\[8\\\\\\]byte; c uint8; Godump_1_align \\\\\\[0\\\\\\]int64; \\}$\" } } */\n+\n struct { uint64_t bf : 63; uint8_t c; } sbf_pad64_2;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _sbf_pad64_2 struct \\{ Godump_0_pad \\\\\\[8\\\\\\]byte; c uint8; Godump_1_align \\\\\\[0\\\\\\]int64; \\}$\" } } */\n+\n typedef struct { uint64_t bf : 64; uint8_t c; } tsbf_pad64_3;\n+/* { dg-final { scan-file godump-1.out \"(?n)^type _tsbf_pad64_3 struct \\{ bf uint\\[0-9\\]*; c uint8; \\}$\" } } */\n+\n struct { uint64_t bf : 64; uint8_t c; } sbf_pad64_3;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _sbf_pad64_3 struct \\{ bf uint\\[0-9\\]*; c uint8; \\}$\" } } */\n+\n typedef struct { uint8_t b1 : 1; } tsbf_1b;\n+/* { dg-final { scan-file godump-1.out \"(?n)^type _tsbf_1b struct \\{ Godump_0_pad \\\\\\[1\\\\\\]byte; \\}$\" } } */\n+\n struct { uint8_t b1 : 1; } sbf_1b;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _sbf_1b struct \\{ Godump_0_pad \\\\\\[1\\\\\\]byte; \\}$\" } } */\n+\n typedef struct\n {\n   uint8_t b1 : 1; uint8_t b2 : 1; uint8_t b3 : 1; uint8_t b4 : 1;\n   uint8_t b5 : 1; uint8_t b6 : 1; uint8_t b7 : 1; uint8_t b8 : 1;\n } tsbf_8b;\n+/* { dg-final { scan-file godump-1.out \"(?n)^type _tsbf_8b struct \\{ Godump_0_pad \\\\\\[1\\\\\\]byte; \\}$\" } } */\n+\n struct\n {\n   uint8_t b1 : 1; uint8_t b2 : 1; uint8_t b3 : 1; uint8_t b4 : 1;\n   uint8_t b5 : 1; uint8_t b6 : 1; uint8_t b7 : 1; uint8_t b8 : 1;\n } sbf_8b;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _sbf_8b struct \\{ Godump_0_pad \\\\\\[1\\\\\\]byte; \\}$\" } } */\n+\n typedef struct {\n   uint8_t b1 : 1; uint8_t b2 : 1; uint8_t b3 : 1; uint8_t b4 : 1;\n   uint8_t b5 : 1; uint8_t b6 : 1; uint8_t b7 : 1; uint8_t b8 : 1;\n   uint8_t b9 : 1;\n } tsbf_9b;\n+/* { dg-final { scan-file godump-1.out \"(?n)^type _tsbf_9b struct \\{ Godump_0_pad \\\\\\[2\\\\\\]byte; \\}$\" } } */\n+\n struct {\n   uint8_t b1 : 1; uint8_t b2 : 1; uint8_t b3 : 1; uint8_t b4 : 1;\n   uint8_t b5 : 1; uint8_t b6 : 1; uint8_t b7 : 1; uint8_t b8 : 1;\n   uint8_t b9 : 1;\n } sbf_9b;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _sbf_9b struct \\{ Godump_0_pad \\\\\\[2\\\\\\]byte; \\}$\" } } */\n+\n typedef struct {\n   uint8_t b1 : 7; uint8_t b2 : 7; uint8_t b3 : 2;\n } tsbf_18b;\n+/* { dg-final { scan-file godump-1.out \"(?n)^type _tsbf_18b struct \\{ Godump_0_pad \\\\\\[3\\\\\\]byte; \\}$\" } } */\n+\n struct {\n   uint8_t b1 : 7; uint8_t b2 : 7; uint8_t b3 : 2;\n } sbf_18b;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _sbf_18b struct \\{ Godump_0_pad \\\\\\[3\\\\\\]byte; \\}$\" } } */\n+\n struct\n {\n   uint16_t bf1 : 8;\n@@ -245,6 +656,8 @@ struct\n   uint32_t bf3 : 12;\n   uint16_t s;\n } sbf_gaps;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _sbf_gaps struct \\{ bf1 uint8; c uint8; bf2 uint8; Godump_0_pad \\\\\\[2\\\\\\]byte; s uint16; Godump_1_align \\\\\\[0\\\\\\]int32; \\}$\" } } */\n+\n typedef struct\n {\n   uint16_t bf1 : 8;\n@@ -253,262 +666,208 @@ typedef struct\n   uint32_t bf3 : 12;\n   uint16_t s;\n } tsbf_gaps;\n+/* { dg-final { scan-file godump-1.out \"(?n)^type _tsbf_gaps struct \\{ bf1 uint8; c uint8; bf2 uint8; Godump_0_pad \\\\\\[2\\\\\\]byte; s uint16; Godump_1_align \\\\\\[0\\\\\\]int32; \\}$\" } } */\n \n-/* unions */\n+typedef struct\n+{\n+\tunion\n+\t{\n+\t\tint64_t : 1;\n+\t\tunion\n+\t\t{\n+\t\t\tint32_t bf : 1;\n+\t\t\tunion\n+\t\t\t{\n+\t\t\t\tint16_t s;\n+\t\t\t\tint8_t c;\n+\t\t\t};\n+\t\t};\n+\t} u;\n+} ts_nested;\n+/* { dg-final { scan-file godump-1.out \"(?n)^type _ts_nested struct \\{ u struct \\{ s int16; Godump_0_pad \\\\\\[2\\\\\\]byte; Godump_1_align \\\\\\[0\\\\\\]u?int32; \\}; \\}$\" } } */\n+\n+struct\n+{\n+\tunion\n+\t{\n+\t\tint64_t : 1;\n+\t\tunion\n+\t\t{\n+\t\t\tint32_t bf : 1;\n+\t\t\tunion\n+\t\t\t{\n+\t\t\t\tint16_t s;\n+\t\t\t\tint8_t c;\n+\t\t\t};\n+\t\t};\n+\t} u;\n+} s_nested;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _s_nested struct \\{ u struct \\{ s int16; Godump_0_pad \\\\\\[2\\\\\\]byte; Godump_1_align \\\\\\[0\\\\\\]u?int32; \\}; \\}$\" } } */\n+\n+typedef struct\n+{\n+\tstruct\n+\t{\n+\t\tint64_t : 1;\n+\t\tstruct\n+\t\t{\n+\t\t\tint32_t bf : 1;\n+\t\t\tstruct\n+\t\t\t{\n+\t\t\t\tint16_t s;\n+\t\t\t\tint8_t c;\n+\t\t\t};\n+\t\t};\n+\t} u;\n+} ts_nested2;\n+/* { dg-final { scan-file godump-1.out \"(?n)^type _ts_nested2 struct \\{ u struct \\{ Godump_0_pad \\\\\\[4\\\\\\]byte; Godump_1_pad \\\\\\[2\\\\\\]byte; s int16; c int8; Godump_2_pad \\\\\\[1\\\\\\]byte; Godump_3_pad \\\\\\[2\\\\\\]byte; Godump_4_align \\\\\\[0\\\\\\]u?int32; \\}; \\}$\" } } */\n+\n+struct\n+{\n+\tstruct\n+\t{\n+\t\tint64_t : 1;\n+\t\tstruct\n+\t\t{\n+\t\t\tint32_t bf : 1;\n+\t\t\tstruct\n+\t\t\t{\n+\t\t\t\tint16_t s;\n+\t\t\t\tint8_t c;\n+\t\t\t};\n+\t\t};\n+\t} u;\n+} s_nested2;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _s_nested2 struct \\{ u struct \\{ Godump_0_pad \\\\\\[4\\\\\\]byte; Godump_1_pad \\\\\\[2\\\\\\]byte; s int16; c int8; Godump_2_pad \\\\\\[1\\\\\\]byte; Godump_3_pad \\\\\\[2\\\\\\]byte; Godump_4_align \\\\\\[0\\\\\\]u?int32; \\}; \\}$\" } } */\n+\n+\n+/*** unions ***/\n typedef union { } tue;\n+/* { dg-final { scan-file godump-1.out \"(?n)^type _tue struct \\{ \\}$\" } } */\n+\n union { } ue;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _ue struct \\{ \\}$\" } } */\n+\n typedef union { uint8_t c; uint64_t l; } tu1;\n+/* { dg-final { scan-file godump-1.out \"(?n)^type _tu1 struct \\{ c uint8; Godump_0_align \\\\\\[0\\\\\\]u?int64; \\}$\" } } */\n+\n union { uint8_t c; uint64_t l; } u1;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _u1 struct \\{ c uint8; Godump_0_align \\\\\\[0\\\\\\]u?int64; \\}$\" } } */\n+\n typedef union { uint64_t l; uint8_t c; } tu2;\n+/* { dg-final { scan-file godump-1.out \"(?n)^type _tu2 struct \\{ l uint64; \\}$\" } } */\n+\n union { uint64_t l; uint8_t c; } u2;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _u2 struct \\{ l uint64; \\}$\" } } */\n+\n typedef union { uint64_t l[3]; uint8_t c; } tu3;\n+/* { dg-final { scan-file godump-1.out \"(?n)^type _tu3 struct \\{ l \\\\\\[2\\\\+1\\\\\\]uint64; \\}$\" } } */\n+\n union { uint64_t l[3]; uint8_t c; } u3;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _u3 struct \\{ l \\\\\\[2\\\\+1\\\\\\]uint64; \\}$\" } } */\n+\n typedef struct { union { uint8_t c; uint64_t l; }; } tsu_anon;\n+/* { dg-final { scan-file godump-1.out \"(?n)^type _tsu_anon struct \\{ c uint8; Godump_0_pad \\\\\\[7\\\\\\]byte; Godump_1_align \\\\\\[0\\\\\\]u?int64; \\}$\" } } */\n+\n struct { union { uint8_t c; uint64_t l; }; } su_anon;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _su_anon struct \\{ c uint8; Godump_0_pad \\\\\\[7\\\\\\]byte; Godump_1_align \\\\\\[0\\\\\\]u?int64; \\}$\" } } */\n+\n typedef union { uint64_t bf : 1; uint8_t ca[5]; } tu_size;\n+/* { dg-final { scan-file godump-1.out \"(?n)^type _tu_size struct \\{ ca \\\\\\[4\\\\+1\\\\\\]uint8; Godump_0_align \\\\\\[0\\\\\\]u?int64; \\}$\" } } */\n+\n union { uint64_t bf : 1; uint8_t ca[5]; } u_size;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _u_size struct \\{ ca \\\\\\[4\\\\+1\\\\\\]uint8; Godump_0_align \\\\\\[0\\\\\\]u?int64; \\}$\" } } */\n+\n typedef union { uint64_t : 1; uint8_t ca[5]; } tu2_size;\n+/* { dg-final { scan-file godump-1.out \"(?n)^type _tu2_size struct \\{ ca \\\\\\[4\\\\+1\\\\\\]uint8; \\}$\" } } */\n+\n union { uint64_t : 1; uint8_t ca[5]; } u2_size;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _u2_size struct \\{ ca \\\\\\[4\\\\+1\\\\\\]uint8; \\}$\" } } */\n+\n typedef union u_undef_t u_undef_t2;\n+\n typedef union { uint64_t b : 1; uint8_t ca[5]; } tu3_size;\n+/* { dg-final { scan-file godump-1.out \"(?n)^type _tu3_size struct \\{ ca \\\\\\[4\\\\+1\\\\\\]uint8; Godump_0_align \\\\\\[0\\\\\\]u?int64; \\}$\" } } */\n+\n union { uint64_t b : 1; uint8_t ca[5]; } u3_size;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _u3_size struct \\{ ca \\\\\\[4\\\\+1\\\\\\]uint8; Godump_0_align \\\\\\[0\\\\\\]u?int64; \\}$\" } } */\n \n-/* functions */\n-extern uint32_t func1(uint8_t c);\n-typedef int8_t (*func_t)(void *p);\n+typedef union\n+{\n+\tunion\n+\t{\n+\t\tint64_t : 1;\n+\t\tunion\n+\t\t{\n+\t\t\tint32_t bf : 1;\n+\t\t\tunion\n+\t\t\t{\n+\t\t\t\tint16_t s;\n+\t\t\t\tint8_t c;\n+\t\t\t};\n+\t\t};\n+\t} u;\n+} tu_nested;\n+/* { dg-final { scan-file godump-1.out \"(?n)^type _tu_nested struct \\{ u struct \\{ s int16; Godump_0_pad \\\\\\[2\\\\\\]byte; Godump_1_align \\\\\\[0\\\\\\]u?int32; \\}; \\}$\" } } */\n \n-/* Necessary quoting in the regexp patters:\n+union\n+{\n+\tunion\n+\t{\n+\t\tint64_t : 1;\n+\t\tunion\n+\t\t{\n+\t\t\tint32_t bf : 1;\n+\t\t\tunion\n+\t\t\t{\n+\t\t\t\tint16_t s;\n+\t\t\t\tint8_t c;\n+\t\t\t};\n+\t\t};\n+\t} u;\n+} u_nested;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _u_nested struct \\{ u struct \\{ s int16; Godump_0_pad \\\\\\[2\\\\\\]byte; Godump_1_align \\\\\\[0\\\\\\]u?int32; \\}; \\}$\" } } */\n \n-     (?n) at beginning of pattern to make ^ and $ work.\n-     \"     ->  \\\"\n-     *, +  ->  \"*\", \"+\"\n-     [, ]  ->  \"\\[\", \"\\]\"\n-     (, )  ->  \"\\[(\\]\", \"\\[)\\]\"\n-     {, }  ->  \"\\{\", \"\\}\"\n-*/\n+typedef union\n+{\n+\tstruct\n+\t{\n+\t\tint64_t : 1;\n+\t\tstruct\n+\t\t{\n+\t\t\tint32_t bf : 1;\n+\t\t\tstruct\n+\t\t\t{\n+\t\t\t\tint16_t s;\n+\t\t\t\tint8_t c;\n+\t\t\t};\n+\t\t};\n+\t} u;\n+} tu_nested2;\n+/* { dg-final { scan-file godump-1.out \"(?n)^type _tu_nested2 struct \\{ u struct \\{ Godump_0_pad \\\\\\[4\\\\\\]byte; Godump_1_pad \\\\\\[2\\\\\\]byte; s int16; c int8; Godump_2_pad \\\\\\[1\\\\\\]byte; Godump_3_pad \\\\\\[2\\\\\\]byte; Godump_4_align \\\\\\[0\\\\\\]u?int32; \\}; \\}$\" } } */\n \n-/* { dg-final { scan-file godump-1.out \"(?n)^type _c_t u?int\\[0-9\\]*$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^type _s_t int\\[0-9\\]*$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^type _i_t int\\[0-9\\]*$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^type _l_t int\\[0-9\\]*$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^type _ll_t int\\[0-9\\]*$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^type _uc_t uint\\[0-9\\]*$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^type _us_t uint\\[0-9\\]*$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^type _ui_t uint\\[0-9\\]*$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^type _ul_t uint\\[0-9\\]*$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^type _ull_t uint\\[0-9\\]*$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^type _sc_t int\\[0-9\\]*$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^type _ss_t int\\[0-9\\]*$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^type _si_t int\\[0-9\\]*$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^type _sl_t int\\[0-9\\]*$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^type _sll_t int\\[0-9\\]*$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^type _i8_t int\\[0-9\\]*$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^type _i16_t int\\[0-9\\]*$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^type _i32_t int\\[0-9\\]*$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^type _i64_t int\\[0-9\\]*$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^type _ui8_t uint\\[0-9\\]*$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^type _iu16_t uint\\[0-9\\]*$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^type _iu32_t uint\\[0-9\\]*$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^type _iu64_t uint\\[0-9\\]*$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^type _cc_t u?int\\[0-9\\]*$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^type _vp_t \\\\*byte$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^type _ipp_t \\\\*\\\\*int\\[0-9\\]*$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^type _ca_t \\\\\\[0\\\\\\]u?int\\[0-9\\]*$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^type _sa2_t \\\\\\[1\\\\+1\\\\\\]int\\[0-9\\]*$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^type _f_t float\\[0-9\\]*$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^type _d_t float\\[0-9\\]*$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^// type _ld_t INVALID-float-\\[0-9\\]*$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^type _cx_t complex\\[0-9\\]*$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^type _fcx_t complex\\[0-9\\]*$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^type _dcx_t complex\\[0-9\\]*$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^// type _ldcx_t INVALID-complex-\\[0-9\\]*$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^// type _icx_t INVALID-complex-non-real$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^type _ni_t int\\[0-9\\]*$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^type _ni2_t int\\[0-9\\]*$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^type _ni3_t int\\[0-9\\]*$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^type _et_t int$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^type _ts0e struct \\{ \\}$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^type _ts1e struct \\{ e1 int\\[0-9\\]*; \\}$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^type _ts2el struct \\{ e1 int\\[0-9\\]*; e2 \\\\*byte; \\}$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^type _ts2eg struct \\{ e1 \\\\*byte; e2 int\\[0-9\\]*; \\}$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^type _tsme struct \\{ l int\\[0-9\\]*; c int\\[0-9\\]*; i int\\[0-9\\]*; s int\\[0-9\\]*; \\}$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^type _tsae struct \\{ sa \\\\\\[2\\\\+1\\\\\\]int\\[0-9\\]*; ca \\\\\\[2\\\\+1\\\\\\]int\\[0-9\\]*; \\}$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^type _tsf_equiv struct \\{ f float\\[0-9\\]*; \\}$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^type _tsf_not_equiv struct \\{ f float\\[0-9\\]*; \\}$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^type _tsd_equiv struct \\{ d float\\[0-9\\]*; \\}$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^type _tsd_not_equiv struct \\{ d float\\[0-9\\]*; \\}$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^type _tsn struct \\{ s struct \\{ ca \\\\\\[2\\\\+1\\\\\\]uint\\[0-9\\]*; \\}; i uint\\[0-9\\]*; \\}$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^type _tsn_anon struct \\{ Godump_0 struct \\{ a uint\\[0-9\\]*; s uint\\[0-9\\]*; \\}; b uint\\[0-9\\]*; \\}$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^type _tsbf_anon_pad1 struct \\{ c uint\\[0-9\\]*; \\}$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^type _tsbf_anon_pad2 struct \\{ Godump_0_pad \\\\\\[1\\\\\\]byte; c uint\\[0-9\\]*; \\}$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^type _tsbf_anon_pad3 struct \\{ Godump_0_pad \\\\\\[1\\\\\\]byte; c uint\\[0-9\\]*; \\}$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^type _tsbf_anon_pad4 struct \\{ Godump_0 uint\\[0-9\\]*; c uint\\[0-9\\]*; \\}$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^type _tsbf_anon_pad5 struct \\{ c uint\\[0-9\\]*; \\}$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^type _tsbf_anon_pad6 struct \\{ Godump_0_pad \\\\\\[1\\\\\\]byte; c uint\\[0-9\\]*; \\}$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^type _tsbf_anon_pad7 struct \\{ Godump_0_pad \\\\\\[8\\\\\\]byte; c uint\\[0-9\\]*; \\}$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^type _tsbf_anon_pad8 struct \\{ Godump_0 uint\\[0-9\\]*; c uint\\[0-9\\]*; \\}$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^type _tsbf_pad8_1 struct \\{ Godump_0_pad \\\\\\[1\\\\\\]byte; c uint\\[0-9\\]*; \\}$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^type _tsbf_pad8_2 struct \\{ Godump_0_pad \\\\\\[1\\\\\\]byte; c uint\\[0-9\\]*; \\}$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^type _tsbf_pad8_3 struct \\{ bf uint\\[0-9\\]*; c uint\\[0-9\\]*; \\}$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^type _tsbf_pad16_1 struct \\{ Godump_0_pad \\\\\\[1\\\\\\]byte; c uint\\[0-9\\]*; Godump_1_align \\\\\\[0\\\\\\]int\\[0-9\\]*; \\}$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^type _tsbf_pad16_2 struct \\{ Godump_0_pad \\\\\\[2\\\\\\]byte; c uint\\[0-9\\]*; Godump_1_align \\\\\\[0\\\\\\]int\\[0-9\\]*; \\}$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^type _tsbf_pad16_3 struct \\{ bf uint\\[0-9\\]*; c uint\\[0-9\\]*; \\}$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^type _tsbf_pad32_1 struct \\{ Godump_0_pad \\\\\\[1\\\\\\]byte; c uint\\[0-9\\]*; Godump_1_align \\\\\\[0\\\\\\]int\\[0-9\\]*; \\}$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^type _tsbf_pad32_2 struct \\{ Godump_0_pad \\\\\\[4\\\\\\]byte; c uint\\[0-9\\]*; Godump_1_align \\\\\\[0\\\\\\]int\\[0-9\\]*; \\}$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^type _tsbf_pad32_3 struct \\{ bf uint\\[0-9\\]*; c uint\\[0-9\\]*; \\}$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^type _tsbf_pad64_1 struct \\{ Godump_0_pad \\\\\\[1\\\\\\]byte; c uint\\[0-9\\]*; Godump_1_align \\\\\\[0\\\\\\]int\\[0-9\\]*; \\}$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^type _tsbf_pad64_2 struct \\{ Godump_0_pad \\\\\\[8\\\\\\]byte; c uint\\[0-9\\]*; Godump_1_align \\\\\\[0\\\\\\]int\\[0-9\\]*; \\}$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^type _tsbf_pad64_3 struct \\{ bf uint\\[0-9\\]*; c uint\\[0-9\\]*; \\}$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^type _tsbf_1b struct \\{ Godump_0_pad \\\\\\[1\\\\\\]byte; \\}$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^type _tsbf_8b struct \\{ Godump_0_pad \\\\\\[1\\\\\\]byte; \\}$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^type _tsbf_9b struct \\{ Godump_0_pad \\\\\\[2\\\\\\]byte; \\}$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^type _tsbf_18b struct \\{ Godump_0_pad \\\\\\[3\\\\\\]byte; \\}$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^type _tsbf_gaps struct \\{ bf1 uint\\[0-9\\]*; c uint\\[0-9\\]*; bf2 uint\\[0-9\\]*; Godump_0_pad \\\\\\[2\\\\\\]byte; s uint\\[0-9\\]*; Godump_1_align \\\\\\[0\\\\\\]int\\[0-9\\]*; \\}$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^type _tue struct \\{ Godump_0 \\\\\\[0\\\\\\]byte; \\}$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^type _tu1 struct \\{ c \\\\\\[8\\\\\\]byte; Godump_0_align \\\\\\[0\\\\\\]uint64; \\}$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^type _tu2 struct \\{ l \\\\\\[8\\\\\\]byte; Godump_0_align \\\\\\[0\\\\\\]uint64; \\}$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^type _tu3 struct \\{ l \\\\\\[24\\\\\\]byte; Godump_0_align \\\\\\[0\\\\\\]uint64; \\}$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^type _tsu_anon struct \\{ Godump_0 struct \\{ c \\\\\\[8\\\\\\]byte; Godump_1_align \\\\\\[0\\\\\\]uint64; \\}; \\}$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^type _tu_size struct \\{ bf \\\\\\[8\\\\\\]byte; Godump_0_align \\\\\\[0\\\\\\]uint64; \\}$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^type _tu2_size struct \\{ Godump_0 \\\\\\[5\\\\\\]byte; \\}$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^type _tu3_size struct \\{ b \\\\\\[8\\\\\\]byte; Godump_0_align \\\\\\[0\\\\\\]uint64; \\}$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^type _func_t func\\[(\\]\\\\*byte\\[)\\] int\\[0-9\\]*$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^var _c_v1 u?int\\[0-9\\]*$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^var _c_v2 _c_t$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^var _s_v1 int\\[0-9\\]*$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^var _s_v2 _s_t$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^var _i_v1 int\\[0-9\\]*$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^var _i_v2 _i_t$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^var _l_v1 int\\[0-9\\]*$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^var _l_v2 _l_t$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^var _ll_v1 int\\[0-9\\]*$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^var _ll_v2 _ll_t$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^var _uc_v1 uint\\[0-9\\]*$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^var _uc_v2 _uc_t$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^var _us_v1 uint\\[0-9\\]*$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^var _us_v2 _us_t$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^var _ui_v1 uint\\[0-9\\]*$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^var _ui_v2 _ui_t$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^var _ul_v1 uint\\[0-9\\]*$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^var _ul_v2 _ul_t$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^var _ull_v1 uint\\[0-9\\]*$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^var _ull_v2 _ull_t$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^var _sc_v1 int\\[0-9\\]*$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^var _sc_v2 _sc_t$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^var _ss_v1 int\\[0-9\\]*$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^var _ss_v2 _ss_t$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^var _si_v1 int\\[0-9\\]*$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^var _si_v2 _si_t$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^var _sl_v1 int\\[0-9\\]*$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^var _sl_v2 _sl_t$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^var _sll_v1 int\\[0-9\\]*$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^var _sll_v2 _sll_t$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^var _i8_v1 _int8_t$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^var _i8_v2 _i8_t$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^var _i16_v1 _int16_t$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^var _i16_v2 _i16_t$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^var _i32_v1 _int32_t$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^var _i32_v2 _i32_t$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^var _i64_v1 _int64_t$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^var _i64_v2 _i64_t$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^var _ui8_v1 _uint8_t$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^var _ui8_v2 _ui8_t$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^var _iu16_v1 _uint16_t$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^var _iu16_v2 _iu16_t$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^var _iu32_v1 _uint32_t$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^var _iu32_v2 _iu32_t$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^var _iu64_v1 _uint64_t$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^var _iu64_v2 _iu64_t$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^var _cc_v1 u?int\\[0-9\\]*$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^var _cc_v2 _cc_t$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^var _vp_v1 \\\\*byte$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^var _vp_v2 _vp_t$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^var _ipp_v1 \\\\*\\\\*int\\[0-9\\]*$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^var _ipp_v2 _ipp_t$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^var _ca_v1 \\\\\\[0\\\\+1\\\\\\]u?int\\[0-9\\]*$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^var _ca_v1b \\\\\\[1\\\\+1\\\\\\]u?int\\[0-9\\]*$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^var _ca_v2 \\\\\\[0\\\\+1\\\\\\]u?int\\[0-9\\]*$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^var _sa2_v1 \\\\\\[1\\\\+1\\\\\\]int\\[0-9\\]*$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^var _sa2_v2 _sa2_t$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^var _f_v1 float\\[0-9\\]*$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^var _f_v2 _f_t$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^var _d_v1 float\\[0-9\\]*$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^var _d_v2 _d_t$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^// var _ld_v1 INVALID-float-\\[0-9\\]*$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^// var _ld_v2 INVALID-float-\\[0-9\\]*$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^var _cx_v1 complex\\[0-9\\]*$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^var _cx_v2 _cx_t$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^var _fcx_v1 complex\\[0-9\\]*$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^var _fcx_v2 _fcx_t$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^var _dcx_v1 complex\\[0-9\\]*$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^var _dcx_v2 _dcx_t$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^// var _ldcx_v1 INVALID-complex-\\[0-9\\]*$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^// var _ldcx_v2 INVALID-complex-\\[0-9\\]*$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^// var _icx_v1 INVALID-complex-non-real$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^// var _icx_v2 INVALID-complex-non-real$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^var _ni2_v2 _ni2_t$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^var _ni3_v2 _ni3_t$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^var _e1_v1 int$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^var _e2_v1 int$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^var _et_v1 int$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^var _et_v2 _et_t$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^var _s0e struct \\{ \\}$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^var _s1e struct \\{ e1 int\\[0-9\\]*; \\}$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^var _s2el struct \\{ e1 int\\[0-9\\]*; e2 \\\\*byte; \\}$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^var _s2eg struct \\{ e1 \\\\*byte; e2 int\\[0-9\\]*; \\}$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^var _sme struct \\{ l int\\[0-9\\]*; c int\\[0-9\\]*; i int\\[0-9\\]*; s int\\[0-9\\]*; \\}$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^var _sae struct \\{ sa \\\\\\[2\\\\+1\\\\\\]int\\[0-9\\]*; ca \\\\\\[2\\\\+1\\\\\\]int\\[0-9\\]*; \\}$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^var _sf_equiv struct \\{ f float\\[0-9\\]*; \\}$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^var _sf_not_equiv struct \\{ f float\\[0-9\\]*; \\}$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^var _sd_equiv struct \\{ d float\\[0-9\\]*; \\}$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^var _sd_not_equiv struct \\{ d float\\[0-9\\]*; \\}$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^var _sn struct \\{ s struct \\{ ca \\\\\\[2\\\\+1\\\\\\]uint\\[0-9\\]*; \\}; i uint\\[0-9\\]*; \\}$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^var _sn_anon struct \\{ Godump_0 struct \\{ a uint\\[0-9\\]*; s uint\\[0-9\\]*; \\}; b uint\\[0-9\\]*; \\}$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^var _sbf_anon_pad1 struct \\{ c uint\\[0-9\\]*; \\}$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^var _sbf_anon_pad2 struct \\{ Godump_0_pad \\\\\\[1\\\\\\]byte; c uint\\[0-9\\]*; \\}$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^var _sbf_anon_pad3 struct \\{ Godump_0_pad \\\\\\[1\\\\\\]byte; c uint\\[0-9\\]*; \\}$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^var _sbf_anon_pad4 struct \\{ Godump_0 uint\\[0-9\\]*; c uint\\[0-9\\]*; \\}$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^var _sbf_anon_pad5 struct \\{ c uint\\[0-9\\]*; \\}$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^var _sbf_anon_pad6 struct \\{ Godump_0_pad \\\\\\[1\\\\\\]byte; c uint\\[0-9\\]*; \\}$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^var _sbf_anon_pad7 struct \\{ Godump_0_pad \\\\\\[8\\\\\\]byte; c uint\\[0-9\\]*; \\}$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^var _sbf_anon_pad8 struct \\{ Godump_0 uint\\[0-9\\]*; c uint\\[0-9\\]*; \\}$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^var _sbf_pad8_1 struct \\{ Godump_0_pad \\\\\\[1\\\\\\]byte; c uint\\[0-9\\]*; \\}$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^var _sbf_pad8_2 struct \\{ Godump_0_pad \\\\\\[1\\\\\\]byte; c uint\\[0-9\\]*; \\}$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^var _sbf_pad8_3 struct \\{ bf uint\\[0-9\\]*; c uint\\[0-9\\]*; \\}$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^var _sbf_pad16_1 struct \\{ Godump_0_pad \\\\\\[1\\\\\\]byte; c uint\\[0-9\\]*; Godump_1_align \\\\\\[0\\\\\\]int\\[0-9\\]*; \\}$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^var _sbf_pad16_2 struct \\{ Godump_0_pad \\\\\\[2\\\\\\]byte; c uint\\[0-9\\]*; Godump_1_align \\\\\\[0\\\\\\]int\\[0-9\\]*; \\}$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^var _sbf_pad16_3 struct \\{ bf uint\\[0-9\\]*; c uint\\[0-9\\]*; \\}$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^var _sbf_pad32_1 struct \\{ Godump_0_pad \\\\\\[1\\\\\\]byte; c uint\\[0-9\\]*; Godump_1_align \\\\\\[0\\\\\\]int\\[0-9\\]*; \\}$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^var _sbf_pad32_2 struct \\{ Godump_0_pad \\\\\\[4\\\\\\]byte; c uint\\[0-9\\]*; Godump_1_align \\\\\\[0\\\\\\]int\\[0-9\\]*; \\}$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^var _sbf_pad32_3 struct \\{ bf uint\\[0-9\\]*; c uint\\[0-9\\]*; \\}$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^var _sbf_pad64_1 struct \\{ Godump_0_pad \\\\\\[1\\\\\\]byte; c uint\\[0-9\\]*; Godump_1_align \\\\\\[0\\\\\\]int\\[0-9\\]*; \\}$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^var _sbf_pad64_2 struct \\{ Godump_0_pad \\\\\\[8\\\\\\]byte; c uint\\[0-9\\]*; Godump_1_align \\\\\\[0\\\\\\]int\\[0-9\\]*; \\}$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^var _sbf_pad64_3 struct \\{ bf uint\\[0-9\\]*; c uint\\[0-9\\]*; \\}$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^var _sbf_1b struct \\{ Godump_0_pad \\\\\\[1\\\\\\]byte; \\}$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^var _sbf_8b struct \\{ Godump_0_pad \\\\\\[1\\\\\\]byte; \\}$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^var _sbf_9b struct \\{ Godump_0_pad \\\\\\[2\\\\\\]byte; \\}$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^var _sbf_18b struct \\{ Godump_0_pad \\\\\\[3\\\\\\]byte; \\}$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^var _sbf_gaps struct \\{ bf1 uint\\[0-9\\]*; c uint\\[0-9\\]*; bf2 uint\\[0-9\\]*; Godump_0_pad \\\\\\[2\\\\\\]byte; s uint\\[0-9\\]*; Godump_1_align \\\\\\[0\\\\\\]int\\[0-9\\]*; \\}$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^var _ue struct \\{ Godump_0 \\\\\\[0\\\\\\]byte; \\}$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^var _u1 struct \\{ c \\\\\\[8\\\\\\]byte; Godump_0_align \\\\\\[0\\\\\\]uint64; \\}$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^var _u2 struct \\{ l \\\\\\[8\\\\\\]byte; Godump_0_align \\\\\\[0\\\\\\]uint64; \\}$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^var _u3 struct \\{ l \\\\\\[24\\\\\\]byte; Godump_0_align \\\\\\[0\\\\\\]uint64; \\}$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^var _su_anon struct \\{ Godump_0 struct \\{ c \\\\\\[8\\\\\\]byte; Godump_1_align \\\\\\[0\\\\\\]uint64; \\}; \\}$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^var _u_size struct \\{ bf \\\\\\[8\\\\\\]byte; Godump_0_align \\\\\\[0\\\\\\]uint64; \\}$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^var _u2_size struct \\{ Godump_0 \\\\\\[5\\\\\\]byte; \\}$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^var _u3_size struct \\{ b \\\\\\[8\\\\\\]byte; Godump_0_align \\\\\\[0\\\\\\]uint64; \\}$\" } } */\n+union\n+{\n+\tstruct\n+\t{\n+\t\tint64_t : 1;\n+\t\tstruct\n+\t\t{\n+\t\t\tint32_t bf : 1;\n+\t\t\tstruct\n+\t\t\t{\n+\t\t\t\tint16_t s;\n+\t\t\t\tint8_t c;\n+\t\t\t};\n+\t\t};\n+\t} u;\n+} u_nested2;\n+/* { dg-final { scan-file godump-1.out \"(?n)^var _u_nested2 struct \\{ u struct \\{ Godump_0_pad \\\\\\[4\\\\\\]byte; Godump_1_pad \\\\\\[2\\\\\\]byte; s int16; c int8; Godump_2_pad \\\\\\[1\\\\\\]byte; Godump_3_pad \\\\\\[2\\\\\\]byte; Godump_4_align \\\\\\[0\\\\\\]u?int32; \\}; \\}$\" } } */\n+\n+\n+/*** functions ***/\n+extern uint32_t func1(uint8_t c);\n /* { dg-final { scan-file godump-1.out \"(?n)^func _func1 \\[(\\]uint\\[0-9\\]*\\[)\\] uint\\[0-9\\]* __asm__\\[(\\]\\\"func1\\\"\\[)\\]$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^const _E11 = 0$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^const _E21 = 0$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^const _E22 = 1$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^const _EN1 = 3$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^const _EN2 = 77$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^const _EN3 = -1$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^const _EN4 = 0$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^const _ET1 = 0$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^const _ET2 = 1$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^const _ETV1 = 0$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^const _ETV2 = 1$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^const _EV11 = 0$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^const _EV21 = 0$\" } } */\n-/* { dg-final { scan-file godump-1.out \"(?n)^const _EV22 = 1$\" } } */\n+\n+typedef int8_t (*func_t)(void *p);\n+/* { dg-final { scan-file godump-1.out \"(?n)^type _func_t func\\[(\\]\\\\*byte\\[)\\] int\\[0-9\\]*$\" } } */"}]}