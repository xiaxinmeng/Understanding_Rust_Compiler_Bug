{"sha": "fa0ed2b062dce79cc38550c85bdab9686fccdc40", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmEwZWQyYjA2MmRjZTc5Y2MzODU1MGM4NWJkYWI5Njg2ZmNjZGM0MA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2015-07-24T16:30:04Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2015-07-24T16:30:04Z"}, "message": "* include/bits/atomic_futex.h [_GLIBCXX_HAVE_LINUX_FUTEX]\n\t(_M_load_and_test_until): Whitespace.\n\t(_M_load_and_test): Value-initialize the unused durations.\n\t(_M_load_when_equal): Add missing return value.\n\nFrom-SVN: r226174", "tree": {"sha": "002313a81654c7ab29bda8a735c514d492b88ac5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/002313a81654c7ab29bda8a735c514d492b88ac5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fa0ed2b062dce79cc38550c85bdab9686fccdc40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa0ed2b062dce79cc38550c85bdab9686fccdc40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa0ed2b062dce79cc38550c85bdab9686fccdc40", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa0ed2b062dce79cc38550c85bdab9686fccdc40/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "776280c4a8d22fa244624aaef3fda65957f8d968", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/776280c4a8d22fa244624aaef3fda65957f8d968", "html_url": "https://github.com/Rust-GCC/gccrs/commit/776280c4a8d22fa244624aaef3fda65957f8d968"}], "stats": {"total": 22, "additions": 15, "deletions": 7}, "files": [{"sha": "d7dbedd8143e4729274ca38e0312523086474e86", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa0ed2b062dce79cc38550c85bdab9686fccdc40/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa0ed2b062dce79cc38550c85bdab9686fccdc40/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=fa0ed2b062dce79cc38550c85bdab9686fccdc40", "patch": "@@ -1,3 +1,10 @@\n+2015-07-24  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/atomic_futex.h [_GLIBCXX_HAVE_LINUX_FUTEX]\n+\t(_M_load_and_test_until): Whitespace.\n+\t(_M_load_and_test): Value-initialize the unused durations.\n+\t(_M_load_when_equal): Add missing return value.\n+\n 2015-07-24  Michael Haubenwallner  <michael.haubenwallner@ssi-schaefer.com>\n \n \t* fragment.am (AM_CPPFLAGS): Add CPPFLAGS."}, {"sha": "90317f2d013e3f9ce27daab83798036a828e2608", "filename": "libstdc++-v3/include/bits/atomic_futex.h", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa0ed2b062dce79cc38550c85bdab9686fccdc40/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_futex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa0ed2b062dce79cc38550c85bdab9686fccdc40/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_futex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_futex.h?ref=fa0ed2b062dce79cc38550c85bdab9686fccdc40", "patch": "@@ -93,15 +93,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       for (;;)\n \t{\n-\t  // Don't bother checking the value again because we expect the caller to\n-\t  // have done it recently.\n+\t  // Don't bother checking the value again because we expect the caller\n+\t  // to have done it recently.\n \t  // memory_order_relaxed is sufficient because we can rely on just the\n \t  // modification order (store_notify uses an atomic RMW operation too),\n \t  // and the futex syscalls synchronize between themselves.\n \t  _M_data.fetch_or(_Waiter_bit, memory_order_relaxed);\n-\t  bool __ret;\n-\t  __ret = _M_futex_wait_until((unsigned*)(void*)&_M_data,\n-\t      __assumed | _Waiter_bit, __has_timeout, __s, __ns);\n+\t  bool __ret = _M_futex_wait_until((unsigned*)(void*)&_M_data,\n+\t\t\t\t\t   __assumed | _Waiter_bit,\n+\t\t\t\t\t   __has_timeout, __s, __ns);\n \t  // Fetch the current value after waiting (clears _Waiter_bit).\n \t  __assumed = _M_load(__mo);\n \t  if (!__ret || ((__operand == __assumed) == __equal))\n@@ -119,7 +119,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tbool __equal, memory_order __mo)\n     {\n       return _M_load_and_test_until(__assumed, __operand, __equal, __mo,\n-\t  false, chrono::seconds(0), chrono::nanoseconds(0));\n+\t\t\t\t    false, {}, {});\n     }\n \n     // If a timeout occurs, returns a current value after the timeout;\n@@ -146,7 +146,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     _M_load_when_not_equal(unsigned __val, memory_order __mo)\n     {\n       unsigned __i = _M_load(__mo);\n-      if ((__i & ~_Waiter_bit) != __val) return;\n+      if ((__i & ~_Waiter_bit) != __val)\n+\treturn (__i & ~_Waiter_bit);\n       // TODO Spin-wait first.\n       return _M_load_and_test(__i, __val, false, __mo);\n     }"}]}