{"sha": "d66d6d15f1ab42c503025548d6ab9772a85ad791", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDY2ZDZkMTVmMWFiNDJjNTAzMDI1NTQ4ZDZhYjk3NzJhODVhZDc5MQ==", "commit": {"author": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2018-08-13T20:21:50Z"}, "committer": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2018-08-13T20:21:50Z"}, "message": "Use getentropy() for seeding PRNG\n\nThe getentropy function, found on Linux, OpenBSD, and recently also\nFreeBSD, can be used to get random bytes to initialize the PRNG.  It\nis similar to the traditional way of reading from /dev/urandom, but\nbeing a system call rather than a special file, it doesn't suffer from\nproblems like running out of file descriptors, or failure when running\nin a container where /dev/urandom may not be available.\n\nRegtested on x86_64-pc-linux-gnu, Ok for trunk?\n\n2018-08-13  Janne Blomqvist  <jb@gcc.gnu.org>\n\n\t* configure.ac: Check for getentropy.\n\t* intrinsics/random.c (getosrandom): Use getentropy if available.\n\t* config.h.in: Regenerated.\n\t* configure: Regenerated.\n\nFrom-SVN: r263522", "tree": {"sha": "0cb0150a31538dfc107e19dbeff59fef4420ae6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0cb0150a31538dfc107e19dbeff59fef4420ae6f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d66d6d15f1ab42c503025548d6ab9772a85ad791", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d66d6d15f1ab42c503025548d6ab9772a85ad791", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d66d6d15f1ab42c503025548d6ab9772a85ad791", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d66d6d15f1ab42c503025548d6ab9772a85ad791/comments", "author": null, "committer": null, "parents": [{"sha": "72217988ca377398e5c7c1ae98b83ca53b1877d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72217988ca377398e5c7c1ae98b83ca53b1877d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72217988ca377398e5c7c1ae98b83ca53b1877d4"}], "stats": {"total": 29, "additions": 21, "deletions": 8}, "files": [{"sha": "b8f238e777445cf07c3d1d8403be78a19c3c4f2c", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d66d6d15f1ab42c503025548d6ab9772a85ad791/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d66d6d15f1ab42c503025548d6ab9772a85ad791/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=d66d6d15f1ab42c503025548d6ab9772a85ad791", "patch": "@@ -1,3 +1,10 @@\n+2018-08-13  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+\t* configure.ac: Check for getentropy.\n+\t* intrinsics/random.c (getosrandom): Use getentropy if available.\n+\t* config.h.in: Regenerated.\n+\t* configure: Regenerated.\n+\n 2018-07-31  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n \n \tRevert 'AsyncI/O patch committed'"}, {"sha": "9ad64d57ab91f1cb8b61a56e39201a941faa91ee", "filename": "libgfortran/config.h.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d66d6d15f1ab42c503025548d6ab9772a85ad791/libgfortran%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d66d6d15f1ab42c503025548d6ab9772a85ad791/libgfortran%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfig.h.in?ref=d66d6d15f1ab42c503025548d6ab9772a85ad791", "patch": "@@ -453,6 +453,9 @@\n /* Define to 1 if you have the `getegid' function. */\n #undef HAVE_GETEGID\n \n+/* Define to 1 if you have the `getentropy' function. */\n+#undef HAVE_GETENTROPY\n+\n /* Define to 1 if you have the `geteuid' function. */\n #undef HAVE_GETEUID\n "}, {"sha": "42b4c0b5cb4dcdfbb811fe71919802fb8b13d980", "filename": "libgfortran/configure", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d66d6d15f1ab42c503025548d6ab9772a85ad791/libgfortran%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d66d6d15f1ab42c503025548d6ab9772a85ad791/libgfortran%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfigure?ref=d66d6d15f1ab42c503025548d6ab9772a85ad791", "patch": "@@ -2570,6 +2570,7 @@ as_fn_append ac_func_list \" snprintf\"\n as_fn_append ac_func_list \" ftruncate\"\n as_fn_append ac_func_list \" chsize\"\n as_fn_append ac_func_list \" chdir\"\n+as_fn_append ac_func_list \" getentropy\"\n as_fn_append ac_func_list \" getlogin\"\n as_fn_append ac_func_list \" gethostname\"\n as_fn_append ac_func_list \" kill\"\n@@ -12512,7 +12513,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 12515 \"configure\"\n+#line 12516 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -12618,7 +12619,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 12621 \"configure\"\n+#line 12622 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -16775,6 +16776,8 @@ done\n \n \n \n+\n+\n \n \n "}, {"sha": "900c7466decba1810833f276192b302b036d51d2", "filename": "libgfortran/configure.ac", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d66d6d15f1ab42c503025548d6ab9772a85ad791/libgfortran%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d66d6d15f1ab42c503025548d6ab9772a85ad791/libgfortran%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfigure.ac?ref=d66d6d15f1ab42c503025548d6ab9772a85ad791", "patch": "@@ -312,7 +312,8 @@ if test \"${hardwire_newlib:-0}\" -eq 1; then\n    fi\n else\n    AC_CHECK_FUNCS_ONCE(getrusage times mkstemp strtof strtold snprintf \\\n-   ftruncate chsize chdir getlogin gethostname kill link symlink sleep ttyname \\\n+   ftruncate chsize chdir getentropy getlogin gethostname kill link symlink \\\n+   sleep ttyname \\\n    alarm access fork setmode fcntl \\\n    gettimeofday stat fstat lstat getpwuid vsnprintf dup \\\n    getcwd localtime_r gmtime_r getpwuid_r ttyname_r clock_gettime \\"}, {"sha": "229fa6995c0ba365de989c433e66bc606846aeec", "filename": "libgfortran/intrinsics/random.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d66d6d15f1ab42c503025548d6ab9772a85ad791/libgfortran%2Fintrinsics%2Frandom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d66d6d15f1ab42c503025548d6ab9772a85ad791/libgfortran%2Fintrinsics%2Frandom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Frandom.c?ref=d66d6d15f1ab42c503025548d6ab9772a85ad791", "patch": "@@ -310,11 +310,10 @@ getosrandom (void *buf, size_t buflen)\n     rand_s (&b[i]);\n   return buflen;\n #else\n-  /*\n-     TODO: When glibc adds a wrapper for the getrandom() system call\n-     on Linux, one could use that.\n-\n-     TODO: One could use getentropy() on OpenBSD.  */\n+#ifdef HAVE_GETENTROPY\n+  if (getentropy (buf, buflen) == 0)\n+    return 0;\n+#endif\n   int flags = O_RDONLY;\n #ifdef O_CLOEXEC\n   flags |= O_CLOEXEC;"}]}