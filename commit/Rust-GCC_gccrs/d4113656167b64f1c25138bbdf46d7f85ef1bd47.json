{"sha": "d4113656167b64f1c25138bbdf46d7f85ef1bd47", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDQxMTM2NTYxNjdiNjRmMWMyNTEzOGJiZGY0NmQ3Zjg1ZWYxYmQ0Nw==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2005-04-08T21:13:57Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2005-04-08T21:13:57Z"}, "message": "re PR c++/20905 (confuses unrelated type name with instance name)\n\n\tPR c++/20905\n\t* parser.c (cp_parser_type_specifier_seq): Add is_condition\n\tparameter.\n\t(cp_parser_new_type_id): Pass it.\n\t(cp_parser_condition): Likewise.\n\t(cp_parser_conversion_type_id): Likewise.\n\t(cp_parser_type_id): Likewise.\n\t(cp_parser_type_specifier_seq): In a condition, do not allow\n\tinvalid type-specifier combinations.\n\t(cp_parser_exception_declaration): Adjust call to\n\tcp_parser_type_specifier_seq.\n\n\tPR c++/20905\n\t* g++.dg/parse/cond2.C: New test.\n\nFrom-SVN: r97857", "tree": {"sha": "b7e912e2ceef8e6cf2a6d1ba9186e1ee98ce2282", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b7e912e2ceef8e6cf2a6d1ba9186e1ee98ce2282"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d4113656167b64f1c25138bbdf46d7f85ef1bd47", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4113656167b64f1c25138bbdf46d7f85ef1bd47", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4113656167b64f1c25138bbdf46d7f85ef1bd47", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4113656167b64f1c25138bbdf46d7f85ef1bd47/comments", "author": null, "committer": null, "parents": [{"sha": "12af7ba340f80ef1222034ebe0ce88a4130a0462", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12af7ba340f80ef1222034ebe0ce88a4130a0462", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12af7ba340f80ef1222034ebe0ce88a4130a0462"}], "stats": {"total": 96, "additions": 78, "deletions": 18}, "files": [{"sha": "50c1f0c620c9bbde158d7ce091191fc542d6ad9d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4113656167b64f1c25138bbdf46d7f85ef1bd47/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4113656167b64f1c25138bbdf46d7f85ef1bd47/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d4113656167b64f1c25138bbdf46d7f85ef1bd47", "patch": "@@ -1,5 +1,17 @@\n 2005-04-08  Mark Mitchell  <mark@codesourcery.com>\n \n+\tPR c++/20905\n+\t* parser.c (cp_parser_type_specifier_seq): Add is_condition\n+\tparameter.\n+\t(cp_parser_new_type_id): Pass it.\n+\t(cp_parser_condition): Likewise.\n+\t(cp_parser_conversion_type_id): Likewise.\n+\t(cp_parser_type_id): Likewise.\n+\t(cp_parser_type_specifier_seq): In a condition, do not allow\n+\tinvalid type-specifier combinations.\n+\t(cp_parser_exception_declaration): Adjust call to\n+\tcp_parser_type_specifier_seq. \n+\n \t* cp-tree.def (TINST_LEVEL): Document TINST_IN_SYSTEM_HEADER_P.\n \t* cp-tree.h (struct tinst_level): Add in_system_header_p.\n \t(TINST_IN_SYSTEM_HEADER_P): New macro."}, {"sha": "8a1137290e7dbd7f2db3a85dcd289c65a8046eea", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 49, "deletions": 18, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4113656167b64f1c25138bbdf46d7f85ef1bd47/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4113656167b64f1c25138bbdf46d7f85ef1bd47/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=d4113656167b64f1c25138bbdf46d7f85ef1bd47", "patch": "@@ -1510,7 +1510,7 @@ static tree cp_parser_declarator_id\n static tree cp_parser_type_id\n   (cp_parser *);\n static void cp_parser_type_specifier_seq\n-  (cp_parser *, cp_decl_specifier_seq *);\n+  (cp_parser *, bool, cp_decl_specifier_seq *);\n static cp_parameter_declarator *cp_parser_parameter_declaration_clause\n   (cp_parser *);\n static cp_parameter_declarator *cp_parser_parameter_declaration_list\n@@ -4973,7 +4973,8 @@ cp_parser_new_type_id (cp_parser* parser, tree *nelts)\n   parser->type_definition_forbidden_message\n     = \"types may not be defined in a new-type-id\";\n   /* Parse the type-specifier-seq.  */\n-  cp_parser_type_specifier_seq (parser, &type_specifier_seq);\n+  cp_parser_type_specifier_seq (parser, /*is_condition=*/false,\n+\t\t\t\t&type_specifier_seq);\n   /* Restore the old message.  */\n   parser->type_definition_forbidden_message = saved_message;\n   /* Parse the new-declarator.  */\n@@ -6305,7 +6306,8 @@ cp_parser_condition (cp_parser* parser)\n   parser->type_definition_forbidden_message\n     = \"types may not be defined in conditions\";\n   /* Parse the type-specifier-seq.  */\n-  cp_parser_type_specifier_seq (parser, &type_specifiers);\n+  cp_parser_type_specifier_seq (parser, /*is_condition==*/true,\n+\t\t\t\t&type_specifiers);\n   /* Restore the saved message.  */\n   parser->type_definition_forbidden_message = saved_message;\n   /* If all is well, we might be looking at a declaration.  */\n@@ -7564,7 +7566,8 @@ cp_parser_conversion_type_id (cp_parser* parser)\n   /* Parse the attributes.  */\n   attributes = cp_parser_attributes_opt (parser);\n   /* Parse the type-specifiers.  */\n-  cp_parser_type_specifier_seq (parser, &type_specifiers);\n+  cp_parser_type_specifier_seq (parser, /*is_condition=*/false,\n+\t\t\t\t&type_specifiers);\n   /* If that didn't work, stop.  */\n   if (type_specifiers.type == error_mark_node)\n     return error_mark_node;\n@@ -11503,7 +11506,8 @@ cp_parser_type_id (cp_parser* parser)\n   cp_declarator *abstract_declarator;\n \n   /* Parse the type-specifier-seq.  */\n-  cp_parser_type_specifier_seq (parser, &type_specifier_seq);\n+  cp_parser_type_specifier_seq (parser, /*is_condition=*/false,\n+\t\t\t\t&type_specifier_seq);\n   if (type_specifier_seq.type == error_mark_node)\n     return error_mark_node;\n \n@@ -11531,13 +11535,18 @@ cp_parser_type_id (cp_parser* parser)\n    type-specifier-seq:\n      attributes type-specifier-seq [opt]\n \n+   If IS_CONDITION is true, we are at the start of a \"condition\",\n+   e.g., we've just seen \"if (\".\n+\n    Sets *TYPE_SPECIFIER_SEQ to represent the sequence.  */\n \n static void\n cp_parser_type_specifier_seq (cp_parser* parser,\n+\t\t\t      bool is_condition,\n \t\t\t      cp_decl_specifier_seq *type_specifier_seq)\n {\n   bool seen_type_specifier = false;\n+  cp_parser_flags flags = CP_PARSER_FLAGS_OPTIONAL;\n \n   /* Clear the TYPE_SPECIFIER_SEQ.  */\n   clear_decl_specs (type_specifier_seq);\n@@ -11546,6 +11555,7 @@ cp_parser_type_specifier_seq (cp_parser* parser,\n   while (true)\n     {\n       tree type_specifier;\n+      bool is_cv_qualifier;\n \n       /* Check for attributes first.  */\n       if (cp_lexer_next_token_is_keyword (parser->lexer, RID_ATTRIBUTE))\n@@ -11558,25 +11568,45 @@ cp_parser_type_specifier_seq (cp_parser* parser,\n \n       /* Look for the type-specifier.  */\n       type_specifier = cp_parser_type_specifier (parser,\n-\t\t\t\t\t\t CP_PARSER_FLAGS_OPTIONAL,\n+\t\t\t\t\t\t flags,\n \t\t\t\t\t\t type_specifier_seq,\n \t\t\t\t\t\t /*is_declaration=*/false,\n \t\t\t\t\t\t NULL,\n-\t\t\t\t\t\t NULL);\n-      /* If the first type-specifier could not be found, this is not a\n-\t type-specifier-seq at all.  */\n-      if (!seen_type_specifier && !type_specifier)\n+\t\t\t\t\t\t &is_cv_qualifier);\n+      if (!type_specifier)\n \t{\n-\t  cp_parser_error (parser, \"expected type-specifier\");\n-\t  type_specifier_seq->type = error_mark_node;\n-\t  return;\n+\t  /* If the first type-specifier could not be found, this is not a\n+\t     type-specifier-seq at all.  */\n+\t  if (!seen_type_specifier)\n+\t    {\n+\t      cp_parser_error (parser, \"expected type-specifier\");\n+\t      type_specifier_seq->type = error_mark_node;\n+\t      return;\n+\t    }\n+\t  /* If subsequent type-specifiers could not be found, the\n+\t     type-specifier-seq is complete.  */\n+\t  break;\n \t}\n-      /* If subsequent type-specifiers could not be found, the\n-\t type-specifier-seq is complete.  */\n-      else if (seen_type_specifier && !type_specifier)\n-\tbreak;\n \n       seen_type_specifier = true;\n+      /* The standard says that a condition can be:\n+\n+            type-specifier-seq declarator = assignment-expression\n+      \n+\t However, given:\n+\n+\t   struct S {};\n+\t   if (int S = ...)\n+\n+         we should treat the \"S\" as a declarator, not as a\n+         type-specifier.  The standard doesn't say that explicitly for\n+         type-specifier-seq, but it does say that for\n+         decl-specifier-seq in an ordinary declaration.  Perhaps it\n+         would be clearer just to allow a decl-specifier-seq here, and\n+         then add a semantic restriction that if any decl-specifiers\n+         that are not type-specifiers appear, the program is invalid.  */\n+      if (is_condition && !is_cv_qualifier)\n+\tflags |= CP_PARSER_FLAGS_NO_USER_DEFINED_TYPES; \n     }\n \n   return;\n@@ -13830,7 +13860,8 @@ cp_parser_exception_declaration (cp_parser* parser)\n     = \"types may not be defined in exception-declarations\";\n \n   /* Parse the type-specifier-seq.  */\n-  cp_parser_type_specifier_seq (parser, &type_specifiers);\n+  cp_parser_type_specifier_seq (parser, /*is_condition=*/false,\n+\t\t\t\t&type_specifiers);\n   /* If it's a `)', then there is no declarator.  */\n   if (cp_lexer_next_token_is (parser->lexer, CPP_CLOSE_PAREN))\n     declarator = NULL;"}, {"sha": "9d59bfc06e1d942dfae7c17c4cf60a7e017da95b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4113656167b64f1c25138bbdf46d7f85ef1bd47/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4113656167b64f1c25138bbdf46d7f85ef1bd47/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d4113656167b64f1c25138bbdf46d7f85ef1bd47", "patch": "@@ -1,5 +1,8 @@\n 2005-04-08  Mark Mitchell  <mark@codesourcery.com>\n \n+\tPR c++/20905\n+\t* g++.dg/parse/cond2.C: New test.\n+\n \tPR c++/20145\n \t* g++.dg/warn/Wdtor1.C: New test.\n "}, {"sha": "2dbe42b34f312a734ca2505cc6f61aa29a42649c", "filename": "gcc/testsuite/g++.dg/parse/cond2.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4113656167b64f1c25138bbdf46d7f85ef1bd47/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcond2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4113656167b64f1c25138bbdf46d7f85ef1bd47/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcond2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcond2.C?ref=d4113656167b64f1c25138bbdf46d7f85ef1bd47", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/20905\n+\n+struct name {};\n+\n+int \n+f ();\n+\n+void \n+g ()\n+{\n+  if (int name = f ())\n+    {\n+    }\n+}"}]}