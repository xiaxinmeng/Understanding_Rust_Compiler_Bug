{"sha": "a67f7692fff13fd2d1ac6ed819692e01348aae4a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTY3Zjc2OTJmZmYxM2ZkMmQxYWM2ZWQ4MTk2OTJlMDEzNDhhYWU0YQ==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1994-12-29T02:46:10Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1994-12-29T02:46:10Z"}, "message": "(truncdiqi2+[123]): Add patterns to optimize DImode to\nSImode truncation.\n\nFrom-SVN: r8699", "tree": {"sha": "bc35620b69fb3ac009dd873c97da01a2339c94a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bc35620b69fb3ac009dd873c97da01a2339c94a6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a67f7692fff13fd2d1ac6ed819692e01348aae4a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a67f7692fff13fd2d1ac6ed819692e01348aae4a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a67f7692fff13fd2d1ac6ed819692e01348aae4a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a67f7692fff13fd2d1ac6ed819692e01348aae4a/comments", "author": null, "committer": null, "parents": [{"sha": "8c2977e27dc94cd658658ca9bc48875019c434fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c2977e27dc94cd658658ca9bc48875019c434fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c2977e27dc94cd658658ca9bc48875019c434fc"}], "stats": {"total": 77, "additions": 72, "deletions": 5}, "files": [{"sha": "0a42a590bc12cd5e09a40a03321e31ed68e69b86", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 72, "deletions": 5, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a67f7692fff13fd2d1ac6ed819692e01348aae4a/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a67f7692fff13fd2d1ac6ed819692e01348aae4a/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=a67f7692fff13fd2d1ac6ed819692e01348aae4a", "patch": "@@ -1945,11 +1945,6 @@ move\\\\t%0,%z4\\\\n\\\\\n    (set_attr \"mode\"\t\"SF\")\n    (set_attr \"length\"\t\"1\")])\n \n-;; ??? This should be a define expand.\n-;; See the zero_extendsidi2 pattern.\n-;; ??? We tried define expands, but they did not work.  Too many shift\n-;; instructions were optimized away.  Perhaps add combiner patterns to\n-;; recognize cases where shifts and truncates can be combined.\n (define_insn \"truncdisi2\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n \t(truncate:SI (match_operand:DI 1 \"register_operand\" \"d\")))]\n@@ -1976,6 +1971,78 @@ move\\\\t%0,%z4\\\\n\\\\\n   [(set_attr \"type\"\t\"darith\")\n    (set_attr \"mode\"\t\"QI\")\n    (set_attr \"length\"\t\"1\")])\n+\n+;; Combiner patterns to optimize shift/truncate combinations.\n+(define_insn \"\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n+\t(truncate:SI (ashiftrt:DI (match_operand:DI 1 \"register_operand\" \"d\")\n+\t\t\t\t  (match_operand:DI 2 \"small_int\" \"I\"))))]\n+  \"TARGET_64BIT\"\n+  \"*\n+{\n+  int shift_amt = INTVAL (operands[2]) & 0x3f;\n+\n+  if (shift_amt < 32)\n+    {\n+      operands[2] = GEN_INT (32 - shift_amt);\n+      return \\\"dsll\\\\t%0,%1,%2\\;dsra\\\\t%0,%0,32\\\";\n+    }\n+  else\n+    {\n+      operands[2] = GEN_INT (shift_amt);\n+      return \\\"dsra\\\\t%0,%1,%2\\\";\n+    }\n+}\"\n+  [(set_attr \"type\"\t\"darith\")\n+   (set_attr \"mode\"\t\"SI\")\n+   (set_attr \"length\"\t\"2\")])\n+\t\n+(define_insn \"\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n+\t(truncate:SI (lshiftrt:DI (match_operand:DI 1 \"register_operand\" \"d\")\n+\t\t\t\t  (match_operand:DI 2 \"small_int\" \"I\"))))]\n+  \"TARGET_64BIT\"\n+  \"*\n+{\n+  int shift_amt = INTVAL (operands[2]) & 0x3f;\n+\n+  if (shift_amt < 32)\n+    {\n+      operands[2] = GEN_INT (32 - shift_amt);\n+      return \\\"dsll\\\\t%0,%1,%2\\;dsra\\\\t%0,%0,32\\\";\n+    }\n+  else if (shift_amt == 32)\n+    return \\\"dsra\\\\t%0,%1,32\\\";\n+  else\n+    {\n+      operands[2] = GEN_INT (shift_amt);\n+      return \\\"dsrl\\\\t%0,%1,%2\\\";\n+    }\n+}\"\n+  [(set_attr \"type\"\t\"darith\")\n+   (set_attr \"mode\"\t\"SI\")\n+   (set_attr \"length\"\t\"2\")])\n+\n+(define_insn \"\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n+\t(truncate:SI (ashift:DI (match_operand:DI 1 \"register_operand\" \"d\")\n+\t\t\t\t(match_operand:DI 2 \"small_int\" \"I\"))))]\n+  \"TARGET_64BIT\"\n+  \"*\n+{\n+  int shift_amt = INTVAL (operands[2]) & 0x3f;\n+\n+  if (shift_amt < 32)\n+    {\n+      operands[2] = GEN_INT (32 + shift_amt);\n+      return \\\"dsll\\\\t%0,%1,%2\\;dsra\\\\t%0,%0,32\\\";\n+    }\n+  else\n+    return \\\"move\\\\t%0,%.\\\";\n+}\"\n+  [(set_attr \"type\"\t\"darith\")\n+   (set_attr \"mode\"\t\"SI\")\n+   (set_attr \"length\"\t\"2\")])\n \f\n ;;\n ;;  ...................."}]}