{"sha": "c4686982aaf87c31ecb76bb361ec3a6685913e4b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzQ2ODY5ODJhYWY4N2MzMWVjYjc2YmIzNjFlYzNhNjY4NTkxM2U0Yg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "2000-05-01T06:55:44Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-05-01T06:55:44Z"}, "message": "ifcvt.c (noce_process_if_block): Fail the conversion if X is referenced bewteen the condition and the jump.\n\n        * ifcvt.c (noce_process_if_block): Fail the conversion if X is\n        referenced bewteen the condition and the jump.  Don't delete\n        anything but the jump.\n\nFrom-SVN: r33563", "tree": {"sha": "39852d20e67e689559350a4521e3abf6099689cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/39852d20e67e689559350a4521e3abf6099689cc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c4686982aaf87c31ecb76bb361ec3a6685913e4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4686982aaf87c31ecb76bb361ec3a6685913e4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4686982aaf87c31ecb76bb361ec3a6685913e4b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4686982aaf87c31ecb76bb361ec3a6685913e4b/comments", "author": null, "committer": null, "parents": [{"sha": "5724a0e6410d5f68761acc1ba338cce11d3677c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5724a0e6410d5f68761acc1ba338cce11d3677c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5724a0e6410d5f68761acc1ba338cce11d3677c8"}], "stats": {"total": 23, "additions": 17, "deletions": 6}, "files": [{"sha": "24a3187dbd2da5e846facc8fc50831b3ddf5abb7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4686982aaf87c31ecb76bb361ec3a6685913e4b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4686982aaf87c31ecb76bb361ec3a6685913e4b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c4686982aaf87c31ecb76bb361ec3a6685913e4b", "patch": "@@ -1,3 +1,9 @@\n+2000-04-30  Richard Henderson  <rth@cygnus.com>\n+\n+\t* ifcvt.c (noce_process_if_block): Fail the conversion if X is\n+\treferenced bewteen the condition and the jump.  Don't delete\n+\tanything but the jump.\n+\n Sun Apr 30 22:48:24 2000  Jason Eckhardt  <jle@cygnus.com>\n \n \t* bb-reorder.c (scope_def): New struct."}, {"sha": "ba310da9d8494072dae93fbc1eba84ec377aa239", "filename": "gcc/ifcvt.c", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4686982aaf87c31ecb76bb361ec3a6685913e4b/gcc%2Fifcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4686982aaf87c31ecb76bb361ec3a6685913e4b/gcc%2Fifcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fifcvt.c?ref=c4686982aaf87c31ecb76bb361ec3a6685913e4b", "patch": "@@ -1024,7 +1024,7 @@ noce_process_if_block (test_bb, then_bb, else_bb, join_bb)\n   rtx insn_a, insn_b;\n   rtx set_a, set_b;\n   rtx orig_x, x, a, b;\n-  rtx jump, cond;\n+  rtx jump, cond, insn;\n \n   /* If this is not a standard conditional jump, we can't parse it.  */\n   jump = test_bb->end;\n@@ -1046,6 +1046,11 @@ noce_process_if_block (test_bb, then_bb, else_bb, join_bb)\n   x = SET_DEST (set_a);\n   a = SET_SRC (set_a);\n \n+  /* X may not be mentioned between cond_earliest and the jump.  */\n+  for (insn = jump; insn != if_info.cond_earliest; insn = PREV_INSN (insn))\n+    if (INSN_P (insn) && reg_mentioned_p (x, insn))\n+      return FALSE;\n+\n   /* Look for the other potential set.  Make sure we've got equivalent\n      destinations.  */\n   /* ??? This is overconservative.  Storing to two different mems is\n@@ -1165,10 +1170,10 @@ noce_process_if_block (test_bb, then_bb, else_bb, join_bb)\n     }\n \n   /* The new insns will have been inserted before cond_earliest.  We should\n-     be able to remove cond_earliest through the jump with impunity.  */\n-  insn_a = prev_nonnote_insn (if_info.cond_earliest);\n-  flow_delete_insn_chain (if_info.cond_earliest, test_bb->end);\n-  test_bb->end = insn_a;\n+     be able to remove the jump with impunity, but the condition itself may\n+     have been modified by gcse to be shared across basic blocks.  */\n+  test_bb->end = PREV_INSN (jump);\n+  flow_delete_insn (jump);\n \n   /* If we used a temporary, fix it up now.  */\n   if (orig_x != x)\n@@ -1178,7 +1183,7 @@ noce_process_if_block (test_bb, then_bb, else_bb, join_bb)\n       insn_b = gen_sequence ();\n       end_sequence ();\n \n-      test_bb->end = emit_insn_after (insn_b, insn_a);\n+      test_bb->end = emit_insn_after (insn_b, test_bb->end);\n     }\n \n   /* Merge the blocks!  */"}]}