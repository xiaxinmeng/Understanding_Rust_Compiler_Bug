{"sha": "1e66d5559115b2cc657846ed95c9548dee14f235", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWU2NmQ1NTU5MTE1YjJjYzY1Nzg0NmVkOTVjOTU0OGRlZTE0ZjIzNQ==", "commit": {"author": {"name": "Geoff Keating", "email": "geoffk@cygnus.com", "date": "2000-07-21T00:44:14Z"}, "committer": {"name": "Geoffrey Keating", "email": "geoffk@gcc.gnu.org", "date": "2000-07-21T00:44:14Z"}, "message": "rs6000.h (PREFERRED_RELOAD_CLASS): If we have a choice, don't put integer values in FP regs.\n\n* config/rs6000/rs6000.h (PREFERRED_RELOAD_CLASS): If we have a\nchoice, don't put integer values in FP regs.\n\nFrom-SVN: r35162", "tree": {"sha": "1987ae609d40fbb933dc6aa9d030cbdb48ecc017", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1987ae609d40fbb933dc6aa9d030cbdb48ecc017"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1e66d5559115b2cc657846ed95c9548dee14f235", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e66d5559115b2cc657846ed95c9548dee14f235", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e66d5559115b2cc657846ed95c9548dee14f235", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e66d5559115b2cc657846ed95c9548dee14f235/comments", "author": null, "committer": null, "parents": [{"sha": "21f096b3a94f07afe91cd16bba48aa7c143eb785", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21f096b3a94f07afe91cd16bba48aa7c143eb785", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21f096b3a94f07afe91cd16bba48aa7c143eb785"}], "stats": {"total": 27, "additions": 23, "deletions": 4}, "files": [{"sha": "985e5c904860e7062253df69b55f4042751d60ca", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e66d5559115b2cc657846ed95c9548dee14f235/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e66d5559115b2cc657846ed95c9548dee14f235/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1e66d5559115b2cc657846ed95c9548dee14f235", "patch": "@@ -1,3 +1,8 @@\n+2000-07-20  Geoff Keating  <geoffk@cygnus.com>\n+\n+\t* config/rs6000/rs6000.h (PREFERRED_RELOAD_CLASS): If we have a\n+\tchoice, don't put integer values in FP regs.\n+\n Thu Jul 20 18:13:52 2000  Jeffrey A Law  (law@cygnus.com)\n \n \t* flow.c (verify_flow_info): Revamp code to verify that the"}, {"sha": "12473971563387547e61934bacc53caa3ae9ad2c", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e66d5559115b2cc657846ed95c9548dee14f235/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e66d5559115b2cc657846ed95c9548dee14f235/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=1e66d5559115b2cc657846ed95c9548dee14f235", "patch": "@@ -1105,12 +1105,26 @@ enum reg_class\n    in some cases it is preferable to use a more restrictive class.\n \n    On the RS/6000, we have to return NO_REGS when we want to reload a\n-   floating-point CONST_DOUBLE to force it to be copied to memory.  */\n+   floating-point CONST_DOUBLE to force it to be copied to memory.  \n+\n+   We also don't want to reload integer values into floating-point\n+   registers if we can at all help it.  In fact, this can\n+   cause reload to abort, if it tries to generate a reload of CTR\n+   into a FP register and discovers it doesn't have the memory location\n+   required.\n+\n+   ??? Would it be a good idea to have reload do the converse, that is\n+   try to reload floating modes into FP registers if possible?\n+ */\n \n #define PREFERRED_RELOAD_CLASS(X,CLASS)\t\t\t\\\n-  ((GET_CODE (X) == CONST_DOUBLE\t\t\t\\\n-    && GET_MODE_CLASS (GET_MODE (X)) == MODE_FLOAT)\t\\\n-   ? NO_REGS : (CLASS))\n+  (((GET_CODE (X) == CONST_DOUBLE\t\t\t\\\n+     && GET_MODE_CLASS (GET_MODE (X)) == MODE_FLOAT)\t\\\n+    ? NO_REGS \t\t\t\t\t\t\\\n+    : (GET_MODE_CLASS (GET_MODE (X)) == MODE_INT \t\\\n+       && (CLASS) == NON_SPECIAL_REGS)\t\t\t\\\n+    ? GENERAL_REGS\t\t\t\t\t\\\n+    : (CLASS)))\n \n /* Return the register class of a scratch register needed to copy IN into\n    or out of a register in CLASS in MODE.  If it can be done directly,"}]}