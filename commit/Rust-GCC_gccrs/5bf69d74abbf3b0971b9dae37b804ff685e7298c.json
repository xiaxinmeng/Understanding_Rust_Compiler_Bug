{"sha": "5bf69d74abbf3b0971b9dae37b804ff685e7298c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWJmNjlkNzRhYmJmM2IwOTcxYjlkYWUzN2I4MDRmZjY4NWU3Mjk4Yw==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2017-02-17T09:51:38Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2017-02-17T09:51:38Z"}, "message": "re PR middle-end/79536 (ICE in fold_binary_loc, at fold-const.c:9060)\n\n\tPR middle-end/79536\n\t* fold-const.c (fold_negate_expr_1): Renamed from fold_negate_expr.\n\t(fold_negate_expr): New wrapper.\n\n\t* gcc.dg/torture/pr79536.c: New test.\n\nFrom-SVN: r245526", "tree": {"sha": "6eb599938beefc3cd66ca5dcf874dab6c0fe890f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6eb599938beefc3cd66ca5dcf874dab6c0fe890f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5bf69d74abbf3b0971b9dae37b804ff685e7298c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bf69d74abbf3b0971b9dae37b804ff685e7298c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5bf69d74abbf3b0971b9dae37b804ff685e7298c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bf69d74abbf3b0971b9dae37b804ff685e7298c/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6a011df26ef12e31343fcb2ce4f47fb74be34f71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a011df26ef12e31343fcb2ce4f47fb74be34f71", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a011df26ef12e31343fcb2ce4f47fb74be34f71"}], "stats": {"total": 55, "additions": 45, "deletions": 10}, "files": [{"sha": "b7d0d8ed436f8e6f5983cf29451124ceaaa16460", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bf69d74abbf3b0971b9dae37b804ff685e7298c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bf69d74abbf3b0971b9dae37b804ff685e7298c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5bf69d74abbf3b0971b9dae37b804ff685e7298c", "patch": "@@ -1,3 +1,9 @@\n+2017-02-17  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR middle-end/79536\n+\t* fold-const.c (fold_negate_expr_1): Renamed from fold_negate_expr.\n+\t(fold_negate_expr): New wrapper.\n+\n 2017-02-16  Sandra Loosemore  <sandra@codesourcery.com>\n \n \t* doc/invoke.texi (C++ Dialect Options) [-Wno-non-template-friend]: "}, {"sha": "ad4770b43d2ae344930339bd65f09af592765329", "filename": "gcc/fold-const.c", "status": "modified", "additions": 24, "deletions": 10, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bf69d74abbf3b0971b9dae37b804ff685e7298c/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bf69d74abbf3b0971b9dae37b804ff685e7298c/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=5bf69d74abbf3b0971b9dae37b804ff685e7298c", "patch": "@@ -139,6 +139,7 @@ static tree fold_relational_const (enum tree_code, tree, tree, tree);\n static tree fold_convert_const (enum tree_code, tree, tree);\n static tree fold_view_convert_expr (tree, tree);\n static bool vec_cst_ctor_to_array (tree, tree *);\n+static tree fold_negate_expr (location_t, tree);\n \n \n /* Return EXPR_LOCATION of T if it is not UNKNOWN_LOCATION.\n@@ -522,7 +523,7 @@ negate_expr_p (tree t)\n    returned.  */\n \n static tree\n-fold_negate_expr (location_t loc, tree t)\n+fold_negate_expr_1 (location_t loc, tree t)\n {\n   tree type = TREE_TYPE (t);\n   tree tem;\n@@ -533,7 +534,7 @@ fold_negate_expr (location_t loc, tree t)\n     case BIT_NOT_EXPR:\n       if (INTEGRAL_TYPE_P (type))\n         return fold_build2_loc (loc, PLUS_EXPR, type, TREE_OPERAND (t, 0),\n-                            build_one_cst (type));\n+\t\t\t\tbuild_one_cst (type));\n       break;\n \n     case INTEGER_CST:\n@@ -581,14 +582,14 @@ fold_negate_expr (location_t loc, tree t)\n     case COMPLEX_EXPR:\n       if (negate_expr_p (t))\n \treturn fold_build2_loc (loc, COMPLEX_EXPR, type,\n-\t\t\t    fold_negate_expr (loc, TREE_OPERAND (t, 0)),\n-\t\t\t    fold_negate_expr (loc, TREE_OPERAND (t, 1)));\n+\t\t\t\tfold_negate_expr (loc, TREE_OPERAND (t, 0)),\n+\t\t\t\tfold_negate_expr (loc, TREE_OPERAND (t, 1)));\n       break;\n \n     case CONJ_EXPR:\n       if (negate_expr_p (t))\n \treturn fold_build1_loc (loc, CONJ_EXPR, type,\n-\t\t\t    fold_negate_expr (loc, TREE_OPERAND (t, 0)));\n+\t\t\t\tfold_negate_expr (loc, TREE_OPERAND (t, 0)));\n       break;\n \n     case NEGATE_EXPR:\n@@ -605,15 +606,15 @@ fold_negate_expr (location_t loc, tree t)\n \t    {\n \t      tem = negate_expr (TREE_OPERAND (t, 1));\n \t      return fold_build2_loc (loc, MINUS_EXPR, type,\n-\t\t\t\t  tem, TREE_OPERAND (t, 0));\n+\t\t\t\t      tem, TREE_OPERAND (t, 0));\n \t    }\n \n \t  /* -(A + B) -> (-A) - B.  */\n \t  if (negate_expr_p (TREE_OPERAND (t, 0)))\n \t    {\n \t      tem = negate_expr (TREE_OPERAND (t, 0));\n \t      return fold_build2_loc (loc, MINUS_EXPR, type,\n-\t\t\t\t  tem, TREE_OPERAND (t, 1));\n+\t\t\t\t      tem, TREE_OPERAND (t, 1));\n \t    }\n \t}\n       break;\n@@ -623,7 +624,7 @@ fold_negate_expr (location_t loc, tree t)\n       if (!HONOR_SIGN_DEPENDENT_ROUNDING (element_mode (type))\n \t  && !HONOR_SIGNED_ZEROS (element_mode (type)))\n \treturn fold_build2_loc (loc, MINUS_EXPR, type,\n-\t\t\t    TREE_OPERAND (t, 1), TREE_OPERAND (t, 0));\n+\t\t\t\tTREE_OPERAND (t, 1), TREE_OPERAND (t, 0));\n       break;\n \n     case MULT_EXPR:\n@@ -638,11 +639,11 @@ fold_negate_expr (location_t loc, tree t)\n \t  tem = TREE_OPERAND (t, 1);\n \t  if (negate_expr_p (tem))\n \t    return fold_build2_loc (loc, TREE_CODE (t), type,\n-\t\t\t\tTREE_OPERAND (t, 0), negate_expr (tem));\n+\t\t\t\t    TREE_OPERAND (t, 0), negate_expr (tem));\n \t  tem = TREE_OPERAND (t, 0);\n \t  if (negate_expr_p (tem))\n \t    return fold_build2_loc (loc, TREE_CODE (t), type,\n-\t\t\t\tnegate_expr (tem), TREE_OPERAND (t, 1));\n+\t\t\t\t    negate_expr (tem), TREE_OPERAND (t, 1));\n \t}\n       break;\n \n@@ -715,6 +716,19 @@ fold_negate_expr (location_t loc, tree t)\n   return NULL_TREE;\n }\n \n+/* A wrapper for fold_negate_expr_1.  */\n+\n+static tree\n+fold_negate_expr (location_t loc, tree t)\n+{\n+  tree type = TREE_TYPE (t);\n+  STRIP_SIGN_NOPS (t);\n+  tree tem = fold_negate_expr_1 (loc, t);\n+  if (tem == NULL_TREE)\n+    return NULL_TREE;\n+  return fold_convert_loc (loc, type, tem);\n+}\n+\n /* Like fold_negate_expr, but return a NEGATE_EXPR tree, if T can not be\n    negated in a simpler way.  Also allow for T to be NULL_TREE, in which case\n    return NULL_TREE. */"}, {"sha": "abd9308a80a761a857a5d1f606baa84d2e00d3c9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bf69d74abbf3b0971b9dae37b804ff685e7298c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bf69d74abbf3b0971b9dae37b804ff685e7298c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5bf69d74abbf3b0971b9dae37b804ff685e7298c", "patch": "@@ -1,3 +1,8 @@\n+2017-02-17  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR middle-end/79536\n+\t* gcc.dg/torture/pr79536.c: New test.\n+\n 2017-02-16  Alan Modra  <amodra@gmail.com>\n \n \t* gcc.c-torture/execute/pr79286.c: New."}, {"sha": "6f05ca7d1349b0bd59df296ed8faf8be174526f0", "filename": "gcc/testsuite/gcc.dg/torture/pr79536.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bf69d74abbf3b0971b9dae37b804ff685e7298c/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr79536.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bf69d74abbf3b0971b9dae37b804ff685e7298c/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr79536.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr79536.c?ref=5bf69d74abbf3b0971b9dae37b804ff685e7298c", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+\n+typedef int A;\n+int\n+fn1 (A x, A y)\n+{\n+  if ((x + (x - y) * 1i) != -(-x + (y - x) * 1i))\n+    return 1;\n+  return 0;\n+}"}]}