{"sha": "7faade0f77b5bdc1c20c95d291c207aa2551e1bd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2ZhYWRlMGY3N2I1YmRjMWMyMGM5NWQyOTFjMjA3YWEyNTUxZTFiZA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2007-01-11T16:50:32Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2007-01-11T16:50:32Z"}, "message": "re PR tree-optimization/1046 (gcc less efficient than jdk for recursion with -finline-functions)\n\n\tPR tree-optimization/1046\n\t* tree-tailcall.c (suitable_for_tail_call_opt_p): Use TREE_ADDRESSABLE\n\twhen alias info is not ready.\n\t(pass_tail_recursion): Do not require aliasing.\n\t* tree-ssa-copyrename.c (pass_rename_ssa_cop): Likewise.\n\t* tree-ssa-ccp.c (pass_ccp, pass_fold_builtins): Likewise.\n\t* tree-ssa-copy.c (pass_copy_prop): Likewise.\n\t* tree-ssa-forwprop.c (pass_forwprop): Likewise.\n\t* tree-ssa-dce.c (pass_dce, pass_dce_loop, pass_cd_dce): Likewise.\n\t* passes.c (init_optimization_passes): Execute rename_ssa_copies,\n\tccp, forwprop, copy_prop, merge_phi, copy_prop, dce and tail recursion\n\tbefore inlining.\n\t* tree-ssa-operands.c (add_virtual_operand, get_indirect_ref_operand):\n\tWhen aliasing is not build, mark statement as volatile.\n\n\t* gcc.dg/tree-ssa/tailrecursion-4.c: Update dump file.\n\t* gcc.dg/tree-ssa/tailrecursion-1.c: Update dump file.\n\t* gcc.dg/tree-ssa/tailrecursion-2.c: Update dump file.\n\t* gcc.dg/tree-ssa/tailrecursion-3.c: Update dump file.\n\t* gcc.dg/tree-ssa/pr21658.c: Likewise.\n\t* gcc.dg/tree-ssa/pr15349.c: Likewise.\n\t* gcc.dg/tree-ssa/pr25501.c: Likewise.\n\t* gcc.dg/tree-ssa/vrp11.c: Make more complex so it still test\n\ttransformation in question.\n\t* gcc.dg/tree-ssa/vrp05.c: Likewise.\n\t* gcc.dg/tree-ssa/pr20701.c: Likewise.\n\t* gcc.dg/always_inline3.c: Likewise.\n\nFrom-SVN: r120681", "tree": {"sha": "b4875a136a081b16613b2c91b41d60c5a6882b7c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b4875a136a081b16613b2c91b41d60c5a6882b7c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7faade0f77b5bdc1c20c95d291c207aa2551e1bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7faade0f77b5bdc1c20c95d291c207aa2551e1bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7faade0f77b5bdc1c20c95d291c207aa2551e1bd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7faade0f77b5bdc1c20c95d291c207aa2551e1bd/comments", "author": null, "committer": null, "parents": [{"sha": "18d5e416f8b6ca75796803e6957aaa513fcf51dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18d5e416f8b6ca75796803e6957aaa513fcf51dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18d5e416f8b6ca75796803e6957aaa513fcf51dc"}], "stats": {"total": 110, "additions": 98, "deletions": 12}, "files": [{"sha": "753a47642e43a0f5acf18d150373af2032d871f2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7faade0f77b5bdc1c20c95d291c207aa2551e1bd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7faade0f77b5bdc1c20c95d291c207aa2551e1bd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7faade0f77b5bdc1c20c95d291c207aa2551e1bd", "patch": "@@ -1,3 +1,20 @@\n+2007-01-11  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR tree-optimization/1046\n+\t* tree-tailcall.c (suitable_for_tail_call_opt_p): Use TREE_ADDRESSABLE\n+\twhen alias info is not ready.\n+\t(pass_tail_recursion): Do not require aliasing.\n+\t* tree-ssa-copyrename.c (pass_rename_ssa_cop): Likewise.\n+\t* tree-ssa-ccp.c (pass_ccp, pass_fold_builtins): Likewise.\n+\t* tree-ssa-copy.c (pass_copy_prop): Likewise.\n+\t* tree-ssa-forwprop.c (pass_forwprop): Likewise.\n+\t* tree-ssa-dce.c (pass_dce, pass_dce_loop, pass_cd_dce): Likewise.\n+\t* passes.c (init_optimization_passes): Execute rename_ssa_copies,\n+\tccp, forwprop, copy_prop, merge_phi, copy_prop, dce and tail recursion\n+\tbefore inlining.\n+\t* tree-ssa-operands.c (add_virtual_operand, get_indirect_ref_operand):\n+\tWhen aliasing is not build, mark statement as volatile.\n+\n 2007-01-11  Tom Tromey  <tromey@redhat.com>\n \n \tPR preprocessor/15185, PR preprocessor/20989:"}, {"sha": "d770ffc082c06c4fc2861cd7287ecad03cb15100", "filename": "gcc/passes.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7faade0f77b5bdc1c20c95d291c207aa2551e1bd/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7faade0f77b5bdc1c20c95d291c207aa2551e1bd/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=7faade0f77b5bdc1c20c95d291c207aa2551e1bd", "patch": "@@ -481,6 +481,15 @@ init_optimization_passes (void)\n   NEXT_PASS (pass_build_ssa);\n   NEXT_PASS (pass_early_warn_uninitialized);\n   NEXT_PASS (pass_cleanup_cfg);\n+  NEXT_PASS (pass_rename_ssa_copies);\n+  NEXT_PASS (pass_ccp);\n+  \n+  NEXT_PASS (pass_forwprop);\n+  NEXT_PASS (pass_copy_prop);\n+  NEXT_PASS (pass_merge_phi);\n+  NEXT_PASS (pass_dce);\n+  NEXT_PASS (pass_tail_recursion);\n+  NEXT_PASS (pass_release_ssa_names);\n \n   *p = NULL;\n \n@@ -1003,6 +1012,11 @@ execute_ipa_pass_list (struct tree_opt_pass *pass)\n     {\n       gcc_assert (!current_function_decl);\n       gcc_assert (!cfun);\n+      if (!quiet_flag)\n+\t{\n+          fprintf (stderr, \" <%s>\", pass->name ? pass->name : \"\");\n+\t  fflush (stderr);\n+\t}\n       if (execute_one_pass (pass) && pass->sub)\n \tdo_per_function ((void (*)(void *))execute_pass_list, pass->sub);\n       if (!current_function_decl)"}, {"sha": "a296b11d66c846a5cf199f1966959d0b9905be0a", "filename": "gcc/tree-pass.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7faade0f77b5bdc1c20c95d291c207aa2551e1bd/gcc%2Ftree-pass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7faade0f77b5bdc1c20c95d291c207aa2551e1bd/gcc%2Ftree-pass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pass.h?ref=7faade0f77b5bdc1c20c95d291c207aa2551e1bd", "patch": "@@ -398,6 +398,7 @@ extern struct tree_opt_pass pass_shorten_branches;\n extern struct tree_opt_pass pass_set_nothrow_function_flags;\n extern struct tree_opt_pass pass_final;\n extern struct tree_opt_pass pass_rtl_seqabstr;\n+extern struct tree_opt_pass pass_release_ssa_names;\n \n /* The root of the compilation pass tree, once constructed.  */\n extern struct tree_opt_pass *all_passes, *all_ipa_passes, *all_lowering_passes;"}, {"sha": "efd3a26e9862f7e35fcf065083975feeec50a4e8", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7faade0f77b5bdc1c20c95d291c207aa2551e1bd/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7faade0f77b5bdc1c20c95d291c207aa2551e1bd/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=7faade0f77b5bdc1c20c95d291c207aa2551e1bd", "patch": "@@ -1431,7 +1431,7 @@ struct tree_opt_pass pass_ccp =\n   NULL,\t\t\t\t\t/* next */\n   0,\t\t\t\t\t/* static_pass_number */\n   TV_TREE_CCP,\t\t\t\t/* tv_id */\n-  PROP_cfg | PROP_ssa | PROP_alias,\t/* properties_required */\n+  PROP_cfg | PROP_ssa,\t\t\t/* properties_required */\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n@@ -2650,7 +2650,7 @@ struct tree_opt_pass pass_fold_builtins =\n   NULL,\t\t\t\t\t/* next */\n   0,\t\t\t\t\t/* static_pass_number */\n   0,\t\t\t\t\t/* tv_id */\n-  PROP_cfg | PROP_ssa | PROP_alias,\t/* properties_required */\n+  PROP_cfg | PROP_ssa,\t\t\t/* properties_required */\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */"}, {"sha": "0a17a5948dd9a614d23f5753baa58d2b4c3f6979", "filename": "gcc/tree-ssa-copy.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7faade0f77b5bdc1c20c95d291c207aa2551e1bd/gcc%2Ftree-ssa-copy.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7faade0f77b5bdc1c20c95d291c207aa2551e1bd/gcc%2Ftree-ssa-copy.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-copy.c?ref=7faade0f77b5bdc1c20c95d291c207aa2551e1bd", "patch": "@@ -1137,7 +1137,7 @@ struct tree_opt_pass pass_copy_prop =\n   NULL,\t\t\t\t\t/* next */\n   0,\t\t\t\t\t/* static_pass_number */\n   TV_TREE_COPY_PROP,\t\t\t/* tv_id */\n-  PROP_ssa | PROP_alias | PROP_cfg,\t/* properties_required */\n+  PROP_ssa | PROP_cfg,\t\t\t/* properties_required */\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */"}, {"sha": "2311afa22120ad8864f87c247640a1f269ef910c", "filename": "gcc/tree-ssa-copyrename.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7faade0f77b5bdc1c20c95d291c207aa2551e1bd/gcc%2Ftree-ssa-copyrename.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7faade0f77b5bdc1c20c95d291c207aa2551e1bd/gcc%2Ftree-ssa-copyrename.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-copyrename.c?ref=7faade0f77b5bdc1c20c95d291c207aa2551e1bd", "patch": "@@ -394,7 +394,7 @@ struct tree_opt_pass pass_rename_ssa_copies =\n   NULL,\t\t\t\t\t/* next */\n   0,\t\t\t\t\t/* static_pass_number */\n   TV_TREE_COPY_RENAME,\t\t\t/* tv_id */\n-  PROP_cfg | PROP_ssa | PROP_alias,\t/* properties_required */\n+  PROP_cfg | PROP_ssa,\t\t\t/* properties_required */\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */ "}, {"sha": "a26b87f5d8ee57ba461cb9d2af81a8f62067974e", "filename": "gcc/tree-ssa-dce.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7faade0f77b5bdc1c20c95d291c207aa2551e1bd/gcc%2Ftree-ssa-dce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7faade0f77b5bdc1c20c95d291c207aa2551e1bd/gcc%2Ftree-ssa-dce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dce.c?ref=7faade0f77b5bdc1c20c95d291c207aa2551e1bd", "patch": "@@ -859,7 +859,7 @@ struct tree_opt_pass pass_dce =\n   NULL,\t\t\t\t\t/* next */\n   0,\t\t\t\t\t/* static_pass_number */\n   TV_TREE_DCE,\t\t\t\t/* tv_id */\n-  PROP_cfg | PROP_ssa | PROP_alias,\t/* properties_required */\n+  PROP_cfg | PROP_ssa,\t\t\t/* properties_required */\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n@@ -881,7 +881,7 @@ struct tree_opt_pass pass_dce_loop =\n   NULL,\t\t\t\t\t/* next */\n   0,\t\t\t\t\t/* static_pass_number */\n   TV_TREE_DCE,\t\t\t\t/* tv_id */\n-  PROP_cfg | PROP_ssa | PROP_alias,\t/* properties_required */\n+  PROP_cfg | PROP_ssa,\t\t\t/* properties_required */\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n@@ -901,7 +901,7 @@ struct tree_opt_pass pass_cd_dce =\n   NULL,\t\t\t\t\t/* next */\n   0,\t\t\t\t\t/* static_pass_number */\n   TV_TREE_CD_DCE,\t\t\t/* tv_id */\n-  PROP_cfg | PROP_ssa | PROP_alias,\t/* properties_required */\n+  PROP_cfg | PROP_ssa,\t\t\t/* properties_required */\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */"}, {"sha": "66cc8b46acceb046f4fb4277c67483615dc69812", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7faade0f77b5bdc1c20c95d291c207aa2551e1bd/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7faade0f77b5bdc1c20c95d291c207aa2551e1bd/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=7faade0f77b5bdc1c20c95d291c207aa2551e1bd", "patch": "@@ -1060,8 +1060,7 @@ struct tree_opt_pass pass_forwprop = {\n   NULL,\t\t\t\t/* next */\n   0,\t\t\t\t/* static_pass_number */\n   TV_TREE_FORWPROP,\t\t/* tv_id */\n-  PROP_cfg | PROP_ssa\n-    | PROP_alias,\t\t/* properties_required */\n+  PROP_cfg | PROP_ssa,\t\t/* properties_required */\n   0,\t\t\t\t/* properties_provided */\n   0,\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t/* todo_flags_start */"}, {"sha": "23e493a2b04fac3334d29ce5926acc7eb58108a9", "filename": "gcc/tree-ssa-operands.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7faade0f77b5bdc1c20c95d291c207aa2551e1bd/gcc%2Ftree-ssa-operands.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7faade0f77b5bdc1c20c95d291c207aa2551e1bd/gcc%2Ftree-ssa-operands.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-operands.c?ref=7faade0f77b5bdc1c20c95d291c207aa2551e1bd", "patch": "@@ -1480,6 +1480,8 @@ add_virtual_operand (tree var, stmt_ann_t s_ann, int flags,\n   aliases = v_ann->may_aliases;\n   if (aliases == NULL)\n     {\n+      if (s_ann && !gimple_aliases_computed_p (cfun))\n+        s_ann->has_volatile_ops = true;\n       /* The variable is not aliased or it is an alias tag.  */\n       if (flags & opf_def)\n \tappend_vdef (var);\n@@ -1610,6 +1612,8 @@ get_indirect_ref_operands (tree stmt, tree expr, int flags,\n   stmt_ann_t s_ann = stmt_ann (stmt);\n \n   s_ann->references_memory = true;\n+  if (s_ann && TREE_THIS_VOLATILE (expr))\n+    s_ann->has_volatile_ops = true; \n \n   if (SSA_VAR_P (ptr))\n     {\n@@ -1652,6 +1656,11 @@ get_indirect_ref_operands (tree stmt, tree expr, int flags,\n \t  if (v_ann->symbol_mem_tag)\n \t    add_virtual_operand (v_ann->symbol_mem_tag, s_ann, flags,\n \t\t\t\t full_ref, offset, size, false);\n+          /* Aliasing information is missing; mark statement as volatile so we\n+             won't optimize it out too actively.  */\n+          else if (s_ann && !gimple_aliases_computed_p (cfun)\n+                   && (flags & opf_def))\n+            s_ann->has_volatile_ops = true;\n \t}\n     }\n   else if (TREE_CODE (ptr) == INTEGER_CST)"}, {"sha": "9cbe3523f2375e51add8f594f7e391f73c82da0e", "filename": "gcc/tree-ssanames.c", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7faade0f77b5bdc1c20c95d291c207aa2551e1bd/gcc%2Ftree-ssanames.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7faade0f77b5bdc1c20c95d291c207aa2551e1bd/gcc%2Ftree-ssanames.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssanames.c?ref=7faade0f77b5bdc1c20c95d291c207aa2551e1bd", "patch": "@@ -26,6 +26,7 @@ Boston, MA 02110-1301, USA.  */\n #include \"varray.h\"\n #include \"ggc.h\"\n #include \"tree-flow.h\"\n+#include \"tree-pass.h\"\n \n /* Rewriting a function into SSA form can create a huge number of SSA_NAMEs,\n    many of which may be thrown away shortly after their creation if jumps\n@@ -304,3 +305,48 @@ replace_ssa_name_symbol (tree ssa_name, tree sym)\n   SSA_NAME_VAR (ssa_name) = sym;\n   TREE_TYPE (ssa_name) = TREE_TYPE (sym);\n }\n+\n+/* Return SSA names that are unused to GGC memory.  This is used to keep\n+   footprint of compiler during interprocedural optimization.\n+   As a side effect the SSA_NAME_VERSION number reuse is reduced\n+   so this function should not be used too often.  */\n+static unsigned int\n+release_dead_ssa_names (void)\n+{\n+  tree t, next;\n+  int n = 0;\n+  referenced_var_iterator rvi;\n+\n+  /* Current defs point to various dead SSA names that in turn points to dead\n+     statements so bunch of dead memory is holded from releasing.  */\n+  FOR_EACH_REFERENCED_VAR (t, rvi)\n+    set_current_def (t, NULL);\n+  /* Now release the freelist.  */\n+  for (t = FREE_SSANAMES (cfun); t; t = next)\n+    {\n+      next = TREE_CHAIN (t);\n+      ggc_free (t);\n+      n++;\n+    }\n+  FREE_SSANAMES (cfun) = NULL;\n+  if (dump_file)\n+    fprintf (dump_file, \"Released %i names, %.2f%%\\n\", n, n * 100.0 / num_ssa_names);\n+  return 0;\n+}\n+\n+struct tree_opt_pass pass_release_ssa_names =\n+{\n+  \"release_ssa\",\t\t\t/* name */\n+  NULL,\t\t\t\t\t/* gate */\n+  release_dead_ssa_names,\t\t/* execute */\n+  NULL,\t\t\t\t\t/* sub */\n+  NULL,\t\t\t\t\t/* next */\n+  0,\t\t\t\t\t/* static_pass_number */\n+  0,\t\t\t\t\t/* tv_id */\n+  PROP_ssa,\t\t\t\t/* properties_required */\n+  0,\t\t\t\t\t/* properties_provided */\n+  0,\t\t\t\t\t/* properties_destroyed */\n+  0,\t\t\t\t\t/* todo_flags_start */\n+  0,\t\t\t\t\t/* todo_flags_finish */\n+  0\t\t\t\t\t/* letter */\n+};"}, {"sha": "c652e582d25ecc059151ff287c1221509854ca21", "filename": "gcc/tree-tailcall.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7faade0f77b5bdc1c20c95d291c207aa2551e1bd/gcc%2Ftree-tailcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7faade0f77b5bdc1c20c95d291c207aa2551e1bd/gcc%2Ftree-tailcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-tailcall.c?ref=7faade0f77b5bdc1c20c95d291c207aa2551e1bd", "patch": "@@ -143,10 +143,10 @@ suitable_for_tail_opt_p (void)\n \n   FOR_EACH_REFERENCED_VAR (var, rvi)\n     {\n-\n       if (!is_global_var (var)\n \t  && (!MTAG_P (var) || TREE_CODE (var) == STRUCT_FIELD_TAG)\n-\t  && is_call_clobbered (var))\n+\t  && (gimple_aliases_computed_p (cfun) ? is_call_clobbered (var)\n+\t      : TREE_ADDRESSABLE (var)))\n \treturn false;\n     }\n \n@@ -1023,7 +1023,7 @@ struct tree_opt_pass pass_tail_recursion =\n   NULL,\t\t\t\t\t/* next */\n   0,\t\t\t\t\t/* static_pass_number */\n   0,\t\t\t\t\t/* tv_id */\n-  PROP_cfg | PROP_ssa | PROP_alias,\t/* properties_required */\n+  PROP_cfg | PROP_ssa,\t\t\t/* properties_required */\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */"}]}