{"sha": "6028880af51fd7a1879e88dd3d1fdd4f48feca62", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjAyODg4MGFmNTFmZDdhMTg3OWU4OGRkM2QxZmRkNGY0OGZlY2E2Mg==", "commit": {"author": {"name": "Denis Chertykov", "email": "denisc@overta.ru", "date": "2003-01-14T20:25:25Z"}, "committer": {"name": "Denis Chertykov", "email": "denisc@gcc.gnu.org", "date": "2003-01-14T20:25:25Z"}, "message": "ip2k.h (VALID_MACHINE_DECL_ATTRIBUTE): Remove.\n\n\t* config/ip2k/ip2k.h (VALID_MACHINE_DECL_ATTRIBUTE): Remove.\n\t(VALID_MACHINE_TYPE_ATTRIBUTE): Remove.\n\n\t* config/ip2k/ip2k.c (ip2k_attribute_table): New table of\n        attributes.\n\t(TARGET_ATTRIBUTE_TABLE): New macro.\n\t(valid_machine_type_attribute): Remove.\n\t(valid_machine_decl_attribute): Remove.\n\t(ip2k_handle_progmem_attribute): New function.\n\t(ip2k_handle_fndecl_attribute): New function.\n\nFrom-SVN: r61295", "tree": {"sha": "690f1ff7f40e360c3e733dfb1302b9fd8e18b440", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/690f1ff7f40e360c3e733dfb1302b9fd8e18b440"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6028880af51fd7a1879e88dd3d1fdd4f48feca62", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6028880af51fd7a1879e88dd3d1fdd4f48feca62", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6028880af51fd7a1879e88dd3d1fdd4f48feca62", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6028880af51fd7a1879e88dd3d1fdd4f48feca62/comments", "author": null, "committer": null, "parents": [{"sha": "4cf0d20fcefcb50cac9edd6068681ab65964624a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cf0d20fcefcb50cac9edd6068681ab65964624a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4cf0d20fcefcb50cac9edd6068681ab65964624a"}], "stats": {"total": 138, "additions": 89, "deletions": 49}, "files": [{"sha": "e339622de9f6c7f860db68274422ece0435bbd97", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6028880af51fd7a1879e88dd3d1fdd4f48feca62/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6028880af51fd7a1879e88dd3d1fdd4f48feca62/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6028880af51fd7a1879e88dd3d1fdd4f48feca62", "patch": "@@ -1,3 +1,16 @@\n+2003-01-14  Denis Chertykov  <denisc@overta.ru>\n+\n+\t* config/ip2k/ip2k.h (VALID_MACHINE_DECL_ATTRIBUTE): Remove.\n+\t(VALID_MACHINE_TYPE_ATTRIBUTE): Remove.\n+\n+\t* config/ip2k/ip2k.c (ip2k_attribute_table): New table of\n+        attributes.\n+\t(TARGET_ATTRIBUTE_TABLE): New macro.\n+\t(valid_machine_type_attribute): Remove.\n+\t(valid_machine_decl_attribute): Remove.\n+\t(ip2k_handle_progmem_attribute): New function.\n+\t(ip2k_handle_fndecl_attribute): New function.\n+\n 2003-01-10  Andrew Haley  <aph@redhat.com>\n \n \t* config/i386/linux64.h (MD_FALLBACK_FRAME_STATE_FOR): Rename"}, {"sha": "6b2bc33729cf6d7c119c3bef55da6df7e7b72096", "filename": "gcc/config/ip2k/ip2k.c", "status": "modified", "additions": 75, "deletions": 36, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6028880af51fd7a1879e88dd3d1fdd4f48feca62/gcc%2Fconfig%2Fip2k%2Fip2k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6028880af51fd7a1879e88dd3d1fdd4f48feca62/gcc%2Fconfig%2Fip2k%2Fip2k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fip2k%2Fip2k.c?ref=6028880af51fd7a1879e88dd3d1fdd4f48feca62", "patch": "@@ -1,6 +1,6 @@\n /* Subroutines used for code generation on Ubicom IP2022\n    Communications Controller.\n-   Copyright (C) 2000, 2001, 2002 Free Software Foundation, Inc.\n+   Copyright (C) 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n    Contributed by Red Hat, Inc and Ubicom, Inc.\n \n    This file is part of GNU CC.\n@@ -74,6 +74,11 @@ static void mdr_try_wreg_elim PARAMS ((rtx));\n static int ip2k_check_can_adjust_stack_ref PARAMS ((rtx, int));\n static void ip2k_adjust_stack_ref PARAMS ((rtx *, int));\n static int ip2k_xexp_not_uses_reg_for_mem PARAMS ((rtx, unsigned int));\n+static tree ip2k_handle_progmem_attribute PARAMS ((tree *, tree, tree, int,\n+\t\t\t\t\t\t   bool *));\n+static tree ip2k_handle_fndecl_attribute PARAMS ((tree *, tree, tree, int,\n+\t\t\t\t\t\t  bool *));\n+const struct attribute_spec ip2k_attribute_table[];\n \n \n /* Initialize the GCC target structure.  */\n@@ -92,6 +97,9 @@ static int ip2k_xexp_not_uses_reg_for_mem PARAMS ((rtx, unsigned int));\n #undef TARGET_ENCODE_SECTION_INFO\n #define TARGET_ENCODE_SECTION_INFO encode_section_info\n \n+#undef TARGET_ATTRIBUTE_TABLE\n+#define TARGET_ATTRIBUTE_TABLE ip2k_attribute_table\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n /* Commands in the functions prologues in the compiled file.  */\n@@ -3145,51 +3153,82 @@ class_likely_spilled_p(c)\n \t  || c == PTR_REGS);\n }\n \n-/* Only `progmem' attribute valid for type.  */\n+/* Valid attributes:\n+   progmem - put data to program memory;\n+   naked     - don't generate function prologue/epilogue and `ret' command.\n \n-int\n-valid_machine_type_attribute(type, attributes, identifier, args)\n-     tree type ATTRIBUTE_UNUSED;\n-     tree attributes ATTRIBUTE_UNUSED;\n-     tree identifier;\n-     tree args ATTRIBUTE_UNUSED;\n-{\n-  return is_attribute_p (\"progmem\", identifier);\n-}\n+   Only `progmem' attribute valid for type.  */\n \n-/* If IDENTIFIER with arguments ARGS is a valid machine specific\n-   attribute for DECL return 1.\n-   Valid attributes:\n-   progmem - put data to program memory;\n-   naked   - don't generate function prologue/epilogue and `ret' command.  */\n+const struct attribute_spec ip2k_attribute_table[] =\n+{\n+  /* { name, min_len, max_len, decl_req, type_req, fn_type_req, handler } */\n+  { \"progmem\",   0, 0, false, false, false,  ip2k_handle_progmem_attribute },\n+  { \"naked\",     0, 0, true,  false, false,  ip2k_handle_fndecl_attribute },\n+  { NULL,        0, 0, false, false, false, NULL }\n+};\n \n-int\n-valid_machine_decl_attribute (decl, attributes, attr, args)\n-     tree decl;\n-     tree attributes ATTRIBUTE_UNUSED;\n-     tree attr;\n+/* Handle a \"progmem\" attribute; arguments as in\n+   struct attribute_spec.handler.  */\n+static tree\n+ip2k_handle_progmem_attribute (node, name, args, flags, no_add_attrs)\n+     tree *node;\n+     tree name;\n      tree args ATTRIBUTE_UNUSED;\n+     int flags ATTRIBUTE_UNUSED;\n+     bool *no_add_attrs;\n {\n-  if (is_attribute_p (\"naked\", attr))\n-    return TREE_CODE (decl) == FUNCTION_DECL;\n-\n-  if (is_attribute_p (\"progmem\", attr)\n-      && (TREE_STATIC (decl) || DECL_EXTERNAL (decl)))\n+  if (DECL_P (*node))\n     {\n-      /* Data stored in program RAM or FLASH must be word aligned or\n-         it won't be directly addressable.  */\n-      if (DECL_ALIGN (decl) < FUNCTION_BOUNDARY)\n-\tDECL_ALIGN (decl) = FUNCTION_BOUNDARY;\n+      if (TREE_CODE (*node) == TYPE_DECL)\n+\t{\n+\t  /* This is really a decl attribute, not a type attribute,\n+\t     but try to handle it for GCC 3.0 backwards compatibility.  */\n+\n+\t  tree type = TREE_TYPE (*node);\n+\t  tree attr = tree_cons (name, args, TYPE_ATTRIBUTES (type));\n+\t  tree newtype = build_type_attribute_variant (type, attr);\n \n-      if (DECL_INITIAL (decl) == NULL_TREE)\n+\t  TYPE_MAIN_VARIANT (newtype) = TYPE_MAIN_VARIANT (type);\n+\t  TREE_TYPE (*node) = newtype;\n+\t  *no_add_attrs = true;\n+\t}\n+      else if (TREE_STATIC (*node) || DECL_EXTERNAL (*node))\n \t{\n-\t  warning (\"Only initialized variables can be placed into \"\n-\t\t   \"program memory area.\");\n-\t  return 0;\n+\t  if (DECL_INITIAL (*node) == NULL_TREE && !DECL_EXTERNAL (*node))\n+\t    {\n+\t      warning (\"only initialized variables can be placed into \"\n+\t\t       \"program memory area\");\n+\t      *no_add_attrs = true;\n+\t    }\n+\t}\n+      else\n+\t{\n+\t  warning (\"`%s' attribute ignored\", IDENTIFIER_POINTER (name));\n+\t  *no_add_attrs = true;\n \t}\n-      return 1;\n     }\n-  return 0;\n+\n+  return NULL_TREE;\n+}\n+\n+/* Handle an attribute requiring a FUNCTION_DECL; arguments as in\n+   struct attribute_spec.handler.  */\n+static tree\n+ip2k_handle_fndecl_attribute (node, name, args, flags, no_add_attrs)\n+     tree *node;\n+     tree name;\n+     tree args ATTRIBUTE_UNUSED;\n+     int flags ATTRIBUTE_UNUSED;\n+     bool *no_add_attrs;\n+{\n+  if (TREE_CODE (*node) != FUNCTION_DECL)\n+    {\n+      warning (\"`%s' attribute only applies to functions\",\n+\t       IDENTIFIER_POINTER (name));\n+      *no_add_attrs = true;\n+    }\n+\n+  return NULL_TREE;\n }\n \n /* Encode section information about tree DECL.  */"}, {"sha": "a5b14c52025d3acbbf7ff8344fb6cdf3c04f84a7", "filename": "gcc/config/ip2k/ip2k.h", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6028880af51fd7a1879e88dd3d1fdd4f48feca62/gcc%2Fconfig%2Fip2k%2Fip2k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6028880af51fd7a1879e88dd3d1fdd4f48feca62/gcc%2Fconfig%2Fip2k%2Fip2k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fip2k%2Fip2k.h?ref=6028880af51fd7a1879e88dd3d1fdd4f48feca62", "patch": "@@ -1,7 +1,7 @@\n /* Definitions of target machine for GNU compiler,\n    For Ubicom IP2022 Communications Controller\n \n-   Copyright (C) 2000, 2001, 2002 Free Software Foundation, Inc.\n+   Copyright (C) 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n    Contributed by Red Hat, Inc and Ubicom, Inc.\n \n This file is part of GNU CC.\n@@ -2327,18 +2327,6 @@ do {\t\t\t\t\t\t\t\\\n    of arguments that the function accepts.  Some people think a larger\n    threshold should be used on RISC machines.  */\n \n-#define VALID_MACHINE_DECL_ATTRIBUTE(DECL, ATTRIBUTES, IDENTIFIER, ARGS) \\\n-  valid_machine_decl_attribute (DECL, ATTRIBUTES, IDENTIFIER, ARGS)\n-/* If defined, a C expression whose value is nonzero if IDENTIFIER\n-   with arguments ARGS is a valid machine specific attribute for DECL.\n-   The attributes in ATTRIBUTES have previously been assigned to DECL.  */\n-\n-#define VALID_MACHINE_TYPE_ATTRIBUTE(TYPE, ATTRIBUTES, IDENTIFIER, ARGS) \\\n-  valid_machine_type_attribute(TYPE, ATTRIBUTES, IDENTIFIER, ARGS)\n-/* If defined, a C expression whose value is nonzero if IDENTIFIER\n-   with arguments ARGS is a valid machine specific attribute for TYPE.\n-   The attributes in ATTRIBUTES have previously been assigned to TYPE.  */\n-\n #define DOLLARS_IN_IDENTIFIERS 0\n /* Define this macro to control use of the character `$' in identifier\n    names.  0 means `$' is not allowed by default; 1 means it is"}]}