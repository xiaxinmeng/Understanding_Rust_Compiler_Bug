{"sha": "c2b2130c71a0cb068077e5c6bc4260d04974b37b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzJiMjEzMGM3MWEwY2IwNjgwNzdlNWM2YmM0MjYwZDA0OTc0YjM3Yg==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2013-06-03T09:20:46Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2013-06-03T09:20:46Z"}, "message": "re PR libfortran/57496 (I/O: WRITE(*,*) HUGE(0._10) gives SIGFPE with -ffpe-trap=overflow)\n\n2013-06-01  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/57496\n        * io/write_float.def (ISFINITE2Q, ISFINITE2, ISFINITE2L,\n        * ISFINITE,\n        SIGNBIT2Q, SIGNBIT2, SIGNBIT2L, SIGNBIT, ISNAN2Q, ISNAN2,\n        ISNAN2L, ISNAN): New macros.\n        (output_float_FMT_G_,WRITE_FLOAT): Use them.\n\nFrom-SVN: r199598", "tree": {"sha": "195faefc99e8847a812dd7cc3682371323516aad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/195faefc99e8847a812dd7cc3682371323516aad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c2b2130c71a0cb068077e5c6bc4260d04974b37b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2b2130c71a0cb068077e5c6bc4260d04974b37b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2b2130c71a0cb068077e5c6bc4260d04974b37b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2b2130c71a0cb068077e5c6bc4260d04974b37b/comments", "author": null, "committer": null, "parents": [{"sha": "7ddffc7fb5d5335b1289995132eee6a756d53b4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ddffc7fb5d5335b1289995132eee6a756d53b4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ddffc7fb5d5335b1289995132eee6a756d53b4b"}], "stats": {"total": 76, "additions": 56, "deletions": 20}, "files": [{"sha": "38a5319017982609eff3db5657d9a8c12612ce4e", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 24, "deletions": 16, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2b2130c71a0cb068077e5c6bc4260d04974b37b/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2b2130c71a0cb068077e5c6bc4260d04974b37b/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=c2b2130c71a0cb068077e5c6bc4260d04974b37b", "patch": "@@ -1,3 +1,11 @@\n+2013-06-01  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/57496\n+\t* io/write_float.def (ISFINITE2Q, ISFINITE2, ISFINITE2L, ISFINITE,\n+\tSIGNBIT2Q, SIGNBIT2, SIGNBIT2L, SIGNBIT, ISNAN2Q, ISNAN2, ISNAN2L,\n+\tISNAN): New macros.\n+\t(output_float_FMT_G_,WRITE_FLOAT): Use them.\n+\n 2013-05-24  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* acinclude.m4 (libgfor_cv_have_as_needed): Check for -z ignore, too.\n@@ -19,25 +27,25 @@\n \n 2013-04-29  Janne Blomqvist  <jb@gcc.gnu.org>\n \n-        * intrinsics/system_clock (gf_gettime_mono): Use variable\n-        resolution for fractional seconds argument.\n-        (system_clock_4): Simplify, update for gf_gettime_mono change.\n-        (system_clock_8): Likewise.\n+\t* intrinsics/system_clock (gf_gettime_mono): Use variable\n+\tresolution for fractional seconds argument.\n+\t(system_clock_4): Simplify, update for gf_gettime_mono change.\n+\t(system_clock_8): Likewise.\n \n 2013-04-29  Janne Blomqvist  <jb@gcc.gnu.org>\n \n-        PR fortran/56981\n-        * io/transfer.c (next_record_w_unf): First fix head marker, then\n-        write tail.\n-        (next_record): Call flush_if_unbuffered.\n-        * io/unix.c (struct unix_stream): Add field unbuffered.\n-        (flush_if_unbuffered): New function.\n-        (fd_to_stream): New argument.\n-        (open_external): Fix fd_to_stream call.\n-        (input_stream): Likewise.\n-        (output_stream): Likewise.\n-        (error_stream): Likewise.\n-        * io/unix.h (flush_if_unbuffered): New prototype.\n+\tPR fortran/56981\n+\t* io/transfer.c (next_record_w_unf): First fix head marker, then\n+\twrite tail.\n+\t(next_record): Call flush_if_unbuffered.\n+\t* io/unix.c (struct unix_stream): Add field unbuffered.\n+\t(flush_if_unbuffered): New function.\n+\t(fd_to_stream): New argument.\n+\t(open_external): Fix fd_to_stream call.\n+\t(input_stream): Likewise.\n+\t(output_stream): Likewise.\n+\t(error_stream): Likewise.\n+\t* io/unix.h (flush_if_unbuffered): New prototype.\n \n 2013-04-28  Janne Blomqvist  <jb@gcc.gnu.org>\n "}, {"sha": "b634ff54f0be96622847777a6571101b90496022", "filename": "libgfortran/io/write_float.def", "status": "modified", "additions": 32, "deletions": 4, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2b2130c71a0cb068077e5c6bc4260d04974b37b/libgfortran%2Fio%2Fwrite_float.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2b2130c71a0cb068077e5c6bc4260d04974b37b/libgfortran%2Fio%2Fwrite_float.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fwrite_float.def?ref=c2b2130c71a0cb068077e5c6bc4260d04974b37b", "patch": "@@ -961,6 +961,34 @@ __qmath_(quadmath_snprintf) (buffer, size, \"%+-#.*Qf\", \\\n #endif\n \n \n+#if defined(GFC_REAL_16_IS_FLOAT128)\n+#define ISFINITE2Q(val) finiteq(val)\n+#endif\n+#define ISFINITE2(val) isfinite(val)\n+#define ISFINITE2L(val) isfinite(val)\n+\n+#define ISFINITE(suff,val) TOKENPASTE(ISFINITE2,suff)(val)\n+\n+\n+#if defined(GFC_REAL_16_IS_FLOAT128)\n+#define SIGNBIT2Q(val) signbitq(val)\n+#endif\n+#define SIGNBIT2(val) signbit(val)\n+#define SIGNBIT2L(val) signbit(val)\n+\n+#define SIGNBIT(suff,val) TOKENPASTE(SIGNBIT2,suff)(val)\n+\n+\n+#if defined(GFC_REAL_16_IS_FLOAT128)\n+#define ISNAN2Q(val) isnanq(val)\n+#endif\n+#define ISNAN2(val) isnan(val)\n+#define ISNAN2L(val) isnan(val)\n+\n+#define ISNAN(suff,val) TOKENPASTE(ISNAN2,suff)(val)\n+\n+\n+\n /* Generate corresponding I/O format for FMT_G and output.\n    The rules to translate FMT_G to FMT_E or FMT_F from DEC fortran\n    LRM (table 11-2, Chapter 11, \"I/O Formatting\", P11-25) is:\n@@ -1127,7 +1155,7 @@ OUTPUT_FLOAT_FMT_G(16,L)\n {\\\n     GFC_REAL_ ## x tmp;\t\t\t\t\\\n     tmp = * (GFC_REAL_ ## x *)source;\t\t\t\t\\\n-    if (isfinite (tmp))\t\t\t\t\t\t\\\n+    if (ISFINITE (y,tmp))\t\t\t\t\t\\\n       nprinted = DTOA(y,0,tmp);\t\t\t\t\t\\\n     else\\\n       nprinted = -1;\\\n@@ -1194,10 +1222,10 @@ determine_en_precision (st_parameter_dt *dtp, const fnode *f,\n {\\\n \tGFC_REAL_ ## x tmp;\\\n \ttmp = * (GFC_REAL_ ## x *)source;\\\n-\tsign_bit = signbit (tmp);\\\n-\tif (!isfinite (tmp))\\\n+\tsign_bit = SIGNBIT (y,tmp);\\\n+\tif (!ISFINITE (y,tmp))\\\n \t  { \\\n-\t    write_infnan (dtp, f, isnan (tmp), sign_bit);\\\n+\t    write_infnan (dtp, f, ISNAN (y,tmp), sign_bit);\\\n \t    return;\\\n \t  }\\\n \ttmp = sign_bit ? -tmp : tmp;\\"}]}