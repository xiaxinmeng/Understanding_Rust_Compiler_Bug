{"sha": "873ceaab3aeb73c6b9b94d4fc5b7621f99e89349", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODczY2VhYWIzYWViNzNjNmI5Yjk0ZDRmYzViNzYyMWY5OWU4OTM0OQ==", "commit": {"author": {"name": "Daniel Berlin", "email": "dberlin@dberlin.org", "date": "2003-04-05T20:13:20Z"}, "committer": {"name": "Daniel Berlin", "email": "dberlin@gcc.gnu.org", "date": "2003-04-05T20:13:20Z"}, "message": "Makefile.in (df.o): Depend on alloc-pool.h, not obstack.h.\n\n2003-04-05  Daniel Berlin  <dberlin@dberlin.org>\n\n\t* Makefile.in (df.o):  Depend on alloc-pool.h, not obstack.h.\n\t* df.c: Include alloc-pool.h, not obstack.h.\n\t(df_ref_obstack): Remove.\n\t(df_ref_pool, df_link_pool): Add pools.\n\t(df_alloc): Init the new pools.\n\t(df_free): And free them.\n\t(df_link_create): Use the pools.\n\t(df_ref_create): Ditto.\n\nFrom-SVN: r65276", "tree": {"sha": "09f44a21eb6409eefdaecf1ec2b9d4c0e6af474c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/09f44a21eb6409eefdaecf1ec2b9d4c0e6af474c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/873ceaab3aeb73c6b9b94d4fc5b7621f99e89349", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/873ceaab3aeb73c6b9b94d4fc5b7621f99e89349", "html_url": "https://github.com/Rust-GCC/gccrs/commit/873ceaab3aeb73c6b9b94d4fc5b7621f99e89349", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/873ceaab3aeb73c6b9b94d4fc5b7621f99e89349/comments", "author": {"login": "dberlin", "id": 324715, "node_id": "MDQ6VXNlcjMyNDcxNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/324715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dberlin", "html_url": "https://github.com/dberlin", "followers_url": "https://api.github.com/users/dberlin/followers", "following_url": "https://api.github.com/users/dberlin/following{/other_user}", "gists_url": "https://api.github.com/users/dberlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/dberlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dberlin/subscriptions", "organizations_url": "https://api.github.com/users/dberlin/orgs", "repos_url": "https://api.github.com/users/dberlin/repos", "events_url": "https://api.github.com/users/dberlin/events{/privacy}", "received_events_url": "https://api.github.com/users/dberlin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5be86fec5be89cfd337227746745100491b05d61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5be86fec5be89cfd337227746745100491b05d61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5be86fec5be89cfd337227746745100491b05d61"}], "stats": {"total": 34, "additions": 24, "deletions": 10}, "files": [{"sha": "f0b12ae1abff64910f59f0c73d87bee57764e451", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/873ceaab3aeb73c6b9b94d4fc5b7621f99e89349/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/873ceaab3aeb73c6b9b94d4fc5b7621f99e89349/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=873ceaab3aeb73c6b9b94d4fc5b7621f99e89349", "patch": "@@ -1,3 +1,14 @@\n+2003-04-05  Daniel Berlin  <dberlin@dberlin.org>\n+\n+\t* Makefile.in (df.o):  Depend on alloc-pool.h, not obstack.h.\n+\t* df.c: Include alloc-pool.h, not obstack.h.\n+\t(df_ref_obstack): Remove.\n+\t(df_ref_pool, df_link_pool): Add pools.\n+\t(df_alloc): Init the new pools.\n+\t(df_free): And free them.\n+\t(df_link_create): Use the pools.\n+\t(df_ref_create): Ditto.\n+\n 2003-04-05  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* simplify-rtx.c: Fix formatting.\n@@ -1351,7 +1362,7 @@ Mon Mar 24 20:03:03 CET 2003  Jan Hubicka  <jh@suse.cz>\n \toperands in case MULT_EXPR of 2003-02-16 patch.\n \n 2003-03-20  Daniel Berlin  <dberlin@dberlin.org>\n-\tMerge changes from new-regalloc-branch\n+\tMerge changes from new-regalloc-branch \n \n \tFrom Michael Matz  <matz@suse.de>\n \t* df.c (df_ref_record_1): Move init of loc to safe point."}, {"sha": "6e02f20c9e81ab33180a536d390c45d94e234993", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/873ceaab3aeb73c6b9b94d4fc5b7621f99e89349/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/873ceaab3aeb73c6b9b94d4fc5b7621f99e89349/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=873ceaab3aeb73c6b9b94d4fc5b7621f99e89349", "patch": "@@ -1608,7 +1608,7 @@ ssa-ccp.o : ssa-ccp.c $(CONFIG_H) system.h coretypes.h $(TM_H) $(RTL_H) hard-reg\n     $(BASIC_BLOCK_H) ssa.h insn-config.h $(RECOG_H) output.h \\\n     errors.h $(GGC_H) df.h function.h\n df.o : df.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n-   insn-config.h $(RECOG_H) function.h $(REGS_H) $(OBSTACK_H) hard-reg-set.h \\\n+   insn-config.h $(RECOG_H) function.h $(REGS_H) alloc-pool.h hard-reg-set.h \\\n    $(BASIC_BLOCK_H) df.h $(FIBHEAP_H)\n conflict.o : conflict.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(OBSTACK_H) \\\n    $(HASHTAB_H) $(RTL_H) hard-reg-set.h $(BASIC_BLOCK_H)"}, {"sha": "b23c2862b1707a891ee2b61f03be62091b7e166f", "filename": "gcc/df.c", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/873ceaab3aeb73c6b9b94d4fc5b7621f99e89349/gcc%2Fdf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/873ceaab3aeb73c6b9b94d4fc5b7621f99e89349/gcc%2Fdf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf.c?ref=873ceaab3aeb73c6b9b94d4fc5b7621f99e89349", "patch": "@@ -180,7 +180,7 @@ and again mark them read/write.\n #include \"recog.h\"\n #include \"function.h\"\n #include \"regs.h\"\n-#include \"obstack.h\"\n+#include \"alloc-pool.h\"\n #include \"hard-reg-set.h\"\n #include \"basic-block.h\"\n #include \"sbitmap.h\"\n@@ -197,7 +197,8 @@ and again mark them read/write.\n     }\t\t\t\t\t\t\t\\\n   while (0)\n \n-static struct obstack df_ref_obstack;\n+static alloc_pool df_ref_pool;\n+static alloc_pool df_link_pool;\n static struct df *ddf;\n \n static void df_reg_table_realloc PARAMS((struct df *, int));\n@@ -502,7 +503,9 @@ df_alloc (df, n_regs)\n   int n_insns;\n   basic_block bb;\n \n-  gcc_obstack_init (&df_ref_obstack);\n+  df_link_pool = create_alloc_pool (\"df_link pool\", sizeof (struct df_link),\n+\t\t\t\t    100);\n+  df_ref_pool  = create_alloc_pool (\"df_ref pool\", sizeof (struct ref), 100);\n \n   /* Perhaps we should use LUIDs to save memory for the insn_refs\n      table.  This is only a small saving; a few pointers.  */\n@@ -587,7 +590,9 @@ df_free (df)\n   BITMAP_XFREE (df->all_blocks);\n   df->all_blocks = 0;\n \n-  obstack_free (&df_ref_obstack, NULL);\n+  free_alloc_pool (df_ref_pool);\n+  free_alloc_pool (df_link_pool);\n+\n }\n \f\n /* Local miscellaneous routines.  */\n@@ -629,8 +634,7 @@ df_link_create (ref, next)\n {\n   struct df_link *link;\n \n-  link = (struct df_link *) obstack_alloc (&df_ref_obstack,\n-\t\t\t\t\t   sizeof (*link));\n+  link = pool_alloc (df_link_pool);\n   link->next = next;\n   link->ref = ref;\n   return link;\n@@ -768,8 +772,7 @@ df_ref_create (df, reg, loc, insn, ref_type, ref_flags)\n {\n   struct ref *this_ref;\n \n-  this_ref = (struct ref *) obstack_alloc (&df_ref_obstack,\n-\t\t\t\t\t   sizeof (*this_ref));\n+  this_ref = pool_alloc (df_ref_pool);\n   DF_REF_REG (this_ref) = reg;\n   DF_REF_LOC (this_ref) = loc;\n   DF_REF_INSN (this_ref) = insn;"}]}