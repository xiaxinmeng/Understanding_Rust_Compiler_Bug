{"sha": "0a05c536a636a6420ef3e00df0e3e7f6d4b9584e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGEwNWM1MzZhNjM2YTY0MjBlZjNlMDBkZjBlM2U3ZjZkNGI5NTg0ZQ==", "commit": {"author": {"name": "Francois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2009-05-29T21:27:54Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2009-05-29T21:27:54Z"}, "message": "re PR fortran/40019 (LEADZ and TRAILZ give wrong results)\n\n2009-05-29  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n\n        PR fortran/40019\n        * trans-types.c (gfc_build_uint_type): Make nonstatic.\n        * trans.h (gfor_fndecl_clz128, gfor_fndecl_ctz128): New\n        * prototypes.\n        * trans-types.h (gfc_build_uint_type): Add prototype.\n        * trans-decl.c (gfc_build_intrinsic_function_decls): Build\n        gfor_fndecl_clz128 and gfor_fndecl_ctz128.\n        * trans-intrinsic.c (gfc_conv_intrinsic_leadz,\n        gfc_conv_intrinsic_trailz): Call the right builtins or library\n        functions, and cast arguments to unsigned types first.\n        * simplify.c (gfc_simplify_leadz): Deal with negative arguments.\n\n2009-05-29  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n\n        PR fortran/40019\n        * intrinsics/bit_intrinsics.c: New file.\n        * gfortran.map (GFORTRAN_1.2): New list.\n        * Makefile.am: Add intrinsics/bit_intrinsics.c.\n        * Makefile.in: Regenerate.\n\n2009-05-29  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n\n        PR fortran/40019\n        * gfortran.dg/leadz_trailz_1.f90: New test.\n        * gfortran.dg/leadz_trailz_2.f90: New test.\n\nFrom-SVN: r147987", "tree": {"sha": "15665f2df8a4d85574fbc4266b51a7743c5198fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/15665f2df8a4d85574fbc4266b51a7743c5198fb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0a05c536a636a6420ef3e00df0e3e7f6d4b9584e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a05c536a636a6420ef3e00df0e3e7f6d4b9584e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a05c536a636a6420ef3e00df0e3e7f6d4b9584e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a05c536a636a6420ef3e00df0e3e7f6d4b9584e/comments", "author": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2017c37012b695fe8ab6604a2f7c415d964e7839", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2017c37012b695fe8ab6604a2f7c415d964e7839", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2017c37012b695fe8ab6604a2f7c415d964e7839"}], "stats": {"total": 504, "additions": 436, "deletions": 68}, "files": [{"sha": "c94b7d720a434a76c2a6e5243e6bb93751c8a475", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a05c536a636a6420ef3e00df0e3e7f6d4b9584e/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a05c536a636a6420ef3e00df0e3e7f6d4b9584e/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=0a05c536a636a6420ef3e00df0e3e7f6d4b9584e", "patch": "@@ -1,3 +1,16 @@\n+2009-05-29  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR fortran/40019\n+\t* trans-types.c (gfc_build_uint_type): Make nonstatic.\n+\t* trans.h (gfor_fndecl_clz128, gfor_fndecl_ctz128): New prototypes.\n+\t* trans-types.h (gfc_build_uint_type): Add prototype.\n+\t* trans-decl.c (gfc_build_intrinsic_function_decls): Build\n+\tgfor_fndecl_clz128 and gfor_fndecl_ctz128.\n+\t* trans-intrinsic.c (gfc_conv_intrinsic_leadz,\n+\tgfc_conv_intrinsic_trailz): Call the right builtins or library\n+\tfunctions, and cast arguments to unsigned types first.\n+\t* simplify.c (gfc_simplify_leadz): Deal with negative arguments.\n+\n 2009-05-27  Ian Lance Taylor  <iant@google.com>\n \n \t* Make-lang.in (gfortran$(exeext)): Change $(COMPILER) to"}, {"sha": "51a3c5198e5e3e342a9c6770f3bb9b436537f790", "filename": "gcc/fortran/simplify.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a05c536a636a6420ef3e00df0e3e7f6d4b9584e/gcc%2Ffortran%2Fsimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a05c536a636a6420ef3e00df0e3e7f6d4b9584e/gcc%2Ffortran%2Fsimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsimplify.c?ref=0a05c536a636a6420ef3e00df0e3e7f6d4b9584e", "patch": "@@ -2579,10 +2579,13 @@ gfc_simplify_leadz (gfc_expr *e)\n   bs = gfc_integer_kinds[i].bit_size;\n   if (mpz_cmp_si (e->value.integer, 0) == 0)\n     lz = bs;\n+  else if (mpz_cmp_si (e->value.integer, 0) < 0)\n+    lz = 0;\n   else\n     lz = bs - mpz_sizeinbase (e->value.integer, 2);\n \n-  result = gfc_constant_result (BT_INTEGER, gfc_default_integer_kind, &e->where);\n+  result = gfc_constant_result (BT_INTEGER, gfc_default_integer_kind,\n+\t\t\t\t&e->where);\n   mpz_set_ui (result->value.integer, lz);\n \n   return result;"}, {"sha": "a036aebd17273a579effb0b2405defb6f05a172e", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a05c536a636a6420ef3e00df0e3e7f6d4b9584e/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a05c536a636a6420ef3e00df0e3e7f6d4b9584e/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=0a05c536a636a6420ef3e00df0e3e7f6d4b9584e", "patch": "@@ -145,6 +145,8 @@ tree gfor_fndecl_convert_char4_to_char1;\n tree gfor_fndecl_size0;\n tree gfor_fndecl_size1;\n tree gfor_fndecl_iargc;\n+tree gfor_fndecl_clz128;\n+tree gfor_fndecl_ctz128;\n \n /* Intrinsic functions implemented in Fortran.  */\n tree gfor_fndecl_sc_kind;\n@@ -2570,6 +2572,19 @@ gfc_build_intrinsic_function_decls (void)\n     gfc_build_library_function_decl (get_identifier (PREFIX (\"iargc\")),\n \t\t\t\t     gfc_int4_type_node,\n \t\t\t\t     0);\n+\n+  if (gfc_type_for_size (128, true))\n+    {\n+      tree uint128 = gfc_type_for_size (128, true);\n+\n+      gfor_fndecl_clz128 =\n+\tgfc_build_library_function_decl (get_identifier (PREFIX (\"clz128\")),\n+\t\t\t\t\t integer_type_node, 1, uint128);\n+\n+      gfor_fndecl_ctz128 =\n+\tgfc_build_library_function_decl (get_identifier (PREFIX (\"ctz128\")),\n+\t\t\t\t\t integer_type_node, 1, uint128);\n+    }\n }\n \n "}, {"sha": "c1409578610e751cff1f396a582870820dcebe7d", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 56, "deletions": 60, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a05c536a636a6420ef3e00df0e3e7f6d4b9584e/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a05c536a636a6420ef3e00df0e3e7f6d4b9584e/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=0a05c536a636a6420ef3e00df0e3e7f6d4b9584e", "patch": "@@ -2710,53 +2710,51 @@ gfc_conv_intrinsic_leadz (gfc_se * se, gfc_expr * expr)\n   tree leadz;\n   tree bit_size;\n   tree tmp;\n-  int arg_kind;\n-  int i, n, s;\n+  tree func;\n+  int s, argsize;\n \n   gfc_conv_intrinsic_function_args (se, expr, &arg, 1);\n+  argsize = TYPE_PRECISION (TREE_TYPE (arg));\n \n   /* Which variant of __builtin_clz* should we call?  */\n-  arg_kind = expr->value.function.actual->expr->ts.kind;\n-  i = gfc_validate_kind (BT_INTEGER, arg_kind, false);\n-  switch (arg_kind)\n+  if (argsize <= INT_TYPE_SIZE)\n     {\n-      case 1:\n-      case 2:\n-      case 4:\n-        arg_type = unsigned_type_node;\n-\tn = BUILT_IN_CLZ;\n-\tbreak;\n-\n-      case 8:\n-        arg_type = long_unsigned_type_node;\n-\tn = BUILT_IN_CLZL;\n-\tbreak;\n-\n-      case 16:\n-        arg_type = long_long_unsigned_type_node;\n-\tn = BUILT_IN_CLZLL;\n-\tbreak;\n-\n-      default:\n-        gcc_unreachable ();\n+      arg_type = unsigned_type_node;\n+      func = built_in_decls[BUILT_IN_CLZ];\n+    }\n+  else if (argsize <= LONG_TYPE_SIZE)\n+    {\n+      arg_type = long_unsigned_type_node;\n+      func = built_in_decls[BUILT_IN_CLZL];\n+    }\n+  else if (argsize <= LONG_LONG_TYPE_SIZE)\n+    {\n+      arg_type = long_long_unsigned_type_node;\n+      func = built_in_decls[BUILT_IN_CLZLL];\n+    }\n+  else\n+    {\n+      gcc_assert (argsize == 128);\n+      arg_type = gfc_build_uint_type (argsize);\n+      func = gfor_fndecl_clz128;\n     }\n \n-  /* Convert the actual argument to the proper argument type for the built-in\n+  /* Convert the actual argument twice: first, to the unsigned type of the\n+     same size; then, to the proper argument type for the built-in\n      function.  But the return type is of the default INTEGER kind.  */\n+  arg = fold_convert (gfc_build_uint_type (argsize), arg);\n   arg = fold_convert (arg_type, arg);\n   result_type = gfc_get_int_type (gfc_default_integer_kind);\n \n   /* Compute LEADZ for the case i .ne. 0.  */\n-  s = TYPE_PRECISION (arg_type) - gfc_integer_kinds[i].bit_size;\n-  tmp = fold_convert (result_type, build_call_expr (built_in_decls[n], 1, arg));\n+  s = TYPE_PRECISION (arg_type) - argsize;\n+  tmp = fold_convert (result_type, build_call_expr (func, 1, arg));\n   leadz = fold_build2 (MINUS_EXPR, result_type,\n \t\t       tmp, build_int_cst (result_type, s));\n \n   /* Build BIT_SIZE.  */\n-  bit_size = build_int_cst (result_type, gfc_integer_kinds[i].bit_size);\n+  bit_size = build_int_cst (result_type, argsize);\n \n-  /* ??? For some combinations of targets and integer kinds, the condition\n-\t can be avoided if CLZ_DEFINED_VALUE_AT_ZERO is used.  Later.  */\n   cond = fold_build2 (EQ_EXPR, boolean_type_node,\n \t\t      arg, build_int_cst (arg_type, 0));\n   se->expr = fold_build3 (COND_EXPR, result_type, cond, bit_size, leadz);\n@@ -2777,50 +2775,48 @@ gfc_conv_intrinsic_trailz (gfc_se * se, gfc_expr *expr)\n   tree result_type;\n   tree trailz;\n   tree bit_size;\n-  int arg_kind;\n-  int i, n;\n+  tree func;\n+  int argsize;\n \n   gfc_conv_intrinsic_function_args (se, expr, &arg, 1);\n+  argsize = TYPE_PRECISION (TREE_TYPE (arg));\n \n-  /* Which variant of __builtin_clz* should we call?  */\n-  arg_kind = expr->value.function.actual->expr->ts.kind;\n-  i = gfc_validate_kind (BT_INTEGER, arg_kind, false);\n-  switch (expr->ts.kind)\n+  /* Which variant of __builtin_ctz* should we call?  */\n+  if (argsize <= INT_TYPE_SIZE)\n     {\n-      case 1:\n-      case 2:\n-      case 4:\n-        arg_type = unsigned_type_node;\n-\tn = BUILT_IN_CTZ;\n-\tbreak;\n-\n-      case 8:\n-        arg_type = long_unsigned_type_node;\n-\tn = BUILT_IN_CTZL;\n-\tbreak;\n-\n-      case 16:\n-        arg_type = long_long_unsigned_type_node;\n-\tn = BUILT_IN_CTZLL;\n-\tbreak;\n-\n-      default:\n-        gcc_unreachable ();\n+      arg_type = unsigned_type_node;\n+      func = built_in_decls[BUILT_IN_CTZ];\n+    }\n+  else if (argsize <= LONG_TYPE_SIZE)\n+    {\n+      arg_type = long_unsigned_type_node;\n+      func = built_in_decls[BUILT_IN_CTZL];\n+    }\n+  else if (argsize <= LONG_LONG_TYPE_SIZE)\n+    {\n+      arg_type = long_long_unsigned_type_node;\n+      func = built_in_decls[BUILT_IN_CTZLL];\n+    }\n+  else\n+    {\n+      gcc_assert (argsize == 128);\n+      arg_type = gfc_build_uint_type (argsize);\n+      func = gfor_fndecl_ctz128;\n     }\n \n-  /* Convert the actual argument to the proper argument type for the built-in\n+  /* Convert the actual argument twice: first, to the unsigned type of the\n+     same size; then, to the proper argument type for the built-in\n      function.  But the return type is of the default INTEGER kind.  */\n+  arg = fold_convert (gfc_build_uint_type (argsize), arg);\n   arg = fold_convert (arg_type, arg);\n   result_type = gfc_get_int_type (gfc_default_integer_kind);\n \n   /* Compute TRAILZ for the case i .ne. 0.  */\n-  trailz = fold_convert (result_type, build_call_expr (built_in_decls[n], 1, arg));\n+  trailz = fold_convert (result_type, build_call_expr (func, 1, arg));\n \n   /* Build BIT_SIZE.  */\n-  bit_size = build_int_cst (result_type, gfc_integer_kinds[i].bit_size);\n+  bit_size = build_int_cst (result_type, argsize);\n \n-  /* ??? For some combinations of targets and integer kinds, the condition\n-\t can be avoided if CTZ_DEFINED_VALUE_AT_ZERO is used.  Later.  */\n   cond = fold_build2 (EQ_EXPR, boolean_type_node,\n \t\t      arg, build_int_cst (arg_type, 0));\n   se->expr = fold_build3 (COND_EXPR, result_type, cond, bit_size, trailz);"}, {"sha": "0c4399371255e538100a31a67f2ad3fba179d00a", "filename": "gcc/fortran/trans-types.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a05c536a636a6420ef3e00df0e3e7f6d4b9584e/gcc%2Ffortran%2Ftrans-types.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a05c536a636a6420ef3e00df0e3e7f6d4b9584e/gcc%2Ffortran%2Ftrans-types.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-types.c?ref=0a05c536a636a6420ef3e00df0e3e7f6d4b9584e", "patch": "@@ -686,7 +686,7 @@ gfc_build_int_type (gfc_integer_info *info)\n   return make_signed_type (mode_precision);\n }\n \n-static tree\n+tree\n gfc_build_uint_type (int size)\n {\n   if (size == CHAR_TYPE_SIZE)"}, {"sha": "283d57772a0aa8105246045b6f293f341325210a", "filename": "gcc/fortran/trans-types.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a05c536a636a6420ef3e00df0e3e7f6d4b9584e/gcc%2Ffortran%2Ftrans-types.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a05c536a636a6420ef3e00df0e3e7f6d4b9584e/gcc%2Ffortran%2Ftrans-types.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-types.h?ref=0a05c536a636a6420ef3e00df0e3e7f6d4b9584e", "patch": "@@ -68,6 +68,7 @@ tree gfc_get_function_type (gfc_symbol *);\n \n tree gfc_type_for_size (unsigned, int);\n tree gfc_type_for_mode (enum machine_mode, int);\n+tree gfc_build_uint_type (int);\n \n tree gfc_get_element_type (tree);\n tree gfc_get_array_type_bounds (tree, int, tree *, tree *, int,"}, {"sha": "906896985d1eb59bb6b8033324c271039f1e1773", "filename": "gcc/fortran/trans.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a05c536a636a6420ef3e00df0e3e7f6d4b9584e/gcc%2Ffortran%2Ftrans.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a05c536a636a6420ef3e00df0e3e7f6d4b9584e/gcc%2Ffortran%2Ftrans.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.h?ref=0a05c536a636a6420ef3e00df0e3e7f6d4b9584e", "patch": "@@ -590,6 +590,8 @@ extern GTY(()) tree gfor_fndecl_convert_char4_to_char1;\n extern GTY(()) tree gfor_fndecl_size0;\n extern GTY(()) tree gfor_fndecl_size1;\n extern GTY(()) tree gfor_fndecl_iargc;\n+extern GTY(()) tree gfor_fndecl_clz128;\n+extern GTY(()) tree gfor_fndecl_ctz128;\n \n /* Implemented in Fortran.  */\n extern GTY(()) tree gfor_fndecl_sc_kind;"}, {"sha": "214cf74523eb7162bb506ab26b0dbfd14ac291e5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a05c536a636a6420ef3e00df0e3e7f6d4b9584e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a05c536a636a6420ef3e00df0e3e7f6d4b9584e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0a05c536a636a6420ef3e00df0e3e7f6d4b9584e", "patch": "@@ -1,3 +1,9 @@\n+2009-05-29  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR fortran/40019\n+\t* gfortran.dg/leadz_trailz_1.f90: New test.\n+\t* gfortran.dg/leadz_trailz_2.f90: New test.\n+\n 2009-05-29  Martin Jambor  <mjambor@suse.cz>\n \n \t* gfortran.dg/pr25923.f90: XFAIL warning expectation."}, {"sha": "a0cd19792255d21b826952f73d1a936200b6dd35", "filename": "gcc/testsuite/gfortran.dg/leadz_trailz_1.f90", "status": "added", "additions": 133, "deletions": 0, "changes": 133, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a05c536a636a6420ef3e00df0e3e7f6d4b9584e/gcc%2Ftestsuite%2Fgfortran.dg%2Fleadz_trailz_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a05c536a636a6420ef3e00df0e3e7f6d4b9584e/gcc%2Ftestsuite%2Fgfortran.dg%2Fleadz_trailz_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fleadz_trailz_1.f90?ref=0a05c536a636a6420ef3e00df0e3e7f6d4b9584e", "patch": "@@ -0,0 +1,133 @@\n+! { dg-do run }\n+\n+  integer(kind=1) :: i1\n+  integer(kind=2) :: i2\n+  integer(kind=4) :: i4\n+  integer(kind=8) :: i8\n+\n+  i1 = -1\n+  i2 = -1\n+  i4 = -1\n+  i8 = -1\n+\n+  if (leadz(i1) /= 0) call abort\n+  if (leadz(i2) /= 0) call abort\n+  if (leadz(i4) /= 0) call abort\n+  if (leadz(i8) /= 0) call abort\n+\n+  if (trailz(i1) /= 0) call abort\n+  if (trailz(i2) /= 0) call abort\n+  if (trailz(i4) /= 0) call abort\n+  if (trailz(i8) /= 0) call abort\n+\n+  if (leadz(-1_1) /= 0) call abort\n+  if (leadz(-1_2) /= 0) call abort\n+  if (leadz(-1_4) /= 0) call abort\n+  if (leadz(-1_8) /= 0) call abort\n+\n+  if (trailz(-1_1) /= 0) call abort\n+  if (trailz(-1_2) /= 0) call abort\n+  if (trailz(-1_4) /= 0) call abort\n+  if (trailz(-1_8) /= 0) call abort\n+\n+  i1 = -64\n+  i2 = -64\n+  i4 = -64\n+  i8 = -64\n+\n+  if (leadz(i1) /= 0) call abort\n+  if (leadz(i2) /= 0) call abort\n+  if (leadz(i4) /= 0) call abort\n+  if (leadz(i8) /= 0) call abort\n+\n+  if (trailz(i1) /= 6) call abort\n+  if (trailz(i2) /= 6) call abort\n+  if (trailz(i4) /= 6) call abort\n+  if (trailz(i8) /= 6) call abort\n+\n+  if (leadz(-64_1) /= 0) call abort\n+  if (leadz(-64_2) /= 0) call abort\n+  if (leadz(-64_4) /= 0) call abort\n+  if (leadz(-64_8) /= 0) call abort\n+\n+  if (trailz(-64_1) /= 6) call abort\n+  if (trailz(-64_2) /= 6) call abort\n+  if (trailz(-64_4) /= 6) call abort\n+  if (trailz(-64_8) /= 6) call abort\n+\n+  i1 = -108\n+  i2 = -108\n+  i4 = -108\n+  i8 = -108\n+\n+  if (leadz(i1) /= 0) call abort\n+  if (leadz(i2) /= 0) call abort\n+  if (leadz(i4) /= 0) call abort\n+  if (leadz(i8) /= 0) call abort\n+\n+  if (trailz(i1) /= 2) call abort\n+  if (trailz(i2) /= 2) call abort\n+  if (trailz(i4) /= 2) call abort\n+  if (trailz(i8) /= 2) call abort\n+\n+  if (leadz(-108_1) /= 0) call abort\n+  if (leadz(-108_2) /= 0) call abort\n+  if (leadz(-108_4) /= 0) call abort\n+  if (leadz(-108_8) /= 0) call abort\n+\n+  if (trailz(-108_1) /= 2) call abort\n+  if (trailz(-108_2) /= 2) call abort\n+  if (trailz(-108_4) /= 2) call abort\n+  if (trailz(-108_8) /= 2) call abort\n+\n+  i1 = 1\n+  i2 = 1\n+  i4 = 1\n+  i8 = 1\n+\n+  if (leadz(i1) /= bit_size(i1) - 1) call abort\n+  if (leadz(i2) /= bit_size(i2) - 1) call abort\n+  if (leadz(i4) /= bit_size(i4) - 1) call abort\n+  if (leadz(i8) /= bit_size(i8) - 1) call abort\n+\n+  if (trailz(i1) /= 0) call abort\n+  if (trailz(i2) /= 0) call abort\n+  if (trailz(i4) /= 0) call abort\n+  if (trailz(i8) /= 0) call abort\n+\n+  if (leadz(1_1) /= bit_size(1_1) - 1) call abort\n+  if (leadz(1_2) /= bit_size(1_2) - 1) call abort\n+  if (leadz(1_4) /= bit_size(1_4) - 1) call abort\n+  if (leadz(1_8) /= bit_size(1_8) - 1) call abort\n+\n+  if (trailz(1_1) /= 0) call abort\n+  if (trailz(1_2) /= 0) call abort\n+  if (trailz(1_4) /= 0) call abort\n+  if (trailz(1_8) /= 0) call abort\n+\n+  i1 = 64\n+  i2 = 64\n+  i4 = 64\n+  i8 = 64\n+\n+  if (leadz(i1) /= 1) call abort\n+  if (leadz(i2) /= 9) call abort\n+  if (leadz(i4) /= 25) call abort\n+  if (leadz(i8) /= 57) call abort\n+\n+  if (trailz(i1) /= 6) call abort\n+  if (trailz(i2) /= 6) call abort\n+  if (trailz(i4) /= 6) call abort\n+  if (trailz(i8) /= 6) call abort\n+\n+  if (leadz(64_1) /= 1) call abort\n+  if (leadz(64_2) /= 9) call abort\n+  if (leadz(64_4) /= 25) call abort\n+  if (leadz(64_8) /= 57) call abort\n+\n+  if (trailz(64_1) /= 6) call abort\n+  if (trailz(64_2) /= 6) call abort\n+  if (trailz(64_4) /= 6) call abort\n+  if (trailz(64_8) /= 6) call abort\n+\n+end"}, {"sha": "08701d8a537ce0ad41bd76f6c4fe14e679c29f78", "filename": "gcc/testsuite/gfortran.dg/leadz_trailz_2.f90", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a05c536a636a6420ef3e00df0e3e7f6d4b9584e/gcc%2Ftestsuite%2Fgfortran.dg%2Fleadz_trailz_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a05c536a636a6420ef3e00df0e3e7f6d4b9584e/gcc%2Ftestsuite%2Fgfortran.dg%2Fleadz_trailz_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fleadz_trailz_2.f90?ref=0a05c536a636a6420ef3e00df0e3e7f6d4b9584e", "patch": "@@ -0,0 +1,36 @@\n+! { dg-do run }\n+! { dg-require-effective-target fortran_large_int }\n+\n+  integer(kind=16) :: i16\n+\n+  i16 = -1\n+  if (leadz(i16) /= 0) call abort\n+  if (trailz(i16) /= 0) call abort\n+  if (leadz(-1_16) /= 0) call abort\n+  if (trailz(-1_16) /= 0) call abort\n+\n+  i16 = -64\n+  if (leadz(i16) /= 0) call abort\n+  if (trailz(i16) /= 6) call abort\n+  if (leadz(-64_16) /= 0) call abort\n+  if (trailz(-64_16) /= 6) call abort\n+\n+  i16 = -108\n+  if (leadz(i16) /= 0) call abort\n+  if (trailz(i16) /= 2) call abort\n+  if (leadz(-108_16) /= 0) call abort\n+  if (trailz(-108_16) /= 2) call abort\n+\n+  i16 = 1\n+  if (leadz(i16) /= bit_size(i16) - 1) call abort\n+  if (trailz(i16) /= 0) call abort\n+  if (leadz(1_16) /= bit_size(1_16) - 1) call abort\n+  if (trailz(1_16) /= 0) call abort\n+\n+  i16 = 64\n+  if (leadz(i16) /= 121) call abort\n+  if (trailz(i16) /= 6) call abort\n+  if (leadz(64_16) /= 121) call abort\n+  if (trailz(64_16) /= 6) call abort\n+\n+end"}, {"sha": "2d27d0321bf37ebea285135517e1426ee2971d33", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a05c536a636a6420ef3e00df0e3e7f6d4b9584e/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a05c536a636a6420ef3e00df0e3e7f6d4b9584e/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=0a05c536a636a6420ef3e00df0e3e7f6d4b9584e", "patch": "@@ -1,3 +1,11 @@\n+2009-05-29  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR fortran/40019\n+\t* intrinsics/bit_intrinsics.c: New file.\n+\t* gfortran.map (GFORTRAN_1.2): New list.\n+\t* Makefile.am: Add intrinsics/bit_intrinsics.c.\n+\t* Makefile.in: Regenerate.\n+\n 2009-05-29  Janne Blomqvist  <jb@gcc.gnu.org>\n \n \tPR libfortran/40190"}, {"sha": "f5f92dfb4325a4b98f7ea1362efe0800eef43088", "filename": "libgfortran/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a05c536a636a6420ef3e00df0e3e7f6d4b9584e/libgfortran%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a05c536a636a6420ef3e00df0e3e7f6d4b9584e/libgfortran%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FMakefile.am?ref=0a05c536a636a6420ef3e00df0e3e7f6d4b9584e", "patch": "@@ -62,6 +62,7 @@ intrinsics/associated.c \\\n intrinsics/abort.c \\\n intrinsics/access.c \\\n intrinsics/args.c \\\n+intrinsics/bit_intrinsics.c \\\n intrinsics/c99_functions.c \\\n intrinsics/chdir.c \\\n intrinsics/chmod.c \\"}, {"sha": "ce2b5a21cb12cad2812463e0bdc6d0f999fa750e", "filename": "libgfortran/Makefile.in", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a05c536a636a6420ef3e00df0e3e7f6d4b9584e/libgfortran%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a05c536a636a6420ef3e00df0e3e7f6d4b9584e/libgfortran%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FMakefile.in?ref=0a05c536a636a6420ef3e00df0e3e7f6d4b9584e", "patch": "@@ -416,9 +416,9 @@ am__libgfortran_la_SOURCES_DIST = runtime/backtrace.c \\\n \tio/size_from_kind.c io/transfer.c io/unit.c io/unix.c \\\n \tio/write.c io/fbuf.c intrinsics/associated.c \\\n \tintrinsics/abort.c intrinsics/access.c intrinsics/args.c \\\n-\tintrinsics/c99_functions.c intrinsics/chdir.c \\\n-\tintrinsics/chmod.c intrinsics/clock.c intrinsics/cpu_time.c \\\n-\tintrinsics/cshift0.c intrinsics/ctime.c \\\n+\tintrinsics/bit_intrinsics.c intrinsics/c99_functions.c \\\n+\tintrinsics/chdir.c intrinsics/chmod.c intrinsics/clock.c \\\n+\tintrinsics/cpu_time.c intrinsics/cshift0.c intrinsics/ctime.c \\\n \tintrinsics/date_and_time.c intrinsics/dtime.c intrinsics/env.c \\\n \tintrinsics/eoshift0.c intrinsics/eoshift2.c \\\n \tintrinsics/erfc_scaled.c intrinsics/etime.c intrinsics/exit.c \\\n@@ -711,9 +711,9 @@ am__objects_35 = close.lo file_pos.lo format.lo inquire.lo \\\n \tintrinsics.lo list_read.lo lock.lo open.lo read.lo \\\n \tsize_from_kind.lo transfer.lo unit.lo unix.lo write.lo fbuf.lo\n am__objects_36 = associated.lo abort.lo access.lo args.lo \\\n-\tc99_functions.lo chdir.lo chmod.lo clock.lo cpu_time.lo \\\n-\tcshift0.lo ctime.lo date_and_time.lo dtime.lo env.lo \\\n-\teoshift0.lo eoshift2.lo erfc_scaled.lo etime.lo exit.lo \\\n+\tbit_intrinsics.lo c99_functions.lo chdir.lo chmod.lo clock.lo \\\n+\tcpu_time.lo cshift0.lo ctime.lo date_and_time.lo dtime.lo \\\n+\tenv.lo eoshift0.lo eoshift2.lo erfc_scaled.lo etime.lo exit.lo \\\n \tfnum.lo gerror.lo getcwd.lo getlog.lo getXid.lo hostnm.lo \\\n \tierrno.lo ishftc.lo iso_c_generated_procs.lo iso_c_binding.lo \\\n \tkill.lo link.lo malloc.lo mvbits.lo move_alloc.lo \\\n@@ -990,6 +990,7 @@ intrinsics/associated.c \\\n intrinsics/abort.c \\\n intrinsics/access.c \\\n intrinsics/args.c \\\n+intrinsics/bit_intrinsics.c \\\n intrinsics/c99_functions.c \\\n intrinsics/chdir.c \\\n intrinsics/chmod.c \\\n@@ -1804,6 +1805,7 @@ distclean-compile:\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/args.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/associated.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/backtrace.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/bit_intrinsics.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/c99_functions.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/chdir.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/chmod.Plo@am__quote@\n@@ -5322,6 +5324,13 @@ args.lo: intrinsics/args.c\n @AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n @am__fastdepCC_FALSE@\t$(LIBTOOL) --tag=CC --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o args.lo `test -f 'intrinsics/args.c' || echo '$(srcdir)/'`intrinsics/args.c\n \n+bit_intrinsics.lo: intrinsics/bit_intrinsics.c\n+@am__fastdepCC_TRUE@\tif $(LIBTOOL) --tag=CC --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT bit_intrinsics.lo -MD -MP -MF \"$(DEPDIR)/bit_intrinsics.Tpo\" -c -o bit_intrinsics.lo `test -f 'intrinsics/bit_intrinsics.c' || echo '$(srcdir)/'`intrinsics/bit_intrinsics.c; \\\n+@am__fastdepCC_TRUE@\tthen mv -f \"$(DEPDIR)/bit_intrinsics.Tpo\" \"$(DEPDIR)/bit_intrinsics.Plo\"; else rm -f \"$(DEPDIR)/bit_intrinsics.Tpo\"; exit 1; fi\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='intrinsics/bit_intrinsics.c' object='bit_intrinsics.lo' libtool=yes @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(LIBTOOL) --tag=CC --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o bit_intrinsics.lo `test -f 'intrinsics/bit_intrinsics.c' || echo '$(srcdir)/'`intrinsics/bit_intrinsics.c\n+\n c99_functions.lo: intrinsics/c99_functions.c\n @am__fastdepCC_TRUE@\tif $(LIBTOOL) --tag=CC --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT c99_functions.lo -MD -MP -MF \"$(DEPDIR)/c99_functions.Tpo\" -c -o c99_functions.lo `test -f 'intrinsics/c99_functions.c' || echo '$(srcdir)/'`intrinsics/c99_functions.c; \\\n @am__fastdepCC_TRUE@\tthen mv -f \"$(DEPDIR)/c99_functions.Tpo\" \"$(DEPDIR)/c99_functions.Plo\"; else rm -f \"$(DEPDIR)/c99_functions.Tpo\"; exit 1; fi"}, {"sha": "c8de09cf055f73ff895c5eb26055fc8f51bdb095", "filename": "libgfortran/gfortran.map", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a05c536a636a6420ef3e00df0e3e7f6d4b9584e/libgfortran%2Fgfortran.map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a05c536a636a6420ef3e00df0e3e7f6d4b9584e/libgfortran%2Fgfortran.map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgfortran.map?ref=0a05c536a636a6420ef3e00df0e3e7f6d4b9584e", "patch": "@@ -1090,6 +1090,13 @@ GFORTRAN_1.1 {\n     _gfortran_unpack1_char4;\n } GFORTRAN_1.0; \n \n+\n+GFORTRAN_1.2 {\n+  global:\n+    _gfortran_clz128;\n+    _gfortran_ctz128;\n+} GFORTRAN_1.1; \n+\n F2C_1.0 {\n   global:\n     _gfortran_f2c_specific__abs_c4;"}, {"sha": "92f5f039be63fd0029232375830cf71b75088f4f", "filename": "libgfortran/intrinsics/bit_intrinsics.c", "status": "added", "additions": 138, "deletions": 0, "changes": 138, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a05c536a636a6420ef3e00df0e3e7f6d4b9584e/libgfortran%2Fintrinsics%2Fbit_intrinsics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a05c536a636a6420ef3e00df0e3e7f6d4b9584e/libgfortran%2Fintrinsics%2Fbit_intrinsics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fbit_intrinsics.c?ref=0a05c536a636a6420ef3e00df0e3e7f6d4b9584e", "patch": "@@ -0,0 +1,138 @@\n+/* Implementation of the bit intrinsics not implemented as GCC builtins.\n+   Copyright (C) 2009 Free Software Foundation, Inc.\n+\n+This file is part of the GNU Fortran runtime library (libgfortran).\n+\n+Libgfortran is free software; you can redistribute it and/or\n+modify it under the terms of the GNU General Public\n+License as published by the Free Software Foundation; either\n+version 3 of the License, or (at your option) any later version.\n+\n+Libgfortran is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"libgfortran.h\"\n+\n+\n+#ifdef HAVE_GFC_INTEGER_16\n+extern int clz128 (GFC_INTEGER_16);\n+export_proto(clz128);\n+\n+int\n+clz128 (GFC_INTEGER_16 x)\n+{\n+  int res = 127;\n+\n+  // We can't write 0xFFFFFFFFFFFFFFFF0000000000000000, so we work around it\n+  if (x & ((__uint128_t) 0xFFFFFFFFFFFFFFFF << 64))\n+    {\n+      res -= 64;\n+      x >>= 64;\n+    }\n+\n+  if (x & 0xFFFFFFFF00000000)\n+    {\n+      res -= 32;\n+      x >>= 32;\n+    }\n+\n+  if (x & 0xFFFF0000)\n+    {\n+      res -= 16;\n+      x >>= 16;\n+    }\n+\n+  if (x & 0xFF00)\n+    {\n+      res -= 8;\n+      x >>= 8;\n+    }\n+\n+  if (x & 0xF0)\n+    {\n+      res -= 4;\n+      x >>= 4;\n+    }\n+\n+  if (x & 0xC)\n+    {\n+      res -= 2;\n+      x >>= 2;\n+    }\n+\n+  if (x & 0x2)\n+    {\n+      res -= 1;\n+      x >>= 1;\n+    }\n+\n+  return res;\n+}\n+#endif\n+\n+\n+#ifdef HAVE_GFC_INTEGER_16\n+extern int ctz128 (GFC_INTEGER_16);\n+export_proto(ctz128);\n+\n+int\n+ctz128 (GFC_INTEGER_16 x)\n+{\n+  int res = 0;\n+\n+  if ((x & 0xFFFFFFFFFFFFFFFF) == 0)\n+    {\n+      res += 64;\n+      x >>= 64;\n+    }\n+\n+  if ((x & 0xFFFFFFFF) == 0)\n+    {\n+      res += 32;\n+      x >>= 32;\n+    }\n+\n+  if ((x & 0xFFFF) == 0)\n+    {\n+      res += 16;\n+      x >>= 16;\n+    }\n+\n+  if ((x & 0xFF) == 0)\n+    {\n+      res += 8;\n+      x >>= 8;\n+    }\n+\n+  if ((x & 0xF) == 0)\n+    {\n+      res += 4;\n+      x >>= 4;\n+    }\n+\n+  if ((x & 0x3) == 0)\n+    {\n+      res += 2;\n+      x >>= 2;\n+    }\n+\n+  if ((x & 0x1) == 0)\n+    {\n+      res += 1;\n+      x >>= 1;\n+    }\n+\n+  return res;\n+}\n+#endif"}]}