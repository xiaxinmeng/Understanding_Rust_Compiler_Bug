{"sha": "d7f336f846f4333c3e55cc222fba21b4bc154119", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDdmMzM2Zjg0NmY0MzMzYzNlNTVjYzIyMmZiYTIxYjRiYzE1NDExOQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2016-10-07T13:47:40Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2016-10-07T13:47:40Z"}, "message": "tree-ssa-propagate.c (replace_phi_args_in): Remove no longer required hack.\n\n2016-10-07  Richard Biener  <rguenther@suse.de>\n\n\t* tree-ssa-propagate.c (replace_phi_args_in): Remove no longer\n\trequired hack.\n\t(substitute_and_fold_dom_walker::before_dom_children):\n\tSubstitute and fold before pass specific folding to avoid\n\tfeeding that with SSA names that will be later released.\n\t* tree-ssa-ccp.c (get_value_for_expr): Guard for new SSA names\n\tintroduced by folding and visited by evaluate_stmt called during\n\tccp_fold_stmt.\n\t(likely_value): Likewise.\n\t(evaluate_stmt): Likewise.\n\t* tree-vrp.c (simplify_truth_ops_using_ranges): Fold modified stmt.\n\t(simplify_div_or_mod_using_ranges): Likewise.\n\t(simplify_min_or_max_using_ranges): Likewise.\n\t(simplify_abs_using_ranges): Likewise.\n\t(simplify_conversion_using_ranges): Likewise.\n\t(simplify_float_conversion_using_ranges): Likewise.\n\t(simplify_stmt_using_ranges): Likewise.\n\n\t* gcc.dg/tree-ssa/vrp01.c: Adjust.\n\t* gcc.dg/tree-ssa/vrp34.c: Likewise.\n\nFrom-SVN: r240865", "tree": {"sha": "4f3aacf0249259991ac7ae2c63b406c8b1311937", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4f3aacf0249259991ac7ae2c63b406c8b1311937"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d7f336f846f4333c3e55cc222fba21b4bc154119", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7f336f846f4333c3e55cc222fba21b4bc154119", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7f336f846f4333c3e55cc222fba21b4bc154119", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7f336f846f4333c3e55cc222fba21b4bc154119/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a9172bf307dd49fa001387f4b514ea49d38f2092", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9172bf307dd49fa001387f4b514ea49d38f2092", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9172bf307dd49fa001387f4b514ea49d38f2092"}], "stats": {"total": 107, "additions": 69, "deletions": 38}, "files": [{"sha": "ad50ab9dcf74a7bc852ff431c7752fa6f0be77ad", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f336f846f4333c3e55cc222fba21b4bc154119/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f336f846f4333c3e55cc222fba21b4bc154119/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d7f336f846f4333c3e55cc222fba21b4bc154119", "patch": "@@ -1,3 +1,23 @@\n+2016-10-07  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-ssa-propagate.c (replace_phi_args_in): Remove no longer\n+\trequired hack.\n+\t(substitute_and_fold_dom_walker::before_dom_children):\n+\tSubstitute and fold before pass specific folding to avoid\n+\tfeeding that with SSA names that will be later released.\n+\t* tree-ssa-ccp.c (get_value_for_expr): Guard for new SSA names\n+\tintroduced by folding and visited by evaluate_stmt called during\n+\tccp_fold_stmt.\n+\t(likely_value): Likewise.\n+\t(evaluate_stmt): Likewise.\n+\t* tree-vrp.c (simplify_truth_ops_using_ranges): Fold modified stmt.\n+\t(simplify_div_or_mod_using_ranges): Likewise.\n+\t(simplify_min_or_max_using_ranges): Likewise.\n+\t(simplify_abs_using_ranges): Likewise.\n+\t(simplify_conversion_using_ranges): Likewise.\n+\t(simplify_float_conversion_using_ranges): Likewise.\n+\t(simplify_stmt_using_ranges): Likewise.\n+\n 2016-10-07  Marek Polacek  <polacek@redhat.com>\n \n \t* gimplify.c (should_warn_for_implicit_fallthrough): Check for"}, {"sha": "1184d5cf14b2df59ea34f256b61cee3d54540d90", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f336f846f4333c3e55cc222fba21b4bc154119/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f336f846f4333c3e55cc222fba21b4bc154119/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d7f336f846f4333c3e55cc222fba21b4bc154119", "patch": "@@ -1,3 +1,8 @@\n+2016-10-07  Richard Biener  <rguenther@suse.de>\n+\n+\t* gcc.dg/tree-ssa/vrp01.c: Adjust.\n+\t* gcc.dg/tree-ssa/vrp34.c: Likewise.\n+\n 2016-10-07  Marek Polacek  <polacek@redhat.com>\n \n \t* c-c++-common/Wimplicit-fallthrough-22.c: New test."}, {"sha": "64320736de83fda6533f209852db0b3c59b33d0f", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp01.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f336f846f4333c3e55cc222fba21b4bc154119/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp01.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f336f846f4333c3e55cc222fba21b4bc154119/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp01.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp01.c?ref=d7f336f846f4333c3e55cc222fba21b4bc154119", "patch": "@@ -25,4 +25,4 @@ foo (int *p, int i)\n   return i;\n }\n \n-/* { dg-final { scan-tree-dump-times \"Folding predicate p_.*to 1\" 1 \"vrp1\" } } */\n+/* { dg-final { scan-tree-dump-times \"if \\\\\\(\" 2 \"vrp1\" } } */"}, {"sha": "142e56c1641eb0e1b4e42849efe0995e551f8752", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp34.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f336f846f4333c3e55cc222fba21b4bc154119/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp34.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f336f846f4333c3e55cc222fba21b4bc154119/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp34.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp34.c?ref=d7f336f846f4333c3e55cc222fba21b4bc154119", "patch": "@@ -15,5 +15,5 @@ foo (int a)\n     }\n }\n \n-/* { dg-final { scan-tree-dump \"Folding predicate a_. > 2 to 1\" \"vrp1\" } } */\n-/* { dg-final { scan-tree-dump \"Folding predicate a_. <= 5 to 1\" \"vrp1\" } } */\n+/* Both ifs should be optimized.  */\n+/* { dg-final { scan-tree-dump-times \"if \\\\\\(\" 0 \"vrp1\" } } */"}, {"sha": "fe9a31320fa27c9d671b693379e85ed35a4e00e2", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f336f846f4333c3e55cc222fba21b4bc154119/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f336f846f4333c3e55cc222fba21b4bc154119/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=d7f336f846f4333c3e55cc222fba21b4bc154119", "patch": "@@ -591,7 +591,15 @@ get_value_for_expr (tree expr, bool for_bits_p)\n \n   if (TREE_CODE (expr) == SSA_NAME)\n     {\n-      val = *get_value (expr);\n+      ccp_prop_value_t *val_ = get_value (expr);\n+      if (val_)\n+\tval = *val_;\n+      else\n+\t{\n+\t  val.lattice_val = VARYING;\n+\t  val.value = NULL_TREE;\n+\t  val.mask = -1;\n+\t}\n       if (for_bits_p\n \t  && val.lattice_val == CONSTANT\n \t  && TREE_CODE (val.value) == ADDR_EXPR)\n@@ -673,12 +681,12 @@ likely_value (gimple *stmt)\n     {\n       ccp_prop_value_t *val = get_value (use);\n \n-      if (val->lattice_val == UNDEFINED)\n+      if (val && val->lattice_val == UNDEFINED)\n \thas_undefined_operand = true;\n       else\n \tall_undefined_operands = false;\n \n-      if (val->lattice_val == CONSTANT)\n+      if (val && val->lattice_val == CONSTANT)\n \thas_constant_operand = true;\n \n       if (SSA_NAME_IS_DEFAULT_DEF (use)\n@@ -1739,11 +1747,11 @@ evaluate_stmt (gimple *stmt)\n       simplified = ccp_fold (stmt);\n       if (simplified && TREE_CODE (simplified) == SSA_NAME)\n \t{\n-\t  val = *get_value (simplified);\n-\t  if (val.lattice_val != VARYING)\n+\t  ccp_prop_value_t *val = get_value (simplified);\n+\t  if (val && val->lattice_val != VARYING)\n \t    {\n \t      fold_undefer_overflow_warnings (true, stmt, 0);\n-\t      return val;\n+\t      return *val;\n \t    }\n \t}\n       is_constant = simplified && is_gimple_min_invariant (simplified);"}, {"sha": "cd1cbd283252217232913e426792af7edc4eb5f4", "filename": "gcc/tree-ssa-propagate.c", "status": "modified", "additions": 18, "deletions": 27, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f336f846f4333c3e55cc222fba21b4bc154119/gcc%2Ftree-ssa-propagate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f336f846f4333c3e55cc222fba21b4bc154119/gcc%2Ftree-ssa-propagate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-propagate.c?ref=d7f336f846f4333c3e55cc222fba21b4bc154119", "patch": "@@ -914,7 +914,6 @@ replace_phi_args_in (gphi *phi, ssa_prop_get_value_fn get_value)\n       print_gimple_stmt (dump_file, phi, 0, TDF_SLIM);\n     }\n \n-  basic_block bb = gimple_bb (phi);\n   for (i = 0; i < gimple_phi_num_args (phi); i++)\n     {\n       tree arg = gimple_phi_arg_def (phi, i);\n@@ -927,19 +926,6 @@ replace_phi_args_in (gphi *phi, ssa_prop_get_value_fn get_value)\n \t    {\n \t      edge e = gimple_phi_arg_edge (phi, i);\n \n-\t      /* Avoid propagating constants into loop latch edge\n-\t         PHI arguments as this makes coalescing the copy\n-\t\t across this edge impossible.  If the argument is\n-\t\t defined by an assert - otherwise the stmt will\n-\t\t get removed without replacing its uses.  */\n-\t      if (TREE_CODE (val) != SSA_NAME\n-\t\t  && bb->loop_father->header == bb\n-\t\t  && dominated_by_p (CDI_DOMINATORS, e->src, bb)\n-\t\t  && is_gimple_assign (SSA_NAME_DEF_STMT (arg))\n-\t\t  && (gimple_assign_rhs_code (SSA_NAME_DEF_STMT (arg))\n-\t\t      == ASSERT_EXPR))\n-\t\tcontinue;\n-\n \t      if (TREE_CODE (val) != SSA_NAME)\n \t\tprop_stats.num_const_prop++;\n \t      else\n@@ -1090,18 +1076,6 @@ substitute_and_fold_dom_walker::before_dom_children (basic_block bb)\n       bool was_noreturn = (is_gimple_call (stmt)\n \t\t\t   && gimple_call_noreturn_p (stmt));\n \n-      /* Some statements may be simplified using propagator\n-\t specific information.  Do this before propagating\n-\t into the stmt to not disturb pass specific information.  */\n-      if (fold_fn\n-\t  && (*fold_fn)(&i))\n-\t{\n-\t  did_replace = true;\n-\t  prop_stats.num_stmts_folded++;\n-\t  stmt = gsi_stmt (i);\n-\t  update_stmt (stmt);\n-\t}\n-\n       /* Replace real uses in the statement.  */\n       did_replace |= replace_uses_in (stmt, get_value_fn);\n \n@@ -1110,6 +1084,22 @@ substitute_and_fold_dom_walker::before_dom_children (basic_block bb)\n \t{\n \t  fold_stmt (&i, follow_single_use_edges);\n \t  stmt = gsi_stmt (i);\n+\t  gimple_set_modified (stmt, true);\n+\t}\n+\n+      /* Some statements may be simplified using propagator\n+\t specific information.  Do this before propagating\n+\t into the stmt to not disturb pass specific information.  */\n+      if (fold_fn)\n+\t{\n+\t  update_stmt_if_modified (stmt);\n+\t  if ((*fold_fn)(&i))\n+\t    {\n+\t      did_replace = true;\n+\t      prop_stats.num_stmts_folded++;\n+\t      stmt = gsi_stmt (i);\n+\t      gimple_set_modified (stmt, true);\n+\t    }\n \t}\n \n       /* If this is a control statement the propagator left edges\n@@ -1127,6 +1117,7 @@ substitute_and_fold_dom_walker::before_dom_children (basic_block bb)\n \t\tgimple_cond_make_true (as_a <gcond *> (stmt));\n \t      else\n \t\tgimple_cond_make_false (as_a <gcond *> (stmt));\n+\t      gimple_set_modified (stmt, true);\n \t      did_replace = true;\n \t    }\n \t}\n@@ -1155,7 +1146,7 @@ substitute_and_fold_dom_walker::before_dom_children (basic_block bb)\n \t    }\n \n \t  /* Determine what needs to be done to update the SSA form.  */\n-\t  update_stmt (stmt);\n+\t  update_stmt_if_modified (stmt);\n \t  if (!is_gimple_debug (stmt))\n \t    something_changed = true;\n \t}"}, {"sha": "4e7043122dec1f2dfbf5ee919ed4eeabd8b03456", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f336f846f4333c3e55cc222fba21b4bc154119/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f336f846f4333c3e55cc222fba21b4bc154119/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=d7f336f846f4333c3e55cc222fba21b4bc154119", "patch": "@@ -9055,6 +9055,7 @@ simplify_truth_ops_using_ranges (gimple_stmt_iterator *gsi, gimple *stmt)\n   else\n     gimple_assign_set_rhs_with_ops (gsi, BIT_XOR_EXPR, op0, op1);\n   update_stmt (gsi_stmt (*gsi));\n+  fold_stmt (gsi, follow_single_use_edges);\n \n   return true;\n }\n@@ -9156,6 +9157,7 @@ simplify_div_or_mod_using_ranges (gimple_stmt_iterator *gsi, gimple *stmt)\n \t}\n \n       update_stmt (stmt);\n+      fold_stmt (gsi, follow_single_use_edges);\n       return true;\n     }\n \n@@ -9204,6 +9206,7 @@ simplify_min_or_max_using_ranges (gimple *stmt)\n       gimple_stmt_iterator gsi = gsi_for_stmt (stmt);\n       gimple_assign_set_rhs_from_tree (&gsi, res);\n       update_stmt (stmt);\n+      fold_stmt (&gsi, follow_single_use_edges);\n       return true;\n     }\n \n@@ -9256,6 +9259,8 @@ simplify_abs_using_ranges (gimple *stmt)\n \t  else\n \t    gimple_assign_set_rhs_code (stmt, NEGATE_EXPR);\n \t  update_stmt (stmt);\n+\t  gimple_stmt_iterator gsi = gsi_for_stmt (stmt);\n+\t  fold_stmt (&gsi, follow_single_use_edges);\n \t  return true;\n \t}\n     }\n@@ -9906,7 +9911,8 @@ simplify_conversion_using_ranges (gimple *stmt)\n     return false;\n \n   gimple_assign_set_rhs1 (stmt, innerop);\n-  update_stmt (stmt);\n+  gimple_stmt_iterator gsi = gsi_for_stmt (stmt);\n+  fold_stmt (&gsi, follow_single_use_edges);\n   return true;\n }\n \n@@ -9971,7 +9977,7 @@ simplify_float_conversion_using_ranges (gimple_stmt_iterator *gsi,\n   conv = gimple_build_assign (tem, NOP_EXPR, rhs1);\n   gsi_insert_before (gsi, conv, GSI_SAME_STMT);\n   gimple_assign_set_rhs1 (stmt, tem);\n-  update_stmt (stmt);\n+  fold_stmt (gsi, follow_single_use_edges);\n \n   return true;\n }\n@@ -10176,6 +10182,7 @@ simplify_stmt_using_ranges (gimple_stmt_iterator *gsi)\n \t\t\t\t\t      new_rhs1,\n \t\t\t\t\t      new_rhs2);\n \t      update_stmt (gsi_stmt (*gsi));\n+\t      fold_stmt (gsi, follow_single_use_edges);\n \t      return true;\n \t    }\n \t}"}]}