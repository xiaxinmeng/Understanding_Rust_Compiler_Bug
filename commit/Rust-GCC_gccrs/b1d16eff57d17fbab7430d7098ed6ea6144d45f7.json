{"sha": "b1d16eff57d17fbab7430d7098ed6ea6144d45f7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjFkMTZlZmY1N2QxN2ZiYWI3NDMwZDcwOThlZDZlYTYxNDRkNDVmNw==", "commit": {"author": {"name": "Zdenek Dvorak", "email": "rakdver@atrey.karlin.mff.cuni.cz", "date": "2004-09-15T07:51:33Z"}, "committer": {"name": "Zdenek Dvorak", "email": "rakdver@gcc.gnu.org", "date": "2004-09-15T07:51:33Z"}, "message": "re PR tree-optimization/17468 (Java garbage collector miscompiled at -O1 and higher)\n\n\tPR tree-optimization/17468\n\t* tree-ssa.c (verify_use, verify_phi_args, verify_ssa):  Verify that\n\tdefinition inside a block precede uses.\n\t* tree-tailcall.c (adjust_return_value): Emit statements in the\n\tcorrect order.\n\nFrom-SVN: r87538", "tree": {"sha": "9992178e81375d3aa9e5e65505d8ba88f36e9832", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9992178e81375d3aa9e5e65505d8ba88f36e9832"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b1d16eff57d17fbab7430d7098ed6ea6144d45f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1d16eff57d17fbab7430d7098ed6ea6144d45f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1d16eff57d17fbab7430d7098ed6ea6144d45f7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1d16eff57d17fbab7430d7098ed6ea6144d45f7/comments", "author": null, "committer": null, "parents": [{"sha": "3657919271af36945e7939b0fc8a5699960f215d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3657919271af36945e7939b0fc8a5699960f215d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3657919271af36945e7939b0fc8a5699960f215d"}], "stats": {"total": 71, "additions": 62, "deletions": 9}, "files": [{"sha": "5432bd55a8577d50c47855938d0d5d1e1dadf258", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1d16eff57d17fbab7430d7098ed6ea6144d45f7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1d16eff57d17fbab7430d7098ed6ea6144d45f7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b1d16eff57d17fbab7430d7098ed6ea6144d45f7", "patch": "@@ -1,3 +1,11 @@\n+2004-09-15  Zdenek Dvorak  <rakdver@atrey.karlin.mff.cuni.cz>\n+\n+\tPR tree-optimization/17468\n+\t* tree-ssa.c (verify_use, verify_phi_args, verify_ssa):  Verify that\n+\tdefinition inside a block precede uses.\n+\t* tree-tailcall.c (adjust_return_value): Emit statements in the\n+\tcorrect order.\n+\n 2004-09-15  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* config/mips/mips.h (POINTERS_EXTEND_UNSIGNED): Delete."}, {"sha": "8e0975570c2a592025e72d9a6980c84c46475d00", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 52, "deletions": 7, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1d16eff57d17fbab7430d7098ed6ea6144d45f7/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1d16eff57d17fbab7430d7098ed6ea6144d45f7/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=b1d16eff57d17fbab7430d7098ed6ea6144d45f7", "patch": "@@ -207,11 +207,15 @@ verify_def (basic_block bb, basic_block *definition_block, tree ssa_name,\n       arguments).\n \n    IS_VIRTUAL is true if SSA_NAME is created by a V_MAY_DEF or a\n-      V_MUST_DEF.  */\n+      V_MUST_DEF.\n+   \n+   If NAMES_DEFINED_IN_BB is not NULL, it contains a bitmap of ssa names\n+     that are defined before STMT in basic block BB.  */\n \n static bool\n verify_use (basic_block bb, basic_block def_bb, tree ssa_name,\n-\t    tree stmt, bool check_abnormal, bool is_virtual)\n+\t    tree stmt, bool check_abnormal, bool is_virtual,\n+\t    bitmap names_defined_in_bb)\n {\n   bool err = false;\n \n@@ -232,6 +236,13 @@ verify_use (basic_block bb, basic_block def_bb, tree ssa_name,\n \t     def_bb->index, bb->index);\n       err = true;\n     }\n+  else if (bb == def_bb\n+\t   && names_defined_in_bb != NULL\n+\t   && !bitmap_bit_p (names_defined_in_bb, SSA_NAME_VERSION (ssa_name)))\n+    {\n+      error (\"Definition in block %i follows the use\", def_bb->index);\n+      err = true;\n+    }\n \n   if (check_abnormal\n       && !SSA_NAME_OCCURS_IN_ABNORMAL_PHI (ssa_name))\n@@ -281,7 +292,8 @@ verify_phi_args (tree phi, basic_block bb, basic_block *definition_block)\n       if (TREE_CODE (op) == SSA_NAME)\n \terr = verify_use (e->src, definition_block[SSA_NAME_VERSION (op)], op,\n \t\t\t  phi, e->flags & EDGE_ABNORMAL,\n-\t\t\t  !is_gimple_reg (PHI_RESULT (phi)));\n+\t\t\t  !is_gimple_reg (PHI_RESULT (phi)),\n+\t\t\t  NULL);\n \n       if (e->dest != bb)\n \t{\n@@ -506,6 +518,7 @@ verify_ssa (void)\n   ssa_op_iter iter;\n   tree op;\n   enum dom_state orig_dom_state = dom_computed[CDI_DOMINATORS];\n+  bitmap names_defined_in_bb = BITMAP_XMALLOC ();\n \n   timevar_push (TV_TREE_SSA_VERIFY);\n \n@@ -578,8 +591,12 @@ verify_ssa (void)\n \n       /* Verify the arguments for every PHI node in the block.  */\n       for (phi = phi_nodes (bb); phi; phi = PHI_CHAIN (phi))\n-\tif (verify_phi_args (phi, bb, definition_block))\n-\t  goto err;\n+\t{\n+\t  if (verify_phi_args (phi, bb, definition_block))\n+\t    goto err;\n+\t  bitmap_set_bit (names_defined_in_bb,\n+\t\t\t  SSA_NAME_VERSION (PHI_RESULT (phi)));\n+\t}\n \n       /* Now verify all the uses and vuses in every statement of the block.  */\n       for (bsi = bsi_start (bb); !bsi_end_p (bsi); bsi_next (&bsi))\n@@ -589,17 +606,44 @@ verify_ssa (void)\n \t  FOR_EACH_SSA_TREE_OPERAND (op, stmt, iter, SSA_OP_VIRTUAL_USES)\n \t    {\n \t      if (verify_use (bb, definition_block[SSA_NAME_VERSION (op)],\n-\t\t\t      op, stmt, false, true))\n+\t\t\t      op, stmt, false, true,\n+\t\t\t      names_defined_in_bb))\n \t\tgoto err;\n \t    }\n \n \t  FOR_EACH_SSA_TREE_OPERAND (op, stmt, iter, SSA_OP_USE)\n \t    {\n \t      if (verify_use (bb, definition_block[SSA_NAME_VERSION (op)],\n-\t\t\t      op, stmt, false, false))\n+\t\t\t      op, stmt, false, false,\n+\t\t\t      names_defined_in_bb))\n \t\tgoto err;\n \t    }\n+\n+\t  FOR_EACH_SSA_TREE_OPERAND (op, stmt, iter, SSA_OP_ALL_DEFS)\n+\t    {\n+\t      bitmap_set_bit (names_defined_in_bb, SSA_NAME_VERSION (op));\n+\t    }\n \t}\n+\n+      /* Verify the uses in arguments of PHI nodes at the exits from the\n+\t block.  */\n+      for (e = bb->succ; e; e = e->succ_next)\n+\t{\n+\t  for (phi = phi_nodes (e->dest); phi; phi = PHI_CHAIN (phi))\n+\t    {\n+\t      bool virtual = !is_gimple_reg (PHI_RESULT (phi));\n+\t      op = PHI_ARG_DEF_FROM_EDGE (phi, e);\n+\t      if (TREE_CODE (op) != SSA_NAME)\n+\t\tcontinue;\n+\n+\t      if (verify_use (bb, definition_block[SSA_NAME_VERSION (op)],\n+\t\t\t      op, phi, false, virtual,\n+\t\t\t      names_defined_in_bb))\n+\t\tgoto err;\n+\t    }\n+\t}\n+\n+      bitmap_clear (names_defined_in_bb);\n     }\n \n   /* Finally, verify alias information.  */\n@@ -613,6 +657,7 @@ verify_ssa (void)\n   else\n     dom_computed[CDI_DOMINATORS] = orig_dom_state;\n   \n+  BITMAP_XFREE (names_defined_in_bb);\n   timevar_pop (TV_TREE_SSA_VERIFY);\n   return;\n "}, {"sha": "cfe9dfaacc1e003f611be1d213b29e7ba3d7f9d2", "filename": "gcc/tree-tailcall.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1d16eff57d17fbab7430d7098ed6ea6144d45f7/gcc%2Ftree-tailcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1d16eff57d17fbab7430d7098ed6ea6144d45f7/gcc%2Ftree-tailcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-tailcall.c?ref=b1d16eff57d17fbab7430d7098ed6ea6144d45f7", "patch": "@@ -624,7 +624,7 @@ adjust_return_value (basic_block bb, tree m, tree a)\n \n       var = make_ssa_name (tmp, stmt);\n       TREE_OPERAND (stmt, 0) = var;\n-      bsi_insert_before (&bsi, stmt, BSI_NEW_STMT);\n+      bsi_insert_before (&bsi, stmt, BSI_SAME_STMT);\n     }\n   else\n     var = ret_var;\n@@ -639,7 +639,7 @@ adjust_return_value (basic_block bb, tree m, tree a)\n \n       var = make_ssa_name (tmp, stmt);\n       TREE_OPERAND (stmt, 0) = var;\n-      bsi_insert_before (&bsi, stmt, BSI_NEW_STMT);\n+      bsi_insert_before (&bsi, stmt, BSI_SAME_STMT);\n     }\n \n   TREE_OPERAND (ret_stmt, 0) = var;"}]}