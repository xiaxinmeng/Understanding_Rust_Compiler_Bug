{"sha": "9bbd48d120d203e8eade09e0bb830370b6d69801", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWJiZDQ4ZDEyMGQyMDNlOGVhZGUwOWUwYmI4MzAzNzBiNmQ2OTgwMQ==", "commit": {"author": {"name": "Kirill Yukhin", "email": "kirill.yukhin@intel.com", "date": "2013-12-05T11:23:39Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2013-12-05T11:23:39Z"}, "message": "i386.c (IX86_BUILTIN_READ_FLAGS): New.\n\nChangeLog/\n        * config/i386/i386.c(IX86_BUILTIN_READ_FLAGS): New.\n\t(IX86_BUILTIN_WRITE_FLAGS): Ditto.\n\t(ix86_init_mmx_sse_builtins): Define\n\t__builtin_ia32_writeeflags_u32, __builtin_ia32_writeeflags_u64,\n\t__builtin_ia32_readeflags_u32, __builtin_ia32_readeflags_u64.\n\t(ix86_expand_builtin): Expand them.\n\t* config/i386/ia32intrin.h (__readeflags): New.\n\t(__writeeflags): Ditto.\n\t* gcc/config/i386/i386.md (*pushfl<mode>): Ditto.\n\t(*popfl<mode>1): Ditto.\n\ntestsuite/ChangeLog/\n        * gcc.target/i386/readeflags-1.c: New.\n        * gcc.target/i386/writeeflags-1.c: Ditto.\n\nFrom-SVN: r205703", "tree": {"sha": "3ba8009e419b90953be79c501271dcc9db592b66", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3ba8009e419b90953be79c501271dcc9db592b66"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9bbd48d120d203e8eade09e0bb830370b6d69801", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bbd48d120d203e8eade09e0bb830370b6d69801", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9bbd48d120d203e8eade09e0bb830370b6d69801", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bbd48d120d203e8eade09e0bb830370b6d69801/comments", "author": null, "committer": null, "parents": [{"sha": "46db94aa6a7619350c9d8b75fe0cc4fa3c4d2182", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46db94aa6a7619350c9d8b75fe0cc4fa3c4d2182", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46db94aa6a7619350c9d8b75fe0cc4fa3c4d2182"}], "stats": {"total": 175, "additions": 175, "deletions": 0}, "files": [{"sha": "6440950f47056ed610930ea89358058272887e95", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bbd48d120d203e8eade09e0bb830370b6d69801/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bbd48d120d203e8eade09e0bb830370b6d69801/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9bbd48d120d203e8eade09e0bb830370b6d69801", "patch": "@@ -1,3 +1,16 @@\n+2013-12-05  Kirill Yukhin  <kirill.yukhin@intel.com>\n+\n+        * config/i386/i386.c(IX86_BUILTIN_READ_FLAGS): New.\n+\t(IX86_BUILTIN_WRITE_FLAGS): Ditto.\n+\t(ix86_init_mmx_sse_builtins): Define\n+\t__builtin_ia32_writeeflags_u32, __builtin_ia32_writeeflags_u64,\n+\t__builtin_ia32_readeflags_u32, __builtin_ia32_readeflags_u64.\n+\t(ix86_expand_builtin): Expand them.\n+\t* config/i386/ia32intrin.h (__readeflags): New.\n+\t(__writeeflags): Ditto.\n+\t* gcc/config/i386/i386.md (*pushfl<mode>): Ditto.\n+\t(*popfl<mode>1): Ditto.\n+\n 2013-12-05  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/59374"}, {"sha": "848b85086522cc6eeb027869f38c4cb8c7d72632", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bbd48d120d203e8eade09e0bb830370b6d69801/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bbd48d120d203e8eade09e0bb830370b6d69801/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=9bbd48d120d203e8eade09e0bb830370b6d69801", "patch": "@@ -27920,6 +27920,10 @@ enum ix86_builtins\n   IX86_BUILTIN_CPU_IS,\n   IX86_BUILTIN_CPU_SUPPORTS,\n \n+  /* Read/write FLAGS register built-ins.  */\n+  IX86_BUILTIN_READ_FLAGS,\n+  IX86_BUILTIN_WRITE_FLAGS,\n+\n   IX86_BUILTIN_MAX\n };\n \n@@ -29761,6 +29765,17 @@ ix86_init_mmx_sse_builtins (void)\n \t       UCHAR_FTYPE_UCHAR_ULONGLONG_ULONGLONG_PULONGLONG,\n \t       IX86_BUILTIN_ADDCARRYX64);\n \n+  /* Read/write FLAGS.  */\n+  def_builtin (~OPTION_MASK_ISA_64BIT, \"__builtin_ia32_readeflags_u32\",\n+               UNSIGNED_FTYPE_VOID, IX86_BUILTIN_READ_FLAGS);\n+  def_builtin (OPTION_MASK_ISA_64BIT, \"__builtin_ia32_readeflags_u64\",\n+               UINT64_FTYPE_VOID, IX86_BUILTIN_READ_FLAGS);\n+  def_builtin (~OPTION_MASK_ISA_64BIT, \"__builtin_ia32_writeeflags_u32\",\n+               VOID_FTYPE_UNSIGNED, IX86_BUILTIN_WRITE_FLAGS);\n+  def_builtin (OPTION_MASK_ISA_64BIT, \"__builtin_ia32_writeeflags_u64\",\n+               VOID_FTYPE_UINT64, IX86_BUILTIN_WRITE_FLAGS);\n+\n+\n   /* Add FMA4 multi-arg argument instructions */\n   for (i = 0, d = bdesc_multi_arg; i < ARRAY_SIZE (bdesc_multi_arg); i++, d++)\n     {\n@@ -33439,6 +33454,28 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget,\n       emit_insn (gen_rtx_SET (VOIDmode, target, pat));\n       return target;\n \n+    case IX86_BUILTIN_READ_FLAGS:\n+      emit_insn (gen_push (gen_rtx_REG (word_mode, FLAGS_REG)));\n+\n+      if (target == NULL_RTX\n+\t  || !register_operand (target, word_mode)\n+\t  || GET_MODE (target) != word_mode)\n+\ttarget = gen_reg_rtx (word_mode);\n+\n+      emit_insn (gen_pop (target));\n+      return target;\n+\n+    case IX86_BUILTIN_WRITE_FLAGS:\n+\n+      arg0 = CALL_EXPR_ARG (exp, 0);\n+      op0 = expand_normal (arg0);\n+      if (!general_no_elim_operand (op0, word_mode))\n+\top0 = copy_to_mode_reg (word_mode, op0);\n+\n+      emit_insn (gen_push (op0));\n+      emit_insn (gen_pop (gen_rtx_REG (word_mode, FLAGS_REG)));\n+      return 0;\n+\n     case IX86_BUILTIN_GATHERSIV2DF:\n       icode = CODE_FOR_avx2_gathersiv2df;\n       goto gather_gen;"}, {"sha": "7075332466110c7e03237a0244a3d7b7ea15f143", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bbd48d120d203e8eade09e0bb830370b6d69801/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bbd48d120d203e8eade09e0bb830370b6d69801/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=9bbd48d120d203e8eade09e0bb830370b6d69801", "patch": "@@ -1721,6 +1721,23 @@\n   \"pop{<imodesuffix>}\\t%0\"\n   [(set_attr \"type\" \"pop\")\n    (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"*pushfl<mode>\"\n+  [(set (match_operand:DWIH 0 \"push_operand\" \"=<\")\n+\t(match_operand:DWIH 1 \"flags_reg_operand\"))]\n+  \"\"\n+  \"pushf{<imodesuffix>}\"\n+  [(set_attr \"type\" \"push\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"*popfl<mode>\"\n+  [(set (match_operand:DWIH 0 \"flags_reg_operand\")\n+\t(match_operand:DWIH 1 \"pop_operand\" \">\"))]\n+  \"\"\n+  \"popf{<imodesuffix>}\"\n+  [(set_attr \"type\" \"pop\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n \f\n ;; Move instructions.\n "}, {"sha": "65642e460238f76bb5d997cecfa3f73eb0247351", "filename": "gcc/config/i386/ia32intrin.h", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bbd48d120d203e8eade09e0bb830370b6d69801/gcc%2Fconfig%2Fi386%2Fia32intrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bbd48d120d203e8eade09e0bb830370b6d69801/gcc%2Fconfig%2Fi386%2Fia32intrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fia32intrin.h?ref=9bbd48d120d203e8eade09e0bb830370b6d69801", "patch": "@@ -238,13 +238,46 @@ __rorq (unsigned long long __X, int __C)\n   return (__X >> __C) | (__X << (64 - __C));\n }\n \n+/* Read flags register */\n+extern __inline unsigned long long\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+__readeflags (void)\n+{\n+  return __builtin_ia32_readeflags_u64 ();\n+}\n+\n+/* Write flags register */\n+extern __inline void\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+__writeeflags (unsigned long long X)\n+{\n+  __builtin_ia32_writeeflags_u64 (X);\n+}\n+\n #define _bswap64(a)\t\t__bswapq(a)\n #define _popcnt64(a)\t\t__popcntq(a)\n #define _lrotl(a,b)\t\t__rolq((a), (b))\n #define _lrotr(a,b)\t\t__rorq((a), (b))\n #else\n #define _lrotl(a,b)\t\t__rold((a), (b))\n #define _lrotr(a,b)\t\t__rord((a), (b))\n+\n+/* Read flags register */\n+extern __inline unsigned int\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+__readeflags (void)\n+{\n+  return __builtin_ia32_readeflags_u32 ();\n+}\n+\n+/* Write flags register */\n+extern __inline void\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+__writeeflags (unsigned int X)\n+{\n+  __builtin_ia32_writeeflags_u32 (X);\n+}\n+\n #endif\n \n #define _bit_scan_forward(a)\t__bsfd(a)"}, {"sha": "699ff7e6cd3539f2643a3816d488d7e388b2dc85", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bbd48d120d203e8eade09e0bb830370b6d69801/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bbd48d120d203e8eade09e0bb830370b6d69801/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9bbd48d120d203e8eade09e0bb830370b6d69801", "patch": "@@ -1,3 +1,8 @@\n+2013-12-05  Kirill Yukhin  <kirill.yukhin@intel.com>\n+\n+        * gcc.target/i386/readeflags-1.c: New.\n+\t* gcc.target/i386/writeeflags-1.c: Ditto.\n+\n 2013-12-05  Yury Gribov  <y.gribov@samsung.com>\n \n \tPR sanitizer/59369"}, {"sha": "6b2fa7e8d146a296aac989810b0e0f932de93684", "filename": "gcc/testsuite/gcc.target/i386/readeflags-1.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bbd48d120d203e8eade09e0bb830370b6d69801/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Freadeflags-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bbd48d120d203e8eade09e0bb830370b6d69801/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Freadeflags-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Freadeflags-1.c?ref=9bbd48d120d203e8eade09e0bb830370b6d69801", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O0\" } */\n+\n+#include <x86intrin.h>\n+\n+#ifdef __x86_64__\n+#define EFLAGS_TYPE unsigned long long int\n+#else\n+#define EFLAGS_TYPE unsigned int\n+#endif\n+\n+static EFLAGS_TYPE\n+readeflags_test (unsigned int a, unsigned int b)\n+{\n+  unsigned x = (a == b);\n+  return __readeflags ();\n+}\n+\n+int\n+main ()\n+{\n+  EFLAGS_TYPE flags;\n+\n+  flags = readeflags_test (100, 100);\n+\n+  if ((flags & 1) != 0)  /* Read CF */\n+    abort ();\n+\n+  flags = readeflags_test (100, 101);\n+\n+  if ((flags & 1) == 0)  /* Read CF */\n+    abort ();\n+\n+#ifdef DEBUG\n+    printf (\"PASSED\\n\");\n+#endif\n+\n+  return 0;\n+}\n+"}, {"sha": "446840cb33c4ba2f7f9f0bf7585296e50610ef02", "filename": "gcc/testsuite/gcc.target/i386/writeeflags-1.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bbd48d120d203e8eade09e0bb830370b6d69801/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fwriteeflags-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bbd48d120d203e8eade09e0bb830370b6d69801/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fwriteeflags-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fwriteeflags-1.c?ref=9bbd48d120d203e8eade09e0bb830370b6d69801", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O0\" } */\n+\n+#include <x86intrin.h>\n+\n+#ifdef __x86_64__\n+#define EFLAGS_TYPE unsigned long long int\n+#else\n+#define EFLAGS_TYPE unsigned int\n+#endif\n+\n+int\n+main ()\n+{\n+  EFLAGS_TYPE flags = 0xD7; /* 111010111b  */\n+\n+  __writeeflags (flags);\n+\n+  flags = __readeflags ();\n+\n+  if ((flags & 0xFF) != 0xD7)\n+    abort ();\n+\n+#ifdef DEBUG\n+    printf (\"PASSED\\n\");\n+#endif\n+\n+  return 0;\n+}\n+"}]}