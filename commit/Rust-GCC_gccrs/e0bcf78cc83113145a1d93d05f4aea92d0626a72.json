{"sha": "e0bcf78cc83113145a1d93d05f4aea92d0626a72", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTBiY2Y3OGNjODMxMTMxNDVhMWQ5M2QwNWY0YWVhOTJkMDYyNmE3Mg==", "commit": {"author": {"name": "Tobias Schl\u00fcter", "email": "tobias.schlueter@physik.uni-muenchen.de", "date": "2005-08-21T15:28:27Z"}, "committer": {"name": "Tobias Schl\u00fcter", "email": "tobi@gcc.gnu.org", "date": "2005-08-21T15:28:27Z"}, "message": "gfortran.h (gfc_option_t): Remove source field.\n\nfortran/\n\t* gfortran.h (gfc_option_t): Remove source field.  Add\n\tflag_d_lines field.\n\t(gfc_new_file): Remove arguments in prototype.\n\t(gfc_source_file): Make 'const char *'.\n\t* f95-lang.c (gfc_init): Use gfc_source_file instead of\n\tgfc_option.source.  Call gfc_new_file without arguments.\n\t* invoke.texi: Document new options '-fd-lines-as-code' and\n\t'-fd-lines-as-comment'.\n\t* lang.opt: Add new options.  Alphabetize.\n\t* options.c (gfc_init_options): Initialize gfc_source_file instead\n\tof gfc_option.source.  Initialize gfc_option.flag_d_lines.\n\t(form_from_filename): Move here from scanner.c.  Make\n\t'filename' argument 'const'.\n\t(gfc_post_options): Set gfc_source_file.  Determine source form.\n\tWarn if 'd-lines*' are used in free form.\n\t* scanner.c (gfc_source_file): Constify.\n\t(skip_fixed_comments): Deal with d-lines.\n\t(get_file): Constify argument 'name'.\n\t(load_file): Constify argument 'filename'.\n\t(form_from_filename): Moved to options.c.\n\t(gfc_new_file): Remove arguments.  Don't initialize\n\tgfc_source_file, don't determine source form.\n\t* trans-const.c (gfc_init_constants): Use gfc_source_file instead\n\tof gfc_option.source.\n\ntestsuite/\n\t* d_lines_1.f, d_lines_2.f, d_lines_3.f, d_lines_4.f,\n\td_lines_5.f: New.\n\nFrom-SVN: r103322", "tree": {"sha": "6d78660a99f1d6307abbfb89d8b2c30df09ad74e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6d78660a99f1d6307abbfb89d8b2c30df09ad74e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e0bcf78cc83113145a1d93d05f4aea92d0626a72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0bcf78cc83113145a1d93d05f4aea92d0626a72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0bcf78cc83113145a1d93d05f4aea92d0626a72", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0bcf78cc83113145a1d93d05f4aea92d0626a72/comments", "author": {"login": "TobiSchluter", "id": 11887541, "node_id": "MDQ6VXNlcjExODg3NTQx", "avatar_url": "https://avatars.githubusercontent.com/u/11887541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TobiSchluter", "html_url": "https://github.com/TobiSchluter", "followers_url": "https://api.github.com/users/TobiSchluter/followers", "following_url": "https://api.github.com/users/TobiSchluter/following{/other_user}", "gists_url": "https://api.github.com/users/TobiSchluter/gists{/gist_id}", "starred_url": "https://api.github.com/users/TobiSchluter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TobiSchluter/subscriptions", "organizations_url": "https://api.github.com/users/TobiSchluter/orgs", "repos_url": "https://api.github.com/users/TobiSchluter/repos", "events_url": "https://api.github.com/users/TobiSchluter/events{/privacy}", "received_events_url": "https://api.github.com/users/TobiSchluter/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TobiSchluter", "id": 11887541, "node_id": "MDQ6VXNlcjExODg3NTQx", "avatar_url": "https://avatars.githubusercontent.com/u/11887541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TobiSchluter", "html_url": "https://github.com/TobiSchluter", "followers_url": "https://api.github.com/users/TobiSchluter/followers", "following_url": "https://api.github.com/users/TobiSchluter/following{/other_user}", "gists_url": "https://api.github.com/users/TobiSchluter/gists{/gist_id}", "starred_url": "https://api.github.com/users/TobiSchluter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TobiSchluter/subscriptions", "organizations_url": "https://api.github.com/users/TobiSchluter/orgs", "repos_url": "https://api.github.com/users/TobiSchluter/repos", "events_url": "https://api.github.com/users/TobiSchluter/events{/privacy}", "received_events_url": "https://api.github.com/users/TobiSchluter/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1125164cd32576b05e6c078077d78736fa0d63e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1125164cd32576b05e6c078077d78736fa0d63e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1125164cd32576b05e6c078077d78736fa0d63e3"}], "stats": {"total": 332, "additions": 218, "deletions": 114}, "files": [{"sha": "90697abca3a961b711f43191e70fc6b60ad84935", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0bcf78cc83113145a1d93d05f4aea92d0626a72/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0bcf78cc83113145a1d93d05f4aea92d0626a72/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=e0bcf78cc83113145a1d93d05f4aea92d0626a72", "patch": "@@ -1,3 +1,30 @@\n+2005-08-21  Tobias Schl\"uter  <tobias.schlueter@physik.uni-muenchen.de>\n+\n+\t* gfortran.h (gfc_option_t): Remove source field.  Add\n+\tflag_d_lines field.\n+\t(gfc_new_file): Remove arguments in prototype.\n+\t(gfc_source_file): Make 'const char *'.\n+\t* f95-lang.c (gfc_init): Use gfc_source_file instead of\n+\tgfc_option.source.  Call gfc_new_file without arguments.\n+\t* invoke.texi: Document new options '-fd-lines-as-code' and\n+\t'-fd-lines-as-comment'.\n+\t* lang.opt: Add new options.  Alphabetize.\n+\t* options.c (gfc_init_options): Initialize gfc_source_file instead\n+\tof gfc_option.source.  Initialize gfc_option.flag_d_lines.\n+\t(form_from_filename): Move here from scanner.c.  Make\n+\t'filename' argument 'const'.\n+\t(gfc_post_options): Set gfc_source_file.  Determine source form.\n+\tWarn if 'd-lines*' are used in free form.\n+\t* scanner.c (gfc_source_file): Constify.\n+\t(skip_fixed_comments): Deal with d-lines.\n+\t(get_file): Constify argument 'name'.\n+\t(load_file): Constify argument 'filename'.\n+\t(form_from_filename): Moved to options.c.\n+\t(gfc_new_file): Remove arguments.  Don't initialize\n+\tgfc_source_file, don't determine source form.\n+\t* trans-const.c (gfc_init_constants): Use gfc_source_file instead\n+\tof gfc_option.source.\n+\n 2005-08-19  Steven G. Kargl  <kargls@comcast.net>\n \n \tPR fortran/23065"}, {"sha": "6e607e9fa8ebdca03789bdb67039e9d44391ddd8", "filename": "gcc/fortran/f95-lang.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0bcf78cc83113145a1d93d05f4aea92d0626a72/gcc%2Ffortran%2Ff95-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0bcf78cc83113145a1d93d05f4aea92d0626a72/gcc%2Ffortran%2Ff95-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ff95-lang.c?ref=e0bcf78cc83113145a1d93d05f4aea92d0626a72", "patch": "@@ -271,7 +271,7 @@ static bool\n gfc_init (void)\n {\n #ifdef USE_MAPPED_LOCATION\n-  linemap_add (&line_table, LC_ENTER, false, gfc_option.source, 1);\n+  linemap_add (&line_table, LC_ENTER, false, gfc_source_file, 1);\n   linemap_add (&line_table, LC_RENAME, false, \"<built-in>\", 0);\n #endif\n \n@@ -282,8 +282,8 @@ gfc_init (void)\n   /* Then the frontend.  */\n   gfc_init_1 ();\n \n-  if (gfc_new_file (gfc_option.source, gfc_option.source_form) != SUCCESS)\n-    fatal_error (\"can't open input file: %s\", gfc_option.source);\n+  if (gfc_new_file () != SUCCESS)\n+    fatal_error (\"can't open input file: %s\", gfc_source_file);\n   return true;\n }\n "}, {"sha": "c692ce24d37844fd536d462251ca77038c882c84", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0bcf78cc83113145a1d93d05f4aea92d0626a72/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0bcf78cc83113145a1d93d05f4aea92d0626a72/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=e0bcf78cc83113145a1d93d05f4aea92d0626a72", "patch": "@@ -1407,7 +1407,6 @@ gfc_data;\n /* Structure for holding compile options */\n typedef struct\n {\n-  const char *source;\n   char *module_dir;\n   gfc_source_form source_form;\n   int fixed_line_length;\n@@ -1436,6 +1435,7 @@ typedef struct\n   int flag_repack_arrays;\n   int flag_f2c;\n   int flag_backslash;\n+  int flag_d_lines;\n \n   int q_kind;\n \n@@ -1507,10 +1507,10 @@ int gfc_next_char (void);\n int gfc_peek_char (void);\n void gfc_error_recovery (void);\n void gfc_gobble_whitespace (void);\n-try gfc_new_file (const char *, gfc_source_form);\n+try gfc_new_file (void);\n \n extern gfc_source_form gfc_current_form;\n-extern char *gfc_source_file;\n+extern const char *gfc_source_file;\n extern locus gfc_current_locus;\n \n /* misc.c */"}, {"sha": "945c9f1f7e5ce88284f18a0e5505f115fcf51d05", "filename": "gcc/fortran/invoke.texi", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0bcf78cc83113145a1d93d05f4aea92d0626a72/gcc%2Ffortran%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0bcf78cc83113145a1d93d05f4aea92d0626a72/gcc%2Ffortran%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finvoke.texi?ref=e0bcf78cc83113145a1d93d05f4aea92d0626a72", "patch": "@@ -117,7 +117,7 @@ by type.  Explanations are in the following sections.\n @gccoptlist{\n -ffree-form  -fno-fixed-form @gol\n -fdollar-ok  -fimplicit-none  -fmax-identifier-length @gol\n--std=@var{std}\n+-std=@var{std} -fd-lines-as-code -fd-lines-as-comments @gol\n -ffixed-line-length-@var{n}  -ffixed-line-length-none @gol\n -fdefault-double-8  -fdefault-integer-8  -fdefault-real-8 }\n \n@@ -183,6 +183,18 @@ Specify the layout used by the source file.  The free form layout\n was introduced in Fortran 90.  Fixed form was traditionally used in\n older Fortran programs.\n \n+@cindex option, -fd-lines-as-code\n+@cindex -fd-lines-as-code, option\n+@cindex option, -fd-lines-as-comments\n+@cindex -fd-lines-as-comments, option\n+@item -fd-lines-as-code\n+@item -fd-lines-as-comment\n+Enables special treating for lines with @samp{d} or @samp{D} in fixed\n+form sources.  If the @option{-fd-lines-as-code} option is given\n+they are treated as if the first column contained a blank.  If the\n+@option{-fd-lines-as-comments} option is given, they are treated as\n+comment lines.\n+\n @cindex option, -fdefault-double-8\n @cindex -fdefault-double-8, option\n @item -fdefault-double-8"}, {"sha": "29d4317029aa264587684ae2420d4c7b77922014", "filename": "gcc/fortran/lang.opt", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0bcf78cc83113145a1d93d05f4aea92d0626a72/gcc%2Ffortran%2Flang.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0bcf78cc83113145a1d93d05f4aea92d0626a72/gcc%2Ffortran%2Flang.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Flang.opt?ref=e0bcf78cc83113145a1d93d05f4aea92d0626a72", "patch": "@@ -69,6 +69,10 @@ Wunused-labels\n F95\n Warn when a label is unused\n \n+fbackslash\n+F95\n+Specify that backslash in string introduces an escape character\n+\n fdefault-double-8\n F95\n Set the default double precision kind to an 8 byte wide type\n@@ -81,14 +85,18 @@ fdefault-real-8\n F95\n Set the default real kind to an 8 byte wide type\n \n+fd-lines-as-code\n+F95 RejectNegative\n+Ignore 'D' in column one in fixed form\n+\n+fd-lines-as-comments\n+F95 RejectNegative\n+Treat lines with 'D' in column one as comments\n+\n fdollar-ok\n F95\n Allow dollar signs in entity names\n \n-fbackslash\n-F95\n-Specify that backslash in string introduces an escape character\n-\n fdump-parse-tree\n F95\n Display the code tree after parsing"}, {"sha": "c98049922e6a8a596e128d3df2a88388144d6cf2", "filename": "gcc/fortran/options.c", "status": "modified", "additions": 107, "deletions": 2, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0bcf78cc83113145a1d93d05f4aea92d0626a72/gcc%2Ffortran%2Foptions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0bcf78cc83113145a1d93d05f4aea92d0626a72/gcc%2Ffortran%2Foptions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Foptions.c?ref=e0bcf78cc83113145a1d93d05f4aea92d0626a72", "patch": "@@ -42,7 +42,7 @@ unsigned int\n gfc_init_options (unsigned int argc ATTRIBUTE_UNUSED,\n \t\t  const char **argv ATTRIBUTE_UNUSED)\n {\n-  gfc_option.source = NULL;\n+  gfc_source_file = NULL;\n   gfc_option.module_dir = NULL;\n   gfc_option.source_form = FORM_UNKNOWN;\n   gfc_option.fixed_line_length = 72;\n@@ -71,6 +71,7 @@ gfc_init_options (unsigned int argc ATTRIBUTE_UNUSED,\n   gfc_option.flag_pack_derived = 0;\n   gfc_option.flag_repack_arrays = 0;\n   gfc_option.flag_backslash = 1;\n+  gfc_option.flag_d_lines = -1;\n \n   gfc_option.q_kind = gfc_default_double_kind;\n \n@@ -89,6 +90,74 @@ gfc_init_options (unsigned int argc ATTRIBUTE_UNUSED,\n }\n \n \n+/* Determine the source form from the filename extension.  We assume\n+   case insensitivity.  */\n+\n+static gfc_source_form\n+form_from_filename (const char *filename)\n+{\n+\n+  static const struct\n+  {\n+    const char *extension;\n+    gfc_source_form form;\n+  }\n+  exttype[] =\n+  {\n+    {\n+    \".f90\", FORM_FREE}\n+    ,\n+    {\n+    \".f95\", FORM_FREE}\n+    ,\n+    {\n+    \".f\", FORM_FIXED}\n+    ,\n+    {\n+    \".for\", FORM_FIXED}\n+    ,\n+    {\n+    \"\", FORM_UNKNOWN}\n+  };\t\t/* sentinel value */\n+\n+  gfc_source_form f_form;\n+  const char *fileext;\n+  int i;\n+\n+  /* Find end of file name.  Note, filename is either a NULL pointer or\n+     a NUL terminated string.  */\n+  i = 0;\n+  while (filename[i] != '\\0')\n+    i++;\n+\n+  /* Find last period.  */\n+  while (i >= 0 && (filename[i] != '.'))\n+    i--;\n+\n+  /* Did we see a file extension?  */\n+  if (i < 0)\n+    return FORM_UNKNOWN; /* Nope  */\n+\n+  /* Get file extension and compare it to others.  */\n+  fileext = &(filename[i]);\n+\n+  i = -1;\n+  f_form = FORM_UNKNOWN;\n+  do\n+    {\n+      i++;\n+      if (strcasecmp (fileext, exttype[i].extension) == 0)\n+\t{\n+\t  f_form = exttype[i].form;\n+\t  break;\n+\t}\n+    }\n+  while (exttype[i].form != FORM_UNKNOWN);\n+\n+  return f_form;\n+}\n+\n+\n /* Finalize commandline options.  */\n \n bool\n@@ -102,7 +171,35 @@ gfc_post_options (const char **pfilename)\n       filename = \"\";\n     }\n \n-  gfc_option.source = filename;\n+  gfc_source_file = filename;\n+\n+  /* Decide which form the file will be read in as.  */\n+\n+  if (gfc_option.source_form != FORM_UNKNOWN)\n+    gfc_current_form = gfc_option.source_form;\n+  else\n+    {\n+      gfc_current_form = form_from_filename (filename);\n+\n+      if (gfc_current_form == FORM_UNKNOWN)\n+\t{\n+\t  gfc_current_form = FORM_FREE;\n+\t  gfc_warning_now (\"Reading file '%s' as free form.\", \n+\t\t\t   (filename[0] == '\\0') ? \"<stdin>\" : filename); \n+\t}\n+    }\n+\n+  /* If the user specified -fd-lines-as-{code|comments} verify that we're\n+     in fixed form.  */\n+  if (gfc_current_form == FORM_FREE)\n+    {\n+      if (gfc_option.flag_d_lines == 0)\n+\tgfc_warning_now (\"'-fd-lines-as-comments' has no effect \"\n+\t\t\t \"in free form.\");\n+      else if (gfc_option.flag_d_lines == 1)\n+\tgfc_warning_now (\"'-fd-lines-as-code' has no effect \"\n+\t\t\t \"in free form.\");\n+    }\n \n   flag_inline_trees = 1;\n \n@@ -238,6 +335,14 @@ gfc_handle_option (size_t scode, const char *arg, int value)\n       gfc_option.flag_backslash = value;\n       break;\n \n+    case OPT_fd_lines_as_code:\n+      gfc_option.flag_d_lines = 1;\n+      break;\n+\n+    case OPT_fd_lines_as_comments:\n+      gfc_option.flag_d_lines = 0;\n+      break;\n+\n     case OPT_fdump_parse_tree:\n       gfc_option.verbose = value;\n       break;"}, {"sha": "738e17280a0603c951cb7ae57ca87b37d28a14ce", "filename": "gcc/fortran/scanner.c", "status": "modified", "additions": 20, "deletions": 100, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0bcf78cc83113145a1d93d05f4aea92d0626a72/gcc%2Ffortran%2Fscanner.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0bcf78cc83113145a1d93d05f4aea92d0626a72/gcc%2Ffortran%2Fscanner.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fscanner.c?ref=e0bcf78cc83113145a1d93d05f4aea92d0626a72", "patch": "@@ -65,7 +65,7 @@ gfc_source_form gfc_current_form;\n static gfc_linebuf *line_head, *line_tail;\n        \n locus gfc_current_locus;\n-char *gfc_source_file;\n+const char *gfc_source_file;\n       \n \n /* Main scanner initialization.  */\n@@ -355,7 +355,8 @@ skip_free_comments (void)\n \n /* Skip comment lines in fixed source mode.  We have the same rules as\n    in skip_free_comment(), except that we can have a 'c', 'C' or '*'\n-   in column 1, and a '!' cannot be in column 6.  */\n+   in column 1, and a '!' cannot be in column 6.  Also, we deal with\n+   lines with 'd' or 'D' in column 1, if the user requested this.  */\n \n static void\n skip_fixed_comments (void)\n@@ -383,13 +384,24 @@ skip_fixed_comments (void)\n \t  continue;\n \t}\n \n+      if (gfc_option.flag_d_lines != -1 && (c == 'd' || c == 'D'))\n+\t{\n+\t  if (gfc_option.flag_d_lines == 0)\n+\t    {\n+\t      skip_comment_line ();\n+\t      continue;\n+\t    }\n+\t  else\n+\t    *start.nextc = c = ' ';\n+\t}\n+\n       col = 1;\n-      do\n+\n+      while (gfc_is_whitespace (c))\n \t{\n \t  c = next_char ();\n \t  col++;\n \t}\n-      while (gfc_is_whitespace (c));\n \n       if (c == '\\n')\n \t{\n@@ -796,7 +808,7 @@ load_line (FILE * input, char **pbuf, int *pbuflen)\n    the file stack.  */\n \n static gfc_file *\n-get_file (char *name, enum lc_reason reason ATTRIBUTE_UNUSED)\n+get_file (const char *name, enum lc_reason reason ATTRIBUTE_UNUSED)\n {\n   gfc_file *f;\n \n@@ -938,7 +950,7 @@ preprocessor_line (char *c)\n }\n \n \n-static try load_file (char *, bool);\n+static try load_file (const char *, bool);\n \n /* include_line()-- Checks a line buffer to see if it is an include\n    line.  If so, we call load_file() recursively to load the included\n@@ -996,7 +1008,7 @@ include_line (char *line)\n /* Load a file into memory by calling load_line until the file ends.  */\n \n static try\n-load_file (char *filename, bool initial)\n+load_file (const char *filename, bool initial)\n {\n   char *line;\n   gfc_linebuf *b;\n@@ -1097,108 +1109,16 @@ load_file (char *filename, bool initial)\n }\n \n \n-/* Determine the source form from the filename extension.  We assume\n-   case insensitivity.  */\n-\n-static gfc_source_form\n-form_from_filename (const char *filename)\n-{\n-\n-  static const struct\n-  {\n-    const char *extension;\n-    gfc_source_form form;\n-  }\n-  exttype[] =\n-  {\n-    {\n-    \".f90\", FORM_FREE}\n-    ,\n-    {\n-    \".f95\", FORM_FREE}\n-    ,\n-    {\n-    \".f\", FORM_FIXED}\n-    ,\n-    {\n-    \".for\", FORM_FIXED}\n-    ,\n-    {\n-    \"\", FORM_UNKNOWN}\n-  };\t\t/* sentinel value */\n-\n-  gfc_source_form f_form;\n-  const char *fileext;\n-  int i;\n-\n-  /* Find end of file name.  Note, filename is either a NULL pointer or\n-     a NUL terminated string.  */\n-  i = 0;\n-  while (filename[i] != '\\0')\n-    i++;\n-\n-  /* Find last period.  */\n-  while (i >= 0 && (filename[i] != '.'))\n-    i--;\n-\n-  /* Did we see a file extension?  */\n-  if (i < 0)\n-    return FORM_UNKNOWN; /* Nope  */\n-\n-  /* Get file extension and compare it to others.  */\n-  fileext = &(filename[i]);\n-\n-  i = -1;\n-  f_form = FORM_UNKNOWN;\n-  do\n-    {\n-      i++;\n-      if (strcasecmp (fileext, exttype[i].extension) == 0)\n-\t{\n-\t  f_form = exttype[i].form;\n-\t  break;\n-\t}\n-    }\n-  while (exttype[i].form != FORM_UNKNOWN);\n-\n-  return f_form;\n-}\n-\n-\n /* Open a new file and start scanning from that file. Returns SUCCESS\n    if everything went OK, FAILURE otherwise.  If form == FORM_UKNOWN\n    it tries to determine the source form from the filename, defaulting\n    to free form.  */\n \n try\n-gfc_new_file (const char *filename, gfc_source_form form)\n+gfc_new_file (void)\n {\n   try result;\n \n-  if (filename != NULL)\n-    {\n-      gfc_source_file = gfc_getmem (strlen (filename) + 1);\n-      strcpy (gfc_source_file, filename);\n-    }\n-  else\n-    gfc_source_file = NULL;\n-\n-  /* Decide which form the file will be read in as.  */\n-\n-  if (form != FORM_UNKNOWN)\n-    gfc_current_form = form;\n-  else\n-    {\n-      gfc_current_form = form_from_filename (filename);\n-\n-      if (gfc_current_form == FORM_UNKNOWN)\n-\t{\n-\t  gfc_current_form = FORM_FREE;\n-\t  gfc_warning_now (\"Reading file '%s' as free form.\", \n-\t\t\t   (filename[0] == '\\0') ? \"<stdin>\" : filename); \n-\t}\n-    }\n-\n   result = load_file (gfc_source_file, true);\n \n   gfc_current_locus.lb = line_head;"}, {"sha": "bab1869975804f31da34151722f9a461af18e036", "filename": "gcc/fortran/trans-const.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0bcf78cc83113145a1d93d05f4aea92d0626a72/gcc%2Ffortran%2Ftrans-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0bcf78cc83113145a1d93d05f4aea92d0626a72/gcc%2Ffortran%2Ftrans-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-const.c?ref=e0bcf78cc83113145a1d93d05f4aea92d0626a72", "patch": "@@ -163,7 +163,7 @@ gfc_init_constants (void)\n     gfc_build_cstring_const (\"Incorrect function return value\");\n \n   gfc_strconst_current_filename =\n-    gfc_build_cstring_const (gfc_option.source);\n+    gfc_build_cstring_const (gfc_source_file);\n }\n \n /* Converts a GMP integer into a backend tree node.  */"}, {"sha": "1fb2989b716ca3283b956d5e74519a0bc1605484", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0bcf78cc83113145a1d93d05f4aea92d0626a72/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0bcf78cc83113145a1d93d05f4aea92d0626a72/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e0bcf78cc83113145a1d93d05f4aea92d0626a72", "patch": "@@ -1,3 +1,8 @@\n+2005-08-21  Tobias Schl\"uter  <tobias.schlueter@physik.uni-muenchen.de>\n+\t\n+\t* d_lines_1.f, d_lines_2.f, d_lines_3.f, d_lines_4.f,\n+\td_lines_5.f: New.\n+\n 2005-08-21  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gcc.target/i386/sse-4.c: New test."}, {"sha": "04909b1472b7a42ca36646a8aaba1f97176ad654", "filename": "gcc/testsuite/gfortran.dg/d_lines_1.f", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0bcf78cc83113145a1d93d05f4aea92d0626a72/gcc%2Ftestsuite%2Fgfortran.dg%2Fd_lines_1.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0bcf78cc83113145a1d93d05f4aea92d0626a72/gcc%2Ftestsuite%2Fgfortran.dg%2Fd_lines_1.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fd_lines_1.f?ref=e0bcf78cc83113145a1d93d05f4aea92d0626a72", "patch": "@@ -0,0 +1,5 @@\n+! { dg-do compile }\n+! { dg-options \"-fd-lines-as-comments\" }\n+d This is a comment.\n+D This line, too.\n+      end"}, {"sha": "b2e4df5bbba347683bc247c8dcb882af7364793d", "filename": "gcc/testsuite/gfortran.dg/d_lines_2.f", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0bcf78cc83113145a1d93d05f4aea92d0626a72/gcc%2Ftestsuite%2Fgfortran.dg%2Fd_lines_2.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0bcf78cc83113145a1d93d05f4aea92d0626a72/gcc%2Ftestsuite%2Fgfortran.dg%2Fd_lines_2.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fd_lines_2.f?ref=e0bcf78cc83113145a1d93d05f4aea92d0626a72", "patch": "@@ -0,0 +1,6 @@\n+! { dg-do compile }\n+c { dg-options \"-fd-lines-as-code\" }\n+      i = 0\n+d     end\n+      subroutine s\n+D     end"}, {"sha": "53b75addcb287eb322837a09689bc11d9a02a41c", "filename": "gcc/testsuite/gfortran.dg/d_lines_3.f", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0bcf78cc83113145a1d93d05f4aea92d0626a72/gcc%2Ftestsuite%2Fgfortran.dg%2Fd_lines_3.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0bcf78cc83113145a1d93d05f4aea92d0626a72/gcc%2Ftestsuite%2Fgfortran.dg%2Fd_lines_3.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fd_lines_3.f?ref=e0bcf78cc83113145a1d93d05f4aea92d0626a72", "patch": "@@ -0,0 +1,10 @@\n+C { dg-do compile }\n+C { dg-options \"-fd-lines-as-code\" }\n+C Verifies that column numbers are dealt with correctly when handling D lines.\n+C234567890\n+d     i = 0 ! this may not move to the left\n+d    1  + 1 ! this should be a continuation line\n+      goto 2345\n+d23450continue ! statement labels are correctly identified\n+      end\n+      "}, {"sha": "224ca137a390615317634b63a60aef4837534a1d", "filename": "gcc/testsuite/gfortran.dg/d_lines_4.f", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0bcf78cc83113145a1d93d05f4aea92d0626a72/gcc%2Ftestsuite%2Fgfortran.dg%2Fd_lines_4.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0bcf78cc83113145a1d93d05f4aea92d0626a72/gcc%2Ftestsuite%2Fgfortran.dg%2Fd_lines_4.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fd_lines_4.f?ref=e0bcf78cc83113145a1d93d05f4aea92d0626a72", "patch": "@@ -0,0 +1,3 @@\n+! { dg-do compile }\n+c verify that debug lines are rejected if none of -fd-lines-as-* are given.\n+d ! { dg-error \"Non-numeric character\" }"}, {"sha": "8b0e2d84f6c5337a6eb1d6987abc01dc954399ac", "filename": "gcc/testsuite/gfortran.dg/d_lines_5.f", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0bcf78cc83113145a1d93d05f4aea92d0626a72/gcc%2Ftestsuite%2Fgfortran.dg%2Fd_lines_5.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0bcf78cc83113145a1d93d05f4aea92d0626a72/gcc%2Ftestsuite%2Fgfortran.dg%2Fd_lines_5.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fd_lines_5.f?ref=e0bcf78cc83113145a1d93d05f4aea92d0626a72", "patch": "@@ -0,0 +1,3 @@\n+! { dg-do compile }\n+c { dg-options \"-fd-lines-as-code\" }\n+d ! This didn't work in an early version of the support for -fd-lines*"}]}