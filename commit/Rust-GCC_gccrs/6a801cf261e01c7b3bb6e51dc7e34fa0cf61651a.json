{"sha": "6a801cf261e01c7b3bb6e51dc7e34fa0cf61651a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmE4MDFjZjI2MWUwMWM3YjNiYjZlNTFkYzdlMzRmYTBjZjYxNjUxYQ==", "commit": {"author": {"name": "Xinliang David Li", "email": "davidxl@google.com", "date": "2011-04-08T21:01:08Z"}, "committer": {"name": "Xinliang David Li", "email": "davidxl@gcc.gnu.org", "date": "2011-04-08T21:01:08Z"}, "message": "-dA enhancement\n\nFrom-SVN: r172212", "tree": {"sha": "6c9099c85b315a1997103a0beb33a54103f15b76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6c9099c85b315a1997103a0beb33a54103f15b76"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6a801cf261e01c7b3bb6e51dc7e34fa0cf61651a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a801cf261e01c7b3bb6e51dc7e34fa0cf61651a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a801cf261e01c7b3bb6e51dc7e34fa0cf61651a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a801cf261e01c7b3bb6e51dc7e34fa0cf61651a/comments", "author": {"login": "vns-mn", "id": 57157229, "node_id": "MDQ6VXNlcjU3MTU3MjI5", "avatar_url": "https://avatars.githubusercontent.com/u/57157229?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vns-mn", "html_url": "https://github.com/vns-mn", "followers_url": "https://api.github.com/users/vns-mn/followers", "following_url": "https://api.github.com/users/vns-mn/following{/other_user}", "gists_url": "https://api.github.com/users/vns-mn/gists{/gist_id}", "starred_url": "https://api.github.com/users/vns-mn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vns-mn/subscriptions", "organizations_url": "https://api.github.com/users/vns-mn/orgs", "repos_url": "https://api.github.com/users/vns-mn/repos", "events_url": "https://api.github.com/users/vns-mn/events{/privacy}", "received_events_url": "https://api.github.com/users/vns-mn/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d5f3624e37a730f9eb66b1b2b9656edb116615f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5f3624e37a730f9eb66b1b2b9656edb116615f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5f3624e37a730f9eb66b1b2b9656edb116615f4"}], "stats": {"total": 87, "additions": 83, "deletions": 4}, "files": [{"sha": "3abeed0c0fdaf26e5d7e7cd680202ce1be2f732e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a801cf261e01c7b3bb6e51dc7e34fa0cf61651a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a801cf261e01c7b3bb6e51dc7e34fa0cf61651a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6a801cf261e01c7b3bb6e51dc7e34fa0cf61651a", "patch": "@@ -1,3 +1,9 @@\n+2011-04-08  Xinliang David Li  <davidxl@google.com>\n+\n+\t* final.c (dump_basic_block_info): New function.\n+\t(final): Dump basic block.\n+\t(final_scan_insn): Remove old dump.\n+\n 2011-04-08  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR 47829"}, {"sha": "17393b7a2b29fbfadb99c16e4a969fac51da8731", "filename": "gcc/final.c", "status": "modified", "additions": 77, "deletions": 4, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a801cf261e01c7b3bb6e51dc7e34fa0cf61651a/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a801cf261e01c7b3bb6e51dc7e34fa0cf61651a/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=6a801cf261e01c7b3bb6e51dc7e34fa0cf61651a", "patch": "@@ -1672,6 +1672,54 @@ final_end_function (void)\n     dwarf2out_end_epilogue (last_linenum, last_filename);\n }\n \f\n+\n+/* Dumper helper for basic block information. FILE is the assembly\n+   output file, and INSN is the instruction being emitted.  */\n+\n+static void\n+dump_basic_block_info (FILE *file, rtx insn, basic_block *start_to_bb,\n+                       basic_block *end_to_bb, int bb_map_size, int *bb_seqn)\n+{\n+  basic_block bb;\n+\n+  if (!flag_debug_asm)\n+    return;\n+\n+  if (INSN_UID (insn) < bb_map_size\n+      && (bb = start_to_bb[INSN_UID (insn)]) != NULL)\n+    {\n+      edge e;\n+      edge_iterator ei;\n+\n+      fprintf (file, \"# BLOCK %d\", bb->index);\n+      if (bb->frequency)\n+        fprintf (file, \" freq:%d\", bb->frequency);\n+      if (bb->count)\n+        fprintf (file, \" count:\" HOST_WIDEST_INT_PRINT_DEC,\n+                 bb->count);\n+      fprintf (file, \" seq:%d\", (*bb_seqn)++);\n+      fprintf (file, \"\\n# PRED:\");\n+      FOR_EACH_EDGE (e, ei, bb->preds)\n+        {\n+          dump_edge_info (file, e, 0);\n+        }\n+      fprintf (file, \"\\n\");\n+    }\n+  if (INSN_UID (insn) < bb_map_size\n+      && (bb = end_to_bb[INSN_UID (insn)]) != NULL)\n+    {\n+      edge e;\n+      edge_iterator ei;\n+\n+      fprintf (asm_out_file, \"# SUCC:\");\n+      FOR_EACH_EDGE (e, ei, bb->succs)\n+       {\n+         dump_edge_info (asm_out_file, e, 1);\n+       }\n+      fprintf (file, \"\\n\");\n+    }\n+}\n+\n /* Output assembler code for some insns: all or part of a function.\n    For description of args, see `final_start_function', above.  */\n \n@@ -1682,6 +1730,12 @@ final (rtx first, FILE *file, int optimize_p)\n   int max_uid = 0;\n   int seen = 0;\n \n+  /* Used for -dA dump.  */\n+  basic_block *start_to_bb = NULL;\n+  basic_block *end_to_bb = NULL;\n+  int bb_map_size = 0;\n+  int bb_seqn = 0;\n+\n   last_ignored_compare = 0;\n \n   for (insn = first; insn; insn = NEXT_INSN (insn))\n@@ -1706,6 +1760,21 @@ final (rtx first, FILE *file, int optimize_p)\n \n   CC_STATUS_INIT;\n \n+  if (flag_debug_asm)\n+    {\n+      basic_block bb;\n+\n+      bb_map_size = get_max_uid () + 1;\n+      start_to_bb = XCNEWVEC (basic_block, bb_map_size);\n+      end_to_bb = XCNEWVEC (basic_block, bb_map_size);\n+\n+      FOR_EACH_BB_REVERSE (bb)\n+\t{\n+\t  start_to_bb[INSN_UID (BB_HEAD (bb))] = bb;\n+\t  end_to_bb[INSN_UID (BB_END (bb))] = bb;\n+\t}\n+    }\n+\n   /* Output the insns.  */\n   for (insn = first; insn;)\n     {\n@@ -1721,8 +1790,16 @@ final (rtx first, FILE *file, int optimize_p)\n \tinsn_current_address = INSN_ADDRESSES (INSN_UID (insn));\n #endif /* HAVE_ATTR_length */\n \n+      dump_basic_block_info (file, insn, start_to_bb, end_to_bb,\n+                             bb_map_size, &bb_seqn);\n       insn = final_scan_insn (insn, file, optimize_p, 0, &seen);\n     }\n+\n+  if (flag_debug_asm)\n+    {\n+      free (start_to_bb);\n+      free (end_to_bb);\n+    }\n }\n \f\n const char *\n@@ -1858,10 +1935,6 @@ final_scan_insn (rtx insn, FILE *file, int optimize_p ATTRIBUTE_UNUSED,\n \t  if (targetm.asm_out.unwind_emit)\n \t    targetm.asm_out.unwind_emit (asm_out_file, insn);\n \n-\t  if (flag_debug_asm)\n-\t    fprintf (asm_out_file, \"\\t%s basic block %d\\n\",\n-\t\t     ASM_COMMENT_START, NOTE_BASIC_BLOCK (insn)->index);\n-\n \t  if ((*seen & (SEEN_EMITTED | SEEN_BB)) == SEEN_BB)\n \t    {\n \t      *seen |= SEEN_EMITTED;"}]}