{"sha": "b731048b4702a3338546b718af90c20cfbb78891", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjczMTA0OGI0NzAyYTMzMzg1NDZiNzE4YWY5MGMyMGNmYmI3ODg5MQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2003-05-23T02:31:07Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2003-05-23T02:31:07Z"}, "message": "re PR libstdc++/3066 (configure.in generates bad arguments for cross compiling libraries)\n\n\n2003-05-22  Benjamin Kosnik  <bkoz@redhat.com>\n\n\tPR libstdc++/3066.\n\t* configure.in: Switch target to host, don't assume newlib.\n\t(target_alias): Remove.\n\t* configure: Regenerate.\n\t* acinclude.m4: Same.\n\t* aclocal.m4: Regenerate.\n\t* configure.target: Same. Rename to...\n\t* configure.host: This.\n\nFrom-SVN: r67110", "tree": {"sha": "5a8c368f6c7c1be0234d4d2433d85e6e1cc09ad0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5a8c368f6c7c1be0234d4d2433d85e6e1cc09ad0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b731048b4702a3338546b718af90c20cfbb78891", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b731048b4702a3338546b718af90c20cfbb78891", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b731048b4702a3338546b718af90c20cfbb78891", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b731048b4702a3338546b718af90c20cfbb78891/comments", "author": null, "committer": null, "parents": [{"sha": "14a9c399be37684447749213647c2bda11bf7e7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14a9c399be37684447749213647c2bda11bf7e7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14a9c399be37684447749213647c2bda11bf7e7b"}], "stats": {"total": 3396, "additions": 1712, "deletions": 1684}, "files": [{"sha": "f23bb6f187aeb8452673b2797d54fb5abaf86c9e", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b731048b4702a3338546b718af90c20cfbb78891/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b731048b4702a3338546b718af90c20cfbb78891/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=b731048b4702a3338546b718af90c20cfbb78891", "patch": "@@ -1,3 +1,14 @@\n+2003-05-22  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\tPR libstdc++/3066.\n+\t* configure.in: Switch target to host, don't assume newlib.\n+\t(target_alias): Remove.\n+\t* configure: Regenerate.\n+\t* acinclude.m4: Same.\n+\t* aclocal.m4: Regenerate.\n+\t* configure.target: Same. Rename to...\n+\t* configure.host: This.\n+\t\n 2003-05-22  Paolo Carlini  <pcarlini@unitus.it>\n \n \t* include/std/std_fstream.h (_S_pback_size): Remove definition."}, {"sha": "ed9eda0024165ccce9736cee7bcc22f393093ff1", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b731048b4702a3338546b718af90c20cfbb78891/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b731048b4702a3338546b718af90c20cfbb78891/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=b731048b4702a3338546b718af90c20cfbb78891", "patch": "@@ -70,6 +70,9 @@ AC_DEFUN(GLIBCPP_CONFIGURE, [\n   AC_ARG_WITH(cross-host,\n   [  --with-cross-host=HOST  configuring with a cross compiler])\n \n+  AC_ARG_WITH(newlib,\n+  [  --with-newlib                    Configuring with newlib])\n+\n   glibcpp_basedir=$srcdir/$toprel/$1/libstdc++-v3\n   AC_SUBST(glibcpp_basedir)\n \n@@ -201,7 +204,7 @@ AC_DEFUN(GLIBCPP_CONFIGURE, [\n \n   # Find platform-specific directories containing configuration info.  In\n   # addition to possibly modifying the same flags, it also sets up symlinks.\n-  GLIBCPP_CHECK_TARGET\n+  GLIBCPP_CHECK_HOST\n ])\n \n \n@@ -874,9 +877,9 @@ dnl Check to see what architecture and operating system we are compiling\n dnl for.  Also, if architecture- or OS-specific flags are required for\n dnl compilation, pick them up here.\n dnl\n-dnl GLIBCPP_CHECK_TARGET\n-AC_DEFUN(GLIBCPP_CHECK_TARGET, [\n-  . [$]{glibcpp_basedir}/configure.target\n+dnl GLIBCPP_CHECK_HOST\n+AC_DEFUN(GLIBCPP_CHECK_HOST, [\n+  . [$]{glibcpp_basedir}/configure.host\n   AC_MSG_RESULT(CPU config directory is $cpu_include_dir)\n   AC_MSG_RESULT(OS config directory is $os_include_dir)\n ])"}, {"sha": "975bb1cf2c0c06cdb262d4c709c33fa55eebb4a3", "filename": "libstdc++-v3/aclocal.m4", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b731048b4702a3338546b718af90c20cfbb78891/libstdc%2B%2B-v3%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b731048b4702a3338546b718af90c20cfbb78891/libstdc%2B%2B-v3%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Faclocal.m4?ref=b731048b4702a3338546b718af90c20cfbb78891", "patch": "@@ -82,6 +82,9 @@ AC_DEFUN(GLIBCPP_CONFIGURE, [\n   AC_ARG_WITH(cross-host,\n   [  --with-cross-host=HOST  configuring with a cross compiler])\n \n+  AC_ARG_WITH(newlib,\n+  [  --with-newlib                    Configuring with newlib])\n+\n   glibcpp_basedir=$srcdir/$toprel/$1/libstdc++-v3\n   AC_SUBST(glibcpp_basedir)\n \n@@ -213,7 +216,7 @@ AC_DEFUN(GLIBCPP_CONFIGURE, [\n \n   # Find platform-specific directories containing configuration info.  In\n   # addition to possibly modifying the same flags, it also sets up symlinks.\n-  GLIBCPP_CHECK_TARGET\n+  GLIBCPP_CHECK_HOST\n ])\n \n \n@@ -886,9 +889,9 @@ dnl Check to see what architecture and operating system we are compiling\n dnl for.  Also, if architecture- or OS-specific flags are required for\n dnl compilation, pick them up here.\n dnl\n-dnl GLIBCPP_CHECK_TARGET\n-AC_DEFUN(GLIBCPP_CHECK_TARGET, [\n-  . [$]{glibcpp_basedir}/configure.target\n+dnl GLIBCPP_CHECK_HOST\n+AC_DEFUN(GLIBCPP_CHECK_HOST, [\n+  . [$]{glibcpp_basedir}/configure.host\n   AC_MSG_RESULT(CPU config directory is $cpu_include_dir)\n   AC_MSG_RESULT(OS config directory is $os_include_dir)\n ])"}, {"sha": "ab52d2d148f47d476f77981da9433980a9770bb9", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 1626, "deletions": 1616, "changes": 3242, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b731048b4702a3338546b718af90c20cfbb78891/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b731048b4702a3338546b718af90c20cfbb78891/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=b731048b4702a3338546b718af90c20cfbb78891"}, {"sha": "cd431ff394361d144762fade72e9d99f54898aed", "filename": "libstdc++-v3/configure.host", "status": "renamed", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b731048b4702a3338546b718af90c20cfbb78891/libstdc%2B%2B-v3%2Fconfigure.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b731048b4702a3338546b718af90c20cfbb78891/libstdc%2B%2B-v3%2Fconfigure.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.host?ref=b731048b4702a3338546b718af90c20cfbb78891", "patch": "@@ -1,23 +1,23 @@\n-# configure.target\n+# configure.host\n #\n-# This shell script handles all target based configuration for libstdc++.\n-# It sets various shell variables based on the the target and the\n+# This shell script handles all host based configuration for libstdc++.\n+# It sets various shell variables based on the the host and the\n # configuration options.  You can modify this shell script without needing\n # to rerun autoconf/aclocal/etc.  This file is \"sourced\" not executed.\n #\n # You should read docs/html/17_intro/porting.* to make sense of this file.\n #\n #\n # It uses the following shell variables as set by config.guess:\n-#   target                The configuration target (full CPU-vendor-OS triplet)\n-#   target_cpu            The configuration target CPU\n-#   target_os             The configuration target OS\n+#   host                The configuration host (full CPU-vendor-OS triplet)\n+#   host_cpu            The configuration host CPU\n+#   host_os             The configuration host OS\n #\n #\n # It sets the following shell variables:\n #\n #   cpu_include_dir        CPU-specific directory, defaults to cpu/generic\n-#                              if cpu/target_cpu doesn't exist.  This is\n+#                              if cpu/host_cpu doesn't exist.  This is\n #                              used to set ATOMICITYH.\n #\n #   os_include_dir         OS-specific directory, defaults to os/generic.\n@@ -28,7 +28,7 @@\n #                              defaults to no.\n #\n #   abi_baseline_triplet   directory name for ABI compat testing,\n-#                              defaults to target (as per config.guess)\n+#                              defaults to host (as per config.guess)\n #\n #   ATOMICITYH             location of atomicity.h,\n #                              defaults to cpu_include_dir\n@@ -42,30 +42,30 @@\n #\n # If the defaults will not work for your platform, you need only change the\n # variables that won't work, i.e., you do not need to explicitly set a\n-# working variable to its default.  Most targets only need to change the two\n+# working variable to its default.  Most hosts only need to change the two\n # *_include_dir variables.\n \n \n # DEFAULTS\n # Try to guess a default cpu_include_dir based on the name of the CPU.  We\n # cannot do this for os_include_dir; there are too many portable operating\n # systems out there.  :-)\n-abi_baseline_triplet=${target}\n+abi_baseline_triplet=${host}\n c_model=c_std\n c_compatibility=no\n-if test -d ${glibcpp_srcdir}/config/cpu/${target_cpu}; then\n-    cpu_include_dir=\"cpu/${target_cpu}\"\n+if test -d ${glibcpp_srcdir}/config/cpu/${host_cpu}; then\n+    cpu_include_dir=\"cpu/${host_cpu}\"\n else\n     cpu_include_dir=\"cpu/generic\"\n fi\n \n \n-# TARGET-SPECIFIC OVERRIDES\n+# HOST-SPECIFIC OVERRIDES\n # Set any CPU-dependent bits.\n # Here we override defaults and catch more general cases due to naming\n # conventions (e.g., chip_name* to catch all variants).\n # THIS TABLE IS SORTED.  KEEP IT THAT WAY.\n-case \"${target_cpu}\" in\n+case \"${host_cpu}\" in\n   alpha*)\n     cpu_include_dir=\"cpu/alpha\"\n     ;;\n@@ -114,7 +114,7 @@ unset _cpu_incdir_fullpath\n # If atomic ops and/or numeric limits are OS-specific rather than\n # CPU-specifc, set those here too.\n # THIS TABLE IS SORTED.  KEEP IT THAT WAY.\n-case \"${target_os}\" in\n+case \"${host_os}\" in\n   aix4.[3456789]* | aix[56789]*)\n     # We set os_include_dir to os/aix only on AIX 4.3 and newer, but\n     # os/aix/atomicity.h works on earlier versions of AIX 4.*, so we\n@@ -142,7 +142,7 @@ case \"${target_os}\" in\n   freebsd*)\n     os_include_dir=\"os/bsd/freebsd\"\n     # The FreeBSD ABI is expressed in the major version number only.\n-    abi_baseline_triplet=`echo ${target} | sed 's,\\(\\.[0-9]*\\)*$,,'`\n+    abi_baseline_triplet=`echo ${host} | sed 's,\\(\\.[0-9]*\\)*$,,'`\n     ;;\n   gnu* | linux*)\n     os_include_dir=\"os/gnu-linux\"\n@@ -189,7 +189,7 @@ esac\n \n # Set any OS-dependent and CPU-dependent bits.\n # THIS TABLE IS SORTED.  KEEP IT THAT WAY.\n-case \"${target}\" in\n+case \"${host}\" in\n   mips*-*-linux*)\n     ATOMICITYH=\"cpu/mips\"\n     ;;", "previous_filename": "libstdc++-v3/configure.target"}, {"sha": "b24181c81a5e9174f3492d6bf7a2fdd2ac99607f", "filename": "libstdc++-v3/configure.in", "status": "modified", "additions": 44, "deletions": 43, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b731048b4702a3338546b718af90c20cfbb78891/libstdc%2B%2B-v3%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b731048b4702a3338546b718af90c20cfbb78891/libstdc%2B%2B-v3%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.in?ref=b731048b4702a3338546b718af90c20cfbb78891", "patch": "@@ -30,14 +30,10 @@ GLIBCPP_TOPREL_CONFIGURE\n # Also, if v3 is being configured as part of a cross compiler, the top-level\n # configure script will pass the \"real\" host as $with_cross_host.\n #\n-# AC 2.5x sets target_alias iff the user specified --target, but we use it\n-# everywhere, so we set it here just to be sure.  In AC 2.13\n-# AC_CANONICAL_TARGET was known as AC_CANONICAL_SYSTEM.\n+# In AC 2.13 AC_CANONICAL_TARGET was known as AC_CANONICAL_SYSTEM.\n AC_CANONICAL_SYSTEM\n-target_alias=${target_alias-$target}\n-AC_SUBST(target_alias)\n \n-# Runs configure.target, finds CC, CXX and assorted other critical bits.\n+# Runs configure.host, finds CC, CXX and assorted other critical bits.\n # Must run this before the GLIBCPP_ENABLE_* macros below.\n GLIBCPP_CONFIGURE(.)\n \n@@ -82,7 +78,7 @@ if test $ATOMICITYH = cpu/generic ; then\n fi\n \n \n-if test -n \"$with_cross_host\" || test x\"$build\" != x\"$host\"; then\n+if test x\"$build\" != x\"$host\"; then\n \n   # We are being configured with some form of cross compiler.\n   GLIBCPP_IS_CROSS_COMPILING=1\n@@ -103,7 +99,8 @@ if test -n \"$with_cross_host\" || test x\"$build\" != x\"$host\"; then\n \n   # If Canadian cross, then don't pick up tools from the build directory.\n   # Used in GLIBCPP_EXPORT_INCLUDES (and nowhere else?).\n-  if test -n \"$with_cross_host\" && test x\"$build\" != x\"$with_cross_host\"; then\n+  if test -n \"$with_cross_host\" && test x\"$build\" != x\"$with_cross_host\" \\\n+    && test x\"$build\" != x\"$target\"; then\n     CANADIAN=yes\n   else\n     CANADIAN=no\n@@ -114,7 +111,7 @@ if test -n \"$with_cross_host\" || test x\"$build\" != x\"$host\"; then\n   # GLIBCPP_CHECK_BUILTIN_MATH_SUPPORT\n   # GLIBCPP_CHECK_MATH_SUPPORT\n \n-  case \"$target\" in\n+  case \"${host}\" in\n     *-freebsd*)\n       os_include_dir=\"os/bsd/freebsd\"\n       AC_CHECK_HEADERS([nan.h ieeefp.h endian.h sys/isa_defs.h \\\n@@ -329,40 +326,44 @@ if test -n \"$with_cross_host\" || test x\"$build\" != x\"$host\"; then\n       AC_DEFINE(HAVE_TANHF)\n       ;;\n     *)\n-      os_include_dir=\"os/newlib\"\n-      AC_DEFINE(HAVE_HYPOT)\n-\n-      # GLIBCPP_CHECK_STDLIB_SUPPORT\n-      AC_DEFINE(HAVE_STRTOF)        \n-      AC_DEFINE(HAVE_STRTOLD)        \n-      # AC_FUNC_MMAP\n-      AC_DEFINE(HAVE_MMAP)\n-\n-      AC_DEFINE(HAVE_ACOSF)\n-      AC_DEFINE(HAVE_ASINF)\n-      AC_DEFINE(HAVE_ATAN2F)\n-      AC_DEFINE(HAVE_ATANF)\n-      AC_DEFINE(HAVE_CEILF)\n-      AC_DEFINE(HAVE_COPYSIGN)\n-      AC_DEFINE(HAVE_COPYSIGNF)\n-      AC_DEFINE(HAVE_COSF)\n-      AC_DEFINE(HAVE_COSHF)\n-      AC_DEFINE(HAVE_EXPF)\n-      AC_DEFINE(HAVE_FABSF)\n-      AC_DEFINE(HAVE_FLOORF)\n-      AC_DEFINE(HAVE_FMODF)\n-      AC_DEFINE(HAVE_FREXPF)\n-      AC_DEFINE(HAVE_LDEXPF)\n-      AC_DEFINE(HAVE_LOG10F)\n-      AC_DEFINE(HAVE_LOGF)\n-      AC_DEFINE(HAVE_MODFF)\n-      AC_DEFINE(HAVE_POWF)\n-      AC_DEFINE(HAVE_SINF)\n-      AC_DEFINE(HAVE_SINHF)\n-      AC_DEFINE(HAVE_SQRTF)\n-      AC_DEFINE(HAVE_TANF)\n-      AC_DEFINE(HAVE_TANHF)\n-      ;;\n+      if test \"x${with_newlib}\" = \"xyes\"; then\n+        os_include_dir=\"os/newlib\"\n+        AC_DEFINE(HAVE_HYPOT)\n+\n+        # GLIBCPP_CHECK_STDLIB_SUPPORT\n+        AC_DEFINE(HAVE_STRTOF)        \n+        AC_DEFINE(HAVE_STRTOLD)        \n+        # AC_FUNC_MMAP\n+        AC_DEFINE(HAVE_MMAP)\n+\n+        AC_DEFINE(HAVE_ACOSF)\n+        AC_DEFINE(HAVE_ASINF)\n+        AC_DEFINE(HAVE_ATAN2F)\n+        AC_DEFINE(HAVE_ATANF)\n+        AC_DEFINE(HAVE_CEILF)\n+        AC_DEFINE(HAVE_COPYSIGN)\n+        AC_DEFINE(HAVE_COPYSIGNF)\n+        AC_DEFINE(HAVE_COSF)\n+        AC_DEFINE(HAVE_COSHF)\n+        AC_DEFINE(HAVE_EXPF)\n+        AC_DEFINE(HAVE_FABSF)\n+        AC_DEFINE(HAVE_FLOORF)\n+        AC_DEFINE(HAVE_FMODF)\n+        AC_DEFINE(HAVE_FREXPF)\n+        AC_DEFINE(HAVE_LDEXPF)\n+        AC_DEFINE(HAVE_LOG10F)\n+        AC_DEFINE(HAVE_LOGF)\n+        AC_DEFINE(HAVE_MODFF)\n+        AC_DEFINE(HAVE_POWF)\n+        AC_DEFINE(HAVE_SINF)\n+        AC_DEFINE(HAVE_SINHF)\n+        AC_DEFINE(HAVE_SQRTF)\n+        AC_DEFINE(HAVE_TANF)\n+        AC_DEFINE(HAVE_TANHF)\n+      else\n+        AC_MSG_ERROR([No support for this host/target combination.])\n+      fi \n+     ;;\n   esac\n \n   # At some point, we should differentiate between architectures"}]}