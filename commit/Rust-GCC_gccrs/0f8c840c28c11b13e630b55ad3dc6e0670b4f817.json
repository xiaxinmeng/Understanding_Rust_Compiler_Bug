{"sha": "0f8c840c28c11b13e630b55ad3dc6e0670b4f817", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGY4Yzg0MGMyOGMxMWIxM2U2MzBiNTVhZDNkYzZlMDY3MGI0ZjgxNw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2018-06-30T12:47:25Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2018-06-30T12:47:25Z"}, "message": "[9b/n] PR85694: Make vect_is_simple_use look through pattern statements\n\nAs suggested by Richard B., this patch makes vect_is_simple_use check\nwhether a defining statement has been replaced by a pattern statement,\nand if so returns the pattern statement instead.\n\nThe reason for doing this is that the main patch for PR85694\nmakes over_widening handle more general cases.  These over-widened\npatterns can still be useful when matching later statements;\ne.g. an overwidened MULT_EXPR could be the input to a DOT_PROD_EXPR.\n\nThe patch doesn't do anything with the STMT_VINFO_IN_PATTERN_P checks\nin vect_recog_over_widening_pattern or vect_recog_widen_shift_pattern\nsince later patches rewrite them anyway.\n\nDoing this fixed an XFAIL in vect-reduc-dot-u16b.c.\n\n2018-06-30  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* tree-vect-loop.c (vectorizable_reduction): Assert that the\n\tphi is not a pattern statement and has not been replaced by\n\ta pattern statement.\n\t* tree-vect-patterns.c (type_conversion_p): Don't check\n\tSTMT_VINFO_IN_PATTERN_P.\n\t(vect_recog_vector_vector_shift_pattern): Likewise.\n\t(vect_recog_dot_prod_pattern): Expect vect_is_simple_use to return\n\tthe pattern statement rather than the original statement; check\n\tdirectly for a WIDEN_MULT_EXPR here.\n\t* tree-vect-slp.c (vect_get_and_check_slp_defs): Expect\n\tvect_is_simple_use to return the pattern statement rather\n\tthan the original statement; use is_pattern_stmt_p to check\n\tfor such a pattern statement.\n\t* tree-vect-stmts.c (process_use): Expect vect_is_simple_use\n\tto return the pattern statement rather than the original statement;\n\tdon't do the same transformation here.\n\t(vect_is_simple_use): If the defining statement has been replaced\n\tby a pattern statement, return the pattern statement instead.\n\tRemove the corresponding (local) transformation from the vectype\n\toverload.\n\ngcc/testsuite/\n\t* gcc.dg/vect/vect-reduc-dot-u16b.c: Remove xfail and update the\n\ttest for vectorization along the lines described in the comment.\n\nFrom-SVN: r262273", "tree": {"sha": "efcd2c3257bda8e25cd2751ce3e03e53029f58a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/efcd2c3257bda8e25cd2751ce3e03e53029f58a1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0f8c840c28c11b13e630b55ad3dc6e0670b4f817", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f8c840c28c11b13e630b55ad3dc6e0670b4f817", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f8c840c28c11b13e630b55ad3dc6e0670b4f817", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f8c840c28c11b13e630b55ad3dc6e0670b4f817/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "894dd753ca8a4120078324cc6cf0ba01afff9cab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/894dd753ca8a4120078324cc6cf0ba01afff9cab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/894dd753ca8a4120078324cc6cf0ba01afff9cab"}], "stats": {"total": 100, "additions": 50, "deletions": 50}, "files": [{"sha": "366bbc073fa50532313ad173e5c70a54b2cfd672", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f8c840c28c11b13e630b55ad3dc6e0670b4f817/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f8c840c28c11b13e630b55ad3dc6e0670b4f817/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0f8c840c28c11b13e630b55ad3dc6e0670b4f817", "patch": "@@ -1,3 +1,26 @@\n+2018-06-30  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* tree-vect-loop.c (vectorizable_reduction): Assert that the\n+\tphi is not a pattern statement and has not been replaced by\n+\ta pattern statement.\n+\t* tree-vect-patterns.c (type_conversion_p): Don't check\n+\tSTMT_VINFO_IN_PATTERN_P.\n+\t(vect_recog_vector_vector_shift_pattern): Likewise.\n+\t(vect_recog_dot_prod_pattern): Expect vect_is_simple_use to return\n+\tthe pattern statement rather than the original statement; check\n+\tdirectly for a WIDEN_MULT_EXPR here.\n+\t* tree-vect-slp.c (vect_get_and_check_slp_defs): Expect\n+\tvect_is_simple_use to return the pattern statement rather\n+\tthan the original statement; use is_pattern_stmt_p to check\n+\tfor such a pattern statement.\n+\t* tree-vect-stmts.c (process_use): Expect vect_is_simple_use\n+\tto return the pattern statement rather than the original statement;\n+\tdon't do the same transformation here.\n+\t(vect_is_simple_use): If the defining statement has been replaced\n+\tby a pattern statement, return the pattern statement instead.\n+\tRemove the corresponding (local) transformation from the vectype\n+\toverload.\n+\n 2018-06-30  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* tree-vectorizer.h (vect_is_simple_use): Move the gimple ** to the"}, {"sha": "db2ca7353a98b5991e1ff013c1d1324cce9e3333", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f8c840c28c11b13e630b55ad3dc6e0670b4f817/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f8c840c28c11b13e630b55ad3dc6e0670b4f817/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0f8c840c28c11b13e630b55ad3dc6e0670b4f817", "patch": "@@ -1,3 +1,8 @@\n+2018-06-30  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.dg/vect/vect-reduc-dot-u16b.c: Remove xfail and update the\n+\ttest for vectorization along the lines described in the comment.\n+\n 2018-06-30  Tom de Vries  <tdevries@suse.de>\n \n \t* gcc.dg/guality/guality.exp (guality_transform_options): New proc."}, {"sha": "57e18040cf24b71cf77788716078f6c1f08fa3a0", "filename": "gcc/testsuite/gcc.dg/vect/vect-reduc-dot-u16b.c", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f8c840c28c11b13e630b55ad3dc6e0670b4f817/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-dot-u16b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f8c840c28c11b13e630b55ad3dc6e0670b4f817/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-dot-u16b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-dot-u16b.c?ref=0f8c840c28c11b13e630b55ad3dc6e0670b4f817", "patch": "@@ -10,11 +10,8 @@\n unsigned short X[N] __attribute__ ((__aligned__(__BIGGEST_ALIGNMENT__)));\n unsigned short Y[N] __attribute__ ((__aligned__(__BIGGEST_ALIGNMENT__)));\n \n-/* short->int->int dot product. \n-   Currently not detected as a dot-product pattern: the multiplication \n-   promotes the ushorts to int, and then the product is promoted to unsigned \n-   int for the addition.  Which results in an int->unsigned int cast, which \n-   since no bits are modified in the cast should be trivially vectorizable.  */\n+/* ushort->int->uint dot product: the multiplication promotes the ushorts\n+   to int, and then the product is converted to uint for the addition.  */\n __attribute__ ((noinline)) unsigned int\n foo2(int len) {\n   int i;\n@@ -47,12 +44,6 @@ int main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"vect_recog_dot_prod_pattern: detected\" 1 \"vect\" { xfail *-*-* } } } */\n-\n-/* Once the dot-product pattern is detected, we expect\n-   that loop to be vectorized on vect_udot_hi targets (targets that support \n-   dot-product of unsigned shorts) and targets that support widening multiplication.  */\n-/* The induction loop in main is vectorized.  */\n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 2 \"vect\" { xfail *-*-* } } } */ \n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target vect_pack_trunc } } } */ \n+/* { dg-final { scan-tree-dump-times \"vect_recog_dot_prod_pattern: detected\" 1 \"vect\" } } */\n \n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target { vect_pack_trunc || vect_udot_hi } } } } */ "}, {"sha": "67e8efe2fa98bb744e4de699ef856d206eb21c4d", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f8c840c28c11b13e630b55ad3dc6e0670b4f817/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f8c840c28c11b13e630b55ad3dc6e0670b4f817/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=0f8c840c28c11b13e630b55ad3dc6e0670b4f817", "patch": "@@ -6487,6 +6487,8 @@ vectorizable_reduction (gimple *stmt, gimple_stmt_iterator *gsi,\n     }\n \n   stmt_vec_info reduc_def_info = vinfo_for_stmt (reduc_def_stmt);\n+  /* PHIs should not participate in patterns.  */\n+  gcc_assert (!STMT_VINFO_RELATED_STMT (reduc_def_info));\n   enum vect_reduction_type v_reduc_type\n     = STMT_VINFO_REDUC_TYPE (reduc_def_info);\n   gimple *tmp = STMT_VINFO_REDUC_DEF (reduc_def_info);"}, {"sha": "6926c849f13e4e4cc006203126991a4a703344f4", "filename": "gcc/tree-vect-patterns.c", "status": "modified", "additions": 6, "deletions": 21, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f8c840c28c11b13e630b55ad3dc6e0670b4f817/gcc%2Ftree-vect-patterns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f8c840c28c11b13e630b55ad3dc6e0670b4f817/gcc%2Ftree-vect-patterns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-patterns.c?ref=0f8c840c28c11b13e630b55ad3dc6e0670b4f817", "patch": "@@ -193,13 +193,6 @@ type_conversion_p (tree name, gimple *use_stmt, bool check_sign,\n   if (!*def_stmt)\n     return false;\n \n-  if (dt == vect_internal_def)\n-    {\n-      stmt_vec_info def_vinfo = vinfo_for_stmt (*def_stmt);\n-      if (STMT_VINFO_IN_PATTERN_P (def_vinfo))\n-\treturn false;\n-    }\n-\n   if (!is_gimple_assign (*def_stmt))\n     return false;\n \n@@ -383,20 +376,11 @@ vect_recog_dot_prod_pattern (vec<gimple *> *stmts, tree *type_out)\n   /* FORNOW.  Can continue analyzing the def-use chain when this stmt in a phi\n      inside the loop (in case we are analyzing an outer-loop).  */\n   gassign *mult = dyn_cast <gassign *> (mult_vinfo->stmt);\n-  if (!mult || gimple_assign_rhs_code (mult) != MULT_EXPR)\n+  if (!mult)\n     return NULL;\n-  if (STMT_VINFO_IN_PATTERN_P (mult_vinfo))\n+  if (gimple_assign_rhs_code (mult) == WIDEN_MULT_EXPR)\n     {\n       /* Has been detected as a widening multiplication?  */\n-\n-      mult = dyn_cast <gassign *> (STMT_VINFO_RELATED_STMT (mult_vinfo));\n-      if (!mult || gimple_assign_rhs_code (mult) != WIDEN_MULT_EXPR)\n-        return NULL;\n-      STMT_VINFO_PATTERN_DEF_SEQ (stmt_vinfo)\n-\t= STMT_VINFO_PATTERN_DEF_SEQ (mult_vinfo);\n-      mult_vinfo = vinfo_for_stmt (mult);\n-      gcc_assert (mult_vinfo);\n-      gcc_assert (STMT_VINFO_DEF_TYPE (mult_vinfo) == vect_internal_def);\n       oprnd00 = gimple_assign_rhs1 (mult);\n       oprnd01 = gimple_assign_rhs2 (mult);\n     }\n@@ -406,6 +390,9 @@ vect_recog_dot_prod_pattern (vec<gimple *> *stmts, tree *type_out)\n       gimple *def_stmt;\n       tree oprnd0, oprnd1;\n \n+      if (gimple_assign_rhs_code (mult) != MULT_EXPR)\n+\treturn NULL;\n+\n       oprnd0 = gimple_assign_rhs1 (mult);\n       oprnd1 = gimple_assign_rhs2 (mult);\n       if (!type_conversion_p (oprnd0, mult, true, &half_type0, &def_stmt,\n@@ -2050,9 +2037,7 @@ vect_recog_vector_vector_shift_pattern (vec<gimple *> *stmts, tree *type_out)\n \n   tree def = NULL_TREE;\n   gassign *def_stmt = dyn_cast <gassign *> (def_vinfo->stmt);\n-  if (!STMT_VINFO_IN_PATTERN_P (def_vinfo)\n-      && def_stmt\n-      && gimple_assign_cast_p (def_stmt))\n+  if (def_stmt && gimple_assign_cast_p (def_stmt))\n     {\n       tree rhs1 = gimple_assign_rhs1 (def_stmt);\n       if (TYPE_MODE (TREE_TYPE (rhs1)) == TYPE_MODE (TREE_TYPE (oprnd0))"}, {"sha": "528e1d55892d3b7c8a162fe804bec036989c46cf", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f8c840c28c11b13e630b55ad3dc6e0670b4f817/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f8c840c28c11b13e630b55ad3dc6e0670b4f817/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=0f8c840c28c11b13e630b55ad3dc6e0670b4f817", "patch": "@@ -365,11 +365,9 @@ vect_get_and_check_slp_defs (vec_info *vinfo, unsigned char *swap,\n          from the pattern.  Check that all the stmts of the node are in the\n          pattern.  */\n       if (def_stmt && gimple_bb (def_stmt)\n-          && vect_stmt_in_region_p (vinfo, def_stmt)\n-          && vinfo_for_stmt (def_stmt)\n-          && STMT_VINFO_IN_PATTERN_P (vinfo_for_stmt (def_stmt))\n-\t  && !STMT_VINFO_RELEVANT (vinfo_for_stmt (def_stmt))\n-\t  && !STMT_VINFO_LIVE_P (vinfo_for_stmt (def_stmt)))\n+\t  && vect_stmt_in_region_p (vinfo, def_stmt)\n+\t  && vinfo_for_stmt (def_stmt)\n+\t  && is_pattern_stmt_p (vinfo_for_stmt (def_stmt)))\n         {\n           pattern = true;\n           if (!first && !oprnd_info->first_pattern\n@@ -398,7 +396,6 @@ vect_get_and_check_slp_defs (vec_info *vinfo, unsigned char *swap,\n \t      return 1;\n             }\n \n-          def_stmt = STMT_VINFO_RELATED_STMT (vinfo_for_stmt (def_stmt));\n           dt = STMT_VINFO_DEF_TYPE (vinfo_for_stmt (def_stmt));\n \n           if (dt == vect_unknown_def_type)"}, {"sha": "ab8cc8049a427b74bc862fdaf95ce5d4ca90d4de", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f8c840c28c11b13e630b55ad3dc6e0670b4f817/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f8c840c28c11b13e630b55ad3dc6e0670b4f817/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=0f8c840c28c11b13e630b55ad3dc6e0670b4f817", "patch": "@@ -506,8 +506,6 @@ process_use (gimple *stmt, tree use, loop_vec_info loop_vinfo,\n       if (dump_enabled_p ())\n \tdump_printf_loc (MSG_NOTE, vect_location,\n                          \"reduc-stmt defining reduc-phi in the same nest.\\n\");\n-      if (STMT_VINFO_IN_PATTERN_P (dstmt_vinfo))\n-\tdstmt_vinfo = vinfo_for_stmt (STMT_VINFO_RELATED_STMT (dstmt_vinfo));\n       gcc_assert (STMT_VINFO_RELEVANT (dstmt_vinfo) < vect_used_by_reduction);\n       gcc_assert (STMT_VINFO_LIVE_P (dstmt_vinfo)\n \t\t  || STMT_VINFO_RELEVANT (dstmt_vinfo) > vect_unused_in_scope);\n@@ -10069,8 +10067,6 @@ vect_is_simple_use (tree operand, vec_info *vinfo, enum vect_def_type *dt,\n     }\n \n   gimple *def_stmt = SSA_NAME_DEF_STMT (operand);\n-  if (def_stmt_out)\n-    *def_stmt_out = def_stmt;\n   if (dump_enabled_p ())\n     {\n       dump_printf_loc (MSG_NOTE, vect_location, \"def_stmt: \");\n@@ -10082,8 +10078,15 @@ vect_is_simple_use (tree operand, vec_info *vinfo, enum vect_def_type *dt,\n   else\n     {\n       stmt_vec_info stmt_vinfo = vinfo_for_stmt (def_stmt);\n+      if (STMT_VINFO_IN_PATTERN_P (stmt_vinfo))\n+\t{\n+\t  def_stmt = STMT_VINFO_RELATED_STMT (stmt_vinfo);\n+\t  stmt_vinfo = vinfo_for_stmt (def_stmt);\n+\t}\n       *dt = STMT_VINFO_DEF_TYPE (stmt_vinfo);\n     }\n+  if (def_stmt_out)\n+    *def_stmt_out = def_stmt;\n \n   if (dump_enabled_p ())\n     {\n@@ -10174,12 +10177,6 @@ vect_is_simple_use (tree operand, vec_info *vinfo, enum vect_def_type *dt,\n       || *dt == vect_nested_cycle)\n     {\n       stmt_vec_info stmt_info = vinfo_for_stmt (def_stmt);\n-\n-      if (STMT_VINFO_IN_PATTERN_P (stmt_info)\n-          && !STMT_VINFO_RELEVANT (stmt_info)\n-          && !STMT_VINFO_LIVE_P (stmt_info))\n-\tstmt_info = vinfo_for_stmt (STMT_VINFO_RELATED_STMT (stmt_info));\n-\n       *vectype = STMT_VINFO_VECTYPE (stmt_info);\n       gcc_assert (*vectype != NULL_TREE);\n     }"}]}