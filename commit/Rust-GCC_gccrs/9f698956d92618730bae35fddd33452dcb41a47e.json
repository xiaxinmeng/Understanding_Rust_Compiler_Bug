{"sha": "9f698956d92618730bae35fddd33452dcb41a47e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWY2OTg5NTZkOTI2MTg3MzBiYWUzNWZkZGQzMzQ1MmRjYjQxYTQ3ZQ==", "commit": {"author": {"name": "Andrey Belevantsev", "email": "abel@ispras.ru", "date": "2010-03-10T11:08:48Z"}, "committer": {"name": "Andrey Belevantsev", "email": "abel@gcc.gnu.org", "date": "2010-03-10T11:08:48Z"}, "message": "re PR middle-end/42859 (ICE in verify_flow_info)\n\n    PR middle-end/42859\n\n    * tree-eh.c: Include pointer-set.h.\n    (lower_eh_dispatch): Filter out duplicate case labels and\n    remove the unneeded edge when the label is unused.  Return\n    true when some edges are removed.\n    (execute_lower_eh_dispatch): When any lowering resulted in\n    removing an edge, also delete unreachable blocks.\n\n    * g++.dg/eh/pr42859.C: New test.\n\nFrom-SVN: r157337", "tree": {"sha": "78682def39936400a111fb29e15e1871abb31802", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/78682def39936400a111fb29e15e1871abb31802"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9f698956d92618730bae35fddd33452dcb41a47e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f698956d92618730bae35fddd33452dcb41a47e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f698956d92618730bae35fddd33452dcb41a47e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f698956d92618730bae35fddd33452dcb41a47e/comments", "author": {"login": "abonzo", "id": 20396542, "node_id": "MDQ6VXNlcjIwMzk2NTQy", "avatar_url": "https://avatars.githubusercontent.com/u/20396542?v=4", "gravatar_id": "", "url": "https://api.github.com/users/abonzo", "html_url": "https://github.com/abonzo", "followers_url": "https://api.github.com/users/abonzo/followers", "following_url": "https://api.github.com/users/abonzo/following{/other_user}", "gists_url": "https://api.github.com/users/abonzo/gists{/gist_id}", "starred_url": "https://api.github.com/users/abonzo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/abonzo/subscriptions", "organizations_url": "https://api.github.com/users/abonzo/orgs", "repos_url": "https://api.github.com/users/abonzo/repos", "events_url": "https://api.github.com/users/abonzo/events{/privacy}", "received_events_url": "https://api.github.com/users/abonzo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ff4f03c3b276a936ca6eb0778f48f22072aa928a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff4f03c3b276a936ca6eb0778f48f22072aa928a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff4f03c3b276a936ca6eb0778f48f22072aa928a"}], "stats": {"total": 75, "additions": 69, "deletions": 6}, "files": [{"sha": "32e2eab6bcf489956c24c023a3ab6676154f051a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f698956d92618730bae35fddd33452dcb41a47e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f698956d92618730bae35fddd33452dcb41a47e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9f698956d92618730bae35fddd33452dcb41a47e", "patch": "@@ -1,3 +1,13 @@\n+2010-03-10  Andrey Belevantsev  <abel@ispras.ru>\n+\n+\tPR middle-end/42859\n+\t* tree-eh.c: Include pointer-set.h.\n+\t(lower_eh_dispatch): Filter out duplicate case labels and\n+\tremove the unneeded edge when the label is unused.  Return\n+\ttrue when some edges are removed.\n+\t(execute_lower_eh_dispatch): When any lowering resulted in\n+\tremoving an edge, also delete unreachable blocks.\n+\n 2010-03-10  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR bootstrap/43287"}, {"sha": "bf4ccf7fe0608162bad4e335196e56a5283e7a02", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f698956d92618730bae35fddd33452dcb41a47e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f698956d92618730bae35fddd33452dcb41a47e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9f698956d92618730bae35fddd33452dcb41a47e", "patch": "@@ -1,3 +1,8 @@\n+2010-03-10  Andrey Belevantsev  <abel@ispras.ru>\n+\n+\tPR middle-end/42859\n+\t* g++.dg/eh/pr42859.C: New test.\n+\n 2010-03-09  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR debug/43299"}, {"sha": "a9f1473bc8533c5195b02dd7c6a6026e225336f5", "filename": "gcc/testsuite/g++.dg/eh/pr42859.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f698956d92618730bae35fddd33452dcb41a47e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fpr42859.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f698956d92618730bae35fddd33452dcb41a47e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fpr42859.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fpr42859.C?ref=9f698956d92618730bae35fddd33452dcb41a47e", "patch": "@@ -0,0 +1,23 @@\n+// { dg-do compile }\n+\n+void start (void);\n+void\n+ptw32_terminate (void)\n+{\n+  try\n+  {\n+    try\n+    {\n+      start ();\n+    }\n+    catch (int)\n+    {\n+    }\n+    catch (int)\n+    {\n+    }\n+  }\n+  catch (int)\n+  {\n+  }\n+}"}, {"sha": "5ae47f0c10fa88836d682570f76b84d9b4757782", "filename": "gcc/tree-eh.c", "status": "modified", "additions": 31, "deletions": 6, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f698956d92618730bae35fddd33452dcb41a47e/gcc%2Ftree-eh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f698956d92618730bae35fddd33452dcb41a47e/gcc%2Ftree-eh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-eh.c?ref=9f698956d92618730bae35fddd33452dcb41a47e", "patch": "@@ -28,6 +28,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"flags.h\"\n #include \"function.h\"\n #include \"except.h\"\n+#include \"pointer-set.h\"\n #include \"tree-flow.h\"\n #include \"tree-dump.h\"\n #include \"tree-inline.h\"\n@@ -3038,16 +3039,18 @@ struct gimple_opt_pass pass_lower_resx =\n };\n \n \n-/* At the end of inlining, we can lower EH_DISPATCH.  */\n+/* At the end of inlining, we can lower EH_DISPATCH.  Return true when \n+   we have found some duplicate labels and removed some edges.  */\n \n-static void\n+static bool\n lower_eh_dispatch (basic_block src, gimple stmt)\n {\n   gimple_stmt_iterator gsi;\n   int region_nr;\n   eh_region r;\n   tree filter, fn;\n   gimple x;\n+  bool redirected = false;\n \n   region_nr = gimple_eh_dispatch_region (stmt);\n   r = get_eh_region_from_number (region_nr);\n@@ -3063,6 +3066,7 @@ lower_eh_dispatch (basic_block src, gimple stmt)\n \teh_catch c;\n \tedge_iterator ei;\n \tedge e;\n+\tstruct pointer_set_t *seen_values = pointer_set_create ();\n \n \t/* Collect the labels for a switch.  Zero the post_landing_pad\n \t   field becase we'll no longer have anything keeping these labels\n@@ -3071,6 +3075,7 @@ lower_eh_dispatch (basic_block src, gimple stmt)\n \tfor (c = r->u.eh_try.first_catch; c ; c = c->next_catch)\n \t  {\n \t    tree tp_node, flt_node, lab = c->label;\n+\t    bool have_label = false;\n \n \t    c->label = NULL;\n \t    tp_node = c->type_list;\n@@ -3083,14 +3088,29 @@ lower_eh_dispatch (basic_block src, gimple stmt)\n \t      }\n \t    do\n \t      {\n-\t\ttree t = build3 (CASE_LABEL_EXPR, void_type_node,\n-\t\t\t\t TREE_VALUE (flt_node), NULL, lab);\n-\t\tVEC_safe_push (tree, heap, labels, t);\n+\t\t/* Filter out duplicate labels that arise when this handler \n+\t\t   is shadowed by an earlier one.  When no labels are \n+\t\t   attached to the handler anymore, we remove \n+\t\t   the corresponding edge and then we delete unreachable \n+\t\t   blocks at the end of this pass.  */\n+\t\tif (! pointer_set_contains (seen_values, TREE_VALUE (flt_node)))\n+\t\t  {\n+\t\t    tree t = build3 (CASE_LABEL_EXPR, void_type_node,\n+\t\t\t\t     TREE_VALUE (flt_node), NULL, lab);\n+\t\t    VEC_safe_push (tree, heap, labels, t);\n+\t\t    pointer_set_insert (seen_values, TREE_VALUE (flt_node));\n+\t\t    have_label = true;\n+\t\t  }\n \n \t\ttp_node = TREE_CHAIN (tp_node);\n \t\tflt_node = TREE_CHAIN (flt_node);\n \t      }\n \t    while (tp_node);\n+\t    if (! have_label)\n+\t      {\n+\t        remove_edge (find_edge (src, label_to_block (lab)));\n+\t        redirected = true;\n+\t      }\n \t  }\n \n \t/* Clean up the edge flags.  */\n@@ -3132,6 +3152,7 @@ lower_eh_dispatch (basic_block src, gimple stmt)\n \n \t    VEC_free (tree, heap, labels);\n \t  }\n+\tpointer_set_destroy (seen_values);\n       }\n       break;\n \n@@ -3165,13 +3186,15 @@ lower_eh_dispatch (basic_block src, gimple stmt)\n \n   /* Replace the EH_DISPATCH with the SWITCH or COND generated above.  */\n   gsi_remove (&gsi, true);\n+  return redirected;\n }\n \n static unsigned\n execute_lower_eh_dispatch (void)\n {\n   basic_block bb;\n   bool any_rewritten = false;\n+  bool redirected = false;\n \n   assign_filter_values ();\n \n@@ -3180,11 +3203,13 @@ execute_lower_eh_dispatch (void)\n       gimple last = last_stmt (bb);\n       if (last && gimple_code (last) == GIMPLE_EH_DISPATCH)\n \t{\n-\t  lower_eh_dispatch (bb, last);\n+\t  redirected |= lower_eh_dispatch (bb, last);\n \t  any_rewritten = true;\n \t}\n     }\n \n+  if (redirected)\n+    delete_unreachable_blocks ();\n   return any_rewritten ? TODO_update_ssa_only_virtuals : 0;\n }\n "}]}