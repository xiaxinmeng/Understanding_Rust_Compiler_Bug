{"sha": "17d1bf760f8fda0023d5074de0a2b2929e27c480", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTdkMWJmNzYwZjhmZGEwMDIzZDUwNzRkZTBhMmIyOTI5ZTI3YzQ4MA==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2015-03-03T09:26:20Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2015-03-03T09:26:20Z"}, "message": "re PR target/65263 (ICE (error: unrecognizable insn / in insn_min_length, at config/rs6000/rs6000.md) on powerpc64le-linux-gnu)\n\nFix PR ipa/65263.\n\n\tPR ipa/65263\n\t* cgraph.c (cgraph_node::has_thunk_p): New function.\n\t* cgraph.h (cgraph_node::has_thunk_p: Likewise.\n\t* ipa-icf.c (redirect_all_callers): Do not redirect thunks.\n\t(sem_function::merge): Assert is changed.\n\t* g++.dg/ipa/pr65263.C: New test.\n\n\nCo-Authored-By: Jan Hubicka <hubicka@ucw.cz>\n\nFrom-SVN: r221134", "tree": {"sha": "95f961e1350a2d19eb23ce29ab324e11f8dee391", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/95f961e1350a2d19eb23ce29ab324e11f8dee391"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/17d1bf760f8fda0023d5074de0a2b2929e27c480", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17d1bf760f8fda0023d5074de0a2b2929e27c480", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17d1bf760f8fda0023d5074de0a2b2929e27c480", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17d1bf760f8fda0023d5074de0a2b2929e27c480/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bd31fe14d2dfb4b12a82d9a223853ff2228a6523", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd31fe14d2dfb4b12a82d9a223853ff2228a6523", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd31fe14d2dfb4b12a82d9a223853ff2228a6523"}], "stats": {"total": 105, "additions": 100, "deletions": 5}, "files": [{"sha": "5e11a0f6e2bf0510108a1ce88b76342d65a2a7b7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17d1bf760f8fda0023d5074de0a2b2929e27c480/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17d1bf760f8fda0023d5074de0a2b2929e27c480/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=17d1bf760f8fda0023d5074de0a2b2929e27c480", "patch": "@@ -1,3 +1,12 @@\n+2015-03-03  Martin Liska  <mliska@suse.cz>\n+\t    Jan Hubicka   <hubicka@ucw.cz>\n+\n+\tPR ipa/65263\n+\t* cgraph.c (cgraph_node::has_thunk_p): New function.\n+\t* cgraph.h (cgraph_node::has_thunk_p: Likewise.\n+\t* ipa-icf.c (redirect_all_callers): Do not redirect thunks.\n+\t(sem_function::merge): Assert is changed.\n+\n 2015-03-03  Martin Liska  <mliska@suse.cz>\n \t    Martin Jambor  <mjambor@suse.cz>\n "}, {"sha": "9bae35ebbeef7dffdaeda3fb15da477336fec0ce", "filename": "gcc/cgraph.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17d1bf760f8fda0023d5074de0a2b2929e27c480/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17d1bf760f8fda0023d5074de0a2b2929e27c480/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=17d1bf760f8fda0023d5074de0a2b2929e27c480", "patch": "@@ -3325,4 +3325,16 @@ cgraph_node::call_for_symbol_and_aliases_1 (bool (*callback) (cgraph_node *,\n     }\n   return false;\n }\n+\n+/* Return true if NODE has thunk.  */\n+\n+bool\n+cgraph_node::has_thunk_p (cgraph_node *node, void *)\n+{\n+  for (cgraph_edge *e = node->callers; e; e = e->next_caller)\n+    if (e->caller->thunk.thunk_p)\n+      return true;\n+  return false;\n+}\n+\n #include \"gt-cgraph.h\""}, {"sha": "82519fa8a3e8e9191c3dd8df86fdc5d4eb858472", "filename": "gcc/cgraph.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17d1bf760f8fda0023d5074de0a2b2929e27c480/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17d1bf760f8fda0023d5074de0a2b2929e27c480/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=17d1bf760f8fda0023d5074de0a2b2929e27c480", "patch": "@@ -1204,6 +1204,9 @@ struct GTY((tag (\"SYMTAB_FUNCTION\"))) cgraph_node : public symtab_node {\n      with (not necessarily cgraph_node (DECL).  */\n   static cgraph_node *create_alias (tree alias, tree target);\n \n+  /* Return true if NODE has thunk.  */\n+  static bool has_thunk_p (cgraph_node *node, void *);\n+\n   cgraph_edge *callees;\n   cgraph_edge *callers;\n   /* List of edges representing indirect calls with a yet undetermined"}, {"sha": "48326185d9607790ec9e39f024f16a066946402a", "filename": "gcc/ipa-icf.c", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17d1bf760f8fda0023d5074de0a2b2929e27c480/gcc%2Fipa-icf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17d1bf760f8fda0023d5074de0a2b2929e27c480/gcc%2Fipa-icf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-icf.c?ref=17d1bf760f8fda0023d5074de0a2b2929e27c480", "patch": "@@ -697,12 +697,22 @@ redirect_all_callers (cgraph_node *n, cgraph_node *to)\n {\n   int nredirected = 0;\n   ipa_ref *ref;\n+  cgraph_edge *e = n->callers;\n \n-  while (n->callers)\n+  while (e)\n     {\n-      cgraph_edge *e = n->callers;\n-      e->redirect_callee (to);\n-      nredirected++;\n+      /* Redirecting thunks to interposable symbols or symbols in other sections\n+\t may not be supported by target output code.  Play safe for now and\n+\t punt on redirection.  */\n+      if (!e->caller->thunk.thunk_p)\n+\t{\n+\t  struct cgraph_edge *nexte = e->next_caller;\n+          e->redirect_callee (to);\n+\t  e = nexte;\n+          nredirected++;\n+\t}\n+      else\n+\te = e->next_callee;\n     }\n   for (unsigned i = 0; n->iterate_direct_aliases (i, ref);)\n     {\n@@ -717,6 +727,8 @@ redirect_all_callers (cgraph_node *n, cgraph_node *to)\n \t{\n \t  nredirected += redirect_all_callers (n_alias, to);\n \t  if (n_alias->can_remove_if_no_direct_calls_p ()\n+\t      && !n_alias->call_for_symbol_and_aliases (cgraph_node::has_thunk_p,\n+\t\t\t\t\t\t\tNULL, true)\n \t      && !n_alias->has_aliases_p ())\n \t    n_alias->remove ();\n \t}\n@@ -907,6 +919,8 @@ sem_function::merge (sem_item *alias_item)\n \t  return false;\n \t}\n       if (!create_wrapper\n+\t  && !alias->call_for_symbol_and_aliases (cgraph_node::has_thunk_p,\n+\t\t\t\t\t\t  NULL, true)\n \t  && !alias->can_remove_if_no_direct_calls_p ())\n \t{\n \t  if (dump_file)\n@@ -975,7 +989,10 @@ sem_function::merge (sem_item *alias_item)\n       if (dump_file)\n \tfprintf (dump_file, \"Unified; Wrapper has been created.\\n\\n\");\n     }\n-  gcc_assert (alias->icf_merged || remove);\n+\n+  /* It's possible that redirection can hit thunks that block\n+     redirection opportunities.  */\n+  gcc_assert (alias->icf_merged || remove || redirect_callers);\n   original->icf_merged = true;\n \n   /* Inform the inliner about cross-module merging.  */"}, {"sha": "2b3cf0e4c151bfb14429e0400eda496027fbb689", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17d1bf760f8fda0023d5074de0a2b2929e27c480/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17d1bf760f8fda0023d5074de0a2b2929e27c480/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=17d1bf760f8fda0023d5074de0a2b2929e27c480", "patch": "@@ -1,3 +1,8 @@\n+2015-03-03  Martin Liska  <mliska@suse.cz>\n+\t    Jan Hubicka   <hubicka@ucw.cz>\n+\n+\t* g++.dg/ipa/pr65263.C: New test.\n+\n 2015-03-02  Jan Hubicka   <hubicka@ucw.cz>\n \n \tPR ipa/65130"}, {"sha": "34459a2667b19497fce06dc128cc6e43559aea07", "filename": "gcc/testsuite/g++.dg/ipa/pr65263.C", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17d1bf760f8fda0023d5074de0a2b2929e27c480/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr65263.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17d1bf760f8fda0023d5074de0a2b2929e27c480/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr65263.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr65263.C?ref=17d1bf760f8fda0023d5074de0a2b2929e27c480", "patch": "@@ -0,0 +1,49 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -c -w\" } */\n+\n+template <class> class A;\n+template <class R> struct VirtualMatrice {\n+  virtual bool m_fn1(int) const { return true; }\n+  struct B {\n+    A<R> x;\n+    B(VirtualMatrice *p1, A<R> p2) : x(p2) { p1->m_fn1(0) ?: throw; }\n+  };\n+  void operator*(A<R> p1) { B(this, p1); }\n+  ~VirtualMatrice();\n+}\n+;\n+template <class> class A {\n+public:\n+  operator int *();\n+  A(int *, long);\n+};\n+\n+class G : public A<int> {\n+public:\n+  G(long);\n+};\n+int typedef Complex;\n+template <class> class H : VirtualMatrice<int> {};\n+template <class> class C;\n+template <> class C<int> : H<Complex>, VirtualMatrice<Complex> {\n+  bool m_fn1(int) const { return true; }\n+};\n+template <class K, class Mat>\n+void DoIdoAction(int, int, A<K> p3, A<K>, A<K>, A<K>, Mat, Mat &p8) {\n+  p8 *p3;\n+}\n+\n+class D {\n+  typedef int K;\n+  class F {\n+    int operator()() const;\n+  };\n+};\n+int D::F::operator()() const {\n+  VirtualMatrice<K> *a;\n+  VirtualMatrice<K> b, &B = *a;\n+  G c(0), g(1);\n+  int d, e, f;\n+  A<K> h(&g[f], 0), i(&g[e], 0), j(&g[d], 0);\n+  DoIdoAction(0, 3, h, i, j, c, b, B);\n+}"}]}