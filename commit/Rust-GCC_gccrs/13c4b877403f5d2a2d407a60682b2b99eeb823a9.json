{"sha": "13c4b877403f5d2a2d407a60682b2b99eeb823a9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTNjNGI4Nzc0MDNmNWQyYTJkNDA3YTYwNjgyYjJiOTllZWI4MjNhOQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2009-03-25T23:37:53Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2009-03-25T23:37:53Z"}, "message": "[multiple changes]\n\n2009-03-25  Edward Smith-Rowland  <3dw4rd@verizon.net>\n\n\t* include/std/fstream (basic_filebuf<>::open(const std::string&,\n\tios_base::openmode), basic_ifstream<>::basic_ifstream(const\n\tstd::string&, ios_base::openmode), basic_ifstream<>::\n\topen(const std::string&, ios_base::openmode), basic_ofstream<>::\n\tbasic_ofstream(const std::string&, ios_base::openmode),\n\tbasic_ofstream<>::open(const std::string&, ios_base::openmode),\n\tbasic_fstream<>::basic_fstream(const std::string&, ios_base::openmode),\n\tbasic_fstream<>::open(const std::string&, ios_base::openmode)):\n\tAdd in C++0x mode.\n\t* testsuite/27_io/basic_ofstream/open/char/2.cc: New.\n\t* testsuite/27_io/basic_ofstream/cons/char/2.cc: Likewise.\n\t* testsuite/27_io/basic_fstream/open/char/1.cc: Likewise.\n\t* testsuite/27_io/basic_fstream/cons/char/1.cc: Likewise.\n\t* testsuite/27_io/basic_ifstream/open/char/1.cc: Likewise.\n\t* testsuite/27_io/basic_ifstream/cons/char/1.cc: Likewise.\n\t* testsuite/27_io/basic_filebuf/open/char/5.cc: Likewise.\n\n2009-03-25  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* testsuite/27_io/basic_ofstream/cons/char/2.cc: Rename to...\n\t* testsuite/27_io/basic_ofstream/cons/char/1.cc: ... this.    \n\t* testsuite/27_io/basic_fstream/cons/3.cc: Rename to...\n\t* testsuite/27_io/basic_fstream/cons/1.cc: ... this.\n\nFrom-SVN: r145078", "tree": {"sha": "6eb5ed58d2736cbb3493679484c490cc4dbccc85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6eb5ed58d2736cbb3493679484c490cc4dbccc85"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/13c4b877403f5d2a2d407a60682b2b99eeb823a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13c4b877403f5d2a2d407a60682b2b99eeb823a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13c4b877403f5d2a2d407a60682b2b99eeb823a9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13c4b877403f5d2a2d407a60682b2b99eeb823a9/comments", "author": null, "committer": null, "parents": [{"sha": "9fdcdc749b18a96983ba060f35421147a7454bd5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fdcdc749b18a96983ba060f35421147a7454bd5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fdcdc749b18a96983ba060f35421147a7454bd5"}], "stats": {"total": 516, "additions": 443, "deletions": 73}, "files": [{"sha": "f59340b45aa80abd26966add1ae8b7a7e223be45", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13c4b877403f5d2a2d407a60682b2b99eeb823a9/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13c4b877403f5d2a2d407a60682b2b99eeb823a9/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=13c4b877403f5d2a2d407a60682b2b99eeb823a9", "patch": "@@ -1,3 +1,29 @@\n+2009-03-25  Edward Smith-Rowland  <3dw4rd@verizon.net>\n+\n+\t* include/std/fstream (basic_filebuf<>::open(const std::string&,\n+\tios_base::openmode), basic_ifstream<>::basic_ifstream(const\n+\tstd::string&, ios_base::openmode), basic_ifstream<>::\n+\topen(const std::string&, ios_base::openmode), basic_ofstream<>::\n+\tbasic_ofstream(const std::string&, ios_base::openmode),\n+\tbasic_ofstream<>::open(const std::string&, ios_base::openmode),\n+\tbasic_fstream<>::basic_fstream(const std::string&, ios_base::openmode),\n+\tbasic_fstream<>::open(const std::string&, ios_base::openmode)):\n+\tAdd in C++0x mode.\n+\t* testsuite/27_io/basic_ofstream/open/char/2.cc: New.\n+\t* testsuite/27_io/basic_ofstream/cons/char/2.cc: Likewise.\n+\t* testsuite/27_io/basic_fstream/open/char/1.cc: Likewise.\n+\t* testsuite/27_io/basic_fstream/cons/char/1.cc: Likewise.\n+\t* testsuite/27_io/basic_ifstream/open/char/1.cc: Likewise.\n+\t* testsuite/27_io/basic_ifstream/cons/char/1.cc: Likewise.\n+\t* testsuite/27_io/basic_filebuf/open/char/5.cc: Likewise.\n+\n+2009-03-25  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* testsuite/27_io/basic_ofstream/cons/char/2.cc: Rename to...\n+\t* testsuite/27_io/basic_ofstream/cons/char/1.cc: ... this.    \n+\t* testsuite/27_io/basic_fstream/cons/3.cc: Rename to...\n+\t* testsuite/27_io/basic_fstream/cons/1.cc: ... this.\n+\n 2009-03-25  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/bits/forward_list.h (_Fwd_list_node_base<>::"}, {"sha": "11bc743db3c3299d8ce27f1f518fe875ed80161b", "filename": "libstdc++-v3/include/std/fstream", "status": "modified", "additions": 177, "deletions": 44, "changes": 221, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13c4b877403f5d2a2d407a60682b2b99eeb823a9/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffstream", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13c4b877403f5d2a2d407a60682b2b99eeb823a9/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffstream", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffstream?ref=13c4b877403f5d2a2d407a60682b2b99eeb823a9", "patch": "@@ -45,8 +45,11 @@\n #include <istream>\n #include <ostream>\n #include <bits/codecvt.h>\n-#include <cstdio>             // For BUFSIZ     \n+#include <cstdio>             // For BUFSIZ\n #include <bits/basic_file.h>  // For __basic_file, __c_lock\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#include <string>             // For std::string overloads.\n+#endif\n \n _GLIBCXX_BEGIN_NAMESPACE(std)\n \n@@ -59,7 +62,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n    *  external disk file, and maintains a joint file position for both\n    *  sequences.  Many of its semantics are described in terms of similar\n    *  behavior in the Standard C Library's @c FILE streams.\n-  */\n+   */\n   // Requirements on traits_type, specific to this class:\n   // traits_type::pos_type must be fpos<traits_type::state_type>\n   // traits_type::off_type must be streamoff\n@@ -114,19 +117,19 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *  Actual size of internal buffer. This number is equal to the size\n        *  of the put area + 1 position, reserved for the overflow char of\n        *  a full area.\n-      */\n+       */\n       size_t\t\t\t_M_buf_size;\n \n       // Set iff _M_buf is allocated memory from _M_allocate_internal_buffer.\n       bool\t\t\t_M_buf_allocated;\n \n       /**\n-       *  _M_reading == false && _M_writing == false for 'uncommitted' mode;  \n+       *  _M_reading == false && _M_writing == false for 'uncommitted' mode;\n        *  _M_reading == true for 'read' mode;\n        *  _M_writing == true for 'write' mode;\n        *\n        *  NB: _M_reading == true && _M_writing == true is unused.\n-      */ \n+       */\n       bool                      _M_reading;\n       bool                      _M_writing;\n \n@@ -135,11 +138,11 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *  Necessary bits for putback buffer management.\n        *\n        *  @note pbacks of over one character are not currently supported.\n-      */\n-      char_type\t\t\t_M_pback; \n+       */\n+      char_type\t\t\t_M_pback;\n       char_type*\t\t_M_pback_cur_save;\n       char_type*\t\t_M_pback_end_save;\n-      bool\t\t\t_M_pback_init; \n+      bool\t\t\t_M_pback_init;\n       //@}\n \n       // Cached codecvt facet.\n@@ -149,27 +152,27 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *  Buffer for external characters. Used for input when\n        *  codecvt::always_noconv() == false. When valid, this corresponds\n        *  to eback().\n-      */ \n+       */\n       char*\t\t\t_M_ext_buf;\n \n       /**\n        *  Size of buffer held by _M_ext_buf.\n-      */ \n+       */\n       streamsize\t\t_M_ext_buf_size;\n \n       /**\n        *  Pointers into the buffer held by _M_ext_buf that delimit a\n        *  subsequence of bytes that have been read but not yet converted.\n        *  When valid, _M_ext_next corresponds to egptr().\n-      */ \n+       */\n       const char*\t\t_M_ext_next;\n       char*\t\t\t_M_ext_end;\n \n       /**\n        *  Initializes pback buffers, and moves normal buffers to safety.\n        *  Assumptions:\n        *  _M_in_cur has already been moved back\n-      */\n+       */\n       void\n       _M_create_pback()\n       {\n@@ -186,7 +189,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *  Deactivates pback buffer contents, and restores normal buffer.\n        *  Assumptions:\n        *  The pback buffer has only moved forward.\n-      */ \n+       */\n       void\n       _M_destroy_pback() throw()\n       {\n@@ -206,20 +209,20 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *\n        *  The default constructor initializes the parent class using its\n        *  own default ctor.\n-      */\n+       */\n       basic_filebuf();\n \n       /**\n        *  @brief  The destructor closes the file first.\n-      */\n+       */\n       virtual\n       ~basic_filebuf()\n       { this->close(); }\n \n       // Members:\n       /**\n        *  @brief  Returns true if the external file is open.\n-      */\n+       */\n       bool\n       is_open() const throw()\n       { return _M_file.is_open(); }\n@@ -266,6 +269,18 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       __filebuf_type*\n       open(const char* __s, ios_base::openmode __mode);\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      /**\n+       *  @brief  Opens an external file.\n+       *  @param  s  The name of the file.\n+       *  @param  mode  The open mode flags.\n+       *  @return  @c this on success, NULL on failure\n+       */\n+      __filebuf_type*\n+      open(const std::string& __s, ios_base::openmode __mode)\n+      { return open(__s.c_str(), __mode); }\n+#endif\n+\n       /**\n        *  @brief  Closes the currently associated file.\n        *  @return  @c this on success, NULL on failure\n@@ -276,7 +291,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *  all the characters.  The file is then closed.\n        *\n        *  If any operations fail, this function also fails.\n-      */\n+       */\n       __filebuf_type*\n       close();\n \n@@ -328,7 +343,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *  buffer; see\n        *  http://gcc.gnu.org/onlinedocs/libstdc++/manual/bk01pt11ch25s02.html\n        *  for more.\n-      */\n+       */\n       virtual __streambuf_type*\n       setbuf(char_type* __s, streamsize __n);\n \n@@ -367,11 +382,11 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *   __off == egptr() - eback() upon underflow/uflow ('read' mode);\n        *   __off == 0 upon overflow ('write' mode);\n        *   __off == -1 upon open, setbuf, seekoff/pos ('uncommitted' mode).\n-       * \n+       *\n        *  NB: epptr() - pbase() == _M_buf_size - 1, since _M_buf_size\n        *  reflects the actual allocated memory and the last cell is reserved\n        *  for the overflow char of a full put area.\n-      */\n+       */\n       void\n       _M_set_buffer(streamsize __off)\n       {\n@@ -399,7 +414,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n    *  functions from std::basic_istream.  To control the associated\n    *  sequence, an instance of std::basic_filebuf is used, which this page\n    *  refers to as @c sb.\n-  */\n+   */\n   template<typename _CharT, typename _Traits>\n     class basic_ifstream : public basic_istream<_CharT, _Traits>\n     {\n@@ -426,7 +441,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *  Initializes @c sb using its default constructor, and passes\n        *  @c &sb to the base class initializer.  Does not open any files\n        *  (you haven't given it a filename to open).\n-      */\n+       */\n       basic_ifstream() : __istream_type(), _M_filebuf()\n       { this->init(&_M_filebuf); }\n \n@@ -439,7 +454,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *\n        *  Tip:  When using std::string to hold the filename, you must use\n        *  .c_str() before passing it to this constructor.\n-      */\n+       */\n       explicit\n       basic_ifstream(const char* __s, ios_base::openmode __mode = ios_base::in)\n       : __istream_type(), _M_filebuf()\n@@ -448,12 +463,30 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \tthis->open(__s, __mode);\n       }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      /**\n+       *  @brief  Create an input file stream.\n+       *  @param  s  std::string specifying the filename.\n+       *  @param  mode  Open file in specified mode (see std::ios_base).\n+       *\n+       *  @c ios_base::in is automatically included in @a mode.\n+       */\n+      explicit\n+      basic_ifstream(const std::string& __s,\n+\t\t     ios_base::openmode __mode = ios_base::in)\n+      : __istream_type(), _M_filebuf()\n+      {\n+\tthis->init(&_M_filebuf);\n+\tthis->open(__s, __mode);\n+      }\n+#endif\n+\n       /**\n        *  @brief  The destructor does nothing.\n        *\n        *  The file is closed by the filebuf object, not the formatting\n        *  stream.\n-      */\n+       */\n       ~basic_ifstream()\n       { }\n \n@@ -463,15 +496,15 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *  @return  The current basic_filebuf buffer.\n        *\n        *  This hides both signatures of std::basic_ios::rdbuf().\n-      */\n+       */\n       __filebuf_type*\n       rdbuf() const\n       { return const_cast<__filebuf_type*>(&_M_filebuf); }\n \n       /**\n        *  @brief  Wrapper to test for an open file.\n        *  @return  @c rdbuf()->is_open()\n-      */\n+       */\n       bool\n       is_open()\n       { return _M_filebuf.is_open(); }\n@@ -492,7 +525,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *\n        *  Tip:  When using std::string to hold the filename, you must use\n        *  .c_str() before passing it to this constructor.\n-      */\n+       */\n       void\n       open(const char* __s, ios_base::openmode __mode = ios_base::in)\n       {\n@@ -504,12 +537,33 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t  this->clear();\n       }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      /**\n+       *  @brief  Opens an external file.\n+       *  @param  s  The name of the file.\n+       *  @param  mode  The open mode flags.\n+       *\n+       *  Calls @c std::basic_filebuf::open(s,mode|in).  If that function\n+       *  fails, @c failbit is set in the stream's error state.\n+       */\n+      void\n+      open(const std::string& __s, ios_base::openmode __mode = ios_base::in)\n+      {\n+\tif (!_M_filebuf.open(__s, __mode | ios_base::in))\n+\t  this->setstate(ios_base::failbit);\n+\telse\n+\t  // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+\t  // 409. Closing an fstream should clear error state\n+\t  this->clear();\n+      }\n+#endif\n+\n       /**\n        *  @brief  Close the file.\n        *\n        *  Calls @c std::basic_filebuf::close().  If that function\n        *  fails, @c failbit is set in the stream's error state.\n-      */\n+       */\n       void\n       close()\n       {\n@@ -528,7 +582,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n    *  functions from std::basic_ostream.  To control the associated\n    *  sequence, an instance of std::basic_filebuf is used, which this page\n    *  refers to as @c sb.\n-  */\n+   */\n   template<typename _CharT, typename _Traits>\n     class basic_ofstream : public basic_ostream<_CharT,_Traits>\n     {\n@@ -555,7 +609,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *  Initializes @c sb using its default constructor, and passes\n        *  @c &sb to the base class initializer.  Does not open any files\n        *  (you haven't given it a filename to open).\n-      */\n+       */\n       basic_ofstream(): __ostream_type(), _M_filebuf()\n       { this->init(&_M_filebuf); }\n \n@@ -569,7 +623,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *\n        *  Tip:  When using std::string to hold the filename, you must use\n        *  .c_str() before passing it to this constructor.\n-      */\n+       */\n       explicit\n       basic_ofstream(const char* __s,\n \t\t     ios_base::openmode __mode = ios_base::out|ios_base::trunc)\n@@ -579,12 +633,31 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \tthis->open(__s, __mode);\n       }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      /**\n+       *  @brief  Create an output file stream.\n+       *  @param  s  std::string specifying the filename.\n+       *  @param  mode  Open file in specified mode (see std::ios_base).\n+       *\n+       *  @c ios_base::out|ios_base::trunc is automatically included in\n+       *  @a mode.\n+       */\n+      explicit\n+      basic_ofstream(const std::string& __s,\n+\t\t     ios_base::openmode __mode = ios_base::out|ios_base::trunc)\n+      : __ostream_type(), _M_filebuf()\n+      {\n+\tthis->init(&_M_filebuf);\n+\tthis->open(__s, __mode);\n+      }\n+#endif\n+\n       /**\n        *  @brief  The destructor does nothing.\n        *\n        *  The file is closed by the filebuf object, not the formatting\n        *  stream.\n-      */\n+       */\n       ~basic_ofstream()\n       { }\n \n@@ -594,15 +667,15 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *  @return  The current basic_filebuf buffer.\n        *\n        *  This hides both signatures of std::basic_ios::rdbuf().\n-      */\n+       */\n       __filebuf_type*\n       rdbuf() const\n       { return const_cast<__filebuf_type*>(&_M_filebuf); }\n \n       /**\n        *  @brief  Wrapper to test for an open file.\n        *  @return  @c rdbuf()->is_open()\n-      */\n+       */\n       bool\n       is_open()\n       { return _M_filebuf.is_open(); }\n@@ -623,7 +696,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *\n        *  Tip:  When using std::string to hold the filename, you must use\n        *  .c_str() before passing it to this constructor.\n-      */\n+       */\n       void\n       open(const char* __s,\n \t   ios_base::openmode __mode = ios_base::out | ios_base::trunc)\n@@ -636,12 +709,34 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t  this->clear();\n       }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      /**\n+       *  @brief  Opens an external file.\n+       *  @param  s  The name of the file.\n+       *  @param  mode  The open mode flags.\n+       *\n+       *  Calls @c std::basic_filebuf::open(s,mode|out|trunc).  If that\n+       *  function fails, @c failbit is set in the stream's error state.\n+       */\n+      void\n+      open(const std::string& __s,\n+\t   ios_base::openmode __mode = ios_base::out | ios_base::trunc)\n+      {\n+\tif (!_M_filebuf.open(__s, __mode | ios_base::out))\n+\t  this->setstate(ios_base::failbit);\n+\telse\n+\t  // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+\t  // 409. Closing an fstream should clear error state\n+\t  this->clear();\n+      }\n+#endif\n+\n       /**\n        *  @brief  Close the file.\n        *\n        *  Calls @c std::basic_filebuf::close().  If that function\n        *  fails, @c failbit is set in the stream's error state.\n-      */\n+       */\n       void\n       close()\n       {\n@@ -660,7 +755,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n    *  the inherited functions from std::basic_iostream.  To control the\n    *  associated sequence, an instance of std::basic_filebuf is used, which\n    *  this page refers to as @c sb.\n-  */\n+   */\n   template<typename _CharT, typename _Traits>\n     class basic_fstream : public basic_iostream<_CharT, _Traits>\n     {\n@@ -688,7 +783,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *  Initializes @c sb using its default constructor, and passes\n        *  @c &sb to the base class initializer.  Does not open any files\n        *  (you haven't given it a filename to open).\n-      */\n+       */\n       basic_fstream()\n       : __iostream_type(), _M_filebuf()\n       { this->init(&_M_filebuf); }\n@@ -700,7 +795,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *\n        *  Tip:  When using std::string to hold the filename, you must use\n        *  .c_str() before passing it to this constructor.\n-      */\n+       */\n       explicit\n       basic_fstream(const char* __s,\n \t\t    ios_base::openmode __mode = ios_base::in | ios_base::out)\n@@ -710,12 +805,28 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \tthis->open(__s, __mode);\n       }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      /**\n+       *  @brief  Create an input/output file stream.\n+       *  @param  s  Null terminated string specifying the filename.\n+       *  @param  mode  Open file in specified mode (see std::ios_base).\n+       */\n+      explicit\n+      basic_fstream(const std::string& __s,\n+\t\t    ios_base::openmode __mode = ios_base::in | ios_base::out)\n+      : __iostream_type(NULL), _M_filebuf()\n+      {\n+\tthis->init(&_M_filebuf);\n+\tthis->open(__s, __mode);\n+      }\n+#endif\n+\n       /**\n        *  @brief  The destructor does nothing.\n        *\n        *  The file is closed by the filebuf object, not the formatting\n        *  stream.\n-      */\n+       */\n       ~basic_fstream()\n       { }\n \n@@ -725,15 +836,15 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *  @return  The current basic_filebuf buffer.\n        *\n        *  This hides both signatures of std::basic_ios::rdbuf().\n-      */\n+       */\n       __filebuf_type*\n       rdbuf() const\n       { return const_cast<__filebuf_type*>(&_M_filebuf); }\n \n       /**\n        *  @brief  Wrapper to test for an open file.\n        *  @return  @c rdbuf()->is_open()\n-      */\n+       */\n       bool\n       is_open()\n       { return _M_filebuf.is_open(); }\n@@ -754,7 +865,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *\n        *  Tip:  When using std::string to hold the filename, you must use\n        *  .c_str() before passing it to this constructor.\n-      */\n+       */\n       void\n       open(const char* __s,\n \t   ios_base::openmode __mode = ios_base::in | ios_base::out)\n@@ -767,12 +878,34 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t  this->clear();\n       }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      /**\n+       *  @brief  Opens an external file.\n+       *  @param  s  The name of the file.\n+       *  @param  mode  The open mode flags.\n+       *\n+       *  Calls @c std::basic_filebuf::open(s,mode).  If that\n+       *  function fails, @c failbit is set in the stream's error state.\n+       */\n+      void\n+      open(const std::string& __s,\n+\t   ios_base::openmode __mode = ios_base::in | ios_base::out)\n+      {\n+\tif (!_M_filebuf.open(__s, __mode))\n+\t  this->setstate(ios_base::failbit);\n+\telse\n+\t  // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+\t  // 409. Closing an fstream should clear error state\n+\t  this->clear();\n+      }\n+#endif\n+\n       /**\n        *  @brief  Close the file.\n        *\n        *  Calls @c std::basic_filebuf::close().  If that function\n        *  fails, @c failbit is set in the stream's error state.\n-      */\n+       */\n       void\n       close()\n       {"}, {"sha": "dddd2f16ff6fe5738c1acfad132e6f9d5547a0f8", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/open/char/5.cc", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13c4b877403f5d2a2d407a60682b2b99eeb823a9/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fopen%2Fchar%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13c4b877403f5d2a2d407a60682b2b99eeb823a9/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fopen%2Fchar%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fopen%2Fchar%2F5.cc?ref=13c4b877403f5d2a2d407a60682b2b99eeb823a9", "patch": "@@ -0,0 +1,31 @@\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+#include <fstream>\n+\n+// Test member functions.\n+void test01()\n+{\n+  std::filebuf fb;\n+\n+  const std::string name = \"filebuf_name.txt\";\n+  fb.open(name, std::ios_base::in | std::ios_base::ate);\n+}"}, {"sha": "4b01bd10ef4f1237420e8b2a35854f7cfb32bca8", "filename": "libstdc++-v3/testsuite/27_io/basic_fstream/cons/1.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13c4b877403f5d2a2d407a60682b2b99eeb823a9/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_fstream%2Fcons%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13c4b877403f5d2a2d407a60682b2b99eeb823a9/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_fstream%2Fcons%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_fstream%2Fcons%2F1.cc?ref=13c4b877403f5d2a2d407a60682b2b99eeb823a9", "previous_filename": "libstdc++-v3/testsuite/27_io/basic_fstream/cons/3.cc"}, {"sha": "5b0047aa19d46775f5c626b2a7dca989f7c3966f", "filename": "libstdc++-v3/testsuite/27_io/basic_fstream/cons/char/1.cc", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13c4b877403f5d2a2d407a60682b2b99eeb823a9/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_fstream%2Fcons%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13c4b877403f5d2a2d407a60682b2b99eeb823a9/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_fstream%2Fcons%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_fstream%2Fcons%2Fchar%2F1.cc?ref=13c4b877403f5d2a2d407a60682b2b99eeb823a9", "patch": "@@ -0,0 +1,28 @@\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+#include <fstream>\n+\n+void test01()\n+{\n+  const std::string name = \"fstream_name.txt\";\n+  std::fstream fs(name);\n+}"}, {"sha": "9277339e9808f197a59c23f9a6066084a3981e17", "filename": "libstdc++-v3/testsuite/27_io/basic_fstream/open/char/1.cc", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13c4b877403f5d2a2d407a60682b2b99eeb823a9/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_fstream%2Fopen%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13c4b877403f5d2a2d407a60682b2b99eeb823a9/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_fstream%2Fopen%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_fstream%2Fopen%2Fchar%2F1.cc?ref=13c4b877403f5d2a2d407a60682b2b99eeb823a9", "patch": "@@ -0,0 +1,32 @@\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+#include <fstream>\n+\n+void test01()\n+{\n+  std::fstream fs;\n+\n+  const std::string name = \"fstream_name.txt\";\n+  fs.open(name);\n+\n+  fs.close();\n+}"}, {"sha": "44d3b9d0d795480e1b69927fec552dd9b39049e0", "filename": "libstdc++-v3/testsuite/27_io/basic_ifstream/cons/char/2.cc", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13c4b877403f5d2a2d407a60682b2b99eeb823a9/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ifstream%2Fcons%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13c4b877403f5d2a2d407a60682b2b99eeb823a9/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ifstream%2Fcons%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ifstream%2Fcons%2Fchar%2F2.cc?ref=13c4b877403f5d2a2d407a60682b2b99eeb823a9", "patch": "@@ -0,0 +1,28 @@\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+#include <fstream>\n+\n+void test01()\n+{\n+  const std::string name = \"ifstream_name.txt\";\n+  std::ifstream ifs(name);\n+}"}, {"sha": "21b34fb907cabb696eebfbccc33143914bf0433c", "filename": "libstdc++-v3/testsuite/27_io/basic_ifstream/open/char/2.cc", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13c4b877403f5d2a2d407a60682b2b99eeb823a9/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ifstream%2Fopen%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13c4b877403f5d2a2d407a60682b2b99eeb823a9/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ifstream%2Fopen%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ifstream%2Fopen%2Fchar%2F2.cc?ref=13c4b877403f5d2a2d407a60682b2b99eeb823a9", "patch": "@@ -0,0 +1,32 @@\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+#include <fstream>\n+\n+void test01()\n+{\n+  std::ifstream ifs;\n+\n+  const std::string name = \"ifstream_name.txt\";\n+  ifs.open(name);\n+\n+  ifs.close();\n+}"}, {"sha": "106639c16deb69ae9ff833cf0978ca385e614ba4", "filename": "libstdc++-v3/testsuite/27_io/basic_ofstream/cons/char/1.cc", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13c4b877403f5d2a2d407a60682b2b99eeb823a9/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ofstream%2Fcons%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13c4b877403f5d2a2d407a60682b2b99eeb823a9/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ofstream%2Fcons%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ofstream%2Fcons%2Fchar%2F1.cc?ref=13c4b877403f5d2a2d407a60682b2b99eeb823a9", "patch": "@@ -0,0 +1,51 @@\n+// Copyright (C) 2000, 2001, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 27.8.1.10 ofstream member functions\n+// @require@ %-*.tst\n+// @diff@ %-*.tst %-*.txt\n+\n+// { dg-require-fileio \"\" }\n+\n+#include <ostream>\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+const char name_02[] = \"ofstream_members-1.txt\";\n+\n+// http://gcc.gnu.org/ml/libstdc++/2000-07/msg00004.html\n+void test02()\n+{\n+  bool test __attribute__((unused)) = true;\n+  const int more_than_max_open_files = 8200;\n+  \n+  for(int i = 0; ++i < more_than_max_open_files;)\n+    {\n+      std::ofstream ifs(name_02);\n+      VERIFY( static_cast<bool>(ifs) );\n+    }\n+}\n+\n+int main()\n+{\n+  test02();\n+  return 0;\n+}\n+\n+\n+"}, {"sha": "dc47541eb037dc840d006f86bb892a342303726b", "filename": "libstdc++-v3/testsuite/27_io/basic_ofstream/cons/char/2.cc", "status": "modified", "additions": 6, "deletions": 29, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13c4b877403f5d2a2d407a60682b2b99eeb823a9/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ofstream%2Fcons%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13c4b877403f5d2a2d407a60682b2b99eeb823a9/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ofstream%2Fcons%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ofstream%2Fcons%2Fchar%2F2.cc?ref=13c4b877403f5d2a2d407a60682b2b99eeb823a9", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2000, 2001, 2003 Free Software Foundation, Inc.\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -16,36 +16,13 @@\n // Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n // USA.\n \n-// 27.8.1.10 ofstream member functions\n-// @require@ %-*.tst\n-// @diff@ %-*.tst %-*.txt\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n \n-// { dg-require-fileio \"\" }\n-\n-#include <ostream>\n #include <fstream>\n-#include <testsuite_hooks.h>\n-\n-const char name_02[] = \"ofstream_members-1.txt\";\n-\n-// http://gcc.gnu.org/ml/libstdc++/2000-07/msg00004.html\n-void test02()\n-{\n-  bool test __attribute__((unused)) = true;\n-  const int more_than_max_open_files = 8200;\n-  \n-  for(int i = 0; ++i < more_than_max_open_files;)\n-    {\n-      std::ofstream ifs(name_02);\n-      VERIFY( static_cast<bool>(ifs) );\n-    }\n-}\n \n-int main()\n+void test01()\n {\n-  test02();\n-  return 0;\n+  const std::string name = \"ofstream_name.txt\";\n+  std::ofstream ofs(name);\n }\n-\n-\n-"}, {"sha": "f457c96ff5f9a3990cae0392d5ff18aeef823291", "filename": "libstdc++-v3/testsuite/27_io/basic_ofstream/open/char/2.cc", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13c4b877403f5d2a2d407a60682b2b99eeb823a9/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ofstream%2Fopen%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13c4b877403f5d2a2d407a60682b2b99eeb823a9/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ofstream%2Fopen%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ofstream%2Fopen%2Fchar%2F2.cc?ref=13c4b877403f5d2a2d407a60682b2b99eeb823a9", "patch": "@@ -0,0 +1,32 @@\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+#include <fstream>\n+\n+void test01()\n+{\n+  std::ofstream ofs;\n+\n+  const std::string name = \"ofstream_name.txt\";\n+  ofs.open(name);\n+\n+  ofs.close();\n+}"}]}