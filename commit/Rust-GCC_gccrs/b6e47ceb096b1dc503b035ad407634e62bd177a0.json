{"sha": "b6e47ceb096b1dc503b035ad407634e62bd177a0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjZlNDdjZWIwOTZiMWRjNTAzYjAzNWFkNDA3NjM0ZTYyYmQxNzdhMA==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2005-01-29T18:55:10Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2005-01-29T18:55:10Z"}, "message": "gcse.c (insert_expr_in_table): Revamp handling of available and anticipatable occurrence lists to avoid...\n\n        * gcse.c (insert_expr_in_table): Revamp handling of available\n        and anticipatable occurrence lists to avoid unnecessary list\n        walking.\n        (insert_set_in_table): Similarly.\n\nFrom-SVN: r94413", "tree": {"sha": "a2bcdbd92e2f4f542935cfcb454ae205796cba28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a2bcdbd92e2f4f542935cfcb454ae205796cba28"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b6e47ceb096b1dc503b035ad407634e62bd177a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6e47ceb096b1dc503b035ad407634e62bd177a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6e47ceb096b1dc503b035ad407634e62bd177a0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6e47ceb096b1dc503b035ad407634e62bd177a0/comments", "author": null, "committer": null, "parents": [{"sha": "985aff9c177850b75e1684d42eaeaef06f86318b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/985aff9c177850b75e1684d42eaeaef06f86318b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/985aff9c177850b75e1684d42eaeaef06f86318b"}], "stats": {"total": 89, "additions": 30, "deletions": 59}, "files": [{"sha": "601ef3d95eedd0b72e221d6b1322c28ffe670911", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6e47ceb096b1dc503b035ad407634e62bd177a0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6e47ceb096b1dc503b035ad407634e62bd177a0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b6e47ceb096b1dc503b035ad407634e62bd177a0", "patch": "@@ -1,3 +1,10 @@\n+2005-01-29  Jeff Law  <law@redhat.com>\n+\n+\t* gcse.c (insert_expr_in_table): Revamp handling of available\n+\tand anticipatable occurrence lists to avoid unnecessary list\n+\twalking.\n+\t(insert_set_in_table): Similarly.\n+\n 2005-01-29  Joseph S. Myers  <joseph@codesourcery.com>\n \n \t* c-common.c (fix_string_type): Just use c_build_qualified_type to"}, {"sha": "118959b23931dd574d4fd1b4c2e69388b11b7839", "filename": "gcc/gcse.c", "status": "modified", "additions": 23, "deletions": 59, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6e47ceb096b1dc503b035ad407634e62bd177a0/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6e47ceb096b1dc503b035ad407634e62bd177a0/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=b6e47ceb096b1dc503b035ad407634e62bd177a0", "patch": "@@ -1504,7 +1504,6 @@ insert_expr_in_table (rtx x, enum machine_mode mode, rtx insn, int antic_p,\n   unsigned int hash;\n   struct expr *cur_expr, *last_expr = NULL;\n   struct occr *antic_occr, *avail_occr;\n-  struct occr *last_occr = NULL;\n \n   hash = hash_expr (x, mode, &do_not_record_p, table->size);\n \n@@ -1549,14 +1548,8 @@ insert_expr_in_table (rtx x, enum machine_mode mode, rtx insn, int antic_p,\n     {\n       antic_occr = cur_expr->antic_occr;\n \n-      /* Search for another occurrence in the same basic block.  */\n-      while (antic_occr && BLOCK_NUM (antic_occr->insn) != BLOCK_NUM (insn))\n-\t{\n-\t  /* If an occurrence isn't found, save a pointer to the end of\n-\t     the list.  */\n-\t  last_occr = antic_occr;\n-\t  antic_occr = antic_occr->next;\n-\t}\n+      if (antic_occr && BLOCK_NUM (antic_occr->insn) != BLOCK_NUM (insn))\n+\tantic_occr = NULL;\n \n       if (antic_occr)\n \t/* Found another instance of the expression in the same basic block.\n@@ -1568,52 +1561,34 @@ insert_expr_in_table (rtx x, enum machine_mode mode, rtx insn, int antic_p,\n \t  /* First occurrence of this expression in this basic block.  */\n \t  antic_occr = gcse_alloc (sizeof (struct occr));\n \t  bytes_used += sizeof (struct occr);\n-\t  /* First occurrence of this expression in any block?  */\n-\t  if (cur_expr->antic_occr == NULL)\n-\t    cur_expr->antic_occr = antic_occr;\n-\t  else\n-\t    last_occr->next = antic_occr;\n-\n \t  antic_occr->insn = insn;\n-\t  antic_occr->next = NULL;\n+\t  antic_occr->next = cur_expr->antic_occr;\n \t  antic_occr->deleted_p = 0;\n+\t  cur_expr->antic_occr = antic_occr;\n \t}\n     }\n \n   if (avail_p)\n     {\n       avail_occr = cur_expr->avail_occr;\n \n-      /* Search for another occurrence in the same basic block.  */\n-      while (avail_occr && BLOCK_NUM (avail_occr->insn) != BLOCK_NUM (insn))\n+      if (avail_occr && BLOCK_NUM (avail_occr->insn) == BLOCK_NUM (insn))\n \t{\n-\t  /* If an occurrence isn't found, save a pointer to the end of\n-\t     the list.  */\n-\t  last_occr = avail_occr;\n-\t  avail_occr = avail_occr->next;\n+\t  /* Found another instance of the expression in the same basic block.\n+\t     Prefer this occurrence to the currently recorded one.  We want\n+\t     the last one in the block and the block is scanned from start\n+\t     to end.  */\n+\t  avail_occr->insn = insn;\n \t}\n-\n-      if (avail_occr)\n-\t/* Found another instance of the expression in the same basic block.\n-\t   Prefer this occurrence to the currently recorded one.  We want\n-\t   the last one in the block and the block is scanned from start\n-\t   to end.  */\n-\tavail_occr->insn = insn;\n       else\n \t{\n \t  /* First occurrence of this expression in this basic block.  */\n \t  avail_occr = gcse_alloc (sizeof (struct occr));\n \t  bytes_used += sizeof (struct occr);\n-\n-\t  /* First occurrence of this expression in any block?  */\n-\t  if (cur_expr->avail_occr == NULL)\n-\t    cur_expr->avail_occr = avail_occr;\n-\t  else\n-\t    last_occr->next = avail_occr;\n-\n \t  avail_occr->insn = insn;\n-\t  avail_occr->next = NULL;\n+\t  avail_occr->next = cur_expr->avail_occr;\n \t  avail_occr->deleted_p = 0;\n+\t  cur_expr->avail_occr = avail_occr;\n \t}\n     }\n }\n@@ -1629,7 +1604,7 @@ insert_set_in_table (rtx x, rtx insn, struct hash_table *table)\n   int found;\n   unsigned int hash;\n   struct expr *cur_expr, *last_expr = NULL;\n-  struct occr *cur_occr, *last_occr = NULL;\n+  struct occr *cur_occr;\n \n   gcc_assert (GET_CODE (x) == SET && REG_P (SET_DEST (x)));\n \n@@ -1670,35 +1645,24 @@ insert_set_in_table (rtx x, rtx insn, struct hash_table *table)\n   /* Now record the occurrence.  */\n   cur_occr = cur_expr->avail_occr;\n \n-  /* Search for another occurrence in the same basic block.  */\n-  while (cur_occr && BLOCK_NUM (cur_occr->insn) != BLOCK_NUM (insn))\n+  if (cur_occr && BLOCK_NUM (cur_occr->insn) == BLOCK_NUM (insn))\n     {\n-      /* If an occurrence isn't found, save a pointer to the end of\n-\t the list.  */\n-      last_occr = cur_occr;\n-      cur_occr = cur_occr->next;\n+      /* Found another instance of the expression in the same basic block.\n+\t Prefer this occurrence to the currently recorded one.  We want\n+\t the last one in the block and the block is scanned from start\n+\t to end.  */\n+      cur_occr->insn = insn;\n     }\n-\n-  if (cur_occr)\n-    /* Found another instance of the expression in the same basic block.\n-       Prefer this occurrence to the currently recorded one.  We want the\n-       last one in the block and the block is scanned from start to end.  */\n-    cur_occr->insn = insn;\n   else\n     {\n       /* First occurrence of this expression in this basic block.  */\n       cur_occr = gcse_alloc (sizeof (struct occr));\n       bytes_used += sizeof (struct occr);\n \n-      /* First occurrence of this expression in any block?  */\n-      if (cur_expr->avail_occr == NULL)\n-\tcur_expr->avail_occr = cur_occr;\n-      else\n-\tlast_occr->next = cur_occr;\n-\n-      cur_occr->insn = insn;\n-      cur_occr->next = NULL;\n-      cur_occr->deleted_p = 0;\n+\t  cur_occr->insn = insn;\n+\t  cur_occr->next = cur_expr->avail_occr;\n+\t  cur_occr->deleted_p = 0;\n+\t  cur_expr->avail_occr = cur_occr;\n     }\n }\n "}]}