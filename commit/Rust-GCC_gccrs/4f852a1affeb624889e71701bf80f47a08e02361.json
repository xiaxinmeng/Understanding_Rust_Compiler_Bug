{"sha": "4f852a1affeb624889e71701bf80f47a08e02361", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGY4NTJhMWFmZmViNjI0ODg5ZTcxNzAxYmY4MGY0N2EwOGUwMjM2MQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2015-11-30T11:59:09Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2015-11-30T11:59:09Z"}, "message": "osint.adb: Add use type clause for CRTL.size_t.\n\n\t* osint.adb: Add use type clause for CRTL.size_t.\n\t(C_String_Length): Return CRTL.size_t instead of Integer.\n\t(To_Path_String_Access): Take CRTL.size_t instead of Integer.\n\t(Get_Libraries_From_Registry): Use CRTL throughout.\n\t(To_Canonical_Dir_Spec): Use CRTL.size_t instead of Integer.\n\t(To_Canonical_File_List): Likewise.\n\t(To_Canonical_File_Spec): Likewise.\n\t(To_Canonical_Path_Spec): Likewise.\n\t(To_Host_Dir_Spec): Likewise.\n\t(To_Host_File_Spec): Likewise.\n\t(Update_Path): Use CRTL throughout.\n\t* s-shasto.adb: Add with clause for System.CRTL.\n\t(Initialize): Rename CRTL.strncpy instead of importing it manually.\n\nFrom-SVN: r231066", "tree": {"sha": "37fbde562366c9bfedea43f92975a43268784e0d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/37fbde562366c9bfedea43f92975a43268784e0d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4f852a1affeb624889e71701bf80f47a08e02361", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f852a1affeb624889e71701bf80f47a08e02361", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f852a1affeb624889e71701bf80f47a08e02361", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f852a1affeb624889e71701bf80f47a08e02361/comments", "author": null, "committer": null, "parents": [{"sha": "2056c5ede5306b0a0ad948d8409c5f7484ee65bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2056c5ede5306b0a0ad948d8409c5f7484ee65bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2056c5ede5306b0a0ad948d8409c5f7484ee65bf"}], "stats": {"total": 100, "additions": 52, "deletions": 48}, "files": [{"sha": "eb00a33a122b5143b6d7262684770dbd547f60fb", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f852a1affeb624889e71701bf80f47a08e02361/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f852a1affeb624889e71701bf80f47a08e02361/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=4f852a1affeb624889e71701bf80f47a08e02361", "patch": "@@ -1,3 +1,19 @@\n+2015-11-30  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* osint.adb: Add use type clause for CRTL.size_t.\n+\t(C_String_Length): Return CRTL.size_t instead of Integer.\n+\t(To_Path_String_Access): Take CRTL.size_t instead of Integer.\n+\t(Get_Libraries_From_Registry): Use CRTL throughout.\n+\t(To_Canonical_Dir_Spec): Use CRTL.size_t instead of Integer.\n+\t(To_Canonical_File_List): Likewise.\n+\t(To_Canonical_File_Spec): Likewise.\n+\t(To_Canonical_Path_Spec): Likewise.\n+\t(To_Host_Dir_Spec): Likewise.\n+\t(To_Host_File_Spec): Likewise.\n+\t(Update_Path): Use CRTL throughout.\n+\t* s-shasto.adb: Add with clause for System.CRTL.\n+\t(Initialize): Rename CRTL.strncpy instead of importing it manually.\n+\n 2015-11-30  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/gigi.h (create_var_decl): Adjust prototype."}, {"sha": "dbb438c3c136253dff8cd8be2be947146eb2c63a", "filename": "gcc/ada/osint.adb", "status": "modified", "additions": 25, "deletions": 40, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f852a1affeb624889e71701bf80f47a08e02361/gcc%2Fada%2Fosint.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f852a1affeb624889e71701bf80f47a08e02361/gcc%2Fada%2Fosint.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fosint.adb?ref=4f852a1affeb624889e71701bf80f47a08e02361", "patch": "@@ -46,6 +46,8 @@ with GNAT.HTable;\n \n package body Osint is\n \n+   use type CRTL.size_t;\n+\n    Running_Program : Program_Type := Unspecified;\n    --  comment required here ???\n \n@@ -135,12 +137,12 @@ package body Osint is\n    --  A version of Smart_Find_File that also returns a cache of the file\n    --  attributes for later reuse\n \n-   function C_String_Length (S : Address) return Integer;\n+   function C_String_Length (S : Address) return CRTL.size_t;\n    --  Returns length of a C string (zero for a null address)\n \n    function To_Path_String_Access\n      (Path_Addr : Address;\n-      Path_Len  : Integer) return String_Access;\n+      Path_Len  : CRTL.size_t) return String_Access;\n    --  Converts a C String to an Ada String. Are we doing this to avoid withing\n    --  Interfaces.C.Strings ???\n    --  Caller must free result.\n@@ -419,27 +421,18 @@ package body Osint is\n          pragma Import (C, C_Get_Libraries_From_Registry,\n                         \"__gnat_get_libraries_from_registry\");\n \n-         function Strlen (Str : Address) return Integer;\n-         pragma Import (C, Strlen, \"strlen\");\n-\n-         procedure Strncpy (X : Address; Y : Address; Length : Integer);\n-         pragma Import (C, Strncpy, \"strncpy\");\n-\n-         procedure C_Free (Str : Address);\n-         pragma Import (C, C_Free, \"free\");\n-\n          Result_Ptr    : Address;\n-         Result_Length : Integer;\n+         Result_Length : CRTL.size_t;\n          Out_String    : String_Ptr;\n \n       begin\n          Result_Ptr := C_Get_Libraries_From_Registry;\n-         Result_Length := Strlen (Result_Ptr);\n+         Result_Length := CRTL.strlen (Result_Ptr);\n \n-         Out_String := new String (1 .. Result_Length);\n-         Strncpy (Out_String.all'Address, Result_Ptr, Result_Length);\n+         Out_String := new String (1 .. Integer (Result_Length));\n+         CRTL.strncpy (Out_String.all'Address, Result_Ptr, Result_Length);\n \n-         C_Free (Result_Ptr);\n+         CRTL.free (Result_Ptr);\n \n          return Out_String;\n       end Get_Libraries_From_Registry;\n@@ -673,14 +666,12 @@ package body Osint is\n    -- C_String_Length --\n    ---------------------\n \n-   function C_String_Length (S : Address) return Integer is\n-      function Strlen (S : Address) return Integer;\n-      pragma Import (C, Strlen, \"strlen\");\n+   function C_String_Length (S : Address) return CRTL.size_t is\n    begin\n       if S = Null_Address then\n          return 0;\n       else\n-         return Strlen (S);\n+         return CRTL.strlen (S);\n       end if;\n    end C_String_Length;\n \n@@ -2959,7 +2950,7 @@ package body Osint is\n \n       C_Host_Dir         : String (1 .. Host_Dir'Length + 1);\n       Canonical_Dir_Addr : Address;\n-      Canonical_Dir_Len  : Integer;\n+      Canonical_Dir_Len  : CRTL.size_t;\n \n    begin\n       C_Host_Dir (1 .. Host_Dir'Length) := Host_Dir;\n@@ -3023,7 +3014,7 @@ package body Osint is\n       declare\n          Canonical_File_List : String_Access_List (1 .. Num_Files);\n          Canonical_File_Addr : Address;\n-         Canonical_File_Len  : Integer;\n+         Canonical_File_Len  : CRTL.size_t;\n \n       begin\n          --  Retrieve the expanded directory names and build the list\n@@ -3056,7 +3047,7 @@ package body Osint is\n \n       C_Host_File         : String (1 .. Host_File'Length + 1);\n       Canonical_File_Addr : Address;\n-      Canonical_File_Len  : Integer;\n+      Canonical_File_Len  : CRTL.size_t;\n \n    begin\n       C_Host_File (1 .. Host_File'Length) := Host_File;\n@@ -3091,7 +3082,7 @@ package body Osint is\n \n       C_Host_Path         : String (1 .. Host_Path'Length + 1);\n       Canonical_Path_Addr : Address;\n-      Canonical_Path_Len  : Integer;\n+      Canonical_Path_Len  : CRTL.size_t;\n \n    begin\n       C_Host_Path (1 .. Host_Path'Length) := Host_Path;\n@@ -3126,7 +3117,7 @@ package body Osint is\n \n       C_Canonical_Dir : String (1 .. Canonical_Dir'Length + 1);\n       Host_Dir_Addr   : Address;\n-      Host_Dir_Len    : Integer;\n+      Host_Dir_Len    : CRTL.size_t;\n \n    begin\n       C_Canonical_Dir (1 .. Canonical_Dir'Length) := Canonical_Dir;\n@@ -3158,7 +3149,7 @@ package body Osint is\n \n       C_Canonical_File      : String (1 .. Canonical_File'Length + 1);\n       Host_File_Addr : Address;\n-      Host_File_Len  : Integer;\n+      Host_File_Len  : CRTL.size_t;\n \n    begin\n       C_Canonical_File (1 .. Canonical_File'Length) := Canonical_File;\n@@ -3181,9 +3172,9 @@ package body Osint is\n \n    function To_Path_String_Access\n      (Path_Addr : Address;\n-      Path_Len  : Integer) return String_Access\n+      Path_Len  : CRTL.size_t) return String_Access\n    is\n-      subtype Path_String is String (1 .. Path_Len);\n+      subtype Path_String is String (1 .. Integer (Path_Len));\n       type Path_String_Access is access Path_String;\n \n       function Address_To_Access is new\n@@ -3196,9 +3187,9 @@ package body Osint is\n       Return_Val : String_Access;\n \n    begin\n-      Return_Val := new String (1 .. Path_Len);\n+      Return_Val := new String (1 .. Integer (Path_Len));\n \n-      for J in 1 .. Path_Len loop\n+      for J in 1 .. Integer (Path_Len) loop\n          Return_Val (J) := Path_Access (J);\n       end loop;\n \n@@ -3214,27 +3205,21 @@ package body Osint is\n       function C_Update_Path (Path, Component : Address) return Address;\n       pragma Import (C, C_Update_Path, \"update_path\");\n \n-      function Strlen (Str : Address) return Integer;\n-      pragma Import (C, Strlen, \"strlen\");\n-\n-      procedure Strncpy (X : Address; Y : Address; Length : Integer);\n-      pragma Import (C, Strncpy, \"strncpy\");\n-\n       In_Length      : constant Integer := Path'Length;\n       In_String      : String (1 .. In_Length + 1);\n       Component_Name : aliased String := \"GCC\" & ASCII.NUL;\n       Result_Ptr     : Address;\n-      Result_Length  : Integer;\n+      Result_Length  : CRTL.size_t;\n       Out_String     : String_Ptr;\n \n    begin\n       In_String (1 .. In_Length) := Path.all;\n       In_String (In_Length + 1) := ASCII.NUL;\n       Result_Ptr := C_Update_Path (In_String'Address, Component_Name'Address);\n-      Result_Length := Strlen (Result_Ptr);\n+      Result_Length := CRTL.strlen (Result_Ptr);\n \n-      Out_String := new String (1 .. Result_Length);\n-      Strncpy (Out_String.all'Address, Result_Ptr, Result_Length);\n+      Out_String := new String (1 .. Integer (Result_Length));\n+      CRTL.strncpy (Out_String.all'Address, Result_Ptr, Result_Length);\n       return Out_String;\n    end Update_Path;\n "}, {"sha": "38787ccf2bccf01003bc2cd0f0fbfa3159d69a4b", "filename": "gcc/ada/s-shasto.adb", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f852a1affeb624889e71701bf80f47a08e02361/gcc%2Fada%2Fs-shasto.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f852a1affeb624889e71701bf80f47a08e02361/gcc%2Fada%2Fs-shasto.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-shasto.adb?ref=4f852a1affeb624889e71701bf80f47a08e02361", "patch": "@@ -37,6 +37,7 @@ with System.Global_Locks;\n with System.Soft_Links;\n \n with System;\n+with System.CRTL;\n with System.File_Control_Block;\n with System.File_IO;\n with System.HTable;\n@@ -270,24 +271,26 @@ package body System.Shared_Storage is\n       procedure Get_Env_Value_Ptr (Name, Length, Ptr : Address);\n       pragma Import (C, Get_Env_Value_Ptr, \"__gnat_getenv\");\n \n-      procedure Strncpy (Astring_Addr, Cstring : Address; N : Integer);\n-      pragma Import (C, Strncpy, \"strncpy\");\n+      subtype size_t is CRTL.size_t;\n+\n+      procedure Strncpy (dest, src : System.Address; n : size_t)\n+        renames CRTL.strncpy;\n \n       Dir_Name : aliased constant String :=\n                    \"SHARED_MEMORY_DIRECTORY\" & ASCII.NUL;\n \n-      Env_Value_Ptr    : aliased Address;\n-      Env_Value_Length : aliased Integer;\n+      Env_Value_Ptr : aliased Address;\n+      Env_Value_Len : aliased Integer;\n \n    begin\n       if Dir = null then\n          Get_Env_Value_Ptr\n-           (Dir_Name'Address, Env_Value_Length'Address, Env_Value_Ptr'Address);\n+           (Dir_Name'Address, Env_Value_Len'Address, Env_Value_Ptr'Address);\n \n-         Dir := new String (1 .. Env_Value_Length);\n+         Dir := new String (1 .. Env_Value_Len);\n \n-         if Env_Value_Length > 0 then\n-            Strncpy (Dir.all'Address, Env_Value_Ptr, Env_Value_Length);\n+         if Env_Value_Len > 0 then\n+            Strncpy (Dir.all'Address, Env_Value_Ptr, size_t (Env_Value_Len));\n          end if;\n \n          System.Global_Locks.Create_Lock (Global_Lock, Dir.all & \"__lock\");"}]}