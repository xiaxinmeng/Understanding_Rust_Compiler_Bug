{"sha": "99f97947832b35ee949d5779faa3f6377c63349d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTlmOTc5NDc4MzJiMzVlZTk0OWQ1Nzc5ZmFhM2Y2Mzc3YzYzMzQ5ZA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-10-15T10:29:47Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-10-15T10:29:47Z"}, "message": "[multiple changes]\n\n2013-10-15  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_prag.adb, exp_ch11.adb, a-except-2005.adb, a-except-2005.ads:\n\tMinor reformatting.\n\n2013-10-15  Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* targparm.ads: Fix minor typo in comment.\n\n2013-10-15  Ed Schonberg  <schonberg@adacore.com>\n\n\t* lib-xref.adb: handle full views that are derived from private\n\ttypes.\n\t* sem_util.adb (Build_Elaboration_Entity): Do nothing in ASIS\n\tmode: the elaboration entity is not in the source, and plays no\n\trole in semantic analysis.  Minor reformatting.\n\nFrom-SVN: r203594", "tree": {"sha": "958292cf8cae13fae95f12df2bcb8c21cd279461", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/958292cf8cae13fae95f12df2bcb8c21cd279461"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/99f97947832b35ee949d5779faa3f6377c63349d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99f97947832b35ee949d5779faa3f6377c63349d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99f97947832b35ee949d5779faa3f6377c63349d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99f97947832b35ee949d5779faa3f6377c63349d/comments", "author": null, "committer": null, "parents": [{"sha": "b9ec846384e6908fe4d9aff0703c5ae320d3f366", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9ec846384e6908fe4d9aff0703c5ae320d3f366", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9ec846384e6908fe4d9aff0703c5ae320d3f366"}], "stats": {"total": 83, "additions": 60, "deletions": 23}, "files": [{"sha": "babf48562a51dde86882619cb8fc485e2e0f7643", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99f97947832b35ee949d5779faa3f6377c63349d/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99f97947832b35ee949d5779faa3f6377c63349d/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=99f97947832b35ee949d5779faa3f6377c63349d", "patch": "@@ -1,3 +1,20 @@\n+2013-10-15  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_prag.adb, exp_ch11.adb, a-except-2005.adb, a-except-2005.ads:\n+\tMinor reformatting.\n+\n+2013-10-15  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* targparm.ads: Fix minor typo in comment.\n+\n+2013-10-15  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* lib-xref.adb: handle full views that are derived from private\n+\ttypes.\n+\t* sem_util.adb (Build_Elaboration_Entity): Do nothing in ASIS\n+\tmode: the elaboration entity is not in the source, and plays no\n+\trole in semantic analysis.  Minor reformatting.\n+\n 2013-10-15  Tristan Gingold  <gingold@adacore.com>\n \n \t* adaint.c (__gnat_get_executable_load_address): Remove AIX"}, {"sha": "b47f167be77ce32b26a290a3b522ad99763d64a1", "filename": "gcc/ada/a-except-2005.adb", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99f97947832b35ee949d5779faa3f6377c63349d/gcc%2Fada%2Fa-except-2005.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99f97947832b35ee949d5779faa3f6377c63349d/gcc%2Fada%2Fa-except-2005.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-except-2005.adb?ref=99f97947832b35ee949d5779faa3f6377c63349d", "patch": "@@ -865,8 +865,9 @@ package body Ada.Exceptions is\n    -- Get_Exception_Machine_Occurrence --\n    --------------------------------------\n \n-   function Get_Exception_Machine_Occurrence (X : Exception_Occurrence)\n-                                             return System.Address is\n+   function Get_Exception_Machine_Occurrence\n+     (X : Exception_Occurrence) return System.Address\n+   is\n    begin\n       return X.Machine_Occurrence;\n    end Get_Exception_Machine_Occurrence;"}, {"sha": "ca4ff9f9e17efd43256a90b6f12352933299ca12", "filename": "gcc/ada/a-except-2005.ads", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99f97947832b35ee949d5779faa3f6377c63349d/gcc%2Fada%2Fa-except-2005.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99f97947832b35ee949d5779faa3f6377c63349d/gcc%2Fada%2Fa-except-2005.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-except-2005.ads?ref=99f97947832b35ee949d5779faa3f6377c63349d", "patch": "@@ -333,10 +333,10 @@ private\n    --  this, and it would not work right, because of the Msg and Tracebacks\n    --  fields which have unused entries not copied by Save_Occurrence.\n \n-   function Get_Exception_Machine_Occurrence (X : Exception_Occurrence)\n-                                             return System.Address;\n+   function Get_Exception_Machine_Occurrence\n+     (X : Exception_Occurrence) return System.Address;\n    pragma Export (Ada, Get_Exception_Machine_Occurrence,\n-                    \"__gnat_get_exception_machine_occurrence\");\n+                  \"__gnat_get_exception_machine_occurrence\");\n    --  Get the machine occurrence corresponding to an exception occurrence.\n    --  It is Null_Address if there is no machine occurrence (in runtimes that\n    --  doesn't use GCC mechanism) or if it has been lost (Save_Occurrence"}, {"sha": "8ad30192e8d45b1f7bd0d6ca1219a7231f48225b", "filename": "gcc/ada/exp_ch11.adb", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99f97947832b35ee949d5779faa3f6377c63349d/gcc%2Fada%2Fexp_ch11.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99f97947832b35ee949d5779faa3f6377c63349d/gcc%2Fada%2Fexp_ch11.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch11.adb?ref=99f97947832b35ee949d5779faa3f6377c63349d", "patch": "@@ -1030,7 +1030,7 @@ package body Exp_Ch11 is\n \n                if Present (Choice_Parameter (Handler))\n                  and then (Exception_Mechanism /= Back_End_Exceptions\n-                           or else CodePeer_Mode)\n+                            or else CodePeer_Mode)\n                then\n                   declare\n                      Cparm : constant Entity_Id  := Choice_Parameter (Handler);\n@@ -1039,9 +1039,8 @@ package body Exp_Ch11 is\n                      Save  : Node_Id;\n \n                   begin\n-                     --  Note use of No_Location to hide this code from the\n-                     --  debugger, so single stepping doesn't jump back and\n-                     --  forth.\n+                     --  Note: No_Location used to hide code from the debugger,\n+                     --  so single stepping doesn't jump back and forth.\n \n                      Save :=\n                        Make_Procedure_Call_Statement (No_Location,\n@@ -1051,12 +1050,14 @@ package body Exp_Ch11 is\n                          Parameter_Associations => New_List (\n                            New_Occurrence_Of (Cparm, No_Location),\n                            Make_Explicit_Dereference (No_Location,\n-                             Make_Function_Call (No_Location,\n-                               Name =>\n-                                 Make_Explicit_Dereference (No_Location,\n-                                   New_Occurrence_Of\n-                                     (RTE (RE_Get_Current_Excep),\n-                                      No_Location))))));\n+                             Prefix =>\n+                               Make_Function_Call (No_Location,\n+                                 Name =>\n+                                   Make_Explicit_Dereference (No_Location,\n+                                     Prefix =>\n+                                       New_Occurrence_Of\n+                                         (RTE (RE_Get_Current_Excep),\n+                                          No_Location))))));\n \n                      Mark_Rewrite_Insertion (Save);\n                      Prepend (Save, Statements (Handler));"}, {"sha": "972d9637b7422ab872addfa076ac8657f13d3969", "filename": "gcc/ada/lib-xref.adb", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99f97947832b35ee949d5779faa3f6377c63349d/gcc%2Fada%2Flib-xref.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99f97947832b35ee949d5779faa3f6377c63349d/gcc%2Fada%2Flib-xref.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-xref.adb?ref=99f97947832b35ee949d5779faa3f6377c63349d", "patch": "@@ -1307,9 +1307,23 @@ package body Lib.Xref is\n                         Right := '>';\n                      end if;\n \n-                  --  If non-derived ptr, get directly designated type.\n+                  --  If the completion of a private type is itself a derived\n+                  --  type, we need the parent of the full view.\n+\n+                  elsif Is_Private_Type (Tref)\n+                    and then Present (Full_View (Tref))\n+                    and then Etype (Full_View (Tref)) /= Full_View (Tref)\n+                  then\n+                     Tref := Etype (Full_View (Tref));\n+\n+                     if Left /= '(' then\n+                        Left := '<';\n+                        Right := '>';\n+                     end if;\n+\n+                  --  If non-derived pointer, get directly designated type.\n                   --  If the type has a full view, all references are on the\n-                  --  partial view, that is seen first.\n+                  --  partial view that is seen first.\n \n                   elsif Is_Access_Type (Tref) then\n                      Tref := Directly_Designated_Type (Tref);"}, {"sha": "48aa1ac09528e76292ba66a94cb83c50e1f2e3e8", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99f97947832b35ee949d5779faa3f6377c63349d/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99f97947832b35ee949d5779faa3f6377c63349d/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=99f97947832b35ee949d5779faa3f6377c63349d", "patch": "@@ -2366,8 +2366,7 @@ package body Sem_Prag is\n                      elsif Contains (Inputs_Seen, Input_Id) then\n                         Error_Msg_N (\"duplicate input item\", Input);\n \n-                     --  The input is legal, add it to the list of processed\n-                     --  inputs.\n+                     --  Input is legal, add it to the list of processed inputs\n \n                      else\n                         Add_Item (Input_Id, Inputs_Seen);\n@@ -2408,7 +2407,6 @@ package body Sem_Prag is\n          while Present (Elmt) loop\n             if Name_Seen then\n                Error_Msg_N (\"only one item allowed in initialization\", Elmt);\n-\n             else\n                Name_Seen := True;\n                Analyze_Initialization_Item (Elmt);\n@@ -2424,7 +2422,6 @@ package body Sem_Prag is\n                Input := First (Expressions (Inputs));\n                while Present (Input) loop\n                   Analyze_Input_Item (Input);\n-\n                   Next (Input);\n                end loop;\n             end if;"}, {"sha": "a938f0ae34445a5ad9136f6e15f7ac36cd1453d8", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99f97947832b35ee949d5779faa3f6377c63349d/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99f97947832b35ee949d5779faa3f6377c63349d/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=99f97947832b35ee949d5779faa3f6377c63349d", "patch": "@@ -423,7 +423,7 @@ package body Sem_Util is\n \n          Decl := First\n                    (Visible_Declarations\n-                     (Specification (Unit_Declaration_Node (Current_Scope))));\n+                     (Package_Specification (Current_Scope)));\n          while Present (Decl) loop\n             if Nkind (Decl) = N_Private_Extension_Declaration\n               and then Defining_Entity (Decl) = Typ\n@@ -1169,6 +1169,13 @@ package body Sem_Util is\n          return;\n       end if;\n \n+      --  Ignore in ASIS mode, elaboration entity is not in source and plays\n+      --  no role in analysis.\n+\n+      if ASIS_Mode then\n+         return;\n+      end if;\n+\n       --  Construct name of elaboration entity as xxx_E, where xxx is the unit\n       --  name with dots replaced by double underscore. We have to manually\n       --  construct this name, since it will be elaborated in the outer scope,"}, {"sha": "c3cace3c559c35feec0092459cfc5b112cb920ff", "filename": "gcc/ada/targparm.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99f97947832b35ee949d5779faa3f6377c63349d/gcc%2Fada%2Ftargparm.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99f97947832b35ee949d5779faa3f6377c63349d/gcc%2Fada%2Ftargparm.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftargparm.ads?ref=99f97947832b35ee949d5779faa3f6377c63349d", "patch": "@@ -402,7 +402,7 @@ package Targparm is\n    --  appropriate default in some cases, e.g. on embedded targets which do not\n    --  allow the possibility of multi-processors. The default can be overridden\n    --  using pragmas Enable/Disable_Atomic_Synchronization and also by use of\n-   --  the debug flags gnat.d and gnatd.e.\n+   --  the corresponding debug flags -gnatd.e and -gnatd.d.\n \n    Support_Aggregates_On_Target : Boolean := True;\n    --  In the general case, the use of aggregates may generate calls"}]}