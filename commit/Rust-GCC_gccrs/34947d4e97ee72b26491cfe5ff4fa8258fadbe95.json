{"sha": "34947d4e97ee72b26491cfe5ff4fa8258fadbe95", "node_id": "C_kwDOANBUbNoAKDM0OTQ3ZDRlOTdlZTcyYjI2NDkxY2ZlNWZmNGZhODI1OGZhZGJlOTU", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-09-24T16:36:26Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-09-24T16:36:26Z"}, "message": "real: fix encoding of negative IEEE double/quad values [PR98216]\n\nIn encode_ieee_double/quad, the assignment\n\n  unsigned long WORD = r->sign << 31;\n\nis intended to set the 31st bit of WORD whenever the sign bit is set.\nBut on LP64 hosts it also unintentionally sets the upper 32 bits of WORD,\nbecause r->sign gets promoted from unsigned:1 to int and then the result\nof the shift (equal to INT_MIN) gets sign extended from int to long.\n\nIn the C++ frontend, this bug causes incorrect mangling of negative\nfloating point values because the output of real_to_target called from\nwrite_real_cst unexpectedly has the upper 32 bits of this word set,\nwhich the caller doesn't mask out.\n\nThis patch fixes this by avoiding the unwanted sign extension.  Note\nthat r0-53976 fixed the same bug in encode_ieee_single long ago.\n\n\tPR c++/98216\n\tPR c++/91292\n\ngcc/ChangeLog:\n\n\t* real.c (encode_ieee_double): Avoid unwanted sign extension.\n\t(encode_ieee_quad): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp2a/nontype-float2.C: New test.", "tree": {"sha": "d9e40c8584fc2f9fe1bf22ff154e4eac8f497027", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d9e40c8584fc2f9fe1bf22ff154e4eac8f497027"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/34947d4e97ee72b26491cfe5ff4fa8258fadbe95", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34947d4e97ee72b26491cfe5ff4fa8258fadbe95", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34947d4e97ee72b26491cfe5ff4fa8258fadbe95", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34947d4e97ee72b26491cfe5ff4fa8258fadbe95/comments", "author": null, "committer": null, "parents": [{"sha": "51ca05031959d3accffe873e87d4bc4fbd22e9e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51ca05031959d3accffe873e87d4bc4fbd22e9e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51ca05031959d3accffe873e87d4bc4fbd22e9e9"}], "stats": {"total": 20, "additions": 18, "deletions": 2}, "files": [{"sha": "8c7a47a69e659338a96446ab5119a71e619c0ac0", "filename": "gcc/real.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34947d4e97ee72b26491cfe5ff4fa8258fadbe95/gcc%2Freal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34947d4e97ee72b26491cfe5ff4fa8258fadbe95/gcc%2Freal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.c?ref=34947d4e97ee72b26491cfe5ff4fa8258fadbe95", "patch": "@@ -3150,9 +3150,10 @@ encode_ieee_double (const struct real_format *fmt, long *buf,\n \t\t    const REAL_VALUE_TYPE *r)\n {\n   unsigned long image_lo, image_hi, sig_lo, sig_hi, exp;\n+  unsigned long sign = r->sign;\n   bool denormal = (r->sig[SIGSZ-1] & SIG_MSB) == 0;\n \n-  image_hi = r->sign << 31;\n+  image_hi = sign << 31;\n   image_lo = 0;\n \n   if (HOST_BITS_PER_LONG == 64)\n@@ -3938,10 +3939,11 @@ encode_ieee_quad (const struct real_format *fmt, long *buf,\n \t\t  const REAL_VALUE_TYPE *r)\n {\n   unsigned long image3, image2, image1, image0, exp;\n+  unsigned long sign = r->sign;\n   bool denormal = (r->sig[SIGSZ-1] & SIG_MSB) == 0;\n   REAL_VALUE_TYPE u;\n \n-  image3 = r->sign << 31;\n+  image3 = sign << 31;\n   image2 = 0;\n   image1 = 0;\n   image0 = 0;"}, {"sha": "40b42b923eca824861ab1e0cef73dc9309c32cfc", "filename": "gcc/testsuite/g++.dg/cpp2a/nontype-float2.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34947d4e97ee72b26491cfe5ff4fa8258fadbe95/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fnontype-float2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34947d4e97ee72b26491cfe5ff4fa8258fadbe95/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fnontype-float2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fnontype-float2.C?ref=34947d4e97ee72b26491cfe5ff4fa8258fadbe95", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/98216\n+// PR c++/91292\n+// { dg-do compile { target c++20 } }\n+\n+template<auto> void f() { }\n+\n+template void f<-1.0f>();\n+template void f<-2.0f>();\n+\n+template void f<-1.0>();\n+template void f<-2.0>();\n+\n+template void f<-1.0L>();\n+template void f<-2.0L>();"}]}