{"sha": "5275f3e54604ae1e7143cd32d2cd45eae53b5d19", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTI3NWYzZTU0NjA0YWUxZTcxNDNjZDMyZDJjZDQ1ZWFlNTNiNWQxOQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely.gcc@gmail.com", "date": "2013-11-09T12:38:00Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2013-11-09T12:38:00Z"}, "message": "re PR libstdc++/58982 (std::vector<std::atomic<int>> vai(10); does not compile anymore)\n\n\tPR libstdc++/58982\n\t* include/bits/stl_algobase.h (__copy_move::__copy_m): Use assertion\n\tto prevent using memmove() on non-assignable types.\n\t(__copy_move_backward::__copy_move_b): Likewise.\n\t* include/bits/stl_uninitialized.h (uninitialized_copy\n\tuninitialized_copy_n, uninitialized_fill, uninitialized_fill_n,\n\t__uninitialized_default, __uninitialized_default_n): Check for\n\tassignable as well as trivial.\n\t* testsuite/20_util/specialized_algorithms/uninitialized_copy/\n\t58982.cc: New.\n\t* testsuite/20_util/specialized_algorithms/uninitialized_copy_n/\n\t58982.cc: New.\n\t* testsuite/20_util/specialized_algorithms/uninitialized_fill/\n\t58982.cc: New.\n\t* testsuite/20_util/specialized_algorithms/uninitialized_fill_n/\n\t58982.cc: New.\n\t* testsuite/25_algorithms/copy/58982.cc: New.\n\t* testsuite/25_algorithms/copy_n/58982.cc: New.\n\nFrom-SVN: r204615", "tree": {"sha": "02a44fb906ee33f23c3474e42a2d8281b25b50ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/02a44fb906ee33f23c3474e42a2d8281b25b50ed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5275f3e54604ae1e7143cd32d2cd45eae53b5d19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5275f3e54604ae1e7143cd32d2cd45eae53b5d19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5275f3e54604ae1e7143cd32d2cd45eae53b5d19", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5275f3e54604ae1e7143cd32d2cd45eae53b5d19/comments", "author": null, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d0216c8b79931cffcc5599b8a9a4f6eaf86d2b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d0216c8b79931cffcc5599b8a9a4f6eaf86d2b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d0216c8b79931cffcc5599b8a9a4f6eaf86d2b7"}], "stats": {"total": 317, "additions": 311, "deletions": 6}, "files": [{"sha": "2244435322d7052387c0a0ed06fd84ccb9f8ed20", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5275f3e54604ae1e7143cd32d2cd45eae53b5d19/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5275f3e54604ae1e7143cd32d2cd45eae53b5d19/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=5275f3e54604ae1e7143cd32d2cd45eae53b5d19", "patch": "@@ -1,3 +1,24 @@\n+2013-11-09  Jonathan Wakely  <jwakely.gcc@gmail.com>\n+\n+\tPR libstdc++/58982\n+\t* include/bits/stl_algobase.h (__copy_move::__copy_m): Use assertion\n+\tto prevent using memmove() on non-assignable types.\n+\t(__copy_move_backward::__copy_move_b): Likewise.\n+\t* include/bits/stl_uninitialized.h (uninitialized_copy\n+\tuninitialized_copy_n, uninitialized_fill, uninitialized_fill_n,\n+\t__uninitialized_default, __uninitialized_default_n): Check for\n+\tassignable as well as trivial.\n+\t* testsuite/20_util/specialized_algorithms/uninitialized_copy/\n+\t58982.cc: New.\n+\t* testsuite/20_util/specialized_algorithms/uninitialized_copy_n/\n+\t58982.cc: New.\n+\t* testsuite/20_util/specialized_algorithms/uninitialized_fill/\n+\t58982.cc: New.\n+\t* testsuite/20_util/specialized_algorithms/uninitialized_fill_n/\n+\t58982.cc: New.\n+\t* testsuite/25_algorithms/copy/58982.cc: New.\n+\t* testsuite/25_algorithms/copy_n/58982.cc: New.\n+\n 2013-11-08  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n \n \t* include/debug/safe_iterator.h (_BeforeBeginHelper<>::_S_Is):"}, {"sha": "5c7db5b82697d76c31406845f663dec7f6ab182b", "filename": "libstdc++-v3/include/bits/stl_algobase.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5275f3e54604ae1e7143cd32d2cd45eae53b5d19/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5275f3e54604ae1e7143cd32d2cd45eae53b5d19/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h?ref=5275f3e54604ae1e7143cd32d2cd45eae53b5d19", "patch": "@@ -368,6 +368,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         static _Tp*\n         __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)\n         {\n+#if __cplusplus >= 201103L\n+\t  // trivial types can have deleted assignment\n+\t  static_assert( is_copy_assignable<_Tp>::value,\n+\t                 \"type is not assignable\" );\n+#endif\n \t  const ptrdiff_t _Num = __last - __first;\n \t  if (_Num)\n \t    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);\n@@ -563,6 +568,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         static _Tp*\n         __copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)\n         {\n+#if __cplusplus >= 201103L\n+\t  // trivial types can have deleted assignment\n+\t  static_assert( is_copy_assignable<_Tp>::value,\n+\t                 \"type is not assignable\" );\n+#endif\n \t  const ptrdiff_t _Num = __last - __first;\n \t  if (_Num)\n \t    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);"}, {"sha": "e45046b499911fd4585071b7093ab77bbbcc2c09", "filename": "libstdc++-v3/include/bits/stl_uninitialized.h", "status": "modified", "additions": 32, "deletions": 6, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5275f3e54604ae1e7143cd32d2cd45eae53b5d19/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5275f3e54604ae1e7143cd32d2cd45eae53b5d19/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h?ref=5275f3e54604ae1e7143cd32d2cd45eae53b5d19", "patch": "@@ -111,9 +111,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t_ValueType1;\n       typedef typename iterator_traits<_ForwardIterator>::value_type\n \t_ValueType2;\n+#if __cplusplus < 201103L\n+      const bool __assignable = true;\n+#else\n+      // trivial types can have deleted assignment\n+      typedef typename iterator_traits<_InputIterator>::reference _RefType;\n+      const bool __assignable = is_assignable<_ValueType1, _RefType>::value;\n+#endif\n \n-      return std::__uninitialized_copy<(__is_trivial(_ValueType1)\n-\t\t\t\t\t&& __is_trivial(_ValueType2))>::\n+      return std::__uninitialized_copy<__is_trivial(_ValueType1)\n+\t\t\t\t       && __is_trivial(_ValueType2)\n+\t\t\t\t       && __assignable>::\n \t__uninit_copy(__first, __last, __result);\n     }\n \n@@ -166,8 +174,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       typedef typename iterator_traits<_ForwardIterator>::value_type\n \t_ValueType;\n+#if __cplusplus < 201103L\n+      const bool __assignable = true;\n+#else\n+      // trivial types can have deleted assignment\n+      const bool __assignable = is_copy_assignable<_ValueType>::value;\n+#endif\n \n-      std::__uninitialized_fill<__is_trivial(_ValueType)>::\n+      std::__uninitialized_fill<__is_trivial(_ValueType) && __assignable>::\n \t__uninit_fill(__first, __last, __x);\n     }\n \n@@ -219,8 +233,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       typedef typename iterator_traits<_ForwardIterator>::value_type\n \t_ValueType;\n+#if __cplusplus < 201103L\n+      const bool __assignable = true;\n+#else\n+      // trivial types can have deleted assignment\n+      const bool __assignable = is_copy_assignable<_ValueType>::value;\n+#endif\n \n-      std::__uninitialized_fill_n<__is_trivial(_ValueType)>::\n+      std::__uninitialized_fill_n<__is_trivial(_ValueType) && __assignable>::\n \t__uninit_fill_n(__first, __n, __x);\n     }\n \n@@ -526,8 +546,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       typedef typename iterator_traits<_ForwardIterator>::value_type\n \t_ValueType;\n+      // trivial types can have deleted assignment\n+      const bool __assignable = is_copy_assignable<_ValueType>::value;\n \n-      std::__uninitialized_default_1<__is_trivial(_ValueType)>::\n+      std::__uninitialized_default_1<__is_trivial(_ValueType)\n+\t\t\t\t     && __assignable>::\n \t__uninit_default(__first, __last);\n     }\n \n@@ -539,8 +562,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       typedef typename iterator_traits<_ForwardIterator>::value_type\n \t_ValueType;\n+      // trivial types can have deleted assignment\n+      const bool __assignable = is_copy_assignable<_ValueType>::value;\n \n-      std::__uninitialized_default_n_1<__is_trivial(_ValueType)>::\n+      std::__uninitialized_default_n_1<__is_trivial(_ValueType)\n+\t\t\t\t       && __assignable>::\n \t__uninit_default_n(__first, __n);\n     }\n "}, {"sha": "7e059a35b9b00329bbb91c1b1392e47d678001a5", "filename": "libstdc++-v3/testsuite/20_util/specialized_algorithms/uninitialized_copy/58982.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5275f3e54604ae1e7143cd32d2cd45eae53b5d19/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Funinitialized_copy%2F58982.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5275f3e54604ae1e7143cd32d2cd45eae53b5d19/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Funinitialized_copy%2F58982.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Funinitialized_copy%2F58982.cc?ref=5275f3e54604ae1e7143cd32d2cd45eae53b5d19", "patch": "@@ -0,0 +1,41 @@\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 20.7.12 specialized algorithms\n+\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n+\n+#include <memory>\n+\n+// libstdc++/58982\n+\n+// trivial class that is not assignable\n+struct T\n+{\n+  T() = default;\n+  ~T() = default;\n+\n+  T& operator=(const T&) = delete;\n+};\n+\n+void\n+test01(T* result)\n+{\n+  T t[1];\n+  std::uninitialized_copy(t, t+1, result);\n+}"}, {"sha": "e10b31a70f67cc4bcfa2d71c3b88ea58227aedb0", "filename": "libstdc++-v3/testsuite/20_util/specialized_algorithms/uninitialized_copy_n/58982.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5275f3e54604ae1e7143cd32d2cd45eae53b5d19/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Funinitialized_copy_n%2F58982.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5275f3e54604ae1e7143cd32d2cd45eae53b5d19/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Funinitialized_copy_n%2F58982.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Funinitialized_copy_n%2F58982.cc?ref=5275f3e54604ae1e7143cd32d2cd45eae53b5d19", "patch": "@@ -0,0 +1,41 @@\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 20.7.12 specialized algorithms\n+\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n+\n+#include <memory>\n+\n+// libstdc++/58982\n+\n+// trivial class that is not assignable\n+struct T\n+{\n+  T() = default;\n+  ~T() = default;\n+\n+  T& operator=(const T&) = delete;\n+};\n+\n+void\n+test01(T* result)\n+{\n+  T t[1];\n+  std::uninitialized_copy_n(t, 1, result);\n+}"}, {"sha": "012e2c6c88c9431c8e01bf4c1b3f26713eebcc8b", "filename": "libstdc++-v3/testsuite/20_util/specialized_algorithms/uninitialized_fill/58982.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5275f3e54604ae1e7143cd32d2cd45eae53b5d19/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Funinitialized_fill%2F58982.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5275f3e54604ae1e7143cd32d2cd45eae53b5d19/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Funinitialized_fill%2F58982.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Funinitialized_fill%2F58982.cc?ref=5275f3e54604ae1e7143cd32d2cd45eae53b5d19", "patch": "@@ -0,0 +1,41 @@\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 20.7.12 specialized algorithms\n+\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n+\n+#include <memory>\n+\n+// libstdc++/58982\n+\n+// trivial class that is not assignable\n+struct T\n+{\n+  T() = default;\n+  ~T() = default;\n+\n+  T& operator=(const T&) = delete;\n+};\n+\n+void\n+test01(T* first, T* last)\n+{\n+  T t;\n+  std::uninitialized_fill(first, last, t);\n+}"}, {"sha": "606c63266e33a40ee9b304c267c03e8154f038e4", "filename": "libstdc++-v3/testsuite/20_util/specialized_algorithms/uninitialized_fill_n/58982.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5275f3e54604ae1e7143cd32d2cd45eae53b5d19/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Funinitialized_fill_n%2F58982.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5275f3e54604ae1e7143cd32d2cd45eae53b5d19/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Funinitialized_fill_n%2F58982.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Funinitialized_fill_n%2F58982.cc?ref=5275f3e54604ae1e7143cd32d2cd45eae53b5d19", "patch": "@@ -0,0 +1,41 @@\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 20.7.12 specialized algorithms\n+\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n+\n+#include <memory>\n+\n+// libstdc++/58982\n+\n+// trivial class that is not assignable\n+struct T\n+{\n+  T() = default;\n+  ~T() = default;\n+\n+  T& operator=(const T&) = delete;\n+};\n+\n+void\n+test01(T* first)\n+{\n+  T t;\n+  std::uninitialized_fill_n(first, 1, t);\n+}"}, {"sha": "58ece1b80f6ec0cf2b7260b29fb5ac66a021d9b8", "filename": "libstdc++-v3/testsuite/25_algorithms/copy/58982.cc", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5275f3e54604ae1e7143cd32d2cd45eae53b5d19/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy%2F58982.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5275f3e54604ae1e7143cd32d2cd45eae53b5d19/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy%2F58982.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy%2F58982.cc?ref=5275f3e54604ae1e7143cd32d2cd45eae53b5d19", "patch": "@@ -0,0 +1,42 @@\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 25.3.1 copy\n+\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n+\n+#include <algorithm>\n+\n+// libstdc++/58982\n+\n+// trivial class that is not assignable\n+struct T\n+{\n+  T() = default;\n+  ~T() = default;\n+\n+  T& operator=(const T&) = delete;\n+};\n+\n+void\n+test01(T* result)\n+{\n+  T t[1];\n+  std::copy(t, t+1, result); // { dg-error \"here\" }\n+}\n+// { dg-prune-output \"not assignable\" }"}, {"sha": "f7dfa599388d85900faf902a2374800eba17098f", "filename": "libstdc++-v3/testsuite/25_algorithms/copy_n/58982.cc", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5275f3e54604ae1e7143cd32d2cd45eae53b5d19/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_n%2F58982.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5275f3e54604ae1e7143cd32d2cd45eae53b5d19/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_n%2F58982.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_n%2F58982.cc?ref=5275f3e54604ae1e7143cd32d2cd45eae53b5d19", "patch": "@@ -0,0 +1,42 @@\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 25.3.1 copy\n+\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n+\n+#include <algorithm>\n+\n+// libstdc++/58982\n+\n+// trivial class that is not assignable\n+struct T\n+{\n+  T() = default;\n+  ~T() = default;\n+\n+  T& operator=(const T&) = delete;\n+};\n+\n+void\n+test01(T* result)\n+{\n+  T t[1];\n+  std::copy_n(t, 1, result); // { dg-error \"here\" }\n+}\n+// { dg-prune-output \"not assignable\" }"}]}