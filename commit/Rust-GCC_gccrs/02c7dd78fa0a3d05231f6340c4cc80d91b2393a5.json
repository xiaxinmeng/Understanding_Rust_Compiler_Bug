{"sha": "02c7dd78fa0a3d05231f6340c4cc80d91b2393a5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDJjN2RkNzhmYTBhM2QwNTIzMWY2MzQwYzRjYzgwZDkxYjIzOTNhNQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2017-12-18T16:30:58Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2017-12-18T16:30:58Z"}, "message": "[PR c++/59930] template friend injection\n\nhttps://gcc.gnu.org/ml/gcc-patches/2017-12/msg01168.html\n\tPR c++/59930\n\t* name-lookup.c (name_lookup::search_unqualified): Don't search\n\tparent namespace when looking for hidden things.\n\t* pt.c (tsubst_friend_class): Always push to friend scope, drop\n\tunneeded self-friend check. Inject new hidden friend into correct\n\tscope.\n\n\tPR c++/59930\n\t* g++.dg/parse/pr81247-c.C: Adjust.\n\t* g++.dg/template/pr59930-[123].C: New.\n\nFrom-SVN: r255780", "tree": {"sha": "1a40cb991e3f50f1695706c2af98c080c525658a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1a40cb991e3f50f1695706c2af98c080c525658a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/02c7dd78fa0a3d05231f6340c4cc80d91b2393a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02c7dd78fa0a3d05231f6340c4cc80d91b2393a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02c7dd78fa0a3d05231f6340c4cc80d91b2393a5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02c7dd78fa0a3d05231f6340c4cc80d91b2393a5/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0cf0bc67f6fad8653edb7656080f7f61394c92b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cf0bc67f6fad8653edb7656080f7f61394c92b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0cf0bc67f6fad8653edb7656080f7f61394c92b4"}], "stats": {"total": 208, "additions": 130, "deletions": 78}, "files": [{"sha": "3885e566d0c7ddf3991c6eb0c6692e1d9a25dced", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02c7dd78fa0a3d05231f6340c4cc80d91b2393a5/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02c7dd78fa0a3d05231f6340c4cc80d91b2393a5/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=02c7dd78fa0a3d05231f6340c4cc80d91b2393a5", "patch": "@@ -1,3 +1,12 @@\n+2017-12-18  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/59930\n+\t* name-lookup.c (name_lookup::search_unqualified): Don't search\n+\tparent namespace when looking for hidden things.\n+\t* pt.c (tsubst_friend_class): Always push to friend scope, drop\n+\tunneeded self-friend check. Inject new hidden friend into correct\n+\tscope.\n+\n 2017-12-15  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/83205"}, {"sha": "978ff77ae751ab700ee3e9935d7779c542c40762", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02c7dd78fa0a3d05231f6340c4cc80d91b2393a5/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02c7dd78fa0a3d05231f6340c4cc80d91b2393a5/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=02c7dd78fa0a3d05231f6340c4cc80d91b2393a5", "patch": "@@ -711,6 +711,15 @@ name_lookup::search_unqualified (tree scope, cp_binding_level *level)\n     done:;\n       if (scope == global_namespace)\n \tbreak;\n+\n+      /* If looking for hidden names, we only look in the innermost\n+\t namespace scope.  [namespace.memdef]/3 If a friend\n+\t declaration in a non-local class first declares a class,\n+\t function, class template or function template the friend is a\n+\t member of the innermost enclosing namespace.  See also\n+\t [basic.lookup.unqual]/7 */\n+      if (flags & LOOKUP_HIDDEN)\n+\tbreak;\n     }\n \n   vec_safe_truncate (queue, length);"}, {"sha": "4b42f03c27f9fcf2d2ef186842e95691d165068b", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 38, "deletions": 75, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02c7dd78fa0a3d05231f6340c4cc80d91b2393a5/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02c7dd78fa0a3d05231f6340c4cc80d91b2393a5/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=02c7dd78fa0a3d05231f6340c4cc80d91b2393a5", "patch": "@@ -10005,57 +10005,23 @@ tsubst_friend_function (tree decl, tree args)\n static tree\n tsubst_friend_class (tree friend_tmpl, tree args)\n {\n-  tree friend_type;\n   tree tmpl;\n-  tree context;\n \n   if (DECL_TEMPLATE_TEMPLATE_PARM_P (friend_tmpl))\n     {\n-      tree t = tsubst (TREE_TYPE (friend_tmpl), args, tf_none, NULL_TREE);\n-      return TREE_TYPE (t);\n-    }\n-\n-  context = CP_DECL_CONTEXT (friend_tmpl);\n-\n-  if (context != global_namespace)\n-    {\n-      if (TREE_CODE (context) == NAMESPACE_DECL)\n-\tpush_nested_namespace (context);\n-      else\n-\tpush_nested_class (tsubst (context, args, tf_none, NULL_TREE));\n+      tmpl = tsubst (TREE_TYPE (friend_tmpl), args, tf_none, NULL_TREE);\n+      return TREE_TYPE (tmpl);\n     }\n \n-  /* Look for a class template declaration.  We look for hidden names\n-     because two friend declarations of the same template are the\n-     same.  For example, in:\n-\n-       struct A { \n-         template <typename> friend class F;\n-       };\n-       template <typename> struct B { \n-         template <typename> friend class F;\n-       };\n-\n-     both F templates are the same.  */\n-  tmpl = lookup_name_real (DECL_NAME (friend_tmpl), 0, 0,\n-\t\t\t   /*block_p=*/true, 0, LOOKUP_HIDDEN);\n-\n-  /* But, if we don't find one, it might be because we're in a\n-     situation like this:\n-\n-       template <class T>\n-       struct S {\n-\t template <class U>\n-\t friend struct S;\n-       };\n+  tree context = CP_DECL_CONTEXT (friend_tmpl);\n+  if (TREE_CODE (context) == NAMESPACE_DECL)\n+    push_nested_namespace (context);\n+  else\n+    push_nested_class (context);\n \n-     Here, in the scope of (say) S<int>, `S' is bound to a TYPE_DECL\n-     for `S<int>', not the TEMPLATE_DECL.  */\n-  if (!tmpl || !DECL_CLASS_TEMPLATE_P (tmpl))\n-    {\n-      tmpl = lookup_name_prefer_type (DECL_NAME (friend_tmpl), 1);\n-      tmpl = maybe_get_template_decl_from_type_decl (tmpl);\n-    }\n+  tmpl = lookup_name_real (DECL_NAME (friend_tmpl), /*prefer_type=*/false,\n+\t\t\t   /*non_class=*/false, /*block_p=*/false,\n+\t\t\t   /*namespaces_only=*/false, LOOKUP_HIDDEN);\n \n   if (tmpl && DECL_CLASS_TEMPLATE_P (tmpl))\n     {\n@@ -10068,53 +10034,50 @@ tsubst_friend_class (tree friend_tmpl, tree args)\n       if (TMPL_PARMS_DEPTH (DECL_TEMPLATE_PARMS (friend_tmpl))\n \t  > TMPL_ARGS_DEPTH (args))\n \t{\n-\t  tree parms;\n-          location_t saved_input_location;\n-\t  parms = tsubst_template_parms (DECL_TEMPLATE_PARMS (friend_tmpl),\n-\t\t\t\t\t args, tf_warning_or_error);\n-\n-          saved_input_location = input_location;\n+\t  tree parms = tsubst_template_parms (DECL_TEMPLATE_PARMS (friend_tmpl),\n+\t\t\t\t\t      args, tf_warning_or_error);\n+          location_t saved_input_location = input_location;\n           input_location = DECL_SOURCE_LOCATION (friend_tmpl);\n           tree cons = get_constraints (tmpl);\n           redeclare_class_template (TREE_TYPE (tmpl), parms, cons);\n           input_location = saved_input_location;\n-          \n \t}\n-\n-      friend_type = TREE_TYPE (tmpl);\n     }\n   else\n     {\n       /* The friend template has not already been declared.  In this\n \t case, the instantiation of the template class will cause the\n-\t injection of this template into the global scope.  */\n+\t injection of this template into the namespace scope.  */\n       tmpl = tsubst (friend_tmpl, args, tf_warning_or_error, NULL_TREE);\n-      if (tmpl == error_mark_node)\n-\treturn error_mark_node;\n \n-      /* The new TMPL is not an instantiation of anything, so we\n-\t forget its origins.  We don't reset CLASSTYPE_TI_TEMPLATE for\n-\t the new type because that is supposed to be the corresponding\n-\t template decl, i.e., TMPL.  */\n-      DECL_USE_TEMPLATE (tmpl) = 0;\n-      DECL_TEMPLATE_INFO (tmpl) = NULL_TREE;\n-      CLASSTYPE_USE_TEMPLATE (TREE_TYPE (tmpl)) = 0;\n-      CLASSTYPE_TI_ARGS (TREE_TYPE (tmpl))\n-\t= INNERMOST_TEMPLATE_ARGS (CLASSTYPE_TI_ARGS (TREE_TYPE (tmpl)));\n+      if (tmpl != error_mark_node)\n+\t{\n+\t  /* The new TMPL is not an instantiation of anything, so we\n+\t     forget its origins.  We don't reset CLASSTYPE_TI_TEMPLATE\n+\t     for the new type because that is supposed to be the\n+\t     corresponding template decl, i.e., TMPL.  */\n+\t  DECL_USE_TEMPLATE (tmpl) = 0;\n+\t  DECL_TEMPLATE_INFO (tmpl) = NULL_TREE;\n+\t  CLASSTYPE_USE_TEMPLATE (TREE_TYPE (tmpl)) = 0;\n+\t  CLASSTYPE_TI_ARGS (TREE_TYPE (tmpl))\n+\t    = INNERMOST_TEMPLATE_ARGS (CLASSTYPE_TI_ARGS (TREE_TYPE (tmpl)));\n+\n+\t  /* It is hidden.  */\n+\t  retrofit_lang_decl (DECL_TEMPLATE_RESULT (tmpl));\n+\t  DECL_ANTICIPATED (tmpl)\n+\t    = DECL_ANTICIPATED (DECL_TEMPLATE_RESULT (tmpl)) = true;\n \n-      /* Inject this template into the global scope.  */\n-      friend_type = TREE_TYPE (pushdecl_top_level (tmpl, true));\n+\t  /* Inject this template into the enclosing namspace scope.  */\n+\t  tmpl = pushdecl_namespace_level (tmpl, true);\n+\t}\n     }\n \n-  if (context != global_namespace)\n-    {\n-      if (TREE_CODE (context) == NAMESPACE_DECL)\n-\tpop_nested_namespace (context);\n-      else\n-\tpop_nested_class ();\n-    }\n+  if (TREE_CODE (context) == NAMESPACE_DECL)\n+    pop_nested_namespace (context);\n+  else\n+    pop_nested_class ();\n \n-  return friend_type;\n+  return TREE_TYPE (tmpl);\n }\n \n /* Returns zero if TYPE cannot be completed later due to circularity."}, {"sha": "831a9bb11263c1596ba8450de0cb7120b7ac5594", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02c7dd78fa0a3d05231f6340c4cc80d91b2393a5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02c7dd78fa0a3d05231f6340c4cc80d91b2393a5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=02c7dd78fa0a3d05231f6340c4cc80d91b2393a5", "patch": "@@ -1,3 +1,9 @@\n+2017-12-18  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/59930\n+\t* g++.dg/parse/pr81247-c.C: Adjust.\n+\t* g++.dg/template/pr59930-[123].C: New.\n+\n 2017-12-18  Claudiu Zissulescu  <claziss@synopsys.com>\n \n \t* gcc.target/arc/tumaddsidi4.c: New test."}, {"sha": "33183c5294b2a14b7e651dae7b409a422df4ecf5", "filename": "gcc/testsuite/g++.dg/parse/pr81247-c.C", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02c7dd78fa0a3d05231f6340c4cc80d91b2393a5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fpr81247-c.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02c7dd78fa0a3d05231f6340c4cc80d91b2393a5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fpr81247-c.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fpr81247-c.C?ref=02c7dd78fa0a3d05231f6340c4cc80d91b2393a5", "patch": "@@ -1,8 +1,9 @@\n-// PR c++/81247 confused error\n+// PR c++/81247 rejected well-formed\n \n-namespace N { // { dg-message \"previous declaration\" }\n+namespace N {\n   template < typename T > class A\n-  { // { dg-error \"conflicts with a previous\" }\n+  {\n+    // injects a hidden class N::N at instantiation time\n     template < T > friend class N;\n   };\n }"}, {"sha": "7a8c17de1a74b5b50ffc41b9e628598c555f526d", "filename": "gcc/testsuite/g++.dg/template/pr59930-1.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02c7dd78fa0a3d05231f6340c4cc80d91b2393a5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr59930-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02c7dd78fa0a3d05231f6340c4cc80d91b2393a5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr59930-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr59930-1.C?ref=02c7dd78fa0a3d05231f6340c4cc80d91b2393a5", "patch": "@@ -0,0 +1,18 @@\n+// PR c++/59930\n+\n+namespace N {\n+  template<typename T> class A {\n+    // The injected name is N::B, because we don;t look outside of N\n+    template<typename U> friend struct B;\n+  private:\n+    int n; // { dg-message \"declared private here\" }\n+  public:\n+    A (int);\n+  };\n+}\n+\n+template<typename T> struct B {\n+  int f(N::A<int> ai) { return ai.n; } // { dg-error \"is private\" }\n+};\n+\n+int k = B<int>().f(0);"}, {"sha": "a7e6ea4ea9aabdc51c7d9544df1aa11862351240", "filename": "gcc/testsuite/g++.dg/template/pr59930-2.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02c7dd78fa0a3d05231f6340c4cc80d91b2393a5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr59930-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02c7dd78fa0a3d05231f6340c4cc80d91b2393a5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr59930-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr59930-2.C?ref=02c7dd78fa0a3d05231f6340c4cc80d91b2393a5", "patch": "@@ -0,0 +1,17 @@\n+// PR c++/59930\n+\n+namespace N {\n+  template < typename T > class A\n+  {\n+    // Injects N::N\n+    template < T > friend class N;\n+    // { dg-error \"template parameter\" \"\" { target *-*-* } .-1 }\n+    // { dg-error \"redeclared\"  \"\" { target *-*-* } .-2 }\n+  };\n+}\n+\n+void f ()\n+{\n+  N::A < int > a1;\n+  N::A <short > a2;\n+}"}, {"sha": "1769a3ce026d8407ea451b7a8daf9b8fc45c60b6", "filename": "gcc/testsuite/g++.dg/template/pr59930-3.C", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02c7dd78fa0a3d05231f6340c4cc80d91b2393a5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr59930-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02c7dd78fa0a3d05231f6340c4cc80d91b2393a5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr59930-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr59930-3.C?ref=02c7dd78fa0a3d05231f6340c4cc80d91b2393a5", "patch": "@@ -0,0 +1,29 @@\n+// PR c++/59930\n+\n+namespace NS {\n+  template<typename T> class Holder\n+  {\n+  private:\n+    void func();\n+\n+    template<typename> friend class User;\n+  };\n+\n+  template class Holder<long>;\n+\n+  template<typename T> class User\n+  {\n+  public:\n+    void method() const\n+    {\n+      Holder<T> x;\n+      x.func();\n+    }\n+  };\n+} // namespace\n+\n+void Foo()\n+{\n+  NS::User<long> decl;\n+  decl.method();\n+}"}]}