{"sha": "fee3eacd6fea60bfc2bed8477315ea1f125a278c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmVlM2VhY2Q2ZmVhNjBiZmMyYmVkODQ3NzMxNWVhMWYxMjVhMjc4Yw==", "commit": {"author": {"name": "Iain Sandoe", "email": "iains@gcc.gnu.org", "date": "2010-11-02T14:40:03Z"}, "committer": {"name": "Iain Sandoe", "email": "iains@gcc.gnu.org", "date": "2010-11-02T14:40:03Z"}, "message": "update darwin x86 output.\n\ngcc:\n\tMerge from FSF \"apple/trunk\" branch.\n\n\t* config/rs6000/darwin.opt (mdynamic-no-pic): move from here ...\n\t* config/darwin.opt: .. to here.\n\t(matt-stubs): New option.\n\t* config/i386/darwin.opt: Delete.\n\t* config/i386/i386.h (MACHOPIC_ATT_STUB): New.\n\t(MACHO_DYNAMIC_NO_PIC_P): New.\n\t(MACHOPIC_INDIRECT): New.\n\t(MACHOPIC_PURE): New.\n\t* config/i386/darwin.h (DARWIN_X86) Define to 1.\n\t(MACHOPIC_ATT_STUB): New.\n\t(CC1_SPEC): Do not remove mdynamic-no-pic.\n\tMove HOT_TEXT_SECTION_NAME: move to config/darwin.h\n\tUNLIKELY_EXECUTED_TEXT_SECTION_NAME: Likewise.\n\t(FUNCTION_PROFILER): Correct over-length line.\n\t(SUBTARGET_OVERRIDE_OPTIONS): New.\n\t(MACHOPIC_NL_SYMBOL_PTR_SECTION): New.\n\t* config/i386/i386.c (config/i386/i386.c): Darwin has no PLT.\n\t(legitimate_constant_p): Handle mdynamic-no-pic.\n\t(ix86_legitimate_address_p): Likewise.\n\t(ix86_legitimize_address): Likewise.\n\t(ix86_expand_move): Likewise.\n\t(machopic_output_stub): Update for ATT-style stubs and\n\tmdynamic-no-pic.\n\t* config/darwin-protos.h (machopic_symbol_defined_p): New.\n\t* config/rs6000/darwin.h (DARWIN_PPC): Define to 1.\n\tTARGET_DYNAMIC_NO_PIC: Remove.\n\tMove HOT_TEXT_SECTION_NAME: move to config/darwin.h\n\tUNLIKELY_EXECUTED_TEXT_SECTION_NAME: Likewise.\n\t* config/rs6000/rs6000.c (darwin_rs6000_override_options):\n\tRemove handling of mdynamic-no-pic.\n\t* config/darwin.c (HAVE_lo_sum, gen_macho_high, gen_macho_low):\n\tDefine if required.\n\t(machopic_symbol_defined_p): Do not try to use current_function_decl\n\twhen generating _get_pc thunks within stubs.\n\t(machopic_indirect_data_reference): Rework for direct conditionals \n\trather than #ifdefs, add x86 mdynamic-no-pic\n\t(machopic_legitimize_pic_address): Update to use HAVE_lo_sum with a\n\tdefined value.\n\t(darwin_override_options): Handle mdynamic-no-pic here.\n\t* config/darwin-sections.def (machopic_lazy_symbol_ptr2_section): New.\n\t(machopic_lazy_symbol_ptr3_section): New.\n\t(machopic_picsymbol_stub2_section): New.\n\t(machopic_picsymbol_stub3_section): New.\n\t* config/darwin.h (DARWIN_X86, DARWIN_PPC): Define to 0.\n\t(MACHOPIC_NL_SYMBOL_PTR_SECTION): New.\n\t(HOT_TEXT_SECTION_NAME, UNLIKELY_EXECUTED_TEXT_SECTION_NAME):\n\tMoved common definition from x86 and rs6000.\n\t(MACHO_DYNAMIC_NO_PIC_P): Override value.\n\t(MACHOPIC_INDIRECT): Likewise.\n\t(MACHOPIC_PURE): Likewise.\n\t* config.gcc (x86-darwin-*): Remove darwin.opt.\n\nFrom-SVN: r166184", "tree": {"sha": "b5b577010dc10df43ec2cfd162565ca05edc0eb5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b5b577010dc10df43ec2cfd162565ca05edc0eb5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fee3eacd6fea60bfc2bed8477315ea1f125a278c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fee3eacd6fea60bfc2bed8477315ea1f125a278c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fee3eacd6fea60bfc2bed8477315ea1f125a278c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fee3eacd6fea60bfc2bed8477315ea1f125a278c/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "551677bf78ae1561354c6204d8d15340cd5776b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/551677bf78ae1561354c6204d8d15340cd5776b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/551677bf78ae1561354c6204d8d15340cd5776b7"}], "stats": {"total": 474, "additions": 329, "deletions": 145}, "files": [{"sha": "f16a43670032492d6dd0756bb370f794ecab9972", "filename": "gcc/ChangeLog", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fee3eacd6fea60bfc2bed8477315ea1f125a278c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fee3eacd6fea60bfc2bed8477315ea1f125a278c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fee3eacd6fea60bfc2bed8477315ea1f125a278c", "patch": "@@ -1,3 +1,59 @@\n+2010-11-02  Iain Sandoe  <iains@gcc.gnu.org>\n+\n+\tMerge from FSF \"apple/trunk\" branch.\n+\n+\t* config/rs6000/darwin.opt (mdynamic-no-pic): move from here ...\n+\t* config/darwin.opt: .. to here.\n+\t(matt-stubs): New option.\n+\t* config/i386/darwin.opt: Delete.\n+\t* config/i386/i386.h (MACHOPIC_ATT_STUB): New.\n+\t(MACHO_DYNAMIC_NO_PIC_P): New.\n+\t(MACHOPIC_INDIRECT): New.\n+\t(MACHOPIC_PURE): New.\n+\t* config/i386/darwin.h (DARWIN_X86) Define to 1.\n+\t(MACHOPIC_ATT_STUB): New.\n+\t(CC1_SPEC): Do not remove mdynamic-no-pic.\n+\tMove HOT_TEXT_SECTION_NAME: move to config/darwin.h\n+\tUNLIKELY_EXECUTED_TEXT_SECTION_NAME: Likewise.\n+\t(FUNCTION_PROFILER): Correct over-length line.\n+\t(SUBTARGET_OVERRIDE_OPTIONS): New.\n+\t(MACHOPIC_NL_SYMBOL_PTR_SECTION): New.\n+\t* config/i386/i386.c (config/i386/i386.c): Darwin has no PLT.\n+\t(legitimate_constant_p): Handle mdynamic-no-pic.\n+\t(ix86_legitimate_address_p): Likewise.\n+\t(ix86_legitimize_address): Likewise.\n+\t(ix86_expand_move): Likewise.\n+\t(machopic_output_stub): Update for ATT-style stubs and\n+\tmdynamic-no-pic.\n+\t* config/darwin-protos.h (machopic_symbol_defined_p): New.\n+\t* config/rs6000/darwin.h (DARWIN_PPC): Define to 1.\n+\tTARGET_DYNAMIC_NO_PIC: Remove.\n+\tMove HOT_TEXT_SECTION_NAME: move to config/darwin.h\n+\tUNLIKELY_EXECUTED_TEXT_SECTION_NAME: Likewise.\n+\t* config/rs6000/rs6000.c (darwin_rs6000_override_options):\n+\tRemove handling of mdynamic-no-pic.\n+\t* config/darwin.c (HAVE_lo_sum, gen_macho_high, gen_macho_low):\n+\tDefine if required.\n+\t(machopic_symbol_defined_p): Do not try to use current_function_decl\n+\twhen generating _get_pc thunks within stubs.\n+\t(machopic_indirect_data_reference): Rework for direct conditionals \n+\trather than #ifdefs, add x86 mdynamic-no-pic\n+\t(machopic_legitimize_pic_address): Update to use HAVE_lo_sum with a\n+\tdefined value.\n+\t(darwin_override_options): Handle mdynamic-no-pic here.\n+\t* config/darwin-sections.def (machopic_lazy_symbol_ptr2_section): New.\n+\t(machopic_lazy_symbol_ptr3_section): New.\n+\t(machopic_picsymbol_stub2_section): New.\n+\t(machopic_picsymbol_stub3_section): New.\n+\t* config/darwin.h (DARWIN_X86, DARWIN_PPC): Define to 0.\n+\t(MACHOPIC_NL_SYMBOL_PTR_SECTION): New.\n+\t(HOT_TEXT_SECTION_NAME, UNLIKELY_EXECUTED_TEXT_SECTION_NAME):\n+\tMoved common definition from x86 and rs6000.\n+\t(MACHO_DYNAMIC_NO_PIC_P): Override value.\n+\t(MACHOPIC_INDIRECT): Likewise.\n+\t(MACHOPIC_PURE): Likewise.\n+\t* config.gcc (x86-darwin-*): Remove darwin.opt.\n+\n 2010-11-02  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR debug/46255"}, {"sha": "8dce3d55a85a0fd318e21bcf894e19ff20295536", "filename": "gcc/config.gcc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fee3eacd6fea60bfc2bed8477315ea1f125a278c/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fee3eacd6fea60bfc2bed8477315ea1f125a278c/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=fee3eacd6fea60bfc2bed8477315ea1f125a278c", "patch": "@@ -1160,14 +1160,12 @@ i[34567]86-*-darwin*)\n \t# support.\n \twith_cpu=${with_cpu:-generic}\n \ttmake_file=\"${tmake_file} t-slibgcc-darwin i386/t-crtpc i386/t-crtfm\"\n-\textra_options=\"${extra_options} i386/darwin.opt\"\n \tlto_binary_reader=lto-macho\n \t;;\n x86_64-*-darwin*)\n \twith_cpu=${with_cpu:-generic}\n \ttmake_file=\"${tmake_file} ${cpu_type}/t-darwin64 t-slibgcc-darwin i386/t-crtpc i386/t-crtfm\"\n \ttm_file=\"${tm_file} ${cpu_type}/darwin64.h\"\n-\textra_options=\"${extra_options} i386/darwin.opt\"\n \tlto_binary_reader=lto-macho\n \t;;\n i[34567]86-*-elf*)"}, {"sha": "30b3f822c98978facb991d5b8c664358ef13b235", "filename": "gcc/config/darwin-protos.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fee3eacd6fea60bfc2bed8477315ea1f125a278c/gcc%2Fconfig%2Fdarwin-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fee3eacd6fea60bfc2bed8477315ea1f125a278c/gcc%2Fconfig%2Fdarwin-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin-protos.h?ref=fee3eacd6fea60bfc2bed8477315ea1f125a278c", "patch": "@@ -1,5 +1,5 @@\n /* Prototypes.\n-   Copyright (C) 2001, 2002, 2003, 2004, 2005, 2007, 2008\n+   Copyright (C) 2001, 2002, 2003, 2004, 2005, 2007, 2008, 2010\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -31,6 +31,7 @@ extern const char *machopic_mcount_stub_name (void);\n \n extern rtx machopic_gen_offset (rtx);\n extern int machopic_operand_p (rtx);\n+extern int machopic_symbol_defined_p (rtx sym_ref);\n extern enum machopic_addr_class machopic_classify_symbol (rtx);\n \n extern rtx machopic_indirect_data_reference (rtx, rtx);"}, {"sha": "476d9aa018cabe5bec005374d20a79c6131d4977", "filename": "gcc/config/darwin-sections.def", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fee3eacd6fea60bfc2bed8477315ea1f125a278c/gcc%2Fconfig%2Fdarwin-sections.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fee3eacd6fea60bfc2bed8477315ea1f125a278c/gcc%2Fconfig%2Fdarwin-sections.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin-sections.def?ref=fee3eacd6fea60bfc2bed8477315ea1f125a278c", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 2005, 2006 Free Software Foundation, Inc.\n+/* Copyright (C) 2005, 2006, 2010 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -66,17 +66,30 @@ DEF_SECTION (objc_class_names_section, 0, \".objc_class_names\", 1)\n DEF_SECTION (objc_meth_var_names_section, 0, \".objc_meth_var_names\", 1)\n DEF_SECTION (objc_meth_var_types_section, 0, \".objc_meth_var_types\", 1)\n DEF_SECTION (objc_cls_refs_section, SECTION_MERGE, \".objc_cls_refs\", 1)\n-\n+/* lazy symbol pointers.  */\n DEF_SECTION (machopic_lazy_symbol_ptr_section, 0, \".lazy_symbol_pointer\", 0)\n-DEF_SECTION (machopic_nl_symbol_ptr_section, 0, \".non_lazy_symbol_pointer\", 0)\n+DEF_SECTION (machopic_lazy_symbol_ptr2_section,\t0,\n+\t     \".section __DATA, __la_sym_ptr2,lazy_symbol_pointers\", 0)\n+DEF_SECTION (machopic_lazy_symbol_ptr3_section, 0,\n+\t     \".section __DATA, __la_sym_ptr3,lazy_symbol_pointers\", 0)\n+/* non-lazy symbol pointers.  */\n+DEF_SECTION (machopic_nl_symbol_ptr_section, 0,\n+\t     MACHOPIC_NL_SYMBOL_PTR_SECTION, 0)\n+/* Symbol stubs.  */\n DEF_SECTION (machopic_symbol_stub_section, 0, \".symbol_stub\", 0)\n DEF_SECTION (machopic_symbol_stub1_section, 0,\n \t     \".section __TEXT,__symbol_stub1,symbol_stubs,\"\n \t     \"pure_instructions,16\", 0)\n+/* PIC symbol stubs.  */\n DEF_SECTION (machopic_picsymbol_stub_section, 0, \".picsymbol_stub\", 0)\n DEF_SECTION (machopic_picsymbol_stub1_section, 0,\n \t     \".section __TEXT,__picsymbolstub1,symbol_stubs,\"\n \t     \"pure_instructions,32\", 0)\n+DEF_SECTION (machopic_picsymbol_stub2_section, 0,\n+\t     \".section __TEXT,__picsymbolstub2,symbol_stubs,pure_instructions,25\", 0)\n+DEF_SECTION (machopic_picsymbol_stub3_section, 0,\n+\t     \".section __IMPORT,__jump_table,symbol_stubs,self_modifying_code+pure_instructions,5\", 0)\n+/* Exception-related.  */\n DEF_SECTION (darwin_exception_section, 0,\n \t     \".section __DATA,__gcc_except_tab\", 0)\n DEF_SECTION (darwin_eh_frame_section, 0,"}, {"sha": "79b42725f488d45b114ca12ce4859c2294ba0d39", "filename": "gcc/config/darwin.c", "status": "modified", "additions": 94, "deletions": 49, "changes": 143, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fee3eacd6fea60bfc2bed8477315ea1f125a278c/gcc%2Fconfig%2Fdarwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fee3eacd6fea60bfc2bed8477315ea1f125a278c/gcc%2Fconfig%2Fdarwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.c?ref=fee3eacd6fea60bfc2bed8477315ea1f125a278c", "patch": "@@ -95,6 +95,13 @@ int darwin_running_cxx;\n /* Section names.  */\n section * darwin_sections[NUM_DARWIN_SECTIONS];\n \n+/* While we transition to using in-tests instead of ifdef'd code.  */\n+#ifndef HAVE_lo_sum\n+#define HAVE_lo_sum 0\n+#define gen_macho_high(a,b) (a)\n+#define gen_macho_low(a,b,c) (a)\n+#endif\n+\n /* True if we're setting __attribute__ ((ms_struct)).  */\n int darwin_ms_struct = false;\n \n@@ -179,7 +186,7 @@ name_needs_quotes (const char *name)\n }\n \n /* Return true if SYM_REF can be used without an indirection.  */\n-static int\n+int\n machopic_symbol_defined_p (rtx sym_ref)\n {\n   if (SYMBOL_REF_FLAGS (sym_ref) & MACHO_SYMBOL_FLAG_DEFINED)\n@@ -319,12 +326,22 @@ machopic_output_function_base_name (FILE *file)\n \n   /* If dynamic-no-pic is on, we should not get here.  */\n   gcc_assert (!MACHO_DYNAMIC_NO_PIC_P);\n-  current_name =\n-    IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (current_function_decl));\n-  if (function_base_func_name != current_name)\n+  /* When we are generating _get_pc thunks within stubs, there is no current\n+     function.  */\n+  if (current_function_decl)\n+    {\n+      current_name =\n+\tIDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (current_function_decl));\n+      if (function_base_func_name != current_name)\n+\t{\n+\t  ++current_pic_label_num;\n+\t  function_base_func_name = current_name;\n+\t}\n+    }\n+  else\n     {\n       ++current_pic_label_num;\n-      function_base_func_name = current_name;\n+      function_base_func_name = \"L_machopic_stub_dummy\";\n     }\n   fprintf (file, \"L%011d$pb\", current_pic_label_num);\n }\n@@ -514,24 +531,28 @@ machopic_indirect_data_reference (rtx orig, rtx reg)\n \n       if (defined && MACHO_DYNAMIC_NO_PIC_P)\n \t{\n-#if defined (TARGET_TOC)\n+\t  if (DARWIN_PPC)\n+\t    {\n \t  /* Create a new register for CSE opportunities.  */\n \t  rtx hi_reg = (!can_create_pseudo_p () ? reg : gen_reg_rtx (Pmode));\n  \t  emit_insn (gen_macho_high (hi_reg, orig));\n  \t  emit_insn (gen_macho_low (reg, hi_reg, orig));\n-#else\n+\t      return reg;\n+ \t    }\n+\t  else if (DARWIN_X86)\n+\t    return orig;\n+\t  else\n \t   /* some other cpu -- writeme!  */\n \t   gcc_unreachable ();\n-#endif\n-\t   return reg;\n \t}\n       else if (defined)\n \t{\n-#if defined (TARGET_TOC) || defined (HAVE_lo_sum)\n-\t  rtx offset = machopic_gen_offset (orig);\n-#endif\n+\t  rtx offset = NULL;\n+\t  if (DARWIN_PPC || HAVE_lo_sum)\n+\t    offset = machopic_gen_offset (orig);\n \n-#if defined (TARGET_TOC) /* i.e., PowerPC */\n+\t  if (DARWIN_PPC)\n+\t    {\n \t  rtx hi_sum_reg = (!can_create_pseudo_p ()\n \t\t\t    ? reg\n \t\t\t    : gen_reg_rtx (Pmode));\n@@ -546,8 +567,9 @@ machopic_indirect_data_reference (rtx orig, rtx reg)\n \t\t\t\t\t\t  copy_rtx (offset))));\n \n \t  orig = reg;\n-#else\n-#if defined (HAVE_lo_sum)\n+\t    }\n+\t  else if (HAVE_lo_sum)\n+\t    {\n \t  gcc_assert (reg);\n \n \t  emit_insn (gen_rtx_SET (VOIDmode, reg,\n@@ -558,8 +580,7 @@ machopic_indirect_data_reference (rtx orig, rtx reg)\n \t  emit_use (pic_offset_table_rtx);\n \n \t  orig = gen_rtx_PLUS (Pmode, pic_offset_table_rtx, reg);\n-#endif\n-#endif\n+\t    }\n \t  return orig;\n \t}\n \n@@ -572,24 +593,56 @@ machopic_indirect_data_reference (rtx orig, rtx reg)\n       ptr_ref = gen_const_mem (Pmode, ptr_ref);\n       machopic_define_symbol (ptr_ref);\n \n+      if (DARWIN_X86 \n+          && reg \n+          && MACHO_DYNAMIC_NO_PIC_P)\n+\t{\n+\t    emit_insn (gen_rtx_SET (Pmode, reg, ptr_ref));\n+\t    ptr_ref = reg;\n+\t}\n+\n       return ptr_ref;\n     }\n   else if (GET_CODE (orig) == CONST)\n     {\n-      rtx base, result;\n-\n-      /* legitimize both operands of the PLUS */\n+      /* If \"(const (plus ...\", walk the PLUS and return that result.\n+\t PLUS processing (below) will restore the \"(const ...\" if\n+\t appropriate.  */\n       if (GET_CODE (XEXP (orig, 0)) == PLUS)\n+\treturn machopic_indirect_data_reference (XEXP (orig, 0), reg);\n+      else \n+\treturn orig;\n+    }\n+  else if (GET_CODE (orig) == MEM)\n+    {\n+      XEXP (ptr_ref, 0) = \n+\t\tmachopic_indirect_data_reference (XEXP (orig, 0), reg);\n+      return ptr_ref;\n+    }\n+  else if (GET_CODE (orig) == PLUS)\n+    {\n+      rtx base, result;\n+      /* When the target is i386, this code prevents crashes due to the\n+\tcompiler's ignorance on how to move the PIC base register to\n+\tother registers.  (The reload phase sometimes introduces such\n+\tinsns.)  */\n+      if (GET_CODE (XEXP (orig, 0)) == REG\n+\t   && REGNO (XEXP (orig, 0)) == PIC_OFFSET_TABLE_REGNUM\n+\t   /* Prevent the same register from being erroneously used\n+\t      as both the base and index registers.  */\n+\t   && (DARWIN_X86 && (GET_CODE (XEXP (orig, 1)) == CONST))\n+\t   && reg)\n \t{\n-\t  base = machopic_indirect_data_reference (XEXP (XEXP (orig, 0), 0),\n-\t\t\t\t\t\t   reg);\n-\t  orig = machopic_indirect_data_reference (XEXP (XEXP (orig, 0), 1),\n-\t\t\t\t\t\t   (base == reg ? 0 : reg));\n+\t  emit_move_insn (reg, XEXP (orig, 0));\n+\t  XEXP (ptr_ref, 0) = reg;\n+\t  return ptr_ref;\n \t}\n-      else\n-\treturn orig;\n \n-      if (MACHOPIC_PURE && GET_CODE (orig) == CONST_INT)\n+      /* Legitimize both operands of the PLUS.  */\n+      base = machopic_indirect_data_reference (XEXP (orig, 0), reg);\n+      orig = machopic_indirect_data_reference (XEXP (orig, 1),\n+\t\t\t\t\t       (base == reg ? 0 : reg));\n+      if (MACHOPIC_INDIRECT && (GET_CODE (orig) == CONST_INT))\n \tresult = plus_constant (base, INTVAL (orig));\n       else\n \tresult = gen_rtx_PLUS (Pmode, base, orig);\n@@ -608,26 +661,6 @@ machopic_indirect_data_reference (rtx orig, rtx reg)\n \t}\n \n       return result;\n-\n-    }\n-  else if (GET_CODE (orig) == MEM)\n-    XEXP (ptr_ref, 0) = machopic_indirect_data_reference (XEXP (orig, 0), reg);\n-  /* When the target is i386, this code prevents crashes due to the\n-     compiler's ignorance on how to move the PIC base register to\n-     other registers.  (The reload phase sometimes introduces such\n-     insns.)  */\n-  else if (GET_CODE (orig) == PLUS\n-\t   && GET_CODE (XEXP (orig, 0)) == REG\n-\t   && REGNO (XEXP (orig, 0)) == PIC_OFFSET_TABLE_REGNUM\n-#ifdef I386\n-\t   /* Prevent the same register from being erroneously used\n-\t      as both the base and index registers.  */\n-\t   && GET_CODE (XEXP (orig, 1)) == CONST\n-#endif\n-\t   && reg)\n-    {\n-      emit_move_insn (reg, XEXP (orig, 0));\n-      XEXP (ptr_ref, 0) = reg;\n     }\n   return ptr_ref;\n }\n@@ -697,7 +730,7 @@ machopic_legitimize_pic_address (rtx orig, enum machine_mode mode, rtx reg)\n \t      reg = gen_reg_rtx (Pmode);\n \t    }\n \n-#ifdef HAVE_lo_sum\n+#if HAVE_lo_sum\n \t  if (MACHO_DYNAMIC_NO_PIC_P\n \t      && (GET_CODE (XEXP (orig, 0)) == SYMBOL_REF\n \t\t  || GET_CODE (XEXP (orig, 0)) == LABEL_REF))\n@@ -792,7 +825,7 @@ machopic_legitimize_pic_address (rtx orig, enum machine_mode mode, rtx reg)\n       else\n \t{\n \n-#ifdef HAVE_lo_sum\n+#if HAVE_lo_sum\n \t  if (GET_CODE (orig) == SYMBOL_REF\n \t      || GET_CODE (orig) == LABEL_REF)\n \t    {\n@@ -1963,6 +1996,18 @@ darwin_override_options (void)\n       && debug_hooks->var_location != do_nothing_debug_hooks.var_location)\n     flag_var_tracking_uninit = 1;\n \n+  if (MACHO_DYNAMIC_NO_PIC_P)\n+    {\n+      if (flag_pic)\n+\twarning (0, \"-mdynamic-no-pic overrides -fpic or -fPIC\");\n+      flag_pic = 0;\n+    }\n+  else if (flag_pic == 1)\n+    {\n+      /* Darwin's -fpic is -fPIC.  */\n+      flag_pic = 2;\n+    }\n+\n   /* It is assumed that branch island stubs are needed for earlier systems.  */\n   if (darwin_macosx_version_min\n       && strverscmp (darwin_macosx_version_min, \"10.5\") < 0)"}, {"sha": "438b7e03c4cccde99978d25378ae6070677b2ca1", "filename": "gcc/config/darwin.h", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fee3eacd6fea60bfc2bed8477315ea1f125a278c/gcc%2Fconfig%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fee3eacd6fea60bfc2bed8477315ea1f125a278c/gcc%2Fconfig%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.h?ref=fee3eacd6fea60bfc2bed8477315ea1f125a278c", "patch": "@@ -42,7 +42,8 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n    like a.out and partly like COFF, with additional features like\n    multi-architecture binary support.  */\n \n-#define OBJECT_FORMAT_MACHO\n+#define DARWIN_X86 0\n+#define DARWIN_PPC 0\n \n /* Don't assume anything about the header files.  */\n #define NO_IMPLICIT_EXTERN_C\n@@ -720,6 +721,14 @@ int darwin_label_is_anonymous_local_objc_name (const char *name);\n #undef\tMAX_OFILE_ALIGNMENT\n #define MAX_OFILE_ALIGNMENT (0x8000 * 8)\n \n+/* The generic version, archs should over-ride where required.  */\n+#define MACHOPIC_NL_SYMBOL_PTR_SECTION \".non_lazy_symbol_pointer\"\n+\n+/* These are used by -fbranch-probabilities */\n+#define HOT_TEXT_SECTION_NAME \"__TEXT,__text,regular,pure_instructions\"\n+#define UNLIKELY_EXECUTED_TEXT_SECTION_NAME \\\n+                              \"__TEXT,__unlikely,regular,pure_instructions\"\n+\n /* Declare the section variables.  */\n #ifndef USED_FOR_TARGET\n enum darwin_section_enum {\n@@ -820,9 +829,12 @@ enum machopic_addr_class {\n \n /* Macros defining the various PIC cases.  */\n \n-#define MACHO_DYNAMIC_NO_PIC_P\t(TARGET_DYNAMIC_NO_PIC)\n+#undef  MACHO_DYNAMIC_NO_PIC_P\n+#define MACHO_DYNAMIC_NO_PIC_P\t(TARGET_MACHO_DYNAMIC_NO_PIC)\n+#undef  MACHOPIC_INDIRECT\n #define MACHOPIC_INDIRECT\t(flag_pic || MACHO_DYNAMIC_NO_PIC_P)\n #define MACHOPIC_JUST_INDIRECT\t(MACHO_DYNAMIC_NO_PIC_P)\n+#undef  MACHOPIC_PURE\n #define MACHOPIC_PURE\t\t(flag_pic && ! MACHO_DYNAMIC_NO_PIC_P)\n \n #undef TARGET_ENCODE_SECTION_INFO"}, {"sha": "fac30bbd2bd46b8f5aea25f9d47aad40e02ac9b6", "filename": "gcc/config/darwin.opt", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fee3eacd6fea60bfc2bed8477315ea1f125a278c/gcc%2Fconfig%2Fdarwin.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fee3eacd6fea60bfc2bed8477315ea1f125a278c/gcc%2Fconfig%2Fdarwin.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.opt?ref=fee3eacd6fea60bfc2bed8477315ea1f125a278c", "patch": "@@ -26,6 +26,15 @@ Wnonportable-cfstrings\n Target Report Var(darwin_warn_nonportable_cfstrings) Init(1) Warning\n Warn if constant CFString objects contain non-portable characters\n \n+; Use new-style pic stubs if this is true, x86 only so far.\n+matt-stubs\n+Target Report Var(darwin_macho_att_stub) Init(1)\n+Generate AT&T-style stubs for Mach-O\n+\n+mdynamic-no-pic\n+Target Common Report Mask(MACHO_DYNAMIC_NO_PIC)\n+Generate code suitable for executables (NOT shared libs)\n+\n mfix-and-continue\n Target Report Var(darwin_fix_and_continue)\n Generate code suitable for fast turn around debugging"}, {"sha": "7c4ed633b181812b84bdc89bb823c806939808e2", "filename": "gcc/config/i386/darwin.h", "status": "modified", "additions": 21, "deletions": 12, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fee3eacd6fea60bfc2bed8477315ea1f125a278c/gcc%2Fconfig%2Fi386%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fee3eacd6fea60bfc2bed8477315ea1f125a278c/gcc%2Fconfig%2Fi386%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdarwin.h?ref=fee3eacd6fea60bfc2bed8477315ea1f125a278c", "patch": "@@ -23,6 +23,9 @@ along with GCC; see the file COPYING3.  If not see\n #undef TARGET_MACHO\n #define TARGET_MACHO 1\n \n+#undef DARWIN_X86\n+#define DARWIN_X86 1\n+\n #define TARGET_VERSION fprintf (stderr, \" (i686 Darwin)\");\n \n #undef  TARGET_64BIT\n@@ -66,6 +69,11 @@ extern int darwin_emit_branch_islands;\n #undef TARGET_MACHO_BRANCH_ISLANDS\n #define TARGET_MACHO_BRANCH_ISLANDS darwin_emit_branch_islands\n \n+/* For compatibility with OSX system tools, use the new style of pic stub\n+   if this is set.  */\n+#undef  MACHOPIC_ATT_STUB\n+#define MACHOPIC_ATT_STUB (darwin_macho_att_stub)\n+\n #undef MAX_BITS_PER_WORD\n #define MAX_BITS_PER_WORD 64\n \n@@ -100,7 +108,6 @@ extern int darwin_emit_branch_islands;\n \n #undef CC1_SPEC\n #define CC1_SPEC \"%(cc1_cpu) \\\n-  %<mdynamic-no-pic \" /* For now, we just ignore this flag */ \" \\\n   %{!mkernel:%{!static:%{!mdynamic-no-pic:-fPIC}}} \\\n   %{!mmacosx-version-min=*:-mmacosx-version-min=%(darwin_minversion)} \\\n   %{g: %{!fno-eliminate-unused-debug-symbols: -feliminate-unused-debug-symbols }}\"\n@@ -182,23 +189,13 @@ extern int darwin_emit_branch_islands;\n #undef TARGET_SUBTARGET64_ISA_DEFAULT\n #define TARGET_SUBTARGET64_ISA_DEFAULT TARGET_SUBTARGET32_ISA_DEFAULT\n \n-/* For now, disable dynamic-no-pic.  We'll need to go through i386.c\n-   with a fine-tooth comb looking for refs to flag_pic!  */\n-#define MASK_MACHO_DYNAMIC_NO_PIC 0\n-#define TARGET_DYNAMIC_NO_PIC\t  (target_flags & MASK_MACHO_DYNAMIC_NO_PIC)\n-\n #undef GOT_SYMBOL_NAME\n #define GOT_SYMBOL_NAME MACHOPIC_FUNCTION_BASE_NAME\n \n /* Define the syntax of pseudo-ops, labels and comments.  */\n \n #define LPREFIX \"L\"\n \n-/* These are used by -fbranch-probabilities */\n-#define HOT_TEXT_SECTION_NAME \"__TEXT,__text,regular,pure_instructions\"\n-#define UNLIKELY_EXECUTED_TEXT_SECTION_NAME \\\n-                              \"__TEXT,__unlikely,regular,pure_instructions\"\n-\n /* Assembler pseudos to introduce constants of various size.  */\n \n #define ASM_BYTE \"\\t.byte\\t\"\n@@ -239,7 +236,8 @@ extern int darwin_emit_branch_islands;\n #undef FUNCTION_PROFILER\n #define FUNCTION_PROFILER(FILE, LABELNO)\t\t\t\t\\\n     do {\t\t\t\t\t\t\t\t\\\n-      if (TARGET_MACHO_BRANCH_ISLANDS && MACHOPIC_INDIRECT && !TARGET_64BIT)\t\t\\\n+      if (TARGET_MACHO_BRANCH_ISLANDS \t\t\t\t\t\\\n+\t   && MACHOPIC_INDIRECT && !TARGET_64BIT)\t\t\t\\\n \t{\t\t\t\t\t\t\t\t\\\n \t  const char *name = machopic_mcount_stub_name ();\t\t\\\n \t  fprintf (FILE, \"\\tcall %s\\n\", name+1);  /*  skip '&'  */\t\\\n@@ -253,6 +251,13 @@ extern int darwin_emit_branch_islands;\n     SUBTARGET_C_COMMON_OVERRIDE_OPTIONS;\t\t\t\t\\\n   } while (0)\n \n+#undef SUBTARGET_OVERRIDE_OPTIONS\n+#define SUBTARGET_OVERRIDE_OPTIONS \\\n+do {\t\t\t\t\t\t\t\t\t\\\n+  if (TARGET_64BIT && MACHO_DYNAMIC_NO_PIC_P)\t\t\t\t\\\n+    target_flags &= ~MASK_MACHO_DYNAMIC_NO_PIC;\t\t\t\t\\\n+} while (0)\n+\n /* Darwin on x86_64 uses dwarf-2 by default.  Pre-darwin9 32-bit\n    compiles default to stabs+.  darwin9+ defaults to dwarf-2.  */\n #ifndef DARWIN_PREFER_DWARF\n@@ -313,6 +318,10 @@ extern int darwin_emit_branch_islands;\n #undef MACHO_SYMBOL_FLAG_VARIABLE\n #define MACHO_SYMBOL_FLAG_VARIABLE ((SYMBOL_FLAG_MACH_DEP) << 3)\n \n+#undef MACHOPIC_NL_SYMBOL_PTR_SECTION\n+#define MACHOPIC_NL_SYMBOL_PTR_SECTION \\\n+\t\t\".section __IMPORT,__pointers,non_lazy_symbol_pointers\"\n+\n #define SUBTARGET32_DEFAULT_CPU \"i686\"\n \n #undef  SUBTARGET_INIT_BUILTINS"}, {"sha": "89726d8f506150ea82a12c04c7faaf9a886c8ce3", "filename": "gcc/config/i386/darwin.opt", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/551677bf78ae1561354c6204d8d15340cd5776b7/gcc%2Fconfig%2Fi386%2Fdarwin.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/551677bf78ae1561354c6204d8d15340cd5776b7/gcc%2Fconfig%2Fi386%2Fdarwin.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdarwin.opt?ref=551677bf78ae1561354c6204d8d15340cd5776b7", "patch": "@@ -1,22 +0,0 @@\n-; Darwin options for IA32 port.\n-;\n-; Copyright (C) 2010 Free Software Foundation, Inc.\n-;\n-; This file is part of GCC.\n-;\n-; GCC is free software; you can redistribute it and/or modify it under\n-; the terms of the GNU General Public License as published by the Free\n-; Software Foundation; either version 3, or (at your option) any later\n-; version.\n-;\n-; GCC is distributed in the hope that it will be useful, but WITHOUT\n-; ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n-; or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n-; License for more details.\n-;\n-; You should have received a copy of the GNU General Public License\n-; along with GCC; see the file COPYING3.  If not see\n-; <http://www.gnu.org/licenses/>.\n-\n-mdynamic-no-pic\n-Target RejectNegative Ignore"}, {"sha": "eb3e623925db9e1716f3a82c07d47b5660dd8c88", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 101, "deletions": 18, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fee3eacd6fea60bfc2bed8477315ea1f125a278c/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fee3eacd6fea60bfc2bed8477315ea1f125a278c/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=fee3eacd6fea60bfc2bed8477315ea1f125a278c", "patch": "@@ -4974,8 +4974,11 @@ ix86_function_ok_for_sibcall (tree decl, tree exp)\n \n   /* If we are generating position-independent code, we cannot sibcall\n      optimize any indirect call, or a direct call to a global function,\n-     as the PLT requires %ebx be live.  */\n-  if (!TARGET_64BIT && flag_pic && (!decl || !targetm.binds_local_p (decl)))\n+     as the PLT requires %ebx be live. (Darwin does not have a PLT.)  */\n+  if (!TARGET_MACHO\n+      && !TARGET_64BIT \n+      && flag_pic \n+      && (!decl || !targetm.binds_local_p (decl)))\n     return false;\n \n   /* If we need to align the outgoing stack, then sibcalling would\n@@ -11607,6 +11610,12 @@ legitimate_constant_p (rtx x)\n       if (TARGET_DLLIMPORT_DECL_ATTRIBUTES\n \t  && SYMBOL_REF_DLLIMPORT_P (x))\n \treturn false;\n+\n+#if TARGET_MACHO\n+      /* mdynamic-no-pic */\n+      if (MACHO_DYNAMIC_NO_PIC_P)\n+\treturn machopic_symbol_defined_p (x);\n+#endif\n       break;\n \n     case CONST_DOUBLE:\n@@ -11977,9 +11986,15 @@ ix86_legitimate_address_p (enum machine_mode mode ATTRIBUTE_UNUSED,\n \t\t/* Non-constant pic memory reference.  */\n \t\treturn false;\n \t    }\n-\t  else if (! legitimate_pic_address_disp_p (disp))\n+\t  else if ((!TARGET_MACHO || flag_pic)\n+\t\t    && ! legitimate_pic_address_disp_p (disp))\n \t    /* Displacement is an invalid pic construct.  */\n \t    return false;\n+#if TARGET_MACHO\n+\t  else if (MACHO_DYNAMIC_NO_PIC_P && !legitimate_constant_p (disp))\n+\t    /* displacment must be referenced via non_lazy_pointer */\n+\t    return false;\n+#endif\n \n           /* This code used to verify that a symbolic pic displacement\n \t     includes the pic_offset_table_rtx register.\n@@ -12588,6 +12603,11 @@ ix86_legitimize_address (rtx x, rtx oldx ATTRIBUTE_UNUSED,\n   if (flag_pic && SYMBOLIC_CONST (x))\n     return legitimize_pic_address (x, 0);\n \n+#if TARGET_MACHO\n+  if (MACHO_DYNAMIC_NO_PIC_P && SYMBOLIC_CONST (x))\n+    return machopic_indirect_data_reference (x, 0);\n+#endif\n+\n   /* Canonicalize shifts by 0, 1, 2, 3 into multiply */\n   if (GET_CODE (x) == ASHIFT\n       && CONST_INT_P (XEXP (x, 1))\n@@ -14085,7 +14105,7 @@ ix86_print_operand (FILE *file, rtx x, int code)\n \t}\n       if (CONST_INT_P (x))\n \tfprintf (file, HOST_WIDE_INT_PRINT_DEC, INTVAL (x));\n-      else if (flag_pic)\n+      else if (flag_pic || MACHOPIC_INDIRECT)\n \toutput_pic_addr_const (file, x, code);\n       else\n \toutput_addr_const (file, x);\n@@ -15066,25 +15086,43 @@ ix86_expand_move (enum machine_mode mode, rtx operands[])\n \t}\n     }\n \n-  if (flag_pic && mode == Pmode && symbolic_operand (op1, Pmode))\n+  if ((flag_pic || MACHOPIC_INDIRECT) \n+       && mode == Pmode && symbolic_operand (op1, Pmode))\n     {\n       if (TARGET_MACHO && !TARGET_64BIT)\n \t{\n #if TARGET_MACHO\n-\t  if (MACHOPIC_PURE)\n+\t  /* dynamic-no-pic */\n+\t  if (MACHOPIC_INDIRECT)\n \t    {\n \t      rtx temp = ((reload_in_progress\n \t\t\t   || ((op0 && REG_P (op0))\n \t\t\t       && mode == Pmode))\n \t\t\t  ? op0 : gen_reg_rtx (Pmode));\n \t      op1 = machopic_indirect_data_reference (op1, temp);\n-\t      op1 = machopic_legitimize_pic_address (op1, mode,\n-\t\t\t\t\t\t     temp == op1 ? 0 : temp);\n+\t      if (MACHOPIC_PURE)\n+\t\top1 = machopic_legitimize_pic_address (op1, mode,\n+\t\t\t\t\t\t       temp == op1 ? 0 : temp);\n \t    }\n-\t  else if (MACHOPIC_INDIRECT)\n-\t    op1 = machopic_indirect_data_reference (op1, 0);\n-\t  if (op0 == op1)\n+\t  if (op0 != op1 && GET_CODE (op0) != MEM)\n+\t    {\n+\t      rtx insn = gen_rtx_SET (VOIDmode, op0, op1);\n+\t      emit_insn (insn);\n+\t      return;\n+\t    }\n+\t  if (GET_CODE (op0) == MEM)\n+\t    op1 = force_reg (Pmode, op1);\n+\t  else\n+\t    {\n+\t      rtx temp = op0;\n+\t      if (GET_CODE (temp) != REG)\n+\t\ttemp = gen_reg_rtx (Pmode);\n+\t      temp = legitimize_pic_address (op1, temp);\n+\t      if (temp == op0)\n \t    return;\n+\t      op1 = temp;\n+\t    }\n+      /* dynamic-no-pic */\n #endif\n \t}\n       else\n@@ -28421,36 +28459,81 @@ machopic_output_stub (FILE *file, const char *symb, const char *stub)\n \n   sprintf (lazy_ptr_name, \"L%d$lz\", label);\n \n-  if (MACHOPIC_PURE)\n+  if (MACHOPIC_ATT_STUB)\n+    switch_to_section (darwin_sections[machopic_picsymbol_stub3_section]);\n+  else if (MACHOPIC_PURE)\n+    {\n+      if (TARGET_DEEP_BRANCH_PREDICTION)\n+\tswitch_to_section (darwin_sections[machopic_picsymbol_stub2_section]);\n+      else\n     switch_to_section (darwin_sections[machopic_picsymbol_stub_section]);\n+    }\n   else\n     switch_to_section (darwin_sections[machopic_symbol_stub_section]);\n \n   fprintf (file, \"%s:\\n\", stub);\n   fprintf (file, \"\\t.indirect_symbol %s\\n\", symbol_name);\n \n-  if (MACHOPIC_PURE)\n+  if (MACHOPIC_ATT_STUB)\n+    {\n+      fprintf (file, \"\\thlt ; hlt ; hlt ; hlt ; hlt\\n\");\n+    }\n+  else if (MACHOPIC_PURE)\n     {\n-      fprintf (file, \"\\tcall\\tLPC$%d\\nLPC$%d:\\tpopl\\t%%eax\\n\", label, label);\n-      fprintf (file, \"\\tmovl\\t%s-LPC$%d(%%eax),%%edx\\n\", lazy_ptr_name, label);\n-      fprintf (file, \"\\tjmp\\t*%%edx\\n\");\n+      /* PIC stub.  */\n+      if (TARGET_DEEP_BRANCH_PREDICTION)\n+\t{\n+\t  /* 25-byte PIC stub using \"CALL get_pc_thunk\".  */\n+\t  rtx tmp = gen_rtx_REG (SImode, 2 /* ECX */);\n+\t  output_set_got (tmp, NULL_RTX);\t/* \"CALL ___<cpu>.get_pc_thunk.cx\".  */\n+\t  fprintf (file, \"LPC$%d:\\tmovl\\t%s-LPC$%d(%%ecx),%%ecx\\n\", label, lazy_ptr_name, label);\n+\t}\n+      else\n+\t{\n+\t  /* 26-byte PIC stub using inline picbase: \"CALL L42 ! L42: pop %eax\".  */\n+\t  fprintf (file, \"\\tcall LPC$%d\\nLPC$%d:\\tpopl %%ecx\\n\", label, label);\n+\t  fprintf (file, \"\\tmovl %s-LPC$%d(%%ecx),%%ecx\\n\", lazy_ptr_name, label);\n+\t}\n+      fprintf (file, \"\\tjmp\\t*%%ecx\\n\");\n     }\n   else\n     fprintf (file, \"\\tjmp\\t*%s\\n\", lazy_ptr_name);\n \n+  /* The AT&T-style (\"self-modifying\") stub is not lazily bound, thus\n+     it needs no stub-binding-helper.  */\n+  if (MACHOPIC_ATT_STUB)\n+    return;\n+\n   fprintf (file, \"%s:\\n\", binder_name);\n \n   if (MACHOPIC_PURE)\n     {\n-      fprintf (file, \"\\tlea\\t%s-LPC$%d(%%eax),%%eax\\n\", lazy_ptr_name, label);\n-      fputs (\"\\tpushl\\t%eax\\n\", file);\n+      fprintf (file, \"\\tlea\\t%s-%s(%%ecx),%%ecx\\n\", lazy_ptr_name, binder_name);\n+      fprintf (file, \"\\tpushl\\t%%ecx\\n\");\n     }\n   else\n     fprintf (file, \"\\tpushl\\t$%s\\n\", lazy_ptr_name);\n \n   fputs (\"\\tjmp\\tdyld_stub_binding_helper\\n\", file);\n \n+  /* N.B. Keep the correspondence of these\n+     'symbol_ptr/symbol_ptr2/symbol_ptr3' sections consistent with the\n+     old-pic/new-pic/non-pic stubs; altering this will break\n+     compatibility with existing dylibs.  */\n+  if (MACHOPIC_PURE)\n+    {\n+      /* PIC stubs.  */\n+      if (TARGET_DEEP_BRANCH_PREDICTION)\n+\t/* 25-byte PIC stub using \"CALL get_pc_thunk\".  */\n+\tswitch_to_section (darwin_sections[machopic_lazy_symbol_ptr2_section]);\n+      else\n+\t/* 26-byte PIC stub using inline picbase: \"CALL L42 ! L42: pop %ebx\".  */\n   switch_to_section (darwin_sections[machopic_lazy_symbol_ptr_section]);\n+    }\n+  else\n+    /* 16-byte -mdynamic-no-pic stub.  */\n+    switch_to_section(darwin_sections[machopic_lazy_symbol_ptr3_section]);\n+\n   fprintf (file, \"%s:\\n\", lazy_ptr_name);\n   fprintf (file, \"\\t.indirect_symbol %s\\n\", symbol_name);\n   fprintf (file, ASM_LONG \"%s\\n\", binder_name);"}, {"sha": "0257dbbe4e9b946b8ec3ff476fe02cb6c6ab836d", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fee3eacd6fea60bfc2bed8477315ea1f125a278c/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fee3eacd6fea60bfc2bed8477315ea1f125a278c/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=fee3eacd6fea60bfc2bed8477315ea1f125a278c", "patch": "@@ -479,16 +479,15 @@ extern tree x86_mfence;\n #define TARGET_SUBTARGET64_DEFAULT 0\n #define TARGET_SUBTARGET64_ISA_DEFAULT 0\n \n-/* This is not really a target flag, but is done this way so that\n-   it's analogous to similar code for Mach-O on PowerPC.  darwin.h\n-   redefines this to 1.  */\n+/* Replace MACH-O, ifdefs by in-line tests, where possible. \n+   (a) Macros defined in config/i386/darwin.h  */\n #define TARGET_MACHO 0\n-\n-/* Branch island 'stubs' are emitted for earlier versions of darwin.\n-   This provides a default (over-ridden in darwin.h.)  */\n-#ifndef TARGET_MACHO_BRANCH_ISLANDS\n #define TARGET_MACHO_BRANCH_ISLANDS 0\n-#endif\n+#define MACHOPIC_ATT_STUB 0\n+/* (b) Macros defined in config/darwin.h  */\n+#define MACHO_DYNAMIC_NO_PIC_P 0\n+#define MACHOPIC_INDIRECT 0\n+#define MACHOPIC_PURE 0\n \n /* For the Windows 64-bit ABI.  */\n #define TARGET_64BIT_MS_ABI (TARGET_64BIT && ix86_cfun_abi () == MS_ABI)"}, {"sha": "cc982e75958453e9d4358b4410b5670795e01268", "filename": "gcc/config/rs6000/darwin.h", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fee3eacd6fea60bfc2bed8477315ea1f125a278c/gcc%2Fconfig%2Frs6000%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fee3eacd6fea60bfc2bed8477315ea1f125a278c/gcc%2Fconfig%2Frs6000%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdarwin.h?ref=fee3eacd6fea60bfc2bed8477315ea1f125a278c", "patch": "@@ -1,5 +1,5 @@\n /* Target definitions for PowerPC running Darwin (Mac OS X).\n-   Copyright (C) 1997, 2000, 2001, 2003, 2004, 2005, 2006, 2007, 2008\n+   Copyright (C) 1997, 2000, 2001, 2003, 2004, 2005, 2006, 2007, 2008, 2010\n    Free Software Foundation, Inc.\n    Contributed by Apple Computer Inc.\n \n@@ -19,6 +19,9 @@\n    along with GCC; see the file COPYING3.  If not see\n    <http://www.gnu.org/licenses/>.  */\n \n+#undef DARWIN_PPC\n+#define DARWIN_PPC 1\n+\n #undef  TARGET_VERSION\n #define TARGET_VERSION fprintf (stderr, \" (Darwin/PowerPC)\");\n \n@@ -51,9 +54,6 @@\n #undef  PTRDIFF_TYPE\n #define PTRDIFF_TYPE (TARGET_64BIT ? \"long int\" : \"int\")\n \n-/* Translate config/rs6000/darwin.opt to config/darwin.h.  */\n-#define TARGET_DYNAMIC_NO_PIC (TARGET_MACHO_DYNAMIC_NO_PIC)\n-\n #define TARGET_OS_CPP_BUILTINS()\t\t\t\\\n   do\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\\\n@@ -184,11 +184,6 @@ extern int darwin_emit_branch_islands;\n   (RS6000_ALIGN (crtl->outgoing_args_size, 16)\t\t\\\n    + (STACK_POINTER_OFFSET))\n \n-/* These are used by -fbranch-probabilities */\n-#define HOT_TEXT_SECTION_NAME \"__TEXT,__text,regular,pure_instructions\"\n-#define UNLIKELY_EXECUTED_TEXT_SECTION_NAME \\\n-                              \"__TEXT,__unlikely,regular,pure_instructions\"\n-\n /* Define cutoff for using external functions to save floating point.\n    Currently on Darwin, always use inline stores.  */\n "}, {"sha": "de76c4dc1ad2d376646bbb6bc4ba8bd30895914c", "filename": "gcc/config/rs6000/darwin.opt", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fee3eacd6fea60bfc2bed8477315ea1f125a278c/gcc%2Fconfig%2Frs6000%2Fdarwin.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fee3eacd6fea60bfc2bed8477315ea1f125a278c/gcc%2Fconfig%2Frs6000%2Fdarwin.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdarwin.opt?ref=fee3eacd6fea60bfc2bed8477315ea1f125a278c", "patch": "@@ -1,6 +1,6 @@\n ; Darwin options for PPC port.\n ;\n-; Copyright (C) 2005, 2007 Free Software Foundation, Inc.\n+; Copyright (C) 2005, 2007, 2010 Free Software Foundation, Inc.\n ; Contributed by Aldy Hernandez <aldy@quesejoda.com>.\n ;\n ; This file is part of GCC.\n@@ -26,7 +26,3 @@ Generate 64-bit code\n m32\n Target RejectNegative Negative(m64) InverseMask(64BIT)\n Generate 32-bit code\n-\n-mdynamic-no-pic\n-Target Report Mask(MACHO_DYNAMIC_NO_PIC)\n-Generate code suitable for executables (NOT shared libs)"}, {"sha": "78f0a14e2f17742b89def1ea134f06fef5399df3", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fee3eacd6fea60bfc2bed8477315ea1f125a278c/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fee3eacd6fea60bfc2bed8477315ea1f125a278c/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=fee3eacd6fea60bfc2bed8477315ea1f125a278c", "patch": "@@ -2367,21 +2367,11 @@ darwin_rs6000_override_options (void)\n      off.  */\n   rs6000_altivec_abi = 1;\n   TARGET_ALTIVEC_VRSAVE = 1;\n-  if (DEFAULT_ABI == ABI_DARWIN)\n-  {\n-    if (MACHO_DYNAMIC_NO_PIC_P)\n-      {\n-        if (flag_pic)\n-            warning (0, \"-mdynamic-no-pic overrides -fpic or -fPIC\");\n-        flag_pic = 0;\n-      }\n-    else if (flag_pic == 1)\n-      {\n-        flag_pic = 2;\n-      }\n-    if (TARGET_64BIT)\n+\n+  if (DEFAULT_ABI == ABI_DARWIN\n+      && TARGET_64BIT)\n       darwin_one_byte_bool = 1;\n-  }\n+\n   if (TARGET_64BIT && ! TARGET_POWERPC64)\n     {\n       target_flags |= MASK_POWERPC64;"}]}