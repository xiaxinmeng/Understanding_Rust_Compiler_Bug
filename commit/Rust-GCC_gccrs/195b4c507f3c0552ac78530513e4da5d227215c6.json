{"sha": "195b4c507f3c0552ac78530513e4da5d227215c6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTk1YjRjNTA3ZjNjMDU1MmFjNzg1MzA1MTNlNGRhNWQyMjcyMTVjNg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2012-06-27T11:32:30Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-06-27T11:32:30Z"}, "message": "re PR middle-end/53676 (empty loop is not always removed now)\n\n2012-06-27  Richard Guenther  <rguenther@suse.de>\n\n\tPR middle-end/53676\n\t* tree-chrec.c (chrec_convert_1): Represent truncation to\n\ta type with undefined overflow as truncation to an unsigned\n\ttype converted to the type with undefined overflow.\n\t* tree-scalar-evolution.c (interpret_rhs_expr): For computing\n\tthe scalar evolution of a truncated widened operation avoid\n\tlooking at the non-existing evolution of the widened operation\n\tresult.\n\n\t* gcc.dg/tree-ssa/scev-6.c: New testcase.\n\nFrom-SVN: r189013", "tree": {"sha": "d0a3413286a82915919c9aaf8c25c24327aaa711", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d0a3413286a82915919c9aaf8c25c24327aaa711"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/195b4c507f3c0552ac78530513e4da5d227215c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/195b4c507f3c0552ac78530513e4da5d227215c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/195b4c507f3c0552ac78530513e4da5d227215c6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/195b4c507f3c0552ac78530513e4da5d227215c6/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "be7493cabbc288d598ac3ede0fc8395e780d1cfa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be7493cabbc288d598ac3ede0fc8395e780d1cfa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be7493cabbc288d598ac3ede0fc8395e780d1cfa"}], "stats": {"total": 81, "additions": 80, "deletions": 1}, "files": [{"sha": "82309f8d4eab979f336b9b1173ce31cdfea6008f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/195b4c507f3c0552ac78530513e4da5d227215c6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/195b4c507f3c0552ac78530513e4da5d227215c6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=195b4c507f3c0552ac78530513e4da5d227215c6", "patch": "@@ -1,3 +1,14 @@\n+2012-06-27  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/53676\n+\t* tree-chrec.c (chrec_convert_1): Represent truncation to\n+\ta type with undefined overflow as truncation to an unsigned\n+\ttype converted to the type with undefined overflow.\n+\t* tree-scalar-evolution.c (interpret_rhs_expr): For computing\n+\tthe scalar evolution of a truncated widened operation avoid\n+\tlooking at the non-existing evolution of the widened operation\n+\tresult.\n+\n 2012-06-27  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/53774"}, {"sha": "2b4c5c83a499f6e95294293d8508efb8bd0db551", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/195b4c507f3c0552ac78530513e4da5d227215c6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/195b4c507f3c0552ac78530513e4da5d227215c6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=195b4c507f3c0552ac78530513e4da5d227215c6", "patch": "@@ -1,3 +1,8 @@\n+2012-06-27  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/53676\n+\t* gcc.dg/tree-ssa/scev-6.c: New testcase.\n+\n 2012-06-26  Janis Johnson  <janisjo@codesourcery.com>\n \n \t* lib/scandump.exp (scan-dump, scan-dump-not, scan-dump-dem,"}, {"sha": "3b02374a18b64144f89c6f7f9f9e183c2d0bc6bf", "filename": "gcc/testsuite/gcc.dg/tree-ssa/scev-6.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/195b4c507f3c0552ac78530513e4da5d227215c6/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fscev-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/195b4c507f3c0552ac78530513e4da5d227215c6/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fscev-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fscev-6.c?ref=195b4c507f3c0552ac78530513e4da5d227215c6", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+\n+int main()\n+{\n+  int i;\n+  signed char result = 0;\n+  for (i = 0; i != 8000; ++i)\n+    {\n+      int tem = result;\n+      tem = tem + 2;\n+      result = tem;\n+    }\n+  if (__builtin_abs ((int)(signed char)((unsigned char ) result + 128)) != 0)\n+    __builtin_abort ();\n+  return 0;\n+}\n+\n+/* SCEV constant propagation should be able to compute the overall effect\n+   of the loop.  */\n+\n+/* { dg-final { scan-tree-dump-not \"abort\" \"optimized\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "82c3771b8a598356ea962c1949ae5c00c69187f8", "filename": "gcc/tree-chrec.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/195b4c507f3c0552ac78530513e4da5d227215c6/gcc%2Ftree-chrec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/195b4c507f3c0552ac78530513e4da5d227215c6/gcc%2Ftree-chrec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-chrec.c?ref=195b4c507f3c0552ac78530513e4da5d227215c6", "patch": "@@ -1365,6 +1365,23 @@ chrec_convert_1 (tree type, tree chrec, gimple at_stmt,\n     res = fold_build2 (TREE_CODE (chrec), type,\n \t\t       fold_convert (type, TREE_OPERAND (chrec, 0)),\n \t\t       fold_convert (type, TREE_OPERAND (chrec, 1)));\n+  /* Similar perform the trick that (signed char)((int)x + 2) can be\n+     narrowed to (signed char)((unsigned char)x + 2).  */\n+  else if (use_overflow_semantics\n+\t   && TREE_CODE (chrec) == POLYNOMIAL_CHREC\n+\t   && TREE_CODE (ct) == INTEGER_TYPE\n+\t   && TREE_CODE (type) == INTEGER_TYPE\n+\t   && TYPE_OVERFLOW_UNDEFINED (type)\n+\t   && TYPE_PRECISION (type) < TYPE_PRECISION (ct))\n+    {\n+      tree utype = unsigned_type_for (type);\n+      res = build_polynomial_chrec (CHREC_VARIABLE (chrec),\n+\t\t\t\t    fold_convert (utype,\n+\t\t\t\t\t\t  CHREC_LEFT (chrec)),\n+\t\t\t\t    fold_convert (utype,\n+\t\t\t\t\t\t  CHREC_RIGHT (chrec)));\n+      res = chrec_convert_1 (type, res, at_stmt, use_overflow_semantics);\n+    }\n   else\n     res = fold_convert (type, chrec);\n "}, {"sha": "486197e88a760384468e26484a9d9b4c274ef329", "filename": "gcc/tree-scalar-evolution.c", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/195b4c507f3c0552ac78530513e4da5d227215c6/gcc%2Ftree-scalar-evolution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/195b4c507f3c0552ac78530513e4da5d227215c6/gcc%2Ftree-scalar-evolution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-scalar-evolution.c?ref=195b4c507f3c0552ac78530513e4da5d227215c6", "patch": "@@ -1634,6 +1634,7 @@ interpret_rhs_expr (struct loop *loop, gimple at_stmt,\n \t\t    tree type, tree rhs1, enum tree_code code, tree rhs2)\n {\n   tree res, chrec1, chrec2;\n+  gimple def;\n \n   if (get_gimple_rhs_class (code) == GIMPLE_SINGLE_RHS)\n     {\n@@ -1759,7 +1760,29 @@ interpret_rhs_expr (struct loop *loop, gimple at_stmt,\n       break;\n \n     CASE_CONVERT:\n-      chrec1 = analyze_scalar_evolution (loop, rhs1);\n+      /* In case we have a truncation of a widened operation that in\n+         the truncated type has undefined overflow behavior analyze\n+\t the operation done in an unsigned type of the same precision\n+\t as the final truncation.  We cannot derive a scalar evolution\n+\t for the widened operation but for the truncated result.  */\n+      if (TREE_CODE (type) == INTEGER_TYPE\n+\t  && TREE_CODE (TREE_TYPE (rhs1)) == INTEGER_TYPE\n+\t  && TYPE_PRECISION (type) < TYPE_PRECISION (TREE_TYPE (rhs1))\n+\t  && TYPE_OVERFLOW_UNDEFINED (type)\n+\t  && TREE_CODE (rhs1) == SSA_NAME\n+\t  && (def = SSA_NAME_DEF_STMT (rhs1))\n+\t  && is_gimple_assign (def)\n+\t  && TREE_CODE_CLASS (gimple_assign_rhs_code (def)) == tcc_binary\n+\t  && TREE_CODE (gimple_assign_rhs2 (def)) == INTEGER_CST)\n+\t{\n+\t  tree utype = unsigned_type_for (type);\n+\t  chrec1 = interpret_rhs_expr (loop, at_stmt, utype,\n+\t\t\t\t       gimple_assign_rhs1 (def),\n+\t\t\t\t       gimple_assign_rhs_code (def),\n+\t\t\t\t       gimple_assign_rhs2 (def));\n+\t}\n+      else\n+\tchrec1 = analyze_scalar_evolution (loop, rhs1);\n       res = chrec_convert (type, chrec1, at_stmt);\n       break;\n "}]}