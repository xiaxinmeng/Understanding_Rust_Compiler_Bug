{"sha": "73fb742dc21731162383dffb76f98e70d75af450", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzNmYjc0MmRjMjE3MzExNjIzODNkZmZiNzZmOThlNzBkNzVhZjQ1MA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-10-12T12:26:02Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-10-12T12:26:02Z"}, "message": "re PR ipa/67783 (quadratic time consumption in IPA inlining with -O1 and higher)\n\n2015-10-12  Richard Biener  <rguenther@suse.de>\n\n\tPR ipa/67783\n\t* ipa-inline-analysis.c (estimate_function_body_sizes): Re-add\n\tcode that analyzes IVs on each stmt but in a cheaper way avoiding\n\tquadratic behavior.\n\nFrom-SVN: r228710", "tree": {"sha": "89de6319374effccba5c850498cdb01367bc0c15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/89de6319374effccba5c850498cdb01367bc0c15"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/73fb742dc21731162383dffb76f98e70d75af450", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73fb742dc21731162383dffb76f98e70d75af450", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73fb742dc21731162383dffb76f98e70d75af450", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73fb742dc21731162383dffb76f98e70d75af450/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "aad11912df52e9526af3c1c029541f5af2526f1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aad11912df52e9526af3c1c029541f5af2526f1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aad11912df52e9526af3c1c029541f5af2526f1c"}], "stats": {"total": 80, "additions": 55, "deletions": 25}, "files": [{"sha": "9f4e5ab32bef3b15165d1df378a5b8c4548e65c6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73fb742dc21731162383dffb76f98e70d75af450/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73fb742dc21731162383dffb76f98e70d75af450/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=73fb742dc21731162383dffb76f98e70d75af450", "patch": "@@ -1,3 +1,10 @@\n+2015-10-12  Richard Biener  <rguenther@suse.de>\n+\n+\tPR ipa/67783\n+\t* ipa-inline-analysis.c (estimate_function_body_sizes): Re-add\n+\tcode that analyzes IVs on each stmt but in a cheaper way avoiding\n+\tquadratic behavior.\n+\n 2015-10-12  Nick Clifton  <nickc@redhat.com>\n \n \t* config/msp430/msp430.c (msp430_mcu_names): Rename to"}, {"sha": "38e1ec0d5c5d0858e1cbe3fd8c1117dac8bf3690", "filename": "gcc/ipa-inline-analysis.c", "status": "modified", "additions": 48, "deletions": 25, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73fb742dc21731162383dffb76f98e70d75af450/gcc%2Fipa-inline-analysis.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73fb742dc21731162383dffb76f98e70d75af450/gcc%2Fipa-inline-analysis.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline-analysis.c?ref=73fb742dc21731162383dffb76f98e70d75af450", "patch": "@@ -2786,37 +2786,60 @@ estimate_function_body_sizes (struct cgraph_node *node, bool early)\n \t\t\t\t  &will_be_nonconstant);\n \t    }\n \t  exits.release ();\n+\t}\n \n-\t  for (gphi_iterator gsi = gsi_start_phis (loop->header);\n-\t       !gsi_end_p (gsi); gsi_next (&gsi))\n+      /* To avoid quadratic behavior we analyze stride predicates only\n+         with respect to the containing loop.  Thus we simply iterate\n+\t over all defs in the outermost loop body.  */\n+      for (loop = loops_for_fn (cfun)->tree_root->inner;\n+\t   loop != NULL; loop = loop->next)\n+\t{\n+\t  basic_block *body = get_loop_body (loop);\n+\t  for (unsigned i = 0; i < loop->num_nodes; i++)\n \t    {\n-\t      gphi *phi = gsi.phi ();\n-\t      tree use = gimple_phi_result (phi);\n-\t      affine_iv iv;\n-\t      predicate will_be_nonconstant;\n-\t      if (virtual_operand_p (use)\n-\t\t  || !simple_iv (loop, loop, use, &iv, true)\n-\t\t  || is_gimple_min_invariant (iv.step))\n-\t\tcontinue;\n-\t      will_be_nonconstant\n-\t\t= will_be_nonconstant_expr_predicate (fbi.info, info,\n-\t\t\t\t\t\t      iv.step,\n-\t\t\t\t\t\t      nonconstant_names);\n-\t      if (!true_predicate_p (&will_be_nonconstant))\n-\t\twill_be_nonconstant = and_predicates (info->conds,\n-\t\t\t\t\t\t      &bb_predicate,\n-\t\t\t\t\t\t      &will_be_nonconstant);\n-\t      if (!true_predicate_p (&will_be_nonconstant)\n-\t\t  && !false_predicate_p (&will_be_nonconstant))\n-\t\t/* This is slightly inprecise.  We may want to represent\n-\t\t   each loop with independent predicate.  */\n-\t\tloop_stride = and_predicates (info->conds, &loop_stride,\n-\t\t\t\t\t      &will_be_nonconstant);\n+\t      gimple_stmt_iterator gsi;\n+\t      bb_predicate = *(struct predicate *) body[i]->aux;\n+\t      for (gsi = gsi_start_bb (body[i]); !gsi_end_p (gsi);\n+\t\t   gsi_next (&gsi))\n+\t\t{\n+\t\t  gimple *stmt = gsi_stmt (gsi);\n+\n+\t\t  if (!is_gimple_assign (stmt))\n+\t\t    continue;\n+\n+\t\t  tree def = gimple_assign_lhs (stmt);\n+\t\t  if (TREE_CODE (def) != SSA_NAME)\n+\t\t    continue;\n+\n+\t\t  affine_iv iv;\n+\t\t  if (!simple_iv (loop_containing_stmt (stmt),\n+\t\t\t\t  loop_containing_stmt (stmt),\n+\t\t\t\t  def, &iv, true)\n+\t\t      || is_gimple_min_invariant (iv.step))\n+\t\t    continue;\n+\n+\t\t  predicate will_be_nonconstant\n+\t\t    = will_be_nonconstant_expr_predicate (fbi.info, info,\n+\t\t\t\t\t\t\t  iv.step,\n+\t\t\t\t\t\t\t  nonconstant_names);\n+\t\t  if (!true_predicate_p (&will_be_nonconstant))\n+\t\t    will_be_nonconstant\n+\t\t      = and_predicates (info->conds, &bb_predicate,\n+\t\t\t\t\t&will_be_nonconstant);\n+\t\t  if (!true_predicate_p (&will_be_nonconstant)\n+\t\t      && !false_predicate_p (&will_be_nonconstant))\n+\t\t    /* This is slightly inprecise.  We may want to represent\n+\t\t       each loop with independent predicate.  */\n+\t\t    loop_stride = and_predicates (info->conds, &loop_stride,\n+\t\t\t\t\t\t  &will_be_nonconstant);\n+\t\t}\n \t    }\n+\t  free (body);\n \t}\n       set_hint_predicate (&inline_summaries->get (node)->loop_iterations,\n \t\t\t  loop_iterations);\n-      set_hint_predicate (&inline_summaries->get (node)->loop_stride, loop_stride);\n+      set_hint_predicate (&inline_summaries->get (node)->loop_stride,\n+\t\t\t  loop_stride);\n       scev_finalize ();\n     }\n   FOR_ALL_BB_FN (bb, my_function)"}]}