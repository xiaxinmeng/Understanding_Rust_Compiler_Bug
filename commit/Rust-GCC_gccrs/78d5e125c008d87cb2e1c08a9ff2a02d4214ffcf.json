{"sha": "78d5e125c008d87cb2e1c08a9ff2a02d4214ffcf", "node_id": "C_kwDOANBUbNoAKDc4ZDVlMTI1YzAwOGQ4N2NiMmUxYzA4YTlmZjJhMDJkNDIxNGZmY2Y", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2022-07-19T03:22:24Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2022-07-20T08:11:21Z"}, "message": "Move pass_cse_sincos after vectorizer.\n\n__builtin_cexpi can't be vectorized since there's gap between it and\nvectorized sincos version(In libmvec, it passes a double and two\ndouble pointer and returns nothing.) And it will lose some\nvectorization opportunity if sin & cos are optimized to cexpi before\nvectorizer.\n\nI'm trying to add vect_recog_cexpi_pattern to split cexpi to sin and\ncos, but it failed vectorizable_simd_clone_call since NULL is returned\nby cgraph_node::get (fndecl).  So alternatively, the patch try to move\npass_cse_sincos after vectorizer, just before pas_cse_reciprocals.\n\nAlso original pass_cse_sincos additionaly expands pow&cabs, this patch\nsplit that part into a separate pass named pass_expand_powcabs which\nremains the old pass position.\n\ngcc/ChangeLog:\n\n\t* passes.def: (Split pass_cse_sincos to pass_expand_powcabs\n\tand pass_cse_sincos, and move pass_cse_sincos after vectorizer).\n\t* timevar.def (TV_TREE_POWCABS): New timevar.\n\t* tree-pass.h (make_pass_expand_powcabs): Split from pass_cse_sincos.\n\t* tree-ssa-math-opts.cc (gimple_expand_builtin_cabs): Ditto.\n\t(class pass_expand_powcabs): Ditto.\n\t(pass_expand_powcabs::execute): Ditto.\n\t(make_pass_expand_powcabs): Ditto.\n\t(pass_cse_sincos::execute): Remove pow/cabs expand part.\n\t(make_pass_cse_sincos): Ditto.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.dg/pow-sqrt-synth-1.c: Adjust testcase.", "tree": {"sha": "c5c1c2fd8e3ec2b012da79e5fe88185d7fcc453f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c5c1c2fd8e3ec2b012da79e5fe88185d7fcc453f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/78d5e125c008d87cb2e1c08a9ff2a02d4214ffcf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78d5e125c008d87cb2e1c08a9ff2a02d4214ffcf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78d5e125c008d87cb2e1c08a9ff2a02d4214ffcf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78d5e125c008d87cb2e1c08a9ff2a02d4214ffcf/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9d4c3b45c5ed5f45c8089c990dbd4e181929c3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9d4c3b45c5ed5f45c8089c990dbd4e181929c3d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9d4c3b45c5ed5f45c8089c990dbd4e181929c3d"}], "stats": {"total": 121, "additions": 97, "deletions": 24}, "files": [{"sha": "6bb92efacd451d8d607bd770426d921227c3899d", "filename": "gcc/passes.def", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78d5e125c008d87cb2e1c08a9ff2a02d4214ffcf/gcc%2Fpasses.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78d5e125c008d87cb2e1c08a9ff2a02d4214ffcf/gcc%2Fpasses.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.def?ref=78d5e125c008d87cb2e1c08a9ff2a02d4214ffcf", "patch": "@@ -253,7 +253,7 @@ along with GCC; see the file COPYING3.  If not see\n       NEXT_PASS (pass_ccp, true /* nonzero_p */);\n       /* After CCP we rewrite no longer addressed locals into SSA\n \t form if possible.  */\n-      NEXT_PASS (pass_cse_sincos);\n+      NEXT_PASS (pass_expand_powcabs);\n       NEXT_PASS (pass_optimize_bswap);\n       NEXT_PASS (pass_laddress);\n       NEXT_PASS (pass_lim);\n@@ -328,6 +328,7 @@ along with GCC; see the file COPYING3.  If not see\n       NEXT_PASS (pass_simduid_cleanup);\n       NEXT_PASS (pass_lower_vector_ssa);\n       NEXT_PASS (pass_lower_switch);\n+      NEXT_PASS (pass_cse_sincos);\n       NEXT_PASS (pass_cse_reciprocals);\n       NEXT_PASS (pass_reassoc, false /* early_p */);\n       NEXT_PASS (pass_strength_reduction);"}, {"sha": "484b29a8fc8118c3d29d1caa8dbda3e9ed93a9fb", "filename": "gcc/testsuite/gcc.dg/pow-sqrt-synth-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78d5e125c008d87cb2e1c08a9ff2a02d4214ffcf/gcc%2Ftestsuite%2Fgcc.dg%2Fpow-sqrt-synth-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78d5e125c008d87cb2e1c08a9ff2a02d4214ffcf/gcc%2Ftestsuite%2Fgcc.dg%2Fpow-sqrt-synth-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpow-sqrt-synth-1.c?ref=78d5e125c008d87cb2e1c08a9ff2a02d4214ffcf", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target sqrt_insn } } */\n-/* { dg-options \"-fdump-tree-sincos -Ofast --param max-pow-sqrt-depth=8\" } */\n+/* { dg-options \"-fdump-tree-powcabs -Ofast --param max-pow-sqrt-depth=8\" } */\n /* { dg-additional-options \"-mfloat-abi=softfp -mfpu=neon-vfpv4\" { target arm*-*-* } } */\n \n double\n@@ -34,4 +34,4 @@ vecfoo (double *a)\n     a[i] = __builtin_pow (a[i], 1.25);\n }\n \n-/* { dg-final { scan-tree-dump-times \"synthesizing\" 7 \"sincos\" } } */\n+/* { dg-final { scan-tree-dump-times \"synthesizing\" 7 \"powcabs\" } } */"}, {"sha": "651af19876f00d0c83a457ebe901956828daddfe", "filename": "gcc/timevar.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78d5e125c008d87cb2e1c08a9ff2a02d4214ffcf/gcc%2Ftimevar.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78d5e125c008d87cb2e1c08a9ff2a02d4214ffcf/gcc%2Ftimevar.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftimevar.def?ref=78d5e125c008d87cb2e1c08a9ff2a02d4214ffcf", "patch": "@@ -220,6 +220,7 @@ DEFTIMEVAR (TV_TREE_SWITCH_CONVERSION, \"tree switch conversion\")\n DEFTIMEVAR (TV_TREE_SWITCH_LOWERING,   \"tree switch lowering\")\n DEFTIMEVAR (TV_TREE_RECIP            , \"gimple CSE reciprocals\")\n DEFTIMEVAR (TV_TREE_SINCOS           , \"gimple CSE sin/cos\")\n+DEFTIMEVAR (TV_TREE_POWCABS           , \"gimple expand pow/cabs\")\n DEFTIMEVAR (TV_TREE_WIDEN_MUL        , \"gimple widening/fma detection\")\n DEFTIMEVAR (TV_TRANS_MEM             , \"transactional memory\")\n DEFTIMEVAR (TV_TREE_STRLEN           , \"tree strlen optimization\")"}, {"sha": "4dfe05ed8e0de3f0121785ea49b2bd1503f8da58", "filename": "gcc/tree-pass.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78d5e125c008d87cb2e1c08a9ff2a02d4214ffcf/gcc%2Ftree-pass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78d5e125c008d87cb2e1c08a9ff2a02d4214ffcf/gcc%2Ftree-pass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pass.h?ref=78d5e125c008d87cb2e1c08a9ff2a02d4214ffcf", "patch": "@@ -444,6 +444,7 @@ extern gimple_opt_pass *make_pass_early_warn_uninitialized (gcc::context *ctxt);\n extern gimple_opt_pass *make_pass_late_warn_uninitialized (gcc::context *ctxt);\n extern gimple_opt_pass *make_pass_cse_reciprocals (gcc::context *ctxt);\n extern gimple_opt_pass *make_pass_cse_sincos (gcc::context *ctxt);\n+extern gimple_opt_pass *make_pass_expand_powcabs (gcc::context *ctxt);\n extern gimple_opt_pass *make_pass_optimize_bswap (gcc::context *ctxt);\n extern gimple_opt_pass *make_pass_store_merging (gcc::context *ctxt);\n extern gimple_opt_pass *make_pass_optimize_widening_mul (gcc::context *ctxt);"}, {"sha": "58152b5a01c14c52c1cfb049b13a28e736e5afa0", "filename": "gcc/tree-ssa-math-opts.cc", "status": "modified", "additions": 91, "deletions": 21, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78d5e125c008d87cb2e1c08a9ff2a02d4214ffcf/gcc%2Ftree-ssa-math-opts.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78d5e125c008d87cb2e1c08a9ff2a02d4214ffcf/gcc%2Ftree-ssa-math-opts.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-math-opts.cc?ref=78d5e125c008d87cb2e1c08a9ff2a02d4214ffcf", "patch": "@@ -2226,8 +2226,7 @@ gimple_expand_builtin_cabs (gimple_stmt_iterator *gsi, location_t loc, tree arg)\n }\n \n /* Go through all calls to sin, cos and cexpi and call execute_cse_sincos_1\n-   on the SSA_NAME argument of each of them.  Also expand powi(x,n) into\n-   an optimal number of multiplies, when n is a constant.  */\n+   on the SSA_NAME argument of each of them.  */\n \n namespace {\n \n@@ -2254,8 +2253,6 @@ class pass_cse_sincos : public gimple_opt_pass\n   /* opt_pass methods: */\n   bool gate (function *) final override\n     {\n-      /* We no longer require either sincos or cexp, since powi expansion\n-\t piggybacks on this pass.  */\n       return optimize;\n     }\n \n@@ -2275,24 +2272,15 @@ pass_cse_sincos::execute (function *fun)\n   FOR_EACH_BB_FN (bb, fun)\n     {\n       gimple_stmt_iterator gsi;\n-      bool cleanup_eh = false;\n \n       for (gsi = gsi_after_labels (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n         {\n \t  gimple *stmt = gsi_stmt (gsi);\n \n-\t  /* Only the last stmt in a bb could throw, no need to call\n-\t     gimple_purge_dead_eh_edges if we change something in the middle\n-\t     of a basic block.  */\n-\t  cleanup_eh = false;\n-\n \t  if (is_gimple_call (stmt)\n \t      && gimple_call_lhs (stmt))\n \t    {\n-\t      tree arg, arg0, arg1, result;\n-\t      HOST_WIDE_INT n;\n-\t      location_t loc;\n-\n+\t      tree arg;\n \t      switch (gimple_call_combined_fn (stmt))\n \t\t{\n \t\tCASE_CFN_COS:\n@@ -2309,7 +2297,94 @@ pass_cse_sincos::execute (function *fun)\n \t\t  if (TREE_CODE (arg) == SSA_NAME)\n \t\t    cfg_changed |= execute_cse_sincos_1 (arg);\n \t\t  break;\n+\t\tdefault:\n+\t\t  break;\n+\t\t}\n+\t    }\n+\t}\n+    }\n+\n+  statistics_counter_event (fun, \"sincos statements inserted\",\n+\t\t\t    sincos_stats.inserted);\n+  statistics_counter_event (fun, \"conv statements removed\",\n+\t\t\t    sincos_stats.conv_removed);\n+\n+  return cfg_changed ? TODO_cleanup_cfg : 0;\n+}\n+\n+} // anon namespace\n+\n+gimple_opt_pass *\n+make_pass_cse_sincos (gcc::context *ctxt)\n+{\n+  return new pass_cse_sincos (ctxt);\n+}\n+\n+/* Expand powi(x,n) into an optimal number of multiplies, when n is a constant.\n+   Also expand CABS.  */\n+namespace {\n+\n+const pass_data pass_data_expand_powcabs =\n+{\n+  GIMPLE_PASS, /* type */\n+  \"powcabs\", /* name */\n+  OPTGROUP_NONE, /* optinfo_flags */\n+  TV_TREE_POWCABS, /* tv_id */\n+  PROP_ssa, /* properties_required */\n+  0, /* properties_provided */\n+  0, /* properties_destroyed */\n+  0, /* todo_flags_start */\n+  TODO_update_ssa, /* todo_flags_finish */\n+};\n+\n+class pass_expand_powcabs : public gimple_opt_pass\n+{\n+public:\n+  pass_expand_powcabs (gcc::context *ctxt)\n+    : gimple_opt_pass (pass_data_expand_powcabs, ctxt)\n+  {}\n \n+  /* opt_pass methods: */\n+  bool gate (function *) final override\n+    {\n+      return optimize;\n+    }\n+\n+  unsigned int execute (function *) final override;\n+\n+}; // class pass_expand_powcabs\n+\n+unsigned int\n+pass_expand_powcabs::execute (function *fun)\n+{\n+  basic_block bb;\n+  bool cfg_changed = false;\n+\n+  calculate_dominance_info (CDI_DOMINATORS);\n+\n+  FOR_EACH_BB_FN (bb, fun)\n+    {\n+      gimple_stmt_iterator gsi;\n+      bool cleanup_eh = false;\n+\n+      for (gsi = gsi_after_labels (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n+        {\n+\t  gimple *stmt = gsi_stmt (gsi);\n+\n+\t  /* Only the last stmt in a bb could throw, no need to call\n+\t     gimple_purge_dead_eh_edges if we change something in the middle\n+\t     of a basic block.  */\n+\t  cleanup_eh = false;\n+\n+\t  if (is_gimple_call (stmt)\n+\t      && gimple_call_lhs (stmt))\n+\t    {\n+\t      tree arg0, arg1, result;\n+\t      HOST_WIDE_INT n;\n+\t      location_t loc;\n+\n+\t      switch (gimple_call_combined_fn (stmt))\n+\t\t{\n \t\tCASE_CFN_POW:\n \t\t  arg0 = gimple_call_arg (stmt, 0);\n \t\t  arg1 = gimple_call_arg (stmt, 1);\n@@ -2405,20 +2480,15 @@ pass_cse_sincos::execute (function *fun)\n \tcfg_changed |= gimple_purge_dead_eh_edges (bb);\n     }\n \n-  statistics_counter_event (fun, \"sincos statements inserted\",\n-\t\t\t    sincos_stats.inserted);\n-  statistics_counter_event (fun, \"conv statements removed\",\n-\t\t\t    sincos_stats.conv_removed);\n-\n   return cfg_changed ? TODO_cleanup_cfg : 0;\n }\n \n } // anon namespace\n \n gimple_opt_pass *\n-make_pass_cse_sincos (gcc::context *ctxt)\n+make_pass_expand_powcabs (gcc::context *ctxt)\n {\n-  return new pass_cse_sincos (ctxt);\n+  return new pass_expand_powcabs (ctxt);\n }\n \n /* Return true if stmt is a type conversion operation that can be stripped"}]}