{"sha": "42ff474e28fa3c857296963542bc0b9e1f922b00", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDJmZjQ3NGUyOGZhM2M4NTcyOTY5NjM1NDJiYzBiOWUxZjkyMmIwMA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2021-06-28T17:34:58Z"}, "committer": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2021-06-28T17:36:34Z"}, "message": "libbacktrace: improve XCOFF support\n\nlibbacktrace/ChangeLog:\n2021-06-28  Cl\u00e9ment Chigot  <clement.chigot@atos.net>\n\n\t* xcoff.c (SSUBTYP_DWRNGES): New define.\n\t(xcoff_add): Use correct XCOFF DWARF section subtype\n\tfor DEBUG_RANGES. Remove lineoff workaround.\n\tAdjust base_address.\n\t(xcoff_initialize_syminfo): Adapt to new base_address.\n\t(xcoff_lookup_pc): Likewise.\n\t(xcoff_initialize_fileline): Likewise.", "tree": {"sha": "fbe63934f9260545ee1416aadb9c858e671dbe22", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fbe63934f9260545ee1416aadb9c858e671dbe22"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/42ff474e28fa3c857296963542bc0b9e1f922b00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42ff474e28fa3c857296963542bc0b9e1f922b00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42ff474e28fa3c857296963542bc0b9e1f922b00", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42ff474e28fa3c857296963542bc0b9e1f922b00/comments", "author": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c93f6cc952639b944ae9c459cc328a810622033", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c93f6cc952639b944ae9c459cc328a810622033", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c93f6cc952639b944ae9c459cc328a810622033"}], "stats": {"total": 35, "additions": 18, "deletions": 17}, "files": [{"sha": "2ded8f0024f56151bf84b7f01fb9c25d6b25389b", "filename": "libbacktrace/xcoff.c", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42ff474e28fa3c857296963542bc0b9e1f922b00/libbacktrace%2Fxcoff.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42ff474e28fa3c857296963542bc0b9e1f922b00/libbacktrace%2Fxcoff.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2Fxcoff.c?ref=42ff474e28fa3c857296963542bc0b9e1f922b00", "patch": "@@ -133,6 +133,7 @@ typedef struct {\n #define SSUBTYP_DWARNGE\t0x50000\t/* DWARF aranges section.  */\n #define SSUBTYP_DWABREV\t0x60000\t/* DWARF abbreviation section.  */\n #define SSUBTYP_DWSTR\t0x70000\t/* DWARF strings section.  */\n+#define SSUBTYP_DWRNGES\t0x80000\t/* DWARF ranges section.  */\n \n /* XCOFF symbol.  */\n \n@@ -586,7 +587,6 @@ xcoff_symname (const b_xcoff_syment *asym,\n static int\n xcoff_initialize_syminfo (struct backtrace_state *state,\n \t\t\t  uintptr_t base_address,\n-\t\t\t  const b_xcoff_scnhdr *sects,\n \t\t\t  const b_xcoff_syment *syms, size_t nsyms,\n \t\t\t  const unsigned char *strtab, size_t strtab_size,\n \t\t\t  backtrace_error_callback error_callback, void *data,\n@@ -628,8 +628,7 @@ xcoff_initialize_syminfo (struct backtrace_state *state,\n \t{\n \t  const b_xcoff_auxent *aux = (const b_xcoff_auxent *) (asym + 1);\n \t  xcoff_symbols[j].name = xcoff_symname (asym, strtab, strtab_size);\n-\t  xcoff_symbols[j].address = base_address + asym->n_value\n-\t\t\t\t   - sects[asym->n_scnum - 1].s_paddr;\n+\t  xcoff_symbols[j].address = base_address + asym->n_value;\n \t  /* x_fsize will be 0 if there is no debug information.  */\n \t  xcoff_symbols[j].size = aux->x_fcn.x_fsize;\n \t  ++j;\n@@ -767,7 +766,7 @@ xcoff_lookup_pc (struct backtrace_state *state ATTRIBUTE_UNUSED,\n       lineno = (const b_xcoff_lineno *) lineptr;\n       if (lineno->l_lnno == 0)\n \tbreak;\n-      if (pc <= fdata->base_address + lineno->l_addr.l_paddr - fn->sect_base)\n+      if (pc <= fdata->base_address + lineno->l_addr.l_paddr)\n \tbreak;\n       match = lnnoptr;\n       lnno = lineno->l_lnno;\n@@ -1002,7 +1001,7 @@ xcoff_initialize_fileline (struct backtrace_state *state,\n \t    fn->name = xcoff_symname (fsym, strtab, strtab_size);\n \t    fn->filename = filename;\n \t    fn->sect_base = sects[fsym->n_scnum - 1].s_paddr;\n-\t    fn->pc = base_address + fsym->n_value - fn->sect_base;\n+\t    fn->pc = base_address + fsym->n_value;\n \t    fn->size = fsize;\n \t    fn->lnno = lnno;\n \t    fn->lnnoptr = lnnoptr;\n@@ -1153,8 +1152,16 @@ xcoff_add (struct backtrace_state *state, int descriptor, off_t offset,\n \n   stext = &sects[i];\n \n-  /* AIX ldinfo_textorg includes the XCOFF headers.  */\n-  base_address = (exe ? XCOFF_AIX_TEXTBASE : base_address) + stext->s_scnptr;\n+  /* base_address represents the difference between the\n+     virtual memory address of the shared object or a loaded\n+     executable and the offset of that object in the file\n+     from which it was loaded.\n+     On AIX, virtual address is either fixed for executable\n+     or given by ldinfo.  This address will include the XCOFF\n+     headers.  */\n+  base_address = ((exe ? XCOFF_AIX_TEXTBASE : base_address)\n+\t\t  + stext->s_scnptr\n+\t\t  - stext->s_paddr);\n \n   lnnoptr = stext->s_lnnoptr;\n   nlnno = stext->s_nlnno;\n@@ -1212,7 +1219,7 @@ xcoff_add (struct backtrace_state *state, int descriptor, off_t offset,\n       if (sdata == NULL)\n \tgoto fail;\n \n-      if (!xcoff_initialize_syminfo (state, base_address, sects,\n+      if (!xcoff_initialize_syminfo (state, base_address,\n \t\t\t\t     syms_view.data, fhdr.f_nsyms,\n \t\t\t\t     str_view.data, str_size,\n \t\t\t\t     error_callback, data, sdata))\n@@ -1252,7 +1259,7 @@ xcoff_add (struct backtrace_state *state, int descriptor, off_t offset,\n \t  case SSUBTYP_DWABREV:\n \t    idx = DEBUG_ABBREV;\n \t    break;\n-\t  case SSUBTYP_DWARNGE:\n+\t  case SSUBTYP_DWRNGES:\n \t    idx = DEBUG_RANGES;\n \t    break;\n \t  case SSUBTYP_DWSTR:\n@@ -1290,13 +1297,7 @@ xcoff_add (struct backtrace_state *state, int descriptor, off_t offset,\n \n       dwarf_sections.data[DEBUG_INFO] = dwsect[DEBUG_INFO].data;\n       dwarf_sections.size[DEBUG_INFO] = dwsect[DEBUG_INFO].size;\n-#if BACKTRACE_XCOFF_SIZE == 32\n-      /* XXX workaround for broken lineoff */\n-      dwarf_sections.data[DEBUG_LINE] = dwsect[DEBUG_LINE].data - 4;\n-#else\n-      /* XXX workaround for broken lineoff */\n-      dwarf_sections.data[DEBUG_LINE] = dwsect[DEBUG_LINE].data - 12;\n-#endif\n+      dwarf_sections.data[DEBUG_LINE] = dwsect[DEBUG_LINE].data;\n       dwarf_sections.size[DEBUG_LINE] = dwsect[DEBUG_LINE].size;\n       dwarf_sections.data[DEBUG_ABBREV] = dwsect[DEBUG_ABBREV].data;\n       dwarf_sections.size[DEBUG_ABBREV] = dwsect[DEBUG_ABBREV].size;\n@@ -1305,7 +1306,7 @@ xcoff_add (struct backtrace_state *state, int descriptor, off_t offset,\n       dwarf_sections.data[DEBUG_STR] = dwsect[DEBUG_STR].data;\n       dwarf_sections.size[DEBUG_STR] = dwsect[DEBUG_STR].size;\n \n-      if (!backtrace_dwarf_add (state, 0, &dwarf_sections,\n+      if (!backtrace_dwarf_add (state, base_address, &dwarf_sections,\n \t\t\t\t1, /* big endian */\n \t\t\t\tNULL, /* altlink */\n \t\t\t\terror_callback, data, fileline_fn,"}]}