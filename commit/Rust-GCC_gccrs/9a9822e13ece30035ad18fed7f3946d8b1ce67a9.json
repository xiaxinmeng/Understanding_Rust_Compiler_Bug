{"sha": "9a9822e13ece30035ad18fed7f3946d8b1ce67a9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWE5ODIyZTEzZWNlMzAwMzVhZDE4ZmVkN2YzOTQ2ZDhiMWNlNjdhOQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2011-05-23T12:03:19Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-05-23T12:03:19Z"}, "message": "re PR tree-optimization/15419 (memcpy pessimization)\n\n2011-05-23  Richard Guenther  <rguenther@suse.de>\n\n\tPR middle-end/15419\n\t* builtins.c (fold_builtin_memory_op): Be less restrictive about\n\twhat pointer types we accept for folding.\n\n\t* gcc.dg/memcpy-3.c: New testcase.\n\nFrom-SVN: r174065", "tree": {"sha": "241dd31d7e58e6afc1ee9ea44f993a5ea97c9b9c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/241dd31d7e58e6afc1ee9ea44f993a5ea97c9b9c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9a9822e13ece30035ad18fed7f3946d8b1ce67a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a9822e13ece30035ad18fed7f3946d8b1ce67a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a9822e13ece30035ad18fed7f3946d8b1ce67a9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a9822e13ece30035ad18fed7f3946d8b1ce67a9/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c80286502f7db28d9ef38bdb613209751667834a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c80286502f7db28d9ef38bdb613209751667834a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c80286502f7db28d9ef38bdb613209751667834a"}], "stats": {"total": 42, "additions": 31, "deletions": 11}, "files": [{"sha": "25b569eefa4b10b231264434326960295ea85a1f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a9822e13ece30035ad18fed7f3946d8b1ce67a9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a9822e13ece30035ad18fed7f3946d8b1ce67a9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9a9822e13ece30035ad18fed7f3946d8b1ce67a9", "patch": "@@ -1,3 +1,9 @@\n+2011-05-23  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/15419\n+\t* builtins.c (fold_builtin_memory_op): Be less restrictive about\n+\twhat pointer types we accept for folding.\n+\n 2011-05-23  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* gthr-gnat.c: Remove."}, {"sha": "a23237dd94ad30b4516437c65e4deef28483e1bf", "filename": "gcc/builtins.c", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a9822e13ece30035ad18fed7f3946d8b1ce67a9/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a9822e13ece30035ad18fed7f3946d8b1ce67a9/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=9a9822e13ece30035ad18fed7f3946d8b1ce67a9", "patch": "@@ -8509,6 +8509,9 @@ fold_builtin_memory_op (location_t loc, tree dest, tree src,\n \t Perhaps we ought to inherit type from non-VOID argument here?  */\n       STRIP_NOPS (src);\n       STRIP_NOPS (dest);\n+      if (!POINTER_TYPE_P (TREE_TYPE (src))\n+\t  || !POINTER_TYPE_P (TREE_TYPE (dest)))\n+\treturn NULL_TREE;\n       /* As we fold (void *)(p + CST) to (void *)p + CST undo this here.  */\n       if (TREE_CODE (src) == POINTER_PLUS_EXPR)\n \t{\n@@ -8525,30 +8528,23 @@ fold_builtin_memory_op (location_t loc, tree dest, tree src,\n \t    dest = build1 (NOP_EXPR, TREE_TYPE (tem), dest);\n \t}\n       srctype = TREE_TYPE (TREE_TYPE (src));\n-      if (srctype\n-\t  && TREE_CODE (srctype) == ARRAY_TYPE\n+      if (TREE_CODE (srctype) == ARRAY_TYPE\n \t  && !tree_int_cst_equal (TYPE_SIZE_UNIT (srctype), len))\n \t{\n \t  srctype = TREE_TYPE (srctype);\n \t  STRIP_NOPS (src);\n \t  src = build1 (NOP_EXPR, build_pointer_type (srctype), src);\n \t}\n       desttype = TREE_TYPE (TREE_TYPE (dest));\n-      if (desttype\n-\t  && TREE_CODE (desttype) == ARRAY_TYPE\n+      if (TREE_CODE (desttype) == ARRAY_TYPE\n \t  && !tree_int_cst_equal (TYPE_SIZE_UNIT (desttype), len))\n \t{\n \t  desttype = TREE_TYPE (desttype);\n \t  STRIP_NOPS (dest);\n \t  dest = build1 (NOP_EXPR, build_pointer_type (desttype), dest);\n \t}\n-      if (!srctype || !desttype\n-\t  || TREE_ADDRESSABLE (srctype)\n-\t  || TREE_ADDRESSABLE (desttype)\n-\t  || !TYPE_SIZE_UNIT (srctype)\n-\t  || !TYPE_SIZE_UNIT (desttype)\n-\t  || TREE_CODE (TYPE_SIZE_UNIT (srctype)) != INTEGER_CST\n-\t  || TREE_CODE (TYPE_SIZE_UNIT (desttype)) != INTEGER_CST)\n+      if (TREE_ADDRESSABLE (srctype)\n+\t  || TREE_ADDRESSABLE (desttype))\n \treturn NULL_TREE;\n \n       src_align = get_pointer_alignment (src, BIGGEST_ALIGNMENT);"}, {"sha": "c41d32448bbc07fd836967f849e0d9ab47d136be", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a9822e13ece30035ad18fed7f3946d8b1ce67a9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a9822e13ece30035ad18fed7f3946d8b1ce67a9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9a9822e13ece30035ad18fed7f3946d8b1ce67a9", "patch": "@@ -1,3 +1,8 @@\n+2011-05-23  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/15419\n+\t* gcc.dg/memcpy-3.c: New testcase.\n+\n 2011-05-23  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/48973"}, {"sha": "ba3db56c99dfea1d285a31d7747c77f2585d69e0", "filename": "gcc/testsuite/gcc.dg/memcpy-3.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a9822e13ece30035ad18fed7f3946d8b1ce67a9/gcc%2Ftestsuite%2Fgcc.dg%2Fmemcpy-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a9822e13ece30035ad18fed7f3946d8b1ce67a9/gcc%2Ftestsuite%2Fgcc.dg%2Fmemcpy-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fmemcpy-3.c?ref=9a9822e13ece30035ad18fed7f3946d8b1ce67a9", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fdump-tree-optimized\" } */\n+\n+int get_int(const void *p)\n+{\n+  int w;\n+  __builtin_memcpy(&w, p, sizeof (int));\n+  return w;\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"memcpy\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"MEM\" 1 \"optimized\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}]}