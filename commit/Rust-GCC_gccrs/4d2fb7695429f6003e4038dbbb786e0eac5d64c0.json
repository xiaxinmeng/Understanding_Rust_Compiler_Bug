{"sha": "4d2fb7695429f6003e4038dbbb786e0eac5d64c0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGQyZmI3Njk1NDI5ZjYwMDNlNDAzOGRiYmI3ODZlMGVhYzVkNjRjMA==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2010-08-08T02:14:07Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2010-08-08T02:14:07Z"}, "message": "name-lookup.h (cp_label_binding): Declare.\n\n\t* name-lookup.h (cp_label_binding): Declare.  Declare a VEC type\n\tcontaining it.\n\t(cp_binding_level): Convert shadowed_labels and dead_vars_from_for\n\tfields to VECs.\n\t* decl.c (poplevel): Adjust for type changes.\n\t(declare_local_label): Likewise.\n\nFrom-SVN: r162991", "tree": {"sha": "ec0f33939d736e4820c0acb516a046ec590e7857", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ec0f33939d736e4820c0acb516a046ec590e7857"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4d2fb7695429f6003e4038dbbb786e0eac5d64c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d2fb7695429f6003e4038dbbb786e0eac5d64c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d2fb7695429f6003e4038dbbb786e0eac5d64c0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d2fb7695429f6003e4038dbbb786e0eac5d64c0/comments", "author": null, "committer": null, "parents": [{"sha": "daf30b2fd060396c23f5b190dc786824024c70e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/daf30b2fd060396c23f5b190dc786824024c70e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/daf30b2fd060396c23f5b190dc786824024c70e9"}], "stats": {"total": 68, "additions": 45, "deletions": 23}, "files": [{"sha": "25a45374a1358043b8fc0839a01ebcf297844537", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d2fb7695429f6003e4038dbbb786e0eac5d64c0/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d2fb7695429f6003e4038dbbb786e0eac5d64c0/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4d2fb7695429f6003e4038dbbb786e0eac5d64c0", "patch": "@@ -1,3 +1,12 @@\n+2010-08-07  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* name-lookup.h (cp_label_binding): Declare.  Declare a VEC type\n+\tcontaining it.\n+\t(cp_binding_level): Convert shadowed_labels and dead_vars_from_for\n+\tfields to VECs.\n+\t* decl.c (poplevel): Adjust for type changes.\n+\t(declare_local_label): Likewise.\n+\n 2010-08-06  Jason Merrill  <jason@redhat.com>\n \n \t* typeck.c (complete_type_or_maybe_complain): Split out from..."}, {"sha": "198921fd082139f8dc710501059faf246ea2e12e", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 21, "deletions": 16, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d2fb7695429f6003e4038dbbb786e0eac5d64c0/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d2fb7695429f6003e4038dbbb786e0eac5d64c0/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=4d2fb7695429f6003e4038dbbb786e0eac5d64c0", "patch": "@@ -543,6 +543,8 @@ poplevel (int keep, int reverse, int functionbody)\n   tree decl;\n   int leaving_for_scope;\n   scope_kind kind;\n+  unsigned ix;\n+  cp_label_binding *label_bind;\n \n   timevar_push (TV_NAME_LOOKUP);\n  restart:\n@@ -687,10 +689,9 @@ poplevel (int keep, int reverse, int functionbody)\n \t      /* Add it to the list of dead variables in the next\n \t\t outermost binding to that we can remove these when we\n \t\t leave that binding.  */\n-\t      current_binding_level->level_chain->dead_vars_from_for\n-\t\t= tree_cons (NULL_TREE, link,\n-\t\t\t     current_binding_level->level_chain->\n-\t\t\t     dead_vars_from_for);\n+\t      VEC_safe_push (tree, gc,\n+\t\t\t     current_binding_level->level_chain->dead_vars_from_for,\n+\t\t\t     link);\n \n \t      /* Although we don't pop the cxx_binding, we do clear\n \t\t its SCOPE since the scope is going away now.  */\n@@ -719,20 +720,23 @@ poplevel (int keep, int reverse, int functionbody)\n \n   /* Remove declarations for any `for' variables from inner scopes\n      that we kept around.  */\n-  for (link = current_binding_level->dead_vars_from_for;\n-       link; link = TREE_CHAIN (link))\n-    pop_binding (DECL_NAME (TREE_VALUE (link)), TREE_VALUE (link));\n+  for (ix = VEC_length (tree, current_binding_level->dead_vars_from_for) - 1;\n+       VEC_iterate (tree, current_binding_level->dead_vars_from_for, ix, decl);\n+       ix--)\n+    pop_binding (DECL_NAME (decl), decl);\n \n   /* Restore the IDENTIFIER_TYPE_VALUEs.  */\n   for (link = current_binding_level->type_shadowed;\n        link; link = TREE_CHAIN (link))\n     SET_IDENTIFIER_TYPE_VALUE (TREE_PURPOSE (link), TREE_VALUE (link));\n \n   /* Restore the IDENTIFIER_LABEL_VALUEs for local labels.  */\n-  for (link = current_binding_level->shadowed_labels;\n-       link;\n-       link = TREE_CHAIN (link))\n-    pop_local_label (TREE_VALUE (link), TREE_PURPOSE (link));\n+  for (ix = VEC_length (cp_label_binding,\n+\t\t\tcurrent_binding_level->shadowed_labels) - 1;\n+       VEC_iterate (cp_label_binding, current_binding_level->shadowed_labels,\n+\t\t    ix, label_bind);\n+       ix--)\n+    pop_local_label (label_bind->label, label_bind->prev_value);\n \n   /* There may be OVERLOADs (wrapped in TREE_LISTs) on the BLOCK_VARs\n      list if a `using' declaration put them there.  The debugging\n@@ -2508,16 +2512,17 @@ lookup_label (tree id)\n tree\n declare_local_label (tree id)\n {\n-  tree decl, shadow;\n+  tree decl;\n+  cp_label_binding *bind;\n \n   /* Add a new entry to the SHADOWED_LABELS list so that when we leave\n      this scope we can restore the old value of IDENTIFIER_TYPE_VALUE.  */\n-  shadow = tree_cons (IDENTIFIER_LABEL_VALUE (id), NULL_TREE,\n-\t\t      current_binding_level->shadowed_labels);\n-  current_binding_level->shadowed_labels = shadow;\n+  bind = VEC_safe_push (cp_label_binding, gc,\n+\t\t\tcurrent_binding_level->shadowed_labels, NULL);\n+  bind->prev_value = IDENTIFIER_LABEL_VALUE (id);\n \n   decl = make_label_decl (id, /*local_p=*/1);\n-  TREE_VALUE (shadow) = decl;\n+  bind->label = decl;\n \n   return decl;\n }"}, {"sha": "6375637de9def1ee372f87295b84bc4acdfa167f", "filename": "gcc/cp/name-lookup.h", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d2fb7695429f6003e4038dbbb786e0eac5d64c0/gcc%2Fcp%2Fname-lookup.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d2fb7695429f6003e4038dbbb786e0eac5d64c0/gcc%2Fcp%2Fname-lookup.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.h?ref=4d2fb7695429f6003e4038dbbb786e0eac5d64c0", "patch": "@@ -148,6 +148,16 @@ typedef struct GTY(()) cp_class_binding {\n DEF_VEC_O(cp_class_binding);\n DEF_VEC_ALLOC_O(cp_class_binding,gc);\n \n+typedef struct GTY(()) cp_label_binding {\n+  /* The bound LABEL_DECL.  */\n+  tree label;\n+  /* The previous IDENTIFIER_LABEL_VALUE.  */\n+  tree prev_value;\n+} cp_label_binding;\n+\n+DEF_VEC_O(cp_label_binding);\n+DEF_VEC_ALLOC_O(cp_label_binding,gc);\n+\n /* For each binding contour we allocate a binding_level structure\n    which records the names defined in that contour.\n    Contours include:\n@@ -206,10 +216,9 @@ struct GTY(()) cp_binding_level {\n        the class.  */\n     tree type_shadowed;\n \n-    /* A TREE_LIST.  Each TREE_VALUE is the LABEL_DECL for a local\n-       label in this scope.  The TREE_PURPOSE is the previous value of\n-       the IDENTIFIER_LABEL VALUE.  */\n-    tree shadowed_labels;\n+    /* Similar to class_shadowed, but for IDENTIFIER_LABEL_VALUE, and\n+       used for all binding levels.  */\n+    VEC(cp_label_binding,gc) *shadowed_labels;\n \n     /* For each level (except not the global one),\n        a chain of BLOCK nodes for all the levels\n@@ -225,9 +234,8 @@ struct GTY(()) cp_binding_level {\n \n     /* List of VAR_DECLS saved from a previous for statement.\n        These would be dead in ISO-conforming code, but might\n-       be referenced in ARM-era code.  These are stored in a\n-       TREE_LIST; the TREE_VALUE is the actual declaration.  */\n-    tree dead_vars_from_for;\n+       be referenced in ARM-era code.  */\n+    VEC(tree,gc) *dead_vars_from_for;\n \n     /* STATEMENT_LIST for statements in this binding contour.\n        Only used at present for SK_CLEANUP temporary bindings.  */"}]}