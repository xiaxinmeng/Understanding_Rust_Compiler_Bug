{"sha": "38fa938bbf94dcd06696dfd890d386f004e34604", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzhmYTkzOGJiZjk0ZGNkMDY2OTZkZmQ4OTBkMzg2ZjAwNGUzNDYwNA==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2019-05-03T13:45:59Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2019-05-03T13:45:59Z"}, "message": "[arm] PR target/89400 fix thumb1 unaligned access expansion\n\nArmv6 has support for unaligned accesses to memory.  However, the\nthumb1 code patterns were trying to use the 32-bit code constraints.\nOne failure mode from this was that the patterns are designed to be\ncompatible with conditional execution and this was then causing an\nassert in the compiler.\n\nThe unaligned_loadhis pattern is only used for expanding extv, which\nin turn is only enabled for systems supporting thumb2.  Given that\nthere is no simple expansion for a thumb1 sign-extending load (the\ninstruction has no immediate offset form and requires two registers in\nthe address) it seems simpler to just disable this for thumb1.\n\nFixed thusly:\n\n\tPR target/89400\n\t* config/arm/arm.md (unaligned_loadsi): Add variant for thumb1.\n\tRestrict 'all' variant to 32-bit configurations.\n\t(unaligned_loadhiu): Likewise.\n\t(unaligned_storehi): Likewise.\n\t(unaligned_storesi): Likewise.\n\t(unaligned_loadhis): Disable when compiling for thumb1.\n\nFrom-SVN: r270853", "tree": {"sha": "dcc087f4b6383e7cf3b4e84f30d081c157821c08", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dcc087f4b6383e7cf3b4e84f30d081c157821c08"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/38fa938bbf94dcd06696dfd890d386f004e34604", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38fa938bbf94dcd06696dfd890d386f004e34604", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38fa938bbf94dcd06696dfd890d386f004e34604", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38fa938bbf94dcd06696dfd890d386f004e34604/comments", "author": null, "committer": null, "parents": [{"sha": "051ef623d6e332a6199bbf4e6c66e53925cac825", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/051ef623d6e332a6199bbf4e6c66e53925cac825", "html_url": "https://github.com/Rust-GCC/gccrs/commit/051ef623d6e332a6199bbf4e6c66e53925cac825"}], "stats": {"total": 84, "additions": 55, "deletions": 29}, "files": [{"sha": "7ab0457c150a4ba4de396021e14d00e207b6d454", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38fa938bbf94dcd06696dfd890d386f004e34604/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38fa938bbf94dcd06696dfd890d386f004e34604/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=38fa938bbf94dcd06696dfd890d386f004e34604", "patch": "@@ -1,3 +1,13 @@\n+2019-05-03  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\tPR target/89400\n+\t* config/arm/arm.md (unaligned_loadsi): Add variant for thumb1.\n+\tRestrict 'all' variant to 32-bit configurations.\n+\t(unaligned_loadhiu): Likewise.\n+\t(unaligned_storehi): Likewise.\n+\t(unaligned_storesi): Likewise.\n+\t(unaligned_loadhis): Disable when compiling for thumb1.\n+\n 2019-05-03  Marc Glisse  <marc.glisse@inria.fr>\n \n \tPR tree-optimization/90269"}, {"sha": "ae582172ab9e59b29cd779b2df82111139018e08", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 45, "deletions": 29, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38fa938bbf94dcd06696dfd890d386f004e34604/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38fa938bbf94dcd06696dfd890d386f004e34604/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=38fa938bbf94dcd06696dfd890d386f004e34604", "patch": "@@ -4483,62 +4483,78 @@\n ; ARMv6+ unaligned load/store instructions (used for packed structure accesses).\n \n (define_insn \"unaligned_loadsi\"\n-  [(set (match_operand:SI 0 \"s_register_operand\" \"=l,r\")\n-\t(unspec:SI [(match_operand:SI 1 \"memory_operand\" \"Uw,m\")]\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=l,l,r\")\n+\t(unspec:SI [(match_operand:SI 1 \"memory_operand\" \"m,Uw,m\")]\n \t\t   UNSPEC_UNALIGNED_LOAD))]\n   \"unaligned_access\"\n-  \"ldr%?\\t%0, %1\\t@ unaligned\"\n-  [(set_attr \"arch\" \"t2,any\")\n-   (set_attr \"length\" \"2,4\")\n-   (set_attr \"predicable\" \"yes\")\n-   (set_attr \"predicable_short_it\" \"yes,no\")\n+  \"@\n+   ldr\\t%0, %1\\t@ unaligned\n+   ldr%?\\t%0, %1\\t@ unaligned\n+   ldr%?\\t%0, %1\\t@ unaligned\"\n+  [(set_attr \"arch\" \"t1,t2,32\")\n+   (set_attr \"length\" \"2,2,4\")\n+   (set_attr \"predicable\" \"no,yes,yes\")\n+   (set_attr \"predicable_short_it\" \"no,yes,no\")\n    (set_attr \"type\" \"load_4\")])\n \n+;; The 16-bit Thumb1 variant of ldrsh requires two registers in the\n+;; address (there's no immediate format).  That's tricky to support\n+;; here and we don't really need this pattern for that case, so only\n+;; enable for 32-bit ISAs.\n (define_insn \"unaligned_loadhis\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n \t(sign_extend:SI\n \t  (unspec:HI [(match_operand:HI 1 \"memory_operand\" \"Uh\")]\n \t\t     UNSPEC_UNALIGNED_LOAD)))]\n-  \"unaligned_access\"\n+  \"unaligned_access && TARGET_32BIT\"\n   \"ldrsh%?\\t%0, %1\\t@ unaligned\"\n   [(set_attr \"predicable\" \"yes\")\n    (set_attr \"type\" \"load_byte\")])\n \n (define_insn \"unaligned_loadhiu\"\n-  [(set (match_operand:SI 0 \"s_register_operand\" \"=l,r\")\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=l,l,r\")\n \t(zero_extend:SI\n-\t  (unspec:HI [(match_operand:HI 1 \"memory_operand\" \"Uw,m\")]\n+\t  (unspec:HI [(match_operand:HI 1 \"memory_operand\" \"m,Uw,m\")]\n \t\t     UNSPEC_UNALIGNED_LOAD)))]\n   \"unaligned_access\"\n-  \"ldrh%?\\t%0, %1\\t@ unaligned\"\n-  [(set_attr \"arch\" \"t2,any\")\n-   (set_attr \"length\" \"2,4\")\n-   (set_attr \"predicable\" \"yes\")\n-   (set_attr \"predicable_short_it\" \"yes,no\")\n+  \"@\n+   ldrh\\t%0, %1\\t@ unaligned\n+   ldrh%?\\t%0, %1\\t@ unaligned\n+   ldrh%?\\t%0, %1\\t@ unaligned\"\n+  [(set_attr \"arch\" \"t1,t2,32\")\n+   (set_attr \"length\" \"2,2,4\")\n+   (set_attr \"predicable\" \"no,yes,yes\")\n+   (set_attr \"predicable_short_it\" \"no,yes,no\")\n    (set_attr \"type\" \"load_byte\")])\n \n (define_insn \"unaligned_storesi\"\n-  [(set (match_operand:SI 0 \"memory_operand\" \"=Uw,m\")\n-\t(unspec:SI [(match_operand:SI 1 \"s_register_operand\" \"l,r\")]\n+  [(set (match_operand:SI 0 \"memory_operand\" \"=m,Uw,m\")\n+\t(unspec:SI [(match_operand:SI 1 \"s_register_operand\" \"l,l,r\")]\n \t\t   UNSPEC_UNALIGNED_STORE))]\n   \"unaligned_access\"\n-  \"str%?\\t%1, %0\\t@ unaligned\"\n-  [(set_attr \"arch\" \"t2,any\")\n-   (set_attr \"length\" \"2,4\")\n-   (set_attr \"predicable\" \"yes\")\n-   (set_attr \"predicable_short_it\" \"yes,no\")\n+  \"@\n+   str\\t%1, %0\\t@ unaligned\n+   str%?\\t%1, %0\\t@ unaligned\n+   str%?\\t%1, %0\\t@ unaligned\"\n+  [(set_attr \"arch\" \"t1,t2,32\")\n+   (set_attr \"length\" \"2,2,4\")\n+   (set_attr \"predicable\" \"no,yes,yes\")\n+   (set_attr \"predicable_short_it\" \"no,yes,no\")\n    (set_attr \"type\" \"store_4\")])\n \n (define_insn \"unaligned_storehi\"\n-  [(set (match_operand:HI 0 \"memory_operand\" \"=Uw,m\")\n-\t(unspec:HI [(match_operand:HI 1 \"s_register_operand\" \"l,r\")]\n+  [(set (match_operand:HI 0 \"memory_operand\" \"=m,Uw,m\")\n+\t(unspec:HI [(match_operand:HI 1 \"s_register_operand\" \"l,l,r\")]\n \t\t   UNSPEC_UNALIGNED_STORE))]\n   \"unaligned_access\"\n-  \"strh%?\\t%1, %0\\t@ unaligned\"\n-  [(set_attr \"arch\" \"t2,any\")\n-   (set_attr \"length\" \"2,4\")\n-   (set_attr \"predicable\" \"yes\")\n-   (set_attr \"predicable_short_it\" \"yes,no\")\n+  \"@\n+   strh\\t%1, %0\\t@ unaligned\n+   strh%?\\t%1, %0\\t@ unaligned\n+   strh%?\\t%1, %0\\t@ unaligned\"\n+  [(set_attr \"arch\" \"t1,t2,32\")\n+   (set_attr \"length\" \"2,2,4\")\n+   (set_attr \"predicable\" \"no,yes,yes\")\n+   (set_attr \"predicable_short_it\" \"no,yes,no\")\n    (set_attr \"type\" \"store_4\")])\n \n "}]}