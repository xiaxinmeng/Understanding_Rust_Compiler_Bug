{"sha": "321e0bbad67fa1cb22575cac934d0e20a7fd74df", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzIxZTBiYmFkNjdmYTFjYjIyNTc1Y2FjOTM0ZDBlMjBhN2ZkNzRkZg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-04-18T18:50:53Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-04-18T18:50:53Z"}, "message": "(expand_call): Use promote_mode.\n\nFrom-SVN: r7067", "tree": {"sha": "93e90b1255ab374af291d3f0505854ece75ed519", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/93e90b1255ab374af291d3f0505854ece75ed519"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/321e0bbad67fa1cb22575cac934d0e20a7fd74df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/321e0bbad67fa1cb22575cac934d0e20a7fd74df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/321e0bbad67fa1cb22575cac934d0e20a7fd74df", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/321e0bbad67fa1cb22575cac934d0e20a7fd74df/comments", "author": null, "committer": null, "parents": [{"sha": "9ff6578970fce27e1f14cd3d47bb372150992d2c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ff6578970fce27e1f14cd3d47bb372150992d2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ff6578970fce27e1f14cd3d47bb372150992d2c"}], "stats": {"total": 36, "additions": 10, "deletions": 26}, "files": [{"sha": "06b23876fb994914b8b39b2f8f52fd0a0aaad93c", "filename": "gcc/calls.c", "status": "modified", "additions": 10, "deletions": 26, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/321e0bbad67fa1cb22575cac934d0e20a7fd74df/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/321e0bbad67fa1cb22575cac934d0e20a7fd74df/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=321e0bbad67fa1cb22575cac934d0e20a7fd74df", "patch": "@@ -944,6 +944,7 @@ expand_call (exp, target, ignore)\n   for (p = actparms, argpos = 0; p; p = TREE_CHAIN (p), i += inc, argpos++)\n     {\n       tree type = TREE_TYPE (TREE_VALUE (p));\n+      int unsignedp;\n       enum machine_mode mode;\n \n       args[i].tree_value = TREE_VALUE (p);\n@@ -1036,20 +1037,13 @@ expand_call (exp, target, ignore)\n \t}\n \n       mode = TYPE_MODE (type);\n+      unsignedp = TREE_UNSIGNED (type);\n \n #ifdef PROMOTE_FUNCTION_ARGS\n-      /* Compute the mode in which the arg is actually to be extended to.  */\n-      if (TREE_CODE (type) == INTEGER_TYPE || TREE_CODE (type) == ENUMERAL_TYPE\n-\t  || TREE_CODE (type) == BOOLEAN_TYPE || TREE_CODE (type) == CHAR_TYPE\n-\t  || TREE_CODE (type) == REAL_TYPE || TREE_CODE (type) == POINTER_TYPE\n-\t  || TREE_CODE (type) == OFFSET_TYPE)\n-\t{\n-\t  int unsignedp = TREE_UNSIGNED (type);\n-\t  PROMOTE_MODE (mode, unsignedp, type);\n-\t  args[i].unsignedp = unsignedp;\n-\t}\n+      mode = promote_mode (type, mode, &unsignedp, 1);\n #endif\n \n+      args[i].unsignedp = unsignedp;\n       args[i].mode = mode;\n       args[i].reg = FUNCTION_ARG (args_so_far, mode, type,\n \t\t\t\t  argpos < n_named_args);\n@@ -1983,25 +1977,15 @@ expand_call (exp, target, ignore)\n   if (GET_CODE (target) == REG\n       && GET_MODE (target) != TYPE_MODE (TREE_TYPE (exp)))\n     {\n-      enum machine_mode mode = TYPE_MODE (TREE_TYPE (exp));\n-      int unsignedp = TREE_UNSIGNED (TREE_TYPE (exp));\n-\n-      if (TREE_CODE (TREE_TYPE (exp)) == INTEGER_TYPE\n-\t  || TREE_CODE (TREE_TYPE (exp)) == ENUMERAL_TYPE\n-\t  || TREE_CODE (TREE_TYPE (exp)) == BOOLEAN_TYPE\n-\t  || TREE_CODE (TREE_TYPE (exp)) == CHAR_TYPE\n-\t  || TREE_CODE (TREE_TYPE (exp)) == REAL_TYPE\n-\t  || TREE_CODE (TREE_TYPE (exp)) == POINTER_TYPE\n-\t  || TREE_CODE (TREE_TYPE (exp)) == OFFSET_TYPE)\n-\t{\n-\t  PROMOTE_MODE (mode, unsignedp, TREE_TYPE (exp));\n-\t}\n+      tree type = TREE_TYPE (exp);\n+      int unsignedp = TREE_UNSIGNED (type);\n \n-      /* If we didn't promote as expected, something is wrong.  */\n-      if (mode != GET_MODE (target))\n+      /* If we don't promote as expected, something is wrong.  */\n+      if (GET_MODE (target)\n+\t  != promote_mode (type, TYPE_MODE (type), &unsignedp, 1))\n \tabort ();\n \n-      target = gen_rtx (SUBREG, TYPE_MODE (TREE_TYPE (exp)), target, 0);\n+      target = gen_rtx (SUBREG, TYPE_MODE (type), target, 0);\n       SUBREG_PROMOTED_VAR_P (target) = 1;\n       SUBREG_PROMOTED_UNSIGNED_P (target) = unsignedp;\n     }"}]}