{"sha": "62bad7cd053b0f139bb46ae54976ed97d6dc0811", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjJiYWQ3Y2QwNTNiMGYxMzliYjQ2YWU1NDk3NmVkOTdkNmRjMDgxMQ==", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2011-11-28T20:28:23Z"}, "committer": {"name": "Andrew Macleod", "email": "amacleod@gcc.gnu.org", "date": "2011-11-28T20:28:23Z"}, "message": "c-family\n\t* c-cpp-builtin.c (cpp_atomic_builtins):New.  Emit all atomic\n\tpredefines in one place.  Add LOCK_FREE predefines.\n\t(c_cpp_builtins): Move Legacy HAVE_SYNC predefines to\n\tnew func.\n\n\tlibstdc++-v3\n\t* include/bits/atomic_base.h (ATOMIC_*_LOCK_FREE): Use new cpp\n\tpredefined macros.\n\t* testsuite/29_atomics/headers/atomic/macros.cc: Add BOOL and POINTER\n\tmacro checks.  Check for expected compile time values.\n\nFrom-SVN: r181784", "tree": {"sha": "41f01c8dcbd30412c4d9012cc48d334d8a6fd38c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/41f01c8dcbd30412c4d9012cc48d334d8a6fd38c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/62bad7cd053b0f139bb46ae54976ed97d6dc0811", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62bad7cd053b0f139bb46ae54976ed97d6dc0811", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62bad7cd053b0f139bb46ae54976ed97d6dc0811", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62bad7cd053b0f139bb46ae54976ed97d6dc0811/comments", "author": null, "committer": null, "parents": [{"sha": "f9c55897eb729f68881d8f729fb112040bec695a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9c55897eb729f68881d8f729fb112040bec695a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9c55897eb729f68881d8f729fb112040bec695a"}], "stats": {"total": 245, "additions": 170, "deletions": 75}, "files": [{"sha": "b53f76670bbbfe0fa87713543405e633da6874a9", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62bad7cd053b0f139bb46ae54976ed97d6dc0811/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62bad7cd053b0f139bb46ae54976ed97d6dc0811/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=62bad7cd053b0f139bb46ae54976ed97d6dc0811", "patch": "@@ -1,3 +1,10 @@\n+2011-11-28  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* c-cpp-builtin.c (cpp_atomic_builtins):New.  Emit all atomic\n+\tpredefines in one place.  Add LOCK_FREE predefines.\n+\t(c_cpp_builtins): Move Legacy HAVE_SYNC predefines to\n+\tnew func.\n+\n 2011-11-24  Andrew MacLeod  <amacleod@redhat.com>\n \n \tPR c/51256"}, {"sha": "8d0d4af9c925d02b5bf62dedd355a8a7c6e56d58", "filename": "gcc/c-family/c-cppbuiltin.c", "status": "modified", "additions": 113, "deletions": 47, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62bad7cd053b0f139bb46ae54976ed97d6dc0811/gcc%2Fc-family%2Fc-cppbuiltin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62bad7cd053b0f139bb46ae54976ed97d6dc0811/gcc%2Fc-family%2Fc-cppbuiltin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-cppbuiltin.c?ref=62bad7cd053b0f139bb46ae54976ed97d6dc0811", "patch": "@@ -568,6 +568,117 @@ c_cpp_builtins_optimize_pragma (cpp_reader *pfile, tree prev_tree,\n }\n \n \n+/* This function will emit cpp macros to indicate the presence of various lock\n+   free atomic operations.  */\n+   \n+static void\n+cpp_atomic_builtins (cpp_reader *pfile)\n+{\n+  /* Set a flag for each size of object that compare and swap exists for up to\n+     a 16 byte object.  */\n+#define SWAP_LIMIT  17\n+  bool have_swap[SWAP_LIMIT];\n+  unsigned int psize;\n+\n+  /* Clear the map of sizes compare_and swap exists for.  */\n+  memset (have_swap, 0, sizeof (have_swap));\n+\n+  /* Tell source code if the compiler makes sync_compare_and_swap\n+     builtins available.  */\n+#ifndef HAVE_sync_compare_and_swapqi\n+#define HAVE_sync_compare_and_swapqi 0\n+#endif\n+#ifndef HAVE_atomic_compare_and_swapqi\n+#define HAVE_atomic_compare_and_swapqi 0\n+#endif\n+\n+  if (HAVE_sync_compare_and_swapqi || HAVE_atomic_compare_and_swapqi)\n+    {\n+      cpp_define (pfile, \"__GCC_HAVE_SYNC_COMPARE_AND_SWAP_1\");\n+      have_swap[1] = true;\n+    }\n+\n+#ifndef HAVE_sync_compare_and_swaphi\n+#define HAVE_sync_compare_and_swaphi 0\n+#endif\n+#ifndef HAVE_atomic_compare_and_swaphi\n+#define HAVE_atomic_compare_and_swaphi 0\n+#endif\n+  if (HAVE_sync_compare_and_swaphi || HAVE_atomic_compare_and_swaphi)\n+    {\n+      cpp_define (pfile, \"__GCC_HAVE_SYNC_COMPARE_AND_SWAP_2\");\n+      have_swap[2] = true;\n+    }\n+\n+#ifndef HAVE_sync_compare_and_swapsi\n+#define HAVE_sync_compare_and_swapsi 0\n+#endif\n+#ifndef HAVE_atomic_compare_and_swapsi\n+#define HAVE_atomic_compare_and_swapsi 0\n+#endif\n+  if (HAVE_sync_compare_and_swapsi || HAVE_atomic_compare_and_swapsi)\n+    {\n+      cpp_define (pfile, \"__GCC_HAVE_SYNC_COMPARE_AND_SWAP_4\");\n+      have_swap[4] = true;\n+    }\n+\n+#ifndef HAVE_sync_compare_and_swapdi\n+#define HAVE_sync_compare_and_swapdi 0\n+#endif\n+#ifndef HAVE_atomic_compare_and_swapdi\n+#define HAVE_atomic_compare_and_swapdi 0\n+#endif\n+  if (HAVE_sync_compare_and_swapdi || HAVE_atomic_compare_and_swapdi)\n+    {\n+      cpp_define (pfile, \"__GCC_HAVE_SYNC_COMPARE_AND_SWAP_8\");\n+      have_swap[8] = true;\n+    }\n+\n+#ifndef HAVE_sync_compare_and_swapti\n+#define HAVE_sync_compare_and_swapti 0\n+#endif\n+#ifndef HAVE_atomic_compare_and_swapti\n+#define HAVE_atomic_compare_and_swapti 0\n+#endif\n+  if (HAVE_sync_compare_and_swapti || HAVE_atomic_compare_and_swapti)\n+    {\n+      cpp_define (pfile, \"__GCC_HAVE_SYNC_COMPARE_AND_SWAP_16\");\n+      have_swap[16] = true;\n+    }\n+\n+  /* Tell the source code about various types.  These map to the C++11 and C1x\n+     macros where 2 indicates lock-free always, and 1 indicates sometimes\n+     lock free.  */\n+#define SIZEOF_NODE(T) (tree_low_cst (TYPE_SIZE_UNIT (T), 1))\n+#define SWAP_INDEX(T) ((SIZEOF_NODE (T) < SWAP_LIMIT) ? SIZEOF_NODE (T) : 0)\n+  builtin_define_with_int_value (\"__GCC_ATOMIC_BOOL_LOCK_FREE\", \n+\t\t\t(have_swap[SWAP_INDEX (boolean_type_node)]? 2 : 1));\n+  builtin_define_with_int_value (\"__GCC_ATOMIC_CHAR_LOCK_FREE\", \n+\t\t\t(have_swap[SWAP_INDEX (signed_char_type_node)]? 2 : 1));\n+  builtin_define_with_int_value (\"__GCC_ATOMIC_CHAR16_T_LOCK_FREE\", \n+\t\t\t(have_swap[SWAP_INDEX (char16_type_node)]? 2 : 1));\n+  builtin_define_with_int_value (\"__GCC_ATOMIC_CHAR32_T_LOCK_FREE\", \n+\t\t\t(have_swap[SWAP_INDEX (char32_type_node)]? 2 : 1));\n+  builtin_define_with_int_value (\"__GCC_ATOMIC_WCHAR_T_LOCK_FREE\", \n+\t\t\t(have_swap[SWAP_INDEX (wchar_type_node)]? 2 : 1));\n+  builtin_define_with_int_value (\"__GCC_ATOMIC_SHORT_LOCK_FREE\", \n+\t\t      (have_swap[SWAP_INDEX (short_integer_type_node)]? 2 : 1));\n+  builtin_define_with_int_value (\"__GCC_ATOMIC_INT_LOCK_FREE\", \n+\t\t\t(have_swap[SWAP_INDEX (integer_type_node)]? 2 : 1));\n+  builtin_define_with_int_value (\"__GCC_ATOMIC_LONG_LOCK_FREE\", \n+\t\t      (have_swap[SWAP_INDEX (long_integer_type_node)]? 2 : 1));\n+  builtin_define_with_int_value (\"__GCC_ATOMIC_LLONG_LOCK_FREE\", \n+\t\t(have_swap[SWAP_INDEX (long_long_integer_type_node)]? 2 : 1));\n+\n+  /* ptr_type_node can't be used here since ptr_mode is only set when\n+     toplev calls backend_init which is not done with -E  or pch.  */\n+  psize = POINTER_SIZE / BITS_PER_UNIT;\n+  if (psize >= SWAP_LIMIT)\n+    psize = 0;\n+  builtin_define_with_int_value (\"__GCC_ATOMIC_POINTER_LOCK_FREE\", \n+\t\t\t(have_swap[psize]? 2 : 1));\n+}\n+\n /* Hook that registers front end and target-specific built-ins.  */\n void\n c_cpp_builtins (cpp_reader *pfile)\n@@ -756,53 +867,8 @@ c_cpp_builtins (cpp_reader *pfile)\n   if (c_dialect_cxx () && TYPE_UNSIGNED (wchar_type_node))\n     cpp_define (pfile, \"__WCHAR_UNSIGNED__\");\n \n-  /* Tell source code if the compiler makes sync_compare_and_swap\n-     builtins available.  */\n-#ifndef HAVE_sync_compare_and_swapqi\n-#define HAVE_sync_compare_and_swapqi 0\n-#endif\n-#ifndef HAVE_atomic_compare_and_swapqi\n-#define HAVE_atomic_compare_and_swapqi 0\n-#endif\n-  if (HAVE_sync_compare_and_swapqi || HAVE_atomic_compare_and_swapqi)\n-    cpp_define (pfile, \"__GCC_HAVE_SYNC_COMPARE_AND_SWAP_1\");\n-\n-#ifndef HAVE_sync_compare_and_swaphi\n-#define HAVE_sync_compare_and_swaphi 0\n-#endif\n-#ifndef HAVE_atomic_compare_and_swaphi\n-#define HAVE_atomic_compare_and_swaphi 0\n-#endif\n-  if (HAVE_sync_compare_and_swaphi || HAVE_atomic_compare_and_swaphi)\n-    cpp_define (pfile, \"__GCC_HAVE_SYNC_COMPARE_AND_SWAP_2\");\n-\n-#ifndef HAVE_sync_compare_and_swapsi\n-#define HAVE_sync_compare_and_swapsi 0\n-#endif\n-#ifndef HAVE_atomic_compare_and_swapsi\n-#define HAVE_atomic_compare_and_swapsi 0\n-#endif\n-  if (HAVE_sync_compare_and_swapsi || HAVE_atomic_compare_and_swapsi)\n-    cpp_define (pfile, \"__GCC_HAVE_SYNC_COMPARE_AND_SWAP_4\");\n-\n-#ifndef HAVE_sync_compare_and_swapdi\n-#define HAVE_sync_compare_and_swapdi 0\n-#endif\n-#ifndef HAVE_atomic_compare_and_swapdi\n-#define HAVE_atomic_compare_and_swapdi 0\n-#endif\n-  if (HAVE_sync_compare_and_swapdi || HAVE_atomic_compare_and_swapdi)\n-    cpp_define (pfile, \"__GCC_HAVE_SYNC_COMPARE_AND_SWAP_8\");\n-\n-#ifndef HAVE_sync_compare_and_swapti\n-#define HAVE_sync_compare_and_swapti 0\n-#endif\n-#ifndef HAVE_atomic_compare_and_swapti\n-#define HAVE_atomic_compare_and_swapti 0\n-#endif\n-  if (HAVE_sync_compare_and_swapti || HAVE_atomic_compare_and_swapti)\n-    cpp_define (pfile, \"__GCC_HAVE_SYNC_COMPARE_AND_SWAP_16\");\n-\n+  cpp_atomic_builtins (pfile);\n+    \n #ifdef DWARF2_UNWIND_INFO\n   if (dwarf2out_do_cfi_asm ())\n     cpp_define (pfile, \"__GCC_HAVE_DWARF2_CFI_ASM\");"}, {"sha": "48c3db2303902f2899c07bc9da6b00f35b3f6ad2", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62bad7cd053b0f139bb46ae54976ed97d6dc0811/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62bad7cd053b0f139bb46ae54976ed97d6dc0811/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=62bad7cd053b0f139bb46ae54976ed97d6dc0811", "patch": "@@ -1,3 +1,10 @@\n+2011-11-28  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* include/bits/atomic_base.h (ATOMIC_*_LOCK_FREE): Use new cpp\n+\tpredefined macros.\n+\t* testsuite/29_atomics/headers/atomic/macros.cc: Add BOOL and POINTER\n+\tmacro checks.  Check for expected compile time values.\n+\n 2011-11-28  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR libstdc++/51288"}, {"sha": "2711323bbdac2d5c34ff772aea5989750f461152", "filename": "libstdc++-v3/include/bits/atomic_base.h", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62bad7cd053b0f139bb46ae54976ed97d6dc0811/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62bad7cd053b0f139bb46ae54976ed97d6dc0811/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_base.h?ref=62bad7cd053b0f139bb46ae54976ed97d6dc0811", "patch": "@@ -91,18 +91,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /// Lock-free Property\n \n-#define LOCKFREE_PROP(T) (__atomic_always_lock_free (sizeof (T), 0) ? 2 : 1)\n-\n-#define ATOMIC_BOOL_LOCK_FREE\t\tLOCKFREE_PROP (bool)\n-#define ATOMIC_CHAR_LOCK_FREE \t\tLOCKFREE_PROP (char)\n-#define ATOMIC_CHAR16_T_LOCK_FREE\tLOCKFREE_PROP (char16_t)\n-#define ATOMIC_CHAR32_T_LOCK_FREE\tLOCKFREE_PROP (char32_t)\n-#define ATOMIC_WCHAR_T_LOCK_FREE\tLOCKFREE_PROP (wchar_t)\n-#define ATOMIC_SHORT_LOCK_FREE\t\tLOCKFREE_PROP (short)\n-#define ATOMIC_INT_LOCK_FREE\t\tLOCKFREE_PROP (int)\n-#define ATOMIC_LONG_LOCK_FREE\t\tLOCKFREE_PROP (long)\n-#define ATOMIC_LLONG_LOCK_FREE\t\tLOCKFREE_PROP (long long)\n-#define ATOMIC_POINTER_LOCK_FREE\tLOCKFREE_PROP (void *)\n+\n+#define ATOMIC_BOOL_LOCK_FREE\t\t__GCC_ATOMIC_BOOL_LOCK_FREE\n+#define ATOMIC_CHAR_LOCK_FREE\t\t__GCC_ATOMIC_CHAR_LOCK_FREE\n+#define ATOMIC_WCHAR_T_LOCK_FREE\t__GCC_ATOMIC_WCHAR_T_LOCK_FREE\n+#define ATOMIC_CHAR16_T_LOCK_FREE\t__GCC_ATOMIC_CHAR16_T_LOCK_FREE\n+#define ATOMIC_CHAR32_T_LOCK_FREE\t__GCC_ATOMIC_CHAR32_T_LOCK_FREE\n+#define ATOMIC_SHORT_LOCK_FREE\t\t__GCC_ATOMIC_SHORT_LOCK_FREE\n+#define ATOMIC_INT_LOCK_FREE\t\t__GCC_ATOMIC_INT_LOCK_FREE\n+#define ATOMIC_LONG_LOCK_FREE\t\t__GCC_ATOMIC_LONG_LOCK_FREE\n+#define ATOMIC_LLONG_LOCK_FREE\t\t__GCC_ATOMIC_LLONG_LOCK_FREE\n+#define ATOMIC_POINTER_LOCK_FREE\t__GCC_ATOMIC_POINTER_LOCK_FREE\n \n   // Base types for atomics.\n   template<typename _IntTp>"}, {"sha": "fe78cff28aa07ebb77843b620426d7576843a414", "filename": "libstdc++-v3/testsuite/29_atomics/headers/atomic/macros.cc", "status": "modified", "additions": 32, "deletions": 16, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62bad7cd053b0f139bb46ae54976ed97d6dc0811/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fheaders%2Fatomic%2Fmacros.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62bad7cd053b0f139bb46ae54976ed97d6dc0811/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fheaders%2Fatomic%2Fmacros.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fheaders%2Fatomic%2Fmacros.cc?ref=62bad7cd053b0f139bb46ae54976ed97d6dc0811", "patch": "@@ -20,6 +20,10 @@\n \n #include <atomic>\n \n+#ifndef ATOMIC_BOOL_LOCK_FREE \n+# error \"ATOMIC_BOOL_LOCK_FREE must be a macro\"\n+#endif\n+\n #ifndef ATOMIC_CHAR_LOCK_FREE \n # error \"ATOMIC_CHAR_LOCK_FREE must be a macro\"\n #endif\n@@ -52,6 +56,10 @@\n # error \"ATOMIC_LLONG_LOCK_FREE must be a macro\"\n #endif\n \n+#ifndef ATOMIC_POINTER_LOCK_FREE \n+# error \"ATOMIC_POINTER_LOCK_FREE must be a macro\"\n+#endif\n+\n #ifndef ATOMIC_FLAG_INIT\n     #error \"ATOMIC_FLAG_INIT_must_be_a_macro\"\n #endif\n@@ -65,35 +73,43 @@ extern void abort(void);\n \n int main ()\n {\n- if (ATOMIC_CHAR_LOCK_FREE != 0 && ATOMIC_CHAR_LOCK_FREE != 1\n-     && ATOMIC_CHAR_LOCK_FREE != 2)\n+#if (ATOMIC_BOOL_LOCK_FREE != 1 && ATOMIC_BOOL_LOCK_FREE != 2)\n+   abort ();\n+#endif\n+\n+#if (ATOMIC_CHAR_LOCK_FREE != 1 && ATOMIC_CHAR_LOCK_FREE != 2)\n+   abort ();\n+#endif\n+\n+#if (ATOMIC_CHAR16_T_LOCK_FREE != 1 && ATOMIC_CHAR16_T_LOCK_FREE != 2)\n    abort ();\n+#endif\n \n- if (ATOMIC_CHAR16_T_LOCK_FREE != 0 && ATOMIC_CHAR16_T_LOCK_FREE != 1\n-     && ATOMIC_CHAR16_T_LOCK_FREE != 2)\n+#if (ATOMIC_CHAR32_T_LOCK_FREE != 1 && ATOMIC_CHAR32_T_LOCK_FREE != 2)\n    abort ();\n+#endif\n \n- if (ATOMIC_CHAR32_T_LOCK_FREE != 0 && ATOMIC_CHAR32_T_LOCK_FREE != 1\n-     && ATOMIC_CHAR32_T_LOCK_FREE != 2)\n+#if (ATOMIC_WCHAR_T_LOCK_FREE != 1 && ATOMIC_WCHAR_T_LOCK_FREE != 2)\n    abort ();\n+#endif\n \n- if (ATOMIC_WCHAR_T_LOCK_FREE != 0 && ATOMIC_WCHAR_T_LOCK_FREE != 1\n-     && ATOMIC_WCHAR_T_LOCK_FREE != 2)\n+#if (ATOMIC_SHORT_LOCK_FREE != 1 && ATOMIC_SHORT_LOCK_FREE != 2)\n    abort ();\n+#endif\n \n- if (ATOMIC_SHORT_LOCK_FREE != 0 && ATOMIC_SHORT_LOCK_FREE != 1\n-     && ATOMIC_SHORT_LOCK_FREE != 2)\n+#if (ATOMIC_INT_LOCK_FREE != 1 && ATOMIC_INT_LOCK_FREE != 2)\n    abort ();\n+#endif\n \n- if (ATOMIC_INT_LOCK_FREE != 0 && ATOMIC_INT_LOCK_FREE != 1\n-     && ATOMIC_INT_LOCK_FREE != 2)\n+#if (ATOMIC_LONG_LOCK_FREE != 1 && ATOMIC_LONG_LOCK_FREE != 2)\n    abort ();\n+#endif\n \n- if (ATOMIC_LONG_LOCK_FREE != 0 && ATOMIC_LONG_LOCK_FREE != 1\n-     && ATOMIC_LONG_LOCK_FREE != 2)\n+#if (ATOMIC_LLONG_LOCK_FREE != 1 && ATOMIC_LLONG_LOCK_FREE != 2)\n    abort ();\n+#endif\n \n- if (ATOMIC_LLONG_LOCK_FREE != 0 && ATOMIC_LLONG_LOCK_FREE != 1\n-     && ATOMIC_LLONG_LOCK_FREE != 2)\n+#if (ATOMIC_POINTER_LOCK_FREE != 1 && ATOMIC_POINTER_LOCK_FREE != 2)\n    abort ();\n+#endif\n }"}]}