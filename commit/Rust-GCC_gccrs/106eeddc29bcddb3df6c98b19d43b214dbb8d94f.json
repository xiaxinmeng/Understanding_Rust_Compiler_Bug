{"sha": "106eeddc29bcddb3df6c98b19d43b214dbb8d94f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTA2ZWVkZGMyOWJjZGRiM2RmNmM5OGIxOWQ0M2IyMTRkYmI4ZDk0Zg==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2017-05-22T10:39:46Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2017-05-22T10:39:46Z"}, "message": "ipa-inline-analysis.c (inline_summary::reset): Do not reset self_time.\n\n\n\t* ipa-inline-analysis.c (inline_summary::reset): Do not reset\n\tself_time.\n\t(dump_inline_summary): Do not print self_time.\n\t(estimate_function_body_sizes): Do not set self_time.\n\t(compute_inline_parameters): Likewise.\n\t(inline_read_section, inline_write_summary): Do not stream self_time.\n\t* ipa-inline.h (inline_summary): Drop self_time.\n\nFrom-SVN: r248325", "tree": {"sha": "136d3e0f4b6b8e3a24af513c94069b87a9a4d800", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/136d3e0f4b6b8e3a24af513c94069b87a9a4d800"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/106eeddc29bcddb3df6c98b19d43b214dbb8d94f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/106eeddc29bcddb3df6c98b19d43b214dbb8d94f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/106eeddc29bcddb3df6c98b19d43b214dbb8d94f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/106eeddc29bcddb3df6c98b19d43b214dbb8d94f/comments", "author": null, "committer": null, "parents": [{"sha": "fbb1c7d4a061ae0f57d52b37ddf37933da859945", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbb1c7d4a061ae0f57d52b37ddf37933da859945", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fbb1c7d4a061ae0f57d52b37ddf37933da859945"}], "stats": {"total": 29, "additions": 16, "deletions": 13}, "files": [{"sha": "0a3ea11a404217135b1b72c668dd78d96719d1f3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/106eeddc29bcddb3df6c98b19d43b214dbb8d94f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/106eeddc29bcddb3df6c98b19d43b214dbb8d94f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=106eeddc29bcddb3df6c98b19d43b214dbb8d94f", "patch": "@@ -1,3 +1,13 @@\n+2017-05-22  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* ipa-inline-analysis.c (inline_summary::reset): Do not reset\n+\tself_time.\n+\t(dump_inline_summary): Do not print self_time.\n+\t(estimate_function_body_sizes): Do not set self_time.\n+\t(compute_inline_parameters): Likewise.\n+\t(inline_read_section, inline_write_summary): Do not stream self_time.\n+\t* ipa-inline.h (inline_summary): Drop self_time.\n+\n 2017-05-22  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* ipa-inline-analysis.c (account_size_time): Rename to ..."}, {"sha": "1a88e5993183224aeae263fca3f37ae8c32b1150", "filename": "gcc/ipa-inline-analysis.c", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/106eeddc29bcddb3df6c98b19d43b214dbb8d94f/gcc%2Fipa-inline-analysis.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/106eeddc29bcddb3df6c98b19d43b214dbb8d94f/gcc%2Fipa-inline-analysis.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline-analysis.c?ref=106eeddc29bcddb3df6c98b19d43b214dbb8d94f", "patch": "@@ -560,7 +560,6 @@ inline_summary::reset (struct cgraph_node *node)\n   struct cgraph_edge *e;\n \n   self_size = 0;\n-  self_time = 0;\n   estimated_stack_size = 0;\n   estimated_self_stack_size = 0;\n   stack_frame_offset = 0;\n@@ -920,8 +919,7 @@ dump_inline_summary (FILE *f, struct cgraph_node *node)\n \tfprintf (f, \" contains_cilk_spawn\");\n       if (s->fp_expressions)\n \tfprintf (f, \" fp_expression\");\n-      fprintf (f, \"\\n  self time:       %f\\n\", s->self_time.to_double ());\n-      fprintf (f, \"  global time:     %f\\n\", s->time.to_double ());\n+      fprintf (f, \"\\n  global time:     %f\\n\", s->time.to_double ());\n       fprintf (f, \"  self size:       %i\\n\", s->self_size);\n       fprintf (f, \"  global size:     %i\\n\", s->size);\n       fprintf (f, \"  min size:       %i\\n\", s->min_size);\n@@ -2415,7 +2413,7 @@ estimate_function_body_sizes (struct cgraph_node *node, bool early)\n \t  e->aux = NULL;\n \t}\n     }\n-  inline_summaries->get (node)->self_time = time;\n+  inline_summaries->get (node)->time = time;\n   inline_summaries->get (node)->self_size = size;\n   nonconstant_names.release ();\n   ipa_release_body_info (&fbi);\n@@ -2472,7 +2470,6 @@ compute_inline_parameters (struct cgraph_node *node, bool early)\n       info->account_size_time (2 * INLINE_SIZE_SCALE, 0, t, t);\n       inline_update_overall_summary (node);\n       info->self_size = info->size;\n-      info->self_time = info->time;\n       /* We can not inline instrumentation clones.  */\n       if (node->thunk.add_pointer_bounds_args)\n \t{\n@@ -2539,7 +2536,6 @@ compute_inline_parameters (struct cgraph_node *node, bool early)\n   node->calls_comdat_local = (e != NULL);\n \n   /* Inlining characteristics are maintained by the cgraph_mark_inline.  */\n-  info->time = info->self_time;\n   info->size = info->self_size;\n   info->stack_frame_offset = 0;\n   info->estimated_stack_size = info->estimated_self_stack_size;\n@@ -2548,8 +2544,7 @@ compute_inline_parameters (struct cgraph_node *node, bool early)\n      inline_update_overall_summary but because computation happens in\n      different order the roundoff errors result in slight changes.  */\n   inline_update_overall_summary (node);\n-  gcc_assert (!(info->time - info->self_time).to_int ()\n-\t      && info->size == info->self_size);\n+  gcc_assert (info->size == info->self_size);\n }\n \n \n@@ -3695,7 +3690,7 @@ inline_read_section (struct lto_file_decl_data *file_data, const char *data,\n       info->estimated_stack_size\n \t= info->estimated_self_stack_size = streamer_read_uhwi (&ib);\n       info->size = info->self_size = streamer_read_uhwi (&ib);\n-      info->time = info->self_time = sreal::stream_in (&ib);\n+      info->time = sreal::stream_in (&ib);\n \n       bp = streamer_read_bitpack (&ib);\n       info->inlinable = bp_unpack_value (&bp, 1);\n@@ -3848,7 +3843,7 @@ inline_write_summary (void)\n \t  streamer_write_uhwi (ob, lto_symtab_encoder_encode (encoder, cnode));\n \t  streamer_write_hwi (ob, info->estimated_self_stack_size);\n \t  streamer_write_hwi (ob, info->self_size);\n-\t  info->self_time.stream_out (ob);\n+\t  info->time.stream_out (ob);\n \t  bp = bitpack_create (ob->main_stream);\n \t  bp_pack_value (&bp, info->inlinable, 1);\n \t  bp_pack_value (&bp, info->contains_cilk_spawn, 1);"}, {"sha": "675e9759410988e149252c43434ce0fb2331037e", "filename": "gcc/ipa-inline.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/106eeddc29bcddb3df6c98b19d43b214dbb8d94f/gcc%2Fipa-inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/106eeddc29bcddb3df6c98b19d43b214dbb8d94f/gcc%2Fipa-inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.h?ref=106eeddc29bcddb3df6c98b19d43b214dbb8d94f", "patch": "@@ -96,8 +96,6 @@ struct GTY(()) inline_summary\n   HOST_WIDE_INT estimated_self_stack_size;\n   /* Size of the function body.  */\n   int self_size;\n-  /* Time of the function body.  */\n-  sreal GTY((skip)) self_time;\n   /* Minimal size increase after inlining.  */\n   int min_size;\n \n@@ -149,7 +147,7 @@ struct GTY(()) inline_summary\n   /* Keep all field empty so summary dumping works during its computation.\n      This is useful for debugging.  */\n   inline_summary ()\n-    : estimated_self_stack_size (0), self_size (0), self_time (0), min_size (0),\n+    : estimated_self_stack_size (0), self_size (0), min_size (0),\n       inlinable (false), contains_cilk_spawn (false), single_caller (false),\n       fp_expressions (false), estimated_stack_size (false),\n       stack_frame_offset (false), time (0), size (0), conds (NULL),"}]}