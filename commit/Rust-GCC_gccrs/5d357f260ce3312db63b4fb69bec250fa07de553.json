{"sha": "5d357f260ce3312db63b4fb69bec250fa07de553", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWQzNTdmMjYwY2UzMzEyZGI2M2I0ZmI2OWJlYzI1MGZhMDdkZTU1Mw==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2014-06-11T09:17:18Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2014-06-11T09:17:18Z"}, "message": "[AArch64] Implement CRC32 ACLE intrinsics.\n\n\t* config.gcc (aarch64*-*-*): Add arm_acle.h to extra headers.\n\t* Makefile.in (TEXI_GCC_FILES): Add aarch64-acle-intrinsics.texi to\n\tdependencies.\n\t* config/aarch64/aarch64-builtins.c (AARCH64_CRC32_BUILTINS): Define.\n\t(aarch64_crc_builtin_datum): New struct.\n\t(aarch64_crc_builtin_data): New.\n\t(aarch64_init_crc32_builtins): New function.\n\t(aarch64_init_builtins): Initialise CRC32 builtins when appropriate.\n\t(aarch64_crc32_expand_builtin): New.\n\t(aarch64_expand_builtin): Add CRC32 builtin expansion case.\n\t* config/aarch64/aarch64.h (TARGET_CPU_CPP_BUILTINS): Define\n\t__ARM_FEATURE_CRC32 when appropriate.\n\t(TARGET_CRC32): Define.\n\t* config/aarch64/aarch64.md (UNSPEC_CRC32B, UNSPEC_CRC32H,\n\tUNSPEC_CRC32W, UNSPEC_CRC32X, UNSPEC_CRC32CB, UNSPEC_CRC32CH,\n\tUNSPEC_CRC32CW, UNSPEC_CRC32CX): New unspec values.\n\t(aarch64_<crc_variant>): New pattern.\n\t* config/aarch64/arm_acle.h: New file.\n\t* config/aarch64/iterators.md (CRC): New int iterator.\n\t(crc_variant, crc_mode): New int attributes.\n\t* doc/aarch64-acle-intrinsics.texi: New file.\n\t* doc/extend.texi (aarch64): Document aarch64 ACLE intrinsics.\n\tInclude aarch64-acle-intrinsics.texi.\n\nFrom-SVN: r211440", "tree": {"sha": "55b9ca10dd9ea346fb1cc2257ff6aca943a18246", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/55b9ca10dd9ea346fb1cc2257ff6aca943a18246"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5d357f260ce3312db63b4fb69bec250fa07de553", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d357f260ce3312db63b4fb69bec250fa07de553", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d357f260ce3312db63b4fb69bec250fa07de553", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d357f260ce3312db63b4fb69bec250fa07de553/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e1377713ce21a9ee25b3d6b7dbb9aaf7b7f7d4a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1377713ce21a9ee25b3d6b7dbb9aaf7b7f7d4a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1377713ce21a9ee25b3d6b7dbb9aaf7b7f7d4a5"}], "stats": {"total": 320, "additions": 317, "deletions": 3}, "files": [{"sha": "9dc917791e1306fa8c4ede1c2bff05571c9f3cad", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d357f260ce3312db63b4fb69bec250fa07de553/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d357f260ce3312db63b4fb69bec250fa07de553/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5d357f260ce3312db63b4fb69bec250fa07de553", "patch": "@@ -1,3 +1,29 @@\n+2014-06-11  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config.gcc (aarch64*-*-*): Add arm_acle.h to extra headers.\n+\t* Makefile.in (TEXI_GCC_FILES): Add aarch64-acle-intrinsics.texi to\n+\tdependencies.\n+\t* config/aarch64/aarch64-builtins.c (AARCH64_CRC32_BUILTINS): Define.\n+\t(aarch64_crc_builtin_datum): New struct.\n+\t(aarch64_crc_builtin_data): New.\n+\t(aarch64_init_crc32_builtins): New function.\n+\t(aarch64_init_builtins): Initialise CRC32 builtins when appropriate.\n+\t(aarch64_crc32_expand_builtin): New.\n+\t(aarch64_expand_builtin): Add CRC32 builtin expansion case.\n+\t* config/aarch64/aarch64.h (TARGET_CPU_CPP_BUILTINS): Define\n+\t__ARM_FEATURE_CRC32 when appropriate.\n+\t(TARGET_CRC32): Define.\n+\t* config/aarch64/aarch64.md (UNSPEC_CRC32B, UNSPEC_CRC32H,\n+\tUNSPEC_CRC32W, UNSPEC_CRC32X, UNSPEC_CRC32CB, UNSPEC_CRC32CH,\n+\tUNSPEC_CRC32CW, UNSPEC_CRC32CX): New unspec values.\n+\t(aarch64_<crc_variant>): New pattern.\n+\t* config/aarch64/arm_acle.h: New file.\n+\t* config/aarch64/iterators.md (CRC): New int iterator.\n+\t(crc_variant, crc_mode): New int attributes.\n+\t* doc/aarch64-acle-intrinsics.texi: New file.\n+\t* doc/extend.texi (aarch64): Document aarch64 ACLE intrinsics.\n+\tInclude aarch64-acle-intrinsics.texi.\n+\n 2014-06-11  Evgeny Stupachenko  <evstupac@gmail.com>\n \n \t* tree-vect-data-refs.c (vect_grouped_store_supported): New"}, {"sha": "a6fba3342c02e533aa182f0a98349967b69634ff", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d357f260ce3312db63b4fb69bec250fa07de553/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d357f260ce3312db63b4fb69bec250fa07de553/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=5d357f260ce3312db63b4fb69bec250fa07de553", "patch": "@@ -2801,7 +2801,7 @@ TEXI_GCC_FILES = gcc.texi gcc-common.texi gcc-vers.texi frontends.texi\t\\\n \t contribute.texi compat.texi funding.texi gnu.texi gpl_v3.texi\t\\\n \t fdl.texi contrib.texi cppenv.texi cppopts.texi avr-mmcu.texi\t\\\n \t implement-c.texi implement-cxx.texi arm-neon-intrinsics.texi\t\\\n-\t arm-acle-intrinsics.texi\n+\t arm-acle-intrinsics.texi aarch64-acle-intrinsics.texi\n \n # we explicitly use $(srcdir)/doc/tm.texi here to avoid confusion with\n # the generated tm.texi; the latter might have a more recent timestamp,"}, {"sha": "80bb3db4d0e0be5626a884f3a609ad17bd9c7bb0", "filename": "gcc/config.gcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d357f260ce3312db63b4fb69bec250fa07de553/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d357f260ce3312db63b4fb69bec250fa07de553/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=5d357f260ce3312db63b4fb69bec250fa07de553", "patch": "@@ -302,7 +302,7 @@ m32c*-*-*)\n         ;;\n aarch64*-*-*)\n \tcpu_type=aarch64\n-\textra_headers=\"arm_neon.h\"\n+\textra_headers=\"arm_neon.h arm_acle.h\"\n \textra_objs=\"aarch64-builtins.o aarch-common.o\"\n \ttarget_has_targetm_common=yes\n \t;;"}, {"sha": "a94ef52f71adf654608984659cacc71343ef5d77", "filename": "gcc/config/aarch64/aarch64-builtins.c", "status": "modified", "additions": 93, "deletions": 1, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d357f260ce3312db63b4fb69bec250fa07de553/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d357f260ce3312db63b4fb69bec250fa07de553/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c?ref=5d357f260ce3312db63b4fb69bec250fa07de553", "patch": "@@ -411,6 +411,28 @@ static aarch64_simd_builtin_datum aarch64_simd_builtin_data[] = {\n #include \"aarch64-simd-builtins.def\"\n };\n \n+/* There's only 8 CRC32 builtins.  Probably not worth their own .def file.  */\n+#define AARCH64_CRC32_BUILTINS \\\n+  CRC32_BUILTIN (crc32b, QI) \\\n+  CRC32_BUILTIN (crc32h, HI) \\\n+  CRC32_BUILTIN (crc32w, SI) \\\n+  CRC32_BUILTIN (crc32x, DI) \\\n+  CRC32_BUILTIN (crc32cb, QI) \\\n+  CRC32_BUILTIN (crc32ch, HI) \\\n+  CRC32_BUILTIN (crc32cw, SI) \\\n+  CRC32_BUILTIN (crc32cx, DI)\n+\n+typedef struct\n+{\n+  const char *name;\n+  enum machine_mode mode;\n+  const enum insn_code icode;\n+  unsigned int fcode;\n+} aarch64_crc_builtin_datum;\n+\n+#define CRC32_BUILTIN(N, M) \\\n+  AARCH64_BUILTIN_##N,\n+\n #undef VAR1\n #define VAR1(T, N, MAP, A) \\\n   AARCH64_SIMD_BUILTIN_##T##_##N##A,\n@@ -428,9 +450,22 @@ enum aarch64_builtins\n #include \"aarch64-simd-builtins.def\"\n   AARCH64_SIMD_BUILTIN_MAX = AARCH64_SIMD_BUILTIN_BASE\n \t\t\t      + ARRAY_SIZE (aarch64_simd_builtin_data),\n+  AARCH64_CRC32_BUILTIN_BASE,\n+  AARCH64_CRC32_BUILTINS\n+  AARCH64_CRC32_BUILTIN_MAX,\n   AARCH64_BUILTIN_MAX\n };\n \n+#undef CRC32_BUILTIN\n+#define CRC32_BUILTIN(N, M) \\\n+  {\"__builtin_aarch64_\"#N, M##mode, CODE_FOR_aarch64_##N, AARCH64_BUILTIN_##N},\n+\n+static aarch64_crc_builtin_datum aarch64_crc_builtin_data[] = {\n+  AARCH64_CRC32_BUILTINS\n+};\n+\n+#undef CRC32_BUILTIN\n+\n static GTY(()) tree aarch64_builtin_decls[AARCH64_BUILTIN_MAX];\n \n #define NUM_DREG_TYPES 6\n@@ -802,6 +837,24 @@ aarch64_init_simd_builtins (void)\n     }\n }\n \n+static void\n+aarch64_init_crc32_builtins ()\n+{\n+  tree usi_type = aarch64_build_unsigned_type (SImode);\n+  unsigned int i = 0;\n+\n+  for (i = 0; i < ARRAY_SIZE (aarch64_crc_builtin_data); ++i)\n+    {\n+      aarch64_crc_builtin_datum* d = &aarch64_crc_builtin_data[i];\n+      tree argtype = aarch64_build_unsigned_type (d->mode);\n+      tree ftype = build_function_type_list (usi_type, usi_type, argtype, NULL_TREE);\n+      tree fndecl = add_builtin_function (d->name, ftype, d->fcode,\n+                                          BUILT_IN_MD, NULL, NULL_TREE);\n+\n+      aarch64_builtin_decls[d->fcode] = fndecl;\n+    }\n+}\n+\n void\n aarch64_init_builtins (void)\n {\n@@ -825,6 +878,8 @@ aarch64_init_builtins (void)\n \n   if (TARGET_SIMD)\n     aarch64_init_simd_builtins ();\n+  if (TARGET_CRC32)\n+    aarch64_init_crc32_builtins ();\n }\n \n tree\n@@ -1024,6 +1079,41 @@ aarch64_simd_expand_builtin (int fcode, tree exp, rtx target)\n \t   SIMD_ARG_STOP);\n }\n \n+rtx\n+aarch64_crc32_expand_builtin (int fcode, tree exp, rtx target)\n+{\n+  rtx pat;\n+  aarch64_crc_builtin_datum *d\n+    = &aarch64_crc_builtin_data[fcode - (AARCH64_CRC32_BUILTIN_BASE + 1)];\n+  enum insn_code icode = d->icode;\n+  tree arg0 = CALL_EXPR_ARG (exp, 0);\n+  tree arg1 = CALL_EXPR_ARG (exp, 1);\n+  rtx op0 = expand_normal (arg0);\n+  rtx op1 = expand_normal (arg1);\n+  enum machine_mode tmode = insn_data[icode].operand[0].mode;\n+  enum machine_mode mode0 = insn_data[icode].operand[1].mode;\n+  enum machine_mode mode1 = insn_data[icode].operand[2].mode;\n+\n+  if (! target\n+      || GET_MODE (target) != tmode\n+      || ! (*insn_data[icode].operand[0].predicate) (target, tmode))\n+    target = gen_reg_rtx (tmode);\n+\n+  gcc_assert ((GET_MODE (op0) == mode0 || GET_MODE (op0) == VOIDmode)\n+\t      && (GET_MODE (op1) == mode1 || GET_MODE (op1) == VOIDmode));\n+\n+  if (! (*insn_data[icode].operand[1].predicate) (op0, mode0))\n+    op0 = copy_to_mode_reg (mode0, op0);\n+  if (! (*insn_data[icode].operand[2].predicate) (op1, mode1))\n+    op1 = copy_to_mode_reg (mode1, op1);\n+\n+  pat = GEN_FCN (icode) (target, op0, op1);\n+  if (! pat)\n+    return 0;\n+  emit_insn (pat);\n+  return target;\n+}\n+\n /* Expand an expression EXP that calls a built-in function,\n    with result going to TARGET if that's convenient.  */\n rtx\n@@ -1066,8 +1156,10 @@ aarch64_expand_builtin (tree exp,\n       return target;\n     }\n \n-  if (fcode >= AARCH64_SIMD_BUILTIN_BASE)\n+  if (fcode >= AARCH64_SIMD_BUILTIN_BASE && fcode <= AARCH64_SIMD_BUILTIN_MAX)\n     return aarch64_simd_expand_builtin (fcode, exp, target);\n+  else if (fcode >= AARCH64_CRC32_BUILTIN_BASE && fcode <= AARCH64_CRC32_BUILTIN_MAX)\n+    return aarch64_crc32_expand_builtin (fcode, exp, target);\n \n   return NULL_RTX;\n }"}, {"sha": "b95365a6eca3f01e1efe74974b6109b9119b676c", "filename": "gcc/config/aarch64/aarch64.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d357f260ce3312db63b4fb69bec250fa07de553/gcc%2Fconfig%2Faarch64%2Faarch64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d357f260ce3312db63b4fb69bec250fa07de553/gcc%2Fconfig%2Faarch64%2Faarch64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.h?ref=5d357f260ce3312db63b4fb69bec250fa07de553", "patch": "@@ -35,6 +35,9 @@\n       if (TARGET_SIMD)\t\t\t\t\t\\\n \tbuiltin_define (\"__ARM_NEON\");\t\t\t\\\n \t\t\t\t\t\t\t\\\n+      if (TARGET_CRC32)\t\t\t\t\\\n+\tbuiltin_define (\"__ARM_FEATURE_CRC32\");\t\t\\\n+\t\t\t\t\t\t\t\\\n       switch (aarch64_cmodel)\t\t\t\t\\\n \t{\t\t\t\t\t\t\\\n \t  case AARCH64_CMODEL_TINY:\t\t\t\\\n@@ -188,6 +191,9 @@ extern unsigned long aarch64_tune_flags;\n /* Crypto is an optional extension to AdvSIMD.  */\n #define TARGET_CRYPTO (TARGET_SIMD && AARCH64_ISA_CRYPTO)\n \n+/* CRC instructions that can be enabled through +crc arch extension.  */\n+#define TARGET_CRC32 (AARCH64_ISA_CRC)\n+\n /* Standard register usage.  */\n \n /* 31 64-bit general purpose registers R0-R30:"}, {"sha": "a4d88878d9b86bfd5a3c1199dc21be81dea738e2", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d357f260ce3312db63b4fb69bec250fa07de553/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d357f260ce3312db63b4fb69bec250fa07de553/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=5d357f260ce3312db63b4fb69bec250fa07de553", "patch": "@@ -68,6 +68,14 @@\n (define_c_enum \"unspec\" [\n     UNSPEC_CASESI\n     UNSPEC_CLS\n+    UNSPEC_CRC32B\n+    UNSPEC_CRC32CB\n+    UNSPEC_CRC32CH\n+    UNSPEC_CRC32CW\n+    UNSPEC_CRC32CX\n+    UNSPEC_CRC32H\n+    UNSPEC_CRC32W\n+    UNSPEC_CRC32X\n     UNSPEC_FRECPE\n     UNSPEC_FRECPS\n     UNSPEC_FRECPX\n@@ -2481,6 +2489,23 @@\n   }\n )\n \n+\n+;; CRC32 instructions.\n+(define_insn \"aarch64_<crc_variant>\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+        (unspec:SI [(match_operand:SI 1 \"register_operand\" \"r\")\n+                    (match_operand:<crc_mode> 2 \"register_operand\" \"r\")]\n+         CRC))]\n+  \"TARGET_CRC32\"\n+  {\n+    if (GET_MODE_BITSIZE (GET_MODE (operands[2])) >= 64)\n+      return \"<crc_variant>\\\\t%w0, %w1, %x2\";\n+    else\n+      return \"<crc_variant>\\\\t%w0, %w1, %w2\";\n+  }\n+  [(set_attr \"type\" \"crc\")]\n+)\n+\n (define_insn \"*csinc2<mode>_insn\"\n   [(set (match_operand:GPI 0 \"register_operand\" \"=r\")\n         (plus:GPI (match_operator:GPI 2 \"aarch64_comparison_operator\""}, {"sha": "2e74696e2040df699ce77523f4e663fa8b7adef3", "filename": "gcc/config/aarch64/arm_acle.h", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d357f260ce3312db63b4fb69bec250fa07de553/gcc%2Fconfig%2Faarch64%2Farm_acle.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d357f260ce3312db63b4fb69bec250fa07de553/gcc%2Fconfig%2Faarch64%2Farm_acle.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_acle.h?ref=5d357f260ce3312db63b4fb69bec250fa07de553", "patch": "@@ -0,0 +1,90 @@\n+/* AArch64 Non-NEON ACLE intrinsics include file.\n+\n+   Copyright (C) 2014 Free Software Foundation, Inc.\n+   Contributed by ARM Ltd.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 3, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef _GCC_ARM_ACLE_H\n+#define _GCC_ARM_ACLE_H\n+\n+#include <stdint.h>\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+#ifdef __ARM_FEATURE_CRC32\n+__extension__ static __inline uint32_t __attribute__ ((__always_inline__))\n+__crc32b (uint32_t __a, uint8_t __b)\n+{\n+  return __builtin_aarch64_crc32b (__a, __b);\n+}\n+\n+__extension__ static __inline uint32_t __attribute__ ((__always_inline__))\n+__crc32cb (uint32_t __a, uint8_t __b)\n+{\n+  return __builtin_aarch64_crc32cb (__a, __b);\n+}\n+\n+__extension__ static __inline uint32_t __attribute__ ((__always_inline__))\n+__crc32ch (uint32_t __a, uint16_t __b)\n+{\n+  return __builtin_aarch64_crc32ch (__a, __b);\n+}\n+\n+__extension__ static __inline uint32_t __attribute__ ((__always_inline__))\n+__crc32cw (uint32_t __a, uint32_t __b)\n+{\n+  return __builtin_aarch64_crc32cw (__a, __b);\n+}\n+\n+__extension__ static __inline uint32_t __attribute__ ((__always_inline__))\n+__crc32cd (uint32_t __a, uint64_t __b)\n+{\n+  return __builtin_aarch64_crc32cx (__a, __b);\n+}\n+\n+__extension__ static __inline uint32_t __attribute__ ((__always_inline__))\n+__crc32h (uint32_t __a, uint16_t __b)\n+{\n+  return __builtin_aarch64_crc32h (__a, __b);\n+}\n+\n+__extension__ static __inline uint32_t __attribute__ ((__always_inline__))\n+__crc32w (uint32_t __a, uint32_t __b)\n+{\n+  return __builtin_aarch64_crc32w (__a, __b);\n+}\n+\n+__extension__ static __inline uint32_t __attribute__ ((__always_inline__))\n+__crc32d (uint32_t __a, uint64_t __b)\n+{\n+  return __builtin_aarch64_crc32x (__a, __b);\n+}\n+\n+#endif\n+\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+#endif"}, {"sha": "bf7b6830e006897d28df76ee2db6db41bd8cbb1d", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d357f260ce3312db63b4fb69bec250fa07de553/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d357f260ce3312db63b4fb69bec250fa07de553/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=5d357f260ce3312db63b4fb69bec250fa07de553", "patch": "@@ -910,6 +910,10 @@\n \n (define_int_iterator FRECP [UNSPEC_FRECPE UNSPEC_FRECPX])\n \n+(define_int_iterator CRC [UNSPEC_CRC32B UNSPEC_CRC32H UNSPEC_CRC32W\n+                          UNSPEC_CRC32X UNSPEC_CRC32CB UNSPEC_CRC32CH\n+                          UNSPEC_CRC32CW UNSPEC_CRC32CX])\n+\n (define_int_iterator CRYPTO_AES [UNSPEC_AESE UNSPEC_AESD])\n (define_int_iterator CRYPTO_AESMC [UNSPEC_AESMC UNSPEC_AESIMC])\n \n@@ -1038,6 +1042,16 @@\n \n (define_int_attr frecp_suffix  [(UNSPEC_FRECPE \"e\") (UNSPEC_FRECPX \"x\")])\n \n+(define_int_attr crc_variant [(UNSPEC_CRC32B \"crc32b\") (UNSPEC_CRC32H \"crc32h\")\n+                        (UNSPEC_CRC32W \"crc32w\") (UNSPEC_CRC32X \"crc32x\")\n+                        (UNSPEC_CRC32CB \"crc32cb\") (UNSPEC_CRC32CH \"crc32ch\")\n+                        (UNSPEC_CRC32CW \"crc32cw\") (UNSPEC_CRC32CX \"crc32cx\")])\n+\n+(define_int_attr crc_mode [(UNSPEC_CRC32B \"QI\") (UNSPEC_CRC32H \"HI\")\n+                        (UNSPEC_CRC32W \"SI\") (UNSPEC_CRC32X \"DI\")\n+                        (UNSPEC_CRC32CB \"QI\") (UNSPEC_CRC32CH \"HI\")\n+                        (UNSPEC_CRC32CW \"SI\") (UNSPEC_CRC32CX \"DI\")])\n+\n (define_int_attr aes_op [(UNSPEC_AESE \"e\") (UNSPEC_AESD \"d\")])\n (define_int_attr aesmc_op [(UNSPEC_AESMC \"mc\") (UNSPEC_AESIMC \"imc\")])\n "}, {"sha": "3194511a8d6e022327737cc62190fe0bf3cb4ee1", "filename": "gcc/doc/aarch64-acle-intrinsics.texi", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d357f260ce3312db63b4fb69bec250fa07de553/gcc%2Fdoc%2Faarch64-acle-intrinsics.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d357f260ce3312db63b4fb69bec250fa07de553/gcc%2Fdoc%2Faarch64-acle-intrinsics.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Faarch64-acle-intrinsics.texi?ref=5d357f260ce3312db63b4fb69bec250fa07de553", "patch": "@@ -0,0 +1,55 @@\n+@c Copyright (C) 2014 Free Software Foundation, Inc.\n+@c This is part of the GCC manual.\n+@c For copying conditions, see the file gcc.texi.\n+\n+@subsubsection CRC32 intrinsics\n+\n+These intrinsics are available when the CRC32 architecture extension is\n+specified, e.g. when the @option{-march=armv8-a+crc} switch is used, or when\n+the target processor specified with @option{-mcpu} supports it.\n+\n+@itemize @bullet\n+@item uint32_t __crc32b (uint32_t, uint8_t)\n+@*@emph{Form of expected instruction(s):} @code{crc32b @var{w0}, @var{w1}, @var{w2}}\n+@end itemize\n+\n+\n+@itemize @bullet\n+@item uint32_t __crc32h (uint32_t, uint16_t)\n+@*@emph{Form of expected instruction(s):} @code{crc32h @var{w0}, @var{w1}, @var{w2}}\n+@end itemize\n+\n+\n+@itemize @bullet\n+@item uint32_t __crc32w (uint32_t, uint32_t)\n+@*@emph{Form of expected instruction(s):} @code{crc32w @var{w0}, @var{w1}, @var{w2}}\n+@end itemize\n+\n+\n+@itemize @bullet\n+@item uint32_t __crc32d (uint32_t, uint64_t)\n+@*@emph{Form of expected instruction(s):} @code{crc32x @var{w0}, @var{w1}, @var{x2}}\n+@end itemize\n+\n+@itemize @bullet\n+@item uint32_t __crc32cb (uint32_t, uint8_t)\n+@*@emph{Form of expected instruction(s):} @code{crc32cb @var{w0}, @var{w1}, @var{w2}}\n+@end itemize\n+\n+\n+@itemize @bullet\n+@item uint32_t __crc32ch (uint32_t, uint16_t)\n+@*@emph{Form of expected instruction(s):} @code{crc32ch @var{w0}, @var{w1}, @var{w2}}\n+@end itemize\n+\n+\n+@itemize @bullet\n+@item uint32_t __crc32cw (uint32_t, uint32_t)\n+@*@emph{Form of expected instruction(s):} @code{crc32cw @var{w0}, @var{w1}, @var{w2}}\n+@end itemize\n+\n+\n+@itemize @bullet\n+@item uint32_t __crc32cd (uint32_t, uint64_t)\n+@*@emph{Form of expected instruction(s):} @code{crc32cx @var{w0}, @var{w1}, @var{x2}}\n+@end itemize"}, {"sha": "c34c1b6e431257dd2fc2786ead18f781b41ac2de", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d357f260ce3312db63b4fb69bec250fa07de553/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d357f260ce3312db63b4fb69bec250fa07de553/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=5d357f260ce3312db63b4fb69bec250fa07de553", "patch": "@@ -9697,6 +9697,7 @@ instructions, but allow the compiler to schedule those calls.\n \n @menu\n * AArch64 Built-in Functions::\n+* AArch64 intrinsics::\n * Alpha Built-in Functions::\n * Altera Nios II Built-in Functions::\n * ARC Built-in Functions::\n@@ -9742,6 +9743,11 @@ unsigned int __builtin_aarch64_get_fpsr ()\n void __builtin_aarch64_set_fpsr (unsigned int)\n @end smallexample\n \n+@node AArch64 intrinsics\n+@subsection ACLE Intrinsics for AArch64\n+\n+@include aarch64-acle-intrinsics.texi\n+\n @node Alpha Built-in Functions\n @subsection Alpha Built-in Functions\n "}]}