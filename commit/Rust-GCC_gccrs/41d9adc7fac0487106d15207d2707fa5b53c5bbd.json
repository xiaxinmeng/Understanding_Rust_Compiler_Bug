{"sha": "41d9adc7fac0487106d15207d2707fa5b53c5bbd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDFkOWFkYzdmYWMwNDg3MTA2ZDE1MjA3ZDI3MDdmYTViNTNjNWJiZA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2006-09-15T18:32:24Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2006-09-15T18:32:24Z"}, "message": "re PR ada/15802 (ICE at expr.c:6764 (placeholder mechanism))\n\n\tPR ada/15802\n\t* decl.c (same_discriminant_p): New static function.\n\t(gnat_to_gnu_entity) <E_Record_Type>: When there is a parent\n\tsubtype and we have discriminants, fix up the COMPONENT_REFs\n\tfor the discriminants to make them reference the corresponding\n\tfields of the parent subtype after it has been built.\n\nFrom-SVN: r116981", "tree": {"sha": "713ceb7365b457e0afcdc02615f5bdf6950ed678", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/713ceb7365b457e0afcdc02615f5bdf6950ed678"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/41d9adc7fac0487106d15207d2707fa5b53c5bbd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41d9adc7fac0487106d15207d2707fa5b53c5bbd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41d9adc7fac0487106d15207d2707fa5b53c5bbd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41d9adc7fac0487106d15207d2707fa5b53c5bbd/comments", "author": null, "committer": null, "parents": [{"sha": "7ee51a34b8164864b8ed4274441ddc000df7482c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ee51a34b8164864b8ed4274441ddc000df7482c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ee51a34b8164864b8ed4274441ddc000df7482c"}], "stats": {"total": 103, "additions": 93, "deletions": 10}, "files": [{"sha": "a2b1cb9767c7a88509ea60c13bb706848c50b7cb", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41d9adc7fac0487106d15207d2707fa5b53c5bbd/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41d9adc7fac0487106d15207d2707fa5b53c5bbd/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=41d9adc7fac0487106d15207d2707fa5b53c5bbd", "patch": "@@ -1,3 +1,12 @@\n+2006-09-15  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR ada/15802\n+\t* decl.c (same_discriminant_p): New static function.\n+\t(gnat_to_gnu_entity) <E_Record_Type>: When there is a parent\n+\tsubtype and we have discriminants, fix up the COMPONENT_REFs\n+\tfor the discriminants to make them reference the corresponding\n+\tfields of the parent subtype after it has been built.\n+\n 2006-09-15  Roger Sayle  <roger@eyesopen.com>\n \n \tPR ada/18817"}, {"sha": "c49e834bf49fc1632cce915cb46ece83359fdd89", "filename": "gcc/ada/decl.c", "status": "modified", "additions": 53, "deletions": 10, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41d9adc7fac0487106d15207d2707fa5b53c5bbd/gcc%2Fada%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41d9adc7fac0487106d15207d2707fa5b53c5bbd/gcc%2Fada%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdecl.c?ref=41d9adc7fac0487106d15207d2707fa5b53c5bbd", "patch": "@@ -90,6 +90,7 @@ static tree elaborate_expression_1 (Node_Id, Entity_Id, tree, tree,\n \t\t\t\t    bool, bool);\n static tree make_packable_type (tree);\n static tree gnat_to_gnu_field (Entity_Id, tree, int, bool);\n+static bool same_discriminant_p (Entity_Id, Entity_Id);\n static void components_to_record (tree, Node_Id, tree, int, bool, tree *,\n                                   bool, bool, bool, bool);\n static int compare_field_bitpos (const PTR, const PTR);\n@@ -2429,16 +2430,18 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t   this record has rep clauses, force the position to zero.  */\n \tif (Present (Parent_Subtype (gnat_entity)))\n \t  {\n+\t    Entity_Id gnat_parent = Parent_Subtype (gnat_entity);\n \t    tree gnu_parent;\n \n \t    /* A major complexity here is that the parent subtype will\n-\t       reference our discriminants.  But those must reference\n-\t       the parent component of this record.  So here we will\n-\t       initialize each of those components to a COMPONENT_REF.\n-\t       The first operand of that COMPONENT_REF is another\n-\t       COMPONENT_REF which will be filled in below, once\n-\t       the parent type can be safely built.  */\n-\n+\t       reference our discriminants in its Discriminant_Constraint\n+\t       list.  But those must reference the parent component of this\n+\t       record which is of the parent subtype we have not built yet!\n+\t       To break the circle we first build a dummy COMPONENT_REF which\n+\t       represents the \"get to the parent\" operation and initialize\n+\t       each of those discriminants to a COMPONENT_REF of the above\n+\t       dummy parent referencing the corresponding discrimant of the\n+\t       base type of the parent subtype.  */\n \t    gnu_get_parent = build3 (COMPONENT_REF, void_type_node,\n \t\t\t\t     build0 (PLACEHOLDER_EXPR, gnu_type),\n \t\t\t\t     build_decl (FIELD_DECL, NULL_TREE,\n@@ -2460,17 +2463,42 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t\t\t     NULL_TREE),\n \t\t     true);\n \n-\t    gnu_parent = gnat_to_gnu_type (Parent_Subtype (gnat_entity));\n+            /* Then we build the parent subtype.  */\n+\t    gnu_parent = gnat_to_gnu_type (gnat_parent);\n+\n+\t    /* Finally we fix up both kinds of twisted COMPONENT_REF we have\n+\t       initially built.  The discriminants must reference the fields\n+\t       of the parent subtype and not those of its base type for the\n+\t       placeholder machinery to properly work.  */\n+\t    if (Has_Discriminants (gnat_entity))\n+\t      for (gnat_field = First_Stored_Discriminant (gnat_entity);\n+\t\t   Present (gnat_field);\n+\t\t   gnat_field = Next_Stored_Discriminant (gnat_field))\n+\t\tif (Present (Corresponding_Discriminant (gnat_field)))\n+\t\t  {\n+\t\t    Entity_Id field = Empty;\n+\t\t    for (field = First_Stored_Discriminant (gnat_parent);\n+\t\t\t Present (field);\n+\t\t\t field = Next_Stored_Discriminant (field))\n+\t\t      if (same_discriminant_p (gnat_field, field))\n+\t\t\tbreak;\n+\t\t    gcc_assert (Present (field));\n+\t\t    TREE_OPERAND (get_gnu_tree (gnat_field), 1)\n+\t\t      = gnat_to_gnu_field_decl (field);\n+\t\t  }\n+\n+\t    /* The \"get to the parent\" COMPONENT_REF must be given its\n+\t       proper type...  */\n+\t    TREE_TYPE (gnu_get_parent) = gnu_parent;\n \n+\t    /* ...and reference the _parent field of this record.  */\n \t    gnu_field_list\n \t      = create_field_decl (get_identifier\n \t\t\t\t   (Get_Name_String (Name_uParent)),\n \t\t\t\t   gnu_parent, gnu_type, 0,\n \t\t\t\t   has_rep ? TYPE_SIZE (gnu_parent) : 0,\n \t\t\t\t   has_rep ? bitsize_zero_node : 0, 1);\n \t    DECL_INTERNAL_P (gnu_field_list) = 1;\n-\n-\t    TREE_TYPE (gnu_get_parent) = gnu_parent;\n \t    TREE_OPERAND (gnu_get_parent, 1) = gnu_field_list;\n \t  }\n \n@@ -4291,6 +4319,21 @@ gnat_to_gnu_field_decl (Entity_Id gnat_entity)\n \n   return gnu_field;\n }\n+\n+/* Return true if DISCR1 and DISCR2 represent the same discriminant.  */\n+\n+static\n+bool same_discriminant_p (Entity_Id discr1, Entity_Id discr2)\n+{\n+  while (Present (Corresponding_Discriminant (discr1)))\n+    discr1 = Corresponding_Discriminant (discr1);\n+\n+  while (Present (Corresponding_Discriminant (discr2)))\n+    discr2 = Corresponding_Discriminant (discr2);\n+\n+  return\n+    Original_Record_Component (discr1) == Original_Record_Component (discr2);\n+}\n \f\n /* Given GNAT_ENTITY, elaborate all expressions that are required to\n    be elaborated at the point of its definition, but do nothing else.  */"}, {"sha": "dc96411dda402d4a62871bb532c96a265baa6f2a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41d9adc7fac0487106d15207d2707fa5b53c5bbd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41d9adc7fac0487106d15207d2707fa5b53c5bbd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=41d9adc7fac0487106d15207d2707fa5b53c5bbd", "patch": "@@ -1,3 +1,8 @@\n+2006-09-15  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/specs/double_record_extension1.ads: New test.\n+\t* gnat.dg/specs/double_record_extension2.ads: Likewise.\n+\n 2006-09-15  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/29051"}, {"sha": "7efd3ea1ea0c8f776156ba98eef110f382f740a8", "filename": "gcc/testsuite/gnat.dg/specs/double_record_extension1.ads", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41d9adc7fac0487106d15207d2707fa5b53c5bbd/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fdouble_record_extension1.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41d9adc7fac0487106d15207d2707fa5b53c5bbd/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fdouble_record_extension1.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fdouble_record_extension1.ads?ref=41d9adc7fac0487106d15207d2707fa5b53c5bbd", "patch": "@@ -0,0 +1,11 @@\n+package double_record_extension1 is\n+\n+   type T1(n: natural) is tagged record\n+      s1: string (1..n);\n+   end record;\n+   type T2(j,k: natural) is new T1(j) with record\n+      s2: string (1..k);\n+   end record;\n+   type T3 is new T2 (10, 10) with null record;\n+\n+end double_record_extension1;"}, {"sha": "d0dca0c0a0427a123100e09d2fd23b24ec52e438", "filename": "gcc/testsuite/gnat.dg/specs/double_record_extension2.ads", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41d9adc7fac0487106d15207d2707fa5b53c5bbd/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fdouble_record_extension2.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41d9adc7fac0487106d15207d2707fa5b53c5bbd/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fdouble_record_extension2.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fdouble_record_extension2.ads?ref=41d9adc7fac0487106d15207d2707fa5b53c5bbd", "patch": "@@ -0,0 +1,15 @@\n+package double_record_extension2 is\n+\n+  type Base_Message_Type (Num_Bytes : Positive) is tagged record\n+     Data_Block : String (1..Num_Bytes);\n+  end record;\n+\n+  type Extended_Message_Type (Num_Bytes1 : Positive; Num_Bytes2 : Positive) is new Base_Message_Type (Num_Bytes1) with record\n+     A: String (1..Num_Bytes2);\n+  end record;\n+\n+  type Final_Message_Type is new Extended_Message_Type with record\n+     B : Integer;\n+  end record;\n+\n+end double_record_extension2;"}]}