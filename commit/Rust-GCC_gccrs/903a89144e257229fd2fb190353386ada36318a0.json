{"sha": "903a89144e257229fd2fb190353386ada36318a0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTAzYTg5MTQ0ZTI1NzIyOWZkMmZiMTkwMzUzMzg2YWRhMzYzMThhMA==", "commit": {"author": {"name": "John Hassey", "email": "hassey@gnu.org", "date": "1993-05-12T21:22:50Z"}, "committer": {"name": "John Hassey", "email": "hassey@gnu.org", "date": "1993-05-12T21:22:50Z"}, "message": "(REG_OK_FOR_BASE_P REG_OK_FOR_INDEX_P): Don't use extended registers for base or index.\n\nFrom-SVN: r4433", "tree": {"sha": "012686188ad3bcbd94bd3db2e79abc76de133889", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/012686188ad3bcbd94bd3db2e79abc76de133889"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/903a89144e257229fd2fb190353386ada36318a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/903a89144e257229fd2fb190353386ada36318a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/903a89144e257229fd2fb190353386ada36318a0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/903a89144e257229fd2fb190353386ada36318a0/comments", "author": null, "committer": null, "parents": [{"sha": "ef39bb951c50c757ca7f394ef8c832608ea2054f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef39bb951c50c757ca7f394ef8c832608ea2054f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef39bb951c50c757ca7f394ef8c832608ea2054f"}], "stats": {"total": 8, "additions": 6, "deletions": 2}, "files": [{"sha": "2fbd069f9f217e0a159e8c67a004582eb4dba472", "filename": "gcc/config/m88k/m88k.h", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/903a89144e257229fd2fb190353386ada36318a0/gcc%2Fconfig%2Fm88k%2Fm88k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/903a89144e257229fd2fb190353386ada36318a0/gcc%2Fconfig%2Fm88k%2Fm88k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fm88k.h?ref=903a89144e257229fd2fb190353386ada36318a0", "patch": "@@ -654,6 +654,9 @@ extern char * reg_names[];\n /* INSN_CLOBBERS_REGNO_P(INSN, REGNO) 0 */\n /* PRESERVE_DEATH_INFO_REGNO_P(REGNO) 0 */\n \n+/* True if register is an extended register.  */\n+#define XRF_REGNO_P(N) ((N) < FIRST_PSEUDO_REGISTER && (N) >= FIRST_EXTENDED_REGISTER)\n+ \n /* Return number of consecutive hard regs needed starting at reg REGNO\n    to hold something of mode MODE.\n    This is ordinarily the length in words of a value of mode MODE\n@@ -1361,10 +1364,11 @@ enum reg_class { NO_REGS, AP_REG, XRF_REGS, GENERAL_REGS, AGRF_REGS,\n \n /* Nonzero if X is a hard reg that can be used as an index\n    or if it is a pseudo reg.  Not the argument pointer.  */\n-#define REG_OK_FOR_INDEX_P(X) (X)\n+#define REG_OK_FOR_INDEX_P(X)                                         \\\n+  (!XRF_REGNO_P(REGNO (X)))\n /* Nonzero if X is a hard reg that can be used as a base reg\n    or if it is a pseudo reg.  */\n-#define REG_OK_FOR_BASE_P(X) (1)\n+#define REG_OK_FOR_BASE_P(X) (REG_OK_FOR_INDEX_P (X))\n \n #else\n "}]}