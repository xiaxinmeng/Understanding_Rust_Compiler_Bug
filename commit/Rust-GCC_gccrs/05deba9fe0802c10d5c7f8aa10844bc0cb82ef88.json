{"sha": "05deba9fe0802c10d5c7f8aa10844bc0cb82ef88", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDVkZWJhOWZlMDgwMmMxMGQ1YzdmOGFhMTA4NDRiYzBjYjgyZWY4OA==", "commit": {"author": {"name": "Tom de Vries", "email": "tom@codesourcery.com", "date": "2015-02-25T15:38:38Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2015-02-25T15:38:38Z"}, "message": "Use DO_PRAGMA in libgomp.oacc-c-c++-common/reduction-1.c\n\n2015-02-25  Tom de Vries  <tom@codesourcery.com>\n\n\t* testsuite/libgomp.oacc-c-c++-common/reduction-1.c (DO_PRAGMA)\n\t(check_reduction_op, check_reduction_macro, max, min):\n\tDeclare.\n\t(test_reductions_int, test_reductions_minmax, test_reductions_bool): New\n\tfunction.\n\t(main): Use new functions.\n\nFrom-SVN: r220971", "tree": {"sha": "b65843ac172fb51e0c26c6fb6e5bbb63e8556e26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b65843ac172fb51e0c26c6fb6e5bbb63e8556e26"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/05deba9fe0802c10d5c7f8aa10844bc0cb82ef88", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05deba9fe0802c10d5c7f8aa10844bc0cb82ef88", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05deba9fe0802c10d5c7f8aa10844bc0cb82ef88", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05deba9fe0802c10d5c7f8aa10844bc0cb82ef88/comments", "author": null, "committer": null, "parents": [{"sha": "a2273e72f3bbb2ddbeb720e60f3f33d68530f5df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2273e72f3bbb2ddbeb720e60f3f33d68530f5df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2273e72f3bbb2ddbeb720e60f3f33d68530f5df"}], "stats": {"total": 232, "additions": 85, "deletions": 147}, "files": [{"sha": "233342817bd301da7d01655f3bc2ffefd96cce2c", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05deba9fe0802c10d5c7f8aa10844bc0cb82ef88/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05deba9fe0802c10d5c7f8aa10844bc0cb82ef88/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=05deba9fe0802c10d5c7f8aa10844bc0cb82ef88", "patch": "@@ -1,3 +1,12 @@\n+2015-02-25  Tom de Vries  <tom@codesourcery.com>\n+\n+\t* testsuite/libgomp.oacc-c-c++-common/reduction-1.c (DO_PRAGMA)\n+\t(check_reduction_op, check_reduction_macro, max, min):\n+\tDeclare.\n+\t(test_reductions_int, test_reductions_minmax, test_reductions_bool): New\n+\tfunction.\n+\t(main): Use new functions.\n+\n 2015-02-18  Ilya Tocar  <ilya.tocar@intel.com>\n \n \t* target.c (gomp_load_plugin_for_device): Use const char * instead of"}, {"sha": "4501f8e9f37131967b377b90135ed761548d7772", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/reduction-1.c", "status": "modified", "additions": 76, "deletions": 147, "changes": 223, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05deba9fe0802c10d5c7f8aa10844bc0cb82ef88/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Freduction-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05deba9fe0802c10d5c7f8aa10844bc0cb82ef88/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Freduction-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Freduction-1.c?ref=05deba9fe0802c10d5c7f8aa10844bc0cb82ef88", "patch": "@@ -7,168 +7,97 @@\n \n #define vl 32\n \n-int\n-main(void)\n+#define DO_PRAGMA(x) _Pragma (#x)\n+\n+#define check_reduction_op(type, op, init, b)\t\\\n+  {\t\t\t\t\t\t\\\n+    type res, vres;\t\t\t\t\\\n+    res = (init);\t\t\t\t\\\n+DO_PRAGMA (acc parallel vector_length (vl))\\\n+DO_PRAGMA (acc loop reduction (op:res))\\\n+    for (i = 0; i < n; i++)\t\t\t\\\n+      res = res op (b);\t\t\t\t\\\n+\t\t\t\t\t\t\\\n+    vres = (init);\t\t\t\t\\\n+    for (i = 0; i < n; i++)\t\t\t\\\n+      vres = vres op (b);\t\t\t\\\n+\t\t\t\t\t\t\\\n+    if (res != vres)\t\t\t\t\\\n+      abort ();\t\t\t\t\t\\\n+  }\n+\n+static void\n+test_reductions_int (void)\n {\n   const int n = 1000;\n   int i;\n-  int vresult, result, array[n];\n-  bool lvresult, lresult;\n+  int array[n];\n \n   for (i = 0; i < n; i++)\n     array[i] = i;\n \n-  result = 0;\n-  vresult = 0;\n-\n-  /* '+' reductions.  */\n-#pragma acc parallel vector_length (vl)\n-#pragma acc loop reduction (+:result)\n-  for (i = 0; i < n; i++)\n-    result += array[i];\n-\n-  /* Verify the reduction.  */\n-  for (i = 0; i < n; i++)\n-    vresult += array[i];\n-\n-  if (result != vresult)\n-    abort ();\n-\n-  result = 0;\n-  vresult = 0;\n-\n-  /* '*' reductions.  */\n-#pragma acc parallel vector_length (vl)\n-#pragma acc loop reduction (*:result)\n-  for (i = 0; i < n; i++)\n-    result *= array[i];\n-\n-  /* Verify the reduction.  */\n-  for (i = 0; i < n; i++)\n-    vresult *= array[i];\n-\n-  if (result != vresult)\n-    abort ();\n-\n-//   result = 0;\n-//   vresult = 0;\n-// \n-//   /* 'max' reductions.  */\n-// #pragma acc parallel vector_length (vl)\n-// #pragma acc loop reduction (+:result)\n-//   for (i = 0; i < n; i++)\n-//       result = result > array[i] ? result : array[i];\n-// \n-//   /* Verify the reduction.  */\n-//   for (i = 0; i < n; i++)\n-//       vresult = vresult > array[i] ? vresult : array[i];\n-// \n-//   printf(\"%d != %d\\n\", result, vresult);\n-//   if (result != vresult)\n-//     abort ();\n-// \n-//   result = 0;\n-//   vresult = 0;\n-// \n-//   /* 'min' reductions.  */\n-// #pragma acc parallel vector_length (vl)\n-// #pragma acc loop reduction (+:result)\n-//   for (i = 0; i < n; i++)\n-//       result = result < array[i] ? result : array[i];\n-// \n-//   /* Verify the reduction.  */\n-//   for (i = 0; i < n; i++)\n-//       vresult = vresult < array[i] ? vresult : array[i];\n-// \n-//   printf(\"%d != %d\\n\", result, vresult);\n-//   if (result != vresult)\n-//     abort ();\n-\n-  result = 0;\n-  vresult = 0;\n-\n-  /* '&' reductions.  */\n-#pragma acc parallel vector_length (vl)\n-#pragma acc loop reduction (&:result)\n-  for (i = 0; i < n; i++)\n-    result &= array[i];\n-\n-  /* Verify the reduction.  */\n-  for (i = 0; i < n; i++)\n-    vresult &= array[i];\n-\n-  if (result != vresult)\n-    abort ();\n-\n-  result = 0;\n-  vresult = 0;\n-\n-  /* '|' reductions.  */\n-#pragma acc parallel vector_length (vl)\n-#pragma acc loop reduction (|:result)\n-  for (i = 0; i < n; i++)\n-    result |= array[i];\n-\n-  /* Verify the reduction.  */\n-  for (i = 0; i < n; i++)\n-    vresult |= array[i];\n-\n-  if (result != vresult)\n-    abort ();\n-\n-  result = 0;\n-  vresult = 0;\n-\n-  /* '^' reductions.  */\n-#pragma acc parallel vector_length (vl)\n-#pragma acc loop reduction (^:result)\n-  for (i = 0; i < n; i++)\n-    result ^= array[i];\n-\n-  /* Verify the reduction.  */\n-  for (i = 0; i < n; i++)\n-    vresult ^= array[i];\n-\n-  if (result != vresult)\n-    abort ();\n-\n-  result = 5;\n-  vresult = 5;\n-\n-  lresult = false;\n-  lvresult = false;\n+  check_reduction_op (int, +, 0, array[i]);\n+  check_reduction_op (int, *, 1, array[i]);\n+  check_reduction_op (int, &, -1, array[i]);\n+  check_reduction_op (int, |, 0, array[i]);\n+  check_reduction_op (int, ^, 0, array[i]);\n+}\n \n-  /* '&&' reductions.  */\n-#pragma acc parallel vector_length (vl)\n-#pragma acc loop reduction (&&:lresult)\n-  for (i = 0; i < n; i++)\n-    lresult = lresult && (result > array[i]);\n+static void\n+test_reductions_bool (void)\n+{\n+  const int n = 1000;\n+  int i;\n+  int array[n];\n+  int cmp_val;\n \n-  /* Verify the reduction.  */\n   for (i = 0; i < n; i++)\n-    lvresult = lresult && (result > array[i]);\n-\n-  if (lresult != lvresult)\n-    abort ();\n-\n-  result = 5;\n-  vresult = 5;\n+    array[i] = i;\n \n-  lresult = false;\n-  lvresult = false;\n+  cmp_val = 5;\n+  check_reduction_op (bool, &&, true, (cmp_val > array[i]));\n+  check_reduction_op (bool, ||, false, (cmp_val > array[i]));\n+}\n \n-  /* '||' reductions.  */\n-#pragma acc parallel vector_length (vl)\n-#pragma acc loop reduction (||:lresult)\n-  for (i = 0; i < n; i++)\n-    lresult = lresult || (result > array[i]);\n+#define check_reduction_macro(type, op, init, b)\t\\\n+  {\t\t\t\t\t\t\t\\\n+    type res, vres;\t\t\t\t\t\\\n+    res = (init);\t\t\t\t\t\\\n+DO_PRAGMA (acc parallel vector_length (vl))\\\n+DO_PRAGMA (acc loop reduction (op:res))\\\n+    for (i = 0; i < n; i++)\t\t\t\t\\\n+      res = op (res, (b));\t\t\t\t\\\n+\t\t\t\t\t\t\t\\\n+    vres = (init);\t\t\t\t\t\\\n+    for (i = 0; i < n; i++)\t\t\t\t\\\n+      vres = op (vres, (b));\t\t\t\t\\\n+\t\t\t\t\t\t\t\\\n+    if (res != vres)\t\t\t\t\t\\\n+      abort ();\t\t\t\t\t\t\\\n+  }\n+\n+#define max(a, b) (((a) > (b)) ? (a) : (b))\n+#define min(a, b) (((a) < (b)) ? (a) : (b))\n+\n+static void\n+test_reductions_minmax (void)\n+{\n+  const int n = 1000;\n+  int i;\n+  int array[n];\n \n-  /* Verify the reduction.  */\n   for (i = 0; i < n; i++)\n-    lvresult = lresult || (result > array[i]);\n+    array[i] = i;\n \n-  if (lresult != lvresult)\n-    abort ();\n+  check_reduction_macro (int, min, n + 1, array[i]);\n+  check_reduction_macro (int, max, -1, array[i]);\n+}\n \n+int\n+main (void)\n+{\n+  test_reductions_int ();\n+  test_reductions_bool ();\n+  test_reductions_minmax ();\n   return 0;\n }"}]}