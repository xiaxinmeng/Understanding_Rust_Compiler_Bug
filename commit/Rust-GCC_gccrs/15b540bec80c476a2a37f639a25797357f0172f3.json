{"sha": "15b540bec80c476a2a37f639a25797357f0172f3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTViNTQwYmVjODBjNDc2YTJhMzdmNjM5YTI1Nzk3MzU3ZjAxNzJmMw==", "commit": {"author": {"name": "Javier Miranda", "email": "miranda@adacore.com", "date": "2006-10-31T18:11:44Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2006-10-31T18:11:44Z"}, "message": "2006-10-31  Javier Miranda  <miranda@adacore.com>\n\n\t* s-tpoben.ads, s-tpoben.adb, s-taprob.ads, s-taprob.adb\n\t(Get_Ceiling): New subprogram that returns\n\tthe ceiling priority of the protected object.\n\t(Set_Ceiling): New subprogram that sets the new ceiling priority of\n\tthe protected object.\n\n\t* s-tarest.adb: (Create_Restricted_Task): Fix potential CE.\n\n\t* s-taskin.ads, s-taskin.adb: (Storage_Size): New function.\n\nFrom-SVN: r118317", "tree": {"sha": "f67411d1caed58af4a10e05969be9e1aa9909b51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f67411d1caed58af4a10e05969be9e1aa9909b51"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/15b540bec80c476a2a37f639a25797357f0172f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15b540bec80c476a2a37f639a25797357f0172f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15b540bec80c476a2a37f639a25797357f0172f3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15b540bec80c476a2a37f639a25797357f0172f3/comments", "author": {"login": "miranda-adacore", "id": 54413934, "node_id": "MDQ6VXNlcjU0NDEzOTM0", "avatar_url": "https://avatars.githubusercontent.com/u/54413934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/miranda-adacore", "html_url": "https://github.com/miranda-adacore", "followers_url": "https://api.github.com/users/miranda-adacore/followers", "following_url": "https://api.github.com/users/miranda-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/miranda-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/miranda-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/miranda-adacore/subscriptions", "organizations_url": "https://api.github.com/users/miranda-adacore/orgs", "repos_url": "https://api.github.com/users/miranda-adacore/repos", "events_url": "https://api.github.com/users/miranda-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/miranda-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d5ef47fb25f583d46b42dd53917aa5ff5990bccb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5ef47fb25f583d46b42dd53917aa5ff5990bccb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5ef47fb25f583d46b42dd53917aa5ff5990bccb"}], "stats": {"total": 116, "additions": 108, "deletions": 8}, "files": [{"sha": "d4b08e4c1f170ae2fe4e23e31232b3219eadf34a", "filename": "gcc/ada/s-taprob.adb", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15b540bec80c476a2a37f639a25797357f0172f3/gcc%2Fada%2Fs-taprob.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15b540bec80c476a2a37f639a25797357f0172f3/gcc%2Fada%2Fs-taprob.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprob.adb?ref=15b540bec80c476a2a37f639a25797357f0172f3", "patch": "@@ -7,7 +7,7 @@\n --                                  B o d y                                 --\n --                                                                          --\n --             Copyright (C) 1991-1994, Florida State University            --\n---                     Copyright (C) 1995-2005, AdaCore                     --\n+--                     Copyright (C) 1995-2006, AdaCore                     --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -81,9 +81,20 @@ package body System.Tasking.Protected_Objects is\n \n       Initialize_Lock (Init_Priority, Object.L'Access);\n       Object.Ceiling := System.Any_Priority (Init_Priority);\n+      Object.New_Ceiling := System.Any_Priority (Init_Priority);\n       Object.Owner := Null_Task;\n    end Initialize_Protection;\n \n+   -----------------\n+   -- Get_Ceiling --\n+   -----------------\n+\n+   function Get_Ceiling\n+     (Object : Protection_Access) return System.Any_Priority is\n+   begin\n+      return Object.New_Ceiling;\n+   end Get_Ceiling;\n+\n    ----------\n    -- Lock --\n    ----------\n@@ -199,6 +210,17 @@ package body System.Tasking.Protected_Objects is\n       end if;\n    end Lock_Read_Only;\n \n+   -----------------\n+   -- Set_Ceiling --\n+   -----------------\n+\n+   procedure Set_Ceiling\n+     (Object : Protection_Access;\n+      Prio   : System.Any_Priority) is\n+   begin\n+      Object.New_Ceiling := Prio;\n+   end Set_Ceiling;\n+\n    ------------\n    -- Unlock --\n    ------------"}, {"sha": "e62f230ccfd5d6186e1d85e07350513e0ea3e530", "filename": "gcc/ada/s-taprob.ads", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15b540bec80c476a2a37f639a25797357f0172f3/gcc%2Fada%2Fs-taprob.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15b540bec80c476a2a37f639a25797357f0172f3/gcc%2Fada%2Fs-taprob.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprob.ads?ref=15b540bec80c476a2a37f639a25797357f0172f3", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  S p e c                                 --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -45,7 +45,7 @@\n \n --  Note: the compiler generates direct calls to this interface, via Rtsfind.\n --  Any changes to this interface may require corresponding compiler changes\n---  in exp_ch9.adb and possibly exp_ch7.adb\n+--  in exp_ch9.adb and possibly exp_ch7.adb and exp_attr.adb\n \n package System.Tasking.Protected_Objects is\n    pragma Elaborate_Body;\n@@ -172,6 +172,10 @@ package System.Tasking.Protected_Objects is\n \n    Null_PO : constant Protection_Access := null;\n \n+   function Get_Ceiling\n+     (Object : Protection_Access) return System.Any_Priority;\n+   --  Returns the new ceiling priority of the protected object\n+\n    procedure Initialize_Protection\n      (Object           : Protection_Access;\n       Ceiling_Priority : Integer);\n@@ -196,6 +200,11 @@ package System.Tasking.Protected_Objects is\n    --  for possible future use. At the current time, everyone uses Lock\n    --  for both read and write locks.\n \n+   procedure Set_Ceiling\n+     (Object : Protection_Access;\n+      Prio   : System.Any_Priority);\n+   --  Sets the new ceiling priority of the protected object\n+\n    procedure Unlock (Object : Protection_Access);\n    --  Relinquish ownership of the lock for the object represented by\n    --  the Object parameter. If this ownership was for write access, or\n@@ -212,6 +221,16 @@ private\n       Ceiling : System.Any_Priority;\n       --  Ceiling priority associated to the protected object\n \n+      New_Ceiling : System.Any_Priority;\n+      --  New ceiling priority associated to the protected object. In case\n+      --  of assignment of a new ceiling priority to the protected object the\n+      --  frontend generates a call to set_ceiling to save the new value in\n+      --  this field. After such assignment this value can be read by means\n+      --  of the 'Priority attribute, which generates a call to get_ceiling.\n+      --  However, the ceiling of the protected object will not be changed\n+      --  until completion of the protected action in which the assignment\n+      --  has been executed (AARM D.5.2 (10/2)).\n+\n       Owner : Task_Id;\n       --  This field contains the protected object's owner. Null_Task\n       --  indicates that the protected object is not currently being used."}, {"sha": "ab64fa8d2c03102d9c6b949e7af54def2262a905", "filename": "gcc/ada/s-tarest.adb", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15b540bec80c476a2a37f639a25797357f0172f3/gcc%2Fada%2Fs-tarest.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15b540bec80c476a2a37f639a25797357f0172f3/gcc%2Fada%2Fs-tarest.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tarest.adb?ref=15b540bec80c476a2a37f639a25797357f0172f3", "patch": "@@ -473,6 +473,7 @@ package body System.Tasking.Restricted.Stages is\n       Self_ID       : constant Task_Id := STPO.Self;\n       Base_Priority : System.Any_Priority;\n       Success       : Boolean;\n+      Len           : Integer;\n \n    begin\n       --  Stack is not preallocated on this target, so that Stack_Address must\n@@ -515,10 +516,11 @@ package body System.Tasking.Restricted.Stages is\n \n       Created_Task.Entry_Calls (1).Self := Created_Task;\n \n-      Created_Task.Common.Task_Image_Len :=\n+      Len :=\n         Integer'Min (Created_Task.Common.Task_Image'Length, Task_Image'Length);\n-      Created_Task.Common.Task_Image\n-        (1 .. Created_Task.Common.Task_Image_Len) := Task_Image;\n+      Created_Task.Common.Task_Image_Len := Len;\n+      Created_Task.Common.Task_Image (1 .. Len) :=\n+        Task_Image (Task_Image'First .. Task_Image'First + Len - 1);\n \n       Unlock (Self_ID);\n "}, {"sha": "214d7a45c17aa76c5ef66d86be517afe6a4285c1", "filename": "gcc/ada/s-taskin.adb", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15b540bec80c476a2a37f639a25797357f0172f3/gcc%2Fada%2Fs-taskin.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15b540bec80c476a2a37f639a25797357f0172f3/gcc%2Fada%2Fs-taskin.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taskin.adb?ref=15b540bec80c476a2a37f639a25797357f0172f3", "patch": "@@ -66,6 +66,17 @@ package body System.Tasking is\n \n    function Self return Task_Id renames STPO.Self;\n \n+   ------------------\n+   -- Storage_Size --\n+   ------------------\n+\n+   function Storage_Size (T : Task_Id) return System.Parameters.Size_Type is\n+   begin\n+      return\n+         System.Parameters.Size_Type\n+           (T.Common.Compiler_Data.Pri_Stack_Info.Size);\n+   end Storage_Size;\n+\n    ---------------------\n    -- Initialize_ATCB --\n    ---------------------"}, {"sha": "a9b1812b7dccd31fdab9c582bc5380fc86869eaa", "filename": "gcc/ada/s-taskin.ads", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15b540bec80c476a2a37f639a25797357f0172f3/gcc%2Fada%2Fs-taskin.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15b540bec80c476a2a37f639a25797357f0172f3/gcc%2Fada%2Fs-taskin.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taskin.ads?ref=15b540bec80c476a2a37f639a25797357f0172f3", "patch": "@@ -377,6 +377,12 @@ package System.Tasking is\n    pragma Inline (Detect_Blocking);\n    --  Return whether the Detect_Blocking pragma is enabled\n \n+   function Storage_Size (T : Task_Id) return System.Parameters.Size_Type;\n+   --  Retrieve from the TCB of the task the allocated size of its stack,\n+   --  either the system default or the size specified by a pragma. This\n+   --  is in general a non-static value that can depend on discriminants\n+   --  of the task.\n+\n    ----------------------------------------------\n    -- Ada_Task_Control_Block (ATCB) definition --\n    ----------------------------------------------"}, {"sha": "f15afc05092d81185095bbdf44e8842b50ae2475", "filename": "gcc/ada/s-tpoben.adb", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15b540bec80c476a2a37f639a25797357f0172f3/gcc%2Fada%2Fs-tpoben.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15b540bec80c476a2a37f639a25797357f0172f3/gcc%2Fada%2Fs-tpoben.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tpoben.adb?ref=15b540bec80c476a2a37f639a25797357f0172f3", "patch": "@@ -7,7 +7,7 @@\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---         Copyright (C) 1998-2005, Free Software Foundation, Inc.          --\n+--         Copyright (C) 1998-2006, Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -162,6 +162,16 @@ package body System.Tasking.Protected_Objects.Entries is\n       STPO.Finalize_Lock (Object.L'Unrestricted_Access);\n    end Finalize;\n \n+   -----------------\n+   -- Get_Ceiling --\n+   -----------------\n+\n+   function Get_Ceiling\n+     (Object : Protection_Entries_Access) return System.Any_Priority is\n+   begin\n+      return Object.New_Ceiling;\n+   end Get_Ceiling;\n+\n    -------------------------------------\n    -- Has_Interrupt_Or_Attach_Handler --\n    -------------------------------------\n@@ -349,6 +359,17 @@ package body System.Tasking.Protected_Objects.Entries is\n       end if;\n    end Lock_Read_Only_Entries;\n \n+   -----------------\n+   -- Set_Ceiling --\n+   -----------------\n+\n+   procedure Set_Ceiling\n+     (Object : Protection_Entries_Access;\n+      Prio   : System.Any_Priority) is\n+   begin\n+      Object.New_Ceiling := Prio;\n+   end Set_Ceiling;\n+\n    --------------------\n    -- Unlock_Entries --\n    --------------------"}, {"sha": "d19324d5a7ba7f413a664077ba379ccc262944ef", "filename": "gcc/ada/s-tpoben.ads", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15b540bec80c476a2a37f639a25797357f0172f3/gcc%2Fada%2Fs-tpoben.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15b540bec80c476a2a37f639a25797357f0172f3/gcc%2Fada%2Fs-tpoben.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tpoben.ads?ref=15b540bec80c476a2a37f639a25797357f0172f3", "patch": "@@ -7,7 +7,7 @@\n --                                                                          --\n --                                  S p e c                                 --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -93,6 +93,16 @@ package System.Tasking.Protected_Objects.Entries is\n       Ceiling : System.Any_Priority;\n       --  Ceiling priority associated with the protected object\n \n+      New_Ceiling : System.Any_Priority;\n+      --  New ceiling priority associated to the protected object. In case\n+      --  of assignment of a new ceiling priority to the protected object the\n+      --  frontend generates a call to set_ceiling to save the new value in\n+      --  this field. After such assignment this value can be read by means\n+      --  of the 'Priority attribute, which generates a call to get_ceiling.\n+      --  However, the ceiling of the protected object will not be changed\n+      --  until completion of the protected action in which the assignment\n+      --  has been executed (AARM D.5.2 (10/2)).\n+\n       Owner : Task_Id;\n       --  This field contains the protected object's owner. Null_Task\n       --  indicates that the protected object is not currently being used.\n@@ -142,6 +152,10 @@ package System.Tasking.Protected_Objects.Entries is\n    function To_Protection is\n      new Unchecked_Conversion (System.Address, Protection_Entries_Access);\n \n+   function Get_Ceiling\n+     (Object : Protection_Entries_Access) return System.Any_Priority;\n+   --  Returns the new ceiling priority of the protected object\n+\n    function Has_Interrupt_Or_Attach_Handler\n      (Object : Protection_Entries_Access) return Boolean;\n    --  Returns True if an Interrupt_Handler or Attach_Handler pragma applies\n@@ -183,6 +197,11 @@ package System.Tasking.Protected_Objects.Entries is\n    --  possible future use. At the current time, everyone uses Lock for both\n    --  read and write locks.\n \n+   procedure Set_Ceiling\n+     (Object : Protection_Entries_Access;\n+      Prio   : System.Any_Priority);\n+   --  Sets the new ceiling priority of the protected object\n+\n    procedure Unlock_Entries (Object : Protection_Entries_Access);\n    --  Relinquish ownership of the lock for the object represented by the\n    --  Object parameter. If this ownership was for write access, or if it was"}]}