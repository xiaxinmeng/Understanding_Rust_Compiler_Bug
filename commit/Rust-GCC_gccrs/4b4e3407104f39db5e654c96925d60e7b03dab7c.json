{"sha": "4b4e3407104f39db5e654c96925d60e7b03dab7c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGI0ZTM0MDcxMDRmMzlkYjVlNjU0Yzk2OTI1ZDYwZTdiMDNkYWI3Yw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-02-21T22:56:58Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-02-21T22:56:58Z"}, "message": "(grokdeclarator): Added code to support machine attributes.\n\n(duplicate_decls): Pass DECL_MACHINE_ATTRIBUTES to descendent typedef;\nmake duplicate typedefs that are identical generate a warning if they\nare both in system header files.\n(redeclaration_error_message): Make duplicate typedefs that are\nidentical not an error if they are both in system header files.\n\nFrom-SVN: r8994", "tree": {"sha": "9226148f65a38be7322e61d5ebaef858a395815c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9226148f65a38be7322e61d5ebaef858a395815c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4b4e3407104f39db5e654c96925d60e7b03dab7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b4e3407104f39db5e654c96925d60e7b03dab7c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b4e3407104f39db5e654c96925d60e7b03dab7c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b4e3407104f39db5e654c96925d60e7b03dab7c/comments", "author": null, "committer": null, "parents": [{"sha": "1228e2a6b2d93ce5cc00c933b44fcf534f844bb3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1228e2a6b2d93ce5cc00c933b44fcf534f844bb3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1228e2a6b2d93ce5cc00c933b44fcf534f844bb3"}], "stats": {"total": 20, "additions": 20, "deletions": 0}, "files": [{"sha": "e4316cee8a3c33b58f7c16126867f39bcd1af4b9", "filename": "gcc/c-decl.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b4e3407104f39db5e654c96925d60e7b03dab7c/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b4e3407104f39db5e654c96925d60e7b03dab7c/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=4b4e3407104f39db5e654c96925d60e7b03dab7c", "patch": "@@ -1316,6 +1316,9 @@ duplicate_decls (newdecl, olddecl)\n   tree newtype = TREE_TYPE (newdecl);\n   char *errmsg = 0;\n \n+  if (TREE_CODE_CLASS (TREE_CODE (olddecl)) == 'd')\n+    DECL_MACHINE_ATTRIBUTES (newdecl) = DECL_MACHINE_ATTRIBUTES (olddecl);\n+\n   if (TREE_CODE (newtype) == ERROR_MARK\n       || TREE_CODE (oldtype) == ERROR_MARK)\n     types_match = 0;\n@@ -1564,6 +1567,18 @@ duplicate_decls (newdecl, olddecl)\n \t\t\t    ? \"`%s' previously defined here\"\n \t\t\t    : \"`%s' previously declared here\"));\n \t}\n+      else if (TREE_CODE (newdecl) == TYPE_DECL\n+               && (DECL_IN_SYSTEM_HEADER (olddecl) \n+                   || DECL_IN_SYSTEM_HEADER (newdecl)))\n+\t{\n+\t  warning_with_decl (newdecl, \"redefinition of `%s'\");\n+\t  warning_with_decl \n+\t    (olddecl,\n+\t     ((DECL_INITIAL (olddecl)\n+\t       && current_binding_level == global_binding_level)\n+\t      ? \"`%s' previously defined here\"\n+\t      : \"`%s' previously declared here\"));\n+\t}\n       else if (TREE_CODE (olddecl) == FUNCTION_DECL\n \t       && DECL_INITIAL (olddecl) != 0\n \t       && TYPE_ARG_TYPES (oldtype) == 0\n@@ -2364,6 +2379,8 @@ redeclaration_error_message (newdecl, olddecl)\n     {\n       if (flag_traditional && TREE_TYPE (newdecl) == TREE_TYPE (olddecl))\n \treturn 0;\n+      if (DECL_IN_SYSTEM_HEADER (olddecl) || DECL_IN_SYSTEM_HEADER (newdecl))\n+\treturn 0;\n       return \"redefinition of `%s'\";\n     }\n   else if (TREE_CODE (newdecl) == FUNCTION_DECL)\n@@ -4010,6 +4027,7 @@ grokdeclarator (declarator, declspecs, decl_context, initialized)\n   enum tree_code innermost_code = ERROR_MARK;\n   int bitfield = 0;\n   int size_varies = 0;\n+  tree decl_machine_attr = NULL_TREE;\n \n   if (decl_context == BITFIELD)\n     bitfield = 1, decl_context = FIELD;\n@@ -4119,6 +4137,7 @@ grokdeclarator (declarator, declspecs, decl_context, initialized)\n       else if (TREE_CODE (id) == TYPE_DECL)\n \t{\n \t  type = TREE_TYPE (id);\n+          decl_machine_attr = DECL_MACHINE_ATTRIBUTES (id);\n \t  typedef_decl = id;\n \t}\n       /* Built-in types come as identifiers.  */\n@@ -4853,6 +4872,7 @@ grokdeclarator (declarator, declspecs, decl_context, initialized)\n \t  end_temporary_allocation ();\n \n \tdecl = build_decl (FUNCTION_DECL, declarator, type);\n+\tdecl = build_decl_attribute_variant (decl, decl_machine_attr);\n \n \tif (pedantic && (constp || volatilep)\n \t    && ! DECL_IN_SYSTEM_HEADER (decl))"}]}