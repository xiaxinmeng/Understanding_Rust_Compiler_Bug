{"sha": "9e3a513193028ba501867dd4a6090ae904eb1abc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWUzYTUxMzE5MzAyOGJhNTAxODY3ZGQ0YTYwOTBhZTkwNGViMWFiYw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2015-04-27T09:55:21Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2015-04-27T09:55:21Z"}, "message": "vec.h (vec): Make splice arguments const.\n\ngcc/\n\t* vec.h (vec): Make splice arguments const.  Update definitions\n\taccordingly.\n\nFrom-SVN: r222454", "tree": {"sha": "78fa530ebb2b23175f7eb1929e5f967c2ae69e12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/78fa530ebb2b23175f7eb1929e5f967c2ae69e12"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9e3a513193028ba501867dd4a6090ae904eb1abc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e3a513193028ba501867dd4a6090ae904eb1abc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e3a513193028ba501867dd4a6090ae904eb1abc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e3a513193028ba501867dd4a6090ae904eb1abc/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c55d8b0bee698146ce282ae28d1101a5a3a30a7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c55d8b0bee698146ce282ae28d1101a5a3a30a7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c55d8b0bee698146ce282ae28d1101a5a3a30a7b"}], "stats": {"total": 23, "additions": 14, "deletions": 9}, "files": [{"sha": "f9eba482611b7084dd48787abc0117806e6cb84b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e3a513193028ba501867dd4a6090ae904eb1abc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e3a513193028ba501867dd4a6090ae904eb1abc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9e3a513193028ba501867dd4a6090ae904eb1abc", "patch": "@@ -1,3 +1,8 @@\n+2015-04-27  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* vec.h (vec): Make splice arguments const.  Update definitions\n+\taccordingly.\n+\n 2015-04-27  Yvan Roux  <yvan.roux@linaro.org>\n \n \t* config/arm/arm.md (*arm_subsi3_insn): Fixed redundant"}, {"sha": "aa9a255bf97687a8c251e7197a858336269cfa9f", "filename": "gcc/vec.h", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e3a513193028ba501867dd4a6090ae904eb1abc/gcc%2Fvec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e3a513193028ba501867dd4a6090ae904eb1abc/gcc%2Fvec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvec.h?ref=9e3a513193028ba501867dd4a6090ae904eb1abc", "patch": "@@ -483,8 +483,8 @@ struct GTY((user)) vec<T, A, vl_embed>\n   bool iterate (unsigned, T *) const;\n   bool iterate (unsigned, T **) const;\n   vec *copy (ALONE_CXX_MEM_STAT_INFO) const;\n-  void splice (vec &);\n-  void splice (vec *src);\n+  void splice (const vec &);\n+  void splice (const vec *src);\n   T *quick_push (const T &);\n   T &pop (void);\n   void truncate (unsigned);\n@@ -705,7 +705,7 @@ vec_safe_copy (vec<T, A, vl_embed> *src CXX_MEM_STAT_INFO)\n    Reallocate DST, if necessary.  */\n template<typename T, typename A>\n inline void\n-vec_safe_splice (vec<T, A, vl_embed> *&dst, vec<T, A, vl_embed> *src\n+vec_safe_splice (vec<T, A, vl_embed> *&dst, const vec<T, A, vl_embed> *src\n \t\t CXX_MEM_STAT_INFO)\n {\n   unsigned src_len = vec_safe_length (src);\n@@ -836,7 +836,7 @@ vec<T, A, vl_embed>::copy (ALONE_MEM_STAT_DECL) const\n \n template<typename T, typename A>\n inline void\n-vec<T, A, vl_embed>::splice (vec<T, A, vl_embed> &src)\n+vec<T, A, vl_embed>::splice (const vec<T, A, vl_embed> &src)\n {\n   unsigned len = src.length ();\n   if (len)\n@@ -849,7 +849,7 @@ vec<T, A, vl_embed>::splice (vec<T, A, vl_embed> &src)\n \n template<typename T, typename A>\n inline void\n-vec<T, A, vl_embed>::splice (vec<T, A, vl_embed> *src)\n+vec<T, A, vl_embed>::splice (const vec<T, A, vl_embed> *src)\n {\n   if (src)\n     splice (*src);\n@@ -1212,8 +1212,8 @@ struct vec<T, va_heap, vl_ptr>\n   vec copy (ALONE_CXX_MEM_STAT_INFO) const;\n   bool reserve (unsigned, bool = false CXX_MEM_STAT_INFO);\n   bool reserve_exact (unsigned CXX_MEM_STAT_INFO);\n-  void splice (vec &);\n-  void safe_splice (vec & CXX_MEM_STAT_INFO);\n+  void splice (const vec &);\n+  void safe_splice (const vec & CXX_MEM_STAT_INFO);\n   T *quick_push (const T &);\n   T *safe_push (const T &CXX_MEM_STAT_INFO);\n   T &pop (void);\n@@ -1489,7 +1489,7 @@ vec<T, va_heap, vl_ptr>::release (void)\n \n template<typename T>\n inline void\n-vec<T, va_heap, vl_ptr>::splice (vec<T, va_heap, vl_ptr> &src)\n+vec<T, va_heap, vl_ptr>::splice (const vec<T, va_heap, vl_ptr> &src)\n {\n   if (src.m_vec)\n     m_vec->splice (*(src.m_vec));\n@@ -1503,7 +1503,7 @@ vec<T, va_heap, vl_ptr>::splice (vec<T, va_heap, vl_ptr> &src)\n \n template<typename T>\n inline void\n-vec<T, va_heap, vl_ptr>::safe_splice (vec<T, va_heap, vl_ptr> &src\n+vec<T, va_heap, vl_ptr>::safe_splice (const vec<T, va_heap, vl_ptr> &src\n \t\t\t\t      MEM_STAT_DECL)\n {\n   if (src.length ())"}]}