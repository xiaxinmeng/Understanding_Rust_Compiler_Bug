{"sha": "56a2f049100e12cc7a96480a6879c229778515ef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTZhMmYwNDkxMDBlMTJjYzdhOTY0ODBhNjg3OWMyMjk3Nzg1MTVlZg==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-04-19T01:16:25Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-04-19T01:16:25Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r787", "tree": {"sha": "1bb95648826abaef616f3ae6138f97440dac9e9c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1bb95648826abaef616f3ae6138f97440dac9e9c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/56a2f049100e12cc7a96480a6879c229778515ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56a2f049100e12cc7a96480a6879c229778515ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56a2f049100e12cc7a96480a6879c229778515ef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56a2f049100e12cc7a96480a6879c229778515ef/comments", "author": null, "committer": null, "parents": [{"sha": "0dcd8ceed30eb9f1009fc5846df8cb70d03bd974", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0dcd8ceed30eb9f1009fc5846df8cb70d03bd974", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0dcd8ceed30eb9f1009fc5846df8cb70d03bd974"}], "stats": {"total": 9, "additions": 7, "deletions": 2}, "files": [{"sha": "44dc7ec0310472a46b68a59ac929147bea938bbd", "filename": "gcc/expmed.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56a2f049100e12cc7a96480a6879c229778515ef/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56a2f049100e12cc7a96480a6879c229778515ef/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=56a2f049100e12cc7a96480a6879c229778515ef", "patch": "@@ -200,13 +200,18 @@ store_bit_field (str_rtx, bitsize, bitnum, fieldmode, value, align, total_size)\n \n   /* Note that the adjustment of BITPOS above has no effect on whether\n      BITPOS is 0 in a REG bigger than a word.  */\n-  if (GET_MODE_SIZE (fieldmode) >= UNITS_PER_WORD && GET_CODE (op0) != MEM\n+  if (GET_MODE_SIZE (fieldmode) >= UNITS_PER_WORD\n+      && (! STRICT_ALIGNMENT || GET_CODE (op0) != MEM)\n       && bitpos == 0 && bitsize == GET_MODE_BITSIZE (fieldmode))\n     {\n       /* Storing in a full-word or multi-word field in a register\n \t can be done with just SUBREG.  */\n       if (GET_MODE (op0) != fieldmode)\n-\top0 = gen_rtx (SUBREG, fieldmode, op0, offset);\n+\tif (GET_CODE (op0) == REG)\n+\t  op0 = gen_rtx (SUBREG, fieldmode, op0, offset);\n+\telse\n+\t  op0 = change_address (op0, fieldmode,\n+\t\t\t\tplus_constant (XEXP (op0, 0), offset));\n       emit_move_insn (op0, value);\n       return value;\n     }"}]}