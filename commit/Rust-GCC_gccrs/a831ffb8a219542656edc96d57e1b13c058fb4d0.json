{"sha": "a831ffb8a219542656edc96d57e1b13c058fb4d0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTgzMWZmYjhhMjE5NTQyNjU2ZWRjOTZkNTdlMWIxM2MwNThmYjRkMA==", "commit": {"author": {"name": "Mikael Morin", "email": "mikael@gcc.gnu.org", "date": "2011-11-04T00:17:07Z"}, "committer": {"name": "Mikael Morin", "email": "mikael@gcc.gnu.org", "date": "2011-11-04T00:17:07Z"}, "message": "trans-intrinsic.c (gfc_conv_intrinsic_arith): Update conditions.\n\n\t* trans-intrinsic.c (gfc_conv_intrinsic_arith): Update conditions.\n\nFrom-SVN: r180913", "tree": {"sha": "23ecf060554c4053c9eebd6c35870c7d2ba7c4e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/23ecf060554c4053c9eebd6c35870c7d2ba7c4e7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a831ffb8a219542656edc96d57e1b13c058fb4d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a831ffb8a219542656edc96d57e1b13c058fb4d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a831ffb8a219542656edc96d57e1b13c058fb4d0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a831ffb8a219542656edc96d57e1b13c058fb4d0/comments", "author": null, "committer": null, "parents": [{"sha": "93ee6382c7586e92cbc49fe217780c6d79eb8adb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93ee6382c7586e92cbc49fe217780c6d79eb8adb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93ee6382c7586e92cbc49fe217780c6d79eb8adb"}], "stats": {"total": 16, "additions": 10, "deletions": 6}, "files": [{"sha": "be67d8d0032c9f6fa1ea885e7e94a165aed92142", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a831ffb8a219542656edc96d57e1b13c058fb4d0/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a831ffb8a219542656edc96d57e1b13c058fb4d0/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=a831ffb8a219542656edc96d57e1b13c058fb4d0", "patch": "@@ -1,3 +1,7 @@\n+2011-11-04  Mikael Morin  <mikael@gcc.gnu.org>\n+\n+\t* trans-intrinsic.c (gfc_conv_intrinsic_arith): Update conditions.\n+\n 2011-11-04  Mikael Morin  <mikael@gcc.gnu.org>\n \n \t* frontend-passes.c (cfe_register_funcs): Return early in the case"}, {"sha": "342d2cb4ec40f571d191740c747bb2d22198dd13", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a831ffb8a219542656edc96d57e1b13c058fb4d0/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a831ffb8a219542656edc96d57e1b13c058fb4d0/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=a831ffb8a219542656edc96d57e1b13c058fb4d0", "patch": "@@ -2624,7 +2624,7 @@ gfc_conv_intrinsic_arith (gfc_se * se, gfc_expr * expr, enum tree_code op,\n       maskexpr = actual->expr;\n     }\n \n-  if (maskexpr && maskexpr->rank != 0)\n+  if (maskexpr && maskexpr->rank > 0)\n     {\n       maskss = gfc_walk_expr (maskexpr);\n       gcc_assert (maskss != gfc_ss_terminator);\n@@ -2635,21 +2635,21 @@ gfc_conv_intrinsic_arith (gfc_se * se, gfc_expr * expr, enum tree_code op,\n   /* Initialize the scalarizer.  */\n   gfc_init_loopinfo (&loop);\n   gfc_add_ss_to_loop (&loop, arrayss);\n-  if (maskss)\n+  if (maskexpr && maskexpr->rank > 0)\n     gfc_add_ss_to_loop (&loop, maskss);\n \n   /* Initialize the loop.  */\n   gfc_conv_ss_startstride (&loop);\n   gfc_conv_loop_setup (&loop, &expr->where);\n \n   gfc_mark_ss_chain_used (arrayss, 1);\n-  if (maskss)\n+  if (maskexpr && maskexpr->rank > 0)\n     gfc_mark_ss_chain_used (maskss, 1);\n   /* Generate the loop body.  */\n   gfc_start_scalarized_body (&loop, &body);\n \n   /* If we have a mask, only add this element if the mask is set.  */\n-  if (maskss)\n+  if (maskexpr && maskexpr->rank > 0)\n     {\n       gfc_init_se (&maskse, NULL);\n       gfc_copy_loopinfo_to_se (&maskse, &loop);\n@@ -2740,7 +2740,7 @@ gfc_conv_intrinsic_arith (gfc_se * se, gfc_expr * expr, enum tree_code op,\n \n   gfc_add_block_to_block (&block, &arrayse.post);\n \n-  if (maskss)\n+  if (maskexpr && maskexpr->rank > 0)\n     {\n       /* We enclose the above in if (mask) {...} .  */\n \n@@ -2755,7 +2755,7 @@ gfc_conv_intrinsic_arith (gfc_se * se, gfc_expr * expr, enum tree_code op,\n   gfc_trans_scalarizing_loops (&loop, &body);\n \n   /* For a scalar mask, enclose the loop in an if statement.  */\n-  if (maskexpr && maskss == NULL)\n+  if (maskexpr && maskexpr->rank == 0)\n     {\n       gfc_init_se (&maskse, NULL);\n       gfc_conv_expr_val (&maskse, maskexpr);"}]}