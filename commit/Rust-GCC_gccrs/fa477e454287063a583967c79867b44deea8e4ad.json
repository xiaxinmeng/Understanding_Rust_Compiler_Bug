{"sha": "fa477e454287063a583967c79867b44deea8e4ad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmE0NzdlNDU0Mjg3MDYzYTU4Mzk2N2M3OTg2N2I0NGRlZWE4ZTRhZA==", "commit": {"author": {"name": "Anton Youdkevitch", "email": "anton.youdkevitch@bell-sw.com", "date": "2020-04-28T08:55:34Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2020-04-28T09:00:20Z"}, "message": "aarch64: Add TX3 machine model\n\nHere is the patch introducing thunderx3t110 machine model\nfor the scheduler. A name for the new chip was added to the\nlist of the names to be recognized as a valid parameter for\nmcpu and mtune flags. Added the TX3 tuning table and cost\nmodel tables.\n\nAdded the new chip name to the documentation. Fixed copyright\nnames and dates.\n\nLowering the chip capabilities to v8.3 to be on the safe side.\n\nBootstrapped on AArch64.\n\n2020-04-27 Anton Youdkevitch <anton.youdkevitch@bell-sw.com>\n\n        * config/aarch64/aarch64-cores.def: Add the chip name.\n        * config/aarch64/aarch64-tune.md: Regenerated.\n        * config/aarch64/aarch64.c: Add tuning table for the chip.\n        * gcc/config/aarch64/aarch64-cost-tables.h: Add cost tables.\n        * config/aarch64/thunderx3t110.md: New file: add the new\n        machine model for the scheduler\n        * config/aarch64/aarch64.md: Include the new model.\n        * doc/invoke.texi: Add the new name to the list", "tree": {"sha": "8a055cb5a54322261ed488d3dcc303c51f55f5f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8a055cb5a54322261ed488d3dcc303c51f55f5f0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fa477e454287063a583967c79867b44deea8e4ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa477e454287063a583967c79867b44deea8e4ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa477e454287063a583967c79867b44deea8e4ad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa477e454287063a583967c79867b44deea8e4ad/comments", "author": {"login": "ayoudkev", "id": 38099666, "node_id": "MDQ6VXNlcjM4MDk5NjY2", "avatar_url": "https://avatars.githubusercontent.com/u/38099666?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ayoudkev", "html_url": "https://github.com/ayoudkev", "followers_url": "https://api.github.com/users/ayoudkev/followers", "following_url": "https://api.github.com/users/ayoudkev/following{/other_user}", "gists_url": "https://api.github.com/users/ayoudkev/gists{/gist_id}", "starred_url": "https://api.github.com/users/ayoudkev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ayoudkev/subscriptions", "organizations_url": "https://api.github.com/users/ayoudkev/orgs", "repos_url": "https://api.github.com/users/ayoudkev/repos", "events_url": "https://api.github.com/users/ayoudkev/events{/privacy}", "received_events_url": "https://api.github.com/users/ayoudkev/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dde5ce541e3258276848aee85229a71c0e5f6965", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dde5ce541e3258276848aee85229a71c0e5f6965", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dde5ce541e3258276848aee85229a71c0e5f6965"}], "stats": {"total": 897, "additions": 895, "deletions": 2}, "files": [{"sha": "7d8fb2737765149f39d05f56a632b7778afc4c0d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa477e454287063a583967c79867b44deea8e4ad/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa477e454287063a583967c79867b44deea8e4ad/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fa477e454287063a583967c79867b44deea8e4ad", "patch": "@@ -1,3 +1,18 @@\n+2020-04-27 Anton Youdkevitch <anton.youdkevitch@bell-sw.com>\n+\n+\t* config/aarch64/aarch64-cores.def (thunderx3t110): Add the chip name.\n+\t* config/aarch64/aarch64-tune.md: Regenerate.\n+\t* config/aarch64/aarch64.c (thunderx3t110_addrcost_table): Define.\n+\t(thunderx3t110_regmove_cost): Likewise.\n+\t(thunderx3t110_vector_cost): Likewise.\n+\t(thunderx3t110_prefetch_tune): Likewise.\n+\t(thunderx3t110_tunings): Likewise.\n+\t* gcc/config/aarch64/aarch64-cost-tables.h (thunderx3t110_extra_costs):\n+\tDefine.\n+\t* config/aarch64/thunderx3t110.md: New file.\n+\t* config/aarch64/aarch64.md: Include thunderx3t110.md.\n+\t* doc/invoke.texi (AArch64 options): Add thunderx3t110.\n+\n 2020-04-28  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/94704"}, {"sha": "31da488023c1edee7eed94ab39a696746c828cfd", "filename": "gcc/config/aarch64/aarch64-cores.def", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa477e454287063a583967c79867b44deea8e4ad/gcc%2Fconfig%2Faarch64%2Faarch64-cores.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa477e454287063a583967c79867b44deea8e4ad/gcc%2Fconfig%2Faarch64%2Faarch64-cores.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-cores.def?ref=fa477e454287063a583967c79867b44deea8e4ad", "patch": "@@ -122,6 +122,11 @@ AARCH64_CORE(\"octeontx2f95mm\", octeontx2f95mm, cortexa57, 8_2A,  AARCH64_FL_FOR_\n /* HiSilicon ('H') cores. */\n AARCH64_CORE(\"tsv110\",  tsv110, tsv110, 8_2A,  AARCH64_FL_FOR_ARCH8_2 | AARCH64_FL_CRYPTO | AARCH64_FL_F16 | AARCH64_FL_AES | AARCH64_FL_SHA2, tsv110,   0x48, 0xd01, -1)\n \n+/* ARMv8.3-A Architecture Processors.  */\n+\n+/* Marvell cores (TX3). */\n+AARCH64_CORE(\"thunderx3t110\",  thunderx3t110,  thunderx3t110, 8_3A,  AARCH64_FL_FOR_ARCH8_3 | AARCH64_FL_CRYPTO | AARCH64_FL_RCPC | AARCH64_FL_SM4 | AARCH64_FL_SHA3 | AARCH64_FL_F16FML | AARCH64_FL_RCPC8_4, thunderx3t110, 0x43, 0x0b8, 0x0a)\n+\n /* ARMv8.4-A Architecture Processors.  */\n \n /* Qualcomm ('Q') cores. */"}, {"sha": "8a98bf4278ca13454ec5b4656fe3b785581dd8eb", "filename": "gcc/config/aarch64/aarch64-cost-tables.h", "status": "modified", "additions": 103, "deletions": 0, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa477e454287063a583967c79867b44deea8e4ad/gcc%2Fconfig%2Faarch64%2Faarch64-cost-tables.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa477e454287063a583967c79867b44deea8e4ad/gcc%2Fconfig%2Faarch64%2Faarch64-cost-tables.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-cost-tables.h?ref=fa477e454287063a583967c79867b44deea8e4ad", "patch": "@@ -334,6 +334,109 @@ const struct cpu_cost_table thunderx2t99_extra_costs =\n   }\n };\n \n+const struct cpu_cost_table thunderx3t110_extra_costs = \n+{\n+  /* ALU */\n+  {\n+    0,\t\t\t/* Arith.  */\n+    0,\t\t\t/* Logical.  */\n+    0,\t\t\t/* Shift.  */\n+    0,\t\t\t/* Shift_reg.  */\n+    COSTS_N_INSNS (1),\t/* Arith_shift.  */\n+    COSTS_N_INSNS (1),\t/* Arith_shift_reg.  */\n+    COSTS_N_INSNS (1),\t/* Log_shift.  */\n+    COSTS_N_INSNS (1),\t/* Log_shift_reg.  */\n+    0,\t\t\t/* Extend.  */\n+    COSTS_N_INSNS (1),\t/* Extend_arith.  */\n+    0,\t\t\t/* Bfi.  */\n+    0,\t\t\t/* Bfx.  */\n+    COSTS_N_INSNS (3),\t/* Clz.  */\n+    0,\t\t\t/* Rev.  */\n+    0,\t\t\t/* Non_exec.  */\n+    true\t\t/* Non_exec_costs_exec.  */\n+  },\n+  {\n+    /* MULT SImode */\n+    {\n+      COSTS_N_INSNS (4),\t/* Simple.  */\n+      COSTS_N_INSNS (4),\t/* Flag_setting.  */\n+      COSTS_N_INSNS (4),\t/* Extend.  */\n+      COSTS_N_INSNS (5),\t/* Add.  */\n+      COSTS_N_INSNS (5),\t/* Extend_add.  */\n+      COSTS_N_INSNS (18)\t/* Idiv.  */\n+    },\n+    /* MULT DImode */\n+    {\n+      COSTS_N_INSNS (4),       /* Simple.  */\n+      0,                       /* Flag_setting.  */\n+      COSTS_N_INSNS (4),       /* Extend.  */\n+      COSTS_N_INSNS (5),       /* Add.  */\n+      COSTS_N_INSNS (5),       /* Extend_add.  */\n+      COSTS_N_INSNS (26)       /* Idiv.  */\n+    }\n+  },\n+  /* LD/ST */\n+  {\n+    COSTS_N_INSNS (4),\t/* Load.  */\n+    COSTS_N_INSNS (4),\t/* Load_sign_extend.  */\n+    COSTS_N_INSNS (5),\t/* Ldrd.  */\n+    COSTS_N_INSNS (4),\t/* Ldm_1st.  */\n+    1,\t\t\t/* Ldm_regs_per_insn_1st.  */\n+    1,\t\t\t/* Ldm_regs_per_insn_subsequent.  */\n+    COSTS_N_INSNS (4),\t/* Loadf.  */\n+    COSTS_N_INSNS (4),\t/* Loadd.  */\n+    COSTS_N_INSNS (4),\t/* Load_unaligned.  */\n+    0,\t\t\t/* Store.  */\n+    0,\t\t\t/* Strd.  */\n+    0,\t\t\t/* Stm_1st.  */\n+    1,\t\t\t/* Stm_regs_per_insn_1st.  */\n+    1,\t\t\t/* Stm_regs_per_insn_subsequent.  */\n+    0,\t\t\t/* Storef.  */\n+    0,\t\t\t/* Stored.  */\n+    0,\t\t\t/* Store_unaligned.  */\n+    COSTS_N_INSNS (1),\t/* Loadv.  */\n+    COSTS_N_INSNS (1)\t/* Storev.  */\n+  },\n+  {\n+    /* FP SFmode */\n+    {\n+      COSTS_N_INSNS (4),\t/* Div.  */\n+      COSTS_N_INSNS (1),\t/* Mult.  */\n+      COSTS_N_INSNS (1),\t/* Mult_addsub. */\n+      COSTS_N_INSNS (1),\t/* Fma.  */\n+      COSTS_N_INSNS (1),\t/* Addsub.  */\n+      COSTS_N_INSNS (1),\t/* Fpconst. */\n+      COSTS_N_INSNS (1),\t/* Neg.  */\n+      COSTS_N_INSNS (1),\t/* Compare.  */\n+      COSTS_N_INSNS (2),\t/* Widen.  */\n+      COSTS_N_INSNS (2),\t/* Narrow.  */\n+      COSTS_N_INSNS (2),\t/* Toint.  */\n+      COSTS_N_INSNS (2),\t/* Fromint.  */\n+      COSTS_N_INSNS (2) \t/* Roundint.  */\n+    },\n+    /* FP DFmode */\n+    {\n+      COSTS_N_INSNS (6),\t/* Div.  */\n+      COSTS_N_INSNS (1),\t/* Mult.  */\n+      COSTS_N_INSNS (1),\t/* Mult_addsub.  */\n+      COSTS_N_INSNS (1),\t/* Fma.  */\n+      COSTS_N_INSNS (1),\t/* Addsub.  */\n+      COSTS_N_INSNS (1),\t/* Fpconst.  */\n+      COSTS_N_INSNS (1),\t/* Neg.  */\n+      COSTS_N_INSNS (1),\t/* Compare.  */\n+      COSTS_N_INSNS (2),\t/* Widen.  */\n+      COSTS_N_INSNS (2),\t/* Narrow.  */\n+      COSTS_N_INSNS (2),\t/* Toint.  */\n+      COSTS_N_INSNS (2),\t/* Fromint.  */\n+      COSTS_N_INSNS (2) \t/* Roundint.  */\n+    }\n+  },\n+  /* Vector */\n+  {\n+    COSTS_N_INSNS (1)\t/* Alu.  */\n+  }\n+};\n+\n const struct cpu_cost_table tsv110_extra_costs =\n {\n   /* ALU */"}, {"sha": "c2dd6c11830681b31c9c22194dce3577a6f8da57", "filename": "gcc/config/aarch64/aarch64-tune.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa477e454287063a583967c79867b44deea8e4ad/gcc%2Fconfig%2Faarch64%2Faarch64-tune.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa477e454287063a583967c79867b44deea8e4ad/gcc%2Fconfig%2Faarch64%2Faarch64-tune.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-tune.md?ref=fa477e454287063a583967c79867b44deea8e4ad", "patch": "@@ -1,5 +1,5 @@\n ;; -*- buffer-read-only: t -*-\n ;; Generated automatically by gentune.sh from aarch64-cores.def\n (define_attr \"tune\"\n-\t\"cortexa34,cortexa35,cortexa53,cortexa57,cortexa72,cortexa73,thunderx,thunderxt88p1,thunderxt88,octeontx,octeontxt81,octeontxt83,thunderxt81,thunderxt83,emag,xgene1,falkor,qdf24xx,exynosm1,phecda,thunderx2t99p1,vulcan,thunderx2t99,cortexa55,cortexa75,cortexa76,cortexa76ae,cortexa77,cortexa65,cortexa65ae,ares,neoversen1,neoversee1,octeontx2,octeontx2t98,octeontx2t96,octeontx2t93,octeontx2f95,octeontx2f95n,octeontx2f95mm,tsv110,saphira,cortexa57cortexa53,cortexa72cortexa53,cortexa73cortexa35,cortexa73cortexa53,cortexa75cortexa55,cortexa76cortexa55\"\n+\t\"cortexa34,cortexa35,cortexa53,cortexa57,cortexa72,cortexa73,thunderx,thunderxt88p1,thunderxt88,octeontx,octeontxt81,octeontxt83,thunderxt81,thunderxt83,emag,xgene1,falkor,qdf24xx,exynosm1,phecda,thunderx2t99p1,vulcan,thunderx2t99,cortexa55,cortexa75,cortexa76,cortexa76ae,cortexa77,cortexa65,cortexa65ae,ares,neoversen1,neoversee1,octeontx2,octeontx2t98,octeontx2t96,octeontx2t93,octeontx2f95,octeontx2f95n,octeontx2f95mm,tsv110,thunderx3t110,saphira,cortexa57cortexa53,cortexa72cortexa53,cortexa73cortexa35,cortexa73cortexa53,cortexa75cortexa55,cortexa76cortexa55\"\n \t(const (symbol_ref \"((enum attr_tune) aarch64_tune)\")))"}, {"sha": "5316350a9da98dff33de4ac285e6a077bd3db387", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa477e454287063a583967c79867b44deea8e4ad/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa477e454287063a583967c79867b44deea8e4ad/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=fa477e454287063a583967c79867b44deea8e4ad", "patch": "@@ -416,6 +416,22 @@ static const struct cpu_addrcost_table thunderx2t99_addrcost_table =\n   0, /* imm_offset  */\n };\n \n+static const struct cpu_addrcost_table thunderx3t110_addrcost_table =\n+{\n+    {\n+      1, /* hi  */\n+      1, /* si  */\n+      1, /* di  */\n+      2, /* ti  */\n+    },\n+  0, /* pre_modify  */\n+  0, /* post_modify  */\n+  2, /* register_offset  */\n+  3, /* register_sextend  */\n+  3, /* register_zextend  */\n+  0, /* imm_offset  */\n+};\n+\n static const struct cpu_addrcost_table tsv110_addrcost_table =\n {\n     {\n@@ -524,6 +540,15 @@ static const struct cpu_regmove_cost thunderx2t99_regmove_cost =\n   4  /* FP2FP  */\n };\n \n+static const struct cpu_regmove_cost thunderx3t110_regmove_cost =\n+{\n+  1, /* GP2GP  */\n+  /* Avoid the use of int<->fp moves for spilling.  */\n+  4, /* GP2FP  */\n+  5, /* FP2GP  */\n+  4  /* FP2FP  */\n+};\n+\n static const struct cpu_regmove_cost tsv110_regmove_cost =\n {\n   1, /* GP2GP  */\n@@ -692,6 +717,26 @@ static const struct cpu_vector_cost thunderx2t99_vector_cost =\n   1  /* cond_not_taken_branch_cost  */\n };\n \n+static const struct cpu_vector_cost thunderx3t110_vector_cost =\n+{\n+  1, /* scalar_int_stmt_cost  */\n+  5, /* scalar_fp_stmt_cost  */\n+  4, /* scalar_load_cost  */\n+  1, /* scalar_store_cost  */\n+  5, /* vec_int_stmt_cost  */\n+  5, /* vec_fp_stmt_cost  */\n+  10, /* vec_permute_cost  */\n+  5, /* vec_to_scalar_cost  */\n+  5, /* scalar_to_vec_cost  */\n+  4, /* vec_align_load_cost  */\n+  4, /* vec_unalign_load_cost  */\n+  4, /* vec_unalign_store_cost  */\n+  4, /* vec_store_cost  */\n+  2, /* cond_taken_branch_cost  */\n+  1  /* cond_not_taken_branch_cost  */\n+};\n+\n+\n /* Generic costs for branch instructions.  */\n static const struct cpu_branch_cost generic_branch_cost =\n {\n@@ -790,6 +835,17 @@ static const cpu_prefetch_tune thunderx2t99_prefetch_tune =\n   -1\t\t\t/* default_opt_level  */\n };\n \n+static const cpu_prefetch_tune thunderx3t110_prefetch_tune =\n+{\n+  8,\t\t\t/* num_slots  */\n+  32,\t\t\t/* l1_cache_size  */\n+  64,\t\t\t/* l1_cache_line_size  */\n+  256,\t\t\t/* l2_cache_size  */\n+  true,\t\t\t/* prefetch_dynamic_strides */\n+  -1,\t\t\t/* minimum_stride */\n+  -1\t\t\t/* default_opt_level  */\n+};\n+\n static const cpu_prefetch_tune tsv110_prefetch_tune =\n {\n   0,                    /* num_slots  */\n@@ -1216,6 +1272,33 @@ static const struct tune_params thunderx2t99_tunings =\n   &thunderx2t99_prefetch_tune\n };\n \n+static const struct tune_params thunderx3t110_tunings =\n+{\n+  &thunderx3t110_extra_costs,\n+  &thunderx3t110_addrcost_table,\n+  &thunderx3t110_regmove_cost,\n+  &thunderx3t110_vector_cost,\n+  &generic_branch_cost,\n+  &generic_approx_modes,\n+  SVE_NOT_IMPLEMENTED, /* sve_width  */\n+  4, /* memmov_cost.  */\n+  6, /* issue_rate.  */\n+  (AARCH64_FUSE_ALU_BRANCH | AARCH64_FUSE_AES_AESMC\n+   | AARCH64_FUSE_ALU_CBZ), /* fusible_ops  */\n+  \"16\",\t/* function_align.  */\n+  \"8\",\t/* jump_align.  */\n+  \"16\",\t/* loop_align.  */\n+  3,\t/* int_reassoc_width.  */\n+  2,\t/* fp_reassoc_width.  */\n+  2,\t/* vec_reassoc_width.  */\n+  2,\t/* min_div_recip_mul_sf.  */\n+  2,\t/* min_div_recip_mul_df.  */\n+  0,\t/* max_case_values.  */\n+  tune_params::AUTOPREFETCHER_WEAK,\t/* autoprefetcher_model.  */\n+  (AARCH64_EXTRA_TUNE_NONE),\t/* tune_flags.  */\n+  &thunderx3t110_prefetch_tune\n+};\n+\n static const struct tune_params neoversen1_tunings =\n {\n   &cortexa57_extra_costs,"}, {"sha": "8c8be3c27409cb2f2527916d75519f9a74e27945", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa477e454287063a583967c79867b44deea8e4ad/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa477e454287063a583967c79867b44deea8e4ad/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=fa477e454287063a583967c79867b44deea8e4ad", "patch": "@@ -438,6 +438,7 @@\n (include \"../arm/xgene1.md\")\n (include \"thunderx2t99.md\")\n (include \"tsv110.md\")\n+(include \"thunderx3t110.md\")\n \n ;; -------------------------------------------------------------------\n ;; Jumps and other miscellaneous insns"}, {"sha": "f8d6204279a39872ad49e149e894143905a78859", "filename": "gcc/config/aarch64/thunderx3t110.md", "status": "added", "additions": 686, "deletions": 0, "changes": 686, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa477e454287063a583967c79867b44deea8e4ad/gcc%2Fconfig%2Faarch64%2Fthunderx3t110.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa477e454287063a583967c79867b44deea8e4ad/gcc%2Fconfig%2Faarch64%2Fthunderx3t110.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fthunderx3t110.md?ref=fa477e454287063a583967c79867b44deea8e4ad", "patch": "@@ -0,0 +1,686 @@\n+;; Cavium ThunderX 3 CN11xx pipeline description\n+;; Copyright (C) 2020 Free Software Foundation, Inc.\n+;;\n+;; Contributed by Marvell\n+\n+;; This file is part of GCC.\n+\n+;; GCC is free software; you can redistribute it and/or modify\n+;; it under the terms of the GNU General Public License as published by\n+;; the Free Software Foundation; either version 3, or (at your option)\n+;; any later version.\n+\n+;; GCC is distributed in the hope that it will be useful,\n+;; but WITHOUT ANY WARRANTY; without even the implied warranty of\n+;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+;; GNU General Public License for more details.\n+\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING3.  If not see\n+;; <http://www.gnu.org/licenses/>.\n+\n+(define_automaton \"thunderx3t110, thunderx3t110_advsimd, thunderx3t110_ldst\")\n+(define_automaton \"thunderx3t110_mult\")\n+\n+(define_cpu_unit \"thunderx3t110_i0\" \"thunderx3t110\")\n+(define_cpu_unit \"thunderx3t110_i1\" \"thunderx3t110\")\n+(define_cpu_unit \"thunderx3t110_i2\" \"thunderx3t110\")\n+(define_cpu_unit \"thunderx3t110_i3\" \"thunderx3t110\")\n+\n+(define_cpu_unit \"thunderx3t110_ls0\" \"thunderx3t110_ldst\")\n+(define_cpu_unit \"thunderx3t110_ls1\" \"thunderx3t110_ldst\")\n+(define_cpu_unit \"thunderx3t110_sd\" \"thunderx3t110_ldst\")\n+\n+; Pseudo-units for multiply pipeline.\n+; unchanged from TX2, occupies I1 for four (1 + 3 additional) slots\n+\n+(define_cpu_unit \"thunderx3t110_i1m1\" \"thunderx3t110_mult\")\n+(define_cpu_unit \"thunderx3t110_i1m2\" \"thunderx3t110_mult\")\n+(define_cpu_unit \"thunderx3t110_i1m3\" \"thunderx3t110_mult\")\n+\n+; Pseudo-units for load delay (assuming dcache hit).\n+\n+(define_cpu_unit \"thunderx3t110_ls0d1\" \"thunderx3t110_ldst\")\n+(define_cpu_unit \"thunderx3t110_ls0d2\" \"thunderx3t110_ldst\")\n+(define_cpu_unit \"thunderx3t110_ls0d3\" \"thunderx3t110_ldst\")\n+\n+(define_cpu_unit \"thunderx3t110_ls1d1\" \"thunderx3t110_ldst\")\n+(define_cpu_unit \"thunderx3t110_ls1d2\" \"thunderx3t110_ldst\")\n+(define_cpu_unit \"thunderx3t110_ls1d3\" \"thunderx3t110_ldst\")\n+\n+; Define FP units f0/f1/f2/f3.\n+(define_cpu_unit \"thunderx3t110_f0\" \"thunderx3t110_advsimd\")\n+(define_cpu_unit \"thunderx3t110_f1\" \"thunderx3t110_advsimd\")\n+(define_cpu_unit \"thunderx3t110_f2\" \"thunderx3t110_advsimd\")\n+(define_cpu_unit \"thunderx3t110_f3\" \"thunderx3t110_advsimd\")\n+\n+(define_reservation \"thunderx3t110_i23\" \"thunderx3t110_i2|thunderx3t110_i3\")\n+(define_reservation \"thunderx3t110_i01\"\n+    \"thunderx3t110_i0|thunderx3t110_i1\")\n+(define_reservation \"thunderx3t110_i012\"\n+    \"thunderx3t110_i0|thunderx3t110_i1|thunderx3t110_i2\")\n+(define_reservation \"thunderx3t110_i0123\"\n+    \"thunderx3t110_i0|thunderx3t110_i1|thunderx3t110_i2|thunderx3t110_i3\")\n+(define_reservation \"thunderx3t110_ls01\" \"thunderx3t110_ls0|thunderx3t110_ls1\")\n+(define_reservation \"thunderx3t110_f01\" \"thunderx3t110_f0|thunderx3t110_f1\")\n+(define_reservation \"thunderx3t110_f23\" \"thunderx3t110_f2|thunderx3t110_f3\")\n+(define_reservation \"thunderx3t110_f0123\"\n+    \"thunderx3t110_f0|thunderx3t110_f1|thunderx3t110_f2|thunderx3t110_f3\")\n+\n+; A load with delay in the ls0/ls1 pipes.\n+; this is always a delay of four\n+(define_reservation \"thunderx3t110_l0delay\"\n+    \"thunderx3t110_ls0,thunderx3t110_ls0d1,thunderx3t110_ls0d2,\\\n+     thunderx3t110_ls0d3\")\n+(define_reservation \"thunderx3t110_l1delay\"\n+    \"thunderx3t110_ls1,thunderx3t110_ls1d1,thunderx3t110_ls1d2,\\\n+     thunderx3t110_ls1d3\")\n+(define_reservation \"thunderx3t110_l01delay\"\n+    \"thunderx3t110_l0delay|thunderx3t110_l1delay\")\n+;; Branch and call instructions.\n+\n+(define_insn_reservation \"thunderx3t110_branch\" 1\n+  (and (eq_attr \"tune\" \"thunderx3t110\")\n+       (eq_attr \"type\" \"call,branch,trap\"))\n+  \"thunderx3t110_i23\")\n+\n+;; Misc instructions.\n+\n+; Speculation barrier\n+(define_insn_reservation \"thunderx3t110_nothing\" 0\n+  (and (eq_attr \"tune\" \"thunderx3t110\")\n+       (eq_attr \"type\" \"block\"))\n+  \"nothing\")\n+\n+(define_insn_reservation \"thunderx3t110_mrs\" 0\n+  (and (eq_attr \"tune\" \"thunderx3t110\")\n+       (eq_attr \"type\" \"mrs\"))\n+  \"thunderx3t110_i2\")\n+\n+(define_insn_reservation \"thunderx3t110_multiple\" 1\n+  (and (eq_attr \"tune\" \"thunderx3t110\")\n+       (eq_attr \"type\" \"multiple\"))\n+  \"thunderx3t110_i0+thunderx3t110_i1+thunderx3t110_i3+thunderx3t110_ls0+\\\n+   thunderx3t110_ls1+thunderx3t110_sd+thunderx3t110_i1m1+thunderx3t110_i1m2+\\\n+   thunderx3t110_i1m3+thunderx3t110_f0+thunderx3t110_f1\")\n+\n+;; Integer arithmetic/logic instructions.\n+\n+; Plain register moves are handled by renaming,\n+; and don't create any uops.\n+(define_insn_reservation \"thunderx3t110_regmove\" 0\n+  (and (eq_attr \"tune\" \"thunderx3t110\")\n+       (eq_attr \"type\" \"mov_reg\"))\n+  \"nothing\")\n+\n+(define_insn_reservation \"thunderx3t110_alu_basic\" 1\n+  (and (eq_attr \"tune\" \"thunderx3t110\")\n+       (eq_attr \"type\" \"alu_imm,alu_sreg,alus_imm,alus_sreg,\\\n+\t\t\tadc_reg,adc_imm,adcs_reg,adcs_imm,\\\n+\t\t\tlogic_reg,logic_imm,logics_reg,logics_imm,\\\n+\t\t\tcsel,adr,mov_imm,shift_reg,shift_imm,bfm,\\\n+\t\t\tbfx,rbit,rev,extend,rotate_imm\"))\n+  \"thunderx3t110_i0123\")\n+\n+; distinguish between latency 1|2 and throughput 1/4|2/4?\n+; is it actually 1,1/2,{i0,i1} vs 2,1/4,{i0,i1,i2,i3}\n+(define_insn_reservation \"thunderx3t110_alu_shift\" 2\n+  (and (eq_attr \"tune\" \"thunderx3t110\")\n+       (eq_attr \"type\" \"alu_shift_imm,alu_ext,\\\n+\t\t\talus_shift_imm,alus_ext,\\\n+\t\t\tlogic_shift_imm,logics_shift_imm\"))\n+  \"thunderx3t110_i0123\")\n+\n+(define_insn_reservation \"thunderx3t110_alu_shift1\" 1\n+  (and (eq_attr \"tune\" \"thunderx3t110\")\n+       (eq_attr \"type\" \"alu_shift_imm,alu_ext,\\\n+\t\t\talus_shift_imm,alus_ext,\\\n+\t\t\tlogic_shift_imm,logics_shift_imm\"))\n+  \"thunderx3t110_i01\")\n+\n+; we are going for the the optimistic answer (13)\n+; for now, the worst case is 23\n+(define_insn_reservation \"thunderx3t110_div\" 13\n+  (and (eq_attr \"tune\" \"thunderx3t110\")\n+       (eq_attr \"type\" \"sdiv,udiv\"))\n+  \"thunderx3t110_i1*3\")\n+\n+(define_insn_reservation \"thunderx3t110_madd\" 5\n+  (and (eq_attr \"tune\" \"thunderx3t110\")\n+       (eq_attr \"type\" \"mla,smlal,umlal\"))\n+  \"thunderx3t110_i0123,thunderx3t110_i1m1,thunderx3t110_i1m2,thunderx3t110_i1m3,\\\n+   thunderx3t110_i012\")\n+\n+; NOTE: smull, umull are used for \"high part\" multiplies too.\n+; mul is alias for MADD\n+; it has to be distinguished between smulh, umulh (4,1) and\n+; other (5,1) but there is no such a type, so, we go for the\n+; conservative approach of (5,1) for now\n+; smulh, umulh only runs on I1\n+(define_insn_reservation \"thunderx3t110_mul\" 5\n+  (and (eq_attr \"tune\" \"thunderx3t110\")\n+       (eq_attr \"type\" \"mul,smull,umull\"))\n+  \"thunderx3t110_i0123,thunderx3t110_i1m1,thunderx3t110_i1m2,thunderx3t110_i1m3\")\n+\n+(define_insn_reservation \"thunderx3t110_countbits\" 3\n+  (and (eq_attr \"tune\" \"thunderx3t110\")\n+       (eq_attr \"type\" \"clz\"))\n+  \"thunderx3t110_i1\")\n+\n+;; Integer loads and stores.\n+\n+; load_4 matches prefetch, a multitude of move/str/dup variants,\n+; sign extend\n+(define_insn_reservation \"thunderx3t110_load_basic\" 4\n+  (and (eq_attr \"tune\" \"thunderx3t110\")\n+       (eq_attr \"type\" \"load_4\"))\n+  \"thunderx3t110_ls01\")\n+\n+; model use of I0/I1/I2 for index versions only, model 4|8 2nd on load\n+(define_insn_reservation \"thunderx3t110_loadpair\" 5\n+  (and (eq_attr \"tune\" \"thunderx3t110\")\n+       (eq_attr \"type\" \"load_8,load_16\"))\n+  \"thunderx3t110_i012,thunderx3t110_ls01\")\n+\n+(define_insn_reservation \"thunderx3t110_store_basic\" 1\n+  (and (eq_attr \"tune\" \"thunderx3t110\")\n+       (eq_attr \"type\" \"store_4\"))\n+  \"thunderx3t110_ls01,thunderx3t110_sd\")\n+\n+; model use of I0/I1/I2/I3 for index versions, model differing\n+; throughputs\n+(define_insn_reservation \"thunderx3t110_storepair_basic\" 1\n+  (and (eq_attr \"tune\" \"thunderx3t110\")\n+       (eq_attr \"type\" \"store_8,store_16\"))\n+  \"thunderx3t110_ls01,thunderx3t110_sd\")\n+\n+;; FP data processing instructions.\n+\n+(define_insn_reservation \"thunderx3t110_fp_simple\" 5\n+  (and (eq_attr \"tune\" \"thunderx3t110\")\n+       (eq_attr \"type\" \"ffariths,ffarithd,f_minmaxs,f_minmaxd\"))\n+  \"thunderx3t110_f0123\")\n+\n+; distinguish latency 3/4 throughput 1/2|1/4\n+(define_insn_reservation \"thunderx3t110_fp_addsub3\" 3\n+  (and (eq_attr \"tune\" \"thunderx3t110\")\n+       (eq_attr \"type\" \"fadds,faddd\"))\n+  \"thunderx3t110_f23\")\n+(define_insn_reservation \"thunderx3t110_fp_addsub4\" 4\n+  (and (eq_attr \"tune\" \"thunderx3t110\")\n+       (eq_attr \"type\" \"fadds,faddd\"))\n+  \"thunderx3t110_f0123\")\n+\n+(define_insn_reservation \"thunderx3t110_fp_cmp\" 4\n+  (and (eq_attr \"tune\" \"thunderx3t110\")\n+       (eq_attr \"type\" \"fcmps,fcmpd,fccmps,fccmpd\"))\n+  \"thunderx3t110_f0123\")\n+\n+; need to split out latency 23 throughput 23/4: F64 from\n+; latency 16 throughput  16/4: FDIV F32\n+(define_insn_reservation \"thunderx3t110_fp_divsqrt_s\" 16\n+  (and (eq_attr \"tune\" \"thunderx3t110\")\n+       (eq_attr \"type\" \"fdivs,fsqrts\"))\n+  \"thunderx3t110_f0*3|thunderx3t110_f1*3|\\\n+   thunderx3t110_f2*3|thunderx3t110_f3*3\")\n+\n+(define_insn_reservation \"thunderx3t110_fp_divsqrt_d\" 23\n+  (and (eq_attr \"tune\" \"thunderx3t110\")\n+       (eq_attr \"type\" \"fdivd,fsqrtd\"))\n+  \"thunderx3t110_f0*5|thunderx3t110_f1*5|\\\n+   thunderx3t110_f2*5|thunderx3t110_f3*5\")\n+\n+(define_insn_reservation \"thunderx3t110_fp_mul_mac\" 5\n+  (and (eq_attr \"tune\" \"thunderx3t110\")\n+       (eq_attr \"type\" \"fmuls,fmuld,fmacs,fmacd\"))\n+  \"thunderx3t110_f01\")\n+\n+(define_insn_reservation \"thunderx3t110_frint\" 5\n+  (and (eq_attr \"tune\" \"thunderx3t110\")\n+       (eq_attr \"type\" \"f_rints,f_rintd\"))\n+  \"thunderx3t110_f0123\")\n+\n+; mimic latency 3|4 throughput 1/2|1/4\n+(define_insn_reservation \"thunderx3t110_fcsel3\" 3\n+  (and (eq_attr \"tune\" \"thunderx3t110\")\n+       (eq_attr \"type\" \"fcsel\"))\n+  \"thunderx3t110_f23\")\n+\n+(define_insn_reservation \"thunderx3t110_fcsel4\" 4\n+  (and (eq_attr \"tune\" \"thunderx3t110\")\n+       (eq_attr \"type\" \"fcsel\"))\n+  \"thunderx3t110_f0123\")\n+\n+;; FP miscellaneous instructions.\n+\n+(define_insn_reservation \"thunderx3t110_fp_cvt\" 5\n+  (and (eq_attr \"tune\" \"thunderx3t110\")\n+       (eq_attr \"type\" \"f_cvtf2i,f_cvt,f_cvti2f\"))\n+  \"thunderx3t110_f0123\")\n+\n+; even though f_mrc has to belong to fp_mov_to_gen\n+; we retain this for the sake of legacy as codegen\n+; doesn't use it anyway\n+(define_insn_reservation \"thunderx3t110_fp_mov3\" 3\n+  (and (eq_attr \"tune\" \"thunderx3t110\")\n+       (eq_attr \"type\" \"fconsts,fconstd,fmov,f_mrc\"))\n+  \"thunderx3t110_f23\")\n+\n+(define_insn_reservation \"thunderx3t110_fp_mov\" 4\n+  (and (eq_attr \"tune\" \"thunderx3t110\")\n+       (eq_attr \"type\" \"fconsts,fconstd,fmov,f_mrc\"))\n+  \"thunderx3t110_f0123\")\n+\n+(define_insn_reservation \"thunderx3t110_fp_mov_to_gen\" 4\n+  (and (eq_attr \"tune\" \"thunderx3t110\")\n+       (eq_attr \"type\" \"f_mcr\"))\n+  \"thunderx3t110_f0123\")\n+\n+;; FP loads and stores.\n+;  model use of I0/I1/I2 for post/pre index modes\n+\n+(define_insn_reservation \"thunderx3t110_fp_load_basic\" 4\n+  (and (eq_attr \"tune\" \"thunderx3t110\")\n+       (eq_attr \"type\" \"f_loads,f_loadd\"))\n+  \"thunderx3t110_ls01\")\n+\n+; model throughput 1\n+(define_insn_reservation \"thunderx3t110_fp_store_basic\" 1\n+  (and (eq_attr \"tune\" \"thunderx3t110\")\n+       (eq_attr \"type\" \"f_stores,f_stored\"))\n+  \"thunderx3t110_ls01,thunderx3t110_sd\")\n+\n+;; ASIMD integer instructions.\n+\n+(define_insn_reservation \"thunderx3t110_asimd_int\" 5\n+  (and (eq_attr \"tune\" \"thunderx3t110\")\n+       (eq_attr \"type\" \"neon_abd,neon_abd_q,\\\n+\t\t\tneon_arith_acc,neon_arith_acc_q,\\\n+\t\t\tneon_abs,neon_abs_q,\\\n+\t\t\tneon_add,neon_add_q,\\\n+\t\t\tneon_sub,neon_sub_q,\\\n+\t\t\tneon_neg,neon_neg_q,\\\n+\t\t\tneon_add_long,neon_add_widen,\\\n+\t\t\tneon_add_halve,neon_add_halve_q,\\\n+\t\t\tneon_sub_long,neon_sub_widen,\\\n+\t\t\tneon_sub_halve,neon_sub_halve_q,\\\n+\t\t\tneon_add_halve_narrow_q,neon_sub_halve_narrow_q,\\\n+\t\t\tneon_qabs,neon_qabs_q,\\\n+\t\t\tneon_qadd,neon_qadd_q,\\\n+\t\t\tneon_qneg,neon_qneg_q,\\\n+\t\t\tneon_qsub,neon_qsub_q,\\\n+\t\t\tneon_minmax,neon_minmax_q,\\\n+\t\t\tneon_reduc_minmax,neon_reduc_minmax_q,\\\n+\t\t\tneon_mul_b,neon_mul_h,neon_mul_s,\\\n+\t\t\tneon_mul_b_q,neon_mul_h_q,neon_mul_s_q,\\\n+\t\t\tneon_sat_mul_b,neon_sat_mul_h,neon_sat_mul_s,\\\n+\t\t\tneon_sat_mul_b_q,neon_sat_mul_h_q,neon_sat_mul_s_q,\\\n+\t\t\tneon_mla_b,neon_mla_h,neon_mla_s,\\\n+\t\t\tneon_mla_b_q,neon_mla_h_q,neon_mla_s_q,\\\n+\t\t\tneon_mul_b_long,neon_mul_h_long,\\\n+\t\t\tneon_mul_s_long,neon_mul_d_long,\\\n+\t\t\tneon_sat_mul_b_long,neon_sat_mul_h_long,\\\n+\t\t\tneon_sat_mul_s_long,\\\n+\t\t\tneon_mla_b_long,neon_mla_h_long,neon_mla_s_long,\\\n+\t\t\tneon_sat_mla_b_long,neon_sat_mla_h_long,\\\n+\t\t\tneon_sat_mla_s_long,\\\n+\t\t\tneon_shift_acc,neon_shift_acc_q,\\\n+\t\t\tneon_shift_imm,neon_shift_imm_q,\\\n+\t\t\tneon_shift_reg,neon_shift_reg_q,\\\n+\t\t\tneon_shift_imm_long,neon_shift_imm_narrow_q,\\\n+\t\t\tneon_sat_shift_imm,neon_sat_shift_imm_q,\\\n+\t\t\tneon_sat_shift_reg,neon_sat_shift_reg_q,\\\n+\t\t\tneon_sat_shift_imm_narrow_q\"))\n+  \"thunderx3t110_f0123\")\n+\n+; neon_reduc_add is used for both addp and [su]adalp\n+(define_insn_reservation \"thunderx3t110_asimd_reduc_add\" 5\n+  (and (eq_attr \"tune\" \"thunderx3t110\")\n+       (eq_attr \"type\" \"neon_reduc_add,neon_reduc_add_q\"))\n+  \"thunderx3t110_f01\")\n+\n+(define_insn_reservation \"thunderx3t110_asimd_cmp\" 5\n+  (and (eq_attr \"tune\" \"thunderx3t110\")\n+       (eq_attr \"type\" \"neon_compare,neon_compare_q,neon_compare_zero,\\\n+\t\t\tneon_tst,neon_tst_q\"))\n+  \"thunderx3t110_f0123\")\n+\n+; neon_logic used in ldr, str, mov, umov, fmov, mov; orn; bic; and,\n+;   simd mov immediate; orr, simd mov immediate; eor; not (mvn)\n+; latency 4 throughput 1/2 LS0/LS1: ldr\n+; latency 1 throughput 1 LS0/LS1,SDI,I0/I1/I2: str\n+; latency 3|4 throughput 1/2|1/4 F2/F3 F0/F1/F2/F3: fmov immed, orn,\n+;   bic, and, orr, eor, not (mvn)\n+; latency 4 throughput 1/4 F0/F1/F2/F3: fmov register, fmov gen to vec\n+; latency 5 throughput 1/4 F0/F1/F2/F3: fmov vec to gen, umov, fmov\n+(define_insn_reservation \"thunderx3t110_asimd_logic4\" 4\n+  (and (eq_attr \"tune\" \"thunderx3t110\")\n+       (eq_attr \"type\" \"neon_logic,neon_logic_q\"))\n+  \"thunderx3t110_f23\")\n+\n+(define_insn_reservation \"thunderx3t110_asimd_logic5\" 5\n+  (and (eq_attr \"tune\" \"thunderx3t110\")\n+       (eq_attr \"type\" \"neon_logic,neon_logic_q\"))\n+  \"thunderx3t110_f0123\")\n+\n+;; ASIMD floating-point instructions.\n+\n+; Distinguish between latency 5 throughput 1/4: fabs, fmax, fmin, fneg\n+; latency 4 throughput 1/4: fcmp\n+(define_insn_reservation \"thunderx3t110_asimd_fp_simple\" 5\n+  (and (eq_attr \"tune\" \"thunderx3t110\")\n+       (eq_attr \"type\" \"neon_fp_abs_s,neon_fp_abs_d,\\\n+\t\t\tneon_fp_abs_s_q,neon_fp_abs_d_q,\\\n+\t\t\tneon_fp_compare_s,neon_fp_compare_d,\\\n+\t\t\tneon_fp_compare_s_q,neon_fp_compare_d_q,\\\n+\t\t\tneon_fp_minmax_s,neon_fp_minmax_d,\\\n+\t\t\tneon_fp_minmax_s_q,neon_fp_minmax_d_q,\\\n+\t\t\tneon_fp_reduc_minmax_s,neon_fp_reduc_minmax_d,\\\n+\t\t\tneon_fp_reduc_minmax_s_q,neon_fp_reduc_minmax_d_q,\\\n+\t\t\tneon_fp_neg_s,neon_fp_neg_d,\\\n+\t\t\tneon_fp_neg_s_q,neon_fp_neg_d_q\"))\n+  \"thunderx3t110_f0123\")\n+\n+; distinguish between latency 3 throughput 1/2,\n+; latency 4 throughput 1/4\n+; neon_fp_reduc_add_<stype><q> is used for both faddp and\n+; vector reduction add. On TX3, faddp is 3|4 1/2|1/4 and reduction is 5 1/4\n+(define_insn_reservation \"thunderx3t110_asimd_fp_arith3\" 3\n+  (and (eq_attr \"tune\" \"thunderx3t110\")\n+       (eq_attr \"type\" \"neon_fp_abd_s,neon_fp_abd_d,\\\n+\t\t\tneon_fp_abd_s_q,neon_fp_abd_d_q,\\\n+\t\t\tneon_fp_addsub_s,neon_fp_addsub_d,\\\n+\t\t\tneon_fp_addsub_s_q,neon_fp_addsub_d_q,\\\n+\t\t\tneon_fp_reduc_add_s,neon_fp_reduc_add_d,\\\n+\t\t\tneon_fp_reduc_add_s_q,neon_fp_reduc_add_d_q\"))\n+  \"thunderx3t110_f23\")\n+\n+(define_insn_reservation \"thunderx3t110_asimd_fp_arith4\" 4\n+  (and (eq_attr \"tune\" \"thunderx3t110\")\n+       (eq_attr \"type\" \"neon_fp_abd_s,neon_fp_abd_d,\\\n+\t\t\tneon_fp_abd_s_q,neon_fp_abd_d_q,\\\n+\t\t\tneon_fp_addsub_s,neon_fp_addsub_d,\\\n+\t\t\tneon_fp_addsub_s_q,neon_fp_addsub_d_q,\\\n+\t\t\tneon_fp_reduc_add_s,neon_fp_reduc_add_d,\\\n+\t\t\tneon_fp_reduc_add_s_q,neon_fp_reduc_add_d_q\"))\n+  \"thunderx3t110_f0123\")\n+\n+(define_insn_reservation \"thunderx3t110_asimd_fp_arith5\" 5\n+  (and (eq_attr \"tune\" \"thunderx3t110\")\n+       (eq_attr \"type\" \"neon_fp_mul_s,neon_fp_mul_d,\\\n+\t\t\tneon_fp_mul_s_q,neon_fp_mul_d_q,\\\n+\t\t\tneon_fp_mul_s_scalar_q,neon_fp_mul_d_scalar_q,\\\n+\t\t\tneon_fp_mla_s,neon_fp_mla_d,\\\n+\t\t\tneon_fp_mla_s_q,neon_fp_mla_d_q\"))\n+  \"thunderx3t110_f0123\")\n+\n+; neon_fp_cvt_widen_s,neon_fp_cvt_narrow_d_q: fcvtl,fctvl2,fcvtn,fcvtn2\n+; neon_fp_to_int_s,neon_fp_to_int_d: fcvt{<frint_suffix><su>,z<su>}\n+;   where frint_suffix: zpmixan, su: su (plus other sign/unsign/extract...\n+; neon_fp_to_int_s_q,neon_fp_to_int_d_q: fcvtz<su> other\n+; The int_to_fp* is complicated\n+;   neon_int_to_fp_s,neon_int_to_fp_d: <su_optab>cvtf\n+;   neon_int_to_fp_s_q,neon_int_to_fp_d_q\n+; Round matches single define_insn, frint<frint_suffix>\n+;   neon_fp_round_s,neon_fp_round_d,neon_fp_round_s_q,\n+;   neon_fp_round_d_q: frint<frint_suffix>\n+; FCVT*,VCVTAU,[SU]CVTF: latency 5 throughput 1/4\n+; FRINT*: latency 5 throughput 1/4\n+(define_insn_reservation \"thunderx3t110_asimd_fp_conv\" 5\n+  (and (eq_attr \"tune\" \"thunderx3t110\")\n+       (eq_attr \"type\" \"neon_fp_cvt_widen_s,neon_fp_cvt_narrow_d_q,\\\n+\t\t\tneon_fp_to_int_s,neon_fp_to_int_d,\\\n+\t\t\tneon_fp_to_int_s_q,neon_fp_to_int_d_q,\\\n+\t\t\tneon_int_to_fp_s,neon_int_to_fp_d,\\\n+\t\t\tneon_int_to_fp_s_q,neon_int_to_fp_d_q,\\\n+\t\t\tneon_fp_round_s,neon_fp_round_d,\\\n+\t\t\tneon_fp_round_s_q,neon_fp_round_d_q\"))\n+  \"thunderx3t110_f0123\")\n+\n+; model that pipeline is occupied the whole time D/F32, Q/F32: 16/4\n+; Q/F64: 23/4\n+(define_insn_reservation \"thunderx3t110_asimd_fp_div_s\" 16\n+  (and (eq_attr \"tune\" \"thunderx3t110\")\n+       (eq_attr \"type\" \"neon_fp_div_s,neon_fp_div_s_q\"))\n+  \"thunderx3t110_f0123\")\n+\n+(define_insn_reservation \"thunderx3t110_asimd_fp_div_d\" 23\n+  (and (eq_attr \"tune\" \"thunderx3t110\")\n+       (eq_attr \"type\" \"neon_fp_div_d,neon_fp_div_d_q\"))\n+  \"thunderx3t110_f0123\")\n+\n+;; ASIMD miscellaneous instructions.\n+\n+;  divided out:\n+;  rbit,bsl,bsl_q,cls,cls_q,cnt,cnt_q,move,move_q: 3|4 1/2 | 1/4\n+;  from_gp,from_gp_q : 4 | 1/4\n+;  dup,dup_q,ext,ext_q,ins,ins_q,all recpe forms, rev,rev_q: 5 1/4\n+;  permute,permute_q needs to depend on aarch64_expand_vec_perm_const does\n+;  on TX3\n+(define_insn_reservation \"thunderx3t110_asimd_misc3\" 3\n+  (and (eq_attr \"tune\" \"thunderx3t110\")\n+       (eq_attr \"type\" \"neon_rbit,\\\n+\t\t\tneon_bsl,neon_bsl_q,\\\n+\t\t\tneon_cls,neon_cls_q,\\\n+\t\t\tneon_cnt,neon_cnt_q,\\\n+\t\t\tneon_move,neon_move_q\"))\n+  \"thunderx3t110_f23\")\n+\n+(define_insn_reservation \"thunderx3t110_asimd_misc4\" 4\n+  (and (eq_attr \"tune\" \"thunderx3t110\")\n+       (eq_attr \"type\" \"neon_rbit,\\\n+\t\t\tneon_bsl,neon_bsl_q,\\\n+\t\t\tneon_cls,neon_cls_q,\\\n+\t\t\tneon_cnt,neon_cnt_q,\\\n+\t\t\tneon_from_gp,neon_from_gp_q,\\\n+\t\t\tneon_move,neon_move_q\"))\n+  \"thunderx3t110_f0123\")\n+\n+(define_insn_reservation \"thunderx3t110_asimd_misc\" 5\n+  (and (eq_attr \"tune\" \"thunderx3t110\")\n+       (eq_attr \"type\" \"\n+\t\t\tneon_dup,neon_dup_q,\\\n+\t\t\tneon_ext,neon_ext_q,\\\n+\t\t\tneon_ins,neon_ins_q,\\\n+\t\t\tneon_move,neon_move_q,\\\n+\t\t\tneon_fp_recpe_s,neon_fp_recpe_d,\\\n+\t\t\tneon_fp_recpe_s_q,neon_fp_recpe_d_q,\\\n+\t\t\tneon_fp_recpx_s,neon_fp_recpx_d,\\\n+\t\t\tneon_fp_recpx_s_q,neon_fp_recpx_d_q,\\\n+\t\t\tneon_rev,neon_rev_q,\\\n+\t\t\tneon_permute,neon_permute_q\"))\n+  \"thunderx3t110_f0123\")\n+\n+(define_insn_reservation \"thunderx3t110_asimd_recip_step\" 5\n+  (and (eq_attr \"tune\" \"thunderx3t110\")\n+       (eq_attr \"type\" \"neon_fp_recps_s,neon_fp_recps_s_q,\\\n+\t\t\tneon_fp_recps_d,neon_fp_recps_d_q,\\\n+\t\t\tneon_fp_sqrt_s,neon_fp_sqrt_s_q,\\\n+\t\t\tneon_fp_sqrt_d,neon_fp_sqrt_d_q,\\\n+\t\t\tneon_fp_rsqrte_s, neon_fp_rsqrte_s_q,\\\n+\t\t\tneon_fp_rsqrte_d, neon_fp_rsqrte_d_q,\\\n+\t\t\tneon_fp_rsqrts_s, neon_fp_rsqrts_s_q,\\\n+\t\t\tneon_fp_rsqrts_d, neon_fp_rsqrts_d_q\"))\n+  \"thunderx3t110_f0123\")\n+\n+(define_insn_reservation \"thunderx3t110_asimd_lut1\" 5\n+  (and (eq_attr \"tune\" \"thunderx3t110\")\n+       (eq_attr \"type\" \"neon_tbl1,neon_tbl1_q\"))\n+  \"thunderx3t110_f0123\")\n+\n+(define_insn_reservation \"thunderx3t110_asimd_lut2\" 10\n+  (and (eq_attr \"tune\" \"thunderx3t110\")\n+       (eq_attr \"type\" \"neon_tbl2,neon_tbl2_q\"))\n+  \"thunderx3t110_f0123\")\n+\n+(define_insn_reservation \"thunderx3t110_asimd_lut3\" 15\n+  (and (eq_attr \"tune\" \"thunderx3t110\")\n+       (eq_attr \"type\" \"neon_tbl3,neon_tbl3_q\"))\n+  \"thunderx3t110_f0123\")\n+\n+(define_insn_reservation \"thunderx3t110_asimd_lut4\" 20\n+  (and (eq_attr \"tune\" \"thunderx3t110\")\n+       (eq_attr \"type\" \"neon_tbl4,neon_tbl4_q\"))\n+  \"thunderx3t110_f0123\")\n+\n+(define_insn_reservation \"thunderx3t110_asimd_elt_to_gr\" 5\n+  (and (eq_attr \"tune\" \"thunderx3t110\")\n+       (eq_attr \"type\" \"neon_to_gp,neon_to_gp_q\"))\n+  \"thunderx3t110_f0123\")\n+\n+;; ASIMD load instructions.\n+\n+; NOTE: These reservations attempt to model latency and throughput\n+; correctly, but the cycle timing of unit allocation is not\n+; necessarily accurate (because insns are split into uops, and those\n+; may be issued out-of-order).\n+\n+; the LDP/LDNP imm-offset S/D/Q suppplies the first arg with latency 4\n+; and the 2nd at 5 (Q form) or 8 (S/D form). Can this be modeled? These\n+;forms, as documented, do not use the I0/I1/I2 units (no I3), but the\n+; other LDP ones do.\n+(define_insn_reservation \"thunderx3t110_asimd_load1_ldp\" 5\n+  (and (eq_attr \"tune\" \"thunderx3t110\")\n+       (eq_attr \"type\" \"neon_ldp,neon_ldp_q\"))\n+  \"thunderx3t110_i012,thunderx3t110_ls01\")\n+\n+; Need to distinguish latency 6 throughput 2: 4 reg D/Q\n+; latency 5 throughput 3/2: 3 reg D/Q\n+; latency 4 throughput 1: 2 reg D/Q\n+; latency 4 throughput 1/2: 1 reg D/Q\n+(define_insn_reservation \"thunderx3t110_asimd_load1\" 4\n+  (and (eq_attr \"tune\" \"thunderx3t110\")\n+       (eq_attr \"type\" \"neon_load1_1reg,neon_load1_1reg_q,\\\n+\t\t\tneon_load1_2reg,neon_load1_2reg_q,\\\n+\t\t\tneon_load1_3reg,neon_load1_3reg_q,\\\n+\t\t\tneon_load1_4reg,neon_load1_4reg_q\"))\n+  \"thunderx3t110_ls01\")\n+\n+(define_insn_reservation \"thunderx3t110_asimd_load1_onelane\" 5\n+  (and (eq_attr \"tune\" \"thunderx3t110\")\n+       (eq_attr \"type\" \"neon_load1_one_lane,neon_load1_one_lane_q\"))\n+  \"thunderx3t110_l01delay,thunderx3t110_f0123\")\n+\n+(define_insn_reservation \"thunderx3t110_asimd_load1_all\" 5\n+  (and (eq_attr \"tune\" \"thunderx3t110\")\n+       (eq_attr \"type\" \"neon_load1_all_lanes,neon_load1_all_lanes_q\"))\n+  \"thunderx3t110_l01delay,thunderx3t110_f0123\")\n+\n+(define_insn_reservation \"thunderx3t110_asimd_load2\" 5\n+  (and (eq_attr \"tune\" \"thunderx3t110\")\n+       (eq_attr \"type\" \"neon_load2_2reg,neon_load2_2reg_q,\\\n+\t\t\tneon_load2_one_lane,neon_load2_one_lane_q,\\\n+\t\t\tneon_load2_all_lanes,neon_load2_all_lanes_q\"))\n+  \"thunderx3t110_l01delay,thunderx3t110_f0123\")\n+\n+(define_insn_reservation \"thunderx3t110_asimd_load3\" 7\n+  (and (eq_attr \"tune\" \"thunderx3t110\")\n+       (eq_attr \"type\" \"neon_load3_3reg,neon_load3_3reg_q,\\\n+\t\t\tneon_load3_one_lane,neon_load3_one_lane_q,\\\n+\t\t\tneon_load3_all_lanes,neon_load3_all_lanes_q\"))\n+  \"thunderx3t110_l01delay,thunderx3t110_f0123\")\n+\n+(define_insn_reservation \"thunderx3t110_asimd_load4\" 8\n+  (and (eq_attr \"tune\" \"thunderx3t110\")\n+       (eq_attr \"type\" \"neon_load4_4reg,neon_load4_4reg_q,\\\n+\t\t\tneon_load4_one_lane,neon_load4_one_lane_q,\\\n+\t\t\tneon_load4_all_lanes,neon_load4_all_lanes_q\"))\n+  \"thunderx3t110_l01delay,thunderx3t110_f0123\")\n+\n+;; ASIMD store instructions.\n+\n+; Same note applies as for ASIMD load instructions.\n+\n+; Vector Store pair Need to distinguish:\n+; 5 throughput: imm-offset S/D; imm-postindex S/D; imm-preindex S/D\n+; 2 throughput: imm-offset Q; imm-postindex Q; imm-preindex Q\n+; all index modes use I0/I1/I2\n+(define_insn_reservation \"thunderx3t110_asimd_store_stp\" 1\n+  (and (eq_attr \"tune\" \"thunderx3t110\")\n+       (eq_attr \"type\" \"neon_stp,neon_stp_q\"))\n+  \"thunderx3t110_ls01,thunderx3t110_sd\")\n+\n+; There are multiple forms of ST1\n+; The following two groups, as documented, do not use the FP pipelines.\n+; multiple, 1 reg, D-form     ST1\n+; tx2_ltp:    x    1/2     LS0/LS1\n+; tx3_ltp:    x    1/2     LS0/LS1\n+; multiple, 1 reg, Q-form     ST1\n+; tx2_ltp:    x    1/2     LS0/LS1\n+; tx3_ltp:    x    1/2     LS0/LS1\n+;\n+; one lane, B/H/S         ST1\n+; tx2_ltp:    x       1/2     LS0/LS1,F0/F1\n+; tx3_ltp:    x       1/2     LS0/LS1,F0/F1/F2/F3\n+; one lane, D             ST1\n+; tx2_ltp:    x       1/2     LS0/LS1,F0/F1\n+; tx3_ltp:    x       1/2     LS0/LS1,F0/F1/F2/F3\n+;; Model for st1 insn needs refinement for different register forms\n+; multiple, 2 reg, D-form     ST1     x    1     LS0/LS1\n+; multiple, 2 reg, Q-form     ST1     x    1     LS0/LS1\n+; multiple, 3 reg, D-form     ST1     x    3/2     LS0/LS1\n+; multiple, 3 reg, Q-form     ST1     x    3/2     LS0/LS1\n+; multiple,4 reg, D-form         ST1     x    2     LS0/LS1\n+; multiple,4 reg, Q-form         ST1     x    2     LS0/LS1\n+(define_insn_reservation \"thunderx3t110_asimd_store1\" 1\n+  (and (eq_attr \"tune\" \"thunderx3t110\")\n+       (eq_attr \"type\" \"neon_store1_1reg,neon_store1_1reg_q,\\\n+\t\t\tneon_store1_2reg,neon_store1_2reg_q,\\\n+\t\t\tneon_store1_3reg,neon_store1_4reg\"))\n+  \"thunderx3t110_ls01\")\n+\n+(define_insn_reservation \"thunderx3t110_asimd_store1_onelane\" 1\n+  (and (eq_attr \"tune\" \"thunderx3t110\")\n+       (eq_attr \"type\" \"neon_store1_one_lane,neon_store1_one_lane_q\"))\n+  \"thunderx3t110_ls01,thunderx3t110_f0123\")\n+\n+; distinguish between throughput 1: D/Q-form B/H/S, Q-form D and\n+; throughput 1/2: one lane B/H/S/D\n+(define_insn_reservation \"thunderx3t110_asimd_store2\" 1\n+  (and (eq_attr \"tune\" \"thunderx3t110\")\n+       (eq_attr \"type\" \"neon_store2_2reg,neon_store2_2reg_q,\\\n+\t\t\tneon_store2_one_lane,neon_store2_one_lane_q\"))\n+  \"thunderx3t110_ls01,thunderx3t110_f0123\")\n+\n+; distinguish between throughput 3: D/Q-form B/H/S, Q-form D and\n+; throughput 1: one lane B/H/S/D\n+(define_insn_reservation \"thunderx3t110_asimd_store3\" 1\n+  (and (eq_attr \"tune\" \"thunderx3t110\")\n+       (eq_attr \"type\" \"neon_store3_3reg,neon_store3_3reg_q,\\\n+\t\t\tneon_store3_one_lane,neon_store3_one_lane_q\"))\n+  \"thunderx3t110_ls01,thunderx3t110_f0123\")\n+\n+; distinguish between throughput 4: D/Q-form B/H/S, Q-form D and\n+; throughput 1: one lane B/H/S/D? (not in doc)\n+(define_insn_reservation \"thunderx3t110_asimd_store4\" 1\n+  (and (eq_attr \"tune\" \"thunderx3t110\")\n+       (eq_attr \"type\" \"neon_store4_4reg,neon_store4_4reg_q,\\\n+\t\t\tneon_store4_one_lane,neon_store4_one_lane_q\"))\n+  \"thunderx3t110_ls01,thunderx3t110_f0123\")\n+\n+;; Crypto extensions.\n+\n+(define_insn_reservation \"thunderx3t110_aes\" 4\n+  (and (eq_attr \"tune\" \"thunderx3t110\")\n+       (eq_attr \"type\" \"crypto_aese,crypto_aesmc\"))\n+  \"thunderx3t110_f0123\")\n+\n+(define_insn_reservation \"thunderx3t110_sha\" 5\n+  (and (eq_attr \"tune\" \"thunderx3t110\")\n+       (eq_attr \"type\" \"crypto_sha1_fast,crypto_sha1_xor,crypto_sha1_slow,\\\n+\t\t\tcrypto_sha256_fast,crypto_sha256_slow\"))\n+  \"thunderx3t110_f0123\")\n+\n+;; CRC extension.\n+\n+(define_insn_reservation \"thunderx3t110_crc\" 3\n+  (and (eq_attr \"tune\" \"thunderx3t110\")\n+       (eq_attr \"type\" \"crc\"))\n+  \"thunderx3t110_i1\")\n+\n+;; PMULL extension.\n+\n+(define_insn_reservation \"thunderx3t110_pmull\" 5\n+  (and (eq_attr \"tune\" \"thunderx3t110\")\n+       (eq_attr \"type\" \"crypto_pmull\"))\n+  \"thunderx3t110_f0123\")"}, {"sha": "a101928eabb60e5344d8adc2061383aee646e0df", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa477e454287063a583967c79867b44deea8e4ad/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa477e454287063a583967c79867b44deea8e4ad/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=fa477e454287063a583967c79867b44deea8e4ad", "patch": "@@ -16950,7 +16950,7 @@ performance of the code.  Permissible values for this option are:\n @samp{octeontx2f95mm}\n @samp{thunderx}, @samp{thunderxt88},\n @samp{thunderxt88p1}, @samp{thunderxt81}, @samp{tsv110},\n-@samp{thunderxt83}, @samp{thunderx2t99},\n+@samp{thunderxt83}, @samp{thunderx2t99}, @samp{thunderx3t110},\n @samp{cortex-a57.cortex-a53}, @samp{cortex-a72.cortex-a53},\n @samp{cortex-a73.cortex-a35}, @samp{cortex-a73.cortex-a53},\n @samp{cortex-a75.cortex-a55}, @samp{cortex-a76.cortex-a55}"}]}