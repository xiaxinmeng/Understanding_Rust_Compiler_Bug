{"sha": "93a7c573dc90220284365e6de7533485421455d1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTNhN2M1NzNkYzkwMjIwMjg0MzY1ZTZkZTc1MzM0ODU0MjE0NTVkMQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2008-05-20T13:03:26Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2008-05-20T13:03:26Z"}, "message": "Resync.\n\nFrom-SVN: r135654", "tree": {"sha": "7224e64ee4d98812c9c6ab3d9bc76e815cc9fdd3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7224e64ee4d98812c9c6ab3d9bc76e815cc9fdd3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/93a7c573dc90220284365e6de7533485421455d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93a7c573dc90220284365e6de7533485421455d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93a7c573dc90220284365e6de7533485421455d1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93a7c573dc90220284365e6de7533485421455d1/comments", "author": null, "committer": null, "parents": [{"sha": "6357e162e858166f0671d29efd283d312e9081f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6357e162e858166f0671d29efd283d312e9081f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6357e162e858166f0671d29efd283d312e9081f4"}], "stats": {"total": 515, "additions": 515, "deletions": 0}, "files": [{"sha": "1a28e6eac72600193aee56831676d23c0a00cf0a", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 515, "deletions": 0, "changes": 515, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93a7c573dc90220284365e6de7533485421455d1/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93a7c573dc90220284365e6de7533485421455d1/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=93a7c573dc90220284365e6de7533485421455d1", "patch": "@@ -1,3 +1,518 @@\n+2008-05-20  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* Makefile.rtl (GNAT.Sockets.Thin_Common): New unit.\n+\n+\t* g-sttsne-vxworks.adb: Add missing dependency on Sockets.Constants.\n+\tAdd missing \"with\" of Ada.Unchecked_Conversion\n+\n+\t* g-soccon-linux-ppc.ads, g-soccon-linux-64.ads, g-soccon-lynxos.ads, \n+\tg-soccon-linux-x86.ads, g-soccon-hpux-ia64.ads, \n+\tg-soccon-solaris-64.ads, g-soccon-tru64.ads, g-soccon-aix.ads, \n+\tg-soccon-irix.ads, g-soccon-hpux.ads, g-soccon-solaris.ads, \n+\tg-soccon-vms.ads, g-soccon-mingw.ads, g-soccon-vxworks.ads, \n+\tg-socthi-vxworks.adb, g-soccon-freebsd.ads, g-soccon.ads: \n+\tMove common code out of GNAT.Sockets.Thin implementations and into\n+\tThin_Common.\n+\tNew constant SIZEOF_fd_set\n+\tNew flag Has_Sockaddr_Len\n+\tNew constants SIZEOF_sockaddr_in, SIZEOF_sockaddr_in6\n+\n+\t* g-stsifd-sockets.adb\n+\t(Create): Remove call to Set_Length; use Set_Family to set the family\n+\tand (on appropriate platforms) length fields in struct sockaddr.\n+\n+\t* g-socthi.adb, g-socthi.ads, g-socthi-vms.ads, g-socthi-vms.adb, \n+\tg-socthi-mingw.adb, g-socthi-mingw.ads, g-socthi-vxworks.adb, \n+\tg-soccon-darwin.ads, g-soccon-darwin.ads: New constant SIZEOF_fd_set\n+\tMove common code out of GNAT.Sockets.Thin implementations and into\n+\tThin_Common.\n+\n+\t* g-socket.ads, g-socket.adb: \n+\tMove common code out of GNAT.Sockets.Thin implementations and into\n+\tThin_Common.\n+\t(Connect_Socket, Accept_Socket): Provide new versions of these two\n+\troutines that operate with a user specified timeout.\n+\t(Bind_Socket, Connect_Socket, Send_Socket): Remove calls to Set_Length,\n+\tthis is now handled automatically by Set_Family on platforms that\n+\trequire it.\n+\n+\t* gen-soccon.c: \n+\tMove common code out of GNAT.Sockets.Thin implementations and into\n+\tThin_Common.\n+\t(SIZEOF_sockaddr_in6): On platforms where IPv6 is not supported, define\n+\tthis constant to 0 (not -1) because we use it to initialize an\n+\tunsigned_char value.\n+\tAlign values for numeric constants only.\n+\tHandle the case of systems that do not support AF_INET6.\n+\tNew constant SIZEOF_fd_set\n+\tNew flag Has_Sockaddr_Len\n+\tNew constants SIZEOF_sockaddr_in, SIZEOF_sockaddr_in6\n+\n+\t* gsocket.h: New flag Has_Sockaddr_Len\n+\tNew constants SIZEOF_sockaddr_in, SIZEOF_sockaddr_in6\n+\n+2008-05-20  Santiago Uruena  <uruena@adacore.com>\n+\n+\t* i-cobol.ads: Interfaces.COBOL should be preelaborate.\n+\n+2008-05-20  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* s-linux-hppa.ads (atomic_lock_t): Put back proper alignment now that\n+\tthe underlying issue with malloc/free has been fixed. Remove associated\n+\tcomments.\n+\tMinor reformatting.\n+\tRelated to PR ada/24533\n+\n+2008-05-20  Robert Dewar  <dewar@adacore.com>\n+\n+\t* ali.adb: Correct casing of ASCII.NUL\n+\n+\t* styleg-c.adb (Check_Identifier): Handle case of names in ASCII\n+\tproperly.\n+\n+2008-05-20  Robert Dewar  <dewar@adacore.com>\n+\t    Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* checks.adb (Apply_Arithmetic_Overflow_Check): Avoid intermediate\n+\toverflow if result converted to wider integer type.\n+\t(Apply_Type_Conversion_Checks): Don't emit checks on conversions to\n+\tdiscriminated types when discriminant checks are suppressed.\n+\n+2008-05-20  Vincent Celier  <celier@adacore.com>\n+\n+\t* cstand.adb (Print_Standard): Issue the correct Size clause for type\n+\tWide_Wide_Character.\n+\n+2008-05-20  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* decl.c: Do not emit a variable for a object that has an address\n+\trepresentation clause whose value is known at compile time.\n+\tWhen a variable has an address clause whose value is known at compile\n+\ttime, refer to this variable by using directly the address instead of\n+\tdereferencing a pointer.\n+\n+2008-05-20  Robert Dewar  <dewar@adacore.com>\n+\n+\tPR ada/30740\n+\t* einfo.ads, einfo.adb (Non_Binary_Modulus): Applies to all types and\n+\tsubtypes, always False for non-modular types.\n+\tShared_Var_Assign_Proc (node22) and Shared_Var_Read_Proc (node 15)\n+\tentry nodes have been replaced by Shared_Var_Procs_Instance (node22)\n+\tfor Shared_Storage package.\n+\t(Is_RACW_Stub_Type): New entity flag.\n+\n+\t* exp_ch4.adb\n+\t(Expand_N_Op_Expon): Avoid incorrect optimization of a*(2**b) in the\n+\tcase where we have a modular type with a non-binary modules.\n+\tComments reformattings.\n+\n+\t* sem_intr.adb: Simplify code not that Non_Binary_Modulus applies to\n+\tall types.\n+\n+2008-05-20  Javier Miranda  <miranda@adacore.com>\n+\n+\t* exp_aggr.adb\n+\t(Build_Record_Aggr_Code): Fix wrong tests checking progenitors. Previous\n+\ttests did not covered the case in which the type of the aggregate has\n+\tno progenitors but some its parents has progenitors.\n+\n+2008-05-20  Gary Dismukes  <dismukes@adacore.com>\n+\t    Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* exp_ch3.adb\n+\t(Expand_N_Object_Declaration): Correct the condition which triggers the\n+\tgeneration of a call to Displace when initializing a class-wide object.\n+\t(Build_Dcheck_Functions): Build discriminant-checking for null variants\n+\twhen Frontend_Layout_On_Target is true to ensure that they're available\n+\tfor calling when a record variant size function is built in Layout.\n+\n+2008-05-20  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch5.adb (Expand_Assign_Record): Within an initialization\n+\tprocedure for a derived type retrieve the discriminant values from the\n+\tparent using the corresponding discriminant.\n+\t(Expand_N_Assignment_Statement): Skip generation of implicit\n+\tif-statement associated with controlled types if we are\n+\tcompiling with restriction No_Finalization.\n+\n+2008-05-20  Vincent Celier  <celier@adacore.com>\n+\n+\t* prj.adb (Hash (Project_Id)): New function\n+\t(Project_Empty): Add new component Interfaces_Defined\n+\n+\t* prj.ads (Source_Data): New component Object_Linked\n+\t(Language_Config): New components Object_Generated and Objects_Linked\n+\t(Hash (Project_Id)): New function\n+\t(Source_Data): New Boolean components In_Interfaces and\n+\tDeclared_In_Interfaces.\n+\t(Project_Data): New Boolean component Interfaces_Defined\n+\n+\t* prj-attr.adb: \n+\tNew project level attribute Object_Generated and Objects_Linked\n+\tAdd new project level attribute Interfaces\n+\n+\t* prj-dect.adb: Use functions Present and No throughout\n+\t(Parse_Variable_Declaration): If a string type is specified as a simple\n+\tname and is not found in the current project, look for it also in the\n+\tancestors of the project.\n+\n+\t* prj-makr.adb: \n+\tReplace procedure Make with procedures Initialize, Process and Finalize\n+\tto implement H414-023: process different directories with different\n+\tpatterns.\n+\tUse functions Present and No throughout\n+\n+\t* prj-makr.ads: \n+\tReplace procedure Make with procedures Initialize, Process and Finalize\n+\n+\t* prj-nmsc.adb\n+\t(Add_Source): Set component Object_Exists and Object_Linked accordnig to\n+\tthe language configuration.\n+\t(Process_Project_Level_Array_Attributes): Process new attributes\n+\tObject_Generated and Object_Linked.\n+\t(Report_No_Sources): New Boolean parameter Continuation, defaulted to\n+\tFalse, to indicate that the erreor/warning is a continuation.\n+\t(Check): Call Report_No_Sources with Contnuation = True after the first\n+\tcall.\n+\t(Error_Msg): Process successively contnuation character and warning\n+\tcharacter.\n+\t(Find_Explicit_Sources): Check that all declared sources have been found\n+\t(Check_File): Indicate in hash table Source_Names when a declared source\n+\tis found.\n+\t(Check_File): Set Other_Part when found\n+\t(Find_Explicit_Sources): In multi language mode, check if all exceptions\n+\tto the naming scheme have been found. For Ada, report an error if an\n+\texception has not been found. Otherwise, disregard the exception.\n+\t(Check_Interfaces): New procedure\n+\t(Add_Source): When Other_Part is defined, set mutual pointers in spec\n+\tand body.\n+\t(Check): In multi-language mode, call Check_Interfaces\n+\t(Process_Sources_In_Multi_Language_Mode): Set In_Interfaces to False\n+\tfor an excluded source.\n+\t(Remove_Source): A source replacing a source in the interfaces is also\n+\tin the interfaces.\n+\n+\t* prj-pars.adb: Use function Present\n+\n+\t* prj-part.adb: Use functions Present and No throughout\n+\t(Parse_Single_Project): Set the parent project for child projects\n+\t(Create_Virtual_Extending_Project): Register project with no qualifier\n+\t(Parse_Single_Project): Allow an abstract project to be extend several\n+\ttimes. Do not allow an abstract project to extend a non abstract\n+\tproject.\n+\n+\t* prj-pp.adb: Use functions Present and No throughout\n+\t(Print): Take into account the full associative array attribute\n+\tdeclarations.\n+\n+\t* prj-proc.adb: Use functions Present and No throughout\n+\t(Expression): Call itself with the same From_Project_Node for the\n+\tdefault value of an external reference.\n+\n+\t* prj-strt.adb: Use functions Present and No throughout\n+\t(Parse_Variable_Reference): If a variable is specified as a simple name\n+\tand is not found in the current project, look for it also in the\n+\tancestors of the project.\n+\n+\t* prj-tree.ads, prj-tree.adb (Present): New function\n+\t(No): New function\n+\tUse functions Present and No throughout\n+\t(Parent_Project_Of): New function\n+\t(Set_Parent_Project_Of): New procedure\n+\n+\t* snames.ads, snames.adb: \n+\tAdd new standard names Object_Generated and Objects_Linked\n+\n+2008-05-20  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* exp_ch6.adb (Expand_Call): Add guard to ensure that both the parent\n+\tand the derived type are of the same kind.\n+\t(Expand_Call): Generate type conversions for actuals of\n+\trecord or array types when the parent and the derived types differ in\n+\tsize and/or packed status.\n+\n+2008-05-20  Javier Miranda  <miranda@adacore.com>\n+\t    Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_disp.adb (Make_DT, Make_Secondary_DT, Make_Tags): Avoid\n+\tgenerating dispatch tables of locally defined tagged types statically.\n+\tRemove implicit if-statement that is no longer required.\n+\t(Expand_Dispatching_Call): If this is a call to an instance of the\n+\tgeneric dispatching constructor, the type of the first argument may be\n+\ta subtype of Tag, so always use the base type to recognize this case.\n+\n+2008-05-20  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* exp_dist.adb\n+\t(GARLIC_Support.Add_RACW_Read_Attribute): When a zero value is received,\n+\tand the RACW is null-excluding, raise CONSTRAINT_ERROR instead of\n+\tassigning NULL into the result, to avoid a spurious warning.\n+\t(Add_RACW_Features, case Same_Scope): Add assertion that designated type\n+\tis not frozen.\n+\t(Add_Stub_Type): Set entity flag Is_RACW_Stub_Type on generated stub\n+\ttype.\n+\t(Build_From_Any_Function, Build_To_Any_Function,\n+\tBuild_TypeCode_Function): For a type that has user-specified stream\n+\tattributes, use an opaque sequence of octets as the representation.\n+\n+2008-05-20  Kevin Pouget  <pouget@adacore.com>\n+\n+\t* exp_smem.ads, exp_smem.adb: Construction of access and assign\n+\troutines has been replaced by an instantiation of\n+\tSystem.Shared_Storage.Shared_Var_Procs generic package, while expanding\n+\tshared variable declaration.\n+\tCalls to access and assign routines have been replaced by calls to\n+\tRead/Write routines of System.Shared_Storage.Shared_Var_Procs\n+\tinstantiated package.\n+\t\n+\t* rtsfind.ads: RE_Shared_Var_Procs entry has been added in RE_Unit_Table\n+\tIt identifies the new generic package added in s-shasto.\n+\n+\t* s-shasto.adb, s-shasto.ads: A new generic package has been added, it\n+\tis instantiated for each shared passive variable. It provides\n+\tsupporting procedures called upon each read or write access by the\n+\texpanded code.\n+\n+\t* sem_attr.adb:\n+\tFor this runtime unit (always compiled in GNAT mode), we allow\n+\tstream attributes references for limited types for the case where\n+\tshared passive objects are implemented using stream attributes,\n+\twhich is the default in GNAT's persistent storage implementation.\n+\n+2008-05-20  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* freeze.adb\n+\t(Freeze_Enumeration_Type): For a subtype that inherits a foreign\n+\tconvention from its base type, do not set the type to that of integer,\n+\tbecause it may inherit a size clause.\n+\tWarn on a size clause with a size different\n+\tfrom that of Integer, if the type has convention C.\n+\n+2008-05-20  Vincent Celier  <celier@adacore.com>\n+\n+\t* gnatname.adb\n+\t(Scan_Args): Rewrite to take into account new switch --and to separate\n+\targuments into sections.\n+\t(Gnatname): Call Prj.Makr.Initialize, then Prj.Makr.Process for each\n+\tsection, then Finalize.\n+\n+2008-05-20  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* init.c: Enable stack probing on ppc-linux.\n+\n+\t* tracebak.c: Add symbolic traceback for ppc-linux.\n+\n+\t* system-linux-ppc.ads: Enable stack probing on ppc-linux.\n+\n+2008-05-20  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* Makefile.in\n+\t(common-tools): New rule, to avoid parallel build failure on gnat tools.\n+\tReenable parallel builds on this Makefile.\n+\n+\t* Make-lang.in: Update dependencies.\n+\n+2008-05-20  Robert Dewar  <dewar@adacore.com>\n+\n+\t* opt.ads (Treat_Restrictions_As_Warnings): New switch\n+\n+\t* sem_prag.adb, par-prag.adb, restrict.ads: Implement flag\n+\tTreat_Restrictions_As_Warnings.\n+\n+\t* switch-c.adb: Recognize new switch -gnatr\n+\n+\t* usage.adb: Add line for -gnatr\n+\n+2008-05-20  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* par-ch3.adb\n+\t(P_Access_Definition): Change the error message when parsing \"access\n+\tall\" in Ada 95 mode. The message no longer forces the user to recompile\n+\tin 05 mode only to discover that anonymous access types are not allowed\n+\tto have \"all\".\n+\n+2008-05-20  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* par-ch9.adb\n+\t(P_Protected): Update the error message on missing \"-gnat05\" switch when\n+\tusing interfaces in conjunction with protected types. Remove the\n+\tincorrect error message associated with the presence of \"private\" after\n+\ta \"with\".\n+\n+2008-05-20  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_aggr.adb: Update comments.\n+\tImprove previous change for PR ada/17985\n+\n+2008-05-20  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* sem_cat.adb\n+\t(Set_Categorization_From_Scope): Do not set In_Remote_Types unless in\n+\tthe visible part of the spec of a remote types unit.\n+\t(Validate_Remote_Access_Object_Type_Declaration):\n+\tNew local subprogram Is_Valid_Remote_Object_Type, replaces\n+\tIs_Recursively_Limited_Private.\n+\t(Validate_RACW_Primitives): Enforce E.2.2(14) rules: the types of all\n+\tnon-controlling formals (and the return type, even though this is not\n+\texplicit in the standard) must support external streaming.\n+\t(Validate_RCI_Subprogram_Declaration): Enforce E.2.3(14) rules: same\n+\tas above for of RAS types and RCI subprograms. (The return type is not\n+\tchecked yet).\n+\tUpdate comments related to RACWs designating limited interfaces per\n+\tARG ruling on AI05-060.\n+\n+\t* sem_util.ads, sem_util.adb\n+\t(Is_Remote_Access_To_Class_Wide_Type): Only rely on Is_Remote_Types and\n+\tIs_Remote_Call_Interface to identify RACW types in a stable and\n+\tconsistent way. We used to rely in this predicate on the privateness of\n+\tthe designated type and its ancestors, but depending on the currently\n+\tvisible private parts, this caused false negatives. We now uniformly\n+\trely on checks made at the point where the RACW type is declared.\n+\t(Inspect_Deferred_Constant_Completion): Moved from Sem_Ch7.\n+\n+2008-05-20  Javier Miranda  <miranda@adacore.com>\n+\t    Ed Schonberg  <schonberg@adacore.com>\n+\t    Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_ch3.adb\n+\t(Analyze_Object_Declaration): Fix over-conservative condition\n+\trestricting use of predefined assignment with tagged types that have\n+\tconvention CPP.\n+\t(Analyze_Object_Declaration): Relax the check regarding deferred\n+\tconstants declared in scopes other than packages since they can be\n+\tcompleted with pragma Import.\n+\tAdd missing escaping of all-caps word 'CPP' in error messages.\n+\t(Build_Discriminated_Subtype): Do not inherit representation clauses\n+\tfrom parent type if subtype already carries them, because they are\n+\tinherited earlier during derivation and already include those that may\n+\tcome from a partial view.\n+\n+\t* sem_ch9.adb, sem_ch5.adb, sem_ch6.adb (Analyze_Subprogram_Body):\n+\tCheck the declarations of a subprogram body for proper deferred\n+\tconstant completion.\n+\n+\t* sem_ch7.ads, sem_ch7.adb\n+\t(Inspect_Deferred_Constant_Completion): Moved to sem_util.\n+\n+2008-05-20  Ed Schonberg  <schonberg@adacore.com>\n+\t    Thomas Quinot  <quinot@adacore.com>\n+\n+\t* sem_ch4.adb\n+\t(Try_Indexed_Call): Handle properly a construct of the form F(S) where\n+\tF is a parameterless function that returns an array, and S is a subtype\n+\tmark.\n+\t(Analyze_Call): Insert dereference when the prefix is a parameterless\n+\tfunction that returns an access to subprogram and the call has\n+\tparameters.\n+\tReject a non-overloaded call whose name resolves to denote\n+\ta primitive operation of the stub type generated to support a remote\n+\taccess-to-class-wide type.\n+\n+2008-05-20  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch8.adb\n+\t(Note_Redundant_Use): Diagnose a redundant use within a subprogram body\n+\twhen there is a use clause for the same entity in the context.\n+\t(Analyze_Subprogram_Renaming): A renaming_as_body is legal if it is\n+\tcreated for a stream attribute of an abstract type or interface type.\n+\n+2008-05-20  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* sem_dist.ads, sem_dist.adb (Is_RACW_Stub_Type_Operation): New\n+\tsubprogram.\n+\n+\t* sem_type.adb\n+\t(Add_One_Interp): Ignore any interpretation that is a primitive\n+\toperation of an RACW stub type (these primitives are only executed\n+\tthrough dispatching, never through static calls).\n+\t(Collect_Interps): When only one interpretation has been found, set N's\n+\tEntity and Etype to that interpretation, otherwise Entity and Etype may\n+\tstill refer to an interpretation that was ignored by Add_One_Interp,\n+\tin which case would end up with being marked as not overloaded but with\n+\tan Entity attribute not pointing to its (unique) correct interpretation.\n+\n+2008-05-20  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_eval.adb\n+\t(Eval_Slice): Warn when a slice whose discrete range is a subtype name\n+\tdenotes the whole array of its prefix.\n+\n+2008-05-20  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_res.adb (Resolve_Op_Not): Warn on double negation\n+\n+2008-05-20  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sprint.adb\n+\t(Print_Itype): Do not modify the sloc of the component type of a\n+\t(packed) array itype, because it is an unrelated type whose source\n+\tlocation is independent of the point of creation of the itype itself.\n+\n+2008-05-20  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* uintp.adb, urealp.adb: Replace calls to Increment_Last + Set with\n+\tAppend.\n+\n+2008-05-20  Robert Dewar  <dewar@adacore.com>\n+\t    Vincent Celier  <celier@adacore.com>\n+\n+\t* vms_data.ads: Add entry for -gnatr\n+\tPut GNAT SYNC section in proper alpha order\n+\tAdd VMS qualifier /DISPLAY_PROGRESS equivalent to gnatmake switch -d\n+\n+\t* gnat_ugn.texi: Add documentation for new gnatname switch --and\n+\tUpdate the style checks section\n+\tAdd documentation of -gnatr\n+\tAdd to the \"Adding the Results of Compiler Checks to gnatcheck Output\"\n+\tsubsection the explanation how compiler checks should be disabled for\n+\tgnatcheck.\n+\tUpdate the list of Ada 95 reserved words used by in the project language\n+\tAdd documentation for project qualifiers.\n+\tDocument that abstract projects may be extended by different projects in\n+\tthe same project tree.\n+\tAdd documentation for gnatmake switch -d\n+\n+\t* ug_words: Add -gnatyy VMS equivalence string.\n+\tAdd entry for -gnatr\n+\n+2008-05-20  Bob Duff  <duff@adacore.com>\n+\n+\t* a-rttiev.adb\n+\t(Set_Handler): Remove code from both of these that implements\n+\tRM-D.15(15/2), because it causes a race condition and potential\n+\tdeadlock.\n+\t(Process_Queued_Events): Add comment explaining \"exception when others\n+\t=> null\". Add clarifying \".all\", even though implicit .all is legal\n+\there.\n+\n+2008-05-20  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* s-winext.ads: Replace representation clause by pragma Pack. Gives\n+\tequivalent representation, but has the advantage of allowing\n+\tcompilation of this file under 64 bits platforms.\n+\n+\t* s-os_lib.adb (Normalize_Pathname): Mark Cur_Dir constant.\n+\n+\t* s-osinte-irix.ads: (Alternate_Stack_Size): Add dummy declaration.\n+\n+\t* adaint.c: \n+\tDon't define dummy implementation of convert_addresses on ppc-linux.\n+\n+2008-05-20  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch7.adb\n+\t(Expand_Ctrl_Function_Call): Do not attach result to finalization list\n+\tif expression is aggregate component.\n+\n+2008-05-20  Robert Dewar  <dewar@adacore.com>\n+\n+\t* g-byorma.adb, gnatlink.adb, prepcomp.adb, sinfo.ads,\n+\tsem_ch12.adb: Update comments. Minor reformatting.\n+\n+\t* exp_ch2.adb: Typo\n+\n+\t* s-unstyp.ads: Fixed some typos in comments.\n+\n 2008-05-20  Arnaud Charlet  <charlet@adacore.com>\n \n \t* s-taspri-vxworks.ads (Task_Address, Task_Address_Size): New"}]}