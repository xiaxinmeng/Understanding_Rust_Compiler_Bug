{"sha": "5f7ca34bf522bcfaac6978ffa31e75158995c468", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWY3Y2EzNGJmNTIyYmNmYWFjNjk3OGZmYTMxZTc1MTU4OTk1YzQ2OA==", "commit": {"author": {"name": "David S. Miller", "email": "davem@davemloft.net", "date": "2008-05-04T11:25:04Z"}, "committer": {"name": "David S. Miller", "email": "davem@gcc.gnu.org", "date": "2008-05-04T11:25:04Z"}, "message": "config.gcc (sparc*-*-*): Always set need_64bit_hwint to yes.\n\ngcc/\n\n\t* config.gcc (sparc*-*-*): Always set need_64bit_hwint to yes.\n\t(sparc*-*-linux*): Use linux.h in tm_file.\n\t(sparc-*-linux*): If 'enabled_targets' is 'all', build a bi-arch\n\tcompiler defaulting to 32-bit.\n\t(sparc*-*-*): Remove explicit target settings of need_64bit_hwint,\n\tno longer needed.\n\t* config/sparc/linux.h: Remove definitions now obtained\n\tproperly from linux.h\n\t* config/sparc/linux64.h: Likewise.\n\t(ASM_CPU_DEFAULT_SPEC): Change this to ASM_CPU64_DEFAULT_SPEC, we\n\tdon't want this setting for 32-bit builds in a biarch compiler.\n\t* doc/install.texi: Add sparc-linux to list of targets\n\tsupporting --enable-targets=all.\n\nlibcpp/\n\n\t* configure.ac (sparc*-*-*): Always set need_64bit_hwint to yes.\n\t* configure: Regenerate.\n\nFrom-SVN: r134929", "tree": {"sha": "77825252122b1baace646c37e71adb238ad09dfc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/77825252122b1baace646c37e71adb238ad09dfc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5f7ca34bf522bcfaac6978ffa31e75158995c468", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f7ca34bf522bcfaac6978ffa31e75158995c468", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f7ca34bf522bcfaac6978ffa31e75158995c468", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f7ca34bf522bcfaac6978ffa31e75158995c468/comments", "author": {"login": "davem330", "id": 1053866, "node_id": "MDQ6VXNlcjEwNTM4NjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1053866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davem330", "html_url": "https://github.com/davem330", "followers_url": "https://api.github.com/users/davem330/followers", "following_url": "https://api.github.com/users/davem330/following{/other_user}", "gists_url": "https://api.github.com/users/davem330/gists{/gist_id}", "starred_url": "https://api.github.com/users/davem330/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davem330/subscriptions", "organizations_url": "https://api.github.com/users/davem330/orgs", "repos_url": "https://api.github.com/users/davem330/repos", "events_url": "https://api.github.com/users/davem330/events{/privacy}", "received_events_url": "https://api.github.com/users/davem330/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9e6dca75944c1d711ef62e4d7d2befa9179e166b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e6dca75944c1d711ef62e4d7d2befa9179e166b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e6dca75944c1d711ef62e4d7d2befa9179e166b"}], "stats": {"total": 229, "additions": 50, "deletions": 179}, "files": [{"sha": "c1da450a4129e6b727e5c7daefde1a9e5bf81f61", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f7ca34bf522bcfaac6978ffa31e75158995c468/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f7ca34bf522bcfaac6978ffa31e75158995c468/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5f7ca34bf522bcfaac6978ffa31e75158995c468", "patch": "@@ -1,3 +1,19 @@\n+2008-05-04  David S. Miller  <davem@davemloft.net>\n+\n+\t* config.gcc (sparc*-*-*): Always set need_64bit_hwint to yes.\n+\t(sparc*-*-linux*): Use linux.h in tm_file.\n+\t(sparc-*-linux*): If 'enabled_targets' is 'all', build a bi-arch\n+\tcompiler defaulting to 32-bit.\n+\t(sparc*-*-*): Remove explicit target settings of need_64bit_hwint,\n+\tno longer needed.\n+\t* config/sparc/linux.h: Remove definitions now obtained\n+\tproperly from linux.h\n+\t* config/sparc/linux64.h: Likewise.\n+\t(ASM_CPU_DEFAULT_SPEC): Change this to ASM_CPU64_DEFAULT_SPEC, we\n+\tdon't want this setting for 32-bit builds in a biarch compiler.\n+\t* doc/install.texi: Add sparc-linux to list of targets\n+\tsupporting --enable-targets=all.\n+\n 2008-05-03  Andrew Pinski  <pinskia@gmail.com>\n \n \t* Makefile.in (tree-ssa-phiprop.o): Fix dependencies."}, {"sha": "04b46c38fe7221946ced7930606ba18ebd4b1fb0", "filename": "gcc/config.gcc", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f7ca34bf522bcfaac6978ffa31e75158995c468/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f7ca34bf522bcfaac6978ffa31e75158995c468/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=5f7ca34bf522bcfaac6978ffa31e75158995c468", "patch": "@@ -358,12 +358,9 @@ rs6000*-*-*)\n score*-*-*)\n \tcpu_type=score\n \t;;\n-sparc64*-*-*)\n-\tcpu_type=sparc\n-\tneed_64bit_hwint=yes\n-\t;;\n sparc*-*-*)\n \tcpu_type=sparc\n+\tneed_64bit_hwint=yes\n \t;;\n spu*-*-*)\n \tcpu_type=spu\n@@ -2357,9 +2354,15 @@ sparc-*-elf*)\n \tuse_fixproto=yes\n \t;;\n sparc-*-linux*)\t\t# SPARC's running GNU/Linux, libc6\n-\ttm_file=\"${tm_file} dbxelf.h elfos.h svr4.h sparc/sysv4.h sparc/linux.h\"\n+\ttm_file=\"${tm_file} dbxelf.h elfos.h svr4.h sparc/sysv4.h linux.h\"\n \textra_options=\"${extra_options} sparc/long-double-switch.opt\"\n-\ttmake_file=\"${tmake_file} sparc/t-linux sparc/t-crtfm\"\n+\tif test x$enable_targets = xall; then\n+\t\ttm_file=\"sparc/biarch64.h ${tm_file} sparc/linux64.h\"\n+\t\ttmake_file=\"${tmake_file} sparc/t-linux64 sparc/t-crtfm\"\n+\telse\n+\t\ttm_file=\"${tm_file} sparc/linux.h\"\n+\t\ttmake_file=\"${tmake_file} sparc/t-linux sparc/t-crtfm\"\n+\tfi\n \t;;\n sparc-*-rtems*)\n \ttm_file=\"${tm_file} dbxelf.h elfos.h svr4.h sparc/sysv4.h sparc/sp-elf.h sparc/rtemself.h rtems.h\"\n@@ -2396,7 +2399,6 @@ sparc64-*-solaris2* | sparcv9-*-solaris2*)\n \t  \"\":yes:* | yes:yes:* ) thread_file=posix ;;\n \t  \"\":*:yes | yes:*:yes ) thread_file=solaris ;;\n \tesac\n-\tneed_64bit_hwint=yes\n \t;;\n sparc-*-solaris2*)\n \ttm_file=\"${tm_file} dbxelf.h elfos.h svr4.h sparc/sysv4.h sol2.h\"\n@@ -2437,7 +2439,6 @@ sparc-*-solaris2*)\n \t\tfi\n \t\ttm_file=\"${tm_file} tm-dwarf2.h\"\n \t\ttmake_file=\"$tmake_file sparc/t-sol2-64\"\n-\t\tneed_64bit_hwint=yes\n \t\ttest x$with_cpu != x || with_cpu=v9\n \t\t;;\n \tesac\n@@ -2488,10 +2489,9 @@ sparc64-*-freebsd*|ultrasparc-*-freebsd*)\n \t\tx) with_cpu=ultrasparc ;;\n \t\t*) echo \"$with_cpu not supported for freebsd target\"; exit 1 ;;\n \tesac\n-\tneed_64bit_hwint=yes\n \t;;\n sparc64-*-linux*)\t\t# 64-bit SPARC's running GNU/Linux\n-\ttm_file=\"sparc/biarch64.h ${tm_file} dbxelf.h elfos.h svr4.h sparc/sysv4.h sparc/linux64.h\"\n+\ttm_file=\"sparc/biarch64.h ${tm_file} dbxelf.h elfos.h svr4.h sparc/sysv4.h linux.h sparc/linux64.h\"\n \textra_options=\"${extra_options} sparc/long-double-switch.opt\"\n \ttmake_file=\"${tmake_file} sparc/t-linux sparc/t-linux64 sparc/t-crtfm\"\n \t;;"}, {"sha": "67b6412d2e93bb9e465422cd41c8e2d91b616b3d", "filename": "gcc/config/sparc/linux.h", "status": "modified", "additions": 3, "deletions": 74, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f7ca34bf522bcfaac6978ffa31e75158995c468/gcc%2Fconfig%2Fsparc%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f7ca34bf522bcfaac6978ffa31e75158995c468/gcc%2Fconfig%2Fsparc%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Flinux.h?ref=5f7ca34bf522bcfaac6978ffa31e75158995c468", "patch": "@@ -22,39 +22,12 @@ along with GCC; see the file COPYING3.  If not see\n #define TARGET_OS_CPP_BUILTINS()\t\t\\\n   do\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\\\n-      builtin_define_std (\"unix\");\t\t\\\n-      builtin_define_std (\"linux\");\t\t\\\n-      builtin_define (\"__gnu_linux__\");\t\t\\\n-      builtin_assert (\"system=linux\");\t\t\\\n-      builtin_assert (\"system=unix\");\t\t\\\n-      builtin_assert (\"system=posix\");\t\t\\\n+      LINUX_TARGET_OS_CPP_BUILTINS();\t\t\\\n       if (TARGET_LONG_DOUBLE_128)       \t\\\n \tbuiltin_define (\"__LONG_DOUBLE_128__\");\t\\\n     }\t\t\t\t\t\t\\\n   while (0)\n \n-/* Don't assume anything about the header files.  */\n-#define NO_IMPLICIT_EXTERN_C\n-\n-#undef MD_EXEC_PREFIX\n-#undef MD_STARTFILE_PREFIX\n-\n-/* Provide a STARTFILE_SPEC appropriate for GNU/Linux.  Here we add\n-   the GNU/Linux magical crtbegin.o file (see crtstuff.c) which\n-   provides part of the support for getting C++ file-scope static\n-   object constructed before entering `main'.  */\n-   \n-#undef  STARTFILE_SPEC\n-#if defined HAVE_LD_PIE\n-#define STARTFILE_SPEC \\\n-  \"%{!shared: %{pg|p:gcrt1.o%s;pie:Scrt1.o%s;:crt1.o%s}}\\\n-   crti.o%s %{static:crtbeginT.o%s;shared|pie:crtbeginS.o%s;:crtbegin.o%s}\"\n-#else\n-#define STARTFILE_SPEC \\\n-  \"%{!shared: %{pg|p:gcrt1.o%s;:crt1.o%s}}\\\n-   crti.o%s %{static:crtbeginT.o%s;shared|pie:crtbeginS.o%s;:crtbegin.o%s}\"\n-#endif\n-\n /* Provide a ENDFILE_SPEC appropriate for GNU/Linux.  Here we tack on\n    the GNU/Linux magical crtend.o file (see crtstuff.c) which\n    provides part of the support for getting C++ file-scope static\n@@ -63,8 +36,8 @@ along with GCC; see the file COPYING3.  If not see\n \n #undef  ENDFILE_SPEC\n #define ENDFILE_SPEC \\\n-  \"%{ffast-math|funsafe-math-optimizations:crtfastmath.o%s} \\\n-   %{shared|pie:crtendS.o%s;:crtend.o%s} crtn.o%s\"\n+  \"%{shared|pie:crtendS.o%s;:crtend.o%s} crtn.o%s\\\n+   %{ffast-math|funsafe-math-optimizations:crtfastmath.o%s}\"\n \n /* This is for -profile to use -lc_p instead of -lc.  */\n #undef\tCC1_SPEC\n@@ -75,10 +48,6 @@ along with GCC; see the file COPYING3.  If not see\n %{mv8:-mcpu=v8} %{msupersparc:-mcpu=supersparc} \\\n \"\n \n-/* The GNU C++ standard library requires that these macros be defined.  */\n-#undef CPLUSPLUS_CPP_SPEC\n-#define CPLUSPLUS_CPP_SPEC \"-D_GNU_SOURCE %(cpp)\"\n-\n #undef TARGET_VERSION\n #define TARGET_VERSION fprintf (stderr, \" (sparc GNU/Linux with ELF)\");\n \n@@ -98,12 +67,6 @@ along with GCC; see the file COPYING3.  If not see\n #define CPP_SUBTARGET_SPEC \\\n \"%{posix:-D_POSIX_SOURCE} %{pthread:-D_REENTRANT}\"\n \n-#undef LIB_SPEC\n-#define LIB_SPEC \\\n-  \"%{pthread:-lpthread} \\\n-   %{shared:-lc} \\\n-   %{!shared:%{mieee-fp:-lieee} %{profile:-lc_p}%{!profile:-lc}}\"\n-\n /* Provide a LINK_SPEC appropriate for GNU/Linux.  Here we provide support\n    for the special GCC options -static and -shared, which allow us to\n    link things in one of these three modes by applying the appropriate\n@@ -121,15 +84,6 @@ along with GCC; see the file COPYING3.  If not see\n /* If ELF is the default format, we should not use /lib/elf.  */\n \n #define GLIBC_DYNAMIC_LINKER \"/lib/ld-linux.so.2\"\n-#define UCLIBC_DYNAMIC_LINKER \"/lib/ld-uClibc.so.0\"\n-#if UCLIBC_DEFAULT\n-#define CHOOSE_DYNAMIC_LINKER(G, U) \"%{mglibc:%{muclibc:%e-mglibc and -muclibc used together}\" G \";:\" U \"}\"\n-#else\n-#define CHOOSE_DYNAMIC_LINKER(G, U) \"%{muclibc:%{mglibc:%e-mglibc and -muclibc used together}\" U \";:\" G \"}\"\n-#endif\n-#define LINUX_DYNAMIC_LINKER \\\n-  CHOOSE_DYNAMIC_LINKER (GLIBC_DYNAMIC_LINKER, UCLIBC_DYNAMIC_LINKER)\n-\n \n #undef  LINK_SPEC\n #define LINK_SPEC \"-m elf32_sparc -Y P,/usr/lib %{shared:-shared} \\\n@@ -191,10 +145,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n #undef DITF_CONVERSION_LIBFUNCS\n #define DITF_CONVERSION_LIBFUNCS 1\n-\n-#if defined(HAVE_LD_EH_FRAME_HDR)\n-#define LINK_EH_SPEC \"%{!static:--eh-frame-hdr} \"\n-#endif\n \f\n #ifdef HAVE_AS_TLS\n #undef TARGET_SUN_TLS\n@@ -203,31 +153,10 @@ do {\t\t\t\t\t\t\t\t\t\\\n #define TARGET_GNU_TLS 1\n #endif\n \f\n-/* Don't be different from other Linux platforms in this regard.  */\n-#define HANDLE_PRAGMA_PACK_PUSH_POP\n-\n /* We use GNU ld so undefine this so that attribute((init_priority)) works.  */\n #undef CTORS_SECTION_ASM_OP\n #undef DTORS_SECTION_ASM_OP\n \n-/* Determine whether the entire c99 runtime is present in the\n-   runtime library.  */\n-#define TARGET_C99_FUNCTIONS (OPTION_GLIBC)\n-\n-/* Whether we have sincos that follows the GNU extension.  */\n-#define TARGET_HAS_SINCOS (OPTION_GLIBC)\n-\n-#define TARGET_POSIX_IO\n-\n-#undef LINK_GCC_C_SEQUENCE_SPEC\n-#define LINK_GCC_C_SEQUENCE_SPEC \\\n-  \"%{static:--start-group} %G %L %{static:--end-group}%{!static:%G}\"\n-\n-/* Use --as-needed -lgcc_s for eh support.  */\n-#ifdef HAVE_LD_AS_NEEDED\n-#define USE_LD_AS_NEEDED 1\n-#endif\n-\n #define MD_UNWIND_SUPPORT \"config/sparc/linux-unwind.h\"\n \n /* Linux currently uses RMO in uniprocessor mode, which is equivalent to"}, {"sha": "f8c87b95c86c125bd8e5432c9eb9fec7bcbf2235", "filename": "gcc/config/sparc/linux64.h", "status": "modified", "additions": 17, "deletions": 88, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f7ca34bf522bcfaac6978ffa31e75158995c468/gcc%2Fconfig%2Fsparc%2Flinux64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f7ca34bf522bcfaac6978ffa31e75158995c468/gcc%2Fconfig%2Fsparc%2Flinux64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Flinux64.h?ref=5f7ca34bf522bcfaac6978ffa31e75158995c468", "patch": "@@ -19,27 +19,18 @@ You should have received a copy of the GNU General Public License\n along with GCC; see the file COPYING3.  If not see\n <http://www.gnu.org/licenses/>.  */\n \n-#define TARGET_OS_CPP_BUILTINS()\t\t\t\\\n-  do\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\\\n-      builtin_define_std (\"unix\");\t\t\t\\\n-      builtin_define_std (\"linux\");\t\t\t\\\n-      builtin_define (\"_LONGLONG\");\t\t\t\\\n-      builtin_define (\"__gnu_linux__\");\t\t\t\\\n-      builtin_assert (\"system=linux\");\t\t\t\\\n-      builtin_assert (\"system=unix\");\t\t\t\\\n-      builtin_assert (\"system=posix\");\t\t\t\\\n-      if (TARGET_ARCH32 && TARGET_LONG_DOUBLE_128)\t\\\n-\tbuiltin_define (\"__LONG_DOUBLE_128__\");\t\t\\\n-    }\t\t\t\t\t\t\t\\\n+#define TARGET_OS_CPP_BUILTINS()\t\t\\\n+  do\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\\\n+      LINUX_TARGET_OS_CPP_BUILTINS();\t\t\\\n+      if (TARGET_ARCH64)\t\t\t\\\n+        builtin_define (\"_LONGLONG\");\t\t\\\n+      if (TARGET_ARCH32\t\t\t\t\\\n+          && TARGET_LONG_DOUBLE_128)\t\t\\\n+\tbuiltin_define (\"__LONG_DOUBLE_128__\");\t\\\n+    }\t\t\t\t\t\t\\\n   while (0)\n \n-/* Don't assume anything about the header files.  */\n-#define NO_IMPLICIT_EXTERN_C\n-\n-#undef MD_EXEC_PREFIX\n-#undef MD_STARTFILE_PREFIX\n-\n #if TARGET_CPU_DEFAULT == TARGET_CPU_v9 \\\n     || TARGET_CPU_DEFAULT == TARGET_CPU_ultrasparc \\\n     || TARGET_CPU_DEFAULT == TARGET_CPU_ultrasparc3 \\\n@@ -54,42 +45,22 @@ along with GCC; see the file COPYING3.  If not see\n    + MASK_STACK_BIAS + MASK_APP_REGS + MASK_FPU + MASK_LONG_DOUBLE_128)\n #endif\n \n-#undef ASM_CPU_DEFAULT_SPEC\n-#define ASM_CPU_DEFAULT_SPEC \"-Av9a\"\n-\n-/* Provide a STARTFILE_SPEC appropriate for GNU/Linux.  Here we add\n-   the GNU/Linux magical crtbegin.o file (see crtstuff.c) which\n-   provides part of the support for getting C++ file-scope static\n-   object constructed before entering `main'.  */\n-   \n-#undef  STARTFILE_SPEC\n-\n-#ifdef HAVE_LD_PIE\n-#define STARTFILE_SPEC \\\n-  \"%{!shared:%{pg|p:gcrt1.o%s;pie:Scrt1.o%s;:crt1.o%s}}\\\n-   crti.o%s %{static:crtbeginT.o%s;shared|pie:crtbeginS.o%s;:crtbeginS.o%s}\"\n-#else\n-#define STARTFILE_SPEC \\\n-  \"%{!shared:%{pg|p:gcrt1.o%s;:crt1.o%s}}\\\n-   crti.o%s %{static:crtbeginT.o%s;shared|pie:crtbeginS.o%s;:crtbeginS.o%s}\"\n-#endif\n+/* This must be v9a not just v9 because by default we enable\n+   -mvis.  */\n+#undef ASM_CPU64_DEFAULT_SPEC\n+#define ASM_CPU64_DEFAULT_SPEC \"-Av9a\"\n \n /* Provide a ENDFILE_SPEC appropriate for GNU/Linux.  Here we tack on\n    the GNU/Linux magical crtend.o file (see crtstuff.c) which\n    provides part of the support for getting C++ file-scope static\n    object constructed before entering `main', followed by a normal\n    GNU/Linux \"finalizer\" file, `crtn.o'.  */\n \n-#undef  ENDFILE_SPEC\n-\n+#undef\tENDFILE_SPEC\n #define ENDFILE_SPEC \\\n   \"%{shared|pie:crtendS.o%s;:crtend.o%s} crtn.o%s\\\n    %{ffast-math|funsafe-math-optimizations:crtfastmath.o%s}\"\n \n-/* The GNU C++ standard library requires that these macros be defined.  */\n-#undef CPLUSPLUS_CPP_SPEC\n-#define CPLUSPLUS_CPP_SPEC \"-D_GNU_SOURCE %(cpp)\"\n-\n #undef TARGET_VERSION\n #define TARGET_VERSION fprintf (stderr, \" (sparc64 GNU/Linux with ELF)\");\n \n@@ -122,12 +93,6 @@ along with GCC; see the file COPYING3.  If not see\n %{pthread:-D_REENTRANT} \\\n \"\n \n-#undef LIB_SPEC\n-#define LIB_SPEC \\\n-  \"%{pthread:-lpthread} \\\n-   %{shared:-lc} \\\n-   %{!shared: %{mieee-fp:-lieee} %{profile:-lc_p}%{!profile:-lc}}\"\n-\n /* Provide a LINK_SPEC appropriate for GNU/Linux.  Here we provide support\n    for the special GCC options -static and -shared, which allow us to\n    link things in one of these three modes by applying the appropriate\n@@ -146,17 +111,6 @@ along with GCC; see the file COPYING3.  If not see\n \n #define GLIBC_DYNAMIC_LINKER32 \"/lib/ld-linux.so.2\"\n #define GLIBC_DYNAMIC_LINKER64 \"/lib64/ld-linux.so.2\"\n-#define UCLIBC_DYNAMIC_LINKER32 \"/lib/ld-uClibc.so.0\"\n-#define UCLIBC_DYNAMIC_LINKER64 \"/lib/ld64-uClibc.so.0\"\n-#if UCLIBC_DEFAULT\n-#define CHOOSE_DYNAMIC_LINKER(G, U) \"%{mglibc:%{muclibc:%e-mglibc and -muclibc used together}\" G \";:\" U \"}\"\n-#else\n-#define CHOOSE_DYNAMIC_LINKER(G, U) \"%{muclibc:%{mglibc:%e-mglibc and -muclibc used together}\" U \";:\" G \"}\"\n-#endif\n-#define LINUX_DYNAMIC_LINKER32 \\\n-  CHOOSE_DYNAMIC_LINKER (GLIBC_DYNAMIC_LINKER32, UCLIBC_DYNAMIC_LINKER32)\n-#define LINUX_DYNAMIC_LINKER64 \\\n-  CHOOSE_DYNAMIC_LINKER (GLIBC_DYNAMIC_LINKER64, UCLIBC_DYNAMIC_LINKER64)\n \n #ifdef SPARC_BI_ARCH\n \n@@ -203,7 +157,7 @@ along with GCC; see the file COPYING3.  If not see\n \n #undef\tCC1_SPEC\n #if DEFAULT_ARCH32_P\n-#define CC1_SPEC \"\\\n+#define CC1_SPEC \"%{profile:-p} \\\n %{sun4:} %{target:} \\\n %{mcypress:-mcpu=cypress} \\\n %{msparclite:-mcpu=sparclite} %{mf930:-mcpu=f930} %{mf934:-mcpu=f934} \\\n@@ -214,7 +168,7 @@ along with GCC; see the file COPYING3.  If not see\n   %{!mno-vis:%{!mcpu=v9:-mvis}}} \\\n \"\n #else\n-#define CC1_SPEC \"\\\n+#define CC1_SPEC \"%{profile:-p} \\\n %{sun4:} %{target:} \\\n %{mcypress:-mcpu=cypress} \\\n %{msparclite:-mcpu=sparclite} %{mf930:-mcpu=f930} %{mf934:-mcpu=f934} \\\n@@ -324,10 +278,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n #undef DITF_CONVERSION_LIBFUNCS\n #define DITF_CONVERSION_LIBFUNCS 1\n-\n-#if defined(HAVE_LD_EH_FRAME_HDR)\n-#define LINK_EH_SPEC \"%{!static:--eh-frame-hdr} \"\n-#endif\n \f\n #ifdef HAVE_AS_TLS\n #undef TARGET_SUN_TLS\n@@ -336,31 +286,10 @@ do {\t\t\t\t\t\t\t\t\t\\\n #define TARGET_GNU_TLS 1\n #endif\n \f\n-/* Don't be different from other Linux platforms in this regard.  */\n-#define HANDLE_PRAGMA_PACK_PUSH_POP\n-\n /* We use GNU ld so undefine this so that attribute((init_priority)) works.  */\n #undef CTORS_SECTION_ASM_OP\n #undef DTORS_SECTION_ASM_OP\n \n-/* Determine whether the entire c99 runtime is present in the\n-   runtime library.  */\n-#define TARGET_C99_FUNCTIONS (OPTION_GLIBC)\n-\n-/* Whether we have sincos that follows the GNU extension.  */\n-#define TARGET_HAS_SINCOS (OPTION_GLIBC)\n-\n-#define TARGET_POSIX_IO\n-\n-#undef LINK_GCC_C_SEQUENCE_SPEC\n-#define LINK_GCC_C_SEQUENCE_SPEC \\\n-  \"%{static:--start-group} %G %L %{static:--end-group}%{!static:%G}\"\n-\n-/* Use --as-needed -lgcc_s for eh support.  */\n-#ifdef HAVE_LD_AS_NEEDED\n-#define USE_LD_AS_NEEDED 1\n-#endif\n-\n #define MD_UNWIND_SUPPORT \"config/sparc/linux-unwind.h\"\n \n /* Linux currently uses RMO in uniprocessor mode, which is equivalent to"}, {"sha": "0391ec86b7de77c7e8245697698f722b4f2e830c", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f7ca34bf522bcfaac6978ffa31e75158995c468/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f7ca34bf522bcfaac6978ffa31e75158995c468/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=5f7ca34bf522bcfaac6978ffa31e75158995c468", "patch": "@@ -1201,7 +1201,8 @@ powerpc-linux for powerpc64-linux, only generates 32-bit code.  This\n option enables the 32-bit target to be a bi-arch compiler, which is\n useful when you want a bi-arch compiler that defaults to 32-bit, and\n you are building a bi-arch or multi-arch binutils in a combined tree.\n-Currently, this option only affects powerpc-linux and x86-linux.\n+Currently, this option only affects sparc-linux, powerpc-linux and\n+x86-linux.\n \n @item --enable-secureplt\n This option enables @option{-msecure-plt} by default for powerpc-linux."}, {"sha": "6f5877221491e012eb37928bd1cf93ab97889f51", "filename": "libcpp/configure", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f7ca34bf522bcfaac6978ffa31e75158995c468/libcpp%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f7ca34bf522bcfaac6978ffa31e75158995c468/libcpp%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fconfigure?ref=5f7ca34bf522bcfaac6978ffa31e75158995c468", "patch": "@@ -8329,9 +8329,7 @@ case $target in\n \tpowerpc*-*-* | \\\n \trs6000*-*-* | \\\n \ts390*-*-* | \\\n-\tsparc64*-*-* | ultrasparc-*-freebsd* | \\\n-\tsparcv9-*-solaris2* | \\\n-\tsparc-*-solaris2.[789] | sparc-*-solaris2.1[0-9]* | \\\n+\tsparc*-*-* | \\\n \tspu-*-* | \\\n \tsh[123456789lbe]*-*-* | sh-*-*)\n \t\tneed_64bit_hwint=yes ;;"}, {"sha": "88136743dad442a5f13ded24b4fb87777a022771", "filename": "libcpp/configure.ac", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f7ca34bf522bcfaac6978ffa31e75158995c468/libcpp%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f7ca34bf522bcfaac6978ffa31e75158995c468/libcpp%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fconfigure.ac?ref=5f7ca34bf522bcfaac6978ffa31e75158995c468", "patch": "@@ -126,9 +126,7 @@ case $target in\n \tpowerpc*-*-* | \\\n \trs6000*-*-* | \\\n \ts390*-*-* | \\\n-\tsparc64*-*-* | ultrasparc-*-freebsd* | \\\n-\tsparcv9-*-solaris2* | \\\n-\tsparc-*-solaris2.[789] | sparc-*-solaris2.1[0-9]* | \\\n+\tsparc*-*-* | \\\n \tspu-*-* | \\\n \tsh[123456789lbe]*-*-* | sh-*-*)\n \t\tneed_64bit_hwint=yes ;;"}]}