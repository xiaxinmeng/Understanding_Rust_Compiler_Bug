{"sha": "785cf02f6855edf92cd70c657478fc1e73f01532", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzg1Y2YwMmY2ODU1ZWRmOTJjZDcwYzY1NzQ3OGZjMWU3M2YwMTUzMg==", "commit": {"author": {"name": "Matthew Wahab", "email": "matthew.wahab@arm.com", "date": "2016-09-23T10:48:47Z"}, "committer": {"name": "Matthew Wahab", "email": "mwahab@gcc.gnu.org", "date": "2016-09-23T10:48:47Z"}, "message": "[PATCH 15/17][ARM] Add tests for ARMv8.2-A FP16 support.\n\ntestsuite/\n2016-09-23  Matthew Wahab  <matthew.wahab@arm.com>\n\n\t* gcc.target/arm/armv8_2-fp16-neon-1.c: New.\n\t* gcc.target/arm/armv8_2-fp16-scalar-1.c: New.\n\t* gcc.target/arm/armv8_2-fp16-scalar-2.c: New.\n\t* gcc.target/arm/attr-fp16-arith-1.c: Add a test of intrinsics\n\tsupport.\n\nFrom-SVN: r240425", "tree": {"sha": "45d14c8c981eeb3258703c57cc7cd2fedf1bdccf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/45d14c8c981eeb3258703c57cc7cd2fedf1bdccf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/785cf02f6855edf92cd70c657478fc1e73f01532", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/785cf02f6855edf92cd70c657478fc1e73f01532", "html_url": "https://github.com/Rust-GCC/gccrs/commit/785cf02f6855edf92cd70c657478fc1e73f01532", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/785cf02f6855edf92cd70c657478fc1e73f01532/comments", "author": null, "committer": null, "parents": [{"sha": "de955a690b7b888c63ef9f97e8deceba8e9b0f82", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de955a690b7b888c63ef9f97e8deceba8e9b0f82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de955a690b7b888c63ef9f97e8deceba8e9b0f82"}], "stats": {"total": 785, "additions": 785, "deletions": 0}, "files": [{"sha": "2c3577019dc4d7d5042ee32a11c5a419e8f2ee80", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/785cf02f6855edf92cd70c657478fc1e73f01532/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/785cf02f6855edf92cd70c657478fc1e73f01532/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=785cf02f6855edf92cd70c657478fc1e73f01532", "patch": "@@ -1,3 +1,11 @@\n+2016-09-23  Matthew Wahab  <matthew.wahab@arm.com>\n+\n+\t* gcc.target/arm/armv8_2-fp16-neon-1.c: New.\n+\t* gcc.target/arm/armv8_2-fp16-scalar-1.c: New.\n+\t* gcc.target/arm/armv8_2-fp16-scalar-2.c: New.\n+\t* gcc.target/arm/attr-fp16-arith-1.c: Add a test of intrinsics\n+\tsupport.\n+\n 2016-09-23  Kugan Vivekanandarajah  <kuganv@linaro.org>\n \n \tPR ipa/77677"}, {"sha": "968efae9ebba48ccac3c995f6088a0248f54f9e7", "filename": "gcc/testsuite/gcc.target/arm/armv8_2-fp16-neon-1.c", "status": "added", "additions": 490, "deletions": 0, "changes": 490, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/785cf02f6855edf92cd70c657478fc1e73f01532/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Farmv8_2-fp16-neon-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/785cf02f6855edf92cd70c657478fc1e73f01532/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Farmv8_2-fp16-neon-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Farmv8_2-fp16-neon-1.c?ref=785cf02f6855edf92cd70c657478fc1e73f01532", "patch": "@@ -0,0 +1,490 @@\n+/* { dg-do compile }  */\n+/* { dg-require-effective-target arm_v8_2a_fp16_neon_ok }  */\n+/* { dg-options \"-O2\" }  */\n+/* { dg-add-options arm_v8_2a_fp16_neon }  */\n+\n+/* Test instructions generated for the FP16 vector intrinsics.  */\n+\n+#include <arm_neon.h>\n+\n+#define MSTRCAT(L, str)\tL##str\n+\n+#define UNOP_TEST(insn)\t\t\t\t\\\n+  float16x4_t\t\t\t\t\t\\\n+  MSTRCAT (test_##insn, _16x4) (float16x4_t a)\t\\\n+  {\t\t\t\t\t\t\\\n+    return MSTRCAT (insn, _f16) (a);\t\t\\\n+  }\t\t\t\t\t\t\\\n+  float16x8_t\t\t\t\t\t\\\n+  MSTRCAT (test_##insn, _16x8) (float16x8_t a)\t\\\n+  {\t\t\t\t\t\t\\\n+    return MSTRCAT (insn, q_f16) (a);\t\t\\\n+  }\n+\n+#define BINOP_TEST(insn)\t\t\t\t\t\\\n+  float16x4_t\t\t\t\t\t\t\t\\\n+  MSTRCAT (test_##insn, _16x4) (float16x4_t a, float16x4_t b)\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    return MSTRCAT (insn, _f16) (a, b);\t\t\t\t\\\n+  }\t\t\t\t\t\t\t\t\\\n+  float16x8_t\t\t\t\t\t\t\t\\\n+  MSTRCAT (test_##insn, _16x8) (float16x8_t a, float16x8_t b)\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    return MSTRCAT (insn, q_f16) (a, b);\t\t\t\\\n+  }\n+\n+#define BINOP_LANE_TEST(insn, I)\t\t\t\t\t\\\n+  float16x4_t\t\t\t\t\t\t\t\t\\\n+  MSTRCAT (test_##insn##_lane, _16x4) (float16x4_t a, float16x4_t b)\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    return MSTRCAT (insn, _lane_f16) (a, b, I);\t\t\t\t\\\n+  }\t\t\t\t\t\t\t\t\t\\\n+  float16x8_t\t\t\t\t\t\t\t\t\\\n+  MSTRCAT (test_##insn##_lane, _16x8) (float16x8_t a, float16x4_t b)\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    return MSTRCAT (insn, q_lane_f16) (a, b, I);\t\t\t\\\n+  }\n+\n+#define BINOP_LANEQ_TEST(insn, I)\t\t\t\t\t\\\n+  float16x4_t\t\t\t\t\t\t\t\t\\\n+  MSTRCAT (test_##insn##_laneq, _16x4) (float16x4_t a, float16x8_t b)\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    return MSTRCAT (insn, _laneq_f16) (a, b, I);\t\t\t\\\n+  }\t\t\t\t\t\t\t\t\t\\\n+  float16x8_t\t\t\t\t\t\t\t\t\\\n+  MSTRCAT (test_##insn##_laneq, _16x8) (float16x8_t a, float16x8_t b)\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    return MSTRCAT (insn, q_laneq_f16) (a, b, I);\t\t\t\\\n+  }\t\t\t\t\t\t\t\t\t\\\n+\n+#define BINOP_N_TEST(insn)\t\t\t\t\t\\\n+  float16x4_t\t\t\t\t\t\t\t\\\n+  MSTRCAT (test_##insn##_n, _16x4) (float16x4_t a, float16_t b)\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    return MSTRCAT (insn, _n_f16) (a, b);\t\t\t\\\n+  }\t\t\t\t\t\t\t\t\\\n+  float16x8_t\t\t\t\t\t\t\t\\\n+  MSTRCAT (test_##insn##_n, _16x8) (float16x8_t a, float16_t b)\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    return MSTRCAT (insn, q_n_f16) (a, b);\t\t\t\\\n+  }\n+\n+#define TERNOP_TEST(insn)\t\t\t\t\t\t\\\n+  float16_t\t\t\t\t\t\t\t\t\\\n+  MSTRCAT (test_##insn, _16) (float16_t a, float16_t b, float16_t c)\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    return MSTRCAT (insn, h_f16) (a, b, c);\t\t\t\t\\\n+  }\t\t\t\t\t\t\t\t\t\\\n+  float16x4_t\t\t\t\t\t\t\t\t\\\n+  MSTRCAT (test_##insn, _16x4) (float16x4_t a, float16x4_t b,\t\t\\\n+\t\t\t       float16x4_t c)\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    return MSTRCAT (insn, _f16) (a, b, c);\t\t\t\t\\\n+  }\t\t\t\t\t\t\t\t\t\\\n+  float16x8_t\t\t\t\t\t\t\t\t\\\n+  MSTRCAT (test_##insn, _16x8) (float16x8_t a, float16x8_t b,\t\t\\\n+\t\t\t       float16x8_t c)\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    return MSTRCAT (insn, q_f16) (a, b, c);\t\t\t\t\\\n+  }\n+\n+#define VCMP1_TEST(insn)\t\t\t\\\n+  uint16x4_t\t\t\t\t\t\\\n+  MSTRCAT (test_##insn, _16x4) (float16x4_t a)\t\\\n+  {\t\t\t\t\t\t\\\n+    return MSTRCAT (insn, _f16) (a);\t\t\\\n+  }\t\t\t\t\t\t\\\n+  uint16x8_t\t\t\t\t\t\\\n+  MSTRCAT (test_##insn, _16x8) (float16x8_t a)\t\\\n+  {\t\t\t\t\t\t\\\n+    return MSTRCAT (insn, q_f16) (a);\t\t\\\n+  }\n+\n+#define VCMP2_TEST(insn)\t\t\t\t\t\\\n+  uint16x4_t\t\t\t\t\t\t\t\\\n+  MSTRCAT (test_##insn, _16x4) (float16x4_t a, float16x4_t b)\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    return MSTRCAT (insn, _f16) (a, b);\t\t\t\t\\\n+  }\t\t\t\t\t\t\t\t\\\n+  uint16x8_t\t\t\t\t\t\t\t\\\n+  MSTRCAT (test_##insn, _16x8) (float16x8_t a, float16x8_t b)\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    return MSTRCAT (insn, q_f16) (a, b);\t\t\t\\\n+  }\n+\n+#define VCVT_TEST(insn, TY, TO, FR)\t\t\t\\\n+  MSTRCAT (TO, 16x4_t)\t\t\t\t\t\\\n+  MSTRCAT (test_##insn, TY) (MSTRCAT (FR, 16x4_t) a)\t\\\n+  {\t\t\t\t\t\t\t\\\n+    return MSTRCAT (insn, TY) (a);\t\t\t\\\n+  }\t\t\t\t\t\t\t\\\n+  MSTRCAT (TO, 16x8_t)\t\t\t\t\t\\\n+  MSTRCAT (test_##insn##_q, TY) (MSTRCAT (FR, 16x8_t) a)\t\\\n+  {\t\t\t\t\t\t\t\\\n+    return MSTRCAT (insn, q##TY) (a);\t\t\t\\\n+  }\n+\n+#define VCVT_N_TEST(insn, TY, TO, FR)\t\t\t\\\n+  MSTRCAT (TO, 16x4_t)\t\t\t\t\t\\\n+  MSTRCAT (test_##insn##_n, TY) (MSTRCAT (FR, 16x4_t) a)\t\\\n+  {\t\t\t\t\t\t\t\\\n+    return MSTRCAT (insn, _n##TY) (a, 1);\t\t\\\n+  }\t\t\t\t\t\t\t\\\n+  MSTRCAT (TO, 16x8_t)\t\t\t\t\t\\\n+  MSTRCAT (test_##insn##_n_q, TY) (MSTRCAT (FR, 16x8_t) a)\t\\\n+  {\t\t\t\t\t\t\t\\\n+    return MSTRCAT (insn, q_n##TY) (a, 1);\t\t\\\n+  }\n+\n+VCMP1_TEST (vceqz)\n+/* { dg-final { scan-assembler-times {vceq\\.f16\\td[0-9]+, d[0-0]+, #0} 1 } }  */\n+/* { dg-final { scan-assembler-times {vceq\\.f16\\tq[0-9]+, q[0-9]+, #0} 1 } }  */\n+\n+VCMP1_TEST (vcgtz)\n+/* { dg-final { scan-assembler-times {vcgt\\.f16\\td[0-9]+, d[0-9]+, #0} 1 } }  */\n+/* { dg-final { scan-assembler-times {vceq\\.f16\\tq[0-9]+, q[0-9]+, #0} 1 } }  */\n+\n+VCMP1_TEST (vcgez)\n+/* { dg-final { scan-assembler-times {vcge\\.f16\\td[0-9]+, d[0-9]+, #0} 1 } }  */\n+/* { dg-final { scan-assembler-times {vcge\\.f16\\tq[0-9]+, q[0-9]+, #0} 1 } }  */\n+\n+VCMP1_TEST (vcltz)\n+/* { dg-final { scan-assembler-times {vclt.f16\\td[0-9]+, d[0-9]+, #0} 1 } }  */\n+/* { dg-final { scan-assembler-times {vclt.f16\\tq[0-9]+, q[0-9]+, #0} 1 } }  */\n+\n+VCMP1_TEST (vclez)\n+/* { dg-final { scan-assembler-times {vcle\\.f16\\td[0-9]+, d[0-9]+, #0} 1 } }  */\n+/* { dg-final { scan-assembler-times {vcle\\.f16\\tq[0-9]+, q[0-9]+, #0} 1 } }  */\n+\n+VCVT_TEST (vcvt, _f16_s16, float, int)\n+VCVT_N_TEST (vcvt, _f16_s16, float, int)\n+/* { dg-final { scan-assembler-times {vcvt\\.f16\\.s16\\td[0-9]+, d[0-9]+} 2 } }\n+   { dg-final { scan-assembler-times {vcvt\\.f16\\.s16\\tq[0-9]+, q[0-9]+} 2 } }\n+   { dg-final { scan-assembler-times {vcvt\\.f16\\.s16\\td[0-9]+, d[0-9]+, #1} 1 } }\n+   { dg-final { scan-assembler-times {vcvt\\.f16\\.s16\\tq[0-9]+, q[0-9]+, #1} 1 } }  */\n+\n+VCVT_TEST (vcvt, _f16_u16, float, uint)\n+VCVT_N_TEST (vcvt, _f16_u16, float, uint)\n+/* { dg-final { scan-assembler-times {vcvt\\.f16\\.u16\\td[0-9]+, d[0-9]+} 2 } }\n+   { dg-final { scan-assembler-times {vcvt\\.f16\\.u16\\tq[0-9]+, q[0-9]+} 2 } }\n+   { dg-final { scan-assembler-times {vcvt\\.f16\\.u16\\td[0-9]+, d[0-9]+, #1} 1 } }\n+   { dg-final { scan-assembler-times {vcvt\\.f16\\.u16\\tq[0-9]+, q[0-9]+, #1} 1 } }  */\n+\n+VCVT_TEST (vcvt, _s16_f16, int, float)\n+VCVT_N_TEST (vcvt, _s16_f16, int, float)\n+/* { dg-final { scan-assembler-times {vcvt\\.s16\\.f16\\td[0-9]+, d[0-9]+} 2 } }\n+   { dg-final { scan-assembler-times {vcvt\\.s16\\.f16\\tq[0-9]+, q[0-9]+} 2 } }\n+   { dg-final { scan-assembler-times {vcvt\\.s16\\.f16\\td[0-9]+, d[0-9]+, #1} 1 } }\n+   { dg-final { scan-assembler-times {vcvt\\.s16\\.f16\\tq[0-9]+, q[0-9]+, #1} 1 } }  */\n+\n+VCVT_TEST (vcvt, _u16_f16, uint, float)\n+VCVT_N_TEST (vcvt, _u16_f16, uint, float)\n+/* { dg-final { scan-assembler-times {vcvt\\.u16\\.f16\\td[0-9]+, d[0-9]+} 2 } }\n+   { dg-final { scan-assembler-times {vcvt\\.u16\\.f16\\tq[0-9]+, q[0-9]+} 2 } }\n+   { dg-final { scan-assembler-times {vcvt\\.u16\\.f16\\td[0-9]+, d[0-9]+, #1} 1 } }\n+   { dg-final { scan-assembler-times {vcvt\\.u16\\.f16\\tq[0-9]+, q[0-9]+, #1} 1 } }  */\n+\n+VCVT_TEST (vcvta, _s16_f16, int, float)\n+/* { dg-final { scan-assembler-times {vcvta\\.s16\\.f16\\td[0-9]+, d[0-9]+} 1 } }\n+   { dg-final { scan-assembler-times {vcvta\\.s16\\.f16\\tq[0-9]+, q[0-9]+} 1 } }\n+*/\n+\n+VCVT_TEST (vcvta, _u16_f16, uint, float)\n+/* { dg-final { scan-assembler-times {vcvta\\.u16\\.f16\\td[0-9]+, d[0-9]+} 1 } }\n+   { dg-final { scan-assembler-times {vcvta\\.u16\\.f16\\tq[0-9]+, q[0-9]+} 1 } }\n+*/\n+\n+VCVT_TEST (vcvtm, _s16_f16, int, float)\n+/* { dg-final { scan-assembler-times {vcvtm\\.s16\\.f16\\td[0-9]+, d[0-9]+} 1 } }\n+   { dg-final { scan-assembler-times {vcvtm\\.s16\\.f16\\tq[0-9]+, q[0-9]+} 1 } }\n+*/\n+\n+VCVT_TEST (vcvtm, _u16_f16, uint, float)\n+/* { dg-final { scan-assembler-times {vcvtm\\.u16\\.f16\\td[0-9]+, d[0-9]+} 1 } }\n+   { dg-final { scan-assembler-times {vcvtm\\.u16\\.f16\\tq[0-9]+, q[0-9]+} 1 } }\n+*/\n+\n+VCVT_TEST (vcvtn, _s16_f16, int, float)\n+/* { dg-final { scan-assembler-times {vcvtn\\.s16\\.f16\\td[0-9]+, d[0-9]+} 1 } }\n+   { dg-final { scan-assembler-times {vcvtn\\.s16\\.f16\\tq[0-9]+, q[0-9]+} 1 } }\n+*/\n+\n+VCVT_TEST (vcvtn, _u16_f16, uint, float)\n+/* { dg-final { scan-assembler-times {vcvtn\\.u16\\.f16\\td[0-9]+, d[0-9]+} 1 } }\n+   { dg-final { scan-assembler-times {vcvtn\\.u16\\.f16\\tq[0-9]+, q[0-9]+} 1 } }\n+*/\n+\n+VCVT_TEST (vcvtp, _s16_f16, int, float)\n+/* { dg-final { scan-assembler-times {vcvtp\\.s16\\.f16\\td[0-9]+, d[0-9]+} 1 } }\n+   { dg-final { scan-assembler-times {vcvtp\\.s16\\.f16\\tq[0-9]+, q[0-9]+} 1 } }\n+*/\n+\n+VCVT_TEST (vcvtp, _u16_f16, uint, float)\n+/* { dg-final { scan-assembler-times {vcvtp\\.u16\\.f16\\td[0-9]+, d[0-9]+} 1 } }\n+   { dg-final { scan-assembler-times {vcvtp\\.u16\\.f16\\tq[0-9]+, q[0-9]+} 1 } }\n+*/\n+\n+UNOP_TEST (vabs)\n+/* { dg-final { scan-assembler-times {vabs\\.f16\\td[0-9]+, d[0-9]+} 1 } }\n+   { dg-final { scan-assembler-times {vabs\\.f16\\tq[0-9]+, q[0-9]+} 1 } }  */\n+\n+UNOP_TEST (vneg)\n+/* { dg-final { scan-assembler-times {vneg\\.f16\\td[0-9]+, d[0-9]+} 1 } }\n+   { dg-final { scan-assembler-times {vneg\\.f16\\tq[0-9]+, q[0-9]+} 1 } }  */\n+\n+UNOP_TEST (vrecpe)\n+/* { dg-final { scan-assembler-times {vrecpe\\.f16\\td[0-9]+, d[0-9]+} 1 } }\n+   { dg-final { scan-assembler-times {vrecpe\\.f16\\tq[0-9]+, q[0-9]+} 1 } }  */\n+\n+UNOP_TEST (vrnd)\n+/* { dg-final { scan-assembler-times {vrintz\\.f16\\td[0-9]+, d[0-9]+} 1 } }\n+   { dg-final { scan-assembler-times {vrintz\\.f16\\tq[0-9]+, q[0-9]+} 1 } }  */\n+\n+UNOP_TEST (vrnda)\n+/* { dg-final { scan-assembler-times {vrinta\\.f16\\td[0-9]+, d[0-9]+} 1 } }\n+   { dg-final { scan-assembler-times {vrinta\\.f16\\tq[0-9]+, q[0-9]+} 1 } }  */\n+\n+UNOP_TEST (vrndm)\n+/* { dg-final { scan-assembler-times {vrintm\\.f16\\td[0-9]+, d[0-9]+} 1 } }\n+   { dg-final { scan-assembler-times {vrintm\\.f16\\tq[0-9]+, q[0-9]+} 1 } }  */\n+\n+UNOP_TEST (vrndn)\n+/* { dg-final { scan-assembler-times {vrintn\\.f16\\td[0-9]+, d[0-9]+} 1 } }\n+   { dg-final { scan-assembler-times {vrintn\\.f16\\tq[0-9]+, q[0-9]+} 1 } }  */\n+\n+UNOP_TEST (vrndp)\n+/* { dg-final { scan-assembler-times {vrintp\\.f16\\td[0-9]+, d[0-9]+} 1 } }\n+   { dg-final { scan-assembler-times {vrintp\\.f16\\tq[0-9]+, q[0-9]+} 1 } }  */\n+\n+UNOP_TEST (vrndx)\n+/* { dg-final { scan-assembler-times {vrintx\\.f16\\td[0-9]+, d[0-9]+} 1 } }\n+   { dg-final { scan-assembler-times {vrintx\\.f16\\tq[0-9]+, q[0-9]+} 1 } }  */\n+\n+UNOP_TEST (vrsqrte)\n+/* { dg-final { scan-assembler-times {vrsqrte\\.f16\\td[0-9]+, d[0-9]+} 1 } }\n+   { dg-final { scan-assembler-times {vrsqrte\\.f16\\tq[0-9]+, q[0-9]+} 1 } }  */\n+\n+BINOP_TEST (vadd)\n+/* { dg-final { scan-assembler-times {vadd\\.f16\\td[0-9]+, d[0-9]+, d[0-9]+} 1 } }\n+   { dg-final { scan-assembler-times {vadd\\.f16\\tq[0-9]+, q[0-9]+, q[0-9]+} 1 } }  */\n+\n+BINOP_TEST (vabd)\n+/* { dg-final { scan-assembler-times {vabd\\.f16\\td[0-9]+, d[0-9]+, d[0-9]+} 1 } }\n+   { dg-final { scan-assembler-times {vabd\\.f16\\tq[0-9]+, q[0-9]+, q[0-9]+} 1 } }  */\n+\n+VCMP2_TEST (vcage)\n+/* { dg-final { scan-assembler-times {vacge\\.f16\\td[0-9]+, d[0-9]+, d[0-9]+} 1 } }\n+   { dg-final { scan-assembler-times {vacge\\.f16\\tq[0-9]+, q[0-9]+, q[0-9]+} 1 } }  */\n+\n+VCMP2_TEST (vcagt)\n+/* { dg-final { scan-assembler-times {vacgt\\.f16\\td[0-9]+, d[0-9]+, d[0-9]+} 1 } }\n+   { dg-final { scan-assembler-times {vacgt\\.f16\\tq[0-9]+, q[0-9]+, q[0-9]+} 1 } }  */\n+\n+VCMP2_TEST (vcale)\n+/* { dg-final { scan-assembler-times {vacle\\.f16\\td[0-9]+, d[0-9]+, d[0-9]+} 1 } }\n+   { dg-final { scan-assembler-times {vacle\\.f16\\tq[0-9]+, q[0-9]+, q[0-9]+} 1 } }  */\n+\n+VCMP2_TEST (vcalt)\n+/* { dg-final { scan-assembler-times {vaclt\\.f16\\td[0-9]+, d[0-9]+, d[0-9]+} 1 } }\n+   { dg-final { scan-assembler-times {vaclt\\.f16\\tq[0-9]+, q[0-9]+, q[0-9]+} 1 } }  */\n+\n+VCMP2_TEST (vceq)\n+/* { dg-final { scan-assembler-times {vceq\\.f16\\td[0-9]+, d[0-9]+, d[0-9]+} 1 } }\n+   { dg-final { scan-assembler-times {vceq\\.f16\\tq[0-9]+, q[0-9]+, q[0-9]+} 1 } }  */\n+\n+VCMP2_TEST (vcge)\n+/* { dg-final { scan-assembler-times {vcge\\.f16\\td[0-9]+, d[0-9]+, d[0-9]+} 1 } }\n+   { dg-final { scan-assembler-times {vcge\\.f16\\tq[0-9]+, q[0-9]+, q[0-9]+} 1 } }  */\n+\n+VCMP2_TEST (vcgt)\n+/* { dg-final { scan-assembler-times {vcgt\\.f16\\td[0-9]+, d[0-9]+, d[0-9]+} 1 } }\n+   { dg-final { scan-assembler-times {vcgt\\.f16\\tq[0-9]+, q[0-9]+, q[0-9]+} 1 } }  */\n+\n+VCMP2_TEST (vcle)\n+/* { dg-final { scan-assembler-times {vcle\\.f16\\td[0-9]+, d[0-9]+, d[0-9]+} 1 } }\n+   { dg-final { scan-assembler-times {vcle\\.f16\\tq[0-9]+, q[0-9]+, q[0-9]+} 1 } }  */\n+\n+VCMP2_TEST (vclt)\n+/* { dg-final { scan-assembler-times {vclt\\.f16\\td[0-9]+, d[0-9]+, d[0-9]+} 1 } }\n+   { dg-final { scan-assembler-times {vclt\\.f16\\tq[0-9]+, q[0-9]+, q[0-9]+} 1 } }  */\n+\n+BINOP_TEST (vmax)\n+/* { dg-final { scan-assembler-times {vmax\\.f16\\td[0-9]+, d[0-9]+, d[0-9]+} 1 } }\n+   { dg-final { scan-assembler-times {vmax\\.f16\\tq[0-9]+, q[0-9]+, q[0-9]+} 1 } }  */\n+\n+BINOP_TEST (vmin)\n+/* { dg-final { scan-assembler-times {vmin\\.f16\\td[0-9]+, d[0-9]+, d[0-9]+} 1 } }\n+   { dg-final { scan-assembler-times {vmin\\.f16\\tq[0-9]+, q[0-9]+, q[0-9]+} 1 } }  */\n+\n+BINOP_TEST (vmaxnm)\n+/* { dg-final { scan-assembler-times {vmaxnm\\.f16\\td[0-9]+, d[0-9]+, d[0-9]+} 1 } }\n+  { dg-final { scan-assembler-times {vmaxnm\\.f16\\tq[0-9]+, q[0-9]+, q[0-9]+} 1 } }  */\n+\n+BINOP_TEST (vminnm)\n+/* { dg-final { scan-assembler-times {vminnm\\.f16\\td[0-9]+, d[0-9]+, d[0-9]+} 1 } }\n+  { dg-final { scan-assembler-times {vminnm\\.f16\\tq[0-9]+, q[0-9]+, q[0-9]+} 1 } }  */\n+\n+BINOP_TEST (vmul)\n+/* { dg-final { scan-assembler-times {vmul\\.f16\\td[0-9]+, d[0-9]+, d[0-9]+} 3 } }\n+   { dg-final { scan-assembler-times {vmul\\.f16\\tq[0-9]+, q[0-9]+, q[0-9]+} 1 } }  */\n+BINOP_LANE_TEST (vmul, 2)\n+/* { dg-final { scan-assembler-times {vmul\\.f16\\td[0-9]+, d[0-9]+, d[0-9]+\\[2\\]} 1 } }\n+   { dg-final { scan-assembler-times {vmul\\.f16\\tq[0-9]+, q[0-9]+, d[0-9]+\\[2\\]} 1 } }  */\n+BINOP_N_TEST (vmul)\n+/* { dg-final { scan-assembler-times {vmul\\.f16\\td[0-9]+, d[0-9]+, d[0-9]+\\[0\\]} 1 } }\n+   { dg-final { scan-assembler-times {vmul\\.f16\\tq[0-9]+, q[0-9]+, d[0-9]+\\[0\\]} 1 } }*/\n+\n+float16x4_t\n+test_vpadd_16x4 (float16x4_t a, float16x4_t b)\n+{\n+  return vpadd_f16 (a, b);\n+}\n+/* { dg-final { scan-assembler-times {vpadd\\.f16\\td[0-9]+, d[0-9]+, d[0-9]+} 1 } } */\n+\n+float16x4_t\n+test_vpmax_16x4 (float16x4_t a, float16x4_t b)\n+{\n+  return vpmax_f16 (a, b);\n+}\n+/* { dg-final { scan-assembler-times {vpmax\\.f16\\td[0-9]+, d[0-9]+, d[0-9]+} 1 } } */\n+\n+float16x4_t\n+test_vpmin_16x4 (float16x4_t a, float16x4_t b)\n+{\n+  return vpmin_f16 (a, b);\n+}\n+/* { dg-final { scan-assembler-times {vpmin\\.f16\\td[0-9]+, d[0-9]+, d[0-9]+} 1 } } */\n+\n+BINOP_TEST (vsub)\n+/* { dg-final { scan-assembler-times {vsub\\.f16\\td[0-9]+, d[0-9]+, d[0-9]+} 1 } }\n+   { dg-final { scan-assembler-times {vsub\\.f16\\tq[0-9]+, q[0-9]+, q[0-9]+} 1 } }  */\n+\n+BINOP_TEST (vrecps)\n+/* { dg-final { scan-assembler-times {vrecps\\.f16\\td[0-9]+, d[0-9]+, d[0-9]+} 1 } }\n+  { dg-final { scan-assembler-times {vrecps\\.f16\\tq[0-9]+, q[0-9]+, q[0-9]+} 1 } }  */\n+\n+BINOP_TEST (vrsqrts)\n+/* { dg-final { scan-assembler-times {vrsqrts\\.f16\\td[0-9]+, d[0-9]+, d[0-9]+} 1 } }\n+  { dg-final { scan-assembler-times {vrsqrts\\.f16\\tq[0-9]+, q[0-9]+, q[0-9]+} 1 } }  */\n+\n+TERNOP_TEST (vfma)\n+/* { dg-final { scan-assembler-times {vfma\\.f16\\td[0-9]+, d[0-9]+, d[0-9]+} 1 } }\n+  { dg-final { scan-assembler-times {vfma\\.f16\\tq[0-9]+, q[0-9]+, q[0-9]+} 1 } }  */\n+\n+TERNOP_TEST (vfms)\n+/* { dg-final { scan-assembler-times {vfms\\.f16\\td[0-9]+, d[0-9]+, d[0-9]+} 1 } }\n+  { dg-final { scan-assembler-times {vfms\\.f16\\tq[0-9]+, q[0-9]+, q[0-9]+} 1 } }  */\n+\n+float16x4_t\n+test_vmov_n_f16 (float16_t a)\n+{\n+  return vmov_n_f16 (a);\n+}\n+\n+float16x4_t\n+test_vdup_n_f16 (float16_t a)\n+{\n+  return vdup_n_f16 (a);\n+}\n+/* { dg-final { scan-assembler-times {vdup\\.16\\td[0-9]+, r[0-9]+} 2 } }  */\n+\n+float16x8_t\n+test_vmovq_n_f16 (float16_t a)\n+{\n+  return vmovq_n_f16 (a);\n+}\n+\n+float16x8_t\n+test_vdupq_n_f16 (float16_t a)\n+{\n+  return vdupq_n_f16 (a);\n+}\n+/* { dg-final { scan-assembler-times {vdup\\.16\\tq[0-9]+, r[0-9]+} 2 } }  */\n+\n+float16x4_t\n+test_vdup_lane_f16 (float16x4_t a)\n+{\n+  return vdup_lane_f16 (a, 1);\n+}\n+/* { dg-final { scan-assembler-times {vdup\\.16\\td[0-9]+, d[0-9]+\\[1\\]} 1 } }  */\n+\n+float16x8_t\n+test_vdupq_lane_f16 (float16x4_t a)\n+{\n+  return vdupq_lane_f16 (a, 1);\n+}\n+/* { dg-final { scan-assembler-times {vdup\\.16\\tq[0-9]+, d[0-9]+\\[1\\]} 1 } }  */\n+\n+float16x4_t\n+test_vext_f16 (float16x4_t a, float16x4_t b)\n+{\n+  return vext_f16 (a, b, 1);\n+}\n+/* { dg-final { scan-assembler-times {vext\\.16\\td[0-9]+, d[0-9]+, d[0-9]+, #1} 1 } } */\n+\n+float16x8_t\n+test_vextq_f16 (float16x8_t a, float16x8_t b)\n+{\n+  return vextq_f16 (a, b, 1);\n+}\n+/*   { dg-final { scan-assembler-times {vext\\.16\\tq[0-9]+, q[0-9]+, q[0-9]+, #1} 1 } }  */\n+\n+UNOP_TEST (vrev64)\n+/* { dg-final { scan-assembler-times {vrev64\\.16\\td[0-9]+, d[0-9]+} 1 } }\n+   { dg-final { scan-assembler-times {vrev64\\.16\\tq[0-9]+, q[0-9]+} 1 } }  */\n+\n+float16x4_t\n+test_vbsl16x4 (uint16x4_t a, float16x4_t b, float16x4_t c)\n+{\n+  return vbsl_f16 (a, b, c);\n+}\n+/* { dg-final { scan-assembler-times {vbsl\\td[0-9]+, d[0-9]+, d[0-9]+} 1 } }  */\n+\n+float16x8_t\n+test_vbslq16x8 (uint16x8_t a, float16x8_t b, float16x8_t c)\n+{\n+  return vbslq_f16 (a, b, c);\n+}\n+/*{ dg-final { scan-assembler-times {vbsl\\tq[0-9]+, q[0-9]+, q[0-9]+} 1 } }  */\n+\n+float16x4x2_t\n+test_vzip16x4 (float16x4_t a, float16x4_t b)\n+{\n+  return vzip_f16 (a, b);\n+}\n+/* { dg-final { scan-assembler-times {vzip\\.16\\td[0-9]+, d[0-9]+} 1 } }  */\n+\n+float16x8x2_t\n+test_vzipq16x8 (float16x8_t a, float16x8_t b)\n+{\n+  return vzipq_f16 (a, b);\n+}\n+/*{ dg-final { scan-assembler-times {vzip\\.16\\tq[0-9]+, q[0-9]+} 1 } }  */\n+\n+float16x4x2_t\n+test_vuzp16x4 (float16x4_t a, float16x4_t b)\n+{\n+  return vuzp_f16 (a, b);\n+}\n+/* { dg-final { scan-assembler-times {vuzp\\.16\\td[0-9]+, d[0-9]+} 1 } }  */\n+\n+float16x8x2_t\n+test_vuzpq16x8 (float16x8_t a, float16x8_t b)\n+{\n+  return vuzpq_f16 (a, b);\n+}\n+/*{ dg-final { scan-assembler-times {vuzp\\.16\\tq[0-9]+, q[0-9]+} 1 } }  */\n+\n+float16x4x2_t\n+test_vtrn16x4 (float16x4_t a, float16x4_t b)\n+{\n+  return vtrn_f16 (a, b);\n+}\n+/* { dg-final { scan-assembler-times {vtrn\\.16\\td[0-9]+, d[0-9]+} 1 } }  */\n+\n+float16x8x2_t\n+test_vtrnq16x8 (float16x8_t a, float16x8_t b)\n+{\n+  return vtrnq_f16 (a, b);\n+}\n+/*{ dg-final { scan-assembler-times {vtrn\\.16\\tq[0-9]+, q[0-9]+} 1 } }  */"}, {"sha": "2eddb76f7f42d30e18eddcbb8f804e141ef96b00", "filename": "gcc/testsuite/gcc.target/arm/armv8_2-fp16-scalar-1.c", "status": "added", "additions": 203, "deletions": 0, "changes": 203, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/785cf02f6855edf92cd70c657478fc1e73f01532/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Farmv8_2-fp16-scalar-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/785cf02f6855edf92cd70c657478fc1e73f01532/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Farmv8_2-fp16-scalar-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Farmv8_2-fp16-scalar-1.c?ref=785cf02f6855edf92cd70c657478fc1e73f01532", "patch": "@@ -0,0 +1,203 @@\n+/* { dg-do compile }  */\n+/* { dg-require-effective-target arm_v8_2a_fp16_scalar_ok }  */\n+/* { dg-options \"-O2\" }  */\n+/* { dg-add-options arm_v8_2a_fp16_scalar }  */\n+\n+/* Test instructions generated for the FP16 scalar intrinsics.  */\n+#include <arm_fp16.h>\n+\n+#define MSTRCAT(L, str)\tL##str\n+\n+#define UNOP_TEST(insn)\t\t\t\t\\\n+  float16_t\t\t\t\t\t\\\n+  MSTRCAT (test_##insn, 16) (float16_t a)\t\\\n+  {\t\t\t\t\t\t\\\n+    return MSTRCAT (insn, h_f16) (a);\t\t\\\n+  }\n+\n+#define BINOP_TEST(insn)\t\t\t\t\\\n+  float16_t\t\t\t\t\t\t\\\n+  MSTRCAT (test_##insn, 16) (float16_t a, float16_t b)\t\\\n+  {\t\t\t\t\t\t\t\\\n+    return MSTRCAT (insn, h_f16) (a, b);\t\t\\\n+  }\n+\n+#define TERNOP_TEST(insn)\t\t\t\t\t\t\\\n+  float16_t\t\t\t\t\t\t\t\t\\\n+  MSTRCAT (test_##insn, 16) (float16_t a, float16_t b, float16_t c)\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    return MSTRCAT (insn, h_f16) (a, b, c);\t\t\t\t\\\n+  }\n+\n+float16_t\n+test_vcvth_f16_s32 (int32_t a)\n+{\n+  return vcvth_f16_s32 (a);\n+}\n+\n+float16_t\n+test_vcvth_n_f16_s32 (int32_t a)\n+{\n+  return vcvth_n_f16_s32 (a, 1);\n+}\n+/* { dg-final { scan-assembler-times {vcvt\\.f16\\.s32\\ts[0-9]+, s[0-9]+} 2 } }  */\n+/* { dg-final { scan-assembler-times {vcvt\\.f16\\.s32\\ts[0-9]+, s[0-9]+, #1} 1 } }  */\n+\n+float16_t\n+test_vcvth_f16_u32 (uint32_t a)\n+{\n+  return vcvth_f16_u32 (a);\n+}\n+\n+float16_t\n+test_vcvth_n_f16_u32 (uint32_t a)\n+{\n+  return vcvth_n_f16_u32 (a, 1);\n+}\n+\n+/* { dg-final { scan-assembler-times {vcvt\\.f16\\.u32\\ts[0-9]+, s[0-9]+} 2 } }  */\n+/* { dg-final { scan-assembler-times {vcvt\\.f16\\.u32\\ts[0-9]+, s[0-9]+, #1} 1 } }  */\n+\n+uint32_t\n+test_vcvth_u32_f16 (float16_t a)\n+{\n+  return vcvth_u32_f16 (a);\n+}\n+/* { dg-final { scan-assembler-times {vcvt\\.u32\\.f16\\ts[0-9]+, s[0-9]+} 2 } }  */\n+\n+uint32_t\n+test_vcvth_n_u32_f16 (float16_t a)\n+{\n+  return vcvth_n_u32_f16 (a, 1);\n+}\n+/* { dg-final { scan-assembler-times {vcvt\\.u32\\.f16\\ts[0-9]+, s[0-9]+, #1} 1 } }  */\n+\n+int32_t\n+test_vcvth_s32_f16 (float16_t a)\n+{\n+  return vcvth_s32_f16 (a);\n+}\n+\n+int32_t\n+test_vcvth_n_s32_f16 (float16_t a)\n+{\n+  return vcvth_n_s32_f16 (a, 1);\n+}\n+\n+/* { dg-final { scan-assembler-times {vcvt\\.s32\\.f16\\ts[0-9]+, s[0-9]+} 2 } }  */\n+/* { dg-final { scan-assembler-times {vcvt\\.s32\\.f16\\ts[0-9]+, s[0-9]+, #1} 1 } }  */\n+\n+int32_t\n+test_vcvtah_s32_f16 (float16_t a)\n+{\n+  return vcvtah_s32_f16 (a);\n+}\n+/* { dg-final { scan-assembler-times {vcvta\\.s32\\.f16\\ts[0-9]+, s[0-9]+} 1 } }  */\n+\n+uint32_t\n+test_vcvtah_u32_f16 (float16_t a)\n+{\n+  return vcvtah_u32_f16 (a);\n+}\n+/* { dg-final { scan-assembler-times {vcvta\\.u32\\.f16\\ts[0-9]+, s[0-9]+} 1 } }  */\n+\n+int32_t\n+test_vcvtmh_s32_f16 (float16_t a)\n+{\n+  return vcvtmh_s32_f16 (a);\n+}\n+/* { dg-final { scan-assembler-times {vcvtm\\.s32\\.f16\\ts[0-9]+, s[0-9]+} 1 } }  */\n+\n+uint32_t\n+test_vcvtmh_u32_f16 (float16_t a)\n+{\n+  return vcvtmh_u32_f16 (a);\n+}\n+/* { dg-final { scan-assembler-times {vcvtm\\.u32\\.f16\\ts[0-9]+, s[0-9]+} 1 } }\n+ */\n+\n+int32_t\n+test_vcvtnh_s32_f16 (float16_t a)\n+{\n+  return vcvtnh_s32_f16 (a);\n+}\n+/* { dg-final { scan-assembler-times {vcvtn\\.s32\\.f16\\ts[0-9]+, s[0-9]+} 1 } }\n+ */\n+\n+uint32_t\n+test_vcvtnh_u32_f16 (float16_t a)\n+{\n+  return vcvtnh_u32_f16 (a);\n+}\n+/* { dg-final { scan-assembler-times {vcvtn\\.u32\\.f16\\ts[0-9]+, s[0-9]+} 1 } }\n+ */\n+\n+int32_t\n+test_vcvtph_s32_f16 (float16_t a)\n+{\n+  return vcvtph_s32_f16 (a);\n+}\n+/* { dg-final { scan-assembler-times {vcvtp\\.s32\\.f16\\ts[0-9]+, s[0-9]+} 1 } }\n+ */\n+\n+uint32_t\n+test_vcvtph_u32_f16 (float16_t a)\n+{\n+  return vcvtph_u32_f16 (a);\n+}\n+/* { dg-final { scan-assembler-times {vcvtp\\.u32\\.f16\\ts[0-9]+, s[0-9]+} 1 } }\n+ */\n+\n+UNOP_TEST (vabs)\n+/* { dg-final { scan-assembler-times {vabs\\.f16\\ts[0-9]+, s[0-9]+} 1 } }  */\n+\n+UNOP_TEST (vneg)\n+/* { dg-final { scan-assembler-times {vneg\\.f16\\ts[0-9]+, s[0-9]+} 1 } }  */\n+\n+UNOP_TEST (vrnd)\n+/* { dg-final { scan-assembler-times {vrintz\\.f16\\ts[0-9]+, s[0-9]+} 1 } }  */\n+\n+UNOP_TEST (vrndi)\n+/* { dg-final { scan-assembler-times {vrintr\\.f16\\ts[0-9]+, s[0-9]+} 1 } }  */\n+\n+UNOP_TEST (vrnda)\n+/* { dg-final { scan-assembler-times {vrinta\\.f16\\ts[0-9]+, s[0-9]+} 1 } }  */\n+\n+UNOP_TEST (vrndm)\n+/* { dg-final { scan-assembler-times {vrinta\\.f16\\ts[0-9]+, s[0-9]+} 1 } }  */\n+\n+UNOP_TEST (vrndn)\n+/* { dg-final { scan-assembler-times {vrinta\\.f16\\ts[0-9]+, s[0-9]+} 1 } }  */\n+\n+UNOP_TEST (vrndp)\n+/* { dg-final { scan-assembler-times {vrinta\\.f16\\ts[0-9]+, s[0-9]+} 1 } }  */\n+\n+UNOP_TEST (vrndx)\n+/* { dg-final { scan-assembler-times {vrinta\\.f16\\ts[0-9]+, s[0-9]+} 1 } }  */\n+\n+UNOP_TEST (vsqrt)\n+/* { dg-final { scan-assembler-times {vsqrt\\.f16\\ts[0-9]+, s[0-9]+} 1 } }  */\n+\n+BINOP_TEST (vadd)\n+/* { dg-final { scan-assembler-times {vadd\\.f16\\ts[0-9]+, s[0-9]+, s[0-9]+} 1 } }  */\n+\n+BINOP_TEST (vdiv)\n+/* { dg-final { scan-assembler-times {vdiv\\.f16\\ts[0-9]+, s[0-9]+, s[0-9]+} 1 } }  */\n+\n+BINOP_TEST (vmaxnm)\n+/* { dg-final { scan-assembler-times {vmaxnm\\.f16\\ts[0-9]+, s[0-9]+, s[0-9]+} 1 } }  */\n+\n+BINOP_TEST (vminnm)\n+/* { dg-final { scan-assembler-times {vminnm\\.f16\\ts[0-9]+, s[0-9]+, s[0-9]+} 1 } }  */\n+\n+BINOP_TEST (vmul)\n+/* { dg-final { scan-assembler-times {vmul\\.f16\\ts[0-9]+, s[0-9]+, s[0-9]+} 1 } }  */\n+\n+BINOP_TEST (vsub)\n+/* { dg-final { scan-assembler-times {vsub\\.f16\\ts[0-9]+, s[0-9]+, s[0-9]+} 1 } }  */\n+\n+TERNOP_TEST (vfma)\n+/* { dg-final { scan-assembler-times {vfma\\.f16\\ts[0-9]+, s[0-9]+, s[0-9]+} 1 } }  */\n+\n+TERNOP_TEST (vfms)\n+/* { dg-final { scan-assembler-times {vfms\\.f16\\ts[0-9]+, s[0-9]+, s[0-9]+} 1 } }  */"}, {"sha": "fa4828df064bd0b03780193521343dd56923d9c4", "filename": "gcc/testsuite/gcc.target/arm/armv8_2-fp16-scalar-2.c", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/785cf02f6855edf92cd70c657478fc1e73f01532/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Farmv8_2-fp16-scalar-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/785cf02f6855edf92cd70c657478fc1e73f01532/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Farmv8_2-fp16-scalar-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Farmv8_2-fp16-scalar-2.c?ref=785cf02f6855edf92cd70c657478fc1e73f01532", "patch": "@@ -0,0 +1,71 @@\n+/* { dg-do compile }  */\n+/* { dg-require-effective-target arm_v8_2a_fp16_scalar_ok }  */\n+/* { dg-options \"-O2 -std=c11\" }  */\n+/* { dg-add-options arm_v8_2a_fp16_scalar }  */\n+\n+/* Test compiler use of FP16 instructions.  */\n+#include <arm_fp16.h>\n+\n+float16_t\n+test_mov_imm_1 (float16_t a)\n+{\n+  return 1.0;\n+}\n+\n+float16_t\n+test_mov_imm_2 (float16_t a)\n+{\n+  float16_t b = 1.0;\n+  return b;\n+}\n+\n+float16_t\n+test_vmov_imm_3 (float16_t a)\n+{\n+  float16_t b = 1.0;\n+  return vaddh_f16 (a, b);\n+}\n+\n+float16_t\n+test_vmov_imm_4 (float16_t a)\n+{\n+  return vaddh_f16 (a, 1.0);\n+}\n+\n+/* { dg-final { scan-assembler-times {vmov.f16\\ts[0-9]+, #1\\.0e\\+0} 4 } }\n+   { dg-final { scan-assembler-times {vadd.f16\\ts[0-9]+, s[0-9]+, s[0-9]+} 2 } } */\n+\n+float16_t\n+test_vmla_1 (float16_t a, float16_t b, float16_t c)\n+{\n+  return vaddh_f16 (vmulh_f16 (a, b), c);\n+}\n+/* { dg-final { scan-assembler-times {vmla\\.f16\\ts[0-9]+, s[0-9]+, s[0-9]+} 1 } }  */\n+\n+float16_t\n+test_vmla_2 (float16_t a, float16_t b, float16_t c)\n+{\n+  return vsubh_f16 (vmulh_f16 (vnegh_f16 (a), b), c);\n+}\n+/* { dg-final { scan-assembler-times {vnmla\\.f16\\ts[0-9]+, s[0-9]+, s[0-9]+} 1 } } */\n+\n+float16_t\n+test_vmls_1 (float16_t a, float16_t b, float16_t c)\n+{\n+  return vsubh_f16 (c, vmulh_f16 (a, b));\n+}\n+\n+float16_t\n+test_vmls_2 (float16_t a, float16_t b, float16_t c)\n+{\n+  return vsubh_f16 (a, vmulh_f16 (b, c));\n+}\n+/* { dg-final { scan-assembler-times {vmls\\.f16} 2 } } */\n+\n+float16_t\n+test_vnmls_1 (float16_t a, float16_t b, float16_t c)\n+{\n+  return vsubh_f16 (vmulh_f16 (a, b), c);\n+}\n+/* { dg-final { scan-assembler-times {vnmls\\.f16\\ts[0-9]+, s[0-9]+, s[0-9]+} 1 } } */\n+"}, {"sha": "a93d30f85a61286dcaf4a66c1074b5795ef3f0c7", "filename": "gcc/testsuite/gcc.target/arm/attr-fp16-arith-1.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/785cf02f6855edf92cd70c657478fc1e73f01532/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fattr-fp16-arith-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/785cf02f6855edf92cd70c657478fc1e73f01532/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fattr-fp16-arith-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fattr-fp16-arith-1.c?ref=785cf02f6855edf92cd70c657478fc1e73f01532", "patch": "@@ -28,6 +28,19 @@\n #error Invalid value for __ARM_FP\n #endif\n \n+#include \"arm_neon.h\"\n+\n+float16_t\n+foo (float16x4_t b)\n+{\n+  float16x4_t a = {2.0, 3.0, 4.0, 5.0};\n+  float16x4_t res = vadd_f16 (a, b);\n+\n+  return res[0];\n+}\n+\n+/* { dg-final { scan-assembler \"vadd\\\\.f16\\td\\[0-9\\]+, d\\[0-9\\]+\" } } */\n+\n #pragma GCC pop_options\n \n /* Check that the FP version is correctly reset to mfpu=fp-armv8.  */"}]}