{"sha": "b83c4036106e89a5c12f75519bdfeb125d27cbb6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjgzYzQwMzYxMDZlODlhNWMxMmY3NTUxOWJkZmViMTI1ZDI3Y2JiNg==", "commit": {"author": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2004-02-09T14:00:36Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2004-02-09T14:00:36Z"}, "message": "fold-const.c (fold): Use the original type conversion tree code rather than call fold_convert...\n\n\n\t* fold-const.c (fold) <NOP_EXPR>: Use the original type conversion\n\ttree code rather than call fold_convert, which doesn't specify a\n\tdefault floating point to integer conversion.\n\n\t* gcc.c-torture/compile/20040209-1.c: New test case.\n\nFrom-SVN: r77535", "tree": {"sha": "6f4b5b4522317bca19876d7fc59f62216ff8267d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6f4b5b4522317bca19876d7fc59f62216ff8267d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b83c4036106e89a5c12f75519bdfeb125d27cbb6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b83c4036106e89a5c12f75519bdfeb125d27cbb6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b83c4036106e89a5c12f75519bdfeb125d27cbb6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b83c4036106e89a5c12f75519bdfeb125d27cbb6/comments", "author": null, "committer": null, "parents": [{"sha": "12001e0ff90b5a446e192e5c9672b98bb89ac866", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12001e0ff90b5a446e192e5c9672b98bb89ac866", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12001e0ff90b5a446e192e5c9672b98bb89ac866"}], "stats": {"total": 45, "additions": 33, "deletions": 12}, "files": [{"sha": "b6791b08f42beb2046bab06d5b6f3995c14bb95d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b83c4036106e89a5c12f75519bdfeb125d27cbb6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b83c4036106e89a5c12f75519bdfeb125d27cbb6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b83c4036106e89a5c12f75519bdfeb125d27cbb6", "patch": "@@ -1,12 +1,20 @@\n+2004-02-09  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* fold-const.c (fold) <NOP_EXPR>: Use the original type conversion\n+\ttree code rather than call fold_convert, which doesn't specify a\n+\tdefault floating point to integer conversion.\n+\n 2004-02-08  Bernardo Innocenti  <bernie@develer.com>\n \n \t* config/m68k/m68k.c, config/m68k/m68k.md (SGS, SGS_CMP_ORDER): Remove\n \tcode to support SGS assembler.  Reformat adjacent code where possible.\n-\t* config/m68k/m68k.c (switch_table_difference_label_flag): Remove definition.\n-\t* config/m68k/m68k.h (PRINT_OPERAND_PUNCT_VALID_P): Remove support for '%#'.\n+\t* config/m68k/m68k.c (switch_table_difference_label_flag): Remove\n+\tdefinition.\n+\t* config/m68k/m68k.h (PRINT_OPERAND_PUNCT_VALID_P): Remove support\n+\tfor '%#'.\n \t* config/m68k/linux.h, config/m68k/m68k.c,\n-\t* config/m68k/math-68881.h: Replace `%#' with `#' in inline asm macros and\n-\tasm_printf() format strings.\n+\t* config/m68k/math-68881.h: Replace `%#' with `#' in inline asm\n+\tmacros and asm_printf() format strings.\n \t* config/m68k/m68kelf.h (ASM_OUTPUT_CASE_END): Remove macro definition.\n \t* config/m68k/linux.h: Update copyright.\n \t* config/m68k/linux.h, config/m68k/m68k.c: Remove traling whitespace."}, {"sha": "3f68051da2d8a715f6ad61f0125cf413e4d7402b", "filename": "gcc/fold-const.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b83c4036106e89a5c12f75519bdfeb125d27cbb6/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b83c4036106e89a5c12f75519bdfeb125d27cbb6/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=b83c4036106e89a5c12f75519bdfeb125d27cbb6", "patch": "@@ -5641,8 +5641,8 @@ fold (tree expr)\n \t  if (TYPE_MAIN_VARIANT (inside_type) == TYPE_MAIN_VARIANT (final_type)\n \t      && ((inter_int && final_int) || (inter_float && final_float))\n \t      && inter_prec >= final_prec)\n-\t    return fold_convert (final_type,\n-\t\t\t\t TREE_OPERAND (TREE_OPERAND (t, 0), 0));\n+\t    return fold (build1 (code, final_type,\n+\t\t\t\t TREE_OPERAND (TREE_OPERAND (t, 0), 0)));\n \n \t  /* Likewise, if the intermediate and final types are either both\n \t     float or both integer, we don't need the middle conversion if\n@@ -5657,16 +5657,16 @@ fold (tree expr)\n \t      && ! (final_prec != GET_MODE_BITSIZE (TYPE_MODE (final_type))\n \t\t    && TYPE_MODE (final_type) == TYPE_MODE (inter_type))\n \t      && ! final_ptr)\n-\t    return fold_convert (final_type,\n-\t\t\t\t TREE_OPERAND (TREE_OPERAND (t, 0), 0));\n+\t    return fold (build1 (code, final_type,\n+\t\t\t\t TREE_OPERAND (TREE_OPERAND (t, 0), 0)));\n \n \t  /* If we have a sign-extension of a zero-extended value, we can\n \t     replace that by a single zero-extension.  */\n \t  if (inside_int && inter_int && final_int\n \t      && inside_prec < inter_prec && inter_prec < final_prec\n \t      && inside_unsignedp && !inter_unsignedp)\n-\t    return fold_convert (final_type,\n-\t\t\t\t TREE_OPERAND (TREE_OPERAND (t, 0), 0));\n+\t    return fold (build1 (code, final_type,\n+\t\t\t\t TREE_OPERAND (TREE_OPERAND (t, 0), 0)));\n \n \t  /* Two conversions in a row are not needed unless:\n \t     - some conversion is floating-point (overstrict for now), or\n@@ -5690,8 +5690,8 @@ fold (tree expr)\n \t      && ! (final_prec != GET_MODE_BITSIZE (TYPE_MODE (final_type))\n \t\t    && TYPE_MODE (final_type) == TYPE_MODE (inter_type))\n \t      && ! final_ptr)\n-\t    return fold_convert (final_type,\n-\t\t\t\t TREE_OPERAND (TREE_OPERAND (t, 0), 0));\n+\t    return fold (build1 (code, final_type,\n+\t\t\t\t TREE_OPERAND (TREE_OPERAND (t, 0), 0)));\n \t}\n \n       if (TREE_CODE (TREE_OPERAND (t, 0)) == MODIFY_EXPR"}, {"sha": "86296b2f0a1fb7375207de831b17525bf33a8b0e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b83c4036106e89a5c12f75519bdfeb125d27cbb6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b83c4036106e89a5c12f75519bdfeb125d27cbb6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b83c4036106e89a5c12f75519bdfeb125d27cbb6", "patch": "@@ -1,3 +1,7 @@\n+2004-02-09  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* gcc.c-torture/compile/20040209-1.c: New test case.\n+\n 2004-02-08  Joseph S. Myers  <jsm@polyomino.org.uk>\n \n \t* gcc.dg/c90-init-1.c: Adjust expected error messages."}, {"sha": "d256d58e34bea40c548853d2dacb34f315fa32e8", "filename": "gcc/testsuite/gcc.c-torture/compile/20040209-1.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b83c4036106e89a5c12f75519bdfeb125d27cbb6/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20040209-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b83c4036106e89a5c12f75519bdfeb125d27cbb6/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20040209-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20040209-1.c?ref=b83c4036106e89a5c12f75519bdfeb125d27cbb6", "patch": "@@ -0,0 +1,9 @@\n+/* The following code used to ICE in fold_convert.  */\n+\n+float ceilf(float);\n+\n+int foo(float x)\n+{\n+  return (double)ceilf(x);\n+}\n+"}]}