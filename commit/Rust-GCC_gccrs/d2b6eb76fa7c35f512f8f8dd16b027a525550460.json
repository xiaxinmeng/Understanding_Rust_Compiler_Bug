{"sha": "d2b6eb76fa7c35f512f8f8dd16b027a525550460", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDJiNmViNzZmYTdjMzVmNTEyZjhmOGRkMTZiMDI3YTUyNTU1MDQ2MA==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2003-12-12T02:23:03Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2003-12-12T02:23:03Z"}, "message": "arm.c (ARM_ADDRESS_COST, [...]): Convert macros to inline functions...\n\n\t* arm.c (ARM_ADDRESS_COST, THUMB_ADDRESS_COST): Convert macros\n\tto inline functions: arm_arm_address_cost, arm_thumb_address_cost\n\trespectively.\n\t(arm_address_cost): Use 'em.\n\nFrom-SVN: r74560", "tree": {"sha": "b29e5a38125660e31d9f4f926bb316c898713a73", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b29e5a38125660e31d9f4f926bb316c898713a73"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d2b6eb76fa7c35f512f8f8dd16b027a525550460", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2b6eb76fa7c35f512f8f8dd16b027a525550460", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2b6eb76fa7c35f512f8f8dd16b027a525550460", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2b6eb76fa7c35f512f8f8dd16b027a525550460/comments", "author": null, "committer": null, "parents": [{"sha": "15975b43148e152b057eece4d461b0fe0375c656", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15975b43148e152b057eece4d461b0fe0375c656", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15975b43148e152b057eece4d461b0fe0375c656"}], "stats": {"total": 105, "additions": 66, "deletions": 39}, "files": [{"sha": "08e75f5c90a3c228ae4fe483dd604b988655c258", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 16, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2b6eb76fa7c35f512f8f8dd16b027a525550460/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2b6eb76fa7c35f512f8f8dd16b027a525550460/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d2b6eb76fa7c35f512f8f8dd16b027a525550460", "patch": "@@ -1,3 +1,10 @@\n+2003-12-11  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* arm.c (ARM_ADDRESS_COST, THUMB_ADDRESS_COST): Convert macros\n+\tto inline functions: arm_arm_address_cost, arm_thumb_address_cost\n+\trespectively.\n+\t(arm_address_cost): Use 'em.\n+\n 2003-12-12  Rainer Orth  <ro@TechFak.Uni-Bielefeld.DE>\n \n \t* config/alpha/osf.h (TARGET_OS_CPP_BUILTINS): Define\n@@ -99,7 +106,7 @@\n \n \tPR c/13134\n \t* c-decl.c (duplicate_decls): Copy visibility flag when appropriate.\n-\t\n+\n 2003-12-09  Kazuhiro Inaoka <inaoka.kazuhiro@renesas.com>\n \n \t* config/m32r/m32r.h: Add support for m32r2 processor.  Including\n@@ -132,7 +139,7 @@\n 2003-12-08  Stuart Hastings  <stuart@apple.com>\n \n \t* config/i386/i386.md: Typo in split of fp-valued if_then_else.\n-\t\n+\n 2003-12-08  James E Wilson  <wilson@specifixinc.com>\n \n \tPR target/13132\n@@ -197,7 +204,7 @@\n 2003-12-08  Arnaud Charlet  <charlet@act-europe.fr>\n \n \tPR ada/13324, PR ada/12614\n-        * doc/install.texi: Update requirements for building Ada.\n+\t* doc/install.texi: Update requirements for building Ada.\n \n 2003-12-07  David Edelsohn  <edelsohn@gnu.org>\n \t    Graham Reed <greed@pobox.com>\n@@ -256,7 +263,7 @@\n \n 2003-12-06  Andrew Pinski  <pinskia@physics.uc.edu>\n \n-\t* config/rs6000/rs6000.c (macho_branch_islands): Use \n+\t* config/rs6000/rs6000.c (macho_branch_islands): Use\n \tHOST_WIDE_INT_PRINT_UNSIGNED.\n \n 2003-12-06  Richard Sandiford  <rsandifo@redhat.com>\n@@ -329,7 +336,7 @@\n \t* config/rs6000/rs6000.md: Correct macro test of TARGET_MACHO.\n \n 2003-12-05  Stuart Menefy <stuart.menefy@st.com>\n-            J\"orn Rennecke <joern.rennecke@superh.com>\n+\t    J\"orn Rennecke <joern.rennecke@superh.com>\n \n \tPR target/13302\n \t* sh.c (sh_build_builtin_va_list): Use (*lang_hooks.types.make_type).\n@@ -376,7 +383,7 @@\n \n 2003-12-05  Peter Gerwinski <peter@gerwinski.de>\n \n-        * tree.def (PLACEHOLDER_EXPR): Clarify commentary.\n+\t* tree.def (PLACEHOLDER_EXPR): Clarify commentary.\n \n 2003-12-05  Steven Bosscher  <stevenb@suse.de>\n \n@@ -419,14 +426,14 @@\n \n 2003-12-04  Stuart Hastings  <stuart@apple.com>\n \n-        * rs6000.c (output_call, macho_branch_islands,\n-        add_compiler_branch_island, no_previous_def, get_previous_label)\n-        Revisions of xx_stub functions for branch islands,\n-        add -fPIC support for Darwin.\n-        * rs6000-protos.h (output_call) Prototype.\n-        * rs6000.md Use output_call.\n-        * invoke.texi Explain Darwin semantics of -longcall.\n-        * testsuite/gcc.dg/darwin-abi-1.c Revise testcase for -longcall/jbsr.\n+\t* rs6000.c (output_call, macho_branch_islands,\n+\tadd_compiler_branch_island, no_previous_def, get_previous_label)\n+\tRevisions of xx_stub functions for branch islands,\n+\tadd -fPIC support for Darwin.\n+\t* rs6000-protos.h (output_call) Prototype.\n+\t* rs6000.md Use output_call.\n+\t* invoke.texi Explain Darwin semantics of -longcall.\n+\t* testsuite/gcc.dg/darwin-abi-1.c Revise testcase for -longcall/jbsr.\n \n 2003-12-04  Richard Henderson  <rth@redhat.com>\n \n@@ -533,8 +540,8 @@\n 2003-12-03  Eric Christopher  <echristo@redhat.com>\n \n \t* c-parse.in (c_in_iteration_stmt, c_in_case_stmt): Move\n-        from here...\n-        * c-tree.h: to here.\n+\tfrom here...\n+\t* c-tree.h: to here.\n \n 2003-12-03  Jan Hubicka  <jh@suse.cz>\n "}, {"sha": "3d991443c5df2ce8b5019f1b7843df3817128522", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 43, "deletions": 23, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2b6eb76fa7c35f512f8f8dd16b027a525550460/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2b6eb76fa7c35f512f8f8dd16b027a525550460/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=d2b6eb76fa7c35f512f8f8dd16b027a525550460", "patch": "@@ -3535,32 +3535,52 @@ arm_rtx_costs (rtx x, int code, int outer_code, int *total)\n    the same for practically all of them.  So we weight the different types\n    of address here in the order (most pref first):\n    PRE/POST_INC/DEC, SHIFT or NON-INT sum, INT sum, REG, MEM or LABEL. */\n+static inline int\n+arm_arm_address_cost (rtx x)\n+{\n+  enum rtx_code c  = GET_CODE (x);\n+\n+  if (c == PRE_INC || c == PRE_DEC || c == POST_INC || c == POST_DEC)\n+    return 0;\n+  if (c == MEM || c == LABEL_REF || c == SYMBOL_REF)\n+    return 10;\n+\n+  if (c == PLUS || c == MINUS)\n+    {\n+      char cl0 = GET_RTX_CLASS (GET_CODE (XEXP (x, 0)));\n+      char cl1 = GET_RTX_CLASS (GET_CODE (XEXP (x, 1)));\n+\n+      if (GET_CODE (XEXP (x, 0)) == CONST_INT)\n+\treturn 2;\n+\n+      if (cl0 == '2' || cl0 == 'c' || cl1 == '2' || cl1 == 'c')\n+\treturn 3;\n+\n+      return 4;\n+    }\n+\n+  return 6;\n+}\n+\n+static inline int\n+arm_thumb_address_cost (rtx x)\n+{\n+  enum rtx_code c  = GET_CODE (x);\n+\n+  if (c == REG)\n+    return 1;\n+  if (c == PLUS\n+      && GET_CODE (XEXP (x, 0)) == REG\n+      && GET_CODE (XEXP (x, 1)) == CONST_INT)\n+    return 1;\n+\n+  return 2;\n+}\n+\n static int\n arm_address_cost (rtx x)\n {\n-#define ARM_ADDRESS_COST(X)\t\t\t\t\t\t     \\\n-  (10 - ((GET_CODE (X) == MEM || GET_CODE (X) == LABEL_REF\t\t     \\\n-\t  || GET_CODE (X) == SYMBOL_REF)\t\t\t\t     \\\n-\t ? 0\t\t\t\t\t\t\t\t     \\\n-\t : ((GET_CODE (X) == PRE_INC || GET_CODE (X) == PRE_DEC\t\t     \\\n-\t     || GET_CODE (X) == POST_INC || GET_CODE (X) == POST_DEC)\t     \\\n-\t    ? 10\t\t\t\t\t\t\t     \\\n-\t    : (((GET_CODE (X) == PLUS || GET_CODE (X) == MINUS)\t\t     \\\n-\t\t? 6 + (GET_CODE (XEXP (X, 1)) == CONST_INT ? 2 \t\t     \\\n-\t\t       : ((GET_RTX_CLASS (GET_CODE (XEXP (X, 0))) == '2'     \\\n-\t\t\t   || GET_RTX_CLASS (GET_CODE (XEXP (X, 0))) == 'c'  \\\n-\t\t\t   || GET_RTX_CLASS (GET_CODE (XEXP (X, 1))) == '2'  \\\n-\t\t\t   || GET_RTX_CLASS (GET_CODE (XEXP (X, 1))) == 'c') \\\n-\t\t\t  ? 1 : 0))\t\t\t\t\t     \\\n-\t\t: 4)))))\n-\t \n-#define THUMB_ADDRESS_COST(X) \t\t\t\t\t\\\n-  ((GET_CODE (X) == REG \t\t\t\t\t\\\n-    || (GET_CODE (X) == PLUS && GET_CODE (XEXP (X, 0)) == REG\t\\\n-\t&& GET_CODE (XEXP (X, 1)) == CONST_INT))\t\t\\\n-   ? 1 : 2)\n-     \n-  return (TARGET_ARM ? ARM_ADDRESS_COST (x) : THUMB_ADDRESS_COST (x));\n+  return TARGET_ARM ? arm_arm_address_cost (x) : arm_thumb_address_cost (x);\n }\n \n static int"}]}