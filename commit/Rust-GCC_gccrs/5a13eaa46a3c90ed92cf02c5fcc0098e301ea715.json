{"sha": "5a13eaa46a3c90ed92cf02c5fcc0098e301ea715", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWExM2VhYTQ2YTNjOTBlZDkyY2YwMmM1ZmNjMDA5OGUzMDFlYTcxNQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-12-30T12:57:52Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-12-30T12:57:52Z"}, "message": "Include output.h.\n\nAdd prototyes for all static functions; remove forward declarations of\nnon-static functions.\n(assemble_variable): Add missing arg decl.\n(bc_make_decl_rtl, const_hash, const_hash_rtx): Now static.\n(output_addressed_constants, output_constructor): Likewise.\n(bc_output_constructor): Add missing argument.\n(output_byte_asm): Delete, unused.\n\nFrom-SVN: r8709", "tree": {"sha": "aff9461e6ed46c041f8c9d92aea33f93d18ed4c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aff9461e6ed46c041f8c9d92aea33f93d18ed4c7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5a13eaa46a3c90ed92cf02c5fcc0098e301ea715", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a13eaa46a3c90ed92cf02c5fcc0098e301ea715", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a13eaa46a3c90ed92cf02c5fcc0098e301ea715", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a13eaa46a3c90ed92cf02c5fcc0098e301ea715/comments", "author": null, "committer": null, "parents": [{"sha": "3668e76e9041960e4ab3c433d8d7c89c4d45bf35", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3668e76e9041960e4ab3c433d8d7c89c4d45bf35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3668e76e9041960e4ab3c433d8d7c89c4d45bf35"}], "stats": {"total": 94, "additions": 46, "deletions": 48}, "files": [{"sha": "a89de1a541e360a1ead4de1aeacbf3d2a9dfac70", "filename": "gcc/varasm.c", "status": "modified", "additions": 46, "deletions": 48, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a13eaa46a3c90ed92cf02c5fcc0098e301ea715/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a13eaa46a3c90ed92cf02c5fcc0098e301ea715/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=5a13eaa46a3c90ed92cf02c5fcc0098e301ea715", "patch": "@@ -34,6 +34,7 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #include \"flags.h\"\n #include \"function.h\"\n #include \"expr.h\"\n+#include \"output.h\"\n #include \"hard-reg-set.h\"\n #include \"regs.h\"\n #include \"defaults.h\"\n@@ -98,25 +99,35 @@ tree last_assemble_variable_decl;\n /* Nonzero if at least one function definition has been seen.  */\n static int function_defined;\n \n-extern FILE *asm_out_file;\n-\n-static char *compare_constant_1 ();\n-static void record_constant_1 ();\n-static void output_constant_def_contents ();\n-static int contains_pointers_p ();\n-static void bc_output_ascii ();\n-\n-void output_constant_pool ();\n-void assemble_name ();\n-int output_addressed_constants ();\n-void output_constant ();\n-void output_constructor ();\n-void output_byte_asm ();\n-void text_section ();\n-void readonly_data_section ();\n-void data_section ();\n-void named_section ();\n-static void bc_assemble_integer ();\n+struct addr_const;\n+struct constant_descriptor;\n+struct rtx_const;\n+struct pool_constant;\n+\n+static void bc_make_decl_rtl\t\tPROTO((tree, char *, int));\n+static char *strip_reg_name\t\tPROTO((char *));\n+static void bc_output_ascii\t\tPROTO((FILE *, char *, int));\n+static int contains_pointers_p\t\tPROTO((tree));\n+static void decode_addr_const\t\tPROTO((tree, struct addr_const *));\n+static int const_hash\t\t\tPROTO((tree));\n+static int compare_constant\t\tPROTO((tree,\n+\t\t\t\t\t       struct constant_descriptor *));\n+static char *compare_constant_1\t\tPROTO((tree, char *));\n+static struct constant_descriptor *record_constant PROTO((tree));\n+static void record_constant_1\t\tPROTO((tree));\n+static tree copy_constant\t\tPROTO((tree));\n+static void output_constant_def_contents  PROTO((tree, int, int));\n+static void decode_rtx_const\t\tPROTO((enum machine_mode, rtx,\n+\t\t\t\t\t       struct rtx_const *));\n+static int const_hash_rtx\t\tPROTO((enum machine_mode, rtx));\n+static int compare_constant_rtx\t\tPROTO((enum machine_mode, rtx,\n+\t\t\t\t\t       struct constant_descriptor *));\n+static struct constant_descriptor *record_constant_rtx PROTO((enum machine_mode,\n+\t\t\t\t\t\t\t      rtx));\n+static struct pool_constant *find_pool_constant PROTO((rtx));\n+static int output_addressed_constants\tPROTO((tree));\n+static void bc_assemble_integer\t\tPROTO((tree, int));\n+static void output_constructor\t\tPROTO((tree, int));\n \f\n #ifdef EXTRA_SECTIONS\n static enum in_section {no_section, in_text, in_data, in_named, EXTRA_SECTIONS} in_section\n@@ -291,7 +302,8 @@ make_function_rtl (decl)\n    as the assembler symbol name.\n    TOP_LEVEL is nonzero if this is a file-scope variable.\n    This is never called for PARM_DECLs.  */\n-void\n+\n+static void\n bc_make_decl_rtl (decl, asmspec, top_level)\n      tree decl;\n      char *asmspec;\n@@ -913,6 +925,7 @@ assemble_variable (decl, top_level, at_end, dont_output_data)\n      tree decl;\n      int top_level;\n      int at_end;\n+     int dont_output_data;\n {\n   register char *name;\n   int align;\n@@ -1370,8 +1383,9 @@ contains_pointers_p (type)\n /* Output text storage for constructor CONSTR. */\n \n void\n-bc_output_constructor (constr)\n-  tree constr;\n+bc_output_constructor (constr, size)\n+     tree constr;\n+     int size;\n {\n   int i;\n \n@@ -1385,15 +1399,16 @@ bc_output_constructor (constr)\n   text_section ();\n \n   /* Align */\n-  for (i = 0; TYPE_ALIGN (constr) >= BITS_PER_UNIT << (i + 1); i++);\n+  for (i = 0; TYPE_ALIGN (constr) >= BITS_PER_UNIT << (i + 1); i++)\n+    ;\n+\n   if (i > 0)\n     BC_OUTPUT_ALIGN (asm_out_file, i);\n \n   /* Output data */\n-  output_constant (constr, int_size_in_bytes (TREE_TYPE (constr)));\n+  output_constant (constr, size);\n }\n \n-\n /* Create storage for constructor CONSTR. */\n \n void\n@@ -1414,7 +1429,6 @@ bc_output_data_constructor (constr)\n   BC_OUTPUT_SKIP (asm_out_file, int_size_in_bytes (TREE_TYPE (constr)));\n }\n \n-\n /* Output something to declare an external symbol to the assembler.\n    (Most assemblers don't need this, so we normally output nothing.)\n    Do nothing if DECL is not external.  */\n@@ -2098,7 +2112,7 @@ static struct constant_descriptor *const_hash_table[MAX_HASH_TABLE];\n \n /* Compute a hash code for a constant expression.  */\n \n-int\n+static int\n const_hash (exp)\n      tree exp;\n {\n@@ -2803,7 +2817,7 @@ init_const_rtx_hash_table ()\n   pool_offset = 0;\n }\n \n-/* Save and restore it for a nested function.  */\n+/* Save and restore status for a nested function.  */\n \n void\n save_varasm_status (p)\n@@ -2941,7 +2955,7 @@ simplify_subtraction (x)\n \n /* Compute a hash code for a constant RTL expression.  */\n \n-int\n+static int\n const_hash_rtx (mode, x)\n      enum machine_mode mode;\n      rtx x;\n@@ -3291,7 +3305,7 @@ output_constant_pool (fnname, fndecl)\n    and make sure assembler code with a label has been output for each one.\n    Indicate whether an ADDR_EXPR has been encountered.  */\n \n-int\n+static int\n output_addressed_constants (exp)\n      tree exp;\n {\n@@ -3343,22 +3357,6 @@ output_addressed_constants (exp)\n     }\n   return reloc;\n }\n-\n-\n-/* Output assembler for byte constant */\n-void\n-output_byte_asm (byte)\n-  int byte;\n-{\n-  if (output_bytecode)\n-    bc_emit_const ((char *) &byte, sizeof (char));\n-#ifdef ASM_OUTPUT_BYTE\n-  else\n-    {\n-      ASM_OUTPUT_BYTE (asm_out_file, byte);\n-    }\n-#endif\n-}\n \f\n /* Output assembler code for constant EXP to FILE, with no label.\n    This includes the pseudo-op such as \".int\" or \".byte\", and a newline.\n@@ -3483,8 +3481,8 @@ output_constant (exp, size)\n     assemble_zeros (size);\n }\n \n-\n /* Bytecode specific code to output assembler for integer. */\n+\n static void\n bc_assemble_integer (exp, size)\n     tree exp;\n@@ -3585,7 +3583,7 @@ bc_assemble_integer (exp, size)\n    (aggregate constants).\n    Generate at least SIZE bytes, padding if necessary.  */\n \n-void\n+static void\n output_constructor (exp, size)\n      tree exp;\n      int size;"}]}