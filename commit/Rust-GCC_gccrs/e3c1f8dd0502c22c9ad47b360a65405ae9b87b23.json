{"sha": "e3c1f8dd0502c22c9ad47b360a65405ae9b87b23", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTNjMWY4ZGQwNTAyYzIyYzlhZDQ3YjM2MGE2NTQwNWFlOWI4N2IyMw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2020-05-01T13:26:08Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-06-19T08:17:24Z"}, "message": "[Ada] Plug small loophole in implementation of AI12-0100\n\n2020-06-19  Eric Botcazou  <ebotcazou@adacore.com>\n\ngcc/ada/\n\n\t* sem_res.adb (Resolve_Allocator): Call Resolve_Qualified_Expression\n\ton the qualified expression, if any, instead of doing an incomplete\n\ttype resolution manually.\n\t(Resolve_Qualified_Expression): Apply predicate check to operand.", "tree": {"sha": "6f4eda9b70fbad6422b27365656f964ac74752c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6f4eda9b70fbad6422b27365656f964ac74752c3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e3c1f8dd0502c22c9ad47b360a65405ae9b87b23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3c1f8dd0502c22c9ad47b360a65405ae9b87b23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3c1f8dd0502c22c9ad47b360a65405ae9b87b23", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3c1f8dd0502c22c9ad47b360a65405ae9b87b23/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "92392296c19de59d12558eedb9a5966a138454a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92392296c19de59d12558eedb9a5966a138454a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92392296c19de59d12558eedb9a5966a138454a7"}], "stats": {"total": 17, "additions": 4, "deletions": 13}, "files": [{"sha": "e4c0c072ab9f13d5b702630b3f6a947cdfee8509", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3c1f8dd0502c22c9ad47b360a65405ae9b87b23/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3c1f8dd0502c22c9ad47b360a65405ae9b87b23/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=e3c1f8dd0502c22c9ad47b360a65405ae9b87b23", "patch": "@@ -5133,8 +5133,9 @@ package body Sem_Res is\n               (\"class-wide allocator not allowed for this access type\", N);\n          end if;\n \n-         Resolve (Expression (E), Etype (E));\n-         Check_Non_Static_Context (Expression (E));\n+         --  Do a full resolution to apply constraint and predicate checks\n+\n+         Resolve_Qualified_Expression (E, Etype (E));\n          Check_Unset_Reference (Expression (E));\n \n          --  Allocators generated by the build-in-place expansion mechanism\n@@ -5168,16 +5169,6 @@ package body Sem_Res is\n             end if;\n          end if;\n \n-         --  A qualified expression requires an exact match of the type. Class-\n-         --  wide matching is not allowed.\n-\n-         if (Is_Class_Wide_Type (Etype (Expression (E)))\n-              or else Is_Class_Wide_Type (Etype (E)))\n-           and then Base_Type (Etype (Expression (E))) /= Base_Type (Etype (E))\n-         then\n-            Wrong_Type (Expression (E), Etype (E));\n-         end if;\n-\n          --  Calls to build-in-place functions are not currently supported in\n          --  allocators for access types associated with a simple storage pool.\n          --  Supporting such allocators may require passing additional implicit\n@@ -10199,7 +10190,7 @@ package body Sem_Res is\n \n       if Has_Predicates (Target_Typ) then\n          Check_Expression_Against_Static_Predicate\n-           (N, Target_Typ, Static_Failure_Is_Error => True);\n+           (Expr, Target_Typ, Static_Failure_Is_Error => True);\n       end if;\n    end Resolve_Qualified_Expression;\n "}]}