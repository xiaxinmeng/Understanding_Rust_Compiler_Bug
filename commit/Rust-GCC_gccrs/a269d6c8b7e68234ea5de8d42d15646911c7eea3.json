{"sha": "a269d6c8b7e68234ea5de8d42d15646911c7eea3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTI2OWQ2YzhiN2U2ODIzNGVhNWRlOGQ0MmQxNTY0NjkxMWM3ZWVhMw==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@redhat.com", "date": "2004-08-23T05:51:25Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2004-08-23T05:51:25Z"}, "message": "read-rtl.c (string_obstack): New file-scope variable.\n\n\t* read-rtl.c (string_obstack): New file-scope variable.\n\t(read_string, read_quoted_string, read_braced_string)\n\t(read_escape): Remove obstack parameter and use string_obstack instead.\n\t(read_rtx): Remove function-local rtl_obstack and initialize\n\tstring_obstack instead.  Update call to read_string.\n\nFrom-SVN: r86402", "tree": {"sha": "91dca2a27f20b017e52f4df1aa0696b8810c3860", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/91dca2a27f20b017e52f4df1aa0696b8810c3860"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a269d6c8b7e68234ea5de8d42d15646911c7eea3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a269d6c8b7e68234ea5de8d42d15646911c7eea3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a269d6c8b7e68234ea5de8d42d15646911c7eea3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a269d6c8b7e68234ea5de8d42d15646911c7eea3/comments", "author": null, "committer": null, "parents": [{"sha": "9fc3b39aa9656b1c626f6a6fed03646040b03122", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fc3b39aa9656b1c626f6a6fed03646040b03122", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fc3b39aa9656b1c626f6a6fed03646040b03122"}], "stats": {"total": 84, "additions": 47, "deletions": 37}, "files": [{"sha": "3639ad68c90a1b6343df55154012ad7b9097d042", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a269d6c8b7e68234ea5de8d42d15646911c7eea3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a269d6c8b7e68234ea5de8d42d15646911c7eea3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a269d6c8b7e68234ea5de8d42d15646911c7eea3", "patch": "@@ -1,3 +1,11 @@\n+2004-08-23  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* read-rtl.c (string_obstack): New file-scope variable.\n+\t(read_string, read_quoted_string, read_braced_string)\n+\t(read_escape): Remove obstack parameter and use string_obstack instead.\n+\t(read_rtx): Remove function-local rtl_obstack and initialize\n+\tstring_obstack instead.  Update call to read_string.\n+\n 2004-08-22  Andrew Pinski  <apinski@apple.com>\n \n \tPR c/15262"}, {"sha": "57bdfa009663b6900f01310afc9dd23bc71117d9", "filename": "gcc/read-rtl.c", "status": "modified", "additions": 39, "deletions": 37, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a269d6c8b7e68234ea5de8d42d15646911c7eea3/gcc%2Fread-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a269d6c8b7e68234ea5de8d42d15646911c7eea3/gcc%2Fread-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fread-rtl.c?ref=a269d6c8b7e68234ea5de8d42d15646911c7eea3", "patch": "@@ -34,15 +34,18 @@ static void fatal_with_file_and_line (FILE *, const char *, ...)\n   ATTRIBUTE_PRINTF_2 ATTRIBUTE_NORETURN;\n static void fatal_expected_char (FILE *, int, int) ATTRIBUTE_NORETURN;\n static void read_name (char *, FILE *);\n-static char *read_string (struct obstack *, FILE *, int);\n-static char *read_quoted_string (struct obstack *, FILE *);\n-static char *read_braced_string (struct obstack *, FILE *);\n-static void read_escape (struct obstack *, FILE *);\n+static char *read_string (FILE *, int);\n+static char *read_quoted_string (FILE *);\n+static char *read_braced_string (FILE *);\n+static void read_escape (FILE *);\n static hashval_t def_hash (const void *);\n static int def_name_eq_p (const void *, const void *);\n static void read_constants (FILE *infile, char *tmp_char);\n static void validate_const_int (FILE *, const char *);\n \n+/* Obstack used for allocating RTL strings.  */\n+static struct obstack string_obstack;\n+\n /* Subroutines of read_rtx.  */\n \n /* The current line number for the file.  */\n@@ -203,7 +206,7 @@ read_name (char *str, FILE *infile)\n /* Subroutine of the string readers.  Handles backslash escapes.\n    Caller has read the backslash, but not placed it into the obstack.  */\n static void\n-read_escape (struct obstack *ob, FILE *infile)\n+read_escape (FILE *infile)\n {\n   int c = getc (infile);\n \n@@ -232,31 +235,31 @@ read_escape (struct obstack *ob, FILE *infile)\n     case 'a': case 'b': case 'f': case 'n': case 'r': case 't': case 'v':\n     case '0': case '1': case '2': case '3': case '4': case '5': case '6':\n     case '7': case 'x':\n-      obstack_1grow (ob, '\\\\');\n+      obstack_1grow (&string_obstack, '\\\\');\n       break;\n \n       /* \\; makes stuff for a C string constant containing\n \t newline and tab.  */\n     case ';':\n-      obstack_grow (ob, \"\\\\n\\\\t\", 4);\n+      obstack_grow (&string_obstack, \"\\\\n\\\\t\", 4);\n       return;\n \n       /* pass anything else through, but issue a warning.  */\n     default:\n       fprintf (stderr, \"%s:%d: warning: unrecognized escape \\\\%c\\n\",\n \t       read_rtx_filename, read_rtx_lineno, c);\n-      obstack_1grow (ob, '\\\\');\n+      obstack_1grow (&string_obstack, '\\\\');\n       break;\n     }\n \n-  obstack_1grow (ob, c);\n+  obstack_1grow (&string_obstack, c);\n }\n \n \n /* Read a double-quoted string onto the obstack.  Caller has scanned\n    the leading quote.  */\n static char *\n-read_quoted_string (struct obstack *ob, FILE *infile)\n+read_quoted_string (FILE *infile)\n {\n   int c;\n \n@@ -267,30 +270,30 @@ read_quoted_string (struct obstack *ob, FILE *infile)\n \tread_rtx_lineno++;\n       else if (c == '\\\\')\n \t{\n-\t  read_escape (ob, infile);\n+\t  read_escape (infile);\n \t  continue;\n \t}\n       else if (c == '\"')\n \tbreak;\n \n-      obstack_1grow (ob, c);\n+      obstack_1grow (&string_obstack, c);\n     }\n \n-  obstack_1grow (ob, 0);\n-  return (char *) obstack_finish (ob);\n+  obstack_1grow (&string_obstack, 0);\n+  return (char *) obstack_finish (&string_obstack);\n }\n \n-/* Read a braced string (a la Tcl) onto the obstack.  Caller has\n-   scanned the leading brace.  Note that unlike quoted strings,\n+/* Read a braced string (a la Tcl) onto the string obstack.  Caller\n+   has scanned the leading brace.  Note that unlike quoted strings,\n    the outermost braces _are_ included in the string constant.  */\n static char *\n-read_braced_string (struct obstack *ob, FILE *infile)\n+read_braced_string (FILE *infile)\n {\n   int c;\n   int brace_depth = 1;  /* caller-processed */\n   unsigned long starting_read_rtx_lineno = read_rtx_lineno;\n \n-  obstack_1grow (ob, '{');\n+  obstack_1grow (&string_obstack, '{');\n   while (brace_depth)\n     {\n       c = getc (infile); /* Read the string  */\n@@ -303,27 +306,27 @@ read_braced_string (struct obstack *ob, FILE *infile)\n \tbrace_depth--;\n       else if (c == '\\\\')\n \t{\n-\t  read_escape (ob, infile);\n+\t  read_escape (infile);\n \t  continue;\n \t}\n       else if (c == EOF)\n \tfatal_with_file_and_line\n \t  (infile, \"missing closing } for opening brace on line %lu\",\n \t   starting_read_rtx_lineno);\n \n-      obstack_1grow (ob, c);\n+      obstack_1grow (&string_obstack, c);\n     }\n \n-  obstack_1grow (ob, 0);\n-  return (char *) obstack_finish (ob);\n+  obstack_1grow (&string_obstack, 0);\n+  return (char *) obstack_finish (&string_obstack);\n }\n \n /* Read some kind of string constant.  This is the high-level routine\n    used by read_rtx.  It handles surrounding parentheses, leading star,\n    and dispatch to the appropriate string constant reader.  */\n \n static char *\n-read_string (struct obstack *ob, FILE *infile, int star_if_braced)\n+read_string (FILE *infile, int star_if_braced)\n {\n   char *stringbuf;\n   int saw_paren = 0;\n@@ -337,12 +340,12 @@ read_string (struct obstack *ob, FILE *infile, int star_if_braced)\n     }\n \n   if (c == '\"')\n-    stringbuf = read_quoted_string (ob, infile);\n+    stringbuf = read_quoted_string (infile);\n   else if (c == '{')\n     {\n       if (star_if_braced)\n-\tobstack_1grow (ob, '*');\n-      stringbuf = read_braced_string (ob, infile);\n+\tobstack_1grow (&string_obstack, '*');\n+      stringbuf = read_braced_string (infile);\n     }\n   else\n     fatal_with_file_and_line (infile, \"expected `\\\"' or `{', found `%c'\", c);\n@@ -521,8 +524,6 @@ read_rtx (FILE *infile)\n   int tmp_int;\n   HOST_WIDE_INT tmp_wide;\n \n-  /* Obstack used for allocating RTL objects.  */\n-  static struct obstack rtl_obstack;\n   static int initialized;\n \n   /* Linked list structure for making RTXs: */\n@@ -532,10 +533,11 @@ read_rtx (FILE *infile)\n       rtx value;\t\t/* Value of this node.  */\n     };\n \n-  if (!initialized) {\n-    obstack_init (&rtl_obstack);\n-    initialized = 1;\n-  }\n+  if (!initialized)\n+    {\n+      obstack_init (&string_obstack);\n+      initialized = 1;\n+    }\n \n again:\n   c = read_skip_spaces (infile); /* Should be open paren.  */\n@@ -676,7 +678,7 @@ read_rtx (FILE *infile)\n \t     written with a brace block instead of a string constant.  */\n \t  star_if_braced = (format_ptr[-1] == 'T');\n \n-\t  stringbuf = read_string (&rtl_obstack, infile, star_if_braced);\n+\t  stringbuf = read_string (infile, star_if_braced);\n \n \t  /* For insn patterns, we want to provide a default name\n \t     based on the file and line, like \"*foo.md:12\", if the\n@@ -693,11 +695,11 @@ read_rtx (FILE *infile)\n \t      for (slash = fn; *slash; slash ++)\n \t\tif (*slash == '/' || *slash == '\\\\' || *slash == ':')\n \t\t  fn = slash + 1;\n-\t      obstack_1grow (&rtl_obstack, '*');\n-\t      obstack_grow (&rtl_obstack, fn, strlen (fn));\n+\t      obstack_1grow (&string_obstack, '*');\n+\t      obstack_grow (&string_obstack, fn, strlen (fn));\n \t      sprintf (line_name, \":%d\", read_rtx_lineno);\n-\t      obstack_grow (&rtl_obstack, line_name, strlen (line_name)+1);\n-\t      stringbuf = (char *) obstack_finish (&rtl_obstack);\n+\t      obstack_grow (&string_obstack, line_name, strlen (line_name)+1);\n+\t      stringbuf = (char *) obstack_finish (&string_obstack);\n \t    }\n \n \t  if (star_if_braced)"}]}