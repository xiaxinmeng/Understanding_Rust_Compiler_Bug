{"sha": "406c98b2644449dcb8a1928d48ca887c8adcefdc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDA2Yzk4YjI2NDQ0NDlkY2I4YTE5MjhkNDhjYTg4N2M4YWRjZWZkYw==", "commit": {"author": {"name": "Andreas Tobler", "email": "a.tobler@schweiz.ch", "date": "2004-03-13T23:07:58Z"}, "committer": {"name": "Andreas Tobler", "email": "andreast@gcc.gnu.org", "date": "2004-03-13T23:07:58Z"}, "message": "natFileChannelPosix.cc: Implement munmap_adaptor and msync_adaptor for older POSIX_C_SOURCES specs.\n\n2004-03-14  Andreas Tobler <a.tobler@schweiz.ch>\n\n\t* gnu/java/nio/channels/natFileChannelPosix.cc: Implement\n\tmunmap_adaptor and msync_adaptor for older POSIX_C_SOURCES specs.\n\t(MappedByteBufferImpl::unmapImpl): Use munmap_adaptor.\n\t(MappedByteBufferImpl::forceImpl): Use msync_adptor.\n\nFrom-SVN: r79462", "tree": {"sha": "f3ebe9ec8cc1764ebfe3d5305ac24af28dd15aad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f3ebe9ec8cc1764ebfe3d5305ac24af28dd15aad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/406c98b2644449dcb8a1928d48ca887c8adcefdc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/406c98b2644449dcb8a1928d48ca887c8adcefdc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/406c98b2644449dcb8a1928d48ca887c8adcefdc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/406c98b2644449dcb8a1928d48ca887c8adcefdc/comments", "author": null, "committer": null, "parents": [{"sha": "7db956db83843ae9f90eca96175930b7dd3467d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7db956db83843ae9f90eca96175930b7dd3467d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7db956db83843ae9f90eca96175930b7dd3467d9"}], "stats": {"total": 31, "additions": 29, "deletions": 2}, "files": [{"sha": "b3199d956e055723c55813cc7a9625b75365c3b3", "filename": "libjava/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/406c98b2644449dcb8a1928d48ca887c8adcefdc/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/406c98b2644449dcb8a1928d48ca887c8adcefdc/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=406c98b2644449dcb8a1928d48ca887c8adcefdc", "patch": "@@ -1,3 +1,10 @@\n+2004-03-14  Andreas Tobler <a.tobler@schweiz.ch>\n+\n+\t* gnu/java/nio/channels/natFileChannelPosix.cc: Implement\n+\tmunmap_adaptor and msync_adaptor for older POSIX_C_SOURCES specs.\n+\t(MappedByteBufferImpl::unmapImpl): Use munmap_adaptor.\n+\t(MappedByteBufferImpl::forceImpl): Use msync_adptor.\n+\n 2004-03-12  Michael Koch  <konqueror@gmx.de>\n \n \t* java/text/DateFormatSymbols.java: Fixed file name in copyright."}, {"sha": "44beae6641d30871e6a616fbb70e3787f800bb2d", "filename": "libjava/gnu/java/nio/channels/natFileChannelPosix.cc", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/406c98b2644449dcb8a1928d48ca887c8adcefdc/libjava%2Fgnu%2Fjava%2Fnio%2Fchannels%2FnatFileChannelPosix.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/406c98b2644449dcb8a1928d48ca887c8adcefdc/libjava%2Fgnu%2Fjava%2Fnio%2Fchannels%2FnatFileChannelPosix.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnio%2Fchannels%2FnatFileChannelPosix.cc?ref=406c98b2644449dcb8a1928d48ca887c8adcefdc", "patch": "@@ -56,6 +56,26 @@ details.  */\n \n #ifdef HAVE_MMAP\n #include <sys/mman.h>\n+\n+// Use overload resolution to find out the argument types.\n+// E.g. Solaris 2.6 uses different argument types for munmap and msync.\n+// This is in case _POSIX_C_SOURCES is smaller than 3.\n+\n+template <typename T_implPtr, typename T_implLen>\n+static inline int\n+munmap_adaptor(int (*munmap)(T_implPtr caddr, T_implLen sizet),\n+\t\t void* caddr, size_t sizet)\n+{\n+  return munmap ((T_implPtr) caddr, (T_implLen) sizet);\n+}\n+\n+template <typename T_implPtr, typename T_implLen, typename T_msync>\n+static inline int\n+msync_adaptor(int (*msync)(T_implPtr caddr, T_implLen sizet, T_msync msynct),\n+\t      void* caddr, size_t sizet, int msynct)\n+{\n+  return msync ((T_implPtr) caddr, (T_implLen) sizet, (T_msync) msynct);\n+}\n #endif\n \n using gnu::gcj::RawData;\n@@ -498,7 +518,7 @@ void\n MappedByteBufferImpl::unmapImpl ()\n {\n #if defined(HAVE_MMAP)\n-  munmap((void*) implPtr, implLen);\n+  munmap_adaptor(munmap, implPtr, implLen);\n #endif\n }\n \n@@ -517,6 +537,6 @@ void\n MappedByteBufferImpl::forceImpl ()\n {\n #if defined(HAVE_MMAP)\n-  ::msync((void*) implPtr, implLen, MS_SYNC);\n+  ::msync_adaptor(msync, implPtr, implLen, MS_SYNC);\n #endif\n }"}]}