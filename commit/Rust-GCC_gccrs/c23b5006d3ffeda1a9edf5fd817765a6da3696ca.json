{"sha": "c23b5006d3ffeda1a9edf5fd817765a6da3696ca", "node_id": "C_kwDOANBUbNoAKGMyM2I1MDA2ZDNmZmVkYTFhOWVkZjVmZDgxNzc2NWE2ZGEzNjk2Y2E", "commit": {"author": {"name": "Kewen Lin", "email": "linkw@linux.ibm.com", "date": "2022-09-30T12:16:49Z"}, "committer": {"name": "Kewen Lin", "email": "linkw@linux.ibm.com", "date": "2022-09-30T12:16:49Z"}, "message": "rs6000: Rework ELFv2 support for -fpatchable-function-entry* [PR99888]\n\nAs PR99888 and its related show, the current support for\n-fpatchable-function-entry on powerpc ELFv2 doesn't work\nwell with global entry existence.  For example, with one\ncommand line option -fpatchable-function-entry=3,2, it got\nbelow w/o this patch:\n\n  .LPFE1:\n\t  nop\n\t  nop\n\t  .type   foo, @function\n  foo:\n\t  nop\n  .LFB0:\n\t  .cfi_startproc\n  .LCF0:\n  0:      addis 2,12,.TOC.-.LCF0@ha\n\t  addi 2,2,.TOC.-.LCF0@l\n\t  .localentry     foo,.-foo\n\n, the assembly is unexpected since the patched nops have\nno effects when being entered from local entry.\n\nThis patch is to update the nops patched before and after\nlocal entry, it looks like:\n\n\t  .type   foo, @function\n  foo:\n  .LFB0:\n\t  .cfi_startproc\n  .LCF0:\n  0:      addis 2,12,.TOC.-.LCF0@ha\n\t  addi 2,2,.TOC.-.LCF0@l\n\t  nop\n\t  nop\n\t  .localentry     foo,.-foo\n\t  nop\n\n\tPR target/99888\n\tPR target/105649\n\ngcc/ChangeLog:\n\n\t* doc/invoke.texi (option -fpatchable-function-entry): Adjust the\n\tdocumentation for PowerPC ELFv2 ABI dual entry points.\n\t* config/rs6000/rs6000-internal.h\n\t(rs6000_print_patchable_function_entry): New function declaration.\n\t* config/rs6000/rs6000-logue.cc (rs6000_output_function_prologue):\n\tSupport patchable-function-entry by emitting nops before and after\n\tlocal entry for the function that needs global entry.\n\t* config/rs6000/rs6000.cc (rs6000_print_patchable_function_entry): Skip\n\tthe function that needs global entry till global entry has been\n\temitted.\n\t* config/rs6000/rs6000.h (struct machine_function): New bool member\n\tglobal_entry_emitted.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/powerpc/pr99888-1.c: New test.\n\t* gcc.target/powerpc/pr99888-2.c: New test.\n\t* gcc.target/powerpc/pr99888-3.c: New test.\n\t* gcc.target/powerpc/pr99888-4.c: New test.\n\t* gcc.target/powerpc/pr99888-5.c: New test.\n\t* gcc.target/powerpc/pr99888-6.c: New test.\n\t* c-c++-common/patchable_function_entry-default.c: Adjust for\n\tpowerpc_elfv2 to avoid compilation error.", "tree": {"sha": "c14405fb33c96e76b5bfd74885e6ea8918c42620", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c14405fb33c96e76b5bfd74885e6ea8918c42620"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c23b5006d3ffeda1a9edf5fd817765a6da3696ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c23b5006d3ffeda1a9edf5fd817765a6da3696ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c23b5006d3ffeda1a9edf5fd817765a6da3696ca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c23b5006d3ffeda1a9edf5fd817765a6da3696ca/comments", "author": {"login": "jedilyn", "id": 38515402, "node_id": "MDQ6VXNlcjM4NTE1NDAy", "avatar_url": "https://avatars.githubusercontent.com/u/38515402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jedilyn", "html_url": "https://github.com/jedilyn", "followers_url": "https://api.github.com/users/jedilyn/followers", "following_url": "https://api.github.com/users/jedilyn/following{/other_user}", "gists_url": "https://api.github.com/users/jedilyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jedilyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jedilyn/subscriptions", "organizations_url": "https://api.github.com/users/jedilyn/orgs", "repos_url": "https://api.github.com/users/jedilyn/repos", "events_url": "https://api.github.com/users/jedilyn/events{/privacy}", "received_events_url": "https://api.github.com/users/jedilyn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jedilyn", "id": 38515402, "node_id": "MDQ6VXNlcjM4NTE1NDAy", "avatar_url": "https://avatars.githubusercontent.com/u/38515402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jedilyn", "html_url": "https://github.com/jedilyn", "followers_url": "https://api.github.com/users/jedilyn/followers", "following_url": "https://api.github.com/users/jedilyn/following{/other_user}", "gists_url": "https://api.github.com/users/jedilyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jedilyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jedilyn/subscriptions", "organizations_url": "https://api.github.com/users/jedilyn/orgs", "repos_url": "https://api.github.com/users/jedilyn/repos", "events_url": "https://api.github.com/users/jedilyn/events{/privacy}", "received_events_url": "https://api.github.com/users/jedilyn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c28957176dc0adff6e4b8fcbe6b91f5b82900563", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c28957176dc0adff6e4b8fcbe6b91f5b82900563", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c28957176dc0adff6e4b8fcbe6b91f5b82900563"}], "stats": {"total": 198, "additions": 194, "deletions": 4}, "files": [{"sha": "e75b8d5c7e88a4bc08064816f984f2b0bcf82771", "filename": "gcc/config/rs6000/rs6000-internal.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c23b5006d3ffeda1a9edf5fd817765a6da3696ca/gcc%2Fconfig%2Frs6000%2Frs6000-internal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c23b5006d3ffeda1a9edf5fd817765a6da3696ca/gcc%2Fconfig%2Frs6000%2Frs6000-internal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-internal.h?ref=c23b5006d3ffeda1a9edf5fd817765a6da3696ca", "patch": "@@ -182,6 +182,10 @@ extern tree rs6000_fold_builtin (tree fndecl ATTRIBUTE_UNUSED,\n \t\t\t         tree *args ATTRIBUTE_UNUSED,\n \t\t\t         bool ignore ATTRIBUTE_UNUSED);\n \n+extern void rs6000_print_patchable_function_entry (FILE *,\n+\t\t\t\t\t\t   unsigned HOST_WIDE_INT,\n+\t\t\t\t\t\t   bool);\n+\n extern bool rs6000_passes_float;\n extern bool rs6000_passes_long_double;\n extern bool rs6000_passes_vector;"}, {"sha": "3621cb501c70c80f7f134f5d6cacf83adc8fcdc2", "filename": "gcc/config/rs6000/rs6000-logue.cc", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c23b5006d3ffeda1a9edf5fd817765a6da3696ca/gcc%2Fconfig%2Frs6000%2Frs6000-logue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c23b5006d3ffeda1a9edf5fd817765a6da3696ca/gcc%2Fconfig%2Frs6000%2Frs6000-logue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-logue.cc?ref=c23b5006d3ffeda1a9edf5fd817765a6da3696ca", "patch": "@@ -4009,11 +4009,43 @@ rs6000_output_function_prologue (FILE *file)\n \t  fprintf (file, \"\\tadd 2,2,12\\n\");\n \t}\n \n+      unsigned short patch_area_size = crtl->patch_area_size;\n+      unsigned short patch_area_entry = crtl->patch_area_entry;\n+      /* Need to emit the patching area.  */\n+      if (patch_area_size > 0)\n+\t{\n+\t  cfun->machine->global_entry_emitted = true;\n+\t  /* As ELFv2 ABI shows, the allowable bytes between the global\n+\t     and local entry points are 0, 4, 8, 16, 32 and 64 when\n+\t     there is a local entry point.  Considering there are two\n+\t     non-prefixed instructions for global entry point prologue\n+\t     (8 bytes), the count for patchable nops before local entry\n+\t     point would be 2, 6 and 14.  It's possible to support those\n+\t     other counts of nops by not making a local entry point, but\n+\t     we don't have clear use cases for them, so leave them\n+\t     unsupported for now.  */\n+\t  if (patch_area_entry > 0)\n+\t    {\n+\t      if (patch_area_entry != 2\n+\t\t  && patch_area_entry != 6\n+\t\t  && patch_area_entry != 14)\n+\t\terror (\"unsupported number of nops before function entry (%u)\",\n+\t\t       patch_area_entry);\n+\t      rs6000_print_patchable_function_entry (file, patch_area_entry,\n+\t\t\t\t\t\t     true);\n+\t      patch_area_size -= patch_area_entry;\n+\t    }\n+\t}\n+\n       fputs (\"\\t.localentry\\t\", file);\n       assemble_name (file, name);\n       fputs (\",.-\", file);\n       assemble_name (file, name);\n       fputs (\"\\n\", file);\n+      /* Emit the nops after local entry.  */\n+      if (patch_area_size > 0)\n+\trs6000_print_patchable_function_entry (file, patch_area_size,\n+\t\t\t\t\t       patch_area_entry == 0);\n     }\n \n   else if (rs6000_pcrel_p ())"}, {"sha": "b9496d7f2680378405318731999250c1cf69a59a", "filename": "gcc/config/rs6000/rs6000.cc", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c23b5006d3ffeda1a9edf5fd817765a6da3696ca/gcc%2Fconfig%2Frs6000%2Frs6000.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c23b5006d3ffeda1a9edf5fd817765a6da3696ca/gcc%2Fconfig%2Frs6000%2Frs6000.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.cc?ref=c23b5006d3ffeda1a9edf5fd817765a6da3696ca", "patch": "@@ -14930,8 +14930,14 @@ rs6000_print_patchable_function_entry (FILE *file,\n   if (!(TARGET_64BIT && DEFAULT_ABI != ABI_ELFv2)\n       && HAVE_GAS_SECTION_LINK_ORDER)\n     flags |= SECTION_LINK_ORDER;\n-  default_print_patchable_function_entry_1 (file, patch_area_size, record_p,\n-\t\t\t\t\t    flags);\n+  bool global_entry_needed_p = rs6000_global_entry_point_prologue_needed_p ();\n+  /* For a function which needs global entry point, we will emit the\n+     patchable area before and after local entry point under the control of\n+     cfun->machine->global_entry_emitted, see the handling in function\n+     rs6000_output_function_prologue.  */\n+  if (!global_entry_needed_p || cfun->machine->global_entry_emitted)\n+    default_print_patchable_function_entry_1 (file, patch_area_size, record_p,\n+\t\t\t\t\t      flags);\n }\n \f\n enum rtx_code"}, {"sha": "b4df22b60303d1334e6b0daba825f4a8f968d792", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c23b5006d3ffeda1a9edf5fd817765a6da3696ca/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c23b5006d3ffeda1a9edf5fd817765a6da3696ca/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=c23b5006d3ffeda1a9edf5fd817765a6da3696ca", "patch": "@@ -2435,6 +2435,10 @@ typedef struct GTY(()) machine_function\n   bool lr_is_wrapped_separately;\n   bool toc_is_wrapped_separately;\n   bool mma_return_type_error;\n+  /* Indicate global entry is emitted, only useful when the function requires\n+     global entry.  It helps to control the patchable area before and after\n+     local entry.  */\n+  bool global_entry_emitted;\n } machine_function;\n #endif\n "}, {"sha": "518bfdf0867d21c97d683c7acc3c3f4366cd08f1", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c23b5006d3ffeda1a9edf5fd817765a6da3696ca/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c23b5006d3ffeda1a9edf5fd817765a6da3696ca/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=c23b5006d3ffeda1a9edf5fd817765a6da3696ca", "patch": "@@ -16884,9 +16884,13 @@ the area size or to remove it completely on a single function.\n If @code{N=0}, no pad location is recorded.\n \n The NOP instructions are inserted at---and maybe before, depending on\n-@var{M}---the function entry address, even before the prologue.\n+@var{M}---the function entry address, even before the prologue.  On\n+PowerPC with the ELFv2 ABI, for a function with dual entry points,\n+the local entry point is this function entry address.\n \n-The maximum value of @var{N} and @var{M} is 65535.\n+The maximum value of @var{N} and @var{M} is 65535.  On PowerPC with the\n+ELFv2 ABI, for a function with dual entry points, the supported values\n+for @var{M} are 0, 2, 6 and 14.\n @end table\n \n "}, {"sha": "a501efccb194319eeefa086fae2dba21994a178b", "filename": "gcc/testsuite/c-c++-common/patchable_function_entry-default.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c23b5006d3ffeda1a9edf5fd817765a6da3696ca/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpatchable_function_entry-default.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c23b5006d3ffeda1a9edf5fd817765a6da3696ca/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpatchable_function_entry-default.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpatchable_function_entry-default.c?ref=c23b5006d3ffeda1a9edf5fd817765a6da3696ca", "patch": "@@ -1,6 +1,9 @@\n /* { dg-do compile { target { ! { nvptx*-*-* visium-*-* } } } } */\n /* { dg-options \"-O2 -fpatchable-function-entry=3,1\" } */\n /* { dg-additional-options \"-fno-pie\" { target sparc*-*-* } } */\n+/* See PR99888, one single preceding nop isn't allowed on powerpc_elfv2,\n+   so overriding with two preceding nops to make it pass there.  */\n+/* { dg-additional-options \"-fpatchable-function-entry=3,2\" { target powerpc_elfv2 } } */\n /* { dg-final { scan-assembler-times \"nop|NOP|SWYM\" 3 { target { ! { alpha*-*-* } } } } } */\n /* { dg-final { scan-assembler-times \"bis\" 3 { target alpha*-*-* } } } */\n "}, {"sha": "9370b4e743884c2d8787daa1c498bda29472e1f7", "filename": "gcc/testsuite/gcc.target/powerpc/pr99888-1.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c23b5006d3ffeda1a9edf5fd817765a6da3696ca/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr99888-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c23b5006d3ffeda1a9edf5fd817765a6da3696ca/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr99888-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr99888-1.c?ref=c23b5006d3ffeda1a9edf5fd817765a6da3696ca", "patch": "@@ -0,0 +1,43 @@\n+/* Verify no errors for different nops after local entry on ELFv2.  */\n+\n+extern int a;\n+\n+__attribute__ ((noipa, patchable_function_entry (1, 0)))\n+int test1 (int b) {\n+  return a + b;\n+}\n+\n+__attribute__ ((noipa, patchable_function_entry (2, 0)))\n+int test2 (int b) {\n+  return a + b;\n+}\n+\n+__attribute__ ((noipa, patchable_function_entry (3, 0)))\n+int test3 (int b) {\n+  return a + b;\n+}\n+\n+__attribute__ ((noipa, patchable_function_entry (4, 0)))\n+int test4 (int b) {\n+  return a + b;\n+}\n+\n+__attribute__ ((noipa, patchable_function_entry (5, 0)))\n+int test5 (int b) {\n+  return a + b;\n+}\n+\n+__attribute__ ((noipa, patchable_function_entry (6, 0)))\n+int test6 (int b) {\n+  return a + b;\n+}\n+\n+__attribute__ ((noipa, patchable_function_entry (7, 0)))\n+int test7 (int b) {\n+  return a + b;\n+}\n+\n+__attribute__ ((noipa, patchable_function_entry (8, 0)))\n+int test8 (int b) {\n+  return a + b;\n+}"}, {"sha": "450617126023a4e5a92a70a8223985e83d9fed14", "filename": "gcc/testsuite/gcc.target/powerpc/pr99888-2.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c23b5006d3ffeda1a9edf5fd817765a6da3696ca/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr99888-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c23b5006d3ffeda1a9edf5fd817765a6da3696ca/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr99888-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr99888-2.c?ref=c23b5006d3ffeda1a9edf5fd817765a6da3696ca", "patch": "@@ -0,0 +1,43 @@\n+/* Verify no errors for 2, 6 and 14 nops before local entry on ELFv2.  */\n+\n+extern int a;\n+\n+__attribute__ ((noipa, patchable_function_entry (2, 2)))\n+int test1 (int b) {\n+  return a + b;\n+}\n+\n+__attribute__ ((noipa, patchable_function_entry (4, 2)))\n+int test2 (int b) {\n+  return a + b;\n+}\n+\n+__attribute__ ((noipa, patchable_function_entry (6, 6)))\n+int test3 (int b) {\n+  return a + b;\n+}\n+\n+__attribute__ ((noipa, patchable_function_entry (8, 6)))\n+int test4 (int b) {\n+  return a + b;\n+}\n+\n+__attribute__ ((noipa, patchable_function_entry (16, 6)))\n+int test5 (int b) {\n+  return a + b;\n+}\n+\n+__attribute__ ((noipa, patchable_function_entry (14, 14)))\n+int test6 (int b) {\n+  return a + b;\n+}\n+\n+__attribute__ ((noipa, patchable_function_entry (28, 14)))\n+int test7 (int b) {\n+  return a + b;\n+}\n+\n+__attribute__ ((noipa, patchable_function_entry (64, 14)))\n+int test8 (int b) {\n+  return a + b;\n+}"}, {"sha": "4531ae32036d20a1961993b01d1bf48daf556c1a", "filename": "gcc/testsuite/gcc.target/powerpc/pr99888-3.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c23b5006d3ffeda1a9edf5fd817765a6da3696ca/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr99888-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c23b5006d3ffeda1a9edf5fd817765a6da3696ca/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr99888-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr99888-3.c?ref=c23b5006d3ffeda1a9edf5fd817765a6da3696ca", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-options \"-fpatchable-function-entry=1\" } */\n+\n+/* Verify no errors on ELFv2, using command line option instead of\n+   function attribute.  */\n+\n+extern int a;\n+\n+int test (int b) {\n+  return a + b;\n+}\n+"}, {"sha": "00a8d4d316e0ad8a800290a7bc5e11f722a5a39d", "filename": "gcc/testsuite/gcc.target/powerpc/pr99888-4.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c23b5006d3ffeda1a9edf5fd817765a6da3696ca/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr99888-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c23b5006d3ffeda1a9edf5fd817765a6da3696ca/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr99888-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr99888-4.c?ref=c23b5006d3ffeda1a9edf5fd817765a6da3696ca", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-require-effective-target powerpc_elfv2 } */\n+/* There is no global entry point prologue with pcrel.  */\n+/* { dg-options \"-mno-pcrel -fpatchable-function-entry=1,1\" } */\n+\n+/* Verify one error emitted for unexpected 1 nop before local\n+   entry.  */\n+\n+extern int a;\n+\n+int test (int b) {\n+  return a + b;\n+}\n+/* { dg-error \"unsupported number of nops before function entry \\\\(1\\\\)\" \"\" { target *-*-* } .-1 } */"}, {"sha": "39d3b4465f111180b84bc09e9808a5f22be071e4", "filename": "gcc/testsuite/gcc.target/powerpc/pr99888-5.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c23b5006d3ffeda1a9edf5fd817765a6da3696ca/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr99888-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c23b5006d3ffeda1a9edf5fd817765a6da3696ca/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr99888-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr99888-5.c?ref=c23b5006d3ffeda1a9edf5fd817765a6da3696ca", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-require-effective-target powerpc_elfv2 } */\n+/* There is no global entry point prologue with pcrel.  */\n+/* { dg-options \"-mno-pcrel -fpatchable-function-entry=7,3\" } */\n+\n+/* Verify one error emitted for unexpected 3 nops before local\n+   entry.  */\n+\n+extern int a;\n+\n+int test (int b) {\n+  return a + b;\n+}\n+/* { dg-error \"unsupported number of nops before function entry \\\\(3\\\\)\" \"\" { target *-*-* } .-1 } */"}, {"sha": "c6c18dcc7ac02a89a8a3960a466e6609afa4bc47", "filename": "gcc/testsuite/gcc.target/powerpc/pr99888-6.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c23b5006d3ffeda1a9edf5fd817765a6da3696ca/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr99888-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c23b5006d3ffeda1a9edf5fd817765a6da3696ca/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr99888-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr99888-6.c?ref=c23b5006d3ffeda1a9edf5fd817765a6da3696ca", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-require-effective-target powerpc_elfv2 } */\n+/* There is no global entry point prologue with pcrel.  */\n+/* { dg-options \"-mno-pcrel\" } */\n+\n+/* Verify one error emitted for unexpected 4 nops before local\n+   entry.  */\n+\n+extern int a;\n+\n+__attribute__ ((patchable_function_entry (20, 4)))\n+int test (int b) {\n+  return a + b;\n+}\n+/* { dg-error \"unsupported number of nops before function entry \\\\(4\\\\)\" \"\" { target *-*-* } .-1 } */"}]}