{"sha": "302f08072ff5559a762baed4bde399852c0960be", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzAyZjA4MDcyZmY1NTU5YTc2MmJhZWQ0YmRlMzk5ODUyYzA5NjBiZQ==", "commit": {"author": {"name": "Tom de Vries", "email": "tom@codesourcery.com", "date": "2015-04-17T09:26:41Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2015-04-17T09:26:41Z"}, "message": "Factor optimize_va_list_gpr_fpr_size out of pass_stdarg::execute\n\n2015-04-17  Tom de Vries  <tom@codesourcery.com>\n\n\t* tree-stdarg.c (optimize_va_list_gpr_fpr_size): Factor out of ...\n\t(pass_stdarg::execute): ... here.\n\nFrom-SVN: r222171", "tree": {"sha": "c78f6cb511fc19ef5de2fa51821043677881c108", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c78f6cb511fc19ef5de2fa51821043677881c108"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/302f08072ff5559a762baed4bde399852c0960be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/302f08072ff5559a762baed4bde399852c0960be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/302f08072ff5559a762baed4bde399852c0960be", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/302f08072ff5559a762baed4bde399852c0960be/comments", "author": null, "committer": null, "parents": [{"sha": "8926e325dbd81f525a05e02cfad022b60a634590", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8926e325dbd81f525a05e02cfad022b60a634590", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8926e325dbd81f525a05e02cfad022b60a634590"}], "stats": {"total": 99, "additions": 56, "deletions": 43}, "files": [{"sha": "b653b58c385f14828fdbc4291e48d1df3333091f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/302f08072ff5559a762baed4bde399852c0960be/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/302f08072ff5559a762baed4bde399852c0960be/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=302f08072ff5559a762baed4bde399852c0960be", "patch": "@@ -1,3 +1,8 @@\n+2015-04-17  Tom de Vries  <tom@codesourcery.com>\n+\n+\t* tree-stdarg.c (optimize_va_list_gpr_fpr_size): Factor out of ...\n+\t(pass_stdarg::execute): ... here.\n+\n 2015-04-17  Tom de Vries  <tom@codesourcery.com>\n \t    Michael Matz  <matz@suse.de>\n "}, {"sha": "8d221a4b3a5be0a5026283cb5cb1e43ff9df7117", "filename": "gcc/tree-stdarg.c", "status": "modified", "additions": 51, "deletions": 43, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/302f08072ff5559a762baed4bde399852c0960be/gcc%2Ftree-stdarg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/302f08072ff5559a762baed4bde399852c0960be/gcc%2Ftree-stdarg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-stdarg.c?ref=302f08072ff5559a762baed4bde399852c0960be", "patch": "@@ -678,50 +678,10 @@ check_all_va_list_escapes (struct stdarg_info *si)\n   return false;\n }\n \n+/* Optimize FUN->va_list_gpr_size and FUN->va_list_fpr_size.  */\n \n-namespace {\n-\n-const pass_data pass_data_stdarg =\n-{\n-  GIMPLE_PASS, /* type */\n-  \"stdarg\", /* name */\n-  OPTGROUP_NONE, /* optinfo_flags */\n-  TV_NONE, /* tv_id */\n-  ( PROP_cfg | PROP_ssa ), /* properties_required */\n-  0, /* properties_provided */\n-  0, /* properties_destroyed */\n-  0, /* todo_flags_start */\n-  0, /* todo_flags_finish */\n-};\n-\n-class pass_stdarg : public gimple_opt_pass\n-{\n-public:\n-  pass_stdarg (gcc::context *ctxt)\n-    : gimple_opt_pass (pass_data_stdarg, ctxt)\n-  {}\n-\n-  /* opt_pass methods: */\n-  virtual bool gate (function *fun)\n-    {\n-      return (flag_stdarg_opt\n-#ifdef ACCEL_COMPILER\n-\t      /* Disable for GCC5 in the offloading compilers, as\n-\t\t va_list and gpr/fpr counter fields are not merged.\n-\t\t In GCC6 when stdarg is lowered late this shouldn't be\n-\t\t an issue.  */\n-\t      && !in_lto_p\n-#endif\n-\t      /* This optimization is only for stdarg functions.  */\n-\t      && fun->stdarg != 0);\n-    }\n-\n-  virtual unsigned int execute (function *);\n-\n-}; // class pass_stdarg\n-\n-unsigned int\n-pass_stdarg::execute (function *fun)\n+static void\n+optimize_va_list_gpr_fpr_size (function *fun)\n {\n   basic_block bb;\n   bool va_list_escapes = false;\n@@ -1054,6 +1014,54 @@ pass_stdarg::execute (function *fun)\n \tfprintf (dump_file, \"%d\", cfun->va_list_fpr_size);\n       fputs (\" FPR units.\\n\", dump_file);\n     }\n+}\n+\n+namespace {\n+\n+const pass_data pass_data_stdarg =\n+{\n+  GIMPLE_PASS, /* type */\n+  \"stdarg\", /* name */\n+  OPTGROUP_NONE, /* optinfo_flags */\n+  TV_NONE, /* tv_id */\n+  ( PROP_cfg | PROP_ssa ), /* properties_required */\n+  0, /* properties_provided */\n+  0, /* properties_destroyed */\n+  0, /* todo_flags_start */\n+  0, /* todo_flags_finish */\n+};\n+\n+class pass_stdarg : public gimple_opt_pass\n+{\n+public:\n+  pass_stdarg (gcc::context *ctxt)\n+    : gimple_opt_pass (pass_data_stdarg, ctxt)\n+  {}\n+\n+  /* opt_pass methods: */\n+  virtual bool gate (function *fun)\n+    {\n+      return (flag_stdarg_opt\n+#ifdef ACCEL_COMPILER\n+\t      /* Disable for GCC5 in the offloading compilers, as\n+\t\t va_list and gpr/fpr counter fields are not merged.\n+\t\t In GCC6 when stdarg is lowered late this shouldn't be\n+\t\t an issue.  */\n+\t      && !in_lto_p\n+#endif\n+\t      /* This optimization is only for stdarg functions.  */\n+\t      && fun->stdarg != 0);\n+    }\n+\n+  virtual unsigned int execute (function *);\n+\n+}; // class pass_stdarg\n+\n+unsigned int\n+pass_stdarg::execute (function *fun)\n+{\n+  optimize_va_list_gpr_fpr_size (fun);\n+\n   return 0;\n }\n "}]}