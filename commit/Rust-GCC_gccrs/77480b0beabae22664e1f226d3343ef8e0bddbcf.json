{"sha": "77480b0beabae22664e1f226d3343ef8e0bddbcf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzc0ODBiMGJlYWJhZTIyNjY0ZTFmMjI2ZDMzNDNlZjhlMGJkZGJjZg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2003-01-16T01:50:54Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2003-01-16T01:50:54Z"}, "message": "alpha.c (find_lo_sum_using_gp): Rename from find_lo_sum; also check that GP is being used.\n\n        * config/alpha/alpha.c (find_lo_sum_using_gp): Rename from find_lo_sum;\n        also check that GP is being used.\n        (alpha_find_lo_sum_using_gp): New.\n        (alpha_does_function_need_gp): Use get_attr_usegp.\n        * config/alpha/alpha-protos.h: Update.\n        * config/alpha/alpha.md (attr usegp): New.  Annotate patterns\n        as needed.\n\nFrom-SVN: r61376", "tree": {"sha": "e6a48abd87d10b6eaadbe77769e70f1488e793c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e6a48abd87d10b6eaadbe77769e70f1488e793c1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/77480b0beabae22664e1f226d3343ef8e0bddbcf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77480b0beabae22664e1f226d3343ef8e0bddbcf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77480b0beabae22664e1f226d3343ef8e0bddbcf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77480b0beabae22664e1f226d3343ef8e0bddbcf/comments", "author": null, "committer": null, "parents": [{"sha": "a013431213f7f27e2866350c9aaea8f12046d81c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a013431213f7f27e2866350c9aaea8f12046d81c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a013431213f7f27e2866350c9aaea8f12046d81c"}], "stats": {"total": 69, "additions": 50, "deletions": 19}, "files": [{"sha": "3b7e2f6a53176131731374ca04a162e5366d4785", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77480b0beabae22664e1f226d3343ef8e0bddbcf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77480b0beabae22664e1f226d3343ef8e0bddbcf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=77480b0beabae22664e1f226d3343ef8e0bddbcf", "patch": "@@ -1,3 +1,13 @@\n+2003-01-15  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/alpha/alpha.c (find_lo_sum_using_gp): Rename from find_lo_sum;\n+\talso check that GP is being used.\n+\t(alpha_find_lo_sum_using_gp): New.\n+\t(alpha_does_function_need_gp): Use get_attr_usegp.\n+\t* config/alpha/alpha-protos.h: Update.\n+\t* config/alpha/alpha.md (attr usegp): New.  Annotate patterns\n+\tas needed.\n+\n 2003-01-15  Roger Sayle  <roger@eyesopen.com>\n \n \t* gcse.c (one_cprop_pass): Change function arguments to take both"}, {"sha": "3bd852c59a177ee1c2c61089a245d22a071a85c0", "filename": "gcc/config/alpha/alpha-protos.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77480b0beabae22664e1f226d3343ef8e0bddbcf/gcc%2Fconfig%2Falpha%2Falpha-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77480b0beabae22664e1f226d3343ef8e0bddbcf/gcc%2Fconfig%2Falpha%2Falpha-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha-protos.h?ref=77480b0beabae22664e1f226d3343ef8e0bddbcf", "patch": "@@ -1,5 +1,5 @@\n /* Prototypes for alpha.c functions used in the md file & elsewhere.\n-   Copyright (C) 1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -142,6 +142,8 @@ extern rtx function_arg PARAMS ((CUMULATIVE_ARGS, enum machine_mode,\n extern void alpha_start_function PARAMS ((FILE *, const char *, tree));\n extern void alpha_end_function PARAMS ((FILE *, const char *, tree));\n \n+extern int alpha_find_lo_sum_using_gp PARAMS ((rtx));\n+\n #ifdef REAL_VALUE_TYPE\n extern int check_float_value PARAMS ((enum machine_mode,\n \t\t\t\t      REAL_VALUE_TYPE *, int));"}, {"sha": "2d38f2c6ae8932f55157be996b0cc4615cc18fcd", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77480b0beabae22664e1f226d3343ef8e0bddbcf/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77480b0beabae22664e1f226d3343ef8e0bddbcf/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=77480b0beabae22664e1f226d3343ef8e0bddbcf", "patch": "@@ -155,7 +155,7 @@ static rtx alpha_expand_builtin\n   PARAMS ((tree, rtx, rtx, enum machine_mode, int));\n static void alpha_sa_mask\n   PARAMS ((unsigned long *imaskP, unsigned long *fmaskP));\n-static int find_lo_sum\n+static int find_lo_sum_using_gp\n   PARAMS ((rtx *, void *));\n static int alpha_does_function_need_gp\n   PARAMS ((void));\n@@ -6970,11 +6970,18 @@ const struct attribute_spec vms_attribute_table[] =\n #endif\n \n static int\n-find_lo_sum (px, data)\n+find_lo_sum_using_gp (px, data)\n      rtx *px;\n      void *data ATTRIBUTE_UNUSED;\n {\n-  return GET_CODE (*px) == LO_SUM;\n+  return GET_CODE (*px) == LO_SUM && XEXP (*px, 0) == pic_offset_table_rtx;\n+}\n+\n+int\n+alpha_find_lo_sum_using_gp (insn)\n+     rtx insn;\n+{\n+  return for_each_rtx (&PATTERN (insn), find_lo_sum_using_gp, NULL) > 0;\n }\n \n static int\n@@ -7003,15 +7010,9 @@ alpha_does_function_need_gp ()\n   for (; insn; insn = NEXT_INSN (insn))\n     if (INSN_P (insn)\n \t&& GET_CODE (PATTERN (insn)) != USE\n-\t&& GET_CODE (PATTERN (insn)) != CLOBBER)\n-      {\n-\tenum attr_type type = get_attr_type (insn);\n-\tif (type == TYPE_LDSYM || type == TYPE_JSR)\n-\t  return 1;\n-\tif (TARGET_EXPLICIT_RELOCS\n-\t    && for_each_rtx (&PATTERN (insn), find_lo_sum, NULL) > 0)\n-\t  return 1;\n-      }\n+\t&& GET_CODE (PATTERN (insn)) != CLOBBER\n+\t&& get_attr_usegp (insn))\n+      return 1;\n \n   return 0;\n }"}, {"sha": "c943527fa1833f5d799937e36ca22171c9744830", "filename": "gcc/config/alpha/alpha.md", "status": "modified", "additions": 24, "deletions": 6, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77480b0beabae22664e1f226d3343ef8e0bddbcf/gcc%2Fconfig%2Falpha%2Falpha.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77480b0beabae22664e1f226d3343ef8e0bddbcf/gcc%2Fconfig%2Falpha%2Falpha.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.md?ref=77480b0beabae22664e1f226d3343ef8e0bddbcf", "patch": "@@ -142,6 +142,18 @@ fadd,fmul,fcpys,fdiv,fsqrt,misc,mvi,ftoi,itof,multi,none\"\n \n (define_attr \"length\" \"\"\n   (const_int 4))\n+\n+;; The USEGP attribute marks instructions that have relocations that use\n+;; the GP.\n+\n+(define_attr \"usegp\" \"no,yes\"\n+  (cond [(eq_attr \"type\" \"ldsym,jsr\")\n+\t   (const_string \"yes\")\n+\t (eq_attr \"type\" \"ild,fld,ist,fst\")\n+\t   (symbol_ref \"alpha_find_lo_sum_using_gp(insn)\")\n+\t]\n+\t(const_string \"no\")))\n+\n \f\n ;; Include scheduling descriptions.\n   \n@@ -402,7 +414,8 @@ fadd,fmul,fcpys,fdiv,fsqrt,misc,mvi,ftoi,itof,multi,none\"\n \t(plus:DI (match_operand:DI 1 \"register_operand\" \"r\")\n \t\t (high:DI (match_operand:DI 2 \"local_symbolic_operand\" \"\"))))]\n   \"TARGET_EXPLICIT_RELOCS\"\n-  \"ldah %0,%2(%1)\\t\\t!gprelhigh\")\n+  \"ldah %0,%2(%1)\\t\\t!gprelhigh\"\n+  [(set_attr \"usegp\" \"yes\")])\n \n (define_split\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n@@ -5304,7 +5317,8 @@ fadd,fmul,fcpys,fdiv,fsqrt,misc,mvi,ftoi,itof,multi,none\"\n     return \"lda %0,%2(%1)\\t\\t!gprel\";\n   else\n     return \"lda %0,%2(%1)\\t\\t!gprellow\";\n-})\n+}\n+  [(set_attr \"usegp\" \"yes\")])\n \n (define_split\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n@@ -5426,7 +5440,8 @@ fadd,fmul,fcpys,fdiv,fsqrt,misc,mvi,ftoi,itof,multi,none\"\n \t\t   UNSPEC_DTPREL))]\n   \"HAVE_AS_TLS\"\n   \"ldq %0,%2(%1)\\t\\t!gotdtprel\"\n-  [(set_attr \"type\" \"ild\")])\n+  [(set_attr \"type\" \"ild\")\n+   (set_attr \"usegp\" \"yes\")])\n \n (define_split\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n@@ -5447,7 +5462,8 @@ fadd,fmul,fcpys,fdiv,fsqrt,misc,mvi,ftoi,itof,multi,none\"\n \t\t   UNSPEC_TPREL))]\n   \"HAVE_AS_TLS\"\n   \"ldq %0,%2(%1)\\t\\t!gottprel\"\n-  [(set_attr \"type\" \"ild\")])\n+  [(set_attr \"type\" \"ild\")\n+   (set_attr \"usegp\" \"yes\")])\n \n (define_split\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n@@ -5478,7 +5494,8 @@ fadd,fmul,fcpys,fdiv,fsqrt,misc,mvi,ftoi,itof,multi,none\"\n    fmov %R1,%0\n    ldt %0,%1\n    stt %R1,%0\"\n-  [(set_attr \"type\" \"ilog,iadd,iadd,iadd,ldsym,ild,ist,fcpys,fld,fst\")])\n+  [(set_attr \"type\" \"ilog,iadd,iadd,iadd,ldsym,ild,ist,fcpys,fld,fst\")\n+   (set_attr \"usegp\" \"*,*,*,yes,*,*,*,*,*,*\")])\n \n ;; The 'U' constraint matches symbolic operands on Unicos/Mk. Those should\n ;; have been split up by the rules above but we shouldn't reject the\n@@ -5525,7 +5542,8 @@ fadd,fmul,fcpys,fdiv,fsqrt,misc,mvi,ftoi,itof,multi,none\"\n    stt %R1,%0\n    ftoit %1,%0\n    itoft %1,%0\"\n-  [(set_attr \"type\" \"ilog,iadd,iadd,iadd,ldsym,ild,ist,fcpys,fld,fst,ftoi,itof\")])\n+  [(set_attr \"type\" \"ilog,iadd,iadd,iadd,ldsym,ild,ist,fcpys,fld,fst,ftoi,itof\")\n+   (set_attr \"usegp\" \"*,*,*,yes,*,*,*,*,*,*,*,*\")])\n \n (define_insn \"*movdi_fix\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=r,r,r,r,r,m,*f,*f,Q,r,*f\")"}]}