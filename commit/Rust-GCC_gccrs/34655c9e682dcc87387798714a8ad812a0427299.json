{"sha": "34655c9e682dcc87387798714a8ad812a0427299", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzQ2NTVjOWU2ODJkY2M4NzM4Nzc5ODcxNGE4YWQ4MTJhMDQyNzI5OQ==", "commit": {"author": {"name": "Fabien Ch\u00eane", "email": "fabien.chene@gmail.com", "date": "2010-05-10T18:37:45Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2010-05-10T18:37:45Z"}, "message": "re PR c++/43719 (uninitialized const member incorrectly accepted, using an array)\n\n\tPR c++/43719\n\t* decl.c (check_initializer): strip array type before checking for\n\tuninitialized const or ref members.\n\nFrom-SVN: r159242", "tree": {"sha": "99bfd917483d7c8ebb3eadf53457cb4020d453a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/99bfd917483d7c8ebb3eadf53457cb4020d453a2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/34655c9e682dcc87387798714a8ad812a0427299", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34655c9e682dcc87387798714a8ad812a0427299", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34655c9e682dcc87387798714a8ad812a0427299", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34655c9e682dcc87387798714a8ad812a0427299/comments", "author": null, "committer": null, "parents": [{"sha": "1de12eab7496fe7a8a03e83efbbf6dd6318c3aa0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1de12eab7496fe7a8a03e83efbbf6dd6318c3aa0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1de12eab7496fe7a8a03e83efbbf6dd6318c3aa0"}], "stats": {"total": 223, "additions": 216, "deletions": 7}, "files": [{"sha": "c62f817e53a947bfd496bbd669be64bbb0091819", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34655c9e682dcc87387798714a8ad812a0427299/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34655c9e682dcc87387798714a8ad812a0427299/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=34655c9e682dcc87387798714a8ad812a0427299", "patch": "@@ -1,3 +1,9 @@\n+2010-05-10  Fabien Ch\u00eane  <fabien.chene@gmail.com>\n+\n+\tPR c++/43719\n+\t* decl.c (check_initializer): strip array type before checking for\n+\tuninitialized const or ref members.\n+\n 2010-05-07  Fabien Ch\u00eane  <fabien.chene@gmail.com>\n \n \tPR c++/43951"}, {"sha": "4aa34418020080296ebab1144e40e7baf3d97397", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34655c9e682dcc87387798714a8ad812a0427299/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34655c9e682dcc87387798714a8ad812a0427299/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=34655c9e682dcc87387798714a8ad812a0427299", "patch": "@@ -5207,6 +5207,7 @@ check_initializer (tree decl, tree init, int flags, tree *cleanup)\n {\n   tree type = TREE_TYPE (decl);\n   tree init_code = NULL;\n+  tree core_type;\n \n   /* Things that are going to be initialized need to have complete\n      type.  */\n@@ -5318,14 +5319,12 @@ check_initializer (tree decl, tree init, int flags, tree *cleanup)\n       check_for_uninitialized_const_var (decl);\n       return build_aggr_init_full_exprs (decl, init, flags);\n     }\n-  else if (MAYBE_CLASS_TYPE_P (type))\n+  else if (MAYBE_CLASS_TYPE_P (core_type = strip_array_types (type)))\n     {\n-      tree core_type = strip_array_types (type);\n-\n-      if (CLASSTYPE_READONLY_FIELDS_NEED_INIT (core_type))\n-\terror (\"structure %qD with uninitialized const members\", decl);\n-      if (CLASSTYPE_REF_FIELDS_NEED_INIT (core_type))\n-\terror (\"structure %qD with uninitialized reference members\", decl);\n+      if (CLASSTYPE_READONLY_FIELDS_NEED_INIT (core_type)\n+\t  || CLASSTYPE_REF_FIELDS_NEED_INIT (core_type))\n+\tdiagnose_uninitialized_cst_or_ref_member (core_type, /*using_new=*/false,\n+\t\t\t\t\t\t  /*complain=*/true);\n \n       check_for_uninitialized_const_var (decl);\n     }"}, {"sha": "7f76632a802af4d1e709806b647f915fe1529a08", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34655c9e682dcc87387798714a8ad812a0427299/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34655c9e682dcc87387798714a8ad812a0427299/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=34655c9e682dcc87387798714a8ad812a0427299", "patch": "@@ -1,3 +1,9 @@\n+2010-05-10  Fabien Ch\u00eane  <fabien.chene@gmail.com>\n+\n+\tPR c++/43719\n+\t* g++.dg/init/pr43719.C: New.\n+\t* g++.dg/anon-struct4.C: Adjust.\n+\n 2010-05-10  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR debug/44028"}, {"sha": "fa5bd4b3d8a8da65b568e8652b625984541ab059", "filename": "gcc/testsuite/g++.dg/ext/anon-struct4.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34655c9e682dcc87387798714a8ad812a0427299/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fanon-struct4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34655c9e682dcc87387798714a8ad812a0427299/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fanon-struct4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fanon-struct4.C?ref=34655c9e682dcc87387798714a8ad812a0427299", "patch": "@@ -2,3 +2,4 @@\n \n struct { struct { int& i ; } bar ; } foo ; // { dg-error \"uninitialized\" \"uninit\" }\n // { dg-warning \"anonymous\" \"anon\" { target *-*-* } 3 }\n+// { dg-message \"should be initialized\" \"ref-uninit\" { target *-*-* } 3 }"}, {"sha": "d3487c94a0929c95c5108b989aed4589490e7d5f", "filename": "gcc/testsuite/g++.dg/init/pr43719.C", "status": "added", "additions": 197, "deletions": 0, "changes": 197, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34655c9e682dcc87387798714a8ad812a0427299/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fpr43719.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34655c9e682dcc87387798714a8ad812a0427299/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fpr43719.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fpr43719.C?ref=34655c9e682dcc87387798714a8ad812a0427299", "patch": "@@ -0,0 +1,197 @@\n+// PR c++/43719\n+// { dg-do compile }\n+\n+struct A1\n+{\n+  int const j; // { dg-message \"should be initialized\" }\n+};\n+\n+struct A2\n+{\n+  int const volatile i; // { dg-message \"should be initialized\" }\n+};\n+\n+struct A3\n+{\n+  int& ref; // { dg-message \"should be initialized\" }\n+};\n+\n+struct A4\n+{\n+  int const& ref; // { dg-message \"should be initialized\" }\n+};\n+\n+struct A5\n+{\n+  int& ref; // { dg-message \"should be initialized\" }\n+  int const i; // { dg-message \"should be initialized\" }\n+};\n+\n+template <class T> struct S1\n+{\n+  T const i; // { dg-message \"should be initialized\" }\n+};\n+\n+template <class T> struct S2\n+{\n+  T const volatile i; // { dg-message \"should be initialized\" }\n+};\n+\n+template <class T> struct S3\n+{\n+  T& ref; // { dg-message \"should be initialized\" }\n+};\n+\n+template <class T> struct S4\n+{\n+  T const i; // { dg-message \"should be initialized\" }\n+  T& ref; // { dg-message \"should be initialized\" }\n+};\n+\n+struct X\n+{\n+  X () : c (0), r (c) {}\n+  int const c;\n+  int const& r;\n+};\n+\n+struct Y11\n+{\n+  int const i; // { dg-message \"should be initialized\" }\n+};\n+\n+struct Y1\n+{\n+  Y11 a[1];\n+};\n+\n+struct Y22\n+{\n+  int& ref; // { dg-message \"should be initialized\" }\n+};\n+\n+struct Y2\n+{\n+  Y22 a[1];\n+};\n+\n+struct Z1\n+{\n+  int const i; // { dg-message \"should be initialized\" }\n+};\n+\n+struct Z2\n+{\n+  int& ref; // { dg-message \"should be initialized\" }\n+};\n+\n+struct Z3\n+{\n+  int const i; // { dg-message \"should be initialized\" }\n+};\n+\n+struct Z4\n+{\n+  int& ref; // { dg-message \"should be initialized\" }\n+};\n+\n+struct Z5\n+{\n+  int i;\n+};\n+\n+struct Z\n+{\n+  Z1 z1;\n+  Z2 z2;\n+  Z3 z3;\n+  Z4 z4;\n+  Z5 z5;\n+};\n+\n+union U\n+{\n+  int const i; // { dg-message \"should be initialized\" }\n+};\n+\n+\n+void f1 ()\n+{\n+  A1 a1; // { dg-error \"uninitialized const member\" }\n+}\n+\n+void f2 ()\n+{\n+  A2 a2; // { dg-error \"uninitialized const member\" }\n+}\n+\n+void f3 ()\n+{\n+  A3 a3; // { dg-error \"uninitialized reference member\" }\n+}\n+\n+void f4 ()\n+{\n+  A4 a4; // { dg-error \"uninitialized reference member\" }\n+}\n+\n+void f5 ()\n+{\n+  A5 a5; // { dg-error \"uninitialized reference member|uninitialized const member\" }\n+}\n+\n+void f6 ()\n+{\n+  S1<int> s; // { dg-error \"uninitialized const member\" }\n+}\n+\n+void f7 ()\n+{\n+  S2<int> s; // { dg-error \"uninitialized const member\" }\n+}\n+\n+void f8 ()\n+{\n+  S3<int> s; // { dg-error \"uninitialized reference member\" }\n+}\n+\n+void f9 ()\n+{\n+  S4<int> s; // { dg-error \"uninitialized reference member|uninitialized const member\" }\n+}\n+\n+void f10 ()\n+{\n+  X x;\n+}\n+\n+void f11 ()\n+{\n+  A1 a[ 1 ]; // { dg-error \"uninitialized const member\" }\n+}\n+\n+void f12 ()\n+{\n+  A3 a[ 1 ]; // { dg-error \"uninitialized reference member\" }\n+}\n+\n+void f13 ()\n+{\n+  Y1 y1; // { dg-error \"uninitialized const member\" }\n+}\n+\n+void f14 ()\n+{\n+  Y2 y2; // { dg-error \"uninitialized reference member\" }\n+}\n+\n+void f15 ()\n+{\n+  Z z; // { dg-error \"uninitialized reference member|uninitialized const member\" }\n+}\n+\n+void f16 ()\n+{\n+  U u; // { dg-error \"uninitialized const member\" }\n+}\n+"}]}