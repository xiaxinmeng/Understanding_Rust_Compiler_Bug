{"sha": "6e4c6a248b55cad0775c9f47bfcdff79e15b913d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmU0YzZhMjQ4YjU1Y2FkMDc3NWM5ZjQ3YmZjZGZmNzllMTViOTEzZA==", "commit": {"author": {"name": "Steven Munroe", "email": "munroesj@gcc.gnu.org", "date": "2017-08-25T15:23:27Z"}, "committer": {"name": "Steven Munroe", "email": "munroesj@gcc.gnu.org", "date": "2017-08-25T15:23:27Z"}, "message": "Part 3/3 for contributing PPC64LE support for X86 SSE instrisics. \nThis patch includes testsuite/gcc.target tests for the intrinsics\nin xmmintrin.h.  For these tests I added -Wno-psabi to dg-options\nto suppress warnings associated with the vector ABI change in GCC5.\n\nFrom-SVN: r251357", "tree": {"sha": "01fa7a6cf37e6008451c3756556bcea28fdf187d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/01fa7a6cf37e6008451c3756556bcea28fdf187d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6e4c6a248b55cad0775c9f47bfcdff79e15b913d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e4c6a248b55cad0775c9f47bfcdff79e15b913d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e4c6a248b55cad0775c9f47bfcdff79e15b913d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/comments", "author": null, "committer": null, "parents": [{"sha": "202532502562a2acb843b9f0804534f5e22730a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/202532502562a2acb843b9f0804534f5e22730a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/202532502562a2acb843b9f0804534f5e22730a2"}], "stats": {"total": 3147, "additions": 3147, "deletions": 0}, "files": [{"sha": "70218ab223b441cd56ed79c3b21538ec33b754c8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6e4c6a248b55cad0775c9f47bfcdff79e15b913d", "patch": "@@ -1,3 +1,71 @@\n+2017-08-25  Steven Munroe  <munroesj@gcc.gnu.org>\n+\n+\t* gcc.target/powerpc/m128-check.h: New file.\n+\t* gcc.target/powerpc/sse-check.h: New file.\n+\t* gcc.target/powerpc/sse-movmskps-1.c: New file.\n+\t* gcc.target/powerpc/sse-movlps-2.c: New file.\n+\t* gcc.target/powerpc/sse-pavgw-1.c: New file.\n+\t* gcc.target/powerpc/sse-cvttss2si-1.c: New file.\n+\t* gcc.target/powerpc/sse-cvtpi32x2ps-1.c: New file.\n+\t* gcc.target/powerpc/sse-cvtss2si-1.c: New file.\n+\t* gcc.target/powerpc/sse-divss-1.c: New file.\n+\t* gcc.target/powerpc/sse-movhps-1.c: New file.\n+\t* gcc.target/powerpc/sse-cvtsi2ss-2.c: New file.\n+\t* gcc.target/powerpc/sse-subps-1.c: New file.\n+\t* gcc.target/powerpc/sse-minps-1.c: New file.\n+\t* gcc.target/powerpc/sse-pminub-1.c: New file.\n+\t* gcc.target/powerpc/sse-cvtpu16ps-1.c: New file.\n+\t* gcc.target/powerpc/sse-shufps-1.c: New file.\n+\t* gcc.target/powerpc/sse-ucomiss-2.c: New file.\n+\t* gcc.target/powerpc/sse-maxps-1.c: New file.\n+\t* gcc.target/powerpc/sse-pmaxub-1.c: New file.\n+\t* gcc.target/powerpc/sse-movmskb-1.c: New file.\n+\t* gcc.target/powerpc/sse-ucomiss-4.c: New file.\n+\t* gcc.target/powerpc/sse-unpcklps-1.c: New file.\n+\t* gcc.target/powerpc/sse-mulps-1.c: New file.\n+\t* gcc.target/powerpc/sse-rcpps-1.c: New file.\n+\t* gcc.target/powerpc/sse-pminsw-1.c: New file.\n+\t* gcc.target/powerpc/sse-ucomiss-6.c: New file.\n+\t* gcc.target/powerpc/sse-subss-1.c: New file.\n+\t* gcc.target/powerpc/sse-movss-2.c: New file.\n+\t* gcc.target/powerpc/sse-pmaxsw-1.c: New file.\n+\t* gcc.target/powerpc/sse-minss-1.c: New file.\n+\t* gcc.target/powerpc/sse-movaps-2.c: New file.\n+\t* gcc.target/powerpc/sse-movlps-1.c: New file.\n+\t* gcc.target/powerpc/sse-maxss-1.c: New file.\n+\t* gcc.target/powerpc/sse-movhlps-1.c: New file.\n+\t* gcc.target/powerpc/sse-cvttss2si-2.c: New file.\n+\t* gcc.target/powerpc/sse-cvtpi8ps-1.c: New file.\n+\t* gcc.target/powerpc/sse-cvtpi32ps-1.c: New file.\n+\t* gcc.target/powerpc/sse-mulss-1.c: New file.\n+\t* gcc.target/powerpc/sse-cvtsi2ss-1.c: New file.\n+\t* gcc.target/powerpc/sse-cvtss2si-2.c: New file.\n+\t* gcc.target/powerpc/sse-movlhps-1.c: New file.\n+\t* gcc.target/powerpc/sse-movhps-2.c: New file.\n+\t* gcc.target/powerpc/sse-rsqrtps-1.c: New file.\n+\t* gcc.target/powerpc/sse-xorps-1.c: New file.\n+\t* gcc.target/powerpc/sse-cvtpspi8-1.c: New file.\n+\t* gcc.target/powerpc/sse-orps-1.c: New file.\n+\t* gcc.target/powerpc/sse-addps-1.c: New file.\n+\t* gcc.target/powerpc/sse-cvtpi16ps-1.c: New file.\n+\t* gcc.target/powerpc/sse-ucomiss-1.c: New file.\n+\t* gcc.target/powerpc/sse-ucomiss-3.c: New file.\n+\t* gcc.target/powerpc/sse-pmulhuw-1.c: New file.\n+\t* gcc.target/powerpc/sse-andps-1.c: New file.\n+\t* gcc.target/powerpc/sse-cmpss-1.c: New file.\n+\t* gcc.target/powerpc/sse-divps-1.c: New file.\n+\t* gcc.target/powerpc/sse-andnps-1.c: New file.\n+\t* gcc.target/powerpc/sse-ucomiss-5.c: New file.\n+\t* gcc.target/powerpc/sse-movss-1.c: New file.\n+\t* gcc.target/powerpc/sse-sqrtps-1.c: New file.\n+\t* gcc.target/powerpc/sse-cvtpu8ps-1.c: New file.\n+\t* gcc.target/powerpc/sse-cvtpspi16-1.c: New file.\n+\t* gcc.target/powerpc/sse-movaps-1.c: New file.\n+\t* gcc.target/powerpc/sse-movss-3.c: New file.\n+\t* gcc.target/powerpc/sse-unpckhps-1.c: New file.\n+\t* gcc.target/powerpc/sse-addss-1.c: New file.\n+\t* gcc.target/powerpc/sse-psadbw-1.c: New file.\n+\n 2017-08-24  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \t* gcc.target/powerpc/dform-1.c: Delete -mpower9-dform*"}, {"sha": "fcb631a19ff05b580c8c9c311bf56f467a533777", "filename": "gcc/testsuite/gcc.target/powerpc/m128-check.h", "status": "added", "additions": 222, "deletions": 0, "changes": 222, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fm128-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fm128-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fm128-check.h?ref=6e4c6a248b55cad0775c9f47bfcdff79e15b913d", "patch": "@@ -0,0 +1,222 @@\n+#include <stdio.h>\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+\n+#ifdef __ALTIVEC__\n+#include <xmmintrin.h>\n+\n+#ifdef __VSX_SSE2__\n+#include <emmintrin.h>\n+\n+typedef union\n+{\n+  __m128i x;\n+  char a[16];\n+} union128i_b;\n+\n+typedef union\n+{\n+  __m128i x;\n+  unsigned char a[16];\n+} union128i_ub;\n+\n+typedef union\n+{\n+  __m128i x;\n+  short a[8];\n+} union128i_w;\n+\n+typedef union\n+{\n+  __m128i x;\n+  unsigned short a[8];\n+} union128i_uw;\n+\n+typedef union\n+{\n+  __m128i x;\n+  int a[4];\n+} union128i_d;\n+\n+typedef union\n+{\n+  __m128i x;\n+  unsigned int a[4];\n+} union128i_ud;\n+\n+#if __VSX__\n+typedef union\n+{\n+  __m128i x;\n+  long long a[2];\n+} union128i_q;\n+\n+typedef union\n+{\n+  __m128i x;\n+  unsigned long long a[2];\n+} union128i_uq;\n+\n+\n+typedef union\n+{\n+  __m128d x;\n+  double a[2];\n+} union128d;\n+#endif\n+\n+#endif\n+typedef union\n+{\n+  __m128  x;\n+  float a[4];\n+  int i[4];\n+} union128;\n+\n+#ifndef ARRAY_SIZE\n+#define ARRAY_SIZE(A) (sizeof (A) / sizeof ((A)[0]))\n+#endif\n+\n+#ifdef DEBUG\n+#define PRINTF printf\n+#else\n+#define PRINTF(...)\t\n+#endif\n+\n+#define CHECK_EXP(UINON_TYPE, VALUE_TYPE, FMT)\t\t\\\n+static int\t\t\t\t\t\t\\\n+__attribute__((noinline, unused))\t\t\t\\\n+check_##UINON_TYPE (UINON_TYPE u, const VALUE_TYPE *v)\t\\\n+{\t\t\t\t\t\t\t\\\n+  int i;\t\t\t\t\t\t\\\n+  int err = 0;\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\\\n+  for (i = 0; i < ARRAY_SIZE (u.a); i++)\t\t\\\n+    if (u.a[i] != v[i])\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\\\n+\terr++;\t\t\t\t\t\t\\\n+\tPRINTF (\"%i: \" FMT \" != \" FMT \"\\n\",\t\t\\\n+\t\ti, v[i], u.a[i]);\t\t\t\\\n+      }\t\t\t\t\t\t\t\\\n+  return err;\t\t\t\t\t\t\\\n+}\n+\n+#ifdef __VSX_SSE2__\n+CHECK_EXP (union128i_b, char, \"%d\")\n+CHECK_EXP (union128i_ub, unsigned char, \"%d\")\n+CHECK_EXP (union128i_w, short, \"%d\")\n+CHECK_EXP (union128i_uw, unsigned short, \"%d\")\n+CHECK_EXP (union128i_d, int, \"0x%x\")\n+CHECK_EXP (union128i_ud, unsigned int, \"0x%x\")\n+#ifdef __VSX__\n+CHECK_EXP (union128i_q, long long, \"0x%llx\")\n+CHECK_EXP (union128i_uq, unsigned long long, \"0x%llx\")\n+CHECK_EXP (union128d, double, \"%f\")\n+#endif\n+#endif\n+\n+CHECK_EXP (union128, float, \"%f\")\n+\n+#define ESP_FLOAT 0.000001\n+#define ESP_DOUBLE 0.000001\n+#define CHECK_ARRAY(ARRAY, TYPE, FMT)                   \\\n+static int                                              \\\n+__attribute__((noinline, unused))                       \\\n+checkV##ARRAY (const TYPE *v, const TYPE *e, int n)     \\\n+{                                                       \\\n+  int i;                                                \\\n+  int err = 0;                                          \\\n+                                                        \\\n+  for (i = 0; i < n; i++)                               \\\n+    if (v[i] != e[i])                                   \\\n+      {                                                 \\\n+        err++;                                          \\\n+        PRINTF (\"%i: \" FMT \" != \" FMT \"\\n\",             \\\n+                i, v[i], e[i]);                 \\\n+      }                                                 \\\n+  return err;                                           \\\n+}\n+\n+CHECK_ARRAY(c, char, \"0x%hhx\")\n+CHECK_ARRAY(s, short, \"0x%hx\")\n+CHECK_ARRAY(i, int, \"0x%x\")\n+CHECK_ARRAY(l, long long, \"0x%llx\")\n+CHECK_ARRAY(uc, unsigned char, \"0x%hhx\")\n+CHECK_ARRAY(us, unsigned short, \"0x%hx\")\n+CHECK_ARRAY(ui, unsigned int, \"0x%x\")\n+CHECK_ARRAY(ul, unsigned long long, \"0x%llx\")\n+\n+\n+\n+#define CHECK_FP_ARRAY(ARRAY, TYPE, ESP, FMT)                   \\\n+static int                                              \\\n+__attribute__((noinline, unused))                       \\\n+checkV##ARRAY (const TYPE *v, const TYPE *e, int n)     \\\n+{                                                       \\\n+  int i;                                                \\\n+  int err = 0;                                          \\\n+                                                        \\\n+  for (i = 0; i < n; i++)                               \\\n+    if (v[i] > (e[i] + (ESP)) || v[i] < (e[i] - (ESP))) \\\n+    if (e[i] != v[i])                                   \\\n+      {                                                 \\\n+        err++;                                          \\\n+        PRINTF (\"%i: \" FMT \" != \" FMT \"\\n\",             \\\n+                i, v[i], e[i]);                 \\\n+      }                                                 \\\n+  return err;                                           \\\n+}\n+\n+CHECK_FP_ARRAY (d, double, ESP_DOUBLE, \"%f\")\n+CHECK_FP_ARRAY (f, float, ESP_FLOAT, \"%f\")\n+\n+#ifdef NEED_IEEE754_FLOAT\n+union ieee754_float\n+{\n+   float d;\n+   struct \n+   {\n+      unsigned long frac : 23;\n+      unsigned exp : 8;\n+      unsigned sign : 1;\n+   } bits __attribute__((packed));\n+};\n+#endif\n+\n+#ifdef NEED_IEEE754_DOUBLE\n+union ieee754_double\n+{\n+   double d;\n+   struct \n+   {\n+      unsigned long frac1 : 32;\n+      unsigned long frac0 : 20;\n+      unsigned exp : 11;\n+      unsigned sign : 1;\n+   } bits __attribute__((packed));\n+};\n+#endif\n+\n+#define CHECK_FP_EXP(UINON_TYPE, VALUE_TYPE, ESP, FMT)\t\t\\\n+static int\t\t\t\t\t\t\t\\\n+__attribute__((noinline, unused))\t\t\t\t\\\n+check_fp_##UINON_TYPE (UINON_TYPE u, const VALUE_TYPE *v)\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  int i;\t\t\t\t\t\t\t\\\n+  int err = 0;\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+  for (i = 0; i < ARRAY_SIZE (u.a); i++)\t\t\t\\\n+    if (u.a[i] > (v[i] + (ESP)) || u.a[i] < (v[i] - (ESP)))\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\terr++;\t\t\t\t\t\t\t\\\n+\tPRINTF (\"%i: \" FMT \" != \" FMT \"\\n\",\t\t\t\\\n+\t\ti, v[i], u.a[i]);\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+  return err;\t\t\t\t\t\t\t\\\n+}\n+\n+CHECK_FP_EXP (union128, float, ESP_FLOAT, \"%f\")\n+#ifdef __VSX_SSE2__\n+CHECK_FP_EXP (union128d, double, ESP_DOUBLE, \"%f\")\n+#endif\n+#endif /* __ALTIVEC__ */"}, {"sha": "9f12c9011d67b23bbc5799df76f3d5aa4ef95fb9", "filename": "gcc/testsuite/gcc.target/powerpc/sse-addps-1.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-addps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-addps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-addps-1.c?ref=6e4c6a248b55cad0775c9f47bfcdff79e15b913d", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse_test_addps_1\n+#endif\n+\n+#include <xmmintrin.h>\n+\n+static __m128\n+__attribute__((noinline, unused))\n+test (__m128 s1, __m128 s2)\n+{\n+  return _mm_add_ps (s1, s2); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128 u, s1, s2;\n+  float e[4];\n+  int i;\n+   \n+  s1.x = _mm_set_ps (24.43, 68.346, 43.35, 546.46);\n+  s2.x = _mm_set_ps (1.17, 2.16, 3.15, 4.14);\n+  u.x = test (s1.x, s2.x); \n+  \n+  for (i = 0; i < 4; i++)\n+    e[i] = s1.a[i] + s2.a[i];   \n+\n+  if (check_union128 (u, e))\n+    abort ();\n+}"}, {"sha": "28224c982388302b7f7516acc292799456900317", "filename": "gcc/testsuite/gcc.target/powerpc/sse-addss-1.c", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-addss-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-addss-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-addss-1.c?ref=6e4c6a248b55cad0775c9f47bfcdff79e15b913d", "patch": "@@ -0,0 +1,56 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse_test_addss_1\n+#endif\n+\n+#include <xmmintrin.h>\n+\n+static __m128\n+__attribute__((noinline, unused))\n+test (__m128 s1, __m128 s2)\n+{\n+  return _mm_add_ss (s1, s2); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128 u, s1, s2;\n+  float e[4];\n+   \n+  s1.x = _mm_set_ps (24.43, 68.346, 43.35, 546.46);\n+  s2.x = _mm_set_ps (1.17, 2.16, 3.15, 4.14);\n+  u.x = test (s1.x, s2.x); \n+\n+  e[0] = s1.a[0] + s2.a[0];\n+  e[1] = s1.a[1];\n+  e[2] = s1.a[2];\n+  e[3] = s1.a[3];\n+\n+  if (check_union128 (u, e))\n+#if DEBUG\n+  {\n+\t  printf (\"sse_test_addss_1; check_union128 failed\\n\");\n+      printf (\"\\t add ([%f,%f,%f,%f], [%f,%f,%f,%f]) -> [%f,%f,%f,%F]\\n\",\n+    \t\t  s1.x[0], s1.x[1], s1.x[2], s1.x[3],\n+    \t\t  s2.x[0], s2.x[1], s2.x[2], s2.x[3],\n+\t\t\t  u.x[0], u.x[1], u.x[2], u.x[3]);\n+      printf (\"\\t expect [%f,%f,%f%f]\\n\",\n+    \t\t  e[0], e[1], e[2], e[3]);\n+  }\n+#else\n+    abort ();\n+#endif\n+}"}, {"sha": "8d090484934b61459285413b6f5dbaafbde1bf72", "filename": "gcc/testsuite/gcc.target/powerpc/sse-andnps-1.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-andnps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-andnps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-andnps-1.c?ref=6e4c6a248b55cad0775c9f47bfcdff79e15b913d", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse_test_andnps_1\n+#endif\n+\n+#include <xmmintrin.h>\n+\n+static __m128\n+__attribute__((noinline, unused))\n+test (__m128 s1, __m128 s2)\n+{\n+  return _mm_andnot_ps (s1, s2); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128 u, s1, s2;\n+  int source1[4]={34, 545, 955, 67};\n+  int source2[4]={67, 4, 57, 897};\n+  int e[4];\n+   \n+  s1.x = _mm_loadu_ps ((float *)source1);\n+  s2.x = _mm_loadu_ps ((float *)source2);\n+  u.x = test (s1.x, s2.x); \n+   \n+  e[0] = (~source1[0]) & source2[0];\n+  e[1] = (~source1[1]) & source2[1];\n+  e[2] = (~source1[2]) & source2[2];\n+  e[3] = (~source1[3]) & source2[3];\n+\n+  if (check_union128 (u, (float *)e))\n+    abort ();\n+}"}, {"sha": "80674ef0e43696dec84c01d3d0b5d43e01e12b0b", "filename": "gcc/testsuite/gcc.target/powerpc/sse-andps-1.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-andps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-andps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-andps-1.c?ref=6e4c6a248b55cad0775c9f47bfcdff79e15b913d", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse_test_andps_1\n+#endif\n+\n+#include <xmmintrin.h>\n+\n+static __m128\n+__attribute__((noinline, unused))\n+test (__m128 s1, __m128 s2)\n+{\n+  return _mm_and_ps (s1, s2); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128 u, s1, s2;\n+  union\n+  {\n+    float f[4];\n+    int   i[4];\n+  }source1, source2, e;\n+\n+  s1.x = _mm_set_ps (34, 545, 955, 67);\n+  s2.x = _mm_set_ps (67, 4, 57, 897);\n+\n+  _mm_storeu_ps (source1.f, s1.x);\n+  _mm_storeu_ps (source2.f, s2.x);\n+\n+  u.x = test (s1.x, s2.x); \n+   \n+  e.i[0] = source1.i[0] & source2.i[0];\n+  e.i[1] = source1.i[1] & source2.i[1];\n+  e.i[2] = source1.i[2] & source2.i[2];\n+  e.i[3] = source1.i[3] & source2.i[3];\n+\n+  if (check_union128 (u, e.f))\n+    abort ();\n+}"}, {"sha": "7e9ebdf0e032361ad037aaee6cec7865c7528633", "filename": "gcc/testsuite/gcc.target/powerpc/sse-check.h", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-check.h?ref=6e4c6a248b55cad0775c9f47bfcdff79e15b913d", "patch": "@@ -0,0 +1,41 @@\n+#include <stdlib.h>\n+#include \"m128-check.h\"\n+\n+#define DEBUG 1\n+\n+#define TEST sse_test\n+\n+static void sse_test (void);\n+\n+static void\n+__attribute__ ((noinline))\n+do_test (void)\n+{\n+  sse_test ();\n+}\n+\n+int\n+main ()\n+  {\n+#ifdef __BUILTIN_CPU_SUPPORTS__\n+    /* Most SSE intrinsic operations can be implemented via VMX\n+       instructions, but some operations may be faster / simpler\n+       using the POWER8 VSX instructions.  This is especially true\n+       when we are transferring / converting to / from __m64 types.\n+       The direct register transfer instructions from POWER8 are\n+       especially important.  So we test for arch_2_07.  */\n+    if ( __builtin_cpu_supports (\"arch_2_07\") )\n+      {\n+\tdo_test ();\n+#ifdef DEBUG\n+\tprintf (\"PASSED\\n\");\n+#endif\n+      }\n+#ifdef DEBUG\n+    else\n+    printf (\"SKIPPED\\n\");\n+#endif\n+#endif /* __BUILTIN_CPU_SUPPORTS__ */\n+    return 0;\n+  }\n+"}, {"sha": "8e88f0006faf671d2600d12463cdd0e54fa839c6", "filename": "gcc/testsuite/gcc.target/powerpc/sse-cmpss-1.c", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-cmpss-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-cmpss-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-cmpss-1.c?ref=6e4c6a248b55cad0775c9f47bfcdff79e15b913d", "patch": "@@ -0,0 +1,70 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse_test_cmpss_1\n+#endif\n+\n+#include <math.h>\n+\n+static float s1[]={2134.3343, 6678.346, 453.345635, 54646.464356};\n+static float s2[]={41124.234, 6678.346, 8653.65635, 856.43576};\n+static int dd[] = {1, 2, 3, 4};\n+static float d[4];\n+static union{int i[4]; float f[4];} e;\n+\n+void sse_cmp_check(char *id)\n+{\n+  int *pd = (int*)&d;\n+    if(checkVi((int*)d, e.i, 4)){\n+\tprintf(\"mm_cmp%s_ss FAILED\\n\", id);\n+\tprintf(\"\\td %f %s %f]\\n\",\n+\t       s1[0] , id, s2[1]);\n+\tprintf(\"\\td [%x,%x,%x,%x]\\n\",\n+\t       pd[0], pd[1], pd[2], pd[3]);\n+\tprintf(\"\\te [%x,%x,%x,%x]\\n\",\n+\t       e.i[0], e.i[1], e.i[2], e.i[3]);\n+    }\n+}\n+\n+static void\n+TEST ()\n+{\n+    __m128 source1, source2, dest;\n+    int i;\n+\n+#define CMP(cmp, rel)\t\t\t\t\t\\\n+    e.i[0] = rel ? -1 : 0;\t                        \\\n+    dest = _mm_loadu_ps((float*)dd);\t\t\t\\\n+    source1 = _mm_loadu_ps(s1);\t\t\t\t\\\n+    source2 = _mm_loadu_ps(s2);\t\t\t\t\\\n+    dest = _mm_cmp##cmp##_ss(source1, source2);\t\t\\\n+    _mm_storeu_ps(d, dest);\t\t\t        \\\n+    sse_cmp_check(\"\" #cmp \"\");\n+\n+    for(i = 1; i < 4; i++) e.f[i] = s1[i];\n+    \n+    CMP(eq, !isunordered(s1[0], s2[0]) && s1[0] == s2[0]);\n+    CMP(lt, !isunordered(s1[0], s2[0]) && s1[0] < s2[0]);\n+    CMP(le, !isunordered(s1[0], s2[0]) && s1[0] <= s2[0]);\n+    CMP(unord, isunordered(s1[0], s2[0]));\n+    CMP(neq, isunordered(s1[0], s2[0]) || s1[0] != s2[0]);\n+    CMP(nlt, isunordered(s1[0], s2[0]) || s1[0] >= s2[0]);\n+    CMP(nle, isunordered(s1[0], s2[0]) || s1[0] > s2[0]);\n+    CMP(ord, !isunordered(s1[0], s2[0]));\n+\n+    CMP(ge, isunordered(s1[0], s2[0]) || s1[0] >= s2[0]);\n+    CMP(gt, isunordered(s1[0], s2[0]) || s1[0] > s2[0]);\n+    CMP(nge, !isunordered(s1[0], s2[0]) && s1[0] < s2[0]);\n+    CMP(ngt, !isunordered(s1[0], s2[0]) && s1[0] <= s2[0]);\n+}"}, {"sha": "93184fd4953c2ae943aa7cd3a3f772e27e03d4da", "filename": "gcc/testsuite/gcc.target/powerpc/sse-cvtpi16ps-1.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-cvtpi16ps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-cvtpi16ps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-cvtpi16ps-1.c?ref=6e4c6a248b55cad0775c9f47bfcdff79e15b913d", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse_test_cvtpi16ps_1\n+#endif\n+\n+#include <xmmintrin.h>\n+\n+static __m128\n+__attribute__((noinline, unused))\n+test (__m64  __A)\n+{\n+  return _mm_cvtpi16_ps (__A);\n+}\n+\n+static void\n+TEST (void)\n+{\n+  __m64_union s1;\n+  union128 u;\n+  float e[4] = {1000.0, -20000.0, 45.0, -546.0};\n+\n+  s1.as_m64 = _mm_setr_pi16 (1000, -20000, 45, -546);\n+   \n+  u.x = test (s1.as_m64);\n+\n+  if (check_union128 (u, e))\n+    abort ();\n+}"}, {"sha": "eccafc78d72f4c99fe0346b170b246f4387605bf", "filename": "gcc/testsuite/gcc.target/powerpc/sse-cvtpi32ps-1.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-cvtpi32ps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-cvtpi32ps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-cvtpi32ps-1.c?ref=6e4c6a248b55cad0775c9f47bfcdff79e15b913d", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse_test_cvtpi32ps_1\n+#endif\n+\n+#include <xmmintrin.h>\n+\n+static __m128\n+__attribute__((noinline, unused))\n+test (__m128  __A, __m64  __B)\n+{\n+  return _mm_cvtpi32_ps (__A, __B);\n+}\n+\n+static void\n+TEST (void)\n+{\n+  __m64_union s1;\n+  union128 s2, u;\n+  float e[4] = {1000.0, -20000.0, 43.35, 546.46};\n+\n+  s1.as_m64 = _mm_setr_pi32 (1000, -20000);\n+   \n+  s2.x = _mm_setr_ps (24.43, 68.346, 43.35, 546.46);\n+  u.x = test (s2.x, s1.as_m64);\n+\n+\n+  if (check_union128 (u, e))\n+    abort ();\n+}"}, {"sha": "da35af347af0e76fd92195fcca16115e822c6f3c", "filename": "gcc/testsuite/gcc.target/powerpc/sse-cvtpi32x2ps-1.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-cvtpi32x2ps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-cvtpi32x2ps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-cvtpi32x2ps-1.c?ref=6e4c6a248b55cad0775c9f47bfcdff79e15b913d", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse_test_cvtpi32x2ps_1\n+#endif\n+\n+#include <xmmintrin.h>\n+\n+static __m128\n+__attribute__((noinline, unused))\n+test (__m64  __A, __m64  __B)\n+{\n+  return _mm_cvtpi32x2_ps (__A, __B);\n+}\n+\n+static void\n+TEST (void)\n+{\n+  __m64_union s1, s2;\n+  union128 u;\n+  float e[4] = {1000.0, -20000.0, 43.0, 546.0};\n+\n+  /* input signed in {1000, -20000, 43, 546}.  */\n+  s1.as_m64 = _mm_setr_pi32 (1000, -20000);\n+  s2.as_m64 = _mm_setr_pi32 (43, 546);\n+   \n+  u.x = test (s1.as_m64, s2.as_m64);\n+\n+\n+  if (check_union128 (u, e))\n+    abort ();\n+}"}, {"sha": "163b2eece0c8eb2754f3c754ec5f46c63c77c5f8", "filename": "gcc/testsuite/gcc.target/powerpc/sse-cvtpi8ps-1.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-cvtpi8ps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-cvtpi8ps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-cvtpi8ps-1.c?ref=6e4c6a248b55cad0775c9f47bfcdff79e15b913d", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse_test_cvtpi8ps_1\n+#endif\n+\n+#include <xmmintrin.h>\n+\n+static __m128\n+__attribute__((noinline, unused))\n+test (__m64  __A)\n+{\n+  return _mm_cvtpi8_ps (__A);\n+}\n+\n+//static\n+void\n+TEST (void)\n+{\n+  __m64_union s1;\n+  union128 u;\n+  float e[4] = {100.0, -100.0, 45.0, -1.0};\n+\n+  s1.as_m64 = _mm_setr_pi8 (100, -100, 45, -1, 123, -21, 34, 56);\n+   \n+  u.x = test (s1.as_m64);\n+\n+  if (check_union128 (u, e))\n+    abort ();\n+}"}, {"sha": "39ea4cf5794f5c23bc43aa7ba4aac83501f51c77", "filename": "gcc/testsuite/gcc.target/powerpc/sse-cvtpspi16-1.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-cvtpspi16-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-cvtpspi16-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-cvtpspi16-1.c?ref=6e4c6a248b55cad0775c9f47bfcdff79e15b913d", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse_test_cvtpspi16_1\n+#endif\n+\n+#include <xmmintrin.h>\n+\n+static __m64\n+__attribute__((noinline, unused))\n+test (__m128 p)\n+{\n+  return _mm_cvtps_pi16 (p);\n+}\n+\n+static void \n+TEST (void)\n+{\n+  union128 s1;\n+  __m64 d;\n+  __m64 e;\n+\n+  s1.x = _mm_setr_ps (24.43, 68.546, 43.35, -546.46);\n+  d = test (s1.x);\n+\n+  e = _mm_setr_pi16 (24, 69, 43, -546);\n+\n+  if (e != d)\n+    abort ();\n+}"}, {"sha": "53523f47ea7952e6c84e8c88b1971456b47c45aa", "filename": "gcc/testsuite/gcc.target/powerpc/sse-cvtpspi8-1.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-cvtpspi8-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-cvtpspi8-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-cvtpspi8-1.c?ref=6e4c6a248b55cad0775c9f47bfcdff79e15b913d", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse_test_cvtpspi8_1\n+#endif\n+\n+#include <xmmintrin.h>\n+\n+static __m64\n+__attribute__((noinline, unused))\n+test (__m128 p)\n+{\n+  return _mm_cvtps_pi8 (p);\n+}\n+\n+static void \n+TEST (void)\n+{\n+  union128 s1;\n+  __m64 d;\n+  __m64 e;\n+\n+  s1.x = _mm_setr_ps (24.43, 68.546, 43.35, -46.46);\n+  d = test (s1.x);\n+\n+  e = _mm_setr_pi8 (24, 69, 43, -46, 0, 0, 0, 0);\n+\n+  if (e != d)\n+    abort ();\n+}"}, {"sha": "b4d2b1576cf048af4beb78a27a1e0af1052ca4af", "filename": "gcc/testsuite/gcc.target/powerpc/sse-cvtpu16ps-1.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-cvtpu16ps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-cvtpu16ps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-cvtpu16ps-1.c?ref=6e4c6a248b55cad0775c9f47bfcdff79e15b913d", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse_test_cvtpu16ps_1\n+#endif\n+\n+#include <xmmintrin.h>\n+\n+static __m128\n+__attribute__((noinline, unused))\n+test (__m64  __A)\n+{\n+  return _mm_cvtpu16_ps (__A);\n+}\n+\n+static void\n+TEST (void)\n+{\n+  __m64_union s1;\n+  union128 u;\n+  float e[4] = {1000.0, 45536.0, 45.0, 65535.0};\n+\n+  /* input unsigned short {1000, 45536, 45, 65535}.  */\n+  s1.as_m64 = _mm_setr_pi16 (1000, -20000, 45, -1);\n+   \n+  u.x = test (s1.as_m64);\n+\n+  if (check_union128 (u, e))\n+    abort ();\n+}"}, {"sha": "e7bb08a245b4e4eac8015c979bf0e51bfc96f387", "filename": "gcc/testsuite/gcc.target/powerpc/sse-cvtpu8ps-1.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-cvtpu8ps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-cvtpu8ps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-cvtpu8ps-1.c?ref=6e4c6a248b55cad0775c9f47bfcdff79e15b913d", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse_test_cvtpu8ps_1\n+#endif\n+\n+#include <xmmintrin.h>\n+\n+static __m128\n+__attribute__((noinline, unused))\n+test (__m64  __A)\n+{\n+  return _mm_cvtpu8_ps (__A);\n+}\n+\n+static void\n+TEST (void)\n+{\n+  __m64_union s1;\n+  union128 u;\n+  float e[4] = {100.0, 156.0, 45.0, 255.0};\n+\n+  /* input unsigned char {100, 156, 45, 255}.  */\n+  s1.as_m64 = _mm_setr_pi8 (100, -100, 45, -1, 123, -21, 34, 56);\n+   \n+  u.x = test (s1.as_m64);\n+\n+  if (check_union128 (u, e))\n+    abort ();\n+}"}, {"sha": "4f7d02642121513dfddd4892cb2839a37b01741e", "filename": "gcc/testsuite/gcc.target/powerpc/sse-cvtsi2ss-1.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-cvtsi2ss-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-cvtsi2ss-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-cvtsi2ss-1.c?ref=6e4c6a248b55cad0775c9f47bfcdff79e15b913d", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse_test_cvtsi2ss_1\n+#endif\n+\n+#include <xmmintrin.h>\n+\n+static __m128\n+__attribute__((noinline, unused))\n+test (__m128 p, int b)\n+{\n+  return _mm_cvtsi32_ss (p, b); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128 u, s1;\n+  int b = 498;\n+  float e[4] = { 24.43, 68.346, 43.35, 546.46 };\n+   \n+  s1.x = _mm_set_ps (e[3], e[2], e[1], e[0]);\n+  u.x = test (s1.x, b); \n+  e[0] = (float)b;  \n+\n+  if (check_union128 (u, e))\n+    abort ();\n+}"}, {"sha": "cffe69f1176bfeeb80cc19ca394b4e5cfd77ed85", "filename": "gcc/testsuite/gcc.target/powerpc/sse-cvtsi2ss-2.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-cvtsi2ss-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-cvtsi2ss-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-cvtsi2ss-2.c?ref=6e4c6a248b55cad0775c9f47bfcdff79e15b913d", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse_test_cvtsi2ss_2\n+#endif\n+\n+#include <xmmintrin.h>\n+\n+static __m128\n+__attribute__((noinline, unused))\n+test (__m128 p, long long b)\n+{\n+  return _mm_cvtsi64_ss (p, b); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128 u, s1;\n+  long long b = 4294967295133LL;\n+  float e[4] = { 24.43, 68.346, 43.35, 546.46 };\n+   \n+  s1.x = _mm_set_ps (e[3], e[2], e[1], e[0]);\n+  u.x = test (s1.x, b); \n+  e[0] = (float)b;  \n+\n+  if (check_union128 (u, e))\n+    abort ();\n+}"}, {"sha": "241f6bfa9e84947ed99bc199531b668382b49536", "filename": "gcc/testsuite/gcc.target/powerpc/sse-cvtss2si-1.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-cvtss2si-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-cvtss2si-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-cvtss2si-1.c?ref=6e4c6a248b55cad0775c9f47bfcdff79e15b913d", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse_test_cvtss2si_1\n+#endif\n+\n+#include <xmmintrin.h>\n+\n+static int\n+__attribute__((noinline, unused))\n+test (__m128 p)\n+{\n+  return _mm_cvtss_si32 (p); \n+}\n+\n+//static\n+void\n+TEST (void)\n+{\n+  union128 s1;\n+  int d;\n+  int e;\n+   \n+  s1.x = _mm_set_ps (24.43, 68.346, 43.35, 546.46);\n+  d = test (s1.x); \n+  e = (int)s1.a[0];  \n+\n+  if (e != d)\n+    abort ();\n+}"}, {"sha": "cfdbd85334930f6a920cb68c8ad2d5f0adceba24", "filename": "gcc/testsuite/gcc.target/powerpc/sse-cvtss2si-2.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-cvtss2si-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-cvtss2si-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-cvtss2si-2.c?ref=6e4c6a248b55cad0775c9f47bfcdff79e15b913d", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse_test_cvtss2si_2\n+#endif\n+\n+#include <xmmintrin.h>\n+\n+static long long\n+__attribute__((noinline, unused))\n+test (__m128 p)\n+{\n+  return _mm_cvtss_si64 (p); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128 s1;\n+  long long d;\n+  long long e;\n+   \n+  s1.x = _mm_set_ps (344.4, 68.346, 43.35, 429496729501.4);\n+  d = test (s1.x); \n+  e = (long long)s1.a[0];  \n+\n+  if (e != d)\n+    abort ();\n+}"}, {"sha": "df0ad242ee88051e5ce20a66fbe5410673c2fc8c", "filename": "gcc/testsuite/gcc.target/powerpc/sse-cvttss2si-1.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-cvttss2si-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-cvttss2si-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-cvttss2si-1.c?ref=6e4c6a248b55cad0775c9f47bfcdff79e15b913d", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse_test_cvttss2si_1\n+#endif\n+\n+#include <xmmintrin.h>\n+\n+static int\n+__attribute__((noinline, unused))\n+test (__m128 p)\n+{\n+  __asm(\"\" : \"+v\"(p));\n+  return _mm_cvttss_si32 (p); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128 s1;\n+  int d;\n+  int e;\n+   \n+  s1.x = _mm_set_ps (24.43, 68.346, 43.35, 546.46);\n+  d = test (s1.x); \n+  e = (int)s1.a[0];  \n+\n+  if (e != d)\n+    abort ();\n+}"}, {"sha": "703ddeac4334157a3a1fc4c757247e4d14963c6e", "filename": "gcc/testsuite/gcc.target/powerpc/sse-cvttss2si-2.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-cvttss2si-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-cvttss2si-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-cvttss2si-2.c?ref=6e4c6a248b55cad0775c9f47bfcdff79e15b913d", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse_test_cvttss2si_2\n+#endif\n+\n+#include <xmmintrin.h>\n+\n+static long long\n+__attribute__((noinline, unused))\n+test (__m128 p)\n+{\n+  __asm(\"\" : \"+v\"(p));\n+  return _mm_cvttss_si64 (p); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128 s1;\n+  long long d;\n+  long long e;\n+   \n+  s1.x = _mm_set_ps (24.43, 68.346, 43.35, 429496729501.4);\n+  d = test (s1.x); \n+  e = (long long)s1.a[0];  \n+\n+  if (e != d)\n+    abort ();\n+}"}, {"sha": "8930149da7d34c3f9d39bace1d2276e9a7a296c8", "filename": "gcc/testsuite/gcc.target/powerpc/sse-divps-1.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-divps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-divps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-divps-1.c?ref=6e4c6a248b55cad0775c9f47bfcdff79e15b913d", "patch": "@@ -0,0 +1,44 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse_test_divps_1\n+#endif\n+\n+#include <xmmintrin.h>\n+\n+static __m128\n+__attribute__((noinline, unused))\n+test (__m128 s1, __m128 s2)\n+{\n+  return _mm_div_ps (s1, s2); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128 u, s1, s2;\n+  float e[4];\n+   \n+  s1.x = _mm_set_ps (41124.234,6678.346,8653.65635,856.43576);\n+  s2.x = _mm_set_ps (2134.3343,6678.346,453.345635,54646.464356);\n+  u.x = test (s1.x, s2.x); \n+   \n+  e[0] = s1.a[0] / s2.a[0];\n+  e[1] = s1.a[1] / s2.a[1];\n+  e[2] = s1.a[2] / s2.a[2];\n+  e[3] = s1.a[3] / s2.a[3];\n+\n+  if (check_union128 (u, e))\n+    abort ();\n+}"}, {"sha": "30d4f506c350257076b9e2807631bf79e2e8ad0b", "filename": "gcc/testsuite/gcc.target/powerpc/sse-divss-1.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-divss-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-divss-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-divss-1.c?ref=6e4c6a248b55cad0775c9f47bfcdff79e15b913d", "patch": "@@ -0,0 +1,44 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse_test_divss_1\n+#endif\n+\n+#include <xmmintrin.h>\n+\n+static __m128\n+__attribute__((noinline, unused))\n+test (__m128 s1, __m128 s2)\n+{\n+  return _mm_div_ss (s1, s2); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128 u, s1, s2;\n+  float e[4];\n+   \n+  s1.x = _mm_set_ps (41124.234,6678.346,8653.65635,856.43576);\n+  s2.x = _mm_set_ps (2134.3343,6678.346,453.345635,54646.464356);\n+  u.x = test (s1.x, s2.x); \n+   \n+  e[0] = s1.a[0] / s2.a[0];\n+  e[1] = s1.a[1];\n+  e[2] = s1.a[2];\n+  e[3] = s1.a[3];\n+\n+  if (check_union128 (u, e))\n+    abort ();\n+}"}, {"sha": "6c59b80a1879c676607f85ae4288f89b64edb35a", "filename": "gcc/testsuite/gcc.target/powerpc/sse-maxps-1.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-maxps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-maxps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-maxps-1.c?ref=6e4c6a248b55cad0775c9f47bfcdff79e15b913d", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse_test_maxps_1\n+#endif\n+\n+#include <xmmintrin.h>\n+\n+static __m128\n+__attribute__((noinline, unused))\n+test (__m128 s1, __m128 s2)\n+{\n+  return _mm_max_ps (s1, s2); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128 u, s1, s2;\n+  float e[4];\n+  int i;\n+   \n+  s1.x = _mm_set_ps (24.43, 68.346, 43.35, 546.46);\n+  s2.x = _mm_set_ps (1.17, 2.16, 3.15, 4.14);\n+  u.x = test (s1.x, s2.x); \n+  \n+  for (i = 0; i < 4; i++)\n+    e[i] = s1.a[i] > s2.a[i] ? s1.a[i]:s2.a[i];   \n+\n+  if (check_union128 (u, e))\n+    abort ();\n+}"}, {"sha": "d5795126e958267f44f1c324d4526e9f5f8cbbfc", "filename": "gcc/testsuite/gcc.target/powerpc/sse-maxss-1.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-maxss-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-maxss-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-maxss-1.c?ref=6e4c6a248b55cad0775c9f47bfcdff79e15b913d", "patch": "@@ -0,0 +1,44 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse_test_maxss_1\n+#endif\n+\n+#include <xmmintrin.h>\n+\n+static __m128\n+__attribute__((noinline, unused))\n+test (__m128 s1, __m128 s2)\n+{\n+  return _mm_max_ss (s1, s2); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128 u, s1, s2;\n+  float e[4];\n+\n+  s1.x = _mm_set_ps (24.43, 68.346, 43.35, 546.46);\n+  s2.x = _mm_set_ps (1.17, 2.16, 3.15, 4.14);\n+  u.x = test (s1.x, s2.x); \n+  \n+  e[0] = s1.a[0] > s2.a[0] ? s1.a[0]:s2.a[0];   \n+  e[1] = s1.a[1]; \n+  e[2] = s1.a[2];\n+  e[3] = s1.a[3]; \n+\n+  if (check_union128 (u, e))\n+    abort ();\n+}"}, {"sha": "bd87875f5b2fb761a31f84545947b3f79c61a942", "filename": "gcc/testsuite/gcc.target/powerpc/sse-minps-1.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-minps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-minps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-minps-1.c?ref=6e4c6a248b55cad0775c9f47bfcdff79e15b913d", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse_test_minps_1\n+#endif\n+\n+#include <xmmintrin.h>\n+\n+static __m128\n+__attribute__((noinline, unused))\n+test (__m128 s1, __m128 s2)\n+{\n+  return _mm_min_ps (s1, s2); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128 u, s1, s2;\n+  float e[4];\n+  int i;\n+   \n+  s1.x = _mm_set_ps (24.43, 68.346, 43.35, 546.46);\n+  s2.x = _mm_set_ps (1.17, 2.16, 3.15, 4.14);\n+  u.x = test (s1.x, s2.x); \n+  \n+  for (i = 0; i < 4; i++)\n+    e[i] = s1.a[i] < s2.a[i] ? s1.a[i]:s2.a[i];   \n+\n+  if (check_union128 (u, e))\n+    abort ();\n+}"}, {"sha": "20953d52b2639d2dba612b1fdbd64ddd7de3283e", "filename": "gcc/testsuite/gcc.target/powerpc/sse-minss-1.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-minss-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-minss-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-minss-1.c?ref=6e4c6a248b55cad0775c9f47bfcdff79e15b913d", "patch": "@@ -0,0 +1,44 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse_test_minss_1\n+#endif\n+\n+#include <xmmintrin.h>\n+\n+static __m128\n+__attribute__((noinline, unused))\n+test (__m128 s1, __m128 s2)\n+{\n+  return _mm_min_ss (s1, s2); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128 u, s1, s2;\n+  float e[4];\n+\n+  s1.x = _mm_set_ps (24.43, 68.346, 43.35, 546.46);\n+  s2.x = _mm_set_ps (1.17, 2.16, 3.15, 4.14);\n+  u.x = test (s1.x, s2.x); \n+  \n+  e[0] = s1.a[0] < s2.a[0] ? s1.a[0]:s2.a[0];   \n+  e[1] = s1.a[1];\n+  e[2] = s1.a[2];\n+  e[3] = s1.a[3];\n+\n+  if (check_union128 (u, e))\n+    abort ();\n+}"}, {"sha": "262e4284cbc3a02c51ab029facdc8fa1cf1c811d", "filename": "gcc/testsuite/gcc.target/powerpc/sse-movaps-1.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-movaps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-movaps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-movaps-1.c?ref=6e4c6a248b55cad0775c9f47bfcdff79e15b913d", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse_test_movaps_1\n+#endif\n+\n+#include <xmmintrin.h>\n+\n+static __m128\n+__attribute__((noinline, unused))\n+test (float *e)\n+{\n+  return _mm_load_ps (e); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128 u;\n+  float e[4] __attribute__ ((aligned (16))) = \n+    {2134.3343,1234.635654, 1.2234, 876.8976};\n+\n+  u.x = test (e);   \n+\n+  if (check_union128 (u, e))\n+    abort ();\n+}"}, {"sha": "fcbe2ce05f8d8ae0f9b8d0b56f9fb1523562aeea", "filename": "gcc/testsuite/gcc.target/powerpc/sse-movaps-2.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-movaps-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-movaps-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-movaps-2.c?ref=6e4c6a248b55cad0775c9f47bfcdff79e15b913d", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse_test_movaps_2\n+#endif\n+\n+#include <xmmintrin.h>\n+\n+static void\n+__attribute__((noinline, unused))\n+test (float *e, __m128 a)\n+{\n+  _mm_store_ps (e, a); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128 u;\n+  float e[4] __attribute__ ((aligned (16))) = {0.0};\n+\n+  u.x = _mm_set_ps (2134.3343,1234.635654, 1.414, 3.3421);\n+\n+  test (e, u.x);\n+\n+  if (check_union128 (u, e))\n+    abort ();\n+}"}, {"sha": "ae1164adfa2df6e9a9e30d6fac4fd5202d3d3154", "filename": "gcc/testsuite/gcc.target/powerpc/sse-movhlps-1.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-movhlps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-movhlps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-movhlps-1.c?ref=6e4c6a248b55cad0775c9f47bfcdff79e15b913d", "patch": "@@ -0,0 +1,45 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse_test_movhlps_1\n+#endif\n+\n+#include <xmmintrin.h>\n+\n+static __m128\n+__attribute__((noinline, unused))\n+test (__m128 s1, __m128 s2)\n+{\n+  __asm(\"\" : \"+v\"(s1), \"+v\"(s2));\n+  return _mm_movehl_ps (s1, s2); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128 u, s1, s2;\n+  float e[4];\n+   \n+  s1.x = _mm_set_ps (24.43, 68.346, 43.35, 546.46);\n+  s2.x = _mm_set_ps (1.17, 2.16, 3.15, 4.14);\n+  u.x = test (s1.x, s2.x); \n+\n+  e[0] = s2.a[2];\n+  e[1] = s2.a[3];\n+  e[2] = s1.a[2];\n+  e[3] = s1.a[3];\n+\n+  if (check_union128 (u, e))\n+    abort ();\n+}"}, {"sha": "8b1fec6f620b87372aad76990eb277ab190c67e6", "filename": "gcc/testsuite/gcc.target/powerpc/sse-movhps-1.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-movhps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-movhps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-movhps-1.c?ref=6e4c6a248b55cad0775c9f47bfcdff79e15b913d", "patch": "@@ -0,0 +1,47 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse_test_movhps_1\n+#endif\n+\n+#include <xmmintrin.h>\n+\n+static __m128\n+__attribute__((noinline, unused))\n+test (__m128 a, __m64 *p)\n+{\n+  __asm(\"\" : \"+v\"(a));\n+  return _mm_loadh_pi (a, p); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128 u, s1;\n+  float d[2] = {24.43, 68.346};\n+  float e[4] = {1.17, 2.16, 3.15, 4.14};\n+\n+  s1.x = _mm_set_ps (5.13, 6.12, 7.11, 8.9);\n+  u.x = _mm_loadu_ps (e);\n+ \n+  u.x = test (s1.x, (__m64 *)d);\n+\n+  e[0] = s1.a[0];\n+  e[1] = s1.a[1];\n+  e[2] = d[0];\n+  e[3] = d[1];\n+\n+  if (check_union128 (u, e))\n+    abort ();\n+}"}, {"sha": "b961849d2edcaa10ef7e23c390828cf5b5587914", "filename": "gcc/testsuite/gcc.target/powerpc/sse-movhps-2.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-movhps-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-movhps-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-movhps-2.c?ref=6e4c6a248b55cad0775c9f47bfcdff79e15b913d", "patch": "@@ -0,0 +1,44 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse_test_movhps_2\n+#endif\n+\n+#include <xmmintrin.h>\n+\n+static void\n+__attribute__((noinline, unused))\n+test (__m64 *p, __m128 a)\n+{\n+  __asm(\"\" : \"+v\"(a));\n+  return _mm_storeh_pi (p, a); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128 s1;\n+  float e[2];\n+  float d[2];\n+\n+  s1.x = _mm_set_ps (5.13, 6.12, 7.11, 8.9);\n+ \n+  test ((__m64 *)d, s1.x);\n+\n+  e[0] = s1.a[2];\n+  e[1] = s1.a[3];\n+\n+  if (checkVf (d, e, 2))\n+    abort ();\n+}"}, {"sha": "7b45b6966d9630a4133fd13477d88a3a8988e648", "filename": "gcc/testsuite/gcc.target/powerpc/sse-movlhps-1.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-movlhps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-movlhps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-movlhps-1.c?ref=6e4c6a248b55cad0775c9f47bfcdff79e15b913d", "patch": "@@ -0,0 +1,47 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse_test_movlhps_1\n+#endif\n+\n+#include <xmmintrin.h>\n+\n+static __m128\n+__attribute__((noinline, unused))\n+test (__m128 a, __m128 b)\n+{\n+  __asm(\"\" : \"+v\"(a), \"+v\"(a));\n+  return _mm_movelh_ps (a, b); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128 u, s1, s2;\n+  float e[4]; \n+\n+  s1.x = _mm_set_ps (24.43, 68.346, 43.35, 546.46);\n+  s2.x = _mm_set_ps (1.17, 2.16, 3.15, 4.14);\n+  u.x = _mm_set1_ps (0.0);\n+\n+  u.x = test (s1.x, s2.x);\n+\n+  e[0] = s1.a[0];\n+  e[1] = s1.a[1];\n+  e[2] = s2.a[0];\n+  e[3] = s2.a[1];\n+\n+  if (check_union128 (u, e))\n+    abort ();\n+}"}, {"sha": "9d6ef7203ef624df17e716f7753563085e9c2d12", "filename": "gcc/testsuite/gcc.target/powerpc/sse-movlps-1.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-movlps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-movlps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-movlps-1.c?ref=6e4c6a248b55cad0775c9f47bfcdff79e15b913d", "patch": "@@ -0,0 +1,48 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse_test_movlps_1\n+#endif\n+\n+#include <xmmintrin.h>\n+\n+static __m128\n+__attribute__((noinline, unused))\n+test (__m128 a, __m64 *p)\n+{\n+  __asm(\"\" : \"+v\"(a));\n+  return _mm_loadl_pi (a, p);\n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128 u, s1;\n+  float d[2] = {24.43, 68.346};\n+  float e[4] = {1.17, 2.16, 3.15, 4.14};\n+\n+  s1.x = _mm_set_ps (5.13, 6.12, 7.11, 8.9);\n+  u.x = _mm_loadu_ps (e);\n+ \n+  u.x = test (s1.x, (__m64 *)d);\n+\n+\n+  e[0] = d[0];\n+  e[1] = d[1];\n+  e[2] = s1.a[2];\n+  e[3] = s1.a[3];\n+\n+  if (check_union128 (u, e))\n+    abort ();\n+}"}, {"sha": "771d0eb545237140d816e2eab2d955d1843b4b60", "filename": "gcc/testsuite/gcc.target/powerpc/sse-movlps-2.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-movlps-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-movlps-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-movlps-2.c?ref=6e4c6a248b55cad0775c9f47bfcdff79e15b913d", "patch": "@@ -0,0 +1,44 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse_test_movlps_2\n+#endif\n+\n+#include <xmmintrin.h>\n+\n+static void\n+__attribute__((noinline, unused))\n+test (__m64 *p, __m128 a)\n+{\n+  __asm(\"\" : \"+v\"(a));\n+  return _mm_storel_pi (p, a);\n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128 s1;\n+  float e[2];\n+  float d[2];\n+\n+  s1.x = _mm_set_ps (5.13, 6.12, 7.11, 8.9);\n+ \n+  test ((__m64 *)d, s1.x);\n+\n+  e[0] = s1.a[0];\n+  e[1] = s1.a[1];\n+\n+  if (checkVf (d, e, 2))\n+    abort ();\n+}"}, {"sha": "99400b6dc00f73acde9f0f815253897751824922", "filename": "gcc/testsuite/gcc.target/powerpc/sse-movmskb-1.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-movmskb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-movmskb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-movmskb-1.c?ref=6e4c6a248b55cad0775c9f47bfcdff79e15b913d", "patch": "@@ -0,0 +1,45 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse_test_movmskb_1\n+#endif\n+\n+#include <xmmintrin.h>\n+\n+static int\n+__attribute__((noinline, unused))\n+test (__m64 a)\n+{\n+  return _mm_movemask_pi8 (a);\n+}\n+\n+static void\n+TEST (void)\n+{\n+  __m64_union u;\n+  int d;\n+  int e = 0;\n+  int i;\n+\n+  u.as_m64 = _mm_set_pi8 (1,2,3,4,-80,-40,-100,-15);;\n+  d = test (u.as_m64);\n+\n+  for (i = 0; i < 8; i++)\n+    if (u.as_signed_char[i] < 0)\n+      e |= (1 << i);\n+\n+  if (d != e)\n+    abort ();\n+\n+}"}, {"sha": "eae9593171417d06736be4b8f31a362bc5090f4e", "filename": "gcc/testsuite/gcc.target/powerpc/sse-movmskps-1.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-movmskps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-movmskps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-movmskps-1.c?ref=6e4c6a248b55cad0775c9f47bfcdff79e15b913d", "patch": "@@ -0,0 +1,45 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse_test_movmskps_1\n+#endif\n+\n+#include <xmmintrin.h>\n+\n+static int\n+__attribute__((noinline, unused))\n+test (__m128 a)\n+{\n+  return _mm_movemask_ps (a); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128 u;\n+  float s[4] = {-2134.3343, 1234.635654, 1.2234, -876.8976};\n+  int d;\n+  int e = 0;\n+  int i;\n+\n+  u.x = _mm_loadu_ps (s);   \n+  d = test (u.x);\n+\n+  for (i = 0; i < 4; i++)\n+    if (s[i] < 0)\n+      e |= (1 << i);\n+\n+  if (checkVi (&d, &e, 1))\n+    abort ();\n+}"}, {"sha": "b59dd9a2539981e2b9e4166676f3b1f8c60035c2", "filename": "gcc/testsuite/gcc.target/powerpc/sse-movss-1.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-movss-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-movss-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-movss-1.c?ref=6e4c6a248b55cad0775c9f47bfcdff79e15b913d", "patch": "@@ -0,0 +1,50 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse_test_movss_1\n+#endif\n+\n+#include <xmmintrin.h>\n+\n+static __m128\n+__attribute__((noinline, unused))\n+test (float *e)\n+{\n+  __m128 result;\n+\n+  __asm(\"\" : \"+b\"(e));\n+\n+  result = _mm_load_ss (e);\n+  __asm(\"\" : \"+v\"(result));\n+  return result;\n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128 u, s1;\n+  float e[4] = {1.1, 2.2, 3.3, 4.4};\n+ \n+  s1.x = _mm_set_ps (2134.3343,1234.635654, 1.2234, 876.8976);\n+\n+  u.x = s1.x;\n+  u.x = test (e);\n+\n+  e[1] = u.a[1];\n+  e[2] = u.a[2];\n+  e[3] = u.a[3];   \n+\n+  if (check_union128 (u, e))\n+    abort ();\n+}"}, {"sha": "f6926c9662789afc6f74918e60a438128c778c83", "filename": "gcc/testsuite/gcc.target/powerpc/sse-movss-2.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-movss-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-movss-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-movss-2.c?ref=6e4c6a248b55cad0775c9f47bfcdff79e15b913d", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse_test_movss_2\n+#endif\n+\n+#include <xmmintrin.h>\n+\n+static void\n+__attribute__((noinline, unused))\n+test (float *e, __m128 a)\n+{\n+  __asm(\"\" : \"+v\"(a));\n+  return _mm_store_ss (e, a); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128 u;\n+  float d[1];\n+  float e[1];\n+ \n+  u.x = _mm_set_ps (2134.3343,1234.635654, 1.2234, 876.8976);\n+\n+  test (d, u.x);\n+\n+  e[0] = u.a[0];\n+\n+  if (checkVf (d, e, 1))\n+    abort ();\n+}"}, {"sha": "d083951fc764529a6aa6b372702f93aa32abafb3", "filename": "gcc/testsuite/gcc.target/powerpc/sse-movss-3.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-movss-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-movss-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-movss-3.c?ref=6e4c6a248b55cad0775c9f47bfcdff79e15b913d", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse_test_movss_3\n+#endif\n+\n+#include <xmmintrin.h>\n+\n+static __m128\n+__attribute__((noinline, unused))\n+test (__m128 a, __m128 b)\n+{\n+  __asm(\"\" : \"+v\"(a));\n+  return _mm_move_ss (a, b); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128 u, s1, s2;\n+  float e[4];\n+ \n+  s1.x = _mm_set_ps (2134.3343,1234.635654, 1.2234, 876.8976);\n+  s2.x = _mm_set_ps (1.1, 2.2, 3.3, 4.4);\n+  u.x = _mm_set_ps (5.5, 6.6, 7.7, 8.8);\n+  u.x = test (s1.x, s2.x);\n+  \n+  e[0] = s2.a[0];\n+  e[1] = s1.a[1];\n+  e[2] = s1.a[2];\n+  e[3] = s1.a[3];\n+\n+  if (check_union128 (u, e))\n+    abort ();\n+}"}, {"sha": "4fc16c414a1648c8ac4951c6925cd821aad351c6", "filename": "gcc/testsuite/gcc.target/powerpc/sse-mulps-1.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-mulps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-mulps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-mulps-1.c?ref=6e4c6a248b55cad0775c9f47bfcdff79e15b913d", "patch": "@@ -0,0 +1,44 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse_test_mulps_1\n+#endif\n+\n+#include <xmmintrin.h>\n+\n+static __m128\n+__attribute__((noinline, unused))\n+test (__m128 s1, __m128 s2)\n+{\n+  return _mm_mul_ps (s1, s2); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128 u, s1, s2;\n+  float e[4];\n+   \n+  s1.x = _mm_set_ps (41124.234,6678.346,8653.65635,856.43576);\n+  s2.x = _mm_set_ps (2134.3343,6678.346,453.345635,54646.464356);\n+  u.x = test (s1.x, s2.x); \n+   \n+  e[0] = s1.a[0] * s2.a[0];\n+  e[1] = s1.a[1] * s2.a[1];\n+  e[2] = s1.a[2] * s2.a[2];\n+  e[3] = s1.a[3] * s2.a[3];\n+\n+  if (check_union128 (u, e))\n+    abort ();\n+}"}, {"sha": "0fd24c2222d6d6a4ef01fd81d2577493bf8e4b6b", "filename": "gcc/testsuite/gcc.target/powerpc/sse-mulss-1.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-mulss-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-mulss-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-mulss-1.c?ref=6e4c6a248b55cad0775c9f47bfcdff79e15b913d", "patch": "@@ -0,0 +1,44 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse_test_mulss_1\n+#endif\n+\n+#include <xmmintrin.h>\n+\n+static __m128\n+__attribute__((noinline, unused))\n+test (__m128 s1, __m128 s2)\n+{\n+  return _mm_mul_ss (s1, s2); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128 u, s1, s2;\n+  float e[4];\n+   \n+  s1.x = _mm_set_ps (41124.234,6678.346,8653.65635,856.43576);\n+  s2.x = _mm_set_ps (2134.3343,6678.346,453.345635,54646.464356);\n+  u.x = test (s1.x, s2.x); \n+   \n+  e[0] = s1.a[0] * s2.a[0];\n+  e[1] = s1.a[1];\n+  e[2] = s1.a[2];\n+  e[3] = s1.a[3];\n+\n+  if (check_union128 (u, e))\n+    abort ();\n+}"}, {"sha": "8e18da6ad2e85e0e5f1d70316ff4cff7f42d7c98", "filename": "gcc/testsuite/gcc.target/powerpc/sse-orps-1.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-orps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-orps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-orps-1.c?ref=6e4c6a248b55cad0775c9f47bfcdff79e15b913d", "patch": "@@ -0,0 +1,51 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse_test_orps_1\n+#endif\n+\n+#include <xmmintrin.h>\n+\n+static __m128\n+__attribute__((noinline, unused))\n+test (__m128 s1, __m128 s2)\n+{\n+  return _mm_or_ps (s1, s2); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union {\n+    float f[4];\n+    int   i[4];\n+  }source1, source2, e;\n+\n+  union128 u, s1, s2;\n+  int i;\n+   \n+  s1.x = _mm_set_ps (24.43, 168.346, 43.35, 546.46);\n+  s2.x = _mm_set_ps (10.17, 2.16, 3.15, 4.14);\n+\n+  _mm_storeu_ps (source1.f, s1.x);\n+  _mm_storeu_ps (source2.f, s2.x);\n+\n+  u.x = test (s1.x, s2.x); \n+  \n+  for (i = 0; i < 4; i++)\n+    e.i[i] = source1.i[i] | source2.i[i];   \n+\n+  if (check_union128 (u, e.f))\n+    abort ();\n+}"}, {"sha": "4e7b0334fb3365c33f514ad598ec4aa1e9d98109", "filename": "gcc/testsuite/gcc.target/powerpc/sse-pavgw-1.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-pavgw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-pavgw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-pavgw-1.c?ref=6e4c6a248b55cad0775c9f47bfcdff79e15b913d", "patch": "@@ -0,0 +1,55 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse_test_pavgw_1\n+#endif\n+\n+#include <xmmintrin.h>\n+\n+static __m64\n+__attribute__((noinline, unused))\n+test (__m64 s1, __m64 s2)\n+{\n+  return _mm_avg_pu16 (s1, s2);\n+}\n+\n+static void \n+TEST (void)\n+{\n+  __m64_union u, s1, s2;\n+  __m64_union e;\n+  int i, tmp;\n+\n+  s1.as_m64 = _mm_set_pi16 (1, 2, 3, 4);\n+  s2.as_m64 = _mm_set_pi16 (11, 98, 76, -100);\n+  u.as_m64 = test (s1.as_m64, s2.as_m64);\n+\n+  for (i = 0; i < 4; i++)\n+    {\n+      tmp = (unsigned short) s1.as_short[i] + (unsigned short) s2.as_short[i]\n+\t  + 1;\n+      e.as_short[i] = tmp >> 1;\n+    }\n+\n+  if (u.as_m64 != e.as_m64)\n+#if DEBUG\n+    {\n+      printf (\"test_mmx_pavgw_1; failed\\n\");\n+      printf (\"\\t _mm_avg_pu16 (%llx, %llx) -> %llx != %llx\\n\", s1.as_m64,\n+\t      s2.as_m64, u.as_m64, e.as_m64);\n+    }\n+#else\n+  abort ();\n+#endif\n+}"}, {"sha": "b9d6c83d769ee37a3eabac85157003d56ddfb2f3", "filename": "gcc/testsuite/gcc.target/powerpc/sse-pmaxsw-1.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-pmaxsw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-pmaxsw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-pmaxsw-1.c?ref=6e4c6a248b55cad0775c9f47bfcdff79e15b913d", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse_test_pmaxsw_1\n+#endif\n+\n+#include <xmmintrin.h>\n+\n+static __m64\n+__attribute__((noinline, unused))\n+test (__m64 s1, __m64 s2)\n+{\n+  return _mm_max_pi16 (s1, s2);\n+}\n+\n+static void\n+TEST (void)\n+{\n+  __m64_union u, e, s1, s2;\n+  int i;\n+   \n+  s1.as_m64 = _mm_set_pi16 (1,2,3,4);\n+  s2.as_m64 = _mm_set_pi16 (4,3,2,1);\n+  u.as_m64 = test (s1.as_m64, s2.as_m64);\n+\n+  for (i=0; i<4; i++)\n+    e.as_short[i] = s1.as_short[i]>s2.as_short[i]?s1.as_short[i]:s2.as_short[i];\n+\n+  if (u.as_m64 != e.as_m64)\n+    abort ();\n+}"}, {"sha": "6d08f58454175b0c89130231e7feb7b9a81e290c", "filename": "gcc/testsuite/gcc.target/powerpc/sse-pmaxub-1.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-pmaxub-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-pmaxub-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-pmaxub-1.c?ref=6e4c6a248b55cad0775c9f47bfcdff79e15b913d", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse_test_pmaxub_1\n+#endif\n+\n+#include <xmmintrin.h>\n+\n+static __m64\n+__attribute__((noinline, unused))\n+test (__m64 s1, __m64 s2)\n+{\n+  return _mm_max_pu8 (s1, s2);\n+}\n+\n+static void TEST (void)\n+{\n+  __m64_union u, e, s1, s2;\n+  int i;\n+\n+  s1.as_m64 = _mm_set_pi8 (1, 2, 3, 4, 5, 6, 7, 8);\n+  s2.as_m64 = _mm_set_pi8 (8, 7, 6, 5, 4, 3, 2, 1);\n+  u.as_m64 = test (s1.as_m64, s2.as_m64);\n+\n+  for (i = 0; i < 8; i++)\n+    e.as_char[i] =\n+\t((unsigned char) s1.as_char[i] > (unsigned char) s2.as_char[i]) ?\n+\t    s1.as_char[i] : s2.as_char[i];\n+\n+  if (u.as_m64 != e.as_m64)\n+    abort ();\n+}"}, {"sha": "affe2a1fad34179810e4afc47ad8db211799a559", "filename": "gcc/testsuite/gcc.target/powerpc/sse-pminsw-1.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-pminsw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-pminsw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-pminsw-1.c?ref=6e4c6a248b55cad0775c9f47bfcdff79e15b913d", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse_test_pminsw_1\n+#endif\n+\n+#include <xmmintrin.h>\n+\n+static __m64\n+__attribute__((noinline, unused))\n+test (__m64 s1, __m64 s2)\n+{\n+  return _mm_min_pi16 (s1, s2);\n+}\n+\n+static void\n+TEST (void)\n+{\n+  __m64_union u, e, s1, s2;\n+  int i;\n+\n+  s1.as_m64 = _mm_set_pi16 (1, 2, 3, 4);\n+  s2.as_m64 = _mm_set_pi16 (4, 3, 2, 1);\n+  u.as_m64 = test (s1.as_m64, s2.as_m64);\n+\n+  for (i = 0; i < 4; i++)\n+    e.as_short[i] =\n+\ts1.as_short[i] < s2.as_short[i] ? s1.as_short[i] : s2.as_short[i];\n+\n+  if (u.as_m64 != e.as_m64)\n+    abort ();\n+}"}, {"sha": "5c9a5a0c3d5abecf1b2a88c97b3a133a341f7721", "filename": "gcc/testsuite/gcc.target/powerpc/sse-pminub-1.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-pminub-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-pminub-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-pminub-1.c?ref=6e4c6a248b55cad0775c9f47bfcdff79e15b913d", "patch": "@@ -0,0 +1,44 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse_test_pminub_1\n+#endif\n+\n+#include <xmmintrin.h>\n+\n+static __m64\n+__attribute__((noinline, unused))\n+test (__m64 s1, __m64 s2)\n+{\n+  return _mm_min_pu8 (s1, s2);\n+}\n+\n+static void \n+TEST (void)\n+{\n+  __m64_union u, e, s1, s2;\n+  int i;\n+\n+  s1.as_m64 = _mm_set_pi8 (1, 2, 3, 4, 5, 6, 7, 8);\n+  s2.as_m64 = _mm_set_pi8 (8, 7, 6, 5, 4, 3, 2, 1);\n+  u.as_m64 = test (s1.as_m64, s2.as_m64);\n+\n+  for (i = 0; i < 8; i++)\n+    e.as_char[i] =\n+\t((unsigned char) s1.as_char[i] < (unsigned char) s2.as_char[i]) ?\n+\t    s1.as_char[i] : s2.as_char[i];\n+\n+  if (u.as_m64 != e.as_m64)\n+    abort ();\n+}"}, {"sha": "fb98dd21174e87e655e8b11430a3a59ff34d4e0f", "filename": "gcc/testsuite/gcc.target/powerpc/sse-pmulhuw-1.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-pmulhuw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-pmulhuw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-pmulhuw-1.c?ref=6e4c6a248b55cad0775c9f47bfcdff79e15b913d", "patch": "@@ -0,0 +1,47 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse_test_pmulhuw_1\n+#endif\n+\n+#include <xmmintrin.h>\n+\n+static __m64\n+__attribute__((noinline, unused))\n+test (__m64 s1, __m64 s2)\n+{\n+  return _mm_mulhi_pu16 (s1, s2);\n+}\n+\n+static void\n+TEST (void)\n+{\n+  __m64_union u, s1, s2;\n+  __m64_union e;\n+  int i, tmp;\n+\n+  s1.as_m64 = _mm_set_pi16 (10, 2067, -3033, 90);\n+  s2.as_m64 = _mm_set_pi16 (11, 9834, 7444, -10222);\n+  u.as_m64 = test (s1.as_m64, s2.as_m64);\n+\n+  for (i = 0; i < 4; i++)\n+    {\n+      tmp = (unsigned short)s1.as_short[i] * (unsigned short)s2.as_short[i];\n+\n+      e.as_short[i] = (tmp & 0xffff0000) >> 16;\n+    }\n+\n+  if (u.as_m64 != e.as_m64)\n+    abort ();\n+}"}, {"sha": "a5261b0bd2ae63f6ce8bf11fab4f62779607ad5d", "filename": "gcc/testsuite/gcc.target/powerpc/sse-psadbw-1.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-psadbw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-psadbw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-psadbw-1.c?ref=6e4c6a248b55cad0775c9f47bfcdff79e15b913d", "patch": "@@ -0,0 +1,47 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse_test_psadbw_1\n+#endif\n+\n+#include <xmmintrin.h>\n+\n+static __m64\n+__attribute__((noinline, unused))\n+test (__m64 s1, __m64 s2)\n+{\n+  return _mm_sad_pu8 (s1, s2);\n+}\n+\n+static void\n+TEST (void)\n+{\n+  __m64_union u, e, s1, s2;\n+  unsigned char tmp[8];\n+  int i;\n+\n+  e.as_m64 = 0;\n+  s1.as_m64 = _mm_set_pi8 (1, 2, 3, 4, 5, 6, 7, 8);\n+  s2.as_m64 = _mm_set_pi8 (8, 7, 6, 5, 4, 3, 2, 1);\n+  u.as_m64 = test (s1.as_m64, s2.as_m64);\n+\n+  for (i = 0; i < 8; i++)\n+    tmp [i] = __builtin_abs (s1.as_char[i] - s2.as_char[i]);\n+\n+  for (i = 0; i < 8; i++)\n+    e.as_short[0] += tmp[i];\n+\n+  if (u.as_m64 != e.as_m64)\n+    abort ();\n+}"}, {"sha": "287f2431d59edaf5e3b2b811292a0d1ca815ca71", "filename": "gcc/testsuite/gcc.target/powerpc/sse-rcpps-1.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-rcpps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-rcpps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-rcpps-1.c?ref=6e4c6a248b55cad0775c9f47bfcdff79e15b913d", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse_test_rcpps_1\n+#endif\n+\n+#include <xmmintrin.h>\n+\n+static __m128\n+__attribute__((noinline, unused))\n+test (__m128 s1)\n+{\n+  return _mm_rcp_ps (s1); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128 u, s1;\n+  float e[4];\n+  int i;\n+   \n+  s1.x = _mm_set_ps (24.43, 68.346, 43.35, 546.46);\n+  u.x = test (s1.x); \n+  \n+  for (i = 0; i < 4; i++)\n+    {\n+      __m128 tmp = _mm_load_ss (&s1.a[i]);\n+      tmp = _mm_rcp_ss (tmp);\n+      _mm_store_ss (&e[i], tmp);\n+    }\n+\n+  if (check_union128 (u, e))\n+    abort ();\n+}"}, {"sha": "69e2793623cf58ba4771466ee0426ff49f81a8b1", "filename": "gcc/testsuite/gcc.target/powerpc/sse-rsqrtps-1.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-rsqrtps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-rsqrtps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-rsqrtps-1.c?ref=6e4c6a248b55cad0775c9f47bfcdff79e15b913d", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse_test_rsqrtps_1\n+#endif\n+\n+#include <xmmintrin.h>\n+\n+static __m128\n+__attribute__((noinline, unused))\n+test (__m128 s1)\n+{\n+  return _mm_rsqrt_ps (s1); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128 u, s1;\n+  float e[4];\n+  int i;\n+   \n+  s1.x = _mm_set_ps (24.43, 68.346, 43.35, 546.46);\n+  u.x = test (s1.x); \n+  \n+  for (i = 0; i < 4; i++)\n+    {\n+      __m128 tmp = _mm_load_ss (&s1.a[i]);\n+      tmp = _mm_rsqrt_ss (tmp);\n+      _mm_store_ss (&e[i], tmp);\n+    }\n+\n+  if (check_union128 (u, e))\n+    abort ();\n+}"}, {"sha": "be08890d8d8e0c492582c547ac0bd4b24bfa4fe3", "filename": "gcc/testsuite/gcc.target/powerpc/sse-shufps-1.c", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-shufps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-shufps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-shufps-1.c?ref=6e4c6a248b55cad0775c9f47bfcdff79e15b913d", "patch": "@@ -0,0 +1,61 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse_test_shufps_1\n+#endif\n+\n+#define MASK 0xab\n+\n+#include <xmmintrin.h>\n+\n+float select4(const float *src, unsigned int control)\n+{\n+    switch(control) {\n+    case 0:\n+        return src[0];\n+    case 1:\n+        return src[1];\n+    case 2:\n+        return src[2];\n+    case 3:\n+        return src[3];\n+    }\n+    return -1;\n+}\n+\n+static __m128\n+__attribute__((noinline, unused))\n+test (__m128 s1, __m128 s2)\n+{\n+  return _mm_shuffle_ps (s1, s2, MASK); \n+}\n+\n+static void TEST (void)\n+{\n+  union128 u, s1, s2;\n+  float e[4] =\n+    { 0.0 };\n+\n+  s1.x = _mm_set_ps (1.1, 1.2, 1.3, 1.4);\n+  s2.x = _mm_set_ps (2.1, 2.2, 2.3, 2.4);\n+  u.x = test (s1.x, s2.x);\n+\n+  e[0] = select4 (s1.a, (MASK >> 0) & 0x3);\n+  e[1] = select4 (s1.a, (MASK >> 2) & 0x3);\n+  e[2] = select4 (s2.a, (MASK >> 4) & 0x3);\n+  e[3] = select4 (s2.a, (MASK >> 6) & 0x3);\n+\n+  if (check_union128 (u, e))\n+  abort ();\n+}"}, {"sha": "db2f423c8d2e0f1ccf59806b638363653a3dd347", "filename": "gcc/testsuite/gcc.target/powerpc/sse-sqrtps-1.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-sqrtps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-sqrtps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-sqrtps-1.c?ref=6e4c6a248b55cad0775c9f47bfcdff79e15b913d", "patch": "@@ -0,0 +1,45 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse_test_sqrtps_1\n+#endif\n+\n+#include <xmmintrin.h>\n+\n+static __m128\n+__attribute__((noinline, unused))\n+test (__m128 s1)\n+{\n+  return _mm_sqrt_ps (s1); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128 u, s1;\n+  float e[4];\n+  int i;\n+   \n+  s1.x = _mm_set_ps (24.43, 68.346, 43.35, 546.46);\n+  u.x = test (s1.x); \n+  \n+  for (i = 0; i < 4; i++) {\n+    __m128 tmp = _mm_load_ss (&s1.a[i]);\n+    tmp = _mm_sqrt_ss (tmp);\n+    _mm_store_ss (&e[i], tmp);\n+    }\n+\n+  if (check_union128 (u, e))\n+    abort ();\n+}"}, {"sha": "d5a15f1cd5934689765a09e8388f7c8c60985eb3", "filename": "gcc/testsuite/gcc.target/powerpc/sse-subps-1.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-subps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-subps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-subps-1.c?ref=6e4c6a248b55cad0775c9f47bfcdff79e15b913d", "patch": "@@ -0,0 +1,44 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse_test_subps_1\n+#endif\n+\n+#include <xmmintrin.h>\n+\n+static __m128\n+__attribute__((noinline, unused))\n+test (__m128 s1, __m128 s2)\n+{\n+  return _mm_sub_ps (s1, s2); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128 u, s1, s2;\n+  float e[4];\n+   \n+  s1.x = _mm_set_ps (41124.234,6678.346,8653.65635,856.43576);\n+  s2.x = _mm_set_ps (2134.3343,6678.346,453.345635,54646.464356);\n+  u.x = test (s1.x, s2.x); \n+   \n+  e[0] = s1.a[0] - s2.a[0];\n+  e[1] = s1.a[1] - s2.a[1];\n+  e[2] = s1.a[2] - s2.a[2];\n+  e[3] = s1.a[3] - s2.a[3];\n+\n+  if (check_union128 (u, e))\n+    abort ();\n+}"}, {"sha": "f7c455f742a80aae867d841a64f25fc2c2af73a6", "filename": "gcc/testsuite/gcc.target/powerpc/sse-subss-1.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-subss-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-subss-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-subss-1.c?ref=6e4c6a248b55cad0775c9f47bfcdff79e15b913d", "patch": "@@ -0,0 +1,44 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse_test_subss_1\n+#endif\n+\n+#include <xmmintrin.h>\n+\n+static __m128\n+__attribute__((noinline, unused))\n+test (__m128 s1, __m128 s2)\n+{\n+  return _mm_sub_ss (s1, s2); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128 u, s1, s2;\n+  float e[4];\n+   \n+  s1.x = _mm_set_ps (41124.234,6678.346,8653.65635,856.43576);\n+  s2.x = _mm_set_ps (2134.3343,6678.346,453.345635,54646.464356);\n+  u.x = test (s1.x, s2.x); \n+   \n+  e[0] = s1.a[0] - s2.a[0];\n+  e[1] = s1.a[1];\n+  e[2] = s1.a[2];\n+  e[3] = s1.a[3];\n+\n+  if (check_union128 (u, e))\n+    abort ();\n+}"}, {"sha": "676d696213dfdb5052b0bbaf4e3776e575650cb4", "filename": "gcc/testsuite/gcc.target/powerpc/sse-ucomiss-1.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-ucomiss-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-ucomiss-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-ucomiss-1.c?ref=6e4c6a248b55cad0775c9f47bfcdff79e15b913d", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse_test_ucomiss_1\n+#endif\n+\n+#include <xmmintrin.h>\n+\n+static int \n+__attribute__((noinline, unused))\n+test (__m128 s1, __m128 s2)\n+{\n+  return _mm_ucomieq_ss (s1, s2); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128  s1, s2;\n+  int d[1];\n+  int e[1];\n+\n+  s1.x = _mm_set_ps (24.43, 68.346, 43.35, 546.46);\n+  s2.x = _mm_set_ps (1.17, 2.16, 3.15, 4.14);\n+  d[0] = test (s1.x, s2.x); \n+  e[0] = s1.a[0] == s2.a[0];\n+\n+  if (checkVi (d, e, 1))\n+    abort ();\n+}"}, {"sha": "a40cd65b9c616a9882f106c87296c19113caf440", "filename": "gcc/testsuite/gcc.target/powerpc/sse-ucomiss-2.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-ucomiss-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-ucomiss-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-ucomiss-2.c?ref=6e4c6a248b55cad0775c9f47bfcdff79e15b913d", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse_test_ucomiss_2\n+#endif\n+\n+#include <xmmintrin.h>\n+\n+static int \n+__attribute__((noinline, unused))\n+test (__m128 s1, __m128 s2)\n+{\n+  return _mm_ucomilt_ss (s1, s2); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128  s1, s2;\n+  int d[1];\n+  int e[1];\n+\n+  s1.x = _mm_set_ps (24.43, 68.346, 43.35, 546.46);\n+  s2.x = _mm_set_ps (1.17, 2.16, 3.15, 4.14);\n+  d[0] = test (s1.x, s2.x); \n+  e[0] = s1.a[0] < s2.a[0];\n+\n+  if (checkVi (d, e, 1))\n+    abort ();\n+}"}, {"sha": "78a6fdca38b402980a3c68c4369a805b4043d5e4", "filename": "gcc/testsuite/gcc.target/powerpc/sse-ucomiss-3.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-ucomiss-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-ucomiss-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-ucomiss-3.c?ref=6e4c6a248b55cad0775c9f47bfcdff79e15b913d", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse_test_ucomiss_3\n+#endif\n+\n+#include <xmmintrin.h>\n+\n+static int \n+__attribute__((noinline, unused))\n+test (__m128 s1, __m128 s2)\n+{\n+  return _mm_ucomile_ss (s1, s2); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128  s1, s2;\n+  int d[1];\n+  int e[1];\n+\n+  s1.x = _mm_set_ps (24.43, 68.346, 43.35, 546.46);\n+  s2.x = _mm_set_ps (1.17, 2.16, 3.15, 4.14);\n+  d[0] = test (s1.x, s2.x); \n+  e[0] = s1.a[0] <= s2.a[0];\n+\n+  if (checkVi (d, e, 1))\n+    abort ();\n+}"}, {"sha": "e4cb9afe32866347832dac259b5de4fc13ae83a9", "filename": "gcc/testsuite/gcc.target/powerpc/sse-ucomiss-4.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-ucomiss-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-ucomiss-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-ucomiss-4.c?ref=6e4c6a248b55cad0775c9f47bfcdff79e15b913d", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse_test_ucomiss_4\n+#endif\n+\n+#include <xmmintrin.h>\n+\n+static int \n+__attribute__((noinline, unused))\n+test (__m128 s1, __m128 s2)\n+{\n+  return _mm_ucomigt_ss (s1, s2); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128  s1, s2;\n+  int d[1];\n+  int e[1];\n+\n+  s1.x = _mm_set_ps (24.43, 68.346, 43.35, 546.46);\n+  s2.x = _mm_set_ps (1.17, 2.16, 3.15, 4.14);\n+  d[0] = test (s1.x, s2.x); \n+  e[0] = s1.a[0] > s2.a[0];\n+\n+  if (checkVi (d, e, 1))\n+    abort ();\n+}"}, {"sha": "59b545ede43dd069706291fdb17976caa9148c9c", "filename": "gcc/testsuite/gcc.target/powerpc/sse-ucomiss-5.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-ucomiss-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-ucomiss-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-ucomiss-5.c?ref=6e4c6a248b55cad0775c9f47bfcdff79e15b913d", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse_test_ucomiss_5\n+#endif\n+\n+#include <xmmintrin.h>\n+\n+static int \n+__attribute__((noinline, unused))\n+test (__m128 s1, __m128 s2)\n+{\n+  return _mm_ucomige_ss (s1, s2); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128  s1, s2;\n+  int d[1];\n+  int e[1];\n+\n+  s1.x = _mm_set_ps (24.43, 68.346, 43.35, 546.46);\n+  s2.x = _mm_set_ps (1.17, 2.16, 3.15, 4.14);\n+  d[0] = test (s1.x, s2.x); \n+  e[0] = s1.a[0] >= s2.a[0];\n+\n+  if (checkVi (d, e, 1))\n+    abort ();\n+}"}, {"sha": "9c8d1a52c17d5cbdc1c096f1c08b4e43c8272eb5", "filename": "gcc/testsuite/gcc.target/powerpc/sse-ucomiss-6.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-ucomiss-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-ucomiss-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-ucomiss-6.c?ref=6e4c6a248b55cad0775c9f47bfcdff79e15b913d", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse_test_ucomiss_6\n+#endif\n+\n+#include <xmmintrin.h>\n+\n+static int \n+__attribute__((noinline, unused))\n+test (__m128 s1, __m128 s2)\n+{\n+  return _mm_ucomineq_ss (s1, s2); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128  s1, s2;\n+  int d[1];\n+  int e[1];\n+\n+  s1.x = _mm_set_ps (24.43, 68.346, 43.35, 546.46);\n+  s2.x = _mm_set_ps (1.17, 2.16, 3.15, 4.14);\n+  d[0] = test (s1.x, s2.x); \n+  e[0] = s1.a[0] != s2.a[0];\n+\n+  if (checkVi (d, e, 1))\n+    abort ();\n+}"}, {"sha": "465fec26a61be59c01dacf67b653b49c34e8974e", "filename": "gcc/testsuite/gcc.target/powerpc/sse-unpckhps-1.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-unpckhps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-unpckhps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-unpckhps-1.c?ref=6e4c6a248b55cad0775c9f47bfcdff79e15b913d", "patch": "@@ -0,0 +1,45 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse_test_unpackhps_1\n+#endif\n+\n+#include <xmmintrin.h>\n+\n+static __m128\n+__attribute__((noinline, unused))\n+test (__m128 s1, __m128 s2)\n+{\n+  __asm(\"\" : \"+v\"(s1), \"+v\"(s2));\n+  return _mm_unpackhi_ps (s1, s2); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128 u, s1, s2;\n+  float e[4];\n+   \n+  s1.x = _mm_set_ps (41124.234,6678.346,8653.65635,856.43576);\n+  s2.x = _mm_set_ps (2134.3343,6678.346,453.345635,54646.464356);\n+  u.x = test (s1.x, s2.x); \n+   \n+  e[0] = s1.a[2];\n+  e[1] = s2.a[2];\n+  e[2] = s1.a[3];\n+  e[3] = s2.a[3];\n+\n+  if (check_union128 (u, e))\n+    abort ();\n+}"}, {"sha": "3c4fdcf18831155f2f598acc0c3ac95753dda3ca", "filename": "gcc/testsuite/gcc.target/powerpc/sse-unpcklps-1.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-unpcklps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-unpcklps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-unpcklps-1.c?ref=6e4c6a248b55cad0775c9f47bfcdff79e15b913d", "patch": "@@ -0,0 +1,45 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse_test_unpacklps_1\n+#endif\n+\n+#include <xmmintrin.h>\n+\n+static __m128\n+__attribute__((noinline, unused))\n+test (__m128 s1, __m128 s2)\n+{\n+  __asm(\"\" : \"+v\"(s1), \"+v\"(s2));\n+  return _mm_unpacklo_ps (s1, s2); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union128 u, s1, s2;\n+  float e[4];\n+   \n+  s1.x = _mm_set_ps (41124.234,6678.346,8653.65635,856.43576);\n+  s2.x = _mm_set_ps (2134.3343,6678.346,453.345635,54646.464356);\n+  u.x = test (s1.x, s2.x); \n+   \n+  e[0] = s1.a[0];\n+  e[1] = s2.a[0];\n+  e[2] = s1.a[1];\n+  e[3] = s2.a[1];\n+\n+  if (check_union128 (u, e))\n+    abort ();\n+}"}, {"sha": "204f90c4df9eec666ebf066a3b874ee0161c1c7b", "filename": "gcc/testsuite/gcc.target/powerpc/sse-xorps-1.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-xorps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4c6a248b55cad0775c9f47bfcdff79e15b913d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-xorps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-xorps-1.c?ref=6e4c6a248b55cad0775c9f47bfcdff79e15b913d", "patch": "@@ -0,0 +1,51 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse-check.h\"\n+#endif\n+\n+#include CHECK_H\n+\n+#ifndef TEST\n+#define TEST sse_test_xorps_1\n+#endif\n+\n+#include <xmmintrin.h>\n+\n+static __m128\n+__attribute__((noinline, unused))\n+test (__m128 s1, __m128 s2)\n+{\n+  return _mm_xor_ps (s1, s2); \n+}\n+\n+static void\n+TEST (void)\n+{\n+  union {\n+    float f[4];\n+    int   i[4];\n+  }source1, source2, e;\n+\n+  union128 u, s1, s2;\n+  int i;\n+   \n+  s1.x = _mm_set_ps (24.43, 68.346, 43.35, 546.46);\n+  s2.x = _mm_set_ps (1.17, 2.16, 3.15, 4.14);\n+\n+  _mm_storeu_ps (source1.f, s1.x);\n+  _mm_storeu_ps (source2.f, s2.x);\n+\n+  u.x = test (s1.x, s2.x); \n+  \n+  for (i = 0; i < 4; i++)\n+    e.i[i] = source1.i[i] ^ source2.i[i];   \n+\n+  if (check_union128 (u, e.f))\n+    abort ();\n+}"}]}