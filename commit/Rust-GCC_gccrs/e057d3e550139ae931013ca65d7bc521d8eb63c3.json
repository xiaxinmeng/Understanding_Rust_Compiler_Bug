{"sha": "e057d3e550139ae931013ca65d7bc521d8eb63c3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTA1N2QzZTU1MDEzOWFlOTMxMDEzY2E2NWQ3YmM1MjFkOGViNjNjMw==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2018-07-02T07:24:43Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2018-07-02T07:24:43Z"}, "message": "re PR fortran/45305 (Array-valued calles to elementals are not simplified)\n\n2018-07-02  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/45305\n\t* expr.c : Add a prototype for scalarize_intrinsic_call.\n\t(gfc_simplify_expr): Use scalarize_intrinsic_call for elemental\n\tintrinsic function calls.\n\t(scalarize_intrinsic_call): Add 'init_flag' argument. Check if\n\tthe expression or any of the actual argument expressions are\n\tNULL. Before calling gfc_check_init_expr, check 'init_flag'.\n\tOnly simplify the scalarized expressions if there are no errors\n\ton the stack.\n\t(gfc_check_init_expr): Set 'init_flag' true in the call to\n\tscalarize_intrinsic_call.\n\n2018-07-02  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/45305\n\t* gfortran.dg/scalarize_parameter_array_2.f90: New test.\n\nFrom-SVN: r262300", "tree": {"sha": "ee97c942c44416e42892a42c340f5f6f8a2ce1cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ee97c942c44416e42892a42c340f5f6f8a2ce1cb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e057d3e550139ae931013ca65d7bc521d8eb63c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e057d3e550139ae931013ca65d7bc521d8eb63c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e057d3e550139ae931013ca65d7bc521d8eb63c3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e057d3e550139ae931013ca65d7bc521d8eb63c3/comments", "author": null, "committer": null, "parents": [{"sha": "87c789f1c0b2df4164de597d2a1ca6f70d72e119", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87c789f1c0b2df4164de597d2a1ca6f70d72e119", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87c789f1c0b2df4164de597d2a1ca6f70d72e119"}], "stats": {"total": 83, "additions": 82, "deletions": 1}, "files": [{"sha": "b8e71975672146212af29cbd470e290e5b9fe6a9", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e057d3e550139ae931013ca65d7bc521d8eb63c3/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e057d3e550139ae931013ca65d7bc521d8eb63c3/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=e057d3e550139ae931013ca65d7bc521d8eb63c3", "patch": "@@ -1,3 +1,10 @@\n+2018-07-02  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/82969\n+\tPR fortran/86242\n+\t* trans-array.c (structure_alloc_comps): Do not explicitly copy\n+\tprocedure pointer components.\n+\n 2018-07-02  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/45305"}, {"sha": "81337944224186f9a6fe34477325ef46bfb3719b", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e057d3e550139ae931013ca65d7bc521d8eb63c3/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e057d3e550139ae931013ca65d7bc521d8eb63c3/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=e057d3e550139ae931013ca65d7bc521d8eb63c3", "patch": "@@ -8842,7 +8842,7 @@ structure_alloc_comps (gfc_symbol * der_type, tree decl,\n \t  break;\n \n \tcase COPY_ALLOC_COMP:\n-\t  if (c->attr.pointer)\n+\t  if (c->attr.pointer || c->attr.proc_pointer)\n \t    continue;\n \n \t  /* We need source and destination components.  */"}, {"sha": "7a27de4f6a821006c6c031c5f91eac2dce7f9531", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e057d3e550139ae931013ca65d7bc521d8eb63c3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e057d3e550139ae931013ca65d7bc521d8eb63c3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e057d3e550139ae931013ca65d7bc521d8eb63c3", "patch": "@@ -1,3 +1,9 @@\n+2018-07-02  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/82969\n+\tPR fortran/86242\n+\t* gfortran.dg/proc_ptr_50.f90: New test.\n+\n 2018-07-02  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/45305"}, {"sha": "14f0c0a79352575e5fbbef5eda6a8877c5093845", "filename": "gcc/testsuite/gfortran.dg/proc_ptr_50.f90", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e057d3e550139ae931013ca65d7bc521d8eb63c3/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_50.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e057d3e550139ae931013ca65d7bc521d8eb63c3/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_50.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_50.f90?ref=e057d3e550139ae931013ca65d7bc521d8eb63c3", "patch": "@@ -0,0 +1,68 @@\n+! { dg-do compile }\n+!\n+! Test the fix for PR86242, in which the procedure pointer in 'tester'\n+! was being copied as if it were an allocatable class component.\n+!\n+! Contributed by <cfd@mnet-mail.de>\n+!\n+module test\n+\n+   implicit none\n+\n+   private\n+   public :: tester\n+\n+   type :: wrapper\n+      integer(4) :: n\n+   end type wrapper\n+\n+   type :: output\n+      real(8) :: dummy\n+   end type output\n+\n+   type :: tester\n+      class(wrapper),  allocatable :: wrap\n+      procedure(proc1), pointer :: ptr => null()\n+   end type tester\n+\n+   abstract interface\n+      function proc1(self) result(uc)\n+         import :: tester, output\n+         class(tester), intent(in) :: self\n+         class(output), allocatable :: uc\n+      end function proc1\n+   end interface\n+\n+end module test\n+\n+! Comment #2 from Janus Weil  <janus@gcc.gnu.org>\n+module test1\n+\n+   implicit none\n+\n+   type :: output\n+   end type\n+\n+   type :: tester\n+      integer,  allocatable :: wrap\n+      procedure(proc1), pointer, nopass :: ptr\n+   end type\n+\n+   interface                              ! Originally abstract\n+      function proc1() result(uc)\n+         import :: output\n+         class(output), allocatable :: uc ! Works if a pointer\n+      end function\n+   end interface\n+\n+! PR82969 from Gerhard Steinmetz  <gscfq@t-online.de>\n+   type t\n+      real, allocatable :: x(:)\n+      procedure(f), nopass, pointer :: g\n+   end type\n+contains\n+   function f() result(z)\n+      class(t), allocatable :: z\n+   end\n+\n+end module test1"}]}