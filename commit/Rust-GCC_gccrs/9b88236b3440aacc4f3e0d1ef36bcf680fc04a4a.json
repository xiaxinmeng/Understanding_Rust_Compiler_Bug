{"sha": "9b88236b3440aacc4f3e0d1ef36bcf680fc04a4a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWI4ODIzNmIzNDQwYWFjYzRmM2UwZDFlZjM2YmNmNjgwZmMwNGE0YQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2009-06-19T17:49:31Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2009-06-19T17:49:31Z"}, "message": "random.h (_Adaptor): Simplify for _DInputType always a floating point type.\n\n2009-06-19  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/bits/random.h (_Adaptor): Simplify for _DInputType always\n\ta floating point type.\n\t(uniform_int_distribution<>::uniform_int_distribution(_IntType,\n\t_IntType)): Fix second default argument.\n\t(uniform_int_distribution<>::_M_call): Remove.\n\t(uniform_int_distribution<>::operator()(_UniformRandomNumberGenerator&,\n\tconst param_type&)): Only declare.\n\t* include/bits/random.tcc (uniform_int_distribution<>::_M_call(\n\t_UniformRandomNumberGenerator&, result_type, result_type, true_type):\n\tRemove.\n\tuniform_int_distribution<>::operator()(_UniformRandomNumberGenerator&,\n\tconst param_type&): Define here.\n\t(geometric_distribution<>::operator()(_UniformRandomNumberGenerator&,\n\tconst param_type&), discrete_distribution<>::operator()\n\t(_UniformRandomNumberGenerator&, const param_type&), \n\tpiecewise_constant_distribution<>::operator()\n\t(_UniformRandomNumberGenerator&, const param_type&),\n\tpiecewise_linear_distribution<>::operator()\n\t(_UniformRandomNumberGenerator&, const param_type&)): Use double as\n\tthe second template argument of _Adaptor.\n\t* testsuite/26_numerics/random/uniform_int_distribution/cons/\n\tdefault.cc: Adjust.\n\nFrom-SVN: r148720", "tree": {"sha": "a1a1417977e2e3064266363209e102fb113fa755", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a1a1417977e2e3064266363209e102fb113fa755"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9b88236b3440aacc4f3e0d1ef36bcf680fc04a4a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b88236b3440aacc4f3e0d1ef36bcf680fc04a4a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b88236b3440aacc4f3e0d1ef36bcf680fc04a4a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b88236b3440aacc4f3e0d1ef36bcf680fc04a4a/comments", "author": null, "committer": null, "parents": [{"sha": "f8dd9e0de06aefc5722e0772bbb0d42427b867ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8dd9e0de06aefc5722e0772bbb0d42427b867ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8dd9e0de06aefc5722e0772bbb0d42427b867ef"}], "stats": {"total": 121, "additions": 56, "deletions": 65}, "files": [{"sha": "516e783aa4a1ebd19a3e68f7b5462321de6f44db", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b88236b3440aacc4f3e0d1ef36bcf680fc04a4a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b88236b3440aacc4f3e0d1ef36bcf680fc04a4a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=9b88236b3440aacc4f3e0d1ef36bcf680fc04a4a", "patch": "@@ -1,3 +1,28 @@\n+2009-06-19  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/bits/random.h (_Adaptor): Simplify for _DInputType always\n+\ta floating point type.\n+\t(uniform_int_distribution<>::uniform_int_distribution(_IntType,\n+\t_IntType)): Fix second default argument.\n+\t(uniform_int_distribution<>::_M_call): Remove.\n+\t(uniform_int_distribution<>::operator()(_UniformRandomNumberGenerator&,\n+\tconst param_type&)): Only declare.\n+\t* include/bits/random.tcc (uniform_int_distribution<>::_M_call(\n+\t_UniformRandomNumberGenerator&, result_type, result_type, true_type):\n+\tRemove.\n+\tuniform_int_distribution<>::operator()(_UniformRandomNumberGenerator&,\n+\tconst param_type&): Define here.\n+\t(geometric_distribution<>::operator()(_UniformRandomNumberGenerator&,\n+\tconst param_type&), discrete_distribution<>::operator()\n+\t(_UniformRandomNumberGenerator&, const param_type&), \n+\tpiecewise_constant_distribution<>::operator()\n+\t(_UniformRandomNumberGenerator&, const param_type&),\n+\tpiecewise_linear_distribution<>::operator()\n+\t(_UniformRandomNumberGenerator&, const param_type&)): Use double as\n+\tthe second template argument of _Adaptor.\n+\t* testsuite/26_numerics/random/uniform_int_distribution/cons/\n+\tdefault.cc: Adjust.\n+\n 2009-06-19  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/bits/random.tcc (discrete_distribution<>::param_type::"}, {"sha": "099c5fae1a916f06a191d3bcd6a59b6c305c5ea6", "filename": "libstdc++-v3/include/bits/random.h", "status": "modified", "additions": 16, "deletions": 51, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b88236b3440aacc4f3e0d1ef36bcf680fc04a4a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b88236b3440aacc4f3e0d1ef36bcf680fc04a4a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h?ref=9b88236b3440aacc4f3e0d1ef36bcf680fc04a4a", "patch": "@@ -95,40 +95,23 @@ namespace std\n \n \t_DInputType\n \tmin() const\n-\t{\n-\t  if (is_integral<_DInputType>::value)\n-\t    return _M_g.min();\n-\t  else\n-\t    return _DInputType(0);\n-\t}\n+\t{ return _DInputType(0); }\n \n \t_DInputType\n \tmax() const\n-\t{\n-\t  if (is_integral<_DInputType>::value)\n-\t    return _M_g.max();\n-\t  else\n-\t    return _DInputType(1);\n-\t}\n+\t{ return _DInputType(1); }\n \n \t/*\n \t * Converts a value generated by the adapted random number generator\n \t * into a value in the input domain for the dependent random number\n \t * distribution.\n-\t *\n-\t * Because the type traits are compile time constants only the\n-\t * appropriate clause of the if statements will actually be emitted\n-\t * by the compiler.\n \t */\n \t_DInputType\n \toperator()()\n \t{\n-\t  if (is_integral<_DInputType>::value)\n-\t    return _M_g();\n-\t  else\n-\t    return generate_canonical<_DInputType,\n-\t\t\t\t      numeric_limits<_DInputType>::digits,\n-\t\t\t\t      _Engine>(_M_g);\n+\t  return std::generate_canonical<_DInputType,\n+\t                            std::numeric_limits<_DInputType>::digits,\n+\t                            _Engine>(_M_g);\n \t}\n \n       private:\n@@ -380,7 +363,7 @@ namespace std\n       static_assert(__w >= __l,\n \t\t    \"mersenne_twister_engine template arguments out of bounds\");\n       static_assert(__w <=\n-\t\t    static_cast<size_t>(numeric_limits<_UIntType>::digits),\n+\t\t    static_cast<size_t>(std::numeric_limits<_UIntType>::digits),\n \t\t    \"mersenne_twister_engine template arguments out of bounds\");\n       static_assert(__a <= (__detail::_Shift<_UIntType, __w>::__value - 1),\n \t\t    \"mersenne_twister_engine template arguments out of bounds\");\n@@ -558,8 +541,9 @@ namespace std\n     {\n       __glibcxx_class_requires(_UIntType, _UnsignedIntegerConcept)\n       static_assert(__s > 0U && __r > __s\n-\t\t && __w > 0U\n-\t\t && __w <= static_cast<size_t>(numeric_limits<_UIntType>::digits),\n+\t\t    && __w > 0U\n+\t\t    && __w <= static_cast<size_t>\n+\t\t    (std::numeric_limits<_UIntType>::digits),\n \t\t    \"template arguments out of bounds\"\n \t\t    \" in subtract_with_carry_engine\");\n \n@@ -922,7 +906,8 @@ namespace std\n     {\n       static_assert(__w > 0U\n \t\t    && __w <=\n-\t\t    static_cast<size_t>(numeric_limits<_UIntType>::digits),\n+\t\t    static_cast<size_t>\n+\t\t    (std::numeric_limits<_UIntType>::digits),\n \t\t    \"template arguments out of bounds \"\n \t\t    \"in independent_bits_engine\");\n \n@@ -1507,7 +1492,8 @@ namespace std\n \ttypedef uniform_int_distribution<_IntType> distribution_type;\n \n \texplicit\n-\tparam_type(_IntType __a = 0, _IntType __b = 9)\n+\tparam_type(_IntType __a = 0,\n+\t\t   _IntType __b = std::numeric_limits<_IntType>::max())\n \t: _M_a(__a), _M_b(__b)\n \t{\n \t  _GLIBCXX_DEBUG_ASSERT(_M_a <= _M_b);\n@@ -1531,7 +1517,8 @@ namespace std\n        * @brief Constructs a uniform distribution object.\n        */\n       explicit\n-      uniform_int_distribution(_IntType __a = 0, _IntType __b = 9)\n+      uniform_int_distribution(_IntType __a = 0,\n+\t\t\t   _IntType __b = std::numeric_limits<_IntType>::max())\n       : _M_param(__a, __b)\n       { }\n \n@@ -1602,29 +1589,7 @@ namespace std\n       template<typename _UniformRandomNumberGenerator>\n \tresult_type\n \toperator()(_UniformRandomNumberGenerator& __urng,\n-\t\t   const param_type& __p)\n-\t{\n-\t  typedef typename _UniformRandomNumberGenerator::result_type\n-\t    _UResult_type;\n-\t  return _M_call(__urng, __p.a(), __p.b(),\n-\t\t\t typename is_integral<_UResult_type>::type());\n-\t}\n-\n-    private:\n-      template<typename _UniformRandomNumberGenerator>\n-\tresult_type\n-\t_M_call(_UniformRandomNumberGenerator& __urng,\n-\t\tresult_type __min, result_type __max, true_type);\n-\n-      template<typename _UniformRandomNumberGenerator>\n-\tresult_type\n-\t_M_call(_UniformRandomNumberGenerator& __urng,\n-\t\tresult_type __min, result_type __max, false_type)\n-\t{\n-\t  return result_type((__urng() - __urng.min())\n-\t\t\t     / (__urng.max() - __urng.min())\n-\t\t\t     * (__max - __min + 1)) + __min;\n-\t}\n+\t\t   const param_type& __p);\n \n       param_type _M_param;\n     };"}, {"sha": "87c46186b57eefb2a999d7c9dfaedc8912c036b1", "filename": "libstdc++-v3/include/bits/random.tcc", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b88236b3440aacc4f3e0d1ef36bcf680fc04a4a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b88236b3440aacc4f3e0d1ef36bcf680fc04a4a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.tcc?ref=9b88236b3440aacc4f3e0d1ef36bcf680fc04a4a", "patch": "@@ -644,13 +644,13 @@ namespace std\n     template<typename _UniformRandomNumberGenerator>\n       typename uniform_int_distribution<_IntType>::result_type\n       uniform_int_distribution<_IntType>::\n-      _M_call(_UniformRandomNumberGenerator& __urng,\n-\t      result_type __min, result_type __max, true_type)\n+      operator()(_UniformRandomNumberGenerator& __urng,\n+\t\t const param_type& __param)\n       {\n \t// XXX Must be fixed to work well for *arbitrary* __urng.max(),\n-\t// __urng.min(), __max, __min.  Currently works fine only in the\n-\t// most common case __urng.max() - __urng.min() >= __max - __min,\n-\t// with __urng.max() > __urng.min() >= 0.\n+\t// __urng.min(), __param.b(), __param.a().  Currently works fine only\n+\t// in the most common case __urng.max() - __urng.min() >=\n+\t// __param.b() - __param.a(), with __urng.max() > __urng.min() >= 0.\n \ttypedef typename __gnu_cxx::__add_unsigned<typename\n \t  _UniformRandomNumberGenerator::result_type>::__type __urntype;\n \ttypedef typename __gnu_cxx::__add_unsigned<result_type>::__type\n@@ -664,14 +664,14 @@ namespace std\n \tconst __urntype __urnmin = __urng.min();\n \tconst __urntype __urnmax = __urng.max();\n \tconst __urntype __urnrange = __urnmax - __urnmin;\n-\tconst __uctype __urange = __max - __min;\n+\tconst __uctype __urange = __param.b() - __param.a();\n \tconst __uctype __udenom = (__urnrange <= __urange\n \t\t\t\t   ? 1 : __urnrange / (__urange + 1));\n \tdo\n \t  __ret = (__urntype(__urng()) -  __urnmin) / __udenom;\n-\twhile (__ret > __max - __min);\n+\twhile (__ret > __param.b() - __param.a());\n \n-\treturn __ret + __min;\n+\treturn __ret + __param.a();\n       }\n \n   template<typename _IntType, typename _CharT, typename _Traits>\n@@ -799,7 +799,7 @@ namespace std\n \t// The largest _RealType convertible to _IntType.\n \tconst double __thr =\n \t  std::numeric_limits<_IntType>::max() + __naf;\n-\t__detail::_Adaptor<_UniformRandomNumberGenerator, result_type>\n+\t__detail::_Adaptor<_UniformRandomNumberGenerator, double>\n \t  __aurng(__urng);\n \n \tdouble __cand;\n@@ -2021,7 +2021,7 @@ namespace std\n       operator()(_UniformRandomNumberGenerator& __urng,\n \t\t const param_type& __param)\n       {\n-\t__detail::_Adaptor<_UniformRandomNumberGenerator, result_type>\n+\t__detail::_Adaptor<_UniformRandomNumberGenerator, double>\n \t  __aurng(__urng);\n \n \tconst double __p = __aurng();\n@@ -2193,7 +2193,7 @@ namespace std\n       operator()(_UniformRandomNumberGenerator& __urng,\n \t\t const param_type& __param)\n       {\n-\t__detail::_Adaptor<_UniformRandomNumberGenerator, result_type>\n+\t__detail::_Adaptor<_UniformRandomNumberGenerator, double>\n \t  __aurng(__urng);\n \n \tconst double __p = __aurng();\n@@ -2383,7 +2383,7 @@ namespace std\n       operator()(_UniformRandomNumberGenerator& __urng,\n \t\t const param_type& __param)\n       {\n-\t__detail::_Adaptor<_UniformRandomNumberGenerator, result_type>\n+\t__detail::_Adaptor<_UniformRandomNumberGenerator, double>\n \t  __aurng(__urng);\n \n \tconst double __p = __aurng();"}, {"sha": "0e83565e0de2cee61324df404612e4749547fa13", "filename": "libstdc++-v3/testsuite/26_numerics/random/uniform_int_distribution/cons/default.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b88236b3440aacc4f3e0d1ef36bcf680fc04a4a/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Funiform_int_distribution%2Fcons%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b88236b3440aacc4f3e0d1ef36bcf680fc04a4a/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Funiform_int_distribution%2Fcons%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Funiform_int_distribution%2Fcons%2Fdefault.cc?ref=9b88236b3440aacc4f3e0d1ef36bcf680fc04a4a", "patch": "@@ -23,6 +23,7 @@\n // 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n \n #include <random>\n+#include <limits>\n #include <testsuite_hooks.h>\n \n void\n@@ -32,9 +33,9 @@ test01()\n \n   std::uniform_int_distribution<int> u;\n   VERIFY( u.a() == 0 );\n-  VERIFY( u.b() == 9 );\n+  VERIFY( u.b() == std::numeric_limits<int>::max() );\n   VERIFY( u.min() == 0 );\n-  VERIFY( u.max() == 9 );\n+  VERIFY( u.max() == std::numeric_limits<int>::max() );\n }\n \n int main()"}]}