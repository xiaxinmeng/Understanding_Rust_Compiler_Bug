{"sha": "2a27ae32fabf85685ffff758459d7ec284ccb95a", "node_id": "C_kwDOANBUbNoAKDJhMjdhZTMyZmFiZjg1Njg1ZmZmZjc1ODQ1OWQ3ZWMyODRjY2I5NWE", "commit": {"author": {"name": "Qing Zhao", "email": "qing.zhao@oracle.com", "date": "2022-12-16T17:25:42Z"}, "committer": {"name": "Qing Zhao", "email": "qing.zhao@oracle.com", "date": "2022-12-16T17:25:42Z"}, "message": "Add a new warning option -Wstrict-flex-arrays.\n\n'-Wstrict-flex-arrays'\n     Warn about inproper usages of flexible array members according to\n     the LEVEL of the 'strict_flex_array (LEVEL)' attribute attached to\n     the trailing array field of a structure if it's available,\n     otherwise according to the LEVEL of the option\n     '-fstrict-flex-arrays=LEVEL'.\n\n     This option is effective only when LEVEL is bigger than 0.\n     Otherwise, it will be ignored with a warning.\n\n     when LEVEL=1, warnings will be issued for a trailing array\n     reference of a structure that have 2 or more elements if the\n     trailing array is referenced as a flexible array member.\n\n     when LEVEL=2, in addition to LEVEL=1, additional warnings will be\n     issued for a trailing one-element array reference of a structure if\n     the array is referenced as a flexible array member.\n\n     when LEVEL=3, in addition to LEVEL=2, additional warnings will be\n     issued for a trailing zero-length array reference of a structure if\n     the array is referenced as a flexible array member.\n\ngcc/ChangeLog:\n\n\t* doc/invoke.texi: Document -Wstrict-flex-arrays option.\n\t* gimple-array-bounds.cc (check_out_of_bounds_and_warn): Add two more\n\targuments.\n\t(array_bounds_checker::check_array_ref): Issue warnings for\n\t-Wstrict-flex-arrays.\n\t* opts.cc (finish_options): Issue warning for unsupported combination\n\tof -Wstrict_flex_arrays and -fstrict-flex-array.\n\t* tree-vrp.cc (execute_ranger_vrp): Enable the pass when\n\twarn_strict_flex_array is true.\n\ngcc/c-family/ChangeLog:\n\n\t* c.opt (Wstrict-flex-arrays): New option.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.dg/Warray-bounds-flex-arrays-1.c: Update testing case with\n\t-Wstrict-flex-arrays.\n\t* gcc.dg/Warray-bounds-flex-arrays-2.c: Likewise.\n\t* gcc.dg/Warray-bounds-flex-arrays-3.c: Likewise.\n\t* gcc.dg/Warray-bounds-flex-arrays-4.c: Likewise.\n\t* gcc.dg/Warray-bounds-flex-arrays-5.c: Likewise.\n\t* gcc.dg/Warray-bounds-flex-arrays-6.c: Likewise.\n\t* c-c++-common/Wstrict-flex-arrays.c: New test.\n\t* gcc.dg/Wstrict-flex-arrays-2.c: New test.\n\t* gcc.dg/Wstrict-flex-arrays-3.c: New test.\n\t* gcc.dg/Wstrict-flex-arrays.c: New test.", "tree": {"sha": "f454c76a179f030d6b89947de1c233d6934dc7d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f454c76a179f030d6b89947de1c233d6934dc7d3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2a27ae32fabf85685ffff758459d7ec284ccb95a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a27ae32fabf85685ffff758459d7ec284ccb95a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a27ae32fabf85685ffff758459d7ec284ccb95a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a27ae32fabf85685ffff758459d7ec284ccb95a/comments", "author": {"login": "qingzhao69", "id": 89154636, "node_id": "MDQ6VXNlcjg5MTU0NjM2", "avatar_url": "https://avatars.githubusercontent.com/u/89154636?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qingzhao69", "html_url": "https://github.com/qingzhao69", "followers_url": "https://api.github.com/users/qingzhao69/followers", "following_url": "https://api.github.com/users/qingzhao69/following{/other_user}", "gists_url": "https://api.github.com/users/qingzhao69/gists{/gist_id}", "starred_url": "https://api.github.com/users/qingzhao69/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qingzhao69/subscriptions", "organizations_url": "https://api.github.com/users/qingzhao69/orgs", "repos_url": "https://api.github.com/users/qingzhao69/repos", "events_url": "https://api.github.com/users/qingzhao69/events{/privacy}", "received_events_url": "https://api.github.com/users/qingzhao69/received_events", "type": "User", "site_admin": false}, "committer": {"login": "qingzhao69", "id": 89154636, "node_id": "MDQ6VXNlcjg5MTU0NjM2", "avatar_url": "https://avatars.githubusercontent.com/u/89154636?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qingzhao69", "html_url": "https://github.com/qingzhao69", "followers_url": "https://api.github.com/users/qingzhao69/followers", "following_url": "https://api.github.com/users/qingzhao69/following{/other_user}", "gists_url": "https://api.github.com/users/qingzhao69/gists{/gist_id}", "starred_url": "https://api.github.com/users/qingzhao69/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qingzhao69/subscriptions", "organizations_url": "https://api.github.com/users/qingzhao69/orgs", "repos_url": "https://api.github.com/users/qingzhao69/repos", "events_url": "https://api.github.com/users/qingzhao69/events{/privacy}", "received_events_url": "https://api.github.com/users/qingzhao69/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9bb7864877ab05bf951fad66c934845351b271ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bb7864877ab05bf951fad66c934845351b271ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9bb7864877ab05bf951fad66c934845351b271ce"}], "stats": {"total": 309, "additions": 275, "deletions": 34}, "files": [{"sha": "33edeefd285f6c45b576c9bd1a979ed588281db5", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a27ae32fabf85685ffff758459d7ec284ccb95a/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a27ae32fabf85685ffff758459d7ec284ccb95a/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=2a27ae32fabf85685ffff758459d7ec284ccb95a", "patch": "@@ -976,6 +976,11 @@ Wstringop-truncation\n C ObjC C++ LTO ObjC++ Var(warn_stringop_truncation) Warning Init (1) LangEnabledBy(C ObjC C++ LTO ObjC++, Wall)\n Warn about truncation in string manipulation functions like strncat and strncpy.\n \n+Wstrict-flex-arrays\n+C C++ Var(warn_strict_flex_arrays) Warning\n+Warn about inproper usages of flexible array members\n+according to the level of -fstrict-flex-arrays.\n+\n Wsuggest-attribute=format\n C ObjC C++ ObjC++ Var(warn_suggest_attribute_format) Warning\n Warn about functions which might be candidates for format attributes."}, {"sha": "c7e88e46e2834ef57a03abbce6f1453d6e4ddf43", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a27ae32fabf85685ffff758459d7ec284ccb95a/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a27ae32fabf85685ffff758459d7ec284ccb95a/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=2a27ae32fabf85685ffff758459d7ec284ccb95a", "patch": "@@ -398,7 +398,7 @@ Objective-C and Objective-C++ Dialects}.\n -Wstrict-aliasing=n  -Wstrict-overflow  -Wstrict-overflow=@var{n} @gol\n -Wstring-compare @gol\n -Wno-stringop-overflow -Wno-stringop-overread @gol\n--Wno-stringop-truncation @gol\n+-Wno-stringop-truncation -Wstrict-flex-arrays @gol\n -Wsuggest-attribute=@r{[}pure@r{|}const@r{|}noreturn@r{|}format@r{|}malloc@r{]} @gol\n -Wswitch  -Wno-switch-bool  -Wswitch-default  -Wswitch-enum @gol\n -Wno-switch-outside-range  -Wno-switch-unreachable  -Wsync-nand @gol\n@@ -7835,6 +7835,31 @@ however, are not suitable arguments to functions that expect\n such arrays GCC issues warnings unless it can prove that the use is\n safe.  @xref{Common Variable Attributes}.\n \n+@item -Wstrict-flex-arrays\n+@opindex Wstrict-flex-arrays\n+@opindex Wno-strict-flex-arrays\n+Warn about inproper usages of flexible array members\n+according to the @var{level} of the @code{strict_flex_array (@var{level})}\n+attribute attached to the trailing array field of a structure if it's\n+available, otherwise according to the @var{level} of the option\n+@option{-fstrict-flex-arrays=@var{level}}.\n+\n+This option is effective only when @var{level} is bigger than 0.  Otherwise,\n+it will be ignored with a warning.\n+\n+when @var{level}=1, warnings will be issued for a trailing array reference\n+of a structure that have 2 or more elements if the trailing array is referenced\n+as a flexible array member.\n+\n+when @var{level}=2, in addition to @var{level}=1, additional warnings will be\n+issued for a trailing one-element array reference of a structure\n+if the array is referenced as a flexible array member.\n+\n+when @var{level}=3, in addition to @var{level}=2, additional warnings will be\n+issued for a trailing zero-length array reference of a structure\n+if the array is referenced as a flexible array member.\n+\n+\n @item -Wsuggest-attribute=@r{[}pure@r{|}const@r{|}noreturn@r{|}format@r{|}cold@r{|}malloc@r{]}\n @opindex Wsuggest-attribute=\n @opindex Wno-suggest-attribute="}, {"sha": "9fd42fe3919e32ec93b30c0ab0dd8436cce374a4", "filename": "gcc/gimple-array-bounds.cc", "status": "modified", "additions": 85, "deletions": 20, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a27ae32fabf85685ffff758459d7ec284ccb95a/gcc%2Fgimple-array-bounds.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a27ae32fabf85685ffff758459d7ec284ccb95a/gcc%2Fgimple-array-bounds.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-array-bounds.cc?ref=2a27ae32fabf85685ffff758459d7ec284ccb95a", "patch": "@@ -252,25 +252,33 @@ get_up_bounds_for_array_ref (tree ref, tree *decl,\n \n /* Given the LOW_SUB_ORG, LOW_SUB and UP_SUB, and the computed UP_BOUND\n    and UP_BOUND_P1, check whether the array reference REF is out of bound.\n-   Issue warnings if out of bound, return TRUE if warnings are issued.  */\n+   When out of bounds, set OUT_OF_BOUND to true.\n+   Issue warnings if FOR_ARRAY_BOUND is true.\n+   return TRUE if warnings are issued.  */\n \n static bool\n check_out_of_bounds_and_warn (location_t location, tree ref,\n \t\t\t      tree low_sub_org, tree low_sub, tree up_sub,\n \t\t\t      tree up_bound, tree up_bound_p1,\n \t\t\t      const value_range *vr,\n-\t\t\t      bool ignore_off_by_one)\n+\t\t\t      bool ignore_off_by_one, bool for_array_bound,\n+\t\t\t      bool *out_of_bound)\n {\n   tree low_bound = array_ref_low_bound (ref);\n   tree artype = TREE_TYPE (TREE_OPERAND (ref, 0));\n \n   bool warned = false;\n+  *out_of_bound = false;\n \n   /* Empty array.  */\n   if (up_bound && tree_int_cst_equal (low_bound, up_bound_p1))\n-    warned = warning_at (location, OPT_Warray_bounds_,\n-\t\t\t \"array subscript %E is outside array bounds of %qT\",\n-\t\t\t low_sub_org, artype);\n+    {\n+      *out_of_bound = true;\n+      if (for_array_bound)\n+\twarned = warning_at (location, OPT_Warray_bounds_,\n+\t\t\t     \"array subscript %E is outside array\"\n+\t\t\t     \" bounds of %qT\", low_sub_org, artype);\n+    }\n \n   if (warned)\n     ; /* Do nothing.  */\n@@ -283,24 +291,36 @@ check_out_of_bounds_and_warn (location_t location, tree ref,\n \t      : tree_int_cst_le (up_bound, up_sub))\n \t  && TREE_CODE (low_sub) == INTEGER_CST\n \t  && tree_int_cst_le (low_sub, low_bound))\n-\twarned = warning_at (location, OPT_Warray_bounds_,\n-\t\t\t     \"array subscript [%E, %E] is outside \"\n-\t\t\t     \"array bounds of %qT\",\n-\t\t\t     low_sub, up_sub, artype);\n+\t{\n+\t  *out_of_bound = true;\n+\t  if (for_array_bound)\n+\t    warned = warning_at (location, OPT_Warray_bounds_,\n+\t\t\t\t \"array subscript [%E, %E] is outside \"\n+\t\t\t\t \"array bounds of %qT\",\n+\t\t\t\t low_sub, up_sub, artype);\n+\t}\n     }\n   else if (up_bound\n \t   && TREE_CODE (up_sub) == INTEGER_CST\n \t   && (ignore_off_by_one\n \t       ? !tree_int_cst_le (up_sub, up_bound_p1)\n \t       : !tree_int_cst_le (up_sub, up_bound)))\n-    warned = warning_at (location, OPT_Warray_bounds_,\n-\t\t\t \"array subscript %E is above array bounds of %qT\",\n-\t\t\t up_sub, artype);\n+    {\n+      *out_of_bound = true;\n+      if (for_array_bound)\n+\twarned = warning_at (location, OPT_Warray_bounds_,\n+\t\t\t     \"array subscript %E is above array bounds of %qT\",\n+\t\t\t     up_sub, artype);\n+    }\n   else if (TREE_CODE (low_sub) == INTEGER_CST\n \t   && tree_int_cst_lt (low_sub, low_bound))\n-    warned = warning_at (location, OPT_Warray_bounds_,\n-\t\t\t \"array subscript %E is below array bounds of %qT\",\n-\t\t\t low_sub, artype);\n+    {\n+      *out_of_bound = true;\n+      if (for_array_bound)\n+\twarned = warning_at (location, OPT_Warray_bounds_,\n+\t\t\t     \"array subscript %E is below array bounds of %qT\",\n+\t\t\t     low_sub, artype);\n+    }\n   return warned;\n }\n \n@@ -333,14 +353,21 @@ array_bounds_checker::check_array_ref (location_t location, tree ref,\n \n   tree arg = TREE_OPERAND (ref, 0);\n   const bool compref = TREE_CODE (arg) == COMPONENT_REF;\n+  unsigned int strict_flex_array_level = flag_strict_flex_arrays;\n \n   if (compref)\n-    /* Try to determine special array member type for this COMPONENT_REF.  */\n-    sam = component_ref_sam_type (arg);\n+    {\n+      /* Try to determine special array member type for this COMPONENT_REF.  */\n+      sam = component_ref_sam_type (arg);\n+      /* Get the level of strict_flex_array for this array field.  */\n+      tree afield_decl = TREE_OPERAND (arg, 1);\n+      strict_flex_array_level = strict_flex_array_level_of (afield_decl);\n+    }\n \n   get_up_bounds_for_array_ref (ref, &decl, &up_bound, &up_bound_p1);\n \n   bool warned = false;\n+  bool out_of_bound = false;\n \n   tree artype = TREE_TYPE (TREE_OPERAND (ref, 0));\n   tree low_sub_org = TREE_OPERAND (ref, 1);\n@@ -361,7 +388,8 @@ array_bounds_checker::check_array_ref (location_t location, tree ref,\n   warned = check_out_of_bounds_and_warn (location, ref,\n \t\t\t\t\t low_sub_org, low_sub, up_sub,\n \t\t\t\t\t up_bound, up_bound_p1, vr,\n-\t\t\t\t\t ignore_off_by_one);\n+\t\t\t\t\t ignore_off_by_one, warn_array_bounds,\n+\t\t\t\t\t &out_of_bound);\n \n \n   if (!warned && sam == special_array_member::int_0)\n@@ -373,19 +401,56 @@ array_bounds_checker::check_array_ref (location_t location, tree ref,\n \t\t\t       \"of an interior zero-length array %qT\")),\n \t\t\t low_sub, artype);\n \n-  if (warned)\n+  if (warned || out_of_bound)\n     {\n-      if (dump_file && (dump_flags & TDF_DETAILS))\n+      if (warned && dump_file && (dump_flags & TDF_DETAILS))\n \t{\n \t  fprintf (dump_file, \"Array bound warning for \");\n \t  dump_generic_expr (MSG_NOTE, TDF_SLIM, ref);\n \t  fprintf (dump_file, \"\\n\");\n \t}\n \n+      /* issue warnings for -Wstrict-flex-arrays according to the level of\n+\t flag_strict_flex_arrays.  */\n+      if (out_of_bound && warn_strict_flex_arrays)\n+      switch (strict_flex_array_level)\n+\t{\n+\t  case 3:\n+\t    /* Issue additional warnings for trailing arrays [0].  */\n+\t    if (sam == special_array_member::trail_0)\n+\t      warned = warning_at (location, OPT_Wstrict_flex_arrays,\n+\t\t\t\t   \"trailing array %qT should not be used as \"\n+\t\t\t\t   \"a flexible array member for level 3\",\n+\t\t\t\t   artype);\n+\t    /* FALLTHROUGH.  */\n+\t  case 2:\n+\t    /* Issue additional warnings for trailing arrays [1].  */\n+\t    if (sam == special_array_member::trail_1)\n+\t      warned = warning_at (location, OPT_Wstrict_flex_arrays,\n+\t\t\t\t   \"trailing array %qT should not be used as \"\n+\t\t\t\t   \"a flexible array member for level 2 and \"\n+\t\t\t\t   \"above\", artype);\n+\t    /* FALLTHROUGH.  */\n+\t  case 1:\n+\t    /* Issue warnings for trailing arrays [n].  */\n+\t    if (sam == special_array_member::trail_n)\n+\t      warned = warning_at (location, OPT_Wstrict_flex_arrays,\n+\t\t\t\t   \"trailing array %qT should not be used as \"\n+\t\t\t\t   \"a flexible array member for level 1 and \"\n+\t\t\t\t   \"above\", artype);\n+\t    break;\n+\t  case 0:\n+\t    /* Do nothing.  */\n+\t    break;\n+\t  default:\n+\t    gcc_unreachable ();\n+\t}\n+\n       /* Avoid more warnings when checking more significant subscripts\n \t of the same expression.  */\n       ref = TREE_OPERAND (ref, 0);\n       suppress_warning (ref, OPT_Warray_bounds_);\n+      suppress_warning (ref, OPT_Wstrict_flex_arrays);\n \n       if (decl)\n \tref = decl;"}, {"sha": "7981e2c9540d60dc3530233267a4cc4983220529", "filename": "gcc/opts.cc", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a27ae32fabf85685ffff758459d7ec284ccb95a/gcc%2Fopts.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a27ae32fabf85685ffff758459d7ec284ccb95a/gcc%2Fopts.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.cc?ref=2a27ae32fabf85685ffff758459d7ec284ccb95a", "patch": "@@ -1411,6 +1411,14 @@ finish_options (struct gcc_options *opts, struct gcc_options *opts_set,\n       opts->x_profile_flag = 0;\n     }\n \n+  if (opts->x_warn_strict_flex_arrays)\n+    if (opts->x_flag_strict_flex_arrays == 0)\n+      {\n+\topts->x_warn_strict_flex_arrays = 0;\n+\twarning_at (UNKNOWN_LOCATION, 0,\n+\t\t    \"%<-Wstrict-flex-arrays%> is ignored when\"\n+\t\t    \" %<-fstrict-flex-arrays%> is not present\");\n+      }\n \n   diagnose_options (opts, opts_set, loc);\n }"}, {"sha": "51514231661ebb660e878202cf19cf218369713e", "filename": "gcc/testsuite/c-c++-common/Wstrict-flex-arrays.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a27ae32fabf85685ffff758459d7ec284ccb95a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWstrict-flex-arrays.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a27ae32fabf85685ffff758459d7ec284ccb95a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWstrict-flex-arrays.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWstrict-flex-arrays.c?ref=2a27ae32fabf85685ffff758459d7ec284ccb95a", "patch": "@@ -0,0 +1,9 @@\n+/* Test the usage of option -Wstrict-flex-arrays.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -Wstrict-flex-arrays\" } */\n+\n+int main(int argc, char *argv[])\n+{\n+    return 0;\n+}\n+/* { dg-warning \"is ignored when \\'-fstrict-flex-arrays\\' is not present\" \"\" { target *-*-* } 0 } */"}, {"sha": "65c9fec43af8385b56c0c8a945df8c443baa771c", "filename": "gcc/testsuite/gcc.dg/Warray-bounds-flex-arrays-1.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a27ae32fabf85685ffff758459d7ec284ccb95a/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-flex-arrays-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a27ae32fabf85685ffff758459d7ec284ccb95a/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-flex-arrays-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-flex-arrays-1.c?ref=2a27ae32fabf85685ffff758459d7ec284ccb95a", "patch": "@@ -1,6 +1,6 @@\n-/* Test -fstrict-flex-arrays + -Warray-bounds.  */\n+/* Test -fstrict-flex-arrays + -Warray-bounds + -Wstrict-flex-arrays.  */\n /* { dg-do compile} */\n-/* { dg-options \"-O2 -fstrict-flex-arrays=1 -Warray-bounds\" } */\n+/* { dg-options \"-O2 -Wstrict-flex-arrays -fstrict-flex-arrays=1 -Warray-bounds\" } */\n \n struct trailing_array_1 {\n     int a;\n@@ -32,6 +32,7 @@ void __attribute__((__noinline__)) stuff(\n     struct trailing_array_4 *trailing_flex)\n {\n     normal->c[5] = 5; \t/*{ dg-warning \"array subscript 5 is above array bounds of\" } */\n+    \t\t\t/*{ dg-warning \"should not be used as a flexible array member for level 1 and above\" \"\" { target *-*-* } .-1 } */\n     trailing_1->c[2] = 2; /* { dg-bogus \"array subscript \" } */\n     trailing_0->c[1] = 1; /* { dg-bogus \"array subscript \" } */\n     trailing_flex->c[10] = 10; /* { dg-bogus \"array subscript \" } */"}, {"sha": "2b5a895c598654c59dfdcde7b08e7e192c2d7ff6", "filename": "gcc/testsuite/gcc.dg/Warray-bounds-flex-arrays-2.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a27ae32fabf85685ffff758459d7ec284ccb95a/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-flex-arrays-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a27ae32fabf85685ffff758459d7ec284ccb95a/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-flex-arrays-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-flex-arrays-2.c?ref=2a27ae32fabf85685ffff758459d7ec284ccb95a", "patch": "@@ -1,6 +1,6 @@\n-/* Test -fstrict-flex-arrays + -Warray-bounds.  */\n+/* Test -fstrict-flex-arrays + -Warray-bounds + -Wstrict-flex-arrays.  */\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fstrict-flex-arrays=2 -Warray-bounds\" } */\n+/* { dg-options \"-O2 -Wstrict-flex-arrays -fstrict-flex-arrays=2 -Warray-bounds\" } */\n \n struct trailing_array_1 {\n     int a;\n@@ -32,7 +32,9 @@ void __attribute__((__noinline__)) stuff(\n     struct trailing_array_4 *trailing_flex)\n {\n     normal->c[5] = 5; \t/*{ dg-warning \"array subscript 5 is above array bounds of\" } */\n+    \t\t\t/*{ dg-warning \"should not be used as a flexible array member for level 1 and above\" \"\" { target *-*-* } .-1 } */\n     trailing_1->c[2] = 2; /* { dg-warning \"array subscript 2 is above array bounds of\"  } */\n+    \t\t\t  /* { dg-warning \"should not be used as a flexible array member for level 2 and above\" \"\" { target *-*-* } .-1 } */\n     trailing_0->c[1] = 1; /* { dg-bogus \"array subscript \" } */\n     trailing_flex->c[10] = 10; /* { dg-bogus \"array subscript \" } */\n "}, {"sha": "25b903f2615b84e11ddd5f9dfa31cb180e9eb392", "filename": "gcc/testsuite/gcc.dg/Warray-bounds-flex-arrays-3.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a27ae32fabf85685ffff758459d7ec284ccb95a/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-flex-arrays-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a27ae32fabf85685ffff758459d7ec284ccb95a/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-flex-arrays-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-flex-arrays-3.c?ref=2a27ae32fabf85685ffff758459d7ec284ccb95a", "patch": "@@ -1,6 +1,6 @@\n-/* Test -fstrict-flex-arrays + -Warray-bounds.  */\n+/* Test -fstrict-flex-arrays + -Warray-bounds + -Wstrict-flex-arrays.  */\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fstrict-flex-arrays=3 -Warray-bounds\" } */\n+/* { dg-options \"-O2 -Wstrict-flex-arrays -fstrict-flex-arrays=3 -Warray-bounds\" } */\n \n struct trailing_array_1 {\n     int a;\n@@ -32,8 +32,11 @@ void __attribute__((__noinline__)) stuff(\n     struct trailing_array_4 *trailing_flex)\n {\n     normal->c[5] = 5; \t/*{ dg-warning \"array subscript 5 is above array bounds of\" } */ \n+    \t\t\t/*{ dg-warning \"should not be used as a flexible array member for level 1 and above\" \"\" { target *-*-* } .-1 } */\n     trailing_1->c[2] = 2; /*{ dg-warning \"array subscript 2 is above array bounds of\" } */ \n+    \t\t\t  /* { dg-warning \"should not be used as a flexible array member for level 2 and above\" \"\" { target *-*-* } .-1 } */\n     trailing_0->c[1] = 1; /*{ dg-warning \"array subscript 1 is outside array bounds of\" } */ \n+    \t\t\t  /* { dg-warning \"should not be used as a flexible array member for level 3\" \"\" { target *-*-* } .-1 } */\n     trailing_flex->c[10] = 10; /* { dg-bogus \"array subscript\" } */\n \n }"}, {"sha": "5fc500a19ca6ac88d7f9ed8a95fa86b7233f6262", "filename": "gcc/testsuite/gcc.dg/Warray-bounds-flex-arrays-4.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a27ae32fabf85685ffff758459d7ec284ccb95a/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-flex-arrays-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a27ae32fabf85685ffff758459d7ec284ccb95a/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-flex-arrays-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-flex-arrays-4.c?ref=2a27ae32fabf85685ffff758459d7ec284ccb95a", "patch": "@@ -1,6 +1,6 @@\n-/* Test -fstrict-flex-arrays + -Warray-bounds=2.  */\n+/* Test -fstrict-flex-arrays + -Warray-bounds=2 + -Wstrict-flex-arrays.  */\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fstrict-flex-arrays=1 -Warray-bounds=2\" } */\n+/* { dg-options \"-O2 -Wstrict-flex-arrays -fstrict-flex-arrays=1 -Warray-bounds=2\" } */\n \n struct trailing_array_1 {\n     int a;\n@@ -32,6 +32,7 @@ void __attribute__((__noinline__)) stuff(\n     struct trailing_array_4 *trailing_flex)\n {\n     normal->c[5] = 5; \t/*{ dg-warning \"array subscript 5 is above array bounds of\" } */\n+    \t\t\t/*{ dg-warning \"should not be used as a flexible array member for level 1 and above\" \"\" { target *-*-* } .-1 } */\n     trailing_1->c[2] = 2; /* { dg-bogus \"array subscript \" } */\n     trailing_0->c[1] = 1; /* { dg-bogus \"array subscript \" } */\n     trailing_flex->c[10] = 10; /* { dg-bogus \"array subscript \" } */"}, {"sha": "30bb4ca8832eb6de31fc26f38bd5281c97041728", "filename": "gcc/testsuite/gcc.dg/Warray-bounds-flex-arrays-5.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a27ae32fabf85685ffff758459d7ec284ccb95a/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-flex-arrays-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a27ae32fabf85685ffff758459d7ec284ccb95a/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-flex-arrays-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-flex-arrays-5.c?ref=2a27ae32fabf85685ffff758459d7ec284ccb95a", "patch": "@@ -1,6 +1,6 @@\n-/* Test -fstrict-flex-arrays + -Warray-bounds=2.  */\n+/* Test -fstrict-flex-arrays + -Warray-bounds=2 + -Wstrict-flex-arrays.  */\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fstrict-flex-arrays=2 -Warray-bounds=2\" } */\n+/* { dg-options \"-O2 -Wstrict-flex-arrays -fstrict-flex-arrays=2 -Warray-bounds=2\" } */\n \n struct trailing_array_1 {\n     int a;\n@@ -32,7 +32,9 @@ void __attribute__((__noinline__)) stuff(\n     struct trailing_array_4 *trailing_flex)\n {\n     normal->c[5] = 5;   /*{ dg-warning \"array subscript 5 is above array bounds of\" } */\n+    \t\t\t/*{ dg-warning \"should not be used as a flexible array member for level 1 and above\" \"\" { target *-*-* } .-1 } */\n     trailing_1->c[2] = 2; /*{ dg-warning \"array subscript 2 is above array bounds of\" } */\n+    \t\t\t  /* { dg-warning \"should not be used as a flexible array member for level 2 and above\" \"\" { target *-*-* } .-1 } */\n     trailing_0->c[1] = 1; /* { dg-bogus \"array subscript \" } */\n     trailing_flex->c[10] = 10; /* { dg-bogus \"array subscript \" } */\n "}, {"sha": "e847a44516e2ee0a3e4b74b596486fb07c647061", "filename": "gcc/testsuite/gcc.dg/Warray-bounds-flex-arrays-6.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a27ae32fabf85685ffff758459d7ec284ccb95a/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-flex-arrays-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a27ae32fabf85685ffff758459d7ec284ccb95a/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-flex-arrays-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-flex-arrays-6.c?ref=2a27ae32fabf85685ffff758459d7ec284ccb95a", "patch": "@@ -1,6 +1,6 @@\n-/* Test -fstrict-flex-arrays + -Warray-bounds=2.  */\n+/* Test -fstrict-flex-arrays + -Warray-bounds=2 + -Wstrict-flex-arrays.  */\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fstrict-flex-arrays=3 -Warray-bounds=2\" } */\n+/* { dg-options \"-O2 -Wstrict-flex-arrays -fstrict-flex-arrays=3 -Warray-bounds=2\" } */\n \n struct trailing_array_1 {\n     int a;\n@@ -32,8 +32,11 @@ void __attribute__((__noinline__)) stuff(\n     struct trailing_array_4 *trailing_flex)\n {\n     normal->c[5] = 5; \t/*{ dg-warning \"array subscript 5 is above array bounds of\" } */ \n+    \t\t\t/*{ dg-warning \"should not be used as a flexible array member for level 1 and above\" \"\" { target *-*-* } .-1 } */\n     trailing_1->c[2] = 2; /*{ dg-warning \"array subscript 2 is above array bounds of\" } */\n+    \t\t\t  /* { dg-warning \"should not be used as a flexible array member for level 2 and above\" \"\" { target *-*-* } .-1 } */\n     trailing_0->c[1] = 1; /*{ dg-warning \"array subscript 1 is outside array bounds of\" } */\n+    \t\t\t  /* { dg-warning \"should not be used as a flexible array member for level 3\" \"\" { target *-*-* } .-1 } */\n     trailing_flex->c[10] = 10; /* { dg-bogus \"array subscript \" } */\n \n }"}, {"sha": "2e241f962087d0143a4742807169951fd4ca30ef", "filename": "gcc/testsuite/gcc.dg/Wstrict-flex-arrays-2.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a27ae32fabf85685ffff758459d7ec284ccb95a/gcc%2Ftestsuite%2Fgcc.dg%2FWstrict-flex-arrays-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a27ae32fabf85685ffff758459d7ec284ccb95a/gcc%2Ftestsuite%2Fgcc.dg%2FWstrict-flex-arrays-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWstrict-flex-arrays-2.c?ref=2a27ae32fabf85685ffff758459d7ec284ccb95a", "patch": "@@ -0,0 +1,39 @@\n+/* Test -Wstrict-flex-arrays.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -Wstrict-flex-arrays -fstrict-flex-arrays=2\" } */\n+\n+struct trailing_array_1 {\n+    int a;\n+    int b;\n+    int c[4]; \n+};\n+\n+struct trailing_array_2 {\n+    int a;\n+    int b;\n+    int c[1]; \n+};\n+\n+struct trailing_array_3 {\n+    int a;\n+    int b;\n+    int c[0];\n+};\n+struct trailing_array_4 {\n+    int a;\n+    int b;\n+    int c[];\n+};\n+\n+void __attribute__((__noinline__)) stuff(\n+    struct trailing_array_1 *normal,\n+    struct trailing_array_2 *trailing_1,\n+    struct trailing_array_3 *trailing_0,\n+    struct trailing_array_4 *trailing_flex)\n+{\n+    normal->c[5] = 5; \t/*{ dg-warning \"should not be used as a flexible array member for level 1 and above\" } */\n+    trailing_1->c[2] = 2; /* { dg-warning \"should not be used as a flexible array member for level 2 and above\" } */\n+    trailing_0->c[1] = 1; /* { dg-bogus \"should not be used as a flexible array member for level 2 and above\" } */\n+    trailing_flex->c[10] = 10; /* { dg-bogus \"should not be used as a flexible array member for level 2 and above\" } */\n+\n+}"}, {"sha": "97eb65ba0a96d4383e3a0ac3ca60ee2bec4486b1", "filename": "gcc/testsuite/gcc.dg/Wstrict-flex-arrays-3.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a27ae32fabf85685ffff758459d7ec284ccb95a/gcc%2Ftestsuite%2Fgcc.dg%2FWstrict-flex-arrays-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a27ae32fabf85685ffff758459d7ec284ccb95a/gcc%2Ftestsuite%2Fgcc.dg%2FWstrict-flex-arrays-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWstrict-flex-arrays-3.c?ref=2a27ae32fabf85685ffff758459d7ec284ccb95a", "patch": "@@ -0,0 +1,39 @@\n+/* Test -Wstrict-flex-arrays.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -Wstrict-flex-arrays -fstrict-flex-arrays=3\" } */\n+\n+struct trailing_array_1 {\n+    int a;\n+    int b;\n+    int c[4]; \n+};\n+\n+struct trailing_array_2 {\n+    int a;\n+    int b;\n+    int c[1]; \n+};\n+\n+struct trailing_array_3 {\n+    int a;\n+    int b;\n+    int c[0];\n+};\n+struct trailing_array_4 {\n+    int a;\n+    int b;\n+    int c[];\n+};\n+\n+void __attribute__((__noinline__)) stuff(\n+    struct trailing_array_1 *normal,\n+    struct trailing_array_2 *trailing_1,\n+    struct trailing_array_3 *trailing_0,\n+    struct trailing_array_4 *trailing_flex)\n+{\n+    normal->c[5] = 5; \t/*{ dg-warning \"should not be used as a flexible array member for level 1 and above\" } */\n+    trailing_1->c[2] = 2; /* { dg-warning \"should not be used as a flexible array member for level 2 and above\" } */\n+    trailing_0->c[1] = 1; /* { dg-warning \"should not be used as a flexible array member for level 3\" } */\n+    trailing_flex->c[10] = 10; /* { dg-bogus \"should not be used as a flexible array member for level 3\" } */\n+\n+}"}, {"sha": "110fdc72778ac658401e23f73c2175bb29d6e0b8", "filename": "gcc/testsuite/gcc.dg/Wstrict-flex-arrays.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a27ae32fabf85685ffff758459d7ec284ccb95a/gcc%2Ftestsuite%2Fgcc.dg%2FWstrict-flex-arrays.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a27ae32fabf85685ffff758459d7ec284ccb95a/gcc%2Ftestsuite%2Fgcc.dg%2FWstrict-flex-arrays.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWstrict-flex-arrays.c?ref=2a27ae32fabf85685ffff758459d7ec284ccb95a", "patch": "@@ -0,0 +1,39 @@\n+/* Test -Wstrict-flex-arrays.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -Wstrict-flex-arrays -fstrict-flex-arrays=1\" } */\n+\n+struct trailing_array_1 {\n+    int a;\n+    int b;\n+    int c[4]; \n+};\n+\n+struct trailing_array_2 {\n+    int a;\n+    int b;\n+    int c[1]; \n+};\n+\n+struct trailing_array_3 {\n+    int a;\n+    int b;\n+    int c[0];\n+};\n+struct trailing_array_4 {\n+    int a;\n+    int b;\n+    int c[];\n+};\n+\n+void __attribute__((__noinline__)) stuff(\n+    struct trailing_array_1 *normal,\n+    struct trailing_array_2 *trailing_1,\n+    struct trailing_array_3 *trailing_0,\n+    struct trailing_array_4 *trailing_flex)\n+{\n+    normal->c[5] = 5; \t/*{ dg-warning \"should not be used as a flexible array member for level 1 and above\" } */\n+    trailing_1->c[2] = 2; /* { dg-bogus \"should not be used as a flexible array member for level 1 and above\" } */\n+    trailing_0->c[1] = 1; /* { dg-bogus \"should not be used as a flexible array member for level 1 and above\" } */\n+    trailing_flex->c[10] = 10; /* { dg-bogus \"should not be used as a flexible array member for level 1 and above\" } */\n+\n+}"}, {"sha": "e6c6c5a301db725855ff7c76eebafaf34afaa01f", "filename": "gcc/tree-vrp.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a27ae32fabf85685ffff758459d7ec284ccb95a/gcc%2Ftree-vrp.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a27ae32fabf85685ffff758459d7ec284ccb95a/gcc%2Ftree-vrp.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.cc?ref=2a27ae32fabf85685ffff758459d7ec284ccb95a", "patch": "@@ -1087,7 +1087,7 @@ execute_ranger_vrp (struct function *fun, bool warn_array_bounds_p,\n   if (dump_file && (dump_flags & TDF_DETAILS))\n     ranger->dump (dump_file);\n \n-  if (warn_array_bounds && warn_array_bounds_p)\n+  if ((warn_array_bounds || warn_strict_flex_arrays) && warn_array_bounds_p)\n     {\n       // Set all edges as executable, except those ranger says aren't.\n       int non_exec_flag = ranger->non_executable_edge_flag;"}]}