{"sha": "29a820586a2920fa8a8197a456ce7134e6fa6c89", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjlhODIwNTg2YTI5MjBmYThhODE5N2E0NTZjZTcxMzRlNmZhNmM4OQ==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "1998-02-14T01:13:58Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-02-14T01:13:58Z"}, "message": "varasm.c (output_constant_pool): Bring back 'done' label inside an appropriate #ifdef.\n\n        * varasm.c (output_constant_pool): Bring back 'done' label inside\n        an appropriate #ifdef.\n        * bitmap.c (bitmap_element_allocate): Wrap variable 'i' in an\n        appropriate #ifdef.\n        (bitmap_copy, bitmap_operation): Likewise.\n        * combine.c (combinable_i3pat): Similarly for 'src'.\n        * function.c (fixup_var_refs_1): Similarly for 'outerdest'.\n        (locate_and_pad_parm): Similarly for 'reg_parm_stack_space'.\n        * regclass.c (copy_cost): Similarly for 'secondary_class'.\n        * reload.c (make_memloc): Simliarly for 'i'.\n        (find_reloads_address_1): Similarly for 'link'.\n        * reload1.c (reload): Similarly for 'previous_frame_pointer_needed'.\n        (emit_reload_insns): Similarly for 'second_reloadreg'.\n        * unroll.c (iteration_info): Similarly for 'v'.\n        * caller-save.c (insert_save_restore): Remove unused variable 'i'.\n        * calls.c (expand_call): Similarly for 'i'.\n        (emit_library_call, emit_library_call_value): Similarly for 'mode'.\n        * fold-const.c (strip_compund_expr): Similarly for 'type'.\n        * function.c (fixup_var_refs_1): Similarly  for 'width'.\n        (fixup_memory_subreg): Similarly for 'saved'.\n        (locate_and_pad_parm): Similarly for 'boundary_in_bytes.'\n        (setjmp_protect): Similarly for 'sub'.\n        (thread_prologue_and_epilogue_insns): Similarly for 'insn'.\n        * loop.c (record_giv): Similarly for 'p'.\n        (combine_givs): Similarly for 'temp_iv'.\n        (indirect_jump_in_function_p): Similarly for 'is_indirect_jump'.\n        * recog.c (validate_replace_rtx_1): Similarly for 'width'.\n        * tree.c (get_set_constructor_bytes): Similarly for 'vals'.\n        * unroll.c (unroll_loop): Similarly for 'copy'.\n        (iteration_info): Similarly for 'b'.\n        * varasm.c (assemble_string): Similarly for 'i'.\n        * i386.h (LEGITIMIZE_ADDRESS): Similarly for 'orig_x'.\n\nFrom-SVN: r17973", "tree": {"sha": "6885c440b35dd27c86ae5bd10e74f834fee5aee6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6885c440b35dd27c86ae5bd10e74f834fee5aee6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/29a820586a2920fa8a8197a456ce7134e6fa6c89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29a820586a2920fa8a8197a456ce7134e6fa6c89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29a820586a2920fa8a8197a456ce7134e6fa6c89", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29a820586a2920fa8a8197a456ce7134e6fa6c89/comments", "author": null, "committer": null, "parents": [{"sha": "bfd5e22089277cfde6de2eee08a844c6476a5bee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfd5e22089277cfde6de2eee08a844c6476a5bee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bfd5e22089277cfde6de2eee08a844c6476a5bee"}], "stats": {"total": 106, "additions": 80, "deletions": 26}, "files": [{"sha": "5042d585f353b3e8f2ea9bf45aa1252df11370c8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29a820586a2920fa8a8197a456ce7134e6fa6c89/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29a820586a2920fa8a8197a456ce7134e6fa6c89/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=29a820586a2920fa8a8197a456ce7134e6fa6c89", "patch": "@@ -1,3 +1,40 @@\n+Sat Feb 14 02:02:41 1998  Jeffrey A Law  (law@cygnus.com)\n+\n+\t* varasm.c (output_constant_pool): Bring back 'done' label inside\n+\tan appropriate #ifdef.\n+\n+\t* bitmap.c (bitmap_element_allocate): Wrap variable 'i' in an \n+\tappropriate #ifdef.\n+\t(bitmap_copy, bitmap_operation): Likewise.\n+\t* combine.c (combinable_i3pat): Similarly for 'src'.\n+\t* function.c (fixup_var_refs_1): Similarly for 'outerdest'.\n+\t(locate_and_pad_parm): Similarly for 'reg_parm_stack_space'.\n+\t* regclass.c (copy_cost): Similarly for 'secondary_class'.\n+\t* reload.c (make_memloc): Simliarly for 'i'.\n+\t(find_reloads_address_1): Similarly for 'link'.\n+\t* reload1.c (reload): Similarly for 'previous_frame_pointer_needed'.\n+\t(emit_reload_insns): Similarly for 'second_reloadreg'.\n+\t* unroll.c (iteration_info): Similarly for 'v'.\n+\n+\t* caller-save.c (insert_save_restore): Remove unused variable 'i'.\n+\t* calls.c (expand_call): Similarly for 'i'.\n+\t(emit_library_call, emit_library_call_value): Similarly for 'mode'.\n+\t* fold-const.c (strip_compund_expr): Similarly for 'type'.\n+\t* function.c (fixup_var_refs_1): Similarly  for 'width'.\n+\t(fixup_memory_subreg): Similarly for 'saved'.\n+\t(locate_and_pad_parm): Similarly for 'boundary_in_bytes.'\n+\t(setjmp_protect): Similarly for 'sub'.\n+\t(thread_prologue_and_epilogue_insns): Similarly for 'insn'.\n+\t* loop.c (record_giv): Similarly for 'p'.\n+\t(combine_givs): Similarly for 'temp_iv'.\n+\t(indirect_jump_in_function_p): Similarly for 'is_indirect_jump'.\n+\t* recog.c (validate_replace_rtx_1): Similarly for 'width'.\n+\t* tree.c (get_set_constructor_bytes): Similarly for 'vals'.\n+\t* unroll.c (unroll_loop): Similarly for 'copy'.\n+\t(iteration_info): Similarly for 'b'.\n+\t* varasm.c (assemble_string): Similarly for 'i'.\n+\t* i386.h (LEGITIMIZE_ADDRESS): Similarly for 'orig_x'.\n+\n Fri Feb 13 14:38:34 1998  Jim Wilson  <wilson@cygnus.com>\n \n \t* dwarf2out.c (decl_scope_node): New type."}, {"sha": "8fb9f27cb460d169e8597640489e2060afbf6aed", "filename": "gcc/bitmap.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29a820586a2920fa8a8197a456ce7134e6fa6c89/gcc%2Fbitmap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29a820586a2920fa8a8197a456ce7134e6fa6c89/gcc%2Fbitmap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbitmap.c?ref=29a820586a2920fa8a8197a456ce7134e6fa6c89", "patch": "@@ -92,7 +92,9 @@ bitmap_element_allocate (head)\n      bitmap head;\n {\n   bitmap_element *element;\n+#if BITMAP_ELEMENT_WORDS != 2\n   int i;\n+#endif\n \n   if (bitmap_free != 0)\n     {\n@@ -246,7 +248,9 @@ bitmap_copy (to, from)\n      bitmap from;\n {\n   bitmap_element *from_ptr, *to_ptr = 0;\n+#if BITMAP_ELEMENT_WORDS != 2\n   int i;\n+#endif\n \n   bitmap_clear (to);\n \n@@ -413,7 +417,9 @@ bitmap_operation (to, from1, from2, operation)\n   bitmap_element *from1_tmp;\n   bitmap_element *from2_tmp;\n   unsigned int indx;\n+#if BITMAP_ELEMENT_WORDS != 2\n   int i;\n+#endif\n \n   /* To simplify things, always create a new list.  If the old list was one\n      of the inputs, free it later.  Otherwise, free it now.  */"}, {"sha": "4053aa093d57eb2442ba9d5fdb89fffeec4b6308", "filename": "gcc/caller-save.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29a820586a2920fa8a8197a456ce7134e6fa6c89/gcc%2Fcaller-save.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29a820586a2920fa8a8197a456ce7134e6fa6c89/gcc%2Fcaller-save.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcaller-save.c?ref=29a820586a2920fa8a8197a456ce7134e6fa6c89", "patch": "@@ -1,5 +1,5 @@\n /* Save and restore call-clobbered registers which are live across a call.\n-   Copyright (C) 1989, 1992, 1994, 1995, 1997 Free Software Foundation, Inc.\n+   Copyright (C) 1989, 1992, 94-95, 1997, 1998 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -642,7 +642,7 @@ insert_save_restore (insn, save_p, regno, insn_mode, maxrestore)\n {\n   rtx pat;\n   enum insn_code code;\n-  int i, numregs;\n+  int numregs;\n \n   /* A common failure mode if register status is not correct in the RTL\n      is for this routine to be called with a REGNO we didn't expect to"}, {"sha": "962882d383e1d52a3b224528abad5386c7b428ae", "filename": "gcc/calls.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29a820586a2920fa8a8197a456ce7134e6fa6c89/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29a820586a2920fa8a8197a456ce7134e6fa6c89/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=29a820586a2920fa8a8197a456ce7134e6fa6c89", "patch": "@@ -2110,7 +2110,6 @@ expand_call (exp, target, ignore)\n \t Deal with them explicitly by copying from the return registers\n \t into the target MEM locations.  */\n       int bytes = int_size_in_bytes (TREE_TYPE (exp));\n-      int i;\n       rtx src, dst;\n       int bitsize = MIN (TYPE_ALIGN (TREE_TYPE (exp)), BITS_PER_WORD);\n       int bitpos, xbitpos, big_endian_correction = 0;\n@@ -2696,7 +2695,6 @@ emit_library_call VPROTO((rtx orgfun, int no_queue, enum machine_mode outmode,\n      are to be pushed.  */\n   for (count = 0; count < nargs; count++, argnum += inc)\n     {\n-      register enum machine_mode mode = argvec[argnum].mode;\n       register rtx val = argvec[argnum].value;\n       rtx reg = argvec[argnum].reg;\n       int partial = argvec[argnum].partial;\n@@ -3272,7 +3270,6 @@ emit_library_call_value VPROTO((rtx orgfun, rtx value, int no_queue,\n      are to be pushed.  */\n   for (count = 0; count < nargs; count++, argnum += inc)\n     {\n-      register enum machine_mode mode = argvec[argnum].mode;\n       register rtx val = argvec[argnum].value;\n       rtx reg = argvec[argnum].reg;\n       int partial = argvec[argnum].partial;"}, {"sha": "81f4d9bb6e212a6b16d8a83743211c37fa733d27", "filename": "gcc/combine.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29a820586a2920fa8a8197a456ce7134e6fa6c89/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29a820586a2920fa8a8197a456ce7134e6fa6c89/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=29a820586a2920fa8a8197a456ce7134e6fa6c89", "patch": "@@ -1198,7 +1198,11 @@ combinable_i3pat (i3, loc, i2dest, i1dest, i1_not_in_src, pi3dest_killed)\n       rtx set = expand_field_assignment (x);\n       rtx dest = SET_DEST (set);\n       rtx src = SET_SRC (set);\n-      rtx inner_dest = dest, inner_src = src;\n+      rtx inner_dest = dest;\n+ \n+#if 0\n+      rtx inner_src = src;\n+#endif\n \n       SUBST (*loc, set);\n "}, {"sha": "3c9d47d38fd8eea061ce0cb07c5ad35b13621e91", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29a820586a2920fa8a8197a456ce7134e6fa6c89/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29a820586a2920fa8a8197a456ce7134e6fa6c89/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=29a820586a2920fa8a8197a456ce7134e6fa6c89", "patch": "@@ -1670,7 +1670,6 @@ do {\t\t\t\t\t\t\\\n \n #define LEGITIMIZE_ADDRESS(X, OLDX, MODE, WIN)\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\\n-  rtx orig_x = (X);\t\t\t\t\t\t\t\\\n   (X) = legitimize_address (X, OLDX, MODE);\t\t\t\t\\\n   if (memory_address_p (MODE, X))\t\t\t\t\t\\\n     goto WIN;\t\t\t\t\t\t\t\t\\"}, {"sha": "4d021dbfebcb1be2beb9a27df2521905b72fa748", "filename": "gcc/fold-const.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29a820586a2920fa8a8197a456ce7134e6fa6c89/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29a820586a2920fa8a8197a456ce7134e6fa6c89/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=29a820586a2920fa8a8197a456ce7134e6fa6c89", "patch": "@@ -3664,7 +3664,6 @@ strip_compound_expr (t, s)\n      tree t;\n      tree s;\n {\n-  tree type = TREE_TYPE (t);\n   enum tree_code code = TREE_CODE (t);\n \n   /* See if this is the COMPOUND_EXPR we want to eliminate.  */"}, {"sha": "6c274edf21b5f7a437f26150b2fc7741d7f3f0db", "filename": "gcc/function.c", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29a820586a2920fa8a8197a456ce7134e6fa6c89/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29a820586a2920fa8a8197a456ce7134e6fa6c89/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=29a820586a2920fa8a8197a456ce7134e6fa6c89", "patch": "@@ -1849,7 +1849,6 @@ fixup_var_refs_1 (var, promoted_mode, loc, insn, replacements)\n \t    {\n \t      enum machine_mode wanted_mode = VOIDmode;\n \t      enum machine_mode is_mode = GET_MODE (tem);\n-\t      int width = INTVAL (XEXP (x, 1));\n \t      int pos = INTVAL (XEXP (x, 2));\n \n #ifdef HAVE_extzv\n@@ -1998,7 +1997,9 @@ fixup_var_refs_1 (var, promoted_mode, loc, insn, replacements)\n       {\n \trtx dest = SET_DEST (x);\n \trtx src = SET_SRC (x);\n+#ifdef HAVE_insv\n \trtx outerdest = dest;\n+#endif\n \n \twhile (GET_CODE (dest) == SUBREG || GET_CODE (dest) == STRICT_LOW_PART\n \t       || GET_CODE (dest) == SIGN_EXTRACT\n@@ -2268,7 +2269,7 @@ fixup_memory_subreg (x, insn, uncritical)\n   int offset = SUBREG_WORD (x) * UNITS_PER_WORD;\n   rtx addr = XEXP (SUBREG_REG (x), 0);\n   enum machine_mode mode = GET_MODE (x);\n-  rtx saved, result;\n+  rtx result;\n \n   /* Paradoxical SUBREGs are usually invalid during RTL generation.  */\n   if (GET_MODE_SIZE (mode) > GET_MODE_SIZE (GET_MODE (SUBREG_REG (x)))\n@@ -4483,14 +4484,14 @@ locate_and_pad_parm (passed_mode, type, in_regs, fndecl,\n     = type ? size_in_bytes (type) : size_int (GET_MODE_SIZE (passed_mode));\n   enum direction where_pad = FUNCTION_ARG_PADDING (passed_mode, type);\n   int boundary = FUNCTION_ARG_BOUNDARY (passed_mode, type);\n-  int boundary_in_bytes = boundary / BITS_PER_UNIT;\n-  int reg_parm_stack_space = 0;\n \n #ifdef REG_PARM_STACK_SPACE\n   /* If we have found a stack parm before we reach the end of the\n      area reserved for registers, skip that area.  */\n   if (! in_regs)\n     {\n+      int reg_parm_stack_space = 0;\n+\n #ifdef MAYBE_REG_PARM_STACK_SPACE\n       reg_parm_stack_space = MAYBE_REG_PARM_STACK_SPACE;\n #else\n@@ -4732,7 +4733,7 @@ setjmp_protect (block)\n void\n setjmp_protect_args ()\n {\n-  register tree decl, sub;\n+  register tree decl;\n   for (decl = DECL_ARGUMENTS (current_function_decl);\n        decl; decl = TREE_CHAIN (decl))\n     if ((TREE_CODE (decl) == VAR_DECL\n@@ -5893,7 +5894,7 @@ thread_prologue_and_epilogue_insns (f)\n #ifdef HAVE_prologue\n   if (HAVE_prologue)\n     {\n-      rtx head, seq, insn;\n+      rtx head, seq;\n \n       /* The first insn (a NOTE_INSN_DELETED) is followed by zero or more\n \t prologue insns and a NOTE_INSN_PROLOGUE_END.  */"}, {"sha": "7f192d0c26034d421df29c3933126a02d9dee5ba", "filename": "gcc/loop.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29a820586a2920fa8a8197a456ce7134e6fa6c89/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29a820586a2920fa8a8197a456ce7134e6fa6c89/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=29a820586a2920fa8a8197a456ce7134e6fa6c89", "patch": "@@ -4659,7 +4659,6 @@ record_giv (v, insn, src_reg, dest_reg, mult_val, add_val, benefit,\n   struct induction *b;\n   struct iv_class *bl;\n   rtx set = single_set (insn);\n-  rtx p;\n \n   v->insn = insn;\n   v->src_reg = src_reg;\n@@ -5836,7 +5835,7 @@ static void\n combine_givs (bl)\n      struct iv_class *bl;\n {\n-  struct induction *g1, *g2, **giv_array, *temp_iv;\n+  struct induction *g1, *g2, **giv_array;\n   int i, j, giv_count, pass;\n \n   /* Count givs, because bl->giv_count is incorrect here.  */\n@@ -7682,7 +7681,6 @@ indirect_jump_in_function_p (start)\n      rtx start;\n {\n   rtx insn;\n-  int is_indirect_jump = 0;\n \n   for (insn = start; insn; insn = NEXT_INSN (insn))\n     if (computed_jump_p (insn))"}, {"sha": "32daf793af747bc3f230317c5477f7fe78730e99", "filename": "gcc/recog.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29a820586a2920fa8a8197a456ce7134e6fa6c89/gcc%2Frecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29a820586a2920fa8a8197a456ce7134e6fa6c89/gcc%2Frecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.c?ref=29a820586a2920fa8a8197a456ce7134e6fa6c89", "patch": "@@ -1,5 +1,5 @@\n /* Subroutines used by or related to instruction recognition.\n-   Copyright (C) 1987, 1988, 91-6, 1997 Free Software Foundation, Inc.\n+   Copyright (C) 1987, 1988, 91-97, 1998 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -466,7 +466,6 @@ validate_replace_rtx_1 (loc, from, to, object)\n \t{\n \t  enum machine_mode wanted_mode = VOIDmode;\n \t  enum machine_mode is_mode = GET_MODE (to);\n-\t  int width = INTVAL (XEXP (x, 1));\n \t  int pos = INTVAL (XEXP (x, 2));\n \n #ifdef HAVE_extzv"}, {"sha": "1f369a7ec65ec6e1bfa1a8fb152a839afc97811a", "filename": "gcc/regclass.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29a820586a2920fa8a8197a456ce7134e6fa6c89/gcc%2Fregclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29a820586a2920fa8a8197a456ce7134e6fa6c89/gcc%2Fregclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregclass.c?ref=29a820586a2920fa8a8197a456ce7134e6fa6c89", "patch": "@@ -1,5 +1,5 @@\n /* Compute register class preferences for pseudo-registers.\n-   Copyright (C) 1987, 88, 91-96, 1997 Free Software Foundation, Inc.\n+   Copyright (C) 1987, 88, 91-97, 1998 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -1408,7 +1408,9 @@ copy_cost (x, mode, class, to_p)\n      enum reg_class class;\n      int to_p;\n {\n+#ifdef HAVE_SECONDARY_RELOADS\n   enum reg_class secondary_class = NO_REGS;\n+#endif\n \n   /* If X is a SCRATCH, there is actually nothing to move since we are\n      assuming optimal allocation.  */"}, {"sha": "bf79834e1633c9a541b2746cddce1419be6c5afd", "filename": "gcc/reload.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29a820586a2920fa8a8197a456ce7134e6fa6c89/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29a820586a2920fa8a8197a456ce7134e6fa6c89/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=29a820586a2920fa8a8197a456ce7134e6fa6c89", "patch": "@@ -4256,7 +4256,9 @@ make_memloc (ad, regno)\n      rtx ad;\n      int regno;\n {\n+#if 0\n   register int i;\n+#endif\n   /* We must rerun eliminate_regs, in case the elimination\n      offsets have changed.  */\n   rtx tem = XEXP (eliminate_regs (reg_equiv_memory_loc[regno], 0, NULL_RTX), 0);\n@@ -4968,7 +4970,9 @@ find_reloads_address_1 (mode, x, context, loc, opnum, type, ind_levels, insn)\n \t       || !(context ? REGNO_OK_FOR_INDEX_P (regno)\n \t\t    : REGNO_MODE_OK_FOR_BASE_P (regno, mode))))\n \t    {\n+#ifdef AUTO_INC_DEC\n \t      register rtx link;\n+#endif\n \t      int reloadnum;\n \n \t      /* If we can output the register afterwards, do so, this"}, {"sha": "ed29d25e85e20e38d9d2b3cab841be727b529653", "filename": "gcc/reload1.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29a820586a2920fa8a8197a456ce7134e6fa6c89/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29a820586a2920fa8a8197a456ce7134e6fa6c89/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=29a820586a2920fa8a8197a456ce7134e6fa6c89", "patch": "@@ -890,7 +890,9 @@ reload (first, global, dumpfile)\n       rtx max_nongroups_insn[N_REG_CLASSES];\n       rtx x;\n       HOST_WIDE_INT starting_frame_size;\n+#if HARD_FRAME_POINTER_REGNUM != FRAME_POINTER_REGNUM\n       int previous_frame_pointer_needed = frame_pointer_needed;\n+#endif\n       static char *reg_class_names[] = REG_CLASS_NAMES;\n \n       something_changed = 0;\n@@ -6600,7 +6602,9 @@ emit_reload_insns (insn)\n \t  && reload_reg_rtx[j] != 0)\n \t{\n \t  register rtx reloadreg = reload_reg_rtx[j];\n+#ifdef SECONDARY_OUTPUT_RELOAD_CLASS\n \t  register rtx second_reloadreg = 0;\n+#endif\n \t  rtx note, p;\n \t  enum machine_mode mode;\n \t  int special = 0;"}, {"sha": "9659cd0ff811d47d9797fc8afd74d787e01d7352", "filename": "gcc/tree.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29a820586a2920fa8a8197a456ce7134e6fa6c89/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29a820586a2920fa8a8197a456ce7134e6fa6c89/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=29a820586a2920fa8a8197a456ce7134e6fa6c89", "patch": "@@ -1,5 +1,5 @@\n /* Language-independent node constructors for parse phase of GNU compiler.\n-   Copyright (C) 1987, 88, 92-96, 1997 Free Software Foundation, Inc.\n+   Copyright (C) 1987, 88, 92-97, 1998 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -4796,7 +4796,6 @@ get_set_constructor_bytes (init, buffer, wd_size)\n      int wd_size;\n {\n   int i;\n-  tree vals = TREE_OPERAND (init, 1);\n   int set_word_size = BITS_PER_UNIT;\n   int bit_size = wd_size * set_word_size;\n   int bit_pos = 0;"}, {"sha": "996675d406e2c81745c0e7cadd23751c713a5fe6", "filename": "gcc/unroll.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29a820586a2920fa8a8197a456ce7134e6fa6c89/gcc%2Funroll.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29a820586a2920fa8a8197a456ce7134e6fa6c89/gcc%2Funroll.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funroll.c?ref=29a820586a2920fa8a8197a456ce7134e6fa6c89", "patch": "@@ -1,5 +1,5 @@\n /* Try to unroll loops, and split induction variables.\n-   Copyright (C) 1992, 1993, 1994, 1995, 1997 Free Software Foundation, Inc.\n+   Copyright (C) 1992, 93-95, 1997, 1998 Free Software Foundation, Inc.\n    Contributed by James E. Wilson, Cygnus Support/UC Berkeley.\n \n This file is part of GNU CC.\n@@ -235,7 +235,7 @@ unroll_loop (loop_end, insn_count, loop_start, end_insert_before,\n   int i, j, temp;\n   int unroll_number = 1;\n   rtx copy_start, copy_end;\n-  rtx insn, copy, sequence, pattern, tem;\n+  rtx insn, sequence, pattern, tem;\n   int max_labelno, max_insnno;\n   rtx insert_before;\n   struct inline_remap *map;\n@@ -2309,7 +2309,9 @@ iteration_info (iteration_var, initial_value, increment, loop_start, loop_end)\n      rtx loop_start, loop_end;\n {\n   struct iv_class *bl;\n-  struct induction *v, *b;\n+#if 0\n+  struct induction *v;\n+#endif\n \n   /* Clear the result values, in case no answer can be found.  */\n   *initial_value = 0;"}, {"sha": "011b2341d88d8ae7c72cadef038d02f55ae3f5af", "filename": "gcc/varasm.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29a820586a2920fa8a8197a456ce7134e6fa6c89/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29a820586a2920fa8a8197a456ce7134e6fa6c89/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=29a820586a2920fa8a8197a456ce7134e6fa6c89", "patch": "@@ -1073,7 +1073,6 @@ assemble_string (p, size)\n      char *p;\n      int size;\n {\n-  register int i;\n   int pos = 0;\n   int maximum = 2000;\n \n@@ -3537,6 +3536,10 @@ output_constant_pool (fnname, fndecl)\n \n     }\n \n+#ifdef ASM_OUTPUT_SPECIAL_POOL_ENTRY\n+    done: ;\n+#endif\n+\n #ifdef ASM_OUTPUT_POOL_EPILOGUE\n   ASM_OUTPUT_POOL_EPILOGUE (asm_out_file, fnname, fndecl, pool_offset);\n #endif"}]}