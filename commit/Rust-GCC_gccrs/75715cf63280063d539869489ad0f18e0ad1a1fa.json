{"sha": "75715cf63280063d539869489ad0f18e0ad1a1fa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzU3MTVjZjYzMjgwMDYzZDUzOTg2OTQ4OWFkMGYxOGUwYWQxYTFmYQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2006-06-21T15:09:36Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2006-06-21T15:09:36Z"}, "message": "tree-ssa-loop-ivopts.c (may_be_nonaddressable_p): New function.\n\n\t* tree-ssa-loop-ivopts.c (may_be_nonaddressable_p): New function.\n\t(find_interesting_uses_address): Punt if above function returns true.\n\nFrom-SVN: r114851", "tree": {"sha": "e69f3c4f2aa88e84c047225360cea409efb14f51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e69f3c4f2aa88e84c047225360cea409efb14f51"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/75715cf63280063d539869489ad0f18e0ad1a1fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75715cf63280063d539869489ad0f18e0ad1a1fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75715cf63280063d539869489ad0f18e0ad1a1fa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75715cf63280063d539869489ad0f18e0ad1a1fa/comments", "author": null, "committer": null, "parents": [{"sha": "18fc9bd4937d19dbb7f7fbbd3299339fcb57156f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18fc9bd4937d19dbb7f7fbbd3299339fcb57156f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18fc9bd4937d19dbb7f7fbbd3299339fcb57156f"}], "stats": {"total": 84, "additions": 81, "deletions": 3}, "files": [{"sha": "f612b093dfe485f91f3af5f7c639554c4ee6829f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75715cf63280063d539869489ad0f18e0ad1a1fa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75715cf63280063d539869489ad0f18e0ad1a1fa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=75715cf63280063d539869489ad0f18e0ad1a1fa", "patch": "@@ -1,3 +1,8 @@\n+2006-06-21  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* tree-ssa-loop-ivopts.c (may_be_nonaddressable_p): New function.\n+\t(find_interesting_uses_address): Punt if above function returns true.\n+\n 2006-06-21  Richard Guenther  <rguenther@suse.de>\n \n \t* configure: Regenerated."}, {"sha": "3e9165c4afd02aa50da87bf48f89d00103d2cfa9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75715cf63280063d539869489ad0f18e0ad1a1fa/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75715cf63280063d539869489ad0f18e0ad1a1fa/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=75715cf63280063d539869489ad0f18e0ad1a1fa", "patch": "@@ -1,3 +1,7 @@\n+2006-06-21  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/loop_unchecked_conversion.ad[bs]: New test.\n+\n 2006-06-21  Joseph Myers  <joseph@codesourcery.com>\n \n \t* gcc.c-torture/execute/complex-7.c: New."}, {"sha": "e87c415c5480efa8c367befbf4b4343a90e67419", "filename": "gcc/testsuite/gnat.dg/loop_unchecked_conversion.adb", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75715cf63280063d539869489ad0f18e0ad1a1fa/gcc%2Ftestsuite%2Fgnat.dg%2Floop_unchecked_conversion.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75715cf63280063d539869489ad0f18e0ad1a1fa/gcc%2Ftestsuite%2Fgnat.dg%2Floop_unchecked_conversion.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Floop_unchecked_conversion.adb?ref=75715cf63280063d539869489ad0f18e0ad1a1fa", "patch": "@@ -0,0 +1,33 @@\n+-- { dg-do compile }\n+-- { dg-options \"-gnatws -O\" }\n+\n+with Unchecked_Conversion;\n+\n+package body loop_unchecked_conversion is\n+\n+   type Byte is mod 2**8;\n+\n+   type List is array (Natural range <>) of Byte;\n+\n+   subtype Integer_List is List (1 .. 4);\n+\n+   function Integer_Down is new\n+     Unchecked_Conversion (Source => Integer, Target => Integer_List);\n+\n+   type Storage (Size : Integer) is\n+      record\n+         Data : List (1 .. Size);\n+      end record;\n+\n+   type Storage_Pointer is access Storage;\n+\n+   The_Data_Storage : Storage_Pointer;\n+\n+   procedure slice is\n+   begin\n+      for I in 0 .. 1 loop\n+         The_Data_Storage.Data (I+1 .. I+4) := Integer_Down (I);\n+      end loop;\n+   end;\n+\n+end loop_unchecked_conversion;"}, {"sha": "5ce43e5524e8182366599cf4f60a65f1ae8642d5", "filename": "gcc/testsuite/gnat.dg/loop_unchecked_conversion.ads", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75715cf63280063d539869489ad0f18e0ad1a1fa/gcc%2Ftestsuite%2Fgnat.dg%2Floop_unchecked_conversion.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75715cf63280063d539869489ad0f18e0ad1a1fa/gcc%2Ftestsuite%2Fgnat.dg%2Floop_unchecked_conversion.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Floop_unchecked_conversion.ads?ref=75715cf63280063d539869489ad0f18e0ad1a1fa", "patch": "@@ -0,0 +1,5 @@\n+package loop_unchecked_conversion is\n+\n+   procedure slice;\n+\n+end loop_unchecked_conversion;"}, {"sha": "8a69664ba052d4fbdaa52340fb6e2b97508ad794", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 34, "deletions": 3, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75715cf63280063d539869489ad0f18e0ad1a1fa/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75715cf63280063d539869489ad0f18e0ad1a1fa/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=75715cf63280063d539869489ad0f18e0ad1a1fa", "patch": "@@ -1466,6 +1466,36 @@ may_be_unaligned_p (tree ref)\n   return false;\n }\n \n+/* Return true if EXPR may be non-addressable.   */\n+\n+static bool\n+may_be_nonaddressable_p (tree expr)\n+{\n+  switch (TREE_CODE (expr))\n+    {\n+    case COMPONENT_REF:\n+      return DECL_NONADDRESSABLE_P (TREE_OPERAND (expr, 1))\n+\t     || may_be_nonaddressable_p (TREE_OPERAND (expr, 0));\n+\n+    case ARRAY_REF:\n+    case ARRAY_RANGE_REF:\n+      return may_be_nonaddressable_p (TREE_OPERAND (expr, 0));\n+\n+    case VIEW_CONVERT_EXPR:\n+      /* This kind of view-conversions may wrap non-addressable objects\n+\t and make them look addressable.  After some processing the\n+\t non-addressability may be uncovered again, causing ADDR_EXPRs\n+\t of inappropriate objects to be built.  */\n+      return AGGREGATE_TYPE_P (TREE_TYPE (expr))\n+\t     && !AGGREGATE_TYPE_P (TREE_TYPE (TREE_OPERAND (expr, 0)));\n+\n+    default:\n+      break;\n+    }\n+\n+  return false;\n+}\n+\n /* Finds addresses in *OP_P inside STMT.  */\n \n static void\n@@ -1482,9 +1512,10 @@ find_interesting_uses_address (struct ivopts_data *data, tree stmt, tree *op_p)\n \n   /* Ignore bitfields for now.  Not really something terribly complicated\n      to handle.  TODO.  */\n-  if (TREE_CODE (base) == BIT_FIELD_REF\n-      || (TREE_CODE (base) == COMPONENT_REF\n-\t  && DECL_NONADDRESSABLE_P (TREE_OPERAND (base, 1))))\n+  if (TREE_CODE (base) == BIT_FIELD_REF)\n+    goto fail;\n+\n+  if (may_be_nonaddressable_p (base))\n     goto fail;\n \n   if (STRICT_ALIGNMENT"}]}