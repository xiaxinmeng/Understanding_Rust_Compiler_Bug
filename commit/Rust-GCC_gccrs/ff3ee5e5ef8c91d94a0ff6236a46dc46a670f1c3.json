{"sha": "ff3ee5e5ef8c91d94a0ff6236a46dc46a670f1c3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmYzZWU1ZTVlZjhjOTFkOTRhMGZmNjIzNmE0NmRjNDZhNjcwZjFjMw==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2019-07-10T08:59:55Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-07-10T08:59:55Z"}, "message": "[Ada] Spurious error on overloaded equality in postcondition\n\nThis patch fixes a spurious error in a postcondition in a nested\ninstantiation when the expression includes an inherited equality and\nchecks are enabled.\n\n2019-07-10  Ed Schonberg  <schonberg@adacore.com>\n\ngcc/ada/\n\n\t* sem_res.adb (Resolve_Equality_Op): Do not replace the resolved\n\toperator by its alias if expander is not active, because the\n\toperand type may not be frozen yet and its inherited operations\n\thave not yet been created.\n\ngcc/testsuite/\n\n\t* gnat.dg/equal8.adb, gnat.dg/equal8.ads,\n\tgnat.dg/equal8_pkg.ads: New testcase.\n\nFrom-SVN: r273327", "tree": {"sha": "54e1002b0622f74c880643bbeb9cd87b78864ade", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/54e1002b0622f74c880643bbeb9cd87b78864ade"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ff3ee5e5ef8c91d94a0ff6236a46dc46a670f1c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff3ee5e5ef8c91d94a0ff6236a46dc46a670f1c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff3ee5e5ef8c91d94a0ff6236a46dc46a670f1c3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff3ee5e5ef8c91d94a0ff6236a46dc46a670f1c3/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "19448640ac04e980ef665ae72bc3f106b4e5b6e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19448640ac04e980ef665ae72bc3f106b4e5b6e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19448640ac04e980ef665ae72bc3f106b4e5b6e0"}], "stats": {"total": 121, "additions": 120, "deletions": 1}, "files": [{"sha": "762db947835204c7b79fc74fdf01d4e00b658c53", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff3ee5e5ef8c91d94a0ff6236a46dc46a670f1c3/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff3ee5e5ef8c91d94a0ff6236a46dc46a670f1c3/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=ff3ee5e5ef8c91d94a0ff6236a46dc46a670f1c3", "patch": "@@ -1,3 +1,10 @@\n+2019-07-10  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_res.adb (Resolve_Equality_Op): Do not replace the resolved\n+\toperator by its alias if expander is not active, because the\n+\toperand type may not be frozen yet and its inherited operations\n+\thave not yet been created.\n+\n 2019-07-10  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* bindo-elaborators.adb (Elaborate_Units): Set attribute"}, {"sha": "4f56c53f1cc373364c1ee28bf8c6b915197b1428", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff3ee5e5ef8c91d94a0ff6236a46dc46a670f1c3/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff3ee5e5ef8c91d94a0ff6236a46dc46a670f1c3/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=ff3ee5e5ef8c91d94a0ff6236a46dc46a670f1c3", "patch": "@@ -8471,7 +8471,14 @@ package body Sem_Res is\n                   Get_Next_Interp (I, It);\n                end loop;\n \n-               if Present (Alias (Entity (N))) then\n+               --  If expansion is active and this is wn inherited operation,\n+               --  replace it with its ancestor. This must not be done during\n+               --  preanalysis because the type nay not be frozen yet, as when\n+               --  the context is a pre/post condition.\n+\n+               if Present (Alias (Entity (N)))\n+                 and then Expander_Active\n+               then\n                   Set_Entity (N, Alias (Entity (N)));\n                end if;\n             end;"}, {"sha": "5c247f16f16d19f5f1f238f7edaaf72747a5fa3b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff3ee5e5ef8c91d94a0ff6236a46dc46a670f1c3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff3ee5e5ef8c91d94a0ff6236a46dc46a670f1c3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ff3ee5e5ef8c91d94a0ff6236a46dc46a670f1c3", "patch": "@@ -1,3 +1,8 @@\n+2019-07-10  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* gnat.dg/equal8.adb, gnat.dg/equal8.ads,\n+\tgnat.dg/equal8_pkg.ads: New testcase.\n+\n 2019-07-10  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* g++.dg/diagnostic/complex-invalid-1.C: New."}, {"sha": "9424abcb8bc82ef8eb9557e11fb19b0d69b7497a", "filename": "gcc/testsuite/gnat.dg/equal8.adb", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff3ee5e5ef8c91d94a0ff6236a46dc46a670f1c3/gcc%2Ftestsuite%2Fgnat.dg%2Fequal8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff3ee5e5ef8c91d94a0ff6236a46dc46a670f1c3/gcc%2Ftestsuite%2Fgnat.dg%2Fequal8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fequal8.adb?ref=ff3ee5e5ef8c91d94a0ff6236a46dc46a670f1c3", "patch": "@@ -0,0 +1,6 @@\n+--  { dg-do compile }\n+--  { dg-options \"-gnata\" }\n+\n+package body Equal8 is\n+   procedure Foo is null;\n+end Equal8;"}, {"sha": "9b6694d673af6287c7126ab2b8e9a3de2de14a36", "filename": "gcc/testsuite/gnat.dg/equal8.ads", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff3ee5e5ef8c91d94a0ff6236a46dc46a670f1c3/gcc%2Ftestsuite%2Fgnat.dg%2Fequal8.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff3ee5e5ef8c91d94a0ff6236a46dc46a670f1c3/gcc%2Ftestsuite%2Fgnat.dg%2Fequal8.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fequal8.ads?ref=ff3ee5e5ef8c91d94a0ff6236a46dc46a670f1c3", "patch": "@@ -0,0 +1,36 @@\n+with Ada.Containers.Formal_Hashed_Sets;\n+with Ada.Strings.Hash;\n+\n+-- with Dynamic_Strings; use Dynamic_Strings;\n+-- with Bounded_Dynamic_Strings;\n+\n+with Equal8_Pkg;\n+\n+package Equal8 is\n+\n+   package Dynamic_Strings is\n+      --  pragma SPARK_Mode (On);\n+\n+      package Bounded_Dynamic_Strings is new Equal8_Pkg\n+  (Component     => Character,\n+   List_Index    => Positive,\n+   List          => String,\n+   Default_Value => ' ');\n+      type Dynamic_String is new Bounded_Dynamic_Strings.Sequence;\n+\n+   end Dynamic_Strings;\n+   use Dynamic_Strings;\n+\n+   subtype Subscription_Address is Dynamic_String (Capacity => 255);\n+\n+   function Hashed_Subscription_Address (Element : Subscription_Address)\n+      return Ada.Containers.Hash_Type is\n+      (Ada.Strings.Hash (Value (Element)));\n+\n+   package Subscription_Addresses is new Ada.Containers.Formal_Hashed_Sets\n+     (Element_Type        => Subscription_Address,\n+      Hash                => Hashed_Subscription_Address,\n+      Equivalent_Elements => \"=\");\n+\n+   procedure Foo;\n+end Equal8;"}, {"sha": "b454a2c5174323358c32d9cbc638b43f11afbe4b", "filename": "gcc/testsuite/gnat.dg/equal8_pkg.ads", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff3ee5e5ef8c91d94a0ff6236a46dc46a670f1c3/gcc%2Ftestsuite%2Fgnat.dg%2Fequal8_pkg.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff3ee5e5ef8c91d94a0ff6236a46dc46a670f1c3/gcc%2Ftestsuite%2Fgnat.dg%2Fequal8_pkg.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fequal8_pkg.ads?ref=ff3ee5e5ef8c91d94a0ff6236a46dc46a670f1c3", "patch": "@@ -0,0 +1,58 @@\n+generic\n+   type Component is private;\n+   type List_Index is range <>;\n+   type List is array (List_Index range <>) of Component;\n+   Default_Value : Component;\n+ --  with function \"=\" (Left, Right : List) return Boolean is <>;\n+\n+package Equal8_Pkg is\n+\n+   pragma Pure;\n+\n+   Maximum_Length : constant List_Index := List_Index'Last;\n+\n+   subtype Natural_Index is List_Index'Base range 0 .. Maximum_Length;\n+   type Sequence (Capacity : Natural_Index) is private;\n+   --  from zero to Capacity.\n+\n+   function Value (This : Sequence) return List;\n+   --  Returns the content of this sequence. The value returned is the\n+   --  \"logical\" value in that only that slice which is currently assigned\n+   --  is returned, as opposed to the entire physical representation.\n+\n+   overriding\n+   function \"=\" (Left, Right : Sequence) return Boolean with\n+     Inline;\n+\n+   function \"=\" (Left : Sequence;  Right : List) return Boolean with\n+     Inline;\n+\n+private\n+   type Sequence (Capacity : Natural_Index) is record\n+      Current_Length : Natural_Index := 0;\n+      Content        : List (1 .. Capacity) := (others => Default_Value);\n+   end record;\n+\n+   -----------\n+   -- Value --\n+   -----------\n+\n+   function Value (This : Sequence) return List is\n+     (This.Content (1 .. This.Current_Length));\n+\n+   ---------\n+   -- \"=\" --\n+   ---------\n+\n+   overriding\n+   function \"=\" (Left, Right : Sequence) return Boolean is\n+     (Value (Left) = Value (Right));\n+\n+   ---------\n+   -- \"=\" --\n+   ---------\n+\n+   function \"=\" (Left : Sequence;  Right : List) return Boolean is\n+     (Value (Left) = Right);\n+end Equal8_Pkg;\n+"}]}