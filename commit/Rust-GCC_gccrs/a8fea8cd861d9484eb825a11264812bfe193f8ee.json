{"sha": "a8fea8cd861d9484eb825a11264812bfe193f8ee", "node_id": "C_kwDOANBUbNoAKGE4ZmVhOGNkODYxZDk0ODRlYjgyNWExMTI2NDgxMmJmZTE5M2Y4ZWU", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2022-01-03T15:07:02Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-01-11T22:49:31Z"}, "message": "Make sure the Fortran specifics have real(kind=16).\n\nThis brings the library to compile with all specific functions.\nIt also corrects the patsubst patterns so the right files\nget the flags.\n\nIt was necessary to manually add -D__powerpc64__ because apparently\nthis is not set for Fortran.\n\nlibgfortran/ChangeLog:\n\n\t* Makefile.am: Correct files for compilation flags. Add\n\t-D__powerpc64__ for Fortran sources.  Get kinds.inc from\n\tgrep of kinds.h and kinds-override.h.\n\t* Makefile.in: Regenerate.\n\t* config.h.in: Regenerate.\n\t* configure: Regenerate.\n\t* configure.ac: Add -mno-gnu-attribute to compile flags.\n\t* generated/_abs_c17.F90: Regenerate.\n\t* generated/_abs_r17.F90: Regenerate.\n\t* generated/_acos_r17.F90: Regenerate.\n\t* generated/_acosh_r17.F90: Regenerate.\n\t* generated/_aimag_c17.F90: Regenerate.\n\t* generated/_aint_r17.F90: Regenerate.\n\t* generated/_anint_r17.F90: Regenerate.\n\t* generated/_asin_r17.F90: Regenerate.\n\t* generated/_asinh_r17.F90: Regenerate.\n\t* generated/_atan2_r17.F90: Regenerate.\n\t* generated/_atan_r17.F90: Regenerate.\n\t* generated/_atanh_r17.F90: Regenerate.\n\t* generated/_conjg_c17.F90: Regenerate.\n\t* generated/_cos_c17.F90: Regenerate.\n\t* generated/_cos_r17.F90: Regenerate.\n\t* generated/_cosh_r17.F90: Regenerate.\n\t* generated/_dim_r17.F90: Regenerate.\n\t* generated/_exp_c17.F90: Regenerate.\n\t* generated/_exp_r17.F90: Regenerate.\n\t* generated/_log10_r17.F90: Regenerate.\n\t* generated/_log_c17.F90: Regenerate.\n\t* generated/_log_r17.F90: Regenerate.\n\t* generated/_mod_r17.F90: Regenerate.\n\t* generated/_sign_r17.F90: Regenerate.\n\t* generated/_sin_c17.F90: Regenerate.\n\t* generated/_sin_r17.F90: Regenerate.\n\t* generated/_sinh_r17.F90: Regenerate.\n\t* generated/_sqrt_c17.F90: Regenerate.\n\t* generated/_sqrt_r17.F90: Regenerate.\n\t* generated/_tan_r17.F90: Regenerate.\n\t* generated/_tanh_r17.F90: Regenerate.\n\t* kinds-override.h: Adjust to trunk.\n\tChange condition to single line so it can be grepped.\n\t* m4/specific.m4: Make sure that real=kind16 is used\n\tfor _r17.F90 and _c17.F90 files.\n\t* m4/specific2.m4: Likewise.", "tree": {"sha": "ee73d165fefd7bae1dab62e71447de5bbef0bea0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ee73d165fefd7bae1dab62e71447de5bbef0bea0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a8fea8cd861d9484eb825a11264812bfe193f8ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8fea8cd861d9484eb825a11264812bfe193f8ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8fea8cd861d9484eb825a11264812bfe193f8ee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8fea8cd861d9484eb825a11264812bfe193f8ee/comments", "author": null, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90d6f0c71d0f65118cc7c195a4c3b29e98c77cfd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90d6f0c71d0f65118cc7c195a4c3b29e98c77cfd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90d6f0c71d0f65118cc7c195a4c3b29e98c77cfd"}], "stats": {"total": 295, "additions": 169, "deletions": 126}, "files": [{"sha": "26b9eb1b186d8d660e4367fc1f72b70e0bca9aa1", "filename": "libgfortran/Makefile.am", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8fea8cd861d9484eb825a11264812bfe193f8ee/libgfortran%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8fea8cd861d9484eb825a11264812bfe193f8ee/libgfortran%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FMakefile.am?ref=a8fea8cd861d9484eb825a11264812bfe193f8ee", "patch": "@@ -1077,15 +1077,16 @@ $(patsubst %.F90,%.lo,$(patsubst %.f90,%.lo,$(notdir $(gfor_specific_src)))): AM\n selected_real_kind.lo selected_int_kind.lo: AM_FCFLAGS += -fallow-leading-underscore\n \n # Build *_r17.F90 and *_c17.F90 with additional -mabi=ieeelongdouble on powerpc64le-linux.\n+\n if HAVE_REAL_17\n-$(patsubst %_r17.F90,%.lo,$(notdir $(gfor_specific_src))): AM_FCFLAGS += -mabi=ieeelongdouble\n-$(patsubst %_r17.c,%.lo,$(notdir $(gfor_specific_src))): AM_FCFLAGS += -mabi=ieeelongdouble\n-$(patsubst %_c17.F90,%.lo,$(notdir $(gfor_specific_src))): AM_FCFLAGS += -mabi=ieeelongdouble\n-$(patsubst %_c17.c,%.lo,$(notdir $(gfor_specific_src))): AM_FCFLAGS += -mabi=ieeelongdouble\n-$(patsubst %_r16.F90,%.lo,$(notdir $(gfor_specific_src))): AM_FCFLAGS += -mabi=ibmlongdouble\n-$(patsubst %_r16.c,%.lo,$(notdir $(gfor_specific_src))): AM_FCFLAGS += -mabi=ibmlongdouble\n-$(patsubst %_c16.F90,%.lo,$(notdir $(gfor_specific_src))): AM_FCFLAGS += -mabi=ibmlongdouble\n-$(patsubst %_c16.c,%.lo,$(notdir $(gfor_specific_src))): AM_FCFLAGS += -mabi=ibmlongdouble\n+$(patsubst %_r16.F90,%_r16.lo,$(notdir $(gfor_specific_src))): AM_FCFLAGS += -mabi=ibmlongdouble\n+$(patsubst %_c16.F90,%_c16.lo,$(notdir $(gfor_specific_src))): AM_FCFLAGS += -mabi=ibmlongdouble\n+$(patsubst %_r17.F90,%_r17.lo,$(notdir $(gfor_specific_src))): AM_FCFLAGS += -mabi=ieeelongdouble -D__powerpc64__\n+$(patsubst %_c17.F90,%_c17.lo,$(notdir $(gfor_specific_src))): AM_FCFLAGS += -mabi=ieeelongdouble -D__powerpc64__\n+$(patsubst %_r16.c,%_r16.lo,$(notdir $(gfor_built_src))): AM_CFLAGS += -mabi=ibmlongdouble\n+$(patsubst %_c16.c,%_c16.lo,$(notdir $(gfor_built_src))): AM_CFLAGS += -mabi=ibmlongdouble\n+$(patsubst %_r17.c,%_r17.lo,$(notdir $(gfor_built_src))): AM_CFLAGS += -mabi=ieeelongdouble\n+$(patsubst %_c17.c,%_c17.lo,$(notdir $(gfor_built_src))): AM_CFLAGS += -mabi=ieeelongdouble\n endif\n \n if IEEE_SUPPORT\n@@ -1160,8 +1161,8 @@ I_M4_DEPS9=$(I_M4_DEPS) m4/ifindloc2.m4\n kinds.h: $(srcdir)/mk-kinds-h.sh\n \t$(SHELL) $(srcdir)/mk-kinds-h.sh '@LIBGOMP_CHECKED_INT_KINDS@' '@LIBGOMP_CHECKED_REAL_KINDS@' '$(FCCOMPILE)' > $@ || rm $@\n \n-kinds.inc: kinds.h\n-\tgrep '^#' < kinds.h > $@\n+kinds.inc: kinds.h $(srcdir)/kinds-override.h\n+\tcat kinds.h $(srcdir)/kinds-override.h | grep '^#' | grep -v include > $@\n \n c99_protos.inc: $(srcdir)/c99_protos.h\n \tgrep '^#' < $(srcdir)/c99_protos.h > $@"}, {"sha": "1bfb07dda6ca9a2d48efd382f7f1a10e16d37fdb", "filename": "libgfortran/Makefile.in", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8fea8cd861d9484eb825a11264812bfe193f8ee/libgfortran%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8fea8cd861d9484eb825a11264812bfe193f8ee/libgfortran%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FMakefile.in?ref=a8fea8cd861d9484eb825a11264812bfe193f8ee", "patch": "@@ -7630,14 +7630,15 @@ $(patsubst %.F90,%.lo,$(patsubst %.f90,%.lo,$(notdir $(gfor_specific_src)))): AM\n selected_real_kind.lo selected_int_kind.lo: AM_FCFLAGS += -fallow-leading-underscore\n \n # Build *_r17.F90 and *_c17.F90 with additional -mabi=ieeelongdouble on powerpc64le-linux.\n-@HAVE_REAL_17_TRUE@$(patsubst %_r17.F90,%.lo,$(notdir $(gfor_specific_src))): AM_FCFLAGS += -mabi=ieeelongdouble\n-@HAVE_REAL_17_TRUE@$(patsubst %_r17.c,%.lo,$(notdir $(gfor_specific_src))): AM_FCFLAGS += -mabi=ieeelongdouble\n-@HAVE_REAL_17_TRUE@$(patsubst %_c17.F90,%.lo,$(notdir $(gfor_specific_src))): AM_FCFLAGS += -mabi=ieeelongdouble\n-@HAVE_REAL_17_TRUE@$(patsubst %_c17.c,%.lo,$(notdir $(gfor_specific_src))): AM_FCFLAGS += -mabi=ieeelongdouble\n-@HAVE_REAL_17_TRUE@$(patsubst %_r16.F90,%.lo,$(notdir $(gfor_specific_src))): AM_FCFLAGS += -mabi=ibmlongdouble\n-@HAVE_REAL_17_TRUE@$(patsubst %_r16.c,%.lo,$(notdir $(gfor_specific_src))): AM_FCFLAGS += -mabi=ibmlongdouble\n-@HAVE_REAL_17_TRUE@$(patsubst %_c16.F90,%.lo,$(notdir $(gfor_specific_src))): AM_FCFLAGS += -mabi=ibmlongdouble\n-@HAVE_REAL_17_TRUE@$(patsubst %_c16.c,%.lo,$(notdir $(gfor_specific_src))): AM_FCFLAGS += -mabi=ibmlongdouble\n+\n+@HAVE_REAL_17_TRUE@$(patsubst %_r16.F90,%_r16.lo,$(notdir $(gfor_specific_src))): AM_FCFLAGS += -mabi=ibmlongdouble\n+@HAVE_REAL_17_TRUE@$(patsubst %_c16.F90,%_c16.lo,$(notdir $(gfor_specific_src))): AM_FCFLAGS += -mabi=ibmlongdouble\n+@HAVE_REAL_17_TRUE@$(patsubst %_r17.F90,%_r17.lo,$(notdir $(gfor_specific_src))): AM_FCFLAGS += -mabi=ieeelongdouble -D__powerpc64__\n+@HAVE_REAL_17_TRUE@$(patsubst %_c17.F90,%_c17.lo,$(notdir $(gfor_specific_src))): AM_FCFLAGS += -mabi=ieeelongdouble -D__powerpc64__\n+@HAVE_REAL_17_TRUE@$(patsubst %_r16.c,%_r16.lo,$(notdir $(gfor_built_src))): AM_CFLAGS += -mabi=ibmlongdouble\n+@HAVE_REAL_17_TRUE@$(patsubst %_c16.c,%_c16.lo,$(notdir $(gfor_built_src))): AM_CFLAGS += -mabi=ibmlongdouble\n+@HAVE_REAL_17_TRUE@$(patsubst %_r17.c,%_r17.lo,$(notdir $(gfor_built_src))): AM_CFLAGS += -mabi=ieeelongdouble\n+@HAVE_REAL_17_TRUE@$(patsubst %_c17.c,%_c17.lo,$(notdir $(gfor_built_src))): AM_CFLAGS += -mabi=ieeelongdouble\n \n # Add flags for IEEE modules\n @IEEE_SUPPORT_TRUE@$(patsubst %.F90,%.lo,$(notdir $(gfor_ieee_src))): AM_FCFLAGS += -Wno-unused-dummy-argument -Wno-c-binding-type -ffree-line-length-0 -fallow-leading-underscore -fsignaling-nans\n@@ -7667,8 +7668,8 @@ ieee_arithmetic.mod: ieee_arithmetic.lo\n kinds.h: $(srcdir)/mk-kinds-h.sh\n \t$(SHELL) $(srcdir)/mk-kinds-h.sh '@LIBGOMP_CHECKED_INT_KINDS@' '@LIBGOMP_CHECKED_REAL_KINDS@' '$(FCCOMPILE)' > $@ || rm $@\n \n-kinds.inc: kinds.h\n-\tgrep '^#' < kinds.h > $@\n+kinds.inc: kinds.h $(srcdir)/kinds-override.h\n+\tcat kinds.h $(srcdir)/kinds-override.h | grep '^#' | grep -v include > $@\n \n c99_protos.inc: $(srcdir)/c99_protos.h\n \tgrep '^#' < $(srcdir)/c99_protos.h > $@"}, {"sha": "24e31ebd62547cb6410d6d73604d9918d00b09da", "filename": "libgfortran/config.h.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8fea8cd861d9484eb825a11264812bfe193f8ee/libgfortran%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8fea8cd861d9484eb825a11264812bfe193f8ee/libgfortran%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfig.h.in?ref=a8fea8cd861d9484eb825a11264812bfe193f8ee", "patch": "@@ -663,6 +663,9 @@\n /* Define to 1 if you have the <pwd.h> header file. */\n #undef HAVE_PWD_H\n \n+/* Define to 1 if you have REAL(KIND=17) */\n+#undef HAVE_REAL_17\n+\n /* Define to 1 if you have the `round' function. */\n #undef HAVE_ROUND\n "}, {"sha": "ae64dca31140e2502752aa9dcb2f1ef913beba88", "filename": "libgfortran/configure", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8fea8cd861d9484eb825a11264812bfe193f8ee/libgfortran%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8fea8cd861d9484eb825a11264812bfe193f8ee/libgfortran%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfigure?ref=a8fea8cd861d9484eb825a11264812bfe193f8ee", "patch": "@@ -6013,9 +6013,9 @@ main ()\n }\n _ACEOF\n if ac_fn_c_try_cpp \"$LINENO\"; then :\n-  AM_FCFLAGS=\"$AM_FCFLAGS -mabi=ibmlongdouble\";\n-\t AM_CFLAGS=\"$AM_CFLAGS -mabi=ibmlongdouble\";\n-\t CFLAGS=\"$CFLAGS -mabi=ibmlongdouble\";\n+  AM_FCFLAGS=\"$AM_FCFLAGS -mabi=ibmlongdouble -mno-gnu-attribute\";\n+\t AM_CFLAGS=\"$AM_CFLAGS -mabi=ibmlongdouble -mno-gnu-attribute\";\n+\t CFLAGS=\"$CFLAGS -mabi=ibmlongdouble -mno-gnu-attribute\";\n \t have_real_17=yes\n fi\n rm -f conftest.err conftest.i conftest.$ac_ext\n@@ -25838,6 +25838,12 @@ _ACEOF\n \n if test \"x$have_real_17\" = \"xyes\"; then\n \n+cat >>confdefs.h <<_ACEOF\n+#define HAVE_REAL_17 1\n+_ACEOF\n+\n+\n+\n \n \n   { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for __acoshieee128\" >&5"}, {"sha": "97cc490cb5e93af786c74da1fd607c8268292e52", "filename": "libgfortran/configure.ac", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8fea8cd861d9484eb825a11264812bfe193f8ee/libgfortran%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8fea8cd861d9484eb825a11264812bfe193f8ee/libgfortran%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfigure.ac?ref=a8fea8cd861d9484eb825a11264812bfe193f8ee", "patch": "@@ -163,9 +163,9 @@ if test \"x$GCC\" = \"xyes\"; then\n \t\t\t   #error long double is double\n \t\t\t   #endif]],\n                          [[(void) 0;]])],\n-        [AM_FCFLAGS=\"$AM_FCFLAGS -mabi=ibmlongdouble\";\n-\t AM_CFLAGS=\"$AM_CFLAGS -mabi=ibmlongdouble\";\n-\t CFLAGS=\"$CFLAGS -mabi=ibmlongdouble\";\n+        [AM_FCFLAGS=\"$AM_FCFLAGS -mabi=ibmlongdouble -mno-gnu-attribute\";\n+\t AM_CFLAGS=\"$AM_CFLAGS -mabi=ibmlongdouble -mno-gnu-attribute\";\n+\t CFLAGS=\"$CFLAGS -mabi=ibmlongdouble -mno-gnu-attribute\";\n \t have_real_17=yes])\n       ;;\n     *)\n@@ -547,6 +547,9 @@ GCC_CHECK_MATH_FUNC([catanl])\n # For POWER, check the ieee128 math functions\n \n if test \"x$have_real_17\" = \"xyes\"; then\n+AC_DEFINE_UNQUOTED(AS_TR_CPP(HAVE_REAL_17),[1],\n+  [Define to 1 if you have REAL(KIND=17)])\n+\n LIBGFOR_CHECK_MATH_IEEE128([__acoshieee128])\n LIBGFOR_CHECK_MATH_IEEE128([__acosieee128])\n LIBGFOR_CHECK_MATH_IEEE128([__asinhieee128])"}, {"sha": "d450e3c278c130e730aa96e205321f8b13872929", "filename": "libgfortran/generated/_abs_c17.F90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8fea8cd861d9484eb825a11264812bfe193f8ee/libgfortran%2Fgenerated%2F_abs_c17.F90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8fea8cd861d9484eb825a11264812bfe193f8ee/libgfortran%2Fgenerated%2F_abs_c17.F90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2F_abs_c17.F90?ref=a8fea8cd861d9484eb825a11264812bfe193f8ee", "patch": "@@ -33,11 +33,11 @@\n #include \"c99_protos.inc\"\n \n #if defined (HAVE_GFC_COMPLEX_17)\n-#ifdef HAVE_CABS_17\n+#ifdef HAVE_CABSL\n \n elemental function _gfortran_specific__abs_c17 (parm)\n-   complex (kind=17), intent (in) :: parm\n-   real (kind=17) :: _gfortran_specific__abs_c17\n+   complex (kind=16), intent (in) :: parm\n+   real (kind=16) :: _gfortran_specific__abs_c17\n \n    _gfortran_specific__abs_c17 = abs (parm)\n end function"}, {"sha": "075f7acb5fce737c76bb9e7c7966ce02acd13f5e", "filename": "libgfortran/generated/_abs_r17.F90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8fea8cd861d9484eb825a11264812bfe193f8ee/libgfortran%2Fgenerated%2F_abs_r17.F90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8fea8cd861d9484eb825a11264812bfe193f8ee/libgfortran%2Fgenerated%2F_abs_r17.F90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2F_abs_r17.F90?ref=a8fea8cd861d9484eb825a11264812bfe193f8ee", "patch": "@@ -33,11 +33,11 @@\n #include \"c99_protos.inc\"\n \n #if defined (HAVE_GFC_REAL_17)\n-#ifdef HAVE_FABS_17\n+#ifdef HAVE_FABSL\n \n elemental function _gfortran_specific__abs_r17 (parm)\n-   real (kind=17), intent (in) :: parm\n-   real (kind=17) :: _gfortran_specific__abs_r17\n+   real (kind=16), intent (in) :: parm\n+   real (kind=16) :: _gfortran_specific__abs_r17\n \n    _gfortran_specific__abs_r17 = abs (parm)\n end function"}, {"sha": "8a1cbdeb97de8e27bf3a849922b3c0c38f7894f6", "filename": "libgfortran/generated/_acos_r17.F90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8fea8cd861d9484eb825a11264812bfe193f8ee/libgfortran%2Fgenerated%2F_acos_r17.F90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8fea8cd861d9484eb825a11264812bfe193f8ee/libgfortran%2Fgenerated%2F_acos_r17.F90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2F_acos_r17.F90?ref=a8fea8cd861d9484eb825a11264812bfe193f8ee", "patch": "@@ -33,11 +33,11 @@\n #include \"c99_protos.inc\"\n \n #if defined (HAVE_GFC_REAL_17)\n-#ifdef HAVE_ACOS_17\n+#ifdef HAVE_ACOSL\n \n elemental function _gfortran_specific__acos_r17 (parm)\n-   real (kind=17), intent (in) :: parm\n-   real (kind=17) :: _gfortran_specific__acos_r17\n+   real (kind=16), intent (in) :: parm\n+   real (kind=16) :: _gfortran_specific__acos_r17\n \n    _gfortran_specific__acos_r17 = acos (parm)\n end function"}, {"sha": "fc6f93197a402c6b744e717b59888aebd6794b68", "filename": "libgfortran/generated/_acosh_r17.F90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8fea8cd861d9484eb825a11264812bfe193f8ee/libgfortran%2Fgenerated%2F_acosh_r17.F90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8fea8cd861d9484eb825a11264812bfe193f8ee/libgfortran%2Fgenerated%2F_acosh_r17.F90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2F_acosh_r17.F90?ref=a8fea8cd861d9484eb825a11264812bfe193f8ee", "patch": "@@ -33,11 +33,11 @@\n #include \"c99_protos.inc\"\n \n #if defined (HAVE_GFC_REAL_17)\n-#ifdef HAVE_ACOSH_17\n+#ifdef HAVE_ACOSHL\n \n elemental function _gfortran_specific__acosh_r17 (parm)\n-   real (kind=17), intent (in) :: parm\n-   real (kind=17) :: _gfortran_specific__acosh_r17\n+   real (kind=16), intent (in) :: parm\n+   real (kind=16) :: _gfortran_specific__acosh_r17\n \n    _gfortran_specific__acosh_r17 = acosh (parm)\n end function"}, {"sha": "fb24cc6c69fb111297bd9a518837b68bd7b18623", "filename": "libgfortran/generated/_aimag_c17.F90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8fea8cd861d9484eb825a11264812bfe193f8ee/libgfortran%2Fgenerated%2F_aimag_c17.F90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8fea8cd861d9484eb825a11264812bfe193f8ee/libgfortran%2Fgenerated%2F_aimag_c17.F90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2F_aimag_c17.F90?ref=a8fea8cd861d9484eb825a11264812bfe193f8ee", "patch": "@@ -36,8 +36,8 @@\n \n \n elemental function _gfortran_specific__aimag_c17 (parm)\n-   complex (kind=17), intent (in) :: parm\n-   real (kind=17) :: _gfortran_specific__aimag_c17\n+   complex (kind=16), intent (in) :: parm\n+   real (kind=16) :: _gfortran_specific__aimag_c17\n \n    _gfortran_specific__aimag_c17 = aimag (parm)\n end function"}, {"sha": "e96e755399cdf71c7936af9a3ad09cd1a5978ddc", "filename": "libgfortran/generated/_aint_r17.F90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8fea8cd861d9484eb825a11264812bfe193f8ee/libgfortran%2Fgenerated%2F_aint_r17.F90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8fea8cd861d9484eb825a11264812bfe193f8ee/libgfortran%2Fgenerated%2F_aint_r17.F90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2F_aint_r17.F90?ref=a8fea8cd861d9484eb825a11264812bfe193f8ee", "patch": "@@ -33,11 +33,11 @@\n #include \"c99_protos.inc\"\n \n #if defined (HAVE_GFC_REAL_17)\n-#ifdef HAVE_TRUNC_17\n+#ifdef HAVE_TRUNCL\n \n elemental function _gfortran_specific__aint_r17 (parm)\n-   real (kind=17), intent (in) :: parm\n-   real (kind=17) :: _gfortran_specific__aint_r17\n+   real (kind=16), intent (in) :: parm\n+   real (kind=16) :: _gfortran_specific__aint_r17\n \n    _gfortran_specific__aint_r17 = aint (parm)\n end function"}, {"sha": "c38a0b640f518069482468ca23149bb70145a329", "filename": "libgfortran/generated/_anint_r17.F90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8fea8cd861d9484eb825a11264812bfe193f8ee/libgfortran%2Fgenerated%2F_anint_r17.F90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8fea8cd861d9484eb825a11264812bfe193f8ee/libgfortran%2Fgenerated%2F_anint_r17.F90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2F_anint_r17.F90?ref=a8fea8cd861d9484eb825a11264812bfe193f8ee", "patch": "@@ -33,11 +33,11 @@\n #include \"c99_protos.inc\"\n \n #if defined (HAVE_GFC_REAL_17)\n-#ifdef HAVE_ROUND_17\n+#ifdef HAVE_ROUNDL\n \n elemental function _gfortran_specific__anint_r17 (parm)\n-   real (kind=17), intent (in) :: parm\n-   real (kind=17) :: _gfortran_specific__anint_r17\n+   real (kind=16), intent (in) :: parm\n+   real (kind=16) :: _gfortran_specific__anint_r17\n \n    _gfortran_specific__anint_r17 = anint (parm)\n end function"}, {"sha": "aee1f7ef9b33117553b47156e902eddd38112755", "filename": "libgfortran/generated/_asin_r17.F90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8fea8cd861d9484eb825a11264812bfe193f8ee/libgfortran%2Fgenerated%2F_asin_r17.F90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8fea8cd861d9484eb825a11264812bfe193f8ee/libgfortran%2Fgenerated%2F_asin_r17.F90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2F_asin_r17.F90?ref=a8fea8cd861d9484eb825a11264812bfe193f8ee", "patch": "@@ -33,11 +33,11 @@\n #include \"c99_protos.inc\"\n \n #if defined (HAVE_GFC_REAL_17)\n-#ifdef HAVE_ASIN_17\n+#ifdef HAVE_ASINL\n \n elemental function _gfortran_specific__asin_r17 (parm)\n-   real (kind=17), intent (in) :: parm\n-   real (kind=17) :: _gfortran_specific__asin_r17\n+   real (kind=16), intent (in) :: parm\n+   real (kind=16) :: _gfortran_specific__asin_r17\n \n    _gfortran_specific__asin_r17 = asin (parm)\n end function"}, {"sha": "0ccb9b087eec3028d9b7c521477b2f3e48cfa400", "filename": "libgfortran/generated/_asinh_r17.F90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8fea8cd861d9484eb825a11264812bfe193f8ee/libgfortran%2Fgenerated%2F_asinh_r17.F90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8fea8cd861d9484eb825a11264812bfe193f8ee/libgfortran%2Fgenerated%2F_asinh_r17.F90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2F_asinh_r17.F90?ref=a8fea8cd861d9484eb825a11264812bfe193f8ee", "patch": "@@ -33,11 +33,11 @@\n #include \"c99_protos.inc\"\n \n #if defined (HAVE_GFC_REAL_17)\n-#ifdef HAVE_ASINH_17\n+#ifdef HAVE_ASINHL\n \n elemental function _gfortran_specific__asinh_r17 (parm)\n-   real (kind=17), intent (in) :: parm\n-   real (kind=17) :: _gfortran_specific__asinh_r17\n+   real (kind=16), intent (in) :: parm\n+   real (kind=16) :: _gfortran_specific__asinh_r17\n \n    _gfortran_specific__asinh_r17 = asinh (parm)\n end function"}, {"sha": "87a9dba1413b49de65c85b1c8924a2545f10b978", "filename": "libgfortran/generated/_atan2_r17.F90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8fea8cd861d9484eb825a11264812bfe193f8ee/libgfortran%2Fgenerated%2F_atan2_r17.F90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8fea8cd861d9484eb825a11264812bfe193f8ee/libgfortran%2Fgenerated%2F_atan2_r17.F90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2F_atan2_r17.F90?ref=a8fea8cd861d9484eb825a11264812bfe193f8ee", "patch": "@@ -32,11 +32,11 @@\n \n #if defined (HAVE_GFC_REAL_17)\n \n-#ifdef HAVE_ATAN2_17\n+#ifdef HAVE_ATAN2L\n \n elemental function _gfortran_specific__atan2_r17 (p1, p2)\n-   real (kind=17), intent (in) :: p1, p2\n-   real (kind=17) :: _gfortran_specific__atan2_r17\n+   real (kind=16), intent (in) :: p1, p2\n+   real (kind=16) :: _gfortran_specific__atan2_r17\n \n    _gfortran_specific__atan2_r17 = atan2 (p1, p2)\n end function"}, {"sha": "72eb76fa2086fe767e8da756a909837626a64011", "filename": "libgfortran/generated/_atan_r17.F90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8fea8cd861d9484eb825a11264812bfe193f8ee/libgfortran%2Fgenerated%2F_atan_r17.F90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8fea8cd861d9484eb825a11264812bfe193f8ee/libgfortran%2Fgenerated%2F_atan_r17.F90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2F_atan_r17.F90?ref=a8fea8cd861d9484eb825a11264812bfe193f8ee", "patch": "@@ -33,11 +33,11 @@\n #include \"c99_protos.inc\"\n \n #if defined (HAVE_GFC_REAL_17)\n-#ifdef HAVE_ATAN_17\n+#ifdef HAVE_ATANL\n \n elemental function _gfortran_specific__atan_r17 (parm)\n-   real (kind=17), intent (in) :: parm\n-   real (kind=17) :: _gfortran_specific__atan_r17\n+   real (kind=16), intent (in) :: parm\n+   real (kind=16) :: _gfortran_specific__atan_r17\n \n    _gfortran_specific__atan_r17 = atan (parm)\n end function"}, {"sha": "9ea273570179719d975ba3b1cb1679fd5a121f1f", "filename": "libgfortran/generated/_atanh_r17.F90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8fea8cd861d9484eb825a11264812bfe193f8ee/libgfortran%2Fgenerated%2F_atanh_r17.F90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8fea8cd861d9484eb825a11264812bfe193f8ee/libgfortran%2Fgenerated%2F_atanh_r17.F90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2F_atanh_r17.F90?ref=a8fea8cd861d9484eb825a11264812bfe193f8ee", "patch": "@@ -33,11 +33,11 @@\n #include \"c99_protos.inc\"\n \n #if defined (HAVE_GFC_REAL_17)\n-#ifdef HAVE_ATANH_17\n+#ifdef HAVE_ATANHL\n \n elemental function _gfortran_specific__atanh_r17 (parm)\n-   real (kind=17), intent (in) :: parm\n-   real (kind=17) :: _gfortran_specific__atanh_r17\n+   real (kind=16), intent (in) :: parm\n+   real (kind=16) :: _gfortran_specific__atanh_r17\n \n    _gfortran_specific__atanh_r17 = atanh (parm)\n end function"}, {"sha": "5e6c2c48a56094eddde6e1b903e6e4b4bc49a5b1", "filename": "libgfortran/generated/_conjg_c17.F90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8fea8cd861d9484eb825a11264812bfe193f8ee/libgfortran%2Fgenerated%2F_conjg_c17.F90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8fea8cd861d9484eb825a11264812bfe193f8ee/libgfortran%2Fgenerated%2F_conjg_c17.F90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2F_conjg_c17.F90?ref=a8fea8cd861d9484eb825a11264812bfe193f8ee", "patch": "@@ -36,8 +36,8 @@\n \n \n elemental function _gfortran_specific__conjg_17 (parm)\n-   complex (kind=17), intent (in) :: parm\n-   complex (kind=17) :: _gfortran_specific__conjg_17\n+   complex (kind=16), intent (in) :: parm\n+   complex (kind=16) :: _gfortran_specific__conjg_17\n \n    _gfortran_specific__conjg_17 = conjg (parm)\n end function"}, {"sha": "2241eceadcbee8b75d55ab4df002efc62040b9be", "filename": "libgfortran/generated/_cos_c17.F90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8fea8cd861d9484eb825a11264812bfe193f8ee/libgfortran%2Fgenerated%2F_cos_c17.F90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8fea8cd861d9484eb825a11264812bfe193f8ee/libgfortran%2Fgenerated%2F_cos_c17.F90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2F_cos_c17.F90?ref=a8fea8cd861d9484eb825a11264812bfe193f8ee", "patch": "@@ -33,11 +33,11 @@\n #include \"c99_protos.inc\"\n \n #if defined (HAVE_GFC_COMPLEX_17)\n-#ifdef HAVE_CCOS_17\n+#ifdef HAVE_CCOSL\n \n elemental function _gfortran_specific__cos_c17 (parm)\n-   complex (kind=17), intent (in) :: parm\n-   complex (kind=17) :: _gfortran_specific__cos_c17\n+   complex (kind=16), intent (in) :: parm\n+   complex (kind=16) :: _gfortran_specific__cos_c17\n \n    _gfortran_specific__cos_c17 = cos (parm)\n end function"}, {"sha": "60dfac513c2d254d417ff9c6abbb3a3eb78d5471", "filename": "libgfortran/generated/_cos_r17.F90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8fea8cd861d9484eb825a11264812bfe193f8ee/libgfortran%2Fgenerated%2F_cos_r17.F90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8fea8cd861d9484eb825a11264812bfe193f8ee/libgfortran%2Fgenerated%2F_cos_r17.F90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2F_cos_r17.F90?ref=a8fea8cd861d9484eb825a11264812bfe193f8ee", "patch": "@@ -33,11 +33,11 @@\n #include \"c99_protos.inc\"\n \n #if defined (HAVE_GFC_REAL_17)\n-#ifdef HAVE_COS_17\n+#ifdef HAVE_COSL\n \n elemental function _gfortran_specific__cos_r17 (parm)\n-   real (kind=17), intent (in) :: parm\n-   real (kind=17) :: _gfortran_specific__cos_r17\n+   real (kind=16), intent (in) :: parm\n+   real (kind=16) :: _gfortran_specific__cos_r17\n \n    _gfortran_specific__cos_r17 = cos (parm)\n end function"}, {"sha": "81e3498541cd1cf2c5b75573d4d4084519a4c353", "filename": "libgfortran/generated/_cosh_r17.F90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8fea8cd861d9484eb825a11264812bfe193f8ee/libgfortran%2Fgenerated%2F_cosh_r17.F90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8fea8cd861d9484eb825a11264812bfe193f8ee/libgfortran%2Fgenerated%2F_cosh_r17.F90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2F_cosh_r17.F90?ref=a8fea8cd861d9484eb825a11264812bfe193f8ee", "patch": "@@ -33,11 +33,11 @@\n #include \"c99_protos.inc\"\n \n #if defined (HAVE_GFC_REAL_17)\n-#ifdef HAVE_COSH_17\n+#ifdef HAVE_COSHL\n \n elemental function _gfortran_specific__cosh_r17 (parm)\n-   real (kind=17), intent (in) :: parm\n-   real (kind=17) :: _gfortran_specific__cosh_r17\n+   real (kind=16), intent (in) :: parm\n+   real (kind=16) :: _gfortran_specific__cosh_r17\n \n    _gfortran_specific__cosh_r17 = cosh (parm)\n end function"}, {"sha": "cbb5f6f2a73335c9e890a7c322a511e135f94749", "filename": "libgfortran/generated/_dim_r17.F90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8fea8cd861d9484eb825a11264812bfe193f8ee/libgfortran%2Fgenerated%2F_dim_r17.F90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8fea8cd861d9484eb825a11264812bfe193f8ee/libgfortran%2Fgenerated%2F_dim_r17.F90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2F_dim_r17.F90?ref=a8fea8cd861d9484eb825a11264812bfe193f8ee", "patch": "@@ -35,8 +35,8 @@\n \n \n elemental function _gfortran_specific__dim_r17 (p1, p2)\n-   real (kind=17), intent (in) :: p1, p2\n-   real (kind=17) :: _gfortran_specific__dim_r17\n+   real (kind=16), intent (in) :: p1, p2\n+   real (kind=16) :: _gfortran_specific__dim_r17\n \n    _gfortran_specific__dim_r17 = dim (p1, p2)\n end function"}, {"sha": "fb13939b2b3c06bad48d2cdd100880801aab63b9", "filename": "libgfortran/generated/_exp_c17.F90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8fea8cd861d9484eb825a11264812bfe193f8ee/libgfortran%2Fgenerated%2F_exp_c17.F90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8fea8cd861d9484eb825a11264812bfe193f8ee/libgfortran%2Fgenerated%2F_exp_c17.F90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2F_exp_c17.F90?ref=a8fea8cd861d9484eb825a11264812bfe193f8ee", "patch": "@@ -33,11 +33,11 @@\n #include \"c99_protos.inc\"\n \n #if defined (HAVE_GFC_COMPLEX_17)\n-#ifdef HAVE_CEXP_17\n+#ifdef HAVE_CEXPL\n \n elemental function _gfortran_specific__exp_c17 (parm)\n-   complex (kind=17), intent (in) :: parm\n-   complex (kind=17) :: _gfortran_specific__exp_c17\n+   complex (kind=16), intent (in) :: parm\n+   complex (kind=16) :: _gfortran_specific__exp_c17\n \n    _gfortran_specific__exp_c17 = exp (parm)\n end function"}, {"sha": "c03986b4dac4e1b59773da27b1cac30d52807989", "filename": "libgfortran/generated/_exp_r17.F90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8fea8cd861d9484eb825a11264812bfe193f8ee/libgfortran%2Fgenerated%2F_exp_r17.F90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8fea8cd861d9484eb825a11264812bfe193f8ee/libgfortran%2Fgenerated%2F_exp_r17.F90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2F_exp_r17.F90?ref=a8fea8cd861d9484eb825a11264812bfe193f8ee", "patch": "@@ -33,11 +33,11 @@\n #include \"c99_protos.inc\"\n \n #if defined (HAVE_GFC_REAL_17)\n-#ifdef HAVE_EXP_17\n+#ifdef HAVE_EXPL\n \n elemental function _gfortran_specific__exp_r17 (parm)\n-   real (kind=17), intent (in) :: parm\n-   real (kind=17) :: _gfortran_specific__exp_r17\n+   real (kind=16), intent (in) :: parm\n+   real (kind=16) :: _gfortran_specific__exp_r17\n \n    _gfortran_specific__exp_r17 = exp (parm)\n end function"}, {"sha": "86123606b33aecac14382c323279de2c359d7438", "filename": "libgfortran/generated/_log10_r17.F90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8fea8cd861d9484eb825a11264812bfe193f8ee/libgfortran%2Fgenerated%2F_log10_r17.F90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8fea8cd861d9484eb825a11264812bfe193f8ee/libgfortran%2Fgenerated%2F_log10_r17.F90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2F_log10_r17.F90?ref=a8fea8cd861d9484eb825a11264812bfe193f8ee", "patch": "@@ -33,11 +33,11 @@\n #include \"c99_protos.inc\"\n \n #if defined (HAVE_GFC_REAL_17)\n-#ifdef HAVE_LOG10_17\n+#ifdef HAVE_LOG10L\n \n elemental function _gfortran_specific__log10_r17 (parm)\n-   real (kind=17), intent (in) :: parm\n-   real (kind=17) :: _gfortran_specific__log10_r17\n+   real (kind=16), intent (in) :: parm\n+   real (kind=16) :: _gfortran_specific__log10_r17\n \n    _gfortran_specific__log10_r17 = log10 (parm)\n end function"}, {"sha": "c2f2858b26f5d5d4c60882b8ba699627f2942ea6", "filename": "libgfortran/generated/_log_c17.F90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8fea8cd861d9484eb825a11264812bfe193f8ee/libgfortran%2Fgenerated%2F_log_c17.F90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8fea8cd861d9484eb825a11264812bfe193f8ee/libgfortran%2Fgenerated%2F_log_c17.F90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2F_log_c17.F90?ref=a8fea8cd861d9484eb825a11264812bfe193f8ee", "patch": "@@ -33,11 +33,11 @@\n #include \"c99_protos.inc\"\n \n #if defined (HAVE_GFC_COMPLEX_17)\n-#ifdef HAVE_CLOG_17\n+#ifdef HAVE_CLOGL\n \n elemental function _gfortran_specific__log_c17 (parm)\n-   complex (kind=17), intent (in) :: parm\n-   complex (kind=17) :: _gfortran_specific__log_c17\n+   complex (kind=16), intent (in) :: parm\n+   complex (kind=16) :: _gfortran_specific__log_c17\n \n    _gfortran_specific__log_c17 = log (parm)\n end function"}, {"sha": "7355bc8ffe2b12b3f700a29d824d7bc5d0c17c1f", "filename": "libgfortran/generated/_log_r17.F90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8fea8cd861d9484eb825a11264812bfe193f8ee/libgfortran%2Fgenerated%2F_log_r17.F90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8fea8cd861d9484eb825a11264812bfe193f8ee/libgfortran%2Fgenerated%2F_log_r17.F90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2F_log_r17.F90?ref=a8fea8cd861d9484eb825a11264812bfe193f8ee", "patch": "@@ -33,11 +33,11 @@\n #include \"c99_protos.inc\"\n \n #if defined (HAVE_GFC_REAL_17)\n-#ifdef HAVE_LOG_17\n+#ifdef HAVE_LOGL\n \n elemental function _gfortran_specific__log_r17 (parm)\n-   real (kind=17), intent (in) :: parm\n-   real (kind=17) :: _gfortran_specific__log_r17\n+   real (kind=16), intent (in) :: parm\n+   real (kind=16) :: _gfortran_specific__log_r17\n \n    _gfortran_specific__log_r17 = log (parm)\n end function"}, {"sha": "f174bcc0b51827a382d556abaacb261abc95445d", "filename": "libgfortran/generated/_mod_r17.F90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8fea8cd861d9484eb825a11264812bfe193f8ee/libgfortran%2Fgenerated%2F_mod_r17.F90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8fea8cd861d9484eb825a11264812bfe193f8ee/libgfortran%2Fgenerated%2F_mod_r17.F90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2F_mod_r17.F90?ref=a8fea8cd861d9484eb825a11264812bfe193f8ee", "patch": "@@ -35,8 +35,8 @@\n \n \n elemental function _gfortran_specific__mod_r17 (p1, p2)\n-   real (kind=17), intent (in) :: p1, p2\n-   real (kind=17) :: _gfortran_specific__mod_r17\n+   real (kind=16), intent (in) :: p1, p2\n+   real (kind=16) :: _gfortran_specific__mod_r17\n \n    _gfortran_specific__mod_r17 = mod (p1, p2)\n end function"}, {"sha": "2253140a606880eb2f07716d3b41c72556ef6aeb", "filename": "libgfortran/generated/_sign_r17.F90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8fea8cd861d9484eb825a11264812bfe193f8ee/libgfortran%2Fgenerated%2F_sign_r17.F90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8fea8cd861d9484eb825a11264812bfe193f8ee/libgfortran%2Fgenerated%2F_sign_r17.F90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2F_sign_r17.F90?ref=a8fea8cd861d9484eb825a11264812bfe193f8ee", "patch": "@@ -35,8 +35,8 @@\n \n \n elemental function _gfortran_specific__sign_r17 (p1, p2)\n-   real (kind=17), intent (in) :: p1, p2\n-   real (kind=17) :: _gfortran_specific__sign_r17\n+   real (kind=16), intent (in) :: p1, p2\n+   real (kind=16) :: _gfortran_specific__sign_r17\n \n    _gfortran_specific__sign_r17 = sign (p1, p2)\n end function"}, {"sha": "2f7d1873c263c921ee54979cfd87af7ab7dfcfbb", "filename": "libgfortran/generated/_sin_c17.F90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8fea8cd861d9484eb825a11264812bfe193f8ee/libgfortran%2Fgenerated%2F_sin_c17.F90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8fea8cd861d9484eb825a11264812bfe193f8ee/libgfortran%2Fgenerated%2F_sin_c17.F90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2F_sin_c17.F90?ref=a8fea8cd861d9484eb825a11264812bfe193f8ee", "patch": "@@ -33,11 +33,11 @@\n #include \"c99_protos.inc\"\n \n #if defined (HAVE_GFC_COMPLEX_17)\n-#ifdef HAVE_CSIN_17\n+#ifdef HAVE_CSINL\n \n elemental function _gfortran_specific__sin_c17 (parm)\n-   complex (kind=17), intent (in) :: parm\n-   complex (kind=17) :: _gfortran_specific__sin_c17\n+   complex (kind=16), intent (in) :: parm\n+   complex (kind=16) :: _gfortran_specific__sin_c17\n \n    _gfortran_specific__sin_c17 = sin (parm)\n end function"}, {"sha": "7b02e79fe415fb68f1792951c2f88fe5bdb930e5", "filename": "libgfortran/generated/_sin_r17.F90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8fea8cd861d9484eb825a11264812bfe193f8ee/libgfortran%2Fgenerated%2F_sin_r17.F90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8fea8cd861d9484eb825a11264812bfe193f8ee/libgfortran%2Fgenerated%2F_sin_r17.F90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2F_sin_r17.F90?ref=a8fea8cd861d9484eb825a11264812bfe193f8ee", "patch": "@@ -33,11 +33,11 @@\n #include \"c99_protos.inc\"\n \n #if defined (HAVE_GFC_REAL_17)\n-#ifdef HAVE_SIN_17\n+#ifdef HAVE_SINL\n \n elemental function _gfortran_specific__sin_r17 (parm)\n-   real (kind=17), intent (in) :: parm\n-   real (kind=17) :: _gfortran_specific__sin_r17\n+   real (kind=16), intent (in) :: parm\n+   real (kind=16) :: _gfortran_specific__sin_r17\n \n    _gfortran_specific__sin_r17 = sin (parm)\n end function"}, {"sha": "43ac460a2e7df23b2f8aa06af740e856701c5895", "filename": "libgfortran/generated/_sinh_r17.F90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8fea8cd861d9484eb825a11264812bfe193f8ee/libgfortran%2Fgenerated%2F_sinh_r17.F90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8fea8cd861d9484eb825a11264812bfe193f8ee/libgfortran%2Fgenerated%2F_sinh_r17.F90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2F_sinh_r17.F90?ref=a8fea8cd861d9484eb825a11264812bfe193f8ee", "patch": "@@ -33,11 +33,11 @@\n #include \"c99_protos.inc\"\n \n #if defined (HAVE_GFC_REAL_17)\n-#ifdef HAVE_SINH_17\n+#ifdef HAVE_SINHL\n \n elemental function _gfortran_specific__sinh_r17 (parm)\n-   real (kind=17), intent (in) :: parm\n-   real (kind=17) :: _gfortran_specific__sinh_r17\n+   real (kind=16), intent (in) :: parm\n+   real (kind=16) :: _gfortran_specific__sinh_r17\n \n    _gfortran_specific__sinh_r17 = sinh (parm)\n end function"}, {"sha": "13d6d83bb65391094a883c1c593c3f2e4559d8d5", "filename": "libgfortran/generated/_sqrt_c17.F90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8fea8cd861d9484eb825a11264812bfe193f8ee/libgfortran%2Fgenerated%2F_sqrt_c17.F90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8fea8cd861d9484eb825a11264812bfe193f8ee/libgfortran%2Fgenerated%2F_sqrt_c17.F90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2F_sqrt_c17.F90?ref=a8fea8cd861d9484eb825a11264812bfe193f8ee", "patch": "@@ -33,11 +33,11 @@\n #include \"c99_protos.inc\"\n \n #if defined (HAVE_GFC_COMPLEX_17)\n-#ifdef HAVE_CSQRT_17\n+#ifdef HAVE_CSQRTL\n \n elemental function _gfortran_specific__sqrt_c17 (parm)\n-   complex (kind=17), intent (in) :: parm\n-   complex (kind=17) :: _gfortran_specific__sqrt_c17\n+   complex (kind=16), intent (in) :: parm\n+   complex (kind=16) :: _gfortran_specific__sqrt_c17\n \n    _gfortran_specific__sqrt_c17 = sqrt (parm)\n end function"}, {"sha": "eb98dda8fd44945af67bbb97c755505aa874abec", "filename": "libgfortran/generated/_sqrt_r17.F90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8fea8cd861d9484eb825a11264812bfe193f8ee/libgfortran%2Fgenerated%2F_sqrt_r17.F90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8fea8cd861d9484eb825a11264812bfe193f8ee/libgfortran%2Fgenerated%2F_sqrt_r17.F90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2F_sqrt_r17.F90?ref=a8fea8cd861d9484eb825a11264812bfe193f8ee", "patch": "@@ -33,11 +33,11 @@\n #include \"c99_protos.inc\"\n \n #if defined (HAVE_GFC_REAL_17)\n-#ifdef HAVE_SQRT_17\n+#ifdef HAVE_SQRTL\n \n elemental function _gfortran_specific__sqrt_r17 (parm)\n-   real (kind=17), intent (in) :: parm\n-   real (kind=17) :: _gfortran_specific__sqrt_r17\n+   real (kind=16), intent (in) :: parm\n+   real (kind=16) :: _gfortran_specific__sqrt_r17\n \n    _gfortran_specific__sqrt_r17 = sqrt (parm)\n end function"}, {"sha": "50b55d2fe5dbf4d958f9a378247f03c64c5de86b", "filename": "libgfortran/generated/_tan_r17.F90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8fea8cd861d9484eb825a11264812bfe193f8ee/libgfortran%2Fgenerated%2F_tan_r17.F90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8fea8cd861d9484eb825a11264812bfe193f8ee/libgfortran%2Fgenerated%2F_tan_r17.F90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2F_tan_r17.F90?ref=a8fea8cd861d9484eb825a11264812bfe193f8ee", "patch": "@@ -33,11 +33,11 @@\n #include \"c99_protos.inc\"\n \n #if defined (HAVE_GFC_REAL_17)\n-#ifdef HAVE_TAN_17\n+#ifdef HAVE_TANL\n \n elemental function _gfortran_specific__tan_r17 (parm)\n-   real (kind=17), intent (in) :: parm\n-   real (kind=17) :: _gfortran_specific__tan_r17\n+   real (kind=16), intent (in) :: parm\n+   real (kind=16) :: _gfortran_specific__tan_r17\n \n    _gfortran_specific__tan_r17 = tan (parm)\n end function"}, {"sha": "5a3eee84f7ac65b62fe81c1e036538bb66d6cebe", "filename": "libgfortran/generated/_tanh_r17.F90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8fea8cd861d9484eb825a11264812bfe193f8ee/libgfortran%2Fgenerated%2F_tanh_r17.F90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8fea8cd861d9484eb825a11264812bfe193f8ee/libgfortran%2Fgenerated%2F_tanh_r17.F90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2F_tanh_r17.F90?ref=a8fea8cd861d9484eb825a11264812bfe193f8ee", "patch": "@@ -33,11 +33,11 @@\n #include \"c99_protos.inc\"\n \n #if defined (HAVE_GFC_REAL_17)\n-#ifdef HAVE_TANH_17\n+#ifdef HAVE_TANHL\n \n elemental function _gfortran_specific__tanh_r17 (parm)\n-   real (kind=17), intent (in) :: parm\n-   real (kind=17) :: _gfortran_specific__tanh_r17\n+   real (kind=16), intent (in) :: parm\n+   real (kind=16) :: _gfortran_specific__tanh_r17\n \n    _gfortran_specific__tanh_r17 = tanh (parm)\n end function"}, {"sha": "d1456c2ff266eb24c225ad86f4778a7fe4ad0b84", "filename": "libgfortran/kinds-override.h", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8fea8cd861d9484eb825a11264812bfe193f8ee/libgfortran%2Fkinds-override.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8fea8cd861d9484eb825a11264812bfe193f8ee/libgfortran%2Fkinds-override.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fkinds-override.h?ref=a8fea8cd861d9484eb825a11264812bfe193f8ee", "patch": "@@ -29,10 +29,8 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n # error \"Where has __float128 gone?\"\n #endif\n \n-#if defined(__powerpc64__) \\\n-    && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__ \\\n-    && __SIZEOF_LONG_DOUBLE__ == 16 \\\n-    && defined(GFC_REAL_16_IS_LONG_DOUBLE)\n+/* Keep these conditions on one line so grep can filter it out.  */\n+#if defined(__powerpc64__)  && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__  && __SIZEOF_LONG_DOUBLE__ == 16\n typedef __float128 GFC_REAL_17;\n typedef _Complex float __attribute__((mode(KC))) GFC_COMPLEX_17;\n #define HAVE_GFC_REAL_17"}, {"sha": "75d916e5855f6bf3eac3e6b69b9965b0d61922c9", "filename": "libgfortran/m4/specific.m4", "status": "modified", "additions": 30, "deletions": 6, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8fea8cd861d9484eb825a11264812bfe193f8ee/libgfortran%2Fm4%2Fspecific.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8fea8cd861d9484eb825a11264812bfe193f8ee/libgfortran%2Fm4%2Fspecific.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Fspecific.m4?ref=a8fea8cd861d9484eb825a11264812bfe193f8ee", "patch": "@@ -4,21 +4,45 @@ define(atype_letter,substr(atype_code, 0, 1))dnl\n define(atype_kind,substr(atype_code, 1))dnl\n define(get_typename2, `$1 (kind=$2)')dnl\n define(get_typename, `get_typename2(ifelse($1,i,integer,ifelse($1,r,real,ifelse($1,l,logical,ifelse($1,c,complex,unknown)))),`$2')')dnl\n-define(atype_name, get_typename(atype_letter,atype_kind))dnl\n+dnl\n+dnl KIND=17 is special: This is just a naming convention\n+dnl in the library, for Fortran source code KIND=16 is needed\n+dnl\n+define(name_kind, ifelse(atype_kind,17,16,atype_kind))dnl\n+define(atype_name, get_typename(atype_letter,name_kind))dnl\n define(name, regexp(regexp(file, `[^/]*$', `\\&'), `^_\\([^_]*\\)_', `\\1'))dnl\n-define(rtype_name,get_typename(ifelse(name,abs,ifelse(atype_letter,c,r,atype_letter),ifelse(name,aimag,ifelse(atype_letter,c,r,atype_letter),atype_letter)),atype_kind))dnl\n-define(function_name,ifelse(name,conjg,`_gfortran_specific__conjg_'atype_kind,`_gfortran_specific__'name`_'atype_code))dnl\n+define(rtype_name,get_typename(ifelse(name,abs,ifelse(atype_letter,c,r,atype_letter),ifelse(name,aimag,ifelse(atype_letter,c,r,atype_letter),atype_letter)),name_kind))dnl\n+define(function_name,dnl\n+ifelse(name,conjg,`_gfortran_specific__conjg_'atype_kind,`_gfortran_specific__'name`_'atype_code))dnl\n \n-define(type,ifelse(atype_letter,l,LOGICAL,ifelse(atype_letter,i,INTEGER,ifelse(atype_letter,r,REAL,ifelse(atype_letter,c,COMPLEX,UNKNOW)))))dnl\n-define(Q,ifelse(atype_kind,4,F,ifelse(atype_kind,8,`',ifelse(atype_kind,10,L,ifelse(atype_kind,16,L,`_'atype_kind)))))dnl\n+define(type,dnl\n+ifelse(atype_letter,l,LOGICAL,dnl\n+ifelse(atype_letter,i,INTEGER,dnl\n+ifelse(atype_letter,r,REAL,dnl\n+ifelse(atype_letter,c,COMPLEX,UNKNOW)))))dnl\n+define(Q,ifelse(atype_kind,4,F,\n+ifelse(atype_kind,8,`',\n+ifelse(atype_kind,10,L,\n+ifelse(atype_kind,16,L,\n+ifelse(atype_kind,17,L,\n+`_'atype_kind))))))dnl\n \n dnl A few specifics require a function other than their name, or\n dnl nothing. The list is currently:\n dnl    - integer and logical specifics require no libm function\n dnl    - AINT requires the trunc() family functions\n dnl    - ANINT requires round()\n dnl    - AIMAG, CONJG, DIM, SIGN require no libm function\n-define(needed,ifelse(atype_letter,i,`none',ifelse(atype_letter,l,`none',ifelse(name,aint,trunc,ifelse(name,anint,round,ifelse(name,aimag,none,ifelse(name,conjg,none,ifelse(name,dim,none,ifelse(name,sign,none,ifelse(name,abs,fabs,name))))))))))dnl\n+define(needed,dnl\n+ifelse(atype_letter,i,`none',dnl\n+ifelse(atype_letter,l,`none',dnl\n+ifelse(name,aint,trunc,dnl\n+ifelse(name,anint,round,dnl\n+ifelse(name,aimag,none,dnl\n+ifelse(name,conjg,none,dnl\n+ifelse(name,dim,none,dnl\n+ifelse(name,sign,none,dnl\n+ifelse(name,abs,fabs,name))))))))))dnl\n define(prefix,ifelse(atype_letter,c,C,`'))dnl\n \n dnl Special case for fabs, for which the corresponding complex function"}, {"sha": "27b9c913af63569f56b376c8f3ea99fd1add4ace", "filename": "libgfortran/m4/specific2.m4", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8fea8cd861d9484eb825a11264812bfe193f8ee/libgfortran%2Fm4%2Fspecific2.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8fea8cd861d9484eb825a11264812bfe193f8ee/libgfortran%2Fm4%2Fspecific2.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Fspecific2.m4?ref=a8fea8cd861d9484eb825a11264812bfe193f8ee", "patch": "@@ -4,11 +4,18 @@ define(atype_letter,substr(atype_code, 0, 1))dnl\n define(atype_kind,substr(atype_code, 1))dnl\n define(get_typename2, `$1 (kind=$2)')dnl\n define(get_typename, `get_typename2(ifelse($1,i,integer,ifelse($1,r,real,ifelse($1,l,logical,ifelse($1,c,complex,unknown)))),`$2')')dnl\n-define(atype_name, get_typename(atype_letter,atype_kind))dnl\n+define(name_kind, ifelse(atype_kind,17,16,atype_kind))dnl\n+define(atype_name, get_typename(atype_letter,name_kind))dnl\n define(name, regexp(regexp(file, `[^/]*$', `\\&'), `^_\\([^_]*\\)_', `\\1'))dnl\n define(function_name,`_gfortran_specific__'name`_'atype_code)dnl\n \n-define(Q,ifelse(atype_kind,4,F,ifelse(atype_kind,8,`',ifelse(atype_kind,10,L,ifelse(atype_kind,16,L,`_'atype_kind)))))dnl\n+define(Q,dnl\n+ifelse(atype_kind,4,F,dnl\n+ifelse(atype_kind,8,`',dnl\n+ifelse(atype_kind,10,L,dnl\n+ifelse(atype_kind,16,L,dnl\n+ifelse(atype_kind,17,L,dnl\n+`_'atype_kind))))))dnl\n \n #include \"config.h\"\n #include \"kinds.inc\""}]}