{"sha": "5cf54585496004fc5b65991d0a7f586bbe9d4a89", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWNmNTQ1ODU0OTYwMDRmYzViNjU5OTFkMGE3ZjU4NmJiZTlkNGE4OQ==", "commit": {"author": {"name": "Tobias Schl\u00fcter", "email": "tobi@gcc.gnu.org", "date": "2006-01-18T20:54:49Z"}, "committer": {"name": "Tobias Schl\u00fcter", "email": "tobi@gcc.gnu.org", "date": "2006-01-18T20:54:49Z"}, "message": "re PR fortran/18540 (Jumping into blocks gives error rather than warning)\n\nPR fortran/18540\nPR fortran/18937\n* gfortran.h (BBT_HEADER): Move definition up.\n(gfc_st_label): Add BBT_HEADER, remove 'prev' and 'next'.\n* io.c (format_asterisk): Adapt initializer.\n* resolve.c (resolve_branch): Allow FORTRAN 66 cross-block GOTOs\nas extension.\n* symbol.c (compare_st_labels): New function.\n(gfc_free_st_label, free_st_labels, gfc_get_st_label): Convert to\nusing balanced binary tree.\n* decl.c (match_char_length, gfc_match_old_kind_spec): Do away\nwith 'cnt'.\n(warn_unused_label): Adapt to binary tree.\n* match.c (gfc_match_small_literal_int): Only set cnt if non-NULL.\n* primary.c (match_kind_param): Do away with cnt.\n\nAlso converted the ChangeLog to use latin1 characters.\n\nFrom-SVN: r109914", "tree": {"sha": "d82509409506532bc64cf462617e77ad272677ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d82509409506532bc64cf462617e77ad272677ad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5cf54585496004fc5b65991d0a7f586bbe9d4a89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5cf54585496004fc5b65991d0a7f586bbe9d4a89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5cf54585496004fc5b65991d0a7f586bbe9d4a89", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5cf54585496004fc5b65991d0a7f586bbe9d4a89/comments", "author": {"login": "TobiSchluter", "id": 11887541, "node_id": "MDQ6VXNlcjExODg3NTQx", "avatar_url": "https://avatars.githubusercontent.com/u/11887541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TobiSchluter", "html_url": "https://github.com/TobiSchluter", "followers_url": "https://api.github.com/users/TobiSchluter/followers", "following_url": "https://api.github.com/users/TobiSchluter/following{/other_user}", "gists_url": "https://api.github.com/users/TobiSchluter/gists{/gist_id}", "starred_url": "https://api.github.com/users/TobiSchluter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TobiSchluter/subscriptions", "organizations_url": "https://api.github.com/users/TobiSchluter/orgs", "repos_url": "https://api.github.com/users/TobiSchluter/repos", "events_url": "https://api.github.com/users/TobiSchluter/events{/privacy}", "received_events_url": "https://api.github.com/users/TobiSchluter/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TobiSchluter", "id": 11887541, "node_id": "MDQ6VXNlcjExODg3NTQx", "avatar_url": "https://avatars.githubusercontent.com/u/11887541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TobiSchluter", "html_url": "https://github.com/TobiSchluter", "followers_url": "https://api.github.com/users/TobiSchluter/followers", "following_url": "https://api.github.com/users/TobiSchluter/following{/other_user}", "gists_url": "https://api.github.com/users/TobiSchluter/gists{/gist_id}", "starred_url": "https://api.github.com/users/TobiSchluter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TobiSchluter/subscriptions", "organizations_url": "https://api.github.com/users/TobiSchluter/orgs", "repos_url": "https://api.github.com/users/TobiSchluter/repos", "events_url": "https://api.github.com/users/TobiSchluter/events{/privacy}", "received_events_url": "https://api.github.com/users/TobiSchluter/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "61da04bdada39d393c0ca6cd006099db7ada4ced", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61da04bdada39d393c0ca6cd006099db7ada4ced", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61da04bdada39d393c0ca6cd006099db7ada4ced"}], "stats": {"total": 197, "additions": 110, "deletions": 87}, "files": [{"sha": "b13f4f50ffc1321976c830b1c0aaf566b9e98bb0", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cf54585496004fc5b65991d0a7f586bbe9d4a89/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cf54585496004fc5b65991d0a7f586bbe9d4a89/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=5cf54585496004fc5b65991d0a7f586bbe9d4a89", "patch": "@@ -1,3 +1,21 @@\n+2006-01-18  Tobias Schl\ufffd\ufffdter  <tobias.schlueter@physik.uni-muenchen.de>\n+\n+\tPR fortran/18540\n+\tPR fortran/18937\n+\t* gfortran.h (BBT_HEADER): Move definition up.\n+\t(gfc_st_label): Add BBT_HEADER, remove 'prev' and 'next'.\n+\t* io.c (format_asterisk): Adapt initializer.\n+\t* resolve.c (resolve_branch): Allow FORTRAN 66 cross-block GOTOs\n+\tas extension.\n+\t* symbol.c (compare_st_labels): New function.\n+\t(gfc_free_st_label, free_st_labels, gfc_get_st_label): Convert to\n+\tusing balanced binary tree.\n+\t* decl.c (match_char_length, gfc_match_old_kind_spec): Do away\n+\twith 'cnt'.\n+\t(warn_unused_label): Adapt to binary tree.\n+\t* match.c (gfc_match_small_literal_int): Only set cnt if non-NULL.\n+\t* primary.c (match_kind_param): Do away with cnt.\n+\n 2006-01-18  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/20869\n@@ -22,7 +40,7 @@\n \targument checking. Replace strcmp's with comparisons with generic\n \tcodes.\n \n-2006-01-16  Rafael \u00c1vila de Esp\u00edndola  <rafael.espindola@gmail.com>\n+2006-01-16  Rafael \ufffd\ufffdvila de Esp\ufffd\ufffdndol  <rafael.espindola@gmail.com>\n \n \t* gfortranspec.c (lang_specific_spec_functions): Remove.\n \n@@ -59,7 +77,7 @@\n \t* trans.c (gfc_add_expr_to_block): Do not fold tcc_statement\n \tnodes.\n \n-2006-01-11  Tobias Schl\"uter  <tobias.schlueter@physik.uni-muenchen.de>\n+2006-01-11  Tobias Schl\ufffd\ufffdter  <tobias.schlueter@physik.uni-muenchen.de>\n \n \t* parse.c (next_fixed): Remove superfluous string concatenation.\n "}, {"sha": "e786b318927783896e2438cd019d19943e0ad15b", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cf54585496004fc5b65991d0a7f586bbe9d4a89/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cf54585496004fc5b65991d0a7f586bbe9d4a89/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=5cf54585496004fc5b65991d0a7f586bbe9d4a89", "patch": "@@ -1,5 +1,5 @@\n /* Declaration statement matcher\n-   Copyright (C) 2002, 2004, 2005 Free Software Foundation, Inc.\n+   Copyright (C) 2002, 2004, 2005, 2006 Free Software Foundation, Inc.\n    Contributed by Andy Vaught\n \n This file is part of GCC.\n@@ -508,15 +508,14 @@ char_len_param_value (gfc_expr ** expr)\n static match\n match_char_length (gfc_expr ** expr)\n {\n-  int length, cnt;\n+  int length;\n   match m;\n \n   m = gfc_match_char ('*');\n   if (m != MATCH_YES)\n     return m;\n \n-  /* cnt is unused, here.  */\n-  m = gfc_match_small_literal_int (&length, &cnt);\n+  m = gfc_match_small_literal_int (&length, NULL);\n   if (m == MATCH_ERROR)\n     return m;\n \n@@ -1280,13 +1279,12 @@ match\n gfc_match_old_kind_spec (gfc_typespec * ts)\n {\n   match m;\n-  int original_kind, cnt;\n+  int original_kind;\n \n   if (gfc_match_char ('*') != MATCH_YES)\n     return MATCH_NO;\n \n-  /* cnt is unsed, here.  */\n-  m = gfc_match_small_literal_int (&ts->kind, &cnt);\n+  m = gfc_match_small_literal_int (&ts->kind, NULL);\n   if (m != MATCH_YES)\n     return MATCH_ERROR;\n "}, {"sha": "b00a9b35b538162e2fd40dddd522a1085c31f71b", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cf54585496004fc5b65991d0a7f586bbe9d4a89/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cf54585496004fc5b65991d0a7f586bbe9d4a89/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=5cf54585496004fc5b65991d0a7f586bbe9d4a89", "patch": "@@ -436,6 +436,9 @@ typedef enum gfc_generic_isym_id gfc_generic_isym_id;\n \n /************************* Structures *****************************/\n \n+/* Used for keeping things in balanced binary trees.  */\n+#define BBT_HEADER(self) int priority; struct self *left, *right\n+\n /* Symbol attribute structure.  */\n typedef struct\n {\n@@ -676,6 +679,8 @@ gfc_namelist;\n /* TODO: Make format/statement specifics a union.  */\n typedef struct gfc_st_label\n {\n+  BBT_HEADER(gfc_st_label);\n+\n   int value;\n \n   gfc_sl_type defined, referenced;\n@@ -685,8 +690,6 @@ typedef struct gfc_st_label\n   tree backend_decl;\n \n   locus where;\n-\n-  struct gfc_st_label *prev, *next;\n }\n gfc_st_label;\n \n@@ -817,8 +820,6 @@ gfc_entry_list;\n    several symtrees pointing to the same symbol node via USE\n    statements.  */\n \n-#define BBT_HEADER(self) int priority; struct self *left, *right\n-\n typedef struct gfc_symtree\n {\n   BBT_HEADER (gfc_symtree);"}, {"sha": "c88c74a7d23ce95f101de17e64ae2ac6751a5692", "filename": "gcc/fortran/io.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cf54585496004fc5b65991d0a7f586bbe9d4a89/gcc%2Ffortran%2Fio.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cf54585496004fc5b65991d0a7f586bbe9d4a89/gcc%2Ffortran%2Fio.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fio.c?ref=5cf54585496004fc5b65991d0a7f586bbe9d4a89", "patch": "@@ -1,6 +1,6 @@\n /* Deal with I/O statements & related stuff.\n-   Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005 Free Software Foundation,\n-   Inc.\n+   Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005, 2006 Free Software\n+   Foundation, Inc.\n    Contributed by Andy Vaught\n \n This file is part of GCC.\n@@ -28,8 +28,8 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n #include \"parse.h\"\n \n gfc_st_label format_asterisk =\n-  { -1, ST_LABEL_FORMAT, ST_LABEL_FORMAT, NULL, 0,\n-    {NULL, NULL}, NULL, NULL};\n+  {0, NULL, NULL, -1, ST_LABEL_FORMAT, ST_LABEL_FORMAT, NULL,\n+   0, {NULL, NULL}};\n \n typedef struct\n {"}, {"sha": "7dd4e1a8c63f4ab70f4f6764e4611b53cd8ed58b", "filename": "gcc/fortran/match.c", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cf54585496004fc5b65991d0a7f586bbe9d4a89/gcc%2Ffortran%2Fmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cf54585496004fc5b65991d0a7f586bbe9d4a89/gcc%2Ffortran%2Fmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatch.c?ref=5cf54585496004fc5b65991d0a7f586bbe9d4a89", "patch": "@@ -1,6 +1,6 @@\n /* Matching subroutines in all sizes, shapes and colors.\n-   Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005 Free Software Foundation,\n-   Inc.\n+   Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005, 2006 Free Software\n+   Foundation, Inc.\n    Contributed by Andy Vaught\n \n This file is part of GCC.\n@@ -138,7 +138,8 @@ gfc_match_eos (void)\n \n /* Match a literal integer on the input, setting the value on\n    MATCH_YES.  Literal ints occur in kind-parameters as well as\n-   old-style character length specifications.  */\n+   old-style character length specifications.  If cnt is non-NULL it\n+   will be set to the number of digits.  */\n \n match\n gfc_match_small_literal_int (int *value, int *cnt)\n@@ -151,7 +152,8 @@ gfc_match_small_literal_int (int *value, int *cnt)\n \n   gfc_gobble_whitespace ();\n   c = gfc_next_char ();\n-  *cnt = 0;\n+  if (cnt)\n+    *cnt = 0;\n \n   if (!ISDIGIT (c))\n     {\n@@ -183,7 +185,8 @@ gfc_match_small_literal_int (int *value, int *cnt)\n   gfc_current_locus = old_loc;\n \n   *value = i;\n-  *cnt = j;\n+  if (cnt)\n+    *cnt = j;\n   return MATCH_YES;\n }\n "}, {"sha": "56cff2c29a91b9f305c4f5c0831a902bd2ce2fa5", "filename": "gcc/fortran/primary.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cf54585496004fc5b65991d0a7f586bbe9d4a89/gcc%2Ffortran%2Fprimary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cf54585496004fc5b65991d0a7f586bbe9d4a89/gcc%2Ffortran%2Fprimary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fprimary.c?ref=5cf54585496004fc5b65991d0a7f586bbe9d4a89", "patch": "@@ -1,6 +1,6 @@\n /* Primary expression subroutines\n-   Copyright (C) 2000, 2001, 2002, 2004, 2005 Free Software Foundation,\n-   Inc.\n+   Copyright (C) 2000, 2001, 2002, 2004, 2005, 2006 Free Software\n+   Foundation, Inc.\n    Contributed by Andy Vaught\n \n This file is part of GCC.\n@@ -40,10 +40,8 @@ match_kind_param (int *kind)\n   gfc_symbol *sym;\n   const char *p;\n   match m;\n-  int cnt;\n \n-  /* cnt is unused, here.  */\n-  m = gfc_match_small_literal_int (kind, &cnt);\n+  m = gfc_match_small_literal_int (kind, NULL);\n   if (m != MATCH_NO)\n     return m;\n "}, {"sha": "af9531679262110ac700d69a9520ca714dd8dd57", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 26, "deletions": 28, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cf54585496004fc5b65991d0a7f586bbe9d4a89/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cf54585496004fc5b65991d0a7f586bbe9d4a89/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=5cf54585496004fc5b65991d0a7f586bbe9d4a89", "patch": "@@ -3580,9 +3580,12 @@ resolve_branch (gfc_st_label * label, gfc_code * code)\n \n   if (found == NULL)\n     {\n-      /* still nothing, so illegal.  */\n-      gfc_error_now (\"Label at %L is not in the same block as the \"\n-\t\t     \"GOTO statement at %L\", &lp->where, &code->loc);\n+      /* The label is not in an enclosing block, so illegal.  This was\n+\t allowed in Fortran 66, so we allow it as extension.  We also \n+\t forego further checks if we run into this.  */\n+      gfc_notify_std (GFC_STD_LEGACY,\n+\t\t      \"Label at %L is not in the same block as the \"\n+\t\t      \"GOTO statement at %L\", &lp->where, &code->loc);\n       return;\n     }\n \n@@ -5217,38 +5220,33 @@ gfc_elemental (gfc_symbol * sym)\n /* Warn about unused labels.  */\n \n static void\n-warn_unused_label (gfc_namespace * ns)\n+warn_unused_label (gfc_st_label * label)\n {\n-  gfc_st_label *l;\n-\n-  l = ns->st_labels;\n-  if (l == NULL)\n+  if (label == NULL)\n     return;\n \n-  while (l->next)\n-    l = l->next;\n+  warn_unused_label (label->left);\n \n-  for (; l; l = l->prev)\n-    {\n-      if (l->defined == ST_LABEL_UNKNOWN)\n-\tcontinue;\n+  if (label->defined == ST_LABEL_UNKNOWN)\n+    return;\n \n-      switch (l->referenced)\n-\t{\n-\tcase ST_LABEL_UNKNOWN:\n-\t  gfc_warning (\"Label %d at %L defined but not used\", l->value,\n-\t\t       &l->where);\n-\t  break;\n+  switch (label->referenced)\n+    {\n+    case ST_LABEL_UNKNOWN:\n+      gfc_warning (\"Label %d at %L defined but not used\", label->value,\n+\t\t   &label->where);\n+      break;\n \n-\tcase ST_LABEL_BAD_TARGET:\n-\t  gfc_warning (\"Label %d at %L defined but cannot be used\", l->value,\n-\t\t       &l->where);\n-\t  break;\n+    case ST_LABEL_BAD_TARGET:\n+      gfc_warning (\"Label %d at %L defined but cannot be used\",\n+\t\t   label->value, &label->where);\n+      break;\n \n-\tdefault:\n-\t  break;\n-\t}\n+    default:\n+      break;\n     }\n+\n+  warn_unused_label (label->right);\n }\n \n \n@@ -5713,7 +5711,7 @@ gfc_resolve (gfc_namespace * ns)\n \n   /* Warn about unused labels.  */\n   if (gfc_option.warn_unused_labels)\n-    warn_unused_label (ns);\n+    warn_unused_label (ns->st_labels);\n \n   gfc_current_ns = old_ns;\n }"}, {"sha": "c4d2cf02649a8c0004deaf7f5097f006ab6d814a", "filename": "gcc/fortran/symbol.c", "status": "modified", "additions": 39, "deletions": 32, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cf54585496004fc5b65991d0a7f586bbe9d4a89/gcc%2Ffortran%2Fsymbol.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cf54585496004fc5b65991d0a7f586bbe9d4a89/gcc%2Ffortran%2Fsymbol.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsymbol.c?ref=5cf54585496004fc5b65991d0a7f586bbe9d4a89", "patch": "@@ -1,6 +1,6 @@\n /* Maintain binary trees of symbols.\n-   Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005 Free Software Foundation, \n-   Inc.\n+   Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005, 2006 Free Software\n+   Foundation, Inc.\n    Contributed by Andy Vaught\n \n This file is part of GCC.\n@@ -1487,46 +1487,51 @@ gfc_get_component_attr (symbol_attribute * attr, gfc_component * c)\n \n /******************** Statement label management ********************/\n \n-/* Free a single gfc_st_label structure, making sure the list is not\n+/* Comparison function for statement labels, used for managing the\n+   binary tree.  */\n+\n+static int\n+compare_st_labels (void * a1, void * b1)\n+{\n+  int a = ((gfc_st_label *)a1)->value;\n+  int b = ((gfc_st_label *)b1)->value;\n+\n+  return (b - a);\n+}\n+\n+\n+/* Free a single gfc_st_label structure, making sure the tree is not\n    messed up.  This function is called only when some parse error\n    occurs.  */\n \n void\n gfc_free_st_label (gfc_st_label * label)\n {\n-\n   if (label == NULL)\n     return;\n \n-  if (label->prev)\n-    label->prev->next = label->next;\n-\n-  if (label->next)\n-    label->next->prev = label->prev;\n-\n-  if (gfc_current_ns->st_labels == label)\n-    gfc_current_ns->st_labels = label->next;\n+  gfc_delete_bbt (&gfc_current_ns->st_labels, label, compare_st_labels);\n \n   if (label->format != NULL)\n     gfc_free_expr (label->format);\n \n   gfc_free (label);\n }\n \n-/* Free a whole list of gfc_st_label structures.  */\n+/* Free a whole tree of gfc_st_label structures.  */\n \n static void\n-free_st_labels (gfc_st_label * l1)\n+free_st_labels (gfc_st_label * label)\n {\n-  gfc_st_label *l2;\n+  if (label == NULL)\n+    return;\n \n-  for (; l1; l1 = l2)\n-    {\n-      l2 = l1->next;\n-      if (l1->format != NULL)\n-\tgfc_free_expr (l1->format);\n-      gfc_free (l1);\n-    }\n+  free_st_labels (label->left);\n+  free_st_labels (label->right);\n+  \n+  if (label->format != NULL)\n+    gfc_free_expr (label->format);\n+  gfc_free (label);\n }\n \n \n@@ -1539,23 +1544,25 @@ gfc_get_st_label (int labelno)\n   gfc_st_label *lp;\n \n   /* First see if the label is already in this namespace.  */\n-  for (lp = gfc_current_ns->st_labels; lp; lp = lp->next)\n-    if (lp->value == labelno)\n-      break;\n-  if (lp != NULL)\n-    return lp;\n+  lp = gfc_current_ns->st_labels;\n+  while (lp)\n+    {\n+      if (lp->value == labelno)\n+\treturn lp;\n+\n+      if (lp->value < labelno)\n+\tlp = lp->left;\n+      else\n+\tlp = lp->right;\n+    }\n \n   lp = gfc_getmem (sizeof (gfc_st_label));\n \n   lp->value = labelno;\n   lp->defined = ST_LABEL_UNKNOWN;\n   lp->referenced = ST_LABEL_UNKNOWN;\n \n-  lp->prev = NULL;\n-  lp->next = gfc_current_ns->st_labels;\n-  if (gfc_current_ns->st_labels)\n-    gfc_current_ns->st_labels->prev = lp;\n-  gfc_current_ns->st_labels = lp;\n+  gfc_insert_bbt (&gfc_current_ns->st_labels, lp, compare_st_labels);\n \n   return lp;\n }"}]}