{"sha": "fb9b3c0ff7d347934b364e3ab06d4cf56726df33", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmI5YjNjMGZmN2QzNDc5MzRiMzY0ZTNhYjA2ZDRjZjU2NzI2ZGYzMw==", "commit": {"author": {"name": "Tom de Vries", "email": "tdevries@suse.de", "date": "2020-08-11T16:20:17Z"}, "committer": {"name": "Tom de Vries", "email": "tdevries@suse.de", "date": "2020-08-12T12:04:41Z"}, "message": "[testsuite] Add effective target large_initializer\n\nWhen compiling builtin-object-size-21.c for nvptx, cc1 times out while\nemitting the initializer for global variable xm3_3.\n\nWith x86_64, we are able to emit the initializer with a few lines of assembly:\n...\nxm3_3:\n        .byte   0\n        .zero   9223372036854775803\n        .byte   1\n        .byte   2\n        .byte   3\n...\nbut with nvptx, we don't have some something similar available, and thus\ngenerate:\n...\n  .visible .global .align 1 .u32 xm3_3[2305843009213693952] =\n  { 0, 0, 0, ...\n...\n\nIntroduce an effective target large_initializer, returning false for nvptx,\nand require it for test-cases with large initializers.\n\nTested on nvptx with make check-gcc.\n\ngcc/testsuite/ChangeLog:\n\n\tPR testsuite/96566\n\t* lib/target-supports.exp (check_effective_target_large_initializer):\n\tNew proc.\n\t* gcc.dg/builtin-object-size-21.c: Require large_initializer.\n\t* gcc.dg/strlenopt-55.c: Same.", "tree": {"sha": "ec1acaec76a2b08cbdc686880ceeb5e73d44ea45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ec1acaec76a2b08cbdc686880ceeb5e73d44ea45"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fb9b3c0ff7d347934b364e3ab06d4cf56726df33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb9b3c0ff7d347934b364e3ab06d4cf56726df33", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb9b3c0ff7d347934b364e3ab06d4cf56726df33", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb9b3c0ff7d347934b364e3ab06d4cf56726df33/comments", "author": {"login": "vries", "id": 4057235, "node_id": "MDQ6VXNlcjQwNTcyMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vries", "html_url": "https://github.com/vries", "followers_url": "https://api.github.com/users/vries/followers", "following_url": "https://api.github.com/users/vries/following{/other_user}", "gists_url": "https://api.github.com/users/vries/gists{/gist_id}", "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vries/subscriptions", "organizations_url": "https://api.github.com/users/vries/orgs", "repos_url": "https://api.github.com/users/vries/repos", "events_url": "https://api.github.com/users/vries/events{/privacy}", "received_events_url": "https://api.github.com/users/vries/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vries", "id": 4057235, "node_id": "MDQ6VXNlcjQwNTcyMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vries", "html_url": "https://github.com/vries", "followers_url": "https://api.github.com/users/vries/followers", "following_url": "https://api.github.com/users/vries/following{/other_user}", "gists_url": "https://api.github.com/users/vries/gists{/gist_id}", "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vries/subscriptions", "organizations_url": "https://api.github.com/users/vries/orgs", "repos_url": "https://api.github.com/users/vries/repos", "events_url": "https://api.github.com/users/vries/events{/privacy}", "received_events_url": "https://api.github.com/users/vries/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b9c7fe59f9f66ecc091e215c826ecd1a04d032dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9c7fe59f9f66ecc091e215c826ecd1a04d032dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9c7fe59f9f66ecc091e215c826ecd1a04d032dc"}], "stats": {"total": 17, "additions": 15, "deletions": 2}, "files": [{"sha": "7e0f85ffdf3a39e4f1c07ddddb209c2f29d1e137", "filename": "gcc/testsuite/gcc.dg/builtin-object-size-21.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb9b3c0ff7d347934b364e3ab06d4cf56726df33/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-21.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb9b3c0ff7d347934b364e3ab06d4cf56726df33/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-21.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-21.c?ref=fb9b3c0ff7d347934b364e3ab06d4cf56726df33", "patch": "@@ -1,7 +1,8 @@\n /* PR middle-end/92815 - spurious -Wstringop-overflow writing into\n    a flexible array of an extern struct\n    { dg-do compile }\n-   { dg-options \"-Wall -fdump-tree-optimized\" } */\n+   { dg-options \"-Wall -fdump-tree-optimized\" }\n+   { dg-require-effective-target large_initializer } */\n \n #define PTRDIFF_MAX __PTRDIFF_MAX__\n "}, {"sha": "ca89ecd3c53bac2e02c14521212afd3266cd7fd3", "filename": "gcc/testsuite/gcc.dg/strlenopt-55.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb9b3c0ff7d347934b364e3ab06d4cf56726df33/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-55.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb9b3c0ff7d347934b364e3ab06d4cf56726df33/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-55.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-55.c?ref=fb9b3c0ff7d347934b364e3ab06d4cf56726df33", "patch": "@@ -3,7 +3,8 @@\n \n    Verify that strlen() of braced initialized array is folded\n    { dg-do compile }\n-   { dg-options \"-O1 -Wall -fdump-tree-gimple -fdump-tree-optimized\" } */\n+   { dg-options \"-O1 -Wall -fdump-tree-gimple -fdump-tree-optimized\" }\n+   { dg-require-effective-target large_initializer } */\n \n #include \"strlenopt.h\"\n "}, {"sha": "4e0d45aaae5f13513d44c9a11809ffe057f40998", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb9b3c0ff7d347934b364e3ab06d4cf56726df33/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb9b3c0ff7d347934b364e3ab06d4cf56726df33/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=fb9b3c0ff7d347934b364e3ab06d4cf56726df33", "patch": "@@ -10424,3 +10424,14 @@ proc check_effective_target_msp430_large {} {\n \t#endif\n     } \"\"]\n }\n+\n+# Return 1 if the target has an efficient means to encode large initializers\n+# in the assembly.\n+\n+proc check_effective_target_large_initializer { } {\n+    if { [istarget nvptx*-*-*] } {\n+\treturn 0\n+    }\n+\n+    return 1\n+}"}]}