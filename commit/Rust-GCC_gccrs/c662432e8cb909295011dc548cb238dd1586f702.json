{"sha": "c662432e8cb909295011dc548cb238dd1586f702", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzY2MjQzMmU4Y2I5MDkyOTUwMTFkYzU0OGNiMjM4ZGQxNTg2ZjcwMg==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@redhat.com", "date": "2007-02-12T16:25:14Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2007-02-12T16:25:14Z"}, "message": "invoke.texi (Overall Options): Document --help=.\n\n* doc/invoke.texi (Overall Options): Document --help=.                                                        \n* gcc.c (target_help_flag): Rename to print_subprocess_flag.                                                  \n  (cc1_options): Pass --help= on to cc1.                                                                      \n  (display_help): Add description of --help=.                                                                 \n  (process_command): Add code to handle --help=.  Allow translated                                            \n  --help and --target-help switches to be passed on to compiler sub-process.                                                                                               \n  (main): Remove unused if statement.                                                                         \n* opts.c (columns): Remove.                                                                                   \n  (LEFT_COLUMN): Define.                                                                                      \n  (wrap_help): Add columns argument.                                                                          \n  (print_filtered_help): Change parameters to be an include bitmask,                                          \n  an exclude bitmask, an any bitmask and the column width.  Move the                                          \n  code to display the params list here.  Add code to display the                                              \n  status of options rather than their descriptions if the quiet flag                                          \n  is not active.                                                                                              \n  (print_specific_help): Change parameters to be an include bitmask,                                          \n  an exclude bitmask and an any bitmask.  Move code to look up the                                            \n  column width here.  Decide upon the title for an options listing.                                           \n  (common_handle_options): Add code to handle --help=.  Adapt code                                            \n  for --help and --target-help to use the revised form of the                                                 \n  print_specific_help function.                                                                               \n  (print_help): Delete.                                                                                       \n  (print_param_help): Delete.                                                                                 \n  (print_switch): Delete.                                                                                     \n* opts.h (cl_lang_count): Add prototype.                                                                      \n (CL_PARAMS, CL_WARNING, CL_OPTIMIZATION, CL_MIN_OPTION_CLASS, CL_MAX_OPTION_CLASS): New defines.            \n* optc-gen.awk: Add construction of cl_lang_count.                                                            \n* c.opt: Add Warning attribute to warning options and Optimization attribute to optimization options.         \n* common.opt: Likewise.                                                                                       \n  Add --help=.                                                                                                \n  Add -fhelp and -ftarget-help as aliases for the transformed --help and --target-help options.               \n* opt-functions.awk: Add code to handle Warning and Optimization attributes.\n\nFrom-SVN: r121849", "tree": {"sha": "8132cd1fbca1d1ba829d2d5f28f606f2e09d28b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8132cd1fbca1d1ba829d2d5f28f606f2e09d28b2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c662432e8cb909295011dc548cb238dd1586f702", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c662432e8cb909295011dc548cb238dd1586f702", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c662432e8cb909295011dc548cb238dd1586f702", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c662432e8cb909295011dc548cb238dd1586f702/comments", "author": {"login": "nickclifton", "id": 31441682, "node_id": "MDQ6VXNlcjMxNDQxNjgy", "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nickclifton", "html_url": "https://github.com/nickclifton", "followers_url": "https://api.github.com/users/nickclifton/followers", "following_url": "https://api.github.com/users/nickclifton/following{/other_user}", "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}", "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions", "organizations_url": "https://api.github.com/users/nickclifton/orgs", "repos_url": "https://api.github.com/users/nickclifton/repos", "events_url": "https://api.github.com/users/nickclifton/events{/privacy}", "received_events_url": "https://api.github.com/users/nickclifton/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "dfcbeaa576a7fb387863a94bf1aded374ee59dfd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfcbeaa576a7fb387863a94bf1aded374ee59dfd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dfcbeaa576a7fb387863a94bf1aded374ee59dfd"}], "stats": {"total": 1470, "additions": 895, "deletions": 575}, "files": [{"sha": "bda22d0f736449914db4bea4ecb9ab977218f7e2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c662432e8cb909295011dc548cb238dd1586f702/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c662432e8cb909295011dc548cb238dd1586f702/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c662432e8cb909295011dc548cb238dd1586f702", "patch": "@@ -1,3 +1,43 @@\n+2007-02-12  Nick Clifton  <nickc@redhat.com>\n+\n+\t* doc/invoke.texi (Overall Options): Document --help=.\n+\t* gcc.c (target_help_flag): Rename to print_subprocess_flag.\n+\t(cc1_options): Pass --help= on to cc1.\n+\t(display_help): Add description of --help=.\n+\t(process_command): Add code to handle --help=.  Allow translated\n+\t--help and --target-help switches to be passed on to compiler\n+\tsub-process.\n+\t(main): Remove unused if statement.\n+\t* opts.c (columns): Remove.\n+\t(LEFT_COLUMN): Define.\n+\t(wrap_help): Add columns argument.\n+\t(print_filtered_help): Change parameters to be an include bitmask,\n+\tan exclude bitmask, an any bitmask and the column width.  Move the\n+\tcode to display the params list here.  Add code to display the\n+\tstatus of options rather than their descriptions if the quiet flag\n+\tis not active.\n+\t(print_specific_help): Change parameters to be an include bitmask,\n+\tan exclude bitmask and an any bitmask.  Move code to look up the\n+\tcolumn width here.  Decide upon the title for an options listing.\n+\t(common_handle_options): Add code to handle --help=.  Adapt code\n+\tfor --help and --target-help to use the revised form of the\n+\tprint_specific_help function.\n+\t(print_help): Delete.\n+\t(print_param_help): Delete.\n+\t(print_switch): Delete.\n+\t* opts.h (cl_lang_count): Add prototype.\n+\t(CL_PARAMS, CL_WARNING, CL_OPTIMIZATION, CL_MIN_OPTION_CLASS,\n+\tCL_MAX_OPTION_CLASS): New defines.\n+\t* optc-gen.awk: Add construction of cl_lang_count.\n+\t* c.opt: Add Warning attribute to warning options and Optimization\n+\tattribute to optimization options.\n+\t* common.opt: Likewise.\n+\tAdd --help=.\n+\tAdd -fhelp and -ftarget-help as aliases for the transformed --help\n+\tand --target-help options.\n+\t* opt-functions.awk: Add code to handle Warning and Optimization\n+\tattributes.\n+\n 2007-02-12  Richard Henderson  <rth@redhat.com>\n \n \t* config/alpha/constraints.md: New file."}, {"sha": "624b10e9ede0e99d5e950fb221755300cbb3487a", "filename": "gcc/c.opt", "status": "modified", "additions": 89, "deletions": 89, "changes": 178, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c662432e8cb909295011dc548cb238dd1586f702/gcc%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c662432e8cb909295011dc548cb238dd1586f702/gcc%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc.opt?ref=c662432e8cb909295011dc548cb238dd1586f702", "patch": "@@ -113,345 +113,345 @@ C ObjC C++ ObjC++ Joined Separate\n -U<macro>\tUndefine <macro>\n \n Wabi\n-C++ ObjC++ Var(warn_abi)\n+C++ ObjC++ Var(warn_abi) Warning\n Warn about things that will change when compiling with an ABI-compliant compiler\n \n Wall\n-C ObjC C++ ObjC++\n+C ObjC C++ ObjC++ Warning\n Enable most warning messages\n \n Wassign-intercept\n-ObjC ObjC++ Var(warn_assign_intercept)\n+ObjC ObjC++ Var(warn_assign_intercept) Warning\n Warn whenever an Objective-C assignment is being intercepted by the garbage collector\n \n Wbad-function-cast\n-C ObjC Var(warn_bad_function_cast)\n+C ObjC Var(warn_bad_function_cast) Warning\n Warn about casting functions to incompatible types\n \n Wc++-compat\n-C Var(warn_cxx_compat)\n+C Var(warn_cxx_compat) Warning\n Warn about C constructs that are not in the common subset of C and C++\n \n Wc++0x-compat\n C++ ObjC++ Var(warn_cxx0x_compat)\n Warn about C++ constructs whose meaning differs between ISO C++ 1998 and ISO C++ 200x\n \n Wcast-qual\n-C ObjC C++ ObjC++ Var(warn_cast_qual)\n+C ObjC C++ ObjC++ Var(warn_cast_qual) Warning\n Warn about casts which discard qualifiers\n \n Wchar-subscripts\n-C ObjC C++ ObjC++ Var(warn_char_subscripts)\n+C ObjC C++ ObjC++ Var(warn_char_subscripts) Warning\n Warn about subscripts whose type is \\\"char\\\"\n \n Wclobbered\n-C ObjC C++ ObjC++ Var(warn_clobbered) Init(-1)\n+C ObjC C++ ObjC++ Var(warn_clobbered) Init(-1) Warning\n Warn about variables that might be changed by \\\"longjmp\\\" or \\\"vfork\\\"\n \n Wcomment\n-C ObjC C++ ObjC++\n+C ObjC C++ ObjC++ Warning\n Warn about possibly nested block comments, and C++ comments spanning more than one physical line\n \n Wcomments\n-C ObjC C++ ObjC++\n+C ObjC C++ ObjC++ Warning\n Synonym for -Wcomment\n \n Wconversion\n-C ObjC C++ ObjC++ Var(warn_conversion)\n+C ObjC C++ ObjC++ Var(warn_conversion) Warning\n Warn for implicit type conversions that may change a value\n \n Wctor-dtor-privacy\n-C++ ObjC++ Var(warn_ctor_dtor_privacy)\n+C++ ObjC++ Var(warn_ctor_dtor_privacy) Warning\n Warn when all constructors and destructors are private\n \n Wdeclaration-after-statement\n-C ObjC Var(warn_declaration_after_statement)\n+C ObjC Var(warn_declaration_after_statement) Warning\n Warn when a declaration is found after a statement\n \n Wdeprecated\n-C++ ObjC++ Var(warn_deprecated) Init(1)\n+C++ ObjC++ Var(warn_deprecated) Init(1) Warning\n Warn about deprecated compiler features\n \n Wdiv-by-zero\n-C ObjC C++ Var(warn_div_by_zero) Init(1)\n+C ObjC C++ Var(warn_div_by_zero) Init(1) Warning\n Warn about compile-time integer division by zero\n \n Weffc++\n-C++ ObjC++ Var(warn_ecpp)\n+C++ ObjC++ Var(warn_ecpp) Warning\n Warn about violations of Effective C++ style rules\n \n Wempty-body\n-C ObjC C++ ObjC++ Var(warn_empty_body) Init(-1)\n+C ObjC C++ ObjC++ Var(warn_empty_body) Init(-1) Warning\n Warn about an empty body in an if or else statement\n \n Wendif-labels\n-C ObjC C++ ObjC++\n+C ObjC C++ ObjC++ Warning\n Warn about stray tokens after #elif and #endif\n \n Werror\n C ObjC C++ ObjC++\n ; Documented in common.opt\n \n Werror-implicit-function-declaration\n-C ObjC RejectNegative\n+C ObjC RejectNegative Warning\n Make implicit function declarations an error\n \n Wfloat-equal\n-C ObjC C++ ObjC++ Var(warn_float_equal)\n+C ObjC C++ ObjC++ Var(warn_float_equal) Warning\n Warn if testing floating point numbers for equality\n \n Wformat\n-C ObjC C++ ObjC++\n+C ObjC C++ ObjC++ Warning\n Warn about printf/scanf/strftime/strfmon format string anomalies\n \n Wformat-extra-args\n-C ObjC C++ ObjC++ Var(warn_format_extra_args)\n+C ObjC C++ ObjC++ Var(warn_format_extra_args) Warning\n Warn if passing too many arguments to a function for its format string\n \n Wformat-nonliteral\n-C ObjC C++ ObjC++ Var(warn_format_nonliteral)\n+C ObjC C++ ObjC++ Var(warn_format_nonliteral) Warning\n Warn about format strings that are not literals\n \n Wformat-security\n-C ObjC C++ ObjC++ Var(warn_format_security)\n+C ObjC C++ ObjC++ Var(warn_format_security) Warning\n Warn about possible security problems with format functions\n \n Wformat-y2k\n-C ObjC C++ ObjC++ Var(warn_format_y2k)\n+C ObjC C++ ObjC++ Var(warn_format_y2k) Warning\n Warn about strftime formats yielding 2-digit years\n \n Wformat-zero-length\n-C ObjC Var(warn_format_zero_length)\n+C ObjC Var(warn_format_zero_length) Warning\n Warn about zero-length formats\n \n Wformat=\n-C ObjC C++ ObjC++ Joined\n+C ObjC C++ ObjC++ Joined Warning\n \n Winit-self\n-C ObjC C++ ObjC++ Var(warn_init_self)\n+C ObjC C++ ObjC++ Var(warn_init_self) Warning\n Warn about variables which are initialized to themselves\n \n Wimplicit\n-C ObjC C++ ObjC++\n+C ObjC C++ ObjC++ Warning\n \n Wimplicit-function-declaration\n-C ObjC Var(mesg_implicit_function_declaration) Init(-1)\n+C ObjC Var(mesg_implicit_function_declaration) Init(-1) Warning\n Warn about implicit function declarations\n \n Wimplicit-int\n-C ObjC Var(warn_implicit_int)\n+C ObjC Var(warn_implicit_int) Warning\n Warn when a declaration does not specify a type\n \n Wimport\n C ObjC C++ ObjC++\n Deprecated.  This switch has no effect\n \n Wint-to-pointer-cast\n-C ObjC Var(warn_int_to_pointer_cast) Init(1)\n+C ObjC Var(warn_int_to_pointer_cast) Init(1) Warning\n Warn when there is a cast to a pointer from an integer of a different size\n \n Winvalid-offsetof\n-C++ ObjC++ Var(warn_invalid_offsetof) Init(1)\n+C++ ObjC++ Var(warn_invalid_offsetof) Init(1) Warning\n Warn about invalid uses of the \\\"offsetof\\\" macro\n \n Winvalid-pch\n-C ObjC C++ ObjC++\n+C ObjC C++ ObjC++ Warning\n Warn about PCH files that are found but not used\n \n Wlong-long\n-C ObjC C++ ObjC++ Var(warn_long_long) Init(1)\n+C ObjC C++ ObjC++ Var(warn_long_long) Init(1) Warning\n Do not warn about using \\\"long long\\\" when -pedantic\n \n Wmain\n-C ObjC\n+C ObjC Warning\n Warn about suspicious declarations of \\\"main\\\"\n \n Wmissing-braces\n-C ObjC C++ ObjC++ Var(warn_missing_braces)\n+C ObjC C++ ObjC++ Var(warn_missing_braces) Warning\n Warn about possibly missing braces around initializers\n \n Wmissing-declarations\n-C ObjC C++ ObjC++ Var(warn_missing_declarations)\n+C ObjC C++ ObjC++ Var(warn_missing_declarations) Warning\n Warn about global functions without previous declarations\n \n Wmissing-field-initializers\n-C ObjC C++ ObjC++ Var(warn_missing_field_initializers) Init(-1)\n+C ObjC C++ ObjC++ Var(warn_missing_field_initializers) Init(-1) Warning\n Warn about missing fields in struct initializers\n \n Wmissing-format-attribute\n-C ObjC C++ ObjC++ Var(warn_missing_format_attribute)\n+C ObjC C++ ObjC++ Var(warn_missing_format_attribute) Warning\n Warn about functions which might be candidates for format attributes\n \n Wmissing-include-dirs\n-C ObjC C++ ObjC++\n+C ObjC C++ ObjC++ Warning\n Warn about user-specified include directories that do not exist\n \n Wmissing-parameter-type\n-C ObjC Var(warn_missing_parameter_type) Init(-1)\n+C ObjC Var(warn_missing_parameter_type) Init(-1) Warning\n Warn about function parameters declared without a type specifier in K&R-style functions\n \n Wmissing-prototypes\n-C ObjC Var(warn_missing_prototypes)\n+C ObjC Var(warn_missing_prototypes) Warning\n Warn about global functions without prototypes\n \n Wmultichar\n-C ObjC C++ ObjC++\n+C ObjC C++ ObjC++ Warning\n Warn about use of multi-character character constants\n \n Wnested-externs\n-C ObjC Var(warn_nested_externs)\n+C ObjC Var(warn_nested_externs) Warning\n Warn about \\\"extern\\\" declarations not at file scope\n \n Wnon-template-friend\n-C++ ObjC++ Var(warn_nontemplate_friend) Init(1)\n+C++ ObjC++ Var(warn_nontemplate_friend) Init(1) Warning\n Warn when non-templatized friend functions are declared within a template\n \n Wnon-virtual-dtor\n-C++ ObjC++ Var(warn_nonvdtor)\n+C++ ObjC++ Var(warn_nonvdtor) Warning\n Warn about non-virtual destructors\n \n Wnonnull\n-C ObjC Var(warn_nonnull)\n+C ObjC Var(warn_nonnull) Warning\n Warn about NULL being passed to argument slots marked as requiring non-NULL\n \n Wnormalized=\n-C ObjC C++ ObjC++ Joined\n+C ObjC C++ ObjC++ Joined Warning\n -Wnormalized=<id|nfc|nfkc>\tWarn about non-normalised Unicode strings\n \n Wold-style-cast\n-C++ ObjC++ Var(warn_old_style_cast)\n+C++ ObjC++ Var(warn_old_style_cast) Warning\n Warn if a C-style cast is used in a program\n \n Wold-style-declaration\n-C ObjC Var(warn_old_style_declaration) Init(-1)\n+C ObjC Var(warn_old_style_declaration) Init(-1) Warning\n Warn for obsolescent usage in a declaration\n \n Wold-style-definition\n-C ObjC Var(warn_old_style_definition)\n+C ObjC Var(warn_old_style_definition) Warning\n Warn if an old-style parameter definition is used\n \n Woverlength-strings\n-C ObjC C++ ObjC++ Var(warn_overlength_strings) Init(-1)\n+C ObjC C++ ObjC++ Var(warn_overlength_strings) Init(-1) Warning\n Warn if a string is longer than the maximum portable length specified by the standard\n \n Woverloaded-virtual\n-C++ ObjC++ Var(warn_overloaded_virtual)\n+C++ ObjC++ Var(warn_overloaded_virtual) Warning\n Warn about overloaded virtual function names\n \n Woverride-init\n-C ObjC Var(warn_override_init) Init(-1)\n+C ObjC Var(warn_override_init) Init(-1) Warning\n Warn about overriding initializers without side effects\n \n Wparentheses\n-C ObjC C++ ObjC++ Var(warn_parentheses)\n+C ObjC C++ ObjC++ Var(warn_parentheses) Warning\n Warn about possibly missing parentheses\n \n Wpmf-conversions\n-C++ ObjC++ Var(warn_pmf2ptr) Init(1)\n+C++ ObjC++ Var(warn_pmf2ptr) Init(1) Warning\n Warn when converting the type of pointers to member functions\n \n Wpointer-arith\n-C ObjC C++ ObjC++ Var(warn_pointer_arith)\n+C ObjC C++ ObjC++ Var(warn_pointer_arith) Warning\n Warn about function pointer arithmetic\n \n Wpointer-to-int-cast\n-C ObjC Var(warn_pointer_to_int_cast) Init(1)\n+C ObjC Var(warn_pointer_to_int_cast) Init(1) Warning\n Warn when a pointer is cast to an integer of a different size\n \n Wpragmas\n-C ObjC C++ ObjC++ Var(warn_pragmas) Init(1)\n+C ObjC C++ ObjC++ Var(warn_pragmas) Init(1) Warning\n Warn about misuses of pragmas\n \n Wprotocol\n-ObjC ObjC++ Var(warn_protocol) Init(1)\n+ObjC ObjC++ Var(warn_protocol) Init(1) Warning\n Warn if inherited methods are unimplemented\n \n Wredundant-decls\n-C ObjC C++ ObjC++ Var(warn_redundant_decls)\n+C ObjC C++ ObjC++ Var(warn_redundant_decls) Warning\n Warn about multiple declarations of the same object\n \n Wreorder\n-C++ ObjC++ Var(warn_reorder)\n+C++ ObjC++ Var(warn_reorder) Warning\n Warn when the compiler reorders code\n \n Wreturn-type\n-C ObjC C++ ObjC++ Var(warn_return_type)\n+C ObjC C++ ObjC++ Var(warn_return_type) Warning\n Warn whenever a function's return type defaults to \\\"int\\\" (C), or about inconsistent return types (C++)\n \n Wselector\n-ObjC ObjC++ Var(warn_selector)\n+ObjC ObjC++ Var(warn_selector) Warning\n Warn if a selector has multiple methods\n \n Wsequence-point\n-C ObjC C++ ObjC++ Var(warn_sequence_point)\n+C ObjC C++ ObjC++ Var(warn_sequence_point) Warning\n Warn about possible violations of sequence point rules\n \n Wsign-compare\n-C ObjC C++ ObjC++ Var(warn_sign_compare) Init(-1)\n+C ObjC C++ ObjC++ Var(warn_sign_compare) Init(-1) Warning\n Warn about signed-unsigned comparisons\n \n Wsign-promo\n-C++ ObjC++ Var(warn_sign_promo)\n+C++ ObjC++ Var(warn_sign_promo) Warning\n Warn when overload promotes from unsigned to signed\n \n Wstrict-null-sentinel\n-C++ ObjC++\n+C++ ObjC++ Warning\n Warn about uncasted NULL used as sentinel\n \n Wstrict-prototypes\n-C ObjC Var(warn_strict_prototypes)\n+C ObjC Var(warn_strict_prototypes) Warning\n Warn about unprototyped function declarations\n \n Wstrict-selector-match\n-ObjC ObjC++ Var(warn_strict_selector_match)\n+ObjC ObjC++ Var(warn_strict_selector_match) Warning\n Warn if type signatures of candidate methods do not match exactly\n \n Wsynth\n-C++ ObjC++ Var(warn_synth)\n+C++ ObjC++ Var(warn_synth) Warning\n Warn when synthesis behavior differs from Cfront\n \n Wsystem-headers\n-C ObjC C++ ObjC++\n+C ObjC C++ ObjC++ Warning\n Do not suppress warnings from system headers\n \n Wtraditional\n-C ObjC Var(warn_traditional)\n+C ObjC Var(warn_traditional) Warning\n Warn about features not present in traditional C\n \n Wtraditional-conversion\n-C ObjC Var(warn_traditional_conversion)\n+C ObjC Var(warn_traditional_conversion) Warning\n Warn of prototypes causing type conversions different from what would happen in the absence of prototype\n \n Wtrigraphs\n-C ObjC C++ ObjC++\n+C ObjC C++ ObjC++ Warning\n Warn if trigraphs are encountered that might affect the meaning of the program\n \n Wundeclared-selector\n-ObjC ObjC++ Var(warn_undeclared_selector)\n+ObjC ObjC++ Var(warn_undeclared_selector) Warning\n Warn about @selector()s without previously declared methods\n \n Wundef\n-C ObjC C++ ObjC++\n+C ObjC C++ ObjC++ Warning\n Warn if an undefined macro is used in an #if directive\n \n Wunknown-pragmas\n-C ObjC C++ ObjC++\n+C ObjC C++ ObjC++ Warning\n Warn about unrecognized pragmas\n \n Wunused-macros\n-C ObjC C++ ObjC++\n+C ObjC C++ ObjC++ Warning\n Warn about macros defined in the main file that are not used\n \n Wvariadic-macros\n-C ObjC C++ ObjC++\n+C ObjC C++ ObjC++ Warning\n Do not warn about using variadic macros when -pedantic\n \n Wwrite-strings\n-C ObjC C++ ObjC++ Var(warn_write_strings)\n+C ObjC C++ ObjC++ Var(warn_write_strings) Warning\n In C++, nonzero means warn about deprecated conversion from string literals to `char *'.  In C, similar warning, except that the conversion is of course not deprecated by the ISO C standard.\n \n Wpointer-sign\n-C ObjC Var(warn_pointer_sign) Init(-1)\n+C ObjC Var(warn_pointer_sign) Init(-1) Warning\n Warn when a pointer differs in signedness in an assignment\n \n ansi\n@@ -554,7 +554,7 @@ fguiding-decls\n C++ ObjC++\n \n fhandle-exceptions\n-C++ ObjC++\n+C++ ObjC++ Optimization\n \n fhonor-std\n C++ ObjC++\n@@ -675,19 +675,19 @@ C++ ObjC++\n Enable automatic template instantiation\n \n frtti\n-C++ ObjC++\n+C++ ObjC++ Optimization\n Generate run time type descriptor information\n \n fshort-double\n-C ObjC C++ ObjC++\n+C ObjC C++ ObjC++ Optimization\n Use the same size for double as for float\n \n fshort-enums\n-C ObjC C++ ObjC++\n+C ObjC C++ ObjC++ Optimization\n Use the narrowest integer type possible for enumeration types\n \n fshort-wchar\n-C ObjC C++ ObjC++\n+C ObjC C++ ObjC++ Optimization\n Force the underlying type for \\\"wchar_t\\\" to be \\\"unsigned short\\\"\n \n fsigned-bitfields\n@@ -720,7 +720,7 @@ fthis-is-variable\n C++ ObjC++\n \n fthreadsafe-statics\n-C++ ObjC++\n+C++ ObjC++ Optimization\n -fno-threadsafe-statics\tDo not generate thread-safe code for initializing local statics\n \n funsigned-bitfields"}, {"sha": "dd3deb386a3a9d851ab81a978f93d4acab554d53", "filename": "gcc/common.opt", "status": "modified", "additions": 182, "deletions": 161, "changes": 343, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c662432e8cb909295011dc548cb238dd1586f702/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c662432e8cb909295011dc548cb238dd1586f702/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=c662432e8cb909295011dc548cb238dd1586f702", "patch": "@@ -27,12 +27,29 @@\n Common\n Display this information\n \n--param\n-Common Separate\n---param <param>=<value>\tSet parameter <param> to value.  See below for a complete list of parameters\n+-help=\n+Common Report Joined\n+--help=<class>\tDisplay descriptions of a specific class of options.  <class> is one or more of optimizers, target, warnings, undocumented, params\n \n -target-help\n Common\n+Alias for --help=target\n+\n+;; The following three entries are to work around the gcc driver\n+;; program's insatiable desire to turn options starting with a\n+;; double dash (--) into options starting with a dash f (-f).\n+fhelp\n+Common\n+\n+fhelp=\n+Common Joined\n+\n+ftarget-help\n+Common\n+\n+-param\n+Common Separate\n+--param <param>=<value>\tSet parameter <param> to value.  See below for a complete list of parameters\n \n -version\n Common\n@@ -54,31 +71,31 @@ Common RejectNegative\n This switch is deprecated; use -Wextra instead\n \n Waggregate-return\n-Common Var(warn_aggregate_return)\n+Common Var(warn_aggregate_return) Warning\n Warn about returning structures, unions or arrays\n \n Walways-true\n-Common Var(warn_always_true)\n+Common Var(warn_always_true) Warning\n Warn about comparisons that always evaluate to true\n \n Warray-bounds\n Common Var(warn_array_bounds)\n Warn if an array is accessed out of bounds\n \n Wattributes\n-Common Var(warn_attributes) Init(1)\n+Common Var(warn_attributes) Init(1) Warning\n Warn about inappropriate attribute usage\n \n Wcast-align\n-Common Var(warn_cast_align)\n+Common Var(warn_cast_align) Warning\n Warn about pointer casts which increase alignment\n \n Wdeprecated-declarations\n-Common Var(warn_deprecated_decl) Init(1)\n+Common Var(warn_deprecated_decl) Init(1) Warning\n Warn about uses of __attribute__((deprecated)) declarations\n \n Wdisabled-optimization\n-Common Var(warn_disabled_optimization)\n+Common Var(warn_disabled_optimization) Warning\n Warn when an optimization pass is disabled\n \n Werror\n@@ -90,111 +107,111 @@ Common Joined\n Treat specified warning as error\n \n Wextra\n-Common\n+Common Warning\n Print extra (possibly unwanted) warnings\n \n Wfatal-errors\n Common Var(flag_fatal_errors)\n Exit on the first error occurred\n \n Winline\n-Common Var(warn_inline)\n+Common Var(warn_inline) Warning\n Warn when an inlined function cannot be inlined\n \n Wlarger-than-\n-Common RejectNegative Joined UInteger\n+Common RejectNegative Joined UInteger Warning\n -Wlarger-than-<number>\tWarn if an object is larger than <number> bytes\n \n Wunsafe-loop-optimizations\n-Common Var(warn_unsafe_loop_optimizations)\n+Common Var(warn_unsafe_loop_optimizations) Warning\n Warn if the loop cannot be optimized due to nontrivial assumptions.\n \n Wmissing-noreturn\n-Common Var(warn_missing_noreturn)\n+Common Var(warn_missing_noreturn) Warning\n Warn about functions which might be candidates for __attribute__((noreturn))\n \n Woverflow\n-Common Var(warn_overflow) Init(1)\n+Common Var(warn_overflow) Init(1) Warning\n Warn about overflow in arithmetic expressions\n \n Wpacked\n-Common Var(warn_packed)\n+Common Var(warn_packed) Warning\n Warn when the packed attribute has no effect on struct layout\n \n Wpadded\n-Common Var(warn_padded)\n+Common Var(warn_padded) Warning\n Warn when padding is required to align structure members\n \n Wshadow\n-Common Var(warn_shadow)\n+Common Var(warn_shadow) Warning\n Warn when one local variable shadows another\n \n Wstack-protector\n-Common Var(warn_stack_protect)\n+Common Var(warn_stack_protect) Warning\n Warn when not issuing stack smashing protection for some reason\n \n Wstrict-aliasing\n-Common\n+Common Warning\n Warn about code which might break strict aliasing rules\n \n Wstrict-aliasing=\n-Common Joined UInteger\n+Common Joined UInteger Warning\n Warn about code which might break strict aliasing rules\n \n Wstring-literal-comparison\n-Common Var(warn_string_literal_comparison)\n+Common Var(warn_string_literal_comparison) Warning\n Warn about comparisons to constant string literals\n \n Wswitch\n-Common Var(warn_switch)\n+Common Var(warn_switch) Warning\n Warn about enumerated switches, with no default, missing a case\n \n Wswitch-default\n-Common Var(warn_switch_default)\n+Common Var(warn_switch_default) Warning\n Warn about enumerated switches missing a \\\"default:\\\" statement\n \n Wswitch-enum\n-Common Var(warn_switch_enum)\n+Common Var(warn_switch_enum) Warning\n Warn about all enumerated switches missing a specific case\n \n Wsystem-headers\n-Common Var(warn_system_headers)\n+Common Var(warn_system_headers) Warning\n Do not suppress warnings from system headers\n \n Wuninitialized\n-Common Var(warn_uninitialized)\n+Common Var(warn_uninitialized) Warning\n Warn about uninitialized automatic variables\n \n Wunreachable-code\n-Common Var(warn_notreached)\n+Common Var(warn_notreached) Warning\n Warn about code that will never be executed\n \n Wunused\n-Common\n+Common Warning\n Enable all -Wunused- warnings\n \n Wunused-function\n-Common Var(warn_unused_function)\n+Common Var(warn_unused_function) Warning\n Warn when a function is unused\n \n Wunused-label\n-Common Var(warn_unused_label)\n+Common Var(warn_unused_label) Warning\n Warn when a label is unused\n \n Wunused-parameter\n-Common Var(warn_unused_parameter)\n+Common Var(warn_unused_parameter) Warning\n Warn when a function parameter is unused\n \n Wunused-value\n-Common Var(warn_unused_value)\n+Common Var(warn_unused_value) Warning\n Warn when an expression value is unused\n \n Wunused-variable\n-Common Var(warn_unused_variable)\n+Common Var(warn_unused_variable) Warning\n Warn when a variable is unused\n \n Wvolatile-register-var\n-Common Var(warn_register_var)\n+Common Var(warn_register_var) Warning\n Warn when a register variable is declared volatile\n \n Wcoverage-mismatch\n@@ -244,21 +261,21 @@ falign-functions=\n Common RejectNegative Joined UInteger\n \n falign-jumps\n-Common Report Var(align_jumps,0)\n+Common Report Var(align_jumps,0) Optimization\n Align labels which are only reached by jumping\n \n falign-jumps=\n Common RejectNegative Joined UInteger\n \n falign-labels\n-Common Report Var(align_labels,0)\n+Common Report Var(align_labels,0) Optimization\n Align all labels\n \n falign-labels=\n Common RejectNegative Joined UInteger\n \n falign-loops\n-Common Report Var(align_loops)\n+Common Report Var(align_loops) Optimization\n Align the start of loops\n \n falign-loops=\n@@ -273,23 +290,23 @@ Common RejectNegative Joined UInteger\n ; 3 if pointer arguments may not alias anything.  True in Fortran.\n ;   Set by the front end.\n fargument-alias\n-Common Report Var(flag_argument_noalias,0)\n+Common Report Var(flag_argument_noalias,0) Optimization\n Specify that arguments may alias each other and globals\n \n fargument-noalias\n-Common Report Var(flag_argument_noalias,1) VarExists\n+Common Report Var(flag_argument_noalias,1) VarExists Optimization\n Assume arguments may alias globals but not each other\n \n fargument-noalias-global\n-Common Report Var(flag_argument_noalias,2) VarExists\n+Common Report Var(flag_argument_noalias,2) VarExists Optimization\n Assume arguments alias neither each other nor globals\n \n fargument-noalias-anything\n-Common Report Var(flag_argument_noalias,3) VarExists\n+Common Report Var(flag_argument_noalias,3) VarExists Optimization\n Assume arguments alias no other storage\n \n fasynchronous-unwind-tables\n-Common Report Var(flag_asynchronous_unwind_tables)\n+Common Report Var(flag_asynchronous_unwind_tables) Optimization\n Generate unwind tables that are exact at each instruction boundary\n \n ; -fcheck-bounds causes gcc to generate array bounds checks.\n@@ -301,23 +318,23 @@ Common Report Var(flag_bounds_check)\n Generate code to check bounds before indexing arrays\n \n fbranch-count-reg\n-Common Report Var(flag_branch_on_count_reg) Init(1)\n+Common Report Var(flag_branch_on_count_reg) Init(1) Optimization\n Replace add, compare, branch with branch on count register\n \n fbranch-probabilities\n-Common Report Var(flag_branch_probabilities)\n+Common Report Var(flag_branch_probabilities) Optimization\n Use profiling information for branch probabilities\n \n fbranch-target-load-optimize\n-Common Report Var(flag_branch_target_load_optimize)\n+Common Report Var(flag_branch_target_load_optimize) Optimization\n Perform branch target load optimization before prologue / epilogue threading\n \n fbranch-target-load-optimize2\n-Common Report Var(flag_branch_target_load_optimize2)\n+Common Report Var(flag_branch_target_load_optimize2) Optimization\n Perform branch target load optimization after prologue / epilogue threading\n \n fbtr-bb-exclusive\n-Common Report Var(flag_btr_bb_exclusive)\n+Common Report Var(flag_btr_bb_exclusive) Optimization\n Restrict target load migration not to re-use registers in any basic block\n \n fcall-saved-\n@@ -332,49 +349,49 @@ Common Joined RejectNegative\n ; be saved across function calls, if that produces overall better code.\n ; Optional now, so people can test it.\n fcaller-saves\n-Common Report Var(flag_caller_saves)\n+Common Report Var(flag_caller_saves) Optimization\n Save registers around function calls\n \n fcommon\n-Common Report Var(flag_no_common,0)\n+Common Report Var(flag_no_common,0) Optimization\n Do not put uninitialized globals in the common section\n \n fcprop-registers\n-Common Report Var(flag_cprop_registers)\n+Common Report Var(flag_cprop_registers) Optimization\n Perform a register copy-propagation optimization pass\n \n fcrossjumping\n-Common Report Var(flag_crossjumping)\n+Common Report Var(flag_crossjumping) Optimization\n Perform cross-jumping optimization\n \n fcse-follow-jumps\n-Common Report Var(flag_cse_follow_jumps)\n+Common Report Var(flag_cse_follow_jumps) Optimization\n When running CSE, follow jumps to their targets\n \n fcse-skip-blocks\n-Common Report Var(flag_cse_skip_blocks)\n+Common Report Var(flag_cse_skip_blocks) Optimization\n When running CSE, follow conditional jumps\n \n fcx-limited-range\n-Common Report Var(flag_cx_limited_range)\n+Common Report Var(flag_cx_limited_range) Optimization\n Omit range reduction step when performing complex division\n \n fdata-sections\n-Common Report Var(flag_data_sections)\n+Common Report Var(flag_data_sections) Optimization\n Place data items into their own section\n \n ; Nonzero for -fdefer-pop: don't pop args after each function call\n ; instead save them up to pop many calls' args with one insns.\n fdefer-pop\n-Common Report Var(flag_defer_pop)\n+Common Report Var(flag_defer_pop) Optimization\n Defer popping functions args from stack until later\n \n fdelayed-branch\n-Common Report Var(flag_delayed_branch)\n+Common Report Var(flag_delayed_branch) Optimization\n Attempt to fill delay slots of branch instructions\n \n fdelete-null-pointer-checks\n-Common Report Var(flag_delete_null_pointer_checks)\n+Common Report Var(flag_delete_null_pointer_checks) Optimization\n Delete useless null pointer checks\n \n fdiagnostics-show-location=\n@@ -398,7 +415,7 @@ Common Report Var(flag_dump_unnumbered) VarExists\n Suppress output of instruction numbers, line number notes and addresses in debugging dumps\n \n fearly-inlining\n-Common Report Var(flag_early_inlining) Init(1)\n+Common Report Var(flag_early_inlining) Init(1) Optimization\n Perform early inlining\n \n feliminate-dwarf2-dups\n@@ -418,35 +435,35 @@ Common Report Var(flag_emit_class_debug_always) Init(1)\n Do not suppress C++ class debug information.\n \n fexceptions\n-Common Report Var(flag_exceptions)\n+Common Report Var(flag_exceptions) Optimization\n Enable exception handling\n \n fexpensive-optimizations\n-Common Report Var(flag_expensive_optimizations)\n+Common Report Var(flag_expensive_optimizations) Optimization\n Perform a number of minor, expensive optimizations\n \n ffast-math\n Common\n \n ffinite-math-only\n-Common Report Var(flag_finite_math_only)\n+Common Report Var(flag_finite_math_only) Optimization\n Assume no NaNs or infinities are generated\n \n ffixed-\n Common Joined RejectNegative\n -ffixed-<register>\tMark <register> as being unavailable to the compiler\n \n ffloat-store\n-Common Report Var(flag_float_store)\n+Common Report Var(flag_float_store) Optimization\n Don't allocate floats and doubles in extended-precision registers\n \n ; Nonzero for -fforce-addr: load memory address into a register before\n ; reference to memory.  This makes better cse but slower compilation.\n fforce-addr\n-Common Report Var(flag_force_addr)\n+Common Report Var(flag_force_addr) Optimization\n Copy memory address constants into registers before use\n \n-fforward-propagate\n+fforward-propagate Optimization\n Common Report Var(flag_forward_propagate)\n Perform a forward propagation pass on RTL\n \n@@ -462,29 +479,29 @@ Common Report Var(flag_function_sections)\n Place each function into its own section\n \n fgcse\n-Common Report Var(flag_gcse)\n+Common Report Var(flag_gcse) Optimization\n Perform global common subexpression elimination\n \n fgcse-lm\n-Common Report Var(flag_gcse_lm) Init(1)\n+Common Report Var(flag_gcse_lm) Init(1) Optimization\n Perform enhanced load motion during global common subexpression elimination\n \n fgcse-sm\n-Common Report Var(flag_gcse_sm) Init(0)\n+Common Report Var(flag_gcse_sm) Init(0) Optimization\n Perform store motion after global common subexpression elimination\n \n fgcse-las\n-Common Report Var(flag_gcse_las) Init(0)\n+Common Report Var(flag_gcse_las) Init(0) Optimization\n Perform redundant load after store elimination in global common subexpression\n elimination\n \n fgcse-after-reload\n-Common Report Var(flag_gcse_after_reload)\n+Common Report Var(flag_gcse_after_reload) Optimization\n Perform global common subexpression elimination after register allocation\n has finished\n \n fguess-branch-probability\n-Common Report Var(flag_guess_branch_prob)\n+Common Report Var(flag_guess_branch_prob) Optimization\n Enable guessing of branch probabilities\n \n ; Nonzero means ignore `#ident' directives.  0 means handle them.\n@@ -496,11 +513,11 @@ Common Report Var(flag_no_ident,0)\n Process #ident directives\n \n fif-conversion\n-Common Report Var(flag_if_conversion)\n+Common Report Var(flag_if_conversion) Optimization\n Perform conversion of conditional jumps to branchless equivalents\n \n fif-conversion2\n-Common Report Var(flag_if_conversion2)\n+Common Report Var(flag_if_conversion2) Optimization\n Perform conversion of conditional jumps to conditional execution\n \n ; -finhibit-size-directive inhibits output of .size for ELF.\n@@ -521,11 +538,11 @@ Common Report Var(flag_no_inline,0) Init(2)\n Pay attention to the \\\"inline\\\" keyword\n \n finline-functions\n-Common Report Var(flag_inline_functions)\n+Common Report Var(flag_inline_functions) Optimization\n Integrate simple functions into their callers\n \n finline-functions-called-once\n-Common Report Var(flag_inline_functions_called_once) Init(1)\n+Common Report Var(flag_inline_functions_called_once) Init(1) Optimization\n Integrate functions called once into their callers\n \n finline-limit-\n@@ -540,31 +557,31 @@ Common Report Var(flag_instrument_function_entry_exit)\n Instrument function entry and exit with profiling calls\n \n fipa-cp\n-Common Report Var(flag_ipa_cp)\n+Common Report Var(flag_ipa_cp) Optimization\n Perform Interprocedural constant propagation\n \n fipa-pure-const\n-Common Report Var(flag_ipa_pure_const) Init(0)\n+Common Report Var(flag_ipa_pure_const) Init(0) Optimization\n Discover pure and const functions\n \n fipa-pta\n-Common Report Var(flag_ipa_pta) Init(0)\n+Common Report Var(flag_ipa_pta) Init(0) Optimization\n Perform interprocedural points-to analysis\n \n fipa-reference\n-Common Report Var(flag_ipa_reference) Init(0)\n+Common Report Var(flag_ipa_reference) Init(0) Optimization\n Discover readonly and non addressable static variables\n \n fipa-type-escape\n-Common Report Var(flag_ipa_type_escape) Init(0)\n+Common Report Var(flag_ipa_type_escape) Init(0) Optimization\n Type based escape and alias analysis\n \n fivopts\n-Common Report Var(flag_ivopts) Init(1)\n+Common Report Var(flag_ivopts) Init(1) Optimization\n Optimize induction variables on trees\n \n fjump-tables\n-Common Var(flag_jump_tables) Init(1)\n+Common Var(flag_jump_tables) Init(1) Optimization\n Use jump tables for sufficiently large switch statements\n \n fkeep-inline-functions\n@@ -595,23 +612,23 @@ Report on permanent memory allocation\n ; string constants and constants from constant pool, if 2 also constant\n ; variables.\n fmerge-all-constants\n-Common Report Var(flag_merge_constants,2) Init(1)\n+Common Report Var(flag_merge_constants,2) Init(1) Optimization\n Attempt to merge identical constants and constant variables\n \n fmerge-constants\n-Common Report Var(flag_merge_constants,1) VarExists\n+Common Report Var(flag_merge_constants,1) VarExists Optimization\n Attempt to merge identical constants across compilation units\n \n fmessage-length=\n Common RejectNegative Joined UInteger\n -fmessage-length=<number>\tLimit diagnostics to <number> characters per line.  0 suppresses line-wrapping\n \n fmodulo-sched\n-Common Report Var(flag_modulo_sched)\n+Common Report Var(flag_modulo_sched) Optimization\n Perform SMS based modulo scheduling before the first scheduling pass\n \n fmove-loop-invariants\n-Common Report Var(flag_move_loop_invariants) Init(1)\n+Common Report Var(flag_move_loop_invariants) Init(1) Optimization\n Move loop invariant computations out of loops\n \n fmudflap\n@@ -627,23 +644,23 @@ Common RejectNegative Report Var(flag_mudflap_ignore_reads)\n Ignore read operations when inserting mudflap instrumentation\n \n freschedule-modulo-scheduled-loops\n-Common Report Var(flag_resched_modulo_sched)\n+Common Report Var(flag_resched_modulo_sched) Optimization\n Enable/Disable the traditional scheduling in loops that already passed modulo scheduling\n \n fnon-call-exceptions\n-Common Report Var(flag_non_call_exceptions)\n+Common Report Var(flag_non_call_exceptions) Optimization\n Support synchronous non-call exceptions\n \n fomit-frame-pointer\n-Common Report Var(flag_omit_frame_pointer)\n+Common Report Var(flag_omit_frame_pointer) Optimization\n When possible do not generate stack frames\n \n foptimize-register-move\n-Common Report Var(flag_regmove)\n+Common Report Var(flag_regmove) Optimization\n Do the full register move optimization pass\n \n foptimize-sibling-calls\n-Common Report Var(flag_optimize_sibling_calls)\n+Common Report Var(flag_optimize_sibling_calls) Optimization\n Optimize sibling and tail recursive calls\n \n fpre-ipa-mem-report\n@@ -655,27 +672,27 @@ Common Report Var(post_ipa_mem_report)\n Report on memory allocation before interprocedural optimization\n \n fpack-struct\n-Common Report Var(flag_pack_struct)\n+Common Report Var(flag_pack_struct) Optimization\n Pack structure members together without holes\n \n fpack-struct=\n-Common RejectNegative Joined UInteger\n+Common RejectNegative Joined UInteger Optimization\n -fpack-struct=<number>\tSet initial maximum structure member alignment\n \n fpcc-struct-return\n Common Report Var(flag_pcc_struct_return,1) VarExists\n Return small aggregates in memory, not registers\n \n fpeel-loops\n-Common Report Var(flag_peel_loops)\n+Common Report Var(flag_peel_loops) Optimization\n Perform loop peeling\n \n fpeephole\n-Common Report Var(flag_no_peephole,0)\n+Common Report Var(flag_no_peephole,0) Optimization\n Enable machine specific peephole optimizations\n \n fpeephole2\n-Common Report Var(flag_peephole2)\n+Common Report Var(flag_peephole2) Optimization\n Enable an RTL peephole pass before sched2\n \n fPIC\n@@ -695,7 +712,7 @@ Common Report Var(flag_pie,1) VarExists\n Generate position-independent code for executables if possible (small mode)\n \n fprefetch-loop-arrays\n-Common Report Var(flag_prefetch_loop_arrays)\n+Common Report Var(flag_prefetch_loop_arrays) Optimization\n Generate prefetch instructions, if available, for arrays in loops\n \n fprofile\n@@ -736,81 +753,81 @@ Common Report Var(flag_record_gcc_switches)\n Record gcc command line switches in the object file.\n \n freg-struct-return\n-Common Report Var(flag_pcc_struct_return,0) VarExists\n+Common Report Var(flag_pcc_struct_return,0) VarExists Optimization\n Return small aggregates in registers\n \n fregmove\n-Common Report Var(flag_regmove)\n+Common Report Var(flag_regmove) Optimization\n Enables a register move optimization\n \n frename-registers\n-Common Report Var(flag_rename_registers) Init(2)\n+Common Report Var(flag_rename_registers) Init(2) Optimization\n Perform a register renaming optimization pass\n \n freorder-blocks\n-Common Report Var(flag_reorder_blocks)\n+Common Report Var(flag_reorder_blocks) Optimization\n Reorder basic blocks to improve code placement\n \n freorder-blocks-and-partition\n-Common Report Var(flag_reorder_blocks_and_partition)\n+Common Report Var(flag_reorder_blocks_and_partition) Optimization\n Reorder basic blocks and partition into hot and cold sections\n \n freorder-functions\n-Common Report Var(flag_reorder_functions)\n+Common Report Var(flag_reorder_functions) Optimization\n Reorder functions to improve code placement\n \n frerun-cse-after-loop\n-Common Report Var(flag_rerun_cse_after_loop) Init(2)\n+Common Report Var(flag_rerun_cse_after_loop) Init(2) Optimization\n Add a common subexpression elimination pass after loop optimizations\n \n frerun-loop-opt\n Common\n Does nothing.  Preserved for backward compatibility.\n \n frounding-math\n-Common Report Var(flag_rounding_math)\n+Common Report Var(flag_rounding_math) Optimization\n Disable optimizations that assume default FP rounding behavior\n \n fsched-interblock\n-Common Report Var(flag_schedule_interblock) Init(1)\n+Common Report Var(flag_schedule_interblock) Init(1) Optimization\n Enable scheduling across basic blocks\n \n fsched-spec\n-Common Report Var(flag_schedule_speculative) Init(1)\n+Common Report Var(flag_schedule_speculative) Init(1) Optimization\n Allow speculative motion of non-loads\n \n fsched-spec-load\n-Common Report Var(flag_schedule_speculative_load)\n+Common Report Var(flag_schedule_speculative_load) Optimization\n Allow speculative motion of some loads\n \n fsched-spec-load-dangerous\n-Common Report Var(flag_schedule_speculative_load_dangerous)\n+Common Report Var(flag_schedule_speculative_load_dangerous) Optimization\n Allow speculative motion of more loads\n \n fsched-verbose=\n Common RejectNegative Joined\n -fsched-verbose=<number>\tSet the verbosity level of the scheduler\n \n fsched2-use-superblocks\n-Common Report Var(flag_sched2_use_superblocks)\n+Common Report Var(flag_sched2_use_superblocks) Optimization\n If scheduling post reload, do superblock scheduling\n \n fsched2-use-traces\n-Common Report Var(flag_sched2_use_traces)\n+Common Report Var(flag_sched2_use_traces) Optimization\n If scheduling post reload, do trace scheduling\n \n fschedule-insns\n-Common Report Var(flag_schedule_insns)\n+Common Report Var(flag_schedule_insns) Optimization\n Reschedule instructions before register allocation\n \n fschedule-insns2\n-Common Report Var(flag_schedule_insns_after_reload)\n+Common Report Var(flag_schedule_insns_after_reload) Optimization\n Reschedule instructions after register allocation\n \n ; sched_stalled_insns means that insns can be moved prematurely from the queue\n ; of stalled insns into the ready list.\n fsched-stalled-insns\n-Common Report Var(flag_sched_stalled_insns)\n+Common Report Var(flag_sched_stalled_insns) Optimization\n Allow premature scheduling of queued insns\n \n fsched-stalled-insns=\n@@ -822,19 +839,19 @@ Common RejectNegative Joined UInteger\n ; premature removal from the queue of stalled insns into the ready list (has\n ; an effect only if the flag 'sched_stalled_insns' is set).\n fsched-stalled-insns-dep\n-Common Report Var(flag_sched_stalled_insns_dep,1) Init(1)\n+Common Report Var(flag_sched_stalled_insns_dep,1) Init(1) Optimization\n Set dependence distance checking in premature scheduling of queued insns\n \n fsched-stalled-insns-dep=\n Common RejectNegative Joined UInteger\n -fsched-stalled-insns-dep=<number>\tSet dependence distance checking in premature scheduling of queued insns\n \n fsection-anchors\n-Common Report Var(flag_section_anchors)\n+Common Report Var(flag_section_anchors) Optimization\n Access data in the same section from shared anchor points\n \n frtl-abstract-sequences\n-Common Report Var(flag_rtl_seqabstr)\n+Common Report Var(flag_rtl_seqabstr) Optimization\n Perform sequence abstraction optimization on RTL\n \n fsee\n@@ -846,27 +863,27 @@ Common C ObjC C++ ObjC++ Report Var(flag_show_column) Init(1)\n Show column numbers in diagnostics, when available.  Default on\n \n fsignaling-nans\n-Common Report Var(flag_signaling_nans)\n+Common Report Var(flag_signaling_nans) Optimization\n Disable optimizations observable by IEEE signaling NaNs\n \n fsigned-zeros\n Common Report Var(flag_signed_zeros) Init(1)\n Disable floating point optimizations that ignore the IEEE signedness of zero\n \n fsingle-precision-constant\n-Common Report Var(flag_single_precision_constant)\n+Common Report Var(flag_single_precision_constant) Optimization\n Convert floating point constants to single precision constants\n \n fsplit-ivs-in-unroller\n-Common Report Var(flag_split_ivs_in_unroller) Init(1)\n+Common Report Var(flag_split_ivs_in_unroller) Init(1) Optimization\n Split lifetimes of induction variables when loops are unrolled\n \n fsplit-wide-types\n Common Report Var(flag_split_wide_types)\n Split wide types into independent registers\n \n fvariable-expansion-in-unroller\n-Common Report Var(flag_variable_expansion_in_unroller)\n+Common Report Var(flag_variable_expansion_in_unroller) Optimization\n Apply variable expansion when loops are unrolled\n \n ; Emit code to probe the stack, to help detect stack overflow; also\n@@ -903,7 +920,7 @@ Does nothing.  Preserved for backward compatibility.\n ; types do not alias expressions of certain other types.  Only used\n ; if alias analysis (in general) is enabled.\n fstrict-aliasing\n-Common Report Var(flag_strict_aliasing)\n+Common Report Var(flag_strict_aliasing) Optimization\n Assume strict aliasing rules apply\n \n fstrict-overflow\n@@ -919,7 +936,7 @@ Common Report Var(flag_test_coverage)\n Create data files needed by \\\"gcov\\\"\n \n fthread-jumps\n-Common Report Var(flag_thread_jumps)\n+Common Report Var(flag_thread_jumps) Optimization\n Perform jump threading optimizations\n \n ftime-report\n@@ -931,7 +948,7 @@ Common Joined RejectNegative\n -ftls-model=[global-dynamic|local-dynamic|initial-exec|local-exec]\tSet the default thread-local storage code generation model\n \n ftoplevel-reorder\n-Common Report Var(flag_toplevel_reorder) Init(1)\n+Common Report Var(flag_toplevel_reorder) Init(1) Optimization\n Reorder top level functions, variables, and asms\n \n ftracer\n@@ -942,138 +959,142 @@ Perform superblock formation via tail duplication\n ; (user-visible) trap.  This is the case, for example, in nonstop\n ; IEEE 754 arithmetic.\n ftrapping-math\n-Common Report Var(flag_trapping_math) Init(1)\n+Common Report Var(flag_trapping_math) Init(1) Optimization\n Assume floating-point operations can trap\n \n ftrapv\n-Common Report Var(flag_trapv)\n+Common Report Var(flag_trapv) Optimization\n Trap for signed overflow in addition, subtraction and multiplication\n \n ftree-ccp\n-Common Report Var(flag_tree_ccp)\n+Common Report Var(flag_tree_ccp) Optimization\n Enable SSA-CCP optimization on trees\n \n ftree-store-ccp\n-Common Report Var(flag_tree_store_ccp)\n+Common Report Var(flag_tree_store_ccp) Optimization\n Enable SSA-CCP optimization for stores and loads\n \n ftree-ch\n-Common Report Var(flag_tree_ch)\n+Common Report Var(flag_tree_ch) Optimization\n Enable loop header copying on trees\n \n ftree-copyrename\n-Common Report Var(flag_tree_copyrename)\n+Common Report Var(flag_tree_copyrename) Optimization\n Replace SSA temporaries with better names in copies\n \n ftree-copy-prop\n-Common Report Var(flag_tree_copy_prop)\n+Common Report Var(flag_tree_copy_prop) Optimization\n Enable copy propagation on trees\n \n ftree-store-copy-prop\n-Common Report Var(flag_tree_store_copy_prop)\n+Common Report Var(flag_tree_store_copy_prop) Optimization\n Enable copy propagation for stores and loads\n \n ftree-dce\n-Common Report Var(flag_tree_dce)\n+Common Report Var(flag_tree_dce) Optimization\n Enable SSA dead code elimination optimization on trees\n \n ftree-dominator-opts\n-Common Report Var(flag_tree_dom)\n+Common Report Var(flag_tree_dom) Optimization\n Enable dominator optimizations\n \n ftree-dse\n-Common Report Var(flag_tree_dse)\n+Common Report Var(flag_tree_dse) Optimization\n Enable dead store elimination\n \n ftree-fre\n-Common Report Var(flag_tree_fre)\n+Common Report Var(flag_tree_fre) Optimization\n Enable Full Redundancy Elimination (FRE) on trees\n \n ftree-loop-im\n-Common Report Var(flag_tree_loop_im) Init(1)\n+Common Report Var(flag_tree_loop_im) Init(1) Optimization\n Enable loop invariant motion on trees\n \n ftree-loop-linear\n-Common Report Var(flag_tree_loop_linear)\n+Common Report Var(flag_tree_loop_linear) Optimization\n Enable linear loop transforms on trees\n \n ftree-loop-ivcanon\n-Common Report Var(flag_tree_loop_ivcanon) Init(1)\n+Common Report Var(flag_tree_loop_ivcanon) Init(1) Optimization\n Create canonical induction variables in loops\n \n ftree-loop-optimize\n-Common Report Var(flag_tree_loop_optimize) Init(1)\n+Common Report Var(flag_tree_loop_optimize) Init(1) Optimization\n Enable loop optimizations on tree level\n \n ftree-pre\n-Common Report Var(flag_tree_pre)\n+Common Report Var(flag_tree_pre) Optimization\n Enable SSA-PRE optimization on trees\n \n ftree-salias\n-Common Report Var(flag_tree_salias)\n+Common Report Var(flag_tree_salias) Optimization\n Perform structural alias analysis\n \n ftree-sink\n-Common Report Var(flag_tree_sink)\n+Common Report Var(flag_tree_sink) Optimization\n Enable SSA code sinking on trees\n \n ftree-sra\n-Common Report Var(flag_tree_sra)\n+Common Report Var(flag_tree_sra) Optimization\n Perform scalar replacement of aggregates\n \n ftree-ter\n-Common Report Var(flag_tree_ter)\n+Common Report Var(flag_tree_ter) Optimization\n Replace temporary expressions in the SSA->normal pass\n \n+ftree-lrs\n+Common Report Var(flag_tree_live_range_split) Optimization\n+Perform live range splitting during the SSA->normal pass\n+\n ftree-vrp\n-Common Report Var(flag_tree_vrp) Init(0)\n+Common Report Var(flag_tree_vrp) Init(0) Optimization\n Perform Value Range Propagation on trees\n \n funit-at-a-time\n-Common Report Var(flag_unit_at_a_time)\n+Common Report Var(flag_unit_at_a_time) Optimization\n Compile whole compilation unit at a time\n \n funroll-loops\n-Common Report Var(flag_unroll_loops)\n+Common Report Var(flag_unroll_loops) Optimization\n Perform loop unrolling when iteration count is known\n \n funroll-all-loops\n-Common Report Var(flag_unroll_all_loops)\n+Common Report Var(flag_unroll_all_loops) Optimization\n Perform loop unrolling for all loops\n \n ; Nonzero means that loop optimizer may assume that the induction variables\n ; that control loops do not overflow and that the loops with nontrivial\n ; exit condition are not infinite\n funsafe-loop-optimizations\n-Common Report Var(flag_unsafe_loop_optimizations)\n+Common Report Var(flag_unsafe_loop_optimizations) Optimization\n Allow loop optimizations to assume that the loops behave in normal way\n \n ; Nonzero means that unsafe floating-point math optimizations are allowed\n ; for the sake of speed.  IEEE compliance is not guaranteed, and operations\n ; are allowed to assume that their arguments and results are \"normal\"\n ; (e.g., nonnegative for SQRT).\n funsafe-math-optimizations\n-Common Report Var(flag_unsafe_math_optimizations)\n+Common Report Var(flag_unsafe_math_optimizations) Optimization\n Allow math optimizations that may violate IEEE or ISO standards\n \n funswitch-loops\n-Common Report Var(flag_unswitch_loops)\n+Common Report Var(flag_unswitch_loops) Optimization\n Perform loop unswitching\n \n funwind-tables\n-Common Report Var(flag_unwind_tables)\n+Common Report Var(flag_unwind_tables) Optimization\n Just generate unwind tables for exception handling\n \n fvar-tracking\n-Common Report Var(flag_var_tracking) VarExists\n+Common Report Var(flag_var_tracking) VarExists Optimization\n Perform variable tracking\n \n ftree-vectorize\n-Common Report Var(flag_tree_vectorize)\n+Common Report Var(flag_tree_vectorize) Optimization\n Enable loop vectorization on trees\n \n ftree-vect-loop-version\n-Common Report Var(flag_tree_vect_loop_version) Init(1)\n+Common Report Var(flag_tree_vect_loop_version) Init(1) Optimization\n Enable loop versioning when doing loop vectorization on trees\n \n ftree-vectorizer-verbose=\n@@ -1100,19 +1121,19 @@ Common Joined RejectNegative\n \n \n fvpt\n-Common Report Var(flag_value_profile_transformations)\n+Common Report Var(flag_value_profile_transformations) Optimization\n Use expression value profiles in optimizations\n \n fweb\n-Common Report Var(flag_web) Init(2)\n+Common Report Var(flag_web) Init(2) Optimization\n Construct webs and split unrelated uses of single variable\n \n fwhole-program\n-Common Report Var(flag_whole_program) Init(0)\n+Common Report Var(flag_whole_program) Init(0) Optimization\n Perform whole program optimizations\n \n fwrapv\n-Common Report Var(flag_wrapv)\n+Common Report Var(flag_wrapv) Optimization\n Assume signed arithmetic overflow wraps around\n \n fzero-initialized-in-bss"}, {"sha": "8274d74ef0a6742e0a18335c89ea7554afe592a2", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 116, "deletions": 7, "changes": 123, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c662432e8cb909295011dc548cb238dd1586f702/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c662432e8cb909295011dc548cb238dd1586f702/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=c662432e8cb909295011dc548cb238dd1586f702", "patch": "@@ -160,8 +160,9 @@ in the following sections.\n @table @emph\n @item Overall Options\n @xref{Overall Options,,Options Controlling the Kind of Output}.\n-@gccoptlist{-c  -S  -E  -o @var{file}  -combine -pipe  -pass-exit-codes  @gol\n--x @var{language}  -v  -###  --help  --target-help  --version @@@var{file}}\n+@gccoptlist{-c  -S  -E  -o @var{file}  -combine  -pipe  -pass-exit-codes  @gol\n+-x @var{language}  -v  -###  --help@r{[}=@var{class}@r{]}  --target-help  @gol \n+--version @@@var{file}}\n \n @item C Language Options\n @xref{C Dialect Options,,Options Controlling C Dialect}.\n@@ -1078,15 +1079,123 @@ Print (on the standard output) a description of the command line options\n understood by @command{gcc}.  If the @option{-v} option is also specified\n then @option{--help} will also be passed on to the various processes\n invoked by @command{gcc}, so that they can display the command line options\n-they accept.  If the @option{-Wextra} option is also specified then command\n-line options which have no documentation associated with them will also\n-be displayed.\n+they accept.  If the @option{-Wextra} option has also been specified\n+(prior to the @option{--help} option), then command line options which\n+have no documentation associated with them will also be displayed.\n \n @item --target-help\n @opindex target-help\n-Print (on the standard output) a description of target specific command\n+Print (on the standard output) a description of target-specific command\n line options for each tool.\n \n+@item --help=@var{class}@r{[},@var{qualifier}@r{]}\n+Print (on the standard output) a description of the command line\n+options understood by the compiler that fit into a specific class.\n+The class can be one of @var{optimizers}, @var{warnings}, @var{target}\n+or @var{params}:\n+\n+@table @gcctabopt\n+@item @var{optimizers}\n+This will display all of the optimization options supported by the\n+compiler.\n+\n+@item @var{warnings}\n+This will display all of the options controlling warning messages\n+produced by the compiler.\n+\n+@item @var{target}\n+This will display target-specific options.  Unlike the\n+@option{--target-help} option however, target-specific options of the\n+linker and assembler will not be displayed.  This is because those\n+tools do not currently support the extended @option{--help=} syntax.\n+\n+@item @var{params}\n+This will display the values recognized by the @option{--param}\n+option.\n+@end table\n+\n+It is possible to further refine the output of the @option{--help=}\n+option by adding a comma separated list of qualifiers after the\n+class.  These can be any from the following list:\n+\n+@table @gcctabopt\n+@item undocumented\n+Display only those options which are undocumented.\n+\n+@item joined\n+Display options which take an argument that appears after an equal\n+sign in the same continuous piece of text, such as:\n+@samp{--help=target}.\n+\n+@item separate\n+Display options which take an argument that appears as a separate word\n+following the original option, such as: @samp{-o output-file}.\n+@end table\n+\n+Thus for example to display all the undocumented target-specific\n+switches supported by the compiler the following can be used:\n+\n+@smallexample\n+--help=target,undocumented\n+@end smallexample\n+\n+The sense of a qualifier can be inverted by prefixing it with the\n+@var{^} character, so for example to display all binary warning\n+options (i.e. ones that are either on or off and that do not take an\n+argument), which have a description the following can be used:\n+\n+@smallexample\n+--help=warnings,^joined,^undocumented\n+@end smallexample\n+\n+A class can also be used as a qualifier, although this usually\n+restricts the output by so much that there is nothing to display.  One\n+case where it does work however is when one of the classes is\n+@var{target}.  So for example to display all the target-specific\n+optimization options the following can be used:\n+\n+@smallexample\n+--help=target,optimizers\n+@end smallexample\n+\n+The @option{--help=} option can be repeated on the command line.  Each\n+successive use will display its requested class of options, skipping\n+those that have already been displayed.\n+\n+If the @option{-Q} option appears on the command line before the\n+@option{--help=} option, then the descriptive text displayed by\n+@option{--help=} is changed.  Instead of describing the displayed\n+options, an indication is given as to whether the option is enabled,\n+disabled or set to a specific value (assuming that the compiler\n+knows this at the point where the @option{--help=} option is used).\n+\n+Here is a truncated example from the ARM port of @command{gcc}:\n+\n+@smallexample\n+  % gcc -Q -mabi=2 --help=target -c\n+  The following options are target specific:\n+  -mabi=                                2\n+  -mabort-on-noreturn                   [disabled]\n+  -mapcs                                [disabled]\n+@end smallexample\n+\n+The output is sensitive to the effects of previous command line\n+options, so for example it is possible to find out which optimizations\n+are enabled at @option{-O2} by using:\n+\n+@smallexample\n+-O2 --help=optimizers\n+@end smallexample\n+\n+Alternatively you can discover which binary optimizations are enabled\n+by @option{-O3} by using:\n+\n+@smallexample\n+gcc -c -Q -O3 --help=optimizers > /tmp/O3-opts\n+gcc -c -Q -O2 --help=optimizers > /tmp/O2-opts\n+diff /tmp/O2-opts /tmp/O3-opts | grep enabled\n+@end smallexample\n+\n @item --version\n @opindex version\n Display the version number and copyrights of the invoked GCC@.\n@@ -2754,7 +2863,7 @@ if a variable may be clobbered by a @code{setjmp} call.\n \n These warnings are possible only in optimizing compilation,\n because they require data flow information that is computed only\n-when optimizing.  If you do not specify @option{-O}, you will not get \n+when optimizing.  If you do not specify @option{-O}, you will not get\n these warnings. Instead, GCC will issue a warning about @option{-Wuninitialized}\n requiring @option{-O}.\n "}, {"sha": "86a56529ba805bfa2a25e9e6c409264e7a897116", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c662432e8cb909295011dc548cb238dd1586f702/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c662432e8cb909295011dc548cb238dd1586f702/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=c662432e8cb909295011dc548cb238dd1586f702", "patch": "@@ -1,3 +1,7 @@\n+2007-02-12  Nick Clifton  <nickc@redhat.com>\n+\n+\t* lang.opt:  Add Warning attribute to warning options.\n+\n 2007-02-11  Daniel Franke  <franke.daniel@gmail.com>\n \n \t* intrinsic.texi (HOSTNM): Fix typographical error in syntax."}, {"sha": "b1d5f2288a762edf99a23e5a9560bd854e52a14c", "filename": "gcc/fortran/lang.opt", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c662432e8cb909295011dc548cb238dd1586f702/gcc%2Ffortran%2Flang.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c662432e8cb909295011dc548cb238dd1586f702/gcc%2Ffortran%2Flang.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Flang.opt?ref=c662432e8cb909295011dc548cb238dd1586f702", "patch": "@@ -1,5 +1,5 @@\n ; Options for the Fortran 95 front end.\n-; Copyright (C) 2003, 2004, 2005, 2006 Free Software Foundation, Inc.\n+; Copyright (C) 2003, 2004, 2005, 2006, 2007 Free Software Foundation, Inc.\n ;\n ; This file is part of GCC.\n ;\n@@ -38,43 +38,43 @@ Fortran\n ; Documented in C\n \n Waliasing\n-Fortran\n+Fortran Warning\n Warn about possible aliasing of dummy arguments\n \n Wampersand\n-Fortran\n+Fortran Warning\n Warn about missing ampersand in continued character constants\n \n Wcharacter-truncation\n-Fortran\n+Fortran Warning\n Warn about truncated character expressions\n \n Wconversion\n-Fortran\n+Fortran Warning\n Warn about implicit conversion\n \n Wimplicit-interface\n-Fortran\n+Fortran Warning\n Warn about calls with implicit interface\n \n Wline-truncation\n-Fortran\n+Fortran Warning\n Warn about truncated source lines\n \n Wnonstd-intrinsics\n-Fortran\n+Fortran Warning\n Warn about usage of non-standard intrinsics\n \n Wsurprising\n-Fortran\n+Fortran Warning\n Warn about \\\"suspicious\\\" constructs\n \n Wtabs\n-Fortran\n+Fortran Warning\n Permit nonconforming uses of the tab character\n \n Wunderflow\n-Fortran\n+Fortran Warning\n Warn about underflow of numerical constant expressions\n \n fall-intrinsics"}, {"sha": "14e4ceea71f4fb396ec7fc99ae4ee16558b62fa6", "filename": "gcc/gcc.c", "status": "modified", "additions": 21, "deletions": 43, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c662432e8cb909295011dc548cb238dd1586f702/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c662432e8cb909295011dc548cb238dd1586f702/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=c662432e8cb909295011dc548cb238dd1586f702", "patch": "@@ -1,7 +1,7 @@\n /* Compiler driver program that can handle many languages.\n    Copyright (C) 1987, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006 Free Software Foundation,\n-   Inc.\n+   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007\n+   Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -179,9 +179,9 @@ static int verbose_flag;\n    shell scripts to capture the driver-generated command line.  */\n static int verbose_only_flag;\n \n-/* Flag indicating to print target specific command line options.  */\n+/* Flag indicating how to print command line options of sub-processes.  */\n \n-static int target_help_flag;\n+static int print_subprocess_help;\n \n /* Flag indicating whether we should report subprocess execution times\n    (if this is supported by the system - see pexecute.c).  */\n@@ -805,6 +805,7 @@ static const char *cc1_options =\n  %{v:-version} %{pg:-p} %{p} %{f*} %{undef}\\\n  %{Qn:-fno-ident} %{--help:--help}\\\n  %{--target-help:--target-help}\\\n+ %{--help=*:--help=%(VALUE)}\\\n  %{!fsyntax-only:%{S:%W{o*}%{!o*:-o %b.s}}}\\\n  %{fsyntax-only:-o %j} %{-param*}\\\n  %{fmudflap|fmudflapth:-fno-builtin -fno-merge-constants}\\\n@@ -1492,7 +1493,7 @@ static const char *const standard_exec_prefix_2 = \"/usr/lib/gcc/\";\n static const char *md_exec_prefix = MD_EXEC_PREFIX;\n static const char *md_startfile_prefix = MD_STARTFILE_PREFIX;\n static const char *md_startfile_prefix_1 = MD_STARTFILE_PREFIX_1;\n-static const char *const standard_startfile_prefix_1 \n+static const char *const standard_startfile_prefix_1\n   = STANDARD_STARTFILE_PREFIX_1;\n static const char *const standard_startfile_prefix_2\n   = STANDARD_STARTFILE_PREFIX_2;\n@@ -3174,6 +3175,8 @@ display_help (void)\n   fputs (_(\"  -pass-exit-codes         Exit with highest error code from a phase\\n\"), stdout);\n   fputs (_(\"  --help                   Display this information\\n\"), stdout);\n   fputs (_(\"  --target-help            Display target specific command line options\\n\"), stdout);\n+  fputs (_(\"  --help={target|optimizers|warnings|undocumented|params}[,{[^]joined|[^]separate}]\\n\"), stdout);\n+  fputs (_(\"                           Display specific types of command line options\\n\"), stdout);\n   if (! verbose_flag)\n     fputs (_(\"  (Use '-v --help' to display command line options of sub-processes)\\n\"), stdout);\n   fputs (_(\"  -dumpspecs               Display all of the built in spec strings\\n\"), stdout);\n@@ -3589,10 +3592,19 @@ warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\\n\\n\"\n \t  add_assembler_option (\"--help\", 6);\n \t  add_linker_option (\"--help\", 6);\n \t}\n+      else if (strncmp (argv[i], \"-fhelp=\", 7) == 0)\n+\t{\n+\t  /* translate_options () has turned --help into -fhelp.  */\n+\t  print_subprocess_help = 2;\n+\n+\t  /* We will be passing a dummy file on to the sub-processes.  */\n+\t  n_infiles++;\n+\t  n_switches++;\n+\t}\n       else if (strcmp (argv[i], \"-ftarget-help\") == 0)\n \t{\n \t  /* translate_options() has turned --target-help into -ftarget-help.  */\n-\t  target_help_flag = 1;\n+\t  print_subprocess_help = 1;\n \n \t  /* We will be passing a dummy file on to the sub-processes.  */\n \t  n_infiles++;\n@@ -4074,10 +4086,6 @@ warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\\n\\n\"\n \t;\n       else if (! strcmp (argv[i], \"-print-multi-os-directory\"))\n \t;\n-      else if (! strcmp (argv[i], \"-ftarget-help\"))\n-\t;\n-      else if (! strcmp (argv[i], \"-fhelp\"))\n-\t;\n       else if (! strncmp (argv[i], \"--sysroot=\", strlen (\"--sysroot=\")))\n \t{\n \t  target_system_root = argv[i] + strlen (\"--sysroot=\");\n@@ -4243,34 +4251,14 @@ warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\\n\\n\"\n     error (\"warning: '-x %s' after last input file has no effect\", spec_lang);\n \n   /* Ensure we only invoke each subprocess once.  */\n-  if (target_help_flag || print_help_list)\n+  if (print_subprocess_help || print_help_list)\n     {\n       n_infiles = 1;\n \n-      /* Create a dummy input file, so that we can pass --target-help on to\n-\t the various sub-processes.  */\n+      /* Create a dummy input file, so that we can pass\n+\t the help option on to the various sub-processes.  */\n       infiles[0].language = \"c\";\n       infiles[0].name   = \"help-dummy\";\n-\n-      if (target_help_flag)\n-\t{\n-\t  switches[n_switches].part1     = \"--target-help\";\n-\t  switches[n_switches].args      = 0;\n-\t  switches[n_switches].live_cond = SWITCH_OK;\n-\t  switches[n_switches].validated = 0;\n-\n-\t  n_switches++;\n-\t}\n-\n-      if (print_help_list)\n-\t{\n-\t  switches[n_switches].part1     = \"--help\";\n-\t  switches[n_switches].args      = 0;\n-\t  switches[n_switches].live_cond = SWITCH_OK;\n-\t  switches[n_switches].validated = 0;\n-\n-\t  n_switches++;\n-\t}\n     }\n \n   switches[n_switches].part1 = 0;\n@@ -6421,16 +6409,6 @@ main (int argc, char **argv)\n       return (0);\n     }\n \n-  if (target_help_flag)\n-   {\n-      /* Print if any target specific options.  */\n-\n-      /* We do not exit here. Instead we have created a fake input file\n-         called 'target-dummy' which needs to be compiled, and we pass this\n-         on to the various sub-processes, along with the --target-help\n-         switch.  */\n-    }\n-\n   if (print_help_list)\n     {\n       display_help ();"}, {"sha": "87bce434ce6d67050db62dab7fea76854e022cd0", "filename": "gcc/opt-functions.awk", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c662432e8cb909295011dc548cb238dd1586f702/gcc%2Fopt-functions.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c662432e8cb909295011dc548cb238dd1586f702/gcc%2Fopt-functions.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopt-functions.awk?ref=c662432e8cb909295011dc548cb238dd1586f702", "patch": "@@ -1,4 +1,4 @@\n-#  Copyright (C) 2003,2004 Free Software Foundation, Inc.\n+#  Copyright (C) 2003, 2004, 2007 Free Software Foundation, Inc.\n #  Contributed by Kelley Cook, June 2004.\n #  Original code from Neil Booth, May 2003.\n #\n@@ -77,6 +77,8 @@ function switch_flags (flags)\n \t  test_flag(\"RejectNegative\", flags, \" | CL_REJECT_NEGATIVE\") \\\n \t  test_flag(\"UInteger\", flags, \" | CL_UINTEGER\") \\\n \t  test_flag(\"Undocumented\", flags,  \" | CL_UNDOCUMENTED\") \\\n+\t  test_flag(\"Warning\", flags,  \" | CL_WARNING\") \\\n+\t  test_flag(\"Optimization\", flags,  \" | CL_OPTIMIZATION\") \\\n \t  test_flag(\"Report\", flags, \" | CL_REPORT\")\n \tsub( \"^0 \\\\| \", \"\", result )\n \treturn result"}, {"sha": "35b3d3550892294fb7787c09d06a87b58e6a35a5", "filename": "gcc/optc-gen.awk", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c662432e8cb909295011dc548cb238dd1586f702/gcc%2Foptc-gen.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c662432e8cb909295011dc548cb238dd1586f702/gcc%2Foptc-gen.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptc-gen.awk?ref=c662432e8cb909295011dc548cb238dd1586f702", "patch": "@@ -1,4 +1,4 @@\n-#  Copyright (C) 2003,2004 Free Software Foundation, Inc.\n+#  Copyright (C) 2003, 2004, 2007 Free Software Foundation, Inc.\n #  Contributed by Kelley Cook, June 2004.\n #  Original code from Neil Booth, May 2003.\n #\n@@ -119,6 +119,7 @@ for (i = 0; i < n_langs; i++) {\n \n print \"  0\\n};\\n\"\n print \"const unsigned int cl_options_count = N_OPTS;\\n\"\n+print \"const unsigned int cl_lang_count = \" n_langs \";\\n\"\n \n print \"const struct cl_option cl_options[] =\\n{\"\n "}, {"sha": "daa9c9eb65c44672cbd38b54969cfc8bbdb86990", "filename": "gcc/opts.c", "status": "modified", "additions": 404, "deletions": 252, "changes": 656, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c662432e8cb909295011dc548cb238dd1586f702/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c662432e8cb909295011dc548cb238dd1586f702/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=c662432e8cb909295011dc548cb238dd1586f702", "patch": "@@ -83,15 +83,12 @@ enum symbol_visibility default_visibility = VISIBILITY_DEFAULT;\n \n /* Disable unit-at-a-time for frontends that might be still broken in this\n    respect.  */\n-  \n+\n bool no_unit_at_a_time_default;\n \n /* Global visibility options.  */\n struct visibility_flags visibility_options;\n \n-/* Columns of --help display.  */\n-static unsigned int columns = 80;\n-\n /* What to print when a switch has no documentation.  */\n static const char undocumented_msg[] = N_(\"This switch lacks documentation\");\n \n@@ -115,12 +112,6 @@ static char *write_langs (unsigned int lang_mask);\n static void complain_wrong_lang (const char *, const struct cl_option *,\n \t\t\t\t unsigned int lang_mask);\n static void handle_options (unsigned int, const char **, unsigned int);\n-static void wrap_help (const char *help, const char *item, unsigned int);\n-static void print_target_help (void);\n-static void print_help (void);\n-static void print_param_help (void);\n-static void print_filtered_help (unsigned int);\n-static unsigned int print_switch (const char *text, unsigned int indent);\n static void set_debug_level (enum debug_info_type type, int extended,\n \t\t\t     const char *arg);\n \n@@ -320,7 +311,7 @@ handle_option (const char **argv, unsigned int lang_mask)\n \t*(const char **) option->flag_var = arg;\n \tbreak;\n       }\n-  \n+\n   if (option->flags & lang_mask)\n     if (lang_hooks.handle_option (opt_index, arg, value) == 0)\n       result = 0;\n@@ -601,7 +592,7 @@ decode_options (unsigned int argc, const char **argv)\n \n   if (flag_exceptions && flag_reorder_blocks_and_partition)\n     {\n-      inform \n+      inform\n \t    (\"-freorder-blocks-and-partition does not work with exceptions\");\n       flag_reorder_blocks_and_partition = 0;\n       flag_reorder_blocks = 1;\n@@ -626,13 +617,300 @@ decode_options (unsigned int argc, const char **argv)\n       && (!targetm.have_named_sections\n \t  || (flag_unwind_tables && targetm.unwind_tables_default)))\n     {\n-      inform \n+      inform\n        (\"-freorder-blocks-and-partition does not work on this architecture\");\n       flag_reorder_blocks_and_partition = 0;\n       flag_reorder_blocks = 1;\n     }\n }\n \n+#define LEFT_COLUMN\t27\n+\n+/* Output ITEM, of length ITEM_WIDTH, in the left column,\n+   followed by word-wrapped HELP in a second column.  */\n+static void\n+wrap_help (const char *help,\n+\t   const char *item,\n+\t   unsigned int item_width,\n+\t   unsigned int columns)\n+{\n+  unsigned int col_width = LEFT_COLUMN;\n+  unsigned int remaining, room, len;\n+\n+  remaining = strlen (help);\n+\n+  do\n+    {\n+      room = columns - 3 - MAX (col_width, item_width);\n+      if (room > columns)\n+\troom = 0;\n+      len = remaining;\n+\n+      if (room < len)\n+\t{\n+\t  unsigned int i;\n+\n+\t  for (i = 0; help[i]; i++)\n+\t    {\n+\t      if (i >= room && len != remaining)\n+\t\tbreak;\n+\t      if (help[i] == ' ')\n+\t\tlen = i;\n+\t      else if ((help[i] == '-' || help[i] == '/')\n+\t\t       && help[i + 1] != ' '\n+\t\t       && i > 0 && ISALPHA (help[i - 1]))\n+\t\tlen = i + 1;\n+\t    }\n+\t}\n+\n+      printf( \"  %-*.*s %.*s\\n\", col_width, item_width, item, len, help);\n+      item_width = 0;\n+      while (help[len] == ' ')\n+\tlen++;\n+      help += len;\n+      remaining -= len;\n+    }\n+  while (remaining);\n+}\n+\n+/* Print help for a specific front-end, etc.  */\n+static void\n+print_filtered_help (unsigned int include_flags,\n+\t\t     unsigned int exclude_flags,\n+\t\t     unsigned int any_flags,\n+\t\t     unsigned int columns)\n+{\n+  unsigned int i;\n+  const char *help;\n+  static char *printed = NULL;\n+  bool found = false;\n+  bool displayed = false;\n+\n+  if (include_flags == CL_PARAMS)\n+    {\n+      for (i = 0; i < LAST_PARAM; i++)\n+\t{\n+\t  const char *param = compiler_params[i].option;\n+\n+\t  help = compiler_params[i].help;\n+\t  if (help == NULL || *help == '\\0')\n+\t    {\n+\t      if (exclude_flags & CL_UNDOCUMENTED)\n+\t\tcontinue;\n+\t      help = undocumented_msg;\n+\t    }\n+\n+\t  /* Get the translation.  */\n+\t  help = _(help);\n+\n+\t  wrap_help (help, param, strlen (param), columns);\n+\t}\n+      putchar ('\\n');\n+      return;\n+    }\n+\n+  if (!printed)\n+    printed = xcalloc (1, cl_options_count);\n+\n+  for (i = 0; i < cl_options_count; i++)\n+    {\n+      static char new_help[128];\n+      const struct cl_option *option = cl_options + i;\n+      unsigned int len;\n+      const char *opt;\n+      const char *tab;\n+\n+      if (include_flags == 0\n+\t  || ((option->flags & include_flags) != include_flags))\n+\t{\n+\t  if ((option->flags & any_flags) == 0)\n+\t    continue;\n+\t}\n+\n+      /* Skip unwanted switches.  */\n+      if ((option->flags & exclude_flags) != 0)\n+\tcontinue;\n+\n+      found = true;\n+      /* Skip switches that have already been printed.  */\n+      if (printed[i])\n+\tcontinue;\n+\n+      printed[i] = true;\n+\n+      help = option->help;\n+      if (help == NULL)\n+\t{\n+\t  if (exclude_flags & CL_UNDOCUMENTED)\n+\t    continue;\n+\t  help = undocumented_msg;\n+\t}\n+\n+      /* Get the translation.  */\n+      help = _(help);\n+\n+      /* Find the gap between the name of the\n+\t option and its descriptive text.  */\n+      tab = strchr (help, '\\t');\n+      if (tab)\n+\t{\n+\t  len = tab - help;\n+\t  opt = help;\n+\t  help = tab + 1;\n+\t}\n+      else\n+\t{\n+\t  opt = option->opt_text;\n+\t  len = strlen (opt);\n+\t}\n+\n+      /* With the -Q option enabled we change the descriptive text associated\n+\t with an option to be an indication of its current setting.  */\n+      if (!quiet_flag)\n+\t{\n+\t  if (len < (LEFT_COLUMN + 2))\n+\t    strcpy (new_help, \"\\t\\t\");\n+\t  else\n+\t    strcpy (new_help, \"\\t\");\n+\n+\t  if (option->flag_var != NULL)\n+\t    {\n+\t      if (option->flags & CL_JOINED)\n+\t\t{\n+\t\t  if (option->var_type == CLVC_STRING)\n+\t\t    {\n+\t\t      if (* (const char **) option->flag_var != NULL)\n+\t\t\tsnprintf (new_help + strlen (new_help),\n+\t\t\t\t  sizeof (new_help) - strlen (new_help),\n+\t\t\t\t  * (const char **) option->flag_var);\n+\t\t    }\n+\t\t  else\n+\t\t    sprintf (new_help + strlen (new_help),\n+\t\t\t     \"%#x\", * (int *) option->flag_var);\n+\t\t}\n+\t      else\n+\t\tstrcat (new_help, option_enabled (i)\n+\t\t\t? _(\"[enabled]\") : _(\"[disabled]\"));\n+\t    }\n+\n+\t  help = new_help;\n+\t}\n+\n+      wrap_help (help, opt, len, columns);\n+      displayed = true;\n+    }\n+\n+  if (! found)\n+    printf (_(\" No options with the desired characteristics were found\\n\"));\n+  else if (! displayed)\n+    printf (_(\" All options with the desired characteristics have already been displayed\\n\"));\n+\n+  putchar ('\\n');\n+}\n+\n+/* Display help for a specified type of option.\n+   The options must have ALL of the INCLUDE_FLAGS set\n+   ANY of the flags in the ANY_FLAGS set\n+   and NONE of the EXCLUDE_FLAGS set.  */\n+static void\n+print_specific_help (unsigned int include_flags,\n+\t\t     unsigned int exclude_flags,\n+\t\t     unsigned int any_flags)\n+{\n+  unsigned int all_langs_mask = (1U << cl_lang_count) - 1;\n+  const char * description = NULL;\n+  const char * descrip_extra = \"\";\n+  size_t i;\n+  unsigned int flag;\n+  static unsigned int columns = 0;\n+\n+  /* Sanity check: Make sure that we do not have more\n+     languages than we have bits available to enumerate them.  */\n+  gcc_assert ((1U << cl_lang_count) < CL_MIN_OPTION_CLASS);\n+\n+  /* If we have not done so already, obtain\n+     the desired maximum width of the output.  */\n+  if (columns == 0)\n+    {\n+      const char *p;\n+\n+      GET_ENVIRONMENT (p, \"COLUMNS\");\n+      if (p != NULL)\n+\t{\n+\t  int value = atoi (p);\n+\n+\t  if (value > 0)\n+\t    columns = value;\n+\t}\n+\n+      if (columns == 0)\n+\t/* Use a reasonable default.  */\n+\tcolumns = 80;\n+    }\n+\n+  /* Decide upon the title for the options that we are going to display.  */\n+  for (i = 0, flag = 1; flag <= CL_MAX_OPTION_CLASS; flag <<= 1, i ++)\n+    {\n+      switch (flag & include_flags)\n+\t{\n+\tcase 0:\n+\t  break;\n+\n+\tcase CL_TARGET:\n+\t  description = _(\"The following options are target specific\");\n+\t  break;\n+\tcase CL_WARNING:\n+\t  description = _(\"The following options control compiler warning messages\");\n+\t  break;\n+\tcase CL_OPTIMIZATION:\n+\t  description = _(\"The following options control optimizations\");\n+\t  break;\n+\tcase CL_COMMON:\n+\t  description = _(\"The following options are language-independent\");\n+\t  break;\n+\tcase CL_PARAMS:\n+\t  description = _(\"The --param option recognizes the following as parameters\");\n+\t  break;\n+\tdefault:\n+\t  if (i >= cl_lang_count)\n+\t    break;\n+\t  if ((exclude_flags & ((1U << cl_lang_count) - 1)) != 0)\n+\t    {\n+\t      description = _(\"The following options are specific to the language \");\n+\t      descrip_extra = lang_names [i];\n+\t    }\n+\t  else\n+\t    description = _(\"The following options are supported by, amoung others, the language \");\n+\t  break;\n+\t}\n+    }\n+\n+  if (description == NULL)\n+    {\n+      if (any_flags == 0)\n+\t{\n+\t  if (include_flags == CL_UNDOCUMENTED)\n+\t    description = _(\"The following options are not documented\");\n+\t  else\n+\t    {\n+\t      internal_error (\"unrecognized include_flags 0x%x passed to print_specific_help\",\n+\t\t\t      include_flags);\n+\t      return;\n+\t    }\n+\t}\n+      else\n+\t{\n+\t  if (any_flags & all_langs_mask)\n+\t    description = _(\"The following options are language-related\");\n+\t  else\n+\t    description = _(\"The following options are language-independent\");\n+\t}\n+    }\n+\n+  printf (\"%s%s:\\n\", description, descrip_extra);\n+  print_filtered_help (include_flags, exclude_flags, any_flags, columns);\n+}\n+\n /* Handle target- and language-independent options.  Return zero to\n    generate an \"unknown option\" message.  Only options that need\n    extra handling need to be listed here; if you simply want\n@@ -646,20 +924,124 @@ common_handle_option (size_t scode, const char *arg, int value,\n \n   switch (code)\n     {\n-    case OPT__help:\n-      print_help ();\n-      exit_after_options = true;\n-      break;\n-\n     case OPT__param:\n       handle_param (arg);\n       break;\n \n+    case OPT_fhelp:\n+    case OPT__help:\n+      {\n+\tunsigned int all_langs_mask = (1U << cl_lang_count) - 1;\n+\tunsigned int undoc_mask;\n+\tunsigned int i;\n+\n+\tundoc_mask = extra_warnings ? 0 : CL_UNDOCUMENTED;\n+\t/* First display any single language specific options.  */\n+\tfor (i = 0; i < cl_lang_count; i++)\n+\t  print_specific_help\n+\t    (1U << i, (all_langs_mask & (~ (1U << i))) | undoc_mask, 0);\n+\t/* Next display any multi language specific options.  */\n+\tprint_specific_help (0, undoc_mask, all_langs_mask);\n+\t/* Then display any remaining, non-language options.  */\n+\tfor (i = CL_MIN_OPTION_CLASS; i <= CL_MAX_OPTION_CLASS; i <<= 1)\n+\t  print_specific_help (i, undoc_mask, 0);\n+\texit_after_options = true;\n+\tbreak;\n+      }\n+\n+    case OPT_ftarget_help:\n     case OPT__target_help:\n-      print_target_help ();\n+      print_specific_help (CL_TARGET, CL_UNDOCUMENTED, 0);\n       exit_after_options = true;\n       break;\n \n+    case OPT_fhelp_:\n+    case OPT__help_:\n+      {\n+\tconst char * a = arg;\n+\tunsigned int include_flags = 0;\n+\t/* Note - by default we include undocumented options when listing\n+\t   specific classes.  If you only want to see documented options\n+\t   then add \",^undocumented\" to the --help= option.  e.g.:\n+\n+\t   --help=target,^undocumented  */\n+\tunsigned int exclude_flags = 0;\n+\n+\t/* Walk along the argument string, parsing each word in turn.\n+\t   The format is:\n+\t   arg = [^]{word}[,{arg}]\n+\t   word = {optimizers|target|warnings|undocumented|params}  */\n+\twhile (* a != 0)\n+\t  {\n+\t    static struct\n+\t    {\n+\t      const char * string;\n+\t      unsigned int flag;\n+\t    }\n+\t    specifics[] =\n+\t    {\n+\t      { \"optimizers\", CL_OPTIMIZATION },\n+\t      { \"target\", CL_TARGET },\n+\t      { \"warnings\", CL_WARNING },\n+\t      { \"undocumented\", CL_UNDOCUMENTED },\n+\t      { \"params\", CL_PARAMS },\n+\t      { \"joined\", CL_JOINED },\n+\t      { \"separate\", CL_SEPARATE },\n+\t      { NULL, 0 }\n+\t    };\n+\t    unsigned int * pflags;\n+\t    char * comma;\n+\t    unsigned int len;\n+\t    unsigned int i;\n+\n+\t    if (* a == '^')\n+\t      {\n+\t\t++ a;\n+\t\tpflags = & exclude_flags;\n+\t      }\n+\t    else\n+\t      pflags = & include_flags;\n+\n+\t    comma = strchr (a, ',');\n+\t    if (comma == NULL)\n+\t      len = strlen (a);\n+\t    else\n+\t      len = comma - a;\n+\n+\t    for (i = 0; specifics[i].string != NULL; i++)\n+\t      if (strncasecmp (a, specifics[i].string, len) == 0)\n+\t\t{\n+\t\t  * pflags |= specifics[i].flag;\n+\t\t  break;\n+\t\t}\n+\n+\t    if (specifics[i].string == NULL)\n+\t      {\n+\t\t/* Check to see if the string matches a language name.  */\n+\t\tfor (i = 0; i < cl_lang_count; i++)\n+\t\t  if (strncasecmp (a, lang_names[i], len) == 0)\n+\t\t    {\n+\t\t      * pflags |= 1U << i;\n+\t\t      break;\n+\t\t    }\n+\n+\t\tif (i == cl_lang_count)\n+\t\t  fnotice (stderr,\n+\t\t\t   \"warning: unrecognized argument to --help= switch: %.*s\\n\",\n+\t\t\t   len, a);\n+\t      }\n+\n+\t    if (comma == NULL)\n+\t      break;\n+\t    a = comma + 1;\n+\t  }\n+\n+\tif (include_flags)\n+\t  print_specific_help (include_flags, exclude_flags, 0);\n+\texit_after_options = true;\n+\tbreak;\n+      }\n+\n     case OPT__version:\n       print_version (stderr, \"\");\n       exit_after_options = true;\n@@ -684,6 +1066,7 @@ common_handle_option (size_t scode, const char *arg, int value,\n       {\n \tchar *new_option;\n \tint option_index;\n+\n \tnew_option = XNEWVEC (char, strlen (arg) + 2);\n \tnew_option[0] = 'W';\n \tstrcpy (new_option+1, arg);\n@@ -819,7 +1202,7 @@ common_handle_option (size_t scode, const char *arg, int value,\n \n     case OPT_fpack_struct_:\n       if (value <= 0 || (value & (value - 1)) || value > 16)\n-\terror(\"structure alignment must be a small power of two, not %d\", value);\n+\terror (\"structure alignment must be a small power of two, not %d\", value);\n       else\n \t{\n \t  initial_max_fld_align = value;\n@@ -1153,245 +1536,14 @@ set_debug_level (enum debug_info_type type, int extended, const char *arg)\n     }\n }\n \n-/* Display help for target options.  */\n-static void\n-print_target_help (void)\n-{\n-  unsigned int i;\n-  static bool displayed = false;\n-\n-  /* Avoid double printing for --help --target-help.  */\n-  if (displayed)\n-    return;\n-\n-  displayed = true;\n-  for (i = 0; i < cl_options_count; i++)\n-    if ((cl_options[i].flags & (CL_TARGET | CL_UNDOCUMENTED)) == CL_TARGET)\n-      {\n-\tprintf (_(\"\\nTarget specific options:\\n\"));\n-\tprint_filtered_help (CL_TARGET);\n-\tbreak;\n-      }\n-}\n-\n-/* Output --help text.  */\n-static void\n-print_help (void)\n-{\n-  size_t i;\n-  const char *p;\n-\n-  GET_ENVIRONMENT (p, \"COLUMNS\");\n-  if (p)\n-    {\n-      int value = atoi (p);\n-      if (value > 0)\n-\tcolumns = value;\n-    }\n-\n-  puts (_(\"The following options are language-independent:\\n\"));\n-\n-  print_filtered_help (CL_COMMON);\n-  print_param_help ();\n-\n-  for (i = 0; lang_names[i]; i++)\n-    {\n-      printf (_(\"The %s front end recognizes the following options:\\n\\n\"),\n-\t      lang_names[i]);\n-      print_filtered_help (1U << i);\n-    }\n-  print_target_help ();\n-}\n-\n-/* Print the help for --param.  */\n-static void\n-print_param_help (void)\n-{\n-  size_t i;\n-\n-  puts (_(\"The --param option recognizes the following as parameters:\\n\"));\n-\n-  for (i = 0; i < LAST_PARAM; i++)\n-    {\n-      const char *help = compiler_params[i].help;\n-      const char *param = compiler_params[i].option;\n-\n-      if (help == NULL || *help == '\\0')\n-\thelp = undocumented_msg;\n-\n-      /* Get the translation.  */\n-      help = _(help);\n-\n-      wrap_help (help, param, strlen (param));\n-    }\n-\n-  putchar ('\\n');\n-}\n-\n-/* Print help for a specific front-end, etc.  */\n-static void\n-print_filtered_help (unsigned int flag)\n-{\n-  unsigned int i, len, filter, indent = 0;\n-  bool duplicates = false;\n-  const char *help, *opt, *tab;\n-  static char *printed;\n-\n-  if (flag == CL_COMMON || flag == CL_TARGET)\n-    {\n-      filter = flag;\n-      if (!printed)\n-\tprinted = xmalloc (cl_options_count);\n-      memset (printed, 0, cl_options_count);\n-    }\n-  else\n-    {\n-      /* Don't print COMMON options twice.  */\n-      filter = flag | CL_COMMON;\n-\n-      for (i = 0; i < cl_options_count; i++)\n-\t{\n-\t  if ((cl_options[i].flags & filter) != flag)\n-\t    continue;\n-\n-\t  /* Skip help for internal switches.  */\n-\t  if (cl_options[i].flags & CL_UNDOCUMENTED)\n-\t    continue;\n-\n-\t  /* Skip switches that have already been printed, mark them to be\n-\t     listed later.  */\n-\t  if (printed[i])\n-\t    {\n-\t      duplicates = true;\n-\t      indent = print_switch (cl_options[i].opt_text, indent);\n-\t    }\n-\t}\n-\n-      if (duplicates)\n-\t{\n-\t  putchar ('\\n');\n-\t  putchar ('\\n');\n-\t}\n-    }\n-\n-  for (i = 0; i < cl_options_count; i++)\n-    {\n-      if ((cl_options[i].flags & filter) != flag)\n-\tcontinue;\n-\n-      /* Skip help for internal switches.  */\n-      if (cl_options[i].flags & CL_UNDOCUMENTED)\n-\tcontinue;\n-\n-      /* Skip switches that have already been printed.  */\n-      if (printed[i])\n-\tcontinue;\n-\n-      printed[i] = true;\n-\n-      help = cl_options[i].help;\n-      if (!help)\n-\thelp = undocumented_msg;\n-\n-      /* Get the translation.  */\n-      help = _(help);\n-\n-      tab = strchr (help, '\\t');\n-      if (tab)\n-\t{\n-\t  len = tab - help;\n-\t  opt = help;\n-\t  help = tab + 1;\n-\t}\n-      else\n-\t{\n-\t  opt = cl_options[i].opt_text;\n-\t  len = strlen (opt);\n-\t}\n-\n-      wrap_help (help, opt, len);\n-    }\n-\n-  putchar ('\\n');\n-}\n-\n-/* Output ITEM, of length ITEM_WIDTH, in the left column, followed by\n-   word-wrapped HELP in a second column.  */\n-static unsigned int\n-print_switch (const char *text, unsigned int indent)\n-{\n-  unsigned int len = strlen (text) + 1; /* trailing comma */\n-\n-  if (indent)\n-    {\n-      putchar (',');\n-      if (indent + len > columns)\n-\t{\n-\t  putchar ('\\n');\n-\t  putchar (' ');\n-\t  indent = 1;\n-\t}\n-    }\n-  else\n-    putchar (' ');\n-\n-  putchar (' ');\n-  fputs (text, stdout);\n-\n-  return indent + len + 1;\n-}\n-\n-/* Output ITEM, of length ITEM_WIDTH, in the left column, followed by\n-   word-wrapped HELP in a second column.  */\n-static void\n-wrap_help (const char *help, const char *item, unsigned int item_width)\n-{\n-  unsigned int col_width = 27;\n-  unsigned int remaining, room, len;\n-\n-  remaining = strlen (help);\n-\n-  do\n-    {\n-      room = columns - 3 - MAX (col_width, item_width);\n-      if (room > columns)\n-\troom = 0;\n-      len = remaining;\n-\n-      if (room < len)\n-\t{\n-\t  unsigned int i;\n-\n-\t  for (i = 0; help[i]; i++)\n-\t    {\n-\t      if (i >= room && len != remaining)\n-\t\tbreak;\n-\t      if (help[i] == ' ')\n-\t\tlen = i;\n-\t      else if ((help[i] == '-' || help[i] == '/')\n-\t\t       && help[i + 1] != ' '\n-\t\t       && i > 0 && ISALPHA (help[i - 1]))\n-\t\tlen = i + 1;\n-\t    }\n-\t}\n-\n-      printf( \"  %-*.*s %.*s\\n\", col_width, item_width, item, len, help);\n-      item_width = 0;\n-      while (help[len] == ' ')\n-\tlen++;\n-      help += len;\n-      remaining -= len;\n-    }\n-  while (remaining);\n-}\n-\n /* Return 1 if OPTION is enabled, 0 if it is disabled, or -1 if it isn't\n    a simple on-off switch.  */\n \n int\n option_enabled (int opt_idx)\n {\n   const struct cl_option *option = &(cl_options[opt_idx]);\n+\n   if (option->flag_var)\n     switch (option->var_type)\n       {"}, {"sha": "b60cb47a16f673dd19181763a1a2d9dfedb2414d", "filename": "gcc/opts.h", "status": "modified", "additions": 23, "deletions": 10, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c662432e8cb909295011dc548cb238dd1586f702/gcc%2Fopts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c662432e8cb909295011dc548cb238dd1586f702/gcc%2Fopts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.h?ref=c662432e8cb909295011dc548cb238dd1586f702", "patch": "@@ -1,5 +1,5 @@\n /* Command line option handling.\n-   Copyright (C) 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n+   Copyright (C) 2002, 2003, 2004, 2005, 2007 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -64,17 +64,30 @@ struct cl_option_state {\n extern const struct cl_option cl_options[];\n extern const unsigned int cl_options_count;\n extern const char *const lang_names[];\n+extern const unsigned int cl_lang_count;\n extern bool no_unit_at_a_time_default;\n \n-#define CL_DISABLED\t\t(1 << 21) /* Disabled in this configuration.  */\n-#define CL_TARGET\t\t(1 << 22) /* Target-specific option.  */\n-#define CL_REPORT\t\t(1 << 23) /* Report argument with -fverbose-asm  */\n-#define CL_JOINED\t\t(1 << 24) /* If takes joined argument.  */\n-#define CL_SEPARATE\t\t(1 << 25) /* If takes a separate argument.  */\n-#define CL_REJECT_NEGATIVE\t(1 << 26) /* Reject no- form.  */\n-#define CL_MISSING_OK\t\t(1 << 27) /* Missing argument OK (joined).  */\n-#define CL_UINTEGER\t\t(1 << 28) /* Argument is an integer >=0.  */\n-#define CL_COMMON\t\t(1 << 29) /* Language-independent.  */\n+#define CL_PARAMS               (1 << 18) /* Fake entry.  Used to display --param info with --help.  */\n+#define CL_WARNING\t\t(1 << 19) /* Enables an (optional) warning message.  */\n+#define CL_OPTIMIZATION\t\t(1 << 20) /* Enables an (optional) optimization.  */\n+#define CL_TARGET\t\t(1 << 21) /* Target-specific option.  */\n+#define CL_COMMON\t\t(1 << 22) /* Language-independent.  */\n+\n+#define CL_MIN_OPTION_CLASS\tCL_PARAMS\n+#define CL_MAX_OPTION_CLASS\tCL_COMMON\n+\n+/* From here on the bits describe attributes of the options.\n+   Before this point the bits have described the class of the option.\n+   This distinction is important because --help will not list options\n+   which only have these higher bits set.  */\n+\n+#define CL_DISABLED\t\t(1 << 23) /* Disabled in this configuration.  */\n+#define CL_REPORT\t\t(1 << 24) /* Report argument with -fverbose-asm  */\n+#define CL_JOINED\t\t(1 << 25) /* If takes joined argument.  */\n+#define CL_SEPARATE\t\t(1 << 26) /* If takes a separate argument.  */\n+#define CL_REJECT_NEGATIVE\t(1 << 27) /* Reject no- form.  */\n+#define CL_MISSING_OK\t\t(1 << 28) /* Missing argument OK (joined).  */\n+#define CL_UINTEGER\t\t(1 << 29) /* Argument is an integer >=0.  */\n #define CL_UNDOCUMENTED\t\t(1 << 30) /* Do not output with --help.  */\n \n /* Input file names.  */"}]}