{"sha": "29e597d0e6c853b1487ee86357df704a5e0ab618", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjllNTk3ZDBlNmM4NTNiMTQ4N2VlODYzNTdkZjcwNGE1ZTBhYjYxOA==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2015-05-06T15:55:10Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2015-05-06T15:55:10Z"}, "message": "rs6000.md (cstore<mode>4_signed_imm): New expander.\n\n\t* config/rs6000/rs6000.md (cstore<mode>4_signed_imm): New expander.\n\t(cstore<mode>4_unsigned_imm): New expander.\n\t(cstore<mode>4): Remove empty constraint strings.  Use the new\n\texpanders.\n\nFrom-SVN: r222855", "tree": {"sha": "f9babee25f5605f87d2df60a8e17cafe17462c8d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f9babee25f5605f87d2df60a8e17cafe17462c8d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/29e597d0e6c853b1487ee86357df704a5e0ab618", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29e597d0e6c853b1487ee86357df704a5e0ab618", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29e597d0e6c853b1487ee86357df704a5e0ab618", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29e597d0e6c853b1487ee86357df704a5e0ab618/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "93e956161e843aecdd9ad07574132efb3616d549", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93e956161e843aecdd9ad07574132efb3616d549", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93e956161e843aecdd9ad07574132efb3616d549"}], "stats": {"total": 120, "additions": 113, "deletions": 7}, "files": [{"sha": "3b267c8d3a390034140b3196c396b800de91ca34", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29e597d0e6c853b1487ee86357df704a5e0ab618/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29e597d0e6c853b1487ee86357df704a5e0ab618/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=29e597d0e6c853b1487ee86357df704a5e0ab618", "patch": "@@ -1,3 +1,10 @@\n+2015-05-06  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* config/rs6000/rs6000.md (cstore<mode>4_signed_imm): New expander.\n+\t(cstore<mode>4_unsigned_imm): New expander.\n+\t(cstore<mode>4): Remove empty constraint strings.  Use the new\n+\texpanders.\n+\n 2015-05-06  Yvan Roux  <yvan.roux@linaro.org>\n \n \tPR target/64208"}, {"sha": "7fc2bb1b4ad477138fc623368c0eda99e950047f", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 106, "deletions": 7, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29e597d0e6c853b1487ee86357df704a5e0ab618/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29e597d0e6c853b1487ee86357df704a5e0ab618/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=29e597d0e6c853b1487ee86357df704a5e0ab618", "patch": "@@ -11787,10 +11787,102 @@\n   DONE;\n })\n \n+(define_expand \"cstore<mode>4_signed_imm\"\n+  [(use (match_operator 1 \"signed_comparison_operator\"\n+         [(match_operand:GPR 2 \"gpc_reg_operand\")\n+          (match_operand:GPR 3 \"immediate_operand\")]))\n+   (clobber (match_operand:GPR 0 \"register_operand\"))]\n+  \"\"\n+{\n+  bool invert = false;\n+\n+  enum rtx_code cond_code = GET_CODE (operands[1]);\n+\n+  rtx op0 = operands[0];\n+  rtx op1 = operands[2];\n+  HOST_WIDE_INT val = INTVAL (operands[3]);\n+\n+  if (cond_code == GE || cond_code == GT)\n+    {\n+      cond_code = reverse_condition (cond_code);\n+      invert = true;\n+    }\n+\n+  if (cond_code == LE)\n+    val++;\n+\n+  rtx tmp = gen_reg_rtx (<MODE>mode);\n+  emit_insn (gen_add<mode>3 (tmp, op1, GEN_INT (-val)));\n+  rtx x = gen_reg_rtx (<MODE>mode);\n+  if (val < 0)\n+    emit_insn (gen_and<mode>3 (x, op1, tmp));\n+  else\n+    emit_insn (gen_ior<mode>3 (x, op1, tmp));\n+\n+  if (invert)\n+    {\n+      rtx tmp = gen_reg_rtx (<MODE>mode);\n+      emit_insn (gen_one_cmpl<mode>2 (tmp, x));\n+      x = tmp;\n+    }\n+\n+  int sh = GET_MODE_BITSIZE (<MODE>mode) - 1;\n+  emit_insn (gen_lshr<mode>3 (op0, x, GEN_INT (sh)));\n+\n+  DONE;\n+})\n+\n+(define_expand \"cstore<mode>4_unsigned_imm\"\n+  [(use (match_operator 1 \"unsigned_comparison_operator\"\n+         [(match_operand:GPR 2 \"gpc_reg_operand\")\n+          (match_operand:GPR 3 \"immediate_operand\")]))\n+   (clobber (match_operand:GPR 0 \"register_operand\"))]\n+  \"\"\n+{\n+  bool invert = false;\n+\n+  enum rtx_code cond_code = GET_CODE (operands[1]);\n+\n+  rtx op0 = operands[0];\n+  rtx op1 = operands[2];\n+  HOST_WIDE_INT val = INTVAL (operands[3]);\n+\n+  if (cond_code == GEU || cond_code == GTU)\n+    {\n+      cond_code = reverse_condition (cond_code);\n+      invert = true;\n+    }\n+\n+  if (cond_code == LEU)\n+    val++;\n+\n+  rtx tmp = gen_reg_rtx (<MODE>mode);\n+  rtx tmp2 = gen_reg_rtx (<MODE>mode);\n+  emit_insn (gen_add<mode>3 (tmp, op1, GEN_INT (-val)));\n+  emit_insn (gen_one_cmpl<mode>2 (tmp2, op1));\n+  rtx x = gen_reg_rtx (<MODE>mode);\n+  if (val < 0)\n+    emit_insn (gen_ior<mode>3 (x, tmp, tmp2));\n+  else\n+    emit_insn (gen_and<mode>3 (x, tmp, tmp2));\n+\n+  if (invert)\n+    {\n+      rtx tmp = gen_reg_rtx (<MODE>mode);\n+      emit_insn (gen_one_cmpl<mode>2 (tmp, x));\n+      x = tmp;\n+    }\n+\n+  int sh = GET_MODE_BITSIZE (<MODE>mode) - 1;\n+  emit_insn (gen_lshr<mode>3 (op0, x, GEN_INT (sh)));\n+\n+  DONE;\n+})\n+\n (define_expand \"cstore<mode>4\"\n   [(use (match_operator 1 \"rs6000_cbranch_operator\"\n-         [(match_operand:GPR 2 \"gpc_reg_operand\" \"\")\n-          (match_operand:GPR 3 \"reg_or_short_operand\" \"\")]))\n+         [(match_operand:GPR 2 \"gpc_reg_operand\")\n+          (match_operand:GPR 3 \"reg_or_short_operand\")]))\n    (clobber (match_operand:GPR 0 \"register_operand\"))]\n   \"\"\n {\n@@ -11819,11 +11911,18 @@\n     emit_insn (gen_cstore<mode>4_unsigned (operands[0], operands[1],\n \t\t\t\t\t   operands[2], operands[3]));\n \n-  /* The generic code knows tricks to compute signed comparisons against\n-     zero.  Let it do its thing.  */\n-  else if (operands[3] == const0_rtx\n-\t   && signed_comparison_operator (operands[1], VOIDmode))\n-    FAIL;\n+  /* For signed comparisons against a constant, we can do some simple\n+     bit-twiddling.  */\n+  else if (signed_comparison_operator (operands[1], VOIDmode)\n+\t   && CONST_INT_P (operands[3]))\n+    emit_insn (gen_cstore<mode>4_signed_imm (operands[0], operands[1],\n+\t\t\t\t\t     operands[2], operands[3]));\n+\n+  /* And similarly for unsigned comparisons.  */\n+  else if (unsigned_comparison_operator (operands[1], VOIDmode)\n+\t   && CONST_INT_P (operands[3]))\n+    emit_insn (gen_cstore<mode>4_unsigned_imm (operands[0], operands[1],\n+\t\t\t\t\t       operands[2], operands[3]));\n \n   /* Everything else, use the mfcr brute force.  */\n   else"}]}