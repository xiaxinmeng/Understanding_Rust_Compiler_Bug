{"sha": "21d936870387dc6253c88346d357ff230ed50806", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjFkOTM2ODcwMzg3ZGM2MjUzYzg4MzQ2ZDM1N2ZmMjMwZWQ1MDgwNg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@vlsi1.ultra.nyu.edu", "date": "2001-08-09T15:28:24Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2001-08-09T15:28:24Z"}, "message": "expr.c (emit_single_push_insn): Only exists ifdef PUSH_ROUNDING.\n\n\t* expr.c (emit_single_push_insn): Only exists ifdef PUSH_ROUNDING.\n\t(move_by_pieces_1): If would call it, abort if no PUSH_ROUNDING.\n\nFrom-SVN: r44740", "tree": {"sha": "378bb198fecbc2c1d0e29ac2a11e88a9fdf588cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/378bb198fecbc2c1d0e29ac2a11e88a9fdf588cc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/21d936870387dc6253c88346d357ff230ed50806", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21d936870387dc6253c88346d357ff230ed50806", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21d936870387dc6253c88346d357ff230ed50806", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21d936870387dc6253c88346d357ff230ed50806/comments", "author": null, "committer": null, "parents": [{"sha": "b1b6b0cb9c651d78f260abb00b2b60cad32527fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1b6b0cb9c651d78f260abb00b2b60cad32527fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1b6b0cb9c651d78f260abb00b2b60cad32527fb"}], "stats": {"total": 34, "additions": 23, "deletions": 11}, "files": [{"sha": "9fb9dfed3e897efe51acb4ba73e2fb2541efacb8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21d936870387dc6253c88346d357ff230ed50806/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21d936870387dc6253c88346d357ff230ed50806/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=21d936870387dc6253c88346d357ff230ed50806", "patch": "@@ -1,3 +1,8 @@\n+Thu Aug  9 11:30:20 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+\n+\t* expr.c (emit_single_push_insn): Only exists ifdef PUSH_ROUNDING.\n+\t(move_by_pieces_1): If would call it, abort if no PUSH_ROUNDING.\n+\n 2001-08-09  Graham Stott  <grahams@redhat.com>\n \n \t* sched-vis.c (MAX_VISUAL_NO_UNIT): Define."}, {"sha": "5920852df14473f8b939bc8cdfcd8ff973f4c8ed", "filename": "gcc/expr.c", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21d936870387dc6253c88346d357ff230ed50806/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21d936870387dc6253c88346d357ff230ed50806/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=21d936870387dc6253c88346d357ff230ed50806", "patch": "@@ -172,7 +172,9 @@ static void do_jump_by_parts_equality PARAMS ((tree, rtx, rtx));\n static void do_compare_and_jump\tPARAMS ((tree, enum rtx_code, enum rtx_code,\n \t\t\t\t\t rtx, rtx));\n static rtx do_store_flag\tPARAMS ((tree, rtx, enum machine_mode, int));\n+#ifdef PUSH_ROUNDING\n static void emit_single_push_insn PARAMS ((enum machine_mode, rtx, tree));\n+#endif\n \n /* Record for each mode whether we can move a register directly to or\n    from an object of that mode in memory.  If we can't, we won't try\n@@ -1387,13 +1389,12 @@ convert_modes (mode, oldmode, x, unsignedp)\n #define MOVE_MAX_PIECES   MOVE_MAX\n #endif\n \n-/* Generate several move instructions to copy LEN bytes\n-   from block FROM to block TO.  (These are MEM rtx's with BLKmode).\n-   The caller must pass FROM and TO\n-    through protect_from_queue before calling.\n+/* Generate several move instructions to copy LEN bytes from block FROM to\n+   block TO.  (These are MEM rtx's with BLKmode).  The caller must pass FROM\n+   and TO through protect_from_queue before calling.\n \n-   When TO is NULL, the emit_single_push_insn is used to push the\n-   FROM to stack.\n+   If PUSH_ROUNDING is defined and TO is NULL, emit_single_push_insn is\n+   used to push FROM to the stack.\n \n    ALIGN is maximum alignment we can assume.  */\n \n@@ -1600,7 +1601,13 @@ move_by_pieces_1 (genfun, mode, data)\n       if (data->to)\n \temit_insn ((*genfun) (to1, from1));\n       else\n-\temit_single_push_insn (mode, from1, NULL);\n+\t{\n+#ifdef PUSH_ROUNDING\n+\t  emit_single_push_insn (mode, from1, NULL);\n+#else\n+\t  abort ();\n+#endif\n+\t}\n \n       if (HAVE_POST_INCREMENT && data->explicit_inc_to > 0)\n \temit_insn (gen_add2_insn (data->to_addr, GEN_INT (size)));\n@@ -3144,14 +3151,16 @@ get_push_address (size)\n   return copy_to_reg (temp);\n }\n \n+#ifdef PUSH_ROUNDING\n+\n /* Emit single push insn.  */\n+\n static void\n emit_single_push_insn (mode, x, type)\n      rtx x;\n      enum machine_mode mode;\n      tree type;\n {\n-#ifdef PUSH_ROUNDING\n   rtx dest_addr;\n   unsigned rounded_size = PUSH_ROUNDING (GET_MODE_SIZE (mode));\n   rtx dest;\n@@ -3196,10 +3205,8 @@ emit_single_push_insn (mode, x, type)\n       set_mem_alias_set (dest, 0);\n     }\n   emit_move_insn (dest, x);\n-#else\n-  abort();\n-#endif\n }\n+#endif\n \n /* Generate code to push X onto the stack, assuming it has mode MODE and\n    type TYPE."}]}