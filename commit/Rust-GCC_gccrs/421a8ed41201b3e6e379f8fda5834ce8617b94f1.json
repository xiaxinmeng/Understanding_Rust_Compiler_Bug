{"sha": "421a8ed41201b3e6e379f8fda5834ce8617b94f1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDIxYThlZDQxMjAxYjNlNmUzNzlmOGZkYTU4MzRjZTg2MTdiOTRmMQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2016-10-18T13:29:37Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2016-10-18T13:29:37Z"}, "message": "runtime: scan caller-saved registers for non-split-stack\n    \n    While testing a patch on Solaris, which does not support split-stack, I\n    ran across a bug in the handling of caller-saved registers for the\n    garbage collector.  For non-split-stack systems, runtime_mcall is\n    responsible for saving all caller-saved registers on the stack so that\n    the GC stack scan will see them.  It does this by calling\n    __builtin_unwind_init and setting the g's gcnextsp field to point to the\n    current stack.  The garbage collector then scans the stack from gcnextsp\n    to the top of stack.\n    \n    Unfortunately, the code was setting gcnextsp to point to runtime_mcall's\n    argument, which meant that even though runtime_mcall was careful to\n    store all caller-saved registers on the stack, the GC never saw them.\n    This is, of course, only a problem if a value lives only in a\n    caller-saved register, and not anywhere else on the stack or heap.  And\n    it is only a problem if that caller-saved register manages to make it\n    all the way down to runtime_mcall without being saved by any function on\n    the way.  This is moderately unlikely but it turns out that the recent\n    changes to keep values on the stack when compiling the runtime package\n    caused it to happen for the local variable `s` in `notifyListWait` in\n    runtime/sema.go.  That function calls goparkunlock which is simple\n    enough to not require all registers, and itself calls runtime_mcall.  So\n    it was possible for `s` to be released by the GC before the goroutine\n    returned from goparkunlock, which eventually caused a dangling pointer\n    to be passed to releaseSudog.\n    \n    This is not a problem on split-stack systems, which use\n    __splitstack_get_context, which saves a stack pointer low enough on the\n    stack to scan the registers saved by runtime_mcall.\n    \n    Reviewed-on: https://go-review.googlesource.com/31323\n\nFrom-SVN: r241304", "tree": {"sha": "b2e7c0c73a90d40e2b58a5adf0a778233e56dd9b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b2e7c0c73a90d40e2b58a5adf0a778233e56dd9b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/421a8ed41201b3e6e379f8fda5834ce8617b94f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/421a8ed41201b3e6e379f8fda5834ce8617b94f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/421a8ed41201b3e6e379f8fda5834ce8617b94f1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/421a8ed41201b3e6e379f8fda5834ce8617b94f1/comments", "author": null, "committer": null, "parents": [{"sha": "1b32951078029b56c6b35092e1fc739f1c66a1b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b32951078029b56c6b35092e1fc739f1c66a1b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b32951078029b56c6b35092e1fc739f1c66a1b3"}], "stats": {"total": 9, "additions": 7, "deletions": 2}, "files": [{"sha": "c13c10dd9536c5732587809fc05819b4325adf98", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/421a8ed41201b3e6e379f8fda5834ce8617b94f1/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/421a8ed41201b3e6e379f8fda5834ce8617b94f1/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=421a8ed41201b3e6e379f8fda5834ce8617b94f1", "patch": "@@ -1,4 +1,4 @@\n-314ba28067383516c213ba84c931f93325a48c39\n+0a49b1dadd862215bdd38b9725a6e193b0d8fd0b\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "a9f3b837334d13b52a87adabd536be758cf1d26e", "filename": "libgo/runtime/proc.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/421a8ed41201b3e6e379f8fda5834ce8617b94f1/libgo%2Fruntime%2Fproc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/421a8ed41201b3e6e379f8fda5834ce8617b94f1/libgo%2Fruntime%2Fproc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fproc.c?ref=421a8ed41201b3e6e379f8fda5834ce8617b94f1", "patch": "@@ -283,6 +283,9 @@ runtime_mcall(void (*pfn)(G*))\n {\n \tM *mp;\n \tG *gp;\n+#ifndef USING_SPLIT_STACK\n+\tvoid *afterregs;\n+#endif\n \n \t// Ensure that all registers are on the stack for the garbage\n \t// collector.\n@@ -298,7 +301,9 @@ runtime_mcall(void (*pfn)(G*))\n #ifdef USING_SPLIT_STACK\n \t\t__splitstack_getcontext(&g->stackcontext[0]);\n #else\n-\t\tgp->gcnextsp = &pfn;\n+\t\t// We have to point to an address on the stack that is\n+\t\t// below the saved registers.\n+\t\tgp->gcnextsp = &afterregs;\n #endif\n \t\tgp->fromgogo = false;\n \t\tgetcontext(ucontext_arg(&gp->context[0]));"}]}