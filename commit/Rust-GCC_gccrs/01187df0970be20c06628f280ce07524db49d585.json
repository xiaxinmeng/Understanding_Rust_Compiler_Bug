{"sha": "01187df0970be20c06628f280ce07524db49d585", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDExODdkZjA5NzBiZTIwYzA2NjI4ZjI4MGNlMDc1MjRkYjQ5ZDU4NQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2013-04-28T21:36:57Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2013-04-28T21:36:57Z"}, "message": "N3472 binary constants\n\n\tN3472 binary constants\n\t* include/cpplib.h (struct cpp_options): Fix a typo in user_literals\n\tfield comment.  Add binary_constants field.\n\t* init.c (struct lang_flags): Add binary_constants field.\n\t(lang_defaults): Add bin_cst column to the table.\n\t(cpp_set_lang): Initialize CPP_OPTION (pfile, binary_constants).\n\t* expr.c (cpp_classify_number): Talk about C++11 instead of C++0x\n\tin diagnostics.  Accept binary constants if\n\tCPP_OPTION (pfile, binary_constants) even when pedantic.  Adjust\n\tpedwarn message.\n\n\t* g++.dg/cpp/limits.C: Adjust warning wording.\n\t* g++.dg/system-binary-constants-1.C: Likewise.\n\t* g++.dg/cpp1y/system-binary-constants-1.C: New test.\n\nFrom-SVN: r198380", "tree": {"sha": "befd3b677796bad370f79def6822510edc236a34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/befd3b677796bad370f79def6822510edc236a34"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/01187df0970be20c06628f280ce07524db49d585", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01187df0970be20c06628f280ce07524db49d585", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01187df0970be20c06628f280ce07524db49d585", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01187df0970be20c06628f280ce07524db49d585/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5e67a36916b402a029a7b1a5a86355ddbc75ef75", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e67a36916b402a029a7b1a5a86355ddbc75ef75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e67a36916b402a029a7b1a5a86355ddbc75ef75"}], "stats": {"total": 90, "additions": 67, "deletions": 23}, "files": [{"sha": "cf3465728c06e45767b87ee72a944e5507b87e4f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01187df0970be20c06628f280ce07524db49d585/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01187df0970be20c06628f280ce07524db49d585/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=01187df0970be20c06628f280ce07524db49d585", "patch": "@@ -1,3 +1,10 @@\n+2013-04-28  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tN3472 binary constants\n+\t* g++.dg/cpp/limits.C: Adjust warning wording.\n+\t* g++.dg/system-binary-constants-1.C: Likewise.\n+\t* g++.dg/cpp1y/system-binary-constants-1.C: New test.\n+\n 2013-04-28  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/57093"}, {"sha": "5824e01931280e11e4978e04b0e1bd40b932b743", "filename": "gcc/testsuite/g++.dg/cpp/limits.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01187df0970be20c06628f280ce07524db49d585/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp%2Flimits.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01187df0970be20c06628f280ce07524db49d585/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp%2Flimits.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp%2Flimits.C?ref=01187df0970be20c06628f280ce07524db49d585", "patch": "@@ -4,13 +4,13 @@\n #include <limits>\n \n // Compiling this with -pedantic was wrongly triggering this error:\n-// libstdc++-v3/include/limits:1269:45: warning : use of C++0x long long integer constant [-Wlong-long]\n+// libstdc++-v3/include/limits:1269:45: warning : use of C++11 long long integer constant [-Wlong-long]\n //       min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_LONG_MAX__ - 1; }\n //                                             ^\n-// libstdc++-v3/include/limits:1272:44: warning : use of C++0x long long integer constant [-Wlong-long]\n+// libstdc++-v3/include/limits:1272:44: warning : use of C++11 long long integer constant [-Wlong-long]\n //       max() _GLIBCXX_USE_NOEXCEPT { return __LONG_LONG_MAX__; }\n //                                            ^\n-// libstdc++-v3/include/limits:1342:44: warning : use of C++0x long long integer constant [-Wlong-long]\n+// libstdc++-v3/include/limits:1342:44: warning : use of C++11 long long integer constant [-Wlong-long]\n //       max() _GLIBCXX_USE_NOEXCEPT { return __LONG_LONG_MAX__ * 2ULL + 1\n //                                            ^\n "}, {"sha": "fe97127c92fe88ace1642389980bcd9e82687696", "filename": "gcc/testsuite/g++.dg/cpp1y/system-binary-constants-1.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01187df0970be20c06628f280ce07524db49d585/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fsystem-binary-constants-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01187df0970be20c06628f280ce07524db49d585/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fsystem-binary-constants-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fsystem-binary-constants-1.C?ref=01187df0970be20c06628f280ce07524db49d585", "patch": "@@ -0,0 +1,14 @@\n+// Origin: Dodji Seketeli <dodji@redhat.com>\n+// { dg-options \"-std=c++1y -pedantic-errors\" }\n+// { dg-do compile } \n+\n+#include \"../system-binary-constants-1.h\"\n+\n+int\n+foo (void)\n+{\n+#if BINARY_INT_CONSTANT_IN_SYSTEM_HEADER\n+  return 23;\n+#endif\n+  return 0b1101; // { dg-bogus \"binary constants are a C..1y feature or GCC extension\" }\n+}"}, {"sha": "fbf8bb2c96d037fe898ce7c377dc74fff9d47ede", "filename": "gcc/testsuite/g++.dg/system-binary-constants-1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01187df0970be20c06628f280ce07524db49d585/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fsystem-binary-constants-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01187df0970be20c06628f280ce07524db49d585/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fsystem-binary-constants-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fsystem-binary-constants-1.C?ref=01187df0970be20c06628f280ce07524db49d585", "patch": "@@ -14,5 +14,5 @@ foo (void)\n \t\t\t\t\t    warning.  */\n   return 23;\n #endif\n-  return 0b1101; /* { dg-warning \"binary constants are a GCC extension\" } */\n+  return 0b1101; /* { dg-warning \"binary constants are a C..1y feature or GCC extension\" } */\n }"}, {"sha": "da68e5210a9c1628d6c9dd50698bf87a89b6063e", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01187df0970be20c06628f280ce07524db49d585/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01187df0970be20c06628f280ce07524db49d585/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=01187df0970be20c06628f280ce07524db49d585", "patch": "@@ -1,3 +1,16 @@\n+2013-04-28  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tN3472 binary constants\n+\t* include/cpplib.h (struct cpp_options): Fix a typo in user_literals\n+\tfield comment.  Add binary_constants field.\n+\t* init.c (struct lang_flags): Add binary_constants field.\n+\t(lang_defaults): Add bin_cst column to the table.\n+\t(cpp_set_lang): Initialize CPP_OPTION (pfile, binary_constants).\n+\t* expr.c (cpp_classify_number): Talk about C++11 instead of C++0x\n+\tin diagnostics.  Accept binary constants if\n+\tCPP_OPTION (pfile, binary_constants) even when pedantic.  Adjust\n+\tpedwarn message.\n+\n 2013-04-24  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/cpplib.h (enum c_lang): Add CLK_GNUCXX1Y and CLK_CXX1Y."}, {"sha": "0eb6c13c2f0720344f114d68506494f752217b74", "filename": "libcpp/expr.c", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01187df0970be20c06628f280ce07524db49d585/libcpp%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01187df0970be20c06628f280ce07524db49d585/libcpp%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fexpr.c?ref=01187df0970be20c06628f280ce07524db49d585", "patch": "@@ -621,7 +621,7 @@ cpp_classify_number (cpp_reader *pfile, const cpp_token *token,\n \t  && CPP_OPTION (pfile, cpp_warn_long_long))\n         {\n           const char *message = CPP_OPTION (pfile, cplusplus) \n-\t\t                ? N_(\"use of C++0x long long integer constant\")\n+\t\t\t\t? N_(\"use of C++11 long long integer constant\")\n \t\t                : N_(\"use of C99 long long integer constant\");\n \n \t  if (CPP_OPTION (pfile, c99))\n@@ -639,9 +639,14 @@ cpp_classify_number (cpp_reader *pfile, const cpp_token *token,\n   if ((result & CPP_N_IMAGINARY) && CPP_PEDANTIC (pfile))\n     cpp_error_with_line (pfile, CPP_DL_PEDWARN, virtual_location, 0,\n \t\t\t \"imaginary constants are a GCC extension\");\n-  if (radix == 2 && CPP_PEDANTIC (pfile))\n+  if (radix == 2\n+      && !CPP_OPTION (pfile, binary_constants)\n+      && CPP_PEDANTIC (pfile))\n     cpp_error_with_line (pfile, CPP_DL_PEDWARN, virtual_location, 0,\n-\t\t\t \"binary constants are a GCC extension\");\n+\t\t\t CPP_OPTION (pfile, cplusplus)\n+\t\t\t ? \"binary constants are a C++1y feature \"\n+\t\t\t   \"or GCC extension\"\n+\t\t\t : \"binary constants are a GCC extension\");\n \n   if (radix == 10)\n     result |= CPP_N_DECIMAL;"}, {"sha": "76c297acdcbd4b77149dedd769af54d69b570004", "filename": "libcpp/include/cpplib.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01187df0970be20c06628f280ce07524db49d585/libcpp%2Finclude%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01187df0970be20c06628f280ce07524db49d585/libcpp%2Finclude%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fcpplib.h?ref=01187df0970be20c06628f280ce07524db49d585", "patch": "@@ -423,7 +423,7 @@ struct cpp_options\n   /* True for traditional preprocessing.  */\n   unsigned char traditional;\n \n-  /* Nonzero for C++ 2011 Standard user-defnied literals.  */\n+  /* Nonzero for C++ 2011 Standard user-defined literals.  */\n   unsigned char user_literals;\n \n   /* Nonzero means warn when a string or character literal is followed by a\n@@ -434,6 +434,9 @@ struct cpp_options\n      literal number suffixes as user-defined literal number suffixes.  */\n   unsigned char ext_numeric_literals;\n \n+  /* Nonzero for C++ 2014 Standard binary constants.  */\n+  unsigned char binary_constants;\n+\n   /* Holds the name of the target (execution) character set.  */\n   const char *narrow_charset;\n "}, {"sha": "97510003dd813358ea10315dd95c20720e310309", "filename": "libcpp/init.c", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01187df0970be20c06628f280ce07524db49d585/libcpp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01187df0970be20c06628f280ce07524db49d585/libcpp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finit.c?ref=01187df0970be20c06628f280ce07524db49d585", "patch": "@@ -83,24 +83,25 @@ struct lang_flags\n   char uliterals;\n   char rliterals;\n   char user_literals;\n+  char binary_constants;\n };\n \n static const struct lang_flags lang_defaults[] =\n-{ /*              c99 c++ xnum xid std  //   digr ulit rlit user_literals */\n-  /* GNUC89   */  { 0,  0,  1,   0,  0,   1,   1,   0,   0,    0 },\n-  /* GNUC99   */  { 1,  0,  1,   0,  0,   1,   1,   1,   1,    0 },\n-  /* GNUC11   */  { 1,  0,  1,   0,  0,   1,   1,   1,   1,    0 },\n-  /* STDC89   */  { 0,  0,  0,   0,  1,   0,   0,   0,   0,    0 },\n-  /* STDC94   */  { 0,  0,  0,   0,  1,   0,   1,   0,   0,    0 },\n-  /* STDC99   */  { 1,  0,  1,   0,  1,   1,   1,   0,   0,    0 },\n-  /* STDC11   */  { 1,  0,  1,   0,  1,   1,   1,   1,   0,    0 },\n-  /* GNUCXX   */  { 0,  1,  1,   0,  0,   1,   1,   0,   0,    0 },\n-  /* CXX98    */  { 0,  1,  1,   0,  1,   1,   1,   0,   0,    0 },\n-  /* GNUCXX11 */  { 1,  1,  1,   0,  0,   1,   1,   1,   1,    1 },\n-  /* CXX11    */  { 1,  1,  1,   0,  1,   1,   1,   1,   1,    1 },\n-  /* GNUCXX1Y */  { 1,  1,  1,   0,  0,   1,   1,   1,   1,    1 },\n-  /* CXX1Y    */  { 1,  1,  1,   0,  1,   1,   1,   1,   1,    1 },\n-  /* ASM      */  { 0,  0,  1,   0,  0,   1,   0,   0,   0,    0 }\n+{ /*              c99 c++ xnum xid std  //   digr ulit rlit udlit bin_cst */\n+  /* GNUC89   */  { 0,  0,  1,   0,  0,   1,   1,   0,   0,   0,    0 },\n+  /* GNUC99   */  { 1,  0,  1,   0,  0,   1,   1,   1,   1,   0,    0 },\n+  /* GNUC11   */  { 1,  0,  1,   0,  0,   1,   1,   1,   1,   0,    0 },\n+  /* STDC89   */  { 0,  0,  0,   0,  1,   0,   0,   0,   0,   0,    0 },\n+  /* STDC94   */  { 0,  0,  0,   0,  1,   0,   1,   0,   0,   0,    0 },\n+  /* STDC99   */  { 1,  0,  1,   0,  1,   1,   1,   0,   0,   0,    0 },\n+  /* STDC11   */  { 1,  0,  1,   0,  1,   1,   1,   1,   0,   0,    0 },\n+  /* GNUCXX   */  { 0,  1,  1,   0,  0,   1,   1,   0,   0,   0,    0 },\n+  /* CXX98    */  { 0,  1,  1,   0,  1,   1,   1,   0,   0,   0,    0 },\n+  /* GNUCXX11 */  { 1,  1,  1,   0,  0,   1,   1,   1,   1,   1,    0 },\n+  /* CXX11    */  { 1,  1,  1,   0,  1,   1,   1,   1,   1,   1,    0 },\n+  /* GNUCXX1Y */  { 1,  1,  1,   0,  0,   1,   1,   1,   1,   1,    1 },\n+  /* CXX1Y    */  { 1,  1,  1,   0,  1,   1,   1,   1,   1,   1,    1 },\n+  /* ASM      */  { 0,  0,  1,   0,  0,   1,   0,   0,   0,   0,    0 }\n   /* xid should be 1 for GNUC99, STDC99, GNUCXX, CXX98, GNUCXX11, CXX11,\n      GNUCXX1Y, and CXX1Y when no longer experimental (when all uses of\n      identifiers in the compiler have been audited for correct handling\n@@ -126,6 +127,7 @@ cpp_set_lang (cpp_reader *pfile, enum c_lang lang)\n   CPP_OPTION (pfile, uliterals)\t\t\t = l->uliterals;\n   CPP_OPTION (pfile, rliterals)\t\t\t = l->rliterals;\n   CPP_OPTION (pfile, user_literals)\t\t = l->user_literals;\n+  CPP_OPTION (pfile, binary_constants)\t\t = l->binary_constants;\n }\n \n /* Initialize library global state.  */"}]}