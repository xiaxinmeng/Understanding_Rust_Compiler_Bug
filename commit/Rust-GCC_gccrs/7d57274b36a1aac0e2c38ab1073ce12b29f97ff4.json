{"sha": "7d57274b36a1aac0e2c38ab1073ce12b29f97ff4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Q1NzI3NGIzNmExYWFjMGUyYzM4YWIxMDczY2UxMmIyOWY5N2ZmNA==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2012-11-07T09:28:50Z"}, "committer": {"name": "Martin Jambor", "email": "jamborm@gcc.gnu.org", "date": "2012-11-07T09:28:50Z"}, "message": "lto-cgraph.c: Include tree-pass.h.\n\n2012-11-07  Martin Jambor  <mjambor@suse.cz>\n\n\t* lto-cgraph.c: Include tree-pass.h.\n\t(lto_output_node): Stream node->ipa_transforms_to_apply.\n\t(input_node): Likewise.\n\t* tree-pass.h (passes_by_id): Declare.\n\t(passes_by_id_size): Likewise.\n\t* Makefile.in (lto-cgraph.o): Add TREE_PASS_H to dependencies.\n\nFrom-SVN: r193286", "tree": {"sha": "24551fd105d77f516e3d5fcefd5bfac9a162315d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/24551fd105d77f516e3d5fcefd5bfac9a162315d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7d57274b36a1aac0e2c38ab1073ce12b29f97ff4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d57274b36a1aac0e2c38ab1073ce12b29f97ff4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d57274b36a1aac0e2c38ab1073ce12b29f97ff4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d57274b36a1aac0e2c38ab1073ce12b29f97ff4/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "13412e2fecf048f83a01a28e8712494b36e33e82", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13412e2fecf048f83a01a28e8712494b36e33e82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13412e2fecf048f83a01a28e8712494b36e33e82"}], "stats": {"total": 37, "additions": 36, "deletions": 1}, "files": [{"sha": "0445594efc1a8bbcd18bb411d377a353969cb401", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d57274b36a1aac0e2c38ab1073ce12b29f97ff4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d57274b36a1aac0e2c38ab1073ce12b29f97ff4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7d57274b36a1aac0e2c38ab1073ce12b29f97ff4", "patch": "@@ -1,3 +1,12 @@\n+2012-11-07  Martin Jambor  <mjambor@suse.cz>\n+\n+\t* lto-cgraph.c: Include tree-pass.h.\n+\t(lto_output_node): Stream node->ipa_transforms_to_apply.\n+\t(input_node): Likewise.\n+\t* tree-pass.h (passes_by_id): Declare.\n+\t(passes_by_id_size): Likewise.\n+\t* Makefile.in (lto-cgraph.o): Add TREE_PASS_H to dependencies.\n+\n 2012-11-07  Jan Hubicka  <jh@suse.cz>\n \n \t* ipa-inline-analysis.c (true_predicate, single_cond_predicate,"}, {"sha": "816d150d002d5f530ccaa7a7108a10447290def1", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d57274b36a1aac0e2c38ab1073ce12b29f97ff4/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d57274b36a1aac0e2c38ab1073ce12b29f97ff4/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=7d57274b36a1aac0e2c38ab1073ce12b29f97ff4", "patch": "@@ -2143,7 +2143,7 @@ lto-cgraph.o: lto-cgraph.c $(CONFIG_H) $(SYSTEM_H) coretypes.h   \\\n    $(HASHTAB_H) langhooks.h $(BASIC_BLOCK_H) \\\n    $(TREE_FLOW_H) $(CGRAPH_H) $(FUNCTION_H) $(GGC_H) $(DIAGNOSTIC_CORE_H) \\\n    $(EXCEPT_H) $(TIMEVAR_H) pointer-set.h $(LTO_STREAMER_H) \\\n-   $(GCOV_IO_H) $(DATA_STREAMER_H) $(TREE_STREAMER_H)\n+   $(GCOV_IO_H) $(DATA_STREAMER_H) $(TREE_STREAMER_H) $(TREE_PASS_H)\n lto-streamer-in.o: lto-streamer-in.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    $(TM_H) toplev.h $(DIAGNOSTIC_CORE_H) $(EXPR_H) $(FLAGS_H) $(PARAMS_H) \\\n    input.h $(HASHTAB_H) $(BASIC_BLOCK_H) $(TREE_FLOW_H) $(TREE_PASS_H) \\"}, {"sha": "b52a8e3a55cdc124d55842b795f27c4a949181c0", "filename": "gcc/lto-cgraph.c", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d57274b36a1aac0e2c38ab1073ce12b29f97ff4/gcc%2Flto-cgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d57274b36a1aac0e2c38ab1073ce12b29f97ff4/gcc%2Flto-cgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-cgraph.c?ref=7d57274b36a1aac0e2c38ab1073ce12b29f97ff4", "patch": "@@ -45,6 +45,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"data-streamer.h\"\n #include \"tree-streamer.h\"\n #include \"gcov-io.h\"\n+#include \"tree-pass.h\"\n \n static void output_cgraph_opt_summary (void);\n static void input_cgraph_opt_summary (VEC (symtab_node, heap) * nodes);\n@@ -377,6 +378,8 @@ lto_output_node (struct lto_simple_output_block *ob, struct cgraph_node *node,\n   intptr_t ref;\n   bool in_other_partition = false;\n   struct cgraph_node *clone_of;\n+  struct ipa_opt_pass_d *pass;\n+  int i;\n \n   boundary_p = !lto_symtab_encoder_in_partition_p (encoder, (symtab_node)node);\n \n@@ -432,6 +435,12 @@ lto_output_node (struct lto_simple_output_block *ob, struct cgraph_node *node,\n   streamer_write_hwi_stream (ob->main_stream, node->count);\n   streamer_write_hwi_stream (ob->main_stream, node->count_materialization_scale);\n \n+  streamer_write_hwi_stream (ob->main_stream,\n+\t\t\t     VEC_length (ipa_opt_pass,\n+\t\t\t\t\t node->ipa_transforms_to_apply));\n+  FOR_EACH_VEC_ELT (ipa_opt_pass, node->ipa_transforms_to_apply, i, pass)\n+    streamer_write_hwi_stream (ob->main_stream, pass->pass.static_pass_number);\n+\n   if (tag == LTO_symtab_analyzed_node)\n     {\n       if (node->global.inlined_to)\n@@ -897,6 +906,7 @@ input_node (struct lto_file_decl_data *file_data,\n   int ref = LCC_NOT_FOUND, ref2 = LCC_NOT_FOUND;\n   int clone_ref;\n   int order;\n+  int i, count;\n \n   order = streamer_read_hwi (ib) + order_base;\n   clone_ref = streamer_read_hwi (ib);\n@@ -919,6 +929,19 @@ input_node (struct lto_file_decl_data *file_data,\n   node->count = streamer_read_hwi (ib);\n   node->count_materialization_scale = streamer_read_hwi (ib);\n \n+  count = streamer_read_hwi (ib);\n+  node->ipa_transforms_to_apply = NULL;\n+  for (i = 0; i < count; i++)\n+    {\n+      struct opt_pass *pass;\n+      int pid = streamer_read_hwi (ib);\n+\n+      gcc_assert (pid < passes_by_id_size);\n+      pass = passes_by_id[pid];\n+      VEC_safe_push (ipa_opt_pass, heap, node->ipa_transforms_to_apply,\n+\t\t     (struct ipa_opt_pass_d *) pass);\n+    }\n+\n   if (tag == LTO_symtab_analyzed_node)\n     ref = streamer_read_hwi (ib);\n "}, {"sha": "09ec531f27bf97a115461c17ca821aed36c11c3d", "filename": "gcc/tree-pass.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d57274b36a1aac0e2c38ab1073ce12b29f97ff4/gcc%2Ftree-pass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d57274b36a1aac0e2c38ab1073ce12b29f97ff4/gcc%2Ftree-pass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pass.h?ref=7d57274b36a1aac0e2c38ab1073ce12b29f97ff4", "patch": "@@ -544,6 +544,9 @@ extern void register_pass (struct register_pass_info *);\n    directly in jump threading, and avoid peeling them next time.  */\n extern bool first_pass_instance;\n \n+extern struct opt_pass **passes_by_id;\n+extern int passes_by_id_size;\n+\n /* Declare for plugins.  */\n extern void do_per_function_toporder (void (*) (void *), void *);\n "}]}