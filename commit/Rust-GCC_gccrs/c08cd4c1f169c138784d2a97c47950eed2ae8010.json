{"sha": "c08cd4c1f169c138784d2a97c47950eed2ae8010", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzA4Y2Q0YzFmMTY5YzEzODc4NGQyYTk3YzQ3OTUwZWVkMmFlODAxMA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2006-09-07T01:12:00Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2006-09-07T01:12:00Z"}, "message": "re PR c++/27371 (Does not warn about unused function result (__attribute__((warn_unused_result))))\n\n        PR c++/27371\n        * tree-inline.c (copy_result_decl_to_var): New fn.\n        (declare_return_variable): Use it.  Call declare_inline_vars here.\n        (expand_call_inline): Not here.\n        * cp/cvt.c (convert_to_void): Strip useless TARGET_EXPR.\n        * cp/cp-tree.h (TARGET_EXPR_IMPLICIT_P): New macro.\n        * cp/tree.c (build_cplus_new): Set it.\n\nFrom-SVN: r116737", "tree": {"sha": "fa6902959ab6f3daa9d485ce7bc53e67d2c28f3b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fa6902959ab6f3daa9d485ce7bc53e67d2c28f3b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c08cd4c1f169c138784d2a97c47950eed2ae8010", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c08cd4c1f169c138784d2a97c47950eed2ae8010", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c08cd4c1f169c138784d2a97c47950eed2ae8010", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c08cd4c1f169c138784d2a97c47950eed2ae8010/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6ee3ffe85ea599b1d977615ee31b8421563312c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ee3ffe85ea599b1d977615ee31b8421563312c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ee3ffe85ea599b1d977615ee31b8421563312c0"}], "stats": {"total": 92, "additions": 85, "deletions": 7}, "files": [{"sha": "dd1101499a54ca5df1f22a727b50e09bc1575a70", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c08cd4c1f169c138784d2a97c47950eed2ae8010/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c08cd4c1f169c138784d2a97c47950eed2ae8010/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c08cd4c1f169c138784d2a97c47950eed2ae8010", "patch": "@@ -1,3 +1,10 @@\n+2006-09-06  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/27371\n+\t* tree-inline.c (copy_result_decl_to_var): New fn.\n+\t(declare_return_variable): Use it.  Call declare_inline_vars here.\n+\t(expand_call_inline): Not here.\n+\n 2006-09-06  Diego Novillo  <dnovillo@redhat.com>\n \n \t* doc/contrib.texi: Update my entry."}, {"sha": "9e17ccef773b35605f8ae63ba528cd6083f96cbf", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c08cd4c1f169c138784d2a97c47950eed2ae8010/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c08cd4c1f169c138784d2a97c47950eed2ae8010/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c08cd4c1f169c138784d2a97c47950eed2ae8010", "patch": "@@ -10,6 +10,11 @@\n \n 2006-09-06  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/27371\n+\t* cvt.c (convert_to_void): Strip useless TARGET_EXPR.\n+\t* cp-tree.h (TARGET_EXPR_IMPLICIT_P): New macro.\n+\t* tree.c (build_cplus_new): Set it.\n+\n \tPR c++/26696\n \t* cvt.c (convert_to_void): Replace a subexpression with no side \n \teffects with void_zero_node."}, {"sha": "f864487702758553452c152338cbc4057a701242", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c08cd4c1f169c138784d2a97c47950eed2ae8010/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c08cd4c1f169c138784d2a97c47950eed2ae8010/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=c08cd4c1f169c138784d2a97c47950eed2ae8010", "patch": "@@ -55,6 +55,7 @@ struct diagnostic_context;\n       OMP_ATOMIC_DEPENDENT_P (in OMP_ATOMIC)\n       OMP_FOR_GIMPLIFYING_P (in OMP_FOR)\n       BASELINK_QUALIFIED_P (in BASELINK)\n+      TARGET_EXPR_IMPLICIT_P (in TARGET_EXPR)\n    1: IDENTIFIER_VIRTUAL_P (in IDENTIFIER_NODE)\n       TI_PENDING_TEMPLATE_FLAG.\n       TEMPLATE_PARMS_FOR_INLINE.\n@@ -3091,6 +3092,11 @@ extern void decl_shadowed_for_var_insert (tree, tree);\n    expression statement.  */\n #define EXPR_STMT_EXPR(NODE)\tTREE_OPERAND (EXPR_STMT_CHECK (NODE), 0)\n \n+/* True if this TARGET_EXPR was created by build_cplus_new, and so we can\n+   discard it if it isn't useful.  */\n+#define TARGET_EXPR_IMPLICIT_P(NODE) \\\n+  TREE_LANG_FLAG_0 (TARGET_EXPR_CHECK (NODE))\n+\n /* An enumeration of the kind of tags that C++ accepts.  */\n enum tag_types {\n   none_type = 0, /* Not a tag type.  */"}, {"sha": "52b5be46eeb77e4c314eeff865ddab400cdcae5d", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c08cd4c1f169c138784d2a97c47950eed2ae8010/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c08cd4c1f169c138784d2a97c47950eed2ae8010/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=c08cd4c1f169c138784d2a97c47950eed2ae8010", "patch": "@@ -892,6 +892,25 @@ convert_to_void (tree expr, const char *implicit)\n \tbreak;\n       }\n \n+    case TARGET_EXPR:\n+      /* Don't bother with the temporary object returned from a function if\n+\t we don't use it and don't need to destroy it.  We'll still\n+\t allocate space for it in expand_call or declare_return_variable,\n+\t but we don't need to track it through all the tree phases.  */\n+      if (0 && TARGET_EXPR_IMPLICIT_P (expr)\n+\t  && TYPE_HAS_TRIVIAL_DESTRUCTOR (TREE_TYPE (expr)))\n+\t{\n+\t  tree init = TARGET_EXPR_INITIAL (expr);\n+\t  if (TREE_CODE (init) == AGGR_INIT_EXPR\n+\t      && !AGGR_INIT_VIA_CTOR_P (init))\n+\t    {\n+\t      tree fn = TREE_OPERAND (init, 0);\n+\t      expr = build3 (CALL_EXPR, TREE_TYPE (TREE_TYPE (TREE_TYPE (fn))),\n+\t\t\t     fn, TREE_OPERAND (init, 1), NULL_TREE);\n+\t    }\n+\t}\n+      break;\n+\n     default:;\n     }\n   {"}, {"sha": "526077a43e9b9282910a0c01a5ebad388a1b1fc4", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c08cd4c1f169c138784d2a97c47950eed2ae8010/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c08cd4c1f169c138784d2a97c47950eed2ae8010/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=c08cd4c1f169c138784d2a97c47950eed2ae8010", "patch": "@@ -312,6 +312,7 @@ build_cplus_new (tree type, tree init)\n     rval = init;\n \n   rval = build_target_expr (slot, rval);\n+  TARGET_EXPR_IMPLICIT_P (rval) = 1;\n \n   return rval;\n }"}, {"sha": "1b9ef8af786bfe8f695335ad0cce7d95f48a389f", "filename": "gcc/testsuite/g++.dg/warn/unused-result1.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c08cd4c1f169c138784d2a97c47950eed2ae8010/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Funused-result1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c08cd4c1f169c138784d2a97c47950eed2ae8010/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Funused-result1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Funused-result1.C?ref=c08cd4c1f169c138784d2a97c47950eed2ae8010", "patch": "@@ -0,0 +1,10 @@\n+// PR c++/27371\n+\n+class QByteArray {\n+public:\n+  QByteArray(const QByteArray &);\n+};\n+class QString {\n+  QByteArray toLocal8Bit() const __attribute__ ((warn_unused_result));\n+  void fooWarnHere() const { toLocal8Bit(); } // { dg-warning \"ignoring\" }\n+};"}, {"sha": "baca834048603c9c9b971ec5114df2858cff65c8", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 37, "deletions": 7, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c08cd4c1f169c138784d2a97c47950eed2ae8010/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c08cd4c1f169c138784d2a97c47950eed2ae8010/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=c08cd4c1f169c138784d2a97c47950eed2ae8010", "patch": "@@ -120,6 +120,7 @@ static void declare_inline_vars (tree, tree);\n static void remap_save_expr (tree *, void *, int *);\n static void add_lexical_block (tree current_block, tree new_block);\n static tree copy_decl_to_var (tree, copy_body_data *);\n+static tree copy_result_decl_to_var (tree, copy_body_data *);\n static tree copy_decl_no_change (tree, copy_body_data *);\n static tree copy_decl_maybe_to_var (tree, copy_body_data *);\n \n@@ -1261,7 +1262,7 @@ declare_return_variable (copy_body_data *id, tree return_slot_addr,\n \n   gcc_assert (TREE_CODE (TYPE_SIZE_UNIT (callee_type)) == INTEGER_CST);\n \n-  var = copy_decl_to_var (result, id);\n+  var = copy_result_decl_to_var (result, id);\n \n   DECL_SEEN_IN_BIND_EXPR_P (var) = 1;\n   DECL_STRUCT_FUNCTION (caller)->unexpanded_var_list\n@@ -1272,6 +1273,8 @@ declare_return_variable (copy_body_data *id, tree return_slot_addr,\n      not be visible to the user.  */\n   TREE_NO_WARNING (var) = 1;\n \n+  declare_inline_vars (id->block, var);\n+\n   /* Build the use expr.  If the return type of the function was\n      promoted, convert it back to the expected type.  */\n   use = var;\n@@ -1280,6 +1283,9 @@ declare_return_variable (copy_body_data *id, tree return_slot_addr,\n     \n   STRIP_USELESS_TYPE_CONVERSION (use);\n \n+  if (DECL_BY_REFERENCE (result))\n+    var = build_fold_addr_expr (var);\n+\n  done:\n   /* Register the VAR_DECL as the equivalent for the RESULT_DECL; that\n      way, when the RESULT_DECL is encountered, it will be\n@@ -1926,7 +1932,6 @@ expand_call_inline (basic_block bb, tree stmt, tree *tp, void *data)\n   bool successfully_inlined = FALSE;\n   tree t_step;\n   tree var;\n-  tree decl;\n \n   /* See what we've got.  */\n   id = (copy_body_data *) data;\n@@ -2103,11 +2108,8 @@ expand_call_inline (basic_block bb, tree stmt, tree *tp, void *data)\n     modify_dest = NULL;\n \n   /* Declare the return variable for the function.  */\n-  decl = declare_return_variable (id, return_slot_addr,\n-\t\t\t          modify_dest, &use_retvar);\n-  /* Do this only if declare_return_variable created a new one.  */\n-  if (decl && !return_slot_addr && decl != modify_dest)\n-    declare_inline_vars (id->block, decl);\n+  declare_return_variable (id, return_slot_addr,\n+\t\t\t   modify_dest, &use_retvar);\n \n   /* This is it.  Duplicate the callee body.  Assume callee is\n      pre-gimplified.  Note that we must not alter the caller\n@@ -2630,6 +2632,34 @@ copy_decl_to_var (tree decl, copy_body_data *id)\n   return copy_decl_for_dup_finish (id, decl, copy);\n }\n \n+/* Like copy_decl_to_var, but create a return slot object instead of a\n+   pointer variable for return by invisible reference.  */\n+\n+static tree\n+copy_result_decl_to_var (tree decl, copy_body_data *id)\n+{\n+  tree copy, type;\n+\n+  gcc_assert (TREE_CODE (decl) == PARM_DECL\n+\t      || TREE_CODE (decl) == RESULT_DECL);\n+\n+  type = TREE_TYPE (decl);\n+  if (DECL_BY_REFERENCE (decl))\n+    type = TREE_TYPE (type);\n+\n+  copy = build_decl (VAR_DECL, DECL_NAME (decl), type);\n+  TREE_READONLY (copy) = TREE_READONLY (decl);\n+  TREE_THIS_VOLATILE (copy) = TREE_THIS_VOLATILE (decl);\n+  if (!DECL_BY_REFERENCE (decl))\n+    {\n+      TREE_ADDRESSABLE (copy) = TREE_ADDRESSABLE (decl);\n+      DECL_COMPLEX_GIMPLE_REG_P (copy) = DECL_COMPLEX_GIMPLE_REG_P (decl);\n+    }\n+\n+  return copy_decl_for_dup_finish (id, decl, copy);\n+}\n+\n+\n static tree\n copy_decl_no_change (tree decl, copy_body_data *id)\n {"}]}