{"sha": "22d035258b7dcb4e0414d413e32d20a8d8e3cdfe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjJkMDM1MjU4YjdkY2I0ZTA0MTRkNDEzZTMyZDIwYThkOGUzY2RmZQ==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2015-06-26T19:55:12Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2015-06-26T19:55:12Z"}, "message": "array-notation-common.c (find_rank): Use INDIRECT_REF_P.\n\n\t* array-notation-common.c (find_rank): Use INDIRECT_REF_P.\n\t* c-common.c (c_fully_fold_internal): Likewise.\n\t(c_alignof_expr): Likewise.\n\t* c-pretty-print.c (c_pretty_printer::postfix_expression): Likewise.\n\t* c-ubsan.c (ubsan_instrument_bounds): Likewise.\n\t* cilk.c (create_parm_list): Likewise. \n\n\t* c-array-notation.c (fix_builtin_array_notation_fn): Use\n\tINDIRECT_REF_P.\n\t* c-typeck.c (array_to_pointer_conversion): Likewise.\n\t(build_unary_op): Likewise.\n\t(c_finish_return): Likewise.\n\nFrom-SVN: r225080", "tree": {"sha": "ec115bec7a7a3f95f3ee52ded9cc7d29440b574b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ec115bec7a7a3f95f3ee52ded9cc7d29440b574b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/22d035258b7dcb4e0414d413e32d20a8d8e3cdfe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22d035258b7dcb4e0414d413e32d20a8d8e3cdfe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22d035258b7dcb4e0414d413e32d20a8d8e3cdfe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22d035258b7dcb4e0414d413e32d20a8d8e3cdfe/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "504a5fe6fd6fad3f577c899e37988b8cbb17244b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/504a5fe6fd6fad3f577c899e37988b8cbb17244b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/504a5fe6fd6fad3f577c899e37988b8cbb17244b"}], "stats": {"total": 45, "additions": 30, "deletions": 15}, "files": [{"sha": "512af7c9673d52ca8b053561d286dc72d5010649", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22d035258b7dcb4e0414d413e32d20a8d8e3cdfe/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22d035258b7dcb4e0414d413e32d20a8d8e3cdfe/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=22d035258b7dcb4e0414d413e32d20a8d8e3cdfe", "patch": "@@ -1,3 +1,12 @@\n+2015-06-26  Marek Polacek  <polacek@redhat.com>\n+\n+\t* array-notation-common.c (find_rank): Use INDIRECT_REF_P.\n+\t* c-common.c (c_fully_fold_internal): Likewise.\n+\t(c_alignof_expr): Likewise.\n+\t* c-pretty-print.c (c_pretty_printer::postfix_expression): Likewise.\n+\t* c-ubsan.c (ubsan_instrument_bounds): Likewise.\n+\t* cilk.c (create_parm_list): Likewise. \n+\n 2015-06-26  Marek Polacek  <polacek@redhat.com>\n \n \t* c-common.c (handle_unused_attribute): Use VAR_OR_FUNCTION_DECL_P."}, {"sha": "f75936ad8527731c9b61035066d248219d560935", "filename": "gcc/c-family/array-notation-common.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22d035258b7dcb4e0414d413e32d20a8d8e3cdfe/gcc%2Fc-family%2Farray-notation-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22d035258b7dcb4e0414d413e32d20a8d8e3cdfe/gcc%2Fc-family%2Farray-notation-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Farray-notation-common.c?ref=22d035258b7dcb4e0414d413e32d20a8d8e3cdfe", "patch": "@@ -228,7 +228,7 @@ find_rank (location_t loc, tree orig_expr, tree expr, bool ignore_builtin_fn,\n \t      ii_tree = ARRAY_NOTATION_ARRAY (ii_tree);\n \t    }\n \t  else if (handled_component_p (ii_tree)\n-\t\t   || TREE_CODE (ii_tree) == INDIRECT_REF)\n+\t\t   || INDIRECT_REF_P (ii_tree))\n \t    ii_tree = TREE_OPERAND (ii_tree, 0);\n \t  else if (TREE_CODE (ii_tree) == PARM_DECL\n \t\t   || VAR_P (ii_tree))"}, {"sha": "5cc65ec84d82bf016c086904db0e0d9bc06f567b", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22d035258b7dcb4e0414d413e32d20a8d8e3cdfe/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22d035258b7dcb4e0414d413e32d20a8d8e3cdfe/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=22d035258b7dcb4e0414d413e32d20a8d8e3cdfe", "patch": "@@ -1436,7 +1436,7 @@ c_fully_fold_internal (tree expr, bool in_init, bool *maybe_const_operands,\n       if (op0 != orig_op0\n \t  && code == ADDR_EXPR\n \t  && (op1 = get_base_address (op0)) != NULL_TREE\n-\t  && TREE_CODE (op1) == INDIRECT_REF\n+\t  && INDIRECT_REF_P (op1)\n \t  && TREE_CONSTANT (TREE_OPERAND (op1, 0)))\n \tret = fold_convert_loc (loc, TREE_TYPE (expr), fold_offsetof_1 (op0));\n       else if (op0 != orig_op0 || in_init)\n@@ -1447,7 +1447,7 @@ c_fully_fold_internal (tree expr, bool in_init, bool *maybe_const_operands,\n \tret = fold (expr);\n       if (code == INDIRECT_REF\n \t  && ret != expr\n-\t  && TREE_CODE (ret) == INDIRECT_REF)\n+\t  && INDIRECT_REF_P (ret))\n \t{\n \t  TREE_READONLY (ret) = TREE_READONLY (expr);\n \t  TREE_SIDE_EFFECTS (ret) = TREE_SIDE_EFFECTS (expr);\n@@ -5377,7 +5377,7 @@ c_alignof_expr (location_t loc, tree expr)\n \t   && TREE_CODE (TREE_OPERAND (expr, 1)) == FIELD_DECL)\n     t = size_int (DECL_ALIGN_UNIT (TREE_OPERAND (expr, 1)));\n \n-  else if (TREE_CODE (expr) == INDIRECT_REF)\n+  else if (INDIRECT_REF_P (expr))\n     {\n       tree t = TREE_OPERAND (expr, 0);\n       tree best = t;"}, {"sha": "4be1d4f332f6944357a31bacd6858f44a0ef56bd", "filename": "gcc/c-family/c-pretty-print.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22d035258b7dcb4e0414d413e32d20a8d8e3cdfe/gcc%2Fc-family%2Fc-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22d035258b7dcb4e0414d413e32d20a8d8e3cdfe/gcc%2Fc-family%2Fc-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-pretty-print.c?ref=22d035258b7dcb4e0414d413e32d20a8d8e3cdfe", "patch": "@@ -1607,7 +1607,7 @@ c_pretty_printer::postfix_expression (tree e)\n     case COMPONENT_REF:\n       {\n \ttree object = TREE_OPERAND (e, 0);\n-\tif (TREE_CODE (object) == INDIRECT_REF)\n+\tif (INDIRECT_REF_P (object))\n \t  {\n \t    postfix_expression (TREE_OPERAND (object, 0));\n \t    pp_c_arrow (this);"}, {"sha": "5a95236f003db699e46101f7656997ab26b0fe22", "filename": "gcc/c-family/c-ubsan.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22d035258b7dcb4e0414d413e32d20a8d8e3cdfe/gcc%2Fc-family%2Fc-ubsan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22d035258b7dcb4e0414d413e32d20a8d8e3cdfe/gcc%2Fc-family%2Fc-ubsan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-ubsan.c?ref=22d035258b7dcb4e0414d413e32d20a8d8e3cdfe", "patch": "@@ -290,8 +290,7 @@ ubsan_instrument_bounds (location_t loc, tree array, tree *index,\n   tree base = get_base_address (array);\n   if ((flag_sanitize & SANITIZE_BOUNDS_STRICT) == 0\n       && TREE_CODE (array) == COMPONENT_REF\n-      && base && (TREE_CODE (base) == INDIRECT_REF\n-\t\t  || TREE_CODE (base) == MEM_REF))\n+      && base && (INDIRECT_REF_P (base) || TREE_CODE (base) == MEM_REF))\n     {\n       tree next = NULL_TREE;\n       tree cref = array;"}, {"sha": "4f8026fdb443917f6920d0292bfbdd3870000318", "filename": "gcc/c-family/cilk.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22d035258b7dcb4e0414d413e32d20a8d8e3cdfe/gcc%2Fc-family%2Fcilk.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22d035258b7dcb4e0414d413e32d20a8d8e3cdfe/gcc%2Fc-family%2Fcilk.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fcilk.c?ref=22d035258b7dcb4e0414d413e32d20a8d8e3cdfe", "patch": "@@ -392,7 +392,7 @@ create_parm_list (struct wrapper_data *wd, tree *val0, tree arg)\n \n       val = TREE_OPERAND (val, 0);\n       *val0 = val;\n-      gcc_assert (TREE_CODE (val) == INDIRECT_REF);\n+      gcc_assert (INDIRECT_REF_P (val));\n       parm = TREE_OPERAND (val, 0);\n       STRIP_NOPS (parm);\n     }"}, {"sha": "f6829024f38b1071a3c496537c622a628f3cdec8", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22d035258b7dcb4e0414d413e32d20a8d8e3cdfe/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22d035258b7dcb4e0414d413e32d20a8d8e3cdfe/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=22d035258b7dcb4e0414d413e32d20a8d8e3cdfe", "patch": "@@ -1,3 +1,11 @@\n+2015-06-26  Marek Polacek  <polacek@redhat.com>\n+\n+\t* c-array-notation.c (fix_builtin_array_notation_fn): Use\n+\tINDIRECT_REF_P.\n+\t* c-typeck.c (array_to_pointer_conversion): Likewise.\n+\t(build_unary_op): Likewise.\n+\t(c_finish_return): Likewise.\n+\n 2015-06-25  Andrew MacLeod  <amacleod@redhat.com>\n \n \t* c-decl.c: Remove ipa-ref.h and plugin-api.h from include list."}, {"sha": "e6a1539cda951c8c3e6f30371437dc9af5ac1235", "filename": "gcc/c/c-array-notation.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22d035258b7dcb4e0414d413e32d20a8d8e3cdfe/gcc%2Fc%2Fc-array-notation.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22d035258b7dcb4e0414d413e32d20a8d8e3cdfe/gcc%2Fc%2Fc-array-notation.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-array-notation.c?ref=22d035258b7dcb4e0414d413e32d20a8d8e3cdfe", "patch": "@@ -324,7 +324,7 @@ fix_builtin_array_notation_fn (tree an_builtin_fn, tree *new_var)\n     array_ind_value = build_decl (location, VAR_DECL, NULL_TREE, \n \t\t\t\t  TREE_TYPE (func_parm));\n   array_op0 = (*array_operand)[0];\n-  if (TREE_CODE (array_op0) == INDIRECT_REF)\n+  if (INDIRECT_REF_P (array_op0))\n     array_op0 = TREE_OPERAND (array_op0, 0);\n   switch (an_type)\n     {"}, {"sha": "60d6ed85ba3c30554094140e2d88d4a359c9b7c6", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22d035258b7dcb4e0414d413e32d20a8d8e3cdfe/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22d035258b7dcb4e0414d413e32d20a8d8e3cdfe/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=22d035258b7dcb4e0414d413e32d20a8d8e3cdfe", "patch": "@@ -1826,7 +1826,7 @@ array_to_pointer_conversion (location_t loc, tree exp)\n \n   ptrtype = build_pointer_type (restype);\n \n-  if (TREE_CODE (exp) == INDIRECT_REF)\n+  if (INDIRECT_REF_P (exp))\n     return convert (ptrtype, TREE_OPERAND (exp, 0));\n \n   /* In C++ array compound literals are temporary objects unless they are\n@@ -4146,12 +4146,11 @@ build_unary_op (location_t location,\n \t unary '*' operator.  */\n       if (VOID_TYPE_P (TREE_TYPE (arg))\n \t  && TYPE_QUALS (TREE_TYPE (arg)) == TYPE_UNQUALIFIED\n-\t  && (TREE_CODE (arg) != INDIRECT_REF\n-\t      || !flag_isoc99))\n+\t  && (!INDIRECT_REF_P (arg) || !flag_isoc99))\n \tpedwarn (location, 0, \"taking address of expression of type %<void%>\");\n \n       /* Let &* cancel out to simplify resulting code.  */\n-      if (TREE_CODE (arg) == INDIRECT_REF)\n+      if (INDIRECT_REF_P (arg))\n \t{\n \t  /* Don't let this be an lvalue.  */\n \t  if (lvalue_p (TREE_OPERAND (arg, 0)))\n@@ -4220,7 +4219,7 @@ build_unary_op (location_t location,\n       /* ??? Cope with user tricks that amount to offsetof.  Delete this\n \t when we have proper support for integer constant expressions.  */\n       val = get_base_address (arg);\n-      if (val && TREE_CODE (val) == INDIRECT_REF\n+      if (val && INDIRECT_REF_P (val)\n           && TREE_CONSTANT (TREE_OPERAND (val, 0)))\n \t{\n \t  ret = fold_convert_loc (location, argtype, fold_offsetof_1 (arg));\n@@ -9465,7 +9464,7 @@ c_finish_return (location_t loc, tree retval, tree origtype)\n \t      inner = TREE_OPERAND (inner, 0);\n \n \t      while (REFERENCE_CLASS_P (inner)\n-\t\t     && TREE_CODE (inner) != INDIRECT_REF)\n+\t\t     && !INDIRECT_REF_P (inner))\n \t\tinner = TREE_OPERAND (inner, 0);\n \n \t      if (DECL_P (inner)"}]}