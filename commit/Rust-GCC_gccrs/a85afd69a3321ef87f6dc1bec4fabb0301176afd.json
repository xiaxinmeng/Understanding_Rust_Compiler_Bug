{"sha": "a85afd69a3321ef87f6dc1bec4fabb0301176afd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTg1YWZkNjlhMzMyMWVmODdmNmRjMWJlYzRmYWJiMDMwMTE3NmFmZA==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2001-05-02T05:50:20Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2001-05-02T05:50:20Z"}, "message": "sbuf_iter.h (istreambuf_iterator): Correct.\n\n\n2001-05-01  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* include/bits/sbuf_iter.h (istreambuf_iterator): Correct.\n\t* testsuite/24_iterators/istreambuf_iterator.cc (test02): Add test.\n\n\t* include/bits/std_sstream.h (stringbuf): Leak\n\tcopied string.\n\t* testsuite/24_iterators/ostreambuf_iterator.cc: Correct.\n\nFrom-SVN: r41755", "tree": {"sha": "8d0c04e05b848b07f2a4a90dc2096813f1c4b410", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8d0c04e05b848b07f2a4a90dc2096813f1c4b410"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a85afd69a3321ef87f6dc1bec4fabb0301176afd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a85afd69a3321ef87f6dc1bec4fabb0301176afd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a85afd69a3321ef87f6dc1bec4fabb0301176afd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a85afd69a3321ef87f6dc1bec4fabb0301176afd/comments", "author": null, "committer": null, "parents": [{"sha": "0a5fee3256ec62528a5aba473854929be72a4c3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a5fee3256ec62528a5aba473854929be72a4c3a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a5fee3256ec62528a5aba473854929be72a4c3a"}], "stats": {"total": 98, "additions": 75, "deletions": 23}, "files": [{"sha": "49a8cf8b49eb61442c23b63db557056a54fefaeb", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a85afd69a3321ef87f6dc1bec4fabb0301176afd/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a85afd69a3321ef87f6dc1bec4fabb0301176afd/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a85afd69a3321ef87f6dc1bec4fabb0301176afd", "patch": "@@ -1,3 +1,12 @@\n+2001-05-01  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* include/bits/sbuf_iter.h (istreambuf_iterator): Correct.\n+\t* testsuite/24_iterators/istreambuf_iterator.cc (test02): Add test.\n+\n+\t* include/bits/std_sstream.h (stringbuf): Leak\n+\tcopied string.\n+\t* testsuite/24_iterators/ostreambuf_iterator.cc: Correct.\n+\t\n 2001-05-01  Tom Browder  <tbrowder@home.com>\n \n \t* docs/html/ext/howto.html:  Fix typo."}, {"sha": "4935c11d5b130d08c482c781ad68d41aa0cfdf94", "filename": "libstdc++-v3/include/bits/sbuf_iter.h", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a85afd69a3321ef87f6dc1bec4fabb0301176afd/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fsbuf_iter.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a85afd69a3321ef87f6dc1bec4fabb0301176afd/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fsbuf_iter.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fsbuf_iter.h?ref=a85afd69a3321ef87f6dc1bec4fabb0301176afd", "patch": "@@ -141,18 +141,15 @@ namespace std\n \treturn *this; \n       }\n \n-#ifdef _GLIBCPP_RESOLVE_LIB_DEFECTS\n-      // 14882 says return a proxy object. It should be a const\n-      // proxy object, but since this class is not mandated, it\n-      // should allow this signature:\n-      const __istreambufiter_type\n+      __istreambufiter_type\n       operator++(int)\n       {\n+\t__istreambufiter_type __old = *this;\n \tif (_M_sbuf)\n-\t  _M_c = _M_sbuf->sbumpc();\n-\treturn *this; \n+\t  __old._M_c = _M_sbuf->sbumpc();\n+\t_M_c = -2;\n+\treturn __old; \n       }\n-#endif\n \n       bool \n       equal(const __istreambufiter_type& __b)\n@@ -205,3 +202,6 @@ namespace std\n } // namespace std\n \n #endif\n+\n+\n+"}, {"sha": "0da71e4acb51d8f3b0f7a47cfae30253f99b69d6", "filename": "libstdc++-v3/include/bits/std_sstream.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a85afd69a3321ef87f6dc1bec4fabb0301176afd/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_sstream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a85afd69a3321ef87f6dc1bec4fabb0301176afd/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_sstream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_sstream.h?ref=a85afd69a3321ef87f6dc1bec4fabb0301176afd", "patch": "@@ -71,16 +71,14 @@ namespace std\n       explicit \n       basic_stringbuf(const __string_type& __str,\n \t\t      ios_base::openmode __mode = ios_base::in | ios_base::out)\n-      : __streambuf_type(), _M_string(__str)\n+      : __streambuf_type(), _M_string(__str.c_str())\n       { _M_stringbuf_init(__mode); }\n \n       // Get and set:\n       __string_type \n       str() const \n       {\n-\tif (_M_mode & ios_base::in && !(_M_mode & ios_base::out))\n-\t  return _M_string; \n-\telse\n+\tif (_M_mode & ios_base::out)\n \t  {\n \t    // This is the deal: _M_string.size() is value that\n \t    // represents the size of the intial string that makes\n@@ -91,6 +89,8 @@ namespace std\n \t      __len = max(__size_type(_M_out_end - _M_out_beg), __len);\n \t    return __string_type(_M_out_beg, _M_out_beg + __len);\n \t  }\n+\telse\n+\t  return _M_string;\n       }\n \n       void \n@@ -121,7 +121,7 @@ namespace std\n \tif (_M_mode & ios_base::ate)\n \t  _M_really_sync(0, _M_buf_size); \n \telse  \n-\t  _M_really_sync(0, 0); \n+\t  _M_really_sync(0, 0);\n       }\n \n       // Overridden virtual functions:"}, {"sha": "8325c97fa3b229a5ff065d4572981472ceb46f37", "filename": "libstdc++-v3/testsuite/24_iterators/istreambuf_iterator.cc", "status": "modified", "additions": 39, "deletions": 2, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a85afd69a3321ef87f6dc1bec4fabb0301176afd/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fistreambuf_iterator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a85afd69a3321ef87f6dc1bec4fabb0301176afd/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fistreambuf_iterator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fistreambuf_iterator.cc?ref=a85afd69a3321ef87f6dc1bec4fabb0301176afd", "patch": "@@ -1,6 +1,6 @@\n // 1999-06-28 bkoz\n \n-// Copyright (C) 1999 Free Software Foundation, Inc.\n+// Copyright (C) 1999, 2001 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -102,7 +102,7 @@ bool test01(void)\n \n   std::istringstream istrs02(str01);\n   cistreambuf_iter istrb_it28(istrs02);\n-  for (int i = 0; i < sizeof(slit01) - 3;)\n+  for (int i = 0; i < sizeof(slit01) - 2;)\n     {\n       c = *++istrb_it28;\n       VERIFY( c == slit01[++i] );\n@@ -115,9 +115,46 @@ bool test01(void)\n   return test;\n }\n \n+// libstdc++/2627\n+void test02()\n+{\n+  bool test = true;\n+  const std::string s(\"free the vieques\");\n+\n+  // 1\n+  std::string res_postfix;\n+  std::istringstream iss01(s);\n+  std::istreambuf_iterator<char> isbufit01(iss01);\n+  for (int j = 0; j < s.size(); ++j, isbufit01++)\n+    res_postfix += *isbufit01;\n+\n+  // 2\n+  std::string res_prefix;\n+  std::istringstream iss02(s);\n+  std::istreambuf_iterator<char> isbufit02(iss02);\n+  for (int j = 0; j < s.size(); ++j, ++isbufit02)\n+    res_prefix += *isbufit02;\n+\n+  // 3 mixed\n+  std::string res_mixed;\n+  std::istringstream iss03(s);\n+  std::istreambuf_iterator<char> isbufit03(iss03);\n+  for (int j = 0; j < int(s.size() / 2); ++j)\n+    {\n+      res_mixed += *isbufit03;\n+      ++isbufit03;\n+      res_mixed += *isbufit03;\n+      isbufit03++;\n+    }\n+\n+  VERIFY ( res_postfix == res_prefix );\n+  VERIFY ( res_mixed == res_prefix );\n+}\n+\n int main()\n {\n   test01();\n+  test02();\n \n   return 0;\n }"}, {"sha": "eec7f980577bf549033e7649740068a23d537061", "filename": "libstdc++-v3/testsuite/24_iterators/ostreambuf_iterator.cc", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a85afd69a3321ef87f6dc1bec4fabb0301176afd/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fostreambuf_iterator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a85afd69a3321ef87f6dc1bec4fabb0301176afd/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fostreambuf_iterator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fostreambuf_iterator.cc?ref=a85afd69a3321ef87f6dc1bec4fabb0301176afd", "patch": "@@ -30,7 +30,9 @@ bool test01(void)\n   typedef costreambuf_iter::streambuf_type cstreambuf_type;\n   bool test = true;\n   const char slit01[] = \"playa hermosa, liberia, guanacaste\";\n+  const char slit02[] = \"bodega bay, lost coast, california\";\n   std::string str01(slit01);\n+  std::string str02(slit02);\n   std::string tmp;\n   std::stringbuf     strbuf01;\n   std::stringbuf     strbuf02(str01);\n@@ -61,21 +63,25 @@ bool test01(void)\n   // charT operator*() const\n   // ostreambuf_iterator& operator++();\n   // ostreambuf_iterator& operator++(int);\n-  costreambuf_iter ostrb_it27(ostrs00);\n+  costreambuf_iter ostrb_it27(ostrs01);\n   VERIFY( !ostrb_it27.failed() );\n-  for (int i = 0; i < strlen(slit01) - 2; ++i)\n-    ostrb_it27 = 'a';\n+  int j = str02.size();\n+  for (int i = 0; i < j; ++i)\n+    ostrb_it27 = str02[i];\n   VERIFY( !ostrb_it27.failed() );\n-  tmp = ostrs00.str();\n-  VERIFY ( tmp == str01 );\n+  tmp = ostrs01.str();\n+  VERIFY ( tmp != str01 );\n+  VERIFY ( tmp == str02 );\n \n-  costreambuf_iter ostrb_it28(ostrs01);\n+  costreambuf_iter ostrb_it28(ostrs00);\n   VERIFY( !ostrb_it28.failed() );\n-  for (int i = 0; i < strlen(slit01) + 1; ++i)\n+  j = ostrs00.str().size();\n+  for (int i = 0; i < j + 2; ++i)\n     ostrb_it28 = 'b';\n   VERIFY( !ostrb_it28.failed() );\n-  tmp = ostrs01.str();\n+  tmp = ostrs00.str();\n   VERIFY ( tmp != str01 );\n+  VERIFY ( tmp != str02 );\n \n #ifdef DEBUG_ASSERT\n   assert(test);"}]}