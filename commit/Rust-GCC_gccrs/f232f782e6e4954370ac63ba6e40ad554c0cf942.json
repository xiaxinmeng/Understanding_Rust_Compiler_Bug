{"sha": "f232f782e6e4954370ac63ba6e40ad554c0cf942", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjIzMmY3ODJlNmU0OTU0MzcwYWM2M2JhNmU0MGFkNTU0YzBjZjk0Mg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-03-04T08:00:55Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-03-04T10:32:34Z"}, "message": "middle-end/97855 - avoid recursing into pp_printf\n\nWhen diagnostic messages use pretty-printer formats like %D or %E\nthe pp_printf invocation can end up in tree pretty-printers which\nthen have to avoid using pp_printf themselves since this function\nis not re-entrant.\n\nThe following removes all pp_printf uses from tree-pretty-print.c\nfixing the observed malformed diagnostics.  It also poisons the\nidentifier so new uses are less likely to creep in.\n\n2021-03-04  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/97855\n\t* tree-pretty-print.c: Poison pp_printf.\n\t(dump_decl_name): Avoid use of pp_printf.\n\t(dump_block_node): Likewise.\n\t(dump_generic_node): Likewise.", "tree": {"sha": "8189e32cd959eaa31005852f42a7db6098309207", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8189e32cd959eaa31005852f42a7db6098309207"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f232f782e6e4954370ac63ba6e40ad554c0cf942", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f232f782e6e4954370ac63ba6e40ad554c0cf942", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f232f782e6e4954370ac63ba6e40ad554c0cf942", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f232f782e6e4954370ac63ba6e40ad554c0cf942/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "905ce0ca30cb33cddf024b0aebf4ba0b2c86fe77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/905ce0ca30cb33cddf024b0aebf4ba0b2c86fe77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/905ce0ca30cb33cddf024b0aebf4ba0b2c86fe77"}], "stats": {"total": 95, "additions": 74, "deletions": 21}, "files": [{"sha": "62899dfa158ece0625647dcc07b4bfceb04d4ceb", "filename": "gcc/tree-pretty-print.c", "status": "modified", "additions": 74, "deletions": 21, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f232f782e6e4954370ac63ba6e40ad554c0cf942/gcc%2Ftree-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f232f782e6e4954370ac63ba6e40ad554c0cf942/gcc%2Ftree-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.c?ref=f232f782e6e4954370ac63ba6e40ad554c0cf942", "patch": "@@ -36,6 +36,11 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gimple.h\"\n #include \"fold-const.h\"\n \n+/* Routines in this file get invoked via the default tree printer\n+   used by diagnostics and thus they are called from pp_printf which\n+   isn't reentrant.  Avoid using pp_printf in this file.  */\n+#pragma GCC poison pp_printf\n+\n /* Disable warnings about quoting issues in the pp_xxx calls below\n    that (intentionally) don't follow GCC diagnostic conventions.  */\n #if __GNUC__ >= 10\n@@ -293,29 +298,41 @@ dump_decl_name (pretty_printer *pp, tree node, dump_flags_t flags)\n   if ((flags & TDF_UID) || name == NULL_TREE)\n     {\n       if (TREE_CODE (node) == LABEL_DECL && LABEL_DECL_UID (node) != -1)\n-\tpp_printf (pp, \"L%c%d\", uid_sep, (int) LABEL_DECL_UID (node));\n+\t{\n+\t  pp_character (pp, 'L');\n+\t  pp_character (pp, uid_sep);\n+\t  pp_decimal_int (pp, (int) LABEL_DECL_UID (node));\n+\t}\n       else if (TREE_CODE (node) == DEBUG_EXPR_DECL)\n \t{\n \t  if (flags & TDF_NOUID)\n \t    pp_string (pp, \"D#xxxx\");\n \t  else\n-\t    pp_printf (pp, \"D#%i\", DEBUG_TEMP_UID (node));\n+\t    {\n+\t      pp_string (pp, \"D#\");\n+\t      pp_decimal_int (pp, (int) DEBUG_TEMP_UID (node));\n+\t    }\n \t}\n       else\n \t{\n \t  char c = TREE_CODE (node) == CONST_DECL ? 'C' : 'D';\n+\t  pp_character (pp, c);\n+\t  pp_character (pp, uid_sep);\n \t  if (flags & TDF_NOUID)\n-\t    pp_printf (pp, \"%c.xxxx\", c);\n+\t    pp_string (pp, \"xxxx\");\n \t  else\n-\t    pp_printf (pp, \"%c%c%u\", c, uid_sep, DECL_UID (node));\n+\t    pp_scalar (pp, \"%u\", DECL_UID (node));\n \t}\n     }\n   if ((flags & TDF_ALIAS) && DECL_PT_UID (node) != DECL_UID (node))\n     {\n       if (flags & TDF_NOUID)\n-\tpp_printf (pp, \"ptD.xxxx\");\n+\tpp_string (pp, \"ptD.xxxx\");\n       else\n-\tpp_printf (pp, \"ptD.%u\", DECL_PT_UID (node));\n+\t{\n+\t  pp_string (pp, \"ptD.\");\n+\t  pp_scalar (pp, \"%u\", DECL_PT_UID (node));\n+\t}\n     }\n }\n \n@@ -1328,10 +1345,16 @@ dump_block_node (pretty_printer *pp, tree block, int spc, dump_flags_t flags)\n {\n   tree t;\n \n-  pp_printf (pp, \"BLOCK #%d \", BLOCK_NUMBER (block));\n+  pp_string (pp, \"BLOCK #\");\n+  pp_decimal_int (pp, BLOCK_NUMBER (block));\n+  pp_character (pp, ' ');\n \n   if (flags & TDF_ADDRESS)\n-    pp_printf (pp, \"[%p] \", (void *) block);\n+    {\n+      pp_character (pp, '[');\n+      pp_scalar (pp, \"%p\", (void *) block);\n+      pp_string (pp, \"] \");\n+    }\n \n   if (TREE_ASM_WRITTEN (block))\n     pp_string (pp, \"[written] \");\n@@ -1650,7 +1673,11 @@ dump_generic_node (pretty_printer *pp, tree node, int spc, dump_flags_t flags,\n   is_expr = EXPR_P (node);\n \n   if (is_stmt && (flags & TDF_STMTADDR))\n-    pp_printf (pp, \"<&%p> \", (void *)node);\n+    {\n+      pp_string (pp, \"<&\");\n+      pp_scalar (pp, \"%p\", (void *)node);\n+      pp_string (pp, \"> \");\n+    }\n \n   if ((flags & TDF_LINENO) && EXPR_HAS_LOCATION (node))\n     dump_location (pp, EXPR_LOCATION (node));\n@@ -1857,9 +1884,13 @@ dump_generic_node (pretty_printer *pp, tree node, int spc, dump_flags_t flags,\n \t  if (TYPE_IDENTIFIER (node))\n \t    dump_generic_node (pp, TYPE_NAME (node), spc, flags, false);\n \t  else if (flags & TDF_NOUID)\n-\t    pp_printf (pp, \"<Txxxx>\");\n+\t    pp_string (pp, \"<Txxxx>\");\n \t  else\n-\t    pp_printf (pp, \"<T%x>\", TYPE_UID (node));\n+\t    {\n+\t      pp_string (pp, \"<T\");\n+\t      pp_scalar (pp, \"%x\", TYPE_UID (node));\n+\t      pp_character (pp, '>');\n+\t    }\n \n \t  pp_right_paren (pp);\n \t  dump_function_declaration (pp, fnode, spc, flags);\n@@ -2137,9 +2168,13 @@ dump_generic_node (pretty_printer *pp, tree node, int spc, dump_flags_t flags,\n       else if (TYPE_NAME (node) && DECL_NAME (TYPE_NAME (node)))\n \tdump_decl_name (pp, TYPE_NAME (node), flags);\n       else if (flags & TDF_NOUID)\n-\tpp_printf (pp, \"<Txxxx>\");\n+\tpp_string (pp, \"<Txxxx>\");\n       else\n-\tpp_printf (pp, \"<T%x>\", TYPE_UID (node));\n+\t{\n+\t  pp_string (pp, \"<T\");\n+\t  pp_scalar (pp, \"%x\", TYPE_UID (node));\n+\t  pp_character (pp, '>');\n+\t}\n       dump_function_declaration (pp, node, spc, flags);\n       break;\n \n@@ -2154,9 +2189,16 @@ dump_generic_node (pretty_printer *pp, tree node, int spc, dump_flags_t flags,\n       else if (LABEL_DECL_UID (node) != -1)\n \t{\n \t  if (flags & TDF_GIMPLE)\n-\t    pp_printf (pp, \"L%d\", (int) LABEL_DECL_UID (node));\n+\t    {\n+\t      pp_character (pp, 'L');\n+\t      pp_decimal_int (pp, (int) LABEL_DECL_UID (node));\n+\t    }\n \t  else\n-\t    pp_printf (pp, \"<L%d>\", (int) LABEL_DECL_UID (node));\n+\t    {\n+\t      pp_string (pp, \"<L\");\n+\t      pp_decimal_int (pp, (int) LABEL_DECL_UID (node));\n+\t      pp_character (pp, '>');\n+\t    }\n \t}\n       else\n \t{\n@@ -2165,9 +2207,16 @@ dump_generic_node (pretty_printer *pp, tree node, int spc, dump_flags_t flags,\n \t  else\n \t    {\n \t      if (flags & TDF_GIMPLE)\n-\t\tpp_printf (pp, \"<D%u>\", DECL_UID (node));\n+\t\t{\n+\t\t  pp_character (pp, 'D');\n+\t\t  pp_scalar (pp, \"%u\", DECL_UID (node));\n+\t\t}\n \t      else\n-\t\tpp_printf (pp, \"<D.%u>\", DECL_UID (node));\n+\t\t{\n+\t\t  pp_string (pp, \"<D.\");\n+\t\t  pp_scalar (pp, \"%u\", DECL_UID (node));\n+\t\t  pp_character (pp, '>');\n+\t\t}\n \t    }\n \t}\n       break;\n@@ -3021,9 +3070,12 @@ dump_generic_node (pretty_printer *pp, tree node, int spc, dump_flags_t flags,\n \t  pp_string (pp, \", ivdep\");\n \t  break;\n \tcase annot_expr_unroll_kind:\n-\t  pp_printf (pp, \", unroll %d\",\n-\t\t     (int) TREE_INT_CST_LOW (TREE_OPERAND (node, 2)));\n-\t  break;\n+\t  {\n+\t    pp_string (pp, \", unroll \");\n+\t    pp_decimal_int (pp,\n+\t\t\t    (int) TREE_INT_CST_LOW (TREE_OPERAND (node, 2)));\n+\t    break;\n+\t  }\n \tcase annot_expr_no_vector_kind:\n \t  pp_string (pp, \", no-vector\");\n \t  break;\n@@ -3205,7 +3257,8 @@ dump_generic_node (pretty_printer *pp, tree node, int spc, dump_flags_t flags,\n       dump_generic_node (pp, CHREC_LEFT (node), spc, flags, false);\n       pp_string (pp, \", +, \");\n       dump_generic_node (pp, CHREC_RIGHT (node), spc, flags, false);\n-      pp_printf (pp, \"}_%u\", CHREC_VARIABLE (node));\n+      pp_string (pp, \"}_\");\n+      pp_scalar (pp, \"%u\", CHREC_VARIABLE (node));\n       is_stmt = false;\n       break;\n "}]}