{"sha": "918a61248dc591d88ca58507f8bdbad20edbe404", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTE4YTYxMjQ4ZGM1OTFkODhjYTU4NTA3ZjhiZGJhZDIwZWRiZTQwNA==", "commit": {"author": {"name": "Geoffrey Keating", "email": "geoffk@gcc.gnu.org", "date": "2001-07-02T20:02:54Z"}, "committer": {"name": "Geoffrey Keating", "email": "geoffk@gcc.gnu.org", "date": "2001-07-02T20:02:54Z"}, "message": "[multiple changes]\n\n2001-07-02  Geoffrey Keating  <geoffk@redhat.com>\n\n\t* doc/tm.texi (Frame Layout): Document STACK_PUSH_CODE.\n\n\t* expr.c (emit_move_insn_1): Deal with non-default\n\tSTACK_PUSH_CODE.\n\n\t* expr.c (emit_single_push_insn): Fix warning.\n\n2001-07-02  Toshiyasu Morita  <toshiyasu.morita@hsa.hitachi.com>\n\n\t* expr.c (emit_move_insn_1): Avoid modifying\n\tcfun->expr->x_stack_pointer when PUSH_ROUNDING is defined.\n\nFrom-SVN: r43703", "tree": {"sha": "cae74d78e3737ad33b64159b25467f53d8953b26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cae74d78e3737ad33b64159b25467f53d8953b26"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/918a61248dc591d88ca58507f8bdbad20edbe404", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/918a61248dc591d88ca58507f8bdbad20edbe404", "html_url": "https://github.com/Rust-GCC/gccrs/commit/918a61248dc591d88ca58507f8bdbad20edbe404", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/918a61248dc591d88ca58507f8bdbad20edbe404/comments", "author": null, "committer": null, "parents": [{"sha": "f4ef873c3108a163d7789b137b391c3853c25011", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4ef873c3108a163d7789b137b391c3853c25011", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4ef873c3108a163d7789b137b391c3853c25011"}], "stats": {"total": 70, "additions": 66, "deletions": 4}, "files": [{"sha": "0aa761dc41610f26b95855384e28eef67d6403ff", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/918a61248dc591d88ca58507f8bdbad20edbe404/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/918a61248dc591d88ca58507f8bdbad20edbe404/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=918a61248dc591d88ca58507f8bdbad20edbe404", "patch": "@@ -1,3 +1,17 @@\n+2001-07-02  Geoffrey Keating  <geoffk@redhat.com>\n+\n+\t* doc/tm.texi (Frame Layout): Document STACK_PUSH_CODE.\n+\n+\t* expr.c (emit_move_insn_1): Deal with non-default\n+\tSTACK_PUSH_CODE.\n+\n+\t* expr.c (emit_single_push_insn): Fix warning.\n+\n+2001-07-02  Toshiyasu Morita  <toshiyasu.morita@hsa.hitachi.com>\n+\n+\t* expr.c (emit_move_insn_1): Avoid modifying\n+\tcfun->expr->x_stack_pointer when PUSH_ROUNDING is defined.\n+\n Mon Jul  2 15:33:31 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* emit-rtl.c (adjust_address): New function."}, {"sha": "81aa6b9726c568f07bc369e37792669d2f3b571c", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/918a61248dc591d88ca58507f8bdbad20edbe404/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/918a61248dc591d88ca58507f8bdbad20edbe404/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=918a61248dc591d88ca58507f8bdbad20edbe404", "patch": "@@ -2507,6 +2507,23 @@ When we say, ``define this macro if @dots{},'' it means that the\n compiler checks this macro only with @code{#ifdef} so the precise\n definition used does not matter.\n \n+@findex STACK_PUSH_CODE\n+@item STACK_PUSH_CODE\n+\n+This macro defines the operation used when something is pushed\n+on the stack.  In RTL, a push operation will be\n+@code{(set (mem (STACK_PUSH_CODE (reg sp))) ...)}\n+\n+The choices are @code{PRE_DEC}, @code{POST_DEC}, @code{PRE_INC},\n+and @code{POST_INC}.  Which of these is correct depends on\n+the stack direction and on whether the stack pointer points\n+to the last item on the stack or whether it points to the\n+space for the next item on the stack.\n+\n+The default is @code{PRE_DEC} when @code{STACK_GROWS_DOWNWARD} is\n+defined, which is almost always right, and @code{PRE_INC} otherwise,\n+which is often wrong.\n+\n @findex FRAME_GROWS_DOWNWARD\n @item FRAME_GROWS_DOWNWARD\n Define this macro if the addresses of local variable slots are at negative"}, {"sha": "6eb90a643f0d77aa3e8eaacf30a7186e93ca6937", "filename": "gcc/expr.c", "status": "modified", "additions": 35, "deletions": 4, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/918a61248dc591d88ca58507f8bdbad20edbe404/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/918a61248dc591d88ca58507f8bdbad20edbe404/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=918a61248dc591d88ca58507f8bdbad20edbe404", "patch": "@@ -2964,8 +2964,39 @@ emit_move_insn_1 (x, y)\n \t X with a reference to the stack pointer.  */\n       if (push_operand (x, GET_MODE (x)))\n \t{\n-\t  anti_adjust_stack (GEN_INT (GET_MODE_SIZE (GET_MODE (x))));\n-\t  x = change_address (x, VOIDmode, stack_pointer_rtx);\n+\t  rtx temp;\n+\t  enum rtx_code code;\n+\t  \n+\t  /* Do not use anti_adjust_stack, since we don't want to update\n+\t     stack_pointer_delta.  */\n+\t  temp = expand_binop (Pmode,\n+#ifdef STACK_GROWS_DOWNWARD\n+\t\t\t       sub_optab,\n+#else\n+\t\t\t       add_optab,\n+#endif\n+\t\t\t       stack_pointer_rtx,\n+\t\t\t       GEN_INT\n+\t\t\t\t (PUSH_ROUNDING (GET_MODE_SIZE (GET_MODE (x)))),\n+\t\t\t       stack_pointer_rtx,\n+\t\t\t       0,\n+\t\t\t       OPTAB_LIB_WIDEN);\n+          if (temp != stack_pointer_rtx)\n+            emit_move_insn (stack_pointer_rtx, temp);\n+\n+\t  code = GET_CODE (XEXP (x, 0));\n+\t  /* Just hope that small offsets off SP are OK.  */\n+\t  if (code == POST_INC)\n+\t    temp = gen_rtx_PLUS (Pmode, stack_pointer_rtx, \n+\t\t\t\tGEN_INT (-(HOST_WIDE_INT)\n+\t\t\t\t\t   GET_MODE_SIZE (GET_MODE (x))));\n+\t  else if (code == POST_DEC)\n+\t    temp = gen_rtx_PLUS (Pmode, stack_pointer_rtx, \n+\t\t\t\tGEN_INT (GET_MODE_SIZE (GET_MODE (x))));\n+\t  else\n+\t    temp = stack_pointer_rtx;\n+\n+\t  x = change_address (x, VOIDmode, temp);\n \t}\n #endif\n \n@@ -3133,7 +3164,7 @@ emit_single_push_insn (mode, x, type)\n {\n #ifdef PUSH_ROUNDING\n   rtx dest_addr;\n-  int rounded_size = PUSH_ROUNDING (GET_MODE_SIZE (mode));\n+  unsigned rounded_size = PUSH_ROUNDING (GET_MODE_SIZE (mode));\n   rtx dest;\n \n   if (GET_MODE_SIZE (mode) == rounded_size)\n@@ -3142,7 +3173,7 @@ emit_single_push_insn (mode, x, type)\n     {\n #ifdef STACK_GROWS_DOWNWARD\n       dest_addr = gen_rtx_PLUS (Pmode, stack_pointer_rtx,\n-\t\t\t\tGEN_INT (-rounded_size));\n+\t\t\t\tGEN_INT (-(HOST_WIDE_INT)rounded_size));\n #else\n       dest_addr = gen_rtx_PLUS (Pmode, stack_pointer_rtx,\n \t\t\t\tGEN_INT (rounded_size));"}]}