{"sha": "31b3ca64f48e85c780d9d98730231ff2961c4d32", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzFiM2NhNjRmNDhlODVjNzgwZDlkOTg3MzAyMzFmZjI5NjFjNGQzMg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2011-05-19T10:31:23Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-05-19T10:31:23Z"}, "message": "gimple.c (gimple_types_compatible_p_1): Compare names of the types themselves.\n\n2011-05-19  Richard Guenther  <rguenther@suse.de>\n\n\t* gimple.c (gimple_types_compatible_p_1): Compare names of\n\tthe types themselves.\n\t(iterative_hash_gimple_type): And hash them that way.\n\t(gimple_register_type_1): If we register a main variant properly\n\tinitialize the leader to ourselves.\n\n\tlto/\n\t* lto.c (uniquify_nodes): First register all types before\n\tfixing up the tree SCC.\n\nFrom-SVN: r173900", "tree": {"sha": "33bf9f864a99e5d23f72adbcd38ea97726d8ff2b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/33bf9f864a99e5d23f72adbcd38ea97726d8ff2b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/31b3ca64f48e85c780d9d98730231ff2961c4d32", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31b3ca64f48e85c780d9d98730231ff2961c4d32", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31b3ca64f48e85c780d9d98730231ff2961c4d32", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31b3ca64f48e85c780d9d98730231ff2961c4d32/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f263981ac8f33dce2cfd904986ee596de5ddcdb1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f263981ac8f33dce2cfd904986ee596de5ddcdb1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f263981ac8f33dce2cfd904986ee596de5ddcdb1"}], "stats": {"total": 41, "additions": 36, "deletions": 5}, "files": [{"sha": "a653ae8442f22bde80efa7315098e29c1e0fd63a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31b3ca64f48e85c780d9d98730231ff2961c4d32/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31b3ca64f48e85c780d9d98730231ff2961c4d32/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=31b3ca64f48e85c780d9d98730231ff2961c4d32", "patch": "@@ -1,3 +1,11 @@\n+2011-05-19  Richard Guenther  <rguenther@suse.de>\n+\n+\t* gimple.c (gimple_types_compatible_p_1): Compare names of\n+\tthe types themselves.\n+\t(iterative_hash_gimple_type): And hash them that way.\n+\t(gimple_register_type_1): If we register a main variant properly\n+\tinitialize the leader to ourselves.\n+\n 2011-05-19  Tom de Vries  <tom@codesourcery.com>\n \n \tPR target/45098"}, {"sha": "e4c318f9e8a3d7b899275a151c486a97a78c5348", "filename": "gcc/gimple.c", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31b3ca64f48e85c780d9d98730231ff2961c4d32/gcc%2Fgimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31b3ca64f48e85c780d9d98730231ff2961c4d32/gcc%2Fgimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.c?ref=31b3ca64f48e85c780d9d98730231ff2961c4d32", "patch": "@@ -3824,8 +3824,7 @@ gimple_types_compatible_p_1 (tree t1, tree t2, type_pair_t p,\n \ttree f1, f2;\n \n \t/* The struct tags shall compare equal.  */\n-\tif (!compare_type_names_p (TYPE_MAIN_VARIANT (t1),\n-\t\t\t\t   TYPE_MAIN_VARIANT (t2), false))\n+\tif (!compare_type_names_p (t1, t2, false))\n \t  goto different_types;\n \n \t/* For aggregate types, all the fields must be the same.  */\n@@ -4202,7 +4201,7 @@ iterative_hash_gimple_type (tree type, hashval_t val,\n       unsigned nf;\n       tree f;\n \n-      v = iterative_hash_name (TYPE_NAME (TYPE_MAIN_VARIANT (type)), v);\n+      v = iterative_hash_name (TYPE_NAME (type), v);\n \n       for (f = TYPE_FIELDS (type), nf = 0; f; f = TREE_CHAIN (f))\n \t{\n@@ -4503,7 +4502,7 @@ gimple_register_type_1 (tree t, bool registering_mv)\n {\n   void **slot;\n   gimple_type_leader_entry *leader;\n-  tree mv_leader = NULL_TREE;\n+  tree mv_leader;\n \n   /* If we registered this type before return the cached result.  */\n   leader = &gimple_type_leader[TYPE_UID (t) % GIMPLE_TYPE_LEADER_SIZE];\n@@ -4516,10 +4515,15 @@ gimple_register_type_1 (tree t, bool registering_mv)\n      It also makes sure that main variants will be merged to main variants.\n      As we are operating on a possibly partially fixed up type graph\n      do not bother to recurse more than once, otherwise we may end up\n-     walking in circles.  */\n+     walking in circles.\n+     If we are registering a main variant it will either remain its\n+     own main variant or it will be merged to something else in which\n+     case we do not care for the main variant leader.  */\n   if (!registering_mv\n       && TYPE_MAIN_VARIANT (t) != t)\n     mv_leader = gimple_register_type_1 (TYPE_MAIN_VARIANT (t), true);\n+  else\n+    mv_leader = t;\n \n   slot = htab_find_slot (gimple_types, t, INSERT);\n   if (*slot"}, {"sha": "79e0146694d549bb9ad380cc01f192c6f6e1b997", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31b3ca64f48e85c780d9d98730231ff2961c4d32/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31b3ca64f48e85c780d9d98730231ff2961c4d32/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=31b3ca64f48e85c780d9d98730231ff2961c4d32", "patch": "@@ -1,3 +1,8 @@\n+2011-05-19  Richard Guenther  <rguenther@suse.de>\n+\n+\t* lto.c (uniquify_nodes): First register all types before\n+\tfixing up the tree SCC.\n+\n 2011-05-11  Jan Hubicka  <jh@suse.cz>\n \n \tPR lto/48952"}, {"sha": "67e080f8389618eb94bc252c5426bc3a0368af65", "filename": "gcc/lto/lto.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31b3ca64f48e85c780d9d98730231ff2961c4d32/gcc%2Flto%2Flto.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31b3ca64f48e85c780d9d98730231ff2961c4d32/gcc%2Flto%2Flto.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto.c?ref=31b3ca64f48e85c780d9d98730231ff2961c4d32", "patch": "@@ -605,6 +605,20 @@ uniquify_nodes (struct data_in *data_in, unsigned from)\n   struct lto_streamer_cache_d *cache = data_in->reader_cache;\n   unsigned len = VEC_length (tree, cache->nodes);\n   unsigned i;\n+\n+  /* Go backwards because childs streamed for the first time come\n+     as part of their parents, and hence are created after them.  */\n+  for (i = len; i-- > from;)\n+    {\n+      tree t = VEC_index (tree, cache->nodes, i);\n+      if (!t)\n+\tcontinue;\n+\n+      /* Now try to find a canonical variant of T itself.  */\n+      if (TYPE_P (t))\n+\tgimple_register_type (t);\n+    }\n+\n   /* Go backwards because childs streamed for the first time come\n      as part of their parents, and hence are created after them.  */\n   for (i = len; i-- > from;)"}]}