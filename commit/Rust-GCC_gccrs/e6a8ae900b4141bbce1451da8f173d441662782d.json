{"sha": "e6a8ae900b4141bbce1451da8f173d441662782d", "node_id": "C_kwDOANBUbNoAKGU2YThhZTkwMGI0MTQxYmJjZTE0NTFkYThmMTczZDQ0MTY2Mjc4MmQ", "commit": {"author": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2022-08-08T13:37:00Z"}, "committer": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2022-08-08T13:37:00Z"}, "message": "AArch64: Fix 128-bit sequential consistency atomic operations.\n\nThe AArch64 implementation of 128-bit atomics is broken.\n\nFor 128-bit atomics we rely on pthread barriers to correct guard the address\nin the pointer to get correct memory ordering.  However for 128-bit atomics the\naddress under the lock is different from the original pointer.\n\nThis means that one of the values under the atomic operation is not protected\nproperly and so we fail during when the user has requested sequential\nconsistency as there's no barrier to enforce this requirement.\n\nAs such users have resorted to adding an\n\n#ifdef GCC\n<emit barrier>\n#endif\n\naround the use of these atomics.\n\nThis corrects the issue by issuing a barrier only when __ATOMIC_SEQ_CST was\nrequested.  To remedy this performance hit I think we should revisit using a\nsimilar approach to out-line-atomics for the 128-bit atomics.\n\nNote that I believe I need the empty file due to the include_next chain but\nI am not entirely sure.  I have hand verified that the barriers are inserted\nfor atomic seq cst.\n\nlibatomic/ChangeLog:\n\n\tPR target/102218\n\t* config/aarch64/aarch64-config.h: New file.\n\t* config/aarch64/host-config.h: New file.", "tree": {"sha": "03e4c219ab315125a932c6dd05926d047eeead39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/03e4c219ab315125a932c6dd05926d047eeead39"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e6a8ae900b4141bbce1451da8f173d441662782d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6a8ae900b4141bbce1451da8f173d441662782d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6a8ae900b4141bbce1451da8f173d441662782d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6a8ae900b4141bbce1451da8f173d441662782d/comments", "author": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a1448f2763a72c83e2ec496f78243a975b0d44e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a1448f2763a72c83e2ec496f78243a975b0d44e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a1448f2763a72c83e2ec496f78243a975b0d44e"}], "stats": {"total": 69, "additions": 69, "deletions": 0}, "files": [{"sha": "d3474fa8ff80cb0c3ddbf8c48acd931d2339d33d", "filename": "libatomic/config/aarch64/aarch64-config.h", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6a8ae900b4141bbce1451da8f173d441662782d/libatomic%2Fconfig%2Faarch64%2Faarch64-config.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6a8ae900b4141bbce1451da8f173d441662782d/libatomic%2Fconfig%2Faarch64%2Faarch64-config.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libatomic%2Fconfig%2Faarch64%2Faarch64-config.h?ref=e6a8ae900b4141bbce1451da8f173d441662782d", "patch": "@@ -0,0 +1,23 @@\n+/* Copyright (C) 2022 Free Software Foundation, Inc.\n+\n+   This file is part of the GNU Atomic Library (libatomic).\n+\n+   Libatomic is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   Libatomic is distributed in the hope that it will be useful, but WITHOUT ANY\n+   WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n+   FOR A PARTICULAR PURPOSE.  See the GNU General Public License for\n+   more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+"}, {"sha": "f445a47d25ef5cc51cd2167069500245d07bf1bc", "filename": "libatomic/config/aarch64/host-config.h", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6a8ae900b4141bbce1451da8f173d441662782d/libatomic%2Fconfig%2Faarch64%2Fhost-config.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6a8ae900b4141bbce1451da8f173d441662782d/libatomic%2Fconfig%2Faarch64%2Fhost-config.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libatomic%2Fconfig%2Faarch64%2Fhost-config.h?ref=e6a8ae900b4141bbce1451da8f173d441662782d", "patch": "@@ -0,0 +1,46 @@\n+/* Copyright (C) 2022 Free Software Foundation, Inc.\n+\n+   This file is part of the GNU Atomic Library (libatomic).\n+\n+   Libatomic is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   Libatomic is distributed in the hope that it will be useful, but WITHOUT ANY\n+   WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n+   FOR A PARTICULAR PURPOSE.  See the GNU General Public License for\n+   more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+/* Avoiding the DMB (or kernel helper) can be a good thing.  */\n+#define WANT_SPECIALCASE_RELAXED\n+\n+/* Glibc, at least, uses acq_rel in its pthread mutex\n+   implementation.  If the user is asking for seq_cst,\n+   this is insufficient.  */\n+\n+static inline void __attribute__((always_inline, artificial))\n+pre_seq_barrier(int model)\n+{\n+  if (model == __ATOMIC_SEQ_CST)\n+    __atomic_thread_fence (__ATOMIC_SEQ_CST);\n+}\n+\n+static inline void __attribute__((always_inline, artificial))\n+post_seq_barrier(int model)\n+{\n+  pre_seq_barrier(model);\n+}\n+\n+#define pre_post_seq_barrier 1\n+\n+#include_next <host-config.h>"}]}