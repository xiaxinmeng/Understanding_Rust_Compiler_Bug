{"sha": "65ca2d606c1420d9a4f76f22c5f07823119fe543", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjVjYTJkNjA2YzE0MjBkOWE0Zjc2ZjIyYzVmMDc4MjMxMTlmZTU0Mw==", "commit": {"author": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2003-01-24T15:17:26Z"}, "committer": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2003-01-24T15:17:26Z"}, "message": "Rename -W to -Wextra.\n\n2003-01-24  Phil Edwards  <pme@gcc.gnu.org>\n\n\tRename -W to -Wextra.\n\t* c-decl.c:  Update comments.\n\t* c-typeck.c:  Likewise.\n\t* flags.h:  Likewise.\n\t* function.c:  Likewise.\n\t* stmt.c:  Likewise.\n\t* toplev.c:  Update comments.\n\t(W_options):  Add 'extra'.\n\t(display_help):  Remove '-W'.\n\t(decode_W_option):  Special warn_uninitialized treatment in the case\n\tof -Wextra.\n\t* doc/invoke.texi:  Update with new entries.\n\nFrom-SVN: r61696", "tree": {"sha": "869d547d6a351decc78db9dd25b6fc48dbd968be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/869d547d6a351decc78db9dd25b6fc48dbd968be"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/65ca2d606c1420d9a4f76f22c5f07823119fe543", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65ca2d606c1420d9a4f76f22c5f07823119fe543", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65ca2d606c1420d9a4f76f22c5f07823119fe543", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65ca2d606c1420d9a4f76f22c5f07823119fe543/comments", "author": null, "committer": null, "parents": [{"sha": "3de9c088e8349dbf2af82c6ae947e9fe84b356e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3de9c088e8349dbf2af82c6ae947e9fe84b356e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3de9c088e8349dbf2af82c6ae947e9fe84b356e2"}], "stats": {"total": 119, "additions": 89, "deletions": 30}, "files": [{"sha": "5e15284c2798bf9c0d8042f13b049574efb750eb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65ca2d606c1420d9a4f76f22c5f07823119fe543/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65ca2d606c1420d9a4f76f22c5f07823119fe543/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=65ca2d606c1420d9a4f76f22c5f07823119fe543", "patch": "@@ -1,3 +1,18 @@\n+2003-01-24  Phil Edwards  <pme@gcc.gnu.org>\n+\n+\tRename -W to -Wextra.\n+\t* c-decl.c:  Update comments.\n+\t* c-typeck.c:  Likewise.\n+\t* flags.h:  Likewise.\n+\t* function.c:  Likewise.\n+\t* stmt.c:  Likewise.\n+\t* toplev.c:  Update comments.\n+\t(W_options):  Add 'extra'.\n+\t(display_help):  Remove '-W'.\n+\t(decode_W_option):  Special warn_uninitialized treatment in the case\n+\tof -Wextra.\n+\t* doc/invoke.texi:  Update with new entries.\n+\n 2003-01-23  Richard Henderson  <rth@redhat.com>\n \n         * ifcvt.c (noce_process_if_block): Re-add check vs X being changed"}, {"sha": "a5439316d2e54d89b16a1522be902f29db76da1b", "filename": "gcc/c-decl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65ca2d606c1420d9a4f76f22c5f07823119fe543/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65ca2d606c1420d9a4f76f22c5f07823119fe543/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=65ca2d606c1420d9a4f76f22c5f07823119fe543", "patch": "@@ -4175,7 +4175,7 @@ grokdeclarator (declarator, declspecs, decl_context, initialized)\n \t    {\n \t      /* Type qualifiers on a function return type are normally\n \t\t permitted by the standard but have no effect, so give a\n-\t\t warning at -W.  Qualifiers on a void return type have\n+\t\t warning at -Wextra.  Qualifiers on a void return type have\n \t\t meaning as a GNU extension, and are banned on function\n \t\t definitions in ISO C.  FIXME: strictly we shouldn't\n \t\t pedwarn for qualified void return types except on function\n@@ -6544,7 +6544,7 @@ c_expand_body (fndecl, nested_p, can_defer_p)\n   if (nested_p)\n     ggc_pop_context ();\n \n-  /* With just -W, complain only if function returns both with\n+  /* With just -Wextra, complain only if function returns both with\n      and without a value.  */\n   if (extra_warnings\n       && current_function_returns_value"}, {"sha": "4134113557a39663b45389272626f0f4c72234e6", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65ca2d606c1420d9a4f76f22c5f07823119fe543/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65ca2d606c1420d9a4f76f22c5f07823119fe543/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=65ca2d606c1420d9a4f76f22c5f07823119fe543", "patch": "@@ -3570,7 +3570,7 @@ internal_build_compound_expr (list, first_p)\n   if (! TREE_SIDE_EFFECTS (TREE_VALUE (list)))\n     {\n       /* The left-hand operand of a comma expression is like an expression\n-         statement: with -W or -Wunused, we should warn if it doesn't have\n+         statement: with -Wextra or -Wunused, we should warn if it doesn't have\n \t any side-effects, unless it was explicitly cast to (void).  */\n       if ((extra_warnings || warn_unused_value)\n            && ! (TREE_CODE (TREE_VALUE (list)) == CONVERT_EXPR"}, {"sha": "4d3e0b1851e5aad43cf96d42a1e2d5b60cbe3cce", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 53, "deletions": 20, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65ca2d606c1420d9a4f76f22c5f07823119fe543/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65ca2d606c1420d9a4f76f22c5f07823119fe543/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=65ca2d606c1420d9a4f76f22c5f07823119fe543", "patch": "@@ -212,7 +212,7 @@ in the following sections.\n @xref{Warning Options,,Options to Request or Suppress Warnings}.\n @gccoptlist{\n -fsyntax-only  -pedantic  -pedantic-errors @gol\n--w  -W  -Wall -Waggregate-return @gol\n+-w  -Wextra  -Wall  -Waggregate-return @gol\n -Wcast-align  -Wcast-qual  -Wchar-subscripts  -Wcomment @gol\n -Wconversion  -Wno-deprecated-declarations @gol\n -Wdisabled-optimization  -Wno-div-by-zero  -Werror @gol\n@@ -950,7 +950,7 @@ Print (on the standard output) a description of the command line options\n understood by @command{gcc}.  If the @option{-v} option is also specified\n then @option{--help} will also be passed on to the various processes\n invoked by @command{gcc}, so that they can display the command line options\n-they accept.  If the @option{-W} option is also specified then command\n+they accept.  If the @option{-Wextra} option is also specified then command\n line options which have no documentation associated with them will also\n be displayed.\n \n@@ -2288,8 +2288,8 @@ To suppress this warning cast the expression to @samp{void}.\n All the above @option{-Wunused} options combined.\n \n In order to get a warning about an unused function parameter, you must\n-either specify @samp{-W -Wunused} or separately specify\n-@option{-Wunused-parameter}.\n+either specify @samp{-Wextra -Wunused} (note that @samp{-Wall} implies\n+@samp{-Wunused}), or separately specify @option{-Wunused-parameter}.\n \n @item -Wuninitialized\n @opindex Wuninitialized\n@@ -2402,9 +2402,12 @@ in some cases, and there is no simple way to modify the code to suppress\n the warning.\n \n @table @gcctabopt\n-@item -W\n+@item -Wextra\n @opindex W\n-Print extra warning messages for these events:\n+@opindex Wextra\n+(This option used to be called @option{-W}.  The older name is still\n+supported, but the newer name is more descriptive.)  Print extra warning\n+messages for these events:\n \n @itemize @bullet\n @item\n@@ -2431,7 +2434,7 @@ For example, an expression such as @samp{x[i,j]} will cause a warning,\n but @samp{x[(void)i,j]} will not.\n \n @item\n-An unsigned value is compared against zero with @samp{<} or @samp{<=}.\n+An unsigned value is compared against zero with @samp{<} or @samp{>=}.\n \n @item\n A comparison like @samp{x<=y<=z} appears; this is equivalent to\n@@ -2458,17 +2461,6 @@ A comparison between signed and unsigned values could produce an\n incorrect result when the signed value is converted to unsigned.\n (But don't warn if @option{-Wno-sign-compare} is also specified.)\n \n-@item\n-An aggregate has a partly bracketed initializer.\n-For example, the following code would evoke such a warning,\n-because braces are missing around the initializer for @code{x.h}:\n-\n-@smallexample\n-struct s @{ int f, g; @};\n-struct t @{ struct s h; int i; @};\n-struct t x = @{ 1, 2, 3 @};\n-@end smallexample\n-\n @item\n An aggregate has an initializer which does not initialize all members.\n For example, the following code would cause such a warning, because\n@@ -2478,6 +2470,47 @@ For example, the following code would cause such a warning, because\n struct s @{ int f, g, h; @};\n struct s x = @{ 3, 4 @};\n @end smallexample\n+\n+@item\n+A function parameter is declared without a type specifier in K&R-style\n+functions:\n+\n+@smallexample\n+void foo(bar) @{ @}\n+@end smallexample\n+\n+@item\n+An empty body occurs in an @samp{if} or @samp{else} statement.\n+\n+@item\n+A pointer is compared against integer zero with @samp{<}, @samp{<=},\n+@samp{>}, or @samp{>=}.\n+\n+@item\n+A variable might be changed by @samp{longjmp} or @samp{vfork}.\n+\n+@item\n+Any of several floating-point events that often indicate errors, such as\n+overflow, underflow, loss of precision, etc.\n+\n+@item @r{(C++ only)}\n+An enumerator and a non-enumerator both appear in a conditional expression.\n+\n+@item @r{(C++ only)}\n+A non-static reference or non-static @samp{const} member appears in a\n+class without constructors.\n+\n+@item @r{(C++ only)}\n+Ambiguous virtual bases.\n+\n+@item @r{(C++ only)}\n+Subscripting an array which has been declared @samp{register}.\n+\n+@item @r{(C++ only)}\n+Taking the address of a variable which has been declared @samp{register}.\n+\n+@item @r{(C++ only)}\n+A base class is not initialized in a derived class' copy constrcutor.\n @end itemize\n \n @item -Wno-div-by-zero\n@@ -2678,8 +2711,8 @@ casts like @code{(unsigned) -1}.\n @cindex signed and unsigned values, comparison warning\n Warn when a comparison between signed and unsigned values could produce\n an incorrect result when the signed value is converted to unsigned.\n-This warning is also enabled by @option{-W}; to get the other warnings\n-of @option{-W} without this warning, use @samp{-W -Wno-sign-compare}.\n+This warning is also enabled by @option{-Wextra}; to get the other warnings\n+of @option{-Wextra} without this warning, use @samp{-Wextra -Wno-sign-compare}.\n \n @item -Waggregate-return\n @opindex Waggregate-return"}, {"sha": "8a1998c5a8496c1469053254c7d39fb1ff7770ff", "filename": "gcc/flags.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65ca2d606c1420d9a4f76f22c5f07823119fe543/gcc%2Fflags.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65ca2d606c1420d9a4f76f22c5f07823119fe543/gcc%2Fflags.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflags.h?ref=65ca2d606c1420d9a4f76f22c5f07823119fe543", "patch": "@@ -86,7 +86,8 @@ extern int inhibit_warnings;\n \n extern int warn_system_headers;\n \n-/* Do print extra warnings (such as for uninitialized variables).  -W.  */\n+/* Do print extra warnings (such as for uninitialized variables).\n+   -W/-Wextra.  */\n \n extern int extra_warnings;\n "}, {"sha": "c240788e30a8746332410248061fae94ee257b35", "filename": "gcc/function.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65ca2d606c1420d9a4f76f22c5f07823119fe543/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65ca2d606c1420d9a4f76f22c5f07823119fe543/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=65ca2d606c1420d9a4f76f22c5f07823119fe543", "patch": "@@ -6795,9 +6795,10 @@ expand_function_end (filename, line, end_bindings)\n     }\n \n   /* Warn about unused parms if extra warnings were specified.  */\n-  /* Either ``-W -Wunused'' or ``-Wunused-parameter'' enables this\n+  /* Either ``-Wextra -Wunused'' or ``-Wunused-parameter'' enables this\n      warning.  WARN_UNUSED_PARAMETER is negative when set by\n-     -Wunused.  */\n+     -Wunused.  Note that -Wall implies -Wunused, so ``-Wall -Wextra'' will\n+     also give these warnings.  */\n   if (warn_unused_parameter > 0\n       || (warn_unused_parameter < 0 && extra_warnings))\n     {"}, {"sha": "adc7114c7e2634c0ca16cccdf66b9c4c62eb5536", "filename": "gcc/stmt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65ca2d606c1420d9a4f76f22c5f07823119fe543/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65ca2d606c1420d9a4f76f22c5f07823119fe543/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=65ca2d606c1420d9a4f76f22c5f07823119fe543", "patch": "@@ -2148,7 +2148,7 @@ expand_expr_stmt_value (exp, want_value, maybe_last)\n   if (want_value == -1)\n     want_value = expr_stmts_for_value != 0;\n \n-  /* If -W, warn about statements with no side effects,\n+  /* If -Wextra, warn about statements with no side effects,\n      except for an explicit cast to void (e.g. for assert()), and\n      except for last statement in ({...}) where they may be useful.  */\n   if (! want_value"}, {"sha": "33997052b1b893eb2d65354229f19e0386534086", "filename": "gcc/toplev.c", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65ca2d606c1420d9a4f76f22c5f07823119fe543/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65ca2d606c1420d9a4f76f22c5f07823119fe543/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=65ca2d606c1420d9a4f76f22c5f07823119fe543", "patch": "@@ -1411,7 +1411,7 @@ int inhibit_warnings = 0;\n \n int warn_system_headers = 0;\n \n-/* Print various extra warnings.  -W.  */\n+/* Print various extra warnings.  -W/-Wextra.  */\n \n int extra_warnings = 0;\n \n@@ -1506,7 +1506,7 @@ int warn_deprecated_decl = 1;\n \n int warn_strict_aliasing;\n \n-/* Likewise for -W.  */\n+/* Like f_options, but for -W.  */\n \n static const lang_independent_options W_options[] =\n {\n@@ -1550,6 +1550,8 @@ static const lang_independent_options W_options[] =\n    N_(\"Warn when an optimization pass is disabled\") },\n   {\"deprecated-declarations\", &warn_deprecated_decl, 1,\n    N_(\"Warn about uses of __attribute__((deprecated)) declarations\") },\n+  {\"extra\", &extra_warnings, 1,\n+   N_(\"Print extra (possibly unwanted) warnings\") },\n   {\"missing-noreturn\", &warn_missing_noreturn, 1,\n    N_(\"Warn about functions which might be candidates for attribute noreturn\") },\n   {\"strict-aliasing\", &warn_strict_aliasing, 1,\n@@ -3743,7 +3745,6 @@ display_help ()\n   printf (_(\"  -pedantic               Issue warnings needed by strict compliance to ISO C\\n\"));\n   printf (_(\"  -pedantic-errors        Like -pedantic except that errors are produced\\n\"));\n   printf (_(\"  -w                      Suppress warnings\\n\"));\n-  printf (_(\"  -W                      Enable extra warnings\\n\"));\n \n   for (i = ARRAY_SIZE (W_options); i--;)\n     {\n@@ -4117,6 +4118,14 @@ decode_W_option (arg)\n     {\n       set_Wunused (0);\n     }\n+  else if (!strcmp (arg, \"extra\"))\n+    {\n+      /* We save the value of warn_uninitialized, since if they put\n+\t -Wuninitialized on the command line, we need to generate a\n+\t warning about not using it without also specifying -O.  */\n+      if (warn_uninitialized != 1)\n+\twarn_uninitialized = 2;\n+    }\n   else\n     return 0;\n "}]}