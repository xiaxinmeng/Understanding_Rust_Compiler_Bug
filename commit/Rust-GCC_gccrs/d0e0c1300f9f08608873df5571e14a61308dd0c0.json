{"sha": "d0e0c1300f9f08608873df5571e14a61308dd0c0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDBlMGMxMzAwZjlmMDg2MDg4NzNkZjU1NzFlMTRhNjEzMDhkZDBjMA==", "commit": {"author": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2020-06-11T02:40:59Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2020-06-11T02:40:59Z"}, "message": "RISC-V: Describe correct USEs for gpr_save pattern [PR95252]\n\n - Verified on rv32emc/rv32gc/rv64gc bare-metal target and rv32gc/rv64gc\n   linux target with qemu.\n\ngcc/ChangeLog:\n\n\t* config/riscv/predicates.md (gpr_save_operation): New.\n\t* config/riscv/riscv-protos.h (riscv_gen_gpr_save_insn): New.\n\t(riscv_gpr_save_operation_p): Ditto.\n\t* config/riscv/riscv-sr.c (riscv_remove_unneeded_save_restore_calls):\n\tIgnore USEs for gpr_save patter.\n\t* config/riscv/riscv.c (gpr_save_reg_order): New.\n\t(riscv_expand_prologue): Use riscv_gen_gpr_save_insn to gen gpr_save.\n\t(riscv_gen_gpr_save_insn): New.\n\t(riscv_gpr_save_operation_p): Ditto.\n\t* config/riscv/riscv.md (S3_REGNUM): New.\n\t(S4_REGNUM): Ditto.\n\t(S5_REGNUM): Ditto.\n\t(S6_REGNUM): Ditto.\n\t(S7_REGNUM): Ditto.\n\t(S8_REGNUM): Ditto.\n\t(S9_REGNUM): Ditto.\n\t(S10_REGNUM): Ditto.\n\t(S11_REGNUM): Ditto.\n\t(gpr_save): Model USEs correctly.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/riscv/pr95252.c: New.", "tree": {"sha": "071dc677a6be1d9678939876f1f8eaf213e67684", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/071dc677a6be1d9678939876f1f8eaf213e67684"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d0e0c1300f9f08608873df5571e14a61308dd0c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0e0c1300f9f08608873df5571e14a61308dd0c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0e0c1300f9f08608873df5571e14a61308dd0c0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0e0c1300f9f08608873df5571e14a61308dd0c0/comments", "author": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec6ffbb919cdde26da3fbc949e65d564c70a3084", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec6ffbb919cdde26da3fbc949e65d564c70a3084", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec6ffbb919cdde26da3fbc949e65d564c70a3084"}], "stats": {"total": 161, "additions": 156, "deletions": 5}, "files": [{"sha": "f764fe7ba0167bea9e01b59df7663e50e62d13a1", "filename": "gcc/config/riscv/predicates.md", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0e0c1300f9f08608873df5571e14a61308dd0c0/gcc%2Fconfig%2Friscv%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0e0c1300f9f08608873df5571e14a61308dd0c0/gcc%2Fconfig%2Friscv%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fpredicates.md?ref=d0e0c1300f9f08608873df5571e14a61308dd0c0", "patch": "@@ -206,3 +206,9 @@\n \n (define_predicate \"fp_branch_comparison\"\n   (match_code \"unordered,ordered,unlt,unge,unle,ungt,uneq,ltgt,ne,eq,lt,le,gt,ge\"))\n+\n+(define_special_predicate \"gpr_save_operation\"\n+  (match_code \"parallel\")\n+{\n+  return riscv_gpr_save_operation_p (op);\n+})"}, {"sha": "9cda6a888796b683d23bb1a8d3c61995b774701b", "filename": "gcc/config/riscv/riscv-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0e0c1300f9f08608873df5571e14a61308dd0c0/gcc%2Fconfig%2Friscv%2Friscv-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0e0c1300f9f08608873df5571e14a61308dd0c0/gcc%2Fconfig%2Friscv%2Friscv-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-protos.h?ref=d0e0c1300f9f08608873df5571e14a61308dd0c0", "patch": "@@ -73,6 +73,8 @@ extern bool riscv_can_use_return_insn (void);\n extern rtx riscv_function_value (const_tree, const_tree, enum machine_mode);\n extern bool riscv_expand_block_move (rtx, rtx, rtx);\n extern bool riscv_store_data_bypass_p (rtx_insn *, rtx_insn *);\n+extern rtx riscv_gen_gpr_save_insn (struct riscv_frame_info *);\n+extern bool riscv_gpr_save_operation_p (rtx);\n \n /* Routines implemented in riscv-c.c.  */\n void riscv_cpu_cpp_builtins (cpp_reader *);"}, {"sha": "b8fe9d08fb0f299461ee899344da81cdf4a18cd2", "filename": "gcc/config/riscv/riscv-sr.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0e0c1300f9f08608873df5571e14a61308dd0c0/gcc%2Fconfig%2Friscv%2Friscv-sr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0e0c1300f9f08608873df5571e14a61308dd0c0/gcc%2Fconfig%2Friscv%2Friscv-sr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-sr.c?ref=d0e0c1300f9f08608873df5571e14a61308dd0c0", "patch": "@@ -306,6 +306,10 @@ riscv_remove_unneeded_save_restore_calls (void)\n \n \t  if (CALL_P (insn))\n \t    ++call_count;\n+\t  /* Ignore any USEs in the gpr_save pattern.  They don't prevent us\n+\t     from optimizing away the save call.  */\n+\t  else if (insn == prologue_matched)\n+\t    ;\n \t  else\n \t    {\n \t      df_ref use;"}, {"sha": "c11ed0601166d6ea2a58919784867cbf2523693e", "filename": "gcc/config/riscv/riscv.c", "status": "modified", "additions": 81, "deletions": 2, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0e0c1300f9f08608873df5571e14a61308dd0c0/gcc%2Fconfig%2Friscv%2Friscv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0e0c1300f9f08608873df5571e14a61308dd0c0/gcc%2Fconfig%2Friscv%2Friscv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.c?ref=d0e0c1300f9f08608873df5571e14a61308dd0c0", "patch": "@@ -334,6 +334,14 @@ static const struct attribute_spec riscv_attribute_table[] =\n   { NULL,\t0,  0, false, false, false, false, NULL, NULL }\n };\n \n+/* Order for the CLOBBERs/USEs of gpr_save.  */\n+static const unsigned gpr_save_reg_order[] = {\n+  INVALID_REGNUM, T0_REGNUM, T1_REGNUM, RETURN_ADDR_REGNUM,\n+  S0_REGNUM, S1_REGNUM, S2_REGNUM, S3_REGNUM, S4_REGNUM,\n+  S5_REGNUM, S6_REGNUM, S7_REGNUM, S8_REGNUM, S9_REGNUM,\n+  S10_REGNUM, S11_REGNUM\n+};\n+\n /* A table describing all the processors GCC knows about.  */\n static const struct riscv_cpu_info riscv_cpu_info_table[] = {\n   { \"rocket\", generic, &rocket_tune_info },\n@@ -4069,9 +4077,9 @@ riscv_expand_prologue (void)\n       rtx dwarf = NULL_RTX;\n       dwarf = riscv_adjust_libcall_cfi_prologue ();\n \n-      frame->mask = 0; /* Temporarily fib that we need not save GPRs.  */\n       size -= frame->save_libcall_adjustment;\n-      insn = emit_insn (gen_gpr_save (GEN_INT (mask)));\n+      insn = emit_insn (riscv_gen_gpr_save_insn (frame));\n+      frame->mask = 0; /* Temporarily fib that we need not save GPRs.  */\n \n       RTX_FRAME_RELATED_P (insn) = 1;\n       REG_NOTES (insn) = dwarf;\n@@ -5177,6 +5185,77 @@ riscv_new_address_profitable_p (rtx memref, rtx_insn *insn, rtx new_addr)\n   return new_cost <= old_cost;\n }\n \n+/* Helper function for generating gpr_save pattern.  */\n+\n+rtx\n+riscv_gen_gpr_save_insn (struct riscv_frame_info *frame)\n+{\n+  unsigned count = riscv_save_libcall_count (frame->mask);\n+  /* 1 for unspec 2 for clobber t0/t1 and 1 for ra.  */\n+  unsigned veclen = 1 + 2 + 1 + count;\n+  rtvec vec = rtvec_alloc (veclen);\n+\n+  gcc_assert (veclen <= ARRAY_SIZE (gpr_save_reg_order));\n+\n+  RTVEC_ELT (vec, 0) =\n+    gen_rtx_UNSPEC_VOLATILE (VOIDmode,\n+      gen_rtvec (1, GEN_INT (frame->mask)), UNSPECV_GPR_SAVE);\n+\n+  for (int i = 1; i < veclen; ++i)\n+    {\n+      unsigned regno = gpr_save_reg_order[i];\n+      rtx reg = gen_rtx_REG (Pmode, regno);\n+      rtx elt;\n+\n+      /* t0 and t1 are CLOBBERs, others are USEs.  */\n+      if (i < 3)\n+\telt = gen_rtx_CLOBBER (Pmode, reg);\n+      else\n+\telt = gen_rtx_USE (Pmode, reg);\n+\n+      RTVEC_ELT (vec, i) = elt;\n+    }\n+\n+  /* Largest number of caller-save register must set in mask if we are\n+     not using __riscv_save_0.  */\n+  gcc_assert ((count == 0) ||\n+\t      BITSET_P (frame->mask, gpr_save_reg_order[veclen - 1]));\n+\n+  return gen_rtx_PARALLEL (VOIDmode, vec);\n+}\n+\n+/* Return true if it's valid gpr_save pattern.  */\n+\n+bool\n+riscv_gpr_save_operation_p (rtx op)\n+{\n+  HOST_WIDE_INT len = XVECLEN (op, 0);\n+  gcc_assert (len <= ARRAY_SIZE (gpr_save_reg_order));\n+  for (int i = 0; i < len; i++)\n+    {\n+      rtx elt = XVECEXP (op, 0, i);\n+      if (i == 0)\n+\t{\n+\t  /* First element in parallel is unspec.  */\n+\t  if (GET_CODE (elt) != UNSPEC_VOLATILE\n+\t      || GET_CODE (XVECEXP (elt, 0, 0)) != CONST_INT\n+\t      || XINT (elt, 1) != UNSPECV_GPR_SAVE)\n+\t    return false;\n+\t}\n+      else\n+\t{\n+\t  /* Two CLOBBER and USEs, must check the order.  */\n+\t  unsigned expect_code = i < 3 ? CLOBBER : USE;\n+\t  if (GET_CODE (elt) != expect_code\n+\t      || !REG_P (XEXP (elt, 1))\n+\t      || (REGNO (XEXP (elt, 1)) != gpr_save_reg_order[i]))\n+\t    return false;\n+\t}\n+\tbreak;\n+    }\n+  return true;\n+}\n+\n /* Initialize the GCC target structure.  */\n #undef TARGET_ASM_ALIGNED_HI_OP\n #define TARGET_ASM_ALIGNED_HI_OP \"\\t.half\\t\""}, {"sha": "d9028c50b9a12b40e765567cf0b4e02f625c23f1", "filename": "gcc/config/riscv/riscv.md", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0e0c1300f9f08608873df5571e14a61308dd0c0/gcc%2Fconfig%2Friscv%2Friscv.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0e0c1300f9f08608873df5571e14a61308dd0c0/gcc%2Fconfig%2Friscv%2Friscv.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.md?ref=d0e0c1300f9f08608873df5571e14a61308dd0c0", "patch": "@@ -75,6 +75,15 @@\n    (S0_REGNUM\t\t\t8)\n    (S1_REGNUM\t\t\t9)\n    (S2_REGNUM\t\t\t18)\n+   (S3_REGNUM\t\t\t19)\n+   (S4_REGNUM\t\t\t20)\n+   (S5_REGNUM\t\t\t21)\n+   (S6_REGNUM\t\t\t22)\n+   (S7_REGNUM\t\t\t23)\n+   (S8_REGNUM\t\t\t24)\n+   (S9_REGNUM\t\t\t25)\n+   (S10_REGNUM\t\t\t26)\n+   (S11_REGNUM\t\t\t27)\n \n    (NORMAL_RETURN\t\t0)\n    (SIBCALL_RETURN\t\t1)\n@@ -2427,10 +2436,14 @@\n   \"\"\n   \"ebreak\")\n \n+;; Must use the registers that we save to prevent the rename reg optimization\n+;; pass from using them before the gpr_save pattern when shrink wrapping\n+;; occurs.  See bug 95252 for instance.\n+\n (define_insn \"gpr_save\"\n-  [(unspec_volatile [(match_operand 0 \"const_int_operand\")] UNSPECV_GPR_SAVE)\n-   (clobber (reg:SI T0_REGNUM))\n-   (clobber (reg:SI T1_REGNUM))]\n+  [(match_parallel 1 \"gpr_save_operation\"\n+     [(unspec_volatile [(match_operand 0 \"const_int_operand\")]\n+\t               UNSPECV_GPR_SAVE)])]\n   \"\"\n   { return riscv_output_gpr_save (INTVAL (operands[0])); })\n "}, {"sha": "0366c089f83ddffa1ba0681e7acbc7e8487a078d", "filename": "gcc/testsuite/gcc.target/riscv/pr95252.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0e0c1300f9f08608873df5571e14a61308dd0c0/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fpr95252.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0e0c1300f9f08608873df5571e14a61308dd0c0/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fpr95252.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fpr95252.c?ref=d0e0c1300f9f08608873df5571e14a61308dd0c0", "patch": "@@ -0,0 +1,47 @@\n+/* PR target/95252 */\n+/* { dg-options \"-O3 -funroll-loops -msave-restore\" } */\n+/* { dg-do run } */\n+\n+int a[6], b = 1, d, e;\n+long long c;\n+static int f = 1;\n+\n+void\n+fn1 (int p1)\n+{\n+  b = (b >> 1) & (1 ^ a[(1 ^ p1) & 5]);\n+}\n+\n+void\n+fn2 ()\n+{\n+  b = (b >> 1) & (1 ^ a[(b ^ 1) & 1]);\n+  fn1 (c >> 1 & 5);\n+  fn1 (c >> 2 & 5);\n+  fn1 (c >> 4 & 5);\n+  fn1 (c >> 8 & 5);\n+}\n+\n+int\n+main ()\n+{\n+  int i, j;\n+  for (; d;)\n+    {\n+      for (; e;)\n+\tfn2 ();\n+      f = 0;\n+    }\n+  for (i = 0; i < 8; i++)\n+    {\n+      if (f)\n+\ti = 9;\n+      for (j = 0; j < 7; j++)\n+\tfn2 ();\n+    }\n+\n+  if (b != 0)\n+    __builtin_abort ();\n+\n+  return 0;\n+}"}]}