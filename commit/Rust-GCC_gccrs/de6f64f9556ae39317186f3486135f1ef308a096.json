{"sha": "de6f64f9556ae39317186f3486135f1ef308a096", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGU2ZjY0Zjk1NTZhZTM5MzE3MTg2ZjM0ODYxMzVmMWVmMzA4YTA5Ng==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-11-13T00:07:40Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-11-13T00:07:40Z"}, "message": "c++: Don't form a templated TARGET_EXPR in finish_compound_literal\n\nThe atom_cache in normalize_atom relies on the assumption that two\nequivalent (templated) trees (in the sense of cp_tree_equal) must use\nthe same template parameters (according to find_template_parameters).\n\nThis assumption unfortunately doesn't always hold for TARGET_EXPRs,\nbecause cp_tree_equal ignores an artificial target of a TARGET_EXPR, but\nfind_template_parameters walks this target (and its DECL_CONTEXT).\n\nHence two TARGET_EXPRs built by force_target_expr with the same\ninitializer and under different settings of current_function_decl will\ncompare equal according to cp_tree_equal, but find_template_parameters\nmay return a different set of template parameters for them.  This breaks\nthe below testcase because during normalization we build two such\nTARGET_EXPRs (one under current_function_decl=f and another under =g),\nand then share the same ATOMIC_CONSTR for the two corresponding atoms,\nleading to a crash during satisfaction of g's associated constraints.\n\nThis patch works around this issue by removing the source of these\ntemplated TARGET_EXPRs.  The relevant call to get_target_expr_sfinae was\nadded in r9-6043, and it seems it's no longer necessary (according to\nhttps://gcc.gnu.org/pipermail/gcc-patches/2019-February/517323.html, the\ncall was added in order to avoid regressing on initlist109.C at the time).\n\ngcc/cp/ChangeLog:\n\n\t* semantics.c (finish_compound_literal): Don't wrap the original\n\tcompound literal in a TARGET_EXPR when inside a template.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp2a/concepts-decltype3.C: New test.", "tree": {"sha": "00607233a1cdce8e34b9d7f9f6d8f2e705ab87c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/00607233a1cdce8e34b9d7f9f6d8f2e705ab87c0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/de6f64f9556ae39317186f3486135f1ef308a096", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de6f64f9556ae39317186f3486135f1ef308a096", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de6f64f9556ae39317186f3486135f1ef308a096", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de6f64f9556ae39317186f3486135f1ef308a096/comments", "author": null, "committer": null, "parents": [{"sha": "93fc47746815ea9dac413322fcade2931f757e7f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93fc47746815ea9dac413322fcade2931f757e7f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93fc47746815ea9dac413322fcade2931f757e7f"}], "stats": {"total": 22, "additions": 16, "deletions": 6}, "files": [{"sha": "0389198dab84039e713689e212b97163f857f064", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de6f64f9556ae39317186f3486135f1ef308a096/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de6f64f9556ae39317186f3486135f1ef308a096/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=de6f64f9556ae39317186f3486135f1ef308a096", "patch": "@@ -3006,12 +3006,7 @@ finish_compound_literal (tree type, tree compound_literal,\n \n   /* If we're in a template, return the original compound literal.  */\n   if (orig_cl)\n-    {\n-      if (!VECTOR_TYPE_P (type))\n-\treturn get_target_expr_sfinae (orig_cl, complain);\n-      else\n-\treturn orig_cl;\n-    }\n+    return orig_cl;\n \n   if (TREE_CODE (compound_literal) == CONSTRUCTOR)\n     {"}, {"sha": "837855ce8ac860067b7ef96e5980e30384d37090", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-decltype3.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de6f64f9556ae39317186f3486135f1ef308a096/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-decltype3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de6f64f9556ae39317186f3486135f1ef308a096/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-decltype3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-decltype3.C?ref=de6f64f9556ae39317186f3486135f1ef308a096", "patch": "@@ -0,0 +1,15 @@\n+// { dg-do compile { target c++20 } }\n+\n+template <class T> concept C = requires(T t) { t; };\n+\n+template <class T> using A = decltype((T{}, int{}));\n+\n+template <class T> concept D = C<A<T>>;\n+\n+template <class T, class U> void f() requires D<T>;\n+template <class T> void g() requires D<T>;\n+\n+void h() {\n+  f<int, int>();\n+  g<int>();\n+}"}]}