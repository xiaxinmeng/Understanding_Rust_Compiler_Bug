{"sha": "07e582651db00ce8598c06434be90c5e64d0b981", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDdlNTgyNjUxZGIwMGNlODU5OGMwNjQzNGJlOTBjNWU2NGQwYjk4MQ==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2003-12-17T11:27:25Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2003-12-17T11:27:25Z"}, "message": "arm.c (thumb_base_register_rtx_p): Don't allow virtual registers as base registers for sub-word operations.\n\n* arm.c (thumb_base_register_rtx_p): Don't allow virtual registers\nas base registers for sub-word operations.\n(thumb_legitimate_address_p): Simplify REG+REG test.\n\nFrom-SVN: r74739", "tree": {"sha": "7d59f79210c1c2e4d7455a1b39529566da40894d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7d59f79210c1c2e4d7455a1b39529566da40894d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/07e582651db00ce8598c06434be90c5e64d0b981", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07e582651db00ce8598c06434be90c5e64d0b981", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07e582651db00ce8598c06434be90c5e64d0b981", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07e582651db00ce8598c06434be90c5e64d0b981/comments", "author": null, "committer": null, "parents": [{"sha": "cbf22cc5497ea2d590f4c7fff3a8617f656de145", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbf22cc5497ea2d590f4c7fff3a8617f656de145", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cbf22cc5497ea2d590f4c7fff3a8617f656de145"}], "stats": {"total": 13, "additions": 9, "deletions": 4}, "files": [{"sha": "c69d1c8f3682f96bf59eefbbe6c82a40c389ba2c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07e582651db00ce8598c06434be90c5e64d0b981/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07e582651db00ce8598c06434be90c5e64d0b981/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=07e582651db00ce8598c06434be90c5e64d0b981", "patch": "@@ -1,3 +1,9 @@\n+2003-12-17  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* arm.c (thumb_base_register_rtx_p): Don't allow virtual registers\n+\tas base registers for sub-word operations.\n+\t(thumb_legitimate_address_p): Simplify REG+REG test.\n+\n 2003-12-17  Segher Boessenkool  <boessen@de.ibm.com>\n \n \t* opts.c (wrap_help): Fix overflow."}, {"sha": "66346ba7f67d2f89c8a8a91561df2d13d082c463", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07e582651db00ce8598c06434be90c5e64d0b981/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07e582651db00ce8598c06434be90c5e64d0b981/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=07e582651db00ce8598c06434be90c5e64d0b981", "patch": "@@ -2868,7 +2868,7 @@ arm_legitimate_index_p (enum machine_mode mode, rtx index, int strict_p)\n \t  && INTVAL (index) > -range);\n }\n \n-/* Return nonzero if X is valid as an ARM state addressing register.  */\n+/* Return nonzero if X is valid as an Thumb state base register.  */\n static int\n thumb_base_register_rtx_p (rtx x, enum machine_mode mode, int strict_p)\n {\n@@ -2883,10 +2883,11 @@ thumb_base_register_rtx_p (rtx x, enum machine_mode mode, int strict_p)\n     return THUMB_REGNO_MODE_OK_FOR_BASE_P (regno, mode);\n \n   return (regno <= LAST_LO_REGNUM\n-\t  || regno >= FIRST_PSEUDO_REGISTER\n+\t  || regno > LAST_VIRTUAL_REGISTER\n \t  || regno == FRAME_POINTER_REGNUM\n \t  || (GET_MODE_SIZE (mode) >= 4\n \t      && (regno == STACK_POINTER_REGNUM\n+\t\t  || x >= FIRST_PSEUDO_REGISTER\n \t\t  || x == hard_frame_pointer_rtx\n \t\t  || x == arg_pointer_rtx)));\n }\n@@ -2963,8 +2964,6 @@ thumb_legitimate_address_p (enum machine_mode mode, rtx x, int strict_p)\n       if (GET_MODE_SIZE (mode) <= 4\n \t  && XEXP (x, 0) != frame_pointer_rtx\n \t  && XEXP (x, 1) != frame_pointer_rtx\n-\t  && XEXP (x, 0) != virtual_stack_vars_rtx\n-\t  && XEXP (x, 1) != virtual_stack_vars_rtx\n \t  && thumb_index_register_rtx_p (XEXP (x, 0), strict_p)\n \t  && thumb_index_register_rtx_p (XEXP (x, 1), strict_p))\n \treturn 1;"}]}