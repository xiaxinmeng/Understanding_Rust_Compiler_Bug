{"sha": "ca4adc913ddcaca116b48569ec97c7c7841f2a35", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2E0YWRjOTEzZGRjYWNhMTE2YjQ4NTY5ZWM5N2M3Yzc4NDFmMmEzNQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2012-03-06T19:22:10Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2012-03-06T19:22:10Z"}, "message": "re PR middle-end/52372 (gcc.target/mips/mips16-attributes{,-4}.c SEGV in dwf_regno)\n\ngcc/\n\tPR middle-end/52372\n\t* rtl.h (pc_rtx, ret_rtx, simple_return_rtx, cc0_rtx): Redefine as\n\tvariables.\n\t(GR_PC, GR_CC0, GR_RETURN, GR_SIMPLE_RETURN): Delete.\n\t* emit-rtl.c (pc_rtx, ret_rtx, simple_return_rtx, cc0_rtx): New\n\tvariables.\n\t(init_emit_regs): Move associated initialization to...\n\t(init_emit_once): ...here.\n\nFrom-SVN: r185013", "tree": {"sha": "06d59a5aff1f23174b6809d59da5b41885c1f9dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/06d59a5aff1f23174b6809d59da5b41885c1f9dd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca4adc913ddcaca116b48569ec97c7c7841f2a35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca4adc913ddcaca116b48569ec97c7c7841f2a35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca4adc913ddcaca116b48569ec97c7c7841f2a35", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca4adc913ddcaca116b48569ec97c7c7841f2a35/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "22a89c862f73f2d36543d0fb156863c8b96af04b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22a89c862f73f2d36543d0fb156863c8b96af04b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22a89c862f73f2d36543d0fb156863c8b96af04b"}], "stats": {"total": 41, "additions": 27, "deletions": 14}, "files": [{"sha": "3fa5e51649ffce536784ef1d8c7158d93915de0c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca4adc913ddcaca116b48569ec97c7c7841f2a35/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca4adc913ddcaca116b48569ec97c7c7841f2a35/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ca4adc913ddcaca116b48569ec97c7c7841f2a35", "patch": "@@ -1,3 +1,14 @@\n+2012-03-06  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\tPR middle-end/52372\n+\t* rtl.h (pc_rtx, ret_rtx, simple_return_rtx, cc0_rtx): Redefine as\n+\tvariables.\n+\t(GR_PC, GR_CC0, GR_RETURN, GR_SIMPLE_RETURN): Delete.\n+\t* emit-rtl.c (pc_rtx, ret_rtx, simple_return_rtx, cc0_rtx): New\n+\tvariables.\n+\t(init_emit_regs): Move associated initialization to...\n+\t(init_emit_once): ...here.\n+\n 2012-03-06  Richard Henderson  <rth@redhat.com>\n \n \t* config/m68k/m68k.h (ISA_HAS_TAS): New."}, {"sha": "fd19fb6ace0782a0330b0a3771c89164e8e4dd03", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca4adc913ddcaca116b48569ec97c7c7841f2a35/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca4adc913ddcaca116b48569ec97c7c7841f2a35/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=ca4adc913ddcaca116b48569ec97c7c7841f2a35", "patch": "@@ -117,6 +117,12 @@ FIXED_VALUE_TYPE fconst1[MAX_FCONST1];\n \n rtx const_int_rtx[MAX_SAVED_CONST_INT * 2 + 1];\n \n+/* Standard pieces of rtx, to be substituted directly into things.  */\n+rtx pc_rtx;\n+rtx ret_rtx;\n+rtx simple_return_rtx;\n+rtx cc0_rtx;\n+\n /* A hash table storing CONST_INTs whose absolute value is greater\n    than MAX_SAVED_CONST_INT.  */\n \n@@ -5536,10 +5542,6 @@ init_emit_regs (void)\n   init_reg_modes_target ();\n \n   /* Assign register numbers to the globally defined register rtx.  */\n-  pc_rtx = gen_rtx_fmt_ (PC, VOIDmode);\n-  ret_rtx = gen_rtx_fmt_ (RETURN, VOIDmode);\n-  simple_return_rtx = gen_rtx_fmt_ (SIMPLE_RETURN, VOIDmode);\n-  cc0_rtx = gen_rtx_fmt_ (CC0, VOIDmode);\n   stack_pointer_rtx = gen_raw_REG (Pmode, STACK_POINTER_REGNUM);\n   frame_pointer_rtx = gen_raw_REG (Pmode, FRAME_POINTER_REGNUM);\n   hard_frame_pointer_rtx = gen_raw_REG (Pmode, HARD_FRAME_POINTER_REGNUM);\n@@ -5855,6 +5857,11 @@ init_emit_once (void)\n   const_tiny_rtx[0][(int) BImode] = const0_rtx;\n   if (STORE_FLAG_VALUE == 1)\n     const_tiny_rtx[1][(int) BImode] = const1_rtx;\n+\n+  pc_rtx = gen_rtx_fmt_ (PC, VOIDmode);\n+  ret_rtx = gen_rtx_fmt_ (RETURN, VOIDmode);\n+  simple_return_rtx = gen_rtx_fmt_ (SIMPLE_RETURN, VOIDmode);\n+  cc0_rtx = gen_rtx_fmt_ (CC0, VOIDmode);\n }\n \f\n /* Produce exact duplicate of insn INSN after AFTER."}, {"sha": "89c1be85424b14ff4510f5215b9801671d3f17eb", "filename": "gcc/rtl.h", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca4adc913ddcaca116b48569ec97c7c7841f2a35/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca4adc913ddcaca116b48569ec97c7c7841f2a35/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=ca4adc913ddcaca116b48569ec97c7c7841f2a35", "patch": "@@ -2089,6 +2089,11 @@ extern GTY(()) rtx const_tiny_rtx[4][(int) MAX_MACHINE_MODE];\n #define CONST2_RTX(MODE) (const_tiny_rtx[2][(int) (MODE)])\n #define CONSTM1_RTX(MODE) (const_tiny_rtx[3][(int) (MODE)])\n \n+extern rtx pc_rtx;\n+extern rtx cc0_rtx;\n+extern rtx ret_rtx;\n+extern rtx simple_return_rtx;\n+\n /* If HARD_FRAME_POINTER_REGNUM is defined, then a special dummy reg\n    is used to represent the frame pointer.  This is because the\n    hard frame pointer and the automatic variables are separated by an amount\n@@ -2112,10 +2117,6 @@ extern GTY(()) rtx const_tiny_rtx[4][(int) MAX_MACHINE_MODE];\n /* Index labels for global_rtl.  */\n enum global_rtl_index\n {\n-  GR_PC,\n-  GR_CC0,\n-  GR_RETURN,\n-  GR_SIMPLE_RETURN,\n   GR_STACK_POINTER,\n   GR_FRAME_POINTER,\n /* For register elimination to work properly these hard_frame_pointer_rtx,\n@@ -2208,12 +2209,6 @@ extern struct target_rtl *this_target_rtl;\n #define mode_mem_attrs \\\n   (this_target_rtl->x_mode_mem_attrs)\n \n-/* Standard pieces of rtx, to be substituted directly into things.  */\n-#define pc_rtx                  (global_rtl[GR_PC])\n-#define ret_rtx                 (global_rtl[GR_RETURN])\n-#define simple_return_rtx       (global_rtl[GR_SIMPLE_RETURN])\n-#define cc0_rtx                 (global_rtl[GR_CC0])\n-\n /* All references to certain hard regs, except those created\n    by allocating pseudo regs into them (when that's possible),\n    go through these unique rtx objects.  */"}]}