{"sha": "68bc509a5c4ee2c3179c9430ce9c50dc1f9bfad2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjhiYzUwOWE1YzRlZTJjMzE3OWM5NDMwY2U5YzUwZGMxZjliZmFkMg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2011-04-08T22:31:22Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2011-04-08T22:31:22Z"}, "message": "combine.c (combine_validate_cost): Adjust comments.\n\n\t* combine.c (combine_validate_cost): Adjust comments.  Set registered\n\tcost of I0 to zero at the end, if any.\n\nFrom-SVN: r172216", "tree": {"sha": "4b379aed7743a6b37efaaade194c8751f93ca0f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4b379aed7743a6b37efaaade194c8751f93ca0f1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/68bc509a5c4ee2c3179c9430ce9c50dc1f9bfad2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68bc509a5c4ee2c3179c9430ce9c50dc1f9bfad2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68bc509a5c4ee2c3179c9430ce9c50dc1f9bfad2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68bc509a5c4ee2c3179c9430ce9c50dc1f9bfad2/comments", "author": null, "committer": null, "parents": [{"sha": "51a30b323dd59079cf039341d16e95c6136f31cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51a30b323dd59079cf039341d16e95c6136f31cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51a30b323dd59079cf039341d16e95c6136f31cb"}], "stats": {"total": 45, "additions": 26, "deletions": 19}, "files": [{"sha": "0ed308626dd7c81e43864e54889e14fdc2222f0a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68bc509a5c4ee2c3179c9430ce9c50dc1f9bfad2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68bc509a5c4ee2c3179c9430ce9c50dc1f9bfad2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=68bc509a5c4ee2c3179c9430ce9c50dc1f9bfad2", "patch": "@@ -1,7 +1,12 @@\n+2011-04-08  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* combine.c (combine_validate_cost): Adjust comments.  Set registered\n+\tcost of I0 to zero at the end, if any.\n+\n 2011-04-08  Xinliang David Li  <davidxl@google.com>\n \n-\t* ipa-cp.c (ipcp_update_profiling): Correct\n-\t negative scale factor due to insane profile data.\n+\t* ipa-cp.c (ipcp_update_profiling): Correct negative scale factor due\n+\tto insane profile data.\n \n 2011-04-08  Xinliang David Li  <davidxl@google.com>\n \n@@ -11,9 +16,9 @@\n \n 2011-04-08  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n-\tPR 47829\n-\tgcc/config.gcc: disable unwind table generation for crtbegin/crtend\n-\ton i386-*-freebsd.\n+\tPR target/47829\n+\t* config.gcc (i386-*-freebsd): Disable unwind table generation for\n+\tcrtbegin/crtend.\n \n 2011-04-08  Michael Matz  <matz@suse.de>\n \n@@ -53,7 +58,7 @@\n \n 2011-04-08  Vladimir Makarov  <vmakarov@redhat.com>\n \n-\tPR 48435\n+\tPR inline-asm/48435\n \t* ira-color.c (setup_profitable_hard_regs): Add comments.\n \tDon't take prohibited hard regs into account.\n \t(setup_conflict_profitable_regs): Rename to"}, {"sha": "32a3d738653602d979d6ddda48533dd07f8acda2", "filename": "gcc/combine.c", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68bc509a5c4ee2c3179c9430ce9c50dc1f9bfad2/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68bc509a5c4ee2c3179c9430ce9c50dc1f9bfad2/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=68bc509a5c4ee2c3179c9430ce9c50dc1f9bfad2", "patch": "@@ -789,14 +789,13 @@ do_SUBST_MODE (rtx *into, enum machine_mode newval)\n \n #define SUBST_MODE(INTO, NEWVAL)  do_SUBST_MODE(&(INTO), (NEWVAL))\n \f\n-/* Subroutine of try_combine.  Determine whether the combine replacement\n-   patterns NEWPAT, NEWI2PAT and NEWOTHERPAT are cheaper according to\n-   insn_rtx_cost that the original instruction sequence I0, I1, I2, I3 and\n-   undobuf.other_insn.  Note that I1 and/or NEWI2PAT may be NULL_RTX.\n-   NEWOTHERPAT and undobuf.other_insn may also both be NULL_RTX.  This\n-   function returns false, if the costs of all instructions can be\n-   estimated, and the replacements are more expensive than the original\n-   sequence.  */\n+/* Subroutine of try_combine.  Determine whether the replacement patterns\n+   NEWPAT, NEWI2PAT and NEWOTHERPAT are cheaper according to insn_rtx_cost\n+   than the original sequence I0, I1, I2, I3 and undobuf.other_insn.  Note\n+   that I0, I1 and/or NEWI2PAT may be NULL_RTX.  Similarly, NEWOTHERPAT and\n+   undobuf.other_insn may also both be NULL_RTX.  Return false if the cost\n+   of all the instructions can be estimated and the replacements are more\n+   expensive than the original sequence.  */\n \n static bool\n combine_validate_cost (rtx i0, rtx i1, rtx i2, rtx i3, rtx newpat,\n@@ -861,10 +860,9 @@ combine_validate_cost (rtx i0, rtx i1, rtx i2, rtx i3, rtx newpat,\n \told_cost = 0;\n     }\n \n-  /* Disallow this recombination if both new_cost and old_cost are\n-     greater than zero, and new_cost is greater than old cost.  */\n-  if (old_cost > 0\n-      && new_cost > old_cost)\n+  /* Disallow this combination if both new_cost and old_cost are greater than\n+     zero, and new_cost is greater than old cost.  */\n+  if (old_cost > 0 && new_cost > old_cost)\n     {\n       if (dump_file)\n \t{\n@@ -910,7 +908,11 @@ combine_validate_cost (rtx i0, rtx i1, rtx i2, rtx i3, rtx newpat,\n   INSN_COST (i2) = new_i2_cost;\n   INSN_COST (i3) = new_i3_cost;\n   if (i1)\n-    INSN_COST (i1) = 0;\n+    {\n+      INSN_COST (i1) = 0;\n+      if (i0)\n+\tINSN_COST (i0) = 0;\n+    }\n \n   return true;\n }"}]}