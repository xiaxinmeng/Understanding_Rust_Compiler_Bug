{"sha": "48810be0cd39f6c2c22de02727d2e8662da22ec9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDg4MTBiZTBjZDM5ZjZjMmMyMmRlMDI3MjdkMmU4NjYyZGEyMmVjOQ==", "commit": {"author": {"name": "Kai Tietz", "email": "ktietz@redhat.com", "date": "2014-02-18T12:49:15Z"}, "committer": {"name": "Kai Tietz", "email": "ktietz@gcc.gnu.org", "date": "2014-02-18T12:49:15Z"}, "message": "re PR target/60193 (ICE on big nested frame)\n\n2014-02-18  Kai Tietz  <ktietz@redhat.com>\n\n\tPR target/60193\n\t* config/i386/i386.c (ix86_expand_prologue): Use\n\trax register as displacement for restoring %r10, %rax.\n\tAdditional fix wrong offset for restoring both-registers.\n\n2014-02-18  Kai Tietz  <ktietz@redhat.com>\n\n\tPR target/60193\n\t* gcc.target/i386/nest-1.c: New testcase.\n\nFrom-SVN: r207844", "tree": {"sha": "c73880076e7a6e6444abb4f5b9f59bb4d681f502", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c73880076e7a6e6444abb4f5b9f59bb4d681f502"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/48810be0cd39f6c2c22de02727d2e8662da22ec9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48810be0cd39f6c2c22de02727d2e8662da22ec9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48810be0cd39f6c2c22de02727d2e8662da22ec9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48810be0cd39f6c2c22de02727d2e8662da22ec9/comments", "author": null, "committer": null, "parents": [{"sha": "2c9f8c0afa20c14e19ecb3dc760bc4cdfe1ee66e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c9f8c0afa20c14e19ecb3dc760bc4cdfe1ee66e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c9f8c0afa20c14e19ecb3dc760bc4cdfe1ee66e"}], "stats": {"total": 36, "additions": 30, "deletions": 6}, "files": [{"sha": "2c99044ae35c3353924837c333a4e0d41a00199d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48810be0cd39f6c2c22de02727d2e8662da22ec9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48810be0cd39f6c2c22de02727d2e8662da22ec9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=48810be0cd39f6c2c22de02727d2e8662da22ec9", "patch": "@@ -1,3 +1,10 @@\n+2014-02-18  Kai Tietz  <ktietz@redhat.com>\n+\n+\tPR target/60193\n+\t* config/i386/i386.c (ix86_expand_prologue): Use\n+\trax register as displacement for restoring %r10, %rax.\n+\tAdditional fix wrong offset for restoring both-registers.\n+\n 2014-02-18  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* ipa-prop.c (compute_complex_ancestor_jump_func): Replace overzealous"}, {"sha": "8433fad65aee890fad680dca5cd0e420a096a73a", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48810be0cd39f6c2c22de02727d2e8662da22ec9/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48810be0cd39f6c2c22de02727d2e8662da22ec9/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=48810be0cd39f6c2c22de02727d2e8662da22ec9", "patch": "@@ -11023,13 +11023,12 @@ ix86_expand_prologue (void)\n       rtx r10 = NULL;\n       rtx (*adjust_stack_insn)(rtx, rtx, rtx);\n       const bool sp_is_cfa_reg = (m->fs.cfa_reg == stack_pointer_rtx);\n-      bool eax_live = false;\n+      bool eax_live = ix86_eax_live_at_start_p ();\n       bool r10_live = false;\n \n       if (TARGET_64BIT)\n         r10_live = (DECL_STATIC_CHAIN (current_function_decl) != 0);\n \n-      eax_live = ix86_eax_live_at_start_p ();\n       if (eax_live)\n \t{\n \t  insn = emit_insn (gen_push (eax));\n@@ -11084,17 +11083,16 @@ ix86_expand_prologue (void)\n \t works for realigned stack, too.  */\n       if (r10_live && eax_live)\n         {\n-\t  t = plus_constant (Pmode, stack_pointer_rtx, allocate);\n+\t  t = gen_rtx_PLUS (Pmode, stack_pointer_rtx, eax);\n \t  emit_move_insn (gen_rtx_REG (word_mode, R10_REG),\n \t\t\t  gen_frame_mem (word_mode, t));\n-\t  t = plus_constant (Pmode, stack_pointer_rtx,\n-\t\t\t     allocate - UNITS_PER_WORD);\n+\t  t = plus_constant (Pmode, t, UNITS_PER_WORD);\n \t  emit_move_insn (gen_rtx_REG (word_mode, AX_REG),\n \t\t\t  gen_frame_mem (word_mode, t));\n \t}\n       else if (eax_live || r10_live)\n \t{\n-\t  t = plus_constant (Pmode, stack_pointer_rtx, allocate);\n+\t  t = gen_rtx_PLUS (Pmode, stack_pointer_rtx, eax);\n \t  emit_move_insn (gen_rtx_REG (word_mode,\n \t\t\t\t       (eax_live ? AX_REG : R10_REG)),\n \t\t\t  gen_frame_mem (word_mode, t));"}, {"sha": "337472ee37a12caec1ed5fbfc9ad9828dba01779", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48810be0cd39f6c2c22de02727d2e8662da22ec9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48810be0cd39f6c2c22de02727d2e8662da22ec9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=48810be0cd39f6c2c22de02727d2e8662da22ec9", "patch": "@@ -1,3 +1,8 @@\n+2014-02-18  Kai Tietz  <ktietz@redhat.com>\n+\n+\tPR target/60193\n+\t* gcc.target/i386/nest-1.c: New testcase.\n+\n 2014-02-18  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/opt32.adb: New test."}, {"sha": "ba75350fb0bc9fbcde76b9ecd539102cb666c598", "filename": "gcc/testsuite/gcc.target/i386/nest-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48810be0cd39f6c2c22de02727d2e8662da22ec9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fnest-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48810be0cd39f6c2c22de02727d2e8662da22ec9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fnest-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fnest-1.c?ref=48810be0cd39f6c2c22de02727d2e8662da22ec9", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile { target llp64 } } */\n+/* { dg-options \"\" } */\n+\n+void foo (int i)\n+{\n+  void nested (void)\n+  {\n+    char arr[(1U << 31) + 4U];\n+    arr[i] = 0;\n+  }\n+\n+  nested ();\n+}\n+"}]}