{"sha": "80ae8e8ad2efea97a01aad6cb4656e7fb5b0fd55", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODBhZThlOGFkMmVmZWE5N2EwMWFhZDZjYjQ2NTZlN2ZiNWIwZmQ1NQ==", "commit": {"author": {"name": "Andrew Ruder", "email": "andy@aeruder.net", "date": "2007-04-09T18:04:50Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2007-04-09T18:04:50Z"}, "message": "sendmsg.c: Added __objc_msg_forward2...\n\n2007-04-09  Andrew Ruder  <andy@aeruder.net>\n\n        * sendmsg.c: Added __objc_msg_forward2, a hook that allows\n        external libraries to provide a function that returns the real\n        forwarding function based on both the selector and the receiver.\n        * objc/objc-api.h: Define __objc_msg_forward2.\n\nFrom-SVN: r123678", "tree": {"sha": "d4296a5892d33adec631c46ee86b937dcd79fb6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d4296a5892d33adec631c46ee86b937dcd79fb6f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/80ae8e8ad2efea97a01aad6cb4656e7fb5b0fd55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80ae8e8ad2efea97a01aad6cb4656e7fb5b0fd55", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80ae8e8ad2efea97a01aad6cb4656e7fb5b0fd55", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80ae8e8ad2efea97a01aad6cb4656e7fb5b0fd55/comments", "author": {"login": "aeruder", "id": 130169, "node_id": "MDQ6VXNlcjEzMDE2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/130169?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aeruder", "html_url": "https://github.com/aeruder", "followers_url": "https://api.github.com/users/aeruder/followers", "following_url": "https://api.github.com/users/aeruder/following{/other_user}", "gists_url": "https://api.github.com/users/aeruder/gists{/gist_id}", "starred_url": "https://api.github.com/users/aeruder/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aeruder/subscriptions", "organizations_url": "https://api.github.com/users/aeruder/orgs", "repos_url": "https://api.github.com/users/aeruder/repos", "events_url": "https://api.github.com/users/aeruder/events{/privacy}", "received_events_url": "https://api.github.com/users/aeruder/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ecc0fc15ecc0eea8678ccca5abf0672f76127d9c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecc0fc15ecc0eea8678ccca5abf0672f76127d9c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ecc0fc15ecc0eea8678ccca5abf0672f76127d9c"}], "stats": {"total": 113, "additions": 59, "deletions": 54}, "files": [{"sha": "e55fa509bebb928487ba2438c5f2a1ae8e2dd10e", "filename": "libobjc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80ae8e8ad2efea97a01aad6cb4656e7fb5b0fd55/libobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80ae8e8ad2efea97a01aad6cb4656e7fb5b0fd55/libobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2FChangeLog?ref=80ae8e8ad2efea97a01aad6cb4656e7fb5b0fd55", "patch": "@@ -1,3 +1,10 @@\n+2007-04-09  Andrew Ruder  <andy@aeruder.net>\n+\n+\t* sendmsg.c: Added __objc_msg_forward2, a hook that allows\n+\texternal libraries to provide a function that returns the real\n+\tforwarding function based on both the selector and the receiver.\n+\t* objc/objc-api.h: Define __objc_msg_forward2.\n+\n 2007-03-01  Brooks Moses  <brooks.moses@codesourcery.com>\n \n \t* Makefile.in: Add dummy install-pdf target."}, {"sha": "8100c6cfa27b7228d56ac4d6087996d66fe8126e", "filename": "libobjc/objc/objc-api.h", "status": "modified", "additions": 37, "deletions": 44, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80ae8e8ad2efea97a01aad6cb4656e7fb5b0fd55/libobjc%2Fobjc%2Fobjc-api.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80ae8e8ad2efea97a01aad6cb4656e7fb5b0fd55/libobjc%2Fobjc%2Fobjc-api.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc%2Fobjc-api.h?ref=80ae8e8ad2efea97a01aad6cb4656e7fb5b0fd55", "patch": "@@ -41,11 +41,9 @@ extern \"C\" {\n /* For functions which return Method_t */\n #define METHOD_NULL\t(Method_t)0\n                                                 /* Boolean typedefs */\n-/*\n-** Method descriptor returned by introspective Object methods.\n-** This is really just the first part of the more complete objc_method\n-** structure defined below and used internally by the runtime.\n-*/\n+/* Method descriptor returned by introspective Object methods.\n+   This is really just the first part of the more complete objc_method\n+   structure defined below and used internally by the runtime.  */\n struct objc_method_description\n {\n     SEL name;\t\t\t/* this is a selector, not a string */\n@@ -85,36 +83,32 @@ struct objc_method_description\n #define _C_COMPLEX   'j'\n \n \n-/*\n-** Error handling\n-**\n-** Call objc_error() or objc_verror() to record an error; this error\n-** routine will generally exit the program but not necessarily if the\n-** user has installed his own error handler.\n-**\n-** Call objc_set_error_handler to assign your own function for\n-** handling errors.  The function should return YES if it is ok\n-** to continue execution, or return NO or just abort if the\n-** program should be stopped.  The default error handler is just to\n-** print a message on stderr.\n-**\n-** The error handler function should be of type objc_error_handler\n-** The first parameter is an object instance of relevance.\n-** The second parameter is an error code.\n-** The third parameter is a format string in the printf style.\n-** The fourth parameter is a variable list of arguments.\n-*/\n+/* Error handling\n+  \n+   Call objc_error() or objc_verror() to record an error; this error\n+   routine will generally exit the program but not necessarily if the\n+   user has installed his own error handler.\n+  \n+   Call objc_set_error_handler to assign your own function for\n+   handling errors.  The function should return YES if it is ok\n+   to continue execution, or return NO or just abort if the\n+   program should be stopped.  The default error handler is just to\n+   print a message on stderr.\n+  \n+   The error handler function should be of type objc_error_handler\n+   The first parameter is an object instance of relevance.\n+   The second parameter is an error code.\n+   The third parameter is a format string in the printf style.\n+   The fourth parameter is a variable list of arguments.  */\n extern void objc_error(id object, int code, const char* fmt, ...);\n extern void objc_verror(id object, int code, const char* fmt, va_list ap);\n typedef BOOL (*objc_error_handler)(id, int code, const char *fmt, va_list ap);\n extern objc_error_handler objc_set_error_handler(objc_error_handler func);\n \n-/*\n-** Error codes\n-** These are used by the runtime library, and your\n-** error handling may use them to determine if the error is\n-** hard or soft thus whether execution can continue or abort.\n-*/\n+/* Error codes\n+   These are used by the runtime library, and your\n+   error handling may use them to determine if the error is\n+   hard or soft thus whether execution can continue or abort.  */\n #define OBJC_ERR_UNKNOWN 0             /* Generic error */\n \n #define OBJC_ERR_OBJC_VERSION 1        /* Incorrect runtime version */\n@@ -139,10 +133,8 @@ extern objc_error_handler objc_set_error_handler(objc_error_handler func);\n \n #define OBJC_ERR_BAD_STATE 40          /* Bad thread state */\n \n-/*\n-** Set this variable nonzero to print a line describing each\n-** message that is sent.  (this is currently disabled)\n-*/\n+/* Set this variable nonzero to print a line describing each\n+   message that is sent.  (this is currently disabled)  */\n extern BOOL objc_trace;\n \n \n@@ -160,14 +152,12 @@ struct objc_static_instances\n #endif\n };\n \n-/*\n-** Whereas a Module (defined further down) is the root (typically) of a file,\n-** a Symtab is the root of the class and category definitions within the\n-** module.  \n-** \n-** A Symtab contains a variable length array of pointers to classes and\n-** categories  defined in the module. \n-*/\n+/* Whereas a Module (defined further down) is the root (typically) of a file,\n+   a Symtab is the root of the class and category definitions within the\n+   module.  \n+   \n+   A Symtab contains a variable length array of pointers to classes and\n+   categories  defined in the module.   */\n typedef struct objc_symtab {\n   unsigned long sel_ref_cnt;                     /* Unknown. */\n   SEL        refs;                              /* Unknown. */\n@@ -431,11 +421,14 @@ objc_EXPORT void *(*_objc_calloc)(size_t, size_t);\n objc_EXPORT void (*_objc_free)(void *);\n \n /*\n-**  Hook for method forwarding. This makes it easy to substitute a\n+**  Hooks for method forwarding. This makes it easy to substitute a\n **  library, such as ffcall, that implements closures, thereby avoiding\n-**  gcc's __builtin_apply problems.\n+**  gcc's __builtin_apply problems.  __objc_msg_forward2's result will\n+**  be preferred over that of __objc_msg_forward if both are set and\n+**  return non-NULL.\n */\n objc_EXPORT IMP (*__objc_msg_forward)(SEL);\n+objc_EXPORT IMP (*__objc_msg_forward2)(id, SEL);\n \n Method_t class_get_class_method(MetaClass _class, SEL aSel);\n "}, {"sha": "c1aed1c0f9a3f722dde349ccf4cec6c05bb8f7a1", "filename": "libobjc/sendmsg.c", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80ae8e8ad2efea97a01aad6cb4656e7fb5b0fd55/libobjc%2Fsendmsg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80ae8e8ad2efea97a01aad6cb4656e7fb5b0fd55/libobjc%2Fsendmsg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fsendmsg.c?ref=80ae8e8ad2efea97a01aad6cb4656e7fb5b0fd55", "patch": "@@ -52,10 +52,15 @@ Boston, MA 02110-1301, USA.  */\n /* The uninstalled dispatch table */\n struct sarray *__objc_uninstalled_dtable = 0;   /* !T:MUTEX */\n \n-/* Hook for method forwarding. If it is set, is invoked to return a\n-   function that performs the real forwarding. Otherwise the libgcc\n-   based functions (__builtin_apply and friends) are used. */\n+/* Two hooks for method forwarding. If either is set, it is invoked\n+ * to return a function that performs the real forwarding.  If both\n+ * are set, the result of __objc_msg_forward2 will be preferred over\n+ * that of __objc_msg_forward.  If both return NULL or are unset,\n+ * the libgcc based functions (__builtin_apply and friends) are\n+ * used.\n+ */\n IMP (*__objc_msg_forward) (SEL) = NULL;\n+IMP (*__objc_msg_forward2) (id, SEL) = NULL;\n \n /* Send +initialize to class */\n static void __objc_send_initialize (Class);\n@@ -69,8 +74,7 @@ static void __objc_init_install_dtable (id, SEL);\n    return type for the selector.\n    __objc_block_forward for structures.\n    __objc_double_forward for floats/doubles.\n-   __objc_word_forward for pointers or types that fit in registers.\n-   */\n+   __objc_word_forward for pointers or types that fit in registers. */\n static double __objc_double_forward (id, SEL, ...);\n static id __objc_word_forward (id, SEL, ...);\n typedef struct { id many[8]; } __big;\n@@ -87,10 +91,11 @@ id nil_method (id, SEL);\n /* Given a selector, return the proper forwarding implementation. */\n inline\n IMP\n-__objc_get_forward_imp (SEL sel)\n+__objc_get_forward_imp (id rcv, SEL sel)\n {\n   /* If a custom forwarding hook was registered, try getting a forwarding\n-   * function from it.  */\n+     function from it. There are two forward routine hooks, one that\n+     takes the receiver as an argument and one that does not. */\n   if (__objc_msg_forward)\n     {\n       IMP result;\n@@ -99,7 +104,7 @@ __objc_get_forward_imp (SEL sel)\n     }\n \n   /* In all other cases, use the default forwarding functions built using\n-   * __builtin_apply and friends.  */\n+     __builtin_apply and friends.  */\n     {\n       const char *t = sel->sel_types;\n \n@@ -168,7 +173,7 @@ get_imp (Class class, SEL sel)\n \t\t is not in the dispatch table.  So the method just\n \t\t doesn't exist for the class.  Return the forwarding\n \t\t implementation. */\n-\t      res = __objc_get_forward_imp (sel);\n+             res = __objc_get_forward_imp ((id)class, sel);\n \t    }\n \t}\n     }\n@@ -237,7 +242,7 @@ objc_msg_lookup (id receiver, SEL op)\n \t\t{\n \t\t  /* If the method still just doesn't exist for the\n \t\t     class, attempt to forward the method. */\n-\t\t  result = __objc_get_forward_imp (op);\n+\t\t  result = __objc_get_forward_imp (receiver, op);\n \t\t}\n \t    }\n \t}"}]}