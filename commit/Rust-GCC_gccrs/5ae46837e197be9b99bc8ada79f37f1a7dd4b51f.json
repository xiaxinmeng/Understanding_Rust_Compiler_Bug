{"sha": "5ae46837e197be9b99bc8ada79f37f1a7dd4b51f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWFlNDY4MzdlMTk3YmU5Yjk5YmM4YWRhNzlmMzdmMWE3ZGQ0YjUxZg==", "commit": {"author": {"name": "Kirill Yukhin", "email": "kirill.yukhin@intel.com", "date": "2016-05-18T09:16:09Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2016-05-18T09:16:09Z"}, "message": "i386. Extend static buffers. Fix SF mode operand constraint to `Yv' in storehpd pattern.\n\ngcc/\n        * gcc/config/i386/sse.md (define_insn \"*andnot<mode>3\"): Extend static\n\tarray to 128 chars.\n\t(define_insn \"*andnottf3\"): Ditto.\n\t(define_insn \"*<code><mode>3\"/any_logic): Ditto.\n\t(define_insn \"*<code>tf3\"/any_logic): Ditto.\n\t(define_insn \"sse2_storehpd\"): Use Yv constraint for scalar\n\toperand to block AVX-512VL insn variant emit when it is not enabled.\n\nFrom-SVN: r236364", "tree": {"sha": "2fea57c0083cc8c16522646460e093731f5e4095", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2fea57c0083cc8c16522646460e093731f5e4095"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5ae46837e197be9b99bc8ada79f37f1a7dd4b51f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ae46837e197be9b99bc8ada79f37f1a7dd4b51f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ae46837e197be9b99bc8ada79f37f1a7dd4b51f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ae46837e197be9b99bc8ada79f37f1a7dd4b51f/comments", "author": null, "committer": null, "parents": [{"sha": "188940605054262324b8d268364f26cd05370327", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/188940605054262324b8d268364f26cd05370327", "html_url": "https://github.com/Rust-GCC/gccrs/commit/188940605054262324b8d268364f26cd05370327"}], "stats": {"total": 22, "additions": 16, "deletions": 6}, "files": [{"sha": "4592bcccbdccfe086966b7aab9e239c2bd6c13e1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ae46837e197be9b99bc8ada79f37f1a7dd4b51f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ae46837e197be9b99bc8ada79f37f1a7dd4b51f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5ae46837e197be9b99bc8ada79f37f1a7dd4b51f", "patch": "@@ -1,3 +1,13 @@\n+2016-05-18  Kirill Yukhin  <kirill.yukhin@intel.com>\n+\n+        * gcc/config/i386/sse.md (define_insn \"*andnot<mode>3\"): Extend static\n+\tarray to 128 chars.\n+\t(define_insn \"*andnottf3\"): Ditto.\n+\t(define_insn \"*<code><mode>3\"/any_logic): Ditto.\n+\t(define_insn \"*<code>tf3\"/any_logic): Ditto.\n+\t(define_insn \"sse2_storehpd\"): Use Yv constraint for scalar\n+\toperand to block AVX-512VL insn variant emit when it is not enabled.\n+\n 2016-05-18  Kirill Yukhin  <kirill.yukhin@intel.com>\n \n \t* config/i386/sse.md (define_insn \"*vec_concatv2sf_sse4_1\"): Use 'Yv'"}, {"sha": "b0d3f81f43d67c48bca029ecdb5d1a8d6fa9eed4", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ae46837e197be9b99bc8ada79f37f1a7dd4b51f/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ae46837e197be9b99bc8ada79f37f1a7dd4b51f/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=5ae46837e197be9b99bc8ada79f37f1a7dd4b51f", "patch": "@@ -3027,7 +3027,7 @@\n \t    (match_operand:MODEF 2 \"register_operand\" \"x,x,v,v\")))]\n   \"SSE_FLOAT_MODE_P (<MODE>mode)\"\n {\n-  static char buf[32];\n+  static char buf[128];\n   const char *ops;\n   const char *suffix\n     = (get_attr_mode (insn) == MODE_V4SF) ? \"ps\" : \"<ssevecmodesuffix>\";\n@@ -3094,7 +3094,7 @@\n \t  (match_operand:TF 2 \"vector_operand\" \"xBm,xm,vm,v\")))]\n   \"TARGET_SSE\"\n {\n-  static char buf[32];\n+  static char buf[128];\n   const char *ops;\n   const char *tmp\n     = (which_alternative >= 2 ? \"pandnq\"\n@@ -3150,7 +3150,7 @@\n \t  (match_operand:MODEF 2 \"register_operand\" \"x,x,v,v\")))]\n   \"SSE_FLOAT_MODE_P (<MODE>mode)\"\n {\n-  static char buf[32];\n+  static char buf[128];\n   const char *ops;\n   const char *suffix\n     = (get_attr_mode (insn) == MODE_V4SF) ? \"ps\" : \"<ssevecmodesuffix>\";\n@@ -3225,7 +3225,7 @@\n   \"TARGET_SSE\n    && ix86_binary_operator_ok (<CODE>, TFmode, operands)\"\n {\n-  static char buf[32];\n+  static char buf[128];\n   const char *ops;\n   const char *tmp\n     = (which_alternative >= 2 ? \"p<logic>q\"\n@@ -8426,9 +8426,9 @@\n ;; Avoid combining registers from different units in a single alternative,\n ;; see comment above inline_secondary_memory_needed function in i386.c\n (define_insn \"sse2_storehpd\"\n-  [(set (match_operand:DF 0 \"nonimmediate_operand\"     \"=m,x,v,x,*f,r\")\n+  [(set (match_operand:DF 0 \"nonimmediate_operand\"     \"=m,x,Yv,x,*f,r\")\n \t(vec_select:DF\n-\t  (match_operand:V2DF 1 \"nonimmediate_operand\" \" v,0,v,o,o,o\")\n+\t  (match_operand:V2DF 1 \"nonimmediate_operand\" \" v,0, v,o,o,o\")\n \t  (parallel [(const_int 1)])))]\n   \"TARGET_SSE2 && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n   \"@"}]}