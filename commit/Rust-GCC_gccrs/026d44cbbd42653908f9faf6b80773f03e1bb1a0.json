{"sha": "026d44cbbd42653908f9faf6b80773f03e1bb1a0", "node_id": "C_kwDOANBUbNoAKDAyNmQ0NGNiYmQ0MjY1MzkwOGY5ZmFmNmI4MDc3M2YwM2UxYmIxYTA", "commit": {"author": {"name": "Siddhesh Poyarekar", "email": "siddhesh@gotplt.org", "date": "2022-01-11T10:37:29Z"}, "committer": {"name": "Siddhesh Poyarekar", "email": "siddhesh@gotplt.org", "date": "2022-01-11T14:44:42Z"}, "message": "tree-optimization/103961: Never compute offset for -1 size\n\nNever try to compute size for offset when the object size is -1, which\nis either unknown maximum or uninitialized minimum irrespective of the\nosi->pass number.\n\ngcc/ChangeLog:\n\n\tPR tree-optimization/103961\n\t* tree-object-size.c (plus_stmt_object_size): Always avoid\n\tcomputing offset for -1 size.\n\ngcc/testsuite/ChangeLog:\n\n\tPR tree-optimization/103961\n\t* gcc.dg/pr103961.c: New test case.\n\nCo-authored-by: Jakub Jelinek <jakub@redhat.com>\nSigned-off-by: Siddhesh Poyarekar <siddhesh@gotplt.org>", "tree": {"sha": "b0b0e09370a25323a2e01a4664cc832626af619e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b0b0e09370a25323a2e01a4664cc832626af619e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/026d44cbbd42653908f9faf6b80773f03e1bb1a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/026d44cbbd42653908f9faf6b80773f03e1bb1a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/026d44cbbd42653908f9faf6b80773f03e1bb1a0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/026d44cbbd42653908f9faf6b80773f03e1bb1a0/comments", "author": {"login": "siddhesh", "id": 158582, "node_id": "MDQ6VXNlcjE1ODU4Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/158582?v=4", "gravatar_id": "", "url": "https://api.github.com/users/siddhesh", "html_url": "https://github.com/siddhesh", "followers_url": "https://api.github.com/users/siddhesh/followers", "following_url": "https://api.github.com/users/siddhesh/following{/other_user}", "gists_url": "https://api.github.com/users/siddhesh/gists{/gist_id}", "starred_url": "https://api.github.com/users/siddhesh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/siddhesh/subscriptions", "organizations_url": "https://api.github.com/users/siddhesh/orgs", "repos_url": "https://api.github.com/users/siddhesh/repos", "events_url": "https://api.github.com/users/siddhesh/events{/privacy}", "received_events_url": "https://api.github.com/users/siddhesh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "siddhesh", "id": 158582, "node_id": "MDQ6VXNlcjE1ODU4Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/158582?v=4", "gravatar_id": "", "url": "https://api.github.com/users/siddhesh", "html_url": "https://github.com/siddhesh", "followers_url": "https://api.github.com/users/siddhesh/followers", "following_url": "https://api.github.com/users/siddhesh/following{/other_user}", "gists_url": "https://api.github.com/users/siddhesh/gists{/gist_id}", "starred_url": "https://api.github.com/users/siddhesh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/siddhesh/subscriptions", "organizations_url": "https://api.github.com/users/siddhesh/orgs", "repos_url": "https://api.github.com/users/siddhesh/repos", "events_url": "https://api.github.com/users/siddhesh/events{/privacy}", "received_events_url": "https://api.github.com/users/siddhesh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71b72132011a47a4b39950d95718f18d1218978c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71b72132011a47a4b39950d95718f18d1218978c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71b72132011a47a4b39950d95718f18d1218978c"}], "stats": {"total": 41, "additions": 34, "deletions": 7}, "files": [{"sha": "2cd52884e3bfdb81bd41da5e33f94073cfcef0ce", "filename": "gcc/testsuite/gcc.dg/pr103961.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/026d44cbbd42653908f9faf6b80773f03e1bb1a0/gcc%2Ftestsuite%2Fgcc.dg%2Fpr103961.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/026d44cbbd42653908f9faf6b80773f03e1bb1a0/gcc%2Ftestsuite%2Fgcc.dg%2Fpr103961.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr103961.c?ref=026d44cbbd42653908f9faf6b80773f03e1bb1a0", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+extern void abort ();\n+\n+extern inline __attribute__ ((__gnu_inline__)) int\n+sprintf (char *restrict s, const char *restrict fmt, ...)\n+{\n+  return __builtin___sprintf_chk (s, 1, __builtin_object_size (s, 1),\n+\t\t\t\t  fmt, __builtin_va_arg_pack ());\n+}\n+\n+void\n+cap_to_text (int c)\n+{\n+  char buf[1572];\n+  char *p;\n+  int n, t;\n+  p = 20 + buf;\n+  for (t = 8; t--; )\n+    {\n+      for (n = 0; n < c; n++)\n+\tp += sprintf (p, \"a,\");\n+      p--;\n+      if (__builtin_object_size (p, 1) == 0)\n+\tabort ();\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-not \"abort\" } } */"}, {"sha": "f7cc323591c82eebb6f429ff367ec46cdf99fbb2", "filename": "gcc/tree-object-size.c", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/026d44cbbd42653908f9faf6b80773f03e1bb1a0/gcc%2Ftree-object-size.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/026d44cbbd42653908f9faf6b80773f03e1bb1a0/gcc%2Ftree-object-size.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-object-size.c?ref=026d44cbbd42653908f9faf6b80773f03e1bb1a0", "patch": "@@ -990,13 +990,10 @@ plus_stmt_object_size (struct object_size_info *osi, tree var, gimple *stmt)\n \t  addr_object_size (osi, op0, object_size_type, &bytes, &wholesize);\n \t}\n \n-      /* In the first pass, do not compute size for offset if either the\n-\t maximum size is unknown or the minimum size is not initialized yet;\n-\t the latter indicates a dependency loop and will be resolved in\n-\t subsequent passes.  We attempt to compute offset for 0 minimum size\n-\t too because a negative offset could be within bounds of WHOLESIZE,\n-\t giving a non-zero result for VAR.  */\n-      if (osi->pass != 0 || !size_unknown_p (bytes, 0))\n+      /* size_for_offset doesn't make sense for -1 size, but it does for size 0\n+\t since the wholesize could be non-zero and a negative offset could give\n+\t a non-zero size.  */\n+      if (!size_unknown_p (bytes, 0))\n \tbytes = size_for_offset (bytes, op1, wholesize);\n     }\n   else"}]}