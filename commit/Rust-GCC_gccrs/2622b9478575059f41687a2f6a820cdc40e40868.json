{"sha": "2622b9478575059f41687a2f6a820cdc40e40868", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjYyMmI5NDc4NTc1MDU5ZjQxNjg3YTJmNmE4MjBjZGM0MGU0MDg2OA==", "commit": {"author": {"name": "Alexandre Petit-Bianco", "email": "apbianco@cygnus.com", "date": "1999-04-09T16:26:33Z"}, "committer": {"name": "Alexandre Petit-Bianco", "email": "apbianco@gcc.gnu.org", "date": "1999-04-09T16:26:33Z"}, "message": "parse.y (patch_assignment): Added ArrayStoreException runtime check.\n\nTue Apr  6 15:15:51 1999  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n        * parse.y (patch_assignment): Added ArrayStoreException runtime\n        check.\n\nFrom-SVN: r26318", "tree": {"sha": "2f6407a4c763f83e183d2eb262b97017b40994a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2f6407a4c763f83e183d2eb262b97017b40994a5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2622b9478575059f41687a2f6a820cdc40e40868", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2622b9478575059f41687a2f6a820cdc40e40868", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2622b9478575059f41687a2f6a820cdc40e40868", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2622b9478575059f41687a2f6a820cdc40e40868/comments", "author": null, "committer": null, "parents": [{"sha": "11249cf0df9d2a868a09a49d12586c3c08823392", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11249cf0df9d2a868a09a49d12586c3c08823392", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11249cf0df9d2a868a09a49d12586c3c08823392"}], "stats": {"total": 119, "additions": 111, "deletions": 8}, "files": [{"sha": "0e03b880670e1ed9cf274be01c877eb03a6096bd", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2622b9478575059f41687a2f6a820cdc40e40868/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2622b9478575059f41687a2f6a820cdc40e40868/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=2622b9478575059f41687a2f6a820cdc40e40868", "patch": "@@ -3,6 +3,11 @@ Tue Apr  6 23:15:52 1999  Jeffrey A Law  (law@cygnus.com)\n \t* Makefile.in (TREE_H): Add tree-check.h.\n \t(RTL_H): Add genrtl.h.\n \n+Tue Apr  6 15:15:51 1999  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n+\n+        * parse.y (patch_assignment): Added ArrayStoreException runtime\n+        check.\n+\n 1999-04-06  Per Bothner  <bothner@cygnus.com>\n \n \t* expr.c (pop_type_0):  New function."}, {"sha": "ed25b16ab7462d99fbd0cb774a0bbe21d9048672", "filename": "gcc/java/parse.c", "status": "modified", "additions": 53, "deletions": 4, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2622b9478575059f41687a2f6a820cdc40e40868/gcc%2Fjava%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2622b9478575059f41687a2f6a820cdc40e40868/gcc%2Fjava%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.c?ref=2622b9478575059f41687a2f6a820cdc40e40868", "patch": "@@ -11252,10 +11252,59 @@ patch_assignment (node, wfl_op1, wfl_op2)\n   if (error_found)\n     return error_mark_node;\n \n-  /* If we built a compound expression as the result of a reference\n-     assignment into an array element, return it here. */\n-  if (TREE_CODE (node) == COMPOUND_EXPR)\n-    return node;\n+  /* 10.10: Array Store Exception runtime check */\n+  if (!flag_emit_class_files\n+      && lvalue_from_array \n+      && JREFERENCE_TYPE_P (TYPE_ARRAY_ELEMENT (lhs_type))\n+      && !CLASS_FINAL (TYPE_NAME (GET_SKIP_TYPE (rhs_type))))\n+    {\n+      tree check;\n+      tree base = lvalue;\n+\n+      /* We need to retrieve the right argument for _Jv_CheckArrayStore */\n+      if (TREE_CODE (lvalue) == COMPOUND_EXPR)\n+\tbase = TREE_OPERAND (lvalue, 0);\n+      else\n+\t{\n+\t  if (flag_bounds_check)\n+\t    base = TREE_OPERAND (TREE_OPERAND (TREE_OPERAND (base, 0), 1), 0);\n+\t  else\n+\t    base = TREE_OPERAND (TREE_OPERAND (base, 0), 0);\n+\t}\n+\n+      /* Build the invocation of _Jv_CheckArrayStore */\n+      check = build (CALL_EXPR, void_type_node,\n+\t\t     build_address_of (soft_checkarraystore_node),\n+\t\t     tree_cons (NULL_TREE, base,\n+\t\t\t\tbuild_tree_list (NULL_TREE, new_rhs)),\n+\t\t     NULL_TREE);\n+      TREE_SIDE_EFFECTS (check) = 1;\n+\n+      /* We have to decide on an insertion point */\n+      if (TREE_CODE (lvalue) == COMPOUND_EXPR)\n+\t{\n+\t  tree t;\n+\t  if (flag_bounds_check)\n+\t    {\n+\t      t = TREE_OPERAND (TREE_OPERAND (TREE_OPERAND (lvalue, 1), 0), 0);\n+\t      TREE_OPERAND (TREE_OPERAND (TREE_OPERAND (lvalue, 1), 0), 0) =\n+\t\tbuild (COMPOUND_EXPR, void_type_node, t, check);\n+\t    }\n+\t  else\n+\t    TREE_OPERAND (lvalue, 1) = build (COMPOUND_EXPR, lhs_type,\n+\t\t\t\t\t      check, TREE_OPERAND (lvalue, 1));\n+\t}\n+      else \n+\t{\n+\t  /* Make sure the bound check will happen before the store check */\n+\t  if (flag_bounds_check)\n+\t    TREE_OPERAND (TREE_OPERAND (lvalue, 0), 0) =\n+\t      build (COMPOUND_EXPR, void_type_node,\n+\t\t     TREE_OPERAND (TREE_OPERAND (lvalue, 0), 0), check);\n+\t  else\n+\t    lvalue = build (COMPOUND_EXPR, lhs_type, check, lvalue);\n+\t}\n+    }\n \n   TREE_OPERAND (node, 0) = lvalue;\n   TREE_OPERAND (node, 1) = new_rhs;"}, {"sha": "ef87024de070c7e90a40de3f370fb5df4ab34951", "filename": "gcc/java/parse.y", "status": "modified", "additions": 53, "deletions": 4, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2622b9478575059f41687a2f6a820cdc40e40868/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2622b9478575059f41687a2f6a820cdc40e40868/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=2622b9478575059f41687a2f6a820cdc40e40868", "patch": "@@ -8651,10 +8651,59 @@ patch_assignment (node, wfl_op1, wfl_op2)\n   if (error_found)\n     return error_mark_node;\n \n-  /* If we built a compound expression as the result of a reference\n-     assignment into an array element, return it here. */\n-  if (TREE_CODE (node) == COMPOUND_EXPR)\n-    return node;\n+  /* 10.10: Array Store Exception runtime check */\n+  if (!flag_emit_class_files\n+      && lvalue_from_array \n+      && JREFERENCE_TYPE_P (TYPE_ARRAY_ELEMENT (lhs_type))\n+      && !CLASS_FINAL (TYPE_NAME (GET_SKIP_TYPE (rhs_type))))\n+    {\n+      tree check;\n+      tree base = lvalue;\n+\n+      /* We need to retrieve the right argument for _Jv_CheckArrayStore */\n+      if (TREE_CODE (lvalue) == COMPOUND_EXPR)\n+\tbase = TREE_OPERAND (lvalue, 0);\n+      else\n+\t{\n+\t  if (flag_bounds_check)\n+\t    base = TREE_OPERAND (TREE_OPERAND (TREE_OPERAND (base, 0), 1), 0);\n+\t  else\n+\t    base = TREE_OPERAND (TREE_OPERAND (base, 0), 0);\n+\t}\n+\n+      /* Build the invocation of _Jv_CheckArrayStore */\n+      check = build (CALL_EXPR, void_type_node,\n+\t\t     build_address_of (soft_checkarraystore_node),\n+\t\t     tree_cons (NULL_TREE, base,\n+\t\t\t\tbuild_tree_list (NULL_TREE, new_rhs)),\n+\t\t     NULL_TREE);\n+      TREE_SIDE_EFFECTS (check) = 1;\n+\n+      /* We have to decide on an insertion point */\n+      if (TREE_CODE (lvalue) == COMPOUND_EXPR)\n+\t{\n+\t  tree t;\n+\t  if (flag_bounds_check)\n+\t    {\n+\t      t = TREE_OPERAND (TREE_OPERAND (TREE_OPERAND (lvalue, 1), 0), 0);\n+\t      TREE_OPERAND (TREE_OPERAND (TREE_OPERAND (lvalue, 1), 0), 0) =\n+\t\tbuild (COMPOUND_EXPR, void_type_node, t, check);\n+\t    }\n+\t  else\n+\t    TREE_OPERAND (lvalue, 1) = build (COMPOUND_EXPR, lhs_type,\n+\t\t\t\t\t      check, TREE_OPERAND (lvalue, 1));\n+\t}\n+      else \n+\t{\n+\t  /* Make sure the bound check will happen before the store check */\n+\t  if (flag_bounds_check)\n+\t    TREE_OPERAND (TREE_OPERAND (lvalue, 0), 0) =\n+\t      build (COMPOUND_EXPR, void_type_node,\n+\t\t     TREE_OPERAND (TREE_OPERAND (lvalue, 0), 0), check);\n+\t  else\n+\t    lvalue = build (COMPOUND_EXPR, lhs_type, check, lvalue);\n+\t}\n+    }\n \n   TREE_OPERAND (node, 0) = lvalue;\n   TREE_OPERAND (node, 1) = new_rhs;"}]}