{"sha": "594bb0e78980cbb20cdeb028056a8f01be55b06f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTk0YmIwZTc4OTgwY2JiMjBjZGViMDI4MDU2YThmMDFiZTU1YjA2Zg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2002-07-08T07:49:58Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2002-07-08T07:49:58Z"}, "message": "cp-tree.h (have_extern_spec): Declare it\n\n\t* cp-tree.h (have_extern_spec): Declare it\n\t* decl.c (have_extern_spec): Define it.\n\t(start_decl): Eliminate use of used_extern_spec.\n\t(start_function): Likewise.\n\t* parse.y (have_extern_spec): Remove declaration.\n\t(used_extern_spec): Likewise.\n\t(frob_specs): Eliminate use of used_extern_spec.\n\t(.hush_warning): Likewise.\n\nFrom-SVN: r55319", "tree": {"sha": "ac52e13562c359d31800ddbc3e14b676482d299d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ac52e13562c359d31800ddbc3e14b676482d299d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/594bb0e78980cbb20cdeb028056a8f01be55b06f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/594bb0e78980cbb20cdeb028056a8f01be55b06f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/594bb0e78980cbb20cdeb028056a8f01be55b06f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/594bb0e78980cbb20cdeb028056a8f01be55b06f/comments", "author": null, "committer": null, "parents": [{"sha": "974a90cfec98f0c651a890b823cba4ef61ef38c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/974a90cfec98f0c651a890b823cba4ef61ef38c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/974a90cfec98f0c651a890b823cba4ef61ef38c7"}], "stats": {"total": 42, "additions": 25, "deletions": 17}, "files": [{"sha": "f752ad5ba2c658826113606727d1d06e979bfa20", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/594bb0e78980cbb20cdeb028056a8f01be55b06f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/594bb0e78980cbb20cdeb028056a8f01be55b06f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=594bb0e78980cbb20cdeb028056a8f01be55b06f", "patch": "@@ -1,3 +1,14 @@\n+2002-07-08  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* cp-tree.h (have_extern_spec): Declare it\n+\t* decl.c (have_extern_spec): Define it.\n+\t(start_decl): Eliminate use of used_extern_spec.\n+\t(start_function): Likewise.\n+\t* parse.y (have_extern_spec): Remove declaration.\n+\t(used_extern_spec): Likewise.\n+\t(frob_specs): Eliminate use of used_extern_spec.\n+\t(.hush_warning): Likewise.\n+\n 2002-07-07  Mark Mitchell  <mark@codesourcery.com>\n \n \t* Make-lang.in (cp/parse.o): Depend on decl.h."}, {"sha": "d92597ecbb1feca1ee93aa83dee2ef519e99dd14", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/594bb0e78980cbb20cdeb028056a8f01be55b06f/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/594bb0e78980cbb20cdeb028056a8f01be55b06f/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=594bb0e78980cbb20cdeb028056a8f01be55b06f", "patch": "@@ -3904,6 +3904,7 @@ extern tree declare_global_var                  PARAMS ((tree, tree));\n extern void register_dtor_fn                    PARAMS ((tree));\n extern tmpl_spec_kind current_tmpl_spec_kind    PARAMS ((int));\n extern tree cp_fname_init\t\t\tPARAMS ((const char *));\n+extern bool have_extern_spec;\n \n /* in decl2.c */\n extern int check_java_method\t\t\tPARAMS ((tree));"}, {"sha": "a7d203ccee0a6180c1cdf33c9841a33e6ff575cf", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/594bb0e78980cbb20cdeb028056a8f01be55b06f/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/594bb0e78980cbb20cdeb028056a8f01be55b06f/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=594bb0e78980cbb20cdeb028056a8f01be55b06f", "patch": "@@ -306,6 +306,11 @@ static enum deprecated_states deprecated_state = DEPRECATED_NORMAL;\n    being flagged as deprecated or reported as using deprecated\n    types.  */\n int adding_implicit_members = 0;\n+\n+/* True if a declaration with an `extern' linkage specifier is being\n+   processed.  */\n+bool have_extern_spec;\n+\n \f\n /* For each binding contour we allocate a binding_level structure\n    which records the names defined in that contour.\n@@ -7193,20 +7198,18 @@ start_decl (declarator, declspecs, initialized, attributes, prefix_attributes)\n   tree decl;\n   register tree type, tem;\n   tree context;\n-  extern int have_extern_spec;\n-  extern int used_extern_spec;\n \n #if 0\n   /* See code below that used this.  */\n   int init_written = initialized;\n #endif\n \n   /* This should only be done once on the top most decl.  */\n-  if (have_extern_spec && !used_extern_spec)\n+  if (have_extern_spec)\n     {\n       declspecs = tree_cons (NULL_TREE, get_identifier (\"extern\"),\n \t\t\t     declspecs);\n-      used_extern_spec = 1;\n+      have_extern_spec = false;\n     }\n \n   /* An object declared as __attribute__((deprecated)) suppresses\n@@ -13501,8 +13504,6 @@ start_function (declspecs, declarator, attrs, flags)\n   tree ctype = NULL_TREE;\n   tree fntype;\n   tree restype;\n-  extern int have_extern_spec;\n-  extern int used_extern_spec;\n   int doing_friend = 0;\n   struct cp_binding_level *bl;\n   tree current_function_parms;\n@@ -13512,10 +13513,10 @@ start_function (declspecs, declarator, attrs, flags)\n   my_friendly_assert (TREE_CHAIN (void_list_node) == NULL_TREE, 161);\n \n   /* This should only be done once on the top most decl.  */\n-  if (have_extern_spec && !used_extern_spec)\n+  if (have_extern_spec)\n     {\n       declspecs = tree_cons (NULL_TREE, get_identifier (\"extern\"), declspecs);\n-      used_extern_spec = 1;\n+      have_extern_spec = false;\n     }\n \n   if (flags & SF_PRE_PARSED)"}, {"sha": "73eec6a45c26abd72f2712f6c454e0b5d0a63904", "filename": "gcc/cp/parse.y", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/594bb0e78980cbb20cdeb028056a8f01be55b06f/gcc%2Fcp%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/594bb0e78980cbb20cdeb028056a8f01be55b06f/gcc%2Fcp%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.y?ref=594bb0e78980cbb20cdeb028056a8f01be55b06f", "patch": "@@ -98,10 +98,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n    error message if the user supplies an empty conditional expression.  */\n static const char *cond_stmt_keyword;\n \n-/* Nonzero if we have an `extern \"C\"' acting as an extern specifier.  */\n-int have_extern_spec;\n-int used_extern_spec;\n-\n /* List of types and structure classes of the current declaration.  */\n static GTY(()) tree current_declspecs;\n \n@@ -163,7 +159,7 @@ frob_specs (specs_attrs, lookups)\n   if (current_declspecs\n       && TREE_CODE (current_declspecs) != TREE_LIST)\n     current_declspecs = build_tree_list (NULL_TREE, current_declspecs);\n-  if (have_extern_spec && !used_extern_spec)\n+  if (have_extern_spec)\n     {\n       /* We have to indicate that there is an \"extern\", but that it\n          was part of a language specifier.  For instance,\n@@ -174,7 +170,7 @@ frob_specs (specs_attrs, lookups)\n       current_declspecs = tree_cons (error_mark_node,\n \t\t\t\t     get_identifier (\"extern\"),\n \t\t\t\t     current_declspecs);\n-      used_extern_spec = 1;\n+      have_extern_spec = false;\n     }\n }\n \n@@ -510,12 +506,11 @@ extdefs_opt:\n \t;\n \n .hush_warning:\n-\t\t{ have_extern_spec = 1;\n-\t\t  used_extern_spec = 0;\n+\t\t{ have_extern_spec = true;\n \t\t  $<ttype>$ = NULL_TREE; }\n \t;\n .warning_ok:\n-\t\t{ have_extern_spec = 0; }\n+\t\t{ have_extern_spec = false; }\n \t;\n \n extension:"}]}