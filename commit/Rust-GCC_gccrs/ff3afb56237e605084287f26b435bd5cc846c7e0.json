{"sha": "ff3afb56237e605084287f26b435bd5cc846c7e0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmYzYWZiNTYyMzdlNjA1MDg0Mjg3ZjI2YjQzNWJkNWNjODQ2YzdlMA==", "commit": {"author": {"name": "Jason Thorpe", "email": "thorpej@wasabisystems.com", "date": "2002-11-21T21:39:17Z"}, "committer": {"name": "Jason Thorpe", "email": "thorpej@gcc.gnu.org", "date": "2002-11-21T21:39:17Z"}, "message": "config.gcc (arm*-*-netbsdelf*): Enable configuration.\n\n* config.gcc (arm*-*-netbsdelf*): Enable configuration.\n* config/arm/netbsd-elf.h: New file.\n\nFrom-SVN: r59359", "tree": {"sha": "b3ca551fe79c823663c7d6de39a0014c3ff88042", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b3ca551fe79c823663c7d6de39a0014c3ff88042"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ff3afb56237e605084287f26b435bd5cc846c7e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff3afb56237e605084287f26b435bd5cc846c7e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff3afb56237e605084287f26b435bd5cc846c7e0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff3afb56237e605084287f26b435bd5cc846c7e0/comments", "author": null, "committer": null, "parents": [{"sha": "57c21a4200547316d12580c56bb8e71b0a0a5e38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57c21a4200547316d12580c56bb8e71b0a0a5e38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57c21a4200547316d12580c56bb8e71b0a0a5e38"}], "stats": {"total": 185, "additions": 184, "deletions": 1}, "files": [{"sha": "9307f981033f7399efee72c73e731bde66e34962", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff3afb56237e605084287f26b435bd5cc846c7e0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff3afb56237e605084287f26b435bd5cc846c7e0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ff3afb56237e605084287f26b435bd5cc846c7e0", "patch": "@@ -1,3 +1,8 @@\n+2002-11-21  Jason Thorpe  <thorpej@wasabisystems.com>\n+\n+\t* config.gcc (arm*-*-netbsdelf*): Enable configuration.\n+\t* config/arm/netbsd-elf.h: New file.\n+\n 2002-11-21  Jason Thorpe  <thorpej@wasabisystems.com>\n \n \t* config/arm/elf.h (SUBTARGET_EXTRA_SPECS): Add"}, {"sha": "ef7bac4fcccfe3e80e49455712a64f3179bc187d", "filename": "gcc/config.gcc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff3afb56237e605084287f26b435bd5cc846c7e0/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff3afb56237e605084287f26b435bd5cc846c7e0/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=ff3afb56237e605084287f26b435bd5cc846c7e0", "patch": "@@ -617,7 +617,8 @@ arm*-*-freebsd*|strongarm*-*-freebsd*)\n \ttmake_file=\"${tmake_file} arm/t-strongarm-elf\"\n \t;;\n arm*-*-netbsdelf*)\n-\techo \"GCC does not yet support the ${machine} target\"; exit 1\n+\ttm_file=\"dbxelf.h elfos.h netbsd.h netbsd-elf.h arm/elf.h arm/aout.h arm/arm.h arm/netbsd-elf.h\"\n+\ttmake_file=\"${tmake_file} arm/t-netbsd\"\n \t;;\n arm*-*-netbsd*)\n \ttm_file=\"arm/aout.h arm/arm.h netbsd.h netbsd-aout.h arm/netbsd.h\""}, {"sha": "0d5b7984914bc4185a18d9b480958d88f7c0feba", "filename": "gcc/config/arm/netbsd-elf.h", "status": "added", "additions": 177, "deletions": 0, "changes": 177, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff3afb56237e605084287f26b435bd5cc846c7e0/gcc%2Fconfig%2Farm%2Fnetbsd-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff3afb56237e605084287f26b435bd5cc846c7e0/gcc%2Fconfig%2Farm%2Fnetbsd-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fnetbsd-elf.h?ref=ff3afb56237e605084287f26b435bd5cc846c7e0", "patch": "@@ -0,0 +1,177 @@\n+/* Definitions of target machine for GNU compiler, NetBSD/arm ELF version.\n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+   Contributed by Wasabi Systems, Inc.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+/* Run-time Target Specification.  */\n+#undef TARGET_VERSION\n+#define TARGET_VERSION fputs (\" (NetBSD/arm ELF)\", stderr);\n+\n+/* This is used in ASM_FILE_START.  */\n+#undef ARM_OS_NAME\n+#define ARM_OS_NAME \"NetBSD\"\n+\n+/* arm.h defaults to ARM6 CPU.  */\n+\n+/* This defaults us to little-endian.  */\n+#ifndef TARGET_ENDIAN_DEFAULT\n+#define TARGET_ENDIAN_DEFAULT 0\n+#endif\n+\n+#undef MULTILIB_DEFAULTS\n+\n+/* Default it to use ATPCS with soft-VFP.  */\n+#undef TARGET_DEFAULT\n+#define TARGET_DEFAULT\t\t\t\\\n+  (ARM_FLAG_APCS_32\t\t\t\\\n+   | ARM_FLAG_SOFT_FLOAT\t\t\\\n+   | ARM_FLAG_APCS_FRAME\t\t\\\n+   | ARM_FLAG_ATPCS\t\t\t\\\n+   | ARM_FLAG_VFP\t\t\t\\\n+   | ARM_FLAG_MMU_TRAPS\t\t\t\\\n+   | TARGET_ENDIAN_DEFAULT)\n+\n+#define TARGET_OS_CPP_BUILTINS()\t\\\n+  do\t\t\t\t\t\\\n+    {\t\t\t\t\t\\\n+      NETBSD_OS_CPP_BUILTINS_ELF();\t\\\n+    }\t\t\t\t\t\\\n+  while (0)\n+\n+#undef SUBTARGET_CPP_SPEC\n+#define SUBTARGET_CPP_SPEC NETBSD_CPP_SPEC\n+\n+#undef SUBTARGET_EXTRA_ASM_SPEC\n+#define SUBTARGET_EXTRA_ASM_SPEC\t\\\n+  \"-matpcs %{fpic:-k} %{fPIC:-k}\"\n+\n+/* Default floating point model is soft-VFP.\n+   FIXME: -mhard-float currently implies FPA.  */\n+#undef SUBTARGET_ASM_FLOAT_SPEC\n+#define SUBTARGET_ASM_FLOAT_SPEC\t\\\n+  \"%{mhard-float:-mfpu=fpa} \\\n+   %{msoft-float:-mfpu=softvfp} \\\n+   %{!mhard-float: \\\n+     %{!msoft-float:-mfpu=softvfp}}\"\n+\n+#undef SUBTARGET_EXTRA_SPECS\n+#define SUBTARGET_EXTRA_SPECS\t\t\t\t\\\n+  { \"subtarget_extra_asm_spec\",\tSUBTARGET_EXTRA_ASM_SPEC }, \\\n+  { \"subtarget_asm_float_spec\", SUBTARGET_ASM_FLOAT_SPEC }, \\\n+  { \"netbsd_link_spec\",\t\tNETBSD_LINK_SPEC_ELF },\t\\\n+  { \"netbsd_entry_point\",\tNETBSD_ENTRY_POINT },\n+\n+#define NETBSD_ENTRY_POINT \"__start\"\n+\n+#undef LINK_SPEC\n+#define LINK_SPEC \\\n+  \"-X %{mbig-endian:-EB} %{mlittle-endian:-EL} \\\n+   %(netbsd_link_spec)\"\n+\n+/* Make GCC agree with <machine/ansi.h>.  */\n+\n+#undef SIZE_TYPE\n+#define SIZE_TYPE \"long unsigned int\"\n+\n+#undef PTRDIFF_TYPE\n+#define PTRDIFF_TYPE \"long int\"\n+\n+/* We don't have any limit on the length as out debugger is GDB.  */\n+#undef DBX_CONTIN_LENGTH\n+\n+/* NetBSD does its profiling differently to the Acorn compiler. We      \n+   don't need a word following the mcount call; and to skip it\n+   requires either an assembly stub or use of fomit-frame-pointer when  \n+   compiling the profiling functions.  Since we break Acorn CC\n+   compatibility below a little more won't hurt.  */\n+   \n+#undef ARM_FUNCTION_PROFILER                                  \n+#define ARM_FUNCTION_PROFILER(STREAM,LABELNO)\t\t\\\n+{\t\t\t\t\t\t\t\\\n+  asm_fprintf (STREAM, \"\\tmov\\t%Rip, %Rlr\\n\");\t\t\\\n+  asm_fprintf (STREAM, \"\\tbl\\t__mcount%s\\n\",\t\t\\\n+\t       NEED_PLT_RELOC ? \"(PLT)\" : \"\");\t\t\\\n+}\n+\n+/* VERY BIG NOTE: Change of structure alignment for NetBSD/arm.\n+   There are consequences you should be aware of...\n+\n+   Normally GCC/arm uses a structure alignment of 32 for compatibility\n+   with armcc.  This means that structures are padded to a word\n+   boundary.  However this causes problems with bugged NetBSD kernel\n+   code (possibly userland code as well - I have not checked every\n+   binary).  The nature of this bugged code is to rely on sizeof()\n+   returning the correct size of various structures rounded to the  \n+   nearest byte (SCSI and ether code are two examples, the vm system\n+   is another).  This code breaks when the structure alignment is 32\n+   as sizeof() will report a word=rounded size.  By changing the        \n+   structure alignment to 8. GCC will conform to what is expected by\n+   NetBSD.\n+   \n+   This has several side effects that should be considered.\n+   1. Structures will only be aligned to the size of the largest member.\n+      i.e. structures containing only bytes will be byte aligned.\n+           structures containing shorts will be half word alinged.          \n+           structures containing ints will be word aligned.                 \n+  \n+      This means structures should be padded to a word boundary if\n+      alignment of 32 is required for byte structures etc.\n+       \n+   2. A potential performance penalty may exist if strings are no longer\n+      word aligned.  GCC will not be able to use word load/stores to copy\n+      short strings.\n+\n+   This modification is not encouraged but with the present state of the\n+   NetBSD source tree it is currently the only solution that meets the\n+   requirements.  */\n+\n+#undef DEFAULT_STRUCTURE_SIZE_BOUNDARY\n+#define DEFAULT_STRUCTURE_SIZE_BOUNDARY 8\n+\n+/* Emit code to set up a trampoline and synchronize the caches.  */\n+#undef INITIALIZE_TRAMPOLINE\n+#define INITIALIZE_TRAMPOLINE(TRAMP, FNADDR, CXT)\t\t\t\\\n+do\t\t\t\t\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    emit_move_insn (gen_rtx (MEM, SImode, plus_constant ((TRAMP), 8)),\t\\\n+\t\t    (CXT));\t\t\t\t\t\t\\\n+    emit_move_insn (gen_rtx (MEM, SImode, plus_constant ((TRAMP), 12)),\t\\\n+\t\t    (FNADDR));\t\t\t\t\t\t\\\n+    emit_library_call (gen_rtx_SYMBOL_REF (Pmode, \"__clear_cache\"),\t\\\n+\t\t       0, VOIDmode, 2, TRAMP, Pmode,\t\t\t\\\n+\t\t       plus_constant (TRAMP, TRAMPOLINE_SIZE), Pmode);\t\\\n+  }\t\t\t\t\t\t\t\t\t\\\n+while (0)\n+\n+/* Clear the instruction cache from `BEG' to `END'.  This makes a\n+   call to the ARM_SYNC_ICACHE architecture specific syscall.  */\n+#define CLEAR_INSN_CACHE(BEG, END)\t\t\t\t\t\\\n+do\t\t\t\t\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    extern int sysarch(int number, void *args);\t\t\t\t\\\n+    struct\t\t\t\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+\tunsigned int addr;\t\t\t\t\t\t\\\n+\tint          len;\t\t\t\t\t\t\\\n+      } s;\t\t\t\t\t\t\t\t\\\n+    s.addr = (unsigned int)(BEG);\t\t\t\t\t\\\n+    s.len = (END) - (BEG);\t\t\t\t\t\t\\\n+    (void) sysarch (0, &s);\t\t\t\t\t\t\\\n+  }\t\t\t\t\t\t\t\t\t\\\n+while (0)"}]}