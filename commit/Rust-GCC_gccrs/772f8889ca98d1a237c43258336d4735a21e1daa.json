{"sha": "772f8889ca98d1a237c43258336d4735a21e1daa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzcyZjg4ODljYTk4ZDFhMjM3YzQzMjU4MzM2ZDQ3MzVhMjFlMWRhYQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2003-04-28T06:06:59Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2003-04-28T06:06:59Z"}, "message": "re PR c++/10506 (ICE in build_new at cp/init.c with -fkeep-inline-functions and multiple inheritance)\n\n\tPR c++/10506\n\t* method.c (use_thunk): Decrement immediate_size_expand.\n\n\tPR c++/10503\n\t* cp-tree.h (DECL_VAR_MARKED_P): New macro.\n\t(DECL_MAYBE_TEMPLATE): Remove.\n\t* class.c (fixed_type_or_null): Avoid infinite recursion.\n\n\tPR c++/10506\n\t* g++.dg/init/new6.C: New test.\n\n\tPR c++/10503\n\t* g++.dg/init/ref6.C: New test.\n\nFrom-SVN: r66150", "tree": {"sha": "cc7c874e3bc2ad62227d6cd6c1acb24aaa40324b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cc7c874e3bc2ad62227d6cd6c1acb24aaa40324b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/772f8889ca98d1a237c43258336d4735a21e1daa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/772f8889ca98d1a237c43258336d4735a21e1daa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/772f8889ca98d1a237c43258336d4735a21e1daa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/772f8889ca98d1a237c43258336d4735a21e1daa/comments", "author": null, "committer": null, "parents": [{"sha": "aa438e8f2be0b073dc5f59376befa9b4215f6604", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa438e8f2be0b073dc5f59376befa9b4215f6604", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa438e8f2be0b073dc5f59376befa9b4215f6604"}], "stats": {"total": 70, "additions": 61, "deletions": 9}, "files": [{"sha": "d75773fc7ca8ca2f0c2748e6924a10bfcedd0871", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/772f8889ca98d1a237c43258336d4735a21e1daa/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/772f8889ca98d1a237c43258336d4735a21e1daa/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=772f8889ca98d1a237c43258336d4735a21e1daa", "patch": "@@ -1,5 +1,13 @@\n 2003-04-27  Mark Mitchell  <mark@codesourcery.com>\n \n+\tPR c++/10506\n+\t* method.c (use_thunk): Decrement immediate_size_expand.\n+\n+\tPR c++/10503\n+\t* cp-tree.h (DECL_VAR_MARKED_P): New macro.\n+\t(DECL_MAYBE_TEMPLATE): Remove.\n+\t* class.c (fixed_type_or_null): Avoid infinite recursion.\n+\n \t* decl.c (maybe_commonize_var): Make the code match the comments.\n \t* pt.c (instantiate_decl): Move call to import_export_decl.\n "}, {"sha": "33ece0dbe2fc22f44bdc542332e727630a891d3a", "filename": "gcc/cp/class.c", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/772f8889ca98d1a237c43258336d4735a21e1daa/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/772f8889ca98d1a237c43258336d4735a21e1daa/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=772f8889ca98d1a237c43258336d4735a21e1daa", "patch": "@@ -5388,11 +5388,21 @@ fixed_type_or_null (tree instance, int* nonnull, int* cdtorp)\n           /* Reference variables should be references to objects.  */\n           if (nonnull)\n \t    *nonnull = 1;\n-\n-\t  if (TREE_CODE (instance) == VAR_DECL\n-\t      && DECL_INITIAL (instance))\n-\t    return fixed_type_or_null (DECL_INITIAL (instance),\n-\t\t\t\t       nonnull, cdtorp);\n+\t  \n+\t  /* DECL_VAR_MARKED_P is used to prevent recursion; a\n+\t     variable's initializer may refer to the variable\n+\t     itself.  */\n+\t  if (TREE_CODE (instance) == VAR_DECL \n+\t      && DECL_INITIAL (instance)\n+\t      && !DECL_VAR_MARKED_P (instance))\n+\t    {\n+\t      tree type;\n+\t      DECL_VAR_MARKED_P (instance) = 1;\n+\t      type = fixed_type_or_null (DECL_INITIAL (instance),\n+\t\t\t\t\t nonnull, cdtorp);\n+\t      DECL_VAR_MARKED_P (instance) = 0;\n+\t      return type;\n+\t    }\n \t}\n       return NULL_TREE;\n "}, {"sha": "9db905cf45922e0a220b2d00977944ef9c9b5b4c", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/772f8889ca98d1a237c43258336d4735a21e1daa/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/772f8889ca98d1a237c43258336d4735a21e1daa/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=772f8889ca98d1a237c43258336d4735a21e1daa", "patch": "@@ -95,7 +95,7 @@ struct diagnostic_context;\n       DECL_IMPLICIT_TYPEDEF_P (in a TYPE_DECL)\n    3: DECL_IN_AGGR_P.\n    4: DECL_C_BIT_FIELD (in a FIELD_DECL)\n-      DECL_MAYBE_TEMPLATE (in a FUNCTION_DECL)\n+      DECL_VAR_MARKED_P (in a VAR_DECL)\n    5: DECL_INTERFACE_KNOWN.\n    6: DECL_THIS_STATIC (in VAR_DECL or FUNCTION_DECL).\n    7: DECL_DEAD_FOR_LOCAL (in VAR_DECL).\n@@ -2131,6 +2131,12 @@ struct lang_decl GTY(())\n   (DECL_LANG_SPECIFIC (VAR_TEMPL_TYPE_OR_FUNCTION_DECL_CHECK (NODE)) \\\n    ->decl_flags.u.template_info)\n \n+/* For a VAR_DECL, indicates that the variable has been processed.\n+   This flag is set and unset throughout the code; it is always\n+   used for a temporary purpose.  */\n+#define DECL_VAR_MARKED_P(NODE) \\\n+  (DECL_LANG_FLAG_4 (VAR_DECL_CHECK (NODE)))\n+\n /* Template information for a RECORD_TYPE or UNION_TYPE.  */\n #define CLASSTYPE_TEMPLATE_INFO(NODE) \\\n   (LANG_TYPE_CLASS_CHECK (RECORD_OR_UNION_TYPE_CHECK (NODE))->template_info)\n@@ -2807,9 +2813,6 @@ struct lang_decl GTY(())\n #define PROCESSING_REAL_TEMPLATE_DECL_P() \\\n   (processing_template_decl > template_class_depth (current_class_type))\n \n-/* This function may be a guiding decl for a template.  */\n-#define DECL_MAYBE_TEMPLATE(NODE) DECL_LANG_FLAG_4 (NODE)\n-\n /* Nonzero if this VAR_DECL or FUNCTION_DECL has already been\n    instantiated, i.e. its definition has been generated from the\n    pattern given in the the template.  */"}, {"sha": "49bb1168cfc5fab713e06ca98408464f734259a6", "filename": "gcc/cp/method.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/772f8889ca98d1a237c43258336d4735a21e1daa/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/772f8889ca98d1a237c43258336d4735a21e1daa/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=772f8889ca98d1a237c43258336d4735a21e1daa", "patch": "@@ -439,6 +439,9 @@ use_thunk (tree thunk_fndecl, bool emit_p)\n       assemble_end_function (thunk_fndecl, fnname);\n       current_function_decl = 0;\n       cfun = 0;\n+      /* Because init_function_start increments this, we must\n+\t decrement it.  */\n+      immediate_size_expand--;\n       TREE_ASM_WRITTEN (thunk_fndecl) = 1;\n     }\n   else"}, {"sha": "210cff6677c61981b00250b5046a3e7bbfefd23d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/772f8889ca98d1a237c43258336d4735a21e1daa/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/772f8889ca98d1a237c43258336d4735a21e1daa/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=772f8889ca98d1a237c43258336d4735a21e1daa", "patch": "@@ -1,3 +1,11 @@\n+2003-04-27  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/10506\n+\t* g++.dg/init/new6.C: New test.\n+\n+\tPR c++/10503\n+\t* g++.dg/init/ref6.C: New test.\n+\n 2003-04-26  David Edelsohn  <edelsohn@gnu.org>\n \n \t* g++.dg/warn/weak1.C: XFAIL on AIX4."}, {"sha": "ecbafd13e6c0a1c85141807fa55278d8e29cdc50", "filename": "gcc/testsuite/g++.dg/init/new6.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/772f8889ca98d1a237c43258336d4735a21e1daa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/772f8889ca98d1a237c43258336d4735a21e1daa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew6.C?ref=772f8889ca98d1a237c43258336d4735a21e1daa", "patch": "@@ -0,0 +1,8 @@\n+// { dg-options \"-fkeep-inline-functions\" }\n+\n+struct B1 { virtual ~B1(); };\n+struct B2 { virtual ~B2(); };\n+struct D : B1, B2 {};\n+struct X : D      { X (); };\n+\n+X::X () { new int; }"}, {"sha": "50a9636036667b7474b1d0ebaf08e38c4997426f", "filename": "gcc/testsuite/g++.dg/init/ref6.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/772f8889ca98d1a237c43258336d4735a21e1daa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fref6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/772f8889ca98d1a237c43258336d4735a21e1daa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fref6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fref6.C?ref=772f8889ca98d1a237c43258336d4735a21e1daa", "patch": "@@ -0,0 +1,12 @@\n+struct B {\n+  void g() { }\n+};\n+\n+struct A {\n+  void f() {\n+    B &b = b;\n+    b.g();\n+  }\n+};\n+\n+int main(void) { }"}]}