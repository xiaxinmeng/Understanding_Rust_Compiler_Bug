{"sha": "6a8aa2e11b29c598ec24be8be0d87ca2ddd0f932", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmE4YWEyZTExYjI5YzU5OGVjMjRiZThiZTBkODdjYTJkZGQwZjkzMg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2018-09-18T13:26:05Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2018-09-18T13:26:05Z"}, "message": "re PR middle-end/63155 (memory hog)\n\n2018-09-18  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/63155\n\t* tree-ssa-coalesce.c (tree_int_map_hasher): Remove.\n\t(compute_samebase_partition_bases): Likewise.\n\t(coalesce_ssa_name): Always use compute_optimized_partition_bases.\n\t(gimple_can_coalesce_p): Simplify.\n\nFrom-SVN: r264388", "tree": {"sha": "753d5f1f4bdfd5d0adc8ab81e3845dcff86b0bbc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/753d5f1f4bdfd5d0adc8ab81e3845dcff86b0bbc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6a8aa2e11b29c598ec24be8be0d87ca2ddd0f932", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a8aa2e11b29c598ec24be8be0d87ca2ddd0f932", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a8aa2e11b29c598ec24be8be0d87ca2ddd0f932", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a8aa2e11b29c598ec24be8be0d87ca2ddd0f932/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "53c6feb2b2621bdfe3415dd6f664283917817491", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53c6feb2b2621bdfe3415dd6f664283917817491", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53c6feb2b2621bdfe3415dd6f664283917817491"}], "stats": {"total": 115, "additions": 12, "deletions": 103}, "files": [{"sha": "324a89bfa1ae588f8386a18c4a960ad0602ddeb0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a8aa2e11b29c598ec24be8be0d87ca2ddd0f932/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a8aa2e11b29c598ec24be8be0d87ca2ddd0f932/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6a8aa2e11b29c598ec24be8be0d87ca2ddd0f932", "patch": "@@ -1,3 +1,11 @@\n+2018-09-18  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/63155\n+\t* tree-ssa-coalesce.c (tree_int_map_hasher): Remove.\n+\t(compute_samebase_partition_bases): Likewise.\n+\t(coalesce_ssa_name): Always use compute_optimized_partition_bases.\n+\t(gimple_can_coalesce_p): Simplify.\n+\n 2018-09-18  Hans-Peter Nilsson  <hp@bitrange.com>\n \n \tHandle a library implementation of ffs calling __builtin_ffs."}, {"sha": "c123449bdda7afa37b469b7d34c3b8b7c8b3fbd9", "filename": "gcc/tree-ssa-coalesce.c", "status": "modified", "additions": 4, "deletions": 103, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a8aa2e11b29c598ec24be8be0d87ca2ddd0f932/gcc%2Ftree-ssa-coalesce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a8aa2e11b29c598ec24be8be0d87ca2ddd0f932/gcc%2Ftree-ssa-coalesce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-coalesce.c?ref=6a8aa2e11b29c598ec24be8be0d87ca2ddd0f932", "patch": "@@ -1579,22 +1579,9 @@ gimple_can_coalesce_p (tree name1, tree name2)\n \n   /* If the types are not the same, see whether they are compatible.  This\n      (for example) allows coalescing when the types are fundamentally the\n-     same, but just have different names.\n-\n-     In the non-optimized case, we must first test TYPE_CANONICAL because\n-     we use it to compute the partition_to_base_index of the map.  */\n-  if (flag_tree_coalesce_vars)\n-    {\n-      if (types_compatible_p (t1, t2))\n-\tgoto check_modes;\n-    }\n-  else\n-    {\n-      if (TYPE_CANONICAL (t1)\n-\t  && TYPE_CANONICAL (t1) == TYPE_CANONICAL (t2)\n-\t  && types_compatible_p (t1, t2))\n-\tgoto check_modes;\n-    }\n+     same, but just have different names.  */\n+  if (types_compatible_p (t1, t2))\n+    goto check_modes;\n \n   return false;\n }\n@@ -1720,89 +1707,6 @@ compute_optimized_partition_bases (var_map map, bitmap used_in_copies,\n   partition_delete (tentative);\n }\n \n-/* Hashtable helpers.  */\n-\n-struct tree_int_map_hasher : nofree_ptr_hash <tree_int_map>\n-{\n-  static inline hashval_t hash (const tree_int_map *);\n-  static inline bool equal (const tree_int_map *, const tree_int_map *);\n-};\n-\n-inline hashval_t\n-tree_int_map_hasher::hash (const tree_int_map *v)\n-{\n-  return tree_map_base_hash (v);\n-}\n-\n-inline bool\n-tree_int_map_hasher::equal (const tree_int_map *v, const tree_int_map *c)\n-{\n-  return tree_int_map_eq (v, c);\n-}\n-\n-/* This routine will initialize the basevar fields of MAP with base\n-   names.  Partitions will share the same base if they have the same\n-   SSA_NAME_VAR, or, being anonymous variables, the same type.  This\n-   must match gimple_can_coalesce_p in the non-optimized case.  */\n-\n-static void\n-compute_samebase_partition_bases (var_map map)\n-{\n-  int x, num_part;\n-  tree var;\n-  struct tree_int_map *m, *mapstorage;\n-\n-  num_part = num_var_partitions (map);\n-  hash_table<tree_int_map_hasher> tree_to_index (num_part);\n-  /* We can have at most num_part entries in the hash tables, so it's\n-     enough to allocate so many map elements once, saving some malloc\n-     calls.  */\n-  mapstorage = m = XNEWVEC (struct tree_int_map, num_part);\n-\n-  /* If a base table already exists, clear it, otherwise create it.  */\n-  free (map->partition_to_base_index);\n-  map->partition_to_base_index = (int *) xmalloc (sizeof (int) * num_part);\n-\n-  /* Build the base variable list, and point partitions at their bases.  */\n-  for (x = 0; x < num_part; x++)\n-    {\n-      struct tree_int_map **slot;\n-      unsigned baseindex;\n-      var = partition_to_var (map, x);\n-      if (SSA_NAME_VAR (var)\n-\t  && (!VAR_P (SSA_NAME_VAR (var))\n-\t      || !DECL_IGNORED_P (SSA_NAME_VAR (var))))\n-\tm->base.from = SSA_NAME_VAR (var);\n-      else\n-\t/* This restricts what anonymous SSA names we can coalesce\n-\t   as it restricts the sets we compute conflicts for.\n-\t   Using TREE_TYPE to generate sets is the easiest as\n-\t   type equivalency also holds for SSA names with the same\n-\t   underlying decl.\n-\n-\t   Check gimple_can_coalesce_p when changing this code.  */\n-\tm->base.from = (TYPE_CANONICAL (TREE_TYPE (var))\n-\t\t\t? TYPE_CANONICAL (TREE_TYPE (var))\n-\t\t\t: TREE_TYPE (var));\n-      /* If base variable hasn't been seen, set it up.  */\n-      slot = tree_to_index.find_slot (m, INSERT);\n-      if (!*slot)\n-\t{\n-\t  baseindex = m - mapstorage;\n-\t  m->to = baseindex;\n-\t  *slot = m;\n-\t  m++;\n-\t}\n-      else\n-\tbaseindex = (*slot)->to;\n-      map->partition_to_base_index[x] = baseindex;\n-    }\n-\n-  map->num_basevars = m - mapstorage;\n-\n-  free (mapstorage);\n-}\n-\n /* Given an initial var_map MAP, coalesce variables and return a partition map\n    with the resulting coalesce.  Note that this function is called in either\n    live range computation context or out-of-ssa context, indicated by MAP.  */\n@@ -1824,10 +1728,7 @@ coalesce_ssa_name (var_map map)\n \n   partition_view_bitmap (map, used_in_copies);\n \n-  if (flag_tree_coalesce_vars)\n-    compute_optimized_partition_bases (map, used_in_copies, cl);\n-  else\n-    compute_samebase_partition_bases (map);\n+  compute_optimized_partition_bases (map, used_in_copies, cl);\n \n   if (num_var_partitions (map) < 1)\n     {"}]}