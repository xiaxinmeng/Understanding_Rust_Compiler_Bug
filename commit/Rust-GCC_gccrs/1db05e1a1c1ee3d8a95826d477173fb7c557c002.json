{"sha": "1db05e1a1c1ee3d8a95826d477173fb7c557c002", "node_id": "C_kwDOANBUbNoAKDFkYjA1ZTFhMWMxZWUzZDhhOTU4MjZkNDc3MTczZmI3YzU1N2MwMDI", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-09-27T06:00:40Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-09-27T08:43:11Z"}, "message": "Add an irange setter for wide_ints.\n\nJust the same way as we have real_value setters for franges, we should\nhave a wide_int version for irange.  This matches the irange\nconstructor for wide_ints, and paves the way for the eventual\nconversion of irange to wide ints.\n\ngcc/ChangeLog:\n\n\t* value-range.h (irange::set): New version taking wide_int_ref.", "tree": {"sha": "6557da06fc1db12375c120860b0510b86a5e690a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6557da06fc1db12375c120860b0510b86a5e690a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1db05e1a1c1ee3d8a95826d477173fb7c557c002", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1db05e1a1c1ee3d8a95826d477173fb7c557c002", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1db05e1a1c1ee3d8a95826d477173fb7c557c002", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1db05e1a1c1ee3d8a95826d477173fb7c557c002/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "303976a6076f2839354702fd2caa049fa7cbbdc2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/303976a6076f2839354702fd2caa049fa7cbbdc2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/303976a6076f2839354702fd2caa049fa7cbbdc2"}], "stats": {"total": 9, "additions": 9, "deletions": 0}, "files": [{"sha": "556e31aece1a8ca24cc6635f11ff54164edbddd6", "filename": "gcc/value-range.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1db05e1a1c1ee3d8a95826d477173fb7c557c002/gcc%2Fvalue-range.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1db05e1a1c1ee3d8a95826d477173fb7c557c002/gcc%2Fvalue-range.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-range.h?ref=1db05e1a1c1ee3d8a95826d477173fb7c557c002", "patch": "@@ -117,6 +117,8 @@ class GTY((user)) irange : public vrange\n public:\n   // In-place setters.\n   virtual void set (tree, tree, value_range_kind = VR_RANGE) override;\n+  void set (tree type, const wide_int_ref &, const wide_int_ref &,\n+\t    value_range_kind = VR_RANGE);\n   virtual void set_nonzero (tree type) override;\n   virtual void set_zero (tree type) override;\n   virtual void set_nonnegative (tree type) override;\n@@ -687,6 +689,13 @@ irange::varying_compatible_p () const\n   return true;\n }\n \n+inline void\n+irange::set (tree type, const wide_int_ref &min, const wide_int_ref &max,\n+\t     value_range_kind kind)\n+{\n+  set (wide_int_to_tree (type, min), wide_int_to_tree (type, max), kind);\n+}\n+\n inline bool\n vrange::varying_p () const\n {"}]}