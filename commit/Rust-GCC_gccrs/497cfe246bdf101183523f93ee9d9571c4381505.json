{"sha": "497cfe246bdf101183523f93ee9d9571c4381505", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDk3Y2ZlMjQ2YmRmMTAxMTgzNTIzZjkzZWU5ZDk1NzFjNDM4MTUwNQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2006-05-11T08:29:40Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2006-05-11T08:29:40Z"}, "message": "re PR middle-end/27529 (Does not fold (char *)(size_t)char_ptr or (size_t)(char *)size_t_var)\n\n2006-05-11  Richard Guenther  <rguenther@suse.de>\n\n\tPR middle-end/27529\n\t* fold-const.c (fold_unary): Handle intermediate conversion\n\tto a pointer type like intermediate conversion to an integer\n\ttype in folding of (T1)(T2)var to var.\n\tMatch the code to the comment in the final conversion for\n\t(T1)(T2)var to (T1)var regarding to type precision.  Rather\n\tthan disallow T1 being of pointer type, assert that both T1\n\tand var are of pointer type or not.  Make sure not to fall\n\tover the frontends lazyness wrt array to pointer decay though.\n\n\t* gcc.dg/tree-ssa/foldcast-1.c: New testcase.\n\nFrom-SVN: r113692", "tree": {"sha": "17f244ccd429a0d120041c3e273cdd7bc9688376", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/17f244ccd429a0d120041c3e273cdd7bc9688376"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/497cfe246bdf101183523f93ee9d9571c4381505", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/497cfe246bdf101183523f93ee9d9571c4381505", "html_url": "https://github.com/Rust-GCC/gccrs/commit/497cfe246bdf101183523f93ee9d9571c4381505", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/497cfe246bdf101183523f93ee9d9571c4381505/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "34b95ebe0ea7f9b872986a43722af52f005640ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34b95ebe0ea7f9b872986a43722af52f005640ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34b95ebe0ea7f9b872986a43722af52f005640ba"}], "stats": {"total": 48, "additions": 44, "deletions": 4}, "files": [{"sha": "31f6974ad2405a0b3dfae843980d21471acc916d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/497cfe246bdf101183523f93ee9d9571c4381505/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/497cfe246bdf101183523f93ee9d9571c4381505/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=497cfe246bdf101183523f93ee9d9571c4381505", "patch": "@@ -1,3 +1,15 @@\n+2006-05-11  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/27529\n+\t* fold-const.c (fold_unary): Handle intermediate conversion\n+\tto a pointer type like intermediate conversion to an integer\n+\ttype in folding of (T1)(T2)var to var.\n+\tMatch the code to the comment in the final conversion for\n+\t(T1)(T2)var to (T1)var regarding to type precision.  Rather\n+\tthan disallow T1 being of pointer type, assert that both T1\n+\tand var are of pointer type or not.  Make sure not to fall\n+\tover the frontends lazyness wrt array to pointer decay though.\n+\n 2006-05-10  Richard Earnshaw  <rearnsha@arm.com>\n \n \t* arm.c (arm_struct_value_rtx): Delete."}, {"sha": "ce689291eb6a0972dbe14966ec81254a72a78214", "filename": "gcc/fold-const.c", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/497cfe246bdf101183523f93ee9d9571c4381505/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/497cfe246bdf101183523f93ee9d9571c4381505/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=497cfe246bdf101183523f93ee9d9571c4381505", "patch": "@@ -7323,7 +7323,8 @@ fold_unary (enum tree_code code, tree type, tree op0)\n \t     type via an object of identical or wider precision, neither\n \t     conversion is needed.  */\n \t  if (TYPE_MAIN_VARIANT (inside_type) == TYPE_MAIN_VARIANT (type)\n-\t      && ((inter_int && final_int) || (inter_float && final_float))\n+\t      && (((inter_int || inter_ptr) && final_int)\n+\t\t  || (inter_float && final_float))\n \t      && inter_prec >= final_prec)\n \t    return fold_build1 (code, type, TREE_OPERAND (op0, 0));\n \n@@ -7362,10 +7363,13 @@ fold_unary (enum tree_code code, tree type, tree op0)\n \t     - the initial type is a pointer type and the precisions of the\n \t       intermediate and final types differ, or\n \t     - the final type is a pointer type and the precisions of the\n-\t       initial and intermediate types differ.  */\n+\t       initial and intermediate types differ.\n+\t     - the final type is a pointer type and the initial type not\n+\t     - the initial type is a pointer to an array and the final type\n+\t       not.  */\n \t  if (! inside_float && ! inter_float && ! final_float\n \t      && ! inside_vec && ! inter_vec && ! final_vec\n-\t      && (inter_prec > inside_prec || inter_prec > final_prec)\n+\t      && (inter_prec >= inside_prec || inter_prec >= final_prec)\n \t      && ! (inside_int && inter_int\n \t\t    && inter_unsignedp != inside_unsignedp\n \t\t    && inter_prec < final_prec)\n@@ -7375,7 +7379,10 @@ fold_unary (enum tree_code code, tree type, tree op0)\n \t      && ! (final_ptr && inside_prec != inter_prec)\n \t      && ! (final_prec != GET_MODE_BITSIZE (TYPE_MODE (type))\n \t\t    && TYPE_MODE (type) == TYPE_MODE (inter_type))\n-\t      && ! final_ptr)\n+\t      && final_ptr == inside_ptr\n+\t      && ! (inside_ptr\n+\t\t    && TREE_CODE (TREE_TYPE (inside_type)) == ARRAY_TYPE\n+\t\t    && TREE_CODE (TREE_TYPE (type)) != ARRAY_TYPE))\n \t    return fold_build1 (code, type, TREE_OPERAND (op0, 0));\n \t}\n "}, {"sha": "418c6718b0339cf9612feeba54308557a906b3ea", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/497cfe246bdf101183523f93ee9d9571c4381505/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/497cfe246bdf101183523f93ee9d9571c4381505/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=497cfe246bdf101183523f93ee9d9571c4381505", "patch": "@@ -1,3 +1,8 @@\n+2006-05-11  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/27529\n+\t* gcc.dg/tree-ssa/foldcast-1.c: New testcase.\n+\n 2006-05-10  Janis Johnson  <janis187@us.ibm.com>\n \n \t* lib/target-supports-dg.exp (check-flags): New."}, {"sha": "a0626ea10d934885ead6e77a8ab7683f78d13ec1", "filename": "gcc/testsuite/gcc.dg/tree-ssa/foldcast-1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/497cfe246bdf101183523f93ee9d9571c4381505/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Ffoldcast-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/497cfe246bdf101183523f93ee9d9571c4381505/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Ffoldcast-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Ffoldcast-1.c?ref=497cfe246bdf101183523f93ee9d9571c4381505", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do \"compile\" } */\n+/* { dg-options \"-fdump-tree-original\" } */\n+\n+typedef int ssize_t __attribute__((mode(pointer)));\n+ssize_t foo (ssize_t x)\n+{\n+  return (ssize_t)(char *)x;\n+}\n+\n+char *bar (char *x)\n+{\n+  return (char *)(ssize_t)x;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"return x;\" 2 \"original\" } } */\n+/* { dg-final { cleanup-tree-dump \"original\" } } */"}]}