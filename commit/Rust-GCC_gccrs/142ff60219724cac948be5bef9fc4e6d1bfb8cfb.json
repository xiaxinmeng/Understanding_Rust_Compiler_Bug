{"sha": "142ff60219724cac948be5bef9fc4e6d1bfb8cfb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTQyZmY2MDIxOTcyNGNhYzk0OGJlNWJlZjlmYzRlNmQxYmZiOGNmYg==", "commit": {"author": {"name": "Bin Cheng", "email": "bin.cheng@arm.com", "date": "2017-08-24T15:38:39Z"}, "committer": {"name": "Bin Cheng", "email": "amker@gcc.gnu.org", "date": "2017-08-24T15:38:39Z"}, "message": "re PR tree-optimization/81913 (wrong code at -O1)\n\n\tPR tree-optimization/81913\n\t* tree-ssa-loop-niter.c (number_of_iterations_cond): Skip niter\n\tanalysis when either IVs in condition can wrap.\n\n\tgcc/testsuite\n\t* gcc.c-torture/execute/pr81913.c: New test.\n\t* gcc.dg/tree-ssa/loop-niter-1.c: New test.\n\t* gcc.dg/tree-ssa/loop-niter-2.c: New test.\n\nFrom-SVN: r251337", "tree": {"sha": "c4b28372b10080cb931f0905dce292ad29c904fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c4b28372b10080cb931f0905dce292ad29c904fd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/142ff60219724cac948be5bef9fc4e6d1bfb8cfb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/142ff60219724cac948be5bef9fc4e6d1bfb8cfb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/142ff60219724cac948be5bef9fc4e6d1bfb8cfb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/142ff60219724cac948be5bef9fc4e6d1bfb8cfb/comments", "author": null, "committer": null, "parents": [{"sha": "14e18d7100de30f3c2991401bbb414d2e3ffb716", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14e18d7100de30f3c2991401bbb414d2e3ffb716", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14e18d7100de30f3c2991401bbb414d2e3ffb716"}], "stats": {"total": 108, "additions": 106, "deletions": 2}, "files": [{"sha": "ac7cf9243c7688736b0edb38e86b945eed8dc0b5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/142ff60219724cac948be5bef9fc4e6d1bfb8cfb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/142ff60219724cac948be5bef9fc4e6d1bfb8cfb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=142ff60219724cac948be5bef9fc4e6d1bfb8cfb", "patch": "@@ -1,3 +1,9 @@\n+2017-08-24  Bin Cheng  <bin.cheng@arm.com>\n+\n+\tPR tree-optimization/81913\n+\t* tree-ssa-loop-niter.c (number_of_iterations_cond): Skip niter\n+\tanalysis when either IVs in condition can wrap.\n+\n 2017-08-24  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* dwarf2out.c (MAX_ARTIFICIAL_LABEL_BYTES): Increase to 40."}, {"sha": "1720a89b2e3e9a6ba7adb15ca1d7095f2ffad0f8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/142ff60219724cac948be5bef9fc4e6d1bfb8cfb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/142ff60219724cac948be5bef9fc4e6d1bfb8cfb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=142ff60219724cac948be5bef9fc4e6d1bfb8cfb", "patch": "@@ -1,3 +1,10 @@\n+2017-08-24  Bin Cheng  <bin.cheng@arm.com>\n+\n+\tPR tree-optimization/81913\n+\t* gcc.c-torture/execute/pr81913.c: New test.\n+\t* gcc.dg/tree-ssa/loop-niter-1.c: New test.\n+\t* gcc.dg/tree-ssa/loop-niter-2.c: New test.\n+\n 2017-08-23  Richard Biener  <rguenther@suse.de>\n \n         PR target/81921"}, {"sha": "11eec4e1eafac5142df71be6cffb0d4e1b0218e9", "filename": "gcc/testsuite/gcc.c-torture/execute/pr81913.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/142ff60219724cac948be5bef9fc4e6d1bfb8cfb/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr81913.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/142ff60219724cac948be5bef9fc4e6d1bfb8cfb/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr81913.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr81913.c?ref=142ff60219724cac948be5bef9fc4e6d1bfb8cfb", "patch": "@@ -0,0 +1,27 @@\n+/* PR tree-optimization/81913 */\n+\n+typedef unsigned char u8;\n+typedef unsigned int u32;\n+\n+static u32\n+b (u8 d, u32 e, u32 g)\n+{\n+  do\n+    {\n+      e += g + 1;\n+      d--;\n+    }\n+  while (d >= (u8) e);\n+\n+  return e;\n+}\n+\n+int\n+main (void)\n+{\n+  u32 x = b (1, -0x378704, ~0xba64fc);\n+  if (x != 0xd93190d0)\n+    __builtin_abort ();\n+  return 0;\n+}\n+"}, {"sha": "16c76fe81bc027d3bfce5106ea45db82735ed588", "filename": "gcc/testsuite/gcc.dg/tree-ssa/loop-niter-1.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/142ff60219724cac948be5bef9fc4e6d1bfb8cfb/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-niter-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/142ff60219724cac948be5bef9fc4e6d1bfb8cfb/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-niter-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-niter-1.c?ref=142ff60219724cac948be5bef9fc4e6d1bfb8cfb", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fdump-tree-sccp-details\" } */\n+\n+typedef unsigned char u8;\n+typedef unsigned int u32;\n+\n+static u32\n+b (u8 d, u32 e, u32 g)\n+{\n+  do\n+    {\n+      e += g + 1;\n+      d--;\n+    }\n+  while (d >= (u8) e);\n+\n+  return e;\n+}\n+\n+int\n+main (void)\n+{\n+  u32 x = b (200, -0x378704, ~0xba64fc);\n+  if (x != 0xe1ee4ca0)\n+    __builtin_abort ();\n+\n+  return 0;\n+}\n+\n+/* Niter analyzer should be able to compute niters for the loop.  */\n+/* { dg-final { scan-tree-dump \"Replacing uses of: .* with: 3790490784\" \"sccp\" { xfail *-*-* } } } */"}, {"sha": "2377e6caa7286442eddc21cc836e13d42603dd9e", "filename": "gcc/testsuite/gcc.dg/tree-ssa/loop-niter-2.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/142ff60219724cac948be5bef9fc4e6d1bfb8cfb/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-niter-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/142ff60219724cac948be5bef9fc4e6d1bfb8cfb/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-niter-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-niter-2.c?ref=142ff60219724cac948be5bef9fc4e6d1bfb8cfb", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fdump-tree-sccp-details\" } */\n+\n+typedef unsigned char u8;\n+typedef unsigned int u32;\n+\n+static u32\n+b (u8 d, u32 e, u32 g)\n+{\n+  do\n+    {\n+      e += g + 1;\n+      d--;\n+    }\n+  while (d >= (u8) e);\n+\n+  return e;\n+}\n+\n+int\n+main (void)\n+{\n+  u32 x = b (1, -0x378704, ~0xba64fc);\n+  if (x != 0xd93190d0)\n+    __builtin_abort ();\n+  return 0;\n+}\n+\n+/* Niter analyzer should be able to compute niters for the loop even though\n+   IV:d wraps.  */\n+/* { dg-final { scan-tree-dump \"Replacing uses of: .* with: 3643904208\" \"sccp\" { xfail *-*-* } } } */"}, {"sha": "27244eb27c1a75dfb5686ac88cdb2bf263afdabe", "filename": "gcc/tree-ssa-loop-niter.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/142ff60219724cac948be5bef9fc4e6d1bfb8cfb/gcc%2Ftree-ssa-loop-niter.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/142ff60219724cac948be5bef9fc4e6d1bfb8cfb/gcc%2Ftree-ssa-loop-niter.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-niter.c?ref=142ff60219724cac948be5bef9fc4e6d1bfb8cfb", "patch": "@@ -1728,7 +1728,7 @@ number_of_iterations_cond (struct loop *loop,\n      provided that either below condition is satisfied:\n \n        a) the test is NE_EXPR;\n-       b) iv0.step - iv1.step is positive integer.\n+       b) iv0.step - iv1.step is integer and iv0/iv1 don't overflow.\n \n      This rarely occurs in practice, but it is simple enough to manage.  */\n   if (!integer_zerop (iv0->step) && !integer_zerop (iv1->step))\n@@ -1739,7 +1739,9 @@ number_of_iterations_cond (struct loop *loop,\n \n       /* No need to check sign of the new step since below code takes care\n \t of this well.  */\n-      if (code != NE_EXPR && TREE_CODE (step) != INTEGER_CST)\n+      if (code != NE_EXPR\n+\t  && (TREE_CODE (step) != INTEGER_CST\n+\t      || !iv0->no_overflow || !iv1->no_overflow))\n \treturn false;\n \n       iv0->step = step;"}]}