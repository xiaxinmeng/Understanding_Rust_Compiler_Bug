{"sha": "fdad69c13646f9797333ccdefd0bf14106595631", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmRhZDY5YzEzNjQ2Zjk3OTczMzNjY2RlZmQwYmYxNDEwNjU5NTYzMQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2012-01-30T13:26:45Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-01-30T13:26:45Z"}, "message": "re PR tree-optimization/51528 (SRA should not create BOOLEAN_TYPE replacements)\n\n2012-01-30  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/51528\n\t* tree-sra.c (sra_modify_assign): Re-factor in preparation\n\tfor PR51528 fix.\n\nFrom-SVN: r183720", "tree": {"sha": "9dd2be79d163f78008a83d10df702033abfee7ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9dd2be79d163f78008a83d10df702033abfee7ac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fdad69c13646f9797333ccdefd0bf14106595631", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdad69c13646f9797333ccdefd0bf14106595631", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fdad69c13646f9797333ccdefd0bf14106595631", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdad69c13646f9797333ccdefd0bf14106595631/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8203ac49833d3e27ee2af03bc1d10cb66ae54745", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8203ac49833d3e27ee2af03bc1d10cb66ae54745", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8203ac49833d3e27ee2af03bc1d10cb66ae54745"}], "stats": {"total": 93, "additions": 48, "deletions": 45}, "files": [{"sha": "1d0b459a4ec1c03df702a05e23e8a500c8a61ebd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdad69c13646f9797333ccdefd0bf14106595631/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdad69c13646f9797333ccdefd0bf14106595631/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fdad69c13646f9797333ccdefd0bf14106595631", "patch": "@@ -1,3 +1,9 @@\n+2012-01-30  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/51528\n+\t* tree-sra.c (sra_modify_assign): Re-factor in preparation\n+\tfor PR51528 fix.\n+\n 2012-01-30  Paolo Bonzini  <bonzini@gnu.org>\n \n \t* df-problems.c (df_kill_notes): Check that the use refers"}, {"sha": "ef26894343403064255c7c816a5cd3bc13b5fcc4", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 42, "deletions": 45, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdad69c13646f9797333ccdefd0bf14106595631/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdad69c13646f9797333ccdefd0bf14106595631/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=fdad69c13646f9797333ccdefd0bf14106595631", "patch": "@@ -2991,6 +2991,16 @@ sra_modify_assign (gimple *stmt, gimple_stmt_iterator *gsi)\n \tforce_gimple_rhs = true;\n       sra_stats.exprs++;\n     }\n+  else if (racc\n+\t   && !access_has_children_p (racc)\n+\t   && !racc->grp_to_be_replaced\n+\t   && !racc->grp_unscalarized_data\n+\t   && TREE_CODE (lhs) == SSA_NAME)\n+    {\n+      rhs = get_repl_default_def_ssa_name (racc);\n+      modify_this_stmt = true;\n+      sra_stats.exprs++;\n+    }\n \n   if (modify_this_stmt)\n     {\n@@ -3067,6 +3077,21 @@ sra_modify_assign (gimple *stmt, gimple_stmt_iterator *gsi)\n \tgenerate_subtree_copies (lacc->first_child, lacc->base, 0, 0, 0,\n \t\t\t\t gsi, true, true, loc);\n       sra_stats.separate_lhs_rhs_handling++;\n+\n+      /* This gimplification must be done after generate_subtree_copies,\n+\t lest we insert the subtree copies in the middle of the gimplified\n+\t sequence.  */\n+      if (force_gimple_rhs)\n+\trhs = force_gimple_operand_gsi (&orig_gsi, rhs, true, NULL_TREE,\n+\t\t\t\t\ttrue, GSI_SAME_STMT);\n+      if (gimple_assign_rhs1 (*stmt) != rhs)\n+\t{\n+\t  modify_this_stmt = true;\n+\t  gimple_assign_set_rhs_from_tree (&orig_gsi, rhs);\n+\t  gcc_assert (*stmt == gsi_stmt (orig_gsi));\n+\t}\n+\n+      return modify_this_stmt ? SRA_AM_MODIFIED : SRA_AM_NONE;\n     }\n   else\n     {\n@@ -3093,61 +3118,33 @@ sra_modify_assign (gimple *stmt, gimple_stmt_iterator *gsi)\n \t}\n       else\n \t{\n-\t  if (racc)\n+\t  if (access_has_children_p (racc)\n+\t      && !racc->grp_unscalarized_data)\n \t    {\n-\t      if (!racc->grp_to_be_replaced && !racc->grp_unscalarized_data)\n+\t      if (dump_file)\n \t\t{\n-\t\t  if (dump_file)\n-\t\t    {\n-\t\t      fprintf (dump_file, \"Removing load: \");\n-\t\t      print_gimple_stmt (dump_file, *stmt, 0, 0);\n-\t\t    }\n-\n-\t\t  if (TREE_CODE (lhs) == SSA_NAME)\n-\t\t    {\n-\t\t      rhs = get_repl_default_def_ssa_name (racc);\n-\t\t      if (!useless_type_conversion_p (TREE_TYPE (lhs),\n-\t\t\t\t\t\t      TREE_TYPE (rhs)))\n-\t\t\trhs = fold_build1_loc (loc, VIEW_CONVERT_EXPR,\n-\t\t\t\t\t       TREE_TYPE (lhs), rhs);\n-\t\t    }\n-\t\t  else\n-\t\t    {\n-\t\t      if (racc->first_child)\n-\t\t\tgenerate_subtree_copies (racc->first_child, lhs,\n-\t\t\t\t\t\t racc->offset, 0, 0, gsi,\n-\t\t\t\t\t\t false, false, loc);\n-\n-\t\t      gcc_assert (*stmt == gsi_stmt (*gsi));\n-\t\t      unlink_stmt_vdef (*stmt);\n-\t\t      gsi_remove (gsi, true);\n-\t\t      sra_stats.deleted++;\n-\t\t      return SRA_AM_REMOVED;\n-\t\t    }\n+\t\t  fprintf (dump_file, \"Removing load: \");\n+\t\t  print_gimple_stmt (dump_file, *stmt, 0, 0);\n \t\t}\n-\t      else if (racc->first_child)\n-\t\tgenerate_subtree_copies (racc->first_child, lhs, racc->offset,\n-\t\t\t\t\t 0, 0, gsi, false, true, loc);\n+\t      generate_subtree_copies (racc->first_child, lhs,\n+\t\t\t\t       racc->offset, 0, 0, gsi,\n+\t\t\t\t       false, false, loc);\n+\t      gcc_assert (*stmt == gsi_stmt (*gsi));\n+\t      unlink_stmt_vdef (*stmt);\n+\t      gsi_remove (gsi, true);\n+\t      sra_stats.deleted++;\n+\t      return SRA_AM_REMOVED;\n \t    }\n+\t  if (access_has_children_p (racc))\n+\t    generate_subtree_copies (racc->first_child, lhs, racc->offset,\n+\t\t\t\t     0, 0, gsi, false, true, loc);\n \t  if (access_has_children_p (lacc))\n \t    generate_subtree_copies (lacc->first_child, rhs, lacc->offset,\n \t\t\t\t     0, 0, gsi, true, true, loc);\n \t}\n-    }\n \n-  /* This gimplification must be done after generate_subtree_copies, lest we\n-     insert the subtree copies in the middle of the gimplified sequence.  */\n-  if (force_gimple_rhs)\n-    rhs = force_gimple_operand_gsi (&orig_gsi, rhs, true, NULL_TREE,\n-\t\t\t\t    true, GSI_SAME_STMT);\n-  if (gimple_assign_rhs1 (*stmt) != rhs)\n-    {\n-      modify_this_stmt = true;\n-      gimple_assign_set_rhs_from_tree (&orig_gsi, rhs);\n-      gcc_assert (*stmt == gsi_stmt (orig_gsi));\n+      return SRA_AM_NONE;\n     }\n-\n-  return modify_this_stmt ? SRA_AM_MODIFIED : SRA_AM_NONE;\n }\n \n /* Traverse the function body and all modifications as decided in"}]}