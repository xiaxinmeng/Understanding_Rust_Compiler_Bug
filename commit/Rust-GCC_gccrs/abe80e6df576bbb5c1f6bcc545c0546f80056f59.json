{"sha": "abe80e6df576bbb5c1f6bcc545c0546f80056f59", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWJlODBlNmRmNTc2YmJiNWMxZjZiY2M1NDVjMDU0NmY4MDA1NmY1OQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-01-28T20:14:09Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-01-28T20:14:09Z"}, "message": "(c_expand_return): Refine check for returning pointer to local\nvariable to allow subtracting a pointer from it.\n\nFrom-SVN: r8837", "tree": {"sha": "d8ec2b6ed43d2e35a15b9f77a2f2375b8f8ef4ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d8ec2b6ed43d2e35a15b9f77a2f2375b8f8ef4ee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/abe80e6df576bbb5c1f6bcc545c0546f80056f59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abe80e6df576bbb5c1f6bcc545c0546f80056f59", "html_url": "https://github.com/Rust-GCC/gccrs/commit/abe80e6df576bbb5c1f6bcc545c0546f80056f59", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abe80e6df576bbb5c1f6bcc545c0546f80056f59/comments", "author": null, "committer": null, "parents": [{"sha": "da6f15cdef9251ed945e2435e12aa3713cf0d808", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da6f15cdef9251ed945e2435e12aa3713cf0d808", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da6f15cdef9251ed945e2435e12aa3713cf0d808"}], "stats": {"total": 59, "additions": 42, "deletions": 17}, "files": [{"sha": "ceabea89835dba2b32e2da691f2d963cd2f6d97b", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 42, "deletions": 17, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abe80e6df576bbb5c1f6bcc545c0546f80056f59/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abe80e6df576bbb5c1f6bcc545c0546f80056f59/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=abe80e6df576bbb5c1f6bcc545c0546f80056f59", "patch": "@@ -1,5 +1,5 @@\n /* Build expressions with type checking for C compiler.\n-   Copyright (C) 1987, 88, 91, 92, 93, 1994 Free Software Foundation, Inc.\n+   Copyright (C) 1987, 88, 91, 92, 93, 94, 1995 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -6348,25 +6348,50 @@ c_expand_return (retval)\n \n       /* Strip any conversions, additions, and subtractions, and see if\n \t we are returning the address of a local variable.  Warn if so.  */\n-      while (TREE_CODE (inner) == NOP_EXPR\n-\t     || TREE_CODE (inner) == NON_LVALUE_EXPR\n-\t     || TREE_CODE (inner) == CONVERT_EXPR\n-\t     || TREE_CODE (inner) == PLUS_EXPR\n-\t     || TREE_CODE (inner) == MINUS_EXPR)\n-\tinner = TREE_OPERAND (inner, 0);\n-\n-      if (TREE_CODE (inner) == ADDR_EXPR)\n+      while (1)\n \t{\n-\t  inner = TREE_OPERAND (inner, 0);\n+\t  switch (TREE_CODE (inner))\n+\t    {\n+\t    case NOP_EXPR:   case NON_LVALUE_EXPR:  case CONVERT_EXPR:\n+\t    case PLUS_EXPR:\n+\t      inner = TREE_OPERAND (inner, 0);\n+\t      continue;\n+\n+\t    case MINUS_EXPR:\n+\t      /* If the second operand of the MINUS_EXPR has a pointer\n+\t\t type (or is converted from it), this may be valid, so\n+\t\t don't give a warning.  */\n+\t      {\n+\t\ttree op1 = TREE_OPERAND (inner, 1);\n+\n+\t\twhile (! POINTER_TYPE_P (TREE_TYPE (op1))\n+\t\t       && (TREE_CODE (op1) == NOP_EXPR\n+\t\t\t   || TREE_CODE (op1) == NON_LVALUE_EXPR\n+\t\t\t   || TREE_CODE (op1) == CONVERT_EXPR))\n+\t\t  op1 = TREE_OPERAND (op1, 0);\n+\n+\t\tif (POINTER_TYPE_P (TREE_TYPE (op1)))\n+\t\t  break;\n \n-\t  while (TREE_CODE_CLASS (TREE_CODE (inner)) == 'r')\n-\t    inner = TREE_OPERAND (inner, 0);\n+\t\tinner = TREE_OPERAND (inner, 0);\n+\t\tcontinue;\n+\t      }\n+\t      \n+\t    case ADDR_EXPR:\n+\t      inner = TREE_OPERAND (inner, 0);\n \n-\t  if (TREE_CODE (inner) == VAR_DECL\n-\t      && ! DECL_EXTERNAL (inner)\n-\t      && ! TREE_STATIC (inner)\n-\t      && DECL_CONTEXT (inner) == current_function_decl)\n-\t    warning (\"function returns address of local variable\");\n+\t      while (TREE_CODE_CLASS (TREE_CODE (inner)) == 'r')\n+\t\tinner = TREE_OPERAND (inner, 0);\n+\n+\t      if (TREE_CODE (inner) == VAR_DECL\n+\t\t  && ! DECL_EXTERNAL (inner)\n+\t\t  && ! TREE_STATIC (inner)\n+\t\t  && DECL_CONTEXT (inner) == current_function_decl)\n+\t\twarning (\"function returns address of local variable\");\n+\t      break;\n+\t    }\n+\n+\t  break;\n \t}\n \n       t = build (MODIFY_EXPR, TREE_TYPE (res), res, t);"}]}