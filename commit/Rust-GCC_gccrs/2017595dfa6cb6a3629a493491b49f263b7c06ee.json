{"sha": "2017595dfa6cb6a3629a493491b49f263b7c06ee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjAxNzU5NWRmYTZjYjZhMzYyOWE0OTM0OTFiNDlmMjYzYjdjMDZlZQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2018-12-17T22:43:31Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2018-12-17T22:43:31Z"}, "message": "PR libstdc++/71044 fix off-by-one errors introduced recently\n\nThe recent changes to append/concat directly from strings (without\nconstructing paths) introduced regressions where one of the components\ncould be omitted from the iteration sequence in the result.\n\n\tPR libstdc++/71044\n\t* src/filesystem/std-path.cc (path::_M_append): Fix off-by-one error\n\tthat caused a component to be lost from the iteration sequence.\n\t(path::_M_concat): Likewise.\n\t* testsuite/27_io/filesystem/path/append/source.cc: Test appending\n\tlong strings.\n\t* testsuite/27_io/filesystem/path/concat/strings.cc: Test\n\tconcatenating long strings.\n\t* testsuite/27_io/filesystem/path/construct/string_view.cc: Test\n\tconstruction from long string.\n\nFrom-SVN: r267222", "tree": {"sha": "bf98a4da1248df78980803fb1ae136e3eba5ba14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bf98a4da1248df78980803fb1ae136e3eba5ba14"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2017595dfa6cb6a3629a493491b49f263b7c06ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2017595dfa6cb6a3629a493491b49f263b7c06ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2017595dfa6cb6a3629a493491b49f263b7c06ee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2017595dfa6cb6a3629a493491b49f263b7c06ee/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "00fd062886928ee3617a171f31c1e4e07f65f38f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00fd062886928ee3617a171f31c1e4e07f65f38f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00fd062886928ee3617a171f31c1e4e07f65f38f"}], "stats": {"total": 100, "additions": 93, "deletions": 7}, "files": [{"sha": "d9dc973a440628e38441b5cf84a993165a8efe1f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2017595dfa6cb6a3629a493491b49f263b7c06ee/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2017595dfa6cb6a3629a493491b49f263b7c06ee/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=2017595dfa6cb6a3629a493491b49f263b7c06ee", "patch": "@@ -1,3 +1,16 @@\n+2018-12-17  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/71044\n+\t* src/filesystem/std-path.cc (path::_M_append): Fix off-by-one error\n+\tthat caused a component to be lost from the iteration sequence.\n+\t(path::_M_concat): Likewise.\n+\t* testsuite/27_io/filesystem/path/append/source.cc: Test appending\n+\tlong strings.\n+\t* testsuite/27_io/filesystem/path/concat/strings.cc: Test\n+\tconcatenating long strings.\n+\t* testsuite/27_io/filesystem/path/construct/string_view.cc: Test\n+\tconstruction from long string.\n+\n 2018-12-13  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* src/filesystem/std-path.cc (SLASHSLASH_IS_ROOT_NAME): New macro to"}, {"sha": "b5ddbdad149a22297ffe6446bb42989a2c0d7758", "filename": "libstdc++-v3/src/filesystem/std-path.cc", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2017595dfa6cb6a3629a493491b49f263b7c06ee/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fstd-path.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2017595dfa6cb6a3629a493491b49f263b7c06ee/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fstd-path.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fstd-path.cc?ref=2017595dfa6cb6a3629a493491b49f263b7c06ee", "patch": "@@ -781,10 +781,11 @@ path::_M_append(basic_string_view<value_type> s)\n \t      ::new(output++) _Cmpt(c.str, c.type, parser.offset(c));\n \t      ++_M_cmpts._M_impl->_M_size;\n \t    }\n-\t  for (auto c = parser.next(); c.valid(); c = parser.next())\n+\t  while (cmpt.valid())\n \t    {\n-\t      ::new(output++) _Cmpt(c.str, c.type, parser.offset(c));\n+\t      ::new(output++) _Cmpt(cmpt.str, cmpt.type, parser.offset(cmpt));\n \t      ++_M_cmpts._M_impl->_M_size;\n+\t      cmpt = parser.next();\n \t    }\n \n \t  if (s.back() == '/')\n@@ -1139,7 +1140,7 @@ path::_M_concat(basic_string_view<value_type> s)\n \t    }\n #endif\n \t}\n-      else if (orig_filenamelen == 0)\n+      else if (orig_filenamelen == 0 && extra.empty())\n \t{\n \t  // Replace empty filename at end of original path.\n \t  std::prev(output)->_M_pathname = it->str;"}, {"sha": "21ae6be3d977a3823609031a9c88f77cfd3f9f8a", "filename": "libstdc++-v3/testsuite/27_io/filesystem/path/append/source.cc", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2017595dfa6cb6a3629a493491b49f263b7c06ee/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fappend%2Fsource.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2017595dfa6cb6a3629a493491b49f263b7c06ee/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fappend%2Fsource.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fappend%2Fsource.cc?ref=2017595dfa6cb6a3629a493491b49f263b7c06ee", "patch": "@@ -137,6 +137,22 @@ test05()\n   s = second->native();\n   p3 /= s;\n   VERIFY( p3.string() == \"0/123456789/a/123456789\" );\n+  }\n+\n+void\n+test06()\n+{\n+  const std::string s0 = \"a/b/c\";\n+  path p = s0;\n+  std::string s;\n+  for (int i = 0; i < 10; ++i)\n+    s += \"0/1/2/3/4/5/6/7/8/9/\";\n+  // append a long string with many components\n+  test(p, s.c_str());\n+\n+  // Same again but with a trailing slash on the left operand:\n+  path p2 = s0 + '/';\n+  test(p2, s.c_str());\n }\n \n int\n@@ -147,4 +163,5 @@ main()\n   test03();\n   test04();\n   test05();\n+  test06();\n }"}, {"sha": "316f7c3d7bd8df2348729c6ffa79e427f330360e", "filename": "libstdc++-v3/testsuite/27_io/filesystem/path/concat/strings.cc", "status": "modified", "additions": 35, "deletions": 4, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2017595dfa6cb6a3629a493491b49f263b7c06ee/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fconcat%2Fstrings.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2017595dfa6cb6a3629a493491b49f263b7c06ee/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fconcat%2Fstrings.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fconcat%2Fstrings.cc?ref=2017595dfa6cb6a3629a493491b49f263b7c06ee", "patch": "@@ -24,8 +24,10 @@\n #include <filesystem>\n #include <testsuite_hooks.h>\n #include <testsuite_iterators.h>\n+#include <testsuite_fs.h>\n \n using std::filesystem::path;\n+using __gnu_test::compare_paths;\n \n void\n test01()\n@@ -60,33 +62,62 @@ test01()\n void\n test02()\n {\n-  std::basic_string_view<path::value_type> s;\n+  std::basic_string_view<path::value_type> s, expected;\n \n   path p = \"0/1/2/3/4/5/6\";\n   // The string_view aliases the path's internal string:\n   s = p.native();\n   // Append that string_view, which must work correctly even though the\n   // internal string will be reallocated during the operation:\n   p += s;\n-  VERIFY( p.string() == \"0/1/2/3/4/5/60/1/2/3/4/5/6\" );\n+  compare_paths(p, \"0/1/2/3/4/5/60/1/2/3/4/5/6\");\n \n   // Same again with a trailing slash:\n   path p2 = \"0/1/2/3/4/5/\";\n   s = p2.native();\n   p2 += s;\n-  VERIFY( p2.string() == \"0/1/2/3/4/5/0/1/2/3/4/5/\" );\n+  compare_paths(p2, \"0/1/2/3/4/5/0/1/2/3/4/5/\");\n \n   // And aliasing one of the components of the path:\n   path p3 = \"0/123456789\";\n   path::iterator second = std::next(p3.begin());\n   s = second->native();\n   p3 += s;\n-  VERIFY( p3.string() == \"0/123456789123456789\" );\n+  compare_paths(p3, \"0/123456789123456789\" );\n }\n \n+void\n+test03()\n+{\n+  const std::string s0 = \"a/b/c\";\n+  path p = s0;\n+  std::string s;\n+  for (int i = 0; i < 10; ++i)\n+    s += \"0/1/2/3/4/5/6/7/8/9/\";\n+  // concat a long string with many components:\n+  p += s;\n+  compare_paths(p, path(s0+s));\n+\n+  // Same again but with a trailing slash on the left operand:\n+  path p2 = s0 + '/';\n+  p2 += s;\n+  compare_paths(p2, path(s0+'/'+s));\n+\n+  // And again but with a leading slash on the right operand:\n+  path p3 = s0;\n+  s.insert(0, 1, '/');\n+  p3 += s;\n+  compare_paths(p2, path(s0+s));\n+\n+  // And again but with a slash on both operands:\n+  path p4 = s0 + '/';\n+  p4 += s;\n+  compare_paths(p4, path(s0+'/'+s));\n+}\n int\n main()\n {\n   test01();\n   test02();\n+  test03();\n }"}, {"sha": "a6130d389bf461753ffd7e98ff202cffada7b82c", "filename": "libstdc++-v3/testsuite/27_io/filesystem/path/construct/string_view.cc", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2017595dfa6cb6a3629a493491b49f263b7c06ee/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fconstruct%2Fstring_view.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2017595dfa6cb6a3629a493491b49f263b7c06ee/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fconstruct%2Fstring_view.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fconstruct%2Fstring_view.cc?ref=2017595dfa6cb6a3629a493491b49f263b7c06ee", "patch": "@@ -25,6 +25,7 @@\n #include <string_view>\n #include <string>\n #include <testsuite_fs.h>\n+#include <testsuite_hooks.h>\n \n using std::filesystem::path;\n using __gnu_test::compare_paths;\n@@ -49,8 +50,31 @@ test01()\n   }\n }\n \n+void\n+test02()\n+{\n+  std::string s;\n+  for (int i = 0; i < 10; ++i)\n+    s += \"0/1/2/3/4/5/6/7/8/9/\";\n+  // Construct a path with a large number of components:\n+  path p = s;\n+  auto iter = p.begin();\n+  for (int i = 0; i < 100; ++i)\n+  {\n+    char c = '0' + i % 10;\n+    std::string_view sv(&c, 1);\n+    VERIFY( iter != p.end() );\n+    compare_paths( *iter, sv );\n+    ++iter;\n+  }\n+  VERIFY( iter != p.end() );\n+  VERIFY( iter->native().empty() );\n+  VERIFY( ++iter == p.end() );\n+}\n+\n int\n main()\n {\n   test01();\n+  test02();\n }"}]}