{"sha": "2228d450a9eb92ee5fea87df6ffe226130d4aa0c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjIyOGQ0NTBhOWViOTJlZTVmZWE4N2RmNmZmZTIyNjEzMGQ0YWEwYw==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2000-05-31T19:27:12Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2000-05-31T19:27:12Z"}, "message": "invoke.texi: Remove documentation for -fguiding-decls.\n\n\t* invoke.texi: Remove documentation for -fguiding-decls.\n\n\tRemove guiding declaration support.\n\t* cp/cp-tree.h (flag_dump_translation_unit): Make it const.\n\t(flag_guiding_decls): Remove.\n\t* call.c (build_user_type_conversion_1): Remove support for\n\tguiding decls.\n\t(build_new_function_call): Likewise.\n\t(build_new_op): Likewise.\n\t(build_new_method_call): Likewise.\n\t* decl.c (start_function): Likewise.\n\t* friend.c (is_friend): Likewise.\n\t(do_friend): Likewise.\n\t* decl2.c ((flag_dump_translation_unit): Make it const.\n\t(flag_guiding_decls): Remove.\n\t(unsupported_options): New variable\n\t(compare_options): New function.\n\t(lang_decode_option): Use them.\n\nFrom-SVN: r34306", "tree": {"sha": "b899b234e97bbbd63e088407c775cb6a7ee8c844", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b899b234e97bbbd63e088407c775cb6a7ee8c844"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2228d450a9eb92ee5fea87df6ffe226130d4aa0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2228d450a9eb92ee5fea87df6ffe226130d4aa0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2228d450a9eb92ee5fea87df6ffe226130d4aa0c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2228d450a9eb92ee5fea87df6ffe226130d4aa0c/comments", "author": null, "committer": null, "parents": [{"sha": "3bdf5ad13852aaa871ab41a6e8f509809c8c104d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bdf5ad13852aaa871ab41a6e8f509809c8c104d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3bdf5ad13852aaa871ab41a6e8f509809c8c104d"}], "stats": {"total": 256, "additions": 83, "deletions": 173}, "files": [{"sha": "946f3c4045fa4617ef7446aee58eb505dc451d9e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2228d450a9eb92ee5fea87df6ffe226130d4aa0c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2228d450a9eb92ee5fea87df6ffe226130d4aa0c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2228d450a9eb92ee5fea87df6ffe226130d4aa0c", "patch": "@@ -1,3 +1,7 @@\n+2000-05-31  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* invoke.texi: Remove documentation for -fguiding-decls.\n+\n 2000-05-31  Richard Henderson  <rth@cygnus.com>\n \n \t* configure.in: Fix typo last change."}, {"sha": "d9b48f5b9eb6b1d360c60a956cdb1c630a85fc2f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2228d450a9eb92ee5fea87df6ffe226130d4aa0c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2228d450a9eb92ee5fea87df6ffe226130d4aa0c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2228d450a9eb92ee5fea87df6ffe226130d4aa0c", "patch": "@@ -9,6 +9,23 @@ Wed May 31 14:09:00 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n 2000-05-31  Mark Mitchell  <mark@codesourcery.com>\n \n+\tRemove guiding declaration support.\n+\t* cp/cp-tree.h (flag_dump_translation_unit): Make it const.\n+\t(flag_guiding_decls): Remove.\n+\t* call.c (build_user_type_conversion_1): Remove support for\n+\tguiding decls.\n+\t(build_new_function_call): Likewise.\n+\t(build_new_op): Likewise.\n+\t(build_new_method_call): Likewise.\n+\t* decl.c (start_function): Likewise.\n+\t* friend.c (is_friend): Likewise.\n+\t(do_friend): Likewise.\n+\t* decl2.c ((flag_dump_translation_unit): Make it const.\n+\t(flag_guiding_decls): Remove.\n+\t(unsupported_options): New variable\n+\t(compare_options): New function.\n+\t(lang_decode_option): Use them.\n+\t\n \t* decl.c (build_cp_library_fn): Set DECL_CONTEXT.\n \n \t* method.c (mangle_expression): Adjust test for legal expression"}, {"sha": "3a8fc4cca8a66b04cb8321895acf559b35efd83a", "filename": "gcc/cp/NEWS", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2228d450a9eb92ee5fea87df6ffe226130d4aa0c/gcc%2Fcp%2FNEWS", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2228d450a9eb92ee5fea87df6ffe226130d4aa0c/gcc%2Fcp%2FNEWS", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FNEWS?ref=2228d450a9eb92ee5fea87df6ffe226130d4aa0c", "patch": "@@ -1,5 +1,7 @@\n *** Changes since GCC 2.95:\n \n+* Support for guiding declarations has been removed.\n+\n * G++ now supports importing member functions from base classes with a\n   using-declaration.\n "}, {"sha": "5cabf137b92fb5cc274cd93142b4418e3cb49dde", "filename": "gcc/cp/call.c", "status": "modified", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2228d450a9eb92ee5fea87df6ffe226130d4aa0c/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2228d450a9eb92ee5fea87df6ffe226130d4aa0c/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=2228d450a9eb92ee5fea87df6ffe226130d4aa0c", "patch": "@@ -2470,14 +2470,6 @@ build_user_type_conversion_1 (totype, expr, flags)\n   for (p = &(cand->second_conv); TREE_CODE (*p) != IDENTITY_CONV; )\n     p = &(TREE_OPERAND (*p, 0));\n \n-  /* Pedantically, normal function declarations are never considered\n-     to refer to template instantiations, so we only do this with\n-     -fguiding-decls.  */ \n-  if (flag_guiding_decls && templates && ! cand->template \n-      && !DECL_INITIAL (cand->fn) \n-      && TREE_CODE (TREE_TYPE (cand->fn)) != METHOD_TYPE)\n-    add_maybe_template (cand->fn, templates);\n-\n   *p = build\n     (USER_CONV,\n      (DECL_CONSTRUCTOR_P (cand->fn)\n@@ -2593,13 +2585,6 @@ build_new_function_call (fn, args)\n \t  return error_mark_node;\n \t}\n \n-      /* Pedantically, normal function declarations are never considered\n-\t to refer to template instantiations, so we only do this with\n-\t -fguiding-decls.  */\n-      if (flag_guiding_decls && templates && ! cand->template \n-\t  && ! DECL_INITIAL (cand->fn))\n-\tadd_maybe_template (cand->fn, templates);\n-\n       return build_over_call (cand, args, LOOKUP_NORMAL);\n     }\n \n@@ -3388,14 +3373,6 @@ build_new_op (code, flags, arg1, arg2, arg3)\n \t\t\t : candidates->fn);\n \t}\n \n-      /* Pedantically, normal function declarations are never considered\n-\t to refer to template instantiations, so we only do this with\n-\t -fguiding-decls.  */ \n-      if (flag_guiding_decls && templates && ! cand->template \n-\t  && ! DECL_INITIAL (cand->fn)\n-\t  && TREE_CODE (TREE_TYPE (cand->fn)) != METHOD_TYPE)\n-\tadd_maybe_template (cand->fn, templates);\n-\n       return build_over_call\n \t(cand,\n \t TREE_CODE (TREE_TYPE (cand->fn)) == METHOD_TYPE\n@@ -4461,13 +4438,6 @@ build_new_method_call (instance, name, args, basetype_path, flags)\n \t  || resolves_to_fixed_type_p (instance, 0)))\n     flags |= LOOKUP_NONVIRTUAL;\n \n-  /* Pedantically, normal function declarations are never considered\n-     to refer to template instantiations, so we only do this with\n-     -fguiding-decls.  */ \n-  if (flag_guiding_decls && templates && ! cand->template \n-      && ! DECL_INITIAL (cand->fn))\n-    add_maybe_template (cand->fn, templates);\n-\n   return build_over_call\n     (cand,\n      TREE_CODE (TREE_TYPE (cand->fn)) == METHOD_TYPE ? mem_args : args,"}, {"sha": "070f4a466cc37fd4b6ab8d733ec9ff1311f4f333", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2228d450a9eb92ee5fea87df6ffe226130d4aa0c/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2228d450a9eb92ee5fea87df6ffe226130d4aa0c/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=2228d450a9eb92ee5fea87df6ffe226130d4aa0c", "patch": "@@ -1066,7 +1066,7 @@ extern int flag_const_strings;\n /* If non-NULL, dump the tree structure for the entire translation\n    unit to this file.  */\n \n-extern char *flag_dump_translation_unit;\n+extern const char *flag_dump_translation_unit;\n \n /* Nonzero means warn about deprecated conversion from string constant to\n    `char *'.  */\n@@ -1178,9 +1178,6 @@ extern int flag_default_inline;\n    version 0.  */\n extern int name_mangling_version;\n \n-/* Nonzero means that guiding declarations are allowed.  */\n-extern int flag_guiding_decls;\n-\n /* Nonzero if wchar_t should be `unsigned short' instead of whatever it\n    would normally be, for use with WINE.  */\n extern int flag_short_wchar;"}, {"sha": "85de6ae96d3424aa6b4ca5ec0074d5abdf94e0d6", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2228d450a9eb92ee5fea87df6ffe226130d4aa0c/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2228d450a9eb92ee5fea87df6ffe226130d4aa0c/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=2228d450a9eb92ee5fea87df6ffe226130d4aa0c", "patch": "@@ -13671,8 +13671,7 @@ start_function (declspecs, declarator, attrs, flags)\n   if (!processing_template_decl && !(flags & SF_PRE_PARSED))\n     {\n       /* A specialization is not used to guide overload resolution.  */\n-      if ((flag_guiding_decls\n-\t   || !DECL_TEMPLATE_SPECIALIZATION (decl1))\n+      if (!DECL_TEMPLATE_SPECIALIZATION (decl1)\n \t  && ! DECL_FUNCTION_MEMBER_P (decl1))\n \tdecl1 = pushdecl (decl1);\n       else"}, {"sha": "9bf227621420aa42e0a61c5572b40ebd8338d27b", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 47, "deletions": 17, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2228d450a9eb92ee5fea87df6ffe226130d4aa0c/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2228d450a9eb92ee5fea87df6ffe226130d4aa0c/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=2228d450a9eb92ee5fea87df6ffe226130d4aa0c", "patch": "@@ -95,6 +95,7 @@ static tree prune_vars_needing_no_initialization PARAMS ((tree));\n static void write_out_vars PARAMS ((tree));\n static void import_export_class\tPARAMS ((tree));\n static tree key_method PARAMS ((tree));\n+static int compare_options PARAMS ((const PTR, const PTR));\n \n extern int current_class_depth;\n \n@@ -247,7 +248,7 @@ int flag_const_strings = 1;\n /* If non-NULL, dump the tree structure for the entire translation\n    unit to this file.  */\n \n-char *flag_dump_translation_unit = 0;\n+const char *flag_dump_translation_unit = 0;\n \n /* Nonzero means warn about deprecated conversion from string constant to\n    `char *'.  */\n@@ -471,9 +472,6 @@ int max_tinst_depth = 17;\n    arguments.  */\n int name_mangling_version = 2;\n \n-/* Nonzero means that guiding declarations are allowed.  */\n-int flag_guiding_decls;\n-\n /* Nonzero if wchar_t should be `unsigned short' instead of whatever it\n    would normally be, for use with WINE.  */\n int flag_short_wchar;\n@@ -561,6 +559,28 @@ lang_f_options[] =\n   {\"xref\", &flag_gnu_xref, 1}\n };\n \n+/* The list of `-f' options that we no longer support.  The `-f'\n+   prefix is not given in this table.  The `-fno-' variants are not\n+   listed here.  This table must be kept in alphabetical order.  */\n+static const char *unsupported_options[] = {\n+  \"all-virtual\",\n+  \"enum-int-equiv\",\n+  \"guiding-decls\"\n+  \"nonnull-objects\",\n+  \"this-is-variable\",\n+};\n+\n+/* Compare two option strings, pointed two by P1 and P2, for use with\n+   bsearch.  */\n+\n+static int\n+compare_options (p1, p2)\n+     const PTR p1;\n+     const PTR p2;\n+{\n+  return strcmp (*((char **) p1), *((char **) p2));\n+}\n+\n /* Decode the string P as a language-specific option.\n    Return the number of strings consumed for a valid option.\n    Otherwise return 0.  Should not complain if it does not\n@@ -576,7 +596,7 @@ lang_decode_option (argc, argv)\n      char **argv;\n {\n   int strings_processed;\n-  char *p = argv[0];\n+  const char *p = argv[0];\n #if USE_CPPLIB\n   strings_processed = cpp_handle_option (&parse_in, argc, argv);\n #else\n@@ -591,19 +611,36 @@ lang_decode_option (argc, argv)\n \t P's value is the option sans `-f'.\n \t Search for it in the table of options.  */\n       const char *option_value = NULL;\n+      const char *positive_option;\n       size_t j;\n \n       p += 2;\n       /* Try special -f options.  */\n \n+      /* See if this is one of the options no longer supported.  We\n+\t used to support these options, so we continue to accept them,\n+\t with a warning.  */\n+      if (strncmp (p, \"no-\", strlen (\"no-\")) == 0)\n+\tpositive_option = p + strlen (\"no-\");\n+      else\n+\tpositive_option = p;\n+\n+      /* If the option is present, issue a warning.  Indicate to our\n+\t caller that the option was processed successfully.  */\n+      if (bsearch (&positive_option, \n+\t\t   unsupported_options, \n+\t\t   sizeof (unsupported_options[0]),\n+\t\t   (sizeof (unsupported_options) \n+\t\t    / sizeof (unsupported_options[0])),\n+\t\t   compare_options))\n+\t{\n+\t  warning (\"-f%s is no longer supported\", p);\n+\t  return 1;\n+\t}\n+\n       if (!strcmp (p, \"handle-exceptions\")\n \t  || !strcmp (p, \"no-handle-exceptions\"))\n \twarning (\"-fhandle-exceptions has been renamed to -fexceptions (and is now on by default)\");\n-      else if (!strcmp (p, \"all-virtual\")\n-\t       || !strcmp (p, \"enum-int-equiv\")\n-\t       || !strcmp (p, \"no-nonnull-objects\")\n-\t       || !strcmp (p, \"this-is-variable\"))\n-\twarning (\"-f%s is no longer supported\", p);\n       else if (! strcmp (p, \"alt-external-templates\"))\n \t{\n \t  flag_external_templates = 1;\n@@ -617,13 +654,6 @@ lang_decode_option (argc, argv)\n \t  flag_use_repository = 1;\n \t  flag_implicit_templates = 0;\n \t}\n-      else if (!strcmp (p, \"guiding-decls\"))\n-\t{\n-\t  flag_guiding_decls = 1;\n-\t  name_mangling_version = 0;\n-\t}\n-      else if (!strcmp (p, \"no-guiding-decls\"))\n-\tflag_guiding_decls = 0;\n       else if (!strcmp (p, \"external-templates\"))\n         {\n           flag_external_templates = 1;"}, {"sha": "f4a5a57c1bcfcc15bb4645b1edc90a573bc0b69a", "filename": "gcc/cp/friend.c", "status": "modified", "additions": 7, "deletions": 14, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2228d450a9eb92ee5fea87df6ffe226130d4aa0c/gcc%2Fcp%2Ffriend.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2228d450a9eb92ee5fea87df6ffe226130d4aa0c/gcc%2Fcp%2Ffriend.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ffriend.c?ref=2228d450a9eb92ee5fea87df6ffe226130d4aa0c", "patch": "@@ -63,19 +63,12 @@ is_friend (type, supplicant)\n \t\t  if (supplicant == TREE_VALUE (friends))\n \t\t    return 1;\n \n-\t\t  /* With -fguiding-decls we are more lenient about\n-\t\t     friendship.  This is bogus in general since two\n-\t\t     specializations of a template with non-type\n-\t\t     template parameters may have the same type, but\n-\t\t     be different.  \n-\n-\t\t     Temporarily, we are also more lenient to deal\n-\t\t     with nested friend functions, for which there can\n-\t\t     be more than one FUNCTION_DECL, despite being the\n-\t\t     same function.  When that's fixed, the\n-\t\t     FUNCTION_MEMBER_P bit can go.  */\n-\t\t  if ((flag_guiding_decls \n-\t\t       || DECL_FUNCTION_MEMBER_P (supplicant))\n+\t\t  /* Temporarily, we are more lenient to deal with\n+\t\t     nested friend functions, for which there can be\n+\t\t     more than one FUNCTION_DECL, despite being the\n+\t\t     same function.  When that's fixed, this bit can\n+\t\t     go.  */\n+\t\t  if (DECL_FUNCTION_MEMBER_P (supplicant)\n \t\t      && same_type_p (TREE_TYPE (supplicant),\n \t\t\t\t      TREE_TYPE (TREE_VALUE (friends))))\n \t\t    return 1;\n@@ -402,7 +395,7 @@ do_friend (ctype, declarator, decl, parmdecls, attrlist,\n \t    decl = push_template_decl_real (decl, /*is_friend=*/1); \n \n \t  if (warn_nontemplate_friend\n-\t      && ! funcdef_flag && ! flag_guiding_decls && ! is_friend_template\n+\t      && ! funcdef_flag && ! is_friend_template\n \t      && current_template_parms && uses_template_parms (decl))\n \t    {\n \t      static int explained;"}, {"sha": "ea8b591515eff87645bc3a3090d84652e22150bb", "filename": "gcc/invoke.texi", "status": "modified", "additions": 4, "deletions": 19, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2228d450a9eb92ee5fea87df6ffe226130d4aa0c/gcc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2228d450a9eb92ee5fea87df6ffe226130d4aa0c/gcc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finvoke.texi?ref=2228d450a9eb92ee5fea87df6ffe226130d4aa0c", "patch": "@@ -105,7 +105,7 @@ in the following sections.\n @smallexample\n -fno-access-control -fcheck-new -fconserve-space\n -fdollars-in-identifiers -fno-elide-constructors -fexternal-templates\n--ffor-scope -fno-for-scope -fno-gnu-keywords -fguiding-decls -fhonor-std\n+-ffor-scope -fno-for-scope -fno-gnu-keywords -fhonor-std\n -fhuge-objects -fno-implicit-templates -finit-priority\n -fno-implement-inlines -fname-mangling-version-@var{n}\n -fno-default-inline -fno-operator-names -fno-optional-diags -fpermissive\n@@ -1103,20 +1103,6 @@ Do not recognize @code{typeof} as a keyword, so that code can use this\n word as an identifier. You can use the keyword @code{__typeof__} instead.  \n @samp{-ansi} implies @samp{-fno-gnu-keywords}.\n \n-@item -fguiding-decls\n-Treat a function declaration with the same type as a potential function\n-template instantiation as though it declares that instantiation, not a\n-normal function.  If a definition is given for the function later in the\n-translation unit (or another translation unit if the target supports\n-weak symbols), that definition will be used; otherwise the template will\n-be instantiated.  This behavior reflects the C++ language prior to\n-September 1996, when guiding declarations were removed.\n-\n-This option implies @samp{-fname-mangling-version-0}, and will not work\n-with other name mangling versions.  Like all options that change the\n-ABI, all C++ code, @emph{including libgcc.a} must be built with the same\n-setting of this option.\n-\n @item -fhonor-std\n Treat the @code{namespace std} as a namespace, instead of ignoring\n it. For compatibility with earlier versions of g++, the compiler will,\n@@ -1328,10 +1314,9 @@ could be interpreted as a particular specialization of a templatized\n function. Because this non-conforming behavior is no longer the default\n behavior for g++, @samp{-Wnon-template-friend} allows the compiler to\n check existing code for potential trouble spots, and is on by default.\n-This new compiler behavior can also be turned off with the flag\n-@samp{-fguiding-decls}, which activates the older, non-specification\n-compiler code, or with @samp{-Wno-non-template-friend} which keeps the\n-conformant compiler code but disables the helpful warning.\n+This new compiler behavior can be turned off with\n+@samp{-Wno-non-template-friend} which keeps the conformant compiler code\n+but disables the helpful warning.\n \n @item -Wold-style-cast (C++ only)\n Warn if an old-style (C-style) cast is used within a C++ program.  The"}, {"sha": "c4c9c831157286e5422c918cb7e482b431f2c8a8", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/template9.C", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bdf5ad13852aaa871ab41a6e8f509809c8c104d/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ftemplate9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bdf5ad13852aaa871ab41a6e8f509809c8c104d/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ftemplate9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Ftemplate9.C?ref=3bdf5ad13852aaa871ab41a6e8f509809c8c104d", "patch": "@@ -1,20 +0,0 @@\n-// GROUPS passed templates\n-// Test that the compiler will emit the definition of min given just\n-// the declaration.  At one point in the past, it did not.\n-// Special g++ Options: -fguiding-decls\n-#include <iostream.h>\n-\n-template <class T> inline T min(T a, T b) { return (a < b) ? a : b;};\n-\n-double min(double,double);\t// this should expand the template\n-\n-main () {\n-    int a = 1, b = 2;\n-    double aa = 2.0, bb = 1.2;\n-    cout << min(a,b) << \", \" << min(aa,bb) << \"\\n\";\n-    if (min (a, aa) == a)\n-      cout << \"PASS\" << endl;\n-    else\n-      cout << \"FAIL\" << endl;\n-}\n-"}, {"sha": "cd18382b79fa93524650845db4be1a65360b338f", "filename": "gcc/testsuite/g++.old-deja/g++.jason/overload10.C", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bdf5ad13852aaa871ab41a6e8f509809c8c104d/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Foverload10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bdf5ad13852aaa871ab41a6e8f509809c8c104d/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Foverload10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Foverload10.C?ref=3bdf5ad13852aaa871ab41a6e8f509809c8c104d", "patch": "@@ -1,22 +0,0 @@\n-// PRMS Id: 4257 (second bug)\n-// Bug: g++ fails to recognize multiple previous instantiations of a function\n-// template.\n-// Build don't link:\n-// Special g++ Options: -fguiding-decls\n-\n-template <class T>\n-class A {\n-  int i;\n-\n-  friend int foo (A<T>&);\n-};\n-\n-template <class T> int foo (A<T>& a) { return a.i; }\n-\n-A<int> a;\n-A<char> dummy;\n-\n-void bar ()\n-{\n-  foo (a);\t\t\t// gets bogus error - two foo(A<int>&)'s\n-}"}, {"sha": "fbd16a9995e967e693fa0fae1db8cb2b38c71496", "filename": "gcc/testsuite/g++.old-deja/g++.jason/template13.C", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bdf5ad13852aaa871ab41a6e8f509809c8c104d/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Ftemplate13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bdf5ad13852aaa871ab41a6e8f509809c8c104d/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Ftemplate13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Ftemplate13.C?ref=3bdf5ad13852aaa871ab41a6e8f509809c8c104d", "patch": "@@ -1,10 +0,0 @@\n-// Bug: g++ fails to actually instantiate templates to the specifications of\n-// guiding decls.\n-// Special g++ Options: -g -ansi -pedantic-errors -fguiding-decls\n-\n-template <class T> inline T min (T a, T b) { return a<b?a:b; }\n-double min (double, double);\n-\n-int main () {\n-  return (int) min (0, 1.0);\n-}"}, {"sha": "3870cbc5c140728e16c54fb51e58a472e824b54c", "filename": "gcc/testsuite/g++.old-deja/g++.jason/template38.C", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bdf5ad13852aaa871ab41a6e8f509809c8c104d/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Ftemplate38.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bdf5ad13852aaa871ab41a6e8f509809c8c104d/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Ftemplate38.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Ftemplate38.C?ref=3bdf5ad13852aaa871ab41a6e8f509809c8c104d", "patch": "@@ -1,18 +0,0 @@\n-// Special g++ Options: -fguiding-decls\n-\n-struct A {\n-  friend int operator== (const A&, const A&);\n-  A (int) { }\n-};\n-\n-template <class T> int\n-operator== (const T&, const T&)\n-{\n-  return 0;\n-}\n-\n-main ()\n-{\n-  A a (1);\n-  return a == 1;\n-}"}, {"sha": "c5d6b18520880df1b51d2c52cd8c52f048ceac33", "filename": "gcc/testsuite/g++.old-deja/g++.law/template2.C", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bdf5ad13852aaa871ab41a6e8f509809c8c104d/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Ftemplate2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bdf5ad13852aaa871ab41a6e8f509809c8c104d/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Ftemplate2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Ftemplate2.C?ref=3bdf5ad13852aaa871ab41a6e8f509809c8c104d", "patch": "@@ -1,17 +0,0 @@\n-// GROUPS passed templates\n-// Special g++ Options: -fguiding-decls\n-extern \"C\" int printf (const char *, ...);\n-\n-template<class T> T max(T a, T b) { return a > b ? a : b; }\n-\n-int max(int, int);\n-\n-main()\n-{\n-  int j;\n-\n-  j = max(1,2);\n-  j = max (1, 'c');\n-  printf (\"PASS\\n\");\n-}\n-"}]}