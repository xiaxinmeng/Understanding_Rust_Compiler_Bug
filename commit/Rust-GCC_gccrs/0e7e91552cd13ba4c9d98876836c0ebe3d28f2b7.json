{"sha": "0e7e91552cd13ba4c9d98876836c0ebe3d28f2b7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGU3ZTkxNTUyY2QxM2JhNGM5ZDk4ODc2ODM2YzBlYmUzZDI4ZjJiNw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1999-10-15T06:51:05Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1999-10-15T06:51:05Z"}, "message": "mips.h (SPECIAL_MODE_PREDICATES): New.\n\n        * mips.h (SPECIAL_MODE_PREDICATES): New.\n        * mips.md (*) Use nonimmediate_operand not general_operand for outputs.\n        (movdi+1, movsi+1): Add output reload constraint.\n        (casesi_internal): Likewise.  Fix commentary.\n        (return_internal): Use pmode_register_operand.\n\nFrom-SVN: r30009", "tree": {"sha": "f383422415f5e9253ca8aa51bfb7e9ebe8db0319", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f383422415f5e9253ca8aa51bfb7e9ebe8db0319"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0e7e91552cd13ba4c9d98876836c0ebe3d28f2b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e7e91552cd13ba4c9d98876836c0ebe3d28f2b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e7e91552cd13ba4c9d98876836c0ebe3d28f2b7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e7e91552cd13ba4c9d98876836c0ebe3d28f2b7/comments", "author": null, "committer": null, "parents": [{"sha": "997718c768cbd55f7e2d6a6e8c37ab382dd59c7f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/997718c768cbd55f7e2d6a6e8c37ab382dd59c7f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/997718c768cbd55f7e2d6a6e8c37ab382dd59c7f"}], "stats": {"total": 72, "additions": 43, "deletions": 29}, "files": [{"sha": "18cdd1622079adb65bc8b43cafdd161bca680db7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 18, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e7e91552cd13ba4c9d98876836c0ebe3d28f2b7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e7e91552cd13ba4c9d98876836c0ebe3d28f2b7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0e7e91552cd13ba4c9d98876836c0ebe3d28f2b7", "patch": "@@ -1,3 +1,11 @@\n+Thu Oct 14 23:50:25 1999  Richard Henderson  <rth@cygnus.com>\n+\n+\t* mips.h (SPECIAL_MODE_PREDICATES): New.\n+\t* mips.md (*) Use nonimmediate_operand not general_operand for outputs.\n+\t(movdi+1, movsi+1): Add output reload constraint.\n+\t(casesi_internal): Likewise.  Fix commentary.\n+\t(return_internal): Use pmode_register_operand.\n+\n Thu Oct 14 23:19:34 1999  Richard Henderson  <rth@cygnus.com>\n \n \t* 1750a.md (movstrqi): Add missing output reload constraint.\n@@ -411,7 +419,7 @@ Wed Oct 13 10:07:54 1999  Richard Henderson  <rth@cygnus.com>\n \n Wed Oct 13 01:44:29 1999  Carol LePage  <carolo@hal.com>\n \n-        * configure.in (sparc-hal-solaris2*): Fix xm_file, xm_defines,\n+\t* configure.in (sparc-hal-solaris2*): Fix xm_file, xm_defines,\n \tfloat_format and thread_file definitions.\n \t* configure: Rebuilt.\n \n@@ -438,10 +446,10 @@ Tue Oct 12 17:09:38 1999  David Edelsohn  <edelsohn@gnu.org>\n \n Tue Oct 12 09:45:19 1999  Jonathan Larmour  <jlarmour@cygnus.co.uk>\n \n-        * config/rs6000/eabi-ctors.c (__do_global_ctors): Run through\n-        __CTOR_LIST__ in opposite order, which is the correct order for sorted\n-        constructors.\n-        (__do_global_dtors): similarly for __DTOR_LIST__.\n+\t* config/rs6000/eabi-ctors.c (__do_global_ctors): Run through\n+\t__CTOR_LIST__ in opposite order, which is the correct order for sorted\n+\tconstructors.\n+\t(__do_global_dtors): similarly for __DTOR_LIST__.\n \n Fri Oct  8 19:46:03 1999  J\"orn Rennecke <amylaar@cygnus.co.uk>\n \t\t\t\tDiego Novillo <dnovillo@cygnus.com>\n@@ -595,10 +603,10 @@ Sun Oct 10 00:43:08 1999  Richard Henderson  <rth@cygnus.com>\n \n Sat Oct  9 23:26:55 1999  Jeffrey A Law  (law@cygnus.com)\n \n-        * gcse.c (gcse_main): Avoid global optimizations if we have a\n-        large number of basic blocks and the ratio of edges to blocks\n-        is high.\n-        (delete_null_pointer_checks): Likewise.\n+\t* gcse.c (gcse_main): Avoid global optimizations if we have a\n+\tlarge number of basic blocks and the ratio of edges to blocks\n+\tis high.\n+\t(delete_null_pointer_checks): Likewise.\n \n Sat Oct  9 23:16:01 1999  Ken Raeburn  <raeburn@mit.edu>\n \n@@ -746,11 +754,11 @@ Thu Oct  7 23:06:50 1999  Richard Henderson  <rth@cygnus.com>\n Thu Oct  7 22:53:00 1999  Franz Sirl  <Franz.Sirl-kernel@lauterbach.com>\n \t                  Mark Mitchell  <mark@codesourcery.com>\n \n-        * tree.c (make_lang_type_fn): New funtion pointer.\n-        (make_lang_type): Call it.\n-        * tree.h (make_lang_type): Declare.\n-        (make_lang_type_fn): Likewise.\n-        * rs6000.c (rs6000_build_va_list): Use make_lang_type.\n+\t* tree.c (make_lang_type_fn): New funtion pointer.\n+\t(make_lang_type): Call it.\n+\t* tree.h (make_lang_type): Declare.\n+\t(make_lang_type_fn): Likewise.\n+\t* rs6000.c (rs6000_build_va_list): Use make_lang_type.\n \n Thu Oct  7 00:36:17 1999  Diego Novillo  <dnovillo@cygnus.com>\n \n@@ -893,7 +901,7 @@ Tue Oct  5 11:34:52 1999  Michael Meissner  <meissner@cygnus.com>\n \t* ggc-simple.c (toplevel): Ditto.\n \n Mon Oct  4 16:48:16 1999  Diego Novillo <dnovillo@cygnus.com>\n-                          Jonathan Larmour  <jlarmour@cygnus.co.uk>\n+\t                  Jonathan Larmour  <jlarmour@cygnus.co.uk>\n \n \t* config/mips/mips.c (mips_move_2words): Split doubles if\n \tISA >= 3, !TARGET_64BIT, and destination is not an FP register.\n@@ -1721,12 +1729,12 @@ Wed Sep 22 06:06:57 1999  Jeffrey A Law  (law@cygnus.com)\n \t* pa.c, pa.h, pa.md: Support multiple assembler dialects in\n \tmost assembler templates.\n \n-        * pa.c (hppa_legitimize_address): Handle full offsets for PA2.0\n-        FP loads and stores.\n+\t* pa.c (hppa_legitimize_address): Handle full offsets for PA2.0\n+\tFP loads and stores.\n \t(following_call): Always return zero for the PA8000.\n \t* pa.h (GO_IF_LEGITIMATE_ADDRESS): Handle full offsets for PA2.0\n \tFP loads and stores.\n-        (LEGITIMIZE_RELOAD_ADDRESS): Similarly.\n+\t(LEGITIMIZE_RELOAD_ADDRESS): Similarly.\n \n \t* pa.h (BRANCH_COST): Define.\n "}, {"sha": "cf7e259e1fe54d7cda28dd3ba5773a20c7a6f71e", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e7e91552cd13ba4c9d98876836c0ebe3d28f2b7/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e7e91552cd13ba4c9d98876836c0ebe3d28f2b7/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=0e7e91552cd13ba4c9d98876836c0ebe3d28f2b7", "patch": "@@ -3750,6 +3750,11 @@ while (0)\n   {\"extend_operator\",           { SIGN_EXTEND, ZERO_EXTEND }},          \\\n   {\"highpart_shift_operator\",   { ASHIFTRT, LSHIFTRT, ROTATERT, ROTATE }},\n \n+/* A list of predicates that do special things with modes, and so\n+   should not elicit warnings for VOIDmode match_operand.  */\n+\n+#define SPECIAL_MODE_PREDICATES \\\n+  \"pc_or_label_operand\",\n \n \f\n /* If defined, a C statement to be executed just prior to the"}, {"sha": "0a41e5fb2d87a19bad02434c728c4fc8eebf9c5e", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e7e91552cd13ba4c9d98876836c0ebe3d28f2b7/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e7e91552cd13ba4c9d98876836c0ebe3d28f2b7/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=0e7e91552cd13ba4c9d98876836c0ebe3d28f2b7", "patch": "@@ -4066,7 +4066,7 @@ move\\\\t%0,%z4\\\\n\\\\\n ;; registers are not supported).\n \n (define_insn \"fix_truncdfsi2\"\n-  [(set (match_operand:SI 0 \"general_operand\" \"=d,*f,R,To\")\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=d,*f,R,To\")\n \t(fix:SI (match_operand:DF 1 \"register_operand\" \"f,*f,f,f\")))\n    (clobber (match_scratch:SI 2 \"=d,*d,&d,&d\"))\n    (clobber (match_scratch:DF 3 \"=f,?*X,f,f\"))]\n@@ -4091,7 +4091,7 @@ move\\\\t%0,%z4\\\\n\\\\\n \n \n (define_insn \"fix_truncsfsi2\"\n-  [(set (match_operand:SI 0 \"general_operand\" \"=d,*f,R,To\")\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=d,*f,R,To\")\n \t(fix:SI (match_operand:SF 1 \"register_operand\" \"f,*f,f,f\")))\n    (clobber (match_scratch:SI 2 \"=d,*d,&d,&d\"))\n    (clobber (match_scratch:SF 3 \"=f,?*X,f,f\"))]\n@@ -4125,7 +4125,7 @@ move\\\\t%0,%z4\\\\n\\\\\n ;;; If this is disabled, then fixuns_truncdfdi2 must be disabled also.\n \n (define_insn \"fix_truncdfdi2\"\n-  [(set (match_operand:DI 0 \"general_operand\" \"=d,*f,R,To\")\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=d,*f,R,To\")\n \t(fix:DI (match_operand:DF 1 \"register_operand\" \"f,*f,f,f\")))\n    (clobber (match_scratch:DF 2 \"=f,?*X,f,f\"))]\n   \"TARGET_HARD_FLOAT && TARGET_64BIT && TARGET_DOUBLE_FLOAT\"\n@@ -4152,7 +4152,7 @@ move\\\\t%0,%z4\\\\n\\\\\n ;;; but not in the chapter that describes the FPU.  It is not mentioned at all\n ;;; in the 1991 manuals.  The r4000 at Cygnus does not have this instruction.\n (define_insn \"fix_truncsfdi2\"\n-  [(set (match_operand:DI 0 \"general_operand\" \"=d,*f,R,To\")\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=d,*f,R,To\")\n \t(fix:DI (match_operand:SF 1 \"register_operand\" \"f,*f,f,f\")))\n    (clobber (match_scratch:DF 2 \"=f,?*X,f,f\"))]\n   \"TARGET_HARD_FLOAT && TARGET_64BIT && TARGET_DOUBLE_FLOAT\"\n@@ -4825,7 +4825,7 @@ move\\\\t%0,%z4\\\\n\\\\\n ;; instruction can be generated by save_restore_insns.\n \n (define_insn \"\"\n-  [(set (match_operand:DI 0 \"memory_operand\" \"R,m\")\n+  [(set (match_operand:DI 0 \"memory_operand\" \"=R,m\")\n \t(reg:DI 31))]\n   \"TARGET_MIPS16 && TARGET_64BIT\"\n   \"*\n@@ -5247,7 +5247,7 @@ move\\\\t%0,%z4\\\\n\\\\\n ;; instruction can be generated by save_restore_insns.\n \n (define_insn \"\"\n-  [(set (match_operand:SI 0 \"memory_operand\" \"R,m\")\n+  [(set (match_operand:SI 0 \"memory_operand\" \"=R,m\")\n \t(reg:SI 31))]\n   \"TARGET_MIPS16\"\n   \"*\n@@ -9239,7 +9239,7 @@ move\\\\t%0,%z4\\\\n\\\\\n \n ;; An embedded PIC switch statement looks like this:\n ;;\tbal\t$LS1\n-;;\tsll\t$reg,$index,2\n+;;\tsll\t$reg,$reg,2\n ;; $LS1:\n ;;\taddu\t$reg,$reg,$31\n ;;\tlw\t$reg,$L1-$LS1($reg)\n@@ -9249,13 +9249,15 @@ move\\\\t%0,%z4\\\\n\\\\\n ;;\t.word\tcase1-$LS1\n ;;\t.word\tcase2-$LS1\n ;;\t...\n+;;\n+;; ??? So how does operand 2 get used?\n \n (define_insn \"casesi_internal\"\n   [(set (pc)\n \t(mem:SI (plus:SI (mult:SI (match_operand:SI 0 \"register_operand\" \"d\")\n \t\t\t\t  (const_int 4))\n \t\t\t (label_ref (match_operand 1 \"\" \"\")))))\n-   (clobber (match_operand:SI 2 \"register_operand\" \"d\"))\n+   (clobber (match_operand:SI 2 \"register_operand\" \"=d\"))\n    (clobber (reg:SI 31))]\n   \"TARGET_EMBEDDED_PIC\"\n   \"*\n@@ -9383,10 +9385,9 @@ move\\\\t%0,%z4\\\\n\\\\\n    (set_attr \"mode\"\t\"none\")])\n \n ;; Normal return.\n-;; We match any mode for the return address, so that this will work with\n-;; both 32 bit and 64 bit targets.\n+\n (define_insn \"return_internal\"\n-  [(use (match_operand 0 \"register_operand\" \"\"))\n+  [(use (match_operand 0 \"pmode_register_operand\" \"\"))\n    (return)]\n   \"\"\n   \"*"}]}