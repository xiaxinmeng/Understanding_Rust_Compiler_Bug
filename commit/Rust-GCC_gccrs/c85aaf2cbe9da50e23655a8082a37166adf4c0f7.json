{"sha": "c85aaf2cbe9da50e23655a8082a37166adf4c0f7", "node_id": "C_kwDOANBUbNoAKGM4NWFhZjJjYmU5ZGE1MGUyMzY1NWE4MDgyYTM3MTY2YWRmNGMwZjc", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-03-04T14:14:59Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-03-04T14:14:59Z"}, "message": "gimplify: Clear TREE_READONLY on automatic vars being stored into [PR104529]\n\nThe following testcase regressed when SRA started punting on stores to\nTREE_READONLY vars.  We document that:\n\"In a VAR_DECL, PARM_DECL or FIELD_DECL, or any kind of ..._REF node,\nnonzero means it may not be the lhs of an assignment.\"\nso the SRA change looks desirable.  On the other side, at least in this\ntestcase the TREE_READONLY is set there intentionally from the\nPR85873 fix, because gimplify_init_constructor itself uses TREE_READONLY\non the object to determine if it can perform promotion to static const\nor not.\n\nSo, similarly to other spots in the gimplifier where we also clear\nTREE_READONLY when we emit IL that stores into the object, this\ndoes the same in gimplify_init_constructor, but in the way so that\nthe TREE_READONLY test for the promotion to static const keeps working\nand doesn't change anything for notify_temp_creation mode, which doesn't\nemit any IL, just tests if it would need a temporary or not.\n\nThis keeps PR85873 testcase working as before and fixes this regression.\n\n2022-03-04  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR middle-end/104529\n\t* gimplify.cc (gimplify_init_constructor): Clear TREE_READONLY\n\ton automatic objects which will be runtime initialized.\n\n\t* g++.dg/tree-ssa/pr104529.C: New test.", "tree": {"sha": "740b795d72aff22cb9e36d1692806144095cd7fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/740b795d72aff22cb9e36d1692806144095cd7fe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c85aaf2cbe9da50e23655a8082a37166adf4c0f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c85aaf2cbe9da50e23655a8082a37166adf4c0f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c85aaf2cbe9da50e23655a8082a37166adf4c0f7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c85aaf2cbe9da50e23655a8082a37166adf4c0f7/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07395f19dff610f03d1b1d30c8bd640f610c45dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07395f19dff610f03d1b1d30c8bd640f610c45dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07395f19dff610f03d1b1d30c8bd640f610c45dc"}], "stats": {"total": 31, "additions": 31, "deletions": 0}, "files": [{"sha": "c6ba0c33480cab54ef7308684e90e324da42ff2c", "filename": "gcc/gimplify.cc", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c85aaf2cbe9da50e23655a8082a37166adf4c0f7/gcc%2Fgimplify.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c85aaf2cbe9da50e23655a8082a37166adf4c0f7/gcc%2Fgimplify.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.cc?ref=c85aaf2cbe9da50e23655a8082a37166adf4c0f7", "patch": "@@ -5120,6 +5120,12 @@ gimplify_init_constructor (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n \t  {\n \t    if (notify_temp_creation)\n \t      return GS_OK;\n+\n+\t    /* The var will be initialized and so appear on lhs of\n+\t       assignment, it can't be TREE_READONLY anymore.  */\n+\t    if (VAR_P (object))\n+\t      TREE_READONLY (object) = 0;\n+\n \t    is_empty_ctor = true;\n \t    break;\n \t  }\n@@ -5171,6 +5177,11 @@ gimplify_init_constructor (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n \t    break;\n \t  }\n \n+\t/* The var will be initialized and so appear on lhs of\n+\t   assignment, it can't be TREE_READONLY anymore.  */\n+\tif (VAR_P (object) && !notify_temp_creation)\n+\t  TREE_READONLY (object) = 0;\n+\n \t/* If there are \"lots\" of initialized elements, even discounting\n \t   those that are not address constants (and thus *must* be\n \t   computed at runtime), then partition the constructor into"}, {"sha": "3cb3853c22a1773ed4030ef8a35aef397bd460ca", "filename": "gcc/testsuite/g++.dg/tree-ssa/pr104529.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c85aaf2cbe9da50e23655a8082a37166adf4c0f7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr104529.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c85aaf2cbe9da50e23655a8082a37166adf4c0f7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr104529.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr104529.C?ref=c85aaf2cbe9da50e23655a8082a37166adf4c0f7", "patch": "@@ -0,0 +1,20 @@\n+// PR middle-end/104529\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"-O2 -fdump-tree-optimized\" }\n+// { dg-final { scan-tree-dump-not \"MEM\\[^\\n\\r]*MEM\" \"optimized\" } }\n+\n+#include <cstddef>\n+#include <vector>\n+\n+struct S {\n+  unsigned int a;\n+  std::vector<unsigned char> b;\n+  std::vector<unsigned char> c;\n+};\n+\n+std::size_t\n+foo ()\n+{\n+  S test[] = { { 48, { 255, 0, 0, 0, 0, 0 } } };\n+  return sizeof (test);\n+}"}]}