{"sha": "8f6d25f19bae521c3d028bcdcd69019540b8c3b9", "node_id": "C_kwDOANBUbNoAKDhmNmQyNWYxOWJhZTUyMWMzZDAyOGJjZGNkNjkwMTk1NDBiOGMzYjk", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-11-05T12:35:55Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-11-08T17:35:15Z"}, "message": "libstdc++: Fix -Wsystem-headers warnings\n\nFix some problems noticed with -Wsystem-headers.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/stl_tempbuf.h (_Temporary_buffer): Disable\n\twarnings about get_temporary_buffer being deprecated.\n\t* include/ext/functional (mem_fun1, mem_fun1_ref): Disable\n\twarnings about mem_fun1_t, const_mem_fun1_t, mem_fun1_ref_t and\n\tconst_mem_fun1_ref_t being deprecated.\n\t* include/std/array (__array_traits<T, 0>): Remove artificial\n\tattributes which give warnings about being ignored.\n\t* include/std/spanstream (basic_spanbuf::setbuf): Add assertion\n\tand adjust to avoid narrowing warning.\n\t* libsupc++/exception_ptr.h [!__cpp_rtti && !__cpp_exceptions]\n\t(make_exception_ptr): Add missing inline specifier.", "tree": {"sha": "7755480f5d6140cc292340860534daad169a34c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7755480f5d6140cc292340860534daad169a34c6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8f6d25f19bae521c3d028bcdcd69019540b8c3b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f6d25f19bae521c3d028bcdcd69019540b8c3b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f6d25f19bae521c3d028bcdcd69019540b8c3b9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f6d25f19bae521c3d028bcdcd69019540b8c3b9/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d549401ae8ab334c8cba1c1339dbd3c8e695685", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d549401ae8ab334c8cba1c1339dbd3c8e695685", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d549401ae8ab334c8cba1c1339dbd3c8e695685"}], "stats": {"total": 16, "additions": 10, "deletions": 6}, "files": [{"sha": "f3d4dd73073371396b39787c04f45880234d607f", "filename": "libstdc++-v3/include/bits/stl_tempbuf.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f6d25f19bae521c3d028bcdcd69019540b8c3b9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tempbuf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f6d25f19bae521c3d028bcdcd69019540b8c3b9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tempbuf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tempbuf.h?ref=8f6d25f19bae521c3d028bcdcd69019540b8c3b9", "patch": "@@ -257,6 +257,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  __ucr(__first, __last, __seed);\n     }\n \n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Wdeprecated-declarations\"\n   template<typename _ForwardIterator, typename _Tp>\n     _Temporary_buffer<_ForwardIterator, _Tp>::\n     _Temporary_buffer(_ForwardIterator __seed, size_type __original_len)\n@@ -281,6 +283,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t    }\n \t}\n     }\n+#pragma GCC diagnostic pop\n \n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace"}, {"sha": "a947ee6384d4cd163f428ecca00b061d57e66e2f", "filename": "libstdc++-v3/include/ext/functional", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f6d25f19bae521c3d028bcdcd69019540b8c3b9/libstdc%2B%2B-v3%2Finclude%2Fext%2Ffunctional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f6d25f19bae521c3d028bcdcd69019540b8c3b9/libstdc%2B%2B-v3%2Finclude%2Fext%2Ffunctional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Ffunctional?ref=8f6d25f19bae521c3d028bcdcd69019540b8c3b9", "patch": "@@ -396,8 +396,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { _M_initialize(161803398u); }\n   };\n \n-#pragma GCC diagnostic pop\n-\n   // Mem_fun adaptor helper functions mem_fun1 and mem_fun1_ref,\n   // provided for backward compatibility, they are no longer part of\n   // the C++ standard.\n@@ -422,6 +420,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     mem_fun1_ref(_Ret (_Tp::*__f)(_Arg) const)\n     { return std::const_mem_fun1_ref_t<_Ret, _Tp, _Arg>(__f); }\n \n+#pragma GCC diagnostic pop\n+\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace\n "}, {"sha": "e26390e6f80503e59c6c98c6dab46678fb33cb17", "filename": "libstdc++-v3/include/std/array", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f6d25f19bae521c3d028bcdcd69019540b8c3b9/libstdc%2B%2B-v3%2Finclude%2Fstd%2Farray", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f6d25f19bae521c3d028bcdcd69019540b8c3b9/libstdc%2B%2B-v3%2Finclude%2Fstd%2Farray", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Farray?ref=8f6d25f19bae521c3d028bcdcd69019540b8c3b9", "patch": "@@ -64,11 +64,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n      struct _Type\n      {\n        // Indexing is undefined.\n-       __attribute__((__always_inline__,__artificial__,__noreturn__))\n+       __attribute__((__always_inline__,__noreturn__))\n        _Tp& operator[](size_t) const noexcept { __builtin_trap(); }\n \n        // Conversion to a pointer produces a null pointer.\n-       __attribute__((__always_inline__,__artificial__))\n+       __attribute__((__always_inline__))\n        operator _Tp*() const noexcept { return nullptr; }\n      };\n "}, {"sha": "483996b274f21de5f0e094d4856c38dc4cfe842c", "filename": "libstdc++-v3/include/std/spanstream", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f6d25f19bae521c3d028bcdcd69019540b8c3b9/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fspanstream", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f6d25f19bae521c3d028bcdcd69019540b8c3b9/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fspanstream", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fspanstream?ref=8f6d25f19bae521c3d028bcdcd69019540b8c3b9", "patch": "@@ -136,7 +136,8 @@ template<typename _CharT, typename _Traits>\n     basic_streambuf<_CharT, _Traits>*\n     setbuf(_CharT* __s, streamsize __n) override\n     {\n-      span({__s, __n});\n+      __glibcxx_assert(__n >= 0);\n+      this->span(std::span<_CharT>(__s, __n));\n       return this;\n     }\n "}, {"sha": "b01181021234de716f552838b0671c1f9c8eef71", "filename": "libstdc++-v3/libsupc++/exception_ptr.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f6d25f19bae521c3d028bcdcd69019540b8c3b9/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f6d25f19bae521c3d028bcdcd69019540b8c3b9/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception_ptr.h?ref=8f6d25f19bae521c3d028bcdcd69019540b8c3b9", "patch": "@@ -280,7 +280,7 @@ namespace std _GLIBCXX_VISIBILITY(default)\n   // instead of a working one compiled with RTTI and/or exceptions enabled.\n   template<typename _Ex>\n     __attribute__ ((__always_inline__))\n-    exception_ptr\n+    inline exception_ptr\n     make_exception_ptr(_Ex) _GLIBCXX_USE_NOEXCEPT\n     { return exception_ptr(); }\n #endif"}]}