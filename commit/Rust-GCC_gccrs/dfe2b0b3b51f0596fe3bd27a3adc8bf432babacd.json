{"sha": "dfe2b0b3b51f0596fe3bd27a3adc8bf432babacd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGZlMmIwYjNiNTFmMDU5NmZlM2JkMjdhM2FkYzhiZjQzMmJhYmFjZA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "1999-08-18T22:11:10Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-08-18T22:11:10Z"}, "message": "search.c (setup_class_bindings): Robustify.\n\n\t* search.c (setup_class_bindings): Robustify.\n\t* typeck.c (common_type): Use same_type_p, not pointer equality,\n\tto compare types.\n\nFrom-SVN: r28756", "tree": {"sha": "48fb3c8d1567623241ba9fb85a5b10f1c3efc7d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/48fb3c8d1567623241ba9fb85a5b10f1c3efc7d8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dfe2b0b3b51f0596fe3bd27a3adc8bf432babacd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfe2b0b3b51f0596fe3bd27a3adc8bf432babacd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dfe2b0b3b51f0596fe3bd27a3adc8bf432babacd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfe2b0b3b51f0596fe3bd27a3adc8bf432babacd/comments", "author": null, "committer": null, "parents": [{"sha": "4ce3d5373035e991585e11d68a07c6e6e101eb92", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ce3d5373035e991585e11d68a07c6e6e101eb92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ce3d5373035e991585e11d68a07c6e6e101eb92"}], "stats": {"total": 33, "additions": 31, "deletions": 2}, "files": [{"sha": "6e44c4fcf62d731d42ba10538bc6ef1bda8714f4", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfe2b0b3b51f0596fe3bd27a3adc8bf432babacd/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfe2b0b3b51f0596fe3bd27a3adc8bf432babacd/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=dfe2b0b3b51f0596fe3bd27a3adc8bf432babacd", "patch": "@@ -1,5 +1,9 @@\n 1999-08-18  Mark Mitchell  <mark@codesourcery.com>\n \n+\t* search.c (setup_class_bindings): Robustify.\n+\t* typeck.c (common_type): Use same_type_p, not pointer equality,\n+\tto compare types.\n+\n         * cp-tree.h (build_lang_field_decl): Remove.\n \t* class.c (build_vtable): Replace calls to build_lang_field_decl\n \twith build_lang_decl."}, {"sha": "62fa4024b9ba58447f282b346c35e6b984bf679c", "filename": "gcc/cp/search.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfe2b0b3b51f0596fe3bd27a3adc8bf432babacd/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfe2b0b3b51f0596fe3bd27a3adc8bf432babacd/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=dfe2b0b3b51f0596fe3bd27a3adc8bf432babacd", "patch": "@@ -2960,7 +2960,7 @@ setup_class_bindings (name, type_binding_p)\n        binding.  This means that we already processed this binding\n        above.  */\n     my_friendly_assert (type_binding_p, 19990401);\n-  else\n+  else if (value_binding)\n     {\n       if (TREE_CODE (value_binding) == TREE_LIST \n \t  && TREE_TYPE (value_binding) == error_mark_node)"}, {"sha": "716fe19323d0e2e3317f66b9a751bb019d0af13e", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfe2b0b3b51f0596fe3bd27a3adc8bf432babacd/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfe2b0b3b51f0596fe3bd27a3adc8bf432babacd/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=dfe2b0b3b51f0596fe3bd27a3adc8bf432babacd", "patch": "@@ -698,7 +698,7 @@ common_type (t1, t2)\n \ttt1 = TYPE_MAIN_VARIANT (tt1);\n \ttt2 = TYPE_MAIN_VARIANT (tt2);\n \n-\tif (tt1 == tt2)\n+\tif (same_type_p (tt1, tt2))\n \t  target = tt1;\n \telse if (b1)\n \t  {"}, {"sha": "e226559429d57021ec925a0f6f25ec6857fd0d3e", "filename": "gcc/testsuite/g++.old-deja/g++.pt/crash46.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfe2b0b3b51f0596fe3bd27a3adc8bf432babacd/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fcrash46.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfe2b0b3b51f0596fe3bd27a3adc8bf432babacd/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fcrash46.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fcrash46.C?ref=dfe2b0b3b51f0596fe3bd27a3adc8bf432babacd", "patch": "@@ -0,0 +1,8 @@\n+// Build don't link:\n+// Origin: Leon Bottou <leonb@research.att.com>\n+\n+class AA { protected:\n+  template <class T> struct BB { T x; BB(const T &x) : x(x) { }; };\n+  template <class T> struct CC : public BB<T> { CC(const T &x) : BB<T>(x) { };\n+};\n+};"}, {"sha": "96a23fd5c273ff839628a4b109de33bf08b29e88", "filename": "gcc/testsuite/g++.old-deja/g++.pt/crash47.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfe2b0b3b51f0596fe3bd27a3adc8bf432babacd/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fcrash47.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfe2b0b3b51f0596fe3bd27a3adc8bf432babacd/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fcrash47.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fcrash47.C?ref=dfe2b0b3b51f0596fe3bd27a3adc8bf432babacd", "patch": "@@ -0,0 +1,17 @@\n+// Build don't link:\n+// Origin: Rick Campbell <rick.campbell@db.com>\n+\n+template <class Owner, typename Type>\n+struct DataMember\n+{\n+    inline DataMember (Type Owner::* data_member);\n+\n+    Type Owner::* _data_member;\n+};\n+\n+template <class Owner, typename Type>\n+inline\n+DataMember<Owner,Type>::DataMember (Type Owner::* data_member)\n+    : _data_member (data_member)\n+{\n+}"}]}