{"sha": "9cb24602d306d44c8a6500f15db89988b62395ef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWNiMjQ2MDJkMzA2ZDQ0YzhhNjUwMGYxNWRiODk5ODhiNjIzOTVlZg==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@redhat.com", "date": "2004-07-16T07:45:54Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2004-07-16T07:45:54Z"}, "message": "mips.md (*seq_[sd]i): Renamed from seq_[sd]i_zero.\n\n\t* config/mips/mips.md (*seq_[sd]i): Renamed from seq_[sd]i_zero.\n\t(*sne_[sd]i): Likewise sne_[sd]i_zero.\n\t(*sgt_[sd]i): ...and sgt_[sd]i.\n\t(*slt_[sd]i): ...and slt_[sd]i.\n\t(*sgtu_[sd]i): ...and sgtu_[sd]i.\n\t(*sltu_[sd]i): ...and sltu_[sd]i.\n\t(*sleu_[sd]i): ...and sleu_[sd]i_const.\n\tName previously unnamed mips16 patterns.  Formatting fixes.\n\nFrom-SVN: r84806", "tree": {"sha": "b4a927494cdc3930734f909c8935dc0e20b72b8f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b4a927494cdc3930734f909c8935dc0e20b72b8f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9cb24602d306d44c8a6500f15db89988b62395ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9cb24602d306d44c8a6500f15db89988b62395ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9cb24602d306d44c8a6500f15db89988b62395ef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9cb24602d306d44c8a6500f15db89988b62395ef/comments", "author": null, "committer": null, "parents": [{"sha": "d7ad1e57f7f863ada2c7d51b79c9a83260c128a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7ad1e57f7f863ada2c7d51b79c9a83260c128a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7ad1e57f7f863ada2c7d51b79c9a83260c128a5"}], "stats": {"total": 203, "additions": 107, "deletions": 96}, "files": [{"sha": "d3c7f199dc088d1efb0c29800428ddb04ad6cea7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cb24602d306d44c8a6500f15db89988b62395ef/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cb24602d306d44c8a6500f15db89988b62395ef/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9cb24602d306d44c8a6500f15db89988b62395ef", "patch": "@@ -1,3 +1,14 @@\n+2004-07-16  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* config/mips/mips.md (*seq_[sd]i): Renamed from seq_[sd]i_zero.\n+\t(*sne_[sd]i): Likewise sne_[sd]i_zero.\n+\t(*sgt_[sd]i): ...and sgt_[sd]i.\n+\t(*slt_[sd]i): ...and slt_[sd]i.\n+\t(*sgtu_[sd]i): ...and sgtu_[sd]i.\n+\t(*sltu_[sd]i): ...and sltu_[sd]i.\n+\t(*sleu_[sd]i): ...and sleu_[sd]i_const.\n+\tName previously unnamed mips16 patterns.  Formatting fixes.\n+\n 2004-07-16  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* config/mips/mips.c (cmp_operands): Renamed from branch_cmp."}, {"sha": "762900efa2a7aee6e51e3b19a3c1cc88f81a7cc6", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 96, "deletions": 96, "changes": 192, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cb24602d306d44c8a6500f15db89988b62395ef/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cb24602d306d44c8a6500f15db89988b62395ef/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=9cb24602d306d44c8a6500f15db89988b62395ef", "patch": "@@ -6021,41 +6021,41 @@ dsrl\\t%3,%3,1\\n\\\n })\n \n \n-(define_insn \"seq_si_zero\"\n+(define_insn \"*seq_si\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n \t(eq:SI (match_operand:SI 1 \"register_operand\" \"d\")\n \t       (const_int 0)))]\n   \"!TARGET_MIPS16\"\n   \"sltu\\t%0,%1,1\"\n-  [(set_attr \"type\"\t\"slt\")\n-   (set_attr \"mode\"\t\"SI\")])\n+  [(set_attr \"type\" \"slt\")\n+   (set_attr \"mode\" \"SI\")])\n \n-(define_insn \"\"\n+(define_insn \"*seq_si_mips16\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=t\")\n \t(eq:SI (match_operand:SI 1 \"register_operand\" \"d\")\n \t       (const_int 0)))]\n   \"TARGET_MIPS16\"\n   \"sltu\\t%1,1\"\n-  [(set_attr \"type\"\t\"slt\")\n-   (set_attr \"mode\"\t\"SI\")])\n+  [(set_attr \"type\" \"slt\")\n+   (set_attr \"mode\" \"SI\")])\n \n-(define_insn \"seq_di_zero\"\n+(define_insn \"*seq_di\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n \t(eq:DI (match_operand:DI 1 \"register_operand\" \"d\")\n \t       (const_int 0)))]\n   \"TARGET_64BIT && !TARGET_MIPS16\"\n   \"sltu\\t%0,%1,1\"\n-  [(set_attr \"type\"\t\"slt\")\n-   (set_attr \"mode\"\t\"DI\")])\n+  [(set_attr \"type\" \"slt\")\n+   (set_attr \"mode\" \"DI\")])\n \n-(define_insn \"\"\n+(define_insn \"*seq_di_mips16\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=t\")\n \t(eq:DI (match_operand:DI 1 \"register_operand\" \"d\")\n \t       (const_int 0)))]\n   \"TARGET_64BIT && TARGET_MIPS16\"\n   \"sltu\\t%1,1\"\n-  [(set_attr \"type\"\t\"slt\")\n-   (set_attr \"mode\"\t\"DI\")])\n+  [(set_attr \"type\" \"slt\")\n+   (set_attr \"mode\" \"DI\")])\n \n ;; On the mips16 the default code is better than using sltu.\n \n@@ -6072,23 +6072,23 @@ dsrl\\t%3,%3,1\\n\\\n   DONE;\n })\n \n-(define_insn \"sne_si_zero\"\n+(define_insn \"*sne_si\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n \t(ne:SI (match_operand:SI 1 \"register_operand\" \"d\")\n \t       (const_int 0)))]\n   \"!TARGET_MIPS16\"\n   \"sltu\\t%0,%.,%1\"\n-  [(set_attr \"type\"\t\"slt\")\n-   (set_attr \"mode\"\t\"SI\")])\n+  [(set_attr \"type\" \"slt\")\n+   (set_attr \"mode\" \"SI\")])\n \n-(define_insn \"sne_di_zero\"\n+(define_insn \"*sne_di\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n \t(ne:DI (match_operand:DI 1 \"register_operand\" \"d\")\n \t       (const_int 0)))]\n   \"TARGET_64BIT && !TARGET_MIPS16\"\n   \"sltu\\t%0,%.,%1\"\n-  [(set_attr \"type\"\t\"slt\")\n-   (set_attr \"mode\"\t\"DI\")])\n+  [(set_attr \"type\" \"slt\")\n+   (set_attr \"mode\" \"DI\")])\n \n (define_expand \"sgt\"\n   [(set (match_operand:SI 0 \"register_operand\")\n@@ -6103,41 +6103,41 @@ dsrl\\t%3,%3,1\\n\\\n   DONE;\n })\n \n-(define_insn \"sgt_si\"\n+(define_insn \"*sgt_si\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n \t(gt:SI (match_operand:SI 1 \"register_operand\" \"d\")\n \t       (match_operand:SI 2 \"reg_or_0_operand\" \"dJ\")))]\n   \"!TARGET_MIPS16\"\n   \"slt\\t%0,%z2,%1\"\n-  [(set_attr \"type\"\t\"slt\")\n-   (set_attr \"mode\"\t\"SI\")])\n+  [(set_attr \"type\" \"slt\")\n+   (set_attr \"mode\" \"SI\")])\n \n-(define_insn \"\"\n+(define_insn \"*sgt_si_mips16\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=t\")\n \t(gt:SI (match_operand:SI 1 \"register_operand\" \"d\")\n \t       (match_operand:SI 2 \"register_operand\" \"d\")))]\n   \"TARGET_MIPS16\"\n   \"slt\\t%2,%1\"\n-  [(set_attr \"type\"\t\"slt\")\n-   (set_attr \"mode\"\t\"SI\")])\n+  [(set_attr \"type\" \"slt\")\n+   (set_attr \"mode\" \"SI\")])\n \n-(define_insn \"sgt_di\"\n+(define_insn \"*sgt_di\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n \t(gt:DI (match_operand:DI 1 \"register_operand\" \"d\")\n \t       (match_operand:DI 2 \"reg_or_0_operand\" \"dJ\")))]\n   \"TARGET_64BIT && !TARGET_MIPS16\"\n   \"slt\\t%0,%z2,%1\"\n-  [(set_attr \"type\"\t\"slt\")\n-   (set_attr \"mode\"\t\"DI\")])\n+  [(set_attr \"type\" \"slt\")\n+   (set_attr \"mode\" \"DI\")])\n \n-(define_insn \"\"\n+(define_insn \"*sgt_di_mips16\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n \t(gt:DI (match_operand:DI 1 \"register_operand\" \"d\")\n \t       (match_operand:DI 2 \"register_operand\" \"d\")))]\n   \"TARGET_64BIT && TARGET_MIPS16\"\n   \"slt\\t%2,%1\"\n-  [(set_attr \"type\"\t\"slt\")\n-   (set_attr \"mode\"\t\"DI\")])\n+  [(set_attr \"type\" \"slt\")\n+   (set_attr \"mode\" \"DI\")])\n \n (define_expand \"sge\"\n   [(set (match_operand:SI 0 \"register_operand\")\n@@ -6165,46 +6165,46 @@ dsrl\\t%3,%3,1\\n\\\n   DONE;\n })\n \n-(define_insn \"slt_si\"\n+(define_insn \"*slt_si\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n \t(lt:SI (match_operand:SI 1 \"register_operand\" \"d\")\n \t       (match_operand:SI 2 \"arith_operand\" \"dI\")))]\n   \"!TARGET_MIPS16\"\n   \"slt\\t%0,%1,%2\"\n-  [(set_attr \"type\"\t\"slt\")\n-   (set_attr \"mode\"\t\"SI\")])\n+  [(set_attr \"type\" \"slt\")\n+   (set_attr \"mode\" \"SI\")])\n \n-(define_insn \"\"\n+(define_insn \"*slt_si_mips16\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=t,t\")\n \t(lt:SI (match_operand:SI 1 \"register_operand\" \"d,d\")\n \t       (match_operand:SI 2 \"arith_operand\" \"d,I\")))]\n   \"TARGET_MIPS16\"\n   \"slt\\t%1,%2\"\n-  [(set_attr \"type\"\t\"slt\")\n-   (set_attr \"mode\"\t\"SI\")\n+  [(set_attr \"type\" \"slt\")\n+   (set_attr \"mode\" \"SI\")\n    (set_attr_alternative \"length\"\n \t\t[(const_int 4)\n \t\t (if_then_else (match_operand:VOID 2 \"m16_uimm8_1\")\n \t\t\t       (const_int 4)\n \t\t\t       (const_int 8))])])\n \n-(define_insn \"slt_di\"\n+(define_insn \"*slt_di\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n \t(lt:DI (match_operand:DI 1 \"register_operand\" \"d\")\n \t       (match_operand:DI 2 \"arith_operand\" \"dI\")))]\n   \"TARGET_64BIT && !TARGET_MIPS16\"\n   \"slt\\t%0,%1,%2\"\n-  [(set_attr \"type\"\t\"slt\")\n-   (set_attr \"mode\"\t\"DI\")])\n+  [(set_attr \"type\" \"slt\")\n+   (set_attr \"mode\" \"DI\")])\n \n-(define_insn \"\"\n+(define_insn \"*slt_di_mips16\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=t,t\")\n \t(lt:DI (match_operand:DI 1 \"register_operand\" \"d,d\")\n \t       (match_operand:DI 2 \"arith_operand\" \"d,I\")))]\n   \"TARGET_64BIT && TARGET_MIPS16\"\n   \"slt\\t%1,%2\"\n-  [(set_attr \"type\"\t\"slt\")\n-   (set_attr \"mode\"\t\"DI\")\n+  [(set_attr \"type\" \"slt\")\n+   (set_attr \"mode\" \"DI\")\n    (set_attr_alternative \"length\"\n \t\t[(const_int 4)\n \t\t (if_then_else (match_operand:VOID 2 \"m16_uimm8_1\")\n@@ -6224,56 +6224,56 @@ dsrl\\t%3,%3,1\\n\\\n   DONE;\n })\n \n-(define_insn \"sle_si_const\"\n+(define_insn \"*sle_si\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n \t(le:SI (match_operand:SI 1 \"register_operand\" \"d\")\n \t       (match_operand:SI 2 \"small_int\" \"I\")))]\n   \"!TARGET_MIPS16 && INTVAL (operands[2]) < 32767\"\n {\n-  operands[2] = GEN_INT (INTVAL (operands[2])+1);\n+  operands[2] = GEN_INT (INTVAL (operands[2]) + 1);\n   return \"slt\\t%0,%1,%2\";\n }\n-  [(set_attr \"type\"\t\"slt\")\n-   (set_attr \"mode\"\t\"SI\")])\n+  [(set_attr \"type\" \"slt\")\n+   (set_attr \"mode\" \"SI\")])\n \n-(define_insn \"\"\n+(define_insn \"*sle_si_mips16\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=t\")\n \t(le:SI (match_operand:SI 1 \"register_operand\" \"d\")\n \t       (match_operand:SI 2 \"small_int\" \"I\")))]\n   \"TARGET_MIPS16 && INTVAL (operands[2]) < 32767\"\n {\n-  operands[2] = GEN_INT (INTVAL (operands[2])+1);\n+  operands[2] = GEN_INT (INTVAL (operands[2]) + 1);\n   return \"slt\\t%1,%2\";\n }\n-  [(set_attr \"type\"\t\"slt\")\n-   (set_attr \"mode\"\t\"SI\")\n+  [(set_attr \"type\" \"slt\")\n+   (set_attr \"mode\" \"SI\")\n    (set (attr \"length\") (if_then_else (match_operand:VOID 2 \"m16_uimm8_m1_1\")\n \t\t\t\t      (const_int 4)\n \t\t\t\t      (const_int 8)))])\n \n-(define_insn \"sle_di_const\"\n+(define_insn \"*sle_di\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n \t(le:DI (match_operand:DI 1 \"register_operand\" \"d\")\n \t       (match_operand:DI 2 \"small_int\" \"I\")))]\n   \"TARGET_64BIT && !TARGET_MIPS16 && INTVAL (operands[2]) < 32767\"\n {\n-  operands[2] = GEN_INT (INTVAL (operands[2])+1);\n+  operands[2] = GEN_INT (INTVAL (operands[2]) + 1);\n   return \"slt\\t%0,%1,%2\";\n }\n-  [(set_attr \"type\"\t\"slt\")\n-   (set_attr \"mode\"\t\"DI\")])\n+  [(set_attr \"type\" \"slt\")\n+   (set_attr \"mode\" \"DI\")])\n \n-(define_insn \"\"\n+(define_insn \"*sle_di_mips16\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=t\")\n \t(le:DI (match_operand:DI 1 \"register_operand\" \"d\")\n \t       (match_operand:DI 2 \"small_int\" \"I\")))]\n   \"TARGET_64BIT && TARGET_MIPS16 && INTVAL (operands[2]) < 32767\"\n {\n-  operands[2] = GEN_INT (INTVAL (operands[2])+1);\n+  operands[2] = GEN_INT (INTVAL (operands[2]) + 1);\n   return \"slt\\t%1,%2\";\n }\n-  [(set_attr \"type\"\t\"slt\")\n-   (set_attr \"mode\"\t\"DI\")\n+  [(set_attr \"type\" \"slt\")\n+   (set_attr \"mode\" \"DI\")\n    (set (attr \"length\") (if_then_else (match_operand:VOID 2 \"m16_uimm8_m1_1\")\n \t\t\t\t      (const_int 4)\n \t\t\t\t      (const_int 8)))])\n@@ -6291,41 +6291,41 @@ dsrl\\t%3,%3,1\\n\\\n   DONE;\n })\n \n-(define_insn \"sgtu_si\"\n+(define_insn \"*sgtu_si\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n \t(gtu:SI (match_operand:SI 1 \"register_operand\" \"d\")\n \t\t(match_operand:SI 2 \"reg_or_0_operand\" \"dJ\")))]\n   \"!TARGET_MIPS16\"\n   \"sltu\\t%0,%z2,%1\"\n-  [(set_attr \"type\"\t\"slt\")\n-   (set_attr \"mode\"\t\"SI\")])\n+  [(set_attr \"type\" \"slt\")\n+   (set_attr \"mode\" \"SI\")])\n \n-(define_insn \"\"\n+(define_insn \"*sgtu_si_mips16\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=t\")\n \t(gtu:SI (match_operand:SI 1 \"register_operand\" \"d\")\n \t\t(match_operand:SI 2 \"register_operand\" \"d\")))]\n   \"TARGET_MIPS16\"\n   \"sltu\\t%2,%1\"\n-  [(set_attr \"type\"\t\"slt\")\n-   (set_attr \"mode\"\t\"SI\")])\n+  [(set_attr \"type\" \"slt\")\n+   (set_attr \"mode\" \"SI\")])\n \n-(define_insn \"sgtu_di\"\n+(define_insn \"*sgtu_di\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n \t(gtu:DI (match_operand:DI 1 \"register_operand\" \"d\")\n \t\t(match_operand:DI 2 \"reg_or_0_operand\" \"dJ\")))]\n   \"TARGET_64BIT && !TARGET_MIPS16\"\n   \"sltu\\t%0,%z2,%1\"\n-  [(set_attr \"type\"\t\"slt\")\n-   (set_attr \"mode\"\t\"DI\")])\n+  [(set_attr \"type\" \"slt\")\n+   (set_attr \"mode\" \"DI\")])\n \n-(define_insn \"\"\n+(define_insn \"*sgtu_di_mips16\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=t\")\n \t(gtu:DI (match_operand:DI 1 \"register_operand\" \"d\")\n \t\t(match_operand:DI 2 \"register_operand\" \"d\")))]\n   \"TARGET_64BIT && TARGET_MIPS16\"\n   \"sltu\\t%2,%1\"\n-  [(set_attr \"type\"\t\"slt\")\n-   (set_attr \"mode\"\t\"DI\")])\n+  [(set_attr \"type\" \"slt\")\n+   (set_attr \"mode\" \"DI\")])\n \n (define_expand \"sgeu\"\n   [(set (match_operand:SI 0 \"register_operand\")\n@@ -6353,46 +6353,46 @@ dsrl\\t%3,%3,1\\n\\\n   DONE;\n })\n \n-(define_insn \"sltu_si\"\n+(define_insn \"*sltu_si\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n \t(ltu:SI (match_operand:SI 1 \"register_operand\" \"d\")\n \t\t(match_operand:SI 2 \"arith_operand\" \"dI\")))]\n   \"!TARGET_MIPS16\"\n   \"sltu\\t%0,%1,%2\"\n-  [(set_attr \"type\"\t\"slt\")\n-   (set_attr \"mode\"\t\"SI\")])\n+  [(set_attr \"type\" \"slt\")\n+   (set_attr \"mode\" \"SI\")])\n \n-(define_insn \"\"\n+(define_insn \"*sltu_si_mips16\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=t,t\")\n \t(ltu:SI (match_operand:SI 1 \"register_operand\" \"d,d\")\n \t\t(match_operand:SI 2 \"arith_operand\" \"d,I\")))]\n   \"TARGET_MIPS16\"\n   \"sltu\\t%1,%2\"\n-  [(set_attr \"type\"\t\"slt\")\n-   (set_attr \"mode\"\t\"SI\")\n+  [(set_attr \"type\" \"slt\")\n+   (set_attr \"mode\" \"SI\")\n    (set_attr_alternative \"length\"\n \t\t[(const_int 4)\n \t\t (if_then_else (match_operand:VOID 2 \"m16_uimm8_1\")\n \t\t\t       (const_int 4)\n \t\t\t       (const_int 8))])])\n \n-(define_insn \"sltu_di\"\n+(define_insn \"*sltu_di\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n \t(ltu:DI (match_operand:DI 1 \"register_operand\" \"d\")\n \t\t(match_operand:DI 2 \"arith_operand\" \"dI\")))]\n   \"TARGET_64BIT && !TARGET_MIPS16\"\n   \"sltu\\t%0,%1,%2\"\n-  [(set_attr \"type\"\t\"slt\")\n-   (set_attr \"mode\"\t\"DI\")])\n+  [(set_attr \"type\" \"slt\")\n+   (set_attr \"mode\" \"DI\")])\n \n-(define_insn \"\"\n+(define_insn \"*sltu_di_mips16\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=t,t\")\n \t(ltu:DI (match_operand:DI 1 \"register_operand\" \"d,d\")\n \t\t(match_operand:DI 2 \"arith_operand\" \"d,I\")))]\n   \"TARGET_64BIT && TARGET_MIPS16\"\n   \"sltu\\t%1,%2\"\n-  [(set_attr \"type\"\t\"slt\")\n-   (set_attr \"mode\"\t\"DI\")\n+  [(set_attr \"type\" \"slt\")\n+   (set_attr \"mode\" \"DI\")\n    (set_attr_alternative \"length\"\n \t\t[(const_int 4)\n \t\t (if_then_else (match_operand:VOID 2 \"m16_uimm8_1\")\n@@ -6412,7 +6412,7 @@ dsrl\\t%3,%3,1\\n\\\n   DONE;\n })\n \n-(define_insn \"sleu_si_const\"\n+(define_insn \"*sleu_si\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n \t(leu:SI (match_operand:SI 1 \"register_operand\" \"d\")\n \t\t(match_operand:SI 2 \"small_int\" \"I\")))]\n@@ -6421,25 +6421,25 @@ dsrl\\t%3,%3,1\\n\\\n   operands[2] = GEN_INT (INTVAL (operands[2]) + 1);\n   return \"sltu\\t%0,%1,%2\";\n }\n-  [(set_attr \"type\"\t\"slt\")\n-   (set_attr \"mode\"\t\"SI\")])\n+  [(set_attr \"type\" \"slt\")\n+   (set_attr \"mode\" \"SI\")])\n \n-(define_insn \"\"\n+(define_insn \"*sleu_si_mips16\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=t\")\n \t(leu:SI (match_operand:SI 1 \"register_operand\" \"d\")\n \t\t(match_operand:SI 2 \"small_int\" \"I\")))]\n   \"TARGET_MIPS16 && INTVAL (operands[2]) < 32767\"\n {\n-  operands[2] = GEN_INT (INTVAL (operands[2])+1);\n+  operands[2] = GEN_INT (INTVAL (operands[2]) + 1);\n   return \"sltu\\t%1,%2\";\n }\n-  [(set_attr \"type\"\t\"slt\")\n-   (set_attr \"mode\"\t\"SI\")\n+  [(set_attr \"type\" \"slt\")\n+   (set_attr \"mode\" \"SI\")\n    (set (attr \"length\") (if_then_else (match_operand:VOID 2 \"m16_uimm8_m1_1\")\n \t\t\t\t      (const_int 4)\n \t\t\t\t      (const_int 8)))])\n \n-(define_insn \"sleu_di_const\"\n+(define_insn \"*sleu_di\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n \t(leu:DI (match_operand:DI 1 \"register_operand\" \"d\")\n \t\t(match_operand:DI 2 \"small_int\" \"I\")))]\n@@ -6448,20 +6448,20 @@ dsrl\\t%3,%3,1\\n\\\n   operands[2] = GEN_INT (INTVAL (operands[2]) + 1);\n   return \"sltu\\t%0,%1,%2\";\n }\n-  [(set_attr \"type\"\t\"slt\")\n-   (set_attr \"mode\"\t\"DI\")])\n+  [(set_attr \"type\" \"slt\")\n+   (set_attr \"mode\" \"DI\")])\n \n-(define_insn \"\"\n+(define_insn \"*sleu_di_mips16\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=t\")\n \t(leu:DI (match_operand:DI 1 \"register_operand\" \"d\")\n \t\t(match_operand:DI 2 \"small_int\" \"I\")))]\n   \"TARGET_64BIT && TARGET_MIPS16 && INTVAL (operands[2]) < 32767\"\n {\n-  operands[2] = GEN_INT (INTVAL (operands[2])+1);\n+  operands[2] = GEN_INT (INTVAL (operands[2]) + 1);\n   return \"sltu\\t%1,%2\";\n }\n-  [(set_attr \"type\"\t\"slt\")\n-   (set_attr \"mode\"\t\"DI\")\n+  [(set_attr \"type\" \"slt\")\n+   (set_attr \"mode\" \"DI\")\n    (set (attr \"length\") (if_then_else (match_operand:VOID 2 \"m16_uimm8_m1_1\")\n \t\t\t\t      (const_int 4)\n \t\t\t\t      (const_int 8)))])"}]}