{"sha": "1809628fcff6f512206efd0ae03a3faccc4096f2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTgwOTYyOGZjZmY2ZjUxMjIwNmVmZDBhZTAzYTNmYWNjYzQwOTZmMg==", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2020-05-20T08:53:33Z"}, "committer": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2020-06-05T16:04:12Z"}, "message": "[OpenACC 'exit data'] Simplify 'GOMP_MAP_STRUCT' handling\n\n\tlibgomp/\n\t* oacc-mem.c (goacc_exit_data_internal) <GOMP_MAP_STRUCT>:\n\tSimplify.\n\nCo-Authored-By: Julian Brown <julian@codesourcery.com>", "tree": {"sha": "c2205aca21ac65bb85bad6604313108cbd728326", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c2205aca21ac65bb85bad6604313108cbd728326"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1809628fcff6f512206efd0ae03a3faccc4096f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1809628fcff6f512206efd0ae03a3faccc4096f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1809628fcff6f512206efd0ae03a3faccc4096f2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1809628fcff6f512206efd0ae03a3faccc4096f2/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9643f5bbe237764cbefc975e934d1281f47ee3c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9643f5bbe237764cbefc975e934d1281f47ee3c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9643f5bbe237764cbefc975e934d1281f47ee3c2"}], "stats": {"total": 83, "additions": 3, "deletions": 80}, "files": [{"sha": "1e3685a073da935d677369b7346966159900e936", "filename": "libgomp/oacc-mem.c", "status": "modified", "additions": 3, "deletions": 80, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1809628fcff6f512206efd0ae03a3faccc4096f2/libgomp%2Foacc-mem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1809628fcff6f512206efd0ae03a3faccc4096f2/libgomp%2Foacc-mem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Foacc-mem.c?ref=1809628fcff6f512206efd0ae03a3faccc4096f2", "patch": "@@ -1180,86 +1180,9 @@ goacc_exit_data_internal (struct gomp_device_descr *acc_dev, size_t mapnum,\n \t  break;\n \n \tcase GOMP_MAP_STRUCT:\n-\t  {\n-\t    int elems = sizes[i];\n-\t    for (int j = 1; j <= elems; j++)\n-\t      {\n-\t\tassert (i + j < mapnum);\n-\n-\t\tkind = kinds[i + j] & 0xff;\n-\n-\t\tfinalize = false;\n-\t\tif (kind == GOMP_MAP_FORCE_FROM\n-\t\t    || kind == GOMP_MAP_DELETE\n-\t\t    || kind == GOMP_MAP_FORCE_DETACH)\n-\t\t  finalize = true;\n-\n-\t\tcopyfrom = false;\n-\t\tif (kind == GOMP_MAP_FROM\n-\t\t    || kind == GOMP_MAP_FORCE_FROM\n-\t\t    || kind == GOMP_MAP_ALWAYS_FROM)\n-\t\t  copyfrom = true;\n-\n-\t\tstruct splay_tree_key_s k;\n-\t\tk.host_start = (uintptr_t) hostaddrs[i + j];\n-\t\tk.host_end = k.host_start + sizes[i + j];\n-\t\tsplay_tree_key str;\n-\t\tstr = splay_tree_lookup (&acc_dev->mem_map, &k);\n-\t\tif (str)\n-\t\t  {\n-\t\t    if (finalize)\n-\t\t      {\n-\t\t\tif (str->refcount != REFCOUNT_INFINITY)\n-\t\t\t  str->refcount -= str->virtual_refcount;\n-\t\t\tstr->virtual_refcount = 0;\n-\t\t      }\n-\t\t    if (str->virtual_refcount > 0)\n-\t\t      {\n-\t\t\tif (str->refcount != REFCOUNT_INFINITY)\n-\t\t\t  str->refcount--;\n-\t\t\tstr->virtual_refcount--;\n-\t\t      }\n-\t\t    else if (str->refcount > 0\n-\t\t\t     && str->refcount != REFCOUNT_INFINITY)\n-\t\t      str->refcount--;\n-\n-\t\t    if (copyfrom\n-\t\t\t&& (kind != GOMP_MAP_FROM || str->refcount == 0))\n-\t\t      gomp_copy_dev2host (acc_dev, aq, (void *) k.host_start,\n-\t\t\t\t\t  (void *) (str->tgt->tgt_start\n-\t\t\t\t\t\t    + str->tgt_offset\n-\t\t\t\t\t\t    + k.host_start\n-\t\t\t\t\t\t    - str->host_start),\n-\t\t\t\t\t  k.host_end - k.host_start);\n-\n-\t\t    if (str->refcount == 0)\n-\t\t      {\n-\t\t\tif (aq)\n-\t\t\t  /* TODO We can't do the 'is_tgt_unmapped' checking --\n-\t\t\t     see the 'gomp_unref_tgt' comment in\n-\t\t\t     <http://mid.mail-archive.com/878snl36eu.fsf@euler.schwinge.homeip.net>;\n-\t\t\t     PR92881.  */\n-\t\t\t  gomp_remove_var_async (acc_dev, str, aq);\n-\t\t\telse\n-\t\t\t  {\n-\t\t\t    size_t num_mappings = 0;\n-\t\t\t    /* If the target_mem_desc represents a single data\n-\t\t\t       mapping, we can check that it is freed when this\n-\t\t\t       splay tree key's refcount reaches zero.\n-\t\t\t       Otherwise (e.g. for a 'GOMP_MAP_STRUCT' mapping\n-\t\t\t       with multiple members), fall back to skipping\n-\t\t\t       the test.  */\n-\t\t\t    for (size_t l_i = 0; l_i < str->tgt->list_count; ++l_i)\n-\t\t\t      if (str->tgt->list[l_i].key)\n-\t\t\t\t++num_mappings;\n-\t\t\t    bool is_tgt_unmapped = gomp_remove_var (acc_dev, str);\n-\t\t\t    assert (is_tgt_unmapped || num_mappings > 1);\n-\t\t\t  }\n-\t\t      }\n-\t\t  }\n-\t      }\n-\t    i += elems;\n-\t  }\n+\t  /* Skip the 'GOMP_MAP_STRUCT' itself, and use the regular processing\n+\t     for all its entries.  TODO: don't generate these no-op\n+\t     'GOMP_MAP_STRUCT's.  */\n \t  break;\n \n \tdefault:"}]}