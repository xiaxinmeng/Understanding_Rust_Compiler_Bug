{"sha": "b9599e46750a224af6a6ed88da8e2abb5acee9ee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjk1OTllNDY3NTBhMjI0YWY2YTZlZDg4ZGE4ZTJhYmI1YWNlZTllZQ==", "commit": {"author": {"name": "Franz Sirl", "email": "Franz.Sirl-kernel@lauterbach.com", "date": "2003-06-18T06:19:01Z"}, "committer": {"name": "Franz Sirl", "email": "sirl@gcc.gnu.org", "date": "2003-06-18T06:19:01Z"}, "message": "rs6000.c (init_cumulative_args): Add and handle LIBCALL argument.\n\n2003-06-18  Franz Sirl  <Franz.Sirl-kernel@lauterbach.com>\n\n\t* config/rs6000/rs6000.c (init_cumulative_args): Add and handle LIBCALL\n\targument.\n\t(function_arg): Handle CALL_LIBCALL flag.\n\t* config/rs6000/rs6000-protos.h (init_cumulative_args): Update\n\tprototype.\n\t* config/rs6000/rs6000.h (CALL_LIBCALL): New macro.\n\t(INIT_CUMULATIVE_LIBCALL_ARGS): New macro.\n\t(INIT_CUMULATIVE_ARGS): Add LIBCALL argument.\n\t(INIT_CUMULATIVE_INCOMING_ARGS): Likewise.\n\nFrom-SVN: r68139", "tree": {"sha": "18888b6b819a10ee8067654168736653e4f6127c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/18888b6b819a10ee8067654168736653e4f6127c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b9599e46750a224af6a6ed88da8e2abb5acee9ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9599e46750a224af6a6ed88da8e2abb5acee9ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9599e46750a224af6a6ed88da8e2abb5acee9ee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9599e46750a224af6a6ed88da8e2abb5acee9ee/comments", "author": {"login": "jinkama-san", "id": 1462162, "node_id": "MDQ6VXNlcjE0NjIxNjI=", "avatar_url": "https://avatars.githubusercontent.com/u/1462162?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jinkama-san", "html_url": "https://github.com/jinkama-san", "followers_url": "https://api.github.com/users/jinkama-san/followers", "following_url": "https://api.github.com/users/jinkama-san/following{/other_user}", "gists_url": "https://api.github.com/users/jinkama-san/gists{/gist_id}", "starred_url": "https://api.github.com/users/jinkama-san/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jinkama-san/subscriptions", "organizations_url": "https://api.github.com/users/jinkama-san/orgs", "repos_url": "https://api.github.com/users/jinkama-san/repos", "events_url": "https://api.github.com/users/jinkama-san/events{/privacy}", "received_events_url": "https://api.github.com/users/jinkama-san/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "903caebf4947dd73a50f7e8405c4290f1c626081", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/903caebf4947dd73a50f7e8405c4290f1c626081", "html_url": "https://github.com/Rust-GCC/gccrs/commit/903caebf4947dd73a50f7e8405c4290f1c626081"}], "stats": {"total": 34, "additions": 27, "deletions": 7}, "files": [{"sha": "aa29d39dc57005ba963e58acb69e77f66ce73cc3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9599e46750a224af6a6ed88da8e2abb5acee9ee/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9599e46750a224af6a6ed88da8e2abb5acee9ee/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b9599e46750a224af6a6ed88da8e2abb5acee9ee", "patch": "@@ -1,3 +1,15 @@\n+2003-06-18  Franz Sirl  <Franz.Sirl-kernel@lauterbach.com>\n+\n+\t* config/rs6000/rs6000.c (init_cumulative_args): Add and handle LIBCALL\n+\targument.\n+\t(function_arg): Handle CALL_LIBCALL flag.\n+\t* config/rs6000/rs6000-protos.h (init_cumulative_args): Update\n+\tprototype.\n+\t* config/rs6000/rs6000.h (CALL_LIBCALL): New macro.\n+\t(INIT_CUMULATIVE_LIBCALL_ARGS): New macro.\n+\t(INIT_CUMULATIVE_ARGS): Add LIBCALL argument.\n+\t(INIT_CUMULATIVE_INCOMING_ARGS): Likewise.\n+\n 2003-06-18  Neil Booth  <neil@daikokuya.co.uk>\n \n \t* Makefile.in: Update."}, {"sha": "9c5df76c30dc599afb8d5f2fe134edbadfd5abb2", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9599e46750a224af6a6ed88da8e2abb5acee9ee/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9599e46750a224af6a6ed88da8e2abb5acee9ee/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=b9599e46750a224af6a6ed88da8e2abb5acee9ee", "patch": "@@ -27,7 +27,7 @@\n #ifdef RTX_CODE\n \n #ifdef TREE_CODE\n-extern void init_cumulative_args PARAMS ((CUMULATIVE_ARGS *, tree, rtx, int));\n+extern void init_cumulative_args PARAMS ((CUMULATIVE_ARGS *, tree, rtx, int, int));\n extern void rs6000_va_start PARAMS ((tree, rtx));\n #endif /* TREE_CODE */\n "}, {"sha": "bc8a5cadc5b648037c82429fa58106ee4df2ab28", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9599e46750a224af6a6ed88da8e2abb5acee9ee/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9599e46750a224af6a6ed88da8e2abb5acee9ee/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=b9599e46750a224af6a6ed88da8e2abb5acee9ee", "patch": "@@ -3639,11 +3639,12 @@ rs6000_emit_move (dest, source, mode)\n    so we never return a PARALLEL.  */\n \n void\n-init_cumulative_args (cum, fntype, libname, incoming)\n+init_cumulative_args (cum, fntype, libname, incoming, libcall)\n      CUMULATIVE_ARGS *cum;\n      tree fntype;\n      rtx libname ATTRIBUTE_UNUSED;\n      int incoming;\n+     int libcall;\n {\n   static CUMULATIVE_ARGS zero_cumulative;\n \n@@ -3652,7 +3653,7 @@ init_cumulative_args (cum, fntype, libname, incoming)\n   cum->fregno = FP_ARG_MIN_REG;\n   cum->vregno = ALTIVEC_ARG_MIN_REG;\n   cum->prototype = (fntype && TYPE_ARG_TYPES (fntype));\n-  cum->call_cookie = CALL_NORMAL;\n+  cum->call_cookie = libcall ? CALL_LIBCALL : CALL_NORMAL;\n   cum->sysv_gregno = GP_ARG_MIN_REG;\n   cum->stdarg = fntype\n     && (TYPE_ARG_TYPES (fntype) != 0\n@@ -3901,7 +3902,7 @@ rs6000_spe_function_arg (CUMULATIVE_ARGS *cum, enum machine_mode mode, tree type\n \n    If this is floating-point and no prototype is specified, we use\n    both an FP and integer register (or possibly FP reg and stack).  Library\n-   functions (when TYPE is zero) always have the proper types for args,\n+   functions (when CALL_LIBCALL is set) always have the proper types for args,\n    so we can pass the FP value just in one register.  emit_library_function\n    doesn't support PARALLEL anyway.  */\n \n@@ -3922,7 +3923,8 @@ function_arg (cum, mode, type, named)\n     {\n       if (abi == ABI_V4\n \t  && cum->nargs_prototype < 0\n-\t  && type && (cum->prototype || TARGET_NO_PROTOTYPE))\n+\t  && (cum->call_cookie & CALL_LIBCALL) == 0\n+\t  && (cum->prototype || TARGET_NO_PROTOTYPE))\n \t{\n \t  /* For the SPE, we need to crxor CR6 always.  */\n \t  if (TARGET_SPE_ABI)"}, {"sha": "8d63a4fad3ff6d7c928c0793c5400ab5073a0212", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9599e46750a224af6a6ed88da8e2abb5acee9ee/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9599e46750a224af6a6ed88da8e2abb5acee9ee/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=b9599e46750a224af6a6ed88da8e2abb5acee9ee", "patch": "@@ -1665,6 +1665,7 @@ typedef struct rs6000_stack {\n #define CALL_V4_CLEAR_FP_ARGS\t0x00000002\t/* V.4, no FP args passed */\n #define CALL_V4_SET_FP_ARGS\t0x00000004\t/* V.4, FP args were passed */\n #define CALL_LONG\t\t0x00000008\t/* always call indirect */\n+#define CALL_LIBCALL\t\t0x00000010\t/* libcall */\n \n /* 1 if N is a possible register number for a function value\n    as seen by the caller.\n@@ -1743,13 +1744,18 @@ typedef struct rs6000_args\n    For a library call, FNTYPE is 0.  */\n \n #define INIT_CUMULATIVE_ARGS(CUM,FNTYPE,LIBNAME,INDIRECT) \\\n-  init_cumulative_args (&CUM, FNTYPE, LIBNAME, FALSE)\n+  init_cumulative_args (&CUM, FNTYPE, LIBNAME, FALSE, FALSE)\n \n /* Similar, but when scanning the definition of a procedure.  We always\n    set NARGS_PROTOTYPE large so we never return an EXPR_LIST.  */\n \n #define INIT_CUMULATIVE_INCOMING_ARGS(CUM,FNTYPE,LIBNAME) \\\n-  init_cumulative_args (&CUM, FNTYPE, LIBNAME, TRUE)\n+  init_cumulative_args (&CUM, FNTYPE, LIBNAME, TRUE, FALSE)\n+\n+/* Like INIT_CUMULATIVE_ARGS' but only used for outgoing libcalls.  */\n+\n+#define INIT_CUMULATIVE_LIBCALL_ARGS(CUM, MODE, LIBNAME) \\\n+  init_cumulative_args (&CUM, NULL_TREE, LIBNAME, FALSE, TRUE)\n \n /* Update the data in CUM to advance over an argument\n    of mode MODE and data type TYPE."}]}