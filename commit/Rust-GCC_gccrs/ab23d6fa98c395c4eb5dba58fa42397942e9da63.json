{"sha": "ab23d6fa98c395c4eb5dba58fa42397942e9da63", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWIyM2Q2ZmE5OGMzOTVjNGViNWRiYTU4ZmE0MjM5Nzk0MmU5ZGE2Mw==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gcc.gnu.org", "date": "2019-02-10T14:27:17Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gcc.gnu.org", "date": "2019-02-10T14:27:17Z"}, "message": "libphobos: Merge phobos upstream 6c9fb28b0\n\nFixes a thread deadlock that occurs in the test runner if libcurl is\nmissing.\n\nLibrary fix for https://gcc.gnu.org/PR88654\n\nReviewed-on: https://github.com/dlang/phobos/pull/6824\n\nFrom-SVN: r268746", "tree": {"sha": "b10f91edff542464fc2e9071499eb9180c2f20ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b10f91edff542464fc2e9071499eb9180c2f20ce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ab23d6fa98c395c4eb5dba58fa42397942e9da63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab23d6fa98c395c4eb5dba58fa42397942e9da63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab23d6fa98c395c4eb5dba58fa42397942e9da63", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab23d6fa98c395c4eb5dba58fa42397942e9da63/comments", "author": null, "committer": null, "parents": [{"sha": "2a484d14535e5a3bc4791a2faf4453c2f14fcfad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a484d14535e5a3bc4791a2faf4453c2f14fcfad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a484d14535e5a3bc4791a2faf4453c2f14fcfad"}], "stats": {"total": 35, "additions": 29, "deletions": 6}, "files": [{"sha": "aef240e0722db29f96f84f35838d2991e6acfcd2", "filename": "libphobos/src/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab23d6fa98c395c4eb5dba58fa42397942e9da63/libphobos%2Fsrc%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab23d6fa98c395c4eb5dba58fa42397942e9da63/libphobos%2Fsrc%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fsrc%2FMERGE?ref=ab23d6fa98c395c4eb5dba58fa42397942e9da63", "patch": "@@ -1,4 +1,4 @@\n-d4933a90b1e8446c04d64cd044658f2b33250bd3\n+6c9fb28b0f8813d41798202a9d19c6b37ba5da5f\n \n The first line of this file holds the git revision number of the last\n merge done from the dlang/phobos repository."}, {"sha": "e3ce527c30314d1dd0d4d2717bed8107348943ea", "filename": "libphobos/src/std/net/curl.d", "status": "modified", "additions": 28, "deletions": 5, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab23d6fa98c395c4eb5dba58fa42397942e9da63/libphobos%2Fsrc%2Fstd%2Fnet%2Fcurl.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab23d6fa98c395c4eb5dba58fa42397942e9da63/libphobos%2Fsrc%2Fstd%2Fnet%2Fcurl.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fsrc%2Fstd%2Fnet%2Fcurl.d?ref=ab23d6fa98c395c4eb5dba58fa42397942e9da63", "patch": "@@ -178,7 +178,7 @@ version (unittest)\n     import std.range;\n     import std.stdio;\n \n-    import std.socket : Address, INADDR_LOOPBACK, Socket, TcpSocket;\n+    import std.socket : Address, INADDR_LOOPBACK, Socket, SocketShutdown, TcpSocket;\n \n     private struct TestServer\n     {\n@@ -192,6 +192,7 @@ version (unittest)\n     private:\n         string _addr;\n         Tid tid;\n+        TcpSocket sock;\n \n         static void loop(shared TcpSocket listener)\n         {\n@@ -215,20 +216,34 @@ version (unittest)\n \n     private TestServer startServer()\n     {\n+        tlsInit = true;\n         auto sock = new TcpSocket;\n         sock.bind(new InternetAddress(INADDR_LOOPBACK, InternetAddress.PORT_ANY));\n         sock.listen(1);\n         auto addr = sock.localAddress.toString();\n         auto tid = spawn(&TestServer.loop, cast(shared) sock);\n-        return TestServer(addr, tid);\n+        return TestServer(addr, tid, sock);\n     }\n \n+    __gshared TestServer server;\n+    bool tlsInit;\n+\n     private ref TestServer testServer()\n     {\n-        __gshared TestServer server;\n         return initOnce!server(startServer());\n     }\n \n+    static ~this()\n+    {\n+        // terminate server from a thread local dtor of the thread that started it,\n+        //  because thread_joinall is called before shared module dtors\n+        if (tlsInit && server.sock)\n+        {\n+            server.sock.shutdown(SocketShutdown.RECEIVE);\n+            server.sock.close();\n+        }\n+    }\n+\n     private struct Request(T)\n     {\n         string hdrs;\n@@ -429,7 +444,11 @@ if (isCurlConn!Conn)\n             s.send(httpOK(\"Hello world\"));\n         });\n         auto fn = std.file.deleteme;\n-        scope (exit) std.file.remove(fn);\n+        scope (exit)\n+        {\n+            if (std.file.exists(fn))\n+                std.file.remove(fn);\n+        }\n         download(host, fn);\n         assert(std.file.readText(fn) == \"Hello world\");\n     }\n@@ -491,7 +510,11 @@ if (isCurlConn!Conn)\n     foreach (host; [testServer.addr, \"http://\"~testServer.addr])\n     {\n         auto fn = std.file.deleteme;\n-        scope (exit) std.file.remove(fn);\n+        scope (exit)\n+        {\n+            if (std.file.exists(fn))\n+                std.file.remove(fn);\n+        }\n         std.file.write(fn, \"upload data\\n\");\n         testServer.handle((s) {\n             auto req = s.recvReq;"}]}