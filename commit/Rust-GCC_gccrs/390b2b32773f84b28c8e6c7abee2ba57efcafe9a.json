{"sha": "390b2b32773f84b28c8e6c7abee2ba57efcafe9a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzkwYjJiMzI3NzNmODRiMjhjOGU2YzdhYmVlMmJhNTdlZmNhZmU5YQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2010-06-07T19:51:19Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2010-06-07T19:51:19Z"}, "message": "i386.md (*add<mode>_1): Remove alternative 2.\n\n\t* config/i386/i386.md (*add<mode>_1): Remove alternative 2.\n\t<TYPE_LEA>: Split instruction.\n\t<default>: Remove alternative 2 handling.\n\t(*addsi_1_zext) <TYPE_LEA>: Split instruction.\n\t(add lea splitter): Generate SImode lea for mode sizes <= SImode.\n\t(add_zext lea splitter): Use ix86_lea_for_add_ok in insn predicate.\n\n\t(*movsi_1) <TYPE_LEA>: Use %a modifier to output operand 1.\n\t(ashift_zext lea splitter): Use DImode for multiplication.\n\n\t* config/i386/i386.c (ix86_expand_epilogue): Do not use ix86_gen_add\n\tto generate addition.\n\nFrom-SVN: r160394", "tree": {"sha": "eb38fde974a138516e6c5417c7d9d0b0d7897d59", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eb38fde974a138516e6c5417c7d9d0b0d7897d59"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/390b2b32773f84b28c8e6c7abee2ba57efcafe9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/390b2b32773f84b28c8e6c7abee2ba57efcafe9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/390b2b32773f84b28c8e6c7abee2ba57efcafe9a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/390b2b32773f84b28c8e6c7abee2ba57efcafe9a/comments", "author": null, "committer": null, "parents": [{"sha": "e7105ec5056a7418c45a97763b630f5b46ca3db0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7105ec5056a7418c45a97763b630f5b46ca3db0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7105ec5056a7418c45a97763b630f5b46ca3db0"}], "stats": {"total": 189, "additions": 99, "deletions": 90}, "files": [{"sha": "181781e3fdbfbff5350d1d2f189932dbd3fcfc3e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 9, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/390b2b32773f84b28c8e6c7abee2ba57efcafe9a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/390b2b32773f84b28c8e6c7abee2ba57efcafe9a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=390b2b32773f84b28c8e6c7abee2ba57efcafe9a", "patch": "@@ -1,3 +1,18 @@\n+2010-06-07  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (*add<mode>_1): Remove alternative 2.\n+\t<TYPE_LEA>: Split instruction.\n+\t<default>: Remove alternative 2 handling.\n+\t(*addsi_1_zext) <TYPE_LEA>: Split instruction.\n+\t(add lea splitter): Generate SImode lea for mode sizes <= SImode.\n+\t(add_zext lea splitter): Use ix86_lea_for_add_ok in insn predicate.\n+\n+\t(*movsi_1) <TYPE_LEA>: Use %a modifier to output operand 1.\n+\t(ashift_zext lea splitter): Use DImode for multiplication.\n+\n+\t* config/i386/i386.c (ix86_expand_epilogue): Do not use ix86_gen_add\n+\tto generate addition.\n+\n 2010-06-07  Joseph Myers  <joseph@codesourcery.com>\n \n \t* common.opt (fira-verbose): Use Var.\n@@ -9,8 +24,7 @@\n \tflag_detailed_statistics, flag_remove_unreachable_functions):\n \tRemove.\n \t* toplev.c (flag_detailed_statistics, flag_signed_char,\n-\tflag_short_enums, flag_pcc_struct_return, flag_ira_verbose):\n-\tRemove.\n+\tflag_short_enums, flag_pcc_struct_return, flag_ira_verbose): Remove.\n \t(DEFAULT_PCC_STRUCT_RETURN): Move definition to defaults.h.\n \t* toplev.h (flag_crossjumping, flag_if_conversion,\n \tflag_if_conversion2, flag_keep_static_consts, flag_peel_loops,\n@@ -95,7 +109,7 @@\n \tand above and defer till target is known.\n \t(optimization_options): Turn on zee pass if TARGET_64BIT is set and\n \tturn off otherwise.\n-\t\n+\n 2010-05-25  Jan Hubicka  <jh@suse.cz>\n \n \t* df-core.c (df_set_blocks): Use bitmap_head instead of bitmap.\n@@ -136,7 +150,7 @@\n 2010-06-06  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n \n \tPR c/20000\n-        * c-decl.c (grokdeclarator): Delete warning.\n+\t* c-decl.c (grokdeclarator): Delete warning.\n \n 2010-06-06  Eric Botcazou  <ebotcazou@adacore.com>\n \n@@ -327,8 +341,7 @@\n 2010-06-04  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR boostrap/44421\n-\t* df-problems.c (df_lr_bb_local_compute): Updated for embedded\n-\tbitmaps.\n+\t* df-problems.c (df_lr_bb_local_compute): Updated for embedded bitmaps.\n \t(df_byte_lr_bb_local_compute): Likewise.\n \n 2010-06-03  Jason Merrill  <jason@redhat.com>\n@@ -358,11 +371,11 @@\n \t(*addqi_1_lea) <TYPE_INCDEC, default>: Ditto.\n \t(*add<mode>_2) <TYPE_INCDEC>: Remove assert that operand 0\n \tand operand 1 are equal.\n-\t<default>: Ditto. Remove ??? comment.\n+\t<default>: Ditto.  Remove ??? comment.\n \t(*add<mode>_3) <TYPE_INCDEC>: Remove assert that operand 0\n \tand operand 1 are equal.\n-\t<default>: Ditto. Remove ??? comment.\n-\t(*adddi_4) <default>:  Remove assert that operand 0 and operand 1\n+\t<default>: Ditto.  Remove ??? comment.\n+\t(*adddi_4) <default>: Remove assert that operand 0 and operand 1\n \tare equal.\n \t(*add<mode>_4) <default>: Ditto.\n \t(*add<mode>_5) <TYPE_INCDEC, default>: Ditto."}, {"sha": "df18fdbd7eb4b9b6b8a60c264cd60ff58462c1ae", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/390b2b32773f84b28c8e6c7abee2ba57efcafe9a/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/390b2b32773f84b28c8e6c7abee2ba57efcafe9a/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=390b2b32773f84b28c8e6c7abee2ba57efcafe9a", "patch": "@@ -9356,10 +9356,11 @@ ix86_expand_epilogue (int style)\n       if (!call_used_regs[REGNO (crtl->drap_reg)])\n \tparam_ptr_offset += UNITS_PER_WORD;\n \n-      insn = emit_insn ((*ix86_gen_add3) (stack_pointer_rtx,\n-\t\t\t\t\t  crtl->drap_reg,\n-\t\t\t\t\t  GEN_INT (-param_ptr_offset)));\n-\n+      insn = emit_insn (gen_rtx_SET\n+\t\t\t(VOIDmode, stack_pointer_rtx,\n+\t\t\t gen_rtx_PLUS (Pmode,\n+\t\t\t\t       crtl->drap_reg,\n+\t\t\t\t       GEN_INT (-param_ptr_offset))));\n       ix86_cfa_state->reg = stack_pointer_rtx;\n       ix86_cfa_state->offset = param_ptr_offset;\n "}, {"sha": "f7972445cc348ff35ce7781dcab4827c86e7cdf1", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 66, "deletions": 71, "changes": 137, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/390b2b32773f84b28c8e6c7abee2ba57efcafe9a/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/390b2b32773f84b28c8e6c7abee2ba57efcafe9a/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=390b2b32773f84b28c8e6c7abee2ba57efcafe9a", "patch": "@@ -1710,7 +1710,7 @@\n       return \"movd\\t{%1, %0|%0, %1}\";\n \n     case TYPE_LEA:\n-      return \"lea{l}\\t{%1, %0|%0, %1}\";\n+      return \"lea{l}\\t{%a1, %0|%0, %a1}\";\n \n     default:\n       gcc_assert (!flag_pic || LEGITIMATE_PIC_OPERAND_P (operands[1]));\n@@ -6077,18 +6077,17 @@\n    (set_attr \"mode\" \"SI\")])\n \n (define_insn \"*add<mode>_1\"\n-  [(set (match_operand:SWI48 0 \"nonimmediate_operand\" \"=r,rm,r,r\")\n+  [(set (match_operand:SWI48 0 \"nonimmediate_operand\" \"=r,rm,r\")\n \t(plus:SWI48\n-\t  (match_operand:SWI48 1 \"nonimmediate_operand\" \"%0,0,r,r\")\n-\t  (match_operand:SWI48 2 \"<general_operand>\" \"<g>,r<i>,0,l<i>\")))\n+\t  (match_operand:SWI48 1 \"nonimmediate_operand\" \"%0,0,r\")\n+\t  (match_operand:SWI48 2 \"<general_operand>\" \"<g>,r<i>,l<i>\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"ix86_binary_operator_ok (PLUS, <MODE>mode, operands)\"\n {\n   switch (get_attr_type (insn))\n     {\n     case TYPE_LEA:\n-      operands[2] = SET_SRC (XVECEXP (PATTERN (insn), 0, 0));\n-      return \"lea{<imodesuffix>}\\t{%a2, %0|%0, %a2}\";\n+      return \"#\";\n \n     case TYPE_INCDEC:\n       gcc_assert (rtx_equal_p (operands[0], operands[1]));\n@@ -6101,10 +6100,6 @@\n \t}\n \n     default:\n-      /* Use add as much as possible to replace lea for AGU optimization. */\n-      if (which_alternative == 2 && TARGET_OPT_AGU)\n-        return \"add{<imodesuffix>}\\t{%1, %0|%0, %1}\";\n-        \n       gcc_assert (rtx_equal_p (operands[0], operands[1]));\n       if (x86_maybe_negate_const_int (&operands[2], <MODE>mode))\n         return \"sub{<imodesuffix>}\\t{%2, %0|%0, %2}\";\n@@ -6113,11 +6108,8 @@\n     }\n }\n   [(set (attr \"type\")\n-     (cond [(and (eq_attr \"alternative\" \"2\") \n-                 (eq (symbol_ref \"TARGET_OPT_AGU\") (const_int 0)))\n+     (cond [(eq_attr \"alternative\" \"2\") \n \t      (const_string \"lea\")\n-            (eq_attr \"alternative\" \"3\")\n-              (const_string \"lea\")\n \t    (match_operand:SWI48 2 \"incdec_operand\" \"\")\n \t      (const_string \"incdec\")\n \t   ]\n@@ -6146,8 +6138,7 @@\n   switch (get_attr_type (insn))\n     {\n     case TYPE_LEA:\n-      operands[2] = XEXP (SET_SRC (XVECEXP (PATTERN (insn), 0, 0)), 0);\n-      return \"lea{l}\\t{%a2, %k0|%k0, %a2}\";\n+      return \"#\";\n \n     case TYPE_INCDEC:\n       if (operands[2] == const1_rtx)\n@@ -6398,6 +6389,64 @@\n         (const_string \"none\")))\n    (set_attr \"mode\" \"QI\")])\n \n+;; Convert lea to the lea pattern to avoid flags dependency.\n+(define_split\n+  [(set (match_operand:DI 0 \"register_operand\" \"\")\n+\t(plus:DI (match_operand:DI 1 \"register_operand\" \"\")\n+\t\t (match_operand:DI 2 \"x86_64_nonmemory_operand\" \"\")))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"TARGET_64BIT && reload_completed \n+   && ix86_lea_for_add_ok (PLUS, insn, operands)\"\n+  [(set (match_dup 0)\n+\t(plus:DI (match_dup 1)\n+\t\t (match_dup 2)))]\n+  \"\")\n+\n+;; Convert lea to the lea pattern to avoid flags dependency.\n+(define_split\n+  [(set (match_operand 0 \"register_operand\" \"\")\n+\t(plus (match_operand 1 \"register_operand\" \"\")\n+              (match_operand 2 \"nonmemory_operand\" \"\")))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"reload_completed\n+   && ix86_lea_for_add_ok (PLUS, insn, operands)\n+   && GET_MODE_SIZE (GET_MODE (operands[0])) <= 4\"\n+  [(const_int 0)]\n+{\n+  rtx pat;\n+  enum machine_mode mode = GET_MODE (operands[0]);\n+\n+  if (GET_MODE_SIZE (mode) < 4)\n+    operands[0] = gen_lowpart (SImode, operands[0]);\n+  if (mode != Pmode)\n+    {\n+      operands[1] = gen_lowpart (Pmode, operands[1]);\n+      operands[2] = gen_lowpart (Pmode, operands[2]);\n+    }\n+\n+  pat = gen_rtx_PLUS (Pmode, operands[1], operands[2]);\n+  if (Pmode != SImode)\n+    pat = gen_rtx_SUBREG (SImode, pat, 0);\n+  emit_insn (gen_rtx_SET (VOIDmode, operands[0], pat));\n+  DONE;\n+})\n+\n+;; Convert lea to the lea pattern to avoid flags dependency.\n+(define_split\n+  [(set (match_operand:DI 0 \"register_operand\" \"\")\n+\t(zero_extend:DI\n+\t  (plus:SI (match_operand:SI 1 \"register_operand\" \"\")\n+\t\t   (match_operand:SI 2 \"nonmemory_operand\" \"\"))))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"TARGET_64BIT && reload_completed\n+   && ix86_lea_for_add_ok (PLUS, insn, operands)\"\n+  [(set (match_dup 0)\n+\t(zero_extend:DI (subreg:SI (plus:DI (match_dup 1) (match_dup 2)) 0)))]\n+{\n+  operands[1] = gen_lowpart (Pmode, operands[1]);\n+  operands[2] = gen_lowpart (Pmode, operands[2]);\n+})\n+\n (define_insn \"*add<mode>_2\"\n   [(set (reg FLAGS_REG)\n \t(compare\n@@ -6939,60 +6988,6 @@\n }\n   [(set_attr \"type\" \"lea\")\n    (set_attr \"mode\" \"SI\")])\n-\n-;; Convert lea to the lea pattern to avoid flags dependency.\n-(define_split\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t(plus:DI (match_operand:DI 1 \"register_operand\" \"\")\n-\t\t (match_operand:DI 2 \"x86_64_nonmemory_operand\" \"\")))\n-   (clobber (reg:CC FLAGS_REG))]\n-  \"TARGET_64BIT && reload_completed \n-   && ix86_lea_for_add_ok (PLUS, insn, operands)\"\n-  [(set (match_dup 0)\n-\t(plus:DI (match_dup 1)\n-\t\t (match_dup 2)))]\n-  \"\")\n-\n-;; Convert lea to the lea pattern to avoid flags dependency.\n-(define_split\n-  [(set (match_operand 0 \"register_operand\" \"\")\n-\t(plus (match_operand 1 \"register_operand\" \"\")\n-              (match_operand 2 \"nonmemory_operand\" \"\")))\n-   (clobber (reg:CC FLAGS_REG))]\n-  \"reload_completed && ix86_lea_for_add_ok (PLUS, insn, operands)\" \n-  [(const_int 0)]\n-{\n-  rtx pat;\n-  /* In -fPIC mode the constructs like (const (unspec [symbol_ref]))\n-     may confuse gen_lowpart.  */\n-  if (GET_MODE (operands[0]) != Pmode)\n-    {\n-      operands[1] = gen_lowpart (Pmode, operands[1]);\n-      operands[2] = gen_lowpart (Pmode, operands[2]);\n-    }\n-  operands[0] = gen_lowpart (SImode, operands[0]);\n-  pat = gen_rtx_PLUS (Pmode, operands[1], operands[2]);\n-  if (Pmode != SImode)\n-    pat = gen_rtx_SUBREG (SImode, pat, 0);\n-  emit_insn (gen_rtx_SET (VOIDmode, operands[0], pat));\n-  DONE;\n-})\n-\n-;; Convert lea to the lea pattern to avoid flags dependency.\n-(define_split\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t(zero_extend:DI\n-\t  (plus:SI (match_operand:SI 1 \"register_operand\" \"\")\n-\t\t   (match_operand:SI 2 \"nonmemory_operand\" \"\"))))\n-   (clobber (reg:CC FLAGS_REG))]\n-  \"TARGET_64BIT && reload_completed\n-   && true_regnum (operands[0]) != true_regnum (operands[1])\"\n-  [(set (match_dup 0)\n-\t(zero_extend:DI (subreg:SI (plus:DI (match_dup 1) (match_dup 2)) 0)))]\n-{\n-  operands[1] = gen_lowpart (Pmode, operands[1]);\n-  operands[2] = gen_lowpart (Pmode, operands[2]);\n-})\n \f\n ;; Subtract instructions\n \n@@ -9807,7 +9802,7 @@\n   \"TARGET_64BIT && reload_completed\n    && true_regnum (operands[0]) != true_regnum (operands[1])\"\n   [(set (match_dup 0)\n-\t(zero_extend:DI (subreg:SI (mult:SI (match_dup 1) (match_dup 2)) 0)))]\n+\t(zero_extend:DI (subreg:SI (mult:DI (match_dup 1) (match_dup 2)) 0)))]\n {\n   operands[1] = gen_lowpart (Pmode, operands[1]);\n   operands[2] = gen_int_mode (1 << INTVAL (operands[2]), Pmode);"}, {"sha": "fd6994a3c36e0f046e60c620f8d2f66f005efb48", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/390b2b32773f84b28c8e6c7abee2ba57efcafe9a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/390b2b32773f84b28c8e6c7abee2ba57efcafe9a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=390b2b32773f84b28c8e6c7abee2ba57efcafe9a", "patch": "@@ -44,11 +44,11 @@\n \tAdditional add dg-compile to avoid failure due\n \tmissing foo symbol.\n \n-        * gcc.dg/compound-literal-1.c: Fix for llp64.\n-        * gcc.dg/pr32370.c: Likewise.\n-        * gcc.dg/pr37561.c: Likewise.\n-        * gcc.dg/pr41340.c: Likewise.\n-        * gcc.dg/pr41551.c: Likewise.\n+\t* gcc.dg/compound-literal-1.c: Fix for llp64.\n+\t* gcc.dg/pr32370.c: Likewise.\n+\t* gcc.dg/pr37561.c: Likewise.\n+\t* gcc.dg/pr41340.c: Likewise.\n+\t* gcc.dg/pr41551.c: Likewise.\n \n 2010-05-25  Dodji Seketeli  <dodji@redhat.com>\n \n@@ -58,7 +58,7 @@\n 2010-06-06  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n \n \tPR c/20000\n-        * c-c++-common/pr20000.c: New.\n+\t* c-c++-common/pr20000.c: New.\n \n 2010-06-05  Fabien Ch\u00eane  <fabien@gcc.gnu.org>\n "}]}