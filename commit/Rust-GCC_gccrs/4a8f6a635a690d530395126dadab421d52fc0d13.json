{"sha": "4a8f6a635a690d530395126dadab421d52fc0d13", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGE4ZjZhNjM1YTY5MGQ1MzAzOTUxMjZkYWRhYjQyMWQ1MmZjMGQxMw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2010-10-27T20:34:36Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2010-10-27T20:34:36Z"}, "message": "sol2-unwind.h (sparc64_fallback_frame_state): Adjust for newer Solaris 10 release.\n\n\t* config/sparc/sol2-unwind.h (sparc64_fallback_frame_state): Adjust\n\tfor newer Solaris 10 release.\n\t(sparc_fallback_frame_state): Likewise.\n\nFrom-SVN: r166015", "tree": {"sha": "0976e0b18d3398f1bdaa3c06658356400b082ec3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0976e0b18d3398f1bdaa3c06658356400b082ec3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4a8f6a635a690d530395126dadab421d52fc0d13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a8f6a635a690d530395126dadab421d52fc0d13", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a8f6a635a690d530395126dadab421d52fc0d13", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a8f6a635a690d530395126dadab421d52fc0d13/comments", "author": null, "committer": null, "parents": [{"sha": "225a658415367be2700835fec916c091cd6a6945", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/225a658415367be2700835fec916c091cd6a6945", "html_url": "https://github.com/Rust-GCC/gccrs/commit/225a658415367be2700835fec916c091cd6a6945"}], "stats": {"total": 65, "additions": 51, "deletions": 14}, "files": [{"sha": "b2ec01c5d9ea54fd180514204e10b6ea3457bc08", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a8f6a635a690d530395126dadab421d52fc0d13/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a8f6a635a690d530395126dadab421d52fc0d13/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4a8f6a635a690d530395126dadab421d52fc0d13", "patch": "@@ -1,3 +1,9 @@\n+2010-10-27  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* config/sparc/sol2-unwind.h (sparc64_fallback_frame_state): Adjust\n+\tfor newer Solaris 10 release.\n+\t(sparc_fallback_frame_state): Likewise.\n+\n 2010-10-27  Jason Merrill  <jason@redhat.com>\n \n \t* gimplify.c (gimplify_decl_expr): Handle anonymous artificial"}, {"sha": "aa1358dfae589ab0b5ef023a0f2a19ad344b4df6", "filename": "gcc/config/sparc/sol2-unwind.h", "status": "modified", "additions": 45, "deletions": 14, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a8f6a635a690d530395126dadab421d52fc0d13/gcc%2Fconfig%2Fsparc%2Fsol2-unwind.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a8f6a635a690d530395126dadab421d52fc0d13/gcc%2Fconfig%2Fsparc%2Fsol2-unwind.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsol2-unwind.h?ref=4a8f6a635a690d530395126dadab421d52fc0d13", "patch": "@@ -1,5 +1,5 @@\n /* DWARF2 EH unwinding support for SPARC Solaris.\n-   Copyright (C) 2009 Free Software Foundation, Inc.\n+   Copyright (C) 2009, 2010 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -118,7 +118,27 @@ sparc64_fallback_frame_state (struct _Unwind_Context *context,\n       unsigned int cuh_pattern\n \t= *(unsigned int *)(*(unsigned long *)(this_cfa + 15*8) - 4);\n \n-      if (cuh_pattern == 0x9410001a || cuh_pattern == 0x94100013)\n+      if (cuh_pattern == 0xd25fa7ef)\n+\t{\n+\t  /* This matches the call_user_handler pattern for Solaris 10.\n+\t     There are 2 cases so we look for the return address of the\n+\t     caller's caller frame in order to do more pattern matching.  */\n+\t  unsigned int sah_pattern\n+\t    = *(unsigned int *)(*(unsigned long *)(this_cfa + 176 + 15*8) - 4);\n+\n+          if (sah_pattern == 0x92100019)\n+\t    /* This is the same setup as for Solaris 9, see below.  */\n+\t    regs_off = 176 + 176 + 176 + 304;\n+\t  else\n+\t    /* We need to move up three frames (the kernel frame, the\n+\t       call_user_handler frame, the __sighndlr frame).  Two of them\n+\t       have the minimum stack frame size (kernel and __sighndlr\n+\t       frames) of 176 bytes, and there is another with a stack frame\n+\t       of 304 bytes (the call_user_handler frame).  The ucontext_t\n+\t       structure is after this offset.  */\n+\t    regs_off = 176 + 176 + 304;\n+\t}\n+      else if (cuh_pattern == 0x9410001a || cuh_pattern == 0x94100013)\n \t/* This matches the call_user_handler pattern for Solaris 9 and\n \t   for Solaris 8 running inside Solaris Containers respectively.\n \t   We need to move up four frames (the kernel frame, the signal\n@@ -152,7 +172,7 @@ sparc64_fallback_frame_state (struct _Unwind_Context *context,\n   fpu_save_off = regs_off + (8*10) + 176;\n \n   /* The fpregs field contains 32 extended words at the beginning that\n-     contain the fpu state.  Then there are 2 extended words and two\n+     contain the FPU state.  Then there are 2 extended words and two\n      bytes.  */\n   fpu_save = *(unsigned char *)(this_cfa + fpu_save_off + (8*32) + (2*8) + 2);\n \n@@ -195,7 +215,7 @@ sparc64_fallback_frame_state (struct _Unwind_Context *context,\n       fs->regs.reg[i + 16].loc.offset = i*8;\n     }\n \n-  /* Check whether we need to restore fpu registers.  */\n+  /* Check whether we need to restore FPU registers.  */\n   if (fpu_save)\n     {\n       for (i = 0; i < 64; i++)\n@@ -347,14 +367,25 @@ sparc_fallback_frame_state (struct _Unwind_Context *context,\n \t= *(unsigned int *)(*(unsigned int *)(this_cfa + 15*4) - 4);\n \n       if (cuh_pattern == 0xd407a04c)\n-\t/* This matches the call_user_handler pattern for Solaris 10.\n-\t   We need to move up three frames (the kernel frame, the\n-\t   call_user_handler frame, the __sighndlr frame).  Two of them\n-\t   have the minimum stack frame size (kernel and __sighndlr\n-\t   frames) of 96 bytes, and there is another with a stack frame\n-\t   of 160 bytes (the call_user_handler frame).  The ucontext_t\n-\t  structure is after this offset.  */\n-\tregs_off = 96 + 96 + 160;\n+\t{\n+\t  /* This matches the call_user_handler pattern for Solaris 10.\n+\t     There are 2 cases so we look for the return address of the\n+\t     caller's caller frame in order to do more pattern matching.  */\n+\t  unsigned int sah_pattern\n+\t    = *(unsigned int *)(*(unsigned int *)(this_cfa + 96 + 15*4) - 4);\n+\n+          if (sah_pattern == 0x92100019)\n+\t    /* This is the same setup as for Solaris 9, see below.  */\n+\t    regs_off = 96 + 96 + 96 + 160;\n+\t  else\n+\t    /* We need to move up three frames (the kernel frame, the\n+\t       call_user_handler frame, the __sighndlr frame).  Two of them\n+\t       have the minimum stack frame size (kernel and __sighndlr\n+\t       frames) of 96 bytes, and there is another with a stack frame\n+\t       of 160 bytes (the call_user_handler frame).  The ucontext_t\n+\t       structure is after this offset.  */\n+\t    regs_off = 96 + 96 + 160;\n+\t}\n       else if (cuh_pattern == 0x9410001a || cuh_pattern == 0x9410001b)\n \t/* This matches the call_user_handler pattern for Solaris 9 and\n \t   for Solaris 8 running inside Solaris Containers respectively.\n@@ -389,7 +420,7 @@ sparc_fallback_frame_state (struct _Unwind_Context *context,\n   fpu_save_off = regs_off + (4*10) + (4*20);\n \n   /* The fpregs field contains 32 words at the beginning that contain\n-     the fpu state.  Then there are 2 words and two bytes.  */\n+     the FPU state.  Then there are 2 words and two bytes.  */\n   fpu_save = *(unsigned char *)(this_cfa + fpu_save_off + (4*32) + (2*4) + 2);\n \n   /* We need to get the frame pointer for the kernel frame that\n@@ -429,7 +460,7 @@ sparc_fallback_frame_state (struct _Unwind_Context *context,\n       fs->regs.reg[i + 16].loc.offset = i*4;\n     }\n \n-  /* Check whether we need to restore fpu registers.  */\n+  /* Check whether we need to restore FPU registers.  */\n   if (fpu_save)\n     {\n       for (i = 0; i < 32; i++)"}]}