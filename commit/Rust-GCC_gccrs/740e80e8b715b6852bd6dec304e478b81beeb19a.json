{"sha": "740e80e8b715b6852bd6dec304e478b81beeb19a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzQwZTgwZThiNzE1YjY4NTJiZDZkZWMzMDRlNDc4YjgxYmVlYjE5YQ==", "commit": {"author": {"name": "Francois-Xavier Coudert", "email": "coudert@clipper.ens.fr", "date": "2005-06-30T20:43:45Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2005-06-30T20:43:45Z"}, "message": "re PR middle-end/22247 (tree-ssa-structalias.c: `uint' undeclared)\n\n\tPR middle-end/22247\n\t* tree-ssa-structalias.c (build_constraint_graph, scc_visit,\n\tprocess_unification_queue, init_topo_info, topo_visit,\n\tinit_scc_info, free_scc_info, perform_var_substitution,\n\tsolve_graph): Use unsigned instead of uint.\n\nFrom-SVN: r101475", "tree": {"sha": "de7a2ce9baba6f24a6f22d2610ebb401fe116b68", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/de7a2ce9baba6f24a6f22d2610ebb401fe116b68"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/740e80e8b715b6852bd6dec304e478b81beeb19a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/740e80e8b715b6852bd6dec304e478b81beeb19a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/740e80e8b715b6852bd6dec304e478b81beeb19a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/740e80e8b715b6852bd6dec304e478b81beeb19a/comments", "author": null, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b76be05ef301201a621322be593b5ebe4c3ecba6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b76be05ef301201a621322be593b5ebe4c3ecba6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b76be05ef301201a621322be593b5ebe4c3ecba6"}], "stats": {"total": 58, "additions": 33, "deletions": 25}, "files": [{"sha": "7354c66a661e5cde8a9e2bd3c1bd53b3b6fe8664", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/740e80e8b715b6852bd6dec304e478b81beeb19a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/740e80e8b715b6852bd6dec304e478b81beeb19a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=740e80e8b715b6852bd6dec304e478b81beeb19a", "patch": "@@ -1,3 +1,11 @@\n+2005-06-30  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n+\n+\tPR middle-end/22247\n+\t* tree-ssa-structalias.c (build_constraint_graph, scc_visit,\n+\tprocess_unification_queue, init_topo_info, topo_visit,\n+\tinit_scc_info, free_scc_info, perform_var_substitution,\n+\tsolve_graph): Use unsigned instead of uint.\n+\t\n 2005-06-30  Jakub Jelinek  <jakub@redhat.com>\n \n \t* function.c (gen_stack_protect_test): Add third argument."}, {"sha": "e60a4fc6107705f7d8682cc5080b0d4ab859ee9f", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/740e80e8b715b6852bd6dec304e478b81beeb19a/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/740e80e8b715b6852bd6dec304e478b81beeb19a/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=740e80e8b715b6852bd6dec304e478b81beeb19a", "patch": "@@ -988,8 +988,8 @@ build_constraint_graph (void)\n static unsigned int changed_count;\n static sbitmap changed;\n \n-DEF_VEC_I(uint);\n-DEF_VEC_ALLOC_I(uint,heap);\n+DEF_VEC_I(unsigned);\n+DEF_VEC_ALLOC_I(unsigned,heap);\n \n \n /* Strongly Connected Component visitation info.  */\n@@ -1000,8 +1000,8 @@ struct scc_info\n   sbitmap in_component;\n   int current_index;\n   unsigned int *visited_index;\n-  VEC(uint,heap) *scc_stack;\n-  VEC(uint,heap) *unification_queue;\n+  VEC(unsigned,heap) *scc_stack;\n+  VEC(unsigned,heap) *unification_queue;\n };\n \n \n@@ -1051,18 +1051,18 @@ scc_visit (constraint_graph_t graph, struct scc_info *si, unsigned int n)\n     {\n       unsigned int t = si->visited_index[n];\n       SET_BIT (si->in_component, n);\n-      while (VEC_length (uint, si->scc_stack) != 0 \n-\t     && t < si->visited_index[VEC_last (uint, si->scc_stack)])\n+      while (VEC_length (unsigned, si->scc_stack) != 0 \n+\t     && t < si->visited_index[VEC_last (unsigned, si->scc_stack)])\n \t{\n-\t  unsigned int w = VEC_pop (uint, si->scc_stack);\n+\t  unsigned int w = VEC_pop (unsigned, si->scc_stack);\n \t  get_varinfo (w)->node = n;\n \t  SET_BIT (si->in_component, w);\n \t  /* Mark this node for collapsing.  */\n-\t  VEC_safe_push (uint, heap, si->unification_queue, w);\n+\t  VEC_safe_push (unsigned, heap, si->unification_queue, w);\n \t} \n     }\n   else\n-    VEC_safe_push (uint, heap, si->scc_stack, n);\n+    VEC_safe_push (unsigned, heap, si->scc_stack, n);\n }\n \n \n@@ -1132,9 +1132,9 @@ process_unification_queue (constraint_graph_t graph, struct scc_info *si,\n \tchanged rep's solution.\n \t\n \tDelete any 0 weighted self-edges we now have for rep.  */\n-  while (i != VEC_length (uint, si->unification_queue))\n+  while (i != VEC_length (unsigned, si->unification_queue))\n     {\n-      unsigned int tounify = VEC_index (uint, si->unification_queue, i);\n+      unsigned int tounify = VEC_index (unsigned, si->unification_queue, i);\n       unsigned int n = get_varinfo (tounify)->node;\n \n       if (dump_file && (dump_flags & TDF_DETAILS))\n@@ -1167,8 +1167,8 @@ process_unification_queue (constraint_graph_t graph, struct scc_info *si,\n       /* If we've either finished processing the entire queue, or\n \t finished processing all nodes for component n, update the solution for\n \t n.  */\n-      if (i == VEC_length (uint, si->unification_queue)\n-\t  || get_varinfo (VEC_index (uint, si->unification_queue, i))->node != n)\n+      if (i == VEC_length (unsigned, si->unification_queue)\n+\t  || get_varinfo (VEC_index (unsigned, si->unification_queue, i))->node != n)\n \t{\n \t  struct constraint_edge edge;\n \n@@ -1206,7 +1206,7 @@ struct topo_info\n   sbitmap visited;\n   /* Array that stores the topological order of the graph, *in\n      reverse*.  */\n-  VEC(uint,heap) *topo_order;\n+  VEC(unsigned,heap) *topo_order;\n };\n \n \n@@ -1219,7 +1219,7 @@ init_topo_info (void)\n   struct topo_info *ti = xmalloc (sizeof (struct topo_info));\n   ti->visited = sbitmap_alloc (size);\n   sbitmap_zero (ti->visited);\n-  ti->topo_order = VEC_alloc (uint, heap, 1);\n+  ti->topo_order = VEC_alloc (unsigned, heap, 1);\n   return ti;\n }\n \n@@ -1230,7 +1230,7 @@ static void\n free_topo_info (struct topo_info *ti)\n {\n   sbitmap_free (ti->visited);\n-  VEC_free (uint, heap, ti->topo_order);\n+  VEC_free (unsigned, heap, ti->topo_order);\n   free (ti);\n }\n \n@@ -1250,7 +1250,7 @@ topo_visit (constraint_graph_t graph, struct topo_info *ti,\n       if (!TEST_BIT (ti->visited, c->dest))\n \ttopo_visit (graph, ti, c->dest);\n     }\n-  VEC_safe_push (uint, heap, ti->topo_order, n);\n+  VEC_safe_push (unsigned, heap, ti->topo_order, n);\n }\n \n /* Return true if variable N + OFFSET is a legal field of N.  */\n@@ -1447,8 +1447,8 @@ init_scc_info (void)\n   si->in_component = sbitmap_alloc (size);\n   sbitmap_ones (si->in_component);\n   si->visited_index = xcalloc (sizeof (unsigned int), size + 1);\n-  si->scc_stack = VEC_alloc (uint, heap, 1);\n-  si->unification_queue = VEC_alloc (uint, heap, 1);\n+  si->scc_stack = VEC_alloc (unsigned, heap, 1);\n+  si->unification_queue = VEC_alloc (unsigned, heap, 1);\n   return si;\n }\n \n@@ -1460,8 +1460,8 @@ free_scc_info (struct scc_info *si)\n   sbitmap_free (si->visited);\n   sbitmap_free (si->in_component);\n   free (si->visited_index);\n-  VEC_free (uint, heap, si->scc_stack);\n-  VEC_free (uint, heap, si->unification_queue);\n+  VEC_free (unsigned, heap, si->scc_stack);\n+  VEC_free (unsigned, heap, si->unification_queue);\n   free(si); \n }\n \n@@ -1534,9 +1534,9 @@ perform_var_substitution (constraint_graph_t graph)\n      node in topological order.  */\n   compute_topo_order (graph, ti);\n  \n-  while (VEC_length (uint, ti->topo_order) != 0)\n+  while (VEC_length (unsigned, ti->topo_order) != 0)\n     {\n-      unsigned int i = VEC_pop (uint, ti->topo_order);\n+      unsigned int i = VEC_pop (unsigned, ti->topo_order);\n       unsigned int pred;\n       varinfo_t vi = get_varinfo (i);\n       bool okay_to_elim = false;\n@@ -1660,9 +1660,9 @@ solve_graph (constraint_graph_t graph)\n \n       compute_topo_order (graph, ti);\n \n-      while (VEC_length (uint, ti->topo_order) != 0)\n+      while (VEC_length (unsigned, ti->topo_order) != 0)\n \t{\n-\t  i = VEC_pop (uint, ti->topo_order);\n+\t  i = VEC_pop (unsigned, ti->topo_order);\n \t  gcc_assert (get_varinfo (i)->node == i);\n \n \t  /* If the node has changed, we need to process the"}]}