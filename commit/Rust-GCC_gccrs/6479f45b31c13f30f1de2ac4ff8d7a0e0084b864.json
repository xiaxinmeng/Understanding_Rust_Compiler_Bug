{"sha": "6479f45b31c13f30f1de2ac4ff8d7a0e0084b864", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjQ3OWY0NWIzMWMxM2YzMGYxZGUyYWM0ZmY4ZDdhMGUwMDg0Yjg2NA==", "commit": {"author": {"name": "Andre Vehreschild", "email": "vehre@gcc.gnu.org", "date": "2016-12-13T16:47:48Z"}, "committer": {"name": "Andre Vehreschild", "email": "vehre@gcc.gnu.org", "date": "2016-12-13T16:47:48Z"}, "message": "re PR fortran/77785 ([Coarray] ICE in gfc_get_caf_token_offset, at fortran/trans-expr.c:1990)\n\ngcc/fortran/ChangeLog:\n\n2016-12-13  Andre Vehreschild  <vehre@gcc.gnu.org>\n\n\tPR fortran/77785\n\t* resolve.c (resolve_symbol): Correct attr lookup to the _data\n\tcomponent.\n\t* trans-array.c (gfc_alloc_allocatable_for_assignment): Indirect ref\n\tpointers and references before retrieving the caf-token.\n\ngcc/testsuite/ChangeLog:\n\n2016-12-13  Andre Vehreschild  <vehre@gcc.gnu.org>\n\n\tPR fortran/77785\n\t* gfortran.dg/coarray_38.f90: Added expecting error message.\n\t* gfortran.dg/coarray_41.f90: New test.\n\t* gfortran.dg/coarray_class_2.f90: New test.\n\nFrom-SVN: r243614", "tree": {"sha": "c790303060ae2a715c0ef52807f3705bb2b57d25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c790303060ae2a715c0ef52807f3705bb2b57d25"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6479f45b31c13f30f1de2ac4ff8d7a0e0084b864", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6479f45b31c13f30f1de2ac4ff8d7a0e0084b864", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6479f45b31c13f30f1de2ac4ff8d7a0e0084b864", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6479f45b31c13f30f1de2ac4ff8d7a0e0084b864/comments", "author": null, "committer": null, "parents": [{"sha": "b37a5b979a275375322787973b7d6fb620a71ccf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b37a5b979a275375322787973b7d6fb620a71ccf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b37a5b979a275375322787973b7d6fb620a71ccf"}], "stats": {"total": 97, "additions": 94, "deletions": 3}, "files": [{"sha": "d25fc9702ef1a9931ea7199ff333e14abbad39e7", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6479f45b31c13f30f1de2ac4ff8d7a0e0084b864/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6479f45b31c13f30f1de2ac4ff8d7a0e0084b864/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=6479f45b31c13f30f1de2ac4ff8d7a0e0084b864", "patch": "@@ -1,3 +1,11 @@\n+2016-12-13  Andre Vehreschild  <vehre@gcc.gnu.org>\n+\n+\tPR fortran/77785\n+\t* resolve.c (resolve_symbol): Correct attr lookup to the _data\n+\tcomponent.\n+\t* trans-array.c (gfc_alloc_allocatable_for_assignment): Indirect ref\n+\tpointers and references before retrieving the caf-token.\n+\n 2016-12-13  Janus Weil  <janus@gcc.gnu.org>\n \t    Paul Thomas  <pault@gcc.gnu.org>\n "}, {"sha": "ce1d9ea0f9872d41f5735c44d86048512f7b98f9", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6479f45b31c13f30f1de2ac4ff8d7a0e0084b864/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6479f45b31c13f30f1de2ac4ff8d7a0e0084b864/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=6479f45b31c13f30f1de2ac4ff8d7a0e0084b864", "patch": "@@ -14044,8 +14044,8 @@ resolve_symbol (gfc_symbol *sym)\n   if (flag_coarray == GFC_FCOARRAY_LIB && sym->ts.type == BT_CLASS\n       && sym->ts.u.derived && CLASS_DATA (sym)\n       && CLASS_DATA (sym)->attr.codimension\n-      && (sym->ts.u.derived->attr.alloc_comp\n-\t  || sym->ts.u.derived->attr.pointer_comp))\n+      && (CLASS_DATA (sym)->ts.u.derived->attr.alloc_comp\n+\t  || CLASS_DATA (sym)->ts.u.derived->attr.pointer_comp))\n     {\n       gfc_error (\"Sorry, allocatable/pointer components in polymorphic (CLASS) \"\n \t\t \"type coarrays at %L are unsupported\", &sym->declared_at);"}, {"sha": "0cd83f41789766699fe463f74e597fe3e1e42f83", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6479f45b31c13f30f1de2ac4ff8d7a0e0084b864/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6479f45b31c13f30f1de2ac4ff8d7a0e0084b864/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=6479f45b31c13f30f1de2ac4ff8d7a0e0084b864", "patch": "@@ -9337,6 +9337,8 @@ gfc_alloc_allocatable_for_assignment (gfc_loopinfo *loop,\n       if (token == NULL_TREE)\n \t{\n \t  tmp = gfc_get_tree_for_caf_expr (expr1);\n+\t  if (POINTER_TYPE_P (TREE_TYPE (tmp)))\n+\t    tmp = build_fold_indirect_ref (tmp);\n \t  gfc_get_caf_token_offset (&caf_se, &token, NULL, tmp, NULL_TREE,\n \t\t\t\t    expr1);\n \t  token = gfc_build_addr_expr (NULL_TREE, token);"}, {"sha": "48ad430720bd6c2c68bba67d55f6a7db8c5f77a7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6479f45b31c13f30f1de2ac4ff8d7a0e0084b864/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6479f45b31c13f30f1de2ac4ff8d7a0e0084b864/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6479f45b31c13f30f1de2ac4ff8d7a0e0084b864", "patch": "@@ -1,3 +1,10 @@\n+2016-12-13  Andre Vehreschild  <vehre@gcc.gnu.org>\n+\n+\tPR fortran/77785\n+\t* gfortran.dg/coarray_38.f90: Added expecting error message.\n+\t* gfortran.dg/coarray_41.f90: New test.\n+\t* gfortran.dg/coarray_class_2.f90: New test.\n+\n 2016-12-13 Carl Love  <cel@us.ibm.com>\n \n \t* gcc.target/powerpc/builtins-3.c: Add new test of the test suite"}, {"sha": "04ef742faabb280edff308f356395f01c5061fc3", "filename": "gcc/testsuite/gfortran.dg/coarray_38.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6479f45b31c13f30f1de2ac4ff8d7a0e0084b864/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_38.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6479f45b31c13f30f1de2ac4ff8d7a0e0084b864/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_38.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_38.f90?ref=6479f45b31c13f30f1de2ac4ff8d7a0e0084b864", "patch": "@@ -92,7 +92,7 @@ subroutine five\n type t2\n   class(t), allocatable :: caf2[:]\n end type t2\n-class(t), save, allocatable :: caf[:]\n+class(t), save, allocatable :: caf[:] ! { dg-error \"Sorry, allocatable/pointer components in polymorphic\" }\n type(t) :: x\n type(t2) :: y\n "}, {"sha": "b62d8e41de4ef68ab9007d4274cffc7de2c3f3e8", "filename": "gcc/testsuite/gfortran.dg/coarray_41.f90", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6479f45b31c13f30f1de2ac4ff8d7a0e0084b864/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_41.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6479f45b31c13f30f1de2ac4ff8d7a0e0084b864/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_41.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_41.f90?ref=6479f45b31c13f30f1de2ac4ff8d7a0e0084b864", "patch": "@@ -0,0 +1,29 @@\n+! { dg-do run }\n+! { dg-options \"-fcoarray=lib -lcaf_single\" }\n+\n+program coarray_41\n+\n+  integer, allocatable :: vec(:)[:,:]\n+\n+  allocate(vec(10)[2,*], source= 37)\n+\n+  if (.not. allocated(vec)) error stop\n+\n+  call foo(vec)\n+\n+  if (any(vec /= 42)) error stop\n+\n+  deallocate(vec)\n+contains\n+\n+  subroutine foo(gv)\n+\n+    integer, allocatable, intent(inout) :: gv(:)[:,:]\n+    integer, allocatable :: gvin(:)\n+\n+    allocate(gvin, mold=gv)\n+    gvin = 5\n+    gv = gv + gvin\n+  end subroutine foo\n+\n+end program coarray_41"}, {"sha": "58dce1aa1fd39c9440fe003b8f34ff30f94e2f14", "filename": "gcc/testsuite/gfortran.dg/coarray_class_2.f90", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6479f45b31c13f30f1de2ac4ff8d7a0e0084b864/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_class_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6479f45b31c13f30f1de2ac4ff8d7a0e0084b864/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_class_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_class_2.f90?ref=6479f45b31c13f30f1de2ac4ff8d7a0e0084b864", "patch": "@@ -0,0 +1,45 @@\n+! { dg-do compile }\n+! { dg-options \"-fcoarray=lib\" }\n+! Check that error message is presented as long as polymorphic coarrays are\n+! not implemented.\n+\n+module maccscal\n+   type t\n+      real, allocatable :: a\n+   end type\n+contains\n+   subroutine s(x) ! { dg-error \"Sorry, allocatable/pointer components in polymorphic \\\\(CLASS\\\\)\" }\n+      class(t) :: x[*]\n+      allocate (x%a)\n+   end\n+end\n+module mptrscal\n+   type t\n+      real, pointer :: a\n+   end type\n+contains\n+   subroutine s(x) ! { dg-error \"Sorry, allocatable/pointer components in polymorphic \\\\(CLASS\\\\)\" }\n+      class(t) :: x[*]\n+      allocate (x%a)\n+   end\n+end\n+module mallarr\n+   type t\n+      real, allocatable :: a(:)\n+   end type\n+contains\n+   subroutine s(x) ! { dg-error \"Sorry, allocatable/pointer components in polymorphic \\\\(CLASS\\\\)\" }\n+      class(t) :: x[*]\n+      allocate (x%a(2))\n+   end\n+end\n+module mptrarr\n+   type t\n+      real, pointer :: a(:)\n+   end type\n+contains\n+   subroutine s(x) ! { dg-error \"Sorry, allocatable/pointer components in polymorphic \\\\(CLASS\\\\)\" }\n+      class(t) :: x[*]\n+      allocate (x%a(2))\n+   end\n+end"}]}