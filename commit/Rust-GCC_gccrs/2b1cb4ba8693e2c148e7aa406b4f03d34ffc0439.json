{"sha": "2b1cb4ba8693e2c148e7aa406b4f03d34ffc0439", "node_id": "C_kwDOANBUbNoAKDJiMWNiNGJhODY5M2UyYzE0OGU3YWE0MDZiNGYwM2QzNGZmYzA0Mzk", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-04-25T11:10:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-04-25T11:10:22Z"}, "message": "Merge #1161\n\n1161: Implement macro expansion for ComparisonExpr, LazyBooleanExpr, AssignmentExpr r=CohenArthur a=antego\n\nFollowing up on https://github.com/Rust-GCC/gccrs/issues/1141\r\n\r\nCurrently the macro expansion doesn't work for ComparisonExpr, LazyBooleanExpr, AssignmentExpr. To fix this, I just copied the code from the `ArithmeticOrLogicalExpr` and it seemed to work. I don't like the code duplication, happy to try refactoring it into a separate function.\r\n\r\nWill work on the macro expansion in the `if` expressions next.\n\nCo-authored-by: antego <antego@users.noreply.github.com>", "tree": {"sha": "7c0e5170858b3abc2c384f62b308103e9cd0dc6d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7c0e5170858b3abc2c384f62b308103e9cd0dc6d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2b1cb4ba8693e2c148e7aa406b4f03d34ffc0439", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiZoGeCRBK7hj4Ov3rIwAA/CwIADae8TpIZUv8huQPoku+oeja\n9YRniTLyGnUNhvCbse/ugsk+LwDb9oF9SNPaorloHOCscEZ8CaV3+jtDzsL9L+5O\nuQfBmaodUbnPR3mGgR0q1J9xcWq4rbd35pL/KJlhwFF1IXWuODPXYMp99gGK8Hre\n0tDaOzWoMYlY245sO1NIC9X0bn0E4FRdru2BVFPMQJtVc73nHpkraImjwpLWLeJt\nbnOaXcEO37k5lfaOlCmr1kAdruLMqeE5tJPEMG+mE+v0gj1MPjxcWGd98QL8sIrj\nZFcTE057lZzYoji9OQAuXAbPx0VG9mOEdSP9cfWVlV/lxysGwY9PzUKRC+ZJdQg=\n=hry4\n-----END PGP SIGNATURE-----\n", "payload": "tree 7c0e5170858b3abc2c384f62b308103e9cd0dc6d\nparent d54ca716854b30c6a6431310d7f1726073ecee25\nparent e26b95f64a0f450199b3a5f58db68dfd0fb585b5\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1650885022 +0000\ncommitter GitHub <noreply@github.com> 1650885022 +0000\n\nMerge #1161\n\n1161: Implement macro expansion for ComparisonExpr, LazyBooleanExpr, AssignmentExpr r=CohenArthur a=antego\n\nFollowing up on https://github.com/Rust-GCC/gccrs/issues/1141\r\n\r\nCurrently the macro expansion doesn't work for ComparisonExpr, LazyBooleanExpr, AssignmentExpr. To fix this, I just copied the code from the `ArithmeticOrLogicalExpr` and it seemed to work. I don't like the code duplication, happy to try refactoring it into a separate function.\r\n\r\nWill work on the macro expansion in the `if` expressions next.\n\nCo-authored-by: antego <antego@users.noreply.github.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b1cb4ba8693e2c148e7aa406b4f03d34ffc0439", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b1cb4ba8693e2c148e7aa406b4f03d34ffc0439", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b1cb4ba8693e2c148e7aa406b4f03d34ffc0439/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d54ca716854b30c6a6431310d7f1726073ecee25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d54ca716854b30c6a6431310d7f1726073ecee25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d54ca716854b30c6a6431310d7f1726073ecee25"}, {"sha": "e26b95f64a0f450199b3a5f58db68dfd0fb585b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e26b95f64a0f450199b3a5f58db68dfd0fb585b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e26b95f64a0f450199b3a5f58db68dfd0fb585b5"}], "stats": {"total": 109, "additions": 103, "deletions": 6}, "files": [{"sha": "e420d0932a58228a9ee0836058eaf7288de74237", "filename": "gcc/rust/expand/rust-attribute-visitor.cc", "status": "modified", "additions": 33, "deletions": 6, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b1cb4ba8693e2c148e7aa406b4f03d34ffc0439/gcc%2Frust%2Fexpand%2Frust-attribute-visitor.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b1cb4ba8693e2c148e7aa406b4f03d34ffc0439/gcc%2Frust%2Fexpand%2Frust-attribute-visitor.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-attribute-visitor.cc?ref=2b1cb4ba8693e2c148e7aa406b4f03d34ffc0439", "patch": "@@ -643,10 +643,19 @@ AttrVisitor::visit (AST::ComparisonExpr &expr)\n \n   /* should have no possibility for outer attrs as would be parsed\n    * with outer expr */\n-  expr.get_left_expr ()->accept_vis (*this);\n+  auto &l_expr = expr.get_left_expr ();\n+  l_expr->accept_vis (*this);\n+  auto l_fragment = expander.take_expanded_fragment (*this);\n+  if (l_fragment.should_expand ())\n+    l_expr = l_fragment.take_expression_fragment ();\n+\n   /* should syntactically not have outer attributes, though this may\n    * not have worked in practice */\n-  expr.get_right_expr ()->accept_vis (*this);\n+  auto &r_expr = expr.get_right_expr ();\n+  r_expr->accept_vis (*this);\n+  auto r_fragment = expander.take_expanded_fragment (*this);\n+  if (r_fragment.should_expand ())\n+    r_expr = r_fragment.take_expression_fragment ();\n \n   // ensure that they are not marked for strip\n   if (expr.get_left_expr ()->is_marked_for_strip ())\n@@ -667,10 +676,19 @@ AttrVisitor::visit (AST::LazyBooleanExpr &expr)\n \n   /* should have no possibility for outer attrs as would be parsed\n    * with outer expr */\n-  expr.get_left_expr ()->accept_vis (*this);\n+  auto &l_expr = expr.get_left_expr ();\n+  l_expr->accept_vis (*this);\n+  auto l_fragment = expander.take_expanded_fragment (*this);\n+  if (l_fragment.should_expand ())\n+    l_expr = l_fragment.take_expression_fragment ();\n+\n   /* should syntactically not have outer attributes, though this may\n    * not have worked in practice */\n-  expr.get_right_expr ()->accept_vis (*this);\n+  auto &r_expr = expr.get_right_expr ();\n+  r_expr->accept_vis (*this);\n+  auto r_fragment = expander.take_expanded_fragment (*this);\n+  if (r_fragment.should_expand ())\n+    r_expr = r_fragment.take_expression_fragment ();\n \n   // ensure that they are not marked for strip\n   if (expr.get_left_expr ()->is_marked_for_strip ())\n@@ -718,10 +736,19 @@ AttrVisitor::visit (AST::AssignmentExpr &expr)\n \n   /* should have no possibility for outer attrs as would be parsed\n    * with outer expr */\n-  expr.get_left_expr ()->accept_vis (*this);\n+  auto &l_expr = expr.get_left_expr ();\n+  l_expr->accept_vis (*this);\n+  auto l_fragment = expander.take_expanded_fragment (*this);\n+  if (l_fragment.should_expand ())\n+    l_expr = l_fragment.take_expression_fragment ();\n+\n   /* should syntactically not have outer attributes, though this may\n    * not have worked in practice */\n-  expr.get_right_expr ()->accept_vis (*this);\n+  auto &r_expr = expr.get_right_expr ();\n+  r_expr->accept_vis (*this);\n+  auto r_fragment = expander.take_expanded_fragment (*this);\n+  if (r_fragment.should_expand ())\n+    r_expr = r_fragment.take_expression_fragment ();\n \n   // ensure that they are not marked for strip\n   if (expr.get_left_expr ()->is_marked_for_strip ())"}, {"sha": "7bce29b5995f202d64223d3ce44641218c2c6f35", "filename": "gcc/testsuite/rust/execute/torture/macros29.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b1cb4ba8693e2c148e7aa406b4f03d34ffc0439/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros29.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b1cb4ba8693e2c148e7aa406b4f03d34ffc0439/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros29.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros29.rs?ref=2b1cb4ba8693e2c148e7aa406b4f03d34ffc0439", "patch": "@@ -0,0 +1,21 @@\n+// { dg-output \"1\\n\" }\n+macro_rules! concat {\n+  () => {{}};\n+}\n+\n+extern \"C\" {\n+  fn printf(fmt: *const i8, ...);\n+}\n+\n+fn print(s: u32) {\n+  printf(\"%u\\n\\0\" as *const str as *const i8, s);\n+}\n+\n+fn main () -> i32 {\n+  let res = concat!(\"test2\") == \"test3\";\n+  if !res {\n+    print(1);\n+  }\n+\n+  0\n+}"}, {"sha": "09247e6dd7e34426efe378bce07583de49d40692", "filename": "gcc/testsuite/rust/execute/torture/macros30.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b1cb4ba8693e2c148e7aa406b4f03d34ffc0439/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros30.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b1cb4ba8693e2c148e7aa406b4f03d34ffc0439/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros30.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros30.rs?ref=2b1cb4ba8693e2c148e7aa406b4f03d34ffc0439", "patch": "@@ -0,0 +1,22 @@\n+// { dg-output \"1\\n\" }\n+macro_rules! concat {\n+  () => {{}};\n+}\n+\n+extern \"C\" {\n+  fn printf(fmt: *const i8, ...);\n+}\n+\n+fn print(s: u32) {\n+  printf(\"%u\\n\\0\" as *const str as *const i8, s);\n+}\n+\n+fn main () -> i32 {\n+  let mut x = concat!(\"x\");\n+  x = concat!(\"y\");\n+  if x == \"y\" {\n+    print(1);\n+  }\n+\n+  0\n+}"}, {"sha": "1a67c473770455459015d765529e8addde61c040", "filename": "gcc/testsuite/rust/execute/torture/macros31.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b1cb4ba8693e2c148e7aa406b4f03d34ffc0439/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros31.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b1cb4ba8693e2c148e7aa406b4f03d34ffc0439/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros31.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros31.rs?ref=2b1cb4ba8693e2c148e7aa406b4f03d34ffc0439", "patch": "@@ -0,0 +1,27 @@\n+// { dg-additional-options \"-w -frust-cfg=A\" }\n+// { dg-output \"A\\nB\\n\" }\n+macro_rules! cfg {\n+    () => {{}};\n+}\n+\n+extern \"C\" {\n+    fn printf(fmt: *const i8, ...);\n+}\n+\n+fn print(s: &str) {\n+    printf(\"%s\\n\" as *const str as *const i8, s as *const str as *const i8);\n+}\n+\n+\n+fn main() -> i32 {\n+    let cfg = cfg!(A) || cfg!(B);\n+    if cfg {\n+        print(\"A\");\n+    }\n+    let cfg = cfg!(A) && cfg!(B);\n+    if !cfg {\n+        print(\"B\");\n+    }\n+\n+    0\n+}"}]}