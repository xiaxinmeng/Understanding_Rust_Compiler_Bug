{"sha": "3db5bee0079d48ab7c82f8df1cc7efd87a6fed04", "node_id": "C_kwDOANBUbNoAKDNkYjViZWUwMDc5ZDQ4YWI3YzgyZjhkZjFjYzdlZmQ4N2E2ZmVkMDQ", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2022-12-07T22:08:18Z"}, "committer": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2022-12-07T22:08:18Z"}, "message": "c: Diagnose auto constexpr used with a type\n\nThe constraints on auto in C2x disallow use with other storage-class\nspecifiers unless the type is inferred from an initializer.  That\nincludes constexpr; add the missing checks for this case (the\ncombination of auto, constexpr and a type specifier).\n\nBootstrapped with no regressions for x86_64-pc-linux-gnu.\n\ngcc/c/\n\t* c-decl.cc (declspecs_add_type, declspecs_add_scspec): Check for\n\tauto, constexpr and a type used together.\n\ngcc/testsuite/\n\t* gcc.dg/c2x-constexpr-1.c: Do not use auto, constexpr and a type\n\ttogether.\n\t* gcc.dg/c2x-constexpr-3.c: Add tests of auto, constexpr and type\n\tused together.", "tree": {"sha": "137adfaf9414292842beb57e96587a95820b1767", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/137adfaf9414292842beb57e96587a95820b1767"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3db5bee0079d48ab7c82f8df1cc7efd87a6fed04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3db5bee0079d48ab7c82f8df1cc7efd87a6fed04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3db5bee0079d48ab7c82f8df1cc7efd87a6fed04", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3db5bee0079d48ab7c82f8df1cc7efd87a6fed04/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ad0f470c16d5528a5283060b007f8b419c33c92", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ad0f470c16d5528a5283060b007f8b419c33c92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ad0f470c16d5528a5283060b007f8b419c33c92"}], "stats": {"total": 24, "additions": 22, "deletions": 2}, "files": [{"sha": "e47ca6718b3ea004e8437fbc5a93ae4d663dda82", "filename": "gcc/c/c-decl.cc", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3db5bee0079d48ab7c82f8df1cc7efd87a6fed04/gcc%2Fc%2Fc-decl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3db5bee0079d48ab7c82f8df1cc7efd87a6fed04/gcc%2Fc%2Fc-decl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.cc?ref=3db5bee0079d48ab7c82f8df1cc7efd87a6fed04", "patch": "@@ -11430,6 +11430,10 @@ declspecs_add_type (location_t loc, struct c_declspecs *specs,\n       else if (specs->thread_p)\n \terror (\"%qs used with %<auto%>\",\n \t       specs->thread_gnu_p ? \"__thread\" : \"_Thread_local\");\n+      else if (specs->constexpr_p)\n+\t/* auto may only be used with another storage class specifier,\n+\t   such as constexpr, if the type is inferred.  */\n+\terror (\"%<auto%> used with %<constexpr%>\");\n       else\n \tspecs->storage_class = csc_auto;\n     }\n@@ -12363,6 +12367,10 @@ declspecs_add_scspec (location_t loc,\n \t  return specs;\n \t}\n       n = csc_auto;\n+      /* auto may only be used with another storage class specifier,\n+\t such as constexpr, if the type is inferred.  */\n+      if (specs->constexpr_p)\n+\terror (\"%qE used with %<constexpr%>\", scspec);\n       break;\n     case RID_EXTERN:\n       n = csc_extern;\n@@ -12393,6 +12401,10 @@ declspecs_add_scspec (location_t loc,\n \terror (\"%qE used with %<extern%>\", scspec);\n       else if (specs->storage_class == csc_typedef)\n \terror (\"%qE used with %<typedef%>\", scspec);\n+      else if (specs->storage_class == csc_auto)\n+\t/* auto may only be used with another storage class specifier,\n+\t   such as constexpr, if the type is inferred.  */\n+\terror (\"%qE used with %<auto%>\", scspec);\n       else if (specs->thread_p)\n \terror (\"%qE used with %qs\", scspec,\n \t       specs->thread_gnu_p ? \"__thread\" : \"_Thread_local\");"}, {"sha": "d43d95ddd7c4d9c36d122e9bd9c6c3836b443062", "filename": "gcc/testsuite/gcc.dg/c2x-constexpr-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3db5bee0079d48ab7c82f8df1cc7efd87a6fed04/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-constexpr-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3db5bee0079d48ab7c82f8df1cc7efd87a6fed04/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-constexpr-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-constexpr-1.c?ref=3db5bee0079d48ab7c82f8df1cc7efd87a6fed04", "patch": "@@ -180,10 +180,10 @@ f0 ()\n {\n   constexpr int fv0 = 3;\n   static_assert (fv0 == 3);\n-  auto constexpr int fv1 = 4;\n+  auto constexpr fv1 = 4;\n   static_assert (fv1 == 4);\n   register constexpr float fv2 = 1.0;\n-  constexpr auto int fv3 = 123;\n+  constexpr auto fv3 = 123;\n   static_assert (fv3 == 123);\n   constexpr register void *fv4 = (void *) 0;\n   const int *fv5 = &(constexpr int) { 234 };"}, {"sha": "29fedc03afd4c160b7693723dea69bb644ff3798", "filename": "gcc/testsuite/gcc.dg/c2x-constexpr-3.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3db5bee0079d48ab7c82f8df1cc7efd87a6fed04/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-constexpr-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3db5bee0079d48ab7c82f8df1cc7efd87a6fed04/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-constexpr-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-constexpr-3.c?ref=3db5bee0079d48ab7c82f8df1cc7efd87a6fed04", "patch": "@@ -225,4 +225,12 @@ f0 ()\n   constexpr typeof (nullptr) not_npc = nullptr;\n   int *ptr = 0;\n   (void) (ptr == not_npc); /* { dg-error \"invalid operands\" } */\n+  /* auto may only be used with another storage class specifier, such as\n+     constexpr, if the type is inferred.  */\n+  auto constexpr int a_c_t = 1; /* { dg-error \"'auto' used with 'constexpr'\" } */\n+  constexpr auto int c_a_t = 1; /* { dg-error \"'auto' used with 'constexpr'\" } */\n+  auto int constexpr a_t_c = 1; /* { dg-error \"'constexpr' used with 'auto'\" } */\n+  constexpr int auto c_t_a = 1; /* { dg-error \"'auto' used with 'constexpr'\" } */\n+  int auto constexpr t_a_c = 1; /* { dg-error \"'constexpr' used with 'auto'\" } */\n+  int constexpr auto t_c_a = 1; /* { dg-error \"'auto' used with 'constexpr'\" } */\n }"}]}