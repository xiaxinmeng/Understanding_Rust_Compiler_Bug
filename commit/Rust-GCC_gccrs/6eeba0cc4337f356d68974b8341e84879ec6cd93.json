{"sha": "6eeba0cc4337f356d68974b8341e84879ec6cd93", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmVlYmEwY2M0MzM3ZjM1NmQ2ODk3NGI4MzQxZTg0ODc5ZWM2Y2Q5Mw==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2003-07-11T08:20:19Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2003-07-11T08:20:19Z"}, "message": "re PR c++/8327 (In definition of template static member value of static const member isn't known)\n\n\tPR c++/8327\n\t* pt.c (tsubst_qualified_id): Implement suggested resolution for\n\tCore Issue 2.\n\t(type_dependent_expression_p): Likewise.\n\n\tPR c++/8327\n\t* g++.dg/template/scope1.C: New test.\n\nFrom-SVN: r69223", "tree": {"sha": "ea270a6bb429742026b2cc05b98f103d36ac8fb3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ea270a6bb429742026b2cc05b98f103d36ac8fb3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6eeba0cc4337f356d68974b8341e84879ec6cd93", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6eeba0cc4337f356d68974b8341e84879ec6cd93", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6eeba0cc4337f356d68974b8341e84879ec6cd93", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6eeba0cc4337f356d68974b8341e84879ec6cd93/comments", "author": null, "committer": null, "parents": [{"sha": "7d48af3049bd6b071a0369d96cdc1d7fbe8caa40", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d48af3049bd6b071a0369d96cdc1d7fbe8caa40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d48af3049bd6b071a0369d96cdc1d7fbe8caa40"}], "stats": {"total": 72, "additions": 65, "deletions": 7}, "files": [{"sha": "d64d722303b5e7cbe222a3efdc77d1519da0032f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6eeba0cc4337f356d68974b8341e84879ec6cd93/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6eeba0cc4337f356d68974b8341e84879ec6cd93/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=6eeba0cc4337f356d68974b8341e84879ec6cd93", "patch": "@@ -1,3 +1,10 @@\n+2003-07-11  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/8327\n+\t* pt.c (tsubst_qualified_id): Implement suggested resolution for\n+\tCore Issue 2.\n+\t(type_dependent_expression_p): Likewise.\n+\n 2003-07-10  Mark Mitchell  <mark@codesourcery.com>\n \n \t* typeck.c (build_binary_op): Do not warn about signed"}, {"sha": "96edfc9f6f1d308a56a7e25c2453b8ebb56f9d55", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 43, "deletions": 7, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6eeba0cc4337f356d68974b8341e84879ec6cd93/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6eeba0cc4337f356d68974b8341e84879ec6cd93/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=6eeba0cc4337f356d68974b8341e84879ec6cd93", "patch": "@@ -7142,10 +7142,6 @@ tsubst_qualified_id (tree qualified_id, tree args,\n \n   my_friendly_assert (TREE_CODE (qualified_id) == SCOPE_REF, 20030706);\n \n-  /* Look up the qualified name.  */\n-  scope = TREE_OPERAND (qualified_id, 0);\n-  scope = tsubst (scope, args, complain, in_decl);\n-\n   /* Figure out what name to look up.  */\n   name = TREE_OPERAND (qualified_id, 1);\n   if (TREE_CODE (name) == TEMPLATE_ID_EXPR)\n@@ -7161,18 +7157,33 @@ tsubst_qualified_id (tree qualified_id, tree args,\n       template_args = NULL_TREE;\n     }\n \n-  expr = tsubst_copy (name, args, complain, in_decl);\n+  /* Substitute into the qualifying scope.  When there are no ARGS, we\n+     are just trying to simplify a non-dependent expression.  In that\n+     case the qualifying scope may be dependent, and, in any case,\n+     substituting will not help.  */\n+  scope = TREE_OPERAND (qualified_id, 0);\n+  if (args)\n+    {\n+      scope = tsubst (scope, args, complain, in_decl);\n+      expr = tsubst_copy (name, args, complain, in_decl);\n+    }\n+  else\n+    expr = name;\n   if (!BASELINK_P (name)\n       && !DECL_P (expr))\n     expr = lookup_qualified_name (scope, expr, /*is_type_p=*/0);\n   if (DECL_P (expr))\n     check_accessibility_of_qualified_id (expr, \n \t\t\t\t\t /*object_type=*/NULL_TREE,\n \t\t\t\t\t scope);\n-\n+  \n   /* Remember that there was a reference to this entity.  */\n   if (DECL_P (expr))\n-    mark_used (expr);\n+    {\n+      mark_used (expr);\n+      if (!args && TREE_CODE (expr) == VAR_DECL)\n+\texpr = DECL_INITIAL (expr);\n+    }\n \n   if (is_template)\n     lookup_template_function (expr, template_args);\n@@ -11594,6 +11605,31 @@ type_dependent_expression_p (tree expression)\n \treturn dependent_type_p (type);\n     }\n \n+  /* [temp.dep.expr]\n+\n+     An id-expression is type-dependent if it contains a\n+     nested-name-specifier that contains a class-name that names a\n+     dependent type.  */\n+  if (TREE_CODE (expression) == SCOPE_REF\n+      && TYPE_P (TREE_OPERAND (expression, 0)))\n+    {\n+      tree scope;\n+      tree name;\n+\n+      scope = TREE_OPERAND (expression, 0);\n+      name = TREE_OPERAND (expression, 1);\n+\n+      /* The suggested resolution to Core Issue 2 implies that if the\n+\t qualifying type is the current class, then we must peek\n+\t inside it.  */\n+      if (DECL_P (name) \n+\t  && currently_open_class (scope)\n+\t  && !type_dependent_expression_p (name))\n+\treturn false;\n+      if (dependent_type_p (scope))\n+\treturn true;\n+    }\n+\n   if (TREE_CODE (expression) == FUNCTION_DECL\n       && DECL_LANG_SPECIFIC (expression)\n       && DECL_TEMPLATE_INFO (expression)"}, {"sha": "8f4579419a730f7f9352bf6f41b314996daeacab", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6eeba0cc4337f356d68974b8341e84879ec6cd93/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6eeba0cc4337f356d68974b8341e84879ec6cd93/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6eeba0cc4337f356d68974b8341e84879ec6cd93", "patch": "@@ -1,5 +1,8 @@\n 2003-07-11  Mark Mitchell  <mark@codesourcery.com>\n \n+\tPR c++/8327\n+\t* g++.dg/template/scope1.C: New test.\n+\n \t* g++.dg/warn/Wsign-compare-1.C: New test.\n \n 2003-07-10  Kazu Hirata  <kazu@cs.umass.edu>"}, {"sha": "b017b0bdb9b617b010017e1e43842a6b4f7131be", "filename": "gcc/testsuite/g++.dg/template/scope1.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6eeba0cc4337f356d68974b8341e84879ec6cd93/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fscope1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6eeba0cc4337f356d68974b8341e84879ec6cd93/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fscope1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fscope1.C?ref=6eeba0cc4337f356d68974b8341e84879ec6cd93", "patch": "@@ -0,0 +1,12 @@\n+// PR 8327\n+\n+template <class T>\n+class X\n+{\n+  static const int a = 5;\n+\n+  static T b[a];\n+};\n+\n+template <class T> T X<T>::b[X::a];\n+"}]}