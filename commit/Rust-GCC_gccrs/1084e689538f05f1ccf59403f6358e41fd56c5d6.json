{"sha": "1084e689538f05f1ccf59403f6358e41fd56c5d6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTA4NGU2ODk1MzhmMDVmMWNjZjU5NDAzZjYzNThlNDFmZDU2YzVkNg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2007-02-04T13:27:23Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2007-02-04T13:27:23Z"}, "message": "tree-optimize.c (has_abnormal_outgoing_edge_p): Move to tree-inline.\n\n\t* tree-optimize.c (has_abnormal_outgoing_edge_p): Move to tree-inline.\n\t(execute_fixup_cfg): Break out the abnormal goto code.\n\t* tree-inline.c (has_abnormal_outgoing_edge_p): Move here from\n\ttree-optimize.c.\n\t(make_nonlocal_label_edges): Move here from execute_fixup_cfg.\n\t(optimize_inline_calls): Call make_nonlocal_label_edges.\n\nCo-Authored-By: Eric Botcazou <ebotcazou@libertysurf.fr>\n\nFrom-SVN: r121572", "tree": {"sha": "61cbec31f848f75cb6f387628ddf79e4de1f3de6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/61cbec31f848f75cb6f387628ddf79e4de1f3de6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1084e689538f05f1ccf59403f6358e41fd56c5d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1084e689538f05f1ccf59403f6358e41fd56c5d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1084e689538f05f1ccf59403f6358e41fd56c5d6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1084e689538f05f1ccf59403f6358e41fd56c5d6/comments", "author": null, "committer": null, "parents": [{"sha": "facbf9482df37925486b53a299b35d3f4c504c30", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/facbf9482df37925486b53a299b35d3f4c504c30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/facbf9482df37925486b53a299b35d3f4c504c30"}], "stats": {"total": 148, "additions": 83, "deletions": 65}, "files": [{"sha": "0045cfc7152312a431d1afe692839cc38f118ebb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1084e689538f05f1ccf59403f6358e41fd56c5d6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1084e689538f05f1ccf59403f6358e41fd56c5d6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1084e689538f05f1ccf59403f6358e41fd56c5d6", "patch": "@@ -1,3 +1,13 @@\n+2007-02-04  Jan Hubicka  <jh@suse.cz>\n+\t    Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\t* tree-optimize.c (has_abnormal_outgoing_edge_p): Move to tree-inline.\n+\t(execute_fixup_cfg): Break out the abnormal goto code.\n+\t* tree-inline.c (has_abnormal_outgoing_edge_p): Move here from\n+\ttree-optimize.c.\n+\t(make_nonlocal_label_edges): Move here from execute_fixup_cfg.\n+\t(optimize_inline_calls): Call make_nonlocal_label_edges.\n+\n 2007-02-04  Jan Hubicka  <jh@suse.cz>\n \n \t* tree-ssa-copyrename.c (copy_rename_partition_coalesce): Return"}, {"sha": "75a0553f72c46f2221af99ed41ff4d8dfc604270", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1084e689538f05f1ccf59403f6358e41fd56c5d6/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1084e689538f05f1ccf59403f6358e41fd56c5d6/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=1084e689538f05f1ccf59403f6358e41fd56c5d6", "patch": "@@ -2676,6 +2676,75 @@ fold_marked_statements (int first, struct pointer_set_t *statements)\n       }\n }\n \n+/* Return true if BB has at least one abnormal outgoing edge.  */\n+\n+static inline bool\n+has_abnormal_outgoing_edge_p (basic_block bb)\n+{\n+  edge e;\n+  edge_iterator ei;\n+\n+  FOR_EACH_EDGE (e, ei, bb->succs)\n+    if (e->flags & EDGE_ABNORMAL)\n+      return true;\n+\n+  return false;\n+}\n+\n+/* When a block from the inlined function contains a call with side-effects\n+   in the middle gets inlined in a function with non-locals labels, the call\n+   becomes a potential non-local goto so we need to add appropriate edge.  */\n+\n+static void\n+make_nonlocal_label_edges (void)\n+{\n+  block_stmt_iterator bsi;\n+  basic_block bb;\n+\n+  FOR_EACH_BB (bb)\n+    {\n+      for (bsi = bsi_start (bb); !bsi_end_p (bsi); bsi_next (&bsi))\n+\t{\n+\t  tree stmt = bsi_stmt (bsi);\n+\t  if (tree_can_make_abnormal_goto (stmt))\n+\t    {\n+\t      if (stmt == bsi_stmt (bsi_last (bb)))\n+\t\t{\n+\t\t  if (!has_abnormal_outgoing_edge_p (bb))\n+\t\t    make_abnormal_goto_edges (bb, true);\n+\t\t}\n+\t      else\n+\t\t{\n+\t\t  edge e = split_block (bb, stmt);\n+\t\t  bb = e->src;\n+\t\t  make_abnormal_goto_edges (bb, true);\n+\t\t}\n+\t      break;\n+\t    }\n+\n+\t  /* Update PHIs on nonlocal goto receivers we (possibly)\n+\t     just created new edges into.  */\n+\t  if (TREE_CODE (stmt) == LABEL_EXPR\n+\t      && gimple_in_ssa_p (cfun))\n+\t    {\n+\t      tree target = LABEL_EXPR_LABEL (stmt);\n+\t      if (DECL_NONLOCAL (target))\n+\t\t{\n+\t\t  tree phi;\n+\n+\t\t  for (phi = phi_nodes (bb); phi; phi = PHI_CHAIN (phi))\n+\t\t    {\n+\t\t      gcc_assert (SSA_NAME_OCCURS_IN_ABNORMAL_PHI\n+\t\t\t\t  (PHI_RESULT (phi)));\n+\t\t      mark_sym_for_renaming\n+\t\t\t(SSA_NAME_VAR (PHI_RESULT (phi)));\n+\t\t    }\n+\t\t}\n+\t    }\n+\t}\n+    }\n+}\n+\n /* Expand calls to inline functions in the body of FN.  */\n \n unsigned int\n@@ -2751,6 +2820,8 @@ optimize_inline_calls (tree fn)\n   fold_marked_statements (last, id.statements_to_fold);\n   pointer_set_destroy (id.statements_to_fold);\n   fold_cond_expr_cond ();\n+  if (current_function_has_nonlocal_label)\n+    make_nonlocal_label_edges ();\n   /* We make no attempts to keep dominance info up-to-date.  */\n   free_dominance_info (CDI_DOMINATORS);\n   free_dominance_info (CDI_POST_DOMINATORS);"}, {"sha": "e122f48e540ba9db07e99b936e86400808959442", "filename": "gcc/tree-optimize.c", "status": "modified", "additions": 2, "deletions": 65, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1084e689538f05f1ccf59403f6358e41fd56c5d6/gcc%2Ftree-optimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1084e689538f05f1ccf59403f6358e41fd56c5d6/gcc%2Ftree-optimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-optimize.c?ref=1084e689538f05f1ccf59403f6358e41fd56c5d6", "patch": "@@ -267,25 +267,9 @@ struct tree_opt_pass pass_free_cfg_annotations =\n   0\t\t\t\t\t/* letter */\n };\n \n-/* Return true if BB has at least one abnormal outgoing edge.  */\n-\n-static inline bool\n-has_abnormal_outgoing_edge_p (basic_block bb)\n-{\n-  edge e;\n-  edge_iterator ei;\n-\n-  FOR_EACH_EDGE (e, ei, bb->succs)\n-    if (e->flags & EDGE_ABNORMAL)\n-      return true;\n-\n-  return false;\n-}\n-\n /* Pass: fixup_cfg.  IPA passes, compilation of earlier functions or inlining\n-   might have changed some properties, such as marked functions nothrow or\n-   added calls that can potentially go to non-local labels.  Remove redundant\n-   edges and basic blocks, and create new ones if necessary.\n+   might have changed some properties, such as marked functions nothrow.\n+   Remove redundant edges and basic blocks, and create new ones if necessary.\n \n    This pass can't be executed as stand alone pass from pass manager, because\n    in between inlining and this fixup the verify_flow_info would fail.  */\n@@ -327,53 +311,6 @@ execute_fixup_cfg (void)\n           todo |= TODO_cleanup_cfg;\n       }\n \n-  if (current_function_has_nonlocal_label)\n-    {\n-      FOR_EACH_BB (bb)\n-\t{\n-\t  for (bsi = bsi_start (bb); !bsi_end_p (bsi); bsi_next (&bsi))\n-\t    {\n-\t      tree stmt = bsi_stmt (bsi);\n-\t      if (tree_can_make_abnormal_goto (stmt))\n-\t\t{\n-\t\t  if (stmt == bsi_stmt (bsi_last (bb)))\n-\t\t    {\n-\t\t      if (!has_abnormal_outgoing_edge_p (bb))\n-\t\t\tmake_abnormal_goto_edges (bb, true);\n-\t\t    }\n-\t\t  else\n-\t\t    {\n-\t\t      edge e = split_block (bb, stmt);\n-\t\t      bb = e->src;\n-\t\t      make_abnormal_goto_edges (bb, true);\n-\t\t    }\n-\t\t  break;\n-\t\t}\n-\n-\t      /* Update PHIs on nonlocal goto receivers we (possibly)\n-\t\t just created new edges into.  */\n-\t      if (TREE_CODE (stmt) == LABEL_EXPR\n-\t\t  && gimple_in_ssa_p (cfun))\n-\t\t{\n-\t\t  tree target = LABEL_EXPR_LABEL (stmt);\n-\t\t  if (DECL_NONLOCAL (target))\n-\t\t    {\n-\t\t      tree phi;\n-\n-\t\t      for (phi = phi_nodes (bb); phi; phi = PHI_CHAIN (phi))\n-\t\t\t{\n-\t\t          todo |= TODO_update_ssa | TODO_cleanup_cfg;\n-\t\t\t  gcc_assert (SSA_NAME_OCCURS_IN_ABNORMAL_PHI\n-\t\t\t\t      (PHI_RESULT (phi)));\n-\t\t\t  mark_sym_for_renaming\n-\t\t\t    (SSA_NAME_VAR (PHI_RESULT (phi)));\n-\t\t\t}\n-\t\t    }\n-\t\t}\n-\t    }\n-\t}\n-    }\n-\n   /* Dump a textual representation of the flowgraph.  */\n   if (dump_file)\n     dump_tree_cfg (dump_file, dump_flags);"}]}