{"sha": "b2c298ab89d61ab36a68c3d9b694dac248532257", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjJjMjk4YWI4OWQ2MWFiMzZhNjhjM2Q5YjY5NGRhYzI0ODUzMjI1Nw==", "commit": {"author": {"name": "Alessandro Fanfarillo", "email": "fanfarillo.gcc@gmail.com", "date": "2014-09-20T14:14:08Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2014-09-20T14:14:08Z"}, "message": "trans-intrinsic.c (conv_intrinsic_atomic_op): Fix issue with generating temporary for value argument.\n\n2014-09-20  Alessandro Fanfarillo  <fanfarillo.gcc@gmail.com>\n            Tobias Burnus  <burnus@net-b.de>\n\ngcc/fortran\n        * trans-intrinsic.c (conv_intrinsic_atomic_op): Fix issue with\n        generating temporary for value argument.\n\ngcc/testsuite/\n        * gfortran.dg/coarray_atomic_5.f90: New\n\n\nCo-Authored-By: Tobias Burnus <burnus@net-b.de>\n\nFrom-SVN: r215421", "tree": {"sha": "453140ed17ea5f6b6caafee9d4c370f9127fa649", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/453140ed17ea5f6b6caafee9d4c370f9127fa649"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b2c298ab89d61ab36a68c3d9b694dac248532257", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2c298ab89d61ab36a68c3d9b694dac248532257", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2c298ab89d61ab36a68c3d9b694dac248532257", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2c298ab89d61ab36a68c3d9b694dac248532257/comments", "author": null, "committer": null, "parents": [{"sha": "1cc0e19328554e88fd56ce2b0c181737a2d50ccf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cc0e19328554e88fd56ce2b0c181737a2d50ccf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1cc0e19328554e88fd56ce2b0c181737a2d50ccf"}], "stats": {"total": 39, "additions": 38, "deletions": 1}, "files": [{"sha": "389abf3fc1cff3bacbdf354f785b701f52b6b8a7", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2c298ab89d61ab36a68c3d9b694dac248532257/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2c298ab89d61ab36a68c3d9b694dac248532257/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=b2c298ab89d61ab36a68c3d9b694dac248532257", "patch": "@@ -1,3 +1,9 @@\n+2014-09-20  Alessandro Fanfarillo  <fanfarillo.gcc@gmail.com>\n+\t    Tobias Burnus  <burnus@net-b.de>\n+\n+\t* trans-intrinsic.c (conv_intrinsic_atomic_op): Fix issue with\n+\tgenerating temporary for value argument.\n+\n 2014-09-20  Joost VandeVondele  <vondele@gcc.gnu.org>\n \n \t* trans-expr.c (gfc_reset_vptr): Fix comment whitespace."}, {"sha": "55079463b7d95b8d31c3c1790a3f4b52142a4faf", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2c298ab89d61ab36a68c3d9b694dac248532257/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2c298ab89d61ab36a68c3d9b694dac248532257/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=b2c298ab89d61ab36a68c3d9b694dac248532257", "patch": "@@ -8396,7 +8396,7 @@ conv_intrinsic_atomic_op (gfc_code *code)\n       else\n \timage_index = integer_zero_node;\n \n-      if (TREE_TYPE (TREE_TYPE (atom)) != TREE_TYPE (TREE_TYPE (value)))\n+      if (!POINTER_TYPE_P (TREE_TYPE (value)))\n \t{\n \t  tmp = gfc_create_var (TREE_TYPE (TREE_TYPE (atom)), \"value\");\n \t  gfc_add_modify (&block, tmp, fold_convert (TREE_TYPE (tmp), value));"}, {"sha": "0ec7ad7ffa9e8e9ee97f202019ba635a5dd41d98", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2c298ab89d61ab36a68c3d9b694dac248532257/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2c298ab89d61ab36a68c3d9b694dac248532257/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b2c298ab89d61ab36a68c3d9b694dac248532257", "patch": "@@ -1,3 +1,8 @@\n+2014-09-20  Alessandro Fanfarillo  <fanfarillo.gcc@gmail.com>\n+\t    Tobias Burnus  <burnus@net-b.de>\n+\n+\t* gfortran.dg/coarray_atomic_5.f90: New\n+\n 2014-09-19  Jan Hubicka  <hubicka@ucw.cz>\n \n \tPR c++/61825"}, {"sha": "11d52badef1d41fa151eedc9f42fabd07c290800", "filename": "gcc/testsuite/gfortran.dg/coarray_atomic_5.f90", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2c298ab89d61ab36a68c3d9b694dac248532257/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_atomic_5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2c298ab89d61ab36a68c3d9b694dac248532257/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_atomic_5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_atomic_5.f90?ref=b2c298ab89d61ab36a68c3d9b694dac248532257", "patch": "@@ -0,0 +1,26 @@\n+! { dg-do compile }\n+! { dg-options \"-fdump-tree-original -fcoarray=lib\" }\n+!\n+! Argument passing was wrong\n+!\n+\n+program atomic\n+  use iso_fortran_env\n+  implicit none\n+\n+  integer :: me\n+  integer(atomic_int_kind) :: atom[*]\n+  me = this_image()\n+  call atomic_define(atom[1],0)\n+  sync all\n+  call ATOMIC_ADD (atom[1], me)\n+  if(me == 1) call atomic_ref(me,atom[1])\n+  sync all\n+  write(*,*) me\n+end program\n+\n+! { dg-final { scan-tree-dump-times \"value.. = 0;\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"_gfortran_caf_atomic_define \\\\(caf_token.0, 0, 1, &value.., 0B, 1, 4\\\\);\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"_gfortran_caf_atomic_op \\\\(1, caf_token.0, 0, 1, &me, 0B, 0B, 1, 4\\\\);\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"_gfortran_caf_atomic_ref \\\\(caf_token.0, 0, 1, &me, 0B, 1, 4\\\\);\" 1 \"original\" } }\n+! { dg-final { cleanup-tree-dump \"original\" } }"}]}