{"sha": "1eb68d9f414313da853da94fe1581256405c3e05", "node_id": "C_kwDOANBUbNoAKDFlYjY4ZDlmNDE0MzEzZGE4NTNkYTk0ZmUxNTgxMjU2NDA1YzNlMDU", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2023-02-20T22:17:20Z"}, "committer": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2023-02-20T22:18:23Z"}, "message": "i386: Introduce general_x64constmem_operand predicate\n\nInstructions that use high-part QImode registers can not be encoded\nwith REX prefix.  To avoid REX prefix, operand constraints allow\nonly legacy QImode registers, immediates and constant memory operands.\nThe patch introduces matching predicate, so invalid operands are not\ncombined into instruction RTX only to be later fixed up by reload pass.\n\n2023-02-20  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n\ngcc/ChangeLog:\n\n\t* config/i386/predicates.md\n\t(general_x64constmem_operand): New predicate.\n\t* config/i386/i386.md (*cmpqi_ext<mode>_1):\n\tUse nonimm_x64constmem_operand.\n\t(*cmpqi_ext<mode>_3): Use general_x64constmem_operand.\n\t(*addqi_ext<mode>_1): Ditto.\n\t(*testqi_ext<mode>_1): Ditto.\n\t(*andqi_ext<mode>_1): Ditto.\n\t(*andqi_ext<mode>_1_cc): Ditto.\n\t(*<any_or:code>qi_ext<mode>_1): Ditto.\n\t(*xorqi_ext<mode>_1_cc): Ditto.", "tree": {"sha": "9bb935d166b52e75435976602d94c0af10b6427d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9bb935d166b52e75435976602d94c0af10b6427d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1eb68d9f414313da853da94fe1581256405c3e05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1eb68d9f414313da853da94fe1581256405c3e05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1eb68d9f414313da853da94fe1581256405c3e05", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1eb68d9f414313da853da94fe1581256405c3e05/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd8b4fae52d02541c2d8bd2200caad3812f37368", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd8b4fae52d02541c2d8bd2200caad3812f37368", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd8b4fae52d02541c2d8bd2200caad3812f37368"}], "stats": {"total": 23, "additions": 15, "deletions": 8}, "files": [{"sha": "8ebb12be2c90752a4af01bb3d94be14bec60a7eb", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eb68d9f414313da853da94fe1581256405c3e05/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eb68d9f414313da853da94fe1581256405c3e05/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=1eb68d9f414313da853da94fe1581256405c3e05", "patch": "@@ -1456,7 +1456,7 @@\n (define_insn \"*cmpqi_ext<mode>_1\"\n   [(set (reg FLAGS_REG)\n \t(compare\n-\t  (match_operand:QI 0 \"nonimmediate_operand\" \"QBc,m\")\n+\t  (match_operand:QI 0 \"nonimm_x64constmem_operand\" \"QBc,m\")\n \t  (subreg:QI\n \t    (zero_extract:SWI248\n \t      (match_operand 1 \"int248_register_operand\" \"Q,Q\")\n@@ -1501,7 +1501,7 @@\n \t      (match_operand 0 \"int248_register_operand\" \"Q,Q\")\n \t      (const_int 8)\n \t      (const_int 8)) 0)\n-\t  (match_operand:QI 1 \"general_operand\" \"QnBc,m\")))]\n+\t  (match_operand:QI 1 \"general_x64constmem_operand\" \"QnBc,m\")))]\n   \"ix86_match_ccmode (insn, CCmode)\"\n   \"cmp{b}\\t{%1, %h0|%h0, %1}\"\n   [(set_attr \"isa\" \"*,nox64\")\n@@ -6683,7 +6683,7 @@\n \t        (match_operand 1 \"int248_register_operand\" \"0,0\")\n \t\t(const_int 8)\n \t\t(const_int 8)) 0)\n-\t    (match_operand:QI 2 \"general_operand\" \"QnBc,m\")) 0))\n+\t    (match_operand:QI 2 \"general_x64constmem_operand\" \"QnBc,m\")) 0))\n    (clobber (reg:CC FLAGS_REG))]\n   \"/* FIXME: without this LRA can't reload this pattern, see PR82524.  */\n    rtx_equal_p (operands[0], operands[1])\"\n@@ -9901,7 +9901,7 @@\n \t        (match_operand 0 \"int248_register_operand\" \"Q,Q\")\n \t\t(const_int 8)\n \t\t(const_int 8)) 0)\n-\t    (match_operand:QI 1 \"general_operand\" \"QnBc,m\"))\n+\t    (match_operand:QI 1 \"general_x64constmem_operand\" \"QnBc,m\"))\n \t  (const_int 0)))]\n   \"ix86_match_ccmode (insn, CCNOmode)\"\n   \"test{b}\\t{%1, %h0|%h0, %1}\"\n@@ -10602,7 +10602,7 @@\n \t        (match_operand 1 \"int248_register_operand\" \"0,0\")\n \t\t(const_int 8)\n \t\t(const_int 8)) 0)\n-\t    (match_operand:QI 2 \"general_operand\" \"QnBc,m\")) 0))\n+\t    (match_operand:QI 2 \"general_x64constmem_operand\" \"QnBc,m\")) 0))\n    (clobber (reg:CC FLAGS_REG))]\n   \"/* FIXME: without this LRA can't reload this pattern, see PR82524.  */\n    rtx_equal_p (operands[0], operands[1])\"\n@@ -10622,7 +10622,7 @@\n \t        (match_operand 1 \"int248_register_operand\" \"0,0\")\n \t\t(const_int 8)\n \t\t(const_int 8)) 0)\n-\t    (match_operand:QI 2 \"general_operand\" \"QnBc,m\"))\n+\t    (match_operand:QI 2 \"general_x64constmem_operand\" \"QnBc,m\"))\n \t  (const_int 0)))\n    (set (zero_extract:SWI248\n \t  (match_operand 0 \"int248_register_operand\" \"+Q,Q\")\n@@ -11345,7 +11345,7 @@\n \t        (match_operand 1 \"int248_register_operand\" \"0,0\")\n \t\t(const_int 8)\n \t\t(const_int 8)) 0)\n-\t    (match_operand:QI 2 \"general_operand\" \"QnBc,m\")) 0))\n+\t    (match_operand:QI 2 \"general_x64constmem_operand\" \"QnBc,m\")) 0))\n    (clobber (reg:CC FLAGS_REG))]\n   \"(!TARGET_PARTIAL_REG_STALL || optimize_function_for_size_p (cfun))\n    /* FIXME: without this LRA can't reload this pattern, see PR82524.  */\n@@ -11473,7 +11473,7 @@\n \t        (match_operand 1 \"int248_register_operand\" \"0,0\")\n \t\t(const_int 8)\n \t\t(const_int 8)) 0)\n-\t    (match_operand:QI 2 \"general_operand\" \"QnBc,m\"))\n+\t    (match_operand:QI 2 \"general_x64constmem_operand\" \"QnBc,m\"))\n \t  (const_int 0)))\n    (set (zero_extract:SWI248\n \t  (match_operand 0 \"int248_register_operand\" \"+Q,Q\")"}, {"sha": "b4d9ab40ab93c4a92de796dd805263efca4a5c73", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eb68d9f414313da853da94fe1581256405c3e05/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eb68d9f414313da853da94fe1581256405c3e05/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=1eb68d9f414313da853da94fe1581256405c3e05", "patch": "@@ -116,6 +116,13 @@\n \t    (ior (not (match_test \"TARGET_64BIT\"))\n \t\t (match_test \"constant_address_p (XEXP (op, 0))\")))))\n \n+;; Match general operand, but exclude non-constant addresses for x86_64.\n+(define_predicate \"general_x64constmem_operand\"\n+  (ior (match_operand 0 \"nonmemory_operand\")\n+       (and (match_operand 0 \"memory_operand\")\n+\t    (ior (not (match_test \"TARGET_64BIT\"))\n+\t\t (match_test \"constant_address_p (XEXP (op, 0))\")))))\n+\n ;; Match register operands, but include memory operands for TARGET_SSE_MATH.\n (define_predicate \"register_ssemem_operand\"\n   (if_then_else"}]}