{"sha": "cb3b8d33faa3a649b02827649f9c76e40edace15", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2IzYjhkMzNmYWEzYTY0OWIwMjgyNzY0OWY5Yzc2ZTQwZWRhY2UxNQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2013-05-10T08:40:10Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2013-05-10T08:40:10Z"}, "message": "re PR tree-optimization/45216 (Rotate expressions not recognized at tree level)\n\n\tPR tree-optimization/45216\n\tPR tree-optimization/57157\n\t* tree-ssa-forwprop.c (simplify_rotate): New function.\n\t(ssa_forward_propagate_and_combine): Call it.\n\n\t* c-c++-common/rotate-1.c: New test.\n\t* c-c++-common/rotate-1a.c: New test.\n\t* c-c++-common/rotate-2.c: New test.\n\t* c-c++-common/rotate-2a.c: New test.\n\t* c-c++-common/rotate-3.c: New test.\n\t* c-c++-common/rotate-3a.c: New test.\n\t* c-c++-common/rotate-4.c: New test.\n\t* c-c++-common/rotate-4a.c: New test.\n\nFrom-SVN: r198769", "tree": {"sha": "48fdd5402146ff7985941320929c5cda2e1a1c90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/48fdd5402146ff7985941320929c5cda2e1a1c90"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cb3b8d33faa3a649b02827649f9c76e40edace15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb3b8d33faa3a649b02827649f9c76e40edace15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb3b8d33faa3a649b02827649f9c76e40edace15", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb3b8d33faa3a649b02827649f9c76e40edace15/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fb7f649d713491d28fd41f3ce12e474af03617df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb7f649d713491d28fd41f3ce12e474af03617df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb7f649d713491d28fd41f3ce12e474af03617df"}], "stats": {"total": 1879, "additions": 1879, "deletions": 0}, "files": [{"sha": "82b35a1e601fc9760185e6888cbd39f577171588", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb3b8d33faa3a649b02827649f9c76e40edace15/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb3b8d33faa3a649b02827649f9c76e40edace15/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cb3b8d33faa3a649b02827649f9c76e40edace15", "patch": "@@ -1,3 +1,10 @@\n+2013-05-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/45216\n+\tPR tree-optimization/57157\n+\t* tree-ssa-forwprop.c (simplify_rotate): New function.\n+\t(ssa_forward_propagate_and_combine): Call it.\n+\n 2013-05-10  Richard Biener  <rguenther@suse.de>\n \n \t* tree-vect-data-refs.c (vect_enhance_data_refs_alignment): Do not"}, {"sha": "19e0a5b54011ad287619807a5c8f9f537e46b809", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb3b8d33faa3a649b02827649f9c76e40edace15/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb3b8d33faa3a649b02827649f9c76e40edace15/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cb3b8d33faa3a649b02827649f9c76e40edace15", "patch": "@@ -1,3 +1,16 @@\n+2013-05-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/45216\n+\tPR tree-optimization/57157\n+\t* c-c++-common/rotate-1.c: New test.\n+\t* c-c++-common/rotate-1a.c: New test.\n+\t* c-c++-common/rotate-2.c: New test.\n+\t* c-c++-common/rotate-2a.c: New test.\n+\t* c-c++-common/rotate-3.c: New test.\n+\t* c-c++-common/rotate-3a.c: New test.\n+\t* c-c++-common/rotate-4.c: New test.\n+\t* c-c++-common/rotate-4a.c: New test.\n+\n 2013-05-10  Richard Biener  <rguenther@suse.de>\n \n \t* gcc.target/i386/avx256-unaligned-load-2.c: Make well-defined."}, {"sha": "ec3e90bd6fd6160f168155b2bc7b631fa4e12001", "filename": "gcc/testsuite/c-c++-common/rotate-1.c", "status": "added", "additions": 389, "deletions": 0, "changes": 389, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb3b8d33faa3a649b02827649f9c76e40edace15/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Frotate-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb3b8d33faa3a649b02827649f9c76e40edace15/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Frotate-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Frotate-1.c?ref=cb3b8d33faa3a649b02827649f9c76e40edace15", "patch": "@@ -0,0 +1,389 @@\n+/* Check rotate pattern detection.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-times \"r\\[<>]\\[<>]\" 64 \"optimized\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */\n+\n+unsigned int\n+f1 (unsigned int x, unsigned int y)\n+{\n+  return (x << y) | (x >> (__CHAR_BIT__ * __SIZEOF_INT__ - y));\n+}\n+\n+unsigned int\n+f2 (unsigned int x, unsigned long int y)\n+{\n+  return (x << y) | (x >> (__CHAR_BIT__ * __SIZEOF_INT__ - y));\n+}\n+\n+unsigned int\n+f3 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x << 1) | (x >> (__CHAR_BIT__ * __SIZEOF_INT__ - 1));\n+}\n+\n+unsigned int\n+f4 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x << (__CHAR_BIT__ * __SIZEOF_INT__ - 1)) | (x >> 1);\n+}\n+\n+unsigned short int\n+f5 (unsigned short int x, unsigned int y)\n+{\n+  return (x << y) | (x >> (__CHAR_BIT__ * __SIZEOF_SHORT__ - y));\n+}\n+\n+unsigned short int\n+f6 (unsigned short int x, unsigned long int y)\n+{\n+  return (x << y) | (x >> (__CHAR_BIT__ * __SIZEOF_SHORT__ - y));\n+}\n+\n+unsigned char\n+f7 (unsigned char x, unsigned int y)\n+{\n+  return (x << y) | (x >> (__CHAR_BIT__ - y));\n+}\n+\n+unsigned char\n+f8 (unsigned char x, unsigned long int y)\n+{\n+  return (x << y) | (x >> (__CHAR_BIT__ - y));\n+}\n+\n+unsigned int\n+f9 (unsigned int x, unsigned int y)\n+{\n+  return (x << y) | (x >> (__CHAR_BIT__ * sizeof (unsigned int) - y));\n+}\n+\n+unsigned int\n+f10 (unsigned int x, unsigned long int y)\n+{\n+  return (x << y) | (x >> (__CHAR_BIT__ * sizeof (unsigned int) - y));\n+}\n+\n+unsigned int\n+f11 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x << 1) | (x >> (__CHAR_BIT__ * sizeof (unsigned int) - 1));\n+}\n+\n+unsigned int\n+f12 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x << (__CHAR_BIT__ * sizeof (unsigned int) - 1)) | (x >> 1);\n+}\n+\n+unsigned short int\n+f13 (unsigned short int x, unsigned int y)\n+{\n+  return (x << y) | (x >> (__CHAR_BIT__ * sizeof (unsigned short) - y));\n+}\n+\n+unsigned short int\n+f14 (unsigned short int x, unsigned long int y)\n+{\n+  return (x << y) | (x >> (__CHAR_BIT__ * sizeof (unsigned short) - y));\n+}\n+\n+unsigned char\n+f15 (unsigned char x, unsigned int y)\n+{\n+  return (x << y) | (x >> (__CHAR_BIT__ * sizeof (unsigned char) - y));\n+}\n+\n+unsigned char\n+f16 (unsigned char x, unsigned long int y)\n+{\n+  return (x << y) | (x >> (__CHAR_BIT__ * sizeof (unsigned char) - y));\n+}\n+\n+unsigned int\n+f17 (unsigned int x, unsigned int y)\n+{\n+  return (x >> (__CHAR_BIT__ * __SIZEOF_INT__ - y)) ^ (x << y);\n+}\n+\n+unsigned int\n+f18 (unsigned int x, unsigned long int y)\n+{\n+  return (x >> (__CHAR_BIT__ * __SIZEOF_INT__ - y)) ^ (x << y);\n+}\n+\n+unsigned int\n+f19 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x >> (__CHAR_BIT__ * __SIZEOF_INT__ - 1)) ^ (x << 1);\n+}\n+\n+unsigned int\n+f20 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x >> 1) ^ (x << (__CHAR_BIT__ * __SIZEOF_INT__ - 1));\n+}\n+\n+unsigned short int\n+f21 (unsigned short int x, unsigned int y)\n+{\n+  return (x >> (__CHAR_BIT__ * __SIZEOF_SHORT__ - y)) ^ (x << y);\n+}\n+\n+unsigned short int\n+f22 (unsigned short int x, unsigned long int y)\n+{\n+  return (x >> (__CHAR_BIT__ * __SIZEOF_SHORT__ - y)) ^ (x << y);\n+}\n+\n+unsigned char\n+f23 (unsigned char x, unsigned int y)\n+{\n+  return (x >> (__CHAR_BIT__ - y)) ^ (x << y);\n+}\n+\n+unsigned char\n+f24 (unsigned char x, unsigned long int y)\n+{\n+  return (x >> (__CHAR_BIT__ - y)) ^ (x << y);\n+}\n+\n+unsigned int\n+f25 (unsigned int x, unsigned int y)\n+{\n+  return (x >> (__CHAR_BIT__ * sizeof (unsigned int) - y)) ^ (x << y);\n+}\n+\n+unsigned int\n+f26 (unsigned int x, unsigned long int y)\n+{\n+  return (x >> (__CHAR_BIT__ * sizeof (unsigned int) - y)) ^ (x << y);\n+}\n+\n+unsigned int\n+f27 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x >> (__CHAR_BIT__ * sizeof (unsigned int) - 1)) ^ (x << 1);\n+}\n+\n+unsigned int\n+f28 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x >> 1) ^ (x << (__CHAR_BIT__ * sizeof (unsigned int) - 1));\n+}\n+\n+unsigned short int\n+f29 (unsigned short int x, unsigned int y)\n+{\n+  return (x >> (__CHAR_BIT__ * sizeof (unsigned short) - y)) ^ (x << y);\n+}\n+\n+unsigned short int\n+f30 (unsigned short int x, unsigned long int y)\n+{\n+  return (x >> (__CHAR_BIT__ * sizeof (unsigned short) - y)) ^ (x << y);\n+}\n+\n+unsigned char\n+f31 (unsigned char x, unsigned int y)\n+{\n+  return (x >> (__CHAR_BIT__ * sizeof (unsigned char) - y)) ^ (x << y);\n+}\n+\n+unsigned char\n+f32 (unsigned char x, unsigned long int y)\n+{\n+  return (x >> (__CHAR_BIT__ * sizeof (unsigned char) - y)) ^ (x << y);\n+}\n+\n+unsigned int\n+f33 (unsigned int x, unsigned int y)\n+{\n+  return (x >> y) | (x << (__CHAR_BIT__ * __SIZEOF_INT__ - y));\n+}\n+\n+unsigned int\n+f34 (unsigned int x, unsigned long int y)\n+{\n+  return (x >> y) | (x << (__CHAR_BIT__ * __SIZEOF_INT__ - y));\n+}\n+\n+unsigned int\n+f35 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x >> 1) | (x << (__CHAR_BIT__ * __SIZEOF_INT__ - 1));\n+}\n+\n+unsigned int\n+f36 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x >> (__CHAR_BIT__ * __SIZEOF_INT__ - 1)) | (x << 1);\n+}\n+\n+unsigned short int\n+f37 (unsigned short int x, unsigned int y)\n+{\n+  return (x >> y) | (x << (__CHAR_BIT__ * __SIZEOF_SHORT__ - y));\n+}\n+\n+unsigned short int\n+f38 (unsigned short int x, unsigned long int y)\n+{\n+  return (x >> y) | (x << (__CHAR_BIT__ * __SIZEOF_SHORT__ - y));\n+}\n+\n+unsigned char\n+f39 (unsigned char x, unsigned int y)\n+{\n+  return (x >> y) | (x << (__CHAR_BIT__ - y));\n+}\n+\n+unsigned char\n+f40 (unsigned char x, unsigned long int y)\n+{\n+  return (x >> y) | (x << (__CHAR_BIT__ - y));\n+}\n+\n+unsigned int\n+f41 (unsigned int x, unsigned int y)\n+{\n+  return (x >> y) | (x << (__CHAR_BIT__ * sizeof (unsigned int) - y));\n+}\n+\n+unsigned int\n+f42 (unsigned int x, unsigned long int y)\n+{\n+  return (x >> y) | (x << (__CHAR_BIT__ * sizeof (unsigned int) - y));\n+}\n+\n+unsigned int\n+f43 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x >> 1) | (x << (__CHAR_BIT__ * sizeof (unsigned int) - 1));\n+}\n+\n+unsigned int\n+f44 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x >> (__CHAR_BIT__ * sizeof (unsigned int) - 1)) | (x << 1);\n+}\n+\n+unsigned short int\n+f45 (unsigned short int x, unsigned int y)\n+{\n+  return (x >> y) | (x << (__CHAR_BIT__ * sizeof (unsigned short) - y));\n+}\n+\n+unsigned short int\n+f46 (unsigned short int x, unsigned long int y)\n+{\n+  return (x >> y) | (x << (__CHAR_BIT__ * sizeof (unsigned short) - y));\n+}\n+\n+unsigned char\n+f47 (unsigned char x, unsigned int y)\n+{\n+  return (x >> y) | (x << (__CHAR_BIT__ * sizeof (unsigned char) - y));\n+}\n+\n+unsigned char\n+f48 (unsigned char x, unsigned long int y)\n+{\n+  return (x >> y) | (x << (__CHAR_BIT__ * sizeof (unsigned char) - y));\n+}\n+\n+unsigned int\n+f49 (unsigned int x, unsigned int y)\n+{\n+  return (x << (__CHAR_BIT__ * __SIZEOF_INT__ - y)) ^ (x >> y);\n+}\n+\n+unsigned int\n+f50 (unsigned int x, unsigned long int y)\n+{\n+  return (x << (__CHAR_BIT__ * __SIZEOF_INT__ - y)) ^ (x >> y);\n+}\n+\n+unsigned int\n+f51 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x << (__CHAR_BIT__ * __SIZEOF_INT__ - 1)) ^ (x >> 1);\n+}\n+\n+unsigned int\n+f52 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x << 1) ^ (x >> (__CHAR_BIT__ * __SIZEOF_INT__ - 1));\n+}\n+\n+unsigned short int\n+f53 (unsigned short int x, unsigned int y)\n+{\n+  return (x << (__CHAR_BIT__ * __SIZEOF_SHORT__ - y)) ^ (x >> y);\n+}\n+\n+unsigned short int\n+f54 (unsigned short int x, unsigned long int y)\n+{\n+  return (x << (__CHAR_BIT__ * __SIZEOF_SHORT__ - y)) ^ (x >> y);\n+}\n+\n+unsigned char\n+f55 (unsigned char x, unsigned int y)\n+{\n+  return (x << (__CHAR_BIT__ - y)) ^ (x >> y);\n+}\n+\n+unsigned char\n+f56 (unsigned char x, unsigned long int y)\n+{\n+  return (x << (__CHAR_BIT__ - y)) ^ (x >> y);\n+}\n+\n+unsigned int\n+f57 (unsigned int x, unsigned int y)\n+{\n+  return (x << (__CHAR_BIT__ * sizeof (unsigned int) - y)) ^ (x >> y);\n+}\n+\n+unsigned int\n+f58 (unsigned int x, unsigned long int y)\n+{\n+  return (x << (__CHAR_BIT__ * sizeof (unsigned int) - y)) ^ (x >> y);\n+}\n+\n+unsigned int\n+f59 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x << (__CHAR_BIT__ * sizeof (unsigned int) - 1)) ^ (x >> 1);\n+}\n+\n+unsigned int\n+f60 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x << 1) ^ (x >> (__CHAR_BIT__ * sizeof (unsigned int) - 1));\n+}\n+\n+unsigned short int\n+f61 (unsigned short int x, unsigned int y)\n+{\n+  return (x << (__CHAR_BIT__ * sizeof (unsigned short) - y)) ^ (x >> y);\n+}\n+\n+unsigned short int\n+f62 (unsigned short int x, unsigned long int y)\n+{\n+  return (x << (__CHAR_BIT__ * sizeof (unsigned short) - y)) ^ (x >> y);\n+}\n+\n+unsigned char\n+f63 (unsigned char x, unsigned int y)\n+{\n+  return (x << (__CHAR_BIT__ * sizeof (unsigned char) - y)) ^ (x >> y);\n+}\n+\n+unsigned char\n+f64 (unsigned char x, unsigned long int y)\n+{\n+  return (x << (__CHAR_BIT__ * sizeof (unsigned char) - y)) ^ (x >> y);\n+}"}, {"sha": "fc838a87fcfa69b2fb0a71ccbe108aa43bbdff2c", "filename": "gcc/testsuite/c-c++-common/rotate-1a.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb3b8d33faa3a649b02827649f9c76e40edace15/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Frotate-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb3b8d33faa3a649b02827649f9c76e40edace15/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Frotate-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Frotate-1a.c?ref=cb3b8d33faa3a649b02827649f9c76e40edace15", "patch": "@@ -0,0 +1,44 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -Wno-overflow\" } */\n+\n+extern\n+#ifdef __cplusplus\n+\"C\"\n+#endif\n+void abort (void);\n+\n+#ifndef ROTATE_N\n+#define ROTATE_N \"rotate-1.c\"\n+#endif\n+\n+#include ROTATE_N\n+\n+unsigned int expected[] = {\n+0x91a2b3c0, 0x91a2b3c0, 0x2468acf0, 0x91a2b3c, 0xb3c2, 0xb3c2, 0xc3, 0xc3,\n+0x91a2b3c0, 0x91a2b3c0, 0x2468acf0, 0x91a2b3c, 0xb3c2, 0xb3c2, 0xc3, 0xc3,\n+0x91a2b3c0, 0x91a2b3c0, 0x2468acf0, 0x91a2b3c, 0xb3c2, 0xb3c2, 0xc3, 0xc3,\n+0x91a2b3c0, 0x91a2b3c0, 0x2468acf0, 0x91a2b3c, 0xb3c2, 0xb3c2, 0xc3, 0xc3,\n+0x2468acf, 0x2468acf, 0x91a2b3c, 0x2468acf0, 0xacf, 0xacf, 0xf, 0xf,\n+0x2468acf, 0x2468acf, 0x91a2b3c, 0x2468acf0, 0xacf, 0xacf, 0xf, 0xf,\n+0x2468acf, 0x2468acf, 0x91a2b3c, 0x2468acf0, 0xacf, 0xacf, 0xf, 0xf,\n+0x2468acf, 0x2468acf, 0x91a2b3c, 0x2468acf0, 0xacf, 0xacf, 0xf, 0xf };\n+\n+#define F(n) __typeof (f##n) f##n __attribute__((noinline, noclone));\n+#define D(n) F(n##0) F(n##1) F(n##2) F(n##3) F(n##4) F(n##5) F(n##6) F(n##7) F(n##8) F(n##9)\n+#define ALL \\\n+F(1) F(2) F(3) F(4) F(5) F(6) F(7) F(8) F(9) \\\n+D(1) D(2) D(3) D(4) D(5) F(60) F(61) F(62) F(63) F(64)\n+ALL\n+\n+int\n+main ()\n+{\n+#if __CHAR_BIT__ != 8 || __SIZEOF_SHORT__ != 2 || __SIZEOF_INT__ != 4\n+  return 0;\n+#else\n+#undef F\n+#define F(n) if ((unsigned int) f##n (0x12345678U, 3) != expected[n - 1]) abort ();\n+  ALL\n+  return 0;\n+#endif\n+}"}, {"sha": "d8538667c62237e141707e45efefc24e5a5b753d", "filename": "gcc/testsuite/c-c++-common/rotate-2.c", "status": "added", "additions": 389, "deletions": 0, "changes": 389, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb3b8d33faa3a649b02827649f9c76e40edace15/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Frotate-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb3b8d33faa3a649b02827649f9c76e40edace15/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Frotate-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Frotate-2.c?ref=cb3b8d33faa3a649b02827649f9c76e40edace15", "patch": "@@ -0,0 +1,389 @@\n+/* Check rotate pattern detection.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-times \"r\\[<>]\\[<>]\" 64 \"optimized\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */\n+\n+unsigned int\n+f1 (unsigned int x, unsigned int y)\n+{\n+  return (x << y) | (x >> ((-y) & (__CHAR_BIT__ * __SIZEOF_INT__ - 1)));\n+}\n+\n+unsigned int\n+f2 (unsigned int x, unsigned long int y)\n+{\n+  return (x << y) | (x >> ((-y) & (__CHAR_BIT__ * __SIZEOF_INT__ - 1)));\n+}\n+\n+unsigned int\n+f3 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x << 1) | (x >> ((-1) & (__CHAR_BIT__ * __SIZEOF_INT__ - 1)));\n+}\n+\n+unsigned int\n+f4 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x << ((-1) & (__CHAR_BIT__ * __SIZEOF_INT__ - 1))) | (x >> 1);\n+}\n+\n+unsigned short int\n+f5 (unsigned short int x, unsigned int y)\n+{\n+  return (x << y) | (x >> ((-y) & (__CHAR_BIT__ * __SIZEOF_SHORT__ - 1)));\n+}\n+\n+unsigned short int\n+f6 (unsigned short int x, unsigned long int y)\n+{\n+  return (x << y) | (x >> ((-y) & (__CHAR_BIT__ * __SIZEOF_SHORT__ - 1)));\n+}\n+\n+unsigned char\n+f7 (unsigned char x, unsigned int y)\n+{\n+  return (x << y) | (x >> ((-y) & (__CHAR_BIT__ - 1)));\n+}\n+\n+unsigned char\n+f8 (unsigned char x, unsigned long int y)\n+{\n+  return (x << y) | (x >> ((-y) & (__CHAR_BIT__ - 1)));\n+}\n+\n+unsigned int\n+f9 (unsigned int x, unsigned int y)\n+{\n+  return (x << y) | (x >> ((-y) & (__CHAR_BIT__ * sizeof (unsigned int) - 1)));\n+}\n+\n+unsigned int\n+f10 (unsigned int x, unsigned long int y)\n+{\n+  return (x << y) | (x >> ((-y) & (__CHAR_BIT__ * sizeof (unsigned int) - 1)));\n+}\n+\n+unsigned int\n+f11 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x << 1) | (x >> ((-1) & (__CHAR_BIT__ * sizeof (unsigned int) - 1)));\n+}\n+\n+unsigned int\n+f12 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x << ((-1) & (__CHAR_BIT__ * sizeof (unsigned int) - 1))) | (x >> 1);\n+}\n+\n+unsigned short int\n+f13 (unsigned short int x, unsigned int y)\n+{\n+  return (x << y) | (x >> ((-y) & (__CHAR_BIT__ * sizeof (unsigned short) - 1)));\n+}\n+\n+unsigned short int\n+f14 (unsigned short int x, unsigned long int y)\n+{\n+  return (x << y) | (x >> ((-y) & (__CHAR_BIT__ * sizeof (unsigned short) - 1)));\n+}\n+\n+unsigned char\n+f15 (unsigned char x, unsigned int y)\n+{\n+  return (x << y) | (x >> ((-y) & (__CHAR_BIT__ * sizeof (unsigned char) - 1)));\n+}\n+\n+unsigned char\n+f16 (unsigned char x, unsigned long int y)\n+{\n+  return (x << y) | (x >> ((-y) & (__CHAR_BIT__ * sizeof (unsigned char) - 1)));\n+}\n+\n+unsigned int\n+f17 (unsigned int x, unsigned int y)\n+{\n+  return (x >> ((-y) & (__CHAR_BIT__ * __SIZEOF_INT__ - 1))) ^ (x << y);\n+}\n+\n+unsigned int\n+f18 (unsigned int x, unsigned long int y)\n+{\n+  return (x >> ((-y) & (__CHAR_BIT__ * __SIZEOF_INT__ - 1))) ^ (x << y);\n+}\n+\n+unsigned int\n+f19 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x >> ((-1) & (__CHAR_BIT__ * __SIZEOF_INT__ - 1))) ^ (x << 1);\n+}\n+\n+unsigned int\n+f20 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x >> 1) ^ (x << ((-1) & (__CHAR_BIT__ * __SIZEOF_INT__ - 1)));\n+}\n+\n+unsigned short int\n+f21 (unsigned short int x, unsigned int y)\n+{\n+  return (x >> ((-y) & (__CHAR_BIT__ * __SIZEOF_SHORT__ - 1))) ^ (x << y);\n+}\n+\n+unsigned short int\n+f22 (unsigned short int x, unsigned long int y)\n+{\n+  return (x >> ((-y) & (__CHAR_BIT__ * __SIZEOF_SHORT__ - 1))) ^ (x << y);\n+}\n+\n+unsigned char\n+f23 (unsigned char x, unsigned int y)\n+{\n+  return (x >> ((-y) & (__CHAR_BIT__ - 1))) ^ (x << y);\n+}\n+\n+unsigned char\n+f24 (unsigned char x, unsigned long int y)\n+{\n+  return (x >> ((-y) & (__CHAR_BIT__ - 1))) ^ (x << y);\n+}\n+\n+unsigned int\n+f25 (unsigned int x, unsigned int y)\n+{\n+  return (x >> ((-y) & (__CHAR_BIT__ * sizeof (unsigned int) - 1))) ^ (x << y);\n+}\n+\n+unsigned int\n+f26 (unsigned int x, unsigned long int y)\n+{\n+  return (x >> ((-y) & (__CHAR_BIT__ * sizeof (unsigned int) - 1))) ^ (x << y);\n+}\n+\n+unsigned int\n+f27 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x >> ((-1) & (__CHAR_BIT__ * sizeof (unsigned int) - 1))) ^ (x << 1);\n+}\n+\n+unsigned int\n+f28 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x >> 1) ^ (x << ((-1) & (__CHAR_BIT__ * sizeof (unsigned int) - 1)));\n+}\n+\n+unsigned short int\n+f29 (unsigned short int x, unsigned int y)\n+{\n+  return (x >> ((-y) & (__CHAR_BIT__ * sizeof (unsigned short) - 1))) ^ (x << y);\n+}\n+\n+unsigned short int\n+f30 (unsigned short int x, unsigned long int y)\n+{\n+  return (x >> ((-y) & (__CHAR_BIT__ * sizeof (unsigned short) - 1))) ^ (x << y);\n+}\n+\n+unsigned char\n+f31 (unsigned char x, unsigned int y)\n+{\n+  return (x >> ((-y) & (__CHAR_BIT__ * sizeof (unsigned char) - 1))) ^ (x << y);\n+}\n+\n+unsigned char\n+f32 (unsigned char x, unsigned long int y)\n+{\n+  return (x >> ((-y) & (__CHAR_BIT__ * sizeof (unsigned char) - 1))) ^ (x << y);\n+}\n+\n+unsigned int\n+f33 (unsigned int x, unsigned int y)\n+{\n+  return (x >> y) | (x << ((-y) & (__CHAR_BIT__ * __SIZEOF_INT__ - 1)));\n+}\n+\n+unsigned int\n+f34 (unsigned int x, unsigned long int y)\n+{\n+  return (x >> y) | (x << ((-y) & (__CHAR_BIT__ * __SIZEOF_INT__ - 1)));\n+}\n+\n+unsigned int\n+f35 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x >> 1) | (x << ((-1) & (__CHAR_BIT__ * __SIZEOF_INT__ - 1)));\n+}\n+\n+unsigned int\n+f36 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x >> ((-1) & (__CHAR_BIT__ * __SIZEOF_INT__ - 1))) | (x << 1);\n+}\n+\n+unsigned short int\n+f37 (unsigned short int x, unsigned int y)\n+{\n+  return (x >> y) | (x << ((-y) & (__CHAR_BIT__ * __SIZEOF_SHORT__ - 1)));\n+}\n+\n+unsigned short int\n+f38 (unsigned short int x, unsigned long int y)\n+{\n+  return (x >> y) | (x << ((-y) & (__CHAR_BIT__ * __SIZEOF_SHORT__ - 1)));\n+}\n+\n+unsigned char\n+f39 (unsigned char x, unsigned int y)\n+{\n+  return (x >> y) | (x << ((-y) & (__CHAR_BIT__ - 1)));\n+}\n+\n+unsigned char\n+f40 (unsigned char x, unsigned long int y)\n+{\n+  return (x >> y) | (x << ((-y) & (__CHAR_BIT__ - 1)));\n+}\n+\n+unsigned int\n+f41 (unsigned int x, unsigned int y)\n+{\n+  return (x >> y) | (x << ((-y) & (__CHAR_BIT__ * sizeof (unsigned int) - 1)));\n+}\n+\n+unsigned int\n+f42 (unsigned int x, unsigned long int y)\n+{\n+  return (x >> y) | (x << ((-y) & (__CHAR_BIT__ * sizeof (unsigned int) - 1)));\n+}\n+\n+unsigned int\n+f43 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x >> 1) | (x << ((-1) & (__CHAR_BIT__ * sizeof (unsigned int) - 1)));\n+}\n+\n+unsigned int\n+f44 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x >> ((-1) & (__CHAR_BIT__ * sizeof (unsigned int) - 1))) | (x << 1);\n+}\n+\n+unsigned short int\n+f45 (unsigned short int x, unsigned int y)\n+{\n+  return (x >> y) | (x << ((-y) & (__CHAR_BIT__ * sizeof (unsigned short) - 1)));\n+}\n+\n+unsigned short int\n+f46 (unsigned short int x, unsigned long int y)\n+{\n+  return (x >> y) | (x << ((-y) & (__CHAR_BIT__ * sizeof (unsigned short) - 1)));\n+}\n+\n+unsigned char\n+f47 (unsigned char x, unsigned int y)\n+{\n+  return (x >> y) | (x << ((-y) & (__CHAR_BIT__ * sizeof (unsigned char) - 1)));\n+}\n+\n+unsigned char\n+f48 (unsigned char x, unsigned long int y)\n+{\n+  return (x >> y) | (x << ((-y) & (__CHAR_BIT__ * sizeof (unsigned char) - 1)));\n+}\n+\n+unsigned int\n+f49 (unsigned int x, unsigned int y)\n+{\n+  return (x << ((-y) & (__CHAR_BIT__ * __SIZEOF_INT__ - 1))) ^ (x >> y);\n+}\n+\n+unsigned int\n+f50 (unsigned int x, unsigned long int y)\n+{\n+  return (x << ((-y) & (__CHAR_BIT__ * __SIZEOF_INT__ - 1))) ^ (x >> y);\n+}\n+\n+unsigned int\n+f51 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x << ((-1) & (__CHAR_BIT__ * __SIZEOF_INT__ - 1))) ^ (x >> 1);\n+}\n+\n+unsigned int\n+f52 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x << 1) ^ (x >> ((-1) & (__CHAR_BIT__ * __SIZEOF_INT__ - 1)));\n+}\n+\n+unsigned short int\n+f53 (unsigned short int x, unsigned int y)\n+{\n+  return (x << ((-y) & (__CHAR_BIT__ * __SIZEOF_SHORT__ - 1))) ^ (x >> y);\n+}\n+\n+unsigned short int\n+f54 (unsigned short int x, unsigned long int y)\n+{\n+  return (x << ((-y) & (__CHAR_BIT__ * __SIZEOF_SHORT__ - 1))) ^ (x >> y);\n+}\n+\n+unsigned char\n+f55 (unsigned char x, unsigned int y)\n+{\n+  return (x << ((-y) & (__CHAR_BIT__ - 1))) ^ (x >> y);\n+}\n+\n+unsigned char\n+f56 (unsigned char x, unsigned long int y)\n+{\n+  return (x << ((-y) & (__CHAR_BIT__ - 1))) ^ (x >> y);\n+}\n+\n+unsigned int\n+f57 (unsigned int x, unsigned int y)\n+{\n+  return (x << ((-y) & (__CHAR_BIT__ * sizeof (unsigned int) - 1))) ^ (x >> y);\n+}\n+\n+unsigned int\n+f58 (unsigned int x, unsigned long int y)\n+{\n+  return (x << ((-y) & (__CHAR_BIT__ * sizeof (unsigned int) - 1))) ^ (x >> y);\n+}\n+\n+unsigned int\n+f59 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x << ((-1) & (__CHAR_BIT__ * sizeof (unsigned int) - 1))) ^ (x >> 1);\n+}\n+\n+unsigned int\n+f60 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x << 1) ^ (x >> ((-1) & (__CHAR_BIT__ * sizeof (unsigned int) - 1)));\n+}\n+\n+unsigned short int\n+f61 (unsigned short int x, unsigned int y)\n+{\n+  return (x << ((-y) & (__CHAR_BIT__ * sizeof (unsigned short) - 1))) ^ (x >> y);\n+}\n+\n+unsigned short int\n+f62 (unsigned short int x, unsigned long int y)\n+{\n+  return (x << ((-y) & (__CHAR_BIT__ * sizeof (unsigned short) - 1))) ^ (x >> y);\n+}\n+\n+unsigned char\n+f63 (unsigned char x, unsigned int y)\n+{\n+  return (x << ((-y) & (__CHAR_BIT__ * sizeof (unsigned char) - 1))) ^ (x >> y);\n+}\n+\n+unsigned char\n+f64 (unsigned char x, unsigned long int y)\n+{\n+  return (x << ((-y) & (__CHAR_BIT__ * sizeof (unsigned char) - 1))) ^ (x >> y);\n+}"}, {"sha": "d709c0d3680620a965e3edb9f82bc8beefa5976c", "filename": "gcc/testsuite/c-c++-common/rotate-2a.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb3b8d33faa3a649b02827649f9c76e40edace15/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Frotate-2a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb3b8d33faa3a649b02827649f9c76e40edace15/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Frotate-2a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Frotate-2a.c?ref=cb3b8d33faa3a649b02827649f9c76e40edace15", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -Wno-overflow\" } */\n+\n+#define ROTATE_N \"rotate-2.c\"\n+\n+#include \"rotate-1a.c\""}, {"sha": "a7d138f9248b25e87b57d53a53ff17f94c1adccc", "filename": "gcc/testsuite/c-c++-common/rotate-3.c", "status": "added", "additions": 389, "deletions": 0, "changes": 389, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb3b8d33faa3a649b02827649f9c76e40edace15/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Frotate-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb3b8d33faa3a649b02827649f9c76e40edace15/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Frotate-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Frotate-3.c?ref=cb3b8d33faa3a649b02827649f9c76e40edace15", "patch": "@@ -0,0 +1,389 @@\n+/* Check rotate pattern detection.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-times \"r\\[<>]\\[<>]\" 64 \"optimized\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */\n+\n+unsigned int\n+f1 (unsigned int x, int y)\n+{\n+  return (x << y) | (x >> (__CHAR_BIT__ * __SIZEOF_INT__ - y));\n+}\n+\n+unsigned int\n+f2 (unsigned int x, long int y)\n+{\n+  return (x << y) | (x >> (__CHAR_BIT__ * __SIZEOF_INT__ - y));\n+}\n+\n+unsigned int\n+f3 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x << 1) | (x >> (__CHAR_BIT__ * __SIZEOF_INT__ - 1));\n+}\n+\n+unsigned int\n+f4 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x << (__CHAR_BIT__ * __SIZEOF_INT__ - 1)) | (x >> 1);\n+}\n+\n+unsigned short int\n+f5 (unsigned short int x, int y)\n+{\n+  return (x << y) | (x >> (__CHAR_BIT__ * __SIZEOF_SHORT__ - y));\n+}\n+\n+unsigned short int\n+f6 (unsigned short int x, long int y)\n+{\n+  return (x << y) | (x >> (__CHAR_BIT__ * __SIZEOF_SHORT__ - y));\n+}\n+\n+unsigned char\n+f7 (unsigned char x, int y)\n+{\n+  return (x << y) | (x >> (__CHAR_BIT__ - y));\n+}\n+\n+unsigned char\n+f8 (unsigned char x, long int y)\n+{\n+  return (x << y) | (x >> (__CHAR_BIT__ - y));\n+}\n+\n+unsigned int\n+f9 (unsigned int x, int y)\n+{\n+  return (x << y) | (x >> (__CHAR_BIT__ * sizeof (unsigned int) - y));\n+}\n+\n+unsigned int\n+f10 (unsigned int x, long int y)\n+{\n+  return (x << y) | (x >> (__CHAR_BIT__ * sizeof (unsigned int) - y));\n+}\n+\n+unsigned int\n+f11 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x << 1) | (x >> (__CHAR_BIT__ * sizeof (unsigned int) - 1));\n+}\n+\n+unsigned int\n+f12 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x << (__CHAR_BIT__ * sizeof (unsigned int) - 1)) | (x >> 1);\n+}\n+\n+unsigned short int\n+f13 (unsigned short int x, int y)\n+{\n+  return (x << y) | (x >> (__CHAR_BIT__ * sizeof (unsigned short) - y));\n+}\n+\n+unsigned short int\n+f14 (unsigned short int x, long int y)\n+{\n+  return (x << y) | (x >> (__CHAR_BIT__ * sizeof (unsigned short) - y));\n+}\n+\n+unsigned char\n+f15 (unsigned char x, int y)\n+{\n+  return (x << y) | (x >> (__CHAR_BIT__ * sizeof (unsigned char) - y));\n+}\n+\n+unsigned char\n+f16 (unsigned char x, long int y)\n+{\n+  return (x << y) | (x >> (__CHAR_BIT__ * sizeof (unsigned char) - y));\n+}\n+\n+unsigned int\n+f17 (unsigned int x, int y)\n+{\n+  return (x >> (__CHAR_BIT__ * __SIZEOF_INT__ - y)) ^ (x << y);\n+}\n+\n+unsigned int\n+f18 (unsigned int x, long int y)\n+{\n+  return (x >> (__CHAR_BIT__ * __SIZEOF_INT__ - y)) ^ (x << y);\n+}\n+\n+unsigned int\n+f19 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x >> (__CHAR_BIT__ * __SIZEOF_INT__ - 1)) ^ (x << 1);\n+}\n+\n+unsigned int\n+f20 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x >> 1) ^ (x << (__CHAR_BIT__ * __SIZEOF_INT__ - 1));\n+}\n+\n+unsigned short int\n+f21 (unsigned short int x, int y)\n+{\n+  return (x >> (__CHAR_BIT__ * __SIZEOF_SHORT__ - y)) ^ (x << y);\n+}\n+\n+unsigned short int\n+f22 (unsigned short int x, long int y)\n+{\n+  return (x >> (__CHAR_BIT__ * __SIZEOF_SHORT__ - y)) ^ (x << y);\n+}\n+\n+unsigned char\n+f23 (unsigned char x, int y)\n+{\n+  return (x >> (__CHAR_BIT__ - y)) ^ (x << y);\n+}\n+\n+unsigned char\n+f24 (unsigned char x, long int y)\n+{\n+  return (x >> (__CHAR_BIT__ - y)) ^ (x << y);\n+}\n+\n+unsigned int\n+f25 (unsigned int x, int y)\n+{\n+  return (x >> (__CHAR_BIT__ * sizeof (unsigned int) - y)) ^ (x << y);\n+}\n+\n+unsigned int\n+f26 (unsigned int x, long int y)\n+{\n+  return (x >> (__CHAR_BIT__ * sizeof (unsigned int) - y)) ^ (x << y);\n+}\n+\n+unsigned int\n+f27 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x >> (__CHAR_BIT__ * sizeof (unsigned int) - 1)) ^ (x << 1);\n+}\n+\n+unsigned int\n+f28 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x >> 1) ^ (x << (__CHAR_BIT__ * sizeof (unsigned int) - 1));\n+}\n+\n+unsigned short int\n+f29 (unsigned short int x, int y)\n+{\n+  return (x >> (__CHAR_BIT__ * sizeof (unsigned short) - y)) ^ (x << y);\n+}\n+\n+unsigned short int\n+f30 (unsigned short int x, long int y)\n+{\n+  return (x >> (__CHAR_BIT__ * sizeof (unsigned short) - y)) ^ (x << y);\n+}\n+\n+unsigned char\n+f31 (unsigned char x, int y)\n+{\n+  return (x >> (__CHAR_BIT__ * sizeof (unsigned char) - y)) ^ (x << y);\n+}\n+\n+unsigned char\n+f32 (unsigned char x, long int y)\n+{\n+  return (x >> (__CHAR_BIT__ * sizeof (unsigned char) - y)) ^ (x << y);\n+}\n+\n+unsigned int\n+f33 (unsigned int x, int y)\n+{\n+  return (x >> y) | (x << (__CHAR_BIT__ * __SIZEOF_INT__ - y));\n+}\n+\n+unsigned int\n+f34 (unsigned int x, long int y)\n+{\n+  return (x >> y) | (x << (__CHAR_BIT__ * __SIZEOF_INT__ - y));\n+}\n+\n+unsigned int\n+f35 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x >> 1) | (x << (__CHAR_BIT__ * __SIZEOF_INT__ - 1));\n+}\n+\n+unsigned int\n+f36 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x >> (__CHAR_BIT__ * __SIZEOF_INT__ - 1)) | (x << 1);\n+}\n+\n+unsigned short int\n+f37 (unsigned short int x, int y)\n+{\n+  return (x >> y) | (x << (__CHAR_BIT__ * __SIZEOF_SHORT__ - y));\n+}\n+\n+unsigned short int\n+f38 (unsigned short int x, long int y)\n+{\n+  return (x >> y) | (x << (__CHAR_BIT__ * __SIZEOF_SHORT__ - y));\n+}\n+\n+unsigned char\n+f39 (unsigned char x, int y)\n+{\n+  return (x >> y) | (x << (__CHAR_BIT__ - y));\n+}\n+\n+unsigned char\n+f40 (unsigned char x, long int y)\n+{\n+  return (x >> y) | (x << (__CHAR_BIT__ - y));\n+}\n+\n+unsigned int\n+f41 (unsigned int x, int y)\n+{\n+  return (x >> y) | (x << (__CHAR_BIT__ * sizeof (unsigned int) - y));\n+}\n+\n+unsigned int\n+f42 (unsigned int x, long int y)\n+{\n+  return (x >> y) | (x << (__CHAR_BIT__ * sizeof (unsigned int) - y));\n+}\n+\n+unsigned int\n+f43 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x >> 1) | (x << (__CHAR_BIT__ * sizeof (unsigned int) - 1));\n+}\n+\n+unsigned int\n+f44 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x >> (__CHAR_BIT__ * sizeof (unsigned int) - 1)) | (x << 1);\n+}\n+\n+unsigned short int\n+f45 (unsigned short int x, int y)\n+{\n+  return (x >> y) | (x << (__CHAR_BIT__ * sizeof (unsigned short) - y));\n+}\n+\n+unsigned short int\n+f46 (unsigned short int x, long int y)\n+{\n+  return (x >> y) | (x << (__CHAR_BIT__ * sizeof (unsigned short) - y));\n+}\n+\n+unsigned char\n+f47 (unsigned char x, int y)\n+{\n+  return (x >> y) | (x << (__CHAR_BIT__ * sizeof (unsigned char) - y));\n+}\n+\n+unsigned char\n+f48 (unsigned char x, long int y)\n+{\n+  return (x >> y) | (x << (__CHAR_BIT__ * sizeof (unsigned char) - y));\n+}\n+\n+unsigned int\n+f49 (unsigned int x, int y)\n+{\n+  return (x << (__CHAR_BIT__ * __SIZEOF_INT__ - y)) ^ (x >> y);\n+}\n+\n+unsigned int\n+f50 (unsigned int x, long int y)\n+{\n+  return (x << (__CHAR_BIT__ * __SIZEOF_INT__ - y)) ^ (x >> y);\n+}\n+\n+unsigned int\n+f51 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x << (__CHAR_BIT__ * __SIZEOF_INT__ - 1)) ^ (x >> 1);\n+}\n+\n+unsigned int\n+f52 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x << 1) ^ (x >> (__CHAR_BIT__ * __SIZEOF_INT__ - 1));\n+}\n+\n+unsigned short int\n+f53 (unsigned short int x, int y)\n+{\n+  return (x << (__CHAR_BIT__ * __SIZEOF_SHORT__ - y)) ^ (x >> y);\n+}\n+\n+unsigned short int\n+f54 (unsigned short int x, long int y)\n+{\n+  return (x << (__CHAR_BIT__ * __SIZEOF_SHORT__ - y)) ^ (x >> y);\n+}\n+\n+unsigned char\n+f55 (unsigned char x, int y)\n+{\n+  return (x << (__CHAR_BIT__ - y)) ^ (x >> y);\n+}\n+\n+unsigned char\n+f56 (unsigned char x, long int y)\n+{\n+  return (x << (__CHAR_BIT__ - y)) ^ (x >> y);\n+}\n+\n+unsigned int\n+f57 (unsigned int x, int y)\n+{\n+  return (x << (__CHAR_BIT__ * sizeof (unsigned int) - y)) ^ (x >> y);\n+}\n+\n+unsigned int\n+f58 (unsigned int x, long int y)\n+{\n+  return (x << (__CHAR_BIT__ * sizeof (unsigned int) - y)) ^ (x >> y);\n+}\n+\n+unsigned int\n+f59 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x << (__CHAR_BIT__ * sizeof (unsigned int) - 1)) ^ (x >> 1);\n+}\n+\n+unsigned int\n+f60 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x << 1) ^ (x >> (__CHAR_BIT__ * sizeof (unsigned int) - 1));\n+}\n+\n+unsigned short int\n+f61 (unsigned short int x, int y)\n+{\n+  return (x << (__CHAR_BIT__ * sizeof (unsigned short) - y)) ^ (x >> y);\n+}\n+\n+unsigned short int\n+f62 (unsigned short int x, long int y)\n+{\n+  return (x << (__CHAR_BIT__ * sizeof (unsigned short) - y)) ^ (x >> y);\n+}\n+\n+unsigned char\n+f63 (unsigned char x, int y)\n+{\n+  return (x << (__CHAR_BIT__ * sizeof (unsigned char) - y)) ^ (x >> y);\n+}\n+\n+unsigned char\n+f64 (unsigned char x, long int y)\n+{\n+  return (x << (__CHAR_BIT__ * sizeof (unsigned char) - y)) ^ (x >> y);\n+}"}, {"sha": "450fc22d70c1018955834e8c79382a6882d13839", "filename": "gcc/testsuite/c-c++-common/rotate-3a.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb3b8d33faa3a649b02827649f9c76e40edace15/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Frotate-3a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb3b8d33faa3a649b02827649f9c76e40edace15/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Frotate-3a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Frotate-3a.c?ref=cb3b8d33faa3a649b02827649f9c76e40edace15", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -Wno-overflow\" } */\n+\n+#define ROTATE_N \"rotate-4.c\"\n+\n+#include \"rotate-1a.c\""}, {"sha": "705feceabd9e5a51766d5354e0e2c8b956b592e4", "filename": "gcc/testsuite/c-c++-common/rotate-4.c", "status": "added", "additions": 389, "deletions": 0, "changes": 389, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb3b8d33faa3a649b02827649f9c76e40edace15/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Frotate-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb3b8d33faa3a649b02827649f9c76e40edace15/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Frotate-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Frotate-4.c?ref=cb3b8d33faa3a649b02827649f9c76e40edace15", "patch": "@@ -0,0 +1,389 @@\n+/* Check rotate pattern detection.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-times \"r\\[<>]\\[<>]\" 64 \"optimized\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */\n+\n+unsigned int\n+f1 (unsigned int x, int y)\n+{\n+  return (x << y) | (x >> ((-y) & (__CHAR_BIT__ * __SIZEOF_INT__ - 1)));\n+}\n+\n+unsigned int\n+f2 (unsigned int x, long int y)\n+{\n+  return (x << y) | (x >> ((-y) & (__CHAR_BIT__ * __SIZEOF_INT__ - 1)));\n+}\n+\n+unsigned int\n+f3 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x << 1) | (x >> ((-1) & (__CHAR_BIT__ * __SIZEOF_INT__ - 1)));\n+}\n+\n+unsigned int\n+f4 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x << ((-1) & (__CHAR_BIT__ * __SIZEOF_INT__ - 1))) | (x >> 1);\n+}\n+\n+unsigned short int\n+f5 (unsigned short int x, int y)\n+{\n+  return (x << y) | (x >> ((-y) & (__CHAR_BIT__ * __SIZEOF_SHORT__ - 1)));\n+}\n+\n+unsigned short int\n+f6 (unsigned short int x, long int y)\n+{\n+  return (x << y) | (x >> ((-y) & (__CHAR_BIT__ * __SIZEOF_SHORT__ - 1)));\n+}\n+\n+unsigned char\n+f7 (unsigned char x, int y)\n+{\n+  return (x << y) | (x >> ((-y) & (__CHAR_BIT__ - 1)));\n+}\n+\n+unsigned char\n+f8 (unsigned char x, long int y)\n+{\n+  return (x << y) | (x >> ((-y) & (__CHAR_BIT__ - 1)));\n+}\n+\n+unsigned int\n+f9 (unsigned int x, int y)\n+{\n+  return (x << y) | (x >> ((-y) & (__CHAR_BIT__ * sizeof (unsigned int) - 1)));\n+}\n+\n+unsigned int\n+f10 (unsigned int x, long int y)\n+{\n+  return (x << y) | (x >> ((-y) & (__CHAR_BIT__ * sizeof (unsigned int) - 1)));\n+}\n+\n+unsigned int\n+f11 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x << 1) | (x >> ((-1) & (__CHAR_BIT__ * sizeof (unsigned int) - 1)));\n+}\n+\n+unsigned int\n+f12 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x << ((-1) & (__CHAR_BIT__ * sizeof (unsigned int) - 1))) | (x >> 1);\n+}\n+\n+unsigned short int\n+f13 (unsigned short int x, int y)\n+{\n+  return (x << y) | (x >> ((-y) & (__CHAR_BIT__ * sizeof (unsigned short) - 1)));\n+}\n+\n+unsigned short int\n+f14 (unsigned short int x, long int y)\n+{\n+  return (x << y) | (x >> ((-y) & (__CHAR_BIT__ * sizeof (unsigned short) - 1)));\n+}\n+\n+unsigned char\n+f15 (unsigned char x, int y)\n+{\n+  return (x << y) | (x >> ((-y) & (__CHAR_BIT__ * sizeof (unsigned char) - 1)));\n+}\n+\n+unsigned char\n+f16 (unsigned char x, long int y)\n+{\n+  return (x << y) | (x >> ((-y) & (__CHAR_BIT__ * sizeof (unsigned char) - 1)));\n+}\n+\n+unsigned int\n+f17 (unsigned int x, int y)\n+{\n+  return (x >> ((-y) & (__CHAR_BIT__ * __SIZEOF_INT__ - 1))) ^ (x << y);\n+}\n+\n+unsigned int\n+f18 (unsigned int x, long int y)\n+{\n+  return (x >> ((-y) & (__CHAR_BIT__ * __SIZEOF_INT__ - 1))) ^ (x << y);\n+}\n+\n+unsigned int\n+f19 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x >> ((-1) & (__CHAR_BIT__ * __SIZEOF_INT__ - 1))) ^ (x << 1);\n+}\n+\n+unsigned int\n+f20 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x >> 1) ^ (x << ((-1) & (__CHAR_BIT__ * __SIZEOF_INT__ - 1)));\n+}\n+\n+unsigned short int\n+f21 (unsigned short int x, int y)\n+{\n+  return (x >> ((-y) & (__CHAR_BIT__ * __SIZEOF_SHORT__ - 1))) ^ (x << y);\n+}\n+\n+unsigned short int\n+f22 (unsigned short int x, long int y)\n+{\n+  return (x >> ((-y) & (__CHAR_BIT__ * __SIZEOF_SHORT__ - 1))) ^ (x << y);\n+}\n+\n+unsigned char\n+f23 (unsigned char x, int y)\n+{\n+  return (x >> ((-y) & (__CHAR_BIT__ - 1))) ^ (x << y);\n+}\n+\n+unsigned char\n+f24 (unsigned char x, long int y)\n+{\n+  return (x >> ((-y) & (__CHAR_BIT__ - 1))) ^ (x << y);\n+}\n+\n+unsigned int\n+f25 (unsigned int x, int y)\n+{\n+  return (x >> ((-y) & (__CHAR_BIT__ * sizeof (unsigned int) - 1))) ^ (x << y);\n+}\n+\n+unsigned int\n+f26 (unsigned int x, long int y)\n+{\n+  return (x >> ((-y) & (__CHAR_BIT__ * sizeof (unsigned int) - 1))) ^ (x << y);\n+}\n+\n+unsigned int\n+f27 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x >> ((-1) & (__CHAR_BIT__ * sizeof (unsigned int) - 1))) ^ (x << 1);\n+}\n+\n+unsigned int\n+f28 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x >> 1) ^ (x << ((-1) & (__CHAR_BIT__ * sizeof (unsigned int) - 1)));\n+}\n+\n+unsigned short int\n+f29 (unsigned short int x, int y)\n+{\n+  return (x >> ((-y) & (__CHAR_BIT__ * sizeof (unsigned short) - 1))) ^ (x << y);\n+}\n+\n+unsigned short int\n+f30 (unsigned short int x, long int y)\n+{\n+  return (x >> ((-y) & (__CHAR_BIT__ * sizeof (unsigned short) - 1))) ^ (x << y);\n+}\n+\n+unsigned char\n+f31 (unsigned char x, int y)\n+{\n+  return (x >> ((-y) & (__CHAR_BIT__ * sizeof (unsigned char) - 1))) ^ (x << y);\n+}\n+\n+unsigned char\n+f32 (unsigned char x, long int y)\n+{\n+  return (x >> ((-y) & (__CHAR_BIT__ * sizeof (unsigned char) - 1))) ^ (x << y);\n+}\n+\n+unsigned int\n+f33 (unsigned int x, int y)\n+{\n+  return (x >> y) | (x << ((-y) & (__CHAR_BIT__ * __SIZEOF_INT__ - 1)));\n+}\n+\n+unsigned int\n+f34 (unsigned int x, long int y)\n+{\n+  return (x >> y) | (x << ((-y) & (__CHAR_BIT__ * __SIZEOF_INT__ - 1)));\n+}\n+\n+unsigned int\n+f35 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x >> 1) | (x << ((-1) & (__CHAR_BIT__ * __SIZEOF_INT__ - 1)));\n+}\n+\n+unsigned int\n+f36 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x >> ((-1) & (__CHAR_BIT__ * __SIZEOF_INT__ - 1))) | (x << 1);\n+}\n+\n+unsigned short int\n+f37 (unsigned short int x, int y)\n+{\n+  return (x >> y) | (x << ((-y) & (__CHAR_BIT__ * __SIZEOF_SHORT__ - 1)));\n+}\n+\n+unsigned short int\n+f38 (unsigned short int x, long int y)\n+{\n+  return (x >> y) | (x << ((-y) & (__CHAR_BIT__ * __SIZEOF_SHORT__ - 1)));\n+}\n+\n+unsigned char\n+f39 (unsigned char x, int y)\n+{\n+  return (x >> y) | (x << ((-y) & (__CHAR_BIT__ - 1)));\n+}\n+\n+unsigned char\n+f40 (unsigned char x, long int y)\n+{\n+  return (x >> y) | (x << ((-y) & (__CHAR_BIT__ - 1)));\n+}\n+\n+unsigned int\n+f41 (unsigned int x, int y)\n+{\n+  return (x >> y) | (x << ((-y) & (__CHAR_BIT__ * sizeof (unsigned int) - 1)));\n+}\n+\n+unsigned int\n+f42 (unsigned int x, long int y)\n+{\n+  return (x >> y) | (x << ((-y) & (__CHAR_BIT__ * sizeof (unsigned int) - 1)));\n+}\n+\n+unsigned int\n+f43 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x >> 1) | (x << ((-1) & (__CHAR_BIT__ * sizeof (unsigned int) - 1)));\n+}\n+\n+unsigned int\n+f44 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x >> ((-1) & (__CHAR_BIT__ * sizeof (unsigned int) - 1))) | (x << 1);\n+}\n+\n+unsigned short int\n+f45 (unsigned short int x, int y)\n+{\n+  return (x >> y) | (x << ((-y) & (__CHAR_BIT__ * sizeof (unsigned short) - 1)));\n+}\n+\n+unsigned short int\n+f46 (unsigned short int x, long int y)\n+{\n+  return (x >> y) | (x << ((-y) & (__CHAR_BIT__ * sizeof (unsigned short) - 1)));\n+}\n+\n+unsigned char\n+f47 (unsigned char x, int y)\n+{\n+  return (x >> y) | (x << ((-y) & (__CHAR_BIT__ * sizeof (unsigned char) - 1)));\n+}\n+\n+unsigned char\n+f48 (unsigned char x, long int y)\n+{\n+  return (x >> y) | (x << ((-y) & (__CHAR_BIT__ * sizeof (unsigned char) - 1)));\n+}\n+\n+unsigned int\n+f49 (unsigned int x, int y)\n+{\n+  return (x << ((-y) & (__CHAR_BIT__ * __SIZEOF_INT__ - 1))) ^ (x >> y);\n+}\n+\n+unsigned int\n+f50 (unsigned int x, long int y)\n+{\n+  return (x << ((-y) & (__CHAR_BIT__ * __SIZEOF_INT__ - 1))) ^ (x >> y);\n+}\n+\n+unsigned int\n+f51 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x << ((-1) & (__CHAR_BIT__ * __SIZEOF_INT__ - 1))) ^ (x >> 1);\n+}\n+\n+unsigned int\n+f52 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x << 1) ^ (x >> ((-1) & (__CHAR_BIT__ * __SIZEOF_INT__ - 1)));\n+}\n+\n+unsigned short int\n+f53 (unsigned short int x, int y)\n+{\n+  return (x << ((-y) & (__CHAR_BIT__ * __SIZEOF_SHORT__ - 1))) ^ (x >> y);\n+}\n+\n+unsigned short int\n+f54 (unsigned short int x, long int y)\n+{\n+  return (x << ((-y) & (__CHAR_BIT__ * __SIZEOF_SHORT__ - 1))) ^ (x >> y);\n+}\n+\n+unsigned char\n+f55 (unsigned char x, int y)\n+{\n+  return (x << ((-y) & (__CHAR_BIT__ - 1))) ^ (x >> y);\n+}\n+\n+unsigned char\n+f56 (unsigned char x, long int y)\n+{\n+  return (x << ((-y) & (__CHAR_BIT__ - 1))) ^ (x >> y);\n+}\n+\n+unsigned int\n+f57 (unsigned int x, int y)\n+{\n+  return (x << ((-y) & (__CHAR_BIT__ * sizeof (unsigned int) - 1))) ^ (x >> y);\n+}\n+\n+unsigned int\n+f58 (unsigned int x, long int y)\n+{\n+  return (x << ((-y) & (__CHAR_BIT__ * sizeof (unsigned int) - 1))) ^ (x >> y);\n+}\n+\n+unsigned int\n+f59 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x << ((-1) & (__CHAR_BIT__ * sizeof (unsigned int) - 1))) ^ (x >> 1);\n+}\n+\n+unsigned int\n+f60 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x << 1) ^ (x >> ((-1) & (__CHAR_BIT__ * sizeof (unsigned int) - 1)));\n+}\n+\n+unsigned short int\n+f61 (unsigned short int x, int y)\n+{\n+  return (x << ((-y) & (__CHAR_BIT__ * sizeof (unsigned short) - 1))) ^ (x >> y);\n+}\n+\n+unsigned short int\n+f62 (unsigned short int x, long int y)\n+{\n+  return (x << ((-y) & (__CHAR_BIT__ * sizeof (unsigned short) - 1))) ^ (x >> y);\n+}\n+\n+unsigned char\n+f63 (unsigned char x, int y)\n+{\n+  return (x << ((-y) & (__CHAR_BIT__ * sizeof (unsigned char) - 1))) ^ (x >> y);\n+}\n+\n+unsigned char\n+f64 (unsigned char x, long int y)\n+{\n+  return (x << ((-y) & (__CHAR_BIT__ * sizeof (unsigned char) - 1))) ^ (x >> y);\n+}"}, {"sha": "450fc22d70c1018955834e8c79382a6882d13839", "filename": "gcc/testsuite/c-c++-common/rotate-4a.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb3b8d33faa3a649b02827649f9c76e40edace15/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Frotate-4a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb3b8d33faa3a649b02827649f9c76e40edace15/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Frotate-4a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Frotate-4a.c?ref=cb3b8d33faa3a649b02827649f9c76e40edace15", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -Wno-overflow\" } */\n+\n+#define ROTATE_N \"rotate-4.c\"\n+\n+#include \"rotate-1a.c\""}, {"sha": "e714a5ef24490442f4f63b1bc34ada0486bf4be5", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 241, "deletions": 0, "changes": 241, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb3b8d33faa3a649b02827649f9c76e40edace15/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb3b8d33faa3a649b02827649f9c76e40edace15/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=cb3b8d33faa3a649b02827649f9c76e40edace15", "patch": "@@ -2124,6 +2124,242 @@ simplify_bitwise_binary (gimple_stmt_iterator *gsi)\n }\n \n \n+/* Recognize rotation patterns.  Return true if a transformation\n+   applied, otherwise return false.\n+\n+   We are looking for X with unsigned type T with bitsize B, OP being\n+   +, | or ^, some type T2 wider than T and\n+   (X << CNT1) OP (X >> CNT2)\t\t\t\tiff CNT1 + CNT2 == B\n+   ((T) ((T2) X << CNT1)) OP ((T) ((T2) X >> CNT2))\tiff CNT1 + CNT2 == B\n+   (X << Y) OP (X >> (B - Y))\n+   (X << (int) Y) OP (X >> (int) (B - Y))\n+   ((T) ((T2) X << Y)) OP ((T) ((T2) X >> (B - Y)))\n+   ((T) ((T2) X << (int) Y)) OP ((T) ((T2) X >> (int) (B - Y)))\n+   (X << Y) OP (X >> ((-Y) & (B - 1)))\n+   (X << (int) Y) OP (X >> (int) ((-Y) & (B - 1)))\n+   ((T) ((T2) X << Y)) OP ((T) ((T2) X >> ((-Y) & (B - 1))))\n+   ((T) ((T2) X << (int) Y)) OP ((T) ((T2) X >> (int) ((-Y) & (B - 1))))\n+\n+   and transform these into:\n+   X r<< CNT1\n+   X r<< Y\n+\n+   Note, in the patterns with T2 type, the type of OP operands\n+   might be even a signed type, but should have precision B.  */\n+\n+static bool\n+simplify_rotate (gimple_stmt_iterator *gsi)\n+{\n+  gimple stmt = gsi_stmt (*gsi);\n+  tree arg[2], rtype, rotcnt = NULL_TREE;\n+  tree def_arg1[2], def_arg2[2];\n+  enum tree_code def_code[2];\n+  tree lhs;\n+  int i;\n+  bool swapped_p = false;\n+  gimple g;\n+\n+  arg[0] = gimple_assign_rhs1 (stmt);\n+  arg[1] = gimple_assign_rhs2 (stmt);\n+  rtype = TREE_TYPE (arg[0]);\n+\n+  /* Only create rotates in complete modes.  Other cases are not\n+     expanded properly.  */\n+  if (!INTEGRAL_TYPE_P (rtype)\n+      || TYPE_PRECISION (rtype) != GET_MODE_PRECISION (TYPE_MODE (rtype)))\n+    return false;\n+\n+  for (i = 0; i < 2; i++)\n+    defcodefor_name (arg[i], &def_code[i], &def_arg1[i], &def_arg2[i]);\n+\n+  /* Look through narrowing conversions.  */\n+  if (CONVERT_EXPR_CODE_P (def_code[0])\n+      && CONVERT_EXPR_CODE_P (def_code[1])\n+      && INTEGRAL_TYPE_P (TREE_TYPE (def_arg1[0]))\n+      && INTEGRAL_TYPE_P (TREE_TYPE (def_arg1[1]))\n+      && TYPE_PRECISION (TREE_TYPE (def_arg1[0]))\n+\t == TYPE_PRECISION (TREE_TYPE (def_arg1[1]))\n+      && TYPE_PRECISION (TREE_TYPE (def_arg1[0])) > TYPE_PRECISION (rtype)\n+      && has_single_use (arg[0])\n+      && has_single_use (arg[1]))\n+    {\n+      for (i = 0; i < 2; i++)\n+\t{\n+\t  arg[i] = def_arg1[i];\n+\t  defcodefor_name (arg[i], &def_code[i], &def_arg1[i], &def_arg2[i]);\n+\t}\n+    }\n+\n+  /* One operand has to be LSHIFT_EXPR and one RSHIFT_EXPR.  */\n+  for (i = 0; i < 2; i++)\n+    if (def_code[i] != LSHIFT_EXPR && def_code[i] != RSHIFT_EXPR)\n+      return false;\n+    else if (!has_single_use (arg[i]))\n+      return false;\n+  if (def_code[0] == def_code[1])\n+    return false;\n+\n+  /* If we've looked through narrowing conversions before, look through\n+     widening conversions from unsigned type with the same precision\n+     as rtype here.  */\n+  if (TYPE_PRECISION (TREE_TYPE (def_arg1[0])) != TYPE_PRECISION (rtype))\n+    for (i = 0; i < 2; i++)\n+      {\n+\ttree tem;\n+\tenum tree_code code;\n+\tdefcodefor_name (def_arg1[i], &code, &tem, NULL);\n+\tif (!CONVERT_EXPR_CODE_P (code)\n+\t    || !INTEGRAL_TYPE_P (TREE_TYPE (tem))\n+\t    || TYPE_PRECISION (TREE_TYPE (tem)) != TYPE_PRECISION (rtype))\n+\t  return false;\n+\tdef_arg1[i] = tem;\n+      }\n+  /* Both shifts have to use the same first operand.  */\n+  if (TREE_CODE (def_arg1[0]) != SSA_NAME || def_arg1[0] != def_arg1[1])\n+    return false;\n+  if (!TYPE_UNSIGNED (TREE_TYPE (def_arg1[0])))\n+    return false;\n+\n+  /* CNT1 + CNT2 == B case above.  */\n+  if (host_integerp (def_arg2[0], 1)\n+      && host_integerp (def_arg2[1], 1)\n+      && (unsigned HOST_WIDE_INT) tree_low_cst (def_arg2[0], 1)\n+\t + tree_low_cst (def_arg2[1], 1) == TYPE_PRECISION (rtype))\n+    rotcnt = def_arg2[0];\n+  else if (TREE_CODE (def_arg2[0]) != SSA_NAME\n+\t   || TREE_CODE (def_arg2[1]) != SSA_NAME)\n+    return false;\n+  else\n+    {\n+      tree cdef_arg1[2], cdef_arg2[2], def_arg2_alt[2];\n+      enum tree_code cdef_code[2];\n+      /* Look through conversion of the shift count argument.\n+\t The C/C++ FE cast any shift count argument to integer_type_node.\n+\t The only problem might be if the shift count type maximum value\n+\t is equal or smaller than number of bits in rtype.  */\n+      for (i = 0; i < 2; i++)\n+\t{\n+\t  def_arg2_alt[i] = def_arg2[i];\n+\t  defcodefor_name (def_arg2[i], &cdef_code[i],\n+\t\t\t   &cdef_arg1[i], &cdef_arg2[i]);\n+\t  if (CONVERT_EXPR_CODE_P (cdef_code[i])\n+\t      && INTEGRAL_TYPE_P (TREE_TYPE (cdef_arg1[i]))\n+\t      && TYPE_PRECISION (TREE_TYPE (cdef_arg1[i]))\n+\t\t > floor_log2 (TYPE_PRECISION (rtype))\n+\t      && TYPE_PRECISION (TREE_TYPE (cdef_arg1[i]))\n+\t\t == GET_MODE_PRECISION (TYPE_MODE (TREE_TYPE (cdef_arg1[i]))))\n+\t    {\n+\t      def_arg2_alt[i] = cdef_arg1[i];\n+\t      defcodefor_name (def_arg2_alt[i], &cdef_code[i],\n+\t\t\t       &cdef_arg1[i], &cdef_arg2[i]);\n+\t    }\n+\t}\n+      for (i = 0; i < 2; i++)\n+\t/* Check for one shift count being Y and the other B - Y,\n+\t   with optional casts.  */\n+\tif (cdef_code[i] == MINUS_EXPR\n+\t    && host_integerp (cdef_arg1[i], 0)\n+\t    && tree_low_cst (cdef_arg1[i], 0) == TYPE_PRECISION (rtype)\n+\t    && TREE_CODE (cdef_arg2[i]) == SSA_NAME)\n+\t  {\n+\t    tree tem;\n+\t    enum tree_code code;\n+\n+\t    if (cdef_arg2[i] == def_arg2[1 - i]\n+\t\t|| cdef_arg2[i] == def_arg2_alt[1 - i])\n+\t      {\n+\t\trotcnt = cdef_arg2[i];\n+\t\tbreak;\n+\t      }\n+\t    defcodefor_name (cdef_arg2[i], &code, &tem, NULL);\n+\t    if (CONVERT_EXPR_CODE_P (code)\n+\t\t&& INTEGRAL_TYPE_P (TREE_TYPE (tem))\n+\t\t&& TYPE_PRECISION (TREE_TYPE (tem))\n+\t\t > floor_log2 (TYPE_PRECISION (rtype))\n+\t\t&& TYPE_PRECISION (TREE_TYPE (tem))\n+\t\t == GET_MODE_PRECISION (TYPE_MODE (TREE_TYPE (tem)))\n+\t\t&& (tem == def_arg2[1 - i]\n+\t\t    || tem == def_arg2_alt[1 - i]))\n+\t      {\n+\t\trotcnt = tem;\n+\t\tbreak;\n+\t      }\n+\t  }\n+\t/* The above sequence isn't safe for Y being 0,\n+\t   because then one of the shifts triggers undefined behavior.\n+\t   This alternative is safe even for rotation count of 0.\n+\t   One shift count is Y and the other (-Y) & (B - 1).  */\n+\telse if (cdef_code[i] == BIT_AND_EXPR\n+\t\t && host_integerp (cdef_arg2[i], 0)\n+\t\t && tree_low_cst (cdef_arg2[i], 0)\n+\t\t    == TYPE_PRECISION (rtype) - 1\n+\t\t && TREE_CODE (cdef_arg1[i]) == SSA_NAME)\n+\t  {\n+\t    tree tem;\n+\t    enum tree_code code;\n+\n+\t    defcodefor_name (cdef_arg1[i], &code, &tem, NULL);\n+\t    if (CONVERT_EXPR_CODE_P (code)\n+\t\t&& INTEGRAL_TYPE_P (TREE_TYPE (tem))\n+\t\t&& TYPE_PRECISION (TREE_TYPE (tem))\n+\t\t > floor_log2 (TYPE_PRECISION (rtype))\n+\t\t&& TYPE_PRECISION (TREE_TYPE (tem))\n+\t\t == GET_MODE_PRECISION (TYPE_MODE (TREE_TYPE (tem))))\n+\t      defcodefor_name (tem, &code, &tem, NULL);\n+\n+\t    if (code == NEGATE_EXPR)\n+\t      {\n+\t\tif (tem == def_arg2[1 - i] || tem == def_arg2_alt[1 - i])\n+\t\t  {\n+\t\t    rotcnt = tem;\n+\t\t    break;\n+\t\t  }\n+\t\tdefcodefor_name (tem, &code, &tem, NULL);\n+\t\tif (CONVERT_EXPR_CODE_P (code)\n+\t\t    && INTEGRAL_TYPE_P (TREE_TYPE (tem))\n+\t\t    && TYPE_PRECISION (TREE_TYPE (tem))\n+\t\t       > floor_log2 (TYPE_PRECISION (rtype))\n+\t\t    && TYPE_PRECISION (TREE_TYPE (tem))\n+\t\t       == GET_MODE_PRECISION (TYPE_MODE (TREE_TYPE (tem)))\n+\t\t    && (tem == def_arg2[1 - i]\n+\t\t\t|| tem == def_arg2_alt[1 - i]))\n+\t\t  {\n+\t\t    rotcnt = tem;\n+\t\t    break;\n+\t\t  }\n+\t      }\n+\t  }\n+      if (rotcnt == NULL_TREE)\n+\treturn false;\n+      swapped_p = i != 1;\n+    }\n+\n+  if (!useless_type_conversion_p (TREE_TYPE (def_arg2[0]),\n+\t\t\t\t  TREE_TYPE (rotcnt)))\n+    {\n+      g = gimple_build_assign_with_ops (NOP_EXPR,\n+\t\t\t\t\tmake_ssa_name (TREE_TYPE (def_arg2[0]),\n+\t\t\t\t\t\t       NULL),\n+\t\t\t\t\trotcnt, NULL_TREE);\n+      gsi_insert_before (gsi, g, GSI_SAME_STMT);\n+      rotcnt = gimple_assign_lhs (g);\n+    }\n+  lhs = gimple_assign_lhs (stmt);\n+  if (!useless_type_conversion_p (rtype, TREE_TYPE (def_arg1[0])))\n+    lhs = make_ssa_name (TREE_TYPE (def_arg1[0]), NULL);\n+  g = gimple_build_assign_with_ops (((def_code[0] == LSHIFT_EXPR) ^ swapped_p)\n+\t\t\t\t    ? LROTATE_EXPR : RROTATE_EXPR,\n+\t\t\t\t    lhs, def_arg1[0], rotcnt);\n+  if (!useless_type_conversion_p (rtype, TREE_TYPE (def_arg1[0])))\n+    {\n+      gsi_insert_before (gsi, g, GSI_SAME_STMT);\n+      g = gimple_build_assign_with_ops (NOP_EXPR, gimple_assign_lhs (stmt),\n+\t\t\t\t\tlhs, NULL_TREE);\n+    }\n+  gsi_replace (gsi, g, false);\n+  return true;\n+}\n+\n /* Perform re-associations of the plus or minus statement STMT that are\n    always permitted.  Returns true if the CFG was changed.  */\n \n@@ -3114,6 +3350,11 @@ ssa_forward_propagate_and_combine (void)\n \t\t      cfg_changed = true;\n \t\t    changed = did_something != 0;\n \t\t  }\n+\t\telse if ((code == PLUS_EXPR\n+\t\t\t  || code == BIT_IOR_EXPR\n+\t\t\t  || code == BIT_XOR_EXPR)\n+\t\t\t && simplify_rotate (&gsi))\n+\t\t  changed = true;\n \t\telse if (code == BIT_AND_EXPR\n \t\t\t || code == BIT_IOR_EXPR\n \t\t\t || code == BIT_XOR_EXPR)"}]}