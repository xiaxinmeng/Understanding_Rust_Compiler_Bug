{"sha": "c51b58dc1f298bc8255758a51e94d5b7478b56ab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzUxYjU4ZGMxZjI5OGJjODI1NTc1OGE1MWU5NGQ1Yjc0NzhiNTZhYg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely.gcc@gmail.com", "date": "2011-06-11T16:05:08Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2011-06-11T16:05:08Z"}, "message": "extptr_allocator.h (construct, destroy): Fix for C++0x mode by overloading to take allocator's pointer type.\n\n2011-06-11  Jonathan Wakely  <jwakely.gcc@gmail.com>\n\n\t* include/ext/extptr_allocator.h (construct, destroy): Fix for C++0x\n\tmode by overloading to take allocator's pointer type.\n\t* testsuite/23_containers/vector/ext_pointer/types/2.cc: New.\n\t* testsuite/23_containers/vector/ext_pointer/explicit_instantiation/\n\t2.cc: New.\n\nFrom-SVN: r174958", "tree": {"sha": "447dd60007e928ad8f52ed863e1e46067492b948", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/447dd60007e928ad8f52ed863e1e46067492b948"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c51b58dc1f298bc8255758a51e94d5b7478b56ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c51b58dc1f298bc8255758a51e94d5b7478b56ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c51b58dc1f298bc8255758a51e94d5b7478b56ab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c51b58dc1f298bc8255758a51e94d5b7478b56ab/comments", "author": null, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9a76bae8bc5f7d9f73acca95a55bd46c873e65b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9a76bae8bc5f7d9f73acca95a55bd46c873e65b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9a76bae8bc5f7d9f73acca95a55bd46c873e65b"}], "stats": {"total": 108, "additions": 108, "deletions": 0}, "files": [{"sha": "33087235cd337ce88722a966d61cba4de347eefd", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c51b58dc1f298bc8255758a51e94d5b7478b56ab/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c51b58dc1f298bc8255758a51e94d5b7478b56ab/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=c51b58dc1f298bc8255758a51e94d5b7478b56ab", "patch": "@@ -1,3 +1,11 @@\n+2011-06-11  Jonathan Wakely  <jwakely.gcc@gmail.com>\n+\n+\t* include/ext/extptr_allocator.h (construct, destroy): Fix for C++0x\n+\tmode by overloading to take allocator's pointer type.\n+\t* testsuite/23_containers/vector/ext_pointer/types/2.cc: New.\n+\t* testsuite/23_containers/vector/ext_pointer/explicit_instantiation/\n+\t2.cc: New.\n+\n 2011-06-11  Jonathan Wakely  <jwakely.gcc@gmail.com>\n \n \t* testsuite/20_util/allocator_traits/requirements/"}, {"sha": "21b1282dbc1c1d87aa4cdec9145a977f59ec4f78", "filename": "libstdc++-v3/include/ext/extptr_allocator.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c51b58dc1f298bc8255758a51e94d5b7478b56ab/libstdc%2B%2B-v3%2Finclude%2Fext%2Fextptr_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c51b58dc1f298bc8255758a51e94d5b7478b56ab/libstdc%2B%2B-v3%2Finclude%2Fext%2Fextptr_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fextptr_allocator.h?ref=c51b58dc1f298bc8255758a51e94d5b7478b56ab", "patch": "@@ -107,10 +107,19 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         construct(_Up* __p, _Args&&... __args)\n \t{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }\n \n+      template<typename... _Args>\n+        void\n+        construct(pointer __p, _Args&&... __args)\n+\t{ construct(__p.get(), std::forward<_Args>(__args)...); }\n+\n       template<typename _Up>\n         void \n         destroy(_Up* __p)\n         { __p->~_Up(); }\n+\n+      void destroy(pointer __p)\n+      { destroy(__p.get()); }\n+\n #else\n \n       void construct(pointer __p, const _Tp& __val)"}, {"sha": "974f2c4bb5c3b8f54004f0458afe75b67c1a431f", "filename": "libstdc++-v3/testsuite/23_containers/vector/ext_pointer/explicit_instantiation/2.cc", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c51b58dc1f298bc8255758a51e94d5b7478b56ab/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fext_pointer%2Fexplicit_instantiation%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c51b58dc1f298bc8255758a51e94d5b7478b56ab/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fext_pointer%2Fexplicit_instantiation%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fext_pointer%2Fexplicit_instantiation%2F2.cc?ref=c51b58dc1f298bc8255758a51e94d5b7478b56ab", "patch": "@@ -0,0 +1,28 @@\n+// Test for Container using non-standard pointer types.\n+\n+// Copyright (C) 2011\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+\n+#include <vector>\n+#include <ext/extptr_allocator.h>\n+\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+template class std::vector<int, __gnu_cxx::_ExtPtr_allocator<int> >;"}, {"sha": "929e7d57cdef06debd1ad5c759147f7557180cfb", "filename": "libstdc++-v3/testsuite/23_containers/vector/ext_pointer/types/2.cc", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c51b58dc1f298bc8255758a51e94d5b7478b56ab/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fext_pointer%2Ftypes%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c51b58dc1f298bc8255758a51e94d5b7478b56ab/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fext_pointer%2Ftypes%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fext_pointer%2Ftypes%2F2.cc?ref=c51b58dc1f298bc8255758a51e94d5b7478b56ab", "patch": "@@ -0,0 +1,63 @@\n+// Test for Container using non-standard pointer types.\n+\n+// Copyright (C) 2011\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// This is a copy of vector/types/1.cc with altered allocator.\n+// The operator+()s in this test initially failed the test -\n+// they stress the accurate recognition, by the compiler,\n+// of _Pointer_adapter's own pointer arithmetic functions,\n+// which have to match perfectly on the int type to get\n+// chosen by the compiler when it sees: _Pointer_adapter<T> + int, etc.\n+\n+#include <vector>\n+#include <ext/extptr_allocator.h>\n+\n+namespace N\n+{\n+  struct X { };\n+\n+  template<typename T>\n+    X operator+(T, std::size_t)\n+    { return X(); }\n+\n+  template<typename T>\n+    X operator-(T, T)\n+    { return X(); }\n+}\n+\n+int main()\n+{\n+  std::vector<N::X, __gnu_cxx::_ExtPtr_allocator<N::X> > v(5);\n+  const std::vector<N::X, __gnu_cxx::_ExtPtr_allocator<N::X> > w(1);\n+\n+  v[0];\n+  w[0];\n+  v.size();\n+  v.capacity();\n+  v.resize(1);\n+  v.insert(v.begin(), N::X());\n+  v.insert(v.begin(), 1, N::X());\n+  v.insert(v.begin(), w.begin(), w.end());\n+  v = w;\n+\n+  return 0;\n+}"}]}