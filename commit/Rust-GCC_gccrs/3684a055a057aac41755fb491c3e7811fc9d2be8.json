{"sha": "3684a055a057aac41755fb491c3e7811fc9d2be8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzY4NGEwNTVhMDU3YWFjNDE3NTVmYjQ5MWMzZTc4MTFmYzlkMmJlOA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2003-03-26T22:53:37Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2003-03-26T22:53:37Z"}, "message": "c-decl.c (finish_function): Always defer if DECL_DECLARED_INLINE_P.\n\n        * c-decl.c (finish_function): Always defer if DECL_DECLARED_INLINE_P.\n\t* gcc.dg/inline-4.c: New.\n\nFrom-SVN: r64906", "tree": {"sha": "40e101ec1a304189da3cf503f6390f36111d1121", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/40e101ec1a304189da3cf503f6390f36111d1121"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3684a055a057aac41755fb491c3e7811fc9d2be8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3684a055a057aac41755fb491c3e7811fc9d2be8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3684a055a057aac41755fb491c3e7811fc9d2be8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3684a055a057aac41755fb491c3e7811fc9d2be8/comments", "author": null, "committer": null, "parents": [{"sha": "1c81e34352a99967cc1f42c82d71b0dfcfb57332", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c81e34352a99967cc1f42c82d71b0dfcfb57332", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c81e34352a99967cc1f42c82d71b0dfcfb57332"}], "stats": {"total": 31, "additions": 29, "deletions": 2}, "files": [{"sha": "676400029bd624049dcabb84f9e33229220b04bb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3684a055a057aac41755fb491c3e7811fc9d2be8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3684a055a057aac41755fb491c3e7811fc9d2be8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3684a055a057aac41755fb491c3e7811fc9d2be8", "patch": "@@ -1,3 +1,7 @@\n+2003-03-26  Richard Henderson  <rth@redhat.com>\n+\n+\t* c-decl.c (finish_function): Always defer if DECL_DECLARED_INLINE_P.\n+\n 2003-03-26  Roger Sayle  <roger@eyesopen.com>\n \n \tPR bootstrap/10051, PR bootstrap/10169."}, {"sha": "d52823bde97b3e74eeb71bbc04f13d20ffd2f67c", "filename": "gcc/c-decl.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3684a055a057aac41755fb491c3e7811fc9d2be8/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3684a055a057aac41755fb491c3e7811fc9d2be8/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=3684a055a057aac41755fb491c3e7811fc9d2be8", "patch": "@@ -6460,8 +6460,13 @@ finish_function (nested, can_defer_p)\n \t     function completely.  */\n \t  timevar_push (TV_INTEGRATION);\n \t  uninlinable = ! tree_inlinable_function_p (fndecl, 0);\n-\t  \n-\t  if (! uninlinable && can_defer_p\n+\n+\t  if (can_defer_p\n+\t      /* We defer functions marked inline *even if* the function\n+\t\t itself is not inlinable.  This is because we don't yet\n+\t\t know if the function will actually be used; we may be\n+\t\t able to avoid emitting it entirely.  */\n+\t      && (! uninlinable || DECL_DECLARED_INLINE_P (fndecl))\n \t      /* Save function tree for inlining.  Should return 0 if the\n \t\t language does not support function deferring or the\n \t\t function could not be deferred.  */"}, {"sha": "2442f2d392d04642af233b8ca20c77c1e64a4fab", "filename": "gcc/testsuite/gcc.dg/inline-4.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3684a055a057aac41755fb491c3e7811fc9d2be8/gcc%2Ftestsuite%2Fgcc.dg%2Finline-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3684a055a057aac41755fb491c3e7811fc9d2be8/gcc%2Ftestsuite%2Fgcc.dg%2Finline-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Finline-4.c?ref=3684a055a057aac41755fb491c3e7811fc9d2be8", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-final { scan-assembler-not \"big_static_inline\" } } */\n+\n+extern void f(void);\n+static inline void big_static_inline(void)\n+{\n+  f(); f(); f(); f(); f(); f(); f(); f(); f(); f();\n+  f(); f(); f(); f(); f(); f(); f(); f(); f(); f();\n+  f(); f(); f(); f(); f(); f(); f(); f(); f(); f();\n+  f(); f(); f(); f(); f(); f(); f(); f(); f(); f();\n+  f(); f(); f(); f(); f(); f(); f(); f(); f(); f();\n+  f(); f(); f(); f(); f(); f(); f(); f(); f(); f();\n+  f(); f(); f(); f(); f(); f(); f(); f(); f(); f();\n+  f(); f(); f(); f(); f(); f(); f(); f(); f(); f();\n+  f(); f(); f(); f(); f(); f(); f(); f(); f(); f();\n+  f(); f(); f(); f(); f(); f(); f(); f(); f(); f();\n+}"}]}