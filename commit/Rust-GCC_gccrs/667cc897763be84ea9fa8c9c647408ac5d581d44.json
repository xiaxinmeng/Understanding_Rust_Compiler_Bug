{"sha": "667cc897763be84ea9fa8c9c647408ac5d581d44", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjY3Y2M4OTc3NjNiZTg0ZWE5ZmE4YzljNjQ3NDA4YWM1ZDU4MWQ0NA==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-06-25T22:14:56Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-06-25T22:14:56Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r1287", "tree": {"sha": "8fba6eea9cd45a91e8ffc5c3bfd9ecd0a512251f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8fba6eea9cd45a91e8ffc5c3bfd9ecd0a512251f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/667cc897763be84ea9fa8c9c647408ac5d581d44", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/667cc897763be84ea9fa8c9c647408ac5d581d44", "html_url": "https://github.com/Rust-GCC/gccrs/commit/667cc897763be84ea9fa8c9c647408ac5d581d44", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/667cc897763be84ea9fa8c9c647408ac5d581d44/comments", "author": null, "committer": null, "parents": [{"sha": "96735c06181e71c4b0f87a63f92c290f31ab4541", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96735c06181e71c4b0f87a63f92c290f31ab4541", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96735c06181e71c4b0f87a63f92c290f31ab4541"}], "stats": {"total": 74, "additions": 43, "deletions": 31}, "files": [{"sha": "4e8571a7c6f562ae5feba70999466ba81c8ef848", "filename": "gcc/protoize.c", "status": "modified", "additions": 43, "deletions": 31, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/667cc897763be84ea9fa8c9c647408ac5d581d44/gcc%2Fprotoize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/667cc897763be84ea9fa8c9c647408ac5d581d44/gcc%2Fprotoize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprotoize.c?ref=667cc897763be84ea9fa8c9c647408ac5d581d44", "patch": "@@ -597,8 +597,7 @@ xmalloc (byte_count)\n   rv = malloc (byte_count);\n   if (rv == NULL)\n     {\n-      fprintf (stderr, \"\\n%s: fatal error: can't allocate %u more bytes of memory\\n\",\n-\t       pname, byte_count);\n+      fprintf (stderr, \"\\n%s: virtual memory exceeded\\n\", pname);\n       exit (1);\n       return 0;\t\t/* avoid warnings */\n     }\n@@ -618,8 +617,7 @@ xrealloc (old_space, byte_count)\n   rv = realloc (old_space, byte_count);\n   if (rv == NULL)\n     {\n-      fprintf (stderr, \"\\n%s: fatal error: can't allocate %u more bytes of memory\\n\",\n-\t       pname, byte_count);\n+      fprintf (stderr, \"\\n%s: virtual memory exceeded\\n\", pname);\n       exit (1);\n       return 0;\t\t/* avoid warnings */\n     }\n@@ -1406,7 +1404,7 @@ find_file (filename, do_not_stat)\n         {\n           if (my_stat (filename, &stat_buf) == -1)\n             {\n-              fprintf (stderr, \"%s: error: can't get status of `%s': %s\\n\",\n+              fprintf (stderr, \"%s: %s: can't get status: %s\\n\",\n \t\t       pname, shortpath (NULL, filename), sys_errlist[errno]);\n               stat_buf.st_mtime = (time_t) -1;\n             }\n@@ -1743,11 +1741,10 @@ save_def_or_dec (l, is_syscalls)\n           {\n             if (strcmp (def_dec_p->ansi_decl, other->ansi_decl))\n               {\n-                fprintf (stderr, \"%s: error: declaration of function `%s' at %s(%d) takes different forms\\n\",\n-\t\t\t pname,\n-\t\t\t def_dec_p->hash_entry->symbol,\n+                fprintf (stderr, \"%s:%d: declaration of function `%s' takes different forms\\n\",\n \t\t\t def_dec_p->file->hash_entry->symbol,\n-\t\t\t def_dec_p->line);\n+\t\t\t def_dec_p->line,\n+\t\t\t def_dec_p->hash_entry->symbol);\n                 exit (1);\n               }\n             free_def_dec (def_dec_p);\n@@ -2001,7 +1998,7 @@ gen_aux_info_file (base_filename)\n     {\n       if (child_pid == -1)\n         {\n-          fprintf (stderr, \"%s: error: could not fork process: %s\\n\",\n+          fprintf (stderr, \"%s: could not fork process: %s\\n\",\n \t\t   pname, sys_errlist[errno]);\n           return 0;\n         }\n@@ -2113,7 +2110,7 @@ start_over: ;\n \t}\n       else\n \t{\n-\t  fprintf (stderr, \"%s: error: can't read aux info file `%s': %s\\n\",\n+\t  fprintf (stderr, \"%s: can't read aux info file `%s': %s\\n\",\n \t\t   pname, shortpath (NULL, aux_info_filename),\n \t\t   sys_errlist[errno]);\n \t  errors++;\n@@ -2141,7 +2138,7 @@ start_over: ;\n \t}\n       if (my_access (aux_info_filename, R_OK) == -1)\n \t{\n-\t  fprintf (stderr, \"%s: error: can't read aux info file `%s': %s\\n\",\n+\t  fprintf (stderr, \"%s: can't read aux info file `%s': %s\\n\",\n \t\t   pname, shortpath (NULL, aux_info_filename),\n \t\t   sys_errlist[errno]);\n \t  errors++;\n@@ -2156,7 +2153,7 @@ start_over: ;\n   \n     if (my_stat (aux_info_filename, &stat_buf) == -1)\n       {\n-        fprintf (stderr, \"%s: error: can't get status of aux info file `%s': %s\\n\",\n+        fprintf (stderr, \"%s: can't get status of aux info file `%s': %s\\n\",\n \t\t pname, shortpath (NULL, aux_info_filename),\n \t\t sys_errlist[errno]);\n         errors++;\n@@ -2174,6 +2171,21 @@ start_over: ;\n        contains information about are at least this old or older.  */\n   \n     aux_info_mtime = stat_buf.st_mtime;\n+\n+    /* Compare mod time with the .c file; update .X file if obsolete.\n+       The code later on can fail to check the .c file\n+       if it did not directly define any functions.  */\n+  \n+    if (my_stat (base_source_filename, &stat_buf) == -1)\n+      {\n+        fprintf (stderr, \"%s: can't get status of aux info file `%s': %s\\n\",\n+\t\t pname, shortpath (NULL, base_source_filename),\n+\t\t sys_errlist[errno]);\n+        errors++;\n+        return;\n+      }\n+    if (stat_buf.st_mtime > aux_info_mtime)\n+      goto start_over;\n   }\n \n   {\n@@ -2183,7 +2195,7 @@ start_over: ;\n   \n     if ((aux_info_file = my_open (aux_info_filename, O_RDONLY, 0444 )) == -1)\n       {\n-        fprintf (stderr, \"%s: error: can't open aux info file `%s' for reading: %s\\n\",\n+        fprintf (stderr, \"%s: can't open aux info file `%s' for reading: %s\\n\",\n \t\t pname, shortpath (NULL, aux_info_filename),\n \t\t sys_errlist[errno]);\n         return;\n@@ -2199,7 +2211,7 @@ start_over: ;\n   \n     if (read (aux_info_file, aux_info_base, aux_info_size) != aux_info_size)\n       {\n-        fprintf (stderr, \"%s: error: while reading aux info file `%s': %s\\n\",\n+        fprintf (stderr, \"%s: error reading aux info file `%s': %s\\n\",\n \t\t pname, shortpath (NULL, aux_info_filename),\n \t\t sys_errlist[errno]);\n         free (aux_info_base);\n@@ -2211,7 +2223,7 @@ start_over: ;\n   \n     if (close (aux_info_file))\n       {\n-        fprintf (stderr, \"%s: error: while closing aux info file `%s': %s\\n\",\n+        fprintf (stderr, \"%s: error closing aux info file `%s': %s\\n\",\n \t\t pname, shortpath (NULL, aux_info_filename),\n \t\t sys_errlist[errno]);\n         free (aux_info_base);\n@@ -2223,9 +2235,9 @@ start_over: ;\n   /* Delete the aux_info file (unless requested not to).  If the deletion\n      fails for some reason, don't even worry about it.  */\n \n-  if (!keep_it)\n+  if (must_create && !keep_it)\n     if (my_unlink (aux_info_filename) == -1)\n-      fprintf (stderr, \"%s: error: can't delete aux info file `%s': %s\\n\",\n+      fprintf (stderr, \"%s: can't delete aux info file `%s': %s\\n\",\n \t       pname, shortpath (NULL, aux_info_filename),\n \t       sys_errlist[errno]);\n \n@@ -2291,7 +2303,7 @@ start_over: ;\n \t\txfree (aux_info_relocated_name);\n                 if (keep_it && my_unlink (aux_info_filename) == -1)\n                   {\n-                    fprintf (stderr, \"%s: error: can't delete file `%s': %s\\n\",\n+                    fprintf (stderr, \"%s: can't delete file `%s': %s\\n\",\n \t\t\t     pname, shortpath (NULL, aux_info_filename),\n \t\t\t     sys_errlist[errno]);\n                     return;\n@@ -2499,7 +2511,7 @@ find_extern_def (head, user)\n             if (!conflict_noted)\t/* first time we noticed? */\n               {\n                 conflict_noted = 1;\n-                fprintf (stderr, \"%s: error: conflicting extern definitions of '%s'\\n\",\n+                fprintf (stderr, \"%s: conflicting extern definitions of '%s'\\n\",\n \t\t\t pname, head->hash_entry->symbol);\n                 if (!quiet_flag)\n                   {\n@@ -2621,7 +2633,7 @@ find_static_definition (user)\n     }\n   else if (num_static_defs > 1)\n     {\n-      fprintf (stderr, \"%s: error: multiple static defs of `%s' in file `%s'\\n\",\n+      fprintf (stderr, \"%s: multiple static defs of `%s' in file `%s'\\n\",\n \t       pname, head->hash_entry->symbol,\n \t       shortpath (NULL, user->file->hash_entry->symbol));\n       return NULL;\n@@ -4071,7 +4083,7 @@ edit_file (hp)\n   /* The cast avoids an erroneous warning on AIX.  */\n   if (my_stat ((char *)convert_filename, &stat_buf) == -1)\n     {\n-      fprintf (stderr, \"%s: error: can't get status for file `%s': %s\\n\",\n+      fprintf (stderr, \"%s: can't get status for file `%s': %s\\n\",\n \t       pname, shortpath (NULL, convert_filename), sys_errlist[errno]);\n       return;\n     }\n@@ -4105,7 +4117,7 @@ edit_file (hp)\n \n     if ((input_file = my_open (convert_filename, O_RDONLY, 0444)) == -1)\n       {\n-        fprintf (stderr, \"%s: error: can't open file `%s' for reading: %s\\n\",\n+        fprintf (stderr, \"%s: can't open file `%s' for reading: %s\\n\",\n \t\t pname, shortpath (NULL, convert_filename),\n \t\t sys_errlist[errno]);\n         return;\n@@ -4118,7 +4130,7 @@ edit_file (hp)\n     if (read (input_file, new_orig_text_base, orig_size) != orig_size)\n       {\n         close (input_file);\n-        fprintf (stderr, \"\\n%s: error: while reading input file `%s': %s\\n\",\n+        fprintf (stderr, \"\\n%s: error reading input file `%s': %s\\n\",\n \t\t pname, shortpath (NULL, convert_filename),\n \t\t sys_errlist[errno]);\n         return;\n@@ -4151,7 +4163,7 @@ edit_file (hp)\n     strcat (clean_filename, \".clean\");\n     if ((clean_file = creat (clean_filename, 0666)) == -1)\n       {\n-        fprintf (stderr, \"%s: error: can't create/open clean file `%s': %s\\n\",\n+        fprintf (stderr, \"%s: can't create/open clean file `%s': %s\\n\",\n \t\t pname, shortpath (NULL, clean_filename),\n \t\t sys_errlist[errno]);\n         return;\n@@ -4160,7 +4172,7 @@ edit_file (hp)\n     /* Write the clean file.  */\n   \n     if (write (clean_file, new_clean_text_base, clean_size) != clean_size)\n-      fprintf (stderr, \"%s: error: while writing file `%s': %s\\n\",\n+      fprintf (stderr, \"%s: error writing file `%s': %s\\n\",\n \t       pname, shortpath (NULL, clean_filename), sys_errlist[errno]);\n   \n     close (clean_file);\n@@ -4260,7 +4272,7 @@ edit_file (hp)\n             }\n           else\n             {\n-              fprintf (stderr, \"%s: error: can't link file `%s' to `%s': %s\\n\",\n+              fprintf (stderr, \"%s: can't link file `%s' to `%s': %s\\n\",\n \t\t       pname,\n \t\t       shortpath (NULL, convert_filename),\n \t\t       shortpath (NULL, new_filename),\n@@ -4272,7 +4284,7 @@ edit_file (hp)\n \n   if (my_unlink (convert_filename) == -1)\n     {\n-      fprintf (stderr, \"%s: error: can't delete file `%s': %s\\n\",\n+      fprintf (stderr, \"%s: can't delete file `%s': %s\\n\",\n \t       pname, shortpath (NULL, convert_filename), sys_errlist[errno]);\n       return;\n     }\n@@ -4284,7 +4296,7 @@ edit_file (hp)\n   \n     if ((output_file = creat (convert_filename, 0666)) == -1)\n       {\n-        fprintf (stderr, \"%s: error: can't create/open output file `%s': %s\\n\",\n+        fprintf (stderr, \"%s: can't create/open output file `%s': %s\\n\",\n \t\t pname, shortpath (NULL, convert_filename),\n \t\t sys_errlist[errno]);\n         return;\n@@ -4296,7 +4308,7 @@ edit_file (hp)\n       unsigned int out_size = (repl_write_ptr + 1) - repl_text_base;\n   \n       if (write (output_file, repl_text_base, out_size) != out_size)\n-        fprintf (stderr, \"%s: error: while writing file `%s': %s\\n\",\n+        fprintf (stderr, \"%s: error writing file `%s': %s\\n\",\n \t\t pname, shortpath (NULL, convert_filename),\n \t\t sys_errlist[errno]);\n     }\n@@ -4314,7 +4326,7 @@ edit_file (hp)\n \n   /* The cast avoids an erroneous warning on AIX.  */\n   if (my_chmod ((char *)convert_filename, stat_buf.st_mode) == -1)\n-    fprintf (stderr, \"%s: error: can't change mode of file `%s': %s\\n\",\n+    fprintf (stderr, \"%s: can't change mode of file `%s': %s\\n\",\n \t     pname, shortpath (NULL, convert_filename), sys_errlist[errno]);\n \n   /* Note:  We would try to change the owner and group of the output file"}]}