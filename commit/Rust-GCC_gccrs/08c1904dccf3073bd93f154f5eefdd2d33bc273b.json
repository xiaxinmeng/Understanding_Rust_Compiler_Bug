{"sha": "08c1904dccf3073bd93f154f5eefdd2d33bc273b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDhjMTkwNGRjY2YzMDczYmQ5M2YxNTRmNWVlZmRkMmQzM2JjMjczYg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2016-03-02T21:09:54Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2016-03-02T21:09:54Z"}, "message": "re PR rtl-optimization/67145 (associativity from pseudo-reg ordering)\n\nPR rtl-opt/67145\n\n  * simplify-rtx.c (simplify_plus_minus): Allow reassoc without\n  simplification when all args are positive non-fixed registers.\n\nFrom-SVN: r233916", "tree": {"sha": "baae125ee96286848093048fcb31ae88608f9fe0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/baae125ee96286848093048fcb31ae88608f9fe0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/08c1904dccf3073bd93f154f5eefdd2d33bc273b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08c1904dccf3073bd93f154f5eefdd2d33bc273b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08c1904dccf3073bd93f154f5eefdd2d33bc273b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08c1904dccf3073bd93f154f5eefdd2d33bc273b/comments", "author": null, "committer": null, "parents": [{"sha": "82ee0cf2f7e46ef7ebc67fb770587c9a2bbafd3b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82ee0cf2f7e46ef7ebc67fb770587c9a2bbafd3b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82ee0cf2f7e46ef7ebc67fb770587c9a2bbafd3b"}], "stats": {"total": 28, "additions": 26, "deletions": 2}, "files": [{"sha": "2adcc5f0ce67b1a23d1f481c0daa1b9de01d845f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08c1904dccf3073bd93f154f5eefdd2d33bc273b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08c1904dccf3073bd93f154f5eefdd2d33bc273b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=08c1904dccf3073bd93f154f5eefdd2d33bc273b", "patch": "@@ -1,3 +1,9 @@\n+2016-03-02  Richard Henderson  <rth@redhat.com>\n+\n+\tPR rtl-opt/67145\n+\t* simplify-rtx.c (simplify_plus_minus): Allow reassoc without\n+\tsimplification when all args are positive non-fixed registers.\n+\n 2016-03-02  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \n \t* target.def (lra_p): Specify that new ports should use LRA."}, {"sha": "e1a0319c26f1145f916422e0ad2c1941202212c3", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08c1904dccf3073bd93f154f5eefdd2d33bc273b/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08c1904dccf3073bd93f154f5eefdd2d33bc273b/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=08c1904dccf3073bd93f154f5eefdd2d33bc273b", "patch": "@@ -4421,9 +4421,26 @@ simplify_plus_minus (enum rtx_code code, machine_mode mode, rtx op0,\n       n_ops = i;\n     }\n \n-  /* If nothing changed, fail.  */\n+  /* If nothing changed, check that rematerialization of rtl instructions\n+     is still required.  */\n   if (!canonicalized)\n-    return NULL_RTX;\n+    {\n+      /* Perform rematerialization if only all operands are registers and\n+\t all operations are PLUS.  */\n+      /* ??? Also disallow (non-global, non-frame) fixed registers to work\n+\t around rs6000 and how it uses the CA register.  See PR67145.  */\n+      for (i = 0; i < n_ops; i++)\n+\tif (ops[i].neg\n+\t    || !REG_P (ops[i].op)\n+\t    || (REGNO (ops[i].op) < FIRST_PSEUDO_REGISTER\n+\t\t&& fixed_regs[REGNO (ops[i].op)]\n+\t\t&& !global_regs[REGNO (ops[i].op)]\n+\t\t&& ops[i].op != frame_pointer_rtx\n+\t\t&& ops[i].op != arg_pointer_rtx\n+\t\t&& ops[i].op != stack_pointer_rtx))\n+\t  return NULL_RTX;\n+      goto gen_result;\n+    }\n \n   /* Create (minus -C X) instead of (neg (const (plus X C))).  */\n   if (n_ops == 2\n@@ -4465,6 +4482,7 @@ simplify_plus_minus (enum rtx_code code, machine_mode mode, rtx op0,\n     }\n \n   /* Now make the result by performing the requested operations.  */\n+ gen_result:\n   result = ops[0].op;\n   for (i = 1; i < n_ops; i++)\n     result = gen_rtx_fmt_ee (ops[i].neg ? MINUS : PLUS,"}]}