{"sha": "9722215a027b68651c3c7a8af9204d033197e9c0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTcyMjIxNWEwMjdiNjg2NTFjM2M3YThhZjkyMDRkMDMzMTk3ZTljMA==", "commit": {"author": {"name": "Mihail Ionescu", "email": "mihail.ionescu@arm.com", "date": "2020-01-15T10:38:44Z"}, "committer": {"name": "Mihail Ionescu", "email": "mihail.ionescu@arm.com", "date": "2020-01-16T15:11:29Z"}, "message": "[PATCH, GCC/ARM, 4/10] Clear GPR with CLRM\n\nThis patch adds a new pattern for the CLRM instruction and guards the\ncurrent clearing code in output_return_instruction() and thumb_exit()\non Armv8.1-M Mainline instructions not being present.\ncmse_clear_registers () is then modified to use the new CLRM instruction\nwhen targeting Armv8.1-M Mainline while keeping Armv8-M register\nclearing code for VFP registers.\n\nFor the CLRM instruction, which does not mandated APSR in the register\nlist, checking whether it is the right volatile unspec or a clearing\nregister is done in clear_operation_p.\n\nNote that load/store multiple were deemed sufficiently different in\nterms of RTX structure compared to the CLRM pattern for a different\nfunction to be used to validate the match_parallel.\n\nChangeLog entries are as follows:\n\n*** gcc/ChangeLog ***\n\n2020-01-16  Mihail-Calin Ionescu  <mihail.ionescu@arm.com>\n2020-01-16  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n\n\t* config/arm/arm-protos.h (clear_operation_p): Declare.\n\t* config/arm/arm.c (clear_operation_p): New function.\n\t(cmse_clear_registers): Generate clear_multiple instruction pattern if\n\ttargeting Armv8.1-M Mainline or successor.\n\t(output_return_instruction): Only output APSR register clearing if\n\tArmv8.1-M Mainline instructions not available.\n\t(thumb_exit): Likewise.\n\t* config/arm/predicates.md (clear_multiple_operation): New predicate.\n\t* config/arm/thumb2.md (clear_apsr): New define_insn.\n\t(clear_multiple): Likewise.\n\t* config/arm/unspecs.md (VUNSPEC_CLRM_APSR): New volatile unspec.\n\n*** gcc/testsuite/ChangeLog ***\n\n2020-01-16  Mihail-Calin Ionescu  <mihail.ionescu@arm.com>\n2020-01-16  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n\n\t* gcc.target/arm/cmse/bitfield-1.c: Add check for CLRM.\n\t* gcc.target/arm/cmse/bitfield-2.c: Likewise.\n\t* gcc.target/arm/cmse/bitfield-3.c: Likewise.\n\t* gcc.target/arm/cmse/struct-1.c: Likewise.\n\t* gcc.target/arm/cmse/cmse-14.c: Likewise.\n\t* gcc.target/arm/cmse/cmse-1.c: Likewise.  Restrict checks for Armv8-M\n\tGPR clearing when CLRM is not available.\n\t* gcc.target/arm/cmse/mainline/8_1m/bitfield-4.c: Likewise.\n\t* gcc.target/arm/cmse/mainline/8_1m/bitfield-5.c: Likewise.\n\t* gcc.target/arm/cmse/mainline/8_1m/bitfield-6.c: Likewise.\n\t* gcc.target/arm/cmse/mainline/8_1m/bitfield-7.c: Likewise.\n\t* gcc.target/arm/cmse/mainline/8_1m/bitfield-8.c: Likewise.\n\t* gcc.target/arm/cmse/mainline/8_1m/bitfield-9.c: Likewise.\n\t* gcc.target/arm/cmse/mainline/8_1m/hard-sp/cmse-13.c: Likewise.\n\t* gcc.target/arm/cmse/mainline/8_1m/hard-sp/cmse-5.c: Likewise.\n\t* gcc.target/arm/cmse/mainline/8_1m/hard-sp/cmse-7.c: Likewise.\n\t* gcc.target/arm/cmse/mainline/8_1m/hard-sp/cmse-8.c: Likewise.\n\t* gcc.target/arm/cmse/mainline/8_1m/hard/cmse-13.c: Likewise.\n\t* gcc.target/arm/cmse/mainline/8_1m/hard/cmse-5.c: likewise.\n\t* gcc.target/arm/cmse/mainline/8_1m/hard/cmse-7.c: likewise.\n\t* gcc.target/arm/cmse/mainline/8_1m/hard/cmse-8.c: likewise.\n\t* gcc.target/arm/cmse/mainline/8_1m/soft/cmse-13.c: Likewise.\n\t* gcc.target/arm/cmse/mainline/8_1m/soft/cmse-5.c: Likewise.\n\t* gcc.target/arm/cmse/mainline/8_1m/soft/cmse-7.c: Likewise.\n\t* gcc.target/arm/cmse/mainline/8_1m/soft/cmse-8.c: Likewise.\n\t* gcc.target/arm/cmse/mainline/8_1m/softfp-sp/cmse-5.c: Likewise.\n\t* gcc.target/arm/cmse/mainline/8_1m/softfp-sp/cmse-7.c: Likewise.\n\t* gcc.target/arm/cmse/mainline/8_1m/softfp-sp/cmse-8.c: Likewise.\n\t* gcc.target/arm/cmse/mainline/8_1m/softfp/cmse-13.c: Likewise.\n\t* gcc.target/arm/cmse/mainline/8_1m/softfp/cmse-5.c: Likewise.\n\t* gcc.target/arm/cmse/mainline/8_1m/softfp/cmse-7.c: Likewise.\n\t* gcc.target/arm/cmse/mainline/8_1m/softfp/cmse-8.c: Likewise.\n\t* gcc.target/arm/cmse/mainline/8_1m/union-1.c: Likewise.\n\t* gcc.target/arm/cmse/mainline/8_1m/union-2.c: Likewise.", "tree": {"sha": "e2e988f8d34299431fdecc2c6ddd7de939f5986b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e2e988f8d34299431fdecc2c6ddd7de939f5986b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9722215a027b68651c3c7a8af9204d033197e9c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9722215a027b68651c3c7a8af9204d033197e9c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9722215a027b68651c3c7a8af9204d033197e9c0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9722215a027b68651c3c7a8af9204d033197e9c0/comments", "author": null, "committer": null, "parents": [{"sha": "e0e4be48a9892195f11d1b608793c3a30b640f54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0e4be48a9892195f11d1b608793c3a30b640f54", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0e4be48a9892195f11d1b608793c3a30b640f54"}], "stats": {"total": 437, "additions": 311, "deletions": 126}, "files": [{"sha": "f3c94247f6ae619d6794ec41c3a21ec020841b79", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9722215a027b68651c3c7a8af9204d033197e9c0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9722215a027b68651c3c7a8af9204d033197e9c0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9722215a027b68651c3c7a8af9204d033197e9c0", "patch": "@@ -1,6 +1,21 @@\n 2020-01-16  Mihail-Calin Ionescu <mihail.ionescu@arm.com>\n 2020-01-16  Thomas Preud'homme <thomas.preudhomme@arm.com>\n \n+\t* config/arm/arm-protos.h (clear_operation_p): Declare.\n+\t* config/arm/arm.c (clear_operation_p): New function.\n+\t(cmse_clear_registers): Generate clear_multiple instruction pattern if\n+\ttargeting Armv8.1-M Mainline or successor.\n+\t(output_return_instruction): Only output APSR register clearing if\n+\tArmv8.1-M Mainline instructions not available.\n+\t(thumb_exit): Likewise.\n+\t* config/arm/predicates.md (clear_multiple_operation): New predicate.\n+\t* config/arm/thumb2.md (clear_apsr): New define_insn.\n+\t(clear_multiple): Likewise.\n+\t* config/arm/unspecs.md (VUNSPEC_CLRM_APSR): New volatile unspec.\n+\n+2020-01-16  Mihail-Calin Ionescu  <mihail.ionescu@arm.com>\n+2020-01-16  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n+\n \t* config/arm/arm.c (fp_sysreg_names): Declare and define.\n \t(use_return_insn): Also return false for Armv8.1-M Mainline.\n \t(output_return_instruction): Skip FPSCR clearing if Armv8.1-M"}, {"sha": "75793f61c042ef19a225c600288bfa7f9a7606d4", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9722215a027b68651c3c7a8af9204d033197e9c0/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9722215a027b68651c3c7a8af9204d033197e9c0/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=9722215a027b68651c3c7a8af9204d033197e9c0", "patch": "@@ -83,6 +83,7 @@ extern int thumb_legitimate_offset_p (machine_mode, HOST_WIDE_INT);\n extern int thumb1_legitimate_address_p (machine_mode, rtx, int);\n extern bool ldm_stm_operation_p (rtx, bool, machine_mode mode,\n                                  bool, bool);\n+extern bool clear_operation_p (rtx);\n extern int arm_const_double_rtx (rtx);\n extern int vfp3_const_double_rtx (rtx);\n extern int neon_immediate_valid_for_move (rtx, machine_mode, rtx *, int *);"}, {"sha": "d035ad3ae80d26227acabfe25763a40d8f99f3b9", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 170, "deletions": 36, "changes": 206, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9722215a027b68651c3c7a8af9204d033197e9c0/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9722215a027b68651c3c7a8af9204d033197e9c0/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=9722215a027b68651c3c7a8af9204d033197e9c0", "patch": "@@ -13709,6 +13709,70 @@ ldm_stm_operation_p (rtx op, bool load, machine_mode mode,\n   return true;\n }\n \n+/* Checks whether OP is a valid parallel pattern for a CLRM insn.  To be a\n+   valid CLRM pattern, OP must have the following form:\n+\n+   [(set (reg:SI <N>) (const_int 0))\n+    (set (reg:SI <M>) (const_int 0))\n+    ...\n+    (unspec_volatile [(const_int 0)]\n+\t\t     VUNSPEC_CLRM_APSR)\n+    (clobber (reg:CC CC_REGNUM))\n+   ]\n+\n+   Any number (including 0) of set expressions is valid, the volatile unspec is\n+   optional.  All registers but SP and PC are allowed and registers must be in\n+   strict increasing order.  */\n+\n+bool\n+clear_operation_p (rtx op)\n+{\n+  HOST_WIDE_INT i;\n+  unsigned regno, last_regno;\n+  rtx elt, reg, zero;\n+  machine_mode mode;\n+  HOST_WIDE_INT count = XVECLEN (op, 0);\n+\n+  for (i = 0; i < count; i++)\n+    {\n+      elt = XVECEXP (op, 0, i);\n+\n+      if (GET_CODE (elt) == UNSPEC_VOLATILE)\n+\t{\n+\t  if (XINT (elt, 1) != VUNSPEC_CLRM_APSR\n+\t      || XVECLEN (elt, 0) != 1\n+\t      || XVECEXP (elt, 0, 0) != CONST0_RTX (SImode)\n+\t      || i != count - 2)\n+\t    return false;\n+\n+\t  continue;\n+\t}\n+\n+      if (GET_CODE (elt) == CLOBBER)\n+\tcontinue;\n+\n+      if (GET_CODE (elt) != SET)\n+\treturn false;\n+\n+      reg = SET_DEST (elt);\n+      regno = REGNO (reg);\n+      mode = GET_MODE (reg);\n+      zero = SET_SRC (elt);\n+\n+      if (!REG_P (reg)\n+\t  || GET_MODE (reg) != SImode\n+\t  || regno == SP_REGNUM\n+\t  || regno == PC_REGNUM\n+\t  || (i != 0 && regno <= last_regno)\n+\t  || zero != CONST0_RTX (SImode))\n+\treturn false;\n+\n+      last_regno = REGNO (reg);\n+    }\n+\n+  return true;\n+}\n+\n /* Return true iff it would be profitable to turn a sequence of NOPS loads\n    or stores (depending on IS_STORE) into a load-multiple or store-multiple\n    instruction.  ADD_OFFSET is nonzero if the base address register needs\n@@ -18039,6 +18103,62 @@ cmse_clear_registers (sbitmap to_clear_bitmap, uint32_t *padding_bits_to_clear,\n \n   /* Clear full registers.  */\n \n+  if (TARGET_HAVE_FPCXT_CMSE)\n+    {\n+      rtvec vunspec_vec;\n+      int i, j, k, nb_regs;\n+      rtx use_seq, par, reg, set, vunspec;\n+      int to_clear_bitmap_size = SBITMAP_SIZE (to_clear_bitmap);\n+      auto_sbitmap core_regs_bitmap (to_clear_bitmap_size);\n+      auto_sbitmap to_clear_core_bitmap (to_clear_bitmap_size);\n+\n+      /* Get set of core registers to clear.  */\n+      bitmap_clear (core_regs_bitmap);\n+      bitmap_set_range (core_regs_bitmap, R0_REGNUM,\n+\t\t\tIP_REGNUM - R0_REGNUM + 1);\n+      bitmap_and (to_clear_core_bitmap, to_clear_bitmap,\n+\t\t  core_regs_bitmap);\n+      gcc_assert (!bitmap_empty_p (to_clear_core_bitmap));\n+\n+      if (bitmap_empty_p (to_clear_core_bitmap))\n+\treturn;\n+\n+      /* Create clrm RTX pattern.  */\n+      nb_regs = bitmap_count_bits (to_clear_core_bitmap);\n+      par = gen_rtx_PARALLEL (VOIDmode, rtvec_alloc (nb_regs + 2));\n+\n+      /* Insert core register clearing RTX in the pattern.  */\n+      start_sequence ();\n+      for (j = 0, i = minregno; j < nb_regs; i++)\n+\t{\n+\t  if (!bitmap_bit_p (to_clear_core_bitmap, i))\n+\t    continue;\n+\n+\t  reg = gen_rtx_REG (SImode, i);\n+\t  set = gen_rtx_SET (reg, const0_rtx);\n+\t  XVECEXP (par, 0, j++) = set;\n+\t  emit_use (reg);\n+\t}\n+\n+      /* Insert APSR register clearing RTX in the pattern\n+       * along with clobbering CC.  */\n+      vunspec_vec = gen_rtvec (1, gen_int_mode (0, SImode));\n+      vunspec = gen_rtx_UNSPEC_VOLATILE (SImode, vunspec_vec,\n+\t\t\t\t\t VUNSPEC_CLRM_APSR);\n+\n+      XVECEXP (par, 0, j++) = vunspec;\n+\n+      rtx ccreg = gen_rtx_REG (CCmode, CC_REGNUM);\n+      rtx clobber = gen_rtx_CLOBBER (VOIDmode, ccreg);\n+      XVECEXP (par, 0, j) = clobber;\n+\n+      use_seq = get_insns ();\n+      end_sequence ();\n+\n+      emit_insn_after (use_seq, emit_insn (par));\n+      minregno = FIRST_VFP_REGNUM;\n+    }\n+\n   /* If not marked for clearing, clearing_reg already does not contain\n      any secret.  */\n   if (clearing_regno <= maxregno\n@@ -20702,40 +20822,42 @@ output_return_instruction (rtx operand, bool really_return, bool reverse,\n \tdefault:\n \t  if (IS_CMSE_ENTRY (func_type))\n \t    {\n-\t      /* Check if we have to clear the 'GE bits' which is only used if\n-\t\t parallel add and subtraction instructions are available.  */\n-\t      if (TARGET_INT_SIMD)\n-\t\tsnprintf (instr, sizeof (instr),\n-\t\t\t  \"msr%s\\tAPSR_nzcvqg, %%|lr\", conditional);\n-\t      else\n-\t\tsnprintf (instr, sizeof (instr),\n-\t\t\t  \"msr%s\\tAPSR_nzcvq, %%|lr\", conditional);\n-\n-\t      output_asm_insn (instr, & operand);\n-\t      /* Do not clear FPSCR if targeting Armv8.1-M Mainline, VLDR takes\n-\t\t care of it.  */\n-\t      if (TARGET_HARD_FLOAT && ! TARGET_HAVE_FPCXT_CMSE)\n+\t      /* For Armv8.1-M, this is cleared as part of the CLRM instruction\n+\t\t emitted by cmse_nonsecure_entry_clear_before_return () and the\n+\t\t VSTR/VLDR instructions in the prologue and epilogue.  */\n+\t      if (!TARGET_HAVE_FPCXT_CMSE)\n \t\t{\n-\t\t  /* Clear the cumulative exception-status bits (0-4,7) and the\n-\t\t     condition code bits (28-31) of the FPSCR.  We need to\n-\t\t     remember to clear the first scratch register used (IP) and\n-\t\t     save and restore the second (r4).  */\n-\t\t  snprintf (instr, sizeof (instr), \"push\\t{%%|r4}\");\n-\t\t  output_asm_insn (instr, & operand);\n-\t\t  snprintf (instr, sizeof (instr), \"vmrs\\t%%|ip, fpscr\");\n-\t\t  output_asm_insn (instr, & operand);\n-\t\t  snprintf (instr, sizeof (instr), \"movw\\t%%|r4, #65376\");\n-\t\t  output_asm_insn (instr, & operand);\n-\t\t  snprintf (instr, sizeof (instr), \"movt\\t%%|r4, #4095\");\n-\t\t  output_asm_insn (instr, & operand);\n-\t\t  snprintf (instr, sizeof (instr), \"and\\t%%|ip, %%|r4\");\n-\t\t  output_asm_insn (instr, & operand);\n-\t\t  snprintf (instr, sizeof (instr), \"vmsr\\tfpscr, %%|ip\");\n-\t\t  output_asm_insn (instr, & operand);\n-\t\t  snprintf (instr, sizeof (instr), \"pop\\t{%%|r4}\");\n-\t\t  output_asm_insn (instr, & operand);\n-\t\t  snprintf (instr, sizeof (instr), \"mov\\t%%|ip, %%|lr\");\n+\t\t  /* Check if we have to clear the 'GE bits' which is only used if\n+\t\t     parallel add and subtraction instructions are available.  */\n+\t\t  if (TARGET_INT_SIMD)\n+\t\t    snprintf (instr, sizeof (instr),\n+\t\t\t      \"msr%s\\tAPSR_nzcvqg, %%|lr\", conditional);\n+\t\t  else\n+\t\t    snprintf (instr, sizeof (instr),\n+\t\t\t      \"msr%s\\tAPSR_nzcvq, %%|lr\", conditional);\n+\n \t\t  output_asm_insn (instr, & operand);\n+\t\t  /* Do not clear FPSCR if targeting Armv8.1-M Mainline, VLDR takes\n+\t\t     care of it.  */\n+\t\t  if (TARGET_HARD_FLOAT)\n+\t\t    {\n+\t\t      /* Clear the cumulative exception-status bits (0-4,7) and\n+\t\t\t the condition code bits (28-31) of the FPSCR.  We need\n+\t\t\t to remember to clear the first scratch register used\n+\t\t\t (IP) and save and restore the second (r4).\n+\n+\t\t\t Important note: the length of the\n+\t\t\t thumb2_cmse_entry_return insn pattern must account for\n+\t\t\t the size of the below instructions.  */\n+\t\t      output_asm_insn (\"push\\t{%|r4}\", & operand);\n+\t\t      output_asm_insn (\"vmrs\\t%|ip, fpscr\", & operand);\n+\t\t      output_asm_insn (\"movw\\t%|r4, #65376\", & operand);\n+\t\t      output_asm_insn (\"movt\\t%|r4, #4095\", & operand);\n+\t\t      output_asm_insn (\"and\\t%|ip, %|r4\", & operand);\n+\t\t      output_asm_insn (\"vmsr\\tfpscr, %|ip\", & operand);\n+\t\t      output_asm_insn (\"pop\\t{%|r4}\", & operand);\n+\t\t      output_asm_insn (\"mov\\t%|ip, %|lr\", & operand);\n+\t\t    }\n \t\t}\n \t      snprintf (instr, sizeof (instr), \"bxns\\t%%|lr\");\n \t    }\n@@ -22718,6 +22840,9 @@ arm_expand_prologue (void)\n       saved_regs += 4;\n       insn = emit_insn (gen_push_fpsysreg_insn (stack_pointer_rtx,\n \t\t\t\t\t\tGEN_INT (FPCXTNS_ENUM)));\n+      rtx dwarf = gen_rtx_SET (stack_pointer_rtx,\n+\t\t\t  plus_constant (Pmode, stack_pointer_rtx, -4));\n+      add_reg_note (insn, REG_FRAME_RELATED_EXPR, dwarf);\n       RTX_FRAME_RELATED_P (insn) = 1;\n     }\n \n@@ -25134,8 +25259,11 @@ thumb_exit (FILE *f, int reg_containing_return_addr)\n \n       if (IS_CMSE_ENTRY (arm_current_func_type ()))\n \t{\n-\t  asm_fprintf (f, \"\\tmsr\\tAPSR_nzcvq, %r\\n\",\n-\t\t       reg_containing_return_addr);\n+\t  /* For Armv8.1-M, this is cleared as part of the CLRM instruction\n+\t     emitted by cmse_nonsecure_entry_clear_before_return ().  */\n+\t  if (!TARGET_HAVE_FPCXT_CMSE)\n+\t    asm_fprintf (f, \"\\tmsr\\tAPSR_nzcvq, %r\\n\",\n+\t\t\t reg_containing_return_addr);\n \t  asm_fprintf (f, \"\\tbxns\\t%r\\n\", reg_containing_return_addr);\n \t}\n       else\n@@ -25375,11 +25503,14 @@ thumb_exit (FILE *f, int reg_containing_return_addr)\n          address.  It may therefore contain information that we might not want\n \t to leak, hence it must be cleared.  The value in R0 will never be a\n \t secret at this point, so it is safe to use it, see the clearing code\n-\t in 'cmse_nonsecure_entry_clear_before_return'.  */\n+\t in cmse_nonsecure_entry_clear_before_return ().  */\n       if (reg_containing_return_addr != LR_REGNUM)\n \tasm_fprintf (f, \"\\tmov\\tlr, r0\\n\");\n \n-      asm_fprintf (f, \"\\tmsr\\tAPSR_nzcvq, %r\\n\", reg_containing_return_addr);\n+      /* For Armv8.1-M, this is cleared as part of the CLRM instruction emitted\n+\t by cmse_nonsecure_entry_clear_before_return ().  */\n+      if (!TARGET_HAVE_FPCXT_CMSE)\n+\tasm_fprintf (f, \"\\tmsr\\tAPSR_nzcvq, %r\\n\", reg_containing_return_addr);\n       asm_fprintf (f, \"\\tbxns\\t%r\\n\", reg_containing_return_addr);\n     }\n   else\n@@ -26917,6 +27048,9 @@ arm_expand_epilogue (bool really_return)\n \n \t  insn = emit_insn (gen_pop_fpsysreg_insn (stack_pointer_rtx,\n \t\t\t\t\t\t   GEN_INT (FPCXTNS_ENUM)));\n+\t  rtx dwarf = gen_rtx_SET (stack_pointer_rtx,\n+\t\t\t\t  plus_constant (Pmode, stack_pointer_rtx, 4));\n+\t  add_reg_note (insn, REG_FRAME_RELATED_EXPR, dwarf);\n \t  RTX_FRAME_RELATED_P (insn) = 1;\n \t}\n       }"}, {"sha": "6f4f1a189862ef8db93568a16fcaef1216e6e6c9", "filename": "gcc/config/arm/predicates.md", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9722215a027b68651c3c7a8af9204d033197e9c0/gcc%2Fconfig%2Farm%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9722215a027b68651c3c7a8af9204d033197e9c0/gcc%2Fconfig%2Farm%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fpredicates.md?ref=9722215a027b68651c3c7a8af9204d033197e9c0", "patch": "@@ -545,6 +545,12 @@\n \t    (match_test \"satisfies_constraint_Dy (op)\")\n \t    (match_test \"satisfies_constraint_G (op)\"))))\n \n+(define_special_predicate \"clear_multiple_operation\"\n+  (match_code \"parallel\")\n+{\n+ return clear_operation_p (op);\n+})\n+\n (define_special_predicate \"load_multiple_operation\"\n   (match_code \"parallel\")\n {"}, {"sha": "6866b4e7f80b5e73839b6f8142b30cbeb11515a5", "filename": "gcc/config/arm/thumb2.md", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9722215a027b68651c3c7a8af9204d033197e9c0/gcc%2Fconfig%2Farm%2Fthumb2.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9722215a027b68651c3c7a8af9204d033197e9c0/gcc%2Fconfig%2Farm%2Fthumb2.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fthumb2.md?ref=9722215a027b68651c3c7a8af9204d033197e9c0", "patch": "@@ -1576,3 +1576,43 @@\n       FAIL;\n  }\")\n \n+(define_insn \"*clear_apsr\"\n+  [(unspec_volatile:SI [(const_int 0)] VUNSPEC_CLRM_APSR)\n+  (clobber (reg:CC CC_REGNUM))]\n+  \"TARGET_THUMB2 && TARGET_HAVE_FPCXT_CMSE && use_cmse\"\n+  \"clrm%?\\\\t{APSR}\"\n+  [(set_attr \"predicable\" \"yes\")]\n+)\n+\n+;; The operands are validated through the clear_multiple_operation\n+;; match_parallel predicate rather than through constraints so enable it only\n+;; after reload.\n+(define_insn \"*clear_multiple\"\n+  [(match_parallel 0 \"clear_multiple_operation\"\n+     [(set (match_operand:SI 1 \"register_operand\" \"\")\n+\t   (const_int 0))])]\n+  \"TARGET_THUMB2 && TARGET_HAVE_FPCXT_CMSE && use_cmse && reload_completed\"\n+  {\n+    char pattern[100];\n+    int i, num_saves = XVECLEN (operands[0], 0);\n+\n+    strcpy (pattern, \\\"clrm%?\\\\t{\\\");\n+    for (i = 0; i < num_saves; i++)\n+      {\n+\tif (GET_CODE (XVECEXP (operands[0], 0, i)) == UNSPEC_VOLATILE)\n+\t  {\n+\t    strcat (pattern, \\\"APSR\\\");\n+\t    ++i;\n+\t  }\n+\telse\n+\t  strcat (pattern,\n+\t\t  reg_names[REGNO (XEXP (XVECEXP (operands[0], 0, i), 0))]);\n+\tif (i < num_saves - 1)\n+\t  strcat (pattern, \\\", %|\\\");\n+      }\n+    strcat (pattern, \\\"}\\\");\n+    output_asm_insn (pattern, operands);\n+    return \\\"\\\";\n+  }\n+  [(set_attr \"predicable\" \"yes\")]\n+)"}, {"sha": "e039c506369b1ac10965826254daecdfb2c193d5", "filename": "gcc/config/arm/unspecs.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9722215a027b68651c3c7a8af9204d033197e9c0/gcc%2Fconfig%2Farm%2Funspecs.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9722215a027b68651c3c7a8af9204d033197e9c0/gcc%2Fconfig%2Farm%2Funspecs.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Funspecs.md?ref=9722215a027b68651c3c7a8af9204d033197e9c0", "patch": "@@ -240,6 +240,7 @@\n   VUNSPEC_SPECULATION_BARRIER ; Represents an unconditional speculation barrier.\n   VUNSPEC_APSR_WRITE     ; Represent writing the APSR.\n   VUNSPEC_VSTR_VLDR\t; Represent the vstr/vldr instruction.\n+  VUNSPEC_CLRM_APSR\t; Represent the clearing of APSR with clrm instruction.\n ])\n \n ;; Enumerators for NEON unspecs."}, {"sha": "195fc02e73c523b9dddd056117c10e9be9e19439", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9722215a027b68651c3c7a8af9204d033197e9c0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9722215a027b68651c3c7a8af9204d033197e9c0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9722215a027b68651c3c7a8af9204d033197e9c0", "patch": "@@ -1,6 +1,44 @@\n 2020-01-16  Mihail-Calin Ionescu <mihail.ionescu@arm.com>\n 2020-01-16  Thomas Preud'homme <thomas.preudhomme@arm.com>\n \n+\t* gcc.target/arm/cmse/bitfield-1.c: Add check for CLRM.\n+\t* gcc.target/arm/cmse/bitfield-2.c: Likewise.\n+\t* gcc.target/arm/cmse/bitfield-3.c: Likewise.\n+\t* gcc.target/arm/cmse/struct-1.c: Likewise.\n+\t* gcc.target/arm/cmse/cmse-14.c: Likewise.\n+\t* gcc.target/arm/cmse/cmse-1.c: Likewise.  Restrict checks for Armv8-M\n+\tGPR clearing when CLRM is not available.\n+\t* gcc.target/arm/cmse/mainline/8_1m/bitfield-4.c: Likewise.\n+\t* gcc.target/arm/cmse/mainline/8_1m/bitfield-5.c: Likewise.\n+\t* gcc.target/arm/cmse/mainline/8_1m/bitfield-6.c: Likewise.\n+\t* gcc.target/arm/cmse/mainline/8_1m/bitfield-7.c: Likewise.\n+\t* gcc.target/arm/cmse/mainline/8_1m/bitfield-8.c: Likewise.\n+\t* gcc.target/arm/cmse/mainline/8_1m/bitfield-9.c: Likewise.\n+\t* gcc.target/arm/cmse/mainline/8_1m/hard-sp/cmse-13.c: Likewise.\n+\t* gcc.target/arm/cmse/mainline/8_1m/hard-sp/cmse-5.c: Likewise.\n+\t* gcc.target/arm/cmse/mainline/8_1m/hard-sp/cmse-7.c: Likewise.\n+\t* gcc.target/arm/cmse/mainline/8_1m/hard-sp/cmse-8.c: Likewise.\n+\t* gcc.target/arm/cmse/mainline/8_1m/hard/cmse-13.c: Likewise.\n+\t* gcc.target/arm/cmse/mainline/8_1m/hard/cmse-5.c: likewise.\n+\t* gcc.target/arm/cmse/mainline/8_1m/hard/cmse-7.c: likewise.\n+\t* gcc.target/arm/cmse/mainline/8_1m/hard/cmse-8.c: likewise.\n+\t* gcc.target/arm/cmse/mainline/8_1m/soft/cmse-13.c: Likewise.\n+\t* gcc.target/arm/cmse/mainline/8_1m/soft/cmse-5.c: Likewise.\n+\t* gcc.target/arm/cmse/mainline/8_1m/soft/cmse-7.c: Likewise.\n+\t* gcc.target/arm/cmse/mainline/8_1m/soft/cmse-8.c: Likewise.\n+\t* gcc.target/arm/cmse/mainline/8_1m/softfp-sp/cmse-5.c: Likewise.\n+\t* gcc.target/arm/cmse/mainline/8_1m/softfp-sp/cmse-7.c: Likewise.\n+\t* gcc.target/arm/cmse/mainline/8_1m/softfp-sp/cmse-8.c: Likewise.\n+\t* gcc.target/arm/cmse/mainline/8_1m/softfp/cmse-13.c: Likewise.\n+\t* gcc.target/arm/cmse/mainline/8_1m/softfp/cmse-5.c: Likewise.\n+\t* gcc.target/arm/cmse/mainline/8_1m/softfp/cmse-7.c: Likewise.\n+\t* gcc.target/arm/cmse/mainline/8_1m/softfp/cmse-8.c: Likewise.\n+\t* gcc.target/arm/cmse/mainline/8_1m/union-1.c: Likewise.\n+\t* gcc.target/arm/cmse/mainline/8_1m/union-2.c: Likewise.\n+\n+2020-01-16  Mihail-Calin Ionescu  <mihail.ionescu@arm.com>\n+2020-01-16  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n+\n \t* gcc.target/arm/cmse/bitfield-1.c: add checks for VSTR and VLDR.\n \t* gcc.target/arm/cmse/bitfield-2.c: Likewise.\n \t* gcc.target/arm/cmse/bitfield-3.c: Likewise."}, {"sha": "7036cb9508c27d56c4b2c01a81c44bf6f1f9c781", "filename": "gcc/testsuite/gcc.target/arm/cmse/bitfield-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9722215a027b68651c3c7a8af9204d033197e9c0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fbitfield-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9722215a027b68651c3c7a8af9204d033197e9c0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fbitfield-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fbitfield-1.c?ref=9722215a027b68651c3c7a8af9204d033197e9c0", "patch": "@@ -36,6 +36,7 @@ main (void)\n /* { dg-final { scan-assembler \"movw\\tr1, #1855\" } } */\n /* { dg-final { scan-assembler \"movt\\tr1, 65535\" } } */\n /* { dg-final { scan-assembler \"ands\\tr0(, r0)?, r1\" } } */\n+/* { dg-final { scan-assembler \"clrm\\t\\{r1, r2, r3, ip, APSR\\}\" { target arm_cmse_clear_ok } } } */\n /* { dg-final { scan-assembler \"vldr\\tFPCXTNS, \\\\\\[sp\\\\\\], #4\" { target arm_cmse_clear_ok } } } */\n /* { dg-final { scan-assembler \"bxns\" } } */\n "}, {"sha": "50d4979470dd21738453e0d70c7a69ee0752ac41", "filename": "gcc/testsuite/gcc.target/arm/cmse/bitfield-2.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9722215a027b68651c3c7a8af9204d033197e9c0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fbitfield-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9722215a027b68651c3c7a8af9204d033197e9c0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fbitfield-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fbitfield-2.c?ref=9722215a027b68651c3c7a8af9204d033197e9c0", "patch": "@@ -33,6 +33,7 @@ main (void)\n /* { dg-final { scan-assembler \"movw\\tr1, #1919\" } } */\n /* { dg-final { scan-assembler \"movt\\tr1, 2047\" } } */\n /* { dg-final { scan-assembler \"ands\\tr0(, r0)?, r1\" } } */\n+/* { dg-final { scan-assembler \"clrm\\t\\{r1, r2, r3, ip, APSR\\}\" { target arm_cmse_clear_ok } } } */\n /* { dg-final { scan-assembler \"vldr\\tFPCXTNS, \\\\\\[sp\\\\\\], #4\" { target arm_cmse_clear_ok } } } */\n /* { dg-final { scan-assembler \"bxns\" } } */\n "}, {"sha": "2b7507c900ab18705083ba1d86359e1ae36a50a2", "filename": "gcc/testsuite/gcc.target/arm/cmse/bitfield-3.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9722215a027b68651c3c7a8af9204d033197e9c0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fbitfield-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9722215a027b68651c3c7a8af9204d033197e9c0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fbitfield-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fbitfield-3.c?ref=9722215a027b68651c3c7a8af9204d033197e9c0", "patch": "@@ -34,5 +34,6 @@ main (void)\n /* { dg-final { scan-assembler \"movw\\tr1, #65535\" } } */\n /* { dg-final { scan-assembler \"movt\\tr1, 63\" } } */\n /* { dg-final { scan-assembler \"ands\\tr0(, r0)?, r1\" } } */\n+/* { dg-final { scan-assembler \"clrm\\t\\{r1, r2, r3, ip, APSR\\}\" { target arm_cmse_clear_ok } } } */\n /* { dg-final { scan-assembler \"vldr\\tFPCXTNS, \\\\\\[sp\\\\\\], #4\" { target arm_cmse_clear_ok } } } */\n /* { dg-final { scan-assembler \"bxns\" } } */"}, {"sha": "35cab1f3233daac9fba50d25dac23364c798fb9c", "filename": "gcc/testsuite/gcc.target/arm/cmse/cmse-1.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9722215a027b68651c3c7a8af9204d033197e9c0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fcmse-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9722215a027b68651c3c7a8af9204d033197e9c0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fcmse-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fcmse-1.c?ref=9722215a027b68651c3c7a8af9204d033197e9c0", "patch": "@@ -105,8 +105,10 @@ qux (int_nsfunc_t * callback)\n /* { dg-final { scan-assembler \"bic\" } } */\n /* { dg-final { scan-assembler \"push\\t\\{r4, r5, r6\" } } */\n /* { dg-final { scan-assembler \"vstr\\tFPCXTNS, \\\\\\[sp, #-4\\\\\\]!\" { target arm_cmse_clear_ok } } } */\n+/* { dg-final { scan-assembler \"clrm\\t\\{r1, r2, r3, ip, APSR\\}\" { target arm_cmse_clear_ok } } } */\n /* { dg-final { scan-assembler \"vldr\\tFPCXTNS, \\\\\\[sp\\\\\\], #4\" { target arm_cmse_clear_ok } } } */\n-/* { dg-final { scan-assembler \"msr\\tAPSR_nzcvq\" } } */\n+/* { dg-final { scan-assembler \"msr\\tAPSR_nzcvq\" { target { ! arm_cmse_clear_ok } } } } */\n+/* { dg-final { scan-assembler \"clrm\\t\\{r0, r1, r2, r3, APSR\\}\" { target arm_cmse_clear_ok } } } */\n \n int call_callback (void)\n {"}, {"sha": "1f5af7c2dba7747f6058d12af8ef80b4dd1b1431", "filename": "gcc/testsuite/gcc.target/arm/cmse/cmse-14.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9722215a027b68651c3c7a8af9204d033197e9c0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fcmse-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9722215a027b68651c3c7a8af9204d033197e9c0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fcmse-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fcmse-14.c?ref=9722215a027b68651c3c7a8af9204d033197e9c0", "patch": "@@ -9,5 +9,6 @@ int foo (void)\n   return bar ();\n }\n \n+/* { dg-final { scan-assembler \"clrm\\t\\{r0, r1, r2, r3, APSR\\}\" { target arm_cmse_clear_ok } } } */\n /* { dg-final { scan-assembler \"bl\\t__gnu_cmse_nonsecure_call\" } } */\n /* { dg-final { scan-assembler-not \"^(.*\\\\s)?bl?\\[^\\\\s]*\\\\s+bar\" } } */"}, {"sha": "c52e1c14d9956743625e3b8a200e823f163924e3", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8_1m/bitfield-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9722215a027b68651c3c7a8af9204d033197e9c0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fbitfield-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9722215a027b68651c3c7a8af9204d033197e9c0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fbitfield-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fbitfield-4.c?ref=9722215a027b68651c3c7a8af9204d033197e9c0", "patch": "@@ -12,5 +12,5 @@\n /* { dg-final { scan-assembler \"and\\tr2, r2, ip\" } } */\n /* { dg-final { scan-assembler \"lsrs\\tr4, r4, #1\" } } */\n /* { dg-final { scan-assembler \"lsls\\tr4, r4, #1\" } } */\n-/* { dg-final { scan-assembler \"mov\\tr3, r4\" } } */\n+/* { dg-final { scan-assembler \"clrm\\t\\{r3, APSR\\}\" } } */\n /* { dg-final { scan-assembler \"bl\\t__gnu_cmse_nonsecure_call\" } } */"}, {"sha": "fdba955a32fc5ad492b74974185f98470bc49a7e", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8_1m/bitfield-5.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9722215a027b68651c3c7a8af9204d033197e9c0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fbitfield-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9722215a027b68651c3c7a8af9204d033197e9c0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fbitfield-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fbitfield-5.c?ref=9722215a027b68651c3c7a8af9204d033197e9c0", "patch": "@@ -10,6 +10,5 @@\n /* { dg-final { scan-assembler \"and\\tr1, r1, ip\" } } */\n /* { dg-final { scan-assembler \"lsrs\\tr4, r4, #1\" } } */\n /* { dg-final { scan-assembler \"lsls\\tr4, r4, #1\" } } */\n-/* { dg-final { scan-assembler \"mov\\tr2, r4\" } } */\n-/* { dg-final { scan-assembler \"mov\\tr3, r4\" } } */\n+/* { dg-final { scan-assembler \"clrm\\t\\{r2, r3, APSR\\}\" } } */\n /* { dg-final { scan-assembler \"bl\\t__gnu_cmse_nonsecure_call\" } } */"}, {"sha": "85068ceaac6a5c0c60af4a54c0af0d20326fc18d", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8_1m/bitfield-6.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9722215a027b68651c3c7a8af9204d033197e9c0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fbitfield-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9722215a027b68651c3c7a8af9204d033197e9c0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fbitfield-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fbitfield-6.c?ref=9722215a027b68651c3c7a8af9204d033197e9c0", "patch": "@@ -13,5 +13,5 @@\n /* { dg-final { scan-assembler \"and\\tr2, r2, ip\" } } */\n /* { dg-final { scan-assembler \"lsrs\\tr4, r4, #1\" } } */\n /* { dg-final { scan-assembler \"lsls\\tr4, r4, #1\" } } */\n-/* { dg-final { scan-assembler \"mov\\tr3, r4\" } } */\n+/* { dg-final { scan-assembler \"clrm\\t\\{r3, APSR\\}\" } } */\n /* { dg-final { scan-assembler \"bl\\t__gnu_cmse_nonsecure_call\" } } */"}, {"sha": "af69d38acf47d9d1d55480edba2b66f07e2d06ad", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8_1m/bitfield-7.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9722215a027b68651c3c7a8af9204d033197e9c0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fbitfield-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9722215a027b68651c3c7a8af9204d033197e9c0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fbitfield-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fbitfield-7.c?ref=9722215a027b68651c3c7a8af9204d033197e9c0", "patch": "@@ -10,6 +10,5 @@\n /* { dg-final { scan-assembler \"and\\tr1, r1, ip\" } } */\n /* { dg-final { scan-assembler \"lsrs\\tr4, r4, #1\" } } */\n /* { dg-final { scan-assembler \"lsls\\tr4, r4, #1\" } } */\n-/* { dg-final { scan-assembler \"mov\\tr2, r4\" } } */\n-/* { dg-final { scan-assembler \"mov\\tr3, r4\" } } */\n+/* { dg-final { scan-assembler \"clrm\\t\\{r2, r3, APSR\\}\" } } */\n /* { dg-final { scan-assembler \"bl\\t__gnu_cmse_nonsecure_call\" } } */"}, {"sha": "62201595549f07b046c7c5972d612ab155c4c38c", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8_1m/bitfield-8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9722215a027b68651c3c7a8af9204d033197e9c0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fbitfield-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9722215a027b68651c3c7a8af9204d033197e9c0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fbitfield-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fbitfield-8.c?ref=9722215a027b68651c3c7a8af9204d033197e9c0", "patch": "@@ -13,5 +13,5 @@\n /* { dg-final { scan-assembler \"and\\tr2, r2, ip\" } } */\n /* { dg-final { scan-assembler \"lsrs\\tr4, r4, #1\" } } */\n /* { dg-final { scan-assembler \"lsls\\tr4, r4, #1\" } } */\n-/* { dg-final { scan-assembler \"mov\\tr3, r4\" } } */\n+/* { dg-final { scan-assembler \"clrm\\t\\{r3, APSR\\}\" } } */\n /* { dg-final { scan-assembler \"bl\\t__gnu_cmse_nonsecure_call\" } } */"}, {"sha": "287f0d6faad113fbc8c30051280668baa58ab130", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8_1m/bitfield-9.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9722215a027b68651c3c7a8af9204d033197e9c0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fbitfield-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9722215a027b68651c3c7a8af9204d033197e9c0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fbitfield-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fbitfield-9.c?ref=9722215a027b68651c3c7a8af9204d033197e9c0", "patch": "@@ -7,7 +7,5 @@\n /* { dg-final { scan-assembler \"and\\tr0, r0, ip\" } } */\n /* { dg-final { scan-assembler \"lsrs\\tr4, r4, #1\" } } */\n /* { dg-final { scan-assembler \"lsls\\tr4, r4, #1\" } } */\n-/* { dg-final { scan-assembler \"mov\\tr1, r4\" } } */\n-/* { dg-final { scan-assembler \"mov\\tr2, r4\" } } */\n-/* { dg-final { scan-assembler \"mov\\tr3, r4\" } } */\n+/* { dg-final { scan-assembler \"clrm\\t\\{r1, r2, r3, APSR\\}\" } } */\n /* { dg-final { scan-assembler \"bl\\t__gnu_cmse_nonsecure_call\" } } */"}, {"sha": "7b2df1faff5ea6ce6e7a58a37cd23eaf9616ee97", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8_1m/hard-sp/cmse-13.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9722215a027b68651c3c7a8af9204d033197e9c0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fhard-sp%2Fcmse-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9722215a027b68651c3c7a8af9204d033197e9c0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fhard-sp%2Fcmse-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fhard-sp%2Fcmse-13.c?ref=9722215a027b68651c3c7a8af9204d033197e9c0", "patch": "@@ -8,10 +8,7 @@\n /* Checks for saving and clearing prior to function call.  */\n /* { dg-final { scan-assembler \"lsrs\\tr4, r4, #1\" } } */\n /* { dg-final { scan-assembler \"lsls\\tr4, r4, #1\" } } */\n-/* { dg-final { scan-assembler \"mov\\tr0, r4\" } } */\n-/* { dg-final { scan-assembler \"mov\\tr1, r4\" } } */\n-/* { dg-final { scan-assembler \"mov\\tr2, r4\" } } */\n-/* { dg-final { scan-assembler \"mov\\tr3, r4\" } } */\n+/* { dg-final { scan-assembler \"clrm\\t\\{r0, r1, r2, r3, APSR\\}\" } } */\n /* { dg-final { scan-assembler-not \"vmov\\.f32\\ts0, #1\\.0\" } } */\n /* { dg-final { scan-assembler \"vmov\\.f32\\ts1, #1\\.0\" } } */\n /* { dg-final { scan-assembler-not \"vmov\\.f32\\ts2, #1\\.0\" } } */"}, {"sha": "638643d0a6772d43f440df3942c6c723f1eff3ef", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8_1m/hard-sp/cmse-5.c", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9722215a027b68651c3c7a8af9204d033197e9c0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fhard-sp%2Fcmse-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9722215a027b68651c3c7a8af9204d033197e9c0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fhard-sp%2Fcmse-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fhard-sp%2Fcmse-5.c?ref=9722215a027b68651c3c7a8af9204d033197e9c0", "patch": "@@ -6,10 +6,6 @@\n #include \"../../../cmse-5.x\"\n \n /* { dg-final { scan-assembler \"vstr\\tFPCXTNS, \\\\\\[sp, #-4\\\\\\]!\" } } */\n-/* { dg-final { scan-assembler \"mov\\tr0, lr\" } } */\n-/* { dg-final { scan-assembler \"mov\\tr1, lr\" } } */\n-/* { dg-final { scan-assembler \"mov\\tr2, lr\" } } */\n-/* { dg-final { scan-assembler \"mov\\tr3, lr\" } } */\n /* { dg-final { scan-assembler-not \"vmov\\.f32\\ts0, #1\\.0\" } } */\n /* { dg-final { scan-assembler \"vmov\\.f32\\ts1, #1\\.0\" } } */\n /* { dg-final { scan-assembler \"vmov\\.f32\\ts2, #1\\.0\" } } */\n@@ -26,7 +22,6 @@\n /* { dg-final { scan-assembler \"vmov\\.f32\\ts13, #1\\.0\" } } */\n /* { dg-final { scan-assembler \"vmov\\.f32\\ts14, #1\\.0\" } } */\n /* { dg-final { scan-assembler \"vmov\\.f32\\ts15, #1\\.0\" } } */\n-/* { dg-final { scan-assembler \"msr\\tAPSR_nzcvq, lr\" { target { ! arm_dsp } } } } */\n-/* { dg-final { scan-assembler \"msr\\tAPSR_nzcvqg, lr\" { target arm_dsp } } } */\n+/* { dg-final { scan-assembler \"clrm\\t\\{r0, r1, r2, r3, ip, APSR\\}\" } } */\n /* { dg-final { scan-assembler \"vldr\\tFPCXTNS, \\\\\\[sp\\\\\\], #4\" } } */\n /* { dg-final { scan-assembler \"bxns\" } } */"}, {"sha": "9ec14d1a707839e4858bac72bc292fd0984bf86c", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8_1m/hard-sp/cmse-7.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9722215a027b68651c3c7a8af9204d033197e9c0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fhard-sp%2Fcmse-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9722215a027b68651c3c7a8af9204d033197e9c0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fhard-sp%2Fcmse-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fhard-sp%2Fcmse-7.c?ref=9722215a027b68651c3c7a8af9204d033197e9c0", "patch": "@@ -8,10 +8,7 @@\n /* Checks for saving and clearing prior to function call.  */\n /* { dg-final { scan-assembler \"lsrs\\tr4, r4, #1\" } } */\n /* { dg-final { scan-assembler \"lsls\\tr4, r4, #1\" } } */\n-/* { dg-final { scan-assembler \"mov\\tr0, r4\" } } */\n-/* { dg-final { scan-assembler \"mov\\tr1, r4\" } } */\n-/* { dg-final { scan-assembler \"mov\\tr2, r4\" } } */\n-/* { dg-final { scan-assembler \"mov\\tr3, r4\" } } */\n+/* { dg-final { scan-assembler \"clrm\\t\\{r0, r1, r2, r3, APSR\\}\" } } */\n /* { dg-final { scan-assembler \"vmov\\.f32\\ts0, #1\\.0\" } } */\n /* { dg-final { scan-assembler \"vmov\\.f32\\ts1, #1\\.0\" } } */\n /* { dg-final { scan-assembler \"vmov\\.f32\\ts2, #1\\.0\" } } */"}, {"sha": "d375879ed02483c05d7853c95f9b9e15383ff321", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8_1m/hard-sp/cmse-8.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9722215a027b68651c3c7a8af9204d033197e9c0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fhard-sp%2Fcmse-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9722215a027b68651c3c7a8af9204d033197e9c0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fhard-sp%2Fcmse-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fhard-sp%2Fcmse-8.c?ref=9722215a027b68651c3c7a8af9204d033197e9c0", "patch": "@@ -8,10 +8,7 @@\n /* Checks for saving and clearing prior to function call.  */\n /* { dg-final { scan-assembler \"lsrs\\tr4, r4, #1\" } } */\n /* { dg-final { scan-assembler \"lsls\\tr4, r4, #1\" } } */\n-/* { dg-final { scan-assembler \"mov\\tr0, r4\" } } */\n-/* { dg-final { scan-assembler \"mov\\tr1, r4\" } } */\n-/* { dg-final { scan-assembler \"mov\\tr2, r4\" } } */\n-/* { dg-final { scan-assembler \"mov\\tr3, r4\" } } */\n+/* { dg-final { scan-assembler \"clrm\\t\\{r0, r1, r2, r3, APSR\\}\" } } */\n /* { dg-final { scan-assembler-not \"vmov\\.f32\\ts0, #1\\.0\" } } */\n /* { dg-final { scan-assembler-not \"vmov\\.f32\\ts1, #1\\.0\" } } */\n /* { dg-final { scan-assembler \"vmov\\.f32\\ts2, #1\\.0\" } } */"}, {"sha": "e5cb0fabd4ce20ef8e57f25778b81a3ed3908af0", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8_1m/hard/cmse-13.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9722215a027b68651c3c7a8af9204d033197e9c0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fhard%2Fcmse-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9722215a027b68651c3c7a8af9204d033197e9c0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fhard%2Fcmse-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fhard%2Fcmse-13.c?ref=9722215a027b68651c3c7a8af9204d033197e9c0", "patch": "@@ -8,10 +8,7 @@\n /* Checks for saving and clearing prior to function call.  */\n /* { dg-final { scan-assembler \"lsrs\\tr4, r4, #1\" } } */\n /* { dg-final { scan-assembler \"lsls\\tr4, r4, #1\" } } */\n-/* { dg-final { scan-assembler \"mov\\tr0, r4\" } } */\n-/* { dg-final { scan-assembler \"mov\\tr1, r4\" } } */\n-/* { dg-final { scan-assembler \"mov\\tr2, r4\" } } */\n-/* { dg-final { scan-assembler \"mov\\tr3, r4\" } } */\n+/* { dg-final { scan-assembler \"clrm\\t\\{r0, r1, r2, r3, APSR\\}\" } } */\n /* { dg-final { scan-assembler \"vmov\\.f32\\ts1, #1\\.0\" } } */\n /* { dg-final { scan-assembler-not \"vmov\\.f32\\ts0, #1\\.0\" } } */\n /* { dg-final { scan-assembler-not \"vmov\\.f64\\td0, #1\\.0\" } } */"}, {"sha": "7e3b7609dfa5c8c1df77e413fa1bb85aa80ea9f6", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8_1m/hard/cmse-5.c", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9722215a027b68651c3c7a8af9204d033197e9c0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fhard%2Fcmse-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9722215a027b68651c3c7a8af9204d033197e9c0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fhard%2Fcmse-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fhard%2Fcmse-5.c?ref=9722215a027b68651c3c7a8af9204d033197e9c0", "patch": "@@ -6,10 +6,6 @@\n #include \"../../../cmse-5.x\"\n \n /* { dg-final { scan-assembler \"vstr\\tFPCXTNS, \\\\\\[sp, #-4\\\\\\]!\" } } */\n-/* { dg-final { scan-assembler \"mov\\tr0, lr\" } } */\n-/* { dg-final { scan-assembler \"mov\\tr1, lr\" } } */\n-/* { dg-final { scan-assembler \"mov\\tr2, lr\" } } */\n-/* { dg-final { scan-assembler \"mov\\tr3, lr\" } } */\n /* { dg-final { scan-assembler-not \"vmov\\.f32\\ts0, #1\\.0\" } } */\n /* { dg-final { scan-assembler \"vmov\\.f32\\ts1, #1\\.0\" } } */\n /* { dg-final { scan-assembler \"vmov\\.f64\\td1, #1\\.0\" } } */\n@@ -19,7 +15,6 @@\n /* { dg-final { scan-assembler \"vmov\\.f64\\td5, #1\\.0\" } } */\n /* { dg-final { scan-assembler \"vmov\\.f64\\td6, #1\\.0\" } } */\n /* { dg-final { scan-assembler \"vmov\\.f64\\td7, #1\\.0\" } } */\n-/* { dg-final { scan-assembler \"msr\\tAPSR_nzcvq, lr\" { target { ! arm_dsp } } } } */\n-/* { dg-final { scan-assembler \"msr\\tAPSR_nzcvqg, lr\" { target arm_dsp } } } */\n+/* { dg-final { scan-assembler \"clrm\\t\\{r0, r1, r2, r3, ip, APSR\\}\" } } */\n /* { dg-final { scan-assembler \"vldr\\tFPCXTNS, \\\\\\[sp\\\\\\], #4\" } } */\n /* { dg-final { scan-assembler \"bxns\" } } */"}, {"sha": "d998b43a148250a15eb4aae9fb0ef6e4bf51203b", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8_1m/hard/cmse-7.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9722215a027b68651c3c7a8af9204d033197e9c0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fhard%2Fcmse-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9722215a027b68651c3c7a8af9204d033197e9c0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fhard%2Fcmse-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fhard%2Fcmse-7.c?ref=9722215a027b68651c3c7a8af9204d033197e9c0", "patch": "@@ -8,10 +8,7 @@\n /* Checks for saving and clearing prior to function call.  */\n /* { dg-final { scan-assembler \"lsrs\\tr4, r4, #1\" } } */\n /* { dg-final { scan-assembler \"lsls\\tr4, r4, #1\" } } */\n-/* { dg-final { scan-assembler \"mov\\tr0, r4\" } } */\n-/* { dg-final { scan-assembler \"mov\\tr1, r4\" } } */\n-/* { dg-final { scan-assembler \"mov\\tr2, r4\" } } */\n-/* { dg-final { scan-assembler \"mov\\tr3, r4\" } } */\n+/* { dg-final { scan-assembler \"clrm\\t\\{r0, r1, r2, r3, APSR\\}\" } } */\n /* { dg-final { scan-assembler \"vmov\\.f64\\td0, #1\\.0\" } } */\n /* { dg-final { scan-assembler \"vmov\\.f64\\td1, #1\\.0\" } } */\n /* { dg-final { scan-assembler \"vmov\\.f64\\td2, #1\\.0\" } } */"}, {"sha": "e416bef2cb9fabd9cb33e3c1c87057ebdd3d6daf", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8_1m/hard/cmse-8.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9722215a027b68651c3c7a8af9204d033197e9c0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fhard%2Fcmse-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9722215a027b68651c3c7a8af9204d033197e9c0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fhard%2Fcmse-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fhard%2Fcmse-8.c?ref=9722215a027b68651c3c7a8af9204d033197e9c0", "patch": "@@ -8,10 +8,7 @@\n /* Checks for saving and clearing prior to function call.  */\n /* { dg-final { scan-assembler \"lsrs\\tr4, r4, #1\" } } */\n /* { dg-final { scan-assembler \"lsls\\tr4, r4, #1\" } } */\n-/* { dg-final { scan-assembler \"mov\\tr0, r4\" } } */\n-/* { dg-final { scan-assembler \"mov\\tr1, r4\" } } */\n-/* { dg-final { scan-assembler \"mov\\tr2, r4\" } } */\n-/* { dg-final { scan-assembler \"mov\\tr3, r4\" } } */\n+/* { dg-final { scan-assembler \"clrm\\t\\{r0, r1, r2, r3, APSR\\}\" } } */\n /* { dg-final { scan-assembler-not \"vmov\\.f64\\td0, #1\\.0\" } } */\n /* { dg-final { scan-assembler \"vmov\\.f64\\td1, #1\\.0\" } } */\n /* { dg-final { scan-assembler \"vmov\\.f64\\td2, #1\\.0\" } } */"}, {"sha": "d43a9f85a199ecdf7e018852b3af9b4cf36af81f", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8_1m/soft/cmse-13.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9722215a027b68651c3c7a8af9204d033197e9c0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fsoft%2Fcmse-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9722215a027b68651c3c7a8af9204d033197e9c0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fsoft%2Fcmse-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fsoft%2Fcmse-13.c?ref=9722215a027b68651c3c7a8af9204d033197e9c0", "patch": "@@ -8,9 +8,9 @@\n /* { dg-final { scan-assembler \"lsrs\\tr4, r4, #1\" } } */\n /* { dg-final { scan-assembler \"lsls\\tr4, r4, #1\" } } */\n /* { dg-final { scan-assembler-not \"mov\\tr0, r4\" } } */\n-/* { dg-final { scan-assembler \"mov\\tr1, r4\" } } */\n /* { dg-final { scan-assembler-not \"mov\\tr2, r4\" } } */\n /* { dg-final { scan-assembler-not \"mov\\tr3, r4\" } } */\n+/* { dg-final { scan-assembler \"clrm\\t\\{r1, APSR\\}\" } } */\n /* { dg-final { scan-assembler-not \"vmov\" } } */\n /* { dg-final { scan-assembler-not \"vmsr\" } } */\n "}, {"sha": "157bccb9ff3256056d496a0d0770374315b04d87", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8_1m/soft/cmse-5.c", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9722215a027b68651c3c7a8af9204d033197e9c0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fsoft%2Fcmse-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9722215a027b68651c3c7a8af9204d033197e9c0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fsoft%2Fcmse-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fsoft%2Fcmse-5.c?ref=9722215a027b68651c3c7a8af9204d033197e9c0", "patch": "@@ -5,13 +5,8 @@\n #include \"../../../cmse-5.x\"\n \n /* { dg-final { scan-assembler \"vstr\\tFPCXTNS, \\\\\\[sp, #-4\\\\\\]!\" } } */\n-/* { dg-final { scan-assembler \"mov\\tr1, lr\" } } */\n-/* { dg-final { scan-assembler \"mov\\tr2, lr\" } } */\n-/* { dg-final { scan-assembler \"mov\\tr3, lr\" } } */\n-/* { dg-final { scan-assembler \"mov\\tip, lr\" } } */\n /* { dg-final { scan-assembler-not \"vmov\" } } */\n /* { dg-final { scan-assembler-not \"vmsr\" } } */\n-/* { dg-final { scan-assembler \"msr\\tAPSR_nzcvq, lr\" { target { ! arm_dsp } } } } */\n-/* { dg-final { scan-assembler \"msr\\tAPSR_nzcvqg, lr\" { target arm_dsp } } } */\n+/* { dg-final { scan-assembler \"clrm\\t\\{r1, r2, r3, ip, APSR\\}\" } } */\n /* { dg-final { scan-assembler \"vldr\\tFPCXTNS, \\\\\\[sp\\\\\\], #4\" } } */\n /* { dg-final { scan-assembler \"bxns\" } } */"}, {"sha": "02e48157a2c61b0a8bee77e949944acc2a4bee37", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8_1m/soft/cmse-7.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9722215a027b68651c3c7a8af9204d033197e9c0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fsoft%2Fcmse-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9722215a027b68651c3c7a8af9204d033197e9c0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fsoft%2Fcmse-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fsoft%2Fcmse-7.c?ref=9722215a027b68651c3c7a8af9204d033197e9c0", "patch": "@@ -7,10 +7,7 @@\n /* Checks for saving and clearing prior to function call.  */\n /* { dg-final { scan-assembler \"lsrs\\tr4, r4, #1\" } } */\n /* { dg-final { scan-assembler \"lsls\\tr4, r4, #1\" } } */\n-/* { dg-final { scan-assembler \"mov\\tr0, r4\" } } */\n-/* { dg-final { scan-assembler \"mov\\tr1, r4\" } } */\n-/* { dg-final { scan-assembler \"mov\\tr2, r4\" } } */\n-/* { dg-final { scan-assembler \"mov\\tr3, r4\" } } */\n+/* { dg-final { scan-assembler \"clrm\\t\\{r0, r1, r2, r3, APSR\\}\" } } */\n /* { dg-final { scan-assembler-not \"vmov\" } } */\n /* { dg-final { scan-assembler-not \"vmsr\" } } */\n "}, {"sha": "c7a22a2ba464dce26b289635dd8dcc8213ae33d8", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8_1m/soft/cmse-8.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9722215a027b68651c3c7a8af9204d033197e9c0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fsoft%2Fcmse-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9722215a027b68651c3c7a8af9204d033197e9c0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fsoft%2Fcmse-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fsoft%2Fcmse-8.c?ref=9722215a027b68651c3c7a8af9204d033197e9c0", "patch": "@@ -9,8 +9,7 @@\n /* { dg-final { scan-assembler \"lsls\\tr4, r4, #1\" } } */\n /* { dg-final { scan-assembler-not \"mov\\tr0, r4\" } } */\n /* { dg-final { scan-assembler-not \"mov\\tr1, r4\" } } */\n-/* { dg-final { scan-assembler \"mov\\tr2, r4\" } } */\n-/* { dg-final { scan-assembler \"mov\\tr3, r4\" } } */\n+/* { dg-final { scan-assembler \"clrm\\t\\{r2, r3, APSR\\}\" } } */\n /* { dg-final { scan-assembler-not \"vmov\" } } */\n /* { dg-final { scan-assembler-not \"vmsr\" } } */\n "}, {"sha": "2522a17a6316d76a21d8d241d4c44cdddf1981e0", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8_1m/softfp-sp/cmse-5.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9722215a027b68651c3c7a8af9204d033197e9c0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fsoftfp-sp%2Fcmse-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9722215a027b68651c3c7a8af9204d033197e9c0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fsoftfp-sp%2Fcmse-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fsoftfp-sp%2Fcmse-5.c?ref=9722215a027b68651c3c7a8af9204d033197e9c0", "patch": "@@ -8,9 +8,6 @@\n /* { dg-final { scan-assembler \"__acle_se_foo:\" } } */\n /* { dg-final { scan-assembler \"vstr\\tFPCXTNS, \\\\\\[sp, #-4\\\\\\]!\" } } */\n /* { dg-final { scan-assembler-not \"mov\\tr0, lr\" } } */\n-/* { dg-final { scan-assembler \"mov\\tr1, lr\" } } */\n-/* { dg-final { scan-assembler \"mov\\tr2, lr\" } } */\n-/* { dg-final { scan-assembler \"mov\\tr3, lr\" } } */\n /* { dg-final { scan-assembler \"vmov\\.f32\\ts0, #1\\.0\" } } */\n /* { dg-final { scan-assembler \"vmov\\.f32\\ts1, #1\\.0\" } } */\n /* { dg-final { scan-assembler \"vmov\\.f32\\ts2, #1\\.0\" } } */\n@@ -27,7 +24,6 @@\n /* { dg-final { scan-assembler \"vmov\\.f32\\ts13, #1\\.0\" } } */\n /* { dg-final { scan-assembler \"vmov\\.f32\\ts14, #1\\.0\" } } */\n /* { dg-final { scan-assembler \"vmov\\.f32\\ts15, #1\\.0\" } } */\n-/* { dg-final { scan-assembler \"msr\\tAPSR_nzcvq, lr\" { target { ! arm_dsp } } } } */\n-/* { dg-final { scan-assembler \"msr\\tAPSR_nzcvqg, lr\" { target arm_dsp } } } */\n+/* { dg-final { scan-assembler \"clrm\\t\\{r1, r2, r3, ip, APSR\\}\" } } */\n /* { dg-final { scan-assembler \"vldr\\tFPCXTNS, \\\\\\[sp\\\\\\], #4\" } } */\n /* { dg-final { scan-assembler \"bxns\" } } */"}, {"sha": "d34ca383236fdd31723966e6218ea918cf8c9122", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8_1m/softfp-sp/cmse-7.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9722215a027b68651c3c7a8af9204d033197e9c0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fsoftfp-sp%2Fcmse-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9722215a027b68651c3c7a8af9204d033197e9c0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fsoftfp-sp%2Fcmse-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fsoftfp-sp%2Fcmse-7.c?ref=9722215a027b68651c3c7a8af9204d033197e9c0", "patch": "@@ -8,10 +8,7 @@\n /* Checks for saving and clearing prior to function call.  */\n /* { dg-final { scan-assembler \"lsrs\\tr4, r4, #1\" } } */\n /* { dg-final { scan-assembler \"lsls\\tr4, r4, #1\" } } */\n-/* { dg-final { scan-assembler \"mov\\tr0, r4\" } } */\n-/* { dg-final { scan-assembler \"mov\\tr1, r4\" } } */\n-/* { dg-final { scan-assembler \"mov\\tr2, r4\" } } */\n-/* { dg-final { scan-assembler \"mov\\tr3, r4\" } } */\n+/* { dg-final { scan-assembler \"clrm\\t\\{r0, r1, r2, r3, APSR\\}\" } } */\n \n /* Now we check that we use the correct intrinsic to call.  */\n /* { dg-final { scan-assembler \"bl\\t__gnu_cmse_nonsecure_call\" } } */"}, {"sha": "ff8e9816cff1569bbfc1c5213c1f8ed2e49ba250", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8_1m/softfp-sp/cmse-8.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9722215a027b68651c3c7a8af9204d033197e9c0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fsoftfp-sp%2Fcmse-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9722215a027b68651c3c7a8af9204d033197e9c0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fsoftfp-sp%2Fcmse-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fsoftfp-sp%2Fcmse-8.c?ref=9722215a027b68651c3c7a8af9204d033197e9c0", "patch": "@@ -10,8 +10,7 @@\n /* { dg-final { scan-assembler \"lsls\\tr4, r4, #1\" } } */\n /* { dg-final { scan-assembler-not \"mov\\tr0, r4\" } } */\n /* { dg-final { scan-assembler-not \"mov\\tr1, r4\" } } */\n-/* { dg-final { scan-assembler \"mov\\tr2, r4\" } } */\n-/* { dg-final { scan-assembler \"mov\\tr3, r4\" } } */\n+/* { dg-final { scan-assembler \"clrm\\t\\{r2, r3, APSR\\}\" } } */\n \n /* Now we check that we use the correct intrinsic to call.  */\n /* { dg-final { scan-assembler \"bl\\t__gnu_cmse_nonsecure_call\" } } */"}, {"sha": "ff9a7dfa5e696e3a6c4132343d0ee94c3068c208", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8_1m/softfp/cmse-13.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9722215a027b68651c3c7a8af9204d033197e9c0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fsoftfp%2Fcmse-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9722215a027b68651c3c7a8af9204d033197e9c0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fsoftfp%2Fcmse-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fsoftfp%2Fcmse-13.c?ref=9722215a027b68651c3c7a8af9204d033197e9c0", "patch": "@@ -9,8 +9,9 @@\n /* { dg-final { scan-assembler \"lsrs\\tr4, r4, #1\" } } */\n /* { dg-final { scan-assembler \"lsls\\tr4, r4, #1\" } } */\n /* { dg-final { scan-assembler-not \"mov\\tr0, r4\" } } */\n-/* { dg-final { scan-assembler \"\\n\\tmov\\tr1, r4\" } } */\n-/* { dg-final { scan-assembler-not \"\\n\\tmov\\tr2, r4\\n\\tmov\\tr3, r4\" } } */\n+/* { dg-final { scan-assembler-not \"mov\\tr2, r4\" } } */\n+/* { dg-final { scan-assembler-not \"mov\\tr3, r4\" } } */\n+/* { dg-final { scan-assembler \"clrm\\t\\{r1, APSR\\}\" } } */\n \n /* Now we check that we use the correct intrinsic to call.  */\n /* { dg-final { scan-assembler \"bl\\t__gnu_cmse_nonsecure_call\" } } */"}, {"sha": "eb7561f2a2629f3c153afe3a1a5c58d8abb9d07b", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8_1m/softfp/cmse-5.c", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9722215a027b68651c3c7a8af9204d033197e9c0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fsoftfp%2Fcmse-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9722215a027b68651c3c7a8af9204d033197e9c0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fsoftfp%2Fcmse-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fsoftfp%2Fcmse-5.c?ref=9722215a027b68651c3c7a8af9204d033197e9c0", "patch": "@@ -7,10 +7,6 @@\n \n /* { dg-final { scan-assembler \"__acle_se_foo:\" } } */\n /* { dg-final { scan-assembler \"vstr\\tFPCXTNS, \\\\\\[sp, #-4\\\\\\]!\" } } */\n-/* { dg-final { scan-assembler-not \"mov\\tr0, lr\" } } */\n-/* { dg-final { scan-assembler \"mov\\tr1, lr\" } } */\n-/* { dg-final { scan-assembler \"mov\\tr2, lr\" } } */\n-/* { dg-final { scan-assembler \"mov\\tr3, lr\" } } */\n /* { dg-final { scan-assembler \"vmov\\.f64\\td0, #1\\.0\" } } */\n /* { dg-final { scan-assembler \"vmov\\.f64\\td1, #1\\.0\" } } */\n /* { dg-final { scan-assembler \"vmov\\.f64\\td2, #1\\.0\" } } */\n@@ -19,7 +15,6 @@\n /* { dg-final { scan-assembler \"vmov\\.f64\\td5, #1\\.0\" } } */\n /* { dg-final { scan-assembler \"vmov\\.f64\\td6, #1\\.0\" } } */\n /* { dg-final { scan-assembler \"vmov\\.f64\\td7, #1\\.0\" } } */\n-/* { dg-final { scan-assembler \"msr\\tAPSR_nzcvq, lr\" { target { ! arm_dsp } } } } */\n-/* { dg-final { scan-assembler \"msr\\tAPSR_nzcvqg, lr\" { target arm_dsp } } } */\n+/* { dg-final { scan-assembler \"clrm\\t\\{r1, r2, r3, ip, APSR\\}\" } } */\n /* { dg-final { scan-assembler \"vldr\\tFPCXTNS, \\\\\\[sp\\\\\\], #4\" } } */\n /* { dg-final { scan-assembler \"bxns\" } } */"}, {"sha": "03d36aa650986b6069e2fe1c1f3f98fa9664d88a", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8_1m/softfp/cmse-7.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9722215a027b68651c3c7a8af9204d033197e9c0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fsoftfp%2Fcmse-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9722215a027b68651c3c7a8af9204d033197e9c0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fsoftfp%2Fcmse-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fsoftfp%2Fcmse-7.c?ref=9722215a027b68651c3c7a8af9204d033197e9c0", "patch": "@@ -8,10 +8,7 @@\n /* Checks for saving and clearing prior to function call.  */\n /* { dg-final { scan-assembler \"lsrs\\tr4, r4, #1\" } } */\n /* { dg-final { scan-assembler \"lsls\\tr4, r4, #1\" } } */\n-/* { dg-final { scan-assembler \"mov\\tr0, r4\" } } */\n-/* { dg-final { scan-assembler \"mov\\tr1, r4\" } } */\n-/* { dg-final { scan-assembler \"mov\\tr2, r4\" } } */\n-/* { dg-final { scan-assembler \"mov\\tr3, r4\" } } */\n+/* { dg-final { scan-assembler \"clrm\\t\\{r0, r1, r2, r3, APSR\\}\" } } */\n \n /* Now we check that we use the correct intrinsic to call.  */\n /* { dg-final { scan-assembler \"bl\\t__gnu_cmse_nonsecure_call\" } } */"}, {"sha": "ce45e10688f855ca7b2a63777d2b3d3418815589", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8_1m/softfp/cmse-8.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9722215a027b68651c3c7a8af9204d033197e9c0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fsoftfp%2Fcmse-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9722215a027b68651c3c7a8af9204d033197e9c0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fsoftfp%2Fcmse-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fsoftfp%2Fcmse-8.c?ref=9722215a027b68651c3c7a8af9204d033197e9c0", "patch": "@@ -10,8 +10,7 @@\n /* { dg-final { scan-assembler \"lsls\\tr4, r4, #1\" } } */\n /* { dg-final { scan-assembler-not \"mov\\tr0, r4\" } } */\n /* { dg-final { scan-assembler-not \"mov\\tr1, r4\" } } */\n-/* { dg-final { scan-assembler \"mov\\tr2, r4\" } } */\n-/* { dg-final { scan-assembler \"mov\\tr3, r4\" } } */\n+/* { dg-final { scan-assembler \"clrm\\t\\{r2, r3, APSR\\}\" } } */\n \n /* Now we check that we use the correct intrinsic to call.  */\n /* { dg-final { scan-assembler \"bl\\t__gnu_cmse_nonsecure_call\" } } */"}, {"sha": "dbd1d34413ef36f2b03716c0d9cf46b024af0835", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8_1m/union-1.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9722215a027b68651c3c7a8af9204d033197e9c0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Funion-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9722215a027b68651c3c7a8af9204d033197e9c0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Funion-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Funion-1.c?ref=9722215a027b68651c3c7a8af9204d033197e9c0", "patch": "@@ -10,6 +10,5 @@\n /* { dg-final { scan-assembler \"and\\tr1, r1, ip\" } } */\n /* { dg-final { scan-assembler \"lsrs\\tr4, r4, #1\" } } */\n /* { dg-final { scan-assembler \"lsls\\tr4, r4, #1\" } } */\n-/* { dg-final { scan-assembler \"mov\\tr2, r4\" } } */\n-/* { dg-final { scan-assembler \"mov\\tr3, r4\" } } */\n+/* { dg-final { scan-assembler \"clrm\\t\\{r2, r3, APSR\\}\" } } */\n /* { dg-final { scan-assembler \"bl\\t__gnu_cmse_nonsecure_call\" } } */"}, {"sha": "3edc7f1e259779a24e722d67ed544c0a673090c7", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8_1m/union-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9722215a027b68651c3c7a8af9204d033197e9c0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Funion-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9722215a027b68651c3c7a8af9204d033197e9c0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Funion-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Funion-2.c?ref=9722215a027b68651c3c7a8af9204d033197e9c0", "patch": "@@ -14,5 +14,5 @@\n /* { dg-final { scan-assembler \"and\\tr2, r2, ip\" } } */\n /* { dg-final { scan-assembler \"lsrs\\tr4, r4, #1\" } } */\n /* { dg-final { scan-assembler \"lsls\\tr4, r4, #1\" } } */\n-/* { dg-final { scan-assembler \"mov\\tr3, r4\" } } */\n+/* { dg-final { scan-assembler \"clrm\\t\\{r3, APSR\\}\" } } */\n /* { dg-final { scan-assembler \"bl\\t__gnu_cmse_nonsecure_call\" } } */"}, {"sha": "3a72406df2492206c2cb8ac7b63e4242ec0ba598", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8m/softfp/cmse-13.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9722215a027b68651c3c7a8af9204d033197e9c0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8m%2Fsoftfp%2Fcmse-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9722215a027b68651c3c7a8af9204d033197e9c0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8m%2Fsoftfp%2Fcmse-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8m%2Fsoftfp%2Fcmse-13.c?ref=9722215a027b68651c3c7a8af9204d033197e9c0", "patch": "@@ -9,8 +9,9 @@\n /* { dg-final { scan-assembler \"lsrs\\tr4, r4, #1\" } } */\n /* { dg-final { scan-assembler \"lsls\\tr4, r4, #1\" } } */\n /* { dg-final { scan-assembler-not \"mov\\tr0, r4\" } } */\n-/* { dg-final { scan-assembler \"\\n\\tmov\\tr1, r4\" } } */\n-/* { dg-final { scan-assembler-not \"\\n\\tmov\\tr2, r4\\n\\tmov\\tr3, r4\" } } */\n+/* { dg-final { scan-assembler \"mov\\tr1, r4\" } } */\n+/* { dg-final { scan-assembler-not \"mov\\tr2, r4\" } } */\n+/* { dg-final { scan-assembler-not \"mov\\tr3, r4\" } } */\n \n /* Now we check that we use the correct intrinsic to call.  */\n /* { dg-final { scan-assembler \"bl\\t__gnu_cmse_nonsecure_call\" } } */"}, {"sha": "90fdac18e30424edca60b6f884227adbf716899d", "filename": "gcc/testsuite/gcc.target/arm/cmse/struct-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9722215a027b68651c3c7a8af9204d033197e9c0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fstruct-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9722215a027b68651c3c7a8af9204d033197e9c0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fstruct-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fstruct-1.c?ref=9722215a027b68651c3c7a8af9204d033197e9c0", "patch": "@@ -29,5 +29,6 @@ main (void)\n /* { dg-final { scan-assembler \"movs\\tr1, #255\" } } */\n /* { dg-final { scan-assembler \"movt\\tr1, 65535\" } } */\n /* { dg-final { scan-assembler \"ands\\tr0(, r0)?, r1\" } } */\n+/* { dg-final { scan-assembler \"clrm\\t\\{r1, r2, r3, ip, APSR\\}\" { target arm_cmse_clear_ok } } } */\n /* { dg-final { scan-assembler \"vldr\\tFPCXTNS, \\\\\\[sp\\\\\\], #4\" { target arm_cmse_clear_ok } } } */\n /* { dg-final { scan-assembler \"bxns\" } } */"}]}