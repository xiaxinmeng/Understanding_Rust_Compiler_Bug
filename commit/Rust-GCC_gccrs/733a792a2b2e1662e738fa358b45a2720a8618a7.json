{"sha": "733a792a2b2e1662e738fa358b45a2720a8618a7", "node_id": "C_kwDOANBUbNoAKDczM2E3OTJhMmIyZTE2NjJlNzM4ZmEzNThiNDVhMjcyMGE4NjE4YTc", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-06-06T18:29:12Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-06-06T18:29:12Z"}, "message": "c++: function NTTP argument considered unused [PR53164, PR105848]\n\nHere at parse time the template argument f (an OVERLOAD) in A<f> gets\nresolved ahead of time to the FUNCTION_DECL f<int>, and we defer marking\nf<int> as used until instantiation (of g) as usual.\n\nLater when instantiating g the type A<f> (where f has already been\nresolved) is non-dependent, so tsubst_aggr_type avoids re-processing its\ntemplate arguments, and we end up never actually marking f<int> as used\n(which means we never instantiate it) even though A<f>::h() later calls\nit, leading to a link error.\n\nThis patch works around this issue by looking through ADDR_EXPR when\ncalling mark_used on the substituted callee of a CALL_EXPR.\n\n\tPR c++/53164\n\tPR c++/105848\n\ngcc/cp/ChangeLog:\n\n\t* pt.cc (tsubst_copy_and_build) <case CALL_EXPR>: Look through an\n\tADDR_EXPR callee when calling mark_used.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/template/fn-ptr3.C: New test.", "tree": {"sha": "5ecd402a3fb2d49af069ada42e8500df021612a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5ecd402a3fb2d49af069ada42e8500df021612a3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/733a792a2b2e1662e738fa358b45a2720a8618a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/733a792a2b2e1662e738fa358b45a2720a8618a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/733a792a2b2e1662e738fa358b45a2720a8618a7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/733a792a2b2e1662e738fa358b45a2720a8618a7/comments", "author": null, "committer": null, "parents": [{"sha": "36bd6eafb6062f1fb92a994538c6ed017ced670b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36bd6eafb6062f1fb92a994538c6ed017ced670b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36bd6eafb6062f1fb92a994538c6ed017ced670b"}], "stats": {"total": 48, "additions": 44, "deletions": 4}, "files": [{"sha": "dcacba56a1cff4aac536c427b20a8ecf96563f3f", "filename": "gcc/cp/pt.cc", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/733a792a2b2e1662e738fa358b45a2720a8618a7/gcc%2Fcp%2Fpt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/733a792a2b2e1662e738fa358b45a2720a8618a7/gcc%2Fcp%2Fpt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.cc?ref=733a792a2b2e1662e738fa358b45a2720a8618a7", "patch": "@@ -20884,10 +20884,22 @@ tsubst_copy_and_build (tree t,\n \t  }\n \n \t/* Remember that there was a reference to this entity.  */\n-\tif (function != NULL_TREE\n-\t    && DECL_P (function)\n-\t    && !mark_used (function, complain) && !(complain & tf_error))\n-\t  RETURN (error_mark_node);\n+\tif (function != NULL_TREE)\n+\t  {\n+\t    tree inner = function;\n+\t    if (TREE_CODE (inner) == ADDR_EXPR\n+\t\t&& TREE_CODE (TREE_OPERAND (inner, 0)) == FUNCTION_DECL)\n+\t      /* We should already have called mark_used when taking the\n+\t\t address of this function, but do so again anyway to make\n+\t\t sure it's odr-used: at worst this is a no-op, but if we\n+\t\t obtained this FUNCTION_DECL as part of ahead-of-time overload\n+\t\t resolution then that call to mark_used wouldn't have marked it\n+\t\t odr-used yet (53164).  */\n+\t      inner = TREE_OPERAND (inner, 0);\n+\t    if (DECL_P (inner)\n+\t\t&& !mark_used (inner, complain) && !(complain & tf_error))\n+\t      RETURN (error_mark_node);\n+\t  }\n \n \tif (!maybe_fold_fn_template_args (function, complain))\n \t  return error_mark_node;"}, {"sha": "4c651f124f63c14507895c5b458dce82f2d39a7e", "filename": "gcc/testsuite/g++.dg/template/fn-ptr3.C", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/733a792a2b2e1662e738fa358b45a2720a8618a7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffn-ptr3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/733a792a2b2e1662e738fa358b45a2720a8618a7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffn-ptr3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffn-ptr3.C?ref=733a792a2b2e1662e738fa358b45a2720a8618a7", "patch": "@@ -0,0 +1,28 @@\n+// PR c++/53164\n+// PR c++/105848\n+// { dg-do link }\n+\n+template<class T>\n+void f(T) { }\n+\n+template<void (*P)(int)>\n+struct A {\n+  static void wrap() {\n+    P(0);\n+  }\n+};\n+\n+template<void (*P)(char)>\n+void wrap() {\n+  P(0);\n+}\n+\n+template<int>\n+void g() {\n+  A<f>::wrap();\n+  wrap<f>();\n+}\n+\n+int main() {\n+  g<0>();\n+}"}]}