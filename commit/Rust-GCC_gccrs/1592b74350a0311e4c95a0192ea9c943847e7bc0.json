{"sha": "1592b74350a0311e4c95a0192ea9c943847e7bc0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTU5MmI3NDM1MGEwMzExZTRjOTVhMDE5MmVhOWM5NDM4NDdlN2JjMA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-02-02T09:32:23Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-02-02T09:32:23Z"}, "message": "tree-vect-patterns: Don't create over widening patterns for stmts used in reductions [PR98848]\n\nAs discussed in the PR, the reduction code isn't able to cope with type\npromotions/demotions in the reduction computation, so if we recognize an\nover-widening pattern that has vect_reduction_def type, we most likely make\nit non-vectorizable.\n\n2021-02-02  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/98848\n\t* tree-vect-patterns.c (vect_recog_over_widening_pattern): Punt if\n\tSTMT_VINFO_DEF_TYPE (last_stmt_info) is vect_reduction_def.\n\n\t* gcc.dg/vect/pr98848.c: New test.\n\t* gcc.dg/vect/pr92205.c: Remove xfail.", "tree": {"sha": "e301c3575710b10519cca077ac0b275308ed6f7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e301c3575710b10519cca077ac0b275308ed6f7d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1592b74350a0311e4c95a0192ea9c943847e7bc0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1592b74350a0311e4c95a0192ea9c943847e7bc0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1592b74350a0311e4c95a0192ea9c943847e7bc0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1592b74350a0311e4c95a0192ea9c943847e7bc0/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eedda4e160856b7ac0c533ac9445161d0fd88660", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eedda4e160856b7ac0c533ac9445161d0fd88660", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eedda4e160856b7ac0c533ac9445161d0fd88660"}], "stats": {"total": 24, "additions": 23, "deletions": 1}, "files": [{"sha": "ea06660de1effa54f9d4ce61a9072ac1569d1fab", "filename": "gcc/testsuite/gcc.dg/vect/pr92205.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1592b74350a0311e4c95a0192ea9c943847e7bc0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr92205.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1592b74350a0311e4c95a0192ea9c943847e7bc0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr92205.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr92205.c?ref=1592b74350a0311e4c95a0192ea9c943847e7bc0", "patch": "@@ -10,4 +10,4 @@ int b(int n, unsigned char *a)\n   return d;\n }\n \n-/* { dg-final { scan-tree-dump \"vectorized 1 loops\" \"vect\" { xfail *-*-* } } } */\n+/* { dg-final { scan-tree-dump \"vectorized 1 loops\" \"vect\" { target { vect_unpack && { ! vect_no_bitwise } } } } } */"}, {"sha": "5cf7c9fee5f9d31ff90af5c699a78dc38d3369f8", "filename": "gcc/testsuite/gcc.dg/vect/pr98848.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1592b74350a0311e4c95a0192ea9c943847e7bc0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr98848.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1592b74350a0311e4c95a0192ea9c943847e7bc0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr98848.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr98848.c?ref=1592b74350a0311e4c95a0192ea9c943847e7bc0", "patch": "@@ -0,0 +1,18 @@\n+/* PR tree-optimization/98848 */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target vect_int } */\n+\n+short a[9000];\n+\n+int\n+foo (void)\n+{ \n+  int b = a[0];\n+  int i;\n+  for (i = 1; i < 9000; i ++)\n+    if (a[i] < b)\n+      b = a[i];\n+  return b;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loop\" 1 \"vect\" { xfail { vect_no_int_add || vect_no_int_min_max } } } } */"}, {"sha": "b575b456301a565ba7eab904879d087f91743fd8", "filename": "gcc/tree-vect-patterns.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1592b74350a0311e4c95a0192ea9c943847e7bc0/gcc%2Ftree-vect-patterns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1592b74350a0311e4c95a0192ea9c943847e7bc0/gcc%2Ftree-vect-patterns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-patterns.c?ref=1592b74350a0311e4c95a0192ea9c943847e7bc0", "patch": "@@ -1579,6 +1579,10 @@ vect_recog_over_widening_pattern (vec_info *vinfo,\n   tree type = TREE_TYPE (lhs);\n   tree_code code = gimple_assign_rhs_code (last_stmt);\n \n+  /* Punt for reductions where we don't handle the type conversions.  */\n+  if (STMT_VINFO_DEF_TYPE (last_stmt_info) == vect_reduction_def)\n+    return NULL;\n+\n   /* Keep the first operand of a COND_EXPR as-is: only the other two\n      operands are interesting.  */\n   unsigned int first_op = (code == COND_EXPR ? 2 : 1);"}]}