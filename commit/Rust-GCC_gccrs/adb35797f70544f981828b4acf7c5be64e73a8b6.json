{"sha": "adb35797f70544f981828b4acf7c5be64e73a8b6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWRiMzU3OTdmNzA1NDRmOTgxODI4YjRhY2Y3YzViZTY0ZTczYThiNg==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-12-13T16:03:40Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-12-13T16:03:40Z"}, "message": "defaults.h, [...]: Fix comment typos.\n\n\t* defaults.h, stmt.c, tree-cfg.c, tree-ssa-dce.c: Fix comment\n\ttypos.\n\nFrom-SVN: r92092", "tree": {"sha": "a9239b9b69ff7322c8b9e33630d97fd48ac2dcae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a9239b9b69ff7322c8b9e33630d97fd48ac2dcae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/adb35797f70544f981828b4acf7c5be64e73a8b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/adb35797f70544f981828b4acf7c5be64e73a8b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/adb35797f70544f981828b4acf7c5be64e73a8b6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/adb35797f70544f981828b4acf7c5be64e73a8b6/comments", "author": null, "committer": null, "parents": [{"sha": "6e38fea3e4ef087b050ba2739ca26ae92b91e2ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e38fea3e4ef087b050ba2739ca26ae92b91e2ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e38fea3e4ef087b050ba2739ca26ae92b91e2ff"}], "stats": {"total": 22, "additions": 13, "deletions": 9}, "files": [{"sha": "eee53ac0bd859e9a6443eea80bfb6a3e6ae9f85e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adb35797f70544f981828b4acf7c5be64e73a8b6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adb35797f70544f981828b4acf7c5be64e73a8b6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=adb35797f70544f981828b4acf7c5be64e73a8b6", "patch": "@@ -6,6 +6,9 @@\n \t* tree-ssa-dom.c (record_equivalences_from_phis): Add a\n \tcomment.\n \n+\t* defaults.h, stmt.c, tree-cfg.c, tree-ssa-dce.c: Fix comment\n+\ttypos.\n+\n 2004-12-13  Kazuhiro Inaoka <inaoka.kazuhiro@renesas.com>\n \n \t* config/m32r/t-linux (SHLIB_MAPFILES): Add libgcc-glibc.ver to"}, {"sha": "1c95c6a19cdeeef20a677310907ed14819682cfb", "filename": "gcc/defaults.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adb35797f70544f981828b4acf7c5be64e73a8b6/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adb35797f70544f981828b4acf7c5be64e73a8b6/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=adb35797f70544f981828b4acf7c5be64e73a8b6", "patch": "@@ -339,7 +339,7 @@ do { fputs (integer_asm_op (POINTER_SIZE / BITS_PER_UNIT, TRUE), FILE); \\\n #endif\n #endif\n \n-/* This decision to use a .jcr section can be overriden by defining\n+/* This decision to use a .jcr section can be overridden by defining\n    USE_JCR_SECTION to 0 in target file.  This is necessary if target\n    can define JCR_SECTION_NAME but does not have crtstuff or\n    linker support for .jcr section.  */"}, {"sha": "6e21b540aa4fed97e18241763861b3a6b2839b8a", "filename": "gcc/stmt.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adb35797f70544f981828b4acf7c5be64e73a8b6/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adb35797f70544f981828b4acf7c5be64e73a8b6/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=adb35797f70544f981828b4acf7c5be64e73a8b6", "patch": "@@ -3041,11 +3041,12 @@ emit_case_nodes (rtx index, case_node_ptr node, rtx default_label,\n \n       else if (node->right != 0 && node->left == 0)\n \t{\n-\t  /* Here we have a right child but no left so we issue conditional\n+\t  /* Here we have a right child but no left so we issue a conditional\n \t     branch to default and process the right child.\n \n-\t     Omit the conditional branch to default if we it avoid only one\n-\t     right child; it costs too much space to save so little time.  */\n+\t     Omit the conditional branch to default if the right child\n+\t     does not have any children and is single valued; it would\n+\t     cost too much space to save so little time.  */\n \n \t  if (node->right->right || node->right->left\n \t      || !tree_int_cst_equal (node->right->low, node->right->high))"}, {"sha": "457ad9ced5982f6991d1c9f6873bd74579311ab4", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adb35797f70544f981828b4acf7c5be64e73a8b6/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adb35797f70544f981828b4acf7c5be64e73a8b6/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=adb35797f70544f981828b4acf7c5be64e73a8b6", "patch": "@@ -450,7 +450,7 @@ make_edges (void)\n      statements in it.  */\n   make_edge (ENTRY_BLOCK_PTR, BASIC_BLOCK (0), EDGE_FALLTHRU);\n \n-  /* Traverse basic block array placing edges.  */\n+  /* Traverse the basic block array placing edges.  */\n   FOR_EACH_BB (bb)\n     {\n       tree first = first_stmt (bb);\n@@ -3087,8 +3087,8 @@ bsi_insert_on_edge (edge e, tree stmt)\n   append_to_statement_list (stmt, &PENDING_STMT (e));\n }\n \n-/* Similar to bsi_insert_on_edge+bsi_commit_edge_inserts.  If new block has to\n-   be created, it is returned.  */\n+/* Similar to bsi_insert_on_edge+bsi_commit_edge_inserts.  If a new\n+   block has to be created, it is returned.  */\n \n basic_block\n bsi_insert_on_edge_immediate (edge e, tree stmt)\n@@ -3941,7 +3941,7 @@ has_abnormal_incoming_edge_p (basic_block bb)\n   return false;\n }\n \n-/* Removes forwarder block BB.  Returns false if this failed.  If new\n+/* Removes forwarder block BB.  Returns false if this failed.  If a new\n    forwarder block is created due to redirection of edges, it is\n    stored to worklist.  */\n "}, {"sha": "f37430d3299f91043bf069986db7d9f65ab849a1", "filename": "gcc/tree-ssa-dce.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adb35797f70544f981828b4acf7c5be64e73a8b6/gcc%2Ftree-ssa-dce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adb35797f70544f981828b4acf7c5be64e73a8b6/gcc%2Ftree-ssa-dce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dce.c?ref=adb35797f70544f981828b4acf7c5be64e73a8b6", "patch": "@@ -264,7 +264,7 @@ mark_operand_necessary (tree op, bool phionly)\n }\n \f\n \n-/* Mark STMT as necessary if it is obviously is.  Add it to the worklist if\n+/* Mark STMT as necessary if it obviously is.  Add it to the worklist if\n    it can make other statements necessary.\n \n    If AGGRESSIVE is false, control statements are conservatively marked as"}]}