{"sha": "ad9fe5f344c6ade92a8efab3202be356c94d5733", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWQ5ZmU1ZjM0NGM2YWRlOTJhOGVmYWIzMjAyYmUzNTZjOTRkNTczMw==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2018-09-19T17:44:36Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2018-09-19T17:44:36Z"}, "message": "re PR fortran/84109 (ICE in adjustl on allocatable array of strings)\n\n2018-09-19  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/84109\n\t* trans-expr.c (gfc_trans_assignment_1): The rse.pre for the\n\tassignment of deferred character intrinsic elemental function\n\tresults to a realocatable lhs must not be added to the exterior\n\tblock if they are array valued but must go to the loop body.\n\n2018-09-19  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/84109\n\t* gfortran.dg/elemental_function_3.f90 : New test.\n\nFrom-SVN: r264427", "tree": {"sha": "ff35a61b077f024034777efaf7e2826d8307eda1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ff35a61b077f024034777efaf7e2826d8307eda1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ad9fe5f344c6ade92a8efab3202be356c94d5733", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad9fe5f344c6ade92a8efab3202be356c94d5733", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad9fe5f344c6ade92a8efab3202be356c94d5733", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad9fe5f344c6ade92a8efab3202be356c94d5733/comments", "author": null, "committer": null, "parents": [{"sha": "ebdf17cb73df8e9759c9fd6d0afc0329c0072cd8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebdf17cb73df8e9759c9fd6d0afc0329c0072cd8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ebdf17cb73df8e9759c9fd6d0afc0329c0072cd8"}], "stats": {"total": 66, "additions": 62, "deletions": 4}, "files": [{"sha": "15f060b89ff14a93ff2e01010ebac5d88e311256", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad9fe5f344c6ade92a8efab3202be356c94d5733/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad9fe5f344c6ade92a8efab3202be356c94d5733/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=ad9fe5f344c6ade92a8efab3202be356c94d5733", "patch": "@@ -1,3 +1,11 @@\n+2018-09-19  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/84109\n+\t* trans-expr.c (gfc_trans_assignment_1): The rse.pre for the\n+\tassignment of deferred character intrinsic elemental function\n+\tresults to a realocatable lhs must not be added to the exterior\n+\tblock if they are array valued but must go to the loop body.\n+\n 2018-09-18  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/29550"}, {"sha": "53b435947e91fc31739d35454b898d133b03e917", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad9fe5f344c6ade92a8efab3202be356c94d5733/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad9fe5f344c6ade92a8efab3202be356c94d5733/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=ad9fe5f344c6ade92a8efab3202be356c94d5733", "patch": "@@ -10279,18 +10279,19 @@ gfc_trans_assignment_1 (gfc_expr * expr1, gfc_expr * expr2, bool init_flag,\n      parameter available to the caller; gfortran saves it in the .mod files.\n      NOTE ALSO: The concatenation operation generates a temporary pointer,\n      whose allocation must go to the innermost loop.\n-     NOTE ALSO (2): A character conversion may generate a temporary, too.  */\n+     NOTE ALSO (2): Elemental functions may generate a temporary, too.  */\n   if (flag_realloc_lhs\n       && expr2->ts.type == BT_CHARACTER && expr1->ts.deferred\n       && !(lss != gfc_ss_terminator\n+\t   && rss != gfc_ss_terminator\n \t   && ((expr2->expr_type == EXPR_FUNCTION\n \t\t&& expr2->value.function.esym != NULL\n \t\t   && expr2->value.function.esym->attr.elemental)\n-\t       || (expr2->expr_type == EXPR_OP\n-\t\t   && expr2->value.op.op == INTRINSIC_CONCAT)\n \t       || (expr2->expr_type == EXPR_FUNCTION\n \t\t   && expr2->value.function.isym != NULL\n-\t\t   && expr2->value.function.isym->id == GFC_ISYM_CONVERSION))))\n+\t\t   && expr2->value.function.isym->elemental)\n+\t       || (expr2->expr_type == EXPR_OP\n+\t\t   && expr2->value.op.op == INTRINSIC_CONCAT))))\n     gfc_add_block_to_block (&block, &rse.pre);\n \n   /* Nullify the allocatable components corresponding to those of the lhs"}, {"sha": "4631448bb67f3246a8fd1cac7c8749b380aa922a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad9fe5f344c6ade92a8efab3202be356c94d5733/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad9fe5f344c6ade92a8efab3202be356c94d5733/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ad9fe5f344c6ade92a8efab3202be356c94d5733", "patch": "@@ -1,3 +1,8 @@\n+2018-09-19  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/84109\n+\t* gfortran.dg/elemental_function_3.f90 : New test.\n+\n 2018-09-19  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/87357 - missing -Wconversion warning"}, {"sha": "67bdd1ea86fb58cbfdcad3fa413953cb08b4de63", "filename": "gcc/testsuite/gfortran.dg/elemental_function_3.f90", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad9fe5f344c6ade92a8efab3202be356c94d5733/gcc%2Ftestsuite%2Fgfortran.dg%2Felemental_function_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad9fe5f344c6ade92a8efab3202be356c94d5733/gcc%2Ftestsuite%2Fgfortran.dg%2Felemental_function_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Felemental_function_3.f90?ref=ad9fe5f344c6ade92a8efab3202be356c94d5733", "patch": "@@ -0,0 +1,44 @@\n+! { dg-do run }\n+!\n+! Test the fix for PR84109 in which the call to the elemental function\n+! 'adjustl' was being added before the scalarization loop in the assignment.\n+! Since the result temporary was being declared in the loop body, this\n+! drove the gimplifier crazy. It is sufficient to compile this testcase\n+! since it used to ICE. This is the intrinsic counterpart to PR87239,\n+! which is tested for the absence of an ICE in elemental_function_2.f90.\n+! In this fix, a further improvement was to keep scalar calls outside the\n+! scalarization loop and this is tested with 'my_adjustl'.\n+!\n+! Contributed by Willem Vermin  <wvermin@gmail.com>\n+!\n+program prog\n+   implicit none\n+   character(len=:), allocatable :: c(:)\n+   integer :: cnt = 0\n+\n+   allocate(character(len=20) :: c(10))\n+   c = \"  ab  \"\n+   c = adjustl(c)                        ! Used to ICE\n+   if (trim (c(1)) .ne. \"ab\") stop 1\n+\n+   c = my_adjustl (\" abcdefg \")\n+   if (trim (c(1)) .ne. \"abcdefg\") stop 2\n+   if (cnt .ne. 1) stop 3               ! Outside the scalarization loop\n+   if (size (c, 1) .ne. 10) stop 4\n+   if (len (c) .ne. 20) stop 5\n+\n+   cnt = 0\n+   c = my_adjustl ([\" uv \", \" xy \"])\n+   if (trim (c(2)) .ne. \"xy\") stop 6\n+   if (cnt .ne. size (c, 1)) stop 7     ! Inside the scalarization loop\n+   if (size (c, 1) .ne. 2) stop 8\n+\n+contains\n+\n+   impure elemental function my_adjustl(arg) result (res)\n+      character(*), intent(in) :: arg\n+      character(len = len (arg)) :: res\n+      res = adjustl (arg)\n+      cnt = cnt + 1                    ! Test how many calls are made\n+   end function\n+end program"}]}