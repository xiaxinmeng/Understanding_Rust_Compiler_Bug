{"sha": "08f7c2eb78c512fc41d363db476d9912a082ec5e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDhmN2MyZWI3OGM1MTJmYzQxZDM2M2RiNDc2ZDk5MTJhMDgyZWM1ZQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2004-05-16T17:01:40Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-05-16T17:01:40Z"}, "message": "mt_allocator.h (__mt_alloc<>::deallocate): Consistently update __bin._M_free[0].\n\n2004-05-16  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/ext/mt_allocator.h (__mt_alloc<>::deallocate):\n\tConsistently update __bin._M_free[0].\n\t(__mt_alloc<>::allocate): When __bin._M_first[0] != NULL use\n\t__bin._M_free[0] to simplify the while loop (i.e., the number\n\tof iterations becomes known at the outset).\n\nFrom-SVN: r81916", "tree": {"sha": "c76fe30a15affefc1d7002c578e700a73621d44c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c76fe30a15affefc1d7002c578e700a73621d44c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/08f7c2eb78c512fc41d363db476d9912a082ec5e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08f7c2eb78c512fc41d363db476d9912a082ec5e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08f7c2eb78c512fc41d363db476d9912a082ec5e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08f7c2eb78c512fc41d363db476d9912a082ec5e/comments", "author": null, "committer": null, "parents": [{"sha": "d464f8e99ef16ef8eb26f285e54a2d5ce6024c64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d464f8e99ef16ef8eb26f285e54a2d5ce6024c64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d464f8e99ef16ef8eb26f285e54a2d5ce6024c64"}], "stats": {"total": 63, "additions": 37, "deletions": 26}, "files": [{"sha": "2458a14754e015eddafb020ba17ffbf7892d36eb", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08f7c2eb78c512fc41d363db476d9912a082ec5e/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08f7c2eb78c512fc41d363db476d9912a082ec5e/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=08f7c2eb78c512fc41d363db476d9912a082ec5e", "patch": "@@ -1,3 +1,11 @@\n+2004-05-16  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/ext/mt_allocator.h (__mt_alloc<>::deallocate):\n+\tConsistently update __bin._M_free[0].\n+\t(__mt_alloc<>::allocate): When __bin._M_first[0] != NULL use\n+\t__bin._M_free[0] to simplify the while loop (i.e., the number\n+\tof iterations becomes known at the outset).\n+\n 2004-05-15  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/std/std_bitset.h: Trivial formatting fixes."}, {"sha": "1fc0ccbca0eb86972857f5c836ec88c5893e0d0a", "filename": "libstdc++-v3/include/ext/mt_allocator.h", "status": "modified", "additions": 29, "deletions": 26, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08f7c2eb78c512fc41d363db476d9912a082ec5e/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmt_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08f7c2eb78c512fc41d363db476d9912a082ec5e/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmt_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmt_allocator.h?ref=08f7c2eb78c512fc41d363db476d9912a082ec5e", "patch": "@@ -148,19 +148,21 @@ namespace __gnu_cxx\n \t// Set to true forces all allocations to use new().\n \tbool \t_M_force_new; \n      \n-\texplicit _Tune()\n+\texplicit\n+\t_Tune()\n \t: _M_max_bytes(128), _M_min_bin(8),\n \t  _M_chunk_size(4096 - 4 * sizeof(void*)), \n \t  _M_max_threads(4096), _M_freelist_headroom(10), \n-\t  _M_force_new(getenv(\"GLIBCXX_FORCE_NEW\") ? true : false) \n-\t{ }      \n+\t  _M_force_new(getenv(\"GLIBCXX_FORCE_NEW\") ? true : false)\n+\t{ }\n \n-\texplicit _Tune(size_t __maxb, size_t __minbin, size_t __chunk,\n-\t\t       size_t __maxthreads, size_t __headroom, bool __force) \n+\texplicit\n+\t_Tune(size_t __maxb, size_t __minbin, size_t __chunk,\n+\t      size_t __maxthreads, size_t __headroom, bool __force) \n \t: _M_max_bytes(__maxb), _M_min_bin(__minbin), _M_chunk_size(__chunk), \n \t  _M_max_threads(__maxthreads), _M_freelist_headroom(__headroom), \n \t  _M_force_new(__force)\n-\t{ }      \n+\t{ }\n       };\n \n     private:\n@@ -330,34 +332,33 @@ namespace __gnu_cxx\n \t\t  \n \t\t  void* __v = ::operator new(_S_options._M_chunk_size);\n \t\t  __bin._M_first[__thread_id] = static_cast<_Block_record*>(__v);\n-\t\t  __bin._M_free[__thread_id] = __block_count;\t\t  \n+\t\t  __bin._M_free[__thread_id] = __block_count;\n \n \t\t  --__block_count;\n \t\t  __block = __bin._M_first[__thread_id];\n-\t\t  while (__block_count > 0)\n+\t\t  while (__block_count-- > 0)\n \t\t    {\n \t\t      char* __c = reinterpret_cast<char*>(__block) + __bin_size;\n \t\t      __block->_M_next = reinterpret_cast<_Block_record*>(__c);\n \t\t      __block = __block->_M_next;\n-\t\t      --__block_count;\n \t\t    }\n-\t\t  __block->_M_next = NULL;\n \t\t}\n \t      else\n \t\t{\n-\t\t  while (__bin._M_first[0] != NULL && __block_count > 0)\n-\t\t    {\n-\t\t      _Block_record* __tmp = __bin._M_first[0]->_M_next;\n-\t\t      __block = __bin._M_first[0];\n-\n-\t\t      __block->_M_next = __bin._M_first[__thread_id];\n-\t\t      __bin._M_first[__thread_id] = __block;\t\t      \n-\t\t      \n-\t\t      ++__bin._M_free[__thread_id];\n-\t\t      __bin._M_first[0] = __tmp;\n-\t\t      --__block_count;\n-\t\t    }\n+\t\t  if (__block_count > __bin._M_free[0])\n+\t\t    __block_count = __bin._M_free[0];\n+\t\t  const size_t __added = __block_count;\n+\t\t  _Block_record* __first = __bin._M_first[0];\n+\t\t  __block = __first;\n+\t\t  --__block_count;\n+\t\t  while (__block_count-- > 0)\n+\t\t    __block = __block->_M_next;\n+\t\t  __bin._M_first[0] = __block->_M_next;\n+\t\t  __bin._M_free[0] -= __added;\n \t\t  __gthread_mutex_unlock(__bin._M_mutex);\n+\n+\t\t  __bin._M_first[__thread_id] = __first;\n+\t\t  __bin._M_free[__thread_id] += __added;\n \t\t}\n \t    }\n \t  else\n@@ -368,15 +369,15 @@ namespace __gnu_cxx\n \t      \n \t      --__block_count;\n \t      __block = __bin._M_first[0];\n-\t      while (__block_count > 0)\n+\t      while (__block_count-- > 0)\n \t\t{\n \t\t  char* __c = reinterpret_cast<char*>(__block) + __bin_size;\n \t\t  __block->_M_next = reinterpret_cast<_Block_record*>(__c);\n \t\t  __block = __block->_M_next;\n-\t\t  --__block_count;\n \t\t}\n-\t      __block->_M_next = NULL;\n \t    }\n+\n+\t  __block->_M_next = NULL;\n \t}\n \n       __block = __bin._M_first[__thread_id];\n@@ -434,14 +435,16 @@ namespace __gnu_cxx\n \t      _Block_record* __first = __tmp;\n \t      __remove /= _S_options._M_freelist_headroom;\n \t      const long __removed = __remove;\n-\t      while (__remove-- > 1)\n+\t      --__remove;\n+\t      while (__remove-- > 0)\n \t\t__tmp = __tmp->_M_next;\n \t      __bin._M_first[__thread_id] = __tmp->_M_next;\n \t      __bin._M_free[__thread_id] -= __removed;\n \n \t      __gthread_mutex_lock(__bin._M_mutex);\n \t      __tmp->_M_next = __bin._M_first[0];\n \t      __bin._M_first[0] = __first;\n+\t      __bin._M_free[0] += __removed;\n \t      __gthread_mutex_unlock(__bin._M_mutex);\n \t    }\n \t  "}]}