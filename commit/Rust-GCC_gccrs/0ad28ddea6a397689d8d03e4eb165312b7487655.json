{"sha": "0ad28ddea6a397689d8d03e4eb165312b7487655", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGFkMjhkZGVhNmEzOTc2ODlkOGQwM2U0ZWIxNjUzMTJiNzQ4NzY1NQ==", "commit": {"author": {"name": "Andrew Pinski", "email": "pinskia@physics.uc.edu", "date": "2004-10-11T03:42:09Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2004-10-11T03:42:09Z"}, "message": "re PR c++/17554 (crashes in on kopete build (KDE's kdenetwork))\n\n2004-10-10  Andrew Pinski  <pinskia@physics.uc.edu>\n\n        PR c++/17554\n        part of c++/17657\n        middle-end/17703\n        * semantics.c (maybe_cleanup_point_expr): Call\n        fold_build_cleanup_point_expr.\n        (maybe_cleanup_point_expr_void): New function.\n        (add_decl_expr): Call maybe_cleanup_point_expr_void.\n        (finish_expr_stmt): Likewise.\n        (finish_return_stmt): Likewise.\n        (finish_for_expr): Likewise.\n        (finish_asm_stmt): Likewise.\n        * typeck.c (condition_conversion): Call\n        fold_build_cleanup_point_expr.\n\n2004-10-10  Andrew Pinski  <pinskia@physics.uc.edu>\n\n        PR middle-end/17703\n        part of PR c++/17657\n        * fold-const.c (fold_build_cleanup_point_expr): New function.\n        * tree.h (fold_build_cleanup_point_expr): Prototype.\n\n2004-10-10  Andrew Pinski  <pinskia@physics.uc.edu>\n\n        PR c++/17554\n        * g++.dg/init/for3.C: New test.\n\n        PR c++/17657\n        * g++.dg/opt/switch2.C: New test.\n\n        PR middle-end/17703\n        * g++.dg/warn/Wreturn-2.C: New test.\n\nFrom-SVN: r88869", "tree": {"sha": "ba27ac02d6df5a9d734fba44b00edb8f74204304", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ba27ac02d6df5a9d734fba44b00edb8f74204304"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0ad28ddea6a397689d8d03e4eb165312b7487655", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ad28ddea6a397689d8d03e4eb165312b7487655", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ad28ddea6a397689d8d03e4eb165312b7487655", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ad28ddea6a397689d8d03e4eb165312b7487655/comments", "author": null, "committer": null, "parents": [{"sha": "5c70192c1d006b8ca0f028aea3e88f0964f7b8b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c70192c1d006b8ca0f028aea3e88f0964f7b8b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c70192c1d006b8ca0f028aea3e88f0964f7b8b8"}], "stats": {"total": 118, "additions": 111, "deletions": 7}, "files": [{"sha": "f816b48b58b945452f6bd4ef7ff1d4d448ac5566", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ad28ddea6a397689d8d03e4eb165312b7487655/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ad28ddea6a397689d8d03e4eb165312b7487655/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0ad28ddea6a397689d8d03e4eb165312b7487655", "patch": "@@ -1,3 +1,10 @@\n+2004-10-10  Andrew Pinski  <pinskia@physics.uc.edu>\n+\n+\tPR middle-end/17703\n+\tpart of PR c++/17657\n+\t* fold-const.c (fold_build_cleanup_point_expr): New function.\n+\t* tree.h (fold_build_cleanup_point_expr): Prototype.\n+\n 2004-10-10  Eric Christopher  <echristo@redhat.com>\n \n \t* dwarf2out.c: Move attribute to subprogram declaration"}, {"sha": "08f73ab6e15be7ca6d908712564f8a4314aacd01", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ad28ddea6a397689d8d03e4eb165312b7487655/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ad28ddea6a397689d8d03e4eb165312b7487655/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0ad28ddea6a397689d8d03e4eb165312b7487655", "patch": "@@ -1,3 +1,19 @@\n+2004-10-10  Andrew Pinski  <pinskia@physics.uc.edu>\n+\n+\tPR c++/17554\n+\tpart of c++/17657\n+\tmiddle-end/17703\n+\t* semantics.c (maybe_cleanup_point_expr): Call\n+\tfold_build_cleanup_point_expr.\n+\t(maybe_cleanup_point_expr_void): New function.\n+\t(add_decl_expr): Call maybe_cleanup_point_expr_void.\n+\t(finish_expr_stmt): Likewise.\n+\t(finish_return_stmt): Likewise.\n+\t(finish_for_expr): Likewise.\n+\t(finish_asm_stmt): Likewise.\n+\t* typeck.c (condition_conversion): Call\n+\tfold_build_cleanup_point_expr.\n+\n 2004-10-10  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \tPR c++/17907"}, {"sha": "0fb5c684a8ff966a3aad8f47774b9d71c00bad91", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 21, "deletions": 6, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ad28ddea6a397689d8d03e4eb165312b7487655/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ad28ddea6a397689d8d03e4eb165312b7487655/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=0ad28ddea6a397689d8d03e4eb165312b7487655", "patch": "@@ -358,10 +358,25 @@ static tree\n maybe_cleanup_point_expr (tree expr)\n {\n   if (!processing_template_decl && stmts_are_full_exprs_p ())\n-    expr = build1 (CLEANUP_POINT_EXPR, TREE_TYPE (expr), expr);\n+    expr = fold_build_cleanup_point_expr (TREE_TYPE (expr), expr);\n   return expr;\n }\n \n+/* Like maybe_cleanup_point_expr except have the type of the new expression be\n+   void so we don't need to create a temprary variable to hold the inner\n+   expression.  The reason why we do this is because the orginal type might be\n+   an aggregate and we cannot create a temprary variable for that type.  */\n+\n+static tree\n+maybe_cleanup_point_expr_void (tree expr)\n+{\n+  if (!processing_template_decl && stmts_are_full_exprs_p ())\n+    expr = fold_build_cleanup_point_expr (void_type_node, expr);\n+  return expr;\n+}\n+\n+\n+\n /* Create a declaration statement for the declaration given by the DECL.  */\n \n void\n@@ -370,7 +385,7 @@ add_decl_expr (tree decl)\n   tree r = build_stmt (DECL_EXPR, decl);\n   if (DECL_INITIAL (decl)\n       || (DECL_SIZE (decl) && TREE_SIDE_EFFECTS (DECL_SIZE (decl))))\n-    r = maybe_cleanup_point_expr (r);\n+    r = maybe_cleanup_point_expr_void (r);\n   add_stmt (r);\n }\n \n@@ -556,7 +571,7 @@ finish_expr_stmt (tree expr)\n \t{\n \t  if (TREE_CODE (expr) != EXPR_STMT)\n \t    expr = build_stmt (EXPR_STMT, expr);\n-\t  expr = maybe_cleanup_point_expr (expr);\n+\t  expr = maybe_cleanup_point_expr_void (expr);\n \t}\n \n       r = add_stmt (expr);\n@@ -719,7 +734,7 @@ finish_return_stmt (tree expr)\n     }\n \n   r = build_stmt (RETURN_EXPR, expr);\n-  r = maybe_cleanup_point_expr (r);\n+  r = maybe_cleanup_point_expr_void (r);\n   r = add_stmt (r);\n   finish_stmt ();\n \n@@ -783,7 +798,7 @@ finish_for_expr (tree expr, tree for_stmt)\n       cxx_incomplete_type_error (expr, TREE_TYPE (expr));\n       expr = error_mark_node;\n     }\n-  expr = maybe_cleanup_point_expr (expr);\n+  expr = maybe_cleanup_point_expr_void (expr);\n   FOR_EXPR (for_stmt) = expr;\n }\n \n@@ -1179,7 +1194,7 @@ finish_asm_stmt (int volatile_p, tree string, tree output_operands,\n \t\t  output_operands, input_operands,\n \t\t  clobbers);\n   ASM_VOLATILE_P (r) = volatile_p;\n-  r = maybe_cleanup_point_expr (r);\n+  r = maybe_cleanup_point_expr_void (r);\n   return add_stmt (r);\n }\n "}, {"sha": "dc0b7cd52c59aed70f14eeafd6e9b962a75a8411", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ad28ddea6a397689d8d03e4eb165312b7487655/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ad28ddea6a397689d8d03e4eb165312b7487655/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=0ad28ddea6a397689d8d03e4eb165312b7487655", "patch": "@@ -3681,7 +3681,7 @@ condition_conversion (tree expr)\n   if (processing_template_decl)\n     return expr;\n   t = perform_implicit_conversion (boolean_type_node, expr);\n-  t = build1 (CLEANUP_POINT_EXPR, boolean_type_node, t);\n+  t = fold_build_cleanup_point_expr (boolean_type_node, t);\n   return t;\n }\n \t\t"}, {"sha": "1dba1fb6c12c5130b14f766d29524ccccab57ffd", "filename": "gcc/fold-const.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ad28ddea6a397689d8d03e4eb165312b7487655/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ad28ddea6a397689d8d03e4eb165312b7487655/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=0ad28ddea6a397689d8d03e4eb165312b7487655", "patch": "@@ -10465,6 +10465,21 @@ fold_relational_const (enum tree_code code, tree type, tree op0, tree op1)\n   return constant_boolean_node (result, type);\n }\n \n+/* Build an expression for the a clean point containing EXPR with type TYPE.\n+   Don't build a cleanup point expression for EXPR which don't have side\n+   effects.  */\n+\n+tree\n+fold_build_cleanup_point_expr (tree type, tree expr)\n+{\n+  /* If the expression does not have side effects then we don't have to wrap\n+     it with a cleanup point expression.  */\n+  if (!TREE_SIDE_EFFECTS (expr))\n+    return expr;\n+  \n+  return build1 (CLEANUP_POINT_EXPR, type, expr);\n+}\n+\n /* Build an expression for the address of T.  Folds away INDIRECT_REF to\n    avoid confusing the gimplify process.  */\n "}, {"sha": "632dc18d59470b877d701503d1b4030b50804d39", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ad28ddea6a397689d8d03e4eb165312b7487655/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ad28ddea6a397689d8d03e4eb165312b7487655/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0ad28ddea6a397689d8d03e4eb165312b7487655", "patch": "@@ -1,3 +1,14 @@\n+2004-10-10  Andrew Pinski  <pinskia@physics.uc.edu>\n+\n+\tPR c++/17554\n+\t* g++.dg/init/for3.C: New test.\n+\n+\tPR c++/17657\n+\t* g++.dg/opt/switch2.C: New test.\n+\n+\tPR middle-end/17703\n+\t* g++.dg/warn/Wreturn-2.C: New test.\n+\n 2004-10-10  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \tPR c++/17907"}, {"sha": "c8ef3cc6291c92da0af1dde5aeca805f430e9e54", "filename": "gcc/testsuite/g++.dg/init/for3.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ad28ddea6a397689d8d03e4eb165312b7487655/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Ffor3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ad28ddea6a397689d8d03e4eb165312b7487655/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Ffor3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Ffor3.C?ref=0ad28ddea6a397689d8d03e4eb165312b7487655", "patch": "@@ -0,0 +1,9 @@\n+// { dg-do compile }\n+\n+struct A { int i;  A();  A(const A&); };\n+\n+void bar()\n+{\n+    A a;\n+    for ( ;; a=A() ) ;\n+}"}, {"sha": "2590273c5d9c00e58b6832ba436bb7b6228fe2af", "filename": "gcc/testsuite/g++.dg/opt/switch2.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ad28ddea6a397689d8d03e4eb165312b7487655/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fswitch2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ad28ddea6a397689d8d03e4eb165312b7487655/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fswitch2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fswitch2.C?ref=0ad28ddea6a397689d8d03e4eb165312b7487655", "patch": "@@ -0,0 +1,23 @@\n+// { dg-do compile }\n+// { dg-options \"-O2\" }\n+\n+extern int foo (int);\n+\n+void\n+bar (void)\n+{\n+  char tmp = foo (0);\n+  switch (tmp)\n+    {\n+    case 1: foo (1); break;\n+    case 2: foo (2); break;\n+    case 3: foo (3); break;\n+    case 4: foo (4); break;\n+    case 5: foo (5); break;\n+    case 6: foo (6); break;\n+    case 7: foo (7); break;\n+    case 255: foo (8); break;\n+    default: break;\n+    }\n+}\n+"}, {"sha": "460afd53a8c48962298a2228a58f57713fed813f", "filename": "gcc/testsuite/g++.dg/warn/Wreturn-2.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ad28ddea6a397689d8d03e4eb165312b7487655/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWreturn-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ad28ddea6a397689d8d03e4eb165312b7487655/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWreturn-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWreturn-2.C?ref=0ad28ddea6a397689d8d03e4eb165312b7487655", "patch": "@@ -0,0 +1,7 @@\n+// { dg-do compile }\n+int foo(int first) {\n+  while (true) {\n+    return first;\n+  }\n+} // { dg-bogus \"control reaches\" }\n+"}, {"sha": "ec2ce118df26d824ff3a25e31849034cf8c5af3f", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ad28ddea6a397689d8d03e4eb165312b7487655/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ad28ddea6a397689d8d03e4eb165312b7487655/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=0ad28ddea6a397689d8d03e4eb165312b7487655", "patch": "@@ -3538,6 +3538,7 @@ extern tree nondestructive_fold_binary_to_constant (enum tree_code, tree, tree,\n extern tree fold_read_from_constant_string (tree);\n extern tree int_const_binop (enum tree_code, tree, tree, int);\n extern tree build_fold_addr_expr (tree);\n+tree fold_build_cleanup_point_expr (tree type, tree expr);\n extern tree build_fold_addr_expr_with_type (tree, tree);\n extern tree build_fold_indirect_ref (tree);\n extern tree constant_boolean_node (int, tree);"}]}