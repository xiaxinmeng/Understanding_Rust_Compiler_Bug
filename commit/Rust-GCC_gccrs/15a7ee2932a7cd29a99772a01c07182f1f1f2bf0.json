{"sha": "15a7ee2932a7cd29a99772a01c07182f1f1f2bf0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTVhN2VlMjkzMmE3Y2QyOWE5OTc3MmEwMWMwNzE4MmYxZjFmMmJmMA==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@integrable-solutions.net", "date": "2004-10-04T15:07:50Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2004-10-04T15:07:50Z"}, "message": "Convert diagnostics to use quoting flag q 4/n\n\n        Convert diagnostics to use quoting flag q 4/n\n        * except.c (decl_is_java_type, build_throw,\n        is_admissible_throw_operand, check_handlers_1,\n        check_handlers):\n        Use quoting formats.\n        * friend.c (add_friend, make_friend_class, do_friend):\n        Likewise.\n        * init.c (sort_mem_initializers, emit_mem_initializers,\n        member_init_ok_or_else, expand_member_init, is_aggr_type,\n        build_offset_ref, build_java_class_ref): Likewise.\n\nFrom-SVN: r88511", "tree": {"sha": "aa851870e550289504febd18f3972ebc085b595c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aa851870e550289504febd18f3972ebc085b595c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/15a7ee2932a7cd29a99772a01c07182f1f1f2bf0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15a7ee2932a7cd29a99772a01c07182f1f1f2bf0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15a7ee2932a7cd29a99772a01c07182f1f1f2bf0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15a7ee2932a7cd29a99772a01c07182f1f1f2bf0/comments", "author": {"login": "cxx-undef", "id": 5528103, "node_id": "MDQ6VXNlcjU1MjgxMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/5528103?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cxx-undef", "html_url": "https://github.com/cxx-undef", "followers_url": "https://api.github.com/users/cxx-undef/followers", "following_url": "https://api.github.com/users/cxx-undef/following{/other_user}", "gists_url": "https://api.github.com/users/cxx-undef/gists{/gist_id}", "starred_url": "https://api.github.com/users/cxx-undef/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cxx-undef/subscriptions", "organizations_url": "https://api.github.com/users/cxx-undef/orgs", "repos_url": "https://api.github.com/users/cxx-undef/repos", "events_url": "https://api.github.com/users/cxx-undef/events{/privacy}", "received_events_url": "https://api.github.com/users/cxx-undef/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "095527632980f0c9838466134cb6e837dd87c103", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/095527632980f0c9838466134cb6e837dd87c103", "html_url": "https://github.com/Rust-GCC/gccrs/commit/095527632980f0c9838466134cb6e837dd87c103"}], "stats": {"total": 117, "additions": 65, "deletions": 52}, "files": [{"sha": "449ee3c77264d3f238d05bc1156d2dda6425e0ab", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15a7ee2932a7cd29a99772a01c07182f1f1f2bf0/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15a7ee2932a7cd29a99772a01c07182f1f1f2bf0/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=15a7ee2932a7cd29a99772a01c07182f1f1f2bf0", "patch": "@@ -1,3 +1,14 @@\n+2004-10-04  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n+\n+\tConvert diagnostics to use quoting flag q 4/n\n+\t* except.c (decl_is_java_type, build_throw, \n+\tis_admissible_throw_operand, check_handlers_1, check_handlers): \n+\tUse quoting formats.\n+\t* friend.c (add_friend, make_friend_class, do_friend): Likewise.\n+\t* init.c (sort_mem_initializers, emit_mem_initializers, \n+\tmember_init_ok_or_else, expand_member_init, is_aggr_type, \n+\tbuild_offset_ref, build_java_class_ref): Likewise.\n+\n 2004-10-03  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n \n \tConvert diagnostics to use quoting flag q 3/n"}, {"sha": "95da1614d588f68f4344a660d4a674a7eb970563", "filename": "gcc/cp/except.c", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15a7ee2932a7cd29a99772a01c07182f1f1f2bf0/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15a7ee2932a7cd29a99772a01c07182f1f1f2bf0/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=15a7ee2932a7cd29a99772a01c07182f1f1f2bf0", "patch": "@@ -236,8 +236,8 @@ decl_is_java_type (tree decl, int err)\n \t  && TYPE_FOR_JAVA (TREE_TYPE (decl)))\n \t{\n \t  /* Can't throw a reference.  */\n-\t  error (\"type `%T' is disallowed in Java `throw' or `catch'\",\n-\t\t    decl);\n+\t  error (\"type %qT is disallowed in Java %<throw%> or %<catch%>\",\n+                 decl);\n \t}\n \n       if (r)\n@@ -247,15 +247,15 @@ decl_is_java_type (tree decl, int err)\n \n \t  if (jthrow_node == NULL_TREE)\n \t    fatal_error\n-\t      (\"call to Java `catch' or `throw' with `jthrowable' undefined\");\n+\t      (\"call to Java %<catch%> or %<throw%> with %<jthrowable%> undefined\");\n \n \t  jthrow_node = TREE_TYPE (TREE_TYPE (jthrow_node));\n \n \t  if (! DERIVED_FROM_P (jthrow_node, TREE_TYPE (decl)))\n \t    {\n \t      /* Thrown object must be a Throwable.  */\n-\t      error (\"type `%T' is not derived from `java::lang::Throwable'\",\n-\t\t\tTREE_TYPE (decl));\n+\t      error (\"type %qT is not derived from %<java::lang::Throwable%>\",\n+                     TREE_TYPE (decl));\n \t    }\n \t}\n     }\n@@ -596,7 +596,7 @@ build_throw (tree exp)\n \t}\n       else if (really_overloaded_fn (fn))\n \t{\n-\t  error (\"`%D' should never be overloaded\", fn);\n+\t  error (\"%qD should never be overloaded\", fn);\n \t  return error_mark_node;\n \t}\n       fn = OVL_CURRENT (fn);\n@@ -807,7 +807,8 @@ is_admissible_throw_operand (tree expr)\n             conversion.  */\n   else if (CLASS_TYPE_P (type) && CLASSTYPE_PURE_VIRTUALS (type))\n     {\n-      error (\"expression '%E' of abstract class type '%T' cannot be used in throw-expression\", expr, type);\n+      error (\"expression %qE of abstract class type %qT cannot \"\n+             \"be used in throw-expression\", expr, type);\n       return false;\n     }\n \n@@ -891,9 +892,9 @@ check_handlers_1 (tree master, tree_stmt_iterator i)\n       tree handler = tsi_stmt (i);\n       if (TREE_TYPE (handler) && can_convert_eh (type, TREE_TYPE (handler)))\n \t{\n-\t  warning (\"%Hexception of type `%T' will be caught\",\n+\t  warning (\"%Hexception of type %qT will be caught\",\n \t\t   EXPR_LOCUS (handler), TREE_TYPE (handler));\n-\t  warning (\"%H   by earlier handler for `%T'\",\n+\t  warning (\"%H   by earlier handler for %qT\",\n \t\t   EXPR_LOCUS (master), type);\n \t  break;\n         }\n@@ -923,7 +924,7 @@ check_handlers (tree handlers)\n \tif (tsi_end_p (i))\n \t  break;\n \tif (TREE_TYPE (handler) == NULL_TREE)\n-\t  pedwarn (\"%H`...' handler must be the last handler for\"\n+\t  pedwarn (\"%H%<...%> handler must be the last handler for\"\n \t\t   \" its try block\", EXPR_LOCUS (handler));\n \telse\n \t  check_handlers_1 (handler, i);"}, {"sha": "6ab9d731ca5eea8aef115bc80d524d54f71ad0de", "filename": "gcc/cp/friend.c", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15a7ee2932a7cd29a99772a01c07182f1f1f2bf0/gcc%2Fcp%2Ffriend.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15a7ee2932a7cd29a99772a01c07182f1f1f2bf0/gcc%2Fcp%2Ffriend.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ffriend.c?ref=15a7ee2932a7cd29a99772a01c07182f1f1f2bf0", "patch": "@@ -149,7 +149,7 @@ add_friend (tree type, tree decl, bool complain)\n \t      if (decl == TREE_VALUE (friends))\n \t\t{\n \t\t  if (complain)\n-\t\t    warning (\"`%D' is already a friend of class `%T'\",\n+\t\t    warning (\"%qD is already a friend of class %qT\",\n \t\t\t     decl, type);\n \t\t  return;\n \t\t}\n@@ -201,7 +201,7 @@ make_friend_class (tree type, tree friend_type, bool complain)\n \n   if (! IS_AGGR_TYPE (friend_type))\n     {\n-      error (\"invalid type `%T' declared `friend'\", friend_type);\n+      error (\"invalid type %qT declared %<friend%>\", friend_type);\n       return;\n     }\n \n@@ -217,7 +217,7 @@ make_friend_class (tree type, tree friend_type, bool complain)\n \t  /* [temp.friend]\n \t     Friend declarations shall not declare partial\n \t     specializations.  */\n-\t  error (\"partial specialization `%T' declared `friend'\",\n+\t  error (\"partial specialization %qT declared %<friend%>\",\n \t\t friend_type);\n \t  return;\n \t}\n@@ -227,7 +227,7 @@ make_friend_class (tree type, tree friend_type, bool complain)\n   else if (same_type_p (type, friend_type))\n     {\n       if (complain)\n-\tpedwarn (\"class `%T' is implicitly friends with itself\",\n+\tpedwarn (\"class %qT is implicitly friends with itself\",\n \t\t type);\n       return;\n     }\n@@ -245,19 +245,19 @@ make_friend_class (tree type, tree friend_type, bool complain)\n   else if (TREE_CODE (friend_type) == TYPENAME_TYPE)\n     {\n       /* template <class T> friend typename S<T>::X; */\n-      error (\"typename type `%#T' declared `friend'\", friend_type);\n+      error (\"typename type %q#T declared %<friend%>\", friend_type);\n       return;\n     }\n   else if (TREE_CODE (friend_type) == TEMPLATE_TYPE_PARM)\n     {\n       /* template <class T> friend class T; */\n-      error (\"template parameter type `%T' declared `friend'\", friend_type);\n+      error (\"template parameter type %qT declared %<friend%>\", friend_type);\n       return;\n     }\n   else if (!CLASSTYPE_TEMPLATE_INFO (friend_type))\n     {\n       /* template <class T> friend class A; where A is not a template */\n-      error (\"`%#T' is not a template\", friend_type);\n+      error (\"%q#T is not a template\", friend_type);\n       return;\n     }\n \n@@ -276,8 +276,7 @@ make_friend_class (tree type, tree friend_type, bool complain)\n \t  if (friend_type == probe)\n \t    {\n \t      if (complain)\n-\t\twarning (\"`%D' is already a friend of `%T'\",\n-\t\t\t probe, type);\n+\t\twarning (\"%qD is already a friend of %qT\", probe, type);\n \t      break;\n \t    }\n \t}\n@@ -286,8 +285,7 @@ make_friend_class (tree type, tree friend_type, bool complain)\n \t  if (same_type_p (probe, friend_type))\n \t    {\n \t      if (complain)\n-\t\twarning (\"`%T' is already a friend of `%T'\",\n-\t\t\t probe, type);\n+\t\twarning (\"%qT is already a friend of %qT\", probe, type);\n \t      break;\n \t    }\n \t}\n@@ -411,7 +409,7 @@ do_friend (tree ctype, tree declarator, tree decl,\n \t    add_friend (current_class_type, decl, /*complain=*/true);\n \t}\n       else\n-\terror (\"member `%D' declared as friend before type `%T' defined\",\n+\terror (\"member %qD declared as friend before type %qT defined\",\n \t\t  decl, ctype);\n     }\n   /* A global friend.\n@@ -467,10 +465,14 @@ do_friend (tree ctype, tree declarator, tree decl,\n \t  if (warn)\n \t    {\n \t      static int explained;\n-\t      warning (\"friend declaration `%#D' declares a non-template function\", decl);\n+\t      warning (\"friend declaration %q#D declares a non-template \"\n+                       \"function\", decl);\n \t      if (! explained)\n \t\t{\n-\t\t  warning (\"(if this is not what you intended, make sure the function template has already been declared and add <> after the function name here) -Wno-non-template-friend disables this warning\");\n+\t\t  warning (\"(if this is not what you intended, make sure \"\n+                           \"the function template has already been declared \"\n+                           \"and add <> after the function name here) \"\n+                           \"-Wno-non-template-friend disables this warning\");\n \t\t  explained = 1;\n \t\t}\n \t    }"}, {"sha": "12886836d1b9c878ae84266be8b2e6009767f31f", "filename": "gcc/cp/init.c", "status": "modified", "additions": 27, "deletions": 28, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15a7ee2932a7cd29a99772a01c07182f1f1f2bf0/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15a7ee2932a7cd29a99772a01c07182f1f1f2bf0/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=15a7ee2932a7cd29a99772a01c07182f1f1f2bf0", "patch": "@@ -514,15 +514,15 @@ sort_mem_initializers (tree t, tree mem_inits)\n       if (warn_reorder && !subobject_init)\n \t{\n \t  if (TREE_CODE (TREE_PURPOSE (next_subobject)) == FIELD_DECL)\n-\t    cp_warning_at (\"`%D' will be initialized after\",\n+\t    cp_warning_at (\"%qD will be initialized after\",\n \t\t\t   TREE_PURPOSE (next_subobject));\n \t  else\n-\t    warning (\"base `%T' will be initialized after\",\n+\t    warning (\"base %qT will be initialized after\",\n \t\t     TREE_PURPOSE (next_subobject));\n \t  if (TREE_CODE (subobject) == FIELD_DECL)\n-\t    cp_warning_at (\"  `%#D'\", subobject);\n+\t    cp_warning_at (\"  %q#D\", subobject);\n \t  else\n-\t    warning (\"  base `%T'\", subobject);\n+\t    warning (\"  base %qT\", subobject);\n \t  warning (\"%J  when initialized here\", current_function_decl);\n \t}\n \n@@ -666,7 +666,7 @@ emit_mem_initializers (tree mem_inits)\n       if (extra_warnings && !arguments \n \t  && DECL_COPY_CONSTRUCTOR_P (current_function_decl)\n \t  && TYPE_NEEDS_CONSTRUCTING (BINFO_TYPE (subobject)))\n-\twarning (\"%Jbase class `%#T' should be explicitly initialized in the \"\n+\twarning (\"%Jbase class %q#T should be explicitly initialized in the \"\n \t\t \"copy constructor\",\n \t\t current_function_decl, BINFO_TYPE (subobject));\n \n@@ -890,26 +890,26 @@ member_init_ok_or_else (tree field, tree type, tree member_name)\n     return 0;\n   if (!field)\n     {\n-      error (\"class `%T' does not have any field named `%D'\", type,\n+      error (\"class %qT does not have any field named %qD\", type,\n \t     member_name);\n       return 0;\n     }\n   if (TREE_CODE (field) == VAR_DECL)\n     {\n-      error (\"`%#D' is a static data member; it can only be \"\n+      error (\"%q#D is a static data member; it can only be \"\n \t     \"initialized at its definition\",\n \t     field);\n       return 0;\n     }\n   if (TREE_CODE (field) != FIELD_DECL)\n     {\n-      error (\"`%#D' is not a non-static data member of `%T'\",\n+      error (\"%q#D is not a non-static data member of %qT\",\n \t     field, type);\n       return 0;\n     }\n   if (initializing_context (field) != type)\n     {\n-      error (\"class `%T' does not have any field named `%D'\", type,\n+      error (\"class %qT does not have any field named %qD\", type,\n \t\tmember_name);\n       return 0;\n     }\n@@ -942,15 +942,15 @@ expand_member_init (tree name)\n       switch (BINFO_N_BASE_BINFOS (TYPE_BINFO (current_class_type)))\n \t{\n \tcase 0:\n-\t  error (\"unnamed initializer for `%T', which has no base classes\",\n+\t  error (\"unnamed initializer for %qT, which has no base classes\",\n \t\t current_class_type);\n \t  return NULL_TREE;\n \tcase 1:\n \t  basetype = BINFO_TYPE\n \t    (BINFO_BASE_BINFO (TYPE_BINFO (current_class_type), 0));\n \t  break;\n \tdefault:\n-\t  error (\"unnamed initializer for `%T', which uses multiple inheritance\",\n+\t  error (\"unnamed initializer for %qT, which uses multiple inheritance\",\n \t\t current_class_type);\n \t  return NULL_TREE;\n       }\n@@ -996,18 +996,18 @@ expand_member_init (tree name)\n \t base class, the mem-initializer is ill-formed.  */\n       if (direct_binfo && virtual_binfo)\n \t{\n-\t  error (\"'%D' is both a direct base and an indirect virtual base\",\n+\t  error (\"%qD is both a direct base and an indirect virtual base\",\n \t\t basetype);\n \t  return NULL_TREE;\n \t}\n \n       if (!direct_binfo && !virtual_binfo)\n \t{\n \t  if (CLASSTYPE_VBASECLASSES (current_class_type))\n-\t    error (\"type `%D' is not a direct or virtual base of `%T'\",\n+\t    error (\"type %qD is not a direct or virtual base of %qT\",\n \t\t   name, current_class_type);\n \t  else\n-\t    error (\"type `%D' is not a direct base of `%T'\",\n+\t    error (\"type %qD is not a direct base of %qT\",\n \t\t   name, current_class_type);\n \t  return NULL_TREE;\n \t}\n@@ -1286,7 +1286,7 @@ is_aggr_type (tree type, int or_else)\n       && TREE_CODE (type) != BOUND_TEMPLATE_TEMPLATE_PARM)\n     {\n       if (or_else)\n-\terror (\"`%T' is not an aggregate type\", type);\n+\terror (\"%qT is not an aggregate type\", type);\n       return 0;\n     }\n   return 1;\n@@ -1378,16 +1378,15 @@ build_offset_ref (tree type, tree name, bool address_p)\n   if (TREE_CODE (name) == BIT_NOT_EXPR)\n     {\n       if (! check_dtor_name (type, name))\n-\terror (\"qualified type `%T' does not match destructor name `~%T'\",\n+\terror (\"qualified type %qT does not match destructor name %<~%T%>\",\n \t\t  type, TREE_OPERAND (name, 0));\n       name = dtor_identifier;\n     }\n \n   if (!COMPLETE_TYPE_P (complete_type (type))\n       && !TYPE_BEING_DEFINED (type))\n     {\n-      error (\"incomplete type `%T' does not have member `%D'\", type,\n-\t\tname);\n+      error (\"incomplete type %qT does not have member %qD\", type, name);\n       return error_mark_node;\n     }\n \n@@ -1406,7 +1405,7 @@ build_offset_ref (tree type, tree name, bool address_p)\n \n   if (!member)\n     {\n-      error (\"`%D' is not a member of type `%T'\", name, type);\n+      error (\"%qD is not a member of type %qT\", name, type);\n       return error_mark_node;\n     }\n \n@@ -1433,7 +1432,7 @@ build_offset_ref (tree type, tree name, bool address_p)\n \n   if (TREE_CODE (member) == FIELD_DECL && DECL_C_BIT_FIELD (member))\n     {\n-      error (\"invalid pointer to bit-field `%D'\", member);\n+      error (\"invalid pointer to bit-field %qD\", member);\n       return error_mark_node;\n     }\n \n@@ -1535,13 +1534,13 @@ build_offset_ref (tree type, tree name, bool address_p)\n \t      PTRMEM_OK_P (member) = 1;\n \t      return build_unary_op (ADDR_EXPR, member, 0);\n \t    }\n-\t  error (\"invalid use of non-static member function `%D'\", \n+\t  error (\"invalid use of non-static member function %qD\", \n \t\t TREE_OPERAND (member, 1));\n \t  return member;\n \t}\n       else if (TREE_CODE (member) == FIELD_DECL)\n \t{\n-\t  error (\"invalid use of non-static data member `%D'\", member);\n+\t  error (\"invalid use of non-static data member %qD\", member);\n \t  return error_mark_node;\n \t}\n       return member;\n@@ -1696,7 +1695,7 @@ build_java_class_ref (tree type)\n     {\n       jclass_node = IDENTIFIER_GLOBAL_VALUE (get_identifier (\"jclass\"));\n       if (jclass_node == NULL_TREE)\n-\tfatal_error (\"call to Java constructor, while `jclass' undefined\");\n+\tfatal_error (\"call to Java constructor, while %<jclass%> undefined\");\n \n       jclass_node = TREE_TYPE (jclass_node);\n     }\n@@ -1825,7 +1824,7 @@ build_new_1 (tree exp)\n \n   if (TREE_CODE (true_type) == VOID_TYPE)\n     {\n-      error (\"invalid type `void' for new\");\n+      error (\"invalid type %<void%> for new\");\n       return error_mark_node;\n     }\n \n@@ -1835,7 +1834,7 @@ build_new_1 (tree exp)\n   is_initialized = (TYPE_NEEDS_CONSTRUCTING (type) || init);\n   if (CP_TYPE_CONST_P (true_type) && !is_initialized)\n     {\n-      error (\"uninitialized const in `new' of `%#T'\", true_type);\n+      error (\"uninitialized const in %<new%> of %q#T\", true_type);\n       return error_mark_node;\n     }\n \n@@ -1868,12 +1867,12 @@ build_new_1 (tree exp)\n       if (!get_global_value_if_present (get_identifier (alloc_name), \n \t\t\t\t\t&alloc_decl))\n \t{\n-\t  error (\"call to Java constructor with `%s' undefined\", alloc_name);\n+\t  error (\"call to Java constructor with %qs undefined\", alloc_name);\n \t  return error_mark_node;\n \t}\n       else if (really_overloaded_fn (alloc_decl))\n \t{\n-\t  error (\"`%D' should never be overloaded\", alloc_decl);\n+\t  error (\"%qD should never be overloaded\", alloc_decl);\n \t  return error_mark_node;\n \t}\n       alloc_decl = OVL_CURRENT (alloc_decl);\n@@ -1908,7 +1907,7 @@ build_new_1 (tree exp)\n \t  fns = lookup_fnfields (true_type, fnname, /*protect=*/2);\n \t  if (TREE_CODE (fns) == TREE_LIST)\n \t    {\n-\t      error (\"request for member `%D' is ambiguous\", fnname);\n+\t      error (\"request for member %qD is ambiguous\", fnname);\n \t      print_candidates (fns);\n \t      return error_mark_node;\n \t    }"}]}