{"sha": "669f7a035a384894ac482e00c291d393a21ba2d0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjY5ZjdhMDM1YTM4NDg5NGFjNDgyZTAwYzI5MWQzOTNhMjFiYTJkMA==", "commit": {"author": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2001-07-11T19:35:49Z"}, "committer": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2001-07-11T19:35:49Z"}, "message": "run_doxygen: Don't keep output from previous run.\n\n2001-07-11  Phil Edwards  <pme@sources.redhat.com>\n\n\t* docs/doxygen/run_doxygen:  Don't keep output from previous run.\n\t* docs/doxygen/user.cfg.in:  Tweaks.\n\t* include/bits/c++config:  Documentation comments for Doxygen.\n\t* include/bits/char_traits.h:  Likewise.\n\t* include/bits/limits_generic.h:  Likewise.\n\t* include/bits/std_stdexcept.h:  Likewise.\n\t* include/bits/stl_pair.h:  Likewise.\n\t* libsupc++/exception:  Likewise.\n\t* libsupc++/new:  Likewise.\n\t* libsupc++/typeinfo:  Likewise.\n\t* libmath/Makefile.am:  Update and correct copyright.\n\nFrom-SVN: r43948", "tree": {"sha": "b6c312cb36e69c0b3262c4a293e9e8e6c03ab7ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b6c312cb36e69c0b3262c4a293e9e8e6c03ab7ce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/669f7a035a384894ac482e00c291d393a21ba2d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/669f7a035a384894ac482e00c291d393a21ba2d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/669f7a035a384894ac482e00c291d393a21ba2d0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/669f7a035a384894ac482e00c291d393a21ba2d0/comments", "author": null, "committer": null, "parents": [{"sha": "9acc24a583f1c0026226e8c00a420ec9da04fd56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9acc24a583f1c0026226e8c00a420ec9da04fd56", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9acc24a583f1c0026226e8c00a420ec9da04fd56"}], "stats": {"total": 216, "additions": 194, "deletions": 22}, "files": [{"sha": "15e0bc64372e456501f91793547ab3680b232d36", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/669f7a035a384894ac482e00c291d393a21ba2d0/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/669f7a035a384894ac482e00c291d393a21ba2d0/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=669f7a035a384894ac482e00c291d393a21ba2d0", "patch": "@@ -1,3 +1,17 @@\n+2001-07-11  Phil Edwards  <pme@sources.redhat.com>\n+\n+\t* docs/doxygen/run_doxygen:  Don't keep output from previous run.\n+\t* docs/doxygen/user.cfg.in:  Tweaks.\n+\t* include/bits/c++config:  Documentation comments for Doxygen.\n+\t* include/bits/char_traits.h:  Likewise.\n+\t* include/bits/limits_generic.h:  Likewise.\n+\t* include/bits/std_stdexcept.h:  Likewise.\n+\t* include/bits/stl_pair.h:  Likewise.\n+\t* libsupc++/exception:  Likewise.\n+\t* libsupc++/new:  Likewise.\n+\t* libsupc++/typeinfo:  Likewise.\n+\t* libmath/Makefile.am:  Update and correct copyright.\n+\n 2001-07-10  Gabriel Dos Reis  <gdr@merlin.codesourcery.com>\n \n \t* acinclude.m4: Don't AC_REPLACE_MATHFUNCS expf and atan2f."}, {"sha": "8af7be37c76c448daed9aa154471c287882a9c3d", "filename": "libstdc++-v3/docs/doxygen/run_doxygen", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/669f7a035a384894ac482e00c291d393a21ba2d0/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2Frun_doxygen", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/669f7a035a384894ac482e00c291d393a21ba2d0/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2Frun_doxygen", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2Frun_doxygen?ref=669f7a035a384894ac482e00c291d393a21ba2d0", "patch": "@@ -5,7 +5,7 @@\n # Synopsis:  run_doxygen --mode=[user|maint]  v3srcdir  v3builddir\n #\n # Originally hacked together by Phil Edwards <pme@sources.redhat.com>\n-# $Id: run_doxygen,v 1.4 2001/04/29 01:40:34 pme Exp $\n+# $Id: run_doxygen,v 1.5 2001/06/11 13:04:07 pme Exp $\n \n \n # We can check now that the version of doxygen is >= this variable.\n@@ -75,7 +75,7 @@ parse_options() {\n         blank=\n         Id=is\n         echo You expect this dinky script to track a version?  Okay, here\n-        echo it $Id: run_doxygen,v 1.4 2001/04/29 01:40:34 pme Exp $blank\n+        echo it $Id: run_doxygen,v 1.5 2001/06/11 13:04:07 pme Exp $blank\n         exit 0\n         ;;\n       *)\n@@ -115,7 +115,9 @@ case x\"$mode\" in\n       exit 1 ;;\n esac\n \n-test -d $outdir || (mkdir -p $outdir ; chmod u+w $outdir)\n+rm -rf $outdir\n+mkdir -p $outdir\n+chmod u+w $outdir\n (\n   set -e\n   cd $srcdir"}, {"sha": "97c0ca4fcc03714615118f9b38d3ad1ccc3ed2b1", "filename": "libstdc++-v3/docs/doxygen/user.cfg.in", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/669f7a035a384894ac482e00c291d393a21ba2d0/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2Fuser.cfg.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/669f7a035a384894ac482e00c291d393a21ba2d0/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2Fuser.cfg.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2Fuser.cfg.in?ref=669f7a035a384894ac482e00c291d393a21ba2d0", "patch": "@@ -197,7 +197,7 @@ SORT_MEMBER_DOCS       = YES\n # member in the group (if any) for the other members of the group. By default \n # all members of a group must be documented explicitly.\n \n-DISTRIBUTE_GROUP_DOC   = NO\n+DISTRIBUTE_GROUP_DOC   = YES\n \n # The TAB_SIZE tag can be used to set the number of spaces in a tab. \n # Doxygen uses this value to replace tabs by spaces in code fragments. \n@@ -305,7 +305,22 @@ WARN_LOGFILE           =\n INPUT                  = docs/doxygen \\\n                          libsupc++ \\\n                          include \\\n-                         src\n+                         src \\\n+libsupc++/exception libsupc++/new libsupc++/typeinfo include/ext/hash_map \\\n+include/ext/hash_set include/ext/rope include/ext/slist include/std/algorithm \\\n+include/std/bitset include/std/cassert include/std/cctype \\\n+include/std/cerrno include/std/cfloat include/std/ciso646 include/std/climits \\\n+include/std/clocale include/std/cmath include/std/complex include/std/csetjmp \\\n+include/std/csignal include/std/cstdarg include/std/cstddef \\\n+include/std/cstdio include/std/cstdlib include/std/cstring \\\n+include/std/ctime include/std/cwchar include/std/cwctype include/std/deque \\\n+include/std/fstream include/std/functional include/std/iomanip \\\n+include/std/ios include/std/iosfwd include/std/iostream include/std/istream \\\n+include/std/iterator include/std/limits include/std/list include/std/locale \\\n+include/std/map include/std/memory include/std/numeric include/std/ostream \\\n+include/std/queue include/std/set include/std/sstream include/std/stack \\\n+include/std/stdexcept include/std/streambuf include/std/string \\\n+include/std/utility include/std/valarray include/std/vector\n \n # If the value of the INPUT tag contains directories, you can use the \n # FILE_PATTERNS tag to specify one or more wildcard pattern (like *.cpp "}, {"sha": "abf3f8eb7af033600245054b0751e6d68dce3909", "filename": "libstdc++-v3/include/bits/c++config", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/669f7a035a384894ac482e00c291d393a21ba2d0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/669f7a035a384894ac482e00c291d393a21ba2d0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig?ref=669f7a035a384894ac482e00c291d393a21ba2d0", "patch": "@@ -109,4 +109,8 @@\n // should be cleaned up.\n # define __stl_assert(expr)\n \n+/** @namespace std\n+ *  @brief Everything defined by the ISO C++ Standard is within namespace std.\n+ */\n+\n // End of prewritten config; the discovered settings follow."}, {"sha": "a468bed90afd0ee0a968f10b15a63481f3d5837d", "filename": "libstdc++-v3/include/bits/char_traits.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/669f7a035a384894ac482e00c291d393a21ba2d0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fchar_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/669f7a035a384894ac482e00c291d393a21ba2d0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fchar_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fchar_traits.h?ref=669f7a035a384894ac482e00c291d393a21ba2d0", "patch": "@@ -41,9 +41,9 @@\n \n namespace std \n {\n-  // 21.1.2 Basis for explicit _Traits specialization \n-  // NB: That for any given actual character type this definition is\n-  // probably wrong.\n+  /// 21.1.2 Basis for explicit _Traits specialization \n+  /// NB: That for any given actual character type this definition is\n+  /// probably wrong.\n   template<class _CharT>\n     struct char_traits\n     {\n@@ -127,7 +127,7 @@ namespace std\n     };\n \n \n-  // 21.1.4  char_traits specializations\n+  /// 21.1.4  char_traits specializations\n   template<>\n     struct char_traits<char>\n     {"}, {"sha": "42cae71a770b3e8636c266707265ae1f1bce06c9", "filename": "libstdc++-v3/include/bits/limits_generic.h", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/669f7a035a384894ac482e00c291d393a21ba2d0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flimits_generic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/669f7a035a384894ac482e00c291d393a21ba2d0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flimits_generic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flimits_generic.h?ref=669f7a035a384894ac482e00c291d393a21ba2d0", "patch": "@@ -35,6 +35,11 @@\n // 18.2.1\n //\n \n+/** @file limits_generic.h\n+ *  ISO 14882:1998\n+ *  18.2.1\n+ */\n+\n #ifndef _CPP_NUMERIC_LIMITS\n #define _CPP_NUMERIC_LIMITS 1\n \n@@ -49,6 +54,7 @@\n \n namespace std {\n \n+    /// Rounding style determines the behavior of floating-point calculations.\n     enum float_round_style {\n         round_indeterminate       = -1,\n         round_toward_zero         = 0,\n@@ -57,12 +63,20 @@ namespace std {\n         round_toward_neg_infinity = 3\n     };\n \n+    /// This enum signals whether a type has denormalization.\n     enum float_denorm_style {\n         denorm_indeterminate = -1,\n         denorm_absent        = 0,\n         denorm_present       = 1\n     };\n \n+    /**\n+     *  [18.2.1]/1:  \"The numeric_limits component provides a C++ program\n+     *  with information about various properties of the implementation's\n+     *  representation of the fundamental types.\"  All of the standard\n+     *  fundamental types have specializations of this class template.\n+     *  @brief Properties of fundamental types on a per-platform basis.\n+     */\n     template<typename _T> struct numeric_limits {\n         static const bool is_specialized = false;\n "}, {"sha": "66bac5011be1da336b4616ec69e746efd0e3229f", "filename": "libstdc++-v3/include/bits/std_stdexcept.h", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/669f7a035a384894ac482e00c291d393a21ba2d0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_stdexcept.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/669f7a035a384894ac482e00c291d393a21ba2d0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_stdexcept.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_stdexcept.h?ref=669f7a035a384894ac482e00c291d393a21ba2d0", "patch": "@@ -31,6 +31,13 @@\n // ISO C++ 19.1  Exception classes\n //\n \n+/** @file std_stdexcept.h\n+ *  The Standard C++ library provides classes to be used to report certain\n+ *  errors (17.4.4.8) in C++ programs.  In the error model reflected in these\n+ *  classes, errors are divided into two broad categories: logic errors and\n+ *  runtime errors.\n+ */\n+\n #ifndef _CPP_STDEXCEPT\n #define _CPP_STDEXCEPT \t  1\n \n@@ -41,72 +48,98 @@\n \n namespace std \n {\n+  /** Logic errors represent problems in the internal logic of a program;\n+   *  in theory, these are preventable, and even detectable before the\n+   *  program runs (e.g., violations of class invariants).\n+   *  @brief One of two subclasses of exception.\n+   */\n   class logic_error : public exception \n   {\n     string _M_msg;\n \n   public:\n+    /** Takes a character string describing the error.  */\n     explicit \n     logic_error(const string&  __arg);\n \n     virtual \n     ~logic_error() throw();\n \n+    /** Returns a C-style character string describing the general cause of\n+     *  the current error (the same string passed to the ctor).  */\n     virtual const char* \n     what() const throw();\n   };\n \n+  /** Thrown by the library, or by you, to report domain errors (domain in\n+   *  the mathmatical sense).  */\n   class domain_error : public logic_error \n   {\n   public:\n     explicit domain_error(const string&  __arg);\n   };\n \n+  /** Thrown to report invalid arguments to functions.  */\n   class invalid_argument : public logic_error \n   {\n   public:\n     explicit invalid_argument(const string&  __arg);\n   };\n \n+  /** Thrown when an object is constructed that would exceed its maximum\n+   *  permitted size (e.g., a basic_string instance).  */\n   class length_error : public logic_error \n   {\n   public:\n     explicit length_error(const string&  __arg);\n   };\n \n+  /** This represents an argument whose value is not within the expected\n+   *  range (e.g., boundary checks in basic_string).  */\n   class out_of_range : public logic_error \n   {\n   public:\n     explicit out_of_range(const string&  __arg);\n   };\n \n+  /** Runtime errors represent problems outside the scope of a program;\n+   *  they cannot be easily predicted and can generally only be caught as\n+   *  the program executes.\n+   *  @brief One of two subclasses of exception.\n+   */\n   class runtime_error : public exception \n   {\n     string _M_msg;\n \n   public:\n+    /** Takes a character string describing the error.  */\n     explicit \n     runtime_error(const string&  __arg);\n \n     virtual \n     ~runtime_error() throw();\n \n+    /** Returns a C-style character string describing the general cause of\n+     *  the current error (the same string passed to the ctor).  */\n     virtual const char* \n     what() const throw();\n   };\n \n+  /** Thrown to indicate range errors in internal computations.  */\n   class range_error : public runtime_error \n   {\n   public:\n     explicit range_error(const string&  __arg);\n   };\n \n+  /** Thrown to indicate arithmetic overflow.  */\n   class overflow_error : public runtime_error \n   {\n   public:\n     explicit overflow_error(const string&  __arg);\n   };\n \n+  /** Thrown to indicate arithmetic underflow.  */\n   class underflow_error : public runtime_error \n   {\n   public:"}, {"sha": "b10f96545f4257c045188f6b7aed47379c681907", "filename": "libstdc++-v3/include/bits/stl_pair.h", "status": "modified", "additions": 27, "deletions": 6, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/669f7a035a384894ac482e00c291d393a21ba2d0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/669f7a035a384894ac482e00c291d393a21ba2d0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h?ref=669f7a035a384894ac482e00c291d393a21ba2d0", "patch": "@@ -53,8 +53,9 @@\n  * purpose.  It is provided \"as is\" without express or implied warranty.\n  */\n \n-/* NOTE: This is an internal header file, included by other STL headers.\n- *   You should not attempt to use it directly.\n+/** @file stl_pair.h\n+ *  This is an internal header file, included by other STL headers.  You\n+ *  should not attempt to use it directly.\n  */\n \n #ifndef __SGI_STL_INTERNAL_PAIR_H\n@@ -63,58 +64,78 @@\n namespace std\n {\n \n+/// pair holds two objects of arbitrary type.\n template <class _T1, class _T2>\n struct pair {\n-  typedef _T1 first_type;\n-  typedef _T2 second_type;\n+  typedef _T1 first_type;    ///<  @c first_type is the first bound type\n+  typedef _T2 second_type;   ///<  @c second_type is the second bound type\n \n-  _T1 first;\n-  _T2 second;\n+  _T1 first;                 ///< @c first is a copy of the first object\n+  _T2 second;                ///< @c second is a copy of the second object\n #ifdef _GLIBCPP_RESOLVE_LIB_DEFECTS\n //265.  std::pair::pair() effects overly restrictive\n+  /** The default constructor creates @c first and @c second using their\n+   *  respective default constructors.  */\n   pair() : first(), second() {}\n #else\n   pair() : first(_T1()), second(_T2()) {}\n #endif\n+  /** Two objects may be passed to a @c pair constructor to be copied.  */\n   pair(const _T1& __a, const _T2& __b) : first(__a), second(__b) {}\n \n+  /** There is also a templated copy ctor for the @c pair class itself.  */\n   template <class _U1, class _U2>\n   pair(const pair<_U1, _U2>& __p) : first(__p.first), second(__p.second) {}\n };\n \n+/// Two pairs of the same type are equal iff their members are equal.\n template <class _T1, class _T2>\n inline bool operator==(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)\n { \n   return __x.first == __y.first && __x.second == __y.second; \n }\n \n+/// ...put link to onlinedocs here...\n template <class _T1, class _T2>\n inline bool operator<(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)\n { \n   return __x.first < __y.first || \n          (!(__y.first < __x.first) && __x.second < __y.second); \n }\n \n+/// Uses @c operator== to find the result.\n template <class _T1, class _T2>\n inline bool operator!=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y) {\n   return !(__x == __y);\n }\n \n+/// Uses @c operator< to find the result.\n template <class _T1, class _T2>\n inline bool operator>(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y) {\n   return __y < __x;\n }\n \n+/// Uses @c operator< to find the result.\n template <class _T1, class _T2>\n inline bool operator<=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y) {\n   return !(__y < __x);\n }\n \n+/// Uses @c operator< to find the result.\n template <class _T1, class _T2>\n inline bool operator>=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y) {\n   return !(__x < __y);\n }\n \n+/**\n+ *  @brief A convenience wrapper for creating a pair from two objects.\n+ *  @param  x  The first object.\n+ *  @param  y  The second object.\n+ *  @return   A newly-constructed pair<> object of the appropriate type.\n+ *\n+ *  The standard requires that the objects be passed by reference-to-const,\n+ *  but LWG issue #181 says they should be passed by const value.\n+ */\n template <class _T1, class _T2>\n #ifdef _GLIBCPP_RESOLVE_LIB_DEFECTS\n //181.  make_pair() unintended behavior"}, {"sha": "951695a683009bd805ecba078ed01d24e7451d6e", "filename": "libstdc++-v3/libmath/Makefile.am", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/669f7a035a384894ac482e00c291d393a21ba2d0/libstdc%2B%2B-v3%2Flibmath%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/669f7a035a384894ac482e00c291d393a21ba2d0/libstdc%2B%2B-v3%2Flibmath%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2FMakefile.am?ref=669f7a035a384894ac482e00c291d393a21ba2d0", "patch": "@@ -1,6 +1,6 @@\n ## Makefile for the math subdirectory of the GNU C++ Standard library.\n ##\n-## Copyright (C) 1997, 1998, 1999, 2000 Cygnus Solutions\n+## Copyright (C) 1997, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n ##\n ## This file is part of the libstdc++ version 3 distribution.\n ## Process this file with automake to produce Makefile.in."}, {"sha": "a1daf8811cc435ba1793159e4062fda69ad1e62c", "filename": "libstdc++-v3/libsupc++/exception", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/669f7a035a384894ac482e00c291d393a21ba2d0/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/669f7a035a384894ac482e00c291d393a21ba2d0/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception?ref=669f7a035a384894ac482e00c291d393a21ba2d0", "patch": "@@ -28,37 +28,70 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n+/** @file exception\n+ *  This header defines several types and functions relating to the\n+ *  handling of exceptions in a C++ program.\n+ */\n+\n #ifndef __EXCEPTION__\n #define __EXCEPTION__\n \n extern \"C++\" {\n \n namespace std \n {\n+  /** This is the base class for all exceptions thrown by the standard\n+   *  library, and by certain language expressions.  You are free to derive\n+   *  your own %exception classes, or use a different hierarchy, or to\n+   *  throw non-class data (e.g., fundamental types).\n+   *  @brief Base class for all library exceptions.\n+   */\n   class exception \n   {\n   public:\n     exception() throw() { }\n     virtual ~exception() throw();\n+    /** Returns a C-style character string describing the general cause\n+     *  of the current error.  */\n     virtual const char* what() const throw();\n   };\n \n+  /** If an %exception is thrown which is not listed in a function's\n+   *  %exception specification, one of these may be thrown.  */\n   class bad_exception : public exception \n   {\n   public:\n     bad_exception() throw() { }\n     virtual ~bad_exception() throw();\n   };\n \n+  /// If you write a replacement %terminate handler, it must be of this type.\n   typedef void (*terminate_handler) ();\n+  /// If you write a replacement %unexpected handler, it must be of this type.\n   typedef void (*unexpected_handler) ();\n \n+  /// Takes a new handler function as an argument, returns the old function.\n   terminate_handler set_terminate(terminate_handler) throw();\n+  /** The runtime will call this function if %exception handling must be\n+   *  abandoned for any reason.  */\n   void terminate() __attribute__ ((__noreturn__));\n \n+  /// Takes a new handler function as an argument, returns the old function.\n   unexpected_handler set_unexpected(unexpected_handler) throw();\n+  /** The runtime will call this function if an %exception is thrown which\n+   *  violates the function's %exception specification.  */\n   void unexpected() __attribute__ ((__noreturn__));\n \n+  /** [18.6.4]/1:  \"Returns true after completing evaluation of a\n+   *  throw-expression until either completing initialization of the\n+   *  exception-declaration in the matching handler or entering @c unexpected()\n+   *  due to the throw; or after entering @c terminate() for any reason\n+   *  other than an explicit call to @c terminate().  [Note: This includes\n+   *  stack unwinding [15.2].  end note]\"\n+   *\n+   *  2:  \"When @c uncaught_exception() is true, throwing an %exception can\n+   *  result in a call of @c terminate() (15.5.1).\"\n+   */\n   bool uncaught_exception() throw();\n } // namespace std\n "}, {"sha": "0d1810c6207e79a239d14f4972a59b107eef8c63", "filename": "libstdc++-v3/libsupc++/new", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/669f7a035a384894ac482e00c291d393a21ba2d0/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/669f7a035a384894ac482e00c291d393a21ba2d0/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew?ref=669f7a035a384894ac482e00c291d393a21ba2d0", "patch": "@@ -28,6 +28,12 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n+/** @file new\n+ *  This header defines several functions to manage dynamic memory and\n+ *  handling memory allocation errors; see\n+ *  http://gcc.gnu.org/onlinedocs/libstdc++/18_support/howto.html#4 for more.\n+ */\n+\n #ifndef __NEW__\n #define __NEW__\n \n@@ -38,6 +44,8 @@ extern \"C++\" {\n \n namespace std \n {\n+  /** @c bad_alloc (or classes derived from it) is used to report allocation\n+   *  errors from the throwing forms of @c new.  */\n   class bad_alloc : public exception \n   {\n   public:\n@@ -47,11 +55,24 @@ namespace std\n \n   struct nothrow_t { };\n   extern const nothrow_t nothrow;\n+  /** If you write your own error handler to be called by @c new, it must\n+   *  be of this type.  */\n   typedef void (*new_handler)();\n+  /// Takes a replacement handler as the argument, returns the previous handler.\n   new_handler set_new_handler(new_handler);\n } // namespace std\n \n-// Replaceable signatures.\n+//@{\n+/** These are replaceable signatures:\n+ *  - normal single new and delete (no arguments, throw @c bad_alloc on error)\n+ *  - normal array new and delete (same)\n+ *  - @c nothrow single new and delete (take a @c nothrow argument, return\n+ *    @c NULL on error)\n+ *  - @c nothrow array new and delete (same)\n+ *\n+ *  Placement new and delete signatures (take a memory address argument,\n+ *  does nothing) may not be replaced by a user's program.\n+*/\n void *operator new(std::size_t) throw (std::bad_alloc);\n void *operator new[](std::size_t) throw (std::bad_alloc);\n void operator delete(void *) throw();\n@@ -64,6 +85,7 @@ void operator delete[](void *, const std::nothrow_t&) throw();\n // Default placement versions of operator new.\n inline void *operator new(std::size_t, void *place) throw() { return place; }\n inline void *operator new[](std::size_t, void *place) throw() { return place; }\n+//@}\n } // extern \"C++\"\n \n #endif"}, {"sha": "6cabf7508eb48495fd782bca2b12c213177fb695", "filename": "libstdc++-v3/libsupc++/typeinfo", "status": "modified", "additions": 19, "deletions": 5, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/669f7a035a384894ac482e00c291d393a21ba2d0/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftypeinfo", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/669f7a035a384894ac482e00c291d393a21ba2d0/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftypeinfo", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftypeinfo?ref=669f7a035a384894ac482e00c291d393a21ba2d0", "patch": "@@ -27,6 +27,10 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n+/** @file typeinfo\n+ *  This header provides RTTI support.\n+ */\n+\n #ifndef __TYPEINFO__\n #define __TYPEINFO__\n \n@@ -49,17 +53,20 @@ namespace __cxxabiv1\n \n namespace std \n {\n+  /** The @c type_info class describes type information generated by\n+   *  an implementation.\n+   *  @brief Used in RTTI.  */\n   class type_info \n   {\n   public:\n-    // Destructor. Being the first non-inline virtual function, this\n-    // controls in which translation unit the vtable is emitted. The\n-    // compiler makes use of that information to know where to emit\n-    // the runtime-mandated type_info structures in the new-abi.\n+    /** Destructor. Being the first non-inline virtual function, this\n+     *  controls in which translation unit the vtable is emitted. The\n+     *  compiler makes use of that information to know where to emit\n+     *  the runtime-mandated type_info structures in the new-abi.  */\n     virtual ~type_info();\n \n   private:\n-    // Assigning type_info is not supported.  made private.\n+    /// Assigning type_info is not supported.  Made private.\n     type_info& operator=(const type_info&);\n     type_info(const type_info&);\n     \n@@ -71,6 +78,8 @@ namespace std\n     \n   public:\n     // the public interface\n+    /** Returns an \\e implementation-defined byte string; this is not\n+     *  portable between compilers!  */\n     const char* name() const\n     { return __name; }\n \n@@ -81,6 +90,8 @@ namespace std\n     // type. Uniqueness must use the _name value, not object address.\n     bool operator==(const type_info& __arg) const;\n #else\n+    /** Returns true if @c *this preceeds @c __arg in the implementation's\n+     *  collation order.  */\n     // In new abi we can rely on type_info's NTBS being unique,\n     // and therefore address comparisons are sufficient.\n     bool before(const type_info& __arg) const\n@@ -112,13 +123,16 @@ namespace std\n \t\t\t     void **__obj_ptr) const;\n   };\n \n+  /** If you attempt an invalid @c dynamic_cast expression, an instance of\n+   *  this class (or something derived from this class) is thrown.  */\n   class bad_cast : public exception \n   {\n   public:\n     bad_cast() throw() { }\n     virtual ~bad_cast() throw();\n   };\n   \n+  /** If you use a NULL pointer in a @c typeid expression, this is thrown.  */\n   class bad_typeid : public exception \n   {\n   public:"}]}