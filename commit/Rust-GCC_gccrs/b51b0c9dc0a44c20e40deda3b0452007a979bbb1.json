{"sha": "b51b0c9dc0a44c20e40deda3b0452007a979bbb1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjUxYjBjOWRjMGE0NGMyMGU0MGRlZGEzYjA0NTIwMDdhOTc5YmJiMQ==", "commit": {"author": {"name": "Kelvin Nilsen", "email": "kelvin@gcc.gnu.org", "date": "2018-03-22T15:42:39Z"}, "committer": {"name": "Kelvin Nilsen", "email": "kelvin@gcc.gnu.org", "date": "2018-03-22T15:42:39Z"}, "message": "re PR target/84760 (Finish implementation of __builtin_altivec_lvx_v1ti)\n\ngcc/ChangeLog:\n\n2018-03-22  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n\n\tPR target/84760\n\t* doc/extend.texi: Add four new prototypes for vec_ld.\n\t* config/rs6000/rs6000-builtin.def (LVX_V1TI): Reorder symbol\n\tdefinitions for more logical presentation.\n\t* config/rs6000/rs6000-c.c: (altivec_overloaded_builtins): Add\n\tentries for V1TI variants of __builtin_altivec_ld builtin.\n\t* config/rs6000/rs6000.c: (altivec_expand_lv_builtin): Add test and\n\thandling of V1TI variant of LVX icode pattern.\n\t(altivec_expand_builtin): Add case for ALTIVEC_BUILTIN_LVX_V1TI.\n\t(rs6000_gimple_fold_builtin): Likewise.\n\t(altivec_init_builtins): Add code to define\n\t__builtin_altivec_lvx_v1ti function.\n\ngcc/testsuite/ChangeLog:\n\n2018-03-22  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n\n\tPR target/84760\n\t* gcc.target/powerpc/altivec-ld-1.c: New test.\n\nFrom-SVN: r258774", "tree": {"sha": "96df36a041edc9e872f6fe0ede541e7e4b24aabd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/96df36a041edc9e872f6fe0ede541e7e4b24aabd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b51b0c9dc0a44c20e40deda3b0452007a979bbb1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b51b0c9dc0a44c20e40deda3b0452007a979bbb1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b51b0c9dc0a44c20e40deda3b0452007a979bbb1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b51b0c9dc0a44c20e40deda3b0452007a979bbb1/comments", "author": null, "committer": null, "parents": [{"sha": "7c69a7d9bdabb4d0200718edfff54a139e488b7f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c69a7d9bdabb4d0200718edfff54a139e488b7f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c69a7d9bdabb4d0200718edfff54a139e488b7f"}], "stats": {"total": 115, "additions": 113, "deletions": 2}, "files": [{"sha": "01f109a6f5dc845b95bf75723649d5f4f65151be", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b51b0c9dc0a44c20e40deda3b0452007a979bbb1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b51b0c9dc0a44c20e40deda3b0452007a979bbb1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b51b0c9dc0a44c20e40deda3b0452007a979bbb1", "patch": "@@ -1,3 +1,18 @@\n+2018-03-22  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n+\n+\tPR target/84760\n+\t* doc/extend.texi: Add four new prototypes for vec_ld.\n+\t* config/rs6000/rs6000-builtin.def (LVX_V1TI): Reorder symbol\n+\tdefinitions for more logical presentation.\n+\t* config/rs6000/rs6000-c.c: (altivec_overloaded_builtins): Add\n+\tentries for V1TI variants of __builtin_altivec_ld builtin.\n+\t* config/rs6000/rs6000.c: (altivec_expand_lv_builtin): Add test and\n+\thandling of V1TI variant of LVX icode pattern.\n+\t(altivec_expand_builtin): Add case for ALTIVEC_BUILTIN_LVX_V1TI.\n+\t(rs6000_gimple_fold_builtin): Likewise.\n+\t(altivec_init_builtins): Add code to define\n+\t__builtin_altivec_lvx_v1ti function.\n+\n 2018-03-22  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR inline-asm/84941"}, {"sha": "4bc52cc25d90c5b2f8865b4783e475b47e694cb2", "filename": "gcc/config/rs6000/rs6000-builtin.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b51b0c9dc0a44c20e40deda3b0452007a979bbb1/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b51b0c9dc0a44c20e40deda3b0452007a979bbb1/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def?ref=b51b0c9dc0a44c20e40deda3b0452007a979bbb1", "patch": "@@ -1241,8 +1241,8 @@ BU_ALTIVEC_X (LVXL_V4SI,\t\"lvxl_v4si\",\t    MEM)\n BU_ALTIVEC_X (LVXL_V8HI,\t\"lvxl_v8hi\",\t    MEM)\n BU_ALTIVEC_X (LVXL_V16QI,\t\"lvxl_v16qi\",\t    MEM)\n BU_ALTIVEC_X (LVX,\t\t\"lvx\",\t\t    MEM)\n-BU_ALTIVEC_X (LVX_V2DF,\t\t\"lvx_v2df\",\t    MEM)\n BU_ALTIVEC_X (LVX_V1TI,\t\t\"lvx_v1ti\",\t    MEM)\n+BU_ALTIVEC_X (LVX_V2DF,\t\t\"lvx_v2df\",\t    MEM)\n BU_ALTIVEC_X (LVX_V2DI,\t\t\"lvx_v2di\",\t    MEM)\n BU_ALTIVEC_X (LVX_V4SF,\t\t\"lvx_v4sf\",\t    MEM)\n BU_ALTIVEC_X (LVX_V4SI,\t\t\"lvx_v4si\",\t    MEM)"}, {"sha": "ff6d05f93c07917e5daf51812669ab76258244db", "filename": "gcc/config/rs6000/rs6000-c.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b51b0c9dc0a44c20e40deda3b0452007a979bbb1/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b51b0c9dc0a44c20e40deda3b0452007a979bbb1/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-c.c?ref=b51b0c9dc0a44c20e40deda3b0452007a979bbb1", "patch": "@@ -1562,6 +1562,15 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n   { VSX_BUILTIN_VEC_FLOATO, VSX_BUILTIN_UNS_FLOATO_V2DI,\n     RS6000_BTI_V4SF, RS6000_BTI_unsigned_V2DI, 0, 0 },\n \n+  { ALTIVEC_BUILTIN_VEC_LD, ALTIVEC_BUILTIN_LVX_V1TI,\n+    RS6000_BTI_V1TI, RS6000_BTI_INTSI, ~RS6000_BTI_V1TI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_LD, ALTIVEC_BUILTIN_LVX_V1TI,\n+    RS6000_BTI_unsigned_V1TI, RS6000_BTI_INTSI, ~RS6000_BTI_unsigned_V1TI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_LD, ALTIVEC_BUILTIN_LVX_V1TI,\n+    RS6000_BTI_V1TI, RS6000_BTI_INTSI, ~RS6000_BTI_INTTI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_LD, ALTIVEC_BUILTIN_LVX_V1TI,\n+    RS6000_BTI_unsigned_V1TI, RS6000_BTI_INTSI, ~RS6000_BTI_UINTTI, 0 },\n+\n   { ALTIVEC_BUILTIN_VEC_LD, ALTIVEC_BUILTIN_LVX_V2DF,\n     RS6000_BTI_V2DF, RS6000_BTI_INTSI, ~RS6000_BTI_V2DF, 0 },\n   { ALTIVEC_BUILTIN_VEC_LD, ALTIVEC_BUILTIN_LVX_V2DI,"}, {"sha": "f736ab26f1f76e519770e59e52f2832326aa141d", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b51b0c9dc0a44c20e40deda3b0452007a979bbb1/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b51b0c9dc0a44c20e40deda3b0452007a979bbb1/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=b51b0c9dc0a44c20e40deda3b0452007a979bbb1", "patch": "@@ -14451,7 +14451,8 @@ altivec_expand_lv_builtin (enum insn_code icode, tree exp, rtx target, bool blk)\n   /* For LVX, express the RTL accurately by ANDing the address with -16.\n      LVXL and LVE*X expand to use UNSPECs to hide their special behavior,\n      so the raw address is fine.  */\n-  if (icode == CODE_FOR_altivec_lvx_v2df\n+  if (icode == CODE_FOR_altivec_lvx_v1ti\n+      || icode == CODE_FOR_altivec_lvx_v2df\n       || icode == CODE_FOR_altivec_lvx_v2di\n       || icode == CODE_FOR_altivec_lvx_v4sf\n       || icode == CODE_FOR_altivec_lvx_v4si\n@@ -15805,6 +15806,9 @@ altivec_expand_builtin (tree exp, rtx target, bool *expandedp)\n     case ALTIVEC_BUILTIN_LVXL_V16QI:\n       return altivec_expand_lv_builtin (CODE_FOR_altivec_lvxl_v16qi,\n \t\t\t\t\texp, target, false);\n+    case ALTIVEC_BUILTIN_LVX_V1TI:\n+      return altivec_expand_lv_builtin (CODE_FOR_altivec_lvx_v1ti,\n+\t\t\t\t\texp, target, false);\n     case ALTIVEC_BUILTIN_LVX_V2DF:\n       return altivec_expand_lv_builtin (CODE_FOR_altivec_lvx_v2df,\n \t\t\t\t\texp, target, false);\n@@ -16542,6 +16546,7 @@ rs6000_gimple_fold_builtin (gimple_stmt_iterator *gsi)\n     case ALTIVEC_BUILTIN_LVX_V4SF:\n     case ALTIVEC_BUILTIN_LVX_V2DI:\n     case ALTIVEC_BUILTIN_LVX_V2DF:\n+    case ALTIVEC_BUILTIN_LVX_V1TI:\n       {\n \targ0 = gimple_call_arg (stmt, 0);  // offset\n \targ1 = gimple_call_arg (stmt, 1);  // address\n@@ -17443,6 +17448,10 @@ altivec_init_builtins (void)\n     = build_function_type_list (V2DI_type_node,\n \t\t\t\tlong_integer_type_node, pcvoid_type_node,\n \t\t\t\tNULL_TREE);\n+  tree v1ti_ftype_long_pcvoid\n+    = build_function_type_list (V1TI_type_node,\n+\t\t\t\tlong_integer_type_node, pcvoid_type_node,\n+\t\t\t\tNULL_TREE);\n \n   tree void_ftype_opaque_long_pvoid\n     = build_function_type_list (void_type_node,\n@@ -17538,6 +17547,8 @@ altivec_init_builtins (void)\n   def_builtin (\"__builtin_altivec_lvxl_v16qi\", v16qi_ftype_long_pcvoid,\n \t       ALTIVEC_BUILTIN_LVXL_V16QI);\n   def_builtin (\"__builtin_altivec_lvx\", v4si_ftype_long_pcvoid, ALTIVEC_BUILTIN_LVX);\n+  def_builtin (\"__builtin_altivec_lvx_v1ti\", v1ti_ftype_long_pcvoid,\n+\t       ALTIVEC_BUILTIN_LVX_V1TI);\n   def_builtin (\"__builtin_altivec_lvx_v2df\", v2df_ftype_long_pcvoid,\n \t       ALTIVEC_BUILTIN_LVX_V2DF);\n   def_builtin (\"__builtin_altivec_lvx_v2di\", v2di_ftype_long_pcvoid,"}, {"sha": "93a0ebc97f123ebfaca6e2ec793045f840190758", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b51b0c9dc0a44c20e40deda3b0452007a979bbb1/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b51b0c9dc0a44c20e40deda3b0452007a979bbb1/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=b51b0c9dc0a44c20e40deda3b0452007a979bbb1", "patch": "@@ -18397,6 +18397,10 @@ vector double vec_div (vector double, vector double);\n vector long vec_div (vector long, vector long);\n vector unsigned long vec_div (vector unsigned long, vector unsigned long);\n vector double vec_floor (vector double);\n+vector __int128 vec_ld (int, const vector __int128 *);\n+vector unsigned __int128 vec_ld (int, const vector unsigned __int128 *);\n+vector __int128 vec_ld (int, const __int128 *);\n+vector unsigned __int128 vec_ld (int, const unsigned __int128 *);\n vector double vec_ld (int, const vector double *);\n vector double vec_ld (int, const double *);\n vector double vec_ldl (int, const vector double *);"}, {"sha": "737afb1f99646845ec217eed3a526dd90eeb5b2c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b51b0c9dc0a44c20e40deda3b0452007a979bbb1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b51b0c9dc0a44c20e40deda3b0452007a979bbb1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b51b0c9dc0a44c20e40deda3b0452007a979bbb1", "patch": "@@ -1,3 +1,8 @@\n+2018-03-22  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n+\n+\tPR target/84760\n+\t* gcc.target/powerpc/altivec-ld-1.c: New test.\n+\n 2018-03-22  Bin Cheng  <bin.cheng@arm.com>\n \n \t* gcc.dg/graphite/pr83126.c: Require pthread for the test."}, {"sha": "d70f90cedcdc56a2408090d4c70a04c796ea904b", "filename": "gcc/testsuite/gcc.target/powerpc/altivec-ld-1.c", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b51b0c9dc0a44c20e40deda3b0452007a979bbb1/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-ld-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b51b0c9dc0a44c20e40deda3b0452007a979bbb1/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-ld-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-ld-1.c?ref=b51b0c9dc0a44c20e40deda3b0452007a979bbb1", "patch": "@@ -0,0 +1,67 @@\n+/* { dg-do run { target powerpc*-*-* } } */\n+/* { dg-require-effective-target vmx_hw } */\n+/* { dg-require-effective-target int128 } */\n+/* { dg-options \"-maltivec -O0 -Wall -Wno-deprecated\" } */\n+\n+#include <altivec.h>\n+#include <stdlib.h>\n+\n+static __vector __int128 v;\n+static __vector __int128 *pv;\n+\n+static __vector unsigned __int128 uv;\n+static __vector unsigned __int128 *puv;\n+\n+static __int128 i128;\n+static __int128 *pi128;\n+\n+static unsigned __int128 u128;\n+static unsigned __int128 *pu128;\n+\n+\n+void\n+doInitialization ()\n+{\n+  v[0] = -1;\n+  pv = &v;\n+\n+  uv[0] = 0xcafebabe;\n+  puv = &uv;\n+\n+  i128 = 0xfabeabe;\n+  pi128 = &i128;\n+\n+  u128 = 0xabefabe;\n+  pu128 = &u128;\n+}\n+\n+int\n+main (int argc, char *argv[])\n+{\n+  __vector __int128 loaded_v;\n+  __vector unsigned __int128 loaded_uv;\n+\n+  /* Usage:\n+   *  <Type> result = vec_ld (int index, __vector <Type> v)\n+   * is equivalent to:\n+   *  result = v [index];\n+   */\n+  doInitialization ();\n+  loaded_v = vec_ld (0, pv);\n+  if (loaded_v[0] != -1)\n+    abort ();\n+\n+  loaded_uv = vec_ld (0, puv);\n+  if (loaded_uv[0] != 0xcafebabe)\n+    abort ();\n+\n+  loaded_v = vec_ld (0, pi128);\n+  if (loaded_v[0] != 0xfabeabe)\n+    abort ();\n+\n+  loaded_uv = vec_ld (0, pu128);\n+  if (loaded_uv[0] != 0xabefabe)\n+    abort ();\n+\n+  return 0;\n+}"}]}