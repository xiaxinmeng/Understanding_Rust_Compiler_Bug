{"sha": "db58fd8954f5dfd868dbed110f2c8a04bb4b0753", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGI1OGZkODk1NGY1ZGZkODY4ZGJlZDExMGYyYzhhMDRiYjRiMDc1Mw==", "commit": {"author": {"name": "Jiong Wang", "email": "jiong.wang@arm.com", "date": "2017-01-20T00:03:20Z"}, "committer": {"name": "Jiong Wang", "email": "jiwang@gcc.gnu.org", "date": "2017-01-20T00:03:20Z"}, "message": "[AArch64][1/4] Support Return address protection on AArch64\n\ngcc/\n\t* config/aarch64/aarch64-opts.h (aarch64_function_type): New enum.\n\t* config/aarch64/aarch64-protos.h\n\t(aarch64_return_address_signing_enabled): New declaration.\n\t* config/aarch64/aarch64.c (aarch64_return_address_signing_enabled):\n\tNew function.\n\t(aarch64_expand_prologue): Sign return address before it's pushed onto\n\tstack.\n\t(aarch64_expand_epilogue): Authenticate return address fetched from\n\tstack.\n\t(aarch64_override_options): Sanity check for ILP32 and ISA level.\n\t(aarch64_attributes): New function attributes for \"sign-return-address\".\n\t* config/aarch64/aarch64.md (UNSPEC_AUTI1716, UNSPEC_AUTISP,\n\tUNSPEC_PACI1716, UNSPEC_PACISP, UNSPEC_XPACLRI): New unspecs.\n\t(\"*do_return\"): Generate combined instructions according to key index.\n\t(\"<pauth_mnem_prefix>sp\", \"<pauth_mnem_prefix1716\", \"xpaclri\"): New.\n\t* config/aarch64/iterators.md (PAUTH_LR_SP, PAUTH_17_16): New integer\n\titerators.\n\t(pauth_mnem_prefix, pauth_hint_num_a): New integer attributes.\n\t* config/aarch64/aarch64.opt (msign-return-address=): New.\n\t* doc/extend.texi (AArch64 Function Attributes): Documents\n\t\"sign-return-address=\".\n\t* doc/invoke.texi (AArch64 Options): Documents \"-msign-return-address=\".\n\ngcc/testsuite/\n\t* gcc.target/aarch64/return_address_sign_1.c: New testcase for no\n\tcombined instructions.\n\t* gcc.target/aarch64/return_address_sign_2.c: New testcase for combined\n\tinstructions.\n\t* gcc.target/aarch64/return_address_sign_3.c: New testcase for disable\n\tof pointer authentication.\n\nFrom-SVN: r244666", "tree": {"sha": "37f06bdc0b1b1122a695d6a56a818ba288394b1f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/37f06bdc0b1b1122a695d6a56a818ba288394b1f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/db58fd8954f5dfd868dbed110f2c8a04bb4b0753", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db58fd8954f5dfd868dbed110f2c8a04bb4b0753", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db58fd8954f5dfd868dbed110f2c8a04bb4b0753", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db58fd8954f5dfd868dbed110f2c8a04bb4b0753/comments", "author": null, "committer": null, "parents": [{"sha": "c9038c70bde89e7023d21fe8752b9d6f0b0e3779", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9038c70bde89e7023d21fe8752b9d6f0b0e3779", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9038c70bde89e7023d21fe8752b9d6f0b0e3779"}], "stats": {"total": 272, "additions": 271, "deletions": 1}, "files": [{"sha": "1f959bb8899f9fa9af46d6a879f917d1d6497284", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db58fd8954f5dfd868dbed110f2c8a04bb4b0753/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db58fd8954f5dfd868dbed110f2c8a04bb4b0753/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=db58fd8954f5dfd868dbed110f2c8a04bb4b0753", "patch": "@@ -1,3 +1,28 @@\n+2017-01-19  Jiong Wang  <jiong.wang@arm.com>\n+\n+\t* config/aarch64/aarch64-opts.h (aarch64_function_type): New enum.\n+\t* config/aarch64/aarch64-protos.h\n+\t(aarch64_return_address_signing_enabled): New declaration.\n+\t* config/aarch64/aarch64.c (aarch64_return_address_signing_enabled):\n+\tNew function.\n+\t(aarch64_expand_prologue): Sign return address before it's pushed onto\n+\tstack.\n+\t(aarch64_expand_epilogue): Authenticate return address fetched from\n+\tstack.\n+\t(aarch64_override_options): Sanity check for ILP32 and ISA level.\n+\t(aarch64_attributes): New function attributes for \"sign-return-address\".\n+\t* config/aarch64/aarch64.md (UNSPEC_AUTI1716, UNSPEC_AUTISP,\n+\tUNSPEC_PACI1716, UNSPEC_PACISP, UNSPEC_XPACLRI): New unspecs.\n+\t(\"*do_return\"): Generate combined instructions according to key index.\n+\t(\"<pauth_mnem_prefix>sp\", \"<pauth_mnem_prefix1716\", \"xpaclri\"): New.\n+\t* config/aarch64/iterators.md (PAUTH_LR_SP, PAUTH_17_16): New integer\n+\titerators.\n+\t(pauth_mnem_prefix, pauth_hint_num_a): New integer attributes.\n+\t* config/aarch64/aarch64.opt (msign-return-address=): New.\n+\t* doc/extend.texi (AArch64 Function Attributes): Documents\n+\t\"sign-return-address=\".\n+\t* doc/invoke.texi (AArch64 Options): Documents \"-msign-return-address=\".\n+\n 2017-01-19  Matthew Fortune  <matthew.fortune@imgtec.com>\n \n \t* doc/invoke.texi: Add missing -mlxc1-sxc1 options to"}, {"sha": "ba5d052e9b694289574a68f156ca68b66ad6e2ee", "filename": "gcc/config/aarch64/aarch64-opts.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db58fd8954f5dfd868dbed110f2c8a04bb4b0753/gcc%2Fconfig%2Faarch64%2Faarch64-opts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db58fd8954f5dfd868dbed110f2c8a04bb4b0753/gcc%2Fconfig%2Faarch64%2Faarch64-opts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-opts.h?ref=db58fd8954f5dfd868dbed110f2c8a04bb4b0753", "patch": "@@ -71,4 +71,14 @@ enum aarch64_code_model {\n   AARCH64_CMODEL_LARGE\n };\n \n+/* Function types -msign-return-address should sign.  */\n+enum aarch64_function_type {\n+  /* Don't sign any function.  */\n+  AARCH64_FUNCTION_NONE,\n+  /* Non-leaf functions.  */\n+  AARCH64_FUNCTION_NON_LEAF,\n+  /* All functions.  */\n+  AARCH64_FUNCTION_ALL\n+};\n+\n #endif"}, {"sha": "f55d4ba71baaa7f8bcec6e92cb9afd7768ded70b", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db58fd8954f5dfd868dbed110f2c8a04bb4b0753/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db58fd8954f5dfd868dbed110f2c8a04bb4b0753/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=db58fd8954f5dfd868dbed110f2c8a04bb4b0753", "patch": "@@ -386,6 +386,7 @@ void aarch64_emit_call_insn (rtx);\n void aarch64_register_pragmas (void);\n void aarch64_relayout_simd_types (void);\n void aarch64_reset_previous_fndecl (void);\n+bool aarch64_return_address_signing_enabled (void);\n void aarch64_save_restore_target_globals (tree);\n \n /* Initialize builtins for SIMD intrinsics.  */"}, {"sha": "62baf5849949dcbc45313a360966f789a0d03b67", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db58fd8954f5dfd868dbed110f2c8a04bb4b0753/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db58fd8954f5dfd868dbed110f2c8a04bb4b0753/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=db58fd8954f5dfd868dbed110f2c8a04bb4b0753", "patch": "@@ -3123,6 +3123,22 @@ aarch64_gen_load_pair (machine_mode mode, rtx reg1, rtx mem1, rtx reg2,\n     }\n }\n \n+/* Return TRUE if return address signing should be enabled for the current\n+   function, otherwise return FALSE.  */\n+\n+bool\n+aarch64_return_address_signing_enabled (void)\n+{\n+  /* This function should only be called after frame laid out.   */\n+  gcc_assert (cfun->machine->frame.laid_out);\n+\n+  /* If signing scope is AARCH64_FUNCTION_NON_LEAF, we only sign a leaf function\n+     if it's LR is pushed onto stack.  */\n+  return (aarch64_ra_sign_scope == AARCH64_FUNCTION_ALL\n+\t  || (aarch64_ra_sign_scope == AARCH64_FUNCTION_NON_LEAF\n+\t      && cfun->machine->frame.reg_offset[LR_REGNUM] >= 0));\n+}\n+\n /* Emit code to save the callee-saved registers from register number START\n    to LIMIT to the stack at the location starting at offset START_OFFSET,\n    skipping any write-back candidates if SKIP_WB is true.  */\n@@ -3541,6 +3557,10 @@ aarch64_expand_prologue (void)\n   unsigned reg2 = cfun->machine->frame.wb_candidate2;\n   rtx_insn *insn;\n \n+  /* Sign return address for functions.  */\n+  if (aarch64_return_address_signing_enabled ())\n+    emit_insn (gen_pacisp ());\n+\n   if (flag_stack_usage_info)\n     current_function_static_stack_size = frame_size;\n \n@@ -3677,6 +3697,25 @@ aarch64_expand_epilogue (bool for_sibcall)\n       RTX_FRAME_RELATED_P (insn) = 1;\n     }\n \n+  /* We prefer to emit the combined return/authenticate instruction RETAA,\n+     however there are three cases in which we must instead emit an explicit\n+     authentication instruction.\n+\n+\t1) Sibcalls don't return in a normal way, so if we're about to call one\n+\t   we must authenticate.\n+\n+\t2) The RETAA instruction is not available before ARMv8.3-A, so if we are\n+\t   generating code for !TARGET_ARMV8_3 we can't use it and must\n+\t   explicitly authenticate.\n+\n+\t3) On an eh_return path we make extra stack adjustments to update the\n+\t   canonical frame address to be the exception handler's CFA.  We want\n+\t   to authenticate using the CFA of the function which calls eh_return.\n+    */\n+  if (aarch64_return_address_signing_enabled ()\n+      && (for_sibcall || !TARGET_ARMV8_3 || crtl->calls_eh_return))\n+    emit_insn (gen_autisp ());\n+\n   /* Stack adjustment for exception handler.  */\n   if (crtl->calls_eh_return)\n     {\n@@ -8889,6 +8928,9 @@ aarch64_override_options (void)\n     error (\"Assembler does not support -mabi=ilp32\");\n #endif\n \n+  if (aarch64_ra_sign_scope != AARCH64_FUNCTION_NONE && TARGET_ILP32)\n+    sorry (\"Return address signing is only supported for -mabi=lp64\");\n+\n   /* Make sure we properly set up the explicit options.  */\n   if ((aarch64_cpu_string && valid_cpu)\n        || (aarch64_tune_string && valid_tune))\n@@ -9272,6 +9314,8 @@ static const struct aarch64_attribute_info aarch64_attributes[] =\n   { \"cpu\", aarch64_attr_custom, false, aarch64_handle_attr_cpu, OPT_mcpu_ },\n   { \"tune\", aarch64_attr_custom, false, aarch64_handle_attr_tune,\n      OPT_mtune_ },\n+  { \"sign-return-address\", aarch64_attr_enum, false, NULL,\n+     OPT_msign_return_address_ },\n   { NULL, aarch64_attr_custom, false, NULL, OPT____ }\n };\n "}, {"sha": "a693a3b30135542f5b2b298aaca97bc71ecf3548", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 46, "deletions": 1, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db58fd8954f5dfd868dbed110f2c8a04bb4b0753/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db58fd8954f5dfd868dbed110f2c8a04bb4b0753/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=db58fd8954f5dfd868dbed110f2c8a04bb4b0753", "patch": "@@ -67,6 +67,8 @@\n )\n \n (define_c_enum \"unspec\" [\n+    UNSPEC_AUTI1716\n+    UNSPEC_AUTISP\n     UNSPEC_CASESI\n     UNSPEC_CRC32B\n     UNSPEC_CRC32CB\n@@ -106,6 +108,8 @@\n     UNSPEC_LD4_LANE\n     UNSPEC_MB\n     UNSPEC_NOP\n+    UNSPEC_PACI1716\n+    UNSPEC_PACISP\n     UNSPEC_PRLG_STK\n     UNSPEC_RBIT\n     UNSPEC_SCVTF\n@@ -135,6 +139,7 @@\n     UNSPEC_RSQRTE\n     UNSPEC_RSQRTS\n     UNSPEC_NZCV\n+    UNSPEC_XPACLRI\n ])\n \n (define_c_enum \"unspecv\" [\n@@ -575,7 +580,14 @@\n (define_insn \"*do_return\"\n   [(return)]\n   \"\"\n-  \"ret\"\n+  {\n+    if (aarch64_return_address_signing_enabled ()\n+\t&& TARGET_ARMV8_3\n+\t&& !crtl->calls_eh_return)\n+      return \"retaa\";\n+\n+    return \"ret\";\n+  }\n   [(set_attr \"type\" \"branch\")]\n )\n \n@@ -5322,6 +5334,39 @@\n   [(set_attr \"length\" \"0\")]\n )\n \n+;; Pointer authentication patterns are always provided.  In architecture\n+;; revisions prior to ARMv8.3-A these HINT instructions operate as NOPs.\n+;; This lets the user write portable software which authenticates pointers\n+;; when run on something which implements ARMv8.3-A, and which runs\n+;; correctly, but does not authenticate pointers, where ARMv8.3-A is not\n+;; implemented.\n+\n+;; Signing/Authenticating R30 using SP as the salt.\n+\n+(define_insn \"<pauth_mnem_prefix>sp\"\n+  [(set (reg:DI R30_REGNUM)\n+\t(unspec:DI [(reg:DI R30_REGNUM) (reg:DI SP_REGNUM)] PAUTH_LR_SP))]\n+  \"\"\n+  \"hint\\t<pauth_hint_num_a> // <pauth_mnem_prefix>asp\";\n+)\n+\n+;; Signing/Authenticating X17 using X16 as the salt.\n+\n+(define_insn \"<pauth_mnem_prefix>1716\"\n+  [(set (reg:DI R17_REGNUM)\n+\t(unspec:DI [(reg:DI R17_REGNUM) (reg:DI R16_REGNUM)] PAUTH_17_16))]\n+  \"\"\n+  \"hint\\t<pauth_hint_num_a> // <pauth_mnem_prefix>a1716\";\n+)\n+\n+;; Stripping the signature in R30.\n+\n+(define_insn \"xpaclri\"\n+  [(set (reg:DI R30_REGNUM) (unspec:DI [(reg:DI R30_REGNUM)] UNSPEC_XPACLRI))]\n+  \"\"\n+  \"hint\\t7 // xpaclri\"\n+)\n+\n ;; UNSPEC_VOLATILE is considered to use and clobber all hard registers and\n ;; all of memory.  This blocks insns from being moved across this point.\n "}, {"sha": "54368848bbb249949921a3018d927c4bd61b1fbd", "filename": "gcc/config/aarch64/aarch64.opt", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db58fd8954f5dfd868dbed110f2c8a04bb4b0753/gcc%2Fconfig%2Faarch64%2Faarch64.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db58fd8954f5dfd868dbed110f2c8a04bb4b0753/gcc%2Fconfig%2Faarch64%2Faarch64.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.opt?ref=db58fd8954f5dfd868dbed110f2c8a04bb4b0753", "patch": "@@ -149,6 +149,23 @@ mpc-relative-literal-loads\n Target Report Save Var(pcrelative_literal_loads) Init(2) Save\n PC relative literal loads.\n \n+msign-return-address=\n+Target RejectNegative Report Joined Enum(aarch64_ra_sign_scope_t) Var(aarch64_ra_sign_scope) Init(AARCH64_FUNCTION_NONE) Save\n+Select return address signing scope.\n+\n+Enum\n+Name(aarch64_ra_sign_scope_t) Type(enum aarch64_function_type)\n+Supported AArch64 return address signing scope (for use with -msign-return-address= option):\n+\n+EnumValue\n+Enum(aarch64_ra_sign_scope_t) String(none) Value(AARCH64_FUNCTION_NONE)\n+\n+EnumValue\n+Enum(aarch64_ra_sign_scope_t) String(non-leaf) Value(AARCH64_FUNCTION_NON_LEAF)\n+\n+EnumValue\n+Enum(aarch64_ra_sign_scope_t) String(all) Value(AARCH64_FUNCTION_ALL)\n+\n mlow-precision-recip-sqrt\n Common Var(flag_mrecip_low_precision_sqrt) Optimization\n Enable the reciprocal square root approximation.  Enabling this reduces"}, {"sha": "c59d31e5053a28fa31259341e82b6696f6ac8781", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db58fd8954f5dfd868dbed110f2c8a04bb4b0753/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db58fd8954f5dfd868dbed110f2c8a04bb4b0753/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=db58fd8954f5dfd868dbed110f2c8a04bb4b0753", "patch": "@@ -1032,6 +1032,10 @@\n (define_int_iterator FMAXMIN_UNS [UNSPEC_FMAX UNSPEC_FMIN\n \t\t\t\t  UNSPEC_FMAXNM UNSPEC_FMINNM])\n \n+(define_int_iterator PAUTH_LR_SP [UNSPEC_PACISP UNSPEC_AUTISP])\n+\n+(define_int_iterator PAUTH_17_16 [UNSPEC_PACI1716 UNSPEC_AUTI1716])\n+\n (define_int_iterator VQDMULH [UNSPEC_SQDMULH UNSPEC_SQRDMULH])\n \n (define_int_iterator USSUQADD [UNSPEC_SUQADD UNSPEC_USQADD])\n@@ -1218,6 +1222,18 @@\n \t\t\t\t  (UNSPEC_FCVTZS \"fcvtzs\")\n \t\t\t\t  (UNSPEC_FCVTZU \"fcvtzu\")])\n \n+;; Pointer authentication mnemonic prefix.\n+(define_int_attr pauth_mnem_prefix [(UNSPEC_PACISP \"paci\")\n+\t\t\t\t    (UNSPEC_AUTISP \"auti\")\n+\t\t\t\t    (UNSPEC_PACI1716 \"paci\")\n+\t\t\t\t    (UNSPEC_AUTI1716 \"auti\")])\n+\n+;; Pointer authentication HINT number for NOP space instructions using A Key.\n+(define_int_attr pauth_hint_num_a [(UNSPEC_PACISP \"25\")\n+\t\t\t\t    (UNSPEC_AUTISP \"29\")\n+\t\t\t\t    (UNSPEC_PACI1716 \"8\")\n+\t\t\t\t    (UNSPEC_AUTI1716 \"12\")])\n+\n (define_int_attr perm_insn [(UNSPEC_ZIP1 \"zip\") (UNSPEC_ZIP2 \"zip\")\n \t\t\t    (UNSPEC_TRN1 \"trn\") (UNSPEC_TRN2 \"trn\")\n \t\t\t    (UNSPEC_UZP1 \"uzp\") (UNSPEC_UZP2 \"uzp\")])"}, {"sha": "a3fbec06073c21d01d7a47c50eb0083a3e7f88e6", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db58fd8954f5dfd868dbed110f2c8a04bb4b0753/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db58fd8954f5dfd868dbed110f2c8a04bb4b0753/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=db58fd8954f5dfd868dbed110f2c8a04bb4b0753", "patch": "@@ -3513,6 +3513,12 @@ Specifies the core for which to tune the performance of this function and also\n whose architectural features to use.  The behavior and valid arguments are the\n same as for the @option{-mcpu=} command-line option.\n \n+@item sign-return-address\n+@cindex @code{sign-return-address} function attribute, AArch64\n+Select the function scope on which return address signing will be applied.  The\n+behaviour and permissible arguments are the same as for the command-line option\n+@option{-msign-return-address=}.  The default value is @code{none}.\n+\n @end table\n \n The above target attributes can be specified as follows:"}, {"sha": "79a40f13d82c556161b0ffee7176a696b154600c", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db58fd8954f5dfd868dbed110f2c8a04bb4b0753/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db58fd8954f5dfd868dbed110f2c8a04bb4b0753/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=db58fd8954f5dfd868dbed110f2c8a04bb4b0753", "patch": "@@ -14100,6 +14100,14 @@ accessed using a single instruction and emitted after each function.  This\n limits the maximum size of functions to 1MB.  This is enabled by default for\n @option{-mcmodel=tiny}.\n \n+@item -msign-return-address=@var{scope}\n+@opindex msign-return-address\n+Select the function scope on which return address signing will be applied.\n+Permissible values are @samp{none}, which disables return address signing,\n+@samp{non-leaf}, which enables pointer signing for functions which are not leaf\n+functions, and @samp{all}, which enables pointer signing for all functions.  The\n+default value is @samp{none}.\n+\n @end table\n \n @subsubsection @option{-march} and @option{-mcpu} Feature Modifiers"}, {"sha": "c868ea7f1e2be38dccc4b1efc9e8ad05f20de4b2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db58fd8954f5dfd868dbed110f2c8a04bb4b0753/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db58fd8954f5dfd868dbed110f2c8a04bb4b0753/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=db58fd8954f5dfd868dbed110f2c8a04bb4b0753", "patch": "@@ -1,3 +1,12 @@\n+2017-01-19  Jiong Wang  <jiong.wang@arm.com>\n+\n+\t* gcc.target/aarch64/return_address_sign_1.c: New testcase for no\n+\tcombined instructions.\n+\t* gcc.target/aarch64/return_address_sign_2.c: New testcase for combined\n+\tinstructions.\n+\t* gcc.target/aarch64/return_address_sign_3.c: New testcase for disable\n+\tof pointer authentication.\n+\n 2017-01-19  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \t* gcc.target/powerpc/float128-hw.c: Do not require IEEE 128-bit"}, {"sha": "fda72a414f1df7e81785864e994681e3695852f1", "filename": "gcc/testsuite/gcc.target/aarch64/return_address_sign_1.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db58fd8954f5dfd868dbed110f2c8a04bb4b0753/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Freturn_address_sign_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db58fd8954f5dfd868dbed110f2c8a04bb4b0753/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Freturn_address_sign_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Freturn_address_sign_1.c?ref=db58fd8954f5dfd868dbed110f2c8a04bb4b0753", "patch": "@@ -0,0 +1,51 @@\n+/* Testing return address signing where no combined instructions used.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msign-return-address=all\" } */\n+\n+int foo (int);\n+\n+/* sibcall only.  */\n+int __attribute__ ((target (\"arch=armv8.3-a\")))\n+func1 (int a, int b)\n+{\n+  /* paciasp */\n+  return foo (a + b);\n+  /* autiasp */\n+}\n+\n+/* non-leaf function with sibcall.  */\n+int __attribute__ ((target (\"arch=armv8.3-a\")))\n+func2 (int a, int b)\n+{\n+  /* paciasp */\n+  if (a < b)\n+    return b;\n+\n+  a = foo (b);\n+\n+  return foo (a);\n+  /* autiasp */\n+}\n+\n+/* non-leaf function, legacy arch.  */\n+int __attribute__ ((target (\"arch=armv8.2-a\")))\n+func3 (int a, int b, int c)\n+{\n+  /* paciasp */\n+  return a + foo (b) + c;\n+  /* autiasp */\n+}\n+\n+/* eh_return.  */\n+void __attribute__ ((target (\"arch=armv8.3-a\")))\n+func4 (long offset, void *handler, int *ptr, int imm1, int imm2)\n+{\n+  /* paciasp */\n+  *ptr = imm1 + foo (imm1) + imm2;\n+  __builtin_eh_return (offset, handler);\n+  /* autiasp */\n+  return;\n+}\n+\n+/* { dg-final { scan-assembler-times \"autiasp\" 4 } } */\n+/* { dg-final { scan-assembler-times \"paciasp\" 4 } } */"}, {"sha": "54fe47a69723d182c65941ddb73e2f1a5aa0af84", "filename": "gcc/testsuite/gcc.target/aarch64/return_address_sign_2.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db58fd8954f5dfd868dbed110f2c8a04bb4b0753/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Freturn_address_sign_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db58fd8954f5dfd868dbed110f2c8a04bb4b0753/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Freturn_address_sign_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Freturn_address_sign_2.c?ref=db58fd8954f5dfd868dbed110f2c8a04bb4b0753", "patch": "@@ -0,0 +1,17 @@\n+/* Testing return address signing where combined instructions used.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msign-return-address=all\" } */\n+\n+int foo (int);\n+int bar (int, int);\n+\n+int __attribute__ ((target (\"arch=armv8.3-a\")))\n+func1 (int a, int b, int c)\n+{\n+  /* paciasp */\n+  return a + foo (b) + c;\n+  /* retaa */\n+}\n+\n+/* { dg-final { scan-assembler-times \"paciasp\" 1 } } */\n+/* { dg-final { scan-assembler-times \"retaa\" 1 } } */"}, {"sha": "adc5effdded8900b2dfb68459883d399ebd91ac8", "filename": "gcc/testsuite/gcc.target/aarch64/return_address_sign_3.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db58fd8954f5dfd868dbed110f2c8a04bb4b0753/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Freturn_address_sign_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db58fd8954f5dfd868dbed110f2c8a04bb4b0753/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Freturn_address_sign_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Freturn_address_sign_3.c?ref=db58fd8954f5dfd868dbed110f2c8a04bb4b0753", "patch": "@@ -0,0 +1,21 @@\n+/* Testing the disable of return address signing.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msign-return-address=all\" } */\n+\n+int bar (int, int);\n+\n+int __attribute__ ((target (\"arch=armv8.3-a, sign-return-address=non-leaf\")))\n+func1_leaf (int a, int b, int c, int d)\n+{\n+  return a + b + c + d;\n+}\n+\n+int __attribute__ ((target (\"arch=armv8.3-a, sign-return-address=none\")))\n+func2_none (int a, int b, int c, int d)\n+{\n+  return c + bar (a, b) + d;\n+}\n+\n+/* { dg-final { scan-assembler-not \"paciasp\" } } */\n+/* { dg-final { scan-assembler-not \"autiasp\" } } */\n+/* { dg-final { scan-assembler-not \"retaa\" } } */"}]}