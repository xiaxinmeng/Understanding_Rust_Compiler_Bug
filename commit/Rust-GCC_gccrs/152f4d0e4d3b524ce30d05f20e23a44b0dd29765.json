{"sha": "152f4d0e4d3b524ce30d05f20e23a44b0dd29765", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTUyZjRkMGU0ZDNiNTI0Y2UzMGQwNWYyMGUyM2E0NGIwZGQyOTc2NQ==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2021-07-03T00:42:14Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2021-07-03T11:00:56Z"}, "message": "d: Missed RVO optimization with non-POD structs\n\nThe D front-end semantic pass sometimes declares a temporary inside a\nreturn expression.  This is now detected with the RESULT_DECL replacing\nthe temporary, allowing for RVO to be done.\n\n\tPR d/101273\n\ngcc/d/ChangeLog:\n\n\t* toir.cc (IRVisitor::visit (ReturnStatement *)): Detect returns that\n\tuse a temporary, and replace with return value.\n\ngcc/testsuite/ChangeLog:\n\n\t* gdc.dg/torture/pr101273.d: New test.", "tree": {"sha": "305b63554a1557882c9258852a71e97706044670", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/305b63554a1557882c9258852a71e97706044670"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/152f4d0e4d3b524ce30d05f20e23a44b0dd29765", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/152f4d0e4d3b524ce30d05f20e23a44b0dd29765", "html_url": "https://github.com/Rust-GCC/gccrs/commit/152f4d0e4d3b524ce30d05f20e23a44b0dd29765", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/152f4d0e4d3b524ce30d05f20e23a44b0dd29765/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a60a6e8b36dec960939494baef0f1f15dbfc450", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a60a6e8b36dec960939494baef0f1f15dbfc450", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a60a6e8b36dec960939494baef0f1f15dbfc450"}], "stats": {"total": 71, "additions": 69, "deletions": 2}, "files": [{"sha": "eaee6f7e803980cf5838f53ef48f6a9cef7df0e4", "filename": "gcc/d/toir.cc", "status": "modified", "additions": 30, "deletions": 2, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/152f4d0e4d3b524ce30d05f20e23a44b0dd29765/gcc%2Fd%2Ftoir.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/152f4d0e4d3b524ce30d05f20e23a44b0dd29765/gcc%2Fd%2Ftoir.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Ftoir.cc?ref=152f4d0e4d3b524ce30d05f20e23a44b0dd29765", "patch": "@@ -1034,14 +1034,37 @@ class IRVisitor : public Visitor\n \t/* Detect a call to a constructor function, or if returning a struct\n \t   literal, write result directly into the return value.  */\n \tStructLiteralExp *sle = NULL;\n+\tbool using_rvo_p = false;\n \n \tif (DotVarExp *dve = (s->exp->op == TOKcall\n \t\t\t      && s->exp->isCallExp ()->e1->op == TOKdotvar\n \t\t\t      ? s->exp->isCallExp ()->e1->isDotVarExp ()\n \t\t\t      : NULL))\n \t  {\n-\t    sle = (dve->var->isCtorDeclaration ()\n-\t\t   ? dve->e1->isStructLiteralExp () : NULL);\n+\t    if (dve->var->isCtorDeclaration ())\n+\t      {\n+\t\tif (CommaExp *ce = dve->e1->isCommaExp ())\n+\t\t  {\n+\t\t    /* Temporary initialized inside a return expression, and\n+\t\t       used as the return value.  Replace it with the hidden\n+\t\t\treference to allow RVO return.  */\n+\t\t    DeclarationExp *de = ce->e1->isDeclarationExp ();\n+\t\t    VarExp *ve = ce->e2->isVarExp ();\n+\t\t    if (de != NULL && ve != NULL\n+\t\t\t&& ve->var == de->declaration\n+\t\t\t&& ve->var->storage_class & STCtemp)\n+\t\t      {\n+\t\t\ttree var = get_symbol_decl (ve->var);\n+\t\t\tTREE_ADDRESSABLE (var) = 1;\n+\t\t\tSET_DECL_VALUE_EXPR (var, decl);\n+\t\t\tDECL_HAS_VALUE_EXPR_P (var) = 1;\n+\t\t\tSET_DECL_LANG_NRVO (var, this->func_->shidden);\n+\t\t\tusing_rvo_p = true;\n+\t\t      }\n+\t\t  }\n+\t\telse\n+\t\t  sle = dve->e1->isStructLiteralExp ();\n+\t      }\n \t  }\n \telse\n \t  sle = s->exp->isStructLiteralExp ();\n@@ -1050,11 +1073,16 @@ class IRVisitor : public Visitor\n \t  {\n \t    StructDeclaration *sd = type->baseElemOf ()->isTypeStruct ()->sym;\n \t    sle->sym = build_address (this->func_->shidden);\n+\t    using_rvo_p = true;\n \n \t    /* Fill any alignment holes in the return slot using memset.  */\n \t    if (!identity_compare_p (sd) || sd->isUnionDeclaration ())\n \t      add_stmt (build_memset_call (this->func_->shidden));\n+\t  }\n \n+\tif (using_rvo_p == true)\n+\t  {\n+\t    /* Generate: (expr, return <retval>);  */\n \t    add_stmt (build_expr_dtor (s->exp));\n \t  }\n \telse"}, {"sha": "e300e03f199754f01c4945503472c37df3722419", "filename": "gcc/testsuite/gdc.dg/torture/pr101273.d", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/152f4d0e4d3b524ce30d05f20e23a44b0dd29765/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fpr101273.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/152f4d0e4d3b524ce30d05f20e23a44b0dd29765/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fpr101273.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fpr101273.d?ref=152f4d0e4d3b524ce30d05f20e23a44b0dd29765", "patch": "@@ -0,0 +1,39 @@\n+// https://gcc.gnu.org/bugzilla/show_bug.cgi?id=101273\n+// { dg-do run }\n+\n+struct S101273\n+{\n+    int x;\n+    S101273* impl;\n+    this(int x)\n+    {\n+        this.x = x;\n+        this.impl = &this;\n+    }\n+    ~this() { }\n+}\n+\n+S101273 makeS101273()\n+{\n+    return S101273(2);\n+}\n+\n+S101273 nrvo101273()\n+{\n+    S101273 ret = makeS101273();\n+    return ret;\n+}\n+\n+S101273 rvo101273()\n+{\n+    return makeS101273();\n+}\n+\n+void main()\n+{\n+    auto nrvo = nrvo101273();\n+    assert(&nrvo is nrvo.impl);\n+\n+    auto rvo = rvo101273();\n+    assert(&rvo is rvo.impl);\n+}"}]}