{"sha": "bf6beae550227348b95a592def3676335475dd17", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmY2YmVhZTU1MDIyNzM0OGI5NWE1OTJkZWYzNjc2MzM1NDc1ZGQxNw==", "commit": {"author": {"name": "Charles Hannum", "email": "mycroft@gnu.org", "date": "1992-03-05T20:20:59Z"}, "committer": {"name": "Charles Hannum", "email": "mycroft@gnu.org", "date": "1992-03-05T20:20:59Z"}, "message": "entered into RCS\n\nFrom-SVN: r396", "tree": {"sha": "1266abc03683ab5aedf823fb8819a2ece0fc56ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1266abc03683ab5aedf823fb8819a2ece0fc56ed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bf6beae550227348b95a592def3676335475dd17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf6beae550227348b95a592def3676335475dd17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf6beae550227348b95a592def3676335475dd17", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf6beae550227348b95a592def3676335475dd17/comments", "author": null, "committer": null, "parents": [{"sha": "e5c90c23e250db46bbb880af6daf0fcd8d67962b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5c90c23e250db46bbb880af6daf0fcd8d67962b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5c90c23e250db46bbb880af6daf0fcd8d67962b"}], "stats": {"total": 188, "additions": 188, "deletions": 0}, "files": [{"sha": "9c6e44c1487f63f9861405021224921f8106267d", "filename": "gcc/function.h", "status": "added", "additions": 188, "deletions": 0, "changes": 188, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf6beae550227348b95a592def3676335475dd17/gcc%2Ffunction.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf6beae550227348b95a592def3676335475dd17/gcc%2Ffunction.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.h?ref=bf6beae550227348b95a592def3676335475dd17", "patch": "@@ -0,0 +1,188 @@\n+/* Structure for saving state for a nested function.\n+   Copyright (C) 1989 Free Software Foundation, Inc.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n+\n+\n+#ifndef NULL_TREE\n+#define tree int *\n+#endif\n+#ifndef GET_CODE\n+#define rtx int *\n+#endif\n+\n+struct var_refs_queue\n+  {\n+    rtx modified;\n+    rtx original;\n+    struct var_refs_queue *next;\n+  };\n+\n+/* Stack of pending (incomplete) sequences saved by `start_sequence'.\n+   Each element describes one pending sequence.\n+   The main insn-chain is saved in the last element of the chain,\n+   unless the chain is empty.  */\n+\n+struct sequence_stack\n+{\n+  /* First and last insns in the chain of the saved sequence.  */\n+  rtx first, last;\n+  struct sequence_stack *next;\n+};\n+\n+extern struct sequence_stack *sequence_stack;\n+\f\n+/* This structure can save all the important global and static variables\n+   describing the status of the current function.  */\n+\n+struct function\n+{\n+  struct function *next;\n+\n+  /* For function.c.  */\n+  char *name;\n+  tree decl;\n+  int pops_args;\n+  int returns_struct;\n+  int returns_pcc_struct;\n+  int needs_context;\n+  int calls_setjmp;\n+  int calls_longjmp;\n+  int calls_alloca;\n+  int has_nonlocal_label;\n+  rtx nonlocal_goto_handler_slot;\n+  rtx nonlocal_goto_stack_level;\n+  tree nonlocal_labels;\n+  int args_size;\n+  int pretend_args_size;\n+  rtx arg_offset_rtx;\n+  int max_parm_reg;\n+  rtx *parm_reg_stack_loc;\n+  int outgoing_args_size;\n+  rtx return_rtx;\n+  rtx cleanup_label;\n+  rtx return_label;\n+  rtx save_expr_regs;\n+  rtx stack_slot_list;\n+  rtx parm_birth_insn;\n+  int frame_offset;\n+  rtx tail_recursion_label;\n+  rtx tail_recursion_reentry;\n+  rtx internal_arg_pointer;\n+  rtx arg_pointer_save_area;\n+  tree rtl_expr_chain;\n+  rtx last_parm_insn;\n+  tree context_display;\n+  tree trampoline_list;\n+  int function_call_count;\n+  struct temp_slot *temp_slots;\n+  int temp_slot_level;\n+  /* This slot is initialized as 0 and is added to\n+     during the nested function.  */\n+  struct var_refs_queue *fixup_var_refs_queue;\n+\n+  /* For stmt.c  */\n+  struct nesting *block_stack;\n+  struct nesting *stack_block_stack;\n+  struct nesting *cond_stack;\n+  struct nesting *loop_stack;\n+  struct nesting *case_stack;\n+  struct nesting *nesting_stack;\n+  int nesting_depth;\n+  int block_start_count;\n+  tree last_expr_type;\n+  rtx last_expr_value;\n+  int expr_stmts_for_value;\n+  char *emit_filename;\n+  int emit_lineno;\n+  struct goto_fixup *goto_fixup_chain;\n+\n+  /* For expr.c.  */\n+  int pending_stack_adjust;\n+  int inhibit_defer_pop;\n+  tree cleanups_this_call;\n+  rtx saveregs_value;\n+  rtx forced_labels;\n+\n+  /* For emit-rtl.c.  */\n+  int reg_rtx_no;\n+  int first_label_num;\n+  rtx first_insn;\n+  rtx last_insn;\n+  struct sequence_stack *sequence_stack;\n+  int cur_insn_uid;\n+  int last_linenum;\n+  char *last_filename;\n+  char *regno_pointer_flag;\n+  int regno_pointer_flag_length;\n+  rtx *regno_reg_rtx;\n+\n+  /* For stor-layout.c.  */\n+  tree permanent_type_chain;\n+  tree temporary_type_chain;\n+  tree permanent_type_end;\n+  tree temporary_type_end;\n+  tree pending_sizes;\n+  int immediate_size_expand;\n+\n+  /* For tree.c.  */\n+  int all_types_permanent;\n+  struct momentary_level *momentary_stack;\n+  char *maybepermanent_firstobj;\n+  char *temporary_firstobj;\n+  char *momentary_firstobj;\n+  struct obstack *current_obstack;\n+  struct obstack *function_obstack;\n+  struct obstack *function_maybepermanent_obstack;\n+  struct obstack *expression_obstack;\n+  struct obstack *saveable_obstack;\n+  struct obstack *rtl_obstack;\n+\n+  /* For integrate.c.  */\n+  int uses_const_pool;\n+\n+  /* For md files.  */\n+  int uses_pic_offset_table;\n+};\n+\n+/* The FUNCTION_DECL for an inline function currently being expanded.  */\n+extern tree inline_function_decl;\n+\n+/* Label that will go on function epilogue.\n+   Jumping to this label serves as a \"return\" instruction\n+   on machines which require execution of the epilogue on all returns.  */\n+extern rtx return_label;\n+\n+/* List (chain of EXPR_LISTs) of all stack slots in this function.\n+   Made for the sake of unshare_all_rtl.  */\n+extern rtx stack_slot_list;\n+\n+#ifdef rtx\n+#undef rtx\n+#endif\n+\n+#ifdef tree\n+#undef tree\n+#endif\n+\n+\n+/* Given a function decl for a containing function,\n+   return the `struct function' for it.  */\n+struct function *find_function_data ();\n+\n+/* Pointer to chain of `struct function' for containing functions.  */\n+extern struct function *outer_function_chain;"}]}