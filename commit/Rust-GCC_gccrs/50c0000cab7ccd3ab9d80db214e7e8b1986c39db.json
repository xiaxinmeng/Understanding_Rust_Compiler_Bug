{"sha": "50c0000cab7ccd3ab9d80db214e7e8b1986c39db", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTBjMDAwMGNhYjdjY2QzYWI5ZDgwZGIyMTRlN2U4YjE5ODZjMzlkYg==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-05-09T16:41:22Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-05-09T16:41:22Z"}, "message": "(call_insn_operand): New function.\n\nFrom-SVN: r4398", "tree": {"sha": "3b64e05c54e1738d828310d8f622b75877876cff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3b64e05c54e1738d828310d8f622b75877876cff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/50c0000cab7ccd3ab9d80db214e7e8b1986c39db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50c0000cab7ccd3ab9d80db214e7e8b1986c39db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50c0000cab7ccd3ab9d80db214e7e8b1986c39db", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50c0000cab7ccd3ab9d80db214e7e8b1986c39db/comments", "author": null, "committer": null, "parents": [{"sha": "008660af801c9598d7cda9204feebbee4324473a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/008660af801c9598d7cda9204feebbee4324473a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/008660af801c9598d7cda9204feebbee4324473a"}], "stats": {"total": 19, "additions": 19, "deletions": 0}, "files": [{"sha": "89c3403b78c3ef160069ba43f6ba2ecb7763a4fb", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50c0000cab7ccd3ab9d80db214e7e8b1986c39db/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50c0000cab7ccd3ab9d80db214e7e8b1986c39db/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=50c0000cab7ccd3ab9d80db214e7e8b1986c39db", "patch": "@@ -690,6 +690,25 @@ pc_or_label_operand (op, mode)\n   return FALSE;\n }\n \n+/* Test for a valid operand for a call instruction.\n+   Don't allow the arg pointer register or virtual regs\n+   since they may change into reg + const, which the patterns\n+   can't handle yet.  */\n+\n+int\n+call_insn_operand (op, mode)\n+     rtx op;\n+     enum machine_mode mode;\n+{\n+  if (GET_CODE (op) == MEM\n+      && (CONSTANT_ADDRESS_P (XEXP (op, 0))\n+\t  || (GET_CODE (XEXP (op, 0)) == REG\n+\t      && XEXP (op, 0) != arg_pointer_rtx\n+\t      && !(REGNO (XEXP (op, 0)) >= FIRST_PSEUDO_REGISTER\n+\t\t   && REGNO (XEXP (op, 0)) <= LAST_VIRTUAL_REGISTER))))\n+    return 1;\n+  return 0;\n+}\n \f\n /* Return an operand string if the given instruction's delay slot or\n    wrap it in a .set noreorder section.  This is for filling delay"}]}