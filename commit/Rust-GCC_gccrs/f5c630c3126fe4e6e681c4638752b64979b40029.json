{"sha": "f5c630c3126fe4e6e681c4638752b64979b40029", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjVjNjMwYzMxMjZmZTRlNmU2ODFjNDYzODc1MmI2NDk3OWI0MDAyOQ==", "commit": {"author": {"name": "Paul Brook", "email": "paul@codesourcery.com", "date": "2008-02-26T22:21:08Z"}, "committer": {"name": "Paul Brook", "email": "pbrook@gcc.gnu.org", "date": "2008-02-26T22:21:08Z"}, "message": "arm.c (thumb_set_frame_pointer): Ensure SP is first operand for Thumb-2.\n\n2008-02-26  Paul Brook  <paul@codesourcery.com>\n\n\t* config/arm/arm.c (thumb_set_frame_pointer): Ensure SP is first\n\toperand for Thumb-2.\n\t* config/arm/arm.h (reg_class): Add CORE_REGS.\n\t(REG_CLASS_NAMES, REG_CLASS_CONTENTS): Ditto.\n\t(BASE_REG_CLASS): Use CORE_REGS.\n\t(PREFERRED_RELOAD_CLASS): Add STACK_REG.\n\t(REGNO_MODE_OK_FOR_REG_BASE_P): Use REGNO_MODE_OK_FOR_BASE_P.\n\t(REGNO_OK_FOR_INDEX_P): Exclude SP.\n\t(ARM_REG_OK_FOR_INDEX_P): Always define.  Use\n\tARM_REGNO_OK_FOR_INDEX_P.\n\t(ARM_PRINT_OPERAND_ADDRESS): Swap operands for [reg, sp].\n\t* config/arm/arm.md (arm_addsi3, thumb1_addsi3, arm_subsi3_insn,\n\tarm_movsi_insn, thumb1_movsi_insni, stack_tie): Add \"k\" alternatives.\n\t(ldm/stm peepholes): Ditto.\n\t* config/arm/thumb2.md (thumb2_movdi): Add \"k\" alternatives.\n\t* config/arm/vfp.md (arm_movsi_vfp, thumb2_movsi_vfp): Ditto.\n\t* config/arm/iwmmxt.md (iwmmxt_movsi_insn): Ditto.\n\t* config/arm/constraints.md: Enable \"k\" constraint on ARM.\n\nFrom-SVN: r132687", "tree": {"sha": "a93b71eb25e3150012204305e4a0a67366469f8b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a93b71eb25e3150012204305e4a0a67366469f8b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f5c630c3126fe4e6e681c4638752b64979b40029", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5c630c3126fe4e6e681c4638752b64979b40029", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5c630c3126fe4e6e681c4638752b64979b40029", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5c630c3126fe4e6e681c4638752b64979b40029/comments", "author": null, "committer": null, "parents": [{"sha": "0d158b6e40709be6c0f9e25c5406e3f303e4744c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d158b6e40709be6c0f9e25c5406e3f303e4744c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d158b6e40709be6c0f9e25c5406e3f303e4744c"}], "stats": {"total": 254, "additions": 153, "deletions": 101}, "files": [{"sha": "906f1c5e7de2a1577e9dd19235374ea5806e03e1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5c630c3126fe4e6e681c4638752b64979b40029/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5c630c3126fe4e6e681c4638752b64979b40029/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f5c630c3126fe4e6e681c4638752b64979b40029", "patch": "@@ -1,3 +1,24 @@\n+2008-02-26  Paul Brook  <paul@codesourcery.com>\n+\n+\t* config/arm/arm.c (thumb_set_frame_pointer): Ensure SP is first\n+\toperand for Thumb-2.\n+\t* config/arm/arm.h (reg_class): Add CORE_REGS.\n+\t(REG_CLASS_NAMES, REG_CLASS_CONTENTS): Ditto.\n+\t(BASE_REG_CLASS): Use CORE_REGS.\n+\t(PREFERRED_RELOAD_CLASS): Add STACK_REG.\n+\t(REGNO_MODE_OK_FOR_REG_BASE_P): Use REGNO_MODE_OK_FOR_BASE_P.\n+\t(REGNO_OK_FOR_INDEX_P): Exclude SP.\n+\t(ARM_REG_OK_FOR_INDEX_P): Always define.  Use\n+\tARM_REGNO_OK_FOR_INDEX_P.\n+\t(ARM_PRINT_OPERAND_ADDRESS): Swap operands for [reg, sp].\n+\t* config/arm/arm.md (arm_addsi3, thumb1_addsi3, arm_subsi3_insn,\n+\tarm_movsi_insn, thumb1_movsi_insni, stack_tie): Add \"k\" alternatives.\n+\t(ldm/stm peepholes): Ditto.\n+\t* config/arm/thumb2.md (thumb2_movdi): Add \"k\" alternatives.\n+\t* config/arm/vfp.md (arm_movsi_vfp, thumb2_movsi_vfp): Ditto.\n+\t* config/arm/iwmmxt.md (iwmmxt_movsi_insn): Ditto.\n+\t* config/arm/constraints.md: Enable \"k\" constraint on ARM.\n+\n 2008-02-27  Ben Elliston  <bje@au.ibm.com>\n \n \t* config/rs6000/rs6000.c: Annotate cache line size field in all"}, {"sha": "c66b51ec3287cc71fe036d9e6b5ff1aaee79e8b8", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5c630c3126fe4e6e681c4638752b64979b40029/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5c630c3126fe4e6e681c4638752b64979b40029/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=f5c630c3126fe4e6e681c4638752b64979b40029", "patch": "@@ -12229,9 +12229,20 @@ thumb_set_frame_pointer (arm_stack_offsets *offsets)\n   else\n     {\n       emit_insn (gen_movsi (hard_frame_pointer_rtx, GEN_INT (amount)));\n-      insn = emit_insn (gen_addsi3 (hard_frame_pointer_rtx,\n-\t\t\t\t    hard_frame_pointer_rtx,\n-\t\t\t\t    stack_pointer_rtx));\n+      /* Thumb-2 RTL patterns expect sp as the first input.  Thumb-1\n+         expects the first two operands to be the same.  */\n+      if (TARGET_THUMB2)\n+\t{\n+\t  insn = emit_insn (gen_addsi3 (hard_frame_pointer_rtx,\n+\t\t\t\t\tstack_pointer_rtx,\n+\t\t\t\t\thard_frame_pointer_rtx));\n+\t}\n+      else\n+\t{\n+\t  insn = emit_insn (gen_addsi3 (hard_frame_pointer_rtx,\n+\t\t\t\t\thard_frame_pointer_rtx,\n+\t\t\t\t\tstack_pointer_rtx));\n+\t}\n       dwarf = gen_rtx_SET (VOIDmode, hard_frame_pointer_rtx,\n \t\t\t   plus_constant (stack_pointer_rtx, amount));\n       RTX_FRAME_RELATED_P (dwarf) = 1;"}, {"sha": "fcb90ab3ca68caa34f23892b31fa44045ed8cae7", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 25, "deletions": 10, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5c630c3126fe4e6e681c4638752b64979b40029/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5c630c3126fe4e6e681c4638752b64979b40029/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=f5c630c3126fe4e6e681c4638752b64979b40029", "patch": "@@ -1106,6 +1106,7 @@ enum reg_class\n   CC_REG,\n   VFPCC_REG,\n   GENERAL_REGS,\n+  CORE_REGS,\n   ALL_REGS,\n   LIM_REG_CLASSES\n };\n@@ -1131,6 +1132,7 @@ enum reg_class\n   \"CC_REG\",\t\t\\\n   \"VFPCC_REG\",\t\t\\\n   \"GENERAL_REGS\",\t\\\n+  \"CORE_REGS\",\t\t\\\n   \"ALL_REGS\",\t\t\\\n }\n \n@@ -1151,10 +1153,11 @@ enum reg_class\n   { 0x000000FF, 0x00000000, 0x00000000, 0x00000000 }, /* LO_REGS */\t\\\n   { 0x00002000, 0x00000000, 0x00000000, 0x00000000 }, /* STACK_REG */\t\\\n   { 0x000020FF, 0x00000000, 0x00000000, 0x00000000 }, /* BASE_REGS */\t\\\n-  { 0x0000FF00, 0x00000000, 0x00000000, 0x00000000 }, /* HI_REGS */\t\\\n+  { 0x0000DF00, 0x00000000, 0x00000000, 0x00000000 }, /* HI_REGS */\t\\\n   { 0x01000000, 0x00000000, 0x00000000, 0x00000000 }, /* CC_REG */\t\\\n   { 0x00000000, 0x00000000, 0x00000000, 0x80000000 }, /* VFPCC_REG */\t\\\n-  { 0x0200FFFF, 0x00000000, 0x00000000, 0x00000000 }, /* GENERAL_REGS */ \\\n+  { 0x0200DFFF, 0x00000000, 0x00000000, 0x00000000 }, /* GENERAL_REGS */ \\\n+  { 0x0200FFFF, 0x00000000, 0x00000000, 0x00000000 }, /* CORE_REGS */\t\\\n   { 0xFAFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x7FFFFFFF }  /* ALL_REGS */\t\\\n }\n \n@@ -1187,13 +1190,13 @@ enum reg_class\n \n /* The class value for index registers, and the one for base regs.  */\n #define INDEX_REG_CLASS  (TARGET_THUMB1 ? LO_REGS : GENERAL_REGS)\n-#define BASE_REG_CLASS   (TARGET_THUMB1 ? LO_REGS : GENERAL_REGS)\n+#define BASE_REG_CLASS   (TARGET_THUMB1 ? LO_REGS : CORE_REGS)\n \n /* For the Thumb the high registers cannot be used as base registers\n    when addressing quantities in QI or HI mode; if we don't know the\n    mode, then we must be conservative.  */\n #define MODE_BASE_REG_CLASS(MODE)\t\t\t\t\t\\\n-    (TARGET_32BIT ? GENERAL_REGS :\t\t\t\t\t\\\n+    (TARGET_32BIT ? CORE_REGS :\t\t\t\t\t\\\n      (((MODE) == SImode) ? BASE_REGS : LO_REGS))\n \n /* For Thumb we can not support SP+reg addressing, so we return LO_REGS\n@@ -1213,7 +1216,8 @@ enum reg_class\n #define PREFERRED_RELOAD_CLASS(X, CLASS)\t\t\\\n   (TARGET_ARM ? (CLASS) :\t\t\t\t\\\n    ((CLASS) == GENERAL_REGS || (CLASS) == HI_REGS\t\\\n-    || (CLASS) == NO_REGS ? LO_REGS : (CLASS)))\n+    || (CLASS) == NO_REGS || (CLASS) == STACK_REG\t\\\n+   ? LO_REGS : (CLASS)))\n \n /* Must leave BASE_REGS reloads alone */\n #define THUMB_SECONDARY_INPUT_RELOAD_CLASS(CLASS, MODE, X)\t\t\\\n@@ -1908,12 +1912,13 @@ typedef struct\n /* Nonzero if X can be the base register in a reg+reg addressing mode.\n    For Thumb, we can not use SP + reg, so reject SP.  */\n #define REGNO_MODE_OK_FOR_REG_BASE_P(X, MODE)\t\\\n-  REGNO_OK_FOR_INDEX_P (X)\n+  REGNO_MODE_OK_FOR_BASE_P (X, QImode)\n \n /* For ARM code, we don't care about the mode, but for Thumb, the index\n    must be suitable for use in a QImode load.  */\n #define REGNO_OK_FOR_INDEX_P(REGNO)\t\\\n-  REGNO_MODE_OK_FOR_BASE_P (REGNO, QImode)\n+  (REGNO_MODE_OK_FOR_BASE_P (REGNO, QImode) \\\n+   && !TEST_REGNO (REGNO, ==, STACK_POINTER_REGNUM))\n \n /* Maximum number of registers that can appear in a valid memory address.\n    Shifts in addresses can't be by a register.  */\n@@ -2051,6 +2056,13 @@ typedef struct\n    || REGNO (X) == FRAME_POINTER_REGNUM\t\t\\\n    || REGNO (X) == ARG_POINTER_REGNUM)\n \n+#define ARM_REG_OK_FOR_INDEX_P(X)\t\t\\\n+  ((REGNO (X) <= LAST_ARM_REGNUM\t\t\\\n+    && REGNO (X) != STACK_POINTER_REGNUM)\t\\\n+   || REGNO (X) >= FIRST_PSEUDO_REGISTER\t\\\n+   || REGNO (X) == FRAME_POINTER_REGNUM\t\t\\\n+   || REGNO (X) == ARG_POINTER_REGNUM)\n+\n #define THUMB1_REG_MODE_OK_FOR_BASE_P(X, MODE)\t\\\n   (REGNO (X) <= LAST_LO_REGNUM\t\t\t\\\n    || REGNO (X) >= FIRST_PSEUDO_REGISTER\t\\\n@@ -2066,6 +2078,9 @@ typedef struct\n #define ARM_REG_OK_FOR_BASE_P(X) \t\t\\\n   ARM_REGNO_OK_FOR_BASE_P (REGNO (X))\n \n+#define ARM_REG_OK_FOR_INDEX_P(X) \t\t\\\n+  ARM_REGNO_OK_FOR_INDEX_P (REGNO (X))\n+\n #define THUMB1_REG_MODE_OK_FOR_BASE_P(X, MODE)\t\\\n   THUMB1_REGNO_MODE_OK_FOR_BASE_P (REGNO (X), MODE)\n \n@@ -2080,8 +2095,6 @@ typedef struct\n    ? THUMB1_REG_MODE_OK_FOR_BASE_P (X, MODE)\t\\\n    : ARM_REG_OK_FOR_BASE_P (X))\n \n-#define ARM_REG_OK_FOR_INDEX_P(X) ARM_REG_OK_FOR_BASE_P (X)\n-\n /* For 16-bit Thumb, a valid index register is anything that can be used in\n    a byte load instruction.  */\n #define THUMB1_REG_OK_FOR_INDEX_P(X) \\\n@@ -2479,10 +2492,12 @@ extern int making_const_table;\n \trtx base = XEXP (X, 0);\t\t\t\t\t\t\\\n \trtx index = XEXP (X, 1);\t\t\t\t\t\\\n \tHOST_WIDE_INT offset = 0;\t\t\t\t\t\\\n-\tif (GET_CODE (base) != REG)\t\t\t\t\t\\\n+\tif (GET_CODE (base) != REG\t\t\t\t\t\\\n+\t    || (GET_CODE (index) == REG && REGNO (index) == SP_REGNUM))\t\\\n \t  {\t\t\t\t\t\t\t\t\\\n \t    /* Ensure that BASE is a register.  */\t\t\t\\\n             /* (one of them must be).  */\t\t\t\t\\\n+\t    /* Also ensure the SP is not used as in index register.  */ \\\n \t    rtx temp = base;\t\t\t\t\t\t\\\n \t    base = index;\t\t\t\t\t\t\\\n \t    index = temp;\t\t\t\t\t\t\\"}, {"sha": "0c3ac40491c4e7aa179ac132f10889e2baf8caeb", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 41, "deletions": 37, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5c630c3126fe4e6e681c4638752b64979b40029/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5c630c3126fe4e6e681c4638752b64979b40029/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=f5c630c3126fe4e6e681c4638752b64979b40029", "patch": "@@ -517,12 +517,14 @@\n )\n \n (define_insn_and_split \"*arm_addsi3\"\n-  [(set (match_operand:SI          0 \"s_register_operand\" \"=r,r,r\")\n-\t(plus:SI (match_operand:SI 1 \"s_register_operand\" \"%r,r,r\")\n-\t\t (match_operand:SI 2 \"reg_or_int_operand\" \"rI,L,?n\")))]\n+  [(set (match_operand:SI          0 \"s_register_operand\" \"=r, !k,r, !k,r\")\n+\t(plus:SI (match_operand:SI 1 \"s_register_operand\" \"%rk,!k,rk,!k,r\")\n+\t\t (match_operand:SI 2 \"reg_or_int_operand\" \"rI, rI,L, L,?n\")))]\n   \"TARGET_32BIT\"\n   \"@\n    add%?\\\\t%0, %1, %2\n+   add%?\\\\t%0, %1, %2\n+   sub%?\\\\t%0, %1, #%n2\n    sub%?\\\\t%0, %1, #%n2\n    #\"\n   \"TARGET_32BIT &&\n@@ -536,7 +538,7 @@\n \t\t      operands[1], 0);\n   DONE;\n   \"\n-  [(set_attr \"length\" \"4,4,16\")\n+  [(set_attr \"length\" \"4,4,4,4,16\")\n    (set_attr \"predicable\" \"yes\")]\n )\n \n@@ -545,9 +547,9 @@\n ;; so never allow those alternatives to match if reloading is needed.\n \n (define_insn \"*thumb1_addsi3\"\n-  [(set (match_operand:SI          0 \"register_operand\" \"=l,l,l,*r,*h,l,!k\")\n+  [(set (match_operand:SI          0 \"register_operand\" \"=l,l,l,*rk,*hk,l,!k\")\n \t(plus:SI (match_operand:SI 1 \"register_operand\" \"%0,0,l,*0,*0,!k,!k\")\n-\t\t (match_operand:SI 2 \"nonmemory_operand\" \"I,J,lL,*h,*r,!M,!O\")))]\n+\t\t (match_operand:SI 2 \"nonmemory_operand\" \"I,J,lL,*hk,*rk,!M,!O\")))]\n   \"TARGET_THUMB1\"\n   \"*\n    static const char * const asms[] = \n@@ -991,12 +993,13 @@\n \n ; ??? Check Thumb-2 split length\n (define_insn_and_split \"*arm_subsi3_insn\"\n-  [(set (match_operand:SI           0 \"s_register_operand\" \"=r,r\")\n-\t(minus:SI (match_operand:SI 1 \"reg_or_int_operand\" \"rI,?n\")\n-\t\t  (match_operand:SI 2 \"s_register_operand\" \"r,r\")))]\n+  [(set (match_operand:SI           0 \"s_register_operand\" \"=r,rk,r\")\n+\t(minus:SI (match_operand:SI 1 \"reg_or_int_operand\" \"rI,!k,?n\")\n+\t\t  (match_operand:SI 2 \"s_register_operand\" \"r, r, r\")))]\n   \"TARGET_32BIT\"\n   \"@\n    rsb%?\\\\t%0, %2, %1\n+   sub%?\\\\t%0, %1, %2\n    #\"\n   \"TARGET_32BIT\n    && GET_CODE (operands[1]) == CONST_INT\n@@ -1007,7 +1010,7 @@\n                       INTVAL (operands[1]), operands[0], operands[2], 0);\n   DONE;\n   \"\n-  [(set_attr \"length\" \"4,16\")\n+  [(set_attr \"length\" \"4,4,16\")\n    (set_attr \"predicable\" \"yes\")]\n )\n \n@@ -4786,22 +4789,23 @@\n )\n \n (define_insn \"*arm_movsi_insn\"\n-  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=r,r,r,r, m\")\n-\t(match_operand:SI 1 \"general_operand\"      \"rI,K,N,mi,r\"))]\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rk,r,r,r,rk,m\")\n+\t(match_operand:SI 1 \"general_operand\"      \"rk, I,K,N,mi,rk\"))]\n   \"TARGET_ARM && ! TARGET_IWMMXT\n    && !(TARGET_HARD_FLOAT && TARGET_VFP)\n    && (   register_operand (operands[0], SImode)\n        || register_operand (operands[1], SImode))\"\n   \"@\n+   mov%?\\\\t%0, %1\n    mov%?\\\\t%0, %1\n    mvn%?\\\\t%0, #%B1\n    movw%?\\\\t%0, %1\n    ldr%?\\\\t%0, %1\n    str%?\\\\t%1, %0\"\n-  [(set_attr \"type\" \"*,*,*,load1,store1\")\n+  [(set_attr \"type\" \"*,*,*,*,load1,store1\")\n    (set_attr \"predicable\" \"yes\")\n-   (set_attr \"pool_range\" \"*,*,*,4096,*\")\n-   (set_attr \"neg_pool_range\" \"*,*,*,4084,*\")]\n+   (set_attr \"pool_range\" \"*,*,*,*,4096,*\")\n+   (set_attr \"neg_pool_range\" \"*,*,*,*,4084,*\")]\n )\n \n (define_split\n@@ -4819,8 +4823,8 @@\n )\n \n (define_insn \"*thumb1_movsi_insn\"\n-  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=l,l,l,l,l,>,l, m,*lh\")\n-\t(match_operand:SI 1 \"general_operand\"      \"l, I,J,K,>,l,mi,l,*lh\"))]\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=l,l,l,l,l,>,l, m,*lhk\")\n+\t(match_operand:SI 1 \"general_operand\"      \"l, I,J,K,>,l,mi,l,*lhk\"))]\n   \"TARGET_THUMB1\n    && (   register_operand (operands[0], SImode) \n        || register_operand (operands[1], SImode))\"\n@@ -10181,13 +10185,13 @@\n ; reversed, check that the memory references aren't volatile.\n \n (define_peephole\n-  [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=rk\")\n         (match_operand:SI 4 \"memory_operand\" \"m\"))\n-   (set (match_operand:SI 1 \"s_register_operand\" \"=r\")\n+   (set (match_operand:SI 1 \"s_register_operand\" \"=rk\")\n         (match_operand:SI 5 \"memory_operand\" \"m\"))\n-   (set (match_operand:SI 2 \"s_register_operand\" \"=r\")\n+   (set (match_operand:SI 2 \"s_register_operand\" \"=rk\")\n         (match_operand:SI 6 \"memory_operand\" \"m\"))\n-   (set (match_operand:SI 3 \"s_register_operand\" \"=r\")\n+   (set (match_operand:SI 3 \"s_register_operand\" \"=rk\")\n         (match_operand:SI 7 \"memory_operand\" \"m\"))]\n   \"TARGET_ARM && load_multiple_sequence (operands, 4, NULL, NULL, NULL)\"\n   \"*\n@@ -10196,11 +10200,11 @@\n )\n \n (define_peephole\n-  [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=rk\")\n         (match_operand:SI 3 \"memory_operand\" \"m\"))\n-   (set (match_operand:SI 1 \"s_register_operand\" \"=r\")\n+   (set (match_operand:SI 1 \"s_register_operand\" \"=rk\")\n         (match_operand:SI 4 \"memory_operand\" \"m\"))\n-   (set (match_operand:SI 2 \"s_register_operand\" \"=r\")\n+   (set (match_operand:SI 2 \"s_register_operand\" \"=rk\")\n         (match_operand:SI 5 \"memory_operand\" \"m\"))]\n   \"TARGET_ARM && load_multiple_sequence (operands, 3, NULL, NULL, NULL)\"\n   \"*\n@@ -10209,9 +10213,9 @@\n )\n \n (define_peephole\n-  [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=rk\")\n         (match_operand:SI 2 \"memory_operand\" \"m\"))\n-   (set (match_operand:SI 1 \"s_register_operand\" \"=r\")\n+   (set (match_operand:SI 1 \"s_register_operand\" \"=rk\")\n         (match_operand:SI 3 \"memory_operand\" \"m\"))]\n   \"TARGET_ARM && load_multiple_sequence (operands, 2, NULL, NULL, NULL)\"\n   \"*\n@@ -10221,13 +10225,13 @@\n \n (define_peephole\n   [(set (match_operand:SI 4 \"memory_operand\" \"=m\")\n-        (match_operand:SI 0 \"s_register_operand\" \"r\"))\n+        (match_operand:SI 0 \"s_register_operand\" \"rk\"))\n    (set (match_operand:SI 5 \"memory_operand\" \"=m\")\n-        (match_operand:SI 1 \"s_register_operand\" \"r\"))\n+        (match_operand:SI 1 \"s_register_operand\" \"rk\"))\n    (set (match_operand:SI 6 \"memory_operand\" \"=m\")\n-        (match_operand:SI 2 \"s_register_operand\" \"r\"))\n+        (match_operand:SI 2 \"s_register_operand\" \"rk\"))\n    (set (match_operand:SI 7 \"memory_operand\" \"=m\")\n-        (match_operand:SI 3 \"s_register_operand\" \"r\"))]\n+        (match_operand:SI 3 \"s_register_operand\" \"rk\"))]\n   \"TARGET_ARM && store_multiple_sequence (operands, 4, NULL, NULL, NULL)\"\n   \"*\n   return emit_stm_seq (operands, 4);\n@@ -10236,11 +10240,11 @@\n \n (define_peephole\n   [(set (match_operand:SI 3 \"memory_operand\" \"=m\")\n-        (match_operand:SI 0 \"s_register_operand\" \"r\"))\n+        (match_operand:SI 0 \"s_register_operand\" \"rk\"))\n    (set (match_operand:SI 4 \"memory_operand\" \"=m\")\n-        (match_operand:SI 1 \"s_register_operand\" \"r\"))\n+        (match_operand:SI 1 \"s_register_operand\" \"rk\"))\n    (set (match_operand:SI 5 \"memory_operand\" \"=m\")\n-        (match_operand:SI 2 \"s_register_operand\" \"r\"))]\n+        (match_operand:SI 2 \"s_register_operand\" \"rk\"))]\n   \"TARGET_ARM && store_multiple_sequence (operands, 3, NULL, NULL, NULL)\"\n   \"*\n   return emit_stm_seq (operands, 3);\n@@ -10249,9 +10253,9 @@\n \n (define_peephole\n   [(set (match_operand:SI 2 \"memory_operand\" \"=m\")\n-        (match_operand:SI 0 \"s_register_operand\" \"r\"))\n+        (match_operand:SI 0 \"s_register_operand\" \"rk\"))\n    (set (match_operand:SI 3 \"memory_operand\" \"=m\")\n-        (match_operand:SI 1 \"s_register_operand\" \"r\"))]\n+        (match_operand:SI 1 \"s_register_operand\" \"rk\"))]\n   \"TARGET_ARM && store_multiple_sequence (operands, 2, NULL, NULL, NULL)\"\n   \"*\n   return emit_stm_seq (operands, 2);\n@@ -10610,8 +10614,8 @@\n \n (define_insn \"stack_tie\"\n   [(set (mem:BLK (scratch))\n-\t(unspec:BLK [(match_operand:SI 0 \"s_register_operand\" \"r\")\n-\t\t     (match_operand:SI 1 \"s_register_operand\" \"r\")]\n+\t(unspec:BLK [(match_operand:SI 0 \"s_register_operand\" \"rk\")\n+\t\t     (match_operand:SI 1 \"s_register_operand\" \"rk\")]\n \t\t    UNSPEC_PRLG_STK))]\n   \"\"\n   \"\""}, {"sha": "0f441ad181c45961ddafde5cab695f9690cfc6c4", "filename": "gcc/config/arm/constraints.md", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5c630c3126fe4e6e681c4638752b64979b40029/gcc%2Fconfig%2Farm%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5c630c3126fe4e6e681c4638752b64979b40029/gcc%2Fconfig%2Farm%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fconstraints.md?ref=f5c630c3126fe4e6e681c4638752b64979b40029", "patch": "@@ -20,8 +20,8 @@\n \n ;; The following register constraints have been used:\n ;; - in ARM/Thumb-2 state: f, t, v, w, x, y, z\n-;; - in Thumb state: h, k, b\n-;; - in both states: l, c\n+;; - in Thumb state: h, b\n+;; - in both states: l, c, k\n ;; In ARM state, 'l' is an alias for 'r'\n \n ;; The following normal constraints have been used:\n@@ -65,9 +65,8 @@\n (define_register_constraint \"h\" \"TARGET_THUMB ? HI_REGS : NO_REGS\"\n  \"In Thumb state the core registers @code{r8}-@code{r15}.\")\n \n-(define_register_constraint \"k\" \"TARGET_THUMB ? STACK_REG : NO_REGS\"\n- \"@internal\n-  Thumb only.  The stack register.\")\n+(define_register_constraint \"k\" \"STACK_REG\"\n+ \"@internal The stack register.\")\n \n (define_register_constraint \"b\" \"TARGET_THUMB ? BASE_REGS : NO_REGS\"\n  \"@internal"}, {"sha": "633aaaa875f98a3adff6c41a868607113b241ed8", "filename": "gcc/config/arm/iwmmxt.md", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5c630c3126fe4e6e681c4638752b64979b40029/gcc%2Fconfig%2Farm%2Fiwmmxt.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5c630c3126fe4e6e681c4638752b64979b40029/gcc%2Fconfig%2Farm%2Fiwmmxt.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fiwmmxt.md?ref=f5c630c3126fe4e6e681c4638752b64979b40029", "patch": "@@ -105,28 +105,29 @@\n )\n \n (define_insn \"*iwmmxt_movsi_insn\"\n-  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=r,r,r, m,z,r,?z,Uy,z\")\n-\t(match_operand:SI 1 \"general_operand\"      \"rI,K,mi,r,r,z,Uy,z,z\"))]\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rk,r,r,rk, m,z,r,?z,Uy,z\")\n+\t(match_operand:SI 1 \"general_operand\"      \"rk, I,K,mi,rk,r,z,Uy,z, z\"))]\n   \"TARGET_REALLY_IWMMXT\n    && (   register_operand (operands[0], SImode)\n        || register_operand (operands[1], SImode))\"\n   \"*\n    switch (which_alternative)\n    {\n    case 0: return \\\"mov\\\\t%0, %1\\\";\n-   case 1: return \\\"mvn\\\\t%0, #%B1\\\";\n-   case 2: return \\\"ldr\\\\t%0, %1\\\";\n-   case 3: return \\\"str\\\\t%1, %0\\\";\n-   case 4: return \\\"tmcr\\\\t%0, %1\\\";\n-   case 5: return \\\"tmrc\\\\t%0, %1\\\";\n-   case 6: return arm_output_load_gr (operands);\n-   case 7: return \\\"wstrw\\\\t%1, %0\\\";\n+   case 1: return \\\"mov\\\\t%0, %1\\\";\n+   case 2: return \\\"mvn\\\\t%0, #%B1\\\";\n+   case 3: return \\\"ldr\\\\t%0, %1\\\";\n+   case 4: return \\\"str\\\\t%1, %0\\\";\n+   case 5: return \\\"tmcr\\\\t%0, %1\\\";\n+   case 6: return \\\"tmrc\\\\t%0, %1\\\";\n+   case 7: return arm_output_load_gr (operands);\n+   case 8: return \\\"wstrw\\\\t%1, %0\\\";\n    default:return \\\"wstrw\\\\t%1, [sp, #-4]!\\;wldrw\\\\t%0, [sp], #4\\\\t@move CG reg\\\";\n   }\"\n-  [(set_attr \"type\"           \"*,*,load1,store1,*,*,load1,store1,*\")\n-   (set_attr \"length\"         \"*,*,*,        *,*,*,  16,     *,8\")\n-   (set_attr \"pool_range\"     \"*,*,4096,     *,*,*,1024,     *,*\")\n-   (set_attr \"neg_pool_range\" \"*,*,4084,     *,*,*,   *,  1012,*\")\n+  [(set_attr \"type\"           \"*,*,*,load1,store1,*,*,load1,store1,*\")\n+   (set_attr \"length\"         \"*,*,*,*,        *,*,*,  16,     *,8\")\n+   (set_attr \"pool_range\"     \"*,*,*,4096,     *,*,*,1024,     *,*\")\n+   (set_attr \"neg_pool_range\" \"*,*,*,4084,     *,*,*,   *,  1012,*\")\n    ;; Note - the \"predicable\" attribute is not allowed to have alternatives.\n    ;; Since the wSTRw wCx instruction is not predicable, we cannot support\n    ;; predicating any of the alternatives in this template.  Instead,"}, {"sha": "0efe31f0f6ddda9be99a6ab91f9bdc2ac7394475", "filename": "gcc/config/arm/thumb2.md", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5c630c3126fe4e6e681c4638752b64979b40029/gcc%2Fconfig%2Farm%2Fthumb2.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5c630c3126fe4e6e681c4638752b64979b40029/gcc%2Fconfig%2Farm%2Fthumb2.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fthumb2.md?ref=f5c630c3126fe4e6e681c4638752b64979b40029", "patch": "@@ -224,22 +224,23 @@\n )\n \n (define_insn \"*thumb2_movsi_insn\"\n-  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=r,r,r,r, m\")\n-\t(match_operand:SI 1 \"general_operand\"\t   \"rI,K,N,mi,r\"))]\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rk,r,r,r,rk,m\")\n+\t(match_operand:SI 1 \"general_operand\"\t   \"rk ,I,K,N,mi,rk\"))]\n   \"TARGET_THUMB2 && ! TARGET_IWMMXT\n    && !(TARGET_HARD_FLOAT && TARGET_VFP)\n    && (   register_operand (operands[0], SImode)\n        || register_operand (operands[1], SImode))\"\n   \"@\n+   mov%?\\\\t%0, %1\n    mov%?\\\\t%0, %1\n    mvn%?\\\\t%0, #%B1\n    movw%?\\\\t%0, %1\n    ldr%?\\\\t%0, %1\n    str%?\\\\t%1, %0\"\n-  [(set_attr \"type\" \"*,*,*,load1,store1\")\n+  [(set_attr \"type\" \"*,*,*,*,load1,store1\")\n    (set_attr \"predicable\" \"yes\")\n-   (set_attr \"pool_range\" \"*,*,*,4096,*\")\n-   (set_attr \"neg_pool_range\" \"*,*,*,0,*\")]\n+   (set_attr \"pool_range\" \"*,*,*,*,4096,*\")\n+   (set_attr \"neg_pool_range\" \"*,*,*,*,0,*\")]\n )\n \n ;; ??? We can probably do better with thumb2"}, {"sha": "23aa202778f33d16fc0267f6203f84d646ebdfd0", "filename": "gcc/config/arm/vfp.md", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5c630c3126fe4e6e681c4638752b64979b40029/gcc%2Fconfig%2Farm%2Fvfp.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5c630c3126fe4e6e681c4638752b64979b40029/gcc%2Fconfig%2Farm%2Fvfp.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fvfp.md?ref=f5c630c3126fe4e6e681c4638752b64979b40029", "patch": "@@ -120,77 +120,77 @@\n ;; ??? For now do not allow loading constants into vfp regs.  This causes\n ;; problems because small constants get converted into adds.\n (define_insn \"*arm_movsi_vfp\"\n-  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=r,r,r,r ,m,*t,r,*t,*t, *Uv\")\n-      (match_operand:SI 1 \"general_operand\"\t   \"rI,K,N,mi,r,r,*t,*t,*Uvi,*t\"))]\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rk,r,r,r,rk,m ,*t,r,*t,*t, *Uv\")\n+      (match_operand:SI 1 \"general_operand\"\t   \"rk, I,K,N,mi,rk,r,*t,*t,*Uvi,*t\"))]\n   \"TARGET_ARM && TARGET_VFP && TARGET_HARD_FLOAT\n    && (   s_register_operand (operands[0], SImode)\n        || s_register_operand (operands[1], SImode))\"\n   \"*\n   switch (which_alternative)\n     {\n-    case 0:\n+    case 0: case 1:\n       return \\\"mov%?\\\\t%0, %1\\\";\n-    case 1:\n-      return \\\"mvn%?\\\\t%0, #%B1\\\";\n     case 2:\n-      return \\\"movw%?\\\\t%0, %1\\\";\n+      return \\\"mvn%?\\\\t%0, #%B1\\\";\n     case 3:\n-      return \\\"ldr%?\\\\t%0, %1\\\";\n+      return \\\"movw%?\\\\t%0, %1\\\";\n     case 4:\n-      return \\\"str%?\\\\t%1, %0\\\";\n+      return \\\"ldr%?\\\\t%0, %1\\\";\n     case 5:\n-      return \\\"fmsr%?\\\\t%0, %1\\\\t%@ int\\\";\n+      return \\\"str%?\\\\t%1, %0\\\";\n     case 6:\n-      return \\\"fmrs%?\\\\t%0, %1\\\\t%@ int\\\";\n+      return \\\"fmsr%?\\\\t%0, %1\\\\t%@ int\\\";\n     case 7:\n+      return \\\"fmrs%?\\\\t%0, %1\\\\t%@ int\\\";\n+    case 8:\n       return \\\"fcpys%?\\\\t%0, %1\\\\t%@ int\\\";\n-    case 8: case 9:\n+    case 9: case 10:\n       return output_move_vfp (operands);\n     default:\n       gcc_unreachable ();\n     }\n   \"\n   [(set_attr \"predicable\" \"yes\")\n-   (set_attr \"type\" \"*,*,*,load1,store1,r_2_f,f_2_r,ffarith,f_loads,f_stores\")\n-   (set_attr \"pool_range\"     \"*,*,*,4096,*,*,*,*,1020,*\")\n-   (set_attr \"neg_pool_range\" \"*,*,*,4084,*,*,*,*,1008,*\")]\n+   (set_attr \"type\" \"*,*,*,*,load1,store1,r_2_f,f_2_r,ffarith,f_loads,f_stores\")\n+   (set_attr \"pool_range\"     \"*,*,*,*,4096,*,*,*,*,1020,*\")\n+   (set_attr \"neg_pool_range\" \"*,*,*,*,4084,*,*,*,*,1008,*\")]\n )\n \n (define_insn \"*thumb2_movsi_vfp\"\n-  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=r,r,r,r,m,*t,r,*t,*t, *Uv\")\n-      (match_operand:SI 1 \"general_operand\"\t   \"rI,K,N,mi,r,r,*t,*t,*Uvi,*t\"))]\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rk,r,r,r,rk,m,*t,r, *t,*t, *Uv\")\n+      (match_operand:SI 1 \"general_operand\"\t   \"rk, I,K,N,mi,rk,r,*t,*t,*Uvi,*t\"))]\n   \"TARGET_THUMB2 && TARGET_VFP && TARGET_HARD_FLOAT\n    && (   s_register_operand (operands[0], SImode)\n        || s_register_operand (operands[1], SImode))\"\n   \"*\n   switch (which_alternative)\n     {\n-    case 0:\n+    case 0: case 1:\n       return \\\"mov%?\\\\t%0, %1\\\";\n-    case 1:\n-      return \\\"mvn%?\\\\t%0, #%B1\\\";\n     case 2:\n-      return \\\"movw%?\\\\t%0, %1\\\";\n+      return \\\"mvn%?\\\\t%0, #%B1\\\";\n     case 3:\n-      return \\\"ldr%?\\\\t%0, %1\\\";\n+      return \\\"movw%?\\\\t%0, %1\\\";\n     case 4:\n-      return \\\"str%?\\\\t%1, %0\\\";\n+      return \\\"ldr%?\\\\t%0, %1\\\";\n     case 5:\n-      return \\\"fmsr%?\\\\t%0, %1\\\\t%@ int\\\";\n+      return \\\"str%?\\\\t%1, %0\\\";\n     case 6:\n-      return \\\"fmrs%?\\\\t%0, %1\\\\t%@ int\\\";\n+      return \\\"fmsr%?\\\\t%0, %1\\\\t%@ int\\\";\n     case 7:\n+      return \\\"fmrs%?\\\\t%0, %1\\\\t%@ int\\\";\n+    case 8:\n       return \\\"fcpys%?\\\\t%0, %1\\\\t%@ int\\\";\n-    case 8: case 9:\n+    case 9: case 10:\n       return output_move_vfp (operands);\n     default:\n       gcc_unreachable ();\n     }\n   \"\n   [(set_attr \"predicable\" \"yes\")\n-   (set_attr \"type\" \"*,*,*,load1,store1,r_2_f,f_2_r,ffarith,f_load,f_store\")\n-   (set_attr \"pool_range\"     \"*,*,*,4096,*,*,*,*,1020,*\")\n-   (set_attr \"neg_pool_range\" \"*,*,*,   0,*,*,*,*,1008,*\")]\n+   (set_attr \"type\" \"*,*,*,*,load1,store1,r_2_f,f_2_r,ffarith,f_load,f_store\")\n+   (set_attr \"pool_range\"     \"*,*,*,*,4096,*,*,*,*,1020,*\")\n+   (set_attr \"neg_pool_range\" \"*,*,*,*,   0,*,*,*,*,1008,*\")]\n )\n \n "}]}