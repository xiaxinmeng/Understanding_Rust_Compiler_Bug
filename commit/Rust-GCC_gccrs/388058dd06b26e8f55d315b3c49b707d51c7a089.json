{"sha": "388058dd06b26e8f55d315b3c49b707d51c7a089", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzg4MDU4ZGQwNmIyNmU4ZjU1ZDMxNWIzYzQ5YjcwN2Q1MWM3YTA4OQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2018-01-05T18:02:18Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2018-01-05T18:02:18Z"}, "message": "PR libstdc++/83626 handle ENOENT due to filesystem race\n\n\tPR libstdc++/83626\n\t* src/filesystem/ops.cc (remove(const path&, error_code&)): Do not\n\treport an error for ENOENT.\n\t(remove_all(const path&)): Fix type of result variable.\n\t(remove_all(const path&, error_code&)): Use non-throwing increment\n\tfor directory iterator. Call POSIX remove directly to avoid redundant\n\tcalls to symlink_status. Do not report errors for ENOENT.\n\t* src/filesystem/std-ops.cc: Likewise.\n\t* testsuite/27_io/filesystem/operations/remove_all.cc: Test throwing\n\toverload.\n\t* testsuite/experimental/filesystem/operations/remove_all.cc:\n\tLikewise.\n\nFrom-SVN: r256283", "tree": {"sha": "3ed7c9569ed1cbe6f874fc17ea1c273eefa56808", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3ed7c9569ed1cbe6f874fc17ea1c273eefa56808"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/388058dd06b26e8f55d315b3c49b707d51c7a089", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/388058dd06b26e8f55d315b3c49b707d51c7a089", "html_url": "https://github.com/Rust-GCC/gccrs/commit/388058dd06b26e8f55d315b3c49b707d51c7a089", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/388058dd06b26e8f55d315b3c49b707d51c7a089/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "958d63e911b3fd4c3172e7c87b2e6b6050374f76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/958d63e911b3fd4c3172e7c87b2e6b6050374f76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/958d63e911b3fd4c3172e7c87b2e6b6050374f76"}], "stats": {"total": 133, "additions": 111, "deletions": 22}, "files": [{"sha": "fb2eb63a6936b9e4147d9ead1f3d71d7753265db", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/388058dd06b26e8f55d315b3c49b707d51c7a089/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/388058dd06b26e8f55d315b3c49b707d51c7a089/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=388058dd06b26e8f55d315b3c49b707d51c7a089", "patch": "@@ -1,3 +1,18 @@\n+2018-01-05  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/83626\n+\t* src/filesystem/ops.cc (remove(const path&, error_code&)): Do not\n+\treport an error for ENOENT.\n+\t(remove_all(const path&)): Fix type of result variable.\n+\t(remove_all(const path&, error_code&)): Use non-throwing increment\n+\tfor directory iterator. Call POSIX remove directly to avoid redundant\n+\tcalls to symlink_status. Do not report errors for ENOENT.\n+\t* src/filesystem/std-ops.cc: Likewise.\n+\t* testsuite/27_io/filesystem/operations/remove_all.cc: Test throwing\n+\toverload.\n+\t* testsuite/experimental/filesystem/operations/remove_all.cc:\n+\tLikewise.\n+\n 2018-01-04  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/83626"}, {"sha": "3690fb94d63d7031dfef08eca17d0ca65a521122", "filename": "libstdc++-v3/src/filesystem/ops.cc", "status": "modified", "additions": 28, "deletions": 11, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/388058dd06b26e8f55d315b3c49b707d51c7a089/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fops.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/388058dd06b26e8f55d315b3c49b707d51c7a089/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fops.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fops.cc?ref=388058dd06b26e8f55d315b3c49b707d51c7a089", "patch": "@@ -1025,21 +1025,24 @@ fs::remove(const path& p, error_code& ec) noexcept\n       ec.clear();\n       return false; // Nothing to do, not an error.\n     }\n-  if (::remove(p.c_str()) != 0)\n+  if (::remove(p.c_str()) == 0)\n     {\n-      ec.assign(errno, std::generic_category());\n-      return false;\n+      ec.clear();\n+      return true;\n     }\n-  ec.clear();\n-  return true;\n+  else if (errno == ENOENT)\n+    ec.clear();\n+  else\n+    ec.assign(errno, std::generic_category());\n+  return false;\n }\n \n \n std::uintmax_t\n fs::remove_all(const path& p)\n {\n   error_code ec;\n-  bool result = remove_all(p, ec);\n+  const auto result = remove_all(p, ec);\n   if (ec)\n     _GLIBCXX_THROW_OR_ABORT(filesystem_error(\"cannot remove all\", p, ec));\n   return result;\n@@ -1051,15 +1054,29 @@ fs::remove_all(const path& p, error_code& ec) noexcept\n   const auto s = symlink_status(p, ec);\n   if (!status_known(s))\n     return -1;\n+\n   ec.clear();\n+  if (s.type() == file_type::not_found)\n+    return 0;\n+\n   uintmax_t count = 0;\n   if (s.type() == file_type::directory)\n-    for (directory_iterator d(p, ec), end; !ec && d != end; ++d)\n-      count += fs::remove_all(d->path(), ec);\n-  if (!ec && fs::remove(p, ec))\n+    {\n+      for (directory_iterator d(p, ec), end; !ec && d != end; d.increment(ec))\n+\tcount += fs::remove_all(d->path(), ec);\n+      if (ec.value() == ENOENT)\n+\tec.clear();\n+      else if (ec)\n+\treturn -1;\n+    }\n+\n+  if (::remove(p.c_str()) == 0)\n     ++count;\n-  if (ec)\n-    return -1;\n+  else if (errno != ENOENT)\n+    {\n+      ec.assign(errno, std::generic_category());\n+      return -1;\n+    }\n   return count;\n }\n "}, {"sha": "2411bbb797713a5c5687c5a7cac82574224bf2ad", "filename": "libstdc++-v3/src/filesystem/std-ops.cc", "status": "modified", "additions": 28, "deletions": 11, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/388058dd06b26e8f55d315b3c49b707d51c7a089/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fstd-ops.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/388058dd06b26e8f55d315b3c49b707d51c7a089/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fstd-ops.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fstd-ops.cc?ref=388058dd06b26e8f55d315b3c49b707d51c7a089", "patch": "@@ -1274,21 +1274,24 @@ fs::remove(const path& p, error_code& ec) noexcept\n       ec.clear();\n       return false; // Nothing to do, not an error.\n     }\n-  if (::remove(p.c_str()) != 0)\n+  if (::remove(p.c_str()) == 0)\n     {\n-      ec.assign(errno, std::generic_category());\n-      return false;\n+      ec.clear();\n+      return true;\n     }\n-  ec.clear();\n-  return true;\n+  else if (errno == ENOENT)\n+    ec.clear();\n+  else\n+    ec.assign(errno, std::generic_category());\n+  return false;\n }\n \n \n std::uintmax_t\n fs::remove_all(const path& p)\n {\n   error_code ec;\n-  bool result = remove_all(p, ec);\n+  const auto result = remove_all(p, ec);\n   if (ec)\n     _GLIBCXX_THROW_OR_ABORT(filesystem_error(\"cannot remove all\", p, ec));\n   return result;\n@@ -1300,15 +1303,29 @@ fs::remove_all(const path& p, error_code& ec)\n   const auto s = symlink_status(p, ec);\n   if (!status_known(s))\n     return -1;\n+\n   ec.clear();\n+  if (s.type() == file_type::not_found)\n+    return 0;\n+\n   uintmax_t count = 0;\n   if (s.type() == file_type::directory)\n-    for (directory_iterator d(p, ec), end; !ec && d != end; ++d)\n-      count += fs::remove_all(d->path(), ec);\n-  if (!ec && fs::remove(p, ec))\n+    {\n+      for (directory_iterator d(p, ec), end; !ec && d != end; d.increment(ec))\n+\tcount += fs::remove_all(d->path(), ec);\n+      if (ec.value() == ENOENT)\n+\tec.clear();\n+      else if (ec)\n+\treturn -1;\n+    }\n+\n+  if (::remove(p.c_str()) == 0)\n     ++count;\n-  if (ec)\n-    return -1;\n+  else if (errno != ENOENT)\n+    {\n+      ec.assign(errno, std::generic_category());\n+      return -1;\n+    }\n   return count;\n }\n "}, {"sha": "633cde57243f55854907d1956abf2fb6aa56e89c", "filename": "libstdc++-v3/testsuite/27_io/filesystem/operations/remove_all.cc", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/388058dd06b26e8f55d315b3c49b707d51c7a089/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fremove_all.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/388058dd06b26e8f55d315b3c49b707d51c7a089/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fremove_all.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fremove_all.cc?ref=388058dd06b26e8f55d315b3c49b707d51c7a089", "patch": "@@ -85,8 +85,28 @@ test01()\n   b2.path.clear();\n }\n \n+void\n+test02()\n+{\n+  const auto dir = __gnu_test::nonexistent_path();\n+  create_directories(dir/\"a/b/c\");\n+  std::uintmax_t n = remove_all(dir/\"a\");\n+  VERIFY( n == 3 );\n+  VERIFY( exists(dir) );\n+  VERIFY( !exists(dir/\"a\") );\n+\n+  n = remove_all(dir/\"a\");\n+  VERIFY( n == 0 );\n+  VERIFY( exists(dir) );\n+\n+  n = remove_all(dir);\n+  VERIFY( n == 1 );\n+  VERIFY( !exists(dir) );\n+}\n+\n int\n main()\n {\n   test01();\n+  test02();\n }"}, {"sha": "67f6e989d27a4ed6e67de76f179d40dd4fd02171", "filename": "libstdc++-v3/testsuite/experimental/filesystem/operations/remove_all.cc", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/388058dd06b26e8f55d315b3c49b707d51c7a089/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fremove_all.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/388058dd06b26e8f55d315b3c49b707d51c7a089/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fremove_all.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fremove_all.cc?ref=388058dd06b26e8f55d315b3c49b707d51c7a089", "patch": "@@ -85,8 +85,28 @@ test01()\n   b2.path.clear();\n }\n \n+void\n+test02()\n+{\n+  const auto dir = __gnu_test::nonexistent_path();\n+  create_directories(dir/\"a/b/c\");\n+  std::uintmax_t n = remove_all(dir/\"a\");\n+  VERIFY( n == 3 );\n+  VERIFY( exists(dir) );\n+  VERIFY( !exists(dir/\"a\") );\n+\n+  n = remove_all(dir/\"a\");\n+  VERIFY( n == 0 );\n+  VERIFY( exists(dir) );\n+\n+  n = remove_all(dir);\n+  VERIFY( n == 1 );\n+  VERIFY( !exists(dir) );\n+}\n+\n int\n main()\n {\n   test01();\n+  test02();\n }"}]}