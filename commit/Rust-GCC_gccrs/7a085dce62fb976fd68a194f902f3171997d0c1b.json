{"sha": "7a085dce62fb976fd68a194f902f3171997d0c1b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2EwODVkY2U2MmZiOTc2ZmQ2OGExOTRmOTAyZjMxNzE5OTdkMGMxYg==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@codesourcery.com", "date": "2007-01-08T01:17:57Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2007-01-08T01:17:57Z"}, "message": "arm.c, [...]: Fix comment typos.\n\n\t* config/arm/arm.c, config/arm/arm.h, config/arm/arm.md,\n\tconfig/arm/thumb2.md: Fix comment typos.\n\t* doc/extend.texi: Fix a typo.\n\nFrom-SVN: r120566", "tree": {"sha": "c57f270822d20002f6eb273194deba4ae6d86599", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c57f270822d20002f6eb273194deba4ae6d86599"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7a085dce62fb976fd68a194f902f3171997d0c1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a085dce62fb976fd68a194f902f3171997d0c1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a085dce62fb976fd68a194f902f3171997d0c1b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a085dce62fb976fd68a194f902f3171997d0c1b/comments", "author": null, "committer": null, "parents": [{"sha": "cf7cf214f29449b9d9749031e53179872e8f12a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf7cf214f29449b9d9749031e53179872e8f12a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf7cf214f29449b9d9749031e53179872e8f12a1"}], "stats": {"total": 40, "additions": 23, "deletions": 17}, "files": [{"sha": "cc59fa0848669c81d58cc537bede6af8e1b79223", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a085dce62fb976fd68a194f902f3171997d0c1b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a085dce62fb976fd68a194f902f3171997d0c1b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7a085dce62fb976fd68a194f902f3171997d0c1b", "patch": "@@ -1,3 +1,9 @@\n+2007-01-08  Kazu Hirata  <kazu@codesourcery.com>\n+\n+\t* config/arm/arm.c, config/arm/arm.h, config/arm/arm.md,\n+\tconfig/arm/thumb2.md: Fix comment typos.\n+\t* doc/extend.texi: Fix a typo.\n+\n 2007-01-07  Eric Christopher  <echristo@apple.com>\n \n \t* configure.ac: Check for __stack_chk_fail for darwin."}, {"sha": "731dbe2af7d124bc698e46885ae481713be0154c", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a085dce62fb976fd68a194f902f3171997d0c1b/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a085dce62fb976fd68a194f902f3171997d0c1b/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=7a085dce62fb976fd68a194f902f3171997d0c1b", "patch": "@@ -449,7 +449,7 @@ static int thumb_call_reg_needed;\n #define FL_THUMB2     (1 << 16)\t      /* Thumb-2.  */\n #define FL_NOTM\t      (1 << 17)\t      /* Instructions not present in the 'M'\n \t\t\t\t\t profile.  */\n-#define FL_DIV\t      (1 << 18)\t      /* Hardware divde.  */\n+#define FL_DIV\t      (1 << 18)\t      /* Hardware divide.  */\n \n #define FL_IWMMXT     (1 << 29)\t      /* XScale v2 or \"Intel Wireless MMX technology\".  */\n \n@@ -2501,7 +2501,7 @@ arm_gen_constant (enum rtx_code code, enum machine_mode mode, rtx cond,\n \t    else\n \t      i -= 7;\n \t  }\n-\t/* Arm allows rotates by a multiple of two. Thumb-2 allows arbitary\n+\t/* Arm allows rotates by a multiple of two. Thumb-2 allows arbitrary\n \t   shifts.  */\n \tif (TARGET_ARM)\n \t  i -= 2;\n@@ -7702,11 +7702,11 @@ get_jump_table_size (rtx insn)\n       switch (modesize)\n \t{\n \tcase 1:\n-\t  /* Round up size  of TBB table to a hafword boundary.  */\n+\t  /* Round up size of TBB table to a haflword boundary.  */\n \t  size = (size + 1) & ~(HOST_WIDE_INT)1;\n \t  break;\n \tcase 2:\n-\t  /* No padding neccessary for TBH.  */\n+\t  /* No padding necessary for TBH.  */\n \t  break;\n \tcase 4:\n \t  /* Add two bytes for alignment on Thumb.  */\n@@ -10448,7 +10448,7 @@ arm_output_epilogue (rtx sibling)\n       if (frame_pointer_needed)\n \t{\n \t  /* For Thumb-2 restore sp from the frame pointer.\n-\t     Operand restrictions mean we have to incrememnt FP, then copy\n+\t     Operand restrictions mean we have to increment FP, then copy\n \t     to SP.  */\n \t  amount = offsets->locals_base - offsets->saved_regs;\n \t  operands[0] = hard_frame_pointer_rtx;\n@@ -11116,7 +11116,7 @@ arm_compute_initial_elimination_offset (unsigned int from, unsigned int to)\n }\n \n \n-/* Emit RTL to save coprocessor registers on funciton entry.  Returns the\n+/* Emit RTL to save coprocessor registers on function entry.  Returns the\n    number of bytes pushed.  */\n \n static int\n@@ -11592,7 +11592,7 @@ arm_print_operand (FILE *stream, rtx x, int code)\n   \n     case '.':\n       /* The current condition code for a condition code setting instruction.\n-\t Preceeded by 's' in unified syntax, otherwise followed by 's'.  */\n+\t Preceded by 's' in unified syntax, otherwise followed by 's'.  */\n       if (TARGET_UNIFIED_ASM)\n \t{\n \t  fputc('s', stream);\n@@ -12240,7 +12240,7 @@ thumb2_final_prescan_insn (rtx insn)\n \t  continue;\n \t}\n \n-      /* ??? Recognise conditional jumps, and combine them with IT blocks.  */\n+      /* ??? Recognize conditional jumps, and combine them with IT blocks.  */\n       if (GET_CODE (body) != COND_EXEC)\n \tbreak;\n       /* Allow up to 4 conditionally executed instructions in a block.  */\n@@ -16473,7 +16473,7 @@ arm_output_addr_const_extra (FILE *fp, rtx x)\n \n /* Output assembly for a shift instruction.\n    SET_FLAGS determines how the instruction modifies the condition codes.\n-   0 - Do not set conditiona codes.\n+   0 - Do not set condition codes.\n    1 - Set condition codes.\n    2 - Use smallest instruction.  */\n const char *"}, {"sha": "318d4f44624bf3c7a510dc2680678edb22de3ed2", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a085dce62fb976fd68a194f902f3171997d0c1b/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a085dce62fb976fd68a194f902f3171997d0c1b/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=7a085dce62fb976fd68a194f902f3171997d0c1b", "patch": "@@ -1881,7 +1881,7 @@ typedef struct\n #define ASM_OUTPUT_LABELREF(FILE, NAME)\t\t\\\n    arm_asm_output_labelref (FILE, NAME)\n \n-/* Output IT instructions for conditonally executed Thumb-2 instructions.  */\n+/* Output IT instructions for conditionally executed Thumb-2 instructions.  */\n #define ASM_OUTPUT_OPCODE(STREAM, PTR)\t\\\n   if (TARGET_THUMB2)\t\t\t\\\n     thumb2_asm_output_opcode (STREAM);\n@@ -1962,7 +1962,7 @@ typedef struct\n    The usual definition accepts all pseudo regs; the other rejects\n    them unless they have been allocated suitable hard regs.\n    The symbol REG_OK_STRICT causes the latter definition to be used.\n-   Thumb-2 has the same restictions as arm.  */\n+   Thumb-2 has the same restrictions as arm.  */\n #ifndef REG_OK_STRICT\n \n #define ARM_REG_OK_FOR_BASE_P(X)\t\t\\"}, {"sha": "564c755a3a676b50a20f81dd2797cc499359e07c", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a085dce62fb976fd68a194f902f3171997d0c1b/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a085dce62fb976fd68a194f902f3171997d0c1b/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=7a085dce62fb976fd68a194f902f3171997d0c1b", "patch": "@@ -10518,8 +10518,8 @@\n      \n     /* For the StrongARM at least it is faster to\n        use STR to store only a single register.\n-       In Thumb mode always use push, and the assmebler will pick\n-       something approporiate.  */\n+       In Thumb mode always use push, and the assembler will pick\n+       something appropriate.  */\n     if (num_saves == 1 && TARGET_ARM)\n       output_asm_insn (\\\"str\\\\t%1, [%m0, #-4]!\\\", operands);\n     else"}, {"sha": "a8fbcbcd3babb9b6806bf4b37bb0bc143e21c06e", "filename": "gcc/config/arm/thumb2.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a085dce62fb976fd68a194f902f3171997d0c1b/gcc%2Fconfig%2Farm%2Fthumb2.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a085dce62fb976fd68a194f902f3171997d0c1b/gcc%2Fconfig%2Farm%2Fthumb2.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fthumb2.md?ref=7a085dce62fb976fd68a194f902f3171997d0c1b", "patch": "@@ -277,7 +277,7 @@\n )\n \n ;; Thumb-2 always has load/store halfword instructions, so we can avoid a lot\n-;; of the messyness assocuated with the ARM patterns.\n+;; of the messyness associated with the ARM patterns.\n (define_insn \"*thumb2_movhi_insn\"\n   [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=r,r,m,r\")    \n \t(match_operand:HI 1 \"general_operand\"      \"rI,n,r,m\"))]\n@@ -858,7 +858,7 @@\n   \"TARGET_THUMB2\"\n   \"*\n     /* ??? Output both instructions unconditionally, otherwise the conditional\n-       executon insn counter gets confused.\n+       execution insn counter gets confused.\n     if (REGNO (operands[1])\n         != REGNO (operands[0]) + (WORDS_BIG_ENDIAN ? 1 : 0)) */\n       output_asm_insn (\\\"mov%?\\\\t%Q0, %1\\\", operands);\n@@ -890,7 +890,7 @@\n   \"TARGET_THUMB2\"\n   \"*\n     /* ??? Output both instructions unconditionally, otherwise the conditional\n-       executon insn counter gets confused.\n+       execution insn counter gets confused.\n     if (REGNO (operands[1])\n         != REGNO (operands[0]) + (WORDS_BIG_ENDIAN ? 1 : 0)) */\n       output_asm_insn (\\\"mov%?\\\\t%Q0, %1\\\", operands);"}, {"sha": "0eec8d2bd012f67fd02e98c585110d93dc1a0b89", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a085dce62fb976fd68a194f902f3171997d0c1b/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a085dce62fb976fd68a194f902f3171997d0c1b/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=7a085dce62fb976fd68a194f902f3171997d0c1b", "patch": "@@ -1965,7 +1965,7 @@ void f () __attribute__ ((interrupt (\"IRQ\")));\n \n Permissible values for this parameter are: IRQ, FIQ, SWI, ABORT and UNDEF@.\n \n-On ARMv7-M the interrupt type is ignored, and the attibute means the function\n+On ARMv7-M the interrupt type is ignored, and the attribute means the function\n may be called with a word aligned stack pointer.\n \n @item interrupt_handler"}]}