{"sha": "e23bd2185fae41772d012231e005b789b3a9e6dc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTIzYmQyMTg1ZmFlNDE3NzJkMDEyMjMxZTAwNWI3ODliM2E5ZTZkYw==", "commit": {"author": {"name": "Ira Ruben", "email": "ira@gcc.gnu.org", "date": "2002-01-10T18:51:24Z"}, "committer": {"name": "Ira Ruben", "email": "ira@gcc.gnu.org", "date": "2002-01-10T18:51:24Z"}, "message": "Added __attribute__((deprecated)) patches.\n\nFrom-SVN: r48743", "tree": {"sha": "ea5ad261c8b70074c9c7c1c74de2f56e14b206cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ea5ad261c8b70074c9c7c1c74de2f56e14b206cd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e23bd2185fae41772d012231e005b789b3a9e6dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e23bd2185fae41772d012231e005b789b3a9e6dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e23bd2185fae41772d012231e005b789b3a9e6dc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e23bd2185fae41772d012231e005b789b3a9e6dc/comments", "author": null, "committer": null, "parents": [{"sha": "47073a382432479b397a1654da5a24354e3f368a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47073a382432479b397a1654da5a24354e3f368a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47073a382432479b397a1654da5a24354e3f368a"}], "stats": {"total": 337, "additions": 316, "deletions": 21}, "files": [{"sha": "f342cd16bf3c50029d9d0c7b15b1300d60062368", "filename": "gcc/attribs.c", "status": "modified", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e23bd2185fae41772d012231e005b789b3a9e6dc/gcc%2Fattribs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e23bd2185fae41772d012231e005b789b3a9e6dc/gcc%2Fattribs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fattribs.c?ref=e23bd2185fae41772d012231e005b789b3a9e6dc", "patch": "@@ -82,6 +82,8 @@ static tree handle_no_limit_stack_attribute PARAMS ((tree *, tree, tree, int,\n \t\t\t\t\t\t     bool *));\n static tree handle_pure_attribute\tPARAMS ((tree *, tree, tree, int,\n \t\t\t\t\t\t bool *));\n+static tree handle_deprecated_attribute\tPARAMS ((tree *, tree, tree, int,\n+\t\t\t\t\t\t bool *));\n static tree handle_vector_size_attribute PARAMS ((tree *, tree, tree, int,\n \t\t\t\t\t\t  bool *));\n static tree vector_size_helper PARAMS ((tree, tree));\n@@ -138,6 +140,8 @@ static const struct attribute_spec c_common_attribute_table[] =\n \t\t\t      handle_no_limit_stack_attribute },\n   { \"pure\",                   0, 0, true,  false, false,\n \t\t\t      handle_pure_attribute },\n+  { \"deprecated\",             0, 0, false, false, false,\n+\t\t\t      handle_deprecated_attribute },\n   { \"vector_size\",\t      1, 1, false, true, false,\n \t\t\t      handle_vector_size_attribute },\n   { NULL,                     0, 0, false, false, false, NULL }\n@@ -1131,6 +1135,67 @@ handle_pure_attribute (node, name, args, flags, no_add_attrs)\n   return NULL_TREE;\n }\n \n+/* Handle a \"deprecated\" attribute; arguments as in\n+   struct attribute_spec.handler.  */\n+   \n+static tree\n+handle_deprecated_attribute (node, name, args, flags, no_add_attrs)\n+     tree *node;\n+     tree name;\n+     tree args ATTRIBUTE_UNUSED;\n+     int flags;\n+     bool *no_add_attrs;\n+{\n+  tree type = NULL_TREE;\n+  int warn = 0;\n+  char *what = NULL;\n+  \n+  if (DECL_P (*node))\n+    {\n+      tree decl = *node;\n+      type = TREE_TYPE (decl);\n+      \n+      if (TREE_CODE (decl) == TYPE_DECL\n+\t  || TREE_CODE (decl) == PARM_DECL\n+\t  || TREE_CODE (decl) == VAR_DECL\n+\t  || TREE_CODE (decl) == FUNCTION_DECL\n+\t  || TREE_CODE (decl) == FIELD_DECL)\n+\tTREE_DEPRECATED (decl) = 1;\n+      else\n+\twarn = 1;\n+    }\n+  else if (TYPE_P (*node))\n+    {\n+      if (!(flags & (int) ATTR_FLAG_TYPE_IN_PLACE))\n+\t*node = build_type_copy (*node);\n+      TREE_DEPRECATED (*node) = 1;\n+      type = *node;\n+    }\n+  else\n+    warn = 1;\n+  \n+  if (warn)\n+    {\n+      *no_add_attrs = true;\n+      if (type && TYPE_NAME (type))\n+\t{\n+\t  if (TREE_CODE (TYPE_NAME (type)) == IDENTIFIER_NODE)\n+\t    what = IDENTIFIER_POINTER (TYPE_NAME (*node));\n+\t  else if (TREE_CODE (TYPE_NAME (type)) == TYPE_DECL\n+\t\t   && DECL_NAME (TYPE_NAME (type)))\n+\t    what = IDENTIFIER_POINTER (DECL_NAME (TYPE_NAME (type)));\n+\t}\n+      if (what)\n+\twarning (\"`%s' attribute ignored for `%s'\",\n+\t\t  IDENTIFIER_POINTER (name), what);\n+      else\n+\twarning (\"`%s' attribute ignored\", \n+\t\t      IDENTIFIER_POINTER (name));\n+    }\n+\n+  return NULL_TREE;\n+}\n+\n /* Handle a \"vector_size\" attribute; arguments as in\n    struct attribute_spec.handler.  */\n "}, {"sha": "206c7718ba13103c0e3cb12c2f708794049cee7c", "filename": "gcc/c-decl.c", "status": "modified", "additions": 31, "deletions": 2, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e23bd2185fae41772d012231e005b789b3a9e6dc/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e23bd2185fae41772d012231e005b789b3a9e6dc/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=e23bd2185fae41772d012231e005b789b3a9e6dc", "patch": "@@ -439,6 +439,18 @@ int warn_multichar = 1;\n #endif\n int dollars_in_ident = DOLLARS_IN_IDENTIFIERS;\n \n+/* States indicating how grokdeclarator() should handle declspecs marked\n+   with __attribute__((deprecated)).  An object declared as\n+   __attribute__((deprecated)) suppresses warnings of uses of other\n+   deprecated items.  */\n+   \n+enum deprecated_states {\n+  DEPRECATED_NORMAL,\n+  DEPRECATED_SUPPRESS\n+};\n+\n+static enum deprecated_states deprecated_state = DEPRECATED_NORMAL;\n+\n /* Decode the string P as a language-specific option for C.\n    Return the number of strings consumed.  Should not complain\n    if it does not recognise the option.  */\n@@ -3420,9 +3432,18 @@ start_decl (declarator, declspecs, initialized, attributes)\n      int initialized;\n      tree attributes;\n {\n-  tree decl = grokdeclarator (declarator, declspecs,\n-\t\t\t      NORMAL, initialized);\n+  tree decl;\n   tree tem;\n+  \n+  /* An object declared as __attribute__((deprecated)) suppresses\n+     warnings of uses of other deprecated items.  */\n+  if (lookup_attribute (\"deprecated\", attributes))\n+    deprecated_state = DEPRECATED_SUPPRESS;\n+\n+  decl = grokdeclarator (declarator, declspecs,\n+\t\t\t NORMAL, initialized);\n+  \n+  deprecated_state = DEPRECATED_NORMAL;\n \n   if (warn_main > 0 && TREE_CODE (decl) != FUNCTION_DECL\n       && MAIN_NAME_P (DECL_NAME (decl)))\n@@ -4091,6 +4112,14 @@ grokdeclarator (declarator, declspecs, decl_context, initialized)\n     {\n       tree id = TREE_VALUE (spec);\n \n+      /* If the entire declaration is itself tagged as deprecated then\n+         suppress reports of deprecated items.  */\n+      if (id && TREE_DEPRECATED (id))\n+        {\n+\t  if (deprecated_state != DEPRECATED_SUPPRESS)\n+\t    warn_deprecated_use (id);\n+        }\n+\n       if (id == ridpointers[(int) RID_INT])\n \texplicit_int = 1;\n       if (id == ridpointers[(int) RID_CHAR])"}, {"sha": "2c476989c681e82e27e68fac13006e699e709379", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e23bd2185fae41772d012231e005b789b3a9e6dc/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e23bd2185fae41772d012231e005b789b3a9e6dc/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=e23bd2185fae41772d012231e005b789b3a9e6dc", "patch": "@@ -1199,6 +1199,10 @@ build_component_ref (datum, component)\n \t    TREE_READONLY (ref) = 1;\n \t  if (TREE_THIS_VOLATILE (datum) || TREE_THIS_VOLATILE (subdatum))\n \t    TREE_THIS_VOLATILE (ref) = 1;\n+\n+\t  if (TREE_DEPRECATED (subdatum))\n+\t    warn_deprecated_use (subdatum);\n+\n \t  datum = ref;\n \t}\n \n@@ -1415,6 +1419,9 @@ build_external_ref (id, fun)\n   tree decl = lookup_name (id);\n   tree objc_ivar = lookup_objc_ivar (id);\n \n+  if (decl && TREE_DEPRECATED (decl))\n+    warn_deprecated_use (decl);\n+\n   if (!decl || decl == error_mark_node || C_DECL_ANTICIPATED (decl))\n     {\n       if (objc_ivar)"}, {"sha": "0b8ec03375e7e9bd0f2b1089cd1976c27fdd264e", "filename": "gcc/cp/call.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e23bd2185fae41772d012231e005b789b3a9e6dc/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e23bd2185fae41772d012231e005b789b3a9e6dc/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=e23bd2185fae41772d012231e005b789b3a9e6dc", "patch": "@@ -407,7 +407,10 @@ build_call (function, parms)\n      throw without being declared throw().  */\n   nothrow = ((decl && TREE_NOTHROW (decl))\n \t     || TYPE_NOTHROW_P (TREE_TYPE (TREE_TYPE (function))));\n-  \n+\n+  if (decl && TREE_DEPRECATED (decl))\n+    warn_deprecated_use (decl);\n+\n   if (decl && DECL_CONSTRUCTOR_P (decl))\n     is_constructor = 1;\n "}, {"sha": "6e9e34e8fafe9f1eb905056db9a876f57c449a23", "filename": "gcc/cp/class.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e23bd2185fae41772d012231e005b789b3a9e6dc/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e23bd2185fae41772d012231e005b789b3a9e6dc/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=e23bd2185fae41772d012231e005b789b3a9e6dc", "patch": "@@ -2926,6 +2926,8 @@ add_implicitly_declared_members (t, cant_have_default_ctor,\n   tree virtual_dtor = NULL_TREE;\n   tree *f;\n \n+  ++adding_implicit_members;\n+\n   /* Destructor.  */\n   if (TYPE_HAS_NONTRIVIAL_DESTRUCTOR (t) && !TYPE_HAS_DESTRUCTOR (t))\n     {\n@@ -2985,6 +2987,8 @@ add_implicitly_declared_members (t, cant_have_default_ctor,\n   *f = TYPE_METHODS (t);\n   TYPE_METHODS (t) = implicit_fns;\n \n+  --adding_implicit_members;\n+\n   return virtual_dtor;\n }\n "}, {"sha": "c157466a5726dd38bc086fdf4660ffcddfd0fc21", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e23bd2185fae41772d012231e005b789b3a9e6dc/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e23bd2185fae41772d012231e005b789b3a9e6dc/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=e23bd2185fae41772d012231e005b789b3a9e6dc", "patch": "@@ -3108,6 +3108,11 @@ extern int warn_overloaded_virtual;\n /* Nonzero means warn about use of multicharacter literals.  */\n extern int warn_multichar;\n \n+/* Set by add_implicitly_declared_members() to keep those members from\n+   being flagged as deprecated or reported as using deprecated\n+   types.  */\n+extern int adding_implicit_members;\n+\n /* Non-zero means warn if a non-templatized friend function is\n    declared in a templatized class. This behavior is warned about with\n    flag_guiding_decls in do_friend. */"}, {"sha": "ed163fdece747b3f22e0de1a2767ea02f2dcc2fb", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e23bd2185fae41772d012231e005b789b3a9e6dc/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e23bd2185fae41772d012231e005b789b3a9e6dc/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=e23bd2185fae41772d012231e005b789b3a9e6dc", "patch": "@@ -302,6 +302,23 @@ tree anonymous_namespace_name;\n    (Zero if we are at namespace scope, one inside the body of a\n    function, two inside the body of a function in a local class, etc.)  */\n int function_depth;\n+\n+/* States indicating how grokdeclarator() should handle declspecs marked\n+   with __attribute__((deprecated)).  An object declared as\n+   __attribute__((deprecated)) suppresses warnings of uses of other\n+   deprecated items.  */\n+   \n+enum deprecated_states {\n+  DEPRECATED_NORMAL,\n+  DEPRECATED_SUPPRESS\n+};\n+\n+static enum deprecated_states deprecated_state = DEPRECATED_NORMAL;\n+\n+/* Set by add_implicitly_declared_members() to keep those members from\n+   being flagged as deprecated or reported as using deprecated\n+   types.  */\n+int adding_implicit_members = 0;\n \f\n /* For each binding contour we allocate a binding_level structure\n    which records the names defined in that contour.\n@@ -7161,11 +7178,18 @@ start_decl (declarator, declspecs, initialized, attributes, prefix_attributes)\n       used_extern_spec = 1;\n     }\n \n+  /* An object declared as __attribute__((deprecated)) suppresses\n+     warnings of uses of other deprecated items.  */\n+  if (lookup_attribute (\"deprecated\", attributes))\n+    deprecated_state = DEPRECATED_SUPPRESS;\n+\n   attributes = chainon (attributes, prefix_attributes);\n \n   decl = grokdeclarator (declarator, declspecs, NORMAL, initialized,\n \t\t\t &attributes);\n \n+  deprecated_state = DEPRECATED_NORMAL;\n+\n   if (decl == NULL_TREE || TREE_CODE (decl) == VOID_TYPE)\n     return NULL_TREE;\n \n@@ -9992,6 +10016,14 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, attrlist)\n \n       id = TREE_VALUE (spec);\n \n+      /* If the entire declaration is itself tagged as deprecated then\n+         suppress reports of deprecated items.  */\n+      if (!adding_implicit_members && id && TREE_DEPRECATED (id))\n+        {\n+\t  if (deprecated_state != DEPRECATED_SUPPRESS)\n+\t    warn_deprecated_use (id);\n+        }\n+\n       if (TREE_CODE (id) == IDENTIFIER_NODE)\n \t{\n \t  if (id == ridpointers[(int) RID_INT]"}, {"sha": "a6d983a1012e413da81936e6fe7deee47aafa74d", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e23bd2185fae41772d012231e005b789b3a9e6dc/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e23bd2185fae41772d012231e005b789b3a9e6dc/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=e23bd2185fae41772d012231e005b789b3a9e6dc", "patch": "@@ -1215,6 +1215,9 @@ do_identifier (token, parsing, args)\n   else\n     id = lastiddecl;\n \n+  if (lexing && id && TREE_DEPRECATED (id))\n+    warn_deprecated_use (id);\n+\n   /* Do Koenig lookup if appropriate (inside templates we build lookup\n      expressions instead).\n "}, {"sha": "c189b6d37c89e2224f5dc70066bbee7b6c8d3f7c", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e23bd2185fae41772d012231e005b789b3a9e6dc/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e23bd2185fae41772d012231e005b789b3a9e6dc/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=e23bd2185fae41772d012231e005b789b3a9e6dc", "patch": "@@ -2199,6 +2199,9 @@ build_component_ref (datum, component, basetype_path, protect)\n \t}\n     }\n \n+  if (TREE_DEPRECATED (field))\n+    warn_deprecated_use (field);\n+\n   /* See if we have to do any conversions so that we pick up the field from the\n      right context.  */\n   if (DECL_FIELD_CONTEXT (field) != basetype)"}, {"sha": "ac3539beda1abb579aa8fcf75ba631317be2c23d", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e23bd2185fae41772d012231e005b789b3a9e6dc/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e23bd2185fae41772d012231e005b789b3a9e6dc/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=e23bd2185fae41772d012231e005b789b3a9e6dc", "patch": "@@ -1520,3 +1520,44 @@ default_diagnostic_finalizer (buffer, dc)\n {\n   output_destroy_prefix (buffer);\n }\n+\n+void \n+warn_deprecated_use (node)\n+     tree node;\n+{\n+  if (node && warn_deprecated_decl)\n+    if (DECL_P (node))\n+      {\n+\twarning (\"`%s' is deprecated (declared at %s:%d)\",\n+\t\t IDENTIFIER_POINTER (DECL_NAME (node)),\n+\t\t DECL_SOURCE_FILE (node), DECL_SOURCE_LINE (node));\n+      }\n+    else if (TYPE_P (node))\n+      {\n+      \tchar *what = NULL;\n+\ttree decl = TYPE_STUB_DECL (node);\n+      \t\n+\tif (TREE_CODE (TYPE_NAME (node)) == IDENTIFIER_NODE)\n+\t  what = IDENTIFIER_POINTER (TYPE_NAME (node));\n+\telse if (TREE_CODE (TYPE_NAME (node)) == TYPE_DECL\n+\t\t && DECL_NAME (TYPE_NAME (node)))\n+\t  what = IDENTIFIER_POINTER (DECL_NAME (TYPE_NAME (node)));\n+\t\n+\tif (what)\n+\t  {\n+\t    if (decl)\n+\t      warning (\"`%s' is deprecated (declared at %s:%d)\", what,\n+\t\t       DECL_SOURCE_FILE (decl), DECL_SOURCE_LINE (decl));\n+\t    else\n+\t      warning (\"`%s' is deprecated\", what);\n+\t  }\n+\telse\n+\t  {\n+\t    if (decl)\n+\t      warning (\"type is deprecated (declared at %s:%d)\",\n+\t\t       DECL_SOURCE_FILE (decl), DECL_SOURCE_LINE (decl));\n+\t    else\n+\t      warning (\"type is deprecated\");\n+\t  }\n+      }\n+}"}, {"sha": "63095ba3c0f2022f80039761fb9b495df1b97a61", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 85, "deletions": 16, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e23bd2185fae41772d012231e005b789b3a9e6dc/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e23bd2185fae41772d012231e005b789b3a9e6dc/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=e23bd2185fae41772d012231e005b789b3a9e6dc", "patch": "@@ -1882,11 +1882,11 @@ attributes are currently defined for functions on all targets:\n @code{noreturn}, @code{noinline}, @code{pure}, @code{const},\n @code{format}, @code{format_arg}, @code{no_instrument_function},\n @code{section}, @code{constructor}, @code{destructor}, @code{used},\n-@code{unused}, @code{weak}, @code{malloc}, and @code{alias}.  Several\n-other attributes are defined for functions on particular target systems.\n-Other attributes, including @code{section} are supported for variables\n-declarations (@pxref{Variable Attributes}) and for types (@pxref{Type\n-Attributes}).\n+@code{unused}, @code{deprecated}, @code{weak}, @code{malloc}, and\n+@code{alias}.  Several other attributes are defined for functions on\n+particular target systems.  Other attributes, including @code{section}\n+are supported for variables declarations (@pxref{Variable Attributes})\n+and for types (@pxref{Type Attributes}).\n \n You may also specify attributes with @samp{__} preceding and following\n each keyword.  This allows you to use them in header files without\n@@ -2147,6 +2147,27 @@ for the function even if it appears that the function is not referenced.\n This is useful, for example, when the function is referenced only in\n inline assembly.\n \n+@cindex @code{deprecated} attribute.\n+@item deprecated\n+The @code{deprecated} attribute results in a warning if the function\n+is used anywhere in the source file.  This is useful when identifying\n+functions that are expected to be removed in a future version of a\n+program.  The warning also includes the location of the declaration\n+of the deprecated function, to enable users to easily find further\n+information about why the function is deprecated, or what they should\n+do instead.  Note that the warnings only occurs for uses:\n+\n+@smallexample\n+int old_fn () __attribute__ ((deprecated));\n+int old_fn ();\n+int (*fn_ptr)() = old_fn;\n+@end smallexample\n+\n+results in a warning on line 3 but not line 2.\n+\n+The @code{deprecated} attribute can also be used for variables and\n+types (@pxref{Variable Attributes}, @pxref{Type Attributes}.)\n+\n @item weak\n @cindex @code{weak} attribute\n The @code{weak} attribute causes the declaration to be emitted as a weak\n@@ -2760,15 +2781,15 @@ section.\n \n The keyword @code{__attribute__} allows you to specify special\n attributes of variables or structure fields.  This keyword is followed\n-by an attribute specification inside double parentheses.  Nine\n+by an attribute specification inside double parentheses.  Ten\n attributes are currently defined for variables: @code{aligned},\n @code{mode}, @code{nocommon}, @code{packed}, @code{section},\n-@code{transparent_union}, @code{unused}, @code{vector_size}, and\n-@code{weak}.  Some other attributes are defined for variables on\n-particular target systems.  Other attributes are available for functions\n-(@pxref{Function Attributes}) and for types (@pxref{Type Attributes}).\n-Other front ends might define more attributes (@pxref{C++\n-Extensions,,Extensions to the C++ Language}).\n+@code{transparent_union}, @code{unused}, @code{deprecated},\n+@code{vector_size}, and @code{weak}.  Some other attributes are defined\n+for variables on particular target systems.  Other attributes are\n+available for functions (@pxref{Function Attributes}) and for types\n+(@pxref{Type Attributes}).  Other front ends might define more\n+attributes (@pxref{C++ Extensions,,Extensions to the C++ Language}).\n \n You may also specify attributes with @samp{__} preceding and following\n each keyword.  This allows you to use them in header files without\n@@ -2970,6 +2991,26 @@ This attribute, attached to a variable, means that the variable is meant\n to be possibly unused.  GCC will not produce a warning for this\n variable.\n \n+@item deprecated\n+The @code{deprecated} attribute results in a warning if the variable\n+is used anywhere in the source file.  This is useful when identifying\n+variables that are expected to be removed in a future version of a\n+program.  The warning also includes the location of the declaration\n+of the deprecated variable, to enable users to easily find further\n+information about why the variable is deprecated, or what they should\n+do instead.  Note that the warnings only occurs for uses:\n+\n+@smallexample\n+extern int old_var __attribute__ ((deprecated));\n+extern int old_var;\n+int new_fn () @{ return old_var; @}\n+@end smallexample\n+\n+results in a warning on line 3 but not line 2.\n+\n+The @code{deprecated} attribute can also be used for functions and\n+types (@pxref{Function Attributes}, @pxref{Type Attributes}.)\n+\n @item vector_size (@var{bytes})\n This attribute specifies the vector size for the variable, measured in\n bytes.  For example, the declaration:\n@@ -3029,10 +3070,10 @@ packed))}.\n The keyword @code{__attribute__} allows you to specify special\n attributes of @code{struct} and @code{union} types when you define such\n types.  This keyword is followed by an attribute specification inside\n-double parentheses.  Four attributes are currently defined for types:\n-@code{aligned}, @code{packed}, @code{transparent_union}, and @code{unused}.\n-Other attributes are defined for functions (@pxref{Function Attributes}) and\n-for variables (@pxref{Variable Attributes}).\n+double parentheses.  Five attributes are currently defined for types:\n+@code{aligned}, @code{packed}, @code{transparent_union}, @code{unused},\n+and @code{deprecated}.  Other attributes are defined for functions\n+(@pxref{Function Attributes}) and for variables (@pxref{Variable Attributes}).\n \n You may also specify any one of these attributes with @samp{__}\n preceding and following its keyword.  This allows you to use these\n@@ -3215,6 +3256,34 @@ the case with lock or thread classes, which are usually defined and then\n not referenced, but contain constructors and destructors that have\n nontrivial bookkeeping functions.\n \n+@item deprecated\n+The @code{deprecated} attribute results in a warning if the type\n+is used anywhere in the source file.  This is useful when identifying\n+types that are expected to be removed in a future version of a program.\n+If possible, the warning also includes the location of the declaration\n+of the deprecated type, to enable users to easily find further\n+information about why the type is deprecated, or what they should do\n+instead.  Note that the warnings only occur for uses and then only\n+if the type is being applied to a identifier that itself is not being\n+declared as deprecated.\n+\n+@smallexample\n+typedef int T1 __attribute__ ((deprecated));\n+T1 x;\n+typedef T1 T2;\n+T2 y;\n+typedef T1 T3 __attribute__ ((deprecated));\n+T3 z __attribute__ ((deprecated));\n+@end smallexample\n+\n+results in a warning on line 2 and 3 but not lines 4, 5, or 6.  No\n+warning is issued for line 4 because T2 is not explicitly\n+deprecated.  Line 5 has no warning because T3 is explicitly\n+deprecated.  Similarly for line 6.\n+\n+The @code{deprecated} attribute can also be used for functions and\n+variables (@pxref{Function Attributes}, @pxref{Variable Attributes}.)\n+\n @end table\n \n To specify multiple attributes, separate them by commas within the"}, {"sha": "9fac575ae78ff89d02c64e5d4f15e80eeb494ffc", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e23bd2185fae41772d012231e005b789b3a9e6dc/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e23bd2185fae41772d012231e005b789b3a9e6dc/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=e23bd2185fae41772d012231e005b789b3a9e6dc", "patch": "@@ -213,7 +213,8 @@ in the following sections.\n -fsyntax-only  -pedantic  -pedantic-errors @gol\n -w  -W  -Wall  -Waggregate-return @gol\n -Wcast-align  -Wcast-qual  -Wchar-subscripts  -Wcomment @gol\n--Wconversion  -Wdisabled-optimization  -Wdiv-by-zero  -Werror @gol\n+-Wconversion  -Wno-deprecated-declarations @gol\n+-Wdisabled-optimization  -Wdiv-by-zero  -Werror @gol\n -Wfloat-equal  -Wformat  -Wformat=2 @gol\n -Wformat-nonliteral  -Wformat-security @gol\n -Wimplicit  -Wimplicit-int  @gol\n@@ -2506,6 +2507,13 @@ case, and some functions for which @code{format} attributes are\n appropriate may not be detected.  This option has no effect unless\n @option{-Wformat} is enabled (possibly by @option{-Wall}).\n \n+@item -Wno-deprecated-declarations\n+@opindex Wno-deprecated-declarations\n+Do not warn about uses of functions, variables, and types marked as\n+deprecated by using the @code{deprecated} attribute. \n+(@pxref{Function Attributes}, @pxref{Variable Attributes},\n+@pxref{Type Attributes}.)\n+\n @item -Wpacked\n @opindex Wpacked\n Warn if a structure is given the packed attribute, but the packed"}, {"sha": "65353e61677f71b9b3deb2aa7bec16ce5d631fa3", "filename": "gcc/flags.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e23bd2185fae41772d012231e005b789b3a9e6dc/gcc%2Fflags.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e23bd2185fae41772d012231e005b789b3a9e6dc/gcc%2Fflags.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflags.h?ref=e23bd2185fae41772d012231e005b789b3a9e6dc", "patch": "@@ -169,6 +169,11 @@ extern int warn_padded;\n \n extern int warn_disabled_optimization;\n \n+/* Nonzero means warn about uses of __attribute__((deprecated)) \n+   declarations.  */\n+\n+extern int warn_deprecated_decl;\n+\n /* Nonzero if generating code to do profiling.  */\n \n extern int profile_flag;"}, {"sha": "669c03e499dcc9c32555e1d6f2d64710c1542029", "filename": "gcc/print-tree.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e23bd2185fae41772d012231e005b789b3a9e6dc/gcc%2Fprint-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e23bd2185fae41772d012231e005b789b3a9e6dc/gcc%2Fprint-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-tree.c?ref=e23bd2185fae41772d012231e005b789b3a9e6dc", "patch": "@@ -294,6 +294,8 @@ print_node (file, prefix, node, indent)\n     fputs (\" protected\", file);\n   if (TREE_STATIC (node))\n     fputs (\" static\", file);\n+  if (TREE_DEPRECATED (node))\n+    fputs (\" deprecated\", file);\n   if (TREE_LANG_FLAG_0 (node))\n     fputs (\" tree_0\", file);\n   if (TREE_LANG_FLAG_1 (node))"}, {"sha": "4d0e4b5c5acdbf7c79651fc6ad064071ea132ef7", "filename": "gcc/toplev.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e23bd2185fae41772d012231e005b789b3a9e6dc/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e23bd2185fae41772d012231e005b789b3a9e6dc/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=e23bd2185fae41772d012231e005b789b3a9e6dc", "patch": "@@ -1464,6 +1464,11 @@ int warn_disabled_optimization;\n \n int warn_missing_noreturn;\n \n+/* Nonzero means warn about uses of __attribute__((deprecated)) \n+   declarations.  */\n+\n+int warn_deprecated_decl = 1;\n+\n /* Likewise for -W.  */\n \n static const lang_independent_options W_options[] =\n@@ -1502,6 +1507,8 @@ static const lang_independent_options W_options[] =\n    N_(\"Warn when padding is required to align struct members\") },\n   {\"disabled-optimization\", &warn_disabled_optimization, 1,\n    N_(\"Warn when an optimization pass is disabled\") },\n+  {\"deprecated-declarations\", &warn_deprecated_decl, 1,\n+   N_(\"Warn about uses of __attribute__((deprecated)) declarations\") },\n   {\"missing-noreturn\", &warn_missing_noreturn, 1,\n    N_(\"Warn about functions which might be candidates for attribute noreturn\") }\n };"}, {"sha": "41ccedc46d09991b1841cabbb5f047f93e3d2825", "filename": "gcc/toplev.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e23bd2185fae41772d012231e005b789b3a9e6dc/gcc%2Ftoplev.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e23bd2185fae41772d012231e005b789b3a9e6dc/gcc%2Ftoplev.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.h?ref=e23bd2185fae41772d012231e005b789b3a9e6dc", "patch": "@@ -87,6 +87,7 @@ extern void error_for_asm\t\tPARAMS ((struct rtx_def *,\n \t\t\t\t\t\t const char *, ...));\n extern void warning_for_asm\t\tPARAMS ((struct rtx_def *,\n \t\t\t\t\t\t const char *, ...));\n+extern void warn_deprecated_use\t\tPARAMS ((union tree_node *));\n extern int do_float_handler PARAMS ((void (*) (PTR), PTR));\n \n #ifdef BUFSIZ"}, {"sha": "adcb0f23621f805f83717faf0fd87f4f2a233141", "filename": "gcc/tree.h", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e23bd2185fae41772d012231e005b789b3a9e6dc/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e23bd2185fae41772d012231e005b789b3a9e6dc/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=e23bd2185fae41772d012231e005b789b3a9e6dc", "patch": "@@ -139,6 +139,7 @@ struct tree_common\n   unsigned private_flag : 1;\n   unsigned protected_flag : 1;\n   unsigned bounded_flag : 1;\n+  unsigned deprecated_flag : 1;\n \n   unsigned lang_flag_0 : 1;\n   unsigned lang_flag_1 : 1;\n@@ -260,7 +261,13 @@ struct tree_common\n \t   expressions, VAR_DECL, PARM_DECL, FIELD_DECL, FUNCTION_DECL,\n \t   IDENTIFIER_NODE\n        TYPE_BOUNDED in\n-\t   ..._TYPE */\n+\t   ..._TYPE\n+\n+   deprecated_flag:\n+\n+\tTREE_DEPRECATED in\n+\t   ..._DECL\n+*/\n \n /* Define accessors for the fields that all tree nodes have\n    (though some fields are not used for all kinds of nodes).  */\n@@ -651,6 +658,10 @@ extern void tree_class_check_failed PARAMS ((const tree, int,\n \n #define TREE_BOUNDED(NODE) ((NODE)->common.bounded_flag)\n \n+/* Nonzero in a IDENTIFIER_NODE if the use of the name is defined as a\n+   deprecated feature by __attribute__((deprecated)).  */\n+#define TREE_DEPRECATED(NODE) ((NODE)->common.deprecated_flag)\n+\n /* These flags are available for each language front end to use internally.  */\n #define TREE_LANG_FLAG_0(NODE) ((NODE)->common.lang_flag_0)\n #define TREE_LANG_FLAG_1(NODE) ((NODE)->common.lang_flag_1)"}]}