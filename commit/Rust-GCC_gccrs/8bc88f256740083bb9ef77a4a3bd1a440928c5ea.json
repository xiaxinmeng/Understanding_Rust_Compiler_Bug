{"sha": "8bc88f256740083bb9ef77a4a3bd1a440928c5ea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGJjODhmMjU2NzQwMDgzYmI5ZWY3N2E0YTNiZDFhNDQwOTI4YzVlYQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2009-08-06T11:29:13Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2009-08-06T11:29:13Z"}, "message": "re PR middle-end/40964 (ICE in insert_vi_for_tree)\n\n2009-08-06  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/40964\n\t* tree.c (iterative_hash_host_wide_int): Export.\n\t* tree.h (iterative_hash_host_wide_int): Declare.\n\t* tree-ssa-structalias.c (heapvar_map): New struct.\n\t(heapvar_map_eq): New function.\n\t(heapvar_map_hash): Likewise.\n\t(heapvar_lookup): Adjust.\n\t(heapvar_insert): Likewise.\n\t(make_constraint_from_heapvar): Allow multiple heap variables\n\tper decl at different offsets.\n\t(init_alias_heapvars): Adjust.\n\n\t* gcc.c-torture/compile/pr40964.c: New testcase.\n\nFrom-SVN: r150517", "tree": {"sha": "085a13acd988eaaa68c80427926f4636e45f17a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/085a13acd988eaaa68c80427926f4636e45f17a5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8bc88f256740083bb9ef77a4a3bd1a440928c5ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bc88f256740083bb9ef77a4a3bd1a440928c5ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8bc88f256740083bb9ef77a4a3bd1a440928c5ea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bc88f256740083bb9ef77a4a3bd1a440928c5ea/comments", "author": null, "committer": null, "parents": [{"sha": "6e319d7beb01b774b7b535e021f48c9a94567e3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e319d7beb01b774b7b535e021f48c9a94567e3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e319d7beb01b774b7b535e021f48c9a94567e3c"}], "stats": {"total": 72, "additions": 53, "deletions": 19}, "files": [{"sha": "51639940ea805b2c9880fc3e7ff1da73de5d88e3", "filename": "gcc/testsuite/gcc.c-torture/compile/pr40964.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bc88f256740083bb9ef77a4a3bd1a440928c5ea/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr40964.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bc88f256740083bb9ef77a4a3bd1a440928c5ea/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr40964.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr40964.c?ref=8bc88f256740083bb9ef77a4a3bd1a440928c5ea", "patch": "@@ -0,0 +1,10 @@\n+struct alloc2 {\n+    int bla;\n+    char * __restrict data;\n+    char * __restrict data2;\n+};\n+struct alloc2 b;\n+void * f (void)\n+{\n+  return b.data;\n+}"}, {"sha": "50ef0b660f9fdbf534478a63640d6e0d439c66fc", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 41, "deletions": 18, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bc88f256740083bb9ef77a4a3bd1a440928c5ea/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bc88f256740083bb9ef77a4a3bd1a440928c5ea/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=8bc88f256740083bb9ef77a4a3bd1a440928c5ea", "patch": "@@ -290,36 +290,59 @@ enum { nothing_id = 0, anything_id = 1, readonly_id = 2,\n        escaped_id = 3, nonlocal_id = 4, callused_id = 5,\n        storedanything_id = 6, integer_id = 7 };\n \n+struct GTY(()) heapvar_map {\n+  struct tree_map map;\n+  unsigned HOST_WIDE_INT offset;\n+};\n+\n+static int\n+heapvar_map_eq (const void *p1, const void *p2)\n+{\n+  const struct heapvar_map *h1 = (const struct heapvar_map *)p1;\n+  const struct heapvar_map *h2 = (const struct heapvar_map *)p2;\n+  return (h1->map.base.from == h2->map.base.from\n+\t  && h1->offset == h2->offset);\n+}\n+\n+static unsigned int\n+heapvar_map_hash (struct heapvar_map *h)\n+{\n+  return iterative_hash_host_wide_int (h->offset,\n+\t\t\t\t       htab_hash_pointer (h->map.base.from));\n+}\n+\n /* Lookup a heap var for FROM, and return it if we find one.  */\n \n static tree\n-heapvar_lookup (tree from)\n+heapvar_lookup (tree from, unsigned HOST_WIDE_INT offset)\n {\n-  struct tree_map *h, in;\n-  in.base.from = from;\n-\n-  h = (struct tree_map *) htab_find_with_hash (heapvar_for_stmt, &in,\n-\t\t\t\t\t       htab_hash_pointer (from));\n+  struct heapvar_map *h, in;\n+  in.map.base.from = from;\n+  in.offset = offset;\n+  h = (struct heapvar_map *) htab_find_with_hash (heapvar_for_stmt, &in,\n+\t\t\t\t\t\t  heapvar_map_hash (&in));\n   if (h)\n-    return h->to;\n+    return h->map.to;\n   return NULL_TREE;\n }\n \n /* Insert a mapping FROM->TO in the heap var for statement\n    hashtable.  */\n \n static void\n-heapvar_insert (tree from, tree to)\n+heapvar_insert (tree from, unsigned HOST_WIDE_INT offset, tree to)\n {\n-  struct tree_map *h;\n+  struct heapvar_map *h;\n   void **loc;\n \n-  h = GGC_NEW (struct tree_map);\n-  h->hash = htab_hash_pointer (from);\n-  h->base.from = from;\n-  h->to = to;\n-  loc = htab_find_slot_with_hash (heapvar_for_stmt, h, h->hash, INSERT);\n-  *(struct tree_map **) loc = h;\n+  h = GGC_NEW (struct heapvar_map);\n+  h->map.base.from = from;\n+  h->offset = offset;\n+  h->map.hash = heapvar_map_hash (h);\n+  h->map.to = to;\n+  loc = htab_find_slot_with_hash (heapvar_for_stmt, h, h->map.hash, INSERT);\n+  gcc_assert (*loc == NULL);\n+  *(struct heapvar_map **) loc = h;\n }\n \n /* Return a new variable info structure consisting for a variable\n@@ -3365,15 +3388,15 @@ static varinfo_t\n make_constraint_from_heapvar (varinfo_t lhs, const char *name)\n {\n   varinfo_t vi;\n-  tree heapvar = heapvar_lookup (lhs->decl);\n+  tree heapvar = heapvar_lookup (lhs->decl, lhs->offset);\n \n   if (heapvar == NULL_TREE)\n     {\n       var_ann_t ann;\n       heapvar = create_tmp_var_raw (ptr_type_node, name);\n       DECL_EXTERNAL (heapvar) = 1;\n \n-      heapvar_insert (lhs->decl, heapvar);\n+      heapvar_insert (lhs->decl, lhs->offset, heapvar);\n \n       ann = get_var_ann (heapvar);\n       ann->is_heapvar = 1;\n@@ -5363,7 +5386,7 @@ static void\n init_alias_heapvars (void)\n {\n   if (!heapvar_for_stmt)\n-    heapvar_for_stmt = htab_create_ggc (11, tree_map_hash, tree_map_eq,\n+    heapvar_for_stmt = htab_create_ggc (11, tree_map_hash, heapvar_map_eq,\n \t\t\t\t\tNULL);\n }\n "}, {"sha": "60416d342c7b33632db1f9ad0ba846112917e21f", "filename": "gcc/tree.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bc88f256740083bb9ef77a4a3bd1a440928c5ea/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bc88f256740083bb9ef77a4a3bd1a440928c5ea/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=8bc88f256740083bb9ef77a4a3bd1a440928c5ea", "patch": "@@ -3988,7 +3988,7 @@ iterative_hash_hashval_t (hashval_t val, hashval_t val2)\n }\n \n /* Produce good hash value combining VAL and VAL2.  */\n-static inline hashval_t\n+hashval_t\n iterative_hash_host_wide_int (HOST_WIDE_INT val, hashval_t val2)\n {\n   if (sizeof (HOST_WIDE_INT) == sizeof (hashval_t))"}, {"sha": "27918309f603deab8caa635bb314720d72ad8717", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bc88f256740083bb9ef77a4a3bd1a440928c5ea/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bc88f256740083bb9ef77a4a3bd1a440928c5ea/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=8bc88f256740083bb9ef77a4a3bd1a440928c5ea", "patch": "@@ -4879,6 +4879,7 @@ extern int simple_cst_equal (const_tree, const_tree);\n extern hashval_t iterative_hash_expr (const_tree, hashval_t);\n extern hashval_t iterative_hash_exprs_commutative (const_tree,\n                                                    const_tree, hashval_t);\n+extern hashval_t iterative_hash_host_wide_int (HOST_WIDE_INT, hashval_t);\n extern hashval_t iterative_hash_hashval_t (hashval_t, hashval_t);\n extern int compare_tree_int (const_tree, unsigned HOST_WIDE_INT);\n extern int type_list_equal (const_tree, const_tree);"}]}