{"sha": "211c93053a337e65ef245d933f4804a492ba5c6e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjExYzkzMDUzYTMzN2U2NWVmMjQ1ZDkzM2Y0ODA0YTQ5MmJhNWM2ZQ==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@redhat.com", "date": "2015-11-17T21:32:14Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2015-11-17T21:32:14Z"}, "message": "Preliminary regrename patch for i386 ROP patch\n\n\t* regrename.c (regrename_find_superclass): New function, code moved\n\tfrom ...\n\t(rename_chains): ... here.  Call it.\n\t* regrename.h (regrename_find_superclass): Declare.\n\nFrom-SVN: r230501", "tree": {"sha": "b548baec4726967bdfb2026788e9bce526c740c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b548baec4726967bdfb2026788e9bce526c740c4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/211c93053a337e65ef245d933f4804a492ba5c6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/211c93053a337e65ef245d933f4804a492ba5c6e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/211c93053a337e65ef245d933f4804a492ba5c6e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/211c93053a337e65ef245d933f4804a492ba5c6e/comments", "author": null, "committer": null, "parents": [{"sha": "e85883d4007a91e3f90a532c9de3e77a39aa1bf3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e85883d4007a91e3f90a532c9de3e77a39aa1bf3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e85883d4007a91e3f90a532c9de3e77a39aa1bf3"}], "stats": {"total": 55, "additions": 36, "deletions": 19}, "files": [{"sha": "869685077c8b544fe9c1e80eeb82fc894f598bde", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/211c93053a337e65ef245d933f4804a492ba5c6e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/211c93053a337e65ef245d933f4804a492ba5c6e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=211c93053a337e65ef245d933f4804a492ba5c6e", "patch": "@@ -1,5 +1,10 @@\n 2015-11-17  Bernd Schmidt  <bschmidt@redhat.com>\n \n+\t* regrename.c (regrename_find_superclass): New function, code moved\n+\tfrom ...\n+\t(rename_chains): ... here.  Call it.\n+\t* regrename.h (regrename_find_superclass): Declare.\n+\n \t* regrename.c (record_out_operands): Terminate earlyclobbered\n \toperands here.\n "}, {"sha": "1f11695c5db83fab74e46bcf59b7f08e614d6e08", "filename": "gcc/regrename.c", "status": "modified", "additions": 29, "deletions": 19, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/211c93053a337e65ef245d933f4804a492ba5c6e/gcc%2Fregrename.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/211c93053a337e65ef245d933f4804a492ba5c6e/gcc%2Fregrename.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregrename.c?ref=211c93053a337e65ef245d933f4804a492ba5c6e", "patch": "@@ -422,6 +422,33 @@ find_rename_reg (du_head_p this_head, enum reg_class super_class,\n   return best_new_reg;\n }\n \n+/* Iterate over elements in the chain HEAD in order to:\n+   1. Count number of uses, storing it in *PN_USES.\n+   2. Narrow the set of registers we can use for renaming, adding\n+      unavailable registers to *PUNAVAILABLE, which must be\n+      initialized by the caller.\n+   3. Compute the superunion of register classes in this chain\n+      and return it.  */\n+reg_class\n+regrename_find_superclass (du_head_p head, int *pn_uses,\n+\t\t\t   HARD_REG_SET *punavailable)\n+{\n+  int n_uses = 0;\n+  reg_class super_class = NO_REGS;\n+  for (du_chain *tmp = head->first; tmp; tmp = tmp->next_use)\n+    {\n+      if (DEBUG_INSN_P (tmp->insn))\n+\tcontinue;\n+      n_uses++;\n+      IOR_COMPL_HARD_REG_SET (*punavailable,\n+\t\t\t      reg_class_contents[tmp->cl]);\n+      super_class\n+\t= reg_class_superunion[(int) super_class][(int) tmp->cl];\n+    }\n+  *pn_uses = n_uses;\n+  return super_class;\n+}\n+\n /* Perform register renaming on the current function.  */\n static void\n rename_chains (void)\n@@ -445,10 +472,8 @@ rename_chains (void)\n     {\n       int best_new_reg;\n       int n_uses;\n-      struct du_chain *tmp;\n       HARD_REG_SET this_unavailable;\n       int reg = this_head->regno;\n-      enum reg_class super_class = NO_REGS;\n \n       if (this_head->cannot_rename)\n \tcontinue;\n@@ -462,23 +487,8 @@ rename_chains (void)\n \n       COPY_HARD_REG_SET (this_unavailable, unavailable);\n \n-      /* Iterate over elements in the chain in order to:\n-\t 1. Count number of uses, and narrow the set of registers we can\n-\t    use for renaming.\n-\t 2. Compute the superunion of register classes in this chain.  */\n-      n_uses = 0;\n-      super_class = NO_REGS;\n-      for (tmp = this_head->first; tmp; tmp = tmp->next_use)\n-\t{\n-\t  if (DEBUG_INSN_P (tmp->insn))\n-\t    continue;\n-\t  n_uses++;\n-\t  IOR_COMPL_HARD_REG_SET (this_unavailable,\n-\t\t\t\t  reg_class_contents[tmp->cl]);\n-\t  super_class\n-\t    = reg_class_superunion[(int) super_class][(int) tmp->cl];\n-\t}\n-\n+      reg_class super_class = regrename_find_superclass (this_head, &n_uses,\n+\t\t\t\t\t\t\t &this_unavailable);\n       if (n_uses < 2)\n \tcontinue;\n "}, {"sha": "c702835cfe2277071b264621d5ab3e80b0f902cf", "filename": "gcc/regrename.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/211c93053a337e65ef245d933f4804a492ba5c6e/gcc%2Fregrename.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/211c93053a337e65ef245d933f4804a492ba5c6e/gcc%2Fregrename.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregrename.h?ref=211c93053a337e65ef245d933f4804a492ba5c6e", "patch": "@@ -97,5 +97,7 @@ extern du_head_p regrename_chain_from_id (unsigned int);\n extern int find_rename_reg (du_head_p, enum reg_class, HARD_REG_SET *, int,\n \t\t\t    bool);\n extern bool regrename_do_replace (du_head_p, int);\n+extern reg_class regrename_find_superclass (du_head_p, int *,\n+\t\t\t\t\t    HARD_REG_SET *);\n \n #endif"}]}