{"sha": "437ffe7b16428fc85566cc80207b2591ecbbf1e9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDM3ZmZlN2IxNjQyOGZjODU1NjZjYzgwMjA3YjI1OTFlY2JiZjFlOQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2010-06-02T15:39:43Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2010-06-02T15:39:43Z"}, "message": "re PR middle-end/44295 (Failed to build 483.xalancbmk in SPEC CPU 2006)\n\n\tPR middle-end/44295\n\t* cgraphunit.c (cgraph_redirect_edge_call_stmt_to_callee): Do not\n\tcreate new cgraph node to check callee.\n\t* testsuite/g++.dg/torture/pr44295.C: Neww testcase.\n\nFrom-SVN: r160159", "tree": {"sha": "111ab9b5c50fddbf3f2bb8c2a8a8ccd30603cdc5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/111ab9b5c50fddbf3f2bb8c2a8a8ccd30603cdc5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/437ffe7b16428fc85566cc80207b2591ecbbf1e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/437ffe7b16428fc85566cc80207b2591ecbbf1e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/437ffe7b16428fc85566cc80207b2591ecbbf1e9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/437ffe7b16428fc85566cc80207b2591ecbbf1e9/comments", "author": null, "committer": null, "parents": [{"sha": "98166192bb58f603cdf9757e5621dffb84a1080a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98166192bb58f603cdf9757e5621dffb84a1080a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98166192bb58f603cdf9757e5621dffb84a1080a"}], "stats": {"total": 189, "additions": 188, "deletions": 1}, "files": [{"sha": "f47194c136d90dce1b75e52f87ddebb5c3985a11", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/437ffe7b16428fc85566cc80207b2591ecbbf1e9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/437ffe7b16428fc85566cc80207b2591ecbbf1e9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=437ffe7b16428fc85566cc80207b2591ecbbf1e9", "patch": "@@ -1,3 +1,9 @@\n+2010-06-02  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR middle-end/44295\n+\t* cgraphunit.c (cgraph_redirect_edge_call_stmt_to_callee): Do not\n+\tcreate new cgraph node to check callee.\n+\n 2010-06-02  Richard Guenther  <rguenther@suse.de>\n \n \t* lto-streamer-in.c (input_gimple_stmt): Fix typo."}, {"sha": "54752ed54c1a4b3a0c6e4e1d20b391457db6aeb3", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/437ffe7b16428fc85566cc80207b2591ecbbf1e9/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/437ffe7b16428fc85566cc80207b2591ecbbf1e9/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=437ffe7b16428fc85566cc80207b2591ecbbf1e9", "patch": "@@ -2346,13 +2346,19 @@ cgraph_redirect_edge_call_stmt_to_callee (struct cgraph_edge *e)\n   tree decl = gimple_call_fndecl (e->call_stmt);\n   gimple new_stmt;\n   gimple_stmt_iterator gsi;\n+#ifdef ENABLE_CHECKING\n+  struct cgraph_node *node;\n+#endif\n \n   if (!decl || decl == e->callee->decl\n       /* Don't update call from same body alias to the real function.  */\n       || cgraph_get_node (decl) == cgraph_get_node (e->callee->decl))\n     return e->call_stmt;\n \n-  gcc_assert (!cgraph_node (decl)->clone.combined_args_to_skip);\n+#ifdef ENABLE_CHECKING\n+  node = cgraph_get_node (decl);\n+  gcc_assert (!node || !node->clone.combined_args_to_skip);\n+#endif\n \n   if (cgraph_dump_file)\n     {"}, {"sha": "158b06676eed57801ec4b8a5bd735f1779ee0a4c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/437ffe7b16428fc85566cc80207b2591ecbbf1e9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/437ffe7b16428fc85566cc80207b2591ecbbf1e9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=437ffe7b16428fc85566cc80207b2591ecbbf1e9", "patch": "@@ -1,3 +1,8 @@\n+2010-06-02  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR middle-end/44295\n+\t* testsuite/g++.dg/torture/pr44295.C: Neww testcase.\n+\n 2010-06-02  Jan Hubicka  <jh@suse.cz>\n \n \t* gcc.dg/tree-ssa/loadpre6.c: Update."}, {"sha": "004b7c00b426e2195bd2ec5bd6284693d79e28da", "filename": "gcc/testsuite/g++.dg/torture/pr44295.C", "status": "added", "additions": 170, "deletions": 0, "changes": 170, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/437ffe7b16428fc85566cc80207b2591ecbbf1e9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr44295.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/437ffe7b16428fc85566cc80207b2591ecbbf1e9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr44295.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr44295.C?ref=437ffe7b16428fc85566cc80207b2591ecbbf1e9", "patch": "@@ -0,0 +1,170 @@\n+/* { dg-do compile } */\n+extern \"C\" {\n+  typedef long unsigned int size_t;\n+  typedef struct   {\n+    } __sigset_t;\n+  typedef union {\n+  } pthread_barrierattr_t;\n+  }\n+  typedef unsigned short XMLCh;\n+      typedef unsigned long XMLSize_t;\n+  namespace xercesc_2_5 {\n+  class DOMNodeList;\n+  class DOMNode {\n+  };\n+  class DOMDocumentRange {\n+  };\n+  class DOMDocument: public DOMDocumentRange,  public DOMNode {\n+  };\n+  union wait   {\n+      struct       {\n+       }\n+  __wait_stopped;\n+    }\n+ div_t;\n+  class MemoryManager;\n+  class XMemory {\n+  public :     void* operator new(size_t size, MemoryManager* memMgr);\n+      void operator delete(void* p);\n+      void operator delete(void* p, MemoryManager* memMgr);\n+  };\n+  class XMLExcepts {\n+  public :     enum Codes     {\n+         NoError = 0       , HshTbl_ZeroModulus = 48       , HshTbl_BadHashFromKey = 49     };\n+  };\n+  class XMLUni {\n+  };\n+  }\n+  namespace xercesc_2_5 {\n+  class XMLException : public XMemory {\n+  public:\n+    virtual ~XMLException();\n+      XMLException(const char* const srcFile, const unsigned int srcLine, MemoryManager* const memoryManager = 0);\n+      void loadExceptText     (         const XMLExcepts::Codes toLoad     );\n+  };\n+  class XMLDeleter {\n+  };\n+  class XMLPlatformUtils {\n+  public :     static MemoryManager* fgMemoryManager;\n+   static inline size_t alignPointerForNewBlockAllocation(size_t ptrSize);\n+  };\n+  inline size_t XMLPlatformUtils::alignPointerForNewBlockAllocation(size_t ptrSize) {\n+  }\n+  class HashBase : public XMemory {\n+  public:\n+ virtual bool equals(const void *const key1, const void *const key2) = 0;\n+      virtual ~HashBase() {\n+};\n+  };\n+  class IllegalArgumentException : public XMLException {\n+  public:\n+IllegalArgumentException(const char* const srcFile , const unsigned int srcLine , const XMLExcepts::Codes toThrow , MemoryManager* memoryManager = 0) : XMLException(srcFile, srcLine, memoryManager) {\n+ loadExceptText(toThrow);\n+ }\n+  };\n+  class RuntimeException : public XMLException {\n+  public:\n+RuntimeException(const char* const srcFile , const unsigned int srcLine , const XMLExcepts::Codes toThrow , MemoryManager* memoryManager = 0) : XMLException(srcFile, srcLine, memoryManager) {\n+ loadExceptText(toThrow);\n+ }\n+  };\n+  class MemoryManager {\n+  public:\n+    virtual ~MemoryManager()     {\n+     }\n+      virtual void* allocate(size_t size) = 0;\n+  };\n+  template <class TElem> class BaseRefVectorOf : public XMemory {\n+      BaseRefVectorOf     (           const unsigned int maxElems         , const bool adoptElems = true         , MemoryManager* const manager = XMLPlatformUtils::fgMemoryManager     );\n+      virtual ~BaseRefVectorOf();\n+      bool fAdoptedElems;\n+      TElem** fElemList;\n+  };\n+  template <class TElem> BaseRefVectorOf<TElem>::BaseRefVectorOf( const unsigned int maxElems                                        , const bool adoptElems                                        , MemoryManager* const manager) :     fAdoptedElems(adoptElems) {\n+      for (unsigned int index = 0;\n+  index < maxElems;\n+  index++)         fElemList[index] = 0;\n+  }\n+  template <class TElem> BaseRefVectorOf<TElem>::~BaseRefVectorOf() {\n+  }\n+  class XMLString {\n+  public:\n+     static bool equals     (           const XMLCh* const str1         , const XMLCh* const str2     );\n+      static void moveChars     (                 XMLCh* const targetStr         , const XMLCh* const srcStr         , const unsigned int count     );\n+  };\n+  inline void XMLString::moveChars( XMLCh* const targetStr                                 , const XMLCh* const srcStr                                 , const unsigned int count) {\n+  }\n+  inline bool XMLString::equals( const XMLCh* const str1                                , const XMLCh* const str2) {\n+      const XMLCh* psz1 = str1;\n+      const XMLCh* psz2 = str2;\n+      if (psz1 == 0 || psz2 == 0) {\n+             return true;\n+     }\n+  }\n+  }\n+  namespace xercesc_2_5 {\n+  class HashPtr : public HashBase {\n+   virtual bool equals(const void *const key1, const void *const key2);\n+  };\n+  template <class TVal> struct DOMDeepNodeListPoolTableBucketElem : public XMemory {\n+      void* fKey1;\n+      XMLCh* fKey2;\n+      XMLCh* fKey3;\n+  };\n+  template <class TVal> class DOMDeepNodeListPool {\n+  public:\n+     DOMDeepNodeListPool     (         const XMLSize_t modulus       , const bool adoptElems       , const XMLSize_t initSize = 128     );\n+      TVal* getByKey(const void* const key1, const XMLCh* const key2, const XMLCh* const key3);\n+      DOMDeepNodeListPoolTableBucketElem<TVal>* findBucketElem(const void* const key1, const XMLCh* const key2, const XMLCh* const key3, XMLSize_t& hashVal);\n+      bool fAdoptedElems;\n+      DOMDeepNodeListPoolTableBucketElem<TVal>** fBucketList;\n+      XMLSize_t fHashModulus;\n+      HashBase* fHash;\n+      TVal** fIdPtrs;\n+      XMLSize_t fIdPtrsCount;\n+      MemoryManager* fMemoryManager;\n+  };\n+  template <class TVal> DOMDeepNodeListPool<TVal>::DOMDeepNodeListPool( const XMLSize_t modulus                                               , const bool adoptElems                                               , const XMLSize_t initSize) :   fAdoptedElems(adoptElems)     , fBucketList(0)     , fHash(0)     , fIdPtrs(0) {\n+      fHash = new (fMemoryManager) HashPtr();\n+      fIdPtrs = (TVal**) fMemoryManager->allocate(fIdPtrsCount * sizeof(TVal*));\n+   if (modulus == 0)         throw IllegalArgumentException(\"./xercesc/dom/impl/bad.c\", 38, XMLExcepts::HshTbl_ZeroModulus, fMemoryManager);\n+  }\n+  template <class TVal> TVal* DOMDeepNodeListPool<TVal>::getByKey(const void* const key1, const XMLCh* const key2, const XMLCh* const key3) {\n+      XMLSize_t hashVal;\n+      DOMDeepNodeListPoolTableBucketElem<TVal>* findIt = findBucketElem(key1, key2, key3, hashVal);\n+  }\n+  template <class TVal> DOMDeepNodeListPoolTableBucketElem<TVal>* DOMDeepNodeListPool<TVal>:: findBucketElem(const void* const key1, const XMLCh* const key2, const XMLCh* const key3, XMLSize_t& hashVal) {\n+      if (hashVal > fHashModulus)         throw RuntimeException(\"./xercesc/dom/impl/bad.c\", 64, XMLExcepts::HshTbl_BadHashFromKey, fMemoryManager);\n+      DOMDeepNodeListPoolTableBucketElem<TVal>* curElem = fBucketList[hashVal];\n+          if (fHash->equals(key1, curElem->fKey1) && (XMLString::equals(key2, curElem->fKey2)) && (XMLString::equals(key3, curElem->fKey3))) {\n+             return curElem;\n+     }\n+  }\n+  class DOMDeepNodeListImpl;\n+  class DOMDocumentImpl: public DOMDocument {\n+      DOMNodeList* getElementsByTagName(const XMLCh * tagname) const;\n+      DOMNodeList* getDeepNodeList(const DOMNode *rootNode, const XMLCh *tagName);\n+      DOMNodeList* getDeepNodeList(const DOMNode *rootNode,                                                  const XMLCh *namespaceURI,                                                  const XMLCh *localName);\n+      DOMDeepNodeListPool<DOMDeepNodeListImpl>* fNodeListPool;\n+  };\n+  }\n+  void * operator new(size_t amt, xercesc_2_5:: DOMDocument *doc);\n+  namespace xercesc_2_5 {\n+  class DOMNodeList {\n+  };\n+  class DOMDeepNodeListImpl: public DOMNodeList {\n+  };\n+  DOMNodeList *DOMDocumentImpl::getElementsByTagName(const XMLCh *tagname) const {\n+      return ((DOMDocumentImpl*)this)->getDeepNodeList(this,tagname);\n+  }\n+  DOMNodeList *DOMDocumentImpl::getDeepNodeList(const DOMNode *rootNode, const XMLCh *tagName) {\n+      if(!fNodeListPool) {\n+         fNodeListPool = new (this) DOMDeepNodeListPool<DOMDeepNodeListImpl>(109, false);\n+     }\n+      DOMNodeList* retList = fNodeListPool->getByKey(rootNode, tagName, 0);\n+  }\n+  DOMNodeList *DOMDocumentImpl::getDeepNodeList(const DOMNode *rootNode,                                                    const XMLCh *namespaceURI,                                                    const XMLCh *localName) {\n+      DOMNodeList* retList = fNodeListPool->getByKey(rootNode, localName, namespaceURI);\n+  }\n+  }\n+"}]}