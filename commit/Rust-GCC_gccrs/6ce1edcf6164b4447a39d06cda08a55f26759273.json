{"sha": "6ce1edcf6164b4447a39d06cda08a55f26759273", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmNlMWVkY2Y2MTY0YjQ0NDdhMzlkMDZjZGEwOGE1NWYyNjc1OTI3Mw==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2011-04-05T11:40:10Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2011-04-05T11:40:10Z"}, "message": "gcse.c (modify_pair): Define.\n\n\t* gcse.c (modify_pair): Define.  Define a VEC of it.\n\t(canon_modify_mem_list): Convert to an array of VECs.\n\t(free_insn_expr_list_list): Delete.\n\t(clear_modify_mem_tables): Call VEC_free instead.\n\t(record_last_mem_set_info): Don't modify canon_modify_mem_list.\n\t(alloc_gcse_mem): Adjust for canon_modify_mem_list change.\n\t(canon_list_insert, compute_transp): Likewise.\n\nFrom-SVN: r171980", "tree": {"sha": "4e9222d40a34e157a935f0c1b106d002ebef7b4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4e9222d40a34e157a935f0c1b106d002ebef7b4c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6ce1edcf6164b4447a39d06cda08a55f26759273", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ce1edcf6164b4447a39d06cda08a55f26759273", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ce1edcf6164b4447a39d06cda08a55f26759273", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ce1edcf6164b4447a39d06cda08a55f26759273/comments", "author": null, "committer": null, "parents": [{"sha": "c201ac946de2f3021570f8866523f36983d7aa83", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c201ac946de2f3021570f8866523f36983d7aa83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c201ac946de2f3021570f8866523f36983d7aa83"}], "stats": {"total": 89, "additions": 38, "deletions": 51}, "files": [{"sha": "40ca937ef080d6532e9945adf47cdbf2b785c190", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ce1edcf6164b4447a39d06cda08a55f26759273/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ce1edcf6164b4447a39d06cda08a55f26759273/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6ce1edcf6164b4447a39d06cda08a55f26759273", "patch": "@@ -1,3 +1,13 @@\n+2011-04-05  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* gcse.c (modify_pair): Define.  Define a VEC of it.\n+\t(canon_modify_mem_list): Convert to an array of VECs.\n+\t(free_insn_expr_list_list): Delete.\n+\t(clear_modify_mem_tables): Call VEC_free instead.\n+\t(record_last_mem_set_info): Don't modify canon_modify_mem_list.\n+\t(alloc_gcse_mem): Adjust for canon_modify_mem_list change.\n+\t(canon_list_insert, compute_transp): Likewise.\n+\n 2011-04-05  Tom de Vries  <tom@codesourcery.com>\n \n \tPR target/43920"}, {"sha": "d6a4db4111053012b25cab159fecb4e4785364a3", "filename": "gcc/gcse.c", "status": "modified", "additions": 28, "deletions": 51, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ce1edcf6164b4447a39d06cda08a55f26759273/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ce1edcf6164b4447a39d06cda08a55f26759273/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=6ce1edcf6164b4447a39d06cda08a55f26759273", "patch": "@@ -385,8 +385,18 @@ static regset reg_set_bitmap;\n static rtx * modify_mem_list;\n static bitmap modify_mem_list_set;\n \n-/* This array parallels modify_mem_list, but is kept canonicalized.  */\n-static rtx * canon_modify_mem_list;\n+typedef struct modify_pair_s\n+{\n+  rtx dest;\t\t\t/* A MEM.  */\n+  rtx dest_addr;\t\t/* The canonical address of `dest'.  */\n+} modify_pair;\n+\n+DEF_VEC_O(modify_pair);\n+DEF_VEC_ALLOC_O(modify_pair,heap);\n+\n+/* This array parallels modify_mem_list, except that it stores MEMs\n+   being set and their canonicalized memory addresses.  */\n+static VEC(modify_pair,heap) **canon_modify_mem_list;\n \n /* Bitmap indexed by block numbers to record which blocks contain\n    function calls.  */\n@@ -478,7 +488,6 @@ static void invalidate_any_buried_refs (rtx);\n static void compute_ld_motion_mems (void);\n static void trim_ld_motion_mems (void);\n static void update_ld_motion_stores (struct expr *);\n-static void free_insn_expr_list_list (rtx *);\n static void clear_modify_mem_tables (void);\n static void free_modify_mem_tables (void);\n static rtx gcse_emit_move_after (rtx, rtx, rtx);\n@@ -587,7 +596,8 @@ alloc_gcse_mem (void)\n   /* Allocate array to keep a list of insns which modify memory in each\n      basic block.  */\n   modify_mem_list = GCNEWVEC (rtx, last_basic_block);\n-  canon_modify_mem_list = GCNEWVEC (rtx, last_basic_block);\n+  canon_modify_mem_list = GCNEWVEC (VEC(modify_pair,heap) *,\n+\t\t\t\t    last_basic_block);\n   modify_mem_list_set = BITMAP_ALLOC (NULL);\n   blocks_with_calls = BITMAP_ALLOC (NULL);\n }\n@@ -1435,6 +1445,7 @@ canon_list_insert (rtx dest ATTRIBUTE_UNUSED, const_rtx unused1 ATTRIBUTE_UNUSED\n {\n   rtx dest_addr, insn;\n   int bb;\n+  modify_pair *pair;\n \n   while (GET_CODE (dest) == SUBREG\n       || GET_CODE (dest) == ZERO_EXTRACT\n@@ -1453,10 +1464,9 @@ canon_list_insert (rtx dest ATTRIBUTE_UNUSED, const_rtx unused1 ATTRIBUTE_UNUSED\n   insn = (rtx) v_insn;\n   bb = BLOCK_FOR_INSN (insn)->index;\n \n-  canon_modify_mem_list[bb] =\n-    alloc_EXPR_LIST (VOIDmode, dest_addr, canon_modify_mem_list[bb]);\n-  canon_modify_mem_list[bb] =\n-    alloc_EXPR_LIST (VOIDmode, dest, canon_modify_mem_list[bb]);\n+  pair = VEC_safe_push (modify_pair, heap, canon_modify_mem_list[bb], NULL);\n+  pair->dest = dest;\n+  pair->dest_addr = dest_addr;\n }\n \n /* Record memory modification information for INSN.  We do not actually care\n@@ -1474,14 +1484,7 @@ record_last_mem_set_info (rtx insn)\n   bitmap_set_bit (modify_mem_list_set, bb);\n \n   if (CALL_P (insn))\n-    {\n-      /* Note that traversals of this loop (other than for free-ing)\n-\t will break after encountering a CALL_INSN.  So, there's no\n-\t need to insert a pair of items, as canon_list_insert does.  */\n-      canon_modify_mem_list[bb] =\n-\talloc_INSN_LIST (insn, canon_modify_mem_list[bb]);\n-      bitmap_set_bit (blocks_with_calls, bb);\n-    }\n+    bitmap_set_bit (blocks_with_calls, bb);\n   else\n     note_stores (PATTERN (insn), canon_list_insert, (void*) insn);\n }\n@@ -1609,26 +1612,6 @@ compute_hash_table (struct hash_table_d *table)\n \f\n /* Expression tracking support.  */\n \n-/* Like free_INSN_LIST_list or free_EXPR_LIST_list, except that the node\n-   types may be mixed.  */\n-\n-static void\n-free_insn_expr_list_list (rtx *listp)\n-{\n-  rtx list, next;\n-\n-  for (list = *listp; list ; list = next)\n-    {\n-      next = XEXP (list, 1);\n-      if (GET_CODE (list) == EXPR_LIST)\n-\tfree_EXPR_LIST_node (list);\n-      else\n-\tfree_INSN_LIST_node (list);\n-    }\n-\n-  *listp = NULL;\n-}\n-\n /* Clear canon_modify_mem_list and modify_mem_list tables.  */\n static void\n clear_modify_mem_tables (void)\n@@ -1639,7 +1622,7 @@ clear_modify_mem_tables (void)\n   EXECUTE_IF_SET_IN_BITMAP (modify_mem_list_set, 0, i, bi)\n     {\n       free_INSN_LIST_list (modify_mem_list + i);\n-      free_insn_expr_list_list (canon_modify_mem_list + i);\n+      VEC_free (modify_pair, heap, canon_modify_mem_list[i]);\n     }\n   bitmap_clear (modify_mem_list_set);\n   bitmap_clear (blocks_with_calls);\n@@ -1710,25 +1693,19 @@ compute_transp (const_rtx x, int indx, sbitmap *bmap)\n \t\t\t\t\t    blocks_with_calls,\n \t\t\t\t\t    0, bb_index, bi)\n \t      {\n-\t\trtx list_entry = canon_modify_mem_list[bb_index];\n+\t\tVEC(modify_pair,heap) *list\n+\t\t  = canon_modify_mem_list[bb_index];\n+\t\tmodify_pair *pair;\n+\t\tunsigned ix;\n \n-\t\twhile (list_entry)\n+\t\tFOR_EACH_VEC_ELT_REVERSE (modify_pair, list, ix, pair)\n \t\t  {\n-\t\t    rtx dest, dest_addr;\n-\n-\t\t    /* LIST_ENTRY must be an INSN of some kind that sets memory.\n-\t\t       Examine each hunk of memory that is modified.  */\n-\n-\t\t    dest = XEXP (list_entry, 0);\n-\t\t    list_entry = XEXP (list_entry, 1);\n-\t\t    dest_addr = XEXP (list_entry, 0);\n+\t\t    rtx dest = pair->dest;\n+\t\t    rtx dest_addr = pair->dest_addr;\n \n \t\t    if (canon_true_dependence (dest, GET_MODE (dest), dest_addr,\n \t\t\t\t\t       x, NULL_RTX, rtx_addr_varies_p))\n-\t\t      {\n-\t\t\tRESET_BIT (bmap[bb_index], indx);\n-\t\t      }\n-\t\t    list_entry = XEXP (list_entry, 1);\n+\t\t      RESET_BIT (bmap[bb_index], indx);\n \t          }\n \t      }\n \t}"}]}