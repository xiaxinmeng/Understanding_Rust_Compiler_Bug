{"sha": "9026e8d4d52b13de3adcb6a165145a30f366decb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTAyNmU4ZDRkNTJiMTNkZTNhZGNiNmExNjUxNDVhMzBmMzY2ZGVjYg==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gnu.org", "date": "2005-09-15T21:51:13Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2005-09-15T21:51:13Z"}, "message": "optabs.c (expand_binop): Use swap_commutative_operands_with_target to order operands.\n\n2005-09-15  Paolo Bonzini  <bonzini@gnu.org>\n\n\t* optabs.c (expand_binop): Use swap_commutative_operands_with_target\n\tto order operands.\n\t(swap_commutative_operands_with_target): New.\n\nFrom-SVN: r104324", "tree": {"sha": "0a38e977e8114c15ea3e4e67712f71ad00c88686", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0a38e977e8114c15ea3e4e67712f71ad00c88686"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9026e8d4d52b13de3adcb6a165145a30f366decb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9026e8d4d52b13de3adcb6a165145a30f366decb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9026e8d4d52b13de3adcb6a165145a30f366decb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9026e8d4d52b13de3adcb6a165145a30f366decb/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "befd75753fb9b8c44aecaffe63f8d2cd4026b196", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/befd75753fb9b8c44aecaffe63f8d2cd4026b196", "html_url": "https://github.com/Rust-GCC/gccrs/commit/befd75753fb9b8c44aecaffe63f8d2cd4026b196"}], "stats": {"total": 41, "additions": 30, "deletions": 11}, "files": [{"sha": "12e478a4d51bcebe5811a0e0dd743d8dc552aceb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9026e8d4d52b13de3adcb6a165145a30f366decb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9026e8d4d52b13de3adcb6a165145a30f366decb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9026e8d4d52b13de3adcb6a165145a30f366decb", "patch": "@@ -1,3 +1,9 @@\n+2005-09-15  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\t* optabs.c (expand_binop): Use swap_commutative_operands_with_target\n+\tto order operands.\n+\t(swap_commutative_operands_with_target): New.\n+\n 2005-09-15  Daniel Berlin  <dberlin@dberlin.org>\n \n \t* tree-data-ref.c (analyze_array_indexes): Add estimate_only"}, {"sha": "bcb11b5432f3fcc724ed29e1c602436294ed8c92", "filename": "gcc/optabs.c", "status": "modified", "additions": 24, "deletions": 11, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9026e8d4d52b13de3adcb6a165145a30f366decb/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9026e8d4d52b13de3adcb6a165145a30f366decb/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=9026e8d4d52b13de3adcb6a165145a30f366decb", "patch": "@@ -998,6 +998,28 @@ expand_simple_binop (enum machine_mode mode, enum rtx_code code, rtx op0,\n   return expand_binop (mode, binop, op0, op1, target, unsignedp, methods);\n }\n \n+\n+/* Return whether OP0 and OP1 should be swapped when expanding a commutative\n+   binop.  Order them according to commutative_operand_precedence and, if\n+   possible, try to put TARGET first.  */\n+static bool\n+swap_commutative_operands_with_target (rtx target, rtx op0, rtx op1)\n+{\n+  int op0_prec = commutative_operand_precedence (op0);\n+  int op1_prec = commutative_operand_precedence (op1);\n+\n+  if (op0_prec < op1_prec)\n+    return true;\n+\n+  if (op0_prec > op1_prec)\n+    return false;\n+\n+  /* With equal precedence, both orders are ok, but try to put the\n+     target first.  */\n+  return target && rtx_equal_p (op1, target);\n+}\n+\n+\n /* Generate code to perform an operation specified by BINOPTAB\n    on operands OP0 and OP1, with result having machine-mode MODE.\n \n@@ -1060,24 +1082,15 @@ expand_binop (enum machine_mode mode, optab binoptab, rtx op0, rtx op1,\n   /* Record where to delete back to if we backtrack.  */\n   last = get_last_insn ();\n \n-  /* If operation is commutative,\n-     try to make the first operand a register.\n-     Even better, try to make it the same as the target.\n-     Also try to make the last operand a constant.  */\n+  /* If operation is commutative, canonicalize the order of the operands.  */\n   if (GET_RTX_CLASS (binoptab->code) == RTX_COMM_ARITH\n       || binoptab == smul_widen_optab\n       || binoptab == umul_widen_optab\n       || binoptab == smul_highpart_optab\n       || binoptab == umul_highpart_optab)\n     {\n       commutative_op = 1;\n-\n-      if (((target == 0 || REG_P (target))\n-\t   ? ((REG_P (op1)\n-\t       && !REG_P (op0))\n-\t      || target == op1)\n-\t   : rtx_equal_p (op1, target))\n-\t  || GET_CODE (op0) == CONST_INT)\n+      if (swap_commutative_operands_with_target (target, op0, op1))\n \t{\n \t  temp = op1;\n \t  op1 = op0;"}]}