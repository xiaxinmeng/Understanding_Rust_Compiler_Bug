{"sha": "987c71d9bcf5f1211dfde6e515d8a35675ca5983", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTg3YzcxZDliY2Y1ZjEyMTFkZmRlNmU1MTVkOGEzNTY3NWNhNTk4Mw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-03-21T22:14:41Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-03-21T22:14:41Z"}, "message": "(expand_expr, case ADDR_EXPR): Update temp slot address if we put it\nin a register; mark result as pointer.\n\nFrom-SVN: r6842", "tree": {"sha": "1c5e830176000ce5276584ff0f4c3f40dbf863c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1c5e830176000ce5276584ff0f4c3f40dbf863c8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/987c71d9bcf5f1211dfde6e515d8a35675ca5983", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/987c71d9bcf5f1211dfde6e515d8a35675ca5983", "html_url": "https://github.com/Rust-GCC/gccrs/commit/987c71d9bcf5f1211dfde6e515d8a35675ca5983", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/987c71d9bcf5f1211dfde6e515d8a35675ca5983/comments", "author": null, "committer": null, "parents": [{"sha": "88bdba96d92d97a61a674b1f4aa86364e0a1be60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88bdba96d92d97a61a674b1f4aa86364e0a1be60", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88bdba96d92d97a61a674b1f4aa86364e0a1be60"}], "stats": {"total": 19, "additions": 18, "deletions": 1}, "files": [{"sha": "7a49abfa3d715d074757dcb46ded924cddf4027a", "filename": "gcc/expr.c", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/987c71d9bcf5f1211dfde6e515d8a35675ca5983/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/987c71d9bcf5f1211dfde6e515d8a35675ca5983/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=987c71d9bcf5f1211dfde6e515d8a35675ca5983", "patch": "@@ -5779,6 +5779,10 @@ expand_expr (exp, target, tmode, modifier)\n       return expand_increment (exp, ! ignore);\n \n     case ADDR_EXPR:\n+      /* If nonzero, TEMP will be set to the address of something that might\n+\t be a MEM corresponding to a stack slot. */\n+      temp = 0;\n+\n       /* Are we taking the address of a nested function?  */\n       if (TREE_CODE (TREE_OPERAND (exp, 0)) == FUNCTION_DECL\n \t  && decl_function_context (TREE_OPERAND (exp, 0)) != 0)\n@@ -5803,6 +5807,8 @@ expand_expr (exp, target, tmode, modifier)\n \t  if (CONSTANT_P (op0))\n \t    op0 = force_const_mem (TYPE_MODE (TREE_TYPE (TREE_OPERAND (exp, 0))),\n \t\t\t\t   op0);\n+\t  else if (GET_CODE (op0) == MEM)\n+\t    temp = XEXP (op0, 0);\n \n \t  /* These cases happen in Fortran.  Is that legitimate?\n \t     Should Fortran work in another way?\n@@ -5827,10 +5833,21 @@ expand_expr (exp, target, tmode, modifier)\n   \n \t  if (modifier == EXPAND_SUM || modifier == EXPAND_INITIALIZER)\n \t    return XEXP (op0, 0);\n+\n \t  op0 = force_operand (XEXP (op0, 0), target);\n \t}\n+\n       if (flag_force_addr && GET_CODE (op0) != REG)\n-\treturn force_reg (Pmode, op0);\n+\top0 = force_reg (Pmode, op0);\n+\n+      if (GET_CODE (op0) == REG)\n+\tmark_reg_pointer (op0);\n+\n+      /* If we might have had a temp slot, add an equivalent address\n+\t for it.  */\n+      if (temp != 0)\n+\tupdate_temp_slot_address (temp, op0);\n+\n       return op0;\n \n     case ENTRY_VALUE_EXPR:"}]}