{"sha": "9b25e12d2d940a61ec97fdc3e5c1fe6060e159f8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWIyNWUxMmQyZDk0MGE2MWVjOTdmZGMzZTVjMWZlNjA2MGUxNTlmOA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2017-08-24T13:44:35Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2017-08-24T13:44:35Z"}, "message": "re PR target/81921 (Fails to always-inline intrinsics with -flto)\n\n2017-08-23  Richard Biener  <rguenther@suse.de>\n\n        PR target/81921\n        * targhooks.c (default_target_can_inline_p): Properly\n        use target_option_default_node when no DECL_FUNCTION_SPECIFIC_TARGET\n        is present and always compare.\n        * config/i386/i386.c (ix86_valid_target_attribute_tree): Do not\n\timply -mfpmath=sse from TARGET_SSE_P.\n        (ix86_can_inline_p): Properly use target_option_default_node when\n        no DECL_FUNCTION_SPECIFIC_TARGET is present and always compare.\n\n\t* gcc.target/i386/pr81921.c: New testcase.\n\nFrom-SVN: r251333", "tree": {"sha": "6b24e2669374d96abfb136318095097a99da7990", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6b24e2669374d96abfb136318095097a99da7990"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9b25e12d2d940a61ec97fdc3e5c1fe6060e159f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b25e12d2d940a61ec97fdc3e5c1fe6060e159f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b25e12d2d940a61ec97fdc3e5c1fe6060e159f8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b25e12d2d940a61ec97fdc3e5c1fe6060e159f8/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5d52d2c949fe6277fd1f31be8d6f48e1dae06652", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d52d2c949fe6277fd1f31be8d6f48e1dae06652", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d52d2c949fe6277fd1f31be8d6f48e1dae06652"}], "stats": {"total": 139, "additions": 72, "deletions": 67}, "files": [{"sha": "cca96ed3c13d1cb7caa1f86546730f5cfbc13649", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b25e12d2d940a61ec97fdc3e5c1fe6060e159f8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b25e12d2d940a61ec97fdc3e5c1fe6060e159f8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9b25e12d2d940a61ec97fdc3e5c1fe6060e159f8", "patch": "@@ -1,3 +1,14 @@\n+2017-08-23  Richard Biener  <rguenther@suse.de>\n+\n+        PR target/81921\n+        * targhooks.c (default_target_can_inline_p): Properly\n+        use target_option_default_node when no DECL_FUNCTION_SPECIFIC_TARGET\n+        is present and always compare.\n+        * config/i386/i386.c (ix86_valid_target_attribute_tree): Do not\n+\timply -mfpmath=sse from TARGET_SSE_P.\n+        (ix86_can_inline_p): Properly use target_option_default_node when\n+        no DECL_FUNCTION_SPECIFIC_TARGET is present and always compare.\n+\n 2017-08-24  Richard Biener  <rguenther@suse.de>\n \n \tPR debug/81936"}, {"sha": "b5c113d95aad1b7ffa6f6491a27148ba8910755f", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 37, "deletions": 53, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b25e12d2d940a61ec97fdc3e5c1fe6060e159f8/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b25e12d2d940a61ec97fdc3e5c1fe6060e159f8/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=9b25e12d2d940a61ec97fdc3e5c1fe6060e159f8", "patch": "@@ -7405,16 +7405,6 @@ ix86_valid_target_attribute_tree (tree args,\n       /* If fpmath= is not set, and we now have sse2 on 32-bit, use it.  */\n       if (enum_opts_set.x_ix86_fpmath)\n \topts_set->x_ix86_fpmath = (enum fpmath_unit) 1;\n-      else if (!TARGET_64BIT_P (opts->x_ix86_isa_flags)\n-\t       && TARGET_SSE_P (opts->x_ix86_isa_flags))\n-\t{\n-\t  if (TARGET_80387_P (opts->x_target_flags))\n-\t    opts->x_ix86_fpmath = (enum fpmath_unit) (FPMATH_SSE\n-\t\t\t\t\t\t      | FPMATH_387);\n-\t  else\n-\t    opts->x_ix86_fpmath = (enum fpmath_unit) FPMATH_SSE;\n-\t  opts_set->x_ix86_fpmath = (enum fpmath_unit) 1;\n-\t}\n \n       /* Do any overrides, such as arch=xxx, or tune=xxx support.  */\n       bool r = ix86_option_override_internal (false, opts, opts_set);\n@@ -7509,60 +7499,54 @@ ix86_valid_target_attribute_p (tree fndecl,\n static bool\n ix86_can_inline_p (tree caller, tree callee)\n {\n-  bool ret = false;\n   tree caller_tree = DECL_FUNCTION_SPECIFIC_TARGET (caller);\n   tree callee_tree = DECL_FUNCTION_SPECIFIC_TARGET (callee);\n-\n-  /* If callee has no option attributes, then it is ok to inline.  */\n   if (!callee_tree)\n-    ret = true;\n-\n-  /* If caller has no option attributes, but callee does then it is not ok to\n-     inline.  */\n-  else if (!caller_tree)\n-    ret = false;\n+    callee_tree = target_option_default_node;\n+  if (!caller_tree)\n+    caller_tree = target_option_default_node;\n+  if (callee_tree == caller_tree)\n+    return true;\n \n-  else\n-    {\n-      struct cl_target_option *caller_opts = TREE_TARGET_OPTION (caller_tree);\n-      struct cl_target_option *callee_opts = TREE_TARGET_OPTION (callee_tree);\n+  struct cl_target_option *caller_opts = TREE_TARGET_OPTION (caller_tree);\n+  struct cl_target_option *callee_opts = TREE_TARGET_OPTION (callee_tree);\n+  bool ret = false;\n \n-      /* Callee's isa options should be a subset of the caller's, i.e. a SSE4\n-\t function can inline a SSE2 function but a SSE2 function can't inline\n-\t a SSE4 function.  */\n-      if (((caller_opts->x_ix86_isa_flags & callee_opts->x_ix86_isa_flags)\n-\t   != callee_opts->x_ix86_isa_flags)\n-\t  || ((caller_opts->x_ix86_isa_flags2 & callee_opts->x_ix86_isa_flags2)\n-\t      != callee_opts->x_ix86_isa_flags2))\n-\tret = false;\n+  /* Callee's isa options should be a subset of the caller's, i.e. a SSE4\n+     function can inline a SSE2 function but a SSE2 function can't inline\n+     a SSE4 function.  */\n+  if (((caller_opts->x_ix86_isa_flags & callee_opts->x_ix86_isa_flags)\n+       != callee_opts->x_ix86_isa_flags)\n+      || ((caller_opts->x_ix86_isa_flags2 & callee_opts->x_ix86_isa_flags2)\n+\t  != callee_opts->x_ix86_isa_flags2))\n+    ret = false;\n \n-      /* See if we have the same non-isa options.  */\n-      else if (caller_opts->x_target_flags != callee_opts->x_target_flags)\n-\tret = false;\n+  /* See if we have the same non-isa options.  */\n+  else if (caller_opts->x_target_flags != callee_opts->x_target_flags)\n+    ret = false;\n \n-      /* See if arch, tune, etc. are the same.  */\n-      else if (caller_opts->arch != callee_opts->arch)\n-\tret = false;\n+  /* See if arch, tune, etc. are the same.  */\n+  else if (caller_opts->arch != callee_opts->arch)\n+    ret = false;\n \n-      else if (caller_opts->tune != callee_opts->tune)\n-\tret = false;\n+  else if (caller_opts->tune != callee_opts->tune)\n+    ret = false;\n \n-      else if (caller_opts->x_ix86_fpmath != callee_opts->x_ix86_fpmath\n-\t       /* If the calle doesn't use FP expressions differences in\n-\t\t  ix86_fpmath can be ignored.  We are called from FEs\n-\t\t  for multi-versioning call optimization, so beware of\n-\t\t  ipa_fn_summaries not available.  */\n-\t       && (! ipa_fn_summaries\n-\t\t   || ipa_fn_summaries->get\n-\t\t\t(cgraph_node::get (callee))->fp_expressions))\n-\tret = false;\n+  else if (caller_opts->x_ix86_fpmath != callee_opts->x_ix86_fpmath\n+\t   /* If the calle doesn't use FP expressions differences in\n+\t      ix86_fpmath can be ignored.  We are called from FEs\n+\t      for multi-versioning call optimization, so beware of\n+\t      ipa_fn_summaries not available.  */\n+\t   && (! ipa_fn_summaries\n+\t       || ipa_fn_summaries->get\n+\t       (cgraph_node::get (callee))->fp_expressions))\n+    ret = false;\n \n-      else if (caller_opts->branch_cost != callee_opts->branch_cost)\n-\tret = false;\n+  else if (caller_opts->branch_cost != callee_opts->branch_cost)\n+    ret = false;\n \n-      else\n-\tret = true;\n-    }\n+  else\n+    ret = true;\n \n   return ret;\n }"}, {"sha": "2adabcd97778a35ae8298fb232eaa4b154816fc1", "filename": "gcc/targhooks.c", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b25e12d2d940a61ec97fdc3e5c1fe6060e159f8/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b25e12d2d940a61ec97fdc3e5c1fe6060e159f8/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=9b25e12d2d940a61ec97fdc3e5c1fe6060e159f8", "patch": "@@ -1442,27 +1442,18 @@ default_target_option_pragma_parse (tree ARG_UNUSED (args),\n bool\n default_target_can_inline_p (tree caller, tree callee)\n {\n-  bool ret = false;\n   tree callee_opts = DECL_FUNCTION_SPECIFIC_TARGET (callee);\n   tree caller_opts = DECL_FUNCTION_SPECIFIC_TARGET (caller);\n-\n-  /* If callee has no option attributes, then it is ok to inline */\n-  if (!callee_opts)\n-    ret = true;\n-\n-  /* If caller has no option attributes, but callee does then it is not ok to\n-     inline */\n-  else if (!caller_opts)\n-    ret = false;\n+  if (! callee_opts)\n+    callee_opts = target_option_default_node;\n+  if (! caller_opts)\n+    caller_opts = target_option_default_node;\n \n   /* If both caller and callee have attributes, assume that if the\n      pointer is different, the two functions have different target\n      options since build_target_option_node uses a hash table for the\n      options.  */\n-  else\n-    ret = (callee_opts == caller_opts);\n-\n-  return ret;\n+  return callee_opts == caller_opts;\n }\n \n /* If the machine does not have a case insn that compares the bounds,"}, {"sha": "115d44550ad024a81a23d359b2dca69e9fb0858a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b25e12d2d940a61ec97fdc3e5c1fe6060e159f8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b25e12d2d940a61ec97fdc3e5c1fe6060e159f8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9b25e12d2d940a61ec97fdc3e5c1fe6060e159f8", "patch": "@@ -1,3 +1,8 @@\n+2017-08-23  Richard Biener  <rguenther@suse.de>\n+\n+        PR target/81921\n+\t* gcc.target/i386/pr81921.c: New testcase.\n+\n 2017-08-23  Daniel Santos  <daniel.santos@pobox.com>\n \n \t* gcc.target/i386/pr80969-1.c: New testcase."}, {"sha": "332c0b81a357b43c08b386e3471107adad79f6b2", "filename": "gcc/testsuite/gcc.target/i386/pr81921.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b25e12d2d940a61ec97fdc3e5c1fe6060e159f8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr81921.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b25e12d2d940a61ec97fdc3e5c1fe6060e159f8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr81921.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr81921.c?ref=9b25e12d2d940a61ec97fdc3e5c1fe6060e159f8", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target lto } */\n+/* { dg-options \"-flto -march=x86-64\" } */\n+\n+extern __inline int  __attribute__((__gnu_inline__, __always_inline__, __artificial__, target(\"sse2\")))\n+_mm_loadu_si128 (int const *__P)\n+{\n+    return *__P;\n+}\n+\n+void __attribute__((target(\"ssse3\"))) foo (void *p)\n+{\n+  volatile int x = _mm_loadu_si128 (p);\n+}"}]}