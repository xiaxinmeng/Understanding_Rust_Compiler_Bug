{"sha": "8a8a7d332d5d01db5aea7336a36d9fd71a679fb1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGE4YTdkMzMyZDVkMDFkYjVhZWE3MzM2YTM2ZDlmZDcxYTY3OWZiMQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2021-06-28T23:47:55Z"}, "committer": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2021-06-29T18:01:19Z"}, "message": "compiler: in composite literals use temps only for interfaces\n\nFor a composite literal we only need to introduce a temporary variable\nif we may be converting to an interface type, so only do it then.\nThis saves over 80% of compilation time when using gccgo to compile\ncmd/internal/obj/x86, as the GCC middle-end spends a lot of time\npointlessly computing interactions between temporary variables.\n\nFor PR debug/101064\nFor golang/go#46600\n\nReviewed-on: https://go-review.googlesource.com/c/gofrontend/+/331513", "tree": {"sha": "cb442340b2a2dc94907f1f3499ccb6eed343d4f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cb442340b2a2dc94907f1f3499ccb6eed343d4f3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8a8a7d332d5d01db5aea7336a36d9fd71a679fb1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a8a7d332d5d01db5aea7336a36d9fd71a679fb1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a8a7d332d5d01db5aea7336a36d9fd71a679fb1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a8a7d332d5d01db5aea7336a36d9fd71a679fb1/comments", "author": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c60d9160b4d966dbea5b1bbea4f817c64d0bee2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c60d9160b4d966dbea5b1bbea4f817c64d0bee2d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c60d9160b4d966dbea5b1bbea4f817c64d0bee2d"}], "stats": {"total": 19, "additions": 14, "deletions": 5}, "files": [{"sha": "f7bcc8c484a1204ebf7ab177f264f8f55f37ef1a", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a8a7d332d5d01db5aea7336a36d9fd71a679fb1/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a8a7d332d5d01db5aea7336a36d9fd71a679fb1/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=8a8a7d332d5d01db5aea7336a36d9fd71a679fb1", "patch": "@@ -1,4 +1,4 @@\n-bcafcb3c39530bb325514d6377747eb3127d1a03\n+cad187fe3aceb2a7d964b64c70dfa8c8ad24ce65\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "94342b2f9b838249471f29463ed1b243a0208c4c", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a8a7d332d5d01db5aea7336a36d9fd71a679fb1/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a8a7d332d5d01db5aea7336a36d9fd71a679fb1/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=8a8a7d332d5d01db5aea7336a36d9fd71a679fb1", "patch": "@@ -15148,7 +15148,7 @@ Struct_construction_expression::do_copy()\n }\n \n // Flatten a struct construction expression.  Store the values into\n-// temporaries in case they need interface conversion.\n+// temporaries if they may need interface conversion.\n \n Expression*\n Struct_construction_expression::do_flatten(Gogo*, Named_object*,\n@@ -15162,18 +15162,22 @@ Struct_construction_expression::do_flatten(Gogo*, Named_object*,\n     return this;\n \n   Location loc = this->location();\n+  const Struct_field_list* fields = this->type_->struct_type()->fields();\n+  Struct_field_list::const_iterator pf = fields->begin();\n   for (Expression_list::iterator pv = this->vals()->begin();\n        pv != this->vals()->end();\n-       ++pv)\n+       ++pv, ++pf)\n     {\n+      go_assert(pf != fields->end());\n       if (*pv != NULL)\n \t{\n           if ((*pv)->is_error_expression() || (*pv)->type()->is_error_type())\n             {\n               go_assert(saw_errors());\n               return Expression::make_error(loc);\n             }\n-\t  if (!(*pv)->is_multi_eval_safe())\n+\t  if (pf->type()->interface_type() != NULL\n+\t      && !(*pv)->is_multi_eval_safe())\n \t    {\n \t      Temporary_statement* temp =\n \t\tStatement::make_temporary(NULL, *pv, loc);\n@@ -15448,7 +15452,7 @@ Array_construction_expression::do_check_types(Gogo*)\n }\n \n // Flatten an array construction expression.  Store the values into\n-// temporaries in case they need interface conversion.\n+// temporaries if they may need interface conversion.\n \n Expression*\n Array_construction_expression::do_flatten(Gogo*, Named_object*,\n@@ -15467,6 +15471,11 @@ Array_construction_expression::do_flatten(Gogo*, Named_object*,\n   if (this->is_constant_array() || this->is_static_initializer())\n     return this;\n \n+  // If the array element type is not an interface type, we don't need\n+  // temporaries.\n+  if (this->type_->array_type()->element_type()->interface_type() == NULL)\n+    return this;\n+\n   Location loc = this->location();\n   for (Expression_list::iterator pv = this->vals()->begin();\n        pv != this->vals()->end();"}]}