{"sha": "7e23f4a6f80994e305f35f6de6f79966becaa92d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2UyM2Y0YTZmODA5OTRlMzA1ZjM1ZjZkZTZmNzk5NjZiZWNhYTkyZA==", "commit": {"author": {"name": "Olga Makhotina", "email": "olga.makhotina@intel.com", "date": "2017-10-26T18:18:56Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2017-10-26T18:18:56Z"}, "message": "Adding missing CMP* intrinsics\n\ngcc/\n\t* config/i386/avx512fintrin.h (_mm512_cmpeq_pd_mask,\n\t_mm512_cmple_pd_mask, _mm512_cmplt_pd_mask,\n\t_mm512_cmpneq_pd_mask, _mm512_cmpnle_pd_mask,\n\t_mm512_cmpnlt_pd_mask, _mm512_cmpord_pd_mask,\n\t_mm512_cmpunord_pd_mask, _mm512_mask_cmpeq_pd_mask,\n\t_mm512_mask_cmple_pd_mask, _mm512_mask_cmplt_pd_mask,\n\t_mm512_mask_cmpneq_pd_mask, _mm512_mask_cmpnle_pd_mask,\n\t_mm512_mask_cmpnlt_pd_mask, _mm512_mask_cmpord_pd_mask,\n\t_mm512_mask_cmpunord_pd_mask, _mm512_cmpeq_ps_mask,\n\t_mm512_cmple_ps_mask, _mm512_cmplt_ps_mask,\n\t_mm512_cmpneq_ps_mask, _mm512_cmpnle_ps_mask,\n\t_mm512_cmpnlt_ps_mask, _mm512_cmpord_ps_mask,\n\t_mm512_cmpunord_ps_mask, _mm512_mask_cmpeq_ps_mask,\n\t_mm512_mask_cmple_ps_mask, _mm512_mask_cmplt_ps_mask,\n\t_mm512_mask_cmpneq_ps_mask, _mm512_mask_cmpnle_ps_mask,\n\t_mm512_mask_cmpnlt_ps_mask, _mm512_mask_cmpord_ps_mask,\n\t_mm512_mask_cmpunord_ps_mask): New intrinsics.\ngcc/testsuite/\n\t* gcc.target/i386/avx512f-vcmpps-1.c (_mm512_cmpeq_ps_mask,\n\t_mm512_cmple_ps_mask, _mm512_cmplt_ps_mask,\n\t_mm512_cmpneq_ps_mask, _mm512_cmpnle_ps_mask,\n\t_mm512_cmpnlt_ps_mask, _mm512_cmpord_ps_mask,\n\t_mm512_cmpunord_ps_mask, _mm512_mask_cmpeq_ps_mask,\n\t_mm512_mask_cmple_ps_mask, _mm512_mask_cmplt_ps_mask,\n\t_mm512_mask_cmpneq_ps_mask, _mm512_mask_cmpnle_ps_mask,\n\t_mm512_mask_cmpnlt_ps_mask, _mm512_mask_cmpord_ps_mask,\n\t_mm512_mask_cmpunord_ps_mask): Test new intrinsics.\n\t* gcc.target/i386/avx512f-vcmpps-2.c (_mm512_cmpeq_ps_mask,\n\t_mm512_cmple_ps_mask, _mm512_cmplt_ps_mask,\n\t_mm512_cmpneq_ps_mask, _mm512_cmpnle_ps_mask,\n\t_mm512_cmpnlt_ps_mask, _mm512_cmpord_ps_mask,\n\t_mm512_cmpunord_ps_mask, _mm512_mask_cmpeq_ps_mask,\n\t_mm512_mask_cmple_ps_mask, _mm512_mask_cmplt_ps_mask,\n\t_mm512_mask_cmpneq_ps_mask, _mm512_mask_cmpnle_ps_mask,\n\t_mm512_mask_cmpnlt_ps_mask, _mm512_mask_cmpord_ps_mask,\n\t_mm512_mask_cmpunord_ps_mask): Test new intrinsics.\n\t* gcc.target/i386/avx512f-vcmppd-1.c (_mm512_cmpeq_pd_mask,\n\t_mm512_cmple_pd_mask, _mm512_cmplt_pd_mask,\n\t_mm512_cmpneq_pd_mask, _mm512_cmpnle_pd_mask,\n\t_mm512_cmpnlt_pd_mask, _mm512_cmpord_pd_mask,\n\t_mm512_cmpunord_pd_mask, _mm512_mask_cmpeq_pd_mask,\n\t_mm512_mask_cmple_pd_mask, _mm512_mask_cmplt_pd_mask,\n\t_mm512_mask_cmpneq_pd_mask, _mm512_mask_cmpnle_pd_mask,\n\t_mm512_mask_cmpnlt_pd_mask, _mm512_mask_cmpord_pd_mask,\n\t_mm512_mask_cmpunord_pd_mask): Test new intrinsics.\n\t* gcc.target/i386/avx512f-vcmppd-2.c (_mm512_cmpeq_pd_mask,\n\t_mm512_cmple_pd_mask, _mm512_cmplt_pd_mask,\n\t_mm512_cmpneq_pd_mask, _mm512_cmpnle_pd_mask,\n\t_mm512_cmpnlt_pd_mask, _mm512_cmpord_pd_mask,\n\t_mm512_cmpunord_pd_mask, _mm512_mask_cmpeq_pd_mask,\n\t_mm512_mask_cmple_pd_mask, _mm512_mask_cmplt_pd_mask,\n\t_mm512_mask_cmpneq_pd_mask, _mm512_mask_cmpnle_pd_mask,\n\t_mm512_mask_cmpnlt_pd_mask, _mm512_mask_cmpord_pd_mask,\n\t_mm512_mask_cmpunord_pd_mask): Test new intrinsics.\n\nFrom-SVN: r254118", "tree": {"sha": "0e9cea6278c7f25c3aedd33b38faf6b0c5d4d33f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0e9cea6278c7f25c3aedd33b38faf6b0c5d4d33f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7e23f4a6f80994e305f35f6de6f79966becaa92d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e23f4a6f80994e305f35f6de6f79966becaa92d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e23f4a6f80994e305f35f6de6f79966becaa92d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e23f4a6f80994e305f35f6de6f79966becaa92d/comments", "author": {"login": "Djilka", "id": 6038217, "node_id": "MDQ6VXNlcjYwMzgyMTc=", "avatar_url": "https://avatars.githubusercontent.com/u/6038217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Djilka", "html_url": "https://github.com/Djilka", "followers_url": "https://api.github.com/users/Djilka/followers", "following_url": "https://api.github.com/users/Djilka/following{/other_user}", "gists_url": "https://api.github.com/users/Djilka/gists{/gist_id}", "starred_url": "https://api.github.com/users/Djilka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Djilka/subscriptions", "organizations_url": "https://api.github.com/users/Djilka/orgs", "repos_url": "https://api.github.com/users/Djilka/repos", "events_url": "https://api.github.com/users/Djilka/events{/privacy}", "received_events_url": "https://api.github.com/users/Djilka/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "73b0ac0b82fb81dbbab5738d6443b14225c3fe53", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73b0ac0b82fb81dbbab5738d6443b14225c3fe53", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73b0ac0b82fb81dbbab5738d6443b14225c3fe53"}], "stats": {"total": 591, "additions": 520, "deletions": 71}, "files": [{"sha": "d5d32b9258ee2d2a34d107847487e468c9e09df0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e23f4a6f80994e305f35f6de6f79966becaa92d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e23f4a6f80994e305f35f6de6f79966becaa92d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7e23f4a6f80994e305f35f6de6f79966becaa92d", "patch": "@@ -1,3 +1,23 @@\n+2017-10-26  Olga Makhotina  <olga.makhotina@intel.com>\n+\n+\t* config/i386/avx512fintrin.h (_mm512_cmpeq_pd_mask,\n+\t_mm512_cmple_pd_mask, _mm512_cmplt_pd_mask,\n+\t_mm512_cmpneq_pd_mask, _mm512_cmpnle_pd_mask,\n+\t_mm512_cmpnlt_pd_mask, _mm512_cmpord_pd_mask,\n+\t_mm512_cmpunord_pd_mask, _mm512_mask_cmpeq_pd_mask,\n+\t_mm512_mask_cmple_pd_mask, _mm512_mask_cmplt_pd_mask,\n+\t_mm512_mask_cmpneq_pd_mask, _mm512_mask_cmpnle_pd_mask,\n+\t_mm512_mask_cmpnlt_pd_mask, _mm512_mask_cmpord_pd_mask,\n+\t_mm512_mask_cmpunord_pd_mask, _mm512_cmpeq_ps_mask,\n+\t_mm512_cmple_ps_mask, _mm512_cmplt_ps_mask,\n+\t_mm512_cmpneq_ps_mask, _mm512_cmpnle_ps_mask,\n+\t_mm512_cmpnlt_ps_mask, _mm512_cmpord_ps_mask,\n+\t_mm512_cmpunord_ps_mask, _mm512_mask_cmpeq_ps_mask,\n+\t_mm512_mask_cmple_ps_mask, _mm512_mask_cmplt_ps_mask,\n+\t_mm512_mask_cmpneq_ps_mask, _mm512_mask_cmpnle_ps_mask,\n+\t_mm512_mask_cmpnlt_ps_mask, _mm512_mask_cmpord_ps_mask,\n+\t_mm512_mask_cmpunord_ps_mask): New intrinsics.\n+\n 2017-10-26  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \t* config/rs6000/aix.h (TARGET_IEEEQUAD_DEFAULT): Set long double"}, {"sha": "5dc5fae1081c0642f9521bfeb5bf2b203c6b00f1", "filename": "gcc/config/i386/avx512fintrin.h", "status": "modified", "additions": 320, "deletions": 0, "changes": 320, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e23f4a6f80994e305f35f6de6f79966becaa92d/gcc%2Fconfig%2Fi386%2Favx512fintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e23f4a6f80994e305f35f6de6f79966becaa92d/gcc%2Fconfig%2Fi386%2Favx512fintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512fintrin.h?ref=7e23f4a6f80994e305f35f6de6f79966becaa92d", "patch": "@@ -14003,6 +14003,326 @@ _mm512_mask_cmp_pd_mask (__mmask8 __U, __m512d __X, __m512d __Y, const int __P)\n \t\t\t\t\t\t  _MM_FROUND_CUR_DIRECTION);\n }\n \n+extern __inline __mmask8\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_cmpeq_pd_mask (__m512d __X, __m512d __Y)\n+{\n+  return (__mmask8) __builtin_ia32_cmppd512_mask ((__v8df) __X,\n+\t\t\t\t\t\t  (__v8df) __Y, _CMP_EQ_OQ,\n+\t\t\t\t\t\t  (__mmask8) -1,\n+\t\t\t\t\t\t  _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __mmask8\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_cmpeq_pd_mask (__mmask8 __U, __m512d __X, __m512d __Y)\n+{\n+  return (__mmask8) __builtin_ia32_cmppd512_mask ((__v8df) __X,\n+\t\t\t\t\t\t  (__v8df) __Y, _CMP_EQ_OQ,\n+\t\t\t\t\t\t  (__mmask8) __U,\n+\t\t\t\t\t\t  _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __mmask8\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_cmplt_pd_mask (__m512d __X, __m512d __Y)\n+{\n+  return (__mmask8) __builtin_ia32_cmppd512_mask ((__v8df) __X,\n+\t\t\t\t\t\t  (__v8df) __Y, _CMP_LT_OS,\n+\t\t\t\t\t\t  (__mmask8) -1,\n+\t\t\t\t\t\t  _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __mmask8\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_cmplt_pd_mask (__mmask8 __U, __m512d __X, __m512d __Y)\n+{\n+  return (__mmask8) __builtin_ia32_cmppd512_mask ((__v8df) __X,\n+\t\t\t\t\t\t  (__v8df) __Y, _CMP_LT_OS,\n+\t\t\t\t\t\t  (__mmask8) __U,\n+\t\t\t\t\t\t  _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __mmask8\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_cmple_pd_mask (__m512d __X, __m512d __Y)\n+{\n+  return (__mmask8) __builtin_ia32_cmppd512_mask ((__v8df) __X,\n+\t\t\t\t\t\t  (__v8df) __Y, _CMP_LE_OS,\n+\t\t\t\t\t\t  (__mmask8) -1,\n+\t\t\t\t\t\t  _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __mmask8\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_cmple_pd_mask (__mmask8 __U, __m512d __X, __m512d __Y)\n+{\n+  return (__mmask8) __builtin_ia32_cmppd512_mask ((__v8df) __X,\n+\t\t\t\t\t\t  (__v8df) __Y, _CMP_LE_OS,\n+\t\t\t\t\t\t  (__mmask8) __U,\n+\t\t\t\t\t\t  _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __mmask8\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_cmpunord_pd_mask (__m512d __X, __m512d __Y)\n+{\n+  return (__mmask8) __builtin_ia32_cmppd512_mask ((__v8df) __X,\n+\t\t\t\t\t\t  (__v8df) __Y, _CMP_UNORD_Q,\n+\t\t\t\t\t\t  (__mmask8) -1,\n+\t\t\t\t\t\t  _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __mmask8\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_cmpunord_pd_mask (__mmask8 __U, __m512d __X, __m512d __Y)\n+{\n+  return (__mmask8) __builtin_ia32_cmppd512_mask ((__v8df) __X,\n+\t\t\t\t\t\t  (__v8df) __Y, _CMP_UNORD_Q,\n+\t\t\t\t\t\t  (__mmask8) __U,\n+\t\t\t\t\t\t  _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __mmask8\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_cmpneq_pd_mask (__m512d __X, __m512d __Y)\n+{\n+  return (__mmask8) __builtin_ia32_cmppd512_mask ((__v8df) __X,\n+\t\t\t\t\t\t  (__v8df) __Y, _CMP_NEQ_UQ,\n+\t\t\t\t\t\t  (__mmask8) -1,\n+\t\t\t\t\t\t  _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __mmask8\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_cmpneq_pd_mask (__mmask8 __U, __m512d __X, __m512d __Y)\n+{\n+  return (__mmask8) __builtin_ia32_cmppd512_mask ((__v8df) __X,\n+\t\t\t\t\t\t  (__v8df) __Y, _CMP_NEQ_UQ,\n+\t\t\t\t\t\t  (__mmask8) __U,\n+\t\t\t\t\t\t  _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __mmask8\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_cmpnlt_pd_mask (__m512d __X, __m512d __Y)\n+{\n+  return (__mmask8) __builtin_ia32_cmppd512_mask ((__v8df) __X,\n+\t\t\t\t\t\t  (__v8df) __Y, _CMP_NLT_US,\n+\t\t\t\t\t\t  (__mmask8) -1,\n+\t\t\t\t\t\t  _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __mmask8\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_cmpnlt_pd_mask (__mmask8 __U, __m512d __X, __m512d __Y)\n+{\n+  return (__mmask8) __builtin_ia32_cmppd512_mask ((__v8df) __X,\n+\t\t\t\t\t\t  (__v8df) __Y, _CMP_NLT_US,\n+\t\t\t\t\t\t  (__mmask8) __U,\n+\t\t\t\t\t\t  _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __mmask8\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_cmpnle_pd_mask (__m512d __X, __m512d __Y)\n+{\n+  return (__mmask8) __builtin_ia32_cmppd512_mask ((__v8df) __X,\n+\t\t\t\t\t\t  (__v8df) __Y, _CMP_NLE_US,\n+\t\t\t\t\t\t  (__mmask8) -1,\n+\t\t\t\t\t\t  _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __mmask8\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_cmpnle_pd_mask (__mmask8 __U, __m512d __X, __m512d __Y)\n+{\n+  return (__mmask8) __builtin_ia32_cmppd512_mask ((__v8df) __X,\n+\t\t\t\t\t\t  (__v8df) __Y, _CMP_NLE_US,\n+\t\t\t\t\t\t  (__mmask8) __U,\n+\t\t\t\t\t\t  _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __mmask8\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_cmpord_pd_mask (__m512d __X, __m512d __Y)\n+{\n+  return (__mmask8) __builtin_ia32_cmppd512_mask ((__v8df) __X,\n+\t\t\t\t\t\t  (__v8df) __Y, _CMP_ORD_Q,\n+\t\t\t\t\t\t  (__mmask8) -1,\n+\t\t\t\t\t\t  _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __mmask8\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_cmpord_pd_mask (__mmask8 __U, __m512d __X, __m512d __Y)\n+{\n+  return (__mmask8) __builtin_ia32_cmppd512_mask ((__v8df) __X,\n+\t\t\t\t\t\t  (__v8df) __Y, _CMP_ORD_Q,\n+\t\t\t\t\t\t  (__mmask8) __U,\n+\t\t\t\t\t\t  _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __mmask16\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_cmpeq_ps_mask (__m512 __X, __m512 __Y)\n+{\n+  return (__mmask16) __builtin_ia32_cmpps512_mask ((__v16sf) __X,\n+\t\t\t\t\t\t   (__v16sf) __Y, _CMP_EQ_OQ,\n+\t\t\t\t\t\t   (__mmask16) -1,\n+\t\t\t\t\t\t   _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __mmask16\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_cmpeq_ps_mask (__mmask16 __U, __m512 __X, __m512 __Y)\n+{\n+   return (__mmask16) __builtin_ia32_cmpps512_mask ((__v16sf) __X,\n+\t\t\t\t\t\t   (__v16sf) __Y, _CMP_EQ_OQ,\n+\t\t\t\t\t\t   (__mmask16) __U,\n+\t\t\t\t\t\t   _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __mmask16\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_cmplt_ps_mask (__m512 __X, __m512 __Y)\n+{\n+  return (__mmask16) __builtin_ia32_cmpps512_mask ((__v16sf) __X,\n+\t\t\t\t\t\t   (__v16sf) __Y, _CMP_LT_OS,\n+\t\t\t\t\t\t   (__mmask16) -1,\n+\t\t\t\t\t\t   _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __mmask16\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_cmplt_ps_mask (__mmask16 __U, __m512 __X, __m512 __Y)\n+{\n+   return (__mmask16) __builtin_ia32_cmpps512_mask ((__v16sf) __X,\n+\t\t\t\t\t\t   (__v16sf) __Y, _CMP_LT_OS,\n+\t\t\t\t\t\t   (__mmask16) __U,\n+\t\t\t\t\t\t   _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __mmask16\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_cmple_ps_mask (__m512 __X, __m512 __Y)\n+{\n+  return (__mmask16) __builtin_ia32_cmpps512_mask ((__v16sf) __X,\n+\t\t\t\t\t\t   (__v16sf) __Y, _CMP_LE_OS,\n+\t\t\t\t\t\t   (__mmask16) -1,\n+\t\t\t\t\t\t   _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __mmask16\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_cmple_ps_mask (__mmask16 __U, __m512 __X, __m512 __Y)\n+{\n+   return (__mmask16) __builtin_ia32_cmpps512_mask ((__v16sf) __X,\n+\t\t\t\t\t\t   (__v16sf) __Y, _CMP_LE_OS,\n+\t\t\t\t\t\t   (__mmask16) __U,\n+\t\t\t\t\t\t   _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __mmask16\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_cmpunord_ps_mask (__m512 __X, __m512 __Y)\n+{\n+  return (__mmask16) __builtin_ia32_cmpps512_mask ((__v16sf) __X,\n+\t\t\t\t\t\t   (__v16sf) __Y, _CMP_UNORD_Q,\n+\t\t\t\t\t\t   (__mmask16) -1,\n+\t\t\t\t\t\t   _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __mmask16\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_cmpunord_ps_mask (__mmask16 __U, __m512 __X, __m512 __Y)\n+{\n+   return (__mmask16) __builtin_ia32_cmpps512_mask ((__v16sf) __X,\n+\t\t\t\t\t\t   (__v16sf) __Y, _CMP_UNORD_Q,\n+\t\t\t\t\t\t   (__mmask16) __U,\n+\t\t\t\t\t\t   _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __mmask16\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_cmpneq_ps_mask (__m512 __X, __m512 __Y)\n+{\n+  return (__mmask16) __builtin_ia32_cmpps512_mask ((__v16sf) __X,\n+\t\t\t\t\t\t   (__v16sf) __Y, _CMP_NEQ_UQ,\n+\t\t\t\t\t\t   (__mmask16) -1,\n+\t\t\t\t\t\t   _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __mmask16\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_cmpneq_ps_mask (__mmask16 __U, __m512 __X, __m512 __Y)\n+{\n+   return (__mmask16) __builtin_ia32_cmpps512_mask ((__v16sf) __X,\n+\t\t\t\t\t\t   (__v16sf) __Y, _CMP_NEQ_UQ,\n+\t\t\t\t\t\t   (__mmask16) __U,\n+\t\t\t\t\t\t   _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __mmask16\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_cmpnlt_ps_mask (__m512 __X, __m512 __Y)\n+{\n+  return (__mmask16) __builtin_ia32_cmpps512_mask ((__v16sf) __X,\n+\t\t\t\t\t\t   (__v16sf) __Y, _CMP_NLT_US,\n+\t\t\t\t\t\t   (__mmask16) -1,\n+\t\t\t\t\t\t   _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __mmask16\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_cmpnlt_ps_mask (__mmask16 __U, __m512 __X, __m512 __Y)\n+{\n+   return (__mmask16) __builtin_ia32_cmpps512_mask ((__v16sf) __X,\n+\t\t\t\t\t\t   (__v16sf) __Y, _CMP_NLT_US,\n+\t\t\t\t\t\t   (__mmask16) __U,\n+\t\t\t\t\t\t   _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __mmask16\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_cmpnle_ps_mask (__m512 __X, __m512 __Y)\n+{\n+  return (__mmask16) __builtin_ia32_cmpps512_mask ((__v16sf) __X,\n+\t\t\t\t\t\t   (__v16sf) __Y, _CMP_NLE_US,\n+\t\t\t\t\t\t   (__mmask16) -1,\n+\t\t\t\t\t\t   _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __mmask16\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_cmpnle_ps_mask (__mmask16 __U, __m512 __X, __m512 __Y)\n+{\n+   return (__mmask16) __builtin_ia32_cmpps512_mask ((__v16sf) __X,\n+\t\t\t\t\t\t   (__v16sf) __Y, _CMP_NLE_US,\n+\t\t\t\t\t\t   (__mmask16) __U,\n+\t\t\t\t\t\t   _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __mmask16\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_cmpord_ps_mask (__m512 __X, __m512 __Y)\n+{\n+  return (__mmask16) __builtin_ia32_cmpps512_mask ((__v16sf) __X,\n+\t\t\t\t\t\t   (__v16sf) __Y, _CMP_ORD_Q,\n+\t\t\t\t\t\t   (__mmask16) -1,\n+\t\t\t\t\t\t   _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __mmask16\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_cmpord_ps_mask (__mmask16 __U, __m512 __X, __m512 __Y)\n+{\n+   return (__mmask16) __builtin_ia32_cmpps512_mask ((__v16sf) __X,\n+\t\t\t\t\t\t   (__v16sf) __Y, _CMP_ORD_Q,\n+\t\t\t\t\t\t   (__mmask16) __U,\n+\t\t\t\t\t\t   _MM_FROUND_CUR_DIRECTION);\n+}\n+\n extern __inline __mmask8\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_cmp_sd_mask (__m128d __X, __m128d __Y, const int __P)"}, {"sha": "c035cd7c566bdca89595bc8073ed0dbc1cb6d1db", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e23f4a6f80994e305f35f6de6f79966becaa92d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e23f4a6f80994e305f35f6de6f79966becaa92d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7e23f4a6f80994e305f35f6de6f79966becaa92d", "patch": "@@ -1,3 +1,42 @@\n+2017-10-26  Olga Makhotina  <olga.makhotina@intel.com>\n+\n+\t* gcc.target/i386/avx512f-vcmpps-1.c (_mm512_cmpeq_ps_mask,\n+\t_mm512_cmple_ps_mask, _mm512_cmplt_ps_mask,\n+\t_mm512_cmpneq_ps_mask, _mm512_cmpnle_ps_mask,\n+\t_mm512_cmpnlt_ps_mask, _mm512_cmpord_ps_mask,\n+\t_mm512_cmpunord_ps_mask, _mm512_mask_cmpeq_ps_mask,\n+\t_mm512_mask_cmple_ps_mask, _mm512_mask_cmplt_ps_mask,\n+\t_mm512_mask_cmpneq_ps_mask, _mm512_mask_cmpnle_ps_mask,\n+\t_mm512_mask_cmpnlt_ps_mask, _mm512_mask_cmpord_ps_mask,\n+\t_mm512_mask_cmpunord_ps_mask): Test new intrinsics.\n+\t* gcc.target/i386/avx512f-vcmpps-2.c (_mm512_cmpeq_ps_mask,\n+\t_mm512_cmple_ps_mask, _mm512_cmplt_ps_mask,\n+\t_mm512_cmpneq_ps_mask, _mm512_cmpnle_ps_mask,\n+\t_mm512_cmpnlt_ps_mask, _mm512_cmpord_ps_mask,\n+\t_mm512_cmpunord_ps_mask, _mm512_mask_cmpeq_ps_mask,\n+\t_mm512_mask_cmple_ps_mask, _mm512_mask_cmplt_ps_mask,\n+\t_mm512_mask_cmpneq_ps_mask, _mm512_mask_cmpnle_ps_mask,\n+\t_mm512_mask_cmpnlt_ps_mask, _mm512_mask_cmpord_ps_mask,\n+\t_mm512_mask_cmpunord_ps_mask): Test new intrinsics.\n+\t* gcc.target/i386/avx512f-vcmppd-1.c (_mm512_cmpeq_pd_mask,\n+\t_mm512_cmple_pd_mask, _mm512_cmplt_pd_mask,\n+\t_mm512_cmpneq_pd_mask, _mm512_cmpnle_pd_mask,\n+\t_mm512_cmpnlt_pd_mask, _mm512_cmpord_pd_mask,\n+\t_mm512_cmpunord_pd_mask, _mm512_mask_cmpeq_pd_mask,\n+\t_mm512_mask_cmple_pd_mask, _mm512_mask_cmplt_pd_mask,\n+\t_mm512_mask_cmpneq_pd_mask, _mm512_mask_cmpnle_pd_mask,\n+\t_mm512_mask_cmpnlt_pd_mask, _mm512_mask_cmpord_pd_mask,\n+\t_mm512_mask_cmpunord_pd_mask): Test new intrinsics.\n+\t* gcc.target/i386/avx512f-vcmppd-2.c (_mm512_cmpeq_pd_mask,\n+\t_mm512_cmple_pd_mask, _mm512_cmplt_pd_mask,\n+\t_mm512_cmpneq_pd_mask, _mm512_cmpnle_pd_mask,\n+\t_mm512_cmpnlt_pd_mask, _mm512_cmpord_pd_mask,\n+\t_mm512_cmpunord_pd_mask, _mm512_mask_cmpeq_pd_mask,\n+\t_mm512_mask_cmple_pd_mask, _mm512_mask_cmplt_pd_mask,\n+\t_mm512_mask_cmpneq_pd_mask, _mm512_mask_cmpnle_pd_mask,\n+\t_mm512_mask_cmpnlt_pd_mask, _mm512_mask_cmpord_pd_mask,\n+\t_mm512_mask_cmpunord_pd_mask): Test new intrinsics.\n+\n 2017-10-26  Wilco Dijkstra  <wdijkstr@arm.com>\n \n \t* gcc.target/aarch64/ldp_stp_unaligned_2.c: New file."}, {"sha": "d3c30fcedb92f6afd39465b172fd7a0db4033177", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcmppd-1.c", "status": "modified", "additions": 27, "deletions": 2, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e23f4a6f80994e305f35f6de6f79966becaa92d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcmppd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e23f4a6f80994e305f35f6de6f79966becaa92d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcmppd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcmppd-1.c?ref=7e23f4a6f80994e305f35f6de6f79966becaa92d", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2 -mavx512f\" } */\n-/* { dg-final { scan-assembler-times \"vcmppd\\[ \\\\t\\]+\\[^\\{\\n\\]*\\[^\\}\\]%zmm\\[0-9\\]+\\[^\\n^k\\]*%k\\[1-7\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vcmppd\\[ \\\\t\\]+\\[^\\{\\n\\]*\\[^\\}\\]%zmm\\[0-9\\]+\\[^\\n^k\\]*%k\\[1-7\\]\\{%k\\[0-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcmppd\\[ \\\\t\\]+\\[^\\{\\n\\]*\\[^\\}\\]%zmm\\[0-9\\]+\\[^\\n^k\\]*%k\\[1-7\\](?:\\n|\\[ \\\\t\\]+#)\" 9 } } */\n+/* { dg-final { scan-assembler-times \"vcmppd\\[ \\\\t\\]+\\[^\\{\\n\\]*\\[^\\}\\]%zmm\\[0-9\\]+\\[^\\n^k\\]*%k\\[1-7\\]\\{%k\\[0-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 9 } } */\n /* { dg-final { scan-assembler-times \"vcmppd\\[ \\\\t\\]+\\[^\\{\\n\\]*\\{sae\\}\\[^\\n\\]*%zmm\\[0-9\\]+\\[^\\n^k\\]*%k\\[1-7\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vcmppd\\[ \\\\t\\]+\\[^\\{\\n\\]*\\{sae\\}\\[^\\n\\]*%zmm\\[0-9\\]+\\[^\\n^k\\]*%k\\[1-7\\]\\{%k\\[0-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n \n@@ -17,4 +17,29 @@ avx512f_test (void)\n   m = _mm512_mask_cmp_pd_mask (m, x, x, _CMP_FALSE_OQ);\n   m = _mm512_cmp_round_pd_mask (x, x, _CMP_FALSE_OQ, _MM_FROUND_NO_EXC);\n   m = _mm512_mask_cmp_round_pd_mask (m, x, x, _CMP_FALSE_OQ, _MM_FROUND_NO_EXC);\n+\n+  m = _mm512_cmpeq_pd_mask (x, x);\n+  m = _mm512_mask_cmpeq_pd_mask (m, x, x);\n+\n+  m = _mm512_cmplt_pd_mask (x, x);\n+  m = _mm512_mask_cmplt_pd_mask (m, x, x);\n+\n+  m = _mm512_cmple_pd_mask (x, x);\n+  m = _mm512_mask_cmple_pd_mask (m, x, x);\n+\n+  m = _mm512_cmpunord_pd_mask (x, x);\n+  m = _mm512_mask_cmpunord_pd_mask (m, x, x);\n+\n+  m = _mm512_cmpneq_pd_mask (x, x);\n+  m = _mm512_mask_cmpneq_pd_mask (m, x, x);\n+\n+  m = _mm512_cmpnlt_pd_mask (x, x);\n+  m = _mm512_mask_cmpnlt_pd_mask (m, x, x);\n+\n+  m = _mm512_cmpnle_pd_mask (x, x);\n+  m = _mm512_mask_cmpnle_pd_mask (m, x, x);\n+\n+  m = _mm512_cmpord_pd_mask (x, x);\n+  m = _mm512_mask_cmpord_pd_mask (m, x, x);\n }\n+"}, {"sha": "cee11971399a0779f4f43f5b1e0f98f295f49812", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcmppd-2.c", "status": "modified", "additions": 44, "deletions": 33, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e23f4a6f80994e305f35f6de6f79966becaa92d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcmppd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e23f4a6f80994e305f35f6de6f79966becaa92d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcmppd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcmppd-2.c?ref=7e23f4a6f80994e305f35f6de6f79966becaa92d", "patch": "@@ -11,58 +11,69 @@\n #define SIZE (AVX512F_LEN / 64)\n #include \"avx512f-mask-type.h\"\n \n+#undef SUF\n+#undef SSIZE\n+#undef GEN_CMP\n+#undef CHECK_CMP\n+\n #if AVX512F_LEN == 512\n-#define CMP(imm, rel)\t\t\t\t\t\\\n-    dst_ref = 0;\t\t\t\t\t\\\n-    for (i = 0; i < 8; i++)\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\\\n-      dst_ref = (((int) rel) << i) | dst_ref;\t\t\\\n-    }\t\t\t\t\t\t\t\\\n-    source1.x = _mm512_loadu_pd(s1);\t\t\t\\\n-    source2.x = _mm512_loadu_pd(s2);\t\t\t\\\n-    dst1 = _mm512_cmp_pd_mask(source1.x, source2.x, imm);\\\n-    dst2 = _mm512_mask_cmp_pd_mask(mask, source1.x, source2.x, imm);\\\n-    if (dst_ref != dst1) abort();\t\t\t\\\n-    if ((dst_ref & mask) != dst2) abort();\n+#define SUF(fun) _mm512##fun\n+#define SSIZE 8\n+\n+#define GEN_CMP(type)\t\t\t\t\\\n+    {\t\t\t\t\t\t\\\n+    dst3 = _mm512_cmp##type##_pd_mask(source1.x, source2.x);\\\n+    dst4 = _mm512_mask_cmp##type##_pd_mask(mask, source1.x, source2.x);\\\n+    if (dst3 != dst1) abort();\t\t\t\\\n+    if (dst4 != dst2) abort();\t\t\t\\\n+    }\n+\n+#define CHECK_CMP(imm)\t\t\t\t\\\n+    if (imm == _CMP_EQ_OQ) GEN_CMP(eq)\t\t\\\n+    if (imm == _CMP_LT_OS) GEN_CMP(lt)\t\t\\\n+    if (imm == _CMP_LE_OS) GEN_CMP(le)\t\t\\\n+    if (imm == _CMP_UNORD_Q) GEN_CMP(unord)\t\\\n+    if (imm == _CMP_NEQ_UQ) GEN_CMP(neq)\t\\\n+    if (imm == _CMP_NLT_US) GEN_CMP(nlt)\t\\\n+    if (imm == _CMP_NLE_US) GEN_CMP(nle)\t\\\n+    if (imm == _CMP_ORD_Q) GEN_CMP(ord)\t\n+\n #endif\n \n #if AVX512F_LEN == 256\n-#undef CMP\n-#define CMP(imm, rel)\t\t\t\t\t\\\n-    dst_ref = 0;\t\t\t\t\t\\\n-    for (i = 0; i < 4; i++)\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\\\n-      dst_ref = (((int) rel) << i) | dst_ref;\t\t\\\n-    }\t\t\t\t\t\t\t\\\n-    source1.x = _mm256_loadu_pd(s1);\t\t\t\\\n-    source2.x = _mm256_loadu_pd(s2);\t\t\t\\\n-    dst1 = _mm256_cmp_pd_mask(source1.x, source2.x, imm);\\\n-    dst2 = _mm256_mask_cmp_pd_mask(mask, source1.x, source2.x, imm);\\\n-    if (dst_ref != dst1) abort();\t\t\t\\\n-    if ((dst_ref & mask) != dst2) abort();\n+#define SUF(fun) _mm256##fun\n+#define SSIZE 4\n+#define GEN_CMP(type)\n+#define CHECK_CMP(imm)\n #endif\n \n #if AVX512F_LEN == 128\n+#define SUF(fun) _mm##fun\n+#define SSIZE 2\n+#define GEN_CMP(type)\n+#define CHECK_CMP(imm)\n+#endif\n+\n #undef CMP\n #define CMP(imm, rel)\t\t\t\t\t\\\n     dst_ref = 0;\t\t\t\t\t\\\n-    for (i = 0; i < 2; i++)\t\t\t\t\\\n+    for (i = 0; i < SSIZE; i++)\t\t\t\t\\\n     {\t\t\t\t\t\t\t\\\n       dst_ref = (((int) rel) << i) | dst_ref;\t\t\\\n     }\t\t\t\t\t\t\t\\\n-    source1.x = _mm_loadu_pd(s1);\t\t\t\\\n-    source2.x = _mm_loadu_pd(s2);\t\t\t\\\n-    dst1 = _mm_cmp_pd_mask(source1.x, source2.x, imm);\\\n-    dst2 = _mm_mask_cmp_pd_mask(mask, source1.x, source2.x, imm);\\\n+    source1.x = SUF(_loadu_pd)(s1);\t\t\t\\\n+    source2.x = SUF(_loadu_pd)(s2);\t\t\t\\\n+    dst1 = SUF(_cmp_pd_mask)(source1.x, source2.x, imm);\\\n+    dst2 = SUF(_mask_cmp_pd_mask)(mask, source1.x, source2.x, imm);\\\n     if (dst_ref != dst1) abort();\t\t\t\\\n-    if ((dst_ref & mask) != dst2) abort();\n-#endif\n+    if ((dst_ref & mask) != dst2) abort();\t\t\\\n+    CHECK_CMP(imm)\n \n void\n TEST ()\n {\n     UNION_TYPE (AVX512F_LEN, d) source1, source2;\n-    MASK_TYPE dst1, dst2, dst_ref;\n+    MASK_TYPE dst1, dst2, dst3, dst4, dst_ref;\n     MASK_TYPE mask = MASK_VALUE;\n     int i;\n     double s1[8]={2134.3343, 6678.346, 453.345635, 54646.464,"}, {"sha": "27be36070efcda777deb9a0fe951b99a2dbb630d", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcmpps-1.c", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e23f4a6f80994e305f35f6de6f79966becaa92d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcmpps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e23f4a6f80994e305f35f6de6f79966becaa92d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcmpps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcmpps-1.c?ref=7e23f4a6f80994e305f35f6de6f79966becaa92d", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2 -mavx512f\" } */\n-/* { dg-final { scan-assembler-times \"vcmpps\\[ \\\\t\\]+\\[^\\{\\n\\]*\\[^\\}\\]%zmm\\[0-9\\]+\\[^\\n^k\\]*%k\\[1-7\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vcmpps\\[ \\\\t\\]+\\[^\\{\\n\\]*\\[^\\}\\]%zmm\\[0-9\\]+\\[^\\n^k\\]*%k\\[1-7\\]\\{%k\\[0-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcmpps\\[ \\\\t\\]+\\[^\\{\\n\\]*\\[^\\}\\]%zmm\\[0-9\\]+\\[^\\n^k\\]*%k\\[1-7\\](?:\\n|\\[ \\\\t\\]+#)\" 9 } } */\n+/* { dg-final { scan-assembler-times \"vcmpps\\[ \\\\t\\]+\\[^\\{\\n\\]*\\[^\\}\\]%zmm\\[0-9\\]+\\[^\\n^k\\]*%k\\[1-7\\]\\{%k\\[0-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 9 } } */\n /* { dg-final { scan-assembler-times \"vcmpps\\[ \\\\t\\]+\\[^\\{\\n\\]*\\{sae\\}\\[^\\n\\]*%zmm\\[0-9\\]+\\[^\\n^k\\]*%k\\[1-7\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vcmpps\\[ \\\\t\\]+\\[^\\{\\n\\]*\\{sae\\}\\[^\\n\\]*%zmm\\[0-9\\]+\\[^\\n^k\\]*%k\\[1-7\\]\\{%k\\[0-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n \n@@ -17,4 +17,28 @@ avx512f_test (void)\n   m = _mm512_mask_cmp_ps_mask (m, x, x, _CMP_FALSE_OQ);\n   m = _mm512_cmp_round_ps_mask (x, x, _CMP_FALSE_OQ, _MM_FROUND_NO_EXC);\n   m = _mm512_mask_cmp_round_ps_mask (m, x, x, _CMP_FALSE_OQ, _MM_FROUND_NO_EXC);\n+\n+  m = _mm512_cmpeq_ps_mask (x, x);\n+  m = _mm512_mask_cmpeq_ps_mask (m, x, x);\n+\n+  m = _mm512_cmplt_ps_mask (x, x);\n+  m = _mm512_mask_cmplt_ps_mask (m, x, x);\n+\n+  m = _mm512_cmple_ps_mask (x, x);\n+  m = _mm512_mask_cmple_ps_mask (m, x, x);\n+\n+  m = _mm512_cmpunord_ps_mask (x, x);\n+  m = _mm512_mask_cmpunord_ps_mask (m, x, x);\n+\n+  m = _mm512_cmpneq_ps_mask (x, x);\n+  m = _mm512_mask_cmpneq_ps_mask (m, x, x);\n+\n+  m = _mm512_cmpnlt_ps_mask (x, x);\n+  m = _mm512_mask_cmpnlt_ps_mask (m, x, x);\n+\n+  m = _mm512_cmpnle_ps_mask (x, x);\n+  m = _mm512_mask_cmpnle_ps_mask (m, x, x);\n+\n+  m = _mm512_cmpord_ps_mask (x, x);\n+  m = _mm512_mask_cmpord_ps_mask (m, x, x);\n }"}, {"sha": "22e368f723e8c6d13dd6a882bcb20c5fce9ce1c7", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcmpps-2.c", "status": "modified", "additions": 44, "deletions": 34, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e23f4a6f80994e305f35f6de6f79966becaa92d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcmpps-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e23f4a6f80994e305f35f6de6f79966becaa92d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcmpps-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcmpps-2.c?ref=7e23f4a6f80994e305f35f6de6f79966becaa92d", "patch": "@@ -11,59 +11,69 @@\n #define SIZE (AVX512F_LEN / 32)\n #include \"avx512f-mask-type.h\"\n \n+#undef SUF\n+#undef SSIZE\n+#undef GEN_CMP\n+#undef CHECK_CMP\n+\n #if AVX512F_LEN == 512\n-#undef CMP\n-#define CMP(imm, rel)\t\t\t\t\t\\\n-    dst_ref = 0;\t\t\t\t\t\\\n-    for (i = 0; i < 16; i++)\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\\\n-      dst_ref = (((int) rel) << i) | dst_ref;\t\t\\\n-    }\t\t\t\t\t\t\t\\\n-    source1.x = _mm512_loadu_ps(s1);\t\t\t\\\n-    source2.x = _mm512_loadu_ps(s2);\t\t\t\\\n-    dst1 = _mm512_cmp_ps_mask(source1.x, source2.x, imm);\\\n-    dst2 = _mm512_mask_cmp_ps_mask(mask, source1.x, source2.x, imm);\\\n-    if (dst_ref != dst1) abort();\t\t\t\\\n-    if ((dst_ref & mask) != dst2) abort();\n+#define SUF(fun) _mm512##fun\n+#define SSIZE 16\n+\n+#define GEN_CMP(type)\t\t\t\t\\\n+    {\t\t\t\t\t\t\\\n+    dst3 = _mm512_cmp##type##_ps_mask(source1.x, source2.x);\\\n+    dst4 = _mm512_mask_cmp##type##_ps_mask(mask, source1.x, source2.x);\\\n+    if (dst3 != dst1) abort();\t\t\t\\\n+    if (dst4 != dst2) abort();\t\t\t\\\n+    }\n+\n+#define CHECK_CMP(imm)\t\t\t\t\\\n+    if (imm == _CMP_EQ_OQ) GEN_CMP(eq)\t\t\\\n+    if (imm == _CMP_LT_OS) GEN_CMP(lt)\t\t\\\n+    if (imm == _CMP_LE_OS) GEN_CMP(le)\t\t\\\n+    if (imm == _CMP_UNORD_Q) GEN_CMP(unord)\t\\\n+    if (imm == _CMP_NEQ_UQ) GEN_CMP(neq)\t\\\n+    if (imm == _CMP_NLT_US) GEN_CMP(nlt)\t\\\n+    if (imm == _CMP_NLE_US) GEN_CMP(nle)\t\\\n+    if (imm == _CMP_ORD_Q) GEN_CMP(ord)\t\n+\n #endif\n \n #if AVX512F_LEN == 256\n-#undef CMP\n-#define CMP(imm, rel)\t\t\t\t\t\\\n-    dst_ref = 0;\t\t\t\t\t\\\n-    for (i = 0; i < 8; i++)\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\\\n-      dst_ref = (((int) rel) << i) | dst_ref;\t\t\\\n-    }\t\t\t\t\t\t\t\\\n-    source1.x = _mm256_loadu_ps(s1);\t\t\t\\\n-    source2.x = _mm256_loadu_ps(s2);\t\t\t\\\n-    dst1 = _mm256_cmp_ps_mask(source1.x, source2.x, imm);\\\n-    dst2 = _mm256_mask_cmp_ps_mask(mask, source1.x, source2.x, imm);\\\n-    if (dst_ref != dst1) abort();\t\t\t\\\n-    if ((dst_ref & mask) != dst2) abort();\n+#define SUF(fun) _mm256##fun\n+#define SSIZE 8\n+#define GEN_CMP(type)\n+#define CHECK_CMP(imm)\n #endif\n \n #if AVX512F_LEN == 128\n+#define SUF(fun) _mm##fun\n+#define SSIZE 4\n+#define GEN_CMP(type)\n+#define CHECK_CMP(imm)\n+#endif\n+\n #undef CMP\n #define CMP(imm, rel)\t\t\t\t\t\\\n     dst_ref = 0;\t\t\t\t\t\\\n-    for (i = 0; i < 4; i++)\t\t\t\t\\\n+    for (i = 0; i < SSIZE; i++)\t\t\t\t\\\n     {\t\t\t\t\t\t\t\\\n       dst_ref = (((int) rel) << i) | dst_ref;\t\t\\\n     }\t\t\t\t\t\t\t\\\n-    source1.x = _mm_loadu_ps(s1);\t\t\t\\\n-    source2.x = _mm_loadu_ps(s2);\t\t\t\\\n-    dst1 = _mm_cmp_ps_mask(source1.x, source2.x, imm);\\\n-    dst2 = _mm_mask_cmp_ps_mask(mask, source1.x, source2.x, imm);\\\n+    source1.x = SUF(_loadu_ps)(s1);\t\t\t\\\n+    source2.x = SUF(_loadu_ps)(s2);\t\t\t\\\n+    dst1 = SUF(_cmp_ps_mask)(source1.x, source2.x, imm);\\\n+    dst2 = SUF(_mask_cmp_ps_mask)(mask, source1.x, source2.x, imm);\\\n     if (dst_ref != dst1) abort();\t\t\t\\\n-    if ((dst_ref & mask) != dst2) abort();\n-#endif\n+    if ((dst_ref & mask) != dst2) abort();\t\t\\\n+    CHECK_CMP(imm)\n \n void\n TEST ()\n {\n     UNION_TYPE (AVX512F_LEN,) source1, source2;\n-    MASK_TYPE dst1, dst2, dst_ref;\n+    MASK_TYPE dst1, dst2, dst3, dst4, dst_ref;\n     MASK_TYPE mask = MASK_VALUE;\n     int i;\n     float s1[16] = {2134.3343, 6678.346, 453.345635, 54646.464,"}]}