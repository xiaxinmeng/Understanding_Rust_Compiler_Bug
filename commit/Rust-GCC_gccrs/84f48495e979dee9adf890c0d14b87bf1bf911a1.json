{"sha": "84f48495e979dee9adf890c0d14b87bf1bf911a1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODRmNDg0OTVlOTc5ZGVlOWFkZjg5MGMwZDE0Yjg3YmYxYmY5MTFhMQ==", "commit": {"author": {"name": "Florian Weimer", "email": "fw@deneb.enyo.de", "date": "2013-09-26T16:39:28Z"}, "committer": {"name": "Florian Weimer", "email": "fw@gcc.gnu.org", "date": "2013-09-26T16:39:28Z"}, "message": "tree-ssa.h (walk_use_def_chains_fn, [...]): Delete.\n\n2013-09-26  Florian Weimer  <fw@deneb.enyo.de>\n\n\t* tree-ssa.h (walk_use_def_chains_fn, walk_use_def_chains): Delete.\n\t* tree-ssa.c (walk_use_def_chains_1, walk_use_def_chains): Delete.\n\t* doc/tree-ssa.texi (Walking use-def chains): Delete.\n\nFrom-SVN: r202951", "tree": {"sha": "bf45465f8dc31f1e73a75ecfc906676391b0d3a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bf45465f8dc31f1e73a75ecfc906676391b0d3a8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/84f48495e979dee9adf890c0d14b87bf1bf911a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84f48495e979dee9adf890c0d14b87bf1bf911a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84f48495e979dee9adf890c0d14b87bf1bf911a1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84f48495e979dee9adf890c0d14b87bf1bf911a1/comments", "author": {"login": "fweimer", "id": 2729073, "node_id": "MDQ6VXNlcjI3MjkwNzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2729073?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fweimer", "html_url": "https://github.com/fweimer", "followers_url": "https://api.github.com/users/fweimer/followers", "following_url": "https://api.github.com/users/fweimer/following{/other_user}", "gists_url": "https://api.github.com/users/fweimer/gists{/gist_id}", "starred_url": "https://api.github.com/users/fweimer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fweimer/subscriptions", "organizations_url": "https://api.github.com/users/fweimer/orgs", "repos_url": "https://api.github.com/users/fweimer/repos", "events_url": "https://api.github.com/users/fweimer/events{/privacy}", "received_events_url": "https://api.github.com/users/fweimer/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "74fc8b8ab93cc6be30282b9c01010198a37510ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74fc8b8ab93cc6be30282b9c01010198a37510ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74fc8b8ab93cc6be30282b9c01010198a37510ee"}], "stats": {"total": 147, "additions": 6, "deletions": 141}, "files": [{"sha": "484d868b88b676d98aa5a991bd9290915bf2e2b3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84f48495e979dee9adf890c0d14b87bf1bf911a1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84f48495e979dee9adf890c0d14b87bf1bf911a1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=84f48495e979dee9adf890c0d14b87bf1bf911a1", "patch": "@@ -1,3 +1,9 @@\n+2013-09-26  Florian Weimer  <fw@deneb.enyo.de>\n+\n+\t* tree-ssa.h (walk_use_def_chains_fn, walk_use_def_chains): Delete.\n+\t* tree-ssa.c (walk_use_def_chains_1, walk_use_def_chains): Delete.\n+\t* doc/tree-ssa.texi (Walking use-def chains): Delete.\n+\n 2013-09-26  Richard Biener  <rguenther@suse.de>\n \n \t* tree-into-ssa.c (rewrite_into_ssa): Make more SSA names"}, {"sha": "aaf741b33f1cce8128c2bfa0b20e97cd66ca2541", "filename": "gcc/doc/tree-ssa.texi", "status": "modified", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84f48495e979dee9adf890c0d14b87bf1bf911a1/gcc%2Fdoc%2Ftree-ssa.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84f48495e979dee9adf890c0d14b87bf1bf911a1/gcc%2Fdoc%2Ftree-ssa.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftree-ssa.texi?ref=84f48495e979dee9adf890c0d14b87bf1bf911a1", "patch": "@@ -725,33 +725,6 @@ Returns the version number of the @code{SSA_NAME} object @var{var}.\n @end defmac\n \n \n-@subsection Walking use-def chains\n-\n-@deftypefn {Tree SSA function} void walk_use_def_chains (@var{var}, @var{fn}, @var{data})\n-\n-Walks use-def chains starting at the @code{SSA_NAME} node @var{var}.\n-Calls function @var{fn} at each reaching definition found.  Function\n-@var{FN} takes three arguments: @var{var}, its defining statement\n-(@var{def_stmt}) and a generic pointer to whatever state information\n-that @var{fn} may want to maintain (@var{data}).  Function @var{fn} is\n-able to stop the walk by returning @code{true}, otherwise in order to\n-continue the walk, @var{fn} should return @code{false}.\n-\n-Note, that if @var{def_stmt} is a @code{PHI} node, the semantics are\n-slightly different.  For each argument @var{arg} of the PHI node, this\n-function will:\n-\n-@enumerate\n-@item Walk the use-def chains for @var{arg}.\n-@item Call @code{FN (@var{arg}, @var{phi}, @var{data})}.\n-@end enumerate\n-\n-Note how the first argument to @var{fn} is no longer the original\n-variable @var{var}, but the PHI argument currently being examined.\n-If @var{fn} wants to get at @var{var}, it should call\n-@code{PHI_RESULT} (@var{phi}).\n-@end deftypefn\n-\n @subsection Walking the dominator tree\n \n @deftypefn {Tree SSA function} void walk_dominator_tree (@var{walk_data}, @var{bb})"}, {"sha": "1452126d243e22212c8b67a591a1fe605cf3319f", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 0, "deletions": 109, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84f48495e979dee9adf890c0d14b87bf1bf911a1/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84f48495e979dee9adf890c0d14b87bf1bf911a1/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=84f48495e979dee9adf890c0d14b87bf1bf911a1", "patch": "@@ -1347,115 +1347,6 @@ ssa_undefined_value_p (tree t)\n }\n \n \n-/* Internal helper for walk_use_def_chains.  VAR, FN and DATA are as\n-   described in walk_use_def_chains.\n-\n-   VISITED is a pointer set used to mark visited SSA_NAMEs to avoid\n-      infinite loops.  We used to have a bitmap for this to just mark\n-      SSA versions we had visited.  But non-sparse bitmaps are way too\n-      expensive, while sparse bitmaps may cause quadratic behavior.\n-\n-   IS_DFS is true if the caller wants to perform a depth-first search\n-      when visiting PHI nodes.  A DFS will visit each PHI argument and\n-      call FN after each one.  Otherwise, all the arguments are\n-      visited first and then FN is called with each of the visited\n-      arguments in a separate pass.  */\n-\n-static bool\n-walk_use_def_chains_1 (tree var, walk_use_def_chains_fn fn, void *data,\n-\t\t       struct pointer_set_t *visited, bool is_dfs)\n-{\n-  gimple def_stmt;\n-\n-  if (pointer_set_insert (visited, var))\n-    return false;\n-\n-  def_stmt = SSA_NAME_DEF_STMT (var);\n-\n-  if (gimple_code (def_stmt) != GIMPLE_PHI)\n-    {\n-      /* If we reached the end of the use-def chain, call FN.  */\n-      return fn (var, def_stmt, data);\n-    }\n-  else\n-    {\n-      size_t i;\n-\n-      /* When doing a breadth-first search, call FN before following the\n-\t use-def links for each argument.  */\n-      if (!is_dfs)\n-\tfor (i = 0; i < gimple_phi_num_args (def_stmt); i++)\n-\t  if (fn (gimple_phi_arg_def (def_stmt, i), def_stmt, data))\n-\t    return true;\n-\n-      /* Follow use-def links out of each PHI argument.  */\n-      for (i = 0; i < gimple_phi_num_args (def_stmt); i++)\n-\t{\n-\t  tree arg = gimple_phi_arg_def (def_stmt, i);\n-\n-\t  /* ARG may be NULL for newly introduced PHI nodes.  */\n-\t  if (arg\n-\t      && TREE_CODE (arg) == SSA_NAME\n-\t      && walk_use_def_chains_1 (arg, fn, data, visited, is_dfs))\n-\t    return true;\n-\t}\n-\n-      /* When doing a depth-first search, call FN after following the\n-\t use-def links for each argument.  */\n-      if (is_dfs)\n-\tfor (i = 0; i < gimple_phi_num_args (def_stmt); i++)\n-\t  if (fn (gimple_phi_arg_def (def_stmt, i), def_stmt, data))\n-\t    return true;\n-    }\n-\n-  return false;\n-}\n-\n-\n-\n-/* Walk use-def chains starting at the SSA variable VAR.  Call\n-   function FN at each reaching definition found.  FN takes three\n-   arguments: VAR, its defining statement (DEF_STMT) and a generic\n-   pointer to whatever state information that FN may want to maintain\n-   (DATA).  FN is able to stop the walk by returning true, otherwise\n-   in order to continue the walk, FN should return false.\n-\n-   Note, that if DEF_STMT is a PHI node, the semantics are slightly\n-   different.  The first argument to FN is no longer the original\n-   variable VAR, but the PHI argument currently being examined.  If FN\n-   wants to get at VAR, it should call PHI_RESULT (PHI).\n-\n-   If IS_DFS is true, this function will:\n-\n-\t1- walk the use-def chains for all the PHI arguments, and,\n-\t2- call (*FN) (ARG, PHI, DATA) on all the PHI arguments.\n-\n-   If IS_DFS is false, the two steps above are done in reverse order\n-   (i.e., a breadth-first search).  */\n-\n-void\n-walk_use_def_chains (tree var, walk_use_def_chains_fn fn, void *data,\n-                     bool is_dfs)\n-{\n-  gimple def_stmt;\n-\n-  gcc_assert (TREE_CODE (var) == SSA_NAME);\n-\n-  def_stmt = SSA_NAME_DEF_STMT (var);\n-\n-  /* We only need to recurse if the reaching definition comes from a PHI\n-     node.  */\n-  if (gimple_code (def_stmt) != GIMPLE_PHI)\n-    (*fn) (var, def_stmt, data);\n-  else\n-    {\n-      struct pointer_set_t *visited = pointer_set_create ();\n-      walk_use_def_chains_1 (var, fn, data, visited, is_dfs);\n-      pointer_set_destroy (visited);\n-    }\n-}\n-\n-\n /* If necessary, rewrite the base of the reference tree *TP from\n    a MEM_REF to a plain or converted symbol.  */\n "}, {"sha": "bca35b5875525ecbc147c32f091711bd9c376e90", "filename": "gcc/tree-ssa.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84f48495e979dee9adf890c0d14b87bf1bf911a1/gcc%2Ftree-ssa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84f48495e979dee9adf890c0d14b87bf1bf911a1/gcc%2Ftree-ssa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.h?ref=84f48495e979dee9adf890c0d14b87bf1bf911a1", "patch": "@@ -56,11 +56,6 @@ extern void delete_tree_ssa (void);\n extern bool tree_ssa_useless_type_conversion (tree);\n extern tree tree_ssa_strip_useless_type_conversions (tree);\n \n-/* Call-back function for walk_use_def_chains().  At each reaching\n-   definition, a function with this prototype is called.  */\n-typedef bool (*walk_use_def_chains_fn) (tree, gimple, void *);\n-extern void walk_use_def_chains (tree, walk_use_def_chains_fn, void *, bool);\n-\n extern bool ssa_undefined_value_p (tree);\n extern void execute_update_addresses_taken (void);\n "}]}