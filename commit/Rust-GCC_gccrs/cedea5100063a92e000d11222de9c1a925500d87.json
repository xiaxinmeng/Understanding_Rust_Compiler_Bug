{"sha": "cedea5100063a92e000d11222de9c1a925500d87", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2VkZWE1MTAwMDYzYTkyZTAwMGQxMTIyMmRlOWMxYTkyNTUwMGQ4Nw==", "commit": {"author": {"name": "Alexandre Petit-Bianco", "email": "apbianco@cygnus.com", "date": "2000-06-01T06:41:11Z"}, "committer": {"name": "Alexandre Petit-Bianco", "email": "apbianco@gcc.gnu.org", "date": "2000-06-01T06:41:11Z"}, "message": "re GNATS gcj/71 (failure to compile an interface method invocation on a sub-interface)\n\n2000-04-05  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n\n\t* jcf-write.c (generate_bytecode_insns): At invokation time,\n\talways relate an interface method to the type of its selector.\n\n(Fix to the PR #71:\n http://sourceware.cygnus.com/ml/java-prs/1999-q4/msg00040.html)\n\nFrom-SVN: r34330", "tree": {"sha": "10f0fa48c74f35965f2825944978cba6a95ee828", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/10f0fa48c74f35965f2825944978cba6a95ee828"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cedea5100063a92e000d11222de9c1a925500d87", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cedea5100063a92e000d11222de9c1a925500d87", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cedea5100063a92e000d11222de9c1a925500d87", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cedea5100063a92e000d11222de9c1a925500d87/comments", "author": null, "committer": null, "parents": [{"sha": "92d8351549902259fb219f089e37f4cde3aec9a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92d8351549902259fb219f089e37f4cde3aec9a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92d8351549902259fb219f089e37f4cde3aec9a8"}], "stats": {"total": 18, "additions": 16, "deletions": 2}, "files": [{"sha": "9fdc4f0ed5290dd311a6d45980547366df2c4266", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cedea5100063a92e000d11222de9c1a925500d87/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cedea5100063a92e000d11222de9c1a925500d87/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=cedea5100063a92e000d11222de9c1a925500d87", "patch": "@@ -304,6 +304,11 @@ Thu Apr 20 18:20:58 2000  Jason Schroeder  <shrode@subnature.com>\n \t(patch_binop): New temp `cn'. Call patch_string on LHS/RHS of\n \tthe `==' and `!=' operators.\n \n+2000-04-05  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n+\n+\t* jcf-write.c (generate_bytecode_insns): At invokation time,\n+\talways relate an interface method to the type of its selector.\n+\t\n 2000-04-05  Tom Tromey  <tromey@cygnus.com>\n \n \tFix for PR gcj/2:"}, {"sha": "1dcebae43cfa27e83bb1981fdceb7fb40c94fdcf", "filename": "gcc/java/jcf-write.c", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cedea5100063a92e000d11222de9c1a925500d87/gcc%2Fjava%2Fjcf-write.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cedea5100063a92e000d11222de9c1a925500d87/gcc%2Fjava%2Fjcf-write.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-write.c?ref=cedea5100063a92e000d11222de9c1a925500d87", "patch": "@@ -2534,8 +2534,8 @@ generate_bytecode_insns (exp, target, state)\n \t  NOTE_POP (1);  /* Pop implicit this. */\n \tif (TREE_CODE (f) == FUNCTION_DECL && DECL_CONTEXT (f) != NULL_TREE)\n \t  {\n-\t    int index = find_methodref_index (&state->cpool, f);\n-\t    int interface = 0;\n+\t    tree saved_context;\n+\t    int index, interface = 0;\n \t    RESERVE (5);\n \t    if (METHOD_STATIC (f))\n \t      OP1 (OPCODE_invokestatic);\n@@ -2549,6 +2549,15 @@ generate_bytecode_insns (exp, target, state)\n \t      }\n \t    else\n \t      OP1 (OPCODE_invokevirtual);\n+\t    if (interface)\n+\t      {\n+\t\tsaved_context = DECL_CONTEXT (f);\n+\t\tDECL_CONTEXT (f) = \n+\t\t  TREE_TYPE (TREE_TYPE (TREE_VALUE (TREE_OPERAND (exp, 1))));\n+\t      }\n+\t    index = find_methodref_index (&state->cpool, f);\n+\t    if (interface)\n+\t      DECL_CONTEXT (f) = saved_context;\n \t    OP2 (index);\n \t    f = TREE_TYPE (TREE_TYPE (f));\n \t    if (TREE_CODE (f) != VOID_TYPE)"}]}