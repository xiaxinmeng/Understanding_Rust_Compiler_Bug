{"sha": "fcf617f0d2a5a1b624718e07d7b219cb0234436f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmNmNjE3ZjBkMmE1YTFiNjI0NzE4ZTA3ZDdiMjE5Y2IwMjM0NDM2Zg==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-06-24T00:16:30Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-06-24T00:16:30Z"}, "message": "Daily bump.", "tree": {"sha": "e518ee6cdfc5f111234f23456aca0411bb2f6fd5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e518ee6cdfc5f111234f23456aca0411bb2f6fd5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fcf617f0d2a5a1b624718e07d7b219cb0234436f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fcf617f0d2a5a1b624718e07d7b219cb0234436f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fcf617f0d2a5a1b624718e07d7b219cb0234436f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fcf617f0d2a5a1b624718e07d7b219cb0234436f/comments", "author": null, "committer": null, "parents": [{"sha": "7da4eae3dcef6fd5d955eb2c80c453aa52368004", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7da4eae3dcef6fd5d955eb2c80c453aa52368004", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7da4eae3dcef6fd5d955eb2c80c453aa52368004"}], "stats": {"total": 324, "additions": 323, "deletions": 1}, "files": [{"sha": "9cfa3f0c31285cfe38e6efb034a4c25b1d0773d2", "filename": "contrib/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcf617f0d2a5a1b624718e07d7b219cb0234436f/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcf617f0d2a5a1b624718e07d7b219cb0234436f/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=fcf617f0d2a5a1b624718e07d7b219cb0234436f", "patch": "@@ -1,3 +1,9 @@\n+2021-06-23  Martin Liska  <mliska@suse.cz>\n+\n+\t* gcc-git-customization.sh: Use the new wrapper.\n+\t* git-commit-mklog.py: New file.\n+\t* prepare-commit-msg: Support GCC_MKLOG_ARGS.\n+\n 2021-06-22  Martin Liska  <mliska@suse.cz>\n \n \t* mklog.py: Fix flake8 issue."}, {"sha": "71534e475cfb979250af50e32b92c69a2516e226", "filename": "gcc/ChangeLog", "status": "modified", "additions": 145, "deletions": 0, "changes": 145, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcf617f0d2a5a1b624718e07d7b219cb0234436f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcf617f0d2a5a1b624718e07d7b219cb0234436f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fcf617f0d2a5a1b624718e07d7b219cb0234436f", "patch": "@@ -1,3 +1,148 @@\n+2021-06-23  Dimitar Dimitrov  <dimitar@dinux.eu>\n+\n+\t* doc/lto.texi (Design Overview): Update that slim objects are\n+\tthe default.\n+\n+2021-06-23  Aaron Sawdey  <acsawdey@linux.ibm.com>\n+\n+\t* config/rs6000/rs6000-cpus.def: Take OPTION_MASK_PCREL_OPT out\n+\tof OTHER_POWER10_MASKS so it will not be enabled by default.\n+\n+2021-06-23  Richard Biener  <rguenther@suse.de>\n+\t    Martin Jambor  <mjambor@suse.cz>\n+\n+\t* tree-inline.c (setup_one_parameter): Set TREE_READONLY of the\n+\tparam replacement unconditionally.  Adjust comment.\n+\n+2021-06-23  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* Makefile.in (OBJS): Add gimple-range-fold.o\n+\t* gimple-range-fold.cc: New.\n+\t* gimple-range-fold.h: New.\n+\t* gimple-range-gori.cc (gimple_range_calc_op1): Move to here.\n+\t(gimple_range_calc_op2): Ditto.\n+\t* gimple-range-gori.h: Move prototypes to here.\n+\t* gimple-range.cc: Adjust include files.\n+\t(fur_source:fur_source): Relocate to gimple-range-fold.cc.\n+\t(fur_source::get_operand): Ditto.\n+\t(fur_source::get_phi_operand): Ditto.\n+\t(fur_source::query_relation): Ditto.\n+\t(fur_source::register_relation): Ditto.\n+\t(class fur_edge): Ditto.\n+\t(fur_edge::fur_edge): Ditto.\n+\t(fur_edge::get_operand): Ditto.\n+\t(fur_edge::get_phi_operand): Ditto.\n+\t(fur_stmt::fur_stmt): Ditto.\n+\t(fur_stmt::get_operand): Ditto.\n+\t(fur_stmt::get_phi_operand): Ditto.\n+\t(fur_stmt::query_relation): Ditto.\n+\t(class fur_depend): Relocate to gimple-range-fold.h.\n+\t(fur_depend::fur_depend): Relocate to gimple-range-fold.cc.\n+\t(fur_depend::register_relation): Ditto.\n+\t(fur_depend::register_relation): Ditto.\n+\t(class fur_list): Ditto.\n+\t(fur_list::fur_list): Ditto.\n+\t(fur_list::get_operand): Ditto.\n+\t(fur_list::get_phi_operand): Ditto.\n+\t(fold_range): Ditto.\n+\t(adjust_pointer_diff_expr): Ditto.\n+\t(gimple_range_adjustment): Ditto.\n+\t(gimple_range_base_of_assignment): Ditto.\n+\t(gimple_range_operand1): Ditto.\n+\t(gimple_range_operand2): Ditto.\n+\t(gimple_range_calc_op1): Relocate to gimple-range-gori.cc.\n+\t(gimple_range_calc_op2): Ditto.\n+\t(fold_using_range::fold_stmt): Relocate to gimple-range-fold.cc.\n+\t(fold_using_range::range_of_range_op): Ditto.\n+\t(fold_using_range::range_of_address): Ditto.\n+\t(fold_using_range::range_of_phi): Ditto.\n+\t(fold_using_range::range_of_call): Ditto.\n+\t(fold_using_range::range_of_builtin_ubsan_call): Ditto.\n+\t(fold_using_range::range_of_builtin_call): Ditto.\n+\t(fold_using_range::range_of_cond_expr): Ditto.\n+\t(fold_using_range::range_of_ssa_name_with_loop_info): Ditto.\n+\t(fold_using_range::relation_fold_and_or): Ditto.\n+\t(fold_using_range::postfold_gcond_edges): Ditto.\n+\t* gimple-range.h: Add gimple-range-fold.h to include files. Change\n+\tGIMPLE_RANGE_STMT_H to GIMPLE_RANGE_H.\n+\t(gimple_range_handler): Relocate to gimple-range-fold.h.\n+\t(gimple_range_ssa_p): Ditto.\n+\t(range_compatible_p): Ditto.\n+\t(class fur_source): Ditto.\n+\t(class fur_stmt): Ditto.\n+\t(class fold_using_range): Ditto.\n+\t(gimple_range_calc_op1): Relocate to gimple-range-gori.h\n+\t(gimple_range_calc_op2): Ditto.\n+\n+2021-06-23  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\tPR tree-optimization/101148\n+\tPR tree-optimization/101014\n+\t* gimple-range-cache.cc (ranger_cache::ranger_cache): Adjust.\n+\t(ranger_cache::~ranger_cache): Adjust.\n+\t(ranger_cache::block_range): Check if propagation disallowed.\n+\t(ranger_cache::propagate_cache): Disallow propagation if new value\n+\tcan't be stored properly.\n+\t* gimple-range-cache.h (ranger_cache::m_propfail): New member.\n+\n+2021-06-23  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gimple-range-cache.cc (class ssa_block_ranges): Adjust prototype.\n+\t(sbr_vector::set_bb_range): Return true.\n+\t(class sbr_sparse_bitmap): Adjust.\n+\t(sbr_sparse_bitmap::set_bb_range): Return value.\n+\t(block_range_cache::set_bb_range): Return value.\n+\t(ranger_cache::propagate_cache): Use return value to print msg.\n+\t* gimple-range-cache.h (class block_range_cache): Adjust.\n+\n+2021-06-23  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gimple-range.cc (dump_bb): Use range_on_edge from the cache.\n+\n+2021-06-23  Jeff Law  <jeffreyalaw@gmail.com>\n+\n+\t* config/h8300/logical.md (<code><mode>3<ccnz>): Use <cczn>\n+\tso this pattern can be used for test/compare removal.  Pass\n+\tcurrent insn to compute_logical_op_length and output_logical_op.\n+\t* config/h8300/h8300.c (compute_logical_op_cc): Remove.\n+\t(h8300_and_costs): Add argument to compute_logical_op_length.\n+\t(output_logical_op): Add new argument.  Use it to determine if the\n+\tcondition codes are used and adjust the output accordingly.\n+\t(compute_logical_op_length): Add new argument and update length\n+\tcomputations when condition codes are used.\n+\t* config/h8300/h8300-protos.h (compute_logical_op_length): Update\n+\tprototype.\n+\t(output_logical_op): Likewise.\n+\n+2021-06-23  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/89021\n+\t* config/i386/i386-expand.c (expand_vec_perm_pshufb):\n+\tHandle 64bit modes for TARGET_XOP.  Use indirect gen_* functions.\n+\t* config/i386/mmx.md (mmx_ppermv64): New insn pattern.\n+\t* config/i386/i386.md (unspec): Move UNSPEC_XOP_PERMUTE from ...\n+\t* config/i386/sse.md (unspec): ... here.\n+\n+2021-06-23  Martin Liska  <mliska@suse.cz>\n+\n+\tPR target/98636\n+\t* optc-save-gen.awk: Put back arm_fp16_format to\n+\tchecked_options.\n+\n+2021-06-23  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/101175\n+\t* config/i386/i386.md (bsr_rex64): Add zero-flag setting RTX.\n+\t(bsr): Ditto.\n+\t(*bsrhi): Remove.\n+\t(clz<mode>2): Update RTX pattern for additions.\n+\n+2021-06-23  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/101167\n+\t* omp-low.c (lower_omp_regimplify_p): Regimplify also PARM_DECLs\n+\tand RESULT_DECLs that have DECL_HAS_VALUE_EXPR_P set.\n+\n 2021-06-22  Sergei Trofimovich  <siarheit@google.com>\n \n \t* doc/rtl.texi: drop unbalanced parenthesis."}, {"sha": "fb7726b966115c8aa0ef99beb49fb15359cb837f", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcf617f0d2a5a1b624718e07d7b219cb0234436f/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcf617f0d2a5a1b624718e07d7b219cb0234436f/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=fcf617f0d2a5a1b624718e07d7b219cb0234436f", "patch": "@@ -1 +1 @@\n-20210623\n+20210624"}, {"sha": "368ef75781a8df906cf8dd24955a906729e89514", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcf617f0d2a5a1b624718e07d7b219cb0234436f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcf617f0d2a5a1b624718e07d7b219cb0234436f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=fcf617f0d2a5a1b624718e07d7b219cb0234436f", "patch": "@@ -1,3 +1,21 @@\n+2021-06-23  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/101174\n+\t* pt.c (push_access_scope): For artificial deduction guides,\n+\tset the access scope to that of the constructor.\n+\t(pop_access_scope): Likewise.\n+\t(build_deduction_guide): Don't set DECL_CONTEXT on the guide.\n+\n+2021-06-23  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/86439\n+\t* call.c (print_error_for_call_failure): Constify 'args' parameter.\n+\t(perform_dguide_overload_resolution): Define.\n+\t* cp-tree.h: (perform_dguide_overload_resolution): Declare.\n+\t* pt.c (do_class_deduction): Use perform_dguide_overload_resolution\n+\tinstead of build_new_function_call.  Don't use tf_decltype or\n+\tset cp_unevaluated_operand.  Remove unnecessary NULL_TREE tests.\n+\n 2021-06-21  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/67302"}, {"sha": "aded48c57f52eb551195d23c87fbcd9041b6697a", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcf617f0d2a5a1b624718e07d7b219cb0234436f/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcf617f0d2a5a1b624718e07d7b219cb0234436f/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=fcf617f0d2a5a1b624718e07d7b219cb0234436f", "patch": "@@ -1,3 +1,14 @@\n+2021-06-23  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* dump-parse-tree.c (show_omp_clauses): Fix enum type used\n+\tfor dumping gfc_omp_defaultmap_category.\n+\n+2021-06-23  Andre Vehreschild  <vehre@gcc.gnu.org>\n+\n+\tPR fortran/100337\n+\t* trans-intrinsic.c (conv_co_collective): Check stat for null ptr\n+\tbefore dereferrencing.\n+\n 2021-06-18  Harald Anlauf  <anlauf@gmx.de>\n \n \tPR fortran/100283"}, {"sha": "9ad2094e2a09a25868a12031ced8323eaa72ec6a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcf617f0d2a5a1b624718e07d7b219cb0234436f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcf617f0d2a5a1b624718e07d7b219cb0234436f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fcf617f0d2a5a1b624718e07d7b219cb0234436f", "patch": "@@ -1,3 +1,51 @@\n+2021-06-23  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/101174\n+\t* g++.dg/cpp1z/class-deduction-access3.C: New test.\n+\t* g++.dg/cpp1z/class-deduction91.C: New test.\n+\n+2021-06-23  Aaron Sawdey  <acsawdey@linux.ibm.com>\n+\n+\t* gcc.target/powerpc/pcrel-opt-inc-di.c: Enable -mpcrel-opt to test it.\n+\t* gcc.target/powerpc/pcrel-opt-ld-df.c: Enable -mpcrel-opt to test it.\n+\t* gcc.target/powerpc/pcrel-opt-ld-di.c: Enable -mpcrel-opt to test it.\n+\t* gcc.target/powerpc/pcrel-opt-ld-hi.c: Enable -mpcrel-opt to test it.\n+\t* gcc.target/powerpc/pcrel-opt-ld-qi.c: Enable -mpcrel-opt to test it.\n+\t* gcc.target/powerpc/pcrel-opt-ld-sf.c: Enable -mpcrel-opt to test it.\n+\t* gcc.target/powerpc/pcrel-opt-ld-si.c: Enable -mpcrel-opt to test it.\n+\t* gcc.target/powerpc/pcrel-opt-ld-vector.c: Enable -mpcrel-opt to\n+\ttest it.\n+\t* gcc.target/powerpc/pcrel-opt-st-df.c: Enable -mpcrel-opt to test it.\n+\t* gcc.target/powerpc/pcrel-opt-st-di.c: Enable -mpcrel-opt to test it.\n+\t* gcc.target/powerpc/pcrel-opt-st-hi.c: Enable -mpcrel-opt to test it.\n+\t* gcc.target/powerpc/pcrel-opt-st-qi.c: Enable -mpcrel-opt to test it.\n+\t* gcc.target/powerpc/pcrel-opt-st-sf.c: Enable -mpcrel-opt to test it.\n+\t* gcc.target/powerpc/pcrel-opt-st-si.c: Enable -mpcrel-opt to test it.\n+\t* gcc.target/powerpc/pcrel-opt-st-vector.c: Enable -mpcrel-opt to\n+\ttest it.\n+\n+2021-06-23  Xi Ruoyao  <xry111@mengyan@123.wang>\n+\n+\t* gcc.c-torture/execute/950704-1.c: Add -fwrapv to avoid\n+\tundefined behavior.\n+\n+2021-06-23  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/86439\n+\t* g++.dg/cpp1z/class-deduction88.C: New test.\n+\t* g++.dg/cpp1z/class-deduction89.C: New test.\n+\t* g++.dg/cpp1z/class-deduction90.C: New test.\n+\n+2021-06-23  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/101175\n+\t* gcc.target/i386/pr101175.c: New test.\n+\n+2021-06-23  Andre Vehreschild  <vehre@gcc.gnu.org>\n+\n+\tPR fortran/100337\n+\t* gfortran.dg/coarray_collectives_17.f90: New test.\n+\n 2021-06-22  Sandra Loosemore  <sandra@codesourcery.com>\n \t    Tobias Burnus  <tobias@codesourcery.com>\n "}, {"sha": "d453f87698f035c51980563af7f49f8e7a9e1806", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcf617f0d2a5a1b624718e07d7b219cb0234436f/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcf617f0d2a5a1b624718e07d7b219cb0234436f/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=fcf617f0d2a5a1b624718e07d7b219cb0234436f", "patch": "@@ -1,3 +1,25 @@\n+2021-06-23  Kewen Lin  <linkw@linux.ibm.com>\n+\n+\t* configure: Regenerate.\n+\t* configure.ac (test for libgcc_cv_powerpc_3_1_float128_hw): Fix\n+\ttypos among the name, CFLAGS and the test.\n+\t* config/rs6000/t-float128-hw (fp128_3_1_hw_funcs, fp128_3_1_hw_src,\n+\tfp128_3_1_hw_static_obj, fp128_3_1_hw_shared_obj, fp128_3_1_hw_obj):\n+\tRemove.\n+\t* config/rs6000/t-float128-p10-hw (FLOAT128_HW_INSNS): Append\n+\tmacro FLOAT128_HW_INSNS_ISA3_1.\n+\t(FP128_3_1_CFLAGS_HW): Fix option typo.\n+\t* config/rs6000/float128-ifunc.c (SW_OR_HW_ISA3_1): Guard this with\n+\tFLOAT128_HW_INSNS_ISA3_1.\n+\t(__floattikf_resolve): Likewise.\n+\t(__floatuntikf_resolve): Likewise.\n+\t(__fixkfti_resolve): Likewise.\n+\t(__fixunskfti_resolve): Likewise.\n+\t(__floattikf): Likewise.\n+\t(__floatuntikf): Likewise.\n+\t(__fixkfti): Likewise.\n+\t(__fixunskfti): Likewise.\n+\n 2021-06-11  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n \n \tPR target/99939"}, {"sha": "6a87abba666ced648d8a499ebee4a297a36c6256", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcf617f0d2a5a1b624718e07d7b219cb0234436f/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcf617f0d2a5a1b624718e07d7b219cb0234436f/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=fcf617f0d2a5a1b624718e07d7b219cb0234436f", "patch": "@@ -1,3 +1,8 @@\n+2021-06-23  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/101167\n+\t* testsuite/libgomp.c-c++-common/task-reduction-15.c: New test.\n+\n 2021-06-17  Chung-Lin Tang  <cltang@codesourcery.com>\n \n \t* hashtab.h (htab_clear): New function with initialization code"}, {"sha": "08355108daaa90503094b047562d5e58f82d3131", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcf617f0d2a5a1b624718e07d7b219cb0234436f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcf617f0d2a5a1b624718e07d7b219cb0234436f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=fcf617f0d2a5a1b624718e07d7b219cb0234436f", "patch": "@@ -1,3 +1,70 @@\n+2021-06-23  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/101174\n+\t* testsuite/23_containers/multiset/cons/deduction.cc:\n+\tUncomment CTAD example that was rejected by this bug.\n+\t* testsuite/23_containers/set/cons/deduction.cc: Likewise.\n+\n+2021-06-23  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/chrono (chrono::year::is_leap()): Fix incorrect\n+\tlogic in comment.\n+\n+2021-06-23  Matthias Kretz  <m.kretz@gsi.de>\n+\n+\t* testsuite/experimental/simd/README.md: New file.\n+\n+2021-06-23  Matthias Kretz  <m.kretz@gsi.de>\n+\n+\t* testsuite/experimental/simd/driver.sh: Rewrite output\n+\tverbosity logic. Add -p/--percentage option. Allow -v/--verbose\n+\tto be used twice. Add -x and -o short options. Parse long\n+\toptions with = instead of separating space generically. Parce\n+\tcontracted short options. Make unrecognized options an error.\n+\tIf same-line output is active, trap on EXIT to increment the\n+\tprogress (only with --percentage), erase the line and print the\n+\tcurrent status.\n+\t* testsuite/experimental/simd/generate_makefile.sh: Initialize\n+\thelper files for progress account keeping. Update help target\n+\tfor changes to DRIVEROPTS.\n+\n+2021-06-23  Matthias Kretz  <m.kretz@gsi.de>\n+\n+\t* testsuite/Makefile.am (check-simd): Remove -fno-tree-vrp flag\n+\tand associated warning.\n+\t* testsuite/Makefile.in: Regenerate.\n+\n+2021-06-23  Cassio Neri  <cassio.neri@gmail.com>\n+\t    Jonathan Wakely  <jwakely@redhat.com>\n+\t    Ulrich Drepper  <drepper@redhat.com>\n+\n+\t* include/std/chrono (chrono::year::is_leap()): Optimize.\n+\n+2021-06-23  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/86439\n+\t* testsuite/23_containers/map/cons/deduction.cc: Replace ambiguous\n+\tCTAD examples.\n+\t* testsuite/23_containers/multimap/cons/deduction.cc: Likewise.\n+\t* testsuite/23_containers/multiset/cons/deduction.cc: Likewise.\n+\tMention one of the replaced examples is broken due to PR101174.\n+\t* testsuite/23_containers/set/cons/deduction.cc: Likewise.\n+\t* testsuite/23_containers/unordered_map/cons/deduction.cc: Replace\n+\tambiguous CTAD examples.\n+\t* testsuite/23_containers/unordered_multimap/cons/deduction.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/unordered_multiset/cons/deduction.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/unordered_set/cons/deduction.cc: Likewise.\n+\n+2021-06-23  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/mutex (__detail::__try_lock_impl): Rename\n+\tparameter to avoid clashing with newlib's __lockable macro.\n+\t(try_lock): Add 'inline' specifier.\n+\t* testsuite/17_intro/names.cc: Add check for __lockable.\n+\t* testsuite/30_threads/try_lock/5.cc: Add options for pthreads.\n+\n 2021-06-22  Jonathan Wakely  <jwakely@redhat.com>\n \t    Matthias Kretz  <m.kretz@gsi.de>\n "}]}