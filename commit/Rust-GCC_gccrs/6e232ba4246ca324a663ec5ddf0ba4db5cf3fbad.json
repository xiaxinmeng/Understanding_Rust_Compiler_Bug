{"sha": "6e232ba4246ca324a663ec5ddf0ba4db5cf3fbad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmUyMzJiYTQyNDZjYTMyNGE2NjNlYzVkZGYwYmE0ZGI1Y2YzZmJhZA==", "commit": {"author": {"name": "James Norris", "email": "jnorris@codesourcery.com", "date": "2015-11-12T22:20:41Z"}, "committer": {"name": "James Norris", "email": "jnorris@gcc.gnu.org", "date": "2015-11-12T22:20:41Z"}, "message": "c-pragma.c (oacc_pragmas): Add entry for declare directive.\n\n2015-11-12  James Norris  <jnorris@codesourcery.com>\n\t    Joseph Myers  <joseph@codesourcery.com>\n\n\tgcc/c-family/\n\t* c-pragma.c (oacc_pragmas): Add entry for declare directive. \n\t* c-pragma.h (enum pragma_kind): Add PRAGMA_OACC_DECLARE.\n\t(enum pragma_omp_clause): Add PRAGMA_OACC_CLAUSE_DEVICE_RESIDENT and\n\tPRAGMA_OACC_CLAUSE_LINK.\n\n\tgcc/c/\n\t* c-parser.c (c_parser_pragma): Handle PRAGMA_OACC_DECLARE.\n\t(c_parser_omp_clause_name): Handle 'device_resident' clause.\n\t(c_parser_oacc_data_clause): Handle PRAGMA_OACC_CLAUSE_DEVICE_RESIDENT\n\tand PRAGMA_OMP_CLAUSE_LINK.\n\t(c_parser_oacc_all_clauses): Handle PRAGMA_OACC_CLAUSE_DEVICE_RESIDENT\n\tand PRAGMA_OACC_CLAUSE_LINK.\n\t(OACC_DECLARE_CLAUSE_MASK): New definition.\n\t(c_parser_oacc_declare): New function.\n\n\tgcc/cp/\n\t* parser.c (cp_parser_omp_clause_name): Handle 'device_resident'\n\tclause.\n\t(cp_parser_oacc_data_clause): Handle PRAGMA_OACC_CLAUSE_DEVICE_RESIDENT\n\tand PRAGMA_OMP_CLAUSE_LINK.\n\t(cp_paser_oacc_all_clauses): Handle PRAGMA_OACC_CLAUSE_DEVICE_RESIDENT\n\tand PRAGMA_OMP_CLAUSE_LINK.\n\t(OACC_DECLARE_CLAUSE_MASK): New definition.\n\t(cp_parser_oacc_declare): New function.\n\t(cp_parser_pragma): Handle PRAGMA_OACC_DECLARE.\n\t* pt.c (tsubst_expr): Handle OACC_DECLARE.\n\n\tgcc/\n\t* gimple-pretty-print.c (dump_gimple_omp_target): Handle\n\tGF_OMP_TARGET_KIND_OACC_DECLARE. \n\t* gimple.h (enum gf_mask): Add GF_OMP_TARGET_KIND_OACC_DECLARE.\n\t(is_gomple_omp_oacc): Handle GF_OMP_TARGET_KIND_OACC_DECLARE.\n\t* gimplify.c (oacc_declare_returns): New.\n\t(gimplify_bind_expr): Prepend 'exit' stmt to cleanup.\n\t(device_resident_p): New function.\n\t(oacc_default_clause): Handle device_resident clause.\n\t(gimplify_oacc_declare_1, gimplify_oacc_declare): New functions.\n\t(gimplify_expr): Handle OACC_DECLARE.\n\t* omp-builtins.def (BUILT_IN_GOACC_DECLARE): New builtin.\n\t* omp-low.c (expand_omp_target): Handle\n\tGF_OMP_TARGET_KIND_OACC_DECLARE and BUILTIN_GOACC_DECLARE.\n\t(build_omp_regions_1): Handlde GF_OMP_TARGET_KIND_OACC_DECLARE.\n\t(lower_omp_target): Handle GF_OMP_TARGET_KIND_OACC_DECLARE,\n\tGOMP_MAP_DEVICE_RESIDENT and GOMP_MAP_LINK.\n\t(make_gimple_omp_edges): Handle GF_OMP_TARGET_KIND_OACC_DECLARE.\n\t* tree-pretty-print.c (dump_omp_clause): Handle GOMP_MAP_LINK and\n\tGOMP_MAP_DEVICE_RESIDENT.\n\n\tgcc/testsuite\n\t* c-c++-common/goacc/declare-1.c: New test.\n\t* c-c++-common/goacc/declare-2.c: Likewise.\n\n\tinclude/\n\t* gomp-constants.h (enum gomp_map_kind): Add GOMP_MAP_DEVICE_RESIDENT\n\tand GOMP_MAP_LINK.\n\n\tlibgomp/\n\t* libgomp.map (GOACC_2.0.1): Export GOACC_declare.\n\t* oacc-parallel.c (GOACC_declare): New function.\n\t* testsuite/libgomp.oacc-c-c++-common/declare-1.c: New test.\n\t* testsuite/libgomp.oacc-c-c++-common/declare-2.c: Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/declare-4.c: Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/declare-5.c: Likewise.\n\t* testsuite/libgomp.oacc-c++/declare-1.C: Likewise.\n\nCo-Authored-By: Joseph Myers <joseph@codesourcery.com>\n\nFrom-SVN: r230275", "tree": {"sha": "52de64a3143fbf2c08307e2d599e9816848f2996", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/52de64a3143fbf2c08307e2d599e9816848f2996"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6e232ba4246ca324a663ec5ddf0ba4db5cf3fbad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e232ba4246ca324a663ec5ddf0ba4db5cf3fbad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e232ba4246ca324a663ec5ddf0ba4db5cf3fbad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e232ba4246ca324a663ec5ddf0ba4db5cf3fbad/comments", "author": null, "committer": null, "parents": [{"sha": "b6c34ca9eeca4163aaa0dad352f203b393c28f4d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6c34ca9eeca4163aaa0dad352f203b393c28f4d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6c34ca9eeca4163aaa0dad352f203b393c28f4d"}], "stats": {"total": 1148, "additions": 1145, "deletions": 3}, "files": [{"sha": "5093ce06abac76138f311397b790d85e51809da9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e232ba4246ca324a663ec5ddf0ba4db5cf3fbad/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e232ba4246ca324a663ec5ddf0ba4db5cf3fbad/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6e232ba4246ca324a663ec5ddf0ba4db5cf3fbad", "patch": "@@ -1,3 +1,26 @@\n+2015-11-12  James Norris  <jnorris@codesourcery.com>\n+\t    Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gimple-pretty-print.c (dump_gimple_omp_target): Handle\n+\tGF_OMP_TARGET_KIND_OACC_DECLARE. \n+\t* gimple.h (enum gf_mask): Add GF_OMP_TARGET_KIND_OACC_DECLARE.\n+\t(is_gomple_omp_oacc): Handle GF_OMP_TARGET_KIND_OACC_DECLARE.\n+\t* gimplify.c (oacc_declare_returns): New.\n+\t(gimplify_bind_expr): Prepend 'exit' stmt to cleanup.\n+\t(device_resident_p): New function.\n+\t(oacc_default_clause): Handle device_resident clause.\n+\t(gimplify_oacc_declare_1, gimplify_oacc_declare): New functions.\n+\t(gimplify_expr): Handle OACC_DECLARE.\n+\t* omp-builtins.def (BUILT_IN_GOACC_DECLARE): New builtin.\n+\t* omp-low.c (expand_omp_target): Handle\n+\tGF_OMP_TARGET_KIND_OACC_DECLARE and BUILTIN_GOACC_DECLARE.\n+\t(build_omp_regions_1): Handlde GF_OMP_TARGET_KIND_OACC_DECLARE.\n+\t(lower_omp_target): Handle GF_OMP_TARGET_KIND_OACC_DECLARE,\n+\tGOMP_MAP_DEVICE_RESIDENT and GOMP_MAP_LINK.\n+\t(make_gimple_omp_edges): Handle GF_OMP_TARGET_KIND_OACC_DECLARE.\n+\t* tree-pretty-print.c (dump_omp_clause): Handle GOMP_MAP_LINK and\n+\tGOMP_MAP_DEVICE_RESIDENT.\n+\n 2015-11-12  Christophe Lyon  <christophe.lyon@linaro.org>\n \n \t[ARM] Remove neon-testgen.ml and generated tests."}, {"sha": "5611403ce56c299c9b4b7e020c32062a6325de94", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e232ba4246ca324a663ec5ddf0ba4db5cf3fbad/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e232ba4246ca324a663ec5ddf0ba4db5cf3fbad/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=6e232ba4246ca324a663ec5ddf0ba4db5cf3fbad", "patch": "@@ -1,3 +1,11 @@\n+2015-11-12  James Norris  <jnorris@codesourcery.com>\n+\t    Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* c-pragma.c (oacc_pragmas): Add entry for declare directive. \n+\t* c-pragma.h (enum pragma_kind): Add PRAGMA_OACC_DECLARE.\n+\t(enum pragma_omp_clause): Add PRAGMA_OACC_CLAUSE_DEVICE_RESIDENT and\n+\tPRAGMA_OACC_CLAUSE_LINK.\n+\n 2015-11-11  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/68107"}, {"sha": "12c3e75ef18cc6fdbd1cd0ff9446e5b68f78b6af", "filename": "gcc/c-family/c-pragma.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e232ba4246ca324a663ec5ddf0ba4db5cf3fbad/gcc%2Fc-family%2Fc-pragma.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e232ba4246ca324a663ec5ddf0ba4db5cf3fbad/gcc%2Fc-family%2Fc-pragma.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-pragma.c?ref=6e232ba4246ca324a663ec5ddf0ba4db5cf3fbad", "patch": "@@ -1248,6 +1248,7 @@ static const struct omp_pragma_def oacc_pragmas[] = {\n   { \"atomic\", PRAGMA_OACC_ATOMIC },\n   { \"cache\", PRAGMA_OACC_CACHE },\n   { \"data\", PRAGMA_OACC_DATA },\n+  { \"declare\", PRAGMA_OACC_DECLARE },\n   { \"enter\", PRAGMA_OACC_ENTER_DATA },\n   { \"exit\", PRAGMA_OACC_EXIT_DATA },\n   { \"kernels\", PRAGMA_OACC_KERNELS },"}, {"sha": "999ac6794d352d09d5f0629d85ab116b5947a7a0", "filename": "gcc/c-family/c-pragma.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e232ba4246ca324a663ec5ddf0ba4db5cf3fbad/gcc%2Fc-family%2Fc-pragma.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e232ba4246ca324a663ec5ddf0ba4db5cf3fbad/gcc%2Fc-family%2Fc-pragma.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-pragma.h?ref=6e232ba4246ca324a663ec5ddf0ba4db5cf3fbad", "patch": "@@ -30,6 +30,7 @@ enum pragma_kind {\n   PRAGMA_OACC_ATOMIC,\n   PRAGMA_OACC_CACHE,\n   PRAGMA_OACC_DATA,\n+  PRAGMA_OACC_DECLARE,\n   PRAGMA_OACC_ENTER_DATA,\n   PRAGMA_OACC_EXIT_DATA,\n   PRAGMA_OACC_KERNELS,\n@@ -152,6 +153,7 @@ enum pragma_omp_clause {\n   PRAGMA_OACC_CLAUSE_CREATE,\n   PRAGMA_OACC_CLAUSE_DELETE,\n   PRAGMA_OACC_CLAUSE_DEVICEPTR,\n+  PRAGMA_OACC_CLAUSE_DEVICE_RESIDENT,\n   PRAGMA_OACC_CLAUSE_GANG,\n   PRAGMA_OACC_CLAUSE_HOST,\n   PRAGMA_OACC_CLAUSE_INDEPENDENT,\n@@ -176,7 +178,8 @@ enum pragma_omp_clause {\n   PRAGMA_OACC_CLAUSE_FIRSTPRIVATE = PRAGMA_OMP_CLAUSE_FIRSTPRIVATE,\n   PRAGMA_OACC_CLAUSE_IF = PRAGMA_OMP_CLAUSE_IF,\n   PRAGMA_OACC_CLAUSE_PRIVATE = PRAGMA_OMP_CLAUSE_PRIVATE,\n-  PRAGMA_OACC_CLAUSE_REDUCTION = PRAGMA_OMP_CLAUSE_REDUCTION\n+  PRAGMA_OACC_CLAUSE_REDUCTION = PRAGMA_OMP_CLAUSE_REDUCTION,\n+  PRAGMA_OACC_CLAUSE_LINK = PRAGMA_OMP_CLAUSE_LINK\n };\n \n extern struct cpp_reader* parse_in;"}, {"sha": "02ae07e8b6ae41b06d7b43ebe466dc09064bb517", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e232ba4246ca324a663ec5ddf0ba4db5cf3fbad/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e232ba4246ca324a663ec5ddf0ba4db5cf3fbad/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=6e232ba4246ca324a663ec5ddf0ba4db5cf3fbad", "patch": "@@ -1,3 +1,15 @@\n+2015-11-12  James Norris  <jnorris@codesourcery.com>\n+\t    Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* c-parser.c (c_parser_pragma): Handle PRAGMA_OACC_DECLARE.\n+\t(c_parser_omp_clause_name): Handle 'device_resident' clause.\n+\t(c_parser_oacc_data_clause): Handle PRAGMA_OACC_CLAUSE_DEVICE_RESIDENT\n+\tand PRAGMA_OMP_CLAUSE_LINK.\n+\t(c_parser_oacc_all_clauses): Handle PRAGMA_OACC_CLAUSE_DEVICE_RESIDENT\n+\tand PRAGMA_OACC_CLAUSE_LINK.\n+\t(OACC_DECLARE_CLAUSE_MASK): New definition.\n+\t(c_parser_oacc_declare): New function.\n+\n 2015-11-12  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/67784"}, {"sha": "c01d651b29742520422c8e157ee0f06a7a0e64cb", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 176, "deletions": 0, "changes": 176, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e232ba4246ca324a663ec5ddf0ba4db5cf3fbad/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e232ba4246ca324a663ec5ddf0ba4db5cf3fbad/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=6e232ba4246ca324a663ec5ddf0ba4db5cf3fbad", "patch": "@@ -1228,6 +1228,7 @@ static vec<tree, va_gc> *c_parser_expr_list (c_parser *, bool, bool,\n \t\t\t\t\t     vec<tree, va_gc> **, location_t *,\n \t\t\t\t\t     tree *, vec<location_t> *,\n \t\t\t\t\t     unsigned int * = NULL);\n+static void c_parser_oacc_declare (c_parser *);\n static void c_parser_oacc_enter_exit_data (c_parser *, bool);\n static void c_parser_oacc_update (c_parser *);\n static void c_parser_omp_construct (c_parser *);\n@@ -9729,6 +9730,10 @@ c_parser_pragma (c_parser *parser, enum pragma_context context)\n \n   switch (id)\n     {\n+    case PRAGMA_OACC_DECLARE:\n+      c_parser_oacc_declare (parser);\n+      return false;\n+\n     case PRAGMA_OACC_ENTER_DATA:\n       c_parser_oacc_enter_exit_data (parser, true);\n       return false;\n@@ -10018,6 +10023,8 @@ c_parser_omp_clause_name (c_parser *parser)\n \t    result = PRAGMA_OMP_CLAUSE_DEVICE;\n \t  else if (!strcmp (\"deviceptr\", p))\n \t    result = PRAGMA_OACC_CLAUSE_DEVICEPTR;\n+\t  else if (!strcmp (\"device_resident\", p))\n+\t    result = PRAGMA_OACC_CLAUSE_DEVICE_RESIDENT;\n \t  else if (!strcmp (\"dist_schedule\", p))\n \t    result = PRAGMA_OMP_CLAUSE_DIST_SCHEDULE;\n \t  break;\n@@ -10454,10 +10461,16 @@ c_parser_oacc_data_clause (c_parser *parser, pragma_omp_clause c_kind,\n     case PRAGMA_OACC_CLAUSE_DEVICE:\n       kind = GOMP_MAP_FORCE_TO;\n       break;\n+    case PRAGMA_OACC_CLAUSE_DEVICE_RESIDENT:\n+      kind = GOMP_MAP_DEVICE_RESIDENT;\n+      break;\n     case PRAGMA_OACC_CLAUSE_HOST:\n     case PRAGMA_OACC_CLAUSE_SELF:\n       kind = GOMP_MAP_FORCE_FROM;\n       break;\n+    case PRAGMA_OACC_CLAUSE_LINK:\n+      kind = GOMP_MAP_LINK;\n+      break;\n     case PRAGMA_OACC_CLAUSE_PRESENT:\n       kind = GOMP_MAP_FORCE_PRESENT;\n       break;\n@@ -12739,6 +12752,10 @@ c_parser_oacc_all_clauses (c_parser *parser, omp_clause_mask mask,\n \t  clauses = c_parser_oacc_data_clause_deviceptr (parser, clauses);\n \t  c_name = \"deviceptr\";\n \t  break;\n+\tcase PRAGMA_OACC_CLAUSE_DEVICE_RESIDENT:\n+\t  clauses = c_parser_oacc_data_clause (parser, c_kind, clauses);\n+\t  c_name = \"device_resident\";\n+\t  break;\n \tcase PRAGMA_OACC_CLAUSE_FIRSTPRIVATE:\n \t  clauses = c_parser_omp_clause_firstprivate (parser, clauses);\n \t  c_name = \"firstprivate\";\n@@ -12761,6 +12778,10 @@ c_parser_oacc_all_clauses (c_parser *parser, omp_clause_mask mask,\n \t\t\t\t\t\tclauses);\n \t  c_name = \"independent\";\n \t  break;\n+\tcase PRAGMA_OACC_CLAUSE_LINK:\n+\t  clauses = c_parser_oacc_data_clause (parser, c_kind, clauses);\n+\t  c_name = \"link\";\n+\t  break;\n \tcase PRAGMA_OACC_CLAUSE_NUM_GANGS:\n \t  clauses = c_parser_omp_clause_num_gangs (parser, clauses);\n \t  c_name = \"num_gangs\";\n@@ -13217,6 +13238,161 @@ c_parser_oacc_data (location_t loc, c_parser *parser)\n   return stmt;\n }\n \n+/* OpenACC 2.0:\n+   # pragma acc declare oacc-data-clause[optseq] new-line\n+*/\n+\n+#define OACC_DECLARE_CLAUSE_MASK\t\t\t\t\t\\\n+\t( (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_COPY)\t\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_COPYIN)\t\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_COPYOUT)\t\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_CREATE)\t\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_DEVICEPTR)\t\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_DEVICE_RESIDENT)\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_LINK)\t\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_PRESENT)\t\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_PRESENT_OR_COPY)\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_PRESENT_OR_COPYIN)\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_PRESENT_OR_COPYOUT)\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_PRESENT_OR_CREATE) )\n+\n+static void\n+c_parser_oacc_declare (c_parser *parser)\n+{\n+  location_t pragma_loc = c_parser_peek_token (parser)->location;\n+  tree clauses, stmt, t, decl;\n+\n+  bool error = false;\n+\n+  c_parser_consume_pragma (parser);\n+\n+  clauses = c_parser_oacc_all_clauses (parser, OACC_DECLARE_CLAUSE_MASK,\n+\t\t\t\t       \"#pragma acc declare\");\n+  if (!clauses)\n+    {\n+      error_at (pragma_loc,\n+\t\t\"no valid clauses specified in %<#pragma acc declare%>\");\n+      return;\n+    }\n+\n+  for (t = clauses; t; t = OMP_CLAUSE_CHAIN (t))\n+    {\n+      location_t loc = OMP_CLAUSE_LOCATION (t);\n+      decl = OMP_CLAUSE_DECL (t);\n+      if (!DECL_P (decl))\n+\t{\n+\t  error_at (loc, \"array section in %<#pragma acc declare%>\");\n+\t  error = true;\n+\t  continue;\n+\t}\n+\n+      switch (OMP_CLAUSE_MAP_KIND (t))\n+\t{\n+\tcase GOMP_MAP_FORCE_ALLOC:\n+\tcase GOMP_MAP_FORCE_TO:\n+\tcase GOMP_MAP_FORCE_DEVICEPTR:\n+\tcase GOMP_MAP_DEVICE_RESIDENT:\n+\t  break;\n+\n+\tcase GOMP_MAP_POINTER:\n+\t  /* Generated by c_finish_omp_clauses from array sections;\n+\t     avoid spurious diagnostics.  */\n+\t  break;\n+\n+\tcase GOMP_MAP_LINK:\n+\t  if (!global_bindings_p ()\n+\t      && (TREE_STATIC (decl)\n+\t       || !DECL_EXTERNAL (decl)))\n+\t    {\n+\t      error_at (loc,\n+\t\t\t\"%qD must be a global variable in\"\n+\t\t\t\"%<#pragma acc declare link%>\",\n+\t\t\tdecl);\n+\t      error = true;\n+\t      continue;\n+\t    }\n+\t  break;\n+\n+\tdefault:\n+\t  if (global_bindings_p ())\n+\t    {\n+\t      error_at (loc, \"invalid OpenACC clause at file scope\");\n+\t      error = true;\n+\t      continue;\n+\t    }\n+\t  if (DECL_EXTERNAL (decl))\n+\t    {\n+\t      error_at (loc,\n+\t\t\t\"invalid use of %<extern%> variable %qD \"\n+\t\t\t\"in %<#pragma acc declare%>\", decl);\n+\t      error = true;\n+\t      continue;\n+\t    }\n+\t  else if (TREE_PUBLIC (decl))\n+\t    {\n+\t      error_at (loc,\n+\t\t\t\"invalid use of %<global%> variable %qD \"\n+\t\t\t\"in %<#pragma acc declare%>\", decl);\n+\t      error = true;\n+\t      continue;\n+\t    }\n+\t  break;\n+\t}\n+\n+      if (lookup_attribute (\"omp declare target\", DECL_ATTRIBUTES (decl))\n+\t  || lookup_attribute (\"omp declare target link\",\n+\t\t\t       DECL_ATTRIBUTES (decl)))\n+\t{\n+\t  error_at (loc, \"variable %qD used more than once with \"\n+\t\t    \"%<#pragma acc declare%>\", decl);\n+\t  error = true;\n+\t  continue;\n+\t}\n+\n+      if (!error)\n+\t{\n+\t  tree id;\n+\n+\t  if (OMP_CLAUSE_MAP_KIND (t) == GOMP_MAP_LINK)\n+\t    id = get_identifier (\"omp declare target link\");\n+\t  else\n+\t    id = get_identifier (\"omp declare target\");\n+\n+\t  DECL_ATTRIBUTES (decl)\n+\t\t\t   = tree_cons (id, NULL_TREE, DECL_ATTRIBUTES (decl));\n+\n+\t  if (global_bindings_p ())\n+\t    {\n+\t      symtab_node *node = symtab_node::get (decl);\n+\t      if (node != NULL)\n+\t\t{\n+\t\t  node->offloadable = 1;\n+#ifdef ENABLE_OFFLOADING\n+\t\t  g->have_offload = true;\n+\t\t  if (is_a <varpool_node *> (node))\n+\t\t    {\n+\t\t      vec_safe_push (offload_vars, decl);\n+\t\t      node->force_output = 1;\n+\t\t    }\n+#endif\n+\t\t}\n+\t    }\n+\t}\n+    }\n+\n+  if (error || global_bindings_p ())\n+    return;\n+\n+  stmt = make_node (OACC_DECLARE);\n+  TREE_TYPE (stmt) = void_type_node;\n+  OACC_DECLARE_CLAUSES (stmt) = clauses;\n+  SET_EXPR_LOCATION (stmt, pragma_loc);\n+\n+  add_stmt (stmt);\n+\n+  return;\n+}\n+\n /* OpenACC 2.0:\n    # pragma acc enter data oacc-enter-data-clause[optseq] new-line\n "}, {"sha": "7bf18f69002439e0d1d2a7413f144bdf4110255d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e232ba4246ca324a663ec5ddf0ba4db5cf3fbad/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e232ba4246ca324a663ec5ddf0ba4db5cf3fbad/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=6e232ba4246ca324a663ec5ddf0ba4db5cf3fbad", "patch": "@@ -1,3 +1,17 @@\n+2015-11-12  James Norris  <jnorris@codesourcery.com>\n+\t    Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* parser.c (cp_parser_omp_clause_name): Handle 'device_resident'\n+\tclause.\n+\t(cp_parser_oacc_data_clause): Handle PRAGMA_OACC_CLAUSE_DEVICE_RESIDENT\n+\tand PRAGMA_OMP_CLAUSE_LINK.\n+\t(cp_paser_oacc_all_clauses): Handle PRAGMA_OACC_CLAUSE_DEVICE_RESIDENT\n+\tand PRAGMA_OMP_CLAUSE_LINK.\n+\t(OACC_DECLARE_CLAUSE_MASK): New definition.\n+\t(cp_parser_oacc_declare): New function.\n+\t(cp_parser_pragma): Handle PRAGMA_OACC_DECLARE.\n+\t* pt.c (tsubst_expr): Handle OACC_DECLARE.\n+\n 2015-11-12  Jason Merrill  <jason@redhat.com>\n \n \t* pt.c (check_explicit_specialization): Check the namespace after"}, {"sha": "0ab5275d2d63c50c35cad080825b142e0315aff8", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 172, "deletions": 0, "changes": 172, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e232ba4246ca324a663ec5ddf0ba4db5cf3fbad/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e232ba4246ca324a663ec5ddf0ba4db5cf3fbad/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=6e232ba4246ca324a663ec5ddf0ba4db5cf3fbad", "patch": "@@ -29128,6 +29128,8 @@ cp_parser_omp_clause_name (cp_parser *parser)\n \t    result = PRAGMA_OMP_CLAUSE_DEVICE;\n \t  else if (!strcmp (\"deviceptr\", p))\n \t    result = PRAGMA_OACC_CLAUSE_DEVICEPTR;\n+\t  else if (!strcmp (\"device_resident\", p))\n+\t    result = PRAGMA_OACC_CLAUSE_DEVICE_RESIDENT;\n \t  else if (!strcmp (\"dist_schedule\", p))\n \t    result = PRAGMA_OMP_CLAUSE_DIST_SCHEDULE;\n \t  break;\n@@ -29541,10 +29543,16 @@ cp_parser_oacc_data_clause (cp_parser *parser, pragma_omp_clause c_kind,\n     case PRAGMA_OACC_CLAUSE_DEVICE:\n       kind = GOMP_MAP_FORCE_TO;\n       break;\n+    case PRAGMA_OACC_CLAUSE_DEVICE_RESIDENT:\n+      kind = GOMP_MAP_DEVICE_RESIDENT;\n+      break;\n     case PRAGMA_OACC_CLAUSE_HOST:\n     case PRAGMA_OACC_CLAUSE_SELF:\n       kind = GOMP_MAP_FORCE_FROM;\n       break;\n+    case PRAGMA_OACC_CLAUSE_LINK:\n+      kind = GOMP_MAP_LINK;\n+      break;\n     case PRAGMA_OACC_CLAUSE_PRESENT:\n       kind = GOMP_MAP_FORCE_PRESENT;\n       break;\n@@ -31545,6 +31553,10 @@ cp_parser_oacc_all_clauses (cp_parser *parser, omp_clause_mask mask,\n \t  clauses = cp_parser_oacc_data_clause_deviceptr (parser, clauses);\n \t  c_name = \"deviceptr\";\n \t  break;\n+\tcase PRAGMA_OACC_CLAUSE_DEVICE_RESIDENT:\n+\t  clauses = cp_parser_oacc_data_clause (parser, c_kind, clauses);\n+\t  c_name = \"device_resident\";\n+\t  break;\n \tcase PRAGMA_OACC_CLAUSE_FIRSTPRIVATE:\n \t  clauses = cp_parser_omp_var_list (parser, OMP_CLAUSE_FIRSTPRIVATE,\n \t\t\t\t\t    clauses);\n@@ -31569,6 +31581,10 @@ cp_parser_oacc_all_clauses (cp_parser *parser, omp_clause_mask mask,\n \t\t\t\t\t\t  clauses, here);\n \t  c_name = \"independent\";\n \t  break;\n+\tcase PRAGMA_OACC_CLAUSE_LINK:\n+\t  clauses = cp_parser_oacc_data_clause (parser, c_kind, clauses);\n+\t  c_name = \"link\";\n+\t  break;\n \tcase PRAGMA_OACC_CLAUSE_NUM_GANGS:\n \t  code = OMP_CLAUSE_NUM_GANGS;\n \t  c_name = \"num_gangs\";\n@@ -34525,6 +34541,158 @@ cp_parser_oacc_data (cp_parser *parser, cp_token *pragma_tok)\n   return stmt;\n }\n \n+/* OpenACC 2.0:\n+   # pragma acc declare oacc-data-clause[optseq] new-line\n+*/\n+\n+#define OACC_DECLARE_CLAUSE_MASK\t\t\t\t\t\\\n+\t( (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_COPY)\t\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_COPYIN)\t\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_COPYOUT)\t\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_CREATE)\t\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_DEVICEPTR)\t\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_DEVICE_RESIDENT)\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_LINK)\t\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_PRESENT)\t\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_PRESENT_OR_COPY)\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_PRESENT_OR_COPYIN)\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_PRESENT_OR_COPYOUT)\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_PRESENT_OR_CREATE))\n+\n+static tree\n+cp_parser_oacc_declare (cp_parser *parser, cp_token *pragma_tok)\n+{\n+  tree clauses, stmt, t;\n+  bool error = false;\n+\n+  clauses = cp_parser_oacc_all_clauses (parser, OACC_DECLARE_CLAUSE_MASK,\n+\t\t\t\t\t\"#pragma acc declare\", pragma_tok, true);\n+\n+\n+  if (find_omp_clause (clauses, OMP_CLAUSE_MAP) == NULL_TREE)\n+    {\n+      error_at (pragma_tok->location,\n+\t\t\"no valid clauses specified in %<#pragma acc declare%>\");\n+      return NULL_TREE;\n+    }\n+\n+  for (tree t = clauses; t; t = OMP_CLAUSE_CHAIN (t))\n+    {\n+      location_t loc = OMP_CLAUSE_LOCATION (t);\n+      tree decl = OMP_CLAUSE_DECL (t);\n+      if (!DECL_P (decl))\n+\t{\n+\t  error_at (loc, \"array section in %<#pragma acc declare%>\");\n+\t  error = true;\n+\t  continue;\n+\t}\n+      gcc_assert (OMP_CLAUSE_CODE (t) == OMP_CLAUSE_MAP);\n+      switch (OMP_CLAUSE_MAP_KIND (t))\n+\t{\n+\tcase GOMP_MAP_FORCE_ALLOC:\n+\tcase GOMP_MAP_FORCE_TO:\n+\tcase GOMP_MAP_FORCE_DEVICEPTR:\n+\tcase GOMP_MAP_DEVICE_RESIDENT:\n+\t  break;\n+\n+\tcase GOMP_MAP_POINTER:\n+\t  /* Generated by c_finish_omp_clauses from array sections;\n+\t     avoid spurious diagnostics.  */\n+\t  break;\n+\n+\tcase GOMP_MAP_LINK:\n+\t  if (!global_bindings_p ()\n+\t      && (TREE_STATIC (decl)\n+\t       || !DECL_EXTERNAL (decl)))\n+\t    {\n+\t      error_at (loc,\n+\t\t\t\"%qD must be a global variable in\"\n+\t\t\t\"%<#pragma acc declare link%>\",\n+\t\t\tdecl);\n+\t      error = true;\n+\t      continue;\n+\t    }\n+\t  break;\n+\n+\tdefault:\n+\t  if (global_bindings_p ())\n+\t    {\n+\t      error_at (loc, \"invalid OpenACC clause at file scope\");\n+\t      error = true;\n+\t      continue;\n+\t    }\n+\t  if (DECL_EXTERNAL (decl))\n+\t    {\n+\t      error_at (loc,\n+\t\t\t\"invalid use of %<extern%> variable %qD \"\n+\t\t\t\"in %<#pragma acc declare%>\", decl);\n+\t      error = true;\n+\t      continue;\n+\t    }\n+\t  else if (TREE_PUBLIC (decl))\n+\t    {\n+\t      error_at (loc,\n+\t\t\t\"invalid use of %<global%> variable %qD \"\n+\t\t\t\"in %<#pragma acc declare%>\", decl);\n+\t      error = true;\n+\t      continue;\n+\t    }\n+\t  break;\n+\t}\n+\n+      if (lookup_attribute (\"omp declare target\", DECL_ATTRIBUTES (decl))\n+\t  || lookup_attribute (\"omp declare target link\",\n+\t\t\t       DECL_ATTRIBUTES (decl)))\n+\t{\n+\t  error_at (loc, \"variable %qD used more than once with \"\n+\t\t    \"%<#pragma acc declare%>\", decl);\n+\t  error = true;\n+\t  continue;\n+\t}\n+\n+      if (!error)\n+\t{\n+\t  tree id;\n+\n+\t  if (OMP_CLAUSE_MAP_KIND (t) == GOMP_MAP_LINK)\n+\t    id = get_identifier (\"omp declare target link\");\n+\t  else\n+\t    id = get_identifier (\"omp declare target\");\n+\n+\t  DECL_ATTRIBUTES (decl)\n+\t\t\t   = tree_cons (id, NULL_TREE, DECL_ATTRIBUTES (decl));\n+\t  if (global_bindings_p ())\n+\t    {\n+\t      symtab_node *node = symtab_node::get (decl);\n+\t      if (node != NULL)\n+\t\t{\n+\t\t  node->offloadable = 1;\n+#ifdef ENABLE_OFFLOADING\n+\t\t  g->have_offload = true;\n+\t\t  if (is_a <varpool_node *> (node))\n+\t\t    {\n+\t\t      vec_safe_push (offload_vars, decl);\n+\t\t      node->force_output = 1;\n+\t\t    }\n+#endif\n+\t\t}\n+\t    }\n+\t}\n+    }\n+\n+  if (error || global_bindings_p ())\n+    return NULL_TREE;\n+\n+  stmt = make_node (OACC_DECLARE);\n+  TREE_TYPE (stmt) = void_type_node;\n+  OACC_DECLARE_CLAUSES (stmt) = clauses;\n+  SET_EXPR_LOCATION (stmt, pragma_tok->location);\n+\n+  add_stmt (stmt);\n+\n+  return NULL_TREE;\n+}\n+\n /* OpenACC 2.0:\n    # pragma acc enter data oacc-enter-data-clause[optseq] new-line\n \n@@ -36354,6 +36522,10 @@ cp_parser_pragma (cp_parser *parser, enum pragma_context context)\n       cp_parser_omp_declare (parser, pragma_tok, context);\n       return false;\n \n+    case PRAGMA_OACC_DECLARE:\n+      cp_parser_oacc_declare (parser, pragma_tok);\n+      return false;\n+\n     case PRAGMA_OACC_ROUTINE:\n       cp_parser_oacc_routine (parser, pragma_tok, context);\n       return false;"}, {"sha": "f3b0cd059ded3173a986bbff57a0b9a8c914fabc", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e232ba4246ca324a663ec5ddf0ba4db5cf3fbad/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e232ba4246ca324a663ec5ddf0ba4db5cf3fbad/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=6e232ba4246ca324a663ec5ddf0ba4db5cf3fbad", "patch": "@@ -15408,6 +15408,14 @@ tsubst_expr (tree t, tree args, tsubst_flags_t complain, tree in_decl,\n       add_stmt (t);\n       break;\n \n+    case OACC_DECLARE:\n+      t = copy_node (t);\n+      tmp = tsubst_omp_clauses (OACC_DECLARE_CLAUSES (t), false, false,\n+\t\t\t\targs, complain, in_decl);\n+      OACC_DECLARE_CLAUSES (t) = tmp;\n+      add_stmt (t);\n+      break;\n+\n     case OMP_TARGET_UPDATE:\n     case OMP_TARGET_ENTER_DATA:\n     case OMP_TARGET_EXIT_DATA:"}, {"sha": "7764201ea9892611986467fb074b0d7af7883d9a", "filename": "gcc/gimple-pretty-print.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e232ba4246ca324a663ec5ddf0ba4db5cf3fbad/gcc%2Fgimple-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e232ba4246ca324a663ec5ddf0ba4db5cf3fbad/gcc%2Fgimple-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-pretty-print.c?ref=6e232ba4246ca324a663ec5ddf0ba4db5cf3fbad", "patch": "@@ -1353,6 +1353,9 @@ dump_gimple_omp_target (pretty_printer *buffer, gomp_target *gs,\n     case GF_OMP_TARGET_KIND_OACC_ENTER_EXIT_DATA:\n       kind = \" oacc_enter_exit_data\";\n       break;\n+    case GF_OMP_TARGET_KIND_OACC_DECLARE:\n+      kind = \" oacc_declare\";\n+      break;\n     default:\n       gcc_unreachable ();\n     }"}, {"sha": "e45162d24e00e85de54338e46f8f3a025036b756", "filename": "gcc/gimple.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e232ba4246ca324a663ec5ddf0ba4db5cf3fbad/gcc%2Fgimple.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e232ba4246ca324a663ec5ddf0ba4db5cf3fbad/gcc%2Fgimple.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.h?ref=6e232ba4246ca324a663ec5ddf0ba4db5cf3fbad", "patch": "@@ -170,6 +170,7 @@ enum gf_mask {\n     GF_OMP_TARGET_KIND_OACC_DATA = 7,\n     GF_OMP_TARGET_KIND_OACC_UPDATE = 8,\n     GF_OMP_TARGET_KIND_OACC_ENTER_EXIT_DATA = 9,\n+    GF_OMP_TARGET_KIND_OACC_DECLARE = 10,\n \n     /* True on an GIMPLE_OMP_RETURN statement if the return does not require\n        a thread synchronization via some sort of barrier.  The exact barrier\n@@ -6004,6 +6005,7 @@ is_gimple_omp_oacc (const gimple *stmt)\n \tcase GF_OMP_TARGET_KIND_OACC_DATA:\n \tcase GF_OMP_TARGET_KIND_OACC_UPDATE:\n \tcase GF_OMP_TARGET_KIND_OACC_ENTER_EXIT_DATA:\n+\tcase GF_OMP_TARGET_KIND_OACC_DECLARE:\n \t  return true;\n \tdefault:\n \t  return false;"}, {"sha": "3c8f8a202d1c66cc95a14ab87817c2fb0993908e", "filename": "gcc/gimplify.c", "status": "modified", "additions": 182, "deletions": 2, "changes": 184, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e232ba4246ca324a663ec5ddf0ba4db5cf3fbad/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e232ba4246ca324a663ec5ddf0ba4db5cf3fbad/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=6e232ba4246ca324a663ec5ddf0ba4db5cf3fbad", "patch": "@@ -176,6 +176,7 @@ static struct gimplify_omp_ctx *gimplify_omp_ctxp;\n \n /* Forward declaration.  */\n static enum gimplify_status gimplify_compound_expr (tree *, gimple_seq *, bool);\n+static hash_map<tree, tree> *oacc_declare_returns;\n \n /* Shorter alias name for the above function for use in gimplify.c\n    only.  */\n@@ -1078,6 +1079,7 @@ gimplify_bind_expr (tree *expr_p, gimple_seq *pre_p)\n   gimple_seq body, cleanup;\n   gcall *stack_save;\n   location_t start_locus = 0, end_locus = 0;\n+  tree ret_clauses = NULL;\n \n   tree temp = voidify_wrapper_expr (bind_expr, NULL);\n \n@@ -1179,9 +1181,39 @@ gimplify_bind_expr (tree *expr_p, gimple_seq *pre_p)\n \t  clobber_stmt = gimple_build_assign (t, clobber);\n \t  gimple_set_location (clobber_stmt, end_locus);\n \t  gimplify_seq_add_stmt (&cleanup, clobber_stmt);\n+\n+\t  if (flag_openacc && oacc_declare_returns != NULL)\n+\t    {\n+\t      tree *c = oacc_declare_returns->get (t);\n+\t      if (c != NULL)\n+\t\t{\n+\t\t  if (ret_clauses)\n+\t\t    OMP_CLAUSE_CHAIN (*c) = ret_clauses;\n+\n+\t\t  ret_clauses = *c;\n+\n+\t\t  oacc_declare_returns->remove (t);\n+\n+\t\t  if (oacc_declare_returns->elements () == 0)\n+\t\t    {\n+\t\t      delete oacc_declare_returns;\n+\t\t      oacc_declare_returns = NULL;\n+\t\t    }\n+\t\t}\n+\t    }\n \t}\n     }\n \n+  if (ret_clauses)\n+    {\n+      gomp_target *stmt;\n+      gimple_stmt_iterator si = gsi_start (cleanup);\n+\n+      stmt = gimple_build_omp_target (NULL, GF_OMP_TARGET_KIND_OACC_DECLARE,\n+\t\t\t\t      ret_clauses);\n+      gsi_insert_seq_before_without_update (&si, stmt, GSI_NEW_STMT);\n+    }\n+\n   if (cleanup)\n     {\n       gtry *gs;\n@@ -5809,6 +5841,26 @@ omp_notice_threadprivate_variable (struct gimplify_omp_ctx *ctx, tree decl,\n   return false;\n }\n \n+/* Return true if global var DECL is device resident.  */\n+\n+static bool\n+device_resident_p (tree decl)\n+{\n+  tree attr = lookup_attribute (\"oacc declare target\", DECL_ATTRIBUTES (decl));\n+\n+  if (!attr)\n+    return false;\n+\n+  for (tree t = TREE_VALUE (attr); t; t = TREE_PURPOSE (t))\n+    {\n+      tree c = TREE_VALUE (t);\n+      if (OMP_CLAUSE_MAP_KIND (c) == GOMP_MAP_DEVICE_RESIDENT)\n+\treturn true;\n+    }\n+\n+  return false;\n+}\n+\n /* Determine outer default flags for DECL mentioned in an OMP region\n    but not declared in an enclosing clause.\n \n@@ -5908,6 +5960,15 @@ static unsigned\n oacc_default_clause (struct gimplify_omp_ctx *ctx, tree decl, unsigned flags)\n {\n   const char *rkind;\n+  bool on_device = false;\n+\n+  if ((ctx->region_type & (ORT_ACC_PARALLEL | ORT_ACC_KERNELS)) != 0\n+      && is_global_var (decl)\n+      && device_resident_p (decl))\n+    {\n+      on_device = true;\n+      flags |= GOVD_MAP_TO_ONLY;\n+    }\n \n   switch (ctx->region_type)\n     {\n@@ -5928,7 +5989,7 @@ oacc_default_clause (struct gimplify_omp_ctx *ctx, tree decl, unsigned flags)\n \t    || POINTER_TYPE_P (type))\n \t  type = TREE_TYPE (type);\n \n-\tif (AGGREGATE_TYPE_P (type))\n+\tif (on_device || AGGREGATE_TYPE_P (type))\n \t  /* Aggregates default to 'present_or_copy'.  */\n \t  flags |= GOVD_MAP;\n \telse\n@@ -7822,6 +7883,121 @@ gimplify_oacc_cache (tree *expr_p, gimple_seq *pre_p)\n   *expr_p = NULL_TREE;\n }\n \n+/* Helper function of gimplify_oacc_declare.  The helper's purpose is to,\n+   if required, translate 'kind' in CLAUSE into an 'entry' kind and 'exit'\n+   kind.  The entry kind will replace the one in CLAUSE, while the exit\n+   kind will be used in a new omp_clause and returned to the caller.  */\n+\n+static tree\n+gimplify_oacc_declare_1 (tree clause)\n+{\n+  HOST_WIDE_INT kind, new_op;\n+  bool ret = false;\n+  tree c = NULL;\n+\n+  kind = OMP_CLAUSE_MAP_KIND (clause);\n+\n+  switch (kind)\n+    {\n+      case GOMP_MAP_ALLOC:\n+      case GOMP_MAP_FORCE_ALLOC:\n+      case GOMP_MAP_FORCE_TO:\n+\tnew_op = GOMP_MAP_FORCE_DEALLOC;\n+\tret = true;\n+\tbreak;\n+\n+      case GOMP_MAP_FORCE_FROM:\n+\tOMP_CLAUSE_SET_MAP_KIND (clause, GOMP_MAP_FORCE_ALLOC);\n+\tnew_op = GOMP_MAP_FORCE_FROM;\n+\tret = true;\n+\tbreak;\n+\n+      case GOMP_MAP_FORCE_TOFROM:\n+\tOMP_CLAUSE_SET_MAP_KIND (clause, GOMP_MAP_FORCE_TO);\n+\tnew_op = GOMP_MAP_FORCE_FROM;\n+\tret = true;\n+\tbreak;\n+\n+      case GOMP_MAP_FROM:\n+\tOMP_CLAUSE_SET_MAP_KIND (clause, GOMP_MAP_FORCE_ALLOC);\n+\tnew_op = GOMP_MAP_FROM;\n+\tret = true;\n+\tbreak;\n+\n+      case GOMP_MAP_TOFROM:\n+\tOMP_CLAUSE_SET_MAP_KIND (clause, GOMP_MAP_TO);\n+\tnew_op = GOMP_MAP_FROM;\n+\tret = true;\n+\tbreak;\n+\n+      case GOMP_MAP_DEVICE_RESIDENT:\n+      case GOMP_MAP_FORCE_DEVICEPTR:\n+      case GOMP_MAP_FORCE_PRESENT:\n+      case GOMP_MAP_LINK:\n+      case GOMP_MAP_POINTER:\n+      case GOMP_MAP_TO:\n+\tbreak;\n+\n+      default:\n+\tgcc_unreachable ();\n+\tbreak;\n+    }\n+\n+  if (ret)\n+    {\n+      c = build_omp_clause (OMP_CLAUSE_LOCATION (clause), OMP_CLAUSE_MAP);\n+      OMP_CLAUSE_SET_MAP_KIND (c, new_op);\n+      OMP_CLAUSE_DECL (c) = OMP_CLAUSE_DECL (clause);\n+    }\n+\n+  return c;\n+}\n+\n+/* Gimplify OACC_DECLARE.  */\n+\n+static void\n+gimplify_oacc_declare (tree *expr_p, gimple_seq *pre_p)\n+{\n+  tree expr = *expr_p;\n+  gomp_target *stmt;\n+  tree clauses, t;\n+\n+  clauses = OACC_DECLARE_CLAUSES (expr);\n+\n+  gimplify_scan_omp_clauses (&clauses, pre_p, ORT_TARGET_DATA, OACC_DECLARE);\n+\n+  for (t = clauses; t; t = OMP_CLAUSE_CHAIN (t))\n+    {\n+      tree decl = OMP_CLAUSE_DECL (t);\n+\n+      if (TREE_CODE (decl) == MEM_REF)\n+\tcontinue;\n+\n+      if (TREE_CODE (decl) == VAR_DECL\n+\t  && !is_global_var (decl)\n+\t  && DECL_CONTEXT (decl) == current_function_decl)\n+\t{\n+\t  tree c = gimplify_oacc_declare_1 (t);\n+\t  if (c)\n+\t    {\n+\t      if (oacc_declare_returns == NULL)\n+\t\toacc_declare_returns = new hash_map<tree, tree>;\n+\n+\t      oacc_declare_returns->put (decl, c);\n+\t    }\n+\t}\n+\n+      omp_add_variable (gimplify_omp_ctxp, decl, GOVD_SEEN);\n+    }\n+\n+  stmt = gimple_build_omp_target (NULL, GF_OMP_TARGET_KIND_OACC_DECLARE,\n+\t\t\t\t  clauses);\n+\n+  gimplify_seq_add_stmt (pre_p, stmt);\n+\n+  *expr_p = NULL_TREE;\n+}\n+\n /* Gimplify the contents of an OMP_PARALLEL statement.  This involves\n    gimplification of the body, as well as scanning the body for used\n    variables.  We need to do this scan now, because variable-sized\n@@ -10182,11 +10358,15 @@ gimplify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n \t  break;\n \n \tcase OACC_HOST_DATA:\n-\tcase OACC_DECLARE:\n \t  sorry (\"directive not yet implemented\");\n \t  ret = GS_ALL_DONE;\n \t  break;\n \n+\tcase OACC_DECLARE:\n+\t  gimplify_oacc_declare (expr_p, pre_p);\n+\t  ret = GS_ALL_DONE;\n+\t  break;\n+\n \tcase OACC_DATA:\n \tcase OACC_KERNELS:\n \tcase OACC_PARALLEL:"}, {"sha": "d540dab7969ee9173c62442ed055086712558ea4", "filename": "gcc/omp-builtins.def", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e232ba4246ca324a663ec5ddf0ba4db5cf3fbad/gcc%2Fomp-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e232ba4246ca324a663ec5ddf0ba4db5cf3fbad/gcc%2Fomp-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-builtins.def?ref=6e232ba4246ca324a663ec5ddf0ba4db5cf3fbad", "patch": "@@ -353,3 +353,5 @@ DEF_GOMP_BUILTIN (BUILT_IN_GOMP_TARGET_ENTER_EXIT_DATA,\n \t\t  BT_FN_VOID_INT_SIZE_PTR_PTR_PTR_UINT_PTR, ATTR_NOTHROW_LIST)\n DEF_GOMP_BUILTIN (BUILT_IN_GOMP_TEAMS, \"GOMP_teams\",\n \t\t  BT_FN_VOID_UINT_UINT, ATTR_NOTHROW_LIST)\n+DEF_GOACC_BUILTIN (BUILT_IN_GOACC_DECLARE, \"GOACC_declare\",\n+\t\t   BT_FN_VOID_INT_SIZE_PTR_PTR_PTR, ATTR_NOTHROW_LIST)"}, {"sha": "f7584deb3ac2e05ea1fc62d7ca71c89bfcac6a42", "filename": "gcc/omp-low.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e232ba4246ca324a663ec5ddf0ba4db5cf3fbad/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e232ba4246ca324a663ec5ddf0ba4db5cf3fbad/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=6e232ba4246ca324a663ec5ddf0ba4db5cf3fbad", "patch": "@@ -12454,6 +12454,7 @@ expand_omp_target (struct omp_region *region)\n     case GF_OMP_TARGET_KIND_OACC_KERNELS:\n     case GF_OMP_TARGET_KIND_OACC_UPDATE:\n     case GF_OMP_TARGET_KIND_OACC_ENTER_EXIT_DATA:\n+    case GF_OMP_TARGET_KIND_OACC_DECLARE:\n       data_region = false;\n       break;\n     case GF_OMP_TARGET_KIND_DATA:\n@@ -12697,6 +12698,9 @@ expand_omp_target (struct omp_region *region)\n     case GF_OMP_TARGET_KIND_OACC_ENTER_EXIT_DATA:\n       start_ix = BUILT_IN_GOACC_ENTER_EXIT_DATA;\n       break;\n+    case GF_OMP_TARGET_KIND_OACC_DECLARE:\n+      start_ix = BUILT_IN_GOACC_DECLARE;\n+      break;\n     default:\n       gcc_unreachable ();\n     }\n@@ -12819,6 +12823,7 @@ expand_omp_target (struct omp_region *region)\n   switch (start_ix)\n     {\n     case BUILT_IN_GOACC_DATA_START:\n+    case BUILT_IN_GOACC_DECLARE:\n     case BUILT_IN_GOMP_TARGET_DATA:\n       break;\n     case BUILT_IN_GOMP_TARGET:\n@@ -13133,6 +13138,7 @@ build_omp_regions_1 (basic_block bb, struct omp_region *parent,\n \t\tcase GF_OMP_TARGET_KIND_EXIT_DATA:\n \t\tcase GF_OMP_TARGET_KIND_OACC_UPDATE:\n \t\tcase GF_OMP_TARGET_KIND_OACC_ENTER_EXIT_DATA:\n+\t\tcase GF_OMP_TARGET_KIND_OACC_DECLARE:\n \t\t  /* ..., other than for those stand-alone directives...  */\n \t\t  region = NULL;\n \t\t  break;\n@@ -14916,6 +14922,7 @@ lower_omp_target (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n     case GF_OMP_TARGET_KIND_OACC_KERNELS:\n     case GF_OMP_TARGET_KIND_OACC_UPDATE:\n     case GF_OMP_TARGET_KIND_OACC_ENTER_EXIT_DATA:\n+    case GF_OMP_TARGET_KIND_OACC_DECLARE:\n       data_region = false;\n       break;\n     case GF_OMP_TARGET_KIND_DATA:\n@@ -14987,6 +14994,8 @@ lower_omp_target (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n \t  case GOMP_MAP_FORCE_TOFROM:\n \t  case GOMP_MAP_FORCE_PRESENT:\n \t  case GOMP_MAP_FORCE_DEVICEPTR:\n+\t  case GOMP_MAP_DEVICE_RESIDENT:\n+\t  case GOMP_MAP_LINK:\n \t    gcc_assert (is_gimple_omp_oacc (stmt));\n \t    break;\n \t  default:\n@@ -16713,6 +16722,7 @@ make_gimple_omp_edges (basic_block bb, struct omp_region **region,\n \tcase GF_OMP_TARGET_KIND_EXIT_DATA:\n \tcase GF_OMP_TARGET_KIND_OACC_UPDATE:\n \tcase GF_OMP_TARGET_KIND_OACC_ENTER_EXIT_DATA:\n+\tcase GF_OMP_TARGET_KIND_OACC_DECLARE:\n \t  cur_region = cur_region->outer;\n \t  break;\n \tdefault:"}, {"sha": "86054c4c81fc0ad204a1aa0790e0e1ee67951746", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e232ba4246ca324a663ec5ddf0ba4db5cf3fbad/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e232ba4246ca324a663ec5ddf0ba4db5cf3fbad/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6e232ba4246ca324a663ec5ddf0ba4db5cf3fbad", "patch": "@@ -1,3 +1,9 @@\n+2015-11-12  James Norris  <jnorris@codesourcery.com>\n+\t    Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* c-c++-common/goacc/declare-1.c: New test.\n+\t* c-c++-common/goacc/declare-2.c: Likewise.\n+\n 2015-11-12  Christophe Lyon  <christophe.lyon@linaro.org>\n \n \t[ARM] Remove neon-testgen.ml and generated tests."}, {"sha": "b036c6361666fa107d01ba0549c2911be9d2b0e9", "filename": "gcc/testsuite/c-c++-common/goacc/declare-1.c", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e232ba4246ca324a663ec5ddf0ba4db5cf3fbad/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fdeclare-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e232ba4246ca324a663ec5ddf0ba4db5cf3fbad/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fdeclare-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fdeclare-1.c?ref=6e232ba4246ca324a663ec5ddf0ba4db5cf3fbad", "patch": "@@ -0,0 +1,83 @@\n+/* Test valid uses of declare directive.  */\n+/* { dg-do compile } */\n+\n+int v0;\n+#pragma acc declare create(v0)\n+\n+int v1;\n+#pragma acc declare copyin(v1)\n+\n+int *v2;\n+#pragma acc declare deviceptr(v2)\n+\n+int v3;\n+#pragma acc declare device_resident(v3)\n+\n+int v4;\n+#pragma acc declare link(v4)\n+\n+int v5, v6, v7, v8;\n+#pragma acc declare create(v5, v6) copyin(v7, v8)\n+\n+void\n+f (void)\n+{\n+  int va0;\n+#pragma acc declare create(va0)\n+\n+  int va1;\n+#pragma acc declare copyin(va1)\n+\n+  int *va2;\n+#pragma acc declare deviceptr(va2)\n+\n+  int va3;\n+#pragma acc declare device_resident(va3)\n+\n+  extern int ve0;\n+#pragma acc declare create(ve0)\n+\n+  extern int ve1;\n+#pragma acc declare copyin(ve1)\n+\n+  extern int *ve2;\n+#pragma acc declare deviceptr(ve2)\n+\n+  extern int ve3;\n+#pragma acc declare device_resident(ve3)\n+\n+  extern int ve4;\n+#pragma acc declare link(ve4)\n+\n+  int va5;\n+#pragma acc declare copy(va5)\n+\n+  int va6;\n+#pragma acc declare copyout(va6)\n+\n+  int va7;\n+#pragma acc declare present(va7)\n+\n+  int va8;\n+#pragma acc declare present_or_copy(va8)\n+\n+  int va9;\n+#pragma acc declare present_or_copyin(va9)\n+\n+  int va10;\n+#pragma acc declare present_or_copyout(va10)\n+\n+  int va11;\n+#pragma acc declare present_or_create(va11)\n+\n+ a:\n+  {\n+    int va0;\n+#pragma acc declare create(va0)\n+    if (v1)\n+      goto a;\n+    else\n+      goto b;\n+  }\n+ b:;\n+}"}, {"sha": "d24cb2222da94d5b9424226aaf0d9ff79b133fbc", "filename": "gcc/testsuite/c-c++-common/goacc/declare-2.c", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e232ba4246ca324a663ec5ddf0ba4db5cf3fbad/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fdeclare-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e232ba4246ca324a663ec5ddf0ba4db5cf3fbad/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fdeclare-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fdeclare-2.c?ref=6e232ba4246ca324a663ec5ddf0ba4db5cf3fbad", "patch": "@@ -0,0 +1,79 @@\n+/* Test invalid uses of declare directive.  */\n+/* { dg-do compile } */\n+\n+#pragma acc declare /* { dg-error \"no valid clauses\" } */\n+\n+#pragma acc declare create(undeclared) /* { dg-error \"undeclared\" } */\n+/* { dg-error \"no valid clauses\" \"second error\" { target *-*-* } 6 } */\n+\n+int v0[10];\n+#pragma acc declare create(v0[1:3]) /* { dg-error \"array section\" } */\n+\n+int v1;\n+#pragma acc declare create(v1, v1) /* { dg-error \"more than once\" } */\n+\n+int v2;\n+#pragma acc declare create(v2)\n+#pragma acc declare copyin(v2) /* { dg-error \"more than once\" } */\n+\n+int v3;\n+#pragma acc declare copy(v3) /* { dg-error \"at file scope\" } */\n+\n+int v4;\n+#pragma acc declare copyout(v4) /* { dg-error \"at file scope\" } */\n+\n+int v5;\n+#pragma acc declare present(v5) /* { dg-error \"at file scope\" } */\n+\n+int v6;\n+#pragma acc declare present_or_copy(v6) /* { dg-error \"at file scope\" } */\n+\n+int v7;\n+#pragma acc declare present_or_copyin(v7) /* { dg-error \"at file scope\" } */\n+\n+int v8;\n+#pragma acc declare present_or_copyout(v8) /* { dg-error \"at file scope\" } */\n+\n+int v9;\n+#pragma acc declare present_or_create(v9) /* { dg-error \"at file scope\" } */\n+\n+int va10;\n+#pragma acc declare create (va10)\n+#pragma acc declare link (va10) /* { dg-error \"more than once\" } */\n+\n+int va11;\n+#pragma acc declare link (va11)\n+#pragma acc declare link (va11) /* { dg-error \"more than once\" } */\n+\n+int va12;\n+#pragma acc declare create (va12) link (va12) /* { dg-error \"more than once\" } */\n+\n+void\n+f (void)\n+{\n+  int va0;\n+#pragma acc declare link(va0) /* { dg-error \"global variable\" } */\n+\n+  extern int ve0;\n+#pragma acc declare copy(ve0) /* { dg-error \"invalid use of\" } */\n+\n+  extern int ve1;\n+#pragma acc declare copyout(ve1) /* { dg-error \"invalid use of\" } */\n+\n+  extern int ve2;\n+#pragma acc declare present(ve2) /* { dg-error \"invalid use of\" } */\n+\n+  extern int ve3;\n+#pragma acc declare present_or_copy(ve3) /* { dg-error \"invalid use of\" } */\n+\n+  extern int ve4;\n+#pragma acc declare present_or_copyin(ve4) /* { dg-error \"invalid use of\" } */\n+\n+  extern int ve5;\n+#pragma acc declare present_or_copyout(ve5) /* { dg-error \"invalid use of\" } */\n+\n+  extern int ve6;\n+#pragma acc declare present_or_create(ve6) /* { dg-error \"invalid use of\" } */\n+\n+#pragma acc declare present (v9) /* { dg-error \"invalid use of\" } */\n+}"}, {"sha": "caec7605814f3b7ac60b4a5e7fec2b5aee4c2dd4", "filename": "gcc/tree-pretty-print.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e232ba4246ca324a663ec5ddf0ba4db5cf3fbad/gcc%2Ftree-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e232ba4246ca324a663ec5ddf0ba4db5cf3fbad/gcc%2Ftree-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.c?ref=6e232ba4246ca324a663ec5ddf0ba4db5cf3fbad", "patch": "@@ -654,6 +654,12 @@ dump_omp_clause (pretty_printer *pp, tree clause, int spc, int flags)\n \tcase GOMP_MAP_ALWAYS_POINTER:\n \t  pp_string (pp, \"always_pointer\");\n \t  break;\n+\tcase GOMP_MAP_DEVICE_RESIDENT:\n+\t  pp_string (pp, \"device_resident\");\n+\t  break;\n+\tcase GOMP_MAP_LINK:\n+\t  pp_string (pp, \"link\");\n+\t  break;\n \tdefault:\n \t  gcc_unreachable ();\n \t}"}, {"sha": "15b77c723f4deaff990c86c53fa34e3aa08428da", "filename": "include/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e232ba4246ca324a663ec5ddf0ba4db5cf3fbad/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e232ba4246ca324a663ec5ddf0ba4db5cf3fbad/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=6e232ba4246ca324a663ec5ddf0ba4db5cf3fbad", "patch": "@@ -1,3 +1,9 @@\n+2015-11-12  James Norris  <jnorris@codesourcery.com>\n+\t    Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gomp-constants.h (enum gomp_map_kind): Add GOMP_MAP_DEVICE_RESIDENT\n+\tand GOMP_MAP_LINK.\n+\n 2015-11-09  Alan Modra  <amodra@gmail.com>\n \n \tPR gdb/17133"}, {"sha": "dffd631aff671245de4371f05c33208b102e185d", "filename": "include/gomp-constants.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e232ba4246ca324a663ec5ddf0ba4db5cf3fbad/include%2Fgomp-constants.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e232ba4246ca324a663ec5ddf0ba4db5cf3fbad/include%2Fgomp-constants.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Fgomp-constants.h?ref=6e232ba4246ca324a663ec5ddf0ba4db5cf3fbad", "patch": "@@ -72,6 +72,11 @@ enum gomp_map_kind\n        POINTER_SIZE_UNITS.  */\n     GOMP_MAP_FORCE_DEVICEPTR =\t\t(GOMP_MAP_FLAG_SPECIAL_1 | 0),\n     /* Do not map, copy bits for firstprivate instead.  */\n+    /* OpenACC device_resident.  */\n+    GOMP_MAP_DEVICE_RESIDENT =\t\t(GOMP_MAP_FLAG_SPECIAL_1 | 1),\n+    /* OpenACC link.  */\n+    GOMP_MAP_LINK =\t\t\t(GOMP_MAP_FLAG_SPECIAL_1 | 2),\n+    /* Allocate.  */\n     GOMP_MAP_FIRSTPRIVATE =\t\t(GOMP_MAP_FLAG_SPECIAL | 0),\n     /* Similarly, but store the value in the pointer rather than\n        pointed by the pointer.  */"}, {"sha": "4e0cddb4e286e0c51bd53712812c6b9bd16bea30", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e232ba4246ca324a663ec5ddf0ba4db5cf3fbad/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e232ba4246ca324a663ec5ddf0ba4db5cf3fbad/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=6e232ba4246ca324a663ec5ddf0ba4db5cf3fbad", "patch": "@@ -1,3 +1,14 @@\n+2015-11-12  James Norris  <jnorris@codesourcery.com>\n+\t    Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* libgomp.map (GOACC_2.0.1): Export GOACC_declare.\n+\t* oacc-parallel.c (GOACC_declare): New function.\n+\t* testsuite/libgomp.oacc-c-c++-common/declare-1.c: New test.\n+\t* testsuite/libgomp.oacc-c-c++-common/declare-2.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/declare-4.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/declare-5.c: Likewise.\n+\t* testsuite/libgomp.oacc-c++/declare-1.C: Likewise.\n+\n 2015-11-12  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* testsuite/libgomp.oacc-c-c++-common/default-1.c: New."}, {"sha": "d16710f44f4de23bb49ad32afa0301b3d5f3e995", "filename": "libgomp/libgomp.map", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e232ba4246ca324a663ec5ddf0ba4db5cf3fbad/libgomp%2Flibgomp.map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e232ba4246ca324a663ec5ddf0ba4db5cf3fbad/libgomp%2Flibgomp.map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Flibgomp.map?ref=6e232ba4246ca324a663ec5ddf0ba4db5cf3fbad", "patch": "@@ -392,6 +392,7 @@ GOACC_2.0 {\n \n GOACC_2.0.1 {\n   global:\n+\tGOACC_declare;\n \tGOACC_parallel_keyed;\n } GOACC_2.0;\n "}, {"sha": "a80ede40d1de064ad461c2e947dfd377d1b96eef", "filename": "libgomp/oacc-parallel.c", "status": "modified", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e232ba4246ca324a663ec5ddf0ba4db5cf3fbad/libgomp%2Foacc-parallel.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e232ba4246ca324a663ec5ddf0ba4db5cf3fbad/libgomp%2Foacc-parallel.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Foacc-parallel.c?ref=6e232ba4246ca324a663ec5ddf0ba4db5cf3fbad", "patch": "@@ -501,3 +501,61 @@ GOACC_get_thread_num (void)\n {\n   return 0;\n }\n+\n+void\n+GOACC_declare (int device, size_t mapnum,\n+\t       void **hostaddrs, size_t *sizes, unsigned short *kinds)\n+{\n+  int i;\n+\n+  for (i = 0; i < mapnum; i++)\n+    {\n+      unsigned char kind = kinds[i] & 0xff;\n+\n+      if (kind == GOMP_MAP_POINTER || kind == GOMP_MAP_TO_PSET)\n+\tcontinue;\n+\n+      switch (kind)\n+\t{\n+\t  case GOMP_MAP_FORCE_ALLOC:\n+\t  case GOMP_MAP_FORCE_DEALLOC:\n+\t  case GOMP_MAP_FORCE_FROM:\n+\t  case GOMP_MAP_FORCE_TO:\n+\t  case GOMP_MAP_POINTER:\n+\t    GOACC_enter_exit_data (device, 1, &hostaddrs[i], &sizes[i],\n+\t\t\t\t   &kinds[i], 0, 0);\n+\t    break;\n+\n+\t  case GOMP_MAP_FORCE_DEVICEPTR:\n+\t    break;\n+\n+\t  case GOMP_MAP_ALLOC:\n+\t    if (!acc_is_present (hostaddrs[i], sizes[i]))\n+\t      GOACC_enter_exit_data (device, 1, &hostaddrs[i], &sizes[i],\n+\t\t\t\t     &kinds[i], 0, 0);\n+\t    break;\n+\n+\t  case GOMP_MAP_TO:\n+\t    GOACC_enter_exit_data (device, 1, &hostaddrs[i], &sizes[i],\n+\t\t\t\t   &kinds[i], 0, 0);\n+\n+\t    break;\n+\n+\t  case GOMP_MAP_FROM:\n+\t    kinds[i] = GOMP_MAP_FORCE_FROM;\n+\t    GOACC_enter_exit_data (device, 1, &hostaddrs[i], &sizes[i],\n+\t\t\t\t   &kinds[i], 0, 0);\n+\t    break;\n+\n+\t  case GOMP_MAP_FORCE_PRESENT:\n+\t    if (!acc_is_present (hostaddrs[i], sizes[i]))\n+\t      gomp_fatal (\"[%p,%ld] is not mapped\", hostaddrs[i],\n+\t\t\t  (unsigned long) sizes[i]);\n+\t    break;\n+\n+\t  default:\n+\t    assert (0);\n+\t    break;\n+\t}\n+    }\n+}"}, {"sha": "0286955d0c75d16500afc74ed12a1893c4ecd39f", "filename": "libgomp/testsuite/libgomp.oacc-c++/declare-1.C", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e232ba4246ca324a663ec5ddf0ba4db5cf3fbad/libgomp%2Ftestsuite%2Flibgomp.oacc-c%2B%2B%2Fdeclare-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e232ba4246ca324a663ec5ddf0ba4db5cf3fbad/libgomp%2Ftestsuite%2Flibgomp.oacc-c%2B%2B%2Fdeclare-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c%2B%2B%2Fdeclare-1.C?ref=6e232ba4246ca324a663ec5ddf0ba4db5cf3fbad", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do run { target openacc_nvidia_accel_selected } } */\n+\n+#include <stdlib.h>\n+\n+template<class T>\n+T foo()\n+{\n+  T a, b;\n+  #pragma acc declare create (a)\n+\n+  #pragma acc parallel copyout (b)\n+  {\n+    a = 5;\n+    b = a;\n+  }\n+\n+  return b;\n+}\n+\n+int\n+main (void)\n+{\n+  int rc;\n+\n+  rc = foo<int>();\n+\n+  if (rc != 5)\n+    abort ();\n+\n+  return 0;\n+}"}, {"sha": "c63a68dbab75adaeffd373a296045e4b683c839b", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/declare-1.c", "status": "added", "additions": 122, "deletions": 0, "changes": 122, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e232ba4246ca324a663ec5ddf0ba4db5cf3fbad/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fdeclare-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e232ba4246ca324a663ec5ddf0ba4db5cf3fbad/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fdeclare-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fdeclare-1.c?ref=6e232ba4246ca324a663ec5ddf0ba4db5cf3fbad", "patch": "@@ -0,0 +1,122 @@\n+/* { dg-do run { target openacc_nvidia_accel_selected } } */\n+\n+#include <openacc.h>\n+#include <stdlib.h>\n+#include <stdio.h>\n+\n+#define N 8\n+\n+void\n+subr2 (int *a)\n+{\n+  int i;\n+  int f[N];\n+#pragma acc declare copyout (f)\n+\n+#pragma acc parallel copy (a[0:N])\n+  {\n+    for (i = 0; i < N; i++)\n+      {\n+\tf[i] = a[i];\n+\ta[i] = f[i] + f[i] + f[i];\n+      }\n+  }\n+}\n+\n+void\n+subr1 (int *a)\n+{\n+  int f[N];\n+#pragma acc declare copy (f)\n+\n+#pragma acc parallel copy (a[0:N])\n+  {\n+    int i;\n+\n+    for (i = 0; i < N; i++)\n+      {\n+\tf[i] = a[i];\n+\ta[i] = f[i] + f[i];\n+      }\n+  }\n+}\n+\n+int b[8];\n+#pragma acc declare create (b)\n+\n+int d[8] = { 1, 2, 3, 4, 5, 6, 7, 8 };\n+#pragma acc declare copyin (d)\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int a[N];\n+  int e[N];\n+#pragma acc declare create (e)\n+  int i;\n+\n+  for (i = 0; i < N; i++)\n+    a[i] = i + 1;\n+\n+  if (!acc_is_present (&b, sizeof (b)))\n+    abort ();\n+\n+  if (!acc_is_present (&d, sizeof (d)))\n+    abort ();\n+\n+  if (!acc_is_present (&e, sizeof (e)))\n+    abort ();\n+\n+#pragma acc parallel copyin (a[0:N])\n+  {\n+    for (i = 0; i < N; i++)\n+      {\n+\tb[i] = a[i];\n+\ta[i] = b[i];\n+      }\n+  }\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      if (a[i] != i + 1)\n+\tabort ();\n+    }\n+\n+#pragma acc parallel copy (a[0:N])\n+  {\n+    for (i = 0; i < N; i++)\n+      {\n+\te[i] = a[i] + d[i];\n+\ta[i] = e[i];\n+      }\n+  }\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      if (a[i] != (i + 1) * 2)\n+\tabort ();\n+    }\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      a[i] = 1234;\n+    }\n+\n+  subr1 (&a[0]);\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      if (a[i] != 1234 * 2)\n+\tabort ();\n+    }\n+\n+  subr2 (&a[0]);\n+\n+  for (i = 0; i < 1; i++)\n+    {\n+      if (a[i] != 1234 * 6)\n+\tabort ();\n+    }\n+\n+  return 0;\n+}"}, {"sha": "2078a33afa95b4d4c3465bc48a36771342af6af7", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/declare-2.c", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e232ba4246ca324a663ec5ddf0ba4db5cf3fbad/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fdeclare-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e232ba4246ca324a663ec5ddf0ba4db5cf3fbad/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fdeclare-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fdeclare-2.c?ref=6e232ba4246ca324a663ec5ddf0ba4db5cf3fbad", "patch": "@@ -0,0 +1,64 @@\n+/* { dg-do run { target openacc_nvidia_accel_selected } } */\n+\n+#include <stdlib.h>\n+\n+#define N 16\n+\n+float c[N];\n+#pragma acc declare device_resident (c)\n+\n+#pragma acc routine\n+float\n+subr2 (float a)\n+{\n+  int i;\n+\n+  for (i = 0; i < N; i++)\n+    c[i] = 2.0;\n+\n+  for (i = 0; i < N; i++)\n+    a += c[i];\n+\n+  return a;\n+}\n+\n+float b[N];\n+#pragma acc declare copyin (b)\n+\n+#pragma acc routine\n+float\n+subr1 (float a)\n+{\n+  int i;\n+\n+  for (i = 0; i < N; i++)\n+    a += b[i];\n+\n+  return a;\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  float a;\n+  int i;\n+\n+  for (i = 0; i < 16; i++)\n+    b[i] = 1.0;\n+\n+  a = 0.0;\n+\n+  a = subr1 (a);\n+\n+  if (a != 16.0)\n+    abort ();\n+\n+  a = 0.0;\n+\n+  a = subr2 (a);\n+\n+  if (a != 32.0)\n+    abort ();\n+\n+  return 0;\n+}"}, {"sha": "013310ecb7d548b2328710b77c227cd188c1f83f", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/declare-4.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e232ba4246ca324a663ec5ddf0ba4db5cf3fbad/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fdeclare-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e232ba4246ca324a663ec5ddf0ba4db5cf3fbad/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fdeclare-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fdeclare-4.c?ref=6e232ba4246ca324a663ec5ddf0ba4db5cf3fbad", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do run  { target openacc_nvidia_accel_selected } } */\n+\n+#include <stdlib.h>\n+#include <openacc.h>\n+\n+float b;\n+#pragma acc declare link (b)\n+\n+#pragma acc routine\n+int\n+func (int a)\n+{\n+  b = a + 1;\n+\n+  return b;\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  float a;\n+\n+  a = 2.0;\n+\n+#pragma acc parallel copy (a)\n+  {\n+    b = a;\n+    a = 1.0;\n+    a = a + b;\n+  }\n+\n+  if (a != 3.0)\n+    abort ();\n+\n+  a = func (a);\n+\n+  if (a != 4.0)\n+    abort ();\n+\n+  return 0;\n+}"}, {"sha": "38c5de063d935b5f2f4fa56d0558b93f30d42f78", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/declare-5.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e232ba4246ca324a663ec5ddf0ba4db5cf3fbad/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fdeclare-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e232ba4246ca324a663ec5ddf0ba4db5cf3fbad/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fdeclare-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fdeclare-5.c?ref=6e232ba4246ca324a663ec5ddf0ba4db5cf3fbad", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do run { target openacc_nvidia_accel_selected } } */\n+\n+#include <stdio.h>\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int a[8] __attribute__((unused));\n+\n+  fprintf (stderr, \"CheCKpOInT\\n\");\n+#pragma acc declare present (a)\n+}\n+\n+/* { dg-output \"CheCKpOInT\" } */\n+/* { dg-shouldfail \"\" } */"}]}