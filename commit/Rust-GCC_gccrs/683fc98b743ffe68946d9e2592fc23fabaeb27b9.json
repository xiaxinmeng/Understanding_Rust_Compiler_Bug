{"sha": "683fc98b743ffe68946d9e2592fc23fabaeb27b9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjgzZmM5OGI3NDNmZmU2ODk0NmQ5ZTI1OTJmYzIzZmFiYWViMjdiOQ==", "commit": {"author": {"name": "Iain Sandoe", "email": "iains@gcc.gnu.org", "date": "2010-05-25T08:28:44Z"}, "committer": {"name": "Iain Sandoe", "email": "iains@gcc.gnu.org", "date": "2010-05-25T08:28:44Z"}, "message": "add TLS checks to ObjC++\n\n\t* obj-c++.dg/torture/tls/trivial.mm: New.\n\t* obj-c++.dg/torture/tls/thr-init-1.mm: New.\n\t* obj-c++.dg/torture/tls/thr-init-2.mm: New.\n\t* obj-c++.dg/torture/tls/thr-init-3.mm: New.\n\t* obj-c++.dg/torture/tls/diag-1.mm: New.\n\t* obj-c++.dg/torture/tls/tls.exp: New.\n\t* obj-c++.dg/torture/trivial.mm: New.\n\t* obj-c++.dg/torture/dg-torture.exp: New.\n\t* obj-c++.dg/dg.exp: Gather tests explicitly from the source dir.\n\t* obj-c++.dg/tls/trivial.m: New.\n\t* obj-c++.dg/tls/init-1.mm: New.\n\t* obj-c++.dg/tls/diag-1.mm: New.\n\t* obj-c++.dg/tls/init-2.mm: New.\n\t* obj-c++.dg/tls/diag-2.mm: New.\n\t* obj-c++.dg/tls/diag-3.mm: New.\n\t* obj-c++.dg/tls/diag-4.mm: New.\n\t* obj-c++.dg/tls/static-1.mm: New.\n\t* obj-c++.dg/tls/tls.exp: New.\n\t* obj-c++.dg/tls/diag-5.mm: New.\n\t* obj-c++.dg/tls/static-1a.mm: New.\n\t* objc-obj-c++-shared/Object1.mm: New.\n\t* lib/obj-c++-dg.exp (obj-c++-dg-runtest): New proc.\n\nFrom-SVN: r159810", "tree": {"sha": "fda155280f6ddec060482e6761fd1ab028ef6d71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fda155280f6ddec060482e6761fd1ab028ef6d71"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/683fc98b743ffe68946d9e2592fc23fabaeb27b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/683fc98b743ffe68946d9e2592fc23fabaeb27b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/683fc98b743ffe68946d9e2592fc23fabaeb27b9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/683fc98b743ffe68946d9e2592fc23fabaeb27b9/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d4545b28e1c3ec30b18194d722c9a9717ce98e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d4545b28e1c3ec30b18194d722c9a9717ce98e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d4545b28e1c3ec30b18194d722c9a9717ce98e3"}], "stats": {"total": 377, "additions": 376, "deletions": 1}, "files": [{"sha": "b0db389a6af442f51c36a2fdf68a538c1750ac16", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/683fc98b743ffe68946d9e2592fc23fabaeb27b9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/683fc98b743ffe68946d9e2592fc23fabaeb27b9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=683fc98b743ffe68946d9e2592fc23fabaeb27b9", "patch": "@@ -1,3 +1,28 @@\n+2010-05-25  Iain Sandoe  <iains@gcc.gnu.org>\n+\n+\t* obj-c++.dg/torture/tls/trivial.mm: New.\n+\t* obj-c++.dg/torture/tls/thr-init-1.mm: New.\n+\t* obj-c++.dg/torture/tls/thr-init-2.mm: New.\n+\t* obj-c++.dg/torture/tls/thr-init-3.mm: New.\n+\t* obj-c++.dg/torture/tls/diag-1.mm: New.\n+\t* obj-c++.dg/torture/tls/tls.exp: New.\n+\t* obj-c++.dg/torture/trivial.mm: New.\n+\t* obj-c++.dg/torture/dg-torture.exp: New.\n+\t* obj-c++.dg/dg.exp: Gather tests explicitly from the source dir.\n+\t* obj-c++.dg/tls/trivial.m: New.\n+\t* obj-c++.dg/tls/init-1.mm: New.\n+\t* obj-c++.dg/tls/diag-1.mm: New.\n+\t* obj-c++.dg/tls/init-2.mm: New.\n+\t* obj-c++.dg/tls/diag-2.mm: New.\n+\t* obj-c++.dg/tls/diag-3.mm: New.\n+\t* obj-c++.dg/tls/diag-4.mm: New.\n+\t* obj-c++.dg/tls/static-1.mm: New.\n+\t* obj-c++.dg/tls/tls.exp: New.\n+\t* obj-c++.dg/tls/diag-5.mm: New.\n+\t* obj-c++.dg/tls/static-1a.mm: New.\n+\t* objc-obj-c++-shared/Object1.mm: New.\n+\t* lib/obj-c++-dg.exp (obj-c++-dg-runtest): New proc.\n+\n 2010-05-24  Iain Sandoe  <iains@gcc.gnu.org>\n \n \tPR ObjC++/43689"}, {"sha": "dbdeaa2006e9eda688306dcb793c5bbc0c51733f", "filename": "gcc/testsuite/lib/obj-c++-dg.exp", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/683fc98b743ffe68946d9e2592fc23fabaeb27b9/gcc%2Ftestsuite%2Flib%2Fobj-c%2B%2B-dg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/683fc98b743ffe68946d9e2592fc23fabaeb27b9/gcc%2Ftestsuite%2Flib%2Fobj-c%2B%2B-dg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fobj-c%2B%2B-dg.exp?ref=683fc98b743ffe68946d9e2592fc23fabaeb27b9", "patch": "@@ -26,3 +26,9 @@ proc obj-c++-dg-test { prog do_what extra_tool_flags } {\n proc obj-c++-dg-prune { system text } {\n     return [gcc-dg-prune $system $text]\n }\n+\n+# Modified dg-runtest that can cycle through a list of optimization options\n+# as c-torture does.\n+proc obj-c++-dg-runtest { testcases default-extra-flags } {\n+    return [gcc-dg-runtest $testcases ${default-extra-flags}]\n+}"}, {"sha": "bff972ba57c67e92d8d9e7428afce2404411e9b8", "filename": "gcc/testsuite/obj-c++.dg/dg.exp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/683fc98b743ffe68946d9e2592fc23fabaeb27b9/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fdg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/683fc98b743ffe68946d9e2592fc23fabaeb27b9/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fdg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fdg.exp?ref=683fc98b743ffe68946d9e2592fc23fabaeb27b9", "patch": "@@ -28,7 +28,7 @@ if ![info exists DEFAULT_OBJCXXFLAGS] then {\n dg-init\n \n # Gather a list of all tests.\n-set tests [lsort [find $srcdir/$subdir *.mm]]\n+set tests [lsort [glob -nocomplain $srcdir/$subdir/*.mm]]\n \n # Main loop.\n dg-runtest $tests \"-fgnu-runtime\" $DEFAULT_OBJCXXFLAGS"}, {"sha": "7c3245d9f91c097123591d8a5c99bc8d06c34d14", "filename": "gcc/testsuite/obj-c++.dg/tls/diag-1.mm", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/683fc98b743ffe68946d9e2592fc23fabaeb27b9/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftls%2Fdiag-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/683fc98b743ffe68946d9e2592fc23fabaeb27b9/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftls%2Fdiag-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftls%2Fdiag-1.mm?ref=683fc98b743ffe68946d9e2592fc23fabaeb27b9", "patch": "@@ -0,0 +1,12 @@\n+// Valid __thread specifiers.\n+// { dg-require-effective-target tls }\n+\n+__thread int g1;\n+extern __thread int g2;\n+static __thread int g3;\n+\n+void foo()\n+{\n+  extern __thread int l1;\n+  static __thread int l2;\n+}"}, {"sha": "de88eb1932b44db09a5926adacfd20121a205ccd", "filename": "gcc/testsuite/obj-c++.dg/tls/diag-2.mm", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/683fc98b743ffe68946d9e2592fc23fabaeb27b9/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftls%2Fdiag-2.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/683fc98b743ffe68946d9e2592fc23fabaeb27b9/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftls%2Fdiag-2.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftls%2Fdiag-2.mm?ref=683fc98b743ffe68946d9e2592fc23fabaeb27b9", "patch": "@@ -0,0 +1,26 @@\n+/* Invalid __thread specifiers.  */\n+/* { dg-require-effective-target tls } */\n+\n+__thread extern int g1;\t\t/* { dg-error \"'__thread' before 'extern'\" } */\n+__thread static int g2;\t\t/* { dg-error \"'__thread' before 'static'\" } */\n+__thread __thread int g3;\t/* { dg-error \"duplicate '__thread'\" } */\n+typedef __thread int g4;\t/* { dg-error \"multiple storage classes\" } */\n+\n+void foo()\n+{\n+  __thread int l1;\t\t/* { dg-error \"implicitly auto and declared '__thread'\" } */\n+  auto __thread int l2;\t\t/* { dg-error \"multiple storage classes\" } */\n+  __thread extern int l3;\t/* { dg-error \"'__thread' before 'extern'\" } */\n+  register __thread int l4;\t/* { dg-error \"multiple storage classes\" } */\n+}\n+\n+__thread void f1 ();\t\t/* { dg-error \"storage class '__thread' invalid for function 'f1'\" } */\n+extern __thread void f2 ();\t/* { dg-error \"storage class '__thread' invalid for function 'f2'\" } */\n+static __thread void f3 ();\t/* { dg-error \"storage class '__thread' invalid for function 'f3'\" } */\n+__thread void f4 () { }\t\t/* { dg-error \"storage class '__thread' invalid for function 'f4'\" } */\n+\n+void bar(__thread int p1);\t/* { dg-error \"(invalid in parameter)|(specified for parameter)\" } */\n+\n+struct A {\n+  __thread int i;\t\t/* { dg-error \"storage class specified for 'i'\" } */\n+};"}, {"sha": "0a597b20f8d15e824666177ca0379a52ce856acb", "filename": "gcc/testsuite/obj-c++.dg/tls/diag-3.mm", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/683fc98b743ffe68946d9e2592fc23fabaeb27b9/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftls%2Fdiag-3.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/683fc98b743ffe68946d9e2592fc23fabaeb27b9/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftls%2Fdiag-3.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftls%2Fdiag-3.mm?ref=683fc98b743ffe68946d9e2592fc23fabaeb27b9", "patch": "@@ -0,0 +1,11 @@\n+/* Report invalid extern and __thread combinations. */\n+/* { dg-require-effective-target tls } */\n+\n+extern int j;\t\t/* { dg-error \"previously declared here\" } */\n+__thread int j;\t\t/* { dg-error \"follows non-thread-local\" } */\n+\n+extern __thread int i;\t/* { dg-error \"previously declared here\" } */\n+int i;\t\t\t/* { dg-error \"follows thread-local\" } */\n+\n+extern __thread int k;\t/* This is fine. */\n+__thread int k;"}, {"sha": "10ac2aada8286b299583194dd1d55583b0052fcb", "filename": "gcc/testsuite/obj-c++.dg/tls/diag-4.mm", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/683fc98b743ffe68946d9e2592fc23fabaeb27b9/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftls%2Fdiag-4.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/683fc98b743ffe68946d9e2592fc23fabaeb27b9/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftls%2Fdiag-4.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftls%2Fdiag-4.mm?ref=683fc98b743ffe68946d9e2592fc23fabaeb27b9", "patch": "@@ -0,0 +1,10 @@\n+/* Invalid __thread specifiers.  */\n+/* { dg-require-effective-target tls } */\n+\n+__thread typedef int g4;\t/* { dg-error \"multiple storage classes in declaration of\" } */\n+\n+void foo()\n+{\n+  __thread auto int l2;\t\t/* { dg-error \"multiple storage classes in declaration of\" } */\n+  __thread register int l4;\t/* { dg-error \"multiple storage classes in declaration of\" } */\n+}"}, {"sha": "07ecd3f7da0eb50177a7d975775f4cf1be6797ac", "filename": "gcc/testsuite/obj-c++.dg/tls/diag-5.mm", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/683fc98b743ffe68946d9e2592fc23fabaeb27b9/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftls%2Fdiag-5.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/683fc98b743ffe68946d9e2592fc23fabaeb27b9/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftls%2Fdiag-5.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftls%2Fdiag-5.mm?ref=683fc98b743ffe68946d9e2592fc23fabaeb27b9", "patch": "@@ -0,0 +1,4 @@\n+/* __thread specifiers on empty declarations.  */\n+/* { dg-require-effective-target tls } */\n+\n+__thread struct foo; /* { dg-warning \"qualifiers can only be specified for objects and functions\" } */"}, {"sha": "94308871394d41a307586c4e8962a6447de616fe", "filename": "gcc/testsuite/obj-c++.dg/tls/init-1.mm", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/683fc98b743ffe68946d9e2592fc23fabaeb27b9/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftls%2Finit-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/683fc98b743ffe68946d9e2592fc23fabaeb27b9/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftls%2Finit-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftls%2Finit-1.mm?ref=683fc98b743ffe68946d9e2592fc23fabaeb27b9", "patch": "@@ -0,0 +1,14 @@\n+/* Invalid initializations.  */\n+/* { dg-require-effective-target tls } */\n+\n+__thread int i = 42;\n+\n+static int j;\n+__thread int *p = &j;\n+\n+/* Note that this is valid in C++ (unlike C) as a run-time initialization.  */\n+int *q = &i;\n+\n+/* Valid because \"const int k\" is an integral constant expression in C++.  */\n+__thread const int k = 42;\n+__thread const int l = k;\n\\ No newline at end of file"}, {"sha": "dc886ba0107afec0b2c1c9ab34868c3d2faf9d81", "filename": "gcc/testsuite/obj-c++.dg/tls/init-2.mm", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/683fc98b743ffe68946d9e2592fc23fabaeb27b9/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftls%2Finit-2.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/683fc98b743ffe68946d9e2592fc23fabaeb27b9/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftls%2Finit-2.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftls%2Finit-2.mm?ref=683fc98b743ffe68946d9e2592fc23fabaeb27b9", "patch": "@@ -0,0 +1,14 @@\n+/* Invalid initializations.  */\n+/* { dg-require-effective-target tls } */\n+\n+extern __thread int i;\n+__thread int *p = &i;   /* { dg-error \"dynamically initialized\" } */\n+\n+extern int f();\n+__thread int j = f();   /* { dg-error \"dynamically initialized\" } */\n+\n+struct S\n+{\n+  S();\n+};\n+__thread S s;           /* { dg-error \"\" } two errors here */"}, {"sha": "2d20b8881f944481e6c97c0056c71ec046083966", "filename": "gcc/testsuite/obj-c++.dg/tls/static-1.mm", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/683fc98b743ffe68946d9e2592fc23fabaeb27b9/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftls%2Fstatic-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/683fc98b743ffe68946d9e2592fc23fabaeb27b9/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftls%2Fstatic-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftls%2Fstatic-1.mm?ref=683fc98b743ffe68946d9e2592fc23fabaeb27b9", "patch": "@@ -0,0 +1,30 @@\n+// { dg-do run }\n+// { dg-require-effective-target tls }\n+// { dg-additional-sources \"static-1a.mm\" }\n+\n+extern \"C\" {\n+extern void abort ();\n+}\n+extern int test ();\n+\n+struct A\n+{\n+  static __thread int i;\n+};\n+\n+__thread int A::i = 8;\n+\n+int\n+main ()\n+{\n+  if (A::i != 8)\n+    abort ();\n+\n+  if (test ())\n+    abort ();\n+\n+  if (A::i != 17)\n+    abort ();\n+\n+  return 0;\n+}"}, {"sha": "40974205fd9be3c1e4ce59d392a422cbc8e95a0d", "filename": "gcc/testsuite/obj-c++.dg/tls/static-1a.mm", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/683fc98b743ffe68946d9e2592fc23fabaeb27b9/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftls%2Fstatic-1a.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/683fc98b743ffe68946d9e2592fc23fabaeb27b9/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftls%2Fstatic-1a.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftls%2Fstatic-1a.mm?ref=683fc98b743ffe68946d9e2592fc23fabaeb27b9", "patch": "@@ -0,0 +1,17 @@\n+// { dg-skip-if \"Additional Source File\"  *-*-* \"*\" \"\"  }\n+// This is the additional source file for test static-1.mm\n+\n+struct A\n+{\n+  static __thread int i;\n+};\n+\n+int\n+test ()\n+{\n+  if (A::i != 8)\n+    return 1;\n+\n+  A::i = 17;\n+  return 0;\n+}"}, {"sha": "a4ba6393fa6b3226610543c8710a52e58f451357", "filename": "gcc/testsuite/obj-c++.dg/tls/tls.exp", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/683fc98b743ffe68946d9e2592fc23fabaeb27b9/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftls%2Ftls.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/683fc98b743ffe68946d9e2592fc23fabaeb27b9/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftls%2Ftls.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftls%2Ftls.exp?ref=683fc98b743ffe68946d9e2592fc23fabaeb27b9", "patch": "@@ -0,0 +1,25 @@\n+# Load support procs.\n+load_lib obj-c++-dg.exp\n+\n+# If a testcase doesn't have special options, use these.\n+global DEFAULT_OBJCXXFLAGS\n+if ![info exists DEFAULT_OBJCXXFLAGS] then {\n+    set DEFAULT_OBJCXXFLAGS \" -ansi -pedantic-errors -Wno-long-long\"\n+}\n+\n+# Initialize `dg'.\n+dg-init\n+\n+# Gather a list of all tests.\n+set tests [lsort [glob -nocomplain $srcdir/$subdir/*.mm]]\n+\n+# Main loop.\n+dg-runtest $tests \"-fgnu-runtime\" $DEFAULT_OBJCXXFLAGS\n+\n+# darwin targets can also run code with the NeXT runtime.\n+if [istarget \"*-*-darwin*\" ] {\n+dg-runtest $tests \"-fnext-runtime\" $DEFAULT_OBJCXXFLAGS\n+}\n+\n+# All done.\n+dg-finish"}, {"sha": "e2b8f45b84543d3b1ccce19342d915e195b7d1b5", "filename": "gcc/testsuite/obj-c++.dg/tls/trivial.m", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/683fc98b743ffe68946d9e2592fc23fabaeb27b9/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftls%2Ftrivial.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/683fc98b743ffe68946d9e2592fc23fabaeb27b9/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftls%2Ftrivial.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftls%2Ftrivial.m?ref=683fc98b743ffe68946d9e2592fc23fabaeb27b9", "patch": "@@ -0,0 +1,3 @@\n+// { dg-require-effective-target tls }\n+\n+__thread int i;"}, {"sha": "9ef34e9953f9c2046cbbcea0c1d129286a0dacee", "filename": "gcc/testsuite/obj-c++.dg/torture/dg-torture.exp", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/683fc98b743ffe68946d9e2592fc23fabaeb27b9/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftorture%2Fdg-torture.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/683fc98b743ffe68946d9e2592fc23fabaeb27b9/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftorture%2Fdg-torture.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftorture%2Fdg-torture.exp?ref=683fc98b743ffe68946d9e2592fc23fabaeb27b9", "patch": "@@ -0,0 +1,17 @@\n+# This harness is for tests that should be run at all optimisation levels.\n+\n+load_lib obj-c++-dg.exp\n+\n+dg-init\n+\n+# Gather a list of all tests.\n+set tests [lsort [glob -nocomplain $srcdir/$subdir/*.mm]]\n+ \n+obj-c++-dg-runtest $tests \"-fgnu-runtime\"\n+\n+# darwin targets can also run code with the NeXT runtime.\n+if [istarget \"*-*-darwin*\" ] {\n+  obj-c++-dg-runtest $tests \"-fnext-runtime\"\n+}\n+\n+dg-finish"}, {"sha": "7c3245d9f91c097123591d8a5c99bc8d06c34d14", "filename": "gcc/testsuite/obj-c++.dg/torture/tls/diag-1.mm", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/683fc98b743ffe68946d9e2592fc23fabaeb27b9/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftorture%2Ftls%2Fdiag-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/683fc98b743ffe68946d9e2592fc23fabaeb27b9/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftorture%2Ftls%2Fdiag-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftorture%2Ftls%2Fdiag-1.mm?ref=683fc98b743ffe68946d9e2592fc23fabaeb27b9", "patch": "@@ -0,0 +1,12 @@\n+// Valid __thread specifiers.\n+// { dg-require-effective-target tls }\n+\n+__thread int g1;\n+extern __thread int g2;\n+static __thread int g3;\n+\n+void foo()\n+{\n+  extern __thread int l1;\n+  static __thread int l2;\n+}"}, {"sha": "45d67f459490d4ec370ae535c1138f9b569e9c19", "filename": "gcc/testsuite/obj-c++.dg/torture/tls/thr-init-1.mm", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/683fc98b743ffe68946d9e2592fc23fabaeb27b9/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftorture%2Ftls%2Fthr-init-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/683fc98b743ffe68946d9e2592fc23fabaeb27b9/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftorture%2Ftls%2Fthr-init-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftorture%2Ftls%2Fthr-init-1.mm?ref=683fc98b743ffe68946d9e2592fc23fabaeb27b9", "patch": "@@ -0,0 +1,23 @@\n+// { dg-require-effective-target tls }\n+// { dg-do run }\n+extern \"C\" {\n+extern void abort ();\n+}\n+\n+static __thread int fstat = 1;\n+\n+int test_code(int b)\n+{\n+  fstat += b ;\n+  return fstat;\n+}\n+\n+int main (int ac, char *av[])\n+{\n+  int a = test_code(1);\n+  \n+  if ( a != 2 || fstat != 2 ) \n+    abort ();\n+  \n+  return 0;\n+}"}, {"sha": "a96ae94b0805a48e8d8fd16e79de6d14d1b6272a", "filename": "gcc/testsuite/obj-c++.dg/torture/tls/thr-init-2.mm", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/683fc98b743ffe68946d9e2592fc23fabaeb27b9/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftorture%2Ftls%2Fthr-init-2.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/683fc98b743ffe68946d9e2592fc23fabaeb27b9/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftorture%2Ftls%2Fthr-init-2.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftorture%2Ftls%2Fthr-init-2.mm?ref=683fc98b743ffe68946d9e2592fc23fabaeb27b9", "patch": "@@ -0,0 +1,44 @@\n+// { dg-require-effective-target tls }\n+// { dg-do run }\n+\n+extern \"C\" {\n+extern void abort ();\n+}\n+\n+__thread int glb =1 ;\n+\n+static __thread int fstat = 2;\n+\n+int fa(int a)\n+{\n+static __thread int as = 3;\n+  as += a ;\n+  return as;\n+}\n+\n+int fb(int b)\n+{\n+static __thread int bs = 4;\n+  bs += b ;\n+  glb = bs;\n+  return bs;\n+}\n+\n+int main (int ac, char *av[])\n+{\n+  int a = 1;\n+  \n+  a = fa(fstat);\n+  if ( a != 5 ) \n+    abort () ;\n+\n+  a = fa(glb);\n+  if ( a != 6 ) \n+    abort () ;\n+\n+  a = fb(a);  \n+  if ( a != 10 || glb != 10 ) \n+    abort () ;\n+  \n+  return 0;\n+}\n\\ No newline at end of file"}, {"sha": "98d1ba477056c34c1dbf6ff42cfb7d341aa6ffc8", "filename": "gcc/testsuite/obj-c++.dg/torture/tls/thr-init-3.mm", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/683fc98b743ffe68946d9e2592fc23fabaeb27b9/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftorture%2Ftls%2Fthr-init-3.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/683fc98b743ffe68946d9e2592fc23fabaeb27b9/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftorture%2Ftls%2Fthr-init-3.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftorture%2Ftls%2Fthr-init-3.mm?ref=683fc98b743ffe68946d9e2592fc23fabaeb27b9", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-require-effective-target tls } */\n+/* { dg-do run } */\n+/* { dg-xfail-if \"PR44140\" { *-*-* } { \"-flto\" \"-fwhopr\" } { \"\" } } */\n+/* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n+/* { dg-additional-sources \"../../../objc-obj-c++-shared/Object1.mm\" } */\n+\n+#include \"../../../objc-obj-c++-shared/Object1.h\"\n+extern \"C\" {\n+extern void abort ();\n+}\n+\n+@interface tsObj: Object {\n+  int ai ;\n+}\n+\n+- (int) fa:(int) n;\n+\n+@end\n+\n+@implementation tsObj\n+\n+- (int) fa:(int) n\n+{\n+static __thread int as = 3;\n+  as += n ;\n+  return as ;\n+}\n+\n+@end\n+\n+int main (int ac, char *av[])\n+{\n+  int a ;\n+  tsObj *to = [tsObj new];\n+  \n+  a = [to fa:5];\n+  if ( a != 8 ) \n+    abort () ;\n+  \n+  return 0;\n+}"}, {"sha": "6d0668045d407b35ead496a5742e24eed85957f2", "filename": "gcc/testsuite/obj-c++.dg/torture/tls/tls.exp", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/683fc98b743ffe68946d9e2592fc23fabaeb27b9/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftorture%2Ftls%2Ftls.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/683fc98b743ffe68946d9e2592fc23fabaeb27b9/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftorture%2Ftls%2Ftls.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftorture%2Ftls%2Ftls.exp?ref=683fc98b743ffe68946d9e2592fc23fabaeb27b9", "patch": "@@ -0,0 +1,16 @@\n+# This harness is for tests that should be run at all optimisation levels.\n+\n+load_lib obj-c++-dg.exp\n+\n+dg-init\n+# Gather a list of all tests.\n+set tests [lsort [glob -nocomplain $srcdir/$subdir/*.mm]]\n+\n+obj-c++-dg-runtest $tests \"-fgnu-runtime\"\n+\n+# darwin targets can also run code with the NeXT runtime.\n+if [istarget \"*-*-darwin*\" ] {\n+  obj-c++-dg-runtest $tests \"-fnext-runtime\"\n+}\n+\n+dg-finish"}, {"sha": "e2b8f45b84543d3b1ccce19342d915e195b7d1b5", "filename": "gcc/testsuite/obj-c++.dg/torture/tls/trivial.mm", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/683fc98b743ffe68946d9e2592fc23fabaeb27b9/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftorture%2Ftls%2Ftrivial.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/683fc98b743ffe68946d9e2592fc23fabaeb27b9/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftorture%2Ftls%2Ftrivial.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftorture%2Ftls%2Ftrivial.mm?ref=683fc98b743ffe68946d9e2592fc23fabaeb27b9", "patch": "@@ -0,0 +1,3 @@\n+// { dg-require-effective-target tls }\n+\n+__thread int i;"}, {"sha": "8d776b7291039ff07f3e42fed1a99d585fbbaf12", "filename": "gcc/testsuite/obj-c++.dg/torture/trivial.mm", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/683fc98b743ffe68946d9e2592fc23fabaeb27b9/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftorture%2Ftrivial.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/683fc98b743ffe68946d9e2592fc23fabaeb27b9/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftorture%2Ftrivial.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftorture%2Ftrivial.mm?ref=683fc98b743ffe68946d9e2592fc23fabaeb27b9", "patch": "@@ -0,0 +1,11 @@\n+// { dg-do run }\n+// { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } }\n+// { dg-additional-sources \"../../objc-obj-c++-shared/Object1.mm\" }\n+\n+#import \"../../objc-obj-c++-shared/Object1.h\"\n+\n+int main(void)\n+{\n+  [Object class];\n+  return 0;\n+}"}, {"sha": "f435a75af061c8e4cd7ca27cdde0ee5617f74b1d", "filename": "gcc/testsuite/objc-obj-c++-shared/Object1.mm", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/683fc98b743ffe68946d9e2592fc23fabaeb27b9/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FObject1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/683fc98b743ffe68946d9e2592fc23fabaeb27b9/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FObject1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FObject1.mm?ref=683fc98b743ffe68946d9e2592fc23fabaeb27b9", "patch": "@@ -0,0 +1,11 @@\n+#import \"Object1.h\"\n+/* This will generate the code if required - as determined by\n+   the headr above.  It is kept like this to keep one code file\n+   shared between dg-xxxx tests that can ask for an extra source\n+   and the objc/{compile,execute}/xxx tests that have to include\n+   the implementation explicitly.\n+   \n+   For cases/targets that don't require the generation of the\n+   Object implementation, this should result in an empty object.\n+*/\n+#import \"Object1-implementation.h\""}]}