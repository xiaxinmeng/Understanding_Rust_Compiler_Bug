{"sha": "a9eec9625ea7165292958be04899b057804192fb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTllZWM5NjI1ZWE3MTY1MjkyOTU4YmUwNDg5OWIwNTc4MDQxOTJmYg==", "commit": {"author": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2020-06-09T23:15:28Z"}, "committer": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2020-06-10T19:02:45Z"}, "message": "coroutines: Make call argument handling more robust [PR95440]\n\nbuild_new_method_call is supposed to be able to handle a null\narguments list pointer (when the method has no parms).  There\nwere a couple of places where uses of the argument list pointer\nwere not defended against NULL.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/95440\n\t* call.c (add_candidates): Use vec_safe_length() for\n\ttesting the arguments list.\n\t(build_new_method_call_1): Use vec_safe_is_empty() when\n\tchecking for an empty args list.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/95440\n\t* g++.dg/coroutines/pr95440.C: New test.", "tree": {"sha": "5ece325dccfd3d12ba7854207de18b21bb2a1451", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5ece325dccfd3d12ba7854207de18b21bb2a1451"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a9eec9625ea7165292958be04899b057804192fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9eec9625ea7165292958be04899b057804192fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9eec9625ea7165292958be04899b057804192fb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9eec9625ea7165292958be04899b057804192fb/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2c2cee92e5defff9bf23d3b1184ee96e57e5fdd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2c2cee92e5defff9bf23d3b1184ee96e57e5fdd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2c2cee92e5defff9bf23d3b1184ee96e57e5fdd"}], "stats": {"total": 43, "additions": 41, "deletions": 2}, "files": [{"sha": "b99959f76f93d105f3ff424ef152a164aa0ab840", "filename": "gcc/cp/call.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9eec9625ea7165292958be04899b057804192fb/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9eec9625ea7165292958be04899b057804192fb/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=a9eec9625ea7165292958be04899b057804192fb", "patch": "@@ -5862,7 +5862,7 @@ add_candidates (tree fns, tree first_arg, const vec<tree, va_gc> *args,\n \t}\n \n       /* Don't bother reversing an operator with two identical parameters.  */\n-      else if (args->length () == 2 && (flags & LOOKUP_REVERSED))\n+      else if (vec_safe_length (args) == 2 && (flags & LOOKUP_REVERSED))\n \t{\n \t  tree parmlist = TYPE_ARG_TYPES (TREE_TYPE (fn));\n \t  if (same_type_p (TREE_VALUE (parmlist),\n@@ -10263,7 +10263,7 @@ build_new_method_call_1 (tree instance, tree fns, vec<tree, va_gc> **args,\n \t  && !(flags & LOOKUP_ONLYCONVERTING)\n \t  && cxx_dialect >= cxx20\n \t  && CP_AGGREGATE_TYPE_P (basetype)\n-\t  && !user_args->is_empty ())\n+\t  && !vec_safe_is_empty (user_args))\n \t{\n \t  /* Create a CONSTRUCTOR from ARGS, e.g. {1, 2} from <1, 2>.  */\n \t  tree list = build_tree_list_vec (user_args);"}, {"sha": "8542880d1ab67de660eee434624d8c9c20dacfd8", "filename": "gcc/testsuite/g++.dg/coroutines/pr95440.C", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9eec9625ea7165292958be04899b057804192fb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr95440.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9eec9625ea7165292958be04899b057804192fb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr95440.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr95440.C?ref=a9eec9625ea7165292958be04899b057804192fb", "patch": "@@ -0,0 +1,39 @@\n+#if __has_include(<coroutine>)\n+#include <coroutine>\n+#else\n+#include <experimental/coroutine>\n+namespace std { using namespace experimental; }\n+#endif\n+#if 0\n+struct suspend_n {\n+  const int x;\n+  constexpr suspend_n (int x) : x (x) {}\n+  constexpr static bool await_ready() { return false; }\n+  constexpr static void await_suspend(std::coroutine_handle<>) {}\n+  constexpr static void await_resume() {}\n+};\n+#endif\n+struct task\n+{\n+  struct promise_type\n+  {\n+    auto get_return_object() const { return task{}; }\n+#if 0\n+//    static constexpr suspend_n initial_suspend()  { return {2}; }\n+#endif\n+    static constexpr std::suspend_always initial_suspend()  { return {}; }\n+    static constexpr std::suspend_never final_suspend() { return {}; }\n+    static constexpr void return_void() {}\n+    static constexpr void unhandled_exception() {}\n+  };\n+};\n+\n+task\n+test_task ()\n+{\n+  co_await std::suspend_always{};\n+}\n+\n+auto t = test_task();\n+\n+int main() {}"}]}