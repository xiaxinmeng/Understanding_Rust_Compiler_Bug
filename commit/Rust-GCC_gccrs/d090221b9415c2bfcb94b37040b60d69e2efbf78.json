{"sha": "d090221b9415c2bfcb94b37040b60d69e2efbf78", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDA5MDIyMWI5NDE1YzJiZmNiOTRiMzcwNDBiNjBkNjllMmVmYmY3OA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2005-11-30T20:55:41Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2005-11-30T20:55:41Z"}, "message": "re PR tree-optimization/22501 ([meta-bug] tramp3d-v4 missed optimizations)\n\n2005-11-30  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/22501\n\t* tree-ssa-forwprop.c (forward_propagate_addr_expr_1): New\n\tfunction split out from ...\n\t(forward_propagate_addr_expr): ... here.  Use it to propagate\n\tADDR_EXPRs to all uses.\n\nFrom-SVN: r107737", "tree": {"sha": "79902a8abf40bbf211c8ffcd4f457c6c04e0b255", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/79902a8abf40bbf211c8ffcd4f457c6c04e0b255"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d090221b9415c2bfcb94b37040b60d69e2efbf78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d090221b9415c2bfcb94b37040b60d69e2efbf78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d090221b9415c2bfcb94b37040b60d69e2efbf78", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d090221b9415c2bfcb94b37040b60d69e2efbf78/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ea6a66274744eba7f56f982909b08dbe0ef293c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea6a66274744eba7f56f982909b08dbe0ef293c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea6a66274744eba7f56f982909b08dbe0ef293c2"}], "stats": {"total": 82, "additions": 57, "deletions": 25}, "files": [{"sha": "e21c5e2d57d485a108e93e436df7fbcc3cb82abf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d090221b9415c2bfcb94b37040b60d69e2efbf78/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d090221b9415c2bfcb94b37040b60d69e2efbf78/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d090221b9415c2bfcb94b37040b60d69e2efbf78", "patch": "@@ -1,3 +1,11 @@\n+2005-11-30  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/22501\n+\t* tree-ssa-forwprop.c (forward_propagate_addr_expr_1): New\n+\tfunction split out from ...\n+\t(forward_propagate_addr_expr): ... here.  Use it to propagate\n+\tADDR_EXPRs to all uses.\n+\n 2005-11-30  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n \n \t* tree.h (CASE_FLT_FN, CASE_INT_FN): New macros."}, {"sha": "ccd78465af5e630528e396af9e609b0d2caf008e", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 49, "deletions": 25, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d090221b9415c2bfcb94b37040b60d69e2efbf78/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d090221b9415c2bfcb94b37040b60d69e2efbf78/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=d090221b9415c2bfcb94b37040b60d69e2efbf78", "patch": "@@ -528,36 +528,16 @@ forward_propagate_addr_into_variable_array_index (tree offset, tree lhs,\n \n /* STMT is a statement of the form SSA_NAME = ADDR_EXPR <whatever>.\n \n-   Try to forward propagate the ADDR_EXPR into the uses of the SSA_NAME.\n+   Try to forward propagate the ADDR_EXPR into the use USE_STMT.\n    Often this will allow for removal of an ADDR_EXPR and INDIRECT_REF\n-   node or for recovery of array indexing from pointer arithmetic.  */\n+   node or for recovery of array indexing from pointer arithmetic.\n+   Return true, if the propagation was successful.  */\n \n static bool\n-forward_propagate_addr_expr (tree stmt)\n+forward_propagate_addr_expr_1 (tree stmt, tree use_stmt)\n {\n-  int stmt_loop_depth = bb_for_stmt (stmt)->loop_depth;\n   tree name = TREE_OPERAND (stmt, 0);\n-  use_operand_p imm_use;\n-  tree use_stmt, lhs, rhs, array_ref;\n-\n-  /* We require that the SSA_NAME holding the result of the ADDR_EXPR\n-     be used only once.  That may be overly conservative in that we\n-     could propagate into multiple uses.  However, that would effectively\n-     be un-cseing the ADDR_EXPR, which is probably not what we want.  */\n-  single_imm_use (name, &imm_use, &use_stmt);\n-  if (!use_stmt)\n-    return false;\n-\n-  /* If the use is not in a simple assignment statement, then\n-     there is nothing we can do.  */\n-  if (TREE_CODE (use_stmt) != MODIFY_EXPR)\n-    return false;\n-\n-  /* If the use is in a deeper loop nest, then we do not want\n-     to propagate the ADDR_EXPR into the loop as that is likely\n-     adding expression evaluations into the loop.  */\n-  if (bb_for_stmt (use_stmt)->loop_depth > stmt_loop_depth)\n-    return false;\n+  tree lhs, rhs, array_ref;\n \n   /* Strip away any outer COMPONENT_REF/ARRAY_REF nodes from the LHS. \n      ADDR_EXPR will not appear on the LHS.  */\n@@ -680,6 +660,50 @@ forward_propagate_addr_expr (tree stmt)\n   return false;\n }\n \n+/* STMT is a statement of the form SSA_NAME = ADDR_EXPR <whatever>.\n+\n+   Try to forward propagate the ADDR_EXPR into all uses of the SSA_NAME.\n+   Often this will allow for removal of an ADDR_EXPR and INDIRECT_REF\n+   node or for recovery of array indexing from pointer arithmetic.\n+   Returns true, if all uses have been propagated into.  */\n+\n+static bool\n+forward_propagate_addr_expr (tree stmt)\n+{\n+  int stmt_loop_depth = bb_for_stmt (stmt)->loop_depth;\n+  tree name = TREE_OPERAND (stmt, 0);\n+  use_operand_p imm_use;\n+  imm_use_iterator iter;\n+  bool all = true;\n+\n+  FOR_EACH_IMM_USE_SAFE (imm_use, iter, name)\n+    {\n+      tree use_stmt = USE_STMT (imm_use);\n+\n+      /* If the use is not in a simple assignment statement, then\n+\t there is nothing we can do.  */\n+      if (TREE_CODE (use_stmt) != MODIFY_EXPR)\n+\t{\n+\t  all = false;\n+\t  continue;\n+\t}\n+\n+     /* If the use is in a deeper loop nest, then we do not want\n+\tto propagate the ADDR_EXPR into the loop as that is likely\n+\tadding expression evaluations into the loop.  */\n+      if (bb_for_stmt (use_stmt)->loop_depth > stmt_loop_depth)\n+\t{\n+\t  all = false;\n+\t  continue;\n+\t}\n+\n+      all = all && forward_propagate_addr_expr_1 (stmt, use_stmt);\n+    }\n+\n+  return all;\n+}\n+\n+\n /* Main entry point for the forward propagation optimizer.  */\n \n static void"}]}