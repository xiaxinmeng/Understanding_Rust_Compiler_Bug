{"sha": "c9b1334eecc51bc0562581f2c6e86d3fc474c23c", "node_id": "C_kwDOANBUbNoAKGM5YjEzMzRlZWNjNTFiYzA1NjI1ODFmMmM2ZTg2ZDNmYzQ3NGMyM2M", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-11-10T00:16:28Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-11-10T00:16:28Z"}, "message": "Daily bump.", "tree": {"sha": "b3e20e2df8014b80f289f61e45f7cbd6849eb10b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b3e20e2df8014b80f289f61e45f7cbd6849eb10b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c9b1334eecc51bc0562581f2c6e86d3fc474c23c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9b1334eecc51bc0562581f2c6e86d3fc474c23c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9b1334eecc51bc0562581f2c6e86d3fc474c23c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9b1334eecc51bc0562581f2c6e86d3fc474c23c/comments", "author": null, "committer": null, "parents": [{"sha": "8722a17067f1590e82f49b3fd385647b762a45dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8722a17067f1590e82f49b3fd385647b762a45dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8722a17067f1590e82f49b3fd385647b762a45dc"}], "stats": {"total": 623, "additions": 622, "deletions": 1}, "files": [{"sha": "3671bb372de270d0633bdf223d8154c4a2c61792", "filename": "gcc/ChangeLog", "status": "modified", "additions": 174, "deletions": 0, "changes": 174, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9b1334eecc51bc0562581f2c6e86d3fc474c23c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9b1334eecc51bc0562581f2c6e86d3fc474c23c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c9b1334eecc51bc0562581f2c6e86d3fc474c23c", "patch": "@@ -1,3 +1,177 @@\n+2021-11-09  Bill Schmidt  <wschmidt@linux.ibm.com>\n+\n+\t* config/rs6000/rs6000-call.c (rs6000_gimple_fold_new_builtin):\n+\tDisable gimple fold for RS6000_BIF_{XVMINDP,XVMINSP,VMINFP} and\n+\tRS6000_BIF_{XVMAXDP,XVMAXSP,VMAXFP} when fast-math is not set.\n+\t(lxvrse_expand_builtin): Modify the expansion for sign extension.\n+\tAll extensions are done within VSX registers.\n+\n+2021-11-09  Andrew Pinski  <apinski@marvell.com>\n+\n+\tPR tree-optimization/10352\n+\t* match.pd: Remove check of TYPE_PRECISION for\n+\tthe a?0:pow2 case.\n+\n+2021-11-09  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* function.c (allocate_struct_function): Don't set x_range_query.\n+\t* function.h (get_range_query): Move to value-query.h.\n+\t* gimple-range.cc (enable_ranger): Check that query is currently NULL.\n+\t(disable_ranger): Clear function current query field.\n+\t* value-query.cc (get_global_range_query): Relocate to:\n+\t* value-query.h (get_global_range_query): Here and inline.\n+\t(get_range_query): Relocate here from function.h.\n+\n+2021-11-09  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* tree-ssa-threadbackward.c\n+\t(back_threader::maybe_register_path_dump): New.\n+\t(back_threader::maybe_register_path): Call maybe_register_path_dump.\n+\n+2021-11-09  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* tree-ssa-threadbackward.c (back_threader::maybe_register_path):\n+\tReturn NULL when unprofitable.\n+\n+2021-11-09  Martin Jambor  <mjambor@suse.cz>\n+\n+\t* tree.h (build_debug_expr_decl): Declare.\n+\t* tree.c (build_debug_expr_decl): New function.\n+\t* cfgexpand.c (avoid_deep_ter_for_debug): Use build_debug_expr_decl\n+\tinstead of building a DEBUG_EXPR_DECL.\n+\t* ipa-param-manipulation.c\n+\t(ipa_param_body_adjustments::prepare_debug_expressions): Likewise.\n+\t* omp-simd-clone.c (ipa_simd_modify_stmt_ops): Likewise.\n+\t* tree-ssa-ccp.c (optimize_atomic_bit_test_and): Likewise.\n+\t* tree-ssa-phiopt.c (spaceship_replacement): Likewise.\n+\t* tree-ssa-reassoc.c (make_new_ssa_for_def): Likewise.\n+\n+2021-11-09  Bill Schmidt  <wschmidt@linux.ibm.com>\n+\n+\t* config/rs6000/rs6000-call.c (rs6000_type_string): New function.\n+\t(def_builtin): Change debug formatting for easier parsing and\n+\tinclude more information.\n+\t(rs6000_init_builtins): Add dump of autogenerated builtins.\n+\t(altivec_init_builtins): Dump __builtin_altivec_mask_for_load for\n+\tcompleteness.\n+\n+2021-11-09  Marek Polacek  <polacek@redhat.com>\n+\n+\t* ipa-modref.c (analyze_parms): Fix a typo.\n+\n+2021-11-09  Kito Cheng  <kito.cheng@sifive.com>\n+\n+\tPR target/102957\n+\t* common/config/riscv/riscv-common.c (multi_letter_subset_rank): Remove\n+\tassertion for Z*-ext.\n+\n+2021-11-09  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* ipa-modref.c (analyze_parms): Add past_flags, past_retslot_flags\n+\tand past_static_chain; merge past summary with current one.\n+\t(analyze_function): Update.\n+\n+2021-11-09  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* doc/invoke.texi (Invoking GCC): Document --param=threader-debug.\n+\n+2021-11-09  Martin Liska  <mliska@suse.cz>\n+\n+\t* print-rtl.c (rtx_writer::rtx_writer): Make the compilation\n+\tconditional based on\n+\t* print-rtl.h (class rtx_writer): Likewise.\n+\n+2021-11-09  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* input.h (location_hash): Use 'BUILTINS_LOCATION' as spare value\n+\tfor 'Deleted'.  Turn into a '#define'.\n+\n+2021-11-09  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gimple-range-path.cc (path_range_query::dump): Clean up.\n+\t(path_range_query::compute_ranges): Same.\n+\t* value-relation.cc (path_oracle::dump): Same.\n+\n+2021-11-09  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* dumpfile.c (dump_options): Remove TDF_THREADING entry.\n+\t* dumpfile.h (enum dump_flag): Remove TDF_THREADING and adjust\n+\tremaining entries.\n+\t* flag-types.h (enum threader_debug): New.\n+\t* gimple-range-path.cc (DEBUG_SOLVER): Use param_threader_debug.\n+\t* params.opt: Add entry for --param=threader-debug=.\n+\n+2021-11-09  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\tPR middle-end/101204\n+\tPR other/103157\n+\t* diagnostic-spec.h (typedef xint_hash_t): Turn into...\n+\t(struct xint_hash_t): ... this.\n+\t* doc/gty.texi: Update.\n+\n+2021-11-09  Przemyslaw Wirkus  <przemyslaw.wirkus@arm.com>\n+\n+\t* config/arm/arm-cpus.in (armv9): New define.\n+\t(ARMv9a): New group.\n+\t(armv9-a): New arch definition.\n+\t* config/arm/arm-tables.opt: Regenerate.\n+\t* config/arm/arm.h (BASE_ARCH_9A): New arch enum value.\n+\t* config/arm/t-aprofile: Added armv9-a and armv9+simd.\n+\t* config/arm/t-arm-elf: Added arm9-a, v9_fps and all_v9_archs\n+\tto MULTILIB_MATCHES.\n+\t* config/arm/t-multilib: Added v9_a_nosimd_variants and\n+\tv9_a_simd_variants to MULTILIB_MATCHES.\n+\t* doc/invoke.texi: Update docs.\n+\n+2021-11-09  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR ipa/103132\n+\t* ipa-param-manipulation.c (replace_with_mapped_expr): Early\n+\treturn with error_mark_mode when part of expression is mapped to\n+\tNULL.\n+\t(ipa_param_body_adjustments::remap_with_debug_expressions): Set\n+\tmapped value to NULL if walk_tree returns error_mark_mode.\n+\n+2021-11-09  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* tree-ssa-strlen.c (compare_nonzero_chars): Pass statement\n+\tcontext to ranger.\n+\t(get_addr_stridx): Same.\n+\t(get_stridx): Same.\n+\t(get_range_strlen_dynamic): Same.\n+\t(handle_builtin_strlen): Same.\n+\t(handle_builtin_strchr): Same.\n+\t(handle_builtin_strcpy): Same.\n+\t(maybe_diag_stxncpy_trunc): Same.\n+\t(handle_builtin_stxncpy_strncat): Same.\n+\t(handle_builtin_memcpy): Same.\n+\t(handle_builtin_strcat): Same.\n+\t(handle_alloc_call): Same.\n+\t(handle_builtin_memset): Same.\n+\t(handle_builtin_string_cmp): Same.\n+\t(handle_pointer_plus): Same.\n+\t(count_nonzero_bytes_addr): Same.\n+\t(count_nonzero_bytes): Same.\n+\t(handle_store): Same.\n+\t(fold_strstr_to_strncmp): Same.\n+\t(handle_integral_assign): Same.\n+\t(check_and_optimize_stmt): Same.\n+\t(class strlen_dom_walker): Replace evrp with ranger.\n+\t(strlen_dom_walker::before_dom_children): Remove evrp.\n+\t(strlen_dom_walker::after_dom_children): Remove evrp.\n+\t* gimple-ssa-warn-access.cc (maybe_check_access_sizes):\n+\tRestrict sprintf output.\n+\n+2021-11-09  Martin Liska  <mliska@suse.cz>\n+\n+\t* genconditions.c (write_one_condition): Add const qualifier\n+\tto pointer casting.\n+\n+2021-11-09  Jeff Law  <jeffreyalaw@gmail.com>\n+\n+\t* match.pd: New pattern to simplify (1 << n) & M ==/!= 0 for M\n+\tbeing a power of 2.\n+\n 2021-11-08  Bill Schmidt  <wschmidt@linux.ibm.com>\n \n \t* config/rs6000/rs6000-builtin-new.def (VEC_INIT_V16QI): Use"}, {"sha": "b18f02b6f7c62eeffc82be6df9ab46e4cb3498ef", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9b1334eecc51bc0562581f2c6e86d3fc474c23c/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9b1334eecc51bc0562581f2c6e86d3fc474c23c/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=c9b1334eecc51bc0562581f2c6e86d3fc474c23c", "patch": "@@ -1 +1 @@\n-20211109\n+20211110"}, {"sha": "3244f073d5d7090b4947293399e47965265a06dd", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 217, "deletions": 0, "changes": 217, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9b1334eecc51bc0562581f2c6e86d3fc474c23c/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9b1334eecc51bc0562581f2c6e86d3fc474c23c/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=c9b1334eecc51bc0562581f2c6e86d3fc474c23c", "patch": "@@ -1,3 +1,220 @@\n+2021-11-09  Ghjuvan Lacambre  <lacambre@adacore.com>\n+\n+\t* freeze.adb (Check_Inherited_Conditions): Initialize\n+\tIfaces_List.\n+\n+2021-11-09  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_ch4.adb (Analyze_Membership_Op) <Find_Interpretation>: Handle\n+\tboth overloaded and non-overloaded cases.\n+\t<Try_One_Interp>: Do a reversed call to Covers if the outcome of the\n+\tcall to Has_Compatible_Type is false.\n+\tSimplify implementation after change to Find_Interpretation.\n+\t(Analyze_User_Defined_Binary_Op): Be prepared for previous errors.\n+\t(Find_Comparison_Types) <Try_One_Interp>: Do a reversed call to\n+\tCovers if the outcome of the call to Has_Compatible_Type is false.\n+\t(Find_Equality_Types) <Try_One_Interp>: Likewise.\n+\t* sem_type.adb (Has_Compatible_Type): Remove the reversed calls to\n+\tCovers.  Add explicit return on all paths.\n+\n+2021-11-09  Justin Squirek  <squirek@adacore.com>\n+\n+\t* gnatls.adb (Initialize_Default_Project_Path): Remove early\n+\tabort on invalid path.\n+\n+2021-11-09  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sprint.adb (Sprint_Node_Actual) <N_Allocator>: Also print the\n+\tProcedure_To_Call field if it is present.\n+\t<N_Extended_Return_Statement>: Also print the Storage_Pool and\n+\tProcedure_To_Call fields if they are present.\n+\t<N_Free_Statement>: Likewise.\n+\t<N_Simple_Return_Statement>: Likewise.\n+\n+2021-11-09  Patrick Bernardi  <bernardi@adacore.com>\n+\n+\t* libgnarl/s-tasini.adb (Check_Abort_Status): Don't return 1 if\n+\tthe task is aborting.\n+\t* libgnarl/s-tasini.ads (Check_Abort_Status): Update comment.\n+\n+2021-11-09  Patrick Bernardi  <bernardi@adacore.com>\n+\n+\t* Makefile.rtl: Add ATOMICS_TARGET_PAIRS and\n+\tATOMICS_BUILTINS_TARGET_PAIRS to LIBGNAT_TARGET_PAIRS for\n+\taarch64-rtems.\n+\n+2021-11-09  Justin Squirek  <squirek@adacore.com>\n+\n+\t* exp_util.adb (Ancestor_Primitive): Prevent return of an\n+\tsubprogram alias when the ancestor primitive of the alias is the\n+\tsame as Subp.\n+\n+2021-11-09  Justin Squirek  <squirek@adacore.com>\n+\n+\t* exp_ch4.adb (Tagged_Membership): Use corresponding record type\n+\twhen expanding a tagged membership test on protected types.\n+\n+2021-11-09  Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* strub.adb, strub.ads: New files.\n+\t* exp_attr.adb (Access_Cases): Copy strub mode to subprogram type.\n+\t* exp_disp.adb (Expand_Dispatching_Call): Likewise.\n+\t* freeze.adb (Check_Inherited_Conditions): Check that strub modes\n+\tmatch overridden subprograms and interfaces.\n+\t(Freeze_All): Renaming declarations too.\n+\t* sem_attr.adb (Resolve_Attribute): Reject 'Access to\n+\tstrub-annotated data object.\n+\t* sem_ch3.adb (Derive_Subprogram): Copy strub mode to\n+\tinherited subprogram.\n+\t* sem_prag.adb (Analyze_Pragma): Propagate Strub Machine_Attribute\n+\tfrom access-to-subprogram to subprogram type when required,\n+\tbut not from access-to-data to data type.  Mark the entity that\n+\tgot the pragma as having a gigi rep item.\n+\t* sem_res.adb (Resolve): Reject implicit conversions that\n+\twould change strub modes.\n+\t(Resolve_Type_Conversions): Reject checked conversions\n+\tbetween incompatible strub modes.\n+\t* doc/gnat_rm/security_hardening_features.rst: Update.\n+\t* gnat_rm.texi: Regenerate.\n+\t* libgnat/a-except.ads (Raise_Exception): Revert strub-callable\n+\tannotation in public subprogram.\n+\t* libgnat/s-arit128.ads (Multiply_With_Ovflo_Check128): Likewise.\n+\t* libgnat/s-arit64.ads (Multiply_With_Ovflo_Check64): Likewise.\n+\t* libgnat/s-secsta.ads (SS_Allocate): Likewise.\n+\t(SS_Mark, SS_Release): Likewise.\n+\t* gcc-interface/Make-lang.in (GNAT_ADA_OBJS): Add ada/strub.o.\n+\n+2021-11-09  Etienne Servais  <servais@adacore.com>\n+\n+\t* sinput.ads: Initialize Current_Source_Unit to No_Unit.\n+\n+2021-11-09  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* Makefile.rtl (ARM and Aarch64 VxWorks): Use atomic variants of\n+\truntime units.\n+\t* libgnat/a-strunb__shared.ads: Mention AARCH64 and ARM as\n+\tsupported.\n+\t* libgnat/s-atocou.ads: Likewise.\n+\n+2021-11-09  Ghjuvan Lacambre  <lacambre@adacore.com>\n+\n+\t* sem_util.adb (Accessibility_Level): Use init_proc_level_formal\n+\tinstead of computing a new accessibility level from Scope_Depth\n+\t(E).\n+\n+2021-11-09  Johannes Kliemann  <kliemann@adacore.com>\n+\n+\t* vxworks7-cert-rtp-link.spec: Replace the definition of\n+\t__wrs_rtp_base with the base_link spec.\n+\t* vxworks7-cert-rtp-base-link.spec: Add base_link spec with\n+\t__wrs_rtp_base definition for all architectures.\n+\t* vxworks7-cert-rtp-base-link__ppc64.spec: Add base_link spec\n+\twith __wrs_rtp_base definition for ppc64.\n+\t* vxworks7-cert-rtp-base-link__x86.spec: Add base_link spec with\n+\t__wrs_rtp_base definition for x86.\n+\t* vxworks7-cert-rtp-base-link__x86_64.spec: Add base_link spec\n+\twith __wrs_rtp_base definition for x86_64.\n+\n+2021-11-09  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_util.adb (Copy_Parameter_List): Refactor to remove\n+\trepeated calls to First_Formal.\n+\n+2021-11-09  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_ch8.adb (Build_Body_For_Renaming): Remove unnecessary\n+\tcalls to Sloc; set Handled_Statement_Sequence when building\n+\tsubprogram body; whitespace cleanup.\n+\n+2021-11-09  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_ch4.adb (Handle_One_Dimension): Parameter N must be always\n+\tpositive, because it is translated into expression of 'First and\n+\t'Last.\n+\n+2021-11-09  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* tbuild.adb (New_Occurrence_Of): Simplify by reusing\n+\tMake_Identifier.\n+\n+2021-11-09  Etienne Servais  <servais@adacore.com>\n+\n+\t* scng.adb (Set_Start_Column): Return Column_Number'Last when\n+\thandling Constraint_Error. Plus reformat a strangely 7 level if\n+\tloop.\n+\n+2021-11-09  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_ch4.adb (Test_Empty_Arrays): Simplify with Evolve_Or_Else;\n+\tremove unnecessary call to Relocate_Node.\n+\t(Test_Lengths_Correspond): Likewise.\n+\n+2021-11-09  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* libgnat/a-strunb.adb (Deallocate): Rename Reference_Copy to\n+\tOld, to make the code similar to other routines in this package.\n+\t(Realloc_For_Chunk): Use a temporary, deallocate the previous\n+\tstring using a null-allowing copy of the string reference.\n+\n+2021-11-09  Ghjuvan Lacambre  <lacambre@adacore.com>\n+\n+\t* sem_util.adb (Accessibility_Level): Fix typos.\n+\n+2021-11-09  Tom Tromey  <tromey@adacore.com>\n+\n+\t* doc/gnat_ugn/platform_specific_information.rst: Document the\n+\tSuSE kernel bug.\n+\t* gnat_ugn.texi: Regenerate.\n+\n+2021-11-09  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* sem_ch13.adb (Freeze_Entity_Checks): Analyze the expression of\n+\ta pragma Predicate associated with an aspect at the freeze point\n+\tof the type, to ensure that references to globals get saved when\n+\tthe aspect occurs within a generic body. Also, add\n+\tAspect_Static_Predicate to the choices of the membership test of\n+\tthe enclosing guard.\n+\n+2021-11-09  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_ch4.adb (Arr_Attr): Refine type of the parameter from Int\n+\tto Pos; refine name of the parameter from Num to Dim; fix\n+\treference to \"Expr\" in comment.\n+\n+2021-11-09  Steve Baird  <baird@adacore.com>\n+\n+\t* libgnat/s-regexp.adb (Compile.Check_Well_Formed_Patern): When\n+\ta \"|\" operator is encountered in a pattern, check that it is not\n+\tthe last character of the pattern.\n+\n+2021-11-09  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_ch3.adb (Analyze_Subtype_Declaration,\n+\tDerived_Type_Declaration): Initialize list of primitive\n+\toperations when Extensions_Allowed.\n+\n+2021-11-09  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* checks.adb (Apply_Constraint_Check): Guard against calling\n+\tChoices when the first association in an array aggregate is a\n+\tN_Iterated_Component_Association node.\n+\n+2021-11-09  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_ch3.adb (Analyze_Incomplete_Type_Decl): Add the missing\n+\tinitialization.\n+\n+2021-11-09  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_prag.adb (Check_Usage): Guard against calling Usage_Error\n+\twith illegal Item_Id. The intention to do this was already\n+\tdescribed in the comment but not implemented.\n+\n+2021-11-09  Etienne Servais  <servais@adacore.com>\n+\n+\t* exp_ch6.adb (Expand_Actuals): Add a condition to check for the\n+\tpossibility of task.\n+\n 2021-11-05  Iain Sandoe  <iain@sandoe.co.uk>\n \n \t* gcc-interface/Make-lang.in: Use iOS signal trampoline code"}, {"sha": "eb9765341637b6e2724a267d5ce792cc7ed86a1a", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9b1334eecc51bc0562581f2c6e86d3fc474c23c/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9b1334eecc51bc0562581f2c6e86d3fc474c23c/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=c9b1334eecc51bc0562581f2c6e86d3fc474c23c", "patch": "@@ -1,3 +1,13 @@\n+2021-11-09  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* c-pragma.c (GCC_BAD_AT): New macro.\n+\t(GCC_BAD2_AT): New macro.\n+\t(handle_pragma_pack): Use the location of the pertinent token when\n+\tissuing diagnostics about invalid constants/actions, and trailing\n+\tjunk.\n+\t(handle_pragma_target): Likewise for non-string \"GCC option\".\n+\t(handle_pragma_message): Likewise for trailing junk.\n+\n 2021-11-03  Joseph Myers  <joseph@codesourcery.com>\n \n \tPR c/103031"}, {"sha": "73eeade57db03202686c71f2bfd5ec38af86352e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9b1334eecc51bc0562581f2c6e86d3fc474c23c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9b1334eecc51bc0562581f2c6e86d3fc474c23c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c9b1334eecc51bc0562581f2c6e86d3fc474c23c", "patch": "@@ -1,3 +1,35 @@\n+2021-11-09  Marek Polacek  <polacek@redhat.com>\n+\n+\t* class.c (default_init_uninitialized_part): Use\n+\tnext_initializable_field.\n+\t* method.c (walk_field_subobs): Skip unnamed bit-fields.\n+\n+2021-11-09  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/103114\n+\t* parser.c (cp_parser_userdef_numeric_literal): Use fold_build2\n+\twith COMPLEX_EXPR arg instead of build_complex, use build_zero_cst\n+\tinstead of fold_convert from integer_zero_node.\n+\n+2021-11-09  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/98394\n+\tPR c++/85846\n+\t* parser.c (cp_parser_placeholder_type_specifier): Declare\n+\tstatic.  Don't override tentative to false when tmpl is a\n+\tconcept-id with empty argument list.  Don't emit a \"does not\n+\tconstrain a type\" error when tentative.\n+\n+2021-11-09  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/100652\n+\t* pt.c (push_template_decl): Check for bare parameter packs in\n+\tthe argument list of a variable template partial specialization.\n+\n+2021-11-09  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* ptree.c (cxx_print_xnode): Add more space to pfx array.\n+\n 2021-11-04  Jason Merrill  <jason@redhat.com>\n \n \t* call.c (build_array_conv): Use range-for."}, {"sha": "c9d99e52cc54ecdca87c3f3c7112bcf66b1b75a1", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9b1334eecc51bc0562581f2c6e86d3fc474c23c/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9b1334eecc51bc0562581f2c6e86d3fc474c23c/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=c9b1334eecc51bc0562581f2c6e86d3fc474c23c", "patch": "@@ -1,3 +1,28 @@\n+2021-11-09  Bernhard Reutner-Fischer  <aldot@gcc.gnu.org>\n+\n+\tPR fortran/68800\n+\t* class.c (generate_finalization_wrapper): Do not leak\n+\tfinalization wrappers if they will not be used.\n+\t* expr.c (gfc_free_actual_arglist): Formatting fix.\n+\t* gfortran.h (gfc_free_symbol): Pass argument by reference.\n+\t(gfc_release_symbol): Likewise.\n+\t(gfc_free_namespace): Likewise.\n+\t* symbol.c (gfc_release_symbol): Adjust acordingly.\n+\t(free_components): Set procedure pointer components\n+\tof derived types to NULL after freeing.\n+\t(free_tb_tree): Likewise.\n+\t(gfc_free_symbol): Set sym to NULL after freeing.\n+\t(gfc_free_namespace): Set namespace to NULL after freeing.\n+\n+2021-11-09  Martin Liska  <mliska@suse.cz>\n+\n+\t* symbol.c (gfc_get_ultimate_derived_super_type): Remove.\n+\n+2021-11-09  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* misc.c (gfc_dummy_typename): Make sure ts->kind is\n+\tnon-negative.\n+\n 2021-11-07  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \t* intrinsic.c (add_subroutines): Change keyword \"operator\""}, {"sha": "737fd4ac09316a798546fdf87bc23a437a23191f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9b1334eecc51bc0562581f2c6e86d3fc474c23c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9b1334eecc51bc0562581f2c6e86d3fc474c23c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c9b1334eecc51bc0562581f2c6e86d3fc474c23c", "patch": "@@ -1,3 +1,60 @@\n+2021-11-09  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* gcc.dg/bad-pragma-locations.c: New test.\n+\n+2021-11-09  Bill Schmidt  <wschmidt@linux.ibm.com>\n+\n+\t* gcc.target/powerpc/p10_vec_xl_sext.c: Fix long long case.\n+\n+2021-11-09  Andrew Pinski  <apinski@marvell.com>\n+\n+\tPR tree-optimization/10352\n+\t* gcc.c-torture/execute/pr10352-1.c: New test.\n+\n+2021-11-09  Marek Polacek  <polacek@redhat.com>\n+\n+\t* g++.dg/init/bitfield6.C: New test.\n+\n+2021-11-09  Kito Cheng  <kito.cheng@sifive.com>\n+\n+\t* gcc.target/riscv/pr102957.c: New.\n+\n+2021-11-09  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/103114\n+\t* g++.dg/ext/complex10.C: New test.\n+\n+2021-11-09  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/98394\n+\tPR c++/85846\n+\t* g++.dg/cpp2a/concepts-pr98394.C: New test.\n+\t* g++.dg/cpp2a/concepts-pr85846.C: New test.\n+\n+2021-11-09  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/100652\n+\t* g++.dg/cpp1y/var-templ69.C: New test.\n+\n+2021-11-09  Przemyslaw Wirkus  <przemyslaw.wirkus@arm.com>\n+\n+\t* gcc.target/arm/multilib.exp: Update test with armv9-a entries.\n+\t* lib/target-supports.exp (v9a): Add new armflag.\n+\t(__ARM_ARCH_9A__): Add new armdef.\n+\n+2021-11-09  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR ipa/103132\n+\t* gcc.dg/ipa/pr103132.c: New test.\n+\n+2021-11-09  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gcc.dg/tree-ssa/builtin-sprintf-warn-22.c: XFAIL.\n+\n+2021-11-09  Jeff Law  <jeffreyalaw@gmail.com>\n+\n+\t* gcc.dg/tree-ssa/bittest.c: New test\n+\n 2021-11-08  Andrew MacLeod  <amacleod@redhat.com>\n \n \t* g++.dg/pr103122.C: New."}, {"sha": "3ab37ecbb6940f7f0e452f05c6622c2306ea67c7", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9b1334eecc51bc0562581f2c6e86d3fc474c23c/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9b1334eecc51bc0562581f2c6e86d3fc474c23c/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=c9b1334eecc51bc0562581f2c6e86d3fc474c23c", "patch": "@@ -1,3 +1,7 @@\n+2021-11-09  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* env.c (parse_gomp_openacc_dim): Restore parsing.\n+\n 2021-10-30  Tobias Burnus  <tobias@codesourcery.com>\n \n \tPR middle-end/102972"}, {"sha": "a975ffef07e270b949286dc51529da9055b05f84", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9b1334eecc51bc0562581f2c6e86d3fc474c23c/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9b1334eecc51bc0562581f2c6e86d3fc474c23c/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=c9b1334eecc51bc0562581f2c6e86d3fc474c23c", "patch": "@@ -1,3 +1,105 @@\n+2021-11-09  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\t* include/bits/hashtable_policy.h (__distance_fw): Replace class keyword with\n+\ttypename.\n+\t* include/bits/hashtable.h (_Hashtable<>::_M_merge_unique): Remove noexcept\n+\tqualification. Use const_iterator for node extraction/reinsert.\n+\t(_Hashtable<>::_M_merge_multi): Likewise. Compute new hash code before extract.\n+\t* include/debug/safe_container.h (_Safe_container<>): Make all methods\n+\tprotected.\n+\t* include/debug/safe_unordered_container.h\n+\t(_Safe_unordered_container<>::_UContInvalidatePred<_ExtractKey, _Source>): New.\n+\t(_Safe_unordered_container<>::_UMContInvalidatePred<_ExtractKey, _Source>): New.\n+\t(_Safe_unordered_container<>::_UContMergeGuard<_Source, _InvalidatePred>): New.\n+\t(_Safe_unordered_container<>::_S_uc_guard<_ExtractKey, _Source>): New.\n+\t(_Safe_unordered_container<>::_S_umc_guard<_ExtractKey, _Source>): New.\n+\t(_Safe_unordered_container<>::_M_invalide_all): Make public.\n+\t(_Safe_unordered_container<>::_M_invalide_if): Likewise.\n+\t(_Safe_unordered_container<>::_M_invalide_local_if): Likewise.\n+\t* include/debug/unordered_map\n+\t(unordered_map<>::mapped_type, pointer, const_pointer): New typedef.\n+\t(unordered_map<>::reference, const_reference, difference_type): New typedef.\n+\t(unordered_map<>::get_allocator, empty, size, max_size): Add usings.\n+\t(unordered_map<>::bucket_count, max_bucket_count, bucket): Add usings.\n+\t(unordered_map<>::hash_function, key_equal, count, contains): Add usings.\n+\t(unordered_map<>::operator[], at, rehash, reserve): Add usings.\n+\t(unordered_map<>::merge): New.\n+\t(unordered_multimap<>::mapped_type, pointer, const_pointer): New typedef.\n+\t(unordered_multimap<>::reference, const_reference, difference_type): New typedef.\n+\t(unordered_multimap<>::get_allocator, empty, size, max_size): Add usings.\n+\t(unordered_multimap<>::bucket_count, max_bucket_count, bucket): Add usings.\n+\t(unordered_multimap<>::hash_function, key_equal, count, contains): Add usings.\n+\t(unordered_multimap<>::rehash, reserve): Add usings.\n+\t(unordered_multimap<>::merge): New.\n+\t* include/debug/unordered_set\n+\t(unordered_set<>::mapped_type, pointer, const_pointer): New typedef.\n+\t(unordered_set<>::reference, const_reference, difference_type): New typedef.\n+\t(unordered_set<>::get_allocator, empty, size, max_size): Add usings.\n+\t(unordered_set<>::bucket_count, max_bucket_count, bucket): Add usings.\n+\t(unordered_set<>::hash_function, key_equal, count, contains): Add usings.\n+\t(unordered_set<>::rehash, reserve): Add usings.\n+\t(unordered_set<>::merge): New.\n+\t(unordered_multiset<>::mapped_type, pointer, const_pointer): New typedef.\n+\t(unordered_multiset<>::reference, const_reference, difference_type): New typedef.\n+\t(unordered_multiset<>::get_allocator, empty, size, max_size): Add usings.\n+\t(unordered_multiset<>::bucket_count, max_bucket_count, bucket): Add usings.\n+\t(unordered_multiset<>::hash_function, key_equal, count, contains): Add usings.\n+\t(unordered_multiset<>::rehash, reserve): Add usings.\n+\t(unordered_multiset<>::merge): New.\n+\t* testsuite/23_containers/unordered_map/debug/merge1_neg.cc: New test.\n+\t* testsuite/23_containers/unordered_map/debug/merge2_neg.cc: New test.\n+\t* testsuite/23_containers/unordered_map/debug/merge3_neg.cc: New test.\n+\t* testsuite/23_containers/unordered_map/debug/merge4_neg.cc: New test.\n+\t* testsuite/23_containers/unordered_multimap/debug/merge1_neg.cc: New test.\n+\t* testsuite/23_containers/unordered_multimap/debug/merge2_neg.cc: New test.\n+\t* testsuite/23_containers/unordered_multimap/debug/merge3_neg.cc: New test.\n+\t* testsuite/23_containers/unordered_multimap/debug/merge4_neg.cc: New test.\n+\t* testsuite/23_containers/unordered_multiset/debug/merge1_neg.cc: New test.\n+\t* testsuite/23_containers/unordered_multiset/debug/merge2_neg.cc: New test.\n+\t* testsuite/23_containers/unordered_multiset/debug/merge3_neg.cc: New test.\n+\t* testsuite/23_containers/unordered_multiset/debug/merge4_neg.cc: New test.\n+\t* testsuite/23_containers/unordered_set/debug/merge1_neg.cc: New test.\n+\t* testsuite/23_containers/unordered_set/debug/merge2_neg.cc: New test.\n+\t* testsuite/23_containers/unordered_set/debug/merge3_neg.cc: New test.\n+\t* testsuite/23_containers/unordered_set/debug/merge4_neg.cc: New test.\n+\t* testsuite/util/testsuite_abi.h: [_GLIBCXX_DEBUG] Use normal unordered\n+\tcontainer implementation.\n+\n+2021-11-09  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/26_numerics/random/random_device/cons/token.cc:\n+\tPrint results of random_device_available checks.\n+\n+2021-11-09  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/103146\n+\t* src/c++11/random.cc: Check __powerpc64__ not __powerpc__.\n+\n+2021-11-09  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* acinclude.m4 (GLIBCXX_CHECK_GETENTROPY, GLIBCXX_CHECK_ARC4RANDOM):\n+\tDefine.\n+\t* configure.ac (GLIBCXX_CHECK_GETENTROPY, GLIBCXX_CHECK_ARC4RANDOM):\n+\tUse them.\n+\t* config.h.in: Regenerate.\n+\t* configure: Regenerate.\n+\t* src/c++11/random.cc (random_device): Add getentropy and\n+\tarc4random as sources.\n+\t* testsuite/26_numerics/random/random_device/cons/token.cc:\n+\tCheck new tokens.\n+\t* testsuite/26_numerics/random/random_device/entropy.cc:\n+\tLikewise.\n+\n+2021-11-09  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/26_numerics/random/random_device/cons/token.cc:\n+\tRetry if random devices produce the same value.\n+\n+2021-11-09  Rasmus Villemoes  <rasmus.villemoes@prevas.dk>\n+\n+\t* config/os/vxworks/os_defines.h (_GLIBCXX_HAVE_TLS): Only\n+\tdefine for VxWorks >= 6.6.\n+\n 2021-11-05  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/bits/range_access.h (begin(valarray), end(valarray)):"}]}