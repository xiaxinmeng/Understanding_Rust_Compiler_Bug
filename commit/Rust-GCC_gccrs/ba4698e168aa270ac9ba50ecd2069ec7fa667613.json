{"sha": "ba4698e168aa270ac9ba50ecd2069ec7fa667613", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmE0Njk4ZTE2OGFhMjcwYWM5YmE1MGVjZDIwNjllYzdmYTY2NzYxMw==", "commit": {"author": {"name": "Francois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2008-03-08T18:22:31Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2008-03-08T18:22:31Z"}, "message": "re PR fortran/34956 (-fbounds-check: bounds_check_9.f90: Use of uninitialized memory)\n\n\tPR fortran/34956\n\t* trans-array.c (gfc_conv_ss_startstride): Fix the logic to avoid\n\tchecking bounds of absent optional arguments.\n\nFrom-SVN: r133037", "tree": {"sha": "de6918cf06c1ef738d8401fd78e93b50f180c2dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/de6918cf06c1ef738d8401fd78e93b50f180c2dd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ba4698e168aa270ac9ba50ecd2069ec7fa667613", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba4698e168aa270ac9ba50ecd2069ec7fa667613", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba4698e168aa270ac9ba50ecd2069ec7fa667613", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba4698e168aa270ac9ba50ecd2069ec7fa667613/comments", "author": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e94c78f82fca1cffc8b548bcd54189e27cd7ac4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e94c78f82fca1cffc8b548bcd54189e27cd7ac4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e94c78f82fca1cffc8b548bcd54189e27cd7ac4"}], "stats": {"total": 50, "additions": 30, "deletions": 20}, "files": [{"sha": "83561087a3bb05f605488796b914e908d0f5b88a", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba4698e168aa270ac9ba50ecd2069ec7fa667613/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba4698e168aa270ac9ba50ecd2069ec7fa667613/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=ba4698e168aa270ac9ba50ecd2069ec7fa667613", "patch": "@@ -1,3 +1,9 @@\n+2008-03-08  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR fortran/34956\n+\t* trans-array.c (gfc_conv_ss_startstride): Fix the logic to avoid\n+\tchecking bounds of absent optional arguments.\n+\n 2008-03-06  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \tPR fortran/33197"}, {"sha": "542e22f97fecdf060f3daa2bb8e8964a7ce03b66", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 24, "deletions": 20, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba4698e168aa270ac9ba50ecd2069ec7fa667613/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba4698e168aa270ac9ba50ecd2069ec7fa667613/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=ba4698e168aa270ac9ba50ecd2069ec7fa667613", "patch": "@@ -2924,9 +2924,13 @@ gfc_conv_ss_startstride (gfc_loopinfo * loop)\n \n       for (ss = loop->ss; ss != gfc_ss_terminator; ss = ss->loop_chain)\n \t{\n+\t  stmtblock_t inner;\n+\n \t  if (ss->type != GFC_SS_SECTION)\n \t    continue;\n \n+\t  gfc_start_block (&inner);\n+\n \t  /* TODO: range checking for mapped dimensions.  */\n \t  info = &ss->data.info;\n \n@@ -2953,7 +2957,7 @@ gfc_conv_ss_startstride (gfc_loopinfo * loop)\n \t      asprintf (&msg, \"Zero stride is not allowed, for dimension %d \"\n \t\t\t\"of array '%s'\", info->dim[n]+1,\n \t\t\tss->expr->symtree->name);\n-\t      gfc_trans_runtime_check (tmp, &block, &ss->expr->where, msg);\n+\t      gfc_trans_runtime_check (tmp, &inner, &ss->expr->where, msg);\n \t      gfc_free (msg);\n \n \t      desc = ss->data.info.descriptor;\n@@ -2995,7 +2999,7 @@ gfc_conv_ss_startstride (gfc_loopinfo * loop)\n \t      asprintf (&msg, \"%s, lower bound of dimension %d of array '%s'\"\n \t\t\t\" exceeded (%%ld < %%ld)\", gfc_msg_fault,\n \t\t\tinfo->dim[n]+1, ss->expr->symtree->name);\n-\t      gfc_trans_runtime_check (tmp, &block, &ss->expr->where, msg,\n+\t      gfc_trans_runtime_check (tmp, &inner, &ss->expr->where, msg,\n \t\t\t\t       fold_convert (long_integer_type_node,\n \t\t\t\t\t\t     info->start[n]),\n \t\t\t\t       fold_convert (long_integer_type_node,\n@@ -3011,7 +3015,7 @@ gfc_conv_ss_startstride (gfc_loopinfo * loop)\n \t          asprintf (&msg, \"%s, upper bound of dimension %d of array \"\n \t\t\t    \"'%s' exceeded (%%ld > %%ld)\", gfc_msg_fault,\n \t\t\t    info->dim[n]+1, ss->expr->symtree->name);\n-\t\t  gfc_trans_runtime_check (tmp, &block, &ss->expr->where, msg,\n+\t\t  gfc_trans_runtime_check (tmp, &inner, &ss->expr->where, msg,\n \t\t\tfold_convert (long_integer_type_node, info->start[n]),\n \t\t\tfold_convert (long_integer_type_node, ubound));\n \t\t  gfc_free (msg);\n@@ -3033,7 +3037,7 @@ gfc_conv_ss_startstride (gfc_loopinfo * loop)\n \t      asprintf (&msg, \"%s, lower bound of dimension %d of array '%s'\"\n \t\t\t\" exceeded (%%ld < %%ld)\", gfc_msg_fault,\n \t\t\tinfo->dim[n]+1, ss->expr->symtree->name);\n-\t      gfc_trans_runtime_check (tmp, &block, &ss->expr->where, msg,\n+\t      gfc_trans_runtime_check (tmp, &inner, &ss->expr->where, msg,\n \t\t\t\t       fold_convert (long_integer_type_node,\n \t\t\t\t\t\t     tmp2),\n \t\t\t\t       fold_convert (long_integer_type_node,\n@@ -3048,7 +3052,7 @@ gfc_conv_ss_startstride (gfc_loopinfo * loop)\n \t\t  asprintf (&msg, \"%s, upper bound of dimension %d of array \"\n \t\t\t    \"'%s' exceeded (%%ld > %%ld)\", gfc_msg_fault,\n \t\t\t    info->dim[n]+1, ss->expr->symtree->name);\n-\t\t  gfc_trans_runtime_check (tmp, &block, &ss->expr->where, msg,\n+\t\t  gfc_trans_runtime_check (tmp, &inner, &ss->expr->where, msg,\n \t\t\tfold_convert (long_integer_type_node, tmp2),\n \t\t\tfold_convert (long_integer_type_node, ubound));\n \t\t  gfc_free (msg);\n@@ -3066,30 +3070,30 @@ gfc_conv_ss_startstride (gfc_loopinfo * loop)\n \t\t  tree tmp3;\n \n \t\t  tmp3 = fold_build2 (NE_EXPR, boolean_type_node, tmp, size[n]);\n-\n-\t\t  /* For optional arguments, only check bounds if the\n-\t\t     argument is present.  */\n-\t\t  if (ss->expr->symtree->n.sym->attr.optional\n-\t\t      || ss->expr->symtree->n.sym->attr.not_always_present)\n-\t\t    {\n-\t\t      tree cond;\n-\n-\t\t      cond = gfc_conv_expr_present (ss->expr->symtree->n.sym);\n-\t\t      tmp3 = fold_build2 (TRUTH_AND_EXPR, boolean_type_node,\n-\t\t\t\t\t  cond, tmp3);\n-\t\t    }\n-\n \t\t  asprintf (&msg, \"%s, size mismatch for dimension %d \"\n \t\t\t    \"of array '%s' (%%ld/%%ld)\", gfc_msg_bounds,\n \t\t\t    info->dim[n]+1, ss->expr->symtree->name);\n-\t\t  gfc_trans_runtime_check (tmp3, &block, &ss->expr->where, msg,\n+\t\t  gfc_trans_runtime_check (tmp3, &inner, &ss->expr->where, msg,\n \t\t\tfold_convert (long_integer_type_node, tmp),\n \t\t\tfold_convert (long_integer_type_node, size[n]));\n \t\t  gfc_free (msg);\n \t\t}\n \t      else\n-\t\tsize[n] = gfc_evaluate_now (tmp, &block);\n+\t\tsize[n] = gfc_evaluate_now (tmp, &inner);\n \t    }\n+\n+\t  tmp = gfc_finish_block (&inner);\n+\n+\t  /* For optional arguments, only check bounds if the argument is\n+\t     present.  */\n+\t  if (ss->expr->symtree->n.sym->attr.optional\n+\t      || ss->expr->symtree->n.sym->attr.not_always_present)\n+\t    tmp = build3_v (COND_EXPR,\n+\t\t\t    gfc_conv_expr_present (ss->expr->symtree->n.sym),\n+\t\t\t    tmp, build_empty_stmt ());\n+\n+\t  gfc_add_expr_to_block (&block, tmp);\n+\n \t}\n \n       tmp = gfc_finish_block (&block);"}]}