{"sha": "412f898605314d3c2eac39fc5e9774ea9a134f1c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDEyZjg5ODYwNTMxNGQzYzJlYWMzOWZjNWU5Nzc0ZWE5YTEzNGYxYw==", "commit": {"author": {"name": "Andrew Pinski", "email": "pinskia@physics.uc.edu", "date": "2005-08-27T21:37:53Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2005-08-27T21:37:53Z"}, "message": "re PR middle-end/23463 (va-arg-22.c execution fails)\n\n2005-08-27  Andrew Pinski  <pinskia@physics.uc.edu>\n\n        PR middle-end/23463\n        * gimplify.c (gimplify_modify_expr_rhs): Remove check for zero sized\n        types.\n        (gimplify_modify_expr): Check for zero sized types and gimplify the\n        rhs and lhs as statements.\n\n2005-08-27  Andrew Pinski  <pinskia@physics.uc.edu>\n\n        PR middle-end/23463\n        * gcc.c-torture/execute/zero-struct-1.c: New test.\n\nFrom-SVN: r103571", "tree": {"sha": "b36e7c770eb95bb27062a0aa0a4a320f647f0343", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b36e7c770eb95bb27062a0aa0a4a320f647f0343"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/412f898605314d3c2eac39fc5e9774ea9a134f1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/412f898605314d3c2eac39fc5e9774ea9a134f1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/412f898605314d3c2eac39fc5e9774ea9a134f1c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/412f898605314d3c2eac39fc5e9774ea9a134f1c/comments", "author": null, "committer": null, "parents": [{"sha": "147a8fb1ca28372e8beb030b1ca91b59f7be42b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/147a8fb1ca28372e8beb030b1ca91b59f7be42b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/147a8fb1ca28372e8beb030b1ca91b59f7be42b0"}], "stats": {"total": 54, "additions": 48, "deletions": 6}, "files": [{"sha": "424e2caac76998ce1d25fcd8c3194960a4d3d523", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/412f898605314d3c2eac39fc5e9774ea9a134f1c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/412f898605314d3c2eac39fc5e9774ea9a134f1c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=412f898605314d3c2eac39fc5e9774ea9a134f1c", "patch": "@@ -1,3 +1,11 @@\n+2005-08-27  Andrew Pinski  <pinskia@physics.uc.edu>\n+\n+\tPR middle-end/23463\n+\t* gimplify.c (gimplify_modify_expr_rhs): Remove check for zero sized\n+\ttypes.\n+\t(gimplify_modify_expr): Check for zero sized types and gimplify the\n+\trhs and lhs as statements.\n+\n 2005-08-27  John David Anglin  <dave.anflin@nrc-cnrc.gc.ca>\n \n \tPR libgcj/23508"}, {"sha": "7d76d66c507d0b24c3a31f83b3e497fa0e3c26d8", "filename": "gcc/gimplify.c", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/412f898605314d3c2eac39fc5e9774ea9a134f1c/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/412f898605314d3c2eac39fc5e9774ea9a134f1c/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=412f898605314d3c2eac39fc5e9774ea9a134f1c", "patch": "@@ -2965,12 +2965,6 @@ gimplify_modify_expr_rhs (tree *expr_p, tree *from_p, tree *to_p, tree *pre_p,\n \t\t\t  tree *post_p, bool want_value)\n {\n   enum gimplify_status ret = GS_OK;\n-  tree type = TREE_TYPE (*from_p);\n-  if (zero_sized_type (type))\n-    {\n-      *expr_p = NULL_TREE;\n-      return GS_ALL_DONE;\n-    }\n \n   while (ret != GS_UNHANDLED)\n     switch (TREE_CODE (*from_p))\n@@ -3164,6 +3158,18 @@ gimplify_modify_expr (tree *expr_p, tree *pre_p, tree *post_p, bool want_value)\n   /* The distinction between MODIFY_EXPR and INIT_EXPR is no longer useful.  */\n   if (TREE_CODE (*expr_p) == INIT_EXPR)\n     TREE_SET_CODE (*expr_p, MODIFY_EXPR);\n+  \n+  /* For zero sized types only gimplify the left hand side and right hand side\n+     as statements and throw away the assignment.  */\n+  if (zero_sized_type (TREE_TYPE (*from_p)))\n+    {\n+      gimplify_stmt (from_p);\n+      gimplify_stmt (to_p);\n+      append_to_statement_list (*from_p, pre_p);\n+      append_to_statement_list (*to_p, pre_p);\n+      *expr_p = NULL_TREE;\n+      return GS_ALL_DONE;\n+    }\n \n   /* See if any simplifications can be done based on what the RHS is.  */\n   ret = gimplify_modify_expr_rhs (expr_p, from_p, to_p, pre_p, post_p,"}, {"sha": "5821e1f8bc698f490d650d606d57f1a01fdc9e37", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/412f898605314d3c2eac39fc5e9774ea9a134f1c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/412f898605314d3c2eac39fc5e9774ea9a134f1c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=412f898605314d3c2eac39fc5e9774ea9a134f1c", "patch": "@@ -1,3 +1,8 @@\n+2005-08-27  Andrew Pinski  <pinskia@physics.uc.edu>\n+\n+\tPR middle-end/23463\n+\t* gcc.c-torture/execute/zero-struct-1.c: New test.\n+\n 2005-08-27  Richard Guenther  <rguenther@suse.de>\n \n \tPR target/23575"}, {"sha": "d673adf5c31dcc82feaa44a6d37eacb146c9547f", "filename": "gcc/testsuite/gcc.c-torture/execute/zero-struct-1.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/412f898605314d3c2eac39fc5e9774ea9a134f1c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fzero-struct-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/412f898605314d3c2eac39fc5e9774ea9a134f1c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fzero-struct-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fzero-struct-1.c?ref=412f898605314d3c2eac39fc5e9774ea9a134f1c", "patch": "@@ -0,0 +1,23 @@\n+struct g{};\n+char y[3];\n+char *f = &y[0];\n+char *ff = &y[0];\n+void h(void)\n+{\n+  struct g t;\n+  *((struct g*)(f++)) = *((struct g*)(ff++));\n+  *((struct g*)(f++)) = (struct g){};\n+  t = *((struct g*)(ff++));\n+}\n+\n+void abort (void);\n+\n+int main(void)\n+{\n+  h();\n+  if (f != &y[2])\n+    abort();\n+  if (ff != &y[2])\n+    abort();\n+  return 0;\n+}"}]}