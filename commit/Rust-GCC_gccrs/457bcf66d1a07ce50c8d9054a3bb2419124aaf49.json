{"sha": "457bcf66d1a07ce50c8d9054a3bb2419124aaf49", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDU3YmNmNjZkMWEwN2NlNTBjOGQ5MDU0YTNiYjI0MTkxMjRhYWY0OQ==", "commit": {"author": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2010-06-30T01:35:56Z"}, "committer": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2010-06-30T01:35:56Z"}, "message": "re PR libfortran/43298 (fortran library does not read in NaN -Inf or Inf)\n\n2010-06-29  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n\n\tPR libfortran/43298\n\t* io/read.c: Add code to parse and read Inf, Infinity, NaN, and Nan with\n\toptional parenthesis.\n\nFrom-SVN: r161585", "tree": {"sha": "eb20cc2ca5e1f8dfc78c9521bc48245cad3f1321", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eb20cc2ca5e1f8dfc78c9521bc48245cad3f1321"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/457bcf66d1a07ce50c8d9054a3bb2419124aaf49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/457bcf66d1a07ce50c8d9054a3bb2419124aaf49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/457bcf66d1a07ce50c8d9054a3bb2419124aaf49", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/457bcf66d1a07ce50c8d9054a3bb2419124aaf49/comments", "author": null, "committer": null, "parents": [{"sha": "0622223a32a82cdda72bd562f493219b19da5764", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0622223a32a82cdda72bd562f493219b19da5764", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0622223a32a82cdda72bd562f493219b19da5764"}], "stats": {"total": 66, "additions": 66, "deletions": 0}, "files": [{"sha": "0e5eb36da5fb1d82bdd2734a9a133c230b56c781", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/457bcf66d1a07ce50c8d9054a3bb2419124aaf49/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/457bcf66d1a07ce50c8d9054a3bb2419124aaf49/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=457bcf66d1a07ce50c8d9054a3bb2419124aaf49", "patch": "@@ -1,3 +1,9 @@\n+2010-06-29  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n+\n+\tPR libfortran/43298\n+\t* io/read.c: Add code to parse and read Inf, Infinity, NaN, and Nan with\n+\toptional parenthesis.\n+\n 2010-06-28  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/43298"}, {"sha": "873d26c4d83172abc9ae959ff57e3563f5828b17", "filename": "libgfortran/io/read.c", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/457bcf66d1a07ce50c8d9054a3bb2419124aaf49/libgfortran%2Fio%2Fread.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/457bcf66d1a07ce50c8d9054a3bb2419124aaf49/libgfortran%2Fio%2Fread.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fread.c?ref=457bcf66d1a07ce50c8d9054a3bb2419124aaf49", "patch": "@@ -810,6 +810,66 @@ read_f (st_parameter_dt *dtp, const fnode *f, char *dest, int length)\n   if (w == 0)\n     goto zero;\n \n+  /* Check for Infinity or NaN.  */    \n+  if (unlikely ((w >= 3 && (*p == 'i' || *p == 'I' || *p == 'n' || *p == 'N'))))\n+    {\n+      int seen_paren = 0;\n+      char *save = out;\n+\n+      /* Scan through the buffer keeping track of spaces and parenthesis. We\n+\t null terminate the string as soon as we see a left paren or if we are\n+\t BLANK_NULL mode.  Leading spaces have already been skipped above,\n+\t trailing spaces are ignored by converting to '\\0'. A space\n+\t between \"NaN\" and the optional perenthesis is not permitted.  */\n+      while (w > 0)\n+\t{\n+\t  *out = tolower (*p);\n+\t  switch (*p)\n+\t    {\n+\t    case ' ':\n+\t      if (dtp->u.p.blank_status == BLANK_ZERO)\n+\t\t{\n+\t\t  *out = '0';\n+\t\t  break;\n+\t\t}\n+\t      *out = '\\0';\n+\t      if (seen_paren == 1)\n+\t        goto bad_float;\n+\t      break;\n+\t    case '(':\n+\t      seen_paren++;\n+\t      *out = '\\0';\n+\t      break;\n+\t    case ')':\n+\t      if (seen_paren++ != 1)\n+\t\tgoto bad_float;\n+\t      break;\n+\t    default:\n+\t      if (!isalnum (*out))\n+\t\tgoto bad_float;\n+\t    }\n+\t  --w;\n+\t  ++p;\n+\t  ++out;\n+\t}\n+\t \n+      *out = '\\0';\n+      \n+      if (seen_paren != 0 && seen_paren != 2)\n+\tgoto bad_float;\n+\n+      if ((strcmp (save, \"inf\") == 0) || (strcmp (save, \"infinity\") == 0))\n+\t{\n+\t   if (seen_paren)\n+\t     goto bad_float;\n+\t}\n+      else if (strcmp (save, \"nan\") != 0)\n+\tgoto bad_float;\n+\n+      convert_real (dtp, dest, buffer, length);\n+      return;\n+    }\n+\n   /* Process the mantissa string.  */\n   while (w > 0)\n     {"}]}