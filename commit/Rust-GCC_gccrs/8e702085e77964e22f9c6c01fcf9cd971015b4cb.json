{"sha": "8e702085e77964e22f9c6c01fcf9cd971015b4cb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGU3MDIwODVlNzc5NjRlMjJmOWM2YzAxZmNmOWNkOTcxMDE1YjRjYg==", "commit": {"author": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "1997-02-07T03:54:48Z"}, "committer": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "1997-02-07T03:54:48Z"}, "message": "i formatting tweaks\n\nFrom-SVN: r13614", "tree": {"sha": "85f193dd716116b2e5c76cc49974d21dbab6d490", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/85f193dd716116b2e5c76cc49974d21dbab6d490"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8e702085e77964e22f9c6c01fcf9cd971015b4cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e702085e77964e22f9c6c01fcf9cd971015b4cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e702085e77964e22f9c6c01fcf9cd971015b4cb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e702085e77964e22f9c6c01fcf9cd971015b4cb/comments", "author": null, "committer": null, "parents": [{"sha": "abeeec2a285eb1d65a2f20ec91d9e97c902ae140", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abeeec2a285eb1d65a2f20ec91d9e97c902ae140", "html_url": "https://github.com/Rust-GCC/gccrs/commit/abeeec2a285eb1d65a2f20ec91d9e97c902ae140"}], "stats": {"total": 23, "additions": 9, "deletions": 14}, "files": [{"sha": "cec29dbf8bd195116003455b2af6afb014aa03a8", "filename": "gcc/libgcc2.c", "status": "modified", "additions": 9, "deletions": 14, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e702085e77964e22f9c6c01fcf9cd971015b4cb/gcc%2Flibgcc2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e702085e77964e22f9c6c01fcf9cd971015b4cb/gcc%2Flibgcc2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibgcc2.c?ref=8e702085e77964e22f9c6c01fcf9cd971015b4cb", "patch": "@@ -3042,8 +3042,6 @@ struct exception_table_node {\n   struct exception_table_node *next;\n };\n \n-static int except_table_pos;\n-static void *except_pc;\n static struct exception_table_node *exception_table_list;\n \n static exception_table *\n@@ -3084,42 +3082,39 @@ find_exception_table (pc)\n    an inner block.  */\n \n void *\n-__find_first_exception_table_match(pc)\n-void *pc;\n+__find_first_exception_table_match (pc)\n+     void *pc;\n {\n   exception_table *table = find_exception_table (pc);\n   int pos = 0;\n   int best = 0;\n   if (table == 0)\n     return (void *) 0;\n #if 0\n-  printf (\"find_first_exception_table_match(): pc = %x!\\n\", pc);\n+  printf (\"find_first_exception_table_match (): pc = %x!\\n\", pc);\n #endif\n \n-  except_pc = pc;\n-\n #if 0\n   /* We can't do this yet, as we don't know that the table is sorted.  */\n   do {\n     ++pos;\n-    if (table[pos].start > except_pc)\n-      /* found the first table[pos].start > except_pc, so the previous\n+    if (table[pos].start > pc)\n+      /* found the first table[pos].start > pc, so the previous\n \t entry better be the one we want! */\n       break;\n   } while (table[pos].exception_handler != (void *) -1);\n \n   --pos;\n-  if (table[pos].start <= except_pc && table[pos].end > except_pc)\n+  if (table[pos].start <= pc && table[pos].end > pc)\n     {\n-      except_table_pos = pos;\n #if 0\n-      printf (\"find_first_eh_table_match(): found match: %x\\n\", table[pos].exception_handler);\n+      printf (\"find_first_eh_table_match (): found match: %x\\n\", table[pos].exception_handler);\n #endif\n       return table[pos].exception_handler;\n     }\n #else\n   while (table[++pos].exception_handler != (void *) -1) {\n-    if (table[pos].start <= except_pc && table[pos].end > except_pc)\n+    if (table[pos].start <= pc && table[pos].end > pc)\n       {\n \t/* This can apply.  Make sure it is better or as good as the previous\n \t   best.  */\n@@ -3135,7 +3130,7 @@ void *pc;\n #endif\n \n #if 0\n-  printf (\"find_first_eh_table_match(): else: returning NULL!\\n\");\n+  printf (\"find_first_eh_table_match (): else: returning NULL!\\n\");\n #endif\n   return (void *) 0;\n }"}]}