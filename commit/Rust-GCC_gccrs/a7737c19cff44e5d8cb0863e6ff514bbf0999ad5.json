{"sha": "a7737c19cff44e5d8cb0863e6ff514bbf0999ad5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTc3MzdjMTljZmY0NGU1ZDhjYjA4NjNlNmZmNTE0YmJmMDk5OWFkNQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-29T13:32:08Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-29T13:32:08Z"}, "message": "[multiple changes]\n\n2014-07-29  Jerome Lambourg  <lambourg@adacore.com>\n\n\t* expect.c (__gnat_expect_poll): New parameter dead_process\n\tused to return the dead process among the array of file\n\tdescriptors. The Windows, VMS and HPUX implementations now\n\tproperly report the dead process via this parameter. Other unixes\n\tdon't need it.\n\t* g-expect.adb (Poll): Adapt to the C profile.\n\t(Expect_Internal): Use the new parameter to properly close the\n\tFile Descriptor.  This then can be properly reported by the\n\tfunction First_Dead_Process as is expected.\n\n2014-07-29  Robert Dewar  <dewar@adacore.com>\n\n\t* gnat_ugn.texi: Minor clarification of -gnatQ switch.\n\nFrom-SVN: r213177", "tree": {"sha": "1b9801dad6fcea89c40c836bedfbaeb1048fb1d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1b9801dad6fcea89c40c836bedfbaeb1048fb1d5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a7737c19cff44e5d8cb0863e6ff514bbf0999ad5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7737c19cff44e5d8cb0863e6ff514bbf0999ad5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7737c19cff44e5d8cb0863e6ff514bbf0999ad5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7737c19cff44e5d8cb0863e6ff514bbf0999ad5/comments", "author": null, "committer": null, "parents": [{"sha": "ab01e614837a76c828d7168bd34570beb69d7afc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab01e614837a76c828d7168bd34570beb69d7afc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab01e614837a76c828d7168bd34570beb69d7afc"}], "stats": {"total": 92, "additions": 74, "deletions": 18}, "files": [{"sha": "08877c33943168a1ed6c1d8f5181cb41fae8708f", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7737c19cff44e5d8cb0863e6ff514bbf0999ad5/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7737c19cff44e5d8cb0863e6ff514bbf0999ad5/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=a7737c19cff44e5d8cb0863e6ff514bbf0999ad5", "patch": "@@ -1,3 +1,19 @@\n+2014-07-29  Jerome Lambourg  <lambourg@adacore.com>\n+\n+\t* expect.c (__gnat_expect_poll): New parameter dead_process\n+\tused to return the dead process among the array of file\n+\tdescriptors. The Windows, VMS and HPUX implementations now\n+\tproperly report the dead process via this parameter. Other unixes\n+\tdon't need it.\n+\t* g-expect.adb (Poll): Adapt to the C profile.\n+\t(Expect_Internal): Use the new parameter to properly close the\n+\tFile Descriptor.  This then can be properly reported by the\n+\tfunction First_Dead_Process as is expected.\n+\n+2014-07-29  Robert Dewar  <dewar@adacore.com>\n+\n+\t* gnat_ugn.texi: Minor clarification of -gnatQ switch.\n+\n 2014-07-29  Robert Dewar  <dewar@adacore.com>\n \n \t* einfo.adb (Derived_Type_Link): New function"}, {"sha": "ce03224e9cf93314a83d413417f742d919b51109", "filename": "gcc/ada/expect.c", "status": "modified", "additions": 29, "deletions": 6, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7737c19cff44e5d8cb0863e6ff514bbf0999ad5/gcc%2Fada%2Fexpect.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7737c19cff44e5d8cb0863e6ff514bbf0999ad5/gcc%2Fada%2Fexpect.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexpect.c?ref=a7737c19cff44e5d8cb0863e6ff514bbf0999ad5", "patch": "@@ -148,14 +148,20 @@ __gnat_pipe (int *fd)\n }\n \n int\n-__gnat_expect_poll (int *fd, int num_fd, int timeout, int *is_set)\n+__gnat_expect_poll (int *fd,\n+                    int num_fd,\n+                    int timeout,\n+                    int *dead_process,\n+                    int *is_set)\n {\n #define MAX_DELAY 100\n \n   int i, delay, infinite = 0;\n   DWORD avail;\n   HANDLE handles[num_fd];\n \n+  *dead_process = 0;\n+\n   for (i = 0; i < num_fd; i++)\n     is_set[i] = 0;\n \n@@ -174,6 +180,7 @@ __gnat_expect_poll (int *fd, int num_fd, int timeout, int *is_set)\n       for (i = 0; i < num_fd; i++)\n         {\n           if (!PeekNamedPipe (handles [i], NULL, 0, NULL, &avail, NULL))\n+            *dead_process = i + 1;\n             return -1;\n \n           if (avail > 0)\n@@ -245,7 +252,11 @@ __gnat_expect_portable_execvp (int *pid, char *cmd, char *argv[])\n }\n \n int\n-__gnat_expect_poll (int *fd, int num_fd, int timeout, int *is_set)\n+__gnat_expect_poll (int *fd,\n+                    int num_fd,\n+                    int timeout,\n+                    int *dead_process,\n+                    int *is_set)\n {\n   int i, num, ready = 0;\n   unsigned int status;\n@@ -258,6 +269,8 @@ __gnat_expect_poll (int *fd, int num_fd, int timeout, int *is_set)\n   } iosb;\n   char buf [256];\n \n+  *dead_process = 0;\n+\n   for (i = 0; i < num_fd; i++)\n     is_set[i] = 0;\n \n@@ -280,6 +293,7 @@ __gnat_expect_poll (int *fd, int num_fd, int timeout, int *is_set)\n \t  if ((status & 1) != 1)\n \t    {\n \t      ready = -1;\n+              dead_process = i + 1;\n \t      return ready;\n \t    }\n \t}\n@@ -395,7 +409,11 @@ __gnat_expect_portable_execvp (int *pid, char *cmd, char *argv[])\n }\n \n int\n-__gnat_expect_poll (int *fd, int num_fd, int timeout, int *is_set)\n+__gnat_expect_poll (int *fd,\n+                    int num_fd,\n+                    int timeout,\n+                    int *dead_process,\n+                    int *is_set)\n {\n   struct timeval tv;\n   SELECT_MASK rset;\n@@ -406,6 +424,8 @@ __gnat_expect_poll (int *fd, int num_fd, int timeout, int *is_set)\n   int i;\n   int received;\n \n+  *dead_process = 0;\n+\n   tv.tv_sec  = timeout / 1000;\n   tv.tv_usec = (timeout % 1000) * 1000;\n \n@@ -458,6 +478,7 @@ __gnat_expect_poll (int *fd, int num_fd, int timeout, int *is_set)\n \t            if (ei.request == TIOCCLOSE)\n \t\t      {\n \t\t        ioctl (fd[i], TIOCREQSET, &ei);\n+                        dead_process = i + 1;\n \t\t        return -1;\n \t\t      }\n \n@@ -510,10 +531,12 @@ __gnat_expect_portable_execvp (int *pid ATTRIBUTE_UNUSED,\n \n int\n __gnat_expect_poll (int *fd ATTRIBUTE_UNUSED,\n-\t\t    int num_fd ATTRIBUTE_UNUSED,\n-\t\t    int timeout ATTRIBUTE_UNUSED,\n-\t\t    int *is_set ATTRIBUTE_UNUSED)\n+                    int num_fd ATTRIBUTE_UNUSED,\n+                    int timeout ATTRIBUTE_UNUSED,\n+                    int *dead_process ATTRIBUTE_UNUSED,\n+                    int *is_set ATTRIBUTE_UNUSED)\n {\n+  *dead_process = 0;\n   return -1;\n }\n #endif"}, {"sha": "94f80e92263dbf4ebbc6360a25b4beef345fd504", "filename": "gcc/ada/g-expect.adb", "status": "modified", "additions": 27, "deletions": 12, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7737c19cff44e5d8cb0863e6ff514bbf0999ad5/gcc%2Fada%2Fg-expect.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7737c19cff44e5d8cb0863e6ff514bbf0999ad5/gcc%2Fada%2Fg-expect.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-expect.adb?ref=a7737c19cff44e5d8cb0863e6ff514bbf0999ad5", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                     Copyright (C) 2000-2012, AdaCore                     --\n+--                     Copyright (C) 2000-2014, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -104,17 +104,22 @@ package body GNAT.Expect is\n    pragma Import (C, Create_Pipe, \"__gnat_pipe\");\n \n    function Poll\n-     (Fds     : System.Address;\n-      Num_Fds : Integer;\n-      Timeout : Integer;\n-      Is_Set  : System.Address) return Integer;\n+     (Fds          : System.Address;\n+      Num_Fds      : Integer;\n+      Timeout      : Integer;\n+      Dead_Process : access Integer;\n+      Is_Set       : System.Address) return Integer;\n    pragma Import (C, Poll, \"__gnat_expect_poll\");\n-   --  Check whether there is any data waiting on the file descriptor\n-   --  Out_fd, and wait if there is none, at most Timeout milliseconds\n+   --  Check whether there is any data waiting on the file descriptors\n+   --  Fds, and wait if there is none, at most Timeout milliseconds\n    --  Returns -1 in case of error, 0 if the timeout expired before\n    --  data became available.\n    --\n-   --  Out_Is_Set is set to 1 if data was available, 0 otherwise.\n+   --  Is_Set is an array of the same size as FDs and elements are set to 1 if\n+   --  data is available for the corresponding File Descriptor, 0 otherwise.\n+   --\n+   --  If a process dies, then Dead_Process is set to the index of the\n+   --  corresponding file descriptor.\n \n    function Waitpid (Pid : Process_Id) return Integer;\n    pragma Import (C, Waitpid, \"__gnat_waitpid\");\n@@ -632,22 +637,28 @@ package body GNAT.Expect is\n          --  Buffer used for input. This is allocated only once, not for\n          --  every iteration of the loop\n \n-         D : Integer;\n+         D : aliased Integer;\n          --  Index in Descriptors\n \n       begin\n          --  Loop until we match or we have a timeout\n \n          loop\n             Num_Descriptors :=\n-              Poll (Fds'Address, Fds_Count, Timeout, Is_Set'Address);\n+              Poll (Fds'Address, Fds_Count, Timeout, D'Access, Is_Set'Address);\n \n             case Num_Descriptors is\n \n                --  Error?\n \n                when -1 =>\n                   Result := Expect_Internal_Error;\n+\n+                  if D /= 0 then\n+                     Close (Descriptors (D).Input_Fd);\n+                     Descriptors (D).Input_Fd := Invalid_FD;\n+                  end if;\n+\n                   return;\n \n                --  Timeout?\n@@ -813,7 +824,7 @@ package body GNAT.Expect is\n    is\n       Buffer_Size     : constant Integer := 8192;\n       Num_Descriptors : Integer;\n-      N               : Integer;\n+      N               : aliased Integer;\n       Is_Set          : aliased Integer;\n       Buffer          : aliased String (1 .. Buffer_Size);\n \n@@ -827,7 +838,11 @@ package body GNAT.Expect is\n \n       loop\n          Num_Descriptors :=\n-           Poll (Descriptor.Output_Fd'Address, 1, Timeout, Is_Set'Address);\n+           Poll (Descriptor.Output_Fd'Address,\n+                 1,\n+                 Timeout,\n+                 N'Access,\n+                 Is_Set'Address);\n \n          case Num_Descriptors is\n "}, {"sha": "e6cc74da608c4116ea99ef533a6cf04eff190b1d", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7737c19cff44e5d8cb0863e6ff514bbf0999ad5/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7737c19cff44e5d8cb0863e6ff514bbf0999ad5/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=a7737c19cff44e5d8cb0863e6ff514bbf0999ad5", "patch": "@@ -4260,6 +4260,8 @@ Don't quit. Try semantics, even if parse errors.\n @item -gnatQ\n @cindex @option{-gnatQ} (@command{gcc})\n Don't quit. Generate @file{ALI} and tree files even if illegalities.\n+Note that code generation is still suppressed in the presence of any\n+errors, so even with @option{-gnatQ} no object file is generated.\n \n @item -gnatr\n @cindex @option{-gnatr} (@command{gcc})"}]}