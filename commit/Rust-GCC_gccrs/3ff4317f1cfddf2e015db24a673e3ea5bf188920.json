{"sha": "3ff4317f1cfddf2e015db24a673e3ea5bf188920", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2ZmNDMxN2YxY2ZkZGYyZTAxNWRiMjRhNjczZTNlYTViZjE4ODkyMA==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2013-10-25T19:25:06Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2013-10-25T19:25:06Z"}, "message": "formatter.h (__check_singular): Add const on iterator reference.\n\n2013-10-25  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n\n\t* include/debug/formatter.h (__check_singular): Add const on\n\titerator reference.\n\t* include/debug/functions.h (__check_singular): Likewise.\n\t(__check_singular(const _Safe_iterator<_Ite, _Seq>&)): Delete.\n\t(__check_dereferenceable(const _Ite&)): Add const on iterator\n\treference.\n\t(__check_dereferenceable(const _Safe_local_iterator<>&)): New.\n\t* include/debug/safe_iterator.h (__check_singular_aux): Review\n\tcomment.\n\t* testsuite/23_containers/vector/debug/debug_functions.cc: New.\n\t* testsuite/23_containers/unordered_set/debug/debug_functions.cc:\n\tNew.\n\nFrom-SVN: r204075", "tree": {"sha": "0212c21d62f4588f1e1f1669029c64397a6f945a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0212c21d62f4588f1e1f1669029c64397a6f945a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3ff4317f1cfddf2e015db24a673e3ea5bf188920", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ff4317f1cfddf2e015db24a673e3ea5bf188920", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ff4317f1cfddf2e015db24a673e3ea5bf188920", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ff4317f1cfddf2e015db24a673e3ea5bf188920/comments", "author": null, "committer": null, "parents": [{"sha": "f5d368b68df96fcc63af4b73abfcf666b1a8b9a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5d368b68df96fcc63af4b73abfcf666b1a8b9a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5d368b68df96fcc63af4b73abfcf666b1a8b9a4"}], "stats": {"total": 213, "additions": 199, "deletions": 14}, "files": [{"sha": "3149f380038058211e0c5db7e02553145422f8a4", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff4317f1cfddf2e015db24a673e3ea5bf188920/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff4317f1cfddf2e015db24a673e3ea5bf188920/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=3ff4317f1cfddf2e015db24a673e3ea5bf188920", "patch": "@@ -1,3 +1,18 @@\n+2013-10-25  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\t* include/debug/formatter.h (__check_singular): Add const on\n+\titerator reference.\n+\t* include/debug/functions.h (__check_singular): Likewise.\n+\t(__check_singular(const _Safe_iterator<_Ite, _Seq>&)): Delete.\n+\t(__check_dereferenceable(const _Ite&)): Add const on iterator\n+\treference.\n+\t(__check_dereferenceable(const _Safe_local_iterator<>&)): New.\n+\t* include/debug/safe_iterator.h (__check_singular_aux): Review\n+\tcomment.\n+\t* testsuite/23_containers/vector/debug/debug_functions.cc: New.\n+\t* testsuite/23_containers/unordered_set/debug/debug_functions.cc:\n+\tNew.\n+\n 2013-10-23  Chris Jefferson  <chris@bubblescope.net>\n \t    Paolo Carlini  <paolo.carlini@oracle.com>\n "}, {"sha": "2af169b13fc43963786d0900410d7d93510f02c1", "filename": "libstdc++-v3/include/debug/formatter.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff4317f1cfddf2e015db24a673e3ea5bf188920/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fformatter.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff4317f1cfddf2e015db24a673e3ea5bf188920/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fformatter.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fformatter.h?ref=3ff4317f1cfddf2e015db24a673e3ea5bf188920", "patch": "@@ -38,7 +38,7 @@ namespace __gnu_debug\n   using std::type_info;\n \n   template<typename _Iterator>\n-    bool __check_singular(_Iterator&);\n+    bool __check_singular(const _Iterator&);\n \n   class _Safe_sequence_base;\n "}, {"sha": "4d8fe21719ca6773c333bf951c80f4c0825310fe", "filename": "libstdc++-v3/include/debug/functions.h", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff4317f1cfddf2e015db24a673e3ea5bf188920/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Ffunctions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff4317f1cfddf2e015db24a673e3ea5bf188920/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Ffunctions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Ffunctions.h?ref=3ff4317f1cfddf2e015db24a673e3ea5bf188920", "patch": "@@ -45,6 +45,9 @@ namespace __gnu_debug\n   template<typename _Iterator, typename _Sequence>\n     class _Safe_iterator;\n \n+  template<typename _Iterator, typename _Sequence>\n+    class _Safe_local_iterator;\n+\n   template<typename _Sequence>\n     struct _Insert_range_from_self_is_safe\n     { enum { __value = 0 }; };\n@@ -57,7 +60,7 @@ namespace __gnu_debug\n   // a _Safe_iterator.\n   template<typename _Iterator>\n     inline bool\n-    __check_singular(_Iterator& __x)\n+    __check_singular(const _Iterator& __x)\n     { return __check_singular_aux(&__x); }\n \n   /** Non-NULL pointers are nonsingular. */\n@@ -66,17 +69,11 @@ namespace __gnu_debug\n     __check_singular(const _Tp* __ptr)\n     { return __ptr == 0; }\n \n-  /** Safe iterators know if they are singular. */\n-  template<typename _Iterator, typename _Sequence>\n-    inline bool\n-    __check_singular(const _Safe_iterator<_Iterator, _Sequence>& __x)\n-    { return __x._M_singular(); }\n-\n   /** Assume that some arbitrary iterator is dereferenceable, because we\n       can't prove that it isn't. */\n   template<typename _Iterator>\n     inline bool\n-    __check_dereferenceable(_Iterator&)\n+    __check_dereferenceable(const _Iterator&)\n     { return true; }\n \n   /** Non-NULL pointers are dereferenceable. */\n@@ -85,12 +82,19 @@ namespace __gnu_debug\n     __check_dereferenceable(const _Tp* __ptr)\n     { return __ptr; }\n \n-  /** Safe iterators know if they are singular. */\n+  /** Safe iterators know if they are dereferenceable. */\n   template<typename _Iterator, typename _Sequence>\n     inline bool\n     __check_dereferenceable(const _Safe_iterator<_Iterator, _Sequence>& __x)\n     { return __x._M_dereferenceable(); }\n \n+  /** Safe local iterators know if they are dereferenceable. */\n+  template<typename _Iterator, typename _Sequence>\n+    inline bool\n+    __check_dereferenceable(const _Safe_local_iterator<_Iterator,\n+\t\t\t\t\t\t       _Sequence>& __x)\n+    { return __x._M_dereferenceable(); }\n+\n   /** If the distance between two random access iterators is\n    *  nonnegative, assume the range is valid.\n   */"}, {"sha": "9e73bcfd98583d5b5f88809612536ca184fda273", "filename": "libstdc++-v3/include/debug/safe_iterator.h", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff4317f1cfddf2e015db24a673e3ea5bf188920/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff4317f1cfddf2e015db24a673e3ea5bf188920/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.h?ref=3ff4317f1cfddf2e015db24a673e3ea5bf188920", "patch": "@@ -56,10 +56,9 @@ namespace __gnu_debug\n       { return __it == __seq->_M_base().begin(); }\n     };\n \n-  /** Iterators that derive from _Safe_iterator_base but that aren't\n-   *  _Safe_iterators can be determined singular or non-singular via\n-   *  _Safe_iterator_base.\n-   */\n+  /** Iterators that derive from _Safe_iterator_base can be determined singular\n+   *  or non-singular.\n+   **/\n   inline bool \n   __check_singular_aux(const _Safe_iterator_base* __x)\n   { return __x->_M_singular(); }"}, {"sha": "b90249f2d704654d05a38467b6a28d37e9ab8566", "filename": "libstdc++-v3/testsuite/23_containers/unordered_set/debug/debug_functions.cc", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff4317f1cfddf2e015db24a673e3ea5bf188920/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Fdebug%2Fdebug_functions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff4317f1cfddf2e015db24a673e3ea5bf188920/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Fdebug%2Fdebug_functions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Fdebug%2Fdebug_functions.cc?ref=3ff4317f1cfddf2e015db24a673e3ea5bf188920", "patch": "@@ -0,0 +1,92 @@\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+//\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-require-debug-mode \"\" }\n+\n+#include <unordered_set>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using namespace __gnu_debug;\n+\n+  std::unordered_set<int> u = { 0, 1, 2 };\n+  VERIFY( __check_dereferenceable(u.begin()) );\n+  auto it = u.begin();\n+  VERIFY( __check_dereferenceable(it) );\n+\n+  VERIFY( __check_dereferenceable(u.cbegin()) );\n+  auto cit = u.begin();\n+  VERIFY( __check_dereferenceable(cit) );\n+\n+  VERIFY( !__check_dereferenceable(u.end()) );\n+  it = u.end();\n+  VERIFY( !__check_dereferenceable(it) );\n+\n+  auto bucket = u.bucket(0);\n+  VERIFY( __check_dereferenceable(u.begin(bucket)) );\n+  auto lit = u.begin(bucket);\n+  VERIFY( __check_dereferenceable(lit) );\n+\n+  VERIFY( !__check_dereferenceable(u.end(bucket)) );\n+}\n+\n+void test02()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using namespace __gnu_debug;\n+\n+  std::unordered_set<int> u = { 0, 1, 2 };\n+\n+  VERIFY( !__check_singular(u.end()) );\n+  auto it = u.end();\n+  VERIFY( !__check_singular(it) );\n+\n+  VERIFY( !__check_singular(u.begin()) );\n+  it = u.begin();\n+  VERIFY( !__check_singular(it) );\n+\n+  u.clear();\n+\n+  VERIFY( it._M_singular() );\n+  VERIFY( __check_singular(it) );\n+\n+  it = u.end();\n+  VERIFY( !it._M_singular() );\n+  VERIFY( !__check_singular(it) );\n+\n+  u = { 0, 1, 2 };\n+\n+  auto bucket = u.bucket(0);\n+  VERIFY( !__check_singular(u.begin(bucket)) );\n+  auto lit = u.begin(bucket);\n+  VERIFY( !__check_singular(lit) );\n+\n+  VERIFY( !__check_singular(u.end(bucket)) );\n+\n+  u.clear();\n+  VERIFY( __check_singular(lit) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+  return 0;\n+}"}, {"sha": "5568ed65cf2f94108e2f21fbe8831fd9bea76af4", "filename": "libstdc++-v3/testsuite/23_containers/vector/debug/debug_functions.cc", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff4317f1cfddf2e015db24a673e3ea5bf188920/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fdebug%2Fdebug_functions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff4317f1cfddf2e015db24a673e3ea5bf188920/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fdebug%2Fdebug_functions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fdebug%2Fdebug_functions.cc?ref=3ff4317f1cfddf2e015db24a673e3ea5bf188920", "patch": "@@ -0,0 +1,75 @@\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+//\n+// { dg-require-debug-mode \"\" }\n+\n+#include <vector>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using namespace __gnu_debug;\n+\n+  std::vector<int> v1(3, 1);\n+  VERIFY( __check_dereferenceable(v1.begin()) );\n+  std::vector<int>::iterator it = v1.begin();\n+  VERIFY( __check_dereferenceable(it) );\n+\n+  VERIFY( !__check_dereferenceable(v1.end()) );\n+  it = v1.end();\n+  VERIFY( !__check_dereferenceable(it) );\n+\n+  const volatile int* pi = 0;\n+  VERIFY( !__check_dereferenceable(pi) );\n+\n+  int i;\n+  pi = &i;\n+\n+  VERIFY( __check_dereferenceable(pi) );\n+}\n+\n+void test02()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using namespace __gnu_debug;\n+\n+  std::vector<int> v1(3, 1);\n+  VERIFY( !__check_singular(v1.begin()) );\n+  std::vector<int>::iterator it = v1.begin();\n+  VERIFY( !__check_singular(it) );\n+\n+  VERIFY( !__check_singular(v1.end()) );\n+  it = v1.end();\n+  VERIFY( !__check_singular(it) );\n+\n+  v1.clear();\n+\n+  VERIFY( it._M_singular() );\n+  VERIFY( __check_singular(it) );\n+\n+  it = v1.end();\n+  VERIFY( !it._M_singular() );\n+  VERIFY( !__check_singular(it) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+  return 0;\n+}"}]}