{"sha": "e978955dd720d5cc0e5141a1e9bbbbb943a3cc41", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTk3ODk1NWRkNzIwZDVjYzBlNTE0MWExZTliYmJiYjk0M2EzY2M0MQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-01-30T17:35:46Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-01-31T00:00:41Z"}, "message": "analyzer: fix ICE in __builtin_isnan (PR 93356)\n\nPR analyzer/93356 reports an ICE handling __builtin_isnan due to a\nfailing assertion:\n  674     gcc_assert (lhs_ec_id != rhs_ec_id);\nwith op=UNORDERED_EXPR.\nwhen attempting to add an UNORDERED_EXPR constraint.\n\nThis is an overzealous assertion, but underlying it are various forms of\nsloppiness regarding NaN within the analyzer:\n\n  (a) the assumption in the constraint_manager that equivalence classes\n  are reflexive (X == X), which isn't the case for NaN.\n\n  (b) Hardcoding the \"honor_nans\" param to false when calling\n  invert_tree_comparison throughout the analyzer.\n\n  (c) Ignoring ORDERED_EXPR, UNORDERED_EXPR, and the UN-prefixed\n  comparison codes.\n\nI wrote a patch for this which tracks the NaN-ness of floating-point\nvalues and uses this to address all of the above.\n\nHowever, to minimize changes in gcc 10 stage 4, here's a simpler patch\nwhich rejects attempts to query or add constraints on floating-point\nvalues, instead treating any floating-point comparison as \"unknown\", and\nsilently dropping the constraints at edges.\n\ngcc/analyzer/ChangeLog:\n\tPR analyzer/93356\n\t* region-model.cc (region_model::eval_condition): In both\n\toverloads, bail out immediately on floating-point types.\n\t(region_model::eval_condition_without_cm): Likewise.\n\t(region_model::add_constraint): Likewise.\n\ngcc/testsuite/ChangeLog:\n\tPR analyzer/93356\n\t* gcc.dg/analyzer/conditionals-notrans.c (test_float_selfcmp):\n\tAdd.\n\t* gcc.dg/analyzer/conditionals-trans.c: Mark floating point\n\tcomparison test as failing.\n\t(test_float_selfcmp): Add.\n\t* gcc.dg/analyzer/data-model-1.c: Mark floating point comparison\n\ttests as failing.\n\t* gcc.dg/analyzer/torture/pr93356.c: New test.\n\ngcc/ChangeLog:\n\tPR analyzer/93356\n\t* doc/analyzer.texi (Limitations): Note that constraints on\n\tfloating-point values are currently ignored.", "tree": {"sha": "54cc29a0b7b7bbe52bd7dd7b9f81cf575aae9053", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/54cc29a0b7b7bbe52bd7dd7b9f81cf575aae9053"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e978955dd720d5cc0e5141a1e9bbbbb943a3cc41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e978955dd720d5cc0e5141a1e9bbbbb943a3cc41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e978955dd720d5cc0e5141a1e9bbbbb943a3cc41", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e978955dd720d5cc0e5141a1e9bbbbb943a3cc41/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9eb0973edb2b4eed4cdbba7105b8af7afe5b547", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9eb0973edb2b4eed4cdbba7105b8af7afe5b547", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9eb0973edb2b4eed4cdbba7105b8af7afe5b547"}], "stats": {"total": 85, "additions": 80, "deletions": 5}, "files": [{"sha": "4e312cb8c3be55b088cc768042e389dc990f66f6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e978955dd720d5cc0e5141a1e9bbbbb943a3cc41/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e978955dd720d5cc0e5141a1e9bbbbb943a3cc41/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e978955dd720d5cc0e5141a1e9bbbbb943a3cc41", "patch": "@@ -1,3 +1,9 @@\n+2020-01-30  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/93356\n+\t* doc/analyzer.texi (Limitations): Note that constraints on\n+\tfloating-point values are currently ignored.\n+\n 2020-01-30  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR lto/93384"}, {"sha": "1c981e4266b66212ac945c9c49c7617d134f535f", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e978955dd720d5cc0e5141a1e9bbbbb943a3cc41/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e978955dd720d5cc0e5141a1e9bbbbb943a3cc41/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=e978955dd720d5cc0e5141a1e9bbbbb943a3cc41", "patch": "@@ -1,3 +1,11 @@\n+2020-01-30  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/93356\n+\t* region-model.cc (region_model::eval_condition): In both\n+\toverloads, bail out immediately on floating-point types.\n+\t(region_model::eval_condition_without_cm): Likewise.\n+\t(region_model::add_constraint): Likewise.\n+\n 2020-01-30  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/93450"}, {"sha": "a15088a2e3cfe417347fceed5e3bea0bdbc3634b", "filename": "gcc/analyzer/region-model.cc", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e978955dd720d5cc0e5141a1e9bbbbb943a3cc41/gcc%2Fanalyzer%2Fregion-model.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e978955dd720d5cc0e5141a1e9bbbbb943a3cc41/gcc%2Fanalyzer%2Fregion-model.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.cc?ref=e978955dd720d5cc0e5141a1e9bbbbb943a3cc41", "patch": "@@ -5144,6 +5144,15 @@ region_model::eval_condition (svalue_id lhs_sid,\n \t\t\t      enum tree_code op,\n \t\t\t      svalue_id rhs_sid) const\n {\n+  svalue *lhs = get_svalue (lhs_sid);\n+  svalue *rhs = get_svalue (rhs_sid);\n+\n+  /* For now, make no attempt to capture constraints on floating-point\n+     values.  */\n+  if ((lhs->get_type () && FLOAT_TYPE_P (lhs->get_type ()))\n+      || (rhs->get_type () && FLOAT_TYPE_P (rhs->get_type ())))\n+    return tristate::unknown ();\n+\n   tristate ts = eval_condition_without_cm (lhs_sid, op, rhs_sid);\n \n   if (ts.is_known ())\n@@ -5173,6 +5182,12 @@ region_model::eval_condition_without_cm (svalue_id lhs_sid,\n   /* See what we know based on the values.  */\n   if (lhs && rhs)\n     {\n+      /* For now, make no attempt to capture constraints on floating-point\n+\t values.  */\n+      if ((lhs->get_type () && FLOAT_TYPE_P (lhs->get_type ()))\n+\t  || (rhs->get_type () && FLOAT_TYPE_P (rhs->get_type ())))\n+\treturn tristate::unknown ();\n+\n       if (lhs == rhs)\n \t{\n \t  /* If we have the same svalue, then we have equality\n@@ -5252,6 +5267,11 @@ bool\n region_model::add_constraint (tree lhs, enum tree_code op, tree rhs,\n \t\t\t      region_model_context *ctxt)\n {\n+  /* For now, make no attempt to capture constraints on floating-point\n+     values.  */\n+  if (FLOAT_TYPE_P (TREE_TYPE (lhs)) || FLOAT_TYPE_P (TREE_TYPE (rhs)))\n+    return true;\n+\n   svalue_id lhs_sid = get_rvalue (lhs, ctxt);\n   svalue_id rhs_sid = get_rvalue (rhs, ctxt);\n \n@@ -5385,6 +5405,11 @@ region_model::eval_condition (tree lhs,\n \t\t\t      tree rhs,\n \t\t\t      region_model_context *ctxt)\n {\n+  /* For now, make no attempt to model constraints on floating-point\n+     values.  */\n+  if (FLOAT_TYPE_P (TREE_TYPE (lhs)) || FLOAT_TYPE_P (TREE_TYPE (rhs)))\n+    return tristate::unknown ();\n+\n   return eval_condition (get_rvalue (lhs, ctxt), op, get_rvalue (rhs, ctxt));\n }\n "}, {"sha": "1fe4bcefd1bc8a4afa6fde9591ff3e8ff23a1453", "filename": "gcc/doc/analyzer.texi", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e978955dd720d5cc0e5141a1e9bbbbb943a3cc41/gcc%2Fdoc%2Fanalyzer.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e978955dd720d5cc0e5141a1e9bbbbb943a3cc41/gcc%2Fdoc%2Fanalyzer.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fanalyzer.texi?ref=e978955dd720d5cc0e5141a1e9bbbbb943a3cc41", "patch": "@@ -390,6 +390,8 @@ Lack of function pointer analysis\n @item\n The constraint-handling code assumes reflexivity in some places\n (that values are equal to themselves), which is not the case for NaN.\n+As a simple workaround, constraints on floating-point values are\n+currently ignored.\n @item\n The region model code creates lots of little mutable objects at each\n @code{region_model} (and thus per @code{exploded_node}) rather than"}, {"sha": "621d4283ae3c15f1ece6519bcd52ae571bc93dfb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e978955dd720d5cc0e5141a1e9bbbbb943a3cc41/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e978955dd720d5cc0e5141a1e9bbbbb943a3cc41/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e978955dd720d5cc0e5141a1e9bbbbb943a3cc41", "patch": "@@ -1,4 +1,16 @@\n-2020-01-30  Jeff Law  <law@redhat.com\n+2020-01-30  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/93356\n+\t* gcc.dg/analyzer/conditionals-notrans.c (test_float_selfcmp):\n+\tAdd.\n+\t* gcc.dg/analyzer/conditionals-trans.c: Mark floating point\n+\tcomparison test as failing.\n+\t(test_float_selfcmp): Add.\n+\t* gcc.dg/analyzer/data-model-1.c: Mark floating point comparison\n+\ttests as failing.\n+\t* gcc.dg/analyzer/torture/pr93356.c: New test.\n+\n+2020-01-30  Jeff Law  <law@redhat.com>\n \n \tPR c/88660\n \t* gcc.dg/pr88660.c: New test"}, {"sha": "a00127b1a7f54e48f7b2b43b8997af482ac3f915", "filename": "gcc/testsuite/gcc.dg/analyzer/conditionals-notrans.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e978955dd720d5cc0e5141a1e9bbbbb943a3cc41/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fconditionals-notrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e978955dd720d5cc0e5141a1e9bbbbb943a3cc41/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fconditionals-notrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fconditionals-notrans.c?ref=e978955dd720d5cc0e5141a1e9bbbbb943a3cc41", "patch": "@@ -157,3 +157,9 @@ void test_range_float_ge_le (float f)\n       __analyzer_eval (f == 4); /* { dg-warning \"TRUE\" \"desired\" { xfail *-*-* } } */\n       /* { dg-bogus \"UNKNOWN\" \"status quo\" { xfail *-*-* } .-1 } */\n }\n+\n+void test_float_selfcmp (float f)\n+{\n+  __analyzer_eval (f == f); /* { dg-warning \"UNKNOWN\" } */\n+  __analyzer_eval (f != f); /* { dg-warning \"UNKNOWN\" } */\n+}"}, {"sha": "f032789e6c4ab8f3000a1611d4892b12bae1dc9a", "filename": "gcc/testsuite/gcc.dg/analyzer/conditionals-trans.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e978955dd720d5cc0e5141a1e9bbbbb943a3cc41/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fconditionals-trans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e978955dd720d5cc0e5141a1e9bbbbb943a3cc41/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fconditionals-trans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fconditionals-trans.c?ref=e978955dd720d5cc0e5141a1e9bbbbb943a3cc41", "patch": "@@ -140,5 +140,12 @@ void test_range_float_ge_le (float f)\n {\n   if (f >= 4)\n     if (f <= 4)\n-      __analyzer_eval (f == 4); /* { dg-warning \"TRUE\" } */\n+      __analyzer_eval (f == 4); /* { dg-warning \"TRUE\" \"PR 93356\" { xfail *-*-* } } */\n+  /* { dg-warning \"UNKNOWN\" \"disabled float comparisons\" { target *-*-* } .-1 } */\n+}\n+\n+void test_float_selfcmp (float f)\n+{\n+  __analyzer_eval (f == f); /* { dg-warning \"UNKNOWN\" } */\n+  __analyzer_eval (f != f); /* { dg-warning \"UNKNOWN\" } */\n }"}, {"sha": "3f925941f8743be35c5d5d7a6d2a53bab66a1ddd", "filename": "gcc/testsuite/gcc.dg/analyzer/data-model-1.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e978955dd720d5cc0e5141a1e9bbbbb943a3cc41/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fdata-model-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e978955dd720d5cc0e5141a1e9bbbbb943a3cc41/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fdata-model-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fdata-model-1.c?ref=e978955dd720d5cc0e5141a1e9bbbbb943a3cc41", "patch": "@@ -209,14 +209,16 @@ void test_13 (struct outer *o)\n {\n   __analyzer_eval (o->mid.in.f == 0.f); /* { dg-warning \"UNKNOWN\" } */\n   o->mid.in.f = 0.f;\n-  __analyzer_eval (o->mid.in.f == 0.f); /* { dg-warning \"TRUE\" } */\n+  __analyzer_eval (o->mid.in.f == 0.f); /* { dg-warning \"TRUE\" \"PR 93356\" { xfail *-*-* } } */\n+  /* { dg-warning \"UNKNOWN\" \"disabled float comparisons\" { target *-*-* } .-1 } */\n }\n \n void test_14 (struct outer o)\n {\n   __analyzer_eval (o.mid.in.f == 0.f); /* { dg-warning \"UNKNOWN\" } */\n   o.mid.in.f = 0.f;\n-  __analyzer_eval (o.mid.in.f == 0.f); /* { dg-warning \"TRUE\" } */\n+  __analyzer_eval (o.mid.in.f == 0.f); /* { dg-warning \"TRUE\" \"PR 93356\" { xfail *-*-* } } */\n+  /* { dg-warning \"UNKNOWN\" \"disabled float comparisons\" { target *-*-* } .-1 } */\n }\n \n void test_15 (const char *str)\n@@ -947,7 +949,8 @@ void test_42 (void)\n   float f;\n   i = 42;\n   f = i;\n-  __analyzer_eval (f == 42.0); /* { dg-warning \"TRUE\" } */\n+  __analyzer_eval (f == 42.0); /* { dg-warning \"TRUE\" \"PR 93356\" { xfail *-*-* } } */\n+  /* { dg-warning \"UNKNOWN\" \"disabled float comparisons\" { target *-*-* } .-1 } */\n }\n \n void test_43 (void)"}, {"sha": "5db20d8e523e0f9a572692c4ccf9a66fb17af948", "filename": "gcc/testsuite/gcc.dg/analyzer/torture/pr93356.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e978955dd720d5cc0e5141a1e9bbbbb943a3cc41/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftorture%2Fpr93356.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e978955dd720d5cc0e5141a1e9bbbbb943a3cc41/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftorture%2Fpr93356.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftorture%2Fpr93356.c?ref=e978955dd720d5cc0e5141a1e9bbbbb943a3cc41", "patch": "@@ -0,0 +1,6 @@\n+void\n+test (double d)\n+{\n+  if (__builtin_isnan (d))\n+    return;\n+}"}]}