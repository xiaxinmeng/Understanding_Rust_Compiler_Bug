{"sha": "751089b2718981880ac42d7f3d6013374460729b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzUxMDg5YjI3MTg5ODE4ODBhYzQyZDdmM2Q2MDEzMzc0NDYwNzI5Yg==", "commit": {"author": {"name": "Vincent Celier", "email": "celier@adacore.com", "date": "2007-06-06T10:30:19Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-06-06T10:30:19Z"}, "message": "gnatsym.adb: Update Copyright notice\n\n2007-04-20  Vincent Celier  <celier@adacore.com>\n\n\t* gnatsym.adb: Update Copyright notice\n\t(Parse_Cmd_Line): Accept new switch -D\n\t(Gnatsym): In Direct policy (switch -D) copy reference file to symbol\n\t file.\n\n\t* prj.ads (Policy): New policy Direct\n\t(Yes_No_Unknown): New enumeration type\n\t(Project_Data): New component Libgnarl_Needed\n\n\t* prj-nmsc.adb (Check_For_Source): When recording a source file make\n\tuse the untouched pathname casing.\n\t(Get_Directories): Ensure that the Display_Exec_Directory is using the\n\tproper casing on non case-sensitive platforms like Windows.\n\t(Get_Unit): Accept file names x__... and x~... (where x = a, g, i or s)\n\ton all platforms, as it is not possible to know which one is allowed\n\tbefore processing the project files.\n\t(Check_Stand_Alone_Library): Check that Library_Reference_Symbol_File is\n\tspecified when symbol policy is Direct. Check that when there is a\n\tsymbol file defined (either by default or with attribute\n\tLibrary_Symbol_File) it is not the same as the reference symbol file.\n\t(Check_Stand_Alone_Library): Recognize new symbol policy Direct.\n\t(Look_For_Sources): Allow Locally_Removed_Files to be declare in non\n\textending projects.\n\t(Record_Ada_Source): Record a source that has been locally removed in an\n\timported project.\n\n\t* symbols.ads (Policy): New policy Direct\n\n\t* symbols-vms.adb (Initialize): Take new policy Direct in case\n\tstatement\n\nFrom-SVN: r125420", "tree": {"sha": "5355590287430ebc23b1781a6cc16d45e518758f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5355590287430ebc23b1781a6cc16d45e518758f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/751089b2718981880ac42d7f3d6013374460729b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/751089b2718981880ac42d7f3d6013374460729b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/751089b2718981880ac42d7f3d6013374460729b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/751089b2718981880ac42d7f3d6013374460729b/comments", "author": {"login": "vcelier", "id": 8888056, "node_id": "MDQ6VXNlcjg4ODgwNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/8888056?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vcelier", "html_url": "https://github.com/vcelier", "followers_url": "https://api.github.com/users/vcelier/followers", "following_url": "https://api.github.com/users/vcelier/following{/other_user}", "gists_url": "https://api.github.com/users/vcelier/gists{/gist_id}", "starred_url": "https://api.github.com/users/vcelier/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vcelier/subscriptions", "organizations_url": "https://api.github.com/users/vcelier/orgs", "repos_url": "https://api.github.com/users/vcelier/repos", "events_url": "https://api.github.com/users/vcelier/events{/privacy}", "received_events_url": "https://api.github.com/users/vcelier/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8cc39ff26bdd6d6b5dc8bc62b5db504f22e50a1b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8cc39ff26bdd6d6b5dc8bc62b5db504f22e50a1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8cc39ff26bdd6d6b5dc8bc62b5db504f22e50a1b"}], "stats": {"total": 1340, "additions": 748, "deletions": 592}, "files": [{"sha": "c6d08244529ee51d38ed8260f1babbf88ffe3b1b", "filename": "gcc/ada/gnatsym.adb", "status": "modified", "additions": 58, "deletions": 2, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/751089b2718981880ac42d7f3d6013374460729b/gcc%2Fada%2Fgnatsym.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/751089b2718981880ac42d7f3d6013374460729b/gcc%2Fada%2Fgnatsym.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnatsym.adb?ref=751089b2718981880ac42d7f3d6013374460729b", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2003-2006, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2003-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -42,6 +42,9 @@\n --    - (optional) the name of the reference symbol file\n --    - the names of one or more object files where the symbols are found\n \n+with Ada.Exceptions; use Ada.Exceptions;\n+with Ada.Text_IO;    use Ada.Text_IO;\n+\n with GNAT.Command_Line; use GNAT.Command_Line;\n with GNAT.OS_Lib;       use GNAT.OS_Lib;\n \n@@ -125,7 +128,7 @@ procedure Gnatsym is\n    procedure Parse_Cmd_Line is\n    begin\n       loop\n-         case GNAT.Command_Line.Getopt (\"c C q r: R s: v V:\") is\n+         case GNAT.Command_Line.Getopt (\"c C D q r: R s: v V:\") is\n             when ASCII.NUL =>\n                exit;\n \n@@ -135,6 +138,9 @@ procedure Gnatsym is\n             when 'C' =>\n                Symbol_Policy := Controlled;\n \n+            when 'D' =>\n+               Symbol_Policy := Direct;\n+\n             when 'q' =>\n                Quiet := True;\n \n@@ -222,6 +228,56 @@ begin\n       Usage;\n       OS_Exit (1);\n \n+   --  When symbol policy is direct, simply copy the reference symbol file to\n+   --  the symbol file.\n+\n+   elsif Symbol_Policy = Direct then\n+      declare\n+         File_In  : Ada.Text_IO.File_Type;\n+         File_Out : Ada.Text_IO.File_Type;\n+         Line     : String (1 .. 1_000);\n+         Last     : Natural;\n+\n+      begin\n+         begin\n+            Open (File_In, In_File, Reference_Symbol_File_Name.all);\n+\n+         exception\n+            when X : others =>\n+               if not Quiet then\n+                  Put_Line\n+                    (\"could not open \"\"\" &\n+                     Reference_Symbol_File_Name.all\n+                     & \"\"\"\");\n+                  Put_Line (Exception_Message (X));\n+               end if;\n+\n+               OS_Exit (1);\n+         end;\n+\n+         begin\n+            Create (File_Out, Out_File, Symbol_File_Name.all);\n+\n+         exception\n+            when X : others =>\n+               if not Quiet then\n+                  Put_Line\n+                    (\"could not create \"\"\" & Symbol_File_Name.all & \"\"\"\");\n+                  Put_Line (Exception_Message (X));\n+               end if;\n+\n+               OS_Exit (1);\n+         end;\n+\n+         while not End_Of_File (File_In) loop\n+            Get_Line (File_In, Line, Last);\n+            Put_Line (File_Out, Line (1 .. Last));\n+         end loop;\n+\n+         Close (File_In);\n+         Close (File_Out);\n+      end;\n+\n    else\n       if Verbose then\n          Write_Str (\"Initializing symbol file \"\"\");"}, {"sha": "0bb83a52b313de5547667c69ad548a01902bf4a0", "filename": "gcc/ada/prj-nmsc.adb", "status": "modified", "additions": 610, "deletions": 523, "changes": 1133, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/751089b2718981880ac42d7f3d6013374460729b/gcc%2Fada%2Fprj-nmsc.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/751089b2718981880ac42d7f3d6013374460729b/gcc%2Fada%2Fprj-nmsc.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-nmsc.adb?ref=751089b2718981880ac42d7f3d6013374460729b", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2000-2006, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2000-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -28,7 +28,6 @@ with Err_Vars; use Err_Vars;\n with Fmap;     use Fmap;\n with Hostparm;\n with MLib.Tgt; use MLib.Tgt;\n-with Namet;    use Namet;\n with Opt;      use Opt;\n with Osint;    use Osint;\n with Output;   use Output;\n@@ -66,7 +65,7 @@ package body Prj.Nmsc is\n    --  File suffix for object files\n \n    type Name_Location is record\n-      Name     : Name_Id;\n+      Name     : File_Name_Type;\n       Location : Source_Ptr;\n       Found    : Boolean := False;\n    end record;\n@@ -75,13 +74,15 @@ package body Prj.Nmsc is\n    --  Source_Names, used by procedure Get_Path_Names_And_Record_Sources.\n \n    No_Name_Location : constant Name_Location :=\n-     (Name => No_Name, Location => No_Location, Found => False);\n+                        (Name     => No_File,\n+                         Location => No_Location,\n+                         Found    => False);\n \n    package Source_Names is new GNAT.HTable.Simple_HTable\n      (Header_Num => Header_Num,\n       Element    => Name_Location,\n       No_Element => No_Name_Location,\n-      Key        => Name_Id,\n+      Key        => File_Name_Type,\n       Hash       => Hash,\n       Equal      => \"=\");\n    --  Hash table to store file names found in string list attribute\n@@ -92,7 +93,7 @@ package body Prj.Nmsc is\n      (Header_Num => Header_Num,\n       Element    => Boolean,\n       No_Element => False,\n-      Key        => Name_Id,\n+      Key        => File_Name_Type,\n       Hash       => Hash,\n       Equal      => \"=\");\n    --  Hash table to store recursive source directories, to avoid looking\n@@ -122,7 +123,7 @@ package body Prj.Nmsc is\n      (Header_Num => Header_Num,\n       Element    => Ada_Naming_Exception_Id,\n       No_Element => No_Ada_Naming_Exception,\n-      Key        => Name_Id,\n+      Key        => File_Name_Type,\n       Hash       => Hash,\n       Equal      => \"=\");\n    --  A hash table to store naming exceptions for Ada. For each file name\n@@ -151,7 +152,9 @@ package body Prj.Nmsc is\n    --  Return the ALI file name corresponding to a source\n \n    procedure Check_Ada_Name (Name : String; Unit : out Name_Id);\n-   --  Check that a name is a valid Ada unit name\n+   --  Check that Name is a valid Ada unit name. If not, an error message is\n+   --  output, and Unit is set to No_Name, otherwise Unit is set to the\n+   --  unit name referenced by Name.\n \n    procedure Check_Naming_Scheme\n      (Data    : in out Project_Data;\n@@ -166,8 +169,8 @@ package body Prj.Nmsc is\n    --  Check that the package Naming is correct\n \n    procedure Check_For_Source\n-     (File_Name        : Name_Id;\n-      Path_Name        : Name_Id;\n+     (File_Name        : File_Name_Type;\n+      Path_Name        : File_Name_Type;\n       Project          : Project_Id;\n       In_Tree          : Project_Tree_Ref;\n       Data             : in out Project_Data;\n@@ -278,7 +281,7 @@ package body Prj.Nmsc is\n    --  Source_Names.\n \n    procedure Get_Unit\n-     (Canonical_File_Name : Name_Id;\n+     (Canonical_File_Name : File_Name_Type;\n       Naming              : Naming_Data;\n       Exception_Id        : out Ada_Naming_Exception_Id;\n       Unit_Name           : out Name_Id;\n@@ -299,10 +302,10 @@ package body Prj.Nmsc is\n    procedure Locate_Directory\n      (Project  : Project_Id;\n       In_Tree  : Project_Tree_Ref;\n-      Name     : Name_Id;\n-      Parent   : Name_Id;\n-      Dir      : out Name_Id;\n-      Display  : out Name_Id;\n+      Name     : File_Name_Type;\n+      Parent   : Path_Name_Type;\n+      Dir      : out Path_Name_Type;\n+      Display  : out Path_Name_Type;\n       Create   : String := \"\";\n       Location : Source_Ptr := No_Location);\n    --  Locate a directory. Name is the directory name. Parent is the root\n@@ -323,10 +326,10 @@ package body Prj.Nmsc is\n    --  if Follow_Links is True.\n \n    function Path_Name_Of\n-     (File_Name : Name_Id;\n-      Directory : Name_Id) return String;\n-   --  Returns the path name of a (non project) file.\n-   --  Returns an empty string if file cannot be found.\n+     (File_Name : File_Name_Type;\n+      Directory : Path_Name_Type) return String;\n+   --  Returns the path name of a (non project) file. Returns an empty string\n+   --  if file cannot be found.\n \n    procedure Prepare_Ada_Naming_Exceptions\n      (List    : Array_Element_Id;\n@@ -343,8 +346,8 @@ package body Prj.Nmsc is\n    --  indirectly.\n \n    procedure Record_Ada_Source\n-     (File_Name       : Name_Id;\n-      Path_Name       : Name_Id;\n+     (File_Name       : File_Name_Type;\n+      Path_Name       : File_Name_Type;\n       Project         : Project_Id;\n       In_Tree         : Project_Tree_Ref;\n       Data            : in out Project_Data;\n@@ -378,7 +381,7 @@ package body Prj.Nmsc is\n    function Suffix_For\n      (Language : Language_Index;\n       Naming   : Naming_Data;\n-      In_Tree  : Project_Tree_Ref) return Name_Id;\n+      In_Tree  : Project_Tree_Ref) return File_Name_Type;\n    --  Get the suffix for the source of a language from a package naming.\n    --  If not specified, return the default for the language.\n \n@@ -697,17 +700,15 @@ package body Prj.Nmsc is\n             if Is_Illegal_Suffix\n                  (Spec_Suffix, Dot_Replacement = \".\")\n             then\n-               Err_Vars.Error_Msg_Name_1 := Naming.Ada_Spec_Suffix;\n+               Err_Vars.Error_Msg_File_1 := Naming.Ada_Spec_Suffix;\n                Error_Msg\n                  (Project, In_Tree,\n                   \"{ is illegal for Spec_Suffix\",\n                   Naming.Spec_Suffix_Loc);\n             end if;\n \n-            if Is_Illegal_Suffix\n-                 (Body_Suffix, Dot_Replacement = \".\")\n-            then\n-               Err_Vars.Error_Msg_Name_1 := Naming.Ada_Body_Suffix;\n+            if Is_Illegal_Suffix (Body_Suffix, Dot_Replacement = \".\") then\n+               Err_Vars.Error_Msg_File_1 := Naming.Ada_Body_Suffix;\n                Error_Msg\n                  (Project, In_Tree,\n                   \"{ is illegal for Body_Suffix\",\n@@ -716,9 +717,9 @@ package body Prj.Nmsc is\n \n             if Body_Suffix /= Separate_Suffix then\n                if Is_Illegal_Suffix\n-                    (Separate_Suffix, Dot_Replacement = \".\")\n+                 (Separate_Suffix, Dot_Replacement = \".\")\n                then\n-                  Err_Vars.Error_Msg_Name_1 := Naming.Separate_Suffix;\n+                  Err_Vars.Error_Msg_File_1 := Naming.Separate_Suffix;\n                   Error_Msg\n                     (Project, In_Tree,\n                      \"{ is illegal for Separate_Suffix\",\n@@ -771,8 +772,8 @@ package body Prj.Nmsc is\n    ----------------------\n \n    procedure Check_For_Source\n-     (File_Name        : Name_Id;\n-      Path_Name        : Name_Id;\n+     (File_Name        : File_Name_Type;\n+      Path_Name        : File_Name_Type;\n       Project          : Project_Id;\n       In_Tree          : Project_Tree_Ref;\n       Data             : in out Project_Data;\n@@ -790,33 +791,37 @@ package body Prj.Nmsc is\n       --  A file is a source of a language if Naming_Exception is True (case\n       --  of naming exceptions) or if its file name ends with the suffix.\n \n-      if Naming_Exception or else\n-        (Name'Length > Suffix'Length and then\n-         Name (Name'Last - Suffix'Length + 1 .. Name'Last) = Suffix)\n+      if Naming_Exception\n+        or else\n+          (Name'Length > Suffix'Length\n+            and then\n+              Name (Name'Last - Suffix'Length + 1 .. Name'Last) = Suffix)\n       then\n          if Real_Location = No_Location then\n             Real_Location := Data.Location;\n          end if;\n \n          declare\n-            Path : String := Get_Name_String (Path_Name);\n+            Path   : constant String := Get_Name_String (Path_Name);\n+            C_Path : String := Path;\n \n-            Path_Id : Name_Id;\n+            Path_Id   : Path_Name_Type;\n+            C_Path_Id : Path_Name_Type;\n             --  The path name id (in canonical case)\n \n-            File_Id : Name_Id;\n+            File_Id : File_Name_Type;\n             --  The file name id (in canonical case)\n \n-            Obj_Id : Name_Id;\n+            Obj_Id : File_Name_Type;\n             --  The object file name\n \n-            Obj_Path_Id : Name_Id;\n+            Obj_Path_Id : Path_Name_Type;\n             --  The object path name\n \n-            Dep_Id : Name_Id;\n+            Dep_Id : File_Name_Type;\n             --  The dependency file name\n \n-            Dep_Path_Id : Name_Id;\n+            Dep_Path_Id : Path_Name_Type;\n             --  The dependency path name\n \n             Dot_Pos : Natural := 0;\n@@ -826,7 +831,7 @@ package body Prj.Nmsc is\n             Source_Id : Other_Source_Id := Data.First_Other_Source;\n \n          begin\n-            Canonical_Case_File_Name (Path);\n+            Canonical_Case_File_Name (C_Path);\n \n             --  Get the file name id\n \n@@ -840,6 +845,10 @@ package body Prj.Nmsc is\n             Name_Buffer (1 .. Name_Len) := Path;\n             Path_Id := Name_Find;\n \n+            Name_Len := C_Path'Length;\n+            Name_Buffer (1 .. Name_Len) := C_Path;\n+            C_Path_Id := Name_Find;\n+\n             --  Find the position of the last dot\n \n             for J in reverse Name'Range loop\n@@ -867,10 +876,10 @@ package body Prj.Nmsc is\n \n             --  Compute the object path name\n \n-            Get_Name_String (Data.Object_Directory);\n+            Get_Name_String (Data.Display_Object_Dir);\n \n-            if Name_Buffer (Name_Len) /= Directory_Separator and then\n-              Name_Buffer (Name_Len) /= '/'\n+            if Name_Buffer (Name_Len) /= Directory_Separator\n+              and then Name_Buffer (Name_Len) /= '/'\n             then\n                Name_Len := Name_Len + 1;\n                Name_Buffer (Name_Len) := Directory_Separator;\n@@ -890,10 +899,10 @@ package body Prj.Nmsc is\n \n             --  Compute the dependency path name\n \n-            Get_Name_String (Data.Object_Directory);\n+            Get_Name_String (Data.Display_Object_Dir);\n \n-            if Name_Buffer (Name_Len) /= Directory_Separator and then\n-              Name_Buffer (Name_Len) /= '/'\n+            if Name_Buffer (Name_Len) /= Directory_Separator\n+              and then Name_Buffer (Name_Len) /= '/'\n             then\n                Name_Len := Name_Len + 1;\n                Name_Buffer (Name_Len) := Directory_Separator;\n@@ -917,7 +926,7 @@ package body Prj.Nmsc is\n                   --  file name.\n \n                   if Source.Language /= Language then\n-                     Error_Msg_Name_1 := File_Name;\n+                     Error_Msg_File_1 := File_Name;\n                      Error_Msg\n                        (Project, In_Tree,\n                         \"{ cannot be a source of several languages\",\n@@ -927,7 +936,7 @@ package body Prj.Nmsc is\n                   --  No problem if a file has already been specified as\n                   --  a naming exception of this language.\n \n-                  elsif Source.Path_Name = Path_Id then\n+                  elsif Source.Path_Name = C_Path_Id then\n \n                      --  Reset the naming exception flag, if this is not a\n                      --  naming exception.\n@@ -951,7 +960,7 @@ package body Prj.Nmsc is\n                   --  is not known.\n \n                   else\n-                     Error_Msg_Name_1 := File_Name;\n+                     Error_Msg_File_1 := File_Name;\n                      Error_Msg\n                        (Project, In_Tree,\n                         \"{ is found in several source directories\",\n@@ -963,13 +972,13 @@ package body Prj.Nmsc is\n                --  object file name.\n \n                elsif Source.Object_Name = Obj_Id then\n-                  Error_Msg_Name_1 := File_Id;\n-                  Error_Msg_Name_2 := Source.File_Name;\n-                  Error_Msg_Name_3 := Obj_Id;\n+                  Error_Msg_File_1 := File_Id;\n+                  Error_Msg_File_2 := Source.File_Name;\n+                  Error_Msg_File_3 := Obj_Id;\n                   Error_Msg\n-                       (Project, In_Tree,\n-                        \"{ and { have the same object file {\",\n-                        Real_Location);\n+                    (Project, In_Tree,\n+                     \"{ and { have the same object file {\",\n+                     Real_Location);\n                      return;\n                end if;\n \n@@ -1004,11 +1013,9 @@ package body Prj.Nmsc is\n \n             --  And add it to the Other_Sources table\n \n-            Other_Source_Table.Increment_Last\n-              (In_Tree.Other_Sources);\n+            Other_Source_Table.Increment_Last (In_Tree.Other_Sources);\n             In_Tree.Other_Sources.Table\n-              (Other_Source_Table.Last (In_Tree.Other_Sources)) :=\n-                 Source;\n+              (Other_Source_Table.Last (In_Tree.Other_Sources)) := Source;\n \n             --  There are sources of languages other than Ada in this project\n \n@@ -1120,10 +1127,11 @@ package body Prj.Nmsc is\n             Check_Ada_Name (Name_Buffer (1 .. Name_Len), Unit_Name);\n \n             if Unit_Name = No_Name then\n-               Err_Vars.Error_Msg_Name_1 := Element.Index;\n+               Error_Msg_Name_1 := Element.Index;\n+               --  Errutil.Set_Msg_Txt ignores '$' (unit name insertion)\n                Error_Msg\n                  (Project, In_Tree,\n-                  \"{ is not a valid unit name.\",\n+                  \"%% is not a valid unit name.\",\n                   Element.Value.Location);\n \n             else\n@@ -1277,7 +1285,7 @@ package body Prj.Nmsc is\n                         Err_Vars.Error_Msg_Name_1 := Name_Find;\n                         Error_Msg\n                           (Project, In_Tree,\n-                           \"{ is not a correct Casing\",\n+                           \"%% is not a correct Casing\",\n                            Casing_String.Location);\n                      end if;\n                end;\n@@ -1479,11 +1487,16 @@ package body Prj.Nmsc is\n          --  Find path name, check that it is a directory\n \n          Locate_Directory\n-           (Project, In_Tree, Lib_Dir.Value, Data.Display_Directory,\n-            Data.Library_Dir, Data.Display_Library_Dir, Create => \"library\",\n+           (Project,\n+            In_Tree,\n+            File_Name_Type (Lib_Dir.Value),\n+            Data.Display_Directory,\n+            Data.Library_Dir,\n+            Data.Display_Library_Dir,\n+            Create   => \"library\",\n             Location => Lib_Dir.Location);\n \n-         if Data.Library_Dir = No_Name then\n+         if Data.Library_Dir = No_Path then\n \n             --  Get the absolute name of the library directory that\n             --  does not exist, to report an error.\n@@ -1493,7 +1506,8 @@ package body Prj.Nmsc is\n \n             begin\n                if Is_Absolute_Path (Dir_Name) then\n-                  Err_Vars.Error_Msg_Name_1 := Lib_Dir.Value;\n+                  Err_Vars.Error_Msg_File_1 :=\n+                    File_Name_Type (Lib_Dir.Value);\n \n                else\n                   Get_Name_String (Data.Display_Directory);\n@@ -1503,11 +1517,10 @@ package body Prj.Nmsc is\n                      Name_Buffer (Name_Len) := Directory_Separator;\n                   end if;\n \n-                  Name_Buffer\n-                    (Name_Len + 1 .. Name_Len + Dir_Name'Length) :=\n+                  Name_Buffer (Name_Len + 1 .. Name_Len + Dir_Name'Length) :=\n                     Dir_Name;\n                   Name_Len := Name_Len + Dir_Name'Length;\n-                  Err_Vars.Error_Msg_Name_1 := Name_Find;\n+                  Err_Vars.Error_Msg_File_1 := Name_Find;\n                end if;\n \n                --  Report the error\n@@ -1526,8 +1539,8 @@ package body Prj.Nmsc is\n                \"library directory cannot be the same \" &\n                \"as object directory\",\n                Lib_Dir.Location);\n-            Data.Library_Dir := No_Name;\n-            Data.Display_Library_Dir := No_Name;\n+            Data.Library_Dir := No_Path;\n+            Data.Display_Library_Dir := No_Path;\n \n          else\n             declare\n@@ -1544,8 +1557,11 @@ package body Prj.Nmsc is\n                   Dir_Elem := In_Tree.String_Elements.Table (Dirs_Id);\n                   Dirs_Id  := Dir_Elem.Next;\n \n-                  if Data.Library_Dir = Dir_Elem.Value then\n-                     Err_Vars.Error_Msg_Name_1 := Dir_Elem.Value;\n+                  if Data.Library_Dir =\n+                    Path_Name_Type (Dir_Elem.Value)\n+                  then\n+                     Err_Vars.Error_Msg_File_1 :=\n+                       File_Name_Type (Dir_Elem.Value);\n                      Error_Msg\n                        (Project, In_Tree,\n                         \"library directory cannot be the same \" &\n@@ -1570,15 +1586,18 @@ package body Prj.Nmsc is\n                            Dir_Elem := In_Tree.String_Elements.Table (Dirs_Id);\n                            Dirs_Id  := Dir_Elem.Next;\n \n-                           if Data.Library_Dir = Dir_Elem.Value then\n-                              Err_Vars.Error_Msg_Name_1 := Dir_Elem.Value;\n-                              Err_Vars.Error_Msg_Name_2 :=\n+                           if Data.Library_Dir =\n+                             Path_Name_Type (Dir_Elem.Value)\n+                           then\n+                              Err_Vars.Error_Msg_File_1 :=\n+                                File_Name_Type (Dir_Elem.Value);\n+                              Err_Vars.Error_Msg_Name_1 :=\n                                 In_Tree.Projects.Table (Pid).Name;\n \n                               Error_Msg\n                                 (Project, In_Tree,\n                                  \"library directory cannot be the same \" &\n-                                 \"as source directory { of project {\",\n+                                 \"as source directory { of project %%\",\n                                  Lib_Dir.Location);\n                               OK := False;\n                               exit Project_Loop;\n@@ -1589,8 +1608,8 @@ package body Prj.Nmsc is\n                end if;\n \n                if not OK then\n-                  Data.Library_Dir := No_Name;\n-                  Data.Display_Library_Dir := No_Name;\n+                  Data.Library_Dir := No_Path;\n+                  Data.Display_Library_Dir := No_Path;\n \n                elsif Current_Verbosity = High then\n \n@@ -1608,18 +1627,18 @@ package body Prj.Nmsc is\n \n       if Lib_Name.Value = Empty_String then\n          if Current_Verbosity = High\n-           and then Data.Library_Name = No_Name\n+           and then Data.Library_Name = No_File\n          then\n             Write_Line (\"No library name\");\n          end if;\n \n       else\n          --  There is no restriction on the syntax of library names\n \n-         Data.Library_Name := Lib_Name.Value;\n+         Data.Library_Name := File_Name_Type (Lib_Name.Value);\n       end if;\n \n-      if Data.Library_Name /= No_Name\n+      if Data.Library_Name /= No_File\n         and then Current_Verbosity = High\n       then\n          Write_Str (\"Library name = \"\"\");\n@@ -1628,9 +1647,8 @@ package body Prj.Nmsc is\n       end if;\n \n       Data.Library :=\n-        Data.Library_Dir /= No_Name\n-        and then\n-      Data.Library_Name /= No_Name;\n+        Data.Library_Dir /= No_Path\n+          and then Data.Library_Name /= No_File;\n \n       if Data.Library then\n          if MLib.Tgt.Support_For_Libraries = MLib.Tgt.None then\n@@ -1652,11 +1670,16 @@ package body Prj.Nmsc is\n                --  Find path name, check that it is a directory\n \n                Locate_Directory\n-                 (Project, In_Tree, Lib_ALI_Dir.Value, Data.Display_Directory,\n-                  Data.Library_ALI_Dir, Data.Display_Library_ALI_Dir,\n-                  Create => \"library ALI\", Location => Lib_ALI_Dir.Location);\n+                 (Project,\n+                  In_Tree,\n+                  File_Name_Type (Lib_ALI_Dir.Value),\n+                  Data.Display_Directory,\n+                  Data.Library_ALI_Dir,\n+                  Data.Display_Library_ALI_Dir,\n+                  Create   => \"library ALI\",\n+                  Location => Lib_ALI_Dir.Location);\n \n-               if Data.Library_ALI_Dir = No_Name then\n+               if Data.Library_ALI_Dir = No_Path then\n \n                   --  Get the absolute name of the library ALI directory that\n                   --  does not exist, to report an error.\n@@ -1667,7 +1690,8 @@ package body Prj.Nmsc is\n \n                   begin\n                      if Is_Absolute_Path (Dir_Name) then\n-                        Err_Vars.Error_Msg_Name_1 := Lib_Dir.Value;\n+                        Err_Vars.Error_Msg_File_1 :=\n+                          File_Name_Type (Lib_Dir.Value);\n \n                      else\n                         Get_Name_String (Data.Display_Directory);\n@@ -1681,7 +1705,7 @@ package body Prj.Nmsc is\n                           (Name_Len + 1 .. Name_Len + Dir_Name'Length) :=\n                           Dir_Name;\n                         Name_Len := Name_Len + Dir_Name'Length;\n-                        Err_Vars.Error_Msg_Name_1 := Name_Find;\n+                        Err_Vars.Error_Msg_File_1 := Name_Find;\n                      end if;\n \n                      --  Report the error\n@@ -1704,8 +1728,8 @@ package body Prj.Nmsc is\n                         \"library 'A'L'I directory cannot be the same \" &\n                         \"as object directory\",\n                         Lib_ALI_Dir.Location);\n-                     Data.Library_ALI_Dir := No_Name;\n-                     Data.Display_Library_ALI_Dir := No_Name;\n+                     Data.Library_ALI_Dir := No_Path;\n+                     Data.Display_Library_ALI_Dir := No_Path;\n \n                   else\n                      declare\n@@ -1722,8 +1746,11 @@ package body Prj.Nmsc is\n                            Dir_Elem := In_Tree.String_Elements.Table (Dirs_Id);\n                            Dirs_Id  := Dir_Elem.Next;\n \n-                           if Data.Library_ALI_Dir = Dir_Elem.Value then\n-                              Err_Vars.Error_Msg_Name_1 := Dir_Elem.Value;\n+                           if Data.Library_ALI_Dir =\n+                             Path_Name_Type (Dir_Elem.Value)\n+                           then\n+                              Err_Vars.Error_Msg_File_1 :=\n+                                File_Name_Type (Dir_Elem.Value);\n                               Error_Msg\n                                 (Project, In_Tree,\n                                  \"library 'A'L'I directory cannot be \" &\n@@ -1754,18 +1781,19 @@ package body Prj.Nmsc is\n                                     Dirs_Id  := Dir_Elem.Next;\n \n                                     if\n-                                      Data.Library_ALI_Dir = Dir_Elem.Value\n+                                      Data.Library_ALI_Dir =\n+                                        Path_Name_Type (Dir_Elem.Value)\n                                     then\n+                                       Err_Vars.Error_Msg_File_1 :=\n+                                         File_Name_Type (Dir_Elem.Value);\n                                        Err_Vars.Error_Msg_Name_1 :=\n-                                         Dir_Elem.Value;\n-                                       Err_Vars.Error_Msg_Name_2 :=\n                                          In_Tree.Projects.Table (Pid).Name;\n \n                                        Error_Msg\n                                          (Project, In_Tree,\n                                           \"library 'A'L'I directory cannot \" &\n                                           \"be the same as source directory \" &\n-                                          \"{ of project {\",\n+                                          \"{ of project %%\",\n                                           Lib_ALI_Dir.Location);\n                                        OK := False;\n                                        exit ALI_Project_Loop;\n@@ -1776,8 +1804,8 @@ package body Prj.Nmsc is\n                         end if;\n \n                         if not OK then\n-                           Data.Library_ALI_Dir := No_Name;\n-                           Data.Display_Library_ALI_Dir := No_Name;\n+                           Data.Library_ALI_Dir := No_Path;\n+                           Data.Display_Library_ALI_Dir := No_Path;\n \n                         elsif Current_Verbosity = High then\n \n@@ -1802,7 +1830,7 @@ package body Prj.Nmsc is\n                end if;\n \n             else\n-               Data.Lib_Internal_Name := Lib_Version.Value;\n+               Data.Lib_Internal_Name := File_Name_Type (Lib_Version.Value);\n             end if;\n \n             pragma Assert (The_Lib_Kind.Kind = Single);\n@@ -2250,39 +2278,43 @@ package body Prj.Nmsc is\n             The_Unit_Id    : Unit_Id;\n             The_Unit_Data  : Unit_Data;\n \n-            procedure Add_ALI_For (Source : Name_Id);\n+            procedure Add_ALI_For (Source : File_Name_Type);\n             --  Add an ALI file name to the list of Interface ALIs\n \n             -----------------\n             -- Add_ALI_For --\n             -----------------\n \n-            procedure Add_ALI_For (Source : Name_Id) is\n+            procedure Add_ALI_For (Source : File_Name_Type) is\n             begin\n                Get_Name_String (Source);\n \n                declare\n-                  ALI         : constant String :=\n-                    ALI_File_Name (Name_Buffer (1 .. Name_Len));\n-                  ALI_Name_Id : Name_Id;\n+                  ALI : constant String :=\n+                          ALI_File_Name (Name_Buffer (1 .. Name_Len));\n+\n+                  ALI_Name_Id : File_Name_Type;\n+\n                begin\n                   Name_Len := ALI'Length;\n                   Name_Buffer (1 .. Name_Len) := ALI;\n                   ALI_Name_Id := Name_Find;\n \n                   String_Element_Table.Increment_Last\n                     (In_Tree.String_Elements);\n+\n                   In_Tree.String_Elements.Table\n                     (String_Element_Table.Last\n                       (In_Tree.String_Elements)) :=\n-                    (Value         => ALI_Name_Id,\n+                    (Value         => Name_Id (ALI_Name_Id),\n                      Index         => 0,\n-                     Display_Value => ALI_Name_Id,\n+                     Display_Value => Name_Id (ALI_Name_Id),\n                      Location      =>\n                        In_Tree.String_Elements.Table\n                          (Interfaces).Location,\n                      Flag          => False,\n                      Next          => Interface_ALIs);\n+\n                   Interface_ALIs := String_Element_Table.Last\n                                       (In_Tree.String_Elements);\n                end;\n@@ -2327,7 +2359,7 @@ package body Prj.Nmsc is\n                   if The_Unit_Id = No_Unit then\n                      Error_Msg\n                        (Project, In_Tree,\n-                        \"unknown unit {\",\n+                        \"unknown unit %%\",\n                         In_Tree.String_Elements.Table\n                           (Interfaces).Location);\n \n@@ -2337,7 +2369,7 @@ package body Prj.Nmsc is\n                      The_Unit_Data :=\n                        In_Tree.Units.Table (The_Unit_Id);\n \n-                     if The_Unit_Data.File_Names (Body_Part).Name /= No_Name\n+                     if The_Unit_Data.File_Names (Body_Part).Name /= No_File\n                        and then The_Unit_Data.File_Names (Body_Part).Path /=\n                                                                         Slash\n                      then\n@@ -2349,24 +2381,25 @@ package body Prj.Nmsc is\n                            --  If there is no spec, we need to check\n                            --  that it is not a subunit.\n \n-                           if The_Unit_Data.File_Names\n-                             (Specification).Name = No_Name\n+                           if The_Unit_Data.File_Names (Specification).Name =\n+                                                              No_File\n                            then\n                               declare\n                                  Src_Ind : Source_File_Index;\n \n                               begin\n-                                 Src_Ind := Sinput.P.Load_Project_File\n-                                   (Get_Name_String\n-                                      (The_Unit_Data.File_Names\n-                                         (Body_Part).Path));\n+                                 Src_Ind :=\n+                                   Sinput.P.Load_Project_File\n+                                     (Get_Name_String\n+                                        (The_Unit_Data.File_Names\n+                                           (Body_Part).Path));\n \n                                  if Sinput.P.Source_File_Is_Subunit\n-                                   (Src_Ind)\n+                                     (Src_Ind)\n                                  then\n                                     Error_Msg\n                                       (Project, In_Tree,\n-                                       \"{ is a subunit; \" &\n+                                       \"%% is a subunit; \" &\n                                        \"it cannot be an interface\",\n                                        In_Tree.\n                                          String_Elements.Table\n@@ -2385,19 +2418,19 @@ package body Prj.Nmsc is\n                         else\n                            Error_Msg\n                              (Project, In_Tree,\n-                              \"{ is not an unit of this project\",\n+                              \"%% is not an unit of this project\",\n                               In_Tree.String_Elements.Table\n                                 (Interfaces).Location);\n                         end if;\n \n-                     elsif The_Unit_Data.File_Names\n-                       (Specification).Name /= No_Name\n-                       and then The_Unit_Data.File_Names\n-                         (Specification).Path /= Slash\n-                       and then Check_Project\n-                         (The_Unit_Data.File_Names\n-                              (Specification).Project,\n-                          Project, In_Tree, Extending)\n+                     elsif The_Unit_Data.File_Names (Specification).Name /=\n+                                                                       No_File\n+                       and then\n+                         The_Unit_Data.File_Names (Specification).Path /= Slash\n+                       and then\n+                         Check_Project\n+                          (The_Unit_Data.File_Names (Specification).Project,\n+                           Project, In_Tree, Extending)\n \n                      then\n                         --  The unit is part of the project, it has\n@@ -2410,7 +2443,7 @@ package body Prj.Nmsc is\n                      else\n                         Error_Msg\n                           (Project, In_Tree,\n-                           \"{ is not an unit of this project\",\n+                           \"%% is not an unit of this project\",\n                            In_Tree.String_Elements.Table\n                                                     (Interfaces).Location);\n                      end if;\n@@ -2476,19 +2509,23 @@ package body Prj.Nmsc is\n \n          if Lib_Src_Dir.Value /= Empty_String then\n             declare\n-               Dir_Id : constant Name_Id := Lib_Src_Dir.Value;\n+               Dir_Id : constant File_Name_Type :=\n+                          File_Name_Type (Lib_Src_Dir.Value);\n \n             begin\n                Locate_Directory\n-                 (Project, In_Tree, Dir_Id, Data.Display_Directory,\n+                 (Project,\n+                  In_Tree,\n+                  Dir_Id,\n+                  Data.Display_Directory,\n                   Data.Library_Src_Dir,\n                   Data.Display_Library_Src_Dir,\n-                  Create => \"library source copy\",\n+                  Create   => \"library source copy\",\n                   Location => Lib_Src_Dir.Location);\n \n                --  If directory does not exist, report an error\n \n-               if Data.Library_Src_Dir = No_Name then\n+               if Data.Library_Src_Dir = No_Path then\n \n                   --  Get the absolute name of the library directory\n                   --  that does not exist, to report an error.\n@@ -2499,7 +2536,7 @@ package body Prj.Nmsc is\n \n                   begin\n                      if Is_Absolute_Path (Dir_Name) then\n-                        Err_Vars.Error_Msg_Name_1 := Dir_Id;\n+                        Err_Vars.Error_Msg_File_1 := Dir_Id;\n \n                      else\n                         Get_Name_String (Data.Directory);\n@@ -2517,7 +2554,7 @@ package body Prj.Nmsc is\n                              Name_Len + Dir_Name'Length) :=\n                             Dir_Name;\n                         Name_Len := Name_Len + Dir_Name'Length;\n-                        Err_Vars.Error_Msg_Name_1 := Name_Find;\n+                        Err_Vars.Error_Msg_File_1 := Name_Find;\n                      end if;\n \n                      --  Report the error\n@@ -2537,7 +2574,7 @@ package body Prj.Nmsc is\n                      \"directory to copy interfaces cannot be \" &\n                      \"the object directory\",\n                      Lib_Src_Dir.Location);\n-                  Data.Library_Src_Dir := No_Name;\n+                  Data.Library_Src_Dir := No_Path;\n \n                else\n                   declare\n@@ -2555,20 +2592,22 @@ package body Prj.Nmsc is\n \n                         --  Report error if it is one of the source directories\n \n-                        if Data.Library_Src_Dir = Src_Dir.Value then\n+                        if Data.Library_Src_Dir =\n+                             Path_Name_Type (Src_Dir.Value)\n+                        then\n                            Error_Msg\n                              (Project, In_Tree,\n                               \"directory to copy interfaces cannot \" &\n                               \"be one of the source directories\",\n                               Lib_Src_Dir.Location);\n-                           Data.Library_Src_Dir := No_Name;\n+                           Data.Library_Src_Dir := No_Path;\n                            exit;\n                         end if;\n \n                         Src_Dirs := Src_Dir.Next;\n                      end loop;\n \n-                     if Data.Library_Src_Dir /= No_Name then\n+                     if Data.Library_Src_Dir /= No_Path then\n \n                         --  It cannot be a source directory of any other\n                         --  project either.\n@@ -2585,17 +2624,20 @@ package body Prj.Nmsc is\n                               --  Report error if it is one of the source\n                               --  directories\n \n-                              if Data.Library_Src_Dir = Src_Dir.Value then\n-                                 Error_Msg_Name_1 := Src_Dir.Value;\n-                                 Error_Msg_Name_2 :=\n+                              if Data.Library_Src_Dir =\n+                                        Path_Name_Type (Src_Dir.Value)\n+                              then\n+                                 Error_Msg_File_1 :=\n+                                   File_Name_Type (Src_Dir.Value);\n+                                 Error_Msg_Name_1 :=\n                                    In_Tree.Projects.Table (Pid).Name;\n                                  Error_Msg\n                                    (Project, In_Tree,\n                                     \"directory to copy interfaces cannot \" &\n                                     \"be the same as source directory { of \" &\n-                                    \"project {\",\n+                                    \"project %%\",\n                                     Lib_Src_Dir.Location);\n-                                 Data.Library_Src_Dir := No_Name;\n+                                 Data.Library_Src_Dir := No_Path;\n                                  exit Project_Loop;\n                               end if;\n \n@@ -2608,7 +2650,7 @@ package body Prj.Nmsc is\n                   --  In high verbosity, if there is a valid Library_Src_Dir,\n                   --  display its path name.\n \n-                  if Data.Library_Src_Dir /= No_Name\n+                  if Data.Library_Src_Dir /= No_Path\n                     and then Current_Verbosity = High\n                   then\n                      Write_Str (\"Directory to copy interfaces =\"\"\");\n@@ -2644,6 +2686,9 @@ package body Prj.Nmsc is\n                elsif Value = \"restricted\" then\n                   Data.Symbol_Data.Symbol_Policy := Restricted;\n \n+               elsif Value = \"direct\" then\n+                  Data.Symbol_Data.Symbol_Policy := Direct;\n+\n                else\n                   Error_Msg\n                     (Project, In_Tree,\n@@ -2654,7 +2699,7 @@ package body Prj.Nmsc is\n          end if;\n \n          --  If attribute Library_Symbol_File is not specified, symbol policy\n-         --  cannot be Restricted.\n+         --  cannot be Restricted or Direct.\n \n          if Lib_Symbol_File.Default then\n             if Data.Symbol_Data.Symbol_Policy = Restricted then\n@@ -2665,8 +2710,13 @@ package body Prj.Nmsc is\n                   Lib_Symbol_Policy.Location);\n             end if;\n \n+            Name_Len := 0;\n+            Add_Str_To_Name_Buffer (Default_Symbol_File_Name);\n+            Data.Symbol_Data.Symbol_File := Name_Find;\n+            Get_Name_String (Data.Symbol_Data.Symbol_File);\n+\n          else\n-            --  Library_Symbol_File is defined. Check that the file exists\n+            --  Library_Symbol_File is defined\n \n             Data.Symbol_Data.Symbol_File := Lib_Symbol_File.Value;\n \n@@ -2677,38 +2727,41 @@ package body Prj.Nmsc is\n                  (Project, In_Tree,\n                   \"symbol file name cannot be an empty string\",\n                   Lib_Symbol_File.Location);\n+            end if;\n+         end if;\n \n-            else\n-               OK := not Is_Absolute_Path (Name_Buffer (1 .. Name_Len));\n+         if Name_Len /= 0 then\n+            OK := not Is_Absolute_Path (Name_Buffer (1 .. Name_Len));\n \n-               if OK then\n-                  for J in 1 .. Name_Len loop\n-                     if Name_Buffer (J) = '/'\n-                       or else Name_Buffer (J) = Directory_Separator\n-                     then\n-                        OK := False;\n-                        exit;\n-                     end if;\n-                  end loop;\n-               end if;\n+            if OK then\n+               for J in 1 .. Name_Len loop\n+                  if Name_Buffer (J) = '/'\n+                    or else Name_Buffer (J) = Directory_Separator\n+                  then\n+                     OK := False;\n+                     exit;\n+                  end if;\n+               end loop;\n+            end if;\n \n-               if not OK then\n-                  Error_Msg_Name_1 := Lib_Symbol_File.Value;\n-                  Error_Msg\n-                    (Project, In_Tree,\n-                     \"symbol file name { is illegal. \" &\n-                     \"Name canot include directory info.\",\n-                     Lib_Symbol_File.Location);\n-               end if;\n+            if not OK then\n+               Error_Msg_File_1 :=\n+                 File_Name_Type (Lib_Symbol_File.Value);\n+               Error_Msg\n+                 (Project, In_Tree,\n+                  \"symbol file name { is illegal. \" &\n+                  \"Name canot include directory info.\",\n+                  Lib_Symbol_File.Location);\n             end if;\n          end if;\n \n          --  If attribute Library_Reference_Symbol_File is not defined,\n-         --  symbol policy cannot be Compilant or Controlled.\n+         --  symbol policy cannot be Compilant, Controlled or Direct.\n \n          if Lib_Ref_Symbol_File.Default then\n             if Data.Symbol_Data.Symbol_Policy = Compliant\n               or else Data.Symbol_Data.Symbol_Policy = Controlled\n+              or else Data.Symbol_Data.Symbol_Policy = Direct\n             then\n                Error_Msg\n                  (Project, In_Tree,\n@@ -2730,41 +2783,28 @@ package body Prj.Nmsc is\n                   Lib_Symbol_File.Location);\n \n             else\n-               OK := not Is_Absolute_Path (Name_Buffer (1 .. Name_Len));\n-\n-               if OK then\n-                  for J in 1 .. Name_Len loop\n-                     if Name_Buffer (J) = '/'\n-                       or else Name_Buffer (J) = Directory_Separator\n-                     then\n-                        OK := False;\n-                        exit;\n-                     end if;\n-                  end loop;\n-               end if;\n-\n-               if not OK then\n-                  Error_Msg_Name_1 := Lib_Ref_Symbol_File.Value;\n-                  Error_Msg\n-                    (Project, In_Tree,\n-                     \"reference symbol file { name is illegal. \" &\n-                     \"Name canot include directory info.\",\n-                     Lib_Ref_Symbol_File.Location);\n+               if not Is_Absolute_Path (Name_Buffer (1 .. Name_Len)) then\n+                  Name_Len := 0;\n+                  Add_Str_To_Name_Buffer (Get_Name_String (Data.Directory));\n+                  Add_Char_To_Name_Buffer (Directory_Separator);\n+                  Add_Str_To_Name_Buffer\n+                    (Get_Name_String (Lib_Ref_Symbol_File.Value));\n+                  Data.Symbol_Data.Reference := Name_Find;\n                end if;\n \n                if not Is_Regular_File\n-                 (Get_Name_String (Data.Object_Directory) &\n-                  Directory_Separator &\n-                  Get_Name_String (Lib_Ref_Symbol_File.Value))\n+                 (Get_Name_String (Data.Symbol_Data.Reference))\n                then\n-                  Error_Msg_Name_1 := Lib_Ref_Symbol_File.Value;\n+                  Error_Msg_File_1 :=\n+                    File_Name_Type (Lib_Ref_Symbol_File.Value);\n \n-                  --  For controlled symbol policy, it is an error if the\n-                  --  reference symbol file does not exist. For other symbol\n-                  --  policies, this is just a warning\n+                  --  For controlled and direct symbol policies, it is an error\n+                  --  if the reference symbol file does not exist. For other\n+                  --  symbol policies, this is just a warning\n \n                   Error_Msg_Warn :=\n-                    Data.Symbol_Data.Symbol_Policy /= Controlled;\n+                    Data.Symbol_Data.Symbol_Policy /= Controlled\n+                    and then Data.Symbol_Data.Symbol_Policy /= Direct;\n \n                   Error_Msg\n                     (Project, In_Tree,\n@@ -2782,6 +2822,34 @@ package body Prj.Nmsc is\n                      end if;\n                   end if;\n                end if;\n+\n+               --  If both the reference symbol file and the symbol file are\n+               --  defined, then check that they are not the same file.\n+\n+               Get_Name_String (Data.Symbol_Data.Symbol_File);\n+\n+               if Name_Len > 0 then\n+                  declare\n+                     Symb_Path : constant String :=\n+                                   Normalize_Pathname\n+                                     (Get_Name_String (Data.Object_Directory) &\n+                                      Directory_Separator &\n+                                      Name_Buffer (1 .. Name_Len));\n+                     Ref_Path  : constant String :=\n+                                   Normalize_Pathname\n+                                     (Get_Name_String\n+                                        (Data.Symbol_Data.Reference));\n+\n+                  begin\n+                     if Symb_Path = Ref_Path then\n+                        Error_Msg\n+                          (Project, In_Tree,\n+                           \"library reference symbol file and library symbol\" &\n+                           \" file cannot be the same file\",\n+                           Lib_Ref_Symbol_File.Location);\n+                     end if;\n+                  end;\n+               end if;\n             end if;\n          end if;\n       end if;\n@@ -2812,10 +2880,10 @@ package body Prj.Nmsc is\n       In_Project : Project_Data;\n       In_Tree    : Project_Tree_Ref) return String\n    is\n-      Suffix_Id : constant Name_Id :=\n+      Suffix_Id : constant File_Name_Type :=\n                     Suffix_Of (Language, In_Project, In_Tree);\n    begin\n-      if Suffix_Id /= No_Name then\n+      if Suffix_Id /= No_File then\n          return Get_Name_String (Suffix_Id);\n       else\n          return \".\" & Get_Name_String (Language_Names.Table (Language));\n@@ -2835,18 +2903,23 @@ package body Prj.Nmsc is\n       Real_Location : Source_Ptr := Flag_Location;\n       Error_Buffer  : String (1 .. 5_000);\n       Error_Last    : Natural := 0;\n-      Msg_Name      : Natural := 0;\n+      Name_Number   : Natural := 0;\n+      File_Number   : Natural := 0;\n       First         : Positive := Msg'First;\n+      Index         : Positive;\n \n       procedure Add (C : Character);\n       --  Add a character to the buffer\n \n       procedure Add (S : String);\n       --  Add a string to the buffer\n \n-      procedure Add (Id : Name_Id);\n+      procedure Add_Name;\n       --  Add a name to the buffer\n \n+      procedure Add_File;\n+      --  Add a file name to the buffer\n+\n       ---------\n       -- Add --\n       ---------\n@@ -2863,11 +2936,57 @@ package body Prj.Nmsc is\n          Error_Last := Error_Last + S'Length;\n       end Add;\n \n-      procedure Add (Id : Name_Id) is\n+      --------------\n+      -- Add_File --\n+      --------------\n+\n+      procedure Add_File is\n+         File : File_Name_Type;\n       begin\n-         Get_Name_String (Id);\n+         Add ('\"');\n+         File_Number := File_Number + 1;\n+\n+         case File_Number is\n+            when 1 =>\n+               File := Err_Vars.Error_Msg_File_1;\n+            when 2 =>\n+               File := Err_Vars.Error_Msg_File_2;\n+            when 3 =>\n+               File := Err_Vars.Error_Msg_File_3;\n+            when others =>\n+               null;\n+         end case;\n+\n+         Get_Name_String (File);\n          Add (Name_Buffer (1 .. Name_Len));\n-      end Add;\n+         Add ('\"');\n+      end Add_File;\n+\n+      --------------\n+      -- Add_Name --\n+      --------------\n+\n+      procedure Add_Name is\n+         Name : Name_Id;\n+      begin\n+         Add ('\"');\n+         Name_Number := Name_Number + 1;\n+\n+         case Name_Number is\n+            when 1 =>\n+               Name := Err_Vars.Error_Msg_Name_1;\n+            when 2 =>\n+               Name := Err_Vars.Error_Msg_Name_2;\n+            when 3 =>\n+               Name := Err_Vars.Error_Msg_Name_3;\n+            when others =>\n+               null;\n+         end case;\n+\n+         Get_Name_String (Name);\n+         Add (Name_Buffer (1 .. Name_Len));\n+         Add ('\"');\n+      end Add_Name;\n \n    --  Start of processing for Error_Msg\n \n@@ -2888,8 +3007,8 @@ package body Prj.Nmsc is\n       if Msg (First) = '\\' then\n          First := First + 1;\n \n-         --  Warniung character is always the first one in this package\n-         --  this is an undoocumented kludge!!!\n+         --  Warning character is always the first one in this package\n+         --  this is an undocumented kludge!!!\n \n       elsif Msg (First) = '?' then\n          First := First + 1;\n@@ -2903,27 +3022,21 @@ package body Prj.Nmsc is\n          end if;\n       end if;\n \n-      for Index in First .. Msg'Last loop\n-         if Msg (Index) = '{' or else Msg (Index) = '%' then\n-\n-            --  Include a name between double quotes\n-\n-            Msg_Name := Msg_Name + 1;\n-            Add ('\"');\n+      Index := First;\n+      while Index <= Msg'Last loop\n+         if Msg (Index) = '{' then\n+            Add_File;\n \n-            case Msg_Name is\n-               when 1 => Add (Err_Vars.Error_Msg_Name_1);\n-               when 2 => Add (Err_Vars.Error_Msg_Name_2);\n-               when 3 => Add (Err_Vars.Error_Msg_Name_3);\n-\n-               when others => null;\n-            end case;\n-\n-            Add ('\"');\n+         elsif Msg (Index) = '%' then\n+            if Index < Msg'Last and then Msg (Index + 1) = '%' then\n+               Index := Index + 1;\n+            end if;\n \n+            Add_Name;\n          else\n             Add (Msg (Index));\n          end if;\n+         Index := Index + 1;\n \n       end loop;\n \n@@ -2958,14 +3071,17 @@ package body Prj.Nmsc is\n          begin\n             Source_Recorded := False;\n             Element := In_Tree.String_Elements.Table (Source_Dir);\n+\n             if Element.Value /= No_Name then\n                Get_Name_String (Element.Display_Value);\n \n                declare\n                   Source_Directory : constant String :=\n-                    Name_Buffer (1 .. Name_Len) & Directory_Separator;\n+                                       Name_Buffer (1 .. Name_Len) &\n+                                         Directory_Separator;\n+\n                   Dir_Last  : constant Natural :=\n-                     Compute_Directory_Last (Source_Directory);\n+                                Compute_Directory_Last (Source_Directory);\n \n                begin\n                   if Current_Verbosity = High then\n@@ -2989,15 +3105,15 @@ package body Prj.Nmsc is\n                      exit when Name_Len = 0;\n \n                      declare\n-                        File_Name : constant Name_Id := Name_Find;\n+                        File_Name : constant File_Name_Type := Name_Find;\n                         Path      : constant String :=\n                           Normalize_Pathname\n-                            (Name      => Name_Buffer (1 .. Name_Len),\n-                             Directory => Source_Directory\n+                            (Name           => Name_Buffer (1 .. Name_Len),\n+                             Directory      => Source_Directory\n                                (Source_Directory'First .. Dir_Last),\n-                             Resolve_Links => Follow_Links,\n+                             Resolve_Links  => Follow_Links,\n                              Case_Sensitive => True);\n-                        Path_Name : Name_Id;\n+                        Path_Name : File_Name_Type;\n \n                      begin\n                         Name_Len := Path'Length;\n@@ -3109,15 +3225,21 @@ package body Prj.Nmsc is\n \n       Last_Source_Dir : String_List_Id  := Nil_String;\n \n-      procedure Find_Source_Dirs (From : Name_Id; Location : Source_Ptr);\n-      --  Find one or several source directories, and add them\n-      --  to the list of source directories of the project.\n+      procedure Find_Source_Dirs\n+        (From     : File_Name_Type;\n+         Location : Source_Ptr);\n+      --  Find one or several source directories, and add them to the list of\n+      --  source directories of the project.\n+      --  What is Location??? and what is From???\n \n       ----------------------\n       -- Find_Source_Dirs --\n       ----------------------\n \n-      procedure Find_Source_Dirs (From : Name_Id; Location : Source_Ptr) is\n+      procedure Find_Source_Dirs\n+        (From     : File_Name_Type;\n+         Location : Source_Ptr)\n+      is\n          Directory : constant String := Get_Name_String (From);\n          Element   : String_Element;\n \n@@ -3137,8 +3259,8 @@ package body Prj.Nmsc is\n             Element  : String_Element;\n             Found    : Boolean := False;\n \n-            Non_Canonical_Path : Name_Id := No_Name;\n-            Canonical_Path     : Name_Id := No_Name;\n+            Non_Canonical_Path : File_Name_Type := No_File;\n+            Canonical_Path     : File_Name_Type := No_File;\n \n             The_Path : constant String :=\n                          Normalize_Pathname (Get_Name_String (Path)) &\n@@ -3174,7 +3296,7 @@ package body Prj.Nmsc is\n                Element := In_Tree.String_Elements.Table (List);\n \n                if Element.Value /= No_Name then\n-                  Found := Element.Value = Canonical_Path;\n+                  Found := Element.Value = Name_Id (Canonical_Path);\n                   exit when Found;\n                end if;\n \n@@ -3192,12 +3314,12 @@ package body Prj.Nmsc is\n                String_Element_Table.Increment_Last\n                  (In_Tree.String_Elements);\n                Element :=\n-                 (Value    => Canonical_Path,\n-                  Display_Value => Non_Canonical_Path,\n-                  Location => No_Location,\n-                  Flag     => False,\n-                  Next     => Nil_String,\n-                  Index    => 0);\n+                 (Value         => Name_Id (Canonical_Path),\n+                  Display_Value => Name_Id (Non_Canonical_Path),\n+                  Location      => No_Location,\n+                  Flag          => False,\n+                  Next          => Nil_String,\n+                  Index         => 0);\n \n                --  Case of first source directory\n \n@@ -3212,16 +3334,14 @@ package body Prj.Nmsc is\n \n                   In_Tree.String_Elements.Table\n                     (Last_Source_Dir).Next :=\n-                      String_Element_Table.Last\n-                        (In_Tree.String_Elements);\n+                      String_Element_Table.Last (In_Tree.String_Elements);\n                end if;\n \n                --  And register this source directory as the new last\n \n                Last_Source_Dir  := String_Element_Table.Last\n                  (In_Tree.String_Elements);\n-               In_Tree.String_Elements.Table (Last_Source_Dir) :=\n-                 Element;\n+               In_Tree.String_Elements.Table (Last_Source_Dir) := Element;\n             end if;\n \n             --  Now look for subdirectories. We do that even when this\n@@ -3316,18 +3436,18 @@ package body Prj.Nmsc is\n             end if;\n \n             declare\n-               Base_Dir : constant Name_Id := Name_Find;\n+               Base_Dir : constant File_Name_Type := Name_Find;\n                Root_Dir : constant String :=\n                             Normalize_Pathname\n-                              (Name      => Get_Name_String (Base_Dir),\n-                               Directory =>\n+                              (Name           => Get_Name_String (Base_Dir),\n+                               Directory      =>\n                                  Get_Name_String (Data.Display_Directory),\n                                Resolve_Links  => False,\n                                Case_Sensitive => True);\n \n             begin\n                if Root_Dir'Length = 0 then\n-                  Err_Vars.Error_Msg_Name_1 := Base_Dir;\n+                  Err_Vars.Error_Msg_File_1 := Base_Dir;\n \n                   if Location = No_Location then\n                      Error_Msg\n@@ -3363,17 +3483,20 @@ package body Prj.Nmsc is\n \n          else\n             declare\n-               Path_Name         : Name_Id;\n-               Display_Path_Name : Name_Id;\n+               Path_Name         : Path_Name_Type;\n+               Display_Path_Name : Path_Name_Type;\n \n             begin\n                Locate_Directory\n-                 (Project, In_Tree,\n-                  From, Data.Display_Directory,\n-                  Path_Name, Display_Path_Name);\n+                 (Project,\n+                  In_Tree,\n+                  From,\n+                  Data.Display_Directory,\n+                  Path_Name,\n+                  Display_Path_Name);\n \n-               if Path_Name = No_Name then\n-                  Err_Vars.Error_Msg_Name_1 := From;\n+               if Path_Name = No_Path then\n+                  Err_Vars.Error_Msg_File_1 := From;\n \n                   if Location = No_Location then\n                      Error_Msg\n@@ -3388,13 +3511,13 @@ package body Prj.Nmsc is\n                   end if;\n \n                else\n-                  --  As it is an existing directory, we add it to\n-                  --  the list of directories.\n+                  --  As it is an existing directory, we add it to the list of\n+                  --  directories.\n \n                   String_Element_Table.Increment_Last\n                     (In_Tree.String_Elements);\n-                  Element.Value := Path_Name;\n-                  Element.Display_Value := Display_Path_Name;\n+                  Element.Value := Name_Id (Path_Name);\n+                  Element.Display_Value := Name_Id (Display_Path_Name);\n \n                   if Last_Source_Dir = Nil_String then\n \n@@ -3409,16 +3532,14 @@ package body Prj.Nmsc is\n \n                      In_Tree.String_Elements.Table\n                        (Last_Source_Dir).Next :=\n-                         String_Element_Table.Last\n-                           (In_Tree.String_Elements);\n+                         String_Element_Table.Last (In_Tree.String_Elements);\n                   end if;\n \n                   --  And register this source directory as the new last\n \n                   Last_Source_Dir := String_Element_Table.Last\n                     (In_Tree.String_Elements);\n-                  In_Tree.String_Elements.Table\n-                    (Last_Source_Dir) := Element;\n+                  In_Tree.String_Elements.Table (Last_Source_Dir) := Element;\n                end if;\n             end;\n          end if;\n@@ -3454,15 +3575,20 @@ package body Prj.Nmsc is\n             --  We check that the specified object directory does exist\n \n             Locate_Directory\n-              (Project, In_Tree, Object_Dir.Value, Data.Display_Directory,\n-               Data.Object_Directory, Data.Display_Object_Dir,\n-               Create => \"object\", Location => Object_Dir.Location);\n+              (Project,\n+               In_Tree,\n+               File_Name_Type (Object_Dir.Value),\n+               Data.Display_Directory,\n+               Data.Object_Directory,\n+               Data.Display_Object_Dir,\n+               Create   => \"object\",\n+               Location => Object_Dir.Location);\n \n-            if Data.Object_Directory = No_Name then\n+            if Data.Object_Directory = No_Path then\n \n                --  The object directory does not exist, report an error\n \n-               Err_Vars.Error_Msg_Name_1 := Object_Dir.Value;\n+               Err_Vars.Error_Msg_File_1 := File_Name_Type (Object_Dir.Value);\n                Error_Msg\n                  (Project, In_Tree,\n                   \"the object directory { cannot be found\",\n@@ -3473,7 +3599,7 @@ package body Prj.Nmsc is\n                --  tools that recover from errors; for example, these tools\n                --  could create the non existent directory.\n \n-               Data.Display_Object_Dir := Object_Dir.Value;\n+               Data.Display_Object_Dir := Path_Name_Type (Object_Dir.Value);\n                Get_Name_String (Object_Dir.Value);\n                Canonical_Case_File_Name (Name_Buffer (1 .. Name_Len));\n                Data.Object_Directory := Name_Find;\n@@ -3482,7 +3608,7 @@ package body Prj.Nmsc is\n       end if;\n \n       if Current_Verbosity = High then\n-         if Data.Object_Directory = No_Name then\n+         if Data.Object_Directory = No_Path then\n             Write_Line (\"No object directory\");\n          else\n             Write_Str (\"Object directory: \"\"\");\n@@ -3511,16 +3637,21 @@ package body Prj.Nmsc is\n                Exec_Dir.Location);\n \n          else\n-            --  We check that the specified object directory\n-            --  does exist.\n+            --  We check that the specified object directory does exist\n \n             Locate_Directory\n-              (Project, In_Tree, Exec_Dir.Value, Data.Directory,\n-               Data.Exec_Directory, Data.Display_Exec_Dir,\n-               Create => \"exec\", Location => Exec_Dir.Location);\n-\n-            if Data.Exec_Directory = No_Name then\n-               Err_Vars.Error_Msg_Name_1 := Exec_Dir.Value;\n+              (Project,\n+               In_Tree,\n+               File_Name_Type (Exec_Dir.Value),\n+               Data.Display_Directory,\n+               Data.Exec_Directory,\n+               Data.Display_Exec_Dir,\n+               Create   => \"exec\",\n+               Location => Exec_Dir.Location);\n+\n+            if Data.Exec_Directory = No_Path then\n+               Err_Vars.Error_Msg_File_1 :=\n+                 File_Name_Type (Exec_Dir.Value);\n                Error_Msg\n                  (Project, In_Tree,\n                   \"the exec directory { cannot be found\",\n@@ -3530,7 +3661,7 @@ package body Prj.Nmsc is\n       end if;\n \n       if Current_Verbosity = High then\n-         if Data.Exec_Directory = No_Name then\n+         if Data.Exec_Directory = No_Path then\n             Write_Line (\"No exec directory\");\n          else\n             Write_Str (\"Exec directory: \"\"\");\n@@ -3557,8 +3688,8 @@ package body Prj.Nmsc is\n          Data.Source_Dirs := String_Element_Table.Last\n            (In_Tree.String_Elements);\n          In_Tree.String_Elements.Table (Data.Source_Dirs) :=\n-           (Value         => Data.Directory,\n-            Display_Value => Data.Display_Directory,\n+           (Value         => Name_Id (Data.Directory),\n+            Display_Value => Name_Id (Data.Display_Directory),\n             Location      => No_Location,\n             Flag          => False,\n             Next          => Nil_String,\n@@ -3581,7 +3712,7 @@ package body Prj.Nmsc is\n          if Data.Extends = No_Project\n            and then  Data.Object_Directory = Data.Directory\n          then\n-            Data.Object_Directory := No_Name;\n+            Data.Object_Directory := No_Path;\n          end if;\n \n          Data.Source_Dirs           := Nil_String;\n@@ -3598,9 +3729,9 @@ package body Prj.Nmsc is\n             --  element of the list\n \n             while Source_Dir /= Nil_String loop\n-               Element :=\n-                 In_Tree.String_Elements.Table (Source_Dir);\n-               Find_Source_Dirs (Element.Value, Element.Location);\n+               Element := In_Tree.String_Elements.Table (Source_Dir);\n+               Find_Source_Dirs\n+                 (File_Name_Type (Element.Value), Element.Location);\n                Source_Dir := Element.Next;\n             end loop;\n          end;\n@@ -3627,7 +3758,6 @@ package body Prj.Nmsc is\n             Current := Element.Next;\n          end loop;\n       end;\n-\n    end Get_Directories;\n \n    ---------------\n@@ -3650,8 +3780,7 @@ package body Prj.Nmsc is\n \n       if Mains.Default then\n          if Data.Extends /= No_Project then\n-            Data.Mains :=\n-              In_Tree.Projects.Table (Data.Extends).Mains;\n+            Data.Mains := In_Tree.Projects.Table (Data.Extends).Mains;\n          end if;\n \n       --  In a library project file, Main cannot be specified\n@@ -3677,7 +3806,7 @@ package body Prj.Nmsc is\n       File        : Prj.Util.Text_File;\n       Line        : String (1 .. 250);\n       Last        : Natural;\n-      Source_Name : Name_Id;\n+      Source_Name : File_Name_Type;\n \n    begin\n       Source_Names.Reset;\n@@ -3730,7 +3859,7 @@ package body Prj.Nmsc is\n    --------------\n \n    procedure Get_Unit\n-     (Canonical_File_Name : Name_Id;\n+     (Canonical_File_Name : File_Name_Type;\n       Naming              : Naming_Data;\n       Exception_Id        : out Ada_Naming_Exception_Id;\n       Unit_Name           : out Name_Id;\n@@ -3739,7 +3868,7 @@ package body Prj.Nmsc is\n    is\n       Info_Id  : Ada_Naming_Exception_Id :=\n                    Ada_Naming_Exceptions.Get (Canonical_File_Name);\n-      VMS_Name : Name_Id;\n+      VMS_Name : File_Name_Type;\n \n    begin\n       if Info_Id = No_Ada_Naming_Exception then\n@@ -3960,24 +4089,20 @@ package body Prj.Nmsc is\n                      S1 = 'i' or else\n                      S1 = 's'\n                   then\n-                     --  Children or separates of packages A, G, I or S. On\n-                     --  VMS these names are x__ ... and on other systems the\n-                     --  names are x~... (where x is a, g, i, or s).\n+                     --  Children or separates of packages A, G, I or S. These\n+                     --  names are x__ ... or x~... (where x is a, g, i, or s).\n+                     --  Both versions (x__... and x~...) are allowed in all\n+                     --  platforms, because it is not possible to know the\n+                     --  platform before processing of the project files.\n \n-                     if (OpenVMS_On_Target\n-                          and then S2 = '_'\n-                          and then S3 = '_')\n-                       or else\n-                         (not OpenVMS_On_Target\n-                           and then S2 = '~')\n-                     then\n+                     if S2 = '_' and then S3 = '_' then\n                         Src (Src'First + 1) := '.';\n+                        Src_Last := Src_Last - 1;\n+                        Src (Src'First + 2 .. Src_Last) :=\n+                          Src (Src'First + 3 .. Src_Last + 1);\n \n-                        if OpenVMS_On_Target then\n-                           Src_Last := Src_Last - 1;\n-                           Src (Src'First + 2 .. Src_Last) :=\n-                             Src (Src'First + 3 .. Src_Last + 1);\n-                        end if;\n+                     elsif S2 = '~' then\n+                        Src (Src'First + 1) := '.';\n \n                      --  If it is potentially a run time source, disable\n                      --  filling of the mapping file to avoid warnings.\n@@ -4056,22 +4181,22 @@ package body Prj.Nmsc is\n    procedure Locate_Directory\n      (Project  : Project_Id;\n       In_Tree  : Project_Tree_Ref;\n-      Name     : Name_Id;\n-      Parent   : Name_Id;\n-      Dir      : out Name_Id;\n-      Display  : out Name_Id;\n+      Name     : File_Name_Type;\n+      Parent   : Path_Name_Type;\n+      Dir      : out Path_Name_Type;\n+      Display  : out Path_Name_Type;\n       Create   : String := \"\";\n       Location : Source_Ptr := No_Location)\n    is\n-      The_Name        : constant String := Get_Name_String (Name);\n+      The_Name : constant String := Get_Name_String (Name);\n \n-      The_Parent      : constant String :=\n+      The_Parent : constant String :=\n                           Get_Name_String (Parent) & Directory_Separator;\n \n       The_Parent_Last : constant Natural :=\n                           Compute_Directory_Last (The_Parent);\n \n-      Full_Name       : Name_Id;\n+      Full_Name : File_Name_Type;\n \n    begin\n       if Current_Verbosity = High then\n@@ -4082,8 +4207,8 @@ package body Prj.Nmsc is\n          Write_Line (\"\"\")\");\n       end if;\n \n-      Dir     := No_Name;\n-      Display := No_Name;\n+      Dir     := No_Path;\n+      Display := No_Path;\n \n       if Is_Absolute_Path (The_Name) then\n          Full_Name := Name;\n@@ -4175,11 +4300,11 @@ package body Prj.Nmsc is\n       procedure Get_Path_Names_And_Record_Sources (Follow_Links : Boolean) is\n          Source_Dir : String_List_Id := Data.Source_Dirs;\n          Element    : String_Element;\n-         Path       : Name_Id;\n+         Path       : File_Name_Type;\n \n          Dir             : Dir_Type;\n-         Name            : Name_Id;\n-         Canonical_Name  : Name_Id;\n+         Name            : File_Name_Type;\n+         Canonical_Name  : File_Name_Type;\n          Name_Str        : String (1 .. 1_024);\n          Last            : Natural := 0;\n          NL              : Name_Location;\n@@ -4261,8 +4386,7 @@ package body Prj.Nmsc is\n             end;\n \n             if Source_Recorded then\n-               In_Tree.String_Elements.Table (Source_Dir).Flag :=\n-                 True;\n+               In_Tree.String_Elements.Table (Source_Dir).Flag := True;\n             end if;\n \n             Source_Dir := Element.Next;\n@@ -4275,7 +4399,7 @@ package body Prj.Nmsc is\n \n          while NL /= No_Name_Location loop\n             if not NL.Found then\n-               Err_Vars.Error_Msg_Name_1 := NL.Name;\n+               Err_Vars.Error_Msg_File_1 := NL.Name;\n \n                if First_Error then\n                   Error_Msg\n@@ -4367,16 +4491,15 @@ package body Prj.Nmsc is\n                   Current  : String_List_Id := Sources.Values;\n                   Element  : String_Element;\n                   Location : Source_Ptr;\n-                  Name     : Name_Id;\n+                  Name     : File_Name_Type;\n \n                begin\n                   Source_Names.Reset;\n \n                   Data.Ada_Sources_Present := Current /= Nil_String;\n \n                   while Current /= Nil_String loop\n-                     Element :=\n-                       In_Tree.String_Elements.Table (Current);\n+                     Element := In_Tree.String_Elements.Table (Current);\n                      Get_Name_String (Element.Value);\n                      Canonical_Case_File_Name (Name_Buffer (1 .. Name_Len));\n                      Name := Name_Find;\n@@ -4409,18 +4532,21 @@ package body Prj.Nmsc is\n \n             elsif not Source_List_File.Default then\n \n-               --  Source_List_File is the name of the file\n-               --  that contains the source file names\n+               --  Source_List_File is the name of the file that contains the\n+               --  source file names\n \n                declare\n                   Source_File_Path_Name : constant String :=\n                                             Path_Name_Of\n-                                              (Source_List_File.Value,\n+                                              (File_Name_Type\n+                                                 (Source_List_File.Value),\n                                                Data.Directory);\n \n                begin\n                   if Source_File_Path_Name'Length = 0 then\n-                     Err_Vars.Error_Msg_Name_1 := Source_List_File.Value;\n+                     Err_Vars.Error_Msg_File_1 :=\n+                       File_Name_Type (Source_List_File.Value);\n+\n                      Error_Msg\n                        (Project, In_Tree,\n                         \"file with sources { does not exist\",\n@@ -4446,135 +4572,104 @@ package body Prj.Nmsc is\n             --  such in the Units table.\n \n             if not Locally_Removed.Default then\n+               declare\n+                  Current  : String_List_Id;\n+                  Element  : String_Element;\n+                  Location : Source_Ptr;\n+                  OK       : Boolean;\n+                  Unit     : Unit_Data;\n+                  Name     : File_Name_Type;\n+                  Extended : Project_Id;\n \n-               --  Sources can be locally removed only in extending\n-               --  project files.\n-\n-               if Data.Extends = No_Project then\n-                  Error_Msg\n-                    (Project, In_Tree,\n-                     \"Locally_Removed_Files can only be used \" &\n-                     \"in an extending project file\",\n-                     Locally_Removed.Location);\n-\n-               else\n-                  declare\n-                     Current  : String_List_Id := Locally_Removed.Values;\n-                     Element  : String_Element;\n-                     Location : Source_Ptr;\n-                     OK       : Boolean;\n-                     Unit     : Unit_Data;\n-                     Name     : Name_Id;\n-                     Extended : Project_Id;\n-\n-                  begin\n-                     while Current /= Nil_String loop\n-                        Element :=\n-                          In_Tree.String_Elements.Table (Current);\n-                        Get_Name_String (Element.Value);\n-                        Canonical_Case_File_Name (Name_Buffer (1 .. Name_Len));\n-                        Name := Name_Find;\n-\n-                        --  If the element has no location, then use the\n-                        --  location of Locally_Removed to report\n-                        --  possible errors.\n-\n-                        if Element.Location = No_Location then\n-                           Location := Locally_Removed.Location;\n-                        else\n-                           Location := Element.Location;\n-                        end if;\n+               begin\n+                  Current := Locally_Removed.Values;\n+                  while Current /= Nil_String loop\n+                     Element :=\n+                       In_Tree.String_Elements.Table (Current);\n+                     Get_Name_String (Element.Value);\n+                     Canonical_Case_File_Name (Name_Buffer (1 .. Name_Len));\n+                     Name := Name_Find;\n \n-                        OK := False;\n+                     --  If the element has no location, then use the\n+                     --  location of Locally_Removed to report\n+                     --  possible errors.\n \n-                        for Index in Unit_Table.First ..\n-                                  Unit_Table.Last (In_Tree.Units)\n-                        loop\n-                           Unit := In_Tree.Units.Table (Index);\n+                     if Element.Location = No_Location then\n+                        Location := Locally_Removed.Location;\n+                     else\n+                        Location := Element.Location;\n+                     end if;\n \n-                           if Unit.File_Names (Specification).Name = Name then\n-                              OK := True;\n+                     OK := False;\n \n-                              --  Check that this is from a project that\n-                              --  the current project extends, but not the\n-                              --  current project.\n+                     for Index in Unit_Table.First ..\n+                       Unit_Table.Last (In_Tree.Units)\n+                     loop\n+                        Unit := In_Tree.Units.Table (Index);\n \n-                              Extended := Unit.File_Names\n-                                (Specification).Project;\n+                        if Unit.File_Names (Specification).Name = Name then\n+                           OK := True;\n \n-                              if Extended = Project then\n-                                 Error_Msg\n-                                   (Project, In_Tree,\n-                                    \"cannot remove a source \" &\n-                                    \"of the same project\",\n-                                    Location);\n+                           --  Check that this is from the current project or\n+                           --  that the current project extends.\n \n-                              elsif\n-                                Project_Extends (Project, Extended, In_Tree)\n-                              then\n-                                 Unit.File_Names\n-                                   (Specification).Path := Slash;\n-                                 Unit.File_Names\n-                                   (Specification).Needs_Pragma := False;\n-                                 In_Tree.Units.Table (Index) :=\n-                                   Unit;\n-                                 Add_Forbidden_File_Name\n-                                   (Unit.File_Names (Specification).Name);\n-                                 exit;\n-\n-                              else\n-                                 Error_Msg\n-                                   (Project, In_Tree,\n-                                    \"cannot remove a source from \" &\n-                                    \"another project\",\n-                                    Location);\n-                              end if;\n+                           Extended := Unit.File_Names (Specification).Project;\n \n-                           elsif\n-                             Unit.File_Names (Body_Part).Name = Name\n+                           if Extended = Project or else\n+                              Project_Extends (Project, Extended, In_Tree)\n                            then\n-                              OK := True;\n+                              Unit.File_Names\n+                                (Specification).Path := Slash;\n+                              Unit.File_Names\n+                                (Specification).Needs_Pragma := False;\n+                              In_Tree.Units.Table (Index) := Unit;\n+                              Add_Forbidden_File_Name\n+                                (Unit.File_Names (Specification).Name);\n+                              exit;\n \n-                              --  Check that this is from a project that\n-                              --  the current project extends, but not the\n-                              --  current project.\n+                           else\n+                              Error_Msg\n+                                (Project, In_Tree,\n+                                 \"cannot remove a source from \" &\n+                                 \"another project\",\n+                                 Location);\n+                           end if;\n \n-                              Extended := Unit.File_Names\n-                                (Body_Part).Project;\n+                        elsif\n+                          Unit.File_Names (Body_Part).Name = Name\n+                        then\n+                           OK := True;\n \n-                              if Extended = Project then\n-                                 Error_Msg\n-                                   (Project, In_Tree,\n-                                    \"cannot remove a source \" &\n-                                    \"of the same project\",\n-                                    Location);\n+                           --  Check that this is from the current project or\n+                           --  that the current project extends.\n \n-                              elsif\n-                                Project_Extends (Project, Extended, In_Tree)\n-                              then\n-                                 Unit.File_Names (Body_Part).Path := Slash;\n-                                 Unit.File_Names (Body_Part).Needs_Pragma\n-                                   := False;\n-                                 In_Tree.Units.Table (Index) :=\n-                                   Unit;\n-                                 Add_Forbidden_File_Name\n-                                   (Unit.File_Names (Body_Part).Name);\n-                                 exit;\n-                              end if;\n+                           Extended := Unit.File_Names\n+                             (Body_Part).Project;\n \n+                           if Extended = Project or else\n+                              Project_Extends (Project, Extended, In_Tree)\n+                           then\n+                              Unit.File_Names (Body_Part).Path := Slash;\n+                              Unit.File_Names (Body_Part).Needs_Pragma\n+                                := False;\n+                              In_Tree.Units.Table (Index) := Unit;\n+                              Add_Forbidden_File_Name\n+                                (Unit.File_Names (Body_Part).Name);\n+                              exit;\n                            end if;\n-                        end loop;\n \n-                        if not OK then\n-                           Err_Vars.Error_Msg_Name_1 := Name;\n-                           Error_Msg\n-                             (Project, In_Tree, \"unknown file {\", Location);\n                         end if;\n-\n-                        Current := Element.Next;\n                      end loop;\n-                  end;\n-               end if;\n+\n+                     if not OK then\n+                        Err_Vars.Error_Msg_File_1 := Name;\n+                        Error_Msg\n+                          (Project, In_Tree, \"unknown file {\", Location);\n+                     end if;\n+\n+                     Current := Element.Next;\n+                  end loop;\n+               end;\n             end if;\n          end;\n       end if;\n@@ -4617,7 +4712,7 @@ package body Prj.Nmsc is\n                        In_Tree   => In_Tree);\n                   Element_Id        : String_List_Id;\n                   Element           : String_Element;\n-                  File_Id           : Name_Id;\n+                  File_Id           : File_Name_Type;\n                   Source_Found      : Boolean := False;\n \n                begin\n@@ -4711,7 +4806,7 @@ package body Prj.Nmsc is\n                         Current  : String_List_Id := Sources.Values;\n                         Element  : String_Element;\n                         Location : Source_Ptr;\n-                        Name     : Name_Id;\n+                        Name     : File_Name_Type;\n \n                      begin\n                         Source_Names.Reset;\n@@ -4768,13 +4863,14 @@ package body Prj.Nmsc is\n                      declare\n                         Source_File_Path_Name : constant String :=\n                           Path_Name_Of\n-                            (Source_List_File.Value,\n+                            (File_Name_Type (Source_List_File.Value),\n                              Data.Directory);\n \n                      begin\n                         if Source_File_Path_Name'Length = 0 then\n-                           Err_Vars.Error_Msg_Name_1 :=\n-                             Source_List_File.Value;\n+                           Err_Vars.Error_Msg_File_1 :=\n+                             File_Name_Type (Source_List_File.Value);\n+\n                            Error_Msg\n                              (Project, In_Tree,\n                               \"file with sources { does not exist\",\n@@ -4821,18 +4917,18 @@ package body Prj.Nmsc is\n    ------------------\n \n    function Path_Name_Of\n-     (File_Name : Name_Id;\n-      Directory : Name_Id) return String\n+     (File_Name : File_Name_Type;\n+      Directory : Path_Name_Type) return String\n    is\n-      Result : String_Access;\n-\n       The_Directory : constant String := Get_Name_String (Directory);\n+      Result        : String_Access;\n \n    begin\n       Get_Name_String (File_Name);\n-      Result := Locate_Regular_File\n-        (File_Name => Name_Buffer (1 .. Name_Len),\n-         Path      => The_Directory);\n+      Result :=\n+        Locate_Regular_File\n+         (File_Name => Name_Buffer (1 .. Name_Len),\n+          Path      => The_Directory);\n \n       if Result = null then\n          return \"\";\n@@ -4864,16 +4960,19 @@ package body Prj.Nmsc is\n          if Element.Index /= No_Name then\n             Unit :=\n               (Kind => Kind,\n-               Unit => Element.Index,\n+               Unit => Name_Id (Element.Index),\n                Next => No_Ada_Naming_Exception);\n             Reverse_Ada_Naming_Exceptions.Set\n               (Unit, (Element.Value.Value, Element.Value.Index));\n-            Unit.Next := Ada_Naming_Exceptions.Get (Element.Value.Value);\n+            Unit.Next :=\n+              (Ada_Naming_Exceptions.Get\n+                (File_Name_Type (Element.Value.Value)));\n             Ada_Naming_Exception_Table.Increment_Last;\n             Ada_Naming_Exception_Table.Table\n               (Ada_Naming_Exception_Table.Last) := Unit;\n             Ada_Naming_Exceptions.Set\n-              (Element.Value.Value, Ada_Naming_Exception_Table.Last);\n+              (File_Name_Type (Element.Value.Value),\n+               Ada_Naming_Exception_Table.Last);\n          end if;\n \n          Current := Element.Next;\n@@ -4908,8 +5007,8 @@ package body Prj.Nmsc is\n    -----------------------\n \n    procedure Record_Ada_Source\n-     (File_Name       : Name_Id;\n-      Path_Name       : Name_Id;\n+     (File_Name       : File_Name_Type;\n+      Path_Name       : File_Name_Type;\n       Project         : Project_Id;\n       In_Tree         : Project_Tree_Ref;\n       Data            : in out Project_Data;\n@@ -4918,8 +5017,8 @@ package body Prj.Nmsc is\n       Source_Recorded : in out Boolean;\n       Follow_Links    : Boolean)\n    is\n-      Canonical_File_Name : Name_Id;\n-      Canonical_Path_Name : Name_Id;\n+      Canonical_File_Name : File_Name_Type;\n+      Canonical_Path_Name : File_Name_Type;\n \n       Exception_Id : Ada_Naming_Exception_Id;\n       Unit_Name    : Name_Id;\n@@ -4954,8 +5053,7 @@ package body Prj.Nmsc is\n          Canonical_Path_Name := Name_Find;\n       end;\n \n-      --  Find out the unit name, the unit kind and if it needs\n-      --  a specific SFN pragma.\n+      --  Find out unit name/unit kind and if it needs a specific SFN pragma\n \n       Get_Unit\n         (Canonical_File_Name => Canonical_File_Name,\n@@ -5014,36 +5112,34 @@ package body Prj.Nmsc is\n \n             --  Put the file name in the list of sources of the project\n \n-            String_Element_Table.Increment_Last\n-              (In_Tree.String_Elements);\n+            String_Element_Table.Increment_Last (In_Tree.String_Elements);\n             In_Tree.String_Elements.Table\n               (String_Element_Table.Last\n                  (In_Tree.String_Elements)) :=\n-              (Value         => Canonical_File_Name,\n-               Display_Value => File_Name,\n+              (Value         => Name_Id (Canonical_File_Name),\n+               Display_Value => Name_Id (File_Name),\n                Location      => No_Location,\n                Flag          => False,\n                Next          => Nil_String,\n                Index         => Unit_Index);\n \n             if Current_Source = Nil_String then\n-               Data.Sources := String_Element_Table.Last\n-                                 (In_Tree.String_Elements);\n+               Data.Sources :=\n+                 String_Element_Table.Last (In_Tree.String_Elements);\n             else\n-               In_Tree.String_Elements.Table\n-                 (Current_Source).Next :=\n-                 String_Element_Table.Last\n-                   (In_Tree.String_Elements);\n+               In_Tree.String_Elements.Table (Current_Source).Next :=\n+                 String_Element_Table.Last (In_Tree.String_Elements);\n             end if;\n \n-            Current_Source := String_Element_Table.Last\n-                                (In_Tree.String_Elements);\n+            Current_Source :=\n+              String_Element_Table.Last (In_Tree.String_Elements);\n \n             --  Put the unit in unit list\n \n             declare\n-               The_Unit      : Unit_Id :=\n-                 Units_Htable.Get (In_Tree.Units_HT, Unit_Name);\n+               The_Unit : Unit_Id :=\n+                            Units_Htable.Get (In_Tree.Units_HT, Unit_Name);\n+\n                The_Unit_Data : Unit_Data;\n \n             begin\n@@ -5060,7 +5156,11 @@ package body Prj.Nmsc is\n                if The_Unit /= No_Unit then\n                   The_Unit_Data := In_Tree.Units.Table (The_Unit);\n \n-                  if The_Unit_Data.File_Names (Unit_Kind).Name = No_Name\n+                  if (The_Unit_Data.File_Names (Unit_Kind).Name =\n+                                                      Canonical_File_Name\n+                        and then\n+                          The_Unit_Data.File_Names (Unit_Kind).Path = Slash)\n+                    or else The_Unit_Data.File_Names (Unit_Kind).Name = No_File\n                     or else Project_Extends\n                       (Data.Extends,\n                        The_Unit_Data.File_Names (Unit_Kind).Project,\n@@ -5075,9 +5175,7 @@ package body Prj.Nmsc is\n \n                      Unit_Prj := (Unit => The_Unit, Project => Project);\n                      Files_Htable.Set\n-                       (In_Tree.Files_HT,\n-                        Canonical_File_Name,\n-                        Unit_Prj);\n+                       (In_Tree.Files_HT, Canonical_File_Name, Unit_Prj);\n \n                      The_Unit_Data.File_Names (Unit_Kind) :=\n                        (Name         => Canonical_File_Name,\n@@ -5087,8 +5185,7 @@ package body Prj.Nmsc is\n                         Display_Path => Path_Name,\n                         Project      => Project,\n                         Needs_Pragma => Needs_Pragma);\n-                     In_Tree.Units.Table (The_Unit) :=\n-                       The_Unit_Data;\n+                     In_Tree.Units.Table (The_Unit) := The_Unit_Data;\n                      Source_Recorded := True;\n \n                   elsif The_Unit_Data.File_Names (Unit_Kind).Project = Project\n@@ -5113,29 +5210,28 @@ package body Prj.Nmsc is\n \n                      if The_Location = No_Location then\n                         The_Location :=\n-                          In_Tree.Projects.Table\n-                            (Project).Location;\n+                          In_Tree.Projects.Table (Project).Location;\n                      end if;\n \n                      Err_Vars.Error_Msg_Name_1 := Unit_Name;\n                      Error_Msg\n-                       (Project, In_Tree, \"duplicate source {\", The_Location);\n+                       (Project, In_Tree, \"duplicate source %%\", The_Location);\n \n                      Err_Vars.Error_Msg_Name_1 :=\n                        In_Tree.Projects.Table\n                          (The_Unit_Data.File_Names (Unit_Kind).Project).Name;\n-                     Err_Vars.Error_Msg_Name_2 :=\n+                     Err_Vars.Error_Msg_File_1 :=\n                        The_Unit_Data.File_Names (Unit_Kind).Path;\n                      Error_Msg\n                        (Project, In_Tree,\n-                        \"\\   project file {, {\", The_Location);\n+                        \"\\\\   project file %%, {\", The_Location);\n \n                      Err_Vars.Error_Msg_Name_1 :=\n                        In_Tree.Projects.Table (Project).Name;\n-                     Err_Vars.Error_Msg_Name_2 := Canonical_Path_Name;\n+                     Err_Vars.Error_Msg_File_1 := Canonical_Path_Name;\n                      Error_Msg\n                        (Project, In_Tree,\n-                        \"\\   project file {, {\", The_Location);\n+                        \"\\\\   project file %%, {\", The_Location);\n                   end if;\n \n                --  It is a new unit, create a new record\n@@ -5152,25 +5248,21 @@ package body Prj.Nmsc is\n                   if not File_Name_Recorded and then\n                     Unit_Prj /= No_Unit_Project\n                   then\n-                     Error_Msg_Name_1 := File_Name;\n-                     Error_Msg_Name_2 :=\n-                       In_Tree.Projects.Table\n-                         (Unit_Prj.Project).Name;\n+                     Error_Msg_File_1 := File_Name;\n+                     Error_Msg_Name_1 :=\n+                       In_Tree.Projects.Table (Unit_Prj.Project).Name;\n                      Error_Msg\n                        (Project, In_Tree,\n-                        \"{ is already a source of project {\",\n+                        \"{ is already a source of project %%\",\n                         Location);\n \n                   else\n                      Unit_Table.Increment_Last (In_Tree.Units);\n                      The_Unit := Unit_Table.Last (In_Tree.Units);\n-                     Units_Htable.Set\n-                       (In_Tree.Units_HT, Unit_Name, The_Unit);\n+                     Units_Htable.Set (In_Tree.Units_HT, Unit_Name, The_Unit);\n                      Unit_Prj := (Unit => The_Unit, Project => Project);\n                      Files_Htable.Set\n-                       (In_Tree.Files_HT,\n-                        Canonical_File_Name,\n-                        Unit_Prj);\n+                       (In_Tree.Files_HT, Canonical_File_Name, Unit_Prj);\n                      The_Unit_Data.Name := Unit_Name;\n                      The_Unit_Data.File_Names (Unit_Kind) :=\n                        (Name         => Canonical_File_Name,\n@@ -5180,8 +5272,7 @@ package body Prj.Nmsc is\n                         Display_Path => Path_Name,\n                         Project      => Project,\n                         Needs_Pragma => Needs_Pragma);\n-                     In_Tree.Units.Table (The_Unit) :=\n-                       The_Unit_Data;\n+                     In_Tree.Units.Table (The_Unit) := The_Unit_Data;\n                      Source_Recorded := True;\n                   end if;\n                end if;\n@@ -5204,22 +5295,20 @@ package body Prj.Nmsc is\n       Language          : Language_Index;\n       Naming_Exceptions : Boolean)\n    is\n-      Source_Dir : String_List_Id := Data.Source_Dirs;\n-      Element    : String_Element;\n-      Path       : Name_Id;\n-\n+      Source_Dir     : String_List_Id;\n+      Element        : String_Element;\n+      Path           : File_Name_Type;\n       Dir            : Dir_Type;\n-      Canonical_Name : Name_Id;\n-\n-      Name_Str : String (1 .. 1_024);\n-      Last     : Natural := 0;\n-      NL       : Name_Location;\n-\n-      First_Error : Boolean := True;\n+      Canonical_Name : File_Name_Type;\n+      Name_Str       : String (1 .. 1_024);\n+      Last           : Natural := 0;\n+      NL             : Name_Location;\n+      First_Error    : Boolean := True;\n \n       Suffix : constant String := Body_Suffix_Of (Language, Data, In_Tree);\n \n    begin\n+      Source_Dir := Data.Source_Dirs;\n       while Source_Dir /= Nil_String loop\n          Element := In_Tree.String_Elements.Table (Source_Dir);\n \n@@ -5261,7 +5350,7 @@ package body Prj.Nmsc is\n                   if NL /= No_Name_Location then\n                      if NL.Found then\n                         if not Data.Known_Order_Of_Source_Dirs then\n-                           Error_Msg_Name_1 := Canonical_Name;\n+                           Error_Msg_File_1 := Canonical_Name;\n                            Error_Msg\n                              (Project, In_Tree,\n                               \"{ is found in several source directories\",\n@@ -5306,7 +5395,7 @@ package body Prj.Nmsc is\n \n          while NL /= No_Name_Location loop\n             if not NL.Found then\n-               Err_Vars.Error_Msg_Name_1 := NL.Name;\n+               Err_Vars.Error_Msg_File_1 := NL.Name;\n \n                if First_Error then\n                   Error_Msg\n@@ -5427,7 +5516,7 @@ package body Prj.Nmsc is\n    function Suffix_For\n      (Language : Language_Index;\n       Naming   : Naming_Data;\n-      In_Tree  : Project_Tree_Ref) return Name_Id\n+      In_Tree  : Project_Tree_Ref) return File_Name_Type\n    is\n       Suffix : constant Variable_Value :=\n         Value_Of\n@@ -5452,7 +5541,7 @@ package body Prj.Nmsc is\n                Add_Str_To_Name_Buffer (\".cpp\");\n \n             when others =>\n-               return No_Name;\n+               return No_File;\n          end case;\n \n       --  Otherwise use the one specified\n@@ -5491,15 +5580,13 @@ package body Prj.Nmsc is\n          Get_Name_String (Unit);\n          To_Lower (Name_Buffer (1 .. Name_Len));\n          Unit := Name_Find;\n-         The_Unit_Id := Units_Htable.Get\n-           (In_Tree.Units_HT, Unit);\n-         Location := In_Tree.Array_Elements.Table\n-                                            (Conv).Value.Location;\n+         The_Unit_Id := Units_Htable.Get (In_Tree.Units_HT, Unit);\n+         Location := In_Tree.Array_Elements.Table (Conv).Value.Location;\n \n          if The_Unit_Id = No_Unit then\n             Error_Msg\n               (Project, In_Tree,\n-               \"?unknown unit {\",\n+               \"?unknown unit %%\",\n                Location);\n \n          else\n@@ -5514,7 +5601,7 @@ package body Prj.Nmsc is\n                then\n                   Error_Msg\n                     (Project, In_Tree,\n-                     \"?source of spec of unit { ({)\" &\n+                     \"?source of spec of unit %% (%%)\" &\n                      \" cannot be found in this project\",\n                      Location);\n                end if;\n@@ -5526,7 +5613,7 @@ package body Prj.Nmsc is\n                then\n                   Error_Msg\n                     (Project, In_Tree,\n-                     \"?source of body of unit { ({)\" &\n+                     \"?source of body of unit %% (%%)\" &\n                      \" cannot be found in this project\",\n                      Location);\n                end if;"}, {"sha": "1b2e3583b8296871ace5af490115557a9ba45995", "filename": "gcc/ada/prj.ads", "status": "modified", "additions": 71, "deletions": 62, "changes": 133, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/751089b2718981880ac42d7f3d6013374460729b/gcc%2Fada%2Fprj.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/751089b2718981880ac42d7f3d6013374460729b/gcc%2Fada%2Fprj.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj.ads?ref=751089b2718981880ac42d7f3d6013374460729b", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2001-2006, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2001-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -31,13 +31,14 @@\n --  See in particular Prj.Pars and Prj.Env.\n \n with Casing; use Casing;\n+with Namet;  use Namet;\n with Scans;  use Scans;\n with Table;\n with Types;  use Types;\n \n with GNAT.Dynamic_HTables; use GNAT.Dynamic_HTables;\n with GNAT.Dynamic_Tables;\n-with GNAT.OS_Lib;           use GNAT.OS_Lib;\n+with GNAT.OS_Lib;          use GNAT.OS_Lib;\n \n with System.HTable;\n \n@@ -54,17 +55,17 @@ package Prj is\n \n    No_Project_Tree : constant Project_Tree_Ref;\n \n-   function Default_Ada_Spec_Suffix return Name_Id;\n+   function Default_Ada_Spec_Suffix return File_Name_Type;\n    pragma Inline (Default_Ada_Spec_Suffix);\n    --  The Name_Id for the standard GNAT suffix for Ada spec source file\n    --  name \".ads\". Initialized by Prj.Initialize.\n \n-   function Default_Ada_Body_Suffix return Name_Id;\n+   function Default_Ada_Body_Suffix return File_Name_Type;\n    pragma Inline (Default_Ada_Body_Suffix);\n    --  The Name_Id for the standard GNAT suffix for Ada body source file\n    --  name \".adb\". Initialized by Prj.Initialize.\n \n-   function Slash return Name_Id;\n+   function Slash return File_Name_Type;\n    pragma Inline (Slash);\n    --  \"/\", used as the path of locally removed files\n \n@@ -82,6 +83,9 @@ package Prj is\n    --    - Warning: issue a warning, does not cause the tool to fail\n    --    - Error:   issue an error, causes the tool to fail\n \n+   type Yes_No_Unknown is (Yes, No, Unknown);\n+   --  Tri-state to decide if -lgnarl is needed when linking\n+\n    -----------------------------------------------------\n    -- Multi-language Stuff That Will be Modified Soon --\n    -----------------------------------------------------\n@@ -110,7 +114,8 @@ package Prj is\n \n    function Hash is new System.HTable.Hash (Header_Num => Header_Num);\n \n-   function Hash (Name : Name_Id) return Header_Num;\n+   function Hash (Name : Name_Id)        return Header_Num;\n+   function Hash (Name : File_Name_Type) return Header_Num;\n \n    package Language_Indexes is new System.HTable.Simple_HTable\n      (Header_Num => Header_Num,\n@@ -158,16 +163,16 @@ package Prj is\n    --  The table for the presence of languages with an index that is outside\n    --  of First_Language_Indexes.\n \n-   type Impl_Suffix_Array is array (First_Language_Indexes) of Name_Id;\n+   type Impl_Suffix_Array is array (First_Language_Indexes) of File_Name_Type;\n    --  Suffixes for the non spec sources of the different supported languages\n    --  in a project.\n \n-   No_Impl_Suffixes : constant Impl_Suffix_Array := (others => No_Name);\n+   No_Impl_Suffixes : constant Impl_Suffix_Array := (others => No_File);\n    --  A default value for the non spec source suffixes\n \n    type Supp_Suffix is record\n-      Index   : Language_Index := No_Language_Index;\n-      Suffix  : Name_Id := No_Name;\n+      Index   : Language_Index      := No_Language_Index;\n+      Suffix  : File_Name_Type      := No_File;\n       Next    : Supp_Language_Index := No_Supp_Language_Index;\n    end record;\n \n@@ -247,14 +252,14 @@ package Prj is\n \n    type Other_Source is record\n       Language         : Language_Index;       --  language of the source\n-      File_Name        : Name_Id;              --  source file simple name\n-      Path_Name        : Name_Id;              --  source full path name\n+      File_Name        : File_Name_Type;       --  source file simple name\n+      Path_Name        : Path_Name_Type;       --  source full path name\n       Source_TS        : Time_Stamp_Type;      --  source file time stamp\n-      Object_Name      : Name_Id;              --  object file simple name\n-      Object_Path      : Name_Id;              --  object full path name\n+      Object_Name      : File_Name_Type;       --  object file simple name\n+      Object_Path      : Path_Name_Type;       --  object full path name\n       Object_TS        : Time_Stamp_Type;      --  object file time stamp\n-      Dep_Name         : Name_Id;              --  dependency file simple name\n-      Dep_Path         : Name_Id;              --  dependency full path name\n+      Dep_Name         : File_Name_Type;       --  dependency file simple name\n+      Dep_Path         : Path_Name_Type;       --  dependency full path name\n       Dep_TS           : Time_Stamp_Type;      --  dependency file time stamp\n       Naming_Exception : Boolean := False;     --  True if a naming exception\n       Next             : Other_Source_Id := No_Other_Source;\n@@ -283,13 +288,14 @@ package Prj is\n    --  The current value of the verbosity the project files are parsed with\n \n    type Lib_Kind is (Static, Dynamic, Relocatable);\n-   type Policy is (Autonomous, Compliant, Controlled, Restricted);\n+   type Policy is (Autonomous, Compliant, Controlled, Restricted, Direct);\n    --  Type to specify the symbol policy, when symbol control is supported.\n    --  See full explanation about this type in package Symbols.\n    --    Autonomous: Create a symbol file without considering any reference\n    --    Compliant:  Try to be as compatible as possible with an existing ref\n    --    Controlled: Fail if symbols are not the same as those in the reference\n    --    Restricted: Restrict the symbols to those in the symbol file\n+   --    Direct:     The symbol file is used as is\n \n    type Symbol_Record is record\n       Symbol_File   : Name_Id := No_Name;\n@@ -322,7 +328,7 @@ package Prj is\n       Next          : String_List_Id := Nil_String;\n    end record;\n    --  To hold values for string list variables and array elements.\n-   --  Component Flag may be used for various purposes. For source\n+   --  The component Flag may be used for various purposes. For source\n    --  directories, it indicates if the directory contains Ada source(s).\n \n    package String_Element_Table is new GNAT.Dynamic_Tables\n@@ -464,7 +470,7 @@ package Prj is\n \n    type Naming_Data is record\n \n-      Dot_Replacement : Name_Id := No_Name;\n+      Dot_Replacement : File_Name_Type := No_File;\n       --  The string to replace '.' in the source file name (for Ada)\n \n       Dot_Repl_Loc : Source_Ptr := No_Location;\n@@ -479,7 +485,7 @@ package Prj is\n       --  source file name of a spec.\n       --  Indexed by the programming language.\n \n-      Ada_Spec_Suffix : Name_Id := No_Name;\n+      Ada_Spec_Suffix : File_Name_Type := No_File;\n       --  The suffix of the Ada spec sources\n \n       Spec_Suffix_Loc : Source_Ptr := No_Location;\n@@ -495,14 +501,14 @@ package Prj is\n       --  source file name of a body.\n       --  Indexed by the programming language.\n \n-      Ada_Body_Suffix : Name_Id := No_Name;\n+      Ada_Body_Suffix : File_Name_Type := No_File;\n       --  The suffix of the Ada body sources\n \n       Body_Suffix_Loc : Source_Ptr := No_Location;\n       --  The position in the project file source where\n       --  Ada_Body_Suffix is defined.\n \n-      Separate_Suffix : Name_Id := No_Name;\n+      Separate_Suffix : File_Name_Type := No_File;\n       --  String to append to unit name for source file name of an Ada subunit\n \n       Sep_Suffix_Loc : Source_Ptr := No_Location;\n@@ -577,10 +583,10 @@ package Prj is\n       --  The name of the project with the spelling of its declaration.\n       --  Set by Prj.Proc.Process.\n \n-      Path_Name : Name_Id := No_Name;\n+      Path_Name : Path_Name_Type := No_Path;\n       --  The path name of the project file. Set by Prj.Proc.Process\n \n-      Display_Path_Name : Name_Id := No_Name;\n+      Display_Path_Name : Path_Name_Type := No_Path;\n       --  The path name used for display purposes. May be different from\n       --  Path_Name for platforms where the file names are case-insensitive.\n \n@@ -594,11 +600,12 @@ package Prj is\n       Mains : String_List_Id := Nil_String;\n       --  List of mains specified by attribute Main. Set by Prj.Nmsc.Check\n \n-      Directory : Name_Id := No_Name;\n+      Directory : Path_Name_Type := No_Path;\n       --  Directory where the project file resides. Set by Prj.Proc.Process\n \n-      Display_Directory : Name_Id := No_Name;\n-      --  comment ???\n+      Display_Directory : Path_Name_Type := No_Path;\n+      --  Project directory path name for display purposes. May be different\n+      --  from Directory for platforms where file names are case-insensitive.\n \n       Dir_Path : String_Access;\n       --  Same as Directory, but as an access to String. Set by\n@@ -608,11 +615,11 @@ package Prj is\n       --  True if this is a library project. Set by\n       --  Prj.Nmsc.Language_Independent_Check.\n \n-      Library_Dir : Name_Id := No_Name;\n-      --  If a library project, directory where resides the library Set by\n+      Library_Dir : Path_Name_Type := No_Path;\n+      --  If a library project, directory where the library Set by\n       --  Prj.Nmsc.Language_Independent_Check.\n \n-      Display_Library_Dir : Name_Id := No_Name;\n+      Display_Library_Dir : Path_Name_Type := No_Path;\n       --  The name of the library directory, for display purposes. May be\n       --  different from Library_Dir for platforms where the file names are\n       --  case-insensitive.\n@@ -621,36 +628,36 @@ package Prj is\n       --  The timestamp of a library file in a library project.\n       --  Set by MLib.Prj.Check_Library.\n \n-      Library_Src_Dir : Name_Id := No_Name;\n+      Library_Src_Dir : Path_Name_Type := No_Path;\n       --  If a Stand-Alone Library project, directory where the sources\n       --  of the interfaces of the library are copied. By default, if\n       --  attribute Library_Src_Dir is not specified, sources of the interfaces\n       --  are not copied anywhere. Set by Prj.Nmsc.Check_Stand_Alone_Library.\n \n-      Display_Library_Src_Dir : Name_Id := No_Name;\n+      Display_Library_Src_Dir : Path_Name_Type := No_Path;\n       --  The name of the library source directory, for display purposes.\n       --  May be different from Library_Src_Dir for platforms where the file\n       --  names are case-insensitive.\n \n-      Library_ALI_Dir : Name_Id := No_Name;\n+      Library_ALI_Dir : Path_Name_Type := No_Path;\n       --  In a library project, directory where the ALI files are copied.\n       --  If attribute Library_ALI_Dir is not specified, ALI files are\n       --  copied in the Library_Dir. Set by Prj.Nmsc.Check_Library_Attributes.\n \n-      Display_Library_ALI_Dir : Name_Id := No_Name;\n+      Display_Library_ALI_Dir : Path_Name_Type := No_Path;\n       --  The name of the library ALI directory, for display purposes. May be\n       --  different from Library_ALI_Dir for platforms where the file names are\n       --  case-insensitive.\n \n-      Library_Name : Name_Id := No_Name;\n+      Library_Name : File_Name_Type := No_File;\n       --  If a library project, name of the library\n       --  Set by Prj.Nmsc.Language_Independent_Check.\n \n       Library_Kind : Lib_Kind := Static;\n       --  If a library project, kind of library\n       --  Set by Prj.Nmsc.Language_Independent_Check.\n \n-      Lib_Internal_Name : Name_Id := No_Name;\n+      Lib_Internal_Name : File_Name_Type := No_File;\n       --  If a library project, internal name store inside the library Set by\n       --  Prj.Nmsc.Language_Independent_Check.\n \n@@ -666,6 +673,9 @@ package Prj is\n       --  For non static Standalone Library Project Files, indicate if\n       --  the library initialisation should be automatic.\n \n+      Libgnarl_Needed : Yes_No_Unknown := Unknown;\n+      --  Set to True when libgnarl is needed to link\n+\n       Symbol_Data : Symbol_Record := No_Symbols;\n       --  Symbol file name, reference symbol file name, symbol policy\n \n@@ -707,20 +717,20 @@ package Prj is\n       --  the ordering of the source subdirs depend on the OS. If True,\n       --  duplicate file names in the same project file are allowed.\n \n-      Object_Directory : Name_Id := No_Name;\n+      Object_Directory : Path_Name_Type := No_Path;\n       --  The object directory of this project file.\n       --  Set by Prj.Nmsc.Language_Independent_Check.\n \n-      Display_Object_Dir : Name_Id := No_Name;\n+      Display_Object_Dir : Path_Name_Type := No_Path;\n       --  The name of the object directory, for display purposes.\n       --  May be different from Object_Directory for platforms where the file\n       --  names are case-insensitive.\n \n-      Exec_Directory : Name_Id := No_Name;\n+      Exec_Directory : Path_Name_Type := No_Path;\n       --  The exec directory of this project file. Default is equal to\n       --  Object_Directory. Set by Prj.Nmsc.Language_Independent_Check.\n \n-      Display_Exec_Dir : Name_Id := No_Name;\n+      Display_Exec_Dir : Path_Name_Type := No_Path;\n       --  The name of the exec directory, for display purposes. May be\n       --  different from Exec_Directory for platforms where the file names are\n       --  case-insensitive.\n@@ -744,8 +754,8 @@ package Prj is\n       Supp_Language_Processing : Supp_Language_Index := No_Supp_Language_Index;\n       --  Comment needed\n \n-      Default_Linker      : Name_Id := No_Name;\n-      Default_Linker_Path : Name_Id := No_Name;\n+      Default_Linker      : File_Name_Type := No_File;\n+      Default_Linker_Path : Path_Name_Type := No_Path;\n \n       Decl : Declarations := No_Declarations;\n       --  The declarations (variables, attributes and packages) of this\n@@ -769,19 +779,19 @@ package Prj is\n       --  use this field directly outside of the compiler, use\n       --  Prj.Env.Ada_Objects_Path instead. Set by Prj.Env.Ada_Objects_Path\n \n-      Include_Path_File : Name_Id := No_Name;\n+      Include_Path_File : Path_Name_Type := No_Path;\n       --  The cached value of the source path temp file for this project file.\n       --  Set by gnatmake (Prj.Env.Set_Ada_Paths).\n \n-      Objects_Path_File_With_Libs : Name_Id := No_Name;\n+      Objects_Path_File_With_Libs : Path_Name_Type := No_Path;\n       --  The cached value of the object path temp file (including library\n       --  dirs) for this project file. Set by gnatmake (Prj.Env.Set_Ada_Paths).\n \n-      Objects_Path_File_Without_Libs : Name_Id := No_Name;\n+      Objects_Path_File_Without_Libs : Path_Name_Type := No_Path;\n       --  The cached value of the object path temp file (excluding library\n       --  dirs) for this project file. Set by gnatmake (Prj.Env.Set_Ada_Paths).\n \n-      Config_File_Name : Name_Id := No_Name;\n+      Config_File_Name : Path_Name_Type := No_Path;\n       --  The name of the configuration pragmas file, if any.\n       --  Set by gnatmake (Prj.Env.Create_Config_Pragmas_File).\n \n@@ -818,7 +828,6 @@ package Prj is\n       Unkept_Comments : Boolean := False;\n       --  True if there are comments in the project sources that cannot\n       --  be kept in the project tree.\n-\n    end record;\n \n    function Empty_Project (Tree : Project_Tree_Ref) return Project_Data;\n@@ -840,13 +849,13 @@ package Prj is\n      (Specification, Body_Part);\n \n    type File_Name_Data is record\n-      Name         : Name_Id    := No_Name;\n-      Index        : Int        := 0;\n-      Display_Name : Name_Id    := No_Name;\n-      Path         : Name_Id    := No_Name;\n-      Display_Path : Name_Id    := No_Name;\n-      Project      : Project_Id := No_Project;\n-      Needs_Pragma : Boolean    := False;\n+      Name         : File_Name_Type := No_File;\n+      Index        : Int            := 0;\n+      Display_Name : File_Name_Type := No_File;\n+      Path         : File_Name_Type := No_File;\n+      Display_Path : File_Name_Type := No_File;\n+      Project      : Project_Id     := No_Project;\n+      Needs_Pragma : Boolean        := False;\n    end record;\n    --  File and Path name of a spec or body\n \n@@ -889,7 +898,7 @@ package Prj is\n      (Header_Num => Header_Num,\n       Element    => Unit_Project,\n       No_Element => No_Unit_Project,\n-      Key        => Name_Id,\n+      Key        => File_Name_Type,\n       Hash       => Hash,\n       Equal      => \"=\");\n    --  Mapping of file names to indexes in the Units table\n@@ -938,8 +947,8 @@ package Prj is\n \n    procedure Register_Default_Naming_Scheme\n      (Language            : Name_Id;\n-      Default_Spec_Suffix : Name_Id;\n-      Default_Body_Suffix : Name_Id;\n+      Default_Spec_Suffix : File_Name_Type;\n+      Default_Body_Suffix : File_Name_Type;\n       In_Tree             : Project_Tree_Ref);\n    --  Register the default suffixes for a given language. These extensions\n    --  will be ignored if the user has specified a new naming scheme in a\n@@ -1003,12 +1012,12 @@ package Prj is\n    function Suffix_Of\n      (Language   : Language_Index;\n       In_Project : Project_Data;\n-      In_Tree    : Project_Tree_Ref) return Name_Id;\n+      In_Tree    : Project_Tree_Ref) return File_Name_Type;\n    --  Return the suffix for language Language in project In_Project. Return\n    --  No_Name when no suffix is defined for the language.\n \n    procedure Set\n-     (Suffix       : Name_Id;\n+     (Suffix       : File_Name_Type;\n       For_Language : Language_Index;\n       In_Project   : in out Project_Data;\n       In_Tree      : Project_Tree_Ref);\n@@ -1053,7 +1062,7 @@ private\n    --  Comment ???\n \n    package Path_File_Table is new GNAT.Dynamic_Tables\n-     (Table_Component_Type => Name_Id,\n+     (Table_Component_Type => Path_Name_Type,\n       Table_Index_Type     => Natural,\n       Table_Low_Bound      => 1,\n       Table_Initial        => 50,\n@@ -1062,15 +1071,15 @@ private\n    --  Used by Delete_All_Path_Files.\n \n    package Source_Path_Table is new GNAT.Dynamic_Tables\n-     (Table_Component_Type => Name_Id,\n+     (Table_Component_Type => File_Name_Type,\n       Table_Index_Type     => Natural,\n       Table_Low_Bound      => 1,\n       Table_Initial        => 50,\n       Table_Increment      => 100);\n    --  A table to store the source dirs before creating the source path file\n \n    package Object_Path_Table is new GNAT.Dynamic_Tables\n-     (Table_Component_Type => Name_Id,\n+     (Table_Component_Type => Path_Name_Type,\n       Table_Index_Type     => Natural,\n       Table_Low_Bound      => 1,\n       Table_Initial        => 50,"}, {"sha": "7f4e6e64c7bbc48f6958d97cffafef2c81719374", "filename": "gcc/ada/symbols-vms.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/751089b2718981880ac42d7f3d6013374460729b/gcc%2Fada%2Fsymbols-vms.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/751089b2718981880ac42d7f3d6013374460729b/gcc%2Fada%2Fsymbols-vms.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsymbols-vms.adb?ref=751089b2718981880ac42d7f3d6013374460729b", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2003-2005 Free Software Foundation, Inc.          --\n+--          Copyright (C) 2003-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -176,7 +176,7 @@ package body Symbols is\n \n       if Sym_Policy /= Autonomous then\n          case Sym_Policy is\n-            when Autonomous =>\n+            when Autonomous | Direct =>\n                null;\n \n             when Compliant | Controlled =>"}, {"sha": "618ad1459e0f275fe285d4a2206796e0268fc3e2", "filename": "gcc/ada/symbols.ads", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/751089b2718981880ac42d7f3d6013374460729b/gcc%2Fada%2Fsymbols.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/751089b2718981880ac42d7f3d6013374460729b/gcc%2Fada%2Fsymbols.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsymbols.ads?ref=751089b2718981880ac42d7f3d6013374460729b", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2003-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2003-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -29,7 +29,8 @@\n --  several implementations of the body.\n \n with GNAT.Dynamic_Tables;\n-with GNAT.OS_Lib;         use GNAT.OS_Lib;\n+\n+with System.OS_Lib; use System.OS_Lib;\n \n package Symbols is\n \n@@ -47,10 +48,13 @@ package Symbols is\n       Controlled,\n       --  Fail if symbols are not the same as those in the reference file\n \n-      Restricted);\n+      Restricted,\n       --  Restrict the symbols to those in the symbol file. Fail if some\n       --  symbols in the symbol file are not exported from the object files.\n \n+      Direct);\n+      --  The reference symbol file is copied to the symbol file\n+\n    type Symbol_Kind is (Data, Proc);\n    --  To distinguish between the different kinds of symbols\n "}]}