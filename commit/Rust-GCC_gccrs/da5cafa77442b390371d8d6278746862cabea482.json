{"sha": "da5cafa77442b390371d8d6278746862cabea482", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGE1Y2FmYTc3NDQyYjM5MDM3MWQ4ZDYyNzg3NDY4NjJjYWJlYTQ4Mg==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2003-12-10T16:58:56Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2003-12-10T16:58:56Z"}, "message": "* arm.md: New split patterns for optimizing bitfield accesses.\n\nFrom-SVN: r74503", "tree": {"sha": "f33cf41a78ee8d114e2ad597c72caa2dc49edf0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f33cf41a78ee8d114e2ad597c72caa2dc49edf0c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/da5cafa77442b390371d8d6278746862cabea482", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da5cafa77442b390371d8d6278746862cabea482", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da5cafa77442b390371d8d6278746862cabea482", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da5cafa77442b390371d8d6278746862cabea482/comments", "author": null, "committer": null, "parents": [{"sha": "498ec23d2e986721b7842e5b7a348951e5f4ba0b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/498ec23d2e986721b7842e5b7a348951e5f4ba0b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/498ec23d2e986721b7842e5b7a348951e5f4ba0b"}], "stats": {"total": 169, "additions": 169, "deletions": 0}, "files": [{"sha": "6ea7d5565f55dab5fbd7b6e4124f9e3deb82813d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da5cafa77442b390371d8d6278746862cabea482/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da5cafa77442b390371d8d6278746862cabea482/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=da5cafa77442b390371d8d6278746862cabea482", "patch": "@@ -1,3 +1,7 @@\n+2003-12-10  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* arm.md: New split patterns for optimizing bitfield accesses.\n+\n 2003-12-10  Steven Bosscher  <stevenb@suse.de>\n \n \t* README.Portability: Remove K+R section."}, {"sha": "a984ce830673a300f841016aac37227a075ccb8e", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 165, "deletions": 0, "changes": 165, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da5cafa77442b390371d8d6278746862cabea482/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da5cafa77442b390371d8d6278746862cabea482/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=da5cafa77442b390371d8d6278746862cabea482", "patch": "@@ -1752,6 +1752,28 @@\n    }\"\n )\n \n+(define_split\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"\")\n+\t(match_operator:SI 1 \"shiftable_operator\"\n+\t [(zero_extract:SI (match_operand:SI 2 \"s_register_operand\" \"\")\n+\t\t\t   (match_operand:SI 3 \"const_int_operand\" \"\")\n+\t\t\t   (match_operand:SI 4 \"const_int_operand\" \"\"))\n+\t  (match_operand:SI 5 \"s_register_operand\" \"\")]))\n+   (clobber (match_operand:SI 6 \"s_register_operand\" \"\"))]\n+  \"TARGET_ARM\"\n+  [(set (match_dup 6) (ashift:SI (match_dup 2) (match_dup 3)))\n+   (set (match_dup 0)\n+\t(match_op_dup 1\n+\t [(lshiftrt:SI (match_dup 6) (match_dup 4))\n+\t  (match_dup 5)]))]\n+  \"{\n+     HOST_WIDE_INT temp = INTVAL (operands[3]);\n+\n+     operands[3] = GEN_INT (32 - temp - INTVAL (operands[4]));\n+     operands[4] = GEN_INT (32 - temp);\n+   }\"\n+)\n+  \n (define_split\n   [(set (match_operand:SI 0 \"s_register_operand\" \"\")\n \t(sign_extract:SI (match_operand:SI 1 \"s_register_operand\" \"\")\n@@ -1768,6 +1790,28 @@\n    }\"\n )\n \n+(define_split\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"\")\n+\t(match_operator:SI 1 \"shiftable_operator\"\n+\t [(sign_extract:SI (match_operand:SI 2 \"s_register_operand\" \"\")\n+\t\t\t   (match_operand:SI 3 \"const_int_operand\" \"\")\n+\t\t\t   (match_operand:SI 4 \"const_int_operand\" \"\"))\n+\t  (match_operand:SI 5 \"s_register_operand\" \"\")]))\n+   (clobber (match_operand:SI 6 \"s_register_operand\" \"\"))]\n+  \"TARGET_ARM\"\n+  [(set (match_dup 6) (ashift:SI (match_dup 2) (match_dup 3)))\n+   (set (match_dup 0)\n+\t(match_op_dup 1\n+\t [(ashiftrt:SI (match_dup 6) (match_dup 4))\n+\t  (match_dup 5)]))]\n+  \"{\n+     HOST_WIDE_INT temp = INTVAL (operands[3]);\n+\n+     operands[3] = GEN_INT (32 - temp - INTVAL (operands[4]));\n+     operands[4] = GEN_INT (32 - temp);\n+   }\"\n+)\n+  \n ;;; ??? This pattern is bogus.  If operand3 has bits outside the range\n ;;; represented by the bitfield, then this will produce incorrect results.\n ;;; Somewhere, the value needs to be truncated.  On targets like the m68k,\n@@ -2276,6 +2320,109 @@\n    (set_attr \"predicable\" \"yes\")]\n )\n \n+(define_split\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"\")\n+\t(match_operator:SI 1 \"logical_binary_operator\"\n+\t [(zero_extract:SI (match_operand:SI 2 \"s_register_operand\" \"\")\n+\t\t\t   (match_operand:SI 3 \"const_int_operand\" \"\")\n+\t\t\t   (match_operand:SI 4 \"const_int_operand\" \"\"))\n+\t  (match_operator:SI 9 \"logical_binary_operator\"\n+\t   [(lshiftrt:SI (match_operand:SI 5 \"s_register_operand\" \"\")\n+\t\t\t (match_operand:SI 6 \"const_int_operand\" \"\"))\n+\t    (match_operand:SI 7 \"s_register_operand\" \"\")])]))\n+   (clobber (match_operand:SI 8 \"s_register_operand\" \"\"))]\n+  \"TARGET_ARM\n+   && GET_CODE (operands[1]) == GET_CODE (operands[9])\n+   && INTVAL (operands[3]) == 32 - INTVAL (operands[6])\"\n+  [(set (match_dup 8)\n+\t(match_op_dup 1\n+\t [(ashift:SI (match_dup 2) (match_dup 4))\n+\t  (match_dup 5)]))\n+   (set (match_dup 0)\n+\t(match_op_dup 1\n+\t [(lshiftrt:SI (match_dup 8) (match_dup 6))\n+\t  (match_dup 7)]))]\n+  \"\n+  operands[4] = GEN_INT (32 - (INTVAL (operands[3]) + INTVAL (operands[4])));\n+\")\n+\n+(define_split\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"\")\n+\t(match_operator:SI 1 \"logical_binary_operator\"\n+\t [(match_operator:SI 9 \"logical_binary_operator\"\n+\t   [(lshiftrt:SI (match_operand:SI 5 \"s_register_operand\" \"\")\n+\t\t\t (match_operand:SI 6 \"const_int_operand\" \"\"))\n+\t    (match_operand:SI 7 \"s_register_operand\" \"\")])\n+\t  (zero_extract:SI (match_operand:SI 2 \"s_register_operand\" \"\")\n+\t\t\t   (match_operand:SI 3 \"const_int_operand\" \"\")\n+\t\t\t   (match_operand:SI 4 \"const_int_operand\" \"\"))]))\n+   (clobber (match_operand:SI 8 \"s_register_operand\" \"\"))]\n+  \"TARGET_ARM\n+   && GET_CODE (operands[1]) == GET_CODE (operands[9])\n+   && INTVAL (operands[3]) == 32 - INTVAL (operands[6])\"\n+  [(set (match_dup 8)\n+\t(match_op_dup 1\n+\t [(ashift:SI (match_dup 2) (match_dup 4))\n+\t  (match_dup 5)]))\n+   (set (match_dup 0)\n+\t(match_op_dup 1\n+\t [(lshiftrt:SI (match_dup 8) (match_dup 6))\n+\t  (match_dup 7)]))]\n+  \"\n+  operands[4] = GEN_INT (32 - (INTVAL (operands[3]) + INTVAL (operands[4])));\n+\")\n+\n+(define_split\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"\")\n+\t(match_operator:SI 1 \"logical_binary_operator\"\n+\t [(sign_extract:SI (match_operand:SI 2 \"s_register_operand\" \"\")\n+\t\t\t   (match_operand:SI 3 \"const_int_operand\" \"\")\n+\t\t\t   (match_operand:SI 4 \"const_int_operand\" \"\"))\n+\t  (match_operator:SI 9 \"logical_binary_operator\"\n+\t   [(ashiftrt:SI (match_operand:SI 5 \"s_register_operand\" \"\")\n+\t\t\t (match_operand:SI 6 \"const_int_operand\" \"\"))\n+\t    (match_operand:SI 7 \"s_register_operand\" \"\")])]))\n+   (clobber (match_operand:SI 8 \"s_register_operand\" \"\"))]\n+  \"TARGET_ARM\n+   && GET_CODE (operands[1]) == GET_CODE (operands[9])\n+   && INTVAL (operands[3]) == 32 - INTVAL (operands[6])\"\n+  [(set (match_dup 8)\n+\t(match_op_dup 1\n+\t [(ashift:SI (match_dup 2) (match_dup 4))\n+\t  (match_dup 5)]))\n+   (set (match_dup 0)\n+\t(match_op_dup 1\n+\t [(ashiftrt:SI (match_dup 8) (match_dup 6))\n+\t  (match_dup 7)]))]\n+  \"\n+  operands[4] = GEN_INT (32 - (INTVAL (operands[3]) + INTVAL (operands[4])));\n+\")\n+\n+(define_split\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"\")\n+\t(match_operator:SI 1 \"logical_binary_operator\"\n+\t [(match_operator:SI 9 \"logical_binary_operator\"\n+\t   [(ashiftrt:SI (match_operand:SI 5 \"s_register_operand\" \"\")\n+\t\t\t (match_operand:SI 6 \"const_int_operand\" \"\"))\n+\t    (match_operand:SI 7 \"s_register_operand\" \"\")])\n+\t  (sign_extract:SI (match_operand:SI 2 \"s_register_operand\" \"\")\n+\t\t\t   (match_operand:SI 3 \"const_int_operand\" \"\")\n+\t\t\t   (match_operand:SI 4 \"const_int_operand\" \"\"))]))\n+   (clobber (match_operand:SI 8 \"s_register_operand\" \"\"))]\n+  \"TARGET_ARM\n+   && GET_CODE (operands[1]) == GET_CODE (operands[9])\n+   && INTVAL (operands[3]) == 32 - INTVAL (operands[6])\"\n+  [(set (match_dup 8)\n+\t(match_op_dup 1\n+\t [(ashift:SI (match_dup 2) (match_dup 4))\n+\t  (match_dup 5)]))\n+   (set (match_dup 0)\n+\t(match_op_dup 1\n+\t [(ashiftrt:SI (match_dup 8) (match_dup 6))\n+\t  (match_dup 7)]))]\n+  \"\n+  operands[4] = GEN_INT (32 - (INTVAL (operands[3]) + INTVAL (operands[4])));\n+\")\n \f\n \n ;; Minimum and maximum insns\n@@ -7493,6 +7640,24 @@\n    ]\n )\n \n+(define_split\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"\")\n+\t(match_operator:SI 1 \"shiftable_operator\"\n+\t [(match_operator:SI 2 \"shiftable_operator\"\n+\t   [(match_operator:SI 3 \"shift_operator\"\n+\t     [(match_operand:SI 4 \"s_register_operand\" \"\")\n+\t      (match_operand:SI 5 \"reg_or_int_operand\" \"\")])\n+\t    (match_operand:SI 6 \"s_register_operand\" \"\")])\n+\t  (match_operand:SI 7 \"arm_rhs_operand\" \"\")]))\n+   (clobber (match_operand:SI 8 \"s_register_operand\" \"\"))]\n+  \"TARGET_ARM\"\n+  [(set (match_dup 8)\n+\t(match_op_dup 2 [(match_op_dup 3 [(match_dup 4) (match_dup 5)])\n+\t\t\t (match_dup 6)]))\n+   (set (match_dup 0)\n+\t(match_op_dup 1 [(match_dup 8) (match_dup 7)]))]\n+  \"\")\n+\n (define_insn \"*arith_shiftsi_compare0\"\n   [(set (reg:CC_NOOV CC_REGNUM)\n         (compare:CC_NOOV (match_operator:SI 1 \"shiftable_operator\""}]}