{"sha": "cbdab9c897d52b8311979a1e31e41d248671a4cb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2JkYWI5Yzg5N2Q1MmI4MzExOTc5YTFlMzFlNDFkMjQ4NjcxYTRjYg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely.gcc@gmail.com", "date": "2009-01-29T23:24:05Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2009-01-29T23:24:05Z"}, "message": "thread: Remove unused headers.\n\n2009-01-29  Jonathan Wakely  <jwakely.gcc@gmail.com>\n\n\t* include/std/thread: Remove unused headers.\n\t(__thread_data_base): Remove unused mutex and base.\n\t(thread::~thread): Only detach if joinable.\n\t(thread::joinable): Test if thread data ptr is empty.\n\t(thread::_M_thread_data_mutex): Remove.\n\t(thread::_M_get_thread_data): Remove.\n\t(thread::_M_make_thread_data): Remove overload, use make_shared.\n\t(thread::id::id): Make constructor explicit.\n\t* src/thread.cc (thread::join,thread::detach): Throw if not joinable.\n\t(thread::_M_start_thread): Break shared_ptr cycle on error.\n\t(__thread_proxy): Use shared_ptr swap instead of copy and reset.\n\t* testsuite/30_threads/thread/member/4.cc: New.\n\t* testsuite/30_threads/thread/member/5.cc: New.\n\nFrom-SVN: r143772", "tree": {"sha": "7d1482ccf71102b2e07f20bbe2ac2e2aa38e6c60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7d1482ccf71102b2e07f20bbe2ac2e2aa38e6c60"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cbdab9c897d52b8311979a1e31e41d248671a4cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbdab9c897d52b8311979a1e31e41d248671a4cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cbdab9c897d52b8311979a1e31e41d248671a4cb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbdab9c897d52b8311979a1e31e41d248671a4cb/comments", "author": null, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3631be4865f1942115b43d7f30a232a6cfb9c4b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3631be4865f1942115b43d7f30a232a6cfb9c4b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3631be4865f1942115b43d7f30a232a6cfb9c4b8"}], "stats": {"total": 216, "additions": 169, "deletions": 47}, "files": [{"sha": "06472ac6252b7134050766a44ca465cda2c76f92", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbdab9c897d52b8311979a1e31e41d248671a4cb/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbdab9c897d52b8311979a1e31e41d248671a4cb/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=cbdab9c897d52b8311979a1e31e41d248671a4cb", "patch": "@@ -1,3 +1,19 @@\n+2009-01-29  Jonathan Wakely  <jwakely.gcc@gmail.com>\n+\n+\t* include/std/thread: Remove unused headers.\n+\t(__thread_data_base): Remove unused mutex and base.\n+\t(thread::~thread): Only detach if joinable.\n+\t(thread::joinable): Test if thread data ptr is empty.\n+\t(thread::_M_thread_data_mutex): Remove.\n+\t(thread::_M_get_thread_data): Remove.\n+\t(thread::_M_make_thread_data): Remove overload, use make_shared.\n+\t(thread::id::id): Make constructor explicit.\n+\t* src/thread.cc (thread::join,thread::detach): Throw if not joinable.\n+\t(thread::_M_start_thread): Break shared_ptr cycle on error.\n+\t(__thread_proxy): Use shared_ptr swap instead of copy and reset.\n+\t* testsuite/30_threads/thread/member/4.cc: New.\n+\t* testsuite/30_threads/thread/member/5.cc: New.\n+\n 2009-01-28  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* testsuite/util/testsuite_common_types.h (has_trivial_cons_dtor): New."}, {"sha": "79bf29013a483288ca45588ea02fdf2fb31f5e90", "filename": "libstdc++-v3/include/std/thread", "status": "modified", "additions": 13, "deletions": 26, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbdab9c897d52b8311979a1e31e41d248671a4cb/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbdab9c897d52b8311979a1e31e41d248671a4cb/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread?ref=cbdab9c897d52b8311979a1e31e41d248671a4cb", "patch": "@@ -41,12 +41,10 @@\n #else\n \n #include <chrono>\n-#include <exception>\n #include <functional>\n #include <memory>\n #include <mutex>\n #include <condition_variable>\n-#include <type_traits>\n #include <cstddef>\n #include <bits/functexcept.h>\n #include <bits/gthr.h>\n@@ -59,7 +57,7 @@ namespace std\n \n   typedef shared_ptr<__thread_data_base> __thread_data_ptr;\n \n-  class __thread_data_base : public enable_shared_from_this<__thread_data_base>\n+  class __thread_data_base\n   {\n   public:\n     __thread_data_base() = default;\n@@ -69,7 +67,6 @@ namespace std\n     \n     __gthread_t \t_M_thread_handle;\n     __thread_data_ptr \t_M_this_ptr;\n-    mutex \t\t_M_data_mutex;\n   };\n   \n   template<typename _Callable>\n@@ -109,7 +106,10 @@ namespace std\n       { _M_start_thread(); }\n \n     ~thread()\n-    { detach(); }\n+    {\n+      if (joinable())\n+        detach();\n+    }\n \n     thread(const thread&) = delete;\n     thread(thread&& __t)\n@@ -130,7 +130,8 @@ namespace std\n     { std::swap(_M_thread_data, __t._M_thread_data); }\n \n     bool \n-    joinable() const;\n+    joinable() const\n+    { return _M_thread_data; }\n \n     void \n     join();\n@@ -141,37 +142,27 @@ namespace std\n     thread::id\n     get_id() const;\n \n+    /** @pre thread is joinable\n+     */\n     native_handle_type \n     native_handle()\n     { return _M_thread_data->_M_thread_handle; }\n \n     // static members\n     static unsigned hardware_concurrency();\n \n-    __thread_data_ptr\n-    _M_get_thread_data() const\n-    {\n-      lock_guard<mutex> __l(_M_thread_data_mutex);\n-      return _M_thread_data;\n-    }\n-\n   private:\n     template<typename _Callable>\n       __thread_data_ptr \n       _M_make_thread_data(_Callable&& __f)\n       { \n-\treturn __thread_data_ptr(\n-\t  new __thread_data<_Callable>(std::forward<_Callable>(__f)));\n+\treturn make_shared<__thread_data<_Callable>>(\n+            std::forward<_Callable>(__f));\n       }\n     \n-    __thread_data_ptr\n-    _M_make_thread_data(void(*__f)())\n-    { return __thread_data_ptr(new __thread_data<void(*)()>(__f)); }\n-    \n     void _M_start_thread();\n \n     __thread_data_ptr \t_M_thread_data;\n-    mutable mutex \t_M_thread_data_mutex;\n   };\n \n   inline void\n@@ -237,8 +228,7 @@ namespace std\n \n     friend bool \n     operator==(thread::id __x, thread::id __y)\n-    { return static_cast<bool>(__gthread_equal(__x._M_thread_id,\n-\t\t\t\t\t       __y._M_thread_id)); }\n+    { return __gthread_equal(__x._M_thread_id, __y._M_thread_id); }\n \n     friend bool\n     operator<(thread::id __x, thread::id __y)\n@@ -248,6 +238,7 @@ namespace std\n       friend basic_ostream<_CharT, _Traits>&\n       operator<<(basic_ostream<_CharT, _Traits>&& __out, thread::id __id); \n \n+    explicit \n     id(__gthread_t __id)\n     : _M_thread_id(__id)\n     { }\n@@ -281,10 +272,6 @@ namespace std\n \treturn __out << __id._M_thread_id;\n     }  \n \n-  inline bool\n-  thread::joinable() const\n-  { return get_id() != thread::id(); }\n-\n   inline thread::id\n   thread::get_id() const\n   {"}, {"sha": "357034f60b237c156c51ffed6b1a977994c9e318", "filename": "libstdc++-v3/src/thread.cc", "status": "modified", "additions": 26, "deletions": 21, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbdab9c897d52b8311979a1e31e41d248671a4cb/libstdc%2B%2B-v3%2Fsrc%2Fthread.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbdab9c897d52b8311979a1e31e41d248671a4cb/libstdc%2B%2B-v3%2Fsrc%2Fthread.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fthread.cc?ref=cbdab9c897d52b8311979a1e31e41d248671a4cb", "patch": "@@ -28,7 +28,7 @@\n // the GNU General Public License.\n \n #include <thread>\n-#include <bits/move.h> // std::move\n+#include <cerrno>\n \n #if defined(_GLIBCXX_HAS_GTHREADS) && defined(_GLIBCXX_USE_C99_STDINT_TR1)\n \n@@ -41,8 +41,8 @@ namespace std\n       void* __thread_proxy(void* __p)\n       {\n \t__thread_data_base* __t = static_cast<__thread_data_base*>(__p);\n-\t__thread_data_ptr __local_thread_data = __t->_M_this_ptr;\n-\t__t->_M_this_ptr.reset();\n+\t__thread_data_ptr __local_thread_data;\n+\t__local_thread_data.swap(__t->_M_this_ptr);\n \n \ttry\n \t  {\n@@ -61,30 +61,32 @@ namespace std\n   void\n   thread::join()\n   {\n-    if(joinable())\n-      {\n-\tvoid* __r = 0;\n-\tint __e = __gthread_join(_M_thread_data->_M_thread_handle, &__r);\n-\tif(__e)\n-\t  __throw_system_error(__e);\n+    int __e = EINVAL;\n \n-\tlock_guard<mutex> __lock(_M_thread_data_mutex);\n-\t_M_thread_data.reset();\n-      }\n+    if (_M_thread_data)\n+    {\n+      void* __r = 0;\n+      __e = __gthread_join(_M_thread_data->_M_thread_handle, &__r);\n+    }\n+\n+    if (__e)\n+      __throw_system_error(__e);\n+\n+    _M_thread_data.reset();\n   }\n \n   void\n   thread::detach()\n   {    \n-    if(joinable())\n-      {\n-\tint __e = __gthread_detach(_M_thread_data->_M_thread_handle);\n-\tif(__e)\n-\t  __throw_system_error(__e);\n+    int __e = EINVAL;\n \n-\tlock_guard<mutex> __lock(_M_thread_data_mutex);\n-\t_M_thread_data.reset();\n-      }\n+    if (_M_thread_data)\n+      __e = __gthread_detach(_M_thread_data->_M_thread_handle);\n+\n+    if (__e)\n+      __throw_system_error(__e);\n+\n+    _M_thread_data.reset();\n   }\n \n   void \n@@ -93,8 +95,11 @@ namespace std\n     _M_thread_data->_M_this_ptr = _M_thread_data;\n     int __e = __gthread_create(&_M_thread_data->_M_thread_handle, \n \t\t\t       &__thread_proxy, _M_thread_data.get());\n-    if(__e)\n+    if (__e)\n+    {\n+      _M_thread_data->_M_this_ptr.reset();\n       __throw_system_error(__e);\n+    }\n   }\n }\n "}, {"sha": "f520f77ebb0bf2771e6c87b8e2621ea74da2f0d4", "filename": "libstdc++-v3/testsuite/30_threads/thread/member/4.cc", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbdab9c897d52b8311979a1e31e41d248671a4cb/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fmember%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbdab9c897d52b8311979a1e31e41d248671a4cb/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fmember%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fmember%2F4.cc?ref=cbdab9c897d52b8311979a1e31e41d248671a4cb", "patch": "@@ -0,0 +1,57 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <thread>\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+\n+int main()\n+{\n+  bool test = false;\n+\n+  std::thread t;\n+\n+  try \n+  {\n+    t.join();\n+  }\n+  catch (const std::system_error&)\n+  {\n+    test = true;\n+  }\n+\n+  VERIFY( test );\n+\n+  return 0;\n+}"}, {"sha": "6e0aa51402460d27d8d0247683edc7abf5917907", "filename": "libstdc++-v3/testsuite/30_threads/thread/member/5.cc", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbdab9c897d52b8311979a1e31e41d248671a4cb/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fmember%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbdab9c897d52b8311979a1e31e41d248671a4cb/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fmember%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fmember%2F5.cc?ref=cbdab9c897d52b8311979a1e31e41d248671a4cb", "patch": "@@ -0,0 +1,57 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <thread>\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+\n+int main()\n+{\n+  bool test = false;\n+\n+  std::thread t;\n+\n+  try \n+  {\n+    t.detach();\n+  }\n+  catch (const std::system_error&)\n+  {\n+    test = true;\n+  }\n+\n+  VERIFY( test );\n+\n+  return 0;\n+}"}]}