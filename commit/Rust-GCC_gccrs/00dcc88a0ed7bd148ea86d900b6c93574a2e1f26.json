{"sha": "00dcc88a0ed7bd148ea86d900b6c93574a2e1f26", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDBkY2M4OGEwZWQ3YmQxNDhlYTg2ZDkwMGI2YzkzNTc0YTJlMWYyNg==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2021-07-20T17:14:19Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2021-07-20T17:16:08Z"}, "message": "Adjust by-value function vec arguments to by-reference.\n\ngcc/c-family/ChangeLog:\n\n\t* c-common.c (c_build_shufflevector): Adjust by-value argument to\n\tby-const-reference.\n\t* c-common.h (c_build_shufflevector): Same.\n\ngcc/c/ChangeLog:\n\n\t* c-tree.h (c_build_function_call_vec): Adjust by-value argument to\n\tby-const-reference.\n\t* c-typeck.c (c_build_function_call_vec): Same.\n\ngcc/ChangeLog:\n\n\t* cfgloop.h (single_likely_exit): Adjust by-value argument to\n\tby-const-reference.\n\t* cfgloopanal.c (single_likely_exit): Same.\n\t* cgraph.h (struct cgraph_node): Same.\n\t* cgraphclones.c (cgraph_node::create_virtual_clone): Same.\n\t* genautomata.c (merge_states): Same.\n\t* genextract.c (VEC_char_to_string): Same.\n\t* genmatch.c (dt_node::gen_kids_1): Same.\n\t(walk_captures): Adjust by-value argument to by-reference.\n\t* gimple-ssa-store-merging.c (check_no_overlap): Adjust by-value argument\n\tto by-const-reference.\n\t* gimple.c (gimple_build_call_vec): Same.\n\t(gimple_build_call_internal_vec): Same.\n\t(gimple_build_switch): Same.\n\t(sort_case_labels): Same.\n\t(preprocess_case_label_vec_for_gimple): Adjust by-value argument to\n\tby-reference.\n\t* gimple.h (gimple_build_call_vec): Adjust by-value argument to\n\tby-const-reference.\n\t(gimple_build_call_internal_vec): Same.\n\t(gimple_build_switch): Same.\n\t(sort_case_labels): Same.\n\t(preprocess_case_label_vec_for_gimple): Adjust by-value argument to\n\tby-reference.\n\t* haifa-sched.c (calc_priorities): Adjust by-value argument to\n\tby-const-reference.\n\t(sched_init_luids): Same.\n\t(haifa_init_h_i_d): Same.\n\t* ipa-cp.c (ipa_get_indirect_edge_target_1): Same.\n\t(adjust_callers_for_value_intersection): Adjust by-value argument to\n\tby-reference.\n\t(find_more_scalar_values_for_callers_subset): Adjust by-value argument to\n\tby-const-reference.\n\t(find_more_contexts_for_caller_subset): Same.\n\t(find_aggregate_values_for_callers_subset): Same.\n\t(copy_useful_known_contexts): Same.\n\t* ipa-fnsummary.c (remap_edge_summaries): Same.\n\t(remap_freqcounting_predicate): Same.\n\t* ipa-inline.c (add_new_edges_to_heap): Adjust by-value argument to\n\tby-reference.\n\t* ipa-predicate.c (predicate::remap_after_inlining): Adjust by-value argument\n\tto by-const-reference.\n\t* ipa-predicate.h (predicate::remap_after_inlining): Same.\n\t* ipa-prop.c (ipa_find_agg_cst_for_param): Same.\n\t* ipa-prop.h (ipa_find_agg_cst_for_param): Same.\n\t* ira-build.c (ira_loop_tree_body_rev_postorder): Same.\n\t* read-rtl.c (add_overload_instance): Same.\n\t* rtl.h (native_decode_rtx): Same.\n\t(native_decode_vector_rtx): Same.\n\t* sched-int.h (sched_init_luids): Same.\n\t(haifa_init_h_i_d): Same.\n\t* simplify-rtx.c (native_decode_vector_rtx): Same.\n\t(native_decode_rtx): Same.\n\t* tree-call-cdce.c (gen_shrink_wrap_conditions): Same.\n\t(shrink_wrap_one_built_in_call_with_conds): Same.\n\t(shrink_wrap_conditional_dead_built_in_calls): Same.\n\t* tree-data-ref.c (create_runtime_alias_checks): Same.\n\t(compute_all_dependences): Same.\n\t* tree-data-ref.h (compute_all_dependences): Same.\n\t(create_runtime_alias_checks): Same.\n\t(index_in_loop_nest): Same.\n\t* tree-if-conv.c (mask_exists): Same.\n\t* tree-loop-distribution.c (class loop_distribution): Same.\n\t(loop_distribution::create_rdg_vertices): Same.\n\t(dump_rdg_partitions): Same.\n\t(debug_rdg_partitions): Same.\n\t(partition_contains_all_rw): Same.\n\t(loop_distribution::distribute_loop): Same.\n\t* tree-parloops.c (oacc_entry_exit_ok_1): Same.\n\t(oacc_entry_exit_single_gang): Same.\n\t* tree-ssa-loop-im.c (hoist_memory_references): Same.\n\t(loop_suitable_for_sm): Same.\n\t* tree-ssa-loop-niter.c (bound_index): Same.\n\t* tree-ssa-reassoc.c (update_ops): Same.\n\t(swap_ops_for_binary_stmt): Same.\n\t(rewrite_expr_tree): Same.\n\t(rewrite_expr_tree_parallel): Same.\n\t* tree-ssa-sccvn.c (ao_ref_init_from_vn_reference): Same.\n\t* tree-ssa-sccvn.h (ao_ref_init_from_vn_reference): Same.\n\t* tree-ssa-structalias.c (process_all_all_constraints): Same.\n\t(make_constraints_to): Same.\n\t(handle_lhs_call): Same.\n\t(find_func_aliases_for_builtin_call): Same.\n\t(sort_fieldstack): Same.\n\t(check_for_overlaps): Same.\n\t* tree-vect-loop-manip.c (vect_create_cond_for_align_checks): Same.\n\t(vect_create_cond_for_unequal_addrs): Same.\n\t(vect_create_cond_for_lower_bounds): Same.\n\t(vect_create_cond_for_alias_checks): Same.\n\t* tree-vect-slp-patterns.c (vect_validate_multiplication): Same.\n\t* tree-vect-slp.c (vect_analyze_slp_instance): Same.\n\t(vect_make_slp_decision): Same.\n\t(vect_slp_bbs): Same.\n\t(duplicate_and_interleave): Same.\n\t(vect_transform_slp_perm_load): Same.\n\t(vect_schedule_slp): Same.\n\t* tree-vectorizer.h (vect_transform_slp_perm_load): Same.\n\t(vect_schedule_slp): Same.\n\t(duplicate_and_interleave): Same.\n\t* tree.c (build_vector_from_ctor): Same.\n\t(build_vector): Same.\n\t(check_vector_cst): Same.\n\t(check_vector_cst_duplicate): Same.\n\t(check_vector_cst_fill): Same.\n\t(check_vector_cst_stepped): Same.\n\t* tree.h (build_vector_from_ctor): Same.", "tree": {"sha": "86e342460b6c76c60a536beb2646d80d81cddab8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/86e342460b6c76c60a536beb2646d80d81cddab8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/00dcc88a0ed7bd148ea86d900b6c93574a2e1f26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00dcc88a0ed7bd148ea86d900b6c93574a2e1f26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00dcc88a0ed7bd148ea86d900b6c93574a2e1f26", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00dcc88a0ed7bd148ea86d900b6c93574a2e1f26/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7fcb33455c9dc9359d98cd6bffe7f32f282ed713", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fcb33455c9dc9359d98cd6bffe7f32f282ed713", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7fcb33455c9dc9359d98cd6bffe7f32f282ed713"}], "stats": {"total": 273, "additions": 146, "deletions": 127}, "files": [{"sha": "aacdfb46a0296e7fbd784678ca7e73315218c2c9", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00dcc88a0ed7bd148ea86d900b6c93574a2e1f26/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00dcc88a0ed7bd148ea86d900b6c93574a2e1f26/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=00dcc88a0ed7bd148ea86d900b6c93574a2e1f26", "patch": "@@ -1115,8 +1115,8 @@ c_build_vec_perm_expr (location_t loc, tree v0, tree v1, tree mask,\n    and have vector types, V0 has the same element type as V1, and the\n    number of elements the result is that of MASK.  */\n tree\n-c_build_shufflevector (location_t loc, tree v0, tree v1, vec<tree> mask,\n-\t\t       bool complain)\n+c_build_shufflevector (location_t loc, tree v0, tree v1,\n+\t\t       const vec<tree> &mask, bool complain)\n {\n   tree ret;\n   bool wrap = true;"}, {"sha": "c4b2789e64424f3c8975dc7ed44937d69c83c13a", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00dcc88a0ed7bd148ea86d900b6c93574a2e1f26/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00dcc88a0ed7bd148ea86d900b6c93574a2e1f26/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=00dcc88a0ed7bd148ea86d900b6c93574a2e1f26", "patch": "@@ -1049,7 +1049,7 @@ extern bool vector_targets_convertible_p (const_tree t1, const_tree t2);\n extern bool vector_types_convertible_p (const_tree t1, const_tree t2, bool emit_lax_note);\n extern tree c_build_vec_perm_expr (location_t, tree, tree, tree, bool = true);\n extern tree c_build_shufflevector (location_t, tree, tree,\n-\t\t\t\t   vec<tree>, bool = true);\n+\t\t\t\t   const vec<tree> &, bool = true);\n extern tree c_build_vec_convert (location_t, tree, location_t, tree, bool = true);\n \n extern void init_c_lex (void);"}, {"sha": "ab6db3860f5062d5d73e3ffacf123a992b9c6c48", "filename": "gcc/c/c-tree.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00dcc88a0ed7bd148ea86d900b6c93574a2e1f26/gcc%2Fc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00dcc88a0ed7bd148ea86d900b6c93574a2e1f26/gcc%2Fc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-tree.h?ref=00dcc88a0ed7bd148ea86d900b6c93574a2e1f26", "patch": "@@ -759,8 +759,9 @@ extern tree c_finish_omp_clauses (tree, enum c_omp_region_type);\n extern tree c_build_va_arg (location_t, tree, location_t, tree);\n extern tree c_finish_transaction (location_t, tree, int);\n extern bool c_tree_equal (tree, tree);\n-extern tree c_build_function_call_vec (location_t, vec<location_t>, tree,\n-\t\t\t\t       vec<tree, va_gc> *, vec<tree, va_gc> *);\n+extern tree c_build_function_call_vec (location_t, const vec<location_t>&,\n+\t\t\t\t       tree, vec<tree, va_gc> *,\n+\t\t\t\t       vec<tree, va_gc> *);\n extern tree c_omp_clause_copy_ctor (tree, tree, tree);\n \n /* Set to 0 at beginning of a function definition, set to 1 if"}, {"sha": "4f7ed6757465015921bd6826aa0cf4e86f727e8d", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00dcc88a0ed7bd148ea86d900b6c93574a2e1f26/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00dcc88a0ed7bd148ea86d900b6c93574a2e1f26/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=00dcc88a0ed7bd148ea86d900b6c93574a2e1f26", "patch": "@@ -3240,7 +3240,7 @@ build_function_call_vec (location_t loc, vec<location_t> arg_loc,\n /* Like build_function_call_vec, but call also resolve_overloaded_builtin.  */\n \n tree\n-c_build_function_call_vec (location_t loc, vec<location_t> arg_loc,\n+c_build_function_call_vec (location_t loc, const vec<location_t> &arg_loc,\n \t\t\t   tree function, vec<tree, va_gc> *params,\n \t\t\t   vec<tree, va_gc> *origtypes)\n {"}, {"sha": "5c2b98db9e59871432045bc8ea501c5b1d8523b3", "filename": "gcc/cfgloop.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00dcc88a0ed7bd148ea86d900b6c93574a2e1f26/gcc%2Fcfgloop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00dcc88a0ed7bd148ea86d900b6c93574a2e1f26/gcc%2Fcfgloop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloop.h?ref=00dcc88a0ed7bd148ea86d900b6c93574a2e1f26", "patch": "@@ -385,7 +385,7 @@ extern basic_block *get_loop_body_in_custom_order (const class loop *, void *,\n \n extern auto_vec<edge> get_loop_exit_edges (const class loop *, basic_block * = NULL);\n extern edge single_exit (const class loop *);\n-extern edge single_likely_exit (class loop *loop, vec<edge>);\n+extern edge single_likely_exit (class loop *loop, const vec<edge> &);\n extern unsigned num_loop_branches (const class loop *);\n \n extern edge loop_preheader_edge (const class loop *);"}, {"sha": "4cd73c297763bc62e5866eaba37c40a6a14ede3a", "filename": "gcc/cfgloopanal.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00dcc88a0ed7bd148ea86d900b6c93574a2e1f26/gcc%2Fcfgloopanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00dcc88a0ed7bd148ea86d900b6c93574a2e1f26/gcc%2Fcfgloopanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloopanal.c?ref=00dcc88a0ed7bd148ea86d900b6c93574a2e1f26", "patch": "@@ -470,7 +470,7 @@ mark_loop_exit_edges (void)\n    to noreturn call.  */\n \n edge\n-single_likely_exit (class loop *loop, vec<edge> exits)\n+single_likely_exit (class loop *loop, const vec<edge> &exits)\n {\n   edge found = single_exit (loop);\n   unsigned i;"}, {"sha": "8c776d6f3a82c12c3aebdb180eeb8e66583e8761", "filename": "gcc/cgraph.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00dcc88a0ed7bd148ea86d900b6c93574a2e1f26/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00dcc88a0ed7bd148ea86d900b6c93574a2e1f26/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=00dcc88a0ed7bd148ea86d900b6c93574a2e1f26", "patch": "@@ -949,7 +949,7 @@ struct GTY((tag (\"SYMTAB_FUNCTION\"))) cgraph_node : public symtab_node\n   /* Create callgraph node clone with new declaration.  The actual body will be\n      copied later at compilation stage.  The name of the new clone will be\n      constructed from the name of the original node, SUFFIX and NUM_SUFFIX.  */\n-  cgraph_node *create_virtual_clone (vec<cgraph_edge *> redirect_callers,\n+  cgraph_node *create_virtual_clone (const vec<cgraph_edge *> &redirect_callers,\n \t\t\t\t     vec<ipa_replace_map *, va_gc> *tree_map,\n \t\t\t\t     ipa_param_adjustments *param_adjustments,\n \t\t\t\t     const char * suffix, unsigned num_suffix);"}, {"sha": "fef4a231f85d4161a8ae352eb52acbd6d7cc99c6", "filename": "gcc/cgraphclones.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00dcc88a0ed7bd148ea86d900b6c93574a2e1f26/gcc%2Fcgraphclones.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00dcc88a0ed7bd148ea86d900b6c93574a2e1f26/gcc%2Fcgraphclones.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphclones.c?ref=00dcc88a0ed7bd148ea86d900b6c93574a2e1f26", "patch": "@@ -564,7 +564,7 @@ clone_function_name (tree decl, const char *suffix)\n    bitmap interface.\n    */\n cgraph_node *\n-cgraph_node::create_virtual_clone (vec<cgraph_edge *> redirect_callers,\n+cgraph_node::create_virtual_clone (const vec<cgraph_edge *> &redirect_callers,\n \t\t\t\t   vec<ipa_replace_map *, va_gc> *tree_map,\n \t\t\t\t   ipa_param_adjustments *param_adjustments,\n \t\t\t\t   const char * suffix, unsigned num_suffix)"}, {"sha": "e488c5f28ef2de727493fbef887504bf37ee5c47", "filename": "gcc/genautomata.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00dcc88a0ed7bd148ea86d900b6c93574a2e1f26/gcc%2Fgenautomata.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00dcc88a0ed7bd148ea86d900b6c93574a2e1f26/gcc%2Fgenautomata.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenautomata.c?ref=00dcc88a0ed7bd148ea86d900b6c93574a2e1f26", "patch": "@@ -6137,7 +6137,7 @@ evaluate_equiv_classes (automaton_t automaton, vec<state_t> *equiv_classes)\n \n /* The function merges equivalent states of AUTOMATON.  */\n static void\n-merge_states (automaton_t automaton, vec<state_t> equiv_classes)\n+merge_states (automaton_t automaton, const vec<state_t> &equiv_classes)\n {\n   state_t curr_state;\n   state_t new_state;"}, {"sha": "3ed2f6846c9fb615127b76f97cb0aa5e89ace950", "filename": "gcc/genextract.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00dcc88a0ed7bd148ea86d900b6c93574a2e1f26/gcc%2Fgenextract.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00dcc88a0ed7bd148ea86d900b6c93574a2e1f26/gcc%2Fgenextract.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenextract.c?ref=00dcc88a0ed7bd148ea86d900b6c93574a2e1f26", "patch": "@@ -214,7 +214,7 @@ VEC_safe_set_locstr (md_rtx_info *info, vec<locstr> *vp,\n /* Another helper subroutine of walk_rtx: given a vec<char>, convert it\n    to a NUL-terminated string in malloc memory.  */\n static char *\n-VEC_char_to_string (vec<char> v)\n+VEC_char_to_string (const vec<char> &v)\n {\n   size_t n = v.length ();\n   char *s = XNEWVEC (char, n + 1);"}, {"sha": "95248455ec5ced40e4146c5eaa07fc71b74a77ca", "filename": "gcc/genmatch.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00dcc88a0ed7bd148ea86d900b6c93574a2e1f26/gcc%2Fgenmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00dcc88a0ed7bd148ea86d900b6c93574a2e1f26/gcc%2Fgenmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenmatch.c?ref=00dcc88a0ed7bd148ea86d900b6c93574a2e1f26", "patch": "@@ -1632,8 +1632,9 @@ class dt_node\n \n   void gen_kids (FILE *, int, bool, int);\n   void gen_kids_1 (FILE *, int, bool, int,\n-\t\t   vec<dt_operand *>, vec<dt_operand *>, vec<dt_operand *>,\n-\t\t   vec<dt_operand *>, vec<dt_operand *>, vec<dt_node *>);\n+\t\t   const vec<dt_operand *> &, const vec<dt_operand *> &,\n+\t\t   const vec<dt_operand *> &, const vec<dt_operand *> &,\n+\t\t   const vec<dt_operand *> &, const vec<dt_node *> &);\n \n   void analyze (sinfo_map_t &);\n };\n@@ -2983,12 +2984,12 @@ dt_node::gen_kids (FILE *f, int indent, bool gimple, int depth)\n \n void\n dt_node::gen_kids_1 (FILE *f, int indent, bool gimple, int depth,\n-\t\t     vec<dt_operand *> gimple_exprs,\n-\t\t     vec<dt_operand *> generic_exprs,\n-\t\t     vec<dt_operand *> fns,\n-\t\t     vec<dt_operand *> generic_fns,\n-\t\t     vec<dt_operand *> preds,\n-\t\t     vec<dt_node *> others)\n+\t\t     const vec<dt_operand *> &gimple_exprs,\n+\t\t     const vec<dt_operand *> &generic_exprs,\n+\t\t     const vec<dt_operand *> &fns,\n+\t\t     const vec<dt_operand *> &generic_fns,\n+\t\t     const vec<dt_operand *> &preds,\n+\t\t     const vec<dt_node *> &others)\n {\n   char buf[128];\n   char *kid_opname = buf;\n@@ -5031,7 +5032,7 @@ parser::parse_pattern ()\n    recursively.  */\n \n static void\n-walk_captures (operand *op, vec<vec<capture *> > cpts)\n+walk_captures (operand *op, vec<vec<capture *> > &cpts)\n {\n   if (! op)\n     return;"}, {"sha": "5d3094b5f3cb2a7fcf61508cba1aefac1f4cd4b0", "filename": "gcc/gimple-ssa-store-merging.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00dcc88a0ed7bd148ea86d900b6c93574a2e1f26/gcc%2Fgimple-ssa-store-merging.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00dcc88a0ed7bd148ea86d900b6c93574a2e1f26/gcc%2Fgimple-ssa-store-merging.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-store-merging.c?ref=00dcc88a0ed7bd148ea86d900b6c93574a2e1f26", "patch": "@@ -2654,7 +2654,8 @@ gather_bswap_load_refs (vec<tree> *refs, tree val)\n    go after the = _5 store and thus change behavior.  */\n \n static bool\n-check_no_overlap (vec<store_immediate_info *> m_store_info, unsigned int i,\n+check_no_overlap (const vec<store_immediate_info *> &m_store_info,\n+\t\t  unsigned int i,\n \t\t  bool all_integer_cst_p, unsigned int first_order,\n \t\t  unsigned int last_order, unsigned HOST_WIDE_INT start,\n \t\t  unsigned HOST_WIDE_INT end, unsigned int first_earlier,"}, {"sha": "383da98ca6ccbd8b836abd4564a803a2f8426991", "filename": "gcc/gimple.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00dcc88a0ed7bd148ea86d900b6c93574a2e1f26/gcc%2Fgimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00dcc88a0ed7bd148ea86d900b6c93574a2e1f26/gcc%2Fgimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.c?ref=00dcc88a0ed7bd148ea86d900b6c93574a2e1f26", "patch": "@@ -241,7 +241,7 @@ gimple_build_call_1 (tree fn, unsigned nargs)\n    specified in vector ARGS.  */\n \n gcall *\n-gimple_build_call_vec (tree fn, vec<tree> args)\n+gimple_build_call_vec (tree fn, const vec<tree> &args)\n {\n   unsigned i;\n   unsigned nargs = args.length ();\n@@ -338,7 +338,7 @@ gimple_build_call_internal (enum internal_fn fn, unsigned nargs, ...)\n    specified in vector ARGS.  */\n \n gcall *\n-gimple_build_call_internal_vec (enum internal_fn fn, vec<tree> args)\n+gimple_build_call_internal_vec (enum internal_fn fn, const vec<tree> &args)\n {\n   unsigned i, nargs;\n   gcall *call;\n@@ -802,7 +802,7 @@ gimple_build_switch_nlabels (unsigned nlabels, tree index, tree default_label)\n    ARGS is a vector of labels excluding the default.  */\n \n gswitch *\n-gimple_build_switch (tree index, tree default_label, vec<tree> args)\n+gimple_build_switch (tree index, tree default_label, const vec<tree> &args)\n {\n   unsigned i, nlabels = args.length ();\n \n@@ -3051,7 +3051,7 @@ compare_case_labels (const void *p1, const void *p2)\n /* Sort the case labels in LABEL_VEC in place in ascending order.  */\n \n void\n-sort_case_labels (vec<tree> label_vec)\n+sort_case_labels (vec<tree> &label_vec)\n {\n   label_vec.qsort (compare_case_labels);\n }\n@@ -3076,7 +3076,7 @@ sort_case_labels (vec<tree> label_vec)\n    found or not.  */\n \n void\n-preprocess_case_label_vec_for_gimple (vec<tree> labels,\n+preprocess_case_label_vec_for_gimple (vec<tree> &labels,\n \t\t\t\t      tree index_type,\n \t\t\t\t      tree *default_casep)\n {"}, {"sha": "31d7dd0e550327641bcca62d8278c0d1403d8371", "filename": "gcc/gimple.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00dcc88a0ed7bd148ea86d900b6c93574a2e1f26/gcc%2Fgimple.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00dcc88a0ed7bd148ea86d900b6c93574a2e1f26/gcc%2Fgimple.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.h?ref=00dcc88a0ed7bd148ea86d900b6c93574a2e1f26", "patch": "@@ -1516,11 +1516,11 @@ void gimple_init (gimple *g, enum gimple_code code, unsigned num_ops);\n gimple *gimple_alloc (enum gimple_code, unsigned CXX_MEM_STAT_INFO);\n greturn *gimple_build_return (tree);\n void gimple_call_reset_alias_info (gcall *);\n-gcall *gimple_build_call_vec (tree, vec<tree> );\n+gcall *gimple_build_call_vec (tree, const vec<tree> &);\n gcall *gimple_build_call (tree, unsigned, ...);\n gcall *gimple_build_call_valist (tree, unsigned, va_list);\n gcall *gimple_build_call_internal (enum internal_fn, unsigned, ...);\n-gcall *gimple_build_call_internal_vec (enum internal_fn, vec<tree> );\n+gcall *gimple_build_call_internal_vec (enum internal_fn, const vec<tree> &);\n gcall *gimple_build_call_from_tree (tree, tree);\n gassign *gimple_build_assign (tree, tree CXX_MEM_STAT_INFO);\n gassign *gimple_build_assign (tree, enum tree_code,\n@@ -1547,7 +1547,7 @@ gtry *gimple_build_try (gimple_seq, gimple_seq,\n gimple *gimple_build_wce (gimple_seq);\n gresx *gimple_build_resx (int);\n gswitch *gimple_build_switch_nlabels (unsigned, tree, tree);\n-gswitch *gimple_build_switch (tree, tree, vec<tree> );\n+gswitch *gimple_build_switch (tree, tree, const vec<tree> &);\n geh_dispatch *gimple_build_eh_dispatch (int);\n gdebug *gimple_build_debug_bind (tree, tree, gimple * CXX_MEM_STAT_INFO);\n gdebug *gimple_build_debug_source_bind (tree, tree, gimple * CXX_MEM_STAT_INFO);\n@@ -1626,8 +1626,8 @@ extern bool nonbarrier_call_p (gimple *);\n extern bool infer_nonnull_range (gimple *, tree);\n extern bool infer_nonnull_range_by_dereference (gimple *, tree);\n extern bool infer_nonnull_range_by_attribute (gimple *, tree);\n-extern void sort_case_labels (vec<tree>);\n-extern void preprocess_case_label_vec_for_gimple (vec<tree>, tree, tree *);\n+extern void sort_case_labels (vec<tree> &);\n+extern void preprocess_case_label_vec_for_gimple (vec<tree> &, tree, tree *);\n extern void gimple_seq_set_location (gimple_seq, location_t);\n extern void gimple_seq_discard (gimple_seq);\n extern void maybe_remove_unused_call_args (struct function *, gimple *);"}, {"sha": "26d112795511b5b71d6107f371abd8fdb7daab0e", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00dcc88a0ed7bd148ea86d900b6c93574a2e1f26/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00dcc88a0ed7bd148ea86d900b6c93574a2e1f26/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=00dcc88a0ed7bd148ea86d900b6c93574a2e1f26", "patch": "@@ -891,7 +891,7 @@ static void move_block_after_check (rtx_insn *);\n static void move_succs (vec<edge, va_gc> **, basic_block);\n static void sched_remove_insn (rtx_insn *);\n static void clear_priorities (rtx_insn *, rtx_vec_t *);\n-static void calc_priorities (rtx_vec_t);\n+static void calc_priorities (const rtx_vec_t &);\n static void add_jump_dependencies (rtx_insn *, rtx_insn *);\n \n #endif /* INSN_SCHEDULING */\n@@ -8923,7 +8923,7 @@ clear_priorities (rtx_insn *insn, rtx_vec_t *roots_ptr)\n    changed.  ROOTS is a vector of instructions whose priority computation will\n    trigger initialization of all cleared priorities.  */\n static void\n-calc_priorities (rtx_vec_t roots)\n+calc_priorities (const rtx_vec_t &roots)\n {\n   int i;\n   rtx_insn *insn;\n@@ -8988,7 +8988,7 @@ sched_init_insn_luid (rtx_insn *insn)\n    The hook common_sched_info->luid_for_non_insn () is used to determine\n    if notes, labels, etc. need luids.  */\n void\n-sched_init_luids (bb_vec_t bbs)\n+sched_init_luids (const bb_vec_t &bbs)\n {\n   int i;\n   basic_block bb;\n@@ -9062,7 +9062,7 @@ init_h_i_d (rtx_insn *insn)\n \n /* Initialize haifa_insn_data for BBS.  */\n void\n-haifa_init_h_i_d (bb_vec_t bbs)\n+haifa_init_h_i_d (const bb_vec_t &bbs)\n {\n   int i;\n   basic_block bb;"}, {"sha": "ce28ada19fe5bb0fbc9b9ba30ea92efa1c0ce3f2", "filename": "gcc/ipa-cp.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00dcc88a0ed7bd148ea86d900b6c93574a2e1f26/gcc%2Fipa-cp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00dcc88a0ed7bd148ea86d900b6c93574a2e1f26/gcc%2Fipa-cp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-cp.c?ref=00dcc88a0ed7bd148ea86d900b6c93574a2e1f26", "patch": "@@ -2946,9 +2946,9 @@ propagate_constants_across_call (struct cgraph_edge *cs)\n \n static tree\n ipa_get_indirect_edge_target_1 (struct cgraph_edge *ie,\n-\t\t\t\tvec<tree> known_csts,\n-\t\t\t\tvec<ipa_polymorphic_call_context> known_contexts,\n-\t\t\t\tvec<ipa_agg_value_set> known_aggs,\n+\t\t\t\tconst vec<tree> &known_csts,\n+\t\t\t\tconst vec<ipa_polymorphic_call_context> &known_contexts,\n+\t\t\t\tconst vec<ipa_agg_value_set> &known_aggs,\n \t\t\t\tstruct ipa_agg_replacement_value *agg_reps,\n \t\t\t\tbool *speculative)\n {\n@@ -2985,7 +2985,7 @@ ipa_get_indirect_edge_target_1 (struct cgraph_edge *ie,\n \t    }\n \t  if (!t)\n \t    {\n-\t      struct ipa_agg_value_set *agg;\n+\t      const ipa_agg_value_set *agg;\n \t      if (known_aggs.length () > (unsigned int) param_index)\n \t\tagg = &known_aggs[param_index];\n \t      else\n@@ -3045,7 +3045,7 @@ ipa_get_indirect_edge_target_1 (struct cgraph_edge *ie,\n   if (!t && known_aggs.length () > (unsigned int) param_index\n       && !ie->indirect_info->by_ref)\n     {\n-      struct ipa_agg_value_set *agg = &known_aggs[param_index];\n+      const ipa_agg_value_set *agg = &known_aggs[param_index];\n       t = ipa_find_agg_cst_for_param (agg,\n \t\t\t\t      (unsigned) param_index\n \t\t\t\t\t < known_csts.length ()\n@@ -4267,7 +4267,7 @@ get_info_about_necessary_edges (ipcp_value<valtype> *val, cgraph_node *dest,\n    this kind of adjustment is possible.  */\n \n static bool\n-adjust_callers_for_value_intersection (vec<cgraph_edge *> callers,\n+adjust_callers_for_value_intersection (vec<cgraph_edge *> &callers,\n \t\t\t\t       cgraph_node *node)\n {\n   for (unsigned i = 0; i < callers.length (); i++)\n@@ -4725,8 +4725,8 @@ self_recursive_agg_pass_through_p (cgraph_edge *cs, ipa_agg_jf_item *jfunc,\n \n static void\n find_more_scalar_values_for_callers_subset (struct cgraph_node *node,\n-\t\t\t\t\t    vec<tree> known_csts,\n-\t\t\t\t\t    vec<cgraph_edge *> callers)\n+\t\t\t\t\t    vec<tree> &known_csts,\n+\t\t\t\t\t    const vec<cgraph_edge *> &callers)\n {\n   ipa_node_params *info = ipa_node_params_sum->get (node);\n   int i, count = ipa_get_param_count (info);\n@@ -4818,7 +4818,7 @@ static void\n find_more_contexts_for_caller_subset (cgraph_node *node,\n \t\t\t\t      vec<ipa_polymorphic_call_context>\n \t\t\t\t      *known_contexts,\n-\t\t\t\t      vec<cgraph_edge *> callers)\n+\t\t\t\t      const vec<cgraph_edge *> &callers)\n {\n   ipa_node_params *info = ipa_node_params_sum->get (node);\n   int i, count = ipa_get_param_count (info);\n@@ -5179,7 +5179,7 @@ intersect_aggregates_with_edge (struct cgraph_edge *cs, int index,\n \n static struct ipa_agg_replacement_value *\n find_aggregate_values_for_callers_subset (struct cgraph_node *node,\n-\t\t\t\t\t  vec<cgraph_edge *> callers)\n+\t\t\t\t\t  const vec<cgraph_edge *> &callers)\n {\n   ipa_node_params *dest_info = ipa_node_params_sum->get (node);\n   struct ipa_agg_replacement_value *res;\n@@ -5413,7 +5413,7 @@ known_contexts_useful_p (vec<ipa_polymorphic_call_context> known_contexts)\n /* Return a copy of KNOWN_CSTS if it is not empty, otherwise return vNULL.  */\n \n static vec<ipa_polymorphic_call_context>\n-copy_useful_known_contexts (vec<ipa_polymorphic_call_context> known_contexts)\n+copy_useful_known_contexts (const vec<ipa_polymorphic_call_context> &known_contexts)\n {\n   if (known_contexts_useful_p (known_contexts))\n     return known_contexts.copy ();"}, {"sha": "cf80ce3c0400d1195641be44453f0fb538bbfbfc", "filename": "gcc/ipa-fnsummary.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00dcc88a0ed7bd148ea86d900b6c93574a2e1f26/gcc%2Fipa-fnsummary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00dcc88a0ed7bd148ea86d900b6c93574a2e1f26/gcc%2Fipa-fnsummary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-fnsummary.c?ref=00dcc88a0ed7bd148ea86d900b6c93574a2e1f26", "patch": "@@ -3967,8 +3967,8 @@ remap_edge_summaries (struct cgraph_edge *inlined_edge,\n \t\t      class ipa_fn_summary *info,\n \t\t      class ipa_node_params *params_summary,\n \t\t      class ipa_fn_summary *callee_info,\n-\t\t      vec<int> operand_map,\n-\t\t      vec<HOST_WIDE_INT> offset_map,\n+\t\t      const vec<int> &operand_map,\n+\t\t      const vec<HOST_WIDE_INT> &offset_map,\n \t\t      clause_t possible_truths,\n \t\t      predicate *toplev_predicate)\n {\n@@ -4028,8 +4028,8 @@ remap_freqcounting_predicate (class ipa_fn_summary *info,\n \t\t\t      class ipa_node_params *params_summary,\n \t\t\t      class ipa_fn_summary *callee_info,\n \t\t\t      vec<ipa_freqcounting_predicate, va_gc> *v,\n-\t\t\t      vec<int> operand_map,\n-\t\t\t      vec<HOST_WIDE_INT> offset_map,\n+\t\t\t      const vec<int> &operand_map,\n+\t\t\t      const vec<HOST_WIDE_INT> &offset_map,\n \t\t\t      clause_t possible_truths,\n \t\t\t      predicate *toplev_predicate)\n "}, {"sha": "413446bcc46cd22b42ae90b7024135b8210a38e3", "filename": "gcc/ipa-inline.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00dcc88a0ed7bd148ea86d900b6c93574a2e1f26/gcc%2Fipa-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00dcc88a0ed7bd148ea86d900b6c93574a2e1f26/gcc%2Fipa-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.c?ref=00dcc88a0ed7bd148ea86d900b6c93574a2e1f26", "patch": "@@ -1774,7 +1774,7 @@ compute_max_insns (cgraph_node *node, int insns)\n /* Compute badness of all edges in NEW_EDGES and add them to the HEAP.  */\n \n static void\n-add_new_edges_to_heap (edge_heap_t *heap, vec<cgraph_edge *> new_edges)\n+add_new_edges_to_heap (edge_heap_t *heap, vec<cgraph_edge *> &new_edges)\n {\n   while (new_edges.length () > 0)\n     {"}, {"sha": "e4b11ec3ae3e3e6163a7583b34daef2263b1b824", "filename": "gcc/ipa-predicate.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00dcc88a0ed7bd148ea86d900b6c93574a2e1f26/gcc%2Fipa-predicate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00dcc88a0ed7bd148ea86d900b6c93574a2e1f26/gcc%2Fipa-predicate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-predicate.c?ref=00dcc88a0ed7bd148ea86d900b6c93574a2e1f26", "patch": "@@ -507,8 +507,8 @@ predicate\n predicate::remap_after_inlining (class ipa_fn_summary *info,\n \t\t\t\t class ipa_node_params *params_summary,\n \t\t\t\t class ipa_fn_summary *callee_info,\n-\t\t\t\t vec<int> operand_map,\n-\t\t\t\t vec<HOST_WIDE_INT> offset_map,\n+\t\t\t\t const vec<int> &operand_map,\n+\t\t\t\t const vec<HOST_WIDE_INT> &offset_map,\n \t\t\t\t clause_t possible_truths,\n \t\t\t\t const predicate &toplev_predicate)\n {"}, {"sha": "ac52b54aa368ac1959896c49d9c96feb718512d5", "filename": "gcc/ipa-predicate.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00dcc88a0ed7bd148ea86d900b6c93574a2e1f26/gcc%2Fipa-predicate.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00dcc88a0ed7bd148ea86d900b6c93574a2e1f26/gcc%2Fipa-predicate.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-predicate.h?ref=00dcc88a0ed7bd148ea86d900b6c93574a2e1f26", "patch": "@@ -243,7 +243,7 @@ class predicate\n   predicate remap_after_inlining (class ipa_fn_summary *,\n \t\t  \t\t  class ipa_node_params *params_summary,\n \t\t\t          class ipa_fn_summary *,\n-\t\t\t\t  vec<int>, vec<HOST_WIDE_INT>,\n+\t\t\t\t  const vec<int> &, const vec<HOST_WIDE_INT> &,\n \t\t\t\t  clause_t, const predicate &);\n \n   void stream_in (class lto_input_block *);"}, {"sha": "43f46a578c60738c39aa4992bedf73aaefd96467", "filename": "gcc/ipa-prop.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00dcc88a0ed7bd148ea86d900b6c93574a2e1f26/gcc%2Fipa-prop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00dcc88a0ed7bd148ea86d900b6c93574a2e1f26/gcc%2Fipa-prop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.c?ref=00dcc88a0ed7bd148ea86d900b6c93574a2e1f26", "patch": "@@ -3562,7 +3562,7 @@ ipa_find_agg_cst_from_init (tree scalar, HOST_WIDE_INT offset, bool by_ref)\n    initializer of a constant.  */\n \n tree\n-ipa_find_agg_cst_for_param (struct ipa_agg_value_set *agg, tree scalar,\n+ipa_find_agg_cst_for_param (const ipa_agg_value_set *agg, tree scalar,\n \t\t\t    HOST_WIDE_INT offset, bool by_ref,\n \t\t\t    bool *from_global_constant)\n {"}, {"sha": "2fe220acf842685d8291b51ed4a86947ff379daf", "filename": "gcc/ipa-prop.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00dcc88a0ed7bd148ea86d900b6c93574a2e1f26/gcc%2Fipa-prop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00dcc88a0ed7bd148ea86d900b6c93574a2e1f26/gcc%2Fipa-prop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.h?ref=00dcc88a0ed7bd148ea86d900b6c93574a2e1f26", "patch": "@@ -1092,7 +1092,7 @@ ipa_bits *ipa_get_ipa_bits_for_value (const widest_int &value,\n void ipa_analyze_node (struct cgraph_node *);\n \n /* Aggregate jump function related functions.  */\n-tree ipa_find_agg_cst_for_param (struct ipa_agg_value_set *agg, tree scalar,\n+tree ipa_find_agg_cst_for_param (const ipa_agg_value_set *agg, tree scalar,\n \t\t\t\t HOST_WIDE_INT offset, bool by_ref,\n \t\t\t\t bool *from_global_constant = NULL);\n bool ipa_load_from_parm_agg (struct ipa_func_body_info *fbi,"}, {"sha": "42120656366416d56f81dec01d38e097fefaf16d", "filename": "gcc/ira-build.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00dcc88a0ed7bd148ea86d900b6c93574a2e1f26/gcc%2Fira-build.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00dcc88a0ed7bd148ea86d900b6c93574a2e1f26/gcc%2Fira-build.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-build.c?ref=00dcc88a0ed7bd148ea86d900b6c93574a2e1f26", "patch": "@@ -1672,7 +1672,7 @@ finish_cost_vectors (void)\n \n static vec<ira_loop_tree_node_t>\n ira_loop_tree_body_rev_postorder (ira_loop_tree_node_t loop_node ATTRIBUTE_UNUSED,\n-\t\t\t\t  vec<ira_loop_tree_node_t> loop_preorder)\n+\t\t\t\t  const vec<ira_loop_tree_node_t> &loop_preorder)\n {\n   vec<ira_loop_tree_node_t> topsort_nodes = vNULL;\n   unsigned int n_loop_preorder;"}, {"sha": "041166658d1748375b7477f45f6f80f8e5834235", "filename": "gcc/read-rtl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00dcc88a0ed7bd148ea86d900b6c93574a2e1f26/gcc%2Fread-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00dcc88a0ed7bd148ea86d900b6c93574a2e1f26/gcc%2Fread-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fread-rtl.c?ref=00dcc88a0ed7bd148ea86d900b6c93574a2e1f26", "patch": "@@ -835,7 +835,7 @@ md_reader::handle_overloaded_name (rtx original, vec<mapping *> *iterators)\n    gives the iterator associated with argument I of ONAME.  */\n \n static void\n-add_overload_instance (overloaded_name *oname, vec<mapping *> iterators, rtx x)\n+add_overload_instance (overloaded_name *oname, const vec<mapping *> &iterators, rtx x)\n {\n   /* Create the instance.  */\n   overloaded_instance *instance = new overloaded_instance;"}, {"sha": "5ffe90030fb14ada01f327d229acf19ad5bcde70", "filename": "gcc/rtl.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00dcc88a0ed7bd148ea86d900b6c93574a2e1f26/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00dcc88a0ed7bd148ea86d900b6c93574a2e1f26/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=00dcc88a0ed7bd148ea86d900b6c93574a2e1f26", "patch": "@@ -2416,9 +2416,9 @@ extern void get_full_rtx_cost (rtx, machine_mode, enum rtx_code, int,\n \t\t\t       struct full_rtx_costs *);\n extern bool native_encode_rtx (machine_mode, rtx, vec<target_unit> &,\n \t\t\t       unsigned int, unsigned int);\n-extern rtx native_decode_rtx (machine_mode, vec<target_unit>,\n+extern rtx native_decode_rtx (machine_mode, const vec<target_unit> &,\n \t\t\t      unsigned int);\n-extern rtx native_decode_vector_rtx (machine_mode, vec<target_unit>,\n+extern rtx native_decode_vector_rtx (machine_mode, const vec<target_unit> &,\n \t\t\t\t     unsigned int, unsigned int, unsigned int);\n extern poly_uint64 subreg_lsb (const_rtx);\n extern poly_uint64 subreg_size_lsb (poly_uint64, poly_uint64, poly_uint64);"}, {"sha": "868f1eb6c8981d51ee0ebed478a825358a7f7976", "filename": "gcc/sched-int.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00dcc88a0ed7bd148ea86d900b6c93574a2e1f26/gcc%2Fsched-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00dcc88a0ed7bd148ea86d900b6c93574a2e1f26/gcc%2Fsched-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-int.h?ref=00dcc88a0ed7bd148ea86d900b6c93574a2e1f26", "patch": "@@ -43,12 +43,12 @@ extern void sched_init_bbs (void);\n \n extern void sched_extend_luids (void);\n extern void sched_init_insn_luid (rtx_insn *);\n-extern void sched_init_luids (bb_vec_t);\n+extern void sched_init_luids (const bb_vec_t &);\n extern void sched_finish_luids (void);\n \n extern void sched_extend_target (void);\n \n-extern void haifa_init_h_i_d (bb_vec_t);\n+extern void haifa_init_h_i_d (const bb_vec_t &);\n extern void haifa_finish_h_i_d (void);\n \n /* Hooks that are common to all the schedulers.  */"}, {"sha": "fd306bfbba6d81d1c8cf2aec9191a10852ecfbb7", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00dcc88a0ed7bd148ea86d900b6c93574a2e1f26/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00dcc88a0ed7bd148ea86d900b6c93574a2e1f26/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=00dcc88a0ed7bd148ea86d900b6c93574a2e1f26", "patch": "@@ -6752,7 +6752,7 @@ native_encode_rtx (machine_mode mode, rtx x, vec<target_unit> &bytes,\n    Return the vector on success, otherwise return NULL_RTX.  */\n \n rtx\n-native_decode_vector_rtx (machine_mode mode, vec<target_unit> bytes,\n+native_decode_vector_rtx (machine_mode mode, const vec<target_unit> &bytes,\n \t\t\t  unsigned int first_byte, unsigned int npatterns,\n \t\t\t  unsigned int nelts_per_pattern)\n {\n@@ -6797,7 +6797,7 @@ native_decode_vector_rtx (machine_mode mode, vec<target_unit> bytes,\n    Return the rtx on success, otherwise return NULL_RTX.  */\n \n rtx\n-native_decode_rtx (machine_mode mode, vec<target_unit> bytes,\n+native_decode_rtx (machine_mode mode, const vec<target_unit> &bytes,\n \t\t   unsigned int first_byte)\n {\n   if (VECTOR_MODE_P (mode))"}, {"sha": "d9b9b4c6e843a022ab4956fe49d4158486372cd2", "filename": "gcc/tree-call-cdce.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00dcc88a0ed7bd148ea86d900b6c93574a2e1f26/gcc%2Ftree-call-cdce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00dcc88a0ed7bd148ea86d900b6c93574a2e1f26/gcc%2Ftree-call-cdce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-call-cdce.c?ref=00dcc88a0ed7bd148ea86d900b6c93574a2e1f26", "patch": "@@ -761,7 +761,7 @@ get_no_error_domain (enum built_in_function fnc)\n    condition are separated by NULL tree in the vector.  */\n \n static void\n-gen_shrink_wrap_conditions (gcall *bi_call, vec<gimple *> conds,\n+gen_shrink_wrap_conditions (gcall *bi_call, const vec<gimple *> &conds,\n                             unsigned int *nconds)\n {\n   gcall *call;\n@@ -797,7 +797,8 @@ gen_shrink_wrap_conditions (gcall *bi_call, vec<gimple *> conds,\n    when it is non-null, it is called while all of the CONDS are true.  */\n \n static void\n-shrink_wrap_one_built_in_call_with_conds (gcall *bi_call, vec <gimple *> conds,\n+shrink_wrap_one_built_in_call_with_conds (gcall *bi_call,\n+\t\t\t\t\t  const vec <gimple *> &conds,\n \t\t\t\t\t  unsigned int nconds,\n \t\t\t\t\t  gcall *bi_newcall = NULL)\n {\n@@ -1132,7 +1133,7 @@ use_internal_fn (gcall *call)\n    wrapping transformation.  */\n \n static void\n-shrink_wrap_conditional_dead_built_in_calls (vec<gcall *> calls)\n+shrink_wrap_conditional_dead_built_in_calls (const vec<gcall *> &calls)\n {\n   unsigned i = 0;\n "}, {"sha": "210ac2851a5c1ec0a94f75667ed42a2e3d4cd1b2", "filename": "gcc/tree-data-ref.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00dcc88a0ed7bd148ea86d900b6c93574a2e1f26/gcc%2Ftree-data-ref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00dcc88a0ed7bd148ea86d900b6c93574a2e1f26/gcc%2Ftree-data-ref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.c?ref=00dcc88a0ed7bd148ea86d900b6c93574a2e1f26", "patch": "@@ -2643,7 +2643,7 @@ create_intersect_range_checks (class loop *loop, tree *cond_expr,\n \n void\n create_runtime_alias_checks (class loop *loop,\n-\t\t\t     vec<dr_with_seg_len_pair_t> *alias_pairs,\n+\t\t\t     const vec<dr_with_seg_len_pair_t> *alias_pairs,\n \t\t\t     tree * cond_expr)\n {\n   tree part_cond_expr;\n@@ -5635,9 +5635,9 @@ compute_affine_dependence (struct data_dependence_relation *ddr,\n    is small enough to be handled.  */\n \n bool\n-compute_all_dependences (vec<data_reference_p> datarefs,\n+compute_all_dependences (const vec<data_reference_p> &datarefs,\n \t\t\t vec<ddr_p> *dependence_relations,\n-\t\t\t vec<loop_p> loop_nest,\n+\t\t\t const vec<loop_p> &loop_nest,\n \t\t\t bool compute_self_and_rr)\n {\n   struct data_dependence_relation *ddr;"}, {"sha": "a0ff2a8026310de7f36331598384ae97f030a91a", "filename": "gcc/tree-data-ref.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00dcc88a0ed7bd148ea86d900b6c93574a2e1f26/gcc%2Ftree-data-ref.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00dcc88a0ed7bd148ea86d900b6c93574a2e1f26/gcc%2Ftree-data-ref.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.h?ref=00dcc88a0ed7bd148ea86d900b6c93574a2e1f26", "patch": "@@ -551,9 +551,9 @@ extern struct data_dependence_relation *initialize_data_dependence_relation\n extern void compute_affine_dependence (struct data_dependence_relation *,\n \t\t\t\t       loop_p);\n extern void compute_self_dependence (struct data_dependence_relation *);\n-extern bool compute_all_dependences (vec<data_reference_p> ,\n+extern bool compute_all_dependences (const vec<data_reference_p> &,\n \t\t\t\t     vec<ddr_p> *,\n-\t\t\t\t     vec<loop_p>, bool);\n+\t\t\t\t     const vec<loop_p> &, bool);\n extern tree find_data_references_in_bb (class loop *, basic_block,\n                                         vec<data_reference_p> *);\n extern unsigned int dr_alignment (innermost_loop_behavior *);\n@@ -578,7 +578,8 @@ extern int data_ref_compare_tree (tree, tree);\n extern void prune_runtime_alias_test_list (vec<dr_with_seg_len_pair_t> *,\n \t\t\t\t\t   poly_uint64);\n extern void create_runtime_alias_checks (class loop *,\n-\t\t\t\t\t vec<dr_with_seg_len_pair_t> *, tree*);\n+\t\t\t\t\t const vec<dr_with_seg_len_pair_t> *,\n+\t\t\t\t\t tree*);\n extern tree dr_direction_indicator (struct data_reference *);\n extern tree dr_zero_step_indicator (struct data_reference *);\n extern bool dr_known_forward_stride_p (struct data_reference *);\n@@ -666,7 +667,7 @@ ddr_dependence_level (ddr_p ddr)\n /* Return the index of the variable VAR in the LOOP_NEST array.  */\n \n static inline int\n-index_in_loop_nest (int var, vec<loop_p> loop_nest)\n+index_in_loop_nest (int var, const vec<loop_p> &loop_nest)\n {\n   class loop *loopi;\n   int var_index;"}, {"sha": "49e89cffa1a29b0a270fa58426dc15ce27e81d34", "filename": "gcc/tree-if-conv.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00dcc88a0ed7bd148ea86d900b6c93574a2e1f26/gcc%2Ftree-if-conv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00dcc88a0ed7bd148ea86d900b6c93574a2e1f26/gcc%2Ftree-if-conv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-if-conv.c?ref=00dcc88a0ed7bd148ea86d900b6c93574a2e1f26", "patch": "@@ -2208,7 +2208,7 @@ insert_gimplified_predicates (loop_p loop)\n    mask if it was created for given SIZE and -1 otherwise.  */\n \n static int\n-mask_exists (int size, vec<int> vec)\n+mask_exists (int size, const vec<int> &vec)\n {\n   unsigned int ix;\n   int v;"}, {"sha": "a984d2124f767230ddd6841808f30ab73e50dd4a", "filename": "gcc/tree-loop-distribution.c", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00dcc88a0ed7bd148ea86d900b6c93574a2e1f26/gcc%2Ftree-loop-distribution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00dcc88a0ed7bd148ea86d900b6c93574a2e1f26/gcc%2Ftree-loop-distribution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-loop-distribution.c?ref=00dcc88a0ed7bd148ea86d900b6c93574a2e1f26", "patch": "@@ -527,7 +527,8 @@ class loop_distribution\n \n   /* Build the vertices of the reduced dependence graph RDG.  Return false\n      if that failed.  */\n-  bool create_rdg_vertices (struct graph *rdg, vec<gimple *> stmts, loop_p loop);\n+  bool create_rdg_vertices (struct graph *rdg, const vec<gimple *> &stmts,\n+\t\t\t    loop_p loop);\n \n   /* Initialize STMTS with all the statements of LOOP.  We use topological\n      order to discover all statements.  The order is important because\n@@ -646,7 +647,7 @@ class loop_distribution\n      statements from STMTS into separate loops.  Returns the number of\n      distributed loops.  Set NB_CALLS to number of generated builtin calls.\n      Set *DESTROY_P to whether LOOP needs to be destroyed.  */\n-  int distribute_loop (class loop *loop, vec<gimple *> stmts,\n+  int distribute_loop (class loop *loop, const vec<gimple *> &stmts,\n \t\t       control_dependences *cd, int *nb_calls, bool *destroy_p,\n \t\t       bool only_patterns_p);\n \n@@ -699,7 +700,8 @@ bb_top_order_cmp_r (const void *x, const void *y, void *loop)\n }\n \n bool\n-loop_distribution::create_rdg_vertices (struct graph *rdg, vec<gimple *> stmts,\n+loop_distribution::create_rdg_vertices (struct graph *rdg,\n+\t\t\t\t\tconst vec<gimple *> &stmts,\n \t\t\t\t\tloop_p loop)\n {\n   int i;\n@@ -1953,7 +1955,7 @@ loop_distribution::rdg_build_partitions (struct graph *rdg,\n /* Dump to FILE the PARTITIONS.  */\n \n static void\n-dump_rdg_partitions (FILE *file, vec<partition *> partitions)\n+dump_rdg_partitions (FILE *file, const vec<partition *> &partitions)\n {\n   int i;\n   partition *partition;\n@@ -1963,10 +1965,10 @@ dump_rdg_partitions (FILE *file, vec<partition *> partitions)\n }\n \n /* Debug PARTITIONS.  */\n-extern void debug_rdg_partitions (vec<partition *> );\n+extern void debug_rdg_partitions (const vec<partition *> &);\n \n DEBUG_FUNCTION void\n-debug_rdg_partitions (vec<partition *> partitions)\n+debug_rdg_partitions (const vec<partition *> &partitions)\n {\n   dump_rdg_partitions (stderr, partitions);\n }\n@@ -2017,7 +2019,7 @@ number_of_rw_in_partition (struct graph *rdg, partition *partition)\n \n static bool\n partition_contains_all_rw (struct graph *rdg,\n-\t\t\t   vec<partition *> partitions)\n+\t\t\t   const vec<partition *> &partitions)\n {\n   int i;\n   partition *partition;\n@@ -2921,7 +2923,8 @@ loop_distribution::finalize_partitions (class loop *loop,\n    Set *DESTROY_P to whether LOOP needs to be destroyed.  */\n \n int\n-loop_distribution::distribute_loop (class loop *loop, vec<gimple *> stmts,\n+loop_distribution::distribute_loop (class loop *loop,\n+\t\t const vec<gimple *> &stmts,\n \t\t control_dependences *cd, int *nb_calls, bool *destroy_p,\n \t\t bool only_patterns_p)\n {"}, {"sha": "bb547572653f967d396e214dd5862f8b295d249f", "filename": "gcc/tree-parloops.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00dcc88a0ed7bd148ea86d900b6c93574a2e1f26/gcc%2Ftree-parloops.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00dcc88a0ed7bd148ea86d900b6c93574a2e1f26/gcc%2Ftree-parloops.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-parloops.c?ref=00dcc88a0ed7bd148ea86d900b6c93574a2e1f26", "patch": "@@ -3713,7 +3713,7 @@ ref_conflicts_with_region (gimple_stmt_iterator gsi, ao_ref *ref,\n    reduction results in REDUCTION_STORES.  */\n \n static bool\n-oacc_entry_exit_ok_1 (bitmap in_loop_bbs, vec<basic_block> region_bbs,\n+oacc_entry_exit_ok_1 (bitmap in_loop_bbs, const vec<basic_block> &region_bbs,\n \t\t      reduction_info_table_type *reduction_list,\n \t\t      bitmap reduction_stores)\n {\n@@ -3828,7 +3828,8 @@ oacc_entry_exit_ok_1 (bitmap in_loop_bbs, vec<basic_block> region_bbs,\n    if any changes were made.  */\n \n static bool\n-oacc_entry_exit_single_gang (bitmap in_loop_bbs, vec<basic_block> region_bbs,\n+oacc_entry_exit_single_gang (bitmap in_loop_bbs,\n+\t\t\t     const vec<basic_block> &region_bbs,\n \t\t\t     bitmap reduction_stores)\n {\n   tree gang_pos = NULL_TREE;"}, {"sha": "dfb39841ced1b2a9ac75380ef83952425cab5b7a", "filename": "gcc/tree-ssa-loop-im.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00dcc88a0ed7bd148ea86d900b6c93574a2e1f26/gcc%2Ftree-ssa-loop-im.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00dcc88a0ed7bd148ea86d900b6c93574a2e1f26/gcc%2Ftree-ssa-loop-im.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-im.c?ref=00dcc88a0ed7bd148ea86d900b6c93574a2e1f26", "patch": "@@ -2557,7 +2557,7 @@ sm_seq_valid_bb (class loop *loop, basic_block bb, tree vdef,\n \n static void\n hoist_memory_references (class loop *loop, bitmap mem_refs,\n-\t\t\t vec<edge> exits)\n+\t\t\t const vec<edge> &exits)\n {\n   im_mem_ref *ref;\n   unsigned  i;\n@@ -2970,7 +2970,7 @@ find_refs_for_sm (class loop *loop, bitmap sm_executed, bitmap refs_to_sm)\n \n static bool\n loop_suitable_for_sm (class loop *loop ATTRIBUTE_UNUSED,\n-\t\t      vec<edge> exits)\n+\t\t      const vec<edge> &exits)\n {\n   unsigned i;\n   edge ex;"}, {"sha": "1b5605c26b80aa1dfbf8f569dd6970b79659e0eb", "filename": "gcc/tree-ssa-loop-niter.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00dcc88a0ed7bd148ea86d900b6c93574a2e1f26/gcc%2Ftree-ssa-loop-niter.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00dcc88a0ed7bd148ea86d900b6c93574a2e1f26/gcc%2Ftree-ssa-loop-niter.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-niter.c?ref=00dcc88a0ed7bd148ea86d900b6c93574a2e1f26", "patch": "@@ -3929,7 +3929,7 @@ wide_int_cmp (const void *p1, const void *p2)\n    Lookup by binary search.  */\n \n static int\n-bound_index (vec<widest_int> bounds, const widest_int &bound)\n+bound_index (const vec<widest_int> &bounds, const widest_int &bound)\n {\n   unsigned int end = bounds.length ();\n   unsigned int begin = 0;"}, {"sha": "8498cfc7aa8c449eea336dce18b4146ff96106c1", "filename": "gcc/tree-ssa-reassoc.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00dcc88a0ed7bd148ea86d900b6c93574a2e1f26/gcc%2Ftree-ssa-reassoc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00dcc88a0ed7bd148ea86d900b6c93574a2e1f26/gcc%2Ftree-ssa-reassoc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-reassoc.c?ref=00dcc88a0ed7bd148ea86d900b6c93574a2e1f26", "patch": "@@ -4486,7 +4486,7 @@ get_ops (tree var, enum tree_code code, vec<operand_entry *> *ops,\n    stmts.  */\n \n static tree\n-update_ops (tree var, enum tree_code code, vec<operand_entry *> ops,\n+update_ops (tree var, enum tree_code code, const vec<operand_entry *> &ops,\n \t    unsigned int *pidx, class loop *loop)\n {\n   gimple *stmt = SSA_NAME_DEF_STMT (var);\n@@ -5033,7 +5033,7 @@ remove_visited_stmt_chain (tree var)\n    cases, but it is unlikely to be worth it.  */\n \n static void\n-swap_ops_for_binary_stmt (vec<operand_entry *> ops,\n+swap_ops_for_binary_stmt (const vec<operand_entry *> &ops,\n \t\t\t  unsigned int opindex, gimple *stmt)\n {\n   operand_entry *oe1, *oe2, *oe3;\n@@ -5104,7 +5104,8 @@ insert_stmt_before_use (gimple *stmt, gimple *stmt_to_insert)\n \n static tree\n rewrite_expr_tree (gimple *stmt, enum tree_code rhs_code, unsigned int opindex,\n-\t\t   vec<operand_entry *> ops, bool changed, bool next_changed)\n+\t\t   const vec<operand_entry *> &ops, bool changed,\n+\t\t   bool next_changed)\n {\n   tree rhs1 = gimple_assign_rhs1 (stmt);\n   tree rhs2 = gimple_assign_rhs2 (stmt);\n@@ -5326,7 +5327,7 @@ get_reassociation_width (int ops_num, enum tree_code opc,\n \n static void\n rewrite_expr_tree_parallel (gassign *stmt, int width,\n-\t\t\t    vec<operand_entry *> ops)\n+\t\t\t    const vec<operand_entry *> &ops)\n {\n   enum tree_code opcode = gimple_assign_rhs_code (stmt);\n   int op_num = ops.length ();"}, {"sha": "f6f900c7668701ddb5b86a7db30aadd288c83916", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00dcc88a0ed7bd148ea86d900b6c93574a2e1f26/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00dcc88a0ed7bd148ea86d900b6c93574a2e1f26/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=00dcc88a0ed7bd148ea86d900b6c93574a2e1f26", "patch": "@@ -1042,9 +1042,8 @@ copy_reference_ops_from_ref (tree ref, vec<vn_reference_op_s> *result)\n bool\n ao_ref_init_from_vn_reference (ao_ref *ref,\n \t\t\t       alias_set_type set, alias_set_type base_set,\n-\t\t\t       tree type, vec<vn_reference_op_s> ops)\n+\t\t\t       tree type, const vec<vn_reference_op_s> &ops)\n {\n-  vn_reference_op_t op;\n   unsigned i;\n   tree base = NULL_TREE;\n   tree *op0_p = &base;\n@@ -1067,7 +1066,10 @@ ao_ref_init_from_vn_reference (ao_ref *ref,\n     size = wi::to_poly_offset (size_tree);\n \n   /* Lower the final access size from the outermost expression.  */\n-  op = &ops[0];\n+  const_vn_reference_op_t cst_op = &ops[0];\n+  /* Cast away constness for the sake of the const-unsafe\n+     FOR_EACH_VEC_ELT().  */\n+  vn_reference_op_t op = const_cast<vn_reference_op_t>(cst_op);\n   size_tree = NULL_TREE;\n   if (op->opcode == COMPONENT_REF)\n     size_tree = DECL_SIZE (op->op0);\n@@ -1098,7 +1100,7 @@ ao_ref_init_from_vn_reference (ao_ref *ref,\n \t      && op->op0\n \t      && DECL_P (TREE_OPERAND (op->op0, 0)))\n \t    {\n-\t      vn_reference_op_t pop = &ops[i-1];\n+\t      const_vn_reference_op_t pop = &ops[i-1];\n \t      base = TREE_OPERAND (op->op0, 0);\n \t      if (known_eq (pop->off, -1))\n \t\t{"}, {"sha": "96100596d2e5fd87b1177556865258dae33d9a2e", "filename": "gcc/tree-ssa-sccvn.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00dcc88a0ed7bd148ea86d900b6c93574a2e1f26/gcc%2Ftree-ssa-sccvn.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00dcc88a0ed7bd148ea86d900b6c93574a2e1f26/gcc%2Ftree-ssa-sccvn.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.h?ref=00dcc88a0ed7bd148ea86d900b6c93574a2e1f26", "patch": "@@ -254,7 +254,7 @@ tree vn_nary_op_lookup_pieces (unsigned int, enum tree_code,\n vn_nary_op_t vn_nary_op_insert_pieces (unsigned int, enum tree_code,\n \t\t\t\t       tree, tree *, tree, unsigned int);\n bool ao_ref_init_from_vn_reference (ao_ref *, alias_set_type, alias_set_type,\n-\t\t\t\t    tree, vec<vn_reference_op_s> );\n+\t\t\t\t    tree, const vec<vn_reference_op_s> &);\n vec<vn_reference_op_s> vn_reference_operands_for_lookup (tree);\n tree vn_reference_lookup_pieces (tree, alias_set_type, alias_set_type, tree,\n \t\t\t\t vec<vn_reference_op_s> ,"}, {"sha": "c694926888109afe74fac1fba64ec6296095ceb5", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00dcc88a0ed7bd148ea86d900b6c93574a2e1f26/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00dcc88a0ed7bd148ea86d900b6c93574a2e1f26/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=00dcc88a0ed7bd148ea86d900b6c93574a2e1f26", "patch": "@@ -3713,8 +3713,8 @@ get_constraint_for_rhs (tree t, vec<ce_s> *results)\n    entries in *LHSC.  */\n \n static void\n-process_all_all_constraints (vec<ce_s> lhsc,\n-\t\t\t     vec<ce_s> rhsc)\n+process_all_all_constraints (const vec<ce_s> &lhsc,\n+\t\t\t     const vec<ce_s> &rhsc)\n {\n   struct constraint_expr *lhsp, *rhsp;\n   unsigned i, j;\n@@ -3814,7 +3814,7 @@ do_structure_copy (tree lhsop, tree rhsop)\n /* Create constraints ID = { rhsc }.  */\n \n static void\n-make_constraints_to (unsigned id, vec<ce_s> rhsc)\n+make_constraints_to (unsigned id, const vec<ce_s> &rhsc)\n {\n   struct constraint_expr *c;\n   struct constraint_expr includes;\n@@ -4162,7 +4162,7 @@ handle_rhs_call (gcall *stmt, vec<ce_s> *results)\n    the LHS point to global and escaped variables.  */\n \n static void\n-handle_lhs_call (gcall *stmt, tree lhs, int flags, vec<ce_s> rhsc,\n+handle_lhs_call (gcall *stmt, tree lhs, int flags, vec<ce_s> &rhsc,\n \t\t tree fndecl)\n {\n   auto_vec<ce_s> lhsc;\n@@ -4623,9 +4623,10 @@ find_func_aliases_for_builtin_call (struct function *fn, gcall *t)\n       case BUILT_IN_REALLOC:\n \tif (gimple_call_lhs (t))\n \t  {\n+\t    auto_vec<ce_s> rhsc;\n \t    handle_lhs_call (t, gimple_call_lhs (t),\n \t\t\t     gimple_call_return_flags (t) | ERF_NOALIAS,\n-\t\t\t     vNULL, fndecl);\n+\t\t\t     rhsc, fndecl);\n \t    get_constraint_for_ptr_offset (gimple_call_lhs (t),\n \t\t\t\t\t   NULL_TREE, &lhsc);\n \t    get_constraint_for_ptr_offset (gimple_call_arg (t, 0),\n@@ -5696,7 +5697,7 @@ fieldoff_compare (const void *pa, const void *pb)\n \n /* Sort a fieldstack according to the field offset and sizes.  */\n static void\n-sort_fieldstack (vec<fieldoff_s> fieldstack)\n+sort_fieldstack (vec<fieldoff_s> &fieldstack)\n {\n   fieldstack.qsort (fieldoff_compare);\n }\n@@ -6106,7 +6107,7 @@ create_function_info_for (tree decl, const char *name, bool add_id,\n    FIELDSTACK is assumed to be sorted by offset.  */\n \n static bool\n-check_for_overlaps (vec<fieldoff_s> fieldstack)\n+check_for_overlaps (const vec<fieldoff_s> &fieldstack)\n {\n   fieldoff_s *fo = NULL;\n   unsigned int i;"}, {"sha": "4988c93fdb61507a26430651b416ae61b217793a", "filename": "gcc/tree-vect-loop-manip.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00dcc88a0ed7bd148ea86d900b6c93574a2e1f26/gcc%2Ftree-vect-loop-manip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00dcc88a0ed7bd148ea86d900b6c93574a2e1f26/gcc%2Ftree-vect-loop-manip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop-manip.c?ref=00dcc88a0ed7bd148ea86d900b6c93574a2e1f26", "patch": "@@ -3192,7 +3192,7 @@ vect_create_cond_for_align_checks (loop_vec_info loop_vinfo,\n                                    tree *cond_expr,\n \t\t\t\t   gimple_seq *cond_expr_stmt_list)\n {\n-  vec<stmt_vec_info> may_misalign_stmts\n+  const vec<stmt_vec_info> &may_misalign_stmts\n     = LOOP_VINFO_MAY_MISALIGN_STMTS (loop_vinfo);\n   stmt_vec_info stmt_info;\n   int mask = LOOP_VINFO_PTR_MASK (loop_vinfo);\n@@ -3283,7 +3283,8 @@ vect_create_cond_for_align_checks (loop_vec_info loop_vinfo,\n static void\n vect_create_cond_for_unequal_addrs (loop_vec_info loop_vinfo, tree *cond_expr)\n {\n-  vec<vec_object_pair> pairs = LOOP_VINFO_CHECK_UNEQUAL_ADDRS (loop_vinfo);\n+  const vec<vec_object_pair> &pairs\n+    = LOOP_VINFO_CHECK_UNEQUAL_ADDRS (loop_vinfo);\n   unsigned int i;\n   vec_object_pair *pair;\n   FOR_EACH_VEC_ELT (pairs, i, pair)\n@@ -3302,7 +3303,8 @@ vect_create_cond_for_unequal_addrs (loop_vec_info loop_vinfo, tree *cond_expr)\n static void\n vect_create_cond_for_lower_bounds (loop_vec_info loop_vinfo, tree *cond_expr)\n {\n-  vec<vec_lower_bound> lower_bounds = LOOP_VINFO_LOWER_BOUNDS (loop_vinfo);\n+  const vec<vec_lower_bound> &lower_bounds\n+    = LOOP_VINFO_LOWER_BOUNDS (loop_vinfo);\n   for (unsigned int i = 0; i < lower_bounds.length (); ++i)\n     {\n       tree expr = lower_bounds[i].expr;\n@@ -3344,7 +3346,7 @@ vect_create_cond_for_lower_bounds (loop_vec_info loop_vinfo, tree *cond_expr)\n void\n vect_create_cond_for_alias_checks (loop_vec_info loop_vinfo, tree * cond_expr)\n {\n-  vec<dr_with_seg_len_pair_t> comp_alias_ddrs =\n+  const vec<dr_with_seg_len_pair_t> &comp_alias_ddrs =\n     LOOP_VINFO_COMP_ALIAS_DDRS (loop_vinfo);\n \n   if (comp_alias_ddrs.is_empty ())"}, {"sha": "ad209deca7958ffe877f8e410c71dc8e8286b1ce", "filename": "gcc/tree-vect-slp-patterns.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00dcc88a0ed7bd148ea86d900b6c93574a2e1f26/gcc%2Ftree-vect-slp-patterns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00dcc88a0ed7bd148ea86d900b6c93574a2e1f26/gcc%2Ftree-vect-slp-patterns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp-patterns.c?ref=00dcc88a0ed7bd148ea86d900b6c93574a2e1f26", "patch": "@@ -790,7 +790,8 @@ is_eq_or_top (complex_perm_kinds_t perm, complex_perm_kinds_t kind)\n \n static inline bool\n vect_validate_multiplication (slp_tree_to_load_perm_map_t *perm_cache,\n-\t\t\t     vec<slp_tree> left_op, vec<slp_tree> right_op,\n+\t\t\t      const vec<slp_tree> &left_op,\n+\t\t\t      const vec<slp_tree> &right_op,\n \t\t\t     bool neg_first, bool *conj_first_operand,\n \t\t\t     bool fms)\n {\n@@ -862,7 +863,8 @@ vect_validate_multiplication (slp_tree_to_load_perm_map_t *perm_cache,\n \n static inline bool\n vect_validate_multiplication (slp_tree_to_load_perm_map_t *perm_cache,\n-\t\t\t     vec<slp_tree> op, complex_perm_kinds_t permKind)\n+\t\t\t      const vec<slp_tree> &op,\n+\t\t\t      complex_perm_kinds_t permKind)\n {\n   /* The left node is the more common case, test it first.  */\n   if (!is_eq_or_top (linear_loads_p (perm_cache, op[0]), permKind))"}, {"sha": "b9d88c2d9431658e6521e82dc11049ebdf05464b", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00dcc88a0ed7bd148ea86d900b6c93574a2e1f26/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00dcc88a0ed7bd148ea86d900b6c93574a2e1f26/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=00dcc88a0ed7bd148ea86d900b6c93574a2e1f26", "patch": "@@ -3354,7 +3354,8 @@ vect_analyze_slp_instance (vec_info *vinfo,\n   else if (kind == slp_inst_kind_reduc_group)\n     {\n       /* Collect reduction statements.  */\n-      vec<stmt_vec_info> reductions = as_a <loop_vec_info> (vinfo)->reductions;\n+      const vec<stmt_vec_info> &reductions\n+\t= as_a <loop_vec_info> (vinfo)->reductions;\n       scalar_stmts.create (reductions.length ());\n       for (i = 0; reductions.iterate (i, &next_info); i++)\n \tif (STMT_VINFO_RELEVANT_P (next_info)\n@@ -4172,7 +4173,8 @@ vect_make_slp_decision (loop_vec_info loop_vinfo)\n {\n   unsigned int i;\n   poly_uint64 unrolling_factor = 1;\n-  vec<slp_instance> slp_instances = LOOP_VINFO_SLP_INSTANCES (loop_vinfo);\n+  const vec<slp_instance> &slp_instances\n+    = LOOP_VINFO_SLP_INSTANCES (loop_vinfo);\n   slp_instance instance;\n   int decided_to_slp = 0;\n \n@@ -5939,7 +5941,7 @@ vect_slp_region (vec<basic_block> bbs, vec<data_reference_p> datarefs,\n    true if anything in the basic-block was vectorized.  */\n \n static bool\n-vect_slp_bbs (vec<basic_block> bbs)\n+vect_slp_bbs (const vec<basic_block> &bbs)\n {\n   vec<data_reference_p> datarefs = vNULL;\n   auto_vec<int> dataref_groups;\n@@ -6084,7 +6086,7 @@ vect_slp_function (function *fun)\n \n void\n duplicate_and_interleave (vec_info *vinfo, gimple_seq *seq, tree vector_type,\n-\t\t\t  vec<tree> elts, unsigned int nresults,\n+\t\t\t  const vec<tree> &elts, unsigned int nresults,\n \t\t\t  vec<tree> &results)\n {\n   unsigned int nelts = elts.length ();\n@@ -6440,7 +6442,7 @@ vect_get_slp_defs (vec_info *,\n \n bool\n vect_transform_slp_perm_load (vec_info *vinfo,\n-\t\t\t      slp_tree node, vec<tree> dr_chain,\n+\t\t\t      slp_tree node, const vec<tree> &dr_chain,\n \t\t\t      gimple_stmt_iterator *gsi, poly_uint64 vf,\n \t\t\t      bool analyze_only, unsigned *n_perms,\n \t\t\t      unsigned int *n_loads, bool dce_chain)\n@@ -7469,7 +7471,7 @@ vect_schedule_scc (vec_info *vinfo, slp_tree node, slp_instance instance,\n /* Generate vector code for SLP_INSTANCES in the loop/basic block.  */\n \n void\n-vect_schedule_slp (vec_info *vinfo, vec<slp_instance> slp_instances)\n+vect_schedule_slp (vec_info *vinfo, const vec<slp_instance> &slp_instances)\n {\n   slp_instance instance;\n   unsigned int i;"}, {"sha": "deb22477e28debf9daa59093d09fff856c25ca59", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00dcc88a0ed7bd148ea86d900b6c93574a2e1f26/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00dcc88a0ed7bd148ea86d900b6c93574a2e1f26/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=00dcc88a0ed7bd148ea86d900b6c93574a2e1f26", "patch": "@@ -2072,12 +2072,12 @@ extern tree cse_and_gimplify_to_preheader (loop_vec_info, tree);\n extern void vect_slp_init (void);\n extern void vect_slp_fini (void);\n extern void vect_free_slp_instance (slp_instance);\n-extern bool vect_transform_slp_perm_load (vec_info *, slp_tree, vec<tree>,\n+extern bool vect_transform_slp_perm_load (vec_info *, slp_tree, const vec<tree> &,\n \t\t\t\t\t  gimple_stmt_iterator *, poly_uint64,\n \t\t\t\t\t  bool, unsigned *,\n \t\t\t\t\t  unsigned * = nullptr, bool = false);\n extern bool vect_slp_analyze_operations (vec_info *);\n-extern void vect_schedule_slp (vec_info *, vec<slp_instance>);\n+extern void vect_schedule_slp (vec_info *, const vec<slp_instance> &);\n extern opt_result vect_analyze_slp (vec_info *, unsigned);\n extern bool vect_make_slp_decision (loop_vec_info);\n extern void vect_detect_hybrid_slp (loop_vec_info);\n@@ -2095,7 +2095,7 @@ extern bool can_duplicate_and_interleave_p (vec_info *, unsigned int, tree,\n \t\t\t\t\t    unsigned int * = NULL,\n \t\t\t\t\t    tree * = NULL, tree * = NULL);\n extern void duplicate_and_interleave (vec_info *, gimple_seq *, tree,\n-\t\t\t\t      vec<tree>, unsigned int, vec<tree> &);\n+\t\t\t\t      const vec<tree> &, unsigned int, vec<tree> &);\n extern int vect_get_place_in_interleaving_chain (stmt_vec_info, stmt_vec_info);\n extern bool vect_update_shared_vectype (stmt_vec_info, tree);\n extern slp_tree vect_create_new_slp_node (unsigned, tree_code);"}, {"sha": "bead1ac134ce5df28bd46b6b9628f4afc99e3bf1", "filename": "gcc/tree.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00dcc88a0ed7bd148ea86d900b6c93574a2e1f26/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00dcc88a0ed7bd148ea86d900b6c93574a2e1f26/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=00dcc88a0ed7bd148ea86d900b6c93574a2e1f26", "patch": "@@ -2047,7 +2047,7 @@ make_vector (unsigned log2_npatterns,\n    are extracted from V, a vector of CONSTRUCTOR_ELT.  */\n \n tree\n-build_vector_from_ctor (tree type, vec<constructor_elt, va_gc> *v)\n+build_vector_from_ctor (tree type, const vec<constructor_elt, va_gc> *v)\n {\n   if (vec_safe_length (v) == 0)\n     return build_zero_cst (type);\n@@ -14428,7 +14428,7 @@ test_labels ()\n    are given by VALS.  */\n \n static tree\n-build_vector (tree type, vec<tree> vals MEM_STAT_DECL)\n+build_vector (tree type, const vec<tree> &vals MEM_STAT_DECL)\n {\n   gcc_assert (known_eq (vals.length (), TYPE_VECTOR_SUBPARTS (type)));\n   tree_vector_builder builder (type, vals.length (), 1);\n@@ -14439,7 +14439,7 @@ build_vector (tree type, vec<tree> vals MEM_STAT_DECL)\n /* Check that VECTOR_CST ACTUAL contains the elements in EXPECTED.  */\n \n static void\n-check_vector_cst (vec<tree> expected, tree actual)\n+check_vector_cst (const vec<tree> &expected, tree actual)\n {\n   ASSERT_KNOWN_EQ (expected.length (),\n \t\t   TYPE_VECTOR_SUBPARTS (TREE_TYPE (actual)));\n@@ -14452,7 +14452,7 @@ check_vector_cst (vec<tree> expected, tree actual)\n    and that its elements match EXPECTED.  */\n \n static void\n-check_vector_cst_duplicate (vec<tree> expected, tree actual,\n+check_vector_cst_duplicate (const vec<tree> &expected, tree actual,\n \t\t\t    unsigned int npatterns)\n {\n   ASSERT_EQ (npatterns, VECTOR_CST_NPATTERNS (actual));\n@@ -14468,7 +14468,7 @@ check_vector_cst_duplicate (vec<tree> expected, tree actual,\n    EXPECTED.  */\n \n static void\n-check_vector_cst_fill (vec<tree> expected, tree actual,\n+check_vector_cst_fill (const vec<tree> &expected, tree actual,\n \t\t       unsigned int npatterns)\n {\n   ASSERT_EQ (npatterns, VECTOR_CST_NPATTERNS (actual));\n@@ -14483,7 +14483,7 @@ check_vector_cst_fill (vec<tree> expected, tree actual,\n    and that its elements match EXPECTED.  */\n \n static void\n-check_vector_cst_stepped (vec<tree> expected, tree actual,\n+check_vector_cst_stepped (const vec<tree> &expected, tree actual,\n \t\t\t  unsigned int npatterns)\n {\n   ASSERT_EQ (npatterns, VECTOR_CST_NPATTERNS (actual));"}, {"sha": "13c088cee054a641bdc182b1537d8fdb2b38857b", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00dcc88a0ed7bd148ea86d900b6c93574a2e1f26/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00dcc88a0ed7bd148ea86d900b6c93574a2e1f26/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=00dcc88a0ed7bd148ea86d900b6c93574a2e1f26", "patch": "@@ -4475,7 +4475,7 @@ extern tree build_int_cst (tree, poly_int64);\n extern tree build_int_cstu (tree type, poly_uint64);\n extern tree build_int_cst_type (tree, poly_int64);\n extern tree make_vector (unsigned, unsigned CXX_MEM_STAT_INFO);\n-extern tree build_vector_from_ctor (tree, vec<constructor_elt, va_gc> *);\n+extern tree build_vector_from_ctor (tree, const vec<constructor_elt, va_gc> *);\n extern tree build_vector_from_val (tree, tree);\n extern tree build_uniform_cst (tree, tree);\n extern tree build_vec_series (tree, tree, tree);"}]}