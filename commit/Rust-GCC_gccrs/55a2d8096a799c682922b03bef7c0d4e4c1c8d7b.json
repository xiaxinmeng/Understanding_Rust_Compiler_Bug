{"sha": "55a2d8096a799c682922b03bef7c0d4e4c1c8d7b", "node_id": "C_kwDOANBUbNoAKDU1YTJkODA5NmE3OTljNjgyOTIyYjAzYmVmN2MwZDRlNGMxYzhkN2I", "commit": {"author": {"name": "Srinath Parvathaneni", "email": "srinath.parvathaneni@arm.com", "date": "2023-01-23T11:13:18Z"}, "committer": {"name": "Srinath Parvathaneni", "email": "srinath.parvathaneni@arm.com", "date": "2023-01-23T11:16:26Z"}, "message": "arm: Add support for new frame unwinding instruction \"0xb5\".\n\nThis patch adds support for Arm frame unwinding instruction \"0xb5\" [1]. When\nan exception is taken and \"0xb5\" instruction is encounter during runtime\nstack-unwinding, we use effective vsp as modifier in pointer authentication.\nOn completion of stack unwinding if \"0xb5\" instruction is not encountered\nthen CFA will be used as modifier in pointer authentication.\n\n[1] https://github.com/ARM-software/abi-aa/releases/download/2022Q3/ehabi32.pdf\n\nlibgcc/ChangeLog:\n\n2022-11-09  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n\n\t* config/arm/pr-support.c (__gnu_unwind_execute): Decode opcode\n\t\"0xb5\".", "tree": {"sha": "b24a2615e7f89c7ca433fa2b63d295b5e1e962be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b24a2615e7f89c7ca433fa2b63d295b5e1e962be"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/55a2d8096a799c682922b03bef7c0d4e4c1c8d7b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55a2d8096a799c682922b03bef7c0d4e4c1c8d7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55a2d8096a799c682922b03bef7c0d4e4c1c8d7b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55a2d8096a799c682922b03bef7c0d4e4c1c8d7b/comments", "author": {"login": "sripar01", "id": 115715849, "node_id": "U_kgDOBuWvCQ", "avatar_url": "https://avatars.githubusercontent.com/u/115715849?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sripar01", "html_url": "https://github.com/sripar01", "followers_url": "https://api.github.com/users/sripar01/followers", "following_url": "https://api.github.com/users/sripar01/following{/other_user}", "gists_url": "https://api.github.com/users/sripar01/gists{/gist_id}", "starred_url": "https://api.github.com/users/sripar01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sripar01/subscriptions", "organizations_url": "https://api.github.com/users/sripar01/orgs", "repos_url": "https://api.github.com/users/sripar01/repos", "events_url": "https://api.github.com/users/sripar01/events{/privacy}", "received_events_url": "https://api.github.com/users/sripar01/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sripar01", "id": 115715849, "node_id": "U_kgDOBuWvCQ", "avatar_url": "https://avatars.githubusercontent.com/u/115715849?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sripar01", "html_url": "https://github.com/sripar01", "followers_url": "https://api.github.com/users/sripar01/followers", "following_url": "https://api.github.com/users/sripar01/following{/other_user}", "gists_url": "https://api.github.com/users/sripar01/gists{/gist_id}", "starred_url": "https://api.github.com/users/sripar01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sripar01/subscriptions", "organizations_url": "https://api.github.com/users/sripar01/orgs", "repos_url": "https://api.github.com/users/sripar01/repos", "events_url": "https://api.github.com/users/sripar01/events{/privacy}", "received_events_url": "https://api.github.com/users/sripar01/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "273874e925a544d96b8a9999d4c870c1f5191eeb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/273874e925a544d96b8a9999d4c870c1f5191eeb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/273874e925a544d96b8a9999d4c870c1f5191eeb"}], "stats": {"total": 15, "additions": 13, "deletions": 2}, "files": [{"sha": "9c9d4eed85f33722374ead68a10db15dbcab854b", "filename": "libgcc/config/arm/pr-support.c", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55a2d8096a799c682922b03bef7c0d4e4c1c8d7b/libgcc%2Fconfig%2Farm%2Fpr-support.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55a2d8096a799c682922b03bef7c0d4e4c1c8d7b/libgcc%2Fconfig%2Farm%2Fpr-support.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farm%2Fpr-support.c?ref=55a2d8096a799c682922b03bef7c0d4e4c1c8d7b", "patch": "@@ -107,7 +107,9 @@ __gnu_unwind_execute (_Unwind_Context * context, __gnu_unwind_state * uws)\n   _uw op;\n   int set_pc;\n   int set_pac = 0;\n+  int set_pac_sp = 0;\n   _uw reg;\n+  _uw sp;\n \n   set_pc = 0;\n   for (;;)\n@@ -124,10 +126,11 @@ __gnu_unwind_execute (_Unwind_Context * context, __gnu_unwind_state * uws)\n #if defined(TARGET_HAVE_PACBTI)\n \t  if (set_pac)\n \t    {\n-\t      _uw sp;\n \t      _uw lr;\n \t      _uw pac;\n-\t      _Unwind_VRS_Get (context, _UVRSC_CORE, R_SP, _UVRSD_UINT32, &sp);\n+\t      if (!set_pac_sp)\n+\t\t_Unwind_VRS_Get (context, _UVRSC_CORE, R_SP, _UVRSD_UINT32,\n+\t\t\t\t &sp);\n \t      _Unwind_VRS_Get (context, _UVRSC_CORE, R_LR, _UVRSD_UINT32, &lr);\n \t      _Unwind_VRS_Get (context, _UVRSC_PAC, R_IP,\n \t\t\t       _UVRSD_UINT32, &pac);\n@@ -259,6 +262,14 @@ __gnu_unwind_execute (_Unwind_Context * context, __gnu_unwind_state * uws)\n \t      continue;\n \t    }\n \n+\t  /* Use current VSP as modifier in PAC validation.  */\n+\t  if (op == 0xb5)\n+\t    {\n+\t      _Unwind_VRS_Get (context, _UVRSC_CORE, R_SP, _UVRSD_UINT32, &sp);\n+\t      set_pac_sp = 1;\n+\t      continue;\n+\t    }\n+\n \t  if ((op & 0xfc) == 0xb4)  /* Obsolete FPA.  */\n \t    return _URC_FAILURE;\n "}]}