{"sha": "cddfb1c7ac9cb2f69cc82839a0163af3e771a68d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2RkZmIxYzdhYzljYjJmNjljYzgyODM5YTAxNjNhZjNlNzcxYTY4ZA==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2005-11-22T06:54:08Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2005-11-22T06:54:08Z"}, "message": "re PR libstdc++/23591 (exceptions in plugins in threads cause segmentation violation by leaving bad exit handler for the pthread)\n\n2005-11-21  Benjamin Kosnik  <bkoz@redhat.com>\n            Ulrich Drepper  <drepper@redhat.com>\n\n\tPR libstdc++/23591\n\t* scripts/create_testsuite_files: Support for \"C\" test files.\n\t* testsuite/lib/libstdc++.exp: Same.\n\t* testsuite/libstdc++-dg/normal.exp: Same.\n\t* testsuite/ext/mt_allocator/22309_thread.cc: Update names.\n\t* testsuite/19_diagnostics/23591_thread-1.c: New.\n\t* testsuite/testsuite_shared.cc: Add tests, rename existing functions.\n\t* libsupc++/eh_globals.cc: Make global thread local if possible.\n\t* configure.ac: Use GCC_CHECK_TLS.\n\t* acinclude.m4: Include tls.m4.\n\t* configure: Regenerate.\n\t* config.h.in: Same.\n\n\nCo-Authored-By: Ulrich Drepper <drepper@redhat.com>\n\nFrom-SVN: r107350", "tree": {"sha": "3b23806d48c5499ec0ea11b68e5bc9006c2387e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3b23806d48c5499ec0ea11b68e5bc9006c2387e6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cddfb1c7ac9cb2f69cc82839a0163af3e771a68d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cddfb1c7ac9cb2f69cc82839a0163af3e771a68d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cddfb1c7ac9cb2f69cc82839a0163af3e771a68d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cddfb1c7ac9cb2f69cc82839a0163af3e771a68d/comments", "author": null, "committer": null, "parents": [{"sha": "ebb109add82e17c08e24de72bf1735ebbbc5081c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebb109add82e17c08e24de72bf1735ebbbc5081c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ebb109add82e17c08e24de72bf1735ebbbc5081c"}], "stats": {"total": 494, "additions": 403, "deletions": 91}, "files": [{"sha": "96652d2b153d17acaa1f60a3098d1906730fafd7", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cddfb1c7ac9cb2f69cc82839a0163af3e771a68d/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cddfb1c7ac9cb2f69cc82839a0163af3e771a68d/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=cddfb1c7ac9cb2f69cc82839a0163af3e771a68d", "patch": "@@ -1,3 +1,19 @@\n+2005-11-21  Benjamin Kosnik  <bkoz@redhat.com>\n+            Ulrich Drepper  <drepper@redhat.com>\n+\n+\tPR libstdc++/23591\n+\t* scripts/create_testsuite_files: Support for \"C\" test files.\n+\t* testsuite/lib/libstdc++.exp: Same.\n+\t* testsuite/libstdc++-dg/normal.exp: Same.\n+\t* testsuite/ext/mt_allocator/22309_thread.cc: Update names.\n+\t* testsuite/19_diagnostics/23591_thread-1.c: New.\n+\t* testsuite/testsuite_shared.cc: Add tests, rename existing functions.\n+\t* libsupc++/eh_globals.cc: Make global thread local if possible.\n+\t* configure.ac: Use GCC_CHECK_TLS.\n+\t* acinclude.m4: Include tls.m4.\n+\t* configure: Regenerate.\n+\t* config.h.in: Same.\n+\t\n 2005-11-21  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* libsupc++/del_op.cc: Include c++config.h first."}, {"sha": "5d5e744d1888d91ffb3039065fd01906740c3af9", "filename": "libstdc++-v3/Makefile.in", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cddfb1c7ac9cb2f69cc82839a0163af3e771a68d/libstdc%2B%2B-v3%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cddfb1c7ac9cb2f69cc82839a0163af3e771a68d/libstdc%2B%2B-v3%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FMakefile.in?ref=cddfb1c7ac9cb2f69cc82839a0163af3e771a68d", "patch": "@@ -45,11 +45,12 @@ DIST_COMMON = README $(am__configure_deps) $(srcdir)/../config.guess \\\n \t$(top_srcdir)/scripts/testsuite_flags.in ChangeLog\n subdir = .\n ACLOCAL_M4 = $(top_srcdir)/aclocal.m4\n-am__aclocal_m4_deps = $(top_srcdir)/../config/lead-dot.m4 \\\n+am__aclocal_m4_deps = $(top_srcdir)/../config/enable.m4 \\\n+\t$(top_srcdir)/../config/lead-dot.m4 \\\n \t$(top_srcdir)/../config/no-executables.m4 \\\n \t$(top_srcdir)/../libtool.m4 $(top_srcdir)/crossconfig.m4 \\\n \t$(top_srcdir)/linkage.m4 $(top_srcdir)/acinclude.m4 \\\n-\t$(top_srcdir)/configure.ac\n+\t$(top_srcdir)/../config/tls.m4 $(top_srcdir)/configure.ac\n am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\\n \t$(ACLOCAL_M4)\n am__CONFIG_DISTCLEAN_FILES = config.status config.cache config.log \\"}, {"sha": "12d0eb6daf7aad2c80034b5d81bf79a0a97a2368", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cddfb1c7ac9cb2f69cc82839a0163af3e771a68d/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cddfb1c7ac9cb2f69cc82839a0163af3e771a68d/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=cddfb1c7ac9cb2f69cc82839a0163af3e771a68d", "patch": "@@ -1648,8 +1648,8 @@ EOF\n     rm -f conftest*\n   fi\n \n-  # This is a tad weird, for hysterical raisins.  We have to map enable/disable \n-  # to two different models.\n+  # This is a tad weird, for hysterical raisins.  We have to map\n+  # enable/disable to two different models.\n   case $enable_sjlj_exceptions in\n     yes)\n       AC_DEFINE(_GLIBCXX_SJLJ_EXCEPTIONS, 1,\n@@ -1878,5 +1878,6 @@ AC_DEFUN([AC_LC_MESSAGES], [\n   ])\n ])\n \n+# Macros from the top-level gcc directory.\n+m4_include([../config/tls.m4])\n \n-dnl vim:et:ts=2:sw=2"}, {"sha": "8f4ca5225c68a3ce64fdbd22e795cf46864bb570", "filename": "libstdc++-v3/aclocal.m4", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cddfb1c7ac9cb2f69cc82839a0163af3e771a68d/libstdc%2B%2B-v3%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cddfb1c7ac9cb2f69cc82839a0163af3e771a68d/libstdc%2B%2B-v3%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Faclocal.m4?ref=cddfb1c7ac9cb2f69cc82839a0163af3e771a68d", "patch": "@@ -638,6 +638,7 @@ AC_SUBST([am__tar])\n AC_SUBST([am__untar])\n ]) # _AM_PROG_TAR\n \n+m4_include([../config/enable.m4])\n m4_include([../config/lead-dot.m4])\n m4_include([../config/no-executables.m4])\n m4_include([../libtool.m4])"}, {"sha": "2aa1341ec7e6a3f692f50f8cc601cafddd7a7777", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cddfb1c7ac9cb2f69cc82839a0163af3e771a68d/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cddfb1c7ac9cb2f69cc82839a0163af3e771a68d/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=cddfb1c7ac9cb2f69cc82839a0163af3e771a68d", "patch": "@@ -355,6 +355,9 @@\n /* Define to 1 if you have the `tanl' function. */\n #undef HAVE_TANL\n \n+/* Define to 1 if the target supports thread-local storage. */\n+#undef HAVE_TLS\n+\n /* Define to 1 if you have the <unistd.h> header file. */\n #undef HAVE_UNISTD_H\n "}, {"sha": "7c2ed9875c5d5236b452d9abf65967d3c9f34381", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 135, "deletions": 4, "changes": 139, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cddfb1c7ac9cb2f69cc82839a0163af3e771a68d/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cddfb1c7ac9cb2f69cc82839a0163af3e771a68d/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=cddfb1c7ac9cb2f69cc82839a0163af3e771a68d", "patch": "@@ -887,6 +887,8 @@ Optional Features:\n   --enable-fully-dynamic-string\n                           do not put empty strings in per-process static\n                           memory [default=no]\n+  _g_switchUse thread-local storage\n+                          [default=yes]\n   --enable-symvers=STYLE  enables symbol versioning of the shared library\n                           [default=yes]\n   --enable-version-specific-runtime-libs\n@@ -4456,7 +4458,7 @@ test x\"$pic_mode\" = xno && libtool_flags=\"$libtool_flags --prefer-non-pic\"\n case $host in\n *-*-irix6*)\n   # Find out which ABI we are using.\n-  echo '#line 4459 \"configure\"' > conftest.$ac_ext\n+  echo '#line 4461 \"configure\"' > conftest.$ac_ext\n   if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n   (eval $ac_compile) 2>&5\n   ac_status=$?\n@@ -5076,7 +5078,7 @@ fi;\n     #\n     # Fake what AC_TRY_COMPILE does.  XXX Look at redoing this new-style.\n     cat > conftest.$ac_ext << EOF\n-#line 5079 \"configure\"\n+#line 5081 \"configure\"\n struct S { ~S(); };\n void bar();\n void foo()\n@@ -5104,8 +5106,8 @@ EOF\n     rm -f conftest*\n   fi\n \n-  # This is a tad weird, for hysterical raisins.  We have to map enable/disable\n-  # to two different models.\n+  # This is a tad weird, for hysterical raisins.  We have to map\n+  # enable/disable to two different models.\n   case $enable_sjlj_exceptions in\n     yes)\n \n@@ -29929,6 +29931,135 @@ ac_compiler_gnu=$ac_cv_c_compiler_gnu\n \n \n \n+  # For TLS support.\n+\n+   # Check whether --enable-tls or --disable-tls was given.\n+if test \"${enable_tls+set}\" = set; then\n+  enableval=\"$enable_tls\"\n+\n+      case \"$enableval\" in\n+       yes|no) ;;\n+       *) { { echo \"$as_me:$LINENO: error: Argument to enable/disable tls must be yes or no\" >&5\n+echo \"$as_me: error: Argument to enable/disable tls must be yes or no\" >&2;}\n+   { (exit 1); exit 1; }; } ;;\n+      esac\n+\n+else\n+  enable_tls=yes\n+fi;\n+\n+  echo \"$as_me:$LINENO: checking whether the target supports thread-local storage\" >&5\n+echo $ECHO_N \"checking whether the target supports thread-local storage... $ECHO_C\" >&6\n+if test \"${have_tls+set}\" = set; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+\n+    if test \"$cross_compiling\" = yes; then\n+  cat >conftest.$ac_ext <<_ACEOF\n+__thread int foo;\n+_ACEOF\n+rm -f conftest.$ac_objext\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n+  (eval $ac_compile) 2>conftest.er1\n+  ac_status=$?\n+  grep -v '^ *+' conftest.er1 >conftest.err\n+  rm -f conftest.er1\n+  cat conftest.err >&5\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } &&\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; } &&\n+\t { ac_try='test -s conftest.$ac_objext'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }; then\n+  have_tls=yes\n+else\n+  echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+have_tls=no\n+fi\n+rm -f conftest.err conftest.$ac_objext conftest.$ac_ext\n+\n+else\n+  cat >conftest.$ac_ext <<_ACEOF\n+__thread int a; int b; int main() { return a = b; }\n+_ACEOF\n+rm -f conftest$ac_exeext\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_link\\\"\") >&5\n+  (eval $ac_link) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } && { ac_try='./conftest$ac_exeext'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }; then\n+                    save_LDFLAGS=\"$LDFLAGS\"\n+      LDFLAGS=\"-static $LDFLAGS\"\n+      if test \"$cross_compiling\" = yes; then\n+  { { echo \"$as_me:$LINENO: error: cannot run test program while cross compiling\n+See \\`config.log' for more details.\" >&5\n+echo \"$as_me: error: cannot run test program while cross compiling\n+See \\`config.log' for more details.\" >&2;}\n+   { (exit 1); exit 1; }; }\n+else\n+  cat >conftest.$ac_ext <<_ACEOF\n+__thread int a; int b; int main() { return a = b; }\n+_ACEOF\n+rm -f conftest$ac_exeext\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_link\\\"\") >&5\n+  (eval $ac_link) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } && { ac_try='./conftest$ac_exeext'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }; then\n+  have_tls=yes\n+else\n+  echo \"$as_me: program exited with status $ac_status\" >&5\n+echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+( exit $ac_status )\n+have_tls=no\n+fi\n+rm -f core *.core gmon.out bb.out conftest$ac_exeext conftest.$ac_objext conftest.$ac_ext\n+fi\n+      LDFLAGS=\"$save_LDFLAGS\"\n+else\n+  echo \"$as_me: program exited with status $ac_status\" >&5\n+echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+( exit $ac_status )\n+have_tls=no\n+fi\n+rm -f core *.core gmon.out bb.out conftest$ac_exeext conftest.$ac_objext conftest.$ac_ext\n+fi\n+fi\n+echo \"$as_me:$LINENO: result: $have_tls\" >&5\n+echo \"${ECHO_T}$have_tls\" >&6\n+  if test \"$enable_tls $have_tls\" = \"yes yes\"; then\n+\n+cat >>confdefs.h <<\\_ACEOF\n+#define HAVE_TLS 1\n+_ACEOF\n+\n+  fi\n+\n \n   if test \"${ac_cv_header_locale_h+set}\" = set; then\n   echo \"$as_me:$LINENO: checking for locale.h\" >&5"}, {"sha": "9db10226dcabda4d1e00abcb1998518fa5f46c30", "filename": "libstdc++-v3/configure.ac", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cddfb1c7ac9cb2f69cc82839a0163af3e771a68d/libstdc%2B%2B-v3%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cddfb1c7ac9cb2f69cc82839a0163af3e771a68d/libstdc%2B%2B-v3%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.ac?ref=cddfb1c7ac9cb2f69cc82839a0163af3e771a68d", "patch": "@@ -157,6 +157,9 @@ if $GLIBCXX_IS_NATIVE; then\n   # For LFS support.\n   GLIBCXX_CHECK_LFS\n \n+  # For TLS support.\n+  GCC_CHECK_TLS\n+\n   AC_LC_MESSAGES\n \n   AC_TRY_COMPILE("}, {"sha": "a0c358c6cad59b665c55ca0d439d6b2b73292500", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cddfb1c7ac9cb2f69cc82839a0163af3e771a68d/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cddfb1c7ac9cb2f69cc82839a0163af3e771a68d/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=cddfb1c7ac9cb2f69cc82839a0163af3e771a68d", "patch": "@@ -40,11 +40,12 @@ DIST_COMMON = $(srcdir)/Makefile.am $(srcdir)/Makefile.in \\\n \t$(top_srcdir)/fragment.am\n subdir = include\n ACLOCAL_M4 = $(top_srcdir)/aclocal.m4\n-am__aclocal_m4_deps = $(top_srcdir)/../config/lead-dot.m4 \\\n+am__aclocal_m4_deps = $(top_srcdir)/../config/enable.m4 \\\n+\t$(top_srcdir)/../config/lead-dot.m4 \\\n \t$(top_srcdir)/../config/no-executables.m4 \\\n \t$(top_srcdir)/../libtool.m4 $(top_srcdir)/crossconfig.m4 \\\n \t$(top_srcdir)/linkage.m4 $(top_srcdir)/acinclude.m4 \\\n-\t$(top_srcdir)/configure.ac\n+\t$(top_srcdir)/../config/tls.m4 $(top_srcdir)/configure.ac\n am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\\n \t$(ACLOCAL_M4)\n CONFIG_HEADER = $(top_builddir)/config.h"}, {"sha": "73cd3ca127e7546917c48d064dbe6407f3868b3a", "filename": "libstdc++-v3/libmath/Makefile.in", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cddfb1c7ac9cb2f69cc82839a0163af3e771a68d/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cddfb1c7ac9cb2f69cc82839a0163af3e771a68d/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in?ref=cddfb1c7ac9cb2f69cc82839a0163af3e771a68d", "patch": "@@ -40,11 +40,12 @@ target_triplet = @target@\n subdir = libmath\n DIST_COMMON = $(srcdir)/Makefile.am $(srcdir)/Makefile.in\n ACLOCAL_M4 = $(top_srcdir)/aclocal.m4\n-am__aclocal_m4_deps = $(top_srcdir)/../config/lead-dot.m4 \\\n+am__aclocal_m4_deps = $(top_srcdir)/../config/enable.m4 \\\n+\t$(top_srcdir)/../config/lead-dot.m4 \\\n \t$(top_srcdir)/../config/no-executables.m4 \\\n \t$(top_srcdir)/../libtool.m4 $(top_srcdir)/crossconfig.m4 \\\n \t$(top_srcdir)/linkage.m4 $(top_srcdir)/acinclude.m4 \\\n-\t$(top_srcdir)/configure.ac\n+\t$(top_srcdir)/../config/tls.m4 $(top_srcdir)/configure.ac\n am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\\n \t$(ACLOCAL_M4)\n CONFIG_HEADER = $(top_builddir)/config.h"}, {"sha": "1d5ee5695b4b1839277ddab8751b2da21a5846c6", "filename": "libstdc++-v3/libsupc++/Makefile.in", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cddfb1c7ac9cb2f69cc82839a0163af3e771a68d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cddfb1c7ac9cb2f69cc82839a0163af3e771a68d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in?ref=cddfb1c7ac9cb2f69cc82839a0163af3e771a68d", "patch": "@@ -42,11 +42,12 @@ DIST_COMMON = $(glibcxxinstall_HEADERS) $(srcdir)/Makefile.am \\\n \t$(srcdir)/Makefile.in $(top_srcdir)/fragment.am\n subdir = libsupc++\n ACLOCAL_M4 = $(top_srcdir)/aclocal.m4\n-am__aclocal_m4_deps = $(top_srcdir)/../config/lead-dot.m4 \\\n+am__aclocal_m4_deps = $(top_srcdir)/../config/enable.m4 \\\n+\t$(top_srcdir)/../config/lead-dot.m4 \\\n \t$(top_srcdir)/../config/no-executables.m4 \\\n \t$(top_srcdir)/../libtool.m4 $(top_srcdir)/crossconfig.m4 \\\n \t$(top_srcdir)/linkage.m4 $(top_srcdir)/acinclude.m4 \\\n-\t$(top_srcdir)/configure.ac\n+\t$(top_srcdir)/../config/tls.m4 $(top_srcdir)/configure.ac\n am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\\n \t$(ACLOCAL_M4)\n CONFIG_HEADER = $(top_builddir)/config.h"}, {"sha": "9b7e916716d52252008d1c8a08e45d6e4aab8763", "filename": "libstdc++-v3/libsupc++/eh_globals.cc", "status": "modified", "additions": 88, "deletions": 62, "changes": 150, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cddfb1c7ac9cb2f69cc82839a0163af3e771a68d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_globals.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cddfb1c7ac9cb2f69cc82839a0163af3e771a68d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_globals.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_globals.cc?ref=cddfb1c7ac9cb2f69cc82839a0163af3e771a68d", "patch": "@@ -1,5 +1,5 @@\n // -*- C++ -*- Manage the thread-local exception globals.\n-// Copyright (C) 2001, 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of GCC.\n //\n@@ -27,101 +27,127 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-\n+#include <bits/c++config.h>\n #include <exception>\n #include <cstdlib>\n+#include \"cxxabi.h\"\n #include \"unwind-cxx.h\"\n-#include \"bits/c++config.h\"\n #include \"bits/gthr.h\"\n \n using namespace __cxxabiv1;\n \n+#if _GLIBCXX_HAVE_TLS\n+\n+namespace __gnu_internal\n+{\n+  using namespace abi;\n+  using namespace std;\n+\n+  __cxa_eh_globals*\n+  get_global() throw()\n+  {\n+    static __thread __cxa_eh_globals global;\n+    return &global;\n+  }\n+}\n+\n+extern \"C\" __cxa_eh_globals*\n+__cxxabiv1::__cxa_get_globals_fast() throw()\n+{ return __gnu_internal::get_global(); }\n+\n+extern \"C\" __cxa_eh_globals*\n+__cxxabiv1::__cxa_get_globals() throw()\n+{ return __gnu_internal::get_global(); }\n+\n+\n+#else\n \n // Single-threaded fallback buffer.\n-static __cxa_eh_globals globals_static;\n+static __cxa_eh_globals eh_globals;\n \n #if __GTHREADS\n-static __gthread_key_t globals_key;\n-static int use_thread_key = -1;\n \n static void\n-get_globals_dtor (void *ptr)\n+eh_globals_dtor(void* ptr)\n {\n   if (ptr)\n     {\n-      __cxa_exception *exn, *next;\n-      exn = ((__cxa_eh_globals *) ptr)->caughtExceptions;\n+      __cxa_eh_globals* g = reinterpret_cast<__cxa_eh_globals*>(ptr);\n+      __cxa_exception* exn = g->caughtExceptions;\n+      __cxa_exception* next;\n       while (exn)\n \t{\n \t  next = exn->nextException;\n-\t  _Unwind_DeleteException (&exn->unwindHeader);\n+\t  _Unwind_DeleteException(&exn->unwindHeader);\n \t  exn = next;\n \t}\n-      std::free (ptr);\n+      std::free(ptr);\n     }\n }\n \n-static void\n-get_globals_init ()\n+struct __eh_globals_init\n {\n-  use_thread_key =\n-    (__gthread_key_create (&globals_key, get_globals_dtor) == 0);\n-}\n-\n-static void\n-get_globals_init_once ()\n+  __gthread_key_t  \t_M_key;\n+  bool \t\t\t_M_init;\n+\n+  __eh_globals_init() : _M_init(false)\n+  { \n+    if (__gthread_active_p())\n+      _M_init = __gthread_key_create(&_M_key, eh_globals_dtor) == 0; \n+  }\n+\n+  ~__eh_globals_init()\n+  {\n+    if (_M_init)\n+      __gthread_key_delete(_M_key);\n+  }\n+};\n+\n+static __eh_globals_init init;\n+\n+extern \"C\" __cxa_eh_globals*\n+__cxxabiv1::__cxa_get_globals_fast() throw()\n {\n-  static __gthread_once_t once = __GTHREAD_ONCE_INIT;\n-  if (__gthread_once (&once, get_globals_init) != 0\n-      || use_thread_key < 0)\n-    use_thread_key = 0;\n+  __cxa_eh_globals* g;\n+  if (init._M_init)\n+    g = static_cast<__cxa_eh_globals*>(__gthread_getspecific(init._M_key));\n+  else\n+    g = &eh_globals;\n+  return g;\n }\n-#endif\n \n-extern \"C\" __cxa_eh_globals *\n-__cxxabiv1::__cxa_get_globals_fast () throw()\n+extern \"C\" __cxa_eh_globals*\n+__cxxabiv1::__cxa_get_globals() throw()\n {\n-#if __GTHREADS\n-  if (use_thread_key)\n-    return (__cxa_eh_globals *) __gthread_getspecific (globals_key);\n+  __cxa_eh_globals* g;\n+  if (init._M_init)\n+    {\n+      g = static_cast<__cxa_eh_globals*>(__gthread_getspecific(init._M_key));\n+      if (!g)\n+\t{\n+\t  void* v = std::malloc(sizeof(__cxa_eh_globals));\n+\t  if (v == 0 || __gthread_setspecific(init._M_key, v) != 0)\n+\t    std::terminate();\n+\t  g = static_cast<__cxa_eh_globals*>(v);\n+\t  g->caughtExceptions = 0;\n+\t  g->uncaughtExceptions = 0;\n+\t}\n+    }\n   else\n-    return &globals_static;\n-#else\n-  return &globals_static;\n-#endif\n+    g = &eh_globals;\n+  return g;\n }\n \n-extern \"C\" __cxa_eh_globals *\n-__cxxabiv1::__cxa_get_globals () throw()\n-{\n-#if __GTHREADS\n-  __cxa_eh_globals *g;\n-\n-  if (use_thread_key == 0)\n-    return &globals_static;\n+#else\n \n-  if (use_thread_key < 0)\n-    {\n-      get_globals_init_once ();\n+extern \"C\" __cxa_eh_globals*\n+__cxxabiv1::__cxa_get_globals_fast() throw()\n+{ return &eh_globals; }\n \n-      // Make sure use_thread_key got initialized.\n-      if (use_thread_key == 0)\n-\treturn &globals_static;\n-    }\n+extern \"C\" __cxa_eh_globals*\n+__cxxabiv1::__cxa_get_globals() throw()\n+{ return &eh_globals; }\n \n-  g = (__cxa_eh_globals *) __gthread_getspecific (globals_key);\n-  if (! g)\n-    {\n-      if ((g = (__cxa_eh_globals *)\n-\t   std::malloc (sizeof (__cxa_eh_globals))) == 0\n-\t  || __gthread_setspecific (globals_key, (void *) g) != 0)\n-        std::terminate ();\n-      g->caughtExceptions = 0;\n-      g->uncaughtExceptions = 0;\n-    }\n+#endif\n \n-  return g;\n-#else\n-  return &globals_static;\n #endif\n-}"}, {"sha": "e814e23eb5c0501e5ed6d162e049c56d67837788", "filename": "libstdc++-v3/po/Makefile.in", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cddfb1c7ac9cb2f69cc82839a0163af3e771a68d/libstdc%2B%2B-v3%2Fpo%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cddfb1c7ac9cb2f69cc82839a0163af3e771a68d/libstdc%2B%2B-v3%2Fpo%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fpo%2FMakefile.in?ref=cddfb1c7ac9cb2f69cc82839a0163af3e771a68d", "patch": "@@ -40,11 +40,12 @@ DIST_COMMON = $(srcdir)/Makefile.am $(srcdir)/Makefile.in \\\n \t$(top_srcdir)/fragment.am\n subdir = po\n ACLOCAL_M4 = $(top_srcdir)/aclocal.m4\n-am__aclocal_m4_deps = $(top_srcdir)/../config/lead-dot.m4 \\\n+am__aclocal_m4_deps = $(top_srcdir)/../config/enable.m4 \\\n+\t$(top_srcdir)/../config/lead-dot.m4 \\\n \t$(top_srcdir)/../config/no-executables.m4 \\\n \t$(top_srcdir)/../libtool.m4 $(top_srcdir)/crossconfig.m4 \\\n \t$(top_srcdir)/linkage.m4 $(top_srcdir)/acinclude.m4 \\\n-\t$(top_srcdir)/configure.ac\n+\t$(top_srcdir)/../config/tls.m4 $(top_srcdir)/configure.ac\n am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\\n \t$(ACLOCAL_M4)\n CONFIG_HEADER = $(top_builddir)/config.h"}, {"sha": "d5305236140aed1f7347836d32d8531556cda422", "filename": "libstdc++-v3/scripts/create_testsuite_files", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cddfb1c7ac9cb2f69cc82839a0163af3e771a68d/libstdc%2B%2B-v3%2Fscripts%2Fcreate_testsuite_files", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cddfb1c7ac9cb2f69cc82839a0163af3e771a68d/libstdc%2B%2B-v3%2Fscripts%2Fcreate_testsuite_files", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fscripts%2Fcreate_testsuite_files?ref=cddfb1c7ac9cb2f69cc82839a0163af3e771a68d", "patch": "@@ -35,7 +35,9 @@ dlist=`echo [0-9][0-9]*`\n for d in [a-z]*; do\n   test -d $d && dlist=\"$dlist $d\"\n done\n-find $dlist \"(\" -type f -o -type l \")\" -name \"*.cc\" -print | sort > $tmp.1\n+find $dlist \"(\" -type f -o -type l \")\" -name \"*.cc\" -print > $tmp.01\n+find $dlist \"(\" -type f -o -type l \")\" -name \"*.c\" -print > $tmp.02\n+cat  $tmp.01 $tmp.02 | sort > $tmp.1\n if test ! -s \"$tmp.1\"; then\n   exit 1\n fi"}, {"sha": "f285e898e68872d7b2d96ca2734105718d5f63e2", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cddfb1c7ac9cb2f69cc82839a0163af3e771a68d/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cddfb1c7ac9cb2f69cc82839a0163af3e771a68d/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=cddfb1c7ac9cb2f69cc82839a0163af3e771a68d", "patch": "@@ -40,11 +40,12 @@ DIST_COMMON = $(srcdir)/Makefile.am $(srcdir)/Makefile.in \\\n \t$(top_srcdir)/fragment.am\n subdir = src\n ACLOCAL_M4 = $(top_srcdir)/aclocal.m4\n-am__aclocal_m4_deps = $(top_srcdir)/../config/lead-dot.m4 \\\n+am__aclocal_m4_deps = $(top_srcdir)/../config/enable.m4 \\\n+\t$(top_srcdir)/../config/lead-dot.m4 \\\n \t$(top_srcdir)/../config/no-executables.m4 \\\n \t$(top_srcdir)/../libtool.m4 $(top_srcdir)/crossconfig.m4 \\\n \t$(top_srcdir)/linkage.m4 $(top_srcdir)/acinclude.m4 \\\n-\t$(top_srcdir)/configure.ac\n+\t$(top_srcdir)/../config/tls.m4 $(top_srcdir)/configure.ac\n am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\\n \t$(ACLOCAL_M4)\n CONFIG_HEADER = $(top_builddir)/config.h"}, {"sha": "8c953eaed0e9f4207800234b17c7c2ff6e05238a", "filename": "libstdc++-v3/testsuite/19_diagnostics/23591_thread-1.c", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cddfb1c7ac9cb2f69cc82839a0163af3e771a68d/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2F23591_thread-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cddfb1c7ac9cb2f69cc82839a0163af3e771a68d/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2F23591_thread-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2F23591_thread-1.c?ref=cddfb1c7ac9cb2f69cc82839a0163af3e771a68d", "patch": "@@ -0,0 +1,63 @@\n+// { dg-require-sharedlib \"\" }\n+// { dg-options \"-g -O2 -pthread -ldl -x c\" { target *-*-linux* } }\n+\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <pthread.h>\n+#include <dlfcn.h>\n+#include <errno.h>\n+#include <stdio.h>\n+#include <string.h>\n+\n+// NB: This must be compiled and linked as a \"C\" executable.\n+static void* run(void* arg)\n+{\n+  typedef void (*function_type) (void);\n+  void* lib;\n+  void (*cb)();\n+\n+  lib = dlopen(\"./testsuite_shared.so\", RTLD_NOW);\n+  if (lib == NULL)\n+    {\n+      printf(\"dlopen failed: %s\\n\", strerror(errno));\n+      return NULL;\n+    }\n+  cb = (function_type) dlsym(lib, \"try_throw_exception\");\n+  if (cb == NULL)\n+    {\n+      printf(\"dlsym failed: %s\\n\", strerror(errno));\n+      return NULL;\n+    }\n+  cb();\n+  dlclose(lib);\n+  return NULL;\n+}\n+\n+// libstdc++/23591\n+int main(void)\n+{\n+  pthread_t pt;\n+\n+  if (pthread_create(&pt, NULL, &run, NULL) != 0)\n+    return 1;\n+  if (pthread_join(pt, NULL) != 0)\n+    return 1;\n+\n+  return 0;\n+}"}, {"sha": "0b25a5a868692461b03eaef69de7e557ecdc8694", "filename": "libstdc++-v3/testsuite/Makefile.in", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cddfb1c7ac9cb2f69cc82839a0163af3e771a68d/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cddfb1c7ac9cb2f69cc82839a0163af3e771a68d/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in?ref=cddfb1c7ac9cb2f69cc82839a0163af3e771a68d", "patch": "@@ -40,11 +40,12 @@ DIST_COMMON = $(srcdir)/Makefile.am $(srcdir)/Makefile.in \\\n \t$(top_srcdir)/fragment.am\n subdir = testsuite\n ACLOCAL_M4 = $(top_srcdir)/aclocal.m4\n-am__aclocal_m4_deps = $(top_srcdir)/../config/lead-dot.m4 \\\n+am__aclocal_m4_deps = $(top_srcdir)/../config/enable.m4 \\\n+\t$(top_srcdir)/../config/lead-dot.m4 \\\n \t$(top_srcdir)/../config/no-executables.m4 \\\n \t$(top_srcdir)/../libtool.m4 $(top_srcdir)/crossconfig.m4 \\\n \t$(top_srcdir)/linkage.m4 $(top_srcdir)/acinclude.m4 \\\n-\t$(top_srcdir)/configure.ac\n+\t$(top_srcdir)/../config/tls.m4 $(top_srcdir)/configure.ac\n am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\\n \t$(ACLOCAL_M4)\n CONFIG_HEADER = $(top_builddir)/config.h"}, {"sha": "1df94b7c666b91fdc0f1eb9cca3823db7bccdcae", "filename": "libstdc++-v3/testsuite/ext/mt_allocator/22309_thread.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cddfb1c7ac9cb2f69cc82839a0163af3e771a68d/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2F22309_thread.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cddfb1c7ac9cb2f69cc82839a0163af3e771a68d/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2F22309_thread.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2F22309_thread.cc?ref=cddfb1c7ac9cb2f69cc82839a0163af3e771a68d", "patch": "@@ -50,7 +50,7 @@ check_dlsym(void*& h)\n \n   typedef void (*function_type) (void);\n   function_type fn;\n-  fn = reinterpret_cast<function_type>(dlsym(h, \"foo\"));\n+  fn = reinterpret_cast<function_type>(dlsym(h, \"try_allocation\"));\n \n   try \n     {"}, {"sha": "ee5111dfaf979558eb2ce677d3c9cc2a032ecb1a", "filename": "libstdc++-v3/testsuite/lib/libstdc++.exp", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cddfb1c7ac9cb2f69cc82839a0163af3e771a68d/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cddfb1c7ac9cb2f69cc82839a0163af3e771a68d/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp?ref=cddfb1c7ac9cb2f69cc82839a0163af3e771a68d", "patch": "@@ -266,14 +266,32 @@ proc libstdc++-dg-test { prog do_what extra_tool_flags } {\n             # created or not.  If it was, dg.exp will try to run it.\n             remote_file build delete $output_file;\n         }\n-        default {\n+\tdefault {\n             perror \"$do_what: not a valid dg-do keyword\"\n             return \"\"\n         }\n     }\n+\n     set options \"\"\n     if { $extra_tool_flags != \"\" } {\n-        lappend options \"additional_flags=$extra_tool_flags\"\n+\tverbose -log \"extra_tool_flags are:\"\n+\tverbose -log $extra_tool_flags\n+\tif { [string first \"-x c\" $extra_tool_flags ] != -1 } {\n+\t    # Short-circut a bunch of complicated goo here for the\n+\t    # special case of compiling a test file as a \"C\" file, not\n+\t    # as C++: just use target_compile, instead of the usual\n+\t    # gimmicks.\n+\t    verbose -log \"compiling and executing as C, not C++\"\n+            set compile_type \"executable\"\n+            set output_file \"./[file rootname [file tail $prog]].exe\"\n+            remote_file build delete $output_file;\n+\t    lappend options \"additional_flags=$extra_tool_flags\"\n+\t    set comp_output [target_compile \"$prog\" \"$output_file\" \"$compile_type\" $options];\n+\t    set comp_output [ prune_g++_output $comp_output ];\n+\t    return [list $comp_output $output_file]\n+        } else {\n+\t    lappend options \"additional_flags=$extra_tool_flags\"\n+\t}\n     }\n \n     # There is a libstdc++_compile made for us by default (via the tool-\n@@ -608,8 +626,7 @@ proc check_v3_target_debug_mode { } {\n \tset et_debug_mode 0\n \n \t# Set up, compile, and execute a C++ test program that depends\n-\t# on correct ordering of static object destructors. This is\n-\t# indicative of the presence and use of __cxa_atexit.\n+\t# on debug mode working.\n \tset src debug_mode[pid].cc\n \tset exe debug_mode[pid].exe\n "}, {"sha": "21bc3c1b9150f41c854ca649b980abba6ae3af38", "filename": "libstdc++-v3/testsuite/libstdc++-dg/normal.exp", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cddfb1c7ac9cb2f69cc82839a0163af3e771a68d/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-dg%2Fnormal.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cddfb1c7ac9cb2f69cc82839a0163af3e771a68d/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-dg%2Fnormal.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-dg%2Fnormal.exp?ref=cddfb1c7ac9cb2f69cc82839a0163af3e771a68d", "patch": "@@ -1,4 +1,4 @@\n-# Primary test file for libstdc++.\n+# Functional and regression tests in C++ for libstdc++.\n \n # Copyright (C) 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n #\n@@ -61,6 +61,11 @@ if {[info exists tests_file] && [file exists $tests_file]} {\n     # Find all the tests.\n     foreach s $subdirs {\n \tset subdir_tests [find $s *.cc]\n+\tset subdir_tests_c [find $s *.c]\n+\tforeach e $subdir_tests_c {\n+\t    lappend subdir_tests $e\n+\t}\n+\n \t# Filter out tests that should not be run.\n \tforeach t $subdir_tests {\n \t    # The DejaGNU \"find\" procedure sometimes returns a list "}, {"sha": "58803a2ae4f4c15cb923d63d8d119e622f8915ef", "filename": "libstdc++-v3/testsuite/testsuite_shared.cc", "status": "modified", "additions": 38, "deletions": 1, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cddfb1c7ac9cb2f69cc82839a0163af3e771a68d/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_shared.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cddfb1c7ac9cb2f69cc82839a0163af3e771a68d/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_shared.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_shared.cc?ref=cddfb1c7ac9cb2f69cc82839a0163af3e771a68d", "patch": "@@ -17,11 +17,14 @@\n // USA.\n \n #include <string>\n+#include <stdexcept>\n+#include <iostream>\n+#include <sstream>\n #include <ext/mt_allocator.h>\n \n // libstdc++/22309\n extern \"C\" void\n-foo()\n+try_allocation()\n {\n   typedef char value_t;\n \n@@ -34,3 +37,37 @@ foo()\n   string_t s;\n   s += \"west beach, indiana dunes\";\n }\n+\n+// libstdc++/23591\n+extern \"C\" void \n+try_throw_exception()\n+{\n+  try\n+    {\n+      throw std::bad_exception();\n+    }\n+  catch (const std::exception& e)\n+    { }\n+}\n+\n+extern \"C\" void \n+try_function_random_fail()\n+{\n+  long seed = lrand48();\n+  if (seed < 2000)\n+    seed = 2000;\n+\n+  {\n+    std::ostringstream s;\n+    s << \"random_throw, seed: \" << seed << std::endl;\n+    std::cout << s.str();\n+  }\n+\n+  while (--seed > 0)\n+    {\n+      try_throw_exception();\n+    }\n+\n+  // Randomly throw. See if other threads cleanup.\n+  throw std::bad_exception();\n+}"}]}