{"sha": "a518b99616d4d007e289654332c934e7c3ec8d52", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTUxOGI5OTYxNmQ0ZDAwN2UyODk2NTQzMzJjOTM0ZTdjM2VjOGQ1Mg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2011-07-07T23:57:26Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2011-07-07T23:57:26Z"}, "message": "dwarf2out: Convert fde_table to a VEC.\n\nPrepare for allocating the FDE for the current function earlier\nthan dwarf2out_begin_prologue.\n\n        * dwarf2out.c (fde_table, fde_table_allocated, fde_table_in_use,\n        FDE_TABLE_INCREMENT): Replace with...\n        (fde_vec): ... this, a new vector.\n        (current_fde): Remove.  Replace all users with cfun->fde.\n        (output_call_frame_info): Use FOR_EACH_VEC_ELT over fde_vec.\n        (size_of_aranges, dwarf2out_finish): Likewise.\n        (dwarf2out_alloc_current_fde): Break out from ...\n        (dwarf2out_begin_prologue): ... here.\n        (dwarf2out_frame_init): Remove.\n        * dwarf2cfi.c: Update all users of current_fde.\n        (dwarf2out_frame_init): Rename from dwarf2cfi_frame_init.\n        * dwarf2out.h: Update decls.\n        (dw_fde_node): Add fde_index member.\n        * function.h (struct function): Add fde member.\n\nFrom-SVN: r176018", "tree": {"sha": "ee3ca739383122468e3b5200d2fd5d7d6e90662c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ee3ca739383122468e3b5200d2fd5d7d6e90662c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a518b99616d4d007e289654332c934e7c3ec8d52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a518b99616d4d007e289654332c934e7c3ec8d52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a518b99616d4d007e289654332c934e7c3ec8d52", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a518b99616d4d007e289654332c934e7c3ec8d52/comments", "author": null, "committer": null, "parents": [{"sha": "89e25f958415ae1ae019e8f35398624b95c44f61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89e25f958415ae1ae019e8f35398624b95c44f61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89e25f958415ae1ae019e8f35398624b95c44f61"}], "stats": {"total": 217, "additions": 101, "deletions": 116}, "files": [{"sha": "3322697f7ff821514feac5ab2f5b75c011b77d6e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a518b99616d4d007e289654332c934e7c3ec8d52/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a518b99616d4d007e289654332c934e7c3ec8d52/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a518b99616d4d007e289654332c934e7c3ec8d52", "patch": "@@ -1,3 +1,20 @@\n+2011-07-07  Richard Henderson  <rth@redhat.com>\n+\n+\t* dwarf2out.c (fde_table, fde_table_allocated, fde_table_in_use,\n+\tFDE_TABLE_INCREMENT): Replace with...\n+\t(fde_vec): ... this, a new vector.\n+\t(current_fde): Remove.  Replace all users with cfun->fde.\n+\t(output_call_frame_info): Use FOR_EACH_VEC_ELT over fde_vec.\n+\t(size_of_aranges, dwarf2out_finish): Likewise.\n+\t(dwarf2out_alloc_current_fde): Break out from ...\n+\t(dwarf2out_begin_prologue): ... here.\n+\t(dwarf2out_frame_init): Remove.\n+\t* dwarf2cfi.c: Update all users of current_fde.\n+\t(dwarf2out_frame_init): Rename from dwarf2cfi_frame_init.\n+\t* dwarf2out.h: Update decls.\n+\t(dw_fde_node): Add fde_index member.\n+\t* function.h (struct function): Add fde member.\n+\n 2011-07-07  Bernd Schmidt  <bernds@codesourcery.com>\n \t    Richard Henderson  <rth@redhat.com>\n "}, {"sha": "3e63299676c503bc3f500e9fd81dd971ac54e24b", "filename": "gcc/dwarf2cfi.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a518b99616d4d007e289654332c934e7c3ec8d52/gcc%2Fdwarf2cfi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a518b99616d4d007e289654332c934e7c3ec8d52/gcc%2Fdwarf2cfi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2cfi.c?ref=a518b99616d4d007e289654332c934e7c3ec8d52", "patch": "@@ -294,7 +294,7 @@ add_fde_cfi (dw_cfi_ref cfi)\n     }\n   else\n     {\n-      dw_fde_ref fde = current_fde ();\n+      dw_fde_ref fde = cfun->fde;\n       VEC_safe_push (dw_cfi_ref, gc, fde->dw_fde_cfi, cfi);\n       dwarf2out_emit_cfi (cfi);\n     }\n@@ -468,7 +468,7 @@ lookup_cfa (dw_cfa_location *loc)\n   FOR_EACH_VEC_ELT (dw_cfi_ref, cie_cfi_vec, ix, cfi)\n     lookup_cfa_1 (cfi, loc, &remember);\n \n-  fde = current_fde ();\n+  fde = cfun->fde;\n   if (fde)\n     FOR_EACH_VEC_ELT (dw_cfi_ref, fde->dw_fde_cfi, ix, cfi)\n       lookup_cfa_1 (cfi, loc, &remember);\n@@ -599,8 +599,8 @@ static void\n reg_save (bool for_cie, unsigned int reg, unsigned int sreg,\n           HOST_WIDE_INT offset)\n {\n+  dw_fde_ref fde = for_cie ? NULL : cfun->fde;\n   dw_cfi_ref cfi = new_cfi ();\n-  dw_fde_ref fde = current_fde ();\n \n   cfi->dw_cfi_oprnd1.dw_cfi_reg_num = reg;\n \n@@ -1652,7 +1652,7 @@ dwarf2out_frame_debug_cfa_window_save (void)\n   Rule 16:\n   (set sp (and: sp <const_int>))\n   constraints: cfa_store.reg == sp\n-  effects: current_fde.stack_realign = 1\n+  effects: cfun->fde.stack_realign = 1\n            cfa_store.offset = 0\n \t   fde->drap_reg = cfa.reg if cfa.reg != sp and cfa.reg != fp\n \n@@ -1742,7 +1742,7 @@ dwarf2out_frame_debug_expr (rtx expr)\n \tsrc = rsi;\n     }\n \n-  fde = current_fde ();\n+  fde = cfun->fde;\n \n   switch (GET_CODE (dest))\n     {\n@@ -2268,7 +2268,7 @@ dwarf2out_frame_debug (rtx insn, bool after_p)\n \tn = XEXP (note, 0);\n \tif (REG_P (n))\n \t  {\n-\t    dw_fde_ref fde = current_fde ();\n+\t    dw_fde_ref fde = cfun->fde;\n \t    if (fde)\n \t      {\n \t\tgcc_assert (fde->vdrap_reg == INVALID_REGNUM);\n@@ -2387,7 +2387,7 @@ cfi_label_required_p (dw_cfi_ref cfi)\n static void\n add_cfis_to_fde (void)\n {\n-  dw_fde_ref fde = current_fde ();\n+  dw_fde_ref fde = cfun->fde;\n   rtx insn, next;\n   /* We always start with a function_begin label.  */\n   bool first = false;\n@@ -2611,7 +2611,7 @@ dwarf2cfi_function_init (void)\n /* Run once.  */\n \n void\n-dwarf2cfi_frame_init (void)\n+dwarf2out_frame_init (void)\n {\n   dw_cfa_location loc;\n "}, {"sha": "51ec613e4e499febb70995244d3fd4a8466a3f72", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 66, "deletions": 106, "changes": 172, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a518b99616d4d007e289654332c934e7c3ec8d52/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a518b99616d4d007e289654332c934e7c3ec8d52/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=a518b99616d4d007e289654332c934e7c3ec8d52", "patch": "@@ -233,33 +233,12 @@ static GTY(()) section *debug_frame_section;\n #define DWARF_CIE_ID DW_CIE_ID\n #endif\n \n-/* A pointer to the base of a table that contains frame description\n-   information for each routine.  */\n-static GTY((length (\"fde_table_allocated\"))) dw_fde_ref fde_table;\n-\n-/* Number of elements currently allocated for fde_table.  */\n-static GTY(()) unsigned fde_table_allocated;\n-\n-/* Number of elements in fde_table currently in use.  */\n-static GTY(()) unsigned fde_table_in_use;\n-\n-/* Size (in elements) of increments by which we may expand the\n-   fde_table.  */\n-#define FDE_TABLE_INCREMENT 256\n-\n-/* Get the current fde_table entry we should use.  */\n-\n-dw_fde_ref\n-current_fde (void)\n-{\n-  return fde_table_in_use ? &fde_table[fde_table_in_use - 1] : NULL;\n-}\n+DEF_VEC_P (dw_fde_ref);\n+DEF_VEC_ALLOC_P (dw_fde_ref, gc);\n \n-/* Some DWARF extensions (e.g., MIPS/SGI) implement a subprogram\n-   attribute that accelerates the lookup of the FDE associated\n-   with the subprogram.  This variable holds the table index of the FDE\n-   associated with the current function (body) definition.  */\n-static unsigned current_funcdef_fde;\n+/* A vector for a table that contains frame description\n+   information for each routine.  */\n+static GTY(()) VEC(dw_fde_ref, gc) *fde_vec;\n \n struct GTY(()) indirect_string_node {\n   const char *str;\n@@ -1313,7 +1292,7 @@ output_call_frame_info (int for_eh)\n   int dw_cie_version;\n \n   /* Don't emit a CIE if there won't be any FDEs.  */\n-  if (fde_table_in_use == 0)\n+  if (fde_vec == NULL)\n     return;\n \n   /* Nothing to do if the assembler's doing it all.  */\n@@ -1330,14 +1309,15 @@ output_call_frame_info (int for_eh)\n     {\n       bool any_eh_needed = false;\n \n-      for (i = 0; i < fde_table_in_use; i++)\n-\tif (fde_table[i].uses_eh_lsda)\n-\t  any_eh_needed = any_lsda_needed = true;\n-\telse if (fde_needed_for_eh_p (&fde_table[i]))\n-\t  any_eh_needed = true;\n-\telse if (TARGET_USES_WEAK_UNWIND_INFO)\n-\t  targetm.asm_out.emit_unwind_label (asm_out_file, fde_table[i].decl,\n-\t\t\t\t\t     1, 1);\n+      FOR_EACH_VEC_ELT (dw_fde_ref, fde_vec, i, fde)\n+\t{\n+\t  if (fde->uses_eh_lsda)\n+\t    any_eh_needed = any_lsda_needed = true;\n+\t  else if (fde_needed_for_eh_p (fde))\n+\t    any_eh_needed = true;\n+\t  else if (TARGET_USES_WEAK_UNWIND_INFO)\n+\t    targetm.asm_out.emit_unwind_label (asm_out_file, fde->decl, 1, 1);\n+\t}\n \n       if (!any_eh_needed)\n \treturn;\n@@ -1490,10 +1470,9 @@ output_call_frame_info (int for_eh)\n   ASM_OUTPUT_LABEL (asm_out_file, l2);\n \n   /* Loop through all of the FDE's.  */\n-  for (i = 0; i < fde_table_in_use; i++)\n+  FOR_EACH_VEC_ELT (dw_fde_ref, fde_vec, i, fde)\n     {\n       unsigned int k;\n-      fde = &fde_table[i];\n \n       /* Don't emit EH unwind info for leaf functions that don't need it.  */\n       if (for_eh && !fde_needed_for_eh_p (fde))\n@@ -1564,6 +1543,31 @@ dwarf2out_do_cfi_startproc (bool second)\n     }\n }\n \n+/* Allocate CURRENT_FDE.  Immediately initialize all we can, noting that\n+   this allocation may be done before pass_final.  */\n+\n+dw_fde_ref\n+dwarf2out_alloc_current_fde (void)\n+{\n+  dw_fde_ref fde;\n+\n+  fde = ggc_alloc_cleared_dw_fde_node ();\n+  fde->decl = current_function_decl;\n+  fde->funcdef_number = current_function_funcdef_no;\n+  fde->fde_index = VEC_length (dw_fde_ref, fde_vec);\n+  fde->all_throwers_are_sibcalls = crtl->all_throwers_are_sibcalls;\n+  fde->uses_eh_lsda = crtl->uses_eh_lsda;\n+  fde->nothrow = crtl->nothrow;\n+  fde->drap_reg = INVALID_REGNUM;\n+  fde->vdrap_reg = INVALID_REGNUM;\n+\n+  /* Record the FDE associated with this function.  */\n+  cfun->fde = fde;\n+  VEC_safe_push (dw_fde_ref, gc, fde_vec, fde);\n+\n+  return fde;\n+}\n+\n /* Output a marker (i.e. a label) for the beginning of a function, before\n    the prologue.  */\n \n@@ -1601,39 +1605,12 @@ dwarf2out_begin_prologue (unsigned int line ATTRIBUTE_UNUSED,\n   if (!do_frame)\n     return;\n \n-  /* Expand the fde table if necessary.  */\n-  if (fde_table_in_use == fde_table_allocated)\n-    {\n-      fde_table_allocated += FDE_TABLE_INCREMENT;\n-      fde_table = GGC_RESIZEVEC (dw_fde_node, fde_table, fde_table_allocated);\n-      memset (fde_table + fde_table_in_use, 0,\n-\t      FDE_TABLE_INCREMENT * sizeof (dw_fde_node));\n-    }\n-\n-  /* Record the FDE associated with this function.  */\n-  current_funcdef_fde = fde_table_in_use;\n-\n-  /* Add the new FDE at the end of the fde_table.  */\n-  fde = &fde_table[fde_table_in_use++];\n-  fde->decl = current_function_decl;\n+  /* Initialize the bits of CURRENT_FDE that were not available earlier.  */\n+  fde = dwarf2out_alloc_current_fde ();\n   fde->dw_fde_begin = dup_label;\n-  fde->dw_fde_end = NULL;\n   fde->dw_fde_current_label = dup_label;\n-  fde->dw_fde_second_begin = NULL;\n-  fde->dw_fde_second_end = NULL;\n-  fde->dw_fde_vms_end_prologue = NULL;\n-  fde->dw_fde_vms_begin_epilogue = NULL;\n-  fde->dw_fde_cfi = VEC_alloc (dw_cfi_ref, gc, 20);\n-  fde->dw_fde_switch_cfi_index = 0;\n-  fde->funcdef_number = current_function_funcdef_no;\n-  fde->all_throwers_are_sibcalls = crtl->all_throwers_are_sibcalls;\n-  fde->uses_eh_lsda = crtl->uses_eh_lsda;\n-  fde->nothrow = crtl->nothrow;\n-  fde->drap_reg = INVALID_REGNUM;\n-  fde->vdrap_reg = INVALID_REGNUM;\n   fde->in_std_section = (fnsec == text_section\n \t\t\t || (cold_text_section && fnsec == cold_text_section));\n-  fde->second_in_std_section = 0;\n \n   dwarf2cfi_function_init ();\n \n@@ -1669,7 +1646,6 @@ void\n dwarf2out_vms_end_prologue (unsigned int line ATTRIBUTE_UNUSED,\n \t\t\tconst char *file ATTRIBUTE_UNUSED)\n {\n-  dw_fde_ref fde;\n   char label[MAX_ARTIFICIAL_LABEL_BYTES];\n \n   /* Output a label to mark the endpoint of the code generated for this\n@@ -1678,8 +1654,7 @@ dwarf2out_vms_end_prologue (unsigned int line ATTRIBUTE_UNUSED,\n \t\t\t       current_function_funcdef_no);\n   ASM_OUTPUT_DEBUG_LABEL (asm_out_file, PROLOGUE_END_LABEL,\n \t\t\t  current_function_funcdef_no);\n-  fde = &fde_table[fde_table_in_use - 1];\n-  fde->dw_fde_vms_end_prologue = xstrdup (label);\n+  cfun->fde->dw_fde_vms_end_prologue = xstrdup (label);\n }\n \n /* Output a marker (i.e. a label) for the beginning of the generated code\n@@ -1690,10 +1665,9 @@ void\n dwarf2out_vms_begin_epilogue (unsigned int line ATTRIBUTE_UNUSED,\n \t\t\t  const char *file ATTRIBUTE_UNUSED)\n {\n-  dw_fde_ref fde;\n+  dw_fde_ref fde = cfun->fde;\n   char label[MAX_ARTIFICIAL_LABEL_BYTES];\n \n-  fde = &fde_table[fde_table_in_use - 1];\n   if (fde->dw_fde_vms_begin_epilogue)\n     return;\n \n@@ -1727,23 +1701,12 @@ dwarf2out_end_epilogue (unsigned int line ATTRIBUTE_UNUSED,\n   ASM_GENERATE_INTERNAL_LABEL (label, FUNC_END_LABEL,\n \t\t\t       current_function_funcdef_no);\n   ASM_OUTPUT_LABEL (asm_out_file, label);\n-  fde = current_fde ();\n+  fde = cfun->fde;\n   gcc_assert (fde != NULL);\n   if (fde->dw_fde_second_begin == NULL)\n     fde->dw_fde_end = xstrdup (label);\n }\n \n-void\n-dwarf2out_frame_init (void)\n-{\n-  /* Allocate the initial hunk of the fde_table.  */\n-  fde_table = ggc_alloc_cleared_vec_dw_fde_node (FDE_TABLE_INCREMENT);\n-  fde_table_allocated = FDE_TABLE_INCREMENT;\n-  fde_table_in_use = 0;\n-\n-  dwarf2cfi_frame_init ();\n-}\n-\n void\n dwarf2out_frame_finish (void)\n {\n@@ -1776,7 +1739,7 @@ void\n dwarf2out_switch_text_section (void)\n {\n   section *sect;\n-  dw_fde_ref fde = current_fde ();\n+  dw_fde_ref fde = cfun->fde;\n \n   gcc_assert (cfun && fde && fde->dw_fde_second_begin == NULL);\n \n@@ -8460,12 +8423,11 @@ size_of_aranges (void)\n     size += 2 * DWARF2_ADDR_SIZE;\n   if (have_multiple_function_sections)\n     {\n-      unsigned fde_idx = 0;\n+      unsigned fde_idx;\n+      dw_fde_ref fde;\n \n-      for (fde_idx = 0; fde_idx < fde_table_in_use; fde_idx++)\n+      FOR_EACH_VEC_ELT (dw_fde_ref, fde_vec, fde_idx, fde)\n \t{\n-\t  dw_fde_ref fde = &fde_table[fde_idx];\n-\n \t  if (!fde->in_std_section)\n \t    size += 2 * DWARF2_ADDR_SIZE;\n \t  if (fde->dw_fde_second_begin && !fde->second_in_std_section)\n@@ -9353,12 +9315,11 @@ output_aranges (unsigned long aranges_length)\n \n   if (have_multiple_function_sections)\n     {\n-      unsigned fde_idx = 0;\n+      unsigned fde_idx;\n+      dw_fde_ref fde;\n \n-      for (fde_idx = 0; fde_idx < fde_table_in_use; fde_idx++)\n+      FOR_EACH_VEC_ELT (dw_fde_ref, fde_vec, fde_idx, fde)\n \t{\n-\t  dw_fde_ref fde = &fde_table[fde_idx];\n-\n \t  if (!fde->in_std_section)\n \t    {\n \t      dw2_asm_output_addr (DWARF2_ADDR_SIZE, fde->dw_fde_begin,\n@@ -10926,7 +10887,7 @@ based_loc_descr (rtx reg, HOST_WIDE_INT offset,\n {\n   unsigned int regno;\n   dw_loc_descr_ref result;\n-  dw_fde_ref fde = current_fde ();\n+  dw_fde_ref fde = cfun->fde;\n \n   /* We only use \"frame base\" when we're sure we're talking about the\n      post-prologue local stack frame.  We do this by *not* running\n@@ -13491,7 +13452,7 @@ dw_loc_list (var_loc_list *loc_list, tree decl, int want_address)\n \t\t&& (node != loc_list->first || loc_list->first->next)\n \t\t&& current_function_decl)\n \t      {\n-\t\tendname = current_fde ()->dw_fde_end;\n+\t\tendname = cfun->fde->dw_fde_end;\n \t\trange_across_switch = true;\n \t      }\n \t    /* The variable has a location between NODE->LABEL and\n@@ -13534,9 +13495,9 @@ dw_loc_list (var_loc_list *loc_list, tree decl, int want_address)\n \t\tif (node->next)\n \t\t  endname = node->next->label;\n \t\telse\n-\t\t  endname = current_fde ()->dw_fde_second_end;\n+\t\t  endname = cfun->fde->dw_fde_second_end;\n \t\t*listp = new_loc_list (descr,\n-\t\t\t\t       current_fde ()->dw_fde_second_begin,\n+\t\t\t\t       cfun->fde->dw_fde_second_begin,\n \t\t\t\t       endname, secname);\n \t\tlistp = &(*listp)->dw_loc_next;\n \t      }\n@@ -15642,7 +15603,7 @@ convert_cfa_to_fb_loc_list (HOST_WIDE_INT offset)\n   const char *start_label, *last_label, *section;\n   dw_cfa_location remember;\n \n-  fde = current_fde ();\n+  fde = cfun->fde;\n   gcc_assert (fde != NULL);\n \n   section = secname_for_decl (current_function_decl);\n@@ -17666,7 +17627,7 @@ gen_subprogram_die (tree decl, dw_die_ref context_die)\n \n       if (!flag_reorder_blocks_and_partition)\n \t{\n-\t  dw_fde_ref fde = &fde_table[current_funcdef_fde];\n+\t  dw_fde_ref fde = cfun->fde;\n \t  if (fde->dw_fde_begin)\n \t    {\n \t      /* We have already generated the labels.  */\n@@ -17712,9 +17673,9 @@ gen_subprogram_die (tree decl, dw_die_ref context_die)\n \t  add_pubname (decl, subr_die);\n \t}\n       else\n-\t{  /* Generate pubnames entries for the split function code\n-\t      ranges.  */\n-\t  dw_fde_ref fde = &fde_table[current_funcdef_fde];\n+\t{\n+\t  /* Generate pubnames entries for the split function code ranges.  */\n+\t  dw_fde_ref fde = cfun->fde;\n \n \t  if (fde->dw_fde_second_begin)\n \t    {\n@@ -17795,7 +17756,7 @@ gen_subprogram_die (tree decl, dw_die_ref context_die)\n \n #ifdef MIPS_DEBUGGING_INFO\n       /* Add a reference to the FDE for this routine.  */\n-      add_AT_fde_ref (subr_die, DW_AT_MIPS_fde, current_funcdef_fde);\n+      add_AT_fde_ref (subr_die, DW_AT_MIPS_fde, cfun->fde->fde_index);\n #endif\n \n       cfa_fb_offset = CFA_FRAME_BASE_OFFSET (decl);\n@@ -22452,7 +22413,8 @@ dwarf2out_finish (const char *filename)\n     }\n   else\n     {\n-      unsigned fde_idx = 0;\n+      unsigned fde_idx;\n+      dw_fde_ref fde;\n       bool range_list_added = false;\n \n       if (text_section_used)\n@@ -22462,10 +22424,8 @@ dwarf2out_finish (const char *filename)\n \tadd_ranges_by_labels (comp_unit_die (), cold_text_section_label,\n \t\t\t      cold_end_label, &range_list_added);\n \n-      for (fde_idx = 0; fde_idx < fde_table_in_use; fde_idx++)\n+      FOR_EACH_VEC_ELT (dw_fde_ref, fde_vec, fde_idx, fde)\n \t{\n-\t  dw_fde_ref fde = &fde_table[fde_idx];\n-\n \t  if (!fde->in_std_section)\n \t    add_ranges_by_labels (comp_unit_die (), fde->dw_fde_begin,\n \t\t\t\t  fde->dw_fde_end, &range_list_added);"}, {"sha": "abc220868e0160b8c84715e3b169880cc9960549", "filename": "gcc/dwarf2out.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a518b99616d4d007e289654332c934e7c3ec8d52/gcc%2Fdwarf2out.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a518b99616d4d007e289654332c934e7c3ec8d52/gcc%2Fdwarf2out.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.h?ref=a518b99616d4d007e289654332c934e7c3ec8d52", "patch": "@@ -88,7 +88,10 @@ typedef struct GTY(()) dw_fde_struct {\n   cfi_vec dw_fde_cfi;\n   int dw_fde_switch_cfi_index; /* Last CFI before switching sections.  */\n   HOST_WIDE_INT stack_realignment;\n+\n   unsigned funcdef_number;\n+  unsigned fde_index;\n+\n   /* Dynamic realign argument pointer register.  */\n   unsigned int drap_reg;\n   /* Virtual dynamic realign argument pointer register.  */\n@@ -215,7 +218,6 @@ dw_loc_descr_node;\n \n \n /* Interface from dwarf2out.c to dwarf2cfi.c.  */\n-extern dw_fde_ref current_fde (void);\n extern struct dw_loc_descr_struct *build_cfa_loc\n   (dw_cfa_location *, HOST_WIDE_INT);\n extern struct dw_loc_descr_struct *build_cfa_aligned_loc\n@@ -224,9 +226,9 @@ extern struct dw_loc_descr_struct *mem_loc_descriptor\n   (rtx, enum machine_mode mode, enum machine_mode mem_mode,\n    enum var_init_status);\n extern enum machine_mode get_address_mode (rtx mem);\n+extern dw_fde_ref dwarf2out_alloc_current_fde (void);\n \n /* Interface from dwarf2cfi.c to dwarf2out.c.  */\n-extern void dwarf2cfi_frame_init (void);\n extern void dwarf2cfi_function_init (void);\n extern void lookup_cfa_1 (dw_cfi_ref cfi, dw_cfa_location *loc,\n \t\t\t  dw_cfa_location *remember);"}, {"sha": "ff193bcf389915d61a4aca92073c943de1b7db07", "filename": "gcc/function.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a518b99616d4d007e289654332c934e7c3ec8d52/gcc%2Ffunction.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a518b99616d4d007e289654332c934e7c3ec8d52/gcc%2Ffunction.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.h?ref=a518b99616d4d007e289654332c934e7c3ec8d52", "patch": "@@ -169,6 +169,7 @@ struct gimple_df;\n struct temp_slot;\n typedef struct temp_slot *temp_slot_p;\n struct call_site_record_d;\n+struct dw_fde_struct;\n \n DEF_VEC_P(temp_slot_p);\n DEF_VEC_ALLOC_P(temp_slot_p,gc);\n@@ -542,6 +543,11 @@ struct GTY(()) function {\n   /* Used types hash table.  */\n   htab_t GTY ((param_is (union tree_node))) used_types_hash;\n \n+  /* Dwarf2 Frame Description Entry, containing the Call Frame Instructions\n+     used for unwinding.  Only set when either dwarf2 unwinding or dwarf2\n+     debugging is enabled.  */\n+  struct dw_fde_struct *fde;\n+\n   /* Last statement uid.  */\n   int last_stmt_uid;\n "}]}