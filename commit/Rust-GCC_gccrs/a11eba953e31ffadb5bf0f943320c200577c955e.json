{"sha": "a11eba953e31ffadb5bf0f943320c200577c955e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTExZWJhOTUzZTMxZmZhZGI1YmYwZjk0MzMyMGMyMDA1NzdjOTU1ZQ==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@codesourcery.com", "date": "2002-05-15T05:30:01Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2002-05-15T05:30:01Z"}, "message": "c-parse.in (MODIFIED_WCHAR_TYPE): New macro.\n\n\t* c-parse.in (MODIFIED_WCHAR_TYPE): New macro.\n\t(c_common_nodes_and_builtins): Use it.\n\t(builtin_define_with_value): New function.\n\t(cb_register_builtins): Define __SIZE_TYPE__,\n\t__PTRDIFF_TYPE__, __WCHAR_TYPE__, and __WINT_TYPE__ here,\n\tusing builtin_define_with_value.  Use consistent notation when\n\tdefining __GXX_WEAK__.\n\t(WCHAR_TYPE_SIZE): Don't redefine.\n\t(combine_strings): Don't use WCHAR_TYPE_SIZE.\n\n\t* cppdefault.h: Don't provide defaults for SIZE_TYPE,\n\tPTRDIFF_TYPE, WCHAR_TYPE, or WINT_TYPE.\n\t* cppinit.c (builtin_array): Remove entries for __SIZE_TYPE__ etc.\n\t* tradcpp.c (initialize_builtins): Likewise.\n\t* gcc.c (cpp_unique_options): Don't muck with __WCHAR_TYPE__.\n\n\t* c-lex.h (builtin_define_with_value): Prototype.\n\t* system.h: Poison NO_BUILTIN_SIZE_TYPE, NO_BUILTIN_WCHAR_TYPE,\n\tNO_BUILTIN_PTRDIFF_TYPE, and NO_BUILTIN_WINT_TYPE.\n\t* doc/tm.texi: Remove mention of NO_BUILTIN_SIZE_TYPE etc.\n\n\t* config/avr/avr.h, config/h8300/h8300.h, config/i386/i386.h,\n\tconfig/ia64/ia64.h, config/mips/dec-osf1.h, config/mips/iris6.h,\n\tconfig/mips/linux.h, config/mips/mips.h, config/mips/netbsd.h,\n\tconfig/mips/osfrose.h, config/mips/sni-svr4.h, config/rs6000/aix51.h,\n\tconfig/s390/linux.h, config/sh/sh.h, config/sh/sh64.h,\n\tconfig/sparc/linux64.h, config/sparc/netbsd-elf.h,\n\tconfig/sparc/sol2-bi.h, config/sparc/sparc.h:\n\tDo not define NO_BUILTIN_SIZE_TYPE etc.  Remove all references\n\tto __SIZE_TYPE__ etc from all spec strings. When this makes\n\textra specs empty, delete them.\n\nFrom-SVN: r53472", "tree": {"sha": "576aea20e1d126c2bd484da7831e462f3b570f4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/576aea20e1d126c2bd484da7831e462f3b570f4c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a11eba953e31ffadb5bf0f943320c200577c955e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a11eba953e31ffadb5bf0f943320c200577c955e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a11eba953e31ffadb5bf0f943320c200577c955e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a11eba953e31ffadb5bf0f943320c200577c955e/comments", "author": null, "committer": null, "parents": [{"sha": "1c31ecf66502d28461ea45a8242a5c6e10beb7f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c31ecf66502d28461ea45a8242a5c6e10beb7f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c31ecf66502d28461ea45a8242a5c6e10beb7f2"}], "stats": {"total": 499, "additions": 94, "deletions": 405}, "files": [{"sha": "8b4a89679c47f6e8d393a911db5f8fdc0b2da1de", "filename": "gcc/ChangeLog", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a11eba953e31ffadb5bf0f943320c200577c955e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a11eba953e31ffadb5bf0f943320c200577c955e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a11eba953e31ffadb5bf0f943320c200577c955e", "patch": "@@ -1,3 +1,37 @@\n+2002-05-14  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* c-parse.in (MODIFIED_WCHAR_TYPE): New macro.\n+\t(c_common_nodes_and_builtins): Use it.\n+\t(builtin_define_with_value): New function.\n+\t(cb_register_builtins): Define __SIZE_TYPE__,\n+\t__PTRDIFF_TYPE__, __WCHAR_TYPE__, and __WINT_TYPE__ here,\n+\tusing builtin_define_with_value.  Use consistent notation when\n+\tdefining __GXX_WEAK__.\n+\t(WCHAR_TYPE_SIZE): Don't redefine.\n+\t(combine_strings): Don't use WCHAR_TYPE_SIZE.\n+\n+\t* cppdefault.h: Don't provide defaults for SIZE_TYPE,\n+\tPTRDIFF_TYPE, WCHAR_TYPE, or WINT_TYPE.\n+\t* cppinit.c (builtin_array): Remove entries for __SIZE_TYPE__ etc.\n+\t* tradcpp.c (initialize_builtins): Likewise.\n+\t* gcc.c (cpp_unique_options): Don't muck with __WCHAR_TYPE__.\n+\n+\t* c-lex.h (builtin_define_with_value): Prototype.\n+\t* system.h: Poison NO_BUILTIN_SIZE_TYPE, NO_BUILTIN_WCHAR_TYPE,\n+\tNO_BUILTIN_PTRDIFF_TYPE, and NO_BUILTIN_WINT_TYPE.\n+\t* doc/tm.texi: Remove mention of NO_BUILTIN_SIZE_TYPE etc.\n+\n+\t* config/avr/avr.h, config/h8300/h8300.h, config/i386/i386.h,\n+\tconfig/ia64/ia64.h, config/mips/dec-osf1.h, config/mips/iris6.h,\n+\tconfig/mips/linux.h, config/mips/mips.h, config/mips/netbsd.h,\n+\tconfig/mips/osfrose.h, config/mips/sni-svr4.h, config/rs6000/aix51.h,\n+\tconfig/s390/linux.h, config/sh/sh.h, config/sh/sh64.h,\n+\tconfig/sparc/linux64.h, config/sparc/netbsd-elf.h,\n+\tconfig/sparc/sol2-bi.h, config/sparc/sparc.h:\n+\tDo not define NO_BUILTIN_SIZE_TYPE etc.  Remove all references\n+\tto __SIZE_TYPE__ etc from all spec strings. When this makes\n+\textra specs empty, delete them.\n+\n 2002-05-14  John David Anglin  <dave@hiauly1.hia.nrc.ca>\n \n \t* pa.c (override_options): Override TARGET_JUMP_IN_DELAY when scheduling"}, {"sha": "f60a27f864ca545eead9f1a71521a6749842b05e", "filename": "gcc/c-common.c", "status": "modified", "additions": 35, "deletions": 8, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a11eba953e31ffadb5bf0f943320c200577c955e/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a11eba953e31ffadb5bf0f943320c200577c955e/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=a11eba953e31ffadb5bf0f943320c200577c955e", "patch": "@@ -41,9 +41,6 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"except.h\"\t\t/* For USING_SJLJ_EXCEPTIONS.  */\n cpp_reader *parse_in;\t\t/* Declared in c-lex.h.  */\n \n-#undef WCHAR_TYPE_SIZE\n-#define WCHAR_TYPE_SIZE TYPE_PRECISION (wchar_type_node)\n-\n /* We let tm.h override the types used here, to handle trivial differences\n    such as the choice of unsigned int or long unsigned int for size_t.\n    When machines start needing nontrivial differences in the size type,\n@@ -58,6 +55,10 @@ cpp_reader *parse_in;\t\t/* Declared in c-lex.h.  */\n #define WCHAR_TYPE \"int\"\n #endif\n \n+/* WCHAR_TYPE gets overridden by -fshort-wchar.  */\n+#define MODIFIED_WCHAR_TYPE \\\n+\t(flag_short_wchar ? \"short unsigned int\" : WCHAR_TYPE)\n+\n #ifndef PTRDIFF_TYPE\n #define PTRDIFF_TYPE \"long int\"\n #endif\n@@ -802,7 +803,8 @@ combine_strings (strings)\n \t}\n       else\n \t{\n-\t  const int nzeros = (WCHAR_TYPE_SIZE / BITS_PER_UNIT) - 1;\n+\t  const int nzeros = (TYPE_PRECISION (wchar_type_node)\n+\t\t\t      / BITS_PER_UNIT) - 1;\n \t  int j, k;\n \n \t  if (BYTES_BIG_ENDIAN)\n@@ -2872,9 +2874,7 @@ c_common_nodes_and_builtins ()\n   (*targetm.init_builtins) ();\n \n   /* This is special for C++ so functions can be overloaded.  */\n-  wchar_type_node = get_identifier (flag_short_wchar\n-\t\t\t\t    ? \"short unsigned int\"\n-\t\t\t\t    : WCHAR_TYPE);\n+  wchar_type_node = get_identifier (MODIFIED_WCHAR_TYPE);\n   wchar_type_node = TREE_TYPE (identifier_global_value (wchar_type_node));\n   wchar_type_size = TYPE_PRECISION (wchar_type_node);\n   if (c_language == clk_cplusplus)\n@@ -4321,7 +4321,7 @@ cb_register_builtins (pfile)\n   if (c_language == clk_cplusplus)\n     {\n       if (SUPPORTS_ONE_ONLY)\n-\tcpp_define (pfile, \"__GXX_WEAK__\");\n+\tcpp_define (pfile, \"__GXX_WEAK__=1\");\n       else\n \tcpp_define (pfile, \"__GXX_WEAK__=0\");\n     }\n@@ -4330,6 +4330,12 @@ cb_register_builtins (pfile)\n   if (USING_SJLJ_EXCEPTIONS)\n     cpp_define (pfile, \"__USING_SJLJ_EXCEPTIONS__\");\n \n+  /* stddef.h needs to know these.  */\n+  builtin_define_with_value (\"__SIZE_TYPE__\", SIZE_TYPE);\n+  builtin_define_with_value (\"__PTRDIFF_TYPE__\", PTRDIFF_TYPE);\n+  builtin_define_with_value (\"__WCHAR_TYPE__\", MODIFIED_WCHAR_TYPE);\n+  builtin_define_with_value (\"__WINT_TYPE__\", WINT_TYPE);\n+\n   /* A straightforward target hook doesn't work, because of problems\n      linking that hook's body when part of non-C front ends.  */\n   TARGET_CPU_CPP_BUILTINS ();\n@@ -4379,6 +4385,27 @@ builtin_define_std (macro)\n     }\n }\n \n+/* Pass an object-like macro and a value to define it to.  */\n+void\n+builtin_define_with_value (macro, expansion)\n+     const char *macro;\n+     const char *expansion;\n+{\n+  char *buf, *q;\n+  size_t mlen = strlen (macro);\n+  size_t elen = strlen (expansion);\n+\n+  q = buf = alloca (mlen + elen + 2);\n+  memcpy (q, macro, mlen);\n+  q += mlen;\n+  *q++ = '=';\n+  memcpy (q, expansion, elen);\n+  q += elen;\n+  *q = '\\0';\n+\n+  cpp_define (parse_in, buf);\n+}\n+\n /* Front end initialization common to C, ObjC and C++.  */\n const char *\n c_common_init (filename)"}, {"sha": "c9af00903a60ea7109f5938e967829a32776900b", "filename": "gcc/c-lex.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a11eba953e31ffadb5bf0f943320c200577c955e/gcc%2Fc-lex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a11eba953e31ffadb5bf0f943320c200577c955e/gcc%2Fc-lex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.h?ref=a11eba953e31ffadb5bf0f943320c200577c955e", "patch": "@@ -49,4 +49,7 @@ extern struct cpp_reader* parse_in;\n    \"_mips\".  */\n extern void builtin_define_std PARAMS ((const char *));\n \n+/* Pass an object-like macro and a value to define it to.  */\n+extern void builtin_define_with_value PARAMS ((const char *, const char *));\n+\n #endif /* ! GCC_C_LEX_H */"}, {"sha": "66ca80c663fa1cf0f41d8c7d1879dc2b4b600ff8", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 2, "deletions": 20, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a11eba953e31ffadb5bf0f943320c200577c955e/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a11eba953e31ffadb5bf0f943320c200577c955e/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=a11eba953e31ffadb5bf0f943320c200577c955e", "patch": "@@ -2653,33 +2653,15 @@ extern int avr_case_values_threshold;\n %{mmcu=attiny15: %(cpp_avr1) -D__AVR_ATtiny15__} \\\n %{mmcu=attiny28: %(cpp_avr1) -D__AVR_ATtiny28__} \\\n %{mno-interrupts:-D__NO_INTERRUPTS__} \\\n-%{mint8:-D__SIZE_TYPE__=long\\\\ unsigned\\\\ int -D__PTRDIFF_TYPE__=long -D__INT_MAX__=127} \\\n-%{!mint*:-D__SIZE_TYPE__=unsigned\\\\ int -D__PTRDIFF_TYPE__=int -D__INT_MAX__=32767} \\\n+%{mint8:-D__INT_MAX__=127} \\\n+%{!mint*:-D__INT_MAX__=32767} \\\n %{posix:-D_POSIX_SOURCE}\"\n /* A C string constant that tells the GNU CC driver program options to\n    pass to CPP.  It can also specify how to translate options you\n    give to GNU CC into options for GNU CC to pass to the CPP.\n \n    Do not define this macro if it does not need to do anything.  */\n \n-#define NO_BUILTIN_SIZE_TYPE\n-/* If this macro is defined, the preprocessor will not define the\n-   builtin macro `__SIZE_TYPE__'.  The macro `__SIZE_TYPE__' must\n-   then be defined by `CPP_SPEC' instead.\n-\n-   This should be defined if `SIZE_TYPE' depends on target dependent\n-   flags which are not accessible to the preprocessor.  Otherwise, it\n-   should not be defined.  */\n-\n-#define NO_BUILTIN_PTRDIFF_TYPE\n-/* If this macro is defined, the preprocessor will not define the\n-   builtin macro `__PTRDIFF_TYPE__'.  The macro `__PTRDIFF_TYPE__'\n-   must then be defined by `CPP_SPEC' instead.\n-\n-   This should be defined if `PTRDIFF_TYPE' depends on target\n-   dependent flags which are not accessible to the preprocessor.\n-   Otherwise, it should not be defined.  */\n-\n #define CC1_SPEC \"%{profile:-p}\"\n /* A C string constant that tells the GNU CC driver program options to\n    pass to `cc1'.  It can also specify how to translate options you"}, {"sha": "ccf8c461cbcba39d69bd1c351c01c74d9ab85af0", "filename": "gcc/config/h8300/h8300.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a11eba953e31ffadb5bf0f943320c200577c955e/gcc%2Fconfig%2Fh8300%2Fh8300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a11eba953e31ffadb5bf0f943320c200577c955e/gcc%2Fconfig%2Fh8300%2Fh8300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.h?ref=a11eba953e31ffadb5bf0f943320c200577c955e", "patch": "@@ -44,9 +44,6 @@ extern const char * const *h8_reg_names;\n \n #define CPP_SPEC \\\n   \"%{!mh:%{!ms:-D__H8300__}} %{mh:-D__H8300H__} %{ms:-D__H8300S__} \\\n-   %{!mh:%{!ms:-D__SIZE_TYPE__=unsigned\\\\ int -D__PTRDIFF_TYPE__=int}} \\\n-   %{mh:-D__SIZE_TYPE__=unsigned\\\\ long -D__PTRDIFF_TYPE__=long} \\\n-   %{ms:-D__SIZE_TYPE__=unsigned\\\\ long -D__PTRDIFF_TYPE__=long} \\\n    %{!mh:%{!ms:-Acpu=h8300 -Amachine=h8300}} \\\n    %{mh:-Acpu=h8300h -Amachine=h8300h} \\\n    %{ms:-Acpu=h8300s -Amachine=h8300s} \\\n@@ -974,8 +971,6 @@ struct cum_arg\n /* ANSI C types.\n    We use longs for the 300H because ints can be 16 or 32.\n    GCC requires SIZE_TYPE to be the same size as pointers.  */\n-#define NO_BUILTIN_SIZE_TYPE\n-#define NO_BUILTIN_PTRDIFF_TYPE\n #define SIZE_TYPE (TARGET_H8300 ? \"unsigned int\" : \"long unsigned int\")\n #define PTRDIFF_TYPE (TARGET_H8300 ? \"int\" : \"long int\")\n "}, {"sha": "7ed0ddefd592114542cdb8d8afd1deeeeb49dbee", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 2, "deletions": 19, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a11eba953e31ffadb5bf0f943320c200577c955e/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a11eba953e31ffadb5bf0f943320c200577c955e/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=a11eba953e31ffadb5bf0f943320c200577c955e", "patch": "@@ -554,27 +554,12 @@ extern int ix86_arch;\n #endif\n #endif /* CPP_CPU_DEFAULT_SPEC */\n \n-#ifdef TARGET_BI_ARCH\n-#define NO_BUILTIN_SIZE_TYPE\n-#define NO_BUILTIN_PTRDIFF_TYPE\n-#endif\n-\n-#ifdef NO_BUILTIN_SIZE_TYPE\n-#define CPP_CPU32_SIZE_TYPE_SPEC \\\n-  \" -D__SIZE_TYPE__=unsigned\\\\ int -D__PTRDIFF_TYPE__=int\"\n-#define CPP_CPU64_SIZE_TYPE_SPEC \\\n-  \" -D__SIZE_TYPE__=unsigned\\\\ long\\\\ int -D__PTRDIFF_TYPE__=long\\\\ int\"\n-#else\n-#define CPP_CPU32_SIZE_TYPE_SPEC \"\"\n-#define CPP_CPU64_SIZE_TYPE_SPEC \"\"\n-#endif\n-\n #define CPP_CPU32_SPEC \\\n   \"-Acpu=i386 -Amachine=i386 %{!ansi:%{!std=c*:%{!std=i*:-Di386}}} -D__i386 \\\n--D__i386__ %(cpp_cpu32sizet)\"\n+-D__i386__\"\n \n #define CPP_CPU64_SPEC \\\n-  \"-Acpu=x86_64 -Amachine=x86_64 -D__x86_64 -D__x86_64__ %(cpp_cpu64sizet)\"\n+  \"-Acpu=x86_64 -Amachine=x86_64 -D__x86_64 -D__x86_64__\"\n \n #define CPP_CPUCOMMON_SPEC \"\\\n %{march=i386:%{!mcpu*:-D__tune_i386__ }}\\\n@@ -662,8 +647,6 @@ extern int ix86_arch;\n   { \"cpp_cpu\",\tCPP_CPU_SPEC },\t\t\t\t\t\t\\\n   { \"cpp_cpu32\", CPP_CPU32_SPEC },\t\t\t\t\t\\\n   { \"cpp_cpu64\", CPP_CPU64_SPEC },\t\t\t\t\t\\\n-  { \"cpp_cpu32sizet\", CPP_CPU32_SIZE_TYPE_SPEC },\t\t\t\\\n-  { \"cpp_cpu64sizet\", CPP_CPU64_SIZE_TYPE_SPEC },\t\t\t\\\n   { \"cpp_cpucommon\", CPP_CPUCOMMON_SPEC },\t\t\t\t\\\n   { \"cc1_cpu\",  CC1_CPU_SPEC },\t\t\t\t\t\t\\\n   SUBTARGET_EXTRA_SPECS"}, {"sha": "0b2aea59efd5ce7f6c0948e36dfa1897111c302c", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a11eba953e31ffadb5bf0f943320c200577c955e/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a11eba953e31ffadb5bf0f943320c200577c955e/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=a11eba953e31ffadb5bf0f943320c200577c955e", "patch": "@@ -213,12 +213,6 @@ extern const char *ia64_fixed_range_string;\n    %(cpp_cpu)\t\\\n    -D__LONG_MAX__=9223372036854775807L\"\n \n-/* This is always \"long\" so it doesn't \"change\" in ILP32 vs. LP64.  */\n-/* #define NO_BUILTIN_SIZE_TYPE */\n-\n-/* This is always \"long\" so it doesn't \"change\" in ILP32 vs. LP64.  */\n-/* #define NO_BUILTIN_PTRDIFF_TYPE */\n-\n /* A C string constant that tells the GNU CC driver program options to pass to\n    `cc1'.  It can also specify how to translate options you give to GNU CC into\n    options for GNU CC to pass to the `cc1'.  */"}, {"sha": "3f54d14c3b4a45d03db1c52cc1cbca7f48e43386", "filename": "gcc/config/mips/dec-osf1.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a11eba953e31ffadb5bf0f943320c200577c955e/gcc%2Fconfig%2Fmips%2Fdec-osf1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a11eba953e31ffadb5bf0f943320c200577c955e/gcc%2Fconfig%2Fmips%2Fdec-osf1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fdec-osf1.h?ref=a11eba953e31ffadb5bf0f943320c200577c955e", "patch": "@@ -43,11 +43,6 @@ Boston, MA 02111-1307, USA.  */\n #define WCHAR_TYPE\t\"short unsigned int\"\n #define WCHAR_TYPE_SIZE SHORT_TYPE_SIZE\n \n-#undef SUBTARGET_CPP_SIZE_SPEC\n-#define SUBTARGET_CPP_SIZE_SPEC \"\\\n-%{mlong64:-D__PTRDIFF_TYPE__=long\\\\ int} \\\n-%{!mlong64:-D__PTRDIFF_TYPE__=int}\"\n-\n /* turn off collect2 COFF support, since ldfcn now has elf declaration */\n #undef OBJECT_FORMAT_COFF\n "}, {"sha": "71a18e83a16b3f6bb222597bbda0e311a401ce97", "filename": "gcc/config/mips/iris6.h", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a11eba953e31ffadb5bf0f943320c200577c955e/gcc%2Fconfig%2Fmips%2Firis6.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a11eba953e31ffadb5bf0f943320c200577c955e/gcc%2Fconfig%2Fmips%2Firis6.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Firis6.h?ref=a11eba953e31ffadb5bf0f943320c200577c955e", "patch": "@@ -44,8 +44,6 @@ Boston, MA 02111-1307, USA.  */\n \n /* wchar_t is defined differently with and without -mabi=64.  */\n \n-#define NO_BUILTIN_WCHAR_TYPE\n-\n #undef WCHAR_TYPE\n #define WCHAR_TYPE (Pmode == DImode ? \"int\" : \"long int\")\n \n@@ -54,8 +52,6 @@ Boston, MA 02111-1307, USA.  */\n \n /* Same for wint_t.  */\n \n-#define NO_BUILTIN_WINT_TYPE\n-\n #undef WINT_TYPE\n #define WINT_TYPE (Pmode == DImode ? \"int\" : \"long int\")\n \n@@ -78,23 +74,13 @@ Boston, MA 02111-1307, USA.  */\n   -D_LONGLONG -D_SVR4_SOURCE -D_MODERN_C -D__DSO__ \\\n   -Asystem=unix -Asystem=svr4 -Acpu=mips -Amachine=sgi\"\n \n-#undef SUBTARGET_CPP_SIZE_SPEC\n-#define SUBTARGET_CPP_SIZE_SPEC \"\\\n-%{mabi=32|mabi=n32: -D__SIZE_TYPE__=unsigned\\\\ int -D__PTRDIFF_TYPE__=int \\\n--D__WCHAR_TYPE__=long\\\\ int -D__WINT_TYPE__=long\\\\ int} \\\n-%{mabi=64: -D__SIZE_TYPE__=long\\\\ unsigned\\\\ int -D__PTRDIFF_TYPE__=long\\\\ int \\\n--D__WCHAR_TYPE__=int -D__WINT_TYPE__=int} \\\n-%{!mabi*: -D__SIZE_TYPE__=unsigned\\\\ int -D__PTRDIFF_TYPE__=int \\\n--D__WCHAR_TYPE__=long\\\\ int -D__WINT_TYPE__=long\\\\ int}\"\n-\n /* We must make -mips3 do what -mlong64 used to do.  */\n /* ??? If no mipsX option given, but a mabi=X option is, then should set\n    _MIPS_ISA based on the mabi=X option.  */\n /* ??? If no mabi=X option give, but a mipsX option is, then should set\n    _MIPS_SIM based on the mipsX option.  */\n /* ??? Same for _MIPS_SZINT.  */\n /* ??? Same for _MIPS_SZPTR.  */\n-/* ??? Same for __SIZE_TYPE and __PTRDIFF_TYPE.  */\n #undef SUBTARGET_CPP_SPEC\n #define SUBTARGET_CPP_SPEC \"\\\n %{!ansi:-D__EXTENSIONS__ -D_SGI_SOURCE} \\"}, {"sha": "7e2b9ea671ea69fdb511e3bbf961e416c001f792", "filename": "gcc/config/mips/linux.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a11eba953e31ffadb5bf0f943320c200577c955e/gcc%2Fconfig%2Fmips%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a11eba953e31ffadb5bf0f943320c200577c955e/gcc%2Fconfig%2Fmips%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Flinux.h?ref=a11eba953e31ffadb5bf0f943320c200577c955e", "patch": "@@ -142,21 +142,13 @@ void FN ()\t\t\t\t\t\t\t\\\n -Amachine=mips -D__ELF__ -D__PIC__ -D__pic__\"\n #endif\n \n-#undef SUBTARGET_CPP_SIZE_SPEC\n-#define SUBTARGET_CPP_SIZE_SPEC \"\\\n-%{mabi=32: -D__SIZE_TYPE__=unsigned\\\\ int -D__PTRDIFF_TYPE__=int} \\\n-%{mabi=n32: -D__SIZE_TYPE__=unsigned\\\\ int -D__PTRDIFF_TYPE__=int} \\\n-%{mabi=64: -D__SIZE_TYPE__=long\\\\ unsigned\\\\ int -D__PTRDIFF_TYPE__=long\\\\ int} \\\n-%{!mabi*: -D__SIZE_TYPE__=unsigned\\\\ int -D__PTRDIFF_TYPE__=int}\"\n-\n /* We must make -mips3 do what -mlong64 used to do.  */\n /* ??? If no mipsX option given, but a mabi=X option is, then should set\n    _MIPS_ISA based on the mabi=X option.  */\n /* ??? If no mabi=X option give, but a mipsX option is, then should set\n    _MIPS_SIM based on the mipsX option.  */\n /* ??? Same for _MIPS_SZINT.  */\n /* ??? Same for _MIPS_SZPTR.  */\n-/* ??? Same for __SIZE_TYPE and __PTRDIFF_TYPE.  */\n #undef SUBTARGET_CPP_SPEC\n #define SUBTARGET_CPP_SPEC \"\\\n %{mfp32: -D_MIPS_FPSET=16} \\"}, {"sha": "a6467c066ddcb87675ed114fc539fef30f0363b3", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 0, "deletions": 135, "changes": 135, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a11eba953e31ffadb5bf0f943320c200577c955e/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a11eba953e31ffadb5bf0f943320c200577c955e/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=a11eba953e31ffadb5bf0f943320c200577c955e", "patch": "@@ -1013,11 +1013,6 @@ extern int mips_abi;\n \n /* Preprocessor specs.  */\n \n-/* SUBTARGET_CPP_SIZE_SPEC defines SIZE_TYPE and PTRDIFF_TYPE.  It may\n-   be overridden by subtargets.  */\n-\n-#ifndef SUBTARGET_CPP_SIZE_SPEC\n-\n /* Rules for SIZE_TYPE and PTRDIFF_TYPE are:\n \n    both gp64 and long64 (not the options, but the corresponding flags,\n@@ -1043,20 +1038,6 @@ extern int mips_abi;\n /* 32-bit cases first.  */\n \n #if MIPS_ABI_DEFAULT == ABI_EABI\n-#define SUBTARGET_CPP_SIZE_SPEC \"\\\n-%{mabi=eabi|!mabi=*:\\\n-  %{mips1|mips2|mips32|mgp32|mlong32: \\\n-    -D__SIZE_TYPE__=unsigned\\\\ int -D__PTRDIFF_TYPE__=int} \\\n-  %{!mips1:%{!mips2:%{!mips32:%{!mgp32:%{!mlong32: \\\n-    %{mips3|mips4|mips5|mips64|mgp64: \\\n-      -D__SIZE_TYPE__=long\\\\ unsigned\\\\ int -D__PTRDIFF_TYPE__=long\\\\ int} \\\n-    %{!mips3:%{!mips4:%{!mips5:%{!mips64:%{!mgp64: \\\n-      -D__SIZE_TYPE__=unsigned\\\\ int -D__PTRDIFF_TYPE__=int}}}}}}}}}}} \\\n-%{mabi=o64:\\\n- %{!mgp64|!-mlong64:-D__SIZE_TYPE__=unsigned\\\\ int -D__PTRDIFF_TYPE__=int} \\\n- %{mgp64:%{mlong64:-D__SIZE_TYPE__=long\\\\ unsigned\\\\ int -D__PTRDIFF_TYPE__=long\\\\ int}}} \\\n-%{mabi=32:-D__SIZE_TYPE__=unsigned\\\\ int -D__PTRDIFF_TYPE__=int} \\\n-\"\n #define LONG_MAX_SPEC \"\\\n %{mlong64:-D__LONG_MAX__=9223372036854775807L}\\\n %{!mlong64:\\\n@@ -1076,76 +1057,10 @@ extern int mips_abi;\n \"\n #endif\n \n-#if MIPS_ABI_DEFAULT == ABI_O64\n-#define SUBTARGET_CPP_SIZE_SPEC \"\\\n-%{mabi=eabi:\\\n-  %{mips1|mips2|mips32|mgp32|mlong32: \\\n-    -D__SIZE_TYPE__=unsigned\\\\ int -D__PTRDIFF_TYPE__=int} \\\n-  %{!mips1:%{!mips2:%{!mips32:%{!mgp32:%{!mlong32: \\\n-    %{mips3|mips4|mips5|mips64|mgp64: \\\n-      -D__SIZE_TYPE__=long\\\\ unsigned\\\\ int -D__PTRDIFF_TYPE__=long\\\\ int} \\\n-    %{!mips3:%{!mips4:%{!mips5:%{!mips64:%{!mgp64: \\\n-      -D__SIZE_TYPE__=unsigned\\\\ int -D__PTRDIFF_TYPE__=int}}}}}}}}}}} \\\n-%{mabi=o64|!mabi=*:\\\n- %{!mgp64|!-mlong64:-D__SIZE_TYPE__=unsigned\\\\ int -D__PTRDIFF_TYPE__=int} \\\n- %{mgp64:%{mlong64:-D__SIZE_TYPE__=long\\\\ unsigned\\\\ int -D__PTRDIFF_TYPE__=long\\\\ int}}} \\\n-%{mabi=32:-D__SIZE_TYPE__=unsigned\\\\ int -D__PTRDIFF_TYPE__=int} \\\n-%{mabi=meabi:-D__SIZE_TYPE__=unsigned\\\\ int -D__PTRDIFF_TYPE__=int} \\\n-\"\n-#endif\n-\n-#if MIPS_ABI_DEFAULT == ABI_32\n-#define SUBTARGET_CPP_SIZE_SPEC \"\\\n-%{mabi=eabi:\\\n-  %{mips1|mips2|mips32|mgp32|mlong32: \\\n-    -D__SIZE_TYPE__=unsigned\\\\ int -D__PTRDIFF_TYPE__=int} \\\n-  %{!mips1:%{!mips2:%{!mips32:%{!mgp32:%{!mlong32: \\\n-    %{mips3|mips4|mips5|mips64|mgp64: \\\n-      -D__SIZE_TYPE__=long\\\\ unsigned\\\\ int -D__PTRDIFF_TYPE__=long\\\\ int} \\\n-    %{!mips3:%{!mips4:%{!mips5:%{!mips64:%{!mgp64: \\\n-      -D__SIZE_TYPE__=unsigned\\\\ int -D__PTRDIFF_TYPE__=int}}}}}}}}}}} \\\n-%{mabi=o64:\\\n- %{!mgp64|!-mlong64:-D__SIZE_TYPE__=unsigned\\\\ int -D__PTRDIFF_TYPE__=int} \\\n- %{mgp64:%{mlong64:-D__SIZE_TYPE__=long\\\\ unsigned\\\\ int -D__PTRDIFF_TYPE__=long\\\\ int}}} \\\n-%{mabi=32|!mabi=*:-D__SIZE_TYPE__=unsigned\\\\ int -D__PTRDIFF_TYPE__=int} \\\n-%{mabi=meabi:-D__SIZE_TYPE__=unsigned\\\\ int -D__PTRDIFF_TYPE__=int} \\\n-\"\n-#endif\n-\n-#if MIPS_ABI_DEFAULT == ABI_MEABI\n-#define SUBTARGET_CPP_SIZE_SPEC \"\\\n-%{mabi=eabi:\\\n-  %{mips1|mips2|mips32|mgp32|mlong32: \\\n-    -D__SIZE_TYPE__=unsigned\\\\ int -D__PTRDIFF_TYPE__=int} \\\n-  %{!mips1:%{!mips2:%{!mips32:%{!mgp32:%{!mlong32: \\\n-    %{mips3|mips4|mips5|mips64|mgp64: \\\n-      -D__SIZE_TYPE__=long\\\\ unsigned\\\\ int -D__PTRDIFF_TYPE__=long\\\\ int} \\\n-    %{!mips3:%{!mips4:%{!mips5:%{!mips64:%{!mgp64: \\\n-      -D__SIZE_TYPE__=unsigned\\\\ int -D__PTRDIFF_TYPE__=int}}}}}}}}}}} \\\n-%{mabi=o64:\\\n- %{!mgp64|!-mlong64:-D__SIZE_TYPE__=unsigned\\\\ int -D__PTRDIFF_TYPE__=int} \\\n- %{mgp64:%{mlong64:-D__SIZE_TYPE__=long\\\\ unsigned\\\\ int -D__PTRDIFF_TYPE__=long\\\\ int}}} \\\n-%{mabi=32:-D__SIZE_TYPE__=unsigned\\\\ int -D__PTRDIFF_TYPE__=int} \\\n-%{mabi=meabi|!mabi=*:-D__SIZE_TYPE__=unsigned\\\\ int -D__PTRDIFF_TYPE__=int} \\\n-\"\n-#endif\n-\n #else\n \n /* 64-bit default ISA.  */\n #if MIPS_ABI_DEFAULT == ABI_EABI\n-#define SUBTARGET_CPP_SIZE_SPEC \"\\\n-%{mabi=eabi|!mabi=*: \\\n-  %{mips1|mips2|mips32|mgp32|mlong32: \\\n-    -D__SIZE_TYPE__=unsigned\\\\ int -D__PTRDIFF_TYPE__=int} \\\n-  %{!mips1:%{!mips2:%{!mips32:%{!mgp32:%{!mlong32: \\\n-    -D__SIZE_TYPE__=long\\\\ unsigned\\\\ int -D__PTRDIFF_TYPE__=long\\\\ int}}}}}} \\\n-%{mabi=o64:\\\n- %{mgp32|!-mlong64:-D__SIZE_TYPE__=unsigned\\\\ int -D__PTRDIFF_TYPE__=int} \\\n- %{!mgp32:%{mlong64:-D__SIZE_TYPE__=long\\\\ unsigned\\\\ int -D__PTRDIFF_TYPE__=long\\\\ int}}} \\\n-%{mabi=32:-D__SIZE_TYPE__=unsigned\\\\ int -D__PTRDIFF_TYPE__=int} \\\n-%{mabi=meabi:-D__SIZE_TYPE__=unsigned\\\\ int -D__PTRDIFF_TYPE__=int} \\\n-\"\n #define LONG_MAX_SPEC \"\\\n %{mlong64:-D__LONG_MAX__=9223372036854775807L}\\\n %{!mlong64:\\\n@@ -1163,53 +1078,6 @@ extern int mips_abi;\n \"\n #endif\n \n-#if MIPS_ABI_DEFAULT == ABI_O64\n-#define SUBTARGET_CPP_SIZE_SPEC \"\\\n-%{mabi=eabi: \\\n-  %{mips1|mips2|mips32|mgp32|mlong32: \\\n-    -D__SIZE_TYPE__=unsigned\\\\ int -D__PTRDIFF_TYPE__=int} \\\n-  %{!mips1:%{!mips2:%{!mips32:%{!mgp32:%{!mlong32: \\\n-    -D__SIZE_TYPE__=long\\\\ unsigned\\\\ int -D__PTRDIFF_TYPE__=long\\\\ int}}}}}} \\\n-%{mabi=o64|!mabi=*:\\\n- %{mgp32|!-mlong64:-D__SIZE_TYPE__=unsigned\\\\ int -D__PTRDIFF_TYPE__=int} \\\n- %{!mgp32:%{mlong64:-D__SIZE_TYPE__=long\\\\ unsigned\\\\ int -D__PTRDIFF_TYPE__=long\\\\ int}}} \\\n-%{mabi=32:-D__SIZE_TYPE__=unsigned\\\\ int -D__PTRDIFF_TYPE__=int} \\\n-%{mabi=meabi:-D__SIZE_TYPE__=unsigned\\\\ int -D__PTRDIFF_TYPE__=int} \\\n-\"\n-#endif\n-\n-#if MIPS_ABI_DEFAULT == ABI_32\n-#define SUBTARGET_CPP_SIZE_SPEC \"\\\n-%{mabi=eabi:\\\n-  %{mips1|mips2|mips32|mgp32|mlong32: \\\n-    -D__SIZE_TYPE__=unsigned\\\\ int -D__PTRDIFF_TYPE__=int} \\\n-  %{!mips1:%{!mips2:%{!mips32:%{!mgp32:%{!mlong32: \\\n-    -D__SIZE_TYPE__=long\\\\ unsigned\\\\ int -D__PTRDIFF_TYPE__=long\\\\ int}}}}}} \\\n-%{mabi=o64:\\\n- %{mgp32|!-mlong64:-D__SIZE_TYPE__=unsigned\\\\ int -D__PTRDIFF_TYPE__=int} \\\n- %{!mgp32:%{mlong64:-D__SIZE_TYPE__=long\\\\ unsigned\\\\ int -D__PTRDIFF_TYPE__=long\\\\ int}}} \\\n-%{mabi=32|!mabi=*:-D__SIZE_TYPE__=unsigned\\\\ int -D__PTRDIFF_TYPE__=int} \\\n-%{mabi=meabi:-D__SIZE_TYPE__=unsigned\\\\ int -D__PTRDIFF_TYPE__=int} \\\n-\"\n-#endif\n-\n-#if MIPS_ABI_DEFAULT == ABI_MEABI\n-#define SUBTARGET_CPP_SIZE_SPEC \"\\\n-%{mabi=eabi:\\\n-  %{mips1|mips2|mips32|mgp32|mlong32: \\\n-    -D__SIZE_TYPE__=unsigned\\\\ int -D__PTRDIFF_TYPE__=int} \\\n-  %{!mips1:%{!mips2:%{!mips32:%{!mgp32:%{!mlong32: \\\n-    -D__SIZE_TYPE__=long\\\\ unsigned\\\\ int -D__PTRDIFF_TYPE__=long\\\\ int}}}}}} \\\n-%{mabi=o64:\\\n- %{mgp32|!-mlong64:-D__SIZE_TYPE__=unsigned\\\\ int -D__PTRDIFF_TYPE__=int} \\\n- %{!mgp32:%{mlong64:-D__SIZE_TYPE__=long\\\\ unsigned\\\\ int -D__PTRDIFF_TYPE__=long\\\\ int}}} \\\n-%{mabi=32:-D__SIZE_TYPE__=unsigned\\\\ int -D__PTRDIFF_TYPE__=int} \\\n-%{mabi=meabi|!mabi=*:-D__SIZE_TYPE__=unsigned\\\\ int -D__PTRDIFF_TYPE__=int} \\\n-\"\n-#endif\n-\n-#endif\n-\n #endif\n \n /* SUBTARGET_CPP_SPEC is passed to the preprocessor.  It may be\n@@ -1273,7 +1141,6 @@ extern int mips_abi;\n   { \"subtarget_cc1_spec\", SUBTARGET_CC1_SPEC },\t\t\t\t\\\n   { \"cc1_cpu_spec\", CC1_CPU_SPEC},                                      \\\n   { \"subtarget_cpp_spec\", SUBTARGET_CPP_SPEC },\t\t\t\t\\\n-  { \"subtarget_cpp_size_spec\", SUBTARGET_CPP_SIZE_SPEC },\t\t\\\n   { \"long_max_spec\", LONG_MAX_SPEC },\t\t\t\t\t\\\n   { \"cpp_fpr_spec\", CPP_FPR_SPEC },\t\t\t\t\t\\\n   { \"mips_as_asm_spec\", MIPS_AS_ASM_SPEC },\t\t\t\t\\\n@@ -4940,12 +4807,10 @@ while (0)\n /* Default definitions for size_t and ptrdiff_t.  */\n \n #ifndef SIZE_TYPE\n-#define NO_BUILTIN_SIZE_TYPE\n #define SIZE_TYPE (Pmode == DImode ? \"long unsigned int\" : \"unsigned int\")\n #endif\n \n #ifndef PTRDIFF_TYPE\n-#define NO_BUILTIN_PTRDIFF_TYPE\n #define PTRDIFF_TYPE (Pmode == DImode ? \"long int\" : \"int\")\n #endif\n "}, {"sha": "f3f9094f7d055a8e43a47f50134e22d040b5a768", "filename": "gcc/config/mips/netbsd.h", "status": "modified", "additions": 5, "deletions": 17, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a11eba953e31ffadb5bf0f943320c200577c955e/gcc%2Fconfig%2Fmips%2Fnetbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a11eba953e31ffadb5bf0f943320c200577c955e/gcc%2Fconfig%2Fmips%2Fnetbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fnetbsd.h?ref=a11eba953e31ffadb5bf0f943320c200577c955e", "patch": "@@ -109,26 +109,14 @@ Boston, MA 02111-1307, USA.  */\n    %{EL:-U__MIPSEB__ -D__MIPSEL__}\t\t\t\t\t\\\n    %(subtarget_cpp_spec) \"\n \n-\n-/* Provide a SUBTARGET_CPP_SIZE_SPEC appropriate for NetBSD.  In\n-   addition to the normal work done by this spec, we also define\n-   __LONG64 or not (so that <machine/ansi.h> can tell).  */\n-\n-#undef SUBTARGET_CPP_SIZE_SPEC\n-#define SUBTARGET_CPP_SIZE_SPEC\t\t\t\t\t\t\\\n-  \"%{mlong64:\t\t\t\t\t\t\t\t\\\n-     %{!mips1:\t\t\t\t\t\t\t\t\\\n-       %{!mips2:\t\t\t\t\t\t\t\\\n-\t %{!mips32:-D__SIZE_TYPE__=long\\\\ unsigned\\\\ int -D__PTRDIFF_TYPE__=long\\\\ int -D__LONG64}}}} \\\n-   %{!mlong64:-D__SIZE_TYPE__=unsigned\\\\ int -D__PTRDIFF_TYPE__=int -U__LONG64}\"\n-\n-\n /* Provide a SUBTARGET_CPP_SPEC appropriate for NetBSD.  Currently,\n-   we just deal with the GCC option '-posix'.  */\n+   we just deal with the GCC option '-posix', and define __LONG64\n+   as appropriate for <machine/ansi.h>.  */\n \n #undef SUBTARGET_CPP_SPEC\n-#define SUBTARGET_CPP_SPEC \"%{posix:-D_POSIX_SOURCE}\"\n-\n+#define SUBTARGET_CPP_SPEC \"%{posix:-D_POSIX_SOURCE}    \\\n+   %{mlong64:%{!mips1:%{!mips2:%{!mips32:-D__LONG64}}}} \\\n+   %{!mlong64:-U__LONG64}\"\n \n /* Provide a LINK_SPEC appropriate for a NetBSD/mips target.\n    This is a copy of LINK_SPEC from <netbsd-elf.h> tweaked for"}, {"sha": "62d61e6dffdbfac5fd049f1fcbd8a72de3032896", "filename": "gcc/config/mips/osfrose.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a11eba953e31ffadb5bf0f943320c200577c955e/gcc%2Fconfig%2Fmips%2Fosfrose.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a11eba953e31ffadb5bf0f943320c200577c955e/gcc%2Fconfig%2Fmips%2Fosfrose.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fosfrose.h?ref=a11eba953e31ffadb5bf0f943320c200577c955e", "patch": "@@ -34,10 +34,6 @@ Boston, MA 02111-1307, USA.  */\n -DOSF -DOSF1 -Dbsd4_2 -DMIPSEL -Dhost_mips -Dmips -Dunix -DR3000 -DSYSTYPE_BSD \\\n -Asystem=unix -Asystem=xpg4 -Acpu=mips -Amachine=mips\"\n \n-#define SUBTARGET_CPP_SIZE_SPEC \"\\\n-%{mlong64:-D__PTRDIFF_TYPE__=long\\\\ int} \\\n-%{!mlong64:-D__PTRDIFF_TYPE__=int}\"\n-\n #define SUBTARGET_CPP_SPEC \"\\\n %{.S:\t%{!ansi:%{!traditional-cpp: -traditional}}}\"\n "}, {"sha": "f4f772f94eb05a591dfaebb574a4238d91ca74dc", "filename": "gcc/config/mips/sni-svr4.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a11eba953e31ffadb5bf0f943320c200577c955e/gcc%2Fconfig%2Fmips%2Fsni-svr4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a11eba953e31ffadb5bf0f943320c200577c955e/gcc%2Fconfig%2Fmips%2Fsni-svr4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fsni-svr4.h?ref=a11eba953e31ffadb5bf0f943320c200577c955e", "patch": "@@ -26,9 +26,6 @@ Boston, MA 02111-1307, USA.  */\n -D_mips -D_unix -D_host_mips -D_MIPSEB -D_R3000 -D_SYSTYPE_SVR4 \\\n -Asystem=unix -Asystem=svr4 -Acpu=mips -Amachine=mips\"\n \n-#define SUBTARGET_CPP_SIZE_SPEC \"\\\n--D__SIZE_TYPE__=unsigned\\\\ int -D__PTRDIFF_TYPE__=int\"\n-\n #define LINK_SPEC \"\\\n %{G*} \\\n %{!mgas: \\"}, {"sha": "96a6a631852a1eade1fb340bef55eba332285fe1", "filename": "gcc/config/rs6000/aix51.h", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a11eba953e31ffadb5bf0f943320c200577c955e/gcc%2Fconfig%2Frs6000%2Faix51.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a11eba953e31ffadb5bf0f943320c200577c955e/gcc%2Fconfig%2Frs6000%2Faix51.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix51.h?ref=a11eba953e31ffadb5bf0f943320c200577c955e", "patch": "@@ -105,9 +105,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n #undef CPP_SPEC\n #define CPP_SPEC \"%{posix: -D_POSIX_SOURCE}\\\n   %{ansi: -D_ANSI_C_SOURCE}\\\n-  %{!maix64: -D__WCHAR_TYPE__=short\\\\ unsigned\\\\ int}\\\n-  %{maix64: -D__64BIT__ -D_ARCH_PPC -D__LONG_MAX__=9223372036854775807L \\\n-    -D__WCHAR_TYPE__=unsigned\\\\ int}\\\n+  %{maix64: -D__64BIT__ -D_ARCH_PPC -D__LONG_MAX__=9223372036854775807L}\n   %{mpe: -I/usr/lpp/ppe.poe/include}\\\n   %{pthread: -D_THREAD_SAFE}\\\n   %(cpp_cpu)\"\n@@ -120,9 +118,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n    -D_XOPEN_SOURCE_EXTENDED=1                   \\\n    -D_LARGE_FILE_API                            \\\n    -D_ALL_SOURCE                                \\\n-   %{!maix64: -D__WCHAR_TYPE__=short\\\\ unsigned\\\\ int}\\\n-   %{maix64: -D__64BIT__ -D_ARCH_PPC -D__LONG_MAX__=9223372036854775807L \\\n-     -D__WCHAR_TYPE__=unsigned\\\\ int}\\\n+   %{maix64: -D__64BIT__ -D_ARCH_PPC -D__LONG_MAX__=9223372036854775807L}\n    %{mpe: -I/usr/lpp/ppe.poe/include}\\\n    %{pthread: -D_THREAD_SAFE}\\\n    %(cpp_cpu)\"\n@@ -207,9 +203,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n #undef PTRDIFF_TYPE\n #define PTRDIFF_TYPE \"long int\"\n \n-/* __WCHAR_TYPE__ is dynamic, so do not define it statically.  */\n-#define NO_BUILTIN_WCHAR_TYPE\n-\n /* Type used for wchar_t, as a string used in a declaration.  */\n #undef  WCHAR_TYPE\n #define WCHAR_TYPE (!TARGET_64BIT ? \"short unsigned int\" : \"unsigned int\")"}, {"sha": "b19561c35ab4ce2c24c050b0574a2a8c1c5a2771", "filename": "gcc/config/s390/linux.h", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a11eba953e31ffadb5bf0f943320c200577c955e/gcc%2Fconfig%2Fs390%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a11eba953e31ffadb5bf0f943320c200577c955e/gcc%2Fconfig%2Fs390%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Flinux.h?ref=a11eba953e31ffadb5bf0f943320c200577c955e", "patch": "@@ -50,28 +50,20 @@ Boston, MA 02111-1307, USA.  */\n \n /* Target specific preprocessor settings.  */\n \n-#define NO_BUILTIN_SIZE_TYPE\n-#define NO_BUILTIN_PTRDIFF_TYPE\n-\n #define CPP_PREDEFINES \\\n   \"-Dunix -Asystem(unix) -D__gnu_linux__ -Dlinux -Asystem(linux) -D__ELF__ \\\n    -Acpu(s390) -Amachine(s390) -D__s390__\"\n \n-#define CPP_ARCH31_SPEC \\\n-  \"-D__SIZE_TYPE__=long\\\\ unsigned\\\\ int -D__PTRDIFF_TYPE__=int\"\n-#define CPP_ARCH64_SPEC \\\n-  \"-D__SIZE_TYPE__=long\\\\ unsigned\\\\ int -D__PTRDIFF_TYPE__=long\\\\ int \\\n-   -D__s390x__ -D__LONG_MAX__=9223372036854775807L\"\n+#define CPP_ARCH31_SPEC \"\"\n+#define CPP_ARCH64_SPEC \"-D__s390x__ -D__LONG_MAX__=9223372036854775807L\"\n \n-#ifdef DEFAULT_TARGET_64BIT\n #undef  CPP_SPEC\n-#define CPP_SPEC \"%{m31:%(cpp_arch31)} %{!m31:%(cpp_arch64)}\"\n+#ifdef DEFAULT_TARGET_64BIT\n+#define CPP_SPEC \"%{!m31:%(cpp_arch64)}\"\n #else\n-#undef  CPP_SPEC\n-#define CPP_SPEC \"%{m64:%(cpp_arch64)} %{!m64:%(cpp_arch31)}\"\n+#define CPP_SPEC \"%{m64:%(cpp_arch64)}\"\n #endif\n \n-\n /* Target specific compiler settings.  */\n \n /* ??? -fcaller-saves sometimes doesn't work.  Fix this! */"}, {"sha": "18c3b48d0f4cba98300363e5858274bb415f8085", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a11eba953e31ffadb5bf0f943320c200577c955e/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a11eba953e31ffadb5bf0f943320c200577c955e/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=a11eba953e31ffadb5bf0f943320c200577c955e", "patch": "@@ -56,8 +56,6 @@ extern int code_for_indirect_jump_scratch;\n %{m4-single:-D__SH4_SINGLE__} \\\n %{m4-nofpu:-D__sh3__ -D__SH4_NOFPU__} \\\n %{m4:-D__SH4__} \\\n-%{m1|m2|m3*|m4*:-D__SIZE_TYPE__=unsigned\\\\ int -D__PTRDIFF_TYPE__=int} \\\n-%{m5*:-D__SIZE_TYPE__=long\\\\ unsigned\\\\ int -D__PTRDIFF_TYPE__=long\\\\ int} \\\n %{!m1:%{!m2:%{!m3*:%{!m4*:%{!m5*:%(cpp_default_cpu_spec)}}}}} \\\n %{mhitachi:-D__HITACHI__} \\\n %(subtarget_cpp_spec) \\\n@@ -72,8 +70,7 @@ extern int code_for_indirect_jump_scratch;\n #endif\n \n #ifndef CPP_DEFAULT_CPU_SPEC\n-#define CPP_DEFAULT_CPU_SPEC \\\n-  \"-D__sh1__ -D__SIZE_TYPE__=unsigned\\\\ int -D__PTRDIFF_TYPE__=int\"\n+#define CPP_DEFAULT_CPU_SPEC \"-D__sh1__\"\n #endif\n \n \n@@ -2509,14 +2506,9 @@ while (0)\n /* 'char' is signed by default.  */\n #define DEFAULT_SIGNED_CHAR  1\n \n-/* We -Define SIZE_TYPE in CPP_SPEC.  */\n-#define NO_BUILTIN_SIZE_TYPE 1\n-\n /* The type of size_t unsigned int.  */\n #define SIZE_TYPE (TARGET_SH5 ? \"long unsigned int\" : \"unsigned int\")\n \n-#define NO_BUILTIN_PTRDIFF_TYPE 1\n-\n #undef  PTRDIFF_TYPE\n #define PTRDIFF_TYPE (TARGET_SH5 ? \"long int\" : \"int\")\n "}, {"sha": "1797cd77f241e54388e13781335986eaf6f88cb1", "filename": "gcc/config/sh/sh64.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a11eba953e31ffadb5bf0f943320c200577c955e/gcc%2Fconfig%2Fsh%2Fsh64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a11eba953e31ffadb5bf0f943320c200577c955e/gcc%2Fconfig%2Fsh%2Fsh64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh64.h?ref=a11eba953e31ffadb5bf0f943320c200577c955e", "patch": "@@ -24,8 +24,7 @@ Boston, MA 02111-1307, USA.  */\n   fputs (\" (SuperH SH)\", stderr);\n \n #undef CPP_DEFAULT_CPU_SPEC\n-#define CPP_DEFAULT_CPU_SPEC \"-D__SH5__=32 -D__SHMEDIA__ \\\n--D__SIZE_TYPE__=long\\\\ unsigned\\\\ int -D__PTRDIFF_TYPE__=long\\\\ int\"\n+#define CPP_DEFAULT_CPU_SPEC \"-D__SH5__=32 -D__SHMEDIA__\"\n \n #undef ASM_SPEC\n #define ASM_SPEC  \"%(subtarget_asm_endian_spec) %{mrelax:-relax} \\"}, {"sha": "d29f6aa597df5c06b486cece1d6583ff83a2ac0c", "filename": "gcc/config/sparc/linux64.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a11eba953e31ffadb5bf0f943320c200577c955e/gcc%2Fconfig%2Fsparc%2Flinux64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a11eba953e31ffadb5bf0f943320c200577c955e/gcc%2Fconfig%2Fsparc%2Flinux64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Flinux64.h?ref=a11eba953e31ffadb5bf0f943320c200577c955e", "patch": "@@ -44,7 +44,6 @@ Boston, MA 02111-1307, USA.  */\n \n #undef CPP_ARCH32_SPEC\n #define CPP_ARCH32_SPEC \"%{mlong-double-128:-D__LONG_DOUBLE_128__} \\\n--D__SIZE_TYPE__=unsigned\\\\ int -D__PTRDIFF_TYPE__=int \\\n -D__GCC_NEW_VARARGS__ -Acpu=sparc -Amachine=sparc\"\n \n #endif"}, {"sha": "f4ffb68c49efac98ba797e9b7786bd2a803fda3d", "filename": "gcc/config/sparc/netbsd-elf.h", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a11eba953e31ffadb5bf0f943320c200577c955e/gcc%2Fconfig%2Fsparc%2Fnetbsd-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a11eba953e31ffadb5bf0f943320c200577c955e/gcc%2Fconfig%2Fsparc%2Fnetbsd-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fnetbsd-elf.h?ref=a11eba953e31ffadb5bf0f943320c200577c955e", "patch": "@@ -37,22 +37,6 @@ Boston, MA 02111-1307, USA.  */\n #undef CPP_SUBTARGET_SPEC32\n #define CPP_SUBTARGET_SPEC32 \"-D__sparc %{posix:-D_POSIX_SOURCE}\"\n \n-/* CPP_ARCH32_SPEC and CPP_ARCH64_SPEC are wrong from sparc/sparc.h; we\n-   always want the non-SPARC_BI_ARCH versions, since the SPARC_BI_ARCH\n-   versions define __SIZE_TYPE__ and __PTRDIFF_TYPE__ incorrectly for\n-   NetBSD.  */\n-#undef CPP_ARCH32_SPEC\n-#define CPP_ARCH32_SPEC \"-D__GCC_NEW_VARARGS__ -Acpu=sparc -Amachine=sparc\"\n-\n-#undef CPP_ARCH64_SPEC\n-#define CPP_ARCH64_SPEC \"-D__arch64__ -Acpu=sparc64 -Amachine=sparc64\"\n-\n-/* sparc/sparc.h defines NO_BUILTIN_SIZE_TYPE and NO_BUILTIN_PTRDIFF_TYPE\n-   if SPARC_BI_ARCH is defined.  This is wrong for NetBSD; size_t and\n-   ptrdiff_t do not change for 32-bit vs. 64-bit.  */\n-#undef NO_BUILTIN_PTRDIFF_TYPE\n-#undef NO_BUILTIN_SIZE_TYPE\n-\n /* SIZE_TYPE and PTRDIFF_TYPE are wrong from sparc/sparc.h.  */\n #undef SIZE_TYPE\n #define SIZE_TYPE \"long unsigned int\""}, {"sha": "fcb65dab31ae731cdaa1a82beae086add2671b4e", "filename": "gcc/config/sparc/sol2-bi.h", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a11eba953e31ffadb5bf0f943320c200577c955e/gcc%2Fconfig%2Fsparc%2Fsol2-bi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a11eba953e31ffadb5bf0f943320c200577c955e/gcc%2Fconfig%2Fsparc%2Fsol2-bi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsol2-bi.h?ref=a11eba953e31ffadb5bf0f943320c200577c955e", "patch": "@@ -125,7 +125,6 @@\n /* wchar_t is called differently in <wchar.h> for 32 and 64-bit\n    compilations.  This is called for by SCD 2.4.1, p. 6-83, Figure 6-65\n    (32-bit) and p. 6P-10, Figure 6.38 (64-bit).  */\n-#define NO_BUILTIN_WCHAR_TYPE\n \n #undef WCHAR_TYPE\n #define WCHAR_TYPE (TARGET_ARCH64 ? \"int\" : \"long int\")\n@@ -136,7 +135,6 @@\n /* Same for wint_t.  See SCD 2.4.1, p. 6-83, Figure 6-66 (32-bit).  There's\n    no corresponding 64-bit definition, but this is what Solaris 8\n    <iso/wchar_iso.h> uses.  */\n-#define NO_BUILTIN_WINT_TYPE\n \n #undef WINT_TYPE\n #define WINT_TYPE (TARGET_ARCH64 ? \"int\" : \"long int\")\n@@ -145,12 +143,10 @@\n #define WINT_TYPE_SIZE 32\n \n #undef CPP_ARCH32_SPEC\n-#define CPP_ARCH32_SPEC \"-D__SIZE_TYPE__=unsigned\\\\ int -D__PTRDIFF_TYPE__=int \\\n--D__WCHAR_TYPE__=long\\\\ int -D__WINT_TYPE__=long\\\\ int \\\n+#define CPP_ARCH32_SPEC \"\\\n -D__GCC_NEW_VARARGS__ -Acpu=sparc -Amachine=sparc\"\n #undef CPP_ARCH64_SPEC\n-#define CPP_ARCH64_SPEC \"-D__SIZE_TYPE__=long\\\\ unsigned\\\\ int -D__PTRDIFF_TYPE__=long\\\\ int \\\n--D__WCHAR_TYPE__=int -D__WINT_TYPE__=int \\\n+#define CPP_ARCH64_SPEC \"\\\n -D__arch64__ -Acpu=sparc64 -Amachine=sparcv9 -D__sparcv9\"\n \n #undef CPP_ARCH_SPEC"}, {"sha": "8429a7f554b17e48618713f587a982caec8573a8", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a11eba953e31ffadb5bf0f943320c200577c955e/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a11eba953e31ffadb5bf0f943320c200577c955e/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=a11eba953e31ffadb5bf0f943320c200577c955e", "patch": "@@ -246,20 +246,9 @@ Unrecognized value in TARGET_CPU_DEFAULT.\n    sparc64 in 32 bit environments, so for now we only use `sparc64' in\n    64 bit environments.  */\n \n-#ifdef SPARC_BI_ARCH\n-\n-#define CPP_ARCH32_SPEC \"-D__SIZE_TYPE__=unsigned\\\\ int -D__PTRDIFF_TYPE__=int \\\n--D__GCC_NEW_VARARGS__ -Acpu=sparc -Amachine=sparc\"\n-#define CPP_ARCH64_SPEC \"-D__SIZE_TYPE__=long\\\\ unsigned\\\\ int -D__PTRDIFF_TYPE__=long\\\\ int \\\n--D__arch64__ -Acpu=sparc64 -Amachine=sparc64\"\n-\n-#else\n-\n #define CPP_ARCH32_SPEC \"-D__GCC_NEW_VARARGS__ -Acpu=sparc -Amachine=sparc\"\n #define CPP_ARCH64_SPEC \"-D__arch64__ -Acpu=sparc64 -Amachine=sparc64\"\n \n-#endif\n-\n #define CPP_ARCH_DEFAULT_SPEC \\\n (DEFAULT_ARCH32_P ? CPP_ARCH32_SPEC : CPP_ARCH64_SPEC)\n \n@@ -372,10 +361,6 @@ Unrecognized value in TARGET_CPU_DEFAULT.\n #define LINK_GCC_C_SEQUENCE_SPEC \"%G %L %G %L\"\n \n \f\n-#ifdef SPARC_BI_ARCH\n-#define NO_BUILTIN_PTRDIFF_TYPE\n-#define NO_BUILTIN_SIZE_TYPE\n-#endif\n #define PTRDIFF_TYPE (TARGET_ARCH64 ? \"long int\" : \"int\")\n #define SIZE_TYPE (TARGET_ARCH64 ? \"long unsigned int\" : \"unsigned int\")\n "}, {"sha": "5d5d74aadf6a9ae5a7b053fa19463422e4b60346", "filename": "gcc/cppdefault.h", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a11eba953e31ffadb5bf0f943320c200577c955e/gcc%2Fcppdefault.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a11eba953e31ffadb5bf0f943320c200577c955e/gcc%2Fcppdefault.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppdefault.h?ref=a11eba953e31ffadb5bf0f943320c200577c955e", "patch": "@@ -48,30 +48,6 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */\n    it would be best to do something here to figure out automatically\n    from other information what type to use.  */\n \n-/* The string value for __SIZE_TYPE__.  */\n-\n-#ifndef SIZE_TYPE\n-#define SIZE_TYPE \"long unsigned int\"\n-#endif\n-\n-/* The string value for __PTRDIFF_TYPE__.  */\n-\n-#ifndef PTRDIFF_TYPE\n-#define PTRDIFF_TYPE \"long int\"\n-#endif\n-\n-/* The string value for __WCHAR_TYPE__.  */\n-\n-#ifndef WCHAR_TYPE\n-#define WCHAR_TYPE \"int\"\n-#endif\n-\n-/* The string value for __WINT_TYPE__.  */\n-\n-#ifndef WINT_TYPE\n-#define WINT_TYPE \"unsigned int\"\n-#endif\n-\n /* The string value for __USER_LABEL_PREFIX__ */\n \n #ifndef USER_LABEL_PREFIX"}, {"sha": "57fa4c0fa1b8718a55adf266d4dbd65536726dd1", "filename": "gcc/cppinit.c", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a11eba953e31ffadb5bf0f943320c200577c955e/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a11eba953e31ffadb5bf0f943320c200577c955e/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=a11eba953e31ffadb5bf0f943320c200577c955e", "patch": "@@ -662,18 +662,6 @@ static const struct builtin builtin_array[] =\n   X(\"__USER_LABEL_PREFIX__\",\tULP),\n   C(\"__REGISTER_PREFIX__\",\tREGISTER_PREFIX),\n   C(\"__HAVE_BUILTIN_SETJMP__\",\t\"1\"),\n-#ifndef NO_BUILTIN_SIZE_TYPE\n-  C(\"__SIZE_TYPE__\",\t\tSIZE_TYPE),\n-#endif\n-#ifndef NO_BUILTIN_PTRDIFF_TYPE\n-  C(\"__PTRDIFF_TYPE__\",\t\tPTRDIFF_TYPE),\n-#endif\n-#ifndef NO_BUILTIN_WCHAR_TYPE\n-  C(\"__WCHAR_TYPE__\",\t\tWCHAR_TYPE),\n-#endif\n-#ifndef NO_BUILTIN_WINT_TYPE\n-  C(\"__WINT_TYPE__\",\t\tWINT_TYPE),\n-#endif\n #ifdef STDC_0_IN_SYSTEM_HEADERS\n   B(\"__STDC__\",\t\t BT_STDC),\n #else"}, {"sha": "8d4e92522c53909aabaf17bde72feb27e06c9fb3", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a11eba953e31ffadb5bf0f943320c200577c955e/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a11eba953e31ffadb5bf0f943320c200577c955e/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=a11eba953e31ffadb5bf0f943320c200577c955e", "patch": "@@ -177,46 +177,6 @@ This macro is just like @code{CPP_SPEC}, but is used for C++, rather\n than C@.  If you do not define this macro, then the value of\n @code{CPP_SPEC} (if any) will be used instead.\n \n-@findex NO_BUILTIN_SIZE_TYPE\n-@item NO_BUILTIN_SIZE_TYPE\n-If this macro is defined, the preprocessor will not define the built-in macro\n-@code{__SIZE_TYPE__}.  The macro @code{__SIZE_TYPE__} must then be defined\n-by @code{CPP_SPEC} instead.\n-\n-This should be defined if @code{SIZE_TYPE} depends on target dependent flags\n-which are not accessible to the preprocessor.  Otherwise, it should not\n-be defined.\n-\n-@findex NO_BUILTIN_PTRDIFF_TYPE\n-@item NO_BUILTIN_PTRDIFF_TYPE\n-If this macro is defined, the preprocessor will not define the built-in macro\n-@code{__PTRDIFF_TYPE__}.  The macro @code{__PTRDIFF_TYPE__} must then be\n-defined by @code{CPP_SPEC} instead.\n-\n-This should be defined if @code{PTRDIFF_TYPE} depends on target dependent flags\n-which are not accessible to the preprocessor.  Otherwise, it should not\n-be defined.\n-\n-@findex NO_BUILTIN_WCHAR_TYPE\n-@item NO_BUILTIN_WCHAR_TYPE\n-If this macro is defined, the preprocessor will not define the built-in macro\n-@code{__WCHAR_TYPE__}.  The macro @code{__WCHAR_TYPE__} must then be\n-defined by @code{CPP_SPEC} instead.\n-\n-This should be defined if @code{WCHAR_TYPE} depends on target dependent flags\n-which are not accessible to the preprocessor.  Otherwise, it should not\n-be defined.\n-\n-@findex NO_BUILTIN_WINT_TYPE\n-@item NO_BUILTIN_WINT_TYPE\n-If this macro is defined, the preprocessor will not define the built-in macro\n-@code{__WINT_TYPE__}.  The macro @code{__WINT_TYPE__} must then be\n-defined by @code{CPP_SPEC} instead.\n-\n-This should be defined if @code{WINT_TYPE} depends on target dependent flags\n-which are not accessible to the preprocessor.  Otherwise, it should not\n-be defined.\n-\n @findex CC1_SPEC\n @item CC1_SPEC\n A C string constant that tells the GCC driver program options to"}, {"sha": "0b8e36365e5089d3aac4f833c803d6e139ac41bc", "filename": "gcc/gcc.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a11eba953e31ffadb5bf0f943320c200577c955e/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a11eba953e31ffadb5bf0f943320c200577c955e/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=a11eba953e31ffadb5bf0f943320c200577c955e", "patch": "@@ -684,7 +684,6 @@ static const char *cpp_unique_options =\n  %{!undef:%{!ansi:%{!std=*:%p}%{std=gnu*:%p}} %P} %{trigraphs}\\\n  %{Os:-D__OPTIMIZE_SIZE__} %{O*:%{!O0:-D__OPTIMIZE__}}\\\n  %{fno-inline|O0|!O*:-D__NO_INLINE__} %{ffast-math:-D__FAST_MATH__}\\\n- %{fshort-wchar:-U__WCHAR_TYPE__ -D__WCHAR_TYPE__=short\\\\ unsigned\\\\ int}\\\n  %{ffreestanding:-D__STDC_HOSTED__=0} %{fno-hosted:-D__STDC_HOSTED__=0}\\\n  %{!ffreestanding:%{!fno-hosted:-D__STDC_HOSTED__=1}} %{remap}\\\n  %{g3:-dD} %{H} %C %{D*&U*&A*} %{i*} %Z %i\\"}, {"sha": "0a4c0c6b20383022edd40f3d7463b27fab02f242", "filename": "gcc/system.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a11eba953e31ffadb5bf0f943320c200577c955e/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a11eba953e31ffadb5bf0f943320c200577c955e/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=a11eba953e31ffadb5bf0f943320c200577c955e", "patch": "@@ -607,7 +607,8 @@ typedef char _Bool;\n \tLONGJMP_RESTORE_FROM_STACK MAX_INT_TYPE_SIZE ASM_IDENTIFY_GCC\t   \\\n \tSTDC_VALUE TRAMPOLINE_ALIGN ASM_IDENTIFY_GCC_AFTER_SOURCE\t   \\\n \tSLOW_ZERO_EXTEND SUBREG_REGNO_OFFSET DWARF_LINE_MIN_INSTR_LENGTH   \\\n-\tTRADITIONAL_RETURN_FLOAT\n+\tTRADITIONAL_RETURN_FLOAT NO_BUILTIN_SIZE_TYPE\t\t\t   \\\n+\tNO_BUILTIN_PTRDIFF_TYPE NO_BUILTIN_WCHAR_TYPE NO_BUILTIN_WINT_TYPE\n \n #endif /* IN_GCC */\n "}, {"sha": "9caf45e6bc0f177450650b4883247cfaa5e9211b", "filename": "gcc/tradcpp.c", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a11eba953e31ffadb5bf0f943320c200577c955e/gcc%2Ftradcpp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a11eba953e31ffadb5bf0f943320c200577c955e/gcc%2Ftradcpp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftradcpp.c?ref=a11eba953e31ffadb5bf0f943320c200577c955e", "patch": "@@ -5149,18 +5149,6 @@ initialize_builtins ()\n   install_spec (\"__INCLUDE_LEVEL__\", T_INCLUDE_LEVEL);\n   install_spec (\"__LINE__\",          T_SPECLINE);\n \n-#ifndef NO_BUILTIN_SIZE_TYPE\n-  install_value (\"__SIZE_TYPE__\",         SIZE_TYPE);\n-#endif\n-#ifndef NO_BUILTIN_PTRDIFF_TYPE\n-  install_value (\"__PTRDIFF_TYPE__\",      PTRDIFF_TYPE);\n-#endif\n-#ifndef NO_BUILTIN_WCHAR_TYPE\n-  install_value (\"__WCHAR_TYPE__\",        WCHAR_TYPE);\n-#endif\n-#ifndef NO_BUILTIN_WINT_TYPE\n-  install_value (\"__WINT_TYPE__\",         WINT_TYPE);\n-#endif\n   install_value (\"__REGISTER_PREFIX__\",   REGISTER_PREFIX);\n   install_value (\"__USER_LABEL_PREFIX__\", user_label_prefix);\n "}]}