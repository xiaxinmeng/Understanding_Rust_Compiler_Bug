{"sha": "7b67393dfff95cd7739fdb872484f3878843e88d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2I2NzM5M2RmZmY5NWNkNzczOWZkYjg3MjQ4NGYzODc4ODQzZTg4ZA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-02-22T02:52:55Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-02-22T02:52:55Z"}, "message": "Permit comparing non-empty interfaces with empty interfaces.\n\nFrom-SVN: r170385", "tree": {"sha": "07eb56a90ca9ef5f6210a40ec95c6cde94d049bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/07eb56a90ca9ef5f6210a40ec95c6cde94d049bb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7b67393dfff95cd7739fdb872484f3878843e88d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b67393dfff95cd7739fdb872484f3878843e88d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b67393dfff95cd7739fdb872484f3878843e88d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b67393dfff95cd7739fdb872484f3878843e88d/comments", "author": null, "committer": null, "parents": [{"sha": "872cbb32e06acfc58d3ae000923272056994a699", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/872cbb32e06acfc58d3ae000923272056994a699", "html_url": "https://github.com/Rust-GCC/gccrs/commit/872cbb32e06acfc58d3ae000923272056994a699"}], "stats": {"total": 98, "additions": 84, "deletions": 14}, "files": [{"sha": "8b064e617f56d6773e1e47b46d92db6c621044e8", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 30, "deletions": 4, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b67393dfff95cd7739fdb872484f3878843e88d/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b67393dfff95cd7739fdb872484f3878843e88d/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=7b67393dfff95cd7739fdb872484f3878843e88d", "patch": "@@ -6270,9 +6270,9 @@ Expression::comparison_tree(Translate_context* context, Operator op,\n   else if (left_type->interface_type() != NULL\n \t   && right_type->interface_type() != NULL)\n     {\n-      if (left_type->interface_type()->is_empty())\n+      if (left_type->interface_type()->is_empty()\n+\t  && right_type->interface_type()->is_empty())\n \t{\n-\t  gcc_assert(right_type->interface_type()->is_empty());\n \t  static tree empty_interface_compare_decl;\n \t  left_tree = Gogo::call_builtin(&empty_interface_compare_decl,\n \t\t\t\t\t location,\n@@ -6288,9 +6288,9 @@ Expression::comparison_tree(Translate_context* context, Operator op,\n \t  // This can panic if the type is uncomparable.\n \t  TREE_NOTHROW(empty_interface_compare_decl) = 0;\n \t}\n-      else\n+      else if (!left_type->interface_type()->is_empty()\n+\t       && !right_type->interface_type()->is_empty())\n \t{\n-\t  gcc_assert(!right_type->interface_type()->is_empty());\n \t  static tree interface_compare_decl;\n \t  left_tree = Gogo::call_builtin(&interface_compare_decl,\n \t\t\t\t\t location,\n@@ -6306,6 +6306,32 @@ Expression::comparison_tree(Translate_context* context, Operator op,\n \t  // This can panic if the type is uncomparable.\n \t  TREE_NOTHROW(interface_compare_decl) = 0;\n \t}\n+      else\n+\t{\n+\t  if (left_type->interface_type()->is_empty())\n+\t    {\n+\t      gcc_assert(op == OPERATOR_EQEQ || op == OPERATOR_NOTEQ);\n+\t      std::swap(left_type, right_type);\n+\t      std::swap(left_tree, right_tree);\n+\t    }\n+\t  gcc_assert(!left_type->interface_type()->is_empty());\n+\t  gcc_assert(right_type->interface_type()->is_empty());\n+\t  static tree interface_empty_compare_decl;\n+\t  left_tree = Gogo::call_builtin(&interface_empty_compare_decl,\n+\t\t\t\t\t location,\n+\t\t\t\t\t \"__go_interface_empty_compare\",\n+\t\t\t\t\t 2,\n+\t\t\t\t\t integer_type_node,\n+\t\t\t\t\t TREE_TYPE(left_tree),\n+\t\t\t\t\t left_tree,\n+\t\t\t\t\t TREE_TYPE(right_tree),\n+\t\t\t\t\t right_tree);\n+\t  if (left_tree == error_mark_node)\n+\t    return error_mark_node;\n+\t  // This can panic if the type is uncomparable.\n+\t  TREE_NOTHROW(interface_empty_compare_decl) = 0;\n+\t}\n+\n       right_tree = build_int_cst_type(integer_type_node, 0);\n     }\n "}, {"sha": "814d7ed6132e4e611eadc37a7f0b8ead1a2290b6", "filename": "libgo/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b67393dfff95cd7739fdb872484f3878843e88d/libgo%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b67393dfff95cd7739fdb872484f3878843e88d/libgo%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMakefile.am?ref=7b67393dfff95cd7739fdb872484f3878843e88d", "patch": "@@ -352,6 +352,7 @@ runtime_files = \\\n \truntime/go-int-array-to-string.c \\\n \truntime/go-int-to-string.c \\\n \truntime/go-interface-compare.c \\\n+\truntime/go-interface-eface-compare.c \\\n \truntime/go-interface-val-compare.c \\\n \truntime/go-lock-os-thread.c \\\n \truntime/go-map-delete.c \\"}, {"sha": "11352cf93d91eea410190df742e59e62206c7738", "filename": "libgo/Makefile.in", "status": "modified", "additions": 21, "deletions": 10, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b67393dfff95cd7739fdb872484f3878843e88d/libgo%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b67393dfff95cd7739fdb872484f3878843e88d/libgo%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMakefile.in?ref=7b67393dfff95cd7739fdb872484f3878843e88d", "patch": "@@ -179,6 +179,7 @@ am__libgo_la_SOURCES_DIST = runtime/go-append.c runtime/go-assert.c \\\n \truntime/go-getgoroot.c runtime/go-go.c runtime/go-gomaxprocs.c \\\n \truntime/go-int-array-to-string.c runtime/go-int-to-string.c \\\n \truntime/go-interface-compare.c \\\n+\truntime/go-interface-eface-compare.c \\\n \truntime/go-interface-val-compare.c runtime/go-lock-os-thread.c \\\n \truntime/go-map-delete.c runtime/go-map-index.c \\\n \truntime/go-map-len.c runtime/go-map-range.c \\\n@@ -222,16 +223,17 @@ am__objects_3 = go-append.lo go-assert.lo go-assert-interface.lo \\\n \tgo-defer.lo go-deferred-recover.lo go-eface-compare.lo \\\n \tgo-eface-val-compare.lo go-getgoroot.lo go-go.lo \\\n \tgo-gomaxprocs.lo go-int-array-to-string.lo go-int-to-string.lo \\\n-\tgo-interface-compare.lo go-interface-val-compare.lo \\\n-\tgo-lock-os-thread.lo go-map-delete.lo go-map-index.lo \\\n-\tgo-map-len.lo go-map-range.lo go-nanotime.lo go-new-channel.lo \\\n-\tgo-new-map.lo go-new.lo go-note.lo go-panic.lo \\\n-\tgo-panic-defer.lo go-print.lo go-rec-big.lo go-rec-nb-big.lo \\\n-\tgo-rec-nb-small.lo go-rec-small.lo go-recover.lo go-reflect.lo \\\n-\tgo-reflect-call.lo go-reflect-chan.lo go-reflect-map.lo \\\n-\tgo-rune.lo go-runtime-error.lo go-sched.lo go-select.lo \\\n-\tgo-semacquire.lo go-send-big.lo go-send-nb-big.lo \\\n-\tgo-send-nb-small.lo go-send-small.lo go-signal.lo go-strcmp.lo \\\n+\tgo-interface-compare.lo go-interface-eface-compare.lo \\\n+\tgo-interface-val-compare.lo go-lock-os-thread.lo \\\n+\tgo-map-delete.lo go-map-index.lo go-map-len.lo go-map-range.lo \\\n+\tgo-nanotime.lo go-new-channel.lo go-new-map.lo go-new.lo \\\n+\tgo-note.lo go-panic.lo go-panic-defer.lo go-print.lo \\\n+\tgo-rec-big.lo go-rec-nb-big.lo go-rec-nb-small.lo \\\n+\tgo-rec-small.lo go-recover.lo go-reflect.lo go-reflect-call.lo \\\n+\tgo-reflect-chan.lo go-reflect-map.lo go-rune.lo \\\n+\tgo-runtime-error.lo go-sched.lo go-select.lo go-semacquire.lo \\\n+\tgo-send-big.lo go-send-nb-big.lo go-send-nb-small.lo \\\n+\tgo-send-small.lo go-signal.lo go-strcmp.lo \\\n \tgo-string-to-byte-array.lo go-string-to-int-array.lo \\\n \tgo-strplus.lo go-strslice.lo go-trampoline.lo go-type-eface.lo \\\n \tgo-type-error.lo go-type-identity.lo go-type-interface.lo \\\n@@ -764,6 +766,7 @@ runtime_files = \\\n \truntime/go-int-array-to-string.c \\\n \truntime/go-int-to-string.c \\\n \truntime/go-interface-compare.c \\\n+\truntime/go-interface-eface-compare.c \\\n \truntime/go-interface-val-compare.c \\\n \truntime/go-lock-os-thread.c \\\n \truntime/go-map-delete.c \\\n@@ -2067,6 +2070,7 @@ distclean-compile:\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/go-int-array-to-string.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/go-int-to-string.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/go-interface-compare.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/go-interface-eface-compare.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/go-interface-val-compare.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/go-lock-os-thread.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/go-main.Po@am__quote@\n@@ -2358,6 +2362,13 @@ go-interface-compare.lo: runtime/go-interface-compare.c\n @AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n @am__fastdepCC_FALSE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o go-interface-compare.lo `test -f 'runtime/go-interface-compare.c' || echo '$(srcdir)/'`runtime/go-interface-compare.c\n \n+go-interface-eface-compare.lo: runtime/go-interface-eface-compare.c\n+@am__fastdepCC_TRUE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT go-interface-eface-compare.lo -MD -MP -MF $(DEPDIR)/go-interface-eface-compare.Tpo -c -o go-interface-eface-compare.lo `test -f 'runtime/go-interface-eface-compare.c' || echo '$(srcdir)/'`runtime/go-interface-eface-compare.c\n+@am__fastdepCC_TRUE@\t$(am__mv) $(DEPDIR)/go-interface-eface-compare.Tpo $(DEPDIR)/go-interface-eface-compare.Plo\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='runtime/go-interface-eface-compare.c' object='go-interface-eface-compare.lo' libtool=yes @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o go-interface-eface-compare.lo `test -f 'runtime/go-interface-eface-compare.c' || echo '$(srcdir)/'`runtime/go-interface-eface-compare.c\n+\n go-interface-val-compare.lo: runtime/go-interface-val-compare.c\n @am__fastdepCC_TRUE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT go-interface-val-compare.lo -MD -MP -MF $(DEPDIR)/go-interface-val-compare.Tpo -c -o go-interface-val-compare.lo `test -f 'runtime/go-interface-val-compare.c' || echo '$(srcdir)/'`runtime/go-interface-val-compare.c\n @am__fastdepCC_TRUE@\t$(am__mv) $(DEPDIR)/go-interface-val-compare.Tpo $(DEPDIR)/go-interface-val-compare.Plo"}, {"sha": "9de8424acc1fa7b22148a94732da78a094a0cd82", "filename": "libgo/runtime/go-interface-eface-compare.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b67393dfff95cd7739fdb872484f3878843e88d/libgo%2Fruntime%2Fgo-interface-eface-compare.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b67393dfff95cd7739fdb872484f3878843e88d/libgo%2Fruntime%2Fgo-interface-eface-compare.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-interface-eface-compare.c?ref=7b67393dfff95cd7739fdb872484f3878843e88d", "patch": "@@ -0,0 +1,32 @@\n+/* go-interface-eface-compare.c -- compare non-empty and empty interface.\n+\n+   Copyright 2011 The Go Authors. All rights reserved.\n+   Use of this source code is governed by a BSD-style\n+   license that can be found in the LICENSE file.  */\n+\n+#include \"interface.h\"\n+\n+/* Compare a non-empty interface value with an empty interface value.\n+   Return 0 for equal, not zero for not equal (return value is like\n+   strcmp).  */\n+\n+int\n+__go_interface_empty_compare (struct __go_interface left,\n+\t\t\t      struct __go_empty_interface right)\n+{\n+  const struct __go_type_descriptor *left_descriptor;\n+\n+  if (left.__methods == NULL && right.__type_descriptor == NULL)\n+    return 0;\n+  if (left.__methods == NULL || right.__type_descriptor == NULL)\n+    return 1;\n+  left_descriptor = left.__methods[0];\n+  if (!__go_type_descriptors_equal (left_descriptor, right.__type_descriptor))\n+    return 1;\n+  if (__go_is_pointer_type (left_descriptor))\n+    return left.__object == right.__object ? 0 : 1;\n+  if (!left_descriptor->__equalfn (left.__object, right.__object,\n+\t\t\t\t   left_descriptor->__size))\n+    return 1;\n+  return 0;\n+}"}]}