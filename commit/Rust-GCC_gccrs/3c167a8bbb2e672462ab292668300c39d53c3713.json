{"sha": "3c167a8bbb2e672462ab292668300c39d53c3713", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2MxNjdhOGJiYjJlNjcyNDYyYWIyOTI2NjgzMDBjMzlkNTNjMzcxMw==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2007-10-19T17:04:59Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2007-10-19T17:04:59Z"}, "message": "stl_algobase.h (struct __cm_assign, [...]): Add.\n\n2007-10-19  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/bits/stl_algobase.h (struct __cm_assign,\n\tstruct __copy_move, struct __copy_move_backward, move,\n\tmove_backward): Add.\n\t(struct __copy, struct __copy_backward): Remove.\n\t(__copy_aux, __copy_backward_aux): Rename to...\n\t(__copy_move_a, __copy_move_backward_a): ... this, and\n\tadjust calls.\n\t(copy, copy_backward): Adjust calls.\n\t* include/bits/streambuf_iterator.h (__copy_aux): Rename\n\tto ...\n\t(__copy_move_a): ... this; add bool template parameter.\n\t* include/std/streambuf: Adjust friend declarations.\n\t* testsuite/util/testsuite_iterators.h\n\t(WritableObject<>::operator=(U&&)): Add.\n\t* testsuite/25_algorithms/move/1.cc: New.\n\t* testsuite/25_algorithms/move/requirements/\n\texplicit_instantiation/2.cc: Likewise.\n\t* testsuite/25_algorithms/move/requirements/\n\texplicit_instantiation/pod.cc: Likewise.\n\t* testsuite/25_algorithms/move_backward/1.cc: Likewise.\n\t* testsuite/25_algorithms/move_backward/requirements/\n\texplicit_instantiation/2.cc: Likewise.\n\t* testsuite/25_algorithms/move_backward/requirements/\n\texplicit_instantiation/pod.cc: Likewise.\n\nFrom-SVN: r129492", "tree": {"sha": "e051d19e5b8a4a223957782a1cae73c554c01892", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e051d19e5b8a4a223957782a1cae73c554c01892"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c167a8bbb2e672462ab292668300c39d53c3713", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c167a8bbb2e672462ab292668300c39d53c3713", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c167a8bbb2e672462ab292668300c39d53c3713", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c167a8bbb2e672462ab292668300c39d53c3713/comments", "author": null, "committer": null, "parents": [{"sha": "36784d0e879801c081910ea958839797f5f9bb48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36784d0e879801c081910ea958839797f5f9bb48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36784d0e879801c081910ea958839797f5f9bb48"}], "stats": {"total": 568, "additions": 505, "deletions": 63}, "files": [{"sha": "b12b8b383066d03e4096e6a36c72b3a9b955447d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c167a8bbb2e672462ab292668300c39d53c3713/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c167a8bbb2e672462ab292668300c39d53c3713/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=3c167a8bbb2e672462ab292668300c39d53c3713", "patch": "@@ -1,3 +1,30 @@\n+2007-10-19  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/bits/stl_algobase.h (struct __cm_assign,\n+\tstruct __copy_move, struct __copy_move_backward, move,\n+\tmove_backward): Add.\n+\t(struct __copy, struct __copy_backward): Remove.\n+\t(__copy_aux, __copy_backward_aux): Rename to...\n+\t(__copy_move_a, __copy_move_backward_a): ... this, and\n+\tadjust calls.\n+\t(copy, copy_backward): Adjust calls.\n+\t* include/bits/streambuf_iterator.h (__copy_aux): Rename\n+\tto ...\n+\t(__copy_move_a): ... this; add bool template parameter.\n+\t* include/std/streambuf: Adjust friend declarations.\n+\t* testsuite/util/testsuite_iterators.h\n+\t(WritableObject<>::operator=(U&&)): Add.\n+\t* testsuite/25_algorithms/move/1.cc: New.\n+\t* testsuite/25_algorithms/move/requirements/\n+\texplicit_instantiation/2.cc: Likewise.\n+\t* testsuite/25_algorithms/move/requirements/\n+\texplicit_instantiation/pod.cc: Likewise.\n+\t* testsuite/25_algorithms/move_backward/1.cc: Likewise.\n+\t* testsuite/25_algorithms/move_backward/requirements/\n+\texplicit_instantiation/2.cc: Likewise.\n+\t* testsuite/25_algorithms/move_backward/requirements/\n+\texplicit_instantiation/pod.cc: Likewise.\n+\n 2007-10-18  Kaz Kojima  <kkojima@gcc.gnu.org>\n \n \t* testsuite/tr1/5_numerical_facilities/special_functions/"}, {"sha": "6a6e2e03bd47beb6e5a887e4df2de633b013ef7a", "filename": "libstdc++-v3/include/bits/stl_algobase.h", "status": "modified", "additions": 141, "deletions": 47, "changes": 188, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c167a8bbb2e672462ab292668300c39d53c3713/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c167a8bbb2e672462ab292668300c39d53c3713/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h?ref=3c167a8bbb2e672462ab292668300c39d53c3713", "patch": "@@ -282,59 +282,80 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       { return __it.base(); }\n     };\n \n+  // Used in __copy_move and __copy_move_backward below.\n+  template<bool _IsCopy>\n+    struct __cm_assign\n+    {\n+      template<typename _IteratorL, typename _IteratorR>\n+        static void\n+        __a(_IteratorL __lhs, _IteratorR __rhs) \n+\t{ *__lhs = *__rhs; }\n+    };\n+\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+  template<>\n+    struct __cm_assign<false>\n+    {\n+      template<typename _IteratorL, typename _IteratorR>\n+        static void\n+        __a(_IteratorL __lhs, _IteratorR __rhs) \n+\t{ *__lhs = std::move(*__rhs); }\n+    };\n+#endif\n+\n   // All of these auxiliary structs serve two purposes.  (1) Replace\n   // calls to copy with memmove whenever possible.  (Memmove, not memcpy,\n   // because the input and output ranges are permitted to overlap.)\n   // (2) If we're using random access iterators, then write the loop as\n   // a for loop with an explicit count.\n \n-  template<bool, typename>\n-    struct __copy\n+  template<bool _IsCopy, bool, typename>\n+    struct __copy_move\n     {\n       template<typename _II, typename _OI>\n         static _OI\n-        copy(_II __first, _II __last, _OI __result)\n+        __copy_m(_II __first, _II __last, _OI __result)\n         {\n \t  for (; __first != __last; ++__result, ++__first)\n-\t    *__result = *__first;\n+\t    std::__cm_assign<_IsCopy>::__a(__result, __first);\n \t  return __result;\n \t}\n     };\n \n-  template<bool _BoolType>\n-    struct __copy<_BoolType, random_access_iterator_tag>\n+  template<bool _IsCopy, bool _IsSimple>\n+    struct __copy_move<_IsCopy, _IsSimple, random_access_iterator_tag>\n     {\n       template<typename _II, typename _OI>\n         static _OI\n-        copy(_II __first, _II __last, _OI __result)\n+        __copy_m(_II __first, _II __last, _OI __result)\n         { \n \t  typedef typename iterator_traits<_II>::difference_type _Distance;\n \t  for(_Distance __n = __last - __first; __n > 0; --__n)\n \t    {\n-\t      *__result = *__first;\n+\t      std::__cm_assign<_IsCopy>::__a(__result, __first);\n \t      ++__first;\n \t      ++__result;\n \t    }\n \t  return __result;\n \t}\n     };\n \n-  template<>\n-    struct __copy<true, random_access_iterator_tag>\n+  template<bool _IsCopy>\n+    struct __copy_move<_IsCopy, true, random_access_iterator_tag>\n     {\n       template<typename _Tp>\n         static _Tp*\n-        copy(const _Tp* __first, const _Tp* __last, _Tp* __result)\n-        { \n+        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)\n+        {\n \t  __builtin_memmove(__result, __first,\n \t\t\t    sizeof(_Tp) * (__last - __first));\n \t  return __result + (__last - __first);\n \t}\n     };\n \n-  template<typename _II, typename _OI>\n+  template<bool _IsCopy, typename _II, typename _OI>\n     inline _OI\n-    __copy_aux(_II __first, _II __last, _OI __result)\n+    __copy_move_a(_II __first, _II __last, _OI __result)\n     {\n       typedef typename iterator_traits<_II>::value_type _ValueTypeI;\n       typedef typename iterator_traits<_OI>::value_type _ValueTypeO;\n@@ -344,7 +365,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t                     && __is_pointer<_OI>::__value\n \t\t\t     && __are_same<_ValueTypeI, _ValueTypeO>::__value);\n \n-      return std::__copy<__simple, _Category>::copy(__first, __last, __result);\n+      return std::__copy_move<_IsCopy, __simple,\n+\t                      _Category>::__copy_m(__first, __last, __result);\n     }\n \n   // Helpers for streambuf iterators (either istream or ostream).\n@@ -358,23 +380,23 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   template<typename _CharT, typename _Traits>\n     class ostreambuf_iterator;\n \n-  template<typename _CharT>\n+  template<bool _IsCopy, typename _CharT>\n     typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, \n \t     ostreambuf_iterator<_CharT, char_traits<_CharT> > >::__type\n-    __copy_aux(_CharT*, _CharT*,\n-\t       ostreambuf_iterator<_CharT, char_traits<_CharT> >);\n+    __copy_move_a(_CharT*, _CharT*,\n+\t\t  ostreambuf_iterator<_CharT, char_traits<_CharT> >);\n \n-  template<typename _CharT>\n+  template<bool _IsCopy, typename _CharT>\n     typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, \n \t     ostreambuf_iterator<_CharT, char_traits<_CharT> > >::__type\n-    __copy_aux(const _CharT*, const _CharT*,\n-\t       ostreambuf_iterator<_CharT, char_traits<_CharT> >);\n+    __copy_move_a(const _CharT*, const _CharT*,\n+\t\t  ostreambuf_iterator<_CharT, char_traits<_CharT> >);\n \n-  template<typename _CharT>\n+  template<bool _IsCopy, typename _CharT>\n     typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,\n \t\t\t\t    _CharT*>::__type\n-    __copy_aux(istreambuf_iterator<_CharT, char_traits<_CharT> >,\n-\t       istreambuf_iterator<_CharT, char_traits<_CharT> >, _CharT*);\n+    __copy_move_a(istreambuf_iterator<_CharT, char_traits<_CharT> >,\n+\t\t  istreambuf_iterator<_CharT, char_traits<_CharT> >, _CharT*);\n \n   /**\n    *  @brief Copies the range [first,last) into result.\n@@ -402,55 +424,89 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t    typename iterator_traits<_II>::value_type>)\n       __glibcxx_requires_valid_range(__first, __last);\n \n-      return _OI(std::__copy_aux(__niter_base<_II>::__b(__first),\n-\t\t\t\t __niter_base<_II>::__b(__last),\n-\t\t\t\t __niter_base<_OI>::__b(__result)));\n+      return _OI(std::__copy_move_a<true>\n+\t\t (std::__niter_base<_II>::__b(__first),\n+\t\t  std::__niter_base<_II>::__b(__last),\n+\t\t  std::__niter_base<_OI>::__b(__result)));\n     }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+  /**\n+   *  @brief Moves the range [first,last) into result.\n+   *  @param  first  An input iterator.\n+   *  @param  last   An input iterator.\n+   *  @param  result An output iterator.\n+   *  @return   result + (first - last)\n+   *\n+   *  This inline function will boil down to a call to @c memmove whenever\n+   *  possible.  Failing that, if random access iterators are passed, then the\n+   *  loop count will be known (and therefore a candidate for compiler\n+   *  optimizations such as unrolling).  Result may not be contained within\n+   *  [first,last); the move_backward function should be used instead.\n+   *\n+   *  Note that the end of the output range is permitted to be contained\n+   *  within [first,last).\n+  */\n+  template<typename _II, typename _OI>\n+    inline _OI\n+    move(_II __first, _II __last, _OI __result)\n+    {\n+      // concept requirements\n+      __glibcxx_function_requires(_InputIteratorConcept<_II>)\n+      __glibcxx_function_requires(_OutputIteratorConcept<_OI,\n+\t    typename iterator_traits<_II>::value_type>)\n+      __glibcxx_requires_valid_range(__first, __last);\n \n-  template<bool, typename>\n-    struct __copy_backward\n+      return _OI(std::__copy_move_a<false>\n+\t\t (std::__niter_base<_II>::__b(__first),\n+\t\t  std::__niter_base<_II>::__b(__last),\n+\t\t  std::__niter_base<_OI>::__b(__result)));\n+    }\n+#endif\n+\n+  template<bool _IsCopy, bool, typename>\n+    struct __copy_move_backward\n     {\n       template<typename _BI1, typename _BI2>\n         static _BI2\n-        __copy_b(_BI1 __first, _BI1 __last, _BI2 __result)\n-        { \n+        __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)\n+        {\n \t  while (__first != __last)\n-\t    *--__result = *--__last;\n+\t    std::__cm_assign<_IsCopy>::__a(--__result, --__last);\n \t  return __result;\n \t}\n     };\n \n-  template<bool _BoolType>\n-    struct __copy_backward<_BoolType, random_access_iterator_tag>\n+  template<bool _IsCopy, bool _IsSimple>\n+    struct __copy_move_backward<_IsCopy, _IsSimple, random_access_iterator_tag>\n     {\n       template<typename _BI1, typename _BI2>\n         static _BI2\n-        __copy_b(_BI1 __first, _BI1 __last, _BI2 __result)\n-        { \n+        __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)\n+        {\n \t  typename iterator_traits<_BI1>::difference_type __n;\n \t  for (__n = __last - __first; __n > 0; --__n)\n-\t    *--__result = *--__last;\n+\t    std::__cm_assign<_IsCopy>::__a(--__result, --__last);\n \t  return __result;\n \t}\n     };\n \n-  template<>\n-    struct __copy_backward<true, random_access_iterator_tag>\n+  template<bool _IsCopy>\n+    struct __copy_move_backward<_IsCopy, true, random_access_iterator_tag>\n     {\n       template<typename _Tp>\n         static _Tp*\n-        __copy_b(const _Tp* __first, const _Tp* __last, _Tp* __result)\n-        { \n+        __copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)\n+        {\n \t  const ptrdiff_t _Num = __last - __first;\n \t  __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);\n \t  return __result - _Num;\n \t}\n     };\n \n-  template<typename _BI1, typename _BI2>\n+  template<bool _IsCopy, typename _BI1, typename _BI2>\n     inline _BI2\n-    __copy_backward_aux(_BI1 __first, _BI1 __last, _BI2 __result)\n+    __copy_move_backward_a(_BI1 __first, _BI1 __last, _BI2 __result)\n     {\n       typedef typename iterator_traits<_BI1>::value_type _ValueType1;\n       typedef typename iterator_traits<_BI2>::value_type _ValueType2;\n@@ -460,7 +516,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t                     && __is_pointer<_BI2>::__value\n \t\t\t     && __are_same<_ValueType1, _ValueType2>::__value);\n \n-      return std::__copy_backward<__simple, _Category>::__copy_b(__first,\n+      return std::__copy_move_backward<_IsCopy, __simple,\n+\t                               _Category>::__copy_move_b(__first,\n \t\t\t\t\t\t\t\t __last,\n \t\t\t\t\t\t\t\t __result);\n     }\n@@ -494,11 +551,48 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t    typename iterator_traits<_BI2>::value_type>)\n       __glibcxx_requires_valid_range(__first, __last);\n \n-      return _BI2(std::__copy_backward_aux(__niter_base<_BI1>::__b(__first),\n-\t\t\t\t\t   __niter_base<_BI1>::__b(__last),\n-\t\t\t\t\t   __niter_base<_BI2>::__b(__result)));\n+      return _BI2(std::__copy_move_backward_a<true>\n+\t\t  (std::__niter_base<_BI1>::__b(__first),\n+\t\t   std::__niter_base<_BI1>::__b(__last),\n+\t\t   std::__niter_base<_BI2>::__b(__result)));\n     }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+  /**\n+   *  @brief Moves the range [first,last) into result.\n+   *  @param  first  A bidirectional iterator.\n+   *  @param  last   A bidirectional iterator.\n+   *  @param  result A bidirectional iterator.\n+   *  @return   result - (first - last)\n+   *\n+   *  The function has the same effect as move, but starts at the end of the\n+   *  range and works its way to the start, returning the start of the result.\n+   *  This inline function will boil down to a call to @c memmove whenever\n+   *  possible.  Failing that, if random access iterators are passed, then the\n+   *  loop count will be known (and therefore a candidate for compiler\n+   *  optimizations such as unrolling).\n+   *\n+   *  Result may not be in the range [first,last).  Use move instead.  Note\n+   *  that the start of the output range may overlap [first,last).\n+  */\n+  template<typename _BI1, typename _BI2>\n+    inline _BI2\n+    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)\n+    {\n+      // concept requirements\n+      __glibcxx_function_requires(_BidirectionalIteratorConcept<_BI1>)\n+      __glibcxx_function_requires(_Mutable_BidirectionalIteratorConcept<_BI2>)\n+      __glibcxx_function_requires(_ConvertibleConcept<\n+\t    typename iterator_traits<_BI1>::value_type,\n+\t    typename iterator_traits<_BI2>::value_type>)\n+      __glibcxx_requires_valid_range(__first, __last);\n+\n+      return _BI2(std::__copy_move_backward_a<false>\n+\t\t  (std::__niter_base<_BI1>::__b(__first),\n+\t\t   std::__niter_base<_BI1>::__b(__last),\n+\t\t   std::__niter_base<_BI2>::__b(__result)));\n+    }\n+#endif\n \n   template<typename _ForwardIterator, typename _Tp>\n     inline typename"}, {"sha": "1461f024b67deeee3edff53a425294edf90cc35e", "filename": "libstdc++-v3/include/bits/streambuf_iterator.h", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c167a8bbb2e672462ab292668300c39d53c3713/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c167a8bbb2e672462ab292668300c39d53c3713/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf_iterator.h?ref=3c167a8bbb2e672462ab292668300c39d53c3713", "patch": "@@ -1,6 +1,7 @@\n // Streambuf iterators\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n+// 2006, 2007\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -67,11 +68,11 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \tcopy(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,\n \t     ostreambuf_iterator<_CharT2>);\n \n-      template<typename _CharT2>\n+      template<bool _IsCopy, typename _CharT2>\n \tfriend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value, \n \t\t\t\t\t       _CharT2*>::__type\n-\t__copy_aux(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,\n-\t\t   _CharT2*);\n+\t__copy_move_a(istreambuf_iterator<_CharT2>,\n+\t\t      istreambuf_iterator<_CharT2>, _CharT2*);\n \n       template<typename _CharT2>\n \tfriend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,\n@@ -291,35 +292,35 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       return __result;\n     }\n \n-  template<typename _CharT>\n+  template<bool _IsCopy, typename _CharT>\n     typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, \n     \t\t\t\t    ostreambuf_iterator<_CharT> >::__type\n-    __copy_aux(_CharT* __first, _CharT* __last,\n-\t       ostreambuf_iterator<_CharT> __result)\n+    __copy_move_a(_CharT* __first, _CharT* __last,\n+\t\t  ostreambuf_iterator<_CharT> __result)\n     {\n       const streamsize __num = __last - __first;\n       if (__num > 0)\n \t__result._M_put(__first, __num);\n       return __result;\n     }\n \n-  template<typename _CharT>\n+  template<bool _IsCopy, typename _CharT>\n     typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,\n \t\t\t\t    ostreambuf_iterator<_CharT> >::__type\n-    __copy_aux(const _CharT* __first, const _CharT* __last,\n-\t       ostreambuf_iterator<_CharT> __result)\n+    __copy_move_a(const _CharT* __first, const _CharT* __last,\n+\t\t  ostreambuf_iterator<_CharT> __result)\n     {\n       const streamsize __num = __last - __first;\n       if (__num > 0)\n \t__result._M_put(__first, __num);\n       return __result;\n     }\n \n-  template<typename _CharT>\n+  template<bool _IsCopy, typename _CharT>\n     typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, \n     \t\t\t\t    _CharT*>::__type\n-    __copy_aux(istreambuf_iterator<_CharT> __first,\n-\t       istreambuf_iterator<_CharT> __last, _CharT* __result)\n+    __copy_move_a(istreambuf_iterator<_CharT> __first,\n+\t\t  istreambuf_iterator<_CharT> __last, _CharT* __result)\n     {\n       typedef istreambuf_iterator<_CharT>                  __is_iterator_type;\n       typedef typename __is_iterator_type::traits_type     traits_type;"}, {"sha": "6402e40d7c891febe3e4e980d11ed7357937f373", "filename": "libstdc++-v3/include/std/streambuf", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c167a8bbb2e672462ab292668300c39d53c3713/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstreambuf", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c167a8bbb2e672462ab292668300c39d53c3713/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstreambuf", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstreambuf?ref=3c167a8bbb2e672462ab292668300c39d53c3713", "patch": "@@ -155,11 +155,11 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       friend streamsize\n       __copy_streambufs_eof<>(__streambuf_type*, __streambuf_type*, bool&);\n \n-      template<typename _CharT2>\n+      template<bool _IsCopy, typename _CharT2>\n         friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value, \n \t\t\t\t\t       _CharT2*>::__type\n-        __copy_aux(istreambuf_iterator<_CharT2>,\n-\t\t   istreambuf_iterator<_CharT2>, _CharT2*);\n+        __copy_move_a(istreambuf_iterator<_CharT2>,\n+\t\t      istreambuf_iterator<_CharT2>, _CharT2*);\n \n       template<typename _CharT2>\n         friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,"}, {"sha": "7fa0f784054edfac19b09a321967fcbdad5c4485", "filename": "libstdc++-v3/testsuite/25_algorithms/move/1.cc", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c167a8bbb2e672462ab292668300c39d53c3713/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmove%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c167a8bbb2e672462ab292668300c39d53c3713/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmove%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmove%2F1.cc?ref=3c167a8bbb2e672462ab292668300c39d53c3713", "patch": "@@ -0,0 +1,64 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without Pred the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#undef _GLIBCXX_CONCEPT_CHECKS\n+#define  _GLIBCXX_TESTSUITE_ALLOW_RVALREF_ALIASING\n+\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n+#include <testsuite_rvalref.h>\n+\n+using __gnu_test::test_container;\n+using __gnu_test::input_iterator_wrapper;\n+using __gnu_test::output_iterator_wrapper;\n+using __gnu_test::rvalstruct;\n+using std::move;\n+\n+typedef test_container<rvalstruct, input_iterator_wrapper> container_in;\n+typedef test_container<rvalstruct, output_iterator_wrapper> container_out;\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  int inarray[] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };\n+  const int size = sizeof(inarray) / sizeof(int);\n+\n+  rvalstruct in[size], out[size];\n+  std::copy(inarray, inarray + size, in);\n+  std::fill(out, out + size, 0);\n+\n+  container_in incon(in, in + size);\n+  container_out outcon(out, out + size);\n+\n+  move(incon.begin(), incon.end(), outcon.begin());\n+  VERIFY( std::equal(out, out + size, inarray) );\n+  for (int z = 0; z < size; ++z)\n+    VERIFY( out[z].valid );\n+  for (int z = 0; z < size; ++z)\n+    VERIFY( !in[z].valid );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "532c290f9dd05799b0367f457563ffab69f85755", "filename": "libstdc++-v3/testsuite/25_algorithms/move/requirements/explicit_instantiation/2.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c167a8bbb2e672462ab292668300c39d53c3713/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmove%2Frequirements%2Fexplicit_instantiation%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c167a8bbb2e672462ab292668300c39d53c3713/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmove%2Frequirements%2Fexplicit_instantiation%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmove%2Frequirements%2Fexplicit_instantiation%2F2.cc?ref=3c167a8bbb2e672462ab292668300c39d53c3713", "patch": "@@ -0,0 +1,44 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2007-10-19  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <algorithm>\n+#include <testsuite_api.h>\n+\n+namespace std\n+{\n+  using __gnu_test::NonDefaultConstructible;\n+\n+  typedef NonDefaultConstructible \t\tvalue_type;\n+  typedef value_type* \t\titerator_type;\n+\n+  template iterator_type move(iterator_type, iterator_type, iterator_type);\n+} "}, {"sha": "37aa958670d6718865e751be627788eeb11b582d", "filename": "libstdc++-v3/testsuite/25_algorithms/move/requirements/explicit_instantiation/pod.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c167a8bbb2e672462ab292668300c39d53c3713/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmove%2Frequirements%2Fexplicit_instantiation%2Fpod.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c167a8bbb2e672462ab292668300c39d53c3713/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmove%2Frequirements%2Fexplicit_instantiation%2Fpod.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmove%2Frequirements%2Fexplicit_instantiation%2Fpod.cc?ref=3c167a8bbb2e672462ab292668300c39d53c3713", "patch": "@@ -0,0 +1,44 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2007-10-19  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <algorithm>\n+#include <testsuite_character.h>\n+\n+namespace std\n+{\n+  using __gnu_test::pod_int;\n+\n+  typedef pod_int \t\tvalue_type;\n+  typedef value_type* \t\titerator_type;\n+\n+  template iterator_type move(iterator_type, iterator_type, iterator_type);\n+} "}, {"sha": "ed742f30ffe910e691c2ae1388f2c5e0921bce0f", "filename": "libstdc++-v3/testsuite/25_algorithms/move_backward/1.cc", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c167a8bbb2e672462ab292668300c39d53c3713/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmove_backward%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c167a8bbb2e672462ab292668300c39d53c3713/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmove_backward%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmove_backward%2F1.cc?ref=3c167a8bbb2e672462ab292668300c39d53c3713", "patch": "@@ -0,0 +1,66 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without Pred the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#undef _GLIBCXX_CONCEPT_CHECKS\n+#define  _GLIBCXX_TESTSUITE_ALLOW_RVALREF_ALIASING\n+\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n+#include <testsuite_rvalref.h>\n+\n+using __gnu_test::test_container;\n+using __gnu_test::bidirectional_iterator_wrapper;\n+using __gnu_test::rvalstruct;\n+using std::move_backward;\n+\n+typedef test_container<rvalstruct,\n+\t\t       bidirectional_iterator_wrapper> container_in;\n+typedef test_container<rvalstruct,\n+\t\t       bidirectional_iterator_wrapper> container_out;\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  int inarray[] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };\n+  const int size = sizeof(inarray) / sizeof(int);\n+\n+  rvalstruct in[size], out[size];\n+  std::copy(inarray, inarray + size, in);\n+  std::fill(out, out + size, 0);\n+\n+  container_in incon(in, in + size);\n+  container_out outcon(out, out + size);\n+\n+  move_backward(incon.begin(), incon.end(), outcon.end());\n+  VERIFY( std::equal(out, out + size, inarray) );\n+  for (int z = 0; z < size; ++z)\n+    VERIFY( out[z].valid );\n+  for (int z = 0; z < size; ++z)\n+    VERIFY( !in[z].valid );\n+}\n+\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "430ac7af827c39c95c36a1fe5c73d0243509a9a1", "filename": "libstdc++-v3/testsuite/25_algorithms/move_backward/requirements/explicit_instantiation/2.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c167a8bbb2e672462ab292668300c39d53c3713/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmove_backward%2Frequirements%2Fexplicit_instantiation%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c167a8bbb2e672462ab292668300c39d53c3713/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmove_backward%2Frequirements%2Fexplicit_instantiation%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmove_backward%2Frequirements%2Fexplicit_instantiation%2F2.cc?ref=3c167a8bbb2e672462ab292668300c39d53c3713", "patch": "@@ -0,0 +1,45 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2007-10-19  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <algorithm>\n+#include <testsuite_api.h>\n+\n+namespace std\n+{\n+  using __gnu_test::NonDefaultConstructible;\n+\n+  typedef NonDefaultConstructible \t\tvalue_type;\n+  typedef value_type* \t\titerator_type;\n+\n+  template iterator_type move_backward(iterator_type, iterator_type,\n+\t\t\t\t       iterator_type);\n+} "}, {"sha": "a1c32417719eb8de6dc3c4dc274ac92452aee43c", "filename": "libstdc++-v3/testsuite/25_algorithms/move_backward/requirements/explicit_instantiation/pod.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c167a8bbb2e672462ab292668300c39d53c3713/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmove_backward%2Frequirements%2Fexplicit_instantiation%2Fpod.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c167a8bbb2e672462ab292668300c39d53c3713/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmove_backward%2Frequirements%2Fexplicit_instantiation%2Fpod.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmove_backward%2Frequirements%2Fexplicit_instantiation%2Fpod.cc?ref=3c167a8bbb2e672462ab292668300c39d53c3713", "patch": "@@ -0,0 +1,45 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2007-10-19  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <algorithm>\n+#include <testsuite_character.h>\n+\n+namespace std\n+{\n+  using __gnu_test::pod_int;\n+\n+  typedef pod_int \t\tvalue_type;\n+  typedef value_type* \t\titerator_type;\n+\n+  template iterator_type move_backward(iterator_type, iterator_type,\n+\t\t\t\t       iterator_type);\n+} "}, {"sha": "7a1241961373c38fca7026dd1bfe101b0cba460c", "filename": "libstdc++-v3/testsuite/util/testsuite_iterators.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c167a8bbb2e672462ab292668300c39d53c3713/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_iterators.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c167a8bbb2e672462ab292668300c39d53c3713/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_iterators.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_iterators.h?ref=3c167a8bbb2e672462ab292668300c39d53c3713", "patch": "@@ -38,6 +38,7 @@\n \n #include <testsuite_hooks.h>\n #include <bits/stl_iterator_base_types.h>\n+#include <bits/stl_move.h>\n \n #ifndef _TESTSUITE_ITERATORS\n #define _TESTSUITE_ITERATORS\n@@ -103,6 +104,17 @@ namespace __gnu_test\n \tSharedInfo->writtento[ptr - SharedInfo->first] = 1;\n \t*ptr = new_val;\n       }\n+\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      template<class U>\n+      void\n+      operator=(U&& new_val)\n+      {\n+\tITERATOR_VERIFY(SharedInfo->writtento[ptr - SharedInfo->first] == 0);\n+\tSharedInfo->writtento[ptr - SharedInfo->first] = 1;\n+\t*ptr = std::move(new_val);\n+      }\n+#endif\n     };\n \n   /**"}]}