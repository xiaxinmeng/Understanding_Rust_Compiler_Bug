{"sha": "2b462958e2db15dc6f55ed361d47cdbc62d64ea0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmI0NjI5NThlMmRiMTVkYzZmNTVlZDM2MWQ0N2NkYmM2MmQ2NGVhMA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2018-12-13T20:34:10Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2018-12-13T20:34:10Z"}, "message": "Fix handling of POSIX paths containing a root-name\n\nFix path appending and concatenating to work correctly for a leading\nroot-name. Check a new macro, SLASHSLASH_IS_ROOT_NAME, instead of making\nthe behaviour depend directly on __CYGWIN__.\n\n\t* src/filesystem/std-path.cc (SLASHSLASH_IS_ROOT_NAME): New macro to\n\tcontrol whether interpret paths with two slashes as a root-name.\n\t(path::operator/=(const path&)) [SLASHSLASH_IS_ROOT_NAME]: Add a\n\troot-directory when appending to a root-name.\n\t(path::_M_append(basic_string_view<value_type>))\n\t[SLASHSLASH_IS_ROOT_NAME]: Likewise.\n\t(path::operator/=(const path&)) [SLASHSLASH_IS_ROOT_NAME]: Likewise.\n\t(path::_M_concat(basic_string_view<value_type>))\n\t[SLASHSLASH_IS_ROOT_NAME]: Likewise.\n\t(path::lexically_normal()) [SLASHSLASH_IS_ROOT_NAME]: Use += instead\n\tof /= to add a root-directory to the result.\n\t* testsuite/27_io/filesystem/path/decompose/root_directory.cc: Fix\n\texpected result for Cygwin.\n\nFrom-SVN: r267107", "tree": {"sha": "24649584cde525313a354705adf2b63dcdb786fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/24649584cde525313a354705adf2b63dcdb786fb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2b462958e2db15dc6f55ed361d47cdbc62d64ea0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b462958e2db15dc6f55ed361d47cdbc62d64ea0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b462958e2db15dc6f55ed361d47cdbc62d64ea0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b462958e2db15dc6f55ed361d47cdbc62d64ea0/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f87bb8d6e8dec21a07f1fba641a78a127281349", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f87bb8d6e8dec21a07f1fba641a78a127281349", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f87bb8d6e8dec21a07f1fba641a78a127281349"}], "stats": {"total": 102, "additions": 91, "deletions": 11}, "files": [{"sha": "a4f6507c2bbd294fdbe62eb56549dde815db753d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b462958e2db15dc6f55ed361d47cdbc62d64ea0/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b462958e2db15dc6f55ed361d47cdbc62d64ea0/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=2b462958e2db15dc6f55ed361d47cdbc62d64ea0", "patch": "@@ -1,5 +1,19 @@\n 2018-12-13  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* src/filesystem/std-path.cc (SLASHSLASH_IS_ROOT_NAME): New macro to\n+\tcontrol whether interpret paths with two slashes as a root-name.\n+\t(path::operator/=(const path&)) [SLASHSLASH_IS_ROOT_NAME]: Add a\n+\troot-directory when appending to a root-name.\n+\t(path::_M_append(basic_string_view<value_type>))\n+\t[SLASHSLASH_IS_ROOT_NAME]: Likewise.\n+\t(path::operator/=(const path&)) [SLASHSLASH_IS_ROOT_NAME]: Likewise.\n+\t(path::_M_concat(basic_string_view<value_type>))\n+\t[SLASHSLASH_IS_ROOT_NAME]: Likewise.\n+\t(path::lexically_normal()) [SLASHSLASH_IS_ROOT_NAME]: Use += instead\n+\tof /= to add a root-directory to the result.\n+\t* testsuite/27_io/filesystem/path/decompose/root_directory.cc: Fix\n+\texpected result for Cygwin.\n+\n \tPR libstdc++/71044\n \t* include/bits/fs_path.h (path::path(path&&)): Add noexcept when\n \tappropriate. Move _M_cmpts instead of reparsing the native pathname."}, {"sha": "d2520492c0328a3c1d272c4fef992528c691aaaa", "filename": "libstdc++-v3/src/filesystem/std-path.cc", "status": "modified", "additions": 73, "deletions": 11, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b462958e2db15dc6f55ed361d47cdbc62d64ea0/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fstd-path.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b462958e2db15dc6f55ed361d47cdbc62d64ea0/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fstd-path.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fstd-path.cc?ref=2b462958e2db15dc6f55ed361d47cdbc62d64ea0", "patch": "@@ -26,6 +26,11 @@\n # define _GLIBCXX_USE_CXX11_ABI 1\n #endif\n \n+#ifdef __CYGWIN__\n+// Interpret \"//x\" as a root-name, not root-dir + filename\n+# define SLASHSLASH_IS_ROOTNAME 1\n+#endif\n+\n #include <filesystem>\n #include <algorithm>\n #include <bits/stl_uninitialized.h>\n@@ -70,7 +75,7 @@ struct path::_Parser\n     // look for root name or root directory\n     if (is_dir_sep(input[0]))\n       {\n-#ifdef __CYGWIN__\n+#if SLASHSLASH_IS_ROOTNAME\n \t// look for root name, such as \"//foo\"\n \tif (len > 2 && input[1] == input[0])\n \t  {\n@@ -515,7 +520,7 @@ path::operator/=(const path& __p)\n   string_view_type sep;\n   if (has_filename())\n     sep = { &preferred_separator, 1 };  // need to add a separator\n-#ifdef __CYGWIN__\n+#if SLASHSLASH_IS_ROOTNAME\n   else if (_M_type() == _Type::_Root_name) // root-name with no root-dir\n     sep = { &preferred_separator, 1 };  // need to add a separator\n #endif\n@@ -535,6 +540,10 @@ path::operator/=(const path& __p)\n     capacity += __p._M_cmpts.size();\n   else if (!__p.empty() || !sep.empty())\n     capacity += 1;\n+#if SLASHSLASH_IS_ROOTNAME\n+  if (orig_type == _Type::_Root_name)\n+    ++capacity; // Need to insert root-directory after root-name\n+#endif\n \n   if (orig_type == _Type::_Multi)\n     {\n@@ -568,6 +577,14 @@ path::operator/=(const path& __p)\n \t  string_view_type s(_M_pathname.data(), orig_pathlen);\n \t  ::new(output++) _Cmpt(s, orig_type, 0);\n \t  ++_M_cmpts._M_impl->_M_size;\n+#if SLASHSLASH_IS_ROOTNAME\n+\t  if (orig_type == _Type::_Root_name)\n+\t    {\n+\t      ::new(output++) _Cmpt(sep, _Type::_Root_dir,\n+\t\t\t\t    orig_pathlen + sep.length());\n+\t      ++_M_cmpts._M_impl->_M_size;\n+\t    }\n+#endif\n \t}\n \n       if (__p._M_type() == _Type::_Multi)\n@@ -668,7 +685,7 @@ path::_M_append(basic_string_view<value_type> s)\n   basic_string_view<value_type> sep;\n   if (has_filename())\n     sep = { &preferred_separator, 1 };  // need to add a separator\n-#ifdef __CYGWIN__\n+#if SLASHSLASH_IS_ROOTNAME\n   else if (_M_type() == _Type::_Root_name) // root-name with no root-dir\n     sep = { &preferred_separator, 1 };  // need to add a separator\n #endif\n@@ -723,6 +740,11 @@ path::_M_append(basic_string_view<value_type> s)\n   else if (!sep.empty())\n     ++capacity;\n \n+#if SLASHSLASH_IS_ROOTNAME\n+  if (orig_type == _Type::_Root_name)\n+    ++capacity; // Need to insert root-directory after root-name\n+#endif\n+\n   __try\n     {\n       _M_cmpts.type(_Type::_Multi);\n@@ -740,6 +762,15 @@ path::_M_append(basic_string_view<value_type> s)\n \t  // Create single component from original path\n \t  ::new(output++) _Cmpt(orig_pathname, orig_type, 0);\n \t  ++_M_cmpts._M_impl->_M_size;\n+\n+#if SLASHSLASH_IS_ROOTNAME\n+\t  if (!sep.empty() && orig_type == _Type::_Root_name)\n+\t    {\n+\t      ::new(output++) _Cmpt(sep, _Type::_Root_dir,\n+\t\t\t\t    orig_pathlen + sep.length());\n+\t      ++_M_cmpts._M_impl->_M_size;\n+\t    }\n+#endif\n \t}\n \n       if (next != buf.begin())\n@@ -823,7 +854,11 @@ path::operator+=(const path& p)\n     {\n       // See if there's a filename or root-name at the end of the original path\n       // that we can add to.\n-      if (_M_type() == _Type::_Filename)\n+      if (_M_type() == _Type::_Filename\n+#if SLASHSLASH_IS_ROOTNAME\n+\t  || _M_type() == _Type::_Root_name\n+#endif\n+\t  )\n \t{\n \t  if (p._M_type() == _Type::_Filename)\n \t    {\n@@ -858,8 +893,6 @@ path::operator+=(const path& p)\n       && _M_cmpts.back()._M_type() == _Type::_Filename)\n     orig_filenamelen = 0; // current path has empty filename at end\n \n-  // TODO handle \"//rootname\" + \"foo\" case for Cygwin.\n-\n   int capacity = 0;\n   if (_M_type() == _Type::_Multi)\n     capacity += _M_cmpts.size();\n@@ -884,6 +917,16 @@ path::operator+=(const path& p)\n \t  ptr->_M_pathname.reserve(_M_pathname.length() + extra.length());\n \t  ptr->_M_pathname = _M_pathname;\n \t  ptr->_M_pathname += extra;\n+\n+#if SLASHSLASH_IS_ROOTNAME\n+\t  if (orig_type == _Type::_Root_name)\n+\t    {\n+\t      basic_string_view<value_type> s(p._M_pathname);\n+\t      ::new(output++) _Cmpt(s.substr(extra.length(), 1),\n+\t\t  _Type::_Root_dir, orig_pathlen + extra.length());\n+\t      ++_M_cmpts._M_impl->_M_size;\n+\t    }\n+#endif\n \t}\n       else if (orig_filenamelen == 0 && it != last)\n \t{\n@@ -895,7 +938,7 @@ path::operator+=(const path& p)\n \t{\n \t  basic_string_view<value_type> s = it->_M_pathname;\n \t  auto pos = orig_pathlen;\n-#ifdef __CYGWIN__\n+#if SLASHSLASH_IS_ROOTNAME\n \t  s.remove_prefix(2);\n \t  pos += 2;\n #endif\n@@ -999,7 +1042,11 @@ path::_M_concat(basic_string_view<value_type> s)\n     {\n       // See if there's a filename or root-name at the end of the original path\n       // that we can add to.\n-      if (_M_type() == _Type::_Filename)\n+      if (_M_type() == _Type::_Filename\n+#if SLASHSLASH_IS_ROOTNAME\n+\t  || _M_type() == _Type::_Root_name\n+#endif\n+\t  )\n \t{\n \t  if (cmpt.str.length() == s.length())\n \t    {\n@@ -1031,9 +1078,6 @@ path::_M_concat(basic_string_view<value_type> s)\n       && _M_cmpts.back()._M_type() == _Type::_Filename)\n     orig_filenamelen = 0; // original path had empty filename at end\n \n-\n-  // TODO handle \"//rootname\" + \"foo\" case for Cygwin.\n-\n   std::array<_Parser::cmpt, 64> buf;\n   auto next = buf.begin();\n \n@@ -1065,6 +1109,11 @@ path::_M_concat(basic_string_view<value_type> s)\n   if (is_dir_sep(s.back()))\n     ++capacity;\n \n+#if SLASHSLASH_IS_ROOTNAME\n+  if (orig_type == _Type::_Root_name)\n+    ++capacity; // Need to insert root-directory after root-name\n+#endif\n+\n   __try\n     {\n       _M_cmpts.type(_Type::_Multi);\n@@ -1080,6 +1129,15 @@ path::_M_concat(basic_string_view<value_type> s)\n \t  p->_M_pathname.reserve(orig_pathname.length() + extra.length());\n \t  p->_M_pathname = orig_pathname;\n \t  p->_M_pathname += extra;\n+\n+#if SLASHSLASH_IS_ROOTNAME\n+\t  if (orig_type == _Type::_Root_name)\n+\t    {\n+\t      ::new(output++) _Cmpt(s.substr(extra.length(), 1),\n+\t\t  _Type::_Root_dir, orig_pathlen + extra.length());\n+\t      ++_M_cmpts._M_impl->_M_size;\n+\t    }\n+#endif\n \t}\n       else if (orig_filenamelen == 0)\n \t{\n@@ -1532,6 +1590,10 @@ path::lexically_normal() const\n \t}\n       else if (is_dot(p))\n \tret /= path();\n+#if SLASHSLASH_IS_ROOTNAME\n+      else if (p._M_type() == _Type::_Root_dir)\n+\tret += '/'; // using operator/=('/') would replace whole of ret\n+#endif\n       else\n \tret /= p;\n     }"}, {"sha": "40af1551eeb9840468eb5eeb8feecf3859e828a8", "filename": "libstdc++-v3/testsuite/27_io/filesystem/path/decompose/root_directory.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b462958e2db15dc6f55ed361d47cdbc62d64ea0/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fdecompose%2Froot_directory.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b462958e2db15dc6f55ed361d47cdbc62d64ea0/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fdecompose%2Froot_directory.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fdecompose%2Froot_directory.cc?ref=2b462958e2db15dc6f55ed361d47cdbc62d64ea0", "patch": "@@ -35,7 +35,11 @@ test01()\n   path p2 = \"/foo/bar\";\n   VERIFY( p2.root_directory() == path(\"/\") );\n   path p3 = \"//foo\";\n+#ifdef __CYGWIN__\n+  VERIFY( p3.root_directory() == path() );\n+#else\n   VERIFY( p3.root_directory() == path(\"/\") );\n+#endif\n   path p4 = \"///foo\";\n   VERIFY( p4.root_directory() == path(\"/\") );\n }"}]}