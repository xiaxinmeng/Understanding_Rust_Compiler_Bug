{"sha": "683d6ff954e871028b34e8bd5e9fdda491ec2cbf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjgzZDZmZjk1NGU4NzEwMjhiMzRlOGJkNWU5ZmRkYTQ5MWVjMmNiZg==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2008-02-25T23:59:44Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2008-02-25T23:59:44Z"}, "message": "c-common.c (match_case_to_enum_1): Add appropriate OPT_W* parameter to warning.\n\n2008-02-26  Manuel Lopez-Ibanez <manu@gcc.gnu.org>\n\n\t* c-common.c (match_case_to_enum_1): Add appropriate\n\tOPT_W* parameter to warning.\n\t(c_do_switch_warnings): Likewise.\n\t* c-typeck.c (warning_init): Add one more parameter following\n\t'warning' function.\n\t(push_init_level): Update call to warning_init.\n\t(pop_init_level): Likewise.\n\t(add_pending_init): Likewise.\n\t(output_init_element: Likewise.\ncp/\n\t* typeck.c (build_class_member_access_expr): Add appropriate\n\tOPT_W* parameter to warning.\n\t(build_reinterpret_cast_1): Likewise.\n\t* name-lookup.c (push_overloaded_decl): Likewise.\ntestsuite/\n\t* gcc.dg/Wswitch-enum-error.c: New.\n\t* gcc.dg/Wswitch-error.c: New.\n\t* gcc.dg/20011021-1.c: Use two directives to match two different\n\tmessages.\n\nFrom-SVN: r132649", "tree": {"sha": "64878ef154456615c954564cc936b478852e6c76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/64878ef154456615c954564cc936b478852e6c76"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/683d6ff954e871028b34e8bd5e9fdda491ec2cbf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/683d6ff954e871028b34e8bd5e9fdda491ec2cbf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/683d6ff954e871028b34e8bd5e9fdda491ec2cbf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/683d6ff954e871028b34e8bd5e9fdda491ec2cbf/comments", "author": null, "committer": null, "parents": [{"sha": "369dcbd9d2f7d4577f689b46ee3028bc7949049c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/369dcbd9d2f7d4577f689b46ee3028bc7949049c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/369dcbd9d2f7d4577f689b46ee3028bc7949049c"}], "stats": {"total": 235, "additions": 206, "deletions": 29}, "files": [{"sha": "b8c7161f521025277a436a45ece030df58ec3ca0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/683d6ff954e871028b34e8bd5e9fdda491ec2cbf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/683d6ff954e871028b34e8bd5e9fdda491ec2cbf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=683d6ff954e871028b34e8bd5e9fdda491ec2cbf", "patch": "@@ -1,3 +1,15 @@\n+2008-02-26  Manuel Lopez-Ibanez <manu@gcc.gnu.org>\n+\n+\t* c-common.c (match_case_to_enum_1): Add appropriate\n+\tOPT_W* parameter to warning.\n+\t(c_do_switch_warnings): Likewise.\n+\t* c-typeck.c (warning_init): Add one more parameter following\n+\t'warning' function.\n+\t(push_init_level): Update call to warning_init.\n+\t(pop_init_level): Likewise.\n+\t(add_pending_init): Likewise.\n+\t(output_init_element: Likewise.\n+\n 2008-02-26  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \n \tPR 28322"}, {"sha": "2b8790d0729558f431348fc4e844f1dbc1301c1e", "filename": "gcc/c-common.c", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/683d6ff954e871028b34e8bd5e9fdda491ec2cbf/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/683d6ff954e871028b34e8bd5e9fdda491ec2cbf/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=683d6ff954e871028b34e8bd5e9fdda491ec2cbf", "patch": "@@ -4329,10 +4329,12 @@ match_case_to_enum_1 (tree key, tree type, tree label)\n \t      TREE_INT_CST_HIGH (key), TREE_INT_CST_LOW (key));\n \n   if (TYPE_NAME (type) == 0)\n-    warning (0, \"%Jcase value %qs not in enumerated type\",\n+    warning (warn_switch ? OPT_Wswitch : OPT_Wswitch_enum,\n+\t     \"%Jcase value %qs not in enumerated type\",\n \t     CASE_LABEL (label), buf);\n   else\n-    warning (0, \"%Jcase value %qs not in enumerated type %qT\",\n+    warning (warn_switch ? OPT_Wswitch : OPT_Wswitch_enum,\n+\t     \"%Jcase value %qs not in enumerated type %qT\",\n \t     CASE_LABEL (label), buf, type);\n }\n \n@@ -4384,6 +4386,7 @@ c_do_switch_warnings (splay_tree cases, location_t switch_location,\n   splay_tree_node default_node;\n   splay_tree_node node;\n   tree chain;\n+  int saved_warn_switch;\n \n   if (!warn_switch && !warn_switch_enum && !warn_switch_default)\n     return;\n@@ -4453,7 +4456,13 @@ c_do_switch_warnings (splay_tree cases, location_t switch_location,\n       if (cond && tree_int_cst_compare (cond, value))\n \tcontinue;\n \n-      warning (0, \"%Henumeration value %qE not handled in switch\",\n+      /* If there is a default_node, the only relevant option is\n+\t Wswitch-enum. Otherwise, if both are enabled then we prefer\n+\t to warn using -Wswitch because -Wswitch is enabled by -Wall\n+\t while -Wswitch-enum is explicit.  */\n+      warning ((default_node || !warn_switch) \n+\t       ? OPT_Wswitch_enum : OPT_Wswitch,\n+\t       \"%Henumeration value %qE not handled in switch\",\n \t       &switch_location, TREE_PURPOSE (chain));\n     }\n \n@@ -4465,7 +4474,17 @@ c_do_switch_warnings (splay_tree cases, location_t switch_location,\n      we should have marked both the lower bound and upper bound of\n      every disjoint case label, with CASE_LOW_SEEN and CASE_HIGH_SEEN\n      above.  This scan also resets those fields.  */\n+\n+  /* If there is a default_node, the only relevant option is\n+     Wswitch-enum. Otherwise, if both are enabled then we prefer\n+     to warn using -Wswitch because -Wswitch is enabled by -Wall\n+     while -Wswitch-enum is explicit.  */\n+  saved_warn_switch = warn_switch;\n+  if (default_node)\n+    warn_switch = 0;\n   splay_tree_foreach (cases, match_case_to_enum, type);\n+  warn_switch = saved_warn_switch;\n+\n }\n \n /* Finish an expression taking the address of LABEL (an"}, {"sha": "94d4eea8dc32d3232e5629847688ea36dbbf7210", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 19, "deletions": 16, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/683d6ff954e871028b34e8bd5e9fdda491ec2cbf/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/683d6ff954e871028b34e8bd5e9fdda491ec2cbf/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=683d6ff954e871028b34e8bd5e9fdda491ec2cbf", "patch": "@@ -91,7 +91,7 @@ static void push_string (const char *);\n static void push_member_name (tree);\n static int spelling_length (void);\n static char *print_spelling (char *);\n-static void warning_init (const char *);\n+static void warning_init (int, const char *);\n static tree digest_init (tree, tree, bool, int);\n static void output_init_element (tree, bool, tree, tree, int);\n static void output_pending_init_elements (int);\n@@ -4636,19 +4636,21 @@ pedwarn_init (const char *msgid)\n     pedwarn (\"(near initialization for %qs)\", ofwhat);\n }\n \n-/* Issue a warning for a bad initializer component.\n-   MSGID identifies the message.\n-   The component name is taken from the spelling stack.  */\n+/* Issue a warning for a bad initializer component.  \n+\n+   OPT is the OPT_W* value corresponding to the warning option that\n+   controls this warning.  MSGID identifies the message.  The\n+   component name is taken from the spelling stack.  */\n \n static void\n-warning_init (const char *msgid)\n+warning_init (int opt, const char *msgid)\n {\n   char *ofwhat;\n \n-  warning (0, \"%s\", _(msgid));\n+  warning (opt, \"%s\", _(msgid));\n   ofwhat = print_spelling ((char *) alloca (spelling_length () + 1));\n   if (*ofwhat)\n-    warning (0, \"(near initialization for %qs)\", ofwhat);\n+    warning (opt, \"(near initialization for %qs)\", ofwhat);\n }\n \f\n /* If TYPE is an array type and EXPR is a parenthesized string\n@@ -5415,7 +5417,7 @@ push_init_level (int implicit)\n   if (implicit == 1 && warn_missing_braces && !missing_braces_mentioned)\n     {\n       missing_braces_mentioned = 1;\n-      warning_init (\"missing braces around initializer\");\n+      warning_init (OPT_Wmissing_braces, \"missing braces around initializer\");\n     }\n \n   if (TREE_CODE (constructor_type) == RECORD_TYPE\n@@ -5476,7 +5478,7 @@ push_init_level (int implicit)\n   else\n     {\n       if (constructor_type != error_mark_node)\n-\twarning_init (\"braces around scalar initializer\");\n+\twarning_init (0, \"braces around scalar initializer\");\n       constructor_fields = constructor_type;\n       constructor_unfilled_fields = constructor_type;\n     }\n@@ -5562,7 +5564,8 @@ pop_init_level (int implicit)\n \tif (constructor_unfilled_fields && !constructor_designated)\n \t  {\n \t    push_member_name (constructor_unfilled_fields);\n-\t    warning_init (\"missing initializer\");\n+\t    warning_init (OPT_Wmissing_field_initializers,\n+                          \"missing initializer\");\n \t    RESTORE_SPELLING_DEPTH (constructor_depth);\n \t  }\n     }\n@@ -5846,9 +5849,9 @@ add_pending_init (tree purpose, tree value)\n \t  else\n \t    {\n \t      if (TREE_SIDE_EFFECTS (p->value))\n-\t\twarning_init (\"initialized field with side-effects overwritten\");\n+\t\twarning_init (0, \"initialized field with side-effects overwritten\");\n \t      else if (warn_override_init)\n-\t\twarning_init (\"initialized field overwritten\");\n+\t\twarning_init (OPT_Woverride_init, \"initialized field overwritten\");\n \t      p->value = value;\n \t      return;\n \t    }\n@@ -5869,9 +5872,9 @@ add_pending_init (tree purpose, tree value)\n \t  else\n \t    {\n \t      if (TREE_SIDE_EFFECTS (p->value))\n-\t\twarning_init (\"initialized field with side-effects overwritten\");\n+\t\twarning_init (0, \"initialized field with side-effects overwritten\");\n \t      else if (warn_override_init)\n-\t\twarning_init (\"initialized field overwritten\");\n+\t\twarning_init (OPT_Woverride_init, \"initialized field overwritten\");\n \t      p->value = value;\n \t      return;\n \t    }\n@@ -6343,9 +6346,9 @@ output_init_element (tree value, bool strict_string, tree type, tree field,\n     {\n       if (TREE_SIDE_EFFECTS (VEC_last (constructor_elt,\n \t\t\t\t       constructor_elements)->value))\n-\twarning_init (\"initialized field with side-effects overwritten\");\n+\twarning_init (0, \"initialized field with side-effects overwritten\");\n       else if (warn_override_init)\n-\twarning_init (\"initialized field overwritten\");\n+\twarning_init (OPT_Woverride_init, \"initialized field overwritten\");\n \n       /* We can have just one union field set.  */\n       constructor_elements = 0;"}, {"sha": "2738490e78ccce40f636f62d7d50da7a9c7f029b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/683d6ff954e871028b34e8bd5e9fdda491ec2cbf/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/683d6ff954e871028b34e8bd5e9fdda491ec2cbf/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=683d6ff954e871028b34e8bd5e9fdda491ec2cbf", "patch": "@@ -1,3 +1,10 @@\n+2008-02-26  Manuel Lopez-Ibanez <manu@gcc.gnu.org>\n+\t\n+\t* typeck.c (build_class_member_access_expr): Add appropriate\n+\tOPT_W* parameter to warning.\n+\t(build_reinterpret_cast_1): Likewise.\n+\t* name-lookup.c (push_overloaded_decl): Likewise.\n+\t\n 2008-02-25  Paolo Carlini  <pcarlini@suse.de>\n \n         PR c++/35333"}, {"sha": "74a25bd2a3127f975dee5175021a65f1077367f4", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/683d6ff954e871028b34e8bd5e9fdda491ec2cbf/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/683d6ff954e871028b34e8bd5e9fdda491ec2cbf/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=683d6ff954e871028b34e8bd5e9fdda491ec2cbf", "patch": "@@ -1919,7 +1919,7 @@ push_overloaded_decl (tree decl, int flags, bool is_friend)\n \t  if (IS_AGGR_TYPE (t) && warn_shadow\n \t      && (! DECL_IN_SYSTEM_HEADER (decl)\n \t\t  || ! DECL_IN_SYSTEM_HEADER (old)))\n-\t    warning (0, \"%q#D hides constructor for %q#T\", decl, t);\n+\t    warning (OPT_Wshadow, \"%q#D hides constructor for %q#T\", decl, t);\n \t  old = NULL_TREE;\n \t}\n       else if (is_overloaded_fn (old))"}, {"sha": "bb8d71cbbfc4848d1635b2c459ace9c16baeb603", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/683d6ff954e871028b34e8bd5e9fdda491ec2cbf/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/683d6ff954e871028b34e8bd5e9fdda491ec2cbf/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=683d6ff954e871028b34e8bd5e9fdda491ec2cbf", "patch": "@@ -1934,9 +1934,11 @@ build_class_member_access_expr (tree object, tree member,\n \t  && !DECL_FIELD_IS_BASE (member)\n \t  && !skip_evaluation)\n \t{\n-\t  warning (0, \"invalid access to non-static data member %qD of NULL object\",\n-\t\t   member);\n-\t  warning (0, \"(perhaps the %<offsetof%> macro was used incorrectly)\");\n+\t  warning (OPT_Winvalid_offsetof, \n+                   \"invalid access to non-static data member %qD \"\n+                   \" of NULL object\", member);\n+\t  warning (OPT_Winvalid_offsetof, \n+                   \"(perhaps the %<offsetof%> macro was used incorrectly)\");\n \t}\n \n       /* If MEMBER is from an anonymous aggregate, we have converted\n@@ -5337,9 +5339,8 @@ build_reinterpret_cast_1 (tree type, tree expr, bool c_cast_p,\n \t  && COMPLETE_TYPE_P (TREE_TYPE (type))\n \t  && COMPLETE_TYPE_P (TREE_TYPE (intype))\n \t  && TYPE_ALIGN (TREE_TYPE (type)) > TYPE_ALIGN (TREE_TYPE (intype)))\n-\twarning (0, \"cast from %qT to %qT increases required alignment of \"\n-\t\t \"target type\",\n-\t\t intype, type);\n+\twarning (OPT_Wcast_align, \"cast from %qT to %qT \"\n+                 \"increases required alignment of target type\", intype, type);\n \n       /* We need to strip nops here, because the front end likes to\n \t create (int *)&a for array-to-pointer decay, instead of &a[0].  */"}, {"sha": "074e43621b66da0f40503e64cc70ff1d79f1056d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/683d6ff954e871028b34e8bd5e9fdda491ec2cbf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/683d6ff954e871028b34e8bd5e9fdda491ec2cbf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=683d6ff954e871028b34e8bd5e9fdda491ec2cbf", "patch": "@@ -1,3 +1,10 @@\n+2008-02-26  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n+\n+\t* gcc.dg/Wswitch-enum-error.c: New.\n+\t* gcc.dg/Wswitch-error.c: New.\n+\t* gcc.dg/20011021-1.c: Use two directives to match two different\n+\tmessages.\n+\t\n 2008-02-26  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \t\n \tPR 28322"}, {"sha": "dc998c8af6186d4facb39aac156a8bd3725daf62", "filename": "gcc/testsuite/gcc.dg/20011021-1.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/683d6ff954e871028b34e8bd5e9fdda491ec2cbf/gcc%2Ftestsuite%2Fgcc.dg%2F20011021-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/683d6ff954e871028b34e8bd5e9fdda491ec2cbf/gcc%2Ftestsuite%2Fgcc.dg%2F20011021-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20011021-1.c?ref=683d6ff954e871028b34e8bd5e9fdda491ec2cbf", "patch": "@@ -27,7 +27,8 @@ struct multilevel\n    char *f;\n };\n \n-struct t T0 = { 1 };\t\t/* { dg-warning \"(missing|near) init\" } */\n+struct t T0 = { 1 };\t\t/* { dg-warning \"missing init\" } */\n+/* { dg-warning \"near init\" \"near init\" { target *-*-* } 30 } */\n struct t T1 = { .a = 1 };\t/* { dg-bogus \"(missing|near) init\" } */\n \n union u U0 = { 1 };\t\t/* { dg-warning \"initialization of union\" } */\n@@ -36,8 +37,9 @@ union u U1 = { .i = 1 };\t/* { dg-bogus \"initialization of union\" } */\n struct multilevel M =\n {\n   12,\n-  { .b = 3 },\t\t\t/* { dg-bogus \"(missing|near) init\" } */\n+  { .b = 3 },\t\t\t/* { dg-bogus \"missing init\" } */\n   { 4 },\t\t\t/* { dg-warning \"initialization of union\" } */\n   { .n = 9 },\t\t\t/* { dg-bogus \"initialization of union\" } */\n   /* \"string here\" */\n-};\t\t\t\t/* { dg-warning \"(missing|near) init\" } */\n+};\t\t\t\t/* { dg-warning \"missing init\" } */\n+/* { dg-warning \"near init\" \"near init\" { target *-*-* } 44 } */"}, {"sha": "ae9a2c78353870124d25b03f371b57c99329071a", "filename": "gcc/testsuite/gcc.dg/Wswitch-enum-error.c", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/683d6ff954e871028b34e8bd5e9fdda491ec2cbf/gcc%2Ftestsuite%2Fgcc.dg%2FWswitch-enum-error.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/683d6ff954e871028b34e8bd5e9fdda491ec2cbf/gcc%2Ftestsuite%2Fgcc.dg%2FWswitch-enum-error.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWswitch-enum-error.c?ref=683d6ff954e871028b34e8bd5e9fdda491ec2cbf", "patch": "@@ -0,0 +1,63 @@\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-Werror=switch-enum -Wswitch\" } */\n+\n+enum e { e1, e2 };\n+\n+int\n+foo (int i, int j, enum e ei, enum e ej, enum e ek, enum e el,\n+     enum e em, enum e en, enum e eo, enum e ep)\n+{\n+  switch (i)\n+    {\n+    case 1: return 1;\n+    case 2: return 2;\n+    }\n+  switch (j)\n+    {\n+    case 3: return 4;\n+    case 4: return 3;\n+    default: break;\n+    }\n+  switch (ei) /* { dg-warning \"enumeration value 'e1' not handled in switch\" \"enum e1\" } */\n+    { /* { dg-warning \"enumeration value 'e2' not handled in switch\" \"enum e2\" { target *-*-* } 22 } */\n+    }\n+  switch (ej) /* { dg-error \"enumeration value 'e1' not handled in switch\" \"enum e1\" } */\n+    { /* { dg-error \"enumeration value 'e2' not handled in switch\" \"enum e2\" { target *-*-* } 25 } */\n+    default: break;\n+    }\n+  switch (ek) /* { dg-warning \"enumeration value 'e2' not handled in switch\" \"enum e2\" } */\n+    {\n+    case e1: return 1;\n+    }\n+  switch (el) /* { dg-error \"enumeration value 'e2' not handled in switch\" \"enum e2\" } */\n+    {\n+    case e1: return 1;\n+    default: break;\n+    }\n+  switch (em)\n+    {\n+    case e1: return 1;\n+    case e2: return 2;\n+    }\n+  switch (en)\n+    {\n+    case e1: return 1;\n+    case e2: return 2;\n+    default: break;\n+    }\n+  switch (eo)\n+    {\n+    case e1: return 1;\n+    case e2: return 2;\n+    case 3: return 3; /* { dg-warning \"case value '3' not in enumerated type 'enum e'\" \"excess 3\" } */\n+    }\n+  switch (ep)\n+    {\n+    case e1: return 1;\n+    case e2: return 2;\n+    case 3: return 3; /* { dg-error \"case value '3' not in enumerated type 'enum e'\" \"excess 3\" } */\n+    default: break;\n+    }\n+  return 0;\n+}"}, {"sha": "4aa0c2a15b52c623f9143cdcb4772988b4426d81", "filename": "gcc/testsuite/gcc.dg/Wswitch-error.c", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/683d6ff954e871028b34e8bd5e9fdda491ec2cbf/gcc%2Ftestsuite%2Fgcc.dg%2FWswitch-error.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/683d6ff954e871028b34e8bd5e9fdda491ec2cbf/gcc%2Ftestsuite%2Fgcc.dg%2FWswitch-error.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWswitch-error.c?ref=683d6ff954e871028b34e8bd5e9fdda491ec2cbf", "patch": "@@ -0,0 +1,63 @@\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-Werror=switch -Wswitch-enum\" } */\n+\n+enum e { e1, e2 };\n+\n+int\n+foo (int i, int j, enum e ei, enum e ej, enum e ek, enum e el,\n+     enum e em, enum e en, enum e eo, enum e ep)\n+{\n+  switch (i)\n+    {\n+    case 1: return 1;\n+    case 2: return 2;\n+    }\n+  switch (j)\n+    {\n+    case 3: return 4;\n+    case 4: return 3;\n+    default: break;\n+    }\n+  switch (ei) /* { dg-error \"enumeration value 'e1' not handled in switch\" \"enum e1\" } */\n+    { /* { dg-error \"enumeration value 'e2' not handled in switch\" \"enum e2\" { target *-*-* } 22 } */\n+    }\n+  switch (ej) /* { dg-warning \"enumeration value 'e1' not handled in switch\" \"enum e1\" } */\n+    { /* { dg-warning \"enumeration value 'e2' not handled in switch\" \"enum e2\" { target *-*-* } 25 } */\n+    default: break;\n+    }\n+  switch (ek) /* { dg-error \"enumeration value 'e2' not handled in switch\" \"enum e2\" } */\n+    {\n+    case e1: return 1;\n+    }\n+  switch (el) /* { dg-warning \"enumeration value 'e2' not handled in switch\" \"enum e2\" } */\n+    {\n+    case e1: return 1;\n+    default: break;\n+    }\n+  switch (em)\n+    {\n+    case e1: return 1;\n+    case e2: return 2;\n+    }\n+  switch (en)\n+    {\n+    case e1: return 1;\n+    case e2: return 2;\n+    default: break;\n+    }\n+  switch (eo)\n+    {\n+    case e1: return 1;\n+    case e2: return 2;\n+    case 3: return 3; /* { dg-error \"case value '3' not in enumerated type 'enum e'\" \"excess 3\" } */\n+    }\n+  switch (ep)\n+    {\n+    case e1: return 1;\n+    case e2: return 2;\n+    case 3: return 3; /* { dg-warning \"case value '3' not in enumerated type 'enum e'\" \"excess 3\" } */\n+    default: break;\n+    }\n+  return 0;\n+}"}]}