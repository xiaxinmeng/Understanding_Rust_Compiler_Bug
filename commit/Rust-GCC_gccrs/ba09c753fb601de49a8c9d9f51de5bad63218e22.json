{"sha": "ba09c753fb601de49a8c9d9f51de5bad63218e22", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmEwOWM3NTNmYjYwMWRlNDlhOGM5ZDlmNTFkZTViYWQ2MzIxOGUyMg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-12-24T12:37:56Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-12-24T12:37:56Z"}, "message": "(attrib): Allow expressions instead of constants.\n\nFrom-SVN: r6299", "tree": {"sha": "21205484087dfb838fbefa0891d68f76be98ea6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/21205484087dfb838fbefa0891d68f76be98ea6f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ba09c753fb601de49a8c9d9f51de5bad63218e22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba09c753fb601de49a8c9d9f51de5bad63218e22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba09c753fb601de49a8c9d9f51de5bad63218e22", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba09c753fb601de49a8c9d9f51de5bad63218e22/comments", "author": null, "committer": null, "parents": [{"sha": "fe873240671995cde2757988dd17b3431d908ede", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe873240671995cde2757988dd17b3431d908ede", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe873240671995cde2757988dd17b3431d908ede"}], "stats": {"total": 22, "additions": 12, "deletions": 10}, "files": [{"sha": "f9874418827213113b0aa7bd4cae8ee78a6efdeb", "filename": "gcc/c-parse.in", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba09c753fb601de49a8c9d9f51de5bad63218e22/gcc%2Fc-parse.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba09c753fb601de49a8c9d9f51de5bad63218e22/gcc%2Fc-parse.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.in?ref=ba09c753fb601de49a8c9d9f51de5bad63218e22", "patch": "@@ -1,5 +1,5 @@\n /* YACC parser for C syntax and for Objective C.  -*-c-*-\n-   Copyright (C) 1987, 1988, 1989, 1992 Free Software Foundation, Inc.\n+   Copyright (C) 1987, 1988, 1989, 1992, 1993 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -1072,31 +1072,33 @@ attrib\n \t  $$ = $1; }\n     | TYPE_QUAL\n     | IDENTIFIER '(' IDENTIFIER ')'\n-\t{ /* If not \"mode (m)\", then issue warning.  */\n-\t  if (strcmp (IDENTIFIER_POINTER ($1), \"mode\") != 0)\n+\t{ /* If not \"mode (m)\" or \"aligned\", then issue warning. \n+\t     If \"aligned\", this will later produce an error in decl_attributes\n+\t     since an identifier is not a valid constant, but we want to give\n+\t     an error instead of a warning when the attribute name is\n+\t     recognized but has an improper argument.  */\n+\t  if (strcmp (IDENTIFIER_POINTER ($1), \"mode\") != 0\n+\t      && strcmp (IDENTIFIER_POINTER ($1), \"aligned\") != 0)\n \t    {\n \t      warning (\"`%s' attribute directive ignored\",\n \t\t       IDENTIFIER_POINTER ($1));\n \t      $$ = $1;\n \t    }\n \t  else\n \t    $$ = tree_cons ($1, $3, NULL_TREE); }\n-    | IDENTIFIER '(' CONSTANT ')'\n+    | IDENTIFIER '(' expr_no_commas ')'\n \t{ /* if not \"aligned(n)\", then issue warning */\n-\t  if (strcmp (IDENTIFIER_POINTER ($1), \"aligned\") != 0\n-\t      || TREE_CODE ($3) != INTEGER_CST)\n+\t  if (strcmp (IDENTIFIER_POINTER ($1), \"aligned\") != 0)\n \t    {\n \t      warning (\"`%s' attribute directive ignored\",\n \t\t       IDENTIFIER_POINTER ($1));\n \t      $$ = $1;\n \t    }\n \t  else\n \t    $$ = tree_cons ($1, $3, NULL_TREE); }\n-    | IDENTIFIER '(' IDENTIFIER ',' CONSTANT ',' CONSTANT ')'\n+    | IDENTIFIER '(' IDENTIFIER ',' expr_no_commas ',' expr_no_commas ')'\n \t{ /* if not \"format(...)\", then issue warning */\n-\t  if (strcmp (IDENTIFIER_POINTER ($1), \"format\") != 0\n-\t      || TREE_CODE ($5) != INTEGER_CST\n-\t      || TREE_CODE ($7) != INTEGER_CST)\n+\t  if (strcmp (IDENTIFIER_POINTER ($1), \"format\") != 0)\n \t    {\n \t      warning (\"`%s' attribute directive ignored\",\n \t\t       IDENTIFIER_POINTER ($1));"}]}