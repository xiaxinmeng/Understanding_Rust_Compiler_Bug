{"sha": "d385563f6384d3b223832709a91b469989025c86", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDM4NTU2M2Y2Mzg0ZDNiMjIzODMyNzA5YTkxYjQ2OTk4OTAyNWM4Ng==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2009-12-11T22:04:56Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2009-12-11T22:04:56Z"}, "message": "re PR libstdc++/42352 (-std=c++0x reference binding problem)\n\n2009-12-11  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR libstdc++/42352\n\t* include/bits/list.tcc (sort): Use _GLIBCXX_MOVE for list::splice\n\tand list::merge calls.\n\t* testsuite/23_containers/list/operations/42352.cc: New.\n\nFrom-SVN: r155180", "tree": {"sha": "8ceda119aad15db27f6c78695c31004f6be6a6dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ceda119aad15db27f6c78695c31004f6be6a6dd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d385563f6384d3b223832709a91b469989025c86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d385563f6384d3b223832709a91b469989025c86", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d385563f6384d3b223832709a91b469989025c86", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d385563f6384d3b223832709a91b469989025c86/comments", "author": null, "committer": null, "parents": [{"sha": "dcea1b2f86047a9b234fb742bdb3ce268262dfa7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcea1b2f86047a9b234fb742bdb3ce268262dfa7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dcea1b2f86047a9b234fb742bdb3ce268262dfa7"}], "stats": {"total": 223, "additions": 151, "deletions": 72}, "files": [{"sha": "ebf8931fc159dacd944098b0060694b3aa06012e", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d385563f6384d3b223832709a91b469989025c86/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d385563f6384d3b223832709a91b469989025c86/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d385563f6384d3b223832709a91b469989025c86", "patch": "@@ -1,3 +1,10 @@\n+2009-12-11  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR libstdc++/42352\n+\t* include/bits/list.tcc (sort): Use _GLIBCXX_MOVE for list::splice\n+\tand list::merge calls.\n+\t* testsuite/23_containers/list/operations/42352.cc: New.\n+\n 2009-12-11  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR libstdc++/22634, DR 539 [Ready]"}, {"sha": "c461a41c80dd3358ee1413d3601ba904a00ba784", "filename": "libstdc++-v3/include/bits/list.tcc", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d385563f6384d3b223832709a91b469989025c86/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flist.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d385563f6384d3b223832709a91b469989025c86/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flist.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flist.tcc?ref=d385563f6384d3b223832709a91b469989025c86", "patch": "@@ -312,13 +312,13 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \n         do\n \t  {\n-\t    __carry.splice(__carry.begin(), *this, begin());\n+\t    __carry.splice(__carry.begin(), _GLIBCXX_MOVE(*this), begin());\n \n \t    for(__counter = &__tmp[0];\n \t\t__counter != __fill && !__counter->empty();\n \t\t++__counter)\n \t      {\n-\t\t__counter->merge(__carry);\n+\t\t__counter->merge(_GLIBCXX_MOVE(__carry));\n \t\t__carry.swap(*__counter);\n \t      }\n \t    __carry.swap(*__counter);\n@@ -328,7 +328,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \twhile ( !empty() );\n \n         for (__counter = &__tmp[1]; __counter != __fill; ++__counter)\n-          __counter->merge(*(__counter - 1));\n+          __counter->merge(_GLIBCXX_MOVE(*(__counter - 1)));\n         swap( *(__fill - 1) );\n       }\n     }\n@@ -389,13 +389,13 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \n \t    do\n \t      {\n-\t\t__carry.splice(__carry.begin(), *this, begin());\n+\t\t__carry.splice(__carry.begin(), _GLIBCXX_MOVE(*this), begin());\n \n \t\tfor(__counter = &__tmp[0];\n \t\t    __counter != __fill && !__counter->empty();\n \t\t    ++__counter)\n \t\t  {\n-\t\t    __counter->merge(__carry, __comp);\n+\t\t    __counter->merge(_GLIBCXX_MOVE(__carry), __comp);\n \t\t    __carry.swap(*__counter);\n \t\t  }\n \t\t__carry.swap(*__counter);\n@@ -405,7 +405,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \t    while ( !empty() );\n \n \t    for (__counter = &__tmp[1]; __counter != __fill; ++__counter)\n-\t      __counter->merge(*(__counter - 1), __comp);\n+\t      __counter->merge(_GLIBCXX_MOVE(*(__counter - 1)), __comp);\n \t    swap(*(__fill - 1));\n \t  }\n       }"}, {"sha": "eff597ea70a15d817f0ae3fefad9a7337011a55c", "filename": "libstdc++-v3/include/parallel/numeric", "status": "modified", "additions": 72, "deletions": 66, "changes": 138, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d385563f6384d3b223832709a91b469989025c86/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fnumeric", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d385563f6384d3b223832709a91b469989025c86/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fnumeric", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fnumeric?ref=d385563f6384d3b223832709a91b469989025c86", "patch": "@@ -80,8 +80,7 @@ namespace __parallel\n                         __gnu_parallel::sequential_tag()); }\n \n   // Parallel algorithm for random access iterators.\n-  template<typename __RAIter, typename _Tp,\n-           typename _BinaryOperation>\n+  template<typename __RAIter, typename _Tp, typename _BinaryOperation>\n     _Tp\n     __accumulate_switch(__RAIter __begin, __RAIter __end, \n                       _Tp __init, _BinaryOperation __binary_op, \n@@ -99,12 +98,12 @@ namespace __parallel\n             __my_selector;\n           __gnu_parallel::\n             __for_each_template_random_access_ed(__begin, __end,\n-                                            __gnu_parallel::_Nothing(),\n-                                            __my_selector,\n-                                            __gnu_parallel::\n-                                            __accumulate_binop_reduct\n-                                            <_BinaryOperation>(__binary_op),\n-                                            __res, __res, -1);\n+\t\t\t\t\t\t __gnu_parallel::_Nothing(),\n+\t\t\t\t\t\t __my_selector,\n+\t\t\t\t\t\t __gnu_parallel::\n+\t\t\t\t\t\t __accumulate_binop_reduct\n+\t\t\t\t\t       <_BinaryOperation>(__binary_op),\n+\t\t\t\t\t\t __res, __res, -1);\n           return __res;\n         }\n       else\n@@ -123,8 +122,8 @@ namespace __parallel\n       typedef typename _IteratorTraits::iterator_category _IteratorCategory;\n \n       return __accumulate_switch(__begin, __end, __init,\n-                               __gnu_parallel::_Plus<_Tp, _ValueType>(),\n-                               _IteratorCategory(), __parallelism_tag);\n+\t\t\t\t __gnu_parallel::_Plus<_Tp, _ValueType>(),\n+\t\t\t\t _IteratorCategory(), __parallelism_tag);\n     }\n \n   template<typename _IIter, typename _Tp>\n@@ -136,8 +135,8 @@ namespace __parallel\n       typedef typename _IteratorTraits::iterator_category _IteratorCategory;\n \n       return __accumulate_switch(__begin, __end, __init,\n-                               __gnu_parallel::_Plus<_Tp, _ValueType>(),\n-                               _IteratorCategory());\n+\t\t\t\t __gnu_parallel::_Plus<_Tp, _ValueType>(),\n+\t\t\t\t _IteratorCategory());\n     }\n \n   template<typename _IIter, typename _Tp, typename _BinaryOperation>\n@@ -149,7 +148,7 @@ namespace __parallel\n       typedef iterator_traits<_IIter> _IteratorTraits;\n       typedef typename _IteratorTraits::iterator_category _IteratorCategory;\n       return __accumulate_switch(__begin, __end, __init, __binary_op, \n-                               _IteratorCategory(), __parallelism_tag);\n+\t\t\t\t _IteratorCategory(), __parallelism_tag);\n     }\n \n   template<typename _IIter, typename _Tp, typename _BinaryOperation>\n@@ -160,7 +159,7 @@ namespace __parallel\n       typedef iterator_traits<_IIter> _IteratorTraits;\n       typedef typename _IteratorTraits::iterator_category _IteratorCategory;\n       return __accumulate_switch(__begin, __end, __init, __binary_op, \n-                               _IteratorCategory());\n+\t\t\t\t _IteratorCategory());\n     }\n \n \n@@ -188,14 +187,14 @@ namespace __parallel\n            typename _Tp, typename _BinaryFunction1, typename _BinaryFunction2>\n     _Tp\n     __inner_product_switch(_RAIter1 __first1,\n-                         _RAIter1 __last1,\n-                         _RAIter2 __first2, _Tp __init,\n-                         _BinaryFunction1 __binary_op1,\n-                         _BinaryFunction2 __binary_op2,\n-                         random_access_iterator_tag,\n-                         random_access_iterator_tag,\n-                         __gnu_parallel::_Parallelism __parallelism_tag\n-                         = __gnu_parallel::parallel_unbalanced)\n+\t\t\t   _RAIter1 __last1,\n+\t\t\t   _RAIter2 __first2, _Tp __init,\n+\t\t\t   _BinaryFunction1 __binary_op1,\n+\t\t\t   _BinaryFunction2 __binary_op2,\n+\t\t\t   random_access_iterator_tag,\n+\t\t\t   random_access_iterator_tag,\n+\t\t\t   __gnu_parallel::_Parallelism __parallelism_tag\n+\t\t\t   = __gnu_parallel::parallel_unbalanced)\n     {\n       if (_GLIBCXX_PARALLEL_CONDITION((__last1 - __first1)\n                                       >= __gnu_parallel::_Settings::get().\n@@ -224,13 +223,12 @@ namespace __parallel\n            typename _IteratorTag1, typename _IteratorTag2>\n     inline _Tp\n     __inner_product_switch(_IIter1 __first1, _IIter1 __last1, \n-                         _IIter2 __first2, _Tp __init, \n-                         _BinaryFunction1 __binary_op1,\n-                         _BinaryFunction2 __binary_op2, \n-                         _IteratorTag1, _IteratorTag2)\n-    { return inner_product(__first1, __last1, __first2, __init,\n-                           __binary_op1, __binary_op2,\n-                           __gnu_parallel::sequential_tag()); }\n+\t\t\t   _IIter2 __first2, _Tp __init, \n+\t\t\t   _BinaryFunction1 __binary_op1,\n+\t\t\t   _BinaryFunction2 __binary_op2, \n+\t\t\t   _IteratorTag1, _IteratorTag2)\n+    { return inner_product(__first1, __last1, __first2, __init, __binary_op1,\n+\t\t\t   __binary_op2, __gnu_parallel::sequential_tag()); }\n \n   template<typename _IIter1, typename _IIter2, typename _Tp,\n            typename _BinaryFunction1, typename _BinaryFunction2>\n@@ -246,10 +244,10 @@ namespace __parallel\n       typedef iterator_traits<_IIter2> _TraitsType2;\n       typedef typename _TraitsType2::iterator_category _IteratorCategory2;\n \n-      return __inner_product_switch(\n-               __first1, __last1, __first2, __init, __binary_op1,\n-               __binary_op2, _IteratorCategory1(), _IteratorCategory2(),\n-               __parallelism_tag);\n+      return __inner_product_switch(__first1, __last1, __first2, __init,\n+\t\t\t\t    __binary_op1, __binary_op2,\n+\t\t\t\t    _IteratorCategory1(), _IteratorCategory2(),\n+\t\t\t\t    __parallelism_tag);\n     }\n \n   template<typename _IIter1, typename _IIter2, typename _Tp,\n@@ -265,9 +263,10 @@ namespace __parallel\n       typedef iterator_traits<_IIter2> _TraitsType2;\n       typedef typename _TraitsType2::iterator_category _IteratorCategory2;\n \n-      return __inner_product_switch(\n-               __first1, __last1, __first2, __init, __binary_op1, __binary_op2,\n-               _IteratorCategory1(), _IteratorCategory2());\n+      return __inner_product_switch(__first1, __last1, __first2, __init,\n+\t\t\t\t    __binary_op1, __binary_op2,\n+\t\t\t\t    _IteratorCategory1(),\n+\t\t\t\t    _IteratorCategory2());\n     }\n \n   template<typename _IIter1, typename _IIter2, typename _Tp>\n@@ -319,7 +318,7 @@ namespace __parallel\n \n   // Sequential fallback.\n   template<typename _IIter, typename _OutputIterator,\n-           typename _BinaryOperation>\n+\t   typename _BinaryOperation>\n     inline _OutputIterator\n     partial_sum(_IIter __begin, _IIter __end, _OutputIterator __result,\n                 _BinaryOperation __bin_op, __gnu_parallel::sequential_tag)\n@@ -331,23 +330,24 @@ namespace __parallel\n            typename _IteratorTag2>\n     inline _OutputIterator\n     __partial_sum_switch(_IIter __begin, _IIter __end,\n-                       _OutputIterator __result, _BinaryOperation __bin_op,\n-                       _IteratorTag1, _IteratorTag2)\n+\t\t\t _OutputIterator __result, _BinaryOperation __bin_op,\n+\t\t\t _IteratorTag1, _IteratorTag2)\n     { return _GLIBCXX_STD_P::partial_sum(__begin, __end, __result, __bin_op); }\n \n   // Parallel algorithm for random access iterators.\n   template<typename _IIter, typename _OutputIterator,\n            typename _BinaryOperation>\n     _OutputIterator\n     __partial_sum_switch(_IIter __begin, _IIter __end,\n-                       _OutputIterator __result, _BinaryOperation __bin_op,\n-                       random_access_iterator_tag, random_access_iterator_tag)\n+\t\t\t _OutputIterator __result, _BinaryOperation __bin_op,\n+\t\t\t random_access_iterator_tag,\n+\t\t\t random_access_iterator_tag)\n     {\n       if (_GLIBCXX_PARALLEL_CONDITION(\n             static_cast<__gnu_parallel::_SequenceIndex>(__end - __begin)\n             >= __gnu_parallel::_Settings::get().partial_sum_minimal_n))\n         return __gnu_parallel::__parallel_partial_sum(__begin, __end,\n-                                                    __result, __bin_op);\n+\t\t\t\t\t\t      __result, __bin_op);\n       else\n         return partial_sum(__begin, __end, __result, __bin_op,\n                            __gnu_parallel::sequential_tag());\n@@ -376,7 +376,7 @@ namespace __parallel\n       typedef typename _OTraitsType::iterator_category _OIterCategory;\n \n       return __partial_sum_switch(__begin, __end, __result, __binary_op,\n-                                _IIteratorCategory(), _OIterCategory());\n+\t\t\t\t  _IIteratorCategory(), _OIterCategory());\n     }\n \n   // Sequential fallback.\n@@ -393,30 +393,33 @@ namespace __parallel\n     adjacent_difference(_IIter __begin, _IIter __end,\n                         _OutputIterator __result, _BinaryOperation __bin_op,\n                         __gnu_parallel::sequential_tag)\n-    { return _GLIBCXX_STD_P::adjacent_difference(\n-                               __begin, __end, __result, __bin_op); }\n+    { return _GLIBCXX_STD_P::adjacent_difference(__begin, __end,\n+\t\t\t\t\t\t __result, __bin_op); }\n \n   // Sequential fallback for input iterator case.\n   template<typename _IIter, typename _OutputIterator,\n            typename _BinaryOperation, typename _IteratorTag1,\n            typename _IteratorTag2>\n     inline _OutputIterator\n-    __adjacent_difference_switch(\n-      _IIter __begin, _IIter __end, _OutputIterator __result,\n-      _BinaryOperation __bin_op, _IteratorTag1, _IteratorTag2)\n+    __adjacent_difference_switch(_IIter __begin, _IIter __end,\n+\t\t\t\t _OutputIterator __result,\n+\t\t\t\t _BinaryOperation __bin_op, _IteratorTag1,\n+\t\t\t\t _IteratorTag2)\n     { return adjacent_difference(__begin, __end, __result, __bin_op,\n                                  __gnu_parallel::sequential_tag()); }\n \n   // Parallel algorithm for random access iterators.\n   template<typename _IIter, typename _OutputIterator,\n            typename _BinaryOperation>\n     _OutputIterator\n-    __adjacent_difference_switch(\n-      _IIter __begin, _IIter __end, _OutputIterator __result,\n-      _BinaryOperation __bin_op,\n-      random_access_iterator_tag, random_access_iterator_tag,\n-      __gnu_parallel::_Parallelism __parallelism_tag\n-                               = __gnu_parallel::parallel_balanced)\n+    __adjacent_difference_switch(_IIter __begin, _IIter __end,\n+\t\t\t\t _OutputIterator __result,\n+\t\t\t\t _BinaryOperation __bin_op,\n+\t\t\t\t random_access_iterator_tag,\n+\t\t\t\t random_access_iterator_tag,\n+\t\t\t\t __gnu_parallel::_Parallelism\n+\t\t\t\t __parallelism_tag\n+\t\t\t\t = __gnu_parallel::parallel_balanced)\n     {\n       if (_GLIBCXX_PARALLEL_CONDITION(\n             static_cast<__gnu_parallel::_SequenceIndex>(__end - __begin)\n@@ -451,9 +454,9 @@ namespace __parallel\n     {\n       typedef iterator_traits<_IIter> _TraitsType;\n       typedef typename _TraitsType::value_type _ValueType;\n-      return adjacent_difference(\n-               __begin, __end, __result, std::minus<_ValueType>(),\n-               __parallelism_tag);\n+      return adjacent_difference(__begin, __end, __result,\n+\t\t\t\t std::minus<_ValueType>(),\n+\t\t\t\t __parallelism_tag);\n     }\n \n   template<typename _IIter, typename _OutputIterator>\n@@ -464,7 +467,7 @@ namespace __parallel\n       typedef iterator_traits<_IIter> _TraitsType;\n       typedef typename _TraitsType::value_type _ValueType;\n       return adjacent_difference(__begin, __end, __result,\n-                                 std::minus<_ValueType>());\n+\t\t\t\t std::minus<_ValueType>());\n     }\n \n   template<typename _IIter, typename _OutputIterator,\n@@ -480,26 +483,29 @@ namespace __parallel\n       typedef iterator_traits<_OutputIterator> _OTraitsType;\n       typedef typename _OTraitsType::iterator_category _OIterCategory;\n \n-      return __adjacent_difference_switch(\n-               __begin, __end, __result, __binary_op,\n-               _IIteratorCategory(), _OIterCategory(), __parallelism_tag);\n+      return __adjacent_difference_switch(__begin, __end, __result,\n+\t\t\t\t\t  __binary_op,\n+\t\t\t\t\t  _IIteratorCategory(),\n+\t\t\t\t\t  _OIterCategory(),\n+\t\t\t\t\t  __parallelism_tag);\n     }\n \n   template<typename _IIter, typename _OutputIterator,\n-           typename _BinaryOperation>\n+\t   typename _BinaryOperation>\n     inline _OutputIterator\n     adjacent_difference(_IIter __begin, _IIter __end,\n-                        _OutputIterator __result, _BinaryOperation __binary_op)\n+\t\t\t_OutputIterator __result, _BinaryOperation __binary_op)\n     {\n       typedef iterator_traits<_IIter> _ITraitsType;\n       typedef typename _ITraitsType::iterator_category _IIteratorCategory;\n \n       typedef iterator_traits<_OutputIterator> _OTraitsType;\n       typedef typename _OTraitsType::iterator_category _OIterCategory;\n \n-      return __adjacent_difference_switch(\n-               __begin, __end, __result, __binary_op,\n-               _IIteratorCategory(), _OIterCategory());\n+      return __adjacent_difference_switch(__begin, __end, __result,\n+\t\t\t\t\t  __binary_op,\n+\t\t\t\t\t  _IIteratorCategory(),\n+\t\t\t\t\t  _OIterCategory());\n     }\n } // end namespace\n } // end namespace"}, {"sha": "a61071acc101ff49b7c824e05f44525286ba4873", "filename": "libstdc++-v3/testsuite/23_containers/list/operations/42352.cc", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d385563f6384d3b223832709a91b469989025c86/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Foperations%2F42352.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d385563f6384d3b223832709a91b469989025c86/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Foperations%2F42352.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Foperations%2F42352.cc?ref=d385563f6384d3b223832709a91b469989025c86", "patch": "@@ -0,0 +1,66 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without Pred the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <list>\n+#include <testsuite_hooks.h>\n+\n+// PR libstdc++/42352\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::list<int> l{3, 2, 4, 1, 5, 9, 0, 8, 6, 7};\n+\n+  l.sort();\n+\n+  for (auto it = l.begin(); it != l.end(); ++it)\n+    {\n+      static int nn = 0;\n+      VERIFY( *it == nn++ );\n+    }\n+}\n+\n+void test02()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::list<int> l{3, 2, 4, 1, 5, 9, 0, 8, 6, 7};\n+\n+  struct compare\n+  {\n+    bool\n+    operator()(int const& one, int const& two) const\n+    { return one > two; }\n+  };\n+\n+  l.sort(compare());\n+\n+  for (auto it = l.begin(); it != l.end(); ++it)\n+    {\n+      static int nn = 9;\n+      VERIFY( *it == nn-- );\n+    }\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+  return 0;\n+}"}]}