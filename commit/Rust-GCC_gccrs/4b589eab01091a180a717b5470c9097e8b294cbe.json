{"sha": "4b589eab01091a180a717b5470c9097e8b294cbe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGI1ODllYWIwMTA5MWExODBhNzE3YjU0NzBjOTA5N2U4YjI5NGNiZQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2004-01-13T23:14:04Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2004-01-13T23:14:04Z"}, "message": "lang.c (java_estimate_num_insns_1): Fix bug in MODIFY_EXPR cost estimation.\n\n\n\t* lang.c (java_estimate_num_insns_1): Fix bug in MODIFY_EXPR cost\n\testimation.\n\t* c-common.c (c_estimate_num_insns_1):  Fix bug in MODIFY_EXPR\n\tcost estimation.\n\t* expr.c (MOVE_RATIO, CLEAR_RATIO): Move to ...\n\t* expr.h (MOVE_RATIO, CLEAR_RATIO): ... here.\n\nFrom-SVN: r75821", "tree": {"sha": "81a0f72673be5558699c49acd88285a2fa5ce0f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/81a0f72673be5558699c49acd88285a2fa5ce0f6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4b589eab01091a180a717b5470c9097e8b294cbe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b589eab01091a180a717b5470c9097e8b294cbe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b589eab01091a180a717b5470c9097e8b294cbe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b589eab01091a180a717b5470c9097e8b294cbe/comments", "author": null, "committer": null, "parents": [{"sha": "25c3f7c8b94b62cc83adf1c24bb323ff1c46416b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25c3f7c8b94b62cc83adf1c24bb323ff1c46416b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25c3f7c8b94b62cc83adf1c24bb323ff1c46416b"}], "stats": {"total": 78, "additions": 46, "deletions": 32}, "files": [{"sha": "2bcbf160355f25ef1353a3baab84cdd58ebd503d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b589eab01091a180a717b5470c9097e8b294cbe/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b589eab01091a180a717b5470c9097e8b294cbe/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4b589eab01091a180a717b5470c9097e8b294cbe", "patch": "@@ -1,3 +1,10 @@\n+2004-01-14  Jan Hubicka  <jh@suse.cz>\n+\n+\t* c-common.c (c_estimate_num_insns_1):  Fix bug in MODIFY_EXPR\n+\tcost estimation.\n+\t* expr.c (MOVE_RATIO, CLEAR_RATIO): Move to ...\n+\t* expr.h (MOVE_RATIO, CLEAR_RATIO): ... here.\n+\n 2004-01-13  Bernardo Innocenti  <bernie@develer.com>\n \n \t* config/m68k/netbsd-elf.h (REGISTER_NAMES): Add missing \"argptr\""}, {"sha": "dcd540b1d8539e8e11e794944ef97b63b4ee1650", "filename": "gcc/c-common.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b589eab01091a180a717b5470c9097e8b294cbe/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b589eab01091a180a717b5470c9097e8b294cbe/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=4b589eab01091a180a717b5470c9097e8b294cbe", "patch": "@@ -5770,13 +5770,14 @@ c_estimate_num_insns_1 (tree *tp, int *walk_subtrees, void *data)\n     case MODIFY_EXPR:\n     case CONSTRUCTOR:\n       {\n-\tint size = int_size_in_bytes (TREE_TYPE (x));\n+\tHOST_WIDE_INT size;\n \n-\tif (!size || size > MOVE_MAX_PIECES)\n+\tsize = int_size_in_bytes (TREE_TYPE (x));\n+\n+\tif (size < 0 || size > MOVE_MAX_PIECES * MOVE_RATIO)\n \t  *count += 10;\n \telse\n-\t  *count += 2 * (size + MOVE_MAX - 1) / MOVE_MAX;\n-\treturn NULL;\n+\t  *count += ((size + MOVE_MAX_PIECES - 1) / MOVE_MAX_PIECES);\n       }\n       break;\n     /* Few special cases of expensive operations.  This is usefull"}, {"sha": "b5af15893f10190ee9b3cbaf119c0a157901de5a", "filename": "gcc/expr.c", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b589eab01091a180a717b5470c9097e8b294cbe/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b589eab01091a180a717b5470c9097e8b294cbe/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=4b589eab01091a180a717b5470c9097e8b294cbe", "patch": "@@ -185,37 +185,13 @@ static char direct_store[NUM_MACHINE_MODES];\n \n static bool float_extend_from_mem[NUM_MACHINE_MODES][NUM_MACHINE_MODES];\n \n-/* If a memory-to-memory move would take MOVE_RATIO or more simple\n-   move-instruction sequences, we will do a movstr or libcall instead.  */\n-\n-#ifndef MOVE_RATIO\n-#if defined (HAVE_movstrqi) || defined (HAVE_movstrhi) || defined (HAVE_movstrsi) || defined (HAVE_movstrdi) || defined (HAVE_movstrti)\n-#define MOVE_RATIO 2\n-#else\n-/* If we are optimizing for space (-Os), cut down the default move ratio.  */\n-#define MOVE_RATIO (optimize_size ? 3 : 15)\n-#endif\n-#endif\n-\n /* This macro is used to determine whether move_by_pieces should be called\n    to perform a structure copy.  */\n #ifndef MOVE_BY_PIECES_P\n #define MOVE_BY_PIECES_P(SIZE, ALIGN) \\\n   (move_by_pieces_ninsns (SIZE, ALIGN) < (unsigned int) MOVE_RATIO)\n #endif\n \n-/* If a clear memory operation would take CLEAR_RATIO or more simple\n-   move-instruction sequences, we will do a clrstr or libcall instead.  */\n-\n-#ifndef CLEAR_RATIO\n-#if defined (HAVE_clrstrqi) || defined (HAVE_clrstrhi) || defined (HAVE_clrstrsi) || defined (HAVE_clrstrdi) || defined (HAVE_clrstrti)\n-#define CLEAR_RATIO 2\n-#else\n-/* If we are optimizing for space, cut down the default clear ratio.  */\n-#define CLEAR_RATIO (optimize_size ? 3 : 15)\n-#endif\n-#endif\n-\n /* This macro is used to determine whether clear_by_pieces should be\n    called to clear storage.  */\n #ifndef CLEAR_BY_PIECES_P"}, {"sha": "000011340e58e6a63a98f67865f3f23a8dbf60d1", "filename": "gcc/expr.h", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b589eab01091a180a717b5470c9097e8b294cbe/gcc%2Fexpr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b589eab01091a180a717b5470c9097e8b294cbe/gcc%2Fexpr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.h?ref=4b589eab01091a180a717b5470c9097e8b294cbe", "patch": "@@ -66,6 +66,30 @@ enum expand_modifier {EXPAND_NORMAL = 0, EXPAND_STACK_PARM = 2, EXPAND_SUM,\n    more information.  */\n #define OK_DEFER_POP (inhibit_defer_pop -= 1)\n \f\n+/* If a memory-to-memory move would take MOVE_RATIO or more simple\n+   move-instruction sequences, we will do a movstr or libcall instead.  */\n+\n+#ifndef MOVE_RATIO\n+#if defined (HAVE_movstrqi) || defined (HAVE_movstrhi) || defined (HAVE_movstrsi) || defined (HAVE_movstrdi) || defined (HAVE_movstrti)\n+#define MOVE_RATIO 2\n+#else\n+/* If we are optimizing for space (-Os), cut down the default move ratio.  */\n+#define MOVE_RATIO (optimize_size ? 3 : 15)\n+#endif\n+#endif\n+\n+/* If a clear memory operation would take CLEAR_RATIO or more simple\n+   move-instruction sequences, we will do a clrstr or libcall instead.  */\n+\n+#ifndef CLEAR_RATIO\n+#if defined (HAVE_clrstrqi) || defined (HAVE_clrstrhi) || defined (HAVE_clrstrsi) || defined (HAVE_clrstrdi) || defined (HAVE_clrstrti)\n+#define CLEAR_RATIO 2\n+#else\n+/* If we are optimizing for space, cut down the default clear ratio.  */\n+#define CLEAR_RATIO (optimize_size ? 3 : 15)\n+#endif\n+#endif\n+\f\n enum direction {none, upward, downward};\n \n /* Structure to record the size of a sequence of arguments"}, {"sha": "fd6e32181bde664ce57ee898bce69b1e79c4ef99", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b589eab01091a180a717b5470c9097e8b294cbe/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b589eab01091a180a717b5470c9097e8b294cbe/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=4b589eab01091a180a717b5470c9097e8b294cbe", "patch": "@@ -1,3 +1,8 @@\n+2004-01-14  Jan Hubicka  <jh@suse.cz>\n+\n+\t* lang.c (java_estimate_num_insns_1): Fix bug in MODIFY_EXPR cost\n+\testimation.\n+\n 2004-01-09  Mark Mitchell  <mark@codesourcery.com>\n \n \t* java-tree.h (java_expand_expr): Change prototype."}, {"sha": "0fe68def937ede453a09f124c0d23e4c93a3f27a", "filename": "gcc/java/lang.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b589eab01091a180a717b5470c9097e8b294cbe/gcc%2Fjava%2Flang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b589eab01091a180a717b5470c9097e8b294cbe/gcc%2Fjava%2Flang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang.c?ref=4b589eab01091a180a717b5470c9097e8b294cbe", "patch": "@@ -1134,13 +1134,14 @@ java_estimate_num_insns_1 (tree *tp, int *walk_subtrees, void *data)\n     case MODIFY_EXPR:\n     case CONSTRUCTOR:\n       {\n-\tint size = int_size_in_bytes (TREE_TYPE (x));\n+\tHOST_WIDE_INT size;\n \n-\tif (!size || size > MOVE_MAX_PIECES)\n+\tsize = int_size_in_bytes (TREE_TYPE (x));\n+\n+\tif (size < 0 || size > MOVE_MAX_PIECES * MOVE_RATIO)\n \t  *count += 10;\n \telse\n-\t  *count += 2 * (size + MOVE_MAX - 1) / MOVE_MAX;\n-\treturn NULL;\n+\t  *count += ((size + MOVE_MAX_PIECES - 1) / MOVE_MAX_PIECES);\n       }\n       break;\n     /* Few special cases of expensive operations.  This is usefull"}]}