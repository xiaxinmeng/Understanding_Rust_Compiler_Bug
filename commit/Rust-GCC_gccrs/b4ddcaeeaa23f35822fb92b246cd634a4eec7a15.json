{"sha": "b4ddcaeeaa23f35822fb92b246cd634a4eec7a15", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjRkZGNhZWVhYTIzZjM1ODIyZmI5MmIyNDZjZDYzNGE0ZWVjN2ExNQ==", "commit": {"author": {"name": "Kai Tietz", "email": "ktietz@redhat.com", "date": "2011-04-02T17:08:33Z"}, "committer": {"name": "Kai Tietz", "email": "ktietz@gcc.gnu.org", "date": "2011-04-02T17:08:33Z"}, "message": "i386.c (ix86_is_msabi_thiscall): New helper function.\n\n2011-04-02  Kai Tietz  <ktietz@redhat.com>\n\n\t* i386.c (ix86_is_msabi_thiscall): New helper function.\n\t(ix86_is_type_thiscall): New helper function.\n\t(ix86_comp_type_attributes): Handle thiscall for method-functions\n\tspecial.\n\t(init_cumulative_args): Likewise.\n\t(find_drap_reg): Likewise.\n\t(ix86_static_chain): Likewise.\n\t(x86_this_parameter): Likewise.\n\t(x86_output_mi_thunk): Likewise.\n\nFrom-SVN: r171890", "tree": {"sha": "d0b52dec49f9a8db370bdf6d3459a6779a64893a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d0b52dec49f9a8db370bdf6d3459a6779a64893a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b4ddcaeeaa23f35822fb92b246cd634a4eec7a15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4ddcaeeaa23f35822fb92b246cd634a4eec7a15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4ddcaeeaa23f35822fb92b246cd634a4eec7a15", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4ddcaeeaa23f35822fb92b246cd634a4eec7a15/comments", "author": null, "committer": null, "parents": [{"sha": "8ffac116df93baf38130a6a7de2d419b04dae660", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ffac116df93baf38130a6a7de2d419b04dae660", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ffac116df93baf38130a6a7de2d419b04dae660"}], "stats": {"total": 86, "additions": 71, "deletions": 15}, "files": [{"sha": "cc26623adaadbd8d24a37421c892a7222e5064c6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4ddcaeeaa23f35822fb92b246cd634a4eec7a15/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4ddcaeeaa23f35822fb92b246cd634a4eec7a15/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b4ddcaeeaa23f35822fb92b246cd634a4eec7a15", "patch": "@@ -1,3 +1,15 @@\n+2011-04-02  Kai Tietz  <ktietz@redhat.com>\n+\n+\t* i386.c (ix86_is_msabi_thiscall): New helper function.\n+\t(ix86_is_type_thiscall): New helper function.\n+\t(ix86_comp_type_attributes): Handle thiscall for method-functions\n+\tspecial.\n+\t(init_cumulative_args): Likewise.\n+\t(find_drap_reg): Likewise.\n+\t(ix86_static_chain): Likewise.\n+\t(x86_this_parameter): Likewise.\n+\t(x86_output_mi_thunk): Likewise.\n+\n 2011-04-01  Olivier Hainque  <hainque@adacore.com>\n             Nicolas Setton  <setton@adacore.com>\n             Eric Botcazou  <ebotcazou@adacore.com>"}, {"sha": "be151e9625fcef5717d158eeb65a0ae88c9d88eb", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 59, "deletions": 15, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4ddcaeeaa23f35822fb92b246cd634a4eec7a15/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4ddcaeeaa23f35822fb92b246cd634a4eec7a15/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=b4ddcaeeaa23f35822fb92b246cd634a4eec7a15", "patch": "@@ -5436,6 +5436,40 @@ ix86_handle_cconv_attribute (tree *node, tree name,\n   return NULL_TREE;\n }\n \n+/* This function checks if the method-function has default __thiscall\n+   calling-convention for 32-bit msabi.\n+   It returns true if TYPE is of kind METHOD_TYPE, no stdarg function,\n+   and the MS_ABI 32-bit is used.  Otherwise it returns false.  */\n+\n+static bool\n+ix86_is_msabi_thiscall (const_tree type)\n+{\n+  if (TARGET_64BIT || ix86_function_type_abi (type) != MS_ABI\n+      || TREE_CODE (type) != METHOD_TYPE || stdarg_p (type))\n+    return false;\n+  /* Check for different calling-conventions.  */\n+  if (lookup_attribute (\"cdecl\", TYPE_ATTRIBUTES (type))\n+      || lookup_attribute (\"stdcall\", TYPE_ATTRIBUTES (type))\n+      || lookup_attribute (\"fastcall\", TYPE_ATTRIBUTES (type))\n+      || lookup_attribute (\"regparm\", TYPE_ATTRIBUTES (type))\n+      || lookup_attribute (\"sseregparm\", TYPE_ATTRIBUTES (type)))\n+    return false;\n+  return true;\n+}\n+\n+/* This function checks if the thiscall attribute is set for the TYPE,\n+   or if it is an method-type with default thiscall convention.\n+   It returns true if function match, otherwise false is returned.  */\n+\n+static bool\n+ix86_is_type_thiscall (const_tree type)\n+{\n+  if (lookup_attribute (\"thiscall\", TYPE_ATTRIBUTES (type))\n+      || ix86_is_msabi_thiscall (type))\n+    return true;\n+  return false;\n+}\n+\n /* Return 0 if the attributes for two types are incompatible, 1 if they\n    are compatible, and 2 if they are nearly compatible (which causes a\n    warning to be generated).  */\n@@ -5444,7 +5478,8 @@ static int\n ix86_comp_type_attributes (const_tree type1, const_tree type2)\n {\n   /* Check for mismatch of non-default calling convention.  */\n-  const char *const rtdstr = TARGET_RTD ? \"cdecl\" : \"stdcall\";\n+  bool is_thiscall = ix86_is_msabi_thiscall (type1);\n+  const char *const rtdstr = TARGET_RTD ? (is_thiscall ? \"thiscall\" : \"cdecl\") : \"stdcall\";\n \n   if (TREE_CODE (type1) != FUNCTION_TYPE\n       && TREE_CODE (type1) != METHOD_TYPE)\n@@ -5463,9 +5498,18 @@ ix86_comp_type_attributes (const_tree type1, const_tree type2)\n     return 0;\n \n   /* Check for mismatched thiscall types.  */\n-  if (!lookup_attribute (\"thiscall\", TYPE_ATTRIBUTES (type1))\n-      != !lookup_attribute (\"thiscall\", TYPE_ATTRIBUTES (type2)))\n-    return 0;\n+  if (is_thiscall && !TARGET_RTD)\n+    {\n+      if (!lookup_attribute (\"cdecl\", TYPE_ATTRIBUTES (type1))\n+\t  != !lookup_attribute (\"cdecl\", TYPE_ATTRIBUTES (type2)))\n+\treturn 0;\n+    }\n+  else if (!is_thiscall || TARGET_RTD)\n+    {\n+      if (!lookup_attribute (\"thiscall\", TYPE_ATTRIBUTES (type1))\n+\t  != !lookup_attribute (\"thiscall\", TYPE_ATTRIBUTES (type2)))\n+\treturn 0;\n+    }\n \n   /* Check for mismatched return types (cdecl vs stdcall).  */\n   if (!lookup_attribute (rtdstr, TYPE_ATTRIBUTES (type1))\n@@ -5500,7 +5544,7 @@ ix86_function_regparm (const_tree type, const_tree decl)\n   if (lookup_attribute (\"fastcall\", TYPE_ATTRIBUTES (type)))\n     return 2;\n \n-  if (lookup_attribute (\"thiscall\", TYPE_ATTRIBUTES (type)))\n+  if (ix86_is_type_thiscall (type))\n     return 1;\n \n   /* Use register calling convention for local functions when possible.  */\n@@ -5666,7 +5710,7 @@ ix86_return_pops_args (tree fundecl, tree funtype, int size)\n          variable args.  */\n       if (lookup_attribute (\"stdcall\", TYPE_ATTRIBUTES (funtype))\n \t  || lookup_attribute (\"fastcall\", TYPE_ATTRIBUTES (funtype))\n-          || lookup_attribute (\"thiscall\", TYPE_ATTRIBUTES (funtype)))\n+          || ix86_is_type_thiscall (funtype))\n \trtd = 1;\n \n       if (rtd && ! stdarg_p (funtype))\n@@ -6004,7 +6048,7 @@ init_cumulative_args (CUMULATIVE_ARGS *cum,  /* Argument info to initialize */\n \t else look for regparm information.  */\n       if (fntype)\n \t{\n-\t  if (lookup_attribute (\"thiscall\", TYPE_ATTRIBUTES (fntype)))\n+\t  if (ix86_is_type_thiscall (fntype))\n \t    {\n \t      cum->nregs = 1;\n \t      cum->fastcall = 1; /* Same first register as in fastcall.  */\n@@ -7441,8 +7485,10 @@ ix86_function_arg_boundary (enum machine_mode mode, const_tree type)\n \t  warned = true;\n \t  inform (input_location,\n \t\t  \"The ABI for passing parameters with %d-byte\"\n-\t\t  \" alignment has changed in GCC 4.6\",\n-\t\t  align / BITS_PER_UNIT);\n+\t\t  \" alignment has changed in GCC 4.6 (mode:%u, %d saved\",\n+\t\t  align / BITS_PER_UNIT,\n+\t\t  ix86_compat_function_arg_boundary (mode, type, saved_align),\n+\t\t  mode, saved_align);\n \t}\n     }\n \n@@ -9798,8 +9844,7 @@ find_drap_reg (void)\n       if (ix86_function_regparm (TREE_TYPE (decl), decl) <= 2\n \t  && !lookup_attribute (\"fastcall\",\n     \t\t\t\tTYPE_ATTRIBUTES (TREE_TYPE (decl)))\n-\t  && !lookup_attribute (\"thiscall\",\n-    \t\t\t\tTYPE_ATTRIBUTES (TREE_TYPE (decl))))\n+\t  && !ix86_is_type_thiscall (TREE_TYPE (decl)))\n \treturn CX_REG;\n       else\n \treturn DI_REG;\n@@ -23249,7 +23294,7 @@ ix86_static_chain (const_tree fndecl, bool incoming_p)\n \t     us with EAX for the static chain.  */\n \t  regno = AX_REG;\n \t}\n-      else if (lookup_attribute (\"thiscall\", TYPE_ATTRIBUTES (fntype)))\n+      else if (ix86_is_type_thiscall (fntype))\n \t{\n \t  /* Thiscall functions use ecx for arguments, which leaves\n \t     us with EAX for the static chain.  */\n@@ -29806,7 +29851,7 @@ x86_this_parameter (tree function)\n \n       if (lookup_attribute (\"fastcall\", TYPE_ATTRIBUTES (type)))\n \tregno = aggr ? DX_REG : CX_REG;\n-      else if (lookup_attribute (\"thiscall\", TYPE_ATTRIBUTES (type)))\n+      else if (ix86_is_type_thiscall (type))\n         {\n \t  regno = CX_REG;\n \t  if (aggr)\n@@ -29925,8 +29970,7 @@ x86_output_mi_thunk (FILE *file,\n \t  int tmp_regno = CX_REG;\n \t  if (lookup_attribute (\"fastcall\",\n \t\t\t\tTYPE_ATTRIBUTES (TREE_TYPE (function)))\n-\t      || lookup_attribute (\"thiscall\",\n-\t\t\t\t   TYPE_ATTRIBUTES (TREE_TYPE (function))))\n+\t      || ix86_is_type_thiscall (TREE_TYPE (function)))\n \t    tmp_regno = AX_REG;\n \t  tmp = gen_rtx_REG (SImode, tmp_regno);\n \t}"}]}