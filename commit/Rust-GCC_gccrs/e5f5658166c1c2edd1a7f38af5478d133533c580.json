{"sha": "e5f5658166c1c2edd1a7f38af5478d133533c580", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTVmNTY1ODE2NmMxYzJlZGQxYTdmMzhhZjU0NzhkMTMzNTMzYzU4MA==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2017-04-06T18:49:43Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2017-04-06T18:49:43Z"}, "message": "re PR target/79733 (ICE in int_mode_for_mode, at stor-layout.c:406)\n\n\tPR target/79733\n\t* config/i386/i386.c (ix86_expand_builtin)\n\t<case IX86_BUILTIN_K{,OR}TEST{C,Z}{8,16,32,64}>: Determine insn operand\n\tmode from insn data. Convert operands to insn operand mode.\n\tCopy operands that don't satisfy insn predicate to a register.\n\ntestsuite/ChangeLog:\n\n\tPR target/79733\n\t* gcc.target/i386/pr79733.c: New test.\n\nFrom-SVN: r246739", "tree": {"sha": "46afed961484ff56c0450e86e008508abded97f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/46afed961484ff56c0450e86e008508abded97f1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e5f5658166c1c2edd1a7f38af5478d133533c580", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5f5658166c1c2edd1a7f38af5478d133533c580", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5f5658166c1c2edd1a7f38af5478d133533c580", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5f5658166c1c2edd1a7f38af5478d133533c580/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a5211c800e15b37a509b5235858fce510cd6f93a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5211c800e15b37a509b5235858fce510cd6f93a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5211c800e15b37a509b5235858fce510cd6f93a"}], "stats": {"total": 109, "additions": 71, "deletions": 38}, "files": [{"sha": "31b7a8d4c0a6c3a9b415904eb5b8825fc23de200", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5f5658166c1c2edd1a7f38af5478d133533c580/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5f5658166c1c2edd1a7f38af5478d133533c580/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e5f5658166c1c2edd1a7f38af5478d133533c580", "patch": "@@ -1,3 +1,11 @@\n+2017-04-06  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/79733\n+\t* config/i386/i386.c (ix86_expand_builtin)\n+\t<case IX86_BUILTIN_K{,OR}TEST{C,Z}{8,16,32,64}>: Determine insn operand\n+\tmode from insn data. Convert operands to insn operand mode.\n+\tCopy operands that don't satisfy insn predicate to a register.\n+\n 2017-04-06  Sam Thursfield  <sam.thursfield@codethink.co.uk>\n \n \t* config/rs6000/x-aix: Increase memory limit for genautomata on AIX."}, {"sha": "5b27b8d1f6fdd9a63d3ac7735a495921bcba5fed", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 35, "deletions": 38, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5f5658166c1c2edd1a7f38af5478d133533c580/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5f5658166c1c2edd1a7f38af5478d133533c580/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=e5f5658166c1c2edd1a7f38af5478d133533c580", "patch": "@@ -37752,118 +37752,115 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget,\n \n     case IX86_BUILTIN_KTESTC8:\n       icode = CODE_FOR_ktestqi;\n-      mode0 = QImode;\n-      mode1 = CCCmode;\n+      mode3 = CCCmode;\n       goto kortest;\n \n     case IX86_BUILTIN_KTESTZ8:\n       icode = CODE_FOR_ktestqi;\n-      mode0 = QImode;\n-      mode1 = CCZmode;\n+      mode3 = CCZmode;\n       goto kortest;\n \n     case IX86_BUILTIN_KTESTC16:\n       icode = CODE_FOR_ktesthi;\n-      mode0 = HImode;\n-      mode1 = CCCmode;\n+      mode3 = CCCmode;\n       goto kortest;\n \n     case IX86_BUILTIN_KTESTZ16:\n       icode = CODE_FOR_ktesthi;\n-      mode0 = HImode;\n-      mode1 = CCZmode;\n+      mode3 = CCZmode;\n       goto kortest;\n \n     case IX86_BUILTIN_KTESTC32:\n       icode = CODE_FOR_ktestsi;\n-      mode0 = SImode;\n-      mode1 = CCCmode;\n+      mode3 = CCCmode;\n       goto kortest;\n \n     case IX86_BUILTIN_KTESTZ32:\n       icode = CODE_FOR_ktestsi;\n-      mode0 = SImode;\n-      mode1 = CCZmode;\n+      mode3 = CCZmode;\n       goto kortest;\n \n     case IX86_BUILTIN_KTESTC64:\n       icode = CODE_FOR_ktestdi;\n-      mode0 = DImode;\n-      mode1 = CCCmode;\n+      mode3 = CCCmode;\n       goto kortest;\n \n     case IX86_BUILTIN_KTESTZ64:\n       icode = CODE_FOR_ktestdi;\n-      mode0 = DImode;\n-      mode1 = CCZmode;\n+      mode3 = CCZmode;\n       goto kortest;\n \n     case IX86_BUILTIN_KORTESTC8:\n       icode = CODE_FOR_kortestqi;\n-      mode0 = QImode;\n-      mode1 = CCCmode;\n+      mode3 = CCCmode;\n       goto kortest;\n \n     case IX86_BUILTIN_KORTESTZ8:\n       icode = CODE_FOR_kortestqi;\n-      mode0 = QImode;\n-      mode1 = CCZmode;\n+      mode3 = CCZmode;\n       goto kortest;\n \n     case IX86_BUILTIN_KORTESTC16:\n       icode = CODE_FOR_kortesthi;\n-      mode0 = HImode;\n-      mode1 = CCCmode;\n+      mode3 = CCCmode;\n       goto kortest;\n \n     case IX86_BUILTIN_KORTESTZ16:\n       icode = CODE_FOR_kortesthi;\n-      mode0 = HImode;\n-      mode1 = CCZmode;\n+      mode3 = CCZmode;\n       goto kortest;\n \n     case IX86_BUILTIN_KORTESTC32:\n       icode = CODE_FOR_kortestsi;\n-      mode0 = SImode;\n-      mode1 = CCCmode;\n+      mode3 = CCCmode;\n       goto kortest;\n \n     case IX86_BUILTIN_KORTESTZ32:\n       icode = CODE_FOR_kortestsi;\n-      mode0 = SImode;\n-      mode1 = CCZmode;\n+      mode3 = CCZmode;\n       goto kortest;\n \n     case IX86_BUILTIN_KORTESTC64:\n       icode = CODE_FOR_kortestdi;\n-      mode0 = DImode;\n-      mode1 = CCCmode;\n+      mode3 = CCCmode;\n       goto kortest;\n \n     case IX86_BUILTIN_KORTESTZ64:\n       icode = CODE_FOR_kortestdi;\n-      mode0 = DImode;\n-      mode1 = CCZmode;\n+      mode3 = CCZmode;\n \n     kortest:\n       arg0 = CALL_EXPR_ARG (exp, 0); /* Mask reg src1.  */\n       arg1 = CALL_EXPR_ARG (exp, 1); /* Mask reg src2.  */\n       op0 = expand_normal (arg0);\n       op1 = expand_normal (arg1);\n \n-      op0 = copy_to_reg (op0);\n-      op0 = lowpart_subreg (mode0, op0, GET_MODE (op0));\n-      op1 = copy_to_reg (op1);\n-      op1 = lowpart_subreg (mode0, op1, GET_MODE (op1));\n+      mode0 = insn_data[icode].operand[0].mode;\n+      mode1 = insn_data[icode].operand[1].mode;\n+\n+      if (GET_MODE (op0) != VOIDmode)\n+\top0 = force_reg (GET_MODE (op0), op0);\n+\n+      op0 = gen_lowpart (mode0, op0);\n+\n+      if (!insn_data[icode].operand[0].predicate (op0, mode0))\n+\top0 = copy_to_mode_reg (mode0, op0);\n+\n+      if (GET_MODE (op1) != VOIDmode)\n+\top1 = force_reg (GET_MODE (op1), op1);\n+\n+      op1 = gen_lowpart (mode1, op1);\n+\n+      if (!insn_data[icode].operand[1].predicate (op1, mode1))\n+\top1 = copy_to_mode_reg (mode1, op1);\n \n       target = gen_reg_rtx (QImode);\n-      emit_insn (gen_rtx_SET (target, const0_rtx));\n \n       /* Emit kortest.  */\n       emit_insn (GEN_FCN (icode) (op0, op1));\n       /* And use setcc to return result from flags.  */\n       ix86_expand_setcc (target, EQ,\n-\t\t\t gen_rtx_REG (mode1, FLAGS_REG), const0_rtx);\n+\t\t\t gen_rtx_REG (mode3, FLAGS_REG), const0_rtx);\n       return target;\n \n     case IX86_BUILTIN_GATHERSIV2DF:"}, {"sha": "828d82daac1e42731d5974a5811a6ad79307a08c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5f5658166c1c2edd1a7f38af5478d133533c580/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5f5658166c1c2edd1a7f38af5478d133533c580/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e5f5658166c1c2edd1a7f38af5478d133533c580", "patch": "@@ -1,3 +1,8 @@\n+2017-04-06  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/79733\n+\t* gcc.target/i386/pr79733.c: New test.\n+\n 2017-04-06  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/80298"}, {"sha": "5caec911b01e13ab0d9a472a0a0edeea41b7c4b3", "filename": "gcc/testsuite/gcc.target/i386/pr79733.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5f5658166c1c2edd1a7f38af5478d133533c580/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr79733.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5f5658166c1c2edd1a7f38af5478d133533c580/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr79733.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr79733.c?ref=e5f5658166c1c2edd1a7f38af5478d133533c580", "patch": "@@ -0,0 +1,23 @@\n+/* PR target/79733 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+\n+typedef unsigned short __mmask16;\n+\n+extern __inline int\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_kortestc (__mmask16 __A, __mmask16 __B)\n+{\n+  return (__mmask16) __builtin_ia32_kortestchi ((__mmask16) __A,\n+                                                (__mmask16) __B);\n+}\n+\n+void\n+avx512f_test ()\n+{\n+  volatile __mmask16 k1 = 0;\n+  __mmask16 k2 = 0;\n+  volatile short r;\n+\n+  r = _mm512_kortestc (k1, k2);\n+}"}]}