{"sha": "4745da6ed70907824215abbe37286f55985f5a53", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDc0NWRhNmVkNzA5MDc4MjQyMTVhYmJlMzcyODZmNTU5ODVmNWE1Mw==", "commit": {"author": {"name": "David Li", "email": "davidxl@google.com", "date": "2011-06-09T16:11:23Z"}, "committer": {"name": "Xinliang David Li", "email": "davidxl@gcc.gnu.org", "date": "2011-06-09T16:11:23Z"}, "message": "-fdump-pass implementation\n\nFrom-SVN: r174849", "tree": {"sha": "61850fefd5e1d039c1123285d69754a159ce108a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/61850fefd5e1d039c1123285d69754a159ce108a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4745da6ed70907824215abbe37286f55985f5a53", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4745da6ed70907824215abbe37286f55985f5a53", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4745da6ed70907824215abbe37286f55985f5a53", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4745da6ed70907824215abbe37286f55985f5a53/comments", "author": {"login": "vns-mn", "id": 57157229, "node_id": "MDQ6VXNlcjU3MTU3MjI5", "avatar_url": "https://avatars.githubusercontent.com/u/57157229?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vns-mn", "html_url": "https://github.com/vns-mn", "followers_url": "https://api.github.com/users/vns-mn/followers", "following_url": "https://api.github.com/users/vns-mn/following{/other_user}", "gists_url": "https://api.github.com/users/vns-mn/gists{/gist_id}", "starred_url": "https://api.github.com/users/vns-mn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vns-mn/subscriptions", "organizations_url": "https://api.github.com/users/vns-mn/orgs", "repos_url": "https://api.github.com/users/vns-mn/repos", "events_url": "https://api.github.com/users/vns-mn/events{/privacy}", "received_events_url": "https://api.github.com/users/vns-mn/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bdf67bcba3ccc715da89128200d06140943f33b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdf67bcba3ccc715da89128200d06140943f33b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bdf67bcba3ccc715da89128200d06140943f33b4"}], "stats": {"total": 151, "additions": 144, "deletions": 7}, "files": [{"sha": "fd2912fc7af3503863d6ced9467d27f455f59a4a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4745da6ed70907824215abbe37286f55985f5a53/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4745da6ed70907824215abbe37286f55985f5a53/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4745da6ed70907824215abbe37286f55985f5a53", "patch": "@@ -1,3 +1,13 @@\n+2011-06-09  David Li  <davidxl@google.com>\n+\n+\t* cgraphunit.c (cgraph_finalize_compilation_unit): Pass dump.\n+\t* passes.c (passr_eq): New function.\n+\t(create_pass_tab): New function.\n+\t(pass_traverse): New function.\n+\t(dump_one_pass): New function.\n+\t(dump_pass_list): New function.\n+\t(dump_passes): New function.\n+\n 2011-06-09  David Li  <davidxl@google.com>\n \n \t* tree-complex.c (tree_lower_complex): Gate cleanup."}, {"sha": "66e7117b96eb972c8dd3c237dc4d97b8efb42ce1", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4745da6ed70907824215abbe37286f55985f5a53/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4745da6ed70907824215abbe37286f55985f5a53/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=4745da6ed70907824215abbe37286f55985f5a53", "patch": "@@ -1117,6 +1117,9 @@ cgraph_finalize_compilation_unit (void)\n       fflush (stderr);\n     }\n \n+  if (flag_dump_passes)\n+    dump_passes ();\n+\n   /* Gimplify and lower all functions, compute reachability and\n      remove unreachable nodes.  */\n   cgraph_analyze_functions ();"}, {"sha": "53c4983d1bf789f91f6c80a65902089374c20830", "filename": "gcc/common.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4745da6ed70907824215abbe37286f55985f5a53/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4745da6ed70907824215abbe37286f55985f5a53/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=4745da6ed70907824215abbe37286f55985f5a53", "patch": "@@ -1012,6 +1012,10 @@ fdump-noaddr\n Common Report Var(flag_dump_noaddr)\n Suppress output of addresses in debugging dumps\n \n+fdump-passes\n+Common Var(flag_dump_passes) Init(0)\n+Dump optimization passes\n+\n fdump-unnumbered\n Common Report Var(flag_dump_unnumbered)\n Suppress output of instruction numbers, line number notes and addresses in debugging dumps"}, {"sha": "9062152b4f21ba897e9194b3b7f4b4bc909373f1", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4745da6ed70907824215abbe37286f55985f5a53/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4745da6ed70907824215abbe37286f55985f5a53/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=4745da6ed70907824215abbe37286f55985f5a53", "patch": "@@ -291,6 +291,7 @@ Objective-C and Objective-C++ Dialects}.\n -fdump-translation-unit@r{[}-@var{n}@r{]} @gol\n -fdump-class-hierarchy@r{[}-@var{n}@r{]} @gol\n -fdump-ipa-all -fdump-ipa-cgraph -fdump-ipa-inline @gol\n+-fdump-passes @gol\n -fdump-statistics @gol\n -fdump-tree-all @gol\n -fdump-tree-original@r{[}-@var{n}@r{]}  @gol\n@@ -5071,7 +5072,8 @@ pair seperated by a colon.  The range is inclusive in both ends.  If the range\n is trivial, the number pair can be simplified as a single number.  If the\n function's cgraph node's @var{uid} is falling within one of the specified ranges,\n the @var{pass} is disabled for that function.  The @var{uid} is shown in the\n-function header of a dump file.\n+function header of a dump file, and pass names can be dumped by using option\n+@option{-fdump-passes}.\n \n @item -fdisable-tree-@var{pass}\n @item -fdisable-tree-@var{pass}=@var{range-list}\n@@ -5495,6 +5497,11 @@ Dump after function inlining.\n \n @end table\n \n+@item -fdump-passes\n+@opindex fdump-passes\n+Dump the list of optimization passes that are turned on and off by\n+the current command line options.\n+\n @item -fdump-statistics-@var{option}\n @opindex fdump-statistics\n Enable and control dumping of pass statistics in a separate file.  The"}, {"sha": "4c31a23b850adb77d188053e77f9719e21c6b12f", "filename": "gcc/passes.c", "status": "modified", "additions": 100, "deletions": 6, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4745da6ed70907824215abbe37286f55985f5a53/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4745da6ed70907824215abbe37286f55985f5a53/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=4745da6ed70907824215abbe37286f55985f5a53", "patch": "@@ -478,7 +478,7 @@ passr_eq (const void *p1, const void *p2)\n   return !strcmp (s1->unique_name, s2->unique_name);\n }\n \n-static htab_t pass_name_tab = NULL;\n+static htab_t name_to_pass_map = NULL;\n \n /* Register PASS with NAME.  */\n \n@@ -488,11 +488,11 @@ register_pass_name (struct opt_pass *pass, const char *name)\n   struct pass_registry **slot;\n   struct pass_registry pr;\n \n-  if (!pass_name_tab)\n-    pass_name_tab = htab_create (256, passr_hash, passr_eq, NULL);\n+  if (!name_to_pass_map)\n+    name_to_pass_map = htab_create (256, passr_hash, passr_eq, NULL);\n \n   pr.unique_name = name;\n-  slot = (struct pass_registry **) htab_find_slot (pass_name_tab, &pr, INSERT);\n+  slot = (struct pass_registry **) htab_find_slot (name_to_pass_map, &pr, INSERT);\n   if (!*slot)\n     {\n       struct pass_registry *new_pr;\n@@ -506,16 +506,110 @@ register_pass_name (struct opt_pass *pass, const char *name)\n     return; /* Ignore plugin passes.  */\n }\n \n+/* Map from pass id to canonicalized pass name.  */\n+\n+typedef const char *char_ptr;\n+DEF_VEC_P(char_ptr);\n+DEF_VEC_ALLOC_P(char_ptr, heap);\n+static VEC(char_ptr, heap) *pass_tab = NULL;\n+\n+/* Callback function for traversing NAME_TO_PASS_MAP.  */\n+\n+static int\n+pass_traverse (void **slot, void *data ATTRIBUTE_UNUSED)\n+{\n+  struct pass_registry **p = (struct pass_registry **)slot;\n+  struct opt_pass *pass = (*p)->pass;\n+\n+  gcc_assert (pass->static_pass_number > 0);\n+  gcc_assert (pass_tab);\n+\n+  VEC_replace (char_ptr, pass_tab, pass->static_pass_number,\n+               (*p)->unique_name);\n+\n+  return 1;\n+}\n+\n+/* The function traverses NAME_TO_PASS_MAP and creates a pass info\n+   table for dumping purpose.  */\n+\n+static void\n+create_pass_tab (void)\n+{\n+  if (!flag_dump_passes)\n+    return;\n+\n+  VEC_safe_grow_cleared (char_ptr, heap,\n+                         pass_tab, passes_by_id_size + 1);\n+  htab_traverse (name_to_pass_map, pass_traverse, NULL);\n+}\n+\n+static bool override_gate_status (struct opt_pass *, tree, bool);\n+\n+/* Dump the instantiated name for PASS. IS_ON indicates if PASS\n+   is turned on or not.  */\n+\n+static void\n+dump_one_pass (struct opt_pass *pass, int pass_indent)\n+{\n+  int indent = 3 * pass_indent;\n+  const char *pn;\n+  bool is_on, is_really_on;\n+\n+  is_on = (pass->gate == NULL) ? true : pass->gate();\n+  is_really_on = override_gate_status (pass, NULL, is_on);\n+\n+  if (pass->static_pass_number <= 0)\n+    pn = pass->name;\n+  else\n+    pn = VEC_index (char_ptr, pass_tab, pass->static_pass_number);\n+\n+  fprintf (stderr, \"%*s%-40s%*s:%s%s\\n\", indent, \" \", pn,\n+           (15 - indent < 0 ? 0 : 15 - indent), \" \",\n+           is_on ? \"  ON\" : \"  OFF\",\n+           ((!is_on) == (!is_really_on) ? \"\"\n+            : (is_really_on ? \" (FORCED_ON)\" : \" (FORCED_OFF)\")));\n+}\n+\n+/* Dump pass list PASS with indentation INDENT.  */\n+\n+static void\n+dump_pass_list (struct opt_pass *pass, int indent)\n+{\n+  do\n+    {\n+      dump_one_pass (pass, indent);\n+      if (pass->sub)\n+        dump_pass_list (pass->sub, indent + 1);\n+      pass = pass->next;\n+    }\n+  while (pass);\n+}\n+\n+/* Dump all optimization passes.  */\n+\n+void\n+dump_passes (void)\n+{\n+  create_pass_tab();\n+\n+  dump_pass_list (all_lowering_passes, 1);\n+  dump_pass_list (all_small_ipa_passes, 1);\n+  dump_pass_list (all_regular_ipa_passes, 1);\n+  dump_pass_list (all_lto_gen_passes, 1);\n+  dump_pass_list (all_passes, 1);\n+}\n+\n+\n /* Returns the pass with NAME.  */\n \n static struct opt_pass *\n get_pass_by_name (const char *name)\n {\n   struct pass_registry **slot, pr;\n \n-  gcc_assert (pass_name_tab);\n   pr.unique_name = name;\n-  slot = (struct pass_registry **) htab_find_slot (pass_name_tab,\n+  slot = (struct pass_registry **) htab_find_slot (name_to_pass_map,\n                                                    &pr, NO_INSERT);\n \n   if (!slot || !*slot)"}, {"sha": "b63904b0977106a369a6677b174930f8a59ced55", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4745da6ed70907824215abbe37286f55985f5a53/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4745da6ed70907824215abbe37286f55985f5a53/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4745da6ed70907824215abbe37286f55985f5a53", "patch": "@@ -1,3 +1,7 @@\n+2011-06-09  David Li  <davidxl@google.com>\n+\n+\t* testsuite/gcc.dg/dump-pass.c: New test.\n+\n 2011-06-09  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/29003"}, {"sha": "bcdf99ae0286c169d498d109d79e07ec5810e023", "filename": "gcc/testsuite/gcc.dg/dump-pass.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4745da6ed70907824215abbe37286f55985f5a53/gcc%2Ftestsuite%2Fgcc.dg%2Fdump-pass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4745da6ed70907824215abbe37286f55985f5a53/gcc%2Ftestsuite%2Fgcc.dg%2Fdump-pass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdump-pass.c?ref=4745da6ed70907824215abbe37286f55985f5a53", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-passes\" } */\n+\n+unsigned res;\n+\n+void\n+foo (unsigned code, int len)\n+{\n+  int i;\n+  for (i = 0; i < len; i++)\n+    res |= code & 1;\n+}\n+\n+/* { dg-prune-output \".*\" } */"}, {"sha": "f3a03b07127afd20a34f216cb7059070236cb3d8", "filename": "gcc/tree-pass.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4745da6ed70907824215abbe37286f55985f5a53/gcc%2Ftree-pass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4745da6ed70907824215abbe37286f55985f5a53/gcc%2Ftree-pass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pass.h?ref=4745da6ed70907824215abbe37286f55985f5a53", "patch": "@@ -639,5 +639,6 @@ extern void do_per_function_toporder (void (*) (void *), void *);\n \n extern void disable_pass (const char *);\n extern void enable_pass (const char *);\n+extern void dump_passes (void);\n \n #endif /* GCC_TREE_PASS_H */"}]}