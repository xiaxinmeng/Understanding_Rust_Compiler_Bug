{"sha": "874fc1677e7a922228632a9235613fa2814606bf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODc0ZmMxNjc3ZTdhOTIyMjI4NjMyYTkyMzU2MTNmYTI4MTQ2MDZiZg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-10-03T04:32:35Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-10-03T04:32:35Z"}, "message": "pt.c (tsubst_pack_expansion): Re-use ARGUMENT_PACK_SELECTs.\n\n\t* pt.c (tsubst_pack_expansion): Re-use ARGUMENT_PACK_SELECTs.\n\tChange unsubstituted_packs to bool.\n\nFrom-SVN: r179444", "tree": {"sha": "b32e7d7fcc786cf4683f9c31194ddf6289270565", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b32e7d7fcc786cf4683f9c31194ddf6289270565"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/874fc1677e7a922228632a9235613fa2814606bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/874fc1677e7a922228632a9235613fa2814606bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/874fc1677e7a922228632a9235613fa2814606bf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/874fc1677e7a922228632a9235613fa2814606bf/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a558c1e2e1e87fd562909a5170b5722df2681b2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a558c1e2e1e87fd562909a5170b5722df2681b2a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a558c1e2e1e87fd562909a5170b5722df2681b2a"}], "stats": {"total": 52, "additions": 31, "deletions": 21}, "files": [{"sha": "c8ca7c5f85a57831118d4df3b5e5e034842a7b58", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/874fc1677e7a922228632a9235613fa2814606bf/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/874fc1677e7a922228632a9235613fa2814606bf/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=874fc1677e7a922228632a9235613fa2814606bf", "patch": "@@ -1,5 +1,8 @@\n 2011-10-02  Jason Merrill  <jason@redhat.com>\n \n+\t* pt.c (tsubst_pack_expansion): Re-use ARGUMENT_PACK_SELECTs.\n+\tChange unsubstituted_packs to bool.\n+\n \t* parser.c (cp_parser_range_for): Don't try to deduce from {}\n \tin a template.\n "}, {"sha": "051c89a7eff64b608ea0f805ed7d50f2349cf770", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 28, "deletions": 21, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/874fc1677e7a922228632a9235613fa2814606bf/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/874fc1677e7a922228632a9235613fa2814606bf/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=874fc1677e7a922228632a9235613fa2814606bf", "patch": "@@ -9102,7 +9102,8 @@ tsubst_pack_expansion (tree t, tree args, tsubst_flags_t complain,\n \t\t       tree in_decl)\n {\n   tree pattern;\n-  tree pack, packs = NULL_TREE, unsubstituted_packs = NULL_TREE;\n+  tree pack, packs = NULL_TREE;\n+  bool unsubstituted_packs = false;\n   int i, len = -1;\n   tree result;\n   htab_t saved_local_specializations = NULL;\n@@ -9203,10 +9204,11 @@ tsubst_pack_expansion (tree t, tree args, tsubst_flags_t complain,\n           TREE_TYPE (packs) = orig_arg;\n         }\n       else\n-        /* We can't substitute for this parameter pack.  */\n-        unsubstituted_packs = tree_cons (TREE_PURPOSE (pack),\n-                                         TREE_VALUE (pack),\n-                                         unsubstituted_packs);\n+\t{\n+\t  /* We can't substitute for this parameter pack.  */\n+\t  unsubstituted_packs = true;\n+\t  break;\n+\t}\n     }\n \n   /* We cannot expand this expansion expression, because we don't have\n@@ -9252,33 +9254,38 @@ tsubst_pack_expansion (tree t, tree args, tsubst_flags_t complain,\n       for (pack = packs; pack; pack = TREE_CHAIN (pack))\n         {\n           tree parm = TREE_PURPOSE (pack);\n+\t  tree arg;\n \n+\t  /* Select the Ith argument from the pack.  */\n           if (TREE_CODE (parm) == PARM_DECL)\n             {\n-\t      /* Select the Ith argument from the pack.  */\n-\t      tree arg = make_node (ARGUMENT_PACK_SELECT);\n-\t      ARGUMENT_PACK_SELECT_FROM_PACK (arg) = TREE_VALUE (pack);\n-\t      ARGUMENT_PACK_SELECT_INDEX (arg) = i;\n-              mark_used (parm);\n-              register_local_specialization (arg, parm);\n+\t      if (i == 0)\n+\t\t{\n+\t\t  arg = make_node (ARGUMENT_PACK_SELECT);\n+\t\t  ARGUMENT_PACK_SELECT_FROM_PACK (arg) = TREE_VALUE (pack);\n+\t\t  mark_used (parm);\n+\t\t  register_local_specialization (arg, parm);\n+\t\t}\n+\t      else\n+\t\targ = retrieve_local_specialization (parm);\n             }\n           else\n             {\n-              tree value = parm;\n               int idx, level;\n               template_parm_level_and_index (parm, &level, &idx);\n-              \n-\t      if (i < len) \n+\n+\t      if (i == 0)\n \t\t{\n-\t\t  /* Select the Ith argument from the pack. */\n-\t\t  value = make_node (ARGUMENT_PACK_SELECT);\n-\t\t  ARGUMENT_PACK_SELECT_FROM_PACK (value) = TREE_VALUE (pack);\n-\t\t  ARGUMENT_PACK_SELECT_INDEX (value) = i;\n+\t\t  arg = make_node (ARGUMENT_PACK_SELECT);\n+\t\t  ARGUMENT_PACK_SELECT_FROM_PACK (arg) = TREE_VALUE (pack);\n+\t\t  /* Update the corresponding argument.  */\n+\t\t  TMPL_ARG (args, level, idx) = arg;\n \t\t}\n-\n-              /* Update the corresponding argument.  */\n-              TMPL_ARG (args, level, idx) = value;\n+\t      else\n+\t\t/* Re-use the ARGUMENT_PACK_SELECT.  */\n+\t\targ = TMPL_ARG (args, level, idx);\n             }\n+\t  ARGUMENT_PACK_SELECT_INDEX (arg) = i;\n         }\n \n       /* Substitute into the PATTERN with the altered arguments.  */"}]}