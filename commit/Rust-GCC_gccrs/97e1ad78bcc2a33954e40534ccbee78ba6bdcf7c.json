{"sha": "97e1ad78bcc2a33954e40534ccbee78ba6bdcf7c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTdlMWFkNzhiY2MyYTMzOTU0ZTQwNTM0Y2NiZWU3OGJhNmJkY2Y3Yw==", "commit": {"author": {"name": "James Greenhalgh", "email": "james.greenhalgh@arm.com", "date": "2014-04-28T21:00:38Z"}, "committer": {"name": "James Greenhalgh", "email": "jgreenhalgh@gcc.gnu.org", "date": "2014-04-28T21:00:38Z"}, "message": "[AArch64] Relax modes_tieable_p and cannot_change_mode_class\n\ngcc/\n\n\t* config/aarch64/aarch64-protos.h (aarch64_modes_tieable_p): New.\n\t* config/aarch64/aarch64.c\n\t(aarch64_cannot_change_mode_class): Weaken conditions.\n\t(aarch64_modes_tieable_p): New.\n\t* config/aarch64/aarch64.h (MODES_TIEABLE_P): Use it.\n\nFrom-SVN: r209878", "tree": {"sha": "eac247494ab9f73ef2bde86ee52e68e7996a35d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eac247494ab9f73ef2bde86ee52e68e7996a35d8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/97e1ad78bcc2a33954e40534ccbee78ba6bdcf7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97e1ad78bcc2a33954e40534ccbee78ba6bdcf7c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97e1ad78bcc2a33954e40534ccbee78ba6bdcf7c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97e1ad78bcc2a33954e40534ccbee78ba6bdcf7c/comments", "author": {"login": "jgreenhalgh-arm", "id": 6104025, "node_id": "MDQ6VXNlcjYxMDQwMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6104025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgreenhalgh-arm", "html_url": "https://github.com/jgreenhalgh-arm", "followers_url": "https://api.github.com/users/jgreenhalgh-arm/followers", "following_url": "https://api.github.com/users/jgreenhalgh-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jgreenhalgh-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgreenhalgh-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgreenhalgh-arm/subscriptions", "organizations_url": "https://api.github.com/users/jgreenhalgh-arm/orgs", "repos_url": "https://api.github.com/users/jgreenhalgh-arm/repos", "events_url": "https://api.github.com/users/jgreenhalgh-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jgreenhalgh-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bf245bf4848da017739e3298121f7482c6dd2ab0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf245bf4848da017739e3298121f7482c6dd2ab0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf245bf4848da017739e3298121f7482c6dd2ab0"}], "stats": {"total": 46, "additions": 43, "deletions": 3}, "files": [{"sha": "e2adf936e437d57b09325b40c266b49d00a974d4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97e1ad78bcc2a33954e40534ccbee78ba6bdcf7c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97e1ad78bcc2a33954e40534ccbee78ba6bdcf7c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=97e1ad78bcc2a33954e40534ccbee78ba6bdcf7c", "patch": "@@ -1,3 +1,11 @@\n+2014-04-28  James Greenhalgh  <james.greenhalgh@arm.com>\n+\n+\t* config/aarch64/aarch64-protos.h (aarch64_modes_tieable_p): New.\n+\t* config/aarch64/aarch64.c\n+\t(aarch64_cannot_change_mode_class): Weaken conditions.\n+\t(aarch64_modes_tieable_p): New.\n+\t* config/aarch64/aarch64.h (MODES_TIEABLE_P): Use it.\n+\n 2014-04-28  Pat Haugen  <pthaugen@us.ibm.com>\n \n \t* config/rs6000/sync.md (AINT mode_iterator): Move definition."}, {"sha": "04cbc780da2c34acbf4763193923ddaf1dda6ac9", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97e1ad78bcc2a33954e40534ccbee78ba6bdcf7c/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97e1ad78bcc2a33954e40534ccbee78ba6bdcf7c/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=97e1ad78bcc2a33954e40534ccbee78ba6bdcf7c", "patch": "@@ -175,6 +175,8 @@ bool aarch64_is_extend_from_extract (enum machine_mode, rtx, rtx);\n bool aarch64_is_long_call_p (rtx);\n bool aarch64_label_mentioned_p (rtx);\n bool aarch64_legitimate_pic_operand_p (rtx);\n+bool aarch64_modes_tieable_p (enum machine_mode mode1,\n+\t\t\t      enum machine_mode mode2);\n bool aarch64_move_imm (HOST_WIDE_INT, enum machine_mode);\n bool aarch64_mov_operand_p (rtx, enum aarch64_symbol_context,\n \t\t\t    enum machine_mode);"}, {"sha": "94e05bb5e3ff3182ee392adb0ff22dd8dc0cf7f9", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97e1ad78bcc2a33954e40534ccbee78ba6bdcf7c/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97e1ad78bcc2a33954e40534ccbee78ba6bdcf7c/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=97e1ad78bcc2a33954e40534ccbee78ba6bdcf7c", "patch": "@@ -8316,7 +8316,8 @@ aarch64_cannot_change_mode_class (enum machine_mode from,\n   /* Limited combinations of subregs are safe on FPREGs.  Particularly,\n      1. Vector Mode to Scalar mode where 1 unit of the vector is accessed.\n      2. Scalar to Scalar for integer modes or same size float modes.\n-     3. Vector to Vector modes.  */\n+     3. Vector to Vector modes.\n+     4. On little-endian only, Vector-Structure to Vector modes.  */\n   if (GET_MODE_SIZE (from) > GET_MODE_SIZE (to))\n     {\n       if (aarch64_vector_mode_supported_p (from)\n@@ -8332,11 +8333,41 @@ aarch64_cannot_change_mode_class (enum machine_mode from,\n       if (aarch64_vector_mode_supported_p (from)\n \t  && aarch64_vector_mode_supported_p (to))\n \treturn false;\n+\n+      /* Within an vector structure straddling multiple vector registers\n+\t we are in a mixed-endian representation.  As such, we can't\n+\t easily change modes for BYTES_BIG_ENDIAN.  Otherwise, we can\n+\t switch between vectors and vector structures cheaply.  */\n+      if (!BYTES_BIG_ENDIAN)\n+\tif ((aarch64_vector_mode_supported_p (from)\n+\t      && aarch64_vect_struct_mode_p (to))\n+\t    || (aarch64_vector_mode_supported_p (to)\n+\t      && aarch64_vect_struct_mode_p (from)))\n+\t  return false;\n     }\n \n   return true;\n }\n \n+/* Implement MODES_TIEABLE_P.  */\n+\n+bool\n+aarch64_modes_tieable_p (enum machine_mode mode1, enum machine_mode mode2)\n+{\n+  if (GET_MODE_CLASS (mode1) == GET_MODE_CLASS (mode2))\n+    return true;\n+\n+  /* We specifically want to allow elements of \"structure\" modes to\n+     be tieable to the structure.  This more general condition allows\n+     other rarer situations too.  */\n+  if (TARGET_SIMD\n+      && aarch64_vector_mode_p (mode1)\n+      && aarch64_vector_mode_p (mode2))\n+    return true;\n+\n+  return false;\n+}\n+\n #undef TARGET_ADDRESS_COST\n #define TARGET_ADDRESS_COST aarch64_address_cost\n "}, {"sha": "c9b30d0186563fc669333836bc4c84d2058ae75c", "filename": "gcc/config/aarch64/aarch64.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97e1ad78bcc2a33954e40534ccbee78ba6bdcf7c/gcc%2Fconfig%2Faarch64%2Faarch64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97e1ad78bcc2a33954e40534ccbee78ba6bdcf7c/gcc%2Fconfig%2Faarch64%2Faarch64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.h?ref=97e1ad78bcc2a33954e40534ccbee78ba6bdcf7c", "patch": "@@ -365,8 +365,7 @@ extern unsigned long aarch64_tune_flags;\n \n #define HARD_REGNO_MODE_OK(REGNO, MODE)\taarch64_hard_regno_mode_ok (REGNO, MODE)\n \n-#define MODES_TIEABLE_P(MODE1, MODE2)\t\t\t\\\n-  (GET_MODE_CLASS (MODE1) == GET_MODE_CLASS (MODE2))\n+#define MODES_TIEABLE_P(MODE1, MODE2) aarch64_modes_tieable_p (MODE1, MODE2)\n \n #define DWARF2_UNWIND_INFO 1\n "}]}