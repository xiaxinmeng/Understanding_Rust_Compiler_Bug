{"sha": "877eef6d8607fc7258929546d1cc850204098782", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODc3ZWVmNmQ4NjA3ZmM3MjU4OTI5NTQ2ZDFjYzg1MDIwNDA5ODc4Mg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-03-04T22:16:16Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-03-04T22:16:16Z"}, "message": "Delete gperf-generated source from here.\n\nFrom-SVN: r6694", "tree": {"sha": "b93a74e17934c34989bee1998638ed7e5ce78b41", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b93a74e17934c34989bee1998638ed7e5ce78b41"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/877eef6d8607fc7258929546d1cc850204098782", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/877eef6d8607fc7258929546d1cc850204098782", "html_url": "https://github.com/Rust-GCC/gccrs/commit/877eef6d8607fc7258929546d1cc850204098782", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/877eef6d8607fc7258929546d1cc850204098782/comments", "author": null, "committer": null, "parents": [{"sha": "f137e7dc02c64721fbdd0c7bcab93da6364ef7e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f137e7dc02c64721fbdd0c7bcab93da6364ef7e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f137e7dc02c64721fbdd0c7bcab93da6364ef7e5"}], "stats": {"total": 188, "additions": 4, "deletions": 184}, "files": [{"sha": "0054448afda706717a484fae9ccdc6df973810d2", "filename": "gcc/c-lex.c", "status": "modified", "additions": 4, "deletions": 184, "changes": 188, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/877eef6d8607fc7258929546d1cc850204098782/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/877eef6d8607fc7258929546d1cc850204098782/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=877eef6d8607fc7258929546d1cc850204098782", "patch": "@@ -91,190 +91,10 @@ static int nextchar = -1;\n \n int check_newline ();\n \f\n-/* C code produced by gperf version 2.5 (GNU C++ version) */\n-/* Command-line: gperf -p -j1 -i 1 -g -o -t -G -N is_reserved_word -k1,3,$ c-parse.gperf  */\n-struct resword { char *name; short token; enum rid rid; };\n-\n-#define TOTAL_KEYWORDS 79\n-#define MIN_WORD_LENGTH 2\n-#define MAX_WORD_LENGTH 20\n-#define MIN_HASH_VALUE 10\n-#define MAX_HASH_VALUE 144\n-/* maximum key range = 135, duplicates = 0 */\n-\n-#ifdef __GNUC__\n-__inline\n-#endif\n-static unsigned int\n-hash (str, len)\n-     register char *str;\n-     register int unsigned len;\n-{\n-  static unsigned char asso_values[] =\n-    {\n-     145, 145, 145, 145, 145, 145, 145, 145, 145, 145,\n-     145, 145, 145, 145, 145, 145, 145, 145, 145, 145,\n-     145, 145, 145, 145, 145, 145, 145, 145, 145, 145,\n-     145, 145, 145, 145, 145, 145, 145, 145, 145, 145,\n-     145, 145, 145, 145, 145, 145, 145, 145, 145, 145,\n-     145, 145, 145, 145, 145, 145, 145, 145, 145, 145,\n-     145, 145, 145, 145,  25, 145, 145, 145, 145, 145,\n-     145, 145, 145, 145, 145, 145, 145, 145, 145, 145,\n-     145, 145, 145, 145, 145, 145, 145, 145, 145, 145,\n-     145, 145, 145, 145, 145,   1, 145,  46,   8,  15,\n-      61,   6,  36,  48,   3,   5, 145,  18,  63,  25,\n-      29,  76,   1, 145,  13,   2,   1,  51,  37,   9,\n-       9,   1,   3, 145, 145, 145, 145, 145,\n-    };\n-  register int hval = len;\n-\n-  switch (hval)\n-    {\n-      default:\n-      case 3:\n-        hval += asso_values[str[2]];\n-      case 2:\n-      case 1:\n-        hval += asso_values[str[0]];\n-    }\n-  return hval + asso_values[str[len - 1]];\n-}\n-\n-static struct resword wordlist[] =\n-{\n-  {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, \n-  {\"\",}, \n-  {\"int\",  TYPESPEC, RID_INT},\n-  {\"\",}, {\"\",}, \n-  {\"__typeof__\",  TYPEOF, NORID},\n-  {\"__signed__\",  TYPESPEC, RID_SIGNED},\n-  {\"__imag__\",  IMAGPART, NORID},\n-  {\"switch\",  SWITCH, NORID},\n-  {\"__inline__\",  SCSPEC, RID_INLINE},\n-  {\"else\",  ELSE, NORID},\n-  {\"__iterator__\",  SCSPEC, RID_ITERATOR},\n-  {\"__inline\",  SCSPEC, RID_INLINE},\n-  {\"__extension__\",  EXTENSION, NORID},\n-  {\"struct\",  STRUCT, NORID},\n-  {\"__real__\",  REALPART, NORID},\n-  {\"__const\",  TYPE_QUAL, RID_CONST},\n-  {\"while\",  WHILE, NORID},\n-  {\"__const__\",  TYPE_QUAL, RID_CONST},\n-  {\"case\",  CASE, NORID},\n-  {\"__complex__\",  TYPESPEC, RID_COMPLEX},\n-  {\"__iterator\",  SCSPEC, RID_ITERATOR},\n-  {\"bycopy\",  TYPE_QUAL, RID_BYCOPY},\n-  {\"\",}, {\"\",}, {\"\",}, \n-  {\"__complex\",  TYPESPEC, RID_COMPLEX},\n-  {\"\",}, \n-  {\"in\",  TYPE_QUAL, RID_IN},\n-  {\"break\",  BREAK, NORID},\n-  {\"@defs\",  DEFS, NORID},\n-  {\"\",}, {\"\",}, {\"\",}, \n-  {\"extern\",  SCSPEC, RID_EXTERN},\n-  {\"if\",  IF, NORID},\n-  {\"typeof\",  TYPEOF, NORID},\n-  {\"typedef\",  SCSPEC, RID_TYPEDEF},\n-  {\"__typeof\",  TYPEOF, NORID},\n-  {\"sizeof\",  SIZEOF, NORID},\n-  {\"\",}, \n-  {\"return\",  RETURN, NORID},\n-  {\"const\",  TYPE_QUAL, RID_CONST},\n-  {\"__volatile__\",  TYPE_QUAL, RID_VOLATILE},\n-  {\"@private\",  PRIVATE, NORID},\n-  {\"@selector\",  SELECTOR, NORID},\n-  {\"__volatile\",  TYPE_QUAL, RID_VOLATILE},\n-  {\"__asm__\",  ASM_KEYWORD, NORID},\n-  {\"\",}, {\"\",}, \n-  {\"continue\",  CONTINUE, NORID},\n-  {\"__alignof__\",  ALIGNOF, NORID},\n-  {\"__imag\",  IMAGPART, NORID},\n-  {\"__attribute__\",  ATTRIBUTE, NORID},\n-  {\"\",}, {\"\",}, \n-  {\"__attribute\",  ATTRIBUTE, NORID},\n-  {\"for\",  FOR, NORID},\n-  {\"\",}, \n-  {\"@encode\",  ENCODE, NORID},\n-  {\"id\",  OBJECTNAME, RID_ID},\n-  {\"static\",  SCSPEC, RID_STATIC},\n-  {\"@interface\",  INTERFACE, NORID},\n-  {\"\",}, \n-  {\"__signed\",  TYPESPEC, RID_SIGNED},\n-  {\"\",}, \n-  {\"__label__\",  LABEL, NORID},\n-  {\"\",}, {\"\",}, \n-  {\"__asm\",  ASM_KEYWORD, NORID},\n-  {\"char\",  TYPESPEC, RID_CHAR},\n-  {\"\",}, \n-  {\"inline\",  SCSPEC, RID_INLINE},\n-  {\"out\",  TYPE_QUAL, RID_OUT},\n-  {\"register\",  SCSPEC, RID_REGISTER},\n-  {\"__real\",  REALPART, NORID},\n-  {\"short\",  TYPESPEC, RID_SHORT},\n-  {\"\",}, \n-  {\"enum\",  ENUM, NORID},\n-  {\"inout\",  TYPE_QUAL, RID_INOUT},\n-  {\"\",}, \n-  {\"oneway\",  TYPE_QUAL, RID_ONEWAY},\n-  {\"union\",  UNION, NORID},\n-  {\"\",}, \n-  {\"__alignof\",  ALIGNOF, NORID},\n-  {\"\",}, \n-  {\"@implementation\",  IMPLEMENTATION, NORID},\n-  {\"\",}, \n-  {\"@class\",  CLASS, NORID},\n-  {\"\",}, \n-  {\"@public\",  PUBLIC, NORID},\n-  {\"asm\",  ASM_KEYWORD, NORID},\n-  {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, \n-  {\"default\",  DEFAULT, NORID},\n-  {\"\",}, \n-  {\"void\",  TYPESPEC, RID_VOID},\n-  {\"\",}, \n-  {\"@protected\",  PROTECTED, NORID},\n-  {\"@protocol\",  PROTOCOL, NORID},\n-  {\"\",}, {\"\",}, {\"\",}, \n-  {\"volatile\",  TYPE_QUAL, RID_VOLATILE},\n-  {\"\",}, {\"\",}, \n-  {\"signed\",  TYPESPEC, RID_SIGNED},\n-  {\"float\",  TYPESPEC, RID_FLOAT},\n-  {\"@end\",  END, NORID},\n-  {\"\",}, {\"\",}, \n-  {\"unsigned\",  TYPESPEC, RID_UNSIGNED},\n-  {\"@compatibility_alias\",  ALIAS, NORID},\n-  {\"double\",  TYPESPEC, RID_DOUBLE},\n-  {\"\",}, {\"\",}, \n-  {\"auto\",  SCSPEC, RID_AUTO},\n-  {\"\",}, \n-  {\"goto\",  GOTO, NORID},\n-  {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, {\"\",}, \n-  {\"do\",  DO, NORID},\n-  {\"\",}, {\"\",}, {\"\",}, {\"\",}, \n-  {\"long\",  TYPESPEC, RID_LONG},\n-};\n-\n-#ifdef __GNUC__\n-__inline\n-#endif\n-struct resword *\n-is_reserved_word (str, len)\n-     register char *str;\n-     register unsigned int len;\n-{\n-  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)\n-    {\n-      register int key = hash (str, len);\n-\n-      if (key <= MAX_HASH_VALUE && key >= 0)\n-        {\n-          register char *s = wordlist[key].name;\n-\n-          if (*s == *str && !strcmp (str + 1, s + 1))\n-            return &wordlist[key];\n-        }\n-    }\n-  return 0;\n-}\n+/* Do not insert generated code into the source, instead, include it.\n+   This allows us to build gcc automatically even for targets that\n+   need to add or modify the reserved keyword lists.  */\n+#include \"c-gperf.h\"\n \f\n /* Return something to represent absolute declarators containing a *.\n    TARGET is the absolute declarator that the * contains."}]}