{"sha": "30079dde47ad224613340f220df061cb4a5829b7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzAwNzlkZGU0N2FkMjI0NjEzMzQwZjIyMGRmMDYxY2I0YTU4MjliNw==", "commit": {"author": {"name": "Wilco Dijkstra", "email": "wdijkstr@arm.com", "date": "2017-08-07T14:17:09Z"}, "committer": {"name": "Wilco Dijkstra", "email": "wilco@gcc.gnu.org", "date": "2017-08-07T14:17:09Z"}, "message": "[AArch64] Use gen_frame_mem for callee-saves\n\nThe frame code uses a mixture of gen_rtx_MEM and gen_frame_mem for\ncallee-saves.  Callee-saves never alias with local variables, so using\ngen_frame_mem is best.\n\n    gcc/\n\t* config/aarch64/aarch64.c (aarch64_pushwb_single_reg):\n\tUse gen_frame_mem.\n\t(aarch64_pop_regs): Likewise.\n\t(aarch64_gen_load_pair): Likewise.\n\t(aarch64_save_callee_saves): Likewise.\n\t(aarch64_restore_callee_saves): Likewise.\n\nFrom-SVN: r250919", "tree": {"sha": "333699e8c18004a1e3fad9eeb9131e94c5b2d731", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/333699e8c18004a1e3fad9eeb9131e94c5b2d731"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/30079dde47ad224613340f220df061cb4a5829b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30079dde47ad224613340f220df061cb4a5829b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30079dde47ad224613340f220df061cb4a5829b7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30079dde47ad224613340f220df061cb4a5829b7/comments", "author": null, "committer": null, "parents": [{"sha": "6f1a16cbe84edaa9551d21d8b4db5830b6fed5dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f1a16cbe84edaa9551d21d8b4db5830b6fed5dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f1a16cbe84edaa9551d21d8b4db5830b6fed5dd"}], "stats": {"total": 29, "additions": 17, "deletions": 12}, "files": [{"sha": "ec8311568f324b054f039a2b17d5f9392caf1eed", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30079dde47ad224613340f220df061cb4a5829b7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30079dde47ad224613340f220df061cb4a5829b7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=30079dde47ad224613340f220df061cb4a5829b7", "patch": "@@ -1,3 +1,12 @@\n+2017-08-07  Wilco Dijkstra  <wdijkstr@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_pushwb_single_reg):\n+\tUse gen_frame_mem.\n+\t(aarch64_pop_regs): Likewise.\n+\t(aarch64_gen_load_pair): Likewise.\n+\t(aarch64_save_callee_saves): Likewise.\n+\t(aarch64_restore_callee_saves): Likewise.\n+\n 2017-08-07  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* config/i386/i386.c: Revert the last change."}, {"sha": "79a396ec674d0138c81083b6c5b9b7bf758802f4", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30079dde47ad224613340f220df061cb4a5829b7/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30079dde47ad224613340f220df061cb4a5829b7/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=30079dde47ad224613340f220df061cb4a5829b7", "patch": "@@ -3069,7 +3069,7 @@ aarch64_pushwb_single_reg (machine_mode mode, unsigned regno,\n   reg = gen_rtx_REG (mode, regno);\n   mem = gen_rtx_PRE_MODIFY (Pmode, base_rtx,\n \t\t\t    plus_constant (Pmode, base_rtx, -adjustment));\n-  mem = gen_rtx_MEM (mode, mem);\n+  mem = gen_frame_mem (mode, mem);\n \n   insn = emit_move_insn (mem, reg);\n   RTX_FRAME_RELATED_P (insn) = 1;\n@@ -3157,7 +3157,7 @@ aarch64_pop_regs (unsigned regno1, unsigned regno2, HOST_WIDE_INT adjustment,\n     {\n       rtx mem = plus_constant (Pmode, stack_pointer_rtx, adjustment);\n       mem = gen_rtx_POST_MODIFY (Pmode, stack_pointer_rtx, mem);\n-      emit_move_insn (reg1, gen_rtx_MEM (mode, mem));\n+      emit_move_insn (reg1, gen_frame_mem (mode, mem));\n     }\n   else\n     {\n@@ -3233,8 +3233,6 @@ aarch64_save_callee_saves (machine_mode mode, HOST_WIDE_INT start_offset,\n \t\t\t   unsigned start, unsigned limit, bool skip_wb)\n {\n   rtx_insn *insn;\n-  rtx (*gen_mem_ref) (machine_mode, rtx) = (frame_pointer_needed\n-\t\t\t\t\t\t ? gen_frame_mem : gen_rtx_MEM);\n   unsigned regno;\n   unsigned regno2;\n \n@@ -3255,8 +3253,8 @@ aarch64_save_callee_saves (machine_mode mode, HOST_WIDE_INT start_offset,\n \n       reg = gen_rtx_REG (mode, regno);\n       offset = start_offset + cfun->machine->frame.reg_offset[regno];\n-      mem = gen_mem_ref (mode, plus_constant (Pmode, stack_pointer_rtx,\n-\t\t\t\t\t      offset));\n+      mem = gen_frame_mem (mode, plus_constant (Pmode, stack_pointer_rtx,\n+\t\t\t\t\t\toffset));\n \n       regno2 = aarch64_next_callee_save (regno + 1, limit);\n \n@@ -3270,8 +3268,8 @@ aarch64_save_callee_saves (machine_mode mode, HOST_WIDE_INT start_offset,\n \t  rtx mem2;\n \n \t  offset = start_offset + cfun->machine->frame.reg_offset[regno2];\n-\t  mem2 = gen_mem_ref (mode, plus_constant (Pmode, stack_pointer_rtx,\n-\t\t\t\t\t\t   offset));\n+\t  mem2 = gen_frame_mem (mode, plus_constant (Pmode, stack_pointer_rtx,\n+\t\t\t\t\t\t     offset));\n \t  insn = emit_insn (aarch64_gen_store_pair (mode, mem, reg, mem2,\n \t\t\t\t\t\t    reg2));\n \n@@ -3300,8 +3298,6 @@ aarch64_restore_callee_saves (machine_mode mode,\n \t\t\t      unsigned limit, bool skip_wb, rtx *cfi_ops)\n {\n   rtx base_rtx = stack_pointer_rtx;\n-  rtx (*gen_mem_ref) (machine_mode, rtx) = (frame_pointer_needed\n-\t\t\t\t\t\t ? gen_frame_mem : gen_rtx_MEM);\n   unsigned regno;\n   unsigned regno2;\n   HOST_WIDE_INT offset;\n@@ -3322,7 +3318,7 @@ aarch64_restore_callee_saves (machine_mode mode,\n \n       reg = gen_rtx_REG (mode, regno);\n       offset = start_offset + cfun->machine->frame.reg_offset[regno];\n-      mem = gen_mem_ref (mode, plus_constant (Pmode, base_rtx, offset));\n+      mem = gen_frame_mem (mode, plus_constant (Pmode, base_rtx, offset));\n \n       regno2 = aarch64_next_callee_save (regno + 1, limit);\n \n@@ -3335,7 +3331,7 @@ aarch64_restore_callee_saves (machine_mode mode,\n \t  rtx mem2;\n \n \t  offset = start_offset + cfun->machine->frame.reg_offset[regno2];\n-\t  mem2 = gen_mem_ref (mode, plus_constant (Pmode, base_rtx, offset));\n+\t  mem2 = gen_frame_mem (mode, plus_constant (Pmode, base_rtx, offset));\n \t  emit_insn (aarch64_gen_load_pair (mode, reg, mem, reg2, mem2));\n \n \t  *cfi_ops = alloc_reg_note (REG_CFA_RESTORE, reg2, *cfi_ops);"}]}