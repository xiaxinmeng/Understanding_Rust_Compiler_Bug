{"sha": "67138ea1b041fe1637da6b3568f064f172d9358c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjcxMzhlYTFiMDQxZmUxNjM3ZGE2YjM1NjhmMDY0ZjE3MmQ5MzU4Yw==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2020-11-27T17:41:56Z"}, "committer": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2020-11-27T17:42:43Z"}, "message": "testsuite/i386: Fix XOP and FMA4 checking functions [PR98036].\n\nAdd missing returns and remove unnecessary postfix increments.\n\n2020-11-27  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n\n\tPR testsuite/98036\n\ngcc/testsuite/\n\t* gcc.target/i386/fma4-256-maccXX.c (check_maccps):\n\tRemove unnecessary postfix increment on a returned variable.\n\t(check_maccpd): Ditto.\n\t* gcc.target/i386/fma4-256-msubXX.c (check_msubps): Ditto.\n\t(check_msubpd): Ditto.\n\t* gcc.target/i386/fma4-256-nmaccXX.c (check_nmaccps): Ditto.\n\t(check_nmaccpd): Ditto.\n\t* gcc.target/i386/fma4-256-nmsubXX.c (check_nmsubps): Ditto.\n\t(check_nmsubpd): Ditto.\n\t* gcc.target/i386/fma4-maccXX.c (check_maccps): Ditto.\n\t(check_maccpd): Ditto.\n\t(check_maccss): Ditto.\n\t(check_maccsd): Ditto.\n\t* gcc.target/i386/fma4-msubXX.c (check_msubps): Ditto.\n\t(check_msubpd): Ditto.\n\t(check_msubss): Ditto.\n\t(check_msubsd): Ditto.\n\t* gcc.target/i386/fma4-nmaccXX.c (check_nmaccps): Ditto.\n\t(check_nmaccpd): Ditto.\n\t(check_nmaccss): Ditto.\n\t(check_nmaccsd): Ditto.\n\t* gcc.target/i386/fma4-nmsubXX.c (check_nmsubps): Ditto.\n\t(check_nmsubpd): Ditto.\n\t(check_nmsubss): Ditto.\n\t(check_nmsubsd): Ditto.\n\t* gcc.target/i386/xop-haddX.c (check_sbyte2word): Add missing return.\n\t(check_sbyte2dword):\n\tRemove unnecessary postfix increment on a returned value.\n\t(check_sbyte2qword): Ditto.\n\t(check_sword2dword): Add missing return.\n\t(check_sword2qword):\n\tRemove unnecessary postfix increment on a returned value.\n\t(check_dword2qword): Add missing return.\n\t* gcc.target/i386/xop-hadduX.c (check_byte2word): Add missing return.\n\t(check_byte2dword):\n\tRemove unnecessary postfix increment on a returned value.\n\t(check_byte2qword): Ditto.\n\t(check_word2dword): Add missing return.\n\t(check_word2qword):\n\tRemove unnecessary postfix increment on a returned value.\n\t(check_word2qword): Add missing return.\n\t* gcc.target/i386/xop-hsubX.c (check_sbyte2word): Add missing return.\n\t(check_sword2dword): Ditto.\n\t(check_sword2qword): Ditto.", "tree": {"sha": "394573a77678d3312ec7999c2c3597a410fa5e87", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/394573a77678d3312ec7999c2c3597a410fa5e87"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/67138ea1b041fe1637da6b3568f064f172d9358c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67138ea1b041fe1637da6b3568f064f172d9358c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67138ea1b041fe1637da6b3568f064f172d9358c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67138ea1b041fe1637da6b3568f064f172d9358c/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e8f83fa4fcf4f7e97046ef6b521b78dcd25c95b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8f83fa4fcf4f7e97046ef6b521b78dcd25c95b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8f83fa4fcf4f7e97046ef6b521b78dcd25c95b7"}], "stats": {"total": 128, "additions": 57, "deletions": 71}, "files": [{"sha": "ee0ddf171f4843dda432785e4c2211d57e6f3ecb", "filename": "gcc/testsuite/gcc.target/i386/fma4-256-maccXX.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67138ea1b041fe1637da6b3568f064f172d9358c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffma4-256-maccXX.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67138ea1b041fe1637da6b3568f064f172d9358c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffma4-256-maccXX.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffma4-256-maccXX.c?ref=67138ea1b041fe1637da6b3568f064f172d9358c", "patch": "@@ -17,7 +17,6 @@ union\n   double d[NUM * 4];\n } dst, res, src1, src2, src3;\n \n-\n /* Note that in macc*,msub*,mnmacc* and mnsub* instructions, the intermdediate \n    product is not rounded, only the addition is rounded. */\n \n@@ -56,7 +55,7 @@ check_maccps ()\n \tif (dst.f[i + j] != res.f[i + j]) \n \t  check_fails++;\n       }\n-  return check_fails++;\n+  return check_fails;\n }\n \n static int\n@@ -70,7 +69,7 @@ check_maccpd ()\n \tif (dst.d[i + j] != res.d[i + j]) \n \t  check_fails++;\n       }\n-  return check_fails++;\n+  return check_fails;\n }\n \n static void"}, {"sha": "0251eb2bce9cd0e493d1de4565c817fcc23ddc8e", "filename": "gcc/testsuite/gcc.target/i386/fma4-256-msubXX.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67138ea1b041fe1637da6b3568f064f172d9358c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffma4-256-msubXX.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67138ea1b041fe1637da6b3568f064f172d9358c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffma4-256-msubXX.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffma4-256-msubXX.c?ref=67138ea1b041fe1637da6b3568f064f172d9358c", "patch": "@@ -55,7 +55,7 @@ check_msubps ()\n \tif (dst.f[i + j] != res.f[i + j]) \n \t  check_fails++;\n       }\n-  return check_fails++;\n+  return check_fails;\n }\n \n static int\n@@ -69,7 +69,7 @@ check_msubpd ()\n \tif (dst.d[i + j] != res.d[i + j]) \n \t  check_fails++;\n       }\n-  return check_fails++;\n+  return check_fails;\n }\n \n static void\n@@ -92,5 +92,4 @@ fma4_test (void)\n   \n   if (check_msubpd ()) \n     abort ();\n-  \n }"}, {"sha": "d9671f3da433f1867915fa9bb13c8c3c8aa25ff9", "filename": "gcc/testsuite/gcc.target/i386/fma4-256-nmaccXX.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67138ea1b041fe1637da6b3568f064f172d9358c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffma4-256-nmaccXX.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67138ea1b041fe1637da6b3568f064f172d9358c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffma4-256-nmaccXX.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffma4-256-nmaccXX.c?ref=67138ea1b041fe1637da6b3568f064f172d9358c", "patch": "@@ -55,7 +55,7 @@ check_nmaccps ()\n \tif (dst.f[i + j] != res.f[i + j]) \n \t  check_fails++;\n       }\n-  return check_fails++;\n+  return check_fails;\n }\n \n static int\n@@ -69,7 +69,7 @@ check_nmaccpd ()\n \tif (dst.d[i + j] != res.d[i + j]) \n \t  check_fails++;\n       }\n-  return check_fails++;\n+  return check_fails;\n }\n \n static void\n@@ -92,5 +92,4 @@ fma4_test (void)\n   \n   if (check_nmaccpd ()) \n     abort ();\n-\n }"}, {"sha": "385cd950b9713a9bff6548000a91f961c948966b", "filename": "gcc/testsuite/gcc.target/i386/fma4-256-nmsubXX.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67138ea1b041fe1637da6b3568f064f172d9358c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffma4-256-nmsubXX.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67138ea1b041fe1637da6b3568f064f172d9358c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffma4-256-nmsubXX.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffma4-256-nmsubXX.c?ref=67138ea1b041fe1637da6b3568f064f172d9358c", "patch": "@@ -55,7 +55,7 @@ check_nmsubps ()\n \tif (dst.f[i + j] != res.f[i + j]) \n \t  check_fails++;\n       }\n-  return check_fails++;\n+  return check_fails;\n }\n \n static int\n@@ -69,7 +69,7 @@ check_nmsubpd ()\n \tif (dst.d[i + j] != res.d[i + j]) \n \t  check_fails++;\n       }\n-  return check_fails++;\n+  return check_fails;\n }\n \n static void\n@@ -92,5 +92,4 @@ fma4_test (void)\n   \n   if (check_nmsubpd (&dst.y[i], &src1.d[i * 2], &src2.d[i * 2], &src3.d[i * 2])) \n     abort ();\n-\n }"}, {"sha": "d401d4ed4134cd00e61ed730d7c2171ef25bccd2", "filename": "gcc/testsuite/gcc.target/i386/fma4-maccXX.c", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67138ea1b041fe1637da6b3568f064f172d9358c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffma4-maccXX.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67138ea1b041fe1637da6b3568f064f172d9358c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffma4-maccXX.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffma4-maccXX.c?ref=67138ea1b041fe1637da6b3568f064f172d9358c", "patch": "@@ -17,7 +17,6 @@ union\n   double d[NUM * 2];\n } dst, res, src1, src2, src3;\n \n-\n /* Note that in macc*,msub*,mnmacc* and mnsub* instructions, the intermdediate \n    product is not rounded, only the addition is rounded. */\n \n@@ -56,7 +55,7 @@ check_maccps ()\n \tif (dst.f[i + j] != res.f[i + j]) \n \t  check_fails++;\n       }\n-  return check_fails++;\n+  return check_fails;\n }\n \n static int\n@@ -70,7 +69,7 @@ check_maccpd ()\n \tif (dst.d[i + j] != res.d[i + j]) \n \t  check_fails++;\n       }\n-  return check_fails++;\n+  return check_fails;\n }\n \n \n@@ -84,7 +83,7 @@ check_maccss ()\n       if (dst.f[i] != res.f[i]) \n \tcheck_fails++;\n     }\t\n-  return check_fails++;\n+  return check_fails;\n }\n \n static int\n@@ -97,7 +96,7 @@ check_maccsd ()\n       if (dst.d[i] != res.d[i]) \n \tcheck_fails++;\n     }\n-  return check_fails++;\n+  return check_fails;\n }\n \n static void\n@@ -132,5 +131,4 @@ fma4_test (void)\n   \n   if (check_maccsd ()) \n     abort ();\n-\n }"}, {"sha": "192cb5d624cc7ec4cf82fd2c2ce4c27bfc7c2581", "filename": "gcc/testsuite/gcc.target/i386/fma4-msubXX.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67138ea1b041fe1637da6b3568f064f172d9358c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffma4-msubXX.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67138ea1b041fe1637da6b3568f064f172d9358c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffma4-msubXX.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffma4-msubXX.c?ref=67138ea1b041fe1637da6b3568f064f172d9358c", "patch": "@@ -55,7 +55,7 @@ check_msubps ()\n \tif (dst.f[i + j] != res.f[i + j]) \n \t  check_fails++;\n       }\n-  return check_fails++;\n+  return check_fails;\n }\n \n static int\n@@ -69,10 +69,9 @@ check_msubpd ()\n \tif (dst.d[i + j] != res.d[i + j]) \n \t  check_fails++;\n       }\n-  return check_fails++;\n+  return check_fails;\n }\n \n-\n static int\n check_msubss ()\n {\n@@ -83,7 +82,7 @@ check_msubss ()\n       if (dst.f[i] != res.f[i]) \n \tcheck_fails++;\n     }\t\n-  return check_fails++;\n+  return check_fails;\n }\n \n static int\n@@ -96,7 +95,7 @@ check_msubsd ()\n       if (dst.d[i] != res.d[i]) \n \tcheck_fails++;\n     }\n-  return check_fails++;\n+  return check_fails;\n }\n \n static void"}, {"sha": "7a89fb0820c2e66d2e14f522486ecba8776b9fd4", "filename": "gcc/testsuite/gcc.target/i386/fma4-nmaccXX.c", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67138ea1b041fe1637da6b3568f064f172d9358c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffma4-nmaccXX.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67138ea1b041fe1637da6b3568f064f172d9358c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffma4-nmaccXX.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffma4-nmaccXX.c?ref=67138ea1b041fe1637da6b3568f064f172d9358c", "patch": "@@ -55,7 +55,7 @@ check_nmaccps ()\n \tif (dst.f[i + j] != res.f[i + j]) \n \t  check_fails++;\n       }\n-  return check_fails++;\n+  return check_fails;\n }\n \n static int\n@@ -69,10 +69,9 @@ check_nmaccpd ()\n \tif (dst.d[i + j] != res.d[i + j]) \n \t  check_fails++;\n       }\n-  return check_fails++;\n+  return check_fails;\n }\n \n-\n static int\n check_nmaccss ()\n {\n@@ -83,7 +82,7 @@ check_nmaccss ()\n       if (dst.f[i] != res.f[i]) \n \tcheck_fails++;\n     }\t\n-  return check_fails++;\n+  return check_fails;\n }\n \n static int\n@@ -96,7 +95,7 @@ check_nmaccsd ()\n       if (dst.d[i] != res.d[i]) \n \tcheck_fails++;\n     }\n-  return check_fails++;\n+  return check_fails;\n }\n \n static void\n@@ -112,7 +111,6 @@ fma4_test (void)\n   if (check_nmaccps ()) \n     abort ();\n   \n-\n   for (i = 0; i < NUM; i++)\n     dst.x[i] = _mm_nmacc_ss (src1.x[i], src2.x[i], src3.x[i]);\n   \n@@ -126,12 +124,10 @@ fma4_test (void)\n   \n   if (check_nmaccpd ()) \n     abort ();\n-  \n \n   for (i = 0; i < NUM; i++)\n     dst.y[i] = _mm_nmacc_sd (src1.y[i], src2.y[i], src3.y[i]);\n   \n   if (check_nmaccsd ()) \n     abort ();\n-\n }"}, {"sha": "c0bce417e110a838bfa70f1d94d15fc0f1123588", "filename": "gcc/testsuite/gcc.target/i386/fma4-nmsubXX.c", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67138ea1b041fe1637da6b3568f064f172d9358c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffma4-nmsubXX.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67138ea1b041fe1637da6b3568f064f172d9358c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffma4-nmsubXX.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffma4-nmsubXX.c?ref=67138ea1b041fe1637da6b3568f064f172d9358c", "patch": "@@ -55,7 +55,7 @@ check_nmsubps ()\n \tif (dst.f[i + j] != res.f[i + j]) \n \t  check_fails++;\n       }\n-  return check_fails++;\n+  return check_fails;\n }\n \n static int\n@@ -69,10 +69,9 @@ check_nmsubpd ()\n \tif (dst.d[i + j] != res.d[i + j]) \n \t  check_fails++;\n       }\n-  return check_fails++;\n+  return check_fails;\n }\n \n-\n static int\n check_nmsubss ()\n {\n@@ -83,7 +82,7 @@ check_nmsubss ()\n       if (dst.f[i] != res.f[i]) \n \tcheck_fails++;\n     }\t\n-  return check_fails++;\n+  return check_fails;\n }\n \n static int\n@@ -96,7 +95,7 @@ check_nmsubsd ()\n       if (dst.d[i] != res.d[i]) \n \tcheck_fails++;\n     }\n-  return check_fails++;\n+  return check_fails;\n }\n \n static void\n@@ -111,7 +110,6 @@ fma4_test (void)\n   \n   if (check_nmsubps (&dst.x[i], &src1.f[i * 4], &src2.f[i * 4], &src3.f[i * 4])) \n     abort ();\n-  \n \n   for (i = 0; i < NUM; i++)\n     dst.x[i] = _mm_nmsub_ss (src1.x[i], src2.x[i], src3.x[i]);\n@@ -126,12 +124,10 @@ fma4_test (void)\n   \n   if (check_nmsubpd (&dst.y[i], &src1.d[i * 2], &src2.d[i * 2], &src3.d[i * 2])) \n     abort ();\n-  \n \n   for (i = 0; i < NUM; i++)\n     dst.y[i] = _mm_nmsub_sd (src1.y[i], src2.y[i], src3.y[i]);\n   \n   if (check_nmsubsd (&dst.y[i], &src1.d[i * 2], &src2.d[i * 2], &src3.d[i * 2])) \n     abort ();\n-\n }"}, {"sha": "68f27528c23fa2a9c956dc7e40a8625bafce8da2", "filename": "gcc/testsuite/gcc.target/i386/xop-haddX.c", "status": "modified", "additions": 12, "deletions": 15, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67138ea1b041fe1637da6b3568f064f172d9358c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fxop-haddX.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67138ea1b041fe1637da6b3568f064f172d9358c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fxop-haddX.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fxop-haddX.c?ref=67138ea1b041fe1637da6b3568f064f172d9358c", "patch": "@@ -34,7 +34,6 @@ init_sword ()\n     src1.si[i] = i;\n }\n \n-\n static void\n init_sdword ()\n {\n@@ -58,6 +57,7 @@ check_sbyte2word ()\n \t    check_fails++;\t\n \t}\n     }\n+  return check_fails;\n }\n \n static int \n@@ -76,7 +76,7 @@ check_sbyte2dword ()\n \t    check_fails++;\n \t}\n     }\n-  return check_fails++;\n+  return check_fails;\n }\n \n static int\n@@ -96,14 +96,14 @@ check_sbyte2qword ()\n \t    check_fails++;\n \t}\n     }\n-  return check_fails++;\n+  return check_fails;\n }\n \n static int\n check_sword2dword ()\n {\n   int i, j, s, t, check_fails = 0;\n-  for (i = 0; i < (NUM * 8); i = i + 8)\n+  for (i = 0; i < NUM * 8; i = i + 8)\n     {\n       for (j = 0; j < 4; j++)\n \t{\n@@ -114,6 +114,7 @@ check_sword2dword ()\n \t    check_fails++;\t\n \t}\n     }\n+  return check_fails;\n }\n \n static int \n@@ -132,14 +133,14 @@ check_sword2qword ()\n \t    check_fails++;\n \t}\n     }\n-  return check_fails++;\n+  return check_fails;\n }\n \n static int\n check_dword2qword ()\n {\n   int i, j, s, t, check_fails = 0;\n-  for (i = 0; i < (NUM * 4); i = i + 4)\n+  for (i = 0; i < NUM * 4; i = i + 4)\n     {\n       for (j = 0; j < 2; j++)\n \t{\n@@ -150,6 +151,7 @@ check_dword2qword ()\n \t    check_fails++;\t\n \t}\n     }\n+  return check_fails;\n }\n \n static void\n@@ -163,26 +165,23 @@ xop_test (void)\n     dst.x[i] = _mm_haddw_epi8 (src1.x[i]);\n   \n   if (check_sbyte2word())\n-  abort ();\n-  \n+    abort ();\n \n-  for (i = 0; i < (NUM ); i++)\n+  for (i = 0; i < NUM; i++)\n     dst.x[i] = _mm_haddd_epi8 (src1.x[i]);\n   \n   if (check_sbyte2dword())\n     abort (); \n-  \n \n   for (i = 0; i < NUM; i++)\n     dst.x[i] = _mm_haddq_epi8 (src1.x[i]);\n   \n   if (check_sbyte2qword())\n     abort ();\n \n-\n   init_sword ();\n \n-  for (i = 0; i < (NUM ); i++)\n+  for (i = 0; i < NUM; i++)\n     dst.x[i] = _mm_haddd_epi16 (src1.x[i]);\n   \n   if (check_sword2dword())\n@@ -193,14 +192,12 @@ xop_test (void)\n   \n   if (check_sword2qword())\n     abort ();\n- \n \n   init_sdword ();\n \n-    for (i = 0; i < NUM; i++)\n+  for (i = 0; i < NUM; i++)\n     dst.x[i] = _mm_haddq_epi32 (src1.x[i]);\n   \n   if (check_dword2qword())\n     abort ();\n-\n }"}, {"sha": "06a4a2ec6dfe56b0c16b9bc6752e0b7e486cd441", "filename": "gcc/testsuite/gcc.target/i386/xop-hadduX.c", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67138ea1b041fe1637da6b3568f064f172d9358c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fxop-hadduX.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67138ea1b041fe1637da6b3568f064f172d9358c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fxop-hadduX.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fxop-hadduX.c?ref=67138ea1b041fe1637da6b3568f064f172d9358c", "patch": "@@ -34,7 +34,6 @@ init_word ()\n     src1.si[i] = i;\n }\n \n-\n static void\n init_dword ()\n {\n@@ -58,6 +57,7 @@ check_byte2word ()\n \t    check_fails++;\t\n \t}\n     }\n+  return check_fails;\n }\n \n static int \n@@ -76,7 +76,7 @@ check_byte2dword ()\n \t    check_fails++;\n \t}\n     }\n-  return check_fails++;\n+  return check_fails;\n }\n \n static int\n@@ -96,14 +96,14 @@ check_byte2qword ()\n \t    check_fails++;\n \t}\n     }\n-  return check_fails++;\n+  return check_fails;\n }\n \n static int\n check_word2dword ()\n {\n   int i, j, s, t, check_fails = 0;\n-  for (i = 0; i < (NUM * 8); i = i + 8)\n+  for (i = 0; i < NUM * 8; i = i + 8)\n     {\n       for (j = 0; j < 4; j++)\n \t{\n@@ -114,6 +114,7 @@ check_word2dword ()\n \t    check_fails++;\t\n \t}\n     }\n+  return check_fails;\n }\n \n static int \n@@ -132,14 +133,14 @@ check_word2qword ()\n \t    check_fails++;\n \t}\n     }\n-  return check_fails++;\n+  return check_fails;\n }\n \n static int\n check_dword2qword ()\n {\n   int i, j, s, t, check_fails = 0;\n-  for (i = 0; i < (NUM * 4); i = i + 4)\n+  for (i = 0; i < NUM * 4; i = i + 4)\n     {\n       for (j = 0; j < 2; j++)\n \t{\n@@ -150,6 +151,7 @@ check_dword2qword ()\n \t    check_fails++;\t\n \t}\n     }\n+  return check_fails;\n }\n \n static void\n@@ -167,7 +169,7 @@ xop_test (void)\n   abort ();\n   \n   /* Check haddubd */\n-  for (i = 0; i < (NUM ); i++)\n+  for (i = 0; i < NUM; i++)\n     dst.x[i] = _mm_haddd_epu8 (src1.x[i]);\n   \n   if (check_byte2dword())\n@@ -183,14 +185,13 @@ xop_test (void)\n   /* Check hadduwd */\n   init_word ();\n \n-  for (i = 0; i < (NUM ); i++)\n+  for (i = 0; i < NUM; i++)\n     dst.x[i] = _mm_haddd_epu16 (src1.x[i]);\n   \n   if (check_word2dword())\n     abort (); \n    \n   /* Check haddbuwq */\n- \n   for (i = 0; i < NUM; i++)\n     dst.x[i] = _mm_haddq_epu16 (src1.x[i]);\n   \n@@ -199,7 +200,8 @@ xop_test (void)\n  \n   /* Check hadudq */\n   init_dword ();\n-    for (i = 0; i < NUM; i++)\n+  \n+  for (i = 0; i < NUM; i++)\n     dst.x[i] = _mm_haddq_epu32 (src1.x[i]);\n   \n   if (check_dword2qword())"}, {"sha": "e4c4373805fc9ea35bcd5b834d7cd39e80d0d068", "filename": "gcc/testsuite/gcc.target/i386/xop-hsubX.c", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67138ea1b041fe1637da6b3568f064f172d9358c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fxop-hsubX.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67138ea1b041fe1637da6b3568f064f172d9358c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fxop-hsubX.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fxop-hsubX.c?ref=67138ea1b041fe1637da6b3568f064f172d9358c", "patch": "@@ -34,7 +34,6 @@ init_sword ()\n     src1.si[i] = i;\n }\n \n-\n static void\n init_sdword ()\n {\n@@ -58,13 +57,14 @@ check_sbyte2word ()\n \t    check_fails++;\t\n \t}\n     }\n+  return check_fails;\n }\n \n static int\n check_sword2dword ()\n {\n   int i, j, s, t, check_fails = 0;\n-  for (i = 0; i < (NUM * 8); i = i + 8)\n+  for (i = 0; i < NUM * 8; i = i + 8)\n     {\n       for (j = 0; j < 4; j++)\n \t{\n@@ -75,13 +75,14 @@ check_sword2dword ()\n \t    check_fails++;\t\n \t}\n     }\n+  return check_fails;\n }\n \n static int\n check_dword2qword ()\n {\n   int i, j, s, t, check_fails = 0;\n-  for (i = 0; i < (NUM * 4); i = i + 4)\n+  for (i = 0; i < NUM * 4; i = i + 4)\n     {\n       for (j = 0; j < 2; j++)\n \t{\n@@ -92,6 +93,7 @@ check_dword2qword ()\n \t    check_fails++;\t\n \t}\n     }\n+  return check_fails;\n }\n \n static void\n@@ -106,21 +108,21 @@ xop_test (void)\n     dst.x[i] = _mm_hsubw_epi8 (src1.x[i]);\n   \n   if (check_sbyte2word())\n-  abort ();\n-  \n+    abort ();\n \n   /* Check hsubwd */\n   init_sword ();\n \n-  for (i = 0; i < (NUM ); i++)\n+  for (i = 0; i < NUM; i++)\n     dst.x[i] = _mm_hsubd_epi16 (src1.x[i]);\n   \n   if (check_sword2dword())\n     abort (); \n    \n    /* Check hsubdq */\n   init_sdword ();\n-    for (i = 0; i < NUM; i++)\n+\n+  for (i = 0; i < NUM; i++)\n     dst.x[i] = _mm_hsubq_epi32 (src1.x[i]);\n   \n   if (check_dword2qword())"}]}