{"sha": "0d23faac63ce40059a91650b0801fa680cc8cb9a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGQyM2ZhYWM2M2NlNDAwNTlhOTE2NTBiMDgwMWZhNjgwY2M4Y2I5YQ==", "commit": {"author": {"name": "Torvald Riegel", "email": "triegel@redhat.com", "date": "2012-03-13T22:01:34Z"}, "committer": {"name": "Torvald Riegel", "email": "torvald@gcc.gnu.org", "date": "2012-03-13T22:01:34Z"}, "message": "libitm: Fix lost wake-up in serial lock.\n\n\tPR libitm/52526\n\t* config/linux/rwlock.cc (GTM::gtm_rwlock::read_lock): Fix lost\n\twake-up.\n\nFrom-SVN: r185358", "tree": {"sha": "9bf6e180f1ef5968020eaafc59db2b5877e8e03f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9bf6e180f1ef5968020eaafc59db2b5877e8e03f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0d23faac63ce40059a91650b0801fa680cc8cb9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d23faac63ce40059a91650b0801fa680cc8cb9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d23faac63ce40059a91650b0801fa680cc8cb9a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d23faac63ce40059a91650b0801fa680cc8cb9a/comments", "author": {"login": "triegelrh", "id": 62400967, "node_id": "MDQ6VXNlcjYyNDAwOTY3", "avatar_url": "https://avatars.githubusercontent.com/u/62400967?v=4", "gravatar_id": "", "url": "https://api.github.com/users/triegelrh", "html_url": "https://github.com/triegelrh", "followers_url": "https://api.github.com/users/triegelrh/followers", "following_url": "https://api.github.com/users/triegelrh/following{/other_user}", "gists_url": "https://api.github.com/users/triegelrh/gists{/gist_id}", "starred_url": "https://api.github.com/users/triegelrh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/triegelrh/subscriptions", "organizations_url": "https://api.github.com/users/triegelrh/orgs", "repos_url": "https://api.github.com/users/triegelrh/repos", "events_url": "https://api.github.com/users/triegelrh/events{/privacy}", "received_events_url": "https://api.github.com/users/triegelrh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "74788b800931abc7ab79a06812799862eede96c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74788b800931abc7ab79a06812799862eede96c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74788b800931abc7ab79a06812799862eede96c0"}], "stats": {"total": 32, "additions": 32, "deletions": 0}, "files": [{"sha": "97c264522bbf81f5d35c9443e63281c2a537f2b4", "filename": "libitm/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d23faac63ce40059a91650b0801fa680cc8cb9a/libitm%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d23faac63ce40059a91650b0801fa680cc8cb9a/libitm%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2FChangeLog?ref=0d23faac63ce40059a91650b0801fa680cc8cb9a", "patch": "@@ -1,3 +1,9 @@\n+2012-03-13  Torvald Riegel  <triegel@redhat.com>\n+\n+\tPR libitm/52526\n+\t* config/linux/rwlock.cc (GTM::gtm_rwlock::read_lock): Fix lost\n+\twake-up.\n+\n 2012-03-12  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* configure.tgt (*-*-osf*): Remove."}, {"sha": "cf1fdd55a91d20673eb0634be3c255387c5e9387", "filename": "libitm/config/linux/rwlock.cc", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d23faac63ce40059a91650b0801fa680cc8cb9a/libitm%2Fconfig%2Flinux%2Frwlock.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d23faac63ce40059a91650b0801fa680cc8cb9a/libitm%2Fconfig%2Flinux%2Frwlock.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2Fconfig%2Flinux%2Frwlock.cc?ref=0d23faac63ce40059a91650b0801fa680cc8cb9a", "patch": "@@ -74,6 +74,32 @@ gtm_rwlock::read_lock (gtm_thread *tx)\n \t  atomic_thread_fence (memory_order_seq_cst);\n \t  if (writers.load (memory_order_relaxed))\n \t    futex_wait(&readers, 1);\n+\t  else\n+\t    {\n+\t      // There is no writer, actually.  However, we can have enabled\n+\t      // a futex_wait in other readers by previously setting readers\n+\t      // to 1, so we have to wake them up because there is no writer\n+\t      // that will do that.  We don't know whether the wake-up is\n+\t      // really necessary, but we can get lost wake-up situations\n+\t      // otherwise.\n+\t      // No additional barrier nor a nonrelaxed load is required due\n+\t      // to coherency constraints.  write_unlock() checks readers to\n+\t      // see if any wake-up is necessary, but it is not possible that\n+\t      // a reader's store prevents a required later writer wake-up;\n+\t      // If the waking reader's store (value 0) is in modification\n+\t      // order after the waiting readers store (value 1), then the\n+\t      // latter will have to read 0 in the futex due to coherency\n+\t      // constraints and the happens-before enforced by the futex\n+\t      // (paragraph 6.10 in the standard, 6.19.4 in the Batty et al\n+\t      // TR); second, the writer will be forced to read in\n+\t      // modification order too due to Dekker-style synchronization\n+\t      // with the waiting reader (see write_unlock()).\n+\t      // ??? Can we avoid the wake-up if readers is zero (like in\n+\t      // write_unlock())?  Anyway, this might happen too infrequently\n+\t      // to improve performance significantly.\n+\t      readers.store (0, memory_order_relaxed);\n+\t      futex_wake(&readers, INT_MAX);\n+\t    }\n \t}\n \n       // And we try again to acquire a read lock."}]}