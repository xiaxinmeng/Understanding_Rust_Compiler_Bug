{"sha": "1188cf5fb7d9c3f0753cdb11d961fe90113991e8", "node_id": "C_kwDOANBUbNoAKDExODhjZjVmYjdkOWMzZjA3NTNjZGIxMWQ5NjFmZTkwMTEzOTkxZTg", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2021-11-02T08:23:04Z"}, "committer": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2021-11-02T08:26:14Z"}, "message": "x86_64: Expand ashrv1ti (and PR target/102986)\n\nThis patch was originally intended to implement 128-bit arithmetic right\nshifts by constants of vector registers (V1TImode), but while working on\nit I discovered the (my) recent ICE on valid regression now known as\nPR target/102986.\n\nAs diagnosed by Jakub, expanders for shifts are not allowed to fail, and\nso any backend that provides a shift optab needs to handle variable amount\nshifts as well as constant shifts [even though the middle-end knows how\nto synthesize these for vector modes].  This constraint could be relaxed\nin the middle-end, but it makes sense to fix this in my erroneous code.\n\nThe solution is to change the constraints on the recently added (and new)\nshift expanders from SImode const_int_register to QImode general operand,\nmatching the TImode expanders' constraints, and then simply check for\n!CONST_INT_P at the start of the ix86_expand_v1ti_* functions, converting\nthe operands from V1TImode to TImode, performing the TImode operation\nand converting the result back to V1TImode.\n\nOne nice benefit of this strategy, is that it allows us to implement\nUros' recent suggestion, that we should be more efficiently converting\nbetween these modes, avoiding the use of memory and using the same idiom\nas LLVM or using pextrq/pinsrq where available.  The new helper functions\nix86_expand_v1ti_to_ti and ix86_expand_ti_to_v1ti are sufficient to take\ncare of this.  Interestingly partial support for this is already present,\nbut x86_64's generic tuning prefers memory transfers to avoid penalizing\nmicroarchitectures with significant interunit delays.  With these changes\nwe now generate both pextrq and pinsrq for -mtune=native.\n\nThe main body of the patch is to implement arithmetic right shift in\naddition to the logical right shift and left shift implemented in the\nprevious patch.  This expander provides no less than 13 different code\nsequences, special casing the different constant shifts, including\nvariants taking advantage of TARGET_AVX2 and TARGET_SSE4_1.  The code\nis structured with the faster/shorter sequences and the start, and\nthe generic implementations at the end.\n\nFor the record, the implementations are:\n\nashr_127:\t// Shift 127, 2 operations, 10 bytes\n        pshufd  $255, %xmm0, %xmm0\n        psrad   $31, %xmm0\n        ret\n\nashr_64:\t// Shift by 64, 3 operations, 14 bytes\n        pshufd  $255, %xmm0, %xmm1\n        psrad   $31, %xmm1\n        punpckhqdq      %xmm1, %xmm0\n        ret\n\nashr_96:\t// Shift by 96, 3 operations, 18 bytes\n        movdqa  %xmm0, %xmm1\n        psrad   $31, %xmm1\n        punpckhqdq      %xmm1, %xmm0\n        pshufd  $253, %xmm0, %xmm0\n        ret\n\nashr_8:\t\t// Shift by 8/16/24/32 on AVX2, 3 operations, 16 bytes\n        vpsrad  $8, %xmm0, %xmm1\n        vpsrldq $1, %xmm0, %xmm0\n        vpblendd        $7, %xmm0, %xmm1, %xmm0\n        ret\n\nashr_8:\t\t// Shift by 8/16/24/32 on SSE4.1, 3 operations, 24 bytes\n        movdqa  %xmm0, %xmm1\n        psrldq  $1, %xmm0\n        psrad   $8, %xmm1\n        pblendw $63, %xmm0, %xmm1\n        movdqa  %xmm1, %xmm0\n        ret\n\nashr_97:\t// Shifts by 97..126, 4 operations, 23 bytes\n        movdqa  %xmm0, %xmm1\n        psrad   $31, %xmm0\n        psrad   $1, %xmm1\n        punpckhqdq      %xmm0, %xmm1\n        pshufd  $253, %xmm1, %xmm0\n        ret\n\nashr_48:\t// Shifts by 48/80 on SSE4.1, 4 operations, 25 bytes\n        movdqa  %xmm0, %xmm1\n        pshufd  $255, %xmm0, %xmm0\n        psrldq  $6, %xmm1\n        psrad   $31, %xmm0\n        pblendw $31, %xmm1, %xmm0\n        ret\n\nashr_8:\t\t// Shifts by multiples of 8, 5 operations, 28 bytes\n        movdqa  %xmm0, %xmm1\n        pshufd  $255, %xmm0, %xmm0\n        psrad   $31, %xmm0\n        psrldq  $1, %xmm1\n        pslldq  $15, %xmm0\n        por     %xmm1, %xmm0\n        ret\n\nashr_1:\t\t// Shifts by 1..31 on AVX2, 6 operations, 30 bytes\n        vpsrldq $8, %xmm0, %xmm2\n        vpsrad  $1, %xmm0, %xmm1\n        vpsllq  $63, %xmm2, %xmm2\n        vpsrlq  $1, %xmm0, %xmm0\n        vpor    %xmm2, %xmm0, %xmm0\n        vpblendd        $7, %xmm0, %xmm1, %xmm0\n        ret\n\nashr_1:\t\t// Shifts by 1..15 on SSE4.1, 6 operations, 42 bytes\n        movdqa  %xmm0, %xmm2\n        movdqa  %xmm0, %xmm1\n        psrldq  $8, %xmm2\n        psrlq   $1, %xmm0\n        psllq   $63, %xmm2\n        psrad   $1, %xmm1\n        por     %xmm2, %xmm0\n        pblendw $63, %xmm0, %xmm1\n        movdqa  %xmm1, %xmm0\n        ret\n\nashr_1:\t\t// Shift by 1, 8 operations, 46 bytes\n        movdqa  %xmm0, %xmm1\n        movdqa  %xmm0, %xmm2\n        psrldq  $8, %xmm2\n        psrlq   $63, %xmm1\n        psllq   $63, %xmm2\n        psrlq   $1, %xmm0\n        pshufd  $191, %xmm1, %xmm1\n        por     %xmm2, %xmm0\n        psllq   $31, %xmm1\n        por     %xmm1, %xmm0\n        ret\n\nashr_65:\t// Shifts by 65..95, 8 operations, 42 bytes\n        pshufd  $255, %xmm0, %xmm1\n        psrldq  $8, %xmm0\n        psrad   $31, %xmm1\n        psrlq   $1, %xmm0\n        movdqa  %xmm1, %xmm2\n        psllq   $63, %xmm1\n        pslldq  $8, %xmm2\n        por     %xmm2, %xmm1\n        por     %xmm1, %xmm0\n        ret\n\nashr_2:\t\t// Shifts from 2..63, 9 operations, 47 bytes\n        pshufd  $255, %xmm0, %xmm1\n        movdqa  %xmm0, %xmm2\n        psrad   $31, %xmm1\n        psrldq  $8, %xmm2\n        psllq   $62, %xmm2\n        psrlq   $2, %xmm0\n        pslldq  $8, %xmm1\n        por     %xmm2, %xmm0\n        psllq   $62, %xmm1\n        por     %xmm1, %xmm0\n        ret\n\nTo test these changes there are several new test cases.  sse2-v1ti-shift-2.c\nis a compile-test designed to spot/catch PR target/102986 [for all shifts\nand rotates by variable amounts], and sse2-v1ti-shift-3.c is an execution\ntest to confirm shifts/rotates by variable amounts produce the same results\nfor TImode and V1TImode.  sse2-v1ti-ashiftrt-1.c is a (similar) execution\ntest to confirm arithmetic right shifts by different constants produce\nidentical results between TImode and V1TImode.  sse2-v1ti-ashift-[23].c are\nduplicates of this file as compilation tests specifying -mavx2 and -msse4.1\nrespectively to trigger all the paths through the new expander.\n\n2021-11-02  Roger Sayle  <roger@nextmovesoftware.com>\n\t    Jakub Jelinek  <jakub@redhat.com>\n\ngcc/ChangeLog\n\tPR target/102986\n\t* config/i386/i386-expand.c (ix86_expand_v1ti_to_ti,\n\tix86_expand_ti_to_v1ti): New helper functions.\n\t(ix86_expand_v1ti_shift): Check if the amount operand is an\n\tinteger constant, and expand as a TImode shift if it isn't.\n\t(ix86_expand_v1ti_rotate): Check if the amount operand is an\n\tinteger constant, and expand as a TImode rotate if it isn't.\n\t(ix86_expand_v1ti_ashiftrt): New function to expand arithmetic\n\tright shifts of V1TImode quantities.\n\t* config/i386/i386-protos.h (ix86_expand_v1ti_ashift): Prototype.\n\t* config/i386/sse.md (ashlv1ti3, lshrv1ti3): Change constraints\n\tto QImode general_operand, and let the helper functions lower\n\tshifts by non-constant operands, as TImode shifts.  Make\n\tconditional on TARGET_64BIT.\n\t(ashrv1ti3): New expander calling ix86_expand_v1ti_ashiftrt.\n\t(rotlv1ti3, rotrv1ti3): Change shift operand to QImode.\n\tMake conditional on TARGET_64BIT.\n\ngcc/testsuite/ChangeLog\n\tPR target/102986\n\t* gcc.target/i386/sse2-v1ti-ashiftrt-1.c: New test case.\n\t* gcc.target/i386/sse2-v1ti-ashiftrt-2.c: New test case.\n\t* gcc.target/i386/sse2-v1ti-ashiftrt-3.c: New test case.\n\t* gcc.target/i386/sse2-v1ti-shift-2.c: New test case.\n\t* gcc.target/i386/sse2-v1ti-shift-3.c: New test case.", "tree": {"sha": "21e30cc901caabdce18eaed9dbd9da52928d640a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/21e30cc901caabdce18eaed9dbd9da52928d640a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1188cf5fb7d9c3f0753cdb11d961fe90113991e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1188cf5fb7d9c3f0753cdb11d961fe90113991e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1188cf5fb7d9c3f0753cdb11d961fe90113991e8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1188cf5fb7d9c3f0753cdb11d961fe90113991e8/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e72f783c86264dc4a8f0addd340a9950da1d1b6d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e72f783c86264dc4a8f0addd340a9950da1d1b6d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e72f783c86264dc4a8f0addd340a9950da1d1b6d"}], "stats": {"total": 1181, "additions": 1168, "deletions": 13}, "files": [{"sha": "088e6af2258a56bb4eeb1b0402624a48d080d88a", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 523, "deletions": 5, "changes": 528, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1188cf5fb7d9c3f0753cdb11d961fe90113991e8/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1188cf5fb7d9c3f0753cdb11d961fe90113991e8/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=1188cf5fb7d9c3f0753cdb11d961fe90113991e8", "patch": "@@ -6157,12 +6157,53 @@ ix86_split_lshr (rtx *operands, rtx scratch, machine_mode mode)\n     }\n }\n \n+/* Expand move of V1TI mode register X to a new TI mode register.  */\n+static rtx\n+ix86_expand_v1ti_to_ti (rtx x)\n+{\n+  rtx result = gen_reg_rtx (TImode);\n+  emit_move_insn (result, gen_lowpart (TImode, x));\n+  return result;\n+}\n+\n+/* Expand move of TI mode register X to a new V1TI mode register.  */\n+static rtx\n+ix86_expand_ti_to_v1ti (rtx x)\n+{\n+  rtx result = gen_reg_rtx (V1TImode);\n+  if (TARGET_SSE2)\n+    {\n+      rtx lo = gen_lowpart (DImode, x);\n+      rtx hi = gen_highpart (DImode, x);\n+      rtx tmp = gen_reg_rtx (V2DImode);\n+      emit_insn (gen_vec_concatv2di (tmp, lo, hi));\n+      emit_move_insn (result, gen_lowpart (V1TImode, tmp));\n+    }\n+  else\n+    emit_move_insn (result, gen_lowpart (V1TImode, x));\n+  return result;\n+}\n+\n /* Expand V1TI mode shift (of rtx_code CODE) by constant.  */\n-void ix86_expand_v1ti_shift (enum rtx_code code, rtx operands[])\n+void\n+ix86_expand_v1ti_shift (enum rtx_code code, rtx operands[])\n {\n-  HOST_WIDE_INT bits = INTVAL (operands[2]) & 127;\n   rtx op1 = force_reg (V1TImode, operands[1]);\n \n+  if (!CONST_INT_P (operands[2]))\n+    {\n+      rtx tmp1 = ix86_expand_v1ti_to_ti (op1);\n+      rtx tmp2 = gen_reg_rtx (TImode);\n+      rtx (*shift) (rtx, rtx, rtx)\n+\t    = (code == ASHIFT) ? gen_ashlti3 : gen_lshrti3;\n+      emit_insn (shift (tmp2, tmp1, operands[2]));\n+      rtx tmp3 = ix86_expand_ti_to_v1ti (tmp2);\n+      emit_move_insn (operands[0], tmp3);\n+      return;\n+    }\n+\n+  HOST_WIDE_INT bits = INTVAL (operands[2]) & 127;\n+\n   if (bits == 0)\n     {\n       emit_move_insn (operands[0], op1);\n@@ -6173,7 +6214,7 @@ void ix86_expand_v1ti_shift (enum rtx_code code, rtx operands[])\n     {\n       rtx tmp = gen_reg_rtx (V1TImode);\n       if (code == ASHIFT)\n-        emit_insn (gen_sse2_ashlv1ti3 (tmp, op1, GEN_INT (bits)));\n+\temit_insn (gen_sse2_ashlv1ti3 (tmp, op1, GEN_INT (bits)));\n       else\n \temit_insn (gen_sse2_lshrv1ti3 (tmp, op1, GEN_INT (bits)));\n       emit_move_insn (operands[0], tmp);\n@@ -6228,11 +6269,25 @@ void ix86_expand_v1ti_shift (enum rtx_code code, rtx operands[])\n }\n \n /* Expand V1TI mode rotate (of rtx_code CODE) by constant.  */\n-void ix86_expand_v1ti_rotate (enum rtx_code code, rtx operands[])\n+void\n+ix86_expand_v1ti_rotate (enum rtx_code code, rtx operands[])\n {\n-  HOST_WIDE_INT bits = INTVAL (operands[2]) & 127;\n   rtx op1 = force_reg (V1TImode, operands[1]);\n \n+  if (!CONST_INT_P (operands[2]))\n+    {\n+      rtx tmp1 = ix86_expand_v1ti_to_ti (op1);\n+      rtx tmp2 = gen_reg_rtx (TImode);\n+      rtx (*rotate) (rtx, rtx, rtx)\n+\t    = (code == ROTATE) ? gen_rotlti3 : gen_rotrti3;\n+      emit_insn (rotate (tmp2, tmp1, operands[2]));\n+      rtx tmp3 = ix86_expand_ti_to_v1ti (tmp2);\n+      emit_move_insn (operands[0], tmp3);\n+      return;\n+    }\n+\n+  HOST_WIDE_INT bits = INTVAL (operands[2]) & 127;\n+\n   if (bits == 0)\n     {\n       emit_move_insn (operands[0], op1);\n@@ -6320,6 +6375,469 @@ void ix86_expand_v1ti_rotate (enum rtx_code code, rtx operands[])\n   emit_move_insn (operands[0], tmp4);\n }\n \n+/* Expand V1TI mode ashiftrt by constant.  */\n+void\n+ix86_expand_v1ti_ashiftrt (rtx operands[])\n+{\n+  rtx op1 = force_reg (V1TImode, operands[1]);\n+\n+  if (!CONST_INT_P (operands[2]))\n+    {\n+      rtx tmp1 = ix86_expand_v1ti_to_ti (op1);\n+      rtx tmp2 = gen_reg_rtx (TImode);\n+      emit_insn (gen_ashrti3 (tmp2, tmp1, operands[2]));\n+      rtx tmp3 = ix86_expand_ti_to_v1ti (tmp2);\n+      emit_move_insn (operands[0], tmp3);\n+      return;\n+    }\n+\n+  HOST_WIDE_INT bits = INTVAL (operands[2]) & 127;\n+\n+  if (bits == 0)\n+    {\n+      emit_move_insn (operands[0], op1);\n+      return;\n+    }\n+\n+  if (bits == 127)\n+    {\n+      /* Two operations.  */\n+      rtx tmp1 = gen_reg_rtx (V4SImode);\n+      rtx tmp2 = gen_reg_rtx (V4SImode);\n+      emit_move_insn (tmp1, gen_lowpart (V4SImode, op1));\n+      emit_insn (gen_sse2_pshufd (tmp2, tmp1, GEN_INT (0xff)));\n+\n+      rtx tmp3 = gen_reg_rtx (V4SImode);\n+      emit_insn (gen_ashrv4si3 (tmp3, tmp2, GEN_INT (31)));\n+\n+      rtx tmp4 = gen_reg_rtx (V1TImode);\n+      emit_move_insn (tmp4, gen_lowpart (V1TImode, tmp3));\n+      emit_move_insn (operands[0], tmp4);\n+      return;\n+    }\n+\n+  if (bits == 64)\n+    {\n+      /* Three operations.  */\n+      rtx tmp1 = gen_reg_rtx (V4SImode);\n+      rtx tmp2 = gen_reg_rtx (V4SImode);\n+      emit_move_insn (tmp1, gen_lowpart (V4SImode, op1));\n+      emit_insn (gen_sse2_pshufd (tmp2, tmp1, GEN_INT (0xff)));\n+\n+      rtx tmp3 = gen_reg_rtx (V4SImode);\n+      emit_insn (gen_ashrv4si3 (tmp3, tmp2, GEN_INT (31)));\n+\n+      rtx tmp4 = gen_reg_rtx (V2DImode);\n+      rtx tmp5 = gen_reg_rtx (V2DImode);\n+      rtx tmp6 = gen_reg_rtx (V2DImode);\n+      emit_move_insn (tmp4, gen_lowpart (V2DImode, tmp1));\n+      emit_move_insn (tmp5, gen_lowpart (V2DImode, tmp3));\n+      emit_insn (gen_vec_interleave_highv2di (tmp6, tmp4, tmp5));\n+\n+      rtx tmp7 = gen_reg_rtx (V1TImode);\n+      emit_move_insn (tmp7, gen_lowpart (V1TImode, tmp6));\n+      emit_move_insn (operands[0], tmp7);\n+      return;\n+    }\n+\n+  if (bits == 96)\n+    {\n+      /* Three operations.  */\n+      rtx tmp3 = gen_reg_rtx (V2DImode);\n+      rtx tmp1 = gen_reg_rtx (V4SImode);\n+      rtx tmp2 = gen_reg_rtx (V4SImode);\n+      emit_move_insn (tmp1, gen_lowpart (V4SImode, op1));\n+      emit_insn (gen_ashrv4si3 (tmp2, tmp1, GEN_INT (31)));\n+\n+      rtx tmp4 = gen_reg_rtx (V2DImode);\n+      rtx tmp5 = gen_reg_rtx (V2DImode);\n+      emit_move_insn (tmp3, gen_lowpart (V2DImode, tmp1));\n+      emit_move_insn (tmp4, gen_lowpart (V2DImode, tmp2));\n+      emit_insn (gen_vec_interleave_highv2di (tmp5, tmp3, tmp4));\n+\n+      rtx tmp6 = gen_reg_rtx (V4SImode);\n+      rtx tmp7 = gen_reg_rtx (V4SImode);\n+      emit_move_insn (tmp6, gen_lowpart (V4SImode, tmp5));\n+      emit_insn (gen_sse2_pshufd (tmp7, tmp6, GEN_INT (0xfd)));\n+\n+      rtx tmp8 = gen_reg_rtx (V1TImode);\n+      emit_move_insn (tmp8, gen_lowpart (V1TImode, tmp7));\n+      emit_move_insn (operands[0], tmp8);\n+      return;\n+    }\n+\n+  if (TARGET_AVX2 || TARGET_SSE4_1)\n+    {\n+      /* Three operations.  */\n+      if (bits == 32)\n+\t{\n+\t  rtx tmp1 = gen_reg_rtx (V4SImode);\n+\t  rtx tmp2 = gen_reg_rtx (V4SImode);\n+\t  emit_move_insn (tmp1, gen_lowpart (V4SImode, op1));\n+\t  emit_insn (gen_ashrv4si3 (tmp2, tmp1, GEN_INT (31)));\n+\n+\t  rtx tmp3 = gen_reg_rtx (V1TImode);\n+\t  emit_insn (gen_sse2_lshrv1ti3 (tmp3, op1, GEN_INT (32)));\n+\n+\t  if (TARGET_AVX2)\n+\t    {\n+\t      rtx tmp4 = gen_reg_rtx (V4SImode);\n+\t      rtx tmp5 = gen_reg_rtx (V4SImode);\n+\t      emit_move_insn (tmp4, gen_lowpart (V4SImode, tmp3));\n+\t      emit_insn (gen_avx2_pblenddv4si (tmp5, tmp2, tmp4,\n+\t\t\t\t\t       GEN_INT (7)));\n+\n+\t      rtx tmp6 = gen_reg_rtx (V1TImode);\n+\t      emit_move_insn (tmp6, gen_lowpart (V1TImode, tmp5));\n+\t      emit_move_insn (operands[0], tmp6);\n+\t    }\n+\t  else\n+\t    {\n+\t      rtx tmp4 = gen_reg_rtx (V8HImode);\n+\t      rtx tmp5 = gen_reg_rtx (V8HImode);\n+\t      rtx tmp6 = gen_reg_rtx (V8HImode);\n+\t      emit_move_insn (tmp4, gen_lowpart (V8HImode, tmp2));\n+\t      emit_move_insn (tmp5, gen_lowpart (V8HImode, tmp3));\n+\t      emit_insn (gen_sse4_1_pblendw (tmp6, tmp4, tmp5,\n+\t\t\t\t\t     GEN_INT (0x3f)));\n+\n+\t      rtx tmp7 = gen_reg_rtx (V1TImode);\n+\t      emit_move_insn (tmp7, gen_lowpart (V1TImode, tmp6));\n+\t      emit_move_insn (operands[0], tmp7);\n+\t    }\n+\t  return;\n+\t}\n+\n+      /* Three operations.  */\n+      if (bits == 8 || bits == 16 || bits == 24)\n+\t{\n+\t  rtx tmp1 = gen_reg_rtx (V4SImode);\n+\t  rtx tmp2 = gen_reg_rtx (V4SImode);\n+\t  emit_move_insn (tmp1, gen_lowpart (V4SImode, op1));\n+\t  emit_insn (gen_ashrv4si3 (tmp2, tmp1, GEN_INT (bits)));\n+\n+\t  rtx tmp3 = gen_reg_rtx (V1TImode);\n+\t  emit_insn (gen_sse2_lshrv1ti3 (tmp3, op1, GEN_INT (bits)));\n+\n+\t  if (TARGET_AVX2)\n+\t    {\n+\t      rtx tmp4 = gen_reg_rtx (V4SImode);\n+\t      rtx tmp5 = gen_reg_rtx (V4SImode);\n+\t      emit_move_insn (tmp4, gen_lowpart (V4SImode, tmp3));\n+\t      emit_insn (gen_avx2_pblenddv4si (tmp5, tmp2, tmp4,\n+\t\t\t\t\t       GEN_INT (7)));\n+\n+\t      rtx tmp6 = gen_reg_rtx (V1TImode);\n+\t      emit_move_insn (tmp6, gen_lowpart (V1TImode, tmp5));\n+\t      emit_move_insn (operands[0], tmp6);\n+\t    }\n+\t  else\n+\t    {\n+\t      rtx tmp4 = gen_reg_rtx (V8HImode);\n+\t      rtx tmp5 = gen_reg_rtx (V8HImode);\n+\t      rtx tmp6 = gen_reg_rtx (V8HImode);\n+\t      emit_move_insn (tmp4, gen_lowpart (V8HImode, tmp2));\n+\t      emit_move_insn (tmp5, gen_lowpart (V8HImode, tmp3));\n+\t      emit_insn (gen_sse4_1_pblendw (tmp6, tmp4, tmp5,\n+\t\t\t\t\t     GEN_INT (0x3f)));\n+\n+\t      rtx tmp7 = gen_reg_rtx (V1TImode);\n+\t      emit_move_insn (tmp7, gen_lowpart (V1TImode, tmp6));\n+\t      emit_move_insn (operands[0], tmp7);\n+\t    }\n+\t  return;\n+\t}\n+    }\n+\n+  if (bits > 96)\n+    {\n+      /* Four operations.  */\n+      rtx tmp1 = gen_reg_rtx (V4SImode);\n+      rtx tmp2 = gen_reg_rtx (V4SImode);\n+      emit_move_insn (tmp1, gen_lowpart (V4SImode, op1));\n+      emit_insn (gen_ashrv4si3 (tmp2, tmp1, GEN_INT (bits - 96)));\n+\n+      rtx tmp3 = gen_reg_rtx (V4SImode);\n+      emit_insn (gen_ashrv4si3 (tmp3, tmp1, GEN_INT (31)));\n+\n+      rtx tmp4 = gen_reg_rtx (V2DImode);\n+      rtx tmp5 = gen_reg_rtx (V2DImode);\n+      rtx tmp6 = gen_reg_rtx (V2DImode);\n+      emit_move_insn (tmp4, gen_lowpart (V2DImode, tmp2));\n+      emit_move_insn (tmp5, gen_lowpart (V2DImode, tmp3));\n+      emit_insn (gen_vec_interleave_highv2di (tmp6, tmp4, tmp5));\n+\n+      rtx tmp7 = gen_reg_rtx (V4SImode);\n+      rtx tmp8 = gen_reg_rtx (V4SImode);\n+      emit_move_insn (tmp7, gen_lowpart (V4SImode, tmp6));\n+      emit_insn (gen_sse2_pshufd (tmp8, tmp7, GEN_INT (0xfd)));\n+\n+      rtx tmp9 = gen_reg_rtx (V1TImode);\n+      emit_move_insn (tmp9, gen_lowpart (V1TImode, tmp8));\n+      emit_move_insn (operands[0], tmp9);\n+      return;\n+    }\n+\n+  if (TARGET_SSE4_1 && (bits == 48 || bits == 80))\n+    {\n+      /* Four operations.  */\n+      rtx tmp1 = gen_reg_rtx (V4SImode);\n+      rtx tmp2 = gen_reg_rtx (V4SImode);\n+      emit_move_insn (tmp1, gen_lowpart (V4SImode, op1));\n+      emit_insn (gen_sse2_pshufd (tmp2, tmp1, GEN_INT (0xff)));\n+\n+      rtx tmp3 = gen_reg_rtx (V4SImode);\n+      emit_insn (gen_ashrv4si3 (tmp3, tmp2, GEN_INT (31)));\n+\n+      rtx tmp4 = gen_reg_rtx (V1TImode);\n+      emit_insn (gen_sse2_lshrv1ti3 (tmp4, op1, GEN_INT (bits)));\n+\n+      rtx tmp5 = gen_reg_rtx (V8HImode);\n+      rtx tmp6 = gen_reg_rtx (V8HImode);\n+      rtx tmp7 = gen_reg_rtx (V8HImode);\n+      emit_move_insn (tmp5, gen_lowpart (V8HImode, tmp3));\n+      emit_move_insn (tmp6, gen_lowpart (V8HImode, tmp4));\n+      emit_insn (gen_sse4_1_pblendw (tmp7, tmp5, tmp6,\n+\t\t\t\t     GEN_INT (bits == 48 ? 0x1f : 0x07)));\n+\n+      rtx tmp8 = gen_reg_rtx (V1TImode);\n+      emit_move_insn (tmp8, gen_lowpart (V1TImode, tmp7));\n+      emit_move_insn (operands[0], tmp8);\n+      return;\n+    }\n+\n+  if ((bits & 7) == 0)\n+    {\n+      /* Five operations.  */\n+      rtx tmp1 = gen_reg_rtx (V4SImode);\n+      rtx tmp2 = gen_reg_rtx (V4SImode);\n+      emit_move_insn (tmp1, gen_lowpart (V4SImode, op1));\n+      emit_insn (gen_sse2_pshufd (tmp2, tmp1, GEN_INT (0xff)));\n+\n+      rtx tmp3 = gen_reg_rtx (V4SImode);\n+      emit_insn (gen_ashrv4si3 (tmp3, tmp2, GEN_INT (31)));\n+\n+      rtx tmp4 = gen_reg_rtx (V1TImode);\n+      emit_insn (gen_sse2_lshrv1ti3 (tmp4, op1, GEN_INT (bits)));\n+\n+      rtx tmp5 = gen_reg_rtx (V1TImode);\n+      rtx tmp6 = gen_reg_rtx (V1TImode);\n+      emit_move_insn (tmp5, gen_lowpart (V1TImode, tmp3));\n+      emit_insn (gen_sse2_ashlv1ti3 (tmp6, tmp5, GEN_INT (128 - bits)));\n+\n+      rtx tmp7 = gen_reg_rtx (V2DImode);\n+      rtx tmp8 = gen_reg_rtx (V2DImode);\n+      rtx tmp9 = gen_reg_rtx (V2DImode);\n+      emit_move_insn (tmp7, gen_lowpart (V2DImode, tmp4));\n+      emit_move_insn (tmp8, gen_lowpart (V2DImode, tmp6));\n+      emit_insn (gen_iorv2di3 (tmp9, tmp7, tmp8));\n+\n+      rtx tmp10 = gen_reg_rtx (V1TImode);\n+      emit_move_insn (tmp10, gen_lowpart (V1TImode, tmp9));\n+      emit_move_insn (operands[0], tmp10);\n+      return;\n+    }\n+\n+  if (TARGET_AVX2 && bits < 32)\n+    {\n+      /* Six operations.  */\n+      rtx tmp1 = gen_reg_rtx (V4SImode);\n+      rtx tmp2 = gen_reg_rtx (V4SImode);\n+      emit_move_insn (tmp1, gen_lowpart (V4SImode, op1));\n+      emit_insn (gen_ashrv4si3 (tmp2, tmp1, GEN_INT (bits)));\n+\n+      rtx tmp3 = gen_reg_rtx (V1TImode);\n+      emit_insn (gen_sse2_lshrv1ti3 (tmp3, op1, GEN_INT (64)));\n+\n+      rtx tmp4 = gen_reg_rtx (V2DImode);\n+      rtx tmp5 = gen_reg_rtx (V2DImode);\n+      emit_move_insn (tmp4, gen_lowpart (V2DImode, op1));\n+      emit_insn (gen_lshrv2di3 (tmp5, tmp4, GEN_INT (bits)));\n+\n+      rtx tmp6 = gen_reg_rtx (V2DImode);\n+      rtx tmp7 = gen_reg_rtx (V2DImode);\n+      emit_move_insn (tmp6, gen_lowpart (V2DImode, tmp3));\n+      emit_insn (gen_ashlv2di3 (tmp7, tmp6, GEN_INT (64 - bits)));\n+\n+      rtx tmp8 = gen_reg_rtx (V2DImode);\n+      emit_insn (gen_iorv2di3 (tmp8, tmp5, tmp7));\n+\n+      rtx tmp9 = gen_reg_rtx (V4SImode);\n+      rtx tmp10 = gen_reg_rtx (V4SImode);\n+      emit_move_insn (tmp9, gen_lowpart (V4SImode, tmp8));\n+      emit_insn (gen_avx2_pblenddv4si (tmp10, tmp2, tmp9, GEN_INT (7)));\n+\n+      rtx tmp11 = gen_reg_rtx (V1TImode);\n+      emit_move_insn (tmp11, gen_lowpart (V1TImode, tmp10));\n+      emit_move_insn (operands[0], tmp11);\n+      return;\n+    }\n+\n+  if (TARGET_SSE4_1 && bits < 15)\n+    {\n+      /* Six operations.  */\n+      rtx tmp1 = gen_reg_rtx (V4SImode);\n+      rtx tmp2 = gen_reg_rtx (V4SImode);\n+      emit_move_insn (tmp1, gen_lowpart (V4SImode, op1));\n+      emit_insn (gen_ashrv4si3 (tmp2, tmp1, GEN_INT (bits)));\n+\n+      rtx tmp3 = gen_reg_rtx (V1TImode);\n+      emit_insn (gen_sse2_lshrv1ti3 (tmp3, op1, GEN_INT (64)));\n+\n+      rtx tmp4 = gen_reg_rtx (V2DImode);\n+      rtx tmp5 = gen_reg_rtx (V2DImode);\n+      emit_move_insn (tmp4, gen_lowpart (V2DImode, op1));\n+      emit_insn (gen_lshrv2di3 (tmp5, tmp4, GEN_INT (bits)));\n+\n+      rtx tmp6 = gen_reg_rtx (V2DImode);\n+      rtx tmp7 = gen_reg_rtx (V2DImode);\n+      emit_move_insn (tmp6, gen_lowpart (V2DImode, tmp3));\n+      emit_insn (gen_ashlv2di3 (tmp7, tmp6, GEN_INT (64 - bits)));\n+\n+      rtx tmp8 = gen_reg_rtx (V2DImode);\n+      emit_insn (gen_iorv2di3 (tmp8, tmp5, tmp7));\n+\n+      rtx tmp9 = gen_reg_rtx (V8HImode);\n+      rtx tmp10 = gen_reg_rtx (V8HImode);\n+      rtx tmp11 = gen_reg_rtx (V8HImode);\n+      emit_move_insn (tmp9, gen_lowpart (V8HImode, tmp2));\n+      emit_move_insn (tmp10, gen_lowpart (V8HImode, tmp8));\n+      emit_insn (gen_sse4_1_pblendw (tmp11, tmp9, tmp10, GEN_INT (0x3f)));\n+\n+      rtx tmp12 = gen_reg_rtx (V1TImode);\n+      emit_move_insn (tmp12, gen_lowpart (V1TImode, tmp11));\n+      emit_move_insn (operands[0], tmp12);\n+      return;\n+    }\n+\n+  if (bits == 1)\n+    {\n+      /* Eight operations.  */\n+      rtx tmp1 = gen_reg_rtx (V1TImode);\n+      emit_insn (gen_sse2_lshrv1ti3 (tmp1, op1, GEN_INT (64)));\n+\n+      rtx tmp2 = gen_reg_rtx (V2DImode);\n+      rtx tmp3 = gen_reg_rtx (V2DImode);\n+      emit_move_insn (tmp2, gen_lowpart (V2DImode, op1));\n+      emit_insn (gen_lshrv2di3 (tmp3, tmp2, GEN_INT (1)));\n+\n+      rtx tmp4 = gen_reg_rtx (V2DImode);\n+      rtx tmp5 = gen_reg_rtx (V2DImode);\n+      emit_move_insn (tmp4, gen_lowpart (V2DImode, tmp1));\n+      emit_insn (gen_ashlv2di3 (tmp5, tmp4, GEN_INT (63)));\n+\n+      rtx tmp6 = gen_reg_rtx (V2DImode);\n+      emit_insn (gen_iorv2di3 (tmp6, tmp3, tmp5));\n+\n+      rtx tmp7 = gen_reg_rtx (V2DImode);\n+      emit_insn (gen_lshrv2di3 (tmp7, tmp2, GEN_INT (63)));\n+\n+      rtx tmp8 = gen_reg_rtx (V4SImode);\n+      rtx tmp9 = gen_reg_rtx (V4SImode);\n+      emit_move_insn (tmp8, gen_lowpart (V4SImode, tmp7));\n+      emit_insn (gen_sse2_pshufd (tmp9, tmp8, GEN_INT (0xbf)));\n+\n+      rtx tmp10 = gen_reg_rtx (V2DImode);\n+      rtx tmp11 = gen_reg_rtx (V2DImode);\n+      emit_move_insn (tmp10, gen_lowpart (V2DImode, tmp9));\n+      emit_insn (gen_ashlv2di3 (tmp11, tmp10, GEN_INT (31)));\n+\n+      rtx tmp12 = gen_reg_rtx (V2DImode);\n+      emit_insn (gen_iorv2di3 (tmp12, tmp6, tmp11));\n+\n+      rtx tmp13 = gen_reg_rtx (V1TImode);\n+      emit_move_insn (tmp13, gen_lowpart (V1TImode, tmp12));\n+      emit_move_insn (operands[0], tmp13);\n+      return;\n+    }\n+\n+  if (bits > 64)\n+    {\n+      /* Eight operations.  */\n+      rtx tmp1 = gen_reg_rtx (V4SImode);\n+      rtx tmp2 = gen_reg_rtx (V4SImode);\n+      emit_move_insn (tmp1, gen_lowpart (V4SImode, op1));\n+      emit_insn (gen_sse2_pshufd (tmp2, tmp1, GEN_INT (0xff)));\n+\n+      rtx tmp3 = gen_reg_rtx (V4SImode);\n+      emit_insn (gen_ashrv4si3 (tmp3, tmp2, GEN_INT (31)));\n+\n+      rtx tmp4 = gen_reg_rtx (V1TImode);\n+      emit_insn (gen_sse2_lshrv1ti3 (tmp4, op1, GEN_INT (64)));\n+\n+      rtx tmp5 = gen_reg_rtx (V2DImode);\n+      rtx tmp6 = gen_reg_rtx (V2DImode);\n+      emit_move_insn (tmp5, gen_lowpart (V2DImode, tmp4));\n+      emit_insn (gen_lshrv2di3 (tmp6, tmp5, GEN_INT (bits - 64)));\n+\n+      rtx tmp7 = gen_reg_rtx (V1TImode);\n+      rtx tmp8 = gen_reg_rtx (V1TImode);\n+      emit_move_insn (tmp7, gen_lowpart (V1TImode, tmp3));\n+      emit_insn (gen_sse2_ashlv1ti3 (tmp8, tmp7, GEN_INT (64)));\n+ \n+      rtx tmp9 = gen_reg_rtx (V2DImode);\n+      rtx tmp10 = gen_reg_rtx (V2DImode);\n+      emit_move_insn (tmp9, gen_lowpart (V2DImode, tmp3));\n+      emit_insn (gen_ashlv2di3 (tmp10, tmp9, GEN_INT (128 - bits)));\n+\n+      rtx tmp11 = gen_reg_rtx (V2DImode);\n+      rtx tmp12 = gen_reg_rtx (V2DImode);\n+      emit_move_insn (tmp11, gen_lowpart (V2DImode, tmp8));\n+      emit_insn (gen_iorv2di3 (tmp12, tmp10, tmp11));\n+\n+      rtx tmp13 = gen_reg_rtx (V2DImode);\n+      emit_insn (gen_iorv2di3 (tmp13, tmp6, tmp12));\n+\n+      rtx tmp14 = gen_reg_rtx (V1TImode);\n+      emit_move_insn (tmp14, gen_lowpart (V1TImode, tmp13));\n+      emit_move_insn (operands[0], tmp14);\n+    }\n+  else\n+    {\n+      /* Nine operations.  */\n+      rtx tmp1 = gen_reg_rtx (V4SImode);\n+      rtx tmp2 = gen_reg_rtx (V4SImode);\n+      emit_move_insn (tmp1, gen_lowpart (V4SImode, op1));\n+      emit_insn (gen_sse2_pshufd (tmp2, tmp1, GEN_INT (0xff)));\n+\n+      rtx tmp3 = gen_reg_rtx (V4SImode);\n+      emit_insn (gen_ashrv4si3 (tmp3, tmp2, GEN_INT (31)));\n+\n+      rtx tmp4 = gen_reg_rtx (V1TImode);\n+      emit_insn (gen_sse2_lshrv1ti3 (tmp4, op1, GEN_INT (64)));\n+\n+      rtx tmp5 = gen_reg_rtx (V2DImode);\n+      rtx tmp6 = gen_reg_rtx (V2DImode);\n+      emit_move_insn (tmp5, gen_lowpart (V2DImode, op1));\n+      emit_insn (gen_lshrv2di3 (tmp6, tmp5, GEN_INT (bits)));\n+\n+      rtx tmp7 = gen_reg_rtx (V2DImode);\n+      rtx tmp8 = gen_reg_rtx (V2DImode);\n+      emit_move_insn (tmp7, gen_lowpart (V2DImode, tmp4));\n+      emit_insn (gen_ashlv2di3 (tmp8, tmp7, GEN_INT (64 - bits)));\n+\n+      rtx tmp9 = gen_reg_rtx (V2DImode);\n+      emit_insn (gen_iorv2di3 (tmp9, tmp6, tmp8));\n+\n+      rtx tmp10 = gen_reg_rtx (V1TImode);\n+      rtx tmp11 = gen_reg_rtx (V1TImode);\n+      emit_move_insn (tmp10, gen_lowpart (V1TImode, tmp3));\n+      emit_insn (gen_sse2_ashlv1ti3 (tmp11, tmp10, GEN_INT (64)));\n+\n+      rtx tmp12 = gen_reg_rtx (V2DImode);\n+      rtx tmp13 = gen_reg_rtx (V2DImode);\n+      emit_move_insn (tmp12, gen_lowpart (V2DImode, tmp11));\n+      emit_insn (gen_ashlv2di3 (tmp13, tmp12, GEN_INT (64 - bits)));\n+\n+      rtx tmp14 = gen_reg_rtx (V2DImode);\n+      emit_insn (gen_iorv2di3 (tmp14, tmp9, tmp13));\n+\n+      rtx tmp15 = gen_reg_rtx (V1TImode);\n+      emit_move_insn (tmp15, gen_lowpart (V1TImode, tmp14));\n+      emit_move_insn (operands[0], tmp15);\n+    }\n+}\n+\n /* Return mode for the memcpy/memset loop counter.  Prefer SImode over\n    DImode for constant loop counts.  */\n "}, {"sha": "bd52450a148eb84c67c49a409409a9b550856819", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1188cf5fb7d9c3f0753cdb11d961fe90113991e8/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1188cf5fb7d9c3f0753cdb11d961fe90113991e8/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=1188cf5fb7d9c3f0753cdb11d961fe90113991e8", "patch": "@@ -161,6 +161,7 @@ extern void ix86_split_ashr (rtx *, rtx, machine_mode);\n extern void ix86_split_lshr (rtx *, rtx, machine_mode);\n extern void ix86_expand_v1ti_shift (enum rtx_code, rtx[]);\n extern void ix86_expand_v1ti_rotate (enum rtx_code, rtx[]);\n+extern void ix86_expand_v1ti_ashiftrt (rtx[]);\n extern rtx ix86_find_base_term (rtx);\n extern bool ix86_check_movabs (rtx, int);\n extern bool ix86_check_no_addr_space (rtx);"}, {"sha": "2764a250229941d18ed3edc47dc116945f5bdae0", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1188cf5fb7d9c3f0753cdb11d961fe90113991e8/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1188cf5fb7d9c3f0753cdb11d961fe90113991e8/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=1188cf5fb7d9c3f0753cdb11d961fe90113991e8", "patch": "@@ -15136,8 +15136,8 @@\n   [(set (match_operand:V1TI 0 \"register_operand\")\n \t(ashift:V1TI\n \t (match_operand:V1TI 1 \"register_operand\")\n-\t (match_operand:SI 2 \"const_int_operand\")))]\n-  \"TARGET_SSE2\"\n+\t (match_operand:QI 2 \"general_operand\")))]\n+  \"TARGET_SSE2 && TARGET_64BIT\"\n {\n   ix86_expand_v1ti_shift (ASHIFT, operands);\n   DONE;\n@@ -15147,19 +15147,30 @@\n   [(set (match_operand:V1TI 0 \"register_operand\")\n \t(lshiftrt:V1TI\n \t (match_operand:V1TI 1 \"register_operand\")\n-\t (match_operand:SI 2 \"const_int_operand\")))]\n-  \"TARGET_SSE2\"\n+\t (match_operand:QI 2 \"general_operand\")))]\n+  \"TARGET_SSE2 && TARGET_64BIT\"\n {\n   ix86_expand_v1ti_shift (LSHIFTRT, operands);\n   DONE;\n })\n \n+(define_expand \"ashrv1ti3\"\n+  [(set (match_operand:V1TI 0 \"register_operand\")\n+\t(ashiftrt:V1TI\n+\t (match_operand:V1TI 1 \"register_operand\")\n+\t (match_operand:QI 2 \"general_operand\")))]\n+  \"TARGET_SSE2 && TARGET_64BIT\"\n+{\n+  ix86_expand_v1ti_ashiftrt (operands);\n+  DONE;\n+})\n+\n (define_expand \"rotlv1ti3\"\n   [(set (match_operand:V1TI 0 \"register_operand\")\n \t(rotate:V1TI\n \t (match_operand:V1TI 1 \"register_operand\")\n-\t (match_operand:SI 2 \"const_int_operand\")))]\n-  \"TARGET_SSE2\"\n+\t (match_operand:QI 2 \"const_int_operand\")))]\n+  \"TARGET_SSE2 && TARGET_64BIT\"\n {\n   ix86_expand_v1ti_rotate (ROTATE, operands);\n   DONE;\n@@ -15169,8 +15180,8 @@\n   [(set (match_operand:V1TI 0 \"register_operand\")\n \t(rotatert:V1TI\n \t (match_operand:V1TI 1 \"register_operand\")\n-\t (match_operand:SI 2 \"const_int_operand\")))]\n-  \"TARGET_SSE2\"\n+\t (match_operand:QI 2 \"const_int_operand\")))]\n+  \"TARGET_SSE2 && TARGET_64BIT\"\n {\n   ix86_expand_v1ti_rotate (ROTATERT, operands);\n   DONE;"}, {"sha": "05869bfc3e655665b84600828fccbc4b8c175e8d", "filename": "gcc/testsuite/gcc.target/i386/sse2-v1ti-ashiftrt-1.c", "status": "added", "additions": 167, "deletions": 0, "changes": 167, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1188cf5fb7d9c3f0753cdb11d961fe90113991e8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-v1ti-ashiftrt-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1188cf5fb7d9c3f0753cdb11d961fe90113991e8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-v1ti-ashiftrt-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-v1ti-ashiftrt-1.c?ref=1188cf5fb7d9c3f0753cdb11d961fe90113991e8", "patch": "@@ -0,0 +1,167 @@\n+/* { dg-do run { target int128 } } */\n+/* { dg-options \"-O2 -msse2\" } */\n+/* { dg-require-effective-target sse2 } */\n+\n+typedef __int128 v1ti __attribute__ ((__vector_size__ (16)));\n+typedef __int128 ti;\n+\n+ti ashr(ti x, unsigned int i) { return x >> i; }\n+\n+v1ti ashr_1(v1ti x) { return x >> 1; }\n+v1ti ashr_2(v1ti x) { return x >> 2; }\n+v1ti ashr_7(v1ti x) { return x >> 7; }\n+v1ti ashr_8(v1ti x) { return x >> 8; }\n+v1ti ashr_9(v1ti x) { return x >> 9; }\n+v1ti ashr_15(v1ti x) { return x >> 15; }\n+v1ti ashr_16(v1ti x) { return x >> 16; }\n+v1ti ashr_17(v1ti x) { return x >> 17; }\n+v1ti ashr_23(v1ti x) { return x >> 23; }\n+v1ti ashr_24(v1ti x) { return x >> 24; }\n+v1ti ashr_25(v1ti x) { return x >> 25; }\n+v1ti ashr_31(v1ti x) { return x >> 31; }\n+v1ti ashr_32(v1ti x) { return x >> 32; }\n+v1ti ashr_33(v1ti x) { return x >> 33; }\n+v1ti ashr_47(v1ti x) { return x >> 47; }\n+v1ti ashr_48(v1ti x) { return x >> 48; }\n+v1ti ashr_49(v1ti x) { return x >> 49; }\n+v1ti ashr_63(v1ti x) { return x >> 63; }\n+v1ti ashr_64(v1ti x) { return x >> 64; }\n+v1ti ashr_65(v1ti x) { return x >> 65; }\n+v1ti ashr_72(v1ti x) { return x >> 72; }\n+v1ti ashr_79(v1ti x) { return x >> 79; }\n+v1ti ashr_80(v1ti x) { return x >> 80; }\n+v1ti ashr_81(v1ti x) { return x >> 81; }\n+v1ti ashr_95(v1ti x) { return x >> 95; }\n+v1ti ashr_96(v1ti x) { return x >> 96; }\n+v1ti ashr_97(v1ti x) { return x >> 97; }\n+v1ti ashr_111(v1ti x) { return x >> 111; }\n+v1ti ashr_112(v1ti x) { return x >> 112; }\n+v1ti ashr_113(v1ti x) { return x >> 113; }\n+v1ti ashr_119(v1ti x) { return x >> 119; }\n+v1ti ashr_120(v1ti x) { return x >> 120; }\n+v1ti ashr_121(v1ti x) { return x >> 121; }\n+v1ti ashr_126(v1ti x) { return x >> 126; }\n+v1ti ashr_127(v1ti x) { return x >> 127; }\n+\n+typedef v1ti (*fun)(v1ti);\n+\n+struct {\n+  unsigned int i;\n+  fun ashr;\n+} table[35] = {\n+  {   1, ashr_1   },\n+  {   2, ashr_2   },\n+  {   7, ashr_7   },\n+  {   8, ashr_8   },\n+  {   9, ashr_9   },\n+  {  15, ashr_15  },\n+  {  16, ashr_16  },\n+  {  17, ashr_17  },\n+  {  23, ashr_23  },\n+  {  24, ashr_24  },\n+  {  25, ashr_25  },\n+  {  31, ashr_31  },\n+  {  32, ashr_32  },\n+  {  33, ashr_33  },\n+  {  47, ashr_47  },\n+  {  48, ashr_48  },\n+  {  49, ashr_49  },\n+  {  63, ashr_63  },\n+  {  64, ashr_64  },\n+  {  65, ashr_65  },\n+  {  72, ashr_72  },\n+  {  79, ashr_79  },\n+  {  80, ashr_80  },\n+  {  81, ashr_81  },\n+  {  95, ashr_95  },\n+  {  96, ashr_96  },\n+  {  97, ashr_97  },\n+  { 111, ashr_111 },\n+  { 112, ashr_112 },\n+  { 113, ashr_113 },\n+  { 119, ashr_119 },\n+  { 120, ashr_120 },\n+  { 121, ashr_121 },\n+  { 126, ashr_126 },\n+  { 127, ashr_127 }\n+};\n+\n+void test(ti x)\n+{\n+  unsigned int i;\n+  v1ti t = (v1ti)x;\n+\n+  for (i=0; i<(sizeof(table)/sizeof(table[0])); i++) {\n+    if ((ti)(*table[i].ashr)(t) != ashr(x,table[i].i))\n+      __builtin_abort();\n+  }\n+}\n+\n+int main()\n+{\n+  ti x;\n+\n+  x = ((ti)0x0011223344556677ull)<<64 | 0x8899aabbccddeeffull;\n+  test(x);\n+  x = ((ti)0xffeeddccbbaa9988ull)<<64 | 0x7766554433221100ull;\n+  test(x);\n+  x = ((ti)0x0123456789abcdefull)<<64 | 0x0123456789abcdefull;\n+  test(x);\n+  x = ((ti)0xfedcba9876543210ull)<<64 | 0xfedcba9876543210ull;\n+  test(x);\n+  x = ((ti)0x0123456789abcdefull)<<64 | 0xfedcba9876543210ull;\n+  test(x);\n+  x = ((ti)0xfedcba9876543210ull)<<64 | 0x0123456789abcdefull;\n+  test(x);\n+  x = 0;\n+  test(x);\n+  x = 0xffffffffffffffffull;\n+  test(x);\n+  x = ((ti)0xffffffffffffffffull)<<64;\n+  test(x);\n+  x = ((ti)0xffffffffffffffffull)<<64 | 0xffffffffffffffffull;\n+  test(x);\n+  x = ((ti)0x5a5a5a5a5a5a5a5aull)<<64 | 0x5a5a5a5a5a5a5a5aull;\n+  test(x);\n+  x = ((ti)0xa5a5a5a5a5a5a5a5ull)<<64 | 0xa5a5a5a5a5a5a5a5ull;\n+  test(x);\n+  x = 0xffull;\n+  test(x);\n+  x = 0xff00ull;\n+  test(x);\n+  x = 0xff0000ull;\n+  test(x);\n+  x = 0xff000000ull;\n+  test(x);\n+  x = 0xff00000000ull;\n+  test(x);\n+  x = 0xff0000000000ull;\n+  test(x);\n+  x = 0xff000000000000ull;\n+  test(x);\n+  x = 0xff00000000000000ull;\n+  test(x);\n+  x = ((ti)0xffull)<<64;\n+  test(x);\n+  x = ((ti)0xff00ull)<<64;\n+  test(x);\n+  x = ((ti)0xff0000ull)<<64;\n+  test(x);\n+  x = ((ti)0xff000000ull)<<64;\n+  test(x);\n+  x = ((ti)0xff00000000ull)<<64;\n+  test(x);\n+  x = ((ti)0xff0000000000ull)<<64;\n+  test(x);\n+  x = ((ti)0xff000000000000ull)<<64;\n+  test(x);\n+  x = ((ti)0xff00000000000000ull)<<64;\n+  test(x);\n+  x = 0xdeadbeefcafebabeull;\n+  test(x);\n+  x = ((ti)0xdeadbeefcafebabeull)<<64;\n+  test(x);\n+\n+  return 0;\n+}\n+"}, {"sha": "b3d0aa32d4e4d777e791745717e59d566f5559dd", "filename": "gcc/testsuite/gcc.target/i386/sse2-v1ti-ashiftrt-2.c", "status": "added", "additions": 166, "deletions": 0, "changes": 166, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1188cf5fb7d9c3f0753cdb11d961fe90113991e8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-v1ti-ashiftrt-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1188cf5fb7d9c3f0753cdb11d961fe90113991e8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-v1ti-ashiftrt-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-v1ti-ashiftrt-2.c?ref=1188cf5fb7d9c3f0753cdb11d961fe90113991e8", "patch": "@@ -0,0 +1,166 @@\n+/* { dg-do compile { target int128 } } */\n+/* { dg-options \"-O2 -msse2 -mavx2 \" } */\n+\n+typedef __int128 v1ti __attribute__ ((__vector_size__ (16)));\n+typedef __int128 ti;\n+\n+ti ashr(ti x, unsigned int i) { return x >> i; }\n+\n+v1ti ashr_1(v1ti x) { return x >> 1; }\n+v1ti ashr_2(v1ti x) { return x >> 2; }\n+v1ti ashr_7(v1ti x) { return x >> 7; }\n+v1ti ashr_8(v1ti x) { return x >> 8; }\n+v1ti ashr_9(v1ti x) { return x >> 9; }\n+v1ti ashr_15(v1ti x) { return x >> 15; }\n+v1ti ashr_16(v1ti x) { return x >> 16; }\n+v1ti ashr_17(v1ti x) { return x >> 17; }\n+v1ti ashr_23(v1ti x) { return x >> 23; }\n+v1ti ashr_24(v1ti x) { return x >> 24; }\n+v1ti ashr_25(v1ti x) { return x >> 25; }\n+v1ti ashr_31(v1ti x) { return x >> 31; }\n+v1ti ashr_32(v1ti x) { return x >> 32; }\n+v1ti ashr_33(v1ti x) { return x >> 33; }\n+v1ti ashr_47(v1ti x) { return x >> 47; }\n+v1ti ashr_48(v1ti x) { return x >> 48; }\n+v1ti ashr_49(v1ti x) { return x >> 49; }\n+v1ti ashr_63(v1ti x) { return x >> 63; }\n+v1ti ashr_64(v1ti x) { return x >> 64; }\n+v1ti ashr_65(v1ti x) { return x >> 65; }\n+v1ti ashr_72(v1ti x) { return x >> 72; }\n+v1ti ashr_79(v1ti x) { return x >> 79; }\n+v1ti ashr_80(v1ti x) { return x >> 80; }\n+v1ti ashr_81(v1ti x) { return x >> 81; }\n+v1ti ashr_95(v1ti x) { return x >> 95; }\n+v1ti ashr_96(v1ti x) { return x >> 96; }\n+v1ti ashr_97(v1ti x) { return x >> 97; }\n+v1ti ashr_111(v1ti x) { return x >> 111; }\n+v1ti ashr_112(v1ti x) { return x >> 112; }\n+v1ti ashr_113(v1ti x) { return x >> 113; }\n+v1ti ashr_119(v1ti x) { return x >> 119; }\n+v1ti ashr_120(v1ti x) { return x >> 120; }\n+v1ti ashr_121(v1ti x) { return x >> 121; }\n+v1ti ashr_126(v1ti x) { return x >> 126; }\n+v1ti ashr_127(v1ti x) { return x >> 127; }\n+\n+typedef v1ti (*fun)(v1ti);\n+\n+struct {\n+  unsigned int i;\n+  fun ashr;\n+} table[35] = {\n+  {   1, ashr_1   },\n+  {   2, ashr_2   },\n+  {   7, ashr_7   },\n+  {   8, ashr_8   },\n+  {   9, ashr_9   },\n+  {  15, ashr_15  },\n+  {  16, ashr_16  },\n+  {  17, ashr_17  },\n+  {  23, ashr_23  },\n+  {  24, ashr_24  },\n+  {  25, ashr_25  },\n+  {  31, ashr_31  },\n+  {  32, ashr_32  },\n+  {  33, ashr_33  },\n+  {  47, ashr_47  },\n+  {  48, ashr_48  },\n+  {  49, ashr_49  },\n+  {  63, ashr_63  },\n+  {  64, ashr_64  },\n+  {  65, ashr_65  },\n+  {  72, ashr_72  },\n+  {  79, ashr_79  },\n+  {  80, ashr_80  },\n+  {  81, ashr_81  },\n+  {  95, ashr_95  },\n+  {  96, ashr_96  },\n+  {  97, ashr_97  },\n+  { 111, ashr_111 },\n+  { 112, ashr_112 },\n+  { 113, ashr_113 },\n+  { 119, ashr_119 },\n+  { 120, ashr_120 },\n+  { 121, ashr_121 },\n+  { 126, ashr_126 },\n+  { 127, ashr_127 }\n+};\n+\n+void test(ti x)\n+{\n+  unsigned int i;\n+  v1ti t = (v1ti)x;\n+\n+  for (i=0; i<(sizeof(table)/sizeof(table[0])); i++) {\n+    if ((ti)(*table[i].ashr)(t) != ashr(x,table[i].i))\n+      __builtin_abort();\n+  }\n+}\n+\n+int main()\n+{\n+  ti x;\n+\n+  x = ((ti)0x0011223344556677ull)<<64 | 0x8899aabbccddeeffull;\n+  test(x);\n+  x = ((ti)0xffeeddccbbaa9988ull)<<64 | 0x7766554433221100ull;\n+  test(x);\n+  x = ((ti)0x0123456789abcdefull)<<64 | 0x0123456789abcdefull;\n+  test(x);\n+  x = ((ti)0xfedcba9876543210ull)<<64 | 0xfedcba9876543210ull;\n+  test(x);\n+  x = ((ti)0x0123456789abcdefull)<<64 | 0xfedcba9876543210ull;\n+  test(x);\n+  x = ((ti)0xfedcba9876543210ull)<<64 | 0x0123456789abcdefull;\n+  test(x);\n+  x = 0;\n+  test(x);\n+  x = 0xffffffffffffffffull;\n+  test(x);\n+  x = ((ti)0xffffffffffffffffull)<<64;\n+  test(x);\n+  x = ((ti)0xffffffffffffffffull)<<64 | 0xffffffffffffffffull;\n+  test(x);\n+  x = ((ti)0x5a5a5a5a5a5a5a5aull)<<64 | 0x5a5a5a5a5a5a5a5aull;\n+  test(x);\n+  x = ((ti)0xa5a5a5a5a5a5a5a5ull)<<64 | 0xa5a5a5a5a5a5a5a5ull;\n+  test(x);\n+  x = 0xffull;\n+  test(x);\n+  x = 0xff00ull;\n+  test(x);\n+  x = 0xff0000ull;\n+  test(x);\n+  x = 0xff000000ull;\n+  test(x);\n+  x = 0xff00000000ull;\n+  test(x);\n+  x = 0xff0000000000ull;\n+  test(x);\n+  x = 0xff000000000000ull;\n+  test(x);\n+  x = 0xff00000000000000ull;\n+  test(x);\n+  x = ((ti)0xffull)<<64;\n+  test(x);\n+  x = ((ti)0xff00ull)<<64;\n+  test(x);\n+  x = ((ti)0xff0000ull)<<64;\n+  test(x);\n+  x = ((ti)0xff000000ull)<<64;\n+  test(x);\n+  x = ((ti)0xff00000000ull)<<64;\n+  test(x);\n+  x = ((ti)0xff0000000000ull)<<64;\n+  test(x);\n+  x = ((ti)0xff000000000000ull)<<64;\n+  test(x);\n+  x = ((ti)0xff00000000000000ull)<<64;\n+  test(x);\n+  x = 0xdeadbeefcafebabeull;\n+  test(x);\n+  x = ((ti)0xdeadbeefcafebabeull)<<64;\n+  test(x);\n+\n+  return 0;\n+}\n+"}, {"sha": "61d4f4ce26534d3df3f808b94b6aea8ccef12eb7", "filename": "gcc/testsuite/gcc.target/i386/sse2-v1ti-ashiftrt-3.c", "status": "added", "additions": 166, "deletions": 0, "changes": 166, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1188cf5fb7d9c3f0753cdb11d961fe90113991e8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-v1ti-ashiftrt-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1188cf5fb7d9c3f0753cdb11d961fe90113991e8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-v1ti-ashiftrt-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-v1ti-ashiftrt-3.c?ref=1188cf5fb7d9c3f0753cdb11d961fe90113991e8", "patch": "@@ -0,0 +1,166 @@\n+/* { dg-do compile { target int128 } } */\n+/* { dg-options \"-O2 -msse2 -msse4.1\" } */\n+\n+typedef __int128 v1ti __attribute__ ((__vector_size__ (16)));\n+typedef __int128 ti;\n+\n+ti ashr(ti x, unsigned int i) { return x >> i; }\n+\n+v1ti ashr_1(v1ti x) { return x >> 1; }\n+v1ti ashr_2(v1ti x) { return x >> 2; }\n+v1ti ashr_7(v1ti x) { return x >> 7; }\n+v1ti ashr_8(v1ti x) { return x >> 8; }\n+v1ti ashr_9(v1ti x) { return x >> 9; }\n+v1ti ashr_15(v1ti x) { return x >> 15; }\n+v1ti ashr_16(v1ti x) { return x >> 16; }\n+v1ti ashr_17(v1ti x) { return x >> 17; }\n+v1ti ashr_23(v1ti x) { return x >> 23; }\n+v1ti ashr_24(v1ti x) { return x >> 24; }\n+v1ti ashr_25(v1ti x) { return x >> 25; }\n+v1ti ashr_31(v1ti x) { return x >> 31; }\n+v1ti ashr_32(v1ti x) { return x >> 32; }\n+v1ti ashr_33(v1ti x) { return x >> 33; }\n+v1ti ashr_47(v1ti x) { return x >> 47; }\n+v1ti ashr_48(v1ti x) { return x >> 48; }\n+v1ti ashr_49(v1ti x) { return x >> 49; }\n+v1ti ashr_63(v1ti x) { return x >> 63; }\n+v1ti ashr_64(v1ti x) { return x >> 64; }\n+v1ti ashr_65(v1ti x) { return x >> 65; }\n+v1ti ashr_72(v1ti x) { return x >> 72; }\n+v1ti ashr_79(v1ti x) { return x >> 79; }\n+v1ti ashr_80(v1ti x) { return x >> 80; }\n+v1ti ashr_81(v1ti x) { return x >> 81; }\n+v1ti ashr_95(v1ti x) { return x >> 95; }\n+v1ti ashr_96(v1ti x) { return x >> 96; }\n+v1ti ashr_97(v1ti x) { return x >> 97; }\n+v1ti ashr_111(v1ti x) { return x >> 111; }\n+v1ti ashr_112(v1ti x) { return x >> 112; }\n+v1ti ashr_113(v1ti x) { return x >> 113; }\n+v1ti ashr_119(v1ti x) { return x >> 119; }\n+v1ti ashr_120(v1ti x) { return x >> 120; }\n+v1ti ashr_121(v1ti x) { return x >> 121; }\n+v1ti ashr_126(v1ti x) { return x >> 126; }\n+v1ti ashr_127(v1ti x) { return x >> 127; }\n+\n+typedef v1ti (*fun)(v1ti);\n+\n+struct {\n+  unsigned int i;\n+  fun ashr;\n+} table[35] = {\n+  {   1, ashr_1   },\n+  {   2, ashr_2   },\n+  {   7, ashr_7   },\n+  {   8, ashr_8   },\n+  {   9, ashr_9   },\n+  {  15, ashr_15  },\n+  {  16, ashr_16  },\n+  {  17, ashr_17  },\n+  {  23, ashr_23  },\n+  {  24, ashr_24  },\n+  {  25, ashr_25  },\n+  {  31, ashr_31  },\n+  {  32, ashr_32  },\n+  {  33, ashr_33  },\n+  {  47, ashr_47  },\n+  {  48, ashr_48  },\n+  {  49, ashr_49  },\n+  {  63, ashr_63  },\n+  {  64, ashr_64  },\n+  {  65, ashr_65  },\n+  {  72, ashr_72  },\n+  {  79, ashr_79  },\n+  {  80, ashr_80  },\n+  {  81, ashr_81  },\n+  {  95, ashr_95  },\n+  {  96, ashr_96  },\n+  {  97, ashr_97  },\n+  { 111, ashr_111 },\n+  { 112, ashr_112 },\n+  { 113, ashr_113 },\n+  { 119, ashr_119 },\n+  { 120, ashr_120 },\n+  { 121, ashr_121 },\n+  { 126, ashr_126 },\n+  { 127, ashr_127 }\n+};\n+\n+void test(ti x)\n+{\n+  unsigned int i;\n+  v1ti t = (v1ti)x;\n+\n+  for (i=0; i<(sizeof(table)/sizeof(table[0])); i++) {\n+    if ((ti)(*table[i].ashr)(t) != ashr(x,table[i].i))\n+      __builtin_abort();\n+  }\n+}\n+\n+int main()\n+{\n+  ti x;\n+\n+  x = ((ti)0x0011223344556677ull)<<64 | 0x8899aabbccddeeffull;\n+  test(x);\n+  x = ((ti)0xffeeddccbbaa9988ull)<<64 | 0x7766554433221100ull;\n+  test(x);\n+  x = ((ti)0x0123456789abcdefull)<<64 | 0x0123456789abcdefull;\n+  test(x);\n+  x = ((ti)0xfedcba9876543210ull)<<64 | 0xfedcba9876543210ull;\n+  test(x);\n+  x = ((ti)0x0123456789abcdefull)<<64 | 0xfedcba9876543210ull;\n+  test(x);\n+  x = ((ti)0xfedcba9876543210ull)<<64 | 0x0123456789abcdefull;\n+  test(x);\n+  x = 0;\n+  test(x);\n+  x = 0xffffffffffffffffull;\n+  test(x);\n+  x = ((ti)0xffffffffffffffffull)<<64;\n+  test(x);\n+  x = ((ti)0xffffffffffffffffull)<<64 | 0xffffffffffffffffull;\n+  test(x);\n+  x = ((ti)0x5a5a5a5a5a5a5a5aull)<<64 | 0x5a5a5a5a5a5a5a5aull;\n+  test(x);\n+  x = ((ti)0xa5a5a5a5a5a5a5a5ull)<<64 | 0xa5a5a5a5a5a5a5a5ull;\n+  test(x);\n+  x = 0xffull;\n+  test(x);\n+  x = 0xff00ull;\n+  test(x);\n+  x = 0xff0000ull;\n+  test(x);\n+  x = 0xff000000ull;\n+  test(x);\n+  x = 0xff00000000ull;\n+  test(x);\n+  x = 0xff0000000000ull;\n+  test(x);\n+  x = 0xff000000000000ull;\n+  test(x);\n+  x = 0xff00000000000000ull;\n+  test(x);\n+  x = ((ti)0xffull)<<64;\n+  test(x);\n+  x = ((ti)0xff00ull)<<64;\n+  test(x);\n+  x = ((ti)0xff0000ull)<<64;\n+  test(x);\n+  x = ((ti)0xff000000ull)<<64;\n+  test(x);\n+  x = ((ti)0xff00000000ull)<<64;\n+  test(x);\n+  x = ((ti)0xff0000000000ull)<<64;\n+  test(x);\n+  x = ((ti)0xff000000000000ull)<<64;\n+  test(x);\n+  x = ((ti)0xff00000000000000ull)<<64;\n+  test(x);\n+  x = 0xdeadbeefcafebabeull;\n+  test(x);\n+  x = ((ti)0xdeadbeefcafebabeull)<<64;\n+  test(x);\n+\n+  return 0;\n+}\n+"}, {"sha": "18da2efcfe96f7891ddd9c2a52ee3e903564f784", "filename": "gcc/testsuite/gcc.target/i386/sse2-v1ti-shift-2.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1188cf5fb7d9c3f0753cdb11d961fe90113991e8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-v1ti-shift-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1188cf5fb7d9c3f0753cdb11d961fe90113991e8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-v1ti-shift-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-v1ti-shift-2.c?ref=1188cf5fb7d9c3f0753cdb11d961fe90113991e8", "patch": "@@ -0,0 +1,13 @@\n+/* PR target/102986 */\n+/* { dg-do compile { target int128 } } */\n+/* { dg-options \"-O2 -msse2\" } */\n+\n+typedef unsigned __int128 uv1ti __attribute__ ((__vector_size__ (16)));\n+typedef __int128 sv1ti __attribute__ ((__vector_size__ (16)));\n+\n+uv1ti ashl(uv1ti x, unsigned int i) { return x << i; }\n+uv1ti lshr(uv1ti x, unsigned int i) { return x >> i; }\n+sv1ti ashr(sv1ti x, unsigned int i) { return x >> i; }\n+uv1ti rotr(uv1ti x, unsigned int i) { return (x >> i) | (x << (128-i)); }\n+uv1ti rotl(uv1ti x, unsigned int i) { return (x << i) | (x >> (128-i)); }\n+"}, {"sha": "8d5c1227e3c4daba6867f321aa956085d9098c90", "filename": "gcc/testsuite/gcc.target/i386/sse2-v1ti-shift-3.c", "status": "added", "additions": 113, "deletions": 0, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1188cf5fb7d9c3f0753cdb11d961fe90113991e8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-v1ti-shift-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1188cf5fb7d9c3f0753cdb11d961fe90113991e8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-v1ti-shift-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-v1ti-shift-3.c?ref=1188cf5fb7d9c3f0753cdb11d961fe90113991e8", "patch": "@@ -0,0 +1,113 @@\n+/* PR target/102986 */\n+/* { dg-do run { target int128 } } */\n+/* { dg-options \"-O2 -msse2\" } */\n+/* { dg-require-effective-target sse2 } */\n+\n+typedef unsigned __int128 uv1ti __attribute__ ((__vector_size__ (16)));\n+typedef __int128 sv1ti __attribute__ ((__vector_size__ (16)));\n+typedef __int128 v1ti __attribute__ ((__vector_size__ (16)));\n+\n+typedef unsigned __int128 uti;\n+typedef __int128 sti;\n+typedef __int128 ti;\n+\n+uv1ti ashl_v1ti(uv1ti x, unsigned int i) { return x << i; }\n+uv1ti lshr_v1ti(uv1ti x, unsigned int i) { return x >> i; }\n+sv1ti ashr_v1ti(sv1ti x, unsigned int i) { return x >> i; }\n+uv1ti rotr_v1ti(uv1ti x, unsigned int i) { return (x >> i) | (x << (128-i)); }\n+uv1ti rotl_v1ti(uv1ti x, unsigned int i) { return (x << i) | (x >> (128-i)); }\n+\n+uti ashl_ti(uti x, unsigned int i) { return x << i; }\n+uti lshr_ti(uti x, unsigned int i) { return x >> i; }\n+sti ashr_ti(sti x, unsigned int i) { return x >> i; }\n+uti rotr_ti(uti x, unsigned int i) { return (x >> i) | (x << (128-i)); }\n+uti rotl_ti(uti x, unsigned int i) { return (x << i) | (x >> (128-i)); }\n+\n+void test(ti x)\n+{\n+  unsigned int i;\n+  uv1ti ut = (uv1ti)x;\n+  sv1ti st = (sv1ti)x;\n+\n+  for (i=0; i<128; i++) {\n+    if ((ti)ashl_v1ti(ut,i) != (ti)ashl_ti(x,i))\n+      __builtin_abort();\n+    if ((ti)lshr_v1ti(ut,i) != (ti)lshr_ti(x,i))\n+      __builtin_abort();\n+    if ((ti)ashr_v1ti(st,i) != (ti)ashr_ti(x,i))\n+      __builtin_abort();\n+    if ((ti)rotr_v1ti(ut,i) != (ti)rotr_ti(x,i))\n+      __builtin_abort();\n+    if ((ti)rotl_v1ti(ut,i) != (ti)rotl_ti(x,i))\n+      __builtin_abort();\n+  }\n+}\n+\n+int main()\n+{\n+  ti x;\n+\n+  x = ((ti)0x0011223344556677ull)<<64 | 0x8899aabbccddeeffull;\n+  test(x);\n+  x = ((ti)0xffeeddccbbaa9988ull)<<64 | 0x7766554433221100ull;\n+  test(x);\n+  x = ((ti)0x0123456789abcdefull)<<64 | 0x0123456789abcdefull;\n+  test(x);\n+  x = ((ti)0xfedcba9876543210ull)<<64 | 0xfedcba9876543210ull;\n+  test(x);\n+  x = ((ti)0x0123456789abcdefull)<<64 | 0xfedcba9876543210ull;\n+  test(x);\n+  x = ((ti)0xfedcba9876543210ull)<<64 | 0x0123456789abcdefull;\n+  test(x);\n+  x = 0;\n+  test(x);\n+  x = 0xffffffffffffffffull;\n+  test(x);\n+  x = ((ti)0xffffffffffffffffull)<<64;\n+  test(x);\n+  x = ((ti)0xffffffffffffffffull)<<64 | 0xffffffffffffffffull;\n+  test(x);\n+  x = ((ti)0x5a5a5a5a5a5a5a5aull)<<64 | 0x5a5a5a5a5a5a5a5aull;\n+  test(x);\n+  x = ((ti)0xa5a5a5a5a5a5a5a5ull)<<64 | 0xa5a5a5a5a5a5a5a5ull;\n+  test(x);\n+  x = 0xffull;\n+  test(x);\n+  x = 0xff00ull;\n+  test(x);\n+  x = 0xff0000ull;\n+  test(x);\n+  x = 0xff000000ull;\n+  test(x);\n+  x = 0xff00000000ull;\n+  test(x);\n+  x = 0xff0000000000ull;\n+  test(x);\n+  x = 0xff000000000000ull;\n+  test(x);\n+  x = 0xff00000000000000ull;\n+  test(x);\n+  x = ((ti)0xffull)<<64;\n+  test(x);\n+  x = ((ti)0xff00ull)<<64;\n+  test(x);\n+  x = ((ti)0xff0000ull)<<64;\n+  test(x);\n+  x = ((ti)0xff000000ull)<<64;\n+  test(x);\n+  x = ((ti)0xff00000000ull)<<64;\n+  test(x);\n+  x = ((ti)0xff0000000000ull)<<64;\n+  test(x);\n+  x = ((ti)0xff000000000000ull)<<64;\n+  test(x);\n+  x = ((ti)0xff00000000000000ull)<<64;\n+  test(x);\n+  x = 0xdeadbeefcafebabeull;\n+  test(x);\n+  x = ((ti)0xdeadbeefcafebabeull)<<64;\n+  test(x);\n+\n+  return 0;\n+}\n+"}]}