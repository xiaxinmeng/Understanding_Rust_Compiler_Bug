{"sha": "7778fa6e3b21c2cf169f59c86a5284e06f8f0371", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzc3OGZhNmUzYjIxYzJjZjE2OWY1OWM4NmE1Mjg0ZTA2ZjhmMDM3MQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@unitus.it", "date": "2003-06-04T22:53:05Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2003-06-04T22:53:05Z"}, "message": "basic_string.h (_M_fold, [...]): Constify various variables.\n\n2003-06-04  Paolo Carlini  <pcarlini@unitus.it>\n\n\t* include/bits/basic_string.h (_M_fold, insert(iterator, _CharT),\n\terase(iterator), erase(iterator, iterator), c_str,\n\tcompare(const basic_string&)): Constify various variables.\n\t* include/bits/basic_string.tcc (_S_construct(_InIter, _InIter,\n\tconst _Alloc&, input_iterator_tag), _M_destroy, _M_mutate,\n\t_S_create, resize, _M_replace, _M_replace_safe,\n\tappend(const basic_string&), append(const basic_string&, size_type,\n\tsize_type), append(const _CharT*, size_type), append(size_type,\n\t_CharT), operator+(const _CharT*, const basic_string&),\n\toperator+(_CharT, const basic_string&), replace(iterator, iterator,\n\tsize_type, _CharT), find(const _CharT*, size_type, size_type),\n\tfind(_CharT, size_type), rfind(const _CharT*, size_type, size_type),\n\trfind(_CharT, size_type), compare(size_type, size_type,\n\tconst basic_string&), compare(size_type, size_type,\n\tconst basic_string&, size_type, size_type), compare(const _CharT*),\n\tcompare(size_type, size_type, const _CharT*), compare(size_type,\n\tsize_type, const _CharT*, size_type)): Likewise.\n\nFrom-SVN: r67468", "tree": {"sha": "13f0e29878bc6f9141c1764abd24a93b99d2f6a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/13f0e29878bc6f9141c1764abd24a93b99d2f6a7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7778fa6e3b21c2cf169f59c86a5284e06f8f0371", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7778fa6e3b21c2cf169f59c86a5284e06f8f0371", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7778fa6e3b21c2cf169f59c86a5284e06f8f0371", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7778fa6e3b21c2cf169f59c86a5284e06f8f0371/comments", "author": null, "committer": null, "parents": [{"sha": "1072ec3fdc48a1fe16084bdb046077bbb43e1216", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1072ec3fdc48a1fe16084bdb046077bbb43e1216", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1072ec3fdc48a1fe16084bdb046077bbb43e1216"}], "stats": {"total": 138, "additions": 79, "deletions": 59}, "files": [{"sha": "8b457cbbde0a65c50938ee9ecbf72ba4f3361c87", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7778fa6e3b21c2cf169f59c86a5284e06f8f0371/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7778fa6e3b21c2cf169f59c86a5284e06f8f0371/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=7778fa6e3b21c2cf169f59c86a5284e06f8f0371", "patch": "@@ -1,3 +1,23 @@\n+2003-06-04  Paolo Carlini  <pcarlini@unitus.it>\n+\n+\t* include/bits/basic_string.h (_M_fold, insert(iterator, _CharT),\n+\terase(iterator), erase(iterator, iterator), c_str,\n+\tcompare(const basic_string&)): Constify various variables.\n+\t* include/bits/basic_string.tcc (_S_construct(_InIter, _InIter,\n+\tconst _Alloc&, input_iterator_tag), _M_destroy, _M_mutate,\n+\t_S_create, resize, _M_replace, _M_replace_safe,\n+\tappend(const basic_string&), append(const basic_string&, size_type,\n+\tsize_type), append(const _CharT*, size_type), append(size_type,\n+\t_CharT), operator+(const _CharT*, const basic_string&),\n+\toperator+(_CharT, const basic_string&), replace(iterator, iterator,\n+\tsize_type, _CharT), find(const _CharT*, size_type, size_type),\n+\tfind(_CharT, size_type), rfind(const _CharT*, size_type, size_type),\n+\trfind(_CharT, size_type), compare(size_type, size_type,\n+\tconst basic_string&), compare(size_type, size_type,\n+\tconst basic_string&, size_type, size_type), compare(const _CharT*),\n+\tcompare(size_type, size_type, const _CharT*), compare(size_type,\n+\tsize_type, const _CharT*, size_type)): Likewise.\n+\n 2003-06-03  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* include/bits/fstream.tcc (pbackfail): Make a rarely taken"}, {"sha": "6d3cb9b9028e62b7c92bd986f274ff749a7b4edb", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7778fa6e3b21c2cf169f59c86a5284e06f8f0371/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7778fa6e3b21c2cf169f59c86a5284e06f8f0371/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=7778fa6e3b21c2cf169f59c86a5284e06f8f0371", "patch": "@@ -283,8 +283,8 @@ namespace std\n       iterator\n       _M_fold(size_type __pos, size_type __off) const\n       {\n-\tbool __testoff =  __off < this->size() - __pos;\n-\tsize_type __newoff = __testoff ? __off : this->size() - __pos;\n+\tconst bool __testoff =  __off < this->size() - __pos;\n+\tconst size_type __newoff = __testoff ? __off : this->size() - __pos;\n \treturn (_M_ibegin() + __pos + __newoff);\n       }\n \n@@ -378,8 +378,8 @@ namespace std\n       iterator\n       end()\n       {\n-         _M_leak();\n-\t return iterator(_M_data() + this->size());\n+\t_M_leak();\n+\treturn iterator(_M_data() + this->size());\n       }\n \n       const_iterator\n@@ -550,7 +550,7 @@ namespace std\n       iterator\n       insert(iterator __p, _CharT __c = _CharT())\n       {\n-\tsize_type __pos = __p - _M_ibegin();\n+\tconst size_type __pos = __p - _M_ibegin();\n \tthis->insert(_M_check(__pos), size_type(1), __c);\n \t_M_rep()->_M_set_leaked();\n  \treturn this->_M_ibegin() + __pos;\n@@ -566,7 +566,7 @@ namespace std\n       iterator\n       erase(iterator __position)\n       {\n-\tsize_type __i = __position - _M_ibegin();\n+\tconst size_type __i = __position - _M_ibegin();\n         this->replace(__position, __position + 1, _M_data(), _M_data());\n \t_M_rep()->_M_set_leaked();\n \treturn _M_ibegin() + __i;\n@@ -575,10 +575,10 @@ namespace std\n       iterator\n       erase(iterator __first, iterator __last)\n       {\n-        size_type __i = __first - _M_ibegin();\n+        const size_type __i = __first - _M_ibegin();\n \tthis->replace(__first, __last, _M_data(), _M_data());\n \t_M_rep()->_M_set_leaked();\n-       return _M_ibegin() + __i;\n+\treturn _M_ibegin() + __i;\n       }\n \n       basic_string&\n@@ -716,7 +716,7 @@ namespace std\n       c_str() const\n       {\n \t// MT: This assumes concurrent writes are OK.\n-\tsize_type __n = this->size();\n+\tconst size_type __n = this->size();\n \ttraits_type::assign(_M_data()[__n], _Rep::_S_terminal);\n         return _M_data();\n       }\n@@ -825,9 +825,9 @@ namespace std\n       int\n       compare(const basic_string& __str) const\n       {\n-\tsize_type __size = this->size();\n-\tsize_type __osize = __str.size();\n-\tsize_type __len = std::min(__size, __osize);\n+\tconst size_type __size = this->size();\n+\tconst size_type __osize = __str.size();\n+\tconst size_type __len = std::min(__size, __osize);\n \n \tint __r = traits_type::compare(_M_data(), __str.data(), __len);\n \tif (!__r)"}, {"sha": "9d2826dedc12b60011070c32685705da6d2cd5da", "filename": "libstdc++-v3/include/bits/basic_string.tcc", "status": "modified", "additions": 47, "deletions": 47, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7778fa6e3b21c2cf169f59c86a5284e06f8f0371/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7778fa6e3b21c2cf169f59c86a5284e06f8f0371/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc?ref=7778fa6e3b21c2cf169f59c86a5284e06f8f0371", "patch": "@@ -113,7 +113,7 @@ namespace std\n \t\t    ++__beg;\n \t\t  }\n \t\t// Allocate more space.\n-\t\tsize_type __len = __p - __r->_M_refdata();\n+\t\tconst size_type __len = __p - __r->_M_refdata();\n \t\t_Rep* __another = _Rep::_S_create(__len + 1, __a);\n \t\ttraits_type::copy(__another->_M_refdata(), \n \t\t\t\t  __r->_M_refdata(), __len);\n@@ -144,7 +144,7 @@ namespace std\n \tif (__builtin_expect(__beg == _InIter(), 0))\n \t  __throw_logic_error(\"basic_string::_S_construct NULL not valid\");\n \n-\tsize_type __dnew = static_cast<size_type>(std::distance(__beg, __end));\n+\tconst size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));\n \t\n \t// Check for out_of_range and length_error exceptions.\n \t_Rep* __r = _Rep::_S_create(__dnew, __a);\n@@ -371,7 +371,7 @@ namespace std\n     basic_string<_CharT, _Traits, _Alloc>::_Rep::\n     _M_destroy(const _Alloc& __a) throw ()\n     {\n-      size_type __size = sizeof(_Rep) + (_M_capacity + 1) * sizeof(_CharT);\n+      const size_type __size = sizeof(_Rep) + (_M_capacity + 1) * sizeof(_CharT);\n       _Raw_bytes_alloc(__a).deallocate(reinterpret_cast<char*>(this), __size);\n     }\n \n@@ -395,7 +395,7 @@ namespace std\n     basic_string<_CharT, _Traits, _Alloc>::\n     _M_mutate(size_type __pos, size_type __len1, size_type __len2)\n     {\n-      size_type       __old_size = this->size();\n+      const size_type __old_size = this->size();\n       const size_type __new_size = __old_size + __len2 - __len1;\n       const _CharT*        __src = _M_data()  + __pos + __len1;\n       const size_type __how_much = __old_size - __pos - __len1;\n@@ -534,15 +534,15 @@ namespace std\n       const size_t __malloc_header_size = 4 * sizeof (void*);\n       if ((__size + __malloc_header_size) > __pagesize)\n \t{\n-\t  size_t __extra =\n+\t  const size_t __extra =\n \t    (__pagesize - ((__size + __malloc_header_size) % __pagesize))\n \t    % __pagesize;\n \t  __capacity += __extra / sizeof(_CharT);\n \t  __size = (__capacity + 1) * sizeof(_CharT) + sizeof(_Rep);\n \t}\n       else if (__size > __subpagesize)\n \t{\n-\t  size_t __extra =\n+\t  const size_t __extra =\n \t    (__subpagesize - ((__size + __malloc_header_size) % __subpagesize))\n \t    % __subpagesize;\n \t  __capacity += __extra / sizeof(_CharT);\n@@ -601,7 +601,7 @@ namespace std\n     {\n       if (__n > max_size())\n \t__throw_length_error(\"basic_string::resize\");\n-      size_type __size = this->size();\n+      const size_type __size = this->size();\n       if (__size < __n)\n \tthis->append(__n - __size, __c);\n       else if (__n < __size)\n@@ -620,7 +620,7 @@ namespace std\n \t\t _InputIter __k2, input_iterator_tag)\n       {\n \t// Save concerned source string data in a temporary.\n-\tbasic_string __s(__k1, __k2);\n+\tconst basic_string __s(__k1, __k2);\n \treturn _M_replace_safe(__i1, __i2, __s._M_ibegin(), __s._M_iend());\n       }\n \n@@ -634,13 +634,13 @@ namespace std\n       _M_replace_safe(iterator __i1, iterator __i2, _ForwardIter __k1, \n \t\t      _ForwardIter __k2)\n       {\n-\tsize_type __dnew = static_cast<size_type>(std::distance(__k1, __k2));\n-\tsize_type __dold = __i2 - __i1;\n-\tsize_type __dmax = this->max_size();\n+\tconst size_type __dnew = static_cast<size_type>(std::distance(__k1, __k2));\n+\tconst size_type __dold = __i2 - __i1;\n+\tconst size_type __dmax = this->max_size();\n \n \tif (__dmax <= __dnew)\n \t  __throw_length_error(\"basic_string::_M_replace\");\n-\tsize_type __off = __i1 - _M_ibegin();\n+\tconst size_type __off = __i1 - _M_ibegin();\n \t_M_mutate(__off, __dold, __dnew);\n \n \t// Invalidated __i1, __i2\n@@ -673,8 +673,8 @@ namespace std\n       // Iff appending itself, string needs to pre-reserve the\n       // correct size so that _M_mutate does not clobber the\n       // iterators formed here.\n-      size_type __size = __str.size();\n-      size_type __len = __size + this->size();\n+      const size_type __size = __str.size();\n+      const size_type __len = __size + this->size();\n       if (__len > this->capacity())\n \tthis->reserve(__len);\n       return _M_replace_safe(_M_iend(), _M_iend(), __str._M_ibegin(),\n@@ -689,8 +689,8 @@ namespace std\n       // Iff appending itself, string needs to pre-reserve the\n       // correct size so that _M_mutate does not clobber the\n       // iterators formed here.\n-      size_type __len = std::min(size_type(__str.size() - __pos),\n-\t\t\t\t __n) + this->size();\n+      const size_type __len = std::min(size_type(__str.size() - __pos),\n+\t\t\t\t       __n) + this->size();\n       if (__len > this->capacity())\n \tthis->reserve(__len);\n       return _M_replace_safe(_M_iend(), _M_iend(), __str._M_check(__pos),\n@@ -702,7 +702,7 @@ namespace std\n     basic_string<_CharT, _Traits, _Alloc>::\n     append(const _CharT* __s, size_type __n)\n     {\n-      size_type __len = __n + this->size();\n+      const size_type __len = __n + this->size();\n       if (__len > this->capacity())\n \tthis->reserve(__len);\n       return _M_replace_safe(_M_iend(), _M_iend(), __s, __s + __n);\n@@ -713,7 +713,7 @@ namespace std\n     basic_string<_CharT, _Traits, _Alloc>::\n     append(size_type __n, _CharT __c)\n     {\n-      size_type __len = __n + this->size();\n+      const size_type __len = __n + this->size();\n       if (__len > this->capacity())\n \tthis->reserve(__len);\n        return this->replace(_M_iend(), _M_iend(), __n, __c);\n@@ -726,7 +726,7 @@ namespace std\n     {\n       typedef basic_string<_CharT, _Traits, _Alloc> __string_type;\n       typedef typename __string_type::size_type\t  __size_type;\n-      __size_type __len = _Traits::length(__lhs);\n+      const __size_type __len = _Traits::length(__lhs);\n       __string_type __str;\n       __str.reserve(__len + __rhs.size());\n       __str.append(__lhs, __lhs + __len);\n@@ -741,7 +741,7 @@ namespace std\n       typedef basic_string<_CharT, _Traits, _Alloc> __string_type;\n       typedef typename __string_type::size_type\t  __size_type;\n       __string_type __str;\n-      __size_type __len = __rhs.size();\n+      const __size_type __len = __rhs.size();\n       __str.reserve(__len + 1);\n       __str.append(__size_type(1), __lhs);\n       __str.append(__rhs);\n@@ -753,8 +753,8 @@ namespace std\n     basic_string<_CharT, _Traits, _Alloc>::\n     replace(iterator __i1, iterator __i2, size_type __n2, _CharT __c)\n     {\n-      size_type __n1 = __i2 - __i1;\n-      size_type __off1 = __i1 - _M_ibegin();\n+      const size_type __n1 = __i2 - __i1;\n+      const size_type __off1 = __i1 - _M_ibegin();\n       if (max_size() - (this->size() - __n1) <= __n2)\n \t__throw_length_error(\"basic_string::replace\");\n       _M_mutate (__off1, __n1, __n2);\n@@ -785,7 +785,7 @@ namespace std\n     basic_string<_CharT, _Traits, _Alloc>::\n     find(const _CharT* __s, size_type __pos, size_type __n) const\n     {\n-      size_type __size = this->size();\n+      const size_type __size = this->size();\n       size_t __xpos = __pos;\n       const _CharT* __data = _M_data();\n       for (; __xpos + __n <= __size; ++__xpos)\n@@ -799,12 +799,12 @@ namespace std\n     basic_string<_CharT, _Traits, _Alloc>::\n     find(_CharT __c, size_type __pos) const\n     {\n-      size_type __size = this->size();\n+      const size_type __size = this->size();\n       size_type __ret = npos;\n       if (__pos < __size)\n \t{\n \t  const _CharT* __data = _M_data();\n-\t  size_type __n = __size - __pos;\n+\t  const size_type __n = __size - __pos;\n \t  const _CharT* __p = traits_type::find(__data + __pos, __n, __c);\n \t  if (__p)\n \t    __ret = __p - __data;\n@@ -818,7 +818,7 @@ namespace std\n     basic_string<_CharT, _Traits, _Alloc>::\n     rfind(const _CharT* __s, size_type __pos, size_type __n) const\n     {\n-      size_type __size = this->size();\n+      const size_type __size = this->size();\n       if (__n <= __size)\n \t{\n \t  __pos = std::min(size_type(__size - __n), __pos);\n@@ -838,7 +838,7 @@ namespace std\n     basic_string<_CharT, _Traits, _Alloc>::\n     rfind(_CharT __c, size_type __pos) const\n     {\n-      size_type __size = this->size();\n+      const size_type __size = this->size();\n       if (__size)\n \t{\n \t  size_t __xpos = __size - 1;\n@@ -955,13 +955,13 @@ namespace std\n     basic_string<_CharT, _Traits, _Alloc>::\n     compare(size_type __pos, size_type __n, const basic_string& __str) const\n     {\n-      size_type __size = this->size();\n-      size_type __osize = __str.size();\n+      const size_type __size = this->size();\n+      const size_type __osize = __str.size();\n       if (__pos > __size)\n \t__throw_out_of_range(\"basic_string::compare\");\n       \n-      size_type __rsize= std::min(size_type(__size - __pos), __n);\n-      size_type __len = std::min(__rsize, __osize);\n+      const size_type __rsize= std::min(size_type(__size - __pos), __n);\n+      const size_type __len = std::min(__rsize, __osize);\n       int __r = traits_type::compare(_M_data() + __pos, __str.data(), __len);\n       if (!__r)\n \t__r = __rsize - __osize;\n@@ -974,14 +974,14 @@ namespace std\n     compare(size_type __pos1, size_type __n1, const basic_string& __str,\n \t    size_type __pos2, size_type __n2) const\n     {\n-      size_type __size = this->size();\n-      size_type __osize = __str.size();\n+      const size_type __size = this->size();\n+      const size_type __osize = __str.size();\n       if (__pos1 > __size || __pos2 > __osize)\n \t__throw_out_of_range(\"basic_string::compare\");\n       \n-      size_type __rsize = std::min(size_type(__size - __pos1), __n1);\n-      size_type __rosize = std::min(size_type(__osize - __pos2), __n2);\n-      size_type __len = std::min(__rsize, __rosize);\n+      const size_type __rsize = std::min(size_type(__size - __pos1), __n1);\n+      const size_type __rosize = std::min(size_type(__osize - __pos2), __n2);\n+      const size_type __len = std::min(__rsize, __rosize);\n       int __r = traits_type::compare(_M_data() + __pos1, \n \t\t\t\t     __str.data() + __pos2, __len);\n       if (!__r)\n@@ -995,9 +995,9 @@ namespace std\n     basic_string<_CharT, _Traits, _Alloc>::\n     compare(const _CharT* __s) const\n     {\n-      size_type __size = this->size();\n-      size_type __osize = traits_type::length(__s);\n-      size_type __len = std::min(__size, __osize);\n+      const size_type __size = this->size();\n+      const size_type __osize = traits_type::length(__s);\n+      const size_type __len = std::min(__size, __osize);\n       int __r = traits_type::compare(_M_data(), __s, __len);\n       if (!__r)\n \t__r = __size - __osize;\n@@ -1010,13 +1010,13 @@ namespace std\n     basic_string <_CharT, _Traits, _Alloc>::\n     compare(size_type __pos, size_type __n1, const _CharT* __s) const\n     {\n-      size_type __size = this->size();\n+      const size_type __size = this->size();\n       if (__pos > __size)\n \t__throw_out_of_range(\"basic_string::compare\");\n       \n-      size_type __osize = traits_type::length(__s);\n-      size_type __rsize = std::min(size_type(__size - __pos), __n1);\n-      size_type __len = std::min(__rsize, __osize);\n+      const size_type __osize = traits_type::length(__s);\n+      const size_type __rsize = std::min(size_type(__size - __pos), __n1);\n+      const size_type __len = std::min(__rsize, __osize);\n       int __r = traits_type::compare(_M_data() + __pos, __s, __len);\n       if (!__r)\n \t__r = __rsize - __osize;\n@@ -1029,13 +1029,13 @@ namespace std\n     compare(size_type __pos, size_type __n1, const _CharT* __s, \n \t    size_type __n2) const\n     {\n-      size_type __size = this->size();\n+      const size_type __size = this->size();\n       if (__pos > __size)\n \t__throw_out_of_range(\"basic_string::compare\");\n       \n-      size_type __osize = std::min(traits_type::length(__s), __n2);\n-      size_type __rsize = std::min(size_type(__size - __pos), __n1);\n-      size_type __len = std::min(__rsize, __osize);\n+      const size_type __osize = std::min(traits_type::length(__s), __n2);\n+      const size_type __rsize = std::min(size_type(__size - __pos), __n1);\n+      const size_type __len = std::min(__rsize, __osize);\n       int __r = traits_type::compare(_M_data() + __pos, __s, __len);\n       if (!__r)\n \t__r = __rsize - __osize;"}]}