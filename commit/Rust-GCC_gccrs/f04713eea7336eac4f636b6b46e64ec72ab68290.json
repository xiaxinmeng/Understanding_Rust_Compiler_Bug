{"sha": "f04713eea7336eac4f636b6b46e64ec72ab68290", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjA0NzEzZWVhNzMzNmVhYzRmNjM2YjZiNDZlNjRlYzcyYWI2ODI5MA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2011-04-01T08:19:13Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2011-04-01T08:19:13Z"}, "message": "expr.c (emit_block_move_via_movmem): Use n_generator_args instead of n_operands.\n\ngcc/\n\t* expr.c (emit_block_move_via_movmem): Use n_generator_args\n\tinstead of n_operands.\n\t(set_storage_via_setmem): Likewise.\n\t* optabs.c (maybe_gen_insn): Likewise.\n\t* config/arm/arm.c (arm_init_neon_builtins): Likewise.\n\t* config/mips/mips.c (mips_expand_builtin_compare_1): Likewise.\n\t(mips_expand_builtin_direct): Likewise.\n\t* config/spu/spu.c (expand_builtin_args): Likewise.\n\nFrom-SVN: r171823", "tree": {"sha": "18171d82f2b441c17a136254dc520ee70b3b96ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/18171d82f2b441c17a136254dc520ee70b3b96ee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f04713eea7336eac4f636b6b46e64ec72ab68290", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f04713eea7336eac4f636b6b46e64ec72ab68290", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f04713eea7336eac4f636b6b46e64ec72ab68290", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f04713eea7336eac4f636b6b46e64ec72ab68290/comments", "author": null, "committer": null, "parents": [{"sha": "b29387eec60251cbfed25475892d5645c9c59caf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b29387eec60251cbfed25475892d5645c9c59caf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b29387eec60251cbfed25475892d5645c9c59caf"}], "stats": {"total": 45, "additions": 22, "deletions": 23}, "files": [{"sha": "c38662ab245a7b7d83895873cb9ade40c3a38646", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f04713eea7336eac4f636b6b46e64ec72ab68290/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f04713eea7336eac4f636b6b46e64ec72ab68290/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f04713eea7336eac4f636b6b46e64ec72ab68290", "patch": "@@ -1,3 +1,14 @@\n+2011-04-01  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\t* expr.c (emit_block_move_via_movmem): Use n_generator_args\n+\tinstead of n_operands.\n+\t(set_storage_via_setmem): Likewise.\n+\t* optabs.c (maybe_gen_insn): Likewise.\n+\t* config/arm/arm.c (arm_init_neon_builtins): Likewise.\n+\t* config/mips/mips.c (mips_expand_builtin_compare_1): Likewise.\n+\t(mips_expand_builtin_direct): Likewise.\n+\t* config/spu/spu.c (expand_builtin_args): Likewise.\n+\n 2011-04-01  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \t* recog.h (insn_data_d): Add n_generator_args."}, {"sha": "4fee4dafa0274a6ab170005a2d3d4fcec31b52d0", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f04713eea7336eac4f636b6b46e64ec72ab68290/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f04713eea7336eac4f636b6b46e64ec72ab68290/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=f04713eea7336eac4f636b6b46e64ec72ab68290", "patch": "@@ -18944,7 +18944,7 @@ arm_init_neon_builtins (void)\n \t\t/* Build a function type directly from the insn_data for this\n \t\t   builtin.  The build_function_type() function takes care of\n \t\t   removing duplicates for us.  */\n-\t\tfor (k = insn_data[icode].n_operands - 1; k >= 0; k--)\n+\t\tfor (k = insn_data[icode].n_generator_args - 1; k >= 0; k--)\n \t\t  {\n \t\t    tree eltype;\n "}, {"sha": "74c7ba56d059ccb28acca82226b17a1b2c20aa87", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f04713eea7336eac4f636b6b46e64ec72ab68290/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f04713eea7336eac4f636b6b46e64ec72ab68290/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=f04713eea7336eac4f636b6b46e64ec72ab68290", "patch": "@@ -13252,7 +13252,7 @@ mips_expand_builtin_compare_1 (enum insn_code icode,\n \n   /* The instruction should have a target operand, an operand for each\n      argument, and an operand for COND.  */\n-  gcc_assert (nargs + 2 == insn_data[(int) icode].n_operands);\n+  gcc_assert (nargs + 2 == insn_data[(int) icode].n_generator_args);\n \n   opno = 0;\n   create_output_operand (&ops[opno++], NULL_RTX,\n@@ -13280,11 +13280,9 @@ mips_expand_builtin_direct (enum insn_code icode, rtx target, tree exp,\n   if (has_target_p)\n     create_output_operand (&ops[opno++], target, TYPE_MODE (TREE_TYPE (exp)));\n \n-  /* Map the arguments to the other operands.  The n_operands value\n-     for an expander includes match_dups and match_scratches as well as\n-     match_operands, so n_operands is only an upper bound on the number\n-     of arguments to the expander function.  */\n-  gcc_assert (opno + call_expr_nargs (exp) <= insn_data[icode].n_operands);\n+  /* Map the arguments to the other operands.  */\n+  gcc_assert (opno + call_expr_nargs (exp)\n+\t      == insn_data[icode].n_generator_args);\n   for (argno = 0; argno < call_expr_nargs (exp); argno++)\n     mips_prepare_builtin_arg (&ops[opno++], exp, argno);\n "}, {"sha": "8a5928b6638bdf975e6752ab304bf1a44868408b", "filename": "gcc/config/spu/spu.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f04713eea7336eac4f636b6b46e64ec72ab68290/gcc%2Fconfig%2Fspu%2Fspu.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f04713eea7336eac4f636b6b46e64ec72ab68290/gcc%2Fconfig%2Fspu%2Fspu.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.c?ref=f04713eea7336eac4f636b6b46e64ec72ab68290", "patch": "@@ -6545,9 +6545,7 @@ expand_builtin_args (struct spu_builtin_description *d, tree exp,\n       ops[i] = expand_expr (arg, NULL_RTX, VOIDmode, EXPAND_NORMAL);\n     }\n \n-  /* The insn pattern may have additional operands (SCRATCH).\n-     Return the number of actual non-SCRATCH operands.  */\n-  gcc_assert (i <= insn_data[icode].n_operands);\n+  gcc_assert (i == insn_data[icode].n_generator_args);\n   return i;\n }\n "}, {"sha": "4cbb09b0a457ffe02ce9096739f1f9690ab52430", "filename": "gcc/expr.c", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f04713eea7336eac4f636b6b46e64ec72ab68290/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f04713eea7336eac4f636b6b46e64ec72ab68290/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=f04713eea7336eac4f636b6b46e64ec72ab68290", "patch": "@@ -1293,11 +1293,8 @@ emit_block_move_via_movmem (rtx x, rtx y, rtx size, unsigned int align,\n \t     nice if there were some way to inform the backend, so\n \t     that it doesn't fail the expansion because it thinks\n \t     emitting the libcall would be more efficient.  */\n-\t  nops = insn_data[(int) code].n_operands;\n-\t  /* ??? n_operands includes match_scratches; find some other\n-\t     way to select the 6 operand variant, or force all targets\n-\t     to have exactly 6 operands.  */\n-\t  gcc_assert (nops >= 4 && nops <= 6);\n+\t  nops = insn_data[(int) code].n_generator_args;\n+\t  gcc_assert (nops == 4 || nops == 6);\n \n \t  create_fixed_operand (&ops[0], x);\n \t  create_fixed_operand (&ops[1], y);\n@@ -2719,11 +2716,8 @@ set_storage_via_setmem (rtx object, rtx size, rtx val, unsigned int align,\n \t  struct expand_operand ops[6];\n \t  unsigned int nops;\n \n-\t  nops = insn_data[(int) code].n_operands;\n-\t  /* ??? n_operands includes match_scratches; find some other\n-\t     way to select the 6 operand variant, or force all targets\n-\t     to have exactly 6 operands.  */\n-\t  gcc_assert (nops >= 4 && nops <= 6);\n+\t  nops = insn_data[(int) code].n_generator_args;\n+\t  gcc_assert (nops == 4 || nops == 6);\n \n \t  create_fixed_operand (&ops[0], object);\n \t  /* The check above guarantees that this size conversion is valid.  */"}, {"sha": "682b8e40f7c6bd4f9964e388cac46ef227bb9af6", "filename": "gcc/optabs.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f04713eea7336eac4f636b6b46e64ec72ab68290/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f04713eea7336eac4f636b6b46e64ec72ab68290/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=f04713eea7336eac4f636b6b46e64ec72ab68290", "patch": "@@ -7118,9 +7118,7 @@ rtx\n maybe_gen_insn (enum insn_code icode, unsigned int nops,\n \t\tstruct expand_operand *ops)\n {\n-  /* n_operands includes any automatically-generated match_scratches,\n-     so we can't check for equality here.  */\n-  gcc_assert (nops <= (unsigned int) insn_data[(int) icode].n_operands);\n+  gcc_assert (nops == (unsigned int) insn_data[(int) icode].n_generator_args);\n   if (!maybe_legitimize_operands (icode, 0, nops, ops))\n     return NULL_RTX;\n "}]}