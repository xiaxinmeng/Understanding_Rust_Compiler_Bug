{"sha": "927f908bf879a79ec26af82671e2a5b93073a8a2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTI3ZjkwOGJmODc5YTc5ZWMyNmFmODI2NzFlMmE1YjkzMDczYThhMg==", "commit": {"author": {"name": "Andi Kleen", "email": "ak@linux.intel.com", "date": "2013-06-21T13:51:48Z"}, "committer": {"name": "Andi Kleen", "email": "ak@gcc.gnu.org", "date": "2013-06-21T13:51:48Z"}, "message": "Fix HLE example in manual\n\nThe HLE example in the manual only commits when using bool\nfor the flag, because __atomic_clear only writes bool, and\nHLE requires the acquire and release to match.\n\nSo when the example is copied with e.g. an int variable it\ndoes not commit and causes slower than expected performance.\n\nSome people are running into problems because of this.\n\nSwitch it over to use __atomic_store.\n\nAlso fix a minor typo nearby.\n\ngcc/:\n2013-06-21  Andi Kleen  <ak@linux.intel.com>\n\n\t* doc/extend.texi: Dont use __atomic_clear in HLE\n\texample.  Fix typo.\n\nFrom-SVN: r200304", "tree": {"sha": "c37e13744a23b3780fe8bdb3aaf2d908e43581d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c37e13744a23b3780fe8bdb3aaf2d908e43581d6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/927f908bf879a79ec26af82671e2a5b93073a8a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/927f908bf879a79ec26af82671e2a5b93073a8a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/927f908bf879a79ec26af82671e2a5b93073a8a2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/927f908bf879a79ec26af82671e2a5b93073a8a2/comments", "author": null, "committer": null, "parents": [{"sha": "cca410b69b25a729ea3a4d3614426e380c688ca4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cca410b69b25a729ea3a4d3614426e380c688ca4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cca410b69b25a729ea3a4d3614426e380c688ca4"}], "stats": {"total": 11, "additions": 9, "deletions": 2}, "files": [{"sha": "889cbcc63d88b05e5f77e1dd9393a0ae2e6f0303", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/927f908bf879a79ec26af82671e2a5b93073a8a2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/927f908bf879a79ec26af82671e2a5b93073a8a2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=927f908bf879a79ec26af82671e2a5b93073a8a2", "patch": "@@ -1,3 +1,8 @@\n+2013-06-21  Andi Kleen  <ak@linux.intel.com>\n+\n+\t* doc/extend.texi: Dont use __atomic_clear in HLE\n+\texample.  Fix typo.\n+\n 2013-06-21  Andi Kleen  <ak@linux.intel.com>\n \n \t* doc/extend.texi: Document that __atomic_clear and"}, {"sha": "77295f15440127b7990eb80ef415082088c8d85c", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/927f908bf879a79ec26af82671e2a5b93073a8a2/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/927f908bf879a79ec26af82671e2a5b93073a8a2/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=927f908bf879a79ec26af82671e2a5b93073a8a2", "patch": "@@ -7525,18 +7525,20 @@ End lock elision on a lock variable.\n Memory model must be @code{__ATOMIC_RELEASE} or stronger.\n @end table\n \n-When a lock acquire fails it's required for good performance to abort\n+When a lock acquire fails it is required for good performance to abort\n the transaction quickly. This can be done with a @code{_mm_pause}\n \n @smallexample\n #include <immintrin.h> // For _mm_pause\n \n+int lockvar;\n+\n /* Acquire lock with lock elision */\n while (__atomic_exchange_n(&lockvar, 1, __ATOMIC_ACQUIRE|__ATOMIC_HLE_ACQUIRE))\n     _mm_pause(); /* Abort failed transaction */\n ...\n /* Free lock with lock elision */\n-__atomic_clear(&lockvar, __ATOMIC_RELEASE|__ATOMIC_HLE_RELEASE);\n+__atomic_store(&lockvar, 0, __ATOMIC_RELEASE|__ATOMIC_HLE_RELEASE);\n @end smallexample\n \n @node Object Size Checking"}]}