{"sha": "6f1becb66055c351fb9a44563ce7153dbf6487aa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmYxYmVjYjY2MDU1YzM1MWZiOWE0NDU2M2NlNzE1M2RiZjY0ODdhYQ==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2019-05-17T16:27:54Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2019-05-17T16:27:54Z"}, "message": "2019-05-17  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n\n\t* include/bits/stl_deque.h\n\t(_Deque_iterator<>::__ptr_to): Remove, use std::__ptr_rebind.\n\t(_Deque_base(_Deque_base&&, const allocator_type&)): New.\n\t(_Deque_base::_Deque_impl_data): New.\n\t(_Deque_base::_Deque_impl): Inherit latter.\n\t(_Deque_base::_Deque_impl::_M_swap_data): Move...\n\t(_Deque_base::_Deque_impl_data::_M_swap_data): ... here.\n\t(_Deque_base::_Deque_impl()): Add noexcept qualification.\n\t(_Deque_base::_Deque_impl(_Deque_impl&&, _Tp_alloc_type&&)): New.\n\t(_Deque_base::_Deque_impl::_M_get_Tp_allocator()): Remove static_cast.\n\t(deque<>::deque()): Default.\n\t(deque<>::deque(deque&&)): Default.\n\t(deque<>::deque(deque&&, const allocator_type&, false_type)): New.\n\t(deque<>::deque(deque&&, const allocator_type&, true_type)): New.\n\t(deque<>::deque(deque&&, const allocator_type&)): Delegate to latters.\n\t(deque<>::deque<_It>(_It, _It, const allocator_type&)): Use\n\t_M_range_initialize.\n\t(deque<>::assign<_It>(_It, _It)): Use _M_assign_aux.\n\t(deque<>::resize(size_type, const value_type&)): Share a single\n\timplementation.\n\t(deque<>::insert<_It>(const_iterator, _It, _It)): Use\n\t_M_range_insert_aux.\n\t[__cplusplus >= 201103L](_M_initialize_dispatch): Remove.\n\t[__cplusplus >= 201103L](_M_assign_dispatch): Remove.\n\t[__cplusplus >= 201103L](_M_insert_dispatch): Remove.\n\t* testsuite/23_containers/deque/allocator/default_init.cc: New.\n\nFrom-SVN: r271330", "tree": {"sha": "c5d722165f5e1f8cdbc138a927d8eee144b2ee7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c5d722165f5e1f8cdbc138a927d8eee144b2ee7d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6f1becb66055c351fb9a44563ce7153dbf6487aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f1becb66055c351fb9a44563ce7153dbf6487aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f1becb66055c351fb9a44563ce7153dbf6487aa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f1becb66055c351fb9a44563ce7153dbf6487aa/comments", "author": null, "committer": null, "parents": [{"sha": "2a380e2ed0522b30070cf0b3f730f47eb1375976", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a380e2ed0522b30070cf0b3f730f47eb1375976", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a380e2ed0522b30070cf0b3f730f47eb1375976"}], "stats": {"total": 513, "additions": 320, "deletions": 193}, "files": [{"sha": "dbf1a8865f6a6dc89c6080ad84de9ad0e95c8f80", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f1becb66055c351fb9a44563ce7153dbf6487aa/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f1becb66055c351fb9a44563ce7153dbf6487aa/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=6f1becb66055c351fb9a44563ce7153dbf6487aa", "patch": "@@ -1,3 +1,32 @@\n+2019-05-17  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\t* include/bits/stl_deque.h\n+\t(_Deque_iterator<>::__ptr_to): Remove, use std::__ptr_rebind.\n+\t(_Deque_base(_Deque_base&&, const allocator_type&)): New.\n+\t(_Deque_base::_Deque_impl_data): New.\n+\t(_Deque_base::_Deque_impl): Inherit latter.\n+\t(_Deque_base::_Deque_impl::_M_swap_data): Move...\n+\t(_Deque_base::_Deque_impl_data::_M_swap_data): ... here.\n+\t(_Deque_base::_Deque_impl()): Add noexcept qualification.\n+\t(_Deque_base::_Deque_impl(_Deque_impl&&, _Tp_alloc_type&&)): New.\n+\t(_Deque_base::_Deque_impl::_M_get_Tp_allocator()): Remove static_cast.\n+\t(deque<>::deque()): Default.\n+\t(deque<>::deque(deque&&)): Default.\n+\t(deque<>::deque(deque&&, const allocator_type&, false_type)): New.\n+\t(deque<>::deque(deque&&, const allocator_type&, true_type)): New.\n+\t(deque<>::deque(deque&&, const allocator_type&)): Delegate to latters.\n+\t(deque<>::deque<_It>(_It, _It, const allocator_type&)): Use\n+\t_M_range_initialize.\n+\t(deque<>::assign<_It>(_It, _It)): Use _M_assign_aux.\n+\t(deque<>::resize(size_type, const value_type&)): Share a single\n+\timplementation.\n+\t(deque<>::insert<_It>(const_iterator, _It, _It)): Use\n+\t_M_range_insert_aux.\n+\t[__cplusplus >= 201103L](_M_initialize_dispatch): Remove.\n+\t[__cplusplus >= 201103L](_M_assign_dispatch): Remove.\n+\t[__cplusplus >= 201103L](_M_insert_dispatch): Remove.\n+\t* testsuite/23_containers/deque/allocator/default_init.cc: New.\n+\n 2019-05-17  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/90246"}, {"sha": "3f77b4f079c66ac99b4dc7a55ac9052d87355be2", "filename": "libstdc++-v3/include/bits/deque.tcc", "status": "modified", "additions": 118, "deletions": 118, "changes": 236, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f1becb66055c351fb9a44563ce7153dbf6487aa/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fdeque.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f1becb66055c351fb9a44563ce7153dbf6487aa/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fdeque.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fdeque.tcc?ref=6f1becb66055c351fb9a44563ce7153dbf6487aa", "patch": "@@ -69,22 +69,22 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n     {\n       _Map_pointer __cur;\n       __try\n-        {\n-          for (__cur = this->_M_impl._M_start._M_node;\n+\t{\n+\t  for (__cur = this->_M_impl._M_start._M_node;\n \t       __cur < this->_M_impl._M_finish._M_node;\n \t       ++__cur)\n-            std::__uninitialized_default_a(*__cur, *__cur + _S_buffer_size(),\n+\t    std::__uninitialized_default_a(*__cur, *__cur + _S_buffer_size(),\n \t\t\t\t\t   _M_get_Tp_allocator());\n-          std::__uninitialized_default_a(this->_M_impl._M_finish._M_first,\n+\t  std::__uninitialized_default_a(this->_M_impl._M_finish._M_first,\n \t\t\t\t\t this->_M_impl._M_finish._M_cur,\n \t\t\t\t\t _M_get_Tp_allocator());\n-        }\n+\t}\n       __catch(...)\n-        {\n-          std::_Destroy(this->_M_impl._M_start, iterator(*__cur, __cur),\n+\t{\n+\t  std::_Destroy(this->_M_impl._M_start, iterator(*__cur, __cur),\n \t\t\t_M_get_Tp_allocator());\n-          __throw_exception_again;\n-        }\n+\t  __throw_exception_again;\n+\t}\n     }\n #endif\n \n@@ -99,8 +99,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t  if (_Alloc_traits::_S_propagate_on_copy_assign())\n \t    {\n \t      if (!_Alloc_traits::_S_always_equal()\n-\t          && _M_get_Tp_allocator() != __x._M_get_Tp_allocator())\n-\t        {\n+\t\t  && _M_get_Tp_allocator() != __x._M_get_Tp_allocator())\n+\t\t{\n \t\t  // Replacement allocator cannot free existing storage,\n \t\t  // so deallocate everything and take copy of __x's data.\n \t\t  _M_replace_map(__x, __x.get_allocator());\n@@ -141,8 +141,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \tif (this->_M_impl._M_start._M_cur != this->_M_impl._M_start._M_first)\n \t  {\n \t    _Alloc_traits::construct(this->_M_impl,\n-\t                             this->_M_impl._M_start._M_cur - 1,\n-\t\t\t             std::forward<_Args>(__args)...);\n+\t\t\t\t     this->_M_impl._M_start._M_cur - 1,\n+\t\t\t\t     std::forward<_Args>(__args)...);\n \t    --this->_M_impl._M_start._M_cur;\n \t  }\n \telse\n@@ -166,8 +166,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t    != this->_M_impl._M_finish._M_last - 1)\n \t  {\n \t    _Alloc_traits::construct(this->_M_impl,\n-\t                             this->_M_impl._M_finish._M_cur,\n-\t\t\t             std::forward<_Args>(__args)...);\n+\t\t\t\t     this->_M_impl._M_finish._M_cur,\n+\t\t\t\t     std::forward<_Args>(__args)...);\n \t    ++this->_M_impl._M_finish._M_cur;\n \t  }\n \telse\n@@ -290,13 +290,13 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       _M_assign_aux(_InputIterator __first, _InputIterator __last,\n \t\t    std::input_iterator_tag)\n       {\n-        iterator __cur = begin();\n-        for (; __first != __last && __cur != end(); ++__cur, (void)++__first)\n-          *__cur = *__first;\n-        if (__first == __last)\n-          _M_erase_at_end(__cur);\n-        else\n-          _M_range_insert_aux(end(), __first, __last,\n+\titerator __cur = begin();\n+\tfor (; __first != __last && __cur != end(); ++__cur, (void)++__first)\n+\t  *__cur = *__first;\n+\tif (__first == __last)\n+\t  _M_erase_at_end(__cur);\n+\telse\n+\t  _M_range_insert_aux(end(), __first, __last,\n \t\t\t      std::__iterator_category(__first));\n       }\n \n@@ -339,7 +339,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t    }\n \t}\n       else\n-        _M_insert_aux(__pos, __n, __x);\n+\t_M_insert_aux(__pos, __n, __x);\n     }\n \n #if __cplusplus >= 201103L\n@@ -393,82 +393,82 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n     {\n       _Map_pointer __cur;\n       __try\n-        {\n-          for (__cur = this->_M_impl._M_start._M_node;\n+\t{\n+\t  for (__cur = this->_M_impl._M_start._M_node;\n \t       __cur < this->_M_impl._M_finish._M_node;\n \t       ++__cur)\n-            std::__uninitialized_fill_a(*__cur, *__cur + _S_buffer_size(),\n+\t    std::__uninitialized_fill_a(*__cur, *__cur + _S_buffer_size(),\n \t\t\t\t\t__value, _M_get_Tp_allocator());\n-          std::__uninitialized_fill_a(this->_M_impl._M_finish._M_first,\n+\t  std::__uninitialized_fill_a(this->_M_impl._M_finish._M_first,\n \t\t\t\t      this->_M_impl._M_finish._M_cur,\n \t\t\t\t      __value, _M_get_Tp_allocator());\n-        }\n+\t}\n       __catch(...)\n-        {\n-          std::_Destroy(this->_M_impl._M_start, iterator(*__cur, __cur),\n+\t{\n+\t  std::_Destroy(this->_M_impl._M_start, iterator(*__cur, __cur),\n \t\t\t_M_get_Tp_allocator());\n-          __throw_exception_again;\n-        }\n+\t  __throw_exception_again;\n+\t}\n     }\n \n   template <typename _Tp, typename _Alloc>\n     template <typename _InputIterator>\n       void\n       deque<_Tp, _Alloc>::\n       _M_range_initialize(_InputIterator __first, _InputIterator __last,\n-                          std::input_iterator_tag)\n+\t\t\t  std::input_iterator_tag)\n       {\n-        this->_M_initialize_map(0);\n-        __try\n-          {\n-            for (; __first != __last; ++__first)\n+\tthis->_M_initialize_map(0);\n+\t__try\n+\t  {\n+\t    for (; __first != __last; ++__first)\n #if __cplusplus >= 201103L\n \t      emplace_back(*__first);\n #else\n-              push_back(*__first);\n+\t      push_back(*__first);\n #endif\n-          }\n-        __catch(...)\n-          {\n-            clear();\n-            __throw_exception_again;\n-          }\n+\t  }\n+\t__catch(...)\n+\t  {\n+\t    clear();\n+\t    __throw_exception_again;\n+\t  }\n       }\n \n   template <typename _Tp, typename _Alloc>\n     template <typename _ForwardIterator>\n       void\n       deque<_Tp, _Alloc>::\n       _M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,\n-                          std::forward_iterator_tag)\n+\t\t\t  std::forward_iterator_tag)\n       {\n-        const size_type __n = std::distance(__first, __last);\n-        this->_M_initialize_map(_S_check_init_len(__n, _M_get_Tp_allocator()));\n-\n-        _Map_pointer __cur_node;\n-        __try\n-          {\n-            for (__cur_node = this->_M_impl._M_start._M_node;\n-                 __cur_node < this->_M_impl._M_finish._M_node;\n-                 ++__cur_node)\n+\tconst size_type __n = std::distance(__first, __last);\n+\tthis->_M_initialize_map(_S_check_init_len(__n, _M_get_Tp_allocator()));\n+\n+\t_Map_pointer __cur_node;\n+\t__try\n+\t  {\n+\t    for (__cur_node = this->_M_impl._M_start._M_node;\n+\t\t __cur_node < this->_M_impl._M_finish._M_node;\n+\t\t ++__cur_node)\n \t      {\n \t\t_ForwardIterator __mid = __first;\n \t\tstd::advance(__mid, _S_buffer_size());\n \t\tstd::__uninitialized_copy_a(__first, __mid, *__cur_node,\n \t\t\t\t\t    _M_get_Tp_allocator());\n \t\t__first = __mid;\n \t      }\n-            std::__uninitialized_copy_a(__first, __last,\n+\t    std::__uninitialized_copy_a(__first, __last,\n \t\t\t\t\tthis->_M_impl._M_finish._M_first,\n \t\t\t\t\t_M_get_Tp_allocator());\n-          }\n-        __catch(...)\n-          {\n-            std::_Destroy(this->_M_impl._M_start,\n+\t  }\n+\t__catch(...)\n+\t  {\n+\t    std::_Destroy(this->_M_impl._M_start,\n \t\t\t  iterator(*__cur_node, __cur_node),\n \t\t\t  _M_get_Tp_allocator());\n-            __throw_exception_again;\n-          }\n+\t    __throw_exception_again;\n+\t  }\n       }\n \n   // Called only if _M_impl._M_finish._M_cur == _M_impl._M_finish._M_last - 1.\n@@ -494,8 +494,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t  {\n #if __cplusplus >= 201103L\n \t    _Alloc_traits::construct(this->_M_impl,\n-\t                             this->_M_impl._M_finish._M_cur,\n-\t\t\t             std::forward<_Args>(__args)...);\n+\t\t\t\t     this->_M_impl._M_finish._M_cur,\n+\t\t\t\t     std::forward<_Args>(__args)...);\n #else\n \t    this->_M_impl.construct(this->_M_impl._M_finish._M_cur, __t);\n #endif\n@@ -536,8 +536,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t    this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_last - 1;\n #if __cplusplus >= 201103L\n \t    _Alloc_traits::construct(this->_M_impl,\n-\t                             this->_M_impl._M_start._M_cur,\n-\t\t\t             std::forward<_Args>(__args)...);\n+\t\t\t\t     this->_M_impl._M_start._M_cur,\n+\t\t\t\t     std::forward<_Args>(__args)...);\n #else\n \t    this->_M_impl.construct(this->_M_impl._M_start._M_cur, __t);\n #endif\n@@ -583,20 +583,20 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       void\n       deque<_Tp, _Alloc>::\n       _M_range_insert_aux(iterator __pos,\n-                          _InputIterator __first, _InputIterator __last,\n-                          std::input_iterator_tag)\n+\t\t\t  _InputIterator __first, _InputIterator __last,\n+\t\t\t  std::input_iterator_tag)\n       { std::copy(__first, __last, std::inserter(*this, __pos)); }\n \n   template <typename _Tp, typename _Alloc>\n     template <typename _ForwardIterator>\n       void\n       deque<_Tp, _Alloc>::\n       _M_range_insert_aux(iterator __pos,\n-                          _ForwardIterator __first, _ForwardIterator __last,\n-                          std::forward_iterator_tag)\n+\t\t\t  _ForwardIterator __first, _ForwardIterator __last,\n+\t\t\t  std::forward_iterator_tag)\n       {\n-        const size_type __n = std::distance(__first, __last);\n-        if (__pos._M_cur == this->_M_impl._M_start._M_cur)\n+\tconst size_type __n = std::distance(__first, __last);\n+\tif (__pos._M_cur == this->_M_impl._M_start._M_cur)\n \t  {\n \t    iterator __new_start = _M_reserve_elements_at_front(__n);\n \t    __try\n@@ -612,7 +612,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t\t__throw_exception_again;\n \t      }\n \t  }\n-        else if (__pos._M_cur == this->_M_impl._M_finish._M_cur)\n+\telse if (__pos._M_cur == this->_M_impl._M_finish._M_cur)\n \t  {\n \t    iterator __new_finish = _M_reserve_elements_at_back(__n);\n \t    __try\n@@ -629,8 +629,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t\t__throw_exception_again;\n \t      }\n \t  }\n-        else\n-          _M_insert_aux(__pos, __first, __last, __n);\n+\telse\n+\t  _M_insert_aux(__pos, __first, __last, __n);\n       }\n \n   template<typename _Tp, typename _Alloc>\n@@ -765,12 +765,12 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       void\n       deque<_Tp, _Alloc>::\n       _M_insert_aux(iterator __pos,\n-                    _ForwardIterator __first, _ForwardIterator __last,\n-                    size_type __n)\n+\t\t    _ForwardIterator __first, _ForwardIterator __last,\n+\t\t    size_type __n)\n       {\n-        const difference_type __elemsbefore = __pos - this->_M_impl._M_start;\n-        const size_type __length = size();\n-        if (static_cast<size_type>(__elemsbefore) < __length / 2)\n+\tconst difference_type __elemsbefore = __pos - this->_M_impl._M_start;\n+\tconst size_type __length = size();\n+\tif (static_cast<size_type>(__elemsbefore) < __length / 2)\n \t  {\n \t    iterator __new_start = _M_reserve_elements_at_front(__n);\n \t    iterator __old_start = this->_M_impl._M_start;\n@@ -807,16 +807,16 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t\t__throw_exception_again;\n \t      }\n \t  }\n-        else\n-        {\n-          iterator __new_finish = _M_reserve_elements_at_back(__n);\n-          iterator __old_finish = this->_M_impl._M_finish;\n-          const difference_type __elemsafter =\n-            difference_type(__length) - __elemsbefore;\n-          __pos = this->_M_impl._M_finish - __elemsafter;\n-          __try\n-            {\n-              if (__elemsafter > difference_type(__n))\n+\telse\n+\t{\n+\t  iterator __new_finish = _M_reserve_elements_at_back(__n);\n+\t  iterator __old_finish = this->_M_impl._M_finish;\n+\t  const difference_type __elemsafter =\n+\t    difference_type(__length) - __elemsbefore;\n+\t  __pos = this->_M_impl._M_finish - __elemsafter;\n+\t  __try\n+\t    {\n+\t      if (__elemsafter > difference_type(__n))\n \t\t{\n \t\t  iterator __finish_n = (this->_M_impl._M_finish\n \t\t\t\t\t - difference_type(__n));\n@@ -828,7 +828,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t\t  _GLIBCXX_MOVE_BACKWARD3(__pos, __finish_n, __old_finish);\n \t\t  std::copy(__first, __last, __pos);\n \t\t}\n-              else\n+\t      else\n \t\t{\n \t\t  _ForwardIterator __mid = __first;\n \t\t  std::advance(__mid, __elemsafter);\n@@ -839,14 +839,14 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t\t  this->_M_impl._M_finish = __new_finish;\n \t\t  std::copy(__first, __mid, __pos);\n \t\t}\n-            }\n-          __catch(...)\n-            {\n-              _M_destroy_nodes(this->_M_impl._M_finish._M_node + 1,\n+\t    }\n+\t  __catch(...)\n+\t    {\n+\t      _M_destroy_nodes(this->_M_impl._M_finish._M_node + 1,\n \t\t\t       __new_finish._M_node + 1);\n-              __throw_exception_again;\n-            }\n-        }\n+\t      __throw_exception_again;\n+\t    }\n+\t}\n       }\n \n    template<typename _Tp, typename _Alloc>\n@@ -884,16 +884,16 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       _M_reserve_map_at_front(__new_nodes);\n       size_type __i;\n       __try\n-        {\n-          for (__i = 1; __i <= __new_nodes; ++__i)\n-            *(this->_M_impl._M_start._M_node - __i) = this->_M_allocate_node();\n-        }\n+\t{\n+\t  for (__i = 1; __i <= __new_nodes; ++__i)\n+\t    *(this->_M_impl._M_start._M_node - __i) = this->_M_allocate_node();\n+\t}\n       __catch(...)\n-        {\n-          for (size_type __j = 1; __j < __i; ++__j)\n-            _M_deallocate_node(*(this->_M_impl._M_start._M_node - __j));\n-          __throw_exception_again;\n-        }\n+\t{\n+\t  for (size_type __j = 1; __j < __i; ++__j)\n+\t    _M_deallocate_node(*(this->_M_impl._M_start._M_node - __j));\n+\t  __throw_exception_again;\n+\t}\n     }\n \n   template <typename _Tp, typename _Alloc>\n@@ -909,16 +909,16 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       _M_reserve_map_at_back(__new_nodes);\n       size_type __i;\n       __try\n-        {\n-          for (__i = 1; __i <= __new_nodes; ++__i)\n-            *(this->_M_impl._M_finish._M_node + __i) = this->_M_allocate_node();\n-        }\n+\t{\n+\t  for (__i = 1; __i <= __new_nodes; ++__i)\n+\t    *(this->_M_impl._M_finish._M_node + __i) = this->_M_allocate_node();\n+\t}\n       __catch(...)\n-        {\n-          for (size_type __j = 1; __j < __i; ++__j)\n-            _M_deallocate_node(*(this->_M_impl._M_finish._M_node + __j));\n-          __throw_exception_again;\n-        }\n+\t{\n+\t  for (size_type __j = 1; __j < __i; ++__j)\n+\t    _M_deallocate_node(*(this->_M_impl._M_finish._M_node + __j));\n+\t  __throw_exception_again;\n+\t}\n     }\n \n   template <typename _Tp, typename _Alloc>\n@@ -935,7 +935,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t{\n \t  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size\n \t\t\t\t\t - __new_num_nodes) / 2\n-\t                 + (__add_at_front ? __nodes_to_add : 0);\n+\t\t\t + (__add_at_front ? __nodes_to_add : 0);\n \t  if (__new_nstart < this->_M_impl._M_start._M_node)\n \t    std::copy(this->_M_impl._M_start._M_node,\n \t\t      this->_M_impl._M_finish._M_node + 1,\n@@ -948,12 +948,12 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       else\n \t{\n \t  size_type __new_map_size = this->_M_impl._M_map_size\n-\t                             + std::max(this->_M_impl._M_map_size,\n+\t\t\t\t     + std::max(this->_M_impl._M_map_size,\n \t\t\t\t\t\t__nodes_to_add) + 2;\n \n \t  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);\n \t  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2\n-\t                 + (__add_at_front ? __nodes_to_add : 0);\n+\t\t\t + (__add_at_front ? __nodes_to_add : 0);\n \t  std::copy(this->_M_impl._M_start._M_node,\n \t\t    this->_M_impl._M_finish._M_node + 1,\n \t\t    __new_nstart);"}, {"sha": "7dcb53823c4b0f93b69c5b00a03cc32cd0ae7f1b", "filename": "libstdc++-v3/include/bits/stl_deque.h", "status": "modified", "additions": 106, "deletions": 75, "changes": 181, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f1becb66055c351fb9a44563ce7153dbf6487aa/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f1becb66055c351fb9a44563ce7153dbf6487aa/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h?ref=6f1becb66055c351fb9a44563ce7153dbf6487aa", "patch": "@@ -110,21 +110,19 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n     struct _Deque_iterator\n     {\n #if __cplusplus < 201103L\n-      typedef _Deque_iterator<_Tp, _Tp&, _Tp*>\t     iterator;\n+      typedef _Deque_iterator<_Tp, _Tp&, _Tp*>\t\t   iterator;\n       typedef _Deque_iterator<_Tp, const _Tp&, const _Tp*> const_iterator;\n-      typedef _Tp*\t\t\t\t\t _Elt_pointer;\n-      typedef _Tp**\t\t\t\t\t_Map_pointer;\n+      typedef _Tp*\t\t\t\t\t   _Elt_pointer;\n+      typedef _Tp**\t\t\t\t\t   _Map_pointer;\n #else\n     private:\n-      template<typename _Up>\n-\tusing __ptr_to = typename pointer_traits<_Ptr>::template rebind<_Up>;\n       template<typename _CvTp>\n-\tusing __iter = _Deque_iterator<_Tp, _CvTp&, __ptr_to<_CvTp>>;\n+\tusing __iter = _Deque_iterator<_Tp, _CvTp&, __ptr_rebind<_Ptr, _CvTp>>;\n     public:\n-      typedef __iter<_Tp>\t\titerator;\n-      typedef __iter<const _Tp>\t\tconst_iterator;\n-      typedef __ptr_to<_Tp>\t\t_Elt_pointer;\n-      typedef __ptr_to<_Elt_pointer>\t_Map_pointer;\n+      typedef __iter<_Tp>\t\t\t\t   iterator;\n+      typedef __iter<const _Tp>\t\t\t\t   const_iterator;\n+      typedef __ptr_rebind<_Ptr, _Tp>\t\t\t   _Elt_pointer;\n+      typedef __ptr_rebind<_Ptr, _Elt_pointer>\t\t   _Map_pointer;\n #endif\n \n       static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT\n@@ -158,11 +156,11 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n #else\n       // Conversion from iterator to const_iterator.\n       template<typename _Iter,\n-              typename = _Require<is_same<_Self, const_iterator>,\n-                                  is_same<_Iter, iterator>>>\n+\t      typename = _Require<is_same<_Self, const_iterator>,\n+\t\t\t\t  is_same<_Iter, iterator>>>\n        _Deque_iterator(const _Iter& __x) noexcept\n        : _M_cur(__x._M_cur), _M_first(__x._M_first),\n-         _M_last(__x._M_last), _M_node(__x._M_node) { }\n+\t _M_last(__x._M_last), _M_node(__x._M_node) { }\n \n       _Deque_iterator(const _Deque_iterator&) = default;\n       _Deque_iterator& operator=(const _Deque_iterator&) = default;\n@@ -473,7 +471,6 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t_Map_alloc_type;\n       typedef __gnu_cxx::__alloc_traits<_Map_alloc_type> _Map_alloc_traits;\n \n-    public:\n       typedef _Alloc\t\t  allocator_type;\n \n       allocator_type\n@@ -508,6 +505,10 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t  this->_M_impl._M_swap_data(__x._M_impl);\n       }\n \n+      _Deque_base(_Deque_base&& __x, const allocator_type& __a)\n+      : _M_impl(std::move(__x._M_impl), _Tp_alloc_type(__a))\n+      { __x._M_initialize_map(0); }\n+\n       _Deque_base(_Deque_base&& __x, const allocator_type& __a, size_t __n)\n       : _M_impl(__a)\n       {\n@@ -528,56 +529,73 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n       ~_Deque_base() _GLIBCXX_NOEXCEPT;\n \n-    protected:\n       typedef typename iterator::_Map_pointer _Map_pointer;\n \n-      //This struct encapsulates the implementation of the std::deque\n-      //standard container and at the same time makes use of the EBO\n-      //for empty allocators.\n-      struct _Deque_impl\n-      : public _Tp_alloc_type\n+      struct _Deque_impl_data\n       {\n \t_Map_pointer _M_map;\n \tsize_t _M_map_size;\n \titerator _M_start;\n \titerator _M_finish;\n \n-\t_Deque_impl()\n-\t: _Tp_alloc_type(), _M_map(), _M_map_size(0),\n-\t  _M_start(), _M_finish()\n+\t_Deque_impl_data() _GLIBCXX_NOEXCEPT\n+\t: _M_map(), _M_map_size(), _M_start(), _M_finish()\n+\t{ }\n+\n+#if __cplusplus >= 201103L\n+\t_Deque_impl_data(const _Deque_impl_data&) = default;\n+\t_Deque_impl_data&\n+\toperator=(const _Deque_impl_data&) = default;\n+\n+\t_Deque_impl_data(_Deque_impl_data&& __x) noexcept\n+\t: _Deque_impl_data(__x)\n+\t{ __x = _Deque_impl_data(); }\n+#endif\n+\n+\tvoid\n+\t_M_swap_data(_Deque_impl_data& __x) _GLIBCXX_NOEXCEPT\n+\t{\n+\t  // Do not use std::swap(_M_start, __x._M_start), etc as it loses\n+\t  // information used by TBAA.\n+\t  std::swap(*this, __x);\n+\t}\n+      };\n+\n+      // This struct encapsulates the implementation of the std::deque\n+      // standard container and at the same time makes use of the EBO\n+      // for empty allocators.\n+      struct _Deque_impl\n+      : public _Tp_alloc_type, public _Deque_impl_data\n+      {\n+\t_Deque_impl() _GLIBCXX_NOEXCEPT_IF(\n+\t  is_nothrow_default_constructible<_Tp_alloc_type>::value)\n+\t: _Tp_alloc_type()\n \t{ }\n \n \t_Deque_impl(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT\n-\t: _Tp_alloc_type(__a), _M_map(), _M_map_size(0),\n-\t  _M_start(), _M_finish()\n+\t: _Tp_alloc_type(__a)\n \t{ }\n \n #if __cplusplus >= 201103L\n \t_Deque_impl(_Deque_impl&&) = default;\n \n \t_Deque_impl(_Tp_alloc_type&& __a) noexcept\n-\t: _Tp_alloc_type(std::move(__a)), _M_map(), _M_map_size(0),\n-\t  _M_start(), _M_finish()\n+\t: _Tp_alloc_type(std::move(__a))\n \t{ }\n-#endif\n \n-\tvoid _M_swap_data(_Deque_impl& __x) _GLIBCXX_NOEXCEPT\n-\t{\n-\t  using std::swap;\n-\t  swap(this->_M_start, __x._M_start);\n-\t  swap(this->_M_finish, __x._M_finish);\n-\t  swap(this->_M_map, __x._M_map);\n-\t  swap(this->_M_map_size, __x._M_map_size);\n-\t}\n+\t_Deque_impl(_Deque_impl&& __d, _Tp_alloc_type&& __a)\n+\t: _Tp_alloc_type(std::move(__a)), _Deque_impl_data(std::move(__d))\n+\t{ }\n+#endif\n       };\n \n       _Tp_alloc_type&\n       _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT\n-      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }\n+      { return this->_M_impl; }\n \n       const _Tp_alloc_type&\n       _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT\n-      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }\n+      { return this->_M_impl; }\n \n       _Map_alloc_type\n       _M_get_map_allocator() const _GLIBCXX_NOEXCEPT\n@@ -611,7 +629,6 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t_Map_alloc_traits::deallocate(__map_alloc, __p, __n);\n       }\n \n-    protected:\n       void _M_initialize_map(size_t);\n       void _M_create_nodes(_Map_pointer __nstart, _Map_pointer __nfinish);\n       void _M_destroy_nodes(_Map_pointer __nstart,\n@@ -646,7 +663,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n     _Deque_base<_Tp, _Alloc>::\n     _M_initialize_map(size_t __num_elements)\n     {\n-      const size_t __num_nodes = (__num_elements/ __deque_buf_size(sizeof(_Tp))\n+      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))\n \t\t\t\t  + 1);\n \n       this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,\n@@ -832,7 +849,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       typedef ptrdiff_t\t\t\t\t\tdifference_type;\n       typedef _Alloc\t\t\t\t\tallocator_type;\n \n-    protected:\n+    private:\n       static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT\n       { return __deque_buf_size(sizeof(_Tp)); }\n \n@@ -859,7 +876,11 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       /**\n        *  @brief  Creates a %deque with no elements.\n        */\n-      deque() : _Base() { }\n+#if __cplusplus >= 201103L\n+      deque() = default;\n+#else\n+      deque() { }\n+#endif\n \n       /**\n        *  @brief  Creates a %deque with no elements.\n@@ -928,13 +949,13 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n #if __cplusplus >= 201103L\n       /**\n        *  @brief  %Deque move constructor.\n-       *  @param  __x  A %deque of identical element and allocator types.\n        *\n-       *  The newly-created %deque contains the exact contents of @a __x.\n-       *  The contents of @a __x are a valid, but unspecified %deque.\n+       *  The newly-created %deque contains the exact contents of the\n+       *  moved instance.\n+       *  The contents of the moved instance are a valid, but unspecified\n+       *  %deque.\n        */\n-      deque(deque&& __x)\n-      : _Base(std::move(__x)) { }\n+      deque(deque&&) = default;\n \n       /// Copy constructor with alternative allocator\n       deque(const deque& __x, const allocator_type& __a)\n@@ -945,9 +966,18 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n       /// Move constructor with alternative allocator\n       deque(deque&& __x, const allocator_type& __a)\n+      : deque(std::move(__x), __a, typename _Alloc_traits::is_always_equal{})\n+      { }\n+\n+    private:\n+      deque(deque&& __x, const allocator_type& __a, true_type)\n+      : _Base(std::move(__x), __a)\n+      { }\n+\n+      deque(deque&& __x, const allocator_type& __a, false_type)\n       : _Base(std::move(__x), __a, __x.size())\n       {\n-\tif (__x.get_allocator() != __a)\n+\tif (__x.get_allocator() != __a && !__x.empty())\n \t  {\n \t    std::__uninitialized_move_a(__x.begin(), __x.end(),\n \t\t\t\t\tthis->_M_impl._M_start,\n@@ -956,6 +986,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t  }\n       }\n \n+    public:\n       /**\n        *  @brief  Builds a %deque from an initializer list.\n        *  @param  __l  An initializer_list.\n@@ -997,7 +1028,10 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \tdeque(_InputIterator __first, _InputIterator __last,\n \t      const allocator_type& __a = allocator_type())\n \t: _Base(__a)\n-\t{ _M_initialize_dispatch(__first, __last, __false_type()); }\n+\t{\n+\t  _M_range_initialize(__first, __last,\n+\t\t\t      std::__iterator_category(__first));\n+\t}\n #else\n       template<typename _InputIterator>\n \tdeque(_InputIterator __first, _InputIterator __last,\n@@ -1098,7 +1132,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t       typename = std::_RequireInputIter<_InputIterator>>\n \tvoid\n \tassign(_InputIterator __first, _InputIterator __last)\n-\t{ _M_assign_dispatch(__first, __last, __false_type()); }\n+\t{ _M_assign_aux(__first, __last, std::__iterator_category(__first)); }\n #else\n       template<typename _InputIterator>\n \tvoid\n@@ -1284,14 +1318,6 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        */\n       void\n       resize(size_type __new_size, const value_type& __x)\n-      {\n-\tconst size_type __len = size();\n-\tif (__new_size > __len)\n-\t  _M_fill_insert(this->_M_impl._M_finish, __new_size - __len, __x);\n-\telse if (__new_size < __len)\n-\t  _M_erase_at_end(this->_M_impl._M_start\n-\t\t\t  + difference_type(__new_size));\n-      }\n #else\n       /**\n        *  @brief  Resizes the %deque to the specified number of elements.\n@@ -1306,6 +1332,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        */\n       void\n       resize(size_type __new_size, value_type __x = value_type())\n+#endif\n       {\n \tconst size_type __len = size();\n \tif (__new_size > __len)\n@@ -1314,7 +1341,6 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t  _M_erase_at_end(this->_M_impl._M_start\n \t\t\t  + difference_type(__new_size));\n       }\n-#endif\n \n #if __cplusplus >= 201103L\n       /**  A non-binding request to reduce memory use.  */\n@@ -1555,7 +1581,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \tif (this->_M_impl._M_start._M_cur\n \t    != this->_M_impl._M_start._M_last - 1)\n \t  {\n-\t    _Alloc_traits::destroy(this->_M_impl,\n+\t    _Alloc_traits::destroy(_M_get_Tp_allocator(),\n \t\t\t\t   this->_M_impl._M_start._M_cur);\n \t    ++this->_M_impl._M_start._M_cur;\n \t  }\n@@ -1579,7 +1605,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t    != this->_M_impl._M_finish._M_first)\n \t  {\n \t    --this->_M_impl._M_finish._M_cur;\n-\t    _Alloc_traits::destroy(this->_M_impl,\n+\t    _Alloc_traits::destroy(_M_get_Tp_allocator(),\n \t\t\t\t   this->_M_impl._M_finish._M_cur);\n \t  }\n \telse\n@@ -1643,6 +1669,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  @brief  Inserts an initializer list into the %deque.\n        *  @param  __p  An iterator into the %deque.\n        *  @param  __l  An initializer_list.\n+       *  @return  An iterator that points to the inserted data.\n        *\n        *  This function will insert copies of the data in the\n        *  initializer_list @a __l into the %deque before the location\n@@ -1656,9 +1683,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t\t\t    std::random_access_iterator_tag());\n \treturn begin() + __offset;\n       }\n-#endif\n \n-#if __cplusplus >= 201103L\n       /**\n        *  @brief  Inserts a number of copies of given data into the %deque.\n        *  @param  __position  A const_iterator into the %deque.\n@@ -1710,8 +1735,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t       _InputIterator __last)\n \t{\n \t  difference_type __offset = __position - cbegin();\n-\t  _M_insert_dispatch(__position._M_const_cast(),\n-\t\t\t     __first, __last, __false_type());\n+\t  _M_range_insert_aux(__position._M_const_cast(), __first, __last,\n+\t\t\t      std::__iterator_category(__first));\n \t  return begin() + __offset;\n \t}\n #else\n@@ -1817,6 +1842,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n     protected:\n       // Internal constructor functions follow.\n \n+#if __cplusplus < 201103L\n       // called by the range constructor to implement [23.1.1]/9\n \n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n@@ -1830,6 +1856,17 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t  _M_fill_initialize(__x);\n \t}\n \n+      // called by the range constructor to implement [23.1.1]/9\n+      template<typename _InputIterator>\n+\tvoid\n+\t_M_initialize_dispatch(_InputIterator __first, _InputIterator __last,\n+\t\t\t       __false_type)\n+\t{\n+\t  _M_range_initialize(__first, __last,\n+\t\t\t      std::__iterator_category(__first));\n+\t}\n+#endif\n+\n       static size_t\n       _S_check_init_len(size_t __n, const allocator_type& __a)\n       {\n@@ -1847,16 +1884,6 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \treturn (std::min)(__diffmax, __allocmax);\n       }\n \n-      // called by the range constructor to implement [23.1.1]/9\n-      template<typename _InputIterator>\n-\tvoid\n-\t_M_initialize_dispatch(_InputIterator __first, _InputIterator __last,\n-\t\t\t       __false_type)\n-\t{\n-\t  _M_range_initialize(__first, __last,\n-\t\t\t      std::__iterator_category(__first));\n-\t}\n-\n       // called by the second initialize_dispatch above\n       //@{\n       /**\n@@ -1903,6 +1930,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       // Internal assign functions follow.  The *_aux functions do the actual\n       // assignment work for the range versions.\n \n+#if __cplusplus < 201103L\n       // called by the range assign to implement [23.1.1]/9\n \n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n@@ -1918,6 +1946,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t_M_assign_dispatch(_InputIterator __first, _InputIterator __last,\n \t\t\t   __false_type)\n \t{ _M_assign_aux(__first, __last, std::__iterator_category(__first)); }\n+#endif\n \n       // called by the second assign_dispatch above\n       template<typename _InputIterator>\n@@ -1983,6 +2012,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       // Internal insert functions follow.  The *_aux functions do the actual\n       // insertion work when all shortcuts fail.\n \n+#if __cplusplus < 201103L\n       // called by the range insert to implement [23.1.1]/9\n \n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n@@ -2003,6 +2033,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t  _M_range_insert_aux(__pos, __first, __last,\n \t\t\t      std::__iterator_category(__first));\n \t}\n+#endif\n \n       // called by the second insert_dispatch above\n       template<typename _InputIterator>"}, {"sha": "f6cc61e1fb87b72220a89cd949412c3489af89da", "filename": "libstdc++-v3/testsuite/23_containers/deque/allocator/default_init.cc", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f1becb66055c351fb9a44563ce7153dbf6487aa/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fallocator%2Fdefault_init.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f1becb66055c351fb9a44563ce7153dbf6487aa/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fallocator%2Fdefault_init.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fallocator%2Fdefault_init.cc?ref=6f1becb66055c351fb9a44563ce7153dbf6487aa", "patch": "@@ -0,0 +1,67 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { target c++11 } }\n+// { dg-options \"-O0\" }\n+// { dg-xfail-run-if \"PR c++/65816\" { *-*-* } }\n+\n+#include <deque>\n+#include <testsuite_hooks.h>\n+#include <testsuite_allocator.h>\n+\n+#include <ext/aligned_buffer.h>\n+\n+using T = int;\n+\n+using __gnu_test::default_init_allocator;\n+\n+void test01()\n+{\n+  typedef default_init_allocator<T> alloc_type;\n+  typedef std::deque<T, alloc_type> test_type;\n+\n+  __gnu_cxx::__aligned_buffer<test_type> buf;\n+  __builtin_memset(buf._M_addr(), ~0, sizeof(test_type));\n+\n+  test_type *tmp = ::new(buf._M_addr()) test_type;\n+\n+  VERIFY( tmp->get_allocator().state == 0 );\n+\n+  tmp->~test_type();\n+}\n+\n+void test02()\n+{\n+  typedef default_init_allocator<T> alloc_type;\n+  typedef std::deque<T, alloc_type> test_type;\n+\n+  __gnu_cxx::__aligned_buffer<test_type> buf;\n+  __builtin_memset(buf._M_addr(), ~0, sizeof(test_type));\n+\n+  test_type *tmp = ::new(buf._M_addr()) test_type();\n+\n+  VERIFY( tmp->get_allocator().state == 0 );\n+\n+  tmp->~test_type();\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+  return 0;\n+}"}]}