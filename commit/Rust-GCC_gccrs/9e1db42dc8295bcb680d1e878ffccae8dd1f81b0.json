{"sha": "9e1db42dc8295bcb680d1e878ffccae8dd1f81b0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWUxZGI0MmRjODI5NWJjYjY4MGQxZTg3OGZmY2NhZThkZDFmODFiMA==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@redhat.com", "date": "2005-03-30T06:32:52Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2005-03-30T06:32:52Z"}, "message": "* config/iq2000/iq2000.h (target_flags, MASK_GPOPT, MASK_EMBEDDED_DATA)\n\t(MASK_UNINIT_CONST_IN_RODATA, TARGET_EMBEDDED_DATA, TARGET_SWITCHES)\n\t(TARGET_DEFAULT, TARGET_CPU_DEFAULT, SUBTARGET_TARGET_OPTIONS)\n\t(TARGET_OPTIONS, iq2000_cpu_string, iq2000_arch_string): Delete.\n\t(TARGET_DEBUG_MODE, TARGET_DEBUG_A_MODE, TARGET_DEBUG_B_MODE)\n\t(TARGET_DEBUG_C_MODE, TARGET_DEBUG_D_MODE): Define to 0 rather\n\tthan target_flags & 0.\n\t* config/iq2000/iq2000.c (iq2000_cpu_string, iq2000_arch_string)\n\t(iq2000_arch, iq2000_parse_cpu): Delete.\n\t(TARGET_HANDLE_OPTION): Override default.\n\t(iq2000_handle_option): New function.\n\t(override_options): Remove -march= and -mcpu= handling.\n\t* config/iq2000/iq2000.opt: New file.\n\nFrom-SVN: r97240", "tree": {"sha": "71fdb6a432f9ded2eaa1ecb10d89bb7efa3f2a05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/71fdb6a432f9ded2eaa1ecb10d89bb7efa3f2a05"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9e1db42dc8295bcb680d1e878ffccae8dd1f81b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e1db42dc8295bcb680d1e878ffccae8dd1f81b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e1db42dc8295bcb680d1e878ffccae8dd1f81b0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e1db42dc8295bcb680d1e878ffccae8dd1f81b0/comments", "author": null, "committer": null, "parents": [{"sha": "d12f3c1f9d33ebf6191faa3ffd403e826e206e39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d12f3c1f9d33ebf6191faa3ffd403e826e206e39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d12f3c1f9d33ebf6191faa3ffd403e826e206e39"}], "stats": {"total": 221, "additions": 91, "deletions": 130}, "files": [{"sha": "2f827883422f0df3ede0cff8e9e88ae86940f75e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e1db42dc8295bcb680d1e878ffccae8dd1f81b0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e1db42dc8295bcb680d1e878ffccae8dd1f81b0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9e1db42dc8295bcb680d1e878ffccae8dd1f81b0", "patch": "@@ -1,3 +1,19 @@\n+2005-03-30  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* config/iq2000/iq2000.h (target_flags, MASK_GPOPT, MASK_EMBEDDED_DATA)\n+\t(MASK_UNINIT_CONST_IN_RODATA, TARGET_EMBEDDED_DATA, TARGET_SWITCHES)\n+\t(TARGET_DEFAULT, TARGET_CPU_DEFAULT, SUBTARGET_TARGET_OPTIONS)\n+\t(TARGET_OPTIONS, iq2000_cpu_string, iq2000_arch_string): Delete.\n+\t(TARGET_DEBUG_MODE, TARGET_DEBUG_A_MODE, TARGET_DEBUG_B_MODE)\n+\t(TARGET_DEBUG_C_MODE, TARGET_DEBUG_D_MODE): Define to 0 rather\n+\tthan target_flags & 0.\n+\t* config/iq2000/iq2000.c (iq2000_cpu_string, iq2000_arch_string)\n+\t(iq2000_arch, iq2000_parse_cpu): Delete.\n+\t(TARGET_HANDLE_OPTION): Override default.\n+\t(iq2000_handle_option): New function.\n+\t(override_options): Remove -march= and -mcpu= handling.\n+\t* config/iq2000/iq2000.opt: New file.\n+\n 2005-03-30  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* config/c4x/c4x-protos.h (c4x_rpts_cycles, c4x_cpu_version): Delete."}, {"sha": "b9fa16ac461944afe4e80e085e1bca0d1cc0130b", "filename": "gcc/config/iq2000/iq2000.c", "status": "modified", "additions": 25, "deletions": 66, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e1db42dc8295bcb680d1e878ffccae8dd1f81b0/gcc%2Fconfig%2Fiq2000%2Fiq2000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e1db42dc8295bcb680d1e878ffccae8dd1f81b0/gcc%2Fconfig%2Fiq2000%2Fiq2000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000.c?ref=9e1db42dc8295bcb680d1e878ffccae8dd1f81b0", "patch": "@@ -125,11 +125,6 @@ rtx branch_cmp[2];\n /* What type of branch to use.  */\n enum cmp_type branch_type;\n \n-/* Strings to hold which cpu and instruction set architecture to use.  */\n-const char * iq2000_cpu_string;\t  /* For -mcpu=<xxx>.  */\n-const char * iq2000_arch_string;  /* For -march=<xxx>.  */\n-\n-\n /* Local variables.  */\n \n /* The next branch instruction is a branch likely, not branch normal.  */\n@@ -152,15 +147,13 @@ static rtx iq2000_load_reg2;\n static rtx iq2000_load_reg3;\n static rtx iq2000_load_reg4;\n \n-/* The target cpu for code generation.  */\n-static enum processor_type iq2000_arch;\n-\n /* Mode used for saving/restoring general purpose registers.  */\n static enum machine_mode gpr_mode;\n \n \f\n /* Initialize the GCC target structure.  */\n static struct machine_function* iq2000_init_machine_status (void);\n+static bool iq2000_handle_option      (size_t, const char *, int);\n static void iq2000_select_rtx_section (enum machine_mode, rtx, unsigned HOST_WIDE_INT);\n static void iq2000_init_builtins      (void);\n static rtx  iq2000_expand_builtin     (tree, rtx, rtx, enum machine_mode, int);\n@@ -183,6 +176,8 @@ static int  iq2000_arg_partial_bytes  (CUMULATIVE_ARGS *, enum machine_mode,\n #define TARGET_EXPAND_BUILTIN \t\tiq2000_expand_builtin\n #undef  TARGET_ASM_SELECT_RTX_SECTION\n #define TARGET_ASM_SELECT_RTX_SECTION\tiq2000_select_rtx_section\n+#undef  TARGET_HANDLE_OPTION\n+#define TARGET_HANDLE_OPTION\t\tiq2000_handle_option\n #undef  TARGET_RTX_COSTS\n #define TARGET_RTX_COSTS\t\tiq2000_rtx_costs\n #undef  TARGET_ADDRESS_COST\n@@ -1606,80 +1601,44 @@ iq2000_init_machine_status (void)\n   return f;\n }\n \n-static enum processor_type\n-iq2000_parse_cpu (const char * cpu_string)\n-{\n-  const char *p = cpu_string;\n-  enum processor_type cpu;\n+/* Implement TARGET_HANDLE_OPTION.  */\n \n-  cpu = PROCESSOR_DEFAULT;\n-  switch (p[2])\n+static bool\n+iq2000_handle_option (size_t code, const char *arg, int value ATTRIBUTE_UNUSED)\n+{\n+  switch (code)\n     {\n-    case '1':\n-      if (!strcmp (p, \"iq10\"))\n-\tcpu = PROCESSOR_IQ10;\n-      break;\n-    case '2':\n-      if (!strcmp (p, \"iq2000\"))\n-\tcpu = PROCESSOR_IQ2000;\n-      break;\n-    }\n+    case OPT_mcpu_:\n+      if (strcmp (arg, \"iq10\") == 0)\n+\tiq2000_tune = PROCESSOR_IQ10;\n+      else if (strcmp (arg, \"iq2000\") == 0)\n+\tiq2000_tune = PROCESSOR_IQ2000;\n+      else\n+\treturn false;\n+      return true;\n \n-  return cpu;\n+    case OPT_march_:\n+      /* This option has no effect at the moment.  */\n+      return (strcmp (arg, \"default\") == 0\n+\t      || strcmp (arg, \"DEFAULT\") == 0\n+\t      || strcmp (arg, \"iq2000\") == 0);\n+\n+    default:\n+      return true;\n+    }\n }\n \n /* Detect any conflicts in the switches.  */\n \n void\n override_options (void)\n {\n-  enum processor_type iq2000_cpu;\n-\n   target_flags &= ~MASK_GPOPT;\n \n   iq2000_isa = IQ2000_ISA_DEFAULT;\n \n   /* Identify the processor type.  */\n \n-  if (iq2000_cpu_string != 0)\n-    {\n-      iq2000_cpu = iq2000_parse_cpu (iq2000_cpu_string);\n-      if (iq2000_cpu == PROCESSOR_DEFAULT)\n-\t{\n-\t  error (\"bad value (%s) for -mcpu= switch\", iq2000_arch_string);\n-\t  iq2000_cpu_string = \"default\";\n-\t}\n-      iq2000_arch = iq2000_cpu;\n-      iq2000_tune = iq2000_cpu;\n-    }\n-\n-  if (iq2000_arch_string == 0\n-      || ! strcmp (iq2000_arch_string, \"default\")\n-      || ! strcmp (iq2000_arch_string, \"DEFAULT\"))\n-    {\n-      switch (iq2000_isa)\n-\t{\n-\tdefault:\n-\t  iq2000_arch_string = \"iq2000\";\n-\t  iq2000_arch = PROCESSOR_IQ2000;\n-\t  break;\n-\t}\n-    }\n-  else\n-    {\n-      iq2000_arch = iq2000_parse_cpu (iq2000_arch_string);\n-      if (iq2000_arch == PROCESSOR_DEFAULT)\n-\t{\n-\t  error (\"bad value (%s) for -march= switch\", iq2000_arch_string);\n-\t  iq2000_arch_string = \"default\";\n-\t}\n-      if (iq2000_arch == PROCESSOR_IQ10)\n-\t{\n-\t  error (\"The compiler does not support -march=%s.\", iq2000_arch_string);\n-\t  iq2000_arch_string = \"default\";\n-\t}\n-    }\n-\n   iq2000_print_operand_punct['?'] = 1;\n   iq2000_print_operand_punct['#'] = 1;\n   iq2000_print_operand_punct['&'] = 1;"}, {"sha": "eef6285c27bc299bb2b9776b0c3d16cca5759721", "filename": "gcc/config/iq2000/iq2000.h", "status": "modified", "additions": 5, "deletions": 64, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e1db42dc8295bcb680d1e878ffccae8dd1f81b0/gcc%2Fconfig%2Fiq2000%2Fiq2000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e1db42dc8295bcb680d1e878ffccae8dd1f81b0/gcc%2Fconfig%2Fiq2000%2Fiq2000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000.h?ref=9e1db42dc8295bcb680d1e878ffccae8dd1f81b0", "patch": "@@ -44,73 +44,20 @@\n     }                                           \\\n   while (0)\n \n-extern int\ttarget_flags;\n-\n-#define MASK_GPOPT         0x00000008   /* Optimize for global pointer.  */\n-#define MASK_EMBEDDED_DATA 0x00008000   /* Reduce RAM usage, not fast code.  */\n-#define MASK_UNINIT_CONST_IN_RODATA \\\n-                           0x00800000   /* Store uninitialized\n-                                           consts in rodata.  */\n-\n /* Macros used in the machine description to test the flags.  */\n \n #define TARGET_STATS\t\t0\n \n-/* For embedded systems, optimize for reduced RAM space instead of for\n-   fastest code.  */\n-#define TARGET_EMBEDDED_DATA\t(target_flags & MASK_EMBEDDED_DATA)\n-\n-#define TARGET_DEBUG_MODE\t(target_flags & 0)\n-#define TARGET_DEBUG_A_MODE\t(target_flags & 0)\n-#define TARGET_DEBUG_B_MODE\t(target_flags & 0)\n-#define TARGET_DEBUG_C_MODE\t(target_flags & 0)\n-#define TARGET_DEBUG_D_MODE\t(target_flags & 0)\n-\n-#define TARGET_SWITCHES\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  {\"no-crt0\",          0,                                               \\\n-     N_(\"No default crt0.o\") },\t\t\t\t\t \t\\\n-  {\"gpopt\",\t\t  MASK_GPOPT,\t\t\t\t\t\\\n-     N_(\"Use GP relative sdata/sbss sections\")},\t\t\t\\\n-  {\"no-gpopt\",\t\t -MASK_GPOPT,\t\t\t\t\t\\\n-     N_(\"Don't use GP relative sdata/sbss sections\")},\t\t\t\\\n-  {\"embedded-data\",\t  MASK_EMBEDDED_DATA,\t\t\t\t\\\n-     N_(\"Use ROM instead of RAM\")},\t\t\t\t\t\\\n-  {\"no-embedded-data\",\t -MASK_EMBEDDED_DATA,\t\t\t\t\\\n-     N_(\"Don't use ROM instead of RAM\")},\t\t\t\t\\\n-  {\"uninit-const-in-rodata\", MASK_UNINIT_CONST_IN_RODATA,\t\t\\\n-     N_(\"Put uninitialized constants in ROM (needs -membedded-data)\")},\t\\\n-  {\"no-uninit-const-in-rodata\", -MASK_UNINIT_CONST_IN_RODATA,\t\t\\\n-     N_(\"Don't put uninitialized constants in ROM\")},\t\t\t\\\n-  {\"\",\t\t\t  (TARGET_DEFAULT\t\t\t\t\\\n-\t\t\t   | TARGET_CPU_DEFAULT),\t\t\t\\\n-     NULL},\t\t\t\t\t\t\t\t\\\n-}\n-\n-/* Default target_flags if no switches are specified.  */\n-\n-#define TARGET_DEFAULT 0\n-\n-#ifndef TARGET_CPU_DEFAULT\n-#define TARGET_CPU_DEFAULT 0\n-#endif\n+#define TARGET_DEBUG_MODE\t0\n+#define TARGET_DEBUG_A_MODE\t0\n+#define TARGET_DEBUG_B_MODE\t0\n+#define TARGET_DEBUG_C_MODE\t0\n+#define TARGET_DEBUG_D_MODE\t0\n \n #ifndef IQ2000_ISA_DEFAULT\n #define IQ2000_ISA_DEFAULT 1\n #endif\n \n-#define TARGET_OPTIONS\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  SUBTARGET_TARGET_OPTIONS\t\t\t\t\t\t\\\n-  { \"cpu=\",\t& iq2000_cpu_string,\t\t\t\t\t\\\n-      N_(\"Specify CPU for scheduling purposes\")},\t\t\t\\\n-  { \"arch=\",    & iq2000_arch_string,                                   \\\n-      N_(\"Specify CPU for code generation purposes\")},                  \\\n-}\n-\n-/* This is meant to be redefined in the host dependent files.  */\n-#define SUBTARGET_TARGET_OPTIONS\n-\n #define IQ2000_VERSION \"[1.0]\"\n \n #ifndef MACHINE_TYPE\n@@ -1167,12 +1114,6 @@ extern rtx branch_cmp[2];\n /* What type of branch to use.  */\n extern enum cmp_type branch_type;\n \n-/* Strings to hold which cpu and instruction set architecture to use.  */\n-extern const char * iq2000_cpu_string;\t  /* For -mcpu=<xxx>.  */\n-extern const char * iq2000_arch_string;   /* For -march=<xxx>.  */\n-\n-\n-\n enum iq2000_builtins\n {\n   IQ2000_BUILTIN_ADO16,"}, {"sha": "3b47f3fa56f1fa9ef56d419796482e31588f7677", "filename": "gcc/config/iq2000/iq2000.opt", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e1db42dc8295bcb680d1e878ffccae8dd1f81b0/gcc%2Fconfig%2Fiq2000%2Fiq2000.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e1db42dc8295bcb680d1e878ffccae8dd1f81b0/gcc%2Fconfig%2Fiq2000%2Fiq2000.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000.opt?ref=9e1db42dc8295bcb680d1e878ffccae8dd1f81b0", "patch": "@@ -0,0 +1,45 @@\n+; Options for the Vitesse IQ2000 port of the compiler.\n+\n+; Copyright (C) 2005 Free Software Foundation, Inc.\n+;\n+; This file is part of GCC.\n+;\n+; GCC is free software; you can redistribute it and/or modify it under\n+; the terms of the GNU General Public License as published by the Free\n+; Software Foundation; either version 2, or (at your option) any later\n+; version.\n+;\n+; GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+; WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+; FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+; for more details.\n+;\n+; You should have received a copy of the GNU General Public License\n+; along with GCC; see the file COPYING.  If not, write to the Free\n+; Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n+; 02111-1307, USA.\n+\n+march=\n+Target RejectNegative Joined\n+Specify CPU for code generation purposes\n+\n+mcpu=\n+Target RejectNegative Joined\n+Specify CPU for scheduling purposes\n+\n+membedded-data\n+Target Mask(EMBEDDED_DATA)\n+Use ROM instead of RAM\n+\n+mgpopt\n+Target Mask(GPOPT)\n+Use GP relative sdata/sbss sections\n+\n+; Not used by the compiler proper.\n+mno-crt0\n+Target RejectNegative\n+No default crt0.o\n+\n+muninit-const-in-rodata\n+Target Mask(UNINIT_CONST_IN_RODATA)\n+Put uninitialized constants in ROM (needs -membedded-data)"}]}