{"sha": "2b8327ce6ab70ad4240aa99e6f67d823e5966724", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmI4MzI3Y2U2YWI3MGFkNDI0MGFhOTllNmY2N2Q4MjNlNTk2NjcyNA==", "commit": {"author": {"name": "Francois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2007-07-27T14:26:43Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2007-07-27T14:26:43Z"}, "message": "re PR fortran/32035 ('<anonymous>' may be used uninitialized in this function)\n\n\tPR fortran/32035\n\n\t* trans-stmt.c (gfc_trans_character_select): Replace the\n\tmechanism with labels by a SWITCH_EXPR.\n\t* trans-decl.c (gfc_build_builtin_function_decls): Change\n\treturn type for select_string.\n\n\t* runtime/select.c (select_string): Adjust prototype and function\n\tso that the return value is an integer, not a pointer.\n\n\t* gfortran.dg/select_char_1.f90: New test.\n\nFrom-SVN: r126978", "tree": {"sha": "6147088e80b2ea736c45bd8f73774d61784096d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6147088e80b2ea736c45bd8f73774d61784096d3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2b8327ce6ab70ad4240aa99e6f67d823e5966724", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b8327ce6ab70ad4240aa99e6f67d823e5966724", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b8327ce6ab70ad4240aa99e6f67d823e5966724", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b8327ce6ab70ad4240aa99e6f67d823e5966724/comments", "author": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8fb632ebbee726472d103728d9a14c3bf437999e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fb632ebbee726472d103728d9a14c3bf437999e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8fb632ebbee726472d103728d9a14c3bf437999e"}], "stats": {"total": 167, "additions": 122, "deletions": 45}, "files": [{"sha": "40cd9af9469ec74f02e889f2a8f155a2c72383ef", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b8327ce6ab70ad4240aa99e6f67d823e5966724/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b8327ce6ab70ad4240aa99e6f67d823e5966724/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=2b8327ce6ab70ad4240aa99e6f67d823e5966724", "patch": "@@ -1,3 +1,11 @@\n+2007-07-27  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR fortran/32035\n+\t* trans-stmt.c (gfc_trans_character_select): Replace the\n+\tmechanism with labels by a SWITCH_EXPR.\n+\t* trans-decl.c (gfc_build_builtin_function_decls): Change\n+\treturn type for select_string.\n+\n 2007-07-27  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/32903"}, {"sha": "f2dcec75d98753d4a05a43f2e1e98a3a7ca0dd13", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b8327ce6ab70ad4240aa99e6f67d823e5966724/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b8327ce6ab70ad4240aa99e6f67d823e5966724/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=2b8327ce6ab70ad4240aa99e6f67d823e5966724", "patch": "@@ -2333,7 +2333,7 @@ gfc_build_builtin_function_decls (void)\n \n   gfor_fndecl_select_string =\n     gfc_build_library_function_decl (get_identifier (PREFIX(\"select_string\")),\n-                                     pvoid_type_node, 0);\n+                                     gfc_c_int_type_node, 0);\n \n   gfor_fndecl_runtime_error =\n     gfc_build_library_function_decl (get_identifier (PREFIX(\"runtime_error\")),"}, {"sha": "b19631524b9b8eda9986b0ff4faa329fd07deb2c", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 18, "deletions": 36, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b8327ce6ab70ad4240aa99e6f67d823e5966724/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b8327ce6ab70ad4240aa99e6f67d823e5966724/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=2b8327ce6ab70ad4240aa99e6f67d823e5966724", "patch": "@@ -1319,13 +1319,13 @@ gfc_trans_logical_select (gfc_code * code)\n static tree\n gfc_trans_character_select (gfc_code *code)\n {\n-  tree init, node, end_label, tmp, type, *labels;\n-  tree case_label;\n+  tree init, node, end_label, tmp, type, case_num, label;\n+  tree gfc_c_int_type_node = gfc_get_int_type (gfc_c_int_kind);\n   stmtblock_t block, body;\n   gfc_case *cp, *d;\n   gfc_code *c;\n   gfc_se se;\n-  int i, n;\n+  int n;\n \n   static tree select_struct;\n   static tree ss_string1, ss_string1_len;\n@@ -1351,7 +1351,7 @@ gfc_trans_character_select (gfc_code *code)\n       ADD_FIELD (string2, pchar_type_node);\n       ADD_FIELD (string2_len, gfc_int4_type_node);\n \n-      ADD_FIELD (target, pvoid_type_node);\n+      ADD_FIELD (target, gfc_c_int_type_node);\n #undef ADD_FIELD\n \n       gfc_finish_type (select_struct);\n@@ -1365,20 +1365,6 @@ gfc_trans_character_select (gfc_code *code)\n   for (d = cp; d; d = d->right)\n     d->n = n++;\n \n-  if (n != 0)\n-    labels = gfc_getmem (n * sizeof (tree));\n-  else\n-    labels = NULL;\n-\n-  for(i = 0; i < n; i++)\n-    {\n-      labels[i] = gfc_build_label_decl (NULL_TREE);\n-      TREE_USED (labels[i]) = 1;\n-      /* TODO: The gimplifier should do this for us, but it has\n-         inadequacies when dealing with static initializers.  */\n-      FORCED_LABEL (labels[i]) = 1;\n-    }\n-\n   end_label = gfc_build_label_decl (NULL_TREE);\n \n   /* Generate the body */\n@@ -1389,7 +1375,10 @@ gfc_trans_character_select (gfc_code *code)\n     {\n       for (d = c->ext.case_list; d; d = d->next)\n         {\n-          tmp = build1_v (LABEL_EXPR, labels[d->n]);\n+\t  label = gfc_build_label_decl (NULL_TREE);\n+\t  tmp = build3 (CASE_LABEL_EXPR, void_type_node,\n+\t\t\tbuild_int_cst (NULL_TREE, d->n),\n+\t\t\tbuild_int_cst (NULL_TREE, d->n), label);\n           gfc_add_expr_to_block (&body, tmp);\n         }\n \n@@ -1402,9 +1391,8 @@ gfc_trans_character_select (gfc_code *code)\n \n   /* Generate the structure describing the branches */\n   init = NULL_TREE;\n-  i = 0;\n \n-  for(d = cp; d; d = d->right, i++)\n+  for(d = cp; d; d = d->right)\n     {\n       node = NULL_TREE;\n \n@@ -1437,8 +1425,8 @@ gfc_trans_character_select (gfc_code *code)\n           node = tree_cons (ss_string2_len, se.string_length, node);\n         }\n \n-      tmp = gfc_build_addr_expr (pvoid_type_node, labels[i]);\n-      node = tree_cons (ss_target, tmp, node);\n+      node = tree_cons (ss_target, build_int_cst (gfc_c_int_type_node, d->n),\n+\t\t\tnode);\n \n       tmp = build_constructor_from_list (select_struct, nreverse (node));\n       init = tree_cons (NULL_TREE, tmp, init);\n@@ -1462,33 +1450,27 @@ gfc_trans_character_select (gfc_code *code)\n \n   /* Build the library call */\n   init = gfc_build_addr_expr (pvoid_type_node, init);\n-  tmp = gfc_build_addr_expr (pvoid_type_node, end_label);\n \n   gfc_init_se (&se, NULL);\n   gfc_conv_expr_reference (&se, code->expr);\n \n   gfc_add_block_to_block (&block, &se.pre);\n \n-  tmp = build_call_expr (gfor_fndecl_select_string, 5,\n-\t\t\t init, build_int_cst (NULL_TREE, n),\n-\t\t\t tmp, se.expr, se.string_length);\n-\t\t\t \n-  case_label = gfc_create_var (TREE_TYPE (tmp), \"case_label\");\n-  gfc_add_modify_expr (&block, case_label, tmp);\n+  tmp = build_call_expr (gfor_fndecl_select_string, 4, init,\n+\t\t\t build_int_cst (NULL_TREE, n), se.expr,\n+\t\t\t se.string_length);\n+  case_num = gfc_create_var (gfc_c_int_type_node, \"case_num\");\n+  gfc_add_modify_expr (&block, case_num, tmp);\n \n   gfc_add_block_to_block (&block, &se.post);\n \n-  tmp = build1 (GOTO_EXPR, void_type_node, case_label);\n-  gfc_add_expr_to_block (&block, tmp);\n-\n   tmp = gfc_finish_block (&body);\n+  tmp = build3_v (SWITCH_EXPR, case_num, tmp, NULL_TREE);\n   gfc_add_expr_to_block (&block, tmp);\n+\n   tmp = build1_v (LABEL_EXPR, end_label);\n   gfc_add_expr_to_block (&block, tmp);\n \n-  if (n != 0)\n-    gfc_free (labels);\n-\n   return gfc_finish_block (&block);\n }\n "}, {"sha": "863402c49cb7e105fec9147467e65e63ace8dd2e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b8327ce6ab70ad4240aa99e6f67d823e5966724/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b8327ce6ab70ad4240aa99e6f67d823e5966724/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2b8327ce6ab70ad4240aa99e6f67d823e5966724", "patch": "@@ -1,3 +1,8 @@\n+2007-07-27  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR fortran/32035\n+\t* gfortran.dg/select_char_1.f90: New test.\n+\n 2007-07-27  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/32903"}, {"sha": "83c5268302c9ac1e743720de2358b592ed42298b", "filename": "gcc/testsuite/gfortran.dg/select_char_1.f90", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b8327ce6ab70ad4240aa99e6f67d823e5966724/gcc%2Ftestsuite%2Fgfortran.dg%2Fselect_char_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b8327ce6ab70ad4240aa99e6f67d823e5966724/gcc%2Ftestsuite%2Fgfortran.dg%2Fselect_char_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fselect_char_1.f90?ref=2b8327ce6ab70ad4240aa99e6f67d823e5966724", "patch": "@@ -0,0 +1,76 @@\n+integer function char_select (s)\n+  character(len=*), intent(in) :: s\n+\n+  select case(s)\n+    case (\"foo\")\n+      char_select = 1\n+    case (\"bar\", \"gee\")\n+      char_select = 2\n+    case (\"111\", \"999\")\n+      char_select = 3\n+    case (\"1024\", \"1900\")\n+      char_select = 4\n+    case (\"12\", \"17890\")\n+      char_select = 5\n+    case default\n+      char_select = -1\n+  end select\n+end function char_select\n+\n+integer function char_select2 (s)\n+  character(len=*), intent(in) :: s\n+\n+  char_select2 = -1\n+  select case(s)\n+    case (\"foo\")\n+      char_select2 = 1\n+    case (\"bar\", \"gee\")\n+      char_select2 = 2\n+    case (\"111\", \"999\")\n+      char_select2 = 3\n+    case (\"1024\", \"1900\")\n+      char_select2 = 4\n+    case (\"12\", \"17890\")\n+      char_select2 = 5\n+  end select\n+end function char_select2\n+\n+\n+program test\n+  interface\n+    integer function char_select (s)\n+      character(len=*), intent(in) :: s\n+    end function char_select\n+    integer function char_select2 (s)\n+      character(len=*), intent(in) :: s\n+    end function char_select2\n+  end interface\n+\n+  if (char_select(\"foo\") /= 1) call abort\n+  if (char_select(\"foo \") /= 1) call abort\n+  if (char_select(\"foo2 \") /= -1) call abort\n+  if (char_select(\"bar\") /= 2) call abort\n+  if (char_select(\"gee\") /= 2) call abort\n+  if (char_select(\"000\") /= -1) call abort\n+  if (char_select(\"101\") /= -1) call abort\n+  if (char_select(\"109\") /= -1) call abort\n+  if (char_select(\"111\") /= 3) call abort\n+  if (char_select(\"254\") /= -1) call abort\n+  if (char_select(\"999\") /= 3) call abort\n+  if (char_select(\"9989\") /= -1) call abort\n+  if (char_select(\"1882\") /= -1) call abort\n+\n+  if (char_select2(\"foo\") /= 1) call abort\n+  if (char_select2(\"foo \") /= 1) call abort\n+  if (char_select2(\"foo2 \") /= -1) call abort\n+  if (char_select2(\"bar\") /= 2) call abort\n+  if (char_select2(\"gee\") /= 2) call abort\n+  if (char_select2(\"000\") /= -1) call abort\n+  if (char_select2(\"101\") /= -1) call abort\n+  if (char_select2(\"109\") /= -1) call abort\n+  if (char_select2(\"111\") /= 3) call abort\n+  if (char_select2(\"254\") /= -1) call abort\n+  if (char_select2(\"999\") /= 3) call abort\n+  if (char_select2(\"9989\") /= -1) call abort\n+  if (char_select2(\"1882\") /= -1) call abort\n+end program test"}, {"sha": "fcb5f44e0f6bf437f53af945aade408c3b2c5a65", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b8327ce6ab70ad4240aa99e6f67d823e5966724/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b8327ce6ab70ad4240aa99e6f67d823e5966724/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=2b8327ce6ab70ad4240aa99e6f67d823e5966724", "patch": "@@ -1,3 +1,9 @@\n+2007-07-27  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR fortran/32035\n+\t* runtime/select.c (select_string): Adjust prototype and function\n+\tso that the return value is an integer, not a pointer.\n+\n 2007-07-24  Tobias Burnus  <burnus@net-b.de>\n \n \t* libgfortran.h:  Add bounds_check to compile_options_t."}, {"sha": "cecd02541182489d8db69d823f3f3dffaedda988", "filename": "libgfortran/runtime/select.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b8327ce6ab70ad4240aa99e6f67d823e5966724/libgfortran%2Fruntime%2Fselect.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b8327ce6ab70ad4240aa99e6f67d823e5966724/libgfortran%2Fruntime%2Fselect.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Fselect.c?ref=2b8327ce6ab70ad4240aa99e6f67d823e5966724", "patch": "@@ -35,28 +35,28 @@ typedef struct\n   int low_len;\n   char *high;\n   int high_len;\n-  void *address;\n+  int address;\n }\n select_struct;\n \n-extern void * select_string (select_struct *table, int table_len,\n-\t\t\t     void *default_jump, const char *selector,\n-\t\t\t     int selector_len);\n+extern int select_string (select_struct *table, int table_len,\n+\t\t\t  const char *selector, int selector_len);\n export_proto(select_string);\n \n \n /* select_string()-- Given a selector string and a table of\n  * select_struct structures, return the address to jump to. */\n \n-void *\n-select_string (select_struct *table, int table_len, void *default_jump,\n-\t       const char *selector, int selector_len)\n+int\n+select_string (select_struct *table, int table_len, const char *selector,\n+\t       int selector_len)\n {\n   select_struct *t;\n   int i, low, high, mid;\n+  int default_jump;\n \n   if (table_len == 0)\n-    return default_jump;\n+    return -1;\n \n   /* Record the default address if present */\n "}]}