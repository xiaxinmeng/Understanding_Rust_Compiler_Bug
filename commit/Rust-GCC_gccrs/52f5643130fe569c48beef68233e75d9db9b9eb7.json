{"sha": "52f5643130fe569c48beef68233e75d9db9b9eb7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTJmNTY0MzEzMGZlNTY5YzQ4YmVlZjY4MjMzZTc1ZDlkYjliOWViNw==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2008-02-05T13:33:35Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2008-02-05T13:33:35Z"}, "message": "re PR fortran/34945 (LBOUND fails for array with KIND(complex) used in zero-sized dimension)\n\n2008-02-05  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/34945\n\t* array.c (match_array_element_spec): Remove check for negative\n\tarray size.\n\t(gfc_resolve_array_spec): Add check for negative size.\n\n2008-02-05  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/34945\n\t* gfortran.dg/bounds_check_13.f: New test.\n\nFrom-SVN: r132121", "tree": {"sha": "b5d8b0e680f3ba23ddc5185887ed545c9bc188f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b5d8b0e680f3ba23ddc5185887ed545c9bc188f3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/52f5643130fe569c48beef68233e75d9db9b9eb7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52f5643130fe569c48beef68233e75d9db9b9eb7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52f5643130fe569c48beef68233e75d9db9b9eb7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52f5643130fe569c48beef68233e75d9db9b9eb7/comments", "author": null, "committer": null, "parents": [{"sha": "1db54f4e49894663db378fe462590f7a91ae75ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1db54f4e49894663db378fe462590f7a91ae75ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1db54f4e49894663db378fe462590f7a91ae75ec"}], "stats": {"total": 57, "additions": 48, "deletions": 9}, "files": [{"sha": "b795f897848b5ee51c1a69de67372b54ff14143b", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52f5643130fe569c48beef68233e75d9db9b9eb7/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52f5643130fe569c48beef68233e75d9db9b9eb7/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=52f5643130fe569c48beef68233e75d9db9b9eb7", "patch": "@@ -1,3 +1,10 @@\n+2008-02-05  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/34945\n+\t* array.c (match_array_element_spec): Remove check for negative\n+\tarray size.\n+\t(gfc_resolve_array_spec): Add check for negative size.\n+\n 2008-02-05  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/32315"}, {"sha": "75f80edc3b53658f78be3d1d91bd7581181c8216", "filename": "gcc/fortran/array.c", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52f5643130fe569c48beef68233e75d9db9b9eb7/gcc%2Ffortran%2Farray.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52f5643130fe569c48beef68233e75d9db9b9eb7/gcc%2Ffortran%2Farray.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Farray.c?ref=52f5643130fe569c48beef68233e75d9db9b9eb7", "patch": "@@ -250,6 +250,21 @@ gfc_resolve_array_spec (gfc_array_spec *as, int check_constant)\n       e = as->upper[i];\n       if (resolve_array_bound (e, check_constant) == FAILURE)\n \treturn FAILURE;\n+\n+      if ((as->lower[i] == NULL) || (as->upper[i] == NULL))\n+\tcontinue;\n+\n+      /* If the size is negative in this dimension, set it to zero.  */\n+      if (as->lower[i]->expr_type == EXPR_CONSTANT\n+\t    && as->upper[i]->expr_type == EXPR_CONSTANT\n+\t    && mpz_cmp (as->upper[i]->value.integer,\n+\t\t\tas->lower[i]->value.integer) < 0)\n+\t{\n+\t  gfc_free_expr (as->upper[i]);\n+\t  as->upper[i] = gfc_copy_expr (as->lower[i]);\n+\t  mpz_sub_ui (as->upper[i]->value.integer,\n+\t\t      as->upper[i]->value.integer, 1);\n+\t}\n     }\n \n   return SUCCESS;\n@@ -318,15 +333,6 @@ match_array_element_spec (gfc_array_spec *as)\n   if (m == MATCH_NO)\n     return AS_ASSUMED_SHAPE;\n \n-  /* If the size is negative in this dimension, set it to zero.  */\n-  if ((*lower)->expr_type == EXPR_CONSTANT\n-      && (*upper)->expr_type == EXPR_CONSTANT\n-      && mpz_cmp ((*upper)->value.integer, (*lower)->value.integer) < 0)\n-    {\n-      gfc_free_expr (*upper);\n-      *upper = gfc_copy_expr (*lower);\n-      mpz_sub_ui ((*upper)->value.integer, (*upper)->value.integer, 1);\n-    }\n   return AS_EXPLICIT;\n }\n "}, {"sha": "daf3f078010a5e0c81f74107ec9dfe37d9eb6bee", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52f5643130fe569c48beef68233e75d9db9b9eb7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52f5643130fe569c48beef68233e75d9db9b9eb7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=52f5643130fe569c48beef68233e75d9db9b9eb7", "patch": "@@ -1,3 +1,8 @@\n+2008-02-05  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/34945\n+\t* gfortran.dg/bounds_check_13.f: New test.\n+\n 2008-02-05  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \tPR testsuite/33946"}, {"sha": "3581a18dc35f3ac6f215d5e78032ffc8dfe0d9ca", "filename": "gcc/testsuite/gfortran.dg/bounds_check_13.f", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52f5643130fe569c48beef68233e75d9db9b9eb7/gcc%2Ftestsuite%2Fgfortran.dg%2Fbounds_check_13.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52f5643130fe569c48beef68233e75d9db9b9eb7/gcc%2Ftestsuite%2Fgfortran.dg%2Fbounds_check_13.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbounds_check_13.f?ref=52f5643130fe569c48beef68233e75d9db9b9eb7", "patch": "@@ -0,0 +1,21 @@\n+! { dg-do compile }\n+! Tests the fix for PR34945, in which the lbound = KIND(YDA) was not resolved\n+! in time to set the size of TEST_ARRAY to zero.\n+!\n+! Contributed by Dick Hendrickson <dick.hendrickson@gmail.com>\n+!\n+      SUBROUTINE VF0009(IDA1,IDA2,YDA,HDA)\n+      INTEGER(4) IDA1(4)\n+      INTEGER(4) IDA2(4)\n+      COMPLEX(8) YDA(2)\n+      INTEGER(4) HDA(3)\n+!  I N I T I A L I Z A T I O N  S E C T I O N\n+      COMPLEX(KIND=4) :: TEST_ARRAY\n+     $(  4:5,\n+     $   KIND(YDA):5,\n+     $   4:5,\n+     $   4:5  )\n+!  T E S T  S T A T E M E N T S\n+       IDA1(1:4) = LBOUND(TEST_ARRAY)\n+      END SUBROUTINE\n+"}]}